Title: JUC U.S. East 2015 - Providing a First Class User Experience with Jenkins Plugins
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Peter Vilim, Delphix 

Production Jenkins installations often rely upon a large number of custom scripts and third-party plugins. While this eases initial deployment of Jenkins and allows for greater customization, it can often lead to a worse user experience and hard to debug problems - such as output failures not being properly captured in Jenkins build output. This talk will focus on experiences gained at Delphix writing Jenkins plugins. Delphix is a large user of Jenkins and thousands of builds and all testing at the company are being managed with Jenkins. Recently, work began to write internal plugins for several parts of the Jenkins build infrastructure, including the provisioning of test environments. This talk will demonstrate how these plugins provide an improved user experience - for example, by handling cancelled and failed jobs in a smoother fashion - and make some suggestions about what to focus on when writing your own plugins.
Captions: 
	00:00:15,280 --> 00:00:19,180
alright so before I kick this off

00:00:17,500 --> 00:00:21,939
basically going to be talking about

00:00:19,180 --> 00:00:24,490
plugins with Jenkins and I just wanted

00:00:21,939 --> 00:00:26,650
to get an idea kind of the audience of

00:00:24,490 --> 00:00:28,810
this I could tailor little of what I

00:00:26,650 --> 00:00:31,060
talk so first of all if you could raise

00:00:28,810 --> 00:00:34,350
your hand if you've installed a Jenkins

00:00:31,060 --> 00:00:37,809
plugin before into a Jenkins instance

00:00:34,350 --> 00:00:39,750
great and then also if you could raise

00:00:37,809 --> 00:00:44,980
your hand if you've developed your own

00:00:39,750 --> 00:00:46,899
custom Jenkins plugin alright so a few

00:00:44,980 --> 00:00:48,339
people so just wanted to get a general

00:00:46,899 --> 00:00:51,280
idea so I can tell her what I talked

00:00:48,339 --> 00:00:53,530
about here then all right so the topic

00:00:51,280 --> 00:00:55,890
of this talk is providing a first-class

00:00:53,530 --> 00:00:58,600
user experience with Jenkins plugins and

00:00:55,890 --> 00:01:01,089
really what this talk is meant to do is

00:00:58,600 --> 00:01:03,390
focus on how you can provide a really

00:01:01,089 --> 00:01:06,340
good experience with the Jenkins plugin

00:01:03,390 --> 00:01:08,890
that you can't mimic with a typical on

00:01:06,340 --> 00:01:10,479
like shell scripting or Python scripting

00:01:08,890 --> 00:01:12,729
or other means of interacting with

00:01:10,479 --> 00:01:14,680
Jenkins and kind of to outline some of

00:01:12,729 --> 00:01:15,970
the benefits of using plugins and

00:01:14,680 --> 00:01:18,159
hopefully to motivate you to be

00:01:15,970 --> 00:01:21,759
interested in potentially developing

00:01:18,159 --> 00:01:23,140
your own plugins in addition to that if

00:01:21,759 --> 00:01:24,640
you aren't interest in developing your

00:01:23,140 --> 00:01:26,200
own plugins you can at least get an idea

00:01:24,640 --> 00:01:28,960
of what to look for in plugins that you

00:01:26,200 --> 00:01:31,780
choose so first of all give a overview

00:01:28,960 --> 00:01:34,360
of plugins and Jenkins so the first

00:01:31,780 --> 00:01:36,130
question is why use plugins at all this

00:01:34,360 --> 00:01:37,659
kind of goes back to the question of why

00:01:36,130 --> 00:01:39,070
you would want to use Jenkins at all in

00:01:37,659 --> 00:01:41,409
the first place technically if you look

00:01:39,070 --> 00:01:43,240
at Jenkins you could replicate a lot of

00:01:41,409 --> 00:01:45,280
Jenkins by just taking a lot of shell

00:01:43,240 --> 00:01:48,450
script and a bunch of Python and various

00:01:45,280 --> 00:01:51,070
other languages and tying it together

00:01:48,450 --> 00:01:52,689
but the predict the result that you

00:01:51,070 --> 00:01:54,490
would get of trying to replicate Jenkins

00:01:52,689 --> 00:01:56,229
that way wouldn't be that good I'd

00:01:54,490 --> 00:01:57,909
probably have a lot of bugs it wouldn't

00:01:56,229 --> 00:02:00,460
be that polished and it provide a poor

00:01:57,909 --> 00:02:02,049
user experience and you can really apply

00:02:00,460 --> 00:02:04,450
that thinking then to why you would want

00:02:02,049 --> 00:02:06,429
to potentially use plugins and the idea

00:02:04,450 --> 00:02:08,350
behind plugins is it makes integration

00:02:06,429 --> 00:02:09,940
with Jenkins really seamless and

00:02:08,350 --> 00:02:13,120
provides a really good user experience

00:02:09,940 --> 00:02:15,190
and a bit here i'll be explaining what

00:02:13,120 --> 00:02:17,500
zach with that user experiences and what

00:02:15,190 --> 00:02:19,420
it provides so as you probably know if

00:02:17,500 --> 00:02:21,250
you go to the jenkins co.org the

00:02:19,420 --> 00:02:23,230
homepage there are currently over a

00:02:21,250 --> 00:02:24,760
thousand plugins available so there's

00:02:23,230 --> 00:02:26,960
obviously a lot of people developing

00:02:24,760 --> 00:02:28,580
these and the community around plugin

00:02:26,960 --> 00:02:30,710
is growing really fast and also

00:02:28,580 --> 00:02:32,450
demonstrate that there's demand for them

00:02:30,710 --> 00:02:34,790
and that they obviously provide some

00:02:32,450 --> 00:02:35,810
value the other thing I wanted to

00:02:34,790 --> 00:02:37,190
mention right now is that there's

00:02:35,810 --> 00:02:40,310
absolutely excellent documentation

00:02:37,190 --> 00:02:43,070
available both on the plugins and on

00:02:40,310 --> 00:02:45,080
developing plugins there's a link right

00:02:43,070 --> 00:02:47,180
on the main homepage about developing

00:02:45,080 --> 00:02:49,310
plugins and when I've done plug-in

00:02:47,180 --> 00:02:52,490
development myself that was primarily

00:02:49,310 --> 00:02:54,440
the docs that I related to also looked a

00:02:52,490 --> 00:02:56,510
little on github for some code examples

00:02:54,440 --> 00:02:58,190
but the actual documentation on

00:02:56,510 --> 00:03:00,920
developing plugins on the main jenkins

00:02:58,190 --> 00:03:03,560
said is quite good and you can basically

00:03:00,920 --> 00:03:05,690
extend nearly any aspect of Jenkins with

00:03:03,560 --> 00:03:08,660
plugins the plug-in model which I'll

00:03:05,690 --> 00:03:11,950
describe in a bit is very thorough and

00:03:08,660 --> 00:03:15,080
gives you quite a few extension points

00:03:11,950 --> 00:03:15,890
all right so before I dive into plugins

00:03:15,080 --> 00:03:19,070
I wanted to just give a little

00:03:15,890 --> 00:03:21,680
background about myself and the youth

00:03:19,070 --> 00:03:24,200
way that I've used Jenkins so I used it

00:03:21,680 --> 00:03:26,210
a bit in our graduate school and then

00:03:24,200 --> 00:03:27,890
after graduate school I've used a lot at

00:03:26,210 --> 00:03:30,680
the company that I joined which is

00:03:27,890 --> 00:03:34,550
Delphic sits about a 300 person company

00:03:30,680 --> 00:03:36,830
on San Francisco and we do basically

00:03:34,550 --> 00:03:39,140
database virtualization would be our

00:03:36,830 --> 00:03:41,000
core product or as we call it data as a

00:03:39,140 --> 00:03:44,510
service and the idea is to provide data

00:03:41,000 --> 00:03:46,520
to people wherever they need it and i'll

00:03:44,510 --> 00:03:49,760
be giving a short demo here of how

00:03:46,520 --> 00:03:51,860
jenkins relates to that so the way that

00:03:49,760 --> 00:03:54,620
we use jenkins internally it's really at

00:03:51,860 --> 00:03:56,750
the core of our development process all

00:03:54,620 --> 00:03:58,610
of the key automated quality assurance

00:03:56,750 --> 00:04:00,380
and testing and then the assembly of the

00:03:58,610 --> 00:04:02,270
software is all automated through

00:04:00,380 --> 00:04:04,760
jenkins so it's at the very core of how

00:04:02,270 --> 00:04:06,730
we develop software at dell fix we have

00:04:04,760 --> 00:04:08,990
thousands of jobs which are run daily

00:04:06,730 --> 00:04:12,380
myself personally i would say i run

00:04:08,990 --> 00:04:14,300
about 10 to 20 jenkins jobs daily as a

00:04:12,380 --> 00:04:16,460
developer and that's probably typical of

00:04:14,300 --> 00:04:19,970
any software engineer who's working at

00:04:16,460 --> 00:04:21,170
dell fix now we do a bunch of the three

00:04:19,970 --> 00:04:23,210
different things that were outlined in

00:04:21,170 --> 00:04:25,550
the keynote for how jenkins is used

00:04:23,210 --> 00:04:28,460
traditionally which is nightly QA

00:04:25,550 --> 00:04:30,290
automation runs that we do we also have

00:04:28,460 --> 00:04:32,210
jobs that you kick off yourself as a

00:04:30,290 --> 00:04:35,390
developer before you commit code in

00:04:32,210 --> 00:04:38,440
order to test your code and then also we

00:04:35,390 --> 00:04:40,240
have jobs that are used to provide

00:04:38,440 --> 00:04:42,400
bundling and packaging

00:04:40,240 --> 00:04:44,860
offer so our software product is sold as

00:04:42,400 --> 00:04:47,080
basically a set of binary switch we

00:04:44,860 --> 00:04:49,090
packaged into a virtual machine is then

00:04:47,080 --> 00:04:51,039
sold declines I we don't have something

00:04:49,090 --> 00:04:52,690
like a service-oriented architecture

00:04:51,039 --> 00:04:55,449
that you're pushing to basically we ship

00:04:52,690 --> 00:04:57,130
a virtual machine as our product and so

00:04:55,449 --> 00:04:59,050
the Assembly of all the different pieces

00:04:57,130 --> 00:05:00,580
of software that we do since we do all

00:04:59,050 --> 00:05:01,990
the way from we have kernel developers

00:05:00,580 --> 00:05:03,759
working at the company all the way up

00:05:01,990 --> 00:05:05,440
the application stack to I mean java

00:05:03,759 --> 00:05:07,810
application then a front end that's all

00:05:05,440 --> 00:05:09,280
done the final assembly is automated

00:05:07,810 --> 00:05:11,889
through Jenkins as well as the testing

00:05:09,280 --> 00:05:13,419
and we also use it's important to you

00:05:11,889 --> 00:05:15,520
point out a bunch of other different

00:05:13,419 --> 00:05:17,199
tools two of them I wanted to mention

00:05:15,520 --> 00:05:18,970
where ansible and vagrant we use a lot

00:05:17,199 --> 00:05:21,039
of virtual machines for our testing and

00:05:18,970 --> 00:05:23,590
these are integrated with Jenkins as

00:05:21,039 --> 00:05:25,840
well and then the jobs can take 12 12

00:05:23,590 --> 00:05:27,520
hours so typically pre-commit or your

00:05:25,840 --> 00:05:29,020
code check in will take about an hour to

00:05:27,520 --> 00:05:31,569
run all those tests but then we also

00:05:29,020 --> 00:05:33,880
have nightly runs that take about 12

00:05:31,569 --> 00:05:35,620
hours to run so I just wanted to give a

00:05:33,880 --> 00:05:37,240
brief overview of generally where I'm

00:05:35,620 --> 00:05:42,039
coming from and the ways in which we use

00:05:37,240 --> 00:05:44,050
Jenkins at Dell fix all right so the

00:05:42,039 --> 00:05:47,710
next question is what makes a successful

00:05:44,050 --> 00:05:49,150
plugin and so really the first question

00:05:47,710 --> 00:05:51,250
that you should ask whenever you look at

00:05:49,150 --> 00:05:52,810
a plugin is should this be managed in

00:05:51,250 --> 00:05:54,759
Jenkins and write this slide here

00:05:52,810 --> 00:05:56,380
basically is if you take any way

00:05:54,759 --> 00:05:59,050
anything away from my speech it's

00:05:56,380 --> 00:06:00,639
basically this slide here so Jenkins

00:05:59,050 --> 00:06:03,550
provides you a lot of different features

00:06:00,639 --> 00:06:05,530
and with anything that provides you that

00:06:03,550 --> 00:06:07,300
many features and as I just point out at

00:06:05,530 --> 00:06:08,830
Delphic for instance is so cork to

00:06:07,300 --> 00:06:10,930
entice together so many of your

00:06:08,830 --> 00:06:13,120
different development practices there's

00:06:10,930 --> 00:06:14,830
a temptation to start to just pull in

00:06:13,120 --> 00:06:17,770
every little piece of development

00:06:14,830 --> 00:06:19,300
process into it and kind of recreate the

00:06:17,770 --> 00:06:22,509
wheel with various things that already

00:06:19,300 --> 00:06:24,280
exist so first of all it's you should be

00:06:22,509 --> 00:06:25,930
choosing stuff if there's already a good

00:06:24,280 --> 00:06:28,180
tool out there that does what you need

00:06:25,930 --> 00:06:29,440
integrate it with Jenkins as opposed to

00:06:28,180 --> 00:06:33,159
trying to just recreate the entire

00:06:29,440 --> 00:06:35,860
process in Jenkins and then finally it

00:06:33,159 --> 00:06:37,419
should build around Jenkins strengths so

00:06:35,860 --> 00:06:39,759
Jenkins has a lot of different strengths

00:06:37,419 --> 00:06:41,440
to it and what I'm going to do in this

00:06:39,759 --> 00:06:43,210
speech is outlined several different of

00:06:41,440 --> 00:06:45,310
the what I consider the key strengths of

00:06:43,210 --> 00:06:47,080
Jenkins and it's my belief that any

00:06:45,310 --> 00:06:48,339
plug-in should leverage these key

00:06:47,080 --> 00:06:49,990
strengths and that'll give you a

00:06:48,339 --> 00:06:51,800
successful plugin so if you're

00:06:49,990 --> 00:06:53,509
considering whether or not you want to

00:06:51,800 --> 00:06:55,849
either use a plug-in that you found

00:06:53,509 --> 00:06:58,819
online there's over a thousand of them

00:06:55,849 --> 00:07:00,830
now or develop your own plug-in that's

00:06:58,819 --> 00:07:02,840
really the way to evaluate is does this

00:07:00,830 --> 00:07:04,970
go to a core strength of Jenkins and

00:07:02,840 --> 00:07:06,259
extend and enhance that core strength if

00:07:04,970 --> 00:07:07,699
it's outside of one of those core

00:07:06,259 --> 00:07:09,889
strengths it might be worth considering

00:07:07,699 --> 00:07:11,539
if there's another external tool that

00:07:09,889 --> 00:07:13,310
you can use in order to accomplish that

00:07:11,539 --> 00:07:17,270
and then integrate that external tool

00:07:13,310 --> 00:07:18,500
with Jenkins all right so really quickly

00:07:17,270 --> 00:07:20,120
I wanted to then go through what I

00:07:18,500 --> 00:07:22,250
consider to be the core strengths of

00:07:20,120 --> 00:07:24,440
Jenkins and I wouldn't consider this an

00:07:22,250 --> 00:07:25,789
exhaustive or perfect list I'm sure if

00:07:24,440 --> 00:07:27,169
you had debate with anyone they'd be

00:07:25,789 --> 00:07:29,840
able to come up with what they consider

00:07:27,169 --> 00:07:32,050
their key strengths of Jenkins the first

00:07:29,840 --> 00:07:34,490
one is organization and centralization

00:07:32,050 --> 00:07:35,990
so basically what Jenkins provides is a

00:07:34,490 --> 00:07:38,870
central place that all of your

00:07:35,990 --> 00:07:40,490
developers QA and people can access in

00:07:38,870 --> 00:07:42,979
order to organize the development of

00:07:40,490 --> 00:07:45,500
software provides reproducible

00:07:42,979 --> 00:07:47,539
operations this is you could contrast

00:07:45,500 --> 00:07:49,159
this with the idea of developers for

00:07:47,539 --> 00:07:51,469
instance just running all their tests on

00:07:49,159 --> 00:07:53,569
their personal laptops in different

00:07:51,469 --> 00:07:57,020
environments and that doesn't give you

00:07:53,569 --> 00:07:58,520
good reproducibility the other one and

00:07:57,020 --> 00:08:01,340
this one actually gets overlooked a lot

00:07:58,520 --> 00:08:03,289
is logging because people just generally

00:08:01,340 --> 00:08:05,419
take it for granted but when I'm giving

00:08:03,289 --> 00:08:06,710
this demo here of a plug in a second

00:08:05,419 --> 00:08:09,289
hairline to kind of point out why this

00:08:06,710 --> 00:08:11,270
is important and logging basically gives

00:08:09,289 --> 00:08:12,770
you a way to understand what happened

00:08:11,270 --> 00:08:15,199
with your Jenkins job so if you have

00:08:12,770 --> 00:08:16,580
nightly runs and something happens with

00:08:15,199 --> 00:08:18,199
your job that gives you a way to look

00:08:16,580 --> 00:08:20,659
the next morning and figure out if

00:08:18,199 --> 00:08:22,190
something needs to be fixed it's kind of

00:08:20,659 --> 00:08:25,449
an overlooked point but I think really

00:08:22,190 --> 00:08:27,949
important next one is archiving

00:08:25,449 --> 00:08:31,639
basically most Jenkins jobs produce

00:08:27,949 --> 00:08:33,770
artifacts as a result be they packages a

00:08:31,639 --> 00:08:36,050
virtual machine package or some set of

00:08:33,770 --> 00:08:38,570
binary and having those archives

00:08:36,050 --> 00:08:41,599
somewhere in a easy to understand

00:08:38,570 --> 00:08:43,219
structure can be quite beneficial for

00:08:41,599 --> 00:08:46,430
looking back if you need to debug

00:08:43,219 --> 00:08:48,649
something in the future simplicity it as

00:08:46,430 --> 00:08:50,980
a front-end interface which will make

00:08:48,649 --> 00:08:53,930
setting up and configuring jobs easier

00:08:50,980 --> 00:08:55,640
if you are only using for instance

00:08:53,930 --> 00:08:57,470
text-based config files although those

00:08:55,640 --> 00:08:58,940
have their own set of advantages with

00:08:57,470 --> 00:09:02,720
being able to keep them in virgin

00:08:58,940 --> 00:09:04,100
control modularity this goes to the idea

00:09:02,720 --> 00:09:05,720
of plugins and

00:09:04,100 --> 00:09:08,480
straight some of the later in the speech

00:09:05,720 --> 00:09:11,870
some of the advantages that you get from

00:09:08,480 --> 00:09:14,060
using plugins a graphical user interface

00:09:11,870 --> 00:09:16,220
which makes configuring it easier and

00:09:14,060 --> 00:09:18,019
then finally distributed build so

00:09:16,220 --> 00:09:19,490
anywhere where you start to use Jenkins

00:09:18,019 --> 00:09:21,290
a lot you're eventually going to have a

00:09:19,490 --> 00:09:22,819
bunch of different slave nodes hanging

00:09:21,290 --> 00:09:25,100
off of it because you just simply can't

00:09:22,819 --> 00:09:27,519
get one computer that's beefy enough in

00:09:25,100 --> 00:09:30,139
order to run all of your jobs and

00:09:27,519 --> 00:09:32,180
Jenkins if you use it from a user

00:09:30,139 --> 00:09:34,490
interface perspective it's pretty easy

00:09:32,180 --> 00:09:37,040
to add slave nodes that you then push

00:09:34,490 --> 00:09:39,410
the Java environment on to and you can

00:09:37,040 --> 00:09:41,269
transparently do your bills if you look

00:09:39,410 --> 00:09:43,279
then at the way the plug-in developments

00:09:41,269 --> 00:09:45,560
done it's actually just as transparent

00:09:43,279 --> 00:09:47,899
and easy to do it's very very easy to

00:09:45,560 --> 00:09:49,100
make a plug-in distribute in there and

00:09:47,899 --> 00:09:51,440
I've read through a decent number of

00:09:49,100 --> 00:09:52,970
them on github and actually a fair

00:09:51,440 --> 00:09:55,579
number of them don't end up supporting

00:09:52,970 --> 00:09:56,839
distributed builds but if you go if

00:09:55,579 --> 00:09:58,790
you're thinking about developing your

00:09:56,839 --> 00:10:01,899
own plugins it's actually pretty easy to

00:09:58,790 --> 00:10:04,190
do and I'll explain why in a bit here

00:10:01,899 --> 00:10:07,880
alright so I wanted to do a quick demo

00:10:04,190 --> 00:10:09,680
here of a plug-in that I developed and

00:10:07,880 --> 00:10:11,509
this will just kind of demonstrate what

00:10:09,680 --> 00:10:14,180
I think are some of the key core

00:10:11,509 --> 00:10:15,589
strengths now there are plugins that

00:10:14,180 --> 00:10:17,930
I've developed that are much more

00:10:15,589 --> 00:10:20,660
extensive well tested their up on my

00:10:17,930 --> 00:10:22,130
github but this one actually was only

00:10:20,660 --> 00:10:24,560
done in about 12 hours at a hackathon

00:10:22,130 --> 00:10:26,060
and the reason why I chose to do this

00:10:24,560 --> 00:10:27,560
one is one of the ones that put a lot

00:10:26,060 --> 00:10:28,880
more time into is I wanted to

00:10:27,560 --> 00:10:30,500
demonstrate something that you can do in

00:10:28,880 --> 00:10:33,139
just a few hours and gets you a lot of

00:10:30,500 --> 00:10:35,329
benefits from that and that's part of

00:10:33,139 --> 00:10:37,970
the idea that I want to delay that it's

00:10:35,329 --> 00:10:41,089
a lot of work to develop Jenkins plugins

00:10:37,970 --> 00:10:42,259
or a extensive time investment you can

00:10:41,089 --> 00:10:46,160
actually get something that's pretty

00:10:42,259 --> 00:10:48,170
good pretty quick so the Jenkins plug-in

00:10:46,160 --> 00:10:50,060
that I developed here basically connects

00:10:48,170 --> 00:10:52,009
to a dell fix engine which is the

00:10:50,060 --> 00:10:54,319
product my company uses basically I

00:10:52,009 --> 00:10:56,389
wanted to make a custom plug-in to match

00:10:54,319 --> 00:10:58,069
it so usually you can find open source

00:10:56,389 --> 00:10:59,930
plugins for a lawyer uses but if you're

00:10:58,069 --> 00:11:01,670
developing your own internal plug-in

00:10:59,930 --> 00:11:03,019
maybe you want to make our own internal

00:11:01,670 --> 00:11:04,730
product maybe you want to make a plug-in

00:11:03,019 --> 00:11:06,220
that goes with your internal product in

00:11:04,730 --> 00:11:10,519
which case you won't be able to find any

00:11:06,220 --> 00:11:12,140
open source plug-ins for that so just to

00:11:10,519 --> 00:11:14,750
get started here let me

00:11:12,140 --> 00:11:17,270
this page real quick and this is

00:11:14,750 --> 00:11:19,910
instance of Jenkins I've running and

00:11:17,270 --> 00:11:23,210
then here's the company's product here

00:11:19,910 --> 00:11:25,850
and basically the idea behind this is we

00:11:23,210 --> 00:11:27,890
use this plugin internally for testing

00:11:25,850 --> 00:11:29,840
more advanced version of it than what

00:11:27,890 --> 00:11:32,150
I'm going to be demoing here and the

00:11:29,840 --> 00:11:35,000
idea that is to connect to one of our

00:11:32,150 --> 00:11:36,620
engines take some source databases and

00:11:35,000 --> 00:11:40,250
spin up some virtual copies of those

00:11:36,620 --> 00:11:41,960
databases so first of all I was going to

00:11:40,250 --> 00:11:44,410
show the main configuration page of

00:11:41,960 --> 00:11:44,410
Jenkins

00:11:56,760 --> 00:12:00,240
alright so if you see here I added

00:11:58,650 --> 00:12:02,310
several fields to this so there's the

00:12:00,240 --> 00:12:04,470
main configuration page it's easy to add

00:12:02,310 --> 00:12:07,320
configuration page fields here for your

00:12:04,470 --> 00:12:08,760
plug in it as the address of the Delphic

00:12:07,320 --> 00:12:11,550
Sinjin it has the username and the

00:12:08,760 --> 00:12:13,650
password for how to connect to it and

00:12:11,550 --> 00:12:15,060
then if we scroll up here so that's the

00:12:13,650 --> 00:12:20,030
initial configuration we're going to

00:12:15,060 --> 00:12:20,030
scroll up then and set up a new job

00:12:35,450 --> 00:12:40,250
and the idea behind this job is we want

00:12:38,090 --> 00:12:42,410
to do some potentially destructive

00:12:40,250 --> 00:12:44,720
testing by that it mean we're going to

00:12:42,410 --> 00:12:47,630
have some various resources that we use

00:12:44,720 --> 00:12:49,690
will make changes to those resources and

00:12:47,630 --> 00:12:51,980
then later disposed of those resources

00:12:49,690 --> 00:12:54,020
so what this plug-in does is it just

00:12:51,980 --> 00:12:56,240
provides a way to do add build steps

00:12:54,020 --> 00:13:00,410
that relate to the products okay i'm

00:12:56,240 --> 00:13:02,870
going to add to build steps and in these

00:13:00,410 --> 00:13:05,300
build steps you can see these are three

00:13:02,870 --> 00:13:07,610
source databases which can be found in

00:13:05,300 --> 00:13:09,560
the Delphic Sinjin over here that are

00:13:07,610 --> 00:13:10,640
automatically populated in so that's one

00:13:09,560 --> 00:13:12,500
of the first points they wanted to

00:13:10,640 --> 00:13:13,940
highlight is there is an API query and

00:13:12,500 --> 00:13:16,520
the plug-in that went on behind the

00:13:13,940 --> 00:13:17,930
scenes to pre-populate that list so

00:13:16,520 --> 00:13:19,610
that's why I manage oftentimes if you

00:13:17,930 --> 00:13:21,860
look at plugins online they'll just have

00:13:19,610 --> 00:13:24,110
big text boxes that you type things in

00:13:21,860 --> 00:13:26,600
but whenever possible try to restrict

00:13:24,110 --> 00:13:28,880
your UI you can use API queries or other

00:13:26,600 --> 00:13:31,520
means on the backend to pre-populate a

00:13:28,880 --> 00:13:34,010
list and make it easier to set up and

00:13:31,520 --> 00:13:35,840
use your plugin all right so I add these

00:13:34,010 --> 00:13:37,070
to build steps the idea behind these is

00:13:35,840 --> 00:13:38,690
that they're going to provision out to

00:13:37,070 --> 00:13:40,730
virtual databases which can be used for

00:13:38,690 --> 00:13:42,770
testing and then after the testing

00:13:40,730 --> 00:13:44,930
complete still destroy those databases

00:13:42,770 --> 00:13:47,470
so I'm going to save this job and I'm

00:13:44,930 --> 00:13:47,470
going to run it

00:13:52,769 --> 00:13:56,910
and let's go to the running job all

00:13:55,439 --> 00:13:58,800
right so this is the next thing then

00:13:56,910 --> 00:14:00,059
that I want to highlight two things here

00:13:58,800 --> 00:14:02,009
so first of all you see that there's

00:14:00,059 --> 00:14:03,449
some text output here that we're getting

00:14:02,009 --> 00:14:05,009
logging this is one of the things I

00:14:03,449 --> 00:14:07,559
mentioned earlier about how people take

00:14:05,009 --> 00:14:09,660
logging for granted so this logging

00:14:07,559 --> 00:14:11,699
actually is coming in made API queries

00:14:09,660 --> 00:14:13,589
in order to spin up these virtual

00:14:11,699 --> 00:14:15,569
databases if we go back to here to the

00:14:13,589 --> 00:14:17,100
UI of the Delphic Sinjin you can see one

00:14:15,569 --> 00:14:19,799
of the virtual databases that is being

00:14:17,100 --> 00:14:21,540
spun up here as a progress indicator but

00:14:19,799 --> 00:14:23,189
the idea behind this is that someone can

00:14:21,540 --> 00:14:24,869
just use the Jenkins plug-in they don't

00:14:23,189 --> 00:14:26,639
have to go to this interface at all they

00:14:24,869 --> 00:14:28,679
can just use the Jenkins plug-in or to

00:14:26,639 --> 00:14:30,239
spin up their databases and you get the

00:14:28,679 --> 00:14:31,860
log output from here so that means that

00:14:30,239 --> 00:14:33,720
if something goes wrong with this then

00:14:31,860 --> 00:14:35,489
you'll be able to figure it out next

00:14:33,720 --> 00:14:37,439
morning so before this usually we just

00:14:35,489 --> 00:14:39,779
made an API query from a bash script

00:14:37,439 --> 00:14:41,369
that spot the database and if something

00:14:39,779 --> 00:14:43,199
went wrong during the spin up you didn't

00:14:41,369 --> 00:14:44,639
really know what happened whereas what's

00:14:43,199 --> 00:14:46,829
happening with this is we're querying

00:14:44,639 --> 00:14:49,259
the job state on the Delphic Sinjin and

00:14:46,829 --> 00:14:50,639
then pasting that into the log output so

00:14:49,259 --> 00:14:52,470
that's what I was talking about at the

00:14:50,639 --> 00:14:53,699
start of this speech about how plugins

00:14:52,470 --> 00:14:55,799
can give you a really seamless

00:14:53,699 --> 00:14:57,899
experience because you can tie them in

00:14:55,799 --> 00:15:01,799
really well to all the different aspects

00:14:57,899 --> 00:15:04,889
of the of Jenkins so we see that this is

00:15:01,799 --> 00:15:06,209
provisioning nap here another thing

00:15:04,889 --> 00:15:07,679
worth mentioning I'm not going to click

00:15:06,209 --> 00:15:10,350
it now is if you click the cancel job

00:15:07,679 --> 00:15:12,569
that makes an API request to the Delphic

00:15:10,350 --> 00:15:14,970
Sinjin to get rid of the jobs or

00:15:12,569 --> 00:15:16,470
databases that they were spinning up we

00:15:14,970 --> 00:15:17,579
had problems with this previous to

00:15:16,470 --> 00:15:19,230
creating this plug-in where we'd have

00:15:17,579 --> 00:15:22,649
orphaned databases that never got

00:15:19,230 --> 00:15:24,449
cleaned up so it basically provides you

00:15:22,649 --> 00:15:26,929
really seamless integration and a good

00:15:24,449 --> 00:15:29,189
user experience by doing it this way

00:15:26,929 --> 00:15:31,410
final point that I wanted to make here

00:15:29,189 --> 00:15:33,149
is that this database spin up it's

00:15:31,410 --> 00:15:35,009
Korean the job state and blocking

00:15:33,149 --> 00:15:36,899
meaning that it's waiting for all the

00:15:35,009 --> 00:15:38,549
databases to fully spin up before it

00:15:36,899 --> 00:15:39,839
continues with whatever testing that

00:15:38,549 --> 00:15:42,480
it's going to do relating to those

00:15:39,839 --> 00:15:45,240
databases so you can basically delay

00:15:42,480 --> 00:15:48,110
your job until you have the databases

00:15:45,240 --> 00:15:51,029
spun up and are ready to do your testing

00:15:48,110 --> 00:15:53,100
and let's see here it's gone up I

00:15:51,029 --> 00:15:54,269
believe two of them now yet spinning up

00:15:53,100 --> 00:15:56,369
the second one here and that'll just

00:15:54,269 --> 00:15:57,869
show the conclusion of this and then go

00:15:56,369 --> 00:16:02,209
tough back to talking about kind of some

00:15:57,869 --> 00:16:02,209
of the insights from this demo day

00:16:14,449 --> 00:16:18,100
are nearly done

00:16:21,560 --> 00:16:25,740
so while that's finishing off here

00:16:24,120 --> 00:16:27,690
basically just to highlight again the

00:16:25,740 --> 00:16:29,580
things that I kind of wanted to

00:16:27,690 --> 00:16:31,590
highlight from this it includes logging

00:16:29,580 --> 00:16:33,360
it handles cancellation if you can't

00:16:31,590 --> 00:16:35,760
cancel things off then you get a good

00:16:33,360 --> 00:16:39,210
result it gets rid of the resources that

00:16:35,760 --> 00:16:40,980
you spun up it supports cleanup which is

00:16:39,210 --> 00:16:43,080
what's happening now as we see from the

00:16:40,980 --> 00:16:44,640
status log output here the cleanups

00:16:43,080 --> 00:16:46,650
happening and it's going through and

00:16:44,640 --> 00:16:48,390
deleting the resources that just use the

00:16:46,650 --> 00:16:49,890
idea being as you do destructive testing

00:16:48,390 --> 00:16:51,240
to them or you change things about them

00:16:49,890 --> 00:16:55,530
and then you get rid of them afterwards

00:16:51,240 --> 00:16:57,810
and going back then it also includes

00:16:55,530 --> 00:16:59,370
easy to use GUI features which I

00:16:57,810 --> 00:17:01,020
mentioned is you basically just putting

00:16:59,370 --> 00:17:03,420
your login credentials and that pre

00:17:01,020 --> 00:17:07,079
populates the boxes in the Delphic Skua

00:17:03,420 --> 00:17:08,280
so that you can use those directly those

00:17:07,079 --> 00:17:10,860
are some of the things I wanted to

00:17:08,280 --> 00:17:13,500
highlight then for this particular

00:17:10,860 --> 00:17:15,000
plug-in and used to go forward and talk

00:17:13,500 --> 00:17:18,000
a bit about more about how good you

00:17:15,000 --> 00:17:19,380
develop good plugins all right so just

00:17:18,000 --> 00:17:22,050
talking about the plug-in model in

00:17:19,380 --> 00:17:24,930
general so the plug-in model is it's a

00:17:22,050 --> 00:17:28,470
very hierarchical code base for Jenkins

00:17:24,930 --> 00:17:31,050
Java as the primary language used in

00:17:28,470 --> 00:17:32,760
Jenkins the other thing that's important

00:17:31,050 --> 00:17:35,370
to highlight is you can extend an

00:17:32,760 --> 00:17:36,510
override points using plugins it isn't

00:17:35,370 --> 00:17:38,730
the sort of thing where you're creating

00:17:36,510 --> 00:17:41,940
a plug-in then and then send you as a

00:17:38,730 --> 00:17:43,590
patch upstream to the Jenkins project so

00:17:41,940 --> 00:17:45,600
you can basically take these various

00:17:43,590 --> 00:17:47,730
classes and extend and override

00:17:45,600 --> 00:17:49,500
functions and classes in order to

00:17:47,730 --> 00:17:53,130
implement the new functionality that you

00:17:49,500 --> 00:17:54,450
want you can also the testing is very

00:17:53,130 --> 00:17:55,770
good so that's one thing I mentioned I

00:17:54,450 --> 00:17:58,650
was actually having a conversation with

00:17:55,770 --> 00:17:59,880
someone on the elevator this morning who

00:17:58,650 --> 00:18:02,430
mentioned something about plugins

00:17:59,880 --> 00:18:04,050
crashing a lot and part of that I can

00:18:02,430 --> 00:18:06,480
tell you from going on github is a lot

00:18:04,050 --> 00:18:08,280
of plugins don't have tests that go with

00:18:06,480 --> 00:18:09,780
them and if you write tests you tend to

00:18:08,280 --> 00:18:12,060
write higher quality software and it's

00:18:09,780 --> 00:18:13,470
actually really easy to test on Jenkins

00:18:12,060 --> 00:18:15,840
plugins so if you're writing one I'd

00:18:13,470 --> 00:18:18,420
encourage you to look into the testing

00:18:15,840 --> 00:18:20,400
infrastructure two things that are

00:18:18,420 --> 00:18:22,710
important to highlight their there's

00:18:20,400 --> 00:18:24,780
really good integration testing where

00:18:22,710 --> 00:18:26,580
you can write a few lines of Jenkins

00:18:24,780 --> 00:18:28,020
code and with those few want or a few

00:18:26,580 --> 00:18:30,330
lines of Java and with those few lines

00:18:28,020 --> 00:18:33,220
of Java you can spin up a Jenkins insert

00:18:30,330 --> 00:18:34,330
interface do a build a search

00:18:33,220 --> 00:18:36,100
several things while the build is

00:18:34,330 --> 00:18:38,470
happening in order to test your state

00:18:36,100 --> 00:18:40,419
and then you have your Jenkins entire

00:18:38,470 --> 00:18:41,620
Jenkins instance torn down and assert

00:18:40,419 --> 00:18:43,240
several things after your build

00:18:41,620 --> 00:18:46,330
completes to make sure everything worked

00:18:43,240 --> 00:18:48,010
right so integration using unit testing

00:18:46,330 --> 00:18:49,900
is made very very easy and there's great

00:18:48,010 --> 00:18:52,480
interfaces to make your life easier if

00:18:49,900 --> 00:18:53,890
you're going to write plugins and also

00:18:52,480 --> 00:18:55,870
finally that you typically build and

00:18:53,890 --> 00:18:57,400
test with maven so one thing you might

00:18:55,870 --> 00:18:58,570
think if you're new to plug in

00:18:57,400 --> 00:19:00,220
development is that it's going to take a

00:18:58,570 --> 00:19:01,929
while to get yourself up and running

00:19:00,220 --> 00:19:03,880
that you have to install Jenkins you

00:19:01,929 --> 00:19:05,200
have to get a bunch of ids and other

00:19:03,880 --> 00:19:06,640
tools set up and it's going to be a

00:19:05,200 --> 00:19:09,309
while before you actually start making

00:19:06,640 --> 00:19:10,840
plugins and it's actually really easy if

00:19:09,309 --> 00:19:13,419
you go to the documentation zhan the

00:19:10,840 --> 00:19:15,370
main Jenkins page you basically just

00:19:13,419 --> 00:19:17,289
need to declare a pom file which is

00:19:15,370 --> 00:19:19,150
typical for maven they give you what to

00:19:17,289 --> 00:19:22,120
paste in there and you run one maven

00:19:19,150 --> 00:19:24,400
command and it spins it pulls all your

00:19:22,120 --> 00:19:26,380
dependencies off the web it spins up a

00:19:24,400 --> 00:19:28,030
Jenkins interface takes your plug-in

00:19:26,380 --> 00:19:29,230
that you're developing installs it

00:19:28,030 --> 00:19:30,820
automatically and you're ready to go

00:19:29,230 --> 00:19:32,650
with whatever testing you want with that

00:19:30,820 --> 00:19:34,240
plugin so it's very very easy to

00:19:32,650 --> 00:19:36,190
actually do development and get up and

00:19:34,240 --> 00:19:37,450
running quickly which was one of the big

00:19:36,190 --> 00:19:39,850
things I want to highlight to this

00:19:37,450 --> 00:19:43,059
speech as that plugin development isn't

00:19:39,850 --> 00:19:44,559
some super time intensive task that's

00:19:43,059 --> 00:19:46,330
going to take a while and that you can't

00:19:44,559 --> 00:19:48,520
really justify the resources for I think

00:19:46,330 --> 00:19:50,470
that's usually why people kind of lean

00:19:48,520 --> 00:19:52,809
towards just writing a bunch of bash or

00:19:50,470 --> 00:19:54,159
Python and sticking that in Jenkins when

00:19:52,809 --> 00:19:56,679
in fact you can often get much better

00:19:54,159 --> 00:20:01,030
than user experiences if you write a

00:19:56,679 --> 00:20:03,100
plug-in to do what you need all right so

00:20:01,030 --> 00:20:05,890
we talked a little earlier about the

00:20:03,100 --> 00:20:07,750
strengths of Jenkins now I wanted to

00:20:05,890 --> 00:20:09,730
relight those two a few different points

00:20:07,750 --> 00:20:11,169
what I call leverage points in Jenkins

00:20:09,730 --> 00:20:14,140
so these are points that you can extend

00:20:11,169 --> 00:20:16,299
in Jenkins in order to gain some

00:20:14,140 --> 00:20:18,520
benefits and improve those strengths and

00:20:16,299 --> 00:20:20,650
I wanted to first mention that this

00:20:18,520 --> 00:20:22,809
isn't an exhaustive list so I've wrote a

00:20:20,650 --> 00:20:24,520
bunch of plugins now and these are just

00:20:22,809 --> 00:20:26,110
the ones that I chose that sometimes

00:20:24,520 --> 00:20:28,450
found to be most useful especially if

00:20:26,110 --> 00:20:29,919
you're getting started but there's

00:20:28,450 --> 00:20:31,710
plenty more mentioned online for

00:20:29,919 --> 00:20:33,789
instance just off the top of my head

00:20:31,710 --> 00:20:35,559
when I don't mention here is the

00:20:33,789 --> 00:20:36,970
security model Jenkins has a security

00:20:35,559 --> 00:20:40,510
mile belt into it and then you can

00:20:36,970 --> 00:20:42,490
extend that with plugins alright so

00:20:40,510 --> 00:20:44,140
there are basically five different ones

00:20:42,490 --> 00:20:46,190
I wanted to talk about the first one is

00:20:44,140 --> 00:20:47,720
build steps you saw that from the dem

00:20:46,190 --> 00:20:49,340
that I gave earlier where I added

00:20:47,720 --> 00:20:51,320
several different build steps for

00:20:49,340 --> 00:20:53,720
databases that I wanted spun up before

00:20:51,320 --> 00:20:55,909
the job the next one is distributed

00:20:53,720 --> 00:20:57,440
builds as I mentioned earlier I wanted

00:20:55,909 --> 00:20:59,779
to talk a little bit about how easy it

00:20:57,440 --> 00:21:02,450
is to do distributed builds when you're

00:20:59,779 --> 00:21:04,970
creating a plug-in there's also in

00:21:02,450 --> 00:21:07,370
addition to that logging artifact

00:21:04,970 --> 00:21:09,830
archival which is archiving the results

00:21:07,370 --> 00:21:12,049
of your Jenkins job and then finally the

00:21:09,830 --> 00:21:15,200
user interface how that works and how

00:21:12,049 --> 00:21:16,309
you extend the user interface alright so

00:21:15,200 --> 00:21:18,500
I'm going to talk about each of these

00:21:16,309 --> 00:21:20,990
and turn them all right so first of all

00:21:18,500 --> 00:21:22,460
we've build step additions as you see on

00:21:20,990 --> 00:21:24,350
the left hand side there's a screenshot

00:21:22,460 --> 00:21:26,990
of the build step additions that I did

00:21:24,350 --> 00:21:29,090
during that brief demo and in order to

00:21:26,990 --> 00:21:31,820
do these you extend something called the

00:21:29,090 --> 00:21:33,950
build step descriptor which is basically

00:21:31,820 --> 00:21:35,600
what populates these fields over here

00:21:33,950 --> 00:21:37,250
showing on the Left they'll give you the

00:21:35,600 --> 00:21:39,230
build steps and you can add new build

00:21:37,250 --> 00:21:41,330
steps and then you extend something

00:21:39,230 --> 00:21:43,070
called the build art those are there's

00:21:41,330 --> 00:21:45,230
actually really good documentation as

00:21:43,070 --> 00:21:47,269
well on the entire class hierarchy of

00:21:45,230 --> 00:21:49,789
Jenkins and how you go about

00:21:47,269 --> 00:21:52,399
manipulating that that's linked from the

00:21:49,789 --> 00:21:54,110
documentation on developing plugins so

00:21:52,399 --> 00:21:55,850
these are the points that you can extend

00:21:54,110 --> 00:21:57,860
and with these then you can write new

00:21:55,850 --> 00:22:00,080
custom build steps that you can add in

00:21:57,860 --> 00:22:02,659
Jenkins and so that's one of the

00:22:00,080 --> 00:22:04,519
advantages lots of times as i mentioned

00:22:02,659 --> 00:22:06,259
before you'll often see new build steps

00:22:04,519 --> 00:22:07,909
kind of added through a mishmash of

00:22:06,259 --> 00:22:10,879
various scripting which can be good in

00:22:07,909 --> 00:22:12,529
some cases if you just need to get up

00:22:10,879 --> 00:22:13,879
and going really quick but oftentimes

00:22:12,529 --> 00:22:15,740
you can get a way better user experience

00:22:13,879 --> 00:22:17,840
and something that's way more reliable

00:22:15,740 --> 00:22:19,700
if you go about spending the time

00:22:17,840 --> 00:22:23,600
building custom build steps in the form

00:22:19,700 --> 00:22:26,629
of a plug-in all right next one is

00:22:23,600 --> 00:22:28,250
distributed builds so is you probably

00:22:26,629 --> 00:22:30,559
all are familiar with it's pretty easy

00:22:28,250 --> 00:22:32,600
to add slave nodes to Jenkins and then

00:22:30,559 --> 00:22:34,879
have projects get farmed out to those

00:22:32,600 --> 00:22:36,889
slave nodes the way Jenkins works is it

00:22:34,879 --> 00:22:38,779
doesn't split the build across the slave

00:22:36,889 --> 00:22:40,370
nodes instead is you have multiple jobs

00:22:38,779 --> 00:22:42,080
coming into your Jenkins server it

00:22:40,370 --> 00:22:44,659
chooses the slave nodes and then assigns

00:22:42,080 --> 00:22:47,720
those jobs to slave nodes as they're

00:22:44,659 --> 00:22:48,919
available so that's pretty easy but I

00:22:47,720 --> 00:22:51,230
want what I wanted to talk about was

00:22:48,919 --> 00:22:53,509
from the perspective of how to do

00:22:51,230 --> 00:22:55,309
development of plugins and how that

00:22:53,509 --> 00:22:57,080
relates to distributed videos and it

00:22:55,309 --> 00:22:58,250
actually turns out that it's just as

00:22:57,080 --> 00:23:00,710
easy as the

00:22:58,250 --> 00:23:03,590
actual interface is the user interface

00:23:00,710 --> 00:23:05,240
normally for setting up Jenkins it's

00:23:03,590 --> 00:23:06,740
really easy to integrate if you plan

00:23:05,240 --> 00:23:08,660
ahead and even if you don't plan ahead

00:23:06,740 --> 00:23:10,490
and you write your plug-in with one node

00:23:08,660 --> 00:23:12,320
in mind my the first time i wrote a

00:23:10,490 --> 00:23:14,030
Jenkins plug-in I just had one node in

00:23:12,320 --> 00:23:15,770
mind and then I realized it was going to

00:23:14,030 --> 00:23:17,720
be used in a distributed environment and

00:23:15,770 --> 00:23:20,330
I actually found though it's pretty easy

00:23:17,720 --> 00:23:23,510
to add the support for distributed

00:23:20,330 --> 00:23:25,610
builds so there are basically implicit

00:23:23,510 --> 00:23:27,410
constructs that you can use for to

00:23:25,610 --> 00:23:30,020
transparently do this so you don't have

00:23:27,410 --> 00:23:32,450
to have a bunch of custom logic added in

00:23:30,020 --> 00:23:35,390
order to do this what you can use our

00:23:32,450 --> 00:23:37,130
serializable classes in java so

00:23:35,390 --> 00:23:38,540
basically a serializable class is

00:23:37,130 --> 00:23:40,580
something that's designed to be sent

00:23:38,540 --> 00:23:43,580
across the wire so that you can

00:23:40,580 --> 00:23:45,170
basically serialize a java so you

00:23:43,580 --> 00:23:47,990
basically say it implements serializable

00:23:45,170 --> 00:23:51,230
and then that class can be sent over the

00:23:47,990 --> 00:23:53,540
wire and executed on a remote target so

00:23:51,230 --> 00:23:54,800
you use basically declare some of your

00:23:53,540 --> 00:23:57,260
classes that you want to use is

00:23:54,800 --> 00:23:59,390
serializable there's something there's a

00:23:57,260 --> 00:24:02,270
really cool class that Jenkins has

00:23:59,390 --> 00:24:04,190
called file paths and what file path is

00:24:02,270 --> 00:24:05,600
done is you basically want to use that

00:24:04,190 --> 00:24:08,090
usually when you're referring to files

00:24:05,600 --> 00:24:09,770
throughout your build steps and that

00:24:08,090 --> 00:24:13,070
allows you to basically have

00:24:09,770 --> 00:24:16,070
transparency between the file system on

00:24:13,070 --> 00:24:18,230
your master node and the remote file

00:24:16,070 --> 00:24:19,940
systems if you use basically use file

00:24:18,230 --> 00:24:21,410
paths throughout your code that doesn't

00:24:19,940 --> 00:24:23,450
really matter whether or not the job is

00:24:21,410 --> 00:24:25,850
being executed on your local system or

00:24:23,450 --> 00:24:28,070
on a remote system so it gives you a

00:24:25,850 --> 00:24:30,200
nice abstraction there's actually quite

00:24:28,070 --> 00:24:32,300
a bit of Jenkins code that went into if

00:24:30,200 --> 00:24:33,620
you look at the open source code for

00:24:32,300 --> 00:24:35,570
Jenkins that went into building that

00:24:33,620 --> 00:24:37,070
abstraction so that as a plug-in

00:24:35,570 --> 00:24:38,810
developer you don't need to worry about

00:24:37,070 --> 00:24:42,290
whether or not your job is our remote

00:24:38,810 --> 00:24:44,390
system or a local master node and then

00:24:42,290 --> 00:24:47,000
finally collar bowls which are basically

00:24:44,390 --> 00:24:48,980
just a Java class which can be called

00:24:47,000 --> 00:24:51,650
from another thread and spun off if you

00:24:48,980 --> 00:24:53,480
use that as well so basically the point

00:24:51,650 --> 00:24:55,490
I wanted to make is and there's really

00:24:53,480 --> 00:24:57,050
good documentation for it online is that

00:24:55,490 --> 00:24:59,570
it's really easy to actually make

00:24:57,050 --> 00:25:02,030
distributed plugins and get yourself a

00:24:59,570 --> 00:25:03,860
really good user experience when you're

00:25:02,030 --> 00:25:05,720
operating a plugin in the distributed

00:25:03,860 --> 00:25:07,790
environment it's not going to require a

00:25:05,720 --> 00:25:09,430
lot of custom logic or something really

00:25:07,790 --> 00:25:11,980
complex in order to implement

00:25:09,430 --> 00:25:13,930
usually just a few lines and some

00:25:11,980 --> 00:25:15,970
thought ahead of time and you'll have a

00:25:13,930 --> 00:25:19,120
plug-in that can operate really easily

00:25:15,970 --> 00:25:21,910
in a distributed environment all right

00:25:19,120 --> 00:25:23,410
next one is logging so two things I want

00:25:21,910 --> 00:25:24,850
to point out here first of all logging

00:25:23,410 --> 00:25:26,710
is really easy to do and it really

00:25:24,850 --> 00:25:29,050
benefits a plug-in if you do logging

00:25:26,710 --> 00:25:31,240
because oftentimes those logs that

00:25:29,050 --> 00:25:32,740
Jenkins generates developers will go

00:25:31,240 --> 00:25:34,660
look at them to figure out why something

00:25:32,740 --> 00:25:36,910
went wrong with either a nightly build

00:25:34,660 --> 00:25:39,340
or some run that they were doing before

00:25:36,910 --> 00:25:41,050
they were checking in code so logging is

00:25:39,340 --> 00:25:43,120
really beneficial it's easy to do it's a

00:25:41,050 --> 00:25:45,340
one line called to write something to

00:25:43,120 --> 00:25:46,450
the log output and then the second thing

00:25:45,340 --> 00:25:48,310
I wanted to point out which may not

00:25:46,450 --> 00:25:49,990
didn't necessarily be as obvious is it's

00:25:48,310 --> 00:25:52,330
a really good idea to pull from external

00:25:49,990 --> 00:25:54,490
sources so this goes back to that demo

00:25:52,330 --> 00:25:56,650
that I did earlier where it was pulling

00:25:54,490 --> 00:25:58,030
from the Delphic Sinjin that ad running

00:25:56,650 --> 00:26:00,460
which was spinning up the virtual

00:25:58,030 --> 00:26:02,830
databases so I didn't need to include

00:26:00,460 --> 00:26:05,800
all that log output that log output was

00:26:02,830 --> 00:26:08,230
being included by my Jenkins job making

00:26:05,800 --> 00:26:11,410
an API call to the Delphic Sinjin and

00:26:08,230 --> 00:26:13,000
then taking that result from the Delphic

00:26:11,410 --> 00:26:14,950
Sinjin and including it in the log

00:26:13,000 --> 00:26:17,080
output so the job would have ran just

00:26:14,950 --> 00:26:18,400
fine without that log output but it's

00:26:17,080 --> 00:26:19,840
really helpful to a developer if

00:26:18,400 --> 00:26:22,150
something went wrong on the Delphic

00:26:19,840 --> 00:26:24,130
Sinjin then they can see that in their

00:26:22,150 --> 00:26:26,040
log output and i'll make development

00:26:24,130 --> 00:26:28,030
easier so lots of times when you do

00:26:26,040 --> 00:26:29,950
testing with jenkins you'll have

00:26:28,030 --> 00:26:31,750
transient objects such as virtual

00:26:29,950 --> 00:26:33,790
machines or other resources that are

00:26:31,750 --> 00:26:36,280
going to disappear after your testing

00:26:33,790 --> 00:26:38,410
and so therefore having really good logs

00:26:36,280 --> 00:26:40,390
can be helpful because it if something

00:26:38,410 --> 00:26:42,400
goes wrong on an external resource

00:26:40,390 --> 00:26:44,590
that's being queried viewing the API

00:26:42,400 --> 00:26:47,910
call may be hard for the developer to

00:26:44,590 --> 00:26:49,840
track down what exactly the problem was

00:26:47,910 --> 00:26:53,170
all right next thing I want to mention

00:26:49,840 --> 00:26:55,960
was artifact archival so basically the

00:26:53,170 --> 00:26:58,420
advantage of artifact archival is that

00:26:55,960 --> 00:27:00,280
it assists with debugging so any Jenkins

00:26:58,420 --> 00:27:02,910
job is going to generate a bunch of

00:27:00,280 --> 00:27:06,880
different artifacts binaries and other

00:27:02,910 --> 00:27:09,460
such artifacts and there's a really good

00:27:06,880 --> 00:27:11,500
system which was not part of the plug-in

00:27:09,460 --> 00:27:13,450
that I demoed but Jenkins has a really

00:27:11,500 --> 00:27:16,900
good system for taking these artifacts

00:27:13,450 --> 00:27:19,840
and then archiving them for later

00:27:16,900 --> 00:27:22,240
viewing by developers or QA staff or

00:27:19,840 --> 00:27:23,320
someone who's interested in them so it's

00:27:22,240 --> 00:27:25,900
a fully auto

00:27:23,320 --> 00:27:27,220
system to collect whichever results that

00:27:25,900 --> 00:27:29,290
you would like out of the system it's

00:27:27,220 --> 00:27:32,170
also one that can be extended easily via

00:27:29,290 --> 00:27:33,250
plugins the other advantage of artifact

00:27:32,170 --> 00:27:34,930
archival and this goes back to

00:27:33,250 --> 00:27:36,850
distributed builds is you can use it

00:27:34,930 --> 00:27:38,770
with your remote work spaces in order to

00:27:36,850 --> 00:27:40,630
pull whatever artifact results off the

00:27:38,770 --> 00:27:43,780
remote build slaves that you had running

00:27:40,630 --> 00:27:47,830
in archive those for later viewing by

00:27:43,780 --> 00:27:49,120
people who are interested and then the

00:27:47,830 --> 00:27:52,210
fifth and final thing that I wanted to

00:27:49,120 --> 00:27:53,800
talk about was user interface so one of

00:27:52,210 --> 00:27:55,330
the advantages of Jenkins is that

00:27:53,800 --> 00:27:57,480
provides a really good user interface

00:27:55,330 --> 00:28:00,040
for someone who's interested in

00:27:57,480 --> 00:28:01,810
basically saying up their own jobs or if

00:28:00,040 --> 00:28:03,970
you're using Jenkins in a self-service

00:28:01,810 --> 00:28:07,420
nature and one thing that I've noticed

00:28:03,970 --> 00:28:09,220
is a lot of plugins sometimes ignore the

00:28:07,420 --> 00:28:10,780
user interface aspect and I think that's

00:28:09,220 --> 00:28:13,330
one of the best aspects that you get

00:28:10,780 --> 00:28:15,160
through plugins versus just attaching a

00:28:13,330 --> 00:28:16,390
bunch of your own scripts to Jenkins is

00:28:15,160 --> 00:28:19,630
you can get really great integration

00:28:16,390 --> 00:28:21,700
with the user interface so the way the

00:28:19,630 --> 00:28:23,920
user interface works is it's typically

00:28:21,700 --> 00:28:25,960
jelly files they're somewhat similar to

00:28:23,920 --> 00:28:27,760
HTML CSS if you have experience with

00:28:25,960 --> 00:28:30,940
HTML and CSS they're pretty easy to

00:28:27,760 --> 00:28:33,520
write and these allow you to modify just

00:28:30,940 --> 00:28:34,840
about any aspect of the dell fix user

00:28:33,520 --> 00:28:38,260
interface so i'm going to highlight a

00:28:34,840 --> 00:28:40,990
few of them but basically just about any

00:28:38,260 --> 00:28:42,460
aspect can be modified one thing that i

00:28:40,990 --> 00:28:44,530
wanted to highlight just as a general

00:28:42,460 --> 00:28:47,050
rule is try to use things that restrict

00:28:44,530 --> 00:28:50,980
the user choice as much as possible such

00:28:47,050 --> 00:28:54,790
as dropdowns checkboxes radio buttons

00:28:50,980 --> 00:28:56,200
that demo i showed earlier had a point

00:28:54,790 --> 00:28:59,290
where you selected which virtual

00:28:56,200 --> 00:29:00,550
databases you wanted spun up and it

00:28:59,290 --> 00:29:02,050
would have been totally possible to

00:29:00,550 --> 00:29:03,790
create the plug-in and just put a text

00:29:02,050 --> 00:29:07,030
box there and then whoever is interested

00:29:03,790 --> 00:29:09,670
in using it would go log into the

00:29:07,030 --> 00:29:11,860
Delphic Sinjin figure out what the name

00:29:09,670 --> 00:29:14,080
of the database they wanted was take

00:29:11,860 --> 00:29:16,330
that name copy it paste it into the text

00:29:14,080 --> 00:29:17,860
box and the thing would work but the

00:29:16,330 --> 00:29:19,090
idea behind that plug-in was for it to

00:29:17,860 --> 00:29:20,500
be self service and no one would

00:29:19,090 --> 00:29:21,790
actually have to go to the Delphic

00:29:20,500 --> 00:29:23,530
Sinjin it would just run in the

00:29:21,790 --> 00:29:25,750
background as a service and jenkins

00:29:23,530 --> 00:29:27,280
would interact with it so instead what

00:29:25,750 --> 00:29:30,070
it did was when you added that build

00:29:27,280 --> 00:29:31,870
step it made an API call to the Delphic

00:29:30,070 --> 00:29:34,090
Sinjin to get a list of potential source

00:29:31,870 --> 00:29:34,950
databases and then use that to populate

00:29:34,090 --> 00:29:36,899
the drop-down

00:29:34,950 --> 00:29:39,450
that I could select them from it just

00:29:36,899 --> 00:29:42,149
makes it much cleaner and easier to use

00:29:39,450 --> 00:29:44,940
user experience so as much as possible

00:29:42,149 --> 00:29:46,260
try to restrict the user choice to ones

00:29:44,940 --> 00:29:48,960
that revival that's not always possible

00:29:46,260 --> 00:29:50,639
for instance the git plugin which i'm

00:29:48,960 --> 00:29:51,990
guessing many people have used here you

00:29:50,639 --> 00:29:53,190
have to specify your remote git

00:29:51,990 --> 00:29:54,870
repository you aren't going to be able

00:29:53,190 --> 00:29:59,850
to do that from a drop-down box you just

00:29:54,870 --> 00:30:01,110
know type in the resource alright and as

00:29:59,850 --> 00:30:03,299
I just mentioned text field should be

00:30:01,110 --> 00:30:06,240
relaxed resort the other thing I wanted

00:30:03,299 --> 00:30:07,470
to highlight here is that as I showed in

00:30:06,240 --> 00:30:08,940
that demo earlier there was some

00:30:07,470 --> 00:30:11,610
configuration that was done in the

00:30:08,940 --> 00:30:13,529
global management page for Jenkins where

00:30:11,610 --> 00:30:14,820
you specified the Delphic Sinjin and the

00:30:13,529 --> 00:30:16,860
username and password for what you

00:30:14,820 --> 00:30:18,960
wanted to connect to and then there was

00:30:16,860 --> 00:30:21,840
also some configuration that was done

00:30:18,960 --> 00:30:24,480
then in the job page when i made a new

00:30:21,840 --> 00:30:26,549
job where you could select which source

00:30:24,480 --> 00:30:29,309
databases you wanted virtual databases

00:30:26,549 --> 00:30:31,049
spun up from and so what i wanted to

00:30:29,309 --> 00:30:33,480
highlight here is that choose

00:30:31,049 --> 00:30:35,070
appropriately where to put them a lot of

00:30:33,480 --> 00:30:36,630
plugins that I've looked at will often

00:30:35,070 --> 00:30:39,570
just take everything and stick it in the

00:30:36,630 --> 00:30:41,429
job page even if it's duplicated and

00:30:39,570 --> 00:30:43,320
you'll be re-entering it time after time

00:30:41,429 --> 00:30:46,710
again for one you're setting up the

00:30:43,320 --> 00:30:48,179
plugin so as much as possible try to

00:30:46,710 --> 00:30:49,980
split it between things that you want

00:30:48,179 --> 00:30:51,570
global to the Jenkins interface and you

00:30:49,980 --> 00:30:53,940
can stick in the global configuration

00:30:51,570 --> 00:30:55,590
page and things that you want local to

00:30:53,940 --> 00:30:59,340
the particular job and you can stick in

00:30:55,590 --> 00:31:00,750
the particular job and then the other

00:30:59,340 --> 00:31:03,840
thing I want to highlight a few other

00:31:00,750 --> 00:31:06,840
areas so the what I just covered was

00:31:03,840 --> 00:31:08,460
basically more job specific

00:31:06,840 --> 00:31:12,809
configuration some examples from the

00:31:08,460 --> 00:31:14,220
demo here's some examples that I found

00:31:12,809 --> 00:31:16,200
online so first of all the one on the

00:31:14,220 --> 00:31:19,110
left is from another plugin that i wrote

00:31:16,200 --> 00:31:20,760
that i did not demo here that's on my

00:31:19,110 --> 00:31:23,309
github and is much more developed in

00:31:20,760 --> 00:31:25,139
advance so what it is is a plugin for

00:31:23,309 --> 00:31:27,480
doing regression testing with Jenkins

00:31:25,139 --> 00:31:31,710
the idea being that you want to run a

00:31:27,480 --> 00:31:33,750
small subset of tasks inside Jenkins and

00:31:31,710 --> 00:31:36,149
you just want to run the tests related

00:31:33,750 --> 00:31:38,039
to the areas of the code that you

00:31:36,149 --> 00:31:40,049
modified so it uses an open source

00:31:38,039 --> 00:31:42,179
library called X tozzi in order to do

00:31:40,049 --> 00:31:43,799
this that operates on Java code and

00:31:42,179 --> 00:31:46,169
looks at which area is that the Java

00:31:43,799 --> 00:31:46,680
code you modified relates those then to

00:31:46,169 --> 00:31:48,900
your

00:31:46,680 --> 00:31:50,550
test suite and figures out which of the

00:31:48,900 --> 00:31:52,950
tests that you should run in order to

00:31:50,550 --> 00:31:54,630
provide yourself code coverage so what

00:31:52,950 --> 00:31:58,440
this does is you're probably used to

00:31:54,630 --> 00:32:00,240
seeing the blue or red flashing lights

00:31:58,440 --> 00:32:02,370
there to show you your build State on

00:32:00,240 --> 00:32:04,350
Jenkins and what this does instead is we

00:32:02,370 --> 00:32:06,090
put a little icon in there it's a

00:32:04,350 --> 00:32:08,340
butterfly since that's the logo of this

00:32:06,090 --> 00:32:11,090
open-source project and that shows you

00:32:08,340 --> 00:32:13,380
whether or not that particular

00:32:11,090 --> 00:32:14,940
regression test suite was enabled when

00:32:13,380 --> 00:32:17,190
this job was run so it's an easy way to

00:32:14,940 --> 00:32:18,780
tell whether basically if it's grayed

00:32:17,190 --> 00:32:20,700
out then the full test suite was run if

00:32:18,780 --> 00:32:22,950
it's enabled that means a subset of the

00:32:20,700 --> 00:32:24,980
test cases were run in order to provide

00:32:22,950 --> 00:32:27,210
code coverage just for the area modify

00:32:24,980 --> 00:32:29,070
so that's another area you can modify

00:32:27,210 --> 00:32:32,970
basically where we have icons can be

00:32:29,070 --> 00:32:34,110
modified and then another one and I just

00:32:32,970 --> 00:32:36,780
pulled this from an open source project

00:32:34,110 --> 00:32:38,310
with the global build statistics as you

00:32:36,780 --> 00:32:40,410
can make a lot of modifications to the

00:32:38,310 --> 00:32:42,330
graphs showing the state so you're

00:32:40,410 --> 00:32:44,820
probably used to seeing the graphs in

00:32:42,330 --> 00:32:46,560
Jenkins an upper right hand corner and

00:32:44,820 --> 00:32:48,030
you can make modifications to those to

00:32:46,560 --> 00:32:50,910
draw a bunch more different things

00:32:48,030 --> 00:32:52,650
depending on your state's the reason I

00:32:50,910 --> 00:32:54,060
wanted to mention this too is this is so

00:32:52,650 --> 00:32:57,150
i mentioned how logging was already

00:32:54,060 --> 00:32:59,010
really important but logging can only

00:32:57,150 --> 00:33:00,570
get you so far so logging provides you a

00:32:59,010 --> 00:33:02,730
way to look at a particular job and if

00:33:00,570 --> 00:33:04,530
something goes wrong then you can figure

00:33:02,730 --> 00:33:06,780
out what went wrong and act accordingly

00:33:04,530 --> 00:33:08,340
fix the tests or make modifications to

00:33:06,780 --> 00:33:09,870
your code usually people don't open the

00:33:08,340 --> 00:33:12,630
log files unless something went wrong

00:33:09,870 --> 00:33:14,400
but outside of that you can then if you

00:33:12,630 --> 00:33:16,020
want more global statistics or just a

00:33:14,400 --> 00:33:18,240
general feel for how things are going

00:33:16,020 --> 00:33:20,160
these beasts provide this so it's kind

00:33:18,240 --> 00:33:22,050
of two different ways of a local job

00:33:20,160 --> 00:33:23,850
nature looking at a specific job whereas

00:33:22,050 --> 00:33:28,080
these give you a kind of more global

00:33:23,850 --> 00:33:29,790
view of your user interface alright and

00:33:28,080 --> 00:33:31,830
then finally I wanted to kind of close

00:33:29,790 --> 00:33:34,440
so I spent a while basically I with this

00:33:31,830 --> 00:33:36,480
speech I just wanted to talk about what

00:33:34,440 --> 00:33:39,150
you can do with plugins some of the

00:33:36,480 --> 00:33:40,500
benefits and I guess motivate people to

00:33:39,150 --> 00:33:42,390
spend the time looking at the

00:33:40,500 --> 00:33:44,010
possibility of creating a plug-in

00:33:42,390 --> 00:33:47,100
whereas they might just go with a bunch

00:33:44,010 --> 00:33:48,540
of custom scripts so then I wanted to

00:33:47,100 --> 00:33:49,560
kind of close with the question then of

00:33:48,540 --> 00:33:52,020
whether or not you should build

00:33:49,560 --> 00:33:55,410
something versus use something that's

00:33:52,020 --> 00:33:56,430
open source and already available so the

00:33:55,410 --> 00:33:58,260
first point that I wanted to talk about

00:33:56,430 --> 00:33:58,870
was evaluating the time and resource

00:33:58,260 --> 00:34:00,730
constraint

00:33:58,870 --> 00:34:03,700
and this isn't actually particularly i

00:34:00,730 --> 00:34:05,110
would say unique to this this is kind of

00:34:03,700 --> 00:34:07,059
just a common theme and then you form a

00:34:05,110 --> 00:34:08,260
software engineering is that you're

00:34:07,059 --> 00:34:12,370
going to have limited time limited

00:34:08,260 --> 00:34:14,560
developer time to develop things and so

00:34:12,370 --> 00:34:16,149
you want to evaluate that versus just

00:34:14,560 --> 00:34:17,800
using something that's off the shelf so

00:34:16,149 --> 00:34:19,510
it can be the case where something

00:34:17,800 --> 00:34:22,090
that's off the shelf and open-source one

00:34:19,510 --> 00:34:23,860
that's available or paid one it gets you

00:34:22,090 --> 00:34:27,429
close enough even if it doesn't provide

00:34:23,860 --> 00:34:28,570
you every last feature that you need the

00:34:27,429 --> 00:34:30,580
next thing then that wanted to mention

00:34:28,570 --> 00:34:32,350
though this is a little more applicable

00:34:30,580 --> 00:34:34,690
this is a general I would say

00:34:32,350 --> 00:34:37,090
engineering paradigm but is a little

00:34:34,690 --> 00:34:39,100
more applicable to how you go about

00:34:37,090 --> 00:34:41,409
maintaining a Jenkins interfaces for

00:34:39,100 --> 00:34:43,060
instance as your company grows is you

00:34:41,409 --> 00:34:44,830
should seek to continually improve so

00:34:43,060 --> 00:34:48,669
we've made at Delphic smade a lot of

00:34:44,830 --> 00:34:50,580
changes to how we use Jenkins there's a

00:34:48,669 --> 00:34:53,770
few good ones that allowed to mention

00:34:50,580 --> 00:34:56,440
one of them is we headed a dashboard

00:34:53,770 --> 00:34:59,320
site that was written in half scale it

00:34:56,440 --> 00:35:00,880
was completely external to Jenkins and

00:34:59,320 --> 00:35:03,340
it was used for monitoring our build

00:35:00,880 --> 00:35:05,350
state and showing you the running builds

00:35:03,340 --> 00:35:07,150
and what their status was it basically

00:35:05,350 --> 00:35:09,460
ended up reproducing a lot of the

00:35:07,150 --> 00:35:11,110
functionality of Jenkins and so we had

00:35:09,460 --> 00:35:12,670
that for about a year and a half and

00:35:11,110 --> 00:35:14,020
then we ended up eventually deciding to

00:35:12,670 --> 00:35:16,690
get rid of it and move our stuff back

00:35:14,020 --> 00:35:18,460
into Jenkins and so I would say that's a

00:35:16,690 --> 00:35:20,380
good example of trying to continually

00:35:18,460 --> 00:35:21,550
improve and not getting tied to the

00:35:20,380 --> 00:35:22,870
particular because there was a lot to

00:35:21,550 --> 00:35:24,250
developer time that went into making

00:35:22,870 --> 00:35:26,590
that but we finally made the decision

00:35:24,250 --> 00:35:28,270
that we it was getting hard to maintain

00:35:26,590 --> 00:35:30,160
and we should move that process back

00:35:28,270 --> 00:35:33,280
into Jenkins because it would be a lot

00:35:30,160 --> 00:35:35,350
easier to maintain their the other thing

00:35:33,280 --> 00:35:36,730
is the other big change that we've made

00:35:35,350 --> 00:35:38,200
is we used to have a lot of our jobs

00:35:36,730 --> 00:35:39,610
weren't in source control and now

00:35:38,200 --> 00:35:41,350
they've been moved into source control

00:35:39,610 --> 00:35:43,150
so that they're easier to maintain their

00:35:41,350 --> 00:35:44,770
so you don't have to get it right

00:35:43,150 --> 00:35:46,540
perfectly on the first time this applies

00:35:44,770 --> 00:35:48,340
to plugins as well you can get choose

00:35:46,540 --> 00:35:51,340
the thing that's open source that gets

00:35:48,340 --> 00:35:54,960
you you know half of the way there 75%

00:35:51,340 --> 00:35:57,490
use that for a while and then evaluate

00:35:54,960 --> 00:35:58,870
what it provides you versus what you

00:35:57,490 --> 00:36:00,880
need and eventually make the choice to

00:35:58,870 --> 00:36:02,500
go with writing your own custom plugins

00:36:00,880 --> 00:36:04,270
so lots of times they'll make sense to

00:36:02,500 --> 00:36:06,190
go with the off-the-shelf solution to

00:36:04,270 --> 00:36:08,920
start that's typically what I would say

00:36:06,190 --> 00:36:10,530
our company tries to do and then to

00:36:08,920 --> 00:36:13,080
gradually iterate from there and

00:36:10,530 --> 00:36:14,610
is we've done start writing some of our

00:36:13,080 --> 00:36:18,780
own plugins in order to accomplish

00:36:14,610 --> 00:36:20,700
better and meet our custom needs also if

00:36:18,780 --> 00:36:22,320
you can provide the Jenkins plug into

00:36:20,700 --> 00:36:24,990
customers that's a double win it makes

00:36:22,320 --> 00:36:26,130
it easier to justify developer time not

00:36:24,990 --> 00:36:28,130
all companies are going to be this

00:36:26,130 --> 00:36:30,570
fortunate happens that our company our

00:36:28,130 --> 00:36:32,610
product gets used a lot with Jenkins

00:36:30,570 --> 00:36:34,620
dinner face so a lot of the stuff that

00:36:32,610 --> 00:36:36,360
we developed internally can also be used

00:36:34,620 --> 00:36:38,490
we can open source it and it can be used

00:36:36,360 --> 00:36:39,930
by developer or is it other companies

00:36:38,490 --> 00:36:41,610
that are interacting with our products

00:36:39,930 --> 00:36:43,080
so if you can find any areas there and

00:36:41,610 --> 00:36:44,880
these aren't going to be applicable for

00:36:43,080 --> 00:36:47,640
all companies but for some companies

00:36:44,880 --> 00:36:49,410
you'll be able to find an easier time

00:36:47,640 --> 00:36:52,830
justified and spending development time

00:36:49,410 --> 00:36:55,530
on something and finally you can always

00:36:52,830 --> 00:36:57,330
contribute to open source projects this

00:36:55,530 --> 00:36:59,370
basically goes to there's a lot of open

00:36:57,330 --> 00:37:00,750
source Jenkins plugins out there and you

00:36:59,370 --> 00:37:02,850
can either fork one or contribute

00:37:00,750 --> 00:37:03,720
upstream to it if it's close to what you

00:37:02,850 --> 00:37:06,840
need and just needs a little

00:37:03,720 --> 00:37:09,480
modification and then the finally thing

00:37:06,840 --> 00:37:10,950
to use to evaluate building versus using

00:37:09,480 --> 00:37:12,420
it something that's already they all

00:37:10,950 --> 00:37:14,280
blows integration with less commonly

00:37:12,420 --> 00:37:16,500
used software and so I'm just going to

00:37:14,280 --> 00:37:18,360
use the example then of the plug-in that

00:37:16,500 --> 00:37:20,790
I showed earlier in this case which is

00:37:18,360 --> 00:37:23,160
integrating with our own custom software

00:37:20,790 --> 00:37:24,450
our Delphic syndrome which we sell is if

00:37:23,160 --> 00:37:25,980
anyone's going to develop a Jenkins

00:37:24,450 --> 00:37:27,480
plugin for that it's going to be

00:37:25,980 --> 00:37:29,220
internal to our company we aren't really

00:37:27,480 --> 00:37:32,370
expecting someone in the open source

00:37:29,220 --> 00:37:34,710
community to go about developing that so

00:37:32,370 --> 00:37:36,180
at least getting things up and running

00:37:34,710 --> 00:37:37,500
as far as the initial development of the

00:37:36,180 --> 00:37:39,060
plugin we'd expect to come from inside

00:37:37,500 --> 00:37:40,350
the company and this may be the case in

00:37:39,060 --> 00:37:42,450
other companies where you have your own

00:37:40,350 --> 00:37:44,400
internal product in which case it's more

00:37:42,450 --> 00:37:46,830
justifiable to spend the time building

00:37:44,400 --> 00:37:49,380
it since you can't find that in the open

00:37:46,830 --> 00:37:52,170
source so anyway in summary basically

00:37:49,380 --> 00:37:55,620
wanted to go back to kind of close with

00:37:52,170 --> 00:37:58,680
this slide the head earlier which is

00:37:55,620 --> 00:38:01,440
what a successful plugin be should be

00:37:58,680 --> 00:38:02,610
and it basically you should start by

00:38:01,440 --> 00:38:04,260
asking a question of whether or not

00:38:02,610 --> 00:38:07,140
something should be managed in Jenkins

00:38:04,260 --> 00:38:08,610
and then if you do build a plug-in it

00:38:07,140 --> 00:38:10,230
should be built around the strengths of

00:38:08,610 --> 00:38:12,480
Jenkins which I believe to be these

00:38:10,230 --> 00:38:14,310
strengths and if you can tie a plug into

00:38:12,480 --> 00:38:15,690
one of these core strengths and build

00:38:14,310 --> 00:38:17,520
around and improve these strengths to

00:38:15,690 --> 00:38:18,490
have a successful plugin thank you very

00:38:17,520 --> 00:38:20,550
much

00:38:18,490 --> 00:38:20,550
you

00:38:30,289 --> 00:38:32,349

YouTube URL: https://www.youtube.com/watch?v=pXQ-SRwUdY4


