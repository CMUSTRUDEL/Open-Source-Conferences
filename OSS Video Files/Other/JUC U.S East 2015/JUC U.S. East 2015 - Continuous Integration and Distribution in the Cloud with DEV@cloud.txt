Title: JUC U.S. East 2015 - Continuous Integration and Distribution in the Cloud with DEV@cloud
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Mark Galpin, JFrog 

Correct this if it's wrong, but as a software developer you have two main dreams - to enjoy your coding and to not have to care about anything else but code. Setting up an environment and maintaining a CI/CD cycle for your software can be complicated and painful. The good news is, it doesn't have to be! In this talk, Mark will demo some of the most popular alternatives for a cloud-based development life cycle: from CI builds with DEV@cloud, through artifact deployment to a binary repository and finally, rolling out your release on a truly modern distribution platform.
Captions: 
	00:00:15,080 --> 00:00:20,349
so my talk today is about

00:00:18,310 --> 00:00:24,880
creation and distribution in the cloud

00:00:20,349 --> 00:00:27,520
and we're going to be using the debit

00:00:24,880 --> 00:00:33,270
cloud option for our CI that's y

00:00:27,520 --> 00:00:36,220
cloudbees jenkins as a service offering

00:00:33,270 --> 00:00:38,890
i'm going to do that most dangerous of

00:00:36,220 --> 00:00:43,239
all things which is a live demo

00:00:38,890 --> 00:00:45,489
involving the internet so hopefully it

00:00:43,239 --> 00:00:51,250
will go well if it doesn't this will be

00:00:45,489 --> 00:00:53,589
a much much shorter talk um so first of

00:00:51,250 --> 00:00:56,019
all who am i my name is Mark talpan I am

00:00:53,589 --> 00:01:03,280
a senior solution engineer at Jeff rogue

00:00:56,019 --> 00:01:08,770
ah as a senior solution engineer on my

00:01:03,280 --> 00:01:10,750
primary concerns are my primary concerns

00:01:08,770 --> 00:01:13,150
our customers communities and partners

00:01:10,750 --> 00:01:17,049
that is of course to say you all in the

00:01:13,150 --> 00:01:18,759
audience at least hopefully um community

00:01:17,049 --> 00:01:21,670
is of course mean places like this and

00:01:18,759 --> 00:01:22,990
the Jenkins community and partners means

00:01:21,670 --> 00:01:26,619
I get to do cool new things with

00:01:22,990 --> 00:01:28,689
artifactory most recently I spent three

00:01:26,619 --> 00:01:31,179
weeks in London working on the cloud

00:01:28,689 --> 00:01:32,950
foundry deployment of artifactory if you

00:01:31,179 --> 00:01:34,749
want to know more about that feel free

00:01:32,950 --> 00:01:39,909
to ask at our booth or the cloud foundry

00:01:34,749 --> 00:01:42,909
booth so a lot of people don't know who

00:01:39,909 --> 00:01:45,880
Jay frog is so we started out as an

00:01:42,909 --> 00:01:49,829
Israeli startup um as you can see we're

00:01:45,880 --> 00:01:49,829
not quite so small a start-up anymore um

00:01:49,979 --> 00:01:55,420
we now have a US office which is what

00:01:52,509 --> 00:01:58,840
I'm part of and very recently we opened

00:01:55,420 --> 00:02:01,149
a French office as well we're a little

00:01:58,840 --> 00:02:03,909
bit obsessed with frogs as you may have

00:02:01,149 --> 00:02:06,459
noticed if you came by our booth but

00:02:03,909 --> 00:02:10,090
more seriously we are the makers of the

00:02:06,459 --> 00:02:12,370
artifactory binary repository and leave

00:02:10,090 --> 00:02:20,100
in trade distribution as a service

00:02:12,370 --> 00:02:23,020
platform so what does this talk about so

00:02:20,100 --> 00:02:28,239
hopefully if you're coming here you

00:02:23,020 --> 00:02:29,920
understand the value of CI ah and if you

00:02:28,239 --> 00:02:30,430
don't hopefully you're going to leave

00:02:29,920 --> 00:02:33,609
this

00:02:30,430 --> 00:02:36,900
 being really excited about what a

00:02:33,609 --> 00:02:38,769
modern software pipeline can do and

00:02:36,900 --> 00:02:39,939
you're going to go back to your boss and

00:02:38,769 --> 00:02:41,109
you're going to say this is all the

00:02:39,939 --> 00:02:42,280
wonderful things that a moderate offer

00:02:41,109 --> 00:02:47,560
pipeline to do and he's going to say

00:02:42,280 --> 00:02:55,060
great go into minute uh so how would you

00:02:47,560 --> 00:02:56,409
go about doing that well yeah so he's

00:02:55,060 --> 00:02:59,049
going to say you know I just wanted to

00:02:56,409 --> 00:03:00,689
be like the cool guys and so I'm going

00:02:59,049 --> 00:03:04,989
to show you how the cool guys do it and

00:03:00,689 --> 00:03:07,060
in fact how a frog doesn't we pretty

00:03:04,989 --> 00:03:08,319
much consumer own our own dog food we

00:03:07,060 --> 00:03:10,269
aren't actually using debit cloud

00:03:08,319 --> 00:03:14,680
internally but we are using Jenkins to

00:03:10,269 --> 00:03:16,750
do our own bills process internally so

00:03:14,680 --> 00:03:18,459
what is he going to need well you're

00:03:16,750 --> 00:03:21,129
going to want your software pipeline to

00:03:18,459 --> 00:03:24,099
be automated you want releases to be

00:03:21,129 --> 00:03:26,260
controlled solidly but fairly easy to

00:03:24,099 --> 00:03:27,790
execute you're going to want to

00:03:26,260 --> 00:03:29,379
enterprise-ready you're going to want to

00:03:27,790 --> 00:03:32,669
be able to handle open source projects

00:03:29,379 --> 00:03:35,680
but also your proprietary projects as

00:03:32,669 --> 00:03:38,159
you need it and you're going to want

00:03:35,680 --> 00:03:41,859
control you're going to want to know

00:03:38,159 --> 00:03:44,470
who's seeing what who's able to do what

00:03:41,859 --> 00:03:49,409
all those wonderful things that are so

00:03:44,470 --> 00:03:49,409
critical on in the corporate environment

00:03:50,010 --> 00:03:55,900
so what does that actually mean you need

00:03:52,900 --> 00:03:57,790
in terms of bits and pieces so first of

00:03:55,900 --> 00:04:02,139
all you need some place to store your

00:03:57,790 --> 00:04:05,139
sources you need something to build your

00:04:02,139 --> 00:04:08,349
binaries you need some place to store

00:04:05,139 --> 00:04:10,870
your binaries at that point if you

00:04:08,349 --> 00:04:12,280
wanted to you could be doing like web

00:04:10,870 --> 00:04:17,440
services and you could just deploy your

00:04:12,280 --> 00:04:18,370
services out to the cloud or you're

00:04:17,440 --> 00:04:22,479
going to have to distribute your

00:04:18,370 --> 00:04:23,530
binaries out to your end users um so

00:04:22,479 --> 00:04:25,240
today I'm actually going to talk about

00:04:23,530 --> 00:04:27,550
distributing your binaries out rear end

00:04:25,240 --> 00:04:31,330
users deploying binaries to your

00:04:27,550 --> 00:04:33,220
services has its own wonderful

00:04:31,330 --> 00:04:34,870
implications but we're going to talk

00:04:33,220 --> 00:04:38,439
about the other use case which is in

00:04:34,870 --> 00:04:43,399
some ways easier and in some ways harder

00:04:38,439 --> 00:04:47,119
so that does sound like a lot of things

00:04:43,399 --> 00:04:49,909
to maintain and you probably don't have

00:04:47,119 --> 00:04:54,199
a lot of time to waste maintaining your

00:04:49,909 --> 00:04:57,979
infrastructure which is why I'm going to

00:04:54,199 --> 00:05:00,199
argue that you should just do it all on

00:04:57,979 --> 00:05:04,279
the cloud and use the services out there

00:05:00,199 --> 00:05:07,549
that are available you can really do

00:05:04,279 --> 00:05:09,919
this today you know I would say that you

00:05:07,549 --> 00:05:11,629
know it's it's taken a while for us to

00:05:09,919 --> 00:05:15,499
get there where you can really do see I

00:05:11,629 --> 00:05:17,839
in the cloud by hosted services only but

00:05:15,499 --> 00:05:21,319
I'm going to show you today exactly that

00:05:17,839 --> 00:05:24,439
a complete CI m2m solution from code

00:05:21,319 --> 00:05:28,519
commits to distribution entirely in the

00:05:24,439 --> 00:05:29,659
cloud and hopefully at this point you

00:05:28,519 --> 00:05:33,319
actually want to learn a little bit more

00:05:29,659 --> 00:05:36,469
if not I apologize but hopefully it'll

00:05:33,319 --> 00:05:39,559
get better when i get to the demo so

00:05:36,469 --> 00:05:42,379
here's the end solution right on the one

00:05:39,559 --> 00:05:44,989
side I've got a code that you're writing

00:05:42,379 --> 00:05:47,989
really awesome code that your customers

00:05:44,989 --> 00:05:52,189
love and on the other side we have

00:05:47,989 --> 00:05:56,989
customers and your objective is to get

00:05:52,189 --> 00:06:00,039
from here to here in the cloud how do we

00:05:56,989 --> 00:06:03,619
do that well first up is source control

00:06:00,039 --> 00:06:05,509
so it is the Year 2015 I hope and assume

00:06:03,619 --> 00:06:07,579
that i do not have to stand up here and

00:06:05,509 --> 00:06:09,769
explain why a software company needs

00:06:07,579 --> 00:06:11,209
source control I do feel very strongly

00:06:09,769 --> 00:06:13,369
about this and if you have questions you

00:06:11,209 --> 00:06:15,169
feel free to ask me afterwards but I

00:06:13,369 --> 00:06:17,239
think we can skip the explication of the

00:06:15,169 --> 00:06:20,539
needs of source control at this point in

00:06:17,239 --> 00:06:23,389
time um but where are you going to get

00:06:20,539 --> 00:06:25,009
your source control so one obvious

00:06:23,389 --> 00:06:27,199
option is that since you probably

00:06:25,009 --> 00:06:29,299
already have source control you might

00:06:27,199 --> 00:06:32,409
want to bring or select your own and as

00:06:29,299 --> 00:06:35,119
long as it's exposed somehow on the web

00:06:32,409 --> 00:06:40,009
even fully authenticated that is

00:06:35,119 --> 00:06:41,539
perfectly fine or you can just use the

00:06:40,009 --> 00:06:44,319
built-in source control that debit cloud

00:06:41,539 --> 00:06:46,729
is providing they provide git or svn

00:06:44,319 --> 00:06:48,739
jenkins itself also supports me ocurrio

00:06:46,729 --> 00:06:51,129
but they don't provide them your curio

00:06:48,739 --> 00:06:54,699
repository at this time that I'm

00:06:51,129 --> 00:06:57,039
see and the big advantage of this on is

00:06:54,699 --> 00:06:58,179
that it's going to be network close you

00:06:57,039 --> 00:07:01,239
know you don't have to worry about

00:06:58,179 --> 00:07:05,469
network interfering between Jenkins and

00:07:01,239 --> 00:07:10,689
your source server um so we think it's a

00:07:05,469 --> 00:07:14,379
pretty reasonable choice next up is the

00:07:10,689 --> 00:07:16,209
CI server so I came all across the

00:07:14,379 --> 00:07:19,479
Jenkins user conference so that I could

00:07:16,209 --> 00:07:22,360
talk to you about how to use TFS no I'm

00:07:19,479 --> 00:07:25,779
kidding we're going to of course use

00:07:22,360 --> 00:07:28,029
Jenkins and as I said we're going to use

00:07:25,779 --> 00:07:30,039
javits cloud and here's some nice

00:07:28,029 --> 00:07:32,669
advantages of debit cloud first of all

00:07:30,039 --> 00:07:34,899
it's in the cloud no servers to maintain

00:07:32,669 --> 00:07:38,139
you know you have better things to do

00:07:34,899 --> 00:07:39,639
with your time than worry about whether

00:07:38,139 --> 00:07:43,209
your server has gotten the latest

00:07:39,639 --> 00:07:44,649
security patch it's Jenkins this is the

00:07:43,209 --> 00:07:45,969
tool you all know and love at least

00:07:44,649 --> 00:07:47,559
hopefully if you're here at the Jenkins

00:07:45,969 --> 00:07:50,050
user conference you know and love

00:07:47,559 --> 00:07:52,509
Jenkins and one of the great things

00:07:50,050 --> 00:07:54,429
about Jenkins is that its extensive

00:07:52,509 --> 00:07:57,729
plug-in environment allows great

00:07:54,429 --> 00:08:00,550
flexibility for nearly any sort of see I

00:07:57,729 --> 00:08:05,979
task you might want to throw at debit

00:08:00,550 --> 00:08:07,360
cloud so the next thing I said you

00:08:05,979 --> 00:08:09,999
needed was some place to store your

00:08:07,360 --> 00:08:14,800
binaries and that is a binary repository

00:08:09,999 --> 00:08:16,659
um there are some options with debit

00:08:14,800 --> 00:08:19,349
cloud you can use the built-in

00:08:16,659 --> 00:08:22,779
repositories that debit cloud provides

00:08:19,349 --> 00:08:25,740
those are networked clothes and of

00:08:22,779 --> 00:08:27,519
course they don't cost anything beyond

00:08:25,740 --> 00:08:30,669
you know what you're already paying

00:08:27,519 --> 00:08:32,229
basically for the service um they're not

00:08:30,669 --> 00:08:34,149
really a true binary repository in the

00:08:32,229 --> 00:08:36,639
sense that they don't have all the

00:08:34,149 --> 00:08:40,659
features that a full binary repository

00:08:36,639 --> 00:08:42,279
needs but honestly if you know you're

00:08:40,659 --> 00:08:44,589
fairly small company or you're doing a

00:08:42,279 --> 00:08:49,060
fairly small set of projects they may be

00:08:44,589 --> 00:08:50,259
fully sufficient for your needs um given

00:08:49,060 --> 00:08:51,939
that I come from JP frog however i'm

00:08:50,259 --> 00:08:57,399
going to suggest that you probably want

00:08:51,939 --> 00:08:58,990
to use harder factory and it's a really

00:08:57,399 --> 00:09:02,709
great binary repository manager or at

00:08:58,990 --> 00:09:04,509
least so they tell me so why use

00:09:02,709 --> 00:09:05,250
artifactory online we do have a cloud

00:09:04,509 --> 00:09:08,040
offering

00:09:05,250 --> 00:09:10,750
it's very complimentary to debit cloud

00:09:08,040 --> 00:09:13,090
so one reason is we're focused on

00:09:10,750 --> 00:09:16,120
managing your binaries in helping you

00:09:13,090 --> 00:09:17,620
produce are reproducible builds we

00:09:16,120 --> 00:09:20,050
provide extensible metadata for your

00:09:17,620 --> 00:09:23,680
artifacts and advanced searching by that

00:09:20,050 --> 00:09:25,810
metadata and again artifactory online is

00:09:23,680 --> 00:09:27,700
in the cloud nothing you have to

00:09:25,810 --> 00:09:29,380
maintain you don't have to worry you

00:09:27,700 --> 00:09:32,830
know you start using more disk space and

00:09:29,380 --> 00:09:35,290
it just magically appears we have never

00:09:32,830 --> 00:09:40,870
yet managed to have a customer make us

00:09:35,290 --> 00:09:43,330
run out of disk space and the really

00:09:40,870 --> 00:09:44,440
cool thing about artifactory online from

00:09:43,330 --> 00:09:48,940
the protective of attendees of this

00:09:44,440 --> 00:09:51,100
conference is that Jenkins and

00:09:48,940 --> 00:09:54,520
artifactory are two great things that

00:09:51,100 --> 00:09:55,840
are really more awesome together um so

00:09:54,520 --> 00:09:57,130
we have automatically generated build

00:09:55,840 --> 00:09:58,470
time metadata which is going to provide

00:09:57,130 --> 00:10:00,360
you information about your build

00:09:58,470 --> 00:10:02,260
information about your dependencies

00:10:00,360 --> 00:10:04,090
information about your licenses

00:10:02,260 --> 00:10:07,890
information about your environment

00:10:04,090 --> 00:10:10,120
variables and you're still network close

00:10:07,890 --> 00:10:12,250
artifactory online is hosted in u.s.

00:10:10,120 --> 00:10:16,540
East one and give a club is hosted in

00:10:12,250 --> 00:10:18,670
u.s. East one and we have a maintain

00:10:16,540 --> 00:10:21,280
plugin for artifactory that's available

00:10:18,670 --> 00:10:28,390
both for debit cloud and for on prem

00:10:21,280 --> 00:10:31,120
jenkins servers so now you've built your

00:10:28,390 --> 00:10:34,870
binaries and you want to distribute them

00:10:31,120 --> 00:10:36,640
out to the world well we have a really

00:10:34,870 --> 00:10:41,410
cool offering it's actually fairly new

00:10:36,640 --> 00:10:44,380
for commercial use and that that option

00:10:41,410 --> 00:10:49,900
is ben tre raise your hand if you've

00:10:44,380 --> 00:10:52,330
heard of ben tre before ah well

00:10:49,900 --> 00:10:53,620
this is expected this is one of the joys

00:10:52,330 --> 00:10:57,970
of why I get to give these things right

00:10:53,620 --> 00:11:00,160
um so then trey is as I say distribution

00:10:57,970 --> 00:11:01,510
as a service so why should you use been

00:11:00,160 --> 00:11:03,700
trained well you could just you know put

00:11:01,510 --> 00:11:06,930
your binaries up on your website and let

00:11:03,700 --> 00:11:08,770
people download them um but really

00:11:06,930 --> 00:11:10,810
that's going to cause lots of problems

00:11:08,770 --> 00:11:12,820
first of all if you get super popular

00:11:10,810 --> 00:11:14,020
then you're going to have to provide all

00:11:12,820 --> 00:11:16,180
that bandwidth for people to download

00:11:14,020 --> 00:11:17,950
them and it's also going to be slow

00:11:16,180 --> 00:11:24,370
because your data center is probably not

00:11:17,950 --> 00:11:25,600
close to where where they are being tre

00:11:24,370 --> 00:11:28,480
really allows you to take a different

00:11:25,600 --> 00:11:30,570
approach it's a you know in the cloud it

00:11:28,480 --> 00:11:33,030
fronts a content delivery network

00:11:30,570 --> 00:11:35,260
softlayer or a combined depending on

00:11:33,030 --> 00:11:37,150
what tier you choose to go with it

00:11:35,260 --> 00:11:42,580
provides advanced searching capabilities

00:11:37,150 --> 00:11:44,350
um it provides social capabilities for

00:11:42,580 --> 00:11:48,730
people to review your binaries if you

00:11:44,350 --> 00:11:51,010
wish to enable them arm it provides a

00:11:48,730 --> 00:11:53,920
very very extensive REST API which is

00:11:51,010 --> 00:11:57,190
very very powerful and it's developing

00:11:53,920 --> 00:11:59,830
all the time and you know that it works

00:11:57,190 --> 00:12:01,960
because lots and lots of people use it

00:11:59,830 --> 00:12:03,040
before we made a commercial we made it

00:12:01,960 --> 00:12:06,730
available to the open source community

00:12:03,040 --> 00:12:09,870
for free and a lot of a major open

00:12:06,730 --> 00:12:13,240
source projects went for it we have

00:12:09,870 --> 00:12:16,840
rubygems the netflix open source all of

00:12:13,240 --> 00:12:19,240
Scala is distributed on bin tray on if

00:12:16,840 --> 00:12:21,880
you use a Mac like I do you probably

00:12:19,240 --> 00:12:24,970
have used homebrew all of the homebrew

00:12:21,880 --> 00:12:27,940
bottles come out off in Trey Gradle is

00:12:24,970 --> 00:12:33,070
distributed on bin tray lots and lots of

00:12:27,940 --> 00:12:34,870
wonderful cool programs but distribution

00:12:33,070 --> 00:12:38,080
as a service is not just for open source

00:12:34,870 --> 00:12:42,220
anymore it's also for your commercial

00:12:38,080 --> 00:12:43,570
environments and you know so again we

00:12:42,220 --> 00:12:45,330
have the free open source but we also

00:12:43,570 --> 00:12:48,640
have professional and enterprise

00:12:45,330 --> 00:12:51,670
offerings which can do it and really the

00:12:48,640 --> 00:12:53,530
only reason I I include this picture is

00:12:51,670 --> 00:12:55,450
because some awesome guy and Web

00:12:53,530 --> 00:12:57,250
Services took that picture of the

00:12:55,450 --> 00:13:00,150
Starship Enterprise and who can resist

00:12:57,250 --> 00:13:00,150
putting that up on the screen

00:13:00,730 --> 00:13:08,139
armed and very as a very recently the

00:13:05,620 --> 00:13:13,269
plugin for artifactory also allows you

00:13:08,139 --> 00:13:16,019
to push straight tube in tray and so

00:13:13,269 --> 00:13:18,630
with that I've done enough talking uh

00:13:16,019 --> 00:13:21,250
you probably want to see something now

00:13:18,630 --> 00:13:23,260
but I before I get started on the demo I

00:13:21,250 --> 00:13:31,420
just want to call out a couple of things

00:13:23,260 --> 00:13:35,440
for you to watch for um sorry my slides

00:13:31,420 --> 00:13:36,730
are apparently out of order so first of

00:13:35,440 --> 00:13:40,260
all we're going to go from source to

00:13:36,730 --> 00:13:43,329
distribution with minimal intervention

00:13:40,260 --> 00:13:45,430
secondly you're going to hopefully agree

00:13:43,329 --> 00:13:47,470
with me at the end that Jenkins on our

00:13:45,430 --> 00:13:51,220
factory working together is a really

00:13:47,470 --> 00:13:52,389
powerful combination and third all of

00:13:51,220 --> 00:13:54,010
this is going to be in the cloud through

00:13:52,389 --> 00:13:57,120
the course the demonstration I'm going

00:13:54,010 --> 00:14:02,220
to touch nothing but my web browser and

00:13:57,120 --> 00:14:02,220
I hope you like it

00:14:07,329 --> 00:14:09,959
so

00:14:11,209 --> 00:14:14,350
here goes nothing

00:14:17,500 --> 00:14:24,339
so to start this off I'm logged in to

00:14:21,350 --> 00:14:33,920
debit cloud and I'm going to go out to

00:14:24,339 --> 00:14:35,149
my Gradle demo1 build and you can see

00:14:33,920 --> 00:14:38,839
I've been playing around with it the

00:14:35,149 --> 00:14:40,370
last couple days and um for the purposes

00:14:38,839 --> 00:14:43,279
of this demonstration I want you to

00:14:40,370 --> 00:14:45,949
imagine that you know this is a snapshot

00:14:43,279 --> 00:14:48,560
build I kicked off right before lunch

00:14:45,949 --> 00:14:50,089
and I want you to imagine that during

00:14:48,560 --> 00:14:52,910
the lunch hour I spent all of my time

00:14:50,089 --> 00:14:57,019
testing the snapshot and deciding it was

00:14:52,910 --> 00:14:59,060
ready to be staged for a release and I'm

00:14:57,019 --> 00:15:01,550
going to kick off my release staging

00:14:59,060 --> 00:15:04,220
build while I talk about what I did to

00:15:01,550 --> 00:15:05,660
get it ready so to kick off the release

00:15:04,220 --> 00:15:07,880
staging build I'm just going to click on

00:15:05,660 --> 00:15:10,100
artifactory release staging it's going

00:15:07,880 --> 00:15:11,990
to have everything pre-populated for me

00:15:10,100 --> 00:15:13,839
the current version what the next

00:15:11,990 --> 00:15:17,079
version is all the things that should do

00:15:13,839 --> 00:15:19,839
in my git repository to commit it and

00:15:17,079 --> 00:15:21,829
all I have to do is change my

00:15:19,839 --> 00:15:28,790
destination repository and artifactory

00:15:21,829 --> 00:15:34,760
to staging and provide a comment staging

00:15:28,790 --> 00:15:38,930
live from juc and we're going to kick

00:15:34,760 --> 00:15:41,600
that build off so while that build is

00:15:38,930 --> 00:15:46,490
being kicked off let's go back and first

00:15:41,600 --> 00:15:49,279
of all look down here at debit cloud you

00:15:46,490 --> 00:15:54,500
can see that I have a git repository

00:15:49,279 --> 00:15:58,000
here which i created which provides me

00:15:54,500 --> 00:16:05,170
you know your standard get controls um

00:15:58,000 --> 00:16:05,170
if I go back to the build itself and I

00:16:06,819 --> 00:16:16,699
hit configure we can see that this is

00:16:12,620 --> 00:16:19,670
you know just a standard build but when

00:16:16,699 --> 00:16:21,019
I come down here you know and I'm set to

00:16:19,670 --> 00:16:24,350
trigger right now whenever there's a

00:16:21,019 --> 00:16:26,449
commit to get since this is automated

00:16:24,350 --> 00:16:27,920
continuous integration and when I come

00:16:26,449 --> 00:16:29,670
down here i have the build environment

00:16:27,920 --> 00:16:34,460
and because of the artifacts

00:16:29,670 --> 00:16:37,860
plugin I have some choices here about

00:16:34,460 --> 00:16:39,480
what form of integration i'm doing i

00:16:37,860 --> 00:16:41,610
chose to do the Gradle integration

00:16:39,480 --> 00:16:44,160
because this is a great old project that

00:16:41,610 --> 00:16:48,360
we're using right now oh and it was

00:16:44,160 --> 00:16:51,570
really easy to set up arm and i'll show

00:16:48,360 --> 00:16:53,490
you in a moment how we how i configure

00:16:51,570 --> 00:16:58,440
the plug-in i'm kind of rolling you back

00:16:53,490 --> 00:17:01,290
in time as we went through this um but

00:16:58,440 --> 00:17:02,880
once I had the plug-in configured I just

00:17:01,290 --> 00:17:04,920
have this wonderful drop-down list of

00:17:02,880 --> 00:17:08,100
servers right now there's only one and

00:17:04,920 --> 00:17:09,600
it's my artifactory online that my team

00:17:08,100 --> 00:17:13,920
inside geoffroy bones called internal

00:17:09,600 --> 00:17:16,920
sandbox I get a list of repositories I

00:17:13,920 --> 00:17:18,150
can perform resolution out of and those

00:17:16,920 --> 00:17:19,590
for those of you familiar with

00:17:18,150 --> 00:17:24,090
artifactory these is going to be a list

00:17:19,590 --> 00:17:25,620
of your virtual repositories um I get to

00:17:24,090 --> 00:17:27,360
show what repository I want to publish

00:17:25,620 --> 00:17:28,650
to and since this is the main

00:17:27,360 --> 00:17:31,950
configuration that's going to be my

00:17:28,650 --> 00:17:34,830
snapshot repository and if I had a

00:17:31,950 --> 00:17:36,210
custom plugin for staging I could insert

00:17:34,830 --> 00:17:39,390
that here in this case I just took an

00:17:36,210 --> 00:17:42,810
out of the box and then down here I get

00:17:39,390 --> 00:17:44,040
various checkboxes on saying i'm using

00:17:42,810 --> 00:17:46,830
the artifact your Gradle plug-in it's

00:17:44,040 --> 00:17:48,860
not required but if you are using it

00:17:46,830 --> 00:17:51,270
they can they can leverage each other a

00:17:48,860 --> 00:17:52,860
very important checkbox I'm going to

00:17:51,270 --> 00:17:55,110
capture and publish my build information

00:17:52,860 --> 00:17:57,810
I want to include my environment

00:17:55,110 --> 00:18:07,020
variables i have included exclude

00:17:57,810 --> 00:18:09,150
patterns and i want to um i skipped in

00:18:07,020 --> 00:18:10,410
this build license checking and black

00:18:09,150 --> 00:18:12,300
duck integration but those are our

00:18:10,410 --> 00:18:15,300
options but i do want to publish my

00:18:12,300 --> 00:18:19,650
artifact start a factory with maven

00:18:15,300 --> 00:18:21,420
compatible patterns and I want release

00:18:19,650 --> 00:18:24,480
management here and the only real

00:18:21,420 --> 00:18:26,370
critical thing here is i inserted the

00:18:24,480 --> 00:18:29,190
property current version from my Gradle

00:18:26,370 --> 00:18:30,660
properties file and by inserting it in

00:18:29,190 --> 00:18:32,640
next integration properties that's going

00:18:30,660 --> 00:18:39,030
to auto bump the virgin every time I

00:18:32,640 --> 00:18:41,320
stage a release and then in the build

00:18:39,030 --> 00:18:50,669
step I just have to you invoke

00:18:41,320 --> 00:18:50,669
the build with use Gradle wrapper and

00:18:51,059 --> 00:18:56,380
the plug-in itself was really easy to

00:18:53,559 --> 00:18:58,899
configure you know i just installed it

00:18:56,380 --> 00:19:05,769
in installed plugins available straight

00:18:58,899 --> 00:19:08,639
out of the marketplace and then in the

00:19:05,769 --> 00:19:08,639
configuration section

00:19:15,810 --> 00:19:22,320
we have the option to provide our

00:19:18,680 --> 00:19:24,270
artifactory URL again artifactory online

00:19:22,320 --> 00:19:28,620
and then some credentials for that

00:19:24,270 --> 00:19:30,360
artifactory online instance and with

00:19:28,620 --> 00:19:33,090
that our build should actually be

00:19:30,360 --> 00:19:38,850
complete now and so let's go back and

00:19:33,090 --> 00:19:40,860
take a look at it so we can see that

00:19:38,850 --> 00:19:45,060
build number 20 which is the build I

00:19:40,860 --> 00:19:48,140
just kicked off was indeed successful we

00:19:45,060 --> 00:19:50,400
can go look at its console output and

00:19:48,140 --> 00:19:55,170
you know it says of course it was

00:19:50,400 --> 00:19:57,540
started by me and then it's going to go

00:19:55,170 --> 00:20:00,570
and download a whole bunch of Gradle

00:19:57,540 --> 00:20:02,940
plugins and then it's going to go out to

00:20:00,570 --> 00:20:06,210
Jay center which is the bin tray open

00:20:02,940 --> 00:20:09,140
source repository for java objects to

00:20:06,210 --> 00:20:12,990
download all of its dependencies are

00:20:09,140 --> 00:20:14,940
much faster than than the alternative

00:20:12,990 --> 00:20:19,410
sources for your Java dependencies by

00:20:14,940 --> 00:20:20,760
the way and then at the bottom you're

00:20:19,410 --> 00:20:28,130
going to see that it's deploying the

00:20:20,760 --> 00:20:28,130
artifacts out to out to internal sandbox

00:20:29,030 --> 00:20:35,040
and if I want over here on the left I

00:20:33,000 --> 00:20:38,400
have this option called artifactory

00:20:35,040 --> 00:20:41,010
build info which takes me straight out

00:20:38,400 --> 00:20:44,160
to my artifactory online instance and

00:20:41,010 --> 00:20:46,980
from there I can go and look at this

00:20:44,160 --> 00:20:49,410
build and inspect it deeply you know see

00:20:46,980 --> 00:20:53,370
that this was build number 20 built with

00:20:49,410 --> 00:20:55,770
Jenkins in Gradle took 32 seconds I can

00:20:53,370 --> 00:20:58,980
look at the published modules see

00:20:55,770 --> 00:21:01,020
exactly what uh.what binaries I

00:20:58,980 --> 00:21:03,900
published and what their dependencies

00:21:01,020 --> 00:21:07,620
were I can look at the environment

00:21:03,900 --> 00:21:11,040
variables I can do you license checking

00:21:07,620 --> 00:21:14,760
if I wish but what's really really cool

00:21:11,040 --> 00:21:17,340
in here is I can gift builds so I can go

00:21:14,760 --> 00:21:21,000
back and diff against release build

00:21:17,340 --> 00:21:25,230
number 10 and it's going to tell me what

00:21:21,000 --> 00:21:26,340
was different so in this case um this is

00:21:25,230 --> 00:21:29,160
not actually going to be super terribly

00:21:26,340 --> 00:21:29,639
interesting because mostly for this demo

00:21:29,160 --> 00:21:32,279
I just

00:21:29,639 --> 00:21:35,369
spamming this off and on for last

00:21:32,279 --> 00:21:39,959
several days but you know obviously my

00:21:35,369 --> 00:21:43,440
deployed artifacts are different um my

00:21:39,959 --> 00:21:44,929
dependencies are not different and my

00:21:43,440 --> 00:21:48,629
environment variables have changed

00:21:44,929 --> 00:21:53,429
primarily based on the build IDs that

00:21:48,629 --> 00:21:55,799
I've gone on and if I move on down a

00:21:53,429 --> 00:21:58,919
couple of pages then i'm going to start

00:21:55,799 --> 00:22:00,659
realizing that other than the build info

00:21:58,919 --> 00:22:03,599
environment variables all of my

00:22:00,659 --> 00:22:04,889
environment variables are the same which

00:22:03,599 --> 00:22:06,899
again is in the case with this

00:22:04,889 --> 00:22:09,119
particular build exactly what I would

00:22:06,899 --> 00:22:11,039
expect something cool we do with our own

00:22:09,119 --> 00:22:13,499
is we actually set an environment

00:22:11,039 --> 00:22:14,879
variable as part of our build we set an

00:22:13,499 --> 00:22:18,119
environment variable for every major

00:22:14,879 --> 00:22:19,979
feature so that we can use this

00:22:18,119 --> 00:22:25,679
capability to see what features went

00:22:19,979 --> 00:22:26,940
into each build something that I'm here

00:22:25,679 --> 00:22:29,579
with our release engineer and he showed

00:22:26,940 --> 00:22:34,109
me that and it's kind of a cool little

00:22:29,579 --> 00:22:37,139
feature oh and that's artifactory build

00:22:34,109 --> 00:22:40,440
info all of this was provided by a json

00:22:37,139 --> 00:22:49,320
object that Jenkins uploaded via our

00:22:40,440 --> 00:22:52,109
plugin so going back to back to our

00:22:49,320 --> 00:22:53,489
building Jenkins I think we've done

00:22:52,109 --> 00:22:56,249
enough inspection to decide that it's

00:22:53,489 --> 00:22:58,169
ready for release and this is where life

00:22:56,249 --> 00:23:00,959
gets really fun so I want to do a

00:22:58,169 --> 00:23:04,579
release promotion and really all I have

00:23:00,959 --> 00:23:10,769
to do at this point is give a comment

00:23:04,579 --> 00:23:15,779
releasing Chuck give a target promotion

00:23:10,769 --> 00:23:19,829
repository lived releases and I hit

00:23:15,779 --> 00:23:22,709
update it does a quick dry run and it

00:23:19,829 --> 00:23:26,940
promotes it and then if I go back out to

00:23:22,709 --> 00:23:33,629
here I'm going to see um over here I've

00:23:26,940 --> 00:23:35,909
got a release history and it's going to

00:23:33,629 --> 00:23:37,349
tell me that it's been released or if I

00:23:35,909 --> 00:23:39,899
go look at the artifacts in the tree

00:23:37,349 --> 00:23:42,679
browser we're now going to see them and

00:23:39,899 --> 00:23:42,679
lived release local

00:23:44,970 --> 00:23:51,930
and see that I just released one dot 17

00:23:52,140 --> 00:23:57,940
so for many of you this is where it's

00:23:55,030 --> 00:23:59,410
going to end because you're building

00:23:57,940 --> 00:24:02,410
your stuff only for use inside your

00:23:59,410 --> 00:24:04,720
company and at this point you've done

00:24:02,410 --> 00:24:07,480
enough but I promised you that we'd go

00:24:04,720 --> 00:24:10,000
the final step and take you to the level

00:24:07,480 --> 00:24:16,510
where you take it from a release build

00:24:10,000 --> 00:24:21,720
out to the public and so the final step

00:24:16,510 --> 00:24:21,720
from there is to do a push tube in Trey

00:24:22,470 --> 00:24:28,180
mm and you have a built-in file that you

00:24:26,080 --> 00:24:29,770
can do to fill in all this information

00:24:28,180 --> 00:24:31,330
automatically but since I wanted to kind

00:24:29,770 --> 00:24:33,130
of show you what you need to what you

00:24:31,330 --> 00:24:36,190
need to give it I'm going to fill it in

00:24:33,130 --> 00:24:37,990
for you live so I just get asked to

00:24:36,190 --> 00:24:40,030
subject that's actually the bin Trey

00:24:37,990 --> 00:24:45,630
user or organization that's Jay prog

00:24:40,030 --> 00:24:45,630
demo the bin Trey repository is pro demo

00:24:45,930 --> 00:24:49,690
the package name is going to be the same

00:24:48,160 --> 00:24:54,070
as the build in this case so great old

00:24:49,690 --> 00:24:57,400
ash demo one and the version is the same

00:24:54,070 --> 00:24:58,840
as the build version which is 117 if I

00:24:57,400 --> 00:25:01,330
was open source I would also have to

00:24:58,840 --> 00:25:04,480
provide a license and a source

00:25:01,330 --> 00:25:06,010
repository because @j prague we take

00:25:04,480 --> 00:25:07,060
open source very seriously and if you're

00:25:06,010 --> 00:25:08,500
going to call something open source

00:25:07,060 --> 00:25:13,060
you're going to have to tell us where

00:25:08,500 --> 00:25:14,560
the source is um but since this is a

00:25:13,060 --> 00:25:16,300
commercial repository that I'm pushing

00:25:14,560 --> 00:25:18,790
to I do not need to provide that

00:25:16,300 --> 00:25:23,770
information although we do now allow as

00:25:18,790 --> 00:25:25,330
of I think yesterday in fact um that you

00:25:23,770 --> 00:25:28,000
can actually include commercial license

00:25:25,330 --> 00:25:29,920
information here and the specific

00:25:28,000 --> 00:25:32,530
commercial non open source license that

00:25:29,920 --> 00:25:36,190
you're pushing this binary with for your

00:25:32,530 --> 00:25:39,270
customers or the general public and then

00:25:36,190 --> 00:25:39,270
I'm going to hit push tube in Trey

00:25:46,800 --> 00:25:50,940
and there we go we get our status code

00:25:49,230 --> 00:25:55,890
200 meaning it pushed successfully and

00:25:50,940 --> 00:26:01,070
if I go out here to my package out on

00:25:55,890 --> 00:26:01,070
Ben Tre i logged onto vin tray and you

00:26:03,860 --> 00:26:08,310
know you'll all gone to Ben Tre then you

00:26:06,360 --> 00:26:11,820
get a list of your repositories for that

00:26:08,310 --> 00:26:13,620
organization go out to the package it's

00:26:11,820 --> 00:26:21,720
going to say that I have some

00:26:13,620 --> 00:26:28,610
unpublished artifacts I hit publish I go

00:26:21,720 --> 00:26:33,740
into the demo i select version 1 17 and

00:26:28,610 --> 00:26:37,140
I can look at the files and see that

00:26:33,740 --> 00:26:39,900
under 117 I have files and if I want to

00:26:37,140 --> 00:26:42,300
make one in particular um kind of up

00:26:39,900 --> 00:26:46,800
front for the user I can say showing

00:26:42,300 --> 00:26:50,030
download list and then when i go back to

00:26:46,800 --> 00:26:51,750
general information on this package

00:26:50,030 --> 00:26:55,170
you're going to have a download link

00:26:51,750 --> 00:26:57,750
right down here in the lower left a list

00:26:55,170 --> 00:26:59,970
of all the versions with a little badge

00:26:57,750 --> 00:27:01,590
that says this is latest version and in

00:26:59,970 --> 00:27:04,260
fact i can click on this button and

00:27:01,590 --> 00:27:07,070
tweet about this awesome release that's

00:27:04,260 --> 00:27:09,150
now available in this case to the public

00:27:07,070 --> 00:27:11,040
although i would have had the choice of

00:27:09,150 --> 00:27:14,760
leaving this particular binary

00:27:11,040 --> 00:27:17,070
repository locked if I'd wanted so that

00:27:14,760 --> 00:27:19,650
only select people could access it but

00:27:17,070 --> 00:27:25,560
in this case I just want to make it

00:27:19,650 --> 00:27:31,410
available to the public and to prove it

00:27:25,560 --> 00:27:35,940
I can just hit download and max warned

00:27:31,410 --> 00:27:38,000
me that jars are dangerous and there it

00:27:35,940 --> 00:27:38,000
goes

00:27:39,710 --> 00:27:46,190
and that pretty much covers end to end

00:27:43,340 --> 00:27:48,890
and I think that took us about 15

00:27:46,190 --> 00:27:51,590
minutes to do an entire release

00:27:48,890 --> 00:27:53,059
distributed out to the world and I was

00:27:51,590 --> 00:27:54,230
explaining it the entire way if you had

00:27:53,059 --> 00:28:02,179
to do it yourself you could probably do

00:27:54,230 --> 00:28:05,149
it in five or less so um I went through

00:28:02,179 --> 00:28:10,220
all of that kind of quickly so I am now

00:28:05,149 --> 00:28:12,590
going to let you ask any questions isn't

00:28:10,220 --> 00:28:14,659
a mechanism for this tool to show us

00:28:12,590 --> 00:28:17,179
which apir which version of an API that

00:28:14,659 --> 00:28:21,440
we would publish throop entry is being

00:28:17,179 --> 00:28:23,750
used how much did you beat the question

00:28:21,440 --> 00:28:25,820
please if there a mechanism for this

00:28:23,750 --> 00:28:28,159
tool to come and tell us that if I put

00:28:25,820 --> 00:28:30,409
in like any API or multiple versions of

00:28:28,159 --> 00:28:31,610
a particular API because I'm in

00:28:30,409 --> 00:28:34,730
government I will not be putting myself

00:28:31,610 --> 00:28:37,309
out there so if I do put some API is out

00:28:34,730 --> 00:28:39,260
there and multiple versions of a

00:28:37,309 --> 00:28:41,929
particular API and I want to you see

00:28:39,260 --> 00:28:43,390
their usage of those api's is there a

00:28:41,929 --> 00:28:49,370
way that this tool will tell me that

00:28:43,390 --> 00:28:51,590
yeah sure um so if you published if I

00:28:49,370 --> 00:28:53,630
understand your question what you're

00:28:51,590 --> 00:28:55,070
asking is you publish multiple api's out

00:28:53,630 --> 00:28:56,600
to Ben Tre and you want to know what

00:28:55,070 --> 00:28:59,570
people are which of these people are

00:28:56,600 --> 00:29:03,980
using on a regular basis yes absolutely

00:28:59,570 --> 00:29:05,809
ben tre I provides that option um it's a

00:29:03,980 --> 00:29:07,820
really great question unfortunately my

00:29:05,809 --> 00:29:11,140
demo is not broadly downloaded so this

00:29:07,820 --> 00:29:18,559
is going to be very very boring to watch

00:29:11,140 --> 00:29:27,049
um but let me pick a slightly better

00:29:18,559 --> 00:29:28,789
option here here let me let me sign in

00:29:27,049 --> 00:29:31,029
as somebody else other than the demo

00:29:28,789 --> 00:29:31,029
user

00:29:34,250 --> 00:29:47,100
and I have somewhat more interesting

00:29:37,470 --> 00:29:50,100
package to show you then then my demo so

00:29:47,100 --> 00:29:55,409
if for example you wanted to see

00:29:50,100 --> 00:29:57,299
artifactory Pro and see how its evolved

00:29:55,409 --> 00:30:03,510
over the varying versions and how

00:29:57,299 --> 00:30:06,929
they've been downloaded let's go with so

00:30:03,510 --> 00:30:08,549
you can see here you know um that in the

00:30:06,929 --> 00:30:12,539
last 30 days originally people were

00:30:08,549 --> 00:30:16,830
downloading 37 with some smatterings of

00:30:12,539 --> 00:30:21,210
the older versions in there and then we

00:30:16,830 --> 00:30:24,360
released 38 on May thirtieth and people

00:30:21,210 --> 00:30:28,280
started downloading 38 but every once in

00:30:24,360 --> 00:30:35,220
a while somebody download some 37 or or

00:30:28,280 --> 00:30:38,220
some 353 or other older versions and you

00:30:35,220 --> 00:30:41,360
can see the exact details of whom

00:30:38,220 --> 00:30:43,950
downloaded it when if it's fully private

00:30:41,360 --> 00:30:46,860
you also have the option of giving

00:30:43,950 --> 00:30:48,720
signed URLs to your customers and in

00:30:46,860 --> 00:30:50,730
those cases you can actually request

00:30:48,720 --> 00:30:54,210
email notification every time the URL is

00:30:50,730 --> 00:30:57,630
used so if you want to know exactly how

00:30:54,210 --> 00:30:59,400
often somebody downloads it on a private

00:30:57,630 --> 00:31:01,530
repository you can do that as well and

00:30:59,400 --> 00:31:03,000
thank you very much again for attending

00:31:01,530 --> 00:31:05,570
the talk and please enjoy the jenkins

00:31:03,000 --> 00:31:05,570
user conference

00:31:15,230 --> 00:31:17,290

YouTube URL: https://www.youtube.com/watch?v=siFPOaIiQGk


