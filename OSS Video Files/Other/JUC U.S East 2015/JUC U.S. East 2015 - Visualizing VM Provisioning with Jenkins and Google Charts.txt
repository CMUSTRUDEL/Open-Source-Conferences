Title: JUC U.S. East 2015 - Visualizing VM Provisioning with Jenkins and Google Charts
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Martin Hobson, Agilex Technologies 

Agilex is building a medical data portal application that aggregates data from many sources. As part of the continuous integration process, the Agilex team has set up a complete environment with actual implementation VMs of the different data sources. A total of 12 or more VMs must be launched, per build. Once launched, the team then deploys the portal and runs acceptance tests. The provisioning process is complicated by the need to observe specific startup dependencies, and overall performance is slow. The amount of output generated by the VM startup process is large and challenging to analyze. In order to review the startup performance and identify options for improvements, the provisioning and test process was instrumented and the startup timeline was graphed for review. This allowed the team to verify that dependencies between the VMs are observed and showed opportunities for optimizations to reduce the build times.
Captions: 
	00:00:15,070 --> 00:00:19,090
Martin Hobson I work for agile X

00:00:17,439 --> 00:00:20,890
technologies some of you may know we

00:00:19,090 --> 00:00:23,919
were just acquired by accenture so

00:00:20,890 --> 00:00:25,630
shortly I'll be with Accenture my

00:00:23,919 --> 00:00:27,310
partner in crime in this is a gentleman

00:00:25,630 --> 00:00:29,349
by the name of Antony on tonight Brady

00:00:27,310 --> 00:00:30,490
couldn't make it today but what I'm

00:00:29,349 --> 00:00:31,929
going to show you today was actually a

00:00:30,490 --> 00:00:34,449
learning exercise for him as he was

00:00:31,929 --> 00:00:37,000
coming on board one of our teams to get

00:00:34,449 --> 00:00:43,150
comfortable with Jenkins and DevOps

00:00:37,000 --> 00:00:45,970
tools DevOps is what people say it is

00:00:43,150 --> 00:00:49,329
kind of what most people take it to mean

00:00:45,970 --> 00:00:52,559
is the use of scripts and automated

00:00:49,329 --> 00:00:55,059
tools to create virtual machines and

00:00:52,559 --> 00:00:57,399
infrastructure but there's more to it

00:00:55,059 --> 00:00:59,079
than that and something that people

00:00:57,399 --> 00:01:03,129
conveniently forget is that DevOps

00:00:59,079 --> 00:01:06,160
actually includes measurement and

00:01:03,129 --> 00:01:09,060
iteration as part of its founding

00:01:06,160 --> 00:01:11,950
principles so if we're looking at a

00:01:09,060 --> 00:01:13,929
Jenkins job that does a lot of DevOps

00:01:11,950 --> 00:01:15,460
related tasks like create VMs and

00:01:13,929 --> 00:01:17,080
interconnect them one of the things

00:01:15,460 --> 00:01:18,940
that's we should know if we're serious

00:01:17,080 --> 00:01:20,950
about iterating and improving is how

00:01:18,940 --> 00:01:23,380
long it takes to do these things are

00:01:20,950 --> 00:01:26,530
they happening in the order that we want

00:01:23,380 --> 00:01:28,150
them to happen in and where can we make

00:01:26,530 --> 00:01:30,100
things better we're going where can we

00:01:28,150 --> 00:01:31,960
improve you heard our previous presenter

00:01:30,100 --> 00:01:34,479
talk about how important it was to cut

00:01:31,960 --> 00:01:36,759
down people time and run time in the

00:01:34,479 --> 00:01:38,829
jobs and that certainly applies in our

00:01:36,759 --> 00:01:41,320
world to even putting things into a

00:01:38,829 --> 00:01:42,880
double us as we do it still costs time

00:01:41,320 --> 00:01:44,560
and takes time to run these things and

00:01:42,880 --> 00:01:46,240
people are waiting for the results and

00:01:44,560 --> 00:01:48,040
though we can't assume that everything

00:01:46,240 --> 00:01:49,299
happens instantaneously just because

00:01:48,040 --> 00:01:51,790
we've moved it to the cloud we still do

00:01:49,299 --> 00:01:55,180
have to pay attention to the to the

00:01:51,790 --> 00:01:56,590
finer points and it can be hard let me

00:01:55,180 --> 00:01:58,149
tell you a little bit about the project

00:01:56,590 --> 00:02:03,329
that we were working on why this was so

00:01:58,149 --> 00:02:03,329
important to us come on

00:02:06,009 --> 00:02:10,759
last year I was assigned as a

00:02:08,840 --> 00:02:13,280
troubleshooting team onto a project that

00:02:10,759 --> 00:02:15,290
was building a large portal system for

00:02:13,280 --> 00:02:16,970
the Veterans Administration the goal was

00:02:15,290 --> 00:02:19,190
to build a system that would sit at

00:02:16,970 --> 00:02:21,260
bedside and allow clinicians doctors

00:02:19,190 --> 00:02:24,200
nurses to get a single view of all the

00:02:21,260 --> 00:02:25,519
information that VA had on a patient it

00:02:24,200 --> 00:02:27,230
could be sizable and they get their

00:02:25,519 --> 00:02:29,510
information from all over the DoD

00:02:27,230 --> 00:02:32,180
enterprise it's a big place there are

00:02:29,510 --> 00:02:34,280
lots of sources of Records and it can

00:02:32,180 --> 00:02:35,540
take quite a while to get them all so in

00:02:34,280 --> 00:02:37,670
order to improve patient care they

00:02:35,540 --> 00:02:39,170
wanted to have a single system that

00:02:37,670 --> 00:02:40,580
could be told the patient was coming

00:02:39,170 --> 00:02:43,010
then go out and collect those records

00:02:40,580 --> 00:02:45,890
and present them in a single view so

00:02:43,010 --> 00:02:47,180
they had a complete view of what was

00:02:45,890 --> 00:02:50,870
going on with this person they were

00:02:47,180 --> 00:02:52,310
dealing with it's a classic stove pipe

00:02:50,870 --> 00:02:55,069
system we were trying to bring all those

00:02:52,310 --> 00:02:57,049
stove pipes together and that work is

00:02:55,069 --> 00:02:59,110
still in progress we need to support

00:02:57,049 --> 00:03:01,430
this we used a fairly standard Jenkins

00:02:59,110 --> 00:03:03,739
environment it's all in AWS that's

00:03:01,430 --> 00:03:05,000
sizable at last count when I left there

00:03:03,739 --> 00:03:07,400
they were running somewhere between two

00:03:05,000 --> 00:03:10,220
and three hundred instances in that CI

00:03:07,400 --> 00:03:13,280
cloud full time just to support the

00:03:10,220 --> 00:03:15,650
build pipeline for this project we used

00:03:13,280 --> 00:03:17,180
a fairly standard strategy where you

00:03:15,650 --> 00:03:18,380
first did a unit test build if that was

00:03:17,180 --> 00:03:20,150
successful you promote it to an

00:03:18,380 --> 00:03:21,739
integration test build and then you move

00:03:20,150 --> 00:03:24,019
on to the acceptance test build where we

00:03:21,739 --> 00:03:25,280
actually stood up a complete as complete

00:03:24,019 --> 00:03:26,450
assistant as we could in that

00:03:25,280 --> 00:03:28,819
environment with data sources

00:03:26,450 --> 00:03:31,850
honest-to-goodness incarnations of the

00:03:28,819 --> 00:03:33,950
VA database systems with seed data and

00:03:31,850 --> 00:03:35,090
some other third-party systems they'd

00:03:33,950 --> 00:03:36,980
all come together there and we'd

00:03:35,090 --> 00:03:39,350
experiment to see if I we test to see if

00:03:36,980 --> 00:03:40,670
our portal system actually could in real

00:03:39,350 --> 00:03:44,810
life bring all this data together

00:03:40,670 --> 00:03:48,349
successfully it was because i mentioned

00:03:44,810 --> 00:03:50,000
/ build the number of VMs that these

00:03:48,349 --> 00:03:51,739
bills would stand up just to make this

00:03:50,000 --> 00:03:54,950
happen was somewhere between 8 and 15

00:03:51,739 --> 00:03:57,920
VMs / build given multiple branches in

00:03:54,950 --> 00:03:59,540
operation and different versions they're

00:03:57,920 --> 00:04:00,709
all different commit levels be different

00:03:59,540 --> 00:04:02,329
commits being run at the same time

00:04:00,709 --> 00:04:04,609
that's where that number of two to three

00:04:02,329 --> 00:04:06,799
hundred instances active at any one come

00:04:04,609 --> 00:04:08,480
time comes from it be maybe 10 or 15

00:04:06,799 --> 00:04:10,310
builds running in parallel or

00:04:08,480 --> 00:04:12,170
sequentially that that required that

00:04:10,310 --> 00:04:14,120
level of support in AWS it was not cheap

00:04:12,170 --> 00:04:15,550
to operate that cloud and that's still

00:04:14,120 --> 00:04:17,380
in it's still in progress

00:04:15,550 --> 00:04:20,769
the other thing we saw was that we had

00:04:17,380 --> 00:04:22,300
some fairly complex startup flows this

00:04:20,769 --> 00:04:24,340
is a complete production environment so

00:04:22,300 --> 00:04:26,620
if you imagine what you would have to do

00:04:24,340 --> 00:04:29,770
to make that work a sample of what we

00:04:26,620 --> 00:04:31,240
were dealing with is shown here it's

00:04:29,770 --> 00:04:32,560
part of our provisioning flow the first

00:04:31,240 --> 00:04:34,780
thing we would have to do is stand up

00:04:32,560 --> 00:04:36,850
the basic ldap server for the whole

00:04:34,780 --> 00:04:38,380
environment basically where we kept user

00:04:36,850 --> 00:04:39,790
credentials and passwords and where

00:04:38,380 --> 00:04:41,380
everything that happened after that was

00:04:39,790 --> 00:04:43,180
validated against then we'd stand up a

00:04:41,380 --> 00:04:46,000
relational database system that had core

00:04:43,180 --> 00:04:48,460
records that would be fed into some of

00:04:46,000 --> 00:04:50,830
these stove pipe systems that would form

00:04:48,460 --> 00:04:52,180
at them and produce individual patient

00:04:50,830 --> 00:04:54,730
records and there were some other

00:04:52,180 --> 00:04:56,680
pipeline systems that would collect data

00:04:54,730 --> 00:04:58,660
from elsewhere that had to be brought up

00:04:56,680 --> 00:05:01,090
and then after all these preconditions

00:04:58,660 --> 00:05:03,160
are met then we could initialize the vm

00:05:01,090 --> 00:05:04,750
that contained our actual code that

00:05:03,160 --> 00:05:06,400
would go out and touch these systems and

00:05:04,750 --> 00:05:09,130
consume data from them and format them

00:05:06,400 --> 00:05:11,020
and present api's to our web interfaces

00:05:09,130 --> 00:05:13,240
and that was a sequence of two or three

00:05:11,020 --> 00:05:15,040
steps after that so you could this is a

00:05:13,240 --> 00:05:16,330
notional diagram this is not actually

00:05:15,040 --> 00:05:19,360
what was happening there's quite a few

00:05:16,330 --> 00:05:21,100
more systems involved in in our actual

00:05:19,360 --> 00:05:22,900
flow but it's not a trivial thing you

00:05:21,100 --> 00:05:24,580
could see at least one two three four

00:05:22,900 --> 00:05:31,110
five levels of things that had to happen

00:05:24,580 --> 00:05:33,400
in sequence for this to be successful as

00:05:31,110 --> 00:05:35,410
it happened at the time I was working

00:05:33,400 --> 00:05:37,180
this project an individual acceptance

00:05:35,410 --> 00:05:39,580
test build took about an hour and a half

00:05:37,180 --> 00:05:41,230
to run there were a hundred developers

00:05:39,580 --> 00:05:45,910
on this project committing frequently

00:05:41,230 --> 00:05:47,890
and well even AWS even our allocation of

00:05:45,910 --> 00:05:49,660
AWS had a hard time keeping up with this

00:05:47,890 --> 00:05:51,760
we found our build pipelines slipping

00:05:49,660 --> 00:05:53,169
further and further behind the actual

00:05:51,760 --> 00:05:55,360
change frequencies to the point that

00:05:53,169 --> 00:05:57,460
when you put in a commit you would have

00:05:55,360 --> 00:05:58,960
to wait a day or two for the acceptance

00:05:57,460 --> 00:06:02,680
test build associated with that commit

00:05:58,960 --> 00:06:04,690
to complete and in that is just not

00:06:02,680 --> 00:06:06,580
acceptable that was just not working

00:06:04,690 --> 00:06:08,590
because what happened is somebody would

00:06:06,580 --> 00:06:10,060
break it the previous day they wouldn't

00:06:08,590 --> 00:06:13,000
find out though the next day and then

00:06:10,060 --> 00:06:14,560
you'd have a cascade of commits piled on

00:06:13,000 --> 00:06:16,600
top of that that you have to roll back

00:06:14,560 --> 00:06:18,610
to see what had happened and with a

00:06:16,600 --> 00:06:21,220
hundred people depending on this I mean

00:06:18,610 --> 00:06:22,450
it the management headaches are in this

00:06:21,220 --> 00:06:24,400
you can't just tell everyone to stop

00:06:22,450 --> 00:06:26,620
work while we go and sort out what

00:06:24,400 --> 00:06:27,449
happened two days ago because of Joe

00:06:26,620 --> 00:06:29,430
over here

00:06:27,449 --> 00:06:30,930
and undo everything you've done because

00:06:29,430 --> 00:06:32,520
Joel made a mistake and we didn't find

00:06:30,930 --> 00:06:34,379
out until days later it's just not a

00:06:32,520 --> 00:06:35,789
good scene to be in so it was important

00:06:34,379 --> 00:06:37,949
for us to see how we could possibly

00:06:35,789 --> 00:06:40,770
optimize these bills to make more of

00:06:37,949 --> 00:06:44,249
them happen more frequently and stay on

00:06:40,770 --> 00:06:47,789
top of our change frequency the with

00:06:44,249 --> 00:06:49,620
Senate with booting 15 Linux systems the

00:06:47,789 --> 00:06:51,809
output the console log output from them

00:06:49,620 --> 00:06:53,430
is immense it's a lot of data we

00:06:51,809 --> 00:06:55,379
installed then software on there as well

00:06:53,430 --> 00:06:58,110
and that would all be pushed into

00:06:55,379 --> 00:06:59,849
console the Jenkins console.log and it

00:06:58,110 --> 00:07:01,319
was all tagged so you could you know

00:06:59,849 --> 00:07:03,719
using grep or F grep or whatever you

00:07:01,319 --> 00:07:05,339
want separate the individual system logs

00:07:03,719 --> 00:07:07,620
but I'm sure you could imagine nobody

00:07:05,339 --> 00:07:08,909
ever did that because it was just a lot

00:07:07,620 --> 00:07:15,960
of work to figure out what was going on

00:07:08,909 --> 00:07:18,629
inside of these individual VMs so the

00:07:15,960 --> 00:07:21,089
first step all of our provisioning was

00:07:18,629 --> 00:07:23,969
driven using Ruby scripts that's you

00:07:21,089 --> 00:07:25,349
know your standard chef kind of a that's

00:07:23,969 --> 00:07:27,089
one of the standard tool that's used in

00:07:25,349 --> 00:07:29,339
this space and it's a procedural

00:07:27,089 --> 00:07:31,740
language and there's we'd write these

00:07:29,339 --> 00:07:35,099
little Ruby programs to initialize the

00:07:31,740 --> 00:07:36,899
VMS and we could easily say figure wrap

00:07:35,099 --> 00:07:39,349
our provisioning steps with timing

00:07:36,899 --> 00:07:43,110
information and capture the actual time

00:07:39,349 --> 00:07:44,849
required to boot and start up and

00:07:43,110 --> 00:07:48,439
configure the ends at the various points

00:07:44,849 --> 00:07:51,240
that they well when they would start and

00:07:48,439 --> 00:07:53,159
we omit this data as time stamped into

00:07:51,240 --> 00:07:54,749
our log is a first step and then later

00:07:53,159 --> 00:07:57,020
on we'd simply go to the logs and

00:07:54,749 --> 00:07:59,279
collect the timestamps out of it and

00:07:57,020 --> 00:08:01,110
then we'd have you know the times

00:07:59,279 --> 00:08:02,520
required by the individual provisioning

00:08:01,110 --> 00:08:04,860
steps and we could look at this tabular

00:08:02,520 --> 00:08:06,240
report and maybe if you know if you're a

00:08:04,860 --> 00:08:08,849
computer and you can figure out what the

00:08:06,240 --> 00:08:11,009
number of seconds since 1970 means

00:08:08,849 --> 00:08:12,779
exactly it makes sense to you but it

00:08:11,009 --> 00:08:14,219
didn't make a lot of sense to me or my

00:08:12,779 --> 00:08:16,229
management what we really wanted was

00:08:14,219 --> 00:08:18,089
something like the chart down here below

00:08:16,229 --> 00:08:19,889
where you can see those are our first

00:08:18,089 --> 00:08:22,339
presidents you can see that they don't

00:08:19,889 --> 00:08:24,509
overlap that they have about the a

00:08:22,339 --> 00:08:26,189
one-term president is about this long

00:08:24,509 --> 00:08:28,830
and a two-term president is about this

00:08:26,189 --> 00:08:30,990
long and everything kind of makes sense

00:08:28,830 --> 00:08:32,760
you know there's no it's not broken it's

00:08:30,990 --> 00:08:33,870
working the way you expect just looking

00:08:32,760 --> 00:08:35,550
at that you could tell if you saw the

00:08:33,870 --> 00:08:37,769
actual dates you may or may not be able

00:08:35,550 --> 00:08:40,050
to figure that out but it graphically um

00:08:37,769 --> 00:08:42,349
a graphical display here would have been

00:08:40,050 --> 00:08:42,349
helped

00:08:48,950 --> 00:08:53,780
so we had these build time stamps and we

00:08:52,610 --> 00:08:55,400
scratched our head and we figured it'd

00:08:53,780 --> 00:08:57,140
probably be easy enough to get them into

00:08:55,400 --> 00:09:00,350
a chart like that but what I showed you

00:08:57,140 --> 00:09:03,190
was just a standard Google charts

00:09:00,350 --> 00:09:06,170
example taken from there from there

00:09:03,190 --> 00:09:09,110
first you know hello world home page for

00:09:06,170 --> 00:09:10,430
that for that tool and we said well you

00:09:09,110 --> 00:09:12,020
know if we could somehow get these time

00:09:10,430 --> 00:09:14,570
stamps into that form that would be

00:09:12,020 --> 00:09:17,150
fantastic but how do we get them the

00:09:14,570 --> 00:09:18,830
groovy of the groovy build log I'm sorry

00:09:17,150 --> 00:09:21,500
they're the Jenkins build log isn't

00:09:18,830 --> 00:09:22,820
really a workspace artifact and if we

00:09:21,500 --> 00:09:24,560
could somehow get that into the

00:09:22,820 --> 00:09:26,120
workspace and turn loose some build

00:09:24,560 --> 00:09:28,130
scripts on it we could easily pull out

00:09:26,120 --> 00:09:30,830
our time stamps and inject them into a

00:09:28,130 --> 00:09:33,020
graph like that but the workspace kind

00:09:30,830 --> 00:09:34,730
of exists in the parent Jenkins servers

00:09:33,020 --> 00:09:37,790
and doesn't make it down into the

00:09:34,730 --> 00:09:40,550
children very easily so we were able to

00:09:37,790 --> 00:09:42,740
make that happen using some post build

00:09:40,550 --> 00:09:44,990
Ruby scripting that talks to the Jenkins

00:09:42,740 --> 00:09:46,760
object model of a few trips to stack

00:09:44,990 --> 00:09:48,530
overflow sort of this out for us it's

00:09:46,760 --> 00:09:50,480
you know it's not a not a common thing

00:09:48,530 --> 00:09:53,090
to capture your build log and place it

00:09:50,480 --> 00:09:54,680
into the workspace but we did have a

00:09:53,090 --> 00:09:57,410
need for that we discovered how to do it

00:09:54,680 --> 00:09:59,030
and this is the code fragment that we

00:09:57,410 --> 00:10:00,590
use you can see references to channels

00:09:59,030 --> 00:10:02,720
and file paths that has to do with the

00:10:00,590 --> 00:10:05,510
fact that our builds actually are remote

00:10:02,720 --> 00:10:07,760
from the Jenkins servers where the jobs

00:10:05,510 --> 00:10:09,770
reside and you do have to can't use the

00:10:07,760 --> 00:10:11,660
standard groovy and java file objects to

00:10:09,770 --> 00:10:13,970
manipulate the Jenkins files you have to

00:10:11,660 --> 00:10:16,310
use their remoted files to make that

00:10:13,970 --> 00:10:18,230
happen and what you're seeing there is

00:10:16,310 --> 00:10:19,580
special logic to make sure that even

00:10:18,230 --> 00:10:21,260
though these things are separated we

00:10:19,580 --> 00:10:23,540
still can capture the actual log and

00:10:21,260 --> 00:10:29,780
push it into the workspace once that was

00:10:23,540 --> 00:10:33,170
done we wanted to inject it into this

00:10:29,780 --> 00:10:36,800
piece of HTML this is again taken right

00:10:33,170 --> 00:10:40,310
off the Google example this is actually

00:10:36,800 --> 00:10:42,290
that presidents page with with the name

00:10:40,310 --> 00:10:44,450
of the president replaced with our event

00:10:42,290 --> 00:10:47,240
ID and a start and end tag and then a

00:10:44,450 --> 00:10:48,800
little a little magic comment put in

00:10:47,240 --> 00:10:50,690
that bottom part where you can see the

00:10:48,800 --> 00:10:55,040
data table that's where the individual

00:10:50,690 --> 00:10:57,500
event Rose would go and we we will then

00:10:55,040 --> 00:11:01,490
script an injection of our captured log

00:10:57,500 --> 00:11:05,930
input and stick it right in there and

00:11:01,490 --> 00:11:07,820
well see right that that's this next

00:11:05,930 --> 00:11:09,800
step we capture the end of it the

00:11:07,820 --> 00:11:12,170
reformat time stance that come out as

00:11:09,800 --> 00:11:15,860
JavaScript as it happens we can do that

00:11:12,170 --> 00:11:17,480
Ruby writing JavaScript not a problem we

00:11:15,860 --> 00:11:19,070
format them properly for injection into

00:11:17,480 --> 00:11:21,350
the chart we label them so they're easy

00:11:19,070 --> 00:11:22,730
to find in the log file then we grab

00:11:21,350 --> 00:11:25,580
them out of the log file with a post

00:11:22,730 --> 00:11:28,760
group a post build script and we use

00:11:25,580 --> 00:11:31,310
said a little bit of a post build some

00:11:28,760 --> 00:11:33,830
standard Linux tools to take those log

00:11:31,310 --> 00:11:39,470
file fragments and inject them into that

00:11:33,830 --> 00:11:43,910
HTML template and once that's done we

00:11:39,470 --> 00:11:46,490
wind up with this so this shows the flow

00:11:43,910 --> 00:11:48,980
of about twelve VMs being provisioned in

00:11:46,490 --> 00:11:50,750
one of our acceptance test jobs and

00:11:48,980 --> 00:11:52,940
nobody until we did this nobody had seen

00:11:50,750 --> 00:11:54,080
what really happened in these jobs and

00:11:52,940 --> 00:11:57,740
one of the first things that struck us

00:11:54,080 --> 00:12:00,890
was that the actual acceptance tests

00:11:57,740 --> 00:12:02,959
were the smallest part of the work

00:12:00,890 --> 00:12:05,209
they're about the overall job is about

00:12:02,959 --> 00:12:07,579
an hour and 15 minutes the acceptance

00:12:05,209 --> 00:12:10,220
has take about 20 minutes and prior to

00:12:07,579 --> 00:12:12,649
our doing this everyone had assumed that

00:12:10,220 --> 00:12:14,750
the acceptance tests for the long pole

00:12:12,649 --> 00:12:16,760
in the tent but now we do conclusively

00:12:14,750 --> 00:12:18,560
that that was not so that if we work on

00:12:16,760 --> 00:12:20,240
our provisioning that's where we had to

00:12:18,560 --> 00:12:22,880
pay attention and that's where we had to

00:12:20,240 --> 00:12:25,910
start looking to get make some headway

00:12:22,880 --> 00:12:29,029
on our build times of one thing we

00:12:25,910 --> 00:12:31,220
noticed was up top there these up steps

00:12:29,029 --> 00:12:34,220
those represent the initial

00:12:31,220 --> 00:12:36,410
configuration of AWS images not sure how

00:12:34,220 --> 00:12:37,730
familiar you are with that but the first

00:12:36,410 --> 00:12:39,890
thing you do when you start an a

00:12:37,730 --> 00:12:43,850
starting system in the Amazon Cloud as

00:12:39,890 --> 00:12:46,310
you tell it boot a known boot disk and

00:12:43,850 --> 00:12:48,890
then once that's done you can continue

00:12:46,310 --> 00:12:52,850
and provision it with your recipes and

00:12:48,890 --> 00:12:54,440
drivers and that initial step we knew we

00:12:52,850 --> 00:12:56,410
needed 12 nodes that all kind of look

00:12:54,440 --> 00:12:58,610
the same use the same base Linux image

00:12:56,410 --> 00:13:01,310
so we launched them all in parallel

00:12:58,610 --> 00:13:02,870
using a ruby build tool and you'll

00:13:01,310 --> 00:13:04,970
notice that one of those steps is not

00:13:02,870 --> 00:13:07,700
executing in parallel that bottom one is

00:13:04,970 --> 00:13:09,200
offset from the previous steps and if

00:13:07,700 --> 00:13:11,029
everything had been working as we had

00:13:09,200 --> 00:13:12,620
expected it should have been launched at

00:13:11,029 --> 00:13:13,820
the same time

00:13:12,620 --> 00:13:15,950
sir look showed that we hadn't

00:13:13,820 --> 00:13:18,530
configured the thread pool large enough

00:13:15,950 --> 00:13:19,820
for our build tool there were some

00:13:18,530 --> 00:13:22,910
undocumented command line parameters

00:13:19,820 --> 00:13:24,320
apparently that we had missed an

00:13:22,910 --> 00:13:27,170
inspection of the source code of the

00:13:24,320 --> 00:13:29,720
Ruby rape tool allowed us to find that

00:13:27,170 --> 00:13:31,700
out and so we were able to shave no five

00:13:29,720 --> 00:13:34,730
minutes off just by identifying that

00:13:31,700 --> 00:13:36,020
this one little guy this one little step

00:13:34,730 --> 00:13:37,760
could be run in parallel looking a

00:13:36,020 --> 00:13:40,130
little bit further down we noticed that

00:13:37,760 --> 00:13:41,870
some of our provisioning was sub optimal

00:13:40,130 --> 00:13:44,810
we had some of these things that we

00:13:41,870 --> 00:13:47,060
could overlap more aggressively and thus

00:13:44,810 --> 00:13:48,380
we were able to shave this down and

00:13:47,060 --> 00:13:50,930
we're able to cut the provisioning time

00:13:48,380 --> 00:13:53,060
in about half by noticing that some of

00:13:50,930 --> 00:13:55,460
our dependencies were too conservative

00:13:53,060 --> 00:13:57,350
and that we could move some of the

00:13:55,460 --> 00:13:59,450
provisioning steps up forward so we're

00:13:57,350 --> 00:14:02,300
able to almost double the rate of our

00:13:59,450 --> 00:14:06,380
acceptance test runs by inspecting this

00:14:02,300 --> 00:14:11,420
and moving and applying some

00:14:06,380 --> 00:14:14,060
optimizations the next step was to use

00:14:11,420 --> 00:14:15,830
the Jenkins report publisher to capture

00:14:14,060 --> 00:14:17,600
the artifact and push it out so it was

00:14:15,830 --> 00:14:20,810
visible and archived as part of every

00:14:17,600 --> 00:14:22,550
build base if you can tell Jenkins that

00:14:20,810 --> 00:14:25,520
there is a directory in your workspace

00:14:22,550 --> 00:14:27,140
that contains HTML you can tell the

00:14:25,520 --> 00:14:28,820
report publisher to capture that all

00:14:27,140 --> 00:14:31,160
those artifacts bring them into the

00:14:28,820 --> 00:14:34,130
Jenkins build records and publish them

00:14:31,160 --> 00:14:35,750
through the core interface and we were

00:14:34,130 --> 00:14:38,120
able that was a trivial change that we

00:14:35,750 --> 00:14:42,370
then added to it and made it visible

00:14:38,120 --> 00:14:45,230
through our entire team so in conclusion

00:14:42,370 --> 00:14:47,150
now this was a very low-tech thing a

00:14:45,230 --> 00:14:49,460
futurist to stack overflow you trust the

00:14:47,150 --> 00:14:52,880
Google charts homepage a little bit of

00:14:49,460 --> 00:14:56,090
time figuring out the Jenkins object

00:14:52,880 --> 00:14:57,980
model five minutes of groovy and we were

00:14:56,090 --> 00:14:59,480
able to produce a fairly compelling

00:14:57,980 --> 00:15:02,510
visualization that we were rarely able

00:14:59,480 --> 00:15:04,730
to put to good use and this was not

00:15:02,510 --> 00:15:06,740
necessarily limited to just vm

00:15:04,730 --> 00:15:08,480
provisioning you could easily timestamp

00:15:06,740 --> 00:15:10,280
other parts of your build process and

00:15:08,480 --> 00:15:11,510
consume it using the same technique and

00:15:10,280 --> 00:15:13,280
if you do have bills that are

00:15:11,510 --> 00:15:15,200
time-sensitive and where you're trying

00:15:13,280 --> 00:15:17,270
to figure out what is going on this

00:15:15,200 --> 00:15:19,250
could be a valuable addition to your

00:15:17,270 --> 00:15:20,990
toolbox it's by no means restricted just

00:15:19,250 --> 00:15:23,000
to provisioning although that's where

00:15:20,990 --> 00:15:24,560
because of the complexity of those flows

00:15:23,000 --> 00:15:25,570
that's where it was really valuable we

00:15:24,560 --> 00:15:27,430
saw that

00:15:25,570 --> 00:15:29,890
some of our flows we could we could do

00:15:27,430 --> 00:15:32,890
better by actually visualizing and

00:15:29,890 --> 00:15:36,370
seeing what was really happening earlier

00:15:32,890 --> 00:15:38,650
so we also able to present that to our

00:15:36,370 --> 00:15:42,940
management we could say you know we

00:15:38,650 --> 00:15:45,430
really need to look at this area of our

00:15:42,940 --> 00:15:48,250
architecture and see if we can simplify

00:15:45,430 --> 00:15:50,170
it because it's causing a lot of issues

00:15:48,250 --> 00:15:51,880
in our build pipeline and they they may

00:15:50,170 --> 00:15:53,350
not understand tabular reports but when

00:15:51,880 --> 00:15:55,510
you can show them a very simple flow

00:15:53,350 --> 00:15:57,990
like a Gantt chart like that they

00:15:55,510 --> 00:16:01,450
certainly got that and we were able to

00:15:57,990 --> 00:16:03,490
communicate effectively to our project

00:16:01,450 --> 00:16:11,320
management and make some change happen

00:16:03,490 --> 00:16:12,610
inside of our project but concludes a my

00:16:11,320 --> 00:16:14,440
presentation so I'm open to any

00:16:12,610 --> 00:16:16,180
questions if you have them bear in mind

00:16:14,440 --> 00:16:18,610
that I'm just a peon and by no means a

00:16:16,180 --> 00:16:21,510
Jenkins expert but I'll be happy to

00:16:18,610 --> 00:16:21,510
answer anything I can

00:16:27,310 --> 00:16:33,400
how well I will say that um my

00:16:31,450 --> 00:16:38,680
background with Jenkins started about

00:16:33,400 --> 00:16:41,590
five years ago and it was we brought we

00:16:38,680 --> 00:16:43,240
were just spinning up our agile practice

00:16:41,590 --> 00:16:46,060
and we were trying to get the agile

00:16:43,240 --> 00:16:47,410
religion inside of agile X and we was

00:16:46,060 --> 00:16:49,750
brought onto a team that was supposed to

00:16:47,410 --> 00:16:51,460
serve as an example to the rest of the

00:16:49,750 --> 00:16:52,960
company and we hired a coach from the

00:16:51,460 --> 00:16:56,170
outside and he said here's our best

00:16:52,960 --> 00:17:01,540
practices continuous integration version

00:16:56,170 --> 00:17:03,790
control of testing and and well of

00:17:01,540 --> 00:17:06,370
course the agile stories and de foie and

00:17:03,790 --> 00:17:09,490
task boards and that's when I that was

00:17:06,370 --> 00:17:11,890
my first in-depth visit with Jenkins and

00:17:09,490 --> 00:17:14,350
he the gentleman I was learning from was

00:17:11,890 --> 00:17:16,000
already very competent with it he knew

00:17:14,350 --> 00:17:18,160
all the plugins or many of the plugins

00:17:16,000 --> 00:17:21,400
and even today I still find myself going

00:17:18,160 --> 00:17:23,290
back to the work he brought to us for to

00:17:21,400 --> 00:17:26,310
figure out new approaches and how to use

00:17:23,290 --> 00:17:26,310
some of the existing tools

00:17:31,660 --> 00:17:36,580
right what and thank you all and I think

00:17:34,510 --> 00:17:38,880
that's it for this session preciate your

00:17:36,580 --> 00:17:38,880
time today

00:17:45,290 --> 00:17:47,350

YouTube URL: https://www.youtube.com/watch?v=apl8JoVUTuM


