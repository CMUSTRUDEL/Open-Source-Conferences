Title: JUC U.S. East 2015 - Jenkins Workflows with Parallel Steps Boosts Productivity and Quality
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Tom Canova, IBM 

Jenkins workflow automation accelerated and improved a critical development team process at IBM. This process includes running code to build a custom database that is integral to a production application. One of the code steps took 20+ hours to run before workflow automation and now takes two hours to complete. Anti-patterns from long running jobs were eliminated. The key for the solution was using Jenkins workflow in parallel steps. We will walk through how the workflow job runs as configured and the challenges associated with running tasks in parallel. With the workflow job in Jenkins, anyone on the team can now run their latest code to produce new ‘Chef Watson’ databases. No special knowledge is required. This has freed up the team to do what they do best, while letting Jenkins oversee the previously tedious task of running a variety of parsing steps. When someone makes code changes, now they quickly run this process across the full dataset and get fast feedback. As a result, quality issues are quickly identified and the database is delivered to production more frequently. Context will be provided on how this key process fits into the bigger continuous delivery picture. Attendees will see how Tom's team has boosted overall productivity and quality with Jenkins.
Captions: 
	00:00:15,070 --> 00:00:18,520
welcome we're going to be talking for

00:00:17,980 --> 00:00:21,040
the

00:00:18,520 --> 00:00:22,930
45 minutes or so about some some things

00:00:21,040 --> 00:00:25,570
that our team has done with the workflow

00:00:22,930 --> 00:00:26,619
plugin if you're like me a lot of you

00:00:25,570 --> 00:00:28,150
came here and you're looking for

00:00:26,619 --> 00:00:29,980
different ideas to take back with you

00:00:28,150 --> 00:00:31,779
whether it be a new plug-in that you can

00:00:29,980 --> 00:00:34,239
use a new process or new way of doing

00:00:31,779 --> 00:00:35,530
things a new feature so hopefully some

00:00:34,239 --> 00:00:37,330
of the things that I'll share today may

00:00:35,530 --> 00:00:39,030
give you some ideas some things you

00:00:37,330 --> 00:00:40,870
could use with the workflow plug-in

00:00:39,030 --> 00:00:42,370
specifically one of the features the

00:00:40,870 --> 00:00:44,200
workflow plug-in that has really

00:00:42,370 --> 00:00:45,610
benefited us has been the parallel steps

00:00:44,200 --> 00:00:49,330
feature so we're going to drill into

00:00:45,610 --> 00:00:51,370
that some I'd like to maybe Taylor my

00:00:49,330 --> 00:00:52,960
emphasis within this talk a little bit

00:00:51,370 --> 00:00:56,649
on what's going to meet your needs the

00:00:52,960 --> 00:00:59,500
most so I could kind of go two

00:00:56,649 --> 00:01:02,140
directions with it I could either go so

00:00:59,500 --> 00:01:04,119
we do a little a be test here I could go

00:01:02,140 --> 00:01:06,640
the direction of kind of focusing more

00:01:04,119 --> 00:01:07,990
on process and high level and and how we

00:01:06,640 --> 00:01:10,300
went about doing things with the

00:01:07,990 --> 00:01:12,700
workflow plugin I could spend more time

00:01:10,300 --> 00:01:14,950
on actually going into the configuration

00:01:12,700 --> 00:01:17,860
file and and look into details on that

00:01:14,950 --> 00:01:19,479
so for option a if you'd like to see how

00:01:17,860 --> 00:01:21,220
I started using the plug in some of the

00:01:19,479 --> 00:01:24,880
process benefits that we had raise your

00:01:21,220 --> 00:01:26,800
hand if you'd like me to drill more into

00:01:24,880 --> 00:01:30,369
maybe the config file to see actually

00:01:26,800 --> 00:01:33,580
how the workflow plugin gets set up okay

00:01:30,369 --> 00:01:35,380
so well well certainly do the process I

00:01:33,580 --> 00:01:37,030
probably I didn't have as much in the

00:01:35,380 --> 00:01:38,380
slides that you'll get afterward on the

00:01:37,030 --> 00:01:40,390
config files but actually have the

00:01:38,380 --> 00:01:42,550
config file open my browser so I'll

00:01:40,390 --> 00:01:44,289
spend a little i'll probably add that

00:01:42,550 --> 00:01:46,660
end to the presentation where perhaps

00:01:44,289 --> 00:01:48,039
wasn't as much on that previously so to

00:01:46,660 --> 00:01:53,319
try to help you guys who want to see

00:01:48,039 --> 00:01:56,380
some examples of workflow usage it's a

00:01:53,319 --> 00:01:59,470
little bit about myself I'm a developer

00:01:56,380 --> 00:02:01,209
I guess by DNA in college I was in a

00:01:59,470 --> 00:02:02,740
different major and a change to computer

00:02:01,209 --> 00:02:04,539
science because I took a course and I

00:02:02,740 --> 00:02:06,729
could stay up to all hours of the night

00:02:04,539 --> 00:02:08,020
working on stuff and it was fun and I'm

00:02:06,729 --> 00:02:10,599
one that likes to go to bed early so

00:02:08,020 --> 00:02:13,150
that was a good sign i should do be in

00:02:10,599 --> 00:02:15,310
the field of software development I have

00:02:13,150 --> 00:02:17,020
an automation mindset if things are

00:02:15,310 --> 00:02:19,540
tedious I don't like to have to do them

00:02:17,020 --> 00:02:22,150
again and again I like to automate those

00:02:19,540 --> 00:02:23,840
things I also tend to be forgetful and

00:02:22,150 --> 00:02:26,930
so automation kind of

00:02:23,840 --> 00:02:30,099
compensates for my forgetfulness among

00:02:26,930 --> 00:02:33,050
other things I'm hardened by production

00:02:30,099 --> 00:02:34,760
so along the way is the developer I've

00:02:33,050 --> 00:02:37,940
worked at a number of companies from

00:02:34,760 --> 00:02:42,019
from small businesses up to large banks

00:02:37,940 --> 00:02:45,290
and I'm at IBM right now one of the lure

00:02:42,019 --> 00:02:48,739
the large bank that i worked at we had

00:02:45,290 --> 00:02:50,299
joined them in 99 and pretty soon after

00:02:48,739 --> 00:02:53,450
i joined i was on their credit card

00:02:50,299 --> 00:02:55,970
website team and we had 10 million

00:02:53,450 --> 00:02:58,819
active customers 1,000 million people

00:02:55,970 --> 00:03:00,799
logging in a day and so you quickly I

00:02:58,819 --> 00:03:02,480
was one of the people that Jean Kim

00:03:00,799 --> 00:03:05,540
talked about this morning developers

00:03:02,480 --> 00:03:07,519
should get pagers we were a fairly small

00:03:05,540 --> 00:03:09,500
team so we were developers and we also

00:03:07,519 --> 00:03:11,629
helped with releases and we carried

00:03:09,500 --> 00:03:14,209
pagers and we did troubleshooting you

00:03:11,629 --> 00:03:17,569
quickly appreciate the importance of

00:03:14,209 --> 00:03:19,400
DevOps when you're carrying a pager and

00:03:17,569 --> 00:03:21,739
the importance of quality code as well

00:03:19,400 --> 00:03:23,540
and so I've definitely been hardened by

00:03:21,739 --> 00:03:25,280
production and that kind of led into my

00:03:23,540 --> 00:03:27,349
transition from kind of the pure

00:03:25,280 --> 00:03:31,870
development we're all into more of a dev

00:03:27,349 --> 00:03:35,269
ops ii type of role blessed with Jenkins

00:03:31,870 --> 00:03:38,170
so Jenkins has been really useful my

00:03:35,269 --> 00:03:41,540
previous company and my employer now

00:03:38,170 --> 00:03:43,670
just as a great hub for the automation

00:03:41,540 --> 00:03:45,739
work and and there's something to me

00:03:43,670 --> 00:03:47,989
that seems to stand out of some of the

00:03:45,739 --> 00:03:49,940
products especially the technology world

00:03:47,989 --> 00:03:51,380
which have endured a little bit longer

00:03:49,940 --> 00:03:54,530
than others because a lot of things at

00:03:51,380 --> 00:03:56,780
very short cycles I would term it

00:03:54,530 --> 00:03:58,730
sustainable usability and that's one of

00:03:56,780 --> 00:04:01,010
the things that Jenkins seems to give to

00:03:58,730 --> 00:04:05,060
me and that it's usable I can create a

00:04:01,010 --> 00:04:07,459
process write something and it's fairly

00:04:05,060 --> 00:04:09,079
usable just automation just happens but

00:04:07,459 --> 00:04:11,900
it's usable if I need to hand it off to

00:04:09,079 --> 00:04:14,000
somebody else or to another team it's

00:04:11,900 --> 00:04:17,419
just sustainable in the sense that I can

00:04:14,000 --> 00:04:20,570
hand it off to other folks and that it's

00:04:17,419 --> 00:04:22,880
kind of I guess endured the test of time

00:04:20,570 --> 00:04:25,070
to some degree because technology I mean

00:04:22,880 --> 00:04:27,979
technology ears are really measured in

00:04:25,070 --> 00:04:29,539
months and so much has changed and yet

00:04:27,979 --> 00:04:30,009
Jenkins is still relevant ain't even

00:04:29,539 --> 00:04:33,129
more rel

00:04:30,009 --> 00:04:34,960
today that when it first came out and so

00:04:33,129 --> 00:04:36,159
is sustainable usability has been kind

00:04:34,960 --> 00:04:37,330
of one of the features of Jenkins that

00:04:36,159 --> 00:04:39,249
have been blessed by that and being able

00:04:37,330 --> 00:04:43,569
to leverage Jenkins and some of the work

00:04:39,249 --> 00:04:46,479
that I do so a little bit about our

00:04:43,569 --> 00:04:48,849
project i'm a member of watson life an

00:04:46,479 --> 00:04:51,309
IBM I'm not a member of a sales team and

00:04:48,849 --> 00:04:55,300
we're like a little team within a huge

00:04:51,309 --> 00:04:57,129
company so Watson is a fairly big group

00:04:55,300 --> 00:04:59,339
group does some really cool things with

00:04:57,129 --> 00:05:03,159
Watson in the medical field and an

00:04:59,339 --> 00:05:06,159
analytics customer service a variety of

00:05:03,159 --> 00:05:07,659
areas our team though is focused on the

00:05:06,159 --> 00:05:09,159
customer side of things I kind of

00:05:07,659 --> 00:05:12,879
proving out things that can be done with

00:05:09,159 --> 00:05:14,439
Watson from a customer a consumer point

00:05:12,879 --> 00:05:16,389
of view not just a business customer but

00:05:14,439 --> 00:05:18,789
but consumers and so that's what Watson

00:05:16,389 --> 00:05:20,469
life is all about and a particular

00:05:18,789 --> 00:05:24,249
project that we're going to talk about

00:05:20,469 --> 00:05:27,490
today is chef Watson the URL is up there

00:05:24,249 --> 00:05:29,229
on the screen IBM chef Watson calm it's

00:05:27,490 --> 00:05:32,319
a site you can go to and you can enter

00:05:29,229 --> 00:05:34,539
some ingredients maybe some dishes and

00:05:32,319 --> 00:05:37,539
and generate some brand new recipes that

00:05:34,539 --> 00:05:39,039
may have never been seen before if

00:05:37,539 --> 00:05:41,289
you're somebody who loves experimenting

00:05:39,039 --> 00:05:42,669
in the kitchen this is this is for you

00:05:41,289 --> 00:05:45,129
if you're somebody who's just as curious

00:05:42,669 --> 00:05:46,839
about maybe trying some things maybe

00:05:45,129 --> 00:05:48,370
from a non dairy point of view or other

00:05:46,839 --> 00:05:52,029
points of view this might be fun to try

00:05:48,370 --> 00:05:54,819
as well it's a pretty cool website so

00:05:52,029 --> 00:05:56,289
I've got an example on the screen are

00:05:54,819 --> 00:05:57,969
the kinds of things that you'll see when

00:05:56,289 --> 00:05:59,860
you generate recipes you want to get in

00:05:57,969 --> 00:06:02,740
an ingredient list you end up getting

00:05:59,860 --> 00:06:05,769
some suggested steps and so our product

00:06:02,740 --> 00:06:06,999
goes into this is kind of we're looking

00:06:05,769 --> 00:06:09,219
at the end and then we'll go to the

00:06:06,999 --> 00:06:11,919
beginning of where all of this begins in

00:06:09,219 --> 00:06:12,969
just a minute this all started off I

00:06:11,919 --> 00:06:15,519
know some of you have probably been to

00:06:12,969 --> 00:06:17,080
South by Southwest two years ago there

00:06:15,519 --> 00:06:19,930
was a food truck in South by Southwest

00:06:17,080 --> 00:06:21,939
for chef Watson and this is very much

00:06:19,930 --> 00:06:24,459
just a POC here's some things we can do

00:06:21,939 --> 00:06:26,680
with Watson and and it created basically

00:06:24,459 --> 00:06:28,749
a list of really cool ingredients you

00:06:26,680 --> 00:06:30,399
would have never thought to have tried

00:06:28,749 --> 00:06:32,289
and they had some professional chefs

00:06:30,399 --> 00:06:34,629
prepare them the chef's took care of the

00:06:32,289 --> 00:06:37,479
suggested steps for how how to do it we

00:06:34,629 --> 00:06:39,729
didn't provide the steps to them so just

00:06:37,479 --> 00:06:42,440
really interesting things like I think

00:06:39,729 --> 00:06:44,760
there was a substitution of

00:06:42,440 --> 00:06:46,440
mushrooms for strawberries in a recipe

00:06:44,760 --> 00:06:47,940
and there's some chemistry means of

00:06:46,440 --> 00:06:49,530
other things that would say these things

00:06:47,940 --> 00:06:52,110
should work well together that would not

00:06:49,530 --> 00:06:57,810
be intuitive just from from our own

00:06:52,110 --> 00:06:59,820
background and cooking so how do we make

00:06:57,810 --> 00:07:03,650
the chef's do what he does and generate

00:06:59,820 --> 00:07:06,720
these recipes so we do have a recipe set

00:07:03,650 --> 00:07:08,280
that we start with but what jeff watson

00:07:06,720 --> 00:07:10,530
does is not just a search across these

00:07:08,280 --> 00:07:12,900
recipes to find something with your

00:07:10,530 --> 00:07:15,660
ingredients what we end up doing is we

00:07:12,900 --> 00:07:18,210
take these recipes and we have this term

00:07:15,660 --> 00:07:20,040
ingestion we pull these recipes and

00:07:18,210 --> 00:07:24,440
they're unstructured data just straight

00:07:20,040 --> 00:07:24,440
off the web and we have to then assign

00:07:24,470 --> 00:07:28,470
objects if you are human meaningful

00:07:26,850 --> 00:07:30,180
value to different parts of the recipe

00:07:28,470 --> 00:07:33,090
so we can go and substitute different

00:07:30,180 --> 00:07:34,350
things in and change out steps and it's

00:07:33,090 --> 00:07:36,480
a little bit harder than you might

00:07:34,350 --> 00:07:38,940
initially imagine if you had a maybe a

00:07:36,480 --> 00:07:41,040
database a very structured set of

00:07:38,940 --> 00:07:43,800
recipes exact list of ingredients it

00:07:41,040 --> 00:07:46,830
would be somewhat easier but when you

00:07:43,800 --> 00:07:49,080
just have something off the web there

00:07:46,830 --> 00:07:50,400
can be all kinds of terms and recipes

00:07:49,080 --> 00:07:53,070
that are quite difficult to deal with

00:07:50,400 --> 00:07:55,020
and so we have a person team that that

00:07:53,070 --> 00:07:57,180
deals with the natural language

00:07:55,020 --> 00:08:00,930
processing of these recipes to come up

00:07:57,180 --> 00:08:02,790
with kind of these intermediate objects

00:08:00,930 --> 00:08:06,270
that we can then use to form new recipes

00:08:02,790 --> 00:08:08,250
from so one of the things with Watson by

00:08:06,270 --> 00:08:11,370
the ways and with I guess artificial

00:08:08,250 --> 00:08:13,860
intelligence and unstructured data is

00:08:11,370 --> 00:08:16,260
the idea of learning and for us in the

00:08:13,860 --> 00:08:19,740
context of learning we're learning some

00:08:16,260 --> 00:08:21,090
things from from existing recipes we

00:08:19,740 --> 00:08:23,550
learned some things from chemistry I've

00:08:21,090 --> 00:08:25,440
got the little test tubes up there and

00:08:23,550 --> 00:08:26,970
six have a person our team was a

00:08:25,440 --> 00:08:28,710
programmer with a background in

00:08:26,970 --> 00:08:32,190
chemistry we have some aneri team who

00:08:28,710 --> 00:08:35,610
was a chef graduated from ice Institute

00:08:32,190 --> 00:08:37,349
in New York is also a programmer so just

00:08:35,610 --> 00:08:40,099
a variety of interesting backgrounds on

00:08:37,349 --> 00:08:40,099
the team

00:08:42,870 --> 00:08:48,160
so this slide is meant to talk about

00:08:46,240 --> 00:08:50,590
what the problem is that we're solving

00:08:48,160 --> 00:08:52,690
it and and this is really why the

00:08:50,590 --> 00:08:55,650
workflow plugin and the parallel step

00:08:52,690 --> 00:08:59,170
aspect of it really was valuable to us

00:08:55,650 --> 00:09:01,240
when I got involved from helping the

00:08:59,170 --> 00:09:05,410
parsing part of our team to automate

00:09:01,240 --> 00:09:09,850
their process they had to Java code and

00:09:05,410 --> 00:09:11,560
it would take 20 plus hours to run with

00:09:09,850 --> 00:09:13,810
something takes 20 plus hours to run

00:09:11,560 --> 00:09:16,810
there's a couple of anti patterns and

00:09:13,810 --> 00:09:19,690
start to emerge one of those is that

00:09:16,810 --> 00:09:23,020
ingestion runs were infrequent so the

00:09:19,690 --> 00:09:26,170
same thing if you had certain

00:09:23,020 --> 00:09:27,940
long-running Suites of tests for example

00:09:26,170 --> 00:09:30,670
you might only run regression tests on

00:09:27,940 --> 00:09:32,140
weekend on a weekend and in that case

00:09:30,670 --> 00:09:33,430
it's automated you can run it on that

00:09:32,140 --> 00:09:35,860
weekend in this case people were running

00:09:33,430 --> 00:09:38,290
these by hand and the effort to run them

00:09:35,860 --> 00:09:40,750
and to know what to do each time it just

00:09:38,290 --> 00:09:44,620
was infrequent and very very infrequent

00:09:40,750 --> 00:09:48,220
so typically what was done was ingestion

00:09:44,620 --> 00:09:50,980
was done in small subsets so let me kind

00:09:48,220 --> 00:09:53,830
of apply this back to to the coding

00:09:50,980 --> 00:09:58,180
world in programming I've been asked in

00:09:53,830 --> 00:10:00,940
a role that to get deployments happening

00:09:58,180 --> 00:10:04,570
faster can you just compile this one

00:10:00,940 --> 00:10:06,310
class that I changed and stuff that into

00:10:04,570 --> 00:10:09,010
production we're just going to do a

00:10:06,310 --> 00:10:12,100
small patch of one class from a Java

00:10:09,010 --> 00:10:13,570
point of view not a good idea because

00:10:12,100 --> 00:10:15,040
there's all kinds of impacts you can

00:10:13,570 --> 00:10:16,570
have from just doing that one class and

00:10:15,040 --> 00:10:18,190
maybe you could get it to compile and it

00:10:16,570 --> 00:10:20,230
might work some of the time but you're

00:10:18,190 --> 00:10:23,110
going to run a high risk of rent I'm

00:10:20,230 --> 00:10:25,180
issues so similar type of thing here so

00:10:23,110 --> 00:10:27,670
if we ran the ingestion just on a subset

00:10:25,180 --> 00:10:29,830
of recipes of somebody writing this code

00:10:27,670 --> 00:10:34,540
to analyze this stuff might not really

00:10:29,830 --> 00:10:35,980
saw realize all the impacts it's a one

00:10:34,540 --> 00:10:37,540
quick example for you to picture some of

00:10:35,980 --> 00:10:40,030
the kinds of in the things that these

00:10:37,540 --> 00:10:43,150
guys have to deal with imagine a recipe

00:10:40,030 --> 00:10:46,030
that has peanut butter cups in it so

00:10:43,150 --> 00:10:48,520
peanut butter cups is one ingredient but

00:10:46,030 --> 00:10:51,010
it would be easy to look at it and see

00:10:48,520 --> 00:10:52,339
peanuts or to see butter and to do a

00:10:51,010 --> 00:10:54,199
substitution of peanut

00:10:52,339 --> 00:10:56,720
olive oil cups which makes no sense

00:10:54,199 --> 00:10:58,189
whatever right so there there's just a

00:10:56,720 --> 00:11:00,410
variety of things like that that occur

00:10:58,189 --> 00:11:09,170
in recipes that that these guys deal

00:11:00,410 --> 00:11:10,970
with peanut butter peanuts yeah peanut

00:11:09,170 --> 00:11:13,189
butter leaders there you go exactly so I

00:11:10,970 --> 00:11:17,389
mean there's all sorts of overloading

00:11:13,189 --> 00:11:19,579
for the different words and recipes so

00:11:17,389 --> 00:11:21,230
workflow plug in parallel so we saw the

00:11:19,579 --> 00:11:23,089
problem as it takes a long time to run

00:11:21,230 --> 00:11:26,839
some of these person things and the work

00:11:23,089 --> 00:11:29,120
workflow plugin really provided what we

00:11:26,839 --> 00:11:31,040
needed and by the way I do more than

00:11:29,120 --> 00:11:35,629
just support the parson team I do

00:11:31,040 --> 00:11:37,009
regular build deploy we deploy to to

00:11:35,629 --> 00:11:39,170
bluemix which is a cloud foundry

00:11:37,009 --> 00:11:41,209
instance we deployed to a back-end to

00:11:39,170 --> 00:11:42,800
java apps we have a database pieces a

00:11:41,209 --> 00:11:44,779
variety of things that are involved with

00:11:42,800 --> 00:11:47,059
but this is actually an early on part

00:11:44,779 --> 00:11:48,889
that contributes to whole application we

00:11:47,059 --> 00:11:56,240
pull the results of this into a database

00:11:48,889 --> 00:11:58,850
which actually ends up in production so

00:11:56,240 --> 00:12:00,740
some workflow example so a lot of times

00:11:58,850 --> 00:12:03,050
you if you've started to investigate

00:12:00,740 --> 00:12:05,179
workflows there's some great use cases

00:12:03,050 --> 00:12:06,949
for those of you know doing your builds

00:12:05,179 --> 00:12:09,319
and during your deploys kind of your CD

00:12:06,949 --> 00:12:10,519
type of scenario so this may be a little

00:12:09,319 --> 00:12:12,410
bit different than what you thought of

00:12:10,519 --> 00:12:13,939
and part of what I'm hoping to do is to

00:12:12,410 --> 00:12:16,459
let you see there's some more we can do

00:12:13,939 --> 00:12:19,699
with workflow than just your standard CD

00:12:16,459 --> 00:12:21,050
types of things so like for file

00:12:19,699 --> 00:12:22,399
transfers there's a variety of ways you

00:12:21,050 --> 00:12:26,300
might want to transfer a bunch of files

00:12:22,399 --> 00:12:29,449
or pull down files from a website or

00:12:26,300 --> 00:12:31,970
other kinds of uses parsing of many

00:12:29,449 --> 00:12:34,220
files analysis of many things in

00:12:31,970 --> 00:12:35,749
particular the parallel aspect of

00:12:34,220 --> 00:12:37,850
workflow plugin kind of opens up doors

00:12:35,749 --> 00:12:39,730
do some stuff there's other tools maybe

00:12:37,850 --> 00:12:41,839
to do some of these things with as well

00:12:39,730 --> 00:12:43,759
but in our team we're already using

00:12:41,839 --> 00:12:46,429
Jenkins for a number of other build

00:12:43,759 --> 00:12:48,439
pipeline types of activities and this

00:12:46,429 --> 00:12:50,509
just fits in really nicely so we've got

00:12:48,439 --> 00:12:52,579
one place to go to find all the

00:12:50,509 --> 00:12:54,939
automation things that are happening for

00:12:52,579 --> 00:12:54,939
our team

00:12:56,850 --> 00:13:02,860
so my first attempt at a parallel

00:12:59,200 --> 00:13:05,920
environment we had a master Jenkins

00:13:02,860 --> 00:13:08,320
platform-as-a-service internal offering

00:13:05,920 --> 00:13:10,300
at IBM and being a good corporate

00:13:08,320 --> 00:13:14,890
citizen I decided to use that instead of

00:13:10,300 --> 00:13:17,890
roll my own master and then had node set

00:13:14,890 --> 00:13:20,590
up central in our lab cluster in Austin

00:13:17,890 --> 00:13:23,140
and East Coast and West Coast and a

00:13:20,590 --> 00:13:24,760
Cloudant sequel database so the idea was

00:13:23,140 --> 00:13:27,910
we'll throw a bunch of nodes at this

00:13:24,760 --> 00:13:29,680
problem we'll use the parallel task

00:13:27,910 --> 00:13:32,140
within the workflow and we'll make

00:13:29,680 --> 00:13:35,890
things faster and the concept i think

00:13:32,140 --> 00:13:37,690
was good the challenges came with having

00:13:35,890 --> 00:13:41,050
a master i didn't have as much control

00:13:37,690 --> 00:13:43,960
over having one extra firewall layer in

00:13:41,050 --> 00:13:45,400
the mixed so the size of the master

00:13:43,960 --> 00:13:46,660
started to become important because

00:13:45,400 --> 00:13:48,100
there's things when you're dealing with

00:13:46,660 --> 00:13:49,900
workflows that you may want to archive

00:13:48,100 --> 00:13:51,780
back to the master so you want to make

00:13:49,900 --> 00:13:57,040
sure you have sufficient size for that

00:13:51,780 --> 00:13:58,510
the JVM became important the JVM version

00:13:57,040 --> 00:14:01,420
of the master was outside of my control

00:13:58,510 --> 00:14:05,500
and there's a there was a bug that I ran

00:14:01,420 --> 00:14:06,730
into that Jessie helped me with he

00:14:05,500 --> 00:14:08,440
probably didn't spend more than five

00:14:06,730 --> 00:14:11,920
seconds looking at it but actually filed

00:14:08,440 --> 00:14:14,020
a post or bug or something on our JDK

00:14:11,920 --> 00:14:17,260
issue and it wasn't obvious to me as a

00:14:14,020 --> 00:14:19,720
jdk issue but it turned out it was so I

00:14:17,260 --> 00:14:21,790
need to control over the JDK I'm slave

00:14:19,720 --> 00:14:23,650
communication the more complex year how

00:14:21,790 --> 00:14:26,110
many hops you have different things to

00:14:23,650 --> 00:14:30,160
interfere with when you get into running

00:14:26,110 --> 00:14:31,660
stuff in parallel ideally you don't want

00:14:30,160 --> 00:14:33,760
communication issues to be the reason

00:14:31,660 --> 00:14:35,770
that your jobs fail so if you have 50 or

00:14:33,760 --> 00:14:38,050
100 or however many things running in

00:14:35,770 --> 00:14:39,010
parallel I'd be trying to minimize those

00:14:38,050 --> 00:14:41,700
things which are going to cause

00:14:39,010 --> 00:14:41,700
interruptions

00:14:43,300 --> 00:14:47,100
so the working solution isn't a whole

00:14:45,250 --> 00:14:50,410
lot different but I did take that master

00:14:47,100 --> 00:14:53,350
Jenkins instance and I put it on our

00:14:50,410 --> 00:14:55,930
cluster a really reducing that firewall

00:14:53,350 --> 00:14:58,510
and gaining control over the over the

00:14:55,930 --> 00:15:01,300
master over the the JDK that was being

00:14:58,510 --> 00:15:04,899
used over the tons of disk space tons of

00:15:01,300 --> 00:15:10,930
memory it gave me the kind of the

00:15:04,899 --> 00:15:16,480
conditions i need needed to succeed so

00:15:10,930 --> 00:15:20,680
as i started working through the process

00:15:16,480 --> 00:15:23,620
with it with the workflow with the

00:15:20,680 --> 00:15:25,420
ingestion there were a couple patterns

00:15:23,620 --> 00:15:31,060
that emerge i'm going to see if I can

00:15:25,420 --> 00:15:34,570
bring up real quick that this is an

00:15:31,060 --> 00:15:36,279
example of there's a large number of

00:15:34,570 --> 00:15:37,959
steps and they're not all needing to run

00:15:36,279 --> 00:15:39,430
within a workflow container I certainly

00:15:37,959 --> 00:15:41,890
could run all these within a workflow

00:15:39,430 --> 00:15:43,750
but oftentimes our parsing team will run

00:15:41,890 --> 00:15:45,430
things and they'll go review the results

00:15:43,750 --> 00:15:48,040
and they may make some more code changes

00:15:45,430 --> 00:15:49,870
and rerun through things again so at the

00:15:48,040 --> 00:15:51,910
moment I've got these in separate steps

00:15:49,870 --> 00:15:56,740
it's a poor man's way to get started but

00:15:51,910 --> 00:15:59,260
it keeps it simple for getting started

00:15:56,740 --> 00:16:01,060
so in the context of this long list of

00:15:59,260 --> 00:16:03,220
things and when I was asking you know

00:16:01,060 --> 00:16:05,200
what the process was for this guy's I

00:16:03,220 --> 00:16:07,390
would get a couple Java programs I'd go

00:16:05,200 --> 00:16:09,480
write a couple jobs for it oh we do this

00:16:07,390 --> 00:16:12,490
also oh we do this also so the process

00:16:09,480 --> 00:16:14,079
actually helped to uncover a number of

00:16:12,490 --> 00:16:17,050
things that needed to be automated and

00:16:14,079 --> 00:16:18,520
at the end of the day we have a bunch of

00:16:17,050 --> 00:16:21,670
steps a bunch of little Java programs

00:16:18,520 --> 00:16:23,920
that run that the big poles on the tent

00:16:21,670 --> 00:16:26,350
if you will were the pulling the recipes

00:16:23,920 --> 00:16:28,120
down from the from the net which really

00:16:26,350 --> 00:16:32,740
wasn't that big but the biggest one was

00:16:28,120 --> 00:16:34,540
step for the recipe list parse workflow

00:16:32,740 --> 00:16:36,820
and that's the one we'll spend a little

00:16:34,540 --> 00:16:38,110
little bit more time on again we're

00:16:36,820 --> 00:16:39,490
going to come back to my browser and a

00:16:38,110 --> 00:16:42,970
little bit we'll take a look at

00:16:39,490 --> 00:16:44,620
something config in more detail and as

00:16:42,970 --> 00:16:46,089
we're getting through this if you can't

00:16:44,620 --> 00:16:47,830
see from the back rows there's their

00:16:46,089 --> 00:16:49,390
space up front feel free to come up it

00:16:47,830 --> 00:16:53,410
won't I don't think it'll bother folks

00:16:49,390 --> 00:16:55,209
if end up stepping forward so the work

00:16:53,410 --> 00:16:56,560
flow pattern that emerged and the two of

00:16:55,209 --> 00:16:59,050
the steps that i'm using the work flow

00:16:56,560 --> 00:17:02,260
pattern is the first thing we do is on a

00:16:59,050 --> 00:17:04,860
single node would sub divide the work i

00:17:02,260 --> 00:17:07,660
pull down the source code from get and

00:17:04,860 --> 00:17:09,819
whether it was getting the list of

00:17:07,660 --> 00:17:11,740
recipes to retrieve from the internet or

00:17:09,819 --> 00:17:13,660
getting a list of recipes to parse i

00:17:11,740 --> 00:17:15,939
would have some sort of algorithm some

00:17:13,660 --> 00:17:18,100
sort of script that would subdivide that

00:17:15,939 --> 00:17:21,579
work so we're dealing with 12,000

00:17:18,100 --> 00:17:23,110
recipes so in subdividing the work and

00:17:21,579 --> 00:17:25,059
we'll see this is just a second sub

00:17:23,110 --> 00:17:26,980
dividing the work in terms of pulling

00:17:25,059 --> 00:17:29,050
recipes down you could go to like a site

00:17:26,980 --> 00:17:30,850
index / website and get a list of all of

00:17:29,050 --> 00:17:32,830
the recipes and that would be where my

00:17:30,850 --> 00:17:35,770
source of data was I would then

00:17:32,830 --> 00:17:38,170
subdivide that work up for the actual

00:17:35,770 --> 00:17:40,920
parsing step I've got the recipes that

00:17:38,170 --> 00:17:43,240
I'm going to parse at that point are

00:17:40,920 --> 00:17:47,110
listed in the database with the world

00:17:43,240 --> 00:17:48,520
with raw HTML and I would get the recipe

00:17:47,110 --> 00:17:51,130
names out of the database and then

00:17:48,520 --> 00:17:52,660
divide those up so that first step is

00:17:51,130 --> 00:17:55,840
kind of subdividing the work I just need

00:17:52,660 --> 00:17:58,870
one node to do that word the second step

00:17:55,840 --> 00:18:00,100
in this pattern was defining the peril

00:17:58,870 --> 00:18:01,630
of work what we're actually going to do

00:18:00,100 --> 00:18:04,150
against all these things how we can

00:18:01,630 --> 00:18:05,800
split it up and again there's

00:18:04,150 --> 00:18:08,440
applications for this beyond just

00:18:05,800 --> 00:18:10,330
parsing so if there's different kinds of

00:18:08,440 --> 00:18:12,040
analytics work you need to do that you

00:18:10,330 --> 00:18:15,130
can run and pair all maybe benefit from

00:18:12,040 --> 00:18:17,290
multiple nodes there may be other kinds

00:18:15,130 --> 00:18:19,600
of things you can do for database type

00:18:17,290 --> 00:18:21,610
type work there's a variety of things

00:18:19,600 --> 00:18:24,280
that could that could qualify for this

00:18:21,610 --> 00:18:27,340
beyond just parsing and beyond just

00:18:24,280 --> 00:18:28,870
pulling down recipes so I'd perform the

00:18:27,340 --> 00:18:31,030
work and then following performing the

00:18:28,870 --> 00:18:32,320
work I would publish the results because

00:18:31,030 --> 00:18:35,110
at the end of this whole thing I need to

00:18:32,320 --> 00:18:37,120
have one set of results I'm a run you

00:18:35,110 --> 00:18:38,710
know 80 different steps to accomplish

00:18:37,120 --> 00:18:44,140
the work at the end I

00:18:38,710 --> 00:18:45,700
need one set of parsed recipes and for

00:18:44,140 --> 00:18:48,460
me I used the Cloudant no sequel

00:18:45,700 --> 00:18:50,529
database provided a nice container I

00:18:48,460 --> 00:18:53,289
could upload recipes they could be ID'd

00:18:50,529 --> 00:18:54,669
by the recipe name and then at the end I

00:18:53,289 --> 00:18:57,549
could pull down all the recipes in that

00:18:54,669 --> 00:18:59,169
database cloud and I'm sure there's

00:18:57,549 --> 00:19:01,059
other ones as well was easy to work with

00:18:59,169 --> 00:19:04,179
had a great rest api could create a

00:19:01,059 --> 00:19:06,190
database on the fly populate it and then

00:19:04,179 --> 00:19:09,429
pull stuff down at the end so it was

00:19:06,190 --> 00:19:11,770
really somewhat trivial to work with and

00:19:09,429 --> 00:19:13,390
then after the parallel work is done

00:19:11,770 --> 00:19:15,130
after you've shared the results of your

00:19:13,390 --> 00:19:17,470
parallel work that the last step in that

00:19:15,130 --> 00:19:19,120
pattern which is the wrap up work so

00:19:17,470 --> 00:19:22,360
gathering the results for any post

00:19:19,120 --> 00:19:25,539
processing summary archiving to make it

00:19:22,360 --> 00:19:28,179
available to downstream jobs and maybe

00:19:25,539 --> 00:19:29,980
triggering some downstream jobs and

00:19:28,179 --> 00:19:31,450
again workflow is such that you could

00:19:29,980 --> 00:19:33,250
actually do additional workflow steps

00:19:31,450 --> 00:19:36,159
downstream doesn't have to be an

00:19:33,250 --> 00:19:37,690
external job for my purposes I wanted to

00:19:36,159 --> 00:19:39,610
utilize some plugins that may not have

00:19:37,690 --> 00:19:41,529
been available for workflow yet so they

00:19:39,610 --> 00:19:47,940
were downstream jobs but again there's a

00:19:41,529 --> 00:19:50,409
lot you could do with any workflow so

00:19:47,940 --> 00:19:52,029
we'll do a high-level review of some of

00:19:50,409 --> 00:19:55,240
the config here and then we'll go into a

00:19:52,029 --> 00:19:58,470
little bit lower level review so

00:19:55,240 --> 00:20:01,000
subdividing the work the recipe download

00:19:58,470 --> 00:20:05,649
have a groovy script that went and

00:20:01,000 --> 00:20:08,740
pulled down the list of sites and an awk

00:20:05,649 --> 00:20:13,000
command to go divide it up and two files

00:20:08,740 --> 00:20:17,919
each file containing that's at each file

00:20:13,000 --> 00:20:20,860
contain 40 40 recipes and that could

00:20:17,919 --> 00:20:22,659
spread that out amongst actually pretty

00:20:20,860 --> 00:20:25,570
files containing a number of recipes and

00:20:22,659 --> 00:20:27,460
spread the work out and at the end of

00:20:25,570 --> 00:20:29,559
the sub dividing the work something from

00:20:27,460 --> 00:20:34,299
a technical little bit low level point

00:20:29,559 --> 00:20:36,100
of view you have this this dance that

00:20:34,299 --> 00:20:37,779
goes on on the workflow plugin where

00:20:36,100 --> 00:20:40,690
you've got work going on on the nodes

00:20:37,779 --> 00:20:42,610
and then you have the groovy script the

00:20:40,690 --> 00:20:45,760
workflow script doing stuff back on the

00:20:42,610 --> 00:20:47,889
master so I would pull the stuff down on

00:20:45,760 --> 00:20:49,720
one of the nodes but I need to get that

00:20:47,889 --> 00:20:50,600
back into that groovy script to go do

00:20:49,720 --> 00:20:52,850
some more things

00:20:50,600 --> 00:20:54,230
with and the one of the ways that I that

00:20:52,850 --> 00:20:57,710
you can accomplish that the thing that I

00:20:54,230 --> 00:20:59,750
used was the read file command which the

00:20:57,710 --> 00:21:02,539
workflow provides so I ended up creating

00:20:59,750 --> 00:21:04,429
this file I would read that in that gets

00:21:02,539 --> 00:21:07,130
back into the kind of the groovy scope

00:21:04,429 --> 00:21:09,080
within the master that that's actually

00:21:07,130 --> 00:21:10,850
running the overall workflow it now has

00:21:09,080 --> 00:21:12,470
access to that list of files I've

00:21:10,850 --> 00:21:15,289
tokenized them and I can do things with

00:21:12,470 --> 00:21:16,820
those and in my case I would define the

00:21:15,289 --> 00:21:19,340
parallel work I'd set up a series of

00:21:16,820 --> 00:21:24,770
branches one branch for each list of

00:21:19,340 --> 00:21:29,090
recipes and so defining the work again

00:21:24,770 --> 00:21:33,799
it's fairly straightforward one of the

00:21:29,090 --> 00:21:35,150
things you'll see here was there's two

00:21:33,799 --> 00:21:36,530
ways you can do your shell scripting

00:21:35,150 --> 00:21:37,850
there's more than two ways you can do

00:21:36,530 --> 00:21:40,010
shell scripting but there's there's a

00:21:37,850 --> 00:21:42,350
shell script command within workflow and

00:21:40,010 --> 00:21:45,380
I definitely use that quite a bit I

00:21:42,350 --> 00:21:47,150
found it valuable to have a external

00:21:45,380 --> 00:21:49,549
shell script but are called as well that

00:21:47,150 --> 00:21:52,159
could look like a true shell script and

00:21:49,549 --> 00:21:54,590
the reason one of the things that I

00:21:52,159 --> 00:21:57,640
would maybe give you some advice on this

00:21:54,590 --> 00:22:00,799
is you read through these workflows is

00:21:57,640 --> 00:22:02,600
variable expansion can be tricky you

00:22:00,799 --> 00:22:04,730
have to we're used to look into

00:22:02,600 --> 00:22:07,520
something and we see a dollar sign and a

00:22:04,730 --> 00:22:09,320
curly brace okay that's variable is

00:22:07,520 --> 00:22:10,549
going to be substituted but when you're

00:22:09,320 --> 00:22:11,840
looking at work while you have to ask

00:22:10,549 --> 00:22:13,760
yourself where is it going to be

00:22:11,840 --> 00:22:15,409
substituted versus expansion going to

00:22:13,760 --> 00:22:17,179
occur does it occur when groovy is

00:22:15,409 --> 00:22:19,340
running on the master kind of processing

00:22:17,179 --> 00:22:21,470
the workflow or is this going to happen

00:22:19,340 --> 00:22:23,480
on the master actually within that shell

00:22:21,470 --> 00:22:24,950
script so even though you've got a shell

00:22:23,480 --> 00:22:27,409
with your quotes if you've got that

00:22:24,950 --> 00:22:29,330
dollar sign whatever it's going to get

00:22:27,409 --> 00:22:33,710
substituted your shell script may have

00:22:29,330 --> 00:22:36,260
an export like in this case export be

00:22:33,710 --> 00:22:39,140
cap service username equals single quote

00:22:36,260 --> 00:22:39,919
dollar sign whatever so and if you look

00:22:39,140 --> 00:22:41,360
at that you're going to think while

00:22:39,919 --> 00:22:43,429
shell is not going to expand that

00:22:41,360 --> 00:22:46,460
because it's in a single quote well it

00:22:43,429 --> 00:22:47,419
turns out groovy is going to expand that

00:22:46,460 --> 00:22:48,950
variable it's going to do that

00:22:47,419 --> 00:22:51,590
substitution so that's actually

00:22:48,950 --> 00:22:53,809
occurring at the groovy level so that

00:22:51,590 --> 00:22:55,530
the key is just using the backslash or

00:22:53,809 --> 00:22:57,600
things that need to happen down at the

00:22:55,530 --> 00:22:58,860
level so just something to kind of keep

00:22:57,600 --> 00:23:00,960
it in top of your head if things don't

00:22:58,860 --> 00:23:02,250
seem to be happening or showing up where

00:23:00,960 --> 00:23:06,480
you think there could just be something

00:23:02,250 --> 00:23:10,250
as simple as variable expansion so post

00:23:06,480 --> 00:23:10,250
parallel wrap up on the recipe download

00:23:12,140 --> 00:23:16,590
was retrieving from cotton so at the end

00:23:15,090 --> 00:23:18,330
of download and the rest busy just a

00:23:16,590 --> 00:23:20,820
ploy to upload their the raw HTML

00:23:18,330 --> 00:23:22,620
endicott and at the end the master would

00:23:20,820 --> 00:23:24,750
pulled it down from cloud and we get a

00:23:22,620 --> 00:23:30,720
list of everything and make it available

00:23:24,750 --> 00:23:32,460
for downstream downstream jobs the next

00:23:30,720 --> 00:23:33,780
example the second step in that long

00:23:32,460 --> 00:23:35,730
step that you saw that I've used for

00:23:33,780 --> 00:23:39,930
workflow is the actual parsing step this

00:23:35,730 --> 00:23:42,740
is the one that we took from 20 hours

00:23:39,930 --> 00:23:46,440
more than 20 hours because it never was

00:23:42,740 --> 00:23:47,670
typically run but it was in the parts

00:23:46,440 --> 00:23:50,520
that I ran it would have been more than

00:23:47,670 --> 00:23:53,730
20 hours and it's exit in its original

00:23:50,520 --> 00:23:56,340
state took that down to about two hours

00:23:53,730 --> 00:23:58,440
and again we spread the work out over a

00:23:56,340 --> 00:24:02,610
bunch of nodes across multiple data

00:23:58,440 --> 00:24:04,710
centers work gets done works get pushed

00:24:02,610 --> 00:24:06,480
up to Cloudant at the end we pull it

00:24:04,710 --> 00:24:08,700
back down to the master and and we have

00:24:06,480 --> 00:24:11,640
have something we can move on with and

00:24:08,700 --> 00:24:14,580
do additional things with so subdividing

00:24:11,640 --> 00:24:15,810
the work in this case I provided I can a

00:24:14,580 --> 00:24:17,160
parameter rice how do we want to

00:24:15,810 --> 00:24:19,680
subdivide to work so it would be

00:24:17,160 --> 00:24:21,090
extensible developer wanted to maybe

00:24:19,680 --> 00:24:23,010
have a different way to subdivide the

00:24:21,090 --> 00:24:24,900
work and maybe I want all hamburger

00:24:23,010 --> 00:24:26,700
recipes or have some special thing I

00:24:24,900 --> 00:24:28,710
want to look at they could write a new

00:24:26,700 --> 00:24:31,260
script that would come up with a list of

00:24:28,710 --> 00:24:33,240
recipe files that would sub divide the

00:24:31,260 --> 00:24:34,530
work or if I wanted to do that I didn't

00:24:33,240 --> 00:24:38,130
necessarily have to go back in the

00:24:34,530 --> 00:24:40,890
workflow to change things I've embedded

00:24:38,130 --> 00:24:43,260
here what with the the typical one of

00:24:40,890 --> 00:24:44,910
the typical scripts looks like and it's

00:24:43,260 --> 00:24:46,710
basically a groovy command that pulls a

00:24:44,910 --> 00:24:48,660
list of recipes out of a database then

00:24:46,710 --> 00:24:51,210
another all command which kind of splits

00:24:48,660 --> 00:24:52,590
it up into a series of files each with

00:24:51,210 --> 00:24:55,320
the work that's going to be done on the

00:24:52,590 --> 00:24:57,060
different nodes and then that gets with

00:24:55,320 --> 00:25:00,030
the reef ah gets pulled back into the

00:24:57,060 --> 00:25:01,680
groovy process the parallel work in this

00:25:00,030 --> 00:25:04,460
in this case is going to be maven

00:25:01,680 --> 00:25:04,460
running a test

00:25:04,870 --> 00:25:11,100
and given a particular recipe file so

00:25:09,250 --> 00:25:14,110
all of these recipe files let's say

00:25:11,100 --> 00:25:16,240
let's say there's 150 recipes and each

00:25:14,110 --> 00:25:18,040
file they're all available to each

00:25:16,240 --> 00:25:20,260
instance but it's going to choose the

00:25:18,040 --> 00:25:23,290
one that it was that it was defined by

00:25:20,260 --> 00:25:27,940
that was defined by in the workflow for

00:25:23,290 --> 00:25:30,280
that given a parallel instance and so at

00:25:27,940 --> 00:25:32,260
the end of this then use curl to use the

00:25:30,280 --> 00:25:35,080
bulk docs command to push the stuff back

00:25:32,260 --> 00:25:37,300
into JSON post parallel wrap up retrieve

00:25:35,080 --> 00:25:41,380
everything from json again I mean from

00:25:37,300 --> 00:25:44,400
Cloudant archive it run reporting jobs

00:25:41,380 --> 00:25:46,929
so it's definitely a pattern that that

00:25:44,400 --> 00:25:52,510
that I saw emerging from from the work

00:25:46,929 --> 00:25:54,370
that I did one of the things and then

00:25:52,510 --> 00:25:59,670
after this i think i'm going to go ahead

00:25:54,370 --> 00:26:02,800
and jump into some of the details so

00:25:59,670 --> 00:26:04,750
highlighting change impact so one of the

00:26:02,800 --> 00:26:06,940
steps you always did at the end so if

00:26:04,750 --> 00:26:08,679
you run if you run your your CI types of

00:26:06,940 --> 00:26:11,140
bills you want to see your unit test

00:26:08,679 --> 00:26:14,080
reports you want to see integration test

00:26:11,140 --> 00:26:15,460
status and reports you won't you want to

00:26:14,080 --> 00:26:17,260
know that things are right so how does a

00:26:15,460 --> 00:26:19,690
person team know that things are right

00:26:17,260 --> 00:26:22,630
we do have some Union tests on their

00:26:19,690 --> 00:26:24,520
jobs themselves but we've actually got

00:26:22,630 --> 00:26:26,470
some reports that run to provide a

00:26:24,520 --> 00:26:28,960
variety of kinds of dips to tell you

00:26:26,470 --> 00:26:32,140
what has changed from the work that they

00:26:28,960 --> 00:26:36,010
just did to some of this may be a little

00:26:32,140 --> 00:26:38,860
bit small to see but some of this for

00:26:36,010 --> 00:26:41,500
example you can see between sprint 17

00:26:38,860 --> 00:26:44,860
with section fixes versus sprint 17 on

00:26:41,500 --> 00:26:46,960
April 24th that the term butter was

00:26:44,860 --> 00:26:48,309
identified as an ingredient in this

00:26:46,960 --> 00:26:51,160
particular recipe and there's some other

00:26:48,309 --> 00:26:54,250
changes and so this would actually

00:26:51,160 --> 00:26:55,780
produce a report on all 12,000 recipes

00:26:54,250 --> 00:26:57,760
what has changed because of my code

00:26:55,780 --> 00:27:00,700
changed that I just did and there are

00:26:57,760 --> 00:27:02,470
oftentimes unintended side effects from

00:27:00,700 --> 00:27:04,240
code changes and this allows you to see

00:27:02,470 --> 00:27:07,590
oops this caused all these other things

00:27:04,240 --> 00:27:10,119
to break and so it is it is a

00:27:07,590 --> 00:27:11,829
challenging domain space and ham

00:27:10,119 --> 00:27:13,809
this kind of data and being able to run

00:27:11,829 --> 00:27:21,189
it on all 12,000 recipes is really

00:27:13,809 --> 00:27:29,319
important for quality so let me switch

00:27:21,189 --> 00:27:30,849
gears back to the browser again so just

00:27:29,319 --> 00:27:34,479
to show that this is still being used I

00:27:30,849 --> 00:27:38,649
guess I submitted the proposal for this

00:27:34,479 --> 00:27:41,409
talk back in zip februari March maybe

00:27:38,649 --> 00:27:43,419
since sometime and you know sometimes

00:27:41,409 --> 00:27:44,649
you write jobs and we come up with the

00:27:43,419 --> 00:27:45,969
talks and whatever we're doing we've

00:27:44,649 --> 00:27:48,159
moved on and we're doing other things

00:27:45,969 --> 00:27:49,629
and certainly I've had a ton of work and

00:27:48,159 --> 00:27:51,399
water under the bridge since then but

00:27:49,629 --> 00:27:55,119
this is one of the process is still

00:27:51,399 --> 00:27:57,639
being used so this is this is current

00:27:55,119 --> 00:27:59,259
I've got my Wi-Fi off now so it's not

00:27:57,639 --> 00:28:02,169
absolutely current but it's fairly

00:27:59,259 --> 00:28:04,749
current and you can see that june

00:28:02,169 --> 00:28:06,099
sixteenth june fifteenth jun 12 that

00:28:04,749 --> 00:28:08,349
we've had a number of jobs running

00:28:06,099 --> 00:28:10,509
through here and our partisan team has

00:28:08,349 --> 00:28:12,099
has actually annotated the different

00:28:10,509 --> 00:28:13,509
jobs that they run with information

00:28:12,099 --> 00:28:16,089
about what they're expecting what they

00:28:13,509 --> 00:28:19,169
were testing what had changed to give a

00:28:16,089 --> 00:28:19,169
little context to it

00:28:22,010 --> 00:28:25,250
so here's the drill down I know some of

00:28:23,900 --> 00:28:27,140
you were looking forward to see some

00:28:25,250 --> 00:28:28,640
examples of using the workflow so we'll

00:28:27,140 --> 00:28:31,930
spend a little bit of time on this and

00:28:28,640 --> 00:28:31,930
show you some of the things that we did

00:28:32,170 --> 00:28:37,070
one of the things and provide a number

00:28:34,490 --> 00:28:38,630
of parameters into this to try to to

00:28:37,070 --> 00:28:40,760
give folks a lot of things that they can

00:28:38,630 --> 00:28:43,940
do with this one job so I provided a

00:28:40,760 --> 00:28:45,950
recipe grep pattern in my script that

00:28:43,940 --> 00:28:48,710
selects recipes typically selects them

00:28:45,950 --> 00:28:50,890
all and I've got this great pattern of

00:28:48,710 --> 00:28:53,810
period that by default selects them all

00:28:50,890 --> 00:28:55,460
but I allow them may be there they made

00:28:53,810 --> 00:28:57,590
a change and at first I just want to

00:28:55,460 --> 00:28:59,690
test what did this do to the jalapeno

00:28:57,590 --> 00:29:02,300
cheese burger recipe did it make it

00:28:59,690 --> 00:29:04,520
better to fix this problem or not so

00:29:02,300 --> 00:29:06,050
they don't have to wait eat two hours is

00:29:04,520 --> 00:29:08,600
still too long to write wait for some

00:29:06,050 --> 00:29:12,800
answers and so they could do a quick

00:29:08,600 --> 00:29:14,450
test on a handful of recipes using that

00:29:12,800 --> 00:29:16,070
parameter they wouldn't push it through

00:29:14,450 --> 00:29:17,390
the rest of pipeline for a quick test

00:29:16,070 --> 00:29:21,580
but they could they could get a quick

00:29:17,390 --> 00:29:21,580
idea of what they did maybe a difference

00:29:22,180 --> 00:29:27,740
I've got a parameter for the desire to

00:29:24,350 --> 00:29:29,420
get branch and this I think I talked

00:29:27,740 --> 00:29:32,780
about this in a later slide but we're

00:29:29,420 --> 00:29:34,160
going to mention it here the purpose

00:29:32,780 --> 00:29:35,630
we're providing this was so for feature

00:29:34,160 --> 00:29:37,220
branch tested so maybe they've done a

00:29:35,630 --> 00:29:38,630
suite of changes that they wanted to

00:29:37,220 --> 00:29:40,010
test and it's on a feature branch so

00:29:38,630 --> 00:29:41,600
they don't want to affect everybody else

00:29:40,010 --> 00:29:45,080
yet so they can defeat your branch

00:29:41,600 --> 00:29:47,000
testing with the job I've got a parson

00:29:45,080 --> 00:29:49,400
node label so you can choose where you

00:29:47,000 --> 00:29:52,970
want one a parse your your peril of work

00:29:49,400 --> 00:29:54,710
to be done and by using labels so I've

00:29:52,970 --> 00:29:56,720
got two labels one for parsing in

00:29:54,710 --> 00:30:00,380
general one if I wanted to restrict

00:29:56,720 --> 00:30:01,460
parson to just my San Jose nodes there

00:30:00,380 --> 00:30:04,010
there could be reasons you want to

00:30:01,460 --> 00:30:05,570
restrict it there maybe for speed or for

00:30:04,010 --> 00:30:10,240
other reasons for your not wanting to

00:30:05,570 --> 00:30:10,240
run it on the other clusters

00:30:10,520 --> 00:30:14,660
I mentioned the selected divided recipes

00:30:13,160 --> 00:30:16,310
to parse grip that we've got options

00:30:14,660 --> 00:30:17,840
you've got a variety of ways that you

00:30:16,310 --> 00:30:19,640
could do that you could provide justify

00:30:17,840 --> 00:30:21,620
on the file system has a preset list of

00:30:19,640 --> 00:30:23,510
recipes you want to run and you could

00:30:21,620 --> 00:30:26,630
pull it from the database you could have

00:30:23,510 --> 00:30:29,080
groups of 150 or groups of arbitrary

00:30:26,630 --> 00:30:29,080
values

00:30:35,100 --> 00:30:39,330
one of the things in it is you getting

00:30:37,169 --> 00:30:40,950
into peril of work we do have we do

00:30:39,330 --> 00:30:43,460
access a database for some of our ward

00:30:40,950 --> 00:30:45,539
and since we're actually across

00:30:43,460 --> 00:30:48,840
geographies from east coast to west

00:30:45,539 --> 00:30:50,640
coast we have a database we have a

00:30:48,840 --> 00:30:54,150
primary database we actually mirror that

00:30:50,640 --> 00:30:55,530
database to each of the regions so you

00:30:54,150 --> 00:30:57,120
can use the primary database for

00:30:55,530 --> 00:30:58,500
everything or you can use mirrors as

00:30:57,120 --> 00:31:00,059
well which would accelerate the process

00:30:58,500 --> 00:31:01,590
if you know the mirrors are up to date I

00:31:00,059 --> 00:31:03,690
have a job that runs nightly that

00:31:01,590 --> 00:31:05,010
updates the mirrors so depending what

00:31:03,690 --> 00:31:06,720
folks have been doing during the day

00:31:05,010 --> 00:31:11,940
they may or may not be up to date but

00:31:06,720 --> 00:31:13,320
that met gives a acceleration option so

00:31:11,940 --> 00:31:14,730
I think this is what a lot of you would

00:31:13,320 --> 00:31:16,950
like to look at I'm not going to promise

00:31:14,730 --> 00:31:20,549
this is perfect because I'm sure it's

00:31:16,950 --> 00:31:25,230
not but it's it's what's working at the

00:31:20,549 --> 00:31:27,240
moment so for my first for that pre step

00:31:25,230 --> 00:31:29,039
where I'm pulling the the gate code down

00:31:27,240 --> 00:31:33,900
and dividing things up i'm doing that on

00:31:29,039 --> 00:31:35,400
the master you can use the shell step

00:31:33,900 --> 00:31:37,260
and you could just do one thing per

00:31:35,400 --> 00:31:41,669
shell step and that's probably good for

00:31:37,260 --> 00:31:46,169
canceling and other life cycle things

00:31:41,669 --> 00:31:49,080
within the workflow plug-in itself for

00:31:46,169 --> 00:31:50,580
readability and for for me i found it

00:31:49,080 --> 00:31:53,490
kind of nice to use the triple quote

00:31:50,580 --> 00:31:55,610
option where i would just put a series

00:31:53,490 --> 00:31:57,990
of things to do within the shell script

00:31:55,610 --> 00:32:01,169
and it would also make it possible so i

00:31:57,990 --> 00:32:03,600
can export a series of values that were

00:32:01,169 --> 00:32:06,210
available in and groovy in the workflow

00:32:03,600 --> 00:32:12,770
and make those available in the runtime

00:32:06,210 --> 00:32:12,770
environment on a given node to do stuff

00:32:14,230 --> 00:32:20,300
and so let's see so the main thing we

00:32:19,130 --> 00:32:22,010
talked about on another screen is we've

00:32:20,300 --> 00:32:27,650
got the script to select and divide the

00:32:22,010 --> 00:32:34,450
recipes I've got the command to read the

00:32:27,650 --> 00:32:37,160
file of recipes that's been created and

00:32:34,450 --> 00:32:39,410
then I've got a show command that does

00:32:37,160 --> 00:32:42,920
the sharing and that's taking that

00:32:39,410 --> 00:32:45,020
initial in this case it's sharing the

00:32:42,920 --> 00:32:46,460
workspace so there's the typical way you

00:32:45,020 --> 00:32:48,800
would share a workspace with workflow

00:32:46,460 --> 00:32:52,970
plugin is just doing an archive command

00:32:48,800 --> 00:32:55,340
and that's fine when I started out I was

00:32:52,970 --> 00:32:57,050
using the Jenkins as a service and I

00:32:55,340 --> 00:32:59,630
didn't have much disk space i was using

00:32:57,050 --> 00:33:01,220
cloud in to actually archive the

00:32:59,630 --> 00:33:03,890
workspace is 1 i'm still using that it

00:33:01,220 --> 00:33:05,780
hasn't been a I'm using cloud for the

00:33:03,890 --> 00:33:07,670
sharing at the end so I hadn't changed

00:33:05,780 --> 00:33:10,010
that if I were starting new I would

00:33:07,670 --> 00:33:12,460
probably just archive directly to the

00:33:10,010 --> 00:33:12,460
master

00:33:16,500 --> 00:33:20,640
and then we have a loop that we're

00:33:18,420 --> 00:33:26,330
looping through the list of recipe files

00:33:20,640 --> 00:33:34,740
and we're creating a branches structure

00:33:26,330 --> 00:33:37,410
which contains contains a closure if

00:33:34,740 --> 00:33:38,610
you're new to groovy some of the stuff I

00:33:37,410 --> 00:33:40,470
know it can be kind of boring but a

00:33:38,610 --> 00:33:42,930
closure is just a block a code that gets

00:33:40,470 --> 00:33:44,670
passed in to something else that gets

00:33:42,930 --> 00:33:48,540
executed at the right at the appropriate

00:33:44,670 --> 00:33:49,830
time so a node with the parson node

00:33:48,540 --> 00:33:52,050
label that was specified in the

00:33:49,830 --> 00:33:53,790
parameter and so at this point we're

00:33:52,050 --> 00:33:56,040
actually going to be looking at the work

00:33:53,790 --> 00:33:58,110
that gets done during the pale work so

00:33:56,040 --> 00:34:00,060
this time I'm defining the work let me

00:33:58,110 --> 00:34:01,620
scroll down and we'll come back up the

00:34:00,060 --> 00:34:03,300
parallel work doesn't start till we get

00:34:01,620 --> 00:34:05,310
down to the to the point where it says

00:34:03,300 --> 00:34:09,360
parallel branches and branch just

00:34:05,310 --> 00:34:10,950
contains all these this map of things to

00:34:09,360 --> 00:34:12,810
do this list this collection of things

00:34:10,950 --> 00:34:14,610
that's going to get done in parallel I'm

00:34:12,810 --> 00:34:15,870
defining that collection of things to be

00:34:14,610 --> 00:34:17,250
done though up here and this is where

00:34:15,870 --> 00:34:24,480
you really see the definition of what's

00:34:17,250 --> 00:34:26,669
going to happen in parallel so I pull

00:34:24,480 --> 00:34:32,270
the workspace down I've actually got

00:34:26,669 --> 00:34:32,270
some lightweight encryption on that

00:34:33,080 --> 00:34:37,569
let's say

00:34:35,169 --> 00:34:39,220
use an artifact er we have multiple

00:34:37,569 --> 00:34:45,659
artifactory instances so we can choose

00:34:39,220 --> 00:34:47,980
one that's close to the given site and

00:34:45,659 --> 00:34:49,629
then the heart of this and this is what

00:34:47,980 --> 00:34:55,179
I was highlighting the other screen is

00:34:49,629 --> 00:34:57,660
the is the maven command so the maven

00:34:55,179 --> 00:35:01,770
command again he's running the test task

00:34:57,660 --> 00:35:04,839
he's providing a variety of arguments I

00:35:01,770 --> 00:35:06,130
talked about memory or I will talk about

00:35:04,839 --> 00:35:08,470
memory any minute being one of the

00:35:06,130 --> 00:35:10,510
challenges so I'm providing five gigs to

00:35:08,470 --> 00:35:14,500
each of these tasks that are running for

00:35:10,510 --> 00:35:15,910
my purposes that's what I needed you may

00:35:14,500 --> 00:35:17,260
not necessarily need that much it's just

00:35:15,910 --> 00:35:23,500
because the nature of the work that I'm

00:35:17,260 --> 00:35:26,049
doing on each of these nodes and at the

00:35:23,500 --> 00:35:28,299
end I'm sharing the parsing results back

00:35:26,049 --> 00:35:29,920
and again the sharing if you look in the

00:35:28,299 --> 00:35:31,900
script that's getting run it's doing a

00:35:29,920 --> 00:35:33,520
curl command it so no gravy command to

00:35:31,900 --> 00:35:35,950
kind of package to everything up in a

00:35:33,520 --> 00:35:37,930
nice JSON package and it does a curl

00:35:35,950 --> 00:35:42,569
command to push that up to to my no

00:35:37,930 --> 00:35:42,569
sequel database which is unclouded

00:35:44,550 --> 00:35:48,000
so we just stuff in parallel then we

00:35:46,290 --> 00:35:51,530
come back once once all that work is

00:35:48,000 --> 00:35:51,530
done we come back to the master

00:35:57,870 --> 00:36:01,830
so that one of the key things in master

00:36:00,030 --> 00:36:04,080
does is another curl command he's just

00:36:01,830 --> 00:36:06,510
pulling down there are some part of the

00:36:04,080 --> 00:36:10,020
rest api for cloud let me scoot this

00:36:06,510 --> 00:36:12,150
over you can get all the documents in

00:36:10,020 --> 00:36:14,580
the database just with one curl command

00:36:12,150 --> 00:36:17,310
which is like i said that it's a simple

00:36:14,580 --> 00:36:18,780
way to share things and for these

00:36:17,310 --> 00:36:23,520
parallel workflows that worked great for

00:36:18,780 --> 00:36:25,080
me in parsing and splitting that back up

00:36:23,520 --> 00:36:27,900
again i did have to provide enough

00:36:25,080 --> 00:36:30,360
memory to do that so I've got a Java ops

00:36:27,900 --> 00:36:34,020
for three gigs here a little bit more

00:36:30,360 --> 00:36:36,000
than your typical x MX had a groovy

00:36:34,020 --> 00:36:38,010
command to kind of split up my big all

00:36:36,000 --> 00:36:43,560
docs into the individual recipe

00:36:38,010 --> 00:36:47,190
documents archive the recipes so that

00:36:43,560 --> 00:36:49,530
the downstream jobs I could use for

00:36:47,190 --> 00:36:50,910
cloud from Cloudant or from Jenkins to

00:36:49,530 --> 00:36:52,710
pull those in I'm actually pulling in

00:36:50,910 --> 00:36:56,210
the recipes from cloud and the

00:36:52,710 --> 00:36:59,160
downstream ones and then i'm using a

00:36:56,210 --> 00:37:03,600
bill job command to automatically run in

00:36:59,160 --> 00:37:06,270
analytics or analyze recipes job against

00:37:03,600 --> 00:37:07,830
what was just done so that's really

00:37:06,270 --> 00:37:09,240
that's one of those reporting things

00:37:07,830 --> 00:37:11,070
that we were talking about just a moment

00:37:09,240 --> 00:37:12,360
ago that when you're done with something

00:37:11,070 --> 00:37:15,210
like this you want to make sure that the

00:37:12,360 --> 00:37:16,650
results actually are somewhat good so

00:37:15,210 --> 00:37:18,330
there's there's some degree of

00:37:16,650 --> 00:37:20,100
automation we can do with that and

00:37:18,330 --> 00:37:23,250
there's some degree in the nature of

00:37:20,100 --> 00:37:24,990
this work of part of the person team

00:37:23,250 --> 00:37:26,010
wanting to look at specific results and

00:37:24,990 --> 00:37:29,640
make sure because there's so many things

00:37:26,010 --> 00:37:32,570
that can might might not be obvious from

00:37:29,640 --> 00:37:32,570
an automated check

00:37:36,290 --> 00:37:40,160
so here's an example of the running

00:37:38,300 --> 00:37:43,280
steps when you use the workflow plugin

00:37:40,160 --> 00:37:48,440
on the left hand side you'll have this

00:37:43,280 --> 00:37:49,970
running steps option and and this isn't

00:37:48,440 --> 00:37:51,110
just with parallel so you can have

00:37:49,970 --> 00:37:53,210
different steps around in different

00:37:51,110 --> 00:37:57,290
nodes at different times and you can go

00:37:53,210 --> 00:37:59,060
in and it got the little prompt computer

00:37:57,290 --> 00:38:03,050
with a prompt on it to look at the shell

00:37:59,060 --> 00:38:05,840
scripts for a given step but when you

00:38:03,050 --> 00:38:08,090
run things in parallel you get in our

00:38:05,840 --> 00:38:10,130
case we had 81 steps running in parallel

00:38:08,090 --> 00:38:12,500
and that's one of the reasons we're able

00:38:10,130 --> 00:38:15,710
to bring it down to two hours so you get

00:38:12,500 --> 00:38:18,140
a ton of these things and depending how

00:38:15,710 --> 00:38:22,130
you've written your script it may or may

00:38:18,140 --> 00:38:24,560
not fail when things fail like Everlast

00:38:22,130 --> 00:38:27,020
step in your shell script returns a

00:38:24,560 --> 00:38:29,690
negative x a positive x occur then it's

00:38:27,020 --> 00:38:31,790
going to fail but if something is higher

00:38:29,690 --> 00:38:33,290
up in your script that maybe it can be

00:38:31,790 --> 00:38:37,280
obscured and not appear that it's a

00:38:33,290 --> 00:38:39,680
failure so there were times I definitely

00:38:37,280 --> 00:38:40,730
had to check through logs you know there

00:38:39,680 --> 00:38:42,980
were a couple ways to make sure that

00:38:40,730 --> 00:38:44,720
what I got back was good there was a

00:38:42,980 --> 00:38:45,890
number of recipes you kind of expected

00:38:44,720 --> 00:38:47,570
to get back and I could look in the

00:38:45,890 --> 00:38:49,070
Cloudant database to see if I got back

00:38:47,570 --> 00:38:52,490
the expected number of recipes that

00:38:49,070 --> 00:38:53,870
would be a quick indicator but if

00:38:52,490 --> 00:38:55,520
something does go wrong sometimes it

00:38:53,870 --> 00:38:57,020
would just be one no talked about that

00:38:55,520 --> 00:38:59,600
early while things to be as reliable as

00:38:57,020 --> 00:39:01,490
possible so you don't have one one of

00:38:59,600 --> 00:39:05,000
these parallel steps causing the causing

00:39:01,490 --> 00:39:07,790
the whole job to fail one of the

00:39:05,000 --> 00:39:11,330
provements that we've recently made now

00:39:07,790 --> 00:39:13,580
that we can do it in two hours we want

00:39:11,330 --> 00:39:16,910
to learn to do things better and the

00:39:13,580 --> 00:39:18,350
team in addition to writing reports one

00:39:16,910 --> 00:39:21,640
of the long running steps in this

00:39:18,350 --> 00:39:23,840
process is generation of what an

00:39:21,640 --> 00:39:28,760
unstructured information business it

00:39:23,840 --> 00:39:30,890
called kaz common analytics structure or

00:39:28,760 --> 00:39:32,750
something that nature to JSON structure

00:39:30,890 --> 00:39:34,730
that comes out of this analysis and

00:39:32,750 --> 00:39:36,830
there's some pre-processing that can be

00:39:34,730 --> 00:39:40,190
done to generate these Kaz's ahead of

00:39:36,830 --> 00:39:41,900
time that saves save some time so we've

00:39:40,190 --> 00:39:43,450
got a new version of the workflow now

00:39:41,900 --> 00:39:46,850
that uses kind of these pre-generated

00:39:43,450 --> 00:39:48,849
Kaz's to accelerate things and I've got

00:39:46,850 --> 00:39:51,940
it running just on the cluster

00:39:48,849 --> 00:39:55,089
and running just fifteen nodes and I can

00:39:51,940 --> 00:39:58,089
still get it done in two hours so the

00:39:55,089 --> 00:40:00,849
benefits to that are we've got I've got

00:39:58,089 --> 00:40:01,900
15 slaves so I they can actually go look

00:40:00,849 --> 00:40:03,460
at the workspace if they were so

00:40:01,900 --> 00:40:04,599
inclined that's not happening but they

00:40:03,460 --> 00:40:06,160
could to see what went wrong if

00:40:04,599 --> 00:40:07,869
something goes wrong it's also really

00:40:06,160 --> 00:40:11,109
quick quick to check if something goes

00:40:07,869 --> 00:40:13,630
wrong you also notice in this I recently

00:40:11,109 --> 00:40:14,920
updated my workflow plugins and so

00:40:13,630 --> 00:40:17,019
there's always improvements being made

00:40:14,920 --> 00:40:19,119
to in this case the parallel branch has

00:40:17,019 --> 00:40:21,519
the name of the branch in it which makes

00:40:19,119 --> 00:40:23,289
it a little bit quicker to get to to see

00:40:21,519 --> 00:40:30,609
where things are happening if you do get

00:40:23,289 --> 00:40:33,339
something that that goes cell and just

00:40:30,609 --> 00:40:36,430
another example of the kinds of reports

00:40:33,339 --> 00:40:39,130
that we get out this is a sprint night

00:40:36,430 --> 00:40:44,589
teen to sprint 18 comparison of what's

00:40:39,130 --> 00:40:48,369
changed and like in this example an agua

00:40:44,589 --> 00:40:50,829
Verde fresh cilantro cilantro sprigs for

00:40:48,369 --> 00:40:53,619
is the cilantro is its own ingredient

00:40:50,829 --> 00:40:54,880
instead of cilantro sprigs for I don't

00:40:53,619 --> 00:40:57,069
know where the four came from but that

00:40:54,880 --> 00:40:58,660
definitely is not an ingredient name or

00:40:57,069 --> 00:41:01,779
part of the ingredient name for cilantro

00:40:58,660 --> 00:41:03,160
so some of the stuff they see to make

00:41:01,779 --> 00:41:04,660
sure that good things are happening and

00:41:03,160 --> 00:41:06,069
sometimes you see bad things that happen

00:41:04,660 --> 00:41:07,719
from looking through this as well and

00:41:06,069 --> 00:41:10,619
you realize you've had a regression that

00:41:07,719 --> 00:41:10,619
they need to go and fix

00:41:17,050 --> 00:41:21,130
so one of the other things and this is a

00:41:19,390 --> 00:41:22,360
practice that can apply up to things

00:41:21,130 --> 00:41:24,430
besides parsing when you're touching

00:41:22,360 --> 00:41:28,000
databases and again databases should be

00:41:24,430 --> 00:41:29,620
part of the automation methodology that

00:41:28,000 --> 00:41:32,500
you have if you're using databases for

00:41:29,620 --> 00:41:34,120
test data for actual configuration data

00:41:32,500 --> 00:41:35,650
for your production application there's

00:41:34,120 --> 00:41:37,720
a variety of tools that have been talked

00:41:35,650 --> 00:41:39,700
about the last couple of days that can

00:41:37,720 --> 00:41:41,320
be used with that one of the things i do

00:41:39,700 --> 00:41:43,690
because our parsing stuff touches the

00:41:41,320 --> 00:41:46,660
databases before I'll run some of these

00:41:43,690 --> 00:41:47,860
steps I do it before dump of the data

00:41:46,660 --> 00:41:50,110
from the tables which are going to be

00:41:47,860 --> 00:41:53,800
affected and I'll do an after dump just

00:41:50,110 --> 00:41:55,990
into a like a regular text file or CSV

00:41:53,800 --> 00:41:57,820
type of format and to be like target

00:41:55,990 --> 00:41:59,650
before target after of there's multiple

00:41:57,820 --> 00:42:02,170
tables I can just do a diff or recursive

00:41:59,650 --> 00:42:03,370
diff across the before and after and get

00:42:02,170 --> 00:42:05,140
a nice differ port of what's actually

00:42:03,370 --> 00:42:12,610
change so they can see their impact from

00:42:05,140 --> 00:42:13,990
a database point of view as well and in

00:42:12,610 --> 00:42:15,670
this case in that example I'm using

00:42:13,990 --> 00:42:17,170
beyond compare there's a couple of tools

00:42:15,670 --> 00:42:19,750
that are nice for looking at diff files

00:42:17,170 --> 00:42:22,060
and we're looking at just sets of files

00:42:19,750 --> 00:42:24,880
and seeing the differences so some of

00:42:22,060 --> 00:42:26,590
the troubleshooting I ran into issues

00:42:24,880 --> 00:42:29,050
with having enough memory from our

00:42:26,590 --> 00:42:31,030
processes and run into that I'm here at

00:42:29,050 --> 00:42:33,280
times with needing to change your x MX

00:42:31,030 --> 00:42:36,700
setting I'm having enough memory on the

00:42:33,280 --> 00:42:38,470
slave so I'm guess one of the talks this

00:42:36,700 --> 00:42:42,190
week somebody mentioned i think is

00:42:38,470 --> 00:42:43,300
kousuke early on it's under when people

00:42:42,190 --> 00:42:44,500
were leaving sunny we just get a

00:42:43,300 --> 00:42:46,960
collection of hardware that was

00:42:44,500 --> 00:42:48,730
available well I'm kind of like that

00:42:46,960 --> 00:42:51,820
where if I can get access to some VMS

00:42:48,730 --> 00:42:54,160
and put a Jenkins slave on there I will

00:42:51,820 --> 00:42:55,390
and so I've got a variety of things that

00:42:54,160 --> 00:42:57,130
were originally purposed for other

00:42:55,390 --> 00:42:58,870
things besides Jenkins which I've

00:42:57,130 --> 00:43:00,760
actually brought into the Jenkins fold

00:42:58,870 --> 00:43:02,200
some you know if something's laying

00:43:00,760 --> 00:43:06,130
there idle and lunch will be put to good

00:43:02,200 --> 00:43:07,780
use not all of my things not everything

00:43:06,130 --> 00:43:08,830
that I run had enough memory though so

00:43:07,780 --> 00:43:10,900
that was one of the things I had to

00:43:08,830 --> 00:43:13,750
constrain you know which slaves it would

00:43:10,900 --> 00:43:15,130
run on her how many executors I had on a

00:43:13,750 --> 00:43:17,740
given slave so I wouldn't run out of

00:43:15,130 --> 00:43:21,690
memory on that slide I had the JVM huj

00:43:17,740 --> 00:43:24,100
TKS you solved that by upgrading the JDK

00:43:21,690 --> 00:43:25,870
and by the way shout out to Jesse and

00:43:24,100 --> 00:43:27,550
the team that are working on this it's a

00:43:25,870 --> 00:43:29,560
this sort of thing when you go into the

00:43:27,550 --> 00:43:29,860
core of a product like Jenkins that has

00:43:29,560 --> 00:43:32,260
a

00:43:29,860 --> 00:43:33,940
long heritage it can be kind of tricky

00:43:32,260 --> 00:43:37,090
to get in there and introduce something

00:43:33,940 --> 00:43:38,860
as complex as the workflow plugin and to

00:43:37,090 --> 00:43:40,360
make it work without breaking everything

00:43:38,860 --> 00:43:43,630
else it's in there and it has required

00:43:40,360 --> 00:43:45,040
core API changes or additions or

00:43:43,630 --> 00:43:47,290
enhancements if you will with Ben

00:43:45,040 --> 00:43:50,320
Jenkins so it's definitely a non-trivial

00:43:47,290 --> 00:43:51,610
thing so folks who can support in the

00:43:50,320 --> 00:43:53,830
work that's being done on the workflow

00:43:51,610 --> 00:43:56,080
plugin besides contributing bugs if

00:43:53,830 --> 00:43:57,550
there is suggestions if there's actually

00:43:56,080 --> 00:43:58,990
work you can contribute and poor

00:43:57,550 --> 00:44:01,210
requests or whatnot I'm sure that those

00:43:58,990 --> 00:44:02,560
are those are welcome but the team

00:44:01,210 --> 00:44:05,890
that's doing I appreciate copies

00:44:02,560 --> 00:44:07,210
willingness to to fund the effort Jesse

00:44:05,890 --> 00:44:10,510
and others you're actually doing this

00:44:07,210 --> 00:44:11,980
it's definitely a a worthwhile work

00:44:10,510 --> 00:44:19,810
that's that's going to make a difference

00:44:11,980 --> 00:44:21,130
in a number of places so again we saw

00:44:19,810 --> 00:44:26,800
this earlier there's an increased

00:44:21,130 --> 00:44:28,960
frequency and this is a screenshot taken

00:44:26,800 --> 00:44:30,460
in time to prevent provide these slides

00:44:28,960 --> 00:44:32,290
but you just saw something from June

00:44:30,460 --> 00:44:34,690
where we still you know using it on a

00:44:32,290 --> 00:44:37,090
regular basis and that's something with

00:44:34,690 --> 00:44:38,770
automation that you know you you know if

00:44:37,090 --> 00:44:41,080
you've done it well if it's being used a

00:44:38,770 --> 00:44:43,330
lot so you want to do your CI work well

00:44:41,080 --> 00:44:45,370
you want to do your your deployments and

00:44:43,330 --> 00:44:47,470
if it's done right it tends to be used

00:44:45,370 --> 00:44:49,540
more and people want more of whatever

00:44:47,470 --> 00:44:50,950
you're doing and they start coming up

00:44:49,540 --> 00:44:56,470
with new ideas and things that can be

00:44:50,950 --> 00:45:00,340
automated you talked about feature

00:44:56,470 --> 00:45:02,410
branch testing the role of Jenkins

00:45:00,340 --> 00:45:05,560
within our organization the parsing the

00:45:02,410 --> 00:45:07,000
the person code compilation we have unit

00:45:05,560 --> 00:45:10,540
testing on that the parsing job

00:45:07,000 --> 00:45:13,120
execution we use Jenkins for continuous

00:45:10,540 --> 00:45:17,710
integration runtime builds test security

00:45:13,120 --> 00:45:21,840
scans we're building java apps were no

00:45:17,710 --> 00:45:24,190
Jas we're building mobile stuff on iOS

00:45:21,840 --> 00:45:25,480
we actually interface with urban code

00:45:24,190 --> 00:45:27,160
deploy so if that's something you're

00:45:25,480 --> 00:45:30,370
interested in I can certainly speak to

00:45:27,160 --> 00:45:33,520
that out you know offline and that it

00:45:30,370 --> 00:45:35,350
helps manage some of the traceability

00:45:33,520 --> 00:45:38,470
and whatnot from a deployment point of

00:45:35,350 --> 00:45:39,940
view database backup restore Meereen I

00:45:38,470 --> 00:45:41,040
talked about the mirroring earlier which

00:45:39,940 --> 00:45:44,220
I utilize

00:45:41,040 --> 00:45:47,700
the workflow jobs tracking server logs

00:45:44,220 --> 00:45:51,630
we use bluemix which is a cloud foundry

00:45:47,700 --> 00:45:54,510
offering and actually use Jenkins as a

00:45:51,630 --> 00:45:58,250
poor man's way of providing some access

00:45:54,510 --> 00:46:02,820
to some of the logs from our apps and

00:45:58,250 --> 00:46:04,590
traceability updates we use jazzhub not

00:46:02,820 --> 00:46:06,390
github but we status out which works

00:46:04,590 --> 00:46:08,190
fine and provide some traceability

00:46:06,390 --> 00:46:10,740
updates to things going on in jenkins

00:46:08,190 --> 00:46:12,390
and push that back up to jazz ugh so

00:46:10,740 --> 00:46:14,340
there's a lot that Jenkins can be used

00:46:12,390 --> 00:46:15,600
for in and so hopefully again one of the

00:46:14,340 --> 00:46:17,070
things when I come to a conference like

00:46:15,600 --> 00:46:18,930
this now I've definitely taken away a

00:46:17,070 --> 00:46:23,040
couple of ideas with some plugins I want

00:46:18,930 --> 00:46:31,200
to go back and try is to maybe inspire

00:46:23,040 --> 00:46:32,190
you to try some things the one of the

00:46:31,200 --> 00:46:33,840
things if you get started with a

00:46:32,190 --> 00:46:36,690
workflow plugin that I recommend is

00:46:33,840 --> 00:46:39,300
starting small or do a POC and start

00:46:36,690 --> 00:46:41,400
kind of don't try to do everything it's

00:46:39,300 --> 00:46:43,110
been in a week on whatever it is and

00:46:41,400 --> 00:46:44,670
then it doesn't work why doesn't it work

00:46:43,110 --> 00:46:46,260
start small and make sure you understand

00:46:44,670 --> 00:46:47,730
how things work I've had to do this my

00:46:46,260 --> 00:46:49,860
whole life when I try out new

00:46:47,730 --> 00:46:51,900
technologies from back at a small

00:46:49,860 --> 00:46:53,760
company and the 80s doing stuff with

00:46:51,900 --> 00:46:56,190
foxpro you know things weren't

00:46:53,760 --> 00:46:57,960
necessarily documented how this would

00:46:56,190 --> 00:46:59,190
work well let me go see how it works you

00:46:57,960 --> 00:47:01,710
know there's one way to the

00:46:59,190 --> 00:47:04,490
documentation how does it really work so

00:47:01,710 --> 00:47:07,860
the the workflow is is an emerging

00:47:04,490 --> 00:47:09,480
plug-in it is post 10 but there's still

00:47:07,860 --> 00:47:10,950
a lot of work going on and not

00:47:09,480 --> 00:47:12,210
everything may be documented that you're

00:47:10,950 --> 00:47:14,610
trying to do or you may be trying to

00:47:12,210 --> 00:47:15,810
push the the edge on some of the things

00:47:14,610 --> 00:47:19,730
you need to do so just try some things

00:47:15,810 --> 00:47:22,530
out on a small scale once I got my stuff

00:47:19,730 --> 00:47:24,210
running I actually have another job if

00:47:22,530 --> 00:47:26,250
I'm going to go make some changes to it

00:47:24,210 --> 00:47:28,230
i'll try some of the enhancements i want

00:47:26,250 --> 00:47:30,570
to do like the cavs changes i made for a

00:47:28,230 --> 00:47:32,550
cast for cached calves work to

00:47:30,570 --> 00:47:34,530
accelerate it i'll try that on a

00:47:32,550 --> 00:47:36,330
different job just in a test kind of

00:47:34,530 --> 00:47:39,480
basis before i incorporate that into the

00:47:36,330 --> 00:47:43,290
regular pipeline job so so start small

00:47:39,480 --> 00:47:44,640
and work through things subscribe to

00:47:43,290 --> 00:47:45,900
pull notifications maybe there's a

00:47:44,640 --> 00:47:47,050
feature you're looking for that's not

00:47:45,900 --> 00:47:49,270
there yet

00:47:47,050 --> 00:47:51,130
the plugins mean to vlog don't get hubby

00:47:49,270 --> 00:47:54,340
can subscribe see what activities going

00:47:51,130 --> 00:47:55,900
on what they're working on certainly

00:47:54,340 --> 00:47:57,550
with any type of technology i try to

00:47:55,900 --> 00:47:59,200
consider who's backing it in this case

00:47:57,550 --> 00:48:01,630
clogged beads is back in it which is

00:47:59,200 --> 00:48:03,400
great i also try to consider who's using

00:48:01,630 --> 00:48:05,380
it because i don't want to use something

00:48:03,400 --> 00:48:07,960
that all of a sudden dies on the vine in

00:48:05,380 --> 00:48:09,430
a year and so i tried to spend my time

00:48:07,960 --> 00:48:10,990
on things that are going to be supported

00:48:09,430 --> 00:48:12,520
for a while especially in the security

00:48:10,990 --> 00:48:14,820
environment that we live in now we want

00:48:12,520 --> 00:48:20,050
things that are going to be maintained

00:48:14,820 --> 00:48:22,110
for how to do things i mean coming to

00:48:20,050 --> 00:48:27,090
this is great i did a lot of searching

00:48:22,110 --> 00:48:29,590
and reading on the site the the md

00:48:27,090 --> 00:48:31,780
documentation that was on the site with

00:48:29,590 --> 00:48:33,490
github i would go through that i would

00:48:31,780 --> 00:48:37,570
go through forums i would actually go

00:48:33,490 --> 00:48:39,580
into source code at times and to see how

00:48:37,570 --> 00:48:41,620
to do certain things we not think of us

00:48:39,580 --> 00:48:43,360
I was sending up to get step some of the

00:48:41,620 --> 00:48:45,520
stuff i needed to do wasn't immediately

00:48:43,360 --> 00:48:47,380
apparent with the credentials and some

00:48:45,520 --> 00:48:49,900
of the things and i was able to dig in

00:48:47,380 --> 00:48:51,310
to see how things were set up to see how

00:48:49,900 --> 00:48:54,520
to do it and that's kind of the nature

00:48:51,310 --> 00:48:55,810
of getting into emerging technology you

00:48:54,520 --> 00:48:57,250
probably don't have to do that now

00:48:55,810 --> 00:48:58,980
because things have advanced with the

00:48:57,250 --> 00:49:01,390
workflow plug and i think i started

00:48:58,980 --> 00:49:03,310
trying some things back in december with

00:49:01,390 --> 00:49:05,650
this when it was really wet behind the

00:49:03,310 --> 00:49:08,020
ears and there's still some areas as it

00:49:05,650 --> 00:49:10,480
evolves it will still be newer that you

00:49:08,020 --> 00:49:13,840
have to dig in a little bit it's

00:49:10,480 --> 00:49:16,090
definitely worth the effort though any

00:49:13,840 --> 00:49:17,620
questions certainly i'm available

00:49:16,090 --> 00:49:21,460
afterwards you're going to come up and

00:49:17,620 --> 00:49:22,840
chat some give it a try give it to

00:49:21,460 --> 00:49:25,180
trying something on the small scale you

00:49:22,840 --> 00:49:27,190
don't have to use the parallel workflow

00:49:25,180 --> 00:49:29,350
plugin gives you the ability to actually

00:49:27,190 --> 00:49:31,690
pull the workflow script out of source

00:49:29,350 --> 00:49:33,610
control now it's great to be able to

00:49:31,690 --> 00:49:37,210
version some of these processes as

00:49:33,610 --> 00:49:40,360
definitely a big plus for it learning

00:49:37,210 --> 00:49:42,370
groovy go ahead yeah so the question was

00:49:40,360 --> 00:49:43,510
on how do i track metrics between the

00:49:42,370 --> 00:49:45,870
different builds and this is

00:49:43,510 --> 00:49:48,310
specifically around the workflow builds

00:49:45,870 --> 00:49:49,690
it's a good question and for me at this

00:49:48,310 --> 00:49:51,880
point it's been more trial and error

00:49:49,690 --> 00:49:55,240
than having an official tracking thing

00:49:51,880 --> 00:49:56,920
and so against some of the things that

00:49:55,240 --> 00:49:58,360
i'll do is make sure from a cloud and

00:49:56,920 --> 00:49:59,420
point of view i'm seeing the recipes i

00:49:58,360 --> 00:50:01,430
should be seen

00:49:59,420 --> 00:50:02,569
from the time trendy point of view I'll

00:50:01,430 --> 00:50:04,190
make sure it's trending in the right

00:50:02,569 --> 00:50:05,780
direction if things are starting to slow

00:50:04,190 --> 00:50:14,059
down then and know that something needs

00:50:05,780 --> 00:50:16,210
to be looked at all right thank you

00:50:14,059 --> 00:50:16,210
everybody

00:50:26,530 --> 00:50:28,590

YouTube URL: https://www.youtube.com/watch?v=d_8eYMukvAg


