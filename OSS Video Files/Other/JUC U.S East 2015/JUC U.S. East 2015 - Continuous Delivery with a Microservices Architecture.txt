Title: JUC U.S. East 2015 - Continuous Delivery with a Microservices Architecture
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Michael Pigg, Chariot Solutions 

This talk will focus on how to set up a continuous delivery (CD) pipeline in Jenkins for an application with a microservices architecture. Michael will talk briefly about what it means to deliver multiple cooperating but independent services and some of the challenges this presents. He will demonstrate the Delivery Pipeline plugin to organize and visualize the pipeline. Also discussed will be how other plugins, such as the Cloudbees Jenkins Enterprise Templates plugin can be useful in this environment.
Captions: 
	00:00:15,120 --> 00:00:21,270
thank you for coming my name is Michael

00:00:17,640 --> 00:00:23,599
pig I want to tell you this might talk

00:00:21,270 --> 00:00:26,930
to you this morning a little bit about

00:00:23,599 --> 00:00:30,200
implementing continuous delivery on

00:00:26,930 --> 00:00:34,610
Jenkins with a application that's

00:00:30,200 --> 00:00:36,420
architected with microservices style

00:00:34,610 --> 00:00:38,460
first of all I want to give you a little

00:00:36,420 --> 00:00:41,040
background about where I'm coming from I

00:00:38,460 --> 00:00:44,550
work for a consulting company called

00:00:41,040 --> 00:00:47,010
chariot solutions and my focus right now

00:00:44,550 --> 00:00:50,550
mainly is on helping clients learn new

00:00:47,010 --> 00:00:54,690
technologies like Scala or angularjs but

00:00:50,550 --> 00:00:58,350
I also help clients you know solve

00:00:54,690 --> 00:01:00,659
problems that they have and I had an

00:00:58,350 --> 00:01:05,040
opportunity to implement a continuous

00:01:00,659 --> 00:01:08,520
delivery pipeline for a client and so

00:01:05,040 --> 00:01:12,330
this this talk is my experience is that

00:01:08,520 --> 00:01:19,590
you know what I learned from doing that

00:01:12,330 --> 00:01:21,690
implementation so I think we're all

00:01:19,590 --> 00:01:23,550
everybody here is interested in doing

00:01:21,690 --> 00:01:26,850
continuous delivery probably or is

00:01:23,550 --> 00:01:28,290
already doing it and we might have

00:01:26,850 --> 00:01:31,590
slightly different definitions about

00:01:28,290 --> 00:01:33,990
what continuous delivery means but a

00:01:31,590 --> 00:01:36,120
couple of things that stood out to me

00:01:33,990 --> 00:01:37,950
when I was learning about and and

00:01:36,120 --> 00:01:41,280
working on implementing continuous

00:01:37,950 --> 00:01:46,430
delivery was that this gives you the

00:01:41,280 --> 00:01:48,810
ability to release software anytime and

00:01:46,430 --> 00:01:51,330
at least the way that I'm approaching

00:01:48,810 --> 00:01:53,550
continuous delivery that any build that

00:01:51,330 --> 00:01:57,150
we do could potentially be a really

00:01:53,550 --> 00:02:01,140
spilled and so this has some impacts in

00:01:57,150 --> 00:02:05,220
how we set up our continuous delivery

00:02:01,140 --> 00:02:06,960
pipeline primarily one of the impacts is

00:02:05,220 --> 00:02:10,649
around versioning how do we version the

00:02:06,960 --> 00:02:16,590
software and so will see that a little

00:02:10,649 --> 00:02:18,900
bit later in the talk also this concept

00:02:16,590 --> 00:02:23,670
that we want to build the artifacts once

00:02:18,900 --> 00:02:26,069
and then deploy them as we need so again

00:02:23,670 --> 00:02:27,770
any build could is going to produce

00:02:26,069 --> 00:02:29,390
artifacts it could end up

00:02:27,770 --> 00:02:33,050
artifacts they get deployed to

00:02:29,390 --> 00:02:37,340
production and usually we think of a

00:02:33,050 --> 00:02:40,670
delivery pipeline in sorry continuous

00:02:37,340 --> 00:02:43,670
delivery in terms of a pipeline and so

00:02:40,670 --> 00:02:45,380
that pipeline encompasses all the steps

00:02:43,670 --> 00:02:50,990
that are required to get the software

00:02:45,380 --> 00:02:53,630
into production so for my purposes it

00:02:50,990 --> 00:02:57,260
starts with a change committed into SCM

00:02:53,630 --> 00:03:00,350
and then ends with a bill deployed to

00:02:57,260 --> 00:03:02,720
production if all goes well it could a

00:03:00,350 --> 00:03:05,210
particular pipeline could in earlier

00:03:02,720 --> 00:03:07,340
than that if it doesn't you know if it

00:03:05,210 --> 00:03:09,520
doesn't pass all of the quality criteria

00:03:07,340 --> 00:03:14,060
to make it all the way into production

00:03:09,520 --> 00:03:17,590
and for the purposes of this talk I'm

00:03:14,060 --> 00:03:19,990
going to think of my pipeline as a

00:03:17,590 --> 00:03:22,490
starting with a commit made on whatever

00:03:19,990 --> 00:03:26,300
development branch is so maybe the

00:03:22,490 --> 00:03:29,360
master branch Jenkins is going to build

00:03:26,300 --> 00:03:31,640
the project and run tests and package

00:03:29,360 --> 00:03:35,120
the artifacts store them off for

00:03:31,640 --> 00:03:37,310
deployment somewhere then we'll do a

00:03:35,120 --> 00:03:40,130
deploy to a test environment and a

00:03:37,310 --> 00:03:41,630
deploy to a production environment so

00:03:40,130 --> 00:03:44,650
obviously this is quite a bit simplified

00:03:41,630 --> 00:03:49,459
from what you might do in the real world

00:03:44,650 --> 00:03:55,040
but I think the the concepts are still

00:03:49,459 --> 00:03:58,370
applicable now so continuous delivery is

00:03:55,040 --> 00:04:00,770
is a great approach what happens when we

00:03:58,370 --> 00:04:05,450
layer on top of that microservices

00:04:00,770 --> 00:04:07,520
architecture so it's pretty popular in

00:04:05,450 --> 00:04:11,450
the development community right now to

00:04:07,520 --> 00:04:17,049
be developing applications as a micro

00:04:11,450 --> 00:04:20,299
services architecture the key things

00:04:17,049 --> 00:04:21,830
about that as opposed to developing an

00:04:20,299 --> 00:04:26,020
application where all of the services

00:04:21,830 --> 00:04:30,650
are contained in one monolithic

00:04:26,020 --> 00:04:32,330
application that you deploy we're going

00:04:30,650 --> 00:04:34,760
to instead in the micro services

00:04:32,330 --> 00:04:38,150
architecture build our application as a

00:04:34,760 --> 00:04:40,050
set of collaborating services that will

00:04:38,150 --> 00:04:43,289
deliver the overall application

00:04:40,050 --> 00:04:47,669
functionality often this is modeled

00:04:43,289 --> 00:04:49,590
around business concepts and the the

00:04:47,669 --> 00:04:52,169
really key thing is that it gives us the

00:04:49,590 --> 00:04:55,039
ability to deploy and scale different

00:04:52,169 --> 00:04:56,729
parts of the application as are

00:04:55,039 --> 00:04:58,740
appropriate to that part of the

00:04:56,729 --> 00:05:00,629
application so a part that can be

00:04:58,740 --> 00:05:03,090
serviced by being deployed to one server

00:05:00,629 --> 00:05:05,460
can be deployed that way a part that can

00:05:03,090 --> 00:05:09,479
be serviced or that requires you know

00:05:05,460 --> 00:05:13,080
maybe 10 servers to handle its load can

00:05:09,479 --> 00:05:14,729
be deployed appropriately but when we

00:05:13,080 --> 00:05:17,340
combine these two things together the

00:05:14,729 --> 00:05:18,900
continuous delivery and the micro

00:05:17,340 --> 00:05:21,000
services architecture we end up with

00:05:18,900 --> 00:05:24,479
more of everything in in the Jenkins

00:05:21,000 --> 00:05:27,569
world more code repositories we

00:05:24,479 --> 00:05:30,270
typically have a separate code you know

00:05:27,569 --> 00:05:33,659
SCM repository for each of the micro

00:05:30,270 --> 00:05:37,379
services of course more builds more

00:05:33,659 --> 00:05:41,810
deployments that need to be done and so

00:05:37,379 --> 00:05:48,659
we need to have some tools that help us

00:05:41,810 --> 00:05:50,940
deal with this explosion of jobs and so

00:05:48,659 --> 00:05:53,759
the way that I'm going to talk about

00:05:50,940 --> 00:05:57,360
doing it today in Jenkins is with the

00:05:53,759 --> 00:06:00,870
delivery pipeline plug-in that that's

00:05:57,360 --> 00:06:04,169
the one of the main plugins that i'll

00:06:00,870 --> 00:06:06,620
use the cloud-based template plug-in as

00:06:04,169 --> 00:06:11,849
well as the build pipeline plugin and

00:06:06,620 --> 00:06:16,169
cloudbees folders plugin so the delivery

00:06:11,849 --> 00:06:19,460
pipeline plugin in jenkins models of

00:06:16,169 --> 00:06:23,580
pipeline as a series of jenkins jobs and

00:06:19,460 --> 00:06:25,830
the pipeline starts with some job that

00:06:23,580 --> 00:06:28,949
you designate as the initial job in the

00:06:25,830 --> 00:06:32,430
pipeline and then you connect these

00:06:28,949 --> 00:06:34,699
together the remaining parts of the

00:06:32,430 --> 00:06:36,810
pipeline are composed of jobs that are

00:06:34,699 --> 00:06:39,990
connected together through their

00:06:36,810 --> 00:06:41,940
upstream or downstream dependencies and

00:06:39,990 --> 00:06:43,889
the key thing about the delivery

00:06:41,940 --> 00:06:45,719
pipeline plug-in or one of the key

00:06:43,889 --> 00:06:48,349
things about it is that it provides a

00:06:45,719 --> 00:06:52,139
nice visualization of the pipeline so

00:06:48,349 --> 00:06:53,340
you know jobs that might appear

00:06:52,139 --> 00:06:55,290
unrelated we can

00:06:53,340 --> 00:06:57,449
get a nice visualization of their

00:06:55,290 --> 00:07:02,540
relationships and our role in the

00:06:57,449 --> 00:07:10,020
pipeline the delivery pipeline plugin

00:07:02,540 --> 00:07:11,940
represents organizes jobs with labels

00:07:10,020 --> 00:07:14,610
that you assigned to each job so you

00:07:11,940 --> 00:07:18,900
assign a stage label and a task label

00:07:14,610 --> 00:07:24,510
where the stage acts as a container for

00:07:18,900 --> 00:07:29,970
one or more tasks and then you connect

00:07:24,510 --> 00:07:32,790
jobs together again with either with

00:07:29,970 --> 00:07:34,950
some sort of dependency and so for a job

00:07:32,790 --> 00:07:37,169
that you want to run automatically on

00:07:34,950 --> 00:07:40,380
the completion of another job you could

00:07:37,169 --> 00:07:44,280
use the build other projects in the post

00:07:40,380 --> 00:07:47,669
build actions or for a job that you want

00:07:44,280 --> 00:07:51,750
to do manually you know you want to go

00:07:47,669 --> 00:07:53,910
in and execute it yourself you would use

00:07:51,750 --> 00:07:56,789
the build other projects manual step

00:07:53,910 --> 00:08:04,550
which is provided by the build pipeline

00:07:56,789 --> 00:08:09,660
plugin so I want to take these tools and

00:08:04,550 --> 00:08:11,669
create a actual deployment pipeline and

00:08:09,660 --> 00:08:13,919
I'm going to imagine that i'm working

00:08:11,669 --> 00:08:17,010
for bored sore calm which is a purveyor

00:08:13,919 --> 00:08:19,139
of fine keyboards and i need to deploy

00:08:17,010 --> 00:08:21,150
need to build and deploy the first two

00:08:19,139 --> 00:08:27,500
services the catalog service and the

00:08:21,150 --> 00:08:29,630
order service so this company's

00:08:27,500 --> 00:08:32,760
microservices the code is in github

00:08:29,630 --> 00:08:35,370
they're actually the code is actually a

00:08:32,760 --> 00:08:39,570
play framework application written in

00:08:35,370 --> 00:08:42,150
Scala built with SBT if you're not

00:08:39,570 --> 00:08:44,670
familiar with the scala world SBT is

00:08:42,150 --> 00:08:48,839
kind of equivalent to roughly equivalent

00:08:44,670 --> 00:08:56,010
to maven in the in the Java world and

00:08:48,839 --> 00:08:58,920
then deploy this to AWS so my goal is

00:08:56,010 --> 00:09:00,020
that when a change happens in github

00:08:58,920 --> 00:09:02,850
that

00:09:00,020 --> 00:09:04,590
it's going to be noticed in Jenkins it's

00:09:02,850 --> 00:09:08,070
going to we're going to have a pipeline

00:09:04,590 --> 00:09:10,920
of connected jobs the first one is going

00:09:08,070 --> 00:09:14,010
to do the build test package the next

00:09:10,920 --> 00:09:16,920
one is a manual job that deploys to a

00:09:14,010 --> 00:09:18,690
test environment and then another manual

00:09:16,920 --> 00:09:21,480
job that deploys to a production

00:09:18,690 --> 00:09:25,020
environment so i'll start by creating a

00:09:21,480 --> 00:09:27,510
build job this is a good time to think

00:09:25,020 --> 00:09:29,970
about naming conventions this was

00:09:27,510 --> 00:09:34,830
mentioned yesterday in the Jenkins 101

00:09:29,970 --> 00:09:36,720
talk and I think it's all emphasizes as

00:09:34,830 --> 00:09:39,240
well that it's a good idea to have some

00:09:36,720 --> 00:09:44,100
naming conventions around your jobs and

00:09:39,240 --> 00:09:46,560
so my naming convention is going to be

00:09:44,100 --> 00:09:49,920
that all my jobs start with the word kv

00:09:46,560 --> 00:09:51,750
store and then a dash and whatever the

00:09:49,920 --> 00:09:55,200
service is that we're dealing with and

00:09:51,750 --> 00:09:59,040
then another dash and the the type of

00:09:55,200 --> 00:10:01,440
the job so here I'm creating a kb store

00:09:59,040 --> 00:10:07,560
catalog build which is a freestyle

00:10:01,440 --> 00:10:09,600
project I need to configure the delivery

00:10:07,560 --> 00:10:11,670
pipeline label so I'll check the

00:10:09,600 --> 00:10:15,450
delivery pipeline configuration option

00:10:11,670 --> 00:10:18,600
and give a stage name of build and a

00:10:15,450 --> 00:10:21,060
test sorry task name of compile and that

00:10:18,600 --> 00:10:24,560
ends up looking like what you see below

00:10:21,060 --> 00:10:27,570
in the UI you get this nice container

00:10:24,560 --> 00:10:32,460
for build and then there can be multiple

00:10:27,570 --> 00:10:38,120
tasks inside of it based on the task 9

00:10:32,460 --> 00:10:42,930
and so this you know this illustrates

00:10:38,120 --> 00:10:46,410
also the how the task the actual job

00:10:42,930 --> 00:10:48,990
appears in the UI you get this is a job

00:10:46,410 --> 00:10:50,930
that's completed successfully and so

00:10:48,990 --> 00:10:56,070
it's green and it gives you some of the

00:10:50,930 --> 00:10:58,380
timing information one of the things

00:10:56,070 --> 00:11:02,100
that I really had to come to grips with

00:10:58,380 --> 00:11:04,410
when I decided to when I wanted to do

00:11:02,100 --> 00:11:06,780
continuous delivery was how do you

00:11:04,410 --> 00:11:10,350
version the artifacts that you're

00:11:06,780 --> 00:11:13,329
creating I have a background in the

00:11:10,350 --> 00:11:18,189
Maven Java world I was used to the idea

00:11:13,329 --> 00:11:20,799
and maven where you as you're doing

00:11:18,189 --> 00:11:22,749
development you have some version with

00:11:20,799 --> 00:11:25,629
dash snapshot at the end of it and that

00:11:22,749 --> 00:11:27,730
snapshot label stays there through

00:11:25,629 --> 00:11:29,470
multiple builds until you're ready to do

00:11:27,730 --> 00:11:31,420
a release and then you strip off the

00:11:29,470 --> 00:11:34,269
snapshot label do your release and

00:11:31,420 --> 00:11:37,959
increment the version to a new snapshot

00:11:34,269 --> 00:11:42,189
version but that's kind of antithetical

00:11:37,959 --> 00:11:46,629
to the idea of any build could

00:11:42,189 --> 00:11:48,399
potentially be a release build so my

00:11:46,629 --> 00:11:55,110
solution to it is get rid of the

00:11:48,399 --> 00:11:59,199
snapshot every build is a real build and

00:11:55,110 --> 00:12:01,449
one of the ways that I can take

00:11:59,199 --> 00:12:04,420
advantage of that idea in my build

00:12:01,449 --> 00:12:09,309
pipeline is to have a delivery pipeline

00:12:04,420 --> 00:12:14,559
version created when that first build in

00:12:09,309 --> 00:12:20,399
the pipeline runs so I'm going to

00:12:14,559 --> 00:12:23,100
configure going to tell the till the in

00:12:20,399 --> 00:12:25,449
in this first job I'm going to have the

00:12:23,100 --> 00:12:28,029
delivery pipeline version option

00:12:25,449 --> 00:12:30,489
selected and I could put in a template

00:12:28,029 --> 00:12:34,269
they're here i'm making my temple at one

00:12:30,489 --> 00:12:38,679
point o dot build number so I'm taking

00:12:34,269 --> 00:12:41,049
the build number from the Jenkins you

00:12:38,679 --> 00:12:44,910
know job execution and making it part of

00:12:41,049 --> 00:12:44,910
my version number for my software

00:12:44,939 --> 00:12:50,100
checking the set build display name

00:12:47,439 --> 00:12:52,689
option then we'll also change the

00:12:50,100 --> 00:12:55,809
appearance in the build history so that

00:12:52,689 --> 00:12:58,569
instead of just saying 20 19 18 it says

00:12:55,809 --> 00:13:02,350
one point no point 20 so I get a closer

00:12:58,569 --> 00:13:04,569
correlation to between what I see in

00:13:02,350 --> 00:13:10,749
Jenkins and what my software version is

00:13:04,569 --> 00:13:14,559
also the generated version is exposed in

00:13:10,749 --> 00:13:16,660
a pipeline version environment variable

00:13:14,559 --> 00:13:18,429
in its passed as a parameter to all of

00:13:16,660 --> 00:13:23,019
the downstream jobs that we connect

00:13:18,429 --> 00:13:24,400
together so those jobs can work on the

00:13:23,019 --> 00:13:29,190
right version of the

00:13:24,400 --> 00:13:29,190
software that we built in the first job

00:13:30,270 --> 00:13:37,690
so one of the nice things about SBT is

00:13:34,300 --> 00:13:41,170
that anything any property that you said

00:13:37,690 --> 00:13:46,180
in the build definition can be generated

00:13:41,170 --> 00:13:48,640
with code and so this piece of code I

00:13:46,180 --> 00:13:50,890
have on the screen is how I set the

00:13:48,640 --> 00:13:53,740
version number in my bill definition

00:13:50,890 --> 00:13:56,740
file again I have a hard coat at one

00:13:53,740 --> 00:13:58,420
point oh here and then if there is a

00:13:56,740 --> 00:14:00,850
build number environment variable

00:13:58,420 --> 00:14:04,960
present i append that on to the end of

00:14:00,850 --> 00:14:09,640
the version so i might get one point 0

00:14:04,960 --> 00:14:12,820
dot twenty or one point 0 dot 19 or if

00:14:09,640 --> 00:14:15,070
it's not present then it just is an

00:14:12,820 --> 00:14:17,530
empty string so it's just one point 0 so

00:14:15,070 --> 00:14:20,200
on it like on a development machine it

00:14:17,530 --> 00:14:23,170
would be 1 point 0 on jenkins it will

00:14:20,200 --> 00:14:28,300
have a micro number corresponding to the

00:14:23,170 --> 00:14:31,120
actual build my understanding is that

00:14:28,300 --> 00:14:34,510
maven can do this sort of thing now as

00:14:31,120 --> 00:14:37,150
well but I haven't worked with a recent

00:14:34,510 --> 00:14:40,600
enough version to know for sure of

00:14:37,150 --> 00:14:44,380
course I want to configure SCM I like to

00:14:40,600 --> 00:14:48,640
set my ref spec to pull exactly the

00:14:44,380 --> 00:14:53,860
branch that I want and that'll come up a

00:14:48,640 --> 00:14:57,340
little bit later I'll build with the SBT

00:14:53,860 --> 00:15:00,880
builder because this is an SVT project I

00:14:57,340 --> 00:15:03,640
set all of my flags and then my last

00:15:00,880 --> 00:15:07,150
action that I have in here dr. Cullen

00:15:03,640 --> 00:15:11,440
stage is a something that's provided by

00:15:07,150 --> 00:15:14,740
SVT's an SVT plugin called SBT native

00:15:11,440 --> 00:15:18,640
packager and the result I get from this

00:15:14,740 --> 00:15:21,040
is a file or a directory that contains a

00:15:18,640 --> 00:15:25,870
generated docker file in the root and

00:15:21,040 --> 00:15:28,600
then a acht folder that contains some

00:15:25,870 --> 00:15:30,960
scripts for launching my application and

00:15:28,600 --> 00:15:35,890
all of the jar files that I need for

00:15:30,960 --> 00:15:37,690
running the application so there's a the

00:15:35,890 --> 00:15:40,480
first jar file in the list there

00:15:37,690 --> 00:15:42,340
my actual code that I wrote and then all

00:15:40,480 --> 00:15:47,790
the other jar files are the dependencies

00:15:42,340 --> 00:15:50,260
that I need to run this application and

00:15:47,790 --> 00:15:53,140
because I'm deploying to elastic

00:15:50,260 --> 00:15:55,750
Beanstalk I can just zip this up as a

00:15:53,140 --> 00:16:00,390
zip file that directory that I had on

00:15:55,750 --> 00:16:03,400
the previous screen and send that up to

00:16:00,390 --> 00:16:07,570
elastic Beanstalk and it will unpack it

00:16:03,400 --> 00:16:09,550
and run a docker image for me so my

00:16:07,570 --> 00:16:12,790
second step in the build process is just

00:16:09,550 --> 00:16:15,930
zip it up but here you can see I'm

00:16:12,790 --> 00:16:20,320
taking advantage of the pipeline version

00:16:15,930 --> 00:16:25,800
environment variable to include that as

00:16:20,320 --> 00:16:25,800
part of the as part of the artifact name

00:16:26,070 --> 00:16:32,770
so the build will produce both jar files

00:16:29,950 --> 00:16:36,070
which I could upload to ben tre or Nexus

00:16:32,770 --> 00:16:38,830
or artifactory and zip files which are

00:16:36,070 --> 00:16:40,690
my deployment artifacts which i might

00:16:38,830 --> 00:16:45,520
upload to an s3 bucket that's what I'm

00:16:40,690 --> 00:16:48,220
actually going to do you might also you

00:16:45,520 --> 00:16:50,740
know upload those to your ben tre or

00:16:48,220 --> 00:16:53,710
whatever you're putting the jars in as

00:16:50,740 --> 00:16:57,940
well and I could use the s3 publisher

00:16:53,710 --> 00:17:00,340
for that and then the next important

00:16:57,940 --> 00:17:04,209
step is to connect to the next job in

00:17:00,340 --> 00:17:07,089
the pipeline and so my next step is to

00:17:04,209 --> 00:17:09,400
release to a test environment I'm going

00:17:07,089 --> 00:17:12,670
to make this a manual step I have to go

00:17:09,400 --> 00:17:14,319
in and execute it and so in the post

00:17:12,670 --> 00:17:17,530
build actions i'll put in build other

00:17:14,319 --> 00:17:23,439
projects manual step and name the

00:17:17,530 --> 00:17:26,860
project that kb store catalog deploy int

00:17:23,439 --> 00:17:29,740
which is my deploy to integration job

00:17:26,860 --> 00:17:32,050
and when I have this all set up you're

00:17:29,740 --> 00:17:37,510
going to see a connection between the

00:17:32,050 --> 00:17:40,110
build and the integration in the UI and

00:17:37,510 --> 00:17:43,720
because it's a manual step you'll see a

00:17:40,110 --> 00:17:45,330
little play button in the right hand

00:17:43,720 --> 00:17:48,610
side of the

00:17:45,330 --> 00:17:52,270
job which I can click on to actually

00:17:48,610 --> 00:17:58,360
execute that um so I need to create a

00:17:52,270 --> 00:18:00,610
defying that job because you know to be

00:17:58,360 --> 00:18:05,130
the downstream job so I'm going to

00:18:00,610 --> 00:18:05,130
create a new item called kb store

00:18:05,580 --> 00:18:12,550
catalog deploy in this sorry this slide

00:18:10,210 --> 00:18:14,290
is this image is not quite right this

00:18:12,550 --> 00:18:16,990
shouldn't be a job template at this

00:18:14,290 --> 00:18:20,890
point it should be a on a freestyle

00:18:16,990 --> 00:18:23,470
project define my delivery pipeline

00:18:20,890 --> 00:18:27,100
configuration stage name of integration

00:18:23,470 --> 00:18:28,960
test name of deploy again use the

00:18:27,100 --> 00:18:31,660
pipeline version because this was passed

00:18:28,960 --> 00:18:36,190
as a parameter from the first job into

00:18:31,660 --> 00:18:38,110
this job to retrieve the appropriate

00:18:36,190 --> 00:18:43,030
artifact or to use the appropriate

00:18:38,110 --> 00:18:45,490
artifact name in my calls to AWS to

00:18:43,030 --> 00:18:54,460
create an application version and to

00:18:45,490 --> 00:18:57,220
update the environment and perhaps in

00:18:54,460 --> 00:19:00,220
when I've done a deployment to my test

00:18:57,220 --> 00:19:03,760
environment I'd like to trigger a load

00:19:00,220 --> 00:19:05,920
test and if I want that to run

00:19:03,760 --> 00:19:08,530
automatically after the deployment I

00:19:05,920 --> 00:19:12,970
could put in the post build actions a

00:19:08,530 --> 00:19:19,330
build other projects action which names

00:19:12,970 --> 00:19:22,150
the load test project and I also again

00:19:19,330 --> 00:19:25,240
need to connect to my next pipeline job

00:19:22,150 --> 00:19:29,289
which means putting again I'm going to

00:19:25,240 --> 00:19:33,559
have a manual step so

00:19:29,289 --> 00:19:36,440
in the post build actions I'll name a

00:19:33,559 --> 00:19:41,090
manual step that calls the deploy to

00:19:36,440 --> 00:19:43,429
production job and so at the end of all

00:19:41,090 --> 00:19:47,720
of this we should have this set of four

00:19:43,429 --> 00:19:55,610
jogs a bill job to deploy jobs and a you

00:19:47,720 --> 00:19:57,890
know load test job but there's no clear

00:19:55,610 --> 00:19:59,860
relationship between these jobs just

00:19:57,890 --> 00:20:06,679
looking at them in the default list view

00:19:59,860 --> 00:20:09,260
so now let's create a pipeline view so

00:20:06,679 --> 00:20:13,640
we would go up on the view click on the

00:20:09,260 --> 00:20:16,100
plus icon and give it a name like

00:20:13,640 --> 00:20:20,630
catalog pipeline make sure to select

00:20:16,100 --> 00:20:21,890
delivery pipeline view there are some

00:20:20,630 --> 00:20:24,470
settings that you can set on the

00:20:21,890 --> 00:20:28,250
delivery pipeline so number of pipeline

00:20:24,470 --> 00:20:30,710
instances / pipeline right now I have

00:20:28,250 --> 00:20:33,230
that set to 5 so that would show me the

00:20:30,710 --> 00:20:37,360
five most recent runs of that pipeline

00:20:33,230 --> 00:20:41,179
essentially the five most recent builds

00:20:37,360 --> 00:20:44,630
and then down at the bottom the enable

00:20:41,179 --> 00:20:46,100
manual triggers should be checked or I

00:20:44,630 --> 00:20:48,919
like to check that so that I get the

00:20:46,100 --> 00:20:54,590
little play button in the pipeline UI

00:20:48,919 --> 00:20:58,159
and enable rebuild is a recent addition

00:20:54,590 --> 00:21:02,090
which is very nice it gives you a you

00:20:58,159 --> 00:21:04,130
know after a task has run and turns

00:21:02,090 --> 00:21:06,740
green it gives you a little refresh

00:21:04,130 --> 00:21:09,350
button that you can click on to run that

00:21:06,740 --> 00:21:15,980
task again if for some reason you need

00:21:09,350 --> 00:21:20,120
to and then the last thing in the view

00:21:15,980 --> 00:21:23,690
is to add some components what with the

00:21:20,120 --> 00:21:25,520
delivery pipeline cost components so I'm

00:21:23,690 --> 00:21:28,429
going to add a component called catalog

00:21:25,520 --> 00:21:30,620
and set its initial job to the build job

00:21:28,429 --> 00:21:34,429
that I just created kb store catalog

00:21:30,620 --> 00:21:37,279
build and the result i get after

00:21:34,429 --> 00:21:39,620
creating that view will look like this

00:21:37,279 --> 00:21:41,350
we have this nice connection now this

00:21:39,620 --> 00:21:45,820
nice visualization between

00:21:41,350 --> 00:21:49,539
jobs and you can see on these tests here

00:21:45,820 --> 00:21:51,580
that have run already that's that thing

00:21:49,539 --> 00:21:53,590
on the right hand side is the refresh

00:21:51,580 --> 00:21:58,600
button that lets you execute the task

00:21:53,590 --> 00:22:00,760
again you and so you can see the the

00:21:58,600 --> 00:22:04,539
most recent execution the one point 0

00:22:00,760 --> 00:22:09,309
point 19 is up at the top and then 1

00:22:04,539 --> 00:22:12,880
point 0 point 18 is below that and that

00:22:09,309 --> 00:22:14,080
that one point open 18 was a instance

00:22:12,880 --> 00:22:17,590
that didn't make it all the way to

00:22:14,080 --> 00:22:19,780
production it got to pulley to the test

00:22:17,590 --> 00:22:25,080
environment but for whatever reason we

00:22:19,780 --> 00:22:28,630
decided not to continue with it and so

00:22:25,080 --> 00:22:32,429
that deploy to prod is it's not showing

00:22:28,630 --> 00:22:32,429
green it's not even been executed

00:22:33,179 --> 00:22:41,950
whereas the one point no point 19 was

00:22:36,220 --> 00:22:43,840
completed all the way across now if you

00:22:41,950 --> 00:22:47,409
recall we needed to add an order service

00:22:43,840 --> 00:22:49,299
in our scenario so oh boy we have to do

00:22:47,409 --> 00:22:50,830
that again I mean it didn't take very

00:22:49,299 --> 00:22:53,940
long for me to go through their slides

00:22:50,830 --> 00:22:57,340
but it actually took longer than that to

00:22:53,940 --> 00:22:59,409
figure out that configuration and more

00:22:57,340 --> 00:23:01,990
importantly what happens when we decide

00:22:59,409 --> 00:23:04,799
we need to change the build and that

00:23:01,990 --> 00:23:07,630
change should apply to all the projects

00:23:04,799 --> 00:23:10,150
and that's not too bad when you have

00:23:07,630 --> 00:23:13,809
like two projects but what happens we

00:23:10,150 --> 00:23:17,440
have 20 projects to deal with gets to be

00:23:13,809 --> 00:23:21,600
a real bear and so that's where the

00:23:17,440 --> 00:23:21,600
template plugin comes in very handy

00:23:21,750 --> 00:23:27,070
we're going to build another pipeline

00:23:23,770 --> 00:23:30,190
for or for order which is virtually the

00:23:27,070 --> 00:23:34,570
same as the previous one so things like

00:23:30,190 --> 00:23:35,679
the names of the jobs the SCM repository

00:23:34,570 --> 00:23:37,299
that you're going to check out from

00:23:35,679 --> 00:23:39,070
those are the things that change

00:23:37,299 --> 00:23:42,820
everything virtually everything else

00:23:39,070 --> 00:23:45,070
stays the same and so the template

00:23:42,820 --> 00:23:46,809
plug-in captures that sameness while

00:23:45,070 --> 00:23:49,590
letting you customize the parts that

00:23:46,809 --> 00:23:49,590
need customization

00:23:50,600 --> 00:23:57,770
so to create a template we would I'm

00:23:56,179 --> 00:24:00,710
going to create something called kb

00:23:57,770 --> 00:24:05,210
store build template and this should be

00:24:00,710 --> 00:24:07,880
a job template the first step in

00:24:05,210 --> 00:24:11,450
building templates is to have a working

00:24:07,880 --> 00:24:13,850
job available that you want to use as

00:24:11,450 --> 00:24:16,820
your baseline and so we just built kb

00:24:13,850 --> 00:24:20,570
store catalog build and so when you load

00:24:16,820 --> 00:24:25,669
that you'll the config.xml gets loaded

00:24:20,570 --> 00:24:27,830
into the script text area and now our

00:24:25,669 --> 00:24:30,049
job is to go in and write a little bit

00:24:27,830 --> 00:24:35,120
of code in there to customize the parts

00:24:30,049 --> 00:24:38,480
that we want customized so what kinds of

00:24:35,120 --> 00:24:44,659
things can we do we could customize the

00:24:38,480 --> 00:24:48,860
description so what you do in the in the

00:24:44,659 --> 00:24:51,020
template is right groovy code so back

00:24:48,860 --> 00:24:54,140
here on this slide my type is selected

00:24:51,020 --> 00:24:59,090
as groovy type mmm groovy template

00:24:54,140 --> 00:25:01,490
transformation and so I write little

00:24:59,090 --> 00:25:04,039
snippets of groovy code this is very

00:25:01,490 --> 00:25:07,669
much like server-side generation of an

00:25:04,039 --> 00:25:09,799
HTML page I write a little bit a

00:25:07,669 --> 00:25:14,299
template or sorry a little snippet of

00:25:09,799 --> 00:25:16,880
groovy code to slit out my name and get

00:25:14,299 --> 00:25:21,919
the parts based on splitting on the

00:25:16,880 --> 00:25:25,630
dashes and then insert the service name

00:25:21,919 --> 00:25:31,039
service part of it into the description

00:25:25,630 --> 00:25:35,059
more you know so that's nice but more

00:25:31,039 --> 00:25:37,580
relevantly or more usefully I can

00:25:35,059 --> 00:25:40,490
transform the URL that I'm checking out

00:25:37,580 --> 00:25:43,010
my code from assuming that all of my

00:25:40,490 --> 00:25:45,380
code is conforte you know all my

00:25:43,010 --> 00:25:50,630
repositories conform to my naming

00:25:45,380 --> 00:25:56,210
convention and I can transform

00:25:50,630 --> 00:26:00,350
publishers so the pipeline trigger that

00:25:56,210 --> 00:26:01,890
calls the downstream job that sets up my

00:26:00,350 --> 00:26:04,470
relationships for my gowns

00:26:01,890 --> 00:26:09,320
job I can insert the service name in

00:26:04,470 --> 00:26:11,880
here and as long as again my jobs are

00:26:09,320 --> 00:26:15,300
following the naming convention that I

00:26:11,880 --> 00:26:22,260
laid out my template will be able to

00:26:15,300 --> 00:26:25,140
call them you can also set attributes in

00:26:22,260 --> 00:26:26,880
a template so these are things that you

00:26:25,140 --> 00:26:29,970
want to be able to configure when you

00:26:26,880 --> 00:26:31,980
use the template so maybe I want to

00:26:29,970 --> 00:26:34,470
configure what branch this is going to

00:26:31,980 --> 00:26:37,910
build on rather than just hard coding to

00:26:34,470 --> 00:26:40,590
build our master I'll build on a

00:26:37,910 --> 00:26:42,540
configurable branch and so here I'm

00:26:40,590 --> 00:26:49,200
adding an attribute called build branch

00:26:42,540 --> 00:26:52,200
and that ID becomes a variable that I

00:26:49,200 --> 00:26:54,240
can use in the script so now i can

00:26:52,200 --> 00:26:56,400
change my refs back instead of being

00:26:54,240 --> 00:27:02,430
hard coded de master i can insert build

00:26:56,400 --> 00:27:08,550
branch in there and then to use this i

00:27:02,430 --> 00:27:12,870
would create a job here i'm calling it

00:27:08,550 --> 00:27:15,810
kb store order build and select kb store

00:27:12,870 --> 00:27:17,790
build template as the type so that's

00:27:15,810 --> 00:27:21,090
going to once i've created that template

00:27:17,790 --> 00:27:25,220
it's going to show up as a new project

00:27:21,090 --> 00:27:30,140
type in my list of project types and

00:27:25,220 --> 00:27:32,820
again well and specify my attribute so

00:27:30,140 --> 00:27:35,580
here I'm just going to build off of the

00:27:32,820 --> 00:27:38,670
master branch so i type that in the name

00:27:35,580 --> 00:27:41,550
is automatically populated based on the

00:27:38,670 --> 00:27:44,760
name that was specified on the previous

00:27:41,550 --> 00:27:50,580
screen and hit save and we're done and

00:27:44,760 --> 00:27:52,410
that was easy I think you can see that

00:27:50,580 --> 00:27:55,500
if we have to create a bunch of these

00:27:52,410 --> 00:27:58,050
that it's it's getting a lot easier with

00:27:55,500 --> 00:27:59,550
this template plugin i also want to

00:27:58,050 --> 00:28:04,710
create a template for my deploy jobs

00:27:59,550 --> 00:28:06,870
it's going to be very similar s'okay be

00:28:04,710 --> 00:28:12,290
stored deploy template and i'm going to

00:28:06,870 --> 00:28:14,790
use the name to encode a environment and

00:28:12,290 --> 00:28:18,510
then pull out of the

00:28:14,790 --> 00:28:21,540
in my transformation code I could pull

00:28:18,510 --> 00:28:26,700
out that fourth part and assign it to a

00:28:21,540 --> 00:28:31,250
variable called em and then I could use

00:28:26,700 --> 00:28:36,110
that to come up with a display name and

00:28:31,250 --> 00:28:40,170
then use the display name in the in

00:28:36,110 --> 00:28:41,910
configuring the pipeline stage so I know

00:28:40,170 --> 00:28:44,670
that this task is going to be deployed

00:28:41,910 --> 00:28:47,580
but the stage could be integration or it

00:28:44,670 --> 00:28:54,900
could be production or whatever the

00:28:47,580 --> 00:28:57,240
environment i'm targeting is and in my

00:28:54,900 --> 00:28:58,770
transformation because i'm going to use

00:28:57,240 --> 00:29:01,770
the same template for all of my

00:28:58,770 --> 00:29:03,750
deployment jobs i might have some logic

00:29:01,770 --> 00:29:06,000
in here that says if the target

00:29:03,750 --> 00:29:08,340
environment is int then include the

00:29:06,000 --> 00:29:14,640
stuff that connects to the downstream

00:29:08,340 --> 00:29:18,270
jobs otherwise omit that and then to

00:29:14,640 --> 00:29:23,280
create an instance of this I again

00:29:18,270 --> 00:29:26,400
create kb store order deploy int make it

00:29:23,280 --> 00:29:29,190
a kv store deploy template type and I

00:29:26,400 --> 00:29:32,210
should have a pipeline that looks like

00:29:29,190 --> 00:29:32,210
this created

00:29:35,059 --> 00:29:46,470
um so that's that's the template plug-in

00:29:42,559 --> 00:29:48,230
we might want to and in there I'm just

00:29:46,470 --> 00:29:50,909
creating all the jobs in the root

00:29:48,230 --> 00:29:54,600
Jenkins rude the default way of creating

00:29:50,909 --> 00:29:58,019
the jobs we might want to though instead

00:29:54,600 --> 00:30:00,570
of having the environment encoded into

00:29:58,019 --> 00:30:02,940
the job name we might want to have a

00:30:00,570 --> 00:30:05,909
folder that contains the environment and

00:30:02,940 --> 00:30:09,720
contains the jobs they go they are

00:30:05,909 --> 00:30:11,279
relevant to that environment the key

00:30:09,720 --> 00:30:13,679
thing is that folders create a namespace

00:30:11,279 --> 00:30:16,859
and so jobs and different folders can

00:30:13,679 --> 00:30:20,399
have the same name so I could create

00:30:16,859 --> 00:30:23,059
with the folders plug-in I could create

00:30:20,399 --> 00:30:25,830
a folder here i'm calling it invent and

00:30:23,059 --> 00:30:29,100
you can do things like assign

00:30:25,830 --> 00:30:31,919
credentials to that environment or you

00:30:29,100 --> 00:30:34,049
know set some environment variable that

00:30:31,919 --> 00:30:36,419
you're going to use in the deployment

00:30:34,049 --> 00:30:38,940
process that's specific to that

00:30:36,419 --> 00:30:45,929
environment and then I'd end up with

00:30:38,940 --> 00:30:50,100
folders for each of my environments once

00:30:45,929 --> 00:30:52,619
I do that and move my deploy jobs into

00:30:50,100 --> 00:30:54,749
those folders then I need to modify my

00:30:52,619 --> 00:30:57,690
build template so instead of calling the

00:30:54,749 --> 00:31:00,359
downstream job in the root it needs to

00:30:57,690 --> 00:31:05,820
say in vent / and then the name of the

00:31:00,359 --> 00:31:09,239
job I can also you know if I'm going to

00:31:05,820 --> 00:31:12,480
extract the environment information from

00:31:09,239 --> 00:31:15,989
the folder instead of from the job name

00:31:12,480 --> 00:31:21,539
I can do that by using the parent

00:31:15,989 --> 00:31:23,789
attribute in in the job and access the

00:31:21,539 --> 00:31:26,340
display name so the parent is the folder

00:31:23,789 --> 00:31:31,879
that contains the job access the display

00:31:26,340 --> 00:31:36,259
name and do my split on the on the name

00:31:31,879 --> 00:31:40,739
and then adjust my logic accordingly for

00:31:36,259 --> 00:31:43,590
that and so I'll end up with the

00:31:40,739 --> 00:31:47,740
integration has a order deploy and the

00:31:43,590 --> 00:31:52,900
prod has an order deploy um

00:31:47,740 --> 00:31:57,730
and so the fact that I can do that it

00:31:52,900 --> 00:31:59,170
could be handy I think when you have

00:31:57,730 --> 00:32:01,090
more than you know I'm just talking

00:31:59,170 --> 00:32:04,500
about a fixed set of environments here

00:32:01,090 --> 00:32:07,150
but when I want to add additional

00:32:04,500 --> 00:32:12,270
environments maybe I want to add them on

00:32:07,150 --> 00:32:14,410
the fly being able to script it and

00:32:12,270 --> 00:32:17,470
being able to create a folder which

00:32:14,410 --> 00:32:20,350
contains the same you know where that

00:32:17,470 --> 00:32:26,770
each folder contains the same set of

00:32:20,350 --> 00:32:29,400
jobs becomes useful and so you can

00:32:26,770 --> 00:32:33,429
script the creation of folders or

00:32:29,400 --> 00:32:38,230
instances of a template by calling the

00:32:33,429 --> 00:32:43,150
REST API you can also use the scripting

00:32:38,230 --> 00:32:45,580
to you know just to create however many

00:32:43,150 --> 00:32:49,720
pipelines you need to create or to be

00:32:45,580 --> 00:32:51,850
able to recreate your configuration so

00:32:49,720 --> 00:32:56,220
though you do that by calling the

00:32:51,850 --> 00:32:59,410
instantiate URL so you use the URL of

00:32:56,220 --> 00:33:04,390
the template kb store deploy template in

00:32:59,410 --> 00:33:08,500
this case / instantiate pass a name in

00:33:04,390 --> 00:33:11,470
the job parameter and then a xml

00:33:08,500 --> 00:33:13,420
document that gives a value for each of

00:33:11,470 --> 00:33:19,150
the attributes that you've defined in

00:33:13,420 --> 00:33:24,000
the template so i think this is a pretty

00:33:19,150 --> 00:33:27,990
good setup it worked well for the

00:33:24,000 --> 00:33:34,330
situation that that i was working in

00:33:27,990 --> 00:33:36,610
there are a few issues one is that you

00:33:34,330 --> 00:33:40,000
know one of the things I'd like to be

00:33:36,610 --> 00:33:43,690
able to see is the through my pipeline

00:33:40,000 --> 00:33:47,620
is to see where what was most recently

00:33:43,690 --> 00:33:51,460
deployed to each environment and I could

00:33:47,620 --> 00:33:55,030
I could see that right I could see what

00:33:51,460 --> 00:33:57,190
you know when the production deploy

00:33:55,030 --> 00:33:59,580
turns green so that gives me some

00:33:57,190 --> 00:34:02,620
indication but

00:33:59,580 --> 00:34:05,320
because of the limit there's a limit on

00:34:02,620 --> 00:34:09,879
how many pipeline instances will be

00:34:05,320 --> 00:34:11,409
displayed it could roll off on me so you

00:34:09,879 --> 00:34:15,280
can increase the number of visible

00:34:11,409 --> 00:34:17,139
pipelines but it would be nice to have a

00:34:15,280 --> 00:34:19,570
view that shows the most recent

00:34:17,139 --> 00:34:21,820
deployment by environment I think it

00:34:19,570 --> 00:34:23,290
would be really useful if we could

00:34:21,820 --> 00:34:28,929
somehow get that into the delivery

00:34:23,290 --> 00:34:33,480
pipeline plug in some things about the

00:34:28,929 --> 00:34:33,480
template plug-in are a little bit

00:34:33,750 --> 00:34:40,330
unexpected one is the XML processing in

00:34:38,560 --> 00:34:42,730
structure must be first so if you put

00:34:40,330 --> 00:34:45,639
something try to put some code before

00:34:42,730 --> 00:34:50,980
that which I wouldn't have expected

00:34:45,639 --> 00:34:52,990
would affect the outcome you get an

00:34:50,980 --> 00:34:55,629
error when you try to instantiate an

00:34:52,990 --> 00:34:57,040
instance of that template you get a 500

00:34:55,629 --> 00:34:59,460
error and it tells you the groovy

00:34:57,040 --> 00:35:03,070
template didn't produce well-formed XML

00:34:59,460 --> 00:35:07,750
so putting the processing instruction

00:35:03,070 --> 00:35:09,940
first will cause that putting you know

00:35:07,750 --> 00:35:13,870
any look any mistake you make in the

00:35:09,940 --> 00:35:19,390
middle of the template which you know

00:35:13,870 --> 00:35:20,920
het is is valid groovy code but results

00:35:19,390 --> 00:35:27,300
in a template that is not well formed

00:35:20,920 --> 00:35:30,160
will also give you the same 500 error um

00:35:27,300 --> 00:35:34,030
this is more of a programmer error but

00:35:30,160 --> 00:35:37,720
so here I try to access in and you know

00:35:34,030 --> 00:35:39,730
I I want to access the fourth part of

00:35:37,720 --> 00:35:42,610
the name and if I create a job that

00:35:39,730 --> 00:35:45,820
doesn't have four parts in the name I'm

00:35:42,610 --> 00:35:48,460
accessing an invalid array index and I

00:35:45,820 --> 00:35:51,760
probably should change my code to deal

00:35:48,460 --> 00:35:53,350
with that but it again it results in an

00:35:51,760 --> 00:35:55,420
error when you attempt to use the

00:35:53,350 --> 00:35:59,220
template you get this 500 error that

00:35:55,420 --> 00:35:59,220
says array index out of bounds exception

00:35:59,430 --> 00:36:11,320
but the the most troubling I guess is

00:36:06,220 --> 00:36:13,870
that a you can get silent failures

00:36:11,320 --> 00:36:17,200
so existing jobs that you have created

00:36:13,870 --> 00:36:19,420
that are based on the template won't get

00:36:17,200 --> 00:36:24,640
updated if you make a change to the

00:36:19,420 --> 00:36:29,320
template that is you know results in an

00:36:24,640 --> 00:36:31,780
invalid transformation so there's no

00:36:29,320 --> 00:36:33,430
indication that something went wrong so

00:36:31,780 --> 00:36:34,990
you have to verify after you make

00:36:33,430 --> 00:36:38,410
changes to the template you have to

00:36:34,990 --> 00:36:42,760
verify that the changes took effect by

00:36:38,410 --> 00:36:45,300
looking at the config.xml or creating a

00:36:42,760 --> 00:36:48,670
test job or you know something that

00:36:45,300 --> 00:36:50,410
indicates to you that it was successful

00:36:48,670 --> 00:36:52,780
so it would be nice to have a some sort

00:36:50,410 --> 00:37:01,510
of a test facility in the template

00:36:52,780 --> 00:37:04,120
plugin so I hope that I've given you a

00:37:01,510 --> 00:37:08,650
good overview of creating a delivery

00:37:04,120 --> 00:37:10,900
pipeline using the delivery pipeline

00:37:08,650 --> 00:37:15,640
plug in the template plugin and the

00:37:10,900 --> 00:37:19,620
folders plugin and here's some links to

00:37:15,640 --> 00:37:22,030
the documentation for those plugins and

00:37:19,620 --> 00:37:25,620
if there are any questions I'd be happy

00:37:22,030 --> 00:37:25,620
to take this thang

00:37:29,860 --> 00:37:31,920
you

00:37:38,460 --> 00:37:40,520

YouTube URL: https://www.youtube.com/watch?v=Y8TQfCV7cFM


