Title: JUC U.S. East 2015 - Fast Feedback: Jenkins+Functional & Non-Functional Mobile App Testing...
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Carlo Cadet and Uzi Eilon, Perfecto Mobile

Why is it that more teams talk about extending build automation to include functional and non-functional testing than actually can do it? Is the challenge in implementing automated tests that donâ€™t require babysitting? Perhaps it is reliably executing parallel execution on real devices? Or is the real point of failure a lab that triggers a 40% false negative rate? Are there other obstacles?

This session will explore these issues and offer attendees lessons learned from multiple successful projects that are driving fast feedback through implementing a robust CI practice using Jenkins.

The speakers will highlight:

- Two preconditions for success:
a. A test ready lab offering the ability to mic end user environments
b. Automation that executes continuously and in parallel across multiple targets

- Requirements for strong test planning: 
a. Designing a progressive test plan account for daily, nightly and weekly feedback windows, along with determining appropriate device coverage
b. Inserting non-functional tests for early identification of performance challenges

Presentation examples will feature Eclipse, Selenium Remote WebDriver, TestNG and Perfectoâ€™s cloud-based lab.
Captions: 
	00:00:15,290 --> 00:00:20,520
this challenge of extending your current

00:00:18,050 --> 00:00:24,120
CI practice to mobile

00:00:20,520 --> 00:00:26,250
so what we've tried to do is Uzi and I

00:00:24,120 --> 00:00:29,640
have the opportunity to work with a

00:00:26,250 --> 00:00:31,740
number of organizations perfecto mobile

00:00:29,640 --> 00:00:34,770
and I'll talk a minute about it and it

00:00:31,740 --> 00:00:37,680
shortly has the opportunity to work with

00:00:34,770 --> 00:00:39,900
many large enterprises and so as we work

00:00:37,680 --> 00:00:42,840
with large enterprises and we're focused

00:00:39,900 --> 00:00:45,390
in the mobile space we frequently hear a

00:00:42,840 --> 00:00:49,370
few things which is for our mobile

00:00:45,390 --> 00:00:53,460
application quality program we'd like to

00:00:49,370 --> 00:00:55,800
bridge it into our CI practice and many

00:00:53,460 --> 00:00:57,720
people are trying and what we've

00:00:55,800 --> 00:01:02,040
observed as many people are complaining

00:00:57,720 --> 00:01:03,450
or struggling in that process and so

00:01:02,040 --> 00:01:06,630
that's what this presentation is going

00:01:03,450 --> 00:01:08,420
to focus on in terms of the observations

00:01:06,630 --> 00:01:11,160
or the challenges that we hear as well

00:01:08,420 --> 00:01:13,200
as the solutions and best practices to

00:01:11,160 --> 00:01:15,500
overcome some of those but before I

00:01:13,200 --> 00:01:18,680
start let me get a sense of the audience

00:01:15,500 --> 00:01:23,070
how many of you are are today doing

00:01:18,680 --> 00:01:25,470
mobile programs great so that's about

00:01:23,070 --> 00:01:28,350
half of you for half of you that raised

00:01:25,470 --> 00:01:30,420
your hands from automation perspective

00:01:28,350 --> 00:01:33,899
who has over thirty percent automation

00:01:30,420 --> 00:01:36,270
as for tech from a test perspective ok

00:01:33,899 --> 00:01:41,789
so I'm seeing I'm sensing challenge

00:01:36,270 --> 00:01:44,970
number one ok for those others for the

00:01:41,789 --> 00:01:48,080
are you using real devices yet as part

00:01:44,970 --> 00:01:52,349
of your continuous integration process

00:01:48,080 --> 00:01:55,349
ok so this level sets the audience right

00:01:52,349 --> 00:01:58,380
away so the majority view and let me

00:01:55,349 --> 00:02:00,539
know here are looking to learn because

00:01:58,380 --> 00:02:02,580
you it's on your road map to introduce

00:02:00,539 --> 00:02:04,590
real devices into your CI practice is

00:02:02,580 --> 00:02:08,069
that your number one objective if you

00:02:04,590 --> 00:02:09,899
could just show of hands all right great

00:02:08,069 --> 00:02:13,160
great so I think this is going to be a

00:02:09,899 --> 00:02:16,860
good presentation as you plan out your

00:02:13,160 --> 00:02:18,440
process you're gonna hear a few tips

00:02:16,860 --> 00:02:23,280
that I think are gonna be quite valuable

00:02:18,440 --> 00:02:26,030
to you let me first start off with this

00:02:23,280 --> 00:02:26,030
notion of time

00:02:27,170 --> 00:02:34,590
if the intention or one of the primary

00:02:31,200 --> 00:02:37,590
benefits of continuous integration is

00:02:34,590 --> 00:02:38,969
quick feedback to the developers I take

00:02:37,590 --> 00:02:44,069
a look at it from a time budget

00:02:38,969 --> 00:02:46,400
perspective what should I do when how do

00:02:44,069 --> 00:02:49,920
I manage the time differences between

00:02:46,400 --> 00:02:52,109
for example build processes that are

00:02:49,920 --> 00:02:53,819
triggered on commit or on the polling

00:02:52,109 --> 00:02:56,969
basis that could happen several times a

00:02:53,819 --> 00:03:00,000
day which what happens overnight and

00:02:56,969 --> 00:03:02,879
what could happen from a a weekly test

00:03:00,000 --> 00:03:05,400
perspective and from our perspective is

00:03:02,879 --> 00:03:07,889
that you want to maximize the amount of

00:03:05,400 --> 00:03:11,180
feedback actionable feedback in terms of

00:03:07,889 --> 00:03:13,439
defects introduced X observe or

00:03:11,180 --> 00:03:15,419
potentially performance degradation and

00:03:13,439 --> 00:03:18,209
bring that fast into the organization

00:03:15,419 --> 00:03:20,450
back to the dev team and as we take a

00:03:18,209 --> 00:03:23,519
look at it we start of course with

00:03:20,450 --> 00:03:25,469
acknowledging the importance of doing

00:03:23,519 --> 00:03:28,590
the basics which is unit testing and

00:03:25,469 --> 00:03:30,510
getting that unit test coverage as fast

00:03:28,590 --> 00:03:32,940
as possible but then it goes into

00:03:30,510 --> 00:03:36,930
understanding wealthy with a larger time

00:03:32,940 --> 00:03:40,530
budget what part of my test suite can I

00:03:36,930 --> 00:03:42,449
introduce into the into the both nightly

00:03:40,530 --> 00:03:45,299
and weekly process so I want to keep

00:03:42,449 --> 00:03:50,220
that notion of time present throughout

00:03:45,299 --> 00:03:51,560
the conversation so as an overview we're

00:03:50,220 --> 00:03:54,449
going to talk about some of the

00:03:51,560 --> 00:03:58,319
challenges with regards to bringing

00:03:54,449 --> 00:04:00,780
testing mobile testing into the sea I

00:03:58,319 --> 00:04:04,109
practice we're going to talk about a

00:04:00,780 --> 00:04:05,819
working pattern that we've seen as for

00:04:04,109 --> 00:04:07,979
organizations who perhaps there might be

00:04:05,819 --> 00:04:11,009
a couple steps beyond where you are

00:04:07,979 --> 00:04:12,810
today they're still perfecting it but

00:04:11,009 --> 00:04:14,370
you know I think there's some definite

00:04:12,810 --> 00:04:16,680
examples learned and I we have some

00:04:14,370 --> 00:04:18,419
examples on that and then hopefully

00:04:16,680 --> 00:04:20,190
you're gonna walk away with some best

00:04:18,419 --> 00:04:24,570
practices that you could bring home and

00:04:20,190 --> 00:04:26,159
try to smooth out your journey how many

00:04:24,570 --> 00:04:31,860
of you are familiar with perfecto mobile

00:04:26,159 --> 00:04:35,270
a few all right and for the guys in the

00:04:31,860 --> 00:04:37,950
cloud bees in the back thank you so the

00:04:35,270 --> 00:04:40,200
perfecto mobile just a word you know we

00:04:37,950 --> 00:04:43,860
really our focus is enabling Oregon

00:04:40,200 --> 00:04:46,350
sations to perform test automation and

00:04:43,860 --> 00:04:48,570
monitoring as well as providing a hosted

00:04:46,350 --> 00:04:50,610
cloud facility of real devices and the

00:04:48,570 --> 00:04:53,370
big emphasis is really on real devices

00:04:50,610 --> 00:04:56,190
and I say that from the perspective of

00:04:53,370 --> 00:04:58,320
from a logic chest logic perspective

00:04:56,190 --> 00:05:01,260
emulators are great but our focus is

00:04:58,320 --> 00:05:02,760
really from a mobile perspective and the

00:05:01,260 --> 00:05:04,650
good news for us is we've been around

00:05:02,760 --> 00:05:06,900
for 10 years we actually have an

00:05:04,650 --> 00:05:09,540
established track record of working with

00:05:06,900 --> 00:05:13,320
organizations increasingly folks on

00:05:09,540 --> 00:05:14,940
agile processes let me start off with

00:05:13,320 --> 00:05:19,230
hopefully something that's familiar to

00:05:14,940 --> 00:05:21,240
everybody i think it was back in 2006 in

00:05:19,230 --> 00:05:22,860
that neighborhood or maybe a little

00:05:21,240 --> 00:05:25,560
earlier Mike cone really started

00:05:22,860 --> 00:05:28,710
popularizing the test automation pyramid

00:05:25,560 --> 00:05:31,260
and I think there's from it has a lot of

00:05:28,710 --> 00:05:33,780
Merit in terms of the conversation but

00:05:31,260 --> 00:05:36,480
what we have observed is that when you

00:05:33,780 --> 00:05:39,150
start taking this idea which was really

00:05:36,480 --> 00:05:40,620
built around from a web perspective when

00:05:39,150 --> 00:05:43,950
you bring it into mobile there are some

00:05:40,620 --> 00:05:50,880
differences and this actually begins to

00:05:43,950 --> 00:05:55,580
change the conversation hi everyone can

00:05:50,880 --> 00:06:00,030
you hear me ok so before I drill down to

00:05:55,580 --> 00:06:01,110
technical ideas and technical suggestion

00:06:00,030 --> 00:06:04,230
I just want to tell you a little bit

00:06:01,110 --> 00:06:06,210
about my day to day every day I have 90

00:06:04,230 --> 00:06:08,370
minutes come here to work and during the

00:06:06,210 --> 00:06:10,850
work i'm having the friend and i'm doing

00:06:08,370 --> 00:06:14,630
the following some using checkbooks

00:06:10,850 --> 00:06:16,890
facebook's of course i get a lot of

00:06:14,630 --> 00:06:20,880
notification about the author i reject

00:06:16,890 --> 00:06:25,080
it i watch my youtube video clears our

00:06:20,880 --> 00:06:27,810
emails return to facebook answer a phone

00:06:25,080 --> 00:06:31,500
remember it's at phone and this is what

00:06:27,810 --> 00:06:33,450
i'm doing on my Nexus device and we have

00:06:31,500 --> 00:06:36,570
Carlo he's doing the same but he is an

00:06:33,450 --> 00:06:39,030
iPhone guy so suddenly if you're

00:06:36,570 --> 00:06:41,160
thinking about your application your

00:06:39,030 --> 00:06:46,230
application needs to handle off the all

00:06:41,160 --> 00:06:47,880
this situation on different devices with

00:06:46,230 --> 00:06:49,230
a different network think about it I

00:06:47,880 --> 00:06:51,630
mean the strength of the network is

00:06:49,230 --> 00:06:53,400
actually changing so now when you are

00:06:51,630 --> 00:06:54,480
thinking about mobile we're not just

00:06:53,400 --> 00:06:57,210
thinking about

00:06:54,480 --> 00:06:59,640
testing my mobile in clear environment

00:06:57,210 --> 00:07:02,100
but we are thinking about more more

00:06:59,640 --> 00:07:07,770
devices different network virtualization

00:07:02,100 --> 00:07:12,620
other event like for cole SMS satellites

00:07:07,770 --> 00:07:15,420
later so suddenly this very good methods

00:07:12,620 --> 00:07:18,660
automation methodology is not works

00:07:15,420 --> 00:07:21,990
anymore for mobile and why because

00:07:18,660 --> 00:07:25,670
suddenly we need to add more devices I

00:07:21,990 --> 00:07:29,760
need two runs on my test on 10 devices

00:07:25,670 --> 00:07:34,680
20 devices ok and then suddenly I have

00:07:29,760 --> 00:07:37,620
the environment parameter for example 3g

00:07:34,680 --> 00:07:39,300
4g rotate the device the very simple

00:07:37,620 --> 00:07:41,340
action but affect most of the

00:07:39,300 --> 00:07:43,140
application by the way I'm talking about

00:07:41,340 --> 00:07:46,830
application and responsive web design

00:07:43,140 --> 00:07:50,550
both are very important to test on all

00:07:46,830 --> 00:07:52,980
the devices and on top of that we have a

00:07:50,550 --> 00:07:56,640
performance issue and we have a security

00:07:52,980 --> 00:08:00,980
test that we need to run so suddenly our

00:07:56,640 --> 00:08:04,950
tests that we used to run during our CI

00:08:00,980 --> 00:08:09,170
which was mostly unit tests are not good

00:08:04,950 --> 00:08:12,840
enough for web for web and mobile and

00:08:09,170 --> 00:08:17,430
how we are going to solve this how can

00:08:12,840 --> 00:08:21,870
we execute you either on will divide on

00:08:17,430 --> 00:08:24,450
as part of our CI process so let's talk

00:08:21,870 --> 00:08:27,060
about what are the challenges and then

00:08:24,450 --> 00:08:29,370
try to understand how to solve it so the

00:08:27,060 --> 00:08:32,550
first thing is we have and we are

00:08:29,370 --> 00:08:35,400
reviewing our customers and our partner

00:08:32,550 --> 00:08:38,640
are struggling to add real devices and

00:08:35,400 --> 00:08:41,610
why first of all if you have one tedder

00:08:38,640 --> 00:08:44,099
device that you add to your laptop and

00:08:41,610 --> 00:08:47,850
you run some automated tests on it you

00:08:44,099 --> 00:08:50,430
cannot build a full C I on top of this

00:08:47,850 --> 00:08:51,780
because it's not stable where you are

00:08:50,430 --> 00:08:54,360
going home the device will not be

00:08:51,780 --> 00:08:56,250
connected so the devices are not there

00:08:54,360 --> 00:08:58,740
are not available and the device

00:08:56,250 --> 00:09:00,630
readiness think about it you have a lot

00:08:58,740 --> 00:09:02,460
of event as part of the device you need

00:09:00,630 --> 00:09:05,400
to connect it to the y 5 maybe you need

00:09:02,460 --> 00:09:07,490
to connect it to a different action it's

00:09:05,400 --> 00:09:10,399
not easy to have the device

00:09:07,490 --> 00:09:14,120
ready and available ready and available

00:09:10,399 --> 00:09:17,420
so what are the solutions first of all

00:09:14,120 --> 00:09:20,899
you must never love love means devices

00:09:17,420 --> 00:09:23,300
or emulator available for you all the

00:09:20,899 --> 00:09:26,180
time and the idea of the most important

00:09:23,300 --> 00:09:28,850
that's when we are talking about the lab

00:09:26,180 --> 00:09:31,310
is the SLA why because if you are

00:09:28,850 --> 00:09:34,459
running tense build a day you must

00:09:31,310 --> 00:09:36,649
devices to be available for you and if

00:09:34,459 --> 00:09:39,170
you have two devices and one of the

00:09:36,649 --> 00:09:41,690
manual tester use one of the device and

00:09:39,170 --> 00:09:44,089
you cannot run the building on top of

00:09:41,690 --> 00:09:46,580
this it's a problem you don't have a VCR

00:09:44,089 --> 00:09:52,570
so in order to have real CI you need to

00:09:46,580 --> 00:09:54,890
have a lab and you need to have SLE and

00:09:52,570 --> 00:09:59,000
while I love is so important as i

00:09:54,890 --> 00:10:01,070
mentioned SLA i also want to introduce

00:09:59,000 --> 00:10:04,160
the parallel execution when you have lab

00:10:01,070 --> 00:10:06,440
we have a large number of devices you

00:10:04,160 --> 00:10:09,440
can execute the test on all of devices

00:10:06,440 --> 00:10:11,930
on the same time and of course different

00:10:09,440 --> 00:10:14,540
devices let's talk about the different

00:10:11,930 --> 00:10:16,790
devices so this is how it works use the

00:10:14,540 --> 00:10:19,250
factor and what we are doing imperfecto

00:10:16,790 --> 00:10:21,649
your support standard remote web drive

00:10:19,250 --> 00:10:24,260
so what we have in perfecto mobile we

00:10:21,649 --> 00:10:27,380
actually support capability the standard

00:10:24,260 --> 00:10:29,420
capability of opium or selenium what we

00:10:27,380 --> 00:10:31,910
are reading here is which device do i

00:10:29,420 --> 00:10:33,800
want i would like to execute my test on

00:10:31,910 --> 00:10:36,290
android with version five dot something

00:10:33,800 --> 00:10:38,300
i would like to execute my script on iOS

00:10:36,290 --> 00:10:40,970
which located in canada and what

00:10:38,300 --> 00:10:43,160
happened right now this property this

00:10:40,970 --> 00:10:46,550
capability will send to perfecto mobile

00:10:43,160 --> 00:10:48,890
cloud with the test itself and we the

00:10:46,550 --> 00:10:51,560
cloud itself will provide you the

00:10:48,890 --> 00:10:54,649
required device so right now the devices

00:10:51,560 --> 00:10:59,120
with the specific property will be

00:10:54,649 --> 00:11:02,060
available for you another thing that I'm

00:10:59,120 --> 00:11:04,430
hearing a lot and this is based on what

00:11:02,060 --> 00:11:07,579
we had in the past in the past most of

00:11:04,430 --> 00:11:10,399
our test was manual maybe you have T

00:11:07,579 --> 00:11:12,860
very easy to implement right now when we

00:11:10,399 --> 00:11:15,890
are talking about development it's hard

00:11:12,860 --> 00:11:19,070
it's a new language it's a new skill

00:11:15,890 --> 00:11:20,080
sets that need to be developed it's also

00:11:19,070 --> 00:11:22,300
the

00:11:20,080 --> 00:11:26,650
internet is not easy this is what we are

00:11:22,300 --> 00:11:28,930
hearing from our customer and our

00:11:26,650 --> 00:11:31,060
suggests so justin is the following

00:11:28,930 --> 00:11:32,790
first of all and the most important

00:11:31,060 --> 00:11:35,710
thing is the easy object identification

00:11:32,790 --> 00:11:37,780
it's means that most of the automation

00:11:35,710 --> 00:11:41,710
at the end will be based on the way that

00:11:37,780 --> 00:11:45,280
you identify the object right so how do

00:11:41,710 --> 00:11:47,110
you have easy object identification by

00:11:45,280 --> 00:11:49,930
having collaboration between the

00:11:47,110 --> 00:11:52,960
developer and the tester and you are us

00:11:49,930 --> 00:11:55,780
the build manager need to have them to

00:11:52,960 --> 00:11:57,940
build this communication they can create

00:11:55,780 --> 00:12:01,660
an object with ID which makes the

00:11:57,940 --> 00:12:04,720
automation very easy which make it Mary

00:12:01,660 --> 00:12:09,340
very robust which makes all the bills to

00:12:04,720 --> 00:12:12,610
pass and you don't going to have a false

00:12:09,340 --> 00:12:13,990
false negatives which is our worst enemy

00:12:12,610 --> 00:12:16,600
if we are talking about the build

00:12:13,990 --> 00:12:20,230
environment another very important thing

00:12:16,600 --> 00:12:22,930
is develop a framework find a team with

00:12:20,230 --> 00:12:25,020
a strong development capability and ask

00:12:22,930 --> 00:12:28,450
them to develop the framework and

00:12:25,020 --> 00:12:30,850
separate the framework from the test

00:12:28,450 --> 00:12:33,310
itself I saw a lot of example like this

00:12:30,850 --> 00:12:36,340
I would like to share one of you so this

00:12:33,310 --> 00:12:38,530
is an example for an infrastructure so

00:12:36,340 --> 00:12:43,540
first of all you can use the BDD which

00:12:38,530 --> 00:12:45,600
is define your test in an English I'm in

00:12:43,540 --> 00:12:49,870
the login script enter my credentials

00:12:45,600 --> 00:12:53,590
click on login button and then so this

00:12:49,870 --> 00:12:55,480
is done by the product owner and then we

00:12:53,590 --> 00:12:57,820
have this type and this is something

00:12:55,480 --> 00:13:01,660
really important this is just a JSON

00:12:57,820 --> 00:13:05,860
which identified all the object in the

00:13:01,660 --> 00:13:07,750
stream so I have the ID I have my name

00:13:05,860 --> 00:13:11,800
my last name and my email these are the

00:13:07,750 --> 00:13:14,010
three fields that I have in my form okay

00:13:11,800 --> 00:13:17,830
and another important thing here that

00:13:14,010 --> 00:13:19,720
the type used is ID why because I have a

00:13:17,830 --> 00:13:22,690
good relationship between the tester and

00:13:19,720 --> 00:13:26,830
the developer so each object contains an

00:13:22,690 --> 00:13:31,170
NID and at the end this code generated

00:13:26,830 --> 00:13:33,390
automatically so the tester will write

00:13:31,170 --> 00:13:35,550
this definition

00:13:33,390 --> 00:13:37,590
the infrastructure or the framework will

00:13:35,550 --> 00:13:39,890
generate the code so in this case you

00:13:37,590 --> 00:13:42,690
will be able to create a lot of tests

00:13:39,890 --> 00:13:44,880
easily and now there are a different

00:13:42,690 --> 00:13:48,050
time implementation or so implementation

00:13:44,880 --> 00:13:50,700
is in XML and I saw implementation on

00:13:48,050 --> 00:13:53,220
Excel the test to write the test in

00:13:50,700 --> 00:13:55,560
Excel automated script generated and

00:13:53,220 --> 00:13:57,570
create and selenium screen so this is a

00:13:55,560 --> 00:13:59,160
good practice why because it's helped

00:13:57,570 --> 00:14:02,270
you to have one strong team of

00:13:59,160 --> 00:14:05,160
developers that actually maintain the

00:14:02,270 --> 00:14:07,740
framework and the tester can create a

00:14:05,160 --> 00:14:11,400
lot of tests and increase it and manage

00:14:07,740 --> 00:14:13,650
it and maintain this so what does it

00:14:11,400 --> 00:14:17,190
mean that build good expert and you can

00:14:13,650 --> 00:14:19,500
see here an express as example so this

00:14:17,190 --> 00:14:21,330
is starboard starboard starbucks

00:14:19,500 --> 00:14:24,540
application and you can see the

00:14:21,330 --> 00:14:26,160
developers the apple developer and the

00:14:24,540 --> 00:14:28,410
galaxy developer or the android

00:14:26,160 --> 00:14:31,710
developer are not working together and

00:14:28,410 --> 00:14:33,330
it looks even it's looks different so

00:14:31,710 --> 00:14:35,220
let's think about the first log in

00:14:33,330 --> 00:14:38,100
action the first login actions that i

00:14:35,220 --> 00:14:40,770
need to implement is actually find the

00:14:38,100 --> 00:14:43,350
object username or find out of the

00:14:40,770 --> 00:14:47,330
username and email and enter the email

00:14:43,350 --> 00:14:49,710
right so now if i need to run one test I

00:14:47,330 --> 00:14:54,900
mean a problem because I need to have

00:14:49,710 --> 00:14:58,440
two different identification so try to

00:14:54,900 --> 00:15:00,690
use and smart expert in this test or in

00:14:58,440 --> 00:15:03,150
this case I use the content and I said

00:15:00,690 --> 00:15:05,040
find the element find the text field

00:15:03,150 --> 00:15:07,230
which contains the username and then it

00:15:05,040 --> 00:15:09,060
works on both of the application so it

00:15:07,230 --> 00:15:12,270
helped me to create the right expert

00:15:09,060 --> 00:15:14,540
it's very clear it's very robust and

00:15:12,270 --> 00:15:18,180
more important it's actually

00:15:14,540 --> 00:15:22,110
cross-platform execution this code this

00:15:18,180 --> 00:15:25,350
line will enter the value my email into

00:15:22,110 --> 00:15:27,450
both of the devices iphone and android

00:15:25,350 --> 00:15:30,660
so i have one code that worked on both

00:15:27,450 --> 00:15:32,940
of the platform yes but the most

00:15:30,660 --> 00:15:35,220
important thing here when you create

00:15:32,940 --> 00:15:38,850
automation you don't have an ID try to

00:15:35,220 --> 00:15:42,060
find the smart ways to identify and to

00:15:38,850 --> 00:15:45,930
have the expat and try to have one code

00:15:42,060 --> 00:15:50,019
that works on both of the devices

00:15:45,930 --> 00:15:52,329
this is a classic I arrived to customer

00:15:50,019 --> 00:15:55,060
most of our customer so we arrived into

00:15:52,329 --> 00:15:57,069
a customer's that running yes that

00:15:55,060 --> 00:15:58,779
that's a good good point Joe there are

00:15:57,069 --> 00:16:01,180
two options one your Chinese I repeat

00:15:58,779 --> 00:16:03,550
the question you see so if you have a

00:16:01,180 --> 00:16:05,860
page of Jack methodology and then you

00:16:03,550 --> 00:16:07,870
have two different paths based on what

00:16:05,860 --> 00:16:10,029
you learn what should be the next page

00:16:07,870 --> 00:16:11,410
you know how to manage the next page so

00:16:10,029 --> 00:16:13,499
there are two options one option is

00:16:11,410 --> 00:16:16,350
actually to think about translate a

00:16:13,499 --> 00:16:18,910
transactions so the page object will be

00:16:16,350 --> 00:16:21,579
transaction-related so you're going to

00:16:18,910 --> 00:16:24,279
have the path and all the data will be

00:16:21,579 --> 00:16:26,230
all the tests will be in one class per

00:16:24,279 --> 00:16:30,519
transaction this is one options the

00:16:26,230 --> 00:16:35,139
other options is to have the next page

00:16:30,519 --> 00:16:37,809
as part of the parameter which arrived

00:16:35,139 --> 00:16:40,870
so you are running the test and based on

00:16:37,809 --> 00:16:42,430
the based on the buttons that be

00:16:40,870 --> 00:16:44,800
impressed or based on the data that

00:16:42,430 --> 00:16:46,689
enter in this specific page you are

00:16:44,800 --> 00:16:49,629
invoked the next page and it can be

00:16:46,689 --> 00:16:51,579
different page so in the page object

00:16:49,629 --> 00:16:54,550
when you have the path when you have the

00:16:51,579 --> 00:16:57,639
conditions just implement both of the

00:16:54,550 --> 00:16:59,290
way and if you don't have the notion at

00:16:57,639 --> 00:17:01,029
the beginning of the test what you need

00:16:59,290 --> 00:17:06,069
to do you need to have added generic

00:17:01,029 --> 00:17:08,980
data that get all the page using the get

00:17:06,069 --> 00:17:12,120
all elements use and getting the error

00:17:08,980 --> 00:17:15,159
and run on the iron dust will be totally

00:17:12,120 --> 00:17:16,539
dynamic code but it's need to be smarter

00:17:15,159 --> 00:17:20,380
because you need to understand or to

00:17:16,539 --> 00:17:23,110
analyze the the past based on the object

00:17:20,380 --> 00:17:27,490
that you got from the gate elements

00:17:23,110 --> 00:17:29,039
command so I'm returning into here so we

00:17:27,490 --> 00:17:31,720
are arriving to customers at using

00:17:29,039 --> 00:17:33,340
selenium runs it on web and now they

00:17:31,720 --> 00:17:36,460
want to expand it to mobile and then

00:17:33,340 --> 00:17:38,110
they said told me that I have two

00:17:36,460 --> 00:17:39,399
thousand three thousand ten thousand

00:17:38,110 --> 00:17:41,620
scripts and i have twenty-five percent

00:17:39,399 --> 00:17:45,220
of error and if you have twenty-five

00:17:41,620 --> 00:17:46,690
percent of error from 440,000 script you

00:17:45,220 --> 00:17:49,299
are not getting any benefit from

00:17:46,690 --> 00:17:52,860
automation why it's take a lot of time

00:17:49,299 --> 00:17:56,140
to analyze the street better to have 100

00:17:52,860 --> 00:17:57,910
test cases that you know that worked and

00:17:56,140 --> 00:17:59,920
fought for

00:17:57,910 --> 00:18:05,340
test cases with twenty five percent of

00:17:59,920 --> 00:18:08,440
error so why and our two or three main

00:18:05,340 --> 00:18:10,900
topic first of all I'll start with the

00:18:08,440 --> 00:18:13,060
environment readiness sometimes the

00:18:10,900 --> 00:18:15,220
environment is not really ready remember

00:18:13,060 --> 00:18:17,140
when we are running the test on a real

00:18:15,220 --> 00:18:19,450
devices when we are running the tests on

00:18:17,140 --> 00:18:22,420
the mobile it actually runs end to end

00:18:19,450 --> 00:18:25,180
it not just a unit test that we control

00:18:22,420 --> 00:18:27,660
all the parameters it's actually related

00:18:25,180 --> 00:18:30,850
to the other component and it's Rick

00:18:27,660 --> 00:18:33,820
dependent on the database and on the

00:18:30,850 --> 00:18:37,630
api's so the most important thing is to

00:18:33,820 --> 00:18:41,440
have a readiness of free in the before

00:18:37,630 --> 00:18:43,780
test trial run a readiness function we

00:18:41,440 --> 00:18:46,270
check that everything will just try to

00:18:43,780 --> 00:18:49,270
do something very smooth if it will not

00:18:46,270 --> 00:18:51,700
work do not continue with your test

00:18:49,270 --> 00:18:53,230
that's one thing another thing is based

00:18:51,700 --> 00:18:55,600
on the test itself if we are talking

00:18:53,230 --> 00:18:57,250
about mobile there is a lot of issue is

00:18:55,600 --> 00:18:59,830
the device are then you have a pop-up

00:18:57,250 --> 00:19:02,710
that the network is not available

00:18:59,830 --> 00:19:05,020
suddenly you have a call SMS some some

00:19:02,710 --> 00:19:08,740
kind of this so you need to implement an

00:19:05,020 --> 00:19:10,180
error handling mechanism the best

00:19:08,740 --> 00:19:12,100
practice in perfecto mobile is the

00:19:10,180 --> 00:19:14,380
following when you have an error try to

00:19:12,100 --> 00:19:15,930
get another device executed again and if

00:19:14,380 --> 00:19:19,630
you have the same error just then

00:19:15,930 --> 00:19:21,220
notified Jeff Justin bill break the

00:19:19,630 --> 00:19:26,530
build don't break the Builder to

00:19:21,220 --> 00:19:29,140
matically and this is an example for on

00:19:26,530 --> 00:19:31,150
error in perfecto mobile so I mentioned

00:19:29,140 --> 00:19:32,650
we are talking with this is a java code

00:19:31,150 --> 00:19:34,420
but we can't work with any other

00:19:32,650 --> 00:19:37,120
language and what i have here i have

00:19:34,420 --> 00:19:40,750
three layers first of all I'm looking

00:19:37,120 --> 00:19:43,690
for the UH narrow I'm looking for

00:19:40,750 --> 00:19:46,090
message box with a button with ok why I

00:19:43,690 --> 00:19:49,060
have a lot of pop up with ok or cancel

00:19:46,090 --> 00:19:51,880
so this is called the system level

00:19:49,060 --> 00:19:55,120
control I can get the button or the

00:19:51,880 --> 00:19:57,130
message from the device itself its

00:19:55,120 --> 00:19:59,860
external to my application I press the

00:19:57,130 --> 00:20:02,260
ok button and then I i if it does not

00:19:59,860 --> 00:20:04,180
work i'm going to close and open my

00:20:02,260 --> 00:20:07,390
application and restart met the test and

00:20:04,180 --> 00:20:10,060
then i have if everything does not work

00:20:07,390 --> 00:20:12,700
i can restart the device or get the next

00:20:10,060 --> 00:20:15,100
available device okay remember when we

00:20:12,700 --> 00:20:18,400
are working with browser when we are

00:20:15,100 --> 00:20:23,500
working with real devices we need to

00:20:18,400 --> 00:20:27,580
have an extra an extra tests with an

00:20:23,500 --> 00:20:30,280
extra functions before we are sending an

00:20:27,580 --> 00:20:32,050
arrow to our build machine why because

00:20:30,280 --> 00:20:35,290
it can be the environment it can be the

00:20:32,050 --> 00:20:42,130
device check it test it and then just

00:20:35,290 --> 00:20:47,040
notify their question so we talked about

00:20:42,130 --> 00:20:52,780
the devices the development the

00:20:47,040 --> 00:20:54,250
execution and now that the the error

00:20:52,780 --> 00:20:56,710
handling and now let's talk little bit

00:20:54,250 --> 00:21:01,660
about the execution it's like a lot of

00:20:56,710 --> 00:21:05,550
that real devices club how to improve it

00:21:01,660 --> 00:21:08,020
so yes it always will be slower than

00:21:05,550 --> 00:21:11,700
local browser on your machine that's

00:21:08,020 --> 00:21:14,740
true but if you will be able to use and

00:21:11,700 --> 00:21:16,600
parallel execution and said okay I would

00:21:14,740 --> 00:21:18,430
like to execute my script on 10 devices

00:21:16,600 --> 00:21:21,880
and it's going two runs on the 10

00:21:18,430 --> 00:21:24,610
devices you are solve the problem for

00:21:21,880 --> 00:21:28,990
example I hadn't customers that executes

00:21:24,610 --> 00:21:30,970
25 tests in 40 minutes and you need to

00:21:28,990 --> 00:21:33,370
reduce it so what we did we just added

00:21:30,970 --> 00:21:36,670
more devices to the cloud and now each

00:21:33,370 --> 00:21:40,030
test of the test actually split between

00:21:36,670 --> 00:21:43,600
the devices and we actually runs in a

00:21:40,030 --> 00:21:46,330
slower within a shorter windows another

00:21:43,600 --> 00:21:49,930
thing is the best practice for example

00:21:46,330 --> 00:21:52,090
don't use a wait wait is the best it is

00:21:49,930 --> 00:21:54,340
a bad practice use a synchronizer

00:21:52,090 --> 00:21:57,310
element wait for something to be open

00:21:54,340 --> 00:21:58,690
identify the object of know what are the

00:21:57,310 --> 00:22:01,000
objects that you are looking for and

00:21:58,690 --> 00:22:03,250
wait for the object and then it's help

00:22:01,000 --> 00:22:08,980
you to create a better flow a better

00:22:03,250 --> 00:22:10,000
script and best practice we imperfect on

00:22:08,980 --> 00:22:12,580
mobile we have something called

00:22:10,000 --> 00:22:14,470
community dock perfecto mobile com we

00:22:12,580 --> 00:22:18,240
have a lot of code samples I said this

00:22:14,470 --> 00:22:21,130
is better than this one use xbox with

00:22:18,240 --> 00:22:22,990
use this user ID and not expose if you

00:22:21,130 --> 00:22:23,260
can't use an xbox with content and not

00:22:22,990 --> 00:22:25,870
where

00:22:23,260 --> 00:22:29,110
divx but all these data is actually all

00:22:25,870 --> 00:22:31,390
these tips will help you to create a

00:22:29,110 --> 00:22:33,370
better script you have the option to

00:22:31,390 --> 00:22:36,130
improve your script it's like a database

00:22:33,370 --> 00:22:39,880
that you can improve your SQL the same

00:22:36,130 --> 00:22:43,510
way good practice good code will create

00:22:39,880 --> 00:22:46,510
a good SQL so what I want to show you

00:22:43,510 --> 00:22:48,520
here is two options first of all manage

00:22:46,510 --> 00:22:51,100
the timer change the timer is part of

00:22:48,520 --> 00:22:53,080
the script the two first line you can

00:22:51,100 --> 00:22:54,370
change the timer during the script if

00:22:53,080 --> 00:22:56,020
you know that you have something that

00:22:54,370 --> 00:22:58,450
you need to wait only five seconds

00:22:56,020 --> 00:23:00,850
change it to five seconds and then after

00:22:58,450 --> 00:23:03,160
that return it to 30 seconds everything

00:23:00,850 --> 00:23:05,170
based on you need another thing that I

00:23:03,160 --> 00:23:08,950
think is very very important is actually

00:23:05,170 --> 00:23:11,140
the the parallel execution what I did

00:23:08,950 --> 00:23:13,510
here i actually used test Angie I

00:23:11,140 --> 00:23:15,010
believe most of you using testing g so i

00:23:13,510 --> 00:23:18,280
decided to use the parallel execution

00:23:15,010 --> 00:23:22,540
and i'm providing the device property as

00:23:18,280 --> 00:23:24,700
a property or as a parameter to my test

00:23:22,540 --> 00:23:27,160
so now my test is going to get four

00:23:24,700 --> 00:23:30,160
devices and going two runs on four

00:23:27,160 --> 00:23:32,200
devices by the way we on top of this we

00:23:30,160 --> 00:23:34,600
have another layers i said ok you want

00:23:32,200 --> 00:23:36,430
to execute your test on four devices one

00:23:34,600 --> 00:23:39,730
iphone one android one tablet and one

00:23:36,430 --> 00:23:41,830
chrome which is a pc laptop and in the

00:23:39,730 --> 00:23:44,290
end if in the cloud let's say you have

00:23:41,830 --> 00:23:46,690
three tests if in your cloud you have

00:23:44,290 --> 00:23:48,670
three iphones the three tests will run

00:23:46,690 --> 00:23:50,890
on each test will run on different

00:23:48,670 --> 00:23:53,620
iphone and you'll get all the report

00:23:50,890 --> 00:23:55,840
into one centralized mechanism so we

00:23:53,620 --> 00:23:57,730
have they execute all the tests on a

00:23:55,840 --> 00:24:00,550
different device on the same time and if

00:23:57,730 --> 00:24:04,300
it's the same device property it just

00:24:00,550 --> 00:24:09,850
going to help and execute part of the

00:24:04,300 --> 00:24:12,660
tests any questions about the techniques

00:24:09,850 --> 00:24:12,660
and above the cloud

00:24:15,770 --> 00:24:21,420
okay for more details if you want to be

00:24:18,810 --> 00:24:25,770
to see more for example we are actually

00:24:21,420 --> 00:24:28,980
in booth number 23 it's you can in front

00:24:25,770 --> 00:24:32,340
of this door also Uzi is also doing a

00:24:28,980 --> 00:24:33,990
lightning talk at twelve o'clock where

00:24:32,340 --> 00:24:36,540
he'll is going to go over a few specific

00:24:33,990 --> 00:24:38,040
examples in terms of best practices that

00:24:36,540 --> 00:24:40,260
are posted right now in our community

00:24:38,040 --> 00:24:42,150
what I want to do is come back in terms

00:24:40,260 --> 00:24:44,970
of this conversation about time and

00:24:42,150 --> 00:24:46,950
managing the time budget from a feedback

00:24:44,970 --> 00:24:48,870
loop perspective and one of the things

00:24:46,950 --> 00:24:50,940
that that we've worked with customers

00:24:48,870 --> 00:24:54,120
out is how to plan out that schedule and

00:24:50,940 --> 00:24:56,460
have a a test strategy that dovetails

00:24:54,120 --> 00:24:59,310
into the CI cycle and specifically

00:24:56,460 --> 00:25:01,140
trying to understand one of the best

00:24:59,310 --> 00:25:03,450
practice we observe Uzi kind of touched

00:25:01,140 --> 00:25:05,460
on is understanding the test suite but

00:25:03,450 --> 00:25:08,460
not monolithically on breaking apart

00:25:05,460 --> 00:25:10,530
that test suite into a variety of test

00:25:08,460 --> 00:25:12,870
groups were you able to identify what

00:25:10,530 --> 00:25:14,550
your priority transactions are what are

00:25:12,870 --> 00:25:15,900
you going to do for example in every

00:25:14,550 --> 00:25:18,480
build what are you going to do

00:25:15,900 --> 00:25:20,040
periodically in terms of the cycles for

00:25:18,480 --> 00:25:22,500
example from a weekly or a nightly

00:25:20,040 --> 00:25:24,810
perspective another aspect of that is

00:25:22,500 --> 00:25:27,720
from a performance perspective we are

00:25:24,810 --> 00:25:30,210
very strong proponents of trying to

00:25:27,720 --> 00:25:32,850
introduce performance testing earlier on

00:25:30,210 --> 00:25:34,200
in the process from a feedback and by

00:25:32,850 --> 00:25:37,350
performance testing I want to make sure

00:25:34,200 --> 00:25:39,000
we separate the idea of load versus all

00:25:37,350 --> 00:25:41,460
the rest of the aspects that you could

00:25:39,000 --> 00:25:43,410
learn from performance testing for

00:25:41,460 --> 00:25:45,900
example one of the things that you're

00:25:43,410 --> 00:25:48,200
able to do early on is simply embedding

00:25:45,900 --> 00:25:50,520
the notion of timers or for example

00:25:48,200 --> 00:25:52,620
specifically looking for for breakage

00:25:50,520 --> 00:25:55,020
due to timeout failures by actually

00:25:52,620 --> 00:25:56,790
extending some of the transactions but

00:25:55,020 --> 00:25:59,460
really trying to understand your test

00:25:56,790 --> 00:26:01,590
strategy and being able to optimize it

00:25:59,460 --> 00:26:03,090
from a durations perspective I was

00:26:01,590 --> 00:26:05,490
speaking to another group last week

00:26:03,090 --> 00:26:08,310
where they were talking about on average

00:26:05,490 --> 00:26:11,280
the target for their organization was to

00:26:08,310 --> 00:26:12,770
strive to automate automated test

00:26:11,280 --> 00:26:17,220
iterations that are about one to two

00:26:12,770 --> 00:26:21,770
minutes per test case but then as taking

00:26:17,220 --> 00:26:24,300
a look at managing all the outliers and

00:26:21,770 --> 00:26:26,970
aggressively trying to bring that those

00:26:24,300 --> 00:26:27,389
outliers down to that one to two minute

00:26:26,970 --> 00:26:29,190
range

00:26:27,389 --> 00:26:32,999
so therefore they can maximize the

00:26:29,190 --> 00:26:35,159
executions are able to include one of

00:26:32,999 --> 00:26:37,320
the things that and I think Uzi touched

00:26:35,159 --> 00:26:39,959
on almost all of these aspects in the

00:26:37,320 --> 00:26:41,700
conversation is really making sure that

00:26:39,959 --> 00:26:44,219
there's a clear test plan for it to

00:26:41,700 --> 00:26:46,289
support the CI perspective and we look

00:26:44,219 --> 00:26:48,299
at it as a cookbook in terms of the

00:26:46,289 --> 00:26:51,959
elements that need to be in place for

00:26:48,299 --> 00:26:54,059
the process you know Uzi mentioned for

00:26:51,959 --> 00:26:56,419
example the page object model is one of

00:26:54,059 --> 00:26:59,099
the design patterns that we see as

00:26:56,419 --> 00:27:01,799
particularly effective for organizations

00:26:59,099 --> 00:27:03,989
in terms of being able to maximize the

00:27:01,799 --> 00:27:05,909
amount of reuse that's occurring and

00:27:03,989 --> 00:27:07,649
therefore being closer and closer to

00:27:05,909 --> 00:27:10,169
getting automation built into sprint

00:27:07,649 --> 00:27:12,659
zero and therefore getting that feedback

00:27:10,169 --> 00:27:14,700
loop going it also has to do with

00:27:12,659 --> 00:27:17,009
changing the mindset changing the

00:27:14,700 --> 00:27:19,109
mindset in organizations where for some

00:27:17,009 --> 00:27:21,119
organizations manual is simply the

00:27:19,109 --> 00:27:23,399
default approach to thinking but

00:27:21,119 --> 00:27:25,950
obviously the bridge to a CI pattern is

00:27:23,399 --> 00:27:27,869
obviously going to require moving to

00:27:25,950 --> 00:27:31,159
manual testing as the exception and

00:27:27,869 --> 00:27:33,779
automated testing as the norm in

00:27:31,159 --> 00:27:35,639
addition is the idea that we started

00:27:33,779 --> 00:27:37,639
back if you kind of remember Uzis slide

00:27:35,639 --> 00:27:40,999
earlier with regards to the commute is

00:27:37,639 --> 00:27:43,409
being able to think not only in terms of

00:27:40,999 --> 00:27:45,989
executing the functional test of the of

00:27:43,409 --> 00:27:48,239
the transaction but understanding the

00:27:45,989 --> 00:27:50,729
transaction in the context that users

00:27:48,239 --> 00:27:53,009
are actually experiencing and being able

00:27:50,729 --> 00:27:55,379
to factor in user conditions into the

00:27:53,009 --> 00:27:56,789
conversation what happens for example to

00:27:55,379 --> 00:27:58,469
a transaction when the battery is

00:27:56,789 --> 00:28:01,709
running low what happens to the

00:27:58,469 --> 00:28:05,070
transaction when the the network is move

00:28:01,709 --> 00:28:08,659
from LTE to 1g for example how does that

00:28:05,070 --> 00:28:11,700
impact the transaction and being able to

00:28:08,659 --> 00:28:13,529
include that and one of the things that

00:28:11,700 --> 00:28:15,450
we touched on earlier in the

00:28:13,529 --> 00:28:17,700
conversation was we touched a one

00:28:15,450 --> 00:28:19,769
example of the dev QA collaboration

00:28:17,700 --> 00:28:22,379
around object identification but it

00:28:19,769 --> 00:28:24,690
really starts very early in the process

00:28:22,379 --> 00:28:26,609
in Sherman understanding that breaking

00:28:24,690 --> 00:28:32,249
down that wall that has frequently

00:28:26,609 --> 00:28:33,839
separated QA and Dev and so one trying

00:28:32,249 --> 00:28:37,739
to move to a close before a couple of

00:28:33,839 --> 00:28:41,130
examples is the notion of being able to

00:28:37,739 --> 00:28:43,500
share the tools between dev and QA

00:28:41,130 --> 00:28:46,680
being able to start from the same IDE

00:28:43,500 --> 00:28:49,650
that the dev team is using the QA should

00:28:46,680 --> 00:28:51,720
be using for example if it's a if it's a

00:28:49,650 --> 00:28:53,580
Java Eclipse environment then Java

00:28:51,720 --> 00:28:57,060
selenium makes a great starting point

00:28:53,580 --> 00:29:01,280
from a QA perspective in addition in

00:28:57,060 --> 00:29:03,780
addition being able to over time

00:29:01,280 --> 00:29:06,180
developing that coding breast practices

00:29:03,780 --> 00:29:09,090
coding best practices for example in

00:29:06,180 --> 00:29:11,070
terms of being able to always have a

00:29:09,090 --> 00:29:13,920
strict kind of definition in terms of

00:29:11,070 --> 00:29:16,050
object naming conventions as well as

00:29:13,920 --> 00:29:18,060
being able to understand that XPath to

00:29:16,050 --> 00:29:20,010
hand it over what I have there is a

00:29:18,060 --> 00:29:22,230
number three is that pom maintenance or

00:29:20,010 --> 00:29:25,470
page object model maintenance or with

00:29:22,230 --> 00:29:27,570
regards to whatever the test framework

00:29:25,470 --> 00:29:29,490
that you've built out being able to

00:29:27,570 --> 00:29:31,860
manage that as well from a staffing

00:29:29,490 --> 00:29:33,870
perspective we've seen be we've seen

00:29:31,860 --> 00:29:35,400
that the shift that's occurring as as

00:29:33,870 --> 00:29:37,710
the QA team becomes increasingly

00:29:35,400 --> 00:29:39,330
technical teams becoming able to

00:29:37,710 --> 00:29:41,400
specialize who's actually building

00:29:39,330 --> 00:29:44,730
scripts who's actually maintaining and

00:29:41,400 --> 00:29:46,850
building out that framework Uzi provided

00:29:44,730 --> 00:29:49,920
several great examples with regards to

00:29:46,850 --> 00:29:52,500
essentially dynamically managing errors

00:29:49,920 --> 00:29:54,960
or notifications during the test and

00:29:52,500 --> 00:29:58,340
being able to reduce the breakage that

00:29:54,960 --> 00:30:01,050
occurs during automation of that test

00:29:58,340 --> 00:30:03,060
one of the things that we didn't talk on

00:30:01,050 --> 00:30:05,310
and it's an example that I'll draw on a

00:30:03,060 --> 00:30:08,090
moment from one of our customers is as

00:30:05,310 --> 00:30:11,010
part of the the build itself before

00:30:08,090 --> 00:30:12,960
launching the main suite of tests

00:30:11,010 --> 00:30:15,600
actually being able to do a readiness

00:30:12,960 --> 00:30:17,550
check under confirm whether the all the

00:30:15,600 --> 00:30:19,320
web services are there confirmed for

00:30:17,550 --> 00:30:21,780
example that the device is actually

00:30:19,320 --> 00:30:24,120
ready in or in terms of being able to do

00:30:21,780 --> 00:30:27,150
or roll over to a second device as an

00:30:24,120 --> 00:30:30,390
example and of course Susie talked about

00:30:27,150 --> 00:30:34,350
parallel execution one of the

00:30:30,390 --> 00:30:37,080
conversations that that I always include

00:30:34,350 --> 00:30:39,420
to underscore in this is the notion of

00:30:37,080 --> 00:30:40,770
that culture matters a lot of the the

00:30:39,420 --> 00:30:42,840
change that we've been talking about

00:30:40,770 --> 00:30:45,570
obviously for a conference like this

00:30:42,840 --> 00:30:47,790
with the conversation with regards to

00:30:45,570 --> 00:30:49,860
agile and being able to move to a CI

00:30:47,790 --> 00:30:53,970
pattern is also changing the way people

00:30:49,860 --> 00:30:54,669
think and so I always include that this

00:30:53,970 --> 00:30:56,859
is a ploy

00:30:54,669 --> 00:30:58,629
to make sure that we not only have the

00:30:56,859 --> 00:31:01,480
tools conversation of the techniques

00:30:58,629 --> 00:31:05,259
conversation but to keep that the people

00:31:01,480 --> 00:31:07,299
in mind from a point of view of trying

00:31:05,259 --> 00:31:10,419
to wrap this up before I provide to

00:31:07,299 --> 00:31:12,940
specific customer case studies to draw

00:31:10,419 --> 00:31:16,389
the conversation to a close is really

00:31:12,940 --> 00:31:17,859
trying to understand how do how does

00:31:16,389 --> 00:31:20,649
this test automation that we've been

00:31:17,859 --> 00:31:23,590
talking about and real devices fall into

00:31:20,649 --> 00:31:26,529
the sea I pattern itself and so what

00:31:23,590 --> 00:31:29,200
you're seeing here in this in this this

00:31:26,529 --> 00:31:31,929
depiction is being able to for most

00:31:29,200 --> 00:31:33,700
organizations the common flow but from

00:31:31,929 --> 00:31:35,980
from dev through their source control

00:31:33,700 --> 00:31:39,009
their build process either managed by

00:31:35,980 --> 00:31:41,619
Jenkins or other tool that have been

00:31:39,009 --> 00:31:44,169
launching the perfecto test automation

00:31:41,619 --> 00:31:48,450
as one of the jobs in the build process

00:31:44,169 --> 00:31:51,970
and with that being able to execute a

00:31:48,450 --> 00:31:54,669
unreal devices beyond in parallel to

00:31:51,970 --> 00:31:57,309
optimize around the time and then

00:31:54,669 --> 00:32:00,249
finally to get the reporting the

00:31:57,309 --> 00:32:02,289
reporting to get to actionable defect

00:32:00,249 --> 00:32:04,029
remediation one of the things that we

00:32:02,289 --> 00:32:07,049
particularly stress is being able to

00:32:04,029 --> 00:32:09,730
understand is to lower the number of

00:32:07,049 --> 00:32:11,859
defects that declared non reproducible

00:32:09,730 --> 00:32:14,350
by dev and making sure that there's a

00:32:11,859 --> 00:32:16,690
clear step-by-step in terms of where the

00:32:14,350 --> 00:32:18,909
failure occurred video to understand

00:32:16,690 --> 00:32:21,340
exactly where in the application it

00:32:18,909 --> 00:32:23,499
occurred as well as including both

00:32:21,340 --> 00:32:26,049
application level as well as device

00:32:23,499 --> 00:32:27,700
level vitals in the report to make sure

00:32:26,049 --> 00:32:30,669
that the dev has the opportunity to

00:32:27,700 --> 00:32:34,509
attack aggressively attack that defect

00:32:30,669 --> 00:32:36,609
that's been reported this is an example

00:32:34,509 --> 00:32:40,330
of one of our customers who's actually

00:32:36,609 --> 00:32:42,730
doing see I on a nightly basis today and

00:32:40,330 --> 00:32:44,889
they're actually transitioning to being

00:32:42,730 --> 00:32:47,859
able to do it multiple multiple times

00:32:44,889 --> 00:32:50,080
during the day this is an organization

00:32:47,859 --> 00:32:52,179
that you see that there's not a lot of

00:32:50,080 --> 00:32:54,700
activity from a unit test because

00:32:52,179 --> 00:32:57,509
they're relying on third-party dev but

00:32:54,700 --> 00:33:00,399
one of the things that I think is uh I

00:32:57,509 --> 00:33:03,220
always highlight as a key best practice

00:33:00,399 --> 00:33:05,919
for what they do is that at the start of

00:33:03,220 --> 00:33:08,049
their build as they transition into the

00:33:05,919 --> 00:33:08,500
test portion they're actually doing a

00:33:08,049 --> 00:33:10,330
seer

00:33:08,500 --> 00:33:13,510
of pre readiness checks that I discussed

00:33:10,330 --> 00:33:16,390
earlier and therefore the idea is to

00:33:13,510 --> 00:33:17,530
minimize the false positives that are

00:33:16,390 --> 00:33:19,180
just triggered by the environment

00:33:17,530 --> 00:33:22,020
failures that are triggered by the

00:33:19,180 --> 00:33:26,920
environment and not by a failed

00:33:22,020 --> 00:33:29,170
transaction itself and so in fact that's

00:33:26,920 --> 00:33:31,120
one of the key been the key aspects that

00:33:29,170 --> 00:33:33,400
they're doing and then secondly what

00:33:31,120 --> 00:33:36,160
they're focusing on right now is being

00:33:33,400 --> 00:33:38,800
able to reduce this approximately three

00:33:36,160 --> 00:33:40,570
and a half hour cycle and their goal is

00:33:38,800 --> 00:33:43,660
to be able to compress this to about a

00:33:40,570 --> 00:33:44,950
90 minute cycle so that they could run

00:33:43,660 --> 00:33:47,500
it throughout the day they're their

00:33:44,950 --> 00:33:49,840
first goal for from a daily execution

00:33:47,500 --> 00:33:51,490
perspective is to be able to run it in

00:33:49,840 --> 00:33:56,070
the morning in the run in the afternoon

00:33:51,490 --> 00:33:59,500
to get kind of inside the day feedback a

00:33:56,070 --> 00:34:01,840
second customer of ours is rabobank in

00:33:59,500 --> 00:34:04,720
the netherlands and this talks about the

00:34:01,840 --> 00:34:06,880
process that they are going through

00:34:04,720 --> 00:34:09,730
right now in terms of they've built this

00:34:06,880 --> 00:34:12,970
out as their roadmap for their CI

00:34:09,730 --> 00:34:14,919
practice and being able to use it as an

00:34:12,970 --> 00:34:16,899
example of where they ultimately want to

00:34:14,919 --> 00:34:19,419
go is that they want they're moving

00:34:16,899 --> 00:34:22,240
towards a continuous delivery objective

00:34:19,419 --> 00:34:25,990
they've defined as for themselves that

00:34:22,240 --> 00:34:29,139
their goal is to have the capacity to do

00:34:25,990 --> 00:34:31,300
10 releases in a day 10 releases in a

00:34:29,139 --> 00:34:35,139
day and that's not what they're

00:34:31,300 --> 00:34:36,850
anticipating actually doing but it's in

00:34:35,139 --> 00:34:39,730
terms of how they're sizing their team

00:34:36,850 --> 00:34:42,760
and scaling their process to deliver the

00:34:39,730 --> 00:34:44,169
business agility to deliver the business

00:34:42,760 --> 00:34:46,690
agility that they need for their

00:34:44,169 --> 00:34:49,740
organization and what they've done here

00:34:46,690 --> 00:34:52,899
is actually in terms of being able to

00:34:49,740 --> 00:34:55,360
not only build out this pattern but also

00:34:52,899 --> 00:34:57,910
understand from a build perspective of

00:34:55,360 --> 00:35:00,610
how they're traversing there are three

00:34:57,910 --> 00:35:03,250
different test environments from dev to

00:35:00,610 --> 00:35:06,720
QA and then they have an acceptance

00:35:03,250 --> 00:35:06,720
environment for their business

00:35:09,810 --> 00:35:13,710
with that we want to draw this

00:35:11,880 --> 00:35:15,570
conversation to a close and take any

00:35:13,710 --> 00:35:16,950
questions that you have but what we've

00:35:15,570 --> 00:35:19,560
what we've tried to do in this

00:35:16,950 --> 00:35:21,930
presentation is walk through sins to the

00:35:19,560 --> 00:35:25,080
specific challenges that we've heard our

00:35:21,930 --> 00:35:27,690
customers expressed as they've tried to

00:35:25,080 --> 00:35:29,970
introduce real devices and test

00:35:27,690 --> 00:35:32,130
automation into their CI practice and

00:35:29,970 --> 00:35:34,590
shared with you a series of best

00:35:32,130 --> 00:35:36,720
practices and then concluded by saying

00:35:34,590 --> 00:35:38,550
that we've actually we're working with

00:35:36,720 --> 00:35:40,500
customers we're actually successful at

00:35:38,550 --> 00:35:43,290
this and are actually maturing their

00:35:40,500 --> 00:35:46,230
implementation so take hope it's

00:35:43,290 --> 00:35:48,960
possible but definitely apply the best

00:35:46,230 --> 00:35:51,420
practices that you've heard us share as

00:35:48,960 --> 00:35:55,190
well as I'm sure others share thank you

00:35:51,420 --> 00:35:55,190
very much thank you so much

00:36:03,859 --> 00:36:05,920

YouTube URL: https://www.youtube.com/watch?v=jF_Cc3S-2oQ


