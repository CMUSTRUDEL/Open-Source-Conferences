Title: JUC U.S. East 2015 - Jenkins Workflow: What's Up?
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Jesse Glick, CloudBees 

The Workflow functionality for Jenkins lets you integrate complex, long-running processes with Jenkins as a management interface, going beyond basic continuous integration (CI). Since the 1.0 release in November 2014, there have been many new features (and bug fixes!) and people have started using it in earnest. Whether you have already begun setting up your own flows or are just interested in hearing what is possible, come and learn where Workflow is at today. This session will cover the basics of Workflow, the more important changes made in the past few months and ideas for the future. Current users, come prepared with questions and suggestions!
Captions: 
	00:00:15,290 --> 00:00:21,980
alright welcome everyone and like to

00:00:19,880 --> 00:00:25,640
welcome you to jenkins workflow what's

00:00:21,980 --> 00:00:28,400
up my name is Jesse Glick and I work for

00:00:25,640 --> 00:00:31,399
clad beads on all sorts of Jenkins

00:00:28,400 --> 00:00:36,260
related topics but in particular I work

00:00:31,399 --> 00:00:37,940
on workflow so we're going to talk today

00:00:36,260 --> 00:00:40,340
about some things that have been

00:00:37,940 --> 00:00:43,579
happening relatively recently and

00:00:40,340 --> 00:00:45,219
workflow and some some new features that

00:00:43,579 --> 00:00:48,440
are interesting I think you got a

00:00:45,219 --> 00:00:51,110
preview of some of the things from the

00:00:48,440 --> 00:00:52,990
keynote this morning with coast k for

00:00:51,110 --> 00:00:56,150
those of you who could go to the keynote

00:00:52,990 --> 00:00:58,400
well be going into some more depth about

00:00:56,150 --> 00:01:02,210
how those work and walk you through a

00:00:58,400 --> 00:01:06,530
demo of how workflow can solve some

00:01:02,210 --> 00:01:08,810
interesting problems so just for

00:01:06,530 --> 00:01:13,000
background for people who aren't so

00:01:08,810 --> 00:01:13,000
familiar with what Jenkins workflow is

00:01:13,210 --> 00:01:22,820
sometime sometime around the end of 2013

00:01:19,960 --> 00:01:26,350
I was talking with some people including

00:01:22,820 --> 00:01:29,630
Coast k and we were we were looking at

00:01:26,350 --> 00:01:32,330
this example of a build promotion

00:01:29,630 --> 00:01:35,030
pipeline so this was a continuous

00:01:32,330 --> 00:01:39,640
delivery example for a mobile

00:01:35,030 --> 00:01:42,650
application this version was for android

00:01:39,640 --> 00:01:46,610
operating system specifically but there

00:01:42,650 --> 00:01:50,390
were some variants that also built I us

00:01:46,610 --> 00:01:53,750
images and so on and it turned out that

00:01:50,390 --> 00:01:57,920
in order to do all of the tasks required

00:01:53,750 --> 00:02:00,740
to take developer source code for this

00:01:57,920 --> 00:02:02,720
entire application including multiple

00:02:00,740 --> 00:02:05,420
kinds of clients and some back-end code

00:02:02,720 --> 00:02:07,340
and build all of that and run

00:02:05,420 --> 00:02:12,500
integration tests for it and actually

00:02:07,340 --> 00:02:15,080
get it onto any kind of wipe system you

00:02:12,500 --> 00:02:18,920
end up needing to have several different

00:02:15,080 --> 00:02:22,280
jobs and Jenkins so on the right side

00:02:18,920 --> 00:02:24,200
you can see there's sort of a folder

00:02:22,280 --> 00:02:26,470
with a collection of different jobs with

00:02:24,200 --> 00:02:28,870
no clear relationship between them

00:02:26,470 --> 00:02:31,360
and on the left side is an example of

00:02:28,870 --> 00:02:34,210
part of the configuration screen for one

00:02:31,360 --> 00:02:36,490
of those jobs if I can remember I think

00:02:34,210 --> 00:02:41,260
this was for the the first one the dash

00:02:36,490 --> 00:02:43,780
Android job and in order to kind of

00:02:41,260 --> 00:02:46,810
figure out what the whole process was

00:02:43,780 --> 00:02:48,160
when you no soup to nuts when somebody

00:02:46,810 --> 00:02:50,470
actually checks in to change what

00:02:48,160 --> 00:02:52,390
happens you have to go through several

00:02:50,470 --> 00:02:55,300
different configuration screens you can

00:02:52,390 --> 00:02:57,190
see okay when when something that

00:02:55,300 --> 00:02:59,800
happened downstream of this was okay a

00:02:57,190 --> 00:03:01,959
then the little star appears next to

00:02:59,800 --> 00:03:03,670
that build of the upstream project and

00:03:01,959 --> 00:03:05,890
then something else happens in response

00:03:03,670 --> 00:03:07,690
to that so you have to jump back and

00:03:05,890 --> 00:03:09,880
forth between several configurations

00:03:07,690 --> 00:03:11,410
screens just to see what's happening and

00:03:09,880 --> 00:03:14,380
if you wanted to make some kind of

00:03:11,410 --> 00:03:17,050
change to the say you know a developer

00:03:14,380 --> 00:03:20,500
wanted to add experimental support for

00:03:17,050 --> 00:03:23,680
iOS and they wanted to you know have

00:03:20,500 --> 00:03:26,740
some peer reviewed change that would add

00:03:23,680 --> 00:03:27,790
I awesome to this mix it's not clear how

00:03:26,740 --> 00:03:29,470
you do that you'd have to go into

00:03:27,790 --> 00:03:32,470
Jenkins configuration and start

00:03:29,470 --> 00:03:34,180
rearranging this stuff and and play with

00:03:32,470 --> 00:03:41,200
it a few times and try to find something

00:03:34,180 --> 00:03:45,190
that works so in response to that in

00:03:41,200 --> 00:03:47,560
March of last year we started working on

00:03:45,190 --> 00:03:51,220
a feature called workflow and this is a

00:03:47,560 --> 00:03:54,820
new job type in Jenkins in which the

00:03:51,220 --> 00:03:59,290
entire process that you have can all fit

00:03:54,820 --> 00:04:02,140
into one script this is using groovy

00:03:59,290 --> 00:04:04,540
language it's a popular scripting

00:04:02,140 --> 00:04:08,920
oriented language that builds on top of

00:04:04,540 --> 00:04:10,690
Java it was already popular for all

00:04:08,920 --> 00:04:15,040
kinds of Jenkins extensions so we

00:04:10,690 --> 00:04:18,070
decided to go with that and the script

00:04:15,040 --> 00:04:21,010
can call different steps that that

00:04:18,070 --> 00:04:23,169
perform the meat of your work so first

00:04:21,010 --> 00:04:25,000
of all you need to do things on Jenkins

00:04:23,169 --> 00:04:27,070
slaves and you shouldn't really be doing

00:04:25,000 --> 00:04:28,540
anything on the master you should be

00:04:27,070 --> 00:04:31,270
farming out any of your real work to

00:04:28,540 --> 00:04:32,919
slave so first of all you need to get

00:04:31,270 --> 00:04:37,720
some of those slaves you need to select

00:04:32,919 --> 00:04:39,790
what operating system that's running for

00:04:37,720 --> 00:04:41,500
any kind of continuous integration ja

00:04:39,790 --> 00:04:44,410
you're going to be checking out sources

00:04:41,500 --> 00:04:47,740
of some kind from good or perforce or

00:04:44,410 --> 00:04:50,470
whatever it is you're using the main

00:04:47,740 --> 00:04:55,440
thing that your will typically do is run

00:04:50,470 --> 00:04:58,620
some other tool so make aunt maven etc

00:04:55,440 --> 00:05:01,300
some kind of build script tools

00:04:58,620 --> 00:05:03,820
different different commands that you

00:05:01,300 --> 00:05:08,110
have that are available on that

00:05:03,820 --> 00:05:10,060
operating system in some cases you might

00:05:08,110 --> 00:05:13,750
want to launch other Jenkins jobs if you

00:05:10,060 --> 00:05:17,230
if you need to keep some things in in a

00:05:13,750 --> 00:05:20,140
set of different jobs for some cases

00:05:17,230 --> 00:05:22,060
people wanted to have a human

00:05:20,140 --> 00:05:23,470
interaction as part of this process they

00:05:22,060 --> 00:05:26,820
didn't didn't want to have the entire

00:05:23,470 --> 00:05:29,560
thing run completely automated up to

00:05:26,820 --> 00:05:32,020
deployment into production sometimes

00:05:29,560 --> 00:05:34,920
people wanted to wait for a human

00:05:32,020 --> 00:05:37,950
approval of some steps so there might be

00:05:34,920 --> 00:05:41,410
you know Quality Assurance tester who's

00:05:37,950 --> 00:05:43,600
taking a look at a staged version of

00:05:41,410 --> 00:05:46,150
some application and is signing off on

00:05:43,600 --> 00:05:48,130
in saying yes this doesn't have any

00:05:46,150 --> 00:05:52,630
obvious flaws so I want this to proceed

00:05:48,130 --> 00:05:55,180
to the next stage so we we created all

00:05:52,630 --> 00:05:58,960
of these steps that let you do all of

00:05:55,180 --> 00:06:00,850
these things directly using something

00:05:58,960 --> 00:06:04,770
that really looks like a program instead

00:06:00,850 --> 00:06:08,080
of a big sprawling configuration screen

00:06:04,770 --> 00:06:10,060
and a program that you can you know keep

00:06:08,080 --> 00:06:13,450
and keeping version control that you can

00:06:10,060 --> 00:06:17,530
peer review you can you know treat like

00:06:13,450 --> 00:06:19,930
any other code another important thing

00:06:17,530 --> 00:06:22,150
that we wanted to deal with was the fact

00:06:19,930 --> 00:06:24,160
that we were hearing from a lot of

00:06:22,150 --> 00:06:29,280
people that they had these processes

00:06:24,160 --> 00:06:32,650
that were not just a 5-minute 20 minute

00:06:29,280 --> 00:06:34,150
continuous integration job so for a you

00:06:32,650 --> 00:06:37,360
know if you're just building a pretty

00:06:34,150 --> 00:06:38,920
small java component or a little c

00:06:37,360 --> 00:06:41,530
library or something like that it's

00:06:38,920 --> 00:06:44,740
probably just a quick quick build and it

00:06:41,530 --> 00:06:47,919
runs and it's done but some people had

00:06:44,740 --> 00:06:52,990
add these build processes that took 40

00:06:47,919 --> 00:06:53,650
hours for a single step or for the whole

00:06:52,990 --> 00:06:55,660
process

00:06:53,650 --> 00:06:59,620
you know particular build steps might

00:06:55,660 --> 00:07:01,449
only be 20 minutes but then it had to go

00:06:59,620 --> 00:07:04,690
on to a staging server and wait for

00:07:01,449 --> 00:07:06,940
someone to test it for 24 hours before

00:07:04,690 --> 00:07:09,310
they click ok so there's a bunch of

00:07:06,940 --> 00:07:12,400
things that could go on for hours or

00:07:09,310 --> 00:07:14,590
days and people didn't want to have to

00:07:12,400 --> 00:07:17,440
wait for the last thing to finish before

00:07:14,590 --> 00:07:18,940
they could restart Jenkins you know so

00:07:17,440 --> 00:07:21,130
if you wanted to update a plug-in or

00:07:18,940 --> 00:07:23,080
something you just want to update it you

00:07:21,130 --> 00:07:25,270
know during your 10-minute maintenance

00:07:23,080 --> 00:07:26,740
window and Sunday afternoon you don't

00:07:25,270 --> 00:07:30,010
want to have to kill off everything that

00:07:26,740 --> 00:07:32,199
was running and try to restart it all so

00:07:30,010 --> 00:07:34,060
we tried to make sure that the things

00:07:32,199 --> 00:07:40,449
you do with workflow can survive a

00:07:34,060 --> 00:07:43,090
Jenkins restart the important part so

00:07:40,449 --> 00:07:47,130
that's sort of background we released

00:07:43,090 --> 00:07:49,720
one diversion in november of last year

00:07:47,130 --> 00:07:52,660
and have been getting a pretty good

00:07:49,720 --> 00:07:55,000
stream of feedback since then so there's

00:07:52,660 --> 00:07:57,789
people sending messages the users list

00:07:55,000 --> 00:08:01,440
they've set up a stack overflow tag for

00:07:57,789 --> 00:08:04,270
people to ask him maybe answer questions

00:08:01,440 --> 00:08:08,080
and we've been talking to people and in

00:08:04,270 --> 00:08:12,250
various venues we had a summit in London

00:08:08,080 --> 00:08:14,560
in March I believe where we got some

00:08:12,250 --> 00:08:15,909
feedback in real world use cases so I

00:08:14,560 --> 00:08:19,300
want to talk about some of the things I

00:08:15,909 --> 00:08:26,080
have changed since the 10 released we

00:08:19,300 --> 00:08:29,710
just did a 180 lease very recently more

00:08:26,080 --> 00:08:32,190
or less these these new revisions have

00:08:29,710 --> 00:08:36,909
been coming about once a month so far

00:08:32,190 --> 00:08:39,550
they could come faster I suppose one

00:08:36,909 --> 00:08:41,260
major thing that we realized we needed

00:08:39,550 --> 00:08:44,440
was that people wanted to be able to

00:08:41,260 --> 00:08:47,560
keep their their whole script in version

00:08:44,440 --> 00:08:50,500
control along with along with their

00:08:47,560 --> 00:08:52,959
actual projects vs so they so the idea

00:08:50,500 --> 00:08:55,330
is that everything that your project is

00:08:52,959 --> 00:08:58,570
doing including the Jenkins component of

00:08:55,330 --> 00:09:01,660
it should all be version together in one

00:08:58,570 --> 00:09:05,230
repository so we've added some basic

00:09:01,660 --> 00:09:07,279
support for that so far one thing that

00:09:05,230 --> 00:09:09,199
wasn't so obvious

00:09:07,279 --> 00:09:11,240
that the start was at a lot of people

00:09:09,199 --> 00:09:13,610
migrating to work flow from other job

00:09:11,240 --> 00:09:16,610
type still wanted to keep some of their

00:09:13,610 --> 00:09:20,269
build builds and traditional Jenkins

00:09:16,610 --> 00:09:22,970
jobs and there's a build step that lets

00:09:20,269 --> 00:09:25,610
you launch other Jenkins jobs so called

00:09:22,970 --> 00:09:28,220
freestyle traditional GUI configuration

00:09:25,610 --> 00:09:31,459
jobs but it turned out a lot of people

00:09:28,220 --> 00:09:33,019
were using this and really relying on on

00:09:31,459 --> 00:09:36,439
that pretty heavily and so we need to

00:09:33,019 --> 00:09:38,959
add some some additional features to

00:09:36,439 --> 00:09:41,889
that to make it make it possible to to

00:09:38,959 --> 00:09:44,329
work as straight different jobs that way

00:09:41,889 --> 00:09:46,850
there are some changes with environment

00:09:44,329 --> 00:09:49,540
variable handling and and there are a

00:09:46,850 --> 00:09:52,879
bunch of bunch of things happened

00:09:49,540 --> 00:09:55,579
particularly in in March we've got a

00:09:52,879 --> 00:09:57,410
bunch of people together to implement a

00:09:55,579 --> 00:10:03,670
bunch of bug fixes and some minor

00:09:57,410 --> 00:10:07,339
enhancements and things like that the

00:10:03,670 --> 00:10:10,910
sort of the biggest work that's been

00:10:07,339 --> 00:10:14,029
going on since then okay falls into two

00:10:10,910 --> 00:10:16,939
main areas when one is a bunch of things

00:10:14,029 --> 00:10:21,230
that really needed to wait for new

00:10:16,939 --> 00:10:24,939
facilities in Jenkins core so he started

00:10:21,230 --> 00:10:28,149
off requiring Jenkins one dot 580 and

00:10:24,939 --> 00:10:32,329
now for the the current releases were

00:10:28,149 --> 00:10:36,110
requiring Jenkins 1609 so this is the

00:10:32,329 --> 00:10:38,300
latest long-term support release the one

00:10:36,110 --> 00:10:42,559
that's 609 dot one just came out a

00:10:38,300 --> 00:10:44,600
couple weeks ago and so we're taking

00:10:42,559 --> 00:10:49,509
advantage of some new stuff in this

00:10:44,600 --> 00:10:52,250
release so one important thing is that

00:10:49,509 --> 00:10:54,649
we're starting to offer compatibility

00:10:52,250 --> 00:10:56,149
for build wrappers so in a freestyle

00:10:54,649 --> 00:10:58,970
project when you go to the configuration

00:10:56,149 --> 00:11:01,339
screen you'll see a section above the

00:10:58,970 --> 00:11:04,069
build steps that says build environment

00:11:01,339 --> 00:11:07,939
or something like that and you can set

00:11:04,069 --> 00:11:10,069
up some some plugins which affect the

00:11:07,939 --> 00:11:12,410
entire build and sort of set a context

00:11:10,069 --> 00:11:14,329
for it and some of those are pretty

00:11:12,410 --> 00:11:16,579
important and so we need to make some

00:11:14,329 --> 00:11:17,929
changes in Jenkins to make sure that we

00:11:16,579 --> 00:11:20,990
could support those from a workflow too

00:11:17,929 --> 00:11:25,010
and now finally some of that's possible

00:11:20,990 --> 00:11:26,450
so most of these basically set some set

00:11:25,010 --> 00:11:28,640
up some environment for the build and

00:11:26,450 --> 00:11:31,220
then tear stuff down at the end of it

00:11:28,640 --> 00:11:33,200
from within a workflow you can set up

00:11:31,220 --> 00:11:35,089
that environment and tear it down as an

00:11:33,200 --> 00:11:36,430
explicit step anywhere within the flow

00:11:35,089 --> 00:11:38,690
so you can actually have different

00:11:36,430 --> 00:11:44,649
environments on different machines and

00:11:38,690 --> 00:11:50,360
different orders so 11 important one is

00:11:44,649 --> 00:11:53,050
called the ex fiancée plug-in so VNC is

00:11:50,360 --> 00:11:59,870
a sort of a remote desktop system and

00:11:53,050 --> 00:12:03,290
XBMC is a version of it for unix servers

00:11:59,870 --> 00:12:05,540
that lets you have a simulated display

00:12:03,290 --> 00:12:07,279
and this is really really important for

00:12:05,540 --> 00:12:09,290
anybody who's doing any kind of UI

00:12:07,279 --> 00:12:12,890
testing so i'm going to show a demo of

00:12:09,290 --> 00:12:14,959
this being used with workflow another

00:12:12,890 --> 00:12:17,690
really popular one is the time stamp or

00:12:14,959 --> 00:12:19,550
plugin that lets that basically puts

00:12:17,690 --> 00:12:21,980
time stamps into your bill blog wherever

00:12:19,550 --> 00:12:26,560
you're doing steps you can see how long

00:12:21,980 --> 00:12:29,000
each thing took that integration is now

00:12:26,560 --> 00:12:33,800
going to be available as soon as the

00:12:29,000 --> 00:12:35,990
plugin maintainer does a release there's

00:12:33,800 --> 00:12:39,380
a configuration files plugin it's also

00:12:35,990 --> 00:12:41,770
pretty popular for keeping some special

00:12:39,380 --> 00:12:45,740
files on the Jenkins master things like

00:12:41,770 --> 00:12:47,899
one example is maven build settings for

00:12:45,740 --> 00:12:51,649
connecting two different repositories

00:12:47,899 --> 00:12:54,410
and things like that you it's useful to

00:12:51,649 --> 00:12:56,890
keep those on the master and then refer

00:12:54,410 --> 00:13:00,500
to them from a build and so that

00:12:56,890 --> 00:13:05,630
integration is ready to go somebody just

00:13:00,500 --> 00:13:08,300
has to click the merge me button and one

00:13:05,630 --> 00:13:11,600
thing that people really often need to

00:13:08,300 --> 00:13:15,890
do is deal with credentials so you want

00:13:11,600 --> 00:13:18,820
your build to be able to deploy to

00:13:15,890 --> 00:13:20,660
particular servers check out from

00:13:18,820 --> 00:13:23,410
authenticated version control

00:13:20,660 --> 00:13:26,660
repositories and do all of these things

00:13:23,410 --> 00:13:30,709
and a lot of cases you just want to be

00:13:26,660 --> 00:13:32,990
able to pass that password or sometimes

00:13:30,709 --> 00:13:33,950
it's a special file with the signature

00:13:32,990 --> 00:13:35,420
key

00:13:33,950 --> 00:13:39,470
something like that you want to be able

00:13:35,420 --> 00:13:41,300
to pass that into a build the

00:13:39,470 --> 00:13:44,630
credentials binding plug-in is available

00:13:41,300 --> 00:13:47,780
for that alessi take any kind of secret

00:13:44,630 --> 00:13:50,630
that you can store on jenkins and use it

00:13:47,780 --> 00:13:52,520
directly from a workflow so you can keep

00:13:50,630 --> 00:13:55,820
your build script clean of anything

00:13:52,520 --> 00:14:00,800
secret but can just refer to secrets

00:13:55,820 --> 00:14:05,330
that you persist on jenkins the other

00:14:00,800 --> 00:14:07,790
major area functionality that required a

00:14:05,330 --> 00:14:10,640
new version of jenkins is we wanted to

00:14:07,790 --> 00:14:13,130
clean up how workflows appear when

00:14:10,640 --> 00:14:15,530
you're running a bunch of these things

00:14:13,130 --> 00:14:17,810
so these can again these can potentially

00:14:15,530 --> 00:14:24,200
be running for days on end and they're

00:14:17,810 --> 00:14:26,380
not necessarily active the whole time so

00:14:24,200 --> 00:14:29,420
one thing you want to be able to do is

00:14:26,380 --> 00:14:33,920
you can restart while a workflow is

00:14:29,420 --> 00:14:36,110
running without losing state but using

00:14:33,920 --> 00:14:38,390
the newest version it means that if you

00:14:36,110 --> 00:14:40,280
go to say free start in jenkins so if

00:14:38,390 --> 00:14:43,610
you ask update a plug-in and restart

00:14:40,280 --> 00:14:45,680
when jenkins is idle that will now

00:14:43,610 --> 00:14:48,260
restart as soon as all of the

00:14:45,680 --> 00:14:49,760
traditional jobs have finished but if

00:14:48,260 --> 00:14:52,010
some workflow jobs are running it will

00:14:49,760 --> 00:14:53,570
just go ahead and restart immediately so

00:14:52,010 --> 00:15:00,470
you don't have to wait for those to

00:14:53,570 --> 00:15:02,330
finish and we're also cleaning up a

00:15:00,470 --> 00:15:04,370
native thread usage so that we're

00:15:02,330 --> 00:15:09,620
consuming less resources while it's

00:15:04,370 --> 00:15:12,110
running and and there's a change to how

00:15:09,620 --> 00:15:16,060
the display of the running flow works

00:15:12,110 --> 00:15:16,060
which will be better seen in a demo

00:15:16,090 --> 00:15:20,750
probably the biggest thing that we've

00:15:17,990 --> 00:15:23,660
been working on the reason that there

00:15:20,750 --> 00:15:26,900
haven't been lots of little features in

00:15:23,660 --> 00:15:28,910
the in the small releases since march is

00:15:26,900 --> 00:15:30,830
that we've been working on dr.

00:15:28,910 --> 00:15:32,660
integration so we've probably been

00:15:30,830 --> 00:15:35,390
hearing tons and tons of hype about

00:15:32,660 --> 00:15:40,250
docker and there was some some

00:15:35,390 --> 00:15:44,110
information about it the keynote so if

00:15:40,250 --> 00:15:46,940
you you can think of docker as a way of

00:15:44,110 --> 00:15:47,720
portably deploying applications into

00:15:46,940 --> 00:15:51,589
production

00:15:47,720 --> 00:15:53,300
and there's new workflow integration in

00:15:51,589 --> 00:15:58,790
a plugin called plow bees docker

00:15:53,300 --> 00:16:02,180
workflow that lets you do that so it

00:15:58,790 --> 00:16:04,430
lets you build applications it from

00:16:02,180 --> 00:16:06,680
sources into different kind of

00:16:04,430 --> 00:16:09,560
containers and then push them to dr.

00:16:06,680 --> 00:16:13,160
registries and so on but another really

00:16:09,560 --> 00:16:15,050
important thing that it does which is

00:16:13,160 --> 00:16:18,610
maybe less obvious is that it turns out

00:16:15,050 --> 00:16:20,899
docker is the ideal way to simplify

00:16:18,610 --> 00:16:22,790
continuous integration infrastructure

00:16:20,899 --> 00:16:25,490
even for applications that couldn't

00:16:22,790 --> 00:16:26,899
possibly be deployed in darker than for

00:16:25,490 --> 00:16:30,680
applications that are server

00:16:26,899 --> 00:16:32,329
applications at all docker as long as

00:16:30,680 --> 00:16:35,209
your build can run on Linux somehow

00:16:32,329 --> 00:16:38,060
that's the only consideration right now

00:16:35,209 --> 00:16:41,060
and Microsoft is does claim to be

00:16:38,060 --> 00:16:43,540
working on a Windows version docker

00:16:41,060 --> 00:16:46,370
provides a really really nice way to

00:16:43,540 --> 00:16:49,519
totally isolate and define the build

00:16:46,370 --> 00:16:52,399
environment for for any kind of build

00:16:49,519 --> 00:16:55,790
steps you're doing I'm going to show how

00:16:52,399 --> 00:16:58,220
this is the makes it a lot simpler to

00:16:55,790 --> 00:17:00,949
specify a build environment basically

00:16:58,220 --> 00:17:04,669
and before this kind of feature is

00:17:00,949 --> 00:17:07,459
available if you wanted if you had sort

00:17:04,669 --> 00:17:10,130
of specialized tooling requirements for

00:17:07,459 --> 00:17:12,770
Jenkins builds you had to put a lot of

00:17:10,130 --> 00:17:14,419
effort into making sure that the Jenkins

00:17:12,770 --> 00:17:17,030
slave was set up in a very particular

00:17:14,419 --> 00:17:19,100
way so either you had to install a bunch

00:17:17,030 --> 00:17:21,140
of stuff on the slave and tune the

00:17:19,100 --> 00:17:22,309
particular you know the exact version of

00:17:21,140 --> 00:17:25,069
the operating system in all these

00:17:22,309 --> 00:17:27,860
libraries for it or you had to find

00:17:25,069 --> 00:17:31,309
various ways of downloading tools on

00:17:27,860 --> 00:17:34,190
demand into the slave for the needs of

00:17:31,309 --> 00:17:36,020
particular projects and so on and it got

00:17:34,190 --> 00:17:39,470
pretty hard to manage it was a lot of

00:17:36,020 --> 00:17:42,140
burden on the Jenkins administrator with

00:17:39,470 --> 00:17:43,880
this system it's much easier to put all

00:17:42,140 --> 00:17:50,659
of that information right into the build

00:17:43,880 --> 00:17:53,049
process itself so i am going to show how

00:17:50,659 --> 00:17:53,049
that works

00:17:54,190 --> 00:18:04,570
we have a workflow here that they've

00:17:58,659 --> 00:18:07,059
imagine if we call dr. workflow if you

00:18:04,570 --> 00:18:09,490
go to the configuration screen is this

00:18:07,059 --> 00:18:15,460
font size legible in the back I hope

00:18:09,490 --> 00:18:17,320
it's big enough okay so there's really

00:18:15,460 --> 00:18:22,389
not much in the configuration screen

00:18:17,320 --> 00:18:25,929
basically all it says is yes go to go to

00:18:22,389 --> 00:18:29,110
some repository get repository in this

00:18:25,929 --> 00:18:31,659
case look for a file called flow deck

00:18:29,110 --> 00:18:34,419
groovy and run everything you see there

00:18:31,659 --> 00:18:37,470
so the Jenkins job configuration is

00:18:34,419 --> 00:18:40,870
pretty doll and that's that's the point

00:18:37,470 --> 00:18:42,759
really there's you could you could drop

00:18:40,870 --> 00:18:43,990
this configuration into any Jenkins

00:18:42,759 --> 00:18:46,000
server and it's going to run about the

00:18:43,990 --> 00:18:48,519
same really the only thing that's been

00:18:46,000 --> 00:18:54,340
set up on the server that's it all

00:18:48,519 --> 00:18:56,649
specific to this job is that we've set

00:18:54,340 --> 00:18:59,710
up one item of credentials so we're

00:18:56,649 --> 00:19:02,169
keeping a password stored encrypted form

00:18:59,710 --> 00:19:05,289
on the Jenkins master rather than in the

00:19:02,169 --> 00:19:08,700
job definition itself so this is just a

00:19:05,289 --> 00:19:11,129
in this case this is a login into docker

00:19:08,700 --> 00:19:14,110
registry which is a place where you

00:19:11,129 --> 00:19:15,909
publish different docker images for

00:19:14,110 --> 00:19:21,360
containers you want to run and there's

00:19:15,909 --> 00:19:26,850
some super-secret password in here okay

00:19:21,360 --> 00:19:30,039
and if you start this up anyone who's

00:19:26,850 --> 00:19:32,889
run earlier workflow releases de NEX

00:19:30,039 --> 00:19:35,379
yeah anyone who's run earlier workflow

00:19:32,889 --> 00:19:39,129
releases may notice a subtle difference

00:19:35,379 --> 00:19:41,169
so there's only one item showing here

00:19:39,129 --> 00:19:44,110
which is the part of docker workflow and

00:19:41,169 --> 00:19:49,179
then sometimes temporarily dr. workflow

00:19:44,110 --> 00:19:51,370
itself shows up so the this temporary

00:19:49,179 --> 00:19:52,929
thing that shows up at the bottom is the

00:19:51,370 --> 00:19:55,659
groovy script itself so that's the

00:19:52,929 --> 00:19:58,840
program logic so when that when that

00:19:55,659 --> 00:20:02,110
item appears always on the master that

00:19:58,840 --> 00:20:04,960
means that your build is talking to

00:20:02,110 --> 00:20:06,320
Jenkins or it's running logic and you

00:20:04,960 --> 00:20:10,149
want that to be a

00:20:06,320 --> 00:20:12,590
a tiny fraction of the whole process

00:20:10,149 --> 00:20:15,590
everything else is really going to be

00:20:12,590 --> 00:20:18,799
running some external process on the

00:20:15,590 --> 00:20:23,840
slave and so that shows up in this this

00:20:18,799 --> 00:20:29,389
main part that that runs here so if you

00:20:23,840 --> 00:20:31,730
go to the bill blog occurs to me to be

00:20:29,389 --> 00:20:34,130
nice to be able to hide this whole side

00:20:31,730 --> 00:20:37,580
panel for presentation purposes you went

00:20:34,130 --> 00:20:39,740
wine rap like this so it's doing a bunch

00:20:37,580 --> 00:20:42,799
of stuff for us it's basically checking

00:20:39,740 --> 00:20:44,870
out some it checked out some sources

00:20:42,799 --> 00:20:48,620
from get and then it's doing a bunch of

00:20:44,870 --> 00:20:53,029
docker operations here so I'm going to

00:20:48,620 --> 00:20:57,019
do is switch over to the flow script and

00:20:53,029 --> 00:21:00,620
let's see if I can make this slightly is

00:20:57,019 --> 00:21:02,980
that let's see can people still read

00:21:00,620 --> 00:21:07,009
that or is a little bit too small

00:21:02,980 --> 00:21:10,220
they'll make it this size I hope you can

00:21:07,009 --> 00:21:14,779
read it without even if you don't have a

00:21:10,220 --> 00:21:17,450
perfect glasses prescription so as you

00:21:14,779 --> 00:21:19,190
can see this is not terribly long so

00:21:17,450 --> 00:21:22,009
even with lots of comments in white

00:21:19,190 --> 00:21:24,350
space or you know we're looking at a

00:21:22,009 --> 00:21:26,409
really low screen resolution we're only

00:21:24,350 --> 00:21:28,669
looking at a couple pages of

00:21:26,409 --> 00:21:30,409
configuration for this so it's it's

00:21:28,669 --> 00:21:32,870
short enough that you can mentally

00:21:30,409 --> 00:21:35,059
digest what it's doing and if you want

00:21:32,870 --> 00:21:37,220
to make an edit you can comment out a

00:21:35,059 --> 00:21:41,539
line or add an extra line that looks

00:21:37,220 --> 00:21:45,679
like a similar one so what we're

00:21:41,539 --> 00:21:47,629
starting up doing is its first that

00:21:45,679 --> 00:21:51,409
we're saying we're going to be using

00:21:47,629 --> 00:21:54,649
this particular image called maven 333

00:21:51,409 --> 00:21:58,519
jdk 8 so this is a publicly available

00:21:54,649 --> 00:22:00,769
image you can get on docker hub and this

00:21:58,519 --> 00:22:04,519
this is someone who knows something

00:22:00,769 --> 00:22:06,889
about maven build tool has said okay I'm

00:22:04,519 --> 00:22:09,980
going to take the 333 release of it on a

00:22:06,889 --> 00:22:14,720
particular version of I think this is

00:22:09,980 --> 00:22:19,460
debian linux with a particular build of

00:22:14,720 --> 00:22:19,670
jdk 8 and i'm going to package all of

00:22:19,460 --> 00:22:22,730
that

00:22:19,670 --> 00:22:24,590
into a container that provides a

00:22:22,730 --> 00:22:26,480
well-defined development environment so

00:22:24,590 --> 00:22:29,390
whenever you get that image with that

00:22:26,480 --> 00:22:30,980
tag you know exactly what version of all

00:22:29,390 --> 00:22:33,170
the tools here running you don't have to

00:22:30,980 --> 00:22:35,210
guess whether there was some weird

00:22:33,170 --> 00:22:38,240
update got applied behind your back or

00:22:35,210 --> 00:22:39,560
anything like that so we're just taking

00:22:38,240 --> 00:22:41,410
advantage of the work someone else is

00:22:39,560 --> 00:22:44,030
done and picking up the standard image

00:22:41,410 --> 00:22:45,740
because it's a good it's a useful image

00:22:44,030 --> 00:22:52,310
for building maven based projects

00:22:45,740 --> 00:22:53,900
without any extra work and then we're

00:22:52,310 --> 00:22:55,970
going to be using a custom docker

00:22:53,900 --> 00:22:59,150
registry so this demo actually includes

00:22:55,970 --> 00:23:00,590
a private doctor register ace this was

00:22:59,150 --> 00:23:03,680
it would be something you would use if

00:23:00,590 --> 00:23:05,930
you if your company wanted to publish

00:23:03,680 --> 00:23:09,670
images internally and then sort of look

00:23:05,930 --> 00:23:09,670
at them before they go out to others and

00:23:11,020 --> 00:23:17,660
this docker keyword is what's introduced

00:23:16,070 --> 00:23:19,640
by this new plug-in so this is sort of

00:23:17,660 --> 00:23:21,230
the entry point to anything relating to

00:23:19,640 --> 00:23:24,590
doctor you need to do you just say doc

00:23:21,230 --> 00:23:29,600
or dot something and by the way you can

00:23:24,590 --> 00:23:33,950
get a full you can get full syntax

00:23:29,600 --> 00:23:38,480
reference right inside Jenkins if you go

00:23:33,950 --> 00:23:41,750
to the snippet generator this is sort of

00:23:38,480 --> 00:23:43,580
the the inline help then it has a list

00:23:41,750 --> 00:23:46,400
of global variables you can access and

00:23:43,580 --> 00:23:50,980
the and for dr. it has a lesson tax

00:23:46,400 --> 00:23:55,970
reference and then we also have some

00:23:50,980 --> 00:23:58,430
documentation for these cone and we also

00:23:55,970 --> 00:24:00,740
have a full user guide that shows how to

00:23:58,430 --> 00:24:05,150
use this in context if you want that as

00:24:00,740 --> 00:24:09,620
well so we're saying we want to use a

00:24:05,150 --> 00:24:12,350
custom docker server and this is the

00:24:09,620 --> 00:24:16,510
location of it and this is all you need

00:24:12,350 --> 00:24:16,510
to do to log into it so if anyone has

00:24:16,900 --> 00:24:23,030
tried to deal with with authentication

00:24:20,390 --> 00:24:24,860
to dr. servers and registries it can be

00:24:23,030 --> 00:24:26,780
a little bit complicated this serve

00:24:24,860 --> 00:24:28,640
hides all of those details you just

00:24:26,780 --> 00:24:32,230
configure credentials with those names

00:24:28,640 --> 00:24:37,030
in Jenkins so this is going back to

00:24:32,230 --> 00:24:39,700
I can leave this page this is just

00:24:37,030 --> 00:24:44,350
looking up the this password by that ID

00:24:39,700 --> 00:24:46,020
in Jenkins there's also a with server

00:24:44,350 --> 00:24:50,020
the lets you access a password-protected

00:24:46,020 --> 00:24:51,880
or special internal docker server to

00:24:50,020 --> 00:24:55,780
otherwise we just use whatever is

00:24:51,880 --> 00:24:58,660
running on the local machine and then

00:24:55,780 --> 00:25:01,510
the magic happens here so so we take

00:24:58,660 --> 00:25:02,890
this this maven image that we found on

00:25:01,510 --> 00:25:05,830
docker hub that looked like a good idea

00:25:02,890 --> 00:25:08,440
and we say run the following steps

00:25:05,830 --> 00:25:15,000
inside of it so what this means is that

00:25:08,440 --> 00:25:18,280
within this block Jenkins has started a

00:25:15,000 --> 00:25:21,070
new doctor container a throw a temporary

00:25:18,280 --> 00:25:23,590
container based on that image and any

00:25:21,070 --> 00:25:26,950
kind of processes that you run within

00:25:23,590 --> 00:25:30,370
that block so here I'm saying run a

00:25:26,950 --> 00:25:32,049
shell step run mvn maven doesn't have to

00:25:30,370 --> 00:25:34,540
be installed on the Jenkins slave at all

00:25:32,049 --> 00:25:35,890
this can be a totally stock generic

00:25:34,540 --> 00:25:39,610
Jenkins slave it just needs a doctor

00:25:35,890 --> 00:25:43,929
installation mvn here is actually user

00:25:39,610 --> 00:25:46,240
bin mvn inside that particular maven

00:25:43,929 --> 00:25:48,549
container so when we run mvn we know

00:25:46,240 --> 00:25:50,650
that we're running maven 333 and we're

00:25:48,549 --> 00:25:53,380
using a particular version of JDK to run

00:25:50,650 --> 00:25:55,660
it so all of the guesswork about what

00:25:53,380 --> 00:25:59,049
exactly you're running goes away if this

00:25:55,660 --> 00:26:02,770
build fails you can just say say to your

00:25:59,049 --> 00:26:05,049
developers hey this failed you get that

00:26:02,770 --> 00:26:06,700
that maven image please and try to

00:26:05,049 --> 00:26:08,919
reproduce on your laptop and they can

00:26:06,700 --> 00:26:10,840
just they can just do a doctor run on

00:26:08,919 --> 00:26:12,790
their laptop get the exact same

00:26:10,840 --> 00:26:15,100
environment and try to build their code

00:26:12,790 --> 00:26:17,500
in the identical environment to what

00:26:15,100 --> 00:26:19,690
Jenkins is using so it takes a lot of

00:26:17,500 --> 00:26:25,510
the guesswork out of out of continuous

00:26:19,690 --> 00:26:29,530
integration in this case we want to

00:26:25,510 --> 00:26:31,900
actually build a docker image for our

00:26:29,530 --> 00:26:34,540
applications this is this is going to be

00:26:31,900 --> 00:26:37,240
a web application we want to create it

00:26:34,540 --> 00:26:41,110
as a docker image so the way that we're

00:26:37,240 --> 00:26:44,450
doing that is um is we're saying after

00:26:41,110 --> 00:26:48,800
we've built a war file so Java Web

00:26:44,450 --> 00:26:52,450
kive I want to build a new docker

00:26:48,800 --> 00:26:58,670
container based on that and when you

00:26:52,450 --> 00:27:00,470
let's go over to the project sources so

00:26:58,670 --> 00:27:03,560
this is asking to build it from inside

00:27:00,470 --> 00:27:05,840
the app directory and this is the

00:27:03,560 --> 00:27:08,330
application this pom.xml is basically

00:27:05,840 --> 00:27:11,720
the maven build script but we have a

00:27:08,330 --> 00:27:13,610
doctor file here too and the doctor

00:27:11,720 --> 00:27:18,560
files what Jenkins is running after it

00:27:13,610 --> 00:27:20,900
does the maven build and this this build

00:27:18,560 --> 00:27:24,710
is pretty simple so it says take a

00:27:20,900 --> 00:27:26,780
standard tomcat image so an application

00:27:24,710 --> 00:27:29,300
server this is just a generic image that

00:27:26,780 --> 00:27:30,800
just runs this application server and

00:27:29,300 --> 00:27:34,040
expects your application to be in a

00:27:30,800 --> 00:27:36,470
particular place and we're just taking

00:27:34,040 --> 00:27:38,870
the the application binary we just built

00:27:36,470 --> 00:27:39,830
and copy it into the web apps directory

00:27:38,870 --> 00:27:42,530
where it will get picked up

00:27:39,830 --> 00:27:43,910
automatically and watched if so whenever

00:27:42,530 --> 00:27:46,220
tomcat finds anything in that directory

00:27:43,910 --> 00:27:51,610
launches it so we've just created a

00:27:46,220 --> 00:27:58,790
custom image so if you go back to the

00:27:51,610 --> 00:28:04,550
bill blog you can see somewhere here so

00:27:58,790 --> 00:28:07,610
you ran our maven build and then where

00:28:04,550 --> 00:28:09,620
we're building a docker container so

00:28:07,610 --> 00:28:11,720
it's just to transfer a bunch of stuff

00:28:09,620 --> 00:28:14,300
to the doc or demon and it's saying add

00:28:11,720 --> 00:28:17,330
a door new application and we

00:28:14,300 --> 00:28:21,800
successfully built this new image that

00:28:17,330 --> 00:28:23,180
we just created with the workflow

00:28:21,800 --> 00:28:24,650
integration you can just give that a

00:28:23,180 --> 00:28:28,160
name you can just treat it as a local

00:28:24,650 --> 00:28:31,910
variable so this is our pet clinic image

00:28:28,160 --> 00:28:36,050
and then one line just a pet clinic

00:28:31,910 --> 00:28:38,960
image push so that that says okay go and

00:28:36,050 --> 00:28:42,290
take that image and push it to our

00:28:38,960 --> 00:28:44,720
internal Dhaka repository so Jenkins

00:28:42,290 --> 00:28:47,360
constructed the right doctor command

00:28:44,720 --> 00:28:49,520
line for it so it has to that's to do

00:28:47,360 --> 00:28:51,260
some pre fixing of the name with a

00:28:49,520 --> 00:28:54,410
registry location and all this stuff

00:28:51,260 --> 00:28:55,940
that takes care of for you and the

00:28:54,410 --> 00:28:58,640
registry comes back and says okay I

00:28:55,940 --> 00:29:01,010
successfully took that and

00:28:58,640 --> 00:29:03,080
and I gave it I gave it a tag based on

00:29:01,010 --> 00:29:04,790
the Jenkins build number so this is sort

00:29:03,080 --> 00:29:07,910
of basically what we're doing here is

00:29:04,790 --> 00:29:09,440
just archiving the application as we

00:29:07,910 --> 00:29:10,910
built it in this job for future

00:29:09,440 --> 00:29:13,010
reference so if we ever need to go back

00:29:10,910 --> 00:29:15,860
and say you know there's some sort of

00:29:13,010 --> 00:29:17,060
really important bug in this version do

00:29:15,860 --> 00:29:19,730
you still have a copy of the application

00:29:17,060 --> 00:29:21,470
as it stood at that you know on Tuesday

00:29:19,730 --> 00:29:25,550
yeah you have a tagged in your

00:29:21,470 --> 00:29:27,500
repository under this name but we're not

00:29:25,550 --> 00:29:30,530
going to promote it to anything further

00:29:27,500 --> 00:29:32,480
until we do some tests on it okay we

00:29:30,530 --> 00:29:35,630
want to see if it really works so in

00:29:32,480 --> 00:29:40,310
order to do the testing I want to start

00:29:35,630 --> 00:29:46,220
up a separate docker container so for

00:29:40,310 --> 00:29:48,590
this i'm going to say build from the

00:29:46,220 --> 00:29:52,040
test subdirectory and it's building a

00:29:48,590 --> 00:29:54,200
totally unrelated project here actually

00:29:52,040 --> 00:29:56,030
i happen to keep them both in the same

00:29:54,200 --> 00:29:57,350
get repository for convenience but these

00:29:56,030 --> 00:29:59,030
could actually be in different

00:29:57,350 --> 00:30:03,230
repositories maintained by different

00:29:59,030 --> 00:30:05,120
teams even so test this also happens to

00:30:03,230 --> 00:30:06,740
be a maven project but it doesn't have

00:30:05,120 --> 00:30:10,790
to be this is something that's running

00:30:06,740 --> 00:30:11,870
selenium UI testing but you could have

00:30:10,790 --> 00:30:15,830
you know you could have written this

00:30:11,870 --> 00:30:20,870
using Ruby makes it convenient to do

00:30:15,830 --> 00:30:23,150
these kinds of tests as well and here's

00:30:20,870 --> 00:30:26,680
here's the test and all of its glorious

00:30:23,150 --> 00:30:29,870
is not a very exciting use of selenium

00:30:26,680 --> 00:30:33,230
we're just saying expect that the

00:30:29,870 --> 00:30:35,120
application is running at this URL so

00:30:33,230 --> 00:30:36,650
I'm not going to try to inject a URL or

00:30:35,120 --> 00:30:38,780
anything I'm just going to assume that

00:30:36,650 --> 00:30:43,130
this is this hard coded URLs where it is

00:30:38,780 --> 00:30:44,750
and start up Firefox and visit the

00:30:43,130 --> 00:30:47,360
homepage and see if we got the right

00:30:44,750 --> 00:30:53,810
title so really third simple selenium

00:30:47,360 --> 00:30:55,940
test mhm now running running selenium

00:30:53,810 --> 00:30:59,450
tests can be kind of a pain when you try

00:30:55,940 --> 00:31:00,980
to set it up from scratch because okay

00:30:59,450 --> 00:31:02,810
you need to make sure every you know

00:31:00,980 --> 00:31:04,850
everything's connected that your tests

00:31:02,810 --> 00:31:07,460
are finding the application in the right

00:31:04,850 --> 00:31:10,700
place more to the point it's it's tricky

00:31:07,460 --> 00:31:12,300
because the selenium tests are normally

00:31:10,700 --> 00:31:14,820
actually a fire up alive

00:31:12,300 --> 00:31:17,310
browser and getting that to run

00:31:14,820 --> 00:31:18,930
correctly on a server can be tricky it

00:31:17,310 --> 00:31:22,020
be as a server usually as no graphics

00:31:18,930 --> 00:31:26,490
card has no display so you want to use

00:31:22,020 --> 00:31:28,560
something like X fiancée so what we're

00:31:26,490 --> 00:31:30,720
going to do is we're going to take our

00:31:28,560 --> 00:31:35,370
application image the pet clinic and

00:31:30,720 --> 00:31:37,320
we're going to say run that and there's

00:31:35,370 --> 00:31:39,690
there's the groovy syntax for a closure

00:31:37,320 --> 00:31:41,550
so we're saying take take the

00:31:39,690 --> 00:31:45,440
application that we just run and name

00:31:41,550 --> 00:31:47,700
and give this name pet clinic to the

00:31:45,440 --> 00:31:49,500
doctor container this actually running

00:31:47,700 --> 00:31:51,660
it so you have this or a virtual machine

00:31:49,500 --> 00:31:53,730
that's running tomcat with our newly

00:31:51,660 --> 00:31:57,720
built application and it's sitting

00:31:53,730 --> 00:32:01,710
waiting for us and then we're going to

00:31:57,720 --> 00:32:06,150
we've built another docker image with

00:32:01,710 --> 00:32:09,180
our that is intended only for running

00:32:06,150 --> 00:32:11,190
our tests and so we have another docker

00:32:09,180 --> 00:32:12,840
file just for the test environment

00:32:11,190 --> 00:32:15,660
that's totally unrelated to the

00:32:12,840 --> 00:32:17,370
application build environment but it's

00:32:15,660 --> 00:32:19,350
still part of our project sources so if

00:32:17,370 --> 00:32:20,940
you need to tweak something here you

00:32:19,350 --> 00:32:23,370
just make an edit to this file and

00:32:20,940 --> 00:32:25,620
commit and everything gets updated along

00:32:23,370 --> 00:32:27,150
with that so this image for running the

00:32:25,620 --> 00:32:29,130
test is a little different it's also

00:32:27,150 --> 00:32:33,270
using maven in this case it happens to

00:32:29,130 --> 00:32:37,380
be but we're also running a VNC server

00:32:33,270 --> 00:32:39,390
and I also asked to install this package

00:32:37,380 --> 00:32:42,750
iceweasel this is the Debian Linux

00:32:39,390 --> 00:32:45,240
version of Firefox so I want to have a

00:32:42,750 --> 00:32:47,910
simulated GUI environment including

00:32:45,240 --> 00:32:50,430
Firefox web browser inside my test

00:32:47,910 --> 00:32:52,290
environment and this this installation

00:32:50,430 --> 00:32:55,520
step by the way downloads you know

00:32:52,290 --> 00:32:58,730
hundreds Meg's and stuff and and

00:32:55,520 --> 00:33:02,450
installs a bunch of packages but when

00:32:58,730 --> 00:33:04,800
but dr. Cash's all of that stuff so

00:33:02,450 --> 00:33:07,440
you'll see when you run incremental

00:33:04,800 --> 00:33:09,840
builds that it just says using cash

00:33:07,440 --> 00:33:11,460
using cash using cash so as long as I

00:33:09,840 --> 00:33:12,600
haven't changed this docker file and

00:33:11,460 --> 00:33:14,850
they haven't adjusted my build

00:33:12,600 --> 00:33:18,090
environment this just takes a couple

00:33:14,850 --> 00:33:20,820
seconds to to recreate a complete image

00:33:18,090 --> 00:33:22,260
for my test environment and again I

00:33:20,820 --> 00:33:24,120
haven't touched anything about the slave

00:33:22,260 --> 00:33:26,220
configuration this you know so i don't

00:33:24,120 --> 00:33:28,140
have to set up firefox on

00:33:26,220 --> 00:33:30,179
jenkins slave it's can run on any

00:33:28,140 --> 00:33:38,429
Jenkins slave anywhere as long as it's

00:33:30,179 --> 00:33:42,530
Lennox with docker and and then I'm

00:33:38,429 --> 00:33:45,390
going to launch this test container and

00:33:42,530 --> 00:33:48,900
use the link command from docker this

00:33:45,390 --> 00:33:52,980
says take take my running application

00:33:48,900 --> 00:33:55,530
container and link it into this new test

00:33:52,980 --> 00:33:58,280
container under the name pet clinic so

00:33:55,530 --> 00:34:01,740
that means that from my test container

00:33:58,280 --> 00:34:05,730
the hostname pet clinic gets specially

00:34:01,740 --> 00:34:07,679
mapped to my application container just

00:34:05,730 --> 00:34:09,960
for the duration of this test run so it

00:34:07,679 --> 00:34:11,940
sort of patches up the hosts list for me

00:34:09,960 --> 00:34:17,159
so it's why I can use a fixed URL and

00:34:11,940 --> 00:34:19,530
then I'm going to run the VNC plugin so

00:34:17,159 --> 00:34:21,690
the VNC plug-in does a bunch of special

00:34:19,530 --> 00:34:23,820
stuff in terms of launching vmc the

00:34:21,690 --> 00:34:25,560
right way cleaning it up and doing

00:34:23,820 --> 00:34:29,220
special features like screenshots and

00:34:25,560 --> 00:34:33,210
things like that so if you look at what

00:34:29,220 --> 00:34:36,320
this did when it when it ran it so it so

00:34:33,210 --> 00:34:38,820
is running my application container and

00:34:36,320 --> 00:34:41,639
then it was also running my test

00:34:38,820 --> 00:34:44,700
container running both simultaneously

00:34:41,639 --> 00:34:49,770
and then inside the test container it

00:34:44,700 --> 00:34:53,040
sets up VNC so it's setting up this

00:34:49,770 --> 00:34:54,990
virtual desktop environment and then

00:34:53,040 --> 00:34:57,960
finally it run and then finally I just

00:34:54,990 --> 00:35:01,109
run maven so these are just java-based

00:34:57,960 --> 00:35:04,170
selenium tests and I look good at all of

00:35:01,109 --> 00:35:07,080
the tests pass it does a bunch of

00:35:04,170 --> 00:35:10,619
cleanup takes a screenshot at the end

00:35:07,080 --> 00:35:12,930
and then it's asking me how do I like

00:35:10,619 --> 00:35:14,099
that screenshot so this is another thing

00:35:12,930 --> 00:35:16,320
that's different from a freestyle

00:35:14,099 --> 00:35:19,470
project is that you can you can ask

00:35:16,320 --> 00:35:21,750
humans to pass off on you know to

00:35:19,470 --> 00:35:24,780
approve certain portions of the build if

00:35:21,750 --> 00:35:26,580
you don't want to totally automate it so

00:35:24,780 --> 00:35:29,220
here it's saying take a look at this

00:35:26,580 --> 00:35:34,200
does that look right and yes here you

00:35:29,220 --> 00:35:36,390
can see this is the Linux X Window

00:35:34,200 --> 00:35:38,790
desktop with you know totally stripped

00:35:36,390 --> 00:35:39,869
bare not running window manager or

00:35:38,790 --> 00:35:41,819
anything we can see

00:35:39,869 --> 00:35:46,170
Fox has been running and it actually

00:35:41,819 --> 00:35:48,089
browse to that URL and managed to verify

00:35:46,170 --> 00:35:50,160
the title and and took a screenshot at

00:35:48,089 --> 00:35:51,690
the end so you can you know you can see

00:35:50,160 --> 00:35:52,710
if there's you know if the dog is dead

00:35:51,690 --> 00:35:55,829
or if there's something really wrong

00:35:52,710 --> 00:35:58,470
with the application and that your test

00:35:55,829 --> 00:36:05,519
in cover so I'll say yes I want to

00:35:58,470 --> 00:36:08,999
proceed and and then finally the last

00:36:05,519 --> 00:36:11,819
stage is that it says push under the

00:36:08,999 --> 00:36:13,740
latest tag so dr. tags you can have tags

00:36:11,819 --> 00:36:17,430
that are basically symbolic links to

00:36:13,740 --> 00:36:19,259
particular builds of your image so so

00:36:17,430 --> 00:36:21,450
it's already pushed all of the binaries

00:36:19,259 --> 00:36:23,700
for the particular build tag so

00:36:21,450 --> 00:36:25,920
basically all this is doing is updating

00:36:23,700 --> 00:36:28,349
this latest tag on our internal registry

00:36:25,920 --> 00:36:29,640
to point to this build so if we get all

00:36:28,349 --> 00:36:32,430
the way to the end of the build and get

00:36:29,640 --> 00:36:34,140
to this stage then we've just told

00:36:32,430 --> 00:36:37,680
anyone using our internal docker

00:36:34,140 --> 00:36:39,720
registry yes thumbs up we've tested this

00:36:37,680 --> 00:36:42,720
particular build of this application and

00:36:39,720 --> 00:36:47,430
it's passed all of the criteria this is

00:36:42,720 --> 00:36:49,710
safe to go to production so you could

00:36:47,430 --> 00:36:51,690
have you could have some outside process

00:36:49,710 --> 00:36:53,160
that's looking for the red for new

00:36:51,690 --> 00:36:55,380
things to appear in the registry and

00:36:53,160 --> 00:36:57,779
deploying them or you could add another

00:36:55,380 --> 00:37:00,329
step to physically take that image and

00:36:57,779 --> 00:37:06,210
push it off to you know some production

00:37:00,329 --> 00:37:09,690
servers if you wanted to that's the

00:37:06,210 --> 00:37:12,989
basic idea of and I one thing I forgot

00:37:09,690 --> 00:37:18,779
to show while it was paused for input at

00:37:12,989 --> 00:37:24,569
the point that it's paused for input you

00:37:18,779 --> 00:37:27,119
will see that that basically the build

00:37:24,569 --> 00:37:29,339
is idle so at that point it's not

00:37:27,119 --> 00:37:31,170
consuming any resources it's just saying

00:37:29,339 --> 00:37:32,730
okay I'm just waiting for something to

00:37:31,170 --> 00:37:35,190
app and someone for someone to click

00:37:32,730 --> 00:37:38,519
proceed or abort so at that point it's

00:37:35,190 --> 00:37:40,349
not consuming a thread on Jenkins it's

00:37:38,519 --> 00:37:44,579
not it's not going to show up on the

00:37:40,349 --> 00:37:45,960
being billed Q&As doing anything so

00:37:44,579 --> 00:37:48,599
basically it's going to sit out of your

00:37:45,960 --> 00:37:50,339
way and and just be what you would

00:37:48,599 --> 00:37:52,319
expect a long-running workflow to be

00:37:50,339 --> 00:37:52,940
just something that's it's waiting for

00:37:52,319 --> 00:38:01,700
the next step

00:37:52,940 --> 00:38:05,030
happen so that's that's the basic idea

00:38:01,700 --> 00:38:07,099
that there's a key key feature that

00:38:05,030 --> 00:38:09,440
we've been working on recently which I

00:38:07,099 --> 00:38:12,920
think will will be pretty exciting for

00:38:09,440 --> 00:38:15,230
people who are we've been struggling to

00:38:12,920 --> 00:38:18,140
maintain really complicated slave

00:38:15,230 --> 00:38:23,000
configurations and automating all of

00:38:18,140 --> 00:38:25,280
these things need to leave some time for

00:38:23,000 --> 00:38:29,569
questions but I just wanted to go

00:38:25,280 --> 00:38:32,690
through a few things that that we're

00:38:29,569 --> 00:38:34,880
looking at as as next steps that are

00:38:32,690 --> 00:38:37,910
things we got from feedback and so on

00:38:34,880 --> 00:38:40,819
one is certainly compatibility with

00:38:37,910 --> 00:38:44,480
other Jenkins plugins so in order for

00:38:40,819 --> 00:38:46,190
plugins to work inside workflow usually

00:38:44,480 --> 00:38:48,740
they need to be modified in some way

00:38:46,190 --> 00:38:52,250
often it's a pretty minor modification

00:38:48,740 --> 00:38:54,800
sometimes it's deeper but we're looking

00:38:52,250 --> 00:38:56,660
to get integrations for the most

00:38:54,800 --> 00:39:00,079
important plugins ones that people want

00:38:56,660 --> 00:39:04,280
to use a lot we've got a few there's a

00:39:00,079 --> 00:39:05,930
lot still on the list to do things like

00:39:04,280 --> 00:39:09,140
triggering Jenkins jobs under certain

00:39:05,930 --> 00:39:10,700
conditions SCM integration for new

00:39:09,140 --> 00:39:12,490
version control systems we haven't

00:39:10,700 --> 00:39:17,510
covered yet I think currently we have

00:39:12,490 --> 00:39:21,349
gets a virgin mercurial perforce I think

00:39:17,510 --> 00:39:22,940
another one came in recently and various

00:39:21,349 --> 00:39:25,430
kinds of posts build actions these are

00:39:22,940 --> 00:39:27,980
things like publishing reports of

00:39:25,430 --> 00:39:29,630
particular tools in a visual way in the

00:39:27,980 --> 00:39:32,480
Jenkins you I that's a common kind

00:39:29,630 --> 00:39:35,329
publisher or sending notifications to

00:39:32,480 --> 00:39:37,819
hipchat and and things like that that

00:39:35,329 --> 00:39:40,150
are they're difficult to do without that

00:39:37,819 --> 00:39:40,150
plugin

00:39:41,819 --> 00:39:50,779
a bunch of features that we've had on

00:39:45,150 --> 00:39:53,339
the table 1 we often hear people ask for

00:39:50,779 --> 00:39:56,390
syntax completion for IDEs so you want

00:39:53,339 --> 00:39:59,400
to be able to edit this flow script in

00:39:56,390 --> 00:40:03,449
Eclipse IntelliJ met NetBeans whatever

00:39:59,400 --> 00:40:05,759
you have and get some get some

00:40:03,449 --> 00:40:07,890
assistance for the available steps and

00:40:05,759 --> 00:40:13,170
things like that so that's something

00:40:07,890 --> 00:40:16,769
that's definitely on the table their

00:40:13,170 --> 00:40:20,279
support for matrix builds and so on I

00:40:16,769 --> 00:40:22,469
I'll just mention specifically the the

00:40:20,279 --> 00:40:24,329
last three are sort of related to

00:40:22,469 --> 00:40:28,589
something cosas que was talking about in

00:40:24,329 --> 00:40:31,709
the keynote that we want to offer more

00:40:28,589 --> 00:40:33,989
ways of picking up the definition of the

00:40:31,709 --> 00:40:40,739
flow from a place that's convenient for

00:40:33,989 --> 00:40:43,709
you so that means ideally picking up the

00:40:40,739 --> 00:40:46,380
whole flow definition from a file that's

00:40:43,709 --> 00:40:48,599
kept in your near version repository

00:40:46,380 --> 00:40:50,249
according to whatever branch that that

00:40:48,599 --> 00:40:53,660
is you're working with including support

00:40:50,249 --> 00:40:57,209
for topic branches so that it would

00:40:53,660 --> 00:41:01,289
automatically build topic branches as

00:40:57,209 --> 00:41:03,509
they come in and be able to keep parts

00:41:01,289 --> 00:41:05,400
of the flow definition in that are

00:41:03,509 --> 00:41:07,339
common to a bunch of different jobs in a

00:41:05,400 --> 00:41:11,699
separate place so they can be reused

00:41:07,339 --> 00:41:14,640
even more easily than they can now and

00:41:11,699 --> 00:41:18,390
when one special area is making it

00:41:14,640 --> 00:41:20,489
possible to create custom dsl's without

00:41:18,390 --> 00:41:23,839
actually writing a Jenkins plugin so

00:41:20,489 --> 00:41:26,219
this dr dot syntax they showed is

00:41:23,839 --> 00:41:29,009
implemented as a Jenkins plugin although

00:41:26,219 --> 00:41:32,009
most of the the high-level syntax is

00:41:29,009 --> 00:41:34,410
actually just a groovy script we'd like

00:41:32,009 --> 00:41:36,089
to make it so that you can you know if

00:41:34,410 --> 00:41:38,670
you know a little bit of groovy you can

00:41:36,089 --> 00:41:41,729
take a groovy definition of how you

00:41:38,670 --> 00:41:44,660
would like your company's whole build

00:41:41,729 --> 00:41:47,690
process to look and upload that into

00:41:44,660 --> 00:41:50,430
some version control repository and then

00:41:47,690 --> 00:41:52,739
particular jobs that people write for

00:41:50,430 --> 00:41:54,449
particular projects would just be two or

00:41:52,739 --> 00:41:55,320
three lines that would look more like a

00:41:54,449 --> 00:41:57,780
configuration

00:41:55,320 --> 00:41:59,910
wild in a program for those people so

00:41:57,780 --> 00:42:01,800
that they don't have to they don't have

00:41:59,910 --> 00:42:06,750
to get too deep into the details of

00:42:01,800 --> 00:42:09,090
workflow and lots of other fixes lots of

00:42:06,750 --> 00:42:12,420
things to be done on the drive when the

00:42:09,090 --> 00:42:13,530
drive down to DC a sort of got two or

00:42:12,420 --> 00:42:16,320
three of these out of the way but

00:42:13,530 --> 00:42:18,720
there's there's a couple hundred other

00:42:16,320 --> 00:42:20,400
things that are outstanding so so it's

00:42:18,720 --> 00:42:22,170
going to be some time but the you're

00:42:20,400 --> 00:42:24,300
definitely listening to feedback on

00:42:22,170 --> 00:42:27,360
things that people really care about and

00:42:24,300 --> 00:42:29,550
try and get some of those in they'd like

00:42:27,360 --> 00:42:31,800
to take any questions people have stand

00:42:29,550 --> 00:42:36,630
up to the mic in the center of the room

00:42:31,800 --> 00:42:40,400
if you want to ask anything we have a

00:42:36,630 --> 00:42:40,400
few minutes I think left

00:42:44,640 --> 00:42:49,260
yeah can you come up to a microphone or

00:42:47,069 --> 00:42:58,289
or just shout I'll try to repeat your

00:42:49,260 --> 00:43:01,470
question yeah and it works excellent so

00:42:58,289 --> 00:43:03,750
you showed a workflow for a java web app

00:43:01,470 --> 00:43:06,240
which is probably pretty common if

00:43:03,750 --> 00:43:07,680
someone wanted to create another java

00:43:06,240 --> 00:43:09,299
web app where they have to create the

00:43:07,680 --> 00:43:11,880
whole workflow again or would they be

00:43:09,299 --> 00:43:15,510
able to use parts of the workflow in

00:43:11,880 --> 00:43:17,039
their workflow right so one thing that

00:43:15,510 --> 00:43:18,960
you can do today and I is mentioning

00:43:17,039 --> 00:43:22,640
that we'd like to expand the options for

00:43:18,960 --> 00:43:27,230
the future but today you can keep a

00:43:22,640 --> 00:43:30,630
versioned repository inside jenkins of

00:43:27,230 --> 00:43:32,640
different basically groovy classes or

00:43:30,630 --> 00:43:36,059
helper function so configuration

00:43:32,640 --> 00:43:38,640
snippets for commonly used patterns of

00:43:36,059 --> 00:43:41,760
things so in the case of this example

00:43:38,640 --> 00:43:46,079
the common pattern would probably be you

00:43:41,760 --> 00:43:49,740
know one for you know run maven and

00:43:46,079 --> 00:43:51,779
Collette resulting thing into a custom

00:43:49,740 --> 00:43:53,549
application container you know another

00:43:51,779 --> 00:43:56,039
helper function would probably be

00:43:53,549 --> 00:43:58,049
something like run test application

00:43:56,039 --> 00:43:59,730
container linked to you know run tests

00:43:58,049 --> 00:44:02,519
container linked application container

00:43:59,730 --> 00:44:04,829
with VNC enabled and you would just

00:44:02,519 --> 00:44:06,990
you'd call that as a helper function and

00:44:04,829 --> 00:44:08,609
fill in a couple parameters for the the

00:44:06,990 --> 00:44:10,380
file name or the command or something

00:44:08,609 --> 00:44:14,039
like that where do you where do you keep

00:44:10,380 --> 00:44:18,059
the helper functions so currently your

00:44:14,039 --> 00:44:20,160
options are that you can keep those in a

00:44:18,059 --> 00:44:24,900
special git repository associated with

00:44:20,160 --> 00:44:27,119
Jenkins master or you can explicitly

00:44:24,900 --> 00:44:29,789
load them from the start of the workflow

00:44:27,119 --> 00:44:31,650
from another spot in your workspace so

00:44:29,789 --> 00:44:34,259
that could be somewhere else in your in

00:44:31,650 --> 00:44:37,440
the same version control checkout or you

00:44:34,259 --> 00:44:39,420
could even go and explicitly asked to

00:44:37,440 --> 00:44:42,660
check out some other repository that

00:44:39,420 --> 00:44:43,799
your team uses and load from there so it

00:44:42,660 --> 00:44:45,900
would be a few lines of boilerplate

00:44:43,799 --> 00:44:48,269
today and we'd like to sort of trim that

00:44:45,900 --> 00:44:51,109
down to one line or no lines in the

00:44:48,269 --> 00:44:51,109
future thanks

00:44:52,660 --> 00:45:06,770
yeah for time yeah you okay have someone

00:44:59,330 --> 00:45:08,870
coming up okay so i know that you

00:45:06,770 --> 00:45:12,590
mentioned publishers as the future work

00:45:08,870 --> 00:45:15,980
but are there any plugins for reporting

00:45:12,590 --> 00:45:24,260
right now for reporting anything like

00:45:15,980 --> 00:45:26,500
reporting on Jenkins so yeah the current

00:45:24,260 --> 00:45:29,120
publisher integration is fairly slim the

00:45:26,500 --> 00:45:32,120
by far most widely used one is

00:45:29,120 --> 00:45:35,900
integrated which is the j unit format

00:45:32,120 --> 00:45:37,580
test reports that actually covers people

00:45:35,900 --> 00:45:40,070
who are using test tools other than j

00:45:37,580 --> 00:45:43,220
unit a lot of them produce results in

00:45:40,070 --> 00:45:46,160
the same format so you can use that that

00:45:43,220 --> 00:45:48,920
actually has a neat aspect to it that

00:45:46,160 --> 00:45:50,630
you can't get from a regular freestyle

00:45:48,920 --> 00:45:52,370
project which is that you can record

00:45:50,630 --> 00:45:54,980
test results multiple times from the

00:45:52,370 --> 00:45:57,860
same build and it will aggregate them so

00:45:54,980 --> 00:45:59,900
that's that's handy for doing multiple

00:45:57,860 --> 00:46:01,820
stages where you're running different

00:45:59,900 --> 00:46:05,540
tests possibly on different slaves and

00:46:01,820 --> 00:46:07,400
different orders or even in parallel but

00:46:05,540 --> 00:46:09,740
there are a lot of other there are a lot

00:46:07,400 --> 00:46:11,240
of other publishers that that create

00:46:09,740 --> 00:46:13,100
different kinds of reports or add

00:46:11,240 --> 00:46:16,670
annotations of different kinds to the

00:46:13,100 --> 00:46:19,490
build so in a lot of places in lab cases

00:46:16,670 --> 00:46:23,900
this should be easy to add that but it

00:46:19,490 --> 00:46:25,580
still needs to be done yeah sorry i was

00:46:23,900 --> 00:46:26,780
actually thinking about my question when

00:46:25,580 --> 00:46:28,010
you were answering the last question I

00:46:26,780 --> 00:46:29,240
was just interested what was the name of

00:46:28,010 --> 00:46:30,830
the plugin that you said does the

00:46:29,240 --> 00:46:33,110
aggregating the test results across

00:46:30,830 --> 00:46:37,250
that's just the it's just called J unit

00:46:33,110 --> 00:46:38,960
like oh that ju to plug in ok i just

00:46:37,250 --> 00:46:40,910
started hacking on workflow so maybe

00:46:38,960 --> 00:46:43,580
this exists and i just haven't found it

00:46:40,910 --> 00:46:45,560
yet but is there like a concise doc that

00:46:43,580 --> 00:46:48,530
lists all the words in the dsl and the

00:46:45,560 --> 00:46:50,660
parameters that are available to them so

00:46:48,530 --> 00:46:53,270
there's not a static documentation

00:46:50,660 --> 00:46:57,020
currently this is something that could

00:46:53,270 --> 00:47:02,050
probably fall out of the effort to build

00:46:57,020 --> 00:47:06,200
ID code completion integration but

00:47:02,050 --> 00:47:09,060
currently your best shot is if you

00:47:06,200 --> 00:47:11,609
yeah if you go to snippet generator this

00:47:09,060 --> 00:47:14,160
is going to list all of the steps that

00:47:11,609 --> 00:47:15,690
are available in your current system

00:47:14,160 --> 00:47:21,020
according to your currently installed

00:47:15,690 --> 00:47:21,020
plugins and you can get sort of details

00:47:22,520 --> 00:47:32,910
detailed syntax on the different options

00:47:25,770 --> 00:47:34,349
are available for it yeah they'll kick

00:47:32,910 --> 00:47:42,720
us out at some point I'm not sure when

00:47:34,349 --> 00:47:48,359
but head him one question is about the

00:47:42,720 --> 00:47:50,130
mics not on I think hello yeah yeah one

00:47:48,359 --> 00:47:52,080
question is about like the stages when

00:47:50,130 --> 00:47:55,170
you define series can be just call upon

00:47:52,080 --> 00:47:58,040
a particular stage stages rather than in

00:47:55,170 --> 00:48:01,130
s vertigus in a specific sequence

00:47:58,040 --> 00:48:04,290
there's not currently a facility to jump

00:48:01,130 --> 00:48:07,200
straight to a particular stage as such

00:48:04,290 --> 00:48:10,530
you can make a workflow parametrize so

00:48:07,200 --> 00:48:12,240
you can have you can give the user the

00:48:10,530 --> 00:48:16,080
option of selecting something when they

00:48:12,240 --> 00:48:18,119
start the build and by doing that you

00:48:16,080 --> 00:48:19,920
can you can just write through simple

00:48:18,119 --> 00:48:22,109
if-then statements that say you know if

00:48:19,920 --> 00:48:24,720
they ask to skip this part then just

00:48:22,109 --> 00:48:27,150
don't do it there's not a direct

00:48:24,720 --> 00:48:29,490
facility just for skipping stages oh

00:48:27,150 --> 00:48:31,320
yeah all right it looks like the end

00:48:29,490 --> 00:48:34,550
thank you everybody for coming it'll be

00:48:31,320 --> 00:48:34,550
fed yachts capture

00:48:35,869 --> 00:48:37,930
you

00:48:44,549 --> 00:48:46,609

YouTube URL: https://www.youtube.com/watch?v=v2gFjPbI8wA


