Title: JUC U.S. East 2015 - Continuous Delivery with Jenkins and IBM UrbanCode Deploy
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: John Lanuti, IBM 

Jenkins and IBM UrbanCode Deploy can be used together to automate the end-to-end continuous delivery process. See how Jenkins passes builds to IBM UrbanCode Deploy to automate the deployment of applications, middleware configurations and database changes into development, test and production environments, thus delivering higher quality software in a repeatable fashion.
Captions: 
	00:00:15,040 --> 00:00:19,360
thanks for sticking around I think we'll

00:00:18,070 --> 00:00:22,619
have a good session it's an interesting

00:00:19,360 --> 00:00:25,570
topic especially for this conference

00:00:22,619 --> 00:00:27,400
it's been interesting I really enjoyed

00:00:25,570 --> 00:00:29,529
meeting a lot of people out in the

00:00:27,400 --> 00:00:31,090
exhibit halls a lot of people really

00:00:29,529 --> 00:00:33,070
thirsty for learning and that's

00:00:31,090 --> 00:00:38,140
refreshing so thank you all for letting

00:00:33,070 --> 00:00:40,690
us join this big party ok so ladies and

00:00:38,140 --> 00:00:45,190
gentlemen we have a problem here this

00:00:40,690 --> 00:00:48,670
Jenkins tool is too good continuous

00:00:45,190 --> 00:00:50,410
integration is too easy I mean look at

00:00:48,670 --> 00:00:53,260
this place the Jenkins user conference

00:00:50,410 --> 00:00:54,610
is amazing like really Jenkins is

00:00:53,260 --> 00:00:56,620
winning the war right now in the build

00:00:54,610 --> 00:00:58,450
management tools and don't let anybody

00:00:56,620 --> 00:01:00,670
tell you otherwise I think this is

00:00:58,450 --> 00:01:05,950
definitely living proof but here's the

00:01:00,670 --> 00:01:09,220
problem we can do builds and that's fine

00:01:05,950 --> 00:01:10,750
and we have so many bills now so quickly

00:01:09,220 --> 00:01:12,939
so many a day we had to invent a whole

00:01:10,750 --> 00:01:15,729
new category of tools called

00:01:12,939 --> 00:01:18,909
repositories artifact repositories code

00:01:15,729 --> 00:01:20,620
stations artifact Therese all these

00:01:18,909 --> 00:01:22,360
things because we didn't know what to do

00:01:20,620 --> 00:01:23,710
with all this stuff because we're not

00:01:22,360 --> 00:01:26,470
used to having so many deployable

00:01:23,710 --> 00:01:28,720
artifacts a very interesting problem and

00:01:26,470 --> 00:01:30,190
and that's where we see urbancode deploy

00:01:28,720 --> 00:01:31,780
coming in what if there was something

00:01:30,190 --> 00:01:34,840
better that we could do or any

00:01:31,780 --> 00:01:36,280
continuous delivery tool so that's what

00:01:34,840 --> 00:01:39,580
I want to look at today so my name is

00:01:36,280 --> 00:01:41,830
John lanuite I'm from IBM cloud this is

00:01:39,580 --> 00:01:43,270
what IBM cloud looks like now you know

00:01:41,830 --> 00:01:47,200
very different from maybe what you're

00:01:43,270 --> 00:01:53,350
used to but it's refreshing for you so

00:01:47,200 --> 00:01:55,860
hopefully we'll dive in here ok so

00:01:53,350 --> 00:01:59,229
you're a Jenkins rock star what's next

00:01:55,860 --> 00:02:01,479
like I said we have a problem here this

00:01:59,229 --> 00:02:03,909
is where the DevOps blame game comes in

00:02:01,479 --> 00:02:06,820
once you have those builds in the

00:02:03,909 --> 00:02:08,979
artifact repository that's when you see

00:02:06,820 --> 00:02:11,319
the operations guys not trusting the

00:02:08,979 --> 00:02:13,030
developers saying oh man these

00:02:11,319 --> 00:02:14,920
developers never test their code how can

00:02:13,030 --> 00:02:17,620
they produce so much stuff every time I

00:02:14,920 --> 00:02:19,750
deploy it or you break something I'm

00:02:17,620 --> 00:02:21,760
doing all the hard work here what why

00:02:19,750 --> 00:02:24,129
can the developers just relax a little

00:02:21,760 --> 00:02:26,280
the developers are saying Oh mr. op guy

00:02:24,129 --> 00:02:28,140
why are you guys so slow

00:02:26,280 --> 00:02:30,630
I'm doing all the hard work here writing

00:02:28,140 --> 00:02:33,450
all this innovative code and you can't

00:02:30,630 --> 00:02:35,250
even put it into production so really we

00:02:33,450 --> 00:02:37,620
have a problem here Jenkins is a great

00:02:35,250 --> 00:02:39,810
first step what do we do next continuous

00:02:37,620 --> 00:02:41,880
integration great first step on your

00:02:39,810 --> 00:02:44,730
DevOps journey but if you're ready for

00:02:41,880 --> 00:02:46,410
what's next we'll talk about that so the

00:02:44,730 --> 00:02:50,010
world is demanding is your enterprise

00:02:46,410 --> 00:02:52,110
ready and we'll look at that and then

00:02:50,010 --> 00:02:54,870
we'll introduce IBM urbancode deploy as

00:02:52,110 --> 00:02:56,640
one example for these solutions and

00:02:54,870 --> 00:02:59,250
really you know there are a lot of great

00:02:56,640 --> 00:03:01,680
vendors some in the that word earlier

00:02:59,250 --> 00:03:03,420
there today just use one of them

00:03:01,680 --> 00:03:05,519
whatever you feel most trustworthy with

00:03:03,420 --> 00:03:06,959
just make sure you're thinking about who

00:03:05,519 --> 00:03:08,970
is innovating and who's thinking about

00:03:06,959 --> 00:03:11,880
the future and who could really handle

00:03:08,970 --> 00:03:14,370
an end-to-end storing for you then I

00:03:11,880 --> 00:03:15,630
like to call Jenkins an urban code

00:03:14,370 --> 00:03:18,900
deploy kind of like chocolate and peanut

00:03:15,630 --> 00:03:20,550
butter but with better ROI because let

00:03:18,900 --> 00:03:22,019
me tell you if you eat chocolate and

00:03:20,550 --> 00:03:24,810
peanut butter it tastes good but there

00:03:22,019 --> 00:03:26,489
are 0 is not very good and then I want

00:03:24,810 --> 00:03:29,310
to end off with where we're going which

00:03:26,489 --> 00:03:31,350
is the cloud features cloudy and how do

00:03:29,310 --> 00:03:33,840
we play into that story so that's our

00:03:31,350 --> 00:03:36,329
agenda today we make it in the tool we

00:03:33,840 --> 00:03:38,190
may not I don't know we'll see the devil

00:03:36,329 --> 00:03:41,010
is actually pretty boring it's just to

00:03:38,190 --> 00:03:43,530
plug in into Jenkins when i'll show you

00:03:41,010 --> 00:03:49,590
what it looks like and we'll see we'll

00:03:43,530 --> 00:03:51,870
see how we go okay so this was back in

00:03:49,590 --> 00:03:54,209
the day or maybe it's you today or a

00:03:51,870 --> 00:03:56,340
start-up or a smaller company and he's

00:03:54,209 --> 00:03:58,290
just have one team and continuous

00:03:56,340 --> 00:04:00,359
delivery is not that much harder than

00:03:58,290 --> 00:04:01,950
continuous integration you're you're

00:04:00,359 --> 00:04:04,500
doing code you're starting your bill

00:04:01,950 --> 00:04:06,180
you're publishing those artifacts were

00:04:04,500 --> 00:04:08,190
billed maybe you're sending an email

00:04:06,180 --> 00:04:10,109
you're validating changes and then

00:04:08,190 --> 00:04:13,530
you're committing what and that was very

00:04:10,109 --> 00:04:15,329
good maybe maybe you have some gates you

00:04:13,530 --> 00:04:17,789
have a development into a source control

00:04:15,329 --> 00:04:19,500
into a build tool maybe your sis

00:04:17,789 --> 00:04:21,269
integration tests they be just use your

00:04:19,500 --> 00:04:23,610
accepts and tests we can even get into

00:04:21,269 --> 00:04:25,500
production and with one team this isn't

00:04:23,610 --> 00:04:27,810
a big deal I mean we could even extend

00:04:25,500 --> 00:04:30,479
build tools to do this into the

00:04:27,810 --> 00:04:33,930
deployment space with one team in one

00:04:30,479 --> 00:04:34,900
set of artifacts pretty easy but what

00:04:33,930 --> 00:04:36,490
happening is

00:04:34,900 --> 00:04:39,100
especially with a lot of new trends is

00:04:36,490 --> 00:04:41,139
for breaking services down into smaller

00:04:39,100 --> 00:04:43,600
increments so our services are getting

00:04:41,139 --> 00:04:46,360
much more fine grain which means we have

00:04:43,600 --> 00:04:48,789
much more dependencies that we may need

00:04:46,360 --> 00:04:50,289
to manage if you look at as you start to

00:04:48,789 --> 00:04:52,870
grow as an enterprise and start to

00:04:50,289 --> 00:04:54,930
increase some of the technical debt Jean

00:04:52,870 --> 00:04:57,789
Kim was talking about earlier today you

00:04:54,930 --> 00:04:59,470
realize the reality is well we've got

00:04:57,789 --> 00:05:02,139
multiple platforms we got a web platform

00:04:59,470 --> 00:05:05,320
a mobile platform we've got database

00:05:02,139 --> 00:05:07,419
tier we got web servers app servers we

00:05:05,320 --> 00:05:09,699
got all sorts of different tiers with

00:05:07,419 --> 00:05:12,039
all sorts of different components and we

00:05:09,699 --> 00:05:14,260
have multiple teams now all of a sudden

00:05:12,039 --> 00:05:16,060
this easy deploy of well I've changed

00:05:14,260 --> 00:05:18,010
this component and I can just push it

00:05:16,060 --> 00:05:21,310
through each stage becomes a lot more

00:05:18,010 --> 00:05:23,889
difficult how do I know what is the

00:05:21,310 --> 00:05:25,210
status of each one of those machines and

00:05:23,889 --> 00:05:27,760
what versions are the components that

00:05:25,210 --> 00:05:29,650
I'm expecting to be on those and how do

00:05:27,760 --> 00:05:32,139
I manage all those different properties

00:05:29,650 --> 00:05:34,030
that may be different in each stage we

00:05:32,139 --> 00:05:36,880
might have dozens of components across

00:05:34,030 --> 00:05:38,530
dozens of teams so what's happening and

00:05:36,880 --> 00:05:39,910
we may actually use third-party services

00:05:38,530 --> 00:05:42,099
this would become more and more

00:05:39,910 --> 00:05:43,810
prevalent as we start to get into these

00:05:42,099 --> 00:05:48,310
concepts of micro services where

00:05:43,810 --> 00:05:51,010
everything is connected what can go

00:05:48,310 --> 00:05:52,870
wrong so think about everything right

00:05:51,010 --> 00:05:54,970
Murphy's Law what can go wrong will go

00:05:52,870 --> 00:05:58,330
wrong if we start at the left you'll

00:05:54,970 --> 00:06:00,610
notice the developer environment tell me

00:05:58,330 --> 00:06:02,889
you've ever heard this story and i know

00:06:00,610 --> 00:06:05,590
i'll just tell you that I come from a

00:06:02,889 --> 00:06:07,630
developer background you know 16 years

00:06:05,590 --> 00:06:09,220
within IBM and I did some Eclipse open

00:06:07,630 --> 00:06:12,550
source development so I've done

00:06:09,220 --> 00:06:15,070
commercial and applicant open source so

00:06:12,550 --> 00:06:17,470
yeah me and Jim gene Kim probably

00:06:15,070 --> 00:06:19,419
describe DevOps in the opposite way I

00:06:17,470 --> 00:06:21,130
like to poke fun at the Ops guys you

00:06:19,419 --> 00:06:22,840
know from a development side but you

00:06:21,130 --> 00:06:25,240
know we're all trying to get to the same

00:06:22,840 --> 00:06:28,150
place but think about this as developer

00:06:25,240 --> 00:06:31,060
we say hey I tested this I'm on my

00:06:28,150 --> 00:06:33,280
Windows machine and I ran against our

00:06:31,060 --> 00:06:35,440
server actually I tested against tom cat

00:06:33,280 --> 00:06:37,720
and now we deploy to our production

00:06:35,440 --> 00:06:39,400
server which is a clustered what

00:06:37,720 --> 00:06:41,770
websphere environment running on linux

00:06:39,400 --> 00:06:44,650
and no one behold things don't work and

00:06:41,770 --> 00:06:46,480
what's the developer say a man work for

00:06:44,650 --> 00:06:49,390
me that's your problem ops guy

00:06:46,480 --> 00:06:50,500
I saw it working well wait a second how

00:06:49,390 --> 00:06:53,530
did you test it did you have a

00:06:50,500 --> 00:06:56,560
production like environment no and that

00:06:53,530 --> 00:06:58,660
happens a lot the next one we have time

00:06:56,560 --> 00:07:00,610
pressure again going back to the we have

00:06:58,660 --> 00:07:03,040
a whole lots of tons of bills Jenkins

00:07:00,610 --> 00:07:05,200
working great but there's a bottleneck

00:07:03,040 --> 00:07:07,150
later down the cycle all of a sudden

00:07:05,200 --> 00:07:09,550
these changes are getting stored up and

00:07:07,150 --> 00:07:11,800
this is really doing more damage than it

00:07:09,550 --> 00:07:14,110
is good because it's very difficult to

00:07:11,800 --> 00:07:15,910
debug once we have a problem and it's

00:07:14,110 --> 00:07:18,010
very difficult to roll back once we have

00:07:15,910 --> 00:07:19,600
all these cashed up and and if they're

00:07:18,010 --> 00:07:22,630
just sitting there collecting dust

00:07:19,600 --> 00:07:24,370
giving us bigger debt and then there's a

00:07:22,630 --> 00:07:26,890
lot of manual steps I mean there's a lot

00:07:24,370 --> 00:07:28,270
of times where we'll talk to people and

00:07:26,890 --> 00:07:31,540
they'll say oh yeah everything is

00:07:28,270 --> 00:07:33,280
automated is it okay well this guy

00:07:31,540 --> 00:07:34,930
pushes a button and then he's got a

00:07:33,280 --> 00:07:36,760
sticky note on the wall it tells them to

00:07:34,930 --> 00:07:38,410
do this next steps and then you can push

00:07:36,760 --> 00:07:41,490
another button which may do some stuff

00:07:38,410 --> 00:07:44,700
but is essentially a set of manually

00:07:41,490 --> 00:07:46,780
orchestrated scripts and steps and

00:07:44,700 --> 00:07:48,220
there's only a few people that know how

00:07:46,780 --> 00:07:50,770
to do it and those people become very

00:07:48,220 --> 00:07:53,380
valuable and they can get by on these

00:07:50,770 --> 00:07:56,440
heroic efforts but all of a sudden who

00:07:53,380 --> 00:08:00,430
did this man Dave Dave's not here

00:07:56,440 --> 00:08:03,010
anymore oh oh trouble and then the last

00:08:00,430 --> 00:08:05,680
one you'll see some of these enterprises

00:08:03,010 --> 00:08:07,750
have major release parties why they're

00:08:05,680 --> 00:08:11,350
called parties I have no idea because

00:08:07,750 --> 00:08:13,090
it's a stressful weekend at best if

00:08:11,350 --> 00:08:15,190
that's the shortest and then you have

00:08:13,090 --> 00:08:17,140
people who is actually designed to order

00:08:15,190 --> 00:08:18,640
breakfasts and dinners and they have

00:08:17,140 --> 00:08:20,680
this monday morning effective where

00:08:18,640 --> 00:08:22,440
they're like everybody's burnt out is

00:08:20,680 --> 00:08:24,970
the system everybody's on high stress

00:08:22,440 --> 00:08:27,870
doesn't have to be like that but that's

00:08:24,970 --> 00:08:31,120
the status quo what we're seeing today

00:08:27,870 --> 00:08:34,169
so some of the reasons for this should

00:08:31,120 --> 00:08:36,790
be pretty you probably see this in your

00:08:34,169 --> 00:08:39,070
area you have multiple systems you have

00:08:36,790 --> 00:08:41,410
reliance on email inconsistent

00:08:39,070 --> 00:08:44,920
environment setup a lot of these heroes

00:08:41,410 --> 00:08:46,420
their error prone deployments oh they

00:08:44,920 --> 00:08:48,700
entered the wrong information in the

00:08:46,420 --> 00:08:50,260
ticketing system it's not my fault now

00:08:48,700 --> 00:08:52,600
we have a lot of these scripts which may

00:08:50,260 --> 00:08:53,830
be copied and people are jerry-rigging

00:08:52,600 --> 00:08:55,210
them left or right but we don't really

00:08:53,830 --> 00:08:57,209
know what they do we just know we need

00:08:55,210 --> 00:09:00,029
to run them we have a lot of

00:08:57,209 --> 00:09:02,100
procedures which you know we manly go

00:09:00,029 --> 00:09:03,689
through and we develop errs may write

00:09:02,100 --> 00:09:05,369
and they hand it over to the Ops guys

00:09:03,689 --> 00:09:07,829
and we expect them to understand exactly

00:09:05,369 --> 00:09:10,290
what we mean but they mess up a few

00:09:07,829 --> 00:09:12,179
steps yeah yeah that's probably happened

00:09:10,290 --> 00:09:14,220
and then there may be also steps

00:09:12,179 --> 00:09:16,199
involved pre and post deployment where

00:09:14,220 --> 00:09:17,790
you think we're automated but we

00:09:16,199 --> 00:09:20,550
actually have to do all this other stuff

00:09:17,790 --> 00:09:22,050
too and then the maintenance becomes

00:09:20,550 --> 00:09:24,480
very difficult you know how do we do

00:09:22,050 --> 00:09:26,910
configuration management how do we

00:09:24,480 --> 00:09:28,439
manage all these scripts together so

00:09:26,910 --> 00:09:30,629
these are some of the pain points that

00:09:28,439 --> 00:09:32,429
we see it's not all-inclusive you

00:09:30,629 --> 00:09:36,389
probably have some of your own but

00:09:32,429 --> 00:09:39,809
that's really the status quo today so

00:09:36,389 --> 00:09:42,179
what how can we fix this what if we had

00:09:39,809 --> 00:09:45,809
something that was intuitive and

00:09:42,179 --> 00:09:49,559
scalable that was able to manage the

00:09:45,809 --> 00:09:52,050
what the how and the where so by you

00:09:49,559 --> 00:09:54,389
know the what we mean how can we model

00:09:52,050 --> 00:09:56,490
our applications and understand what

00:09:54,389 --> 00:09:58,559
they are made of and understand how I

00:09:56,490 --> 00:09:59,759
can group these things together and how

00:09:58,559 --> 00:10:02,369
I can push them through different

00:09:59,759 --> 00:10:04,259
environments what about the how you know

00:10:02,369 --> 00:10:06,240
how do I do that how can I have

00:10:04,259 --> 00:10:08,939
something that's a reusable process so

00:10:06,240 --> 00:10:11,519
if I deploy to dev and now I need to

00:10:08,939 --> 00:10:13,649
blow it to QA and there's a different

00:10:11,519 --> 00:10:15,959
number of machines wouldn't be nice to

00:10:13,649 --> 00:10:17,369
just use that same process I don't want

00:10:15,959 --> 00:10:19,709
to have to rewrite a whole nother

00:10:17,369 --> 00:10:21,600
process just because I'm at scale this

00:10:19,709 --> 00:10:23,639
thing should just auto scale with me and

00:10:21,600 --> 00:10:26,490
what if there were different properties

00:10:23,639 --> 00:10:29,490
in dev and QA should I have to write a

00:10:26,490 --> 00:10:30,779
totally new script for QA then for dev

00:10:29,490 --> 00:10:32,759
there for production just because

00:10:30,779 --> 00:10:35,309
they're different properties or should I

00:10:32,759 --> 00:10:37,350
be able to have some knowledge of the

00:10:35,309 --> 00:10:40,259
environments where you see on the right

00:10:37,350 --> 00:10:42,269
the where maybe the tools should know

00:10:40,259 --> 00:10:43,529
about what does each environment look

00:10:42,269 --> 00:10:45,329
like what's the status of each

00:10:43,529 --> 00:10:47,730
environment which components are there

00:10:45,329 --> 00:10:50,279
what how do i get the what's the

00:10:47,730 --> 00:10:53,730
difference between production and SI t

00:10:50,279 --> 00:10:57,360
and QA and dem i'm expecting them all to

00:10:53,730 --> 00:10:59,670
be somewhat the same but maybe there are

00:10:57,360 --> 00:11:01,019
differences that we weren't aware of so

00:10:59,670 --> 00:11:04,199
what if we had a tool that could

00:11:01,019 --> 00:11:08,519
describe all this so again we talked

00:11:04,199 --> 00:11:09,800
about the what the how and the where so

00:11:08,519 --> 00:11:12,050
one example and

00:11:09,800 --> 00:11:17,089
not the only one but it's my favorite

00:11:12,050 --> 00:11:18,709
one is IBM urbancode deploy now if a lot

00:11:17,089 --> 00:11:20,149
of people have been coming by saying you

00:11:18,709 --> 00:11:21,920
know what's the difference too can we do

00:11:20,149 --> 00:11:23,750
everything with Jenkins why do I need

00:11:21,920 --> 00:11:26,060
herb encode deploy you know what about

00:11:23,750 --> 00:11:28,519
chef and puppet what about this that

00:11:26,060 --> 00:11:30,290
these the answer is you could probably

00:11:28,519 --> 00:11:32,510
do a lot of things with a lot of tools

00:11:30,290 --> 00:11:36,380
but it might not be the best tool for

00:11:32,510 --> 00:11:38,269
the job like I could hammer a nail in

00:11:36,380 --> 00:11:40,010
with a screwdriver but that may not

00:11:38,269 --> 00:11:42,320
necessarily be the right thing to do it

00:11:40,010 --> 00:11:44,690
may work sometimes but other times they

00:11:42,320 --> 00:11:46,700
may hurt my hand since we're talking

00:11:44,690 --> 00:11:48,410
about here fit for purpose tools that

00:11:46,700 --> 00:11:51,019
all work together to help you get more

00:11:48,410 --> 00:11:53,870
screen limit so if you think about it

00:11:51,019 --> 00:11:57,410
urbancode deploy picks up right at that

00:11:53,870 --> 00:12:02,089
package repository level so jenkins and

00:11:57,410 --> 00:12:04,399
source control get or subversion team

00:12:02,089 --> 00:12:05,600
concert whenever you may be using you do

00:12:04,399 --> 00:12:07,310
your development you storage source

00:12:05,600 --> 00:12:10,010
control you run the build you put it

00:12:07,310 --> 00:12:12,050
into an artifact repository that's where

00:12:10,010 --> 00:12:14,600
urbancode wakes up and that's where it

00:12:12,050 --> 00:12:16,279
takes off and we know how to manage the

00:12:14,600 --> 00:12:19,070
middle where the applications and the

00:12:16,279 --> 00:12:21,410
environment configurations so everything

00:12:19,070 --> 00:12:24,110
to the right there is where urbancode

00:12:21,410 --> 00:12:25,700
really shines and it is you know fit for

00:12:24,110 --> 00:12:30,170
purpose to do that so you'll notice

00:12:25,700 --> 00:12:34,520
there's some little gates there that may

00:12:30,170 --> 00:12:36,620
look more like croquet goals but those

00:12:34,520 --> 00:12:38,959
are denoting security gates so between

00:12:36,620 --> 00:12:42,110
each environment we could have a set of

00:12:38,959 --> 00:12:44,540
approvals or quality criteria like must

00:12:42,110 --> 00:12:47,360
pass unit tests or security test in

00:12:44,540 --> 00:12:49,250
order for us to push to each stage and

00:12:47,360 --> 00:12:51,410
then all this is audible right we know

00:12:49,250 --> 00:12:54,440
exactly what's going on so we'll get

00:12:51,410 --> 00:12:57,199
into some of this you'll notice that

00:12:54,440 --> 00:13:00,079
will also show the process designer this

00:12:57,199 --> 00:13:01,910
is one of the secret sauce here is at

00:13:00,079 --> 00:13:04,250
the far right you'll notice there's 130

00:13:01,910 --> 00:13:05,899
plugins and that means how does

00:13:04,250 --> 00:13:08,570
urbancode a poll i integrate with

00:13:05,899 --> 00:13:11,240
Jenkins oh we have a plug-in for it how

00:13:08,570 --> 00:13:14,570
does urbancode deploy integrate with

00:13:11,240 --> 00:13:16,940
microsoft iis we have a plug-in for it

00:13:14,570 --> 00:13:17,870
and what these plugins do is they wrap

00:13:16,940 --> 00:13:20,779
all the API

00:13:17,870 --> 00:13:22,940
of those specific tools and we put those

00:13:20,779 --> 00:13:25,070
behind the scenes and you can just drag

00:13:22,940 --> 00:13:28,390
and drop in that easy process designer

00:13:25,070 --> 00:13:31,610
that says all right stop Microsoft is

00:13:28,390 --> 00:13:33,830
redeployed this application restart iis

00:13:31,610 --> 00:13:35,390
and behind the scenes we call everything

00:13:33,830 --> 00:13:38,810
we need to call but you're not writing

00:13:35,390 --> 00:13:40,700
any scripts so now we do this across all

00:13:38,810 --> 00:13:42,650
the different technologies so you can

00:13:40,700 --> 00:13:44,900
take the same skills that you have about

00:13:42,650 --> 00:13:47,300
building processes and just apply the

00:13:44,900 --> 00:13:48,860
plugins and there's like over 130 right

00:13:47,300 --> 00:13:51,320
now and it's it's actually growing

00:13:48,860 --> 00:13:55,130
pretty rapidly and we actually

00:13:51,320 --> 00:13:57,290
distribute those on a separate site from

00:13:55,130 --> 00:14:00,230
or we can we can release them

00:13:57,290 --> 00:14:02,330
tangentially from our actual urbancode

00:14:00,230 --> 00:14:05,720
release because it's just a third-party

00:14:02,330 --> 00:14:08,480
plugin most of them are IBM own but it's

00:14:05,720 --> 00:14:10,850
not baked into the product I don't know

00:14:08,480 --> 00:14:14,270
if that made sense but anyways Act and

00:14:10,850 --> 00:14:17,060
the the automation is scalable now what

00:14:14,270 --> 00:14:20,089
we mean by that is probably a topic of

00:14:17,060 --> 00:14:23,990
much debate which says urbancode deploy

00:14:20,089 --> 00:14:25,430
is a server agent model and there are

00:14:23,990 --> 00:14:28,700
auto deploy solutions which are

00:14:25,430 --> 00:14:30,620
agentless and this is the the debate in

00:14:28,700 --> 00:14:32,779
the continuous delivery space of the

00:14:30,620 --> 00:14:35,990
agent versus agentless and here's why

00:14:32,779 --> 00:14:38,480
agent is better because of scalability

00:14:35,990 --> 00:14:40,880
if everything has to go through a single

00:14:38,480 --> 00:14:43,370
server for every deploy and you've got

00:14:40,880 --> 00:14:45,860
maybe you're a store with you know 2,000

00:14:43,370 --> 00:14:48,230
store locations and I need to deploy

00:14:45,860 --> 00:14:50,600
what does that look like I now have a

00:14:48,230 --> 00:14:52,279
bottleneck on my server or what are the

00:14:50,600 --> 00:14:54,020
credentials for each server I have to

00:14:52,279 --> 00:14:55,850
put all of that on the comment server

00:14:54,020 --> 00:14:58,040
what would be better if I had an agent

00:14:55,850 --> 00:15:00,650
on each endpoint and I could deploy all

00:14:58,040 --> 00:15:02,959
those simultaneously with one process

00:15:00,650 --> 00:15:06,860
and the agents just wake up and do their

00:15:02,959 --> 00:15:10,790
thing ah now we have scalability now we

00:15:06,860 --> 00:15:12,650
have a good model for us to grow on so

00:15:10,790 --> 00:15:18,230
that's what that's what we do with urban

00:15:12,650 --> 00:15:21,529
code deploy a little bit of 101

00:15:18,230 --> 00:15:24,760
groundwork here as we get into talking

00:15:21,529 --> 00:15:28,490
about how we integrate with Jenkins

00:15:24,760 --> 00:15:29,990
applications is a generic term I guess

00:15:28,490 --> 00:15:30,440
you probably have a definition for that

00:15:29,990 --> 00:15:33,200
but

00:15:30,440 --> 00:15:35,060
in in arabic meaning here is some

00:15:33,200 --> 00:15:37,700
logical grouping of stuff that you're

00:15:35,060 --> 00:15:40,250
going to push together and that's made

00:15:37,700 --> 00:15:42,770
up of components so in a very simple

00:15:40,250 --> 00:15:46,160
case it's some binaries whether these

00:15:42,770 --> 00:15:48,110
are drawer files or files j2ee some sort

00:15:46,160 --> 00:15:51,200
of database schema and then some

00:15:48,110 --> 00:15:54,980
configuration property files all three

00:15:51,200 --> 00:15:56,930
of those make up an application and we

00:15:54,980 --> 00:15:59,030
may have more you know even have to

00:15:56,930 --> 00:16:01,600
database you may have different binaries

00:15:59,030 --> 00:16:06,130
but applications are broken down into

00:16:01,600 --> 00:16:10,100
components so if you could think about

00:16:06,130 --> 00:16:11,510
like a pet store we may have a web front

00:16:10,100 --> 00:16:13,580
end user face may have a database

00:16:11,510 --> 00:16:15,590
back-end we may have some web services

00:16:13,580 --> 00:16:17,270
in the middle we could deploy those as

00:16:15,590 --> 00:16:22,900
three different components as part of

00:16:17,270 --> 00:16:26,180
the same application how do we do that

00:16:22,900 --> 00:16:28,280
here's how we do it so the application

00:16:26,180 --> 00:16:30,620
deployments orchestrate the component

00:16:28,280 --> 00:16:32,750
appointments now stay with me here if

00:16:30,620 --> 00:16:34,910
you look at we're talking about the left

00:16:32,750 --> 00:16:37,640
is this is some of the stuff that we

00:16:34,910 --> 00:16:40,990
can't do with you know build tools is we

00:16:37,640 --> 00:16:43,310
can start to do higher level models of

00:16:40,990 --> 00:16:46,190
ordering and how we should deploy the

00:16:43,310 --> 00:16:48,170
components so if you look at the deploy

00:16:46,190 --> 00:16:50,600
the application it's actually calling

00:16:48,170 --> 00:16:53,420
out to other processes like the

00:16:50,600 --> 00:16:55,010
component process deployments so the

00:16:53,420 --> 00:16:57,830
first thing we want to do is so if we

00:16:55,010 --> 00:16:59,780
always had to deploy the j2ee app before

00:16:57,830 --> 00:17:02,180
we deployed the database or vice versa

00:16:59,780 --> 00:17:04,430
we could order that in the process

00:17:02,180 --> 00:17:06,050
definition for the application and that

00:17:04,430 --> 00:17:08,480
way we know every time that we deploy

00:17:06,050 --> 00:17:10,280
the application this is the order that

00:17:08,480 --> 00:17:12,230
will get now what this is saying is

00:17:10,280 --> 00:17:13,790
we're going to start by deploying the

00:17:12,230 --> 00:17:15,260
app and then we're actually going to

00:17:13,790 --> 00:17:17,420
deploy those other two things at the

00:17:15,260 --> 00:17:19,730
same time so we're actually forking off

00:17:17,420 --> 00:17:22,579
the process and we're saying go ahead

00:17:19,730 --> 00:17:24,620
and do is these together because they're

00:17:22,579 --> 00:17:25,809
independent and then we'll wait till

00:17:24,620 --> 00:17:28,240
they both finish

00:17:25,809 --> 00:17:29,470
then we'll finish the result and there

00:17:28,240 --> 00:17:31,029
are other interesting things you can do

00:17:29,470 --> 00:17:34,990
like if you see that green little check

00:17:31,029 --> 00:17:36,429
box check mark that's a flag which you

00:17:34,990 --> 00:17:38,830
could actually have a separate path

00:17:36,429 --> 00:17:41,710
which said if the deploy app fails go

00:17:38,830 --> 00:17:43,809
this way if the deploy app succeeds you

00:17:41,710 --> 00:17:45,759
know go this path so there's a blob that

00:17:43,809 --> 00:17:46,960
you can put in there as well and then

00:17:45,759 --> 00:17:50,409
when you look at the component

00:17:46,960 --> 00:17:52,059
deployment if the right that describes

00:17:50,409 --> 00:17:54,610
how we actually do that so maybe we're

00:17:52,059 --> 00:17:57,429
downloading the artifacts from like a

00:17:54,610 --> 00:17:59,049
artifact repository and then we're

00:17:57,429 --> 00:18:00,700
deploying to WebSphere we're installing

00:17:59,049 --> 00:18:02,950
the application and we're restarting

00:18:00,700 --> 00:18:05,619
websphere that could be a simple sample

00:18:02,950 --> 00:18:07,269
process for the component and then once

00:18:05,619 --> 00:18:09,879
we have these we can reuse these across

00:18:07,269 --> 00:18:12,730
every deployment across every

00:18:09,879 --> 00:18:15,340
environment now why what's some of the

00:18:12,730 --> 00:18:16,690
advantages here well for one we're just

00:18:15,340 --> 00:18:18,249
dragging and dropping we're not doing

00:18:16,690 --> 00:18:20,710
any scripting we're setting a few

00:18:18,249 --> 00:18:23,559
properties and these properties can be

00:18:20,710 --> 00:18:27,249
over written so in the environment for

00:18:23,559 --> 00:18:28,779
QA we can override maybe the DB URL for

00:18:27,249 --> 00:18:30,610
what we had in devs because it may be on

00:18:28,779 --> 00:18:32,259
a separate machine with a separate URL

00:18:30,610 --> 00:18:33,700
but we don't need a separate you know

00:18:32,259 --> 00:18:37,779
process for that we just have that

00:18:33,700 --> 00:18:39,580
property we can control the execution

00:18:37,779 --> 00:18:42,519
flow and we have tons of these plugins

00:18:39,580 --> 00:18:45,759
with tons of steps there's 130 plugins

00:18:42,519 --> 00:18:47,080
and they probably have you know 10 to 50

00:18:45,759 --> 00:18:49,119
steps in each one of them so there's

00:18:47,080 --> 00:18:53,740
tons and tons of integration points

00:18:49,119 --> 00:19:02,830
across other tools does that making

00:18:53,740 --> 00:19:04,910
sense all right cool okay

00:19:02,830 --> 00:19:07,460
now we also have the notion of a

00:19:04,910 --> 00:19:10,850
snapshot which this is pretty cool this

00:19:07,460 --> 00:19:13,250
is will save you so as you start to

00:19:10,850 --> 00:19:14,750
think about what our applications are

00:19:13,250 --> 00:19:17,210
getting a little bit more complicated we

00:19:14,750 --> 00:19:19,610
have 10 to 20 of components per

00:19:17,210 --> 00:19:20,900
application and they're changing every

00:19:19,610 --> 00:19:23,240
day because we're doing continuous

00:19:20,900 --> 00:19:24,950
integration and continuous development

00:19:23,240 --> 00:19:28,810
and all of a sudden we have all these

00:19:24,950 --> 00:19:32,240
versions of the components well as a

00:19:28,810 --> 00:19:34,460
tester maybe I would like to know which

00:19:32,240 --> 00:19:36,410
versions that the developer was working

00:19:34,460 --> 00:19:40,460
with in dev when he said all my unit

00:19:36,410 --> 00:19:42,470
tests passed or as a integration person

00:19:40,460 --> 00:19:44,900
maybe want to know the QA testers what

00:19:42,470 --> 00:19:46,910
versions were they working on with their

00:19:44,900 --> 00:19:48,500
functional tests so we have the ability

00:19:46,910 --> 00:19:51,080
do is take a snapshot and this will

00:19:48,500 --> 00:19:52,460
capture the version of all the related

00:19:51,080 --> 00:19:54,170
components that are a part of that

00:19:52,460 --> 00:19:57,260
application so the database

00:19:54,170 --> 00:20:00,410
configuration properties any of the java

00:19:57,260 --> 00:20:03,440
war files or dll's whatever technology

00:20:00,410 --> 00:20:05,480
it may be we capture that snapshot so

00:20:03,440 --> 00:20:08,600
that's a version set of components and

00:20:05,480 --> 00:20:11,600
now think about how you may go from dev

00:20:08,600 --> 00:20:13,340
to QA today in how you might manually

00:20:11,600 --> 00:20:17,750
redeploy everything and follow the

00:20:13,340 --> 00:20:19,640
script and maybe you miss one of the

00:20:17,750 --> 00:20:23,120
components and oops we forgot to update

00:20:19,640 --> 00:20:24,680
the database darn it well this would

00:20:23,120 --> 00:20:26,690
never happen with the snapshot because

00:20:24,680 --> 00:20:28,700
we take that snapshot as a whole and

00:20:26,690 --> 00:20:31,550
remove that entire hole between the

00:20:28,700 --> 00:20:34,310
environments so now we know exactly what

00:20:31,550 --> 00:20:37,130
we want what's been tested we can tag

00:20:34,310 --> 00:20:39,740
this for whatever we want to give around

00:20:37,130 --> 00:20:42,590
the version of that snapshot so things

00:20:39,740 --> 00:20:44,630
like rollback if you have a problem you

00:20:42,590 --> 00:20:48,760
can always just roll back to the latest

00:20:44,630 --> 00:20:54,020
snapshot and we deploy those very easy

00:20:48,760 --> 00:20:56,750
similar to source control okay and the

00:20:54,020 --> 00:21:02,270
last part up here is the environment

00:20:56,750 --> 00:21:04,370
models so again this is the ability to

00:21:02,270 --> 00:21:06,620
model the actual resources that you may

00:21:04,370 --> 00:21:09,260
be deploying to with the recognition

00:21:06,620 --> 00:21:11,690
that you may want traceability and

00:21:09,260 --> 00:21:15,380
an easy way to see what's happening so

00:21:11,690 --> 00:21:18,110
we actually model what the resources are

00:21:15,380 --> 00:21:20,600
so is it a single server there multiple

00:21:18,110 --> 00:21:23,810
servers so you'll notice an SI t we just

00:21:20,600 --> 00:21:26,840
have one machine which has all of our

00:21:23,810 --> 00:21:29,120
components on it and maybe in uat we

00:21:26,840 --> 00:21:30,830
have two machines database and a web

00:21:29,120 --> 00:21:33,920
machine in the production we might have

00:21:30,830 --> 00:21:36,230
100 machines well we want to map that so

00:21:33,920 --> 00:21:38,390
we understand where we need to put all

00:21:36,230 --> 00:21:41,450
this stuff and we want to be able to

00:21:38,390 --> 00:21:43,520
compare you know what does uat versus SI

00:21:41,450 --> 00:21:45,320
t look like even though they have

00:21:43,520 --> 00:21:46,910
different you know set of resources and

00:21:45,320 --> 00:21:48,670
at the bottom you see like things like

00:21:46,910 --> 00:21:51,950
the properties that we've overwritten

00:21:48,670 --> 00:21:54,530
for SI t as a dev password in production

00:21:51,950 --> 00:21:56,300
may have a production password so this

00:21:54,530 --> 00:22:01,220
is another way that we can set

00:21:56,300 --> 00:22:03,140
environment specific configurations okay

00:22:01,220 --> 00:22:05,630
so the question was if a separate team

00:22:03,140 --> 00:22:07,070
is managing production than what is

00:22:05,630 --> 00:22:10,220
managing everything before production

00:22:07,070 --> 00:22:12,470
how would we use the tool so there's a

00:22:10,220 --> 00:22:13,940
couple ways to do that you know one if

00:22:12,470 --> 00:22:16,670
they're going to use urban code deploy

00:22:13,940 --> 00:22:19,130
for example you could have multiple

00:22:16,670 --> 00:22:21,860
servers with isolation and you could

00:22:19,130 --> 00:22:25,760
import the binaries into the other urban

00:22:21,860 --> 00:22:27,770
cool code deploy server so for example

00:22:25,760 --> 00:22:30,130
in scenarios where there is no network

00:22:27,770 --> 00:22:31,970
connection and it's a federal lockdown

00:22:30,130 --> 00:22:33,590
from production to the other

00:22:31,970 --> 00:22:35,630
environments that would be an example

00:22:33,590 --> 00:22:37,490
you could carry the files over and

00:22:35,630 --> 00:22:45,490
import them into the other server and

00:22:37,490 --> 00:22:45,490
reuse the same process yep okay

00:22:46,760 --> 00:22:52,230
okay yeah so in that case if we can poke

00:22:50,490 --> 00:22:54,900
through then you can do with the same

00:22:52,230 --> 00:22:57,360
server and urban code deploy has a

00:22:54,900 --> 00:22:59,790
notion of one of the advantages is it

00:22:57,360 --> 00:23:02,190
has a very rich security model so we

00:22:59,790 --> 00:23:04,770
have roles within the environment

00:23:02,190 --> 00:23:06,810
enrolls can be assigned to people and

00:23:04,770 --> 00:23:08,130
people can be part of teams and teams

00:23:06,810 --> 00:23:10,140
can be assigned to a lot of the

00:23:08,130 --> 00:23:12,840
different in the whether it's a

00:23:10,140 --> 00:23:14,580
component or an application or an

00:23:12,840 --> 00:23:17,490
environment so what you would do is you

00:23:14,580 --> 00:23:19,620
create a production team that owns the

00:23:17,490 --> 00:23:21,780
production environment and only people

00:23:19,620 --> 00:23:23,760
that have that production role or part

00:23:21,780 --> 00:23:28,550
of that production team would be able to

00:23:23,760 --> 00:23:33,060
touch production I'd be the best way

00:23:28,550 --> 00:23:34,680
good question all right so if we put it

00:23:33,060 --> 00:23:38,010
all together how does this whole thing

00:23:34,680 --> 00:23:40,560
look like so we do a build on the build

00:23:38,010 --> 00:23:43,470
completion the latest artifacts are

00:23:40,560 --> 00:23:45,630
published to urbancode deploy oh let me

00:23:43,470 --> 00:23:46,920
stop here to mention there's been a lot

00:23:45,630 --> 00:23:50,520
of talk this week about different

00:23:46,920 --> 00:23:52,800
artifact repositories and do we have to

00:23:50,520 --> 00:23:55,260
use them or does your code have its own

00:23:52,800 --> 00:23:57,720
and the answer is we could do either so

00:23:55,260 --> 00:24:01,230
if you really like your repository or

00:23:57,720 --> 00:24:04,080
even your file system no problem you

00:24:01,230 --> 00:24:06,090
could publish from Jenkins to a file

00:24:04,080 --> 00:24:07,920
system or to an artifact repository an

00:24:06,090 --> 00:24:10,800
urban code deploy could talk to those

00:24:07,920 --> 00:24:13,170
repositories and if you're doing that

00:24:10,800 --> 00:24:16,110
actually there's no need to integrate to

00:24:13,170 --> 00:24:18,510
Jenkins from urban code deploy because

00:24:16,110 --> 00:24:20,550
we talk directly to the file system or

00:24:18,510 --> 00:24:22,430
two that repository so I kind of

00:24:20,550 --> 00:24:24,330
everything i'm showing you is would be

00:24:22,430 --> 00:24:26,310
non-essential but if you want to take

00:24:24,330 --> 00:24:30,090
the other path which says okay at the

00:24:26,310 --> 00:24:33,300
end of a urban code or a Jenkins build I

00:24:30,090 --> 00:24:35,670
want to publish to eric 02 poise code

00:24:33,300 --> 00:24:38,580
station library that's what this plugin

00:24:35,670 --> 00:24:43,320
is designed to do so we when the bill

00:24:38,580 --> 00:24:44,790
Bruns we publish the artifacts to the

00:24:43,320 --> 00:24:46,650
development environment and urban code

00:24:44,790 --> 00:24:49,200
deploy and then we have the building to

00:24:46,650 --> 00:24:51,330
do something these aren't required but

00:24:49,200 --> 00:24:53,280
then are nice so after deployment we

00:24:51,330 --> 00:24:55,860
could start some automated tests perhaps

00:24:53,280 --> 00:24:58,160
we can provision some test environments

00:24:55,860 --> 00:25:02,030
and run some tests and then we could add

00:24:58,160 --> 00:25:03,170
tags that say has this past the quality

00:25:02,030 --> 00:25:06,700
gate that we're looking for for

00:25:03,170 --> 00:25:08,900
functional tests so in order for this

00:25:06,700 --> 00:25:10,880
version of the component to move to the

00:25:08,900 --> 00:25:13,010
next version it has to pass these

00:25:10,880 --> 00:25:15,710
quality gates and these can also be

00:25:13,010 --> 00:25:18,320
approvals so we can ask for manual sign

00:25:15,710 --> 00:25:21,260
off so whether that's a role like the

00:25:18,320 --> 00:25:23,420
dev lead or specific individuals we can

00:25:21,260 --> 00:25:25,040
ask for their approval before we go to

00:25:23,420 --> 00:25:27,950
the next phase and that may be helpful

00:25:25,040 --> 00:25:30,080
for like production so we talked about a

00:25:27,950 --> 00:25:32,150
little bit early now you can secure your

00:25:30,080 --> 00:25:34,340
environments and only the environment

00:25:32,150 --> 00:25:36,050
you want to secure it could be that you

00:25:34,340 --> 00:25:40,160
don't care about security in any of the

00:25:36,050 --> 00:25:43,610
things pre-production or pre SI t or

00:25:40,160 --> 00:25:45,620
whatever it is maybe you keep those you

00:25:43,610 --> 00:25:47,720
know pretty loose but then when you get

00:25:45,620 --> 00:25:49,700
later in a life cycle you may want to

00:25:47,720 --> 00:25:54,020
notch up that security so we make that

00:25:49,700 --> 00:25:56,330
very easy to do and of course as we are

00:25:54,020 --> 00:25:58,310
passing tests will make a snapshot of

00:25:56,330 --> 00:26:00,830
all those component versions so that we

00:25:58,310 --> 00:26:04,340
can push the snapshot into production as

00:26:00,830 --> 00:26:06,650
a whole and incidentally another

00:26:04,340 --> 00:26:09,380
advantage here is if only if we look at

00:26:06,650 --> 00:26:13,880
my web app and only the war file changed

00:26:09,380 --> 00:26:15,830
we could use the same process we don't

00:26:13,880 --> 00:26:17,810
have to change anything we just run our

00:26:15,830 --> 00:26:19,940
process deploy that snapshot and then it

00:26:17,810 --> 00:26:22,010
will ignore all the versions that have

00:26:19,940 --> 00:26:24,170
it changed and it'll just push the

00:26:22,010 --> 00:26:25,550
change that we need to so again that's

00:26:24,170 --> 00:26:31,850
going to save us a lot of time in

00:26:25,550 --> 00:26:34,250
deployment okay so here's what it looks

00:26:31,850 --> 00:26:37,190
like now you may not be able to read

00:26:34,250 --> 00:26:40,160
that very very good but essentially we

00:26:37,190 --> 00:26:43,130
install plugin into jenkins and then as

00:26:40,160 --> 00:26:45,170
part of your post build action section

00:26:43,130 --> 00:26:47,420
you can add a post build action for

00:26:45,170 --> 00:26:48,530
urban code deploy and basically what

00:26:47,420 --> 00:26:50,540
you're going to do is you're going to

00:26:48,530 --> 00:26:52,580
tell it you know what's the location of

00:26:50,540 --> 00:26:54,590
the server what's the component i'm

00:26:52,580 --> 00:26:56,660
going to use and then you have a set of

00:26:54,590 --> 00:26:58,550
properties that you can you can fill in

00:26:56,660 --> 00:27:00,920
about which files do you want me to

00:26:58,550 --> 00:27:03,230
include or exclude or which directories

00:27:00,920 --> 00:27:06,140
you want me to start at and then you can

00:27:03,230 --> 00:27:08,060
ask to deploy so as part of the jenkins

00:27:06,140 --> 00:27:11,220
process you can either just push the

00:27:08,060 --> 00:27:14,850
artifacts into the open code deploy

00:27:11,220 --> 00:27:16,169
station and do nothing more or at the

00:27:14,850 --> 00:27:18,530
last at the bottom there there's a

00:27:16,169 --> 00:27:21,240
checkbox for deploy and you can actually

00:27:18,530 --> 00:27:24,000
push a new version into the urban code

00:27:21,240 --> 00:27:26,789
deploy and request that a deploy be made

00:27:24,000 --> 00:27:28,380
and you can specify the environment that

00:27:26,789 --> 00:27:31,169
you want to deploy to you and the

00:27:28,380 --> 00:27:32,669
process that you'd like to run so pretty

00:27:31,169 --> 00:27:35,549
cool is developer making a change and

00:27:32,669 --> 00:27:37,950
get I release it Jenkins bill gets

00:27:35,549 --> 00:27:39,750
kicked off if it's successful we go in

00:27:37,950 --> 00:27:42,000
we upload versions to urban code deploy

00:27:39,750 --> 00:27:43,679
and we automatically kick off a deploy

00:27:42,000 --> 00:27:45,630
into whatever environment we wanted

00:27:43,679 --> 00:27:47,520
maybe it's a test environment and I can

00:27:45,630 --> 00:27:49,289
immediately test my changes without

00:27:47,520 --> 00:27:51,630
having to touch any of those tools all I

00:27:49,289 --> 00:27:53,669
was maybe in eclipse doing job

00:27:51,630 --> 00:28:01,169
development in my wicked source control

00:27:53,669 --> 00:28:04,049
so a good story there there are other

00:28:01,169 --> 00:28:05,940
options like if you don't use the plugin

00:28:04,049 --> 00:28:07,799
we have a command line client and that

00:28:05,940 --> 00:28:09,960
could be embedded also into your build

00:28:07,799 --> 00:28:13,470
files so if you wanted to do a lot of

00:28:09,960 --> 00:28:15,960
fancy stuff whatever that may be you can

00:28:13,470 --> 00:28:23,309
get access to all of the urban code abis

00:28:15,960 --> 00:28:25,770
via command line so just to recap that

00:28:23,309 --> 00:28:28,620
what you want to do is there's a link in

00:28:25,770 --> 00:28:30,360
here for the documentation on how to do

00:28:28,620 --> 00:28:33,059
the integration so i would suggest

00:28:30,360 --> 00:28:35,280
reviewing that it'll have a link to the

00:28:33,059 --> 00:28:36,960
download which is pretty small it'll

00:28:35,280 --> 00:28:39,419
tell you how to install it into urban

00:28:36,960 --> 00:28:41,760
code deploy install the plugin and then

00:28:39,419 --> 00:28:44,280
you have to restart champions so that it

00:28:41,760 --> 00:28:46,409
shows up then you'll add a profile to

00:28:44,280 --> 00:28:48,419
the urban code I mean to Jenkins for the

00:28:46,409 --> 00:28:50,730
urban code deploy server make sure the

00:28:48,419 --> 00:28:52,860
URL is right in the password and then

00:28:50,730 --> 00:28:54,780
for any job that you want to you can

00:28:52,860 --> 00:28:57,799
configure a post build action to publish

00:28:54,780 --> 00:28:57,799
artifacts to urban code deploy

00:29:02,020 --> 00:29:05,020
ok

00:29:07,800 --> 00:29:15,510
alright so there is more though but wait

00:29:11,400 --> 00:29:17,010
there's more by going down the urban

00:29:15,510 --> 00:29:19,140
code deploy path this is just the

00:29:17,010 --> 00:29:21,300
beginning of the urban code platform if

00:29:19,140 --> 00:29:23,280
you will there are other tools out there

00:29:21,300 --> 00:29:26,100
I won't mention the bottom one which is

00:29:23,280 --> 00:29:27,960
urbancode bill you know Jenkins is a

00:29:26,100 --> 00:29:29,970
good enough bill tool in nineteen

00:29:27,960 --> 00:29:31,920
ninety-eight percent of the cases but

00:29:29,970 --> 00:29:36,600
just that I don't get fired I'll mention

00:29:31,920 --> 00:29:38,250
that we do have a built tool and but the

00:29:36,600 --> 00:29:41,390
two ones i do want to talk about which

00:29:38,250 --> 00:29:45,000
are part of your application and release

00:29:41,390 --> 00:29:47,400
automation and orchestration is herba

00:29:45,000 --> 00:29:49,980
code release which has a nice tie in

00:29:47,400 --> 00:29:51,480
turbaco deploy but more at a higher

00:29:49,980 --> 00:29:53,850
level and urban code deploy with

00:29:51,480 --> 00:29:56,580
patterns which is sort of an emerging to

00:29:53,850 --> 00:30:00,150
linspace around this notion of OpenStack

00:29:56,580 --> 00:30:02,880
and software-defined environments so

00:30:00,150 --> 00:30:04,950
let's take a quick look there so what do

00:30:02,880 --> 00:30:07,110
we mean by yet software-defined

00:30:04,950 --> 00:30:08,970
environment well this is what we're

00:30:07,110 --> 00:30:11,310
talking about infrastructure is code you

00:30:08,970 --> 00:30:13,950
know where all of a sudden and

00:30:11,310 --> 00:30:15,900
application and its infrastructure are

00:30:13,950 --> 00:30:18,390
no longer two separate things they're

00:30:15,900 --> 00:30:20,730
really the same thing my application and

00:30:18,390 --> 00:30:23,700
whatever I need to run it now is the

00:30:20,730 --> 00:30:27,600
same thing interesting idea and there is

00:30:23,700 --> 00:30:30,690
a open source no sorry open standard

00:30:27,600 --> 00:30:32,880
committee called OpenStack which I

00:30:30,690 --> 00:30:34,950
believe is one of the biggest open

00:30:32,880 --> 00:30:36,870
source projects right now it may be the

00:30:34,950 --> 00:30:39,090
biggest active with number of commits

00:30:36,870 --> 00:30:43,140
don't quote me on that even this being

00:30:39,090 --> 00:30:46,440
recorded it's one of the biggest and the

00:30:43,140 --> 00:30:49,620
whole idea behind that is is good news

00:30:46,440 --> 00:30:53,160
for you this is going to prevent vendor

00:30:49,620 --> 00:30:55,020
lock-in the idea is we need sort of an

00:30:53,160 --> 00:30:57,660
operating system for cloud management

00:30:55,020 --> 00:30:59,760
and that's what OpenStack does so if I

00:30:57,660 --> 00:31:02,220
want to build a pattern that's say I'm

00:30:59,760 --> 00:31:05,580
going to run this database with this web

00:31:02,220 --> 00:31:07,980
server and you know whatever else I need

00:31:05,580 --> 00:31:09,960
in there maybe it's 10 machines I can

00:31:07,980 --> 00:31:12,630
create that as a pattern which you know

00:31:09,960 --> 00:31:14,910
looks like a PowerPoint you know

00:31:12,630 --> 00:31:17,520
drag-and-drop type of us feel and now I

00:31:14,910 --> 00:31:20,280
can deploy it to any OpenStack provider

00:31:17,520 --> 00:31:23,880
be at IBM be it somebody else

00:31:20,280 --> 00:31:26,040
in a way you go and if at any point you

00:31:23,880 --> 00:31:27,600
don't like your cloud provider and you

00:31:26,040 --> 00:31:30,630
have the right contract you could drop

00:31:27,600 --> 00:31:32,970
it and switch providers so that's pretty

00:31:30,630 --> 00:31:35,040
awesome and it's also one standard that

00:31:32,970 --> 00:31:37,260
we can start to wrap our heads around on

00:31:35,040 --> 00:31:40,080
how we do this pattern development and

00:31:37,260 --> 00:31:42,030
it's very popular with an IBM now we

00:31:40,080 --> 00:31:45,210
were kind of head of the curve i think

00:31:42,030 --> 00:31:47,460
when we started creating our own pattern

00:31:45,210 --> 00:31:51,780
a while ago and there's a lot of things

00:31:47,460 --> 00:31:53,730
moving to OpenStack within IBM so what

00:31:51,780 --> 00:31:55,320
are becau deploy it matters does is it

00:31:53,730 --> 00:31:58,080
allows you to do a rich drag-and-drop

00:31:55,320 --> 00:32:00,120
and create these pictures like in number

00:31:58,080 --> 00:32:02,190
two where we have a set of web servers

00:32:00,120 --> 00:32:03,750
or set of app servers set a database

00:32:02,190 --> 00:32:07,020
servers we see the connections between

00:32:03,750 --> 00:32:09,720
them we can look put in things like load

00:32:07,020 --> 00:32:13,110
balancers firewalls and then we go ask

00:32:09,720 --> 00:32:15,390
the heat engine which is the OpenStack

00:32:13,110 --> 00:32:17,640
engine which can then deploy this

00:32:15,390 --> 00:32:19,650
environment and once we deploy in the

00:32:17,640 --> 00:32:21,360
environment we can use our urbancode

00:32:19,650 --> 00:32:23,250
deploy which is baked into urban code

00:32:21,360 --> 00:32:27,510
deploy with patterns to update the

00:32:23,250 --> 00:32:31,830
application as we need to so now that's

00:32:27,510 --> 00:32:34,680
a really easy spin-up and spin-down as a

00:32:31,830 --> 00:32:37,020
developer if i need to do some tests or

00:32:34,680 --> 00:32:39,510
is a test writing to spin up some tests

00:32:37,020 --> 00:32:41,220
for performance and i want to spin them

00:32:39,510 --> 00:32:42,930
up run a bunch of stuff and then tear

00:32:41,220 --> 00:32:45,570
them down and I want to do that

00:32:42,930 --> 00:32:48,480
repeatedly ah this is going to give me

00:32:45,570 --> 00:32:50,550
that very easily and you'll notice

00:32:48,480 --> 00:32:53,820
number three we've actually done some

00:32:50,550 --> 00:32:57,780
homework to make it portable across some

00:32:53,820 --> 00:32:59,930
things that maybe not OpenStack so we do

00:32:57,780 --> 00:33:03,710
work with VMware vCenter we work with

00:32:59,930 --> 00:33:06,840
IBM OpenStack and any OpenStack provider

00:33:03,710 --> 00:33:10,140
and we do also work with amazon web

00:33:06,840 --> 00:33:13,410
services and software software for those

00:33:10,140 --> 00:33:17,340
who don't know is the IBM answer to

00:33:13,410 --> 00:33:19,820
Amazon ec2 which is a infrastructure as

00:33:17,340 --> 00:33:19,820
a service

00:33:22,960 --> 00:33:28,370
okay and what is over code release then

00:33:26,090 --> 00:33:30,019
so if you think about whatever code

00:33:28,370 --> 00:33:31,340
deploy does it looks at ok I've got

00:33:30,019 --> 00:33:34,220
application but you're made of

00:33:31,340 --> 00:33:38,179
components and I know how to deploy and

00:33:34,220 --> 00:33:41,899
automate those now as you get into you

00:33:38,179 --> 00:33:43,220
know a bigger group you may start to

00:33:41,899 --> 00:33:44,990
realize we have more than one

00:33:43,220 --> 00:33:47,269
application and these things are

00:33:44,990 --> 00:33:49,159
starting to be interrelated and we may

00:33:47,269 --> 00:33:51,200
have a release train that everybody's

00:33:49,159 --> 00:33:53,600
getting on or we may want to map and

00:33:51,200 --> 00:33:55,789
manage when everybody is releasing their

00:33:53,600 --> 00:33:57,559
applications because I might want to

00:33:55,789 --> 00:34:00,019
make sure that i'm testing with the

00:33:57,559 --> 00:34:02,809
latest versions applications and that's

00:34:00,019 --> 00:34:06,080
where release urbancode release comes in

00:34:02,809 --> 00:34:08,690
it's more of this high level across

00:34:06,080 --> 00:34:12,440
applications how do i check status of

00:34:08,690 --> 00:34:14,210
which stage each application is that and

00:34:12,440 --> 00:34:17,089
you know which versions of those

00:34:14,210 --> 00:34:20,359
applications are in each environment so

00:34:17,089 --> 00:34:22,339
it's kind of blurry but in the in the

00:34:20,359 --> 00:34:25,460
picture there what I was trying to show

00:34:22,339 --> 00:34:27,710
us as you go across those are the

00:34:25,460 --> 00:34:29,780
different environments like dev QA prod

00:34:27,710 --> 00:34:33,889
and then going down are the applications

00:34:29,780 --> 00:34:35,210
and in the middle or the versions so we

00:34:33,889 --> 00:34:39,079
can and those are based upon the

00:34:35,210 --> 00:34:41,179
application snapshot version so what we

00:34:39,079 --> 00:34:43,490
would expect to see is kind of a

00:34:41,179 --> 00:34:45,530
progression from maybe the latest

00:34:43,490 --> 00:34:48,020
versions are in dev in the production

00:34:45,530 --> 00:34:50,149
are more the stable versions and we can

00:34:48,020 --> 00:34:51,829
start to see you know when does this

00:34:50,149 --> 00:34:53,569
applications when are they going to pick

00:34:51,829 --> 00:34:54,909
up this version you know etc and when

00:34:53,569 --> 00:34:58,160
are they going to make it to this stage

00:34:54,909 --> 00:35:01,339
so very easy high level pipeline type

00:34:58,160 --> 00:35:04,220
view we can also do calendaring that may

00:35:01,339 --> 00:35:06,910
show at the bottom there about you know

00:35:04,220 --> 00:35:10,369
again across different applications

00:35:06,910 --> 00:35:11,750
where they at in their calendar an epic

00:35:10,369 --> 00:35:14,780
ative release impact so we can also

00:35:11,750 --> 00:35:17,240
actually see the work items here coming

00:35:14,780 --> 00:35:20,030
from things like JIRA or team concert

00:35:17,240 --> 00:35:21,770
that are related to the releases and how

00:35:20,030 --> 00:35:23,780
are we doing if we need to drop one of

00:35:21,770 --> 00:35:26,329
those or what's the status of those work

00:35:23,780 --> 00:35:28,160
items so a lot of risk management a lot

00:35:26,329 --> 00:35:29,960
of enterprise calendaring and there's

00:35:28,160 --> 00:35:31,660
some orchestration we can do here as

00:35:29,960 --> 00:35:34,480
well so if we want to do things

00:35:31,660 --> 00:35:36,520
like automated progression across

00:35:34,480 --> 00:35:41,230
environments we can start to do that

00:35:36,520 --> 00:35:42,970
with urbancode release so there's a

00:35:41,230 --> 00:35:44,710
little bit of overlap because they both

00:35:42,970 --> 00:35:46,809
have quality gates but if you think ur

00:35:44,710 --> 00:35:49,299
bekhoda paula is for automation for

00:35:46,809 --> 00:35:51,789
applications urbancode release is more

00:35:49,299 --> 00:35:53,140
for the higher level more like City

00:35:51,789 --> 00:36:00,240
Planning you know we need to orchestrate

00:35:53,140 --> 00:36:00,240
across multiple applications sure

00:36:06,070 --> 00:36:10,570
servicenow and urban code deploy I'm

00:36:09,460 --> 00:36:19,090
pretty sure we have a plug in for

00:36:10,570 --> 00:36:22,260
service now I could check is this still

00:36:19,090 --> 00:36:22,260
not coming up okay

00:36:26,920 --> 00:36:35,619
I'll show you how to I'll show you how

00:36:33,309 --> 00:36:37,809
to fish by answering that so all the

00:36:35,619 --> 00:36:41,230
plugins that you may ask about if you go

00:36:37,809 --> 00:36:43,599
to urban code and type plugins you'll

00:36:41,230 --> 00:36:45,640
come to this page and this lists all the

00:36:43,599 --> 00:36:53,799
ER bacot deployed plugins and then you

00:36:45,640 --> 00:36:57,930
can start to do a search like oh there's

00:36:53,799 --> 00:36:57,930
Jenkins so we have a plug-in for Jenkins

00:37:04,220 --> 00:37:13,450
so ever see their service now and then

00:37:11,119 --> 00:37:15,890
when what shows up you can click on it

00:37:13,450 --> 00:37:19,940
it will take you to more details about

00:37:15,890 --> 00:37:23,300
that plug-in so usually it will give you

00:37:19,940 --> 00:37:26,240
a download and that will install and and

00:37:23,300 --> 00:37:29,359
the available steps or usually show so

00:37:26,240 --> 00:37:31,849
what this means is within a urbancode

00:37:29,359 --> 00:37:33,470
deploy process these are the things we

00:37:31,849 --> 00:37:35,090
can call by dragging dropping these

00:37:33,470 --> 00:37:37,660
steps which will communicate with

00:37:35,090 --> 00:37:37,660
service though

00:37:48,960 --> 00:37:58,859
uh okay says it was released 2013

00:37:55,589 --> 00:38:01,109
november i don't know if that's when the

00:37:58,859 --> 00:38:03,109
latest or that i don't know exactly when

00:38:01,109 --> 00:38:06,480
it was first released I'd have to look

00:38:03,109 --> 00:38:08,760
maybe this is the first so I'm not sure

00:38:06,480 --> 00:38:11,670
oh yeah the question was when was it

00:38:08,760 --> 00:38:13,440
released originally I'm not i think

00:38:11,670 --> 00:38:24,060
we're showing the latest version not the

00:38:13,440 --> 00:38:25,560
current the first version click it this

00:38:24,060 --> 00:38:39,960
has never heard when the attendees are

00:38:25,560 --> 00:38:42,500
driving the demo September 19 is that

00:38:39,960 --> 00:38:46,609
the same so maybe this is the first one

00:38:42,500 --> 00:38:46,609
yeah looks like there's no prior

00:38:50,270 --> 00:39:07,150
sure hey where's where's slides go come

00:38:59,000 --> 00:39:07,150
back over not one second oh we're back

00:39:07,480 --> 00:39:15,020
okay so oh yeah this may be a little

00:39:10,580 --> 00:39:17,990
salesy I apologize here but some of the

00:39:15,020 --> 00:39:19,280
results you can see if you look at each

00:39:17,990 --> 00:39:20,960
one of these they're real results as

00:39:19,280 --> 00:39:23,060
well the reason why I'm showing is a lot

00:39:20,960 --> 00:39:24,590
of people have tremendous success with

00:39:23,060 --> 00:39:26,600
these continuous deployment tools

00:39:24,590 --> 00:39:28,220
because things like jackets are so

00:39:26,600 --> 00:39:30,860
popular that there is such a problem

00:39:28,220 --> 00:39:33,380
about the bottleneck has just moved down

00:39:30,860 --> 00:39:35,750
the lifecycle and you can really start

00:39:33,380 --> 00:39:36,770
to you could be heroes by fish adopting

00:39:35,750 --> 00:39:38,780
one of these tools right i mean

00:39:36,770 --> 00:39:40,430
seriously some of these they've released

00:39:38,780 --> 00:39:43,700
deployment time from two to three days

00:39:40,430 --> 00:39:47,180
to one to two hours that's huge cost

00:39:43,700 --> 00:39:49,730
avoidance of 2.3 million dollars in at

00:39:47,180 --> 00:39:53,270
the top right they reduced diploma time

00:39:49,730 --> 00:39:55,270
by ninety-five percent and you'll see

00:39:53,270 --> 00:40:00,140
these run across all these different

00:39:55,270 --> 00:40:05,330
industries okay so where are we going

00:40:00,140 --> 00:40:07,820
and what's next what is next is cloud

00:40:05,330 --> 00:40:10,010
the future is cloudy so if you look at

00:40:07,820 --> 00:40:11,570
the top left focus on that for now not

00:40:10,010 --> 00:40:12,650
the bottom right that's the bottom right

00:40:11,570 --> 00:40:14,960
is the answer I should have had this

00:40:12,650 --> 00:40:17,840
animated but you know such as the life

00:40:14,960 --> 00:40:20,240
of a technical person so at the top left

00:40:17,840 --> 00:40:22,460
it's the it's the blame game that he

00:40:20,240 --> 00:40:25,550
broke it the developers are saying

00:40:22,460 --> 00:40:27,650
operations is to slow the operations

00:40:25,550 --> 00:40:29,300
guys are saying the administrators are

00:40:27,650 --> 00:40:31,220
always breaking thing the network I keep

00:40:29,300 --> 00:40:33,740
stuffing stuff in and we've never tested

00:40:31,220 --> 00:40:35,870
it we never deploy the same thing twice

00:40:33,740 --> 00:40:38,570
holy mackerel and the business users

00:40:35,870 --> 00:40:40,370
like when can I just get my features you

00:40:38,570 --> 00:40:43,270
know seriously let's go what's taking

00:40:40,370 --> 00:40:46,580
you guys so long and nobody is happy

00:40:43,270 --> 00:40:48,620
everybody is distrusting this is not a

00:40:46,580 --> 00:40:50,840
good place to be this is what they call

00:40:48,620 --> 00:40:52,670
the death spiral releases start to take

00:40:50,840 --> 00:40:54,680
longer they become more intricate and

00:40:52,670 --> 00:40:57,230
more error-prone and it starts to get

00:40:54,680 --> 00:40:59,180
worse and worse and worse so we need to

00:40:57,230 --> 00:41:01,160
break that and the way that we can do

00:40:59,180 --> 00:41:03,260
that is really by adopting you know two

00:41:01,160 --> 00:41:05,450
things eugene kim talk

00:41:03,260 --> 00:41:07,160
we need to adopt DevOps and that's what

00:41:05,450 --> 00:41:10,210
we need to do but how do we make DevOps

00:41:07,160 --> 00:41:13,190
real and one of the ways to do that is

00:41:10,210 --> 00:41:15,530
adopting cloud infrastructure you know

00:41:13,190 --> 00:41:18,200
ways to provision applications in in

00:41:15,530 --> 00:41:19,700
their environments very rapidly and to

00:41:18,200 --> 00:41:22,040
be able to tear them down and do that

00:41:19,700 --> 00:41:23,900
very repeatedly being able he mentioned

00:41:22,040 --> 00:41:26,090
being on the test into production like

00:41:23,900 --> 00:41:28,670
environments how do we do that if we

00:41:26,090 --> 00:41:30,260
aren't using some sort of a cloud

00:41:28,670 --> 00:41:33,260
technology it's going to be very costly

00:41:30,260 --> 00:41:35,870
near in an error prone so what we want

00:41:33,260 --> 00:41:38,210
is the dev ops team at the right where

00:41:35,870 --> 00:41:40,210
everybody is happy and high-fiving each

00:41:38,210 --> 00:41:43,070
other going after the same goals

00:41:40,210 --> 00:41:45,020
delivering a pipeline automation by

00:41:43,070 --> 00:41:48,200
leveraging cloud where it makes sense

00:41:45,020 --> 00:41:50,060
and cloud infrastructure as a service

00:41:48,200 --> 00:41:52,400
where it makes sense but by also by

00:41:50,060 --> 00:41:54,620
managing at the middleware so what we

00:41:52,400 --> 00:41:57,710
mean is we need to have an intersection

00:41:54,620 --> 00:42:00,140
of the tools that we're using to deploy

00:41:57,710 --> 00:42:01,820
the stuff self-service IT when

00:42:00,140 --> 00:42:04,010
appropriate so developers can push

00:42:01,820 --> 00:42:06,230
buttons get access to the environments

00:42:04,010 --> 00:42:08,360
they need limit the amount of ticketing

00:42:06,230 --> 00:42:10,310
that we're opening but how do we do that

00:42:08,360 --> 00:42:12,680
and how do we have the appropriate

00:42:10,310 --> 00:42:15,680
amount of governance in the program out

00:42:12,680 --> 00:42:17,990
of ways to charge people for using all

00:42:15,680 --> 00:42:20,150
these environments and that's where the

00:42:17,990 --> 00:42:21,980
management platform comes in so we need

00:42:20,150 --> 00:42:24,170
some sort of orchestration for this

00:42:21,980 --> 00:42:26,690
cloud we don't just need something like

00:42:24,170 --> 00:42:27,950
ec2 we also need something to manage

00:42:26,690 --> 00:42:30,020
that into government we need some

00:42:27,950 --> 00:42:31,310
pattern technology and that's where

00:42:30,020 --> 00:42:33,350
things like are we go deploy with

00:42:31,310 --> 00:42:35,420
patterns that's where cloud restriction

00:42:33,350 --> 00:42:37,850
comes in and that's where self-service

00:42:35,420 --> 00:42:39,650
IT becomes really a great story for

00:42:37,850 --> 00:42:41,630
developers because if you can make the

00:42:39,650 --> 00:42:43,700
developers life happy and easy that they

00:42:41,630 --> 00:42:45,440
don't have to waste time then they're

00:42:43,700 --> 00:42:47,780
going to actually test if they have

00:42:45,440 --> 00:42:51,020
quick access to environments developers

00:42:47,780 --> 00:42:52,610
will test and they will let go of

00:42:51,020 --> 00:42:55,700
environments I know a bunch of

00:42:52,610 --> 00:42:57,410
developers that never give back test

00:42:55,700 --> 00:42:59,540
environments or Devin virus because

00:42:57,410 --> 00:43:01,550
that's take too long to get them they

00:42:59,540 --> 00:43:04,280
just keep them for release to release

00:43:01,550 --> 00:43:06,590
and that's very hard to manage and it

00:43:04,280 --> 00:43:09,380
becomes very costly so what we want is

00:43:06,590 --> 00:43:13,310
this dev ops team but how do we really

00:43:09,380 --> 00:43:15,770
get there you know and that's where

00:43:13,310 --> 00:43:16,940
another picture that would be using the

00:43:15,770 --> 00:43:19,460
products i was just talking

00:43:16,940 --> 00:43:22,160
about is urban code deploy it becomes

00:43:19,460 --> 00:43:24,500
the central piece of this whole hybrid

00:43:22,160 --> 00:43:27,319
cloud story no longer do you need a

00:43:24,500 --> 00:43:30,140
different tool to deploy to stuff that's

00:43:27,319 --> 00:43:33,500
on Prem versus what's in an emerging

00:43:30,140 --> 00:43:35,900
platform like docker you know our code

00:43:33,500 --> 00:43:38,150
deploy can't deploy to docker what about

00:43:35,900 --> 00:43:40,369
cloud foundry arborcoat deploy has a

00:43:38,150 --> 00:43:42,410
plugin for cloud foundry well we got all

00:43:40,369 --> 00:43:44,200
these mainframes there's no way we can

00:43:42,410 --> 00:43:46,970
have an Orchestrator process that oh

00:43:44,200 --> 00:43:49,940
wait a second urbancode deploy has a

00:43:46,970 --> 00:43:52,369
mainframe plugin as well so we can

00:43:49,940 --> 00:43:56,420
deploy to mainframes all the way out to

00:43:52,369 --> 00:43:58,460
these emerging cloud standards so that's

00:43:56,420 --> 00:44:01,040
the idea behind this pictures between

00:43:58,460 --> 00:44:02,300
urban code deploy at the application

00:44:01,040 --> 00:44:04,510
deployment level in urbancode deploy

00:44:02,300 --> 00:44:07,550
with patterns at that OpenStack

00:44:04,510 --> 00:44:09,050
infrastructure is code between the two

00:44:07,550 --> 00:44:12,079
of those we can start to hit at all

00:44:09,050 --> 00:44:15,560
these different resources from systems

00:44:12,079 --> 00:44:17,750
of record which we mean by data stuff

00:44:15,560 --> 00:44:20,810
that may be on Prem stuff that may be on

00:44:17,750 --> 00:44:22,790
prem forever even though you know yes

00:44:20,810 --> 00:44:24,260
i'll leave that and then there is a

00:44:22,790 --> 00:44:26,780
system of engagement which is things

00:44:24,260 --> 00:44:29,089
that change very rapidly and we didn't

00:44:26,780 --> 00:44:31,640
want to be able to have a what they call

00:44:29,089 --> 00:44:33,700
it to speed delivery here are two speed

00:44:31,640 --> 00:44:37,550
IT which is very difficult to maintain

00:44:33,700 --> 00:44:39,319
when when one system of record like

00:44:37,550 --> 00:44:42,890
mainframes are resistant to change and

00:44:39,319 --> 00:44:44,839
the systems of engagement by cloud

00:44:42,890 --> 00:44:47,210
foundry really want to push change fast

00:44:44,839 --> 00:44:48,950
as possible so having a single tool that

00:44:47,210 --> 00:44:51,530
I'll go straight across those will be a

00:44:48,950 --> 00:44:54,050
huge advantage and then of course

00:44:51,530 --> 00:44:57,859
urbancode release will be managing all

00:44:54,050 --> 00:45:00,200
those releases together all right I

00:44:57,859 --> 00:45:02,810
think that was it and we'll take

00:45:00,200 --> 00:45:04,819
questions now ok so the question was

00:45:02,810 --> 00:45:08,030
does urbancode deploy keep track of the

00:45:04,819 --> 00:45:11,410
version that you've deployed and maybe I

00:45:08,030 --> 00:45:11,410
will try and show this

00:45:14,270 --> 00:45:18,140
that's all I didn't show up

00:45:22,599 --> 00:45:33,069
apparently one second father it is okay

00:45:31,539 --> 00:45:35,289
yeah sorry I can't see it on my screen

00:45:33,069 --> 00:45:39,609
here that's why I'm kind of having some

00:45:35,289 --> 00:45:42,279
monitor issues looking backward so here

00:45:39,609 --> 00:45:49,450
is the environment for the J pet store

00:45:42,279 --> 00:45:51,789
application and you'll notice at the

00:45:49,450 --> 00:45:53,890
bottom there there is the s IT

00:45:51,789 --> 00:45:56,499
environment and you may not be able to

00:45:53,890 --> 00:45:57,999
read it but at there's the web component

00:45:56,499 --> 00:45:59,650
the j2ee component and the database

00:45:57,999 --> 00:46:01,599
component and it's showing you the

00:45:59,650 --> 00:46:03,849
version that's been deployed to that

00:46:01,599 --> 00:46:05,979
environment so we know exactly the

00:46:03,849 --> 00:46:12,099
versions that we have deployed in each

00:46:05,979 --> 00:46:13,319
environment okay so the question was for

00:46:12,099 --> 00:46:15,999
the environments and for the

00:46:13,319 --> 00:46:18,009
applications do we need to create from

00:46:15,999 --> 00:46:20,739
scratch or do we just associate I think

00:46:18,009 --> 00:46:23,640
was so and what does create new

00:46:20,739 --> 00:46:27,219
environment create new environment means

00:46:23,640 --> 00:46:29,469
for this application what are the what

00:46:27,219 --> 00:46:32,950
our environments look like and this is

00:46:29,469 --> 00:46:36,130
sort of like a model of what they are

00:46:32,950 --> 00:46:38,910
and what we would do is there is some

00:46:36,130 --> 00:46:41,289
resources that are attached to those

00:46:38,910 --> 00:46:43,989
environments so that's where we could

00:46:41,289 --> 00:46:46,509
map so what this is saying is I want to

00:46:43,989 --> 00:46:48,609
have a s IT environment that has these

00:46:46,509 --> 00:46:51,279
three components in it but we would also

00:46:48,609 --> 00:46:53,710
have a resource that's a sign to this

00:46:51,279 --> 00:46:56,589
environment and we model the resources

00:46:53,710 --> 00:46:58,180
as well those can be created from

00:46:56,589 --> 00:47:00,579
scratch each time or they could be

00:46:58,180 --> 00:47:03,819
shared or we can create a resource

00:47:00,579 --> 00:47:05,440
template that says for every SI t this

00:47:03,819 --> 00:47:07,869
is what it looks like so you'll use that

00:47:05,440 --> 00:47:13,829
template okay i think the question was

00:47:07,869 --> 00:47:13,829
how do we handle rollbacks okay

00:47:14,910 --> 00:47:22,869
all right okay so there's a couple ways

00:47:19,210 --> 00:47:24,549
to do rollbacks in a lot of times if you

00:47:22,869 --> 00:47:26,710
ask people what they really want to do

00:47:24,549 --> 00:47:29,469
is a roll forward you know what we want

00:47:26,710 --> 00:47:31,509
to do is fix it and read and deploy a

00:47:29,469 --> 00:47:35,650
new version so that's one way to do it

00:47:31,509 --> 00:47:38,589
in a rollback it's really essentially

00:47:35,650 --> 00:47:45,180
just a deploy of a separate version so

00:47:38,589 --> 00:47:49,239
if I click to run this process on SI t

00:47:45,180 --> 00:47:51,430
it's going to ask me for a snapshot and

00:47:49,239 --> 00:47:54,099
I can pick any version that i want to so

00:47:51,430 --> 00:47:56,430
rollback could as easily be just go back

00:47:54,099 --> 00:48:00,670
to the previously known good snapshot

00:47:56,430 --> 00:48:03,029
all right that's my time have a good

00:48:00,670 --> 00:48:03,029
weekend

00:48:11,730 --> 00:48:13,790

YouTube URL: https://www.youtube.com/watch?v=vyAtNQENREA


