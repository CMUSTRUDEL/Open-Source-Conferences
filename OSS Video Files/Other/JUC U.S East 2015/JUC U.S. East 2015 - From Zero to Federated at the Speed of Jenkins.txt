Title: JUC U.S. East 2015 - From Zero to Federated at the Speed of Jenkins
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Richard Mills, Coveros, Inc.

Come see how we transformed a stovepiped organization anchored in slow, fear-inducing manual processes into a streamlined team delivering code continuously across a large, federated big-data application using Jenkins and Chef. It's rare when we DevOps professionals get a chance to start fresh, but in this situation our customer brought us in to kick-start their continuous integration/continuous delivery (CI/CD) process using Jenkins and Chef on a greenfield project. We started with a software development group that had made various attempts at CD over a period of two years with little success. Within three months, we had a full continuous delivery pipeline with release builds, automated testing, automated deployment and push-button production releases. Rich will show how he and his team integrated Jenkins, Git, Maven, SonarQube, jUnit, Robot, TestNG and Chef to deliver code changes through multiple test environments in a matter of minutes, allowing for rapid production deployments with a simple manual trigger in the pipeline. The co-ownership of the "infrastructure as code" between the development groups and technical operations teams allowed for rapid, pain-free changes in the software configuration across all environments.
Captions: 
	00:00:15,000 --> 00:00:18,390
so my name is Richard Mills I'm with a

00:00:17,400 --> 00:00:20,460
company called

00:00:18,390 --> 00:00:22,320
introduce myself for a minute and

00:00:20,460 --> 00:00:24,119
welcome to my talk is 0-2 federated at

00:00:22,320 --> 00:00:26,070
this speed of Jenkins and this is really

00:00:24,119 --> 00:00:28,619
a case study of some of some of the

00:00:26,070 --> 00:00:30,419
successes we've had in dev ops with at

00:00:28,619 --> 00:00:32,669
least one of our clients right so who am

00:00:30,419 --> 00:00:34,739
I who is this guy up here so I'm a

00:00:32,669 --> 00:00:37,110
software developer by trade so you know

00:00:34,739 --> 00:00:39,510
mad software developer term mad software

00:00:37,110 --> 00:00:41,699
engineer over my career I've really

00:00:39,510 --> 00:00:43,800
focused on a lot of kind of evolved from

00:00:41,699 --> 00:00:45,989
just being like a C++ and Java hacker

00:00:43,800 --> 00:00:47,760
into more of an engineering oriented guy

00:00:45,989 --> 00:00:49,260
looking at how we build big software

00:00:47,760 --> 00:00:51,809
systems and how we get them out and make

00:00:49,260 --> 00:00:54,210
them actually work right and as it turns

00:00:51,809 --> 00:00:55,890
out over time I did a lot more

00:00:54,210 --> 00:00:57,719
automation right so when it came to

00:00:55,890 --> 00:00:59,969
engineering i looked at tools and then i

00:00:57,719 --> 00:01:01,649
started looking at automation and and in

00:00:59,969 --> 00:01:03,480
doing so i have now become what's

00:01:01,649 --> 00:01:05,759
considered the DevOps solution lead at

00:01:03,480 --> 00:01:08,399
my company right so i've got a very

00:01:05,759 --> 00:01:10,170
close focus on tools and automation you

00:01:08,399 --> 00:01:12,179
know first I was doing stuff that was

00:01:10,170 --> 00:01:13,380
automating build of software and then we

00:01:12,179 --> 00:01:15,630
decided we were going to call that CI

00:01:13,380 --> 00:01:17,850
and then it was not just automating the

00:01:15,630 --> 00:01:19,200
build but also deploying it some are

00:01:17,850 --> 00:01:20,580
right i had to install it in order to

00:01:19,200 --> 00:01:22,770
test it and then we decided we'd call

00:01:20,580 --> 00:01:24,600
that continuous delivery and now there

00:01:22,770 --> 00:01:26,220
there's this whole touchy-feely thing or

00:01:24,600 --> 00:01:27,689
out there in the world called DevOps and

00:01:26,220 --> 00:01:29,159
i don't care what they call it nice but

00:01:27,689 --> 00:01:31,560
thank you for inventing a word for what

00:01:29,159 --> 00:01:32,670
i do right this is what i like to do and

00:01:31,560 --> 00:01:34,890
it's what I've been doing for a lot of

00:01:32,670 --> 00:01:36,299
years right the way I actually pay my

00:01:34,890 --> 00:01:38,640
bills right now is I work for a company

00:01:36,299 --> 00:01:40,320
called Cabarrus who quite frankly have

00:01:38,640 --> 00:01:42,750
more or less work for my entire career

00:01:40,320 --> 00:01:44,369
and what we do at Cabarrus is we work

00:01:42,750 --> 00:01:46,560
with software organizations probably a

00:01:44,369 --> 00:01:48,689
lot like what you guys work with helping

00:01:46,560 --> 00:01:51,360
them build you know more secure better

00:01:48,689 --> 00:01:52,920
more reliable systems better faster

00:01:51,360 --> 00:01:54,869
stronger than they were before right so

00:01:52,920 --> 00:01:56,399
a lot of this and a lot of what I'm

00:01:54,869 --> 00:01:58,950
going to talk about comes from work that

00:01:56,399 --> 00:02:01,500
I've done with customers looking at do

00:01:58,950 --> 00:02:03,509
agile transformations right how do we

00:02:01,500 --> 00:02:05,689
become more agile how do we build and

00:02:03,509 --> 00:02:09,060
deliver software more quickly and just

00:02:05,689 --> 00:02:10,410
better right so we we tend to integrate

00:02:09,060 --> 00:02:12,660
with teams and work with them to get

00:02:10,410 --> 00:02:15,450
this done well what my place has been

00:02:12,660 --> 00:02:16,769
through a lot of that has been I always

00:02:15,450 --> 00:02:18,329
ended up being built guy right so

00:02:16,769 --> 00:02:19,739
anytime you go and you add jolly you

00:02:18,329 --> 00:02:22,200
start thinking well if I'm going to do

00:02:19,739 --> 00:02:22,710
stuff quickly I need to build server and

00:02:22,200 --> 00:02:24,720
I need

00:02:22,710 --> 00:02:26,520
to do all this stuff right so it's it's

00:02:24,720 --> 00:02:29,730
it's turned into it really for our

00:02:26,520 --> 00:02:32,070
company Camaros DevOps and automation

00:02:29,730 --> 00:02:33,570
has become a first class citizen in the

00:02:32,070 --> 00:02:35,880
business that we do so we now have

00:02:33,570 --> 00:02:37,590
customers who come to us to ask us to do

00:02:35,880 --> 00:02:39,750
this and I'm going to tell you about one

00:02:37,590 --> 00:02:41,130
of those today right and we also along

00:02:39,750 --> 00:02:43,050
with that by the way provide a lot of

00:02:41,130 --> 00:02:45,120
training for how to do agile and demo so

00:02:43,050 --> 00:02:46,470
that's kind of where I come from one of

00:02:45,120 --> 00:02:47,940
the things that keeps me busy and keeps

00:02:46,470 --> 00:02:49,650
me intrigued and keeps me kind of

00:02:47,940 --> 00:02:51,830
plugged in is we've kind of assembled

00:02:49,650 --> 00:02:54,870
over time this thing we call secure CI

00:02:51,830 --> 00:02:56,730
which is just an integrated stack of

00:02:54,870 --> 00:02:58,740
Jenkins and subversion and get in a few

00:02:56,730 --> 00:03:00,030
other tools that when I go in somewhere

00:02:58,740 --> 00:03:01,530
and I have to start with something and

00:03:00,030 --> 00:03:03,870
they have nothing I'm like okay wait a

00:03:01,530 --> 00:03:06,360
minute boom I push a button I'll also an

00:03:03,870 --> 00:03:08,190
AWS machine or a launch of BN that gives

00:03:06,360 --> 00:03:09,300
me the tools I need and that's secure CI

00:03:08,190 --> 00:03:10,980
and it's actually i'll give you a little

00:03:09,300 --> 00:03:14,630
demo of what we've done with it and how

00:03:10,980 --> 00:03:16,710
we use it as a tool so why am I here

00:03:14,630 --> 00:03:18,210
really what I want to do is share with

00:03:16,710 --> 00:03:20,970
you guys a little bit about some of the

00:03:18,210 --> 00:03:22,980
successes we had introducing continuous

00:03:20,970 --> 00:03:25,500
delivery into an organization a client

00:03:22,980 --> 00:03:27,180
of ours which was a major media and

00:03:25,500 --> 00:03:29,400
advertising commercial company so

00:03:27,180 --> 00:03:30,960
they're out there in the world right and

00:03:29,400 --> 00:03:33,810
what we started with when we went in

00:03:30,960 --> 00:03:35,160
with them as they were a build

00:03:33,810 --> 00:03:36,720
organization you know they had a bunch

00:03:35,160 --> 00:03:38,520
of developers build a bunch of systems

00:03:36,720 --> 00:03:41,070
and they were definitely using Jenkins

00:03:38,520 --> 00:03:42,990
for a continuous build and I choose that

00:03:41,070 --> 00:03:45,540
word carefully they were absolutely

00:03:42,990 --> 00:03:47,220
doing continuous compilation I don't

00:03:45,540 --> 00:03:48,510
remember who was actually continuous or

00:03:47,220 --> 00:03:50,100
whether it was scheduled but they were

00:03:48,510 --> 00:03:51,740
definitely doing compilation in building

00:03:50,100 --> 00:03:53,760
assets that could be installed somewhere

00:03:51,740 --> 00:03:55,140
they had a little bit of stuff that

00:03:53,760 --> 00:03:57,330
looked like unit testing so they had

00:03:55,140 --> 00:03:59,490
some j unit but everything beyond that

00:03:57,330 --> 00:04:00,840
was almost completely manual so all the

00:03:59,490 --> 00:04:02,460
testing in the test environments that

00:04:00,840 --> 00:04:04,890
they would do is basically somebody

00:04:02,460 --> 00:04:06,840
would have to go fetch a bill go drag it

00:04:04,890 --> 00:04:08,730
over to a machine somewhere whether it

00:04:06,840 --> 00:04:10,530
be a vm or whatever it was and if it was

00:04:08,730 --> 00:04:11,790
QA QA would install it on there and

00:04:10,530 --> 00:04:14,040
machines and they would configure it and

00:04:11,790 --> 00:04:15,600
whatever magic way they did it and then

00:04:14,040 --> 00:04:17,430
if it was the technical operations the

00:04:15,600 --> 00:04:18,750
SIS Ops guys well they would do it in

00:04:17,430 --> 00:04:21,150
their way and they hit a completely

00:04:18,750 --> 00:04:24,360
separate way of doing it right so is

00:04:21,150 --> 00:04:26,580
very much isolated silos of development

00:04:24,360 --> 00:04:27,510
QA and technical operations right those

00:04:26,580 --> 00:04:29,670
are the three

00:04:27,510 --> 00:04:32,220
Mary groups and they had some complaints

00:04:29,670 --> 00:04:34,170
like well you know we got the system

00:04:32,220 --> 00:04:36,480
done and it was code complete tested

00:04:34,170 --> 00:04:39,330
ready to go we click the Go button six

00:04:36,480 --> 00:04:41,100
weeks ago and it took us six weeks to

00:04:39,330 --> 00:04:43,230
roll it out into the various servers out

00:04:41,100 --> 00:04:45,390
there because we were really afraid of

00:04:43,230 --> 00:04:47,010
touching anything we're like well we got

00:04:45,390 --> 00:04:48,390
to do this really carefully we got to

00:04:47,010 --> 00:04:50,910
shut everything down and do it over the

00:04:48,390 --> 00:04:53,670
weekend and oh by the way it's literally

00:04:50,910 --> 00:04:55,680
a 24 by 7 system were terrified to touch

00:04:53,670 --> 00:04:58,380
it right so there was a lot of this kind

00:04:55,680 --> 00:05:00,540
of fear they had huge pain associated

00:04:58,380 --> 00:05:02,550
with configuring this giant fleet of

00:05:00,540 --> 00:05:03,990
servers of like other new software needs

00:05:02,550 --> 00:05:06,090
all these new config settings how we

00:05:03,990 --> 00:05:07,620
going to get this done and I see a few

00:05:06,090 --> 00:05:09,330
people out there smiling and nodding oh

00:05:07,620 --> 00:05:11,340
yeah that sounds kind of familiar right

00:05:09,330 --> 00:05:13,740
so a lot of us have lived through that a

00:05:11,340 --> 00:05:15,330
lot of some of this pain was due to the

00:05:13,740 --> 00:05:17,760
fact that they would create these like

00:05:15,330 --> 00:05:19,770
three or four month long feature and

00:05:17,760 --> 00:05:21,810
integration branches are not integration

00:05:19,770 --> 00:05:23,730
but feature branches for their releases

00:05:21,810 --> 00:05:25,680
that went in different directions and it

00:05:23,730 --> 00:05:28,170
was extremely painful to bring them back

00:05:25,680 --> 00:05:31,830
together so they've lived with all these

00:05:28,170 --> 00:05:33,240
pain points on a regular basis so they

00:05:31,830 --> 00:05:35,520
basically came to us and said we want

00:05:33,240 --> 00:05:37,590
see I CD we don't really know what that

00:05:35,520 --> 00:05:39,270
means but we know we wanted right so

00:05:37,590 --> 00:05:42,150
they come to our door and and that's

00:05:39,270 --> 00:05:43,830
what we do they had really spent over a

00:05:42,150 --> 00:05:45,450
period of about two years a whole bunch

00:05:43,830 --> 00:05:48,510
of failed attempts at trying to get

00:05:45,450 --> 00:05:50,100
continuous delivery in place and almost

00:05:48,510 --> 00:05:52,500
always it was a kind of thing where it's

00:05:50,100 --> 00:05:55,290
a developer at night time as a hobby

00:05:52,500 --> 00:05:56,520
going well I i I've code I need to see

00:05:55,290 --> 00:05:59,040
more people nodding right I have more

00:05:56,520 --> 00:06:00,480
code I need to build and features but oh

00:05:59,040 --> 00:06:01,440
by the way I'm the build guide to and

00:06:00,480 --> 00:06:03,420
I'm supposed to make this better and

00:06:01,440 --> 00:06:05,070
faster and I don't have time it's it's a

00:06:03,420 --> 00:06:06,630
hobby I don't have time to do this right

00:06:05,070 --> 00:06:08,100
so they finally came out and they

00:06:06,630 --> 00:06:10,440
brought in some expertise and they found

00:06:08,100 --> 00:06:12,270
us and that's what we went in did and

00:06:10,440 --> 00:06:14,100
the abandoned one of the great

00:06:12,270 --> 00:06:15,420
advantages we had on this project is it

00:06:14,100 --> 00:06:17,850
was a greenfield project it was

00:06:15,420 --> 00:06:20,370
basically BAM reengineering what they

00:06:17,850 --> 00:06:22,260
called their data management platform so

00:06:20,370 --> 00:06:23,880
it was beginning again in a domain that

00:06:22,260 --> 00:06:26,400
they understood with a completely new

00:06:23,880 --> 00:06:27,950
design and a lot of new code so we had a

00:06:26,400 --> 00:06:29,960
lot of freedom on what we were going to

00:06:27,950 --> 00:06:32,540
right which which helps in this

00:06:29,960 --> 00:06:34,670
particular case and it was development

00:06:32,540 --> 00:06:35,780
team maybe around 50 people was probably

00:06:34,670 --> 00:06:38,480
a bunch more by the time we were done

00:06:35,780 --> 00:06:39,740
with it an over period of initially

00:06:38,480 --> 00:06:41,630
three months and then three more

00:06:39,740 --> 00:06:45,410
additional months we really went from

00:06:41,630 --> 00:06:47,960
almost nothing like absolutely virtually

00:06:45,410 --> 00:06:50,690
no code absolutely zero to a very big

00:06:47,960 --> 00:06:52,760
build-up kind of federated system so as

00:06:50,690 --> 00:06:55,430
far as what we were working with and the

00:06:52,760 --> 00:06:56,780
domain of where we were it was it ended

00:06:55,430 --> 00:06:58,760
up being what I would consider to be a

00:06:56,780 --> 00:07:00,500
large federated system there are about

00:06:58,760 --> 00:07:02,030
eighteen independently built and

00:07:00,500 --> 00:07:03,980
deployed systems that went on various

00:07:02,030 --> 00:07:06,320
places i'll show you kind of a map here

00:07:03,980 --> 00:07:08,330
in a few minutes that was it had a

00:07:06,320 --> 00:07:10,670
front-end UI and I had a whole bunch of

00:07:08,330 --> 00:07:12,320
rest services kind of in components that

00:07:10,670 --> 00:07:14,570
talk to each other behind the circuit

00:07:12,320 --> 00:07:17,180
behind the scenes and it was largely

00:07:14,570 --> 00:07:19,850
java-based and using Hadoop in the back

00:07:17,180 --> 00:07:23,180
end but Hadoop in the end ended up being

00:07:19,850 --> 00:07:25,550
largely irrelevant their typical process

00:07:23,180 --> 00:07:27,200
was to push this software through at

00:07:25,550 --> 00:07:29,270
least three environments so they would

00:07:27,200 --> 00:07:31,340
go into a dev environment that would go

00:07:29,270 --> 00:07:33,230
into QA and production and then

00:07:31,340 --> 00:07:34,670
depending on what was going on sometimes

00:07:33,230 --> 00:07:36,050
it would get pushed sideways into a

00:07:34,670 --> 00:07:38,390
performance environment they had to do a

00:07:36,050 --> 00:07:40,430
lot loading performance testing they

00:07:38,390 --> 00:07:42,110
also wanted a demo / uat type

00:07:40,430 --> 00:07:43,970
environment that could get versions of

00:07:42,110 --> 00:07:47,140
software when desired so they could demo

00:07:43,970 --> 00:07:50,060
to their customers not kind of stuff and

00:07:47,140 --> 00:07:51,920
where we got so by the end of really

00:07:50,060 --> 00:07:54,320
three months but then you know more

00:07:51,920 --> 00:07:56,600
systems over the next six re three

00:07:54,320 --> 00:07:59,720
months after that was we went to a whole

00:07:56,600 --> 00:08:01,820
continuous build test and delivery for

00:07:59,720 --> 00:08:04,340
most of the systems within that

00:08:01,820 --> 00:08:06,410
ecosystem right and when I say you know

00:08:04,340 --> 00:08:09,080
delivery I am including automated unit

00:08:06,410 --> 00:08:10,700
tests deployment test smoke tests

00:08:09,080 --> 00:08:13,340
integration tests functional tests and

00:08:10,700 --> 00:08:14,540
some slices of performance testing right

00:08:13,340 --> 00:08:17,120
all that was happening through a

00:08:14,540 --> 00:08:19,280
pipeline that I'll show you guys all of

00:08:17,120 --> 00:08:21,950
the configuration for the servers was

00:08:19,280 --> 00:08:23,660
was automated in such a way that you

00:08:21,950 --> 00:08:25,880
could take effectively they would give

00:08:23,660 --> 00:08:28,250
us a naked vm that had sent to us

00:08:25,880 --> 00:08:30,260
installed on it you know basic java are

00:08:28,250 --> 00:08:31,670
basic unix operating system and we would

00:08:30,260 --> 00:08:32,690
lay down everything on top of it and

00:08:31,670 --> 00:08:35,539
assign what it needed

00:08:32,690 --> 00:08:36,950
two and then we build a pipeline so that

00:08:35,539 --> 00:08:38,270
it would all go automate it through this

00:08:36,950 --> 00:08:40,880
whole way and really just have a

00:08:38,270 --> 00:08:42,979
push-button say go to prom right it was

00:08:40,880 --> 00:08:44,990
really a check box to yes approve this

00:08:42,979 --> 00:08:46,760
and let it go and it would deploy itself

00:08:44,990 --> 00:08:49,460
into the production boxes with the exact

00:08:46,760 --> 00:08:51,410
same automation some of the immediate

00:08:49,460 --> 00:08:54,050
benefits that we saw from this with the

00:08:51,410 --> 00:08:56,210
teams out there was that you know new

00:08:54,050 --> 00:08:58,370
changes to software we're in the dev

00:08:56,210 --> 00:09:00,080
environment in minutes it was you know

00:08:58,370 --> 00:09:01,880
anywhere between 3 and 15 minutes

00:09:00,080 --> 00:09:04,340
depending on how big the unit tests were

00:09:01,880 --> 00:09:06,140
it would be within a test QA type

00:09:04,340 --> 00:09:07,790
environment within an hour after it

00:09:06,140 --> 00:09:09,340
passed a certain set of internal

00:09:07,790 --> 00:09:12,130
functional tests in the dev environment

00:09:09,340 --> 00:09:14,540
and then it could go to prod

00:09:12,130 --> 00:09:16,700
conditionally an hour later based on a

00:09:14,540 --> 00:09:19,070
critical sort of thing in reality it

00:09:16,700 --> 00:09:22,400
went to prod once every few weeks so the

00:09:19,070 --> 00:09:24,320
thing that was kind of and that was

00:09:22,400 --> 00:09:27,080
amazing cultural change for these people

00:09:24,320 --> 00:09:29,180
right the developers now were able to

00:09:27,080 --> 00:09:31,010
develop and test this software across

00:09:29,180 --> 00:09:32,840
all of these components you know I'll

00:09:31,010 --> 00:09:34,700
show you a diagram on the next page here

00:09:32,840 --> 00:09:36,410
but there are many many components and

00:09:34,700 --> 00:09:38,990
one of the big integrations problems is

00:09:36,410 --> 00:09:40,400
I'm building this component on this team

00:09:38,990 --> 00:09:42,230
how do I know it works with that

00:09:40,400 --> 00:09:43,910
component I need a place to play with

00:09:42,230 --> 00:09:45,800
that right and it allowed us to

00:09:43,910 --> 00:09:48,260
basically get that in place very quickly

00:09:45,800 --> 00:09:50,270
and detect problems so these developers

00:09:48,260 --> 00:09:53,180
were able to rapidly find the problems

00:09:50,270 --> 00:09:54,890
that they were introducing effectively

00:09:53,180 --> 00:09:56,510
in the system because of the fact there

00:09:54,890 --> 00:09:59,810
were a lot of moving pieces right it was

00:09:56,510 --> 00:10:01,370
a classic integration problem right so

00:09:59,810 --> 00:10:02,900
what it came down to is they could they

00:10:01,370 --> 00:10:04,640
had a one to two weeks cycle that they

00:10:02,900 --> 00:10:06,770
could go from we got a new requirement

00:10:04,640 --> 00:10:08,360
of something we want to do to an actual

00:10:06,770 --> 00:10:11,570
delivery to a production if they were

00:10:08,360 --> 00:10:13,130
ready for now given that there were a

00:10:11,570 --> 00:10:14,540
bunch of challenges that we had to

00:10:13,130 --> 00:10:16,220
attack as we went through that it's all

00:10:14,540 --> 00:10:18,620
to us so now I switch over and tell a

00:10:16,220 --> 00:10:20,060
little bit how we did this high level

00:10:18,620 --> 00:10:21,440
design of the system kind of thing

00:10:20,060 --> 00:10:23,839
doesn't really matter what it was doing

00:10:21,440 --> 00:10:26,390
but the interesting challenges that come

00:10:23,839 --> 00:10:28,339
with a system like this is that you have

00:10:26,390 --> 00:10:30,620
many components so

00:10:28,339 --> 00:10:32,720
yeah so you know pick a taxonomy

00:10:30,620 --> 00:10:34,279
component right this is a component of

00:10:32,720 --> 00:10:36,589
software component that would say as a

00:10:34,279 --> 00:10:38,749
web service it's being deployed on to is

00:10:36,589 --> 00:10:40,999
it turns out multiple services its load

00:10:38,749 --> 00:10:42,860
balance behind something right so any

00:10:40,999 --> 00:10:44,029
communication with it is going to go

00:10:42,860 --> 00:10:45,290
round rather than across a bunch of

00:10:44,029 --> 00:10:47,540
services and it's a typical

00:10:45,290 --> 00:10:49,309
configuration right that thing talks to

00:10:47,540 --> 00:10:51,589
a database cluster on the back of it

00:10:49,309 --> 00:10:55,040
which is a shared cluster as it turns

00:10:51,589 --> 00:10:56,959
out graph database called neo4j and any

00:10:55,040 --> 00:10:58,939
time you see one of these lines when

00:10:56,959 --> 00:11:01,040
you're building independent components

00:10:58,939 --> 00:11:02,959
that have to go to different places the

00:11:01,040 --> 00:11:04,939
other components that talk to it have to

00:11:02,959 --> 00:11:06,980
know where it is right I need to know

00:11:04,939 --> 00:11:09,170
the endpoint URL to talk to that service

00:11:06,980 --> 00:11:11,870
right and it may be changing over time

00:11:09,170 --> 00:11:13,759
so configuring that alone can be

00:11:11,870 --> 00:11:15,800
challenging right that's a that's a

00:11:13,759 --> 00:11:17,420
challenging kind of deployment problem

00:11:15,800 --> 00:11:19,879
that we often deal with and that's where

00:11:17,420 --> 00:11:21,350
systems like chef and puppet you know

00:11:19,879 --> 00:11:22,970
kohsuke mentioned a few others this

00:11:21,350 --> 00:11:25,879
morning and docker a lot of these help

00:11:22,970 --> 00:11:27,230
us do that so that's one of the

00:11:25,879 --> 00:11:29,660
challenges the other challenge that I

00:11:27,230 --> 00:11:32,300
kind of mentioned was organizational you

00:11:29,660 --> 00:11:34,519
got different teams working on the

00:11:32,300 --> 00:11:36,709
segment processor or the taxonomy or the

00:11:34,519 --> 00:11:38,389
analytics you I in our case some of

00:11:36,709 --> 00:11:39,769
those teams like happy for more in

00:11:38,389 --> 00:11:42,170
Europe and half of who are on the East

00:11:39,769 --> 00:11:43,189
Coast there were some out in California

00:11:42,170 --> 00:11:45,920
right so you have kind of this

00:11:43,189 --> 00:11:48,620
geographical problem that what you don't

00:11:45,920 --> 00:11:51,350
want is somebody checking in a piece of

00:11:48,620 --> 00:11:53,240
code at 5pm on the East Coast and then

00:11:51,350 --> 00:11:54,800
the european guys wake up the next

00:11:53,240 --> 00:11:57,160
morning and have a bunch of broken cut

00:11:54,800 --> 00:11:59,269
right so we're trying to look for

00:11:57,160 --> 00:12:03,740
continuous feedback and that's really

00:11:59,269 --> 00:12:05,540
where CI and CD come into play right you

00:12:03,740 --> 00:12:07,279
have all these different challenges for

00:12:05,540 --> 00:12:09,439
each one of these all right I you could

00:12:07,279 --> 00:12:10,819
be able to build the software I need to

00:12:09,439 --> 00:12:13,160
be able to deploy that software and

00:12:10,819 --> 00:12:14,629
configuring I might need test data that

00:12:13,160 --> 00:12:16,910
was an interesting challenge with the

00:12:14,629 --> 00:12:18,470
the neo4j database is that every time we

00:12:16,910 --> 00:12:20,240
ran tests against it they made a

00:12:18,470 --> 00:12:21,559
disaster of the database right because a

00:12:20,240 --> 00:12:23,300
lot of the tests were like how do you

00:12:21,559 --> 00:12:25,189
insert a node really to know clean up a

00:12:23,300 --> 00:12:27,050
node you know the solution was either

00:12:25,189 --> 00:12:29,660
have the tests be able to roll

00:12:27,050 --> 00:12:30,500
themselves all back out or just reset

00:12:29,660 --> 00:12:32,790
the descent

00:12:30,500 --> 00:12:34,380
reset the database which we ended up

00:12:32,790 --> 00:12:36,030
raining some jobs that would just reset

00:12:34,380 --> 00:12:38,060
the database back to a known state when

00:12:36,030 --> 00:12:40,560
they ran tests and then of course

00:12:38,060 --> 00:12:41,580
testing the software itself right all of

00:12:40,560 --> 00:12:43,740
these are things that need to be

00:12:41,580 --> 00:12:46,500
integrated together so how do we do that

00:12:43,740 --> 00:12:49,410
what did our solution look like so our

00:12:46,500 --> 00:12:52,170
solution in the end was a pipeline that

00:12:49,410 --> 00:12:54,330
involved get Jenkins sonar chef bunch

00:12:52,170 --> 00:12:56,250
other stuff right so all of their source

00:12:54,330 --> 00:12:58,440
code was stored in stash which is the

00:12:56,250 --> 00:13:00,690
Alaskan implementation of get right so

00:12:58,440 --> 00:13:03,080
it's a git server and all their source

00:13:00,690 --> 00:13:05,700
code is of course stored in there right

00:13:03,080 --> 00:13:07,980
that's also by the way the same place

00:13:05,700 --> 00:13:10,500
that we store all of our continuous

00:13:07,980 --> 00:13:12,480
delivery scripts right so kohsuke was

00:13:10,500 --> 00:13:14,190
talking about this morning you know

00:13:12,480 --> 00:13:16,350
everything is code right and that's one

00:13:14,190 --> 00:13:18,390
of the principles of DevOps is come in

00:13:16,350 --> 00:13:19,890
everything anything that you do

00:13:18,390 --> 00:13:22,170
everything that runs in that Jenkins

00:13:19,890 --> 00:13:23,340
server store it somewhere right so if

00:13:22,170 --> 00:13:24,990
you need to replicate it if you need to

00:13:23,340 --> 00:13:26,220
go back it's the same principles of

00:13:24,990 --> 00:13:28,730
software engineering that we talked

00:13:26,220 --> 00:13:31,110
about right so all that stuff would have

00:13:28,730 --> 00:13:33,510
effectively feed the Jenkins server

00:13:31,110 --> 00:13:35,190
right so Jenkins would then was kind of

00:13:33,510 --> 00:13:37,560
our central brain for everything we used

00:13:35,190 --> 00:13:39,990
sonar cube and J unit a number of other

00:13:37,560 --> 00:13:42,570
things to kind of build and package that

00:13:39,990 --> 00:13:44,160
software all of the assets we were

00:13:42,570 --> 00:13:46,410
delivering by the way get packaged up

00:13:44,160 --> 00:13:47,850
into Linux RPM so that was stored and

00:13:46,410 --> 00:13:51,300
that would get stored in a young server

00:13:47,850 --> 00:13:53,550
so that it was available then the next

00:13:51,300 --> 00:13:56,550
stage we really do is we use chef very

00:13:53,550 --> 00:13:58,650
heavily on this project and chef is a

00:13:56,550 --> 00:14:00,690
configuration management framework as

00:13:58,650 --> 00:14:02,700
Cacique described it it's one of the

00:14:00,690 --> 00:14:04,020
convergence based frameworks that allows

00:14:02,700 --> 00:14:06,180
you to say I want something that looks

00:14:04,020 --> 00:14:09,660
like this make it go look like this

00:14:06,180 --> 00:14:10,980
right and we would use chef to go

00:14:09,660 --> 00:14:12,360
through what I call it a provisioning

00:14:10,980 --> 00:14:13,410
stage I'll talk about it in a little bit

00:14:12,360 --> 00:14:15,570
but that's really the initial

00:14:13,410 --> 00:14:17,520
configuration of the software to make

00:14:15,570 --> 00:14:18,750
sure that it's ready to it's got the

00:14:17,520 --> 00:14:20,520
middle where it's got all the basics

00:14:18,750 --> 00:14:22,680
that your software needs on top of it

00:14:20,520 --> 00:14:24,690
because then our next step really was to

00:14:22,680 --> 00:14:26,100
deploy our custom-built software into

00:14:24,690 --> 00:14:27,960
each of those environments right and

00:14:26,100 --> 00:14:29,550
this went into as it turns out it was an

00:14:27,960 --> 00:14:31,510
internal cloud system they use they were

00:14:29,550 --> 00:14:34,370
using vSphere and a few other

00:14:31,510 --> 00:14:36,230
you know heavy-duty internal cloud rack

00:14:34,370 --> 00:14:37,490
data center management stuff but they

00:14:36,230 --> 00:14:39,440
had an internal cloud that they would

00:14:37,490 --> 00:14:41,600
use and then we would go out and we

00:14:39,440 --> 00:14:43,700
would SiC testing on it and we use

00:14:41,600 --> 00:14:45,740
combination robot framework test ng and

00:14:43,700 --> 00:14:48,140
selenium to basically achieve all this

00:14:45,740 --> 00:14:50,570
and wound it all together so that we had

00:14:48,140 --> 00:14:52,250
a pipeline that could deliver all this

00:14:50,570 --> 00:14:54,920
right you hear the term pipeline a lot

00:14:52,250 --> 00:14:57,790
and the continuous delivery world right

00:14:54,920 --> 00:15:01,520
so what did this pipeline look like well

00:14:57,790 --> 00:15:02,990
the highest at the highest level you're

00:15:01,520 --> 00:15:04,400
looking at anytime somebody commits a

00:15:02,990 --> 00:15:06,710
change the first thing that always has

00:15:04,400 --> 00:15:08,840
to happen is built right and build to me

00:15:06,710 --> 00:15:11,090
includes compiling the software

00:15:08,840 --> 00:15:12,920
packaging the software it includes

00:15:11,090 --> 00:15:14,480
running unit tests meaning anything that

00:15:12,920 --> 00:15:16,010
you can do during compilation and the

00:15:14,480 --> 00:15:17,270
software where it runs internally and

00:15:16,010 --> 00:15:19,370
doesn't have to be deployed somewhere

00:15:17,270 --> 00:15:20,930
right it includes running things like

00:15:19,370 --> 00:15:23,030
static analysis I mentioned on the

00:15:20,930 --> 00:15:25,010
previous page using things like J unit

00:15:23,030 --> 00:15:27,590
and sonar so know anybody how many

00:15:25,010 --> 00:15:29,510
people know what sonar is if you write

00:15:27,590 --> 00:15:32,120
sonar is basically a software analysis

00:15:29,510 --> 00:15:33,680
metrics package and database of software

00:15:32,120 --> 00:15:36,170
metrics that allows you to get a good

00:15:33,680 --> 00:15:37,730
view of the quality or software it keeps

00:15:36,170 --> 00:15:40,490
things like coverage it keeps a

00:15:37,730 --> 00:15:42,560
complexity metrics all kinds of static

00:15:40,490 --> 00:15:44,750
metrics but it's a quality assessment

00:15:42,560 --> 00:15:46,520
for your software right and that all

00:15:44,750 --> 00:15:48,020
gets wrapped up into the build phase so

00:15:46,520 --> 00:15:49,970
by the time you're done with this its

00:15:48,020 --> 00:15:52,010
built-in unit tested its effectively

00:15:49,970 --> 00:15:53,630
simulating what a developer could do

00:15:52,010 --> 00:15:57,650
without having to deploy the software

00:15:53,630 --> 00:16:00,380
our next step was our what we called our

00:15:57,650 --> 00:16:01,730
delivery pipeline and that as it turns

00:16:00,380 --> 00:16:03,530
out ends up being a whole bunch of steps

00:16:01,730 --> 00:16:05,540
that I'll talk about a minute but this

00:16:03,530 --> 00:16:06,890
is the delivery park line that says well

00:16:05,540 --> 00:16:08,930
I need to put it into a dev environment

00:16:06,890 --> 00:16:11,270
and install it there and configure it

00:16:08,930 --> 00:16:13,010
there and test it there right and then I

00:16:11,270 --> 00:16:14,930
got to move it on I may need to go to a

00:16:13,010 --> 00:16:16,730
QA department right so I got to go to a

00:16:14,930 --> 00:16:18,500
QA environment and launch it and test it

00:16:16,730 --> 00:16:20,420
and do that stuff so these were three

00:16:18,500 --> 00:16:22,040
statically kind of provisioned

00:16:20,420 --> 00:16:24,350
environments and then eventually I might

00:16:22,040 --> 00:16:26,630
go to prod so the pattern that emerged

00:16:24,350 --> 00:16:28,580
for us is we kind of chucked all this

00:16:26,630 --> 00:16:30,830
delivery pipeline stuff together and

00:16:28,580 --> 00:16:33,290
called it one thing right it's like do a

00:16:30,830 --> 00:16:35,420
bunch of magic and then eventually what

00:16:33,290 --> 00:16:36,490
I want to get to is what we called a to

00:16:35,420 --> 00:16:37,779
prod phase right

00:16:36,490 --> 00:16:39,760
which looked a lot like the other phases

00:16:37,779 --> 00:16:42,700
but really had a gate before it was

00:16:39,760 --> 00:16:44,860
allowed to go there for each one of

00:16:42,700 --> 00:16:46,779
these phases that looked a lot the same

00:16:44,860 --> 00:16:49,000
whether it be dev QA are quite frankly

00:16:46,779 --> 00:16:51,520
even pride the first step was what we

00:16:49,000 --> 00:16:53,350
called a publish step and this is on the

00:16:51,520 --> 00:16:55,149
previous stage I said we build our pms

00:16:53,350 --> 00:16:57,220
and then it needs to go to a young

00:16:55,149 --> 00:16:59,740
server and if you guys are familiar with

00:16:57,220 --> 00:17:01,209
linux yum is really just a package

00:16:59,740 --> 00:17:03,100
installation i mean just like Windows

00:17:01,209 --> 00:17:04,689
Update right it goes out to Microsoft

00:17:03,100 --> 00:17:06,880
and pulls down packages and install

00:17:04,689 --> 00:17:08,290
stuff well say that it's the same idea

00:17:06,880 --> 00:17:10,390
in Linux right yum is one of the

00:17:08,290 --> 00:17:11,829
packages that's out there so anyway cads

00:17:10,390 --> 00:17:14,020
published really was just our young

00:17:11,829 --> 00:17:17,230
publishing so it would effectively take

00:17:14,020 --> 00:17:19,390
the assets that are installable and put

00:17:17,230 --> 00:17:21,370
it into what we call the dev life cycle

00:17:19,390 --> 00:17:23,650
meaning this is now the latest version

00:17:21,370 --> 00:17:25,449
of the analytics API that can be

00:17:23,650 --> 00:17:27,160
installed in death right and that was

00:17:25,449 --> 00:17:30,940
the published phase right then we would

00:17:27,160 --> 00:17:33,070
deploy it and deploy it meant take

00:17:30,940 --> 00:17:35,880
what's there and install it on servers

00:17:33,070 --> 00:17:38,920
and remember this is being instantiated

00:17:35,880 --> 00:17:41,070
effectively for 18 different components

00:17:38,920 --> 00:17:43,990
so we had 18 versions of these pipelines

00:17:41,070 --> 00:17:45,970
that used a lot of shared utility jobs

00:17:43,990 --> 00:17:47,500
but effectively that knew what to do for

00:17:45,970 --> 00:17:49,540
each one of those components and could

00:17:47,500 --> 00:17:51,400
happen at any time right so the

00:17:49,540 --> 00:17:53,080
deployment phase took care of that then

00:17:51,400 --> 00:17:54,640
the next phase we always had was

00:17:53,080 --> 00:17:56,620
something we call deployment testing

00:17:54,640 --> 00:17:58,480
right and this is basically the smoke

00:17:56,620 --> 00:18:00,700
test for deployment to prove that I got

00:17:58,480 --> 00:18:01,960
the software installed correctly you

00:18:00,700 --> 00:18:04,600
know I got the right version of the

00:18:01,960 --> 00:18:07,630
software installed on the box the Tomcat

00:18:04,600 --> 00:18:10,059
service came up and responds with a okay

00:18:07,630 --> 00:18:12,400
basically at 200 right fact I could get

00:18:10,059 --> 00:18:13,750
a page I really care what's on it I just

00:18:12,400 --> 00:18:15,429
want to know that a page comes back

00:18:13,750 --> 00:18:18,220
right and that some very basic

00:18:15,429 --> 00:18:20,440
connectivity is provided so that when

00:18:18,220 --> 00:18:22,179
I'm looking at this big crazy diagram I

00:18:20,440 --> 00:18:23,860
want to be able to prove that I

00:18:22,179 --> 00:18:25,840
configured it right so let's say the

00:18:23,860 --> 00:18:27,970
taxonomy component can talk to the

00:18:25,840 --> 00:18:29,710
analytics UI and the datastore right

00:18:27,970 --> 00:18:32,230
that's what I'm trying to prove with a

00:18:29,710 --> 00:18:34,059
deployment test if you will and that was

00:18:32,230 --> 00:18:35,500
always a part of our deployment and that

00:18:34,059 --> 00:18:37,720
at least proved that proved to me

00:18:35,500 --> 00:18:39,040
basically that I did my job right it

00:18:37,720 --> 00:18:40,630
didn't tell me the developers did

00:18:39,040 --> 00:18:40,890
anything right or the software works it

00:18:40,630 --> 00:18:42,570
just

00:18:40,890 --> 00:18:45,570
you that I got the software installed in

00:18:42,570 --> 00:18:48,240
his function right and then finally we

00:18:45,570 --> 00:18:50,250
would do sorry test employment and then

00:18:48,240 --> 00:18:52,230
depending on the environment we had

00:18:50,250 --> 00:18:53,700
affect what I'll call the functional

00:18:52,230 --> 00:18:55,680
test right so now I have a deployed

00:18:53,700 --> 00:18:59,040
piece of software that I've declared

00:18:55,680 --> 00:19:00,330
works now this is where you start doing

00:18:59,040 --> 00:19:01,470
that functional testing it could be

00:19:00,330 --> 00:19:02,730
regression sweets it could be

00:19:01,470 --> 00:19:03,960
integration testing it could be all

00:19:02,730 --> 00:19:05,880
kinds of stuff depending on the

00:19:03,960 --> 00:19:08,130
component but this is where we use

00:19:05,880 --> 00:19:10,170
selenium we use robot we use a variety

00:19:08,130 --> 00:19:11,640
of frameworks to start pummeling that

00:19:10,170 --> 00:19:13,500
application and making sure it's

00:19:11,640 --> 00:19:15,330
producing the right answers right if

00:19:13,500 --> 00:19:17,460
it's an API I need to query it and make

00:19:15,330 --> 00:19:19,290
sure the right stuff comes back if it's

00:19:17,460 --> 00:19:21,540
a UI I need to hit it and make sure it

00:19:19,290 --> 00:19:23,580
does the right thing right and that's

00:19:21,540 --> 00:19:25,530
the phase assuming something like that

00:19:23,580 --> 00:19:27,240
works I move on to the next step and I

00:19:25,530 --> 00:19:29,910
promote to QA and I basically go through

00:19:27,240 --> 00:19:32,700
an almost identical pipeline and in many

00:19:29,910 --> 00:19:35,730
cases using the exact same deployment

00:19:32,700 --> 00:19:37,920
job that's been parameterised slightly

00:19:35,730 --> 00:19:40,110
different right finally when i get to

00:19:37,920 --> 00:19:41,940
the prod step there's kind of a gate in

00:19:40,110 --> 00:19:44,100
there that has a button mrs. do you want

00:19:41,940 --> 00:19:46,320
to go or not and if you hit go it

00:19:44,100 --> 00:19:48,480
repeats the problem the the process

00:19:46,320 --> 00:19:50,670
publishes it up to cads which is that

00:19:48,480 --> 00:19:53,220
repository again deploys that test the

00:19:50,670 --> 00:19:55,050
deployment and then does not do any

00:19:53,220 --> 00:19:57,510
additional testing right I've already

00:19:55,050 --> 00:19:59,640
proved them before i go to prod that the

00:19:57,510 --> 00:20:01,860
software works i'm not going to test it

00:19:59,640 --> 00:20:03,960
again right there are certain situations

00:20:01,860 --> 00:20:06,510
where i want to test to make sure things

00:20:03,960 --> 00:20:08,430
like data compatibility did the upgrade

00:20:06,510 --> 00:20:10,320
happen properly so there may be some

00:20:08,430 --> 00:20:11,580
stuff but for the most part we're not

00:20:10,320 --> 00:20:13,470
doing a lot of testing and production

00:20:11,580 --> 00:20:15,600
because i don't want to mess up my

00:20:13,470 --> 00:20:17,430
production data right so that was the

00:20:15,600 --> 00:20:20,280
issue and that's kind of the concept of

00:20:17,430 --> 00:20:22,020
how we designed our pipeline now in

00:20:20,280 --> 00:20:24,450
actual jenkins what did that look like

00:20:22,020 --> 00:20:26,910
well here's a nice i chart for you but

00:20:24,450 --> 00:20:29,550
the concept is remember those three

00:20:26,910 --> 00:20:31,650
phases i had bill deliver to prague

00:20:29,550 --> 00:20:34,110
right well that's exactly what appeared

00:20:31,650 --> 00:20:35,730
in our pipeline design right so we had

00:20:34,110 --> 00:20:38,430
kind of three master jobs that we

00:20:35,730 --> 00:20:39,960
chained together this one you know you

00:20:38,430 --> 00:20:41,880
can't read it but it basically says

00:20:39,960 --> 00:20:43,680
build and in the middle it basically

00:20:41,880 --> 00:20:45,900
says pipeline and in the end it

00:20:43,680 --> 00:20:47,520
basically says to prompt right and we

00:20:45,900 --> 00:20:49,560
can see that I keep going through these

00:20:47,520 --> 00:20:51,210
green phases where the build is

00:20:49,560 --> 00:20:53,250
happening in its green green is good

00:20:51,210 --> 00:20:54,990
right Green happens Green is good we

00:20:53,250 --> 00:20:57,390
notice down here one of them was red and

00:20:54,990 --> 00:20:59,610
it failed obviously when it got into the

00:20:57,390 --> 00:21:02,460
pipeline to go through dev and QA at

00:20:59,610 --> 00:21:04,890
some point it failed right this blue

00:21:02,460 --> 00:21:08,070
really just means hey I'm ready I never

00:21:04,890 --> 00:21:10,860
ran but if I as it turns out there's a

00:21:08,070 --> 00:21:12,600
little clock button on here and any time

00:21:10,860 --> 00:21:14,399
we would go to prod we would pick

00:21:12,600 --> 00:21:16,710
whichever version it was if i wanted to

00:21:14,399 --> 00:21:18,899
dot for snapshot whatever this one is

00:21:16,710 --> 00:21:21,059
here to go to prod i would find its

00:21:18,899 --> 00:21:23,100
little blue button click it and it would

00:21:21,059 --> 00:21:24,510
take that version software and deliver

00:21:23,100 --> 00:21:26,250
it in a prod and that's actually one of

00:21:24,510 --> 00:21:28,799
the nice things about what's this it's

00:21:26,250 --> 00:21:30,899
called a build pipeline view and it in

00:21:28,799 --> 00:21:33,149
it integrate it's one of the plugins and

00:21:30,899 --> 00:21:35,159
jenkins that we use that gave us this

00:21:33,149 --> 00:21:37,529
nice visibility so that at any time I

00:21:35,159 --> 00:21:40,559
can see what's happening I know where

00:21:37,529 --> 00:21:45,539
things stand along the chain right now

00:21:40,559 --> 00:21:47,700
this actual the pipeline itself was a

00:21:45,539 --> 00:21:49,710
complex job that we implemented in

00:21:47,700 --> 00:21:52,649
what's called build flow it's very

00:21:49,710 --> 00:21:54,539
similar to what Jesse just talked about

00:21:52,649 --> 00:21:57,210
with the workflow plug-in that they've

00:21:54,539 --> 00:21:58,740
now built within cloudbees and what

00:21:57,210 --> 00:22:01,710
kohsuke was talking about this morning

00:21:58,740 --> 00:22:03,149
at the kickoff is its effectively you

00:22:01,710 --> 00:22:05,399
know again I don't care if you can read

00:22:03,149 --> 00:22:07,080
it but it looks like program code and it

00:22:05,399 --> 00:22:08,850
says I want to run this job then run

00:22:07,080 --> 00:22:10,529
this job then run this job and then if

00:22:08,850 --> 00:22:12,210
this happens I want to do that and I can

00:22:10,529 --> 00:22:13,500
do loops and I can do conditionals and I

00:22:12,210 --> 00:22:15,899
can do all kinds of neat stuff I can do

00:22:13,500 --> 00:22:17,429
retry you know every once in a while we

00:22:15,899 --> 00:22:19,919
would have publishing steps that would

00:22:17,429 --> 00:22:21,600
fail because the server was flaky in the

00:22:19,919 --> 00:22:23,580
networking to go out right so i can put

00:22:21,600 --> 00:22:26,130
retry loop so it allows me to kind of

00:22:23,580 --> 00:22:27,779
inject real logic into what's going on

00:22:26,130 --> 00:22:29,789
right and if we look at it from an

00:22:27,779 --> 00:22:31,830
output standpoint you know it says this

00:22:29,789 --> 00:22:33,779
failed there this started you know job

00:22:31,830 --> 00:22:35,190
started next thing happened past good

00:22:33,779 --> 00:22:36,840
next thing next thing the next thing and

00:22:35,190 --> 00:22:39,740
I can do things in peril and allows me

00:22:36,840 --> 00:22:42,330
to kind of describe fairly complex jobs

00:22:39,740 --> 00:22:44,070
general orchestration right this is the

00:22:42,330 --> 00:22:46,080
waving and saying you go to this and you

00:22:44,070 --> 00:22:47,820
go two that and you go to that right and

00:22:46,080 --> 00:22:49,529
that kind of stuff happens and we use

00:22:47,820 --> 00:22:53,279
the build flown plugin it was a very

00:22:49,529 --> 00:22:55,380
effective for us so one note on

00:22:53,279 --> 00:22:56,700
orchestration right how many people here

00:22:55,380 --> 00:22:58,029
well how many people are using Jenkins

00:22:56,700 --> 00:23:01,179
right now

00:22:58,029 --> 00:23:02,200
right almost everybody anybody coming

00:23:01,179 --> 00:23:04,629
here because I don't know anything about

00:23:02,200 --> 00:23:06,879
it want to learn Jenkins at least a

00:23:04,629 --> 00:23:09,239
couple right now how many people are

00:23:06,879 --> 00:23:11,799
doing what they would continue can

00:23:09,239 --> 00:23:13,090
consider to be some kind of continuous

00:23:11,799 --> 00:23:17,619
delivery where you do in deployment

00:23:13,090 --> 00:23:24,009
installation and testing fewer okay

00:23:17,619 --> 00:23:25,929
anybody here using chef dozen ish and

00:23:24,009 --> 00:23:28,509
how about something similar to chef like

00:23:25,929 --> 00:23:31,989
puppet or ansible or one of those a few

00:23:28,509 --> 00:23:35,139
more okay so one of the biggest problems

00:23:31,989 --> 00:23:36,489
often with building up and let me pop

00:23:35,139 --> 00:23:40,389
back to the diagram building up

00:23:36,489 --> 00:23:42,369
something like this is even chef puppet

00:23:40,389 --> 00:23:43,869
and Simone whatever they are are very

00:23:42,369 --> 00:23:46,359
good at packaging a set of instructions

00:23:43,869 --> 00:23:48,789
that say for this kind of server it's a

00:23:46,359 --> 00:23:51,849
tomcat server do these things to install

00:23:48,789 --> 00:23:54,820
a lot of times what it doesn't give you

00:23:51,849 --> 00:23:56,259
is oh you have three Tomcat servers and

00:23:54,820 --> 00:23:57,719
they all need to talk to each other and

00:23:56,259 --> 00:24:00,399
register themselves with a load balancer

00:23:57,719 --> 00:24:02,409
what does that mean you know it's this

00:24:00,399 --> 00:24:04,269
concept of what we call orchestration

00:24:02,409 --> 00:24:06,460
and it's one of the harder parts of kind

00:24:04,269 --> 00:24:08,799
of continuous delivery is trying to

00:24:06,460 --> 00:24:12,279
configure a fleet of servers to do the

00:24:08,799 --> 00:24:14,379
right thing so in our case we used

00:24:12,279 --> 00:24:16,539
Jenkins and chef to be able to do this

00:24:14,379 --> 00:24:18,330
and we use Jenkins really as that Center

00:24:16,539 --> 00:24:20,499
orchestration point which means all

00:24:18,330 --> 00:24:22,389
activities originated from Jenkins

00:24:20,499 --> 00:24:25,299
Jenkins knew when it had a new software

00:24:22,389 --> 00:24:28,299
system to deploy and it said I know that

00:24:25,299 --> 00:24:31,330
this analytics API is supposed to go on

00:24:28,299 --> 00:24:33,339
an analytic server now the question then

00:24:31,330 --> 00:24:35,169
becomes well where or what are the

00:24:33,339 --> 00:24:37,119
analytic servers how do I find them

00:24:35,169 --> 00:24:38,830
right and the way we did it is we went

00:24:37,119 --> 00:24:40,899
through what we call a provision step

00:24:38,830 --> 00:24:42,820
and we use chef chef is a configuration

00:24:40,899 --> 00:24:45,190
management framework database system

00:24:42,820 --> 00:24:47,830
that allows you to provide instructions

00:24:45,190 --> 00:24:49,690
for configuring something and then oh by

00:24:47,830 --> 00:24:51,609
the way the central chef server itself

00:24:49,690 --> 00:24:54,249
keeps track of what's been done and

00:24:51,609 --> 00:24:56,169
who's where and who's got what so the

00:24:54,249 --> 00:24:58,570
way we ended up orchestrating this is

00:24:56,169 --> 00:25:00,489
Jenkins would invoke chef and there's a

00:24:58,570 --> 00:25:01,419
command line tool called knife doesn't

00:25:00,489 --> 00:25:03,249
really matter if you don't know what

00:25:01,419 --> 00:25:03,950
that is but it's basically just how to

00:25:03,249 --> 00:25:07,850
control

00:25:03,950 --> 00:25:10,159
chef Enterprise if you went right and we

00:25:07,850 --> 00:25:13,039
used the chef configuration database for

00:25:10,159 --> 00:25:15,500
a quote environment meaning dead or QA

00:25:13,039 --> 00:25:17,870
or prod to store the data about what the

00:25:15,500 --> 00:25:19,730
machines were right so chef knew that

00:25:17,870 --> 00:25:21,649
for an analytics API we had three

00:25:19,730 --> 00:25:25,130
servers you know server one server to in

00:25:21,649 --> 00:25:27,740
73 right so Jenkins didn't need to know

00:25:25,130 --> 00:25:30,860
that all it needed to do is query chef

00:25:27,740 --> 00:25:32,809
and say give me the three servers that I

00:25:30,860 --> 00:25:35,240
need in order to do stuff now as it

00:25:32,809 --> 00:25:36,950
turns out the way that we told chef what

00:25:35,240 --> 00:25:38,630
was the first time is during its quote

00:25:36,950 --> 00:25:41,269
provisioning phase meaning when these

00:25:38,630 --> 00:25:42,590
machines are born we would enter a data

00:25:41,269 --> 00:25:44,029
file somewhere and then when hit a

00:25:42,590 --> 00:25:45,500
Jenkins job which would read the data

00:25:44,029 --> 00:25:46,940
file and shove it into the chef server

00:25:45,500 --> 00:25:48,470
and tell it what it is and at that point

00:25:46,940 --> 00:25:51,320
chef knew what those servers were

00:25:48,470 --> 00:25:54,080
forever right so when we needed to do

00:25:51,320 --> 00:25:55,549
something we would you know use knife to

00:25:54,080 --> 00:25:58,130
fire that information off and then

00:25:55,549 --> 00:26:00,679
effectively we would query it and say

00:25:58,130 --> 00:26:03,110
okay I just want you to use secure shell

00:26:00,679 --> 00:26:05,809
you know remote login to go to those

00:26:03,110 --> 00:26:07,970
three servers and tell them do your chef

00:26:05,809 --> 00:26:09,409
instructions right and those servers and

00:26:07,970 --> 00:26:11,000
one of the things chef does for us is

00:26:09,409 --> 00:26:13,789
those servers basically phone home to

00:26:11,000 --> 00:26:15,320
the chef server and go Jenkins told me

00:26:13,789 --> 00:26:17,510
to do something what am I supposed to do

00:26:15,320 --> 00:26:19,010
right and then chef would distribute the

00:26:17,510 --> 00:26:21,440
instructions and it would do it stuff

00:26:19,010 --> 00:26:24,190
right so the key point to take away from

00:26:21,440 --> 00:26:27,380
here is we used kind of that cm database

00:26:24,190 --> 00:26:28,789
within chef to maintain everything so it

00:26:27,380 --> 00:26:30,679
was a central point of knowledge and

00:26:28,789 --> 00:26:32,779
chef just would kind of either push

00:26:30,679 --> 00:26:34,399
information in or query it out we even

00:26:32,779 --> 00:26:39,139
set it up the kind of final bullet

00:26:34,399 --> 00:26:42,860
emphasizes that when ever Jenkins

00:26:39,139 --> 00:26:44,600
deployed version 1204 to prod we had it

00:26:42,860 --> 00:26:46,399
set up so that it would actually go

00:26:44,600 --> 00:26:48,830
tickle the chef database and say hey

00:26:46,399 --> 00:26:51,260
store this information for me right so

00:26:48,830 --> 00:26:53,059
it would store well one dot to dot 4 was

00:26:51,260 --> 00:26:54,720
installed on this server on this date so

00:26:53,059 --> 00:26:55,980
chef always knew that we

00:26:54,720 --> 00:26:58,169
use that as kind of our central

00:26:55,980 --> 00:27:00,360
knowledge point and then jenkins as

00:26:58,169 --> 00:27:05,760
really the trigger point to control all

00:27:00,360 --> 00:27:09,200
of that activity one of the things that

00:27:05,760 --> 00:27:13,110
we discovered as we were going through

00:27:09,200 --> 00:27:15,409
this whole episode if you will is we

00:27:13,110 --> 00:27:18,000
ended up with what I'll call a

00:27:15,409 --> 00:27:19,620
medium-sized installation of Jenkins

00:27:18,000 --> 00:27:22,230
with Jenkins with three or four slaves

00:27:19,620 --> 00:27:23,760
and by the time I was done with it there

00:27:22,230 --> 00:27:25,679
were easily a couple hundred jobs

00:27:23,760 --> 00:27:28,470
controlling everything that was going on

00:27:25,679 --> 00:27:31,440
now it's not four thousand jobs which is

00:27:28,470 --> 00:27:34,470
a lot of jobs but it's not a dozen

00:27:31,440 --> 00:27:37,440
either right and what we've learned over

00:27:34,470 --> 00:27:40,260
time is anytime you start getting above

00:27:37,440 --> 00:27:42,120
a couple few dozen jobs you need to

00:27:40,260 --> 00:27:44,370
start figuring out how to organize these

00:27:42,120 --> 00:27:46,289
things so you can navigate through your

00:27:44,370 --> 00:27:48,720
system and get done what needs to get

00:27:46,289 --> 00:27:49,950
done because ultimately there are going

00:27:48,720 --> 00:27:51,480
to be some things that happen by

00:27:49,950 --> 00:27:53,640
themselves and you want to be able to

00:27:51,480 --> 00:27:55,799
monitor whether those are doing things

00:27:53,640 --> 00:27:57,240
properly there are other things that

00:27:55,799 --> 00:27:59,460
you're going to manually want to go find

00:27:57,240 --> 00:28:01,260
and do like you're going to want to keep

00:27:59,460 --> 00:28:03,960
things off manually for example that to

00:28:01,260 --> 00:28:05,970
prompting right so one of the tricks we

00:28:03,960 --> 00:28:08,070
use a lot within our jenkins anytime I

00:28:05,970 --> 00:28:11,460
set up a Jenkins server is we use what

00:28:08,070 --> 00:28:12,990
I'll call HTML navigation meaning I

00:28:11,460 --> 00:28:14,880
realize you can't read this doesn't

00:28:12,990 --> 00:28:17,070
matter but the point is you can kind of

00:28:14,880 --> 00:28:19,230
see these bullet points and links right

00:28:17,070 --> 00:28:22,409
and what we do is we you we construct

00:28:19,230 --> 00:28:25,020
HTML pages in the description so here

00:28:22,409 --> 00:28:28,200
I'll show you an example so that when I

00:28:25,020 --> 00:28:30,720
go to a Jenkins server I login and while

00:28:28,200 --> 00:28:32,370
this is one of my secure CI demo servers

00:28:30,720 --> 00:28:34,110
that I was talking about by the way you

00:28:32,370 --> 00:28:39,720
know there's not really all that many

00:28:34,110 --> 00:28:41,429
jobs but what I do is I can use the and

00:28:39,720 --> 00:28:43,110
this is basically on every single page

00:28:41,429 --> 00:28:45,150
in Jenkins there's this description

00:28:43,110 --> 00:28:46,799
paper this description thing right and

00:28:45,150 --> 00:28:50,010
you can add how many people use

00:28:46,799 --> 00:28:52,200
descriptions on their Jenkins shops you

00:28:50,010 --> 00:28:57,409
look good right well one of the things

00:28:52,200 --> 00:28:57,409
that we use very heavily

00:28:58,899 --> 00:29:04,190
we use these descriptions to basically

00:29:01,669 --> 00:29:06,829
self document how to use the system

00:29:04,190 --> 00:29:08,539
right so I construct navigation that

00:29:06,829 --> 00:29:10,279
says oh by the way start here this is

00:29:08,539 --> 00:29:11,929
what this demo is about go kick this and

00:29:10,279 --> 00:29:13,429
you know if I want to do a build I can

00:29:11,929 --> 00:29:15,739
kick it and it'll go off and do stuff I

00:29:13,429 --> 00:29:17,809
was like this is what it actually does

00:29:15,739 --> 00:29:19,159
there's many phases right if you want to

00:29:17,809 --> 00:29:20,809
go to the other things are related to

00:29:19,159 --> 00:29:22,609
and here's the quick links to the places

00:29:20,809 --> 00:29:24,440
you might want to go if you want to go

00:29:22,609 --> 00:29:26,059
see a view of what's going on you can go

00:29:24,440 --> 00:29:35,919
to this delivery page and this by the

00:29:26,059 --> 00:29:35,919
way this is just you know come on shrink

00:29:37,059 --> 00:29:42,259
this is another view of a pipeline right

00:29:40,009 --> 00:29:44,749
so this is called a delivery pipeline

00:29:42,259 --> 00:29:46,249
view plugin for Jenkins it's just a

00:29:44,749 --> 00:29:47,809
different way to view slightly more

00:29:46,249 --> 00:29:49,579
complicated jobs right the one I showed

00:29:47,809 --> 00:29:51,739
you guys was very linear it's three

00:29:49,579 --> 00:29:53,839
steps it's really easy to view if you do

00:29:51,739 --> 00:29:56,239
that one where you've got 12 steps that

00:29:53,839 --> 00:29:58,279
have parallel tasks and everything you

00:29:56,239 --> 00:30:01,089
end up with a you know four foot wide

00:29:58,279 --> 00:30:03,829
page of stuff that's very hard to digest

00:30:01,089 --> 00:30:05,149
the delivery plugin is just a different

00:30:03,829 --> 00:30:06,889
mechanism you can use that kind of

00:30:05,149 --> 00:30:09,349
groups things together but eventually

00:30:06,889 --> 00:30:11,479
you end up with spaghetti again right

00:30:09,349 --> 00:30:13,789
but with it you know I can see stuff

00:30:11,479 --> 00:30:15,889
like oh the demo application built and

00:30:13,789 --> 00:30:18,709
then it triggered a few other things in

00:30:15,889 --> 00:30:21,169
this particular demo the way we've set

00:30:18,709 --> 00:30:24,709
it up is we use ansible puppet and or

00:30:21,169 --> 00:30:27,199
chef to launch machines into AWS and

00:30:24,709 --> 00:30:28,609
deploy software onto it why three

00:30:27,199 --> 00:30:30,229
because we use it as a demonstration

00:30:28,609 --> 00:30:31,969
that we know what we're doing and we can

00:30:30,229 --> 00:30:34,519
do three different ones but in reality

00:30:31,969 --> 00:30:37,159
you know most recently i ran the puppet

00:30:34,519 --> 00:30:39,889
one where we launched a puppet we use

00:30:37,159 --> 00:30:41,629
puppet to launch a machine we configured

00:30:39,889 --> 00:30:43,099
it installed software then we ran a

00:30:41,629 --> 00:30:45,079
bunch of selenium tests then we were in

00:30:43,099 --> 00:30:46,690
a bunch of security tests then we ran

00:30:45,079 --> 00:30:49,789
wat some other stuff we ran some

00:30:46,690 --> 00:30:51,409
security tests which apparently failed

00:30:49,789 --> 00:30:53,449
so there's something interesting right

00:30:51,409 --> 00:30:56,509
quick view I can tell exactly what's

00:30:53,449 --> 00:30:58,069
broken right so we use HTML navigation

00:30:56,509 --> 00:30:58,659
in these plugins really to be able to

00:30:58,069 --> 00:31:00,999
navigate

00:30:58,659 --> 00:31:02,499
30 and larger system and as soon as you

00:31:00,999 --> 00:31:04,989
start talking about continuous delivery

00:31:02,499 --> 00:31:06,039
and an enterprise one of the things

00:31:04,989 --> 00:31:09,099
you're trying to do is bring together

00:31:06,039 --> 00:31:10,509
people to understand the system right if

00:31:09,099 --> 00:31:12,429
people can't use it they're not going to

00:31:10,509 --> 00:31:14,349
use it because sue Kate mentioned this

00:31:12,429 --> 00:31:16,539
morning that we're starting to share

00:31:14,349 --> 00:31:19,269
paradigms right we've lived in a world

00:31:16,539 --> 00:31:21,369
where dev and ops were completely

00:31:19,269 --> 00:31:24,099
separate you know devs going to use like

00:31:21,369 --> 00:31:25,330
maven deploy or something to deploy

00:31:24,099 --> 00:31:27,849
their software and test it and do crazy

00:31:25,330 --> 00:31:29,799
stuff ops if you try to give a maven

00:31:27,849 --> 00:31:32,080
script to an ops guy he's going to punch

00:31:29,799 --> 00:31:33,729
you in the face right he does not want

00:31:32,080 --> 00:31:35,529
your maven scrape to try to deploy

00:31:33,729 --> 00:31:39,190
software he wants something they can

00:31:35,529 --> 00:31:42,190
maintain in liquids so starting to use

00:31:39,190 --> 00:31:45,129
like providing a usable system makes a

00:31:42,190 --> 00:31:48,070
huge benefit right they're communicating

00:31:45,129 --> 00:31:49,960
that's awesome so anyway so HTML

00:31:48,070 --> 00:31:57,460
navigation often becomes very powerful

00:31:49,960 --> 00:31:59,619
the other thing okay so the other thing

00:31:57,460 --> 00:32:01,179
okay so other success points we've been

00:31:59,619 --> 00:32:03,700
in our implementation right so how did

00:32:01,179 --> 00:32:06,220
we deal with kind of trying to deal with

00:32:03,700 --> 00:32:08,830
both development everyday continuous

00:32:06,220 --> 00:32:11,769
software versus would all call release

00:32:08,830 --> 00:32:13,149
candidates right so a lot of times when

00:32:11,769 --> 00:32:15,399
you're building software continuously

00:32:13,149 --> 00:32:17,739
you're doing many many bills right the

00:32:15,399 --> 00:32:19,989
developers might commit 10 15 times a

00:32:17,739 --> 00:32:22,119
day for your particular team you're

00:32:19,989 --> 00:32:23,799
developing many applications in a maven

00:32:22,119 --> 00:32:25,419
world you tend to call those snapshot

00:32:23,799 --> 00:32:28,090
builds right they're not really release

00:32:25,419 --> 00:32:29,229
candidates they're not proven yet but

00:32:28,090 --> 00:32:32,529
you need to get them out there quickly

00:32:29,229 --> 00:32:34,690
and rapidly change them right eventually

00:32:32,529 --> 00:32:36,609
we wanted release builds which is okay

00:32:34,690 --> 00:32:38,109
I've been doing this development and and

00:32:36,609 --> 00:32:40,149
if you can kind of read it in the corner

00:32:38,109 --> 00:32:44,590
these tend to indicate snapshots right

00:32:40,149 --> 00:32:46,149
029 snapshot build 1075 whatever the

00:32:44,590 --> 00:32:48,970
point is these are continuous ones that

00:32:46,149 --> 00:32:51,220
are happening very frequently we also

00:32:48,970 --> 00:32:52,419
wanted to be able to do okay we think

00:32:51,220 --> 00:32:55,629
that one's done we're going for an

00:32:52,419 --> 00:32:58,119
official packaged film we use something

00:32:55,629 --> 00:33:00,759
called the maven release plugin anybody

00:32:58,119 --> 00:33:01,290
anybody here using maven familiar with

00:33:00,759 --> 00:33:03,450
it

00:33:01,290 --> 00:33:06,270
dozen or so anybody using the maven

00:33:03,450 --> 00:33:07,890
release plug in at least a couple of

00:33:06,270 --> 00:33:09,660
them stream and it's got a couple steps

00:33:07,890 --> 00:33:11,550
well there's a nice plugin for Jenkins

00:33:09,660 --> 00:33:13,860
actually called the m2 release plugin

00:33:11,550 --> 00:33:17,610
that allows kind of a clicky user

00:33:13,860 --> 00:33:19,170
interface so when I do a build it you

00:33:17,610 --> 00:33:20,610
know you can click a release build and

00:33:19,170 --> 00:33:22,440
it will automatically update on the

00:33:20,610 --> 00:33:24,810
palms and incorporate all or at least

00:33:22,440 --> 00:33:27,390
information to it to be able to publish

00:33:24,810 --> 00:33:29,010
that downstream we ended up using it by

00:33:27,390 --> 00:33:31,650
the way with something called a Jake it

00:33:29,010 --> 00:33:34,530
flowed maven plugin which was a

00:33:31,650 --> 00:33:36,780
mechanism that allows if you're using it

00:33:34,530 --> 00:33:40,650
and get flow anybody using how many

00:33:36,780 --> 00:33:45,750
people using it again about half how

00:33:40,650 --> 00:33:49,580
many people using get flow much smaller

00:33:45,750 --> 00:33:52,140
get flow is just it's often labeled as a

00:33:49,580 --> 00:33:54,480
successful branching pattern for version

00:33:52,140 --> 00:33:57,180
control systems happens to be forget but

00:33:54,480 --> 00:33:59,850
it's a way of managing released branches

00:33:57,180 --> 00:34:03,480
and development feature branches and

00:33:59,850 --> 00:34:05,280
hotfix branches and honestly if you're

00:34:03,480 --> 00:34:06,600
searching for a good branching pattern

00:34:05,280 --> 00:34:09,000
no matter what you're using git er

00:34:06,600 --> 00:34:11,370
subversion go look up get flow it's it's

00:34:09,000 --> 00:34:14,130
honestly when people ask me what should

00:34:11,370 --> 00:34:15,720
by branching strategy I'm like go you

00:34:14,130 --> 00:34:17,820
start using git flow and when it doesn't

00:34:15,720 --> 00:34:19,950
work for you come back to me because a

00:34:17,820 --> 00:34:22,260
lot of times it's just it's it's an easy

00:34:19,950 --> 00:34:24,060
solution but anyway there's a JK flow

00:34:22,260 --> 00:34:26,730
maven plugin that I think is put out by

00:34:24,060 --> 00:34:28,860
atlassian that ended up working very

00:34:26,730 --> 00:34:30,390
well with them to release plug in and

00:34:28,860 --> 00:34:32,010
solve some of the merge integration

00:34:30,390 --> 00:34:34,290
problems that can get caused by using

00:34:32,010 --> 00:34:36,179
the maven plugin anyway so that's a

00:34:34,290 --> 00:34:38,280
typical build it was all done with maven

00:34:36,179 --> 00:34:41,490
the one thing I will say about anybody

00:34:38,280 --> 00:34:44,760
using Jenkins is used to build name

00:34:41,490 --> 00:34:46,440
center how many people in this room we

00:34:44,760 --> 00:34:48,810
use Jenkins I've ever had to click

00:34:46,440 --> 00:34:50,340
through you know 50 different builds

00:34:48,810 --> 00:34:53,060
looking at the parameters trying to find

00:34:50,340 --> 00:34:56,190
a bill that they wanted that happened a

00:34:53,060 --> 00:34:58,410
couple people right and if you've ever

00:34:56,190 --> 00:35:00,660
done this it drives you insane you're

00:34:58,410 --> 00:35:02,610
like oh well there's bill 38 build 37

00:35:00,660 --> 00:35:03,360
build 36 and build 35 and one of those

00:35:02,610 --> 00:35:05,430
built

00:35:03,360 --> 00:35:08,280
the thing that I care about how do i

00:35:05,430 --> 00:35:09,540
find that well i'm addicted to what's

00:35:08,280 --> 00:35:13,860
called the built name center and it's a

00:35:09,540 --> 00:35:16,290
plug-in within jenkins that I'm even see

00:35:13,860 --> 00:35:23,760
if i have it on this one if i pick some

00:35:16,290 --> 00:35:25,620
random job come on Emma it's thinking I

00:35:23,760 --> 00:35:27,960
don't even know if I haven't installed

00:35:25,620 --> 00:35:29,550
on my demo server but it allows you to

00:35:27,960 --> 00:35:31,680
basically and while that's trying to

00:35:29,550 --> 00:35:34,080
come up it allows you instead of you

00:35:31,680 --> 00:35:35,730
know number eight or number seven it

00:35:34,080 --> 00:35:37,500
allows you to put textual names

00:35:35,730 --> 00:35:40,200
associated with the build so i know that

00:35:37,500 --> 00:35:42,690
in this case it was 0 to 9 snapshot

00:35:40,200 --> 00:35:44,490
development right and i can look back

00:35:42,690 --> 00:35:46,140
through them and see what exactly failed

00:35:44,490 --> 00:35:48,330
in that in the case of the release

00:35:46,140 --> 00:35:50,820
plugin you know it gives me this little

00:35:48,330 --> 00:35:52,380
locked kind of iconic thing that says oh

00:35:50,820 --> 00:35:55,050
by the way that was an official release

00:35:52,380 --> 00:35:59,730
that happened so do I have the balloon

00:35:55,050 --> 00:36:03,780
center it's usually in I don't even have

00:35:59,730 --> 00:36:06,750
it in this one okay nevermind yes the

00:36:03,780 --> 00:36:08,400
page so building a that was another

00:36:06,750 --> 00:36:11,240
plug-in that we found that was very

00:36:08,400 --> 00:36:13,470
useful for kind of digesting interface

00:36:11,240 --> 00:36:16,020
information rather and again these

00:36:13,470 --> 00:36:19,230
things are really just aimed at trying

00:36:16,020 --> 00:36:21,600
to provide an interface so that

00:36:19,230 --> 00:36:22,950
everybody can use the system because

00:36:21,600 --> 00:36:25,290
it's one thing if you have a Jenkins

00:36:22,950 --> 00:36:27,450
system that one build guy understands

00:36:25,290 --> 00:36:29,550
and knows how to go use it's a totally

00:36:27,450 --> 00:36:31,740
different thing building a system that

00:36:29,550 --> 00:36:33,930
conveys useful information and allows

00:36:31,740 --> 00:36:35,610
you to get to where you want to go I did

00:36:33,930 --> 00:36:37,710
mention you know we had hundreds of jobs

00:36:35,610 --> 00:36:39,240
so one of those strategies for us was to

00:36:37,710 --> 00:36:40,890
use what we call it a dash but there's a

00:36:39,240 --> 00:36:42,380
dashboard view plugin and there's

00:36:40,890 --> 00:36:44,880
something called the nest of you plug in

00:36:42,380 --> 00:36:47,010
the dashboard view to show you kind of a

00:36:44,880 --> 00:36:53,100
live copy of it gives you this really

00:36:47,010 --> 00:36:55,290
tight like if you were to use just you

00:36:53,100 --> 00:36:58,560
know it gives you this nice tight kind

00:36:55,290 --> 00:37:02,400
of compact representation where you know

00:36:58,560 --> 00:37:03,930
on this page I had probably 50 jobs that

00:37:02,400 --> 00:37:07,530
were being displayed on this page that i

00:37:03,930 --> 00:37:09,690
could see green red instantly you know

00:37:07,530 --> 00:37:11,520
in reality you know here's a couple red

00:37:09,690 --> 00:37:13,290
bills those are always the interesting

00:37:11,520 --> 00:37:15,270
that's right the other things you know

00:37:13,290 --> 00:37:17,250
it's configurable you can say well this

00:37:15,270 --> 00:37:19,050
is the order of what's been run recently

00:37:17,250 --> 00:37:21,090
you know so that's the recent stuff

00:37:19,050 --> 00:37:22,410
here's the unstable stuff this is what

00:37:21,090 --> 00:37:24,510
needs attention right you have broken

00:37:22,410 --> 00:37:26,640
builds go deal with them right so it

00:37:24,510 --> 00:37:28,490
allows us to quickly digest it the other

00:37:26,640 --> 00:37:31,530
one I talked about is the nested view

00:37:28,490 --> 00:37:33,540
nest of view basically Jenkins comes

00:37:31,530 --> 00:37:35,280
with the ability to kind of do these

00:37:33,540 --> 00:37:38,160
tabs across the top right that just

00:37:35,280 --> 00:37:41,070
comes right out of the box what it

00:37:38,160 --> 00:37:44,190
doesn't necessarily do is give you an

00:37:41,070 --> 00:37:46,880
easy way to deal like normally what you

00:37:44,190 --> 00:37:48,930
end up with is one tab and

00:37:46,880 --> 00:37:50,670
chugga-chugga-chugga as it comes up with

00:37:48,930 --> 00:37:53,100
this big long list of jobs right and

00:37:50,670 --> 00:37:55,230
it's not very granular well the nest of

00:37:53,100 --> 00:37:57,510
view allows me to do stuff like go oh

00:37:55,230 --> 00:37:59,220
there's pipeline John's right which is a

00:37:57,510 --> 00:38:00,480
folder that has another folder within it

00:37:59,220 --> 00:38:02,160
so I can create a hierarchy of

00:38:00,480 --> 00:38:03,900
navigation and kind of go through things

00:38:02,160 --> 00:38:06,000
so if I go to the puppet pipeline I can

00:38:03,900 --> 00:38:07,920
go here and then it has more tabs across

00:38:06,000 --> 00:38:10,860
it so it's one of the pipe one of the

00:38:07,920 --> 00:38:13,770
plugins again that I'd like to use to

00:38:10,860 --> 00:38:17,670
make my UI digestible so that i'll end

00:38:13,770 --> 00:38:21,270
up with a Jenkins server that has you

00:38:17,670 --> 00:38:23,850
know 40 tabs across the top here and if

00:38:21,270 --> 00:38:25,800
I go to the all job like don't the all

00:38:23,850 --> 00:38:27,720
jobs should never be your default right

00:38:25,800 --> 00:38:29,340
so that what I mean even this little

00:38:27,720 --> 00:38:31,170
demo server right the server doesn't

00:38:29,340 --> 00:38:33,480
even do anything and I've got 40 jobs

00:38:31,170 --> 00:38:35,610
right so anytime you get a complex thing

00:38:33,480 --> 00:38:40,560
need some way to be able to digest it

00:38:35,610 --> 00:38:42,180
right so i will say in going through

00:38:40,560 --> 00:38:43,740
this project you know set up all these

00:38:42,180 --> 00:38:45,840
jobs we did all this stuff and deployed

00:38:43,740 --> 00:38:48,060
it and probably one of the proudest

00:38:45,840 --> 00:38:51,480
moments I've had certainly on that

00:38:48,060 --> 00:38:53,430
project was the scene was basically they

00:38:51,480 --> 00:38:55,620
locked us all in a room for a week right

00:38:53,430 --> 00:38:57,240
there about 20 of us and it was a bunch

00:38:55,620 --> 00:39:00,600
of developers a bunch of QA a bunch of

00:38:57,240 --> 00:39:02,940
tech ops guys all and said we don't have

00:39:00,600 --> 00:39:05,340
a UI for this thing bill 1 go don't come

00:39:02,940 --> 00:39:06,960
out until you're done right so these

00:39:05,340 --> 00:39:08,100
guys we all spent a week in a room when

00:39:06,960 --> 00:39:10,740
we just heck this thing up and they

00:39:08,100 --> 00:39:12,180
built this UI and actually I use the

00:39:10,740 --> 00:39:14,190
word hacked but they really they

00:39:12,180 --> 00:39:16,200
constructed a completely working you I

00:39:14,190 --> 00:39:18,230
that worked in this federated

00:39:16,200 --> 00:39:19,460
environment from scratch in

00:39:18,230 --> 00:39:21,170
than a week they took a prototype of

00:39:19,460 --> 00:39:23,180
something they wanted it to look like in

00:39:21,170 --> 00:39:24,950
building right so at the end of the week

00:39:23,180 --> 00:39:26,840
you know they go through and the product

00:39:24,950 --> 00:39:28,310
manager gives a demo to the CTO who's

00:39:26,840 --> 00:39:30,440
paying for this whole multi-million

00:39:28,310 --> 00:39:32,030
dollar project and the demo comes off

00:39:30,440 --> 00:39:34,400
really well the UI is awesome it looks

00:39:32,030 --> 00:39:35,630
really cool and the CTO kind of laughs

00:39:34,400 --> 00:39:37,250
about he's like well that was really an

00:39:35,630 --> 00:39:39,890
awesome demo it's all being done with CI

00:39:37,250 --> 00:39:41,630
CD right and you know kind of laughs

00:39:39,890 --> 00:39:43,040
about it like assuming that there was no

00:39:41,630 --> 00:39:45,260
way in hell that's the way it was being

00:39:43,040 --> 00:39:48,980
done and I was there and I was like well

00:39:45,260 --> 00:39:50,750
yeah of course the response was really

00:39:48,980 --> 00:39:52,310
I'm like yeah we build all the

00:39:50,750 --> 00:39:54,320
automation code with the developers

00:39:52,310 --> 00:39:56,990
while they were writing their code and

00:39:54,320 --> 00:39:58,369
at that point you know the the I don't

00:39:56,990 --> 00:39:59,810
know the light bulb really went off from

00:39:58,369 --> 00:40:01,880
its head is like wow that really is

00:39:59,810 --> 00:40:04,220
amazing and and what the team had

00:40:01,880 --> 00:40:07,510
concluded really is there's no way yep

00:40:04,220 --> 00:40:09,740
question Oh five minutes good thank you

00:40:07,510 --> 00:40:14,060
know it says I have five minutes of one

00:40:09,740 --> 00:40:16,310
second and so it really and the team

00:40:14,060 --> 00:40:18,260
really agreed at that point that the

00:40:16,310 --> 00:40:20,180
ability to rapidly push this code

00:40:18,260 --> 00:40:21,920
through and build one more component of

00:40:20,180 --> 00:40:27,230
automation and link this into Jenkins

00:40:21,920 --> 00:40:28,640
was a big part of their success so you

00:40:27,230 --> 00:40:30,380
know what it comes down to is when I

00:40:28,640 --> 00:40:31,609
look back through it I'm like a lot of

00:40:30,380 --> 00:40:33,109
people come to us and they're like well

00:40:31,609 --> 00:40:34,820
we want to do CD we're not really sure

00:40:33,109 --> 00:40:36,920
what it means but we want to do stuff

00:40:34,820 --> 00:40:39,890
where do I start right and what I tell

00:40:36,920 --> 00:40:42,619
them is this is whether a CI CD or

00:40:39,890 --> 00:40:44,720
anything in between figure out what

00:40:42,619 --> 00:40:46,400
happens most frequently and automate

00:40:44,720 --> 00:40:48,320
that first right that's your bottleneck

00:40:46,400 --> 00:40:50,359
right so what's the thing we do most

00:40:48,320 --> 00:40:52,040
often right we can pass them right well

00:40:50,359 --> 00:40:53,330
make sure you're compiling software and

00:40:52,040 --> 00:40:55,220
that's where everybody starts with C i

00:40:53,330 --> 00:40:56,570
right but then after that you're like

00:40:55,220 --> 00:40:58,400
okay now you got to make sure that's

00:40:56,570 --> 00:41:00,560
good so for everything that you do

00:40:58,400 --> 00:41:01,940
quickly you need to find a way to test

00:41:00,560 --> 00:41:05,090
it to make sure that whatever you just

00:41:01,940 --> 00:41:08,270
did quickly is any good because I will

00:41:05,090 --> 00:41:10,550
say it's really easy to deliver garbage

00:41:08,270 --> 00:41:11,869
quickly right you can check in whatever

00:41:10,550 --> 00:41:13,460
crap you want I can put that in

00:41:11,869 --> 00:41:16,190
production tomorrow if you want wonder

00:41:13,460 --> 00:41:17,330
in 20 minutes but it may be garbage so

00:41:16,190 --> 00:41:19,010
you might have to deal with that right

00:41:17,330 --> 00:41:21,109
so for everything you do you need some

00:41:19,010 --> 00:41:22,970
way of testing it right so after you get

00:41:21,109 --> 00:41:25,160
it compiled the next most important

00:41:22,970 --> 00:41:26,810
thing is how do you deploy your app

00:41:25,160 --> 00:41:28,580
right you're going to change your app

00:41:26,810 --> 00:41:30,890
lot so figure out how to deploy that

00:41:28,580 --> 00:41:32,180
some people will start one like well you

00:41:30,890 --> 00:41:34,430
know if you're going to do CD you need

00:41:32,180 --> 00:41:35,930
to build up from bare metal and put your

00:41:34,430 --> 00:41:37,580
Wes on top of it and do your own

00:41:35,930 --> 00:41:40,010
middleware stuff and then deploy your

00:41:37,580 --> 00:41:42,350
app I was like well yeah but how often

00:41:40,010 --> 00:41:44,150
you do that the answer is not very right

00:41:42,350 --> 00:41:46,070
unless you go to the end which is if

00:41:44,150 --> 00:41:47,870
you're launching a lot of Amazon dynamic

00:41:46,070 --> 00:41:49,160
servers it's a different story but for

00:41:47,870 --> 00:41:51,050
the most part you need to be able to

00:41:49,160 --> 00:41:53,030
configure and deploy your application

00:41:51,050 --> 00:41:54,740
right so figure out how to do that and

00:41:53,030 --> 00:41:56,660
then oh by the way what do we do next

00:41:54,740 --> 00:41:57,890
you better test that right you need a

00:41:56,660 --> 00:42:00,380
way to prove that whatever you just

00:41:57,890 --> 00:42:02,000
deployed is in fact good because without

00:42:00,380 --> 00:42:06,200
that you can't really automate any

00:42:02,000 --> 00:42:07,880
further once you can do that well now

00:42:06,200 --> 00:42:09,260
you can start thinking about okay well

00:42:07,880 --> 00:42:12,650
that middleware that I depend on

00:42:09,260 --> 00:42:14,870
underneath tomcat Java neo4j work or

00:42:12,650 --> 00:42:16,310
whatever it is right you need a good way

00:42:14,870 --> 00:42:18,140
to be able to build that up too because

00:42:16,310 --> 00:42:19,880
when you get new servers you don't want

00:42:18,140 --> 00:42:21,980
to take three weeks to launch a server

00:42:19,880 --> 00:42:23,630
right you want to get it quickly and

00:42:21,980 --> 00:42:25,790
build it up to a state that you

00:42:23,630 --> 00:42:27,560
understand right so you don't want a

00:42:25,790 --> 00:42:29,000
bunch of written steps and if you do by

00:42:27,560 --> 00:42:30,760
the way it just write it as a script

00:42:29,000 --> 00:42:33,350
right so we do that so do all that stuff

00:42:30,760 --> 00:42:35,510
configure new servers that stuff again

00:42:33,350 --> 00:42:37,430
don't forget automated testing it's what

00:42:35,510 --> 00:42:41,630
proves that what you have is any good

00:42:37,430 --> 00:42:43,190
right what you will find is I absolutely

00:42:41,630 --> 00:42:44,660
recommend use the build server for the

00:42:43,190 --> 00:42:47,210
center point of everything at least

00:42:44,660 --> 00:42:48,560
initially right you may find that there

00:42:47,210 --> 00:42:51,380
are other products you know we looked at

00:42:48,560 --> 00:42:54,050
run deck or a few others chef Enterprise

00:42:51,380 --> 00:42:56,210
puppet enterprise that allow a different

00:42:54,050 --> 00:42:57,890
kind of operational control point for

00:42:56,210 --> 00:42:59,510
doing like server upgrades and whatnot

00:42:57,890 --> 00:43:01,910
that might be fine but certainly in the

00:42:59,510 --> 00:43:03,410
simple case use Jenkins as the center

00:43:01,910 --> 00:43:04,730
point I'm assuming you're going to use

00:43:03,410 --> 00:43:06,350
Jenkins if you're at a Jenkins

00:43:04,730 --> 00:43:09,050
conference there's all the boats overage

00:43:06,350 --> 00:43:10,610
you could use as well right the other

00:43:09,050 --> 00:43:11,990
thing is eventually you are going to

00:43:10,610 --> 00:43:14,120
have to figure out how to engineer your

00:43:11,990 --> 00:43:15,440
pipe work when you start out you're

00:43:14,120 --> 00:43:16,430
going to have a spaghetti good you're

00:43:15,440 --> 00:43:17,540
going to have a little bit of stuff and

00:43:16,430 --> 00:43:18,590
you're gonna have a lot of stuff and

00:43:17,540 --> 00:43:20,120
none of it's going to be designed the

00:43:18,590 --> 00:43:21,980
way you want you can have to figure out

00:43:20,120 --> 00:43:24,170
how to reengineer that and support that

00:43:21,980 --> 00:43:28,400
once it becomes live and kind of in

00:43:24,170 --> 00:43:29,990
production people will depend on it when

00:43:28,400 --> 00:43:31,850
you're trying to tweak it and you break

00:43:29,990 --> 00:43:33,590
it they're going to be very mad at you

00:43:31,850 --> 00:43:35,960
right so you need to figure out how to

00:43:33,590 --> 00:43:36,580
kind of deliver stuff into your Jenkins

00:43:35,960 --> 00:43:39,340
server

00:43:36,580 --> 00:43:41,470
into your automation so that you don't

00:43:39,340 --> 00:43:43,270
break it as you deliver things you've

00:43:41,470 --> 00:43:44,500
stood up extra Jenkins servers right we

00:43:43,270 --> 00:43:45,760
do all our development over here and

00:43:44,500 --> 00:43:47,380
then when it works we move the

00:43:45,760 --> 00:43:49,570
configuration numbering the first one so

00:43:47,380 --> 00:43:51,720
you'll have to think about thank you

00:43:49,570 --> 00:43:51,720
guys

00:44:01,230 --> 00:44:03,290

YouTube URL: https://www.youtube.com/watch?v=YgJ2tT7Ntqw


