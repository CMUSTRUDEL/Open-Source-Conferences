Title: JUC U.S. East 2015 - Keynote Address by Gene Kim
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	
Captions: 
	00:00:15,180 --> 00:00:18,240
I've had the privilege of studying

00:00:16,620 --> 00:00:20,160
high-performing technology organization

00:00:18,240 --> 00:00:21,600
since 1999 and so this is a journey I

00:00:20,160 --> 00:00:22,620
started from me back when I was a CTO

00:00:21,600 --> 00:00:24,480
and founder of a company called trip

00:00:22,620 --> 00:00:26,400
wire and I'll be the first to admit that

00:00:24,480 --> 00:00:28,500
you know trip wire did that have nearly

00:00:26,400 --> 00:00:30,869
amount of love and admiration that the

00:00:28,500 --> 00:00:32,640
Jenkins community has had so my

00:00:30,869 --> 00:00:34,140
heartiest congratulations to KK and the

00:00:32,640 --> 00:00:35,790
entire Jenkins community for everything

00:00:34,140 --> 00:00:37,980
that you've achieved I have a tremendous

00:00:35,790 --> 00:00:39,780
amount of awe and admiration for we done

00:00:37,980 --> 00:00:46,949
so first off male thank you so much and

00:00:39,780 --> 00:00:48,300
congratulations applause when we talk

00:00:46,949 --> 00:00:50,070
about these high-performing technology

00:00:48,300 --> 00:00:52,649
organizations of which this community is

00:00:50,070 --> 00:00:53,730
an integral part of back in 1999 we

00:00:52,649 --> 00:00:55,170
called high performers those

00:00:53,730 --> 00:00:57,000
organizations that had the best project

00:00:55,170 --> 00:00:58,590
due date performance and development but

00:00:57,000 --> 00:01:01,140
they're also had the best availability

00:00:58,590 --> 00:01:02,640
and reliability in operations as well as

00:01:01,140 --> 00:01:04,770
the best posture security and compliance

00:01:02,640 --> 00:01:06,420
and so our goal was always understand

00:01:04,770 --> 00:01:08,430
how did these amazing organizations make

00:01:06,420 --> 00:01:10,020
their good to great transformation why

00:01:08,430 --> 00:01:13,530
so that the rest of us could replicate

00:01:10,020 --> 00:01:14,850
those amazing outcomes and so you know

00:01:13,530 --> 00:01:16,590
there were many surprises in that

00:01:14,850 --> 00:01:17,729
journey but perhaps the biggest one was

00:01:16,590 --> 00:01:19,170
that it took me straight into the heart

00:01:17,729 --> 00:01:21,390
of the dev ops unit which i think is

00:01:19,170 --> 00:01:22,950
urgent and important because I think it

00:01:21,390 --> 00:01:24,869
solves the biggest business problem of

00:01:22,950 --> 00:01:26,700
our generation the biggest we've seen

00:01:24,869 --> 00:01:28,290
you know since Manufacturing's

00:01:26,700 --> 00:01:31,590
transformed in 1980s do the application

00:01:28,290 --> 00:01:32,970
of Lean principles so in the next 45

00:01:31,590 --> 00:01:35,159
minutes by the way could i get a counter

00:01:32,970 --> 00:01:36,689
started in the next 45 minutes i'd like

00:01:35,159 --> 00:01:38,340
to share with you three things one is

00:01:36,689 --> 00:01:41,610
share with you why i think they've ops

00:01:38,340 --> 00:01:42,930
is so urgent important to is the how of

00:01:41,610 --> 00:01:45,810
DevOps in other words what are the

00:01:42,930 --> 00:01:48,119
principles of patterns that can explain

00:01:45,810 --> 00:01:50,100
all the observed DevOps behaviors that's

00:01:48,119 --> 00:01:51,509
allowing organizations to do 10 hundreds

00:01:50,100 --> 00:01:54,180
or even thousands of points per day

00:01:51,509 --> 00:01:55,680
while preserving world-class reliability

00:01:54,180 --> 00:01:57,150
security and stability yes something we

00:01:55,680 --> 00:01:59,460
didn't even think possible 10 years ago

00:01:57,150 --> 00:02:01,290
and then third my ear passion right now

00:01:59,460 --> 00:02:03,060
is studying not so much the unicorns

00:02:01,290 --> 00:02:06,240
right the googles Amzad etsy Facebook's

00:02:03,060 --> 00:02:07,560
whatever I love the horses large complex

00:02:06,240 --> 00:02:09,600
organizations have been around for

00:02:07,560 --> 00:02:11,009
decades or even centuries and seeing how

00:02:09,600 --> 00:02:12,030
they're mobilizing against DevOps and

00:02:11,009 --> 00:02:13,950
getting the same sort of miraculous

00:02:12,030 --> 00:02:16,709
technical outcomes that we've typically

00:02:13,950 --> 00:02:20,010
only associated with the unicorns so

00:02:16,709 --> 00:02:21,450
first off in terms of the why it is

00:02:20,010 --> 00:02:23,700
really about this downward spiral that

00:02:21,450 --> 00:02:25,500
we saw happening in the early 2000 we're

00:02:23,700 --> 00:02:26,730
left unchecked without them like DevOps

00:02:25,500 --> 00:02:28,950
would lead to horrendous outcome

00:02:26,730 --> 00:02:30,420
that's us the development test operation

00:02:28,950 --> 00:02:31,860
and information security but ultimately

00:02:30,420 --> 00:02:33,510
the ones most damage was the

00:02:31,860 --> 00:02:34,739
organization that we served and this

00:02:33,510 --> 00:02:36,659
would happen in every technology

00:02:34,739 --> 00:02:39,030
organization independent of industry

00:02:36,659 --> 00:02:40,590
vertical independent company size profit

00:02:39,030 --> 00:02:42,599
not for profit they all left unchecked

00:02:40,590 --> 00:02:44,280
it would lead to terrible outcomes and

00:02:42,599 --> 00:02:45,810
so when we believe that one of the major

00:02:44,280 --> 00:02:48,000
contributing causes for this downward

00:02:45,810 --> 00:02:50,370
spiral is what Ward Cunningham called 11

00:02:48,000 --> 00:02:51,330
years ago technical debt and so even

00:02:50,370 --> 00:02:53,250
though he said it very much in the

00:02:51,330 --> 00:02:54,959
context of code back then it applies to

00:02:53,250 --> 00:02:56,849
everyone in the technology value stream

00:02:54,959 --> 00:02:58,590
and so he said technical debt is what we

00:02:56,849 --> 00:03:00,989
feel the next time we want to make a

00:02:58,590 --> 00:03:04,349
change right and so you know technical

00:03:00,989 --> 00:03:06,030
debt is just a poetic love phrase but I

00:03:04,349 --> 00:03:08,160
think in my mind evokes this image right

00:03:06,030 --> 00:03:09,840
here right is the accumulation of all

00:03:08,160 --> 00:03:12,180
the crap that we've allowed to

00:03:09,840 --> 00:03:13,829
accumulate in a data center for decades

00:03:12,180 --> 00:03:14,879
each time a with a promise that we're

00:03:13,829 --> 00:03:16,530
going to fix it when you have a little

00:03:14,879 --> 00:03:18,269
bit more time and so what are the

00:03:16,530 --> 00:03:19,620
specific actions that caused technical

00:03:18,269 --> 00:03:22,680
debt it happens every time that we write

00:03:19,620 --> 00:03:24,269
code now without automated testing it

00:03:22,680 --> 00:03:25,620
happens every time that we manually do a

00:03:24,269 --> 00:03:27,720
deployment it happens every time we

00:03:25,620 --> 00:03:29,190
manually configure an environment

00:03:27,720 --> 00:03:31,200
hopefully not in the middle of

00:03:29,190 --> 00:03:32,700
deployment it happens every time we make

00:03:31,200 --> 00:03:35,489
shortcuts in the middle a software

00:03:32,700 --> 00:03:36,690
project and so when this happens it

00:03:35,489 --> 00:03:38,190
means that we have one more fragile

00:03:36,690 --> 00:03:40,500
artifact in production that we have to

00:03:38,190 --> 00:03:44,010
that maintain but this is bad but now as

00:03:40,500 --> 00:03:45,540
bad as is this right and so you know

00:03:44,010 --> 00:03:46,799
means that at the end of every soft the

00:03:45,540 --> 00:03:48,540
project traditionally we have one more

00:03:46,799 --> 00:03:50,519
piece of luggage and baggage that we

00:03:48,540 --> 00:03:51,599
have to then maintain so that's one

00:03:50,519 --> 00:03:53,430
downward spiral but there's actually a

00:03:51,599 --> 00:03:55,049
more insidious downward spiral is even

00:03:53,430 --> 00:03:57,209
more destructive which is that

00:03:55,049 --> 00:03:59,099
deployments k patike taking longer and

00:03:57,209 --> 00:04:00,389
longer so think of a friend who's been

00:03:59,099 --> 00:04:02,579
associated with an application that used

00:04:00,389 --> 00:04:04,410
to take 5 inch boy says taken days just

00:04:02,579 --> 00:04:06,419
looking a weekend so taking a week I've

00:04:04,410 --> 00:04:08,160
had first-hand experience of a six

00:04:06,419 --> 00:04:09,660
billion dollar a year revenue

00:04:08,160 --> 00:04:12,510
application as a display at business

00:04:09,660 --> 00:04:15,450
that took six weeks to deploy it

00:04:12,510 --> 00:04:19,109
involved 1300 manual extremely

00:04:15,450 --> 00:04:20,700
error-prone steps that would tie up 300

00:04:19,109 --> 00:04:22,620
to 400 people spending dev Justin ops

00:04:20,700 --> 00:04:25,680
right for six weeks oh by the way they

00:04:22,620 --> 00:04:27,090
did four times a year so when that

00:04:25,680 --> 00:04:29,039
happens right what the point is takes

00:04:27,090 --> 00:04:30,479
six weeks to perform right this is what

00:04:29,039 --> 00:04:32,220
sets the stage for the intertribal

00:04:30,479 --> 00:04:34,110
warfare that can exist between devta

00:04:32,220 --> 00:04:35,820
schnapps so here's a friendly developer

00:04:34,110 --> 00:04:36,020
checking code in the repo at 5pm right

00:04:35,820 --> 00:04:37,520
they

00:04:36,020 --> 00:04:38,780
high-five each other because they made

00:04:37,520 --> 00:04:40,729
the date they start buying rounds of

00:04:38,780 --> 00:04:42,680
tequila at the bar not realizing that

00:04:40,729 --> 00:04:44,629
the entire data center on fire right now

00:04:42,680 --> 00:04:45,680
Ops has to work all weekend try to get

00:04:44,629 --> 00:04:47,389
things running before the customers

00:04:45,680 --> 00:04:50,419
notice that the service is down on

00:04:47,389 --> 00:04:52,099
Monday morning and so the tragedy here

00:04:50,419 --> 00:04:53,930
is that when this happens no one's

00:04:52,099 --> 00:04:56,000
achieving their goals deployments are

00:04:53,930 --> 00:04:57,229
taking every longer features are never

00:04:56,000 --> 00:04:58,340
getting to market we have an ever

00:04:57,229 --> 00:05:00,020
increasing number of seven outages

00:04:58,340 --> 00:05:02,090
happening in production and operations

00:05:00,020 --> 00:05:04,159
and tests and everybody downstream of

00:05:02,090 --> 00:05:06,500
development becomes increasingly buried

00:05:04,159 --> 00:05:08,419
in unplanned work increasingly unable to

00:05:06,500 --> 00:05:10,400
pay down the technical debt right which

00:05:08,419 --> 00:05:11,840
everyone knows that if could fix could

00:05:10,400 --> 00:05:13,340
actually help the organization win in

00:05:11,840 --> 00:05:14,990
the marketplace and they end ability to

00:05:13,340 --> 00:05:17,210
do that leads to a sense of hopelessness

00:05:14,990 --> 00:05:18,919
and despair right we feel like we're

00:05:17,210 --> 00:05:20,720
trapped in a never-ending horror movie

00:05:18,919 --> 00:05:23,780
that keeps repeating we feel powerless

00:05:20,720 --> 00:05:25,159
to change the outcomes and we actually

00:05:23,780 --> 00:05:26,810
have the sneaking suspicion that things

00:05:25,159 --> 00:05:29,150
are actually getting worse over time and

00:05:26,810 --> 00:05:30,740
there's nothing worse that we could do

00:05:29,150 --> 00:05:31,969
to a fellow human being them to put them

00:05:30,740 --> 00:05:34,819
in a situation where they can't control

00:05:31,969 --> 00:05:36,169
their own outcomes by the way I trust

00:05:34,819 --> 00:05:37,550
that some people here are friends that

00:05:36,169 --> 00:05:40,310
can resonate with some elements of the

00:05:37,550 --> 00:05:41,479
story right right so your friends are

00:05:40,310 --> 00:05:43,069
not alone and by the way that is the

00:05:41,479 --> 00:05:44,180
first half of the Phoenix project but

00:05:43,069 --> 00:05:46,580
it's a really capture that downward

00:05:44,180 --> 00:05:48,380
spiral and so the reason why I think

00:05:46,580 --> 00:05:49,490
many of us think DevOps is so important

00:05:48,380 --> 00:05:51,440
is because we know there's a better way

00:05:49,490 --> 00:05:53,090
right because and why do we know this is

00:05:51,440 --> 00:05:54,620
because you know these exemplars or at

00:05:53,090 --> 00:05:56,479
the DevOps unicorns have shown us that

00:05:54,620 --> 00:05:58,310
you know you can't actually break this

00:05:56,479 --> 00:06:00,080
downward spiral you can do tens hundreds

00:05:58,310 --> 00:06:02,120
thousands of points per day while

00:06:00,080 --> 00:06:03,800
preserving world-class reliably

00:06:02,120 --> 00:06:05,419
stability security increasingly it's not

00:06:03,800 --> 00:06:07,729
just the unicorns it's the horses as

00:06:05,419 --> 00:06:09,800
well as organization of Walmart verizon

00:06:07,729 --> 00:06:13,520
target Nordstrom even the US department

00:06:09,800 --> 00:06:15,289
homeland security right and so and so in

00:06:13,520 --> 00:06:17,270
the demos community of course right yeah

00:06:15,289 --> 00:06:18,889
we were all point to the seminal

00:06:17,270 --> 00:06:19,940
presentation that you know well maybe

00:06:18,889 --> 00:06:21,289
people will equate with the DevOps

00:06:19,940 --> 00:06:23,539
movement the famous John alspaugh and

00:06:21,289 --> 00:06:25,550
Paul Hammond presentation or way they

00:06:23,539 --> 00:06:27,529
said we're doing 10 deploy today what's

00:06:25,550 --> 00:06:30,020
interesting to me is by the people who

00:06:27,529 --> 00:06:32,150
were there at the velocity conference in

00:06:30,020 --> 00:06:33,169
santa clara 2009 listening to the

00:06:32,150 --> 00:06:34,729
presentation they knew in that moment

00:06:33,169 --> 00:06:37,520
that there were their presence or

00:06:34,729 --> 00:06:38,900
something historically significant maybe

00:06:37,520 --> 00:06:40,729
one of my biggest embarrassments is that

00:06:38,900 --> 00:06:43,310
that wasn't my reaction my reactors were

00:06:40,729 --> 00:06:45,560
like this tend to pose a day that that's

00:06:43,310 --> 00:06:47,229
impossible and even we're possible it

00:06:45,560 --> 00:06:48,950
sounds reckless irresponsible

00:06:47,229 --> 00:06:50,750
ill-advised

00:06:48,950 --> 00:06:52,850
sounded moral right because why would

00:06:50,750 --> 00:06:54,470
any decent human being do tend to pose a

00:06:52,850 --> 00:06:56,420
day to someone else when they didn't

00:06:54,470 --> 00:06:58,580
need to write and yet I now believe

00:06:56,420 --> 00:07:00,350
right don't create the capability around

00:06:58,580 --> 00:07:01,910
us we can do deployments on demand is

00:07:00,350 --> 00:07:03,770
the most critical capability we have not

00:07:01,910 --> 00:07:04,910
just for dev testing operations but

00:07:03,770 --> 00:07:08,600
ultimately the organization that we

00:07:04,910 --> 00:07:10,610
serve and what I find so interesting is

00:07:08,600 --> 00:07:12,650
just a notion of how deeply this notion

00:07:10,610 --> 00:07:15,920
of boundary spanning pervades the DevOps

00:07:12,650 --> 00:07:17,720
community my favorite quote comes from

00:07:15,920 --> 00:07:19,760
Theo schloss Mayo Laurent devil he said

00:07:17,720 --> 00:07:21,020
DevOps is a lousy term he said it's

00:07:19,760 --> 00:07:22,880
prone to misinterpretation it's

00:07:21,020 --> 00:07:24,590
incomplete what would the OSHA last

00:07:22,880 --> 00:07:28,070
thing we'll call it he would call it

00:07:24,590 --> 00:07:30,920
star ops or maybe more pathetically dot

00:07:28,070 --> 00:07:32,480
star ops right or maybe even more

00:07:30,920 --> 00:07:34,400
pedantically as every department ops

00:07:32,480 --> 00:07:36,110
because he was asking where are the

00:07:34,400 --> 00:07:37,550
network engineers where's keyway where's

00:07:36,110 --> 00:07:38,420
the product owners where's information

00:07:37,550 --> 00:07:40,100
security right because that's

00:07:38,420 --> 00:07:41,480
essentially that's the entire village we

00:07:40,100 --> 00:07:43,550
need to mobilize in order to get these

00:07:41,480 --> 00:07:46,160
amazing outcomes a fast flow from dev

00:07:43,550 --> 00:07:50,080
tops and without causing real rampant

00:07:46,160 --> 00:07:53,390
chaos and destruction downstream and so

00:07:50,080 --> 00:07:55,310
one of the memories that church the most

00:07:53,390 --> 00:07:56,600
over the last 15 years is working with

00:07:55,310 --> 00:07:58,460
the software engineering Institute at

00:07:56,600 --> 00:08:00,200
Carnegie Mellon University and I learned

00:07:58,460 --> 00:08:02,270
many things from them but this is one

00:08:00,200 --> 00:08:05,360
phrase that I think about all the time

00:08:02,270 --> 00:08:07,460
and they said this high performers in

00:08:05,360 --> 00:08:09,320
every profession always accelerate away

00:08:07,460 --> 00:08:10,820
from the herd in other words the best

00:08:09,320 --> 00:08:12,680
always get better and that's absolutely

00:08:10,820 --> 00:08:14,600
happening in dev of space as well so

00:08:12,680 --> 00:08:16,790
back in 2009 without ten deploys a day

00:08:14,600 --> 00:08:18,320
was shockingly fast right you know these

00:08:16,790 --> 00:08:21,080
days you know what we found in our

00:08:18,320 --> 00:08:22,910
benchmarking is that's pretty average if

00:08:21,080 --> 00:08:24,700
it's pretty average right now just to

00:08:22,910 --> 00:08:27,350
show you how good good is these days

00:08:24,700 --> 00:08:28,820
John Jenkins in 2011 the velocity

00:08:27,350 --> 00:08:30,770
conference said we're not doing Ken

00:08:28,820 --> 00:08:33,500
deploys a day we're doing one deploy I

00:08:30,770 --> 00:08:35,450
love every eleven point six seconds so

00:08:33,500 --> 00:08:37,970
if you do the math that's about 23,000

00:08:35,450 --> 00:08:40,610
deploys per day right and so that could

00:08:37,970 --> 00:08:42,020
be you know code being silently migrated

00:08:40,610 --> 00:08:43,520
to the brush environment it could be a

00:08:42,020 --> 00:08:45,190
feature release through a feature toggle

00:08:43,520 --> 00:08:47,240
change it could be an environment change

00:08:45,190 --> 00:08:49,220
it could be you know thousand new

00:08:47,240 --> 00:08:50,690
environments going online and I think

00:08:49,220 --> 00:08:52,970
this really demonstrates this capability

00:08:50,690 --> 00:08:54,530
that these organizations can make

00:08:52,970 --> 00:08:57,500
changes when our organizations need it

00:08:54,530 --> 00:08:58,259
most and by the way Eve 23,000 to pose a

00:08:57,500 --> 00:09:00,629
day

00:08:58,259 --> 00:09:02,939
is not actually where they are at these

00:09:00,629 --> 00:09:04,979
days can extra at the Amazon earlier

00:09:02,939 --> 00:09:07,679
this year said they're doing 50 million

00:09:04,979 --> 00:09:09,989
deploys per year so you do the math and

00:09:07,679 --> 00:09:13,129
that's 106 36 thousand points per day

00:09:09,989 --> 00:09:16,379
it's so so ten deploys a day is you know

00:09:13,129 --> 00:09:18,239
average generously and I think this

00:09:16,379 --> 00:09:22,019
explains why so many organizations

00:09:18,239 --> 00:09:23,879
opting DevOps so just to share with you

00:09:22,019 --> 00:09:26,339
maybe one of my key aha moments of like

00:09:23,879 --> 00:09:27,779
why this is so important is it comes

00:09:26,339 --> 00:09:30,720
from Scott crook he's the founder into

00:09:27,779 --> 00:09:33,539
it and he said for our turbo tax

00:09:30,720 --> 00:09:35,459
property we did 106 production changes

00:09:33,539 --> 00:09:38,939
in the peak three months of our tax

00:09:35,459 --> 00:09:41,100
filing season right so when I first read

00:09:38,939 --> 00:09:42,839
this quote my reaction is these guys are

00:09:41,100 --> 00:09:44,069
utter morons right these guys are total

00:09:42,839 --> 00:09:46,019
ad they have no idea what they're doing

00:09:44,069 --> 00:09:47,819
right because the way I was trained is

00:09:46,019 --> 00:09:49,289
that we're so afraid of making changes

00:09:47,819 --> 00:09:51,479
during peak seasons that we had to

00:09:49,289 --> 00:09:53,639
change fries from October 12 january

00:09:51,479 --> 00:09:56,189
thirtieth right and so why would these

00:09:53,639 --> 00:09:58,079
guys make changes during peak seasons

00:09:56,189 --> 00:10:00,389
and the answers revealed the next

00:09:58,079 --> 00:10:02,220
paragraph one he says we're the business

00:10:00,389 --> 00:10:04,049
result was that we were able to increase

00:10:02,220 --> 00:10:06,660
a conversion of our website by fifty

00:10:04,049 --> 00:10:09,959
percent right so here are my three aha

00:10:06,660 --> 00:10:11,939
moments one is it takes great Devon ops

00:10:09,959 --> 00:10:13,709
competence and the ability to

00:10:11,939 --> 00:10:16,859
collaborate to be able to pulls off in

00:10:13,709 --> 00:10:18,899
high cap operations to is maybe the best

00:10:16,859 --> 00:10:21,239
time to do production changes is during

00:10:18,899 --> 00:10:22,410
peak traffic seasons in other words what

00:10:21,239 --> 00:10:24,119
would have happened had they waited up

00:10:22,410 --> 00:10:26,129
til April sixteenth to win the u.s. tax

00:10:24,119 --> 00:10:28,049
filing season ends right they have lost

00:10:26,129 --> 00:10:29,309
their prospects and even their customers

00:10:28,049 --> 00:10:32,699
to the competition never again to return

00:10:29,309 --> 00:10:34,019
and third this seems to support this

00:10:32,699 --> 00:10:35,549
ever-growing school of thought that says

00:10:34,019 --> 00:10:37,289
in order to win in the marketplace

00:10:35,549 --> 00:10:39,029
requires us to out experiment the

00:10:37,289 --> 00:10:40,679
competition right in other words not

00:10:39,029 --> 00:10:42,839
every idea is a good idea studies have

00:10:40,679 --> 00:10:44,850
shown that on average three out of ten

00:10:42,839 --> 00:10:46,980
ideas are actually exothermic the

00:10:44,850 --> 00:10:49,399
question becomes which one is it right

00:10:46,980 --> 00:10:51,239
so and just to show you how this

00:10:49,399 --> 00:10:53,009
transcend the only way that we can tell

00:10:51,239 --> 00:10:55,949
a good idea from a bad idea is testing

00:10:53,009 --> 00:10:57,239
it with real-life customers and well

00:10:55,949 --> 00:10:58,799
just to share with you how this seems to

00:10:57,239 --> 00:11:00,389
be a universal principle that just

00:10:58,799 --> 00:11:03,179
transcends all of more than just

00:11:00,389 --> 00:11:05,639
technology Leonard Cohen the famous

00:11:03,179 --> 00:11:08,519
singer songwriter he said if I knew

00:11:05,639 --> 00:11:10,769
where the good songs came from I would

00:11:08,519 --> 00:11:12,060
go there more often right see me to

00:11:10,769 --> 00:11:13,680
support this notion that you know

00:11:12,060 --> 00:11:15,060
any creative endeavor the only way you

00:11:13,680 --> 00:11:16,740
can tell good from bad is actually

00:11:15,060 --> 00:11:18,720
testing it with real live customers and

00:11:16,740 --> 00:11:19,950
so this explains why so many

00:11:18,720 --> 00:11:21,510
organizations I think are adopting

00:11:19,950 --> 00:11:22,830
DevOps it's not just the unicorns and

00:11:21,510 --> 00:11:25,440
not just our service providers is

00:11:22,830 --> 00:11:27,930
financial services it's retailing its

00:11:25,440 --> 00:11:30,180
manufacturing discovering ad cheese is

00:11:27,930 --> 00:11:31,740
higher education and so the question

00:11:30,180 --> 00:11:33,870
then becomes why are so many

00:11:31,740 --> 00:11:35,010
organizations adopting DevOps especially

00:11:33,870 --> 00:11:36,870
for these organizations near the bottom

00:11:35,010 --> 00:11:39,840
that are very typically considered

00:11:36,870 --> 00:11:41,700
risk-averse and I think we can say with

00:11:39,840 --> 00:11:43,320
some confidence based on the

00:11:41,700 --> 00:11:44,460
benchmarking of over 14,000

00:11:43,320 --> 00:11:46,230
organizations that we've done over the

00:11:44,460 --> 00:11:48,150
last three years is that it's because

00:11:46,230 --> 00:11:50,400
the business value of doubting DevOps is

00:11:48,150 --> 00:11:51,600
even higher than we thought and so this

00:11:50,400 --> 00:11:53,820
is the I've had the privilege of working

00:11:51,600 --> 00:11:55,020
with Jess humble who is a co-author the

00:11:53,820 --> 00:11:57,330
continuous delivery book and we work

00:11:55,020 --> 00:11:58,890
with puppet labs to figure out what high

00:11:57,330 --> 00:12:00,330
performers looked like we found that

00:11:58,890 --> 00:12:02,160
high performers don't really exist but

00:12:00,330 --> 00:12:04,260
they are massively outperforming they're

00:12:02,160 --> 00:12:06,150
not high performing peers we found that

00:12:04,260 --> 00:12:07,860
high performers are doing 30 times more

00:12:06,150 --> 00:12:09,210
frequent deployments so that's not just

00:12:07,860 --> 00:12:10,950
code deployments this environment

00:12:09,210 --> 00:12:13,290
appointments as well more importantly

00:12:10,950 --> 00:12:15,420
they can finish those deployments eight

00:12:13,290 --> 00:12:17,370
thousand times faster in other words how

00:12:15,420 --> 00:12:19,020
quickly can we go from code committed

00:12:17,370 --> 00:12:20,670
through the test cycle through

00:12:19,020 --> 00:12:22,680
deployment to successfully run in

00:12:20,670 --> 00:12:25,170
production we know that high performers

00:12:22,680 --> 00:12:27,810
you know can do this in minutes whereas

00:12:25,170 --> 00:12:29,850
lower performers it will take months

00:12:27,810 --> 00:12:31,500
right so that's you know minutes versus

00:12:29,850 --> 00:12:32,820
months and of course the Jenkins

00:12:31,500 --> 00:12:34,830
community is a critical part of making

00:12:32,820 --> 00:12:37,050
that happen so not only our high

00:12:34,830 --> 00:12:39,030
performers doing more work they have far

00:12:37,050 --> 00:12:40,620
better outcomes when high performers do

00:12:39,030 --> 00:12:43,230
deployments the twice as likely to

00:12:40,620 --> 00:12:45,750
succeed without causing a seven out of

00:12:43,230 --> 00:12:47,340
service impairment or security

00:12:45,750 --> 00:12:50,610
compliance failure and when something

00:12:47,340 --> 00:12:52,350
bad does happen right we can fix it 12

00:12:50,610 --> 00:12:54,990
times faster in other words Murphy

00:12:52,350 --> 00:12:56,100
Murphy's Law is a universal truth right

00:12:54,990 --> 00:12:57,480
so when something bad that's happened

00:12:56,100 --> 00:13:00,960
you know the mean time to restore

00:12:57,480 --> 00:13:04,140
service is 12 times faster so in our

00:13:00,960 --> 00:13:06,030
minds what made it so excited about the

00:13:04,140 --> 00:13:07,950
finding was that it gave us empirical

00:13:06,030 --> 00:13:09,810
evidence that you could be more agile

00:13:07,950 --> 00:13:11,430
and be more reliable at the same time it

00:13:09,810 --> 00:13:13,590
supported this notion that the only way

00:13:11,430 --> 00:13:15,600
you can get great reliability profiles

00:13:13,590 --> 00:13:17,400
is to do smaller deployments more

00:13:15,600 --> 00:13:18,960
frequently right because our experience

00:13:17,400 --> 00:13:20,490
has shown us right the larger deployment

00:13:18,960 --> 00:13:24,300
that we put into production the bigger

00:13:20,490 --> 00:13:26,310
the Creator it makes right so

00:13:24,300 --> 00:13:28,230
last year we found another finding that

00:13:26,310 --> 00:13:30,300
was that was even more astonishing was

00:13:28,230 --> 00:13:33,000
that not only did high performers have

00:13:30,300 --> 00:13:34,590
better IP performance right deployment

00:13:33,000 --> 00:13:36,030
frequency lead time change of censored

00:13:34,590 --> 00:13:38,100
maintain repair they had better

00:13:36,030 --> 00:13:39,540
organizational performance we found that

00:13:38,100 --> 00:13:41,010
the high performers are fifty percent

00:13:39,540 --> 00:13:43,080
more likely to exceed profitability

00:13:41,010 --> 00:13:45,420
market share and productivity goals and

00:13:43,080 --> 00:13:46,920
for those nearly 1,000 organization that

00:13:45,420 --> 00:13:48,180
gave us a stock ticker symbol we found

00:13:46,920 --> 00:13:50,070
that the high performers had fifty

00:13:48,180 --> 00:13:52,500
percent higher market cap growth over

00:13:50,070 --> 00:13:54,810
three years and by the way I will be the

00:13:52,500 --> 00:13:56,880
first to admit this is an absurd finding

00:13:54,810 --> 00:13:59,520
right in other words how is it possible

00:13:56,880 --> 00:14:01,050
that the way a server admin works or a

00:13:59,520 --> 00:14:03,600
developer works how could that possibly

00:14:01,050 --> 00:14:05,880
impact the bottom line let alone stock

00:14:03,600 --> 00:14:08,040
price and yet you know if we believe

00:14:05,880 --> 00:14:09,600
that increasingly how organizations

00:14:08,040 --> 00:14:12,300
acquire customers and create value for

00:14:09,600 --> 00:14:14,760
them is sometimes entirely reliant on

00:14:12,300 --> 00:14:15,870
the work that we do then maybe being a

00:14:14,760 --> 00:14:17,970
thousand times better than our

00:14:15,870 --> 00:14:22,050
competition actually creates winners at

00:14:17,970 --> 00:14:23,850
the expense of the losers so I think

00:14:22,050 --> 00:14:25,260
this gives us a lot of confidence that

00:14:23,850 --> 00:14:27,180
you know what the work that we're doing

00:14:25,260 --> 00:14:28,380
is important in a matter is not just to

00:14:27,180 --> 00:14:30,210
Deb testing operations but the

00:14:28,380 --> 00:14:31,800
organization to be serve as well by the

00:14:30,210 --> 00:14:35,630
way how am I doing here so far is this

00:14:31,800 --> 00:14:35,630
interesting thumbs up yeah

00:14:36,870 --> 00:14:42,540
whoo so for those of you who like the

00:14:41,040 --> 00:14:44,100
goal right the one book that I would

00:14:42,540 --> 00:14:45,630
recommend this book called the goal for

00:14:44,100 --> 00:14:48,360
if you like the Phoenix project you'll

00:14:45,630 --> 00:14:49,830
love the goal this book is an important

00:14:48,360 --> 00:14:51,750
book to me because there's no book that

00:14:49,830 --> 00:14:53,070
changed my professional career more than

00:14:51,750 --> 00:14:54,540
this book so for those of you who aren't

00:14:53,070 --> 00:14:57,120
familiar with it it was a book written

00:14:54,540 --> 00:15:00,060
in 1980s by a gentleman named dr. le

00:14:57,120 --> 00:15:02,100
hago goldratt and it's a novel about a

00:15:00,060 --> 00:15:03,960
plant manager who has to fix his costs

00:15:02,100 --> 00:15:05,760
and due date issues in 90 days otherwise

00:15:03,960 --> 00:15:07,350
i should have plant down and so this

00:15:05,760 --> 00:15:09,330
book has been integrated into almost

00:15:07,350 --> 00:15:11,580
every mainstream MBA curriculum and

00:15:09,330 --> 00:15:13,350
whenever this book 18 years ago actually

00:15:11,580 --> 00:15:15,000
what there was no doubt my mind we

00:15:13,350 --> 00:15:17,040
wanted to write this book for the work

00:15:15,000 --> 00:15:18,480
that we do right because as important as

00:15:17,040 --> 00:15:20,400
manufacturing with the 1980s that's

00:15:18,480 --> 00:15:22,500
exactly what the technology work is of

00:15:20,400 --> 00:15:24,350
this decade and so that's really what

00:15:22,500 --> 00:15:27,750
the Phoenix project is is the goal for

00:15:24,350 --> 00:15:29,130
you know that our generation and so

00:15:27,750 --> 00:15:30,779
there are many similarities between the

00:15:29,130 --> 00:15:33,180
goal and the Phoenix project one of them

00:15:30,779 --> 00:15:35,010
is if they both have a Yoda mr. Miyagi

00:15:33,180 --> 00:15:36,900
character yeah who speaks is very

00:15:35,010 --> 00:15:38,100
difficult to understand ways and you

00:15:36,900 --> 00:15:39,630
know the protagonist is left to try to

00:15:38,100 --> 00:15:41,520
figure out you know what what does it

00:15:39,630 --> 00:15:43,230
mean and so r EO to speaks in the

00:15:41,520 --> 00:15:45,120
language of the three ways which are

00:15:43,230 --> 00:15:47,070
intended to be the set of principles for

00:15:45,120 --> 00:15:49,410
which you can derive all the observed

00:15:47,070 --> 00:15:51,120
DevOps behaviors from and so the first

00:15:49,410 --> 00:15:54,300
way is all about flow as we go from left

00:15:51,120 --> 00:15:56,040
to right from dev to ops and why Devin

00:15:54,300 --> 00:15:57,330
ops because dev and ops are what's in

00:15:56,040 --> 00:16:00,540
between the organization that we serve

00:15:57,330 --> 00:16:02,160
and our customers and so although in the

00:16:00,540 --> 00:16:04,170
devil's community our favorite metric is

00:16:02,160 --> 00:16:05,910
probably deploys per day right we know

00:16:04,170 --> 00:16:08,640
that flicker did 10 deploys a day we

00:16:05,910 --> 00:16:10,890
know that Amazon does you know 136,000

00:16:08,640 --> 00:16:12,360
deploys day but in the manufacturing

00:16:10,890 --> 00:16:14,160
community in the lean community that is

00:16:12,360 --> 00:16:16,830
obviously not the favorite metric their

00:16:14,160 --> 00:16:18,240
favorite metric is a lead time right in

00:16:16,830 --> 00:16:19,950
fact I would go beyond a favorite metric

00:16:18,240 --> 00:16:21,630
this is their most cherished metric

00:16:19,950 --> 00:16:24,029
there's a deeply held belief that spans

00:16:21,630 --> 00:16:25,920
almost 50 years that lead time is the

00:16:24,029 --> 00:16:28,380
most accurate predictor of quality

00:16:25,920 --> 00:16:29,910
customer satisfaction and even employee

00:16:28,380 --> 00:16:31,470
happiness and what we found in our

00:16:29,910 --> 00:16:33,870
benchmarking is that that's absolutely

00:16:31,470 --> 00:16:35,160
true in the work that we do too and so

00:16:33,870 --> 00:16:36,990
they would measure lead time as how

00:16:35,160 --> 00:16:38,940
quickly can we go from raw materials at

00:16:36,990 --> 00:16:42,300
one of the plant to finish goods at the

00:16:38,940 --> 00:16:44,459
other and so we would measure lead time

00:16:42,300 --> 00:16:45,750
in the work that we do as specifically

00:16:44,459 --> 00:16:47,670
how quickly can we go from code

00:16:45,750 --> 00:16:48,930
committed through the test cycle through

00:16:47,670 --> 00:16:50,400
the deployment cycle to successfully

00:16:48,930 --> 00:16:50,940
running in production and we know that

00:16:50,400 --> 00:16:52,680
high

00:16:50,940 --> 00:16:54,780
ormus can do this in minutes but and

00:16:52,680 --> 00:16:56,910
lower performers will take months right

00:16:54,780 --> 00:16:58,650
so for those people who aren't fortunate

00:16:56,910 --> 00:17:00,510
enough to be high performers right what

00:16:58,650 --> 00:17:03,270
does well what do why does it take

00:17:00,510 --> 00:17:06,030
months is because when we initiate the

00:17:03,270 --> 00:17:08,760
deployment action right it takes all

00:17:06,030 --> 00:17:09,959
these actions right and it takes months

00:17:08,760 --> 00:17:11,760
because we can never get environments

00:17:09,959 --> 00:17:13,319
when we need it you know we it

00:17:11,760 --> 00:17:14,730
integration code integration takes a

00:17:13,319 --> 00:17:15,990
long time you know the environment I'll

00:17:14,730 --> 00:17:17,370
never configure correctly it takes two

00:17:15,990 --> 00:17:18,569
weeks to create the test data sets it

00:17:17,370 --> 00:17:20,220
takes four weeks execute Emanuel

00:17:18,569 --> 00:17:21,839
regression testing well then that you

00:17:20,220 --> 00:17:23,550
need to change approvals the security

00:17:21,839 --> 00:17:25,230
reviews lead architecture review boards

00:17:23,550 --> 00:17:27,449
right so no wonder it takes nine months

00:17:25,230 --> 00:17:29,520
so what's very interesting is that when

00:17:27,449 --> 00:17:32,190
you have long lead time measured in

00:17:29,520 --> 00:17:33,990
months not only is it just painful but

00:17:32,190 --> 00:17:36,900
you also have it's highly correlated

00:17:33,990 --> 00:17:39,540
with this extreme amounts of distrust

00:17:36,900 --> 00:17:41,130
between dad testing operations and

00:17:39,540 --> 00:17:42,390
forget about information security right

00:17:41,130 --> 00:17:44,160
in fact in the Phoenix project it

00:17:42,390 --> 00:17:46,710
transcends distrust it goes to a

00:17:44,160 --> 00:17:48,840
constant sense of betrayal between the

00:17:46,710 --> 00:17:50,340
various functions and so not only when

00:17:48,840 --> 00:17:52,890
you have long lead times as it measured

00:17:50,340 --> 00:17:55,620
correlated with distrust but also

00:17:52,890 --> 00:17:57,180
horrendous deployment outcomes and so

00:17:55,620 --> 00:17:59,490
when you look at the worst deployment

00:17:57,180 --> 00:18:02,400
errors over the last 20 years in my mind

00:17:59,490 --> 00:18:05,250
invoked toys-r-us 1999 amazon 2001

00:18:02,400 --> 00:18:07,380
linkedin 2009 healthcare gov I don't

00:18:05,250 --> 00:18:09,150
care what your politics are you know the

00:18:07,380 --> 00:18:11,130
point is when you have bad deployment

00:18:09,150 --> 00:18:13,380
outcomes in general it's highly

00:18:11,130 --> 00:18:15,120
correlated with very long lead times and

00:18:13,380 --> 00:18:17,040
one of the major contributing factors is

00:18:15,120 --> 00:18:19,530
at the first time that we actually got

00:18:17,040 --> 00:18:21,180
to see how the code actually performs in

00:18:19,530 --> 00:18:23,100
anything that even resembles the

00:18:21,180 --> 00:18:25,140
production environment is in the middle

00:18:23,100 --> 00:18:26,460
of the deployment okay so the first time

00:18:25,140 --> 00:18:28,530
that we actually got to see how all the

00:18:26,460 --> 00:18:30,210
things got glued together was in the

00:18:28,530 --> 00:18:32,010
middle of the deployment and so if you

00:18:30,210 --> 00:18:34,050
believe that then the countermeasure one

00:18:32,010 --> 00:18:35,910
of the obvious countermeasures will seem

00:18:34,050 --> 00:18:37,950
very intuitive right is that every high

00:18:35,910 --> 00:18:39,750
performer you know makes of environments

00:18:37,950 --> 00:18:41,280
available on demand right and so where

00:18:39,750 --> 00:18:42,780
they come from they come from some sort

00:18:41,280 --> 00:18:44,400
of build mechanism that builds a dev

00:18:42,780 --> 00:18:47,330
testing production environment at the

00:18:44,400 --> 00:18:49,800
same time and so one of the best

00:18:47,330 --> 00:18:52,290
capability best value of the community

00:18:49,800 --> 00:18:54,360
who benefits the most of this besides

00:18:52,290 --> 00:18:56,670
the end-user customers development why

00:18:54,360 --> 00:18:58,170
because now a development can work with

00:18:56,670 --> 00:18:59,460
production like environments even at the

00:18:58,170 --> 00:19:01,110
earliest stages of the development

00:18:59,460 --> 00:19:03,789
process so that takes a whole category

00:19:01,110 --> 00:19:07,479
of integration errors hail off table

00:19:03,789 --> 00:19:08,619
and you know even now six years later I

00:19:07,479 --> 00:19:12,429
still believe like one of the best

00:19:08,619 --> 00:19:14,259
examples of this how great great is is

00:19:12,429 --> 00:19:16,659
the facebook chat story this happened in

00:19:14,259 --> 00:19:17,859
2008 and so you know some people roll

00:19:16,659 --> 00:19:19,929
their eyes because they're like oh it's

00:19:17,859 --> 00:19:21,700
a chap server so I think what they don't

00:19:19,929 --> 00:19:23,859
understand is like chat is an order n

00:19:21,700 --> 00:19:26,169
cubed algorithm at scale right it was it

00:19:23,859 --> 00:19:27,519
was the this this initiative was the

00:19:26,169 --> 00:19:29,169
largest technical undertaking that

00:19:27,519 --> 00:19:30,609
Facebook had ever taken on it was the

00:19:29,169 --> 00:19:32,559
largest project team is the first use of

00:19:30,609 --> 00:19:34,450
her lying on the back end it took one

00:19:32,559 --> 00:19:35,950
year for them to complete and for me

00:19:34,450 --> 00:19:37,989
what's astonishing is how do they use

00:19:35,950 --> 00:19:39,309
that year so of course you know the

00:19:37,989 --> 00:19:41,080
facebook chat came every time that they

00:19:39,309 --> 00:19:42,429
would be checking code into trunk yeah

00:19:41,080 --> 00:19:44,710
that would be silently my grade in

00:19:42,429 --> 00:19:47,139
production but they also used at entire

00:19:44,710 --> 00:19:48,909
year as a time for testing every

00:19:47,139 --> 00:19:50,919
Facebook browser user session for that

00:19:48,909 --> 00:19:53,529
year was actually sending invisible test

00:19:50,919 --> 00:19:54,879
chat messages to the backend systems so

00:19:53,529 --> 00:19:57,009
they could see how the service would

00:19:54,879 --> 00:19:58,989
perform under production like loads and

00:19:57,009 --> 00:20:00,249
so when they renounce the functionality

00:19:58,989 --> 00:20:02,710
and released it to the market they want

00:20:00,249 --> 00:20:04,749
from 20 million 0 users the 70 million

00:20:02,710 --> 00:20:07,119
users overnight without a hitch right

00:20:04,749 --> 00:20:08,619
because why and how because they were

00:20:07,119 --> 00:20:10,629
testing and production you know for

00:20:08,619 --> 00:20:12,190
nearly a year by the way just to share

00:20:10,629 --> 00:20:14,379
with you where I came from right i mean

00:20:12,190 --> 00:20:16,840
if you had told me five years ago that

00:20:14,379 --> 00:20:18,849
testing in production was a good idea i

00:20:16,840 --> 00:20:20,769
would have said that's crap right

00:20:18,849 --> 00:20:22,929
testing in production i would have said

00:20:20,769 --> 00:20:24,789
is what bad developers do to ops people

00:20:22,929 --> 00:20:27,509
because they hate us right they're lazy

00:20:24,789 --> 00:20:30,159
they don't know how to plan right yeah

00:20:27,509 --> 00:20:32,289
of course that's not true right that's

00:20:30,159 --> 00:20:35,259
of my best friends and developers um yep

00:20:32,289 --> 00:20:36,639
it but for me the real game changer here

00:20:35,259 --> 00:20:39,970
is that you know now not only do

00:20:36,639 --> 00:20:41,590
business enable deployments basat at a

00:20:39,970 --> 00:20:43,029
time besides friday at midnight and

00:20:41,590 --> 00:20:44,440
operation i have to work all weekend to

00:20:43,029 --> 00:20:46,629
get things running we've now

00:20:44,440 --> 00:20:48,309
synchronized dev hours and ops hours

00:20:46,629 --> 00:20:50,169
that we can work the same hours right

00:20:48,309 --> 00:20:52,090
and to share with you why I think that's

00:20:50,169 --> 00:20:54,039
so important I wanna this cool comes

00:20:52,090 --> 00:20:55,570
from Nathan shimek he said as a lifelong

00:20:54,039 --> 00:20:58,779
ops practitioner I know that we need

00:20:55,570 --> 00:21:00,039
devops to make our work humane he said

00:20:58,779 --> 00:21:03,070
in my career I've worked on every

00:21:00,039 --> 00:21:05,200
holiday on my birthday on my spouse's

00:21:03,070 --> 00:21:08,649
birthday and even on the day my son was

00:21:05,200 --> 00:21:10,359
born so some of you may have friends

00:21:08,649 --> 00:21:12,369
who've been in this situation right out

00:21:10,359 --> 00:21:14,109
of a sense of duty or obligation or

00:21:12,369 --> 00:21:15,340
maybe they didn't have a choice but I

00:21:14,109 --> 00:21:16,419
think what the reason why is it feels so

00:21:15,340 --> 00:21:17,769
wrong to us is that we know

00:21:16,419 --> 00:21:20,499
there's a better way right of course

00:21:17,769 --> 00:21:21,970
everything that Jenkins enables helps

00:21:20,499 --> 00:21:24,279
make this happen so not just before ops

00:21:21,970 --> 00:21:27,639
it's also great for dev but ops is one

00:21:24,279 --> 00:21:28,779
of the best beneficiaries of this unless

00:21:27,639 --> 00:21:30,789
you think that you can only do this for

00:21:28,779 --> 00:21:32,049
open source software you know if you

00:21:30,789 --> 00:21:33,759
believe that then you should know about

00:21:32,049 --> 00:21:35,320
this work that Scott crew has been doing

00:21:33,759 --> 00:21:37,299
at CSG the one of the largest bill

00:21:35,320 --> 00:21:40,149
printing companies in the US so if you

00:21:37,299 --> 00:21:42,249
get a paper bill from a cable company it

00:21:40,149 --> 00:21:44,169
comes from a CSG plant and they did this

00:21:42,249 --> 00:21:46,779
experiment of doing daily deploys of

00:21:44,169 --> 00:21:48,549
their main application of sports bill

00:21:46,779 --> 00:21:51,340
printing is this 40-year old cobol

00:21:48,549 --> 00:21:53,350
mainframe app it involves 20 surrounded

00:21:51,340 --> 00:21:54,940
technology platforms and by doing daily

00:21:53,350 --> 00:21:56,559
deploys and doubling the release

00:21:54,940 --> 00:21:58,570
frequency from twice a year the four

00:21:56,559 --> 00:22:00,309
times a year they were able to reduce

00:21:58,570 --> 00:22:02,409
incident count by eighty eighty percent

00:22:00,309 --> 00:22:05,139
reduce meantime prepare by ninety five

00:22:02,409 --> 00:22:07,179
percent and lead time went down from two

00:22:05,139 --> 00:22:08,919
weeks to a day in other words where

00:22:07,179 --> 00:22:11,769
every time they would do a deploy in the

00:22:08,919 --> 00:22:14,320
old days like last year it would take 14

00:22:11,769 --> 00:22:16,269
days of a war room filled 24 by 7 of

00:22:14,320 --> 00:22:18,129
people borderlining on panic right

00:22:16,269 --> 00:22:19,779
trying to get things working to the

00:22:18,129 --> 00:22:23,169
deployment being done by the end of the

00:22:19,779 --> 00:22:25,029
first day right and instantly yeah so

00:22:23,169 --> 00:22:26,619
it's great for dev test operations but

00:22:25,029 --> 00:22:28,149
as Scott crew mentions you know gene you

00:22:26,619 --> 00:22:29,799
actually missed the biggest value that

00:22:28,149 --> 00:22:32,230
was created the customer can get the

00:22:29,799 --> 00:22:34,029
value in half the time so if you can do

00:22:32,230 --> 00:22:35,440
for a COBOL mainframe map if you get you

00:22:34,029 --> 00:22:36,700
know you get that has been around for 40

00:22:35,440 --> 00:22:39,580
years my claim is that we can do this

00:22:36,700 --> 00:22:41,499
for anything um let me share with you

00:22:39,580 --> 00:22:43,720
one other thing about why I think this

00:22:41,499 --> 00:22:46,119
capability is so important yeah to go

00:22:43,720 --> 00:22:47,799
back to the Amazon example like what how

00:22:46,119 --> 00:22:51,879
did they if we ask the question what

00:22:47,799 --> 00:22:53,710
changed between 2011 and 2014 what can

00:22:51,879 --> 00:22:56,559
explain this ever-increasing number of

00:22:53,710 --> 00:22:59,049
deploys per day the surprising answer is

00:22:56,559 --> 00:23:01,659
almost nothing changed really only one

00:22:59,049 --> 00:23:04,239
thing changed in those years and that's

00:23:01,659 --> 00:23:05,559
the number of developers right and the

00:23:04,239 --> 00:23:07,749
reason why I think this is so important

00:23:05,559 --> 00:23:09,820
is that so many of us we've been trained

00:23:07,749 --> 00:23:11,889
by fred brooks and the mythical man

00:23:09,820 --> 00:23:13,600
month right what we were taught and what

00:23:11,889 --> 00:23:15,429
barks pants are shown right is that if

00:23:13,600 --> 00:23:16,929
you double the number of developers you

00:23:15,429 --> 00:23:18,789
double the integration effort the

00:23:16,929 --> 00:23:19,960
testing effort and the deployment effort

00:23:18,789 --> 00:23:22,350
and that's why it takes twice the amount

00:23:19,960 --> 00:23:24,879
of time and so i think the reason why

00:23:22,350 --> 00:23:26,470
dev also important is that the deploy

00:23:24,879 --> 00:23:28,119
spurred a metric i think is hiding and

00:23:26,470 --> 00:23:30,290
even warmed up Orton metric which is

00:23:28,119 --> 00:23:32,840
deploys per day for developer

00:23:30,290 --> 00:23:34,640
my claim is my assertion would be what

00:23:32,840 --> 00:23:36,320
DevOps shows us is that under certain

00:23:34,640 --> 00:23:39,170
conditions we can actually scale

00:23:36,320 --> 00:23:40,580
developer productivity linearly with the

00:23:39,170 --> 00:23:41,660
number of developers with things I'm

00:23:40,580 --> 00:23:43,730
loosely coupled if you have automated

00:23:41,660 --> 00:23:47,360
testing and automate deploys now am I

00:23:43,730 --> 00:23:49,220
making sense yeah so the reason why our

00:23:47,360 --> 00:23:51,380
work is important is that this enables

00:23:49,220 --> 00:23:53,090
us to break the mythical man month and I

00:23:51,380 --> 00:23:55,910
think there is no technology leader who

00:23:53,090 --> 00:23:57,860
doesn't need to care about that so the

00:23:55,910 --> 00:23:59,840
way we do that is really the outcomes

00:23:57,860 --> 00:24:01,340
being we have a single repo for code and

00:23:59,840 --> 00:24:03,320
environments fact least we found the top

00:24:01,340 --> 00:24:05,510
predictor of performance was whether ops

00:24:03,320 --> 00:24:06,950
used version control right this was not

00:24:05,510 --> 00:24:08,210
not only the top predictive I key

00:24:06,950 --> 00:24:11,060
performance it was a top predictor of

00:24:08,210 --> 00:24:12,440
organizational performance this had more

00:24:11,060 --> 00:24:14,900
impact on performance than whether dev

00:24:12,440 --> 00:24:16,550
used version control why because where

00:24:14,900 --> 00:24:17,990
is the most amount of entropy where are

00:24:16,550 --> 00:24:20,510
the most number of configurable settings

00:24:17,990 --> 00:24:22,130
it's in the environment not the code so

00:24:20,510 --> 00:24:24,410
when you can put that in version control

00:24:22,130 --> 00:24:26,480
then that's what enables determinism the

00:24:24,410 --> 00:24:27,560
release process we have consistent data

00:24:26,480 --> 00:24:30,350
testing production environments they're

00:24:27,560 --> 00:24:32,180
all synchronized always let alone right

00:24:30,350 --> 00:24:34,430
before the deployment begins we have

00:24:32,180 --> 00:24:35,750
enabled develop as a check-in code daily

00:24:34,430 --> 00:24:37,910
which allows us to break the myth old

00:24:35,750 --> 00:24:39,620
man month and we start to free ourselves

00:24:37,910 --> 00:24:41,390
for this learned behavior that

00:24:39,620 --> 00:24:42,950
deployments hurt right so instead of

00:24:41,390 --> 00:24:44,630
doing deployments only at midnight on

00:24:42,950 --> 00:24:46,910
Friday working a weekend we can do them

00:24:44,630 --> 00:24:48,020
in the middle a day without fear and if

00:24:46,910 --> 00:24:49,460
we can do it in minutes instead of

00:24:48,020 --> 00:24:51,490
months suddenly we can do multiple

00:24:49,460 --> 00:25:00,050
deploy / day which is a hallmark of

00:24:51,490 --> 00:25:01,580
great DevOps outcomes so the first way

00:25:00,050 --> 00:25:03,440
was all about flow is girl from left to

00:25:01,580 --> 00:25:04,460
right in the valley stream the second

00:25:03,440 --> 00:25:06,590
way is all about the reciprocal flow

00:25:04,460 --> 00:25:08,330
feedback right and so the goal here is

00:25:06,590 --> 00:25:10,010
that whenever something goes wrong right

00:25:08,330 --> 00:25:11,750
especially in production how do you feed

00:25:10,010 --> 00:25:13,610
that to the earliest stages of the SCLC

00:25:11,750 --> 00:25:15,080
so we can ideally prevent bad things

00:25:13,610 --> 00:25:16,700
from happening again and if we can't

00:25:15,080 --> 00:25:18,920
prevent at least enable quicker

00:25:16,700 --> 00:25:20,960
detection in recovery and so this notion

00:25:18,920 --> 00:25:22,580
of you know shortening and amplifying

00:25:20,960 --> 00:25:25,130
feedback loops or is at the heart of any

00:25:22,580 --> 00:25:27,230
process improvement methodology but the

00:25:25,130 --> 00:25:30,290
paragon of this principle is without a

00:25:27,230 --> 00:25:31,430
doubt the Toyota andon cord and though I

00:25:30,290 --> 00:25:33,170
spent a week at the University of

00:25:31,430 --> 00:25:34,310
Michigan getting trained in charge of

00:25:33,170 --> 00:25:35,840
production process and we were on the

00:25:34,310 --> 00:25:38,450
plant floor I was stunned to find out

00:25:35,840 --> 00:25:40,130
that yeah it really is true on top of

00:25:38,450 --> 00:25:41,810
every work center modeled after a Toyota

00:25:40,130 --> 00:25:43,530
plant is this thing called the andon

00:25:41,810 --> 00:25:44,790
cord and everybody is

00:25:43,530 --> 00:25:47,220
rain was something goes wrong you pull

00:25:44,790 --> 00:25:48,660
the cord so whether so if the parts

00:25:47,220 --> 00:25:50,250
aren't there you pull the cord if the

00:25:48,660 --> 00:25:51,930
parts are defective you pull the cord

00:25:50,250 --> 00:25:53,670
even if the work takes longer than

00:25:51,930 --> 00:25:55,680
documented it was supposed to take 55

00:25:53,670 --> 00:25:57,420
seconds and it took a minute 20 you pull

00:25:55,680 --> 00:25:59,430
the cord so what happens when you pull

00:25:57,420 --> 00:26:01,590
the cord the entire semi line stops

00:25:59,430 --> 00:26:03,120
right truck stop coming at the end to

00:26:01,590 --> 00:26:05,160
enable people to swarm the problem and

00:26:03,120 --> 00:26:08,010
fix it and so one of the most

00:26:05,160 --> 00:26:10,350
astonishing things in fact him is like

00:26:08,010 --> 00:26:11,880
how many times the andon cord pulled is

00:26:10,350 --> 00:26:14,970
per day so when he has a question now

00:26:11,880 --> 00:26:16,320
how many typical andon cord polls is

00:26:14,970 --> 00:26:19,220
there in a typical Toyota plant per day

00:26:16,320 --> 00:26:24,570
and the answer is no maybe surprising

00:26:19,220 --> 00:26:25,620
it's 3500 times a day right and so you

00:26:24,570 --> 00:26:28,320
might imagine when I first read the

00:26:25,620 --> 00:26:30,180
statistic my reaction was these guys

00:26:28,320 --> 00:26:31,710
were absolute morons they have no idea

00:26:30,180 --> 00:26:33,660
what they're doing right and I say why

00:26:31,710 --> 00:26:35,430
only an idiot would pull the cord right

00:26:33,660 --> 00:26:36,420
because you know don't you it why would

00:26:35,430 --> 00:26:38,100
you be pulling at this may time today

00:26:36,420 --> 00:26:39,540
because every time you pull the core

00:26:38,100 --> 00:26:41,040
we're actually magnifying a local

00:26:39,540 --> 00:26:43,080
disturbance and magnifying it into a

00:26:41,040 --> 00:26:44,970
global disturbance right is when you ask

00:26:43,080 --> 00:26:46,350
the question why would they do that the

00:26:44,970 --> 00:26:47,610
answer is universal whether they're a

00:26:46,350 --> 00:26:48,990
regional vice president or worse than a

00:26:47,610 --> 00:26:50,880
supervisor or wherever they are on the

00:26:48,990 --> 00:26:52,650
plant floor they would say it's the only

00:26:50,880 --> 00:26:55,440
way that we could sustain a build tempo

00:26:52,650 --> 00:26:56,940
of 2,000 vehicles per day so essentially

00:26:55,440 --> 00:26:59,430
what they're verbalizing is that the if

00:26:56,940 --> 00:27:01,410
we don't stop the line swarm the problem

00:26:59,430 --> 00:27:03,030
fix it we're going to allow technical

00:27:01,410 --> 00:27:04,530
debt to accrue downstream where it's

00:27:03,030 --> 00:27:06,210
going to be far more difficult far more

00:27:04,530 --> 00:27:08,490
expensive or maybe even impossible to

00:27:06,210 --> 00:27:10,890
fix but there's actually I think an even

00:27:08,490 --> 00:27:13,020
more amazing answer tucked in this is

00:27:10,890 --> 00:27:14,850
that they're also saying if we don't fix

00:27:13,020 --> 00:27:17,700
it then and there we're gonna have the

00:27:14,850 --> 00:27:19,680
same problem 55 seconds later right and

00:27:17,700 --> 00:27:21,180
so that is exactly what the continuous

00:27:19,680 --> 00:27:23,400
integration could use test continuous

00:27:21,180 --> 00:27:25,080
delivery thing is in in the work that we

00:27:23,400 --> 00:27:26,700
do right we don't let people check in

00:27:25,080 --> 00:27:27,900
code on a broken build we don't let

00:27:26,700 --> 00:27:29,700
people check in more code after the

00:27:27,900 --> 00:27:31,980
break unit test right because they break

00:27:29,700 --> 00:27:33,990
more tests this is I think the paragon

00:27:31,980 --> 00:27:36,360
of this and the work that we do is

00:27:33,990 --> 00:27:37,920
Google they have 15,000 engineers as

00:27:36,360 --> 00:27:40,680
defined by dev test operations

00:27:37,920 --> 00:27:42,090
information security working on 4000

00:27:40,680 --> 00:27:43,860
simultaneous projects and by the way

00:27:42,090 --> 00:27:46,080
trust me there's no spreadsheet at

00:27:43,860 --> 00:27:48,360
Google with four thousand rows where the

00:27:46,080 --> 00:27:49,800
PMO surveilling four thousand projects

00:27:48,360 --> 00:27:51,650
they're working with a tremendous degree

00:27:49,800 --> 00:27:53,720
of autonomy and freedom right

00:27:51,650 --> 00:27:55,130
all heading towards a common goal one of

00:27:53,720 --> 00:27:57,350
the things that enables us is they have

00:27:55,130 --> 00:27:59,450
a common source code repo for all the

00:27:57,350 --> 00:28:01,040
Google properties right in one source

00:27:59,450 --> 00:28:03,620
code repo baby just show you the

00:28:01,040 --> 00:28:05,720
opposite I have a friend who you know a

00:28:03,620 --> 00:28:08,480
large bank he said out of that 80 there

00:28:05,720 --> 00:28:13,130
are 83 versions of Java struts we are

00:28:08,480 --> 00:28:14,690
running 81 of them bad for security but

00:28:13,130 --> 00:28:17,840
maybe even worse for development right

00:28:14,690 --> 00:28:19,970
and operations so that's what about so

00:28:17,840 --> 00:28:24,260
at Google they have one library of each

00:28:19,970 --> 00:28:26,630
version allowed right so 5,500 code

00:28:24,260 --> 00:28:28,550
commits per day 75 million test case is

00:28:26,630 --> 00:28:30,110
being run daily and so you might roll

00:28:28,550 --> 00:28:31,730
your eyes and say oh that's what you do

00:28:30,110 --> 00:28:33,650
when you have you know 4 million servers

00:28:31,730 --> 00:28:35,210
right now but that's not the point the

00:28:33,650 --> 00:28:37,820
real point is why would they bother

00:28:35,210 --> 00:28:40,720
running 75 million test cases let alone

00:28:37,820 --> 00:28:44,810
writing them and I think the answer is

00:28:40,720 --> 00:28:46,100
almost poetic in profound Aaron Masseria

00:28:44,810 --> 00:28:48,290
part of the deb productivity group at

00:28:46,100 --> 00:28:51,110
google says it is only through automated

00:28:48,290 --> 00:28:53,570
testing that we can transform fear into

00:28:51,110 --> 00:28:55,340
boredom what she said is imagine the

00:28:53,570 --> 00:28:57,020
paralyzing amount of fear that any new

00:28:55,340 --> 00:28:58,700
engineer has a google knowing that any

00:28:57,020 --> 00:29:00,530
time they commit code they could take

00:28:58,700 --> 00:29:02,420
down every google property all at the

00:29:00,530 --> 00:29:04,040
same time which apparently has happened

00:29:02,420 --> 00:29:06,500
right the only way that you can actually

00:29:04,040 --> 00:29:08,660
get people to hit enter is to show them

00:29:06,500 --> 00:29:10,070
that is safety that underneath them that

00:29:08,660 --> 00:29:11,750
will catch errors long before it gets

00:29:10,070 --> 00:29:13,640
into production and if it does kind of

00:29:11,750 --> 00:29:15,230
production customer impact right we can

00:29:13,640 --> 00:29:18,230
actually detect it and correct it

00:29:15,230 --> 00:29:19,640
quickly so that's one pattern the second

00:29:18,230 --> 00:29:21,620
pattern is this notion of delgros been

00:29:19,640 --> 00:29:23,090
put on page rotation one of my favorite

00:29:21,620 --> 00:29:24,800
quotes come from patrick Lightbody said

00:29:23,090 --> 00:29:30,250
we found that when woke up developers at

00:29:24,800 --> 00:29:32,480
2am defects got fixed faster than ever

00:29:30,250 --> 00:29:34,040
and verna Vogel's will say it even more

00:29:32,480 --> 00:29:36,260
succinctly right is that if you helped

00:29:34,040 --> 00:29:38,000
build it you must help run it so I think

00:29:36,260 --> 00:29:39,680
they put their finger on is that in

00:29:38,000 --> 00:29:40,820
order to have shared goals in the entire

00:29:39,680 --> 00:29:43,580
value stream you have to have some

00:29:40,820 --> 00:29:45,770
element of shared pain and I am very

00:29:43,580 --> 00:29:47,480
aware that jackasses like me putting up

00:29:45,770 --> 00:29:49,100
slides like this is actually what caught

00:29:47,480 --> 00:29:50,960
that's causing developers to actually

00:29:49,100 --> 00:29:53,690
try to sabotage continuous delivery

00:29:50,960 --> 00:29:56,320
project sabotage DevOps projects because

00:29:53,690 --> 00:29:59,090
we'd not become developers to wear pager

00:29:56,320 --> 00:30:00,320
right pagers are lower those ops people

00:29:59,090 --> 00:30:02,540
right you know the reason why they

00:30:00,320 --> 00:30:03,299
became obstacles there like pagers right

00:30:02,540 --> 00:30:05,549
and I think that

00:30:03,299 --> 00:30:08,399
is a understandable narrative but maybe

00:30:05,549 --> 00:30:10,169
not the best narrative I think a more

00:30:08,399 --> 00:30:11,850
appealing narrative the one that I find

00:30:10,169 --> 00:30:14,429
more compelling comes from Tim tischler

00:30:11,850 --> 00:30:16,139
he's the he had the DevOps initiative at

00:30:14,429 --> 00:30:17,999
Nike and he said as a career-long

00:30:16,139 --> 00:30:19,679
developer does never been a more

00:30:17,999 --> 00:30:21,690
satisfying point in my career than when

00:30:19,679 --> 00:30:24,149
I got to write the code push it into

00:30:21,690 --> 00:30:26,070
production myself see the smiling happy

00:30:24,149 --> 00:30:27,480
face of customers when it worked and see

00:30:26,070 --> 00:30:29,399
their angry shaking fist when it didn't

00:30:27,480 --> 00:30:31,139
work and I when I could fix it myself I

00:30:29,399 --> 00:30:32,879
didn't have to open a ticket I didn't

00:30:31,139 --> 00:30:34,679
have to wait a day right not only could

00:30:32,879 --> 00:30:36,450
I have done it faster but I would have

00:30:34,679 --> 00:30:37,980
learned something right so that I could

00:30:36,450 --> 00:30:40,080
prevent from it's from happen again in

00:30:37,980 --> 00:30:42,840
the future and i think the inability to

00:30:40,080 --> 00:30:44,279
do that over the last 10 years have

00:30:42,840 --> 00:30:45,720
taken a lot of the joy out of

00:30:44,279 --> 00:30:47,639
development work it's my sincere belief

00:30:45,720 --> 00:30:49,739
that these type of day about patterns is

00:30:47,639 --> 00:30:51,899
actually enables us to bring that joy

00:30:49,739 --> 00:30:55,289
back by the way does that resonate with

00:30:51,899 --> 00:31:01,249
you yeah so great for dops but also

00:30:55,289 --> 00:31:03,600
great for dads so there's one pattern

00:31:01,249 --> 00:31:05,129
here's another pattern pervasive

00:31:03,600 --> 00:31:06,779
production telemetry so this is of

00:31:05,129 --> 00:31:07,499
course the famous Joan alspaugh right

00:31:06,779 --> 00:31:09,090
from the Ellis while Hammond

00:31:07,499 --> 00:31:12,210
presentation he's now the head of tech

00:31:09,090 --> 00:31:14,039
ops at Etsy and behind him is this you

00:31:12,210 --> 00:31:15,690
know paint now the wall of glass right

00:31:14,039 --> 00:31:17,580
showing the you know a sample of the

00:31:15,690 --> 00:31:20,249
200,000 metrics that are tracking in

00:31:17,580 --> 00:31:22,440
production and there is a deep culture

00:31:20,249 --> 00:31:23,879
at etsy that says you know anyone who

00:31:22,440 --> 00:31:26,789
puts anything into production whether

00:31:23,879 --> 00:31:28,619
this code infrastructure information

00:31:26,789 --> 00:31:29,999
security monitoring if it's important if

00:31:28,619 --> 00:31:31,499
you put into production you have to

00:31:29,999 --> 00:31:33,539
create telemetry around it so we can

00:31:31,499 --> 00:31:35,669
actually see how it behaves you know in

00:31:33,539 --> 00:31:37,049
the production environment and we should

00:31:35,669 --> 00:31:39,059
be able to do this as part of our daily

00:31:37,049 --> 00:31:40,470
work right creating telemetry shouldn't

00:31:39,059 --> 00:31:43,499
have to feel like making a database

00:31:40,470 --> 00:31:45,509
schema change and i think this uh you

00:31:43,499 --> 00:31:47,309
know this belief has driven and explains

00:31:45,509 --> 00:31:49,409
why they've invested so much work into

00:31:47,309 --> 00:31:50,460
the stats the graphite libraries right

00:31:49,409 --> 00:31:52,499
the idea that you can write one line of

00:31:50,460 --> 00:31:54,869
code and get your two hundred thousands

00:31:52,499 --> 00:31:56,999
and first metric and what is amazing to

00:31:54,869 --> 00:31:58,980
me right now is you know that you know

00:31:56,999 --> 00:32:00,299
so in this graph you know overlaid on to

00:31:58,980 --> 00:32:02,129
the number of logins on successful log

00:32:00,299 --> 00:32:03,359
without the vertical lines right so they

00:32:02,129 --> 00:32:05,639
call this the vertical line technology

00:32:03,359 --> 00:32:08,309
that represents a deployment and of

00:32:05,639 --> 00:32:10,230
course maybe my being surprised is that

00:32:08,309 --> 00:32:12,539
no the person doing a deployment whether

00:32:10,230 --> 00:32:13,710
the dev tester operations will go home

00:32:12,539 --> 00:32:14,840
before making sure that they haven't

00:32:13,710 --> 00:32:16,820
flatlined their match

00:32:14,840 --> 00:32:18,560
or maybe more importantly they haven't

00:32:16,820 --> 00:32:20,450
flatline everyone else's metric right

00:32:18,560 --> 00:32:21,830
because we're not done until the

00:32:20,450 --> 00:32:23,750
features actually operating in

00:32:21,830 --> 00:32:25,910
production as designed by the way just a

00:32:23,750 --> 00:32:27,620
little factoid so just humble and I we

00:32:25,910 --> 00:32:30,140
had a bet two years ago about who would

00:32:27,620 --> 00:32:32,180
have better outcomes when devs deploy

00:32:30,140 --> 00:32:34,760
which is jezuz assertion or what ops

00:32:32,180 --> 00:32:37,640
deploys my assertion right so we found

00:32:34,760 --> 00:32:40,730
in our benchmark of 6,000 respondents

00:32:37,640 --> 00:32:42,290
that it turns out it was the same could

00:32:40,730 --> 00:32:44,440
take the population where devs deploy an

00:32:42,290 --> 00:32:46,880
obstacle the change success rate was

00:32:44,440 --> 00:32:48,770
statistically insignificant so

00:32:46,880 --> 00:32:50,510
apparently what this means is that it

00:32:48,770 --> 00:32:52,610
doesn't matter who deploys as long as we

00:32:50,510 --> 00:32:54,710
care about the outcomes right which is

00:32:52,610 --> 00:32:57,530
you know something interesting to me and

00:32:54,710 --> 00:33:00,350
so that sort of this cultural artifact

00:32:57,530 --> 00:33:05,420
you can see in every high performer one

00:33:00,350 --> 00:33:08,120
last another pattern is how DevOps and

00:33:05,420 --> 00:33:09,860
things like Jenkins enable the best

00:33:08,120 --> 00:33:12,860
integration of information security into

00:33:09,860 --> 00:33:14,510
our daily work so at DevOps at Capital

00:33:12,860 --> 00:33:16,100
One they don't call it DevOps they call

00:33:14,510 --> 00:33:19,310
DevOps sec you're essentially

00:33:16,100 --> 00:33:21,440
integrating security into every stage of

00:33:19,310 --> 00:33:23,210
the SPLC so the preventive controls live

00:33:21,440 --> 00:33:24,800
in a shared source code repo so if you

00:33:23,210 --> 00:33:28,460
need to factor auth or you need to have

00:33:24,800 --> 00:33:30,050
IP tables or SSL right if you use those

00:33:28,460 --> 00:33:32,390
libraries they're already pre blessed by

00:33:30,050 --> 00:33:34,520
security running alongside the unit

00:33:32,390 --> 00:33:36,620
testing is static code analysis right so

00:33:34,520 --> 00:33:38,120
we can give developers fast feedback on

00:33:36,620 --> 00:33:39,800
their work right long before it goes

00:33:38,120 --> 00:33:41,630
into production environment and running

00:33:39,800 --> 00:33:43,520
alongside the production monitoring you

00:33:41,630 --> 00:33:44,900
know our dynamic testing tools right and

00:33:43,520 --> 00:33:46,370
so these are all ways that we can

00:33:44,900 --> 00:33:48,290
actually give you know make our code

00:33:46,370 --> 00:33:50,990
more secure code and the environment

00:33:48,290 --> 00:33:52,880
secure so I know this is why you know

00:33:50,990 --> 00:33:54,080
when you DevOps starts freaking out

00:33:52,880 --> 00:33:55,070
security people you should show them

00:33:54,080 --> 00:33:56,830
that this is actually what we've been

00:33:55,070 --> 00:33:58,790
looking for for the last two decades

00:33:56,830 --> 00:34:00,140
there's one other pattern I want to

00:33:58,790 --> 00:34:03,050
share with you around the second way

00:34:00,140 --> 00:34:05,210
which is culture this is called the

00:34:03,050 --> 00:34:07,280
organizational this is called a westrom

00:34:05,210 --> 00:34:09,800
organizational typology model so what

00:34:07,280 --> 00:34:11,540
dr. west from filed 11 years ago was the

00:34:09,800 --> 00:34:14,240
top predictor of patient safety and

00:34:11,540 --> 00:34:15,620
health care organizations was culture we

00:34:14,240 --> 00:34:17,210
found that this was the third highest

00:34:15,620 --> 00:34:19,070
predictor performance in the work that

00:34:17,210 --> 00:34:21,560
we do behind version control and

00:34:19,070 --> 00:34:23,570
automated testing so dr. Westman said

00:34:21,560 --> 00:34:25,280
there are three classes and the very

00:34:23,570 --> 00:34:26,620
left hand side you have low trust

00:34:25,280 --> 00:34:29,170
pathological organization

00:34:26,620 --> 00:34:31,360
we're messengers of bad news are shot we

00:34:29,170 --> 00:34:33,220
discourage purging between teams so I

00:34:31,360 --> 00:34:35,470
could be patient intake ER pharmacy

00:34:33,220 --> 00:34:36,820
outpatient whatever the art world it's

00:34:35,470 --> 00:34:40,120
Deb test operation information security

00:34:36,820 --> 00:34:42,340
we cover failures why because messengers

00:34:40,120 --> 00:34:44,380
of bad news are shot and novel ideas are

00:34:42,340 --> 00:34:46,330
crushed right in the middle we have

00:34:44,380 --> 00:34:48,370
bureaucratic organizations or sometimes

00:34:46,330 --> 00:34:50,530
it's called merciful organizations or

00:34:48,370 --> 00:34:52,360
just organizations and then on the

00:34:50,530 --> 00:34:55,150
right-hand side we have generative I

00:34:52,360 --> 00:34:57,790
trust cultures where we train messengers

00:34:55,150 --> 00:35:00,190
to tell bad news we train engineers to

00:34:57,790 --> 00:35:01,030
lead blameless post-mortems so that we

00:35:00,190 --> 00:35:02,650
can friend it from happening again

00:35:01,030 --> 00:35:04,720
instantly it's one of the best ways to

00:35:02,650 --> 00:35:06,250
bootstrap organizational learning we

00:35:04,720 --> 00:35:07,870
share responsibilities we know that

00:35:06,250 --> 00:35:09,340
operation we know that uptime is just

00:35:07,870 --> 00:35:10,540
not opposites job we know that

00:35:09,340 --> 00:35:12,640
information security is not the

00:35:10,540 --> 00:35:14,020
Securities job right is all our jobs and

00:35:12,640 --> 00:35:16,720
that's why we bridge between teams

00:35:14,020 --> 00:35:19,660
failure causes has a genuine inquiry and

00:35:16,720 --> 00:35:21,520
we are open to any novel idea why

00:35:19,660 --> 00:35:23,020
because if the problems are trying to

00:35:21,520 --> 00:35:25,870
solve our easy to fix we would have fix

00:35:23,020 --> 00:35:29,440
them already and so how many people here

00:35:25,870 --> 00:35:31,270
have been in a situation where they

00:35:29,440 --> 00:35:34,930
worked in a generative organization any

00:35:31,270 --> 00:35:36,310
raise your hand sounds interesting so

00:35:34,930 --> 00:35:37,720
what's interested why do I find that

00:35:36,310 --> 00:35:40,570
interesting because i think it 10 years

00:35:37,720 --> 00:35:42,790
right when we were all doing working in

00:35:40,570 --> 00:35:44,470
a DevOps way everybody will be raising

00:35:42,790 --> 00:35:47,050
your hand right and I think how we get

00:35:44,470 --> 00:35:48,490
from wherever we are to sanara see where

00:35:47,050 --> 00:35:50,830
you have high trust is really one of the

00:35:48,490 --> 00:35:54,580
grandest management challenges of our

00:35:50,830 --> 00:35:56,140
generation so I want to share with you

00:35:54,580 --> 00:35:57,970
maybe how that impacts something that

00:35:56,140 --> 00:35:59,710
has been near and dear to me but because

00:35:57,970 --> 00:36:02,080
I was trained as an auditor one of the

00:35:59,710 --> 00:36:03,610
ways that implication of this sort of

00:36:02,080 --> 00:36:05,920
very interesting implications to change

00:36:03,610 --> 00:36:07,360
control right so what does a modern

00:36:05,920 --> 00:36:09,130
chain control practice look like if it

00:36:07,360 --> 00:36:10,780
doesn't look like approval if it doesn't

00:36:09,130 --> 00:36:12,370
look like putting in the 60 word essay

00:36:10,780 --> 00:36:14,290
contest and you know you're getting

00:36:12,370 --> 00:36:16,990
someone to you know approve it who's

00:36:14,290 --> 00:36:19,390
three levels up John also related the

00:36:16,990 --> 00:36:22,030
story to me about a new engineer at etsy

00:36:19,390 --> 00:36:26,140
ask him is it okay to make this change

00:36:22,030 --> 00:36:28,960
to which John also responded I don't

00:36:26,140 --> 00:36:30,730
know is it why I find that so

00:36:28,960 --> 00:36:33,100
interesting is that John also refused to

00:36:30,730 --> 00:36:34,900
own any of the responsibility about the

00:36:33,100 --> 00:36:38,660
quality of the change right he put that

00:36:34,900 --> 00:36:40,970
squirrely back on the implementer so his

00:36:38,660 --> 00:36:42,890
that he asked the changeable mayor was

00:36:40,970 --> 00:36:44,930
you know did you get someone else to

00:36:42,890 --> 00:36:46,100
review your change do you know who the

00:36:44,930 --> 00:36:49,460
absolute best person in the organization

00:36:46,100 --> 00:36:51,140
is to ask for changes its category did

00:36:49,460 --> 00:36:52,400
you do everything that you could ensure

00:36:51,140 --> 00:36:54,130
that this thing will go into production

00:36:52,400 --> 00:36:57,380
and operate is designed and if you did

00:36:54,130 --> 00:37:00,380
make the change right and I think that

00:36:57,380 --> 00:37:01,910
is what modern change control looks like

00:37:00,380 --> 00:37:03,800
it's not about approval processes it's

00:37:01,910 --> 00:37:05,390
about peer review of not just code

00:37:03,800 --> 00:37:07,340
changes but environment changes as well

00:37:05,390 --> 00:37:09,440
in fact we found that the biggest contra

00:37:07,340 --> 00:37:12,050
indicator performance was how much

00:37:09,440 --> 00:37:13,580
relied on external approval of changes

00:37:12,050 --> 00:37:16,040
the more we relied on that all

00:37:13,580 --> 00:37:17,630
performance measures went down we also

00:37:16,040 --> 00:37:18,830
are not relying just on peer review

00:37:17,630 --> 00:37:21,200
right we of course have the safety net

00:37:18,830 --> 00:37:22,700
of automated testing that also enables

00:37:21,200 --> 00:37:24,560
smaller teams to work with tremendous

00:37:22,700 --> 00:37:27,140
amount of autonomy and freedom so small

00:37:24,560 --> 00:37:28,790
failures you know cause small fairies

00:37:27,140 --> 00:37:29,930
don't cause global catastrophic errors

00:37:28,790 --> 00:37:31,580
and that's what allows us to break the

00:37:29,930 --> 00:37:33,500
mythical man month we also have

00:37:31,580 --> 00:37:35,270
effective production monitoring that

00:37:33,500 --> 00:37:38,810
allows us to detect errors and fix them

00:37:35,270 --> 00:37:40,940
quickly combine that with a high trust

00:37:38,810 --> 00:37:42,620
culture and you find that all groups are

00:37:40,940 --> 00:37:44,690
communicating coordinating better and

00:37:42,620 --> 00:37:46,250
ultimately that leads to everyone being

00:37:44,690 --> 00:37:49,370
able to get more work done which is what

00:37:46,250 --> 00:37:51,350
we all care about so the first way is

00:37:49,370 --> 00:37:53,330
flow left right the second way is

00:37:51,350 --> 00:37:54,890
feedback right left in the third way is

00:37:53,330 --> 00:37:56,570
all about fostering this culture of

00:37:54,890 --> 00:38:00,080
continued experimentation risk-taking

00:37:56,570 --> 00:38:03,140
and learning and in our community I

00:38:00,080 --> 00:38:06,140
still think the best philosopher who

00:38:03,140 --> 00:38:09,020
embodies that this is adan Cockroft was

00:38:06,140 --> 00:38:11,930
actually famous for many things he like

00:38:09,020 --> 00:38:12,860
kk yeah it was at Sun Microsystems he

00:38:11,930 --> 00:38:14,390
was with the first distinguished

00:38:12,860 --> 00:38:15,770
engineer to come out of the professional

00:38:14,390 --> 00:38:17,030
sales professional service and sales

00:38:15,770 --> 00:38:19,010
ranks he was part of the ebay

00:38:17,030 --> 00:38:21,440
transformation in the early night in the

00:38:19,010 --> 00:38:23,840
early 2000s he's and he was also part of

00:38:21,440 --> 00:38:25,610
the transformation that transitioned the

00:38:23,840 --> 00:38:28,970
video delivery infrastructure on netflix

00:38:25,610 --> 00:38:30,740
in 2009 that was a j2ee app monolithic

00:38:28,970 --> 00:38:32,120
that ran in the data center right now

00:38:30,740 --> 00:38:34,220
it's obviously running entirely in the

00:38:32,120 --> 00:38:36,230
cloud and the philosophy that drove this

00:38:34,220 --> 00:38:38,030
was this notion of doing painful things

00:38:36,230 --> 00:38:39,500
more frequently right and so even though

00:38:38,030 --> 00:38:41,120
we make life hell for developers at

00:38:39,500 --> 00:38:43,730
times the response that we get back you

00:38:41,120 --> 00:38:45,500
would say is thank you thank you so much

00:38:43,730 --> 00:38:48,200
because we know doing this will make our

00:38:45,500 --> 00:38:49,880
life better in the future and even to

00:38:48,200 --> 00:38:51,800
this day I think the best evidence

00:38:49,880 --> 00:38:54,290
the effectiveness of this philosophy and

00:38:51,800 --> 00:38:56,930
practice is the famous ec2 outage that

00:38:54,290 --> 00:38:58,610
happen in 2011 the first global ec2

00:38:56,930 --> 00:39:00,980
failure where all of aw East went down

00:38:58,610 --> 00:39:02,450
and right everybody went down one very

00:39:00,980 --> 00:39:04,700
curious exception right and out of

00:39:02,450 --> 00:39:06,530
course is Netflix by the way for those

00:39:04,700 --> 00:39:07,910
of you who remember that right the

00:39:06,530 --> 00:39:09,560
leading theory when everyone was asking

00:39:07,910 --> 00:39:10,880
what is Netflix doing differently that

00:39:09,560 --> 00:39:14,620
caused such a different outcome for them

00:39:10,880 --> 00:39:16,970
the leading theory was it's obvious

00:39:14,620 --> 00:39:18,890
Netflix is Amazon the biggest customer

00:39:16,970 --> 00:39:23,420
clearly they were given a special flag

00:39:18,890 --> 00:39:24,950
called do not crash okay of course no

00:39:23,420 --> 00:39:26,720
the real answer was revealed some weeks

00:39:24,950 --> 00:39:29,090
later in this seminal blog post that

00:39:26,720 --> 00:39:31,100
essentially revealed two decisions they

00:39:29,090 --> 00:39:32,360
made very early on right the first was

00:39:31,100 --> 00:39:33,980
we can have no single point of failure

00:39:32,360 --> 00:39:36,170
risk of which the largest might be

00:39:33,980 --> 00:39:38,360
amazon they said amazon will never be

00:39:36,170 --> 00:39:40,310
there when we need the most and secondly

00:39:38,360 --> 00:39:42,080
they said in order for us to survive

00:39:40,310 --> 00:39:44,120
failure we're going to have to fail all

00:39:42,080 --> 00:39:46,610
the time and that's when they of course

00:39:44,120 --> 00:39:48,080
unveiled a famous chaos monkey right

00:39:46,610 --> 00:39:49,610
this audacious piece of code that runs

00:39:48,080 --> 00:39:51,890
at every production server randomly

00:39:49,610 --> 00:39:53,720
killing processes are randomly killing

00:39:51,890 --> 00:39:55,490
into our compute instances and you can

00:39:53,720 --> 00:39:57,110
imagine how quickly you know their

00:39:55,490 --> 00:39:59,180
environment became more resilient you

00:39:57,110 --> 00:40:00,530
know once we started doing that and so

00:39:59,180 --> 00:40:01,730
the two things i really want to share

00:40:00,530 --> 00:40:03,170
with you is the two things that adrian

00:40:01,730 --> 00:40:05,300
rarely talks about me you should know

00:40:03,170 --> 00:40:07,100
because it's important the first is

00:40:05,300 --> 00:40:08,960
before one runs chaos monkey in

00:40:07,100 --> 00:40:14,540
production you first run it in tests

00:40:08,960 --> 00:40:20,300
right to is did you know for that on

00:40:14,540 --> 00:40:23,030
that day April point first 2011 Netflix

00:40:20,300 --> 00:40:24,680
went six hours into that ec2 outage

00:40:23,030 --> 00:40:26,420
before declaring a sub one incident in

00:40:24,680 --> 00:40:28,040
other words every hour that would

00:40:26,420 --> 00:40:30,260
convene and say should we declare sub 1

00:40:28,040 --> 00:40:32,780
and their conclusion they always came to

00:40:30,260 --> 00:40:35,540
you was no it will probably come back

00:40:32,780 --> 00:40:37,880
and usually does only six hours into the

00:40:35,540 --> 00:40:40,370
ec2 outage or they say maybe it's not

00:40:37,880 --> 00:40:42,320
coming back maybe we should activate

00:40:40,370 --> 00:40:43,910
some business continuity procedures just

00:40:42,320 --> 00:40:44,990
in case if it didn't the reason why I

00:40:43,910 --> 00:40:48,200
think that's important is that in the

00:40:44,990 --> 00:40:50,360
sea of chaos calamity and confusion that

00:40:48,200 --> 00:40:52,130
was that outage right Netflix remain

00:40:50,360 --> 00:40:54,830
this island of calm and I think that is

00:40:52,130 --> 00:40:56,360
the reward we get when we feared lessly

00:40:54,830 --> 00:40:58,280
inject false into production environment

00:40:56,360 --> 00:40:59,240
if you care about availability right we

00:40:58,280 --> 00:41:01,250
have to be able to test out of

00:40:59,240 --> 00:41:03,620
production and instantly this happened

00:41:01,250 --> 00:41:06,110
again last year in the great amazon

00:41:03,620 --> 00:41:07,610
food of 2014 when you know us huge

00:41:06,110 --> 00:41:09,970
portion of the Amazon server fleet was

00:41:07,610 --> 00:41:13,250
rebooted to apply the securities n patch

00:41:09,970 --> 00:41:15,860
right christos consett said when we got

00:41:13,250 --> 00:41:18,740
the news of the emergency ec2 reboots

00:41:15,860 --> 00:41:20,150
our jaws dropped especially around their

00:41:18,740 --> 00:41:23,300
production database nodes running in

00:41:20,150 --> 00:41:25,790
Cassandra right I felt physically ill he

00:41:23,300 --> 00:41:27,260
said but then he goes on to say then I

00:41:25,790 --> 00:41:30,860
realized we've been running chaos monkey

00:41:27,260 --> 00:41:33,110
and production for years bring it on so

00:41:30,860 --> 00:41:36,010
what was the outcome the outcome was

00:41:33,110 --> 00:41:39,680
other 2700 production Cassandra nodes

00:41:36,010 --> 00:41:42,020
218 we rebooted and 22 didn't even come

00:41:39,680 --> 00:41:44,360
back up again they bricked 22 production

00:41:42,020 --> 00:41:46,760
database notes right I feel physically

00:41:44,360 --> 00:41:49,760
ill just thinking about that and yet no

00:41:46,760 --> 00:41:51,200
customer downtime was created so I

00:41:49,760 --> 00:41:52,880
actually learned a couple months ago

00:41:51,200 --> 00:41:55,370
that apparently not only were they not

00:41:52,880 --> 00:41:57,230
on call they weren't even in the office

00:41:55,370 --> 00:41:59,150
they were all in hollywood california at

00:41:57,230 --> 00:42:02,450
a party celebrating the acquisition of

00:41:59,150 --> 00:42:04,730
their one millionth customer so i think

00:42:02,450 --> 00:42:06,020
that's a reward of fearless lee and jack

00:42:04,730 --> 00:42:08,990
me faltan into the production

00:42:06,020 --> 00:42:11,120
environment one last practice that i

00:42:08,990 --> 00:42:12,650
want to leave with you before talking

00:42:11,120 --> 00:42:15,440
about large complex organizations is

00:42:12,650 --> 00:42:17,090
this Marty Kagan he's actually trained a

00:42:15,440 --> 00:42:18,500
generation of product owners and product

00:42:17,090 --> 00:42:20,360
managers he was the VP of Product

00:42:18,500 --> 00:42:22,220
Management ebay and he said the most

00:42:20,360 --> 00:42:24,080
important thing I teach product owners

00:42:22,220 --> 00:42:26,240
is that they must take twenty percent of

00:42:24,080 --> 00:42:28,400
all Devon op cycles off the table right

00:42:26,240 --> 00:42:30,200
it's not there for you to spend those

00:42:28,400 --> 00:42:32,750
cycles are for dev and ops to use

00:42:30,200 --> 00:42:34,910
however they best see fit to fix primary

00:42:32,750 --> 00:42:37,850
areas of code to implement automation

00:42:34,910 --> 00:42:40,880
you know just react tect and refactor to

00:42:37,850 --> 00:42:42,770
allow for better work practices and I

00:42:40,880 --> 00:42:44,630
think that's important because this

00:42:42,770 --> 00:42:46,100
enables us to pay down technical debt

00:42:44,630 --> 00:42:47,450
right to focus on the non-functional

00:42:46,100 --> 00:42:49,520
requirements to get you know ever

00:42:47,450 --> 00:42:50,780
greater levels of automation and so if

00:42:49,520 --> 00:42:52,190
we can reserve that twenty percent

00:42:50,780 --> 00:42:53,570
capacity to pay down technical debt

00:42:52,190 --> 00:42:55,880
that's how would we go from a situation

00:42:53,570 --> 00:42:58,190
that looks like this that always turns

00:42:55,880 --> 00:43:00,020
into this you know if we can mobilize a

00:42:58,190 --> 00:43:01,370
collective will and create that

00:43:00,020 --> 00:43:04,370
coalition that says this is important to

00:43:01,370 --> 00:43:06,620
us that's how we can get to this this by

00:43:04,370 --> 00:43:08,750
the way is a picture of the DNS serving

00:43:06,620 --> 00:43:10,820
infrastructure at verisign that's

00:43:08,750 --> 00:43:12,260
resulted com so a single point of

00:43:10,820 --> 00:43:15,140
failure for big chunk of the internet

00:43:12,260 --> 00:43:16,970
this is a sixty thousand dollar cabling

00:43:15,140 --> 00:43:19,190
job and yet they would never

00:43:16,970 --> 00:43:21,349
can I write because they know that in

00:43:19,190 --> 00:43:23,810
order to deliver world-class service you

00:43:21,349 --> 00:43:25,550
have to you know you have to do this and

00:43:23,810 --> 00:43:27,830
I think I would treat the twenty percent

00:43:25,550 --> 00:43:29,810
tax just like that in order to do great

00:43:27,830 --> 00:43:34,190
work and dev testing operations we have

00:43:29,810 --> 00:43:35,990
to pay our twenty percent tax I had

00:43:34,190 --> 00:43:37,820
mentioned that my area passion right now

00:43:35,990 --> 00:43:39,619
is studying not the unicorns but the

00:43:37,820 --> 00:43:40,670
horses and so that's the reason why I

00:43:39,619 --> 00:43:42,260
held a conference called the DevOps

00:43:40,670 --> 00:43:43,820
Enterprise summit in October where we

00:43:42,260 --> 00:43:45,349
got 50 the leaders driving DevOps

00:43:43,820 --> 00:43:46,760
transformation from some of the

00:43:45,349 --> 00:43:49,130
best-known brands in almost every major

00:43:46,760 --> 00:43:50,440
industry vertical and there are two

00:43:49,130 --> 00:43:54,590
things I want to share with you about

00:43:50,440 --> 00:43:56,090
this journey one is these leaders who

00:43:54,590 --> 00:43:58,220
are driving Devas transformations in

00:43:56,090 --> 00:44:00,619
large complex organizations are getting

00:43:58,220 --> 00:44:02,750
same amazing miraculous outcomes that

00:44:00,619 --> 00:44:05,180
we've only associated prior to the

00:44:02,750 --> 00:44:06,830
unicorns right harrigan is doing 10 plus

00:44:05,180 --> 00:44:09,170
deploys per day with fears and 10

00:44:06,830 --> 00:44:10,970
incidence month for their API naval men

00:44:09,170 --> 00:44:12,920
team in other words any development team

00:44:10,970 --> 00:44:15,080
wants access to store catalog create

00:44:12,920 --> 00:44:16,609
orders shipments cross shipments can now

00:44:15,080 --> 00:44:18,160
rely on this team right and they're

00:44:16,609 --> 00:44:19,970
doing continuous delivery there right

00:44:18,160 --> 00:44:21,680
capital one is doing hundreds of

00:44:19,970 --> 00:44:24,500
employees per day with the lead time

00:44:21,680 --> 00:44:25,700
measured in minutes not months Macy's is

00:44:24,500 --> 00:44:27,830
do it went from a situation where they

00:44:25,700 --> 00:44:29,810
were doing 1500 manual tests every 10

00:44:27,830 --> 00:44:31,849
days to now executing hundreds of

00:44:29,810 --> 00:44:33,650
automated tests per day nationwide

00:44:31,849 --> 00:44:35,750
insurance is doing this now for some

00:44:33,650 --> 00:44:37,040
hippie open source software stack right

00:44:35,750 --> 00:44:38,960
on the front end they're doing it

00:44:37,040 --> 00:44:40,910
further COBOL mainframe app that runs a

00:44:38,960 --> 00:44:43,099
retirement plans application right and

00:44:40,910 --> 00:44:45,740
so if you can do it for a mainframe app

00:44:43,099 --> 00:44:48,050
again this we can use what we know to do

00:44:45,740 --> 00:44:50,480
this for anything raytheon is doing it

00:44:48,050 --> 00:44:51,800
for the ground control stations for the

00:44:50,480 --> 00:44:54,109
thing that control the next generation

00:44:51,800 --> 00:44:56,750
GPS satellites right so yeah I think

00:44:54,109 --> 00:44:58,160
this gives us confidence that we can

00:44:56,750 --> 00:45:00,380
make a contribution to the organization

00:44:58,160 --> 00:45:02,599
almost anywhere the other thing I want

00:45:00,380 --> 00:45:04,670
to share with you is important to me

00:45:02,599 --> 00:45:06,530
just because I think the stories being

00:45:04,670 --> 00:45:08,089
told as a DevOps Enterprise summit or

00:45:06,530 --> 00:45:09,680
some of the most courageous stories I've

00:45:08,089 --> 00:45:11,180
ever heard no there was not only would

00:45:09,680 --> 00:45:13,400
they have fitted in into a velocity

00:45:11,180 --> 00:45:15,290
conference but they were doing it not at

00:45:13,400 --> 00:45:17,000
Google or Amazon or Etsy right they were

00:45:15,290 --> 00:45:18,710
doing it often an organization that had

00:45:17,000 --> 00:45:21,050
decades or even over a century of

00:45:18,710 --> 00:45:22,520
command and control bureaucratic load

00:45:21,050 --> 00:45:24,710
trust environments and so even though

00:45:22,520 --> 00:45:27,080
all of them were given some degree of

00:45:24,710 --> 00:45:27,970
air cover I think all of them while they

00:45:27,080 --> 00:45:29,710
exceeded their cover

00:45:27,970 --> 00:45:30,970
were given so why would they put

00:45:29,710 --> 00:45:32,980
themselves into a position of some

00:45:30,970 --> 00:45:34,480
amount of personal jeopardy I think it's

00:45:32,980 --> 00:45:36,310
because all of them shared a sense of

00:45:34,480 --> 00:45:37,420
absolute clarity and conviction that

00:45:36,310 --> 00:45:39,160
what they were doing for their

00:45:37,420 --> 00:45:41,140
organizations was creating capabilities

00:45:39,160 --> 00:45:43,210
that would allow them to not only win in

00:45:41,140 --> 00:45:45,300
the marketplace but maybe even survive

00:45:43,210 --> 00:45:47,140
in the marketplace so I want to give you

00:45:45,300 --> 00:45:49,710
confidence that the work that we're

00:45:47,140 --> 00:45:53,109
doing is important and that's really why

00:45:49,710 --> 00:45:55,150
to sum up what DevOps is important it

00:45:53,109 --> 00:45:57,820
affects every organization large small

00:45:55,150 --> 00:45:59,500
unicorn horse profit not for profit

00:45:57,820 --> 00:46:01,150
without something like DevOps it leads

00:45:59,500 --> 00:46:03,099
to horrendous outcome to dev test

00:46:01,150 --> 00:46:04,750
operations information security but most

00:46:03,099 --> 00:46:08,080
importantly their organization that we

00:46:04,750 --> 00:46:10,060
serve so if you're interested in a full

00:46:08,080 --> 00:46:12,400
this presentation if you're interested

00:46:10,060 --> 00:46:13,869
in video links to the videos and slides

00:46:12,400 --> 00:46:15,250
from DevOps enterprise if you're

00:46:13,869 --> 00:46:17,859
interested in the upcoming DevOps

00:46:15,250 --> 00:46:19,450
Enterprise conference if you want early

00:46:17,859 --> 00:46:21,880
drafts of the upcoming DevOps cookbook

00:46:19,450 --> 00:46:23,770
which is coming out this year three

00:46:21,880 --> 00:46:25,630
years late to send an email to real

00:46:23,770 --> 00:46:28,599
Gingka Matt send your slides calm with a

00:46:25,630 --> 00:46:30,670
subject line of DevOps if you don't take

00:46:28,599 --> 00:46:32,470
a picture go right down just email gene

00:46:30,670 --> 00:46:34,540
Kim real gene canvas and your sasa com

00:46:32,470 --> 00:46:36,609
subject line DevOps and you'll get a

00:46:34,540 --> 00:46:38,440
list of all these resources with animate

00:46:36,609 --> 00:46:40,000
energy so with that thank you so much

00:46:38,440 --> 00:46:42,580
for allowing me to be a part of this

00:46:40,000 --> 00:46:45,390
community and have a great day i'll be

00:46:42,580 --> 00:46:45,390
around all day thank you

00:46:54,240 --> 00:46:56,300

YouTube URL: https://www.youtube.com/watch?v=1LQHk8x3-yQ


