Title: JUC U.S. East 2015 - Growing Pains - Scaling Jenkins in the Federal Sector
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Brian Patterson, Steel Thread Software 

This session will highlight experiences with transitioning a large, federal agency towards agile development/continuous delivery best practices. Over 150 projects were moved onto Jenkins and the agency had to manage support and administration of thousands of jobs running continuously. The projectâ€™s background and some of the architectural and administrative implementations to scale Jenkins services will be discussed.
Captions: 
	00:00:15,150 --> 00:00:20,480
my name is brian patterson i work with

00:00:17,780 --> 00:00:23,290
thread software this is blaine whited

00:00:20,480 --> 00:00:30,560
will be co-presenting today this is a

00:00:23,290 --> 00:00:33,530
use case study our our growing pains

00:00:30,560 --> 00:00:36,020
scaling jenkins in the federal sector so

00:00:33,530 --> 00:00:38,270
we'll be talking through some of our

00:00:36,020 --> 00:00:40,730
best practices not the full set but the

00:00:38,270 --> 00:00:43,190
ones that we have deemed it appropriate

00:00:40,730 --> 00:00:46,160
for today's discussion and then we're

00:00:43,190 --> 00:00:49,700
going to end with a live demo from blame

00:00:46,160 --> 00:00:53,809
on setting up some Jenkins slaves and

00:00:49,700 --> 00:00:58,449
then through docker and showing the

00:00:53,809 --> 00:00:58,449
power of the Jenkins label plugin

00:00:58,720 --> 00:01:04,159
alright so just to kick things off a

00:01:01,699 --> 00:01:06,770
little bit who we serve we're working

00:01:04,159 --> 00:01:08,090
with a federal civilian agency we feel

00:01:06,770 --> 00:01:11,300
fortunate to be working with a

00:01:08,090 --> 00:01:15,020
progressive agency guided by the

00:01:11,300 --> 00:01:16,820
next-gen mandate so they are high

00:01:15,020 --> 00:01:19,610
pressure to accelerate the development

00:01:16,820 --> 00:01:23,420
and create user friendly feature rich

00:01:19,610 --> 00:01:26,240
applications so having that support from

00:01:23,420 --> 00:01:29,869
the highest levels allows us to do our

00:01:26,240 --> 00:01:33,320
jobs a little bit more efficiently with

00:01:29,869 --> 00:01:35,240
with that support the CIO there came

00:01:33,320 --> 00:01:37,149
from the commercial space he's lived in

00:01:35,240 --> 00:01:40,100
in this world and he knows that these

00:01:37,149 --> 00:01:42,469
methodologies work and can get the

00:01:40,100 --> 00:01:45,890
agency to it into a better position to

00:01:42,469 --> 00:01:48,590
provide the best possible applications

00:01:45,890 --> 00:01:50,990
so they've started to adopt the industry

00:01:48,590 --> 00:01:52,939
best practices for DevOps and continuous

00:01:50,990 --> 00:01:54,979
delivery culture and then they've

00:01:52,939 --> 00:02:02,270
started standardizing on processes and

00:01:54,979 --> 00:02:07,759
technology stacks so what we found we

00:02:02,270 --> 00:02:10,460
were contracted to come out and do sort

00:02:07,759 --> 00:02:14,990
of a phase zero and and get the lay of

00:02:10,460 --> 00:02:18,770
the land and and assess the situation

00:02:14,990 --> 00:02:20,750
basically and at first we found that

00:02:18,770 --> 00:02:22,640
there were less than 10 of their next

00:02:20,750 --> 00:02:25,310
gen projects that were automating their

00:02:22,640 --> 00:02:28,610
builds period and we'll get to some

00:02:25,310 --> 00:02:30,690
higher number so they consisted of a

00:02:28,610 --> 00:02:34,800
variety of technology stacks

00:02:30,690 --> 00:02:37,650
as you would expect Java net see no Jas

00:02:34,800 --> 00:02:40,470
on multiple platforms but there's no

00:02:37,650 --> 00:02:43,020
central source for CM for there'd ever

00:02:40,470 --> 00:02:45,240
test environments there anywhere that

00:02:43,020 --> 00:02:46,950
they would deploy these systems and that

00:02:45,240 --> 00:02:49,590
had a lot of infrastructure variances

00:02:46,950 --> 00:02:52,050
because most of what we found they were

00:02:49,590 --> 00:02:53,850
doing we're through manual processes so

00:02:52,050 --> 00:02:55,560
that's one of the things that you'll

00:02:53,850 --> 00:02:58,800
hear from us and see from us today is

00:02:55,560 --> 00:03:00,630
our goal driving towards automating

00:02:58,800 --> 00:03:03,510
everything just automate automate

00:03:00,630 --> 00:03:06,330
automate so repeatability a reliability

00:03:03,510 --> 00:03:09,120
the integrity we'll talk a little bit

00:03:06,330 --> 00:03:11,490
about infrastructure as code setting up

00:03:09,120 --> 00:03:13,710
the configurations through code calling

00:03:11,490 --> 00:03:15,240
on those from repositories so that you

00:03:13,710 --> 00:03:18,450
know that each time these things are

00:03:15,240 --> 00:03:19,680
either selected from either from Jenkins

00:03:18,450 --> 00:03:21,000
masters pull down from the river

00:03:19,680 --> 00:03:23,280
wherever they're coming from that

00:03:21,000 --> 00:03:28,070
they're not part of a manual process

00:03:23,280 --> 00:03:31,140
that that we can't repeat successfully

00:03:28,070 --> 00:03:34,260
and so kind of where we are now what

00:03:31,140 --> 00:03:36,450
we've become we're now maintaining and

00:03:34,260 --> 00:03:38,489
administering or 500 users in a Jenkins

00:03:36,450 --> 00:03:39,930
system there's a hundred and eighty

00:03:38,489 --> 00:03:42,390
projects that we've on-boarded and

00:03:39,930 --> 00:03:45,930
centralized in an SCM subversion

00:03:42,390 --> 00:03:48,510
repository 100 of those projects roughly

00:03:45,930 --> 00:03:53,459
are running two thousand plus chickens

00:03:48,510 --> 00:03:56,700
jobs executions every day these are

00:03:53,459 --> 00:03:58,440
automated build unit testing we have

00:03:56,700 --> 00:04:01,230
successfully brought three next-gen

00:03:58,440 --> 00:04:06,200
projects all the way through auto

00:04:01,230 --> 00:04:09,690
deployment not all to relate para

00:04:06,200 --> 00:04:13,440
delivery but audit appointment and all

00:04:09,690 --> 00:04:16,350
of this activity requires our Jenkins

00:04:13,440 --> 00:04:18,359
master node and a 40 to 50 active slave

00:04:16,350 --> 00:04:21,419
nodes and we typically configured us

00:04:18,359 --> 00:04:23,460
with 124 executors associate mentioned

00:04:21,419 --> 00:04:26,130
that are we are running a very small

00:04:23,460 --> 00:04:28,530
team of seven or so individuals out

00:04:26,130 --> 00:04:31,860
there so in my opinion this is a lot of

00:04:28,530 --> 00:04:34,050
work and a lot of orchestration for a

00:04:31,860 --> 00:04:36,030
small set of people and we're doing it

00:04:34,050 --> 00:04:38,960
very successfully by utilizing the tools

00:04:36,030 --> 00:04:38,960
with the following best practices

00:04:40,719 --> 00:04:46,279
so kind of just the question we need to

00:04:44,599 --> 00:04:48,619
scale up 50 additional Jenkins slaves

00:04:46,279 --> 00:04:50,779
within our obstruction are you going to

00:04:48,619 --> 00:04:52,969
be the person that's considers this a

00:04:50,779 --> 00:04:56,659
monster maintenance tail or are you

00:04:52,969 --> 00:04:58,879
going to say no problem and we want you

00:04:56,659 --> 00:05:00,559
to be the ladder and we consider

00:04:58,879 --> 00:05:01,819
ourselves the subject matter experts out

00:05:00,559 --> 00:05:05,029
there that are able to handle this with

00:05:01,819 --> 00:05:07,909
with no problem at all and we do that

00:05:05,029 --> 00:05:10,039
through a lot of different best

00:05:07,909 --> 00:05:12,889
practices but today we'll be focusing on

00:05:10,039 --> 00:05:15,559
the automation of your Jenkins server

00:05:12,889 --> 00:05:17,869
and your slave tools so in a pure

00:05:15,559 --> 00:05:20,659
Jenkins environment they have a slave

00:05:17,869 --> 00:05:22,459
setup plugin that you could use as I

00:05:20,659 --> 00:05:26,509
mentioned earlier we're going to demo

00:05:22,459 --> 00:05:32,379
our own slave automation engine using

00:05:26,509 --> 00:05:34,879
docker but so the goal here in

00:05:32,379 --> 00:05:38,149
automating how your nodes are configured

00:05:34,879 --> 00:05:40,309
it is important so that as I said each

00:05:38,149 --> 00:05:42,889
time you spawn a new one you're setting

00:05:40,309 --> 00:05:45,229
up the same environment the same stack

00:05:42,889 --> 00:05:47,360
for each of those so that you know that

00:05:45,229 --> 00:05:50,329
there's consistency across these things

00:05:47,360 --> 00:05:53,599
that they're identical and that they're

00:05:50,329 --> 00:05:55,129
also feature complete so one of the

00:05:53,599 --> 00:05:57,799
things that billing will also get into

00:05:55,129 --> 00:06:00,079
is using a swarm plugin so as these

00:05:57,799 --> 00:06:03,139
nodes become available they're going to

00:06:00,079 --> 00:06:04,459
be connected to the master and it may

00:06:03,139 --> 00:06:07,489
not be that they're bad but they're

00:06:04,459 --> 00:06:12,669
incomplete so automation you know gets

00:06:07,489 --> 00:06:12,669
you away from any of those situations

00:06:13,929 --> 00:06:21,289
source control everything so we say to

00:06:17,179 --> 00:06:23,329
invest not only in SC aiming your job

00:06:21,289 --> 00:06:26,059
scripts but also the job configuration

00:06:23,329 --> 00:06:28,369
itself and we've identified the SEM sink

00:06:26,059 --> 00:06:31,429
configuration plugin which you can use

00:06:28,369 --> 00:06:35,329
so that I think on the initial one it

00:06:31,429 --> 00:06:38,689
pulls in all the configurations through

00:06:35,329 --> 00:06:40,339
the config dot XML and then post after

00:06:38,689 --> 00:06:44,209
that any time that you make a change to

00:06:40,339 --> 00:06:47,059
the job configurations any of the global

00:06:44,209 --> 00:06:49,459
Jenkins configurations it'll actually so

00:06:47,059 --> 00:06:52,579
it's now synced to your repo and ask you

00:06:49,459 --> 00:06:53,900
for commit so it's tracking who did it

00:06:52,579 --> 00:06:56,870
you know who authored it when it

00:06:53,900 --> 00:07:04,759
was what the change was and providing

00:06:56,870 --> 00:07:10,070
the commit messages for those we use

00:07:04,759 --> 00:07:12,470
ldap groups whenever possible at this

00:07:10,070 --> 00:07:14,810
agency we're using the role strategy

00:07:12,470 --> 00:07:18,910
plugin it builds a matrix of permissions

00:07:14,810 --> 00:07:22,580
and we tie those to the project itself

00:07:18,910 --> 00:07:25,789
with 500 plus users one of the

00:07:22,580 --> 00:07:29,750
limitations we did find was the size and

00:07:25,789 --> 00:07:33,110
complexity of this matrix and having to

00:07:29,750 --> 00:07:35,780
scroll within it so now wherever

00:07:33,110 --> 00:07:37,430
possible we're using ldap grouping it

00:07:35,780 --> 00:07:39,650
also helps with onboarding and off

00:07:37,430 --> 00:07:44,060
boarding individuals is not tied to a

00:07:39,650 --> 00:07:46,280
specific per row or column within the

00:07:44,060 --> 00:07:49,639
matrix so once they're dropped off of

00:07:46,280 --> 00:07:51,169
the group they're no longer they no

00:07:49,639 --> 00:07:57,410
longer have access to their given

00:07:51,169 --> 00:07:59,750
project and then user use jinkins labels

00:07:57,410 --> 00:08:04,580
so that's kind of the bulk of where

00:07:59,750 --> 00:08:07,630
we're going to go today so our

00:08:04,580 --> 00:08:10,760
observations while using Jenkins labels

00:08:07,630 --> 00:08:15,409
we're finding that the greater benefits

00:08:10,760 --> 00:08:21,139
in utilizing them I guess we would say

00:08:15,409 --> 00:08:24,440
properly it's tagging your nodes so that

00:08:21,139 --> 00:08:28,099
you can tie a job to a label rather than

00:08:24,440 --> 00:08:29,630
the actual host itself and then it

00:08:28,099 --> 00:08:31,280
allows you to balance new slaves when

00:08:29,630 --> 00:08:32,959
the demands to a new slave when the

00:08:31,280 --> 00:08:38,690
demand aside based on this labeling

00:08:32,959 --> 00:08:41,000
system sorry so the grouping of these

00:08:38,690 --> 00:08:42,979
slaves can be done on anything you wish

00:08:41,000 --> 00:08:44,800
it's kind of the point the way that

00:08:42,979 --> 00:08:47,870
we've worked it is through capabilities

00:08:44,800 --> 00:08:51,100
through the environment you can use

00:08:47,870 --> 00:08:56,750
physical locations it's free form

00:08:51,100 --> 00:08:58,910
tagging and I guess in our in our cases

00:08:56,750 --> 00:09:02,150
we are you know will identify that this

00:08:58,910 --> 00:09:04,130
is needs to be run on a window system so

00:09:02,150 --> 00:09:07,790
we'll we'll label it as such and not

00:09:04,130 --> 00:09:12,140
have to tie it to windows nodes

00:09:07,790 --> 00:09:14,040
through the the node name itself we just

00:09:12,140 --> 00:09:16,920
threw the labels it will search through

00:09:14,040 --> 00:09:18,480
and say all right found windows and I

00:09:16,920 --> 00:09:20,790
know that I can run on the last

00:09:18,480 --> 00:09:24,410
successful node that accomplished this

00:09:20,790 --> 00:09:27,720
build the last time and then the use of

00:09:24,410 --> 00:09:30,390
normal Java conditional operators so you

00:09:27,720 --> 00:09:35,730
can consolidate them to and and or the

00:09:30,390 --> 00:09:40,380
or or or the parental windows and maven

00:09:35,730 --> 00:09:44,100
or window or or to use the or you could

00:09:40,380 --> 00:09:46,970
say kind of node node base you could say

00:09:44,100 --> 00:09:49,830
use this node or this node or this node

00:09:46,970 --> 00:09:53,480
so labels can be defined in a number of

00:09:49,830 --> 00:09:53,480
ways we're going to show you today

00:09:54,530 --> 00:09:59,100
programmatically through docker but you

00:09:57,660 --> 00:10:01,680
can also do them through the Jenkins UI

00:09:59,100 --> 00:10:03,450
and their assigned at the master slave

00:10:01,680 --> 00:10:05,490
node page so you manage Dinkins and you

00:10:03,450 --> 00:10:06,960
managed nodes and you get out there and

00:10:05,490 --> 00:10:09,960
use those and as I mentioned they're

00:10:06,960 --> 00:10:12,390
just freeform they allow for spaces

00:10:09,960 --> 00:10:16,470
using double quotes we don't recommend

00:10:12,390 --> 00:10:22,080
it but it has a capability to use you

00:10:16,470 --> 00:10:28,110
know identifying free form words for

00:10:22,080 --> 00:10:30,380
those so Jenkins provides the lookup for

00:10:28,110 --> 00:10:33,570
the master slaves using specified labels

00:10:30,380 --> 00:10:38,880
and they can be looked up by using the

00:10:33,570 --> 00:10:41,160
Jenkins home label label combo this is

00:10:38,880 --> 00:10:44,400
where I was talking about using the +

00:10:41,160 --> 00:10:47,490
operator so in this particular case when

00:10:44,400 --> 00:10:50,490
we use the docker swarm the swarm plug

00:10:47,490 --> 00:10:53,340
in there it automatically tags things as

00:10:50,490 --> 00:10:56,460
swarm so we had tied those two it to the

00:10:53,340 --> 00:11:01,200
maven and I think that's in our demo how

00:10:56,460 --> 00:11:03,600
will show you so then jobs self identify

00:11:01,200 --> 00:11:06,720
which labels they require and that's

00:11:03,600 --> 00:11:08,580
they'll look through loop through each

00:11:06,720 --> 00:11:10,970
of these labels and pick up all the

00:11:08,580 --> 00:11:10,970
matches

00:11:12,640 --> 00:11:21,200
so I think what we'll do is turn this

00:11:17,600 --> 00:11:25,459
over to the live demo so that Blaine can

00:11:21,200 --> 00:11:27,850
show you how this works in the real

00:11:25,459 --> 00:11:27,850
world

00:11:35,730 --> 00:11:42,560
what you got to do your the pledge oh

00:11:39,560 --> 00:11:42,560
yeah

00:11:47,550 --> 00:11:50,180
so

00:11:53,970 --> 00:12:02,110
here we go let's talk to this one

00:11:58,829 --> 00:12:03,279
there's a movie called the prestige at a

00:12:02,110 --> 00:12:06,370
really good quote in here that I thought

00:12:03,279 --> 00:12:08,199
would be fitting for a live demo it says

00:12:06,370 --> 00:12:10,779
the first part is the pledge where you

00:12:08,199 --> 00:12:12,940
set up its kind of the part where you do

00:12:10,779 --> 00:12:15,339
the these are normal deck of cards

00:12:12,940 --> 00:12:17,110
whatever the second part is the turn

00:12:15,339 --> 00:12:19,000
where you do the magic you do the thing

00:12:17,110 --> 00:12:20,440
that can't be explained and then the

00:12:19,000 --> 00:12:26,230
third act is where you collect all your

00:12:20,440 --> 00:12:32,829
accolades let me let me get set up real

00:12:26,230 --> 00:12:36,579
quick so to start with I'm someone very

00:12:32,829 --> 00:12:41,500
graciously has set up some ready-made

00:12:36,579 --> 00:12:43,839
swarm slaves docker images one is the

00:12:41,500 --> 00:12:46,540
master node which is the one hosting all

00:12:43,839 --> 00:12:50,110
the data and the other one is the swarm

00:12:46,540 --> 00:12:56,170
slave so right here you've got the swarm

00:12:50,110 --> 00:12:59,860
master a swarm slave but we wanted to

00:12:56,170 --> 00:13:02,620
talk about labels in practice so I set

00:12:59,860 --> 00:13:06,790
up a bunch of sample jobs some of these

00:13:02,620 --> 00:13:08,620
are real world we've used them before it

00:13:06,790 --> 00:13:11,199
consists of two pieces you've got the

00:13:08,620 --> 00:13:15,569
main job and then a runner job that

00:13:11,199 --> 00:13:19,449
actually does the work using the

00:13:15,569 --> 00:13:23,199
parameterised trigger plugin in jenkins

00:13:19,449 --> 00:13:25,540
allows you to call another job passing

00:13:23,199 --> 00:13:29,820
it parameters and that

00:13:25,540 --> 00:13:32,470
down here which is kind of hard to see

00:13:29,820 --> 00:13:34,959
trigger builds on other projects it

00:13:32,470 --> 00:13:37,630
gives you a bunch of parameters there's

00:13:34,959 --> 00:13:43,149
a second plug-in that is called the node

00:13:37,630 --> 00:13:46,589
label plugin that adds this step to the

00:13:43,149 --> 00:13:48,550
available parameter list for this plugin

00:13:46,589 --> 00:13:51,699
specifically there's the all nodes for

00:13:48,550 --> 00:13:53,920
label factory so in this case we're

00:13:51,699 --> 00:13:57,639
going to call and I can't see it because

00:13:53,920 --> 00:14:00,430
of screen so small the clean maven cash

00:13:57,639 --> 00:14:04,959
runner job for every node that has the

00:14:00,430 --> 00:14:07,389
label maven put in perspective there's

00:14:04,959 --> 00:14:08,560
other things in here like ants while we

00:14:07,389 --> 00:14:11,079
use some ansible stuff so we're

00:14:08,560 --> 00:14:14,649
publishing the assets to all the ansible

00:14:11,079 --> 00:14:16,480
slaves smoke tests so when I bring up a

00:14:14,649 --> 00:14:18,040
new slave I want to make sure that it's

00:14:16,480 --> 00:14:20,470
working like it's supposed to so I will

00:14:18,040 --> 00:14:21,519
run a smoke test that's hitting all the

00:14:20,470 --> 00:14:24,279
slaves and validating that they're

00:14:21,519 --> 00:14:28,839
working maven settings Visual Studio

00:14:24,279 --> 00:14:32,139
scripts etc etc etc so you'll see if i

00:14:28,839 --> 00:14:36,040
run this job there's only one slave and

00:14:32,139 --> 00:14:37,300
it is as the maven label also has a

00:14:36,040 --> 00:14:46,060
swarm because that's an automatic thing

00:14:37,300 --> 00:14:52,810
of the swarm plugin so the clean maven

00:14:46,060 --> 00:14:55,000
cash main job as wow my times off has

00:14:52,810 --> 00:14:58,269
called the runner job for the slaves of

00:14:55,000 --> 00:15:01,389
it matched specifically in the console

00:14:58,269 --> 00:15:03,069
log there's this getting all nodes with

00:15:01,389 --> 00:15:06,779
label maven it found the maven docker

00:15:03,069 --> 00:15:11,040
one that I've created and then calls it

00:15:06,779 --> 00:15:11,040
specifically that slave is the

00:15:12,520 --> 00:15:16,940
if we go to that job it's not doing

00:15:15,410 --> 00:15:18,260
anything in particular but you can see

00:15:16,940 --> 00:15:20,450
that it actually did run against that

00:15:18,260 --> 00:15:22,210
slave which isn't really a problem

00:15:20,450 --> 00:15:28,190
because there's only one right now but

00:15:22,210 --> 00:15:31,910
soon we'll have 15 so that leads me into

00:15:28,190 --> 00:15:34,540
the doctor discussion about how when

00:15:31,910 --> 00:15:37,820
you've automated all of your slaves

00:15:34,540 --> 00:15:39,710
including tool installs whether you do

00:15:37,820 --> 00:15:41,990
it be a native doctor images that have

00:15:39,710 --> 00:15:43,820
the tools already ready to go you have

00:15:41,990 --> 00:15:46,120
jobs at first configuration doesn't

00:15:43,820 --> 00:15:49,660
really matter or you'd use things like

00:15:46,120 --> 00:15:53,900
puppet ansible slave set a plug-in that

00:15:49,660 --> 00:15:56,380
runs at connection time doesn't matter

00:15:53,900 --> 00:16:02,980
as long as the slave is ready to connect

00:15:56,380 --> 00:16:02,980
so I will go on some new slaves

00:16:09,300 --> 00:16:13,310
ok

00:16:11,250 --> 00:16:13,310
you

00:16:20,690 --> 00:16:27,410
so this particular docker image passes

00:16:25,880 --> 00:16:30,790
all of the command line parameters

00:16:27,410 --> 00:16:33,710
through to the slave runner of the swarm

00:16:30,790 --> 00:16:35,120
plugin so the way it works is there's a

00:16:33,710 --> 00:16:38,290
plug-in assault on the box and it

00:16:35,120 --> 00:16:41,840
becomes a listener for new machines that

00:16:38,290 --> 00:16:43,220
broadcast or connect directly and when

00:16:41,840 --> 00:16:46,370
they do they will connect automatically

00:16:43,220 --> 00:16:48,830
with the option specified so this guy

00:16:46,370 --> 00:16:51,920
pre installed the plugin forests and

00:16:48,830 --> 00:16:55,820
then on the slave pre-installed the jar

00:16:51,920 --> 00:16:58,010
that's needed to run the swarm client so

00:16:55,820 --> 00:17:00,430
by doing this Renee command similar to

00:16:58,010 --> 00:17:05,270
this we're able to spawn a new slave

00:17:00,430 --> 00:17:09,500
with things we specify so I am going to

00:17:05,270 --> 00:17:14,900
paste it and then I'm going to change

00:17:09,500 --> 00:17:20,569
part of it because it doesn't like to

00:17:14,900 --> 00:17:23,990
give it verb beach make

00:17:20,569 --> 00:17:25,399
10 executives and I want to do this

00:17:23,990 --> 00:17:30,350
while watching this side over here

00:17:25,399 --> 00:17:33,590
because it's fun right so new slate new

00:17:30,350 --> 00:17:35,600
slaves already come on line starting up

00:17:33,590 --> 00:17:38,440
it's already added itself where I can

00:17:35,600 --> 00:17:38,440
finish the next one

00:17:55,730 --> 00:18:03,530
right so as they're coming online are

00:18:00,200 --> 00:18:07,160
madam self c55 just came in as the

00:18:03,530 --> 00:18:10,160
labels we specified so if juc stood for

00:18:07,160 --> 00:18:12,680
anything important and my jobs they

00:18:10,160 --> 00:18:14,810
would be used but because we set our

00:18:12,680 --> 00:18:19,070
jobs up in a way that allowed us to run

00:18:14,810 --> 00:18:22,150
off the labels I can run this anytime I

00:18:19,070 --> 00:18:25,670
want right and it will automatically

00:18:22,150 --> 00:18:27,050
choose the right boxes so it found the

00:18:25,670 --> 00:18:30,010
four new block of three new boxes

00:18:27,050 --> 00:18:32,330
including the original ran against them

00:18:30,010 --> 00:18:35,000
of course shoot you can use different

00:18:32,330 --> 00:18:39,440
kinds of labels so not every box is

00:18:35,000 --> 00:18:42,050
automatically chosen so you have the in

00:18:39,440 --> 00:18:44,030
this case the clear maven cash it was a

00:18:42,050 --> 00:18:46,370
problem for us people were doing raven

00:18:44,030 --> 00:18:48,560
install when they didn't need to get me

00:18:46,370 --> 00:18:49,940
disk usage problems that we wrote a job

00:18:48,560 --> 00:18:51,530
that would clean the maven cash

00:18:49,940 --> 00:18:53,780
automatically be running on schedule or

00:18:51,530 --> 00:18:57,710
on demand it finds all the maven boxes

00:18:53,780 --> 00:19:00,740
automatically cleans them but that's

00:18:57,710 --> 00:19:02,780
basically it because the swarm plug in

00:19:00,740 --> 00:19:06,440
the way it works it's supposed to be an

00:19:02,780 --> 00:19:08,680
ad hoc kind of thing I can kill the

00:19:06,440 --> 00:19:08,680
slaves

00:19:14,540 --> 00:19:17,360
just kill a few random ones I don't know

00:19:16,250 --> 00:19:19,750
which ones these are without working

00:19:17,360 --> 00:19:19,750
deeper

00:19:25,799 --> 00:19:31,379
and there we go now we're not back down

00:19:29,190 --> 00:19:32,700
there are two so the idea being if you

00:19:31,379 --> 00:19:35,100
really want to automate a lot of it you

00:19:32,700 --> 00:19:37,139
could have the system monitoring kick

00:19:35,100 --> 00:19:39,779
off new slaves to on high demand

00:19:37,139 --> 00:19:42,600
situations if you automate the tools I

00:19:39,779 --> 00:19:45,509
could install to the slaves then your

00:19:42,600 --> 00:19:46,889
systems we just scale as long as you

00:19:45,509 --> 00:19:51,059
have the physical resources to support

00:19:46,889 --> 00:19:53,129
or money whichever wouldn't see here but

00:19:51,059 --> 00:19:56,419
that's a that's basically it from the

00:19:53,129 --> 00:20:00,419
demo standpoint yeah labels are

00:19:56,419 --> 00:20:07,919
incredibly useful you lots of things

00:20:00,419 --> 00:20:11,399
with them so all right well short and

00:20:07,919 --> 00:20:14,129
sweet as we went on the last one so any

00:20:11,399 --> 00:20:16,350
questions again we were just happy to

00:20:14,129 --> 00:20:19,529
share our experiences with you out at

00:20:16,350 --> 00:20:26,039
our site and how we are utilizing labels

00:20:19,529 --> 00:20:35,249
to to maintain run and work across over

00:20:26,039 --> 00:20:38,279
2,000 jobs each day yes we could yeah

00:20:35,249 --> 00:20:39,659
the the whole concept of I threw it up

00:20:38,279 --> 00:20:41,879
there is a smoke test kind of thing so

00:20:39,659 --> 00:20:44,970
if specifically your unit testing the

00:20:41,879 --> 00:20:46,859
slaves then right jobs in whatever way

00:20:44,970 --> 00:20:48,450
you want give them a meaningful label

00:20:46,859 --> 00:20:51,269
that maps to the component you're

00:20:48,450 --> 00:20:54,210
actually testing as far as software unit

00:20:51,269 --> 00:20:56,190
testing is the same thing you know maybe

00:20:54,210 --> 00:20:58,710
you need to install a unit testing tool

00:20:56,190 --> 00:21:00,749
or maybe it comes to do by default from

00:20:58,710 --> 00:21:05,309
maven or something either way you're

00:21:00,749 --> 00:21:06,779
good okay the question uh sorry mr.

00:21:05,309 --> 00:21:08,870
mustard presentation but I was going to

00:21:06,779 --> 00:21:11,330
ask a bunch of guys deal with

00:21:08,870 --> 00:21:16,400
you had so many different projects

00:21:11,330 --> 00:21:18,380
Donkor the many artifacts and the logs

00:21:16,400 --> 00:21:20,360
bill histories that are generated in all

00:21:18,380 --> 00:21:22,550
your slaves and masters we might not

00:21:20,360 --> 00:21:24,380
communication like if there's oh you

00:21:22,550 --> 00:21:25,580
know there's some sort of bad player for

00:21:24,380 --> 00:21:27,470
one of your applications and he's

00:21:25,580 --> 00:21:30,020
generating like a two gig console output

00:21:27,470 --> 00:21:33,350
because he's got any bug absolutely yeah

00:21:30,020 --> 00:21:36,620
um one one at a time I guess is a simple

00:21:33,350 --> 00:21:39,170
solution you don't know until you try

00:21:36,620 --> 00:21:41,630
kind of thing so that we do have a few

00:21:39,170 --> 00:21:43,730
that generate very large console outputs

00:21:41,630 --> 00:21:47,179
with the bug logging especially during

00:21:43,730 --> 00:21:50,120
unit testing and stuff just set up

00:21:47,179 --> 00:21:50,890
monitoring especially can and then if

00:21:50,120 --> 00:21:55,160
you have to do it more than once

00:21:50,890 --> 00:21:57,770
automated did use the Tingler tools for

00:21:55,160 --> 00:22:00,230
your monitoring's i don't i use jenkins

00:21:57,770 --> 00:22:02,510
exclusively just because nobody brought

00:22:00,230 --> 00:22:04,700
something else in no i'm sure the other

00:22:02,510 --> 00:22:08,390
the other teams use other tools where

00:22:04,700 --> 00:22:10,550
specifically CM c CI and all that stuff

00:22:08,390 --> 00:22:12,200
did you have to like restrict number of

00:22:10,550 --> 00:22:16,850
bills or anything like that never this

00:22:12,200 --> 00:22:19,010
projects um okay yep put it out and put

00:22:16,850 --> 00:22:21,500
bad people on the slaves that have low

00:22:19,010 --> 00:22:26,870
executors and yeah yeah cause pain I

00:22:21,500 --> 00:22:29,870
guess okay yeah thanks yeah there any

00:22:26,870 --> 00:22:31,910
the project teams not want other project

00:22:29,870 --> 00:22:33,559
teams to see their source code or

00:22:31,910 --> 00:22:37,250
anything like that was that a concern um

00:22:33,559 --> 00:22:39,410
as far as the agency we work at it was

00:22:37,250 --> 00:22:43,760
stated that the source code was free to

00:22:39,410 --> 00:22:44,990
view the jobs are not unless asked so

00:22:43,760 --> 00:22:47,660
that's where we use the role based

00:22:44,990 --> 00:22:50,510
strategy plugin and has a regex

00:22:47,660 --> 00:22:52,340
capability so if you name your jobs a

00:22:50,510 --> 00:22:55,400
particular way however you define the

00:22:52,340 --> 00:22:57,830
regex and you give them read access to

00:22:55,400 --> 00:23:00,740
it they're the only ones without admin

00:22:57,830 --> 00:23:03,290
rights who can see the jobs ok so the

00:23:00,740 --> 00:23:06,080
source code is open because they wanted

00:23:03,290 --> 00:23:09,260
it that way ok to see did you enable

00:23:06,080 --> 00:23:10,880
people to create their own job you just

00:23:09,260 --> 00:23:13,040
did use the ownership plugins that

00:23:10,880 --> 00:23:16,850
yeah so there's the ownership role yeah

00:23:13,040 --> 00:23:19,370
early am create role I think call them

00:23:16,850 --> 00:23:22,250
ya somos any Linda the owner on create

00:23:19,370 --> 00:23:23,540
and so they have permission yes okay as

00:23:22,250 --> 00:23:24,890
long as they named their job the proper

00:23:23,540 --> 00:23:31,640
way they'll still continue to see it

00:23:24,890 --> 00:23:33,110
okay yeah he another which one has to in

00:23:31,640 --> 00:23:36,290
terms of that when you're usually the

00:23:33,110 --> 00:23:39,230
regex is I take it that's for the jobs

00:23:36,290 --> 00:23:41,780
that you're going to sign certain people

00:23:39,230 --> 00:23:44,030
to be able to regular crab hopefully

00:23:41,780 --> 00:23:45,740
ldap groups yup yeah that's what's gonna

00:23:44,030 --> 00:23:47,450
ask for you guys using ldap groups for

00:23:45,740 --> 00:23:48,680
these different teams right as much as

00:23:47,450 --> 00:23:50,330
many as we can yeah and then that way

00:23:48,680 --> 00:23:53,090
they can you're not in the business of

00:23:50,330 --> 00:23:59,800
right users they are correct yep thanks

00:23:53,090 --> 00:23:59,800
mm-hmm anything else yeah

00:24:06,310 --> 00:24:12,740
check out the images you are inheriting

00:24:10,070 --> 00:24:15,140
because it's an inherited be a virtual

00:24:12,740 --> 00:24:18,110
machine of some kind technically file

00:24:15,140 --> 00:24:19,820
system but I did hear that there were

00:24:18,110 --> 00:24:23,570
some vulnerabilities discovered in some

00:24:19,820 --> 00:24:27,130
of the open-source ones there are tools

00:24:23,570 --> 00:24:30,650
coming out that I have no of that will

00:24:27,130 --> 00:24:33,980
validate the images that are available

00:24:30,650 --> 00:24:36,290
to you so at least there'll be some want

00:24:33,980 --> 00:24:42,350
someone else checking for security

00:24:36,290 --> 00:24:44,650
purposes the only other thing is with

00:24:42,350 --> 00:24:48,200
docker that I've come to realize is the

00:24:44,650 --> 00:24:49,730
the images are largely and mutable once

00:24:48,200 --> 00:24:52,280
you've created the image not the

00:24:49,730 --> 00:24:54,470
container the image the thing that the

00:24:52,280 --> 00:24:57,230
containers come from they're not

00:24:54,470 --> 00:24:59,380
supposed to be changed so if you're

00:24:57,230 --> 00:25:03,020
planning on doing any kind of updating

00:24:59,380 --> 00:25:04,220
versioning of the images as you go it's

00:25:03,020 --> 00:25:07,600
a little bit more difficult and you'll

00:25:04,220 --> 00:25:07,600
have to do a little bit of work there

00:25:08,230 --> 00:25:18,260
that is your question yeah we haven't

00:25:12,470 --> 00:25:21,530
we've only started using it yeah yeah it

00:25:18,260 --> 00:25:25,990
seems like everybody is an interesting

00:25:21,530 --> 00:25:28,590
way of delivering your software packages

00:25:25,990 --> 00:25:32,730
ready to go

00:25:28,590 --> 00:25:35,940
sure ya know we've we're only a month or

00:25:32,730 --> 00:25:41,340
so in two months maybe but there's

00:25:35,940 --> 00:25:43,080
promise are all these products is using

00:25:41,340 --> 00:25:45,150
able to connect out to the real world

00:25:43,080 --> 00:25:47,490
it's like I work with the federal got a

00:25:45,150 --> 00:25:49,350
contract that is completely closed

00:25:47,490 --> 00:25:53,220
network so we're going to take a lot of

00:25:49,350 --> 00:25:54,270
this yeah ported over yeah well calm so

00:25:53,220 --> 00:25:55,919
all these plugins can be downloaded

00:25:54,270 --> 00:25:59,100
directly from Jenkins's website they've

00:25:55,919 --> 00:26:00,929
got a simple download page you just

00:25:59,100 --> 00:26:02,250
download the file and load it in you

00:26:00,929 --> 00:26:05,610
could technically set up your own I

00:26:02,250 --> 00:26:07,830
believe there's an option in there yeah

00:26:05,610 --> 00:26:10,320
we have currently up Jenkins set up with

00:26:07,830 --> 00:26:12,840
some plugins I know talk i guess more

00:26:10,320 --> 00:26:14,399
about a doctor might be something to

00:26:12,840 --> 00:26:17,190
look into its first I'm hearing of it as

00:26:14,399 --> 00:26:19,950
this conference but seems like

00:26:17,190 --> 00:26:21,090
everyone's out out in the web so on to

00:26:19,950 --> 00:26:24,510
save that was something i was even

00:26:21,090 --> 00:26:25,649
feasible so you can always stand up your

00:26:24,510 --> 00:26:28,350
own i don't know how difficult it is

00:26:25,649 --> 00:26:32,520
i've never had to do it um but I know

00:26:28,350 --> 00:26:35,250
the files are single package JPL i think

00:26:32,520 --> 00:26:39,390
is what they are and then the I got the

00:26:35,250 --> 00:26:40,980
upload option there you go but all the

00:26:39,390 --> 00:26:47,159
plugins that we used here are in the

00:26:40,980 --> 00:26:50,580
free open-source kind of market doctors

00:26:47,159 --> 00:26:57,149
that is to get going depending on the OS

00:26:50,580 --> 00:26:59,760
you're using I believe they're most of

00:26:57,149 --> 00:27:02,190
the new read most of the new distros

00:26:59,760 --> 00:27:06,570
have it built in it's available for mac

00:27:02,190 --> 00:27:08,669
and windows through a port but i assume

00:27:06,570 --> 00:27:11,880
those are coming soon windows officially

00:27:08,669 --> 00:27:15,409
announced support in Windows Server 2016

00:27:11,880 --> 00:27:18,899
i believe so that's promising as well

00:27:15,409 --> 00:27:21,450
for CentOS and red hats it's add the

00:27:18,899 --> 00:27:23,860
right channel and then install from yum

00:27:21,450 --> 00:27:25,840
i got it from the EPL repo i believe

00:27:23,860 --> 00:27:32,520
as long as your kernel version is a

00:27:25,840 --> 00:27:32,520
certain age or newer you're fine yeah

00:27:32,760 --> 00:27:39,210
full disclosure I blades customer I

00:27:35,620 --> 00:27:41,980
stood up a master Jenkins node and three

00:27:39,210 --> 00:27:43,690
slaves on a laptop at home last night

00:27:41,980 --> 00:27:46,150
all but in less than an hour on docker

00:27:43,690 --> 00:27:51,460
so yeah that's how and I'd never done it

00:27:46,150 --> 00:27:54,450
before yeah it's fun so anything else

00:27:51,460 --> 00:27:54,450
all right

00:28:04,950 --> 00:28:07,010

YouTube URL: https://www.youtube.com/watch?v=heOETpMUIbw


