Title: JUC U.S. East 2015 - Scaling Your Jenkins Jobs
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Khai Do, Hewlett Packard 

The OpenStack CI has grown to require over 4,000 Jenkins jobs to build and test across a multitude of configurations. Supporting that many jobs can be quite insane so we created the Jenkins Job Builder (JJB) to help us automate and manage that complexity. This talk is an introduction to JJB and how it helped us scale out our CI.
Captions: 
	00:00:15,240 --> 00:00:24,599
so this is the scaling your Jenkins job

00:00:18,630 --> 00:00:26,939
talk my name is Kai I just to give you

00:00:24,599 --> 00:00:34,940
an introduction to myself i work for HP

00:00:26,939 --> 00:00:40,769
and i work on OpenStack specifically the

00:00:34,940 --> 00:00:42,900
OpenStack infra structure team and this

00:00:40,769 --> 00:00:45,720
is the information if you need to

00:00:42,900 --> 00:00:49,320
contact us for any reason we usually you

00:00:45,720 --> 00:00:52,019
mostly work over IRC as our main

00:00:49,320 --> 00:00:55,760
communications channel but we also

00:00:52,019 --> 00:01:00,239
answer questions from the mailing list

00:00:55,760 --> 00:01:04,070
so it's funny I come to the Jenkins

00:01:00,239 --> 00:01:07,970
conference a few times and there's

00:01:04,070 --> 00:01:11,340
invariably always some talk about

00:01:07,970 --> 00:01:14,909
Jenkins being a good tool for automating

00:01:11,340 --> 00:01:17,460
things but somebody's got to automate

00:01:14,909 --> 00:01:24,329
the Automator and this is the talk about

00:01:17,460 --> 00:01:28,829
automating the Automator so for those

00:01:24,329 --> 00:01:31,219
who don't know what OpenStack is I'll

00:01:28,829 --> 00:01:34,649
just give you an introduction it's

00:01:31,219 --> 00:01:38,009
basically an open source software for

00:01:34,649 --> 00:01:41,249
building public and private clouds you

00:01:38,009 --> 00:01:46,409
can install it onto your laptop or

00:01:41,249 --> 00:01:50,420
desktop machine or or server and use it

00:01:46,409 --> 00:01:53,999
to run an infrastructure as a service

00:01:50,420 --> 00:01:57,990
platform which is kind of like ec2

00:01:53,999 --> 00:02:01,679
amazon ec2 whatever that you can run VMs

00:01:57,990 --> 00:02:06,210
on so that's I work on the

00:02:01,679 --> 00:02:12,690
infrastructure to keep this application

00:02:06,210 --> 00:02:15,270
running so I guess the one thing I'd

00:02:12,690 --> 00:02:20,300
like to stress about this this slide is

00:02:15,270 --> 00:02:25,650
that we we run open source software and

00:02:20,300 --> 00:02:28,260
the infrastructure is a big fan of open

00:02:25,650 --> 00:02:32,930
source and everything we do

00:02:28,260 --> 00:02:37,739
is open source that goes for all the

00:02:32,930 --> 00:02:40,760
OpenStack projects any of the CI around

00:02:37,739 --> 00:02:44,129
OpenStack so all the automation and

00:02:40,760 --> 00:02:49,260
configuration management so like all of

00:02:44,129 --> 00:02:51,360
our puppet manifests are are open that

00:02:49,260 --> 00:02:56,750
you can view and that you can reuse and

00:02:51,360 --> 00:03:00,690
we put a lot of effort in making our

00:02:56,750 --> 00:03:05,310
downstream able to reuse those

00:03:00,690 --> 00:03:09,629
components so if you like you can check

00:03:05,310 --> 00:03:12,450
out our repositories and and a lot of

00:03:09,629 --> 00:03:18,599
companies do and they reuse what we use

00:03:12,450 --> 00:03:20,010
for our infrastructure so just to give

00:03:18,599 --> 00:03:23,040
you an idea i'll give you some

00:03:20,010 --> 00:03:28,220
background on the types of tools we use

00:03:23,040 --> 00:03:33,000
in our CI platform we use storyboard for

00:03:28,220 --> 00:03:37,620
our issue tracking we use get as our sem

00:03:33,000 --> 00:03:42,690
we use garrett for our code reviews so

00:03:37,620 --> 00:03:44,669
that's a kobe view tool zoo is something

00:03:42,690 --> 00:03:49,169
that was created by OpenStack and that

00:03:44,669 --> 00:03:54,769
is to run our pipeline of jobs that we

00:03:49,169 --> 00:03:58,949
have set up in Jenkins we use gierman

00:03:54,769 --> 00:04:03,900
for distributing our jobs we use Jenkins

00:03:58,949 --> 00:04:07,049
obviously and Jenkins we've developed to

00:04:03,900 --> 00:04:09,629
pluck to or maybe a little bit maybe

00:04:07,049 --> 00:04:12,900
more plugins than this but we use these

00:04:09,629 --> 00:04:15,090
two plugins mainly it's the Jenkins job

00:04:12,900 --> 00:04:17,220
builder well I'm sorry let me take that

00:04:15,090 --> 00:04:20,130
back Jenkins job builder is not a

00:04:17,220 --> 00:04:21,870
plug-in it's a Python tool and I'll go

00:04:20,130 --> 00:04:25,949
over that today that's what my talks

00:04:21,870 --> 00:04:29,760
about and we use a gearman plugin and

00:04:25,949 --> 00:04:34,110
that is a plug-in for Jenkins and we do

00:04:29,760 --> 00:04:39,919
we use that plugin to distribute our

00:04:34,110 --> 00:04:39,919
masters so we have distributed masters

00:04:40,070 --> 00:04:46,770
what was the other one the wii u's

00:04:42,810 --> 00:04:49,710
devstack devstack is a tool to is a

00:04:46,770 --> 00:04:52,440
development platform for running

00:04:49,710 --> 00:04:56,610
OpenStack so we use that for a lot of

00:04:52,440 --> 00:04:58,139
our testing we use no pool which is

00:04:56,610 --> 00:05:02,599
another thing that was created by

00:04:58,139 --> 00:05:02,599
OpenStack and that is to allow us to

00:05:03,889 --> 00:05:11,849
provision our slaves are Jenkins slaves

00:05:08,070 --> 00:05:13,919
and auto scale those slaves so we can

00:05:11,849 --> 00:05:20,250
bring them up when we need them and we

00:05:13,919 --> 00:05:21,690
kill them when we don't use them so we

00:05:20,250 --> 00:05:24,479
use a lot of different tools basically

00:05:21,690 --> 00:05:28,529
in OpenStack just to give you an idea of

00:05:24,479 --> 00:05:32,279
what the these are so this is our kind

00:05:28,529 --> 00:05:37,950
of workflow that we have shrink this a

00:05:32,279 --> 00:05:40,260
little bit so it's kind of your typical

00:05:37,950 --> 00:05:44,550
workflow except that it might be a

00:05:40,260 --> 00:05:53,460
little bigger than others so the blue

00:05:44,550 --> 00:05:55,409
monitor is your commit to Garrett which

00:05:53,460 --> 00:05:59,159
is the first point of entry and then

00:05:55,409 --> 00:06:02,360
Garrett is a code review tool so once it

00:05:59,159 --> 00:06:06,029
hits Garrett week overview that manually

00:06:02,360 --> 00:06:09,300
and then that gets passed through to

00:06:06,029 --> 00:06:13,409
zool which goes into the gearman

00:06:09,300 --> 00:06:16,110
pipeline and onto our Jenkins servers

00:06:13,409 --> 00:06:19,440
are Jenkins masters and you'll see that

00:06:16,110 --> 00:06:23,699
we have multiple Jenkins masters that

00:06:19,440 --> 00:06:27,330
run our jobs so those jobs go through

00:06:23,699 --> 00:06:31,500
Jenkins it gets executed it's passed

00:06:27,330 --> 00:06:36,150
back and gets passed back to Garrett and

00:06:31,500 --> 00:06:41,630
our developers the tool they look at

00:06:36,150 --> 00:06:45,719
kind of on a daily basis is Garrett and

00:06:41,630 --> 00:06:49,289
they look there for once they submit a

00:06:45,719 --> 00:06:53,669
patch they get a result and it would be

00:06:49,289 --> 00:07:09,990
in our Garrett you I so they rarely look

00:06:53,669 --> 00:07:15,449
at Jenkins actually so so I'll reiterate

00:07:09,990 --> 00:07:18,119
this I guess our CI workflow it runs so

00:07:15,449 --> 00:07:24,240
the CI workflow I showed you in the last

00:07:18,119 --> 00:07:26,550
slide this thing we use it to run of our

00:07:24,240 --> 00:07:31,680
OpenStack jobs so those are the core

00:07:26,550 --> 00:07:35,580
OpenStack projects so to name a few like

00:07:31,680 --> 00:07:38,639
Nova cinders Swift that those projects

00:07:35,580 --> 00:07:41,939
make up OpenStack we use them for their

00:07:38,639 --> 00:07:43,709
our documentation jobs so like we have a

00:07:41,939 --> 00:07:45,209
bunch of documentation for each one of

00:07:43,709 --> 00:07:48,149
those projects that need to be built

00:07:45,209 --> 00:07:52,740
that goes through Jenkins as well we use

00:07:48,149 --> 00:07:55,800
them for translations and we use them

00:07:52,740 --> 00:08:00,449
for our operations job so any Pat like

00:07:55,800 --> 00:08:04,949
we use puppet we use mainly puppet but

00:08:00,449 --> 00:08:06,659
we also test our puppet so we every time

00:08:04,949 --> 00:08:10,169
we have a change to a puppet manifest

00:08:06,659 --> 00:08:13,969
that goes through our CI and that gets

00:08:10,169 --> 00:08:16,229
checked as well and we have some other

00:08:13,969 --> 00:08:19,469
utilities and miscellaneous stuff that

00:08:16,229 --> 00:08:25,139
we use we we use the our automation

00:08:19,469 --> 00:08:30,199
system on so to give you an idea of the

00:08:25,139 --> 00:08:34,889
scale that we run our CI a-- we have 500

00:08:30,199 --> 00:08:41,069
around 500 git repositories on in the

00:08:34,889 --> 00:08:44,189
OpenStack domain that if you submit a

00:08:41,069 --> 00:08:47,939
job to that it'll run you submit a patch

00:08:44,189 --> 00:08:53,959
for a test will run on it so that's 500

00:08:47,939 --> 00:08:58,860
get projects 5,000 that we need

00:08:53,959 --> 00:09:01,760
apparently we need 5,000 Jenkins jobs to

00:08:58,860 --> 00:09:02,850
run the builds and the testing and the

00:09:01,760 --> 00:09:06,480
documentation

00:09:02,850 --> 00:09:10,170
for those projects we have 10 Jenkins

00:09:06,480 --> 00:09:12,990
masters and on each master we have about

00:09:10,170 --> 00:09:17,069
a hundred slaves so we distribute the

00:09:12,990 --> 00:09:20,399
Masters horizontally and we attach 100

00:09:17,069 --> 00:09:23,819
Jenkins master to each I mean Jenkins

00:09:20,399 --> 00:09:28,709
slaves to each master and all of that

00:09:23,819 --> 00:09:32,310
kind of allows us to run about 24,000

00:09:28,709 --> 00:09:38,329
jobs a day so anytime you submit a patch

00:09:32,310 --> 00:09:43,199
it runs a job or multiple jobs and on a

00:09:38,329 --> 00:09:48,660
heavy ish day we'll run probably 24,000

00:09:43,199 --> 00:10:02,730
jobs so I think our systems pretty large

00:09:48,660 --> 00:10:07,199
scale so so the so let me take a step

00:10:02,730 --> 00:10:12,360
back and say I really like Jenkins I

00:10:07,199 --> 00:10:15,389
really think it's a great tool and this

00:10:12,360 --> 00:10:18,750
is a great conference Jenkins is really

00:10:15,389 --> 00:10:22,130
good until you get to a certain point

00:10:18,750 --> 00:10:26,519
and when you run it at this high scale

00:10:22,130 --> 00:10:31,019
you'll hit areas where Jenkins may not

00:10:26,519 --> 00:10:35,339
serve all your needs and when you have

00:10:31,019 --> 00:10:37,170
that many projects and you have a branch

00:10:35,339 --> 00:10:40,019
obviously everybody runs into this

00:10:37,170 --> 00:10:42,870
problem at some point probably but you

00:10:40,019 --> 00:10:47,069
have so many projects so many branches

00:10:42,870 --> 00:10:51,149
so many jobs and job configurations and

00:10:47,069 --> 00:10:53,670
then on top of that you may have jobs

00:10:51,149 --> 00:10:55,920
that serve as some pipeline and we have

00:10:53,670 --> 00:10:58,949
a couple of different pipelines you know

00:10:55,920 --> 00:11:04,430
we have a gate a check pipeline where we

00:10:58,949 --> 00:11:09,000
run certain set of jobs on the initial

00:11:04,430 --> 00:11:11,550
commit but they don't go through merges

00:11:09,000 --> 00:11:15,410
yet and then we have another pipeline

00:11:11,550 --> 00:11:18,740
that when everything when that patch

00:11:15,410 --> 00:11:22,850
passes all the tests and passes manual

00:11:18,740 --> 00:11:26,149
inspection so code review then we have

00:11:22,850 --> 00:11:29,569
another pipeline that will but that was

00:11:26,149 --> 00:11:33,439
run those jobs again and merge them and

00:11:29,569 --> 00:11:36,189
we have another pipeline for periodic

00:11:33,439 --> 00:11:39,740
job to what we call so they may run

00:11:36,189 --> 00:11:41,060
maintenance task 3 a.m. every day or

00:11:39,740 --> 00:11:43,639
something like that so those are the

00:11:41,060 --> 00:11:47,930
different pipelines that we have so what

00:11:43,639 --> 00:11:52,160
you what you wind up with is a large

00:11:47,930 --> 00:11:55,310
combination of jobs and we found out

00:11:52,160 --> 00:11:59,930
early in the process you know like this

00:11:55,310 --> 00:12:02,000
is kind of the idea that what we what we

00:11:59,930 --> 00:12:05,420
were facing so each one of these

00:12:02,000 --> 00:12:07,850
combinations what a typical Jenkins user

00:12:05,420 --> 00:12:09,800
would do is create a job for every one

00:12:07,850 --> 00:12:14,149
of those combinations you know you might

00:12:09,800 --> 00:12:18,519
have to run Nova might be your project

00:12:14,149 --> 00:12:21,560
than you run it against Python 27 on

00:12:18,519 --> 00:12:23,990
master and those may be your unit tests

00:12:21,560 --> 00:12:29,509
and then you have 14 performances you

00:12:23,990 --> 00:12:31,370
won't have one for a different branch

00:12:29,509 --> 00:12:33,439
right so you have all these different

00:12:31,370 --> 00:12:36,259
combinations and you have to make up all

00:12:33,439 --> 00:12:38,120
these different jobs and typically what

00:12:36,259 --> 00:12:41,810
you do is you will name them like this

00:12:38,120 --> 00:12:43,550
in your Jenkins can confer job

00:12:41,810 --> 00:12:45,860
configuration and every time you have to

00:12:43,550 --> 00:12:48,800
do that you have to go into the UI and

00:12:45,860 --> 00:12:52,509
you have to maybe likes a duplicate this

00:12:48,800 --> 00:12:58,639
job and make a little change in your

00:12:52,509 --> 00:13:01,009
configuration so I went back and looked

00:12:58,639 --> 00:13:06,350
at kind of our trend of jobs that we

00:13:01,009 --> 00:13:09,680
were facing and in the we found out this

00:13:06,350 --> 00:13:14,170
was a problem much earlier on but I only

00:13:09,680 --> 00:13:16,490
went back about two and a half years and

00:13:14,170 --> 00:13:20,120
you know two and a half years ago we had

00:13:16,490 --> 00:13:23,720
375 jobs now we have close to six

00:13:20,120 --> 00:13:25,910
thousand jobs and it's a as you can see

00:13:23,720 --> 00:13:29,110
it's an exponential growth and we cannot

00:13:25,910 --> 00:13:29,110
really sustain that

00:13:30,090 --> 00:13:38,680
so some of the problems with Jenkins is

00:13:33,580 --> 00:13:42,370
the each job is one xml file an XML is

00:13:38,680 --> 00:13:44,860
kind of difficult to maintain people

00:13:42,370 --> 00:13:48,040
copy those xmls and then they become

00:13:44,860 --> 00:13:50,830
different from each copy because

00:13:48,040 --> 00:13:53,710
everybody makes a copy and then changes

00:13:50,830 --> 00:13:55,750
a little bit and then you have these all

00:13:53,710 --> 00:13:59,670
these divergent jobs that are kind of

00:13:55,750 --> 00:14:06,430
hard to debug and maintain really and

00:13:59,670 --> 00:14:09,040
there's a note no real way to mimic jobs

00:14:06,430 --> 00:14:12,810
with similar configurations now I think

00:14:09,040 --> 00:14:16,750
the workflow plugin has addressed that

00:14:12,810 --> 00:14:19,930
and some of the other plugins as well

00:14:16,750 --> 00:14:22,750
like the dsl plugin but at the time we

00:14:19,930 --> 00:14:32,170
created the Jenkins job builder this

00:14:22,750 --> 00:14:34,240
those weren't available so so now the

00:14:32,170 --> 00:14:37,570
Jenkins job builder I think addresses

00:14:34,240 --> 00:14:39,490
all those kind of issues so this is kind

00:14:37,570 --> 00:14:43,900
of the idea behind the Jenkins job

00:14:39,490 --> 00:14:47,880
builder it's the command line tool that

00:14:43,900 --> 00:14:50,940
can manage and create Jenkins jobs and

00:14:47,880 --> 00:14:53,800
job definitions are you in llamo

00:14:50,940 --> 00:14:57,310
templates we have these templates that

00:14:53,800 --> 00:15:00,520
can define multiple jobs in a single

00:14:57,310 --> 00:15:03,970
file so if you want to update ten jobs

00:15:00,520 --> 00:15:06,910
on one time you can edit one file and

00:15:03,970 --> 00:15:12,370
update all those ten jobs instead of

00:15:06,910 --> 00:15:14,980
having to update 10 XML files so we have

00:15:12,370 --> 00:15:18,450
support where we provide support for

00:15:14,980 --> 00:15:25,110
Jenkins job builder from Python 27 to 34

00:15:18,450 --> 00:15:27,840
we just dropped support for 26 because

00:15:25,110 --> 00:15:34,330
OpenStack made a decision to just drop

00:15:27,840 --> 00:15:38,390
26 support again reiterate it's open

00:15:34,330 --> 00:15:45,770
source we welcome contributions or

00:15:38,390 --> 00:15:49,520
oops and it's under active development I

00:15:45,770 --> 00:15:53,230
see I've actually met some Jenkins job

00:15:49,520 --> 00:16:00,020
builder contributors here and users so

00:15:53,230 --> 00:16:02,860
good to see them so now we have the

00:16:00,020 --> 00:16:05,030
Jenkins gel builder and what we get is

00:16:02,860 --> 00:16:09,650
again the blue line shows the

00:16:05,030 --> 00:16:11,780
exponential growth in a jobs but the red

00:16:09,650 --> 00:16:14,390
line is our Jenkins gel builder

00:16:11,780 --> 00:16:17,870
definitions so those are the files that

00:16:14,390 --> 00:16:21,140
create all these Jenkins jobs and those

00:16:17,870 --> 00:16:26,840
don't increase too much and right now we

00:16:21,140 --> 00:16:30,230
have from 22 to 87 now 87 we have 87

00:16:26,840 --> 00:16:33,590
file Jenkins gel builder files to

00:16:30,230 --> 00:16:37,400
generate almost 6,000 jobs so we only

00:16:33,590 --> 00:16:40,990
have to maintain 87 files so I think

00:16:37,400 --> 00:16:40,990
that's kind of like the power of it

00:16:43,990 --> 00:16:55,089
so we have this Jenkins job filter tool

00:16:47,980 --> 00:16:58,300
and I'll just tell you like how we we

00:16:55,089 --> 00:17:06,100
actually use Jenkins job builders in our

00:16:58,300 --> 00:17:10,900
everyday work so all the jobs are all of

00:17:06,100 --> 00:17:14,679
our Jenkins are managed all of our

00:17:10,900 --> 00:17:17,709
Jenkins jobs on Jenkins is managed by

00:17:14,679 --> 00:17:23,199
Jenkins job builder so no we don't give

00:17:17,709 --> 00:17:28,350
access to users to to delete jobs or add

00:17:23,199 --> 00:17:30,250
new jobs so we don't really use the UI

00:17:28,350 --> 00:17:32,110
everything goes through Jenkins jump

00:17:30,250 --> 00:17:36,480
over and Jenkins job builder is a

00:17:32,110 --> 00:17:36,480
command line tool that we just execute

00:17:39,120 --> 00:17:45,370
Jenkins job Jenkins job definitions are

00:17:43,120 --> 00:17:54,670
in llamo file so now they're nice and

00:17:45,370 --> 00:17:57,910
easy read job creation jacob b creates

00:17:54,670 --> 00:18:03,120
multiple jobs from one definition as i

00:17:57,910 --> 00:18:06,160
said before we have JJ be working with

00:18:03,120 --> 00:18:09,730
puppet soap up anytime there's a change

00:18:06,160 --> 00:18:13,450
to JJ be definition so like a job

00:18:09,730 --> 00:18:16,750
definition puppet will rerun Jenkins job

00:18:13,450 --> 00:18:20,410
builder and will update Jenkins with the

00:18:16,750 --> 00:18:27,520
new jobs or if the jobs haven't changed

00:18:20,410 --> 00:18:29,890
it will leave it alone so before I

00:18:27,520 --> 00:18:35,440
describe that I want to describe the

00:18:29,890 --> 00:18:39,100
jobs in in the llamo but before that I

00:18:35,440 --> 00:18:42,070
think I'd like to do a demo just to give

00:18:39,100 --> 00:18:44,679
you an idea how it works so the first

00:18:42,070 --> 00:18:47,980
step is obviously just install it hippin

00:18:44,679 --> 00:18:51,220
tip install Jenkins gel builder it's a

00:18:47,980 --> 00:18:53,290
Python application and we usually like

00:18:51,220 --> 00:18:56,800
to release maybe every three months and

00:18:53,290 --> 00:18:59,020
it's on pi PI so that's all you do just

00:18:56,800 --> 00:19:03,070
install one time and then you run

00:18:59,020 --> 00:19:06,490
Jenkins jobs dash dash comp that's the

00:19:03,070 --> 00:19:09,130
configuration file my Jenkins den up and

00:19:06,490 --> 00:19:12,970
i'll show you that and then you run the

00:19:09,130 --> 00:19:16,450
update command with the yamo file that

00:19:12,970 --> 00:19:22,390
contains your definition so i'll go

00:19:16,450 --> 00:19:30,700
through that now so I've set up a darker

00:19:22,390 --> 00:19:36,550
image with Jenkins so if i run a job i

00:19:30,700 --> 00:19:40,690
have and it says foo and what i'm going

00:19:36,550 --> 00:19:45,910
to do is say okay update this foo job

00:19:40,690 --> 00:19:48,419
for me on Jenkins oh let me increase the

00:19:45,910 --> 00:19:48,419
font here

00:19:56,169 --> 00:20:10,059
I run that and says it's updated and

00:19:59,129 --> 00:20:18,549
then I refresh and that foo appears and

00:20:10,059 --> 00:20:26,739
then if I say now I want to update the

00:20:18,549 --> 00:20:36,159
job and delete old jobs Iran and it will

00:20:26,739 --> 00:20:38,889
get rid of bar so no need to restart

00:20:36,159 --> 00:20:41,460
Jenkins or anything just update your

00:20:38,889 --> 00:20:41,460
jobs like that

00:20:56,180 --> 00:21:03,720
so that's the basic idea just define

00:21:00,900 --> 00:21:08,640
your jobs in your llamo and update them

00:21:03,720 --> 00:21:14,130
in Jenkins so here's a simple llamo bit

00:21:08,640 --> 00:21:17,790
job definition so this is a file it's

00:21:14,130 --> 00:21:23,520
the files simple llamo and in this file

00:21:17,790 --> 00:21:27,990
you have a job and with the name and a

00:21:23,520 --> 00:21:30,750
node the node says run this on a slave

00:21:27,990 --> 00:21:36,180
named centos basically is what that says

00:21:30,750 --> 00:21:38,520
and all it's doing is setting up a

00:21:36,180 --> 00:21:40,260
builder like in Jenkins you'll have that

00:21:38,520 --> 00:21:44,550
configuration and one of them is that

00:21:40,260 --> 00:21:46,050
you can run a builder and you will you

00:21:44,550 --> 00:21:47,640
can run a shell builder you can run a

00:21:46,050 --> 00:21:51,030
maven builder in this case we're going

00:21:47,640 --> 00:21:55,160
to run a shell shell builder now it's

00:21:51,030 --> 00:21:58,080
going to do is echo this is my job so

00:21:55,160 --> 00:22:01,430
Jenkins Jenkins job builder will take

00:21:58,080 --> 00:22:07,290
this yamo and convert it to XML which is

00:22:01,430 --> 00:22:10,500
that Jenkins XML ja Jenkins XML that

00:22:07,290 --> 00:22:18,480
defines a job in Jenkins and that's what

00:22:10,500 --> 00:22:22,560
this looks like so you can see on the

00:22:18,480 --> 00:22:24,090
left hand side I think the green it's

00:22:22,560 --> 00:22:27,870
not really good coloring sorry about

00:22:24,090 --> 00:22:35,820
that but on the top you'll see it

00:22:27,870 --> 00:22:38,030
produce a simple XML file and then down

00:22:35,820 --> 00:22:44,940
here you can see the assigned node is

00:22:38,030 --> 00:22:49,070
centos that's what we defined in our

00:22:44,940 --> 00:22:49,070
llamo nodes and toss

00:22:50,840 --> 00:22:58,220
and you will see that this is where echo

00:22:54,650 --> 00:23:04,280
this is my job that is the shell builder

00:22:58,220 --> 00:23:07,130
and so basically this yamo produces this

00:23:04,280 --> 00:23:11,170
XML which is what Jenkins understands

00:23:07,130 --> 00:23:17,780
and this is the XML that gets uploaded

00:23:11,170 --> 00:23:23,090
to Jenkins that sets up the job so a

00:23:17,780 --> 00:23:25,220
little bit more the power in Jenkins gel

00:23:23,090 --> 00:23:28,430
builder is actually in the templates

00:23:25,220 --> 00:23:32,180
that's what allows you to create many

00:23:28,430 --> 00:23:35,570
jobs from one file ok so I'll give you

00:23:32,180 --> 00:23:39,640
an example of that here here's a

00:23:35,570 --> 00:23:45,050
definition of a template and these are

00:23:39,640 --> 00:23:49,130
variables the brackets are variables and

00:23:45,050 --> 00:23:53,060
those variables come from the bottom the

00:23:49,130 --> 00:23:55,040
last line was his name pi version task

00:23:53,060 --> 00:23:57,200
branch so you can set up all your

00:23:55,040 --> 00:24:00,020
variables in this project so the

00:23:57,200 --> 00:24:02,660
project's name is Nova and all the

00:24:00,020 --> 00:24:06,880
variables are set up so you have the PI

00:24:02,660 --> 00:24:09,950
version and the tests and within each

00:24:06,880 --> 00:24:13,760
variable you can set up different things

00:24:09,950 --> 00:24:18,020
so like 4 PI 26 you can set it up to run

00:24:13,760 --> 00:24:20,690
against the stable 10 branch for Python

00:24:18,020 --> 00:24:26,570
27 you'll want to run it against master

00:24:20,690 --> 00:24:32,210
let's say and for tests in that case you

00:24:26,570 --> 00:24:34,490
want to only fail oops sorry you on unit

00:24:32,210 --> 00:24:38,540
test failure or whatever you may only

00:24:34,490 --> 00:24:40,880
want to send mail to developers and on

00:24:38,540 --> 00:24:44,150
performance s value you may only want to

00:24:40,880 --> 00:24:46,340
send mail to testers right so that's

00:24:44,150 --> 00:24:51,470
kind of a use case that a lot of people

00:24:46,340 --> 00:24:54,770
have so now what that produces it

00:24:51,470 --> 00:25:00,340
actually produces for jobs it with those

00:24:54,770 --> 00:25:05,660
combinations and so

00:25:00,340 --> 00:25:07,490
again to run Jenkins stop over you run

00:25:05,660 --> 00:25:10,880
it with the you can run it with an

00:25:07,490 --> 00:25:16,460
output command which outputs the XML

00:25:10,880 --> 00:25:21,980
into you files and then you just pass at

00:25:16,460 --> 00:25:25,460
your llamo and it will generate these

00:25:21,980 --> 00:25:30,320
four different files so after the output

00:25:25,460 --> 00:25:33,800
the names of those files match up with

00:25:30,320 --> 00:25:40,070
the green name pi version test and

00:25:33,800 --> 00:25:44,270
branch so what that one llamo file did

00:25:40,070 --> 00:25:48,050
was produced four of these xml files for

00:25:44,270 --> 00:25:52,400
you which are for Jenkins jobs in these

00:25:48,050 --> 00:25:59,060
different combinations so if you need to

00:25:52,400 --> 00:26:03,250
change well a thing in for jobs you can

00:25:59,060 --> 00:26:03,250
just go through that one file to do that

00:26:04,600 --> 00:26:09,530
so to upload upload those jobs to

00:26:07,880 --> 00:26:12,770
Jenkins you can you just run that

00:26:09,530 --> 00:26:15,260
command on chickens jobs pass it the

00:26:12,770 --> 00:26:18,410
configuration update and then pass it

00:26:15,260 --> 00:26:21,020
the llamo file and this is what the

00:26:18,410 --> 00:26:23,900
server or the configuration looks like

00:26:21,020 --> 00:26:25,720
server I and I basically you're just

00:26:23,900 --> 00:26:29,810
giving you're just telling it where to

00:26:25,720 --> 00:26:37,970
which Jenkins to give it to or top data

00:26:29,810 --> 00:26:43,990
to so that's suck sound clears everybody

00:26:37,970 --> 00:26:43,990
is that confusing at all no okay cool

00:26:47,380 --> 00:26:56,240
so so I just picked out one of the sorry

00:26:52,309 --> 00:27:00,919
I just picked out one of the jobs to

00:26:56,240 --> 00:27:08,720
show you in XML and this happens to be

00:27:00,919 --> 00:27:11,299
the Nova pie 27 unit master XML file so

00:27:08,720 --> 00:27:15,940
in this file you'll see like you can

00:27:11,299 --> 00:27:20,120
have a git checkout master branch and

00:27:15,940 --> 00:27:26,090
you want to email to developers in this

00:27:20,120 --> 00:27:33,519
case if it was the performance test file

00:27:26,090 --> 00:27:35,929
then the mail too would be two testers

00:27:33,519 --> 00:27:37,639
because really that's what you're doing

00:27:35,929 --> 00:27:40,309
when you're creating new Jenkins shops

00:27:37,639 --> 00:27:45,139
you're copying a job and you're tweaking

00:27:40,309 --> 00:27:55,620
it a little bit most the time and that's

00:27:45,139 --> 00:28:03,350
what the templates allow you to do yeah

00:27:55,620 --> 00:28:03,350
oh sure are you talking about this or

00:28:15,539 --> 00:28:21,889
okay so i think i've talked about some

00:28:18,720 --> 00:28:25,830
of the benefits of reiterate you'll have

00:28:21,889 --> 00:28:27,749
with the jenkins job builder you have

00:28:25,830 --> 00:28:30,659
one common definition for multiple jobs

00:28:27,749 --> 00:28:34,019
so it allows you to create many jobs or

00:28:30,659 --> 00:28:39,090
manage many jobs in one in an efficient

00:28:34,019 --> 00:28:41,399
manner it allows you to define common

00:28:39,090 --> 00:28:49,320
parameters for all jobs in one place as

00:28:41,399 --> 00:28:52,259
well so you know one example that where

00:28:49,320 --> 00:28:56,549
that could be useful if is if you wanted

00:28:52,259 --> 00:28:59,369
to maybe you defined in one yamo file

00:28:56,549 --> 00:29:01,440
you need to find ten Jenkins jobs and in

00:28:59,369 --> 00:29:05,489
those ten Jenkins jobs you want to

00:29:01,440 --> 00:29:07,470
change the polling time for your SEM or

00:29:05,489 --> 00:29:09,450
something like that you don't have to go

00:29:07,470 --> 00:29:11,460
into 10 different files to change that

00:29:09,450 --> 00:29:14,549
you can change it just in one file and

00:29:11,460 --> 00:29:17,249
it gets propagated to 10 jobs and those

00:29:14,549 --> 00:29:20,309
jobs just get regenerated in Jenkins or

00:29:17,249 --> 00:29:22,099
with JJ be so then you just save

00:29:20,309 --> 00:29:29,340
yourself the trouble having to do it

00:29:22,099 --> 00:29:32,999
again and again you'll have a lot less

00:29:29,340 --> 00:29:35,940
snowflakes because these jobs you've

00:29:32,999 --> 00:29:39,389
created the traditional way of going

00:29:35,940 --> 00:29:42,859
into the UI and and making slight

00:29:39,389 --> 00:29:46,109
modifications well now you can just

00:29:42,859 --> 00:29:52,950
create all those jobs in and they're

00:29:46,109 --> 00:29:54,659
they're all common now in one file again

00:29:52,950 --> 00:29:58,940
job definitions are easy to read and

00:29:54,659 --> 00:30:02,489
update and in general I mean get

00:29:58,940 --> 00:30:04,619
basically Jenkins job builders provides

00:30:02,489 --> 00:30:07,739
just an easier more efficient way to

00:30:04,619 --> 00:30:11,759
create and maintain jobs when you're

00:30:07,739 --> 00:30:15,389
when you have lots and lots of jobs that

00:30:11,759 --> 00:30:21,990
becomes very important and you know if

00:30:15,389 --> 00:30:25,679
anybody gets to that point you

00:30:21,990 --> 00:30:31,950
may want to check out Jenkins child so

00:30:25,679 --> 00:30:36,510
so in this case it allowed us to to to

00:30:31,950 --> 00:30:42,000
let the developers own their own jobs so

00:30:36,510 --> 00:30:45,420
they so in our CI system we do the

00:30:42,000 --> 00:30:46,559
testers don't create the jobs it's the

00:30:45,420 --> 00:30:48,960
developers that create their own jobs

00:30:46,559 --> 00:30:51,000
and they maintain their own jobs so

00:30:48,960 --> 00:30:53,130
anything that they want to want change

00:30:51,000 --> 00:31:00,630
they have to put in a change request for

00:30:53,130 --> 00:31:03,090
it themselves so other features uh I

00:31:00,630 --> 00:31:04,950
mean I don't know I just probably went

00:31:03,090 --> 00:31:06,470
through some of these already but these

00:31:04,950 --> 00:31:11,010
are generally like the features of

00:31:06,470 --> 00:31:14,700
Jenkins job builders it uses the rest

00:31:11,010 --> 00:31:19,610
api so the Jenkins REST API it it we

00:31:14,700 --> 00:31:24,330
created a library called Python Jenkins

00:31:19,610 --> 00:31:27,300
that uses the Jenkins API for logging in

00:31:24,330 --> 00:31:31,980
and creating a single job and Jenkins

00:31:27,300 --> 00:31:34,730
job builder uses that library and just

00:31:31,980 --> 00:31:34,730
expands on that

00:31:43,430 --> 00:31:48,920
there's a concept of default definitions

00:31:46,820 --> 00:31:51,920
in Jenkins job builder where you can

00:31:48,920 --> 00:31:54,110
setup configuration definitions that are

00:31:51,920 --> 00:31:57,410
the default and then you can override

00:31:54,110 --> 00:31:59,870
them in your subsequent jobs there are

00:31:57,410 --> 00:32:03,050
macro definitions which allow you to

00:31:59,870 --> 00:32:06,800
define a complete plug-in that you can

00:32:03,050 --> 00:32:11,000
then reuse or you can also set up macros

00:32:06,800 --> 00:32:14,000
where it's running multiple plugins at a

00:32:11,000 --> 00:32:19,540
time and what you can do is reuse those

00:32:14,000 --> 00:32:21,920
macros in your jobs job definitions and

00:32:19,540 --> 00:32:26,300
again I already told you about the

00:32:21,920 --> 00:32:28,540
templates templates allow you to do that

00:32:26,300 --> 00:32:34,640
thing where you can create many jobs

00:32:28,540 --> 00:32:40,490
with just one file you can group jobs

00:32:34,640 --> 00:32:43,580
together you can there's a feature that

00:32:40,490 --> 00:32:54,560
allows you to test the jobs before you

00:32:43,580 --> 00:33:01,310
deploy them so let's let me see if I can

00:32:54,560 --> 00:33:09,170
give you a demo of that so so instead of

00:33:01,310 --> 00:33:14,200
update I go and I run tests and that

00:33:09,170 --> 00:33:17,780
will show me the XML running on my local

00:33:14,200 --> 00:33:20,150
running on my local machine before it

00:33:17,780 --> 00:33:31,070
gets deployed to Jenkins so then you can

00:33:20,150 --> 00:33:34,760
check that let's see so somewhat it's a

00:33:31,070 --> 00:33:37,550
very well documented it has a unit test

00:33:34,760 --> 00:33:43,310
for it so every contribution usually we

00:33:37,550 --> 00:33:45,920
like to have a unit test for it it has a

00:33:43,310 --> 00:33:50,360
cache that allows you to update jobs in

00:33:45,920 --> 00:33:52,190
an idempotent way where if you if the

00:33:50,360 --> 00:33:56,009
job already exists it won't recreate

00:33:52,190 --> 00:33:59,620
that job if nothing has changed for it

00:33:56,009 --> 00:34:03,820
so we go so the future improvements for

00:33:59,620 --> 00:34:06,279
Jenkins gel builder so there's no folder

00:34:03,820 --> 00:34:12,849
support right now but there's already a

00:34:06,279 --> 00:34:18,339
couple patches for that coming in so i'm

00:34:12,849 --> 00:34:20,230
imagining be online pretty soon we'd

00:34:18,339 --> 00:34:24,250
like that yeah validation of llamo

00:34:20,230 --> 00:34:27,639
metadata improved performance of llamo

00:34:24,250 --> 00:34:30,129
to xml parsing improve performance of

00:34:27,639 --> 00:34:34,899
job uploads job Lobos can be a little

00:34:30,129 --> 00:34:37,750
slow so i think they're only done on a

00:34:34,899 --> 00:34:39,849
single thread i think there's a there's

00:34:37,750 --> 00:34:45,250
some patches coming in for wanting to do

00:34:39,849 --> 00:34:48,280
it on multiple threads and additional

00:34:45,250 --> 00:34:50,470
jenkins plug-in support so every there's

00:34:48,280 --> 00:34:53,560
a little bit of work the upfront work

00:34:50,470 --> 00:34:56,829
when you need a plugin supported but i

00:34:53,560 --> 00:34:59,560
think we already support a little bit

00:34:56,829 --> 00:35:02,829
more than two than 200 plugin jenkins

00:34:59,560 --> 00:35:04,270
plugins already so it's quite a bit a

00:35:02,829 --> 00:35:07,720
big number of plugins that are already

00:35:04,270 --> 00:35:12,550
supported and again it's open source

00:35:07,720 --> 00:35:14,859
you're free to contribute so i added

00:35:12,550 --> 00:35:17,349
some references to my slides but i don't

00:35:14,859 --> 00:35:20,010
want to go through that you just these

00:35:17,349 --> 00:35:24,569
slides will be available at this

00:35:20,010 --> 00:35:26,920
location so you can get it from there

00:35:24,569 --> 00:35:32,079
but otherwise i'd like to open it up for

00:35:26,920 --> 00:35:35,010
questions if there are any could you

00:35:32,079 --> 00:35:38,430
please use the mic i think they want

00:35:35,010 --> 00:35:38,430
everybody to hear

00:35:43,619 --> 00:35:48,999
hello I have a couple of questions about

00:35:46,809 --> 00:35:51,670
I'm just trying to look at this and

00:35:48,999 --> 00:35:54,940
compare it with the workflow it looks

00:35:51,670 --> 00:35:57,130
like I mean that could be probably I

00:35:54,940 --> 00:35:58,599
mean from the likes of it that would be

00:35:57,130 --> 00:36:00,700
a better direction if you have to

00:35:58,599 --> 00:36:02,109
migrate of our existing jobs to work

00:36:00,700 --> 00:36:03,729
because over there you can see the

00:36:02,109 --> 00:36:06,999
logical flow and it's in the part of the

00:36:03,729 --> 00:36:09,819
code as opposed to hear because your job

00:36:06,999 --> 00:36:11,559
definition in Jia me is probably very

00:36:09,819 --> 00:36:18,969
different from how it looks like in UI

00:36:11,559 --> 00:36:21,190
and also is there like I mean I do you

00:36:18,969 --> 00:36:26,410
care to comment how we can compare these

00:36:21,190 --> 00:36:28,599
two sure sure so to be honest I haven't

00:36:26,410 --> 00:36:32,950
used the workflow plugin it's relatively

00:36:28,599 --> 00:36:34,509
new and this has been around for a long

00:36:32,950 --> 00:36:39,190
time I mean that's probably 11

00:36:34,509 --> 00:36:43,420
difference it seems to me although it

00:36:39,190 --> 00:36:45,279
seems to me the workflow plugin has the

00:36:43,420 --> 00:36:47,489
idea between the workflow plugin and

00:36:45,279 --> 00:36:51,849
Jenkins gel builder is kind of similar

00:36:47,489 --> 00:36:53,890
Jenkins job builders in Python and I

00:36:51,849 --> 00:36:57,160
think if you want to use the workflow

00:36:53,890 --> 00:37:01,690
plugin you it's it's in Ruby I'm not

00:36:57,160 --> 00:37:05,380
Ruby sorry that's groovy groovy so so

00:37:01,690 --> 00:37:08,019
you either you know you may you may have

00:37:05,380 --> 00:37:10,839
people that know python and this would

00:37:08,019 --> 00:37:13,239
be a good direction I mean if you more

00:37:10,839 --> 00:37:16,390
comfortable Ruby that would be probably

00:37:13,239 --> 00:37:18,460
the better direction to go but in

00:37:16,390 --> 00:37:23,920
general they kind of look like they do

00:37:18,460 --> 00:37:26,349
the same thing to be honest so I I don't

00:37:23,920 --> 00:37:28,989
know if i have anything else to say

00:37:26,349 --> 00:37:33,099
besides that because i've never used the

00:37:28,989 --> 00:37:37,589
workflow plugin myself but they

00:37:33,099 --> 00:37:37,589
accomplish the same thing I think

00:37:38,069 --> 00:37:45,759
comment is like because when you look at

00:37:42,150 --> 00:37:48,009
and then be sure to inner organization

00:37:45,759 --> 00:37:50,440
this is how the ddb job looks like it's

00:37:48,009 --> 00:37:53,410
hard to like coral 8 121 how it looks

00:37:50,440 --> 00:37:55,200
like on the you are yeah okay second job

00:37:53,410 --> 00:37:56,940
creation engine which is very different

00:37:55,200 --> 00:37:59,220
so I'm invaders in workflow it looks

00:37:56,940 --> 00:38:01,800
like okay it's easy to understand what

00:37:59,220 --> 00:38:03,839
you're trying to do is I can comment on

00:38:01,800 --> 00:38:05,970
that I can comment on that I think I

00:38:03,839 --> 00:38:08,970
don't know how the workflow can be

00:38:05,970 --> 00:38:10,619
automated to be honest jkb is very easy

00:38:08,970 --> 00:38:15,050
to automate because it's a command line

00:38:10,619 --> 00:38:18,660
tool the workflow plugin it's in jenkins

00:38:15,050 --> 00:38:22,290
you have to go into the UI to come looks

00:38:18,660 --> 00:38:26,359
like you have to script it in the UI but

00:38:22,290 --> 00:38:29,280
we like the automation part a lot so we

00:38:26,359 --> 00:38:32,190
if we wanted to automate stuff I think

00:38:29,280 --> 00:38:34,560
what ads from what I've seen I go with

00:38:32,190 --> 00:38:37,260
the chicken shell builder yeah but but

00:38:34,560 --> 00:38:43,020
taking back we don't use the Jenkins you

00:38:37,260 --> 00:38:45,810
I we we we almost like it if we like we

00:38:43,020 --> 00:38:47,849
love the Jenkins engine but we don't

00:38:45,810 --> 00:38:51,630
like the UI so we never look at the UI

00:38:47,849 --> 00:38:54,030
it's not important to us we like it for

00:38:51,630 --> 00:38:56,520
the engine part and I wish that actually

00:38:54,030 --> 00:38:59,609
Jenkins had two pieces a UI piece and

00:38:56,520 --> 00:39:02,069
then service piece yeah I second you on

00:38:59,609 --> 00:39:04,500
that I mean it's better if it's all we

00:39:02,069 --> 00:39:07,140
can do all the jobs inside a kind of a

00:39:04,500 --> 00:39:10,140
script our code rather than going to you

00:39:07,140 --> 00:39:12,869
I yeah so that I hope I answered your

00:39:10,140 --> 00:39:17,790
question but by the way are you planning

00:39:12,869 --> 00:39:20,400
to support workflow in gdb well I don't

00:39:17,790 --> 00:39:23,700
see why we couldn't I mean I've already

00:39:20,400 --> 00:39:26,760
seen contributions for the dsl plugin so

00:39:23,700 --> 00:39:29,160
it's kind of ironic but yeah you can you

00:39:26,760 --> 00:39:31,319
can initiate the dsl plugging using

00:39:29,160 --> 00:39:34,920
Jenkins job over which is kind of

00:39:31,319 --> 00:39:36,810
similar when what they do that was

00:39:34,920 --> 00:39:38,550
basically my question I can see them

00:39:36,810 --> 00:39:40,740
being complementary ways a workflow

00:39:38,550 --> 00:39:45,359
plugin but I could see some value to to

00:39:40,740 --> 00:39:49,190
what you're doing as well any other

00:39:45,359 --> 00:39:49,190
questions ya go

00:39:51,890 --> 00:39:57,980
I do a similar thing that you do except

00:39:55,730 --> 00:40:00,440
i'll use the dsl plugin and i use

00:39:57,980 --> 00:40:02,390
property files to define applications

00:40:00,440 --> 00:40:05,569
which you know generates when you

00:40:02,390 --> 00:40:08,450
execute our our Gradle scripts that will

00:40:05,569 --> 00:40:10,849
generate you know a couple dozen jobs

00:40:08,450 --> 00:40:12,289
that defines a pipeline one of the

00:40:10,849 --> 00:40:14,510
things i was wondering bout with yours

00:40:12,289 --> 00:40:19,220
as if have a lot of one-off situations

00:40:14,510 --> 00:40:21,680
where i need to go into my groovy code

00:40:19,220 --> 00:40:23,480
and update because a job will be a

00:40:21,680 --> 00:40:25,250
little bit differently like if it's this

00:40:23,480 --> 00:40:27,619
series of applications over here in this

00:40:25,250 --> 00:40:29,569
group i need to do a different version

00:40:27,619 --> 00:40:31,700
or something do you have situations like

00:40:29,569 --> 00:40:34,039
that with the ginga job builder i'm not

00:40:31,700 --> 00:40:36,829
familiar with it so i just wanted to see

00:40:34,039 --> 00:40:39,079
how that was handled with that yeah we

00:40:36,829 --> 00:40:42,500
we do have that situation I mean that's

00:40:39,079 --> 00:40:44,690
mostly what it's built for we set up

00:40:42,500 --> 00:40:49,190
variables that can be overridden and

00:40:44,690 --> 00:40:53,690
that can be you know added to or

00:40:49,190 --> 00:40:55,750
whatever overridden override yeah so I

00:40:53,690 --> 00:40:58,640
mean that's how we handle it mostly I

00:40:55,750 --> 00:41:00,079
think I mean I don't know if that's it

00:40:58,640 --> 00:41:01,849
it sounds like you you handle it the

00:41:00,079 --> 00:41:03,890
same way with the dsl plugin yeah i have

00:41:01,849 --> 00:41:05,450
to just go into the code and like if

00:41:03,890 --> 00:41:07,279
you're this you know do this but i have

00:41:05,450 --> 00:41:09,609
to make that change and we have the same

00:41:07,279 --> 00:41:12,769
thing where we try not to do any

00:41:09,609 --> 00:41:14,680
configuration in the jenkins GUI except

00:41:12,769 --> 00:41:16,910
in like some kind of crazy deployment

00:41:14,680 --> 00:41:19,490
nightmare or something and then we make

00:41:16,910 --> 00:41:22,309
sure to refactor that code back to the

00:41:19,490 --> 00:41:24,740
dsl but so i was just curious how it was

00:41:22,309 --> 00:41:27,349
handled because with a chicken shot

00:41:24,740 --> 00:41:29,089
builder so yeah it's it's kind of

00:41:27,349 --> 00:41:32,599
probably handled the same way it's it's

00:41:29,089 --> 00:41:36,890
the definition of all these variables

00:41:32,599 --> 00:41:42,559
that then you change over time yeah for

00:41:36,890 --> 00:41:44,809
different jobs okay thanks sure do you

00:41:42,559 --> 00:41:47,029
have any support for secrets or

00:41:44,809 --> 00:41:48,200
credentials using the drinking's builder

00:41:47,029 --> 00:41:50,269
so that we don't have to commit

00:41:48,200 --> 00:41:57,140
passwords to source to use them in our

00:41:50,269 --> 00:42:02,690
builds well we we actually do that with

00:41:57,140 --> 00:42:04,040
puppet we use the Huayra we and that is

00:42:02,690 --> 00:42:08,090
only kept on the

00:42:04,040 --> 00:42:12,530
one machine not not the one machine but

00:42:08,090 --> 00:42:17,200
the what the machine that builds the the

00:42:12,530 --> 00:42:17,200
nodes that we use for running the jobs

00:42:19,870 --> 00:42:28,490
oh thank you so there you go there's a

00:42:25,220 --> 00:42:31,400
plugin for it and JJ v supports that

00:42:28,490 --> 00:42:32,930
plugin it's like this is the answer yeah

00:42:31,400 --> 00:42:42,820
I don't know all the plugins that are

00:42:32,930 --> 00:42:49,430
supported in jkb anyways um but oh oh re

00:42:42,820 --> 00:42:53,000
so project / debt credentials buying

00:42:49,430 --> 00:42:56,000
plugin so actually re has another

00:42:53,000 --> 00:42:57,800
Jenkins job booger talk later on and I

00:42:56,000 --> 00:43:01,010
think he'll go into a lot more detail

00:42:57,800 --> 00:43:04,450
and he'll have a more complex scenario i

00:43:01,010 --> 00:43:07,880
think if you are more interested in that

00:43:04,450 --> 00:43:09,740
but thank you fourth Oh actually I

00:43:07,880 --> 00:43:12,320
wanted to say one more thing i think the

00:43:09,740 --> 00:43:14,900
workflow plugin I think the one big

00:43:12,320 --> 00:43:18,350
benefit over Jenkins job builder is that

00:43:14,900 --> 00:43:23,300
it is in groovy so you have the power of

00:43:18,350 --> 00:43:26,240
the groovy language and the Jenkins gel

00:43:23,300 --> 00:43:28,550
builder you're just defining llamo so

00:43:26,240 --> 00:43:31,790
but that's one big benefit i didn't i

00:43:28,550 --> 00:43:35,650
didn't think of but there's no more

00:43:31,790 --> 00:43:38,510
questions thank you for attending and I

00:43:35,650 --> 00:43:42,490
was asked to put it in this light so you

00:43:38,510 --> 00:43:42,490
remember to give feedback

00:43:53,920 --> 00:43:55,980

YouTube URL: https://www.youtube.com/watch?v=i9iRGeTR-b4


