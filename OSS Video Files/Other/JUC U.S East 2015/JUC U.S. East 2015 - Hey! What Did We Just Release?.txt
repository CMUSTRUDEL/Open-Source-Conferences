Title: JUC U.S. East 2015 - Hey! What Did We Just Release?
Publication date: 2020-01-23
Playlist: JUC U.S East 2015
Description: 
	By: Robert McNulty, Experian Marketing Services

Have you ever completed a build and wondered what exactly changed? Typically, output logs and parameterized build input data such as SCM branches, bug tracking issues and notes entered by the developer are lost once the build has completed. At best, Jenkins keeps this information for a limited time. The only historical reference is, perhaps, in a report. Consequently, this data cannot easily be reused for future builds or reviewed during the auditing process. Using Jenkins, Groovy and Neo4j, this data can persist for the life of a project. This presentation will describe the simple steps taken to save this information for posterity.
Captions: 
	00:00:15,300 --> 00:00:20,700
so I've got a little agenda introduction

00:00:18,060 --> 00:00:23,640
a little bit about me a little bit about

00:00:20,700 --> 00:00:27,200
the problem things as they currently are

00:00:23,640 --> 00:00:29,040
things as they might be in the future

00:00:27,200 --> 00:00:31,500
demonstration which probably isn't going

00:00:29,040 --> 00:00:34,320
to go off so well since I can't present

00:00:31,500 --> 00:00:38,160
the browser so you can't see Jenkins and

00:00:34,320 --> 00:00:40,920
operation but fortunately I have a

00:00:38,160 --> 00:00:45,770
backup a backup email that I sent myself

00:00:40,920 --> 00:00:45,770
which I won't be able to splay either so

00:00:45,860 --> 00:00:51,269
I've been doing software development

00:00:48,170 --> 00:00:53,670
database design most of that kind of

00:00:51,269 --> 00:00:57,239
stuff for 20-plus years I've started

00:00:53,670 --> 00:01:01,800
Java when it first came out 1.0 and

00:00:57,239 --> 00:01:03,660
that's been my main tool ever since I've

00:01:01,800 --> 00:01:05,910
kind of migrated towards a lot of JVM

00:01:03,660 --> 00:01:09,810
tools now including groovy which is

00:01:05,910 --> 00:01:12,330
pretty groovy and neo4j which is part of

00:01:09,810 --> 00:01:14,130
the subject of this talk lead technical

00:01:12,330 --> 00:01:18,890
developer architected experian marketing

00:01:14,130 --> 00:01:21,990
surfaces and yes it is that experience

00:01:18,890 --> 00:01:24,180
so if you have credit problems please

00:01:21,990 --> 00:01:28,920
don't see me I don't have access to that

00:01:24,180 --> 00:01:31,080
database and then I lead men are a

00:01:28,920 --> 00:01:35,760
global team of developers in the States

00:01:31,080 --> 00:01:37,790
and currently in Costa Rica I'm not a

00:01:35,760 --> 00:01:39,930
dedicated build engineer by profession

00:01:37,790 --> 00:01:42,840
it's just one of the things that I do

00:01:39,930 --> 00:01:45,540
probably like many of you I started

00:01:42,840 --> 00:01:49,560
continuous integration 10 10 or so years

00:01:45,540 --> 00:01:51,570
ago i started with cruise control which

00:01:49,560 --> 00:01:53,610
back in its day was a pretty good tool

00:01:51,570 --> 00:01:56,460
but if you have more than two or three

00:01:53,610 --> 00:02:00,420
projects editing editing that xml by

00:01:56,460 --> 00:02:02,730
hand as a bit painstaking i moved to

00:02:00,420 --> 00:02:06,170
hudson after viewing the session at one

00:02:02,730 --> 00:02:10,050
of the job of one years by push gay and

00:02:06,170 --> 00:02:11,110
migrated to jenkins when oracle decided

00:02:10,050 --> 00:02:14,770
they

00:02:11,110 --> 00:02:18,070
they wanted Hudson so I went I went with

00:02:14,770 --> 00:02:23,790
the I went with the Creator you can't go

00:02:18,070 --> 00:02:26,290
wrong there the reason for this is

00:02:23,790 --> 00:02:28,440
basically what I explained is is the

00:02:26,290 --> 00:02:30,700
build the project manager did not know

00:02:28,440 --> 00:02:32,470
what was in the bill that we had just

00:02:30,700 --> 00:02:37,270
released and the reason for that is

00:02:32,470 --> 00:02:40,120
several fold a the developers weren't

00:02:37,270 --> 00:02:42,820
really adding excellent notes to the

00:02:40,120 --> 00:02:45,190
build be the notes weren't carrying over

00:02:42,820 --> 00:02:47,350
from one bill to the next so for example

00:02:45,190 --> 00:02:51,160
we have a build and you probably build a

00:02:47,350 --> 00:02:52,930
project 10 20 30 times before it gets to

00:02:51,160 --> 00:02:55,030
the release stage well each one of those

00:02:52,930 --> 00:03:00,610
builds may have some associated notes

00:02:55,030 --> 00:03:03,760
far as issue issue numbers that's being

00:03:00,610 --> 00:03:05,560
taken care of there I like to keep notes

00:03:03,760 --> 00:03:08,290
get branches whatever do we have a whole

00:03:05,560 --> 00:03:10,900
list of custom properties that we like

00:03:08,290 --> 00:03:13,870
to include in the build so the only

00:03:10,900 --> 00:03:16,269
historical reference to this that most

00:03:13,870 --> 00:03:20,080
managers have or even developers for

00:03:16,269 --> 00:03:22,600
that matter is in the email default

00:03:20,080 --> 00:03:26,769
report unless you've set up something

00:03:22,600 --> 00:03:29,739
else furthermore the data that was

00:03:26,769 --> 00:03:32,110
entered in that can't really be reused

00:03:29,739 --> 00:03:34,330
so you have to completely rerun the

00:03:32,110 --> 00:03:38,530
project from scratch might enter

00:03:34,330 --> 00:03:42,180
duplicate information etc so hopefully

00:03:38,530 --> 00:03:47,760
by using Jenkins groovy and neo4j

00:03:42,180 --> 00:03:50,320
database the data can be persistent now

00:03:47,760 --> 00:03:54,400
the standard email notification that

00:03:50,320 --> 00:03:57,250
delivered with Jenkins is is really

00:03:54,400 --> 00:03:58,780
minimalist failure message contains a

00:03:57,250 --> 00:04:03,100
portion of the console output which

00:03:58,780 --> 00:04:06,070
would be error statement or stack trace

00:04:03,100 --> 00:04:09,810
perhaps a success message is really

00:04:06,070 --> 00:04:12,130
nothing to look at as you can see here

00:04:09,810 --> 00:04:16,060
click on this link and you'll see a list

00:04:12,130 --> 00:04:17,919
of changes which isn't very much that's

00:04:16,060 --> 00:04:19,280
just I think the changes they pull off

00:04:17,919 --> 00:04:26,940
of

00:04:19,280 --> 00:04:30,180
your build tool or SEM so employing the

00:04:26,940 --> 00:04:33,240
email EXT plugin you get better control

00:04:30,180 --> 00:04:37,170
over what can be emailed in the report

00:04:33,240 --> 00:04:40,320
however unmodified this plug-in is not

00:04:37,170 --> 00:04:43,800
much more useful than the default error

00:04:40,320 --> 00:04:47,250
plugin so you'll get the name you know

00:04:43,800 --> 00:04:51,150
the build number basically clicking on

00:04:47,250 --> 00:04:54,660
that link will pull up the list of

00:04:51,150 --> 00:04:57,900
properties that you entered to to create

00:04:54,660 --> 00:05:00,120
the bill so for example if I click if a

00:04:57,900 --> 00:05:02,100
bill number five you click that link in

00:05:00,120 --> 00:05:03,630
the email and it would pop up something

00:05:02,100 --> 00:05:06,990
where you can view the parameter such as

00:05:03,630 --> 00:05:09,240
the gift branch used to build some notes

00:05:06,990 --> 00:05:15,450
if there are any and all of the other

00:05:09,240 --> 00:05:17,580
user entered properties now if you have

00:05:15,450 --> 00:05:21,030
multiple builds like like I was talking

00:05:17,580 --> 00:05:23,580
about earlier if you've got 10 20 30

00:05:21,030 --> 00:05:27,090
bills down the line it's really

00:05:23,580 --> 00:05:28,440
difficult if not you don't want to do

00:05:27,090 --> 00:05:31,290
this you don't want to have to click

00:05:28,440 --> 00:05:33,210
open every single link go back to the

00:05:31,290 --> 00:05:36,450
build see what the parameters that were

00:05:33,210 --> 00:05:38,190
entered were quite frankly they're not

00:05:36,450 --> 00:05:41,250
going to do it and so they're going to

00:05:38,190 --> 00:05:43,260
say hey what we just build hopefully so

00:05:41,250 --> 00:05:45,169
for as the example here you run three

00:05:43,260 --> 00:05:47,070
builds and include notes for each build

00:05:45,169 --> 00:05:50,280
so therefore you're going to get three

00:05:47,070 --> 00:05:52,620
separate emails you would need to you

00:05:50,280 --> 00:05:57,090
would need to click on the link for each

00:05:52,620 --> 00:05:58,470
one to pop up an individual build

00:05:57,090 --> 00:06:03,060
rapport and that's that's pretty much of

00:05:58,470 --> 00:06:05,490
a hassle to so play and then if the

00:06:03,060 --> 00:06:10,650
build administrator discards old builds

00:06:05,490 --> 00:06:14,300
you're not even going that far but I

00:06:10,650 --> 00:06:14,300
believe there is a better way to do this

00:06:14,500 --> 00:06:20,650
so it wouldn't be nice to receive an

00:06:16,720 --> 00:06:23,230
email that has this formatted content on

00:06:20,650 --> 00:06:26,170
it instead instead of the generic click

00:06:23,230 --> 00:06:27,820
on this link to to see what parameters

00:06:26,170 --> 00:06:30,220
are entered you get the email that will

00:06:27,820 --> 00:06:32,950
give you all of the information that you

00:06:30,220 --> 00:06:36,070
choose to display to your user and/or

00:06:32,950 --> 00:06:37,960
project managers now in this example you

00:06:36,070 --> 00:06:40,330
have the release tag which would be used

00:06:37,960 --> 00:06:44,080
further on down the line say move it

00:06:40,330 --> 00:06:47,700
from staging to production etc the build

00:06:44,080 --> 00:06:52,270
number the git branch used to build this

00:06:47,700 --> 00:06:57,340
the version number there which is pulled

00:06:52,270 --> 00:07:00,970
from artifactory itself the build knows

00:06:57,340 --> 00:07:03,370
which a crew for every build and the URL

00:07:00,970 --> 00:07:06,640
of the deployed application so so

00:07:03,370 --> 00:07:09,400
actually clicking on that link will will

00:07:06,640 --> 00:07:11,020
bring up the application whatever it is

00:07:09,400 --> 00:07:14,250
ins in this case it happens to be a

00:07:11,020 --> 00:07:17,230
deployed war file so you would see that

00:07:14,250 --> 00:07:18,490
and it also it looks just as good on

00:07:17,230 --> 00:07:20,950
your mobile device so if you're getting

00:07:18,490 --> 00:07:24,970
this it would be nicely formatted since

00:07:20,950 --> 00:07:27,370
its HTML CSS and on this example you can

00:07:24,970 --> 00:07:31,479
see I have an extra I have an extra

00:07:27,370 --> 00:07:33,880
build note also wouldn't it be nice to

00:07:31,479 --> 00:07:36,970
save review reconstruct and print

00:07:33,880 --> 00:07:39,040
reports from any and all of the builds

00:07:36,970 --> 00:07:40,900
that you've currently done and this is

00:07:39,040 --> 00:07:44,040
dispensed multiple projects as you can

00:07:40,900 --> 00:07:47,410
see via this spiffy little interface

00:07:44,040 --> 00:07:50,229
this is actually in production at our

00:07:47,410 --> 00:07:53,350
shop so basically clicking on one of

00:07:50,229 --> 00:07:57,510
those build tags which is actually its

00:07:53,350 --> 00:08:02,050
own git branch would bring up all of the

00:07:57,510 --> 00:08:05,890
all of the information used to construct

00:08:02,050 --> 00:08:07,270
that build and build it so that's really

00:08:05,890 --> 00:08:11,110
what we're trying to accomplish here is

00:08:07,270 --> 00:08:14,620
to send them a nice little email that

00:08:11,110 --> 00:08:18,640
looks like this further in our shop we

00:08:14,620 --> 00:08:21,460
also have a list of the bug issues so it

00:08:18,640 --> 00:08:24,100
would be either if listed by number

00:08:21,460 --> 00:08:26,199
and description so i don't have that in

00:08:24,100 --> 00:08:30,819
here because this is it's just a demo

00:08:26,199 --> 00:08:32,919
but it would have a list of 10 15 bug

00:08:30,819 --> 00:08:38,339
issues in a JIRA issue numbers or

00:08:32,919 --> 00:08:38,339
whatever your issue tracking system is

00:08:40,260 --> 00:08:46,630
this is how it's done you can see what I

00:08:43,659 --> 00:08:49,959
sit around watching late night when i'm

00:08:46,630 --> 00:08:51,610
coding this stuff just watch it and i

00:08:49,959 --> 00:08:53,320
know when all the I've seen them all

00:08:51,610 --> 00:08:54,820
multiple times I know know the jokes are

00:08:53,320 --> 00:08:58,149
so I look up for my screen laugh a

00:08:54,820 --> 00:09:01,300
little bit go back to coding so for this

00:08:58,149 --> 00:09:04,959
Jenkins job the main components are get

00:09:01,300 --> 00:09:08,050
groovy Gradle artifactory and their

00:09:04,959 --> 00:09:11,830
associated Jenkins plugins the database

00:09:08,050 --> 00:09:15,130
i'm using here is neo4j and i'm also

00:09:11,830 --> 00:09:21,130
making use of these other associated

00:09:15,130 --> 00:09:26,860
Jenkins plugins now why neo4j why did I

00:09:21,130 --> 00:09:30,640
choose neo4j when I first started this I

00:09:26,860 --> 00:09:32,230
i was using a mysql database adding

00:09:30,640 --> 00:09:34,870
projects with different build

00:09:32,230 --> 00:09:36,459
requirements you know as time goes on

00:09:34,870 --> 00:09:38,260
people go hey we like that can you put

00:09:36,459 --> 00:09:40,420
it into our project too so i did but

00:09:38,260 --> 00:09:42,940
some of their projects they don't

00:09:40,420 --> 00:09:47,250
deliver war files you know somewhere jar

00:09:42,940 --> 00:09:53,529
files some are zip files some are flex

00:09:47,250 --> 00:09:55,420
swc type files Ruby things gems gems

00:09:53,529 --> 00:09:57,820
that's what it is so there's all

00:09:55,420 --> 00:10:00,130
different kinds of requirements and I

00:09:57,820 --> 00:10:01,930
found that the original structure of the

00:10:00,130 --> 00:10:03,550
database was getting very sparse you

00:10:01,930 --> 00:10:05,860
know i would i would need at an entire

00:10:03,550 --> 00:10:08,770
column just for a particular project to

00:10:05,860 --> 00:10:10,600
hold a particular point of of data and

00:10:08,770 --> 00:10:12,730
it started getting sloppy i didn't like

00:10:10,600 --> 00:10:16,000
to feel it so I started looking around

00:10:12,730 --> 00:10:18,130
at noahs ql options and since I'm

00:10:16,000 --> 00:10:20,529
familiar with the JVM and I'd heard

00:10:18,130 --> 00:10:22,899
about neo4j and it's not a new tool it's

00:10:20,529 --> 00:10:26,620
been around for quite a long time I gave

00:10:22,899 --> 00:10:29,560
it a shot and it it seems to it seems to

00:10:26,620 --> 00:10:30,410
fill the need that I was trying to give

00:10:29,560 --> 00:10:36,149
you know

00:10:30,410 --> 00:10:37,949
that columnar database style so I'm not

00:10:36,149 --> 00:10:40,199
going to give a tutorial I neo4j that's

00:10:37,949 --> 00:10:44,429
not the scope it is but just a brief

00:10:40,199 --> 00:10:46,980
overview open sores no SQL a glad job in

00:10:44,429 --> 00:10:49,559
Scala the fundamental units to form a

00:10:46,980 --> 00:10:51,809
graph are nodes and relationships that's

00:10:49,559 --> 00:10:53,879
really that's really all there are a

00:10:51,809 --> 00:10:56,490
node can contain any kind of information

00:10:53,879 --> 00:11:00,779
and it can be linked to in the other

00:10:56,490 --> 00:11:02,749
node via a relationship so that's kind

00:11:00,779 --> 00:11:05,040
of like a table giant i would think

00:11:02,749 --> 00:11:07,829
nodes are often used to represent

00:11:05,040 --> 00:11:10,439
entities and i will show you that on it

00:11:07,829 --> 00:11:15,480
next slide and relationships connect the

00:11:10,439 --> 00:11:16,920
notes so the nodes and this is just a

00:11:15,480 --> 00:11:18,360
basic this out all the notes that i'm

00:11:16,920 --> 00:11:21,990
using but these are the basic ones used

00:11:18,360 --> 00:11:24,420
in the demo that I can't show is a build

00:11:21,990 --> 00:11:26,339
node that's the main note here that the

00:11:24,420 --> 00:11:28,769
Jenkins when when you push the Jenkins

00:11:26,339 --> 00:11:30,149
build button it will compile all the

00:11:28,769 --> 00:11:31,920
information and we'll go out and build

00:11:30,149 --> 00:11:36,899
everything and then it will create in

00:11:31,920 --> 00:11:39,449
the database a build node it will make

00:11:36,899 --> 00:11:41,040
use of the sub-project node which

00:11:39,449 --> 00:11:46,379
contains all the information this

00:11:41,040 --> 00:11:48,689
particular project will need to will

00:11:46,379 --> 00:11:51,839
need to build and then the user server

00:11:48,689 --> 00:11:54,089
these are ancillary notes so the

00:11:51,839 --> 00:11:56,490
properties that I'm including on my on

00:11:54,089 --> 00:11:59,490
my sub-project know that is that is a

00:11:56,490 --> 00:12:02,189
main node art so project name the title

00:11:59,490 --> 00:12:05,699
the artifact ID that's how it will be

00:12:02,189 --> 00:12:09,959
located in artifactory the extension war

00:12:05,699 --> 00:12:13,290
zip gem whatever it is the directory

00:12:09,959 --> 00:12:16,139
where it can be found in Jenkins because

00:12:13,290 --> 00:12:19,949
different build tools put things in

00:12:16,139 --> 00:12:22,949
different locations so Gradle will put

00:12:19,949 --> 00:12:25,860
them in lib maven will put them in the

00:12:22,949 --> 00:12:27,990
topmost build directory

00:12:25,860 --> 00:12:31,170
which we also use ant to build our flex

00:12:27,990 --> 00:12:34,079
files puts them somewhere else so this

00:12:31,170 --> 00:12:36,810
is where the groovy script will locate

00:12:34,079 --> 00:12:40,560
the artifact to deploy it to your binary

00:12:36,810 --> 00:12:45,149
repository the git repo name so it can

00:12:40,560 --> 00:12:49,519
it can download it check it out build

00:12:45,149 --> 00:12:52,440
tasks now this is specific right now to

00:12:49,519 --> 00:12:55,589
the Gradle build but if I had a sub

00:12:52,440 --> 00:12:57,720
project node for a maven build I would I

00:12:55,589 --> 00:13:00,690
probably wouldn't even have a property

00:12:57,720 --> 00:13:03,180
named build tasks it would be profiles

00:13:00,690 --> 00:13:07,880
or whatever me you know they were is

00:13:03,180 --> 00:13:10,500
there and these are just key value pairs

00:13:07,880 --> 00:13:16,680
the query language that note for gin

00:13:10,500 --> 00:13:19,019
uses is cypher it's its sequel like yet

00:13:16,680 --> 00:13:21,660
not sequel like so some some of there's

00:13:19,019 --> 00:13:22,649
some crossover like where order by you

00:13:21,660 --> 00:13:25,769
would all know what to do with those

00:13:22,649 --> 00:13:30,269
match is very akin to a select statement

00:13:25,769 --> 00:13:34,740
and you can return well you can return

00:13:30,269 --> 00:13:38,579
pretty much whatever you want so here is

00:13:34,740 --> 00:13:40,410
a an example create sub project this is

00:13:38,579 --> 00:13:43,649
how I'm creating a sub-project node this

00:13:40,410 --> 00:13:47,550
would be in the gray box there that is

00:13:43,649 --> 00:13:50,130
the cipher statement that will do it

00:13:47,550 --> 00:13:52,769
will create a sub-project node and it

00:13:50,130 --> 00:13:56,459
will link it to the main project which

00:13:52,769 --> 00:13:59,070
calling juc so we have main projects

00:13:56,459 --> 00:14:01,980
with multiple sub-projects under them we

00:13:59,070 --> 00:14:05,730
like to group them so the first one just

00:14:01,980 --> 00:14:07,980
matches and gets the node where ju c is

00:14:05,730 --> 00:14:09,750
then you create the sub projects with

00:14:07,980 --> 00:14:14,190
all the properties that i just explained

00:14:09,750 --> 00:14:16,860
and that last bottom line creates the

00:14:14,190 --> 00:14:19,970
relationship between the main project

00:14:16,860 --> 00:14:19,970
and the sub-project

00:14:21,580 --> 00:14:29,290
now neo4j it provides out of the box it

00:14:26,420 --> 00:14:31,250
provides an interface on port 7474

00:14:29,290 --> 00:14:34,700
whichever server it that can be changed

00:14:31,250 --> 00:14:39,020
they can all be changed to access a

00:14:34,700 --> 00:14:42,110
rest-based query submission so you can

00:14:39,020 --> 00:14:44,660
query the database via rest statements

00:14:42,110 --> 00:14:48,440
which I find to be very convenient they

00:14:44,660 --> 00:14:49,880
can if I have if I could pop up the

00:14:48,440 --> 00:14:52,460
browser I would show you an example of

00:14:49,880 --> 00:14:54,560
this however just just know that when I

00:14:52,460 --> 00:14:57,590
enter in the you can see in the top the

00:14:54,560 --> 00:15:01,280
match sub-project that is the cipher

00:14:57,590 --> 00:15:03,800
query and it does return these two

00:15:01,280 --> 00:15:05,870
returns a project and sub project that

00:15:03,800 --> 00:15:10,340
we had just created in the previous

00:15:05,870 --> 00:15:14,720
slide now you can also view the data

00:15:10,340 --> 00:15:17,570
behind this there is a button on the web

00:15:14,720 --> 00:15:20,450
page itself which will allow you to look

00:15:17,570 --> 00:15:23,600
at the underlying data so this is what

00:15:20,450 --> 00:15:26,360
we just inserted you can either view it

00:15:23,600 --> 00:15:32,300
as nodes it's in the picture before or

00:15:26,360 --> 00:15:35,780
you can view it as data I do both now if

00:15:32,300 --> 00:15:38,810
we run a sec if we run the build this is

00:15:35,780 --> 00:15:40,730
what the build node looks like so it's

00:15:38,810 --> 00:15:43,070
got all of those projects that i showed

00:15:40,730 --> 00:15:46,130
you so the main build node which is 71

00:15:43,070 --> 00:15:48,260
in the middle you can see all of the

00:15:46,130 --> 00:15:51,040
relationships going out to all of the

00:15:48,260 --> 00:15:55,070
all of the other nodes and that note

00:15:51,040 --> 00:15:56,810
would be the note that the user no end

00:15:55,070 --> 00:16:00,290
or no so for every note that the user

00:15:56,810 --> 00:16:02,630
entered to be one of those nodes it's

00:16:00,290 --> 00:16:04,730
very simple so let's just say I run a

00:16:02,630 --> 00:16:09,020
second build on that same project the

00:16:04,730 --> 00:16:10,520
graph would look like this this is

00:16:09,020 --> 00:16:13,550
pretty much getting to the end of my

00:16:10,520 --> 00:16:15,830
meal forge a tutorial but you can see

00:16:13,550 --> 00:16:17,660
the common there the builds themselves

00:16:15,830 --> 00:16:19,790
are different but the common elements

00:16:17,660 --> 00:16:22,950
are would be localhost which is the

00:16:19,790 --> 00:16:27,540
server running on the username

00:16:22,950 --> 00:16:30,120
project so project and in that statement

00:16:27,540 --> 00:16:32,640
at the top matched the build with empty

00:16:30,120 --> 00:16:36,150
brackets the empty brackets and means

00:16:32,640 --> 00:16:38,490
basically include all relationships and

00:16:36,150 --> 00:16:42,390
and as your node you're not specifying

00:16:38,490 --> 00:16:45,830
that types of you including all notes so

00:16:42,390 --> 00:16:45,830
you're getting all nodes for all builds

00:16:46,790 --> 00:16:50,850
now how would we do this in groovy and

00:16:49,320 --> 00:16:56,790
that's that's really what we're here to

00:16:50,850 --> 00:16:59,040
do you create the cipher statement just

00:16:56,790 --> 00:17:00,930
as a regular groovy string I in

00:16:59,040 --> 00:17:06,690
substitute your variables that would be

00:17:00,930 --> 00:17:08,459
replaced from the data from the other

00:17:06,690 --> 00:17:11,970
information user ID is probably coming

00:17:08,459 --> 00:17:14,940
from Jenkins sub-project name also you

00:17:11,970 --> 00:17:15,690
have to know what you're running so then

00:17:14,940 --> 00:17:22,199
you're going to go out and you're going

00:17:15,690 --> 00:17:23,880
to query this query will return it's

00:17:22,199 --> 00:17:27,570
going to create the new build it will

00:17:23,880 --> 00:17:30,740
create the new build node so this is

00:17:27,570 --> 00:17:34,650
what you would enter in your groovy code

00:17:30,740 --> 00:17:36,900
to execute that statement just create a

00:17:34,650 --> 00:17:41,070
regular groovy rest client as you can

00:17:36,900 --> 00:17:43,680
see it's just localhost 74 74 d bday

00:17:41,070 --> 00:17:49,190
decipher that's the default those can

00:17:43,680 --> 00:17:54,180
all be changed set it up to accept or

00:17:49,190 --> 00:17:56,280
send json and then just submit your just

00:17:54,180 --> 00:18:02,100
submit your groovy string and it will

00:17:56,280 --> 00:18:03,930
return a JSON formatted big long string

00:18:02,100 --> 00:18:06,510
of objects that you will need to parse

00:18:03,930 --> 00:18:08,070
it and but it can be done now I guess

00:18:06,510 --> 00:18:11,880
next steps on this would be probably to

00:18:08,070 --> 00:18:14,280
try to integrate spring data to handle

00:18:11,880 --> 00:18:18,360
some of those mundane tasks but that's

00:18:14,280 --> 00:18:20,750
another lecture now let's see how this

00:18:18,360 --> 00:18:20,750
all works

00:18:23,729 --> 00:18:28,539
so we will enable the parameterised

00:18:26,379 --> 00:18:30,690
build in Jenkins in this particular

00:18:28,539 --> 00:18:33,129
instance I just got to get branch and

00:18:30,690 --> 00:18:36,759
notes and this is what the user will

00:18:33,129 --> 00:18:39,489
enter I'm defaulting to master for this

00:18:36,759 --> 00:18:42,539
project notes can either you can remain

00:18:39,489 --> 00:18:44,830
empty or they can enter in some doubts

00:18:42,539 --> 00:18:48,850
I'm going to check out the git

00:18:44,830 --> 00:18:52,769
repositories and branches to build so

00:18:48,850 --> 00:18:56,529
whatever they entered in the git branch

00:18:52,769 --> 00:19:00,519
parameter will be replaced here so once

00:18:56,529 --> 00:19:03,340
it checks out the project it will also

00:19:00,519 --> 00:19:07,149
check out that particular branch and I

00:19:03,340 --> 00:19:11,679
find this useful in testing I'm also

00:19:07,149 --> 00:19:13,840
checking out to a subdirectory which is

00:19:11,679 --> 00:19:16,690
to be named I usually just name it

00:19:13,840 --> 00:19:17,889
whatever the project is going to be and

00:19:16,690 --> 00:19:19,929
the reason I check it out to a sub

00:19:17,889 --> 00:19:22,389
directories because all of the groovy

00:19:19,929 --> 00:19:24,190
scripts and the code that is underlined

00:19:22,389 --> 00:19:25,869
this is also maintained in a git

00:19:24,190 --> 00:19:29,739
repository so I don't want to confuse

00:19:25,869 --> 00:19:32,679
the two I will check out also the groovy

00:19:29,739 --> 00:19:38,259
scripts to yet a separate subdirectory

00:19:32,679 --> 00:19:41,289
all under Jenkins I'm just going to find

00:19:38,259 --> 00:19:42,729
a couple of environment variables just

00:19:41,289 --> 00:19:44,679
for ease of use the properties file

00:19:42,729 --> 00:19:46,509
which is the file that's going to be

00:19:44,679 --> 00:19:48,879
passed back and forth between Jenkins

00:19:46,509 --> 00:19:51,690
and the groovy scripts so that all of

00:19:48,879 --> 00:19:54,489
the properties remain in sync and

00:19:51,690 --> 00:19:59,109
basically the location of my groovy

00:19:54,489 --> 00:20:02,669
scripts injects and passwords these are

00:19:59,109 --> 00:20:05,320
you know to access the database or

00:20:02,669 --> 00:20:07,599
anything else you may need perhaps SSH

00:20:05,320 --> 00:20:12,429
or whatever pass which you need some can

00:20:07,599 --> 00:20:16,179
be global now the in the build steps

00:20:12,429 --> 00:20:19,269
themselves I am taking the information

00:20:16,179 --> 00:20:21,220
the user entered and some other in here

00:20:19,269 --> 00:20:23,139
I've got a hard-coded application that's

00:20:21,220 --> 00:20:27,039
what's going to find the sub-project

00:20:23,139 --> 00:20:29,320
node and I am saving this out to a

00:20:27,039 --> 00:20:31,139
properties file i'm using bash to do

00:20:29,320 --> 00:20:34,450
this because i'm running this on linux

00:20:31,139 --> 00:20:37,450
you can also do this using

00:20:34,450 --> 00:20:39,910
groovy it's a little more it's a little

00:20:37,450 --> 00:20:42,550
more cumbersome I aim bash still has its

00:20:39,910 --> 00:20:44,890
uses in this day and age in fact this

00:20:42,550 --> 00:20:47,350
project before it was using groovy was

00:20:44,890 --> 00:20:49,210
using bash and that was that was a bit

00:20:47,350 --> 00:20:52,510
much to maintain so once I discovered

00:20:49,210 --> 00:20:54,400
the Jenkins native groovy implementation

00:20:52,510 --> 00:20:57,850
no that's all she that's all it took to

00:20:54,400 --> 00:20:59,170
just to change that over so this is just

00:20:57,850 --> 00:21:01,300
going to write the properties that the

00:20:59,170 --> 00:21:03,460
user entered and other things that the

00:21:01,300 --> 00:21:06,250
scripts may need to a properties file

00:21:03,460 --> 00:21:09,210
that will then be read in by the groovy

00:21:06,250 --> 00:21:11,260
script that we're going to execute and

00:21:09,210 --> 00:21:14,740
here it is a little bit bigger if you

00:21:11,260 --> 00:21:16,630
can see it people that said statement is

00:21:14,740 --> 00:21:19,840
basically just taking the notes because

00:21:16,630 --> 00:21:23,320
since there's one note on each line I am

00:21:19,840 --> 00:21:25,180
just concatenate the notes with a tilde

00:21:23,320 --> 00:21:28,000
and removing the new line so that it

00:21:25,180 --> 00:21:33,910
looks and parses better in a properties

00:21:28,000 --> 00:21:35,740
file now I'm going to export the job

00:21:33,910 --> 00:21:39,280
runtime parameters and this is a Jenkins

00:21:35,740 --> 00:21:40,660
function it will export these types of

00:21:39,280 --> 00:21:42,340
properties there's there's a whole list

00:21:40,660 --> 00:21:45,700
of them and I don't use many of them but

00:21:42,340 --> 00:21:49,620
some of these I do use to complete a

00:21:45,700 --> 00:21:52,690
report it by default exports it to

00:21:49,620 --> 00:21:56,920
Hudson build up properties file in the

00:21:52,690 --> 00:22:00,280
workspace root directory so after doing

00:21:56,920 --> 00:22:04,000
all of this this is what the workspace

00:22:00,280 --> 00:22:05,860
will look like before we really start

00:22:04,000 --> 00:22:08,290
doing any processing there's the juc

00:22:05,860 --> 00:22:09,850
groovy those are the groovy scripts the

00:22:08,290 --> 00:22:12,490
hello world which is the project we're

00:22:09,850 --> 00:22:15,190
going to build and the two properties

00:22:12,490 --> 00:22:19,840
files the Jenkins and the one that I

00:22:15,190 --> 00:22:24,790
created with bash so now we're ready to

00:22:19,840 --> 00:22:26,650
execute one of the groovy scripts I use

00:22:24,790 --> 00:22:28,450
one script you could use to you can do

00:22:26,650 --> 00:22:31,750
it however you want I call it twice

00:22:28,450 --> 00:22:35,650
first is the there's a prebuilt section

00:22:31,750 --> 00:22:37,720
the pre build executed prior to running

00:22:35,650 --> 00:22:38,020
the Gradle build or your Maeve ability

00:22:37,720 --> 00:22:41,800
or

00:22:38,020 --> 00:22:45,910
build post build by default runs after

00:22:41,800 --> 00:22:49,240
that if it's successful the pre build

00:22:45,910 --> 00:22:53,050
script will really just load properties

00:22:49,240 --> 00:22:54,970
from the database so it loads the

00:22:53,050 --> 00:22:57,100
properties file we created juc no

00:22:54,970 --> 00:23:00,400
properties gets the project name the

00:22:57,100 --> 00:23:02,380
workspace directory other things will

00:23:00,400 --> 00:23:05,010
then query the database the neo4j

00:23:02,380 --> 00:23:07,420
database for that for that project and

00:23:05,010 --> 00:23:09,370
retrieve all of the associated

00:23:07,420 --> 00:23:11,950
information with it'll get the server

00:23:09,370 --> 00:23:16,420
we're going to deploy to the project

00:23:11,950 --> 00:23:18,520
name the git repository and all that and

00:23:16,420 --> 00:23:22,930
here I've manually checked out to git

00:23:18,520 --> 00:23:26,620
repository but in production since I use

00:23:22,930 --> 00:23:28,030
these scripts for just about every every

00:23:26,620 --> 00:23:30,400
project rerun because they're fairly

00:23:28,030 --> 00:23:33,880
generic all of the information kept in

00:23:30,400 --> 00:23:36,220
the database I keep also the kit

00:23:33,880 --> 00:23:41,620
repository in there so when I check it

00:23:36,220 --> 00:23:44,410
out in the pre build i will then i will

00:23:41,620 --> 00:23:47,790
then list a check out check out the git

00:23:44,410 --> 00:23:50,350
repository that's just loaded there and

00:23:47,790 --> 00:23:52,260
then it appends these values that it

00:23:50,350 --> 00:23:55,840
finds in the database as new properties

00:23:52,260 --> 00:23:58,420
to that same juc properties file so

00:23:55,840 --> 00:24:01,540
after the pre build that same properties

00:23:58,420 --> 00:24:03,310
file that had maybe five lines in it now

00:24:01,540 --> 00:24:07,510
has all of the information that was

00:24:03,310 --> 00:24:09,280
contained in the database as well its

00:24:07,510 --> 00:24:11,440
got the server or the port I mean

00:24:09,280 --> 00:24:13,060
anything really this is some of the

00:24:11,440 --> 00:24:16,840
information that I keep its you can you

00:24:13,060 --> 00:24:19,240
can put whatever you want in there so

00:24:16,840 --> 00:24:22,780
once the pre build is done you need to

00:24:19,240 --> 00:24:24,910
inject these back into Jenkins so that

00:24:22,780 --> 00:24:27,780
Jenkins knows that the existence of all

00:24:24,910 --> 00:24:30,130
of these values from the database

00:24:27,780 --> 00:24:33,310
there's an injective ironmen variables

00:24:30,130 --> 00:24:34,780
plugin that's a that works very well for

00:24:33,310 --> 00:24:37,240
this you just give the name of your

00:24:34,780 --> 00:24:39,000
properties file and it just import sit

00:24:37,240 --> 00:24:44,260
back and now these are ready to be used

00:24:39,000 --> 00:24:47,290
in further further areas here such as

00:24:44,260 --> 00:24:50,470
when we run the Gradle build or the

00:24:47,290 --> 00:24:53,710
maven build as you can see

00:24:50,470 --> 00:24:58,030
I'm using those properties that we just

00:24:53,710 --> 00:24:59,409
retrieved from the database to set up

00:24:58,030 --> 00:25:02,220
the Gradle build which would be to build

00:24:59,409 --> 00:25:05,470
tasks it's they can vary from job to job

00:25:02,220 --> 00:25:09,250
the project directory in case this is a

00:25:05,470 --> 00:25:13,950
you know a nested project structure that

00:25:09,250 --> 00:25:16,179
also works so there's some of the ones

00:25:13,950 --> 00:25:17,320
so then we execute the Gradle build and

00:25:16,179 --> 00:25:20,380
we assume that it's going to run just

00:25:17,320 --> 00:25:22,030
fine and complete successfully now after

00:25:20,380 --> 00:25:24,700
some of these steps I and I don't think

00:25:22,030 --> 00:25:27,220
I've include that slide but I do check a

00:25:24,700 --> 00:25:29,080
property in the properties file called

00:25:27,220 --> 00:25:30,880
error message and if there was an error

00:25:29,080 --> 00:25:32,669
message then I will stop the Jenkins

00:25:30,880 --> 00:25:35,409
build because it doesn't natively know

00:25:32,669 --> 00:25:38,620
that there was a problem in the groovy

00:25:35,409 --> 00:25:40,450
script you can throw an exception but I

00:25:38,620 --> 00:25:41,650
prefer to run the error message can in

00:25:40,450 --> 00:25:43,360
complete processing down the line

00:25:41,650 --> 00:25:46,510
because if you throw the exception your

00:25:43,360 --> 00:25:49,480
report at the end won't run it's a

00:25:46,510 --> 00:25:51,250
better way to go then we execute the

00:25:49,480 --> 00:25:52,900
post build groovy script it's the same

00:25:51,250 --> 00:25:55,059
script just a difference which part of

00:25:52,900 --> 00:25:56,980
the switch statement as you can see in

00:25:55,059 --> 00:25:59,919
the script parameters the second

00:25:56,980 --> 00:26:01,330
parameter is post build whereas the

00:25:59,919 --> 00:26:03,039
first one was pre build and so the

00:26:01,330 --> 00:26:06,400
script knows that it executes to the

00:26:03,039 --> 00:26:09,640
post build code this one will again load

00:26:06,400 --> 00:26:12,250
the properties file it'll get the

00:26:09,640 --> 00:26:16,299
artifact information from the Gradle

00:26:12,250 --> 00:26:21,070
build file itself it will create a new

00:26:16,299 --> 00:26:23,159
unique tag name based on the project

00:26:21,070 --> 00:26:25,659
name the version and the build number

00:26:23,159 --> 00:26:28,090
it'll aggregate notes from the previous

00:26:25,659 --> 00:26:29,559
bills that's one of the problems were

00:26:28,090 --> 00:26:31,330
trying to solve here so it'll go back

00:26:29,559 --> 00:26:35,409
into the database because it knows that

00:26:31,330 --> 00:26:37,299
this project with this version has prior

00:26:35,409 --> 00:26:40,210
notes as a prior notes associated with

00:26:37,299 --> 00:26:42,159
it create some HTML elements to use in

00:26:40,210 --> 00:26:46,000
the report and that's really just

00:26:42,159 --> 00:26:48,539
creating list items and you really can't

00:26:46,000 --> 00:26:48,539
iterate through

00:26:48,720 --> 00:26:55,980
code in your email text so I just create

00:26:52,260 --> 00:26:57,750
the lists in groovy and send it back it

00:26:55,980 --> 00:27:00,659
will then create and push the new branch

00:26:57,750 --> 00:27:02,250
to get using the the new tag name so

00:27:00,659 --> 00:27:04,799
that will be the new branch which can be

00:27:02,250 --> 00:27:06,450
used in further processing and it will

00:27:04,799 --> 00:27:10,440
append all of these new properties

00:27:06,450 --> 00:27:13,289
tagname versions etc back to the

00:27:10,440 --> 00:27:15,960
properties file which we will again read

00:27:13,289 --> 00:27:21,270
back into Jenkins so it can use it for

00:27:15,960 --> 00:27:25,740
the final for the final run here post

00:27:21,270 --> 00:27:26,700
build edges so once this is all done the

00:27:25,740 --> 00:27:29,429
artifacts have been deployed to

00:27:26,700 --> 00:27:32,460
artifactory or your binary repository of

00:27:29,429 --> 00:27:34,799
choice the groovy scripts are done we

00:27:32,460 --> 00:27:38,340
still have some things to do now if it's

00:27:34,799 --> 00:27:40,919
a web app we also tend to deploy it to

00:27:38,340 --> 00:27:42,900
tomcat integration server staging server

00:27:40,919 --> 00:27:45,169
wherever it's going and that information

00:27:42,900 --> 00:27:51,030
is also kept in the database and then

00:27:45,169 --> 00:27:56,070
finally we send the email so to deploy

00:27:51,030 --> 00:27:58,470
to the container for this example I'm

00:27:56,070 --> 00:28:01,919
using just the deploy this particular

00:27:58,470 --> 00:28:04,919
plug-in and put in in house though I

00:28:01,919 --> 00:28:08,970
don't use this anymore because I had

00:28:04,919 --> 00:28:11,730
problems early on with this not properly

00:28:08,970 --> 00:28:13,650
parsing out the environment variables

00:28:11,730 --> 00:28:16,940
that you need to pass into it for

00:28:13,650 --> 00:28:19,950
example the the URL can change the

00:28:16,940 --> 00:28:24,380
context path will change based on the

00:28:19,950 --> 00:28:27,330
project so i don't do i do I now do this

00:28:24,380 --> 00:28:30,210
in a production instance just also in

00:28:27,330 --> 00:28:32,970
groovy since we're running on Linux it's

00:28:30,210 --> 00:28:35,580
just easy to execute a curl statement to

00:28:32,970 --> 00:28:40,710
directly access the tomcat manager and

00:28:35,580 --> 00:28:42,659
unda ploy deploy test it's pretty simple

00:28:40,710 --> 00:28:46,429
as you can see from this just snippet of

00:28:42,659 --> 00:28:46,429
code this this really does it all

00:28:47,700 --> 00:29:00,100
so finally we're to the email the x

00:28:55,659 --> 00:29:03,210
plugin can use the environment variables

00:29:00,100 --> 00:29:03,210
excuse me

00:29:10,380 --> 00:29:17,290
so you can set this up I use the HTML

00:29:13,750 --> 00:29:19,870
content type you can include CSS or any

00:29:17,290 --> 00:29:21,700
of the HTML that you want in there the

00:29:19,870 --> 00:29:24,220
dynamic portion of the email populations

00:29:21,700 --> 00:29:29,410
properties in the properties file

00:29:24,220 --> 00:29:30,820
generated by the etc so this is what the

00:29:29,410 --> 00:29:34,059
basic one would look like you see the

00:29:30,820 --> 00:29:38,830
content type is HTML the default the

00:29:34,059 --> 00:29:42,610
subject these m VAR equal statements are

00:29:38,830 --> 00:29:44,500
the plugins way of importing the

00:29:42,610 --> 00:29:48,640
environment variables which are the

00:29:44,500 --> 00:29:49,720
properties in the properties file so so

00:29:48,640 --> 00:29:52,390
many of these come from the database

00:29:49,720 --> 00:29:55,929
some of them like diversion build number

00:29:52,390 --> 00:30:00,610
are generated per build and you can see

00:29:55,929 --> 00:30:05,169
it's just the content is just CSS and

00:30:00,610 --> 00:30:11,520
some HTML along with your variable

00:30:05,169 --> 00:30:14,049
statements if the build is except uh now

00:30:11,520 --> 00:30:16,059
also you can you can configure I said

00:30:14,049 --> 00:30:18,490
that was just the default that will that

00:30:16,059 --> 00:30:20,530
this one here will run for every report

00:30:18,490 --> 00:30:21,790
whether there's a success or there's a

00:30:20,530 --> 00:30:23,919
failure this just gives the build

00:30:21,790 --> 00:30:28,030
information now if the build successful

00:30:23,919 --> 00:30:30,940
I will add additional sub information as

00:30:28,030 --> 00:30:34,750
you can see the the user notes will be

00:30:30,940 --> 00:30:37,799
included here Apple Inc's which is the

00:30:34,750 --> 00:30:42,130
link to the deployed tomcat application

00:30:37,799 --> 00:30:44,110
and they can see under the user notes

00:30:42,130 --> 00:30:46,330
HTML I've just I've just got it

00:30:44,110 --> 00:30:48,610
surrounded with a an unordered list tag

00:30:46,330 --> 00:30:51,760
and that is where in the groovy I just

00:30:48,610 --> 00:30:55,720
create list items you can catenate them

00:30:51,760 --> 00:30:59,559
from the user entered notes the

00:30:55,720 --> 00:31:04,000
demonstration unfortunately is not going

00:30:59,559 --> 00:31:05,650
to happen because I can't pop open my

00:31:04,000 --> 00:31:08,290
browser to display it for some reason

00:31:05,650 --> 00:31:10,360
they say it's not set up for for that

00:31:08,290 --> 00:31:11,999
there must be a way I don't know how to

00:31:10,360 --> 00:31:14,349
do

00:31:11,999 --> 00:31:17,080
what the demonstration would have

00:31:14,349 --> 00:31:19,649
involved was running the heat running

00:31:17,080 --> 00:31:22,389
the Jenkins project adding some notes

00:31:19,649 --> 00:31:28,570
showing you that the build was inserted

00:31:22,389 --> 00:31:29,859
into neo4j then I would have changed the

00:31:28,570 --> 00:31:33,489
source code a little bit to display a

00:31:29,859 --> 00:31:35,080
different message on my my web app run

00:31:33,489 --> 00:31:36,849
the build again with a different note

00:31:35,080 --> 00:31:40,450
you would have seen that the email that

00:31:36,849 --> 00:31:43,210
would should have been sent to me had

00:31:40,450 --> 00:31:44,440
both notes on there clicking on the link

00:31:43,210 --> 00:31:51,070
would have showed you the updated

00:31:44,440 --> 00:31:53,080
version so unfortunately I don't know

00:31:51,070 --> 00:31:55,229
how to make that happen thank you very

00:31:53,080 --> 00:31:55,229
much

00:32:06,169 --> 00:32:08,230

YouTube URL: https://www.youtube.com/watch?v=tFK9764EjFs


