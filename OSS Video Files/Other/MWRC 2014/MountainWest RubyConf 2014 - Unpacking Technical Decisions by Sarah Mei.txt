Title: MountainWest RubyConf 2014 - Unpacking Technical Decisions by Sarah Mei
Publication date: 2020-01-24
Playlist: MWRC 2014
Description: 
	As engineers working on a team, we all make technical decisions. What's the best way to implement this? Where should this function live? Is this library worth using? Some decisions, though, are larger, riskier and more important than that. But generally, they're also far less frequent.
Right now, your team might be struggling to organize the client-side parts of your application. Ember? Angular? Backbone? Flip a coin? Uh...which one has the most...retweets? These choices don't need to be arbitrary or based on vague personal preference. Come learn a more useful and realistic approach that makes large-scale technical decisions less risky.

Help us caption & translate this video!

http://amara.org/v/FG2l/
Captions: 
	00:00:24,590 --> 00:00:33,600
all right hi I'm Sarah Mae um I was here

00:00:31,140 --> 00:00:35,700
last year I didn't talk last year so I

00:00:33,600 --> 00:00:38,550
feel like I've know half the room

00:00:35,700 --> 00:00:40,800
already but in case I haven't met you

00:00:38,550 --> 00:00:42,480
already I'm Sarah I run a consulting

00:00:40,800 --> 00:00:44,129
company called Ministry of velocity in

00:00:42,480 --> 00:00:46,050
San Francisco I spend most of my days

00:00:44,129 --> 00:00:49,020
helping people refactor large code bases

00:00:46,050 --> 00:00:52,350
and I wasn't supposed to be up here this

00:00:49,020 --> 00:00:54,510
year I was on the mountain west program

00:00:52,350 --> 00:00:55,890
committee and which meant I got to read

00:00:54,510 --> 00:00:58,920
all the proposals that people sent in

00:00:55,890 --> 00:01:00,390
which was pretty cool I think we had did

00:00:58,920 --> 00:01:04,589
a good job coming up with a program I

00:01:00,390 --> 00:01:09,869
mean do you agree so far seems okay all

00:01:04,589 --> 00:01:11,070
right good however as a program

00:01:09,869 --> 00:01:13,229
committee there was one critical thing

00:01:11,070 --> 00:01:17,490
that we failed to do and that is a lot

00:01:13,229 --> 00:01:21,690
sufficient backup speakers so that's why

00:01:17,490 --> 00:01:23,670
I'm here I'm actually really excited to

00:01:21,690 --> 00:01:26,670
be here i did this talk last week at a

00:01:23,670 --> 00:01:29,490
conference called fluent which is a

00:01:26,670 --> 00:01:32,100
javascript CSS HTML conference in san

00:01:29,490 --> 00:01:34,799
francisco run by o'reilly here's a

00:01:32,100 --> 00:01:36,390
picture of that conference you can tell

00:01:34,799 --> 00:01:38,490
it's an o'reilly conference because they

00:01:36,390 --> 00:01:42,240
sprung for the expensive like no flip

00:01:38,490 --> 00:01:43,619
name tags right apparently that's what

00:01:42,240 --> 00:01:47,130
the extra 600 bucks in the ticket price

00:01:43,619 --> 00:01:48,390
gets you and I fluent isn't that the

00:01:47,130 --> 00:01:49,439
type of conference I normally view i'm

00:01:48,390 --> 00:01:51,360
normally hanging out with Ruby

00:01:49,439 --> 00:01:52,979
developers usually people who consider

00:01:51,360 --> 00:01:55,950
themselves either back-end developers or

00:01:52,979 --> 00:01:58,049
full stack developers which is totally

00:01:55,950 --> 00:01:59,549
different crowd so I spent a lot of time

00:01:58,049 --> 00:02:00,900
at fluent like wandering around and

00:01:59,549 --> 00:02:02,070
talking to people and interrogating them

00:02:00,900 --> 00:02:04,380
and making them tell me why they could

00:02:02,070 --> 00:02:05,930
where they went there so the people I

00:02:04,380 --> 00:02:08,369
met fell into three categories first

00:02:05,930 --> 00:02:09,600
back-end developers who were there to

00:02:08,369 --> 00:02:11,130
learn more about front-end development

00:02:09,600 --> 00:02:13,440
because all the cool kids are full stack

00:02:11,130 --> 00:02:15,239
developers these days there were visual

00:02:13,440 --> 00:02:16,820
UX people who are coming at front-end

00:02:15,239 --> 00:02:18,750
development from the other direction and

00:02:16,820 --> 00:02:19,980
of course the biggest group of people

00:02:18,750 --> 00:02:23,100
were front-end developers who are there

00:02:19,980 --> 00:02:24,239
to learn more about what they do so

00:02:23,100 --> 00:02:28,049
these are three groups of people with

00:02:24,239 --> 00:02:29,820
very different past experiences and what

00:02:28,049 --> 00:02:32,459
surprised me is that when I asked about

00:02:29,820 --> 00:02:34,400
specifically why they were there they

00:02:32,459 --> 00:02:35,629
all told me the same thing

00:02:34,400 --> 00:02:37,819
here's some quotes let's see if any of

00:02:35,629 --> 00:02:39,860
them sound familiar my group has started

00:02:37,819 --> 00:02:44,360
an ember project so I'm going to every

00:02:39,860 --> 00:02:47,000
ember.js on the schedule my web app

00:02:44,360 --> 00:02:49,370
has an old jQuery code base and I need

00:02:47,000 --> 00:02:50,480
to figure out what to do with it one

00:02:49,370 --> 00:02:51,920
thing that I learned it fluent is that

00:02:50,480 --> 00:02:56,090
there are some people that really really

00:02:51,920 --> 00:02:57,680
really hate Jake why I want to learn

00:02:56,090 --> 00:03:04,459
about angular i think i can raise my

00:02:57,680 --> 00:03:06,590
rates almost certainly true and finally

00:03:04,459 --> 00:03:07,819
we have an ancient backbone.js setup and

00:03:06,590 --> 00:03:10,549
we need to rewrite it in something

00:03:07,819 --> 00:03:15,170
cleaner and I think by ancient here she

00:03:10,549 --> 00:03:16,310
meant like six months old so what was

00:03:15,170 --> 00:03:17,720
interesting is that no matter what

00:03:16,310 --> 00:03:19,970
direction these people were approaching

00:03:17,720 --> 00:03:22,370
front-end development from they all had

00:03:19,970 --> 00:03:23,959
the same question on their minds and

00:03:22,370 --> 00:03:26,870
that is what JavaScript framework should

00:03:23,959 --> 00:03:28,370
i be using and I imagine this is how I

00:03:26,870 --> 00:03:30,769
look when i try to solve this problem

00:03:28,370 --> 00:03:32,420
and this is why the big open questions

00:03:30,769 --> 00:03:34,220
in web app development right now right

00:03:32,420 --> 00:03:36,019
how many of you in this room are like

00:03:34,220 --> 00:03:38,139
thinking about that as part of your work

00:03:36,019 --> 00:03:40,609
right like everyone's thinking about it

00:03:38,139 --> 00:03:41,959
it's an open question because of this i

00:03:40,609 --> 00:03:45,440
mean that because of ember but because

00:03:41,959 --> 00:03:50,120
of this wait for it wait for it there we

00:03:45,440 --> 00:03:53,060
go this is a great problem to have right

00:03:50,120 --> 00:03:56,329
there's so many options unfortunately

00:03:53,060 --> 00:03:57,319
there are so many options and even

00:03:56,329 --> 00:03:59,209
though it seems like these days we have

00:03:57,319 --> 00:04:01,609
some frontrunner emerging it's still

00:03:59,209 --> 00:04:03,109
really early right I mean ionic which is

00:04:01,609 --> 00:04:04,430
the upper left corner there they just

00:04:03,109 --> 00:04:07,970
got a million dollars of funding like

00:04:04,430 --> 00:04:11,120
last week right so very early days very

00:04:07,970 --> 00:04:13,129
confusing and every technical community

00:04:11,120 --> 00:04:14,989
has questions like this right things

00:04:13,129 --> 00:04:16,099
that everyone is writing about and they

00:04:14,989 --> 00:04:18,590
really really want to tell you their

00:04:16,099 --> 00:04:20,000
opinions on for example one of the other

00:04:18,590 --> 00:04:22,070
questions that we as rubyists have at

00:04:20,000 --> 00:04:25,840
the moment is what data store should i

00:04:22,070 --> 00:04:28,909
be using right postgres or or

00:04:25,840 --> 00:04:29,900
Cassandra so many choices and when

00:04:28,909 --> 00:04:33,380
you're a developer with a specific

00:04:29,900 --> 00:04:35,690
project in mind it can be hard to tell

00:04:33,380 --> 00:04:37,370
what the right answer is and the

00:04:35,690 --> 00:04:40,039
Internet has a ton of information about

00:04:37,370 --> 00:04:41,419
this stuff unfortunately the Internet

00:04:40,039 --> 00:04:43,849
has a ton of information about this

00:04:41,419 --> 00:04:44,870
stuff and it's really hard to sift

00:04:43,849 --> 00:04:46,969
through and find the things that are

00:04:44,870 --> 00:04:48,260
useful so here's a fun fact if you

00:04:46,969 --> 00:04:49,910
google how to pick a

00:04:48,260 --> 00:04:52,900
framework as of last week there were two

00:04:49,910 --> 00:04:54,770
pages of results for the last six months

00:04:52,900 --> 00:04:56,360
unfortunately all of these things taken

00:04:54,770 --> 00:04:59,360
together are about as helpful as this

00:04:56,360 --> 00:05:00,770
collection of parking signs so I want to

00:04:59,360 --> 00:05:03,950
look at that tell me whether or not you

00:05:00,770 --> 00:05:06,950
can park there at noon on a Tuesday and

00:05:03,950 --> 00:05:08,870
I'm not going to wait these any of these

00:05:06,950 --> 00:05:10,280
blog posts and things give you

00:05:08,870 --> 00:05:11,810
contradictory and confusing information

00:05:10,280 --> 00:05:14,090
and that seemed to be the case even at

00:05:11,810 --> 00:05:16,220
fluent right I go to one talk and it

00:05:14,090 --> 00:05:17,930
would be like Amber is so amazing for X

00:05:16,220 --> 00:05:19,520
and then in the same room and the next

00:05:17,930 --> 00:05:21,410
time slot was an angular talk that was

00:05:19,520 --> 00:05:24,800
like angular is clearly superior for X

00:05:21,410 --> 00:05:29,090
and your job is to synthesize all of

00:05:24,800 --> 00:05:33,410
this data into a decision no pressure

00:05:29,090 --> 00:05:37,340
right but it's really important because

00:05:33,410 --> 00:05:39,200
the cost of being wrong is high it's not

00:05:37,340 --> 00:05:40,610
just are you parking illegally might you

00:05:39,200 --> 00:05:41,960
get a thirty dollar ticket right it's

00:05:40,610 --> 00:05:43,130
like if you pick a JavaScript framework

00:05:41,960 --> 00:05:44,480
that isn't suited to your project it

00:05:43,130 --> 00:05:45,950
could be pretty disastrous depending on

00:05:44,480 --> 00:05:47,900
when you find out right how far down the

00:05:45,950 --> 00:05:51,560
road do you go before you realize

00:05:47,900 --> 00:05:54,980
there's no more Road so these decisions

00:05:51,560 --> 00:05:55,910
are big and they're scary and we want to

00:05:54,980 --> 00:05:57,470
be able to get better at them

00:05:55,910 --> 00:06:01,040
unfortunately we don't make these

00:05:57,470 --> 00:06:02,630
decisions very often and one of the most

00:06:01,040 --> 00:06:05,150
effective ways for our human brains to

00:06:02,630 --> 00:06:06,700
learn is by repetition so I should I'm

00:06:05,150 --> 00:06:08,990
sure that you have heard this before

00:06:06,700 --> 00:06:11,120
because in programming pop culture we've

00:06:08,990 --> 00:06:14,060
got a particular mean we have this one I

00:06:11,120 --> 00:06:16,250
found this inspirational image on the

00:06:14,060 --> 00:06:18,530
internets right the meme is it takes

00:06:16,250 --> 00:06:20,150
10,000 hours of practice to get great at

00:06:18,530 --> 00:06:23,420
something like playing an instrument

00:06:20,150 --> 00:06:25,600
programming or whatever this person is

00:06:23,420 --> 00:06:25,600
doing

00:06:25,830 --> 00:06:29,980
and it actually makes me a little bit

00:06:28,600 --> 00:06:31,690
angry every time I see this and not

00:06:29,980 --> 00:06:33,130
because of that horrendous drop shadow

00:06:31,690 --> 00:06:35,170
on the text although that is pretty bad

00:06:33,130 --> 00:06:36,640
you gotta admit it makes me angry

00:06:35,170 --> 00:06:39,400
because it's such an oversimplification

00:06:36,640 --> 00:06:40,960
of how people learn I could do a whole

00:06:39,400 --> 00:06:42,280
talk and I actually considered it you're

00:06:40,960 --> 00:06:43,900
lucky I didn't about how much

00:06:42,280 --> 00:06:47,220
misinformation is just in these two

00:06:43,900 --> 00:06:49,360
sentences so we're not going to do that

00:06:47,220 --> 00:06:50,530
but the meme is persisted partially

00:06:49,360 --> 00:06:52,930
because it has a kernel of truth in it

00:06:50,530 --> 00:06:55,120
which is that repetition is powerful the

00:06:52,930 --> 00:06:57,670
key though is not just time spent it's

00:06:55,120 --> 00:06:59,650
how you spend that time you can spend

00:06:57,670 --> 00:07:00,790
10,000 hours on something but if you're

00:06:59,650 --> 00:07:03,490
not doing it right those hours are

00:07:00,790 --> 00:07:06,010
wasted to learn by repetition you have

00:07:03,490 --> 00:07:08,170
to do the action analyze the outcome

00:07:06,010 --> 00:07:10,180
repeat the action changing it a little

00:07:08,170 --> 00:07:11,410
bit that's the important part changing

00:07:10,180 --> 00:07:14,020
it to see if that changes the outcome

00:07:11,410 --> 00:07:15,220
and even once you think you've got it

00:07:14,020 --> 00:07:17,710
even once you think you can do that

00:07:15,220 --> 00:07:19,840
perfect cursive letter L you need to

00:07:17,710 --> 00:07:22,930
keep experimenting new things and that's

00:07:19,840 --> 00:07:24,550
where the learning actually happens as a

00:07:22,930 --> 00:07:26,260
side note my daughter is eight years old

00:07:24,550 --> 00:07:29,710
she's in third grade they don't teach

00:07:26,260 --> 00:07:30,970
cursive anymore I was shocked at all

00:07:29,710 --> 00:07:33,000
they don't do these worksheets I

00:07:30,970 --> 00:07:35,530
remember doing these work she's as a kid

00:07:33,000 --> 00:07:37,570
which makes me feel old but she has

00:07:35,530 --> 00:07:40,210
however known how to operate in the iPad

00:07:37,570 --> 00:07:41,920
since she was two so I guess I'm betting

00:07:40,210 --> 00:07:45,070
that that will be a more useful skill in

00:07:41,920 --> 00:07:47,500
the new world but we'll see so

00:07:45,070 --> 00:07:48,760
repetition is a way that we can get

00:07:47,500 --> 00:07:50,710
better at something like a large-scale

00:07:48,760 --> 00:07:53,800
technical decision making if only we did

00:07:50,710 --> 00:07:56,050
it at a lot as often as Noah is doing

00:07:53,800 --> 00:07:58,720
his letter l's right if only we could

00:07:56,050 --> 00:08:01,500
wait 10 years or 15 years to accumulate

00:07:58,720 --> 00:08:04,060
more experience with this type of thing

00:08:01,500 --> 00:08:05,770
yeah can't do that at least not right

00:08:04,060 --> 00:08:07,870
now but we can make an end run around

00:08:05,770 --> 00:08:09,400
this limitation by analyzing the

00:08:07,870 --> 00:08:11,380
decisions we do make all the time and

00:08:09,400 --> 00:08:13,660
bringing that intelligence back to the

00:08:11,380 --> 00:08:15,850
framework choice because our

00:08:13,660 --> 00:08:16,810
decision-making making happens at

00:08:15,850 --> 00:08:18,700
different scales and different

00:08:16,810 --> 00:08:20,620
frequencies so language and framework

00:08:18,700 --> 00:08:22,060
choices are the most infrequently made

00:08:20,620 --> 00:08:26,140
decisions but there are a few things we

00:08:22,060 --> 00:08:27,640
do more frequently such as decide

00:08:26,140 --> 00:08:30,430
whether to use some random code you

00:08:27,640 --> 00:08:31,750
found on github and even more frequently

00:08:30,430 --> 00:08:33,130
than that are the technical decisions we

00:08:31,750 --> 00:08:35,500
make every day which are things like

00:08:33,130 --> 00:08:38,560
where does this code go what should I

00:08:35,500 --> 00:08:39,870
call this variable should I write a test

00:08:38,560 --> 00:08:42,520
now

00:08:39,870 --> 00:08:44,950
but even at the smallest most frequent

00:08:42,520 --> 00:08:47,650
level the process we use to make these

00:08:44,950 --> 00:08:49,600
decisions is pretty opaque if you ask a

00:08:47,650 --> 00:08:50,980
programmer why they named a variable

00:08:49,600 --> 00:08:53,200
certain way or why they put a function

00:08:50,980 --> 00:08:55,180
where they put it often the best thing I

00:08:53,200 --> 00:08:57,940
can tell you as well it seemed like the

00:08:55,180 --> 00:09:03,100
right thing to do sometimes you get

00:08:57,940 --> 00:09:06,760
answers like experience intuition gut

00:09:03,100 --> 00:09:08,350
feeling when I ask one program or why

00:09:06,760 --> 00:09:09,640
they like ember over angular or the

00:09:08,350 --> 00:09:11,470
other way around i get very similar

00:09:09,640 --> 00:09:14,170
opaque responses right i get things like

00:09:11,470 --> 00:09:16,000
it feels more natural and i've put that

00:09:14,170 --> 00:09:17,320
from both sides by the way from

00:09:16,000 --> 00:09:18,610
different people so i wanted to

00:09:17,320 --> 00:09:20,470
investigate what goes into that feeling

00:09:18,610 --> 00:09:21,940
right like what data do we collect what

00:09:20,470 --> 00:09:23,470
we how do we organize it what do we do

00:09:21,940 --> 00:09:25,600
with it because we want to get insights

00:09:23,470 --> 00:09:27,670
into these so we're going to get these

00:09:25,600 --> 00:09:29,650
because it turns out that you and I both

00:09:27,670 --> 00:09:32,590
know a lot of people who evaluate random

00:09:29,650 --> 00:09:34,000
code off github all the time so I asked

00:09:32,590 --> 00:09:35,830
a bunch of my colleagues to introspect

00:09:34,000 --> 00:09:37,480
for me and describe how they evaluate a

00:09:35,830 --> 00:09:40,210
gem that they're considering using in

00:09:37,480 --> 00:09:41,650
their project and it turns out that

00:09:40,210 --> 00:09:43,360
everyone starts in the same place which

00:09:41,650 --> 00:09:45,400
is that they go to github and they read

00:09:43,360 --> 00:09:48,640
the readme now this is a readme that

00:09:45,400 --> 00:09:50,380
predates github somewhat it is from 1936

00:09:48,640 --> 00:09:53,350
it's a readme about how to operate the

00:09:50,380 --> 00:09:55,150
telephone so when people come to a

00:09:53,350 --> 00:09:56,920
readme they're looking for features

00:09:55,150 --> 00:09:58,770
functionality usage of the code they're

00:09:56,920 --> 00:10:01,570
looking at for the interface of the gem

00:09:58,770 --> 00:10:02,950
what does it do how do you use it this

00:10:01,570 --> 00:10:04,180
information is usually easy to find

00:10:02,950 --> 00:10:05,590
because it's in bullet points right

00:10:04,180 --> 00:10:11,260
there in the readme right to operate

00:10:05,590 --> 00:10:13,000
answer to clear to make calls so let's

00:10:11,260 --> 00:10:14,320
consider an example evaluation and walk

00:10:13,000 --> 00:10:16,090
you what this looks like let's say

00:10:14,320 --> 00:10:20,200
you're trying to pick a gem to make HTTP

00:10:16,090 --> 00:10:21,850
requests so we all know that making HTTP

00:10:20,200 --> 00:10:24,160
request is how you use the tubes that

00:10:21,850 --> 00:10:25,480
make the internets so we knew gem so we

00:10:24,160 --> 00:10:29,650
do some googling and we find two

00:10:25,480 --> 00:10:30,850
contenders we find HTTP party which i'm

00:10:29,650 --> 00:10:33,310
not sure i'm pronouncing correctly in

00:10:30,850 --> 00:10:36,100
fact i'm pretty sure i'm not and faraday

00:10:33,310 --> 00:10:38,190
so assuming you don't just miss HTTP

00:10:36,100 --> 00:10:40,270
party because you don't like saying it

00:10:38,190 --> 00:10:41,680
you can look at the readme you look at

00:10:40,270 --> 00:10:42,670
the usage section this is what you find

00:10:41,680 --> 00:10:43,870
you don't need to actually read all this

00:10:42,670 --> 00:10:48,190
code i'll point out the interesting bits

00:10:43,870 --> 00:10:52,000
HTTP party

00:10:48,190 --> 00:10:54,280
has static methods you can call or you

00:10:52,000 --> 00:10:57,820
can include its module into your own

00:10:54,280 --> 00:11:00,040
object and have HTTP methods as instance

00:10:57,820 --> 00:11:01,320
methods Faraday takes a different

00:11:00,040 --> 00:11:04,120
approach because you a connection object

00:11:01,320 --> 00:11:05,650
that you can use to make the calls so

00:11:04,120 --> 00:11:07,840
both interfaces will work both will

00:11:05,650 --> 00:11:11,320
allow you to make any HTTP call you need

00:11:07,840 --> 00:11:14,920
to make so this by itself is not enough

00:11:11,320 --> 00:11:16,450
to make a decision just like the bullet

00:11:14,920 --> 00:11:17,350
list of features of framework aren't you

00:11:16,450 --> 00:11:20,190
have to tell you whether it's worth

00:11:17,350 --> 00:11:23,350
using so what else do we think about

00:11:20,190 --> 00:11:24,970
here's what i got from interviewing a

00:11:23,350 --> 00:11:26,770
bunch of people everyone pretty much

00:11:24,970 --> 00:11:28,330
starts with a readme you can tell this

00:11:26,770 --> 00:11:31,120
is gonna be scary slide right font so

00:11:28,330 --> 00:11:33,640
small you ready here we go the long list

00:11:31,120 --> 00:11:35,170
they look at the frequency and recency

00:11:33,640 --> 00:11:37,000
of commits on github they look at how

00:11:35,170 --> 00:11:38,710
many issues there are and how old they

00:11:37,000 --> 00:11:40,990
are they look at the comments to see if

00:11:38,710 --> 00:11:44,080
the maintainer they look at the

00:11:40,990 --> 00:11:46,270
number of recent blog posts about it

00:11:44,080 --> 00:11:48,100
they look at ruby toolbox to see how it

00:11:46,270 --> 00:11:50,170
compares to similar gems they look at

00:11:48,100 --> 00:11:51,880
the date of the last release they look a

00:11:50,170 --> 00:11:53,530
sec overflow to see how many questions

00:11:51,880 --> 00:11:55,900
are about it and how many are not

00:11:53,530 --> 00:11:58,030
answered and they asked a bunch of

00:11:55,900 --> 00:11:59,530
people ask work colleagues they asked

00:11:58,030 --> 00:12:01,060
Twitter they axed hacker news which

00:11:59,530 --> 00:12:03,460
seems like a really bad idea to me but

00:12:01,060 --> 00:12:05,260
some people do it they ask other

00:12:03,460 --> 00:12:06,970
developers they look at the official

00:12:05,260 --> 00:12:08,920
docs they look at books they look for

00:12:06,970 --> 00:12:10,900
screencasts sometimes they read the code

00:12:08,920 --> 00:12:14,470
directly or read the test directly

00:12:10,900 --> 00:12:15,670
sometimes I just try it or if it's

00:12:14,470 --> 00:12:18,550
important enough maybe they'll build a

00:12:15,670 --> 00:12:20,800
sample app around it so this is a not an

00:12:18,550 --> 00:12:22,480
exhaustive list but it's pretty much the

00:12:20,800 --> 00:12:23,830
union of what everyone told me about how

00:12:22,480 --> 00:12:25,150
they pick a jam and I want to point out

00:12:23,830 --> 00:12:26,980
a few interesting features of this list

00:12:25,150 --> 00:12:28,270
the first is that different people rank

00:12:26,980 --> 00:12:30,010
these differently right so everyone

00:12:28,270 --> 00:12:32,170
pretty much pokes around on github first

00:12:30,010 --> 00:12:34,180
and then what I do after that is I

00:12:32,170 --> 00:12:36,460
usually ask my work colleagues for input

00:12:34,180 --> 00:12:38,410
but one of the people I talked to works

00:12:36,460 --> 00:12:41,140
at a company where it's a really bad

00:12:38,410 --> 00:12:44,170
idea to display any kind of ignorance so

00:12:41,140 --> 00:12:45,339
as soon as he looks like he goes

00:12:44,170 --> 00:12:48,040
straight for like official docket

00:12:45,339 --> 00:12:49,750
documentation so that's the first thing

00:12:48,040 --> 00:12:52,540
the second thing is that no one does all

00:12:49,750 --> 00:12:54,400
of these for any given evaluation but

00:12:52,540 --> 00:12:56,740
the riskier decision is the more of them

00:12:54,400 --> 00:12:58,360
we do and the last thing is that this

00:12:56,740 --> 00:13:00,610
list changes as the community that

00:12:58,360 --> 00:13:02,019
generated it changes for example before

00:13:00,610 --> 00:13:03,910
rails came along

00:13:02,019 --> 00:13:05,230
a lot of discussion about Ruby libraries

00:13:03,910 --> 00:13:08,220
took place on the official English

00:13:05,230 --> 00:13:10,119
language Ruby mailing list but today I

00:13:08,220 --> 00:13:12,249
don't think it would occur to any of us

00:13:10,119 --> 00:13:13,660
to post the official English language

00:13:12,249 --> 00:13:17,050
Ruby mailing list if we were trying to

00:13:13,660 --> 00:13:18,249
pick an HTTP gem and different

00:13:17,050 --> 00:13:19,689
communities will generate different

00:13:18,249 --> 00:13:21,189
lists if we were to generate this for a

00:13:19,689 --> 00:13:22,329
Python for example there would be a lot

00:13:21,189 --> 00:13:23,679
more mailing lists on there because that

00:13:22,329 --> 00:13:26,679
community depends much more heavily on

00:13:23,679 --> 00:13:28,059
mailing lists so all these things I'm

00:13:26,679 --> 00:13:29,889
just pointing out that the way that we

00:13:28,059 --> 00:13:32,589
collect and use this data is pretty

00:13:29,889 --> 00:13:33,939
complicated and the most interesting

00:13:32,589 --> 00:13:36,339
thing though is that if you eyeball this

00:13:33,939 --> 00:13:39,009
list you'll discover that most of it

00:13:36,339 --> 00:13:42,639
isn't technical data we think about

00:13:39,009 --> 00:13:44,619
evaluating code we think about looking

00:13:42,639 --> 00:13:46,209
at the code and we think we're making

00:13:44,619 --> 00:13:48,939
decisions based on technical things but

00:13:46,209 --> 00:13:50,709
most of the data up here is social it's

00:13:48,939 --> 00:13:53,399
information about the people around a

00:13:50,709 --> 00:13:56,049
project the maintainer is the users

00:13:53,399 --> 00:13:56,980
there is some technical data here let's

00:13:56,049 --> 00:13:58,660
see if we can cat it will pull that

00:13:56,980 --> 00:14:01,119
stuff out first this is the interface

00:13:58,660 --> 00:14:04,089
it's like the external interface of the

00:14:01,119 --> 00:14:05,649
gem and then these things are all

00:14:04,089 --> 00:14:07,360
information about the activity of a

00:14:05,649 --> 00:14:08,829
project how often is it updated how

00:14:07,360 --> 00:14:10,559
likely am I to get help from a

00:14:08,829 --> 00:14:14,019
maintainer get a pull request merged

00:14:10,559 --> 00:14:19,179
pull those out over here give us a

00:14:14,019 --> 00:14:21,069
little bit of space here so what's left

00:14:19,179 --> 00:14:22,629
well all this stuff is information about

00:14:21,069 --> 00:14:24,730
the project's popularity among other

00:14:22,629 --> 00:14:26,829
developers how easy will it be to find

00:14:24,730 --> 00:14:28,629
help when I run into a problem can I

00:14:26,829 --> 00:14:30,610
hire someone who already does this how

00:14:28,629 --> 00:14:32,199
likely is it that someone else has

00:14:30,610 --> 00:14:34,929
already fixed a bug by the time I

00:14:32,199 --> 00:14:37,179
encounter it so plus stuff out over here

00:14:34,929 --> 00:14:40,089
and now we are left with a couple of

00:14:37,179 --> 00:14:42,670
outliers and these are reading the code

00:14:40,089 --> 00:14:44,199
and reading the tests which don't really

00:14:42,670 --> 00:14:46,929
fit into any of the groups we have so

00:14:44,199 --> 00:14:48,490
far right interface activity popularity

00:14:46,929 --> 00:14:49,689
are all pretty straightforward well

00:14:48,490 --> 00:14:51,790
known sources of data for all that

00:14:49,689 --> 00:14:53,139
information but what we have left is a

00:14:51,790 --> 00:14:55,899
little fuzzier it's really about how

00:14:53,139 --> 00:14:59,049
familiar things feel to you is this code

00:14:55,899 --> 00:15:01,600
idiomatic Ruby does the maintainer share

00:14:59,049 --> 00:15:02,980
my test strategy how much does this code

00:15:01,600 --> 00:15:05,860
match up with what I would write if I

00:15:02,980 --> 00:15:07,660
were going to roll my own how much does

00:15:05,860 --> 00:15:10,899
this code feel like other code I've seen

00:15:07,660 --> 00:15:13,299
so I want to call this accessibility so

00:15:10,899 --> 00:15:14,619
there's our last group these are the

00:15:13,299 --> 00:15:15,520
four categories of data that we think

00:15:14,619 --> 00:15:18,340
about when we're making it

00:15:15,520 --> 00:15:19,900
about a gem once I got to this point in

00:15:18,340 --> 00:15:22,360
my presentation I kind of squinted at

00:15:19,900 --> 00:15:23,500
him for a while and I realize you can

00:15:22,360 --> 00:15:25,810
actually group these in two different

00:15:23,500 --> 00:15:27,520
ways so stay with me here we're about to

00:15:25,810 --> 00:15:29,830
make quadrants it's going to be amazing

00:15:27,520 --> 00:15:31,150
apparently this is the thing so here we

00:15:29,830 --> 00:15:32,590
go first off you can draw one line here

00:15:31,150 --> 00:15:34,330
the two categories on the top

00:15:32,590 --> 00:15:36,190
accessibility and interface or both

00:15:34,330 --> 00:15:37,840
about you interfaces about whether the

00:15:36,190 --> 00:15:40,210
code can do what you need it to do for

00:15:37,840 --> 00:15:41,530
your project accessibility is about

00:15:40,210 --> 00:15:43,960
whether your team feels comfortable with

00:15:41,530 --> 00:15:47,170
the metaphors of project uses and on the

00:15:43,960 --> 00:15:49,150
bottom popularity and activity are about

00:15:47,170 --> 00:15:50,980
the people and project outside of your

00:15:49,150 --> 00:15:53,230
team external factors so we have our

00:15:50,980 --> 00:15:55,360
internally of our external we can draw

00:15:53,230 --> 00:15:57,100
another line of course right there

00:15:55,360 --> 00:15:59,410
because I told I kind of gave it away

00:15:57,100 --> 00:16:02,170
we're already doing quadrants and on the

00:15:59,410 --> 00:16:03,910
left side accessibility and popularity

00:16:02,170 --> 00:16:05,590
both have to do with the people around a

00:16:03,910 --> 00:16:07,210
project right accessibility is whether

00:16:05,590 --> 00:16:08,380
or not your people can use it popularity

00:16:07,210 --> 00:16:10,570
is whether or not other people are using

00:16:08,380 --> 00:16:11,920
it and on the right side interface an

00:16:10,570 --> 00:16:14,410
activity or both information about the

00:16:11,920 --> 00:16:16,420
project itself at the interfaces we said

00:16:14,410 --> 00:16:17,890
right is whether the framework or

00:16:16,420 --> 00:16:21,190
whether the project does what you need

00:16:17,890 --> 00:16:22,930
an activity while it is generated by

00:16:21,190 --> 00:16:24,310
people is ultimately about the project

00:16:22,930 --> 00:16:26,490
it's about whether or not you can bet on

00:16:24,310 --> 00:16:28,600
bug fixes and improvements down the line

00:16:26,490 --> 00:16:30,220
so you go there's my four quadrant

00:16:28,600 --> 00:16:31,420
system for making difficult technical

00:16:30,220 --> 00:16:32,470
decisions i'm showing this talk to a

00:16:31,420 --> 00:16:34,300
friend actually we ought to this part

00:16:32,470 --> 00:16:35,710
and he was like this is awesome because

00:16:34,300 --> 00:16:38,290
you know consultants are supposed to

00:16:35,710 --> 00:16:39,930
have a system they're selling and I was

00:16:38,290 --> 00:16:44,320
like what he's like now you've got one

00:16:39,930 --> 00:16:46,240
and i was like huh he's like but you got

00:16:44,320 --> 00:16:47,410
to give it a getting of it a name it's

00:16:46,240 --> 00:16:49,390
not going to catch on let's give it a

00:16:47,410 --> 00:16:51,250
name and I thought okay if I'm gonna own

00:16:49,390 --> 00:16:53,290
this I'm gonna own this we're gonna give

00:16:51,250 --> 00:16:57,840
it a really narcissistic title you ready

00:16:53,290 --> 00:16:57,840
here we go the maze system

00:17:01,590 --> 00:17:05,020
and you know if this really actually

00:17:03,640 --> 00:17:08,050
does make you want to throw lots of

00:17:05,020 --> 00:17:09,880
money at me um let me know I guess but

00:17:08,050 --> 00:17:11,470
otherwise I think I'm just going to

00:17:09,880 --> 00:17:14,620
stick to my pair programming approach at

00:17:11,470 --> 00:17:16,270
the moment so far so far maybe this

00:17:14,620 --> 00:17:18,130
isn't super useful right all we've done

00:17:16,270 --> 00:17:19,890
is capture the practices that people

00:17:18,130 --> 00:17:22,330
actually do and put them in categories

00:17:19,890 --> 00:17:25,300
in categories while they can be useful

00:17:22,330 --> 00:17:26,950
right these seem very useful they really

00:17:25,300 --> 00:17:28,720
only become powerful when we apply them

00:17:26,950 --> 00:17:30,310
to the higher risk decision so let's

00:17:28,720 --> 00:17:33,040
look at how to apply these categories to

00:17:30,310 --> 00:17:35,110
higher risk problems I mean not these

00:17:33,040 --> 00:17:36,460
categories although that seems like it

00:17:35,110 --> 00:17:39,030
would also be an interesting talk these

00:17:36,460 --> 00:17:43,240
categories let's start with interface

00:17:39,030 --> 00:17:44,740
the interface of a framework is pretty

00:17:43,240 --> 00:17:46,180
straightforward it's what it's what's in

00:17:44,740 --> 00:17:48,430
the angular read me it's what's in the

00:17:46,180 --> 00:17:50,020
Ember read me it's what's in the intro

00:17:48,430 --> 00:17:51,760
tutorials these are the bullet list of

00:17:50,020 --> 00:17:53,440
features that make up most of the blog

00:17:51,760 --> 00:17:58,540
posts and talks and so on about picking

00:17:53,440 --> 00:18:00,340
a framework next activity activity is

00:17:58,540 --> 00:18:01,510
largely the same as at the smaller scale

00:18:00,340 --> 00:18:02,920
right you can get this information by

00:18:01,510 --> 00:18:04,300
looking at the github project looking at

00:18:02,920 --> 00:18:08,260
the release schedule looking at the

00:18:04,300 --> 00:18:10,150
docks so popularity also largely the

00:18:08,260 --> 00:18:11,770
same stack overflow content percentage

00:18:10,150 --> 00:18:14,590
of hacker news arguments number of

00:18:11,770 --> 00:18:16,390
recent blog posts and finally

00:18:14,590 --> 00:18:17,440
accessibility so this one's a little bit

00:18:16,390 --> 00:18:19,750
different once again it's kind of the

00:18:17,440 --> 00:18:22,060
interesting one because if you look over

00:18:19,750 --> 00:18:24,220
the JavaScript framework landscape that

00:18:22,060 --> 00:18:25,810
we have today there are multiple

00:18:24,220 --> 00:18:28,030
frameworks that have a sufficient

00:18:25,810 --> 00:18:32,830
interface are sufficiently popular and

00:18:28,030 --> 00:18:35,500
have sufficient activity right this is

00:18:32,830 --> 00:18:37,150
basically where we are today backbone

00:18:35,500 --> 00:18:38,590
angular and ember all three of these

00:18:37,150 --> 00:18:40,720
will do what your application needs

00:18:38,590 --> 00:18:43,420
they're all reasonably popular they're

00:18:40,720 --> 00:18:45,010
all reasonably active accessibility is

00:18:43,420 --> 00:18:47,350
how we distinguish these frameworks from

00:18:45,010 --> 00:18:48,610
each other so to make this more concrete

00:18:47,350 --> 00:18:50,050
I want to show you what an accessibility

00:18:48,610 --> 00:18:51,550
judgment looks like at the small scale

00:18:50,050 --> 00:18:54,400
and the large scale so let's go back to

00:18:51,550 --> 00:18:55,870
our HTTP library example both of these

00:18:54,400 --> 00:18:57,550
libraries have a sufficient interface

00:18:55,870 --> 00:18:59,950
there was actively maintained by both

00:18:57,550 --> 00:19:01,270
heavily used but they feel different to

00:18:59,950 --> 00:19:05,050
use and we can sum up the difference

00:19:01,270 --> 00:19:08,310
this way HTTP party lets you add call

00:19:05,050 --> 00:19:10,660
functionality to your existing objects

00:19:08,310 --> 00:19:13,080
faraday lets you keep call functionality

00:19:10,660 --> 00:19:14,430
in a separate object so

00:19:13,080 --> 00:19:17,370
if you come from a procedural

00:19:14,430 --> 00:19:19,110
programming background then the upper

00:19:17,370 --> 00:19:21,960
approach will feel more natural it'll

00:19:19,110 --> 00:19:23,220
feel more convenient but if you've done

00:19:21,960 --> 00:19:24,990
a lot of object-oriented programming

00:19:23,220 --> 00:19:27,930
maybe you've drank the single

00:19:24,990 --> 00:19:29,570
responsibility principle kool-aid then

00:19:27,930 --> 00:19:31,800
the lower approach feels better and

00:19:29,570 --> 00:19:34,170
that's what accessibility is all about

00:19:31,800 --> 00:19:35,580
do you identify with the style of the

00:19:34,170 --> 00:19:37,320
code and that's even more important when

00:19:35,580 --> 00:19:38,910
you're talking about frameworks because

00:19:37,320 --> 00:19:42,510
those will affect the code you write way

00:19:38,910 --> 00:19:44,040
more than an HTTP gem will but at the

00:19:42,510 --> 00:19:46,920
framework level it's not always easy to

00:19:44,040 --> 00:19:49,920
untangle what an accessibility judgment

00:19:46,920 --> 00:19:51,090
comes from but let's try let's try now

00:19:49,920 --> 00:19:52,440
that we've seen what accessibility means

00:19:51,090 --> 00:19:53,700
on the small scale let's look at what it

00:19:52,440 --> 00:19:55,710
means on the larger scale and I want to

00:19:53,700 --> 00:19:58,740
start with a little history of how Java

00:19:55,710 --> 00:20:02,520
and JavaScript have historically gotten

00:19:58,740 --> 00:20:04,440
along which is not very well so for a

00:20:02,520 --> 00:20:05,940
long time java web framework land was a

00:20:04,440 --> 00:20:07,290
very sad place to be if you were

00:20:05,940 --> 00:20:08,250
JavaScript right the state of the art

00:20:07,290 --> 00:20:10,680
for a while is something called

00:20:08,250 --> 00:20:13,470
javaserver faces I don't know if anyone

00:20:10,680 --> 00:20:14,910
remembers those and because they're not

00:20:13,470 --> 00:20:16,970
on my resume anywhere and please don't

00:20:14,910 --> 00:20:19,050
ever ask me about them again they are

00:20:16,970 --> 00:20:20,550
packaged front-end widgets usually with

00:20:19,050 --> 00:20:22,530
a really old version of jQuery thrown in

00:20:20,550 --> 00:20:23,940
there and put one on your page you put a

00:20:22,530 --> 00:20:26,670
little directive into your markup and

00:20:23,940 --> 00:20:27,990
it's fused JavaScript into your page it

00:20:26,670 --> 00:20:30,180
hooks up automatically to your back-end

00:20:27,990 --> 00:20:32,070
and you get JavaScript functionality in

00:20:30,180 --> 00:20:35,550
your web application without having to

00:20:32,070 --> 00:20:39,210
write any JavaScript at all and that was

00:20:35,550 --> 00:20:40,380
a feature so for years now the java

00:20:39,210 --> 00:20:41,880
community has put a pretty intense

00:20:40,380 --> 00:20:44,490
amount of effort into avoiding

00:20:41,880 --> 00:20:45,960
javascript entirely there were other

00:20:44,490 --> 00:20:47,490
efforts right there's quit anyone

00:20:45,960 --> 00:20:49,520
remember quit google web toolkit you

00:20:47,490 --> 00:20:51,630
write java compiles down to javascript

00:20:49,520 --> 00:20:54,510
there's more modern approaches right

00:20:51,630 --> 00:20:56,580
like dart and these are all basically

00:20:54,510 --> 00:20:59,270
efforts to allow java developers right

00:20:56,580 --> 00:21:01,470
of which there are millions in the world

00:20:59,270 --> 00:21:03,990
right javascript without actually having

00:21:01,470 --> 00:21:06,240
to learn it however in java land these

00:21:03,990 --> 00:21:08,880
days there's a new contender and that is

00:21:06,240 --> 00:21:11,970
angular JS written by java developers

00:21:08,880 --> 00:21:14,490
and feeching featuring a dependency

00:21:11,970 --> 00:21:18,060
injection structure eerily similar to

00:21:14,490 --> 00:21:21,210
those found in modern java back end web

00:21:18,060 --> 00:21:22,890
frameworks so if you come from the Java

00:21:21,210 --> 00:21:25,050
back-end world or the dotnet back-end

00:21:22,890 --> 00:21:26,250
world where dependency injection

00:21:25,050 --> 00:21:27,000
frameworks are standard operating

00:21:26,250 --> 00:21:29,730
procedure

00:21:27,000 --> 00:21:31,230
angular will feel very familiar I'll

00:21:29,730 --> 00:21:34,410
feel accessible right it'll feel it easy

00:21:31,230 --> 00:21:35,640
I'll feel normal now it's a huge step

00:21:34,410 --> 00:21:37,730
forward for the Java world right there

00:21:35,640 --> 00:21:40,470
actually writing JavaScript that's great

00:21:37,730 --> 00:21:42,330
awesome but it has a structure layered

00:21:40,470 --> 00:21:44,280
on top of it that makes it less risky

00:21:42,330 --> 00:21:46,140
for them to adopt because they can do

00:21:44,280 --> 00:21:48,720
javascript without having to learn an

00:21:46,140 --> 00:21:52,050
entirely new development paradigm just

00:21:48,720 --> 00:21:53,760
new syntax now conversely for those of

00:21:52,050 --> 00:21:55,290
us who don't come from Java or.net the

00:21:53,760 --> 00:21:57,230
dependency injection and angular can

00:21:55,290 --> 00:21:59,790
feel a little bit disorienting at first

00:21:57,230 --> 00:22:01,710
maybe fun right but disorienting and

00:21:59,790 --> 00:22:03,030
that makes adoption for us riskier

00:22:01,710 --> 00:22:04,440
because we have to take on the cognitive

00:22:03,030 --> 00:22:05,700
load of understanding the framework in

00:22:04,440 --> 00:22:07,950
addition to trying to actually get

00:22:05,700 --> 00:22:09,600
done now of course there's a learning

00:22:07,950 --> 00:22:12,180
curve on any JavaScript framework for

00:22:09,600 --> 00:22:13,740
any team but finding a framework that

00:22:12,180 --> 00:22:15,510
fits the way you already think makes

00:22:13,740 --> 00:22:17,880
adoption of that framework less risky

00:22:15,510 --> 00:22:19,230
and that's what accessibility measures

00:22:17,880 --> 00:22:21,270
at its core right it's a measure of how

00:22:19,230 --> 00:22:24,600
steep the learning curve is likely to be

00:22:21,270 --> 00:22:26,910
for your team let's talk about em bridge

00:22:24,600 --> 00:22:30,210
is with a mascot that I think we've

00:22:26,910 --> 00:22:32,880
decided is a hamster and it's not quite

00:22:30,210 --> 00:22:33,540
as creepy as the Go gopher I mean I

00:22:32,880 --> 00:22:35,340
don't know if you've ever seen the

00:22:33,540 --> 00:22:37,740
mascot for the go programming language

00:22:35,340 --> 00:22:43,320
but uh this may be the creepiest

00:22:37,740 --> 00:22:44,550
conference logo I have ever seen Wow all

00:22:43,320 --> 00:22:48,810
right anyway back to our friendly

00:22:44,550 --> 00:22:51,030
hamster M bridge is built by rails

00:22:48,810 --> 00:22:54,360
developers featuring at the center of

00:22:51,030 --> 00:22:55,770
all ember applications a router a piece

00:22:54,360 --> 00:22:58,730
of code that takes in a request and

00:22:55,770 --> 00:23:00,630
decides what code to run as a result

00:22:58,730 --> 00:23:04,710
eerily similar to what's at the center

00:23:00,630 --> 00:23:06,570
of all rails applications the concept

00:23:04,710 --> 00:23:09,060
that the route determine what code gets

00:23:06,570 --> 00:23:10,710
called flows from rest so if you come

00:23:09,060 --> 00:23:13,340
from a framework that matured in the

00:23:10,710 --> 00:23:15,330
restful era such as rails or Django

00:23:13,340 --> 00:23:17,910
ember.js is going to feel very

00:23:15,330 --> 00:23:20,700
accessible it'll feel easy feel natural

00:23:17,910 --> 00:23:23,130
on the other hand if you come from Java

00:23:20,700 --> 00:23:25,760
or.net or another way web framework that

00:23:23,130 --> 00:23:27,780
matured before rest was a popular thing

00:23:25,760 --> 00:23:29,490
then you're used to having much more

00:23:27,780 --> 00:23:31,800
control over exactly what happens during

00:23:29,490 --> 00:23:36,360
a request so ember may feel a little bit

00:23:31,800 --> 00:23:39,690
overly constraining and finally we have

00:23:36,360 --> 00:23:40,740
backbone.js sort of the granddaddy of

00:23:39,690 --> 00:23:42,050
all of them back on

00:23:40,740 --> 00:23:45,059
graduated out of a rails app in the

00:23:42,050 --> 00:23:47,010
2008-2009 time frame and I know it's

00:23:45,059 --> 00:23:49,290
hard to think back that far but that was

00:23:47,010 --> 00:23:51,780
before the idea of single page apps was

00:23:49,290 --> 00:23:53,670
really a thing there were one or two

00:23:51,780 --> 00:23:55,470
people doing things with like cappuccino

00:23:53,670 --> 00:23:57,360
over in a corner somewhere right but

00:23:55,470 --> 00:23:59,070
most people thought about javascript is

00:23:57,360 --> 00:24:01,590
something that decorated server rendered

00:23:59,070 --> 00:24:03,150
pages so you'd render review assemble

00:24:01,590 --> 00:24:04,920
some JavaScript shove it down the pipe

00:24:03,150 --> 00:24:06,330
to the client and then once they got

00:24:04,920 --> 00:24:09,360
there the JavaScript would add a veneer

00:24:06,330 --> 00:24:10,650
of interactivity to the mark-up and if

00:24:09,360 --> 00:24:12,960
that's how you still think about web

00:24:10,650 --> 00:24:15,510
applications then backbone will feel

00:24:12,960 --> 00:24:17,070
pretty natural it'll be easy it'll be

00:24:15,510 --> 00:24:21,120
straightforward maybe not convenient at

00:24:17,070 --> 00:24:22,470
times that's certainly understandable on

00:24:21,120 --> 00:24:24,420
the other hand if you're one of those

00:24:22,470 --> 00:24:25,590
kids today who thinks about a web

00:24:24,420 --> 00:24:27,210
application as a bunch of JavaScript

00:24:25,590 --> 00:24:28,530
that runs in a browser creates the

00:24:27,210 --> 00:24:30,900
markup and goes out to the Internet to

00:24:28,530 --> 00:24:33,300
get data once in a while then backbone

00:24:30,900 --> 00:24:34,800
feels completely wrong so for this

00:24:33,300 --> 00:24:36,330
framework the accessibility judgment

00:24:34,800 --> 00:24:38,910
flows from the type of projects you've

00:24:36,330 --> 00:24:41,520
done rather than the technologies you've

00:24:38,910 --> 00:24:43,500
done them in that's interesting right

00:24:41,520 --> 00:24:45,120
what we're seeing is that accessibility

00:24:43,500 --> 00:24:46,860
judgments come from many different

00:24:45,120 --> 00:24:48,330
sources when we're talking about

00:24:46,860 --> 00:24:50,790
frameworks because frameworks are much

00:24:48,330 --> 00:24:52,140
more complex than a simple gem so one

00:24:50,790 --> 00:24:53,850
source of the technology stacks you've

00:24:52,140 --> 00:24:55,050
worked with another source is the type

00:24:53,850 --> 00:24:56,220
of projects you've done it can be

00:24:55,050 --> 00:24:58,309
influenced by the people you've worked

00:24:56,220 --> 00:25:02,280
with all kinds of different things and

00:24:58,309 --> 00:25:03,720
for any given decision accessibility is

00:25:02,280 --> 00:25:06,390
the most difficult to figure out

00:25:03,720 --> 00:25:07,800
sometimes because it's not like the

00:25:06,390 --> 00:25:09,390
angular guys have a bullet point in

00:25:07,800 --> 00:25:11,370
their read me that's like written by

00:25:09,390 --> 00:25:13,770
Java developers for Java developers

00:25:11,370 --> 00:25:15,300
right everyone who's building a

00:25:13,770 --> 00:25:19,559
framework thinks they're building it for

00:25:15,300 --> 00:25:21,300
everyone and they're all wrong what

00:25:19,559 --> 00:25:25,470
they're actually doing is turning the

00:25:21,300 --> 00:25:27,000
way that they think into code so I guess

00:25:25,470 --> 00:25:29,220
from a practical standpoint the question

00:25:27,000 --> 00:25:31,100
is how do you see that I mean besides

00:25:29,220 --> 00:25:34,140
coming here and letting me rant at you I

00:25:31,100 --> 00:25:36,120
mean as fun as it is to talk about it

00:25:34,140 --> 00:25:38,100
you probably don't actually need to know

00:25:36,120 --> 00:25:39,210
what their biases are when you're making

00:25:38,100 --> 00:25:40,710
a decision because you'll be able to

00:25:39,210 --> 00:25:42,330
feel how well they line up with yours

00:25:40,710 --> 00:25:45,809
what you do need to do is notice the

00:25:42,330 --> 00:25:48,510
amount of ease or unease that you feel

00:25:45,809 --> 00:25:49,950
when you use a particular framework and

00:25:48,510 --> 00:25:51,570
remember that even once you're

00:25:49,950 --> 00:25:53,309
explicitly thinking about accessibility

00:25:51,570 --> 00:25:54,010
it may not always be the most important

00:25:53,309 --> 00:25:56,440
factor

00:25:54,010 --> 00:25:58,420
decision sometimes you have a team is

00:25:56,440 --> 00:25:59,950
overtaxed and you need a way to adopt a

00:25:58,420 --> 00:26:02,530
new technology that is as close as

00:25:59,950 --> 00:26:03,760
possible to what they already know but

00:26:02,530 --> 00:26:05,490
other times your team is ready and

00:26:03,760 --> 00:26:07,360
willing to be pushed further and

00:26:05,490 --> 00:26:08,950
sometimes you want popularity because

00:26:07,360 --> 00:26:12,010
you know you'll need to hire five people

00:26:08,950 --> 00:26:13,690
in the next four weeks but sometimes you

00:26:12,010 --> 00:26:15,190
fix something totally unpopular and new

00:26:13,690 --> 00:26:18,340
because it has that one feature that you

00:26:15,190 --> 00:26:19,600
need for this project but when you're

00:26:18,340 --> 00:26:20,860
making a decision just make sure you're

00:26:19,600 --> 00:26:21,940
actually thinking about all four

00:26:20,860 --> 00:26:23,140
quadrants now I want to close with

00:26:21,940 --> 00:26:26,350
something that I read on hacker news

00:26:23,140 --> 00:26:29,620
last week Steve cloud McCree tapper

00:26:26,350 --> 00:26:32,140
hacker news so I don't have to thank you

00:26:29,620 --> 00:26:34,570
Steve the context is a blog post about

00:26:32,140 --> 00:26:37,570
Nimrod which is an obscure programming

00:26:34,570 --> 00:26:40,300
language and one of the commenters talks

00:26:37,570 --> 00:26:43,060
about all the great features it has how

00:26:40,300 --> 00:26:45,820
great its interfaces and then he says

00:26:43,060 --> 00:26:47,650
the only reason Nimrod isn't popular is

00:26:45,820 --> 00:26:51,120
that people don't evaluate things

00:26:47,650 --> 00:26:53,380
logically he was clearly very frustrated

00:26:51,120 --> 00:26:56,560
and I actually I really sympathize with

00:26:53,380 --> 00:26:58,390
that point of view because the decisions

00:26:56,560 --> 00:27:01,060
that other people make really do look

00:26:58,390 --> 00:27:03,190
mysterious if you think that this is all

00:27:01,060 --> 00:27:06,490
there is to think about when you're

00:27:03,190 --> 00:27:09,430
evaluating a technology Nimrod is

00:27:06,490 --> 00:27:12,850
failing to catch on but it's not because

00:27:09,430 --> 00:27:14,680
people are illogical it's failing to

00:27:12,850 --> 00:27:16,840
catch on because their logic extends

00:27:14,680 --> 00:27:21,550
further than that guy can see from like

00:27:16,840 --> 00:27:23,170
down here so even though we can't repeat

00:27:21,550 --> 00:27:25,630
the language or the framework decision

00:27:23,170 --> 00:27:27,520
often enough to learn from repetition we

00:27:25,630 --> 00:27:30,250
can take these categories and let them

00:27:27,520 --> 00:27:31,420
expand the Vista of things were looking

00:27:30,250 --> 00:27:33,970
at when we're thinking about a

00:27:31,420 --> 00:27:37,090
large-scale technical decision as a very

00:27:33,970 --> 00:27:41,830
wise man once said change in perspective

00:27:37,090 --> 00:27:43,210
is worth 80 IQ points Alan Kay just you

00:27:41,830 --> 00:27:46,540
know invented object-oriented

00:27:43,210 --> 00:27:47,710
programming that's all so and I would

00:27:46,540 --> 00:27:50,140
say with the things we're talking about

00:27:47,710 --> 00:27:51,790
a change in perspective is worth 80 IQ

00:27:50,140 --> 00:27:56,640
points in about five years of experience

00:27:51,790 --> 00:27:56,640
and that's all I got thank you very much

00:28:03,020 --> 00:28:07,280
I have one other thing I have to do I'm

00:28:05,990 --> 00:28:09,440
trying to make sure that no one can ever

00:28:07,280 --> 00:28:10,880
tell me apart from sandy Mets so we are

00:28:09,440 --> 00:28:12,950
going to write a book together it's

00:28:10,880 --> 00:28:14,990
about how to refactor large rails apps

00:28:12,950 --> 00:28:18,280
so you can go to practical rails book

00:28:14,990 --> 00:28:18,280

YouTube URL: https://www.youtube.com/watch?v=FzzL_QDKv0c


