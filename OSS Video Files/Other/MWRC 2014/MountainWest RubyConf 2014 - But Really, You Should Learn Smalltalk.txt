Title: MountainWest RubyConf 2014 - But Really, You Should Learn Smalltalk
Publication date: 2020-01-24
Playlist: MWRC 2014
Description: 
	By Noel Rappin

Smalltalk has mystique. We talk about it more than we use it.
It seems like it should be so similar to Ruby. It has similar Object-Oriented structures, it even has blocks.
But everything is so slightly different, from the programming environment, to the 1-based arrays, to the simple syntax. Using Smalltalk will make you look at familiar constructs with new eyes.
We'll show you how to get started on Smalltalk, and walk through some sample code. Live coding may be involved.
You'll never look at objects the same way again.

Help us caption & translate this video!

http://amara.org/v/FG2V/
Captions: 
	00:00:24,650 --> 00:00:31,160
so welcome to Mountain West small talk

00:00:28,500 --> 00:00:34,379
chapter - glad to see you all

00:00:31,160 --> 00:00:36,210
what yeah this is gonna be fun I hope

00:00:34,379 --> 00:00:37,650
it's gonna be fun I promised Ryan that

00:00:36,210 --> 00:00:38,760
if things went bad well we kind of

00:00:37,650 --> 00:00:40,559
worked out with Ryan there's things went

00:00:38,760 --> 00:00:41,430
bad I was gonna start singing Leila it's

00:00:40,559 --> 00:00:43,769
a long story

00:00:41,430 --> 00:00:46,379
but we're hopefully nothing will go bad

00:00:43,769 --> 00:00:48,390
this is Pharoah small talk you can get

00:00:46,379 --> 00:00:50,579
it by going to Pharaoh - project.org

00:00:48,390 --> 00:00:52,199
this is essentially a stock startup

00:00:50,579 --> 00:00:55,350
image I haven't done much to it except I

00:00:52,199 --> 00:00:58,429
deleted the startup tutorial screen and

00:00:55,350 --> 00:01:01,050
I messed with the fonts and a small talk

00:00:58,429 --> 00:01:03,690
has the concept of a workspace which is

00:01:01,050 --> 00:01:05,309
something similar to a repple the IRB

00:01:03,690 --> 00:01:07,170
thing that we're all familiar with from

00:01:05,309 --> 00:01:08,280
ruby by the way just off the top of your

00:01:07,170 --> 00:01:11,250
how many people here have actually

00:01:08,280 --> 00:01:14,399
played with small talk at some point so

00:01:11,250 --> 00:01:15,810
a how many people have not i want you

00:01:14,399 --> 00:01:19,080
going to not paying any attention to me

00:01:15,810 --> 00:01:19,860
at all okay say hi on say hi to twitter

00:01:19,080 --> 00:01:25,140
for me

00:01:19,860 --> 00:01:27,090
enjoy your codebase okay so in the

00:01:25,140 --> 00:01:29,610
workspace this is live this is a live

00:01:27,090 --> 00:01:32,520
environment and this is live a small

00:01:29,610 --> 00:01:34,950
talk code 2+2 I can hit return and

00:01:32,520 --> 00:01:37,079
nothing happens because return doesn't

00:01:34,950 --> 00:01:39,659
mean anything here there's a small talk

00:01:37,079 --> 00:01:41,700
and this is actually not a line-by-line

00:01:39,659 --> 00:01:43,439
repple it's waiting for me to actually

00:01:41,700 --> 00:01:45,840
tell it that I'm done writing and to

00:01:43,439 --> 00:01:47,399
tell it to do something and there are

00:01:45,840 --> 00:01:49,590
keyboard shortcuts but basically I have

00:01:47,399 --> 00:01:51,689
a menu here with several options that I

00:01:49,590 --> 00:01:54,689
can do off the code one of the things

00:01:51,689 --> 00:01:56,640
that looks promising is do it and

00:01:54,689 --> 00:01:59,280
apparently nothing happens well in the

00:01:56,640 --> 00:02:00,420
background it did add two plus two but

00:01:59,280 --> 00:02:02,039
it didn't tell it to do anything with

00:02:00,420 --> 00:02:03,930
that value so it added two plus two and

00:02:02,039 --> 00:02:06,719
then came back to me what I actually

00:02:03,930 --> 00:02:08,850
want to do at this point is I want to

00:02:06,719 --> 00:02:10,859
print it and now the small talk

00:02:08,850 --> 00:02:13,530
workspace does what I have asked it to

00:02:10,859 --> 00:02:15,810
do the four is the response the the

00:02:13,530 --> 00:02:19,410
result of executing that piece of small

00:02:15,810 --> 00:02:21,359
talk it is conveniently highlighted so I

00:02:19,410 --> 00:02:22,829
can just keep typing I can one I can

00:02:21,359 --> 00:02:26,130
just hit delete and get rid of the whole

00:02:22,829 --> 00:02:27,930
that whole response and so this is a

00:02:26,130 --> 00:02:29,400
live scratch pad to the small talk

00:02:27,930 --> 00:02:34,200
environment and I can have more than one

00:02:29,400 --> 00:02:35,730
of them open and I can run anything

00:02:34,200 --> 00:02:38,940
here I can open another one here and I

00:02:35,730 --> 00:02:40,560
can so I have a bunch of snippets in

00:02:38,940 --> 00:02:43,349
text expander I can do anything in the

00:02:40,560 --> 00:02:45,209
small talk environment so I can print

00:02:43,349 --> 00:02:49,370
this this is a core this is part of the

00:02:45,209 --> 00:02:54,390
core Smalltalk library that works I can

00:02:49,370 --> 00:02:55,920
do multi-line stuff so I can select both

00:02:54,390 --> 00:02:58,050
of these lines and execute both of them

00:02:55,920 --> 00:02:59,610
by the way people who have not used

00:02:58,050 --> 00:03:01,530
small talk before what's going to happen

00:02:59,610 --> 00:03:04,200
when I act when I execute these two

00:03:01,530 --> 00:03:05,970
lines first line is creating array

00:03:04,200 --> 00:03:08,099
second line is saying at index one of

00:03:05,970 --> 00:03:09,360
the array don't say it out loud write it

00:03:08,099 --> 00:03:11,700
down on a piece of paper whisper it to

00:03:09,360 --> 00:03:14,340
your neighbor or something like that so

00:03:11,700 --> 00:03:16,650
it's a Twitter you're going to get null

00:03:14,340 --> 00:03:18,870
because small talk arrays are one based

00:03:16,650 --> 00:03:20,849
so the first element of the array is

00:03:18,870 --> 00:03:22,760
actually the first element of the array

00:03:20,849 --> 00:03:25,140
and not the second element of the array

00:03:22,760 --> 00:03:26,730
that only sounds weird to you because

00:03:25,140 --> 00:03:28,709
you've been indoctrinated by years of

00:03:26,730 --> 00:03:30,510
working in zero based arrays normal

00:03:28,709 --> 00:03:32,160
people when they count the first thing

00:03:30,510 --> 00:03:36,329
in an array is actually the first thing

00:03:32,160 --> 00:03:42,180
in an array huh fix Ruby okay my patch

00:03:36,329 --> 00:03:44,579
was actually rejected there's a great

00:03:42,180 --> 00:03:45,989
quote and I'm gonna I'm not gonna the

00:03:44,579 --> 00:03:47,299
attribution but if you google you find

00:03:45,989 --> 00:03:49,889
out where somebody says that his

00:03:47,299 --> 00:03:53,730
proposal to start arrays that what a

00:03:49,889 --> 00:03:57,510
half was rejected out of hand as a

00:03:53,730 --> 00:03:59,910
compromise okay so I can come up here to

00:03:57,510 --> 00:04:02,370
the top line and I'm looking at this so

00:03:59,910 --> 00:04:04,170
to read this line I've got X which is a

00:04:02,370 --> 00:04:06,540
local variable colon equals which is

00:04:04,170 --> 00:04:09,569
assignment pound I'm creating a literal

00:04:06,540 --> 00:04:11,220
array and I can actually inspect this in

00:04:09,569 --> 00:04:13,350
small talk which is opening a special

00:04:11,220 --> 00:04:16,109
small talk window called an inspector

00:04:13,350 --> 00:04:18,630
this is a live look at the object under

00:04:16,109 --> 00:04:20,729
in question you can see self here is

00:04:18,630 --> 00:04:23,430
that actual object and I can come

00:04:20,729 --> 00:04:25,950
through and see all of the though that

00:04:23,430 --> 00:04:28,560
come actually shouldn't be there all of

00:04:25,950 --> 00:04:31,380
the elements of that array and I have

00:04:28,560 --> 00:04:34,830
this window down here at the bottom hey

00:04:31,380 --> 00:04:38,280
this is a live workspace window and I

00:04:34,830 --> 00:04:40,229
can do and I can inspect I can go self

00:04:38,280 --> 00:04:41,910
at one and I can print it here exactly

00:04:40,229 --> 00:04:43,919
like I was in a live-work space I'm

00:04:41,910 --> 00:04:45,780
interacting with this object interact

00:04:43,919 --> 00:04:49,760
I'm interacting with this object live as

00:04:45,780 --> 00:04:49,760
it goes so

00:04:53,600 --> 00:04:58,950
I'm no rappin I work at tabl X I a small

00:04:57,060 --> 00:05:00,570
consulting company in Chicago and I'm

00:04:58,950 --> 00:05:02,070
gonna spend the next oh I don't know how

00:05:00,570 --> 00:05:04,830
many amperes of time because nobody

00:05:02,070 --> 00:05:06,300
started the timer uh I'm sorry I'm just

00:05:04,830 --> 00:05:15,480
gonna keep going until we run out of

00:05:06,300 --> 00:05:18,570
small talk uh and really you should

00:05:15,480 --> 00:05:21,300
learn small talk and um

00:05:18,570 --> 00:05:24,330
randy alluded to this this morning i'm

00:05:21,300 --> 00:05:26,010
gonna talk a little bit about why and a

00:05:24,330 --> 00:05:26,730
little bit about how and what it looks

00:05:26,010 --> 00:05:29,130
like

00:05:26,730 --> 00:05:31,320
i have three reasons why small talk is

00:05:29,130 --> 00:05:33,210
interesting i feel like in the Ruby

00:05:31,320 --> 00:05:35,370
community small talk has sort of this

00:05:33,210 --> 00:05:37,350
legendary mystique status it's like the

00:05:35,370 --> 00:05:39,390
dinosaurs of programming language like

00:05:37,350 --> 00:05:42,210
we know that people used it to do really

00:05:39,390 --> 00:05:44,160
cool things in the past nobody seems to

00:05:42,210 --> 00:05:46,350
be using now no one quite knows why it

00:05:44,160 --> 00:05:48,720
went extinct but it seems like it's

00:05:46,350 --> 00:05:50,490
really cool and has a mystique so that's

00:05:48,720 --> 00:05:53,960
one interesting thing about it and I

00:05:50,490 --> 00:05:57,960
want to demystify it a little bit here

00:05:53,960 --> 00:06:00,090
small talk is the purest oo language

00:05:57,960 --> 00:06:01,770
this morning we learned about scheme

00:06:00,090 --> 00:06:05,130
which is the purest functional the

00:06:01,770 --> 00:06:07,290
purest Lisp language Ruby is almost as

00:06:05,130 --> 00:06:08,850
far as you can get from being a purest

00:06:07,290 --> 00:06:15,360
language unless you're actually writing

00:06:08,850 --> 00:06:17,729
Perl small talk is a purest language the

00:06:15,360 --> 00:06:19,770
syntax of the language itself is very

00:06:17,729 --> 00:06:23,250
minimal almost everything is in the

00:06:19,770 --> 00:06:24,900
object library and the reason to work in

00:06:23,250 --> 00:06:27,200
a purest language at least for some

00:06:24,900 --> 00:06:29,880
things so because it forces you to

00:06:27,200 --> 00:06:31,530
confront and to understand the single

00:06:29,880 --> 00:06:34,440
idea that the language is built around

00:06:31,530 --> 00:06:36,960
if you you if you write scheme you

00:06:34,440 --> 00:06:38,970
absolutely have to deal with functions

00:06:36,960 --> 00:06:40,620
and and recursion there's no other way

00:06:38,970 --> 00:06:41,640
to successfully use the language if

00:06:40,620 --> 00:06:43,770
you're going to use small talk

00:06:41,640 --> 00:06:45,150
successfully you need to understand

00:06:43,770 --> 00:06:46,979
objects and message-passing

00:06:45,150 --> 00:06:51,810
because there literally is nothing else

00:06:46,979 --> 00:06:53,760
to the language small talk is a live

00:06:51,810 --> 00:06:56,220
dynamic environment a point I have said

00:06:53,760 --> 00:06:58,140
like four times already I think and will

00:06:56,220 --> 00:07:00,500
probably say another 37 so if you're

00:06:58,140 --> 00:07:04,250
looking for drinking games there we go

00:07:00,500 --> 00:07:05,960
and it is different from the

00:07:04,250 --> 00:07:08,780
environments that we're used to where we

00:07:05,960 --> 00:07:11,210
have a line where we have files in text

00:07:08,780 --> 00:07:13,340
that are interpreted and we kind of sort

00:07:11,210 --> 00:07:15,080
of poke at them in small talk you are

00:07:13,340 --> 00:07:17,030
immerse the small talk environment is

00:07:15,080 --> 00:07:18,890
not just your code but it is also your

00:07:17,030 --> 00:07:21,830
editor it is also your operating system

00:07:18,890 --> 00:07:24,440
it is also your runtime it is really the

00:07:21,830 --> 00:07:26,050
live binary state of every object in the

00:07:24,440 --> 00:07:28,040
system which gets saved out and

00:07:26,050 --> 00:07:31,550
reinstated every when you reopen the

00:07:28,040 --> 00:07:33,230
system and the implications of that the

00:07:31,550 --> 00:07:36,440
positive positive implication of that is

00:07:33,230 --> 00:07:37,820
you have access to system state and

00:07:36,440 --> 00:07:40,640
small talk in a way that you can only

00:07:37,820 --> 00:07:42,740
dream of in Ruby and the downside of

00:07:40,640 --> 00:07:44,180
that is you have access to system state

00:07:42,740 --> 00:07:49,250
and small talk that you can only dream

00:07:44,180 --> 00:07:50,990
of in Ruby you can rewrite true you can

00:07:49,250 --> 00:07:53,240
to make you can make your editor video

00:07:50,990 --> 00:07:55,250
disappear you can do all kinds of crazy

00:07:53,240 --> 00:07:59,390
things and you can do all kinds of

00:07:55,250 --> 00:08:01,700
wonderful things also small talk to a

00:07:59,390 --> 00:08:04,640
certain extent like Lisp is an

00:08:01,700 --> 00:08:06,169
evolutionary road not taken' most of the

00:08:04,640 --> 00:08:07,700
people in this room have probably spent

00:08:06,169 --> 00:08:09,530
the majority of their careers

00:08:07,700 --> 00:08:13,760
programming in a language that was based

00:08:09,530 --> 00:08:16,160
on or heavily influenced by C even if it

00:08:13,760 --> 00:08:18,320
doesn't use C's syntax it's very heavily

00:08:16,160 --> 00:08:20,300
influenced by being compiled to C and it

00:08:18,320 --> 00:08:22,490
uses for instance zero-based arrays

00:08:20,300 --> 00:08:25,130
because C has zero-based arrays because

00:08:22,490 --> 00:08:26,870
of pointer arithmetic which really means

00:08:25,130 --> 00:08:28,430
nothing to Ruby except that it's the

00:08:26,870 --> 00:08:31,760
easiest way to do it because that's how

00:08:28,430 --> 00:08:33,650
she does it and as a result there's

00:08:31,760 --> 00:08:35,750
probably some things that you believe

00:08:33,650 --> 00:08:38,300
are immutable and constant about

00:08:35,750 --> 00:08:40,339
programming languages that just aren't

00:08:38,300 --> 00:08:41,479
really true in small talk the naming

00:08:40,339 --> 00:08:44,150
conventions are a little bit different

00:08:41,479 --> 00:08:46,580
the the flow of the language is a little

00:08:44,150 --> 00:08:48,320
bit different and it will make you think

00:08:46,580 --> 00:08:49,970
a little bit differently about the

00:08:48,320 --> 00:08:53,450
boundaries of what a programming

00:08:49,970 --> 00:08:56,360
language is similarly and this is also

00:08:53,450 --> 00:08:58,360
again to talk this morning being fluent

00:08:56,360 --> 00:09:01,670
and small talk and small talks patterns

00:08:58,360 --> 00:09:03,260
will just expand your toolkit and expand

00:09:01,670 --> 00:09:04,580
the range of solutions that you can

00:09:03,260 --> 00:09:05,450
bring to bear and a problem that's

00:09:04,580 --> 00:09:07,460
always a good thing

00:09:05,450 --> 00:09:08,720
the perlis quote that says that the only

00:09:07,460 --> 00:09:10,100
programming language is worth learning

00:09:08,720 --> 00:09:11,959
are the ones that change the way you

00:09:10,100 --> 00:09:13,190
think about programming there's a pretty

00:09:11,959 --> 00:09:14,270
good chance that small talk is going to

00:09:13,190 --> 00:09:18,080
change the way you think about

00:09:14,270 --> 00:09:19,790
programming also you get to you then get

00:09:18,080 --> 00:09:22,100
to really take advantage of small talk

00:09:19,790 --> 00:09:24,230
best pattern practice practice patterns

00:09:22,100 --> 00:09:25,910
which is one of the best programming

00:09:24,230 --> 00:09:27,920
books written about working in dynamic

00:09:25,910 --> 00:09:30,200
languages it's technically in small talk

00:09:27,920 --> 00:09:31,810
about 85% of it applies to Ruby if you

00:09:30,200 --> 00:09:34,550
look at if you squint at it right and

00:09:31,810 --> 00:09:36,110
there's a there's a surprising dearth of

00:09:34,550 --> 00:09:37,850
programming books that are at the level

00:09:36,110 --> 00:09:39,260
of how do you format an it state an if

00:09:37,850 --> 00:09:41,690
statement when do you use lazy

00:09:39,260 --> 00:09:43,880
initialization really nuts and bolts

00:09:41,690 --> 00:09:45,320
stuff this is one of them and it's the

00:09:43,880 --> 00:09:46,580
one that's most that's going to be most

00:09:45,320 --> 00:09:48,530
applicable to you and if you know a

00:09:46,580 --> 00:09:49,730
little bit of small talk the examples

00:09:48,530 --> 00:09:52,700
are gonna be that much easier to read

00:09:49,730 --> 00:09:54,380
the book on the right is has nothing to

00:09:52,700 --> 00:09:55,970
do with anything except that it contains

00:09:54,380 --> 00:09:57,350
my first published technical writing

00:09:55,970 --> 00:09:59,930
which was an introduction to squeak

00:09:57,350 --> 00:10:02,960
which is not tremendously dissimilar to

00:09:59,930 --> 00:10:04,640
what I'm doing right now except it was

00:10:02,960 --> 00:10:06,320
thirteen years ago so you could argue

00:10:04,640 --> 00:10:12,830
that I've gone absolutely nowhere in

00:10:06,320 --> 00:10:15,800
thirteen years I can't teach you all of

00:10:12,830 --> 00:10:17,840
small talk in thirty minutes but I can

00:10:15,800 --> 00:10:23,710
teach you about 75% of it in a minute

00:10:17,840 --> 00:10:23,710
and a half so hold on because here we go

00:10:23,770 --> 00:10:27,680
deep breath

00:10:25,280 --> 00:10:30,410
local variables and small talk start

00:10:27,680 --> 00:10:32,480
with a lowercase letter by convention

00:10:30,410 --> 00:10:33,980
they're inter capped global variables

00:10:32,480 --> 00:10:35,870
which include things like class names

00:10:33,980 --> 00:10:39,080
and global constants start with a

00:10:35,870 --> 00:10:41,840
capital letter small talk has several

00:10:39,080 --> 00:10:43,640
reserved words the 500 may be about X

00:10:41,840 --> 00:10:45,890
severals it has about eight the five

00:10:43,640 --> 00:10:47,780
most important of which are self super

00:10:45,890 --> 00:10:49,610
nil true or false to a close

00:10:47,780 --> 00:10:51,890
approximation they mean exactly what you

00:10:49,610 --> 00:10:53,410
think they mean right now based on your

00:10:51,890 --> 00:10:55,510
Ruby experience except that they are

00:10:53,410 --> 00:10:57,890
implemented a little bit differently

00:10:55,510 --> 00:10:59,810
small talk has character literals which

00:10:57,890 --> 00:11:01,400
are dollar signs strings and small

00:10:59,810 --> 00:11:03,440
talkers delimited by single quotes

00:11:01,400 --> 00:11:05,450
comments and small talk are delimited by

00:11:03,440 --> 00:11:06,680
double quotes this is confusing to

00:11:05,450 --> 00:11:08,210
people when they come to small talk for

00:11:06,680 --> 00:11:10,370
the first time that's why I mention it

00:11:08,210 --> 00:11:12,320
small talk has symbols which are just

00:11:10,370 --> 00:11:15,050
started by hash tags and it has two

00:11:12,320 --> 00:11:16,820
array literal syntaxes the first one

00:11:15,050 --> 00:11:19,130
which we've already seen with the hash

00:11:16,820 --> 00:11:21,620
tag with the hash sign is a literal

00:11:19,130 --> 00:11:23,840
syntax that's evaluated at compile time

00:11:21,620 --> 00:11:25,550
the second one with the braces as a

00:11:23,840 --> 00:11:28,190
dynamic syntax that's evaluated at

00:11:25,550 --> 00:11:30,680
runtime it uses : equal

00:11:28,190 --> 00:11:33,740
for assignment and it has a block syntax

00:11:30,680 --> 00:11:35,000
that looks very much like rubies except

00:11:33,740 --> 00:11:36,560
that if there's more than one variable

00:11:35,000 --> 00:11:40,130
there space delimited not common

00:11:36,560 --> 00:11:42,350
delimited and then caret result is

00:11:40,130 --> 00:11:44,750
indicates the return value the caret

00:11:42,350 --> 00:11:47,570
indicates the return value of a method

00:11:44,750 --> 00:11:49,280
very very bold small talks actually map

00:11:47,570 --> 00:11:50,600
that to an up arrow which is what it is

00:11:49,280 --> 00:11:53,390
if you go all the way back to the

00:11:50,600 --> 00:11:55,880
original small talk to direct star very

00:11:53,390 --> 00:11:57,560
bold small talks also a switch colon

00:11:55,880 --> 00:11:59,390
equal to be a left arrow which is also

00:11:57,560 --> 00:12:00,680
what it was on the direct star you don't

00:11:59,390 --> 00:12:07,910
care about any of that I'm just showing

00:12:00,680 --> 00:12:10,070
off small talk has let me get Pharaoh

00:12:07,910 --> 00:12:11,710
back up small talk has three kinds of

00:12:10,070 --> 00:12:17,150
messages

00:12:11,710 --> 00:12:20,150
it has unary messages which is a message

00:12:17,150 --> 00:12:21,980
receiver and then the message so for

00:12:20,150 --> 00:12:28,280
squirt which returns let's not always

00:12:21,980 --> 00:12:29,870
see the same hands it returns too small

00:12:28,280 --> 00:12:31,760
so it does not ever have implicit

00:12:29,870 --> 00:12:34,640
receivers every small talk message has

00:12:31,760 --> 00:12:38,660
an explicit receiver small talk has

00:12:34,640 --> 00:12:41,270
binary messages where a very limited set

00:12:38,660 --> 00:12:43,370
of symbols can be placed in between two

00:12:41,270 --> 00:12:45,620
objects and the second object is

00:12:43,370 --> 00:12:49,010
considered an argument very similar to

00:12:45,620 --> 00:12:51,050
Ruby this is the plus method was this is

00:12:49,010 --> 00:12:53,710
the integer object for being called with

00:12:51,050 --> 00:12:56,120
the plus method with for as an argument

00:12:53,710 --> 00:12:59,060
and then small talk also has keyword

00:12:56,120 --> 00:13:04,610
arguments which we've already seen in

00:12:59,060 --> 00:13:06,740
this in this in this example you can

00:13:04,610 --> 00:13:09,140
also you have multiple keywords if

00:13:06,740 --> 00:13:11,450
you're familiar with this is the setter

00:13:09,140 --> 00:13:13,690
here I say at one put three if you're

00:13:11,450 --> 00:13:16,910
familiar with Objective C Objective C

00:13:13,690 --> 00:13:19,910
appropriated this syntax where multiple

00:13:16,910 --> 00:13:21,830
multiple arguments have different

00:13:19,910 --> 00:13:23,330
keywords and the method name in this

00:13:21,830 --> 00:13:24,650
case is referred to as the list of all

00:13:23,330 --> 00:13:28,940
the keywords so this would be called at

00:13:24,650 --> 00:13:31,420
put one other thing about small talk is

00:13:28,940 --> 00:13:34,880
that has a very very strict

00:13:31,420 --> 00:13:38,630
left-to-right flow of control and has no

00:13:34,880 --> 00:13:39,890
concept of operator precedence so what

00:13:38,630 --> 00:13:41,970
am I going to get if I evaluate this

00:13:39,890 --> 00:13:45,959
people who have not used small talk

00:13:41,970 --> 00:13:46,920
I am going to get 25 people who were

00:13:45,959 --> 00:13:49,050
paying attention when I said

00:13:46,920 --> 00:13:51,029
left-to-right what happens here is that

00:13:49,050 --> 00:13:53,579
the two plus three is evaluated first

00:13:51,029 --> 00:13:55,740
gets five and then five is passed the

00:13:53,579 --> 00:14:02,779
the multiplication operator and return

00:13:55,740 --> 00:14:02,779
it for five and returns 25 similarly

00:14:02,990 --> 00:14:11,279
what this by itself right now returns 13

00:14:08,750 --> 00:14:13,110
but you can use parentheses and small

00:14:11,279 --> 00:14:14,819
talk to effect order of operation just

00:14:13,110 --> 00:14:17,370
as you would in any other language if I

00:14:14,819 --> 00:14:19,199
put parentheses around here then those

00:14:17,370 --> 00:14:21,750
messages get evaluated first and it now

00:14:19,199 --> 00:14:24,180
returns five there's a very strict order

00:14:21,750 --> 00:14:26,220
here left to right unary messages get

00:14:24,180 --> 00:14:28,110
evaluated first binary messages get

00:14:26,220 --> 00:14:29,730
evaluated second keyword argument

00:14:28,110 --> 00:14:34,980
keyword messages get evaluated third

00:14:29,730 --> 00:14:39,269
again left to right okay now you are

00:14:34,980 --> 00:14:45,810
wondering I have not mentioned I have

00:14:39,269 --> 00:14:47,790
not mentioned I haven't mentioned how to

00:14:45,810 --> 00:14:50,069
create classes I haven't mentioned loops

00:14:47,790 --> 00:14:51,990
I haven't mentioned conditionals among

00:14:50,069 --> 00:14:53,819
other things all of that's none of that

00:14:51,990 --> 00:14:56,009
stuff is in the core language and small

00:14:53,819 --> 00:14:58,019
talk all of that stuff is in the library

00:14:56,009 --> 00:15:04,410
let me show you a quick example of

00:14:58,019 --> 00:15:06,329
conditionals this is so this is using

00:15:04,410 --> 00:15:07,740
small talks block syntax blocks and

00:15:06,329 --> 00:15:09,149
small talk are first-class objects so

00:15:07,740 --> 00:15:11,100
you can pass as as was mentioned this

00:15:09,149 --> 00:15:14,730
morning you can pass multiple of them to

00:15:11,100 --> 00:15:16,050
a particular method and so what this is

00:15:14,730 --> 00:15:18,420
doing is the first thing that gets

00:15:16,050 --> 00:15:21,209
evaluated here is the binary message 2

00:15:18,420 --> 00:15:24,000
is greater than 3 which returns false

00:15:21,209 --> 00:15:27,569
false is then passed the keyword message

00:15:24,000 --> 00:15:30,410
if true if false it evaluates the false

00:15:27,569 --> 00:15:32,579
branch of that and it returns that value

00:15:30,410 --> 00:15:37,709
the implementation of that is really

00:15:32,579 --> 00:15:40,319
kind of interesting but call up a small

00:15:37,709 --> 00:15:41,670
talk system browser so this is the way

00:15:40,319 --> 00:15:44,610
you interact with your code and small

00:15:41,670 --> 00:15:47,339
talk it's called a system browser and it

00:15:44,610 --> 00:15:49,139
contains the everything all the code

00:15:47,339 --> 00:15:51,929
that runs small talk all the small talk

00:15:49,139 --> 00:15:53,550
code is accessible to you here and I

00:15:51,929 --> 00:15:55,439
mean everything the code that runs this

00:15:53,550 --> 00:15:55,830
browser the code that runs the operating

00:15:55,439 --> 00:15:58,940
system

00:15:55,830 --> 00:16:04,730
and the code that you write is all here

00:15:58,940 --> 00:16:07,050
the left side of this is there there are

00:16:04,730 --> 00:16:09,060
packages there particulars is pretty

00:16:07,050 --> 00:16:11,160
much just for the humans there groups of

00:16:09,060 --> 00:16:13,950
classes together a look at kernel

00:16:11,160 --> 00:16:16,170
objects which has the base object in the

00:16:13,950 --> 00:16:18,630
second pane up there we get objects

00:16:16,170 --> 00:16:20,459
sorry classes and you see that there's a

00:16:18,630 --> 00:16:23,490
boolean class and a false class and a

00:16:20,459 --> 00:16:25,769
true class the next pane over I'll call

00:16:23,490 --> 00:16:28,980
protocols there are groups of operations

00:16:25,769 --> 00:16:30,750
and the final pane or actual methods so

00:16:28,980 --> 00:16:32,970
I'm looking at the true class and I'm

00:16:30,750 --> 00:16:35,430
looking at the if true if false method

00:16:32,970 --> 00:16:37,500
and here on the bottom we see actually

00:16:35,430 --> 00:16:39,390
where the actual code of that method is

00:16:37,500 --> 00:16:41,730
so this is the implementation of binary

00:16:39,390 --> 00:16:44,459
logic and small talk I have a true class

00:16:41,730 --> 00:16:46,140
and it says that the method is if true

00:16:44,459 --> 00:16:48,660
there's a true block if false there's a

00:16:46,140 --> 00:16:52,290
fall block false block this class is

00:16:48,660 --> 00:16:54,329
true so it evaluates the true block if I

00:16:52,290 --> 00:16:57,029
look at false it will evaluate the false

00:16:54,329 --> 00:16:59,070
block and that's how we're and that's

00:16:57,029 --> 00:17:00,810
how small talk handles conditional logic

00:16:59,070 --> 00:17:02,910
loop logic is actually handled very

00:17:00,810 --> 00:17:05,520
similar to small talk very similar to

00:17:02,910 --> 00:17:08,880
Ruby there are a lot of collection

00:17:05,520 --> 00:17:11,069
classes that return objects return sorry

00:17:08,880 --> 00:17:13,589
collection classes to take methods that

00:17:11,069 --> 00:17:16,530
accept blocks and evaluate them 101 by

00:17:13,589 --> 00:17:23,130
one over the collection in various forms

00:17:16,530 --> 00:17:26,040
okay take a breath that was fast I want

00:17:23,130 --> 00:17:29,760
to walk through a very brief example of

00:17:26,040 --> 00:17:31,919
doing a test driven development cycle in

00:17:29,760 --> 00:17:34,650
small talk and the example that I'm

00:17:31,919 --> 00:17:37,620
going to do here is the very very

00:17:34,650 --> 00:17:38,970
beginnings of fraud detection system and

00:17:37,620 --> 00:17:41,280
in this case what we're trying to do is

00:17:38,970 --> 00:17:43,230
determine whether to user emails are

00:17:41,280 --> 00:17:45,540
actually the same email so we're trying

00:17:43,230 --> 00:17:48,090
to create a canonical email lower case

00:17:45,540 --> 00:17:53,160
stripping out dots removing the stuff

00:17:48,090 --> 00:17:56,940
after the pluses okay so what I need to

00:17:53,160 --> 00:18:00,210
do first is create a test create a test

00:17:56,940 --> 00:18:01,860
class and the way I create classes in

00:18:00,210 --> 00:18:04,260
small talk is you see now that I've

00:18:01,860 --> 00:18:07,470
selected a package in that leftmost pane

00:18:04,260 --> 00:18:09,539
I have this kind of weird piece of code

00:18:07,470 --> 00:18:12,989
in my code pain and

00:18:09,539 --> 00:18:14,789
this is actually executable small talk

00:18:12,989 --> 00:18:17,549
code it is a message being sent to the

00:18:14,789 --> 00:18:18,840
class object called subclass and giving

00:18:17,549 --> 00:18:20,279
it the name of a new class and I'm

00:18:18,840 --> 00:18:21,479
giving it instance variables and class

00:18:20,279 --> 00:18:23,429
variables and couple other things we

00:18:21,479 --> 00:18:25,639
don't really care about and this has the

00:18:23,429 --> 00:18:29,039
has the effect of creating a new class

00:18:25,639 --> 00:18:34,830
so I want to create a test case a test

00:18:29,039 --> 00:18:38,220
user sorry goes to test case the

00:18:34,830 --> 00:18:42,450
subclass name is going to be test fraud

00:18:38,220 --> 00:18:49,499
user and we'll put it in a MWR

00:18:42,450 --> 00:18:52,470
a MMWR be catalog m WRC category and now

00:18:49,499 --> 00:18:54,840
in this pane i can accept it and they

00:18:52,470 --> 00:18:59,129
now have an m WRC category that has my

00:18:54,840 --> 00:19:04,080
new class and i can now select a

00:18:59,129 --> 00:19:06,749
protocol i have a skeleton of a method

00:19:04,080 --> 00:19:08,940
signature the name goes on top comment

00:19:06,749 --> 00:19:14,519
temporary variable statements and i can

00:19:08,940 --> 00:19:17,039
put in my tests so here's my first test

00:19:14,519 --> 00:19:18,749
testing the basic email which is just

00:19:17,039 --> 00:19:20,580
that an all lowercase email that isn't

00:19:18,749 --> 00:19:23,580
no other way special the canonical

00:19:20,580 --> 00:19:25,950
version of that is itself i'm creating a

00:19:23,580 --> 00:19:28,080
local variable called user on the first

00:19:25,950 --> 00:19:29,700
line and the second line i'm creating a

00:19:28,080 --> 00:19:31,830
new instance of a user class that

00:19:29,700 --> 00:19:36,570
doesn't exist yet on the third line i'm

00:19:31,830 --> 00:19:38,789
setting the email of that user to bugs

00:19:36,570 --> 00:19:40,710
at bunny comm and on the final line i'm

00:19:38,789 --> 00:19:43,619
asserting that the canonical email of

00:19:40,710 --> 00:19:45,090
that user is bugs at bunny comm in order

00:19:43,619 --> 00:19:46,830
to get this into the system i have to

00:19:45,090 --> 00:19:48,830
have the system accept it and the

00:19:46,830 --> 00:19:51,509
interesting thing happens at this point

00:19:48,830 --> 00:19:53,159
first this is a fresh system so it's

00:19:51,509 --> 00:19:54,690
asking me for my name but the first

00:19:53,159 --> 00:19:56,879
thing that happens is it says you're

00:19:54,690 --> 00:19:59,309
using user as a class here there's no

00:19:56,879 --> 00:20:03,359
user class in the system anywhere do you

00:19:59,309 --> 00:20:06,059
want to create one sure hey look it's

00:20:03,359 --> 00:20:07,919
that same chunk of code i want to create

00:20:06,059 --> 00:20:09,389
a new class i want to call it user and

00:20:07,919 --> 00:20:11,429
i'm gonna put it in the same category

00:20:09,389 --> 00:20:15,210
and boom there it is

00:20:11,429 --> 00:20:18,269
i've created a class now it's telling me

00:20:15,210 --> 00:20:21,389
that nowhere in the system anywhere is

00:20:18,269 --> 00:20:23,520
there a message called canonical email

00:20:21,389 --> 00:20:25,380
is that possibly a type

00:20:23,520 --> 00:20:28,410
and it's offering a couple of other

00:20:25,380 --> 00:20:30,030
things that it might actually be it's

00:20:28,410 --> 00:20:32,760
not a typo I just haven't written it yet

00:20:30,030 --> 00:20:35,970
so I'll let it go and now it accepts it

00:20:32,760 --> 00:20:40,670
and if I go here I see you see that that

00:20:35,970 --> 00:20:43,200
method is now here no I can now run it

00:20:40,670 --> 00:20:44,400
and it fails

00:20:43,200 --> 00:20:46,080
note that the run was almost

00:20:44,400 --> 00:20:48,540
instantaneous because I don't have any

00:20:46,080 --> 00:20:50,850
startup costs the system is already

00:20:48,540 --> 00:20:53,220
running all I need to do is execute the

00:20:50,850 --> 00:20:54,929
test and I get a little message here

00:20:53,220 --> 00:20:56,340
that says a mess a method was not

00:20:54,929 --> 00:20:58,590
understood it's a little cramped because

00:20:56,340 --> 00:21:00,809
I've upped the font size but basically

00:20:58,590 --> 00:21:03,780
what it's saying is user does not

00:21:00,809 --> 00:21:05,460
understand email so and on the third

00:21:03,780 --> 00:21:07,470
line there I'm sending an email :

00:21:05,460 --> 00:21:10,170
that message hasn't been defined so the

00:21:07,470 --> 00:21:13,140
test is failing so I go to the user

00:21:10,170 --> 00:21:15,929
object and I create an instance variable

00:21:13,140 --> 00:21:18,570
called email just updating that same

00:21:15,929 --> 00:21:20,130
little chunk of code I accept it and now

00:21:18,570 --> 00:21:22,380
the user has an instance variable called

00:21:20,130 --> 00:21:24,330
email instance variables and small talk

00:21:22,380 --> 00:21:27,960
are private I need a public getter and

00:21:24,330 --> 00:21:29,520
setter luckily I can actually create

00:21:27,960 --> 00:21:31,710
those in the system so I have this

00:21:29,520 --> 00:21:34,860
analyzed create instance variable

00:21:31,710 --> 00:21:38,040
accessor accessors and now I have a set

00:21:34,860 --> 00:21:40,080
a getter which just returns the in the

00:21:38,040 --> 00:21:44,309
instance variable email and I have a

00:21:40,080 --> 00:21:47,309
setter that takes in a value now I can

00:21:44,309 --> 00:21:49,740
come back to the test I can run it again

00:21:47,309 --> 00:21:51,600
and I guess still does not get a get a

00:21:49,740 --> 00:21:53,850
does not understand because this point

00:21:51,600 --> 00:21:55,470
it doesn't understand the canonical

00:21:53,850 --> 00:21:58,170
email message which has not been run yet

00:21:55,470 --> 00:22:02,550
if I click in it I come into this debug

00:21:58,170 --> 00:22:05,130
window which I can use to like this is

00:22:02,550 --> 00:22:06,450
also a live window and it gives me a lot

00:22:05,130 --> 00:22:08,580
not only can I go through the stack

00:22:06,450 --> 00:22:10,200
trace but I can see all the objects that

00:22:08,580 --> 00:22:12,300
are in scope at any particular point in

00:22:10,200 --> 00:22:14,550
the stack trace I can inspect them I can

00:22:12,300 --> 00:22:16,530
modify them I can actually update code

00:22:14,550 --> 00:22:19,650
in here and reaccept the code and keep

00:22:16,530 --> 00:22:21,059
running should I want to which I'm not

00:22:19,650 --> 00:22:22,770
going to show because it doesn't fit the

00:22:21,059 --> 00:22:25,110
pattern at the moment but I could if I

00:22:22,770 --> 00:22:28,679
wanted to what I actually need right now

00:22:25,110 --> 00:22:30,300
is a canonical email message I don't

00:22:28,679 --> 00:22:33,510
need it to do anything I don't need to

00:22:30,300 --> 00:22:37,410
do very much all I needed to do right

00:22:33,510 --> 00:22:40,440
now is return the email and

00:22:37,410 --> 00:22:42,270
except this I come back to the test and

00:22:40,440 --> 00:22:45,990
now if I haven't done anything stupid

00:22:42,270 --> 00:22:48,120
the test will pass cool note that it's

00:22:45,990 --> 00:22:49,440
still holding the status of the test in

00:22:48,120 --> 00:22:51,690
my browser so I can see at a glance

00:22:49,440 --> 00:22:53,220
what's going on there's actually also a

00:22:51,690 --> 00:22:54,960
global test runner that I can run the

00:22:53,220 --> 00:22:56,520
entire system or individual classes of

00:22:54,960 --> 00:22:58,770
tests outside the browser if I wanted

00:22:56,520 --> 00:23:00,630
now I want to write my second test and

00:22:58,770 --> 00:23:04,140
there's a cool thing that I can do here

00:23:00,630 --> 00:23:05,580
is I can just change the name I'm

00:23:04,140 --> 00:23:08,280
writing a test that's very very similar

00:23:05,580 --> 00:23:10,590
I can just change the name here in my

00:23:08,280 --> 00:23:13,290
code window and I want to check lower

00:23:10,590 --> 00:23:15,780
case versus upper case so make a couple

00:23:13,290 --> 00:23:18,300
things here upper case and I want the

00:23:15,780 --> 00:23:21,150
canonical email to still be bugs at

00:23:18,300 --> 00:23:23,010
bunny comm I accept it but I accept it

00:23:21,150 --> 00:23:28,170
under a new name so now I have a new

00:23:23,010 --> 00:23:31,770
method and I can run that method which

00:23:28,170 --> 00:23:34,650
is going to sorry I can run that method

00:23:31,770 --> 00:23:37,590
and it's going to yellow fail because of

00:23:34,650 --> 00:23:39,000
an assertion failure I can use the

00:23:37,590 --> 00:23:41,550
inspector window to check that down but

00:23:39,000 --> 00:23:42,960
I know what it is the email has capital

00:23:41,550 --> 00:23:45,780
letters and the canonical email and the

00:23:42,960 --> 00:23:47,490
assertion is all lowercase so I can come

00:23:45,780 --> 00:23:51,450
in and fix that by going to my user

00:23:47,490 --> 00:23:54,120
going to canonical email and just adding

00:23:51,450 --> 00:23:55,980
as lowercase which is part of the small

00:23:54,120 --> 00:23:59,250
of the faroe small talk string library I

00:23:55,980 --> 00:24:00,960
accept it come back to the tests I run

00:23:59,250 --> 00:24:03,270
both of these tests again and now

00:24:00,960 --> 00:24:04,410
they're green okay I only have a couple

00:24:03,270 --> 00:24:06,150
minutes left so I'm going to stop that

00:24:04,410 --> 00:24:08,850
example here and come back and just

00:24:06,150 --> 00:24:12,120
clear out the rest of my slides so what

00:24:08,850 --> 00:24:16,590
I hope you take from that is a little

00:24:12,120 --> 00:24:18,630
bit about a little bit about the flavor

00:24:16,590 --> 00:24:20,340
of small talk and the very very quick

00:24:18,630 --> 00:24:22,590
back and forth that you are able to get

00:24:20,340 --> 00:24:23,940
all right hopefully gave me the flavor

00:24:22,590 --> 00:24:24,900
of the very quick back and forth that

00:24:23,940 --> 00:24:26,340
you're able to get when you're

00:24:24,900 --> 00:24:28,560
interacting with the environment that

00:24:26,340 --> 00:24:30,060
doesn't need to start up I don't really

00:24:28,560 --> 00:24:32,490
have time to do a complicated enough

00:24:30,060 --> 00:24:34,310
example to give you a feel for what it's

00:24:32,490 --> 00:24:36,840
like to actually be able to dig deep

00:24:34,310 --> 00:24:38,610
into one of those inspector windows and

00:24:36,840 --> 00:24:40,350
actually play with objects and change

00:24:38,610 --> 00:24:42,600
them on the fly while you're while

00:24:40,350 --> 00:24:45,990
you're running code but that's also

00:24:42,600 --> 00:24:47,730
pretty cool but then one of the

00:24:45,990 --> 00:24:50,580
questions is if small talk is so great

00:24:47,730 --> 00:24:53,549
why aren't we all in this room using it

00:24:50,580 --> 00:24:55,470
I think that what happened is that the

00:24:53,549 --> 00:24:58,440
things that small talk was good at is

00:24:55,470 --> 00:25:00,059
good at became less relatively important

00:24:58,440 --> 00:25:02,279
and the things that small talk is not

00:25:00,059 --> 00:25:04,860
good at became relatively more important

00:25:02,279 --> 00:25:07,679
so small talk is a dynamic language it's

00:25:04,860 --> 00:25:09,149
a late binding language in 1980 when a

00:25:07,679 --> 00:25:12,269
small talk ad came out it was pretty

00:25:09,149 --> 00:25:14,549
much the only one now you know we have

00:25:12,269 --> 00:25:16,679
all kinds of Ruby and things like that

00:25:14,549 --> 00:25:18,419
that are all mostly object oriented

00:25:16,679 --> 00:25:21,570
mostly dynamically binding that provide

00:25:18,419 --> 00:25:23,370
much of the value of small talk and the

00:25:21,570 --> 00:25:26,130
thing that small talk is bad at which is

00:25:23,370 --> 00:25:27,990
playing with others you know small talk

00:25:26,130 --> 00:25:29,700
has this whole environment inside itself

00:25:27,990 --> 00:25:31,230
and the flipside of that is that small

00:25:29,700 --> 00:25:34,740
talk really wants everything that it

00:25:31,230 --> 00:25:36,779
deals with to be inside itself the UNIX

00:25:34,740 --> 00:25:38,850
velocity philosophy of small pieces

00:25:36,779 --> 00:25:40,470
loosely joined does not really play

00:25:38,850 --> 00:25:43,080
nicely with the small talk image that

00:25:40,470 --> 00:25:45,929
expects to have its own browser its own

00:25:43,080 --> 00:25:48,269
editor its own code you know its own

00:25:45,929 --> 00:25:49,769
code repository pharoah small talk has

00:25:48,269 --> 00:25:51,600
its own package manager has its own

00:25:49,769 --> 00:25:54,090
version control like all of these things

00:25:51,600 --> 00:25:57,269
are inside small talk and as the world

00:25:54,090 --> 00:25:59,909
moved on the languages that were able to

00:25:57,269 --> 00:26:04,159
take advantage of dealing with external

00:25:59,909 --> 00:26:04,159
resources better became more successful

00:26:05,179 --> 00:26:12,980
so I I guess on time how am i doing

00:26:09,029 --> 00:26:15,389
nevermind it's that's five here but okay

00:26:12,980 --> 00:26:16,649
so that's my introduction to small talk

00:26:15,389 --> 00:26:18,840
I have a couple seconds to take

00:26:16,649 --> 00:26:20,309
questions um I will say though that you

00:26:18,840 --> 00:26:22,350
should all be very grateful that I came

00:26:20,309 --> 00:26:24,029
up here to talk about small talk and not

00:26:22,350 --> 00:26:25,769
about the really obscure language from

00:26:24,029 --> 00:26:28,679
the mid-90s that I really wanted to talk

00:26:25,769 --> 00:26:32,220
about which is Pro graph which looks

00:26:28,679 --> 00:26:33,899
like this if you've never seen it yeah I

00:26:32,220 --> 00:26:36,269
know we have at least one program

00:26:33,899 --> 00:26:37,980
programmer here and if you want later

00:26:36,269 --> 00:26:41,450
I'm happy to explain what the hell this

00:26:37,980 --> 00:26:44,190
is because it was tremendously cool and

00:26:41,450 --> 00:26:47,399
that's it I will take some questions I

00:26:44,190 --> 00:26:50,340
am nor apon I work at table X I you can

00:26:47,399 --> 00:26:53,549
find me on Twitter at Knoll wrap I also

00:26:50,340 --> 00:26:56,970
occasionally write ebooks you can find

00:26:53,549 --> 00:26:58,500
them at noir rappin comm MST wjs for

00:26:56,970 --> 00:27:01,020
master space and time with JavaScript

00:26:58,500 --> 00:27:02,880
which is about JavaScript trust driven

00:27:01,020 --> 00:27:04,260
development is about running projects in

00:27:02,880 --> 00:27:05,700
the profession of

00:27:04,260 --> 00:27:07,410
a software developer and dealing with

00:27:05,700 --> 00:27:09,150
other people dealing with other

00:27:07,410 --> 00:27:12,120
developers and clients that's available

00:27:09,150 --> 00:27:15,600
t RDD both of those with the code Mt

00:27:12,120 --> 00:27:18,660
West 25 underscore 25 are 25% off

00:27:15,600 --> 00:27:20,730
through Sunday feel please feel free to

00:27:18,660 --> 00:27:23,670
browse and take a look I would greatly

00:27:20,730 --> 00:27:24,890
appreciate it and that's my that's what

00:27:23,670 --> 00:27:27,630
I've got

00:27:24,890 --> 00:27:28,920
ok thanks for your time I think Mountain

00:27:27,630 --> 00:27:32,300
West small talk continues because we're

00:27:28,920 --> 00:27:32,300

YouTube URL: https://www.youtube.com/watch?v=eGaKZBr0ga4


