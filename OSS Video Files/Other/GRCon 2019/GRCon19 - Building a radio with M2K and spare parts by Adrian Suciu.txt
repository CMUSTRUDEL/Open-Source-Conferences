Title: GRCon19 - Building a radio with M2K and spare parts by Adrian Suciu
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	Building a radio with M2K and spare parts by Adrian Suciu

The ADALM2000 (M2K) Active Learning Module is an affordable USB-powered measurement unit. With 12-bit ADCs and DACs running at 100 MSPS, the ADALM2000 enables electrical engineering students and hobbyists to explore signals and systems into the tens of MHz without the cost and bulk associated with traditional lab gear. The M2k, when coupled with Analog Devices’ Scopy™ graphical application software running on a computer, provides the user high performance instrumentation such as oscilloscope, arbitrary function generator, spectrum analyzer, network analyzer and logic instruments.

However, the ADALM2000 can be coupled with another, more versatile tool, the libm2k. Libm2k is a C++ library which allows the user to interface with the ADALM2000 and create custom applications. Libm2k also provides Python3 and MATLAB bindings making capturing analog data, generating arbitrary waveforms or interacting with the digital signals easy. It’s high-speed dual ADC and DAC interfaces and the ability to power and control further digital and analog components makes it an ideal platform to directly interface with additional RF frontends, forming an additional IF stage or to be used as a direct conversion receiver, controlling filter banks, attenuators, gain blocks either by GPIO, I2C or SPI. This presentation briefly introduces its capabilities and provides a number of examples how it can be utilized for various SDR applications.
Captions: 
	00:00:14,320 --> 00:00:20,140
okay so my name is Adrian I work for Adi

00:00:18,580 --> 00:00:23,560
as a software developer for the past

00:00:20,140 --> 00:00:25,840
almost 40 years and I'm going to show

00:00:23,560 --> 00:00:30,460
you how you can build a radio with m2k

00:00:25,840 --> 00:00:35,079
and spare parts so before we begin I'd

00:00:30,460 --> 00:00:36,970
like to talk a little bit about a lot a

00:00:35,079 --> 00:00:40,360
lot of devices active learning program

00:00:36,970 --> 00:00:41,700
so it is dedicated to inspiring students

00:00:40,360 --> 00:00:44,890
to better understand the world of

00:00:41,700 --> 00:00:47,860
electronics so and analog signals and it

00:00:44,890 --> 00:00:51,700
tries to bring the technology into into

00:00:47,860 --> 00:00:53,470
the into the classroom so the active

00:00:51,700 --> 00:00:55,270
learning program consists of four boards

00:00:53,470 --> 00:00:56,970
so we have these boards that are called

00:00:55,270 --> 00:01:01,390
active learning modules

00:00:56,970 --> 00:01:04,180
m1k Eden 1,000 Adam 2000 which we call

00:01:01,390 --> 00:01:04,629
the m2k and the Pluto which is that an

00:01:04,180 --> 00:01:09,340
SDR

00:01:04,629 --> 00:01:14,140
so we also provide free courseware lab

00:01:09,340 --> 00:01:15,939
materials and you know free books for

00:01:14,140 --> 00:01:23,530
for teachers to use in their in their

00:01:15,939 --> 00:01:25,690
courses so the hardware is m2k which is

00:01:23,530 --> 00:01:27,640
an affordable USB powered the

00:01:25,690 --> 00:01:30,520
multifunction instrument so this is not

00:01:27,640 --> 00:01:33,130
a Pluto but it's based on the same

00:01:30,520 --> 00:01:36,700
infrastructure as the Pluto so it is it

00:01:33,130 --> 00:01:38,830
has a zinc z7t 10 SOC that is running

00:01:36,700 --> 00:01:42,460
Linux but it has a different analog

00:01:38,830 --> 00:01:47,560
content and has a different analog

00:01:42,460 --> 00:01:49,330
content and it has 80 99 63 chip but the

00:01:47,560 --> 00:01:52,240
connectivity options are the same as the

00:01:49,330 --> 00:01:55,720
as the Pluto so you can connect to it

00:01:52,240 --> 00:01:58,360
using USB you can have Wi-Fi dongle or

00:01:55,720 --> 00:02:02,140
LAN dongle or you can put in even a

00:01:58,360 --> 00:02:04,150
memory stick if you want to use the OTG

00:02:02,140 --> 00:02:05,530
capabilities of the pluto you would also

00:02:04,150 --> 00:02:07,990
need to use the secondary power

00:02:05,530 --> 00:02:11,049
connector so it's all open source open

00:02:07,990 --> 00:02:13,480
source hardware open source software you

00:02:11,049 --> 00:02:18,489
can check out the the source code the

00:02:13,480 --> 00:02:20,230
schematics at the links there so like I

00:02:18,489 --> 00:02:22,150
said it's based on the same

00:02:20,230 --> 00:02:25,060
infrastructure as the Pluto so the

00:02:22,150 --> 00:02:27,130
bottom part is pretty much the same you

00:02:25,060 --> 00:02:29,130
have a USB eat

00:02:27,130 --> 00:02:34,390
point though you have li bio there's a

00:02:29,130 --> 00:02:37,660
little on it but the analog content is a

00:02:34,390 --> 00:02:40,630
little difficult so what like the specs

00:02:37,660 --> 00:02:42,520
of the m2k so it has a two to channel

00:02:40,630 --> 00:02:44,350
hundred mega samples per second the ADC

00:02:42,520 --> 00:02:44,800
with an input range of plus minus twenty

00:02:44,350 --> 00:02:47,080
volts

00:02:44,800 --> 00:02:49,330
it has a 16 digital input output

00:02:47,080 --> 00:02:51,310
channels at Holland mega samples per

00:02:49,330 --> 00:02:54,100
second it has a triggering mechanism

00:02:51,310 --> 00:02:57,730
which supports both internal and

00:02:54,100 --> 00:02:59,890
external triggering has to channel to

00:02:57,730 --> 00:03:02,140
channel deck which is synchronized at

00:02:59,890 --> 00:03:06,030
150 mega samples per second and it also

00:03:02,140 --> 00:03:08,410
has a plus minus 5 volt power supply so

00:03:06,030 --> 00:03:10,930
how you can interact with it well

00:03:08,410 --> 00:03:13,240
there's a scope e which is our GUI

00:03:10,930 --> 00:03:16,990
software there's the Reeb m2k which is a

00:03:13,240 --> 00:03:20,200
c++ library you can use gri o out of 3

00:03:16,990 --> 00:03:24,670
module and there's also the m2k CLI

00:03:20,200 --> 00:03:26,260
which are set of command-line tools so

00:03:24,670 --> 00:03:30,310
in order to better understand what's

00:03:26,260 --> 00:03:32,710
going on we have to look at an analog

00:03:30,310 --> 00:03:35,710
signal chain so like I said the m2k is

00:03:32,710 --> 00:03:39,010
an embedded embedded Linux host it

00:03:35,710 --> 00:03:41,110
gathers data from the hardware put in to

00:03:39,010 --> 00:03:43,290
get the kernel and eventually uses the

00:03:41,110 --> 00:03:45,580
i/o subsystem to manage all of the

00:03:43,290 --> 00:03:49,300
inputs and outputs there's an

00:03:45,580 --> 00:03:51,400
application which is called IOD that's

00:03:49,300 --> 00:03:57,190
running that's a demon that's running on

00:03:51,400 --> 00:04:00,550
the on the m2k which helps send the data

00:03:57,190 --> 00:04:03,460
over the USB or Wi-Fi link back to the

00:04:00,550 --> 00:04:06,130
host computer so on the other side of

00:04:03,460 --> 00:04:08,530
things once the data reaches the host

00:04:06,130 --> 00:04:10,540
computer you can usually buy o2 to get

00:04:08,530 --> 00:04:12,670
the data and from this point you can do

00:04:10,540 --> 00:04:15,220
pretty much anything that you want with

00:04:12,670 --> 00:04:18,190
the data so in our case we use the

00:04:15,220 --> 00:04:20,950
libyans okay then grr you and eventually

00:04:18,190 --> 00:04:27,040
grow radio to do some of the signal

00:04:20,950 --> 00:04:29,530
processing so the software it's called

00:04:27,040 --> 00:04:32,470
the scoping it is a touch friendly

00:04:29,530 --> 00:04:34,330
modern-looking a software it leverages

00:04:32,470 --> 00:04:36,070
blue radio to implement a bunch of

00:04:34,330 --> 00:04:37,780
virtual instruments such as the

00:04:36,070 --> 00:04:40,939
oscilloscope the signal generator

00:04:37,780 --> 00:04:44,749
voltmeter power supply spectrum analyzer

00:04:40,939 --> 00:04:47,509
Network analyzer and a bunch of logical

00:04:44,749 --> 00:04:50,449
instruments as well so this software is

00:04:47,509 --> 00:04:57,649
also open source and it's still under

00:04:50,449 --> 00:05:00,080
active development also I would quickly

00:04:57,649 --> 00:05:02,869
mention the m2k CLI which is which are a

00:05:00,080 --> 00:05:05,360
set of command line tools for the m2k

00:05:02,869 --> 00:05:07,429
they can be used for calibration

00:05:05,360 --> 00:05:09,709
configuration of the device of the

00:05:07,429 --> 00:05:11,629
device so there is no need to write

00:05:09,709 --> 00:05:13,459
extra software if you want to do just

00:05:11,629 --> 00:05:20,240
something basic with the device you can

00:05:13,459 --> 00:05:22,699
power up a bash bash console and just

00:05:20,240 --> 00:05:23,869
you know create a crater script to

00:05:22,699 --> 00:05:28,939
automate your measurement and

00:05:23,869 --> 00:05:31,909
configuration the library

00:05:28,939 --> 00:05:34,909
it's called the liberal 2k it is a C++

00:05:31,909 --> 00:05:39,949
library to interface with a with the m2k

00:05:34,909 --> 00:05:42,019
so in IO there are lots of you know

00:05:39,949 --> 00:05:44,319
switches and knobs that need to be like

00:05:42,019 --> 00:05:47,959
in the perfect order for things to work

00:05:44,319 --> 00:05:50,329
but what ribbon 2k does is that it

00:05:47,959 --> 00:05:52,459
abstracts all of the device device

00:05:50,329 --> 00:05:55,849
initialization calibration and operation

00:05:52,459 --> 00:05:58,459
in easy to use methods so it is built on

00:05:55,849 --> 00:06:02,959
top of liberal and it has a minimal set

00:05:58,459 --> 00:06:05,209
of dependencies but and we also provide

00:06:02,959 --> 00:06:08,149
build instructions for Windows Linux and

00:06:05,209 --> 00:06:09,679
Mac OS there's also Windows installer

00:06:08,149 --> 00:06:13,639
because building things on windows can

00:06:09,679 --> 00:06:17,599
be hard so you just run a setup and

00:06:13,639 --> 00:06:20,629
you're good to go on Windows we also

00:06:17,599 --> 00:06:23,990
created the Python bindings c-sharp

00:06:20,629 --> 00:06:27,819
bindings and MATLAB bindings for Lib m2k

00:06:23,990 --> 00:06:32,809
and it's all open source with LGPL

00:06:27,819 --> 00:06:35,539
license so earlier today you caught

00:06:32,809 --> 00:06:38,689
Travis's maybe it'll caught Travis's

00:06:35,539 --> 00:06:42,499
lightning talk about our different

00:06:38,689 --> 00:06:45,079
transceivers so it there was a slide

00:06:42,499 --> 00:06:47,839
about different kinds of radio

00:06:45,079 --> 00:06:54,319
architecture there is the super head in

00:06:47,839 --> 00:06:56,990
the top left there's the direct RF

00:06:54,319 --> 00:07:00,499
which is the on the top right and then

00:06:56,990 --> 00:07:02,509
there's a zero I have on the bottom so

00:07:00,499 --> 00:07:04,999
what we're trying to do here is kind of

00:07:02,509 --> 00:07:06,439
create this kind of Ziva I have

00:07:04,999 --> 00:07:10,099
transceiver where we get the data from

00:07:06,439 --> 00:07:12,289
the antenna we amplify it down convert

00:07:10,099 --> 00:07:16,580
it with the mixer and then use the m2k

00:07:12,289 --> 00:07:19,580
to do the digital signal processing so

00:07:16,580 --> 00:07:24,159
how do you build a radio radio with the

00:07:19,580 --> 00:07:28,759
m2k so in the top left there's the

00:07:24,159 --> 00:07:31,879
experiment let's say it has like it gets

00:07:28,759 --> 00:07:34,219
data from the antenna it it's exactly

00:07:31,879 --> 00:07:38,199
like in the previous slide you it gets

00:07:34,219 --> 00:07:42,709
amplified Duncan waited by the mixer and

00:07:38,199 --> 00:07:43,969
then sent sent back to the m2k so all of

00:07:42,709 --> 00:07:46,969
the parts used are commercial

00:07:43,969 --> 00:07:50,869
off-the-shelf we got the parts from eBay

00:07:46,969 --> 00:07:55,839
and the Namibian Amazon and it was so

00:07:50,869 --> 00:07:55,839
super cheap to build so here on the

00:07:57,490 --> 00:08:05,479
diagram of the UK the diagram of the

00:08:02,719 --> 00:08:09,319
weight of the radio and we use the 80 80

00:08:05,479 --> 00:08:13,219
83 831 mixer to to down convert and we

00:08:09,319 --> 00:08:15,050
use the ADF 43:51 PLL to provide the

00:08:13,219 --> 00:08:18,879
hello frequency

00:08:15,050 --> 00:08:22,430
the problem is though that ADF 43:51 is

00:08:18,879 --> 00:08:26,539
digital it has a digital configuration

00:08:22,430 --> 00:08:29,119
interface so you would need some kind of

00:08:26,539 --> 00:08:30,469
other hardware to be able to interface

00:08:29,119 --> 00:08:32,389
with it so maybe you would need

00:08:30,469 --> 00:08:35,060
something like an Arduino with a knob or

00:08:32,389 --> 00:08:37,819
maybe a Raspberry Pi or I don't know

00:08:35,060 --> 00:08:39,979
maybe you could rewrite the m2k firmware

00:08:37,819 --> 00:08:43,729
to be able to handle that but that seems

00:08:39,979 --> 00:08:45,730
like a lot of extra work so we're going

00:08:43,729 --> 00:08:50,810
to show you how he is the live m2k to

00:08:45,730 --> 00:08:54,019
configure the DLL also if you really

00:08:50,810 --> 00:08:55,670
want to achieve performance there are

00:08:54,019 --> 00:08:58,399
all of those filters which are not in

00:08:55,670 --> 00:08:59,779
place you know you know prototype but if

00:08:58,399 --> 00:09:01,819
you want to achieve good performance you

00:08:59,779 --> 00:09:08,830
will have to design those filters as

00:09:01,819 --> 00:09:11,870
well so I'm just want to show you here

00:09:08,830 --> 00:09:15,080
what the Librium 2k is it is used to

00:09:11,870 --> 00:09:17,690
make interacting with the m2k easier so

00:09:15,080 --> 00:09:19,340
I'm going to show you the block the some

00:09:17,690 --> 00:09:20,960
of the features of the Leoben 2k and how

00:09:19,340 --> 00:09:25,520
you can use them in different radio

00:09:20,960 --> 00:09:28,280
systems so in order to access the

00:09:25,520 --> 00:09:30,470
m2k you would have to create a context

00:09:28,280 --> 00:09:33,830
so you would create a context with using

00:09:30,470 --> 00:09:35,540
the m2k open function and then from this

00:09:33,830 --> 00:09:38,000
context you would get handles to all of

00:09:35,540 --> 00:09:42,250
the different digital all of the

00:09:38,000 --> 00:09:42,250
different instruments that m2k provides

00:09:43,630 --> 00:09:48,920
m2k contexts like I said are basically

00:09:46,550 --> 00:09:51,710
the device handles so m2k context a

00:09:48,920 --> 00:09:54,110
handle like device calculation device

00:09:51,710 --> 00:09:57,860
initialization identification and then

00:09:54,110 --> 00:10:00,170
provides handles for the rest for the

00:09:57,860 --> 00:10:02,390
rest of the instruments multiple devices

00:10:00,170 --> 00:10:06,200
can be instant instant shaded with the

00:10:02,390 --> 00:10:08,440
libram 2k and so you can do a singleness

00:10:06,200 --> 00:10:11,600
measurements across multiple devices so

00:10:08,440 --> 00:10:15,320
on the right it's a simple Python

00:10:11,600 --> 00:10:17,840
example of how like a hello world

00:10:15,320 --> 00:10:20,690
project for the liberal 2k you just open

00:10:17,840 --> 00:10:23,660
the m2k calculate the ADC you get a

00:10:20,690 --> 00:10:28,010
handle for the analog input and then you

00:10:23,660 --> 00:10:33,560
just get the voltage it's super super

00:10:28,010 --> 00:10:36,410
easy to use so the analog in class is

00:10:33,560 --> 00:10:38,420
the interface to the two channel 12 bit

00:10:36,410 --> 00:10:40,910
hundred mega samples per second analog

00:10:38,420 --> 00:10:44,540
input this analog input works is at

00:10:40,910 --> 00:10:47,360
baseband so like I said this is not this

00:10:44,540 --> 00:10:50,180
is not an RF transceiver this is more

00:10:47,360 --> 00:10:52,490
like an instrumentation thing so this

00:10:50,180 --> 00:10:55,220
works at baseband it has an input

00:10:52,490 --> 00:10:59,090
voltage in low gain of plus minus 25

00:10:55,220 --> 00:11:01,910
volts and plus minus 2.5 volts in hi

00:10:59,090 --> 00:11:05,180
Gail and with the libyans UK you don't

00:11:01,910 --> 00:11:08,780
have to worry about converting the come

00:11:05,180 --> 00:11:11,560
with all values to volts because all of

00:11:08,780 --> 00:11:15,260
these methods are provided for you

00:11:11,560 --> 00:11:18,370
also there's triggering which I'll show

00:11:15,260 --> 00:11:18,370
in the next slide but

00:11:19,100 --> 00:11:25,680
you know you can use this analog input

00:11:22,710 --> 00:11:28,280
in your video project to yet get analog

00:11:25,680 --> 00:11:31,710
data of come from your system and

00:11:28,280 --> 00:11:33,170
basically do anything that you want with

00:11:31,710 --> 00:11:36,930
it

00:11:33,170 --> 00:11:42,390
so the hundred sorry the whole bit

00:11:36,930 --> 00:11:44,970
bigger class is an interface to the m2k

00:11:42,390 --> 00:11:46,620
smart still trigger mechanism so what it

00:11:44,970 --> 00:11:49,110
is useful is to condition single

00:11:46,620 --> 00:11:53,640
condition signal acquisition either by

00:11:49,110 --> 00:11:55,620
edge or by single amplitude there are

00:11:53,640 --> 00:11:57,390
two types of triggers there's internal

00:11:55,620 --> 00:12:01,320
triggers and external triggers so

00:11:57,390 --> 00:12:04,470
internal triggers rely on the state of

00:12:01,320 --> 00:12:08,100
the signal for both analog and digital

00:12:04,470 --> 00:12:10,410
interface while external triggers rely

00:12:08,100 --> 00:12:13,770
on external trigger pins such as the

00:12:10,410 --> 00:12:17,700
trigger input pin trickle in pain when

00:12:13,770 --> 00:12:21,060
you get a signal on that pin it triggers

00:12:17,700 --> 00:12:23,940
a measurement there's also a trigger out

00:12:21,060 --> 00:12:26,640
pin on the m2k and what this does is

00:12:23,940 --> 00:12:28,950
basically whenever the m2k detects a

00:12:26,640 --> 00:12:30,540
trigger condition it forwards a pulse on

00:12:28,950 --> 00:12:33,000
the trigger out pin so what this is

00:12:30,540 --> 00:12:35,670
useful is to daisy chain multiple em to

00:12:33,000 --> 00:12:37,980
case in order to do synchronize

00:12:35,670 --> 00:12:42,390
measurements across multiple multiple

00:12:37,980 --> 00:12:44,460
devices so for this project the analog

00:12:42,390 --> 00:12:48,300
trigger was not that useful because in

00:12:44,460 --> 00:12:50,430
order to get radio you would have to get

00:12:48,300 --> 00:12:51,960
all of the signals all of the data

00:12:50,430 --> 00:12:56,430
that's coming through you will not need

00:12:51,960 --> 00:12:58,620
any signal conditioning but it will it

00:12:56,430 --> 00:13:02,780
is useful what the digital trigger is

00:12:58,620 --> 00:13:07,830
useful so I'll show you immediately how

00:13:02,780 --> 00:13:10,560
the analog output is the interface to

00:13:07,830 --> 00:13:13,050
the m2 case 150 mega samples per second

00:13:10,560 --> 00:13:15,600
to channel synchronized deck so

00:13:13,050 --> 00:13:18,120
similarly to the analog input it

00:13:15,600 --> 00:13:20,580
provides an easy to use method to push

00:13:18,120 --> 00:13:22,950
the data to the dag convert data from at

00:13:20,580 --> 00:13:26,580
all to volts and different other

00:13:22,950 --> 00:13:30,480
configuration options so it can be used

00:13:26,580 --> 00:13:32,819
to provide a low signal for up to 20

00:13:30,480 --> 00:13:35,309
megahertz and also if you want to be

00:13:32,819 --> 00:13:38,970
like a radio transmitter you can provide

00:13:35,309 --> 00:13:41,459
the intermediate frequency the power

00:13:38,970 --> 00:13:46,879
supply and the DMM whistle DM M stands

00:13:41,459 --> 00:13:49,769
for digital multimeter these classes are

00:13:46,879 --> 00:13:52,079
the interface to who m2 case poor supply

00:13:49,769 --> 00:13:55,609
which is a plus minus 5 volt 50 milli

00:13:52,079 --> 00:13:57,869
amp power supply we couldn't use this

00:13:55,609 --> 00:14:00,329
power supply for this project because

00:13:57,869 --> 00:14:01,350
our power requirements are way bigger 12

00:14:00,329 --> 00:14:04,499
volts hundred and fifty million

00:14:01,350 --> 00:14:06,479
milliamps but I thought it was worth

00:14:04,499 --> 00:14:08,119
worth mentioning so the picture on the

00:14:06,479 --> 00:14:14,639
right is actually a screenshot from

00:14:08,119 --> 00:14:16,649
scope II and it kind of shows that you

00:14:14,639 --> 00:14:18,539
have a five volts on the positive output

00:14:16,649 --> 00:14:22,589
and minus three on the negative output

00:14:18,539 --> 00:14:24,359
the DMM is an interface to the m2 case

00:14:22,589 --> 00:14:26,699
internal voltages and temperatures and

00:14:24,359 --> 00:14:33,749
can be used for the different kinds of

00:14:26,699 --> 00:14:37,470
device monitoring the the digital

00:14:33,749 --> 00:14:39,720
interface of the m2k is provides 16

00:14:37,470 --> 00:14:41,509
digital input and inputs and outputs

00:14:39,720 --> 00:14:45,479
which are capable of perfect operation

00:14:41,509 --> 00:14:48,569
and also triggered operation so as

00:14:45,479 --> 00:14:51,239
outputs they can be configured either as

00:14:48,569 --> 00:14:53,009
push-pull and open train and so they are

00:14:51,239 --> 00:14:55,049
ideal to beat banged a variety of

00:14:53,009 --> 00:14:58,019
protocols and from the input you can

00:14:55,049 --> 00:14:59,879
decode again a variety of protocols so

00:14:58,019 --> 00:15:04,259
in this project the digital interface

00:14:59,879 --> 00:15:09,470
was used to configure the ADF 43:51 PLL

00:15:04,259 --> 00:15:15,569
in order to generate a low frequencies

00:15:09,470 --> 00:15:19,739
so like I said the ADF 43:51 has a spy

00:15:15,569 --> 00:15:21,659
interface like that's like I'm sure a

00:15:19,739 --> 00:15:23,609
lot of you have heard about spy serial

00:15:21,659 --> 00:15:25,409
peripheral peripheral interface it is a

00:15:23,609 --> 00:15:29,639
protocol that's used to configure a

00:15:25,409 --> 00:15:32,009
variety of devices so what we did was we

00:15:29,639 --> 00:15:36,409
created a spy encoder and decoder that

00:15:32,009 --> 00:15:39,689
makes use of m2 case digital interface

00:15:36,409 --> 00:15:43,559
to better communicate with the devices

00:15:39,689 --> 00:15:45,540
so the API that we use is similar to a

00:15:43,559 --> 00:15:47,970
lot of drivers that we have I'm going to

00:15:45,540 --> 00:15:49,530
go over that in a minute and the cool

00:15:47,970 --> 00:15:51,660
thing about it is that it runs on the

00:15:49,530 --> 00:15:54,840
host machine so it's not on the firmware

00:15:51,660 --> 00:15:57,840
it's not on additional additional

00:15:54,840 --> 00:16:01,410
hardware you just run it on the on the

00:15:57,840 --> 00:16:06,710
host machine the lowest driver

00:16:01,410 --> 00:16:09,120
repository contains a bunch of adi adi

00:16:06,710 --> 00:16:13,920
drivers for a bunch of adi components

00:16:09,120 --> 00:16:16,680
that are not meant to be run on on on

00:16:13,920 --> 00:16:18,420
devices that have OSS so it's like bare

00:16:16,680 --> 00:16:20,490
metal bare metal drivers for

00:16:18,420 --> 00:16:23,250
microcontrollers or for the user space

00:16:20,490 --> 00:16:26,280
and then on the bottom left you can see

00:16:23,250 --> 00:16:30,120
the api that it's used so all of the

00:16:26,280 --> 00:16:32,970
drivers I have used the same API it is a

00:16:30,120 --> 00:16:35,610
spiny spy remove spy write and read

00:16:32,970 --> 00:16:41,790
which is the same API that we used for

00:16:35,610 --> 00:16:44,010
the m2k engine so what you can do is

00:16:41,790 --> 00:16:47,010
basically take a device driver from the

00:16:44,010 --> 00:16:49,020
OS repository link it against the m2k

00:16:47,010 --> 00:16:52,200
spy engine and you can communicate with

00:16:49,020 --> 00:16:54,660
the device you just compile the program

00:16:52,200 --> 00:16:59,520
and you can communicate with the device

00:16:54,660 --> 00:17:00,960
like straight from come from your

00:16:59,520 --> 00:17:06,750
application you don't need additional

00:17:00,960 --> 00:17:09,750
hardware the ADF 43:51 sync the idea

00:17:06,750 --> 00:17:13,699
4351 is a voltage controlled oscillator

00:17:09,750 --> 00:17:18,810
it has a range from 35 megahertz to

00:17:13,699 --> 00:17:22,470
4.4.4 gigahertz and it's configurable

00:17:18,810 --> 00:17:24,870
through spy so like I said it has

00:17:22,470 --> 00:17:27,120
easy-to-use driving the no sk+ ian now

00:17:24,870 --> 00:17:31,770
i'm going to show you how easy it was

00:17:27,120 --> 00:17:35,700
for us to build the ADF 43:51 sync which

00:17:31,770 --> 00:17:38,310
is a good new radio a glue radio block

00:17:35,700 --> 00:17:42,030
that introduces the m2k to interface

00:17:38,310 --> 00:17:47,040
with with this PLL's so first of all you

00:17:42,030 --> 00:17:49,290
have to include the driver then you you

00:17:47,040 --> 00:17:53,670
great like the boilerplate code for for

00:17:49,290 --> 00:17:56,160
the radio for the 340 350 C I think yeah

00:17:53,670 --> 00:17:58,260
you create the boilerplate code for it

00:17:56,160 --> 00:18:01,400
like the constructor of the destructor

00:17:58,260 --> 00:18:04,110
and everything inside the constructor

00:18:01,400 --> 00:18:10,440
there are two parts of interest so the

00:18:04,110 --> 00:18:13,170
first part is the the first part of the

00:18:10,440 --> 00:18:15,810
structure here which has hundred

00:18:13,170 --> 00:18:17,880
thousand hundred thousand which is the

00:18:15,810 --> 00:18:20,370
I'm sorry it's actually 1 million that

00:18:17,880 --> 00:18:23,400
refers to megahertz it's 1 megahertz

00:18:20,370 --> 00:18:26,580
which is the clock input which is the

00:18:23,400 --> 00:18:29,910
clocking sorry it's their clocking of

00:18:26,580 --> 00:18:32,190
the spy interface then there's the chip

00:18:29,910 --> 00:18:36,060
selecting that we use and the URI the

00:18:32,190 --> 00:18:38,820
URI is the actual location of the m2k

00:18:36,060 --> 00:18:42,620
device the second part of interest is

00:18:38,820 --> 00:18:45,690
the one that is underlined here the ADR

00:18:42,620 --> 00:18:48,090
4357 this function comes straight from

00:18:45,690 --> 00:18:52,140
from the driver you just call this

00:18:48,090 --> 00:18:55,310
function and the driver handles all of

00:18:52,140 --> 00:18:58,980
the initialization for you then we map

00:18:55,310 --> 00:19:01,590
some whenever you receive a message

00:18:58,980 --> 00:19:03,120
using the set message handler whenever

00:19:01,590 --> 00:19:05,580
we you'll receive a messaging we map

00:19:03,120 --> 00:19:09,720
that to a function and then we write the

00:19:05,580 --> 00:19:11,730
actual function to to change the

00:19:09,720 --> 00:19:18,960
frequency whenever we receive the

00:19:11,730 --> 00:19:22,590
message so we we run this function from

00:19:18,960 --> 00:19:25,170
the driver the idea 4350 set frequency

00:19:22,590 --> 00:19:27,230
and this is basically it we get the

00:19:25,170 --> 00:19:30,570
frequency from the from the message and

00:19:27,230 --> 00:19:36,150
the driver handles all of the SPI

00:19:30,570 --> 00:19:39,390
transactions between the m2k and within

00:19:36,150 --> 00:19:42,780
the m2k and the PLL so this is what the

00:19:39,390 --> 00:19:45,890
block looks like here are all of the

00:19:42,780 --> 00:19:47,520
registers that you need to set up and

00:19:45,890 --> 00:19:52,160
yeah you're good to go

00:19:47,520 --> 00:19:56,220
after this so how it all fits together

00:19:52,160 --> 00:19:59,070
we initially when experimented we

00:19:56,220 --> 00:20:02,430
created this board which has all of the

00:19:59,070 --> 00:20:04,200
components together but eventually we

00:20:02,430 --> 00:20:08,190
created like a more integrated version

00:20:04,200 --> 00:20:09,679
which is more robust more easy to use in

00:20:08,190 --> 00:20:16,009
order to get

00:20:09,679 --> 00:20:19,320
FM reception in blue radio we created a

00:20:16,009 --> 00:20:23,669
Python script to initialize the the

00:20:19,320 --> 00:20:27,479
libram - okay we use the full ADF 4351

00:20:23,669 --> 00:20:30,090
to configure the PLL and we used the i/o

00:20:27,479 --> 00:20:32,669
device source block in order to get the

00:20:30,090 --> 00:20:35,039
analog data from the device backing into

00:20:32,669 --> 00:20:37,820
the green radio flow then we used a

00:20:35,039 --> 00:20:40,229
bunch of signal processing blocks to

00:20:37,820 --> 00:20:45,210
actually modulate the data and send it

00:20:40,229 --> 00:20:46,799
back to an audio sync so here's a demo

00:20:45,210 --> 00:20:51,059
of how it works

00:20:46,799 --> 00:20:55,639
I hope you can hear it because it's not

00:20:51,059 --> 00:20:55,639
hooked up to the audio of the HDMI so

00:20:56,090 --> 00:20:59,119
[Music]

00:21:04,190 --> 00:21:09,350
yeahit's sorry about this but it's

00:21:14,429 --> 00:21:22,960
yeah I'm sorry doesn't go through so

00:21:20,160 --> 00:21:28,150
yeah we definitely have a demo at the

00:21:22,960 --> 00:21:30,549
booth so you can see that the FM signals

00:21:28,150 --> 00:21:34,030
are coming through then we do tune the

00:21:30,549 --> 00:21:36,250
frequency and now you could actually

00:21:34,030 --> 00:21:46,690
hear the the radio that's that's coming

00:21:36,250 --> 00:21:50,140
in so as you know conclusions and future

00:21:46,690 --> 00:21:53,410
plans I said that it is possible to use

00:21:50,140 --> 00:21:56,260
the m2k analog front end to capture I

00:21:53,410 --> 00:21:59,440
have data with proper circuitry and the

00:21:56,260 --> 00:22:02,290
m2k is a good good combo to get started

00:21:59,440 --> 00:22:06,429
with electronics and even SDR so in the

00:22:02,290 --> 00:22:08,169
future we we we plan to extend ribbon to

00:22:06,429 --> 00:22:11,530
case functionality so we want to create

00:22:08,169 --> 00:22:15,760
like a lot of pre module GOM 2k which is

00:22:11,530 --> 00:22:18,190
based on GRA o to provide more easy ways

00:22:15,760 --> 00:22:21,910
to communicate to interact with the m2k

00:22:18,190 --> 00:22:24,040
tribunal radio we want to create also

00:22:21,910 --> 00:22:25,780
interfaces for other protocols such as

00:22:24,040 --> 00:22:29,340
the I squared C and the UART

00:22:25,780 --> 00:22:32,110
for better integration with our drivers

00:22:29,340 --> 00:22:35,200
these interfaces we want to put them

00:22:32,110 --> 00:22:38,350
into the Lib m2k into the m2k CLI so you

00:22:35,200 --> 00:22:40,600
can program all devices right from from

00:22:38,350 --> 00:22:42,610
the console and eventually we want also

00:22:40,600 --> 00:22:45,100
want to add Debian packaging for ribbon

00:22:42,610 --> 00:22:51,830
2k and scope II so you can install them

00:22:45,100 --> 00:22:56,910
using app get thanks

00:22:51,830 --> 00:23:00,520
[Applause]

00:22:56,910 --> 00:23:03,460
do we have any questions for Adrian now

00:23:00,520 --> 00:23:06,460
cuz I have one so I saw in one of your

00:23:03,460 --> 00:23:10,240
screenshots of scope II what looked like

00:23:06,460 --> 00:23:11,650
a Windows 10 program oh yeah and then I

00:23:10,240 --> 00:23:13,600
went to your github repository and you

00:23:11,650 --> 00:23:15,670
have nightly Windows builds yes that's

00:23:13,600 --> 00:23:20,050
so so you have nightly builds of green

00:23:15,670 --> 00:23:21,670
Radio in Windows we don't have we don't

00:23:20,050 --> 00:23:24,190
even have yearly builds look in your

00:23:21,670 --> 00:23:28,350
radio in Windows yeah we do that we do

00:23:24,190 --> 00:23:30,580
them with an sis

00:23:28,350 --> 00:23:32,140
yeah I don't know what that did we

00:23:30,580 --> 00:23:33,640
should we should we should figure out

00:23:32,140 --> 00:23:34,030
how to do that because that would be

00:23:33,640 --> 00:23:35,890
awesome

00:23:34,030 --> 00:23:40,870
it seems like a path for two for gonna I

00:23:35,890 --> 00:23:42,410
do support in Windows Oh No all right

00:23:40,870 --> 00:23:46,869
thank you so much Adrian

00:23:42,410 --> 00:23:46,869

YouTube URL: https://www.youtube.com/watch?v=M-nCJ-h3hr4


