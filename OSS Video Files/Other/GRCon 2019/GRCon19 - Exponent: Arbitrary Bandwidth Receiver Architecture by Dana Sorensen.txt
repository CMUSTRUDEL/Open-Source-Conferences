Title: GRCon19 - Exponent: Arbitrary Bandwidth Receiver Architecture by Dana Sorensen
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	Exponent: Arbitrary Bandwidth Receiver Architecture by Dana Sorensen, Jake Gunther, Colton Lindstrom

This paper presents an architecture for receiving arbitrarily wide bandwidth signals using multiple narrowband receivers. Information contained in overlapping spectral regions provides the essential information needed to combine the separate receive channels and recover the original wideband signal as though it were captured by a single wideband receiver. This paper presents details of the digital signal processing and synchronization needed to synthesize the wideband signal from multiple narrowband channels. The method is validated through computer simulations. Preliminary results of hardware implementation are also presented.
Captions: 
	00:00:14,540 --> 00:00:20,720
okay it's good to get that working and

00:00:17,960 --> 00:00:22,400
speaking without any slides here so my

00:00:20,720 --> 00:00:23,810
name is Dana Sorensen I'm a graduate

00:00:22,400 --> 00:00:25,460
student at Utah State University I'm

00:00:23,810 --> 00:00:27,950
here with Colton Lindstrom to present

00:00:25,460 --> 00:00:29,119
some research that we've done on an

00:00:27,950 --> 00:00:32,809
arbitrary bandwidth receiver

00:00:29,119 --> 00:00:36,410
architecture so where were some of that

00:00:32,809 --> 00:00:38,270
motivation for this research go over

00:00:36,410 --> 00:00:40,460
some of the simulations and the theory

00:00:38,270 --> 00:00:43,250
we've developed for it and then show off

00:00:40,460 --> 00:00:46,460
a little bit of a proof of concept that

00:00:43,250 --> 00:00:48,290
we worked on as well so the motivation

00:00:46,460 --> 00:00:50,570
for this research actually came from

00:00:48,290 --> 00:00:53,030
small satellite industry I don't know

00:00:50,570 --> 00:00:56,030
how many of you have some experience in

00:00:53,030 --> 00:00:57,739
there but these small satellites these

00:00:56,030 --> 00:01:00,170
cube SATs are about the size of a

00:00:57,739 --> 00:01:03,379
shoebox so they're very small they're

00:01:00,170 --> 00:01:06,320
very constrained on power and size

00:01:03,379 --> 00:01:09,040
requirements so this presents an

00:01:06,320 --> 00:01:12,500
interesting challenge for radio

00:01:09,040 --> 00:01:13,790
communication interfaces because as the

00:01:12,500 --> 00:01:15,200
technology progresses they're

00:01:13,790 --> 00:01:17,450
continuously generating more and more

00:01:15,200 --> 00:01:21,350
data and they want to get more and more

00:01:17,450 --> 00:01:27,320
back to earth and in general when you

00:01:21,350 --> 00:01:28,910
have a small low low data rate radio you

00:01:27,320 --> 00:01:30,890
can do that with small and low power but

00:01:28,910 --> 00:01:33,980
as you could higher and higher data

00:01:30,890 --> 00:01:38,270
rates you tend to push over into large

00:01:33,980 --> 00:01:40,640
size larger mass and larger power

00:01:38,270 --> 00:01:42,700
requirements and what we wanted to do

00:01:40,640 --> 00:01:46,190
what our proposal was take some of these

00:01:42,700 --> 00:01:49,400
really well engineered well designed RF

00:01:46,190 --> 00:01:51,560
IC chips such as the 93 61 where there's

00:01:49,400 --> 00:01:53,930
been a lot of investment in this over

00:01:51,560 --> 00:01:55,910
the last decade from various industries

00:01:53,930 --> 00:01:58,490
and several companies even here at the

00:01:55,910 --> 00:02:00,800
conference to produce these extremely

00:01:58,490 --> 00:02:02,930
tiny RFIC chips that have a lot of

00:02:00,800 --> 00:02:06,920
capability and a very low power

00:02:02,930 --> 00:02:09,979
consumption so our idea here is to use

00:02:06,920 --> 00:02:12,590
multiple of these RF IC chips to

00:02:09,979 --> 00:02:15,230
essentially emulate a what a single

00:02:12,590 --> 00:02:18,050
wideband receiver and just clarify I'm

00:02:15,230 --> 00:02:20,060
not talking about individual channels

00:02:18,050 --> 00:02:22,519
channelizing these receivers but

00:02:20,060 --> 00:02:24,530
actually doing some data processing on

00:02:22,519 --> 00:02:27,019
these in real time and the receiver in

00:02:24,530 --> 00:02:28,490
order to have them act as a coherent

00:02:27,019 --> 00:02:31,760
single wideband receive

00:02:28,490 --> 00:02:34,700
and they'd be able to receive a large

00:02:31,760 --> 00:02:39,800
wideband signal across the bandwidth of

00:02:34,700 --> 00:02:42,080
all of that in this component RFI C's so

00:02:39,800 --> 00:02:45,410
this slide shows kind of some of the

00:02:42,080 --> 00:02:47,900
progression on some CubeSat missions in

00:02:45,410 --> 00:02:49,430
the last decade how they've gone from

00:02:47,900 --> 00:02:50,960
single megabit per second and they're

00:02:49,430 --> 00:02:54,950
kind of starting to push the limit up

00:02:50,960 --> 00:02:57,440
all the way to gigabits this is enabled

00:02:54,950 --> 00:03:00,380
by you know we're starting to use the KA

00:02:57,440 --> 00:03:01,820
band on small satellites where instead

00:03:00,380 --> 00:03:05,900
of having a couple megahertz you've

00:03:01,820 --> 00:03:08,630
suddenly got 100 megahertz or even up to

00:03:05,900 --> 00:03:12,230
gigahertz of bandwidth to play with an

00:03:08,630 --> 00:03:14,990
interesting note of 7 or 5800 cube SATs

00:03:12,230 --> 00:03:17,750
only about 35 of them are using data

00:03:14,990 --> 00:03:20,120
rates that exceed one megabit per second

00:03:17,750 --> 00:03:25,190
so there's a lot of room for improvement

00:03:20,120 --> 00:03:28,190
here so this is the concept in a little

00:03:25,190 --> 00:03:31,520
more detail you have a single wideband

00:03:28,190 --> 00:03:35,000
signal that's too wide to be received

00:03:31,520 --> 00:03:37,070
with any single receiver so the idea is

00:03:35,000 --> 00:03:39,200
to use multiple receivers have each

00:03:37,070 --> 00:03:43,190
receiver receive just a portion of that

00:03:39,200 --> 00:03:45,500
bandwidth and then do some processing to

00:03:43,190 --> 00:03:47,420
shape them and and equalize them and and

00:03:45,500 --> 00:03:49,970
synchronize them so that they can be

00:03:47,420 --> 00:03:52,040
recombined into a single signal and

00:03:49,970 --> 00:03:54,230
again this is because if you look out on

00:03:52,040 --> 00:03:56,240
the market at at what kind of commercial

00:03:54,230 --> 00:03:58,910
off-the-shelf software find radios there

00:03:56,240 --> 00:04:01,760
are right now it's hard to find anything

00:03:58,910 --> 00:04:04,520
past 100 megahertz bandwidth or 100

00:04:01,760 --> 00:04:06,230
megahertz sample rate you're gonna

00:04:04,520 --> 00:04:08,180
really start paying for it if you want

00:04:06,230 --> 00:04:12,260
to push past those data rates most of

00:04:08,180 --> 00:04:16,160
them are are around 60 even so here's

00:04:12,260 --> 00:04:19,010
some of the the theory behind it some of

00:04:16,160 --> 00:04:20,720
the simulations that we did again what

00:04:19,010 --> 00:04:23,000
we're trying to achieve is is

00:04:20,720 --> 00:04:26,750
essentially get a single wideband

00:04:23,000 --> 00:04:29,420
receiver from multiple smaller receivers

00:04:26,750 --> 00:04:32,630
and some digital signal processing logic

00:04:29,420 --> 00:04:36,040
here and this could be it's not limited

00:04:32,630 --> 00:04:38,270
to 2 it could be any number of receivers

00:04:36,040 --> 00:04:40,910
creating essentially an arbitrarily

00:04:38,270 --> 00:04:43,220
large bandwidth receiver

00:04:40,910 --> 00:04:44,449
and this could also be turned around for

00:04:43,220 --> 00:04:48,290
the transmit side which we'll talk about

00:04:44,449 --> 00:04:51,620
a little bit at the end so the first

00:04:48,290 --> 00:04:53,960
thing first challenge is shaping the

00:04:51,620 --> 00:04:56,840
filled shaping the received signals if

00:04:53,960 --> 00:04:59,120
you look here if we receive individual

00:04:56,840 --> 00:05:01,789
signals from each receiver each of those

00:04:59,120 --> 00:05:04,690
receivers has some Associated filtering

00:05:01,789 --> 00:05:06,919
that it's doing it's shaping the signal

00:05:04,690 --> 00:05:10,160
you know could be a hardware it could be

00:05:06,919 --> 00:05:11,750
even software filters so if we just took

00:05:10,160 --> 00:05:13,580
the signals and added them together they

00:05:11,750 --> 00:05:15,680
wouldn't really add together into the

00:05:13,580 --> 00:05:19,729
the single signal that we're trying to

00:05:15,680 --> 00:05:22,910
get to you have a really bumpy frequency

00:05:19,729 --> 00:05:24,380
domain plot here so fortunately this is

00:05:22,910 --> 00:05:26,750
an easy problem to solve

00:05:24,380 --> 00:05:28,220
Nyquist filters which most of you are

00:05:26,750 --> 00:05:31,580
probably familiar with are very common

00:05:28,220 --> 00:05:33,080
because of their zero ISI properties an

00:05:31,580 --> 00:05:34,820
interesting side effect of the zero I

00:05:33,080 --> 00:05:38,289
side property is that the frequency

00:05:34,820 --> 00:05:40,940
domain representation of these filters

00:05:38,289 --> 00:05:42,530
when you position them just right apart

00:05:40,940 --> 00:05:45,349
the transition region between the

00:05:42,530 --> 00:05:47,419
filters adds to a nice unity gain across

00:05:45,349 --> 00:05:50,720
the passband so you can see we've got a

00:05:47,419 --> 00:05:53,060
red filter here a blue filter here you

00:05:50,720 --> 00:05:55,190
space them apart just right and add them

00:05:53,060 --> 00:05:59,599
together and you get this green filter

00:05:55,190 --> 00:06:00,979
thaks is a single nice large filter so

00:05:59,599 --> 00:06:03,169
that's great and that's easy because

00:06:00,979 --> 00:06:06,250
Nyquist filters are common they're very

00:06:03,169 --> 00:06:08,539
well understood they're easy to design

00:06:06,250 --> 00:06:10,720
unfortunately since usually what we're

00:06:08,539 --> 00:06:14,479
dealing with is complex IQ samples

00:06:10,720 --> 00:06:17,419
magnitude is only half of the picture we

00:06:14,479 --> 00:06:19,070
have phase as well so this is what

00:06:17,419 --> 00:06:20,720
happens when you try to just take what

00:06:19,070 --> 00:06:23,510
we had in this previous slide on complex

00:06:20,720 --> 00:06:26,150
data and add it together you have a blue

00:06:23,510 --> 00:06:28,430
filter red filter you add them together

00:06:26,150 --> 00:06:31,760
and you get this green one with a big

00:06:28,430 --> 00:06:36,020
dip in the middle where 0.5 plus 0.5

00:06:31,760 --> 00:06:37,610
equals 0.6 and this is obviously problem

00:06:36,020 --> 00:06:38,930
if you try to receive a signal like this

00:06:37,610 --> 00:06:41,270
your eye diagram would look something

00:06:38,930 --> 00:06:42,889
like this and that is my diagram it's

00:06:41,270 --> 00:06:46,550
kind of hard to tell because there's so

00:06:42,889 --> 00:06:48,229
much distortion in it so here on the

00:06:46,550 --> 00:06:49,639
right we've plotted the magnitude and

00:06:48,229 --> 00:06:51,169
the phase of the filters and this is an

00:06:49,639 --> 00:06:53,580
animation we're going to sweep through

00:06:51,169 --> 00:06:58,350
the frequencies here

00:06:53,580 --> 00:07:00,690
and you can see as we sweep through

00:06:58,350 --> 00:07:02,900
these two plots are the same this one's

00:07:00,690 --> 00:07:06,720
just not spinning so it's easier to see

00:07:02,900 --> 00:07:09,030
the phase of the green filter starts at

00:07:06,720 --> 00:07:12,510
the phase or the angle of blue one as we

00:07:09,030 --> 00:07:14,610
see here when it repeats and then it

00:07:12,510 --> 00:07:16,800
transitions over the transition region

00:07:14,610 --> 00:07:19,560
to the phase or the angle of the red one

00:07:16,800 --> 00:07:22,470
and while it's transitioning the

00:07:19,560 --> 00:07:24,240
magnitude there is not is not using the

00:07:22,470 --> 00:07:27,030
combined magnitude of the two filters

00:07:24,240 --> 00:07:29,430
because they're out of phase so this is

00:07:27,030 --> 00:07:32,130
an issue one way that we can solve this

00:07:29,430 --> 00:07:34,980
is just make it a filter design problem

00:07:32,130 --> 00:07:38,160
how do we adjust the phases of those

00:07:34,980 --> 00:07:41,490
filters so that across the transition

00:07:38,160 --> 00:07:44,070
region they have the same phase and we

00:07:41,490 --> 00:07:45,690
can avoid that and that's fairly easy we

00:07:44,070 --> 00:07:50,340
can do that just add a constant phase

00:07:45,690 --> 00:07:54,450
offset to each filter and that works as

00:07:50,340 --> 00:07:56,370
we see in this slide where we've got the

00:07:54,450 --> 00:07:59,160
same filters magnitude response but with

00:07:56,370 --> 00:08:02,130
the phases slightly shifted so that as

00:07:59,160 --> 00:08:04,020
we sweep across the region here as we go

00:08:02,130 --> 00:08:06,510
from the the blue region to the red

00:08:04,020 --> 00:08:10,310
region you can see very nice even

00:08:06,510 --> 00:08:12,900
handoff between one filter and the other

00:08:10,310 --> 00:08:14,610
so this works really well it produces a

00:08:12,900 --> 00:08:17,970
nice clean iya diagram you can get your

00:08:14,610 --> 00:08:21,960
signal but it has a couple problems with

00:08:17,970 --> 00:08:25,200
it one of those is depending on your

00:08:21,960 --> 00:08:27,600
receiver architecture the phase offsets

00:08:25,200 --> 00:08:29,280
might not be constant if you don't have

00:08:27,600 --> 00:08:32,430
a shared local oscillator if you're not

00:08:29,280 --> 00:08:34,350
using a coherent receivers this isn't

00:08:32,430 --> 00:08:35,640
going to be the case depending on your

00:08:34,350 --> 00:08:38,180
receiver architecture you could have

00:08:35,640 --> 00:08:40,710
PLL's in there that are locking on to a

00:08:38,180 --> 00:08:42,210
reference that's the same frequency but

00:08:40,710 --> 00:08:44,460
different phases meaning every time you

00:08:42,210 --> 00:08:45,900
turn it on that phase offset is

00:08:44,460 --> 00:08:48,420
different you got to calibrate it again

00:08:45,900 --> 00:08:50,610
out of your system so what we wanted to

00:08:48,420 --> 00:08:54,300
do is add some feedback and that's what

00:08:50,610 --> 00:08:56,930
we did so here we have I'll switch this

00:08:54,300 --> 00:08:59,370
side for you guys over there

00:08:56,930 --> 00:09:01,350
we've got shaping filters these are the

00:08:59,370 --> 00:09:03,300
Nyquist filters I talked about the

00:09:01,350 --> 00:09:06,550
signals coming in at this point in the

00:09:03,300 --> 00:09:10,750
chain the signals are baseband

00:09:06,550 --> 00:09:12,580
so they need to be shifted apart so they

00:09:10,750 --> 00:09:16,120
can be added together to produce the

00:09:12,580 --> 00:09:19,690
baseband signal of the wideband receive

00:09:16,120 --> 00:09:21,700
signal that we're trying to get to so

00:09:19,690 --> 00:09:23,410
then be they go through a phase error

00:09:21,700 --> 00:09:25,120
detector well this essentially does is

00:09:23,410 --> 00:09:26,950
it looks only at the transition region

00:09:25,120 --> 00:09:29,680
where if some of the signal is shared

00:09:26,950 --> 00:09:31,990
between both of these chains both these

00:09:29,680 --> 00:09:36,630
lines and it detects the phase

00:09:31,990 --> 00:09:38,800
difference between the two that drives a

00:09:36,630 --> 00:09:40,000
signal that's proportional to the phase

00:09:38,800 --> 00:09:42,580
air which then goes through a loop

00:09:40,000 --> 00:09:45,400
filter drives a synthesizer which shifts

00:09:42,580 --> 00:09:46,810
the phases on these complex

00:09:45,400 --> 00:09:49,390
Exponential's that are being used to

00:09:46,810 --> 00:09:51,970
shift the signal and then finally

00:09:49,390 --> 00:09:54,820
they're added together to produce the

00:09:51,970 --> 00:09:57,460
combined signal output interesting note

00:09:54,820 --> 00:10:01,060
that this is essentially just a digital

00:09:57,460 --> 00:10:03,850
PLL that's been slightly modified to

00:10:01,060 --> 00:10:05,740
produce these shifting signals and to

00:10:03,850 --> 00:10:09,930
look at specifically the phase error in

00:10:05,740 --> 00:10:14,160
the transition region so it's a fairly

00:10:09,930 --> 00:10:20,170
common or lightweight signal processing

00:10:14,160 --> 00:10:23,740
algorithm so here's a animation of some

00:10:20,170 --> 00:10:27,970
of the this was taken with real data

00:10:23,740 --> 00:10:29,950
from 293 61 receivers we implemented the

00:10:27,970 --> 00:10:36,040
whole algorithm simulated in MATLAB and

00:10:29,950 --> 00:10:37,360
you can see here when we start out it

00:10:36,040 --> 00:10:40,660
very quickly within a couple

00:10:37,360 --> 00:10:42,250
milliseconds locks on to they signal you

00:10:40,660 --> 00:10:46,560
can see initially the ayat' areum is

00:10:42,250 --> 00:10:48,670
just a complete mess but it very quickly

00:10:46,560 --> 00:10:50,320
sorts out those phases so that the

00:10:48,670 --> 00:10:52,720
signals are added coherently and you can

00:10:50,320 --> 00:10:54,640
see that also in the bottom here where

00:10:52,720 --> 00:10:57,340
the orange signal is the combined signal

00:10:54,640 --> 00:10:59,200
using no feedback so you have that kind

00:10:57,340 --> 00:11:02,470
of characteristic dip in the middle from

00:10:59,200 --> 00:11:05,080
the phase not being synchronized and

00:11:02,470 --> 00:11:08,080
then the blue signal starts out with the

00:11:05,080 --> 00:11:13,440
dip but very quickly jumps up and has a

00:11:08,080 --> 00:11:15,149
nice uniform pass band region there

00:11:13,440 --> 00:11:18,779
and I love you but this is very

00:11:15,149 --> 00:11:26,040
satisfying to watch that lock on so

00:11:18,779 --> 00:11:27,810
quickly okay so we didn't want to just

00:11:26,040 --> 00:11:30,420
have manthis be a theoretical project we

00:11:27,810 --> 00:11:35,639
wanted to actually implement this in

00:11:30,420 --> 00:11:37,459
hardware so that's what we did we got

00:11:35,639 --> 00:11:41,009
some toys to play with

00:11:37,459 --> 00:11:43,709
we used analog devices FM comms five

00:11:41,009 --> 00:11:48,060
board which it's really nice it has 293

00:11:43,709 --> 00:11:49,589
61 receivers on it a lot options more

00:11:48,060 --> 00:11:53,310
SMA ports than you'll probably ever use

00:11:49,589 --> 00:11:55,199
in your life but each one of these

00:11:53,310 --> 00:11:59,040
receivers can receive up to about 56

00:11:55,199 --> 00:12:01,949
megahertz so 56 mega samples per second

00:11:59,040 --> 00:12:04,680
of data and this this card also has

00:12:01,949 --> 00:12:07,350
options for synchronised sample clocks

00:12:04,680 --> 00:12:09,120
between the receivers and you can drive

00:12:07,350 --> 00:12:12,120
them with an external shared local

00:12:09,120 --> 00:12:15,319
oscillator which in our case we like to

00:12:12,120 --> 00:12:19,380
not use this port is attached to used

00:12:15,319 --> 00:12:21,389
Xilinx sock dev board which provided

00:12:19,380 --> 00:12:23,550
that PDA and processing power for the

00:12:21,389 --> 00:12:27,480
implementation of the algorithm they

00:12:23,550 --> 00:12:29,490
were just talking about so this is what

00:12:27,480 --> 00:12:32,850
we used we had a host PC running new

00:12:29,490 --> 00:12:35,720
radio a we used a simple off-the-shelf

00:12:32,850 --> 00:12:39,420
webcam grab some frames from that

00:12:35,720 --> 00:12:42,139
modulated out sent it to us RP that that

00:12:39,420 --> 00:12:45,509
produce a single wideband signal and

00:12:42,139 --> 00:12:50,069
then we had this FM comes board with two

00:12:45,509 --> 00:12:51,420
channels receiving that signal pushing

00:12:50,069 --> 00:12:54,269
the eight onto that pga where it was

00:12:51,420 --> 00:12:55,709
processed using the signal

00:12:54,269 --> 00:12:58,829
synchronization that you're just talking

00:12:55,709 --> 00:13:03,509
about and then we had the onboard

00:12:58,829 --> 00:13:05,939
processor on Zink FPGA actually running

00:13:03,509 --> 00:13:07,589
Linux with the new radio in order to

00:13:05,939 --> 00:13:10,470
receive that signal demodulate and

00:13:07,589 --> 00:13:13,620
reform the camera frames that we are

00:13:10,470 --> 00:13:16,620
sending so here's our new radio flow

00:13:13,620 --> 00:13:20,939
graph it's it's pretty standard nothing

00:13:16,620 --> 00:13:23,069
fancy going on here all of the signal

00:13:20,939 --> 00:13:26,040
combining is happening under the hood in

00:13:23,069 --> 00:13:26,850
that pga as its received there's a

00:13:26,040 --> 00:13:29,309
couple custom

00:13:26,850 --> 00:13:31,470
here camera source here's just a wrapper

00:13:29,309 --> 00:13:34,559
to an open CV interface to a camera

00:13:31,470 --> 00:13:38,879
pulling frames out we modulate it and

00:13:34,559 --> 00:13:42,419
send it out the seven comms five source

00:13:38,879 --> 00:13:46,199
is provided with the reference image

00:13:42,419 --> 00:13:50,369
with the board we were using but it's

00:13:46,199 --> 00:13:51,869
been modified here normally you have two

00:13:50,369 --> 00:13:53,850
different channels here independent

00:13:51,869 --> 00:13:56,189
channels but whether this is actually

00:13:53,850 --> 00:13:59,549
sending out is interleave samples from

00:13:56,189 --> 00:14:02,429
the coherent wideband signal that's been

00:13:59,549 --> 00:14:03,660
reconstructed in the firmware and the

00:14:02,429 --> 00:14:05,220
reason for that is because of course

00:14:03,660 --> 00:14:06,720
since you have double the bandwidth

00:14:05,220 --> 00:14:09,749
you've got double the sample rate twice

00:14:06,720 --> 00:14:11,369
as many samples so the way we handled

00:14:09,749 --> 00:14:13,499
that was just interleaving those samples

00:14:11,369 --> 00:14:16,979
between two of the channels so the first

00:14:13,499 --> 00:14:20,600
thing we do is d interleave those send

00:14:16,979 --> 00:14:20,600
them through some clock synchronization

00:14:20,689 --> 00:14:30,359
timing recovery etc demodulate and pull

00:14:27,899 --> 00:14:32,519
the frames out and display them so

00:14:30,359 --> 00:14:34,769
fairly simple and in this canoe radio

00:14:32,519 --> 00:14:36,989
proved to be a really useful tool

00:14:34,769 --> 00:14:39,989
we are pretty constrained on time and

00:14:36,989 --> 00:14:42,419
budget for this proof of concept and so

00:14:39,989 --> 00:14:44,279
having the opportunity there the

00:14:42,419 --> 00:14:46,829
availability of beauty radio to just

00:14:44,279 --> 00:14:48,629
drag-and-drop receive blocks and not

00:14:46,829 --> 00:14:49,979
having to build up an entire receiver

00:14:48,629 --> 00:14:55,049
architecture just for this proof of

00:14:49,979 --> 00:14:57,389
concept it was really valuable for us so

00:14:55,049 --> 00:14:59,220
here's a little screenshot of what we

00:14:57,389 --> 00:15:02,069
had in your new radios alright in our

00:14:59,220 --> 00:15:05,009
real-time test or you can see clearly we

00:15:02,069 --> 00:15:06,899
got the blue half of the signal the red

00:15:05,009 --> 00:15:09,149
half of the signal and they're added

00:15:06,899 --> 00:15:11,009
together into this nice green one which

00:15:09,149 --> 00:15:15,109
you can see we've got definitely clear

00:15:11,009 --> 00:15:18,600
signal distinctions so it's looking good

00:15:15,109 --> 00:15:20,489
we also we're able to look at this using

00:15:18,600 --> 00:15:23,159
i/o scope which was I think mentioned

00:15:20,489 --> 00:15:24,929
earlier today in one of the talks this

00:15:23,159 --> 00:15:28,679
allowed us to pull samples directly from

00:15:24,929 --> 00:15:30,539
FPGA and watch them in real time so you

00:15:28,679 --> 00:15:33,119
can see right half the signal left half

00:15:30,539 --> 00:15:35,639
the signal these are both at baseband so

00:15:33,119 --> 00:15:38,240
I have to be shifted apart from each

00:15:35,639 --> 00:15:39,620
other before they're added

00:15:38,240 --> 00:15:41,720
and then depending on whether the

00:15:39,620 --> 00:15:45,470
synchronization was turned on or off if

00:15:41,720 --> 00:15:47,870
it's turned on you get a nice even past

00:15:45,470 --> 00:15:49,490
ban across there and it's off you get

00:15:47,870 --> 00:15:52,100
that characteristic dip in there from

00:15:49,490 --> 00:15:56,330
the lack of a synchronization and one

00:15:52,100 --> 00:15:58,580
thing to note is that this phase offset

00:15:56,330 --> 00:16:00,080
here is not constant all that means is

00:15:58,580 --> 00:16:02,540
that this dip was essentially just

00:16:00,080 --> 00:16:04,910
moving up and down continuously you know

00:16:02,540 --> 00:16:06,770
if entually for Manoel and then it would

00:16:04,910 --> 00:16:08,450
come back up and then just go up and

00:16:06,770 --> 00:16:10,820
down up and down but with the phase

00:16:08,450 --> 00:16:15,530
synchronization turned on we'd get a

00:16:10,820 --> 00:16:16,640
nice consistent signal so after we

00:16:15,530 --> 00:16:19,340
implemented this we wanted to

00:16:16,640 --> 00:16:20,690
characterize it and get an idea of the

00:16:19,340 --> 00:16:23,150
performance you know some of the

00:16:20,690 --> 00:16:26,450
implementation loss of this feedback

00:16:23,150 --> 00:16:28,280
loop in here and we had kind of a

00:16:26,450 --> 00:16:32,000
serendipitous result here if you notice

00:16:28,280 --> 00:16:35,750
the the blue curve is the theoretical

00:16:32,000 --> 00:16:38,510
QPSK bit error rate for an uncoated QPSK

00:16:35,750 --> 00:16:39,920
signal and the orange one is our

00:16:38,510 --> 00:16:41,870
combined receivers and you'll notice

00:16:39,920 --> 00:16:44,720
it's actually performing better than a

00:16:41,870 --> 00:16:46,550
single receiver would and this is

00:16:44,720 --> 00:16:49,040
actually because in the overlapping

00:16:46,550 --> 00:16:51,050
region of the signal you've got two

00:16:49,040 --> 00:16:53,360
components in each signal coming in the

00:16:51,050 --> 00:16:55,370
signal and the noise the signals are

00:16:53,360 --> 00:16:57,680
being added together coherently thanks

00:16:55,370 --> 00:16:58,700
to our synchronization logic and the

00:16:57,680 --> 00:17:01,190
noise of course adds together

00:16:58,700 --> 00:17:03,320
incoherently what that means is that you

00:17:01,190 --> 00:17:06,290
get an increased SNR in the transition

00:17:03,320 --> 00:17:08,480
region and increase SNR in that portion

00:17:06,290 --> 00:17:12,140
of your signal and that translates

00:17:08,480 --> 00:17:13,490
actually a better bit error rate then

00:17:12,140 --> 00:17:15,050
you could achieve otherwise and it was

00:17:13,490 --> 00:17:19,120
enough to actually overcome the

00:17:15,050 --> 00:17:22,040
implementation loss from the

00:17:19,120 --> 00:17:24,530
synchronization logic involved so that

00:17:22,040 --> 00:17:26,000
was a serendipitous result that we

00:17:24,530 --> 00:17:31,610
didn't realize until we'd actually

00:17:26,000 --> 00:17:34,480
implemented it so in conclusion we are

00:17:31,610 --> 00:17:36,740
able to show this is a feasible

00:17:34,480 --> 00:17:38,750
arbitrary bandwidth radio architecture

00:17:36,740 --> 00:17:40,160
you could take as many receivers as you

00:17:38,750 --> 00:17:44,330
want you're limited only by your

00:17:40,160 --> 00:17:45,910
processing power in FPGA which isn't a

00:17:44,330 --> 00:17:49,460
lot because it's a pretty simple

00:17:45,910 --> 00:17:50,380
algorithm you can operate in real time

00:17:49,460 --> 00:17:53,130
combined

00:17:50,380 --> 00:17:57,310
many signals as you want and receive

00:17:53,130 --> 00:17:59,530
arbitrary bandwidth signal so we we

00:17:57,310 --> 00:18:03,160
proved this on the rx side on the TX

00:17:59,530 --> 00:18:05,380
side it's essentially the same thing one

00:18:03,160 --> 00:18:07,930
that one nice feature of the 9360 ones

00:18:05,380 --> 00:18:09,670
is there's an internal loopback that you

00:18:07,930 --> 00:18:11,890
can enable so that when you're

00:18:09,670 --> 00:18:13,690
transmitting you can receive on one of

00:18:11,890 --> 00:18:15,850
the receive channels the same signal

00:18:13,690 --> 00:18:17,470
you're transmitting and you could use

00:18:15,850 --> 00:18:20,410
that to synchronize the signals in the

00:18:17,470 --> 00:18:22,200
exact same way there's a couple things

00:18:20,410 --> 00:18:25,030
you could do with this if you were using

00:18:22,200 --> 00:18:28,420
a shared local oscillator so you had a

00:18:25,030 --> 00:18:32,380
coherent receivers then you could use

00:18:28,420 --> 00:18:34,360
this feedback loop to essentially

00:18:32,380 --> 00:18:36,760
calibrate or find the the right phase

00:18:34,360 --> 00:18:40,930
offsets and then turn that off

00:18:36,760 --> 00:18:43,720
you'd save some power and and if they're

00:18:40,930 --> 00:18:44,830
using a coherent local oscillator then

00:18:43,720 --> 00:18:46,870
they're not going to be drifting from

00:18:44,830 --> 00:18:48,840
each other so there's a lot of options a

00:18:46,870 --> 00:18:52,570
lot of things you could do with this

00:18:48,840 --> 00:18:54,940
it's an exciting project to work on and

00:18:52,570 --> 00:18:56,680
a good opportunity to get familiar with

00:18:54,940 --> 00:19:00,670
your new radio and some many of the

00:18:56,680 --> 00:19:03,030
other tools that we used here so any

00:19:00,670 --> 00:19:03,030
questions

00:19:08,240 --> 00:19:13,649
so just to clarify your your

00:19:11,429 --> 00:19:15,629
experimental setup you're using the two

00:19:13,649 --> 00:19:17,039
channels in the ADI chip or were there

00:19:15,629 --> 00:19:19,830
two different ati chips for the two

00:19:17,039 --> 00:19:20,940
different receivers and if so did you

00:19:19,830 --> 00:19:22,980
have to do anything normalizing the

00:19:20,940 --> 00:19:24,450
noise floor calibrating out anything

00:19:22,980 --> 00:19:25,919
else it was just a phase calibration or

00:19:24,450 --> 00:19:28,259
there are other things you have to do to

00:19:25,919 --> 00:19:31,470
manage that those differences in the the

00:19:28,259 --> 00:19:33,509
analog parts so first something question

00:19:31,470 --> 00:19:37,080
is did we do any calibration other than

00:19:33,509 --> 00:19:39,269
the phase synchronization and how are we

00:19:37,080 --> 00:19:41,610
using the channels on the 93-60 ones

00:19:39,269 --> 00:19:43,259
well for the channels each of the 93-60

00:19:41,610 --> 00:19:45,539
ones has to receive and to transmit

00:19:43,259 --> 00:19:48,960
channels unfortunately their locks to

00:19:45,539 --> 00:19:50,340
the same oscillator frequency so you

00:19:48,960 --> 00:19:52,980
can't use them to receive two different

00:19:50,340 --> 00:19:56,100
frequency bands at once so we used one

00:19:52,980 --> 00:19:58,289
channel from each of the chips and then

00:19:56,100 --> 00:19:59,580
there was no synchronization on them

00:19:58,289 --> 00:20:03,990
other than the phase synchronization

00:19:59,580 --> 00:20:06,029
that we did but they were close enough

00:20:03,990 --> 00:20:08,639
as far as the other the specs of the RF

00:20:06,029 --> 00:20:10,470
like noise floor or other like IQ

00:20:08,639 --> 00:20:12,269
imbalances I know that really showed up

00:20:10,470 --> 00:20:14,870
and your your measurements there right

00:20:12,269 --> 00:20:17,879
and we didn't have to deal with that Hey

00:20:14,870 --> 00:20:20,639
extremely interesting thank you so the

00:20:17,879 --> 00:20:23,519
question I have is did you were talking

00:20:20,639 --> 00:20:26,490
about being sad it's fine to watch it

00:20:23,519 --> 00:20:29,759
converge right yeah yeah so what did you

00:20:26,490 --> 00:20:31,440
test it against burst transmissions no

00:20:29,759 --> 00:20:33,659
that's an interesting question I'm glad

00:20:31,440 --> 00:20:35,669
you brought that up so we just tested it

00:20:33,659 --> 00:20:37,559
using this this continuous signal here

00:20:35,669 --> 00:20:39,779
but that is an interesting point because

00:20:37,559 --> 00:20:41,429
if there's no signal in the transition

00:20:39,779 --> 00:20:44,490
region there's nothing to synchronize

00:20:41,429 --> 00:20:46,710
off of right so if you had a bursty kind

00:20:44,490 --> 00:20:49,409
of transmission here you probably need

00:20:46,710 --> 00:20:51,509
some kind of tone transmitted in that

00:20:49,409 --> 00:20:53,580
transition region to calibrate off of

00:20:51,509 --> 00:20:55,470
you know for a millisecond or two to let

00:20:53,580 --> 00:20:58,559
it lock on before you actually send your

00:20:55,470 --> 00:21:01,019
signal oh yeah this might be a dumb

00:20:58,559 --> 00:21:02,990
question but why in the transition

00:21:01,019 --> 00:21:06,149
region did you need to worry about

00:21:02,990 --> 00:21:10,049
combining and the phase why not just

00:21:06,149 --> 00:21:12,379
take one or the other that is a good

00:21:10,049 --> 00:21:12,379
question

00:21:12,980 --> 00:21:18,379
the the reason for this is because we

00:21:15,629 --> 00:21:20,159
want a nice smooth transition region

00:21:18,379 --> 00:21:20,940
across the - we don't want any

00:21:20,159 --> 00:21:23,370
discontent

00:21:20,940 --> 00:21:25,170
you --'tis across that region if you

00:21:23,370 --> 00:21:26,940
just use one you're still gonna have to

00:21:25,170 --> 00:21:30,300
cut off and switch to the other receiver

00:21:26,940 --> 00:21:31,770
at some point and it's you know if

00:21:30,300 --> 00:21:33,630
you're familiar with signal processing

00:21:31,770 --> 00:21:36,210
filter design it's really hard to design

00:21:33,630 --> 00:21:38,790
a filter that just cuts off immediately

00:21:36,210 --> 00:21:41,400
and then transition to another one so I

00:21:38,790 --> 00:21:43,530
think even if we had had only used one

00:21:41,400 --> 00:21:45,750
of the signals in the transition region

00:21:43,530 --> 00:21:47,340
you'd still have to deal with a phase

00:21:45,750 --> 00:21:50,010
discontinuity when you jumps to the

00:21:47,340 --> 00:21:50,550
other receiver so that answer your

00:21:50,010 --> 00:21:54,060
question

00:21:50,550 --> 00:21:56,670
good answer Thanks my question is what

00:21:54,060 --> 00:21:59,640
is the modulation techniques / waveforms

00:21:56,670 --> 00:22:02,580
yeah so so in the proof-of-concept test

00:21:59,640 --> 00:22:05,160
we did we just used exclusively QPSK

00:22:02,580 --> 00:22:08,070
waveform yeah this one I saw but if this

00:22:05,160 --> 00:22:10,020
is your QPSK you're dead this one I can

00:22:08,070 --> 00:22:15,570
tell you're arrowed is incredibly big

00:22:10,020 --> 00:22:19,140
and you will have problems and the

00:22:15,570 --> 00:22:22,460
second one did you consider the Doppler

00:22:19,140 --> 00:22:26,550
shift oh this is just point-to-point

00:22:22,460 --> 00:22:29,130
static link that's a good question we

00:22:26,550 --> 00:22:31,890
did not consider Doppler shift which

00:22:29,130 --> 00:22:33,630
which may cause some problems because it

00:22:31,890 --> 00:22:38,340
may change where your transition region

00:22:33,630 --> 00:22:39,600
wise but that is a good topic something

00:22:38,340 --> 00:22:43,640
that could be improved or further

00:22:39,600 --> 00:22:43,640
researched here so thank you

00:22:54,080 --> 00:22:58,200

YouTube URL: https://www.youtube.com/watch?v=9f6c6KM9N5o


