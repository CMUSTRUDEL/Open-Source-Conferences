Title: GRCon19 - UHD Four-O by Martin Braun
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	UHD Four-O by Martin Braun

Ettus Research / National Instruments Sponsor Presentation
Captions: 
	00:00:14,530 --> 00:00:18,790
hello everyone yeah I'm Martin Branham

00:00:17,110 --> 00:00:20,260
for Midas research we are a diamond

00:00:18,790 --> 00:00:22,900
sponsor of this conference and we have

00:00:20,260 --> 00:00:24,640
been a sponsor for the last nine

00:00:22,900 --> 00:00:27,220
conferences so since the beginning I'm

00:00:24,640 --> 00:00:29,050
very proud about that and you know such

00:00:27,220 --> 00:00:32,710
I'm also happy to be able to be here and

00:00:29,050 --> 00:00:37,239
represent you know the makers of the

00:00:32,710 --> 00:00:38,830
u.s. rpm so last year I also gave a talk

00:00:37,239 --> 00:00:40,660
in the same capacity it was a bit more

00:00:38,830 --> 00:00:42,160
forward looking ahead to my questions in

00:00:40,660 --> 00:00:43,600
there I'm gonna do none of that this is

00:00:42,160 --> 00:00:45,340
just going to be straight up stuff that

00:00:43,600 --> 00:00:47,800
we built last year I'm going to show it

00:00:45,340 --> 00:00:50,050
to you there's another talk on Thursday

00:00:47,800 --> 00:00:51,579
which is a little bit more roadmap but

00:00:50,050 --> 00:00:54,399
this is just features features features

00:00:51,579 --> 00:00:55,719
and I'm gonna go start with things that

00:00:54,399 --> 00:00:59,200
we built last year that you might be

00:00:55,719 --> 00:01:02,530
interested in and what do we have here

00:00:59,200 --> 00:01:04,809
so this is the entry 20 a latest use up

00:01:02,530 --> 00:01:06,550
here in the US a P product family this

00:01:04,809 --> 00:01:09,580
is sort of the you know the fastest and

00:01:06,550 --> 00:01:12,780
widest bandwidth that we built so far it

00:01:09,580 --> 00:01:16,450
comes in two varieties and 220 and a 221

00:01:12,780 --> 00:01:18,280
the difference is the fact that this you

00:01:16,450 --> 00:01:19,869
seppia has a unique new feature that we

00:01:18,280 --> 00:01:21,939
haven't had such in the past which is

00:01:19,869 --> 00:01:24,220
the ability to actually share an ello

00:01:21,939 --> 00:01:26,350
between up 228 channels so when you are

00:01:24,220 --> 00:01:28,210
doing synchronization ello sharing is

00:01:26,350 --> 00:01:31,900
kind of the you know the gold standard

00:01:28,210 --> 00:01:35,710
for achieving phase coherence and the

00:01:31,900 --> 00:01:37,860
way this works is you build a 4x4 grid

00:01:35,710 --> 00:01:40,360
of NC 20s you kind of share an arrow

00:01:37,860 --> 00:01:42,610
through each column have sort of a

00:01:40,360 --> 00:01:44,619
master in there and then you pick

00:01:42,610 --> 00:01:46,960
another one as a like a grand master who

00:01:44,619 --> 00:01:49,720
will then serve like each 4x4 grid

00:01:46,960 --> 00:01:52,829
that's how you can synchronize up 228

00:01:49,720 --> 00:01:55,150
528 channels you know my more fashion

00:01:52,829 --> 00:01:57,250
other than that is so it has a couple of

00:01:55,150 --> 00:01:58,899
other really interesting specs it has

00:01:57,250 --> 00:02:01,210
the widest treating range that we have

00:01:58,899 --> 00:02:03,220
so far one megahertz or 6 gigahertz and

00:02:01,210 --> 00:02:05,649
also the highest rates and bandwidth so

00:02:03,220 --> 00:02:07,360
200 megahertz off instantaneous analog

00:02:05,649 --> 00:02:12,670
bandwidth available through the 200 and

00:02:07,360 --> 00:02:15,760
200 250 mega sample sampling rate it

00:02:12,670 --> 00:02:18,549
also does two hundred and 240 5.76 mega

00:02:15,760 --> 00:02:21,850
samples for your Wi-Fi in your LTE rates

00:02:18,549 --> 00:02:24,640
and in order to get all the data off the

00:02:21,850 --> 00:02:27,069
device we've put it in the same

00:02:24,640 --> 00:02:27,560
enclosure kind of as the n3 10 but it

00:02:27,069 --> 00:02:29,690
has next

00:02:27,560 --> 00:02:31,190
here's of p-part for extra data

00:02:29,690 --> 00:02:33,319
transport so you can have for example

00:02:31,190 --> 00:02:35,840
two ten gigabit links to your device and

00:02:33,319 --> 00:02:38,390
still have another one for white rabbit

00:02:35,840 --> 00:02:39,650
and management and control and because

00:02:38,390 --> 00:02:41,560
it comes in the same enclosure as the

00:02:39,650 --> 00:02:44,510
entertain it also has the same

00:02:41,560 --> 00:02:45,920
management and features it has an

00:02:44,510 --> 00:02:47,930
embedded Linux system running on it

00:02:45,920 --> 00:02:50,510
which you can use for all sorts of fun

00:02:47,930 --> 00:02:52,430
stuff so when as such it fits really

00:02:50,510 --> 00:02:54,380
nicely into our product family yeah so

00:02:52,430 --> 00:02:58,130
you know from less to more expensive

00:02:54,380 --> 00:02:59,540
yeah but really the column you you might

00:02:58,130 --> 00:03:01,580
be interested in depends very much on

00:02:59,540 --> 00:03:03,200
your requirements and then we're sort of

00:03:01,580 --> 00:03:04,519
very happy that we can meet so many

00:03:03,200 --> 00:03:06,230
different requirements at this point

00:03:04,519 --> 00:03:07,880
from you know very flexible with the X

00:03:06,230 --> 00:03:09,709
through ten and the the swab Apple

00:03:07,880 --> 00:03:11,690
daughter boards the form factors that

00:03:09,709 --> 00:03:13,280
the embedded series has and of course

00:03:11,690 --> 00:03:14,330
the really high rates at the end for

00:03:13,280 --> 00:03:16,790
twenty Alice we actually have a booth

00:03:14,330 --> 00:03:19,510
right over there so you can look at some

00:03:16,790 --> 00:03:22,760
of those use of peers and check them out

00:03:19,510 --> 00:03:24,709
so I mentioned the high rates in order

00:03:22,760 --> 00:03:27,140
to achieve that we actually published

00:03:24,709 --> 00:03:29,720
something else this year as part of our

00:03:27,140 --> 00:03:30,739
UHD driver which is a DB TK stack DB TK

00:03:29,720 --> 00:03:34,310
I don't want to go into too much detail

00:03:30,739 --> 00:03:36,320
here is a networking layer that allows

00:03:34,310 --> 00:03:37,880
us to sort of take over the control from

00:03:36,320 --> 00:03:41,510
the colonel say hey colonel I need that

00:03:37,880 --> 00:03:43,970
network card back off and then we sort

00:03:41,510 --> 00:03:46,790
of handle the NIC controls ourselves

00:03:43,970 --> 00:03:48,530
within UHD U which is something you can

00:03:46,790 --> 00:03:49,970
use with us x-series and the N three on

00:03:48,530 --> 00:03:51,049
it serial which is really useful if you

00:03:49,970 --> 00:03:55,160
want to achieve those high rates

00:03:51,049 --> 00:03:56,299
reliably okay so this is stuff that we

00:03:55,160 --> 00:03:58,010
published but we were actually working

00:03:56,299 --> 00:03:59,480
on a lot of other stuff and I do want to

00:03:58,010 --> 00:04:04,010
let you into some of the things that are

00:03:59,480 --> 00:04:05,269
like imminent so the reason I'm sorry I

00:04:04,010 --> 00:04:06,260
skipped all this here really I wasn't

00:04:05,269 --> 00:04:07,549
going to go into too much detail it's

00:04:06,260 --> 00:04:10,549
because we there's another saw twenty

00:04:07,549 --> 00:04:12,140
became Wednesday yes software roadmap

00:04:10,549 --> 00:04:13,640
there's a couple of things that are

00:04:12,140 --> 00:04:13,910
coming in that you might be interested

00:04:13,640 --> 00:04:16,820
in

00:04:13,910 --> 00:04:18,440
so um UHDS the use of your hardware

00:04:16,820 --> 00:04:20,720
driver so that's the that's the drivers

00:04:18,440 --> 00:04:21,890
stack that we use to drive our series

00:04:20,720 --> 00:04:26,360
and there's another there's another

00:04:21,890 --> 00:04:28,340
release in imminent later this year 315

00:04:26,360 --> 00:04:30,620
it will be an LTS branch like we had

00:04:28,340 --> 00:04:31,880
with three point nine so this branch

00:04:30,620 --> 00:04:33,530
will be there for a while when we're

00:04:31,880 --> 00:04:35,419
going to keep adding bug fixes to it

00:04:33,530 --> 00:04:37,010
there's no actual like products of

00:04:35,419 --> 00:04:40,169
features tighter this is just a stable

00:04:37,010 --> 00:04:42,659
branch that we want to keep around

00:04:40,169 --> 00:04:44,849
one major thing that you might be

00:04:42,659 --> 00:04:46,499
interested in is that our arc is now

00:04:44,849 --> 00:04:48,449
enabled by default which means like if

00:04:46,499 --> 00:04:50,400
you install our binaries it'll now just

00:04:48,449 --> 00:04:51,659
have her frog coming with it and if you

00:04:50,400 --> 00:04:52,949
look at our current master branch you

00:04:51,659 --> 00:04:55,819
will have a pretty good idea what's

00:04:52,949 --> 00:04:58,080
coming on this release cycle however

00:04:55,819 --> 00:04:59,669
slightly more excitingly we also have

00:04:58,080 --> 00:05:01,340
UHT for o in the pipeline

00:04:59,669 --> 00:05:03,539
that's something I've been waiting

00:05:01,340 --> 00:05:05,400
waiting you know to be able to talk

00:05:03,539 --> 00:05:09,629
about for a long time now

00:05:05,400 --> 00:05:11,279
finally bump the 3 in the press I mean

00:05:09,629 --> 00:05:13,259
in fact the first really stable release

00:05:11,279 --> 00:05:17,370
we did she was 300 like we never had a 1

00:05:13,259 --> 00:05:20,580
or 3 so this is a big change timeline

00:05:17,370 --> 00:05:22,889
for that is early next year however you

00:05:20,580 --> 00:05:24,419
can also look at this UHD release even

00:05:22,889 --> 00:05:26,219
if it is bleeding edge I would not

00:05:24,419 --> 00:05:29,879
recommend it for like any kind of stable

00:05:26,219 --> 00:05:31,770
you know implementation the reason we

00:05:29,879 --> 00:05:33,300
are publishing a bleeding edge branch

00:05:31,770 --> 00:05:34,879
here is because we want to give you the

00:05:33,300 --> 00:05:37,800
opportunity if you see what's coming up

00:05:34,879 --> 00:05:39,419
in case you are interested in the new

00:05:37,800 --> 00:05:41,699
architecture that we are building this

00:05:39,419 --> 00:05:43,979
is a massive change in terms of lines of

00:05:41,699 --> 00:05:45,599
code I know they are really an useful

00:05:43,979 --> 00:05:47,099
measure by themselves but compared to

00:05:45,599 --> 00:05:49,500
other releases this is really big

00:05:47,099 --> 00:05:52,139
why is it so big because we have touched

00:05:49,500 --> 00:05:54,060
the basic thing that ties all about you

00:05:52,139 --> 00:05:56,849
tubes together we touch RF knock itself

00:05:54,060 --> 00:05:58,620
so you actually is the driver for all of

00:05:56,849 --> 00:06:00,180
you know the overall driver did you

00:05:58,620 --> 00:06:02,009
interact with an RF nor kiss the

00:06:00,180 --> 00:06:04,229
underlying architecture that tells us

00:06:02,009 --> 00:06:07,080
how we program IFP GA is how we get

00:06:04,229 --> 00:06:10,500
packets on or off the devices why on

00:06:07,080 --> 00:06:12,419
earth would we do that quickly one thing

00:06:10,500 --> 00:06:14,339
I want to mention because now we get

00:06:12,419 --> 00:06:16,409
into is a bit of a naming issue like

00:06:14,339 --> 00:06:19,259
what old RF narcan uof NORC so i'm gonna

00:06:16,409 --> 00:06:21,060
refer to what is in 3 like in all the

00:06:19,259 --> 00:06:22,740
stable ranges we're gonna pro RF knock

00:06:21,060 --> 00:06:26,310
and then what's coming a new HQ for old

00:06:22,740 --> 00:06:27,659
be called RF norm why on earth would you

00:06:26,310 --> 00:06:29,939
touch that why would you rewrite

00:06:27,659 --> 00:06:32,129
something like ours naw there's a couple

00:06:29,939 --> 00:06:33,000
of important reasons here the first one

00:06:32,129 --> 00:06:36,300
was rates

00:06:33,000 --> 00:06:39,449
I checked all you about 250 mega sample

00:06:36,300 --> 00:06:41,339
rate in a dynamic and flexible

00:06:39,449 --> 00:06:42,839
architecture like RF north we've kind of

00:06:41,339 --> 00:06:46,680
maxed that out we can't really go much

00:06:42,839 --> 00:06:48,389
faster without doing major changes so we

00:06:46,680 --> 00:06:49,800
said well I guess we're gonna have to do

00:06:48,389 --> 00:06:51,349
major changes here just to achieve

00:06:49,800 --> 00:06:53,910
higher rates

00:06:51,349 --> 00:06:55,680
another thing about RF nark you

00:06:53,910 --> 00:06:58,020
is the point of RF north is the ability

00:06:55,680 --> 00:07:00,870
for you as the user of the user to put

00:06:58,020 --> 00:07:02,520
in custom features onto the device you

00:07:00,870 --> 00:07:05,040
know filters or modems or whatever you

00:07:02,520 --> 00:07:07,620
want we use that ourselves like for the

00:07:05,040 --> 00:07:09,630
the digital downconvert doesn't like the

00:07:07,620 --> 00:07:11,700
resample it says we all use RF not I

00:07:09,630 --> 00:07:14,670
mean a dead us to implement these

00:07:11,700 --> 00:07:16,140
features and a common complaint or

00:07:14,670 --> 00:07:17,610
request was like can we add more blocks

00:07:16,140 --> 00:07:19,890
because of the current design it's

00:07:17,610 --> 00:07:21,660
somewhat limited we said sure we can do

00:07:19,890 --> 00:07:23,460
that but that also mean big changes not

00:07:21,660 --> 00:07:26,520
just in the FPGA side also in the

00:07:23,460 --> 00:07:28,530
software side and the current design is

00:07:26,520 --> 00:07:29,790
kind of simple there's a crossbar and

00:07:28,530 --> 00:07:31,830
you can connect blocks to it if you're

00:07:29,790 --> 00:07:34,140
familiar with those terms in our final

00:07:31,830 --> 00:07:36,600
plan but there's another way of saying

00:07:34,140 --> 00:07:38,790
there's not a lot of design choices you

00:07:36,600 --> 00:07:41,240
can make so we thought ok we need to be

00:07:38,790 --> 00:07:43,860
able to give people more design choices

00:07:41,240 --> 00:07:47,760
to use you know they have the limited

00:07:43,860 --> 00:07:48,960
FPGA resources more efficiently and you

00:07:47,760 --> 00:07:50,220
know putting it all together we don't

00:07:48,960 --> 00:07:52,050
want to make it too complicated so the

00:07:50,220 --> 00:07:55,050
user experience is also very important

00:07:52,050 --> 00:07:57,570
to us so what did we do the first thing

00:07:55,050 --> 00:07:59,100
we did was we linked back went to the

00:07:57,570 --> 00:08:03,000
white board and inspect this whole thing

00:07:59,100 --> 00:08:05,130
out this took a long time and we you

00:08:03,000 --> 00:08:06,660
know we published a document on that URL

00:08:05,130 --> 00:08:08,250
I actually have three hard copies of

00:08:06,660 --> 00:08:10,919
that if someone's interested I have some

00:08:08,250 --> 00:08:12,900
to give away you know planning it all

00:08:10,919 --> 00:08:14,730
out it was a very important first step

00:08:12,900 --> 00:08:16,350
just to collect all the user feedback

00:08:14,730 --> 00:08:17,660
that we've gotten not just from external

00:08:16,350 --> 00:08:21,540
but also just like from our own internal

00:08:17,660 --> 00:08:24,330
processes and then we started writing

00:08:21,540 --> 00:08:26,460
code and there's so much change in here

00:08:24,330 --> 00:08:30,060
they can't possibly cover it all in the

00:08:26,460 --> 00:08:32,280
time frame however I will give you some

00:08:30,060 --> 00:08:33,450
of the highlights and for example this

00:08:32,280 --> 00:08:37,560
is what it kind of looks like on the

00:08:33,450 --> 00:08:39,240
FPGA now the those of you who are

00:08:37,560 --> 00:08:41,400
somewhat familiar with RF norc will

00:08:39,240 --> 00:08:43,020
recognize some things here in an FPGA

00:08:41,400 --> 00:08:45,120
design there's a bunch of blocks that

00:08:43,020 --> 00:08:47,280
implement various module you know

00:08:45,120 --> 00:08:48,990
modulus modules of the things that you

00:08:47,280 --> 00:08:52,200
want to implement like FFTs and filters

00:08:48,990 --> 00:08:54,000
so there on the right side here and in

00:08:52,200 --> 00:08:55,590
order to port them into your

00:08:54,000 --> 00:08:57,510
architecture you needed something what

00:08:55,590 --> 00:08:59,700
we call the knock shell so you took an

00:08:57,510 --> 00:09:00,960
ACCI stream compliant IP put it in a

00:08:59,700 --> 00:09:03,930
nutshell and then you were able to put

00:09:00,960 --> 00:09:06,610
it into RF North that is still all there

00:09:03,930 --> 00:09:07,660
hasn't changed however

00:09:06,610 --> 00:09:10,660
the north shell has been stripped down

00:09:07,660 --> 00:09:13,149
significantly it is we took everything

00:09:10,660 --> 00:09:17,470
out that made it slow and you know high

00:09:13,149 --> 00:09:18,760
resource utilization to be able to put

00:09:17,470 --> 00:09:21,430
in way more blocks than we had in the

00:09:18,760 --> 00:09:23,920
past there's two things that are new

00:09:21,430 --> 00:09:26,920
here one of these things as a control

00:09:23,920 --> 00:09:28,240
crossbar we realized that for control

00:09:26,920 --> 00:09:29,740
traffic you need to be able to talk

00:09:28,240 --> 00:09:32,200
between all of these you know

00:09:29,740 --> 00:09:34,260
potentially hundreds of blocks of your

00:09:32,200 --> 00:09:36,130
FPGA allows you to put that many down

00:09:34,260 --> 00:09:37,720
but you don't need like the highest

00:09:36,130 --> 00:09:39,339
throughput on this end so this has its

00:09:37,720 --> 00:09:41,740
own custom crossbar for control traffic

00:09:39,339 --> 00:09:43,480
and another thing that is new here is

00:09:41,740 --> 00:09:44,709
what we call a static router which is

00:09:43,480 --> 00:09:46,750
really just a fancy way of saying

00:09:44,709 --> 00:09:48,279
instead of connecting all of your blocks

00:09:46,750 --> 00:09:51,579
directly to the crossbar you are now

00:09:48,279 --> 00:09:52,899
also able to statically connect blocks

00:09:51,579 --> 00:09:54,850
if that's what you need because that

00:09:52,899 --> 00:09:56,620
might give you a better latency between

00:09:54,850 --> 00:10:00,130
blocks and it might also give you a

00:09:56,620 --> 00:10:01,360
better resource utilization now I

00:10:00,130 --> 00:10:03,519
mentioned earlier we stripped down the

00:10:01,360 --> 00:10:05,440
lock shell but like you know we didn't

00:10:03,519 --> 00:10:06,760
put junk in the NARC shell to start with

00:10:05,440 --> 00:10:08,079
so the stuff we took out of the north

00:10:06,760 --> 00:10:09,160
shall we had to put somewhere else so

00:10:08,079 --> 00:10:11,680
the next concept I want to introduce

00:10:09,160 --> 00:10:13,300
here is Stream endpoints a streamline

00:10:11,680 --> 00:10:16,120
point is something that can marshal

00:10:13,300 --> 00:10:20,019
traffic you know you know in a way that

00:10:16,120 --> 00:10:21,100
is not an axis REME connection so one

00:10:20,019 --> 00:10:22,240
thing you'll notice here is that we have

00:10:21,100 --> 00:10:23,769
fewer stream on points and we have

00:10:22,240 --> 00:10:25,540
blocks on the right-hand side and that's

00:10:23,769 --> 00:10:28,930
because we have some of the blocks

00:10:25,540 --> 00:10:30,339
statically connected finally a good old

00:10:28,930 --> 00:10:33,160
friend the cheddar crossed by still in

00:10:30,339 --> 00:10:36,070
there this is where data gets routed

00:10:33,160 --> 00:10:37,810
around like arbitrarily we also worked

00:10:36,070 --> 00:10:39,220
on this to increase the throughput and

00:10:37,810 --> 00:10:42,040
to be able to hit higher rates that we

00:10:39,220 --> 00:10:44,079
want to achieve in the future so let's

00:10:42,040 --> 00:10:45,750
look at an example application here so

00:10:44,079 --> 00:10:48,490
let's say you want to do something

00:10:45,750 --> 00:10:50,589
spectrum analysis like so I'm going to

00:10:48,490 --> 00:10:53,320
give a very simple example say you have

00:10:50,589 --> 00:10:55,269
an F of T and a radio the radio is just

00:10:53,320 --> 00:10:57,250
another block like any other of other

00:10:55,269 --> 00:11:01,000
block except it only has it except it

00:10:57,250 --> 00:11:02,529
also has iowa's connected and because we

00:11:01,000 --> 00:11:04,660
are confident we never need the actual

00:11:02,529 --> 00:11:06,160
samples in this particular design we

00:11:04,660 --> 00:11:08,620
will choose to directly connect the

00:11:06,160 --> 00:11:11,110
radio to the F of T and then the F of T

00:11:08,620 --> 00:11:14,860
does its math and then we get the F of T

00:11:11,110 --> 00:11:16,569
bands sent home to software through one

00:11:14,860 --> 00:11:18,010
of those treatment points so we have a

00:11:16,569 --> 00:11:20,110
static connection that goes like this

00:11:18,010 --> 00:11:21,610
static connection it goes like this

00:11:20,110 --> 00:11:24,370
then software is able to talk to the

00:11:21,610 --> 00:11:27,790
stream endpoint and get the F of T bends

00:11:24,370 --> 00:11:29,950
out a control traffic on the other hand

00:11:27,790 --> 00:11:31,540
which comes from the software will also

00:11:29,950 --> 00:11:33,190
go to the stream endpoint it's marshaled

00:11:31,540 --> 00:11:35,529
elsewhere to the control crossbar and

00:11:33,190 --> 00:11:37,240
thus gets distributed to the individual

00:11:35,529 --> 00:11:39,459
blog so we have no downside by the fact

00:11:37,240 --> 00:11:41,310
that we put the radio behind the F of T

00:11:39,459 --> 00:11:43,899
here from a data streaming perspective

00:11:41,310 --> 00:11:45,399
now let's say we add a spectrum sensing

00:11:43,899 --> 00:11:46,870
Block in there automate let's say you

00:11:45,399 --> 00:11:49,899
add a spectrum sensing block in there

00:11:46,870 --> 00:11:51,070
what what can we do here so let's say

00:11:49,899 --> 00:11:52,899
we're really confident that we're never

00:11:51,070 --> 00:11:54,370
going to need the FT bins either

00:11:52,899 --> 00:11:56,079
we just want whatever the spectrum

00:11:54,370 --> 00:11:58,320
sensing block outputs so we'll do

00:11:56,079 --> 00:12:00,790
another connection like this here and

00:11:58,320 --> 00:12:02,529
then the spectrum sensing output could

00:12:00,790 --> 00:12:05,829
be maybe it's a trigger or something

00:12:02,529 --> 00:12:07,510
like that will give us samples of T bins

00:12:05,829 --> 00:12:09,459
or whatever it is that it calculates

00:12:07,510 --> 00:12:11,890
however it could also do something else

00:12:09,459 --> 00:12:13,450
it could send control traffic to the

00:12:11,890 --> 00:12:16,180
radio they might just just be a

00:12:13,450 --> 00:12:17,680
pass-through since all of these blocks

00:12:16,180 --> 00:12:20,050
are on the control cross pod they can

00:12:17,680 --> 00:12:21,970
exchange control traffic easily so this

00:12:20,050 --> 00:12:24,670
is also a feature that we've retained or

00:12:21,970 --> 00:12:26,740
even improved but what if this guy isn't

00:12:24,670 --> 00:12:28,329
working so spectrum sensing blog is not

00:12:26,740 --> 00:12:30,040
doing the right thing but your test

00:12:28,329 --> 00:12:44,529
benches are fine you're like something's

00:12:30,040 --> 00:12:47,310
going on send it back see what would

00:12:44,529 --> 00:12:49,540
come back and thus debug your design and

00:12:47,310 --> 00:12:52,089
on the same way fuge image you can also

00:12:49,540 --> 00:12:53,560
around traffic through the problem is

00:12:52,089 --> 00:12:55,120
that something we also support it in all

00:12:53,560 --> 00:12:57,250
our products the only difference between

00:12:55,120 --> 00:13:02,410
this and the direct connection is that

00:12:57,250 --> 00:13:04,269
you now increase your latency so we also

00:13:02,410 --> 00:13:07,600
had a lot of software changes coming

00:13:04,269 --> 00:13:09,220
with this so for example consider this

00:13:07,600 --> 00:13:12,640
is just an example where we string back

00:13:09,220 --> 00:13:14,560
back-to-back a couple of blocks but if

00:13:12,640 --> 00:13:17,079
you look at the properties of the log

00:13:14,560 --> 00:13:17,920
they all have an epoch inside so we need

00:13:17,079 --> 00:13:21,070
to make sure that they're all the same

00:13:17,920 --> 00:13:23,019
now I know regular this is not very

00:13:21,070 --> 00:13:24,040
difficult so you were just simply source

00:13:23,019 --> 00:13:26,740
that property

00:13:24,040 --> 00:13:29,610
variable changes all that way however

00:13:26,740 --> 00:13:32,680
with UHD we went step further which is

00:13:29,610 --> 00:13:34,870
UHD internally tracks like the graph

00:13:32,680 --> 00:13:37,300
connections that you chose the way you

00:13:34,870 --> 00:13:38,860
wanted to stream of data between your

00:13:37,300 --> 00:13:41,319
blocks that he did self also make sure

00:13:38,860 --> 00:13:43,350
that any kind of properties that are

00:13:41,319 --> 00:13:46,720
relevant to your connections stayed

00:13:43,350 --> 00:13:48,790
consistent so that means we just what we

00:13:46,720 --> 00:13:50,380
call a graphic automation framework and

00:13:48,790 --> 00:13:52,360
I can hear a very specific example of

00:13:50,380 --> 00:13:53,529
how that works so let's take this very

00:13:52,360 --> 00:13:54,850
simple amazing unit

00:13:53,529 --> 00:13:59,709
you want to look at data at a very

00:13:54,850 --> 00:14:01,149
specific rate and let's say the BBC

00:13:59,709 --> 00:14:03,459
itself hasn't one register called

00:14:01,149 --> 00:14:05,529
estimation word we just we just defined

00:14:03,459 --> 00:14:07,569
somewhere in software we have two edges

00:14:05,529 --> 00:14:09,040
here and those ages also have properties

00:14:07,569 --> 00:14:13,000
which are in this case the sampling rate

00:14:09,040 --> 00:14:14,259
so the the property propagation

00:14:13,000 --> 00:14:16,449
framework will make sure that all of

00:14:14,259 --> 00:14:19,209
these properties stay in sync with each

00:14:16,449 --> 00:14:20,620
other so in order to do that you define

00:14:19,209 --> 00:14:22,660
those snippets of code that simply

00:14:20,620 --> 00:14:24,009
declare the relationship so in this case

00:14:22,660 --> 00:14:25,720
the unconsenting rate is the input

00:14:24,009 --> 00:14:27,819
sampling rate divided by the decimation

00:14:25,720 --> 00:14:29,350
and if you say okay I would like on this

00:14:27,819 --> 00:14:31,240
output I would like the sampling rate

00:14:29,350 --> 00:14:33,190
then your age Eva will internally make

00:14:31,240 --> 00:14:34,600
sure that that condition we need to be

00:14:33,190 --> 00:14:37,000
met by programming the registers

00:14:34,600 --> 00:14:41,410
accordingly oh if that's not possible

00:14:37,000 --> 00:14:42,610
giving you an error message there's

00:14:41,410 --> 00:14:44,529
plenty of other features that we added

00:14:42,610 --> 00:14:46,899
through our I really kind of list them

00:14:44,529 --> 00:14:49,089
all yeah there's only a couple - yes we

00:14:46,899 --> 00:14:51,310
retained them all so capability that's

00:14:49,089 --> 00:14:53,139
very compatible idiom we're kind of

00:14:51,310 --> 00:14:55,690
emphasizing the property because we have

00:14:53,139 --> 00:14:58,959
way more C++ API is now that if you want

00:14:55,690 --> 00:15:02,110
type safety both the time and at runtime

00:14:58,959 --> 00:15:04,510
we've also pulled out the motherboard

00:15:02,110 --> 00:15:07,269
control from the bar controllers so this

00:15:04,510 --> 00:15:11,410
is this is a good representation the

00:15:07,269 --> 00:15:14,769
middle and the bottom half is an

00:15:11,410 --> 00:15:16,329
equivalent implementation we're like the

00:15:14,769 --> 00:15:18,670
motherboard control by a separate block

00:15:16,329 --> 00:15:21,029
and radio do you see and then going to

00:15:18,670 --> 00:15:21,029
the host

00:15:21,180 --> 00:15:27,730
so yeah there's plenty of other things

00:15:24,120 --> 00:15:30,519
you know I don't want to give you

00:15:27,730 --> 00:15:32,139
some of the highlights here but a very

00:15:30,519 --> 00:15:34,029
important question right now that we

00:15:32,139 --> 00:15:36,220
know like what the Athena self ranking

00:15:34,029 --> 00:15:37,540
do is like how come people actually use

00:15:36,220 --> 00:15:38,980
this because this is not something they

00:15:37,540 --> 00:15:41,379
made to make our lives easy although

00:15:38,980 --> 00:15:42,910
well that's actually exactly what we did

00:15:41,379 --> 00:15:44,769
but we also wanted to make your life

00:15:42,910 --> 00:15:47,019
yeah because the whole purpose of my

00:15:44,769 --> 00:15:50,139
advice to the you know biggest kid able

00:15:47,019 --> 00:15:51,519
to program easily so you know and in the

00:15:50,139 --> 00:15:53,949
Santa Clara office whenever I have a

00:15:51,519 --> 00:15:55,509
question that pertains if DJ programming

00:15:53,949 --> 00:15:57,459
I was a guard I was right here so I'm

00:15:55,509 --> 00:15:59,399
gonna do the same thing right now if you

00:15:57,459 --> 00:16:02,879
can like give us some idea about the

00:15:59,399 --> 00:16:02,879
tooling that we did

00:16:17,200 --> 00:16:24,500
so five only software changes that you

00:16:21,080 --> 00:16:26,810
had we also make updates and you still

00:16:24,500 --> 00:16:28,490
have the same or as much milder and the

00:16:26,810 --> 00:16:32,240
rock pool but he did make updates to

00:16:28,490 --> 00:16:34,220
them the support 34 oh but the most

00:16:32,240 --> 00:16:36,770
exciting update that we did was actually

00:16:34,220 --> 00:16:41,300
add the ability to generator at the

00:16:36,770 --> 00:16:47,870
images are using PRC so let me show you

00:16:41,300 --> 00:16:51,100
how so this is how you would utilize the

00:16:47,870 --> 00:16:57,400
fpga image in GRC and this is a typical

00:16:51,100 --> 00:16:57,400
p5f to Kiev and then on the right side

00:16:58,240 --> 00:17:03,740
which has different words it has

00:17:01,270 --> 00:17:07,220
club domains in machine clock radio

00:17:03,740 --> 00:17:09,260
clock it has the i/o for the videos and

00:17:07,220 --> 00:17:11,990
it also has connections to stream at

00:17:09,260 --> 00:17:14,390
point-o what you see on the left side is

00:17:11,990 --> 00:17:24,110
are they trying to connect these blue

00:17:14,390 --> 00:17:26,930
arrows or SATA connections with me now

00:17:24,110 --> 00:17:34,210
let I want to add an empathy to my

00:17:26,930 --> 00:17:34,210
experiment so I just go for it

00:17:37,460 --> 00:17:40,719
[Music]

00:17:46,440 --> 00:17:55,539
and selector and what the surface is

00:17:53,080 --> 00:17:59,440
either the speed to at the dynamic

00:17:55,539 --> 00:18:02,500
connection or in your in your experience

00:17:59,440 --> 00:18:04,360
and if I want to add into a SATA

00:18:02,500 --> 00:18:06,370
connection then I didn't just remove the

00:18:04,360 --> 00:18:08,980
connection and added in an email of a

00:18:06,370 --> 00:18:13,990
salad chain and that's how easy it is to

00:18:08,980 --> 00:18:19,179
be a chuf so let's see how this would

00:18:13,990 --> 00:18:20,530
look like for developers SSS so we have

00:18:19,179 --> 00:18:22,900
the block relation to it

00:18:20,530 --> 00:18:24,580
you as the user will have to provide all

00:18:22,900 --> 00:18:27,130
the details that you have you million

00:18:24,580 --> 00:18:29,559
your blocks and purport the I if it has

00:18:27,130 --> 00:18:32,590
an i/o force and put it in a gamified

00:18:29,559 --> 00:18:35,830
which get uses an intro to the Rockwood

00:18:32,590 --> 00:18:36,780
it generates a block specific option for

00:18:35,830 --> 00:18:39,370
you

00:18:36,780 --> 00:18:41,950
template will you add your user ID your

00:18:39,370 --> 00:18:45,000
first two lot because you have and it

00:18:41,950 --> 00:18:48,070
generates attachment is when you test

00:18:45,000 --> 00:18:49,990
the gamble if I get added to a block

00:18:48,070 --> 00:18:52,750
database which has other drops and key

00:18:49,990 --> 00:18:55,659
to lightest one and then you can use it

00:18:52,750 --> 00:18:57,789
for education this young is fine right

00:18:55,659 --> 00:18:59,230
either is a block that there is an

00:18:57,789 --> 00:19:01,480
expectation of a young expires which

00:18:59,230 --> 00:19:03,190
basically fake Intel what the point is

00:19:01,480 --> 00:19:06,250
you want your blocks is connected is

00:19:03,190 --> 00:19:08,020
what our doc you want all you can also

00:19:06,250 --> 00:19:11,440
use the TRC but you're not limited to a

00:19:08,020 --> 00:19:13,659
time and if you're pulling the database

00:19:11,440 --> 00:19:18,940
from the block database and get speed

00:19:13,659 --> 00:19:20,620
again because image trigger and and yes

00:19:18,940 --> 00:19:23,909
and then you load it into your yourself

00:19:20,620 --> 00:19:23,909
and then you

00:19:38,410 --> 00:19:47,120
hello Bennifer this a little bit if I

00:19:41,540 --> 00:19:50,059
build up he's been working using our for

00:19:47,120 --> 00:19:51,860
an application perspective and yeah sure

00:19:50,059 --> 00:19:53,030
working out how can we actually use it

00:19:51,860 --> 00:19:55,549
as an infuser

00:19:53,030 --> 00:19:58,220
sure thing so the work mentioned earlier

00:19:55,549 --> 00:20:01,820
the multi-user user experience should

00:19:58,220 --> 00:20:06,559
change very much at all with this arm

00:20:01,820 --> 00:20:10,610
redo then the GRU hvu largely remain the

00:20:06,559 --> 00:20:13,490
same whoever dr ibis our other truth

00:20:10,610 --> 00:20:14,809
module will change unlike just over a

00:20:13,490 --> 00:20:17,809
couple of photographs kind of

00:20:14,809 --> 00:20:21,260
demonstrate some of the changes so here

00:20:17,809 --> 00:20:23,900
is a pretty basic example that we have

00:20:21,260 --> 00:20:26,450
if you see our as before you'll notice

00:20:23,900 --> 00:20:28,520
that the radio of the GDC our are pretty

00:20:26,450 --> 00:20:32,090
much the same they have slightly their

00:20:28,520 --> 00:20:35,510
conference now but this new are extreme

00:20:32,090 --> 00:20:38,510
o'clock is real big difference here and

00:20:35,510 --> 00:20:41,120
so we've created streamers to match the

00:20:38,510 --> 00:20:45,830
underlying park not api a little bit

00:20:41,120 --> 00:20:47,450
more so we didn't really talk in depth

00:20:45,830 --> 00:20:49,520
about the people explicit and I think we

00:20:47,450 --> 00:20:52,490
provide but we'll you'll have to have

00:20:49,520 --> 00:20:55,280
all connect between blocks and streamers

00:20:52,490 --> 00:20:57,380
and we wanted to reflect that radio as

00:20:55,280 --> 00:21:02,059
well give people a little bit more

00:20:57,380 --> 00:21:04,340
control this also has a benefit of

00:21:02,059 --> 00:21:07,520
solving a couple performance issues we

00:21:04,340 --> 00:21:10,700
have a probe of our chronic for example

00:21:07,520 --> 00:21:14,090
now in the new radio if you wanted to

00:21:10,700 --> 00:21:17,480
have a single computational walk running

00:21:14,090 --> 00:21:19,760
your extreme errs will have their own

00:21:17,480 --> 00:21:22,970
threads allocated than biking radio and

00:21:19,760 --> 00:21:26,290
so a performance issues related to that

00:21:22,970 --> 00:21:28,490
particular cases have been solved and

00:21:26,290 --> 00:21:33,450
additionally we've also given a little

00:21:28,490 --> 00:21:35,639
bit more control over what exactly

00:21:33,450 --> 00:21:38,370
going to be type of baseline so let's

00:21:35,639 --> 00:21:40,649
say instead of one Clark these block you

00:21:38,370 --> 00:21:42,360
wanted that have it separated into two

00:21:40,649 --> 00:21:47,159
and make sure that those to walk for our

00:21:42,360 --> 00:21:49,789
timeline now with this new or extreme

00:21:47,159 --> 00:21:52,320
work walk those sample streams would be

00:21:49,789 --> 00:21:55,130
so now I'd like to show a quick example

00:21:52,320 --> 00:22:00,360
of something that we got working

00:21:55,130 --> 00:22:04,169
recently for this so this is a loopback

00:22:00,360 --> 00:22:07,830
sample just zoom out a little bit to

00:22:04,169 --> 00:22:10,260
show air flow graph here goes from the

00:22:07,830 --> 00:22:13,559
arms radio to the kids radio and you'll

00:22:10,260 --> 00:22:16,950
notice that all the data path is in the

00:22:13,559 --> 00:22:19,080
FPGA I don't have hooks touching this

00:22:16,950 --> 00:22:22,110
which is exciting because this wasn't

00:22:19,080 --> 00:22:24,149
possible in prototype it's a new feature

00:22:22,110 --> 00:22:31,100
that works just straight out of the box

00:22:24,149 --> 00:22:37,019
with so what I'm actually doing here is

00:22:31,100 --> 00:22:38,309
I have one units or P X P 10 which is

00:22:37,019 --> 00:22:41,039
taking in a signal and that's

00:22:38,309 --> 00:22:43,380
transmitting those samples over or

00:22:41,039 --> 00:22:45,299
orally to another X to the 10 which is

00:22:43,380 --> 00:22:49,200
then transmitted and we just have a

00:22:45,299 --> 00:22:53,820
signal generator but parent the input

00:22:49,200 --> 00:22:56,130
and output do a basic letter ugly as you

00:22:53,820 --> 00:23:00,179
that the bottom right we have a

00:22:56,130 --> 00:23:02,639
oscilloscope repair what's really

00:23:00,179 --> 00:23:04,679
important here is that you know this is

00:23:02,639 --> 00:23:09,720
a ranking feature that will work out of

00:23:04,679 --> 00:23:13,919
the box the real takeaway here is that

00:23:09,720 --> 00:23:17,250
we want this experience to be this as

00:23:13,919 --> 00:23:20,309
similar as possible between rc+

00:23:17,250 --> 00:23:24,149
grms that is if you know how to build a

00:23:20,309 --> 00:23:27,230
our flow graph it wanted me we know what

00:23:24,149 --> 00:23:27,230
the steps to created the other

00:23:32,480 --> 00:23:38,759
yes that is a small glimpse from us into

00:23:35,899 --> 00:23:40,379
like what we have to you know if I plan

00:23:38,759 --> 00:23:41,700
for the immediate future

00:23:40,379 --> 00:23:44,850
I don't know we have time for a few

00:23:41,700 --> 00:23:47,389
questions maybe okay excellent time well

00:23:44,850 --> 00:23:47,389
thank you very much

00:23:49,490 --> 00:23:52,150

YouTube URL: https://www.youtube.com/watch?v=lWj8Ng7vz28


