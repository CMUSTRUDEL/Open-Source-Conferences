Title: GRCon19 - Demonstration of GNU Radio Compatibility with a NASA Space... by David Miller
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	Demonstration of GNU Radio Compatibility with a NASA Space Communications Network Modem by David Miller

This paper presents the results of testing that the author recently conducted to demonstrate that a GNU Radio Software Defined Radio (SDR) receiver is compatible with a typical National Aeronautics and Space Administration (NASA) satellite ground station vendor modem and NASA waveforms within the scope of this initial testing phase. The author implemented the GNU Radio SDR receiver for this testing by installing the open source GNU Radio software on a Dell laptop and using a Commercial Off-The-Shelf (COTS) RTL-SDR hardware dongle. During the demonstration testing, the NASA vendor modem transmitted a repeating bit pattern to the GNU Radio SDR receiver using Binary Phase Shift Keying (BPSK) modulation for one test case and Quadrature Phase Shift Keying (QPSK) modulation for a second test case. The GNU Radio SDR received and demodulated the signal in order to recover the transmitted bit stream. This paper provides the specific GNU Radio SDR receiver design developed and implemented for this testing, the detailed demonstration test configurations, and the demonstration test results. This paper also concludes by listing many possible functions that the GNU Radio SDR could provide in a NASA satellite ground station. For example, NASA could employ the GNU Radio SDR as a mobile test unit tool in the ground station, as a modem in a test bed to develop and test possible new communication services waveforms, as an inexpensive intermediate frequency and baseband recorder, and even as an inexpensive backup spare modem for operations.
Captions: 
	00:00:15,460 --> 00:00:23,010
today I'm going to present the results

00:00:17,650 --> 00:00:27,150
of some testing I did with a new radio

00:00:23,010 --> 00:00:32,470
receiver along with a typical NASA

00:00:27,150 --> 00:00:34,660
vendor modem modulator so while for this

00:00:32,470 --> 00:00:37,780
conference the conference leadership did

00:00:34,660 --> 00:00:42,010
encourage papers based maybe more on

00:00:37,780 --> 00:00:44,710
demonstrations and simulations they also

00:00:42,010 --> 00:00:46,479
encouraged presentations from a kind of

00:00:44,710 --> 00:00:48,670
tutorial perspective so I'm going to try

00:00:46,479 --> 00:00:51,970
to do that hopefully this will be useful

00:00:48,670 --> 00:00:54,909
to new users I'm only probably a user

00:00:51,970 --> 00:00:57,780
for about a year myself so that's what

00:00:54,909 --> 00:01:00,400
I'm going to try to do my background

00:00:57,780 --> 00:01:03,629
currently I work at the NASA Goddard

00:01:00,400 --> 00:01:09,460
Space Flight Center for a contractor

00:01:03,629 --> 00:01:11,170
named parrot on the 1 disclaimers really

00:01:09,460 --> 00:01:13,540
all the materials in here the

00:01:11,170 --> 00:01:15,700
presentation The Associated paper that

00:01:13,540 --> 00:01:17,560
will be in the Proceedings is really

00:01:15,700 --> 00:01:20,320
based on my own personal perspectives

00:01:17,560 --> 00:01:22,030
personal opinion inside my passes so

00:01:20,320 --> 00:01:24,550
about one year ago I was looking for

00:01:22,030 --> 00:01:27,960
certain limits to MATLAB Simulink for

00:01:24,550 --> 00:01:31,390
some communication system simulation

00:01:27,960 --> 00:01:33,190
activities so I went ahead and I I found

00:01:31,390 --> 00:01:35,950
that GNU radio can be a good fit for

00:01:33,190 --> 00:01:39,730
that a good cost-effective fit low cost

00:01:35,950 --> 00:01:43,050
and so I also found out that you know

00:01:39,730 --> 00:01:46,150
GNU radio could really be used as a

00:01:43,050 --> 00:01:49,480
software-defined modem a low-cost one at

00:01:46,150 --> 00:01:51,100
data rates NASA typically uses at espan

00:01:49,480 --> 00:01:54,280
so I went ahead and started developing

00:01:51,100 --> 00:01:58,140
the GNU radio SDR receiver and then

00:01:54,280 --> 00:02:02,380
tested it along with a typical NASA

00:01:58,140 --> 00:02:03,700
vendor modem modulator so again I'm

00:02:02,380 --> 00:02:08,379
trying to do this from a tutorial

00:02:03,700 --> 00:02:10,750
perspective to describe how I developed

00:02:08,379 --> 00:02:13,900
the GNU radio SDR receiver and then

00:02:10,750 --> 00:02:15,760
tested it with the NASA bender modem so

00:02:13,900 --> 00:02:18,849
again the scope will be kind of a

00:02:15,760 --> 00:02:21,250
tutorial perspective hopefully this will

00:02:18,849 --> 00:02:23,819
help new users so that they can maybe

00:02:21,250 --> 00:02:28,040
quickly build their implementer a good

00:02:23,819 --> 00:02:33,920
cost-effective GNU radio SDR

00:02:28,040 --> 00:02:35,420
receiver or modem okay this chart is

00:02:33,920 --> 00:02:37,879
high level for the test configuration

00:02:35,420 --> 00:02:41,299
it's a back to back test configuration

00:02:37,879 --> 00:02:45,319
the NASA vendor modem modulators on the

00:02:41,299 --> 00:02:49,090
Left transmitted over a coaxial cable 50

00:02:45,319 --> 00:02:52,970
ohms SMA with a 1.2 gigahertz

00:02:49,090 --> 00:03:01,909
intermediate frequency to the GNU radio

00:02:52,970 --> 00:03:04,730
SDR receiver used BPSK and QPSK okay

00:03:01,909 --> 00:03:08,870
this chart shows the parts I used to

00:03:04,730 --> 00:03:11,829
develop the GNU radio receiver the Dell

00:03:08,870 --> 00:03:16,940
laptop which is this one actually here

00:03:11,829 --> 00:03:22,489
Linux and GNU radio software version

00:03:16,940 --> 00:03:25,670
three point seven point 11 the RTL SDR

00:03:22,489 --> 00:03:28,909
hardware dongle just 20 duct eight

00:03:25,670 --> 00:03:31,940
dollars commercial off-the-shelf Haddy

00:03:28,909 --> 00:03:36,430
has the USB interface on one side to

00:03:31,940 --> 00:03:39,699
connect to the laptop has an SMA 50 ohm

00:03:36,430 --> 00:03:42,579
interface to connect to the if' signal

00:03:39,699 --> 00:03:45,530
and the dongle does the frequency tuning

00:03:42,579 --> 00:03:48,859
and it also dam converts the digital I F

00:03:45,530 --> 00:03:56,629
which I sometimes call zero Hertz if'

00:03:48,859 --> 00:03:59,810
and I get just got that on Amazon the

00:03:56,629 --> 00:04:02,359
BPSK test case this would be the flow

00:03:59,810 --> 00:04:12,409
graph the GNU radio flow graph for BPSK

00:04:02,359 --> 00:04:15,859
and on the left is the RTL SDR a source

00:04:12,409 --> 00:04:18,530
block that controls the dongle the other

00:04:15,859 --> 00:04:21,769
main blocks are the polyphase clock sync

00:04:18,530 --> 00:04:24,020
clock it does the simple synchronization

00:04:21,769 --> 00:04:27,949
the Costas loop that does to carry her

00:04:24,020 --> 00:04:29,900
synchronization and the other blocks are

00:04:27,949 --> 00:04:34,400
really support blocks so I'll be showing

00:04:29,900 --> 00:04:36,530
it on the next chart okay yeah support

00:04:34,400 --> 00:04:39,800
blocks for a real-time monitoring during

00:04:36,530 --> 00:04:41,869
the tests had the time sync block which

00:04:39,800 --> 00:04:46,330
does the oscilloscope function

00:04:41,869 --> 00:04:49,069
frequency sink block have an IQ

00:04:46,330 --> 00:04:53,289
constellation sink block to monitor

00:04:49,069 --> 00:04:57,409
carrier synchronization and performance

00:04:53,289 --> 00:04:59,599
4 QPSK the flow graph was pretty similar

00:04:57,409 --> 00:05:01,550
the only difference was the cost of

00:04:59,599 --> 00:05:03,979
solute there the order is now 4 rather

00:05:01,550 --> 00:05:08,149
than 2 and all there was blocks at the

00:05:03,979 --> 00:05:11,029
bottom like the multipliers I used those

00:05:08,149 --> 00:05:18,610
to reserve a resolve carrier lock phase

00:05:11,029 --> 00:05:22,550
ambiguity so since this is a really a

00:05:18,610 --> 00:05:25,729
tutorial type presentation I wanted to

00:05:22,550 --> 00:05:29,270
since I was a new users list a couple

00:05:25,729 --> 00:05:32,149
things here that gave me trouble when I

00:05:29,270 --> 00:05:34,399
was developing the receiver the taps

00:05:32,149 --> 00:05:37,099
parameter in the polyphase clock sink

00:05:34,399 --> 00:05:42,429
block and just getting that rtl-sdr

00:05:37,099 --> 00:05:47,479
source block into the gnu block library

00:05:42,429 --> 00:05:49,629
so on the clock sink basically you need

00:05:47,479 --> 00:05:52,699
to type in a lot of stuff there for the

00:05:49,629 --> 00:05:54,830
Fira route raise cosine filter and then

00:05:52,699 --> 00:05:58,129
it is a function of a few parameters

00:05:54,830 --> 00:06:01,759
there the samples per symbol the root

00:05:58,129 --> 00:06:04,279
raised cosine roll off factor L would be

00:06:01,759 --> 00:06:07,610
the length of the prototype filter for

00:06:04,279 --> 00:06:09,649
the block that probably could be an

00:06:07,610 --> 00:06:11,629
entire presentation on itself on that

00:06:09,649 --> 00:06:14,119
and how the block is built so you just

00:06:11,629 --> 00:06:16,809
for a new user just put in leaven maybe

00:06:14,119 --> 00:06:19,789
13 more and you'll be off and running

00:06:16,809 --> 00:06:24,979
number of filters in the polyphase

00:06:19,789 --> 00:06:27,319
filter bank set that to 32 is a good

00:06:24,979 --> 00:06:30,110
number that I use so all you need to do

00:06:27,319 --> 00:06:34,459
is type in the fi or root raised cosine

00:06:30,110 --> 00:06:35,749
32 64 100 0.5 and 704 and that should

00:06:34,459 --> 00:06:40,309
get you off and running pretty quickly

00:06:35,749 --> 00:06:44,360
especially if you're a new user the C++

00:06:40,309 --> 00:06:46,519
code is in github is on the GNU radio

00:06:44,360 --> 00:06:49,189
github and that really does provide a

00:06:46,519 --> 00:06:50,689
lot of useful insight into the details

00:06:49,189 --> 00:06:55,430
and the blocks I'm still going through

00:06:50,689 --> 00:06:58,790
it myself for the

00:06:55,430 --> 00:07:03,259
of the source block the RTL source block

00:06:58,790 --> 00:07:07,850
I found this one command for the Linux

00:07:03,259 --> 00:07:11,930
terminal sudo gr - Osmo STR and that

00:07:07,850 --> 00:07:15,400
allowed me to load the entire GNU radio

00:07:11,930 --> 00:07:23,270
software along with the source block

00:07:15,400 --> 00:07:25,759
then in the in the library the

00:07:23,270 --> 00:07:30,560
development process I did that in four

00:07:25,759 --> 00:07:33,500
steps first the simulation I basically

00:07:30,560 --> 00:07:35,570
just used the GNU radio simulation

00:07:33,500 --> 00:07:37,400
modulator blocks along with the receiver

00:07:35,570 --> 00:07:40,820
blocks to get going and get the hang of

00:07:37,400 --> 00:07:45,889
GNU radio then I went out and bought the

00:07:40,820 --> 00:07:49,280
the RTL dongle it came with an antenna

00:07:45,889 --> 00:07:51,080
when I bought it so I tested it with FM

00:07:49,280 --> 00:07:53,240
stations get it get the hang of the

00:07:51,080 --> 00:07:55,699
dongle get the hang of the GNU radio

00:07:53,240 --> 00:07:59,510
then I went out and bought a signal

00:07:55,699 --> 00:08:02,750
generator on the low-cost one for BPSK

00:07:59,510 --> 00:08:04,340
and all I could do is a 1 0 1 0 pattern

00:08:02,750 --> 00:08:06,289
I brought that with me so hopefully and

00:08:04,340 --> 00:08:09,560
get all that running here there's some

00:08:06,289 --> 00:08:11,599
time and then the last step was to go to

00:08:09,560 --> 00:08:15,530
the remote facility where the vendor

00:08:11,599 --> 00:08:17,539
modem was to do the actual testing so

00:08:15,530 --> 00:08:21,039
the test approach again I did two test

00:08:17,539 --> 00:08:21,039
cases bpsk qpsk

00:08:21,550 --> 00:08:27,530
the settings on the on the blocks in the

00:08:25,250 --> 00:08:32,000
flow graph were pretty much the same for

00:08:27,530 --> 00:08:35,330
both modulations except for the Costas

00:08:32,000 --> 00:08:37,039
loop block the order was different and

00:08:35,330 --> 00:08:42,760
that was about it and then I used a

00:08:37,039 --> 00:08:46,100
repeating 15 bit pattern for the testing

00:08:42,760 --> 00:08:48,620
so during the testing the performance

00:08:46,100 --> 00:08:50,089
was good I was able to recover the

00:08:48,620 --> 00:08:52,430
transmitted bit stream from the

00:08:50,089 --> 00:08:54,890
modulator cheap symbol synchronous a

00:08:52,430 --> 00:08:57,740
synchronization lock achieved carrier

00:08:54,890 --> 00:09:01,190
synchronization lock the next charts

00:08:57,740 --> 00:09:04,220
will show how I concluded that basically

00:09:01,190 --> 00:09:07,980
this is a snapshot of the time synch

00:09:04,220 --> 00:09:12,180
lock display during the testing

00:09:07,980 --> 00:09:14,340
and this shows the 15 bits and I had it

00:09:12,180 --> 00:09:16,530
refreshing at the same rate so I could

00:09:14,340 --> 00:09:18,390
look at it for five minutes 10 minutes

00:09:16,530 --> 00:09:22,530
and make sure things look good and

00:09:18,390 --> 00:09:27,840
weren't slipping the frequency spectrum

00:09:22,530 --> 00:09:32,250
during the test from the frequency sink

00:09:27,840 --> 00:09:34,740
block display a snapshot here you can

00:09:32,250 --> 00:09:37,110
see the oscillations maybe about every

00:09:34,740 --> 00:09:38,790
60 kilohertz are due to the repeating

00:09:37,110 --> 00:09:40,710
bit pattern if I had a much much longer

00:09:38,790 --> 00:09:48,270
bit pattern it would look more like the

00:09:40,710 --> 00:09:50,820
BPSK from your textbook so the IQ

00:09:48,270 --> 00:09:55,500
constellation before the Costas loop

00:09:50,820 --> 00:09:58,170
block this is before I removed the

00:09:55,500 --> 00:10:01,760
residual frequency offset between the

00:09:58,170 --> 00:10:04,620
vendor modem modulator and the RTL SDR

00:10:01,760 --> 00:10:05,880
hardware dongle so there even though

00:10:04,620 --> 00:10:08,220
they're both said at the same frequency

00:10:05,880 --> 00:10:11,120
1.2 gigahertz there's a little different

00:10:08,220 --> 00:10:16,530
so that rotation is there this is just a

00:10:11,120 --> 00:10:17,910
static snapshot so maybe gonna do the

00:10:16,530 --> 00:10:20,970
demo you can see the rotation that

00:10:17,910 --> 00:10:23,490
occurs now after the Costas loop now you

00:10:20,970 --> 00:10:25,740
have the more typical good IQ

00:10:23,490 --> 00:10:30,270
constellation any that you expect with

00:10:25,740 --> 00:10:33,360
BPSK so this is after the Costas loop

00:10:30,270 --> 00:10:39,180
and now the residual frequency offset

00:10:33,360 --> 00:10:42,450
has been removed so this chart this

00:10:39,180 --> 00:10:44,970
chart really just shows the residual

00:10:42,450 --> 00:10:48,090
frequency offset removal before the

00:10:44,970 --> 00:10:50,460
Costas loop and after equation one would

00:10:48,090 --> 00:10:53,130
be the incoming signal before the Costas

00:10:50,460 --> 00:10:56,640
loop out of the dongle and equation 2 at

00:10:53,130 --> 00:10:58,560
the bottom that would be for after the

00:10:56,640 --> 00:11:00,660
Costas loop and it's been removed and

00:10:58,560 --> 00:11:04,050
yet now you just have the phase that you

00:11:00,660 --> 00:11:10,050
want the two cages for BPSK and the four

00:11:04,050 --> 00:11:15,060
phases for a QPSK so the conclusions on

00:11:10,050 --> 00:11:17,370
here within the scope of this initial

00:11:15,060 --> 00:11:20,570
testing now I didn't it's just a subset

00:11:17,370 --> 00:11:21,810
I tested of typical NASA waveforms

00:11:20,570 --> 00:11:23,940
didn't

00:11:21,810 --> 00:11:26,100
to all of them for example phase

00:11:23,940 --> 00:11:29,250
modulation with the subcarrier but

00:11:26,100 --> 00:11:32,340
within the scope the GNU radio receiver

00:11:29,250 --> 00:11:36,540
was compatible with some NASA modems

00:11:32,340 --> 00:11:39,900
waveforms and also data rates that they

00:11:36,540 --> 00:11:44,850
use at espan you know up to a couple

00:11:39,900 --> 00:11:48,150
megabits per second so what what can we

00:11:44,850 --> 00:11:51,900
use GNU radio now for maybe in my

00:11:48,150 --> 00:11:54,630
opinion in a NASA ground station or

00:11:51,900 --> 00:11:57,029
really any satellite ground station it

00:11:54,630 --> 00:11:59,940
could be used as a mobile test tool

00:11:57,029 --> 00:12:01,770
maybe it's a compact light as spectrum

00:11:59,940 --> 00:12:04,680
analyzer functions oscilloscope

00:12:01,770 --> 00:12:06,210
functions it can act as a receiver so it

00:12:04,680 --> 00:12:07,710
could be very good for troubleshooting

00:12:06,210 --> 00:12:11,610
without buying a lot more expensive

00:12:07,710 --> 00:12:15,290
modems for that it's probably a good

00:12:11,610 --> 00:12:19,050
tool for education and training of

00:12:15,290 --> 00:12:21,150
Operations teams maintenance teams that

00:12:19,050 --> 00:12:25,740
kind of thing including India and Lynx

00:12:21,150 --> 00:12:28,620
simulations I already did a couple demos

00:12:25,740 --> 00:12:33,810
for a couple of the NASA engineers and a

00:12:28,620 --> 00:12:35,400
few engineers at my company and some

00:12:33,810 --> 00:12:38,400
other things we could use it as a

00:12:35,400 --> 00:12:40,770
low-cost digital I of recorder or maybe

00:12:38,400 --> 00:12:42,390
a baseband data recorder and of course

00:12:40,770 --> 00:12:44,580
the Ford work would be adding a lot more

00:12:42,390 --> 00:12:48,480
blocks like the PM demodulation with a

00:12:44,580 --> 00:12:51,390
subcarrier a modulator of course is not

00:12:48,480 --> 00:12:55,260
included yet I'll need a new another

00:12:51,390 --> 00:12:57,660
dongle coding and Doppler how to

00:12:55,260 --> 00:13:00,150
equalizer if I get the demo going I've

00:12:57,660 --> 00:13:04,380
already added that to the flow graph so

00:13:00,150 --> 00:13:06,300
let me see if I can get that running

00:13:04,380 --> 00:13:10,430
really quick I should have a few minutes

00:13:06,300 --> 00:13:10,430
right that was the end of my charts

00:13:12,560 --> 00:13:15,800
careful here

00:13:15,870 --> 00:13:22,570
oh okay alright okay so everyone can see

00:13:19,900 --> 00:13:25,060
it so that's the simple synchronizer

00:13:22,570 --> 00:13:26,860
rate now after the symbol synchronizer

00:13:25,060 --> 00:13:29,410
it's synched up and it's rotating there

00:13:26,860 --> 00:13:32,290
the static one on the bottom is the one

00:13:29,410 --> 00:13:36,340
zero one zero bit for each tip of the

00:13:32,290 --> 00:13:38,170
triangle and the spectrum is there since

00:13:36,340 --> 00:13:40,570
it's a one zero one zero repeating

00:13:38,170 --> 00:13:54,070
pattern only you can see just the spikes

00:13:40,570 --> 00:13:56,380
at 512 kilohertz there okay okay good

00:13:54,070 --> 00:13:59,620
okay here's the rotation you can see

00:13:56,380 --> 00:14:01,780
that one on the vendor modem it was kind

00:13:59,620 --> 00:14:04,090
of more constant and slower this is a

00:14:01,780 --> 00:14:06,550
$90 signal generator it probably doesn't

00:14:04,090 --> 00:14:09,400
have a great oscillator but it still

00:14:06,550 --> 00:14:11,680
works the IQ constellation on the bottom

00:14:09,400 --> 00:14:13,900
is right after the Costas loop so it's

00:14:11,680 --> 00:14:16,270
it's pulled it out gotten rid of the

00:14:13,900 --> 00:14:18,670
residual frequency offset and then the

00:14:16,270 --> 00:14:20,920
one at the top the one that says Abby we

00:14:18,670 --> 00:14:23,410
call them captive baseband equalizers

00:14:20,920 --> 00:14:26,350
you can see that the constellation has

00:14:23,410 --> 00:14:28,450
been tightened up so this is basically

00:14:26,350 --> 00:14:30,490
what I was looking for so I I think that

00:14:28,450 --> 00:14:37,660
was really it so hopefully that was

00:14:30,490 --> 00:14:42,360
useful and worth the wait so that was

00:14:37,660 --> 00:14:42,360

YouTube URL: https://www.youtube.com/watch?v=4iiIcU8Fjv8


