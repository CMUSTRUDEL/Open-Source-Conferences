Title: GRCon19 - RF System Synchronization - LO's by Dan Baker
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	RF System Synchronization - LO's by Dan Baker, Brian Avenell

Multi-channel applications including MIMO, phased array RADAR, and direction finding require channel-to-channel phase and time synchronization. Phase synchronization implies having deterministic relative phase between all of the radio channels. This presentation introduces the various techniques for ensuring phase synchronization between multiple radio channels. Merits between sharing a common low frequency reference signal and distributing the actual LO signals will be discussed.
Captions: 
	00:00:14,469 --> 00:00:19,820
my name is Dan Baker this is my first

00:00:16,939 --> 00:00:22,279
time presenting at gr con second year

00:00:19,820 --> 00:00:24,259
attending some of these slides were

00:00:22,279 --> 00:00:26,329
contributed by my colleague Brian Avenel

00:00:24,259 --> 00:00:28,460
who spoke last year at gar con and

00:00:26,329 --> 00:00:30,829
Henderson on receiver architectures all

00:00:28,460 --> 00:00:32,809
right that's the bad spot right there so

00:00:30,829 --> 00:00:34,850
I'm gonna stand over here so apparently

00:00:32,809 --> 00:00:36,170
it's Hardware day today at gr con

00:00:34,850 --> 00:00:38,090
because we're going from one Hardware

00:00:36,170 --> 00:00:40,309
talk to the next to the next and so I

00:00:38,090 --> 00:00:42,620
apologize for that hopefully I can hold

00:00:40,309 --> 00:00:44,949
your attention for the next 25 to 30

00:00:42,620 --> 00:00:46,790
minutes I tried to keep the slide deck

00:00:44,949 --> 00:00:48,520
somewhat short so it would be time for

00:00:46,790 --> 00:00:51,050
questions we're going to talk all about

00:00:48,520 --> 00:00:53,210
synchronization specifically at the at

00:00:51,050 --> 00:00:56,090
the RF side the local oscillator side I

00:00:53,210 --> 00:00:57,380
am NOT in marketing I am a design

00:00:56,090 --> 00:00:59,390
engineer been at National Instruments

00:00:57,380 --> 00:01:00,950
for a very long time working on

00:00:59,390 --> 00:01:03,980
instrumentation and software-defined

00:01:00,950 --> 00:01:06,200
radios for quite a while now and I'd be

00:01:03,980 --> 00:01:07,880
happy to take questions after this for

00:01:06,200 --> 00:01:08,719
anybody wants to dive in deeper for

00:01:07,880 --> 00:01:11,090
stuff that we're not going to get a

00:01:08,719 --> 00:01:14,180
chance to talk about but let's start

00:01:11,090 --> 00:01:15,920
with some descriptions of some existing

00:01:14,180 --> 00:01:18,229
RF systems and try to frame the problem

00:01:15,920 --> 00:01:19,429
a little bit here so one of the things

00:01:18,229 --> 00:01:21,079
that National Instruments at his

00:01:19,429 --> 00:01:23,149
research gets involved with a lot is

00:01:21,079 --> 00:01:24,859
building these sort of larger systems

00:01:23,149 --> 00:01:27,350
where there's a lot of channels that all

00:01:24,859 --> 00:01:30,200
need to be synchronized well together

00:01:27,350 --> 00:01:32,899
data streaming at very high rates

00:01:30,200 --> 00:01:35,450
real-time processing end-to-end links

00:01:32,899 --> 00:01:37,609
etc and one example of that is this

00:01:35,450 --> 00:01:39,920
massive MIMO system that that we put

00:01:37,609 --> 00:01:42,829
together many years ago as people were

00:01:39,920 --> 00:01:44,630
trying to to research what massive MIMO

00:01:42,829 --> 00:01:46,939
could be at that point in time it was

00:01:44,630 --> 00:01:48,619
just theoretical and running MATLAB Sims

00:01:46,939 --> 00:01:50,029
is one thing but if you can actually do

00:01:48,619 --> 00:01:51,859
an end-to-end link and prove that it

00:01:50,029 --> 00:01:54,499
works that's something else entirely

00:01:51,859 --> 00:01:58,369
different and so so we were able to use

00:01:54,499 --> 00:02:01,929
existing x3 tens here you see four racks

00:01:58,369 --> 00:02:04,310
that are have 128 channels of X 3 tens

00:02:01,929 --> 00:02:05,599
but it's it's not just record and

00:02:04,310 --> 00:02:07,849
playback this is real-time streaming

00:02:05,599 --> 00:02:09,440
through all those chassis x' that you

00:02:07,849 --> 00:02:13,340
see at the bottom and is actually doing

00:02:09,440 --> 00:02:15,190
a real-time and datalink and and this

00:02:13,340 --> 00:02:17,569
system was actually used for prototyping

00:02:15,190 --> 00:02:20,030
full dimensional MIMO or spatial

00:02:17,569 --> 00:02:20,900
multiplexing and so in this case you

00:02:20,030 --> 00:02:22,880
might say well you know what are all

00:02:20,900 --> 00:02:24,860
those antennas for what editing that

00:02:22,880 --> 00:02:26,450
many and what they were trying to do in

00:02:24,860 --> 00:02:27,560
this case these were researchers at a

00:02:26,450 --> 00:02:29,599
particular University

00:02:27,560 --> 00:02:31,069
their versions of this at universities

00:02:29,599 --> 00:02:33,230
around the world who've been publishing

00:02:31,069 --> 00:02:35,030
papers for the last several years based

00:02:33,230 --> 00:02:37,340
on this particular system what they're

00:02:35,030 --> 00:02:41,150
trying to do here is is communicate

00:02:37,340 --> 00:02:43,970
unique messages to multiple users at the

00:02:41,150 --> 00:02:45,680
same time and at the same frequency so

00:02:43,970 --> 00:02:47,269
they weren't multiplexing in the time

00:02:45,680 --> 00:02:48,650
domain they weren't multiplexing in the

00:02:47,269 --> 00:02:51,019
frequency domain they're multiplying

00:02:48,650 --> 00:02:52,700
multiplexing spatially and so there's

00:02:51,019 --> 00:02:54,590
actually a cool YouTube video you can

00:02:52,700 --> 00:02:56,209
watch where they have this system in one

00:02:54,590 --> 00:02:58,370
room and in the next room they have some

00:02:56,209 --> 00:02:59,840
microphone stands set up to represent

00:02:58,370 --> 00:03:01,790
people and they have a omnidirectional

00:02:59,840 --> 00:03:03,860
antenna on each of those microphone

00:03:01,790 --> 00:03:06,350
stands and at the same time and on the

00:03:03,860 --> 00:03:09,019
same frequencies each of those antennas

00:03:06,350 --> 00:03:11,450
was receiving a unique stream of data

00:03:09,019 --> 00:03:14,049
right so that's spatial multiplexing and

00:03:11,450 --> 00:03:16,640
in the way that works is is basically

00:03:14,049 --> 00:03:19,849
through some clever math you can

00:03:16,640 --> 00:03:21,680
transmit similar versions of the same

00:03:19,849 --> 00:03:23,660
signal out all these hundred 28 in

00:03:21,680 --> 00:03:24,860
channels and create a beam right

00:03:23,660 --> 00:03:27,170
beamforming you guys have heard this

00:03:24,860 --> 00:03:28,400
before and beamforming is a key

00:03:27,170 --> 00:03:31,310
technology that will be used in

00:03:28,400 --> 00:03:33,079
millimeter wave five GNR and the idea

00:03:31,310 --> 00:03:34,730
there is they want to form these like

00:03:33,079 --> 00:03:38,000
pencil beams right these super narrow

00:03:34,730 --> 00:03:39,709
beams to be able to to pinpoint all of

00:03:38,000 --> 00:03:42,980
your RF energy in one particular

00:03:39,709 --> 00:03:44,540
direction but to do that these these RF

00:03:42,980 --> 00:03:46,370
channels have to be well aligned both

00:03:44,540 --> 00:03:48,709
when you're transmitting as well as when

00:03:46,370 --> 00:03:50,870
you're receiving in this particular

00:03:48,709 --> 00:03:52,430
example actually the way that the local

00:03:50,870 --> 00:03:54,290
oscillators were aligned was using ref

00:03:52,430 --> 00:03:56,060
clock sharing and later I'll show some

00:03:54,290 --> 00:03:58,340
measurements and you can see it's it's

00:03:56,060 --> 00:03:59,840
not actually the the most precise way to

00:03:58,340 --> 00:04:00,970
do it but it was plenty good enough for

00:03:59,840 --> 00:04:03,200
this application

00:04:00,970 --> 00:04:05,389
another application we can look to this

00:04:03,200 --> 00:04:07,670
one's actually over in our our NIS booth

00:04:05,389 --> 00:04:10,370
over there this is a direction-finding

00:04:07,670 --> 00:04:12,680
example here's the the link to the

00:04:10,370 --> 00:04:14,630
knowledge base on ettus comm and here

00:04:12,680 --> 00:04:16,160
you have four antennas right for

00:04:14,630 --> 00:04:16,880
omnidirectional antennas that are all

00:04:16,160 --> 00:04:19,130
near each other

00:04:16,880 --> 00:04:22,880
hooked up to four channels of some twin

00:04:19,130 --> 00:04:24,650
Rx's that are in a x3 10 and those twin

00:04:22,880 --> 00:04:27,289
are X's in this case are sharing the

00:04:24,650 --> 00:04:29,780
local oscillators and and so you can see

00:04:27,289 --> 00:04:31,520
what would happen here if you're using a

00:04:29,780 --> 00:04:33,889
system like this to attempt to determine

00:04:31,520 --> 00:04:36,380
the angle of arrival of some incoming

00:04:33,889 --> 00:04:38,930
signal well if that if that signal is

00:04:36,380 --> 00:04:41,390
coming in from from the from your right

00:04:38,930 --> 00:04:43,190
then the antenna that's on your right

00:04:41,390 --> 00:04:45,590
is gonna detect that RF energy first

00:04:43,190 --> 00:04:47,540
before the antenna that's on your left

00:04:45,590 --> 00:04:49,460
will it detect it right so you can you

00:04:47,540 --> 00:04:50,930
can get a sense of oh okay the wave

00:04:49,460 --> 00:04:52,040
fronts coming through and then tuck tuck

00:04:50,930 --> 00:04:53,360
tuck tuck tuck tuck tuck that hits all

00:04:52,040 --> 00:04:55,940
the antennas one right after the next

00:04:53,360 --> 00:04:59,000
and so this example uses an algorithm

00:04:55,940 --> 00:05:01,190
called music that basically looks at the

00:04:59,000 --> 00:05:02,960
the time of arrival of when the signal

00:05:01,190 --> 00:05:04,610
hit each of the antennas to figure out o

00:05:02,960 --> 00:05:07,010
the angle of arrival of when that was

00:05:04,610 --> 00:05:08,060
coming from and okay that's pretty

00:05:07,010 --> 00:05:10,520
straightforward it kind of makes sense

00:05:08,060 --> 00:05:12,560
in our heads but what what you can you

00:05:10,520 --> 00:05:15,320
can imagine there as if your RF signals

00:05:12,560 --> 00:05:17,210
are not really well aligned they'll

00:05:15,320 --> 00:05:22,250
throw the whole thing off right because

00:05:17,210 --> 00:05:24,470
what if one of the receivers is is an in

00:05:22,250 --> 00:05:25,730
a second out of time alignment with the

00:05:24,470 --> 00:05:27,590
rest of the receivers that'll totally

00:05:25,730 --> 00:05:29,120
throw off the algorithm because you

00:05:27,590 --> 00:05:30,590
think that the signal arrived earlier

00:05:29,120 --> 00:05:32,840
and it actually arrived later because

00:05:30,590 --> 00:05:34,880
these these receivers are not well

00:05:32,840 --> 00:05:36,230
aligned and so having ello

00:05:34,880 --> 00:05:38,120
synchronization in these types of

00:05:36,230 --> 00:05:39,770
applications is critical and what you

00:05:38,120 --> 00:05:42,350
might hope for is that right out of the

00:05:39,770 --> 00:05:43,700
box all of these RF panels are just

00:05:42,350 --> 00:05:46,460
perfectly aligned you hook up your

00:05:43,700 --> 00:05:48,140
antennas you run the example done but in

00:05:46,460 --> 00:05:50,510
reality you generally need to do some

00:05:48,140 --> 00:05:51,350
type of a calibration step and you see

00:05:50,510 --> 00:05:53,270
this with sort of large

00:05:51,350 --> 00:05:56,750
direction-finding systems where they

00:05:53,270 --> 00:05:59,540
might have a calibration source that is

00:05:56,750 --> 00:06:02,000
transmitted as sort of a equal distance

00:05:59,540 --> 00:06:05,150
from all receiving antennas and then you

00:06:02,000 --> 00:06:06,650
use that to align the x digitally and if

00:06:05,150 --> 00:06:07,910
we have time at the end I'll talk about

00:06:06,650 --> 00:06:12,590
some of the techniques that are used for

00:06:07,910 --> 00:06:14,360
doing digital time alignment in this

00:06:12,590 --> 00:06:16,550
case the reason that the ellos are

00:06:14,360 --> 00:06:18,260
actually shared is to get more coherent

00:06:16,550 --> 00:06:20,420
phase noise between each of the

00:06:18,260 --> 00:06:24,200
receivers and so that gives you more

00:06:20,420 --> 00:06:26,270
precision as to the angle of arrival so

00:06:24,200 --> 00:06:28,100
you can imagine if if these receivers

00:06:26,270 --> 00:06:29,390
are are well aligned and they have

00:06:28,100 --> 00:06:31,160
correlated phase noise you can get a

00:06:29,390 --> 00:06:33,020
pretty good notion as to where the

00:06:31,160 --> 00:06:34,580
signal is coming from if there's

00:06:33,020 --> 00:06:36,350
uncorrelated phase noise between the

00:06:34,580 --> 00:06:38,270
receivers then maybe you don't get quite

00:06:36,350 --> 00:06:40,280
so much precision as to where that is

00:06:38,270 --> 00:06:43,340
coming from right so that's kind of the

00:06:40,280 --> 00:06:44,870
the main theory behind it their third

00:06:43,340 --> 00:06:48,500
example that I thought was a useful

00:06:44,870 --> 00:06:49,910
analogy okay this isn't a traditional RF

00:06:48,500 --> 00:06:52,310
receiver but just think about a nice

00:06:49,910 --> 00:06:53,720
oscilloscope from Tektronix you buy this

00:06:52,310 --> 00:06:55,070
thing you spend a lot of money for it

00:06:53,720 --> 00:06:55,310
you get it out of the box you hook up

00:06:55,070 --> 00:06:57,620
the

00:06:55,310 --> 00:06:59,390
robes you go to probe your circuit you

00:06:57,620 --> 00:07:00,710
look at what's on the screen and you see

00:06:59,390 --> 00:07:02,180
that oh there here's the clock going to

00:07:00,710 --> 00:07:04,820
my flip-flop here's the data going to my

00:07:02,180 --> 00:07:06,620
flip-flop you or I probe the same signal

00:07:04,820 --> 00:07:08,360
you you expect them to be aligned right

00:07:06,620 --> 00:07:10,310
you don't expect that every time you

00:07:08,360 --> 00:07:11,990
boot your oscilloscope there's some

00:07:10,310 --> 00:07:13,640
misalignment between the channels of

00:07:11,990 --> 00:07:16,070
some unknown amount that you have to

00:07:13,640 --> 00:07:17,480
then correct for you just expect that

00:07:16,070 --> 00:07:19,580
out of the box it's aligned but the

00:07:17,480 --> 00:07:21,890
reality is actually if you're if you're

00:07:19,580 --> 00:07:23,300
a high-end signal integrity person then

00:07:21,890 --> 00:07:26,240
you actually probably own one of these

00:07:23,300 --> 00:07:28,880
deskew kits which you can also buy from

00:07:26,240 --> 00:07:30,800
Tektronix not nearly as popular but you

00:07:28,880 --> 00:07:32,510
can use these to probe the exact same

00:07:30,800 --> 00:07:34,460
signal with two of your probes and find

00:07:32,510 --> 00:07:35,900
out that oh these two channels are off

00:07:34,460 --> 00:07:37,550
by twelve picoseconds because there

00:07:35,900 --> 00:07:39,830
might be some mismatch in the probes or

00:07:37,550 --> 00:07:41,960
whatnot and so you use a desk you kit

00:07:39,830 --> 00:07:43,400
like that and then you digitally deskew

00:07:41,960 --> 00:07:45,500
those channels to get them just

00:07:43,400 --> 00:07:47,440
perfectly aligned before you do your you

00:07:45,500 --> 00:07:50,300
know your ddr4 timing measurements right

00:07:47,440 --> 00:07:53,050
so here and again an example of a

00:07:50,300 --> 00:07:55,490
situation where there's some amount of

00:07:53,050 --> 00:07:57,410
out-of-the-box alignment that you just

00:07:55,490 --> 00:07:58,880
sort of expect but if you want the

00:07:57,410 --> 00:08:01,490
ultimate precision you have to put a

00:07:58,880 --> 00:08:04,370
little bit more work into it all right

00:08:01,490 --> 00:08:07,970
so what does it actually mean to be

00:08:04,370 --> 00:08:09,800
synchronized you know work for National

00:08:07,970 --> 00:08:11,600
Instruments it's a it's a big company we

00:08:09,800 --> 00:08:13,970
have a lot of different products that we

00:08:11,600 --> 00:08:15,500
make and so I'll get pulled into these

00:08:13,970 --> 00:08:17,750
meetings sometimes with folks from other

00:08:15,500 --> 00:08:19,640
departments and it'll be a

00:08:17,750 --> 00:08:20,660
synchronization meeting and so okay I'm

00:08:19,640 --> 00:08:22,220
one of the guys who knows things about

00:08:20,660 --> 00:08:23,930
synchronization is great I pulled into

00:08:22,220 --> 00:08:26,270
the meeting and we're 20 minutes into

00:08:23,930 --> 00:08:28,370
the meeting and we're like disagreeing

00:08:26,270 --> 00:08:30,140
on things right and I realize it's

00:08:28,370 --> 00:08:31,040
because you know for me synchronization

00:08:30,140 --> 00:08:33,260
is a picosecond

00:08:31,040 --> 00:08:34,790
or maybe even into the femtosecond range

00:08:33,260 --> 00:08:36,530
and for this guy for the application

00:08:34,790 --> 00:08:38,090
he's working on four you know machine

00:08:36,530 --> 00:08:40,130
condition monitoring whatever like a

00:08:38,090 --> 00:08:42,590
millisecond is pretty good two

00:08:40,130 --> 00:08:45,050
microseconds awesome and so we need to

00:08:42,590 --> 00:08:47,330
have some understanding of sort of what

00:08:45,050 --> 00:08:49,150
level of synchronization is required for

00:08:47,330 --> 00:08:51,410
the application you're trying to build

00:08:49,150 --> 00:08:52,880
so in this talk I'm going to get a

00:08:51,410 --> 00:08:55,010
little bit into the details of things

00:08:52,880 --> 00:08:56,780
that we baked into our products but also

00:08:55,010 --> 00:08:58,310
I try to get into the things that that

00:08:56,780 --> 00:09:02,590
are useful as you're building systems

00:08:58,310 --> 00:09:05,720
out of products such as ours back in the

00:09:02,590 --> 00:09:08,750
1800s there was no notion of

00:09:05,720 --> 00:09:10,640
synchronization early 1800s every town

00:09:08,750 --> 00:09:12,860
set their clock it was noon when the Sun

00:09:10,640 --> 00:09:14,900
was overhead right Suns straight up in

00:09:12,860 --> 00:09:17,660
the sky that's noon and there wasn't a

00:09:14,900 --> 00:09:21,620
need to have synchronized clocks between

00:09:17,660 --> 00:09:23,330
cities because well if it took you two

00:09:21,620 --> 00:09:24,590
hours on horseback to get from one city

00:09:23,330 --> 00:09:27,170
to the next it didn't you didn't really

00:09:24,590 --> 00:09:29,000
know that the two towns clocks were out

00:09:27,170 --> 00:09:30,100
of phase by 15 minutes like nobody knew

00:09:29,000 --> 00:09:34,280
it

00:09:30,100 --> 00:09:38,300
and then the trains came along and so

00:09:34,280 --> 00:09:40,010
with a network between cities you know

00:09:38,300 --> 00:09:42,110
how to have coordinated time of some

00:09:40,010 --> 00:09:44,150
kind there's a link to an article at the

00:09:42,110 --> 00:09:46,340
bottom of the page 1840 Greenwich Mean

00:09:44,150 --> 00:09:48,770
Time was introduced and so the idea

00:09:46,340 --> 00:09:50,180
being that the clocks on the towers and

00:09:48,770 --> 00:09:53,320
the train stations would be synchronized

00:09:50,180 --> 00:09:55,640
to some degree so that you could have

00:09:53,320 --> 00:09:57,200
matching timetables of understanding

00:09:55,640 --> 00:09:59,960
when the train was coming and going and

00:09:57,200 --> 00:10:03,500
not have quite so much chaos on that

00:09:59,960 --> 00:10:05,090
early network so what does it mean to be

00:10:03,500 --> 00:10:08,690
synchronized maybe one minute is good

00:10:05,090 --> 00:10:10,250
enough for train stations maybe one

00:10:08,690 --> 00:10:11,390
second or better when I'm trying to

00:10:10,250 --> 00:10:14,210
click that button to check in for my

00:10:11,390 --> 00:10:15,800
Southwest flight right I got b12 coming

00:10:14,210 --> 00:10:19,070
here I was pretty disappointed to be

00:10:15,800 --> 00:10:21,050
honest like to get into yeas if I can I

00:10:19,070 --> 00:10:24,290
thought I was right on it but I guess I

00:10:21,050 --> 00:10:26,089
didn't didn't work a millisecond is is

00:10:24,290 --> 00:10:27,320
detectable and audio so think about it

00:10:26,089 --> 00:10:29,300
you go to one of these huge Stadium

00:10:27,320 --> 00:10:30,950
events and they've got the big speakers

00:10:29,300 --> 00:10:32,330
in the front right but then as you go

00:10:30,950 --> 00:10:33,589
further back in the stadium there's a

00:10:32,330 --> 00:10:35,480
second-rank speakers and the

00:10:33,589 --> 00:10:37,490
third-ranked of speakers and they they

00:10:35,480 --> 00:10:40,040
delay the electrical signals going to

00:10:37,490 --> 00:10:42,800
the second and third ranks such that the

00:10:40,040 --> 00:10:44,540
the the audio coming out of the speakers

00:10:42,800 --> 00:10:45,980
in the back of the room lines up with

00:10:44,540 --> 00:10:48,140
the wave front that was coming from the

00:10:45,980 --> 00:10:50,150
front of the stadium and if you get that

00:10:48,140 --> 00:10:51,680
off by more than a millisecond you'll

00:10:50,150 --> 00:10:53,390
hear the double click right you'll hear

00:10:51,680 --> 00:10:55,640
the the double beat of that but if it's

00:10:53,390 --> 00:10:58,160
within a millisecond you probably won't

00:10:55,640 --> 00:11:00,050
ever notice right you get to these

00:10:58,160 --> 00:11:01,670
precise control systems robotic

00:11:00,050 --> 00:11:03,860
surgeries you get to a point where a

00:11:01,670 --> 00:11:05,060
microsecond is really really needed and

00:11:03,860 --> 00:11:07,550
then you start to look at well the base

00:11:05,060 --> 00:11:10,370
band in my large RF system maybe maybe a

00:11:07,550 --> 00:11:11,930
nanosecond is good enough and then well

00:11:10,370 --> 00:11:13,550
I want to do some really precise pencil

00:11:11,930 --> 00:11:16,040
beamforming okay you better be down to

00:11:13,550 --> 00:11:18,650
the picosecond right and so so the point

00:11:16,040 --> 00:11:21,020
of this is what's really required for

00:11:18,650 --> 00:11:22,700
your application because if you are

00:11:21,020 --> 00:11:24,470
trying to align everything down to

00:11:22,700 --> 00:11:26,210
picosecond you can do it but it's

00:11:24,470 --> 00:11:28,190
expensive it takes a lot of time it's

00:11:26,210 --> 00:11:30,680
extremely temperature and stable you

00:11:28,190 --> 00:11:32,900
breathe on right and if the thing shifts

00:11:30,680 --> 00:11:34,400
and you know you go for coffee you come

00:11:32,900 --> 00:11:38,240
back and it's all shifted out of phase

00:11:34,400 --> 00:11:39,490
again and so you don't want to you know

00:11:38,240 --> 00:11:41,240
go for too little and say uh

00:11:39,490 --> 00:11:41,960
milliseconds probably good enough for

00:11:41,240 --> 00:11:44,780
then you end up with the beamforming

00:11:41,960 --> 00:11:46,520
that's this wide but also but if you

00:11:44,780 --> 00:11:47,960
really need that precision then it's

00:11:46,520 --> 00:11:51,950
gonna take some extra time and effort

00:11:47,960 --> 00:11:55,850
but it is possible all right really

00:11:51,950 --> 00:11:57,380
basic diagrams um sine waves turns out

00:11:55,850 --> 00:12:02,230
sine waves are very hard to draw in

00:11:57,380 --> 00:12:05,270
PowerPoint did this in the airport in

00:12:02,230 --> 00:12:06,950
another country week before last and I

00:12:05,270 --> 00:12:12,860
was not happy with the results but it

00:12:06,950 --> 00:12:14,300
was close enough imagine here let's hear

00:12:12,860 --> 00:12:16,520
what's a good analogy let's say we have

00:12:14,300 --> 00:12:21,440
two usurps and they're each generating

00:12:16,520 --> 00:12:23,030
50 megahertz signals and you take those

00:12:21,440 --> 00:12:24,890
50 megahertz signals and you hook them

00:12:23,030 --> 00:12:27,020
into us that Tektronix scope I showed

00:12:24,890 --> 00:12:28,400
earlier and you trigger the scope on the

00:12:27,020 --> 00:12:30,110
blue signal and then you look at the

00:12:28,400 --> 00:12:31,580
green signal to see is it lined up with

00:12:30,110 --> 00:12:34,130
the blue signal okay that's the picture

00:12:31,580 --> 00:12:36,290
and if those usurps we're not attempted

00:12:34,130 --> 00:12:37,520
to be synchronized at all then the green

00:12:36,290 --> 00:12:39,800
signal would just be all over the place

00:12:37,520 --> 00:12:41,960
right it's not phase locked it's not

00:12:39,800 --> 00:12:44,240
frequency locked it's not nothing

00:12:41,960 --> 00:12:45,800
but if they were fully lying this is

00:12:44,240 --> 00:12:47,480
what you would see you could zoom in on

00:12:45,800 --> 00:12:48,740
that rising edge just as far as you can

00:12:47,480 --> 00:12:49,880
possibly go on the scope and you're like

00:12:48,740 --> 00:12:51,080
man these things are just perfectly

00:12:49,880 --> 00:12:54,620
aligned so this is kind of the

00:12:51,080 --> 00:12:56,540
definition of fully aligned signals more

00:12:54,620 --> 00:12:58,130
than often the best you can really hope

00:12:56,540 --> 00:13:00,380
for is is something like this where you

00:12:58,130 --> 00:13:02,390
have a fixed offset so I've got a

00:13:00,380 --> 00:13:04,490
synchronized system I don't actually

00:13:02,390 --> 00:13:06,830
know what the difference is between my

00:13:04,490 --> 00:13:09,230
two RF signals but it's fixed it's

00:13:06,830 --> 00:13:10,940
consistent it stays there over time and

00:13:09,230 --> 00:13:13,310
temperature I can measure it and then I

00:13:10,940 --> 00:13:14,930
can adjust for it digitally and this is

00:13:13,310 --> 00:13:16,370
really kind of the best you can hope for

00:13:14,930 --> 00:13:18,800
in most scenarios and then you can

00:13:16,370 --> 00:13:20,840
correct for it digitally if you if

00:13:18,800 --> 00:13:23,540
you're not careful you can end up in a

00:13:20,840 --> 00:13:25,910
situation like this where you have

00:13:23,540 --> 00:13:28,070
aligned signals in their phase locked

00:13:25,910 --> 00:13:30,350
but they're drifting over time somehow

00:13:28,070 --> 00:13:31,790
and what is causing that drift and I'm

00:13:30,350 --> 00:13:33,640
going to show you in a couple of slides

00:13:31,790 --> 00:13:35,870
where that's coming from

00:13:33,640 --> 00:13:36,680
you can also end up in a scenario like

00:13:35,870 --> 00:13:38,720
this where

00:13:36,680 --> 00:13:40,760
you have short-term phasing cohered so

00:13:38,720 --> 00:13:42,970
you have uncorrelated jitter between

00:13:40,760 --> 00:13:47,089
your RF signals on multiple channels

00:13:42,970 --> 00:13:48,800
what causes this and does it matter so

00:13:47,089 --> 00:13:51,800
we'll talk about that in a few slides

00:13:48,800 --> 00:13:53,570
and then really the worst case scenario

00:13:51,800 --> 00:13:55,190
and it's pretty easy to get into this

00:13:53,570 --> 00:13:56,899
this scenario when you're designing a

00:13:55,190 --> 00:13:59,300
product is where you have run to run

00:13:56,899 --> 00:14:01,430
mismatch right you stopped your can you

00:13:59,300 --> 00:14:03,290
radio flow graph you get some coffee you

00:14:01,430 --> 00:14:06,410
come back you run it again and all that

00:14:03,290 --> 00:14:08,060
offset changed what happened what did it

00:14:06,410 --> 00:14:09,890
move right or you shut down for the

00:14:08,060 --> 00:14:11,180
night turn it back on you had done all

00:14:09,890 --> 00:14:13,670
this work to get your system nicely

00:14:11,180 --> 00:14:16,279
calibrated and it's different now why is

00:14:13,670 --> 00:14:19,399
it different now and a lot of this is

00:14:16,279 --> 00:14:20,810
actually due to baseband and following

00:14:19,399 --> 00:14:21,589
this talk my colleague Daniel Jepsen is

00:14:20,810 --> 00:14:23,390
going to talk about baseband

00:14:21,589 --> 00:14:25,550
synchronization turns out there are a

00:14:23,390 --> 00:14:27,680
bunch of ways to mess this up and make

00:14:25,550 --> 00:14:29,060
this occur and there's really a lot of

00:14:27,680 --> 00:14:32,630
things you have to do to make this not

00:14:29,060 --> 00:14:35,000
occur and a lot of is on us at National

00:14:32,630 --> 00:14:36,350
Instruments to make sure that this

00:14:35,000 --> 00:14:37,820
doesn't end up in our products and

00:14:36,350 --> 00:14:40,220
anybody who's designing their own

00:14:37,820 --> 00:14:41,959
software-defined radio but some of it is

00:14:40,220 --> 00:14:44,839
actually important it's a system-level -

00:14:41,959 --> 00:14:47,720
so that'll be in the next talk after the

00:14:44,839 --> 00:14:50,930
break so where do the problems come from

00:14:47,720 --> 00:14:54,370
here's a receiver architecture similar

00:14:50,930 --> 00:14:54,370
to the one that was presented earlier

00:14:54,430 --> 00:14:59,420
your RF signal comes in to the right no

00:14:57,740 --> 00:15:03,260
I did not put the bandpass filter before

00:14:59,420 --> 00:15:05,779
the LNA just like he showed you have a

00:15:03,260 --> 00:15:09,470
low noise amplifier step attenuators

00:15:05,779 --> 00:15:11,510
filter banks either an IQ D mod or a

00:15:09,470 --> 00:15:13,490
single stage or multi stage down

00:15:11,510 --> 00:15:16,220
conversion more filters and ADC

00:15:13,490 --> 00:15:18,380
and so this local oscillator this is a

00:15:16,220 --> 00:15:22,550
this is a key piece of the equation here

00:15:18,380 --> 00:15:24,260
yellow it's local right it's on your

00:15:22,550 --> 00:15:26,630
device that's it's in the name it's

00:15:24,260 --> 00:15:28,640
local it's not a global oscillator it's

00:15:26,630 --> 00:15:32,209
a local oscillator and so it has its own

00:15:28,640 --> 00:15:34,760
phase and that phase is maybe just

00:15:32,209 --> 00:15:36,140
random if you haven't made any attempts

00:15:34,760 --> 00:15:38,209
to synchronize it any way shape or form

00:15:36,140 --> 00:15:39,890
even if you have it's going to be

00:15:38,209 --> 00:15:43,399
relative to that 10 megahertz reference

00:15:39,890 --> 00:15:47,959
that's coming in on on the left side the

00:15:43,399 --> 00:15:49,560
ADC can have its own face and maybe if

00:15:47,959 --> 00:15:52,320
you're using a just E 204

00:15:49,560 --> 00:15:53,430
a DC you have subclass 1 synchronization

00:15:52,320 --> 00:15:55,410
and you think great this is going to

00:15:53,430 --> 00:15:56,730
solve before me but that's actually kind

00:15:55,410 --> 00:15:59,279
of tricky to get that to work especially

00:15:56,730 --> 00:16:01,080
at those higher rates and then that data

00:15:59,279 --> 00:16:03,120
comes into the into the FPGA where you

00:16:01,080 --> 00:16:07,320
have a DD see what's inside the DD see

00:16:03,120 --> 00:16:09,029
an oscillator NCO or or coordinate

00:16:07,320 --> 00:16:11,430
oscillator that's gonna have a face oh

00:16:09,029 --> 00:16:13,050
decimation filters all those have phases

00:16:11,430 --> 00:16:14,760
because they have counters they're

00:16:13,050 --> 00:16:16,350
counting right and so sort of everything

00:16:14,760 --> 00:16:18,600
along the way every time you have a

00:16:16,350 --> 00:16:20,400
divider a clock divider an oscillator of

00:16:18,600 --> 00:16:23,100
any kind it can have its own phase and

00:16:20,400 --> 00:16:24,330
if you haven't taken a sort of great

00:16:23,100 --> 00:16:26,250
lengths to make sure all those phases

00:16:24,330 --> 00:16:29,040
get reset properly to the right spot

00:16:26,250 --> 00:16:31,350
relative to some known epoch time in

00:16:29,040 --> 00:16:33,450
your system then you're gonna end up

00:16:31,350 --> 00:16:37,020
with all sorts of rough things that

00:16:33,450 --> 00:16:39,630
occur so does come from a lot of places

00:16:37,020 --> 00:16:41,820
so what can we do about it first when

00:16:39,630 --> 00:16:43,500
when we're designing devices we can try

00:16:41,820 --> 00:16:46,260
to be really careful like that ten

00:16:43,500 --> 00:16:47,760
megahertz buffer this guy on the top

00:16:46,260 --> 00:16:49,380
left that that first buffer that

00:16:47,760 --> 00:16:50,820
receives that ten megahertz that's

00:16:49,380 --> 00:16:52,920
actually a really critical part right

00:16:50,820 --> 00:16:54,390
there extremely critical because you

00:16:52,920 --> 00:16:55,980
have some something in your system

00:16:54,390 --> 00:16:57,720
that's distributing say a ten megahertz

00:16:55,980 --> 00:16:59,430
reference to all those devices that big

00:16:57,720 --> 00:17:01,920
massive MIMO system we were using octave

00:16:59,430 --> 00:17:03,900
clocks 128 channels of this thing right

00:17:01,920 --> 00:17:04,949
and so you've got to distribute that to

00:17:03,900 --> 00:17:08,579
all of them but then each of these

00:17:04,949 --> 00:17:10,230
buffers receives that ten megahertz what

00:17:08,579 --> 00:17:12,780
if that buffer has significant

00:17:10,230 --> 00:17:14,220
temperature skew right it's it's its

00:17:12,780 --> 00:17:16,199
propagation delay varies over

00:17:14,220 --> 00:17:19,110
temperature that kind of be a big deal

00:17:16,199 --> 00:17:21,420
right so one of the things that we can

00:17:19,110 --> 00:17:23,250
do is try to select very specific

00:17:21,420 --> 00:17:26,010
components components that have low skew

00:17:23,250 --> 00:17:27,630
over temperature very specific

00:17:26,010 --> 00:17:29,850
components like PLL's that can be reset

00:17:27,630 --> 00:17:31,620
properly and so we try to bake that into

00:17:29,850 --> 00:17:35,910
into the devices that we're designing

00:17:31,620 --> 00:17:37,110
now the the converter clocking and

00:17:35,910 --> 00:17:38,700
synchronization the way that you

00:17:37,110 --> 00:17:41,400
distributes a PPS or if you're using

00:17:38,700 --> 00:17:42,770
white rabbit or GPS that's important

00:17:41,400 --> 00:17:45,030
that'll be in the next presentation

00:17:42,770 --> 00:17:46,560
but local oscillators is what I'm going

00:17:45,030 --> 00:17:51,960
to focus on for the rest of this

00:17:46,560 --> 00:17:53,429
presentation so here's the same drawing

00:17:51,960 --> 00:17:55,590
that we had earlier so that local

00:17:53,429 --> 00:17:57,240
oscillator somehow we have to give it a

00:17:55,590 --> 00:18:00,000
global notion right we have to kind of

00:17:57,240 --> 00:18:01,740
make it a global oscillator if we can so

00:18:00,000 --> 00:18:03,330
there's a three different ways you can

00:18:01,740 --> 00:18:05,639
do that one is that you can

00:18:03,330 --> 00:18:07,320
share a common reference clock to all

00:18:05,639 --> 00:18:09,480
the receiver channels or transmitter

00:18:07,320 --> 00:18:11,639
channels in your and your device and

00:18:09,480 --> 00:18:14,309
then have some common way to reset them

00:18:11,639 --> 00:18:16,950
all such that all their counters are

00:18:14,309 --> 00:18:19,739
reset to the exactly the same phase

00:18:16,950 --> 00:18:21,090
that's kind of the nicest and easiest

00:18:19,739 --> 00:18:22,679
way to do it because you don't end up

00:18:21,090 --> 00:18:24,629
with any extra cables at that point in

00:18:22,679 --> 00:18:27,269
time you have your reference clock and

00:18:24,629 --> 00:18:29,970
PBS cables but you don't have to cable

00:18:27,269 --> 00:18:32,489
around local oscillators so it's a

00:18:29,970 --> 00:18:35,039
little bit easier to do it that way the

00:18:32,489 --> 00:18:36,869
next way is is daisy chaining where you

00:18:35,039 --> 00:18:38,220
actually are distributing the local

00:18:36,869 --> 00:18:40,139
oscillator from the first device to the

00:18:38,220 --> 00:18:42,389
second to the third and then the the

00:18:40,139 --> 00:18:45,359
third way is is star distributions let's

00:18:42,389 --> 00:18:46,980
talk about all three of those preference

00:18:45,359 --> 00:18:50,399
clock sharing as I said was using that

00:18:46,980 --> 00:18:51,330
mess of my mo system this is there's a

00:18:50,399 --> 00:18:53,039
few different ways you can get your

00:18:51,330 --> 00:18:54,629
reference clock either from a 10

00:18:53,039 --> 00:18:58,230
megahertz distribution source like an

00:18:54,629 --> 00:18:59,489
octa clock GPS do white rabbit there's

00:18:58,230 --> 00:19:02,220
other ways that you can do it as well

00:18:59,489 --> 00:19:04,379
you have to have pretty specific PLL's

00:19:02,220 --> 00:19:06,359
here you've got to choose local

00:19:04,379 --> 00:19:09,359
oscillator generators that are capable

00:19:06,359 --> 00:19:10,830
of doing this gene highlighted in the

00:19:09,359 --> 00:19:13,259
last presentation about some of the new

00:19:10,830 --> 00:19:15,629
analog devices parts that this is a big

00:19:13,259 --> 00:19:17,489
feature right in there new parts because

00:19:15,629 --> 00:19:21,330
it's it's it's pretty tricky to get this

00:19:17,489 --> 00:19:22,950
right so so what happens when you

00:19:21,330 --> 00:19:24,869
actually try this out these are

00:19:22,950 --> 00:19:28,799
measurements that I took awhile ago in

00:19:24,869 --> 00:19:31,769
my lab on a couple of NI instruments not

00:19:28,799 --> 00:19:33,299
actually on on x3 10s but I took the

00:19:31,769 --> 00:19:35,730
same measurement on x3 tens and it was

00:19:33,299 --> 00:19:37,799
it was pretty similar and what you see

00:19:35,730 --> 00:19:39,600
here is kind of point out some of the

00:19:37,799 --> 00:19:41,909
axes because I'm sure it's hard to see

00:19:39,600 --> 00:19:45,570
in the back of the room this is face

00:19:41,909 --> 00:19:47,700
drift on the on the y axis here and this

00:19:45,570 --> 00:19:50,369
is at 3.6 gigahertz center frequency

00:19:47,700 --> 00:19:52,320
this is time on the x axis is this over

00:19:50,369 --> 00:19:55,230
about an hour and a half I've seen about

00:19:52,320 --> 00:19:57,119
five and a half degrees of a phase drift

00:19:55,230 --> 00:19:58,529
and then you also see that kind of

00:19:57,119 --> 00:20:01,649
vertically it looks pretty noisy right

00:19:58,529 --> 00:20:03,809
that noise so that sort of 1 degrees ish

00:20:01,649 --> 00:20:06,509
of noise that's that's uncorrelated

00:20:03,809 --> 00:20:09,269
phase noise between the devices that's

00:20:06,509 --> 00:20:11,999
that uncorrelated jitter and then that

00:20:09,269 --> 00:20:14,399
sort of 5 and 1/2 degrees of drift that

00:20:11,999 --> 00:20:17,250
you see this is over about 10 or 20

00:20:14,399 --> 00:20:19,919
degrees celsius of temperature change

00:20:17,250 --> 00:20:21,509
and that's that's kind of a lot it may

00:20:19,919 --> 00:20:23,610
not matter for your application maybe

00:20:21,509 --> 00:20:25,169
that's that's good enough it's going to

00:20:23,610 --> 00:20:27,690
take that narrow beam and it's going to

00:20:25,169 --> 00:20:29,700
make it a little bit wider right and a

00:20:27,690 --> 00:20:32,639
little bit jittery but maybe that's

00:20:29,700 --> 00:20:37,289
perfectly fine for the application that

00:20:32,639 --> 00:20:39,509
you care about and let me go back up one

00:20:37,289 --> 00:20:42,450
here you see that each of these devices

00:20:39,509 --> 00:20:44,639
has their own PLL and so each pol has

00:20:42,450 --> 00:20:46,139
its own phase noise profile right

00:20:44,639 --> 00:20:48,269
they're gonna be uncorrelated to each

00:20:46,139 --> 00:20:50,940
other so we've we've aligned the phases

00:20:48,269 --> 00:20:53,190
of these local oscillators we haven't

00:20:50,940 --> 00:20:55,500
done anything to to make them coherent

00:20:53,190 --> 00:20:56,669
to each other in this case but it is

00:20:55,500 --> 00:21:00,539
pretty nice because you only have to

00:20:56,669 --> 00:21:02,370
distribute these two signals part of the

00:21:00,539 --> 00:21:03,629
reason that that drift occurs is because

00:21:02,370 --> 00:21:05,610
you're distributing a ten megahertz

00:21:03,629 --> 00:21:07,500
reference clock and then that's

00:21:05,610 --> 00:21:09,840
effectively getting multiplied up to 3.6

00:21:07,500 --> 00:21:11,190
gigahertz right and so I remember how I

00:21:09,840 --> 00:21:13,320
said that first buffer is super

00:21:11,190 --> 00:21:15,330
important so the ten megahertz reference

00:21:13,320 --> 00:21:16,799
clock has some slope to it and of course

00:21:15,330 --> 00:21:18,750
it's gonna have a little bit of noise

00:21:16,799 --> 00:21:20,100
voltage noise on it because it's a

00:21:18,750 --> 00:21:22,710
signal that's gonna have some voltage

00:21:20,100 --> 00:21:24,720
noise well when you when that the slope

00:21:22,710 --> 00:21:26,610
of that goes through the threshold of

00:21:24,720 --> 00:21:27,870
that input buffer that voltage noise is

00:21:26,610 --> 00:21:31,799
going to get translated a time noise

00:21:27,870 --> 00:21:33,059
right and that time noise is basically

00:21:31,799 --> 00:21:34,169
gonna where your drift is going to come

00:21:33,059 --> 00:21:36,240
through and there's some other slides

00:21:34,169 --> 00:21:38,100
from from Brian Avenel they kind of walk

00:21:36,240 --> 00:21:39,720
through all of it in the end you can

00:21:38,100 --> 00:21:40,889
make some assumptions and do some maths

00:21:39,720 --> 00:21:43,860
and you come up with oh yeah this is

00:21:40,889 --> 00:21:46,980
like tens of degrees at six gigahertz so

00:21:43,860 --> 00:21:49,200
how else can we do this another approach

00:21:46,980 --> 00:21:50,820
is daisy chaining so what you see in

00:21:49,200 --> 00:21:52,440
this picture here is the the first

00:21:50,820 --> 00:21:54,539
device the first transceiver is

00:21:52,440 --> 00:21:57,450
generating its own local oscillator and

00:21:54,539 --> 00:21:59,700
then exporting that to the second device

00:21:57,450 --> 00:22:01,259
that imports it who then exports it to

00:21:59,700 --> 00:22:03,990
the third device who imports it and

00:22:01,259 --> 00:22:06,120
exports it you go fantastic I just need

00:22:03,990 --> 00:22:08,399
one extra cable between devices here and

00:22:06,120 --> 00:22:11,789
now have correlated phase noise right oh

00:22:08,399 --> 00:22:13,409
that's great well it does get a little

00:22:11,789 --> 00:22:14,879
bit harder the further you go down the

00:22:13,409 --> 00:22:16,919
chain because you now end up having

00:22:14,879 --> 00:22:19,940
quite a bit of cable between the first

00:22:16,919 --> 00:22:23,730
device and in the last device and that

00:22:19,940 --> 00:22:25,830
cable has a generally unless you buy

00:22:23,730 --> 00:22:27,570
super expensive cable or they're really

00:22:25,830 --> 00:22:29,700
really really short cables there's a

00:22:27,570 --> 00:22:30,470
there's a property called the Teflon

00:22:29,700 --> 00:22:33,320
knee

00:22:30,470 --> 00:22:35,000
problem we're sort of near room

00:22:33,320 --> 00:22:36,710
temperature the properties of Teflon

00:22:35,000 --> 00:22:39,139
sort of changed dramatically there's an

00:22:36,710 --> 00:22:41,509
e in the curve and if you're kind of

00:22:39,139 --> 00:22:43,580
near that knee it doesn't take too much

00:22:41,509 --> 00:22:45,169
of a temperature change before you

00:22:43,580 --> 00:22:46,879
actually get somewhat significant

00:22:45,169 --> 00:22:49,669
propagation delay and so basically as

00:22:46,879 --> 00:22:51,500
you go down the line here you your your

00:22:49,669 --> 00:22:54,559
your face noise becomes less and less

00:22:51,500 --> 00:22:56,450
correlated and and your drift becomes

00:22:54,559 --> 00:22:58,340
sort of worse and worse so the first few

00:22:56,450 --> 00:23:00,409
devices in the chain are alright but as

00:22:58,340 --> 00:23:02,570
you have a ton of devices daisy chain

00:23:00,409 --> 00:23:03,950
like this it's going to get sort of

00:23:02,570 --> 00:23:05,480
worse and worse as you as you head down

00:23:03,950 --> 00:23:07,820
the chain so this is good for a small

00:23:05,480 --> 00:23:09,159
number of channels like this for channel

00:23:07,820 --> 00:23:10,909
direction-finding

00:23:09,159 --> 00:23:13,549
application that we have over in the

00:23:10,909 --> 00:23:15,919
booth and this is typically what is done

00:23:13,549 --> 00:23:17,809
in a high-end instrumentation so it took

00:23:15,919 --> 00:23:19,809
some measurements this is just for two

00:23:17,809 --> 00:23:23,450
devices that were daisy chained together

00:23:19,809 --> 00:23:25,490
and this is the same 3.6 gigahertz same

00:23:23,450 --> 00:23:28,580
axis so now you're getting about one and

00:23:25,490 --> 00:23:30,889
a half degrees of drift over again at

00:23:28,580 --> 00:23:33,259
ten to twenty degrees Celsius change and

00:23:30,889 --> 00:23:35,149
sort of point ones of degrees of noise

00:23:33,259 --> 00:23:38,090
of short-term coherency so you see this

00:23:35,149 --> 00:23:39,830
picture is way more precise than the

00:23:38,090 --> 00:23:42,230
previous one I showed right it's

00:23:39,830 --> 00:23:44,629
significantly better but this is just

00:23:42,230 --> 00:23:46,730
for one stage and the daisy chain so if

00:23:44,629 --> 00:23:48,200
you do a third or fourth fifth or sixth

00:23:46,730 --> 00:23:50,269
seventh and eighth the tenth one

00:23:48,200 --> 00:23:50,720
hundredth it gets worse and worse and

00:23:50,269 --> 00:23:53,620
worse

00:23:50,720 --> 00:23:56,659
as you go so what do we do about that

00:23:53,620 --> 00:23:57,860
there there is one more thing you can do

00:23:56,659 --> 00:24:01,789
to make it a little bit better

00:23:57,860 --> 00:24:03,830
oh sorry forgot this slide and so this

00:24:01,789 --> 00:24:05,330
this is a graph that shows a little bit

00:24:03,830 --> 00:24:07,909
of the properties of those delayed

00:24:05,330 --> 00:24:10,009
cables and sort of the longer you get

00:24:07,909 --> 00:24:12,009
down the chain and the higher frequency

00:24:10,009 --> 00:24:14,360
you're at sort of the worse it gets so

00:24:12,009 --> 00:24:16,909
one more approach you can take is is

00:24:14,360 --> 00:24:18,679
star distribution and this is something

00:24:16,909 --> 00:24:21,019
that my colleague Brian Avenel built

00:24:18,679 --> 00:24:23,419
into the new n 320 and in 321 products

00:24:21,019 --> 00:24:25,039
that we make in National Instruments and

00:24:23,419 --> 00:24:26,210
in fact all these SMAS that you see

00:24:25,039 --> 00:24:29,120
across the top up here on the top right

00:24:26,210 --> 00:24:31,370
it's a whole ton of SMAS in the N 321

00:24:29,120 --> 00:24:35,059
and what those are is a big splitter

00:24:31,370 --> 00:24:35,870
Network for distributing loz in a really

00:24:35,059 --> 00:24:38,240
cool way

00:24:35,870 --> 00:24:40,909
turns out this works extremely well so

00:24:38,240 --> 00:24:43,399
the first device in the chain exports

00:24:40,909 --> 00:24:44,090
its local oscillator which then goes

00:24:43,399 --> 00:24:46,220
through a split

00:24:44,090 --> 00:24:48,320
network which goes back to itself as

00:24:46,220 --> 00:24:51,789
well as to other devices in the chain

00:24:48,320 --> 00:24:54,799
and then you can daisy-chain

00:24:51,789 --> 00:24:57,110
these groups together so you end up with

00:24:54,799 --> 00:24:59,120
somewhat of a hybrid network of mostly

00:24:57,110 --> 00:25:02,270
star distributed and somewhat daisy

00:24:59,120 --> 00:25:04,159
chained and this is really useful for

00:25:02,270 --> 00:25:05,960
large systems where you need sort of

00:25:04,159 --> 00:25:08,890
precise alignment and nice correlated

00:25:05,960 --> 00:25:11,330
phase noise over a whole lot of channels

00:25:08,890 --> 00:25:12,529
I'll keep talking louder to see if I can

00:25:11,330 --> 00:25:18,220
outpace the guys that were there in the

00:25:12,529 --> 00:25:21,799
demo room all right I understand I'm

00:25:18,220 --> 00:25:25,090
known for messing things up so I will

00:25:21,799 --> 00:25:29,990
try to get done here in seven minutes

00:25:25,090 --> 00:25:32,210
maybe six all right so so what do you do

00:25:29,990 --> 00:25:33,380
here so you take some measurements and

00:25:32,210 --> 00:25:37,100
these are measurements that were taken

00:25:33,380 --> 00:25:38,809
on the N 320 and 321 this is actually a

00:25:37,100 --> 00:25:40,159
worst-case measurements worse than the

00:25:38,809 --> 00:25:43,520
ones I showed on the previous slides

00:25:40,159 --> 00:25:46,970
this is over 45 degrees C of variability

00:25:43,520 --> 00:25:49,970
in temperature and I was on 6 gigahertz

00:25:46,970 --> 00:25:53,059
instead of 3.6 and in here you see it's

00:25:49,970 --> 00:25:56,000
actually about just over 1 just under 1

00:25:53,059 --> 00:25:58,159
degrees of phase drift so this scale is

00:25:56,000 --> 00:26:00,980
actually a lower scale this is 1.2

00:25:58,159 --> 00:26:03,559
degrees on the on the y axis here so

00:26:00,980 --> 00:26:05,450
under one degree of a phase drift over

00:26:03,559 --> 00:26:07,309
45 degrees C temperature so that's

00:26:05,450 --> 00:26:08,029
really incredible like that's that's

00:26:07,309 --> 00:26:09,440
pretty tight

00:26:08,029 --> 00:26:11,750
that's going to keep that pencil beam

00:26:09,440 --> 00:26:13,090
right really nice and well-defined it's

00:26:11,750 --> 00:26:16,100
going to keep your direction-finding

00:26:13,090 --> 00:26:19,610
algorithm pointed in the nice direction

00:26:16,100 --> 00:26:23,270
there and the short-term incoherency is

00:26:19,610 --> 00:26:25,820
is pretty low it's extremely low so

00:26:23,270 --> 00:26:27,799
there's a knowledge base on edit com I'd

00:26:25,820 --> 00:26:31,070
encourage you to to go there immediate

00:26:27,799 --> 00:26:33,230
it's got the the UHD example code the

00:26:31,070 --> 00:26:36,860
direction finding application has the

00:26:33,230 --> 00:26:39,080
new radio code on it as well and what

00:26:36,860 --> 00:26:41,029
you can see in this n 321 diagram is

00:26:39,080 --> 00:26:43,940
that each of the receivers and

00:26:41,029 --> 00:26:46,549
transmitters has an Associated L o

00:26:43,940 --> 00:26:48,799
distribution section where you can

00:26:46,549 --> 00:26:50,870
export the internal l o you can import

00:26:48,799 --> 00:26:53,899
an external L oh and there's a 1 to 4

00:26:50,870 --> 00:26:56,120
splitter and an amplifier and this

00:26:53,899 --> 00:26:57,660
allows you to do things like put an end

00:26:56,120 --> 00:27:00,630
320 in and n 321 together

00:26:57,660 --> 00:27:03,570
to build a very nice tightly coupled 4x4

00:27:00,630 --> 00:27:06,660
system or put several of those together

00:27:03,570 --> 00:27:08,610
to build an 8x8 system or put several of

00:27:06,660 --> 00:27:10,890
those together to build a 32 by 32

00:27:08,610 --> 00:27:13,380
system or put several of those together

00:27:10,890 --> 00:27:15,810
to build 128 by 128 system right and so

00:27:13,380 --> 00:27:17,100
this is a it's a in my opinion it's a

00:27:15,810 --> 00:27:20,670
pretty cool advancement in that

00:27:17,100 --> 00:27:22,710
mid-range SDR of of a feature that just

00:27:20,670 --> 00:27:24,480
hasn't been there on existing mid-range

00:27:22,710 --> 00:27:26,610
STRs I think this will unlock some new

00:27:24,480 --> 00:27:30,600
application areas and I'm really excited

00:27:26,610 --> 00:27:33,030
to see what people do with it again it's

00:27:30,600 --> 00:27:34,890
if you need that level of precision in

00:27:33,030 --> 00:27:36,900
how you're aligning your ellos for these

00:27:34,890 --> 00:27:38,610
large systems but but it'll give you the

00:27:36,900 --> 00:27:40,200
opportunity to try that out so the

00:27:38,610 --> 00:27:43,380
knowledge base is on a Descamps i

00:27:40,200 --> 00:27:45,450
recommend hitting that up I'm gonna

00:27:43,380 --> 00:27:47,460
probably skip this digital compensation

00:27:45,450 --> 00:27:49,350
section I really didn't have I knew I

00:27:47,460 --> 00:27:51,600
wasn't gonna have time for it all of it

00:27:49,350 --> 00:27:53,820
to say is there are a few different ways

00:27:51,600 --> 00:27:56,160
that you can compensate for delays when

00:27:53,820 --> 00:27:57,330
you when you build your system out and

00:27:56,160 --> 00:27:59,730
you go okay I measured it and sure

00:27:57,330 --> 00:28:01,620
enough I'm off by you know 15 Pico

00:27:59,730 --> 00:28:03,300
seconds or I'm off by one and a half

00:28:01,620 --> 00:28:04,110
degrees at a particular frequency what

00:28:03,300 --> 00:28:06,690
do you do about it

00:28:04,110 --> 00:28:10,500
you can adjust for that in the phase of

00:28:06,690 --> 00:28:14,700
your NCOs you can do a phase rotation

00:28:10,500 --> 00:28:17,190
with a an IQ multiplication and if you

00:28:14,700 --> 00:28:19,020
need to do it a physical time delay not

00:28:17,190 --> 00:28:22,020
a phase delay but a time delay of course

00:28:19,020 --> 00:28:24,060
you can use single steps of a clock

00:28:22,020 --> 00:28:25,950
inside the FPGA as an example but that's

00:28:24,060 --> 00:28:29,100
not very precise those are core steps

00:28:25,950 --> 00:28:31,560
and the other cool way to do this is

00:28:29,100 --> 00:28:34,800
using an allpass F IR filter right where

00:28:31,560 --> 00:28:37,470
you you basically have a fractional

00:28:34,800 --> 00:28:39,450
group delay on an allpass F IR filter so

00:28:37,470 --> 00:28:41,310
when you take that continuous time write

00:28:39,450 --> 00:28:42,990
an all pass filter and the frequency

00:28:41,310 --> 00:28:44,670
domain is going to be a sync response in

00:28:42,990 --> 00:28:46,710
the time domain and so if you have a

00:28:44,670 --> 00:28:48,330
continuous time sync response and you

00:28:46,710 --> 00:28:51,030
want to sample that to create a discrete

00:28:48,330 --> 00:28:53,850
time sync response to make F IR taps out

00:28:51,030 --> 00:28:56,070
of it you don't have to Center where you

00:28:53,850 --> 00:28:57,930
sample those points you could move those

00:28:56,070 --> 00:28:59,430
points ever so slightly to the right or

00:28:57,930 --> 00:29:01,650
to the left and you can get a fractional

00:28:59,430 --> 00:29:02,580
group delay out of it and if that made

00:29:01,650 --> 00:29:04,560
sense to you that means you probably

00:29:02,580 --> 00:29:06,510
already know how to do it if it didn't

00:29:04,560 --> 00:29:07,860
I'm sorry I decided there wasn't gonna

00:29:06,510 --> 00:29:09,030
be enough time to fully cover it in

00:29:07,860 --> 00:29:11,340
there but if you want to talk about that

00:29:09,030 --> 00:29:12,960
come find me afterwards

00:29:11,340 --> 00:29:14,929
so to try to make up time for our break

00:29:12,960 --> 00:29:17,610
I'm going to end here all of this to say

00:29:14,929 --> 00:29:18,899
there's a lot of things to take into

00:29:17,610 --> 00:29:20,820
consideration when you're building a

00:29:18,899 --> 00:29:23,399
system like this and I showed the yellow

00:29:20,820 --> 00:29:25,259
aspects of it but none of this makes any

00:29:23,399 --> 00:29:27,990
difference if your base bands jumping

00:29:25,259 --> 00:29:29,190
around and so Daniel Jepsen will talk

00:29:27,990 --> 00:29:29,610
about that in the session after the

00:29:29,190 --> 00:29:30,840
break

00:29:29,610 --> 00:29:32,039
hopefully you can put the two of them

00:29:30,840 --> 00:29:35,039
together and they'll be useful will

00:29:32,039 --> 00:29:38,639
continue the day of hardware here at gr

00:29:35,039 --> 00:29:40,499
Con and the one thing I want to leave

00:29:38,639 --> 00:29:42,120
you with is it's important to understand

00:29:40,499 --> 00:29:43,860
the needs of your system not over

00:29:42,120 --> 00:29:45,090
designed not under design I think you

00:29:43,860 --> 00:29:48,149
have a lot of tools at your disposal

00:29:45,090 --> 00:29:52,110
when it comes to existing hardware and

00:29:48,149 --> 00:29:54,210
and what you can build system wise we'd

00:29:52,110 --> 00:29:56,399
love to help feel free to come chat with

00:29:54,210 --> 00:29:57,929
me over the break or any other time at

00:29:56,399 --> 00:29:59,999
the conference and I will take questions

00:29:57,929 --> 00:30:04,340
if you have any but I bet people are

00:29:59,999 --> 00:30:04,340
tired sitting thank you very much Dan

00:30:04,430 --> 00:30:07,890

YouTube URL: https://www.youtube.com/watch?v=6TOU0f039g8


