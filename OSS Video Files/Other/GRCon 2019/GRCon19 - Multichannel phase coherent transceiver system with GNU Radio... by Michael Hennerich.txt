Title: GRCon19 - Multichannel phase coherent transceiver system with GNU Radio... by Michael Hennerich
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	Multichannel phase coherent transceiver system with GNU Radio interface by Michael Hennerich

Many applications need multiple channels of phase and frequency synchronization and coherency. Applications like Direction of Arrival (DOA) accuracy are directly related to the number of channels and the synchronization between these channels. This presentation will look at these applications and look at how they can be solved with a 4 channel 200MHz wide phase coherent system with a GNU Radio interface.

After this introduction we will then focus on the concepts, techniques and features being used which enables this system to scale up to N Rx and Tx channels. While ensuring end-to-end deterministic latency and RF frequency and phase coherent synchronization. We will cover the technical aspects and challenges of clocking trees, multichip synchronization, JESD204B interface link synchronization, integrated LO and phase synchronization, all available on this production ready hardware for prototyping and systems development.
Captions: 
	00:00:14,350 --> 00:00:20,170
ladies and gentlemen my name is Michael

00:00:17,050 --> 00:00:23,770
Kennedy I work for analog devices in the

00:00:20,170 --> 00:00:26,050
system development group I'm also a

00:00:23,770 --> 00:00:28,750
licensed amateur for almost 30 years now

00:00:26,050 --> 00:00:31,320
so it's kind of proud to stand here and

00:00:28,750 --> 00:00:34,060
talk to this well-educated crowd here

00:00:31,320 --> 00:00:36,010
today I want to focus on a multi-channel

00:00:34,060 --> 00:00:39,130
phase coherent transceiver system with a

00:00:36,010 --> 00:00:42,790
radio interface so yesterday there were

00:00:39,130 --> 00:00:44,500
some good talks we learned about hello

00:00:42,790 --> 00:00:46,090
synchronization and basement

00:00:44,500 --> 00:00:49,500
synchronization and how important those

00:00:46,090 --> 00:00:52,930
things are in a multi-channel systems

00:00:49,500 --> 00:01:01,920
today I want to focus a little bit on

00:00:52,930 --> 00:01:01,920
oh we're not seeing the presentation why

00:01:03,210 --> 00:01:08,130
it's like sure here we go

00:01:08,310 --> 00:01:13,240
today I want to focus a little bit on

00:01:10,630 --> 00:01:19,150
how it's being practically implemented

00:01:13,240 --> 00:01:20,950
on a system I have lots of light so in

00:01:19,150 --> 00:01:23,950
the interest of time I want to skip some

00:01:20,950 --> 00:01:26,260
of them so but I wanted to interest art

00:01:23,950 --> 00:01:28,450
with where our multi-channel phase

00:01:26,260 --> 00:01:30,670
Korean systems are important and the

00:01:28,450 --> 00:01:32,920
first thing that came to my mind is

00:01:30,670 --> 00:01:34,870
basically a radar system there are kind

00:01:32,920 --> 00:01:40,060
of different writers but phased array

00:01:34,870 --> 00:01:43,180
techniques are pretty common so a

00:01:40,060 --> 00:01:45,220
traditional FM CW radio system requires

00:01:43,180 --> 00:01:47,590
a lot of bandwidth which is typically

00:01:45,220 --> 00:01:50,740
not that much applicable to integrated

00:01:47,590 --> 00:01:52,990
RF transceivers but next gen my mobile

00:01:50,740 --> 00:01:56,680
face my Morrow systems are very well

00:01:52,990 --> 00:01:58,060
suited for integrated transceivers so

00:01:56,680 --> 00:02:00,909
what are the important system factors

00:01:58,060 --> 00:02:02,560
slow phase noise high bandwidth and of

00:02:00,909 --> 00:02:09,549
course synchronization between channels

00:02:02,560 --> 00:02:11,890
also dynamic range is very important so

00:02:09,549 --> 00:02:14,549
I mentioned face array I want to give a

00:02:11,890 --> 00:02:18,459
brief introduction what phased array is

00:02:14,549 --> 00:02:20,860
so radar system utilize a an array of

00:02:18,459 --> 00:02:23,739
elements there's either analog digital

00:02:20,860 --> 00:02:27,040
phase shifters which provide directional

00:02:23,739 --> 00:02:27,849
energy this eliminates mechanical

00:02:27,040 --> 00:02:31,840
rotation

00:02:27,849 --> 00:02:33,700
of the antenna and typically each of

00:02:31,840 --> 00:02:36,040
these channels in this multi-channel

00:02:33,700 --> 00:02:38,769
system processes a different phase so

00:02:36,040 --> 00:02:43,540
you can steer the way from out of the

00:02:38,769 --> 00:02:46,450
antenna at a certain angle so there are

00:02:43,540 --> 00:02:49,180
two main beam forming techniques one is

00:02:46,450 --> 00:02:51,099
analog informing where the phase

00:02:49,180 --> 00:02:55,000
shifting happens in the analog domain

00:02:51,099 --> 00:02:58,209
and typically uses discrete phase

00:02:55,000 --> 00:03:00,669
shifters the other one which is becoming

00:02:58,209 --> 00:03:02,200
more and more popular is digital

00:03:00,669 --> 00:03:04,900
beamforming where the beamforming

00:03:02,200 --> 00:03:06,879
happens in the digital domain by using

00:03:04,900 --> 00:03:10,000
numerical controlled oscillators or

00:03:06,879 --> 00:03:13,180
digital filters the the main improvement

00:03:10,000 --> 00:03:15,129
or the main advantage is the multi beam

00:03:13,180 --> 00:03:16,750
capability of such a system so you can

00:03:15,129 --> 00:03:19,060
steer out multiple beams at the same

00:03:16,750 --> 00:03:20,290
time and you can steer them really

00:03:19,060 --> 00:03:22,419
really fast

00:03:20,290 --> 00:03:25,299
there are also some mixtures between

00:03:22,419 --> 00:03:27,099
analog and digital beamforming which is

00:03:25,299 --> 00:03:28,569
called like hybrid beam forming where

00:03:27,099 --> 00:03:31,150
you basically use both techniques the

00:03:28,569 --> 00:03:33,699
same time here's an example of an

00:03:31,150 --> 00:03:37,359
analogue beam former this is a four

00:03:33,699 --> 00:03:40,090
channel one it can just face between 0

00:03:37,359 --> 00:03:42,909
and 360 degrees with some certain

00:03:40,090 --> 00:03:45,400
resolution and you can also store some

00:03:42,909 --> 00:03:49,889
settings in a very fast hopping memory

00:03:45,400 --> 00:03:49,889
and you can recall it very very fast so

00:03:50,250 --> 00:03:54,609
there are phased array dynamic ranges

00:03:52,689 --> 00:03:56,909
various improvements that can happen so

00:03:54,609 --> 00:04:01,870
after Eric's phase and amplitude

00:03:56,909 --> 00:04:04,959
calibrations the system is time and

00:04:01,870 --> 00:04:06,939
amplitude aligned and the system

00:04:04,959 --> 00:04:09,609
performance is better than an individual

00:04:06,939 --> 00:04:11,439
receiver so when the number of channels

00:04:09,609 --> 00:04:14,109
are being doubled the effective number

00:04:11,439 --> 00:04:17,590
of bits are also doubled and the noise

00:04:14,109 --> 00:04:19,840
spectral density is lowered and also if

00:04:17,590 --> 00:04:23,949
the channel spurious contribution are

00:04:19,840 --> 00:04:26,500
uncorrelated the spurious do not add but

00:04:23,949 --> 00:04:29,280
the noise floor lowers so we can see a

00:04:26,500 --> 00:04:32,289
10 log and improve in the dynamic range

00:04:29,280 --> 00:04:36,389
similar things apply for the TX as well

00:04:32,289 --> 00:04:41,529
so if the TX amplitude is face

00:04:36,389 --> 00:04:46,419
calibrated the cheek signals can come

00:04:41,529 --> 00:04:48,909
combines constructively spurious system

00:04:46,419 --> 00:04:51,849
phase noise improvements can be achieved

00:04:48,909 --> 00:04:54,939
but those improvements rely on

00:04:51,849 --> 00:04:57,849
uncorrelated channels which typically

00:04:54,939 --> 00:05:00,809
require several PLL sources to the sub

00:04:57,849 --> 00:05:03,219
arrays so the noise do not add up

00:05:00,809 --> 00:05:06,429
constructively so if they are

00:05:03,219 --> 00:05:09,309
uncorrelated we can also see a 10 lakh

00:05:06,429 --> 00:05:11,649
and phase noise improvement which leads

00:05:09,309 --> 00:05:15,489
that the shell throughput can be

00:05:11,649 --> 00:05:17,589
increased so how how do to make those

00:05:15,489 --> 00:05:19,299
channels being uncorrelated there is an

00:05:17,589 --> 00:05:21,129
interesting application note it's called

00:05:19,299 --> 00:05:22,209
RF transceiver as a naval force bursty

00:05:21,129 --> 00:05:25,449
correlation in digital beamforming

00:05:22,209 --> 00:05:29,139
phased array and the main idea behind

00:05:25,449 --> 00:05:31,419
this is in each of your channels you

00:05:29,139 --> 00:05:34,629
offset your local oscillator by a

00:05:31,419 --> 00:05:37,089
certain offset and then you correct for

00:05:34,629 --> 00:05:39,819
that offset in the digital domain using

00:05:37,089 --> 00:05:44,349
a numerical controlled oscillator and to

00:05:39,819 --> 00:05:47,259
the right you see if they are if they're

00:05:44,349 --> 00:05:49,119
not correlated be correlated they

00:05:47,259 --> 00:05:51,459
basically add up the spores and the

00:05:49,119 --> 00:05:56,769
images and if they are uncorrelated they

00:05:51,459 --> 00:05:59,229
they don't add so what I mentioned

00:05:56,769 --> 00:06:00,819
integrated transceivers what other was

00:05:59,229 --> 00:06:03,579
it's basically a single chip which

00:06:00,819 --> 00:06:06,699
contains full Oryx and the full tEEX

00:06:03,579 --> 00:06:10,239
path with ADC stacks down converters

00:06:06,699 --> 00:06:13,869
mixers filters gain amplifiers and so

00:06:10,239 --> 00:06:16,059
forth it's often a microcontroller on

00:06:13,869 --> 00:06:21,519
chip which does a lot of additional

00:06:16,059 --> 00:06:24,429
calibrations so how does integration

00:06:21,519 --> 00:06:27,129
lead to a smaller footprint so these

00:06:24,429 --> 00:06:31,149
integrated transceivers can enable lower

00:06:27,129 --> 00:06:33,549
size weight and power SDR systems by

00:06:31,149 --> 00:06:38,379
having multiple channels on the same

00:06:33,549 --> 00:06:40,239
chip and that leads to that they can be

00:06:38,379 --> 00:06:42,369
used as a backbone in in face array

00:06:40,239 --> 00:06:44,619
systems so I mentioned the built-in

00:06:42,369 --> 00:06:45,989
calibrations through just to mention a

00:06:44,619 --> 00:06:48,579
few there's a digital pre-distortion

00:06:45,989 --> 00:06:50,559
available on some ships there's also

00:06:48,579 --> 00:06:52,659
some spurious rejection algorithms and

00:06:50,559 --> 00:06:54,409
of course this quadrature correction a

00:06:52,659 --> 00:07:00,080
low leakage correct

00:06:54,409 --> 00:07:02,360
and and a few other things so the 80 lb

00:07:00,080 --> 00:07:05,599
9009 has been mentioned over the last

00:07:02,360 --> 00:07:11,809
two days quite a few times this is how

00:07:05,599 --> 00:07:13,489
it looks like it's a 2rx to TX system it

00:07:11,809 --> 00:07:17,050
features two hundred mega Hertz

00:07:13,489 --> 00:07:21,499
bandwidth and has a lot of additional

00:07:17,050 --> 00:07:23,179
digital features built into the chip the

00:07:21,499 --> 00:07:26,179
multi-channel system that I'm talking

00:07:23,179 --> 00:07:29,089
about today is basically built on the RF

00:07:26,179 --> 00:07:33,139
ssam it's basically two of those chips

00:07:29,089 --> 00:07:36,529
making it a four by four on on a PCB

00:07:33,139 --> 00:07:38,649
together with a ginormous MP sock FPGA

00:07:36,529 --> 00:07:43,309
from stylings there's in addition

00:07:38,649 --> 00:07:48,829
multiple banks of ddr4 memory and also

00:07:43,309 --> 00:07:50,149
complete integrated power so but the

00:07:48,829 --> 00:07:52,729
main topic is about talking about

00:07:50,149 --> 00:07:56,689
synchronization and how we can face a

00:07:52,729 --> 00:07:59,389
line multiple of those modules in a

00:07:56,689 --> 00:08:03,439
system that can scale so there are

00:07:59,389 --> 00:08:05,059
multiple multiple things that needs to

00:08:03,439 --> 00:08:06,139
be calibrated and they are typically

00:08:05,059 --> 00:08:08,149
done in a certain order

00:08:06,139 --> 00:08:09,469
so for example there's the clock

00:08:08,149 --> 00:08:12,110
synchronization where they basically

00:08:09,469 --> 00:08:14,979
synchronize the clocks about across

00:08:12,110 --> 00:08:17,769
multiple layer layers in your topology

00:08:14,979 --> 00:08:20,179
then there's the multi chip

00:08:17,769 --> 00:08:22,339
synchronization where you align the

00:08:20,179 --> 00:08:25,399
basements of all these different chips

00:08:22,339 --> 00:08:28,339
of course there is a digital link

00:08:25,399 --> 00:08:30,469
between the FPGA and the transceivers

00:08:28,339 --> 00:08:32,779
typically this is a chesty 2:04

00:08:30,469 --> 00:08:36,110
intercept interface that also needs to

00:08:32,779 --> 00:08:39,579
be aligned calibrated so that you have a

00:08:36,110 --> 00:08:43,969
deterministic latency and of course

00:08:39,579 --> 00:08:46,519
yesterday we heard about ellos hello

00:08:43,969 --> 00:08:49,699
synchronization and that's what I cause

00:08:46,519 --> 00:08:52,279
call here RF a synchronization which is

00:08:49,699 --> 00:08:54,680
also important and of course there's

00:08:52,279 --> 00:08:57,009
more on the application layer that we

00:08:54,680 --> 00:09:00,259
are not going to talk about here today

00:08:57,009 --> 00:09:02,059
so let's start looking into just e 204

00:09:00,259 --> 00:09:04,540
what it is and how it can be

00:09:02,059 --> 00:09:07,000
synchronized so first of all

00:09:04,540 --> 00:09:08,920
traditionally LVDS

00:09:07,000 --> 00:09:13,780
interfaces have been used between

00:09:08,920 --> 00:09:16,510
converters and an FPGA s as the number

00:09:13,780 --> 00:09:18,820
of channels increase this becomes not

00:09:16,510 --> 00:09:20,470
practical anymore and also if the data

00:09:18,820 --> 00:09:23,650
rates increase

00:09:20,470 --> 00:09:26,490
you're kind of limited by the electrical

00:09:23,650 --> 00:09:29,110
signaling so in your converters use

00:09:26,490 --> 00:09:33,760
high-speed serial interface using the

00:09:29,110 --> 00:09:35,620
J's d2 for standard so what is the Justi

00:09:33,760 --> 00:09:37,720
tool for standard it's designed as a

00:09:35,620 --> 00:09:40,630
high-speed serial link data link between

00:09:37,720 --> 00:09:44,820
converter devices and logic device it

00:09:40,630 --> 00:09:48,100
supports up to 32 lanes per link and and

00:09:44,820 --> 00:09:51,550
the lane rate or the link rate can be up

00:09:48,100 --> 00:09:53,140
to 32 gigabits per second with the

00:09:51,550 --> 00:09:55,690
latest addition to the standard and to

00:09:53,140 --> 00:09:58,330
foresee this tunnel also describes the

00:09:55,690 --> 00:10:00,280
data mapping and framing the multi chip

00:09:58,330 --> 00:10:03,400
synchronization and also how

00:10:00,280 --> 00:10:05,380
deterministic latency can be achieved if

00:10:03,400 --> 00:10:08,080
you look at the architecture of such a

00:10:05,380 --> 00:10:10,150
system there's typically a transmitter a

00:10:08,080 --> 00:10:12,310
receiver and then there's a clock chip

00:10:10,150 --> 00:10:15,370
between the transmitter and the receiver

00:10:12,310 --> 00:10:17,530
there are the high-speed lanes the link

00:10:15,370 --> 00:10:20,470
then there is another kind of a

00:10:17,530 --> 00:10:21,550
handshaking synchronization signal that

00:10:20,470 --> 00:10:24,070
goes from the receiver to the

00:10:21,550 --> 00:10:26,710
transmitter and for subclass 1

00:10:24,070 --> 00:10:30,820
deterministic latency there's also a

00:10:26,710 --> 00:10:34,000
Swiss Rev signal required which

00:10:30,820 --> 00:10:38,410
synchronizes both transmitter and

00:10:34,000 --> 00:10:40,480
receiver to the same instant in time so

00:10:38,410 --> 00:10:42,430
there are multiple layers there's a

00:10:40,480 --> 00:10:44,260
physical layer which describes the high

00:10:42,430 --> 00:10:47,160
speeds here is the clock recovery and

00:10:44,260 --> 00:10:49,750
the signal shaping a link layer which

00:10:47,160 --> 00:10:51,910
has like the charecter replacement the

00:10:49,750 --> 00:10:53,470
AP 10 decoding a transport layer that

00:10:51,910 --> 00:10:54,580
I'm not going to talk about today

00:10:53,470 --> 00:10:56,890
and then of course there's an

00:10:54,580 --> 00:10:59,380
application layer so to understand

00:10:56,890 --> 00:11:02,680
deterministic latency also only the link

00:10:59,380 --> 00:11:05,470
layers is is interested it's interesting

00:11:02,680 --> 00:11:07,990
here I need to skip a little bit

00:11:05,470 --> 00:11:12,220
otherwise this is all obvious what is an

00:11:07,990 --> 00:11:13,839
FPGA what is the logic device and what

00:11:12,220 --> 00:11:16,740
is the link I mentioned that the link

00:11:13,839 --> 00:11:19,940
consists of multiple independent lanes

00:11:16,740 --> 00:11:22,130
uses a p10 be encoding and

00:11:19,940 --> 00:11:24,440
typically has an embedded clock or it

00:11:22,130 --> 00:11:30,320
has an embedded look

00:11:24,440 --> 00:11:31,790
it also supports data scrambling so how

00:11:30,320 --> 00:11:34,310
does link synchronization work in

00:11:31,790 --> 00:11:36,050
general so the receiver asserts the

00:11:34,310 --> 00:11:38,209
synchronization pulse or the

00:11:36,050 --> 00:11:40,670
synchronization stroke that then the

00:11:38,209 --> 00:11:44,510
transmitter repeatedly sends the kate

00:11:40,670 --> 00:11:45,589
director the receiver performs a what's

00:11:44,510 --> 00:11:47,649
called being a code group

00:11:45,589 --> 00:11:50,089
synchronization and direct alignment

00:11:47,649 --> 00:11:52,279
after that's being done the receiver D

00:11:50,089 --> 00:11:54,260
asserts the sink and the transmitter

00:11:52,279 --> 00:12:01,779
sends the initial lane alignment

00:11:54,260 --> 00:12:04,550
sequence followed by the data so latency

00:12:01,779 --> 00:12:08,660
propagation over the data link takes

00:12:04,550 --> 00:12:11,209
time just E defines the latency as the

00:12:08,660 --> 00:12:12,980
time difference between when the sample

00:12:11,209 --> 00:12:15,860
is inserted in the TX framer and

00:12:12,980 --> 00:12:18,920
outputted by the RX framework so part of

00:12:15,860 --> 00:12:21,470
this latency is being fixed it's a

00:12:18,920 --> 00:12:24,980
digital pipeline delays trace lands and

00:12:21,470 --> 00:12:26,690
also part of this latency depends on

00:12:24,980 --> 00:12:29,449
manufacturing and environmental

00:12:26,690 --> 00:12:33,800
conditions such as process voltage or

00:12:29,449 --> 00:12:36,790
temperature and also like PCB

00:12:33,800 --> 00:12:39,560
propagation delays a lot of systems are

00:12:36,790 --> 00:12:41,779
latency sensitive so all closed loop

00:12:39,560 --> 00:12:47,480
control systems and of course also radar

00:12:41,779 --> 00:12:50,420
is one of those systems so what is

00:12:47,480 --> 00:12:52,839
deterministic latency so latency can be

00:12:50,420 --> 00:12:55,579
defined as deterministic when the time

00:12:52,839 --> 00:12:57,170
from the input of the trusty tool for

00:12:55,579 --> 00:12:59,300
transmitter to the output of that

00:12:57,170 --> 00:13:02,079
receiver is consistently the same number

00:12:59,300 --> 00:13:03,889
of clock cycles so in parallel

00:13:02,079 --> 00:13:06,410
implementation this is rather simple

00:13:03,889 --> 00:13:08,329
because the clocks are carried in

00:13:06,410 --> 00:13:10,430
parallel with the data in serial

00:13:08,329 --> 00:13:12,920
implementation does this this is a bit

00:13:10,430 --> 00:13:17,750
more difficult because there are

00:13:12,920 --> 00:13:20,120
multiple clock domains this not says

00:13:17,750 --> 00:13:24,470
that end-to-end latency is consistent

00:13:20,120 --> 00:13:26,720
and deterministic across pvt and also

00:13:24,470 --> 00:13:30,040
between power cycles link up link down

00:13:26,720 --> 00:13:32,840
and so forth all the non deterministic

00:13:30,040 --> 00:13:34,670
components are not removed

00:13:32,840 --> 00:13:39,170
however they are compensated and that

00:13:34,670 --> 00:13:42,440
basically it's something that I want to

00:13:39,170 --> 00:13:49,520
toggle it about in the next slide there

00:13:42,440 --> 00:13:51,440
are different subclasses a surplus 0

00:13:49,520 --> 00:13:53,720
there is no deterministic latency in

00:13:51,440 --> 00:13:55,790
subclass 1 it's using Swiss RF to

00:13:53,720 --> 00:13:57,980
achieve that and what basically the

00:13:55,790 --> 00:13:59,570
sister has thus it aligns local

00:13:57,980 --> 00:14:04,040
multi-frame clock it's a clock that's

00:13:59,570 --> 00:14:08,510
running in and the link layer of the

00:14:04,040 --> 00:14:11,570
jersey stack and this is Rev pulse is

00:14:08,510 --> 00:14:16,340
basically synchronizing this clock

00:14:11,570 --> 00:14:18,080
across multiple devices so I mentioned

00:14:16,340 --> 00:14:20,960
it before Swiss ref is supported acid

00:14:18,080 --> 00:14:28,910
and susurrus or synchronous to the

00:14:20,960 --> 00:14:32,200
device clock so deterministic latency is

00:14:28,910 --> 00:14:34,430
achieved by using elastic buffer with

00:14:32,200 --> 00:14:36,500
appropriate release point so we see the

00:14:34,430 --> 00:14:39,710
lanes here in this example Lane 0 line 1

00:14:36,500 --> 00:14:42,440
and Lane true they all arrive at at a

00:14:39,710 --> 00:14:44,510
different time and we need to make sure

00:14:42,440 --> 00:14:47,930
that the release opportunity on the link

00:14:44,510 --> 00:14:51,140
happens after the last Lane arrives and

00:14:47,930 --> 00:14:58,850
the the release opportunity is is

00:14:51,140 --> 00:15:01,850
synchronous to the LMF scene okay

00:14:58,850 --> 00:15:06,950
so a lot of people think Jessie 204 is

00:15:01,850 --> 00:15:11,030
complicated and in theory it is a little

00:15:06,950 --> 00:15:12,860
bit complicated but we have created this

00:15:11,030 --> 00:15:17,420
interesting interface framework which

00:15:12,860 --> 00:15:19,130
makes it much much simpler it's

00:15:17,420 --> 00:15:21,050
basically an integrated software and

00:15:19,130 --> 00:15:24,500
hardware a framework that covers the

00:15:21,050 --> 00:15:28,160
entire stack so we have hardware we have

00:15:24,500 --> 00:15:30,350
generated HD block HDL blocks for for

00:15:28,160 --> 00:15:32,330
the link layer we have software drivers

00:15:30,350 --> 00:15:35,210
that configure the link layer the

00:15:32,330 --> 00:15:38,810
physical layers as well as the transport

00:15:35,210 --> 00:15:40,670
layers it has been Co designed for

00:15:38,810 --> 00:15:43,400
improved in to operate abilities or this

00:15:40,670 --> 00:15:45,330
really a framework and the key features

00:15:43,400 --> 00:15:47,640
here are

00:15:45,330 --> 00:15:50,180
that you basically say I'm I'm a

00:15:47,640 --> 00:15:52,620
converter I have this amount of

00:15:50,180 --> 00:15:56,010
converters it's like link per meter

00:15:52,620 --> 00:15:58,589
equals M I want to use that that many

00:15:56,010 --> 00:16:02,120
lanes and I want to run it that way

00:15:58,589 --> 00:16:06,750
spent right and then everything is being

00:16:02,120 --> 00:16:11,700
set up and configured without any other

00:16:06,750 --> 00:16:17,160
user intervention so we also try to make

00:16:11,700 --> 00:16:19,230
it make it kind of failsafe and because

00:16:17,160 --> 00:16:21,750
a lot of things can go wrong we've

00:16:19,230 --> 00:16:24,779
implemented statistical iScan so you can

00:16:21,750 --> 00:16:27,529
look at the eye opening of your gigabit

00:16:24,779 --> 00:16:29,579
zero links without using expensive

00:16:27,529 --> 00:16:31,290
instrumentation devices it's actually a

00:16:29,579 --> 00:16:32,820
feature that's being built into the

00:16:31,290 --> 00:16:34,380
silents gigabit transceivers that's

00:16:32,820 --> 00:16:37,820
being used here we have clock rate

00:16:34,380 --> 00:16:41,779
monitoring so we can detect bed blocks

00:16:37,820 --> 00:16:45,360
lane a sequence monitoring which one

00:16:41,779 --> 00:16:49,050
arrived first you can see during the the

00:16:45,360 --> 00:16:50,730
ILA phase there's also some some data

00:16:49,050 --> 00:16:52,829
transmitted over the links so you can

00:16:50,730 --> 00:16:55,050
see if you have a Lane swap which is

00:16:52,829 --> 00:16:57,209
rather because the lanes can be swapped

00:16:55,050 --> 00:16:59,640
multiple times in Hardware in software

00:16:57,209 --> 00:17:02,070
inside the converters inside the FPGA so

00:16:59,640 --> 00:17:04,400
sometimes this can cause problems we

00:17:02,070 --> 00:17:08,030
also have sister of alignment monitoring

00:17:04,400 --> 00:17:10,439
which basically helps you to detect

00:17:08,030 --> 00:17:16,679
setup and hold violations for the sister

00:17:10,439 --> 00:17:18,569
signals so the next thing in the the

00:17:16,679 --> 00:17:23,760
synchronization is the multi chip

00:17:18,569 --> 00:17:26,610
synchronization this is where we where

00:17:23,760 --> 00:17:28,050
we synchronize the baseband signals or

00:17:26,610 --> 00:17:31,770
the basement paths of multiple

00:17:28,050 --> 00:17:35,010
transceivers it's also using the Zeus

00:17:31,770 --> 00:17:37,169
ref and the ref clock but this time it's

00:17:35,010 --> 00:17:40,290
not synchronizing the chassis link it's

00:17:37,169 --> 00:17:46,980
more synchronizing the internal dividers

00:17:40,290 --> 00:17:49,770
of the chip the NCOs all the state

00:17:46,980 --> 00:17:51,169
that's that's that's in the chip needs

00:17:49,770 --> 00:17:55,290
to be synchronized if you want to

00:17:51,169 --> 00:17:58,970
synchronize multiple parallel instances

00:17:55,290 --> 00:17:58,970
in your multi-channel system

00:17:59,279 --> 00:18:08,830
so where are those latencies in a modern

00:18:05,679 --> 00:18:09,909
transceiver so of course there's analog

00:18:08,830 --> 00:18:12,880
circuitry delay

00:18:09,909 --> 00:18:14,440
there's ADC cycle delay and of course

00:18:12,880 --> 00:18:18,870
there's digital processing pipeline

00:18:14,440 --> 00:18:21,659
delay in all the digital filters in the

00:18:18,870 --> 00:18:24,340
numerical controlled oscillators in

00:18:21,659 --> 00:18:29,559
quadrature error correction things and

00:18:24,340 --> 00:18:31,990
if you don't reset them you you end up

00:18:29,559 --> 00:18:36,399
with non-deterministic behavior of your

00:18:31,990 --> 00:18:39,850
of your system so the latency is fixed

00:18:36,399 --> 00:18:42,159
is deterministic but it depends on on

00:18:39,850 --> 00:18:43,330
settings just like the what's the

00:18:42,159 --> 00:18:46,570
basement raid

00:18:43,330 --> 00:18:48,039
what's the ADC clock and of course what

00:18:46,570 --> 00:18:50,289
are those digital filters are being

00:18:48,039 --> 00:18:54,520
enabled and how many coefficients are in

00:18:50,289 --> 00:18:59,890
my F IR filter and if if this correction

00:18:54,520 --> 00:19:03,159
algorithm is enabled or not so what is

00:18:59,890 --> 00:19:06,370
RF a synchronization yesterday it was

00:19:03,159 --> 00:19:08,529
referred as a low synchronization the

00:19:06,370 --> 00:19:11,470
the RF a synchronization is a new

00:19:08,529 --> 00:19:14,919
feature on our latest generation of RF

00:19:11,470 --> 00:19:17,289
transceivers it provides a deterministic

00:19:14,919 --> 00:19:20,309
phase across power cycles

00:19:17,289 --> 00:19:23,350
hello frequency changes between

00:19:20,309 --> 00:19:26,010
initializations as well as across

00:19:23,350 --> 00:19:30,880
temperature it works across multiple

00:19:26,010 --> 00:19:33,779
devices in a multi channel system what

00:19:30,880 --> 00:19:38,500
we need to say here is that the phase is

00:19:33,779 --> 00:19:41,140
is not zero between all them but it is

00:19:38,500 --> 00:19:43,870
it is fixed and it's consistently fixed

00:19:41,140 --> 00:19:48,669
so each each of those transceivers do

00:19:43,870 --> 00:19:49,570
have a fixed phase so how can that be

00:19:48,669 --> 00:19:55,120
measured

00:19:49,570 --> 00:19:59,559
here we see some some phase values of

00:19:55,120 --> 00:20:01,960
different transceivers and after the

00:19:59,559 --> 00:20:06,429
phase calibrations they all settle to

00:20:01,960 --> 00:20:08,980
the same value back this can also be

00:20:06,429 --> 00:20:10,850
shown with multiple devices they all

00:20:08,980 --> 00:20:12,380
settle

00:20:10,850 --> 00:20:15,350
the same value after the face

00:20:12,380 --> 00:20:19,340
synchronization and also here

00:20:15,350 --> 00:20:21,289
this is a face analyzer we see that the

00:20:19,340 --> 00:20:24,559
face goes all all over the place your

00:20:21,289 --> 00:20:26,809
initializations or during PLL frequency

00:20:24,559 --> 00:20:30,529
changes or if you turn the radio on and

00:20:26,809 --> 00:20:35,360
off but afterwards it settles back to

00:20:30,529 --> 00:20:37,009
the original value also for factory

00:20:35,360 --> 00:20:39,980
calibration you can actually take this

00:20:37,009 --> 00:20:42,289
phase offset of your given transceiver

00:20:39,980 --> 00:20:46,389
and store it for example in a you know

00:20:42,289 --> 00:20:48,379
unship memory the overall system

00:20:46,389 --> 00:20:50,389
considerations so the overall phase

00:20:48,379 --> 00:20:53,240
synchronization is determined by a

00:20:50,389 --> 00:20:56,210
number of factors first of all the vault

00:20:53,240 --> 00:20:59,299
level clock routing the unshipped

00:20:56,210 --> 00:21:03,289
reference path routing the PLL and a low

00:20:59,299 --> 00:21:07,820
divider path and of course also the RF

00:21:03,289 --> 00:21:09,470
antenna pass the yellow of phase

00:21:07,820 --> 00:21:11,990
synchronization that I'm talking here

00:21:09,470 --> 00:21:14,809
about method addresses only the initial

00:21:11,990 --> 00:21:16,940
PLL phase and hello divider stage so you

00:21:14,809 --> 00:21:19,580
wouldn't do that every time you change

00:21:16,940 --> 00:21:21,799
the frequency or do a hop your face

00:21:19,580 --> 00:21:23,990
would be all over the place because the

00:21:21,799 --> 00:21:26,269
internal dividers are not being reset or

00:21:23,990 --> 00:21:28,009
not being tracked also there is a

00:21:26,269 --> 00:21:30,110
temperature dependence and and the drift

00:21:28,009 --> 00:21:33,559
and also this is being addressed by this

00:21:30,110 --> 00:21:35,929
RF a synchronization feature so what

00:21:33,559 --> 00:21:37,299
does it what does it bring us it gets us

00:21:35,929 --> 00:21:41,389
a more consistent startup called

00:21:37,299 --> 00:21:46,250
condition and your antenna calibration

00:21:41,389 --> 00:21:48,559
needs to be run less frequently you you

00:21:46,250 --> 00:21:52,669
would need to run the you you always

00:21:48,559 --> 00:21:54,649
have like a lot of phase difference just

00:21:52,669 --> 00:21:57,139
by your antenna path so think about you

00:21:54,649 --> 00:22:00,049
have a 300 or let's take an easy number

00:21:57,139 --> 00:22:02,779
free gigahertz divided by the speed of

00:22:00,049 --> 00:22:05,330
light it's 10 million 100 millimeter

00:22:02,779 --> 00:22:07,370
wavelengths for example if if your

00:22:05,330 --> 00:22:10,940
cabling or your antenna elements just

00:22:07,370 --> 00:22:12,950
drift by one millimeter that gives you a

00:22:10,940 --> 00:22:17,870
phase offset by a three point six

00:22:12,950 --> 00:22:21,460
degrees so just temperature changes a

00:22:17,870 --> 00:22:24,320
lot of a lot of phase so you always need

00:22:21,460 --> 00:22:24,710
antenna calibration but you don't need

00:22:24,320 --> 00:22:30,740
to run

00:22:24,710 --> 00:22:33,590
at that frequently so the last point

00:22:30,740 --> 00:22:36,289
here is the distributor Multi multi chip

00:22:33,590 --> 00:22:38,480
clock synchronization so what are the

00:22:36,289 --> 00:22:41,840
requirements the requirements are that

00:22:38,480 --> 00:22:44,679
all clocks need to be aligned across

00:22:41,840 --> 00:22:47,539
multiple layers in your clocking tree

00:22:44,679 --> 00:22:52,039
you also need to meet meet setup and

00:22:47,539 --> 00:22:55,070
hold for for synchronization signals

00:22:52,039 --> 00:22:56,659
justice Souter if the problems are if

00:22:55,070 --> 00:22:58,549
you increase the number of channels also

00:22:56,659 --> 00:23:02,350
the number of clocks increase in your

00:22:58,549 --> 00:23:04,970
system in a multiple device clock

00:23:02,350 --> 00:23:07,549
structure that is based on simple clock

00:23:04,970 --> 00:23:10,520
buffers controlling settlement hold is

00:23:07,549 --> 00:23:12,380
really sometimes challenging and of

00:23:10,520 --> 00:23:14,179
course very important is also that you

00:23:12,380 --> 00:23:16,539
maintain a deterministic face across

00:23:14,179 --> 00:23:20,120
multiple layers in your block hierarchy

00:23:16,539 --> 00:23:22,309
while maintaining very important things

00:23:20,120 --> 00:23:24,700
like clock jitter phase noise and you

00:23:22,309 --> 00:23:31,700
don't want to add additional clock Spurs

00:23:24,700 --> 00:23:33,080
to your to your downstream devices so in

00:23:31,700 --> 00:23:36,860
general there are two different

00:23:33,080 --> 00:23:38,960
techniques on clock distribution one is

00:23:36,860 --> 00:23:41,960
really what's being called lock

00:23:38,960 --> 00:23:45,620
distribution that means you distribute

00:23:41,960 --> 00:23:47,510
the maximum clock that's required to all

00:23:45,620 --> 00:23:50,360
the downstream devices and all the

00:23:47,510 --> 00:23:54,679
downstream clock distribution chips are

00:23:50,360 --> 00:23:57,169
just using a town divided version of

00:23:54,679 --> 00:24:00,289
that clock so you only need one VCO in

00:23:57,169 --> 00:24:04,490
the system and all the all the noise is

00:24:00,289 --> 00:24:05,720
kind of correlated and the other the

00:24:04,490 --> 00:24:07,820
other thing this becomes really

00:24:05,720 --> 00:24:12,320
difficult if you have like larger

00:24:07,820 --> 00:24:14,330
systems or distributed systems so the

00:24:12,320 --> 00:24:16,820
other method is what's being called

00:24:14,330 --> 00:24:18,770
reference distribution this is where a

00:24:16,820 --> 00:24:21,380
much lower reference frequency is

00:24:18,770 --> 00:24:26,539
distributed across multiple layers in

00:24:21,380 --> 00:24:29,360
your clock topology but this this

00:24:26,539 --> 00:24:32,149
reference clock is much lower frequency

00:24:29,360 --> 00:24:36,139
and you can also route it through back

00:24:32,149 --> 00:24:37,680
planes and and other things so the the

00:24:36,139 --> 00:24:42,060
penalties here is that

00:24:37,680 --> 00:24:44,400
every every stage needs another PLL and

00:24:42,060 --> 00:24:46,490
vizio which can be rather a little bit

00:24:44,400 --> 00:24:50,190
more expensive so there's some cost

00:24:46,490 --> 00:24:51,930
penalty involved with that at the

00:24:50,190 --> 00:24:55,950
beginning we heard about that correlated

00:24:51,930 --> 00:25:00,120
phase noise can be sometimes good and

00:24:55,950 --> 00:25:01,680
can be sometimes bad when when you use

00:25:00,120 --> 00:25:05,430
the reference distribution it is

00:25:01,680 --> 00:25:13,320
actually pretty good so you it gets you

00:25:05,430 --> 00:25:16,650
this s FD R improvement what's being

00:25:13,320 --> 00:25:20,520
used on this RF system on module is an h

00:25:16,650 --> 00:25:24,390
MC 7044 we can use it in both techniques

00:25:20,520 --> 00:25:26,790
clock or reference distribution it it

00:25:24,390 --> 00:25:29,310
has a lot of things that makes it kind

00:25:26,790 --> 00:25:32,370
can kind of unique because we can both

00:25:29,310 --> 00:25:35,520
reference and clock distribution and it

00:25:32,370 --> 00:25:39,770
can be synchronized across multiple

00:25:35,520 --> 00:25:41,880
layers in the system it has 14 low noise

00:25:39,770 --> 00:25:44,760
configurable outputs and also each of

00:25:41,880 --> 00:25:52,380
these outputs can be fine fine delayed

00:25:44,760 --> 00:25:56,700
adjusted this is how how the set up is

00:25:52,380 --> 00:26:00,090
on on a 4r 40 on the mult on the somme

00:25:56,700 --> 00:26:05,130
itself so we have 280 RV 9000 9s and one

00:26:00,090 --> 00:26:07,200
H of C 7044 and it's just like providing

00:26:05,130 --> 00:26:08,910
your F clock and Swiss refer to the both

00:26:07,200 --> 00:26:11,580
devices there's nothing special in the

00:26:08,910 --> 00:26:16,710
setup but of course we see there's the

00:26:11,580 --> 00:26:19,800
sync input which allows that multiple of

00:26:16,710 --> 00:26:22,790
these system on modules can be soon so

00:26:19,800 --> 00:26:24,960
this is the example for an 8 r 80

00:26:22,790 --> 00:26:28,500
synchronization that you always add

00:26:24,960 --> 00:26:31,680
another another layer with another clock

00:26:28,500 --> 00:26:36,990
chip on top of it and it's always going

00:26:31,680 --> 00:26:39,450
like top-down synchronization and as we

00:26:36,990 --> 00:26:41,520
can see we we can play this game for a

00:26:39,450 --> 00:26:44,010
little bit more and we can expand the

00:26:41,520 --> 00:26:49,070
clock tree and also scale our number of

00:26:44,010 --> 00:26:49,070
channels using using this approach

00:26:49,479 --> 00:26:55,220
so multi-channel phase offset validation

00:26:52,340 --> 00:26:58,090
so if you want to validate that your

00:26:55,220 --> 00:27:00,710
multi-channel system is phase coherent

00:26:58,090 --> 00:27:03,799
the best way is to actually measure the

00:27:00,710 --> 00:27:05,720
phase there are many ways too many ways

00:27:03,799 --> 00:27:08,389
to measure phase but I want to discuss

00:27:05,720 --> 00:27:11,090
two here one is averaged instantaneous

00:27:08,389 --> 00:27:15,229
phase and the other one is using a cross

00:27:11,090 --> 00:27:18,399
correlation method what kind of source

00:27:15,229 --> 00:27:20,989
signals do we use we either use

00:27:18,399 --> 00:27:23,479
sinusoids with the average instantaneous

00:27:20,989 --> 00:27:25,070
phase method or we with a noise source

00:27:23,479 --> 00:27:28,999
with a cross correlation method

00:27:25,070 --> 00:27:35,269
typically they both need to be a high

00:27:28,999 --> 00:27:37,729
signal-to-noise Travis my colleague

00:27:35,269 --> 00:27:40,970
implemented two hierarchical blocks that

00:27:37,729 --> 00:27:45,039
are both available on our github I think

00:27:40,970 --> 00:27:48,979
one of the slides actually have the the

00:27:45,039 --> 00:27:51,769
URL so this method is easy to implement

00:27:48,979 --> 00:27:53,389
works great with sinusoids but it's a

00:27:51,769 --> 00:27:56,659
little bit more sensitive to sample

00:27:53,389 --> 00:27:59,989
offset how it works we take the channel

00:27:56,659 --> 00:28:03,379
multiply conjugate compute the the angle

00:27:59,989 --> 00:28:05,179
then we kind of multiply constant to

00:28:03,379 --> 00:28:09,590
scale in to decrease and then we ever

00:28:05,179 --> 00:28:12,409
reach it the other hierarchical block is

00:28:09,590 --> 00:28:18,259
the cross correlation method and it

00:28:12,409 --> 00:28:21,139
basically uses uses for FFTs multiply

00:28:18,259 --> 00:28:24,619
conjugate or reverse F of T then we

00:28:21,139 --> 00:28:28,549
compute the the magnitude spectrum and

00:28:24,619 --> 00:28:35,720
then we take the pin with the highest

00:28:28,549 --> 00:28:39,409
power and then select the complex value

00:28:35,720 --> 00:28:44,599
from it and on that bin that represents

00:28:39,409 --> 00:28:51,769
the phase of our signal also the index

00:28:44,599 --> 00:28:56,179
from from from that bin can tightly

00:28:51,769 --> 00:28:59,110
translates into a sample delay this is

00:28:56,179 --> 00:29:02,880
how the measurement setup looks like we

00:28:59,110 --> 00:29:06,690
we use the 1tx from from one device

00:29:02,880 --> 00:29:09,880
either providers like a sine wave or

00:29:06,690 --> 00:29:12,429
playback a noise petram feed it into

00:29:09,880 --> 00:29:16,500
four ways power splitter and then feed

00:29:12,429 --> 00:29:19,630
the the signal back into the receivers

00:29:16,500 --> 00:29:24,370
this is how the flow graph looks like

00:29:19,630 --> 00:29:27,840
for the average instantaneous phase we

00:29:24,370 --> 00:29:31,630
have the area eighty nine thousand nine

00:29:27,840 --> 00:29:36,700
new radio source feed it in the

00:29:31,630 --> 00:29:39,669
hierarchical clock and visualize it this

00:29:36,700 --> 00:29:45,130
is an example here on the bottom whom

00:29:39,669 --> 00:29:49,690
you see use frequency spectrum the the

00:29:45,130 --> 00:29:53,710
time spectrum and and the face so the

00:29:49,690 --> 00:29:57,250
blue one is the the reference and the

00:29:53,710 --> 00:30:01,149
two other channels are the other two

00:29:57,250 --> 00:30:03,309
receivers so you can you can play that

00:30:01,149 --> 00:30:05,590
over and over you can restart the system

00:30:03,309 --> 00:30:09,730
you will always measure the same phase

00:30:05,590 --> 00:30:13,870
offset this is a flow graph for the

00:30:09,730 --> 00:30:17,980
cross correlation method and again the

00:30:13,870 --> 00:30:20,860
source this time we correlate only like

00:30:17,980 --> 00:30:25,149
two channels it goes into the phase

00:30:20,860 --> 00:30:30,370
estimator block then we average and also

00:30:25,149 --> 00:30:35,880
visualize this shows the cross

00:30:30,370 --> 00:30:38,649
correlation then the sample offset and

00:30:35,880 --> 00:30:43,029
so we see we have no simple offset and

00:30:38,649 --> 00:30:44,409
we also can measure the phase you can

00:30:43,029 --> 00:30:46,330
start playing with your radio if you

00:30:44,409 --> 00:30:47,649
start turning on some calibrations and

00:30:46,330 --> 00:30:50,950
one device and on the other device you

00:30:47,649 --> 00:30:55,330
actually see how that you basically get

00:30:50,950 --> 00:30:58,029
a sample offset so these blocks are

00:30:55,330 --> 00:31:01,419
really handy and someone is interested

00:30:58,029 --> 00:31:03,789
they are exists on our or github so what

00:31:01,419 --> 00:31:05,559
are the conclusions enter and

00:31:03,789 --> 00:31:09,639
deterministic latency in our face and

00:31:05,559 --> 00:31:12,039
frequency synchronization can be can be

00:31:09,639 --> 00:31:14,440
realized in a multi-channel system using

00:31:12,039 --> 00:31:19,299
the latest generation of integrated

00:31:14,440 --> 00:31:22,419
transceivers the multi-chip hello Faye

00:31:19,299 --> 00:31:23,279
synchronization simplifies phased-array

00:31:22,419 --> 00:31:26,350
beamforming

00:31:23,279 --> 00:31:29,169
the this porous force the correlation

00:31:26,350 --> 00:31:35,080
can improve your system dynamic range

00:31:29,169 --> 00:31:38,019
and also your transmit phase noise it

00:31:35,080 --> 00:31:41,619
always requires a very flexible clocking

00:31:38,019 --> 00:31:44,229
in synchronization topology and of

00:31:41,619 --> 00:31:45,999
course also all your in your traces

00:31:44,229 --> 00:31:47,979
everything needs to be impedance and

00:31:45,999 --> 00:31:52,419
length matched in order to actually

00:31:47,979 --> 00:31:55,779
synchronize those things the phase

00:31:52,419 --> 00:31:57,909
offsets can be measured they can be

00:31:55,779 --> 00:32:01,509
avoided or most of the time they're just

00:31:57,909 --> 00:32:03,039
compensated and last but not least new

00:32:01,509 --> 00:32:05,129
rate is a very effective tool to build

00:32:03,039 --> 00:32:07,749
model analyze and visualize

00:32:05,129 --> 00:32:14,139
multi-channel software as I find radio

00:32:07,749 --> 00:32:16,290
systems so that kind of finished my talk

00:32:14,139 --> 00:32:20,390
today I know part of us

00:32:16,290 --> 00:32:20,390

YouTube URL: https://www.youtube.com/watch?v=ft0RSlgjNjw


