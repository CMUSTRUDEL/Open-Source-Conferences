Title: GRCon19 - gr-satellites: a collection of decoders for Amateur satellites by Daniel EstÃ©vez
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	gr-satellites: a collection of decoders for Amateur satellites by Daniel EstÃ©vez

gr-satellites is an OOT module encompassing a collection of telemetry decoders that supports nearly 40 different Amateur satellites. This open-source project started in 2015 with the goal of providing telemetry decoders for all the satellites that transmit on the Amateur radio bands. It suports most popular protocols, such as AX.25, the GOMspace NanoCom U482C and AX100 modems, an important part of the CCSDS stack, the AO-40 protocol used in the FUNcube satellites, and several ad-hoc protocols used in other satellites.

This OOT module can be very useful as a supply of building blocks for people interested in developing their own communications systems for satellites and other applications, as a material for the study of how different satellite modems are implemented, or as a readily available groundstation solution for many existing satellites.
Captions: 
	00:00:14,849 --> 00:00:19,289
so just a brief introduction about

00:00:16,710 --> 00:00:22,890
myself a couple years ago I finished my

00:00:19,289 --> 00:00:25,470
PhD in maths and since then my day job

00:00:22,890 --> 00:00:27,960
has been in a company in Madrid doing

00:00:25,470 --> 00:00:32,070
satellite navigation receivers mainly

00:00:27,960 --> 00:00:35,879
for GPS and Galileo so I do signal

00:00:32,070 --> 00:00:38,070
processing for the receivers but besides

00:00:35,879 --> 00:00:40,620
my day job I've been doing since several

00:00:38,070 --> 00:00:43,519
years ago many different projects in

00:00:40,620 --> 00:00:46,620
radio communications amateur radio and

00:00:43,519 --> 00:00:47,550
space science spacecrafts all those

00:00:46,620 --> 00:00:49,920
kinds of things

00:00:47,550 --> 00:00:52,980
I hold a couple of amateur radio

00:00:49,920 --> 00:00:56,460
licenses a Spanish one on the UK one and

00:00:52,980 --> 00:01:00,870
you can see about my experiments on my

00:00:56,460 --> 00:01:03,690
web blog or in Twitter so just a brief

00:01:00,870 --> 00:01:07,050
outline of my talk today I'm going to

00:01:03,690 --> 00:01:10,229
introduce what gr satellites is and its

00:01:07,050 --> 00:01:12,660
main theatres then since this is the

00:01:10,229 --> 00:01:15,210
arcon I want to take a brief look under

00:01:12,660 --> 00:01:19,380
the hood of GR satellites to show how to

00:01:15,210 --> 00:01:22,080
do some of the things maybe to show some

00:01:19,380 --> 00:01:24,720
useful theaters that you can reuse in

00:01:22,080 --> 00:01:26,970
your projects even if they don't have

00:01:24,720 --> 00:01:29,759
anything to do with satellites there are

00:01:26,970 --> 00:01:33,450
ropes which can be useful for very

00:01:29,759 --> 00:01:35,369
general things and also so that I can

00:01:33,450 --> 00:01:38,430
get some feedback about what things can

00:01:35,369 --> 00:01:40,320
I improve or do differently and then I

00:01:38,430 --> 00:01:45,899
could look to the future with a roadmap

00:01:40,320 --> 00:01:48,600
and quick demo so geo satellites is an

00:01:45,899 --> 00:01:51,750
you know radio out of tree module with a

00:01:48,600 --> 00:01:54,450
collection for decoding amateur

00:01:51,750 --> 00:01:55,320
satellites so with amateur satellite I

00:01:54,450 --> 00:01:57,960
understand

00:01:55,320 --> 00:02:00,780
any satellite which transmits data on

00:01:57,960 --> 00:02:04,380
amateur radio bands these are satellites

00:02:00,780 --> 00:02:07,049
made by amateurs also satellites from

00:02:04,380 --> 00:02:10,110
universities who are doing educational

00:02:07,049 --> 00:02:12,260
or research experience and also some

00:02:10,110 --> 00:02:17,310
satellites made by small companies

00:02:12,260 --> 00:02:19,530
startups or our research institutions so

00:02:17,310 --> 00:02:22,949
basically for its satellite because a

00:02:19,530 --> 00:02:26,100
flow graph whose inputs our IQ our

00:02:22,949 --> 00:02:28,260
samples either taken in real time from

00:02:26,100 --> 00:02:31,080
an SDR hardware

00:02:28,260 --> 00:02:32,670
or a conventional radio I don't know I

00:02:31,080 --> 00:02:36,780
come transceiver or something like that

00:02:32,670 --> 00:02:40,110
or a recording and the output is packets

00:02:36,780 --> 00:02:43,799
in hex format or raw telemetry values

00:02:40,110 --> 00:02:45,890
like these voltage these intensity of

00:02:43,799 --> 00:02:48,299
the current so on and so forth

00:02:45,890 --> 00:02:50,720
currently it supports more than 80

00:02:48,299 --> 00:02:54,390
different satellites many of these are

00:02:50,720 --> 00:02:57,390
very much alike so they use very similar

00:02:54,390 --> 00:03:01,409
protocols but others are quite different

00:02:57,390 --> 00:03:03,989
and they use other protocols it has a

00:03:01,409 --> 00:03:07,019
lot of different blocks many of them are

00:03:03,989 --> 00:03:09,480
in Python but also some are in C++ and

00:03:07,019 --> 00:03:11,670
the main goal of the project for me is

00:03:09,480 --> 00:03:14,099
to provide an open source solution so

00:03:11,670 --> 00:03:16,620
that anyone can decode every satellite

00:03:14,099 --> 00:03:18,930
which transmits data ornamental radio

00:03:16,620 --> 00:03:21,060
bands so I try to focus on these

00:03:18,930 --> 00:03:23,340
satellites which don't have any other

00:03:21,060 --> 00:03:25,739
available software there are some

00:03:23,340 --> 00:03:27,569
satellites such as the arms at North

00:03:25,739 --> 00:03:31,889
America for satellites which have a

00:03:27,569 --> 00:03:34,049
really good software so I don't have a

00:03:31,889 --> 00:03:36,000
main goal to support those only the

00:03:34,049 --> 00:03:38,519
other ones which are not supported else

00:03:36,000 --> 00:03:39,090
well I'm essentially doing this on my

00:03:38,519 --> 00:03:41,340
own

00:03:39,090 --> 00:03:45,720
but I'm eager to collaborate with anyone

00:03:41,340 --> 00:03:48,720
who is interested this starting in 2015

00:03:45,720 --> 00:03:50,970
as some series of experiments were tried

00:03:48,720 --> 00:03:52,560
to decode satellites that no one had

00:03:50,970 --> 00:03:55,190
been able to decode before of course

00:03:52,560 --> 00:03:58,019
other than these satellite operators and

00:03:55,190 --> 00:04:01,530
I had to do at least some degree of

00:03:58,019 --> 00:04:04,049
reverse engineering to decode this I did

00:04:01,530 --> 00:04:06,269
this mainly for learning and for fun but

00:04:04,049 --> 00:04:09,750
another important motivation for me is

00:04:06,269 --> 00:04:11,280
the sentence in the ITU regulations

00:04:09,750 --> 00:04:14,579
about the amateur radio satellite

00:04:11,280 --> 00:04:17,340
service which say that transmission by

00:04:14,579 --> 00:04:19,979
amateurs shall not be encoded to obscure

00:04:17,340 --> 00:04:22,470
the meaning effectively what this means

00:04:19,979 --> 00:04:25,889
is that any transmission on amateur

00:04:22,470 --> 00:04:29,820
bands needs to have open specifications

00:04:25,889 --> 00:04:34,580
or an available decoder or some form

00:04:29,820 --> 00:04:38,270
that anyone can go and decode the data

00:04:34,580 --> 00:04:41,639
so I think that this concept of having

00:04:38,270 --> 00:04:42,120
open standards or open specifications

00:04:41,639 --> 00:04:44,940
for

00:04:42,120 --> 00:04:48,479
Communications can be tight very well to

00:04:44,940 --> 00:04:50,220
this notion of open source spectrum that

00:04:48,479 --> 00:04:53,580
Mark Shuttleworth was mentioning

00:04:50,220 --> 00:04:55,530
yesterday and since people started to

00:04:53,580 --> 00:04:57,570
find this kind of experience useful I

00:04:55,530 --> 00:05:00,690
decided to collect all of them under a

00:04:57,570 --> 00:05:03,720
collection and this gave birth to your

00:05:00,690 --> 00:05:06,300
satellites since then I've been adding

00:05:03,720 --> 00:05:08,910
supports to new armatures satellites as

00:05:06,300 --> 00:05:10,650
they get launched so you usually the

00:05:08,910 --> 00:05:14,340
development goes like this a new

00:05:10,650 --> 00:05:16,919
satellite is launched some amateurs are

00:05:14,340 --> 00:05:19,440
interested and do recordings of the

00:05:16,919 --> 00:05:22,320
satellite signal and then I look at the

00:05:19,440 --> 00:05:24,530
recordings I also search online to see

00:05:22,320 --> 00:05:27,479
if there are any documentation or

00:05:24,530 --> 00:05:31,050
specifications about the encoding

00:05:27,479 --> 00:05:34,470
protocols etc used usually there's not

00:05:31,050 --> 00:05:36,419
very many documentation so I try to work

00:05:34,470 --> 00:05:38,789
in parallel with contacting the

00:05:36,419 --> 00:05:41,070
satellite team to try to engage into the

00:05:38,789 --> 00:05:45,530
conversation with them and get some data

00:05:41,070 --> 00:05:49,770
and to reverse engineer on my own

00:05:45,530 --> 00:05:52,530
usually I need some amount of reverse

00:05:49,770 --> 00:05:54,090
engineering it changes between different

00:05:52,530 --> 00:05:56,550
satellites but the main problem is that

00:05:54,090 --> 00:05:59,190
sometimes I don't get any answer at all

00:05:56,550 --> 00:06:01,860
from the satellite team or many times

00:05:59,190 --> 00:06:03,570
they don't have complete knowledge of

00:06:01,860 --> 00:06:05,099
the protocols they are using just

00:06:03,570 --> 00:06:07,050
because they are using a commercial

00:06:05,099 --> 00:06:10,470
radio maybe with the default settings

00:06:07,050 --> 00:06:13,320
and they don't know much about digital

00:06:10,470 --> 00:06:15,539
communications but if all goes well in

00:06:13,320 --> 00:06:17,940
the end we figure out all the

00:06:15,539 --> 00:06:20,220
specifications so I can write a decoder

00:06:17,940 --> 00:06:22,260
and add it to a collection and usually

00:06:20,220 --> 00:06:28,229
put up a blog post explaining some of

00:06:22,260 --> 00:06:30,919
the interest in technical theaters so a

00:06:28,229 --> 00:06:33,000
few words tine about open documentation

00:06:30,919 --> 00:06:36,030
currently there is an ongoing discussion

00:06:33,000 --> 00:06:39,870
within the amateur radio community to

00:06:36,030 --> 00:06:42,810
make stronger requirement to those using

00:06:39,870 --> 00:06:43,470
amateur radio spectrum for satellites to

00:06:42,810 --> 00:06:46,740
publish

00:06:43,470 --> 00:06:50,340
open documentation or software so that

00:06:46,740 --> 00:06:52,229
anyone can decode the signal and so if

00:06:50,340 --> 00:06:54,840
you are designing any satellite with

00:06:52,229 --> 00:06:55,860
plans to use amateur spectrum please get

00:06:54,840 --> 00:06:58,280
in touch with them

00:06:55,860 --> 00:07:02,100
two community were helped to help and

00:06:58,280 --> 00:07:07,710
please be able to write unpublish a good

00:07:02,100 --> 00:07:09,600
documentation so a brief look inside as

00:07:07,710 --> 00:07:11,760
I mentioned every satellite has a

00:07:09,600 --> 00:07:13,980
different Guinea radio companion flow

00:07:11,760 --> 00:07:16,050
graph and the basic information about

00:07:13,980 --> 00:07:18,390
each of the flow graphs is included in

00:07:16,050 --> 00:07:21,870
the readme file for the project saying

00:07:18,390 --> 00:07:23,940
the type of modulation for the rocker

00:07:21,870 --> 00:07:27,330
ection encoding and so on that each

00:07:23,940 --> 00:07:29,610
satellite uses the flow graph contains

00:07:27,330 --> 00:07:33,330
that allometric decoder whose goal is to

00:07:29,610 --> 00:07:36,300
get from IQ samples to PDUs containing

00:07:33,330 --> 00:07:38,640
the data frame so the protocol frames

00:07:36,300 --> 00:07:42,120
and then depending on each particular

00:07:38,640 --> 00:07:46,010
satellite it can have telemetry parsers

00:07:42,120 --> 00:07:48,720
which decode the data into readable

00:07:46,010 --> 00:07:51,660
numbers such as voltages temperatures

00:07:48,720 --> 00:07:53,850
and so on this is done using a very

00:07:51,660 --> 00:07:58,110
useful Python library called construct

00:07:53,850 --> 00:08:02,550
which can parse binary data and also

00:07:58,110 --> 00:08:05,880
build a binary data and some of these

00:08:02,550 --> 00:08:09,390
satellites transmit another kind of

00:08:05,880 --> 00:08:12,060
information such as JPEG images so some

00:08:09,390 --> 00:08:16,500
of these decoders have image decoders

00:08:12,060 --> 00:08:18,420
which reassemble the images the flow

00:08:16,500 --> 00:08:21,330
graphs don't have any GUI this was a

00:08:18,420 --> 00:08:23,330
design choice so that it can be run on a

00:08:21,330 --> 00:08:27,990
headless environment and a remote

00:08:23,330 --> 00:08:30,660
Raspberry Pi or whatever there are some

00:08:27,990 --> 00:08:33,180
common line configuration parameters so

00:08:30,660 --> 00:08:35,250
the main idea is that you run this using

00:08:33,180 --> 00:08:38,280
the Python script that you get from the

00:08:35,250 --> 00:08:40,770
GRC file from the terminal there you can

00:08:38,280 --> 00:08:43,650
specify parameters and the output gets

00:08:40,770 --> 00:08:48,480
printed to the current terminal or past

00:08:43,650 --> 00:08:52,470
own with sockets or files about the

00:08:48,480 --> 00:08:56,280
input format anyone has who has the need

00:08:52,470 --> 00:08:59,010
to support different formats for radio

00:08:56,280 --> 00:09:01,650
stuff can know that it can get really

00:08:59,010 --> 00:09:04,230
cumbersome because there are different

00:09:01,650 --> 00:09:08,070
sample rates different sampling formats

00:09:04,230 --> 00:09:09,690
IQ real data and so on so to keep things

00:09:08,070 --> 00:09:12,000
simple I decided to say

00:09:09,690 --> 00:09:14,580
on one single format for the input for

00:09:12,000 --> 00:09:17,700
almost all of the flow graphs and this

00:09:14,580 --> 00:09:19,500
is real-time UDP input using a real

00:09:17,700 --> 00:09:23,940
signal so this is a single channel

00:09:19,500 --> 00:09:27,450
floating point 32 bits at 48 kilohertz

00:09:23,940 --> 00:09:30,060
so the usual audio sampling rate the

00:09:27,450 --> 00:09:32,400
main reason for that was that gqr X

00:09:30,060 --> 00:09:35,130
which is these popular as the our

00:09:32,400 --> 00:09:37,590
application already has a future to

00:09:35,130 --> 00:09:40,610
stream the audio using this very same

00:09:37,590 --> 00:09:43,230
format and also many people have

00:09:40,610 --> 00:09:45,840
recordings taken form conventional

00:09:43,230 --> 00:09:50,100
radios using the audio some card on the

00:09:45,840 --> 00:09:51,360
computer in this format so depending on

00:09:50,100 --> 00:09:54,510
the modulation of the satellite

00:09:51,360 --> 00:09:57,030
something different is expected as these

00:09:54,510 --> 00:10:00,660
kind of audio signal that you input into

00:09:57,030 --> 00:10:03,570
the decoder if it's an FM or FSK signal

00:10:00,660 --> 00:10:05,790
you need F and D modulated audio so if

00:10:03,570 --> 00:10:09,060
we kind of hold you you you'd get from

00:10:05,790 --> 00:10:12,240
setting your eye comb or yes or Kenwood

00:10:09,060 --> 00:10:14,670
radio in FM mode this is so that you can

00:10:12,240 --> 00:10:17,400
use a conventional radio also for this

00:10:14,670 --> 00:10:20,520
kind of modes if it's a narrow bandwidth

00:10:17,400 --> 00:10:24,600
linear signal for example 1.2 board a

00:10:20,520 --> 00:10:28,020
kilowatt sorry BPSK unity feed in a

00:10:24,600 --> 00:10:31,230
conventional Alice asipi SSB audio so

00:10:28,020 --> 00:10:32,970
from 0 to 3 kilohertz pass band with the

00:10:31,230 --> 00:10:35,220
signal in the middle of the pass band

00:10:32,970 --> 00:10:37,830
again so that you can use your

00:10:35,220 --> 00:10:40,230
conventional radio but there are also

00:10:37,830 --> 00:10:42,990
some wider linear modes which don't fit

00:10:40,230 --> 00:10:46,800
into the conventional SSB bandwidth

00:10:42,990 --> 00:10:49,700
such as 9 k-6 BPSK and for that you

00:10:46,800 --> 00:10:52,920
usually need to use an SDR software and

00:10:49,700 --> 00:10:56,940
both the decoder there expects is to

00:10:52,920 --> 00:10:59,880
have the wideband signal in a 0 to 24

00:10:56,940 --> 00:11:03,360
kilo hertz but with centered in the

00:10:59,880 --> 00:11:05,460
middle of the pass band so as I said the

00:11:03,360 --> 00:11:09,390
different ways to be the input is to use

00:11:05,460 --> 00:11:12,330
GQ RX o AGR front-ends which is a small

00:11:09,390 --> 00:11:15,630
collection of a very simple radio flow

00:11:12,330 --> 00:11:19,260
graphs that take data from a variety of

00:11:15,630 --> 00:11:21,380
sources a WAP recording the audio sound

00:11:19,260 --> 00:11:23,310
card also may see our hardware and

00:11:21,380 --> 00:11:25,800
stream it using the

00:11:23,310 --> 00:11:30,750
UDP protocol and of course you can build

00:11:25,800 --> 00:11:35,360
your own using netcat this is what one

00:11:30,750 --> 00:11:38,400
of the flow graphs sorry looks like and

00:11:35,360 --> 00:11:40,830
in here you have the UDP source where

00:11:38,400 --> 00:11:43,560
the data comes in I don't know if you

00:11:40,830 --> 00:11:45,360
can see the mouse yeah and then

00:11:43,560 --> 00:11:47,670
depending on the signal you have some

00:11:45,360 --> 00:11:50,220
signal conditioning and the undercoating

00:11:47,670 --> 00:11:53,670
so for this particular satellite the

00:11:50,220 --> 00:11:57,060
signal is audio frequency gmsk so there

00:11:53,670 --> 00:11:59,670
is first some frequency shift and

00:11:57,060 --> 00:12:03,839
filtering for the signal and then the

00:11:59,670 --> 00:12:05,820
gmsk demodulation then there is there is

00:12:03,839 --> 00:12:07,890
this thing can create parked PD you

00:12:05,820 --> 00:12:10,529
block which I'll talk about later but

00:12:07,890 --> 00:12:13,370
essentially it's a locate syncwords

00:12:10,529 --> 00:12:17,130
within the data and extra the packets

00:12:13,370 --> 00:12:19,680
you got for gyro correction and finally

00:12:17,130 --> 00:12:22,830
when you arrive to the packets you have

00:12:19,680 --> 00:12:24,950
a telemetry forward a block to send the

00:12:22,830 --> 00:12:27,720
telemetry frames to the sat Knox

00:12:24,950 --> 00:12:31,110
database so this is an online

00:12:27,720 --> 00:12:33,030
application which can collect telemetry

00:12:31,110 --> 00:12:37,500
frames from many different satellites

00:12:33,030 --> 00:12:41,130
and also you have these telemetry parser

00:12:37,500 --> 00:12:43,230
for the specific satellite which passes

00:12:41,130 --> 00:12:47,730
the packets get the telemetry values and

00:12:43,230 --> 00:12:50,430
prints those onto the screen so talking

00:12:47,730 --> 00:12:54,300
about these scene can create Park PD you

00:12:50,430 --> 00:12:56,790
or not Park PD you I see that this is a

00:12:54,300 --> 00:12:59,370
question that often pops up with

00:12:56,790 --> 00:13:03,480
newcomers to general radio okay I have a

00:12:59,370 --> 00:13:04,140
simple protocol and this works in the

00:13:03,480 --> 00:13:07,260
following way

00:13:04,140 --> 00:13:09,990
it has fixed length packets maybe I

00:13:07,260 --> 00:13:12,300
don't know 100 bytes and at the end at

00:13:09,990 --> 00:13:16,709
the beginning of each packet it has a

00:13:12,300 --> 00:13:22,140
fixed sing word 32 bits for example how

00:13:16,709 --> 00:13:25,440
can I run my FSK demodulator and extra

00:13:22,140 --> 00:13:28,680
the packets so for this kind of problem

00:13:25,440 --> 00:13:32,459
I created this sync and create our PD

00:13:28,680 --> 00:13:34,680
you block just because there are many

00:13:32,459 --> 00:13:37,110
different protocols not only for

00:13:34,680 --> 00:13:41,220
satellites which is if their packets

00:13:37,110 --> 00:13:43,410
the big size or of very well size but

00:13:41,220 --> 00:13:46,680
with the maximum which is not so large

00:13:43,410 --> 00:13:49,050
so even if the packet size is very well

00:13:46,680 --> 00:13:51,390
extracting packets with the fixed size

00:13:49,050 --> 00:13:54,570
anytime you detect us in word it's a

00:13:51,390 --> 00:13:56,700
valid approach so this is what Singh can

00:13:54,570 --> 00:13:59,700
create PDU does and it allows

00:13:56,700 --> 00:14:02,160
overlapping packets this means that if

00:13:59,700 --> 00:14:05,220
one of these thing worse is here and I

00:14:02,160 --> 00:14:07,440
want I want to strut 100 bytes after

00:14:05,220 --> 00:14:10,230
that to create a video it doesn't matter

00:14:07,440 --> 00:14:12,149
if I have a shorter packet and the

00:14:10,230 --> 00:14:14,430
second one starts here I'll get one

00:14:12,149 --> 00:14:17,490
video with this and another video with

00:14:14,430 --> 00:14:19,680
that even though they overlap is useful

00:14:17,490 --> 00:14:22,920
for shorter packets so a packet shorter

00:14:19,680 --> 00:14:25,440
than the MTU and also in case you get

00:14:22,920 --> 00:14:28,079
false single detections so that you

00:14:25,440 --> 00:14:30,450
don't lose annotate on the wave these

00:14:28,079 --> 00:14:34,200
works is through a hierarchical flow

00:14:30,450 --> 00:14:38,940
graph so you have before sorry you have

00:14:34,200 --> 00:14:42,600
before this correlate access code tag

00:14:38,940 --> 00:14:46,649
which is stock again radio block that

00:14:42,600 --> 00:14:49,500
locates the sync word and just puts a

00:14:46,649 --> 00:14:52,949
tag in the stream whenever it happens

00:14:49,500 --> 00:14:56,250
then this is a custom block in python

00:14:52,949 --> 00:15:01,110
which locates the tags and turns this

00:14:56,250 --> 00:15:04,380
into a target stream so if you want

00:15:01,110 --> 00:15:07,140
unpacked a data so this is one bit per

00:15:04,380 --> 00:15:11,850
sample then you are okay and you can

00:15:07,140 --> 00:15:14,190
just do text trim to PDU to get the PDUs

00:15:11,850 --> 00:15:16,850
but if you want pack bytes and so this

00:15:14,190 --> 00:15:19,160
is 8 bits worth of data into each sample

00:15:16,850 --> 00:15:22,220
you can do this sort of transformation

00:15:19,160 --> 00:15:25,470
to pack the beats and also of course

00:15:22,220 --> 00:15:26,540
transform the packet length tag

00:15:25,470 --> 00:15:30,360
accordingly

00:15:26,540 --> 00:15:33,480
so this is the way I came to solve this

00:15:30,360 --> 00:15:35,430
kind of problem several years ago but I

00:15:33,480 --> 00:15:37,980
don't know there are many other possible

00:15:35,430 --> 00:15:42,839
ways perhaps I should look into using

00:15:37,980 --> 00:15:45,360
protocol parser for this many times you

00:15:42,839 --> 00:15:47,970
want to work with packetized data

00:15:45,360 --> 00:15:50,250
through a stream of bytes for example

00:15:47,970 --> 00:15:50,910
maybe you have some frames that you want

00:15:50,250 --> 00:15:53,190
to

00:15:50,910 --> 00:15:58,530
to a file or maybe you want to transfer

00:15:53,190 --> 00:16:00,750
those through TCP so Kezar format is

00:15:58,530 --> 00:16:03,360
very useful for that originally the keys

00:16:00,750 --> 00:16:06,300
protocol was used to interface with a

00:16:03,360 --> 00:16:09,240
packet radio modem but it is just a very

00:16:06,300 --> 00:16:12,750
simple way of using control bytes to

00:16:09,240 --> 00:16:16,680
mark the frames of packets so packet

00:16:12,750 --> 00:16:19,980
frame boundaries inside a byte stream so

00:16:16,680 --> 00:16:21,960
for this you can use the PDU two keys on

00:16:19,980 --> 00:16:23,400
keys to PDU blocks inside your

00:16:21,960 --> 00:16:25,980
satellites for example let's say you

00:16:23,400 --> 00:16:29,100
want to save some PDUs into a file you

00:16:25,980 --> 00:16:31,140
can plug your pd using here and send

00:16:29,100 --> 00:16:33,420
these to attract stream of bytes and to

00:16:31,140 --> 00:16:37,380
the file sync and to recover or to read

00:16:33,420 --> 00:16:40,140
those are PDUs you just hook up the file

00:16:37,380 --> 00:16:45,510
sauce into the keys to pd you block and

00:16:40,140 --> 00:16:50,100
recover your PDUs hdl-c protocol google

00:16:45,510 --> 00:16:54,780
radio already has some default hdl-c

00:16:50,100 --> 00:16:57,570
framer anti frame blocks in C++ but I

00:16:54,780 --> 00:17:00,090
have my own D framer and framer in

00:16:57,570 --> 00:17:02,640
Python into your satellites and these

00:17:00,090 --> 00:17:06,960
have some interesting theaters that the

00:17:02,640 --> 00:17:09,240
ones in Google radio don't have so this

00:17:06,960 --> 00:17:11,790
is a comparison on the top row there are

00:17:09,240 --> 00:17:14,010
the blocks from Kiner radio and on the

00:17:11,790 --> 00:17:16,320
bottom row we have the blocks from geo

00:17:14,010 --> 00:17:19,380
satellites and the main differences are

00:17:16,320 --> 00:17:22,770
that on the framer in G are satellites

00:17:19,380 --> 00:17:26,490
you are able to specify if you want many

00:17:22,770 --> 00:17:29,580
preamble bytes or flux these 7e if I'm

00:17:26,490 --> 00:17:32,850
use hdl-c flag and how many post amble

00:17:29,580 --> 00:17:35,430
bytes you want so this is very useful

00:17:32,850 --> 00:17:38,100
because when you are working over the

00:17:35,430 --> 00:17:40,920
air so when you want really to work with

00:17:38,100 --> 00:17:43,320
a receiver you need to transmit several

00:17:40,920 --> 00:17:45,480
times the preamble so that the receiver

00:17:43,320 --> 00:17:48,870
can log on to the clock of the signal

00:17:45,480 --> 00:17:53,460
and I think the hdl-c framer on radio

00:17:48,870 --> 00:17:58,590
only inserts this preamble once so this

00:17:53,460 --> 00:18:01,410
rather short for the D framer the main

00:17:58,590 --> 00:18:04,290
new theater is that you can skip these

00:18:01,410 --> 00:18:06,630
CRC's checking so of

00:18:04,290 --> 00:18:09,450
course you'll get a lot of garbage but

00:18:06,630 --> 00:18:12,390
when debugging things it is sometimes

00:18:09,450 --> 00:18:14,040
useful to disable the CRC check for

00:18:12,390 --> 00:18:17,250
example there are some of the satellites

00:18:14,040 --> 00:18:20,490
well the CRC endianness is not correctly

00:18:17,250 --> 00:18:25,350
implemented so it is useful to look into

00:18:20,490 --> 00:18:27,740
that some other components which you

00:18:25,350 --> 00:18:30,860
might find useful these are more

00:18:27,740 --> 00:18:34,080
specific specifically intended for

00:18:30,860 --> 00:18:36,570
satellites or space communications there

00:18:34,080 --> 00:18:40,140
are decoders for the gum space radius

00:18:36,570 --> 00:18:42,060
these are very often used in small

00:18:40,140 --> 00:18:45,930
satellites such as it's CubeSat

00:18:42,060 --> 00:18:48,780
I also have decoders for the Texas

00:18:45,930 --> 00:18:53,070
Instruments and silica labs FSK chips

00:18:48,780 --> 00:18:57,000
such as the c c11 family and these for

00:18:53,070 --> 00:19:00,120
463 Silicon Labs decoder these are not

00:18:57,000 --> 00:19:05,180
only using a few small and inexpensive

00:19:00,120 --> 00:19:08,940
satellites but also in many different

00:19:05,180 --> 00:19:13,160
short-range devices such as garage door

00:19:08,940 --> 00:19:16,140
openers and things like that of course

00:19:13,160 --> 00:19:20,130
several different for turbo correction

00:19:16,140 --> 00:19:23,610
decoders this is d s using fill currents

00:19:20,130 --> 00:19:26,100
very nicely thick and also using Aris

00:19:23,610 --> 00:19:28,920
code which is probably redundant it

00:19:26,100 --> 00:19:33,840
could be doing the same kind of decoding

00:19:28,920 --> 00:19:37,920
using fills lipstick also BCH decoder

00:19:33,840 --> 00:19:41,580
Golay and so on and there are several

00:19:37,920 --> 00:19:49,490
and disk Rumblers for use of protocols

00:19:41,580 --> 00:19:54,060
and CRC checkers for 16 years in 32 etc

00:19:49,490 --> 00:19:56,940
so about the roadmap things that have

00:19:54,060 --> 00:19:58,830
happened earlier this year during June I

00:19:56,940 --> 00:20:01,260
did a small contract for a stopped-up

00:19:58,830 --> 00:20:05,040
company in Poland which is called sat

00:20:01,260 --> 00:20:07,290
revolution and within this contract what

00:20:05,040 --> 00:20:11,190
I did was to adapt to your satellites

00:20:07,290 --> 00:20:13,140
for their two satellites that they

00:20:11,190 --> 00:20:16,290
launched through the International Space

00:20:13,140 --> 00:20:18,460
Station I think in May or something like

00:20:16,290 --> 00:20:21,670
that they were released in oh between

00:20:18,460 --> 00:20:24,490
July at the beginning of July so of

00:20:21,670 --> 00:20:26,890
course this is not my main goal when

00:20:24,490 --> 00:20:29,980
developing gr satellites to work

00:20:26,890 --> 00:20:32,770
freelance for companies as I said I do

00:20:29,980 --> 00:20:35,760
this for farm for learning and also so

00:20:32,770 --> 00:20:38,980
that anyone can decode amateur radio

00:20:35,760 --> 00:20:42,460
satellite signals but I think that this

00:20:38,980 --> 00:20:46,680
shows that gr satellite has become an

00:20:42,460 --> 00:20:52,150
useful to also for for companies and

00:20:46,680 --> 00:20:54,370
that since there are already many things

00:20:52,150 --> 00:20:56,530
implemented in dr satellites these

00:20:54,370 --> 00:21:00,220
lowers the development costs

00:20:56,530 --> 00:21:04,060
significantly so i only needed to do

00:21:00,220 --> 00:21:06,880
some new blocks to add these blocks to

00:21:04,060 --> 00:21:09,840
gr satellites for the sad revolution

00:21:06,880 --> 00:21:13,540
project and could reuse most of the

00:21:09,840 --> 00:21:16,090
components of your satellites of course

00:21:13,540 --> 00:21:19,030
the outcome of this project has been

00:21:16,090 --> 00:21:22,810
published under the GPL and is only

00:21:19,030 --> 00:21:25,330
gift-wrap page of the project during the

00:21:22,810 --> 00:21:29,020
summer I've been participating in the

00:21:25,330 --> 00:21:31,810
ISA Summer of Code in space been already

00:21:29,020 --> 00:21:34,900
mentioned that on Monday so Athanasius

00:21:31,810 --> 00:21:37,480
seharris from Thessaloniki in Greece has

00:21:34,900 --> 00:21:42,070
been adding blocks to G our satellites

00:21:37,480 --> 00:21:45,790
to support different protocols in the

00:21:42,070 --> 00:21:48,460
CSDs framework of standards so these are

00:21:45,790 --> 00:21:51,100
protocol standards not only used in

00:21:48,460 --> 00:21:54,880
low-earth orbit satellite missions but

00:21:51,100 --> 00:21:58,270
also used for deep space and there is a

00:21:54,880 --> 00:22:03,700
poster about Athanasius who work a hunt

00:21:58,270 --> 00:22:06,820
there in the poster session so speaking

00:22:03,700 --> 00:22:09,370
about future developments currently I

00:22:06,820 --> 00:22:13,530
haven't posted anything to go to radio

00:22:09,370 --> 00:22:16,600
3.8 or Python 3 I plan to do this

00:22:13,530 --> 00:22:19,780
probably when I get back home from this

00:22:16,600 --> 00:22:24,070
conference mainly the reason that I

00:22:19,780 --> 00:22:26,620
haven't ported at least before was that

00:22:24,070 --> 00:22:29,980
Athanasius was working already on the

00:22:26,620 --> 00:22:32,150
3.7 version so I didn't work in I didn't

00:22:29,980 --> 00:22:34,490
want to change

00:22:32,150 --> 00:22:37,820
things radically through the ISA Summer

00:22:34,490 --> 00:22:40,059
of Code project but it's this project is

00:22:37,820 --> 00:22:43,630
also coming to an end and next week so

00:22:40,059 --> 00:22:47,150
probably could Radio 3.8 will be

00:22:43,630 --> 00:22:49,669
supported to next week or maybe by the

00:22:47,150 --> 00:22:53,690
end of September but I'm also planning

00:22:49,669 --> 00:22:56,240
some larger changes one of the problems

00:22:53,690 --> 00:22:57,529
I find is that gr satellites has grown

00:22:56,240 --> 00:22:59,720
enormously

00:22:57,529 --> 00:23:03,049
it started with very few satellites and

00:22:59,720 --> 00:23:06,110
now it has as I said almost 80 or maybe

00:23:03,049 --> 00:23:08,450
more than 80 so it's crazy stuff to have

00:23:06,110 --> 00:23:10,880
a different flow graph for each of the

00:23:08,450 --> 00:23:13,279
satellites if I want to change a

00:23:10,880 --> 00:23:16,070
particular parameter for the FSK

00:23:13,279 --> 00:23:18,860
demodulation for example this is used in

00:23:16,070 --> 00:23:22,190
maybe 60 different flow graphs so it's

00:23:18,860 --> 00:23:24,980
impossible to go and change it in all

00:23:22,190 --> 00:23:28,250
them and as you can imagine many

00:23:24,980 --> 00:23:30,409
satellites use the different use sorry

00:23:28,250 --> 00:23:32,090
the same kind of forward error

00:23:30,409 --> 00:23:34,270
correction or more them or things like

00:23:32,090 --> 00:23:37,940
that so there is a lot of repetition

00:23:34,270 --> 00:23:40,580
between different flow graphs so I would

00:23:37,940 --> 00:23:43,580
like to take a more modular approach to

00:23:40,580 --> 00:23:46,070
try to solve all these repetition and

00:23:43,580 --> 00:23:47,649
also so that it is easier to add a new

00:23:46,070 --> 00:23:51,020
satellite just by doing some

00:23:47,649 --> 00:23:53,029
specification of what's the modulation

00:23:51,020 --> 00:23:56,750
used what's the kind of radio or

00:23:53,029 --> 00:24:00,890
protocols and then at the decoding chain

00:23:56,750 --> 00:24:04,010
would be automatically built by taking

00:24:00,890 --> 00:24:06,440
those components I also would like to

00:24:04,010 --> 00:24:08,990
support more flexibility with the

00:24:06,440 --> 00:24:10,909
outputs so that you can enable and

00:24:08,990 --> 00:24:13,760
disable what gets printed to the screen

00:24:10,909 --> 00:24:17,419
what gets ready directly to which files

00:24:13,760 --> 00:24:18,250
and so on and also more flexibility with

00:24:17,419 --> 00:24:22,370
the inputs

00:24:18,250 --> 00:24:25,100
okay UDP real time input is fine

00:24:22,370 --> 00:24:27,010
but if you have several recordings and

00:24:25,100 --> 00:24:29,570
maybe those are 10 minutes long

00:24:27,010 --> 00:24:33,140
processing processing those in real time

00:24:29,570 --> 00:24:35,149
is quite boring and cumbersome so what

00:24:33,140 --> 00:24:38,409
we need is for a way to be able to

00:24:35,149 --> 00:24:41,330
process recordings faster than real time

00:24:38,409 --> 00:24:44,600
perhaps it would be good to add some

00:24:41,330 --> 00:24:46,020
Greek components so that people can

00:24:44,600 --> 00:24:47,940
already have some

00:24:46,020 --> 00:24:50,790
feedback about the quality of the signal

00:24:47,940 --> 00:24:53,120
and things like that and I'm also open

00:24:50,790 --> 00:24:56,730
for any kind of suggestions about what

00:24:53,120 --> 00:24:59,340
would you find useful the main problem

00:24:56,730 --> 00:25:02,520
with this is that it will change the way

00:24:59,340 --> 00:25:06,480
that current users interface with the

00:25:02,520 --> 00:25:08,580
software so I really need to speak with

00:25:06,480 --> 00:25:10,710
the community to find something that

00:25:08,580 --> 00:25:13,230
it's useful for everyone and that not

00:25:10,710 --> 00:25:16,290
brakes are the way that people are used

00:25:13,230 --> 00:25:18,840
to doing things I also would like to try

00:25:16,290 --> 00:25:22,290
adding some FSK demodulators by david

00:25:18,840 --> 00:25:25,170
rowe these work on the IQ signal rather

00:25:22,290 --> 00:25:26,850
than on the FMJ modulating signal and by

00:25:25,170 --> 00:25:30,090
doing so can achieve better performance

00:25:26,850 --> 00:25:34,110
by filtering the different side lobes of

00:25:30,090 --> 00:25:36,720
the FSK signal I also want to add some

00:25:34,110 --> 00:25:38,970
tests with time I have compiled a

00:25:36,720 --> 00:25:41,310
collection of short sample recordings

00:25:38,970 --> 00:25:45,540
from different satellites so what I need

00:25:41,310 --> 00:25:48,150
is for a way to run these recordings as

00:25:45,540 --> 00:25:50,400
end-to-end tests all the inter coders to

00:25:48,150 --> 00:25:53,490
be sure that during an upgrade nothing

00:25:50,400 --> 00:25:55,980
is broken I'm not completely sure how to

00:25:53,490 --> 00:25:58,830
go about all of these so as I said

00:25:55,980 --> 00:26:01,200
comments are welcome and I'm also not

00:25:58,830 --> 00:26:07,950
sure when I'll be able to do all these

00:26:01,200 --> 00:26:09,990
tasks since your satellites I usually

00:26:07,950 --> 00:26:12,570
say it's my largest project but it's

00:26:09,990 --> 00:26:15,780
also kind of site project because most

00:26:12,570 --> 00:26:19,040
of my time not goes to gr satellites but

00:26:15,780 --> 00:26:22,350
to many other smaller and varied

00:26:19,040 --> 00:26:25,310
projects or experience and really having

00:26:22,350 --> 00:26:30,150
to do with amateur radio on satellites

00:26:25,310 --> 00:26:33,170
so let's go for the demo what I have

00:26:30,150 --> 00:26:36,270
here prepared is the lilacs of one

00:26:33,170 --> 00:26:41,220
jarred lights decoder with a recording

00:26:36,270 --> 00:26:43,530
that transmits a JPEG file image so I

00:26:41,220 --> 00:26:46,530
can start the decoder on the plague pile

00:26:43,530 --> 00:26:49,200
like this and some packets will start

00:26:46,530 --> 00:26:52,610
even in a moment so lilacs at was a

00:26:49,200 --> 00:26:56,250
Chinese amateur of satellite launch in

00:26:52,610 --> 00:26:58,440
2017 if I recall correctly from the

00:26:56,250 --> 00:26:59,280
international space station it orbited

00:26:58,440 --> 00:27:03,600
the earth for

00:26:59,280 --> 00:27:08,280
for about 1 year or so and then we

00:27:03,600 --> 00:27:09,570
entered in the atmosphere and I promise

00:27:08,280 --> 00:27:12,450
the signal is coming

00:27:09,570 --> 00:27:15,480
itÃ­d says these yesterday so there we

00:27:12,450 --> 00:27:17,670
see some packets already the decoder is

00:27:15,480 --> 00:27:20,670
counting packet number zero one so on

00:27:17,670 --> 00:27:23,220
and we see telemetry data I think it's

00:27:20,670 --> 00:27:26,310
too small to see but you can see that

00:27:23,220 --> 00:27:29,400
each packet is broken up into different

00:27:26,310 --> 00:27:33,930
values and this gets printed on the

00:27:29,400 --> 00:27:37,590
screen so let's see if I can display

00:27:33,930 --> 00:27:40,560
both and now the image is incoming we

00:27:37,590 --> 00:27:44,400
can see image packets it says packet

00:27:40,560 --> 00:27:47,240
number whatever camera so the image JPEG

00:27:44,400 --> 00:27:50,460
file is transmitted at four point eight

00:27:47,240 --> 00:27:52,980
bits per kilobits per second I see the

00:27:50,460 --> 00:27:55,380
old days of the internet and it takes a

00:27:52,980 --> 00:27:57,480
while to download the small JPEG in

00:27:55,380 --> 00:28:00,480
image but you can see that the decoder

00:27:57,480 --> 00:28:03,750
is updating the image in real time as

00:28:00,480 --> 00:28:06,450
new pieces of the image come and all of

00:28:03,750 --> 00:28:10,260
this besides displaying the image is

00:28:06,450 --> 00:28:13,890
done inside Q radio so the only external

00:28:10,260 --> 00:28:18,150
component is this image viewer called

00:28:13,890 --> 00:28:20,490
PHA which just keeps refreshing the JPEG

00:28:18,150 --> 00:28:25,080
file which is in the hard drive of the

00:28:20,490 --> 00:28:28,230
computer and it's a block engine radio

00:28:25,080 --> 00:28:30,150
which is finding where to store each of

00:28:28,230 --> 00:28:34,130
the blocks of the image and keeps

00:28:30,150 --> 00:28:37,440
updating the JPEG file in the hard drive

00:28:34,130 --> 00:28:39,000
so with this my presentation comes to an

00:28:37,440 --> 00:28:42,080
end and I'll be happy to answer any

00:28:39,000 --> 00:28:42,080
question thank you

00:28:44,890 --> 00:29:04,800
I myself and I think others in this room

00:29:00,760 --> 00:29:08,590
believe that open-source implementations

00:29:04,800 --> 00:29:11,920
should be actually the publication of

00:29:08,590 --> 00:29:13,570
standards so um and then that's that's

00:29:11,920 --> 00:29:15,790
kind of what you're doing you saying

00:29:13,570 --> 00:29:17,710
okay like there's no publish standard

00:29:15,790 --> 00:29:19,020
for this and that satellite so I'm just

00:29:17,710 --> 00:29:21,520
gonna write the code and then the code

00:29:19,020 --> 00:29:23,110
kind of became becomes the Senate is

00:29:21,520 --> 00:29:24,550
that is that something you intended do

00:29:23,110 --> 00:29:26,320
you do you agree with that statement is

00:29:24,550 --> 00:29:28,840
that how would you feel about geo

00:29:26,320 --> 00:29:31,390
satellites being like something that

00:29:28,840 --> 00:29:33,370
people reference as when they say okay

00:29:31,390 --> 00:29:36,280
like I want to know how this particular

00:29:33,370 --> 00:29:38,350
satellite is it works how do you feel

00:29:36,280 --> 00:29:41,950
about that yeah I completely agree with

00:29:38,350 --> 00:29:45,130
your comment so in one way if you have

00:29:41,950 --> 00:29:47,530
the open-source code to work with some

00:29:45,130 --> 00:29:50,290
protocol this is already a documentation

00:29:47,530 --> 00:29:53,440
about the protocol of the standard of

00:29:50,290 --> 00:29:56,110
course just writing code is not the Bell

00:29:53,440 --> 00:29:59,350
the best way for people to understand

00:29:56,110 --> 00:30:01,690
how how critical work imagine if all the

00:29:59,350 --> 00:30:04,930
internet protocols were not written in

00:30:01,690 --> 00:30:07,000
RFC's but rather you are given open

00:30:04,930 --> 00:30:09,040
source implementations this would be

00:30:07,000 --> 00:30:11,860
really messy to study so this is the

00:30:09,040 --> 00:30:14,380
reason why for the most interesting

00:30:11,860 --> 00:30:18,580
parts of the protocols I also write some

00:30:14,380 --> 00:30:21,640
blog post about it but I also think that

00:30:18,580 --> 00:30:24,430
open source is a complimentary good

00:30:21,640 --> 00:30:26,530
documentation for open protocols or

00:30:24,430 --> 00:30:28,300
standards since if you have the code you

00:30:26,530 --> 00:30:31,390
can test it you know it already runs you

00:30:28,300 --> 00:30:33,820
can adapt it for your application so in

00:30:31,390 --> 00:30:38,290
some way it's complimentary to a PDF

00:30:33,820 --> 00:30:40,450
file describing the standard and it's

00:30:38,290 --> 00:30:42,910
unambiguous yes so you have something

00:30:40,450 --> 00:30:46,920
some sample data and some code which

00:30:42,910 --> 00:30:46,920
works with the data thank you very much

00:30:47,580 --> 00:30:49,640

YouTube URL: https://www.youtube.com/watch?v=pAjqWP97OF4


