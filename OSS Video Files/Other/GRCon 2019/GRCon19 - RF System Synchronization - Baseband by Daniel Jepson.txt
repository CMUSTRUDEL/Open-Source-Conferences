Title: GRCon19 - RF System Synchronization - Baseband by Daniel Jepson
Publication date: 2019-11-05
Playlist: GRCon 2019
Description: 
	RF System Synchronization - Baseband by Daniel Jepson

Systems are evolving: channel counts are increasing, alignment requirements are tightening, and units are now spread far afield. These systems demand higher synchronization performance, as well as ease of use and installation. This presentation will review basic and advanced topics of baseband synchronization from the lens of USRP hardware. We will compare methods of distributing time and aligned reference clocks through short-distance tree and daisy-chained topologies and how hardware setup can directly impact your synchronization results. Current market trends for aligning geographically distributed systems are also evolving rapidly. One such technology is White Rabbit, which enables baseband clock and time synchronization of less than 1 ns at distances up to 10 km! Come learn about USRP capabilities, how to avoid common pitfalls, and discover how to get the most out of your SDR equipment!
Captions: 
	00:00:14,340 --> 00:00:18,720
hey everyone good afternoon my name is

00:00:17,820 --> 00:00:22,320
Daniel Jepsen

00:00:18,720 --> 00:00:25,020
I am a SDR group manager with National

00:00:22,320 --> 00:00:26,759
Instruments working on us our P's for

00:00:25,020 --> 00:00:32,910
the last couple years absolutely loving

00:00:26,759 --> 00:00:34,530
it this has been kind of a wild ride dan

00:00:32,910 --> 00:00:37,079
Baker who gave the last presentation

00:00:34,530 --> 00:00:38,520
myself have been working to define what

00:00:37,079 --> 00:00:41,430
synchronization means on a hardware

00:00:38,520 --> 00:00:43,829
level and it is an honor to be able to

00:00:41,430 --> 00:00:45,270
be up here and to talk to you all about

00:00:43,829 --> 00:00:47,089
some things that we've discovered along

00:00:45,270 --> 00:00:50,760
the way some pitfalls that we discovered

00:00:47,089 --> 00:00:52,920
also some tips and tricks on how you can

00:00:50,760 --> 00:00:56,760
get the most out of your SDR equipment

00:00:52,920 --> 00:00:59,579
and so without further ado we're going

00:00:56,760 --> 00:01:01,109
to jump into what these RS systems look

00:00:59,579 --> 00:01:03,449
like the Dan was talking about from an

00:01:01,109 --> 00:01:05,990
ello standpoint from a baseband

00:01:03,449 --> 00:01:08,790
standpoint so usually one of his

00:01:05,990 --> 00:01:13,140
examples that Dan brought up this 5g

00:01:08,790 --> 00:01:16,200
massive MIMO testbed we have 64 of these

00:01:13,140 --> 00:01:17,610
X 310 devices in this rack and that is

00:01:16,200 --> 00:01:19,200
incredible and looking at it from this

00:01:17,610 --> 00:01:21,299
side I'm like man that is really sweet

00:01:19,200 --> 00:01:23,280
we got all those antennas this looks

00:01:21,299 --> 00:01:25,860
really fancy we got a lot of RF bling

00:01:23,280 --> 00:01:27,180
going on here but what I want to do in

00:01:25,860 --> 00:01:28,860
this presentation is actually take this

00:01:27,180 --> 00:01:30,810
rack and turn it around and look at that

00:01:28,860 --> 00:01:32,579
rat's nest of cables in the back that

00:01:30,810 --> 00:01:34,829
kind of explains how all this magic

00:01:32,579 --> 00:01:37,920
works from a baseband perspective as

00:01:34,829 --> 00:01:39,719
opposed from the cool RF perspective so

00:01:37,920 --> 00:01:41,009
taking one of these devices out of the

00:01:39,719 --> 00:01:42,630
rack and kind of looking at this is the

00:01:41,009 --> 00:01:44,820
same block diagram that Dan head and his

00:01:42,630 --> 00:01:46,619
slides we can see a couple different

00:01:44,820 --> 00:01:49,020
aspects of this we have the RO subsystem

00:01:46,619 --> 00:01:50,430
that Dan talked about at length we have

00:01:49,020 --> 00:01:52,920
our ellos we have our front end

00:01:50,430 --> 00:01:54,659
processing we have our D SAS or filters

00:01:52,920 --> 00:01:56,159
or mixers and all that and then we get

00:01:54,659 --> 00:01:58,500
to the stuff that I deal with a lot on a

00:01:56,159 --> 00:02:01,439
digital basis and that's the ATC's

00:01:58,500 --> 00:02:04,320
that's the baseband clocking that's our

00:02:01,439 --> 00:02:05,939
data movement FPGA or ASIC and I want to

00:02:04,320 --> 00:02:07,259
go through three areas here that I'm

00:02:05,939 --> 00:02:09,270
going to expound upon a little bit later

00:02:07,259 --> 00:02:11,640
in the presentation the first is a

00:02:09,270 --> 00:02:13,530
reference clock input and fan-out so we

00:02:11,640 --> 00:02:15,510
have like that I mentioned our most

00:02:13,530 --> 00:02:18,660
critical buffer and almost the entire

00:02:15,510 --> 00:02:20,010
design is where we receive this 10

00:02:18,660 --> 00:02:22,170
megahertz reference clock coming into

00:02:20,010 --> 00:02:23,459
the device and then the fan-out that

00:02:22,170 --> 00:02:26,280
goes to a couple different places it

00:02:23,459 --> 00:02:27,780
goes to the converter PLL the converter

00:02:26,280 --> 00:02:30,720
clock PLL so this is the clock

00:02:27,780 --> 00:02:33,300
drives our 80 season or decks it goes to

00:02:30,720 --> 00:02:36,540
the FPGA or ASIC for day movement and

00:02:33,300 --> 00:02:40,230
then it also goes to our ellos and does

00:02:36,540 --> 00:02:41,700
our RF synchronization the second part

00:02:40,230 --> 00:02:43,590
of this is the converter clock PLL so

00:02:41,700 --> 00:02:45,120
that takes a reference clock multiplies

00:02:43,590 --> 00:02:47,610
it up to whatever rate that we're using

00:02:45,120 --> 00:02:52,470
for the x3 10 devices it's 200 megahertz

00:02:47,610 --> 00:02:53,850
or sometimes 120 megahertz and then the

00:02:52,470 --> 00:02:56,400
last part of this actually goes straight

00:02:53,850 --> 00:02:59,670
or should go straight into this bus

00:02:56,400 --> 00:03:01,739
interface device and that is some sort

00:02:59,670 --> 00:03:03,000
of concept of time and triggers so we've

00:03:01,739 --> 00:03:05,910
talked a lot about this conference about

00:03:03,000 --> 00:03:07,350
GPS we've talked about PPS and I'm gonna

00:03:05,910 --> 00:03:09,930
go into that a little bit later on how

00:03:07,350 --> 00:03:11,519
we can use these things it's a great

00:03:09,930 --> 00:03:15,140
effect inside this device to make our

00:03:11,519 --> 00:03:18,390
whole system synchronization to work out

00:03:15,140 --> 00:03:20,250
so before we start with a rack of 64

00:03:18,390 --> 00:03:22,050
years or piece I want to take a step

00:03:20,250 --> 00:03:23,850
back and look at what it might look like

00:03:22,050 --> 00:03:26,370
to build this kind of development system

00:03:23,850 --> 00:03:27,959
just on a bench top on my desk because

00:03:26,370 --> 00:03:30,330
whoever started with this gigantic

00:03:27,959 --> 00:03:32,010
system definitely did not start with 64

00:03:30,330 --> 00:03:33,660
they probably started with one to get

00:03:32,010 --> 00:03:36,900
their basics right so let's start with

00:03:33,660 --> 00:03:38,970
1x 310 device here we have a reference

00:03:36,900 --> 00:03:41,160
clock inside we have a host computer

00:03:38,970 --> 00:03:42,840
that we're dumping all this data to and

00:03:41,160 --> 00:03:44,610
throughout this presentation I'm gonna

00:03:42,840 --> 00:03:47,040
talk a lot about data movement from an

00:03:44,610 --> 00:03:50,250
ADC side a lot of this applies just in

00:03:47,040 --> 00:03:52,290
Reverse to the DAC side as well so we're

00:03:50,250 --> 00:03:54,930
gonna be dumping data from our user off

00:03:52,290 --> 00:03:57,150
to our host computer and then we need an

00:03:54,930 --> 00:03:59,400
RF signal to feed this device as well so

00:03:57,150 --> 00:04:01,079
we can see if the whole chain all the

00:03:59,400 --> 00:04:03,030
way from RF through baseband in the back

00:04:01,079 --> 00:04:06,540
to the host actually works out as we

00:04:03,030 --> 00:04:07,920
expect it to first thing I want to do is

00:04:06,540 --> 00:04:09,989
introduce a couple different ways of

00:04:07,920 --> 00:04:12,390
viewing a synchronization the first is

00:04:09,989 --> 00:04:14,010
we can look like an oscilloscope just

00:04:12,390 --> 00:04:15,600
straight at the clocks so we have a

00:04:14,010 --> 00:04:18,030
reference clock up here in green that's

00:04:15,600 --> 00:04:19,829
10 megahertz moderately standard across

00:04:18,030 --> 00:04:21,180
industry and then we have our convertor

00:04:19,829 --> 00:04:23,340
clock for our PLL's

00:04:21,180 --> 00:04:26,220
or coming off of our converter clock PLL

00:04:23,340 --> 00:04:30,620
that drives our ADCs and DACs and that's

00:04:26,220 --> 00:04:32,970
at 100 megahertz in this example so

00:04:30,620 --> 00:04:35,310
another way of looking at this is if we

00:04:32,970 --> 00:04:37,110
look at data in the time domain and so

00:04:35,310 --> 00:04:39,650
here is our sine wave that's inherently

00:04:37,110 --> 00:04:41,220
really hard to draw in PowerPoint and

00:04:39,650 --> 00:04:43,230
we're gonna

00:04:41,220 --> 00:04:45,270
is kind of trivial it's one device we're

00:04:43,230 --> 00:04:48,210
gonna look at this on our host computer

00:04:45,270 --> 00:04:49,080
we've like we got a sine wave right but

00:04:48,210 --> 00:04:51,150
this doesn't tell us anything about

00:04:49,080 --> 00:04:52,710
synchronization so we're gonna skip past

00:04:51,150 --> 00:04:55,170
this and I'll come back to this a little

00:04:52,710 --> 00:04:58,230
bit more later as we look at how we can

00:04:55,170 --> 00:05:00,840
build a couple devices in here so we got

00:04:58,230 --> 00:05:02,370
one device good job we were able to

00:05:00,840 --> 00:05:04,260
prove out that we got data all the way

00:05:02,370 --> 00:05:06,150
through we got the end up the host our

00:05:04,260 --> 00:05:07,980
RF is working our baseband is working

00:05:06,150 --> 00:05:10,110
awesome now let's increase our device

00:05:07,980 --> 00:05:11,490
count freeze and prototyping we're just

00:05:10,110 --> 00:05:14,580
gonna use the internal oscillators and

00:05:11,490 --> 00:05:16,230
both we're going to take one RSA and

00:05:14,580 --> 00:05:19,080
we're gonna split it and we're going to

00:05:16,230 --> 00:05:20,580
drive that into both devices and see hey

00:05:19,080 --> 00:05:22,170
does the RF data we're getting back from

00:05:20,580 --> 00:05:24,060
both of these devices actually makes

00:05:22,170 --> 00:05:26,460
sense we're doing everything we can from

00:05:24,060 --> 00:05:27,900
a Nelo perspective to make sure our RF

00:05:26,460 --> 00:05:29,340
front ends are aligned but now let's

00:05:27,900 --> 00:05:31,290
look at a base Pam perspective and make

00:05:29,340 --> 00:05:35,880
sure all of our converters are sampling

00:05:31,290 --> 00:05:38,340
this and this signal synchronously so we

00:05:35,880 --> 00:05:39,540
have our oscilloscope view here we're

00:05:38,340 --> 00:05:42,060
looking at our first reference clock

00:05:39,540 --> 00:05:44,250
it's solid we look at our first device

00:05:42,060 --> 00:05:46,169
clock it's locked to our reference clock

00:05:44,250 --> 00:05:47,400
yay we're looking there a second

00:05:46,169 --> 00:05:49,620
reference clock it it's actually offset

00:05:47,400 --> 00:05:51,060
from our first one which kind of makes

00:05:49,620 --> 00:05:51,960
sense right there are two different

00:05:51,060 --> 00:05:53,280
clocks are there two different

00:05:51,960 --> 00:05:54,630
oscillators and two different devices

00:05:53,280 --> 00:05:57,960
offering in two different temperatures

00:05:54,630 --> 00:05:59,160
but then we start we keep triggering on

00:05:57,960 --> 00:06:00,150
this first reference clock and we're

00:05:59,160 --> 00:06:01,950
actually going to see the second one

00:06:00,150 --> 00:06:04,050
start drifting with respect to it and

00:06:01,950 --> 00:06:05,190
again it kind of makes sense there are

00:06:04,050 --> 00:06:06,540
different oscillators different

00:06:05,190 --> 00:06:08,610
processes different manufacturing

00:06:06,540 --> 00:06:09,900
probably different voltages definitely

00:06:08,610 --> 00:06:11,910
different temperatures and so we're

00:06:09,900 --> 00:06:13,919
gonna see the device be reference and

00:06:11,910 --> 00:06:15,050
converter clocks actually drift back and

00:06:13,919 --> 00:06:18,600
forth here

00:06:15,050 --> 00:06:21,720
so from an RF perspective what we're

00:06:18,600 --> 00:06:24,870
looking just at RF data here we're gonna

00:06:21,720 --> 00:06:27,300
see a very similar effect where if we're

00:06:24,870 --> 00:06:29,550
triggering on the device a x' data

00:06:27,300 --> 00:06:31,919
coming in we're gonna see the device B's

00:06:29,550 --> 00:06:34,260
data shift with respect to that back and

00:06:31,919 --> 00:06:35,700
forth as the oscillator is warm up and

00:06:34,260 --> 00:06:38,850
cool down and do whatever they else they

00:06:35,700 --> 00:06:40,370
do so we have some problems here the way

00:06:38,850 --> 00:06:44,850
to solve this as you might have guessed

00:06:40,370 --> 00:06:48,030
let's add there we go I have a remote I

00:06:44,850 --> 00:06:50,070
forgot about that let's add a splitter

00:06:48,030 --> 00:06:51,479
to this and let's add or let's add

00:06:50,070 --> 00:06:53,460
another splitter and let's actually take

00:06:51,479 --> 00:06:54,580
a single reference clock and split it to

00:06:53,460 --> 00:06:56,650
both devices

00:06:54,580 --> 00:06:58,210
right so shared reference clocks that

00:06:56,650 --> 00:07:00,699
makes sense especially from an ello

00:06:58,210 --> 00:07:02,259
perspective that's also going to make

00:07:00,699 --> 00:07:03,879
sense from a baseband perspective so

00:07:02,259 --> 00:07:05,710
taking this we're going to add in an

00:07:03,879 --> 00:07:07,750
external reference clock source to both

00:07:05,710 --> 00:07:09,340
of these devices split it to the both

00:07:07,750 --> 00:07:12,069
devices and let's see what that looks

00:07:09,340 --> 00:07:13,300
like from an oscilloscope for you so now

00:07:12,069 --> 00:07:15,610
we have a single reference clock

00:07:13,300 --> 00:07:18,069
we're triggering on one of the edges of

00:07:15,610 --> 00:07:21,210
our 10 megahertz reference and voila

00:07:18,069 --> 00:07:23,409
both of our device clocks line up and

00:07:21,210 --> 00:07:24,939
just because I don't believe this yet

00:07:23,409 --> 00:07:27,520
we're going to run this a couple times

00:07:24,939 --> 00:07:29,199
and try / reset cycles power the whole

00:07:27,520 --> 00:07:32,530
thing down power it all up see what

00:07:29,199 --> 00:07:33,969
happens ok so it shifted a little bit

00:07:32,530 --> 00:07:37,210
their second clock shifted a little bit

00:07:33,969 --> 00:07:39,580
really can't tell because it's all it's

00:07:37,210 --> 00:07:41,830
all periodic throughout here and we're

00:07:39,580 --> 00:07:43,780
gonna try it again ok great from this

00:07:41,830 --> 00:07:46,270
perspective we have aligned reference

00:07:43,780 --> 00:07:47,560
clocks but let's look at it from the RF

00:07:46,270 --> 00:07:49,539
perspective and let's look at the RF

00:07:47,560 --> 00:07:52,870
data coming back into the device so

00:07:49,539 --> 00:07:56,500
here's our first signal coming in uh-oh

00:07:52,870 --> 00:07:58,629
we're off by a convertor clock that's

00:07:56,500 --> 00:07:59,710
interesting so I'm going to try it all

00:07:58,629 --> 00:08:03,219
gang because I don't believe it again

00:07:59,710 --> 00:08:04,810
and I'm going to we're off again by

00:08:03,219 --> 00:08:07,180
another converted clock period and this

00:08:04,810 --> 00:08:09,520
is actually going to continue ad nauseam

00:08:07,180 --> 00:08:13,719
all the way down in one converter clock

00:08:09,520 --> 00:08:15,219
segments and this is because we don't

00:08:13,719 --> 00:08:17,589
have the concept of time yet in the

00:08:15,219 --> 00:08:19,900
system so device a is over here saying

00:08:17,589 --> 00:08:21,849
I'm going to start acquiring now and

00:08:19,900 --> 00:08:23,620
then device B maybe has a little bit of

00:08:21,849 --> 00:08:26,710
latency in the Lincoln says oh I'm going

00:08:23,620 --> 00:08:27,969
to start acquiring now those two are

00:08:26,710 --> 00:08:30,759
going to start a completely different

00:08:27,969 --> 00:08:32,500
reference clock or converter clock yet

00:08:30,759 --> 00:08:33,940
even though on the oscilloscope view

00:08:32,500 --> 00:08:35,019
they're all lined up whenever we're

00:08:33,940 --> 00:08:37,899
triggering a start and a stop

00:08:35,019 --> 00:08:40,240
acquisition on both devices we have no

00:08:37,899 --> 00:08:42,310
idea we have no concept of time on our

00:08:40,240 --> 00:08:44,350
SDR devices and therefore we can't have

00:08:42,310 --> 00:08:46,570
synchronous captures like this in RF

00:08:44,350 --> 00:08:48,040
domain now post-processing you could

00:08:46,570 --> 00:08:49,089
totally go back and collapse these on

00:08:48,040 --> 00:08:50,769
top of each other if it really is

00:08:49,089 --> 00:08:53,110
periodic but that only works for

00:08:50,769 --> 00:08:55,149
periodic periodic test tones like I'm

00:08:53,110 --> 00:08:58,480
using right here and not for real life

00:08:55,149 --> 00:08:59,980
signals so before I get into the

00:08:58,480 --> 00:09:02,709
solution for that let me present another

00:08:59,980 --> 00:09:05,520
problem up until now we had a very

00:09:02,709 --> 00:09:07,510
uniform 10 Hertz 100 megahertz

00:09:05,520 --> 00:09:07,990
relationship between our reference and

00:09:07,510 --> 00:09:09,310
our converter

00:09:07,990 --> 00:09:11,190
clocks let's make this a little more

00:09:09,310 --> 00:09:14,970
interesting let's go at the 25 megahertz

00:09:11,190 --> 00:09:19,120
converter clock what happens here is

00:09:14,970 --> 00:09:21,160
device a may have started its PLL with

00:09:19,120 --> 00:09:23,620
with respect to this first reference

00:09:21,160 --> 00:09:27,640
clock edge if we add another device on

00:09:23,620 --> 00:09:29,620
here it may have started its PLL

00:09:27,640 --> 00:09:33,399
with respect to a different edge of the

00:09:29,620 --> 00:09:36,430
clock and because we have now introduced

00:09:33,399 --> 00:09:38,860
a err our divider value inside of our

00:09:36,430 --> 00:09:41,320
PLL to make the relationship between 10

00:09:38,860 --> 00:09:43,990
and 25 megahertz work we're gonna have

00:09:41,320 --> 00:09:46,089
180 degree phase ambiguity between all

00:09:43,990 --> 00:09:47,709
of our reference clock or all of our

00:09:46,089 --> 00:09:49,270
converter clocks all the way down if we

00:09:47,709 --> 00:09:51,459
had more of these devices we're gonna

00:09:49,270 --> 00:09:54,490
see some line up with a vise a some line

00:09:51,459 --> 00:09:57,520
up with device B what this looks like in

00:09:54,490 --> 00:10:00,490
our sampled waveforms is we're gonna see

00:09:57,520 --> 00:10:02,410
a half a converter period offset now

00:10:00,490 --> 00:10:03,970
because this effect actually compounds

00:10:02,410 --> 00:10:06,130
that the effect of not knowing when we

00:10:03,970 --> 00:10:08,170
can start and stop our acquisitions this

00:10:06,130 --> 00:10:10,320
is just this is going to repeat itself

00:10:08,170 --> 00:10:12,279
every converter period all the way down

00:10:10,320 --> 00:10:14,770
so I didn't draw it here I just

00:10:12,279 --> 00:10:16,540
collapsed all of those multiples of

00:10:14,770 --> 00:10:18,370
converter clock berries all the way down

00:10:16,540 --> 00:10:20,110
so you're going to see a bunch of them

00:10:18,370 --> 00:10:23,890
stacked up at this half converter clock

00:10:20,110 --> 00:10:25,959
period offset and that tells us we have

00:10:23,890 --> 00:10:28,000
a 180 degree phase ambiguity or one to

00:10:25,959 --> 00:10:29,800
two phase ambiguity if we had an even

00:10:28,000 --> 00:10:31,510
more weird clock relationship here so I

00:10:29,800 --> 00:10:33,100
drew ten to twenty five megahertz if we

00:10:31,510 --> 00:10:34,899
had like a ten to one twenty two point

00:10:33,100 --> 00:10:37,240
eight eight megahertz good grief you're

00:10:34,899 --> 00:10:38,680
gonna have a ton of those lining up and

00:10:37,240 --> 00:10:40,420
you're gonna like it's not synchronized

00:10:38,680 --> 00:10:44,110
at all when a reality is just hitting

00:10:40,420 --> 00:10:45,850
these very fine quantization steps so

00:10:44,110 --> 00:10:48,490
the solution for this as we've hinted to

00:10:45,850 --> 00:10:50,230
throughout this conference is add a PPS

00:10:48,490 --> 00:10:53,170
add some sort of time add some sort of

00:10:50,230 --> 00:10:55,660
trigger concept what a PPS does is it

00:10:53,170 --> 00:10:58,630
identifies a single reference clock edge

00:10:55,660 --> 00:11:00,190
on all devices and let me go a step

00:10:58,630 --> 00:11:03,700
further it needs to identify a unique

00:11:00,190 --> 00:11:08,050
reference clock edge on all devices and

00:11:03,700 --> 00:11:10,779
so this is used for PLL resets this is

00:11:08,050 --> 00:11:13,570
used for keeping a concept of time in a

00:11:10,779 --> 00:11:17,290
time keeper on each one of the SDR

00:11:13,570 --> 00:11:19,300
devices and it's because now we have

00:11:17,290 --> 00:11:21,699
timekeepers we can actually start stop

00:11:19,300 --> 00:11:23,529
our acquisitions at known times

00:11:21,699 --> 00:11:25,480
so if I have my two devices up here and

00:11:23,529 --> 00:11:27,129
I say all right I want to buy say to

00:11:25,480 --> 00:11:29,139
start in 10 seconds and I want device B

00:11:27,129 --> 00:11:30,879
to start in 10 seconds I say go they're

00:11:29,139 --> 00:11:32,230
just sitting there idling until that

00:11:30,879 --> 00:11:35,549
10-second mark is hit and then both

00:11:32,230 --> 00:11:38,230
start the acquisition at the same time

00:11:35,549 --> 00:11:39,669
so adding to our system here we're gonna

00:11:38,230 --> 00:11:42,730
add in another component and that is the

00:11:39,669 --> 00:11:46,809
PPS or trigger input to both of our

00:11:42,730 --> 00:11:48,249
devices here split again and we're only

00:11:46,809 --> 00:11:50,980
going to go to the RF domain this time

00:11:48,249 --> 00:11:52,600
we have our first device we're gonna add

00:11:50,980 --> 00:11:54,519
our second device we're gonna run it a

00:11:52,600 --> 00:11:58,079
few more times I can't believe it yet

00:11:54,519 --> 00:12:01,720
and they're all gonna line up voila now

00:11:58,079 --> 00:12:05,529
this is just benchtop testing at my desk

00:12:01,720 --> 00:12:07,449
for fun I was like well I wonder what

00:12:05,529 --> 00:12:12,160
would happen if I ran this whole system

00:12:07,449 --> 00:12:13,660
repeated resets overnight okay well so I

00:12:12,160 --> 00:12:14,410
run it throughout the day I get this

00:12:13,660 --> 00:12:16,749
kind of results

00:12:14,410 --> 00:12:18,040
I run it overnight and I get something

00:12:16,749 --> 00:12:20,859
looks like this in the morning I say

00:12:18,040 --> 00:12:23,350
well shoot what's going on here well

00:12:20,859 --> 00:12:24,759
it's a very long debug story the

00:12:23,350 --> 00:12:26,799
temperature in our building actually

00:12:24,759 --> 00:12:29,350
increases overnight because we like to

00:12:26,799 --> 00:12:31,959
turn down the AC so we can serve some

00:12:29,350 --> 00:12:36,779
electricity what that does is change the

00:12:31,959 --> 00:12:36,779
temperature of my duds on my desk and

00:12:37,289 --> 00:12:42,279
what's happening here let me go back to

00:12:39,970 --> 00:12:45,939
digital basics digital logic basics

00:12:42,279 --> 00:12:48,789
inside whatever FPGA ASIC DSP chip that

00:12:45,939 --> 00:12:50,429
you're using to capture this PPS signal

00:12:48,789 --> 00:12:52,539
there is most likely a flip-flop

00:12:50,429 --> 00:12:55,089
oftentimes it is a rising edge flip-flop

00:12:52,539 --> 00:12:56,549
and in our case is clocked by this 10

00:12:55,089 --> 00:12:59,769
megahertz reference clock that we have

00:12:56,549 --> 00:13:01,269
the PPS goes into the D input the data

00:12:59,769 --> 00:13:03,789
input of the flip-flop and this

00:13:01,269 --> 00:13:05,739
flip-flop and any device that you can

00:13:03,789 --> 00:13:07,509
see has a certain amount of time you

00:13:05,739 --> 00:13:09,189
associated with it so here's a waveform

00:13:07,509 --> 00:13:11,649
on the right we have our 10 megahertz we

00:13:09,189 --> 00:13:14,769
have our PPS input and and a lot of

00:13:11,649 --> 00:13:16,839
these systems the PPS is actually driven

00:13:14,769 --> 00:13:18,519
from the host on the following edge of

00:13:16,839 --> 00:13:20,169
the clock to keep it away from any

00:13:18,519 --> 00:13:21,999
rising edge effects that the the

00:13:20,169 --> 00:13:24,069
flip-flop might have because the

00:13:21,999 --> 00:13:25,899
flip-flop has timing parameters for

00:13:24,069 --> 00:13:27,819
setup and hold again this may be review

00:13:25,899 --> 00:13:30,749
for some of you with digital logic it

00:13:27,819 --> 00:13:33,909
has it has set up in whole times that

00:13:30,749 --> 00:13:35,800
defined keep out region that we cannot

00:13:33,909 --> 00:13:37,300
violate so if our

00:13:35,800 --> 00:13:40,209
GPS input of our D input of our

00:13:37,300 --> 00:13:42,519
flip-flop is changing on or within this

00:13:40,209 --> 00:13:45,310
keep out region we are in jeopardy of

00:13:42,519 --> 00:13:46,750
not capturing the correct value we don't

00:13:45,310 --> 00:13:48,279
know what the correct value is because

00:13:46,750 --> 00:13:51,880
it's changing right when the flip-flop

00:13:48,279 --> 00:13:53,560
is trying to capture our D input and so

00:13:51,880 --> 00:13:56,440
what was happening overnight is we were

00:13:53,560 --> 00:13:59,079
really close we had we were really close

00:13:56,440 --> 00:14:00,430
to the keep out region and maybe along

00:13:59,079 --> 00:14:02,079
the borders of the keep out region we're

00:14:00,430 --> 00:14:04,329
just barely Vale at violating set up

00:14:02,079 --> 00:14:06,310
we're barely violating hold the system's

00:14:04,329 --> 00:14:08,079
gonna work 90% of the time but as it

00:14:06,310 --> 00:14:10,000
heats up as it cools down we're gonna

00:14:08,079 --> 00:14:12,220
see some variation in this and we may

00:14:10,000 --> 00:14:14,649
need that entire set up at whole time

00:14:12,220 --> 00:14:17,110
not to be violated in order to actually

00:14:14,649 --> 00:14:18,940
run our system as we designed so if that

00:14:17,110 --> 00:14:20,829
PBS input moves to the right into this

00:14:18,940 --> 00:14:23,050
keep out region all of a sudden our flip

00:14:20,829 --> 00:14:25,300
flops can go metastable where we may or

00:14:23,050 --> 00:14:27,250
may not capture it on this rising edge

00:14:25,300 --> 00:14:30,100
at the 10 megahertz we may actually see

00:14:27,250 --> 00:14:33,010
our PBS input one cycle later on the

00:14:30,100 --> 00:14:35,019
next 10 megahertz rising edge and so

00:14:33,010 --> 00:14:36,550
that's going to contribute to this one

00:14:35,019 --> 00:14:38,410
reference clock period offset and

00:14:36,550 --> 00:14:39,760
because our converter clocks are eight

00:14:38,410 --> 00:14:41,620
hundred eighty degrees out of phase then

00:14:39,760 --> 00:14:43,839
we're going to have this additional half

00:14:41,620 --> 00:14:46,540
converter clock period all set on there

00:14:43,839 --> 00:14:50,110
as well so kind of wrapping up with the

00:14:46,540 --> 00:14:51,490
PBS timing between the PBS and the

00:14:50,110 --> 00:14:53,740
reference clock must be closed at the

00:14:51,490 --> 00:14:55,450
FPGA or the ASIC to control the device

00:14:53,740 --> 00:14:57,040
and oftentimes these are numbers that

00:14:55,450 --> 00:15:00,579
are either published with the FPGA

00:14:57,040 --> 00:15:03,600
inside the SDR device and closed that

00:15:00,579 --> 00:15:05,829
direction or hopefully they've also

00:15:03,600 --> 00:15:08,200
published them at the ports of the

00:15:05,829 --> 00:15:09,820
device so as connecting up your SMA is

00:15:08,200 --> 00:15:11,470
you can be like alright I need to make

00:15:09,820 --> 00:15:13,000
sure whatever is driving these ports has

00:15:11,470 --> 00:15:16,170
this kind of timing relationship with

00:15:13,000 --> 00:15:17,860
with respect to ten minutes and PBS

00:15:16,170 --> 00:15:20,920
couple practical practical

00:15:17,860 --> 00:15:22,449
implementations here drive PBS from the

00:15:20,920 --> 00:15:25,029
same clock domain that you're receiving

00:15:22,449 --> 00:15:26,980
it in so it doesn't work if you're if

00:15:25,029 --> 00:15:28,420
you have a GPS receiver here that's

00:15:26,980 --> 00:15:30,910
providing your 10 megahertz reference

00:15:28,420 --> 00:15:32,470
and then at an extreme case you just

00:15:30,910 --> 00:15:35,260
have a button over here and you have

00:15:32,470 --> 00:15:36,970
your stopwatch and say once a second

00:15:35,260 --> 00:15:40,029
that is clearly not the right clock

00:15:36,970 --> 00:15:41,350
domain and you clearly might get you

00:15:40,029 --> 00:15:42,760
might you might fail set up an whole

00:15:41,350 --> 00:15:43,240
time because my thumb definitely is

00:15:42,760 --> 00:15:44,949
inaccurate

00:15:43,240 --> 00:15:46,630
obviously that's probably not a case

00:15:44,949 --> 00:15:48,100
we're ever going to see but even if

00:15:46,630 --> 00:15:49,370
you're driving it from two different GPS

00:15:48,100 --> 00:15:51,650
modules you're not gay

00:15:49,370 --> 00:15:53,360
to have tight timing there even if

00:15:51,650 --> 00:15:55,340
you're using a 10 megahertz clock and

00:15:53,360 --> 00:15:58,280
you have a hundred nanoseconds a window

00:15:55,340 --> 00:16:00,080
to kind of hit this in the other

00:15:58,280 --> 00:16:03,170
practical implantation is you save

00:16:00,080 --> 00:16:04,910
topology so we talked about daisy chain

00:16:03,170 --> 00:16:06,350
topologies for ellos we talked about

00:16:04,910 --> 00:16:10,490
start apologies

00:16:06,350 --> 00:16:11,840
so the almost the best way to do this is

00:16:10,490 --> 00:16:14,510
a star topology where you have a single

00:16:11,840 --> 00:16:17,930
source fanned out to multiple receivers

00:16:14,510 --> 00:16:19,550
so multiple STRs you have one source and

00:16:17,930 --> 00:16:22,220
your you have match length cables going

00:16:19,550 --> 00:16:23,630
to each one of those to allow you to

00:16:22,220 --> 00:16:28,970
close this timing as accurately as

00:16:23,630 --> 00:16:31,640
possible so we've done all this we run

00:16:28,970 --> 00:16:33,440
this a gazillion times we see everything

00:16:31,640 --> 00:16:35,480
line up very nicely in our time domain

00:16:33,440 --> 00:16:39,320
we're really happy with it we have about

00:16:35,480 --> 00:16:41,390
a nano second or so of drift or a

00:16:39,320 --> 00:16:43,160
variability in it and that's okay for

00:16:41,390 --> 00:16:45,110
the most part oftentimes it's Hargett

00:16:43,160 --> 00:16:47,420
I'm shipping for is a nanosecond or less

00:16:45,110 --> 00:16:49,040
for baseband synchronization and that

00:16:47,420 --> 00:16:53,180
allows the RF guys to build on top of

00:16:49,040 --> 00:16:54,860
that with their RF synchronization some

00:16:53,180 --> 00:16:57,920
things that can actually help decrease

00:16:54,860 --> 00:16:59,090
that one nanoseconds even less try to

00:16:57,920 --> 00:17:01,010
keep your devices at a constant

00:16:59,090 --> 00:17:02,870
temperature kind of harped on

00:17:01,010 --> 00:17:05,090
temperature quite a bit temperature can

00:17:02,870 --> 00:17:08,590
introduce a lot of drift especially in

00:17:05,090 --> 00:17:10,820
ellos but also in buffers on your board

00:17:08,590 --> 00:17:14,000
so if you're a hardware designer choose

00:17:10,820 --> 00:17:16,670
low propagation delay different buffers

00:17:14,000 --> 00:17:18,020
so as your device warms up or as your

00:17:16,670 --> 00:17:19,730
buffer warms up you want to keep that

00:17:18,020 --> 00:17:21,470
propagation delay fairly constant over

00:17:19,730 --> 00:17:23,870
temperature there's a couple great

00:17:21,470 --> 00:17:25,970
buffers out there that have like drifts

00:17:23,870 --> 00:17:28,030
in like the femtosecond range per degree

00:17:25,970 --> 00:17:31,490
which is fantastic

00:17:28,030 --> 00:17:33,620
close timing like I just said but also

00:17:31,490 --> 00:17:35,540
so pay attention to the timing between

00:17:33,620 --> 00:17:37,520
your PBS and reference clock coming into

00:17:35,540 --> 00:17:41,270
your FPGA or ASIC but also pay attention

00:17:37,520 --> 00:17:43,040
to closing timing at your PLL so the

00:17:41,270 --> 00:17:45,320
reset pin of your PLL that boots all

00:17:43,040 --> 00:17:46,790
these devices up synchronously is going

00:17:45,320 --> 00:17:48,860
to have the same kind of setup and whole

00:17:46,790 --> 00:17:50,750
parameters associated with it and you

00:17:48,860 --> 00:17:52,520
can make sure you meet timing there and

00:17:50,750 --> 00:17:54,230
at your FPGA in order to get

00:17:52,520 --> 00:17:57,230
deterministic timing all across the

00:17:54,230 --> 00:17:58,430
board and then remember to account for

00:17:57,230 --> 00:18:00,650
variations in your reference clock

00:17:58,430 --> 00:18:02,870
distribution so oftentimes we don't

00:18:00,650 --> 00:18:05,420
think about this but if I have

00:18:02,870 --> 00:18:07,730
a device that distributes a single PPS

00:18:05,420 --> 00:18:09,290
to multiple devices that device in

00:18:07,730 --> 00:18:11,480
itself is going to have some sort of

00:18:09,290 --> 00:18:13,220
inherent skew between all of its outputs

00:18:11,480 --> 00:18:15,170
and we need to account for that in our

00:18:13,220 --> 00:18:19,460
total budget for our basement

00:18:15,170 --> 00:18:22,550
synchronization all right

00:18:19,460 --> 00:18:25,280
going going briefly into geographically

00:18:22,550 --> 00:18:28,430
distributed systems this has also been

00:18:25,280 --> 00:18:31,400
mentioned this hasn't I don't recommend

00:18:28,430 --> 00:18:32,870
this so the first would do this like if

00:18:31,400 --> 00:18:35,450
we were in like kind of a scale of this

00:18:32,870 --> 00:18:37,190
room very very long cables so if I had

00:18:35,450 --> 00:18:39,170
to if I had an SDR device all the way

00:18:37,190 --> 00:18:41,840
over here and another one say up here on

00:18:39,170 --> 00:18:43,910
the podium with me I could theoretically

00:18:41,840 --> 00:18:46,640
connect them with very long SMA cables

00:18:43,910 --> 00:18:48,920
this only works practically in like the

00:18:46,640 --> 00:18:51,230
the meter maybe low tens of meter range

00:18:48,920 --> 00:18:52,400
because you're gonna get skew within

00:18:51,230 --> 00:18:54,260
your cables you're going to get

00:18:52,400 --> 00:18:55,820
temperature differences the bend radius

00:18:54,260 --> 00:18:57,080
of the cable if someone walks up and

00:18:55,820 --> 00:18:58,550
bends the cable of a sudden you're gonna

00:18:57,080 --> 00:19:01,430
get a little bit of propagation play

00:18:58,550 --> 00:19:03,650
difference in that as well and all

00:19:01,430 --> 00:19:05,000
devices must have lengths match cables

00:19:03,650 --> 00:19:07,190
in order for your reference clocks to be

00:19:05,000 --> 00:19:08,720
aligned so if I have a device up here

00:19:07,190 --> 00:19:10,310
I'm using a device over in the corner

00:19:08,720 --> 00:19:12,470
I'm just also gonna have a stack of

00:19:10,310 --> 00:19:14,030
cable right next to me and this device

00:19:12,470 --> 00:19:16,310
while that one is gonna be stretched

00:19:14,030 --> 00:19:18,470
tight to get across the room so this is

00:19:16,310 --> 00:19:23,930
practical for a few meters but not much

00:19:18,470 --> 00:19:26,150
beyond that GPS so advantage here it's

00:19:23,930 --> 00:19:26,750
worldwide once it's locked to a

00:19:26,150 --> 00:19:29,480
satellite

00:19:26,750 --> 00:19:32,030
it actually inherits the accuracy of the

00:19:29,480 --> 00:19:33,920
satellites oscillator which odds are

00:19:32,030 --> 00:19:35,600
really good that that satellite has a

00:19:33,920 --> 00:19:38,450
whole lot better accuracy than your

00:19:35,600 --> 00:19:41,900
oscillator especially built into some of

00:19:38,450 --> 00:19:44,090
these lower end STRs well however the

00:19:41,900 --> 00:19:46,760
downside here is alignment is typically

00:19:44,090 --> 00:19:48,560
poor compared to cabled synchronization

00:19:46,760 --> 00:19:50,750
methods so we're looking at like tens of

00:19:48,560 --> 00:19:53,360
nanoseconds here as opposed to less than

00:19:50,750 --> 00:19:57,950
one nanosecond of accuracy with cabled

00:19:53,360 --> 00:20:00,320
methods white rabbit I've heard there's

00:19:57,950 --> 00:20:01,730
a super interesting talk that includes

00:20:00,320 --> 00:20:02,990
white rabbit tomorrow I don't know who

00:20:01,730 --> 00:20:07,100
you are but I've heard rumors of this

00:20:02,990 --> 00:20:08,360
talk I would love to I'm looking forward

00:20:07,100 --> 00:20:09,920
to hearing it so I'm just going to give

00:20:08,360 --> 00:20:11,450
a very brief introduction to what right

00:20:09,920 --> 00:20:14,450
rabbit is it's an Ethernet based

00:20:11,450 --> 00:20:15,980
standard it kind of goes up to 10

00:20:14,450 --> 00:20:18,230
kilometers although I've heard rumors

00:20:15,980 --> 00:20:20,240
much longer runs than that it uses

00:20:18,230 --> 00:20:22,399
optical cables specialized transceivers

00:20:20,240 --> 00:20:23,779
and it essentially combines two

00:20:22,399 --> 00:20:25,850
different technologies one is an

00:20:23,779 --> 00:20:27,950
extension of 15-8 PDP for time

00:20:25,850 --> 00:20:30,019
references and then also sinky for

00:20:27,950 --> 00:20:34,309
actually all distributing your clock

00:20:30,019 --> 00:20:36,380
reference to each device and we recently

00:20:34,309 --> 00:20:39,080
incorporated in the n3 xx family of

00:20:36,380 --> 00:20:41,090
devices so the N 310 and 320 and 321 and

00:20:39,080 --> 00:20:44,210
we were able to get typical performance

00:20:41,090 --> 00:20:47,090
of less than a nanosecond across five

00:20:44,210 --> 00:20:49,220
kilometers of cable difference so the

00:20:47,090 --> 00:20:52,429
setup that we tried is we had this 18

00:20:49,220 --> 00:20:55,010
port white rabbits which I had a 1 meter

00:20:52,429 --> 00:20:56,750
cable going to 1 and 320 or in 310

00:20:55,010 --> 00:20:58,580
pardon me and then I had a 5 kilometer

00:20:56,750 --> 00:20:59,990
spool of cable it was kind of cool

00:20:58,580 --> 00:21:00,789
everyone walked by my desk and said what

00:20:59,990 --> 00:21:04,669
are you doing

00:21:00,789 --> 00:21:06,500
and drove both of the outputs of this

00:21:04,669 --> 00:21:07,850
device to a oscilloscope and measured

00:21:06,500 --> 00:21:11,029
the time delay difference between them

00:21:07,850 --> 00:21:13,370
and we saw on average about 200 200

00:21:11,029 --> 00:21:19,309
milliseconds worth of alignment and in a

00:21:13,370 --> 00:21:21,139
worse case about a nanosecond ish so yes

00:21:19,309 --> 00:21:22,070
I meant two hundred picoseconds thank

00:21:21,139 --> 00:21:26,210
you yeah

00:21:22,070 --> 00:21:28,730
10 million typically we're 200

00:21:26,210 --> 00:21:29,840
milliseconds ideally we're at nanosecond

00:21:28,730 --> 00:21:33,260
yeah

00:21:29,840 --> 00:21:38,450
two hundred picoseconds of alignment to

00:21:33,260 --> 00:21:40,610
give you when I started it and I I i was

00:21:38,450 --> 00:21:43,580
doing a lot of a lot of digital VNV like

00:21:40,610 --> 00:21:45,740
this and at first when i saw a clock at

00:21:43,580 --> 00:21:47,840
ten megahertz i said whoa that clock is

00:21:45,740 --> 00:21:49,190
fast we're in the man--oh second range

00:21:47,840 --> 00:21:50,510
and then when i started working on

00:21:49,190 --> 00:21:52,429
synchronization stuff like this i

00:21:50,510 --> 00:21:54,740
started measuring fast in terms of like

00:21:52,429 --> 00:21:57,529
oh man it's it's slow it's like 10

00:21:54,740 --> 00:21:59,240
picoseconds and my perspective has

00:21:57,529 --> 00:22:02,029
really shifted as to what is possible

00:21:59,240 --> 00:22:03,620
and technologies like this really

00:22:02,029 --> 00:22:05,450
demonstrate where we're going

00:22:03,620 --> 00:22:07,760
with some cool ethernet standards and

00:22:05,450 --> 00:22:10,309
where i hope to see that we continue to

00:22:07,760 --> 00:22:12,970
go into down into the where picoseconds

00:22:10,309 --> 00:22:15,429
are slow and femtoseconds are fast and

00:22:12,970 --> 00:22:17,480
seeing that progression is really cool

00:22:15,429 --> 00:22:21,740
especially over like basically a five

00:22:17,480 --> 00:22:23,899
kilometer difference of cable so well

00:22:21,740 --> 00:22:27,500
it's my personal aside

00:22:23,899 --> 00:22:29,360
in summary share your reference clock if

00:22:27,500 --> 00:22:30,350
you if you leave here today learning

00:22:29,360 --> 00:22:33,020
nothing else share

00:22:30,350 --> 00:22:36,500
reference clocks preferably with the

00:22:33,020 --> 00:22:39,320
same topology share a common trigger to

00:22:36,500 --> 00:22:43,039
get a common concept of time between all

00:22:39,320 --> 00:22:44,660
of your SDR devices and then lastly

00:22:43,039 --> 00:22:46,520
recognize that there's a lot of

00:22:44,660 --> 00:22:49,360
environment variables out there to

00:22:46,520 --> 00:22:52,039
correct for one of the bigger ones is

00:22:49,360 --> 00:22:53,660
topology next biggest one is probably

00:22:52,039 --> 00:22:55,580
environment and controlling temperature

00:22:53,660 --> 00:22:58,220
variations between your devices if you

00:22:55,580 --> 00:22:59,900
want really tight timing and the other

00:22:58,220 --> 00:23:01,400
one is know your equipment know what

00:22:59,900 --> 00:23:03,260
it's capable of if you're designing

00:23:01,400 --> 00:23:05,210
equipment watch out for all the pitfalls

00:23:03,260 --> 00:23:07,730
make sure you close time in different

00:23:05,210 --> 00:23:09,470
places and if you're using equipment

00:23:07,730 --> 00:23:11,809
know what your equipment is capable of

00:23:09,470 --> 00:23:14,990
and what is possible both for your

00:23:11,809 --> 00:23:18,289
application as also for what you want to

00:23:14,990 --> 00:23:20,299
do with the device so with that thank

00:23:18,289 --> 00:23:23,630
you take a new radio for sponsoring a

00:23:20,299 --> 00:23:25,880
ton of hardware centric talks for the

00:23:23,630 --> 00:23:27,500
whole afternoon we really appreciate it

00:23:25,880 --> 00:23:30,409
and if you have any questions I'm happy

00:23:27,500 --> 00:23:34,480
to answer them and go more into this as

00:23:30,409 --> 00:23:39,970
well all right thank you so much Dan

00:23:34,480 --> 00:23:42,160
[Applause]

00:23:39,970 --> 00:23:44,790
I think I heard the question and that

00:23:42,160 --> 00:23:47,470
was does White Rabbit require Xilinx IP

00:23:44,790 --> 00:23:51,820
it does not require silence IP it does

00:23:47,470 --> 00:23:53,770
require IP from CERN I believe yeah I

00:23:51,820 --> 00:23:55,180
believe they wrote most of it it's all

00:23:53,770 --> 00:23:56,290
open sourced I forgot to mention this

00:23:55,180 --> 00:23:57,940
it's all open source it's available

00:23:56,290 --> 00:24:02,080
online when we integrated it into the N

00:23:57,940 --> 00:24:04,360
310 and 320 it was a breeze able to

00:24:02,080 --> 00:24:07,120
download it integrate it and most of it

00:24:04,360 --> 00:24:10,840
just worked out of the box you're gonna

00:24:07,120 --> 00:24:12,940
need some sort of a master device so one

00:24:10,840 --> 00:24:14,980
of the more intricate details of this is

00:24:12,940 --> 00:24:17,170
one end of the link at least requires

00:24:14,980 --> 00:24:20,980
calibration typically it's the master

00:24:17,170 --> 00:24:22,300
side all of our devices only work as

00:24:20,980 --> 00:24:23,530
slaves because they have not been

00:24:22,300 --> 00:24:25,930
calibrated you actually need to

00:24:23,530 --> 00:24:27,430
calibrate it on a per bit file basis so

00:24:25,930 --> 00:24:29,140
if you change your bit file in your FPGA

00:24:27,430 --> 00:24:31,660
that actually requires calibration with

00:24:29,140 --> 00:24:32,830
a system as a whole so yes there are

00:24:31,660 --> 00:24:34,240
specialized switches there are

00:24:32,830 --> 00:24:37,270
specialized master devices out there

00:24:34,240 --> 00:24:39,520
that you can buy we used a couple of

00:24:37,270 --> 00:24:41,680
two-port devices and then 118 port like

00:24:39,520 --> 00:24:45,580
very large switch to try a bunch of

00:24:41,680 --> 00:24:47,590
synchronization yeah seven solutions yes

00:24:45,580 --> 00:24:49,750
thank you is the manufacturer that we we

00:24:47,590 --> 00:24:53,380
have we have gone with and the apt note

00:24:49,750 --> 00:24:55,900
that I had up there linked on the edit

00:24:53,380 --> 00:24:58,360
page was it calls out these seven

00:24:55,900 --> 00:24:59,920
solutions hardware as well and I believe

00:24:58,360 --> 00:25:03,760
there's links that you can go check out

00:24:59,920 --> 00:25:06,300
their hardware yep thank you very much

00:25:03,760 --> 00:25:06,300

YouTube URL: https://www.youtube.com/watch?v=MZe-hh0NRiY


