Title: Birmingham on Rails 2020 - Site Reliability on Rails by Anthony Crumley
Publication date: 2020-02-19
Playlist: Birmingham on Rails 2020
Description: 
	Birmingham on Rails 2020 - Site Reliability on Rails by Anthony Crumley
Captions: 
	00:00:03,310 --> 00:00:06,460
[Music]

00:00:10,550 --> 00:00:15,210
[Music]

00:00:12,070 --> 00:00:15,210
[Applause]

00:00:16,490 --> 00:00:21,840
as he said I'm Anthony

00:00:18,660 --> 00:00:24,930
I do site reliability at fleet erode

00:00:21,840 --> 00:00:27,240
comm and today I'm going to talk about

00:00:24,930 --> 00:00:30,689
kind of how to get started with rails

00:00:27,240 --> 00:00:32,460
app and site reliability and how to make

00:00:30,689 --> 00:00:33,750
sense of some of the things that you see

00:00:32,460 --> 00:00:35,340
because there's a lot there and it's

00:00:33,750 --> 00:00:37,170
complicated but it doesn't always make

00:00:35,340 --> 00:00:38,460
sense when you look at it so we're gonna

00:00:37,170 --> 00:00:40,379
try to make a little bit of sense out of

00:00:38,460 --> 00:00:42,989
it so as you begin to work on the

00:00:40,379 --> 00:00:46,430
reliability of your site's you'll maybe

00:00:42,989 --> 00:00:46,430
be able to be a little more productive

00:00:47,510 --> 00:00:54,149
in the beginning of developer generated

00:00:51,149 --> 00:00:57,239
that app and the schema and the app was

00:00:54,149 --> 00:01:02,609
without form and void and hope Agnes was

00:00:57,239 --> 00:01:04,170
upon execution of the app well that's

00:01:02,609 --> 00:01:07,729
really common I'll start out the same

00:01:04,170 --> 00:01:13,260
way right like Twitter for instance

00:01:07,729 --> 00:01:17,670
github even free do I did not run that

00:01:13,260 --> 00:01:19,320
command but somebody did and when they

00:01:17,670 --> 00:01:22,110
start there's not a whole lot there

00:01:19,320 --> 00:01:26,400
right they're kind of empty but there is

00:01:22,110 --> 00:01:30,090
this happy little site I mean that's a

00:01:26,400 --> 00:01:32,070
happy site if you ever saw one right it

00:01:30,090 --> 00:01:37,409
actually performs really really well

00:01:32,070 --> 00:01:39,420
it's quite reliable in fact is probably

00:01:37,409 --> 00:01:43,049
the most reliable this site is ever

00:01:39,420 --> 00:01:47,600
going to be this frankly is a whole new

00:01:43,049 --> 00:01:47,600
from here right this is this is it

00:01:48,290 --> 00:01:56,070
because the very next thing that happens

00:01:50,939 --> 00:01:59,840
is this complexity on top of complexity

00:01:56,070 --> 00:01:59,840
on top of complexity

00:02:00,570 --> 00:02:05,380
in the beginning of the app our focus is

00:02:03,490 --> 00:02:07,630
on financial viability we're trying to

00:02:05,380 --> 00:02:09,820
create something that somebody walks and

00:02:07,630 --> 00:02:13,720
they want it bad enough to give us some

00:02:09,820 --> 00:02:15,550
money and at that time that's more

00:02:13,720 --> 00:02:17,740
important than the reliability of the

00:02:15,550 --> 00:02:19,480
app and as we begin to build out the

00:02:17,740 --> 00:02:21,550
functionality and people begin to buy

00:02:19,480 --> 00:02:23,130
our app and they'll begin to use it we

00:02:21,550 --> 00:02:26,520
begin to add more functionality to

00:02:23,130 --> 00:02:29,650
satisfy their needs there comes a point

00:02:26,520 --> 00:02:32,740
where site reliability begins to equal

00:02:29,650 --> 00:02:33,940
financial viability there comes a point

00:02:32,740 --> 00:02:35,770
where they're like I can't use this

00:02:33,940 --> 00:02:37,930
thing if it doesn't work I can't use it

00:02:35,770 --> 00:02:39,690
if it's too slow I can't use it if it's

00:02:37,930 --> 00:02:41,890
broken

00:02:39,690 --> 00:02:43,600
but by telling me get to this point

00:02:41,890 --> 00:02:46,180
we've got a webview trial we've got

00:02:43,600 --> 00:02:48,880
mobile apps we've got api's databases

00:02:46,180 --> 00:02:54,010
elastic search Redis background jobs AWS

00:02:48,880 --> 00:02:56,050
services gyms glue I mean a list of gyms

00:02:54,010 --> 00:02:58,209
a mile all we've got third party

00:02:56,050 --> 00:02:59,650
services sometimes they function fast

00:02:58,209 --> 00:03:03,400
sometimes they don't we're sending

00:02:59,650 --> 00:03:08,019
emails we're sending text messages being

00:03:03,400 --> 00:03:10,660
a hope but those things can be slow - we

00:03:08,019 --> 00:03:11,709
have to figure out what is going on but

00:03:10,660 --> 00:03:14,380
there's a problem there's this

00:03:11,709 --> 00:03:17,830
opaqueness we can't see especially in

00:03:14,380 --> 00:03:22,690
production right we put all this stuff

00:03:17,830 --> 00:03:25,030
in the cloud and we've created the Cloud

00:03:22,690 --> 00:03:26,800
of Unknowing I think it's pretty awesome

00:03:25,030 --> 00:03:29,320
that the name whose title for a book

00:03:26,800 --> 00:03:31,540
came from an anonymous 14th century

00:03:29,320 --> 00:03:34,060
mystic and it's a great explanation of

00:03:31,540 --> 00:03:35,680
the problem that we run into as we get

00:03:34,060 --> 00:03:43,150
to the place where reliability becomes a

00:03:35,680 --> 00:03:46,630
problem and the developer said let there

00:03:43,150 --> 00:03:48,790
be metrics and there was visibility and

00:03:46,630 --> 00:03:51,070
the developer saw the metrics that they

00:03:48,790 --> 00:03:54,130
were good and the metrics divided the

00:03:51,070 --> 00:03:56,080
reliable from the unreliable and the

00:03:54,130 --> 00:03:59,380
developer called the reliable quality

00:03:56,080 --> 00:04:02,500
and unreliable he called defects and the

00:03:59,380 --> 00:04:05,880
integration and the deployment or the

00:04:02,500 --> 00:04:05,880
first iteration

00:04:08,540 --> 00:04:14,010
we get these metrics from right I mean I

00:04:12,120 --> 00:04:15,569
do not recommend that when you first

00:04:14,010 --> 00:04:17,370
start having reliability problems that

00:04:15,569 --> 00:04:20,430
you go to build your own metric system

00:04:17,370 --> 00:04:22,440
please don't do that instead do this and

00:04:20,430 --> 00:04:23,520
start with these guys right especially

00:04:22,440 --> 00:04:25,790
that one in the middle I think you the

00:04:23,520 --> 00:04:28,470
sponsor of our of our conference today

00:04:25,790 --> 00:04:30,510
don't install some of these guys and

00:04:28,470 --> 00:04:37,950
they will begin to give you the

00:04:30,510 --> 00:04:40,020
visibility that you need at this point

00:04:37,950 --> 00:04:41,639
when we install something like this we

00:04:40,020 --> 00:04:43,620
begin to be able to see things that we

00:04:41,639 --> 00:04:46,290
couldn't see before we begin to be able

00:04:43,620 --> 00:04:48,300
to understand some things over time this

00:04:46,290 --> 00:04:50,460
has become my favorite piece of advice

00:04:48,300 --> 00:04:51,870
to give to software developers out of

00:04:50,460 --> 00:04:55,919
all the advice that I could give you

00:04:51,870 --> 00:05:01,680
this is my favorite piece to understand

00:04:55,919 --> 00:05:07,080
is hard but once one understands action

00:05:01,680 --> 00:05:08,880
it's easy it's the understanding that's

00:05:07,080 --> 00:05:11,100
important and for us to take a site that

00:05:08,880 --> 00:05:13,020
has become really complex and begin to

00:05:11,100 --> 00:05:15,750
make it more reliable we've got to

00:05:13,020 --> 00:05:17,669
understand what is actually going on

00:05:15,750 --> 00:05:18,570
because if we know we can do all kinds

00:05:17,669 --> 00:05:20,430
of things I've been in these

00:05:18,570 --> 00:05:22,889
conversations before well I think it's

00:05:20,430 --> 00:05:24,539
this I think it's that I bit you as this

00:05:22,889 --> 00:05:27,990
I'll tell you what we'll try that and

00:05:24,539 --> 00:05:30,060
see what happens no don't do that get

00:05:27,990 --> 00:05:35,039
understanding and when you get

00:05:30,060 --> 00:05:37,650
understanding then act this is the place

00:05:35,039 --> 00:05:38,250
to begin as soon as reliability becomes

00:05:37,650 --> 00:05:41,660
a problem

00:05:38,250 --> 00:05:45,650
the very next iteration needs to be

00:05:41,660 --> 00:05:45,650
deploying metrics to the system

00:05:47,240 --> 00:05:51,300
now when we're talking about the

00:05:49,110 --> 00:05:53,120
reliability of our application we're

00:05:51,300 --> 00:05:55,740
thinking about service levels and

00:05:53,120 --> 00:05:58,710
oftentimes were familiar with this idea

00:05:55,740 --> 00:06:00,449
of an SLA a service level agreement but

00:05:58,710 --> 00:06:02,009
SLA is really built on some other

00:06:00,449 --> 00:06:04,289
building blocks the first one is a

00:06:02,009 --> 00:06:05,940
service level indicator these are the

00:06:04,289 --> 00:06:07,440
actual metrics that were that were

00:06:05,940 --> 00:06:10,020
recording reporting how fast the

00:06:07,440 --> 00:06:12,449
response was we're recording what the

00:06:10,020 --> 00:06:14,880
availability of our site is these are

00:06:12,449 --> 00:06:18,690
the things that indicate what level of

00:06:14,880 --> 00:06:22,500
service we actually have right now then

00:06:18,690 --> 00:06:23,910
there are service level objectives we're

00:06:22,500 --> 00:06:26,840
saying something about what we want

00:06:23,910 --> 00:06:30,840
those metrics to be it's something like

00:06:26,840 --> 00:06:33,870
we want our 95th percentile request time

00:06:30,840 --> 00:06:35,310
to be less than two seconds it's

00:06:33,870 --> 00:06:36,930
something like we want the availability

00:06:35,310 --> 00:06:40,380
of our application to be greater than

00:06:36,930 --> 00:06:41,610
99.9 percent now once we have these

00:06:40,380 --> 00:06:43,590
measurements and we have these

00:06:41,610 --> 00:06:45,449
objectives then we can build on top of

00:06:43,590 --> 00:06:47,190
that a service level agreement and that

00:06:45,449 --> 00:06:48,840
agreement is a contractual agreement

00:06:47,190 --> 00:06:50,820
with our customers and usually it's just

00:06:48,840 --> 00:06:52,860
a couple of things like availability and

00:06:50,820 --> 00:06:55,620
something about apdex something along

00:06:52,860 --> 00:06:58,050
those lines but the s hellos are very

00:06:55,620 --> 00:07:00,150
important tools for us to use internally

00:06:58,050 --> 00:07:02,130
we can define as many of those as we

00:07:00,150 --> 00:07:03,500
want contractually we don't want any

00:07:02,130 --> 00:07:07,740
less always that we have to agree to

00:07:03,500 --> 00:07:09,030
together at the business right but as

00:07:07,740 --> 00:07:11,070
professionals we can create as many

00:07:09,030 --> 00:07:13,979
objectives as we want we can define our

00:07:11,070 --> 00:07:16,620
service in a way that gives the kind of

00:07:13,979 --> 00:07:18,419
quality that we want it to have so I

00:07:16,620 --> 00:07:20,400
highly recommend as you get these

00:07:18,419 --> 00:07:21,720
metrics begin thinking about what they

00:07:20,400 --> 00:07:23,699
should be what the objectives for each

00:07:21,720 --> 00:07:27,780
one should be and begin to watch some of

00:07:23,699 --> 00:07:29,970
them the first one is going to be

00:07:27,780 --> 00:07:32,460
availability this is where our customers

00:07:29,970 --> 00:07:34,320
care about most the time that's measured

00:07:32,460 --> 00:07:37,590
in some number of nines three four or

00:07:34,320 --> 00:07:40,289
five nines 99.9% availability is pretty

00:07:37,590 --> 00:07:42,720
common and oftentimes its measured in a

00:07:40,289 --> 00:07:44,370
time-based fashion there's a periodic

00:07:42,720 --> 00:07:49,050
pinging of the side every minute every

00:07:44,370 --> 00:07:50,639
five minutes but this is not very

00:07:49,050 --> 00:07:52,409
satisfying to our customers I mean how

00:07:50,639 --> 00:07:54,300
many times if you had somebody say your

00:07:52,409 --> 00:07:55,800
side has availability problems I look

00:07:54,300 --> 00:07:57,360
it's world presenter variability for the

00:07:55,800 --> 00:07:59,490
last six months I suspect I was

00:07:57,360 --> 00:08:00,330
repeating it every five minutes and we

00:07:59,490 --> 00:08:03,150
only pay

00:08:00,330 --> 00:08:09,150
the login page or the ones special page

00:08:03,150 --> 00:08:12,030
that we created just repeating I no

00:08:09,150 --> 00:08:17,129
customer ever uses the customer is

00:08:12,030 --> 00:08:18,930
trying to do their job and it's broke so

00:08:17,129 --> 00:08:22,259
from their perspective the site is

00:08:18,930 --> 00:08:25,080
unavailable so a better way of measuring

00:08:22,259 --> 00:08:27,030
availability is request based instead of

00:08:25,080 --> 00:08:28,289
saying it's going to be up 99% of the

00:08:27,030 --> 00:08:32,399
time based sort of ping

00:08:28,289 --> 00:08:35,899
let's say that 99.9% of all requests to

00:08:32,399 --> 00:08:35,899
the service are going to be successful

00:08:36,050 --> 00:08:40,620
then no matter which part of the service

00:08:38,669 --> 00:08:42,630
our customers are using they're going to

00:08:40,620 --> 00:08:44,250
see a high level of availability it's

00:08:42,630 --> 00:08:45,510
gonna take into consideration partial

00:08:44,250 --> 00:08:46,920
outages he's going to take into

00:08:45,510 --> 00:08:48,240
consideration that burden that I ship

00:08:46,920 --> 00:08:50,459
was running and then fixed a few minutes

00:08:48,240 --> 00:08:55,079
later right all that's gonna show up in

00:08:50,459 --> 00:09:01,320
there it gives us a view that is much

00:08:55,079 --> 00:09:03,720
more like what our customers expect if

00:09:01,320 --> 00:09:11,399
you go to site reliability you have to

00:09:03,720 --> 00:09:16,130
learn time travel because I'll tell you

00:09:11,399 --> 00:09:16,130
I was not awake at 4:00 in the morning

00:09:17,930 --> 00:09:22,170
somehow I've got to go back in time

00:09:20,250 --> 00:09:24,720
before a.m. in the morning and figure

00:09:22,170 --> 00:09:26,910
out what in the world happened I've got

00:09:24,720 --> 00:09:27,949
to go back in time to see that how do I

00:09:26,910 --> 00:09:30,600
do that

00:09:27,949 --> 00:09:32,640
actually these APM tools allow us to do

00:09:30,600 --> 00:09:33,839
that sort of thing and they do it in two

00:09:32,640 --> 00:09:35,820
ways the first one is what we're gonna

00:09:33,839 --> 00:09:37,800
call the event streams we record

00:09:35,820 --> 00:09:40,110
something about each request record

00:09:37,800 --> 00:09:42,060
something about each asynchronous job it

00:09:40,110 --> 00:09:43,769
records every exception it records

00:09:42,060 --> 00:09:46,079
events that we add when we want to add

00:09:43,769 --> 00:09:48,660
things I knew customer signed up and

00:09:46,079 --> 00:09:51,480
export was done things of that sort in

00:09:48,660 --> 00:09:53,100
those events streams just a point in

00:09:51,480 --> 00:09:56,490
time this thing happened to here's some

00:09:53,100 --> 00:09:58,769
information about it allow us to go back

00:09:56,490 --> 00:10:02,940
and recreate what happened at that time

00:09:58,769 --> 00:10:04,440
when that spike went up on my graph the

00:10:02,940 --> 00:10:05,880
second way that we can travel back in

00:10:04,440 --> 00:10:09,000
time to see what is happening is through

00:10:05,880 --> 00:10:10,949
snapshots snapshots give us the ability

00:10:09,000 --> 00:10:12,730
to go back and see things that you can't

00:10:10,949 --> 00:10:14,889
put together by

00:10:12,730 --> 00:10:15,910
accumulating all of the events I made

00:10:14,889 --> 00:10:18,610
would be pretty awesome if you could

00:10:15,910 --> 00:10:20,500
record every memory allocation event in

00:10:18,610 --> 00:10:22,570
your system and then recreate the memory

00:10:20,500 --> 00:10:23,920
at some point in time that's too many

00:10:22,570 --> 00:10:26,800
events it doesn't make any sense

00:10:23,920 --> 00:10:28,930
so what we do is every minute or so we

00:10:26,800 --> 00:10:33,959
record with the memory of the CPU load

00:10:28,930 --> 00:10:33,959
io q sizes things of that sort

00:10:34,500 --> 00:10:39,100
here's an example of a situation where

00:10:37,300 --> 00:10:41,500
we use this idea and this is such a

00:10:39,100 --> 00:10:43,180
powerful idea this idea of snapshotting

00:10:41,500 --> 00:10:45,339
so we can go back in time and see what

00:10:43,180 --> 00:10:47,139
happened so you can see here in the

00:10:45,339 --> 00:10:49,720
bottom right hand corner that graph

00:10:47,139 --> 00:10:52,600
shows our eye ops spiked above our limit

00:10:49,720 --> 00:10:54,430
in the graph right above it you can see

00:10:52,600 --> 00:10:57,220
our response times spiked accordingly

00:10:54,430 --> 00:10:58,690
right the thing about these kinds of

00:10:57,220 --> 00:11:00,820
spikes is that they're devilishly

00:10:58,690 --> 00:11:02,260
difficult to debug because when they

00:11:00,820 --> 00:11:04,120
happen you can't go back your slope

00:11:02,260 --> 00:11:05,860
great logs you can't look at JPM tools

00:11:04,120 --> 00:11:09,130
at the queries because all the queries

00:11:05,860 --> 00:11:12,100
around that IO spite that maxes out IRS

00:11:09,130 --> 00:11:18,370
are slow you can't see it's just a

00:11:12,100 --> 00:11:20,709
broader of information Postgres this was

00:11:18,370 --> 00:11:22,779
mission to earlier by Craig has PG stat

00:11:20,709 --> 00:11:26,230
statements where it records over time

00:11:22,779 --> 00:11:28,660
how many times a query is used and how

00:11:26,230 --> 00:11:30,069
much I owe it does the problem is is

00:11:28,660 --> 00:11:32,019
that you reach that at a point a week

00:11:30,069 --> 00:11:34,930
ago there's kind of weeks worth of stats

00:11:32,019 --> 00:11:37,180
that happened a few hours ago and I

00:11:34,930 --> 00:11:39,459
can't see it because it's all washed out

00:11:37,180 --> 00:11:43,540
in the stats over the last week so what

00:11:39,459 --> 00:11:45,279
we did was we began snapshotting PG stat

00:11:43,540 --> 00:11:48,100
statements every 10 minutes and

00:11:45,279 --> 00:11:50,110
recording it and then clearing it every

00:11:48,100 --> 00:11:52,600
10 minutes record it clear it record it

00:11:50,110 --> 00:11:54,550
clearly now what we can do we can go

00:11:52,600 --> 00:11:56,350
back to that point in time when that 10

00:11:54,550 --> 00:11:59,910
minute time frame works and we will see

00:11:56,350 --> 00:12:02,319
exactly which crazy calls that IO spark

00:11:59,910 --> 00:12:03,730
but we didn't lose the ability to look

00:12:02,319 --> 00:12:06,550
over time because then we can aggregate

00:12:03,730 --> 00:12:08,380
those average zooms some boom and still

00:12:06,550 --> 00:12:10,060
be able to see what the accumulated

00:12:08,380 --> 00:12:12,100
queries are that produced a lot of my

00:12:10,060 --> 00:12:14,529
own that's a very powerful tool

00:12:12,100 --> 00:12:15,850
snapshotting so now that we understand

00:12:14,529 --> 00:12:17,769
how to travel back in time

00:12:15,850 --> 00:12:19,959
we know it's evince streams we know it's

00:12:17,769 --> 00:12:21,810
snapshots we can think about how can we

00:12:19,959 --> 00:12:23,250
modify or mid streams that we have

00:12:21,810 --> 00:12:24,690
so they're more useful we can think

00:12:23,250 --> 00:12:26,880
about what kind of snapshot should we

00:12:24,690 --> 00:12:29,460
create so we can see what we need to see

00:12:26,880 --> 00:12:31,560
to solve what we need to solve so we can

00:12:29,460 --> 00:12:35,940
get the understanding in order to easily

00:12:31,560 --> 00:12:38,040
act we're just gonna talk about two

00:12:35,940 --> 00:12:39,990
aspects of sorry loop for high ability

00:12:38,040 --> 00:12:41,550
today we're talking about performance

00:12:39,990 --> 00:12:42,870
through how about errors there's a

00:12:41,550 --> 00:12:44,190
million things we could talk about but

00:12:42,870 --> 00:12:45,600
we're going to focus on these two is

00:12:44,190 --> 00:12:48,140
when you get started this is a good

00:12:45,600 --> 00:12:48,140
place to start

00:12:51,380 --> 00:12:55,710
one of things that we tend to care about

00:12:53,370 --> 00:12:58,410
is asynchronous jobs and when you're

00:12:55,710 --> 00:13:01,440
looking at how fast things perform jobs

00:12:58,410 --> 00:13:02,970
are a bit of a snowflake alright with

00:13:01,440 --> 00:13:06,089
web requests we can say something like

00:13:02,970 --> 00:13:07,710
we want every web request to finish in

00:13:06,089 --> 00:13:09,900
less than two seconds at the 95th

00:13:07,710 --> 00:13:12,029
percentile you can say that you can't

00:13:09,900 --> 00:13:13,110
say that about jobs every job has a

00:13:12,029 --> 00:13:14,580
different duration that's the whole

00:13:13,110 --> 00:13:16,200
reason why we take them out of the web

00:13:14,580 --> 00:13:21,930
request and put them in a job because

00:13:16,200 --> 00:13:23,970
they don't fit that constraint so we

00:13:21,930 --> 00:13:25,860
were looking at the performance of a job

00:13:23,970 --> 00:13:27,240
we have the wait time how long it was

00:13:25,860 --> 00:13:29,730
cute before it started being processed

00:13:27,240 --> 00:13:31,740
the service time how long it took to

00:13:29,730 --> 00:13:33,690
process it and in the response time

00:13:31,740 --> 00:13:35,700
which is the total amount of time the

00:13:33,690 --> 00:13:38,160
limit was cute when it was done that's

00:13:35,700 --> 00:13:40,410
what our customers care about weight and

00:13:38,160 --> 00:13:41,700
service is really more about how we get

00:13:40,410 --> 00:13:44,040
the response time where it needs to be

00:13:41,700 --> 00:13:45,660
when you have all three of these you can

00:13:44,040 --> 00:13:47,490
graph them you can look at them you can

00:13:45,660 --> 00:13:49,650
see what's going on you begin to figure

00:13:47,490 --> 00:13:55,320
out as my problem a queueing time is my

00:13:49,650 --> 00:13:57,360
problem before it's time another thing

00:13:55,320 --> 00:14:00,240
about jobs is that because there's

00:13:57,360 --> 00:14:02,700
snowflakes each job needs its own SLM

00:14:00,240 --> 00:14:04,530
like with Weber question you make one

00:14:02,700 --> 00:14:07,080
answer on it makes sense for every web

00:14:04,530 --> 00:14:10,080
request for jobs each job needs his own

00:14:07,080 --> 00:14:13,650
SLO and he's his own objective for total

00:14:10,080 --> 00:14:15,510
response time so then we can begin to

00:14:13,650 --> 00:14:16,980
measure them see how they perform and

00:14:15,510 --> 00:14:18,930
make sure that they act in a way that

00:14:16,980 --> 00:14:22,980
our customers will appreciate and feel

00:14:18,930 --> 00:14:25,620
like over other things to record is when

00:14:22,980 --> 00:14:27,630
the job is in cubed when it begins when

00:14:25,620 --> 00:14:29,010
it succeeds retries or fails and all

00:14:27,630 --> 00:14:30,450
these scenarios there needs to be

00:14:29,010 --> 00:14:33,750
attributes that lets you know which job

00:14:30,450 --> 00:14:34,740
it is what cutesy him from retrying to

00:14:33,750 --> 00:14:37,740
failure

00:14:34,740 --> 00:14:39,209
be sure to record the reasons why that's

00:14:37,740 --> 00:14:40,920
gonna be critical we were trying to

00:14:39,209 --> 00:14:43,500
figure out why this job is having

00:14:40,920 --> 00:14:45,029
problems and we have recorded all those

00:14:43,500 --> 00:14:47,430
that you can graph them you can watch

00:14:45,029 --> 00:14:50,010
what's happening you can dig into those

00:14:47,430 --> 00:14:51,890
metrics and see why have particular jobs

00:14:50,010 --> 00:14:55,050
are acting the way they are

00:14:51,890 --> 00:14:57,209
the last thing use that snapshot again

00:14:55,050 --> 00:14:59,100
sets up the queue sizes every minute

00:14:57,209 --> 00:15:01,649
because it's hard to put together those

00:14:59,100 --> 00:15:04,890
graphs to show how big the queues

00:15:01,649 --> 00:15:08,300
actually are so snapshotting them is a

00:15:04,890 --> 00:15:08,300
great way to do that

00:15:13,119 --> 00:15:18,679
these metrics that we're going to talk

00:15:15,079 --> 00:15:24,079
about here they really apply to every

00:15:18,679 --> 00:15:26,839
kind of duration measurement wait times

00:15:24,079 --> 00:15:30,639
and response times on the jobs as well

00:15:26,839 --> 00:15:30,639
as the response times on web requests

00:15:30,910 --> 00:15:37,100
the first one is the average watch out

00:15:34,489 --> 00:15:38,029
for averages those guys will lie to you

00:15:37,100 --> 00:15:44,269
they'll make you feel good about

00:15:38,029 --> 00:15:46,999
yourself they are flatterers only trust

00:15:44,269 --> 00:15:56,660
the bad ones the good ones are lying to

00:15:46,999 --> 00:15:58,790
you maximum with maximums we need to

00:15:56,660 --> 00:16:00,649
beware particularly with web requests of

00:15:58,790 --> 00:16:02,239
outside causes because like that

00:16:00,649 --> 00:16:04,699
situation I mentioned a minute ago

00:16:02,239 --> 00:16:06,559
there's this IO spike over here on our

00:16:04,699 --> 00:16:08,179
database and it causes this request to

00:16:06,559 --> 00:16:09,589
be slow so watch out for that don't

00:16:08,179 --> 00:16:10,850
spend a lot don't waste a lot of time

00:16:09,589 --> 00:16:14,170
trying to fix something that's not

00:16:10,850 --> 00:16:19,670
broken because the maximum is an outlier

00:16:14,170 --> 00:16:21,559
but maximums do a really good job of

00:16:19,670 --> 00:16:23,569
being an early indicator of performance

00:16:21,559 --> 00:16:25,459
problems they're like the canary in the

00:16:23,569 --> 00:16:27,470
tone right it will let you know really

00:16:25,459 --> 00:16:30,319
early on that this request had a really

00:16:27,470 --> 00:16:32,209
crazy time why was that and as you're

00:16:30,319 --> 00:16:34,309
scaling your app and you're getting your

00:16:32,209 --> 00:16:35,509
first big customers it's the max moves

00:16:34,309 --> 00:16:40,069
that will tell you where those big

00:16:35,509 --> 00:16:43,429
customers are seeing their problems but

00:16:40,069 --> 00:16:45,949
percentiles are the bread and butter of

00:16:43,429 --> 00:16:47,899
your duration SLO who's something like

00:16:45,949 --> 00:16:49,879
the 95th percentile of an eye and a

00:16:47,899 --> 00:16:51,139
percentile what those will do is they'll

00:16:49,879 --> 00:16:53,629
keep it from lying to you like the

00:16:51,139 --> 00:16:55,970
average because it includes all the bad

00:16:53,629 --> 00:16:57,379
ones but it will also weed out some of

00:16:55,970 --> 00:16:59,929
those outliers that weren't really

00:16:57,379 --> 00:17:01,279
caused by this end point if they were

00:16:59,929 --> 00:17:03,760
caused by this end point and their

00:17:01,279 --> 00:17:06,529
percentiles would probably be higher

00:17:03,760 --> 00:17:08,029
here's an example so every one of these

00:17:06,529 --> 00:17:11,630
you'll notice all the averages are

00:17:08,029 --> 00:17:14,659
essentially the same but that first one

00:17:11,630 --> 00:17:16,579
is 95th percentile is 2.3 seconds is 2

00:17:14,659 --> 00:17:18,500
seconds longer so that tells you there's

00:17:16,579 --> 00:17:19,789
a problem there but you'll notice on

00:17:18,500 --> 00:17:22,520
Buffett in that second when it's pretty

00:17:19,789 --> 00:17:25,340
good is 2.6 but they're both of their

00:17:22,520 --> 00:17:27,080
maximums are the same so which

00:17:25,340 --> 00:17:29,000
there is that that first one has a lot

00:17:27,080 --> 00:17:30,950
more closer to the maximum the second

00:17:29,000 --> 00:17:33,800
one does look at that one on the bottom

00:17:30,950 --> 00:17:35,660
that's crazy stuff the 95th percentile

00:17:33,800 --> 00:17:41,920
is less than the average how does that

00:17:35,660 --> 00:17:44,570
happen I actually had to google it and

00:17:41,920 --> 00:17:47,480
what happens is is that really crazy

00:17:44,570 --> 00:17:51,470
outlier or the max pulls the average up

00:17:47,480 --> 00:17:53,720
above the 95th percentile so when you

00:17:51,470 --> 00:17:55,190
see that big one there you're like okay

00:17:53,720 --> 00:17:58,130
well the only those one of two things

00:17:55,190 --> 00:17:59,600
right is there's an outside calls so I

00:17:58,130 --> 00:18:01,700
could look at my other metrics ago was

00:17:59,600 --> 00:18:03,230
there hi ho spike at that time if there

00:18:01,700 --> 00:18:04,910
was okay I'll do that

00:18:03,230 --> 00:18:06,680
if there wasn't that I may dig into it

00:18:04,910 --> 00:18:13,820
and look at the choices on my hat and

00:18:06,680 --> 00:18:15,830
see what's going on another nice metric

00:18:13,820 --> 00:18:17,990
is a time consuming metric so it takes

00:18:15,830 --> 00:18:19,670
our other durations and kind of figures

00:18:17,990 --> 00:18:22,610
out the percentage of time that a thing

00:18:19,670 --> 00:18:24,650
uses and this is really great for

00:18:22,610 --> 00:18:27,080
understanding what the baseline load is

00:18:24,650 --> 00:18:30,140
on the system so we can see here that

00:18:27,080 --> 00:18:32,870
there's a few endpoints that have a

00:18:30,140 --> 00:18:34,550
large percentage of all the execution

00:18:32,870 --> 00:18:38,300
time that happens during the time frame

00:18:34,550 --> 00:18:40,730
that you're looking at and when you walk

00:18:38,300 --> 00:18:42,800
on those at the top what you're doing is

00:18:40,730 --> 00:18:44,570
you can notice here it goes it's pretty

00:18:42,800 --> 00:18:46,430
high all the way across and there's one

00:18:44,570 --> 00:18:49,190
spike there what you're trying to do is

00:18:46,430 --> 00:18:51,140
work on that baseline of load bring it

00:18:49,190 --> 00:18:53,450
down so that when you do have spikes

00:18:51,140 --> 00:18:55,220
they don't push you to the max and as

00:18:53,450 --> 00:18:56,960
you lower that baseline an interesting

00:18:55,220 --> 00:18:59,540
thing starts to happen it's just like a

00:18:56,960 --> 00:19:03,140
stream and there's this stream and when

00:18:59,540 --> 00:19:05,240
it's full of water there's no rocks it

00:19:03,140 --> 00:19:06,560
was a dry spell and the stream gets well

00:19:05,240 --> 00:19:08,410
all of a sudden there's rocks and you're

00:19:06,560 --> 00:19:10,460
like who probably is rocks in the stream

00:19:08,410 --> 00:19:12,080
nobody put the rocks in the stream that

00:19:10,460 --> 00:19:13,850
was there the whole time it's the same

00:19:12,080 --> 00:19:15,770
thing here as you lower the baseline

00:19:13,850 --> 00:19:17,600
loaded the spiky things start standing

00:19:15,770 --> 00:19:22,820
out and you can easily find them in

00:19:17,600 --> 00:19:25,160
fixed fun apdex is a as a metric that's

00:19:22,820 --> 00:19:26,690
talked about a lot and use but seems

00:19:25,160 --> 00:19:33,200
like very few people actually understand

00:19:26,690 --> 00:19:35,259
what it does it is a measurement of user

00:19:33,200 --> 00:19:37,669
satisfaction

00:19:35,259 --> 00:19:39,709
which tries to do is tell you what

00:19:37,669 --> 00:19:44,719
percentage of user interactions were

00:19:39,709 --> 00:19:46,369
satisfying to that user it's calculated

00:19:44,719 --> 00:19:50,449
by defining a team which is the target

00:19:46,369 --> 00:19:52,699
let's say we say that one second is a

00:19:50,449 --> 00:19:54,889
satisfying request time for a user so

00:19:52,699 --> 00:19:57,559
anything less than that is satisfying so

00:19:54,889 --> 00:20:00,559
we set our target to T anything less

00:19:57,559 --> 00:20:02,509
than T is satisfying to users anything

00:20:00,559 --> 00:20:04,609
between T and for T's between one and

00:20:02,509 --> 00:20:06,589
four seconds is tolerating they're okay

00:20:04,609 --> 00:20:09,889
with it the closer he gets to 40 though

00:20:06,589 --> 00:20:11,839
that's okay they are with it and when it

00:20:09,889 --> 00:20:13,909
crosses over 40 now they're beginning to

00:20:11,839 --> 00:20:16,429
get frustrated they're no longer happy

00:20:13,909 --> 00:20:18,099
with what we're giving them this is

00:20:16,429 --> 00:20:20,449
calculated with a weighted average

00:20:18,099 --> 00:20:22,789
satisfying ones get a weight of one

00:20:20,449 --> 00:20:25,190
tolerating a weight of 0.5 you're

00:20:22,789 --> 00:20:28,519
frustrated a weight of zero so when it

00:20:25,190 --> 00:20:31,729
does the calculation if we have a

00:20:28,519 --> 00:20:35,329
hundred requests 60 or satisfying 30 or

00:20:31,729 --> 00:20:37,159
tolerating in 10 are frustrating when

00:20:35,329 --> 00:20:39,259
we're doing the average we add all the

00:20:37,159 --> 00:20:41,419
satisfying ones we had half of the

00:20:39,259 --> 00:20:43,039
tolerating ones we don't add any of the

00:20:41,419 --> 00:20:44,899
frustrating ones and here we divide it

00:20:43,039 --> 00:20:46,609
by the total of all of them including

00:20:44,899 --> 00:20:49,699
the frustrating and that tells us a

00:20:46,609 --> 00:20:53,779
percentage of the ones where the user

00:20:49,699 --> 00:20:55,459
was probably fairly happy now this is an

00:20:53,779 --> 00:20:57,949
interesting way of accumulating that

00:20:55,459 --> 00:21:00,079
data we you can use that at mix and you

00:20:57,949 --> 00:21:02,569
can look one endpoint and go ok this was

00:21:00,079 --> 00:21:07,159
pretty good at that point 97 97 percent

00:21:02,569 --> 00:21:10,489
of the customers were happy point 75 I'm

00:21:07,159 --> 00:21:12,079
not so much but one of the things that's

00:21:10,489 --> 00:21:13,219
hard to do sometimes it's figuring out

00:21:12,079 --> 00:21:14,959
where to start and you got all this

00:21:13,219 --> 00:21:16,639
information like would I be first what's

00:21:14,959 --> 00:21:18,349
the first thing I should fix this is a

00:21:16,639 --> 00:21:20,829
really interesting one where this is

00:21:18,349 --> 00:21:24,759
saying is that that first one there

00:21:20,829 --> 00:21:26,929
accounts for 28% of all of the

00:21:24,759 --> 00:21:29,479
dissatisfying interactions with our

00:21:26,929 --> 00:21:34,789
product that's a great place to start

00:21:29,479 --> 00:21:38,559
right let's go there first yeah so

00:21:34,789 --> 00:21:38,559
that's a really good way to use epics

00:21:38,659 --> 00:21:44,370
agony skylight was the first one that I

00:21:41,399 --> 00:21:45,950
heard this metric from a co-worker of

00:21:44,370 --> 00:21:48,269
mine told me about it

00:21:45,950 --> 00:21:50,190
Lonnie I'm sure there's nothing here

00:21:48,269 --> 00:21:51,570
sophisticated as there's but this is

00:21:50,190 --> 00:21:54,480
kind of the opposite way of looking at

00:21:51,570 --> 00:21:57,380
it a measure of user dissatisfaction in

00:21:54,480 --> 00:22:01,260
some ways it's the inverse of app decks

00:21:57,380 --> 00:22:02,610
so what we do here is we calculate a

00:22:01,260 --> 00:22:04,919
weighted sum we put the weights

00:22:02,610 --> 00:22:08,309
satisfies zero tolerate point five

00:22:04,919 --> 00:22:10,620
frustrated one and then we in that same

00:22:08,309 --> 00:22:13,789
scenario we have ten frustrated thirty

00:22:10,620 --> 00:22:15,929
tolerating who get an agony score of 25

00:22:13,789 --> 00:22:17,820
if you don't have all these pieces in

00:22:15,929 --> 00:22:20,190
your system but you do have the ability

00:22:17,820 --> 00:22:23,130
to look at applix you can do just want

00:22:20,190 --> 00:22:26,669
my Amex in Burnet times the total you

00:22:23,130 --> 00:22:28,860
get an agony score it looks like this so

00:22:26,669 --> 00:22:31,110
these are our top seven most agonizing

00:22:28,860 --> 00:22:33,059
points that's good I think that's a

00:22:31,110 --> 00:22:34,860
that's an instructive way to look at it

00:22:33,059 --> 00:22:37,080
as well it helps us empathize with our

00:22:34,860 --> 00:22:39,539
users we're causing this much pain to

00:22:37,080 --> 00:22:41,159
our users right so the first one that

00:22:39,539 --> 00:22:43,080
make sense it's got an app next to point

00:22:41,159 --> 00:22:45,870
7 you think yeah I mean that was causing

00:22:43,080 --> 00:22:47,100
a lot of agony let's start there you'll

00:22:45,870 --> 00:22:48,990
also notice that some of those in the

00:22:47,100 --> 00:22:51,059
list the number 7 1 and the number 4 and

00:22:48,990 --> 00:22:54,059
half pretty good at Nexus I mean and

00:22:51,059 --> 00:22:55,889
that last one 97 percent of the users

00:22:54,059 --> 00:22:57,899
interactions are good satisfying

00:22:55,889 --> 00:23:00,600
interactions but it's in that time frame

00:22:57,899 --> 00:23:02,340
issues 54,000 times

00:23:00,600 --> 00:23:04,320
therefore it's causing a good bit of

00:23:02,340 --> 00:23:07,850
agony that's a good way to look at it

00:23:04,320 --> 00:23:07,850
and kind of decide where to start

00:23:11,030 --> 00:23:16,420
one of the things that we tend to do is

00:23:13,130 --> 00:23:19,520
we tend to put in place timeouts as a

00:23:16,420 --> 00:23:23,000
measure of self-preservation we're

00:23:19,520 --> 00:23:26,330
protecting ourselves from ourselves yeah

00:23:23,000 --> 00:23:33,590
I've met the enemy and it's me I'm D

00:23:26,330 --> 00:23:37,760
listing my own site but those timeouts

00:23:33,590 --> 00:23:40,820
are dangerous time out durations are by

00:23:37,760 --> 00:23:41,930
definition unknown we don't know how

00:23:40,820 --> 00:23:45,310
long they're gonna take we don't know

00:23:41,930 --> 00:23:48,320
when they're gonna finish no no how

00:23:45,310 --> 00:23:51,190
time-consuming they are so there are a

00:23:48,320 --> 00:23:52,940
hiding place for extremely bad

00:23:51,190 --> 00:23:54,800
performance within our systems and

00:23:52,940 --> 00:24:01,010
that's a good place to start go there

00:23:54,800 --> 00:24:03,320
begin to fix those things so queries you

00:24:01,010 --> 00:24:05,150
know the APM tools give us all kinds of

00:24:03,320 --> 00:24:07,370
ways to look at slow queries there's a

00:24:05,150 --> 00:24:09,080
slow query logs in every database most

00:24:07,370 --> 00:24:10,790
databases will have stats like we talked

00:24:09,080 --> 00:24:13,790
about already to the PG stat statements

00:24:10,790 --> 00:24:15,380
and Craig Mitch in those earlier but the

00:24:13,790 --> 00:24:17,810
thing about looking at it this way

00:24:15,380 --> 00:24:20,930
instead of looking at it as an

00:24:17,810 --> 00:24:23,360
employment or a job is that it helps us

00:24:20,930 --> 00:24:26,230
see database performance problems that

00:24:23,360 --> 00:24:28,970
are related to cross-cutting concerns

00:24:26,230 --> 00:24:29,840
that you can't see when you just look at

00:24:28,970 --> 00:24:31,640
one endpoint

00:24:29,840 --> 00:24:33,260
all right permissions I would only took

00:24:31,640 --> 00:24:34,850
them you know few milliseconds it's not

00:24:33,260 --> 00:24:38,960
a big deal when you spread that across

00:24:34,850 --> 00:24:41,270
every request a small tweak to that

00:24:38,960 --> 00:24:44,420
permissions functionality could yield a

00:24:41,270 --> 00:24:46,670
tremendous reduction in load so slow

00:24:44,420 --> 00:24:48,590
queries are important for helping us see

00:24:46,670 --> 00:24:52,040
and things across the whole system in

00:24:48,590 --> 00:24:55,520
multiple places and how they affect our

00:24:52,040 --> 00:24:56,960
systems now we've talked about these

00:24:55,520 --> 00:24:58,820
durations with performance and all

00:24:56,960 --> 00:24:59,510
that's kind of complicated errors are

00:24:58,820 --> 00:25:01,760
really simple

00:24:59,510 --> 00:25:04,820
they either happen to the bitten is true

00:25:01,760 --> 00:25:06,740
or false you got one or you didn't so

00:25:04,820 --> 00:25:08,780
every thermo see just counts over a

00:25:06,740 --> 00:25:10,400
period of time you want to count them by

00:25:08,780 --> 00:25:12,500
the arrow class 1 or how many of this

00:25:10,400 --> 00:25:16,430
kind of area we got we're not how many

00:25:12,500 --> 00:25:18,140
errors we got in this place and then we

00:25:16,430 --> 00:25:21,640
can go and work on them we just pick the

00:25:18,140 --> 00:25:24,620
one with the most errors and we fix it

00:25:21,640 --> 00:25:27,440
here's my advice on errors and error

00:25:24,620 --> 00:25:31,820
exception reporting tools please for the

00:25:27,440 --> 00:25:37,010
love of God don't ignore them handle

00:25:31,820 --> 00:25:40,730
them responsibly it's very tempting to

00:25:37,010 --> 00:25:42,680
ignore them but what we need to do is to

00:25:40,730 --> 00:25:44,420
find that level of understanding dig

00:25:42,680 --> 00:25:46,970
into it understand exactly what's going

00:25:44,420 --> 00:25:53,600
on and then be able to act in a way that

00:25:46,970 --> 00:25:55,430
can resolve that problem we talked about

00:25:53,600 --> 00:25:58,490
measuring our availability of our system

00:25:55,430 --> 00:26:02,660
based on a per request basis 99.9% of

00:25:58,490 --> 00:26:06,350
the requests succeed what happens to the

00:26:02,660 --> 00:26:08,870
point one percent they fail I mean by

00:26:06,350 --> 00:26:10,970
design actually this is kind of weird to

00:26:08,870 --> 00:26:13,790
think about right by design we're

00:26:10,970 --> 00:26:15,470
planning on point one percent of our

00:26:13,790 --> 00:26:18,500
requests failing that's that's the ball

00:26:15,470 --> 00:26:21,050
that we've set for ourselves so you can

00:26:18,500 --> 00:26:23,000
think of that as your error budget and

00:26:21,050 --> 00:26:24,800
when you think of it in that way it

00:26:23,000 --> 00:26:26,900
really helps with a guilt to the

00:26:24,800 --> 00:26:29,120
conflict that comes around quality

00:26:26,900 --> 00:26:30,680
versus features because on the one hand

00:26:29,120 --> 00:26:32,330
the developers like oh there's all these

00:26:30,680 --> 00:26:33,800
errors and I feel terrible about them

00:26:32,330 --> 00:26:34,880
hard at managing the other hands like

00:26:33,800 --> 00:26:36,770
there's all these features that our

00:26:34,880 --> 00:26:38,330
customers are asking for I feel terrible

00:26:36,770 --> 00:26:41,210
because I can't give them to them an

00:26:38,330 --> 00:26:43,910
error budget gives us an objective way

00:26:41,210 --> 00:26:45,530
of looking at the errors that we have in

00:26:43,910 --> 00:26:50,270
deciding when to work on features and

00:26:45,530 --> 00:26:51,920
we'll work on errors when I first

00:26:50,270 --> 00:26:53,510
started recording this and keeping up

00:26:51,920 --> 00:26:57,050
with it it was a hundred and fifty

00:26:53,510 --> 00:26:59,450
percent over budget now this is what it

00:26:57,050 --> 00:27:01,640
looks like and just by keeping up with

00:26:59,450 --> 00:27:04,070
that regularly and attacking anything

00:27:01,640 --> 00:27:08,600
that challenges the budget we actually

00:27:04,070 --> 00:27:12,590
are now going to blow the budget now we

00:27:08,600 --> 00:27:14,600
can in a guilt-free way begin to work on

00:27:12,590 --> 00:27:20,090
the features that product management

00:27:14,600 --> 00:27:22,250
wants traces in my opinion are maybe the

00:27:20,090 --> 00:27:23,720
most valuable thing in a PM tools and

00:27:22,250 --> 00:27:26,270
except some trackers that's the

00:27:23,720 --> 00:27:28,370
superpower the ability to actually look

00:27:26,270 --> 00:27:31,370
into what's running on our production

00:27:28,370 --> 00:27:33,070
servers see what is happening and figure

00:27:31,370 --> 00:27:35,919
out what the problem is

00:27:33,070 --> 00:27:37,870
we can understand like on this one is

00:27:35,919 --> 00:27:39,429
pretty obvious right there's a big brown

00:27:37,870 --> 00:27:46,600
bar on the left side of this graph

00:27:39,429 --> 00:27:48,970
that's probably the problem it will show

00:27:46,600 --> 00:27:51,580
you each view that you're looking in

00:27:48,970 --> 00:27:53,200
each partial things like controller

00:27:51,580 --> 00:27:55,750
methods you can see each piece of that

00:27:53,200 --> 00:27:58,019
timing for those you can see the quiz

00:27:55,750 --> 00:28:00,130
that ran in the context of that request

00:27:58,019 --> 00:28:03,429
there's the one that made the big brown

00:28:00,130 --> 00:28:05,379
bar asked where we should start this

00:28:03,429 --> 00:28:06,879
pretty easy right unless you understand

00:28:05,379 --> 00:28:08,409
acting is a whole lot easier when you

00:28:06,879 --> 00:28:09,820
didn't understand here I don't know to

00:28:08,409 --> 00:28:15,730
do this thing seems slow let's do

00:28:09,820 --> 00:28:18,700
something another thing that's important

00:28:15,730 --> 00:28:21,340
is alerting when we think of a learning

00:28:18,700 --> 00:28:23,200
we tend to think of just that text

00:28:21,340 --> 00:28:25,169
message and our phone makes this RAM and

00:28:23,200 --> 00:28:28,690
sounder like oh my gosh it was another

00:28:25,169 --> 00:28:29,830
text message from the side how it could

00:28:28,690 --> 00:28:32,590
be thinking of a learning at three

00:28:29,830 --> 00:28:34,779
levels the first level should be I think

00:28:32,590 --> 00:28:36,250
you should take a look at this and just

00:28:34,779 --> 00:28:38,110
put it like in a slack channel and you

00:28:36,250 --> 00:28:39,340
look at it a few times a day see if

00:28:38,110 --> 00:28:44,860
there's anything that jumps out at you

00:28:39,340 --> 00:28:46,389
if not just ignore them crater works

00:28:44,860 --> 00:28:48,580
that say you should act on this pretty

00:28:46,389 --> 00:28:50,529
soon we have another slight channel for

00:28:48,580 --> 00:28:52,059
that like this is urgent you probably

00:28:50,529 --> 00:28:57,220
should look at this as soon as you get a

00:28:52,059 --> 00:28:58,870
chance and then the third level is you

00:28:57,220 --> 00:29:00,909
need to drop whatever you're doing and

00:28:58,870 --> 00:29:02,950
come and fix this problem right now with

00:29:00,909 --> 00:29:05,110
us and everybody takes messages this

00:29:02,950 --> 00:29:07,059
allows the system so instead of us

00:29:05,110 --> 00:29:09,070
having to watch things all the time we

00:29:07,059 --> 00:29:10,899
allow the system to bring things to our

00:29:09,070 --> 00:29:12,669
attention without a system to tell us

00:29:10,899 --> 00:29:14,980
hey you should do this pretty soon and

00:29:12,669 --> 00:29:17,019
we allow the system to tell us stop what

00:29:14,980 --> 00:29:19,299
you're doing and fix this problem right

00:29:17,019 --> 00:29:21,039
now alerts are very important and we

00:29:19,299 --> 00:29:28,240
should just continually be developing

00:29:21,039 --> 00:29:29,710
them over time filters we've got all

00:29:28,240 --> 00:29:31,539
these metrics found you got these

00:29:29,710 --> 00:29:34,480
durations we've got areas we've got all

00:29:31,539 --> 00:29:37,210
this information all this data how can

00:29:34,480 --> 00:29:38,769
we make any sense of it how can we look

00:29:37,210 --> 00:29:40,210
at it from a business perspective how

00:29:38,769 --> 00:29:42,490
can we see it from the perspective of

00:29:40,210 --> 00:29:44,679
our customers what we need to do is add

00:29:42,490 --> 00:29:46,690
in the ability to filter these metrics

00:29:44,679 --> 00:29:48,490
in most our

00:29:46,690 --> 00:29:51,490
give us the ability to add custom

00:29:48,490 --> 00:29:54,790
metrics custom attributes rather to our

00:29:51,490 --> 00:29:56,170
events to our requests and our jobs some

00:29:54,790 --> 00:29:58,840
of the ones that we've added to ours is

00:29:56,170 --> 00:29:59,950
which customer is it how big is this

00:29:58,840 --> 00:30:03,430
customer is an enterprise customer

00:29:59,950 --> 00:30:05,410
mid-market customer small customer which

00:30:03,430 --> 00:30:07,120
user where did it come from it comes

00:30:05,410 --> 00:30:09,400
from our mobile app they come from our

00:30:07,120 --> 00:30:11,620
users API using our API then you come

00:30:09,400 --> 00:30:14,410
from our web app which Squad is

00:30:11,620 --> 00:30:17,170
responsible for this these allow us to

00:30:14,410 --> 00:30:20,170
then look at all the metrics in a way

00:30:17,170 --> 00:30:23,260
that makes sense to the business we have

00:30:20,170 --> 00:30:26,020
in our support admin section the ability

00:30:23,260 --> 00:30:27,430
for our support people to look at a

00:30:26,020 --> 00:30:28,750
customer there's a link there they can

00:30:27,430 --> 00:30:30,400
click on that link it takes them to a

00:30:28,750 --> 00:30:32,080
dashboard already filtered by that

00:30:30,400 --> 00:30:34,180
customer they can see the performance

00:30:32,080 --> 00:30:35,950
and the errors that that customer is

00:30:34,180 --> 00:30:37,540
having so when they're talking to them

00:30:35,950 --> 00:30:40,290
on the phone they can actually see

00:30:37,540 --> 00:30:42,460
what's going on that's very valuable

00:30:40,290 --> 00:30:44,530
most of these systems will allow you to

00:30:42,460 --> 00:30:46,840
do that is by adding custom attributes

00:30:44,530 --> 00:30:48,550
and then filtering based on that another

00:30:46,840 --> 00:30:50,530
awesome one is filtering by squad we

00:30:48,550 --> 00:30:52,450
just added that one recently we're still

00:30:50,530 --> 00:30:53,620
the process of unit and I worked out but

00:30:52,450 --> 00:30:55,240
then squats can have their own

00:30:53,620 --> 00:30:58,480
dashboards and they can take ownership

00:30:55,240 --> 00:31:02,550
of their own functionality and improve

00:30:58,480 --> 00:31:02,550
it over time performance errors

00:31:04,800 --> 00:31:11,110
communication communication is very

00:31:09,400 --> 00:31:12,700
important we were working on site

00:31:11,110 --> 00:31:14,650
reliability things because the stuff

00:31:12,700 --> 00:31:17,380
that we do is really hard for most

00:31:14,650 --> 00:31:19,210
people to visualize all right who's

00:31:17,380 --> 00:31:21,340
going to dev demos another developer

00:31:19,210 --> 00:31:23,620
rocks some functionality they demo

00:31:21,340 --> 00:31:25,990
everybody sees it they go officer that's

00:31:23,620 --> 00:31:30,790
so cool I love what you did there and I

00:31:25,990 --> 00:31:33,550
come in I say I fixed this query atom

00:31:30,790 --> 00:31:36,640
index now this thing you know hits the

00:31:33,550 --> 00:31:38,110
index with a complete index key and

00:31:36,640 --> 00:31:39,090
every time I mean it's just super

00:31:38,110 --> 00:31:43,140
awesome

00:31:39,090 --> 00:31:43,140
they're like you know whatever

00:31:43,810 --> 00:31:49,580
but you sure this and they go ah I see

00:31:48,080 --> 00:31:50,840
the big brown thing on the left and the

00:31:49,580 --> 00:31:52,670
little brown thing on the right

00:31:50,840 --> 00:31:54,380
you really improve the performance at

00:31:52,670 --> 00:31:57,080
this endpoint right

00:31:54,380 --> 00:31:58,370
so in communicating is important we need

00:31:57,080 --> 00:31:59,690
for everybody in the organization be

00:31:58,370 --> 00:32:01,310
able to see the improvements that we're

00:31:59,690 --> 00:32:01,970
making graphs is a great way of doing

00:32:01,310 --> 00:32:04,160
that

00:32:01,970 --> 00:32:06,440
another great way of communicating all

00:32:04,160 --> 00:32:08,780
this data that is so confusing and

00:32:06,440 --> 00:32:10,730
bewildering is to build dashboards that

00:32:08,780 --> 00:32:13,880
give people views into that data that

00:32:10,730 --> 00:32:16,400
are useful to them we have performance

00:32:13,880 --> 00:32:18,080
dashboards era dashboards time outs site

00:32:16,400 --> 00:32:20,150
reliability that shows all the different

00:32:18,080 --> 00:32:22,010
snapshots of memory and everything on

00:32:20,150 --> 00:32:23,930
the system load all those kinds of

00:32:22,010 --> 00:32:25,250
things and own call troubleshooting

00:32:23,930 --> 00:32:26,540
dashboard where they can come in and

00:32:25,250 --> 00:32:27,040
really quickly see what might be the

00:32:26,540 --> 00:32:31,070
problem

00:32:27,040 --> 00:32:32,540
we have dashboards around our SL O's so

00:32:31,070 --> 00:32:34,550
this one here you can see the scribe

00:32:32,540 --> 00:32:37,010
table at the top so each square I can

00:32:34,550 --> 00:32:38,390
come in and see how they rank compared

00:32:37,010 --> 00:32:40,670
to everybody else and they can filter

00:32:38,390 --> 00:32:42,680
that dashboard by just their squad and

00:32:40,670 --> 00:32:44,410
see how all of their influence are

00:32:42,680 --> 00:32:49,160
performing

00:32:44,410 --> 00:32:50,480
here's one with accounts and users this

00:32:49,160 --> 00:32:51,980
one is really awesome on you got an

00:32:50,480 --> 00:32:53,960
endpoint that is slow you're not really

00:32:51,980 --> 00:32:55,940
sure why you filter the dashboard by the

00:32:53,960 --> 00:32:57,950
endpoint it shows you which accounts and

00:32:55,940 --> 00:32:59,270
which users are seeing the slowness then

00:32:57,950 --> 00:33:01,280
you can go in say what is different

00:32:59,270 --> 00:33:04,610
about this one compared to that one that

00:33:01,280 --> 00:33:05,440
makes them slow and there's not very

00:33:04,610 --> 00:33:07,850
useful

00:33:05,440 --> 00:33:09,740
here's that troubleshooting dashboard I

00:33:07,850 --> 00:33:11,720
talked about you see the bottom left

00:33:09,740 --> 00:33:13,220
they've got thresholds on this so it

00:33:11,720 --> 00:33:14,810
turns yellow and it goes above a certain

00:33:13,220 --> 00:33:17,210
threshold there and when it goes above

00:33:14,810 --> 00:33:21,740
that so you can easily see when there's

00:33:17,210 --> 00:33:23,870
a page what's causing problems then the

00:33:21,740 --> 00:33:25,790
last thing about communicating is that

00:33:23,870 --> 00:33:28,010
if we're going to build a reliable site

00:33:25,790 --> 00:33:31,370
it takes a team site reliability

00:33:28,010 --> 00:33:33,500
engineer can't do it everybody is

00:33:31,370 --> 00:33:35,660
involved in that so one of the things

00:33:33,500 --> 00:33:37,970
that we need to do is communicate to

00:33:35,660 --> 00:33:41,360
everybody else what's going on how

00:33:37,970 --> 00:33:43,910
things work so what we do is we have an

00:33:41,360 --> 00:33:46,310
internal blog video blog and regular

00:33:43,910 --> 00:33:48,170
blog that we do in slack so we just do

00:33:46,310 --> 00:33:50,180
it in the team engineering Channel we

00:33:48,170 --> 00:33:51,320
just went low-tech is put some hashes

00:33:50,180 --> 00:33:55,300
and then it gets a little weird with the

00:33:51,320 --> 00:33:58,120
channel it works

00:33:55,300 --> 00:34:00,070
I'll do a blog post which is all text or

00:33:58,120 --> 00:34:02,440
I'll do a video post like this I just do

00:34:00,070 --> 00:34:04,510
a screencast and show how to do things

00:34:02,440 --> 00:34:06,340
how things work and that's communicated

00:34:04,510 --> 00:34:19,320
to the whole team and we're all able to

00:34:06,340 --> 00:34:19,320
learn in order to create a reliable site

00:34:19,380 --> 00:34:24,159
we need to be continuously improving the

00:34:22,149 --> 00:34:27,970
visibility that we have into what's

00:34:24,159 --> 00:34:30,100
actually happening we should most week

00:34:27,970 --> 00:34:32,350
start down this path I think it's wise

00:34:30,100 --> 00:34:34,000
to always have some sort of metric story

00:34:32,350 --> 00:34:35,620
in the backlog I was trying to solve

00:34:34,000 --> 00:34:37,210
this thing and I couldn't and if I could

00:34:35,620 --> 00:34:37,810
see this information I'd be able to

00:34:37,210 --> 00:34:39,510
solve it

00:34:37,810 --> 00:34:45,190
that goes in the backlog right

00:34:39,510 --> 00:34:48,190
continually adding news because to

00:34:45,190 --> 00:34:52,020
understand it's hard but once one

00:34:48,190 --> 00:34:52,020
understands action

00:34:53,600 --> 00:35:01,550

YouTube URL: https://www.youtube.com/watch?v=BHLS2pmBrIk


