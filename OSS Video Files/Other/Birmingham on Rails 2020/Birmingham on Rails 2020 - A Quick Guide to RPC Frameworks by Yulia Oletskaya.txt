Title: Birmingham on Rails 2020 - A Quick Guide to RPC Frameworks by Yulia Oletskaya
Publication date: 2020-02-19
Playlist: Birmingham on Rails 2020
Description: 
	Birmingham on Rails 2020 - A Quick Guide to RPC Frameworks by Yulia Oletskaya
Captions: 
	00:00:03,310 --> 00:00:06,460
[Music]

00:00:10,550 --> 00:00:15,210
[Music]

00:00:12,070 --> 00:00:15,210
[Applause]

00:00:16,460 --> 00:00:24,390
yeah so I will be talking about our pcs

00:00:20,869 --> 00:00:28,650
maybe a quick summary before the talk

00:00:24,390 --> 00:00:32,160
what I'm going to tell you guys I have

00:00:28,650 --> 00:00:36,270
worked it with one of the RPC frameworks

00:00:32,160 --> 00:00:39,180
so I'm going to tell you what why did we

00:00:36,270 --> 00:00:43,200
decide to use it which problems did it

00:00:39,180 --> 00:00:46,289
help us to solve and also I will drink a

00:00:43,200 --> 00:00:49,200
bit into the protocol details and

00:00:46,289 --> 00:00:52,649
compare the solutions that we used with

00:00:49,200 --> 00:00:54,690
other options cause it appeared that

00:00:52,649 --> 00:00:58,730
there are actually a lot of different

00:00:54,690 --> 00:01:01,739
RPC frameworks and I decided that it's

00:00:58,730 --> 00:01:06,930
interesting just to know what are there

00:01:01,739 --> 00:01:10,979
on the market and before before I start

00:01:06,930 --> 00:01:14,750
I needed to add that suddenly just like

00:01:10,979 --> 00:01:17,909
heated me only like recently and I feel

00:01:14,750 --> 00:01:21,619
sleepy and Neuros at the same time and I

00:01:17,909 --> 00:01:27,270
hope I won't fall asleep right now so

00:01:21,619 --> 00:01:29,610
you ready - yes Amy also I notice at the

00:01:27,270 --> 00:01:33,750
pattern that all the foreign speakers

00:01:29,610 --> 00:01:37,020
they start with some pictures of their

00:01:33,750 --> 00:01:40,350
cities and pictures or maybe mops and

00:01:37,020 --> 00:01:42,720
I'm not an exception here so first I'm

00:01:40,350 --> 00:01:45,899
going to tell a few things about Hilary

00:01:42,720 --> 00:01:49,560
scoffs I assume that not a lot of people

00:01:45,899 --> 00:01:52,799
know much about this country here so

00:01:49,560 --> 00:01:58,979
yeah dollars it's here it's in Eastern

00:01:52,799 --> 00:02:01,409
Europe in some French newspapers said

00:01:58,979 --> 00:02:05,759
that this is one of the top countries to

00:02:01,409 --> 00:02:07,680
visit in 2020 so probably this is going

00:02:05,759 --> 00:02:09,179
to be even the most useful information

00:02:07,680 --> 00:02:18,060
for you

00:02:09,179 --> 00:02:20,280
our pcs actually those makes the biggest

00:02:18,060 --> 00:02:23,359
trucks in the world with highest

00:02:20,280 --> 00:02:29,670
capacity the nameless barrels

00:02:23,359 --> 00:02:32,250
also it the third expert expert or but

00:02:29,670 --> 00:02:35,340
my haters salt I hope I pronounced it

00:02:32,250 --> 00:02:38,930
right as the first place is Russians I

00:02:35,340 --> 00:02:42,260
can't and camera and we as a certain

00:02:38,930 --> 00:02:47,060
this is the National any of those

00:02:42,260 --> 00:02:52,950
European bison said it was almost

00:02:47,060 --> 00:02:59,489
extinct by rent of the second one but

00:02:52,950 --> 00:03:01,609
right now is also very pretty safe

00:02:59,489 --> 00:03:04,919
return

00:03:01,609 --> 00:03:07,980
no no what so ever known fact about

00:03:04,919 --> 00:03:21,510
bones that we have a one strong school

00:03:07,980 --> 00:03:31,260
of monastic art works they're also very

00:03:21,510 --> 00:03:37,139
proud order of the ugliest old crush

00:03:31,260 --> 00:03:39,989
it's located in the best city also an

00:03:37,139 --> 00:03:44,009
important fact with the recent attacks

00:03:39,989 --> 00:03:46,109
in hate to be the people who consume the

00:03:44,009 --> 00:03:50,030
highest amount of potatoes in the road

00:03:46,109 --> 00:03:52,639
it's about half of for a person per day

00:03:50,030 --> 00:03:56,909
sir

00:03:52,639 --> 00:04:02,310
yeah so let's get straight to the point

00:03:56,909 --> 00:04:04,680
what is RPC RPC is a procedure call it's

00:04:02,310 --> 00:04:06,829
a protocol that one problem can I use to

00:04:04,680 --> 00:04:11,780
call a service from another program

00:04:06,829 --> 00:04:11,780
located somewhere in the network

00:04:12,269 --> 00:04:21,259
it's actually pretty bad sag and parole

00:04:18,130 --> 00:04:21,259
[Music]

00:04:26,750 --> 00:04:36,600
it's become popular among web developers

00:04:31,440 --> 00:04:38,610
only personally do to the raise of micro

00:04:36,600 --> 00:04:42,530
services and service oriented

00:04:38,610 --> 00:04:46,020
architecture cause RPC may help to solve

00:04:42,530 --> 00:04:52,980
communication problem between mr. headed

00:04:46,020 --> 00:04:55,740
services and RPC framework honestly is

00:04:52,980 --> 00:05:00,930
sometimes it helps you know to guilt our

00:04:55,740 --> 00:05:04,320
PC based solution what is what you need

00:05:00,930 --> 00:05:08,280
to know about RPC framework sweetie it's

00:05:04,320 --> 00:05:10,770
not a monolithic framework but rather a

00:05:08,280 --> 00:05:13,410
collection of technologies so we can

00:05:10,770 --> 00:05:17,250
change the way how we want to encode

00:05:13,410 --> 00:05:19,830
data the way how we want to transfer it

00:05:17,250 --> 00:05:26,669
and there are usually different options

00:05:19,830 --> 00:05:30,000
to pick wasn't the same framework there

00:05:26,669 --> 00:05:33,750
is a lot of such as the opposite lip

00:05:30,000 --> 00:05:36,570
sweet kappa protonfootball other and

00:05:33,750 --> 00:05:40,320
that's not all of them it's just a list

00:05:36,570 --> 00:05:43,400
that i included in this presentation and

00:05:40,320 --> 00:05:49,740
what kind of interesting of dystocia

00:05:43,400 --> 00:05:52,970
this frameworks so almost every one of

00:05:49,740 --> 00:05:56,220
them is backed up by a big corporation

00:05:52,970 --> 00:05:58,830
forger pc this is boba for to yield

00:05:56,220 --> 00:06:03,150
possesses twitch for sweet this is

00:05:58,830 --> 00:06:08,030
Facebook proto came as a bit outstanding

00:06:03,150 --> 00:06:13,040
here Fandango is 42 dango is from

00:06:08,030 --> 00:06:17,370
China's Alibaba pronounce it correctly

00:06:13,040 --> 00:06:20,520
and so on so usually our pcs frameworks

00:06:17,370 --> 00:06:24,050
is something that big corporation ID and

00:06:20,520 --> 00:06:28,070
it's kind of hard to do it you know for

00:06:24,050 --> 00:06:28,070
open-source enthusiasts

00:06:28,090 --> 00:06:33,150
does not make some sense then stones

00:06:30,940 --> 00:06:33,150
behind

00:06:33,360 --> 00:06:40,420
I'll start with Jeremy seem nice as well

00:06:37,450 --> 00:06:45,100
spoiler alert as long as I don't have as

00:06:40,420 --> 00:06:49,690
I must experience joy Pistons one

00:06:45,100 --> 00:06:53,050
created by in Google protocol buffers

00:06:49,690 --> 00:06:56,920
based services of tonight's regeneration

00:06:53,050 --> 00:07:01,050
of client and server code and the killer

00:06:56,920 --> 00:07:13,450
feature is bi-directional gyros s4 also

00:07:01,050 --> 00:07:18,720
it uses HTTP - why we use is what was

00:07:13,450 --> 00:07:22,780
our sister so I was working on a company

00:07:18,720 --> 00:07:26,800
with quite a big system consistent from

00:07:22,780 --> 00:07:30,250
more than 50 different services and I'll

00:07:26,800 --> 00:07:31,050
show you a certified schemer how did it

00:07:30,250 --> 00:07:36,790
look like

00:07:31,050 --> 00:07:39,040
we had an a WS lambda function which was

00:07:36,790 --> 00:07:43,690
triggered each time Samson was had

00:07:39,040 --> 00:07:47,260
something happening at our s3 service

00:07:43,690 --> 00:07:50,440
likes a file was uploaded deleted or

00:07:47,260 --> 00:07:53,860
something basically only anything goes

00:07:50,440 --> 00:07:56,350
wrong answer and another function was

00:07:53,860 --> 00:07:58,840
sending a special message for our

00:07:56,350 --> 00:08:04,300
intelligence service and as manager

00:07:58,840 --> 00:08:06,730
service server sent upon request through

00:08:04,300 --> 00:08:10,060
a lot of other services he has a little

00:08:06,730 --> 00:08:16,330
knife there was more than 50 but though

00:08:10,060 --> 00:08:18,580
okay it's a simplified version and we

00:08:16,330 --> 00:08:21,610
have a les mots job

00:08:18,580 --> 00:08:25,270
so it's a national service was subscribe

00:08:21,610 --> 00:08:28,690
we were subscribed to different accuse

00:08:25,270 --> 00:08:32,140
like when for example packages or titles

00:08:28,690 --> 00:08:36,339
or other services were fashion their job

00:08:32,140 --> 00:08:41,750
they sent messages to secure so managing

00:08:36,339 --> 00:08:45,120
the aware that the processing is done so

00:08:41,750 --> 00:08:45,540
what I had before and it was working for

00:08:45,120 --> 00:08:48,990
us

00:08:45,540 --> 00:08:52,200
and at some point we decided that we

00:08:48,990 --> 00:08:58,800
want to change it and the question was

00:08:52,200 --> 00:09:03,209
why first of all I had issues with not

00:08:58,800 --> 00:09:06,380
streaming I habits at this point maybe

00:09:03,209 --> 00:09:10,320
some of these issues are already fixed

00:09:06,380 --> 00:09:15,060
is there github repo for the past what

00:09:10,320 --> 00:09:21,720
have seen that sometimes not strong

00:09:15,060 --> 00:09:23,760
cluster had no big came out with not so

00:09:21,720 --> 00:09:26,670
many messages because what was a lot

00:09:23,760 --> 00:09:31,230
actually our service wasn't so big it is

00:09:26,670 --> 00:09:35,519
internal system and maybe like ten

00:09:31,230 --> 00:09:38,480
managers but messages in it or something

00:09:35,519 --> 00:09:45,829
so the world is relatively small and

00:09:38,480 --> 00:09:52,079
even with this kind of psychosis it was

00:09:45,829 --> 00:09:55,200
rabid and that some subscriptions

00:09:52,079 --> 00:09:57,570
suddenly just stop to receive messages

00:09:55,200 --> 00:10:01,020
and also we were fighting it for quite

00:09:57,570 --> 00:10:03,870
some time and there was a decision that

00:10:01,020 --> 00:10:06,380
we need to change the way home are gonna

00:10:03,870 --> 00:10:06,380
casings

00:10:06,680 --> 00:10:15,329
thunderation options we considered Kafka

00:10:10,200 --> 00:10:21,709
rabbit his kills asanas and energy send

00:10:15,329 --> 00:10:25,220
our pcs the final choice for us was

00:10:21,709 --> 00:10:29,279
accepted he beckoned with Jerr PC as a

00:10:25,220 --> 00:10:32,850
communication mechanism and the word

00:10:29,279 --> 00:10:38,130
states tales behind this decision is

00:10:32,850 --> 00:10:42,260
politics cause we had rather big devotes

00:10:38,130 --> 00:10:45,540
department and this guys they were

00:10:42,260 --> 00:10:48,350
interested in trying new things like

00:10:45,540 --> 00:10:53,829
writing something in going maybe

00:10:48,350 --> 00:10:56,170
something connected to a PC so they

00:10:53,829 --> 00:11:00,430
well actually it turned out pretty well

00:10:56,170 --> 00:11:07,779
for us because we received what we

00:11:00,430 --> 00:11:11,290
wanted and the finals - so now we also

00:11:07,779 --> 00:11:15,459
have some service which is still my

00:11:11,290 --> 00:11:19,540
son's - a double bass but there is an

00:11:15,459 --> 00:11:24,089
RPC a server I want also it's not risky

00:11:19,540 --> 00:11:27,339
but each of the services has RPC client

00:11:24,089 --> 00:11:32,529
so in short mr. grant is subscribed to

00:11:27,339 --> 00:11:35,970
the RPC server and data is pick it up in

00:11:32,529 --> 00:11:39,779
the active anchor and this is actually

00:11:35,970 --> 00:11:42,760
works quite reliable for us we are

00:11:39,779 --> 00:11:51,760
getting the stuff done with this system

00:11:42,760 --> 00:11:57,459
I some can arrest some okay anyway there

00:11:51,760 --> 00:11:59,740
was one more slide we sold it may be the

00:11:57,459 --> 00:12:02,800
best choice at least for our program was

00:11:59,740 --> 00:12:06,160
kafka service but Kafka is considerate

00:12:02,800 --> 00:12:12,160
to have to be hard to monitor hard to

00:12:06,160 --> 00:12:15,060
configure so we in also two hops guys so

00:12:12,160 --> 00:12:18,730
when I decided which RPC is way for us

00:12:15,060 --> 00:12:20,430
but I'm concerned that my slides are

00:12:18,730 --> 00:12:24,930
growing but ok

00:12:20,430 --> 00:12:29,860
ok what is our advantages of protocol

00:12:24,930 --> 00:12:31,740
that above is the way how do we send

00:12:29,860 --> 00:12:34,149
messages

00:12:31,740 --> 00:12:38,380
mechanisms that I will add more details

00:12:34,149 --> 00:12:42,069
on how it works later but it helps to

00:12:38,380 --> 00:12:47,829
keep the messages as well so we saved a

00:12:42,069 --> 00:12:51,040
lot of money on the traffic another

00:12:47,829 --> 00:12:54,850
great advantage of jpc is sure both

00:12:51,040 --> 00:12:57,459
common definitions cause all the clients

00:12:54,850 --> 00:12:59,949
they share is the same schema and here

00:12:57,459 --> 00:13:02,470
you can just change the message format

00:12:59,949 --> 00:13:05,300
somewhere and break it everywhere else

00:13:02,470 --> 00:13:08,240
so it's quite safe

00:13:05,300 --> 00:13:12,980
especially in our system cause we have

00:13:08,240 --> 00:13:14,540
quite isolated teams even I work it in

00:13:12,980 --> 00:13:17,660
the Ruby team and we didn't have

00:13:14,540 --> 00:13:19,970
permission to see repositories of other

00:13:17,660 --> 00:13:24,200
services and we didn't communicate much

00:13:19,970 --> 00:13:27,079
with other teams so so there is no way

00:13:24,200 --> 00:13:29,180
that someone who can for example in Java

00:13:27,079 --> 00:13:32,060
service change something and break

00:13:29,180 --> 00:13:35,959
everything in our and our team goes we

00:13:32,060 --> 00:13:40,730
all have the same schema next one along

00:13:35,959 --> 00:13:43,399
him login also great in in our service

00:13:40,730 --> 00:13:46,070
codes but basically we did it all mainly

00:13:43,399 --> 00:13:48,860
in the server in in the client part we

00:13:46,070 --> 00:13:51,410
can lock whatever we want and it started

00:13:48,860 --> 00:13:53,870
become much more easier to debug the

00:13:51,410 --> 00:13:58,880
system cause for example compared to not

00:13:53,870 --> 00:14:02,420
streaming when we had issues with her

00:13:58,880 --> 00:14:06,019
main sources messages it was really hard

00:14:02,420 --> 00:14:07,640
to Deacon to the log since we spent a

00:14:06,019 --> 00:14:10,120
lot of time just trying to figure out

00:14:07,640 --> 00:14:13,070
what was the issue

00:14:10,120 --> 00:14:17,810
yeah afterthought so this was a spice

00:14:13,070 --> 00:14:20,690
that I was looking for yeah we we

00:14:17,810 --> 00:14:25,040
thought that some Kafka may be possible

00:14:20,690 --> 00:14:29,950
choice for us but general PC works and

00:14:25,040 --> 00:14:32,860
it's great some implementations are

00:14:29,950 --> 00:14:36,500
currently the reset floor of

00:14:32,860 --> 00:14:40,160
implementations general going Python and

00:14:36,500 --> 00:14:43,610
C++ was it for amines as it also updates

00:14:40,160 --> 00:14:47,180
also the security fixes and this stuff

00:14:43,610 --> 00:14:50,899
comes first to system witches and the

00:14:47,180 --> 00:14:53,180
rest in us to wait for example for Rudy

00:14:50,899 --> 00:14:56,270
when we migrated I don't exactly

00:14:53,180 --> 00:15:01,339
remember sir versions but maybe from 2.4

00:14:56,270 --> 00:15:03,980
to 2.5 we couldn't think rate because

00:15:01,339 --> 00:15:06,079
there was a conflict with Jerry PC gem

00:15:03,980 --> 00:15:08,810
and some silly Barry was throwing

00:15:06,079 --> 00:15:12,199
exceptions and we were forced to wait

00:15:08,810 --> 00:15:14,750
till Google release an update but it

00:15:12,199 --> 00:15:17,350
wasn't for too long maybe one week or so

00:15:14,750 --> 00:15:20,500
and we were able to be

00:15:17,350 --> 00:15:22,810
to date as a transport

00:15:20,500 --> 00:15:25,540
gerrae PC provides next options you

00:15:22,810 --> 00:15:27,900
remember I said it's not monolithic so

00:15:25,540 --> 00:15:33,670
you can pick whatever you want like

00:15:27,900 --> 00:15:37,690
http/2 or cronut or in process in

00:15:33,670 --> 00:15:41,290
process is loco and you like don't want

00:15:37,690 --> 00:15:45,400
to set up separate above itself and all

00:15:41,290 --> 00:15:48,010
this difficult infrastructure and you

00:15:45,400 --> 00:15:55,600
just want to test your messages in the

00:15:48,010 --> 00:15:58,930
same process the rest of your PC

00:15:55,600 --> 00:16:02,800
protocols are here Bob respond offers

00:15:58,930 --> 00:16:07,360
and all the others look in more details

00:16:02,800 --> 00:16:10,390
into prata buffers cuz I think it's just

00:16:07,360 --> 00:16:13,120
well usually as a developer you do not

00:16:10,390 --> 00:16:16,720
need to to know exactly how it works

00:16:13,120 --> 00:16:18,760
cause this is a black box for you but I

00:16:16,720 --> 00:16:20,590
think it's rather interesting just from

00:16:18,760 --> 00:16:22,630
you know high level perspective to

00:16:20,590 --> 00:16:25,150
understand what this plateau buffer what

00:16:22,630 --> 00:16:29,320
does it mean and why it helps to reduce

00:16:25,150 --> 00:16:29,680
the size of the messages like how in the

00:16:29,320 --> 00:16:32,170
world

00:16:29,680 --> 00:16:35,680
anything can be more effective than JSON

00:16:32,170 --> 00:16:40,840
for example just this kind of little

00:16:35,680 --> 00:16:42,600
details so plot above this is a method

00:16:40,840 --> 00:16:45,760
of three wisemen structured data

00:16:42,600 --> 00:16:48,160
it's guarantees types a fitting and

00:16:45,760 --> 00:16:53,050
backward compatibility due to shareable

00:16:48,160 --> 00:16:55,180
schema definitions well guarantees fast

00:16:53,050 --> 00:17:01,780
realization and this realization and

00:16:55,180 --> 00:17:04,780
it's smeller's other popular formats so

00:17:01,780 --> 00:17:07,720
here is a schematic fashion how it looks

00:17:04,780 --> 00:17:12,010
like in real life here you can see

00:17:07,720 --> 00:17:14,230
several messages so it looks the data

00:17:12,010 --> 00:17:18,730
type like for example string than the

00:17:14,230 --> 00:17:21,910
human and the human umber he must be

00:17:18,730 --> 00:17:24,040
unique wasn't the same message goes in

00:17:21,910 --> 00:17:26,800
this realization itself it won't use

00:17:24,040 --> 00:17:30,040
names it won't use this unique numbers

00:17:26,800 --> 00:17:31,040
and you can change this name if you'd

00:17:30,040 --> 00:17:34,420
like to

00:17:31,040 --> 00:17:38,920
but the numbers they should be the same

00:17:34,420 --> 00:17:43,010
and at the end of the file you can see

00:17:38,920 --> 00:17:46,760
the service which describes which

00:17:43,010 --> 00:17:50,570
messages your Jer PC system is able to

00:17:46,760 --> 00:17:55,490
send and receive and which data types it

00:17:50,570 --> 00:17:57,770
gets from it and yeah and this protocol

00:17:55,490 --> 00:18:00,440
should be shared between all services

00:17:57,770 --> 00:18:07,850
between all clients and in the server

00:18:00,440 --> 00:18:14,320
it'll work should be the same here is a

00:18:07,850 --> 00:18:15,590
dump of HTTP request with hello world

00:18:14,320 --> 00:18:18,650
message

00:18:15,590 --> 00:18:22,160
I don't know Jason here you can see that

00:18:18,650 --> 00:18:26,570
the file data takes 25 bytes so it's

00:18:22,160 --> 00:18:29,120
just a plain HTTP and JSON content and

00:18:26,570 --> 00:18:35,060
let's compare it was the same message

00:18:29,120 --> 00:18:37,340
but sent via Gerasim so here you can see

00:18:35,060 --> 00:18:40,400
that there are much more different

00:18:37,340 --> 00:18:42,980
helper messages that are being sent on

00:18:40,400 --> 00:18:46,280
the network like some kind of max

00:18:42,980 --> 00:18:49,430
settings and this kind of stuff also pay

00:18:46,280 --> 00:18:53,000
attention all the ones but the message

00:18:49,430 --> 00:18:55,880
data itself is certain bytes so it turns

00:18:53,000 --> 00:19:01,480
smaller than the same message in JSON

00:18:55,880 --> 00:19:05,140
and when we will be considering higher

00:19:01,480 --> 00:19:07,370
like the biggest messages the that

00:19:05,140 --> 00:19:09,410
saving would be would be much better

00:19:07,370 --> 00:19:14,270
because the message is small something

00:19:09,410 --> 00:19:18,230
here it gets it will get better

00:19:14,270 --> 00:19:23,870
compression but on the same time pay

00:19:18,230 --> 00:19:27,800
attention is at the Jaypee scene it

00:19:23,870 --> 00:19:30,800
takes much more messages with bigger

00:19:27,800 --> 00:19:35,690
grants in total so in case of your

00:19:30,800 --> 00:19:38,360
system sends very rare small requests to

00:19:35,690 --> 00:19:41,720
each other between services so maybe in

00:19:38,360 --> 00:19:45,919
your case it won't help much

00:19:41,720 --> 00:19:47,269
but work comes for our system we had

00:19:45,919 --> 00:19:50,570
rather frequent

00:19:47,269 --> 00:19:54,379
and big messages with giant contents

00:19:50,570 --> 00:19:58,519
inside so Jen PC for us saved a lot of

00:19:54,379 --> 00:20:02,500
data and also it wasn't too heavy on the

00:19:58,519 --> 00:20:07,659
network compared to touch the supreme

00:20:02,500 --> 00:20:07,659
now one second

00:20:09,429 --> 00:20:14,539
now let's take an trees and tails how

00:20:12,169 --> 00:20:17,330
exactly brought the buffers help to

00:20:14,539 --> 00:20:20,860
compress the messages so let's imagine

00:20:17,330 --> 00:20:24,590
that we have message hello requests with

00:20:20,860 --> 00:20:29,049
single attribute contact abducted by of

00:20:24,590 --> 00:20:33,679
data type string and we need to send hey

00:20:29,049 --> 00:20:40,009
message over the network it will be

00:20:33,679 --> 00:20:43,299
converted to those bytes across the

00:20:40,009 --> 00:20:43,299
binary form Falls

00:20:43,820 --> 00:20:51,919
first of all gerrae PC has different

00:20:47,809 --> 00:20:55,759
type numbers for different data types

00:20:51,919 --> 00:20:57,740
and in our case it was a string and it

00:20:55,759 --> 00:21:02,360
means it is a lens and limiters

00:20:57,740 --> 00:21:05,360
so it's typed number two and the first

00:21:02,360 --> 00:21:09,320
byte in the string always contains this

00:21:05,360 --> 00:21:12,350
data type so this is a piece a message

00:21:09,320 --> 00:21:15,309
you can be sure that the first byte

00:21:12,350 --> 00:21:20,090
I tell you what is the wire type and

00:21:15,309 --> 00:21:24,980
also a field a team so what it has to do

00:21:20,090 --> 00:21:28,970
it drops the most significant bit to

00:21:24,980 --> 00:21:31,700
determine whether it is 0 or this is 1

00:21:28,970 --> 00:21:33,379
and in case if it is 1 its it

00:21:31,700 --> 00:21:36,639
understands that it wants to bring it

00:21:33,379 --> 00:21:41,809
the next one till it finds the first 0

00:21:36,639 --> 00:21:44,059
but in our case it was 0 so the system

00:21:41,809 --> 00:21:50,730
can realize that all the information are

00:21:44,059 --> 00:21:54,490
businesses first byte and the last

00:21:50,730 --> 00:21:59,799
what's a number store our data type so

00:21:54,490 --> 00:22:06,490
it's zero one zero Tom in binary the

00:21:59,799 --> 00:22:12,429
string data type and the rest is field

00:22:06,490 --> 00:22:15,549
number so one is arrested the second bad

00:22:12,429 --> 00:22:20,039
for like we already detected that all

00:22:15,549 --> 00:22:23,350
right data type is limited or strong so

00:22:20,039 --> 00:22:27,610
wrong right forces data pipe contains a

00:22:23,350 --> 00:22:34,960
amount of bytes to read so it is a three

00:22:27,610 --> 00:22:36,760
bytes encoded and you deviate Hey so

00:22:34,960 --> 00:22:40,510
yeah this is how I put the buffers work

00:22:36,760 --> 00:22:45,100
and usually you know not usually always

00:22:40,510 --> 00:22:48,340
you don't have to know what comes jpc

00:22:45,100 --> 00:22:51,340
will generate automatically services for

00:22:48,340 --> 00:22:56,169
you to encode and decode messages based

00:22:51,340 --> 00:23:01,600
on your proto files it uses a special

00:22:56,169 --> 00:23:04,630
protocol dialer to be able to do it for

00:23:01,600 --> 00:23:06,850
okay is a special giant named jerry

00:23:04,630 --> 00:23:10,110
santos you don't meet it in production

00:23:06,850 --> 00:23:14,580
articles it used only to generate

00:23:10,110 --> 00:23:14,580
classes based on your proto files

00:23:15,059 --> 00:23:22,600
so to summarize the jpc sync it has a

00:23:19,990 --> 00:23:24,940
weight the commutation also this is a

00:23:22,600 --> 00:23:28,240
Google product and they are trying to

00:23:24,940 --> 00:23:30,669
keep everything documented it has big

00:23:28,240 --> 00:23:34,090
community so in case if you have any

00:23:30,669 --> 00:23:36,610
questions you will be able to just go

00:23:34,090 --> 00:23:38,559
out and probably the first answer on

00:23:36,610 --> 00:23:43,059
Stack Overflow will give you the right

00:23:38,559 --> 00:23:46,120
answer also it is uses it uses HTTP to

00:23:43,059 --> 00:23:50,669
and the killer feature found that leaks

00:23:46,120 --> 00:23:53,960
communication and when it comes to cause

00:23:50,669 --> 00:23:57,499
this is the thing

00:23:53,960 --> 00:24:00,320
it's actually becomes better and better

00:23:57,499 --> 00:24:04,190
cause I made this presentation a couple

00:24:00,320 --> 00:24:07,489
of months ago and it was eight hundred

00:24:04,190 --> 00:24:11,719
of issues and right now there are seven

00:24:07,489 --> 00:24:16,159
hundred of issues so maybe in a couple

00:24:11,719 --> 00:24:21,469
of months zero issues but right now a

00:24:16,159 --> 00:24:26,149
lot of questions and a lot of them are

00:24:21,469 --> 00:24:31,159
about load balancing cause it works on

00:24:26,149 --> 00:24:33,559
HTTP - and Google kind of suggests to

00:24:31,159 --> 00:24:35,989
use some special kind of load balancers

00:24:33,559 --> 00:24:37,879
and but oh if you want to take into

00:24:35,989 --> 00:24:41,599
details you can look through the issues

00:24:37,879 --> 00:24:44,989
yourself well next time what we're going

00:24:41,599 --> 00:24:48,710
to look at Instituto help it design by

00:24:44,989 --> 00:24:52,009
two inch and it is inspired by Jerry PC

00:24:48,710 --> 00:24:59,089
so basically it is total clone of your

00:24:52,009 --> 00:25:02,649
PC implementations are all here you can

00:24:59,089 --> 00:25:02,649
see quite a lot of them

00:25:03,130 --> 00:25:13,059
so for transport it suggestions both

00:25:08,049 --> 00:25:18,610
HTTP or HTTPS and for protocol is proto

00:25:13,059 --> 00:25:23,650
both binary and JSON encoding so to your

00:25:18,610 --> 00:25:26,860
creators or to each were telling the

00:25:23,650 --> 00:25:29,110
idea behind it the main goal of this

00:25:26,860 --> 00:25:33,039
framework is to be able to work with

00:25:29,110 --> 00:25:38,110
regular load balancers so the mighty RPC

00:25:33,039 --> 00:25:41,500
support HTTP 1.1 and this is the idea

00:25:38,110 --> 00:25:44,320
but do to this can design with the

00:25:41,500 --> 00:25:50,950
support was the first one and the

00:25:44,320 --> 00:25:53,380
occipital and lettuces they abandon the

00:25:50,950 --> 00:25:58,570
for duplex communication cause it works

00:25:53,380 --> 00:26:00,250
only for HTTP 2 but well at least one

00:25:58,570 --> 00:26:02,230
when it comes for the system that I was

00:26:00,250 --> 00:26:05,470
working on it was fully internal

00:26:02,230 --> 00:26:07,659
communication like the hidden internal

00:26:05,470 --> 00:26:11,169
system and it's not open to the outer

00:26:07,659 --> 00:26:15,850
world and we were solving our load

00:26:11,169 --> 00:26:18,970
balancing issues but in our own I like

00:26:15,850 --> 00:26:23,470
via some we had service discoveries and

00:26:18,970 --> 00:26:26,440
some Hasek or products but for example

00:26:23,470 --> 00:26:29,020
photo from what I understand they are

00:26:26,440 --> 00:26:33,460
making gel PC connection between client

00:26:29,020 --> 00:26:35,770
on the side of users and the server like

00:26:33,460 --> 00:26:43,809
hidden between load balancers so in this

00:26:35,770 --> 00:26:47,260
case and probably tube can help next one

00:26:43,809 --> 00:26:52,200
I just read this is the oldest one and

00:26:47,260 --> 00:26:52,200
this is a framework created by Facebook

00:26:52,799 --> 00:27:01,230
there is a legend about this framework

00:26:56,080 --> 00:27:06,850
goes it says that some time ago Google

00:27:01,230 --> 00:27:09,669
created like stab be protocol and it was

00:27:06,850 --> 00:27:12,280
great 20 before the Jerry PC but it was

00:27:09,669 --> 00:27:14,740
internal say it didn't made it open

00:27:12,280 --> 00:27:15,620
source and used for user that for

00:27:14,740 --> 00:27:19,730
therein

00:27:15,620 --> 00:27:23,030
thing and it sometimes they hurt and who

00:27:19,730 --> 00:27:26,570
definition internship and there are this

00:27:23,030 --> 00:27:30,550
guy or girl or someone they joined

00:27:26,570 --> 00:27:33,710
Facebook and kind of steals the idea so

00:27:30,550 --> 00:27:38,390
Facebook has Facebook go to their throat

00:27:33,710 --> 00:27:41,900
on top of stabby stabby sink and this

00:27:38,390 --> 00:27:45,380
way you will see this that idea is very

00:27:41,900 --> 00:27:47,630
very similar but around Facebook that

00:27:45,380 --> 00:27:50,929
politically right decision to make it

00:27:47,630 --> 00:27:54,740
open source right when they created it

00:27:50,929 --> 00:27:59,450
somewhere in the 2007 or something maybe

00:27:54,740 --> 00:28:05,150
2012 I forgot the year and he does this

00:27:59,450 --> 00:28:06,830
net with also throat is used widely in a

00:28:05,150 --> 00:28:11,360
lot of systems it has a lot of

00:28:06,830 --> 00:28:15,620
implementations and oh but but what is

00:28:11,360 --> 00:28:18,610
surprisingly he heard that it has rather

00:28:15,620 --> 00:28:23,030
bad documentation it's kind of hard to

00:28:18,610 --> 00:28:28,010
find solutions if you have some specific

00:28:23,030 --> 00:28:31,340
problems in the docs for the transport

00:28:28,010 --> 00:28:34,520
Facebook created a lot of their own

00:28:31,340 --> 00:28:37,280
stuff so when you know not sure myself

00:28:34,520 --> 00:28:40,880
what does it mean but he saw his teeny

00:28:37,280 --> 00:28:45,620
frames and this kind of transports are

00:28:40,880 --> 00:28:49,010
available and the same goes for thrift

00:28:45,620 --> 00:28:54,910
protocols sweet for example is very

00:28:49,010 --> 00:28:57,470
small dot profiles on top the same

00:28:54,910 --> 00:29:00,860
structure but it uses a bit different

00:28:57,470 --> 00:29:03,110
names and different notation but you can

00:29:00,860 --> 00:29:06,320
see that basically the idea is the same

00:29:03,110 --> 00:29:08,720
so this camera just describes some

00:29:06,320 --> 00:29:12,340
messages and as a service which messages

00:29:08,720 --> 00:29:17,200
it is able to receive and to Center

00:29:12,340 --> 00:29:17,200
strength comes also with the compiler

00:29:17,530 --> 00:29:24,530
for is a pro so I can write languages

00:29:22,040 --> 00:29:25,690
support goes for example if you have a

00:29:24,530 --> 00:29:30,250
very

00:29:25,690 --> 00:29:32,230
unique language and probably no one

00:29:30,250 --> 00:29:35,080
telling us artists in between multiple

00:29:32,230 --> 00:29:37,659
services with this weird ones and

00:29:35,080 --> 00:29:42,090
probably strength will be is a framework

00:29:37,659 --> 00:29:46,299
which can cover this for you and also I

00:29:42,090 --> 00:29:47,200
wrote it as a pro but as a pros but I'm

00:29:46,299 --> 00:29:49,659
not sure myself

00:29:47,200 --> 00:29:53,019
currently if his book works on the

00:29:49,659 --> 00:29:55,840
version of Street and they kind of

00:29:53,019 --> 00:29:58,809
hiding all the details so no one really

00:29:55,840 --> 00:30:03,490
knows what is what is going to be but

00:29:58,809 --> 00:30:06,190
all I'm excited and are waiting for cons

00:30:03,490 --> 00:30:11,289
it is a full documentation and also no

00:30:06,190 --> 00:30:17,399
holdup with streams kappa rotor no this

00:30:11,289 --> 00:30:20,649
is first one similar to the years cause

00:30:17,399 --> 00:30:24,639
the story is the same as a guy named

00:30:20,649 --> 00:30:27,159
Kenton Volta work at a Google and he was

00:30:24,639 --> 00:30:30,279
a tech lead for protocol buffers and

00:30:27,159 --> 00:30:34,509
then he quit model and created his own

00:30:30,279 --> 00:30:37,870
cap and proton this is a screenshot from

00:30:34,509 --> 00:30:40,450
his error side so they claim is that cap

00:30:37,870 --> 00:30:44,049
and rotor infinity times faster than

00:30:40,450 --> 00:30:49,539
wrote above goes as we are not even

00:30:44,049 --> 00:30:55,750
recording but this is kind of marketing

00:30:49,539 --> 00:30:58,059
move cuz they are using simulation and

00:30:55,750 --> 00:31:01,960
encoding and cotton is kind of sub

00:30:58,059 --> 00:31:04,570
denial of salvation so what they're

00:31:01,960 --> 00:31:10,299
doing the data is arranged with

00:31:04,570 --> 00:31:14,970
fix it wins and fix it offsets and can

00:31:10,299 --> 00:31:18,340
be backed by a specific scheme for

00:31:14,970 --> 00:31:21,759
implementation here it goes also quite a

00:31:18,340 --> 00:31:29,350
wide lead quite a wide most of possible

00:31:21,759 --> 00:31:32,759
options rubies here yeah but comes to

00:31:29,350 --> 00:31:36,430
rubian it sounds like it's it is kind of

00:31:32,759 --> 00:31:39,920
abundant goes

00:31:36,430 --> 00:31:46,310
cause yeah the last update was a long

00:31:39,920 --> 00:31:48,380
time ago here also all all those

00:31:46,310 --> 00:31:52,240
frameworks that we already talked about

00:31:48,380 --> 00:31:56,480
they are different but similar because

00:31:52,240 --> 00:32:00,080
very they share a very similar idea of

00:31:56,480 --> 00:32:03,770
this definition they have clients and

00:32:00,080 --> 00:32:08,600
servers and it's a special way to encode

00:32:03,770 --> 00:32:10,070
messages to decode them and the next RPC

00:32:08,600 --> 00:32:13,600
frameworks that we are going to take a

00:32:10,070 --> 00:32:17,260
look at our kind of difference we'll see

00:32:13,600 --> 00:32:25,840
the next one is finally go this is one

00:32:17,260 --> 00:32:31,610
built by Twitter and it is used for jdms

00:32:25,840 --> 00:32:34,610
it supports also saved my SQL which is

00:32:31,610 --> 00:32:40,220
interesting cause you can send messages

00:32:34,610 --> 00:32:42,080
directly to your MySQL and it supports

00:32:40,220 --> 00:32:47,410
both arstan cp1

00:32:42,080 --> 00:32:50,380
and participative the moment idea behind

00:32:47,410 --> 00:32:56,330
finagle is the same name it features

00:32:50,380 --> 00:32:58,970
this is something described in Scala or

00:32:56,330 --> 00:33:03,470
may be familiar to Scala people skaila

00:32:58,970 --> 00:33:07,120
people but I mean we come to like Ruby

00:33:03,470 --> 00:33:11,180
world maybe this is something similar to

00:33:07,120 --> 00:33:17,390
Ruby fibers or maybe interests promises

00:33:11,180 --> 00:33:21,230
oh it's also different but but if your

00:33:17,390 --> 00:33:23,960
skull guy you you understand when it

00:33:21,230 --> 00:33:27,830
comes to supported languages they're all

00:33:23,960 --> 00:33:30,380
Java incompatible and inside it should

00:33:27,830 --> 00:33:34,250
be Jane would be as well but in practice

00:33:30,380 --> 00:33:37,910
I don't manage to find any example or

00:33:34,250 --> 00:33:41,000
any working project with fine angle and

00:33:37,910 --> 00:33:43,610
JRuby musically all my googling run into

00:33:41,000 --> 00:33:45,530
a several question somewhere on a stack

00:33:43,610 --> 00:33:47,580
overflow which was asking Arthur's

00:33:45,530 --> 00:33:51,650
answer for JRuby

00:33:47,580 --> 00:33:51,650
fine angle and there were no answers

00:33:57,680 --> 00:34:05,940
this was my first time I hope to spit up

00:34:03,270 --> 00:34:09,540
yep I said I'm kinda sweaty so sorry

00:34:05,940 --> 00:34:12,750
I'll try to be faster so he'll do the

00:34:09,540 --> 00:34:18,120
next one this is one created by Alibaba

00:34:12,750 --> 00:34:21,120
as the Chinese giant and this is still

00:34:18,120 --> 00:34:24,660
in development mode so it's not

00:34:21,120 --> 00:34:28,710
completely finished and they have really

00:34:24,660 --> 00:34:30,990
complex idea behind it they have some

00:34:28,710 --> 00:34:34,290
kind of monitors consumers providers

00:34:30,990 --> 00:34:37,260
containers deburr comes together with

00:34:34,290 --> 00:34:40,110
some kind of UI interface where you can

00:34:37,260 --> 00:34:43,490
follow all the messages and keep track

00:34:40,110 --> 00:34:48,060
of the data that you send and receive

00:34:43,490 --> 00:34:52,500
protocols are here also some kind of a

00:34:48,060 --> 00:34:56,910
lot of weird stuff for implementation

00:34:52,500 --> 00:34:59,640
with Java Python launchers and HP no

00:34:56,910 --> 00:35:02,910
Ruby but for some reason I decided to

00:34:59,640 --> 00:35:05,700
include it well okay

00:35:02,910 --> 00:35:08,340
almost we're almost there Avro is a

00:35:05,700 --> 00:35:12,080
remote procedure call and that is

00:35:08,340 --> 00:35:15,660
relation framework for Hadoop projects

00:35:12,080 --> 00:35:19,530
this is also a bit outstanding from the

00:35:15,660 --> 00:35:23,370
other schools it uses dynamic tape then

00:35:19,530 --> 00:35:26,820
I make typing and all the schemas are

00:35:23,370 --> 00:35:30,000
defined in JSON so basically the ideas

00:35:26,820 --> 00:35:32,580
is that first you whenever you establish

00:35:30,000 --> 00:35:36,540
a connection first you send your schema

00:35:32,580 --> 00:35:39,840
written in JSON the server receives it

00:35:36,540 --> 00:35:43,320
and then you send all your data and each

00:35:39,840 --> 00:35:45,780
time it can be a different schema just

00:35:43,320 --> 00:35:50,370
so the receiver can understand and

00:35:45,780 --> 00:35:53,400
decode whatever you sent it works well

00:35:50,370 --> 00:35:55,650
for some big data when you're uncertain

00:35:53,400 --> 00:35:58,800
on which they take that for you would

00:35:55,650 --> 00:35:59,880
like to send and it supports from you as

00:35:58,800 --> 00:36:03,350
well

00:35:59,880 --> 00:36:07,320
as laws has to follow through languages

00:36:03,350 --> 00:36:11,850
so benchmarks this is rather hard work

00:36:07,320 --> 00:36:14,430
but hard question goes once again the

00:36:11,850 --> 00:36:18,060
frameworks are not analytic and it's not

00:36:14,430 --> 00:36:21,750
clear what exactly should we measure

00:36:18,060 --> 00:36:25,020
like which should measure like protocol

00:36:21,750 --> 00:36:29,280
for compare it to them to flatbuffers or

00:36:25,020 --> 00:36:33,870
to some raw data or to JSON encoding

00:36:29,280 --> 00:36:36,990
also different transports and you even

00:36:33,870 --> 00:36:39,830
can compare all the combination all the

00:36:36,990 --> 00:36:42,630
combinations with the same framework so

00:36:39,830 --> 00:36:45,900
it's kind of a Turner seems best for

00:36:42,630 --> 00:36:50,940
your data it can the results cannot be

00:36:45,900 --> 00:36:58,170
different it's not the last thing cannot

00:36:50,940 --> 00:37:00,990
mention is a they really do be this is a

00:36:58,170 --> 00:37:02,460
standard that helps to processors to

00:37:00,990 --> 00:37:07,440
talk to each other and basically

00:37:02,460 --> 00:37:10,110
assesses RPC in pure Ruby this is kind

00:37:07,440 --> 00:37:13,590
of a bad night right now well notice

00:37:10,110 --> 00:37:16,830
abundant but it's not widely used but as

00:37:13,590 --> 00:37:20,130
far as I know in rails 6 they have used

00:37:16,830 --> 00:37:23,910
to distributed Ruby to make possible

00:37:20,130 --> 00:37:27,540
parallel testing so this is still alive

00:37:23,910 --> 00:37:31,410
also I know that it's being used in Red

00:37:27,540 --> 00:37:33,900
Hat company but I met at sort of at one

00:37:31,410 --> 00:37:38,180
of the conference all the conferences I

00:37:33,900 --> 00:37:41,010
met a guy from Red Hat and he was like

00:37:38,180 --> 00:37:43,020
we don't recommend recommend to use

00:37:41,010 --> 00:37:49,830
distributed to be so don't mention us

00:37:43,020 --> 00:37:53,760
but it's the way ok so yeah I think this

00:37:49,830 --> 00:37:56,900
it and here has a sources that I used to

00:37:53,760 --> 00:38:00,770
create this dog thank you

00:37:56,900 --> 00:38:02,830
[Applause]

00:38:00,770 --> 00:38:02,830

YouTube URL: https://www.youtube.com/watch?v=F8yHgTGayrw


