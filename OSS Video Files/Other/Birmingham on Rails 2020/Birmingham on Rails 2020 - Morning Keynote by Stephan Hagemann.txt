Title: Birmingham on Rails 2020 - Morning Keynote by Stephan Hagemann
Publication date: 2020-02-19
Playlist: Birmingham on Rails 2020
Description: 
	Birmingham on Rails 2020 - Morning Keynote by Stephan Hagemann
Captions: 
	00:00:03,310 --> 00:00:06,460
[Music]

00:00:10,550 --> 00:00:15,210
[Music]

00:00:12,070 --> 00:00:15,210
[Applause]

00:00:16,820 --> 00:00:21,029
thanks for having me

00:00:18,900 --> 00:00:24,960
I'm one of those speakers that is from

00:00:21,029 --> 00:00:28,199
one of those four countries I'm I'm

00:00:24,960 --> 00:00:33,390
originally from Germany this is a small

00:00:28,199 --> 00:00:36,059
German town small towns whether in

00:00:33,390 --> 00:00:37,950
Germany or other places tend to have

00:00:36,059 --> 00:00:40,710
small roads that lead into them right

00:00:37,950 --> 00:00:44,309
you you would be not to be surprised for

00:00:40,710 --> 00:00:48,390
this road to lead to maybe this town the

00:00:44,309 --> 00:00:50,399
biggest German city is Berlin it's not

00:00:48,390 --> 00:00:52,739
that big three and a half million people

00:00:50,399 --> 00:00:55,559
I think so what is but when you have a

00:00:52,739 --> 00:00:57,750
bigger city you would be surprised to

00:00:55,559 --> 00:01:00,239
find that little road going into that

00:00:57,750 --> 00:01:03,210
city in fact when you have a bigger city

00:01:00,239 --> 00:01:07,560
a bigger structure you create more

00:01:03,210 --> 00:01:09,900
infrastructure to support it this is in

00:01:07,560 --> 00:01:12,960
by us standards not a particularly huge

00:01:09,900 --> 00:01:15,900
highway but it's bigger than one for a

00:01:12,960 --> 00:01:20,330
small town and you need it to support

00:01:15,900 --> 00:01:25,939
the complexity OUP's of the bigger

00:01:20,330 --> 00:01:28,650
entity it can get huge right this is a

00:01:25,939 --> 00:01:30,720
highway interchange in China feeding a

00:01:28,650 --> 00:01:35,060
couple highways around a small Chinese

00:01:30,720 --> 00:01:37,970
city of eight million people or so and

00:01:35,060 --> 00:01:40,020
so it can get very very big and

00:01:37,970 --> 00:01:42,780
similarly when you're working on these

00:01:40,020 --> 00:01:44,340
kinds of structures there's a similar

00:01:42,780 --> 00:01:45,840
thing that happens if you're in a town

00:01:44,340 --> 00:01:47,070
you're gonna have a small side of

00:01:45,840 --> 00:01:49,710
construction and a little bit of

00:01:47,070 --> 00:01:50,909
annoyance for for a few folks and if

00:01:49,710 --> 00:01:53,040
you're working on something bigger

00:01:50,909 --> 00:01:54,450
it's probably gonna annoy a lot more

00:01:53,040 --> 00:01:55,680
folks it's gonna take a lot longer I

00:01:54,450 --> 00:01:57,630
just heard this morning though not in

00:01:55,680 --> 00:01:59,159
Birmingham I twenties way faster than

00:01:57,630 --> 00:02:01,430
everyone thinks and it's cheaper and

00:01:59,159 --> 00:02:03,450
whatnot so you all have this figured out

00:02:01,430 --> 00:02:07,320
generally where I'm from we don't have

00:02:03,450 --> 00:02:09,149
this figured out so what I'm trying to

00:02:07,320 --> 00:02:11,860
say is the infrastructure that you have

00:02:09,149 --> 00:02:16,530
will support adequately your

00:02:11,860 --> 00:02:16,530
thing only if it's in the correct size

00:02:17,310 --> 00:02:22,840
and both to get a take for what the

00:02:20,170 --> 00:02:25,390
rooms like as well as to get you

00:02:22,840 --> 00:02:27,670
properly woken up this morning let's do

00:02:25,390 --> 00:02:31,180
a bit of audience participation

00:02:27,670 --> 00:02:32,590
stand up if you all right there's a

00:02:31,180 --> 00:02:34,600
couple bullets now you so you just stand

00:02:32,590 --> 00:02:37,890
up whenever you see yourself reflected

00:02:34,600 --> 00:02:40,090
or one of your projects reflected here

00:02:37,890 --> 00:02:44,740
so you have a code base that has more

00:02:40,090 --> 00:02:48,220
than 50 models okay there we go

00:02:44,740 --> 00:02:49,720
it's not everyone yet I think if you

00:02:48,220 --> 00:02:51,430
have a class in there with more than

00:02:49,720 --> 00:02:52,989
thousand lines of code I don't know why

00:02:51,430 --> 00:02:55,540
I'm starting to yell when you stand but

00:02:52,989 --> 00:02:58,150
I feel like that's appropriate okay a

00:02:55,540 --> 00:02:59,800
couple more folks stood up you have an

00:02:58,150 --> 00:03:05,380
active record model with more than 30

00:02:59,800 --> 00:03:09,880
has many's you can't run your whole test

00:03:05,380 --> 00:03:11,680
suite on your machine or you can't run

00:03:09,880 --> 00:03:14,800
your test suite in under 20 minutes on

00:03:11,680 --> 00:03:17,170
your machine okay so look around you

00:03:14,800 --> 00:03:19,150
there's a bunch of you hi good morning

00:03:17,170 --> 00:03:20,620
all of you and everyone else is free to

00:03:19,150 --> 00:03:22,470
stand up as well if you need the stretch

00:03:20,620 --> 00:03:27,700
but thank you so much for participating

00:03:22,470 --> 00:03:29,890
so I would argue in the in the analogy

00:03:27,700 --> 00:03:31,959
of town and city you're probably

00:03:29,890 --> 00:03:34,209
building a bigger thing that is more

00:03:31,959 --> 00:03:40,269
akin to a city than you are a tiny thing

00:03:34,209 --> 00:03:41,860
that is more akin to a a town call on

00:03:40,269 --> 00:03:45,340
the stock structural engineering in Ruby

00:03:41,860 --> 00:03:48,549
and this slide is purple for two reasons

00:03:45,340 --> 00:03:50,470
or pink or whatever this is one because

00:03:48,549 --> 00:03:52,480
I've been in the past accused of burying

00:03:50,470 --> 00:03:55,060
the lede and not kind of starting with

00:03:52,480 --> 00:03:56,980
the most important point and two because

00:03:55,060 --> 00:03:59,470
when when Brian and I talked about me

00:03:56,980 --> 00:04:01,540
coming out and speaking he said well I

00:03:59,470 --> 00:04:03,310
had done a workshop with Proctor you and

00:04:01,540 --> 00:04:04,540
that's how he started to talk and he

00:04:03,310 --> 00:04:06,700
said well you could just come and talk

00:04:04,540 --> 00:04:09,579
about components and component

00:04:06,700 --> 00:04:11,380
architectures or anything else that can

00:04:09,579 --> 00:04:13,120
help and I took that very seriously that

00:04:11,380 --> 00:04:16,720
second part and I was like well what

00:04:13,120 --> 00:04:18,549
else is there that does that and so I

00:04:16,720 --> 00:04:20,020
thought about that for a while and so

00:04:18,549 --> 00:04:21,370
I'm gonna make a bold statement and I

00:04:20,020 --> 00:04:23,760
hope that through the rest of the day

00:04:21,370 --> 00:04:27,280
you'll convince me that I'm wrong

00:04:23,760 --> 00:04:28,780
the only thing that can ultimately help

00:04:27,280 --> 00:04:33,490
you reign in the complexity in your

00:04:28,780 --> 00:04:36,250
application our components okay the

00:04:33,490 --> 00:04:38,410
caveat here is that says ready a bit

00:04:36,250 --> 00:04:41,710
wrong but within one app right we'll

00:04:38,410 --> 00:04:44,080
hear later from Yulia about how we want

00:04:41,710 --> 00:04:46,270
apps to communicate and it's a very

00:04:44,080 --> 00:04:48,669
important topic as well but the building

00:04:46,270 --> 00:04:51,160
block of that's always applications and

00:04:48,669 --> 00:04:52,419
so within an application write both

00:04:51,160 --> 00:04:54,130
statement coming your way

00:04:52,419 --> 00:04:58,360
the only thing you can do are using

00:04:54,130 --> 00:05:02,460
components more bold statements as a

00:04:58,360 --> 00:05:02,460
language Ruby does not have components

00:05:02,760 --> 00:05:13,090
however gems can act as components and

00:05:06,449 --> 00:05:16,240
they work very well for rails not it's

00:05:13,090 --> 00:05:21,610
not so ideal and we'll get into why but

00:05:16,240 --> 00:05:24,220
it also works and I want to make things

00:05:21,610 --> 00:05:26,380
better so I have three parts to this

00:05:24,220 --> 00:05:29,139
talk this morning one I'll give a kind

00:05:26,380 --> 00:05:31,330
of complete overview of how I tend to

00:05:29,139 --> 00:05:34,450
structure applications using components

00:05:31,330 --> 00:05:35,700
so just a quick run-through of how that

00:05:34,450 --> 00:05:38,950
looks

00:05:35,700 --> 00:05:40,750
second I'll talk about why I made that

00:05:38,950 --> 00:05:42,760
last statement or why kind of it doesn't

00:05:40,750 --> 00:05:43,510
feel right or feel quite as good with

00:05:42,760 --> 00:05:46,120
with Rails

00:05:43,510 --> 00:05:48,610
and then third I want to call you to

00:05:46,120 --> 00:05:53,020
action and and get you two to help me

00:05:48,610 --> 00:05:55,110
make things better so this is based on a

00:05:53,020 --> 00:05:59,889
book I published a couple years ago

00:05:55,110 --> 00:06:01,599
component based rails and so after this

00:05:59,889 --> 00:06:03,370
talk you don't need to read it because

00:06:01,599 --> 00:06:06,789
I'm giving you giving you the short

00:06:03,370 --> 00:06:10,000
version so let's go over a very small

00:06:06,789 --> 00:06:11,830
application that is in a component

00:06:10,000 --> 00:06:14,560
structure so first thing I want to point

00:06:11,830 --> 00:06:16,270
out it is not a cut off list here that

00:06:14,560 --> 00:06:19,930
at the top of this thing there is no app

00:06:16,270 --> 00:06:20,949
folder this app does not have one so if

00:06:19,930 --> 00:06:23,590
there's not that folder where's that

00:06:20,949 --> 00:06:25,180
functionality well we can't have

00:06:23,590 --> 00:06:26,500
functionality we pull in all sorts of

00:06:25,180 --> 00:06:28,419
functionality all the time via our

00:06:26,500 --> 00:06:31,539
dependencies so let's look at the gem

00:06:28,419 --> 00:06:32,979
file or rather a part of it and in this

00:06:31,539 --> 00:06:34,449
particular gem file you'll find this one

00:06:32,979 --> 00:06:36,550
construct this

00:06:34,449 --> 00:06:39,129
path components which loads a couple of

00:06:36,550 --> 00:06:41,110
gems this tells bunder to look locally

00:06:39,129 --> 00:06:43,900
into the folder structure to find these

00:06:41,110 --> 00:06:46,629
dependencies and if we do go over there

00:06:43,900 --> 00:06:48,400
and look at there we see we find those

00:06:46,629 --> 00:06:52,749
gems that we just listed as well as some

00:06:48,400 --> 00:06:54,159
others let's do a double-take right okay

00:06:52,749 --> 00:06:55,240
so there are some dependencies there's

00:06:54,159 --> 00:06:58,089
some stuff going on here

00:06:55,240 --> 00:07:00,789
let's look at the routes file to see if

00:06:58,089 --> 00:07:03,279
if the app actually delivers something

00:07:00,789 --> 00:07:05,349
and fara no it does right

00:07:03,279 --> 00:07:07,419
you may notice those are exactly the

00:07:05,349 --> 00:07:09,039
same gems that were in the gem file that

00:07:07,419 --> 00:07:10,569
are being mounted here so the

00:07:09,039 --> 00:07:13,810
functionality of this application comes

00:07:10,569 --> 00:07:15,430
exclusively from the the components I'm

00:07:13,810 --> 00:07:17,620
gonna use components gem and engine a

00:07:15,430 --> 00:07:20,800
lot and interchangeably and probably

00:07:17,620 --> 00:07:23,080
wrong apologies for that but it comes

00:07:20,800 --> 00:07:27,819
through these vehicles and not through

00:07:23,080 --> 00:07:32,800
the main rails application so to dive

00:07:27,819 --> 00:07:34,210
into three of those components I will

00:07:32,800 --> 00:07:36,520
dive into three of those components to

00:07:34,210 --> 00:07:41,370
kind of explain some of the things you

00:07:36,520 --> 00:07:44,800
might see so let's look at games first

00:07:41,370 --> 00:07:46,749
so well first thing I like to do when I

00:07:44,800 --> 00:07:48,669
look at a gem is to look at the gems

00:07:46,749 --> 00:07:51,610
because it gives me an idea of what's

00:07:48,669 --> 00:07:53,319
what's going on and first thing you

00:07:51,610 --> 00:07:55,930
might notice or that I definitely notice

00:07:53,319 --> 00:07:59,289
is we depend on Rails not all of rails

00:07:55,930 --> 00:08:02,199
in this case just active record and I

00:07:59,289 --> 00:08:04,659
realize okay you have another monitor in

00:08:02,199 --> 00:08:06,430
the back perfect so it heard those in

00:08:04,659 --> 00:08:07,719
the back that I'm noticing the font size

00:08:06,430 --> 00:08:09,129
is a bit small towards the end of the

00:08:07,719 --> 00:08:11,279
room you have another screen over on

00:08:09,129 --> 00:08:11,279
your left

00:08:11,550 --> 00:08:17,610
so we're depending on some parts of

00:08:13,990 --> 00:08:20,949
rails but also depending on this other

00:08:17,610 --> 00:08:22,810
gem here called teams and for those that

00:08:20,949 --> 00:08:24,849
paid close attention to when the list of

00:08:22,810 --> 00:08:27,849
other gems flew by that's one of those

00:08:24,849 --> 00:08:31,899
local gems that wasn't yet referenced

00:08:27,849 --> 00:08:35,319
but so if that's the case then let's

00:08:31,899 --> 00:08:37,329
open the gem file and indeed there is

00:08:35,319 --> 00:08:39,459
this path construct again this time with

00:08:37,329 --> 00:08:41,409
like dot dot because we're actually

00:08:39,459 --> 00:08:45,160
referencing the same components folder

00:08:41,409 --> 00:08:47,050
that we were already in with this gym so

00:08:45,160 --> 00:08:49,689
this gem is depending on other gems

00:08:47,050 --> 00:08:52,360
inside of this same application hope you

00:08:49,689 --> 00:08:55,390
can start seeing that there are these

00:08:52,360 --> 00:08:59,319
dependencies that span the complexity of

00:08:55,390 --> 00:09:02,470
this application okay let's keep going

00:08:59,319 --> 00:09:05,380
so what's the entry point for a gem for

00:09:02,470 --> 00:09:07,000
Ruby it's the I don't know an actual

00:09:05,380 --> 00:09:09,040
name for this thing but it's the file of

00:09:07,000 --> 00:09:12,399
the gems name in the Lib folder right so

00:09:09,040 --> 00:09:15,060
if we look into that file not much going

00:09:12,399 --> 00:09:19,209
on we just load one other file namely an

00:09:15,060 --> 00:09:21,610
engine for this game's gem and when we

00:09:19,209 --> 00:09:24,100
open that engine we see another couple

00:09:21,610 --> 00:09:27,220
interesting things so one we are in fact

00:09:24,100 --> 00:09:30,970
using a rails engine to make this

00:09:27,220 --> 00:09:33,640
particular component work we have this

00:09:30,970 --> 00:09:36,250
isolate namespace statement here which

00:09:33,640 --> 00:09:37,779
makes all the rails tooling expect and

00:09:36,250 --> 00:09:40,360
create everything inside of this

00:09:37,779 --> 00:09:42,370
namespace games which will make sure

00:09:40,360 --> 00:09:44,199
that our gems can kind of act

00:09:42,370 --> 00:09:46,449
independently of other stuff and not

00:09:44,199 --> 00:09:49,750
collide with functionality that comes

00:09:46,449 --> 00:09:53,680
from other parts of the app and then

00:09:49,750 --> 00:09:55,060
this one is was one of the things we

00:09:53,680 --> 00:09:57,790
needed to find out one of the pitfalls

00:09:55,060 --> 00:10:00,010
when we were starting to build out

00:09:57,790 --> 00:10:01,959
applications with this technique and

00:10:00,010 --> 00:10:04,329
that is this is a little hack that makes

00:10:01,959 --> 00:10:07,390
sure that migrations get that are in

00:10:04,329 --> 00:10:09,790
this gem get automatically used by any

00:10:07,390 --> 00:10:14,949
gem that includes this particular

00:10:09,790 --> 00:10:16,839
component so you know when we then look

00:10:14,949 --> 00:10:20,079
at the rest so there's migrations in

00:10:16,839 --> 00:10:22,240
here but nothing special going on we

00:10:20,079 --> 00:10:24,130
have the actual code there's this game

00:10:22,240 --> 00:10:26,079
model that's being defined and some

00:10:24,130 --> 00:10:28,209
tests for it remember we're still in

00:10:26,079 --> 00:10:32,560
this engine so we're inside of a part of

00:10:28,209 --> 00:10:36,639
the app that is standing on its own to

00:10:32,560 --> 00:10:38,800
certain extent I mentioned the tests I

00:10:36,639 --> 00:10:40,240
have just want to point out this test

00:10:38,800 --> 00:10:42,610
script here at the bottom you can see

00:10:40,240 --> 00:10:44,350
it's just a shell script that does

00:10:42,610 --> 00:10:48,220
everything you need to do to run the

00:10:44,350 --> 00:10:50,380
tests for this particular engine that's

00:10:48,220 --> 00:10:52,660
because some engines need different

00:10:50,380 --> 00:10:55,899
things to be tested and/or need to be

00:10:52,660 --> 00:10:57,820
set up differently so by by creating

00:10:55,899 --> 00:11:05,710
this this little script we can

00:10:57,820 --> 00:11:07,300
make them all uniform yeah lastly we

00:11:05,710 --> 00:11:09,370
noticed there was no rails dependency

00:11:07,300 --> 00:11:12,730
and only active record so maybe not a

00:11:09,370 --> 00:11:14,590
surprise no routes here so let's look at

00:11:12,730 --> 00:11:16,810
it another component where we will see

00:11:14,590 --> 00:11:18,940
that change so when we look at games

00:11:16,810 --> 00:11:20,860
admin which was another which was one of

00:11:18,940 --> 00:11:24,190
the gems that was listed in the original

00:11:20,860 --> 00:11:26,740
gem file of the application the gem spec

00:11:24,190 --> 00:11:29,250
here does in fact depend on Rails and a

00:11:26,740 --> 00:11:29,250
bunch of other things

00:11:39,789 --> 00:11:47,989
sorry so we do depend again on some of

00:11:45,919 --> 00:11:50,720
those gems that sit within the

00:11:47,989 --> 00:11:52,819
application and we notice we have

00:11:50,720 --> 00:11:54,319
controllers and views and if we do check

00:11:52,819 --> 00:11:56,539
the routes this time well sure enough

00:11:54,319 --> 00:11:59,239
there is a resource here for managing

00:11:56,539 --> 00:12:00,199
games and in fact what's behind this in

00:11:59,239 --> 00:12:02,089
this case because it's a sample

00:12:00,199 --> 00:12:06,129
application it's just a scaffold and all

00:12:02,089 --> 00:12:09,819
the things to to administrate games and

00:12:06,129 --> 00:12:13,579
if you do recall we looked at the route

00:12:09,819 --> 00:12:16,429
route routes file that's referencing

00:12:13,579 --> 00:12:18,769
this particular route file and mounting

00:12:16,429 --> 00:12:22,849
the routes from this engine at that

00:12:18,769 --> 00:12:26,539
place let's look at one last of these

00:12:22,849 --> 00:12:29,089
this one it's called predictor and same

00:12:26,539 --> 00:12:31,789
thing again notice here we have no

00:12:29,089 --> 00:12:33,409
dependency on anything rails we do have

00:12:31,789 --> 00:12:35,809
this dependency on trueskill that's not

00:12:33,409 --> 00:12:38,029
a local dependency that's a gem that can

00:12:35,809 --> 00:12:41,569
calculate the relative strength of of

00:12:38,029 --> 00:12:43,549
competitors in games but you know you

00:12:41,569 --> 00:12:45,249
could see no no other dependencies so

00:12:43,549 --> 00:12:48,829
we're just dealing with a plain old gem

00:12:45,249 --> 00:12:51,559
and so looking at the file of the gems

00:12:48,829 --> 00:12:54,289
name in Lib again we see it looks like a

00:12:51,559 --> 00:12:56,209
normal gem we're loading this external

00:12:54,289 --> 00:12:58,249
dependency we're loading some internal

00:12:56,209 --> 00:12:59,689
dependencies right and when we look at

00:12:58,249 --> 00:13:00,979
that again it doesn't matter what's

00:12:59,689 --> 00:13:03,769
going on but here we're loading this

00:13:00,979 --> 00:13:05,269
prediction file so it's it's loading

00:13:03,769 --> 00:13:09,529
these files to service them up to the

00:13:05,269 --> 00:13:12,009
rest of the application once again there

00:13:09,529 --> 00:13:15,139
are tests that are local to this gym and

00:13:12,009 --> 00:13:16,819
in this case the the test script the

00:13:15,139 --> 00:13:18,499
batch script is simpler because there's

00:13:16,819 --> 00:13:20,479
hardly any set up to do in fact we just

00:13:18,499 --> 00:13:27,859
need to bundle in didn't we can run

00:13:20,479 --> 00:13:30,669
tests for this for this component that's

00:13:27,859 --> 00:13:30,669
very soothing music

00:13:34,750 --> 00:13:39,800
and finally just to kind of pull these

00:13:37,279 --> 00:13:42,380
these make put a point on those test

00:13:39,800 --> 00:13:44,300
scripts there's one file here in the in

00:13:42,380 --> 00:13:47,750
the root which is called build in this

00:13:44,300 --> 00:13:49,279
case and well effectively what it does

00:13:47,750 --> 00:13:51,139
is it finds all the test files wherever

00:13:49,279 --> 00:13:52,579
there may be runs them all and only if

00:13:51,139 --> 00:13:54,050
all of them pass it'll give us a green

00:13:52,579 --> 00:13:56,779
build and otherwise it'll give us a red

00:13:54,050 --> 00:13:59,269
bill so we are we're we've split out our

00:13:56,779 --> 00:14:00,860
test suite into these into these various

00:13:59,269 --> 00:14:02,089
components but with this we're kind of

00:14:00,860 --> 00:14:04,850
pulling them back together so we can

00:14:02,089 --> 00:14:06,880
still report on the the status of the

00:14:04,850 --> 00:14:06,880
application

00:14:07,060 --> 00:14:14,089
the point is it's just rails but with a

00:14:12,050 --> 00:14:18,680
little bit of structure and structure

00:14:14,089 --> 00:14:20,209
that is I think different and I'll try

00:14:18,680 --> 00:14:22,459
to explain the next part why I think

00:14:20,209 --> 00:14:26,990
it's different and gives us two a tool

00:14:22,459 --> 00:14:28,790
or tools that we can utilize to build

00:14:26,990 --> 00:14:32,360
better applicate bigger applications

00:14:28,790 --> 00:14:35,870
better one of the things you can do when

00:14:32,360 --> 00:14:40,699
you have this structure is show it right

00:14:35,870 --> 00:14:44,180
I was I was commenting on the one the

00:14:40,699 --> 00:14:46,399
couple of blobs here in in red and we

00:14:44,180 --> 00:14:49,459
saw these arrows are the dependencies

00:14:46,399 --> 00:14:51,079
that we had we saw in the gem files and

00:14:49,459 --> 00:14:54,110
the the names are obviously the names of

00:14:51,079 --> 00:14:55,790
the Jim's so that's almost everything in

00:14:54,110 --> 00:14:57,920
this app but the box around it all

00:14:55,790 --> 00:15:00,529
that's the application right which

00:14:57,920 --> 00:15:03,140
depends on some of these gems directly

00:15:00,529 --> 00:15:10,850
and then on others of them indirectly

00:15:03,140 --> 00:15:13,010
via their subsequent dependencies so we

00:15:10,850 --> 00:15:14,600
saw an additional layer of structure in

00:15:13,010 --> 00:15:18,890
the application so let's look at

00:15:14,600 --> 00:15:23,720
structure their costs and and their

00:15:18,890 --> 00:15:25,069
benefits now it's good that this code is

00:15:23,720 --> 00:15:26,510
a bit small cuz I don't want you to read

00:15:25,069 --> 00:15:30,139
it I want to talk about ways we

00:15:26,510 --> 00:15:33,410
structure it so super common we don't

00:15:30,139 --> 00:15:34,670
think about it what methods well sandy

00:15:33,410 --> 00:15:37,490
wants us to think about methods a lot

00:15:34,670 --> 00:15:39,800
more and it's good that we do but like

00:15:37,490 --> 00:15:42,740
I'm just saying we use them all day

00:15:39,800 --> 00:15:44,180
every day that we don't that I want to

00:15:42,740 --> 00:15:46,070
well maybe we do think about the Ben

00:15:44,180 --> 00:15:48,500
fits but I do want to come up with an

00:15:46,070 --> 00:15:50,779
idea for costs as well this morning so

00:15:48,500 --> 00:15:56,990
why do we use methods and I'm gonna be

00:15:50,779 --> 00:16:00,230
super kind of naive or or not very

00:15:56,990 --> 00:16:01,880
sophisticated about this they allow for

00:16:00,230 --> 00:16:05,300
reuse right if we have a method we can

00:16:01,880 --> 00:16:07,190
call it mall for multiple places and we

00:16:05,300 --> 00:16:10,850
don't need to state that code that is in

00:16:07,190 --> 00:16:12,649
the method multiple times they also hide

00:16:10,850 --> 00:16:14,660
logic right we can put into those

00:16:12,649 --> 00:16:17,390
methods whatever and then it just looks

00:16:14,660 --> 00:16:18,680
like the fun little method name and

00:16:17,390 --> 00:16:21,200
that's all we need to know when we

00:16:18,680 --> 00:16:22,459
consume the method maybe it's not all we

00:16:21,200 --> 00:16:23,959
need to know because we're writing tests

00:16:22,459 --> 00:16:26,480
against this thing and we're we're

00:16:23,959 --> 00:16:28,279
hoping to for the method to do the right

00:16:26,480 --> 00:16:33,380
thing so we do care a little bit about

00:16:28,279 --> 00:16:35,870
what's in there at least sometimes so

00:16:33,380 --> 00:16:38,060
what are the method costs I was I was

00:16:35,870 --> 00:16:39,500
pondering this a little bit and made to

00:16:38,060 --> 00:16:40,399
make my point but beats it kind of like

00:16:39,500 --> 00:16:42,200
because I couldn't come up with

00:16:40,399 --> 00:16:44,089
something better let's just count how

00:16:42,200 --> 00:16:48,140
many lines of code we need to use to

00:16:44,089 --> 00:16:49,700
create a method well it's two you have

00:16:48,140 --> 00:16:52,190
the line that defines the method and

00:16:49,700 --> 00:16:53,750
then an end so I know this the second

00:16:52,190 --> 00:16:54,740
line is pretty boring and you might say

00:16:53,750 --> 00:16:56,959
well that doesn't count

00:16:54,740 --> 00:16:58,970
it's what point is it's very cheap to

00:16:56,959 --> 00:17:05,929
create a method in terms of the code

00:16:58,970 --> 00:17:07,819
that we write now let's look at another

00:17:05,929 --> 00:17:10,900
concept that we use every day and that's

00:17:07,819 --> 00:17:13,339
class what do we do with classes well

00:17:10,900 --> 00:17:15,260
it's similar to method in that it

00:17:13,339 --> 00:17:17,030
bundles can bundle logic but it does it

00:17:15,260 --> 00:17:18,770
kind of through bundling methods and but

00:17:17,030 --> 00:17:20,089
it also adds data through the objects

00:17:18,770 --> 00:17:23,809
that we can create based on those

00:17:20,089 --> 00:17:26,510
classes and they allow for reuse same

00:17:23,809 --> 00:17:31,820
thing here how much does it cost to

00:17:26,510 --> 00:17:33,830
create a class well again just to you

00:17:31,820 --> 00:17:38,000
right the class name and then you have

00:17:33,830 --> 00:17:44,390
an end somewhere below again so cheap we

00:17:38,000 --> 00:17:46,670
don't we don't think about it another

00:17:44,390 --> 00:17:49,260
one present in this file namespace or

00:17:46,670 --> 00:17:52,690
modules

00:17:49,260 --> 00:17:55,090
what are the benefits of modules well

00:17:52,690 --> 00:17:57,000
one of the things I already came to with

00:17:55,090 --> 00:17:59,800
Ruby we have the global namespace so

00:17:57,000 --> 00:18:02,800
it's when we want to use external code

00:17:59,800 --> 00:18:05,020
from Jim's I would think one of the

00:18:02,800 --> 00:18:06,790
reasons why originally modules were put

00:18:05,020 --> 00:18:09,010
in was you couldn't distribute code it

00:18:06,790 --> 00:18:11,190
would name clash all over the place if

00:18:09,010 --> 00:18:14,290
you didn't have a way to separate out

00:18:11,190 --> 00:18:16,810
various parts of code into into names

00:18:14,290 --> 00:18:18,280
that were isolated right we're at least

00:18:16,810 --> 00:18:20,290
or you could have the hope of it being

00:18:18,280 --> 00:18:22,810
isolated but we're dealing with a global

00:18:20,290 --> 00:18:26,620
namespace and in that modules help us

00:18:22,810 --> 00:18:30,280
prevent naming collisions they also can

00:18:26,620 --> 00:18:32,470
be used to kind of group classes and

00:18:30,280 --> 00:18:35,500
methods to indicate that they belong

00:18:32,470 --> 00:18:37,690
together that's just an indication right

00:18:35,500 --> 00:18:40,090
we know you could just like have a

00:18:37,690 --> 00:18:42,880
module and then use code from all over

00:18:40,090 --> 00:18:44,440
the place right or have its code be used

00:18:42,880 --> 00:18:47,350
from all over the place right there is

00:18:44,440 --> 00:18:48,760
no sort of strict delineation but we

00:18:47,350 --> 00:18:51,720
could give an indication that things

00:18:48,760 --> 00:18:51,720
belong together

00:18:52,530 --> 00:18:57,070
and what's the cost at this point you're

00:18:55,150 --> 00:18:58,720
like well this is boring because it's

00:18:57,070 --> 00:19:01,270
once again the same it's it's the same

00:18:58,720 --> 00:19:02,890
we just have to that one line to define

00:19:01,270 --> 00:19:10,510
the module and then somewhere it ends

00:19:02,890 --> 00:19:11,530
the cost is again two so I was saying

00:19:10,510 --> 00:19:12,850
that the only thing that helps you

00:19:11,530 --> 00:19:15,100
ultimately manage complexity an

00:19:12,850 --> 00:19:18,160
application is a component and so what's

00:19:15,100 --> 00:19:19,330
what's the benefit of a component well I

00:19:18,160 --> 00:19:21,940
already gave it away I didn't want to

00:19:19,330 --> 00:19:24,930
bury the lead but I do need to do it a

00:19:21,940 --> 00:19:29,380
bit more formally and for that I want to

00:19:24,930 --> 00:19:31,500
do a quick segue and actually say what

00:19:29,380 --> 00:19:34,720
what do I mean when I say component

00:19:31,500 --> 00:19:37,810
because I know I actually picked a bad

00:19:34,720 --> 00:19:39,490
name because react components there's

00:19:37,810 --> 00:19:41,350
components in every language and they're

00:19:39,490 --> 00:19:43,060
slightly different so let me go over the

00:19:41,350 --> 00:19:44,380
definition that I use for this and then

00:19:43,060 --> 00:19:47,140
we'll look at you know I already said

00:19:44,380 --> 00:19:50,530
gems gems and engines act as components

00:19:47,140 --> 00:19:55,600
and we'll look at why those things why

00:19:50,530 --> 00:19:58,720
those statements are true so the way I

00:19:55,600 --> 00:20:00,820
use the word components is there are two

00:19:58,720 --> 00:20:01,990
things they are labeled and unique

00:20:00,820 --> 00:20:05,170
content

00:20:01,990 --> 00:20:08,320
and they have explicit directed and a

00:20:05,170 --> 00:20:12,300
cyclic dependencies so let's give it a

00:20:08,320 --> 00:20:16,929
try on the first thing labeled content

00:20:12,300 --> 00:20:19,990
so obviously there's things here that

00:20:16,929 --> 00:20:23,890
contain content and there's labels is it

00:20:19,990 --> 00:20:26,170
unique well I will challenge you it's at

00:20:23,890 --> 00:20:28,330
night maybe we bring your own beer we'll

00:20:26,170 --> 00:20:29,860
buy two beers and you'll try to tell

00:20:28,330 --> 00:20:31,600
them apart it's a similar problem to

00:20:29,860 --> 00:20:34,179
this one here can you really tell the

00:20:31,600 --> 00:20:35,950
content apart so maybe not perfect for

00:20:34,179 --> 00:20:38,590
this unique part of the content labelled

00:20:35,950 --> 00:20:41,050
for sure unique maybe not we want them

00:20:38,590 --> 00:20:43,230
to be more more different let's try

00:20:41,050 --> 00:20:43,230
again

00:20:43,440 --> 00:20:49,090
supermarket lots of labelled content and

00:20:46,720 --> 00:20:50,950
yeah like you can see there's like

00:20:49,090 --> 00:20:55,030
hygiene products and cleaning products

00:20:50,950 --> 00:20:55,870
and and food items and that's that's

00:20:55,030 --> 00:20:57,460
more like it

00:20:55,870 --> 00:20:59,740
right a label content that's really

00:20:57,460 --> 00:21:01,510
different and does something different

00:20:59,740 --> 00:21:04,150
but there's also examples here like

00:21:01,510 --> 00:21:05,530
there's probably 20 versions of mustard

00:21:04,150 --> 00:21:07,210
and the only thing we can tell apart is

00:21:05,530 --> 00:21:09,550
like yellow and Dijon or something and

00:21:07,210 --> 00:21:11,020
so you have a similar problem of like

00:21:09,550 --> 00:21:12,850
well actually there's a lot of labels

00:21:11,020 --> 00:21:17,140
that are the same the best I could come

00:21:12,850 --> 00:21:19,000
up with was this guy's garage it's a

00:21:17,140 --> 00:21:20,620
bunch of boxes and look at the boxes

00:21:19,000 --> 00:21:22,960
look the same it's kind of like the gems

00:21:20,620 --> 00:21:24,850
are all have the same structure but they

00:21:22,960 --> 00:21:27,730
are all labeled and have different names

00:21:24,850 --> 00:21:30,220
or so I thought when I first used this

00:21:27,730 --> 00:21:32,200
picture so he has a bunch of good labels

00:21:30,220 --> 00:21:35,410
here and a bunch of good content he also

00:21:32,200 --> 00:21:37,720
has a box up here and some down there

00:21:35,410 --> 00:21:41,590
that don't have a name on the label so

00:21:37,720 --> 00:21:48,340
ah shoot and then he has five boxes of

00:21:41,590 --> 00:21:50,230
decor and so when a number of years ago

00:21:48,340 --> 00:21:52,000
my wife and I we bought a house you you

00:21:50,230 --> 00:21:53,920
get a ton of stuff for like the point

00:21:52,000 --> 00:21:55,300
all these manuals and starting you

00:21:53,920 --> 00:21:56,890
you're so overwhelmed in the whole

00:21:55,300 --> 00:21:58,990
process that you're like not sure should

00:21:56,890 --> 00:22:01,870
I keep it or not and so you have this

00:21:58,990 --> 00:22:04,630
had this pile and I was like oh this is

00:22:01,870 --> 00:22:06,220
great I'm gonna use folders and binders

00:22:04,630 --> 00:22:08,530
to just put these all in and that way

00:22:06,220 --> 00:22:10,780
they're like organized right there I say

00:22:08,530 --> 00:22:13,690
structured and I can just like I don't

00:22:10,780 --> 00:22:15,480
have to worry about them so when you

00:22:13,690 --> 00:22:17,970
have five decor boxes or when you

00:22:15,480 --> 00:22:20,370
have like six binders full of stuff with

00:22:17,970 --> 00:22:22,020
you for your house do you think the

00:22:20,370 --> 00:22:24,090
situation is better trying to find

00:22:22,020 --> 00:22:26,010
something when you haven't labeled the

00:22:24,090 --> 00:22:29,580
things when they're in binders versus

00:22:26,010 --> 00:22:31,080
when they're in a pile I tell you I've

00:22:29,580 --> 00:22:33,030
I've looked through these binders so

00:22:31,080 --> 00:22:34,500
many times a pile is such a great

00:22:33,030 --> 00:22:35,460
invention just put them on a pile

00:22:34,500 --> 00:22:38,580
because if you have no way of

00:22:35,460 --> 00:22:40,230
structuring it don't ya don't create

00:22:38,580 --> 00:22:41,190
five boxes called the core the thing

00:22:40,230 --> 00:22:42,660
you're going to do is now you have to

00:22:41,190 --> 00:22:45,420
pull out all these five boxes every time

00:22:42,660 --> 00:22:51,750
you're trying to find something sorry it

00:22:45,420 --> 00:22:55,620
was maybe too much but so the other part

00:22:51,750 --> 00:23:00,030
of the the other property of components

00:22:55,620 --> 00:23:02,340
is are these dependencies so let's look

00:23:00,030 --> 00:23:06,540
at a couple of dependencies we'll start

00:23:02,340 --> 00:23:08,010
in the top left the the main part of

00:23:06,540 --> 00:23:11,370
this picture is this paraglider jumping

00:23:08,010 --> 00:23:14,790
off hill and I will argue that the hill

00:23:11,370 --> 00:23:16,290
does not care about that at all but the

00:23:14,790 --> 00:23:17,550
paraglider cares very much that he's

00:23:16,290 --> 00:23:19,470
standing on a hill and not trying to do

00:23:17,550 --> 00:23:20,840
this in a valley because he wouldn't get

00:23:19,470 --> 00:23:23,700
very far

00:23:20,840 --> 00:23:28,950
so there's a clear directed dependency

00:23:23,700 --> 00:23:30,660
of this paraglider on the hill and when

00:23:28,950 --> 00:23:33,240
we look at the next one you could say oh

00:23:30,660 --> 00:23:35,280
the girl let's say that's her father the

00:23:33,240 --> 00:23:38,310
girl is dependent on him to teach her or

00:23:35,280 --> 00:23:41,280
read her the book but when I say

00:23:38,310 --> 00:23:43,860
daughter and I say father then he's

00:23:41,280 --> 00:23:46,260
dependent on her being his daughter so

00:23:43,860 --> 00:23:47,730
he can be the father so actually this

00:23:46,260 --> 00:23:51,360
they they're they're dependent on each

00:23:47,730 --> 00:23:53,340
other for this relationship the next

00:23:51,360 --> 00:23:56,100
picture is clear again this the Sun and

00:23:53,340 --> 00:23:57,540
the windmills right son windmills

00:23:56,100 --> 00:24:00,180
doesn't care too much

00:23:57,540 --> 00:24:02,160
I've asked recently son doesn't care but

00:24:00,180 --> 00:24:05,520
wooden must care a lot about Sun so they

00:24:02,160 --> 00:24:06,630
can make air go one way really fast and

00:24:05,520 --> 00:24:12,890
then you have wind and then windmills

00:24:06,630 --> 00:24:12,890
turn so again a very directed dependency

00:24:13,790 --> 00:24:21,060
and then the bottom right is again more

00:24:17,850 --> 00:24:22,800
similar to to the picture above which is

00:24:21,060 --> 00:24:26,370
all the cogs seem to turn with each

00:24:22,800 --> 00:24:28,590
other and again we have this not a

00:24:26,370 --> 00:24:30,510
direct dependency but some sort of cycle

00:24:28,590 --> 00:24:32,580
and I think it's also interesting to

00:24:30,510 --> 00:24:34,710
note you can probably come up with words

00:24:32,580 --> 00:24:36,990
to describe the things on the right the

00:24:34,710 --> 00:24:39,240
main relationship very quickly whereas

00:24:36,990 --> 00:24:41,760
you won't find one on the left right on

00:24:39,240 --> 00:24:43,980
the top that's a family and maybe at the

00:24:41,760 --> 00:24:45,809
bottom is a mechanism I dare you to find

00:24:43,980 --> 00:24:47,340
a word on the left that kind of

00:24:45,809 --> 00:24:49,830
describes that particular relationship

00:24:47,340 --> 00:24:51,090
as quickly and succinctly you don't

00:24:49,830 --> 00:24:55,200
there are different things they don't

00:24:51,090 --> 00:24:58,710
get described like that so sorry I will

00:24:55,200 --> 00:25:00,120
get I'll make it more more software

00:24:58,710 --> 00:25:03,630
engineering let's draw boxes and arrows

00:25:00,120 --> 00:25:09,240
so if a depends on B then B can not

00:25:03,630 --> 00:25:12,570
depend on a right and you can't cheat so

00:25:09,240 --> 00:25:15,299
why are gems our wire gems components

00:25:12,570 --> 00:25:17,669
well for one we have names right and we

00:25:15,299 --> 00:25:19,980
saw we had descriptive names like games

00:25:17,669 --> 00:25:22,380
and team and you have used many gems

00:25:19,980 --> 00:25:24,450
that have descriptive names like that so

00:25:22,380 --> 00:25:26,820
we have the labeled content and we tend

00:25:24,450 --> 00:25:28,919
to use one gem that does a thing right

00:25:26,820 --> 00:25:31,470
so it's fairly unique I know there's

00:25:28,919 --> 00:25:33,570
like sometimes we have multiple gems

00:25:31,470 --> 00:25:35,820
that do a similar thing but it still

00:25:33,570 --> 00:25:37,799
holds very well and we have explicit

00:25:35,820 --> 00:25:40,710
dependencies right in this case we have

00:25:37,799 --> 00:25:43,529
gem a depending on B and C I hope that's

00:25:40,710 --> 00:25:45,960
not me and when we ask bundler to

00:25:43,529 --> 00:25:47,610
compile or bundle this application

00:25:45,960 --> 00:25:50,460
bundlers like yep I know how to do this

00:25:47,610 --> 00:25:53,070
this works perfectly fine as soon as we

00:25:50,460 --> 00:25:55,970
change this just a little bit and create

00:25:53,070 --> 00:25:58,440
a dependency of this gem see on gem a

00:25:55,970 --> 00:25:59,940
bundler is also perfectly capable of

00:25:58,440 --> 00:26:01,500
telling us what's going on but it'll say

00:25:59,940 --> 00:26:05,789
I can't do this you have an infinite

00:26:01,500 --> 00:26:07,529
loop I don't want this right so we

00:26:05,789 --> 00:26:11,730
cannot have cyclic dependencies between

00:26:07,529 --> 00:26:13,230
gems so this they continue to be holding

00:26:11,730 --> 00:26:22,110
up to the properties of what components

00:26:13,230 --> 00:26:23,730
are so yeah I apologize for the I didn't

00:26:22,110 --> 00:26:26,789
realize the contrast was going to be

00:26:23,730 --> 00:26:29,610
like this but I already said this was

00:26:26,789 --> 00:26:31,470
the most boring kind of cost analysis

00:26:29,610 --> 00:26:33,169
because everything was too and that's if

00:26:31,470 --> 00:26:35,399
you can't read the red on the right

00:26:33,169 --> 00:26:38,130
there the costs for all of the ones

00:26:35,399 --> 00:26:40,020
we've looked at so far were two and we

00:26:38,130 --> 00:26:41,840
went over the benefits of method class

00:26:40,020 --> 00:26:44,820
name space module

00:26:41,840 --> 00:26:46,590
so when we look at the cost of a

00:26:44,820 --> 00:26:48,180
component or the benefits of a component

00:26:46,590 --> 00:26:49,500
we can't look at this file anymore

00:26:48,180 --> 00:26:52,050
because we know well we actually need to

00:26:49,500 --> 00:26:54,680
look at the packaging mechanism right we

00:26:52,050 --> 00:26:56,760
need to look at the gym as a whole so

00:26:54,680 --> 00:26:58,830
there's obviously a couple ways to

00:26:56,760 --> 00:27:01,260
create a gym and there's arguably a lot

00:26:58,830 --> 00:27:03,150
of variation in what you kind of what

00:27:01,260 --> 00:27:05,430
minimal structure you create with that

00:27:03,150 --> 00:27:08,070
I'm just gonna go with creating a gym

00:27:05,430 --> 00:27:11,940
via the bundle command and we'll analyze

00:27:08,070 --> 00:27:15,660
that and I'll just just to stay in that

00:27:11,940 --> 00:27:18,330
structure of the slides let's look at

00:27:15,660 --> 00:27:23,010
the the kind of obvious benefits of of

00:27:18,330 --> 00:27:24,090
the contribution of a gem well first

00:27:23,010 --> 00:27:26,760
thing is it allows for distribution

00:27:24,090 --> 00:27:29,520
that's why we how we mostly get our gems

00:27:26,760 --> 00:27:31,410
we get them from Ruby gems and people

00:27:29,520 --> 00:27:36,480
have distributed packages of

00:27:31,410 --> 00:27:39,090
functionality but the more subtle thing

00:27:36,480 --> 00:27:41,910
and more important for the analysis of

00:27:39,090 --> 00:27:45,140
component based application is that gems

00:27:41,910 --> 00:27:49,590
create a provably independent package of

00:27:45,140 --> 00:27:51,270
code provably independent we saw we have

00:27:49,590 --> 00:27:53,040
tests in there we have all of the things

00:27:51,270 --> 00:27:55,430
that that thing needs including its

00:27:53,040 --> 00:27:58,380
dependencies defined inside of a package

00:27:55,430 --> 00:28:00,780
and that's actually way more powerful so

00:27:58,380 --> 00:28:03,180
I'll get I'll go over more benefits in a

00:28:00,780 --> 00:28:08,070
second but let's look at the costs so

00:28:03,180 --> 00:28:10,770
when you generate a gem like this you

00:28:08,070 --> 00:28:12,000
can output how many I just check the

00:28:10,770 --> 00:28:16,500
lines of code that could generate I

00:28:12,000 --> 00:28:18,930
didn't put anything into this gym it

00:28:16,500 --> 00:28:20,790
ends up being 88 lines of code now this

00:28:18,930 --> 00:28:23,610
number is high you can reduce it

00:28:20,790 --> 00:28:25,350
dramatically I think the minimum is

00:28:23,610 --> 00:28:27,630
about 15 lines of code because of the

00:28:25,350 --> 00:28:31,080
size of the gem spec that you need but

00:28:27,630 --> 00:28:34,110
let's run with this number for now it

00:28:31,080 --> 00:28:36,210
can be much lower again I said gems work

00:28:34,110 --> 00:28:37,980
really well I don't think this number is

00:28:36,210 --> 00:28:41,270
the problem the problem comes when we

00:28:37,980 --> 00:28:44,190
try to package parts of rails into our

00:28:41,270 --> 00:28:47,400
components so we need to combine gems

00:28:44,190 --> 00:28:49,170
with engines so now the commands

00:28:47,400 --> 00:28:51,570
slightly different right we don't no

00:28:49,170 --> 00:28:54,240
longer use bundle we use rails plug-in

00:28:51,570 --> 00:28:55,559
new and that's how we can create rail

00:28:54,240 --> 00:28:58,379
rails engines

00:28:55,559 --> 00:29:02,100
or the things that are used parts of

00:28:58,379 --> 00:29:04,679
rails the benefits of this are exactly

00:29:02,100 --> 00:29:06,269
the same as that for straight up gems

00:29:04,679 --> 00:29:08,999
and that is they allow for distribution

00:29:06,269 --> 00:29:11,879
right if you've used common re or active

00:29:08,999 --> 00:29:14,789
admin you're using gems that package

00:29:11,879 --> 00:29:16,830
engines to give you functionality but

00:29:14,789 --> 00:29:18,749
and it's again it's the same as it's a

00:29:16,830 --> 00:29:22,740
provably independent package of code

00:29:18,749 --> 00:29:26,490
with rails inside of it and doing the

00:29:22,740 --> 00:29:28,320
cost analysis again well there's a lot

00:29:26,490 --> 00:29:29,429
of code that gets generated there's five

00:29:28,320 --> 00:29:31,499
hundred and twenty eight lines when you

00:29:29,429 --> 00:29:33,029
just run that command on whatever

00:29:31,499 --> 00:29:35,190
version of rails I was running I bet you

00:29:33,029 --> 00:29:37,980
that changes from time to time but

00:29:35,190 --> 00:29:39,509
that's a lot of code and most of this

00:29:37,980 --> 00:29:41,789
code you actually can't get rid of

00:29:39,509 --> 00:29:43,470
because it's there's one thing that gets

00:29:41,789 --> 00:29:45,600
put into the test folder which is a

00:29:43,470 --> 00:29:48,119
dummy application which is a full rails

00:29:45,600 --> 00:29:50,820
application that for tests mounts the

00:29:48,119 --> 00:29:52,440
engine in kind of inside of itself so

00:29:50,820 --> 00:29:54,889
that you can run tests against it and

00:29:52,440 --> 00:29:57,480
you need that thing otherwise again

00:29:54,889 --> 00:30:02,820
untested code and then you have other

00:29:57,480 --> 00:30:04,830
problems so now the the cost analysis of

00:30:02,820 --> 00:30:07,110
this table is slightly more interesting

00:30:04,830 --> 00:30:09,419
and you can see the rails components

00:30:07,110 --> 00:30:10,950
blow the costs of these other things out

00:30:09,419 --> 00:30:13,759
of the water and I think this is one of

00:30:10,950 --> 00:30:15,749
the prime reasons why I've been well

00:30:13,759 --> 00:30:17,369
talking to a lot of folks over the last

00:30:15,749 --> 00:30:18,749
couple years of doing this but I get a

00:30:17,369 --> 00:30:20,549
lot of pushback also because they're

00:30:18,749 --> 00:30:23,129
saying this feels weird because it feels

00:30:20,549 --> 00:30:25,499
like we're misusing something and it

00:30:23,129 --> 00:30:27,389
feels like it's too expensive it doesn't

00:30:25,499 --> 00:30:31,529
feel right and I agree this doesn't feel

00:30:27,389 --> 00:30:35,039
right but why am I still doing it I have

00:30:31,529 --> 00:30:36,450
not written a rails application in years

00:30:35,039 --> 00:30:39,960
that basically didn't use this mechanism

00:30:36,450 --> 00:30:42,210
I want to quickly go over why I still

00:30:39,960 --> 00:30:47,249
think we need to do it so just to

00:30:42,210 --> 00:30:49,919
highlight a couple more benefits with

00:30:47,249 --> 00:30:51,840
this structure on a high level without

00:30:49,919 --> 00:30:54,179
knowing how much is in each of these

00:30:51,840 --> 00:30:57,450
constituent parts we can see what the

00:30:54,179 --> 00:30:59,669
app does we see here that on the right

00:30:57,450 --> 00:31:02,700
side there's an admin four teams and

00:30:59,669 --> 00:31:04,230
there's at teams underneath so we know

00:31:02,700 --> 00:31:07,259
it's got something to do with teams and

00:31:04,230 --> 00:31:08,650
there's games and they're being admins

00:31:07,259 --> 00:31:10,690
so we have two admin

00:31:08,650 --> 00:31:12,700
once here but then we're making

00:31:10,690 --> 00:31:14,380
predictions I don't know if for the game

00:31:12,700 --> 00:31:16,390
on Sunday or some other game but it

00:31:14,380 --> 00:31:19,630
feels like we're we're predicting the

00:31:16,390 --> 00:31:21,360
outcomes of games that teams play that's

00:31:19,630 --> 00:31:24,040
all we can glean from this it could be

00:31:21,360 --> 00:31:25,540
you know we could have tens of classes

00:31:24,040 --> 00:31:27,460
in all of these but we could still make

00:31:25,540 --> 00:31:28,660
this kind of abstract statement about

00:31:27,460 --> 00:31:32,800
the application just because we're

00:31:28,660 --> 00:31:35,200
seeing the high-level structure the

00:31:32,800 --> 00:31:39,400
provable independence is super important

00:31:35,200 --> 00:31:43,540
when it comes to testing imagine we we

00:31:39,400 --> 00:31:47,310
change code in predictor here on the

00:31:43,540 --> 00:31:49,420
bottom left and orange and we break it

00:31:47,310 --> 00:31:51,820
everything that depends on something

00:31:49,420 --> 00:31:53,500
that we build can break but by us

00:31:51,820 --> 00:31:55,660
breaking the thing right so if we break

00:31:53,500 --> 00:31:58,720
predictor we can break prediction UI and

00:31:55,660 --> 00:32:01,600
we can break the application we cannot

00:31:58,720 --> 00:32:03,640
break any of the green parts or said the

00:32:01,600 --> 00:32:05,680
other way around when you change only

00:32:03,640 --> 00:32:08,050
predictor you do not need to run the

00:32:05,680 --> 00:32:09,880
tests for any of the green parts and the

00:32:08,050 --> 00:32:11,680
more you have this kind of structure the

00:32:09,880 --> 00:32:13,540
more you can get away with just testing

00:32:11,680 --> 00:32:17,170
the things and that they're now smaller

00:32:13,540 --> 00:32:22,690
that that you have well provably

00:32:17,170 --> 00:32:26,020
affected potentially and creating new

00:32:22,690 --> 00:32:28,810
stuff is also pretty pretty cool in this

00:32:26,020 --> 00:32:30,700
way you want to create a new predictor

00:32:28,810 --> 00:32:33,160
may be based on some fancy machine

00:32:30,700 --> 00:32:35,380
learning well you put it in a new gem

00:32:33,160 --> 00:32:38,530
and you can easily see how you would

00:32:35,380 --> 00:32:41,170
swap in this new gem for four tests at

00:32:38,530 --> 00:32:42,820
first into into your application and

00:32:41,170 --> 00:32:44,290
then when you only when you're ready you

00:32:42,820 --> 00:32:45,940
kind of cut the core to the other one

00:32:44,290 --> 00:32:51,490
remove it from the app but you've never

00:32:45,940 --> 00:32:53,680
polluted the existing code with your new

00:32:51,490 --> 00:32:55,000
code you've kept it separate you tested

00:32:53,680 --> 00:32:59,860
it independently and you were able to

00:32:55,000 --> 00:33:03,490
swap it in but all of this I think gets

00:32:59,860 --> 00:33:05,230
dwarfed by this aspect that I was trying

00:33:03,490 --> 00:33:07,920
to say so clearly at the very beginning

00:33:05,230 --> 00:33:10,930
and that is the management of complexity

00:33:07,920 --> 00:33:16,540
when let's say you have a thing a

00:33:10,930 --> 00:33:18,190
component with 100 parts in it the

00:33:16,540 --> 00:33:21,400
number of combinations where you can put

00:33:18,190 --> 00:33:22,649
these together into subgroups is this

00:33:21,400 --> 00:33:25,690
number whatever that

00:33:22,649 --> 00:33:28,509
when you split these two of these 100

00:33:25,690 --> 00:33:31,029
into two buckets of 50 that's your

00:33:28,509 --> 00:33:35,289
number of combinations when you split it

00:33:31,029 --> 00:33:36,940
further and further and further I can

00:33:35,289 --> 00:33:42,459
say this number ten thousand one hundred

00:33:36,940 --> 00:33:46,330
and thirty so the kind the combinations

00:33:42,459 --> 00:33:49,419
that you can build with with larger

00:33:46,330 --> 00:33:52,690
systems are growing exponentially

00:33:49,419 --> 00:33:55,179
obviously and I think that is a measure

00:33:52,690 --> 00:33:56,799
for complexity your meter

00:33:55,179 --> 00:33:58,479
should also be going off right now

00:33:56,799 --> 00:34:02,379
because obviously we're never going to

00:33:58,479 --> 00:34:05,679
be quite that complex but I will point

00:34:02,379 --> 00:34:08,440
out that while while this these numbers

00:34:05,679 --> 00:34:11,470
are probably overstating the complexity

00:34:08,440 --> 00:34:17,440
we got with a growing code base I'm not

00:34:11,470 --> 00:34:19,299
sure how much and in fact I I think that

00:34:17,440 --> 00:34:23,799
the reason I've been using all of these

00:34:19,299 --> 00:34:25,779
these these techniques is because this

00:34:23,799 --> 00:34:28,349
cost has ultimately not scared me

00:34:25,779 --> 00:34:33,010
because the benefits have been greater I

00:34:28,349 --> 00:34:34,510
do want to I do want to mention that

00:34:33,010 --> 00:34:39,429
I've recently been working a lot in

00:34:34,510 --> 00:34:40,929
react and this is so here you have to

00:34:39,429 --> 00:34:42,609
react components and now this is the

00:34:40,929 --> 00:34:43,750
react component right it's not a

00:34:42,609 --> 00:34:46,450
component in the sense that I was

00:34:43,750 --> 00:34:48,099
describing earlier and this code you can

00:34:46,450 --> 00:34:50,109
see component a depends on component B

00:34:48,099 --> 00:34:51,970
and the other and vice versa we have a

00:34:50,109 --> 00:34:55,059
way to stop that recursion if you call

00:34:51,970 --> 00:34:57,430
this reacts totally fine if you just do

00:34:55,059 --> 00:35:03,520
one thing and move these two components

00:34:57,430 --> 00:35:05,349
into two files it still works but react

00:35:03,520 --> 00:35:07,809
tells you hey you have a require cycle

00:35:05,349 --> 00:35:09,579
right you can actually say it's allowed

00:35:07,809 --> 00:35:11,650
but you should probably refactor away

00:35:09,579 --> 00:35:14,470
from it you can use linting to find this

00:35:11,650 --> 00:35:18,250
cycle and get rid of it this gives you a

00:35:14,470 --> 00:35:22,839
component for for JavaScript and for

00:35:18,250 --> 00:35:27,700
react and what was the cost yeah it's

00:35:22,839 --> 00:35:29,349
two again so in comparison to react this

00:35:27,700 --> 00:35:33,490
is slightly embarrassing that it's so

00:35:29,349 --> 00:35:35,630
expensive to create isolated components

00:35:33,490 --> 00:35:40,980
inside of rails

00:35:35,630 --> 00:35:44,070
so I want to end with my call to action

00:35:40,980 --> 00:35:44,730
for you to make it better a force to

00:35:44,070 --> 00:35:49,080
make you better

00:35:44,730 --> 00:35:52,140
oh you got to work the first thing echo

00:35:49,080 --> 00:35:53,640
is very much what Brian was saying at

00:35:52,140 --> 00:35:55,380
the beginning if if you don't

00:35:53,640 --> 00:35:57,420
participate in things like this and if

00:35:55,380 --> 00:35:58,980
you don't share your stories then I have

00:35:57,420 --> 00:36:00,600
a problem because I keep running into

00:35:58,980 --> 00:36:02,070
folks who say I've never heard of this

00:36:00,600 --> 00:36:03,570
or that seems reasonable and it seems

00:36:02,070 --> 00:36:05,610
like it will work for my application but

00:36:03,570 --> 00:36:07,560
I don't find many resources about it and

00:36:05,610 --> 00:36:08,940
I don't care if this is the solution for

00:36:07,560 --> 00:36:10,680
your app or something else is the

00:36:08,940 --> 00:36:12,390
solution for your app but if you don't

00:36:10,680 --> 00:36:16,920
participate in events and if you don't

00:36:12,390 --> 00:36:19,230
come up here kind of well come up here

00:36:16,920 --> 00:36:21,870
or the equivalent thereof of publishing

00:36:19,230 --> 00:36:24,690
your things on blogs and talking at user

00:36:21,870 --> 00:36:26,040
groups then it will just be obscure and

00:36:24,690 --> 00:36:28,020
it will feel to everyone like they're

00:36:26,040 --> 00:36:30,360
struggling through this building of

00:36:28,020 --> 00:36:32,310
bigger applications alone and you're not

00:36:30,360 --> 00:36:34,500
right you saw the room at the beginning

00:36:32,310 --> 00:36:39,900
everyone has this or most of you have

00:36:34,500 --> 00:36:43,050
this problem an obvious one an obvious

00:36:39,900 --> 00:36:45,630
thing to improve we we must reduce the

00:36:43,050 --> 00:36:48,210
size or the the sorry the cost of rails

00:36:45,630 --> 00:36:49,860
components this dummy app is a huge

00:36:48,210 --> 00:36:51,690
problem there have been attempts in the

00:36:49,860 --> 00:36:53,070
past to kind of get rid of it but you

00:36:51,690 --> 00:36:54,630
know a little bit of convention over

00:36:53,070 --> 00:36:57,480
configuration should lead you to think

00:36:54,630 --> 00:36:59,490
why can't I just use the rails gems to

00:36:57,480 --> 00:37:01,680
run the tests and I can just override

00:36:59,490 --> 00:37:03,750
whatever I need to override it should be

00:37:01,680 --> 00:37:06,780
possible to not have that as a cause

00:37:03,750 --> 00:37:10,710
directly in your code base this code you

00:37:06,780 --> 00:37:13,520
need to manage more broadly there's a

00:37:10,710 --> 00:37:16,980
ton of tooling that one could improve

00:37:13,520 --> 00:37:18,600
see I CD I wrote here but so for tests

00:37:16,980 --> 00:37:20,040
like you can make Travis work and it

00:37:18,600 --> 00:37:22,860
will like test all the components

00:37:20,040 --> 00:37:25,230
independently but you have to do a

00:37:22,860 --> 00:37:27,390
manual legwork so it again it feels a

00:37:25,230 --> 00:37:29,630
little bit like you're paying extra to

00:37:27,390 --> 00:37:33,150
get this structure in your application

00:37:29,630 --> 00:37:34,680
CD like if you push an app like this to

00:37:33,150 --> 00:37:36,240
Heroku by the way there's there's no

00:37:34,680 --> 00:37:37,350
extra cost like Heroku doesn't even care

00:37:36,240 --> 00:37:39,030
that you have this kind of structure

00:37:37,350 --> 00:37:40,830
because it's just the rails app with a

00:37:39,030 --> 00:37:42,540
little bit of structure but there's a

00:37:40,830 --> 00:37:44,090
lot of things we can do on tooling to

00:37:42,540 --> 00:37:46,590
make things better

00:37:44,090 --> 00:37:48,210
there's quirky stuff like when you have

00:37:46,590 --> 00:37:50,609
so many components

00:37:48,210 --> 00:37:52,440
and you have all these dependencies now

00:37:50,609 --> 00:37:54,510
listed everywhere in all these gem files

00:37:52,440 --> 00:37:56,670
or gem specs right you're suddenly

00:37:54,510 --> 00:37:59,070
depending on the app that I saw with the

00:37:56,670 --> 00:38:00,450
most components had about 60 or 70 and

00:37:59,070 --> 00:38:01,619
so if you imagine all of those are

00:38:00,450 --> 00:38:03,420
engines which I'm not sure that they

00:38:01,619 --> 00:38:05,310
were then you are stating like the rails

00:38:03,420 --> 00:38:07,020
and it's version 70 times and well

00:38:05,310 --> 00:38:08,550
that's just a search and replace if you

00:38:07,020 --> 00:38:09,780
want to upgrade and there's a nifty

00:38:08,550 --> 00:38:12,630
things you can do with that it also

00:38:09,780 --> 00:38:15,210
feels kind of clunky so fixing

00:38:12,630 --> 00:38:17,220
dependency versioning across components

00:38:15,210 --> 00:38:19,410
is another thing you could work on I

00:38:17,220 --> 00:38:21,540
think the coolest thing and probably

00:38:19,410 --> 00:38:24,869
like the most advanced thing would be

00:38:21,540 --> 00:38:26,849
can we find ways to detect or extract

00:38:24,869 --> 00:38:28,980
components automatically but naively

00:38:26,849 --> 00:38:31,380
take a class take its tests separate it

00:38:28,980 --> 00:38:32,640
out run the tests if it passes it should

00:38:31,380 --> 00:38:34,589
be possible for that to be its own

00:38:32,640 --> 00:38:35,910
component most of the time that's not

00:38:34,589 --> 00:38:37,830
going to work certainly not with active

00:38:35,910 --> 00:38:39,000
record models as many as many as many

00:38:37,830 --> 00:38:39,359
they're just going to depend on each

00:38:39,000 --> 00:38:42,750
other

00:38:39,359 --> 00:38:44,790
but the next level up would be analyze

00:38:42,750 --> 00:38:46,470
the classes and their dependencies as

00:38:44,790 --> 00:38:48,960
much as that's possible with Ruby being

00:38:46,470 --> 00:38:50,790
a dynamic language and see if there are

00:38:48,960 --> 00:38:53,040
any clusters of classes that if you

00:38:50,790 --> 00:38:55,500
separate them away where you can see

00:38:53,040 --> 00:38:58,320
they're tightly coupled and there's only

00:38:55,500 --> 00:39:01,230
less connections to the outside and can

00:38:58,320 --> 00:39:03,480
you use that to give a report to someone

00:39:01,230 --> 00:39:05,310
to realize that's how I should start

00:39:03,480 --> 00:39:07,740
looking at seams within the application

00:39:05,310 --> 00:39:10,050
so I can split off code and and make it

00:39:07,740 --> 00:39:18,080
separate I think this is this will be

00:39:10,050 --> 00:39:22,830
super cool to work on so structure and

00:39:18,080 --> 00:39:24,359
the structure that that I want to add

00:39:22,830 --> 00:39:28,349
two applications doesn't make sense for

00:39:24,359 --> 00:39:31,380
small things but I think we're all or

00:39:28,349 --> 00:39:34,440
many of us are in big things or they're

00:39:31,380 --> 00:39:36,330
aspiring to be there's another aspect to

00:39:34,440 --> 00:39:37,859
that which is if you don't learn to use

00:39:36,330 --> 00:39:39,960
the tools then when you get into the

00:39:37,859 --> 00:39:47,220
situation you're it's kind of already

00:39:39,960 --> 00:39:48,630
too late but that's okay also if you're

00:39:47,220 --> 00:39:50,310
in the good situation of having the

00:39:48,630 --> 00:39:52,170
problem well you're in a good situation

00:39:50,310 --> 00:39:55,050
you're your startup is still there your

00:39:52,170 --> 00:39:56,930
codebase is still relevant so you might

00:39:55,050 --> 00:40:00,930
need to take the time to do a big

00:39:56,930 --> 00:40:01,980
refactor like this and the longest one I

00:40:00,930 --> 00:40:04,020
participated in

00:40:01,980 --> 00:40:06,299
was about a year and a half or two years

00:40:04,020 --> 00:40:08,280
transitioning from a monolith via

00:40:06,299 --> 00:40:11,760
structured application using components

00:40:08,280 --> 00:40:13,079
to introducing micro-services and I know

00:40:11,760 --> 00:40:15,630
that there are projects where that takes

00:40:13,079 --> 00:40:18,720
longer but it takes time and that's okay

00:40:15,630 --> 00:40:21,630
I heard that or read that this

00:40:18,720 --> 00:40:23,250
particular Highway interstate or not so

00:40:21,630 --> 00:40:26,280
whatever you call that and took eight

00:40:23,250 --> 00:40:27,599
years to build but think about the

00:40:26,280 --> 00:40:31,530
structures that you're putting in place

00:40:27,599 --> 00:40:34,680
so that you can support cities as as big

00:40:31,530 --> 00:40:36,170
as you can dream up that's all I have

00:40:34,680 --> 00:40:42,559
thank you very much

00:40:36,170 --> 00:40:42,559

YouTube URL: https://www.youtube.com/watch?v=EypRSLfKvak


