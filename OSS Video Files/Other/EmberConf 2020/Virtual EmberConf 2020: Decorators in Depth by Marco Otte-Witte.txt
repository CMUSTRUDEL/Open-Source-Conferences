Title: Virtual EmberConf 2020: Decorators in Depth by Marco Otte-Witte
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Decorators in Depth by Marco Otte-Witte

Decorators are becoming an essential part of the Ember.js Programming Model with Octane. While APIs like @tracked and @action are easy to use though, many developers are not yet familiar with the concept of decorators as such and don't have a clear mental model of what they are and how they work. This talk dives deep into the ideas and motivations behind decorators, introduces a bit of historical context and similarities to concepts in other languages and gives an overview of how decorators work internally. By the end of this talk, you will have a good understanding of how decorators work, what the
Captions: 
	00:00:01,270 --> 00:00:20,820
[Music]

00:00:23,610 --> 00:00:30,810
hello everybody I'm I'm recording this

00:00:28,660 --> 00:00:32,950
the Friday before amber conce

00:00:30,810 --> 00:00:35,949
unfortunately of course I I couldn't

00:00:32,950 --> 00:00:38,290
come to Portland as I I did at the past

00:00:35,949 --> 00:00:40,570
like five years or so

00:00:38,290 --> 00:00:43,930
first time first time I'm speaking and

00:00:40,570 --> 00:00:46,360
first time I'm not actually there at the

00:00:43,930 --> 00:00:48,309
same time which is unfortunate but I

00:00:46,360 --> 00:00:52,900
guess this is kind of a special

00:00:48,309 --> 00:00:56,280
situation of the sea so I don't have

00:00:52,900 --> 00:01:01,299
proper recording equipment but I hope

00:00:56,280 --> 00:01:04,510
this is gonna be gonna be good and let's

00:01:01,299 --> 00:01:10,060
get started so welcome to my to my bonus

00:01:04,510 --> 00:01:12,580
contour decorators in debt I'm Marco I'm

00:01:10,060 --> 00:01:15,750
from from Germany specifically Bavaria

00:01:12,580 --> 00:01:19,689
where people sometimes look like this I

00:01:15,750 --> 00:01:23,619
am the founder of simple apps we were a

00:01:19,689 --> 00:01:25,929
a web engineering consultancy with

00:01:23,619 --> 00:01:30,570
digital products for companies around

00:01:25,929 --> 00:01:33,939
the world and we also have teams to be

00:01:30,570 --> 00:01:36,609
like more effective with with amber to

00:01:33,939 --> 00:01:40,689
live a better quality in a shorter time

00:01:36,609 --> 00:01:44,499
maybe and and just sort of to get the

00:01:40,689 --> 00:01:47,770
most out of amber and you might know us

00:01:44,499 --> 00:01:52,899
from our open source work we maintain a

00:01:47,770 --> 00:01:57,460
bunch of like well-known add-ons in the

00:01:52,899 --> 00:02:02,229
amber ecosystem we also sponsor the

00:01:57,460 --> 00:02:04,869
amber project such with people writing

00:02:02,229 --> 00:02:07,749
for the amber times for example we did a

00:02:04,869 --> 00:02:13,060
lot of work on the website with people

00:02:07,749 --> 00:02:15,360
on the learning team and so on and we

00:02:13,060 --> 00:02:20,110
co-organized Emma Fest which is Europe's

00:02:15,360 --> 00:02:22,660
amber conference obviously and my notes

00:02:20,110 --> 00:02:25,930
say yeah I brought because I didn't

00:02:22,660 --> 00:02:29,530
actually bring obviously I I think I

00:02:25,930 --> 00:02:31,990
sent 800 to Portland which

00:02:29,530 --> 00:02:34,270
maybe now in the turd office and like

00:02:31,990 --> 00:02:39,459
maybe we can distribute them some other

00:02:34,270 --> 00:02:41,230
way but here's how the sticker looks for

00:02:39,459 --> 00:02:44,140
this year and the dates for this year

00:02:41,230 --> 00:02:49,720
gonna be October 15 16

00:02:44,140 --> 00:02:52,450
we don't actually say what the host city

00:02:49,720 --> 00:02:54,280
of the conference's as every year sort

00:02:52,450 --> 00:02:56,410
of we have this sticker with a

00:02:54,280 --> 00:02:59,170
background that sort of gives some some

00:02:56,410 --> 00:03:01,239
visual hints on the location and then we

00:02:59,170 --> 00:03:03,760
let people guess it's like our Pullman's

00:03:01,239 --> 00:03:07,870
marketing strategy I think it worked

00:03:03,760 --> 00:03:10,420
pretty well in the last year's and yeah

00:03:07,870 --> 00:03:12,070
see whether I was somebody let's see

00:03:10,420 --> 00:03:16,720
whether somebody can guess this year's

00:03:12,070 --> 00:03:19,209
host ID will of course reveal it soon

00:03:16,720 --> 00:03:22,209
but I guess at the moment it's not even

00:03:19,209 --> 00:03:25,080
clear whether everybody will be able to

00:03:22,209 --> 00:03:29,140
travel anywhere in Europe mid-october

00:03:25,080 --> 00:03:36,209
hopefully yes but we will hold off a bit

00:03:29,140 --> 00:03:36,209
until the situation smooth us a bit more

00:03:37,500 --> 00:03:46,480
so I have some opening story for the

00:03:43,720 --> 00:03:49,780
heart which doesn't really work anymore

00:03:46,480 --> 00:03:53,519
I'm still gonna do because I I couldn't

00:03:49,780 --> 00:03:55,840
really come up with anything better so

00:03:53,519 --> 00:03:59,260
this is actually like I said beginning

00:03:55,840 --> 00:04:02,680
it's the first time I speak at Emma conf

00:03:59,260 --> 00:04:04,359
right and the joke that I want to make

00:04:02,680 --> 00:04:06,190
is that it's the first time that I'm

00:04:04,359 --> 00:04:08,890
speaking and I almost didn't make the

00:04:06,190 --> 00:04:11,109
PATA no of course I actually didn't make

00:04:08,890 --> 00:04:16,720
Department but that's to go through the

00:04:11,109 --> 00:04:18,720
story because besides corona there's

00:04:16,720 --> 00:04:21,130
actually another reason why I would

00:04:18,720 --> 00:04:25,990
almost not have made it to Portland

00:04:21,130 --> 00:04:28,900
if Corona hadn't happened at all and

00:04:25,990 --> 00:04:30,010
that has to do with this thing the

00:04:28,900 --> 00:04:31,330
electronic system for Travel

00:04:30,010 --> 00:04:35,979
Authorization

00:04:31,330 --> 00:04:40,110
so esta which is what all of the

00:04:35,979 --> 00:04:43,360
Naughton the the non Americans or

00:04:40,110 --> 00:04:45,580
Europeans or so I don't really know

00:04:43,360 --> 00:04:48,370
to who at a place but everybody from

00:04:45,580 --> 00:04:54,009
Europe has to sort of go through this

00:04:48,370 --> 00:04:56,020
system sort of to read just with with

00:04:54,009 --> 00:04:57,939
like passport number and so on before

00:04:56,020 --> 00:04:59,710
they can go to the yes right and then

00:04:57,939 --> 00:05:03,250
that gets proved and then you can go

00:04:59,710 --> 00:05:04,629
into the country without a visa and in

00:05:03,250 --> 00:05:06,340
order to go through this you have to

00:05:04,629 --> 00:05:08,979
answer all kinds of questions one

00:05:06,340 --> 00:05:11,770
question is have you ever violated any

00:05:08,979 --> 00:05:14,199
law related to processing using or

00:05:11,770 --> 00:05:17,830
distributing illegal drugs which I don't

00:05:14,199 --> 00:05:19,889
know this might be the one where like

00:05:17,830 --> 00:05:22,300
many people would actually lie I guess

00:05:19,889 --> 00:05:24,009
there's also other questions I do you

00:05:22,300 --> 00:05:25,509
see to engage in or have you ever

00:05:24,009 --> 00:05:28,319
engaged in terrorist activities

00:05:25,509 --> 00:05:32,139
espionage sabotage or genocide which I

00:05:28,319 --> 00:05:39,940
guess or hope most people can actually

00:05:32,139 --> 00:05:42,759
honestly didn't and so negatively but

00:05:39,940 --> 00:05:44,500
there's also a new question since I

00:05:42,759 --> 00:05:47,860
think summer last year and that is have

00:05:44,500 --> 00:05:49,840
you traveled to or being present in Iran

00:05:47,860 --> 00:05:54,069
Iraq Libya or North Korea Somalia Sudan

00:05:49,840 --> 00:05:58,330
and so on after 2011 after March 2011

00:05:54,069 --> 00:06:02,529
and the problem is his picture of me in

00:05:58,330 --> 00:06:04,779
North Korea and 2012 here's me here's a

00:06:02,529 --> 00:06:07,360
statue of I think emerald stone and

00:06:04,779 --> 00:06:10,740
here's a bunch of flowers that I just

00:06:07,360 --> 00:06:13,900
had had dropped in front of that statue

00:06:10,740 --> 00:06:17,050
and I should say this is not actually

00:06:13,900 --> 00:06:19,810
sort of me expressing my support for the

00:06:17,050 --> 00:06:22,680
regime it's just something that you're

00:06:19,810 --> 00:06:25,569
sort of expected to do when you're there

00:06:22,680 --> 00:06:29,949
so I answered that new question honestly

00:06:25,569 --> 00:06:32,680
and not surprisingly my travel to the US

00:06:29,949 --> 00:06:35,440
was not authorized so now I need to get

00:06:32,680 --> 00:06:38,250
a visa which is actually a good thing

00:06:35,440 --> 00:06:41,020
because now I have to I have a 10-year

00:06:38,250 --> 00:06:42,520
visa and I don't have to go through esta

00:06:41,020 --> 00:06:44,650
anymore and somebody told me I would

00:06:42,520 --> 00:06:48,129
have been able to sort of immigration

00:06:44,650 --> 00:06:55,630
take like a first Elena so I might find

00:06:48,129 --> 00:06:57,729
that out next year and getting the visa

00:06:55,630 --> 00:06:59,229
was really is

00:06:57,729 --> 00:07:01,240
the person at the Embassy found a pretty

00:06:59,229 --> 00:07:05,590
convincing that I went to North Korea

00:07:01,240 --> 00:07:09,340
for vacation but I having to visit

00:07:05,590 --> 00:07:12,190
doesn't help me no of course right and

00:07:09,340 --> 00:07:14,710
of course it's not really up to me sort

00:07:12,190 --> 00:07:17,229
of to judge US policy but I'm not sure

00:07:14,710 --> 00:07:19,539
it's fair that I need a visa now because

00:07:17,229 --> 00:07:26,319
they only be because I have been to

00:07:19,539 --> 00:07:29,560
North Korea once because here's me and

00:07:26,319 --> 00:07:32,199
my guide and in North Korea that's mr.

00:07:29,560 --> 00:07:33,969
Kim obviously in North Korea you cannot

00:07:32,199 --> 00:07:35,530
do anything without a guy and and the

00:07:33,969 --> 00:07:38,949
guy does not actually guide it's more

00:07:35,530 --> 00:07:41,050
like a a person that's watching you

00:07:38,949 --> 00:07:43,690
right and they are being watched

00:07:41,050 --> 00:07:45,490
themselves right but the thing is I

00:07:43,690 --> 00:07:47,349
don't seem to be the only one

00:07:45,490 --> 00:07:50,680
maintaining relatively close

00:07:47,349 --> 00:07:52,780
relationships with North Koreans right

00:07:50,680 --> 00:07:54,449
so it seems a bit like there's different

00:07:52,780 --> 00:07:58,479
rules for different people here and

00:07:54,449 --> 00:08:01,419
although I will admit that I did not

00:07:58,479 --> 00:08:04,910
fall in love with mr. Kim over beautiful

00:08:01,419 --> 00:08:06,630
letters but just over beers as people do

00:08:04,910 --> 00:08:09,789
[Music]

00:08:06,630 --> 00:08:13,630
yeah it's like maybe a bit of double

00:08:09,789 --> 00:08:16,000
standards here so anyway I thought this

00:08:13,630 --> 00:08:19,719
might be a good opening story for the

00:08:16,000 --> 00:08:22,779
talk now as I said so if it doesn't work

00:08:19,719 --> 00:08:26,650
anymore really because now I'm sitting

00:08:22,779 --> 00:08:28,150
here Munich bird having added that story

00:08:26,650 --> 00:08:32,680
to the talk I thought like maybe there's

00:08:28,150 --> 00:08:35,289
a ways of connecting the Detroits main

00:08:32,680 --> 00:08:38,110
topic which is obviously not North Korea

00:08:35,289 --> 00:08:39,880
but JavaScript decorators like

00:08:38,110 --> 00:08:42,190
connecting the two topics a bit right

00:08:39,880 --> 00:08:45,100
and having sort of a JavaScript

00:08:42,190 --> 00:08:47,410
decoration slash North Korea talk and

00:08:45,100 --> 00:08:50,140
then I was thinking about how I could do

00:08:47,410 --> 00:08:52,120
that and the first thought I had is just

00:08:50,140 --> 00:08:53,740
this statement which sounds pretty nice

00:08:52,120 --> 00:08:57,160
when it decorators are the North Korea

00:08:53,740 --> 00:08:57,880
of JavaScript but what does that even

00:08:57,160 --> 00:09:01,899
mean

00:08:57,880 --> 00:09:05,110
and it's basically it's basically just a

00:09:01,899 --> 00:09:07,959
a budget statement that sounds very good

00:09:05,110 --> 00:09:09,970
it means nothing so unfortunately there

00:09:07,959 --> 00:09:10,749
will be no more North Korea content in

00:09:09,970 --> 00:09:12,399
this

00:09:10,749 --> 00:09:16,839
just because I couldn't find a proper

00:09:12,399 --> 00:09:19,239
way to to get it in but back to the

00:09:16,839 --> 00:09:22,600
topic and I want to start with some

00:09:19,239 --> 00:09:28,059
theories so the theory behind something

00:09:22,600 --> 00:09:33,369
like JavaScript decorators is attribute

00:09:28,059 --> 00:09:37,779
oriented programming and the idea behind

00:09:33,369 --> 00:09:41,350
attribute oriented programming is that

00:09:37,779 --> 00:09:43,299
it is a program level marketing

00:09:41,350 --> 00:09:46,179
technique that allows you to mark

00:09:43,299 --> 00:09:49,660
elements in your program to indicate

00:09:46,179 --> 00:09:51,699
that they maintain specific application

00:09:49,660 --> 00:09:54,579
specific or domain specific semantics

00:09:51,699 --> 00:09:57,279
without leaking all of the details of

00:09:54,579 --> 00:10:00,819
those semantics into your core logic

00:09:57,279 --> 00:10:03,720
subset which then increases abstraction

00:10:00,819 --> 00:10:07,230
and reduces complexity all right and

00:10:03,720 --> 00:10:10,839
many languages have had similar content

00:10:07,230 --> 00:10:15,819
similar concepts for quite some time for

00:10:10,839 --> 00:10:19,660
example in in Java you have attributes

00:10:15,819 --> 00:10:22,389
like deprecated which allows you to mark

00:10:19,660 --> 00:10:26,919
a specific thing in in your code like a

00:10:22,389 --> 00:10:29,549
class here as deprecated of course you

00:10:26,919 --> 00:10:32,470
could also do more sophisticated stuff

00:10:29,549 --> 00:10:35,499
so here's an example from hibernate

00:10:32,470 --> 00:10:39,579
which is a very popular opera object

00:10:35,499 --> 00:10:42,910
relational mapper in in Java and here

00:10:39,579 --> 00:10:45,790
you see we use the ID and we use the

00:10:42,910 --> 00:10:50,879
entity attribute and the table attribute

00:10:45,790 --> 00:10:55,660
ID attribute and so on to sort of define

00:10:50,879 --> 00:10:57,579
how the mapping from instances of the

00:10:55,660 --> 00:11:00,429
employee class to a particular data

00:10:57,579 --> 00:11:03,759
based table should work or other way

00:11:00,429 --> 00:11:06,189
around well of course but the thing here

00:11:03,759 --> 00:11:08,739
is we are not leaking any of the details

00:11:06,189 --> 00:11:12,369
like any of the sort of internal

00:11:08,739 --> 00:11:14,079
mechanisms of this mapping into the

00:11:12,369 --> 00:11:16,299
application code right we keep it

00:11:14,079 --> 00:11:22,049
relatively clean because we just sort of

00:11:16,299 --> 00:11:24,110
attribute the elements with respects

00:11:22,049 --> 00:11:27,110
with their respective at

00:11:24,110 --> 00:11:34,040
dudes without sort of revealing how

00:11:27,110 --> 00:11:36,050
those work internally this concept

00:11:34,040 --> 00:11:41,329
doesn't only exist in in Java

00:11:36,050 --> 00:11:45,589
don't they also a similar concept in job

00:11:41,329 --> 00:11:52,010
net so here for example we're using JSON

00:11:45,589 --> 00:11:55,519
property attributes to to define how

00:11:52,010 --> 00:11:59,589
instances of a particular class and in

00:11:55,519 --> 00:12:04,490
this case the API error class are

00:11:59,589 --> 00:12:06,260
serialized to JSON and again without

00:12:04,490 --> 00:12:08,560
leaking any of the details of the

00:12:06,260 --> 00:12:14,420
serialization process sort of into our

00:12:08,560 --> 00:12:17,690
application code when we compare this to

00:12:14,420 --> 00:12:20,360
what we have in octane then it's

00:12:17,690 --> 00:12:22,430
obviously similar right so here we use

00:12:20,360 --> 00:12:24,890
the track decorator to mark the count

00:12:22,430 --> 00:12:27,529
property aspect so the template we ran

00:12:24,890 --> 00:12:30,050
out when it changes and we use the

00:12:27,529 --> 00:12:35,110
action decorator to make the increment

00:12:30,050 --> 00:12:35,110
decrement methods work as agents so

00:12:35,500 --> 00:12:44,269
again without leaking any of the details

00:12:39,680 --> 00:12:46,339
of these decorators or the concepts

00:12:44,269 --> 00:12:49,640
behind them into our application code

00:12:46,339 --> 00:12:51,740
right we just say the count property

00:12:49,640 --> 00:12:54,170
should be tracked we don't care about

00:12:51,740 --> 00:12:55,970
how how that works internally or what

00:12:54,170 --> 00:12:58,339
like what

00:12:55,970 --> 00:13:00,589
tracking even means sort of that's not a

00:12:58,339 --> 00:13:02,390
concern of our application but that's a

00:13:00,589 --> 00:13:07,880
framer concern so there's no point sort

00:13:02,390 --> 00:13:11,089
of leaking leaking any of the details of

00:13:07,880 --> 00:13:13,010
the concept of tracking or the concept

00:13:11,089 --> 00:13:16,250
of making a method available as an

00:13:13,010 --> 00:13:20,240
active work as an action into our

00:13:16,250 --> 00:13:23,180
application code so we want to hide all

00:13:20,240 --> 00:13:29,240
of them and we do hide all of it behind

00:13:23,180 --> 00:13:32,060
the decorator so this is how Java Script

00:13:29,240 --> 00:13:34,839
decorators fit in to sort of the general

00:13:32,060 --> 00:13:37,470
concept of attribute oriented

00:13:34,839 --> 00:13:39,630
programming so you add attributes

00:13:37,470 --> 00:13:44,220
the code to express additional semantics

00:13:39,630 --> 00:13:45,690
while hiding all of the details but

00:13:44,220 --> 00:13:47,540
later we will see there's actually a

00:13:45,690 --> 00:13:50,190
fundamental difference between

00:13:47,540 --> 00:13:53,520
JavaScript decorators and attributes in

00:13:50,190 --> 00:13:56,840
other languages we will look into that

00:13:53,520 --> 00:13:59,790
more detail later sort of on the surface

00:13:56,840 --> 00:14:03,750
on the surface it's sort of the same

00:13:59,790 --> 00:14:09,140
thing and it's it's meant to serve the

00:14:03,750 --> 00:14:12,240
same purpose the the inside sort of a

00:14:09,140 --> 00:14:15,840
bit different that for now we can ignore

00:14:12,240 --> 00:14:18,360
that so then you might ask our

00:14:15,840 --> 00:14:22,920
decorators ready for use and the answer

00:14:18,360 --> 00:14:25,440
it is it's complicated unfortunately and

00:14:22,920 --> 00:14:28,580
again I want to share some background

00:14:25,440 --> 00:14:33,450
here so as most of you know or everybody

00:14:28,580 --> 00:14:36,150
presumably tc39 group that defines the

00:14:33,450 --> 00:14:39,360
ACMA script standard and that's

00:14:36,150 --> 00:14:42,030
JavaScript it's an international group

00:14:39,360 --> 00:14:44,970
of people with various backgrounds sort

00:14:42,030 --> 00:14:47,940
of that represent different interest

00:14:44,970 --> 00:14:51,140
groups like larger companies browser

00:14:47,940 --> 00:14:55,770
makers and so on but also sort of the

00:14:51,140 --> 00:14:59,880
viewpoint of the average JavaScript

00:14:55,770 --> 00:15:01,950
developer sort of which I think was one

00:14:59,880 --> 00:15:04,440
of the main motivations for eudicots

00:15:01,950 --> 00:15:09,630
like obviously as you know one of the

00:15:04,440 --> 00:15:13,740
sort of inventors of ember to join tc39

00:15:09,630 --> 00:15:16,290
because I I think that his motivation

00:15:13,740 --> 00:15:18,810
sort of was to make sure that the the

00:15:16,290 --> 00:15:22,170
the average JavaScript developers

00:15:18,810 --> 00:15:24,960
viewpoint sort of was recognized in tc39

00:15:22,170 --> 00:15:26,550
as well not only the interests of larger

00:15:24,960 --> 00:15:32,120
companies or browser makers because

00:15:26,550 --> 00:15:32,120
sometimes those could be those could be

00:15:32,930 --> 00:15:38,550
pretty different of course so that group

00:15:36,030 --> 00:15:40,680
of international people discusses ideas

00:15:38,550 --> 00:15:43,290
for additions and changes to the spec or

00:15:40,680 --> 00:15:45,390
I guess in reality it's really additions

00:15:43,290 --> 00:15:47,700
only because you cannot change anything

00:15:45,390 --> 00:15:50,870
at JavaScript and it's it's basically an

00:15:47,700 --> 00:15:54,230
additive aspect because changing

00:15:50,870 --> 00:15:57,890
anything would break existing code and

00:15:54,230 --> 00:16:00,920
websites so each new thing that they

00:15:57,890 --> 00:16:03,350
discuss goes through five stages in

00:16:00,920 --> 00:16:07,190
stage 0 the thing is basically just an

00:16:03,350 --> 00:16:09,320
idea for a new language feature so

00:16:07,190 --> 00:16:11,930
anybody could have that idea and then

00:16:09,320 --> 00:16:16,520
when you find the tc39 member to bring

00:16:11,930 --> 00:16:18,710
it to the group then it it would get

00:16:16,520 --> 00:16:20,060
discussed there right at that point the

00:16:18,710 --> 00:16:22,100
idea would usually be pretty vague

00:16:20,060 --> 00:16:24,380
there's no indication of whether it'll

00:16:22,100 --> 00:16:25,760
go forward at all or maybe like it's

00:16:24,380 --> 00:16:27,740
being discussed for five minutes and

00:16:25,760 --> 00:16:30,020
then immediately rejected for some

00:16:27,740 --> 00:16:33,080
reason over ever right the next stage

00:16:30,020 --> 00:16:35,260
then is stage one where you have a

00:16:33,080 --> 00:16:37,610
written proposal with proper description

00:16:35,260 --> 00:16:42,160
examples and so on discussions of

00:16:37,610 --> 00:16:46,460
semantics and there's a tc39 member that

00:16:42,160 --> 00:16:50,180
champions the ideas or the proposal so

00:16:46,460 --> 00:16:54,230
stage one means that tc39 is willing to

00:16:50,180 --> 00:16:59,540
X to examine discuss and contribute to

00:16:54,230 --> 00:17:02,060
the proposal but there are still major

00:16:59,540 --> 00:17:04,459
changes to be expected at that point

00:17:02,060 --> 00:17:07,459
it's still relatively awake and there's

00:17:04,459 --> 00:17:11,030
no indication of whether it'll make it

00:17:07,459 --> 00:17:12,770
into the spec eventually or if it makes

00:17:11,030 --> 00:17:18,949
it whether that's gonna be a very

00:17:12,770 --> 00:17:21,290
different form maybe but if it's not

00:17:18,949 --> 00:17:26,360
rejected then the next stage with stage

00:17:21,290 --> 00:17:28,010
two and at that stage the proposal must

00:17:26,360 --> 00:17:30,230
have a formal syntax definition

00:17:28,010 --> 00:17:32,300
description should complete there should

00:17:30,230 --> 00:17:36,590
be or the need to be I think to

00:17:32,300 --> 00:17:39,710
experimental implementations one will

00:17:36,590 --> 00:17:41,840
usually be barrel unless the future

00:17:39,710 --> 00:17:44,150
cannot be transpired to current

00:17:41,840 --> 00:17:46,880
JavaScript sort of and I think that was

00:17:44,150 --> 00:17:48,890
the case with proxies because there's no

00:17:46,880 --> 00:17:51,620
way sort of to make the underlying

00:17:48,890 --> 00:17:54,140
mechanism of proxies work with with with

00:17:51,620 --> 00:17:56,870
current JavaScript obviously

00:17:54,140 --> 00:17:58,640
experimented implementations can of

00:17:56,870 --> 00:18:01,970
course be in browsers as well behind

00:17:58,640 --> 00:18:04,040
future flex or whatever at stage two a

00:18:01,970 --> 00:18:06,470
proposal can still be rejected

00:18:04,040 --> 00:18:08,360
it's it's it's relatively far in the

00:18:06,470 --> 00:18:12,050
process but they'll still no no

00:18:08,360 --> 00:18:16,280
guaranteed it'll make it the next stage

00:18:12,050 --> 00:18:19,550
then is stage three at which point the

00:18:16,280 --> 00:18:22,700
spec text needs to be complete then it

00:18:19,550 --> 00:18:24,770
need to be full they need to be two

00:18:22,700 --> 00:18:28,220
fully compliant of implementations again

00:18:24,770 --> 00:18:30,860
one of them would usually be better and

00:18:28,220 --> 00:18:33,590
at this point the proposal can be

00:18:30,860 --> 00:18:36,950
expected to be added to the spec and

00:18:33,590 --> 00:18:41,240
changes should only be made when

00:18:36,950 --> 00:18:43,880
critical issues occur and that's why

00:18:41,240 --> 00:18:47,390
stage three is sort of the important

00:18:43,880 --> 00:18:51,160
stage right because at stage three you

00:18:47,390 --> 00:18:55,010
can expect the thing to be added to the

00:18:51,160 --> 00:19:00,230
spec eventually and only slightly

00:18:55,010 --> 00:19:03,620
modified form so stage three proposals

00:19:00,230 --> 00:19:06,830
are pretty okay to use in general right

00:19:03,620 --> 00:19:09,980
why everything everything before or

00:19:06,830 --> 00:19:11,990
below stage three is not really okay to

00:19:09,980 --> 00:19:13,700
be used because there's no guarantee it

00:19:11,990 --> 00:19:15,950
will actually make it to the spec and

00:19:13,700 --> 00:19:17,960
there's no guarantee that if it makes it

00:19:15,950 --> 00:19:22,060
to the spec it will be in the form that

00:19:17,960 --> 00:19:26,420
take in its current form sort of right

00:19:22,060 --> 00:19:28,160
so yes Stage three is the one that you

00:19:26,420 --> 00:19:32,270
want to keep in mind because that's so

00:19:28,160 --> 00:19:34,580
when you're building on relatively solid

00:19:32,270 --> 00:19:37,910
ground sort of if you're using something

00:19:34,580 --> 00:19:41,930
in stage three the next stage is then

00:19:37,910 --> 00:19:46,250
stage four which is basically just like

00:19:41,930 --> 00:19:48,410
a a stage that something goes into while

00:19:46,250 --> 00:19:50,390
it's sort of waiting to the Edit but

00:19:48,410 --> 00:19:55,820
it's already decided that it weighed the

00:19:50,390 --> 00:19:59,810
other right so of course now the

00:19:55,820 --> 00:20:02,900
question is where are we with JavaScript

00:19:59,810 --> 00:20:07,460
decorators and first problem is there's

00:20:02,900 --> 00:20:09,710
not one but I see two proposals second

00:20:07,460 --> 00:20:13,040
problem is one is in stage one and the

00:20:09,710 --> 00:20:14,870
other is stage two and obviously that

00:20:13,040 --> 00:20:17,890
means that none of them is final or

00:20:14,870 --> 00:20:17,890
complete right

00:20:18,590 --> 00:20:26,580
the states one proposal is basically

00:20:22,220 --> 00:20:30,090
deprecated sort of that's been not going

00:20:26,580 --> 00:20:32,730
to be continued and the stage one the

00:20:30,090 --> 00:20:35,370
stage two proposal is in stage two which

00:20:32,730 --> 00:20:40,530
means it's not done right it might still

00:20:35,370 --> 00:20:44,340
change relatively significantly so let's

00:20:40,530 --> 00:20:47,300
look at some more details of those two

00:20:44,340 --> 00:20:50,640
proposals first of all the stage one

00:20:47,300 --> 00:20:53,040
proposal which basically defines

00:20:50,640 --> 00:20:54,720
decorators as simple functions right you

00:20:53,040 --> 00:20:56,790
would just write function that receives

00:20:54,720 --> 00:21:00,990
the element that you're decorating and

00:20:56,790 --> 00:21:04,890
then you can modify the element which is

00:21:00,990 --> 00:21:07,680
very simple right but it has major

00:21:04,890 --> 00:21:13,200
implications with respect to performance

00:21:07,680 --> 00:21:15,570
because you're actually modifying the

00:21:13,200 --> 00:21:19,680
class or the method or the property or

00:21:15,570 --> 00:21:23,100
whatever so you're changing the shape of

00:21:19,680 --> 00:21:28,110
things sort of which is always very bad

00:21:23,100 --> 00:21:31,100
for for browser engines to optimize

00:21:28,110 --> 00:21:34,080
right so the major performance implicit

00:21:31,100 --> 00:21:36,840
implications they also made a tooling

00:21:34,080 --> 00:21:40,680
implication because you cannot actually

00:21:36,840 --> 00:21:42,840
statically and you cannot actually

00:21:40,680 --> 00:21:45,360
statically analyze those decorators

00:21:42,840 --> 00:21:47,280
right if a class is decorated with a

00:21:45,360 --> 00:21:50,460
stage one decorator you cannot really

00:21:47,280 --> 00:21:54,990
know what that decorator does so you

00:21:50,460 --> 00:21:57,750
might not know for sure which which

00:21:54,990 --> 00:22:01,260
methods that class has right or whether

00:21:57,750 --> 00:22:03,390
the methods are actually as you see them

00:22:01,260 --> 00:22:05,970
in the class body or whether the

00:22:03,390 --> 00:22:08,310
decorator does modify them and then like

00:22:05,970 --> 00:22:09,720
like the extra methods on instances or

00:22:08,310 --> 00:22:11,160
on the prototype will actually be

00:22:09,720 --> 00:22:15,330
different from what you're seeing right

00:22:11,160 --> 00:22:19,410
so that's of course a major problem

00:22:15,330 --> 00:22:26,550
it's where in particular for tooling

00:22:19,410 --> 00:22:29,760
right so the stage two proposal solves

00:22:26,550 --> 00:22:34,920
the performance and tooling problems

00:22:29,760 --> 00:22:37,050
by basically defining decorators as

00:22:34,920 --> 00:22:43,080
first-class language elements and sort

00:22:37,050 --> 00:22:45,270
of limiting them much more it's not

00:22:43,080 --> 00:22:47,970
ready yet there are major changes to be

00:22:45,270 --> 00:22:50,570
expected so it's not even really clear

00:22:47,970 --> 00:22:56,730
how exactly that's going to look right

00:22:50,570 --> 00:22:59,190
so coming back to my previous slide here

00:22:56,730 --> 00:23:01,080
in reality decorators are not in North

00:22:59,190 --> 00:23:02,640
Korea of JavaScript but sort of the anti

00:23:01,080 --> 00:23:05,280
North Korea of JavaScript because

00:23:02,640 --> 00:23:05,970
nothing is regulated and everybody can

00:23:05,280 --> 00:23:09,060
do what they want

00:23:05,970 --> 00:23:13,440
basically because there is no official

00:23:09,060 --> 00:23:16,920
regulation or specification right so the

00:23:13,440 --> 00:23:19,380
question is what do we do the whole

00:23:16,920 --> 00:23:23,450
thing is deprecated and the new thing is

00:23:19,380 --> 00:23:23,450
not ready but in ember we need something

00:23:24,470 --> 00:23:29,520
that works well with Native classes

00:23:27,240 --> 00:23:31,590
because the old macro methods that we've

00:23:29,520 --> 00:23:34,050
been using for computer properties for

00:23:31,590 --> 00:23:36,810
example and so on they don't really work

00:23:34,050 --> 00:23:39,510
well with Native classes you have a

00:23:36,810 --> 00:23:41,340
bunch of options using them with native

00:23:39,510 --> 00:23:42,990
classes so it's not impossible to use

00:23:41,340 --> 00:23:45,090
them I think there might be some edge

00:23:42,990 --> 00:23:47,460
case whether actually behave differently

00:23:45,090 --> 00:23:52,200
but it's it's not impossible to use them

00:23:47,460 --> 00:23:56,280
it's just not nice at all so for example

00:23:52,200 --> 00:24:00,510
if you had a person class with a first

00:23:56,280 --> 00:24:02,760
name and last name and by the way all

00:24:00,510 --> 00:24:06,420
those examples are I think taken from

00:24:02,760 --> 00:24:10,070
the IFC that I think Melanie Sumner Road

00:24:06,420 --> 00:24:10,070
are not on absentia

00:24:10,220 --> 00:24:18,210
the examples have our name of obviously

00:24:13,740 --> 00:24:19,770
so let's just assume she wrote it so if

00:24:18,210 --> 00:24:21,810
you have a person class here but the

00:24:19,770 --> 00:24:25,980
first name and last name and you want to

00:24:21,810 --> 00:24:27,630
define a like the the typical full name

00:24:25,980 --> 00:24:29,160
computer property right like full name

00:24:27,630 --> 00:24:31,980
must be a sort of the hello world of

00:24:29,160 --> 00:24:34,110
computer properties I guess then with a

00:24:31,980 --> 00:24:36,960
native class you could define the class

00:24:34,110 --> 00:24:38,610
first and then on the prototype define

00:24:36,960 --> 00:24:40,920
the computer property right which is

00:24:38,610 --> 00:24:42,200
obviously not what you actually want to

00:24:40,920 --> 00:24:46,740
do

00:24:42,200 --> 00:24:51,450
in your application the alternative is

00:24:46,740 --> 00:24:55,160
you sort of mix a new native classes and

00:24:51,450 --> 00:24:59,190
the OMB object model and you define the

00:24:55,160 --> 00:25:04,890
the class as an extension of sort of an

00:24:59,190 --> 00:25:07,680
anonymous class here that where you use

00:25:04,890 --> 00:25:09,990
the old way sort of extending from M

00:25:07,680 --> 00:25:14,460
object this works but it was obviously

00:25:09,990 --> 00:25:16,620
also not really nice right the best

00:25:14,460 --> 00:25:20,670
solution is obviously with decorators

00:25:16,620 --> 00:25:24,600
right where you just define define a

00:25:20,670 --> 00:25:27,330
proper native class with with two fields

00:25:24,600 --> 00:25:30,690
and one getter and you just decorate

00:25:27,330 --> 00:25:34,470
together with the computed decorator

00:25:30,690 --> 00:25:38,460
yeah right so the question is how do we

00:25:34,470 --> 00:25:39,690
get that when the decorators proposal is

00:25:38,460 --> 00:25:42,210
not ready really

00:25:39,690 --> 00:25:44,190
and the answer is we just stick with

00:25:42,210 --> 00:25:51,110
this stage one proposal for now this is

00:25:44,190 --> 00:25:51,110
what the tc39 champion group recommends

00:25:51,140 --> 00:25:59,820
because although the specification is

00:25:54,750 --> 00:26:02,730
not ready decorators are already widely

00:25:59,820 --> 00:26:04,950
used in the JavaScript community and

00:26:02,730 --> 00:26:08,490
ember is actually relatively late to the

00:26:04,950 --> 00:26:13,680
party here so products like angular also

00:26:08,490 --> 00:26:15,720
have used decorators for years now so

00:26:13,680 --> 00:26:18,840
there's a lot of pressure and also

00:26:15,720 --> 00:26:22,980
there's commitment I think from tc39 to

00:26:18,840 --> 00:26:30,750
make the final decorator proposal so

00:26:22,980 --> 00:26:33,480
that it will allow to do the to make the

00:26:30,750 --> 00:26:36,570
final decorator proposal so that it will

00:26:33,480 --> 00:26:38,310
allow for doing the same things with

00:26:36,570 --> 00:26:42,060
decorators that you can also do with

00:26:38,310 --> 00:26:45,950
stage one decorators so that means you

00:26:42,060 --> 00:26:50,400
will very likely not have to change your

00:26:45,950 --> 00:26:52,710
usages of decorators right the

00:26:50,400 --> 00:26:55,440
decorators will only have to change

00:26:52,710 --> 00:26:57,480
internally to solve the

00:26:55,440 --> 00:27:00,779
performance and tooling problems but

00:26:57,480 --> 00:27:03,379
that also means that you do not want to

00:27:00,779 --> 00:27:08,340
write your own decorators yet because

00:27:03,379 --> 00:27:10,139
why sort of my usages of decorators will

00:27:08,340 --> 00:27:13,740
not have to change the internals of

00:27:10,139 --> 00:27:17,429
decorators will change a lot potentially

00:27:13,740 --> 00:27:20,840
so you when writing decorators you are

00:27:17,429 --> 00:27:24,860
building on pretty unstable ground right

00:27:20,840 --> 00:27:27,629
if you only do if you only use the

00:27:24,860 --> 00:27:30,179
decorators that ember provides then

00:27:27,629 --> 00:27:35,250
obviously ember sort of shields you from

00:27:30,179 --> 00:27:39,090
all of the internal changes that might

00:27:35,250 --> 00:27:41,370
all will probably have to be made at

00:27:39,090 --> 00:27:43,080
some point the computed property at the

00:27:41,370 --> 00:27:44,879
computer decorate and the track

00:27:43,080 --> 00:27:47,759
decorator will continue to work the same

00:27:44,879 --> 00:27:51,990
way that would just be implemented in a

00:27:47,759 --> 00:27:58,320
very different way internally one thing

00:27:51,990 --> 00:28:03,000
though is that in app code you would

00:27:58,320 --> 00:28:04,950
usually there's usually not such good

00:28:03,000 --> 00:28:08,340
use cases for decorators anyway because

00:28:04,950 --> 00:28:11,580
as we saw in the beginning the purpose

00:28:08,340 --> 00:28:14,490
of a decorator is sort of making

00:28:11,580 --> 00:28:18,539
something available while hiding all of

00:28:14,490 --> 00:28:20,279
the details of that and which is usually

00:28:18,539 --> 00:28:22,110
not something that you want to do in an

00:28:20,279 --> 00:28:23,899
application and because in an

00:28:22,110 --> 00:28:28,169
application you don't want to sort of

00:28:23,899 --> 00:28:31,549
hide parts of the code from from from

00:28:28,169 --> 00:28:35,159
from the engineer because all of your

00:28:31,549 --> 00:28:36,929
application code as a whole sort of is

00:28:35,159 --> 00:28:40,370
being maintained by your project team

00:28:36,929 --> 00:28:45,480
and so on so you like you don't want to

00:28:40,370 --> 00:28:48,690
introduce black boxes right it is of

00:28:45,480 --> 00:28:51,240
course something has a lot of value for

00:28:48,690 --> 00:28:56,509
frameworks like ember or maybe even for

00:28:51,240 --> 00:28:59,100
add-ons and understanding what

00:28:56,509 --> 00:29:01,470
decorators do how they work what they

00:28:59,100 --> 00:29:03,350
can do what they can't do sort of gives

00:29:01,470 --> 00:29:05,580
you a better mental model of your

00:29:03,350 --> 00:29:08,190
application of course which is also the

00:29:05,580 --> 00:29:09,049
reason why I give this talk so let's

00:29:08,190 --> 00:29:11,119
look at

00:29:09,049 --> 00:29:13,639
stays one proposal Amada t we were

00:29:11,119 --> 00:29:17,809
basically ignore the stage-two proposal

00:29:13,639 --> 00:29:20,570
for now because it's unclear how it's

00:29:17,809 --> 00:29:23,059
it's going to work eventually so we will

00:29:20,570 --> 00:29:24,950
focus on the stage one proposal and and

00:29:23,059 --> 00:29:27,499
like I said these days one proposal

00:29:24,950 --> 00:29:30,049
defines decorations as simple functions

00:29:27,499 --> 00:29:33,649
that modify the element that they are

00:29:30,049 --> 00:29:35,210
decorating and that is also coming back

00:29:33,649 --> 00:29:37,639
to a previous point that is that main

00:29:35,210 --> 00:29:41,470
difference between JavaScript decorators

00:29:37,639 --> 00:29:44,769
and attributes and Java or.net because Y

00:29:41,470 --> 00:29:47,539
attributes and Java and.net only add

00:29:44,769 --> 00:29:50,779
metadata sort of to the elements that

00:29:47,539 --> 00:29:53,869
they're attributing JavaScript

00:29:50,779 --> 00:29:59,419
decorators actually modify these

00:29:53,869 --> 00:30:01,970
elements right so with the Java Script

00:29:59,419 --> 00:30:05,899
decorator you could actually modify a

00:30:01,970 --> 00:30:08,480
class for example where Y an attribute

00:30:05,899 --> 00:30:11,299
in.net will only add metadata to that

00:30:08,480 --> 00:30:13,639
class so that at runtime you could

00:30:11,299 --> 00:30:19,039
reflect over that metadata and sort of

00:30:13,639 --> 00:30:20,570
do certain things right so there might

00:30:19,039 --> 00:30:22,850
of course be different in the stage two

00:30:20,570 --> 00:30:25,399
proposal but for now that's really the

00:30:22,850 --> 00:30:27,350
main difference that a JavaScript

00:30:25,399 --> 00:30:33,379
decorator will actually modify this

00:30:27,350 --> 00:30:35,149
thing that it is decorating and doing

00:30:33,379 --> 00:30:37,970
that though is relatively simple there's

00:30:35,149 --> 00:30:41,359
basically two cases that's the case

00:30:37,970 --> 00:30:45,230
where you are decorating a class and in

00:30:41,359 --> 00:30:47,269
that case the decorator is a simple

00:30:45,230 --> 00:30:51,950
function that receives the class

00:30:47,269 --> 00:30:54,440
constructor it's argument you could also

00:30:51,950 --> 00:30:58,190
of course decorate a class member in

00:30:54,440 --> 00:31:01,759
which case the arguments for that are

00:30:58,190 --> 00:31:05,419
the prototype the name of the member and

00:31:01,759 --> 00:31:08,419
property descriptor for for the property

00:31:05,419 --> 00:31:09,619
you are you are decorating and and I

00:31:08,419 --> 00:31:13,879
want to show you some concrete examples

00:31:09,619 --> 00:31:17,570
to make that bit clearer I have created

00:31:13,879 --> 00:31:20,630
a little example so you can find all of

00:31:17,570 --> 00:31:26,340
the code on on guitar

00:31:20,630 --> 00:31:30,440
and let's look at the first one so here

00:31:26,340 --> 00:31:34,080
we have a simple ember oh right we just

00:31:30,440 --> 00:31:35,370
load some data from an API endpoint we

00:31:34,080 --> 00:31:36,900
don't care about the details of course

00:31:35,370 --> 00:31:39,120
and now let's assume we want to

00:31:36,900 --> 00:31:41,279
benchmark that right we want to like

00:31:39,120 --> 00:31:45,350
have something in place that allows us

00:31:41,279 --> 00:31:48,120
to benchmark the execution time and

00:31:45,350 --> 00:31:51,720
maybe we report it somewhere or whatever

00:31:48,120 --> 00:31:53,730
of course we don't want to sort of have

00:31:51,720 --> 00:31:57,529
all of the benchmarking code as such in

00:31:53,730 --> 00:32:00,029
the Rob right we want to hide that

00:31:57,529 --> 00:32:01,860
because it's not relevant to the

00:32:00,029 --> 00:32:03,809
application really all right let's say

00:32:01,860 --> 00:32:07,649
we want to like make a benchmarking

00:32:03,809 --> 00:32:10,140
add-on or whatever so a good way to do

00:32:07,649 --> 00:32:12,120
that of course is to use decorator as

00:32:10,140 --> 00:32:15,179
we're doing here and which is importing

00:32:12,120 --> 00:32:17,399
that as any other thing sort of in

00:32:15,179 --> 00:32:22,549
JavaScript and then we're decorating the

00:32:17,399 --> 00:32:25,679
model method and as I said before the

00:32:22,549 --> 00:32:27,809
decorate using the stage one proposal to

00:32:25,679 --> 00:32:32,309
decorate is just a function that takes

00:32:27,809 --> 00:32:34,529
the the prototype the property name and

00:32:32,309 --> 00:32:36,809
the property descriptor for the property

00:32:34,529 --> 00:32:38,659
we're decorating as arguments and what

00:32:36,809 --> 00:32:42,480
we're doing here is we're simply

00:32:38,659 --> 00:32:44,220
remembering the original value of the

00:32:42,480 --> 00:32:46,169
property descriptor which is the

00:32:44,220 --> 00:32:48,510
original implementation of that method

00:32:46,169 --> 00:32:53,669
and then we replace it with a wrapper

00:32:48,510 --> 00:32:57,149
right and here what we're doing is we

00:32:53,669 --> 00:32:59,520
stop the time when we start execution

00:32:57,149 --> 00:33:01,529
then we called the original method we

00:32:59,520 --> 00:33:03,450
stop the time when that ends and we lock

00:33:01,529 --> 00:33:05,490
that to the console in reality you might

00:33:03,450 --> 00:33:09,750
be logging into some sort of API or

00:33:05,490 --> 00:33:11,760
whatever and then we return the result

00:33:09,750 --> 00:33:16,350
that we got from the original method all

00:33:11,760 --> 00:33:18,929
right so we do not we do not change the

00:33:16,350 --> 00:33:22,590
original method we also don't change the

00:33:18,929 --> 00:33:25,950
signature of the method because the

00:33:22,590 --> 00:33:27,929
method that we are replacing the

00:33:25,950 --> 00:33:30,690
original one has the same signature

00:33:27,929 --> 00:33:32,760
right we're just adding our stuff sort

00:33:30,690 --> 00:33:36,810
of before and after

00:33:32,760 --> 00:33:38,730
original method and that also means of

00:33:36,810 --> 00:33:41,070
course that the original modern method

00:33:38,730 --> 00:33:43,620
doesn't even have to know that it is

00:33:41,070 --> 00:33:45,540
being benchmark there is like grep with

00:33:43,620 --> 00:33:49,850
something else which is the point of

00:33:45,540 --> 00:33:53,100
decorate of course another example is

00:33:49,850 --> 00:33:55,350
this one here so let's assume besides

00:33:53,100 --> 00:33:59,700
benchmarking the modern method we also

00:33:55,350 --> 00:34:02,550
want to require users to be logged in to

00:33:59,700 --> 00:34:05,640
have access to that role at all and by

00:34:02,550 --> 00:34:09,870
the way this is a sneak preview

00:34:05,640 --> 00:34:12,000
incentive of what and a version of Emma

00:34:09,870 --> 00:34:14,580
simple earth which we had simple apps

00:34:12,000 --> 00:34:18,080
maintained without mix-ins can't look

00:34:14,580 --> 00:34:21,210
like right you can use mix-ins with

00:34:18,080 --> 00:34:24,240
native classes like relatively easily in

00:34:21,210 --> 00:34:28,470
but it's not really it's not really

00:34:24,240 --> 00:34:30,659
great right so in the current version of

00:34:28,470 --> 00:34:33,000
Emma's employee but just mix and the

00:34:30,659 --> 00:34:36,990
authenticated route mix sent into this

00:34:33,000 --> 00:34:39,270
route that you're defining here but with

00:34:36,990 --> 00:34:42,540
a decorator it's even a bit nicer and

00:34:39,270 --> 00:34:45,510
sort of has a has more modern look as

00:34:42,540 --> 00:34:48,090
well so what we do here is we just

00:34:45,510 --> 00:34:53,639
import the authenticated decorator and

00:34:48,090 --> 00:34:55,440
apply it to the rod class right and

00:34:53,639 --> 00:35:00,360
again the decorator is a simple function

00:34:55,440 --> 00:35:04,380
that takes the class constructor as an

00:35:00,360 --> 00:35:10,140
argument and we do a similar thing here

00:35:04,380 --> 00:35:12,570
too to what we did before we we remember

00:35:10,140 --> 00:35:16,140
sort of the original implementation of

00:35:12,570 --> 00:35:18,900
the classes before model method and then

00:35:16,140 --> 00:35:21,390
we replace it with our own method and

00:35:18,900 --> 00:35:25,830
what we do in that method is we get a

00:35:21,390 --> 00:35:27,630
session or the session service we check

00:35:25,830 --> 00:35:29,640
whether the user is logged in if it's

00:35:27,630 --> 00:35:32,310
not the case we just transition them

00:35:29,640 --> 00:35:33,900
somewhere else in this case you to index

00:35:32,310 --> 00:35:36,930
would probably make more sense to

00:35:33,900 --> 00:35:38,880
transition them to the login round and

00:35:36,930 --> 00:35:42,000
if they are logged in and there's an

00:35:38,880 --> 00:35:45,360
original implementation of before more

00:35:42,000 --> 00:35:46,619
we just call that alright so again we

00:35:45,360 --> 00:35:54,150
are adding

00:35:46,619 --> 00:35:57,610
so relatively complex logic with a very

00:35:54,150 --> 00:35:59,080
simple mechanism and we are hiding all

00:35:57,610 --> 00:36:03,850
of the details we don't change the

00:35:59,080 --> 00:36:13,660
origin before method so I think this is

00:36:03,850 --> 00:36:16,560
a very nice example for how decorators

00:36:13,660 --> 00:36:20,290
are actually a pretty good way of making

00:36:16,560 --> 00:36:23,890
making functionality in add-ons

00:36:20,290 --> 00:36:26,170
available for applications and obviously

00:36:23,890 --> 00:36:29,320
those examples are sort of made up they

00:36:26,170 --> 00:36:33,130
don't really have any sort of real value

00:36:29,320 --> 00:36:35,980
it's and it's just for for illustration

00:36:33,130 --> 00:36:39,820
purposes here so I also want to look at

00:36:35,980 --> 00:36:43,630
two examples from M by itself and if we

00:36:39,820 --> 00:36:46,619
look at this this piece of code here

00:36:43,630 --> 00:36:50,260
from previously mmm-hmm

00:36:46,619 --> 00:36:53,100
again with component that has a tract

00:36:50,260 --> 00:36:55,930
property called count and then two

00:36:53,100 --> 00:36:58,180
methods that we decorate with the action

00:36:55,930 --> 00:37:02,920
decorator so we can actually call them

00:36:58,180 --> 00:37:05,920
as actions from the template so how's

00:37:02,920 --> 00:37:12,450
this work and first of all let's look at

00:37:05,920 --> 00:37:17,560
the direct decorator and this is not

00:37:12,450 --> 00:37:19,690
really the the code from the climber

00:37:17,560 --> 00:37:24,040
code base it's sort of the essence of

00:37:19,690 --> 00:37:30,490
the code right but here you see that we

00:37:24,040 --> 00:37:33,580
have a function that takes the the

00:37:30,490 --> 00:37:36,030
prototype the property name and the

00:37:33,580 --> 00:37:38,820
property descriptor as arguments right

00:37:36,030 --> 00:37:42,430
because it's a a stage one decorator

00:37:38,820 --> 00:37:45,100
applied to a class member and what it

00:37:42,430 --> 00:37:48,510
does is a very similar thing to what we

00:37:45,100 --> 00:37:52,930
saw before it replaces the original

00:37:48,510 --> 00:37:55,930
property with in this case here a a

00:37:52,930 --> 00:37:59,510
getter and a setter we can ignore the

00:37:55,930 --> 00:38:02,350
getter that's not so interesting

00:37:59,510 --> 00:38:07,280
the thing of course about computer about

00:38:02,350 --> 00:38:10,610
track properties is that whenever a

00:38:07,280 --> 00:38:14,420
correct property is modified then the

00:38:10,610 --> 00:38:17,680
template rear Enders right and you see

00:38:14,420 --> 00:38:24,500
how that works here in the setter where

00:38:17,680 --> 00:38:27,380
whenever the the property is said the

00:38:24,500 --> 00:38:29,510
property to change call back will be

00:38:27,380 --> 00:38:32,800
called which is sort of an internal call

00:38:29,510 --> 00:38:35,210
back in glimmer which which sort of

00:38:32,800 --> 00:38:38,680
triggers re-render right so that is

00:38:35,210 --> 00:38:42,170
basically how the tracked decorator in

00:38:38,680 --> 00:38:44,840
inside of TMR works and it just replaces

00:38:42,170 --> 00:38:46,730
your original property with sort of a

00:38:44,840 --> 00:38:49,000
wrap-up property that will make sure

00:38:46,730 --> 00:38:52,820
that whenever the property sets and

00:38:49,000 --> 00:38:53,360
internal call backs sort of in glimmers

00:38:52,820 --> 00:38:58,640
called

00:38:53,360 --> 00:39:02,630
which will then trigger a rerun up and

00:38:58,640 --> 00:39:05,170
that's next let's look at action and as

00:39:02,630 --> 00:39:12,590
you all know the main thing about

00:39:05,170 --> 00:39:15,020
actions is that they are closures that

00:39:12,590 --> 00:39:16,730
are already sort of pre bound to the

00:39:15,020 --> 00:39:20,420
correct context right so you can just

00:39:16,730 --> 00:39:22,940
call them as a function and they will be

00:39:20,420 --> 00:39:26,060
running with correct this binding so

00:39:22,940 --> 00:39:27,830
right so basically besides a bunch of

00:39:26,060 --> 00:39:30,980
other things like you see the dotted

00:39:27,830 --> 00:39:33,260
lines here basically are like relatively

00:39:30,980 --> 00:39:35,900
big parts of extra code that I left out

00:39:33,260 --> 00:39:38,750
here but sort of one of the main things

00:39:35,900 --> 00:39:42,560
where the action decorator does is it

00:39:38,750 --> 00:39:47,330
just it binds the method you're

00:39:42,560 --> 00:39:50,810
decorating and assigns it to a a hash of

00:39:47,330 --> 00:39:54,500
actions right and that allows you then

00:39:50,810 --> 00:40:01,150
to use like like the method as an action

00:39:54,500 --> 00:40:04,580
from the template so this is decorators

00:40:01,150 --> 00:40:07,670
in ember they're a great way for

00:40:04,580 --> 00:40:10,000
abstracting logic that is known a sensor

00:40:07,670 --> 00:40:13,040
to your application but that is maybe

00:40:10,000 --> 00:40:15,680
only a sensor for the framework or

00:40:13,040 --> 00:40:18,920
only essential for some other system

00:40:15,680 --> 00:40:20,750
sort of you're using but there's no

00:40:18,920 --> 00:40:25,760
stable spec which means you don't want

00:40:20,750 --> 00:40:28,120
to bright you unless you have lots of

00:40:25,760 --> 00:40:33,110
time and lots of willingness sort of to

00:40:28,120 --> 00:40:35,120
to potentially rewrite lots of the

00:40:33,110 --> 00:40:40,070
internals of the decorators your your

00:40:35,120 --> 00:40:42,260
writing and that's all that I thanks

00:40:40,070 --> 00:40:44,840
unfortunately I I can take questions

00:40:42,260 --> 00:40:47,030
unfortunately I can also not talk to

00:40:44,840 --> 00:40:49,760
people sort of after the talk or in

00:40:47,030 --> 00:40:53,480
breaks or whatever but we repeat all of

00:40:49,760 --> 00:40:56,390
that I guess next the important or and

00:40:53,480 --> 00:40:58,810
ember fest and Europe this year thank

00:40:56,390 --> 00:40:58,810

YouTube URL: https://www.youtube.com/watch?v=E_grLMx7q6Q


