Title: Virtual EmberConf 2020: An Ember Dev's Guide to CSS Grid by James Steinbach
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	An Ember Dev's Guide to CSS Grid by James Steinbach

There's plenty of buzz about CSS Grid, but from a distance, it can seem intimidating - especially for developers who don't often write CSS. Grid feels daunting for good reason: the Grid layout module added over 30 new properties, values, and units to CSS!

While all of those additions are useful, we can optimize our learning: in this talk, we'll learn the 8 new pieces of Grid spec the will enable us up to build the vast majority of the layouts we'll use in real life! Around these 8 details, we'll start with a brief tour of CSS layout history, and finish with some practical Grid ProTips.
Captions: 
	00:00:04,420 --> 00:00:26,340
[Music]

00:00:23,300 --> 00:00:27,539
hey there I'm Jim Steinbach and I'm

00:00:26,340 --> 00:00:30,180
really excited to be speaking with you

00:00:27,539 --> 00:00:33,870
today about an ember nose guide to CSS

00:00:30,180 --> 00:00:38,579
grid CSS grid is a really awesome cool

00:00:33,870 --> 00:00:40,110
and powerful block of CSS may give us a

00:00:38,579 --> 00:00:43,470
lot of powerful tools that we've never

00:00:40,110 --> 00:00:45,720
had in any CSS layout method until now

00:00:43,470 --> 00:00:49,500
this combination has not existed until

00:00:45,720 --> 00:00:51,210
today and by today I mean 2017 and all

00:00:49,500 --> 00:00:54,449
the major browsers shipped full grid

00:00:51,210 --> 00:00:57,149
support grid gives us a responsive CSS

00:00:54,449 --> 00:00:59,460
only layout method it only needs grid

00:00:57,149 --> 00:01:01,530
Styles floats clear fixes don't need

00:00:59,460 --> 00:01:04,920
that inline block whitespace problems

00:01:01,530 --> 00:01:07,619
don't to hack those only grid styles it

00:01:04,920 --> 00:01:10,110
allows precise control of columns rows

00:01:07,619 --> 00:01:12,800
and gaps in our grid and allows us to

00:01:10,110 --> 00:01:16,410
position children anywhere we need to

00:01:12,800 --> 00:01:18,270
however as a Spider Man said with great

00:01:16,410 --> 00:01:19,500
power comes great responsibility with

00:01:18,270 --> 00:01:22,020
grid live great power comes great

00:01:19,500 --> 00:01:23,820
complexity and this slide is full of

00:01:22,020 --> 00:01:24,750
little words not because I want you to

00:01:23,820 --> 00:01:26,520
read them all but I'm not very

00:01:24,750 --> 00:01:27,660
thoughtful about legibility no because I

00:01:26,520 --> 00:01:30,780
don't need you to read them all I just

00:01:27,660 --> 00:01:33,410
want us to collectively feel the weight

00:01:30,780 --> 00:01:35,610
of this wall of text right it's a lot

00:01:33,410 --> 00:01:37,349
and especially if you're not a CSS

00:01:35,610 --> 00:01:38,759
specialist or expert if your day to day

00:01:37,349 --> 00:01:41,069
is consumed with a lot of normal

00:01:38,759 --> 00:01:44,640
JavaScript things working on frameworks

00:01:41,069 --> 00:01:46,009
release updates for ember refactoring a

00:01:44,640 --> 00:01:48,300
bunch of components to use glimmer

00:01:46,009 --> 00:01:49,739
getting all octane o fide in your

00:01:48,300 --> 00:01:51,660
projects a great great Greek are great

00:01:49,739 --> 00:01:54,270
you don't have time probably to focus on

00:01:51,660 --> 00:01:55,979
30 new CSS properties and not all of

00:01:54,270 --> 00:01:57,060
them are new some are from flexbox but

00:01:55,979 --> 00:01:57,709
if you've got sharp eyes and you're

00:01:57,060 --> 00:02:00,390
paying attention

00:01:57,709 --> 00:02:01,920
the flexbox properties are all the same

00:02:00,390 --> 00:02:04,110
ones that you always have to look up on

00:02:01,920 --> 00:02:05,910
CSS tricks every time with that cool

00:02:04,110 --> 00:02:08,550
little visualization they've got

00:02:05,910 --> 00:02:11,430
bookmark there it's not the easy flex

00:02:08,550 --> 00:02:12,810
box it's the tricky ones so this is like

00:02:11,430 --> 00:02:14,040
trying to drive to the horizon down this

00:02:12,810 --> 00:02:15,510
road and we're not going to do that I

00:02:14,040 --> 00:02:17,430
want to get to the end of the road but I

00:02:15,510 --> 00:02:19,290
don't want anybody you know to get

00:02:17,430 --> 00:02:21,629
motion sick so we're gonna trim it down

00:02:19,290 --> 00:02:23,040
we're gonna learn seven things today and

00:02:21,629 --> 00:02:25,680
these seven things you see on your

00:02:23,040 --> 00:02:27,720
screen now are going to give us the vast

00:02:25,680 --> 00:02:29,970
majority of the power we need and I'm

00:02:27,720 --> 00:02:33,060
gonna make a big promise to build almost

00:02:29,970 --> 00:02:34,410
any grid you need in real life that's a

00:02:33,060 --> 00:02:34,950
big promise but I think it's gonna hold

00:02:34,410 --> 00:02:37,140
true

00:02:34,950 --> 00:02:40,890
so let's look at this optimized Road

00:02:37,140 --> 00:02:43,050
let's hit the horizon on that path so

00:02:40,890 --> 00:02:46,260
without further ado the short happy path

00:02:43,050 --> 00:02:47,580
to grid well look at code first and then

00:02:46,260 --> 00:02:50,340
we'll break it down and learn it all

00:02:47,580 --> 00:02:52,830
these lines I mean display grid is a

00:02:50,340 --> 00:02:54,810
starting point just like display flex

00:02:52,830 --> 00:02:57,180
it's the right way to tell the browser

00:02:54,810 --> 00:03:00,599
hey use grid layout algorithm on this

00:02:57,180 --> 00:03:02,970
component element to lay out all of its

00:03:00,599 --> 00:03:05,160
children not grandchildren just

00:03:02,970 --> 00:03:06,690
immediate children we're gonna provide

00:03:05,160 --> 00:03:08,450
some measurements for the columns and

00:03:06,690 --> 00:03:10,680
I'll show you what F R means in a moment

00:03:08,450 --> 00:03:12,780
we're gonna define some areas we're

00:03:10,680 --> 00:03:15,060
gonna name the spaces where we can put

00:03:12,780 --> 00:03:17,430
an element there are four names header

00:03:15,060 --> 00:03:18,510
content sidebar and footer remember

00:03:17,430 --> 00:03:20,220
those because we're gonna see them on

00:03:18,510 --> 00:03:23,010
the very next slide and we're gonna put

00:03:20,220 --> 00:03:24,810
gaps between rows and columns and you

00:03:23,010 --> 00:03:26,549
think that's a lot of complexity on the

00:03:24,810 --> 00:03:29,790
parent wanted to do the children

00:03:26,549 --> 00:03:31,170
actually grid moosa' complexity with CSS

00:03:29,790 --> 00:03:33,120
grid all the measurements all the

00:03:31,170 --> 00:03:35,099
layouts all the rules all the

00:03:33,120 --> 00:03:37,110
constraints live on the parent and all

00:03:35,099 --> 00:03:39,480
the children need to do is get told

00:03:37,110 --> 00:03:41,639
which area to fit themselves in and all

00:03:39,480 --> 00:03:43,650
the words in grid area here are part of

00:03:41,639 --> 00:03:46,889
a grid template areas on the previous

00:03:43,650 --> 00:03:48,810
slide so really powerful stuff you don't

00:03:46,889 --> 00:03:50,489
have to define a ton of math and a ton

00:03:48,810 --> 00:03:52,739
of measurements and a ton of margins and

00:03:50,489 --> 00:03:54,540
percent based width and all that on the

00:03:52,739 --> 00:03:56,880
children we're moving all that

00:03:54,540 --> 00:03:59,370
complexity off of the children onto the

00:03:56,880 --> 00:04:00,870
parent the grid itself which is really

00:03:59,370 --> 00:04:02,609
awesome it makes our code so much

00:04:00,870 --> 00:04:04,350
cleaner because they're not searching

00:04:02,609 --> 00:04:06,060
through three or four different selector

00:04:04,350 --> 00:04:07,799
blocks to find width and measurements

00:04:06,060 --> 00:04:10,709
we're scanning for different selector

00:04:07,799 --> 00:04:12,060
blocks to find a named area all the

00:04:10,709 --> 00:04:14,790
measurements all the complexity is

00:04:12,060 --> 00:04:17,849
defined on the grid itself and children

00:04:14,790 --> 00:04:20,250
just are told where to go a very cool

00:04:17,849 --> 00:04:21,840
method here so that's a look at these

00:04:20,250 --> 00:04:23,270
properties who put into a grid container

00:04:21,840 --> 00:04:25,650
see what we got

00:04:23,270 --> 00:04:27,240
well grid template columns is the first

00:04:25,650 --> 00:04:28,770
thing display grid is a given we've

00:04:27,240 --> 00:04:31,590
already mentioned that but let's look at

00:04:28,770 --> 00:04:34,050
how to measure columns columns set the

00:04:31,590 --> 00:04:36,630
proportions for tracks along the inline

00:04:34,050 --> 00:04:37,830
axis of the grid container and you think

00:04:36,630 --> 00:04:39,450
why wouldn't just say horizontal James

00:04:37,830 --> 00:04:41,669
or just say columns is it too many fancy

00:04:39,450 --> 00:04:43,320
words just say columns I respect that

00:04:41,669 --> 00:04:45,120
and I'll show you in a second why I'm

00:04:43,320 --> 00:04:47,370
calling it an inline axis it's a new

00:04:45,120 --> 00:04:48,390
evolution in CSS then it's actually

00:04:47,370 --> 00:04:51,180
going to be very powerful

00:04:48,390 --> 00:04:52,800
it's widely supported but this gives us

00:04:51,180 --> 00:04:55,080
our column measurements and the value we

00:04:52,800 --> 00:04:58,680
use is any valid length values in a

00:04:55,080 --> 00:05:01,020
space separated series for example you

00:04:58,680 --> 00:05:03,300
can do 30 percent and 150 pixels and 30

00:05:01,020 --> 00:05:05,820
percent and unlike flexbox

00:05:03,300 --> 00:05:07,410
if you don't use up all your grid space

00:05:05,820 --> 00:05:09,570
and need to find your columns grids like

00:05:07,410 --> 00:05:13,380
that's cool I don't mind empty space I'm

00:05:09,570 --> 00:05:15,720
not afraid of the silence flexbox is

00:05:13,380 --> 00:05:18,690
like haha no silence I must stretch

00:05:15,720 --> 00:05:19,980
things unless you tell me not to and so

00:05:18,690 --> 00:05:21,780
grid is different from flexbox in that

00:05:19,980 --> 00:05:25,280
regard your precision stands without

00:05:21,780 --> 00:05:27,570
being artificially stretched or squished

00:05:25,280 --> 00:05:29,760
however if you want to use up your empty

00:05:27,570 --> 00:05:31,560
space fractional units are a really cool

00:05:29,760 --> 00:05:33,900
way to do that we hold our next code

00:05:31,560 --> 00:05:36,930
grid template columns one fraction 12

00:05:33,900 --> 00:05:38,460
m/s 8 m/s in a fraction 12 and 8 are

00:05:36,930 --> 00:05:41,100
kind of fixed measurements the relative

00:05:38,460 --> 00:05:43,440
to the font size but they're fixed in

00:05:41,100 --> 00:05:45,090
that grid and after they're used up grid

00:05:43,440 --> 00:05:48,000
goes okay and the parent is there still

00:05:45,090 --> 00:05:50,370
empty space our 12 and 8 M's leaving

00:05:48,000 --> 00:05:51,630
room cool if I've got a fraction of the

00:05:50,370 --> 00:05:54,120
beginning in a fraction at the end it's

00:05:51,630 --> 00:05:56,460
two fractions I've got to divide all the

00:05:54,120 --> 00:05:59,340
remaining space in I give one out of two

00:05:56,460 --> 00:06:01,530
here and one out of two here or split in

00:05:59,340 --> 00:06:03,840
two halves and what we've got here is a

00:06:01,530 --> 00:06:04,920
self centering layout the 12 m and 8m

00:06:03,840 --> 00:06:06,630
columns are always going to be put

00:06:04,920 --> 00:06:11,250
together centered in the middle of the

00:06:06,630 --> 00:06:12,800
grid pretty cool stuff great template

00:06:11,250 --> 00:06:15,630
rows works essentially the same way but

00:06:12,800 --> 00:06:18,210
whereas columns operate along the inline

00:06:15,630 --> 00:06:19,560
axis rows operate along the block axis

00:06:18,210 --> 00:06:21,720
and again in a second I'll show you why

00:06:19,560 --> 00:06:23,630
I'm saying inline and block and not top

00:06:21,720 --> 00:06:26,790
bottom left right let's kind of words

00:06:23,630 --> 00:06:28,170
same value and look at examples we can

00:06:26,790 --> 00:06:31,230
do a fraction and then two fractions

00:06:28,170 --> 00:06:32,820
here the top row is widen at all enough

00:06:31,230 --> 00:06:37,380
for its content and the second row is

00:06:32,820 --> 00:06:38,940
twice as tall one and two here we've got

00:06:37,380 --> 00:06:41,340
a repeat function which is a cool new

00:06:38,940 --> 00:06:42,900
trick our top row is 50 pixels tall and

00:06:41,340 --> 00:06:45,690
all the rows that follow are a hundred

00:06:42,900 --> 00:06:48,450
pixels tall a neat little way to do

00:06:45,690 --> 00:06:49,650
something like a you know table layout

00:06:48,450 --> 00:06:53,010
if you're building like an editor an

00:06:49,650 --> 00:06:54,600
admin interface for something you're all

00:06:53,010 --> 00:06:56,670
your titles would go in a little 50

00:06:54,600 --> 00:06:58,200
pixels column and then each of your rows

00:06:56,670 --> 00:07:01,230
with a whole bunch more data would be

00:06:58,200 --> 00:07:02,310
taller below it but having shown you

00:07:01,230 --> 00:07:05,310
pixels on the screen

00:07:02,310 --> 00:07:07,800
now turn around and say oh go easy on

00:07:05,310 --> 00:07:09,660
the pixels oh okay so I want to give you

00:07:07,800 --> 00:07:10,980
a warning about fixed heights fixed

00:07:09,660 --> 00:07:13,590
Heights are really easily caused

00:07:10,980 --> 00:07:16,140
overflow if your content is longer than

00:07:13,590 --> 00:07:19,170
whatever 100 pixels makes room for it's

00:07:16,140 --> 00:07:21,780
going to flow through the margin least a

00:07:19,170 --> 00:07:23,610
bad problem flow down into the next row

00:07:21,780 --> 00:07:25,230
not into like the element but like

00:07:23,610 --> 00:07:28,620
covering up or obscuring part of the

00:07:25,230 --> 00:07:30,840
next row next decent dist option worst

00:07:28,620 --> 00:07:32,730
option get covered up by the next row or

00:07:30,840 --> 00:07:36,810
obscured by an overflow hidden property

00:07:32,730 --> 00:07:40,020
on its own row accessibility is not just

00:07:36,810 --> 00:07:42,300
something we do for people who have what

00:07:40,020 --> 00:07:44,520
we perceive from our privileged spot as

00:07:42,300 --> 00:07:46,440
lowered ability ok accessibility is for

00:07:44,520 --> 00:07:49,080
everybody fixed height sun grid rows

00:07:46,440 --> 00:07:51,450
creates accessibility problems for users

00:07:49,080 --> 00:07:54,150
of 20/20 vision it's not a matter of

00:07:51,450 --> 00:07:56,040
limitation on them if we program things

00:07:54,150 --> 00:07:58,410
wrong we create legibility and

00:07:56,040 --> 00:08:01,050
accessibility problems so accessibility

00:07:58,410 --> 00:08:02,970
is for everyone not in us-versus-them

00:08:01,050 --> 00:08:05,130
kindness of our heart aren't we special

00:08:02,970 --> 00:08:08,810
give ourselves a star proposition it's

00:08:05,130 --> 00:08:11,220
just building the web for people ok

00:08:08,810 --> 00:08:12,870
grid is going to automatically protect

00:08:11,220 --> 00:08:14,610
your content unless you put a fixed

00:08:12,870 --> 00:08:18,180
height on that's an awesome part of the

00:08:14,610 --> 00:08:19,920
web so use flexible values for your row

00:08:18,180 --> 00:08:21,630
Heights like Auto and min content and

00:08:19,920 --> 00:08:25,890
max content fractional units are pretty

00:08:21,630 --> 00:08:26,550
decent to logical properties quick

00:08:25,890 --> 00:08:28,730
sidebar

00:08:26,550 --> 00:08:30,810
the reason I've said inline and block is

00:08:28,730 --> 00:08:32,760
because we've got a new way of thinking

00:08:30,810 --> 00:08:34,920
about where things are located and what

00:08:32,760 --> 00:08:37,500
directions things go in CSS this is an

00:08:34,920 --> 00:08:38,790
evolution of the spec for a long time

00:08:37,500 --> 00:08:41,520
everything we've positioned we've

00:08:38,790 --> 00:08:43,140
described with physical properties these

00:08:41,520 --> 00:08:47,340
are related to the viewport the device

00:08:43,140 --> 00:08:49,230
itself top right bottom left those break

00:08:47,340 --> 00:08:50,610
down really quickly right what if you

00:08:49,230 --> 00:08:52,260
build a website and you start

00:08:50,610 --> 00:08:53,670
translating it and you cover most of

00:08:52,260 --> 00:08:55,230
Europe with your languages like French

00:08:53,670 --> 00:08:57,000
and German and Dutch and then the

00:08:55,230 --> 00:08:58,620
handful of others and it's all

00:08:57,000 --> 00:08:59,700
left-to-right you got English and all

00:08:58,620 --> 00:09:02,820
those European languages and you're

00:08:59,700 --> 00:09:04,440
pretty covered right and then marketing

00:09:02,820 --> 00:09:07,110
and visited aside hey we're expanding

00:09:04,440 --> 00:09:08,700
our market into the Middle East as well

00:09:07,110 --> 00:09:10,740
and we're going to have users who read

00:09:08,700 --> 00:09:12,690
in Hebrew and Arabic and now we need to

00:09:10,740 --> 00:09:14,940
be able to support the same site but our

00:09:12,690 --> 00:09:16,140
layout has to be right-to-left well

00:09:14,940 --> 00:09:17,940
suddenly our physical prop

00:09:16,140 --> 00:09:19,650
any words right and left no longer make

00:09:17,940 --> 00:09:21,570
sense they no longer accurately describe

00:09:19,650 --> 00:09:23,400
where content is and we have to find a

00:09:21,570 --> 00:09:24,660
way to reverse all our margin rights and

00:09:23,400 --> 00:09:26,540
border rights and all those things

00:09:24,660 --> 00:09:29,190
because we need them all the left now

00:09:26,540 --> 00:09:31,500
one more complexity not all languages

00:09:29,190 --> 00:09:33,150
are horizontal okay all of our

00:09:31,500 --> 00:09:34,920
left-to-right languages which probably

00:09:33,150 --> 00:09:39,900
cover the majority of people in the room

00:09:34,920 --> 00:09:42,030
room today all of our right-to-left

00:09:39,900 --> 00:09:45,090
languages as well it's all horizontal so

00:09:42,030 --> 00:09:47,580
inline is a start to end of a line of

00:09:45,090 --> 00:09:49,140
text inside of an element that's

00:09:47,580 --> 00:09:51,360
horizontal those are horizontal

00:09:49,140 --> 00:09:53,130
languages and block is a start to the

00:09:51,360 --> 00:09:55,950
end of a block of text like a full

00:09:53,130 --> 00:09:57,300
paragraph worth if you decide to

00:09:55,950 --> 00:09:59,220
continue expanding your market in this

00:09:57,300 --> 00:10:01,500
hypothetical app we're talking about and

00:09:59,220 --> 00:10:04,230
now you're bringing in farther east

00:10:01,500 --> 00:10:06,390
countries and you're expanding all the

00:10:04,230 --> 00:10:08,010
way out into China and Korea and Japan

00:10:06,390 --> 00:10:10,110
and you've introduced a handful of

00:10:08,010 --> 00:10:12,900
dialects now that have column text

00:10:10,110 --> 00:10:14,610
they're writing mode is a vertical now

00:10:12,900 --> 00:10:16,890
the start to the end of a line of text

00:10:14,610 --> 00:10:19,200
is a vertical line not a horizontal one

00:10:16,890 --> 00:10:21,330
and the start to the end of a block of

00:10:19,200 --> 00:10:25,260
text is a horizontal line not a vertical

00:10:21,330 --> 00:10:26,850
one grid automatically responds in this

00:10:25,260 --> 00:10:28,740
in the slides that follow I am NOT going

00:10:26,850 --> 00:10:30,690
to change the CSS at all I promise I'm

00:10:28,740 --> 00:10:33,090
only going to put different attributes

00:10:30,690 --> 00:10:35,340
or one case a CSS property on a wrapper

00:10:33,090 --> 00:10:39,060
element I'm not going to change the grid

00:10:35,340 --> 00:10:42,000
code at all here's direction left to

00:10:39,060 --> 00:10:43,440
right here's direction right to left I

00:10:42,000 --> 00:10:46,710
didn't change the grid code at all it

00:10:43,440 --> 00:10:48,770
automatically turned it all around whoa

00:10:46,710 --> 00:10:52,470
how sweet right-to-left support for free

00:10:48,770 --> 00:10:54,360
yes and now one more writing mode

00:10:52,470 --> 00:10:56,940
vertical left right you can see the

00:10:54,360 --> 00:10:58,140
browser rotated the text automatically

00:10:56,940 --> 00:11:01,890
even though the characters are still

00:10:58,140 --> 00:11:04,370
English characters Latin characters it

00:11:01,890 --> 00:11:07,500
rotated the text and the entire layout I

00:11:04,370 --> 00:11:10,190
did not change the grid CSS at all I

00:11:07,500 --> 00:11:13,650
just put this property on a wrapper

00:11:10,190 --> 00:11:16,350
amazing that's all we did grid gives you

00:11:13,650 --> 00:11:19,500
so much responsiveness for free this is

00:11:16,350 --> 00:11:22,490
amazing so we've made rows we've made

00:11:19,500 --> 00:11:25,710
columns back to grid let's name those

00:11:22,490 --> 00:11:27,090
intersections when we use whitespace

00:11:25,710 --> 00:11:28,830
that's cool and I'll show you why

00:11:27,090 --> 00:11:30,180
whitespace is cool on the next slide and

00:11:28,830 --> 00:11:31,830
if you need to create a

00:11:30,180 --> 00:11:34,230
blank cell in a grid template you can

00:11:31,830 --> 00:11:36,290
use a period for that so here we are

00:11:34,230 --> 00:11:40,050
same thing we saw back at the beginning

00:11:36,290 --> 00:11:42,930
header is one grid area that spans four

00:11:40,050 --> 00:11:45,839
columns and fills one row we've got a

00:11:42,930 --> 00:11:48,089
gap and a gap in between them body and

00:11:45,839 --> 00:11:50,459
sidebar and then we've got footer much

00:11:48,089 --> 00:11:51,870
like headers spanning four rows one area

00:11:50,459 --> 00:11:53,700
though one element will be assigned to

00:11:51,870 --> 00:11:56,370
footer one element assigned to header

00:11:53,700 --> 00:11:58,350
and notice what I said about whitespace

00:11:56,370 --> 00:12:00,089
I've got a couple spaces after that

00:11:58,350 --> 00:12:01,529
third header in the third footer a few

00:12:00,089 --> 00:12:03,060
extra spaces after body and a whole

00:12:01,529 --> 00:12:06,540
bunch of extra spaces after each period

00:12:03,060 --> 00:12:07,830
why did I do that it's cool that grid

00:12:06,540 --> 00:12:10,350
doesn't mind how many spaces you use

00:12:07,830 --> 00:12:13,140
because you cannot just program your

00:12:10,350 --> 00:12:15,870
grid you can draw your grid directly in

00:12:13,140 --> 00:12:19,620
grid template areas and the outcome will

00:12:15,870 --> 00:12:21,420
look like the CSS that's powerful if you

00:12:19,620 --> 00:12:23,730
are a visual learner or identifier of

00:12:21,420 --> 00:12:26,339
things this is gonna rock your world

00:12:23,730 --> 00:12:28,080
this is super duper look at your CSS

00:12:26,339 --> 00:12:30,660
that's what the page is gonna look like

00:12:28,080 --> 00:12:32,670
it's right there love it

00:12:30,660 --> 00:12:34,709
you can go a little more a skier Edition

00:12:32,670 --> 00:12:36,209
use emoji but I don't recommend that

00:12:34,709 --> 00:12:37,650
it's harder to read you run into

00:12:36,209 --> 00:12:40,170
problems with contrast and most text

00:12:37,650 --> 00:12:42,660
editors between light and dark mode and

00:12:40,170 --> 00:12:44,010
your you know zero or sync mono spaced

00:12:42,660 --> 00:12:46,140
fonts don't apply anymore with emojis

00:12:44,010 --> 00:12:47,339
and you might even run into a browser

00:12:46,140 --> 00:12:50,910
implementation issue with Unicode

00:12:47,339 --> 00:12:53,220
mapping but couple limitations on grid

00:12:50,910 --> 00:12:54,089
template areas a named area can only be

00:12:53,220 --> 00:12:56,100
one rectangle

00:12:54,089 --> 00:12:57,900
it can't be an l-shape it can't be like

00:12:56,100 --> 00:13:00,450
a stair-step kind of try to make a fake

00:12:57,900 --> 00:13:02,190
diagonal all the cells have to be

00:13:00,450 --> 00:13:03,690
adjacent you can't start a named area

00:13:02,190 --> 00:13:05,940
here continue it here and then put a

00:13:03,690 --> 00:13:07,350
little more down here and expect content

00:13:05,940 --> 00:13:09,660
to kind of flow between them and those

00:13:07,350 --> 00:13:11,430
breaks what you're describing is a whole

00:13:09,660 --> 00:13:13,380
different CSS spec it's real though it's

00:13:11,430 --> 00:13:14,940
called CSS regions and it doesn't exist

00:13:13,380 --> 00:13:15,930
and browsers yet it's been under

00:13:14,940 --> 00:13:19,290
discussion forever

00:13:15,930 --> 00:13:21,180
yeah sorry and grid template areas their

00:13:19,290 --> 00:13:24,209
names have to be strings that start with

00:13:21,180 --> 00:13:26,160
letters not numbers if you start a grid

00:13:24,209 --> 00:13:30,149
template area name with a number like 1a

00:13:26,160 --> 00:13:32,010
that's not gonna work a 1 is good and

00:13:30,149 --> 00:13:34,020
when we look at the children we'll see

00:13:32,010 --> 00:13:36,600
why we can't use a number for a named

00:13:34,020 --> 00:13:39,959
area as the first character but for now

00:13:36,600 --> 00:13:42,480
just trust me don't do it okay I'll

00:13:39,959 --> 00:13:43,740
bonus sorry I said there are 7 here's

00:13:42,480 --> 00:13:45,750
this here's a bonus great time

00:13:43,740 --> 00:13:47,010
it's just a shorthand though so it's

00:13:45,750 --> 00:13:48,840
essentially summing up what we've

00:13:47,010 --> 00:13:50,310
already learned you can put grid

00:13:48,840 --> 00:13:51,600
template columns grid template rows and

00:13:50,310 --> 00:13:54,030
grid template areas those three

00:13:51,600 --> 00:13:56,010
properties all in one shorthand it's

00:13:54,030 --> 00:13:57,150
kind of like background containing

00:13:56,010 --> 00:13:58,530
background color background image

00:13:57,150 --> 00:14:01,320
background position backer and size and

00:13:58,530 --> 00:14:03,750
a couple others all three properties you

00:14:01,320 --> 00:14:05,520
can put into one property and now what

00:14:03,750 --> 00:14:08,400
have we done this is amazing this I just

00:14:05,520 --> 00:14:11,550
love this so much this is where I start

00:14:08,400 --> 00:14:13,950
when I write CSS grid you can not only

00:14:11,550 --> 00:14:15,320
look at your code and see exactly how

00:14:13,950 --> 00:14:16,590
your layout is going to turn out

00:14:15,320 --> 00:14:18,360
disclaimer

00:14:16,590 --> 00:14:20,250
your your editor is not going to

00:14:18,360 --> 00:14:21,840
highlight with orange and blue that

00:14:20,250 --> 00:14:23,760
would be a really cool vs code extension

00:14:21,840 --> 00:14:26,250
if somebody could make it though I'll be

00:14:23,760 --> 00:14:29,340
really nifty your code editor is not

00:14:26,250 --> 00:14:31,320
going to highlight like that but not

00:14:29,340 --> 00:14:32,700
only can you visualize the entire grid

00:14:31,320 --> 00:14:35,300
layout that the browser is going to

00:14:32,700 --> 00:14:38,970
render every row ends with its height

00:14:35,300 --> 00:14:40,980
every column ends with its with all the

00:14:38,970 --> 00:14:43,080
relevant information two rows columns

00:14:40,980 --> 00:14:48,150
and their proportions is right there in

00:14:43,080 --> 00:14:50,130
one chunk of CSS that is amazing that is

00:14:48,150 --> 00:14:53,220
boiling down a lot of complicated stuff

00:14:50,130 --> 00:14:56,250
to a very readable readable identifiable

00:14:53,220 --> 00:14:58,290
manageable chunk of CSS that visually

00:14:56,250 --> 00:15:01,590
matches the end result on your browser

00:14:58,290 --> 00:15:03,510
window I love this so much I'm so

00:15:01,590 --> 00:15:06,980
excited this is how I love grid this is

00:15:03,510 --> 00:15:10,050
what I do and you can make gaps too

00:15:06,980 --> 00:15:12,360
gaps are a space that exists between

00:15:10,050 --> 00:15:13,710
columns or between rows used to be

00:15:12,360 --> 00:15:15,750
called grid gap you might remember that

00:15:13,710 --> 00:15:18,870
if you've seen tutorials for a year or

00:15:15,750 --> 00:15:20,880
two but grid gap has been deprecated and

00:15:18,870 --> 00:15:23,070
air quotes as a name at CSS nothing ever

00:15:20,880 --> 00:15:25,140
gets deprecated for real but it's now

00:15:23,070 --> 00:15:26,820
just called gap because a flexbox

00:15:25,140 --> 00:15:29,070
is going to be supporting gap between

00:15:26,820 --> 00:15:31,140
children Firefox already has that

00:15:29,070 --> 00:15:34,410
support chromium and the WebKit are

00:15:31,140 --> 00:15:36,270
hopefully hopefully not far behind it's

00:15:34,410 --> 00:15:39,300
a shorthand for the row gap 20 pixels

00:15:36,270 --> 00:15:41,670
and then the column gap 30 pixels but

00:15:39,300 --> 00:15:43,440
like margin it's also a self expanding

00:15:41,670 --> 00:15:45,570
shorthand so if you just say gap 10

00:15:43,440 --> 00:15:48,570
pixels you'll get 10 between rows and

00:15:45,570 --> 00:15:49,980
between columns that's it

00:15:48,570 --> 00:15:52,400
that's all the new properties you need

00:15:49,980 --> 00:15:55,020
to know to build a grid container I

00:15:52,400 --> 00:15:56,460
showed you a couple new values on the

00:15:55,020 --> 00:15:57,180
way in those slides so let's dig into

00:15:56,460 --> 00:16:01,050
those two now

00:15:57,180 --> 00:16:04,710
fraction and repeat fraction is one

00:16:01,050 --> 00:16:06,510
fraction of the grids free space when is

00:16:04,710 --> 00:16:07,880
free space it's whatever pixels are left

00:16:06,510 --> 00:16:10,500
after all that non fractional units

00:16:07,880 --> 00:16:12,840
column measurements or row measurements

00:16:10,500 --> 00:16:14,490
have been used up so after you calculate

00:16:12,840 --> 00:16:17,370
your gaps after you calculate all of

00:16:14,490 --> 00:16:19,250
your pixel and viewport width and m and

00:16:17,370 --> 00:16:21,720
r m and percent based column widths

00:16:19,250 --> 00:16:24,420
anything left in the parent grid is

00:16:21,720 --> 00:16:27,750
available as free space for fractional

00:16:24,420 --> 00:16:29,280
units to divvy up based on the total

00:16:27,750 --> 00:16:31,170
number of fractional units you've put in

00:16:29,280 --> 00:16:33,600
your grid row or a grid template row

00:16:31,170 --> 00:16:34,950
grid tablet column property green is

00:16:33,600 --> 00:16:36,570
going to divide the free space into that

00:16:34,950 --> 00:16:39,510
many units and then portion it out

00:16:36,570 --> 00:16:42,570
appropriately words are great but let's

00:16:39,510 --> 00:16:43,860
look at code instead here's 300 pixels

00:16:42,570 --> 00:16:45,360
in the first column and then one

00:16:43,860 --> 00:16:46,680
fraction it's super greedy it just

00:16:45,360 --> 00:16:49,140
gobbles up the rest of the empty space

00:16:46,680 --> 00:16:51,450
if we put this in a container that was

00:16:49,140 --> 00:16:52,950
only 300 pixels wide one fraction it

00:16:51,450 --> 00:16:56,240
effectively be zero pixels wide because

00:16:52,950 --> 00:16:58,440
there's no pixels left to divvy up

00:16:56,240 --> 00:17:01,080
here's our self centering layout once

00:16:58,440 --> 00:17:03,660
again 12 MS and ATMs or non fractional

00:17:01,080 --> 00:17:05,190
units there they and the gaps are

00:17:03,660 --> 00:17:07,140
divided out first and then everything

00:17:05,190 --> 00:17:09,900
left gets divided into half a chunk here

00:17:07,140 --> 00:17:11,190
and half a chunk there you can even do a

00:17:09,900 --> 00:17:13,380
column layout that's all based on

00:17:11,190 --> 00:17:15,420
fractions here the browser says you've

00:17:13,380 --> 00:17:18,060
given me six units to divide up one plus

00:17:15,420 --> 00:17:19,709
two plus three so all the space is free

00:17:18,060 --> 00:17:21,930
except for a couple gaps I'm going to

00:17:19,709 --> 00:17:24,990
divide the rest of that pixel value into

00:17:21,930 --> 00:17:27,150
six one for the first column two sixths

00:17:24,990 --> 00:17:31,200
for the second column and three sixths

00:17:27,150 --> 00:17:33,480
for the final column a very much simpler

00:17:31,200 --> 00:17:34,740
way I think to program proportional

00:17:33,480 --> 00:17:37,650
grids without having to get into

00:17:34,740 --> 00:17:39,300
percentages and decimals and complicated

00:17:37,650 --> 00:17:43,320
math especially division by three

00:17:39,300 --> 00:17:45,120
related stuff so let's walk through that

00:17:43,320 --> 00:17:47,520
all in one shot let's build a grid from

00:17:45,120 --> 00:17:48,900
scratch here's a blank grid it's got

00:17:47,520 --> 00:17:50,070
four columns all squished together on

00:17:48,900 --> 00:17:52,200
the edges they're just barely wide

00:17:50,070 --> 00:17:54,930
enough to have a little bit of color so

00:17:52,200 --> 00:17:56,400
let's add gaps cool thank you browser

00:17:54,930 --> 00:17:58,800
you put gaps in I love it

00:17:56,400 --> 00:18:01,560
let's give the second and third column

00:17:58,800 --> 00:18:03,630
that our width it's a 50% of the parent

00:18:01,560 --> 00:18:05,840
for the first cup the wider column and

00:18:03,630 --> 00:18:08,730
25% of the parent for the narrow column

00:18:05,840 --> 00:18:10,470
awesome columns one and four still empty

00:18:08,730 --> 00:18:13,380
let's change them from zero

00:18:10,470 --> 00:18:15,720
- one fraction and now the layout self

00:18:13,380 --> 00:18:16,860
centers and we can go ahead and add in

00:18:15,720 --> 00:18:18,929
some rows so we've got a header and a

00:18:16,860 --> 00:18:20,520
footer and this is the the code we've

00:18:18,929 --> 00:18:22,740
been looking at like all day long more

00:18:20,520 --> 00:18:27,120
or less only with some fixed rows just

00:18:22,740 --> 00:18:28,799
to give it space in the demo we've just

00:18:27,120 --> 00:18:30,150
built a non-trivial layout you may say

00:18:28,799 --> 00:18:32,429
this is really simple that's like every

00:18:30,150 --> 00:18:33,690
blog like most WordPress themes I'm

00:18:32,429 --> 00:18:37,620
alright hahaha let's make fun of

00:18:33,690 --> 00:18:39,870
WordPress - no we won't do that but this

00:18:37,620 --> 00:18:41,789
is actually a specific layout from CSS

00:18:39,870 --> 00:18:43,919
lore if you will it's called the holy

00:18:41,789 --> 00:18:47,640
grail of CSS layout and for like a

00:18:43,919 --> 00:18:49,679
decade CSS blogs and tutorials have

00:18:47,640 --> 00:18:51,870
walked through different layout options

00:18:49,679 --> 00:18:53,580
and techniques and said how well can

00:18:51,870 --> 00:18:56,780
that lay on layout technique accomplish

00:18:53,580 --> 00:18:59,610
this thing full width header and footer

00:18:56,780 --> 00:19:01,470
centered layout with a wide content and

00:18:59,610 --> 00:19:03,030
a narrow sidebar and the content in

00:19:01,470 --> 00:19:04,470
sidebar the same height so the

00:19:03,030 --> 00:19:07,470
background colors can extend all the way

00:19:04,470 --> 00:19:09,150
from top to bottom we just learned how

00:19:07,470 --> 00:19:11,250
to do it in grid in about 15 minutes of

00:19:09,150 --> 00:19:15,179
looking at code and thirty seconds of

00:19:11,250 --> 00:19:18,659
walking through an animation I hesitate

00:19:15,179 --> 00:19:20,429
to use the word easy but it would be

00:19:18,659 --> 00:19:24,140
hard to see how grid could make that

00:19:20,429 --> 00:19:27,330
simpler this is very manageable and a

00:19:24,140 --> 00:19:28,919
really powerful thing we can do with not

00:19:27,330 --> 00:19:31,830
a ton of syntax and not a lot of code

00:19:28,919 --> 00:19:33,690
written hell of granite we also saw

00:19:31,830 --> 00:19:35,250
repeat earlier as you might have guessed

00:19:33,690 --> 00:19:35,880
it repeats a certain length certain

00:19:35,250 --> 00:19:38,970
number of times

00:19:35,880 --> 00:19:41,250
so repeat twelve times one fraction and

00:19:38,970 --> 00:19:43,340
wait twelve equal columns let's pretend

00:19:41,250 --> 00:19:45,270
as a twenty pixel gap to is bootstrap

00:19:43,340 --> 00:19:47,250
this is a really neat way you can

00:19:45,270 --> 00:19:53,610
basically migrate grids off of bootstrap

00:19:47,250 --> 00:19:55,260
and into pure CSS if you need to so grid

00:19:53,610 --> 00:19:56,970
child properties everything we've just

00:19:55,260 --> 00:19:58,200
looked at all of those things properties

00:19:56,970 --> 00:19:59,880
and couple values that's all for the

00:19:58,200 --> 00:20:03,210
parent what do we put on the child

00:19:59,880 --> 00:20:06,000
however buckle up I've got a whole slide

00:20:03,210 --> 00:20:08,280
in this section right area that's all

00:20:06,000 --> 00:20:09,870
what value do we use a grid template

00:20:08,280 --> 00:20:13,110
areas name that we already set on the

00:20:09,870 --> 00:20:14,850
parent now here's a quick caveat here's

00:20:13,110 --> 00:20:18,179
why we can't use numbers as the first

00:20:14,850 --> 00:20:19,649
character of a named area grid template

00:20:18,179 --> 00:20:21,990
area accepts a different kind of value

00:20:19,649 --> 00:20:23,510
which is up to four integers separated

00:20:21,990 --> 00:20:25,790
by slashes and the

00:20:23,510 --> 00:20:29,210
our manual row columns start and end

00:20:25,790 --> 00:20:32,030
values if you start a grid area with the

00:20:29,210 --> 00:20:34,670
number two loops browser is gonna be oh

00:20:32,030 --> 00:20:36,830
- are we doing our row start and if you

00:20:34,670 --> 00:20:38,330
do like - - a it will actually say no

00:20:36,830 --> 00:20:40,820
that's actually invalid syntax it needs

00:20:38,330 --> 00:20:42,140
to be a letter prefixed string and you

00:20:40,820 --> 00:20:44,110
can't just say - because the browser is

00:20:42,140 --> 00:20:48,320
gonna go all row start - let's do it man

00:20:44,110 --> 00:20:50,720
so yeah please don't but great area all

00:20:48,320 --> 00:20:52,250
you need and you need a named grid named

00:20:50,720 --> 00:20:54,560
Darius string from your grid template

00:20:52,250 --> 00:20:56,780
areas property now let's all we have to

00:20:54,560 --> 00:20:59,690
do with the children that's all we have

00:20:56,780 --> 00:21:01,910
to do with the children so congrats

00:20:59,690 --> 00:21:03,800
everybody y'all know grid I'm proud of

00:21:01,910 --> 00:21:06,230
you give yourselves a round of applause

00:21:03,800 --> 00:21:08,380
okay it sounds really people just me

00:21:06,230 --> 00:21:10,460
standing in my basement clapping sorry

00:21:08,380 --> 00:21:12,170
but if you're all clapping at home -

00:21:10,460 --> 00:21:13,280
then we'll just have a huge amount of

00:21:12,170 --> 00:21:16,220
clapping in the world and it'll be

00:21:13,280 --> 00:21:18,620
beautiful so before we go let's dig into

00:21:16,220 --> 00:21:20,000
a couple practical examples everybody

00:21:18,620 --> 00:21:22,190
wants to know how do you Center a grid

00:21:20,000 --> 00:21:24,920
in CSS ha ha ha Stack Overflow joke

00:21:22,190 --> 00:21:27,530
Peter Griffin meme moving along three

00:21:24,920 --> 00:21:29,870
lines of code in grid also incidentally

00:21:27,530 --> 00:21:32,480
same three lines of code in flexbox but

00:21:29,870 --> 00:21:34,070
you start with display flex you just put

00:21:32,480 --> 00:21:35,930
these three properties on the parent and

00:21:34,070 --> 00:21:37,580
one element inside of it will

00:21:35,930 --> 00:21:41,450
automatically be centered as long as a

00:21:37,580 --> 00:21:43,100
parent is taller and wider than it cool

00:21:41,450 --> 00:21:47,330
it's not a joke anymore it's actually

00:21:43,100 --> 00:21:49,850
really manageable cool let's do

00:21:47,330 --> 00:21:51,770
something non-trivial though back to the

00:21:49,850 --> 00:21:53,450
idea we've got an admin interface maybe

00:21:51,770 --> 00:21:55,160
we're letting people edit blog posts or

00:21:53,450 --> 00:21:58,340
some other kind of published content

00:21:55,160 --> 00:22:00,470
here we've got a grid we can not set up

00:21:58,340 --> 00:22:02,540
our rows and columns on the wrapper

00:22:00,470 --> 00:22:05,270
element that contains all these rows and

00:22:02,540 --> 00:22:07,490
then get children of each row element to

00:22:05,270 --> 00:22:09,710
respect the columns that's like that's

00:22:07,490 --> 00:22:12,350
grandchildren kind of generations and we

00:22:09,710 --> 00:22:14,810
can't do that with grid yet sub grid is

00:22:12,350 --> 00:22:16,580
coming it's in Firefox and chromium I

00:22:14,810 --> 00:22:19,310
think behind a flag in one or both

00:22:16,580 --> 00:22:22,310
browsers and hopefully WebKit eventually

00:22:19,310 --> 00:22:23,390
hopefully quickly really and once they

00:22:22,310 --> 00:22:24,770
have some good we will be able to do

00:22:23,390 --> 00:22:26,180
that but for now what we're gonna do is

00:22:24,770 --> 00:22:29,120
we're gonna make each row in this table

00:22:26,180 --> 00:22:31,340
I use table and you know air quotes it's

00:22:29,120 --> 00:22:33,190
not an actual table element each row is

00:22:31,340 --> 00:22:35,960
going to be display grid on its own

00:22:33,190 --> 00:22:37,010
we've got two rows title and date

00:22:35,960 --> 00:22:39,020
actions in stat

00:22:37,010 --> 00:22:40,820
that's pretty self-explanatory each of

00:22:39,020 --> 00:22:43,340
their Heights is Auto whatever it needs

00:22:40,820 --> 00:22:45,020
for the words then we've got a fraction

00:22:43,340 --> 00:22:47,390
as the width of the title and action

00:22:45,020 --> 00:22:49,610
column and then the date and the status

00:22:47,390 --> 00:22:51,620
tag are max content and Max content is a

00:22:49,610 --> 00:22:53,600
cool new keyword in grid essentially

00:22:51,620 --> 00:22:56,540
what max content says is I want the

00:22:53,600 --> 00:22:57,950
maximum with this content could be if we

00:22:56,540 --> 00:23:00,050
don't create any line breaks or

00:22:57,950 --> 00:23:02,150
hyphenation don't go wider than that

00:23:00,050 --> 00:23:03,590
don't go wider than the max content just

00:23:02,150 --> 00:23:06,620
how wide will it be if we don't

00:23:03,590 --> 00:23:08,360
artificially break any lines or words so

00:23:06,620 --> 00:23:10,610
if we had May first as a publication

00:23:08,360 --> 00:23:12,260
date the word published would not be

00:23:10,610 --> 00:23:14,210
hyphenated even if we had a really

00:23:12,260 --> 00:23:17,240
narrow viewport or a really wide element

00:23:14,210 --> 00:23:18,650
in the next column pushing it over will

00:23:17,240 --> 00:23:20,900
never line break between February and

00:23:18,650 --> 00:23:22,970
19th of that property instead if our

00:23:20,900 --> 00:23:25,040
post title gets really long it will line

00:23:22,970 --> 00:23:27,080
break and that's a more legible way to

00:23:25,040 --> 00:23:29,510
go for things let the post title have

00:23:27,080 --> 00:23:34,070
the break and don't force your your date

00:23:29,510 --> 00:23:38,630
to wrap and then we've got a half a gap

00:23:34,070 --> 00:23:39,800
frm gap between everything let's get a

00:23:38,630 --> 00:23:42,950
little more complicated let's take a

00:23:39,800 --> 00:23:44,420
responsive component for example some of

00:23:42,950 --> 00:23:46,730
you are saying wait wait a second don't

00:23:44,420 --> 00:23:48,110
you take grid this is columns James this

00:23:46,730 --> 00:23:50,150
is only columns you put a wrapper around

00:23:48,110 --> 00:23:53,000
photo in bio you put a wrapper div

00:23:50,150 --> 00:23:57,080
around the header which contains name

00:23:53,000 --> 00:23:59,030
title and contact and awards those four

00:23:57,080 --> 00:24:00,350
elements to wrapper is one for each pair

00:23:59,030 --> 00:24:01,760
of elements boom you're done you don't

00:24:00,350 --> 00:24:04,130
even grid for this you see the Flex box

00:24:01,760 --> 00:24:08,420
you gave it a float that get out of here

00:24:04,130 --> 00:24:09,920
the grid talk okay oh I'm sad but

00:24:08,420 --> 00:24:11,210
actually I'm gonna fool you for a second

00:24:09,920 --> 00:24:13,250
this is all laid out with grid without

00:24:11,210 --> 00:24:15,170
wrapper divs and the reason for wrapper

00:24:13,250 --> 00:24:16,910
divs will become apparent in a couple

00:24:15,170 --> 00:24:20,960
slides but here's what the grid looks

00:24:16,910 --> 00:24:22,880
like there actually are rows photo and

00:24:20,960 --> 00:24:24,440
awards are allowed to overlap and share

00:24:22,880 --> 00:24:28,220
that second row each other so we don't

00:24:24,440 --> 00:24:30,890
see a single full width row gap dividing

00:24:28,220 --> 00:24:32,990
the entire layout we're kind of smushing

00:24:30,890 --> 00:24:36,050
past each other and creating the

00:24:32,990 --> 00:24:37,640
illusion of there not being rows the

00:24:36,050 --> 00:24:39,230
column with photo and bio in it is going

00:24:37,640 --> 00:24:40,640
to be 30% of the parent and then

00:24:39,230 --> 00:24:43,790
everything else the fraction of what

00:24:40,640 --> 00:24:45,260
belongs to the header and awards so

00:24:43,790 --> 00:24:47,420
here's what this looks like actually in

00:24:45,260 --> 00:24:49,190
the grid get some those blue boxes to

00:24:47,420 --> 00:24:51,379
help us see how things are put together

00:24:49,190 --> 00:24:52,999
we've got six cells in the grid the

00:24:51,379 --> 00:24:55,609
picture is allowed two adjacent cells

00:24:52,999 --> 00:24:57,289
labeled photo the award's is allowed two

00:24:55,609 --> 00:24:59,299
adjacent cells marked Awards and header

00:24:57,289 --> 00:25:00,979
and bio are just in their own individual

00:24:59,299 --> 00:25:03,200
cells now again

00:25:00,979 --> 00:25:04,519
why wouldn't we wrap it divs around this

00:25:03,200 --> 00:25:07,029
and just do it all with float

00:25:04,519 --> 00:25:10,159
well because grid is simpler and because

00:25:07,029 --> 00:25:11,779
responsive now your designer comes back

00:25:10,159 --> 00:25:13,190
to you because again there's just delays

00:25:11,779 --> 00:25:14,389
and things and it's a week later and

00:25:13,190 --> 00:25:15,609
they say cool here's the

00:25:14,389 --> 00:25:18,379
middle-of-the-road

00:25:15,609 --> 00:25:21,080
medium width breakpoint version of that

00:25:18,379 --> 00:25:22,849
component and now you're like oh I put a

00:25:21,080 --> 00:25:25,519
wrapper div around the photo in the bio

00:25:22,849 --> 00:25:26,840
and another one about around the header

00:25:25,519 --> 00:25:28,759
and the awards and now I'm in trouble

00:25:26,840 --> 00:25:30,049
now you gotta refactor your markup and

00:25:28,759 --> 00:25:33,070
figure out something from scratch but if

00:25:30,049 --> 00:25:36,529
you had used grid and all for children a

00:25:33,070 --> 00:25:37,970
photo header bio and awards for just

00:25:36,529 --> 00:25:39,590
children of grid and using grid to lay

00:25:37,970 --> 00:25:41,869
them out all you've got to do for this

00:25:39,590 --> 00:25:43,519
is change grid template to stick this in

00:25:41,869 --> 00:25:46,099
a media query for the right min and Max

00:25:43,519 --> 00:25:48,229
for that medium zone and photo and

00:25:46,099 --> 00:25:50,479
header share a row bio and awards each

00:25:48,229 --> 00:25:52,639
become a full row the photo will only be

00:25:50,479 --> 00:25:55,340
150 pixels wide and the header gets the

00:25:52,639 --> 00:25:57,440
rest of the space and we've reduced our

00:25:55,340 --> 00:26:00,229
gap so now it's one Ram both directions

00:25:57,440 --> 00:26:02,659
instead of one between rows and three

00:26:00,229 --> 00:26:04,849
between columns and now we're perfectly

00:26:02,659 --> 00:26:06,710
set up to go one smaller because you've

00:26:04,849 --> 00:26:08,450
got your mobile comp as well and now

00:26:06,710 --> 00:26:09,619
we're dropping all the text and so we're

00:26:08,450 --> 00:26:12,320
gonna do this with our grid template

00:26:09,619 --> 00:26:14,749
much much shorter photo and header are

00:26:12,320 --> 00:26:17,139
the only areas we need notice however we

00:26:14,749 --> 00:26:19,460
have to explicitly hide awards and bio

00:26:17,139 --> 00:26:22,309
grid will not hide them automatically

00:26:19,460 --> 00:26:25,789
simply because there's no longer a grid

00:26:22,309 --> 00:26:27,499
template area that they match grid is

00:26:25,789 --> 00:26:29,739
actually very very content friendly it

00:26:27,499 --> 00:26:31,849
wants people to read your website okay

00:26:29,739 --> 00:26:33,679
so what it will do is it will create a

00:26:31,849 --> 00:26:35,330
bonus row underneath header and throw

00:26:33,679 --> 00:26:37,609
the bio in there and then it'll create

00:26:35,330 --> 00:26:39,470
another bonus row underneath the bio and

00:26:37,609 --> 00:26:41,629
throw the awards in their grid we'll

00:26:39,470 --> 00:26:43,009
just make up two bonus rows even though

00:26:41,629 --> 00:26:45,769
you didn't define them in grid template

00:26:43,009 --> 00:26:47,690
and it will preserve your content so if

00:26:45,769 --> 00:26:50,090
you need them invisible you have to do

00:26:47,690 --> 00:26:50,690
that manually with CSS you have to do it

00:26:50,090 --> 00:26:52,789
on purpose

00:26:50,690 --> 00:26:56,409
grid loves your content and it's not

00:26:52,789 --> 00:26:56,409
gonna hide it unless you tell it to

00:26:56,850 --> 00:27:00,150
we can also do a fun thing with like

00:26:58,440 --> 00:27:03,090
image layout it's kind of like masonry

00:27:00,150 --> 00:27:06,210
ish but this is all manual I 1 is a 2 by

00:27:03,090 --> 00:27:08,430
2 by 3 is tall 4 is tall 6 is tall it is

00:27:06,210 --> 00:27:11,790
wide and wouldn't you know our grid

00:27:08,430 --> 00:27:13,920
template looks just like the output I 1

00:27:11,790 --> 00:27:16,440
is a square 3 is tall forrestal 6 is

00:27:13,920 --> 00:27:19,020
tall 8 is wide and everything is evenly

00:27:16,440 --> 00:27:20,760
sized this is the power and the beauty

00:27:19,020 --> 00:27:24,180
of grid when you make a grid template it

00:27:20,760 --> 00:27:26,130
looks just like your output and when you

00:27:24,180 --> 00:27:28,080
use grid template with real Heights down

00:27:26,130 --> 00:27:30,210
the edge and the column widths across

00:27:28,080 --> 00:27:34,740
the bottom it's all legible and

00:27:30,210 --> 00:27:36,990
manageable in one chunk of text your CSS

00:27:34,740 --> 00:27:40,080
looks like your layout and it's all in

00:27:36,990 --> 00:27:41,310
one block I love this so last thing I

00:27:40,080 --> 00:27:43,050
want to cover for you is a couple of

00:27:41,310 --> 00:27:45,870
gotchas some tips and tricks I have

00:27:43,050 --> 00:27:48,210
discovered on the way images assigned to

00:27:45,870 --> 00:27:49,830
a grid area will obey the grid cell size

00:27:48,210 --> 00:27:51,360
and maybe end up stretched or squished

00:27:49,830 --> 00:27:54,300
or something not in their intrinsic

00:27:51,360 --> 00:27:56,700
aspect ratio so either wrap the image in

00:27:54,300 --> 00:27:58,320
a container element like a div that's an

00:27:56,700 --> 00:28:00,330
okay place for a div wrapper that means

00:27:58,320 --> 00:28:03,030
nothing semantically it's just there to

00:28:00,330 --> 00:28:05,220
help with the image is sizing or cool

00:28:03,030 --> 00:28:08,280
trick you can make the image object fit

00:28:05,220 --> 00:28:09,840
cover in your CSS that will tell the

00:28:08,280 --> 00:28:12,030
image go ahead and fill the entire grid

00:28:09,840 --> 00:28:14,460
area but behave like you're a background

00:28:12,030 --> 00:28:16,950
image using background image size your

00:28:14,460 --> 00:28:18,780
background size cover and every browser

00:28:16,950 --> 00:28:22,620
that supports grid a supports object fit

00:28:18,780 --> 00:28:26,610
so win-win animating grids can you do

00:28:22,620 --> 00:28:28,970
that some positives can animate between

00:28:26,610 --> 00:28:31,410
grid template columns and rows values if

00:28:28,970 --> 00:28:33,540
there's a same number you can't go from

00:28:31,410 --> 00:28:35,340
3 columns to 4 that's not an animatable

00:28:33,540 --> 00:28:37,020
way to do it and you can't animate

00:28:35,340 --> 00:28:39,000
between different units for example your

00:28:37,020 --> 00:28:42,630
first column can't animate from 10

00:28:39,000 --> 00:28:44,310
pixels to 1 fraction those are just

00:28:42,630 --> 00:28:45,720
impossible things gap is a little easier

00:28:44,310 --> 00:28:47,580
to animate you'll get more browser

00:28:45,720 --> 00:28:49,080
support for that and no you can't

00:28:47,580 --> 00:28:52,110
animate an element between two different

00:28:49,080 --> 00:28:53,040
grid areas that would be super cool not

00:28:52,110 --> 00:28:56,670
gonna happen because there's too much

00:28:53,040 --> 00:28:59,070
layout complexity and ie11 got to say a

00:28:56,670 --> 00:29:00,480
word for ie 11 some of you might still

00:28:59,070 --> 00:29:02,190
support it if we were all in the same

00:29:00,480 --> 00:29:03,510
conference room we I would say you raise

00:29:02,190 --> 00:29:05,430
your hands if you're still supporting it

00:29:03,510 --> 00:29:06,990
I'm really grateful we recently dropped

00:29:05,430 --> 00:29:09,360
it on the current projects I've been

00:29:06,990 --> 00:29:09,740
working on for the last couple years but

00:29:09,360 --> 00:29:11,330
yet just

00:29:09,740 --> 00:29:14,270
recently dropped and got to refactor and

00:29:11,330 --> 00:29:16,100
let go of a lot of code fun fact

00:29:14,270 --> 00:29:19,460
ie 11 was a first browser to support

00:29:16,100 --> 00:29:21,260
grid not fun fact the grid spec wasn't

00:29:19,460 --> 00:29:23,690
finalized yet so il haven't implemented

00:29:21,260 --> 00:29:26,690
its own non-standard version of grid

00:29:23,690 --> 00:29:30,020
spec and autoprefixer if you configure

00:29:26,690 --> 00:29:31,850
it to grid true in its options can help

00:29:30,020 --> 00:29:34,580
it can emulate some of the things that I

00:29:31,850 --> 00:29:38,240
11 doesn't support like named grid areas

00:29:34,580 --> 00:29:40,730
it cannot backfill or polyfill gap I 11

00:29:38,240 --> 00:29:42,740
won't support gap . you can't hack that

00:29:40,730 --> 00:29:44,150
without a prefix or either so an

00:29:42,740 --> 00:29:46,700
actually recommend is not using

00:29:44,150 --> 00:29:49,010
autoprefixer to do grid but rather use a

00:29:46,700 --> 00:29:51,650
fallback layout for CSS like something

00:29:49,010 --> 00:29:53,960
like flex or or floats or whatever it is

00:29:51,650 --> 00:29:56,300
a works best for your team for ie 11 and

00:29:53,960 --> 00:29:59,120
here's what you do the layout you give

00:29:56,300 --> 00:30:01,040
ie 11 users is usable nothing is broken

00:29:59,120 --> 00:30:02,900
or hidden you use an older code that's

00:30:01,040 --> 00:30:05,350
fine it's boring or layout it might

00:30:02,900 --> 00:30:07,250
always be one column or two columns cool

00:30:05,350 --> 00:30:09,260
everything is going to be accessible

00:30:07,250 --> 00:30:11,510
legible interactive you're not gonna

00:30:09,260 --> 00:30:12,590
hide or break anything but you're also

00:30:11,510 --> 00:30:16,309
not gonna use grid and get all the

00:30:12,590 --> 00:30:18,650
nuance and cleverness of grid layout and

00:30:16,309 --> 00:30:22,010
if you if you've got a strung-out you 11

00:30:18,650 --> 00:30:24,040
user base sadly but true ie 11 users are

00:30:22,010 --> 00:30:26,210
at this point largely used to

00:30:24,040 --> 00:30:28,250
significant chunks of the web not

00:30:26,210 --> 00:30:30,380
working for them at all

00:30:28,250 --> 00:30:31,820
that's bad we don't know a lis any

00:30:30,380 --> 00:30:32,990
people just because of an old browser

00:30:31,820 --> 00:30:35,000
they're probably locked into by an

00:30:32,990 --> 00:30:38,690
enterprise workplace or some

00:30:35,000 --> 00:30:41,809
environmental constraint if you give

00:30:38,690 --> 00:30:43,850
them readable useable content that's in

00:30:41,809 --> 00:30:45,710
one boring column or some simplified

00:30:43,850 --> 00:30:47,960
layout you've given them a working

00:30:45,710 --> 00:30:49,970
website and we're doing better than I

00:30:47,960 --> 00:30:52,520
could name some big tech companies that

00:30:49,970 --> 00:30:54,080
don't support ie 11 at all so if you

00:30:52,520 --> 00:30:55,750
still have to support ie 11 because of

00:30:54,080 --> 00:30:58,100
numbers please give them fallback CSS

00:30:55,750 --> 00:30:59,390
don't I wouldn't try to use on a prefix

00:30:58,100 --> 00:31:00,950
or because you're gonna in too many too

00:30:59,390 --> 00:31:03,170
many issues with gap but give them

00:31:00,950 --> 00:31:06,350
fallback CSS it still looks useable and

00:31:03,170 --> 00:31:07,910
is good to go and that's all I'm James I

00:31:06,350 --> 00:31:10,040
work at Dockyard I'd love to talk about

00:31:07,910 --> 00:31:12,710
grid and other CSS things so I'll be in

00:31:10,040 --> 00:31:14,330
discord today chat with me there on

00:31:12,710 --> 00:31:16,160
Twitter at JD Steinbach and you can find

00:31:14,330 --> 00:31:18,980
my code and github in my blog at comm

00:31:16,160 --> 00:31:21,320
all in the same handle but I like James

00:31:18,980 --> 00:31:21,740
not JD anyway y'all have been a great

00:31:21,320 --> 00:31:23,299
audience

00:31:21,740 --> 00:31:24,499
I assume you

00:31:23,299 --> 00:31:26,059
the benefit of the doubt I'm sure you're

00:31:24,499 --> 00:31:28,009
a great audience thanks so much for

00:31:26,059 --> 00:31:30,850
tuning in today I have a great day and

00:31:28,009 --> 00:31:30,850

YouTube URL: https://www.youtube.com/watch?v=qAkRdaokkgI


