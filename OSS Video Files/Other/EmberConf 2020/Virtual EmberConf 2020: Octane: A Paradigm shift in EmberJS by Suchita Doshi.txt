Title: Virtual EmberConf 2020: Octane: A Paradigm shift in EmberJS by Suchita Doshi
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Octane: A Paradigm shift in EmberJS by Suchita Doshi

EmberJS is a great choice when it comes to building web apps of any size. However, it does have a reputation for having a steep learning curve along with other issues like the size of the framework, not being productive out of the box, etc. Ember JS's newest edition Ember Octane addresses most of such concerns & rescues the troubled developers. Curious about what features Ember Octane offers? and why is it so different from the previous versions of Ember? This session would cover some important aspects of Ember Octane & an overview of Ember's transformation from its previous versions to Octane.
Captions: 
	00:00:01,270 --> 00:00:23,200
[Music]

00:00:20,460 --> 00:00:24,849
hello everyone I'm very good morning

00:00:23,200 --> 00:00:27,700
open everyone is doing great

00:00:24,849 --> 00:00:29,500
my name is sue cheetah Doshi and today I

00:00:27,700 --> 00:00:32,860
will be taking you to the journey of

00:00:29,500 --> 00:00:35,140
anger but before I do that let me give

00:00:32,860 --> 00:00:37,660
you a quick introduction about myself I

00:00:35,140 --> 00:00:40,180
work as a senior engineer at LinkedIn

00:00:37,660 --> 00:00:42,489
and before linden I work for many

00:00:40,180 --> 00:00:45,430
different companies but my very first

00:00:42,489 --> 00:00:49,420
ever experience comes from Yahoo back in

00:00:45,430 --> 00:00:52,150
late 2013 after Yahoo I worked for Apple

00:00:49,420 --> 00:00:55,629
where I didn't do amber stuff but that

00:00:52,150 --> 00:00:58,269
was not for not the love for Amber for

00:00:55,629 --> 00:01:02,229
independent and Here I am working on a

00:00:58,269 --> 00:01:05,229
lot of cool amber stuff also when I have

00:01:02,229 --> 00:01:07,299
not on my like working on my computer or

00:01:05,229 --> 00:01:09,780
I am not doing any coding related stuff

00:01:07,299 --> 00:01:13,000
here are the things that I love I love

00:01:09,780 --> 00:01:16,360
playing guitar not true but I can still

00:01:13,000 --> 00:01:18,189
play a little bit I am a huge cricket

00:01:16,360 --> 00:01:20,590
fan for those who don't know what

00:01:18,189 --> 00:01:23,679
cricket is it's a sport which is very

00:01:20,590 --> 00:01:25,719
similar to baseball and I myself play

00:01:23,679 --> 00:01:29,799
cricket and it's very famous back in

00:01:25,719 --> 00:01:31,960
India awfully I have this craze of

00:01:29,799 --> 00:01:35,109
building my own custom mechanical

00:01:31,960 --> 00:01:37,600
keyboards with new switches and custom

00:01:35,109 --> 00:01:40,270
click apps etc if any of you might have

00:01:37,600 --> 00:01:44,140
any cool ideas feel free to reach out to

00:01:40,270 --> 00:01:47,049
me and I love watching movies I mean who

00:01:44,140 --> 00:01:49,960
doesn't right ok enough said about me

00:01:47,049 --> 00:01:52,090
now we should focus on the main topic so

00:01:49,960 --> 00:01:55,090
today an agenda would be something like

00:01:52,090 --> 00:01:55,810
this I plan to cover the journey of

00:01:55,090 --> 00:01:58,479
Ambrosius

00:01:55,810 --> 00:02:01,749
in terms of its versions like version 1

00:01:58,479 --> 00:02:03,999
dot X 2 dot X and 3 dot X going forward

00:02:01,749 --> 00:02:05,950
and I will be talking about amber octane

00:02:03,999 --> 00:02:08,530
and its native concepts like some core

00:02:05,950 --> 00:02:10,690
concepts like native classes glimmer

00:02:08,530 --> 00:02:13,890
components templating and octane track

00:02:10,690 --> 00:02:16,120
properties modifiers and decorators

00:02:13,890 --> 00:02:19,209
after that I will be showing you a

00:02:16,120 --> 00:02:23,140
consolidated comparison of the classic

00:02:19,209 --> 00:02:25,020
syntax vs octane syntax and at the end I

00:02:23,140 --> 00:02:26,250
will leave you guys with some

00:02:25,020 --> 00:02:29,160
documentation

00:02:26,250 --> 00:02:32,390
references to migration guides and some

00:02:29,160 --> 00:02:35,190
information about amber octane vlogs etc

00:02:32,390 --> 00:02:38,520
okay so let's start with the journey of

00:02:35,190 --> 00:02:43,200
amber but before that let's take a step

00:02:38,520 --> 00:02:46,590
back and think about around 2013 times

00:02:43,200 --> 00:02:50,790
or so back in that time we didn't have a

00:02:46,590 --> 00:02:53,940
lot of options in relation to JavaScript

00:02:50,790 --> 00:02:56,370
frameworks as we have today the most

00:02:53,940 --> 00:02:59,970
evident options during that 10 word

00:02:56,370 --> 00:03:03,300
backbone.js angularjs knockout JS etc

00:02:59,970 --> 00:03:05,490
while these were great they still left

00:03:03,300 --> 00:03:09,030
the decisions of configuration on the

00:03:05,490 --> 00:03:11,850
developers it was during that time when

00:03:09,030 --> 00:03:14,430
one framework emerged which was rid of

00:03:11,850 --> 00:03:16,800
the principle of the developers should

00:03:14,430 --> 00:03:18,660
not care about the configuration stuff

00:03:16,800 --> 00:03:21,450
they should only focus on that specific

00:03:18,660 --> 00:03:23,640
stuff which means the developers

00:03:21,450 --> 00:03:25,650
productivity would be increased because

00:03:23,640 --> 00:03:28,590
a free mug would do the config related

00:03:25,650 --> 00:03:32,190
stuff the name of this framework was

00:03:28,590 --> 00:03:36,870
amber genius amber is come a very long

00:03:32,190 --> 00:03:41,100
way ever since 2013 and let's see how it

00:03:36,870 --> 00:03:43,320
started with wonder X so since one node

00:03:41,100 --> 00:03:46,680
X was up for a very first version of

00:03:43,320 --> 00:03:48,690
amber it came with a lot of goodness to

00:03:46,680 --> 00:03:49,530
start off with its conventional

00:03:48,690 --> 00:03:52,260
configuration

00:03:49,530 --> 00:03:54,780
this was a whole new mental model shift

00:03:52,260 --> 00:03:56,660
for any developer who comes from a

00:03:54,780 --> 00:03:59,280
different JavaScript framework world

00:03:56,660 --> 00:04:02,600
especially they I will give you my

00:03:59,280 --> 00:04:05,040
specific example I came from backbone.js

00:04:02,600 --> 00:04:07,799
background and when I tried working on

00:04:05,040 --> 00:04:10,440
amber it was very different for me but

00:04:07,799 --> 00:04:12,510
as it when I started working on Albert I

00:04:10,440 --> 00:04:14,280
started feeling the difference and I

00:04:12,510 --> 00:04:16,140
started appreciating him more and more

00:04:14,280 --> 00:04:19,049
because I stand feeling more more

00:04:16,140 --> 00:04:22,229
productive so that was when I started

00:04:19,049 --> 00:04:24,780
falling in love with Amber also I'm not

00:04:22,229 --> 00:04:27,120
provided in box built in routing

00:04:24,780 --> 00:04:30,030
capability so that means you don't have

00:04:27,120 --> 00:04:30,800
to write your own routing layer or get

00:04:30,030 --> 00:04:32,240
it from outside

00:04:30,800 --> 00:04:35,389
something like that it was already ready

00:04:32,240 --> 00:04:37,520
for you which was a huge thing also we

00:04:35,389 --> 00:04:39,879
have support for Amber data that took

00:04:37,520 --> 00:04:43,069
care of the state of the application etc

00:04:39,879 --> 00:04:45,860
and whatnot it's was built on new driven

00:04:43,069 --> 00:04:48,139
architecture what I mean is here you can

00:04:45,860 --> 00:04:49,789
see the route controller I think that

00:04:48,139 --> 00:04:51,740
was the path that or that was the

00:04:49,789 --> 00:04:53,690
architecture that we followed at that

00:04:51,740 --> 00:04:55,759
time and for anybody who wants a

00:04:53,690 --> 00:04:59,060
refresher of how he is to read I produce

00:04:55,759 --> 00:05:01,039
a sleeve pic is in here where computed

00:04:59,060 --> 00:05:03,650
properties were written somewhere like

00:05:01,039 --> 00:05:05,870
the animated with dot property and

00:05:03,650 --> 00:05:08,629
observers were written something like

00:05:05,870 --> 00:05:12,199
they'd be added dot observes to the

00:05:08,629 --> 00:05:13,669
properties also we have the capability

00:05:12,199 --> 00:05:15,710
of two-way bindings which was great

00:05:13,669 --> 00:05:20,120
because and that came it was really

00:05:15,710 --> 00:05:23,900
really dynamic thing for any frame of to

00:05:20,120 --> 00:05:26,569
have this ability and we add the support

00:05:23,900 --> 00:05:28,490
for attribute bindings this was really

00:05:26,569 --> 00:05:31,400
good because let's see if you had a

00:05:28,490 --> 00:05:32,900
package as class or a template like a

00:05:31,400 --> 00:05:36,050
component with a template or even a

00:05:32,900 --> 00:05:39,830
template and you wanted to associate the

00:05:36,050 --> 00:05:43,630
attributes value dynamically so with

00:05:39,830 --> 00:05:47,569
bind actor syntax you can associate your

00:05:43,630 --> 00:05:51,949
components of views property directly on

00:05:47,569 --> 00:05:53,960
the template so that was pretty good ok

00:05:51,949 --> 00:05:57,740
so this wasn't good amber would not X

00:05:53,960 --> 00:06:00,800
was really taking off and it was doing

00:05:57,740 --> 00:06:04,099
great and complex web applications who

00:06:00,800 --> 00:06:06,440
are started to love it already but the

00:06:04,099 --> 00:06:09,409
community always believed that there is

00:06:06,440 --> 00:06:11,870
always room for improvement so the

00:06:09,409 --> 00:06:14,930
lessons that they learned from one dot X

00:06:11,870 --> 00:06:17,539
and the new frameworks that were

00:06:14,930 --> 00:06:20,360
evolving during the time at 2 dot X was

00:06:17,539 --> 00:06:23,360
being planned out they embraced all of

00:06:20,360 --> 00:06:25,819
these things together and added things

00:06:23,360 --> 00:06:29,050
in the roadmap of products so here are

00:06:25,819 --> 00:06:32,240
the few things that landed in products

00:06:29,050 --> 00:06:36,349
instead of you driven now we are

00:06:32,240 --> 00:06:38,719
component Riven this was because the web

00:06:36,349 --> 00:06:39,620
community itself was going in that

00:06:38,719 --> 00:06:42,530
direction

00:06:39,620 --> 00:06:44,389
and amber was hand in hand with that so

00:06:42,530 --> 00:06:47,240
here you can see round controller

00:06:44,389 --> 00:06:50,300
component is of no avail and again a

00:06:47,240 --> 00:06:52,790
sneak peek of how the syntax changed the

00:06:50,300 --> 00:06:55,220
computed properties now amber are

00:06:52,790 --> 00:06:58,940
computed and observer is now under done

00:06:55,220 --> 00:07:01,130
observer also we had the bloomer

00:06:58,940 --> 00:07:03,949
rendering engine in to Roddick's which

00:07:01,130 --> 00:07:05,960
was a very very good thing was a gif or

00:07:03,949 --> 00:07:08,300
dramatic improvement in the real

00:07:05,960 --> 00:07:11,860
enduring of the application is pretty

00:07:08,300 --> 00:07:14,000
good and then we had better binding

00:07:11,860 --> 00:07:17,150
attributes right you remember in the

00:07:14,000 --> 00:07:19,130
previous slide I showed you the bio-data

00:07:17,150 --> 00:07:22,389
syntax like you can see here as well in

00:07:19,130 --> 00:07:25,430
the mathematics but this post some

00:07:22,389 --> 00:07:28,070
issues where it became an overhead and

00:07:25,430 --> 00:07:30,320
it was confusing and so on with 2 dot X

00:07:28,070 --> 00:07:32,780
it became more simplified where you can

00:07:30,320 --> 00:07:35,270
directly add a property from your J's

00:07:32,780 --> 00:07:38,780
class on to the template without adding

00:07:35,270 --> 00:07:41,870
the band by Nutter so that was nice also

00:07:38,780 --> 00:07:44,510
the template scoping was improved let me

00:07:41,870 --> 00:07:47,210
show you an example here we have one dot

00:07:44,510 --> 00:07:49,389
X and robotics again a comparison and I

00:07:47,210 --> 00:07:52,849
want to specifically talk about the

00:07:49,389 --> 00:07:55,160
second example in the one dot X section

00:07:52,849 --> 00:07:58,820
where we are trading over the posts

00:07:55,160 --> 00:08:00,680
without any in so here I am doing each

00:07:58,820 --> 00:08:03,320
posts and whatever is the inside of that

00:08:00,680 --> 00:08:05,030
iteration loses the outside context or

00:08:03,320 --> 00:08:07,729
it doesn't have access to the outside

00:08:05,030 --> 00:08:11,330
context so you are stuck in that

00:08:07,729 --> 00:08:14,660
iteration itself so as a workaround the

00:08:11,330 --> 00:08:16,639
above example like each post in post

00:08:14,660 --> 00:08:18,919
allow you to do that where the post

00:08:16,639 --> 00:08:21,680
would act as the inner context and the

00:08:18,919 --> 00:08:24,260
new bin is Alexis outer context but in

00:08:21,680 --> 00:08:27,830
two dot X things are way more simplified

00:08:24,260 --> 00:08:31,760
and standardized where every time you

00:08:27,830 --> 00:08:34,520
want to iterate over a property you use

00:08:31,760 --> 00:08:36,860
that as functionality like each post as

00:08:34,520 --> 00:08:39,080
and then pipe and whatever the

00:08:36,860 --> 00:08:41,180
parameters here it is post so again the

00:08:39,080 --> 00:08:42,880
post would be the inner context and you

00:08:41,180 --> 00:08:47,590
can get the outer context as

00:08:42,880 --> 00:08:52,210
you wish also while to mybinding's was

00:08:47,590 --> 00:08:53,680
great did impose some issues when your

00:08:52,210 --> 00:08:56,110
app started becoming more and more

00:08:53,680 --> 00:08:58,600
complex and more and more bigger by that

00:08:56,110 --> 00:09:01,900
what I mean is let's say property a

00:08:58,600 --> 00:09:04,060
updates nini update see see updates Erin

00:09:01,900 --> 00:09:06,640
so this kind of infinite cascading

00:09:04,060 --> 00:09:09,130
started becoming a problem and that's

00:09:06,640 --> 00:09:13,570
why we started embracing the data down

00:09:09,130 --> 00:09:16,270
actions up approach and amber tarot

00:09:13,570 --> 00:09:19,360
decks was not just about all of this it

00:09:16,270 --> 00:09:21,670
was of a more than that in two Roddick's

00:09:19,360 --> 00:09:23,890
itself we had a roadmap towards things

00:09:21,670 --> 00:09:26,500
like HTML syntax for component

00:09:23,890 --> 00:09:28,240
invocation routes to drive components

00:09:26,500 --> 00:09:30,730
like these are under bracketed

00:09:28,240 --> 00:09:34,630
invocations and routable components if

00:09:30,730 --> 00:09:36,370
you might have heard already that brings

00:09:34,630 --> 00:09:39,010
me to my next topic within our

00:09:36,370 --> 00:09:41,350
Theodoric's this is very exciting it has

00:09:39,010 --> 00:09:43,390
a lot of things and mention a few of the

00:09:41,350 --> 00:09:46,630
things here but there are many more

00:09:43,390 --> 00:09:49,120
things than this in Theodoric's to start

00:09:46,630 --> 00:09:51,730
off with its clean up clean up clean up

00:09:49,120 --> 00:09:53,830
why am i emphasizing on clean up so much

00:09:51,730 --> 00:09:57,370
because a lot of theorem has been done

00:09:53,830 --> 00:09:59,200
with this version where a lot of private

00:09:57,370 --> 00:10:01,360
API is deprecations everything

00:09:59,200 --> 00:10:04,140
everything hasn't cleaned up in that way

00:10:01,360 --> 00:10:08,220
the code the framework becomes more

00:10:04,140 --> 00:10:10,720
manageable maintainable and more cleaner

00:10:08,220 --> 00:10:14,950
also we have removed support for

00:10:10,720 --> 00:10:19,780
Internet Explorer 9 IE 10 phantom GS and

00:10:14,950 --> 00:10:21,730
also power from now on the other points

00:10:19,780 --> 00:10:24,580
I will be excluding more in the details

00:10:21,730 --> 00:10:26,680
in the coming slides I'll quickly skim

00:10:24,580 --> 00:10:29,950
through these three not X has the

00:10:26,680 --> 00:10:31,810
ability for supporting Native classes we

00:10:29,950 --> 00:10:32,590
have our components angle brackets

00:10:31,810 --> 00:10:34,810
invocation

00:10:32,590 --> 00:10:37,570
track properties modifiers and

00:10:34,810 --> 00:10:39,760
decorators and lots of documentation

00:10:37,570 --> 00:10:41,650
which is a huge thing when you are

00:10:39,760 --> 00:10:44,110
moving forward with a certain youth

00:10:41,650 --> 00:10:49,510
change so that is a job well done by the

00:10:44,110 --> 00:10:53,430
folks so what did we learn we saw that a

00:10:49,510 --> 00:10:56,740
framework emerged when in 2013 and

00:10:53,430 --> 00:11:00,100
released one dot X and then it

00:10:56,740 --> 00:11:03,130
threw more in torrox and then through

00:11:00,100 --> 00:11:05,200
the wall in three directs and then here

00:11:03,130 --> 00:11:08,950
we are with the first new addition and

00:11:05,200 --> 00:11:12,279
were octane so you must be thinking why

00:11:08,950 --> 00:11:14,880
is this a new edition and why isn't not

00:11:12,279 --> 00:11:18,490
a new version so you can think of

00:11:14,880 --> 00:11:21,250
edition as something that represents a

00:11:18,490 --> 00:11:23,470
shift in programming model due to new

00:11:21,250 --> 00:11:25,630
features and concepts added in the

00:11:23,470 --> 00:11:27,640
framework like for example here we have

00:11:25,630 --> 00:11:29,740
a bundle of new features a lot of

00:11:27,640 --> 00:11:31,870
documentation a lot of - links like code

00:11:29,740 --> 00:11:33,339
mods etcetera and everything bundled

00:11:31,870 --> 00:11:36,880
together so that's where it's in the

00:11:33,339 --> 00:11:39,399
condition so let's take a sneak peek of

00:11:36,880 --> 00:11:41,920
each or some of the key concepts of

00:11:39,399 --> 00:11:45,459
vampire octane itself let's start with

00:11:41,920 --> 00:11:48,700
Native classes so amber relies very

00:11:45,459 --> 00:11:50,950
heavily now on Native clubs or native

00:11:48,700 --> 00:11:53,140
features of JavaScript when I say it

00:11:50,950 --> 00:11:56,140
relies on native features I mean there

00:11:53,140 --> 00:11:58,510
is very less framework specific code and

00:11:56,140 --> 00:12:02,050
because there is very less framework

00:11:58,510 --> 00:12:04,810
specific code the overhead on building

00:12:02,050 --> 00:12:09,070
the framework itself is very less that

00:12:04,810 --> 00:12:12,070
means increase performance and Amber is

00:12:09,070 --> 00:12:14,589
known for its C planning curve I mean

00:12:12,070 --> 00:12:16,839
I've seen many folks what's open doing

00:12:14,589 --> 00:12:17,260
it when I've read if I edit some blogs

00:12:16,839 --> 00:12:20,260
as well

00:12:17,260 --> 00:12:22,600
well people choose not to use that word

00:12:20,260 --> 00:12:25,779
because of its steep learning curve and

00:12:22,600 --> 00:12:28,180
I can imagine why but I think with

00:12:25,779 --> 00:12:30,520
octane that won't be an issue anymore

00:12:28,180 --> 00:12:33,130
because since now we have again I am

00:12:30,520 --> 00:12:34,779
repeating less framework specific code

00:12:33,130 --> 00:12:37,329
so you won't have to learn a lot of

00:12:34,779 --> 00:12:39,480
things out of the box so it's it gives

00:12:37,329 --> 00:12:44,529
you a smooth learning curve experience

00:12:39,480 --> 00:12:47,440
also because again the same thing it's

00:12:44,529 --> 00:12:49,720
more native stuff it is more aligned

00:12:47,440 --> 00:12:53,230
with the JavaScript community and you

00:12:49,720 --> 00:12:56,649
can share code more easily and there is

00:12:53,230 --> 00:12:59,620
no more dot DX can you imagine like me

00:12:56,649 --> 00:13:02,170
myself personally I used to feel like

00:12:59,620 --> 00:13:05,350
why do we have this like this job

00:13:02,170 --> 00:13:07,360
oh this circuit bar I am sure a lot of

00:13:05,350 --> 00:13:08,380
you might be sharing the same feeling

00:13:07,360 --> 00:13:10,840
like I am right now

00:13:08,380 --> 00:13:12,550
so there's move objects you just

00:13:10,840 --> 00:13:14,500
directly do this doubtful

00:13:12,550 --> 00:13:16,420
there's your back like you usually do to

00:13:14,500 --> 00:13:19,030
me more property in your JavaScript

00:13:16,420 --> 00:13:20,020
currently and of course it is clean and

00:13:19,030 --> 00:13:23,080
easier to read

00:13:20,020 --> 00:13:25,420
enough said let's see an example so here

00:13:23,080 --> 00:13:27,460
in this example you see on the top we

00:13:25,420 --> 00:13:29,500
have this classic amber of Dickinson tax

00:13:27,460 --> 00:13:33,580
and at the bottom he have native syntax

00:13:29,500 --> 00:13:36,820
now if you see the main difference is

00:13:33,580 --> 00:13:39,310
how we are creating or defining the

00:13:36,820 --> 00:13:42,040
object on the top we are doing amber

00:13:39,310 --> 00:13:44,320
object on extent but at the bottom with

00:13:42,040 --> 00:13:46,270
native class and that's no more amber

00:13:44,320 --> 00:13:49,660
objects you can just say class person

00:13:46,270 --> 00:13:52,060
that's it you're done also in the

00:13:49,660 --> 00:13:54,610
classic syntax you can see the computer

00:13:52,060 --> 00:13:57,130
property full name is created by passing

00:13:54,610 --> 00:13:59,890
in the properties for Simon last name

00:13:57,130 --> 00:14:01,690
and we are invoking before Simon last

00:13:59,890 --> 00:14:04,480
name is this turning force in this

00:14:01,690 --> 00:14:07,510
you're getting a snake where the native

00:14:04,480 --> 00:14:10,150
class we are just writing the native

00:14:07,510 --> 00:14:13,150
getters of JavaScript and then just

00:14:10,150 --> 00:14:15,760
adding a little splash of computed

00:14:13,150 --> 00:14:17,290
decorator on top of the native Gator and

00:14:15,760 --> 00:14:19,240
that's it you're done you don't have to

00:14:17,290 --> 00:14:21,340
do this job gets anyone's this is your

00:14:19,240 --> 00:14:23,650
first thing this is your last name so

00:14:21,340 --> 00:14:26,170
that's very cool this is a little bit

00:14:23,650 --> 00:14:28,480
about native classes now let's move on

00:14:26,170 --> 00:14:30,550
to glimmer components in my personal

00:14:28,480 --> 00:14:33,700
opinion this is one of the biggest

00:14:30,550 --> 00:14:36,340
events in Amber's journey so far because

00:14:33,700 --> 00:14:39,430
Amber's component library was pretty old

00:14:36,340 --> 00:14:40,690
and with this new component library it's

00:14:39,430 --> 00:14:43,570
a great refresher

00:14:40,690 --> 00:14:46,210
not only does glimmer components take

00:14:43,570 --> 00:14:48,040
all the goodness of Native classes but

00:14:46,210 --> 00:14:52,090
it also makes it more simplified

00:14:48,040 --> 00:14:55,000
component library in Acworth let's talk

00:14:52,090 --> 00:14:57,850
about this following example again so

00:14:55,000 --> 00:15:00,430
here wilmer component is defined by

00:14:57,850 --> 00:15:03,430
importing glimmer component instead of

00:15:00,430 --> 00:15:06,010
our component as you can see and instead

00:15:03,430 --> 00:15:08,080
of exporting default component or extend

00:15:06,010 --> 00:15:10,600
like we do usually in a classic syntax

00:15:08,080 --> 00:15:14,110
we just do a native class and then

00:15:10,600 --> 00:15:15,230
exchange of the level component also

00:15:14,110 --> 00:15:16,670
there are now

00:15:15,230 --> 00:15:19,190
your hooks and properties that is a

00:15:16,670 --> 00:15:21,380
great thing like previously we had

00:15:19,190 --> 00:15:24,140
thirteen lifecycle hooks at twenty nine

00:15:21,380 --> 00:15:25,850
properties now can you imagine a new

00:15:24,140 --> 00:15:28,400
person coming and joining working on

00:15:25,850 --> 00:15:30,020
amber and you say hey if you want to be

00:15:28,400 --> 00:15:32,330
productive if you want to start working

00:15:30,020 --> 00:15:34,250
and make an effect you need to know

00:15:32,330 --> 00:15:36,110
thirteen lifecycle hooks and twenty-nine

00:15:34,250 --> 00:15:38,270
properties that would be immediately

00:15:36,110 --> 00:15:41,960
daunting and overwhelming for anyone who

00:15:38,270 --> 00:15:45,890
comes across this I think with this with

00:15:41,960 --> 00:15:48,200
blima components no more fear because

00:15:45,890 --> 00:15:51,980
now we only have two lifecycle hooks and

00:15:48,200 --> 00:15:53,870
three properties also you must be

00:15:51,980 --> 00:15:55,490
already knowing then every time you

00:15:53,870 --> 00:15:57,920
create a component in the classic

00:15:55,490 --> 00:16:01,280
component world or rapper is always

00:15:57,920 --> 00:16:04,040
wrapped around your template like for

00:16:01,280 --> 00:16:06,950
example here the number of kids is just

00:16:04,040 --> 00:16:09,350
a value but when it renders on a Dom

00:16:06,950 --> 00:16:11,210
there will be a div or in this case

00:16:09,350 --> 00:16:12,980
there will be a label that will be

00:16:11,210 --> 00:16:15,530
wrapped around it this might become

00:16:12,980 --> 00:16:18,020
confusing and it has actually I have had

00:16:15,530 --> 00:16:20,750
many people come to me and ask me hey

00:16:18,020 --> 00:16:23,000
I'm just rendering this template what is

00:16:20,750 --> 00:16:24,680
this new tip that is being wrapped

00:16:23,000 --> 00:16:26,480
around it I'm not even adding it in my

00:16:24,680 --> 00:16:28,850
template and then I had to explain that

00:16:26,480 --> 00:16:32,090
the reason why but with glimmer

00:16:28,850 --> 00:16:34,820
components it's what you write is what

00:16:32,090 --> 00:16:37,040
you get or what you see here you can see

00:16:34,820 --> 00:16:40,550
very well the bottom when I'm wrapping

00:16:37,040 --> 00:16:42,470
it around with the label tag itself so I

00:16:40,550 --> 00:16:44,390
am not doing anything special in my

00:16:42,470 --> 00:16:46,610
class rather I am just reading

00:16:44,390 --> 00:16:50,990
everything in my template itself so that

00:16:46,610 --> 00:16:54,200
is amazing also it's important for us to

00:16:50,990 --> 00:16:56,240
identify what can the local in our

00:16:54,200 --> 00:16:58,700
component and what things comes from

00:16:56,240 --> 00:17:00,590
outside with the classic components

00:16:58,700 --> 00:17:02,960
there is no way to do it because as I

00:17:00,590 --> 00:17:03,779
can see here this is your number of this

00:17:02,960 --> 00:17:07,740
and

00:17:03,779 --> 00:17:09,449
max list they both are this dot and this

00:17:07,740 --> 00:17:12,240
job there's no way for you to bloom

00:17:09,449 --> 00:17:13,980
which is a current one and which is I

00:17:12,240 --> 00:17:16,110
mean which is a local one and which is

00:17:13,980 --> 00:17:17,809
coming from the parent context but if

00:17:16,110 --> 00:17:20,909
you see in the liberal component case

00:17:17,809 --> 00:17:23,400
this dot r dot Maximus

00:17:20,909 --> 00:17:25,439
so I know now for a fact that max gas is

00:17:23,400 --> 00:17:28,350
coming from somewhere outside so it's

00:17:25,439 --> 00:17:30,059
from a parent context so that is a great

00:17:28,350 --> 00:17:33,539
way to identify what is the point of

00:17:30,059 --> 00:17:34,710
origin for any particular property so

00:17:33,539 --> 00:17:37,440
this was a little bit about glimmer

00:17:34,710 --> 00:17:39,570
components for you guys now let's talk

00:17:37,440 --> 00:17:41,900
about templating in octane now there are

00:17:39,570 --> 00:17:44,580
a lot of good things that have come in

00:17:41,900 --> 00:17:47,340
in the world of templating for octane

00:17:44,580 --> 00:17:51,140
let's start with angle bracket syntax

00:17:47,340 --> 00:17:54,380
now this angle bracket syntax is

00:17:51,140 --> 00:17:57,179
dramatic simplification of API like

00:17:54,380 --> 00:17:58,830
let's say for example in here in this

00:17:57,179 --> 00:18:01,679
example we are saying in classic

00:17:58,830 --> 00:18:02,580
templating we are invoking the component

00:18:01,679 --> 00:18:05,159
using the curlies

00:18:02,580 --> 00:18:07,860
but in octane we are booking the

00:18:05,159 --> 00:18:10,350
component using the normal HTML syntax

00:18:07,860 --> 00:18:13,200
which is angle bracket so now it's very

00:18:10,350 --> 00:18:15,179
easy for me to understand which thing is

00:18:13,200 --> 00:18:17,039
coming or which thing is a component

00:18:15,179 --> 00:18:19,770
which then use a helper which thing is a

00:18:17,039 --> 00:18:22,020
property - before it was very hard for

00:18:19,770 --> 00:18:23,870
me to understand right when I see it

00:18:22,020 --> 00:18:26,789
from the for school

00:18:23,870 --> 00:18:29,399
also with angle brackets we have

00:18:26,789 --> 00:18:31,890
something about us named arguments named

00:18:29,399 --> 00:18:33,780
arguments are away well in the previous

00:18:31,890 --> 00:18:35,700
slides we saw this dot arcs

00:18:33,780 --> 00:18:37,679
it is similar to that but if the

00:18:35,700 --> 00:18:40,730
templating side well it helps you

00:18:37,679 --> 00:18:43,380
understand where is the origin of your

00:18:40,730 --> 00:18:46,409
property coming from for example in here

00:18:43,380 --> 00:18:48,149
on the top everything has no context

00:18:46,409 --> 00:18:49,440
whatsoever you don't know where the

00:18:48,149 --> 00:18:51,090
employee name is coming from you don't

00:18:49,440 --> 00:18:53,880
know where the employee ID is coming

00:18:51,090 --> 00:18:56,190
from but in the bottom it's very clear

00:18:53,880 --> 00:18:58,320
like for example the employee ID when

00:18:56,190 --> 00:19:00,510
I'm pre fixing it with the actor it's

00:18:58,320 --> 00:19:03,299
Inder I knew that it is coming from an

00:19:00,510 --> 00:19:05,399
outside context so now I can understand

00:19:03,299 --> 00:19:07,850
that okay this is a bastion art and not

00:19:05,399 --> 00:19:11,610
something local to my JavaScript plus

00:19:07,850 --> 00:19:13,950
also a good thing to keep in mind is on

00:19:11,610 --> 00:19:16,200
the next time right now like on the

00:19:13,950 --> 00:19:17,010
classic templating side on the left side

00:19:16,200 --> 00:19:19,740
we have name

00:19:17,010 --> 00:19:22,770
M ID and an employee now it's hard to

00:19:19,740 --> 00:19:25,169
understand whether this thing is part of

00:19:22,770 --> 00:19:27,899
the HTML attribute or is it a part of

00:19:25,169 --> 00:19:29,460
your component but with okhane it's very

00:19:27,899 --> 00:19:32,159
easy because not everything that is

00:19:29,460 --> 00:19:33,990
pertinent to your component will be

00:19:32,159 --> 00:19:37,440
always prefixed with an actor it like we

00:19:33,990 --> 00:19:40,679
have right now in here also we have

00:19:37,440 --> 00:19:42,899
required this inter tickets let me have

00:19:40,679 --> 00:19:45,899
at the rate symbol for something coming

00:19:42,899 --> 00:19:48,510
from outside we should know what things

00:19:45,899 --> 00:19:51,360
recite locally in your backing class and

00:19:48,510 --> 00:19:53,909
that's where this dot employee name

00:19:51,360 --> 00:19:55,380
becomes very handy before there's no way

00:19:53,909 --> 00:19:57,750
for me to know but now I do

00:19:55,380 --> 00:19:59,490
so it's a great way to make things very

00:19:57,750 --> 00:20:01,770
specific and very concerned and very

00:19:59,490 --> 00:20:05,130
clear so this was a little bit about

00:20:01,770 --> 00:20:07,559
templating in the octane world now let's

00:20:05,130 --> 00:20:09,559
move on to track properties my personal

00:20:07,559 --> 00:20:12,000
favorite the reason being the

00:20:09,559 --> 00:20:15,419
simplification that it brings on the

00:20:12,000 --> 00:20:18,270
table but beneath it is very strong let

00:20:15,419 --> 00:20:20,990
me start by going through the syntax

00:20:18,270 --> 00:20:24,299
real quick here you can see instead of

00:20:20,990 --> 00:20:27,419
computed property when I am importing on

00:20:24,299 --> 00:20:31,590
the talk I am putting a track property

00:20:27,419 --> 00:20:35,549
from England were tracking library then

00:20:31,590 --> 00:20:38,880
any local property that I want to listen

00:20:35,549 --> 00:20:41,159
to or that I want to depend on I will

00:20:38,880 --> 00:20:45,929
mark it as track like a prefix it adds

00:20:41,159 --> 00:20:48,090
extract in the track syntax and then the

00:20:45,929 --> 00:20:49,830
magic happens on the top in classic

00:20:48,090 --> 00:20:51,990
syntax you can see there is a computed

00:20:49,830 --> 00:20:54,179
property that is depending on Fox name

00:20:51,990 --> 00:20:55,500
and last name we're at the bottom I'm

00:20:54,179 --> 00:20:58,770
not doing anything

00:20:55,500 --> 00:21:02,010
it is a simple plain JavaScript getter

00:20:58,770 --> 00:21:05,640
but the magic happens now well any

00:21:02,010 --> 00:21:07,890
property that is marked as round will

00:21:05,640 --> 00:21:11,130
make sure that any Gator

00:21:07,890 --> 00:21:12,990
that uses that tract property and if

00:21:11,130 --> 00:21:15,330
there is any chance where the track

00:21:12,990 --> 00:21:18,060
property changes it will make sure that

00:21:15,330 --> 00:21:22,430
it recalculates the Gator and sends it

00:21:18,060 --> 00:21:25,110
back to the browser so in a way the

00:21:22,430 --> 00:21:27,810
functionality or the behavior would be

00:21:25,110 --> 00:21:31,200
similar to computer but this is way

00:21:27,810 --> 00:21:33,720
better just imagine when you are writing

00:21:31,200 --> 00:21:36,840
a huge component class and you have

00:21:33,720 --> 00:21:38,460
several properties in your class and if

00:21:36,840 --> 00:21:40,050
you have to depend on few of the

00:21:38,460 --> 00:21:41,880
properties here and there for multiple

00:21:40,050 --> 00:21:43,380
computer properties there will be so

00:21:41,880 --> 00:21:47,550
many more computer properties in your

00:21:43,380 --> 00:21:49,860
class and it will be not very clean but

00:21:47,550 --> 00:21:51,930
with this you can just mark those or

00:21:49,860 --> 00:21:54,030
prefix books with tract and just read

00:21:51,930 --> 00:21:57,390
your regular Gators that's all so very

00:21:54,030 --> 00:22:00,420
clean and concise as well also no more

00:21:57,390 --> 00:22:02,670
sex my native places we have no more

00:22:00,420 --> 00:22:05,520
gates now we have no more sets

00:22:02,670 --> 00:22:07,950
so no more this dot set foo set bar or

00:22:05,520 --> 00:22:10,590
for example in here this is Georges set

00:22:07,950 --> 00:22:12,630
count equals this Georgia count no now

00:22:10,590 --> 00:22:14,220
for all this confusion just do what you

00:22:12,630 --> 00:22:16,080
regularly do in your JavaScript this

00:22:14,220 --> 00:22:18,180
your County because this job complex one

00:22:16,080 --> 00:22:20,820
and you're good to go so that's amazing

00:22:18,180 --> 00:22:23,460
so these are a few things of track

00:22:20,820 --> 00:22:25,890
properties how it works and how it

00:22:23,460 --> 00:22:29,040
behaves now let's move on to modifiers

00:22:25,890 --> 00:22:32,130
and decorators so what is a modifier you

00:22:29,040 --> 00:22:35,160
can think of modifiers functions or

00:22:32,130 --> 00:22:37,380
classes that are directly apply to the

00:22:35,160 --> 00:22:39,330
template like it's applied directly to

00:22:37,380 --> 00:22:41,940
the element itself like you can see in

00:22:39,330 --> 00:22:47,130
this example on the button tag I'm

00:22:41,940 --> 00:22:48,810
adding the or modifier itself which is

00:22:47,130 --> 00:22:51,660
just doing some usual event handling

00:22:48,810 --> 00:22:53,760
with this your agreement now you must be

00:22:51,660 --> 00:22:55,920
thinking why do I need to do this I can

00:22:53,760 --> 00:22:59,730
currently with my tip insert element

00:22:55,920 --> 00:23:02,100
hook I can associate my event listener

00:22:59,730 --> 00:23:04,380
and I'm all good to go but just think

00:23:02,100 --> 00:23:06,360
about it you can do that easily with

00:23:04,380 --> 00:23:08,340
your top-level element or the root layer

00:23:06,360 --> 00:23:10,680
element for your component but what

00:23:08,340 --> 00:23:12,720
about the child elements you could still

00:23:10,680 --> 00:23:16,200
do it but it will be a bit messy

00:23:12,720 --> 00:23:18,360
instead of that modifiers allow you to

00:23:16,200 --> 00:23:20,520
target specific elements

00:23:18,360 --> 00:23:22,800
so you can go in whichever elements you

00:23:20,520 --> 00:23:25,260
want to associate things with you can

00:23:22,800 --> 00:23:28,200
just add the modifiers in there directly

00:23:25,260 --> 00:23:31,200
and moreover it also cleans up the code

00:23:28,200 --> 00:23:33,420
for you and it also I mean cleans up the

00:23:31,200 --> 00:23:36,000
state and registers if any parameters

00:23:33,420 --> 00:23:38,040
change so that is a great thing and they

00:23:36,000 --> 00:23:40,890
are easy to reuse so there are a lot of

00:23:38,040 --> 00:23:44,250
benefits of using modifiers or not using

00:23:40,890 --> 00:23:47,220
them now let's move on to decorators

00:23:44,250 --> 00:23:49,650
what is a decorator now you can think of

00:23:47,220 --> 00:23:52,890
decorators as something that enhances

00:23:49,650 --> 00:23:55,650
the functionality of what it is prefixed

00:23:52,890 --> 00:23:57,030
on for example here you can see the

00:23:55,650 --> 00:24:00,270
increment function and decrement

00:23:57,030 --> 00:24:03,360
function as an action decorator prefixed

00:24:00,270 --> 00:24:04,740
now just the increment and decrement

00:24:03,360 --> 00:24:06,450
functions are doing the job of

00:24:04,740 --> 00:24:09,750
incrementing or decrementing at the

00:24:06,450 --> 00:24:12,240
counter but with action decorator it's

00:24:09,750 --> 00:24:14,490
doing more than that it understand them

00:24:12,240 --> 00:24:15,960
or now this function is the coming an

00:24:14,490 --> 00:24:18,450
action out there rather than just being

00:24:15,960 --> 00:24:21,420
one function so that's how it enhances

00:24:18,450 --> 00:24:24,270
the functionality so it's kind of an

00:24:21,420 --> 00:24:27,390
abstraction for the developer but it

00:24:24,270 --> 00:24:29,750
adds a lot of value so this was a little

00:24:27,390 --> 00:24:33,540
bit about modify design decorators

00:24:29,750 --> 00:24:35,940
now let's move on to the meat part now

00:24:33,540 --> 00:24:39,060
we will do the comparison between the

00:24:35,940 --> 00:24:41,700
classic and the octane syntax now here

00:24:39,060 --> 00:24:43,830
on the left a very very left side you

00:24:41,700 --> 00:24:45,210
see there's a custom off label that's

00:24:43,830 --> 00:24:48,750
what we are talking about right now

00:24:45,210 --> 00:24:50,880
it is invoked using the curly slack you

00:24:48,750 --> 00:24:54,000
can see in the bottom with toggle label

00:24:50,880 --> 00:24:55,440
and I'm passing in few arguments and in

00:24:54,000 --> 00:24:57,750
the right you can see an actual

00:24:55,440 --> 00:24:59,070
implementation of this component all

00:24:57,750 --> 00:25:01,440
this is good there's this classic

00:24:59,070 --> 00:25:02,970
component you can see a lot of things

00:25:01,440 --> 00:25:06,720
happening in the component has itself

00:25:02,970 --> 00:25:08,970
when I move it to octane this is how it

00:25:06,720 --> 00:25:10,650
looks like now the template specific

00:25:08,970 --> 00:25:13,920
stuff is in template the component

00:25:10,650 --> 00:25:15,290
sizing stuff is in component and you can

00:25:13,920 --> 00:25:17,720
see it is in both using that

00:25:15,290 --> 00:25:20,720
bracket syntax let's go through it one

00:25:17,720 --> 00:25:23,000
by one so right away you can see that

00:25:20,720 --> 00:25:24,800
the input is different on the left on

00:25:23,000 --> 00:25:27,110
the classic side we have component

00:25:24,800 --> 00:25:30,560
component and on the right side we have

00:25:27,110 --> 00:25:32,270
a grabber component next we are no

00:25:30,560 --> 00:25:34,040
longer doing the classic components in

00:25:32,270 --> 00:25:36,440
tax like on the Left we see component or

00:25:34,040 --> 00:25:38,540
extend but on the right we see native

00:25:36,440 --> 00:25:42,620
class syntax and then we are extending

00:25:38,540 --> 00:25:44,690
from climber component then no longer

00:25:42,620 --> 00:25:47,210
implicit wrappers on the left

00:25:44,690 --> 00:25:49,460
I am overriding the tag name with level

00:25:47,210 --> 00:25:52,460
but on the right if you see on the right

00:25:49,460 --> 00:25:56,480
bottom the label element is being

00:25:52,460 --> 00:26:00,620
improved in the template itself also any

00:25:56,480 --> 00:26:03,080
template specific stuff goes to template

00:26:00,620 --> 00:26:04,580
itself on the right in octane part but

00:26:03,080 --> 00:26:06,170
that's not happening in the classic we

00:26:04,580 --> 00:26:08,390
are still doing attribute bindings and

00:26:06,170 --> 00:26:11,570
class name bindings in another asset

00:26:08,390 --> 00:26:13,370
class also a few things to note on the

00:26:11,570 --> 00:26:17,090
left side in the classic syntax in the

00:26:13,370 --> 00:26:19,460
our property god is awesome and a label

00:26:17,090 --> 00:26:21,050
value of computed property that depends

00:26:19,460 --> 00:26:23,150
on that and then we are invoking and he

00:26:21,050 --> 00:26:25,940
was in this job yet but on the right

00:26:23,150 --> 00:26:28,070
instead we are pre fixing it with track

00:26:25,940 --> 00:26:31,340
that is awesome and then we are just

00:26:28,070 --> 00:26:33,560
using a normal regular getter and no

00:26:31,340 --> 00:26:38,150
longer this dot yet it is just as your

00:26:33,560 --> 00:26:40,540
awesome next thing to check is on the

00:26:38,150 --> 00:26:43,310
Left we see that we are depending on a

00:26:40,540 --> 00:26:45,230
property called value but I don't know

00:26:43,310 --> 00:26:48,020
really where this value is coming from

00:26:45,230 --> 00:26:50,270
but on the right it's very evident that

00:26:48,020 --> 00:26:52,460
it's coming from this dot R the sort of

00:26:50,270 --> 00:26:57,290
value that is coming from parent context

00:26:52,460 --> 00:26:59,260
so easy to understand also on the Left

00:26:57,290 --> 00:27:03,200
we can see that we are handling the

00:26:59,260 --> 00:27:06,530
click Hamner on the left by reading the

00:27:03,200 --> 00:27:08,330
click handler in the classic syntax but

00:27:06,530 --> 00:27:11,030
on the right we are using the on

00:27:08,330 --> 00:27:12,980
modifier to make sure we are editing on

00:27:11,030 --> 00:27:14,200
the element itself like registering here

00:27:12,980 --> 00:27:16,870
and then handle

00:27:14,200 --> 00:27:19,810
using the actions decorator so this was

00:27:16,870 --> 00:27:22,720
a little sneak peek for you to give you

00:27:19,810 --> 00:27:27,010
guys the feel of how it was before how

00:27:22,720 --> 00:27:28,990
it is now how simplified and how good

00:27:27,010 --> 00:27:31,690
the separation of logic has happened now

00:27:28,990 --> 00:27:34,230
and I hope it gives you a good

00:27:31,690 --> 00:27:38,290
understanding of what is coming forward

00:27:34,230 --> 00:27:42,070
as promised here are a few reference and

00:27:38,290 --> 00:27:44,290
guys where it would help you to migrate

00:27:42,070 --> 00:27:46,660
in a current existing I am gonna walk

00:27:44,290 --> 00:27:50,410
team like with these cold modes we have

00:27:46,660 --> 00:27:52,870
a lot of old mods in this link that you

00:27:50,410 --> 00:27:55,480
couldn't follow the folks have done a

00:27:52,870 --> 00:27:57,700
lot of hard work and it is easily seen

00:27:55,480 --> 00:28:00,130
in there you know hopefully this will be

00:27:57,700 --> 00:28:02,890
a very smooth transition for you guys

00:28:00,130 --> 00:28:04,870
also if you have any questions about my

00:28:02,890 --> 00:28:06,670
visions or migration order or something

00:28:04,870 --> 00:28:08,500
like that I am gonna Atlas would be the

00:28:06,670 --> 00:28:10,030
right place for you to go there it will

00:28:08,500 --> 00:28:14,170
give you the right amount of information

00:28:10,030 --> 00:28:17,860
for you to migrate very smoothly and the

00:28:14,170 --> 00:28:20,590
rest are a few random information for

00:28:17,860 --> 00:28:22,720
you to dig down more deep into popped in

00:28:20,590 --> 00:28:26,620
and its key concepts and deep

00:28:22,720 --> 00:28:28,930
understanding about each concept so this

00:28:26,620 --> 00:28:31,420
one it guys thank you very much for

00:28:28,930 --> 00:28:33,940
patiently listening to my talk and I

00:28:31,420 --> 00:28:37,300
hope all of you are as excited as I am

00:28:33,940 --> 00:28:39,040
for obtain and I'll see you riding up in

00:28:37,300 --> 00:28:41,130
ride of it

00:28:39,040 --> 00:28:41,130

YouTube URL: https://www.youtube.com/watch?v=ukzyBxQ9Zsc


