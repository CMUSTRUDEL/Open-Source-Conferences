Title: Virtual EmberConf 2020: The Moderate Programmer by Derek Gavey
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	The Moderate Programmer by Derek Gavey

The moderate programmer isn't mediocre they are exceptional. Moderate as in "avoiding extremes of behaviour" might be the most useful trait a programmer can possess. As programmers "extreme behaviour" is almost a given so we need to fight harder to find the right balance. Moderate programmers know where to draw the lines and when to step over them. Using real world examples we will demonstrate what makes a moderate programmer so effective and explore what we can all do to become more moderate.
Captions: 
	00:00:01,270 --> 00:00:23,650
[Music]

00:00:20,640 --> 00:00:25,590
hello everyone my name is Dara Gabi and

00:00:23,650 --> 00:00:28,210
I'm presenting to you today from the

00:00:25,590 --> 00:00:30,310
comfort of my home in rural Alberta

00:00:28,210 --> 00:00:33,220
Canada we're yet another winter storm

00:00:30,310 --> 00:00:34,600
seems to be rolling in today I'm gonna

00:00:33,220 --> 00:00:37,350
chat to you about what it is to be a

00:00:34,600 --> 00:00:39,370
moderate programmer why becoming one

00:00:37,350 --> 00:00:42,030
will make you a better programmer and

00:00:39,370 --> 00:00:44,110
maybe more importantly a better teammate

00:00:42,030 --> 00:00:45,760
first a little bit about me I'm the

00:00:44,110 --> 00:00:47,830
front-end lead at inclusive where we do

00:00:45,760 --> 00:00:55,120
public relations analytics for large

00:00:47,830 --> 00:00:56,379
brands such as lyft Airbnb etc I've been

00:00:55,120 --> 00:00:59,250
using ember for over six plus years

00:00:56,379 --> 00:01:02,290
since pre 1.0 since pre ember CLI and

00:00:59,250 --> 00:01:05,740
still using it for work and for pleasure

00:01:02,290 --> 00:01:07,690
today this is my fourth time at ember

00:01:05,740 --> 00:01:10,090
conference and my first time speaking on

00:01:07,690 --> 00:01:13,689
it my first time attending virtually as

00:01:10,090 --> 00:01:15,159
well as it is for all of you too so

00:01:13,689 --> 00:01:18,640
first off what do I mean by moderate I

00:01:15,159 --> 00:01:19,780
mean avoiding extremes of behavior I'm

00:01:18,640 --> 00:01:23,369
just gonna tell you a little story about

00:01:19,780 --> 00:01:25,689
why this matters to me I'm been a

00:01:23,369 --> 00:01:28,659
programmer now professionally for over

00:01:25,689 --> 00:01:31,060
20 years and I've been through a lot of

00:01:28,659 --> 00:01:34,030
changes in the field especially a

00:01:31,060 --> 00:01:36,759
front-end programming and I've done

00:01:34,030 --> 00:01:39,340
almost every single one of the things

00:01:36,759 --> 00:01:41,409
I'm telling you to avoid today and I

00:01:39,340 --> 00:01:43,990
think it's really important to share

00:01:41,409 --> 00:01:45,939
this story because especially junior

00:01:43,990 --> 00:01:48,009
developers and other developers who are

00:01:45,939 --> 00:01:50,409
coming up you're likely to make a lot of

00:01:48,009 --> 00:01:53,590
these and and I'm hoping that that I can

00:01:50,409 --> 00:01:55,450
shed some light on on my path to what I

00:01:53,590 --> 00:01:59,020
hope anyway is becoming a better

00:01:55,450 --> 00:02:01,869
programmer first off this is not

00:01:59,020 --> 00:02:07,600
moderate I do not recommend jumping into

00:02:01,869 --> 00:02:10,680
your tub so I don't know if it's in our

00:02:07,600 --> 00:02:14,080
DNA or if it's in our culture but

00:02:10,680 --> 00:02:15,880
extreme behavior seemed to be endemic

00:02:14,080 --> 00:02:19,840
around programmers and we have to work

00:02:15,880 --> 00:02:24,280
harder than others at actually you know

00:02:19,840 --> 00:02:26,230
curbing that that behavior it's more

00:02:24,280 --> 00:02:28,360
it's so much inner culture we even have

00:02:26,230 --> 00:02:28,740
extreme programming as a programming

00:02:28,360 --> 00:02:31,200
pair

00:02:28,740 --> 00:02:33,870
that's that's been used by a lot of

00:02:31,200 --> 00:02:35,310
people over the years so yeah like I

00:02:33,870 --> 00:02:38,580
said we have to work a little harder at

00:02:35,310 --> 00:02:40,230
curbing those behaviors so this quote

00:02:38,580 --> 00:02:41,550
moderation and all things including

00:02:40,230 --> 00:02:45,420
moderation for everything I'm going to

00:02:41,550 --> 00:02:48,690
tell you today there's of course reasons

00:02:45,420 --> 00:02:50,730
to to ignore my advice and sometimes we

00:02:48,690 --> 00:02:53,130
do have to go all-in on something and do

00:02:50,730 --> 00:02:54,870
an extreme behavior depending other

00:02:53,130 --> 00:02:56,940
thing however I do think that we should

00:02:54,870 --> 00:02:59,640
be fighting for the middle ground not

00:02:56,940 --> 00:03:03,480
only in programming but really in life

00:02:59,640 --> 00:03:04,520
itself so this quote was brought to you

00:03:03,480 --> 00:03:08,090
by my mother

00:03:04,520 --> 00:03:11,130
well actually it was Oscar Wilde or

00:03:08,090 --> 00:03:13,470
before that apparently this quote can be

00:03:11,130 --> 00:03:16,440
attributed to Socrates so the idea of

00:03:13,470 --> 00:03:18,690
moderation in society and and as human

00:03:16,440 --> 00:03:25,320
has been around for as long as we've had

00:03:18,690 --> 00:03:27,060
society so first item is the moderate

00:03:25,320 --> 00:03:29,610
programmer names things appropriately

00:03:27,060 --> 00:03:32,580
but with enough detail so let's dive

00:03:29,610 --> 00:03:36,110
into some examples of that here at the

00:03:32,580 --> 00:03:39,180
top we have a not specifically enough

00:03:36,110 --> 00:03:42,030
named array so we have an array of items

00:03:39,180 --> 00:03:44,610
that contains a name of Canada which

00:03:42,030 --> 00:03:47,880
guesses the country although it just

00:03:44,610 --> 00:03:50,400
says name so I'm not sure code is yeah

00:03:47,880 --> 00:03:52,560
well what kind of code hmm well let's go

00:03:50,400 --> 00:03:54,720
into a two specifically named example

00:03:52,560 --> 00:03:57,330
now we have country ISO code objects

00:03:54,720 --> 00:03:59,880
which is better but that's pretty long

00:03:57,330 --> 00:04:03,330
and oh look we're repeating country ISO

00:03:59,880 --> 00:04:04,380
twice so that's a lot to read a lot to

00:04:03,330 --> 00:04:06,000
look at that's gonna make it more

00:04:04,380 --> 00:04:08,940
difficult for someone looking at it

00:04:06,000 --> 00:04:12,060
after in the moderate way on the bottom

00:04:08,940 --> 00:04:16,380
we have all countries name is Canada and

00:04:12,060 --> 00:04:18,060
the ISO code is ca ca so now we have a

00:04:16,380 --> 00:04:19,440
little bit more information about that

00:04:18,060 --> 00:04:22,200
that's going to be easier for someone to

00:04:19,440 --> 00:04:24,210
read let's go through some rules about

00:04:22,200 --> 00:04:26,520
naming things you should name things

00:04:24,210 --> 00:04:29,370
three words or less whether that's a

00:04:26,520 --> 00:04:32,580
variable or a function or class any more

00:04:29,370 --> 00:04:34,920
than that is probably too verbose we

00:04:32,580 --> 00:04:37,580
should avoid jargon to metaphors try not

00:04:34,920 --> 00:04:42,100
using the words factory or object or

00:04:37,580 --> 00:04:45,100
class all of those things are repetitive

00:04:42,100 --> 00:04:47,770
and do cause problems in the code you

00:04:45,100 --> 00:04:50,380
should also use plurals where

00:04:47,770 --> 00:04:53,530
appropriate this would be in the case of

00:04:50,380 --> 00:04:56,650
arrays or collections or maps it signals

00:04:53,530 --> 00:04:58,000
to your teammates or for you looking at

00:04:56,650 --> 00:05:00,610
your code in the future that this in

00:04:58,000 --> 00:05:03,340
fact is multiple items makes it easier

00:05:00,610 --> 00:05:06,130
to understand also for boolean is prefix

00:05:03,340 --> 00:05:09,340
with is has can again this is another

00:05:06,130 --> 00:05:11,440
trigger when we're looking at it at the

00:05:09,340 --> 00:05:13,570
code later it's much more clear that

00:05:11,440 --> 00:05:17,520
this is in fact a boolean if it has

00:05:13,570 --> 00:05:20,380
those those words in front of it for

00:05:17,520 --> 00:05:26,010
functions use a verb then now like get

00:05:20,380 --> 00:05:26,010
users find admin things like that

00:05:26,070 --> 00:05:30,820
number two the moderate programmer

00:05:28,780 --> 00:05:33,220
writes small functions but not too many

00:05:30,820 --> 00:05:35,260
so again here's another example this

00:05:33,220 --> 00:05:38,050
function is doing far too much we got

00:05:35,260 --> 00:05:40,690
set country per user and we're passing

00:05:38,050 --> 00:05:42,820
in an ISO code and a save user which i

00:05:40,690 --> 00:05:44,530
think is a flag it's a little bit hard

00:05:42,820 --> 00:05:46,510
to understand though not that this

00:05:44,530 --> 00:05:49,540
function has too many lines it's only

00:05:46,510 --> 00:05:52,390
about ten but that's is doing

00:05:49,540 --> 00:05:54,820
conceptually too many things so let's

00:05:52,390 --> 00:05:56,950
break it up oh we've broken up far too

00:05:54,820 --> 00:05:59,170
much look at this we got now four

00:05:56,950 --> 00:06:02,410
functions where we have one before so

00:05:59,170 --> 00:06:04,780
now we gotta get user get ISO code SAVE

00:06:02,410 --> 00:06:06,820
user get country and then the main

00:06:04,780 --> 00:06:10,060
functions start save user well this

00:06:06,820 --> 00:06:12,100
isn't quite right it's going to be

00:06:10,060 --> 00:06:13,810
really difficult to because every time

00:06:12,100 --> 00:06:15,850
we get to it costs user equals sisters

00:06:13,810 --> 00:06:17,800
here okay what does this get user yeah

00:06:15,850 --> 00:06:20,110
so now we jump up have to look at it

00:06:17,800 --> 00:06:22,630
this becomes a lot more difficult to

00:06:20,110 --> 00:06:25,180
understand here's a nice moderate

00:06:22,630 --> 00:06:28,540
example of writing small functions we

00:06:25,180 --> 00:06:31,420
have now two functions both do one thing

00:06:28,540 --> 00:06:33,790
conceptually the first one gets the

00:06:31,420 --> 00:06:36,100
country code or gets the continuum from

00:06:33,790 --> 00:06:38,920
the ISO code the second saves the user

00:06:36,100 --> 00:06:41,230
we check if the user is valid we see if

00:06:38,920 --> 00:06:44,110
we get the country set it to the user

00:06:41,230 --> 00:06:46,180
save the user set a user flag so much

00:06:44,110 --> 00:06:49,510
more easy to understand this code than

00:06:46,180 --> 00:06:52,150
the last two examples so again some

00:06:49,510 --> 00:06:53,340
rules a function should conceptually do

00:06:52,150 --> 00:06:55,840
one thing

00:06:53,340 --> 00:06:59,560
beware of how many flags you have

00:06:55,840 --> 00:07:01,030
arguments any flags even one is probably

00:06:59,560 --> 00:07:02,440
a sign that your function is doing too

00:07:01,030 --> 00:07:04,630
many things and you may want to

00:07:02,440 --> 00:07:06,780
reconsider that be aware of how many

00:07:04,630 --> 00:07:09,370
arguments you're passing to a function

00:07:06,780 --> 00:07:11,860
again too many arguments I'd say even

00:07:09,370 --> 00:07:15,220
more than three and that's probably

00:07:11,860 --> 00:07:18,699
again a good indicator that it likely

00:07:15,220 --> 00:07:20,410
should be refactored components are

00:07:18,699 --> 00:07:22,240
functions too and this is really

00:07:20,410 --> 00:07:23,860
important so everything I said here also

00:07:22,240 --> 00:07:26,590
applies to your component creation

00:07:23,860 --> 00:07:28,900
because conceptionally components are

00:07:26,590 --> 00:07:31,900
functions as well so your component

00:07:28,900 --> 00:07:33,430
should do one thing you you should

00:07:31,900 --> 00:07:35,139
beware how many flags you're passing to

00:07:33,430 --> 00:07:37,389
your component as well as how many

00:07:35,139 --> 00:07:43,030
arguments or McKissack ramona's

00:07:37,389 --> 00:07:44,470
properties you're passing to it so the

00:07:43,030 --> 00:07:48,460
number three in the moderate programmer

00:07:44,470 --> 00:07:50,919
rights tests but only enough so you've

00:07:48,460 --> 00:07:53,020
probably seen this before eat food not

00:07:50,919 --> 00:07:55,240
too much mostly plants this is a nice

00:07:53,020 --> 00:08:00,240
moderate take on eating by Michael

00:07:55,240 --> 00:08:04,030
Pollan and in in programming we have

00:08:00,240 --> 00:08:06,160
this so Guillermo wrote this while ago

00:08:04,030 --> 00:08:08,320
write tests not too many mostly

00:08:06,160 --> 00:08:11,849
integration now if you take the idea

00:08:08,320 --> 00:08:16,990
that that writing tests is like a

00:08:11,849 --> 00:08:18,940
nutritional balance for your program

00:08:16,990 --> 00:08:21,729
they have some similar parallel

00:08:18,940 --> 00:08:23,590
parallels so writing tests because if we

00:08:21,729 --> 00:08:26,470
don't write tests we're starving our

00:08:23,590 --> 00:08:28,389
program not too many because too many

00:08:26,470 --> 00:08:31,389
and our program is going to become

00:08:28,389 --> 00:08:33,550
bloated and we mostly want to do

00:08:31,389 --> 00:08:34,750
integration you know why do we want to

00:08:33,550 --> 00:08:37,630
mostly do integration because

00:08:34,750 --> 00:08:41,349
integration gives you the best balance

00:08:37,630 --> 00:08:45,130
of knowing enough about the program to

00:08:41,349 --> 00:08:49,080
find regressions and not enough that

00:08:45,130 --> 00:08:52,690
it's going to become tripped up over

00:08:49,080 --> 00:08:56,200
changes that aren't important that don't

00:08:52,690 --> 00:08:58,630
need to be caught in regression test so

00:08:56,200 --> 00:09:00,550
again some rules write your tests and

00:08:58,630 --> 00:09:02,680
write them immediately or you probably

00:09:00,550 --> 00:09:04,320
won't write them so I'm not saying that

00:09:02,680 --> 00:09:06,700
you need to do test-driven development

00:09:04,320 --> 00:09:07,350
I'm saying that you should make sure

00:09:06,700 --> 00:09:11,750
that you

00:09:07,350 --> 00:09:13,920
tests in your own PR right away

00:09:11,750 --> 00:09:16,110
ember integration tests are your best

00:09:13,920 --> 00:09:18,650
bet again they're the perfect middle

00:09:16,110 --> 00:09:21,450
ground or the perfect moderate ground in

00:09:18,650 --> 00:09:25,670
where you're going the best bang for

00:09:21,450 --> 00:09:27,750
your buck when it comes to testing then

00:09:25,670 --> 00:09:29,910
unit tests know too much about the

00:09:27,750 --> 00:09:32,700
implementation I'm not saying don't do

00:09:29,910 --> 00:09:34,500
unit tests they're important just as

00:09:32,700 --> 00:09:36,660
important however you should be using

00:09:34,500 --> 00:09:42,150
them sparingly and only when it's it's

00:09:36,660 --> 00:09:43,920
important for a regression to be caught

00:09:42,150 --> 00:09:47,160
except this test can also become too

00:09:43,920 --> 00:09:50,520
fragile and they don't really know

00:09:47,160 --> 00:09:53,160
enough about about your program so

00:09:50,520 --> 00:09:57,120
they're often catching things where they

00:09:53,160 --> 00:09:59,160
shouldn't be and it becomes that you're

00:09:57,120 --> 00:10:02,100
fixing tests more than you're fixing

00:09:59,160 --> 00:10:04,680
problems so don't forget you have

00:10:02,100 --> 00:10:06,510
diminishing returns after whatever

00:10:04,680 --> 00:10:07,800
percent of code coverage this is

00:10:06,510 --> 00:10:10,200
different for every team and every

00:10:07,800 --> 00:10:11,820
project I'd consider talking to your

00:10:10,200 --> 00:10:14,220
team about their to see just just how

00:10:11,820 --> 00:10:16,860
many tests do you need to catch those

00:10:14,220 --> 00:10:21,240
regressions to to catch any bugs that

00:10:16,860 --> 00:10:23,630
you might introduce so the moderate

00:10:21,240 --> 00:10:27,060
programmer factors but only eventually

00:10:23,630 --> 00:10:28,740
this talk by Sandi Metz in 2014 at rails

00:10:27,060 --> 00:10:30,210
conference so it's really great and she

00:10:28,740 --> 00:10:32,880
talked about refactoring you don't need

00:10:30,210 --> 00:10:35,010
to be a ruby developer or even a rails

00:10:32,880 --> 00:10:38,490
developer done you're just Dan this talk

00:10:35,010 --> 00:10:40,800
I highly recommend it she says one thing

00:10:38,490 --> 00:10:42,840
in that that really resonated with me

00:10:40,800 --> 00:10:45,450
and she says duplication is far cheaper

00:10:42,840 --> 00:10:48,030
than the wrong abstraction she even has

00:10:45,450 --> 00:10:51,540
a blog post specifically about that and

00:10:48,030 --> 00:10:53,820
I think it's it's really important but

00:10:51,540 --> 00:10:55,470
above that I've written bright ugly code

00:10:53,820 --> 00:10:56,850
and that's the one thing if you're only

00:10:55,470 --> 00:10:59,070
gonna take one thing from my talk today

00:10:56,850 --> 00:11:01,890
I want you to take that I want you to

00:10:59,070 --> 00:11:04,830
have permission to yourself to write

00:11:01,890 --> 00:11:07,740
ugly code because unless you write ugly

00:11:04,830 --> 00:11:10,170
code you're not gonna know what

00:11:07,740 --> 00:11:12,840
beautiful code is you're not gonna know

00:11:10,170 --> 00:11:15,420
what the right abstraction is going to

00:11:12,840 --> 00:11:18,270
be you also might make it harder for

00:11:15,420 --> 00:11:20,430
your teammates to read the code so it's

00:11:18,270 --> 00:11:21,180
really important that at least at first

00:11:20,430 --> 00:11:23,190
you write

00:11:21,180 --> 00:11:25,500
it's okay to write those for loops

00:11:23,190 --> 00:11:30,450
instead of the filter it's okay to write

00:11:25,500 --> 00:11:33,630
the if statements it's okay to write the

00:11:30,450 --> 00:11:36,480
ugly code so this came up the other day

00:11:33,630 --> 00:11:38,580
Jeff Atwood tweeted the older I get the

00:11:36,480 --> 00:11:40,530
more I enjoyed dumb verbose code over

00:11:38,580 --> 00:11:42,030
fancy concise code and I thought this

00:11:40,530 --> 00:11:44,940
kind of summed up what I was talking

00:11:42,030 --> 00:11:48,900
about fairly well so you can see at the

00:11:44,940 --> 00:11:52,650
top it's a much more complicated thing

00:11:48,900 --> 00:11:54,630
to understand then then below so again

00:11:52,650 --> 00:11:56,310
some rules rule of three abstract on

00:11:54,630 --> 00:11:59,100
your third duplication if you're gonna

00:11:56,310 --> 00:12:00,570
refactor it's okay if you leave some

00:11:59,100 --> 00:12:03,840
duplication in your coat that's not a

00:12:00,570 --> 00:12:05,220
sin you absolutely can do it in fact you

00:12:03,840 --> 00:12:06,810
probably want to do it up to your third

00:12:05,220 --> 00:12:08,130
time at that point you should be

00:12:06,810 --> 00:12:11,970
considering what the right abstraction

00:12:08,130 --> 00:12:13,080
should be well future me or my teammates

00:12:11,970 --> 00:12:14,850
understand this better

00:12:13,080 --> 00:12:16,950
and when I say future me I don't mean

00:12:14,850 --> 00:12:18,450
future mean that has been working on

00:12:16,950 --> 00:12:20,220
this code for three days and knows it

00:12:18,450 --> 00:12:23,730
inside out but future me who's been

00:12:20,220 --> 00:12:25,170
tired who is under slapped and who is

00:12:23,730 --> 00:12:26,940
now stressed because they have to figure

00:12:25,170 --> 00:12:28,620
out that code that's a different person

00:12:26,940 --> 00:12:31,740
than you are when you're writing it so

00:12:28,620 --> 00:12:34,260
you really want to consider that way the

00:12:31,740 --> 00:12:36,870
costs of the refactor is this going to

00:12:34,260 --> 00:12:39,990
be better for the program or is it just

00:12:36,870 --> 00:12:41,730
clever like is it going to stop bugs

00:12:39,990 --> 00:12:44,460
from coming up is it going to be easier

00:12:41,730 --> 00:12:46,800
for my teammates to read and I think

00:12:44,460 --> 00:12:50,640
that that's maybe the most important key

00:12:46,800 --> 00:12:59,130
is you should be erring towards easier

00:12:50,640 --> 00:13:01,560
to read rather than easier to write so

00:12:59,130 --> 00:13:02,130
the moderate program gives up but not

00:13:01,560 --> 00:13:03,990
forever

00:13:02,130 --> 00:13:06,330
so there's a number of examples about

00:13:03,990 --> 00:13:08,580
this let's go through each type of

00:13:06,330 --> 00:13:12,000
giving up first off give up and ask

00:13:08,580 --> 00:13:13,920
someone for help and this is probably

00:13:12,000 --> 00:13:15,420
the most important versions of the

00:13:13,920 --> 00:13:17,100
giving up if you're struggling with

00:13:15,420 --> 00:13:20,880
trying to get some code written if

00:13:17,100 --> 00:13:22,200
you're not sure and you banged your head

00:13:20,880 --> 00:13:23,970
against your monitor for three hours

00:13:22,200 --> 00:13:24,960
it's definitely time to give up and ask

00:13:23,970 --> 00:13:25,590
someone for help that could be a

00:13:24,960 --> 00:13:28,620
teammate

00:13:25,590 --> 00:13:30,930
it could be online it could three be in

00:13:28,620 --> 00:13:32,610
discord it could be just a Stack

00:13:30,930 --> 00:13:35,100
Overflow search but it's really

00:13:32,610 --> 00:13:38,410
important to stop and do that

00:13:35,100 --> 00:13:40,510
also I found that while asking for

00:13:38,410 --> 00:13:42,040
someone for help within minutes of

00:13:40,510 --> 00:13:44,500
trying to explain the problem I've

00:13:42,040 --> 00:13:46,870
already solved it in my head and I don't

00:13:44,500 --> 00:13:48,610
even need to talk to someone anymore so

00:13:46,870 --> 00:13:50,380
it's more important that we need to do

00:13:48,610 --> 00:13:53,470
this and not just power through when

00:13:50,380 --> 00:13:56,170
we're struggling also give up and take a

00:13:53,470 --> 00:13:57,820
break take a walk play a guitar do some

00:13:56,170 --> 00:13:59,500
yoga whatever it is that takes you away

00:13:57,820 --> 00:14:02,110
from programming even if that's just for

00:13:59,500 --> 00:14:03,760
15 minutes that will clear your mind and

00:14:02,110 --> 00:14:06,430
make it easier to solve your problems

00:14:03,760 --> 00:14:08,680
and finally give up and throw out your

00:14:06,430 --> 00:14:11,380
code it's okay you can write your code

00:14:08,680 --> 00:14:12,820
two three times and sometimes you have

00:14:11,380 --> 00:14:15,310
to struggle through it once or twice

00:14:12,820 --> 00:14:18,130
before you find the right way to do it

00:14:15,310 --> 00:14:20,140
so I'd say it's okay to throw out your

00:14:18,130 --> 00:14:21,490
code you probably want to get stash at

00:14:20,140 --> 00:14:24,910
first you'd be surprised at how many

00:14:21,490 --> 00:14:26,980
times you might need it so let's sum up

00:14:24,910 --> 00:14:29,950
what we've been through today we talked

00:14:26,980 --> 00:14:32,620
about the moderate programmer names

00:14:29,950 --> 00:14:35,560
things but with enough detail write

00:14:32,620 --> 00:14:39,450
small functions but not too many writes

00:14:35,560 --> 00:14:42,910
only enough tests rhe factors their code

00:14:39,450 --> 00:14:47,590
eventually and the moderate programmer

00:14:42,910 --> 00:14:49,330
knows when to temporarily give up thank

00:14:47,590 --> 00:14:51,070
you everyone I really appreciate you

00:14:49,330 --> 00:14:54,070
listening to my talk and please reach

00:14:51,070 --> 00:14:56,110
out to me on discord or wherever you can

00:14:54,070 --> 00:14:58,710
find me and I would love to chat to you

00:14:56,110 --> 00:14:58,710

YouTube URL: https://www.youtube.com/watch?v=V9xHfex3ttc


