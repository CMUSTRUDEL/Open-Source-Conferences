Title: Virtual EmberConf 2020: Programmer's Bookshelf: Cliff Notes Edition by Lisa Backer
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	EmberConf 2020: Programmer's Bookshelf: Cliff Notes Edition by Lisa Backer

"The Pragmatic Programmer", "Clean Code", "Refactoring" - these are among the classic works that we are told should be on every programmer's bookshelf. Often, they make it to the shelf, but remain unread. Have you ever wondered why these books are considered such beacons to our community? Have you maybe even felt guilty for not reading them all?

We'll go through the "cliff notes" edition of these classics, and maybe even find a few future classics to inspire you to check out whatâ€™s on your own bookshelf.
Captions: 
	00:00:01,270 --> 00:00:06,140
[Music]

00:00:05,930 --> 00:00:20,220
[Applause]

00:00:06,140 --> 00:00:23,289
[Music]

00:00:20,220 --> 00:00:25,830
so hi there welcome to this remote

00:00:23,289 --> 00:00:28,540
edition of the programmers bookshelf I

00:00:25,830 --> 00:00:31,180
am Lisa Becker and I am coming to you

00:00:28,540 --> 00:00:32,980
from Arlington Virginia and this would

00:00:31,180 --> 00:00:35,140
be a picture of the family that I would

00:00:32,980 --> 00:00:36,730
be missing so much from Portland but I'm

00:00:35,140 --> 00:00:40,330
not missing them at all because they're

00:00:36,730 --> 00:00:42,940
downstairs so I am a senior software

00:00:40,330 --> 00:00:45,460
engineer but that didn't always used to

00:00:42,940 --> 00:00:47,199
be the case so I thought I'd introduced

00:00:45,460 --> 00:00:49,449
this topic by giving you a little bit of

00:00:47,199 --> 00:00:53,140
a background on how books came to play

00:00:49,449 --> 00:00:54,790
an important role in my life so I like

00:00:53,140 --> 00:00:57,100
many of you to not graduate with a

00:00:54,790 --> 00:00:59,739
computer science degree I had more of an

00:00:57,100 --> 00:01:01,629
organic career path I wanted to do dance

00:00:59,739 --> 00:01:04,269
programming which is not the same as

00:01:01,629 --> 00:01:06,040
computer programming so I got an

00:01:04,269 --> 00:01:07,780
internship at this place the Kennedy

00:01:06,040 --> 00:01:11,590
Center for the Performing Arts in

00:01:07,780 --> 00:01:14,619
Washington DC I worked there and then to

00:01:11,590 --> 00:01:18,369
stay and staff I took a position in the

00:01:14,619 --> 00:01:20,260
office of the CIO and the web folks that

00:01:18,369 --> 00:01:23,229
worked with him needed a little help

00:01:20,260 --> 00:01:24,640
so I started helping out on the web now

00:01:23,229 --> 00:01:26,619
some of you may know that working in the

00:01:24,640 --> 00:01:29,020
arts doesn't pay a lot so I also waited

00:01:26,619 --> 00:01:31,140
tables on the side and I worked in a

00:01:29,020 --> 00:01:33,880
crab house this is important because

00:01:31,140 --> 00:01:35,740
crabs Maryland crabs specifically are

00:01:33,880 --> 00:01:37,299
seasonal and they're only available in

00:01:35,740 --> 00:01:39,640
the summertime so that means in the

00:01:37,299 --> 00:01:42,700
winter I was really bored and so I read

00:01:39,640 --> 00:01:45,460
manuals because back then software came

00:01:42,700 --> 00:01:48,130
with manuals so I'm these were good for

00:01:45,460 --> 00:01:49,630
getting familiar with how to do basic

00:01:48,130 --> 00:01:51,850
tasks and what was available in a

00:01:49,630 --> 00:01:53,950
language or a trademark and it helped me

00:01:51,850 --> 00:01:55,479
get better helping with the web folks

00:01:53,950 --> 00:01:57,719
and so I started getting promoted and

00:01:55,479 --> 00:02:00,909
that meant I could stop waiting tables

00:01:57,719 --> 00:02:03,909
and I also started working on more

00:02:00,909 --> 00:02:05,409
complicated projects now Beth and I

00:02:03,909 --> 00:02:06,999
didn't have any mentor I could turn to I

00:02:05,409 --> 00:02:09,850
didn't have any senior developers I

00:02:06,999 --> 00:02:11,170
could talk problems went through so it

00:02:09,850 --> 00:02:14,980
became kind of difficult to figure out

00:02:11,170 --> 00:02:17,800
how to deal with all this so in the

00:02:14,980 --> 00:02:20,490
early 2000s several important books had

00:02:17,800 --> 00:02:23,590
just come out and they became my mentors

00:02:20,490 --> 00:02:25,840
they encouraged me by validating my

00:02:23,590 --> 00:02:27,490
approaches they supported me with how to

00:02:25,840 --> 00:02:29,770
communicate with programmers and

00:02:27,490 --> 00:02:31,810
non-programmers they helped me structure

00:02:29,770 --> 00:02:35,050
my thinking and be able to approach

00:02:31,810 --> 00:02:36,849
these more difficult problems so

00:02:35,050 --> 00:02:38,650
fast-forward to today I am a senior

00:02:36,849 --> 00:02:41,920
software engineer at Dockyard we are a

00:02:38,650 --> 00:02:43,420
digital product consulting agency and as

00:02:41,920 --> 00:02:45,849
you can see here I get to work with some

00:02:43,420 --> 00:02:47,920
pretty awesome clients I also work with

00:02:45,849 --> 00:02:49,180
some amazingly smart people some of

00:02:47,920 --> 00:02:50,170
which you're hearing from at this

00:02:49,180 --> 00:02:51,610
conference

00:02:50,170 --> 00:02:53,650
some of these people that I work with

00:02:51,610 --> 00:02:56,319
they have really fancy computer science

00:02:53,650 --> 00:02:58,030
degrees and some of them don't they all

00:02:56,319 --> 00:03:00,069
bring an interesting perspective and

00:02:58,030 --> 00:03:02,680
they all treat their work as refining a

00:03:00,069 --> 00:03:06,030
craft this reminded me of my old books

00:03:02,680 --> 00:03:08,590
so I decided to go back and take a look

00:03:06,030 --> 00:03:10,720
this time there was a new level of

00:03:08,590 --> 00:03:12,519
inspiration not only were they

00:03:10,720 --> 00:03:14,230
validating my approach but they reminded

00:03:12,519 --> 00:03:15,970
me why I stick to that approach in the

00:03:14,230 --> 00:03:18,400
first place and that it's worth fighting

00:03:15,970 --> 00:03:20,470
for that even when I'm faced with a

00:03:18,400 --> 00:03:22,690
challenging project or a challenging

00:03:20,470 --> 00:03:25,239
person perhaps these books invite

00:03:22,690 --> 00:03:27,370
inspire me to stay motivated and to keep

00:03:25,239 --> 00:03:31,060
reinventing myself in tech which as we

00:03:27,370 --> 00:03:33,280
know is a requirement in this career so

00:03:31,060 --> 00:03:34,959
here we are programmers bookshelf so

00:03:33,280 --> 00:03:37,980
we're gonna go through two classics that

00:03:34,959 --> 00:03:40,390
I chose today based on their relevance

00:03:37,980 --> 00:03:42,730
currently and also based on the impact

00:03:40,390 --> 00:03:45,250
they had on my own career the first is

00:03:42,730 --> 00:03:46,810
the pragmatic programmer this approaches

00:03:45,250 --> 00:03:47,950
software development as a craft and it's

00:03:46,810 --> 00:03:50,109
my favorite

00:03:47,950 --> 00:03:51,720
and then refactoring which gives more

00:03:50,109 --> 00:03:53,980
focused technical advice and

00:03:51,720 --> 00:03:58,540
specifically around scene refactoring

00:03:53,980 --> 00:04:02,049
principles so a little bit of a history

00:03:58,540 --> 00:04:04,120
here back in 1999 and reprise software

00:04:02,049 --> 00:04:05,380
was really large and really complicated

00:04:04,120 --> 00:04:07,030
and really expensive

00:04:05,380 --> 00:04:08,799
everyone had Gantt shards and like

00:04:07,030 --> 00:04:11,920
Microsoft Project and these horrible

00:04:08,799 --> 00:04:14,079
waterfall approaches but there was this

00:04:11,920 --> 00:04:16,930
subversive culture of open-source that

00:04:14,079 --> 00:04:19,180
was starting to appear and this work on

00:04:16,930 --> 00:04:21,400
the cathedral and the bazaar brought

00:04:19,180 --> 00:04:22,630
that to the masses and really made

00:04:21,400 --> 00:04:25,600
people understand how this could be

00:04:22,630 --> 00:04:27,460
viable it kind of contrasted the idea of

00:04:25,600 --> 00:04:29,320
this pristine waterfall approach with a

00:04:27,460 --> 00:04:31,479
few people in a room as building a

00:04:29,320 --> 00:04:33,789
cathedral versus like the raucous

00:04:31,479 --> 00:04:36,550
diverse methods of a distributed open

00:04:33,789 --> 00:04:38,169
source as the bazaar even though the

00:04:36,550 --> 00:04:40,000
authors no longer relevant

00:04:38,169 --> 00:04:42,520
this work is freely available and I

00:04:40,000 --> 00:04:44,349
strongly suggest reading it partially to

00:04:42,520 --> 00:04:45,080
know your history but also because it

00:04:44,349 --> 00:04:46,669
guy is really good

00:04:45,080 --> 00:04:49,729
device about working in teams and open

00:04:46,669 --> 00:04:52,099
source so anyway our books refactoring

00:04:49,729 --> 00:04:54,259
in 1999 somewhere in there and I started

00:04:52,099 --> 00:04:57,620
and then in 2000 the pragmatic

00:04:54,259 --> 00:04:59,780
programmer finally in 2001 the agile

00:04:57,620 --> 00:05:03,439
manifesto so let's pause for a second on

00:04:59,780 --> 00:05:05,090
that the agile manifesto this is the

00:05:03,439 --> 00:05:06,530
entire thing here up in the screen don't

00:05:05,090 --> 00:05:08,719
try to read it all but focus a little

00:05:06,530 --> 00:05:10,550
bit on the middle there the point is

00:05:08,719 --> 00:05:12,259
this we were in a time of transition and

00:05:10,550 --> 00:05:15,530
the emphasis in the industry was moving

00:05:12,259 --> 00:05:18,469
from super hardcore planned out long

00:05:15,530 --> 00:05:22,190
processes with heavily documented and

00:05:18,469 --> 00:05:24,440
and a lot of risk to collaboration and

00:05:22,190 --> 00:05:28,099
faster delivery and responding to change

00:05:24,440 --> 00:05:31,400
as the priority so that's where were two

00:05:28,099 --> 00:05:33,409
recent last year the refactoring was

00:05:31,400 --> 00:05:35,840
revised and so there's the pragmatic

00:05:33,409 --> 00:05:39,319
programmer and then here we are today at

00:05:35,840 --> 00:05:42,979
a remote conference in 2020 so the

00:05:39,319 --> 00:05:44,300
pragmatic programmer it was considered

00:05:42,979 --> 00:05:46,189
by many to be one of the most

00:05:44,300 --> 00:05:48,889
influential programming books it was

00:05:46,189 --> 00:05:50,599
written by Dave Thomas and Andy Hunt who

00:05:48,889 --> 00:05:54,080
were also contributing authors to the

00:05:50,599 --> 00:05:55,759
agile manifesto it consists of a hundred

00:05:54,080 --> 00:05:58,400
different tips within sections that are

00:05:55,759 --> 00:06:00,529
organized into like broad topics each

00:05:58,400 --> 00:06:02,120
sections really short and digestible and

00:06:00,529 --> 00:06:03,979
cross-reference to the other sections

00:06:02,120 --> 00:06:05,930
and each section gives you challenge

00:06:03,979 --> 00:06:09,379
questions at the end kind of thought

00:06:05,930 --> 00:06:10,699
questions that you can work through so

00:06:09,379 --> 00:06:12,889
what does it mean to be pragmatic a

00:06:10,699 --> 00:06:15,349
pragmatic approach is to keep a larger

00:06:12,889 --> 00:06:17,690
perspective and it's to see and solve an

00:06:15,349 --> 00:06:21,050
immediate problem while still thinking

00:06:17,690 --> 00:06:22,069
about it in the larger context so I mean

00:06:21,050 --> 00:06:24,469
when I think about the pragmatic

00:06:22,069 --> 00:06:26,120
programmers as a work it's kind of like

00:06:24,469 --> 00:06:27,379
this mentor in my office that guides me

00:06:26,120 --> 00:06:29,180
to haven't really elegant and

00:06:27,379 --> 00:06:32,839
maintainable code but being pragmatic

00:06:29,180 --> 00:06:34,180
about having delivering code so we're

00:06:32,839 --> 00:06:36,620
gonna go through a couple sections today

00:06:34,180 --> 00:06:40,699
highlights from a pragmatic philosophy

00:06:36,620 --> 00:06:42,169
and a pragmatic approach one of the

00:06:40,699 --> 00:06:44,360
overarching principles of this book is

00:06:42,169 --> 00:06:45,889
personal responsibility you are

00:06:44,360 --> 00:06:47,419
responsible for your career you're

00:06:45,889 --> 00:06:49,580
responsible for your code and your

00:06:47,419 --> 00:06:51,050
deadlines this also means you're

00:06:49,580 --> 00:06:52,339
responsible for dealing with problems

00:06:51,050 --> 00:06:54,020
when they come up you have to raise your

00:06:52,339 --> 00:06:55,729
hand when something is no longer

00:06:54,020 --> 00:06:57,490
possible and you're responsible for

00:06:55,729 --> 00:07:00,639
suggesting and alternative not

00:06:57,490 --> 00:07:02,259
giving up and being defeatist excuses

00:07:00,639 --> 00:07:05,500
like the cat ate my source code they're

00:07:02,259 --> 00:07:08,680
just not gonna fly stated another way

00:07:05,500 --> 00:07:10,449
tip number three says you have agency so

00:07:08,680 --> 00:07:12,280
the scenario fear is a frustrated

00:07:10,449 --> 00:07:13,810
developer who's kind of stagnating in

00:07:12,280 --> 00:07:15,639
their job um maybe they feel

00:07:13,810 --> 00:07:18,039
technology's passing them by maybe

00:07:15,639 --> 00:07:20,080
they're underappreciated underpaid part

00:07:18,039 --> 00:07:22,150
of a toxic team like you all know the

00:07:20,080 --> 00:07:25,449
scenario um the tip here is to remember

00:07:22,150 --> 00:07:28,300
that you are in control Martin Fowler

00:07:25,449 --> 00:07:30,580
who we'll get to soon said you can

00:07:28,300 --> 00:07:33,840
change your organization or you can

00:07:30,580 --> 00:07:36,310
change your organization

00:07:33,840 --> 00:07:38,319
speaking of responsibilities the

00:07:36,310 --> 00:07:40,419
industry puts a lot of pressure on us to

00:07:38,319 --> 00:07:43,270
continue learning and changing and it's

00:07:40,419 --> 00:07:45,069
our responsibility to keep up knowledge

00:07:43,270 --> 00:07:47,139
and experience are the most valuable

00:07:45,069 --> 00:07:49,659
assets for software developers but they

00:07:47,139 --> 00:07:51,159
are expiring assets oh so pragmatic

00:07:49,659 --> 00:07:55,000
programmer tells us to think about this

00:07:51,159 --> 00:07:57,280
as an investment portfolio and they have

00:07:55,000 --> 00:07:59,740
an investment advice of course so invest

00:07:57,280 --> 00:08:01,150
in yourself regularly as a habit these

00:07:59,740 --> 00:08:03,310
are like the small things listening to

00:08:01,150 --> 00:08:07,990
podcasts reading blog posts going to

00:08:03,310 --> 00:08:10,509
meetups speaking at meetups diversify so

00:08:07,990 --> 00:08:12,699
this book sets a goal of learning a new

00:08:10,509 --> 00:08:14,380
language every year totally wish I would

00:08:12,699 --> 00:08:18,219
have kept up with that but it's not too

00:08:14,380 --> 00:08:19,599
late um balance keep it balancing your

00:08:18,219 --> 00:08:21,699
portfolio don't put all your technical

00:08:19,599 --> 00:08:22,990
eggs in one basket like it's fun to play

00:08:21,699 --> 00:08:24,849
around with the new shiny things

00:08:22,990 --> 00:08:28,840
sometimes but make sure you keep up with

00:08:24,849 --> 00:08:31,389
the core to high risk and low risk but

00:08:28,840 --> 00:08:33,070
maximize your return so sometimes

00:08:31,389 --> 00:08:34,930
keeping your eye on those new shiny

00:08:33,070 --> 00:08:36,579
things that can provide a huge reward

00:08:34,930 --> 00:08:40,089
when one of them proves out to be a

00:08:36,579 --> 00:08:41,620
useful technology and then rebalance

00:08:40,089 --> 00:08:43,419
don't sit on your laurels

00:08:41,620 --> 00:08:44,829
reevaluate in terms of where you want

00:08:43,419 --> 00:08:49,240
your career to go and what types of

00:08:44,829 --> 00:08:51,940
things you enjoy you're working with so

00:08:49,240 --> 00:08:53,320
moving on to software entropy um this is

00:08:51,940 --> 00:08:55,240
one of my favorite sections and sharpey

00:08:53,320 --> 00:08:58,240
refers to the amount of disorder in a

00:08:55,240 --> 00:09:01,570
system it's another word software rot or

00:08:58,240 --> 00:09:03,550
tech debt so the idea here is that one

00:09:01,570 --> 00:09:05,920
broken window over time in a building

00:09:03,550 --> 00:09:08,500
can lead to a sense of abandonment and

00:09:05,920 --> 00:09:11,620
as a result you start seeing more broken

00:09:08,500 --> 00:09:12,880
windows or litter or a fede

00:09:11,620 --> 00:09:14,589
eventually maintaining that building

00:09:12,880 --> 00:09:15,610
becomes too much of a hassle and the

00:09:14,589 --> 00:09:17,860
owner gives up and it's officially

00:09:15,610 --> 00:09:21,040
abandon kind of a self-fulfilling

00:09:17,860 --> 00:09:22,990
prophecy the idea with this in software

00:09:21,040 --> 00:09:24,760
the lesson is to fix these what broken

00:09:22,990 --> 00:09:27,130
windows as you find them so fix problems

00:09:24,760 --> 00:09:29,980
as you find them and even if you can't

00:09:27,130 --> 00:09:31,510
due to the stress of time at least make

00:09:29,980 --> 00:09:34,210
an issue in your backlog with a comment

00:09:31,510 --> 00:09:35,440
and come back to it a poor decision even

00:09:34,210 --> 00:09:37,690
if it wasn't about a decision at the

00:09:35,440 --> 00:09:39,010
time if you leave it unaddressed in your

00:09:37,690 --> 00:09:43,089
code it can lead to more and more

00:09:39,010 --> 00:09:45,250
ill-fitting solutions the flip side of

00:09:43,089 --> 00:09:47,020
this is code that is so pristine that it

00:09:45,250 --> 00:09:49,150
inspires you to be a better programmer a

00:09:47,020 --> 00:09:51,010
story in the book is about a friend of

00:09:49,150 --> 00:09:53,680
the authors who had a really fancy house

00:09:51,010 --> 00:09:54,850
and super expensive art and one day

00:09:53,680 --> 00:09:57,040
there was a tapestry that was hanging

00:09:54,850 --> 00:09:58,660
too close to the fireplace so a little

00:09:57,040 --> 00:10:00,910
spider started and the fire department

00:09:58,660 --> 00:10:02,529
came but they looked around and before

00:10:00,910 --> 00:10:04,990
they went straight to the fire they

00:10:02,529 --> 00:10:06,610
pulled out a map because they didn't

00:10:04,990 --> 00:10:08,980
want the hoses to get the carpet dirty I

00:10:06,610 --> 00:10:10,360
mean it's kind of extreme but it makes

00:10:08,980 --> 00:10:12,220
sense in software like in one hand

00:10:10,360 --> 00:10:14,110
you've got code that's lots of broken

00:10:12,220 --> 00:10:16,120
windows and it's pretty easy to start

00:10:14,110 --> 00:10:17,800
thinking well I mean it's all a Z anyway

00:10:16,120 --> 00:10:20,800
I just need my code to fit in like who

00:10:17,800 --> 00:10:22,930
cares it can make you unhappy and

00:10:20,800 --> 00:10:24,940
unmotivated and we took worse software

00:10:22,930 --> 00:10:25,720
obviously on the other Antioch code

00:10:24,940 --> 00:10:27,279
that's so beautiful

00:10:25,720 --> 00:10:29,440
and so well tested that you don't want

00:10:27,279 --> 00:10:31,540
to mess anything up so even if there's

00:10:29,440 --> 00:10:35,290
the fire of a raging deadline you don't

00:10:31,540 --> 00:10:36,400
want to be the one to make a mess so

00:10:35,290 --> 00:10:38,709
moving into the pragmatic approach

00:10:36,400 --> 00:10:41,170
section I'm dry don't repeat yourself

00:10:38,709 --> 00:10:43,750
this phrase was coined by Dave Thomas

00:10:41,170 --> 00:10:46,839
and the concept seems really obvious and

00:10:43,750 --> 00:10:49,300
easy but it's often overused and

00:10:46,839 --> 00:10:50,920
misunderstood I still see people arguing

00:10:49,300 --> 00:10:51,490
today about whether DRI is a good thing

00:10:50,920 --> 00:10:55,060
or a bad thing

00:10:51,490 --> 00:10:57,250
um the key point here is a driver refers

00:10:55,060 --> 00:10:59,680
to a single piece of knowledge not

00:10:57,250 --> 00:11:01,360
individual lines of code and it's also

00:10:59,680 --> 00:11:03,400
worth noting and this is addressed as

00:11:01,360 --> 00:11:05,290
well in pragmatic programmer that some

00:11:03,400 --> 00:11:08,200
people see comments as duplication of

00:11:05,290 --> 00:11:10,540
the code but your comments are the Y of

00:11:08,200 --> 00:11:14,860
your code whereas the code explains the

00:11:10,540 --> 00:11:16,570
how so pragmatic programmer goes into a

00:11:14,860 --> 00:11:18,970
couple different types of duplication

00:11:16,570 --> 00:11:20,620
and give strategies for each but I'll

00:11:18,970 --> 00:11:22,630
just go through the types here so

00:11:20,620 --> 00:11:24,110
imposed this is when it's forced on us

00:11:22,630 --> 00:11:27,079
by like standards or letting

00:11:24,110 --> 00:11:30,110
is having to define a model in multiple

00:11:27,079 --> 00:11:32,209
places or something then we have

00:11:30,110 --> 00:11:34,459
inadvertent duplication so this is when

00:11:32,209 --> 00:11:35,750
yeah you just made a mistake early on

00:11:34,459 --> 00:11:37,339
and you ended up with some stuff

00:11:35,750 --> 00:11:38,470
duplicated and you need to go back and

00:11:37,339 --> 00:11:41,360
fix it

00:11:38,470 --> 00:11:43,220
inpatient duplication this gets the best

00:11:41,360 --> 00:11:45,050
of us right like you have time pressures

00:11:43,220 --> 00:11:46,250
you copy a function and you change you

00:11:45,050 --> 00:11:47,959
just change a couple lines that you need

00:11:46,250 --> 00:11:50,630
to change and then you like commit it

00:11:47,959 --> 00:11:52,519
and run away those shortcuts they make

00:11:50,630 --> 00:11:53,570
for some long delays and it's it's hard

00:11:52,519 --> 00:11:56,959
to have that discipline upfront

00:11:53,570 --> 00:11:59,269
sometimes then there's thinner developer

00:11:56,959 --> 00:12:00,019
duplication so this is you know one

00:11:59,269 --> 00:12:01,459
person doesn't know what the other

00:12:00,019 --> 00:12:03,200
person is doing

00:12:01,459 --> 00:12:05,209
we need frequent communication between

00:12:03,200 --> 00:12:07,040
developers and code reviews is a good

00:12:05,209 --> 00:12:08,839
way to keep an eye on everything that's

00:12:07,040 --> 00:12:12,950
going on in your in the application

00:12:08,839 --> 00:12:14,750
you're working with so the reversibility

00:12:12,950 --> 00:12:16,880
section reminds us that there's always

00:12:14,750 --> 00:12:19,100
more than one way to implement something

00:12:16,880 --> 00:12:20,839
and because of that we have to kind of

00:12:19,100 --> 00:12:23,600
guard ourselves for changing our minds

00:12:20,839 --> 00:12:25,430
in the future the challenge question in

00:12:23,600 --> 00:12:27,560
this section asks us to consider short

00:12:25,430 --> 00:12:29,390
answers cat the idea is you're probably

00:12:27,560 --> 00:12:31,459
now um is that there's a cat in a closed

00:12:29,390 --> 00:12:31,880
box and there's a 50% chance it's been

00:12:31,459 --> 00:12:33,860
killed

00:12:31,880 --> 00:12:35,720
so before you open up the box there's

00:12:33,860 --> 00:12:38,630
two outcomes and they each exist in your

00:12:35,720 --> 00:12:39,920
own universe in one the cat is dead and

00:12:38,630 --> 00:12:41,570
one the cap is alive you don't know

00:12:39,920 --> 00:12:44,300
until you open the box which universe

00:12:41,570 --> 00:12:46,399
you're in so no wonder coding for the

00:12:44,300 --> 00:12:48,920
future can be so difficult like how many

00:12:46,399 --> 00:12:50,540
alternative universes have you created

00:12:48,920 --> 00:12:52,430
with the decisions in your code and in

00:12:50,540 --> 00:12:53,990
your architecture like how hard will it

00:12:52,430 --> 00:12:58,370
be to support them when you open that

00:12:53,990 --> 00:12:58,910
box so I got most of you have heard of

00:12:58,370 --> 00:13:02,029
rubber duckie

00:12:58,910 --> 00:13:03,740
um the approach of solving a problem by

00:13:02,029 --> 00:13:06,050
talking through it in simple terms to

00:13:03,740 --> 00:13:07,850
anyone even a duck originates from a

00:13:06,050 --> 00:13:08,930
story in the pragmatic programmer like

00:13:07,850 --> 00:13:10,850
there's so many great topics in this

00:13:08,930 --> 00:13:13,250
it's like I said my favorite but we just

00:13:10,850 --> 00:13:16,940
have time for a sampling so let's move

00:13:13,250 --> 00:13:19,970
on to read that during written in 1999

00:13:16,940 --> 00:13:21,769
like I said revised in 2019 by Martin

00:13:19,970 --> 00:13:23,209
Fowler and Kent Beck there are two

00:13:21,769 --> 00:13:25,390
programming legends they're also

00:13:23,209 --> 00:13:27,440
original signers of the agile manifesto

00:13:25,390 --> 00:13:29,000
I'll point out that in the original

00:13:27,440 --> 00:13:31,070
version of this book all the examples

00:13:29,000 --> 00:13:33,260
were in Java but now in the revision

00:13:31,070 --> 00:13:36,279
they're all in JavaScript so totally

00:13:33,260 --> 00:13:36,279
accessible to all of us

00:13:36,670 --> 00:13:40,420
so refactoring is the process of

00:13:38,470 --> 00:13:42,760
changing a software system in a way that

00:13:40,420 --> 00:13:44,860
doesn't alter the external behavior of

00:13:42,760 --> 00:13:47,290
the system but just changes the

00:13:44,860 --> 00:13:48,670
internals when you refactor you're kind

00:13:47,290 --> 00:13:51,280
of improving the design of the code

00:13:48,670 --> 00:13:53,500
after you've written it it's this fun

00:13:51,280 --> 00:13:55,660
process here for getting soap that has

00:13:53,500 --> 00:13:57,190
slipped out of the bathtub has possibly

00:13:55,660 --> 00:13:59,470
gone through a few refactorings but it

00:13:57,190 --> 00:14:07,450
hasn't changed the external goal of

00:13:59,470 --> 00:14:09,250
getting the sit back so excuse me this

00:14:07,450 --> 00:14:11,860
book starts with a whole chapter as an

00:14:09,250 --> 00:14:13,120
example it's a small application that

00:14:11,860 --> 00:14:15,790
handles billing for a Shakespearean

00:14:13,120 --> 00:14:17,350
theatrical troupe the author is kind of

00:14:15,790 --> 00:14:19,480
walk through different steps they need

00:14:17,350 --> 00:14:22,420
to do to improve the code in order to

00:14:19,480 --> 00:14:25,240
add some new features it's a bit more in

00:14:22,420 --> 00:14:27,100
depth than err to do example below a

00:14:25,240 --> 00:14:28,570
lesson the railroad and then they heard

00:14:27,100 --> 00:14:31,630
some chapters on the principles of

00:14:28,570 --> 00:14:33,850
factoring on bad smells and building

00:14:31,630 --> 00:14:36,240
tests and then a catalog of refactoring

00:14:33,850 --> 00:14:38,650
patterns which is the bulk of the book

00:14:36,240 --> 00:14:40,390
so under factoring you start with a

00:14:38,650 --> 00:14:42,610
solid test week that's always step

00:14:40,390 --> 00:14:42,970
number one and then you make a small

00:14:42,610 --> 00:14:45,370
change

00:14:42,970 --> 00:14:49,330
make sure those tests don't pass and

00:14:45,370 --> 00:14:51,070
commit repeat the point here is to keep

00:14:49,330 --> 00:14:53,370
a very short feedback loop and always

00:14:51,070 --> 00:14:55,360
keep your coat in a workable state

00:14:53,370 --> 00:14:57,340
unfortunately with numbers emphasis on

00:14:55,360 --> 00:15:02,950
tests that part should already be in

00:14:57,340 --> 00:15:04,810
your practice so going through a tricky

00:15:02,950 --> 00:15:07,840
portion of code involves reading that

00:15:04,810 --> 00:15:09,430
code gaining some insight and then using

00:15:07,840 --> 00:15:13,530
refactoring to get that insight from

00:15:09,430 --> 00:15:15,850
your head back into the code this is

00:15:13,530 --> 00:15:17,290
this this readability is like called

00:15:15,850 --> 00:15:18,610
code archaeology this is what you spend

00:15:17,290 --> 00:15:20,410
a lot of time on a stick earlier if

00:15:18,610 --> 00:15:22,150
you're looking at something that was

00:15:20,410 --> 00:15:25,060
complicated and written a while back by

00:15:22,150 --> 00:15:26,290
you or someone else some can say that

00:15:25,060 --> 00:15:27,640
like spending a lot of time focusing on

00:15:26,290 --> 00:15:29,080
the readability the code can make it

00:15:27,640 --> 00:15:31,330
less it makes it harder

00:15:29,080 --> 00:15:32,890
performance-tuned but in refactoring the

00:15:31,330 --> 00:15:36,550
book they say it's easier to

00:15:32,890 --> 00:15:38,860
performance-tuned well-written code so

00:15:36,550 --> 00:15:41,830
why would be reflector um to fix broken

00:15:38,860 --> 00:15:44,760
windows right and eliminate the

00:15:41,830 --> 00:15:46,750
duplicated code that we talked about

00:15:44,760 --> 00:15:49,510
readability is a big one that I just

00:15:46,750 --> 00:15:50,529
mentioned taking the time to give a

00:15:49,510 --> 00:15:52,300
little re-evaluation

00:15:50,529 --> 00:15:54,249
of the software before you commit it

00:15:52,300 --> 00:15:56,139
with your code and making sure it's easy

00:15:54,249 --> 00:15:59,410
to read can save that pourcel in the

00:15:56,139 --> 00:16:00,879
future it was usually you Fowler says

00:15:59,410 --> 00:16:02,980
that he likes to take everything in the

00:16:00,879 --> 00:16:04,240
code he likes to put everything into the

00:16:02,980 --> 00:16:08,319
code so they doesn't have to remember

00:16:04,240 --> 00:16:10,930
anything we refactor to find books um

00:16:08,319 --> 00:16:12,670
when you clarify the intent of the code

00:16:10,930 --> 00:16:14,230
it makes it a lot easier to see when

00:16:12,670 --> 00:16:17,709
something is wrong it doesn't line up

00:16:14,230 --> 00:16:20,079
and then the primary thing is speed

00:16:17,709 --> 00:16:22,720
right so this code archaeology burden

00:16:20,079 --> 00:16:24,699
really slows us down and refactoring

00:16:22,720 --> 00:16:27,730
makes it so that it's much easier to add

00:16:24,699 --> 00:16:29,139
new features it's especially easier than

00:16:27,730 --> 00:16:34,029
working around older patterns that don't

00:16:29,139 --> 00:16:36,220
apply anymore so as we kind of alluded

00:16:34,029 --> 00:16:38,019
to software is never done right so we

00:16:36,220 --> 00:16:39,970
need to remember no decisions final in

00:16:38,019 --> 00:16:42,639
order to add capabilities we're gonna

00:16:39,970 --> 00:16:45,249
need to tweak the existing code so that

00:16:42,639 --> 00:16:47,319
it can accept the changes more refactor

00:16:45,249 --> 00:16:50,050
is making that hard change so that you

00:16:47,319 --> 00:16:55,029
can make the original requested change

00:16:50,050 --> 00:16:57,639
easier so some people think that

00:16:55,029 --> 00:17:00,550
refactoring is just cleaning up bad code

00:16:57,639 --> 00:17:03,040
and a technically savvy manager would

00:17:00,550 --> 00:17:05,260
encourage refactoring as a constant

00:17:03,040 --> 00:17:06,909
improvement to the source code but what

00:17:05,260 --> 00:17:09,699
if that's not your boss

00:17:06,909 --> 00:17:11,559
Martin Fowler's advice is to just go

00:17:09,699 --> 00:17:14,770
ahead and do it anyway and don't tell

00:17:11,559 --> 00:17:16,569
them his thinking is that this is a

00:17:14,770 --> 00:17:19,299
schedule driven manager right who wants

00:17:16,569 --> 00:17:21,039
the feature completed quickly and if you

00:17:19,299 --> 00:17:23,319
know that the fastest way to do this is

00:17:21,039 --> 00:17:24,850
to make a small improvement first then

00:17:23,319 --> 00:17:26,620
do it because putting that knowledge

00:17:24,850 --> 00:17:28,510
back into the code makes everyone around

00:17:26,620 --> 00:17:30,700
you faster - so it's your responsibility

00:17:28,510 --> 00:17:34,570
to your fellow programmers and to your

00:17:30,700 --> 00:17:35,830
future self just beat them up that's

00:17:34,570 --> 00:17:38,470
similar that are times when you

00:17:35,830 --> 00:17:40,419
shouldn't write vector for example if

00:17:38,470 --> 00:17:43,360
you have code that you only really use

00:17:40,419 --> 00:17:45,280
instead of actually modify it kind of

00:17:43,360 --> 00:17:47,799
becomes almost like an internal API and

00:17:45,280 --> 00:17:49,840
that's kind of how they suggest treating

00:17:47,799 --> 00:17:51,669
it is as an API so just making sure you

00:17:49,840 --> 00:17:53,049
fully understand all the connection

00:17:51,669 --> 00:17:57,460
points rather than going down the rabbit

00:17:53,049 --> 00:17:59,530
hole it's not always worth your time to

00:17:57,460 --> 00:18:01,750
refactor code that you hardly ever touch

00:17:59,530 --> 00:18:02,809
you're just not that you're not gaining

00:18:01,750 --> 00:18:06,529
a whole lot from the arc

00:18:02,809 --> 00:18:08,120
process there um this happens a lot you

00:18:06,529 --> 00:18:10,429
have a small thing that you're going to

00:18:08,120 --> 00:18:12,110
change but you realize that you kind of

00:18:10,429 --> 00:18:13,429
like to refactor something in the

00:18:12,110 --> 00:18:16,370
process to make it easier and that

00:18:13,429 --> 00:18:18,409
refactoring it becomes huge you know

00:18:16,370 --> 00:18:20,690
sometimes for the team trajectory it's

00:18:18,409 --> 00:18:23,269
better not to make that huge refactor

00:18:20,690 --> 00:18:24,799
although caveat if you keep seeing that

00:18:23,269 --> 00:18:28,879
same thing over and over and over and

00:18:24,799 --> 00:18:30,230
then it's worth the time finally on the

00:18:28,879 --> 00:18:33,110
decision to throw it out and rewrite

00:18:30,230 --> 00:18:34,610
it's very subjective so subjective that

00:18:33,110 --> 00:18:38,499
in the book they mention it and that's

00:18:34,610 --> 00:18:42,590
it saying completely outside the scope

00:18:38,499 --> 00:18:45,320
so finally um the book offers to avoid

00:18:42,590 --> 00:18:47,869
refactoring in the name of clean code or

00:18:45,320 --> 00:18:50,360
good engineering practices anything that

00:18:47,869 --> 00:18:52,159
sounds like a moral explanation because

00:18:50,360 --> 00:18:53,990
the point isn't to make your cookies

00:18:52,159 --> 00:18:56,149
like sparkly clean and show off how

00:18:53,990 --> 00:18:58,909
elegant you can be but it's to make

00:18:56,149 --> 00:19:02,029
adding features and fixing bugs faster

00:18:58,909 --> 00:19:03,889
so a tech lead has the responsibility to

00:19:02,029 --> 00:19:06,340
use refactoring to improve the code base

00:19:03,889 --> 00:19:08,330
and to guide the team on wind refactor

00:19:06,340 --> 00:19:09,499
given the number of judgment calls it's

00:19:08,330 --> 00:19:14,629
actually a really good opportunity for

00:19:09,499 --> 00:19:18,499
mentoring so next we go into the concept

00:19:14,629 --> 00:19:21,200
of code smells um a coke smell like the

00:19:18,499 --> 00:19:23,840
smell from a diaper is a surface

00:19:21,200 --> 00:19:26,809
indication that usually corresponds to a

00:19:23,840 --> 00:19:29,149
deeper problem it's quick to spot you

00:19:26,809 --> 00:19:31,129
can smell it and it doesn't always mean

00:19:29,149 --> 00:19:33,590
there's a problem but generally it means

00:19:31,129 --> 00:19:35,869
you should take a deeper look um the

00:19:33,590 --> 00:19:38,149
book goes on to elaborate on 22 possible

00:19:35,869 --> 00:19:40,129
code smells from duplicated code two

00:19:38,149 --> 00:19:42,590
large classes or long parameter lists

00:19:40,129 --> 00:19:45,200
each section includes an explanation of

00:19:42,590 --> 00:19:47,929
the smell as well as some suggested

00:19:45,200 --> 00:19:49,490
refactoring pattern solutions because

00:19:47,929 --> 00:19:51,379
most can be pretty easy to spot if you

00:19:49,490 --> 00:19:53,059
know what you're looking for so on his

00:19:51,379 --> 00:19:54,830
website Martin Fowler suggests having

00:19:53,059 --> 00:19:56,509
lead developers pick a smell of the week

00:19:54,830 --> 00:20:02,029
and then having junior developers find

00:19:56,509 --> 00:20:03,830
them and pear on the solutions so the

00:20:02,029 --> 00:20:05,600
next part in the book is devoted to

00:20:03,830 --> 00:20:07,669
tests and as I mentioned before that

00:20:05,600 --> 00:20:10,940
solid test suite is a prerequisite for

00:20:07,669 --> 00:20:13,039
refactoring it's a short section but

00:20:10,940 --> 00:20:15,299
it's kind of useful with regards to like

00:20:13,039 --> 00:20:16,860
the philosophy of testing and

00:20:15,299 --> 00:20:18,900
there's some good tips about the

00:20:16,860 --> 00:20:20,880
frequency about writing tests at the

00:20:18,900 --> 00:20:23,970
beginning of a bug report to expose the

00:20:20,880 --> 00:20:25,350
bug prior to fixing it rating incomplete

00:20:23,970 --> 00:20:27,510
tests as placeholders and boundary

00:20:25,350 --> 00:20:30,240
conditions but my favorite piece of

00:20:27,510 --> 00:20:32,400
advice out of there is not to let the

00:20:30,240 --> 00:20:34,679
fear that testing can't catch all the

00:20:32,400 --> 00:20:38,070
bugs stop you from writing tests that

00:20:34,679 --> 00:20:39,870
will catch most of the bugs so don't

00:20:38,070 --> 00:20:41,669
give up because it's not perfect just

00:20:39,870 --> 00:20:45,690
keep improving things that's what

00:20:41,669 --> 00:20:48,059
refactoring is doing so the bulk of book

00:20:45,690 --> 00:20:50,909
like I said as a pattern catalog kind of

00:20:48,059 --> 00:20:52,169
like a design pattern catalog and rather

00:20:50,909 --> 00:20:55,049
than coming through what these patterns

00:20:52,169 --> 00:20:55,890
are and that's that's for you I'll just

00:20:55,049 --> 00:20:58,110
give you a sense of how they're

00:20:55,890 --> 00:21:00,090
structured so they'll start with the

00:20:58,110 --> 00:21:03,450
name and that's to give a common

00:21:00,090 --> 00:21:06,059
vocabulary and then they have a summary

00:21:03,450 --> 00:21:07,830
and rather than being a written summary

00:21:06,059 --> 00:21:09,840
it's usually pictorial a little bit of

00:21:07,830 --> 00:21:12,419
code just give you a quick idea of what

00:21:09,840 --> 00:21:15,059
we're dealing with and then there's the

00:21:12,419 --> 00:21:17,250
motivation section so this describes why

00:21:15,059 --> 00:21:18,690
the refactoring should be done and some

00:21:17,250 --> 00:21:22,679
circumstances where maybe it shouldn't

00:21:18,690 --> 00:21:24,539
be done then we have the mechanics these

00:21:22,679 --> 00:21:25,620
are step by step instructions and what

00:21:24,539 --> 00:21:27,510
you may or may not be able to see on the

00:21:25,620 --> 00:21:29,940
slide is that it's kind of like do

00:21:27,510 --> 00:21:31,679
something do something test do something

00:21:29,940 --> 00:21:34,200
do something test so it really

00:21:31,679 --> 00:21:38,130
emphasizes that short testing committing

00:21:34,200 --> 00:21:39,750
cycle and that by there's an example and

00:21:38,130 --> 00:21:41,940
these are those silly textbook kind of

00:21:39,750 --> 00:21:44,610
examples but you know they give you an

00:21:41,940 --> 00:21:46,110
idea so I would suggest kind of going

00:21:44,610 --> 00:21:47,909
through familiarizing yourself with the

00:21:46,110 --> 00:21:50,309
motivations of each thing so that you

00:21:47,909 --> 00:21:51,840
know what's in there and you can come

00:21:50,309 --> 00:21:55,010
back to the details when you actually

00:21:51,840 --> 00:21:57,150
want to do it in your actual application

00:21:55,010 --> 00:21:59,010
so finally there's a little pragmatic

00:21:57,150 --> 00:22:01,440
advice at the end of this book that I

00:21:59,010 --> 00:22:03,210
really like um let's say you're going

00:22:01,440 --> 00:22:04,710
along your refactoring you're making

00:22:03,210 --> 00:22:07,620
things better everything's great and

00:22:04,710 --> 00:22:09,900
then like you start to feel wrong like

00:22:07,620 --> 00:22:10,799
you just lose your confidence it could

00:22:09,900 --> 00:22:13,140
be at the end of the day and you're

00:22:10,799 --> 00:22:15,270
tired it could be that you're realizing

00:22:13,140 --> 00:22:16,830
that maybe it wasn't the right way to go

00:22:15,270 --> 00:22:20,010
after all and you're feeling kind of

00:22:16,830 --> 00:22:21,750
like you wasted time whatever the reason

00:22:20,010 --> 00:22:22,500
and Fowler says that you just stop and

00:22:21,750 --> 00:22:24,870
take a break

00:22:22,500 --> 00:22:26,429
um if what you have still make sense

00:22:24,870 --> 00:22:28,169
then go ahead and commit it

00:22:26,429 --> 00:22:30,600
you kept everything in a workable state

00:22:28,169 --> 00:22:31,980
but if it doesn't that's fine like move

00:22:30,600 --> 00:22:33,269
on you've learned a lesson and you

00:22:31,980 --> 00:22:35,639
probably know the code better than you

00:22:33,269 --> 00:22:38,340
did before so he says it's kind of like

00:22:35,639 --> 00:22:40,409
walking on a really narrow trail above a

00:22:38,340 --> 00:22:42,419
really steep drop and as long as you

00:22:40,409 --> 00:22:44,399
have enough light and confidence then

00:22:42,419 --> 00:22:46,259
you can keep going but once that Sun

00:22:44,399 --> 00:22:49,970
Goes Down you better stop and wait for

00:22:46,259 --> 00:22:49,970
the Sun and your confidence to come back

00:22:50,059 --> 00:22:56,629
so is there a place for a book still I

00:22:54,240 --> 00:22:59,600
mean how many people still read books

00:22:56,629 --> 00:23:01,710
are they just this vintage quaint

00:22:59,600 --> 00:23:05,340
handcrafted artisanal learning

00:23:01,710 --> 00:23:06,659
experience Martin Fowler tried to

00:23:05,340 --> 00:23:09,480
address this a little bit in the preface

00:23:06,659 --> 00:23:10,799
to the revised edition and concluded

00:23:09,480 --> 00:23:14,190
that it's still kind of the best way to

00:23:10,799 --> 00:23:16,230
present long-form content um

00:23:14,190 --> 00:23:18,450
not everything works in a medium article

00:23:16,230 --> 00:23:19,769
right but I do see some people slicing

00:23:18,450 --> 00:23:22,940
up their books and putting them into

00:23:19,769 --> 00:23:25,769
medium articles anyway and it can work I

00:23:22,940 --> 00:23:27,240
actually had um the interesting

00:23:25,769 --> 00:23:28,860
experience recently I was at a

00:23:27,240 --> 00:23:30,690
conference a few weeks ago and Dave

00:23:28,860 --> 00:23:32,249
Thomas one of the authors of pragmatic

00:23:30,690 --> 00:23:35,759
programmer was giving the closing

00:23:32,249 --> 00:23:37,409
keynote so I got it my nerve and I went

00:23:35,759 --> 00:23:40,049
and I sat down with him at lunch and

00:23:37,409 --> 00:23:42,899
this fuzzy picture is the only proof I

00:23:40,049 --> 00:23:45,210
have but I asked him about like the

00:23:42,899 --> 00:23:48,809
place for books and how to make this

00:23:45,210 --> 00:23:51,649
kind of longer form next level learning

00:23:48,809 --> 00:23:54,749
accessible to people now we talked about

00:23:51,649 --> 00:23:57,649
video series boot camps even sock

00:23:54,749 --> 00:24:02,220
puppets but you know how do you teach

00:23:57,649 --> 00:24:03,269
experience like stories help but I you

00:24:02,220 --> 00:24:05,100
know I still see these books as my

00:24:03,269 --> 00:24:07,730
mentors and they didn't teach me how to

00:24:05,100 --> 00:24:10,619
program they taught me how to be better

00:24:07,730 --> 00:24:13,679
um but then lo and behold I got to

00:24:10,619 --> 00:24:15,419
skeino and this was there how I'm

00:24:13,679 --> 00:24:16,980
becoming a program of becoming a

00:24:15,419 --> 00:24:19,559
programmer becoming a better programmer

00:24:16,980 --> 00:24:22,230
and I was so he kind of laid out a

00:24:19,559 --> 00:24:23,879
three-step plan so you know homage to

00:24:22,230 --> 00:24:26,309
the pragmatic programmer we're just

00:24:23,879 --> 00:24:29,009
gonna run through this real quick he

00:24:26,309 --> 00:24:31,919
said on be happy keep learning and do

00:24:29,009 --> 00:24:33,480
good in the world so step number one get

00:24:31,919 --> 00:24:35,190
happy remember back at the beginning

00:24:33,480 --> 00:24:38,009
this talk tip number three you have

00:24:35,190 --> 00:24:39,820
agency so don't be so resistant to

00:24:38,009 --> 00:24:41,710
change that you make yourself miserable

00:24:39,820 --> 00:24:43,660
like find a place where you enjoy your

00:24:41,710 --> 00:24:46,420
work and find work that you enjoy doing

00:24:43,660 --> 00:24:48,250
and where you're appreciated a happy

00:24:46,420 --> 00:24:52,870
programmer is a more efficient

00:24:48,250 --> 00:24:55,330
programmer as well you know joy is an

00:24:52,870 --> 00:24:58,150
asset and most of us really have fun

00:24:55,330 --> 00:25:00,460
coding so humans can't tend to get the

00:24:58,150 --> 00:25:02,680
most pleasure of tena tasks in some sort

00:25:00,460 --> 00:25:04,480
of like optimal challenge zone so this

00:25:02,680 --> 00:25:06,700
is where it's like a stretch for us but

00:25:04,480 --> 00:25:08,980
not impossible a task where we feel a

00:25:06,700 --> 00:25:10,780
sense of achievement the problem is that

00:25:08,980 --> 00:25:11,380
if we stay in the zone too long we start

00:25:10,780 --> 00:25:13,630
getting comfortable

00:25:11,380 --> 00:25:16,210
remember your knowledge portfolio is

00:25:13,630 --> 00:25:18,580
full of expiring assets so this leads us

00:25:16,210 --> 00:25:22,240
to Dave Thomas is step number two keep

00:25:18,580 --> 00:25:24,100
learning what separates a junior

00:25:22,240 --> 00:25:27,010
developer from the mid and senior level

00:25:24,100 --> 00:25:29,230
developers I mean it's experience but

00:25:27,010 --> 00:25:30,610
what does that really mean um this is

00:25:29,230 --> 00:25:32,710
something we talked about if it's at the

00:25:30,610 --> 00:25:34,390
lunch table and experience means that

00:25:32,710 --> 00:25:36,460
you've failed right it means you made

00:25:34,390 --> 00:25:38,560
mistakes it means you are uncomfortable

00:25:36,460 --> 00:25:40,180
you were a newbie you made a mistake

00:25:38,560 --> 00:25:42,250
and you learned from it was it really

00:25:40,180 --> 00:25:44,770
that bad that's what we call experience

00:25:42,250 --> 00:25:48,870
what we need to do is to make failure

00:25:44,770 --> 00:25:51,400
fun right keep learning keep expanding

00:25:48,870 --> 00:25:53,260
being a diversifying your portfolio

00:25:51,400 --> 00:25:55,780
means being a newbie and being

00:25:53,260 --> 00:25:57,580
uncomfortable in his talk Dave Thomas

00:25:55,780 --> 00:26:00,310
said that if you don't know what's going

00:25:57,580 --> 00:26:03,880
on you're on the right path so I feel

00:26:00,310 --> 00:26:06,160
like I'm on the right path um finally I

00:26:03,880 --> 00:26:08,710
think open source is a great place to

00:26:06,160 --> 00:26:10,780
deal with this also as as a mentor um

00:26:08,710 --> 00:26:12,280
there's such a large ecosystem that

00:26:10,780 --> 00:26:14,740
there's always something that for people

00:26:12,280 --> 00:26:16,210
to work on it could be you need a more

00:26:14,740 --> 00:26:17,680
newbie challenge if you are looking to

00:26:16,210 --> 00:26:21,010
expand into something a little different

00:26:17,680 --> 00:26:26,620
and a whole community of people to guide

00:26:21,010 --> 00:26:28,570
you now the third point was do good in

00:26:26,620 --> 00:26:30,970
the post face to the pragmatic

00:26:28,570 --> 00:26:32,980
programmer they talk about another

00:26:30,970 --> 00:26:35,020
seminal work which is the mythical

00:26:32,980 --> 00:26:37,030
man-month um again you should also be

00:26:35,020 --> 00:26:38,920
that like Fred Brooks and he says that

00:26:37,030 --> 00:26:41,650
programmers were only slightly removed

00:26:38,920 --> 00:26:45,760
from pure thought we build castles in

00:26:41,650 --> 00:26:48,700
the air from air creating by exertion of

00:26:45,760 --> 00:26:50,350
the imagination so we can make anything

00:26:48,700 --> 00:26:52,240
really but this comes with the

00:26:50,350 --> 00:26:54,940
responsibility of doing what's best

00:26:52,240 --> 00:26:56,950
our users so it's our responsibility to

00:26:54,940 --> 00:26:59,320
protect confuse errs by thinking about

00:26:56,950 --> 00:27:01,809
security it's our responsibility to

00:26:59,320 --> 00:27:03,640
prevent a valid experience to all of our

00:27:01,809 --> 00:27:07,660
users by making accessibility and a

00:27:03,640 --> 00:27:10,300
priority um we should build our software

00:27:07,660 --> 00:27:12,270
the way we want to see the world so the

00:27:10,300 --> 00:27:15,040
final tip of the pragmatic programmer

00:27:12,270 --> 00:27:19,750
it's you're like share so share it

00:27:15,040 --> 00:27:21,780
celebrate it build it have fun so it's

00:27:19,750 --> 00:27:24,190
pretty much all the time I have um and

00:27:21,780 --> 00:27:25,570
while there are sometimes some dated

00:27:24,190 --> 00:27:27,520
material in these books like especially

00:27:25,570 --> 00:27:29,590
with regards to stereotypes of early

00:27:27,520 --> 00:27:31,390
hacker culture um these principles

00:27:29,590 --> 00:27:34,300
really translate across time and

00:27:31,390 --> 00:27:35,890
languages and it's not just software

00:27:34,300 --> 00:27:37,570
design principles but also principles of

00:27:35,890 --> 00:27:41,890
people career development and motivation

00:27:37,570 --> 00:27:43,420
and even ethics so if you already have

00:27:41,890 --> 00:27:44,679
all these books and they're just sitting

00:27:43,420 --> 00:27:46,330
on your shelf collecting dust and you've

00:27:44,679 --> 00:27:49,720
never read them or you read them many

00:27:46,330 --> 00:27:51,160
years ago or on your Kindle um maybe you

00:27:49,720 --> 00:27:53,710
never heard of them before today but I

00:27:51,160 --> 00:27:55,300
hope that you will go out and find one

00:27:53,710 --> 00:27:57,550
or two to start your reading yourself

00:27:55,300 --> 00:27:59,320
some of them are really long but like

00:27:57,550 --> 00:28:00,790
the agile manifesto as you saw just a

00:27:59,320 --> 00:28:03,460
couple paragraphs and it made such a

00:28:00,790 --> 00:28:07,420
huge difference so see what inspired

00:28:03,460 --> 00:28:09,820
everyone so that I am Lisa backers sign

00:28:07,420 --> 00:28:12,429
enough and I hope you enjoy the rest of

00:28:09,820 --> 00:28:15,190
your remote experience you can find me

00:28:12,429 --> 00:28:16,990
anywhere especially DC and I'm happy to

00:28:15,190 --> 00:28:20,100
chat about any of these and discord or

00:28:16,990 --> 00:28:20,100

YouTube URL: https://www.youtube.com/watch?v=rhu2q4-CkX8


