Title: Virtual EmberConf 2020: Ember as Song by James C. Davis
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Ember as Song by James C. Davis

Songwriting and programming have much more in common than you might think and Ember is the perfect medium for demonstrating this. This talk will show you just how similar these two disciplines are by creating an Ember Octane app that is actually a piece of music! Components are our instruments and routes are our phrases! We’ll start with a simple riff and build upon it, piece by piece, the same way you’d develop any Ember app, only this is one you can hear! Come join me in building an app note-by-note and experience Ember in a brand new way!
Captions: 
	00:00:01,270 --> 00:00:20,820
[Music]

00:00:21,359 --> 00:00:24,720
hi i'm james c

00:00:22,320 --> 00:00:26,480
davis and i'm a professional programmer

00:00:24,720 --> 00:00:27,680
and an amateur songwriter

00:00:26,480 --> 00:00:30,960
i'm going to talk to you today about

00:00:27,680 --> 00:00:33,440
something that i call ember as song

00:00:30,960 --> 00:00:34,719
so let's start with an idea there was a

00:00:33,440 --> 00:00:37,760
brainstorming session for

00:00:34,719 --> 00:00:39,520
ambercomp proposals where melanie sumner

00:00:37,760 --> 00:00:42,640
had thrown out this idea of

00:00:39,520 --> 00:00:44,800
composing a song alongside building up

00:00:42,640 --> 00:00:46,480
a number app so building up the song

00:00:44,800 --> 00:00:49,920
piece by piece and the amber app

00:00:46,480 --> 00:00:51,440
and then coinciding so i really like

00:00:49,920 --> 00:00:53,199
this idea but i wasn't really sure how

00:00:51,440 --> 00:00:56,399
to make it happen

00:00:53,199 --> 00:00:57,039
so the idea grew it just sat with me for

00:00:56,399 --> 00:00:59,840
a while

00:00:57,039 --> 00:01:00,239
like how best can i compare building an

00:00:59,840 --> 00:01:03,280
app

00:01:00,239 --> 00:01:06,400
with composing a song can i

00:01:03,280 --> 00:01:07,520
map the elements of a song to concepts

00:01:06,400 --> 00:01:10,159
and number

00:01:07,520 --> 00:01:11,360
i wasn't really sure how to do that and

00:01:10,159 --> 00:01:13,600
make it work

00:01:11,360 --> 00:01:16,400
and then it hit me i could create an

00:01:13,600 --> 00:01:19,280
ember app that is a song

00:01:16,400 --> 00:01:21,840
and then this just led to a whole

00:01:19,280 --> 00:01:23,520
exploration into that

00:01:21,840 --> 00:01:26,000
so i've long thought that programming

00:01:23,520 --> 00:01:28,159
and songwriting were very similar

00:01:26,000 --> 00:01:29,680
they're both very creative endeavors

00:01:28,159 --> 00:01:32,400
they're both complex

00:01:29,680 --> 00:01:33,439
and they share many fundamental concepts

00:01:32,400 --> 00:01:36,560
like patterns

00:01:33,439 --> 00:01:40,000
and loops conditionals

00:01:36,560 --> 00:01:41,360
problem solving it's often when you're

00:01:40,000 --> 00:01:43,600
creating music you're trying to figure

00:01:41,360 --> 00:01:45,200
out how to get things to work together

00:01:43,600 --> 00:01:47,280
and bug fixing sometimes something's

00:01:45,200 --> 00:01:49,040
wrong and

00:01:47,280 --> 00:01:50,320
you have to figure out how to make it

00:01:49,040 --> 00:01:53,360
work

00:01:50,320 --> 00:01:54,560
so what's in a song a song is composed

00:01:53,360 --> 00:01:58,399
of sections

00:01:54,560 --> 00:02:01,600
so you have like an intro and verse

00:01:58,399 --> 00:02:04,000
and a chorus and bridge and these

00:02:01,600 --> 00:02:06,079
may repeat and be intermixed with each

00:02:04,000 --> 00:02:09,200
other

00:02:06,079 --> 00:02:13,040
so what are sections composed of well

00:02:09,200 --> 00:02:15,920
a section has instruments

00:02:13,040 --> 00:02:17,360
and the instruments play different parts

00:02:15,920 --> 00:02:20,480
and the parts are made up of

00:02:17,360 --> 00:02:23,680
individual notes those notes are

00:02:20,480 --> 00:02:25,200
organized into measures and

00:02:23,680 --> 00:02:26,959
it can be strung together to create

00:02:25,200 --> 00:02:30,480
musical phrases

00:02:26,959 --> 00:02:33,760
so like sentences or paragraphs

00:02:30,480 --> 00:02:35,440
so i want to map these concepts to amber

00:02:33,760 --> 00:02:36,879
so here's some of the mappings that i've

00:02:35,440 --> 00:02:39,920
done

00:02:36,879 --> 00:02:42,000
sections i've mapped into routes because

00:02:39,920 --> 00:02:44,959
those are kind of like locations

00:02:42,000 --> 00:02:46,879
in the in the song instruments i've

00:02:44,959 --> 00:02:50,480
mapped to services

00:02:46,879 --> 00:02:53,680
which i'll demonstrate in a little bit

00:02:50,480 --> 00:02:55,599
parts are components because that's what

00:02:53,680 --> 00:02:57,280
that's what makes it up that's what

00:02:55,599 --> 00:02:58,720
makes up the song

00:02:57,280 --> 00:03:00,640
and that's what makes up the app is the

00:02:58,720 --> 00:03:03,599
components and then notes

00:03:00,640 --> 00:03:04,400
i've mapped to contextual components

00:03:03,599 --> 00:03:07,920
specifically a

00:03:04,400 --> 00:03:12,080
contextual component within the part

00:03:07,920 --> 00:03:13,840
because it needs context so a section

00:03:12,080 --> 00:03:16,640
mapped to a route so it's a location of

00:03:13,840 --> 00:03:18,720
the song it's composed of

00:03:16,640 --> 00:03:20,239
different instruments playing parts

00:03:18,720 --> 00:03:23,760
together

00:03:20,239 --> 00:03:25,280
uh the same way a route

00:03:23,760 --> 00:03:28,720
will have a route template where you

00:03:25,280 --> 00:03:30,319
have different things working together

00:03:28,720 --> 00:03:32,879
it's really like the musical equivalent

00:03:30,319 --> 00:03:35,920
of a page

00:03:32,879 --> 00:03:37,760
so an instrument i've mapped to service

00:03:35,920 --> 00:03:40,080
and this is because instruments are

00:03:37,760 --> 00:03:41,360
global you have instruments that you use

00:03:40,080 --> 00:03:42,720
all throughout the song

00:03:41,360 --> 00:03:44,640
and they maintain state when moving

00:03:42,720 --> 00:03:46,720
through sections they keep playing

00:03:44,640 --> 00:03:48,239
so if there was a note that was sounding

00:03:46,720 --> 00:03:49,280
at the end of a section it'll continue

00:03:48,239 --> 00:03:52,319
into the next

00:03:49,280 --> 00:03:54,159
section volume

00:03:52,319 --> 00:03:56,239
you can control the volume of the

00:03:54,159 --> 00:03:58,840
instruments and that's a global control

00:03:56,239 --> 00:04:00,000
or effects that are applied on the

00:03:58,840 --> 00:04:04,640
instrument

00:04:00,000 --> 00:04:04,640
so part i've mapped a component

00:04:04,799 --> 00:04:08,480
because a part is made up of notes for

00:04:07,120 --> 00:04:10,799
one instrument

00:04:08,480 --> 00:04:13,599
and it's often a pattern that repeats

00:04:10,799 --> 00:04:13,599
within a section

00:04:13,680 --> 00:04:18,320
and it could also be reused across

00:04:15,120 --> 00:04:22,479
multiple sections so

00:04:18,320 --> 00:04:24,240
you might have a part in one section

00:04:22,479 --> 00:04:26,160
and use that same part later the same

00:04:24,240 --> 00:04:30,000
way you would do a reusable component

00:04:26,160 --> 00:04:32,000
and number so notes

00:04:30,000 --> 00:04:33,759
i've made contextual components because

00:04:32,000 --> 00:04:34,639
they belong to a part they need the

00:04:33,759 --> 00:04:36,800
context

00:04:34,639 --> 00:04:38,639
they need to know which instrument that

00:04:36,800 --> 00:04:40,240
they go with

00:04:38,639 --> 00:04:43,840
and they need to know when to play

00:04:40,240 --> 00:04:43,840
relative to other notes

00:04:45,600 --> 00:04:52,880
there's other globals as well like tempo

00:04:49,199 --> 00:04:55,840
tempo is the speed that the song

00:04:52,880 --> 00:04:57,440
plays at there's the master volume so

00:04:55,840 --> 00:05:00,720
all the instruments together

00:04:57,440 --> 00:05:03,120
there's a volume control that's global

00:05:00,720 --> 00:05:04,479
there's also the playing state such as

00:05:03,120 --> 00:05:07,440
start

00:05:04,479 --> 00:05:08,479
pause stop and where we are on the

00:05:07,440 --> 00:05:11,120
timeline

00:05:08,479 --> 00:05:12,639
these could be handled by a single or

00:05:11,120 --> 00:05:13,919
multiple services

00:05:12,639 --> 00:05:16,160
depending on how you want to group them

00:05:13,919 --> 00:05:19,120
together

00:05:16,160 --> 00:05:20,160
so how do i take this concept of ember

00:05:19,120 --> 00:05:22,720
as song

00:05:20,160 --> 00:05:23,600
into an actual implementation so i

00:05:22,720 --> 00:05:26,800
started with the web

00:05:23,600 --> 00:05:28,800
audio api the web audio api

00:05:26,800 --> 00:05:30,320
is extremely powerful but it's very low

00:05:28,800 --> 00:05:32,560
level

00:05:30,320 --> 00:05:33,520
i wanted to start with something a

00:05:32,560 --> 00:05:38,880
little higher

00:05:33,520 --> 00:05:41,680
for making music so i found tone.js

00:05:38,880 --> 00:05:42,720
and tone js uses the web audio api it's

00:05:41,680 --> 00:05:44,400
built on top of it

00:05:42,720 --> 00:05:46,320
but it provides primitives for making

00:05:44,400 --> 00:05:48,080
music not just sounds

00:05:46,320 --> 00:05:50,880
which is basically what the web audio

00:05:48,080 --> 00:05:50,880
api gives you

00:05:51,280 --> 00:05:54,960
so i want to create a hello world so my

00:05:54,560 --> 00:05:56,800
goal

00:05:54,960 --> 00:05:58,000
here for hello world was to create one

00:05:56,800 --> 00:06:00,960
instrument

00:05:58,000 --> 00:06:01,680
uh a piano let's say and just play a

00:06:00,960 --> 00:06:04,160
single note

00:06:01,680 --> 00:06:05,120
middle c so middle c is the white key

00:06:04,160 --> 00:06:08,560
right in the middle

00:06:05,120 --> 00:06:09,360
of the piano keyboard so i created a

00:06:08,560 --> 00:06:13,520
service

00:06:09,360 --> 00:06:15,680
generated a service called it piano and

00:06:13,520 --> 00:06:17,759
i went ahead and added a name so we have

00:06:15,680 --> 00:06:19,440
something human readable

00:06:17,759 --> 00:06:21,199
and so with this service i created a

00:06:19,440 --> 00:06:24,639
property called inst

00:06:21,199 --> 00:06:26,080
for the instrument and i use something

00:06:24,639 --> 00:06:27,919
called sample library which is an

00:06:26,080 --> 00:06:30,400
extension to tone.js

00:06:27,919 --> 00:06:31,520
that lets you play samples and samples

00:06:30,400 --> 00:06:34,400
are just recorded

00:06:31,520 --> 00:06:36,319
instruments little single note

00:06:34,400 --> 00:06:40,319
recordings of instruments

00:06:36,319 --> 00:06:42,800
and so i load up the piano instrument

00:06:40,319 --> 00:06:44,960
piano sample and i send it to master and

00:06:42,800 --> 00:06:48,560
so master is your output basically to

00:06:44,960 --> 00:06:50,080
your speakers

00:06:48,560 --> 00:06:51,680
and so i wanted to be able to work with

00:06:50,080 --> 00:06:55,440
the instrument within the template

00:06:51,680 --> 00:06:57,199
so tonejs is made for creating music

00:06:55,440 --> 00:06:59,039
and javascript and i really wanted to

00:06:57,199 --> 00:07:02,000
create it in ember

00:06:59,039 --> 00:07:04,319
in ember templates and so what i did is

00:07:02,000 --> 00:07:06,560
i created a component to represent the

00:07:04,319 --> 00:07:09,919
instrument

00:07:06,560 --> 00:07:10,960
and so you can see the component

00:07:09,919 --> 00:07:13,440
displays the title

00:07:10,960 --> 00:07:14,080
instrument so you can see what it is has

00:07:13,440 --> 00:07:16,479
a container

00:07:14,080 --> 00:07:18,479
parallel i'll talk about later but it

00:07:16,479 --> 00:07:21,759
yields a contextual component

00:07:18,479 --> 00:07:24,560
called part and passes through

00:07:21,759 --> 00:07:26,880
the instrument plus volume and human ice

00:07:24,560 --> 00:07:30,240
and things we'll talk about later

00:07:26,880 --> 00:07:31,440
to it and it yields apart okay so the

00:07:30,240 --> 00:07:33,759
part component

00:07:31,440 --> 00:07:36,240
the part component is responsible for

00:07:33,759 --> 00:07:38,319
connecting notes to an instrument

00:07:36,240 --> 00:07:42,000
it's responsible for scheduling notes to

00:07:38,319 --> 00:07:46,000
play and i say scheduling because

00:07:42,000 --> 00:07:46,960
in tone.js you schedule notes to play at

00:07:46,000 --> 00:07:48,879
certain times

00:07:46,960 --> 00:07:51,120
the timing is not exact enough in

00:07:48,879 --> 00:07:51,759
javascript to say just play this note

00:07:51,120 --> 00:07:53,520
right now

00:07:51,759 --> 00:07:55,360
you actually schedule it to play at a

00:07:53,520 --> 00:07:58,080
certain time

00:07:55,360 --> 00:07:58,720
music it has to be very exact to sound

00:07:58,080 --> 00:08:00,319
right

00:07:58,720 --> 00:08:03,199
it's also responsible for scheduling

00:08:00,319 --> 00:08:04,879
draws and draws are like any

00:08:03,199 --> 00:08:06,720
thing where you manipulate the dom and

00:08:04,879 --> 00:08:09,280
we'll see that a little bit later

00:08:06,720 --> 00:08:10,240
and also for looping so any repeats so

00:08:09,280 --> 00:08:13,360
those are all

00:08:10,240 --> 00:08:14,879
handled by the part component

00:08:13,360 --> 00:08:16,879
so the template for the part component

00:08:14,879 --> 00:08:19,360
looks like this

00:08:16,879 --> 00:08:20,000
and so we have uh the did insert element

00:08:19,360 --> 00:08:23,039
modifier

00:08:20,000 --> 00:08:25,599
we call an init part

00:08:23,039 --> 00:08:26,319
and it yields a contextual component

00:08:25,599 --> 00:08:28,639
called note

00:08:26,319 --> 00:08:30,479
as i had said earlier that i map notes

00:08:28,639 --> 00:08:31,919
to contextual components and it passes

00:08:30,479 --> 00:08:32,959
something called add note and something

00:08:31,919 --> 00:08:36,159
called active note

00:08:32,959 --> 00:08:38,080
to that component so let's look at this

00:08:36,159 --> 00:08:40,640
note component

00:08:38,080 --> 00:08:41,919
so the template's very simple uh has a

00:08:40,640 --> 00:08:45,839
local class

00:08:41,919 --> 00:08:49,839
i am using ember css modules here

00:08:45,839 --> 00:08:51,519
and it has a conditional class

00:08:49,839 --> 00:08:54,399
on this dot active something called

00:08:51,519 --> 00:08:57,279
active and

00:08:54,399 --> 00:08:59,360
active gives it a background color and

00:08:57,279 --> 00:09:01,680
then if we look at

00:08:59,360 --> 00:09:03,360
the backing class we can see there's a

00:09:01,680 --> 00:09:05,120
constructor that calls that add note

00:09:03,360 --> 00:09:08,320
that was passed in

00:09:05,120 --> 00:09:10,880
it grabs a bunch of properties off the

00:09:08,320 --> 00:09:10,880
arguments

00:09:12,160 --> 00:09:18,720
and then active is a calculated

00:09:15,360 --> 00:09:20,320
getter there so let's play it so here's

00:09:18,720 --> 00:09:23,360
how you would use it

00:09:20,320 --> 00:09:24,399
you invoke the instrument component pass

00:09:23,360 --> 00:09:27,519
it the instrument

00:09:24,399 --> 00:09:30,160
so this instrument is a service

00:09:27,519 --> 00:09:31,519
we're now in a route template so we need

00:09:30,160 --> 00:09:32,560
to create a controller so i create a

00:09:31,519 --> 00:09:35,360
controller

00:09:32,560 --> 00:09:36,640
and inject the piano service into the

00:09:35,360 --> 00:09:38,000
controller and that's really all the

00:09:36,640 --> 00:09:41,200
controller is there for

00:09:38,000 --> 00:09:44,320
is to get the that's piano service into

00:09:41,200 --> 00:09:46,480
the template so it yields i

00:09:44,320 --> 00:09:47,360
of the contextual component part which

00:09:46,480 --> 00:09:49,760
yields p

00:09:47,360 --> 00:09:50,959
with the contextual component note and

00:09:49,760 --> 00:09:54,320
here we

00:09:50,959 --> 00:09:58,560
say pitch equals c4

00:09:54,320 --> 00:10:02,160
so c4 is middle c tone js uses

00:09:58,560 --> 00:10:04,640
it's a standard way of naming the notes

00:10:02,160 --> 00:10:06,399
that starts all the way down at c zero

00:10:04,640 --> 00:10:09,200
goes c d e f g

00:10:06,399 --> 00:10:09,760
a b and then c one because the notes

00:10:09,200 --> 00:10:12,959
repeat

00:10:09,760 --> 00:10:14,160
those seven notes repeat um so z four is

00:10:12,959 --> 00:10:19,830
right in the middle

00:10:14,160 --> 00:10:21,519
so let's see what that sounds like

00:10:19,830 --> 00:10:24,800
[Music]

00:10:21,519 --> 00:10:27,279
and there you have it we press middle c

00:10:24,800 --> 00:10:28,800
and you also saw that it lit up which

00:10:27,279 --> 00:10:32,399
we'll talk about visualization

00:10:28,800 --> 00:10:33,760
in a moment so let's do a scale a scale

00:10:32,399 --> 00:10:36,640
is a string of notes

00:10:33,760 --> 00:10:37,040
one after another it can be ascending go

00:10:36,640 --> 00:10:40,079
up

00:10:37,040 --> 00:10:41,839
get higher or descending in pitch and

00:10:40,079 --> 00:10:43,519
it's basically like for the c scale at

00:10:41,839 --> 00:10:46,079
least hitting all the white keys on

00:10:43,519 --> 00:10:48,240
the piano so we can implement a scale

00:10:46,079 --> 00:10:50,480
like this

00:10:48,240 --> 00:10:52,480
so we have our instrument we pass it a

00:10:50,480 --> 00:10:54,240
piano

00:10:52,480 --> 00:10:57,200
and down here in the part i've actually

00:10:54,240 --> 00:10:58,800
divided things up into measures

00:10:57,200 --> 00:11:00,640
the measure component there is really

00:10:58,800 --> 00:11:04,320
just for visual display

00:11:00,640 --> 00:11:07,839
it just divides it up visually

00:11:04,320 --> 00:11:09,680
here and in the output

00:11:07,839 --> 00:11:11,600
so you can see i have pitches starting

00:11:09,680 --> 00:11:14,800
at c4 and i'm ascending

00:11:11,600 --> 00:11:16,800
up c d e f g a b and then c

00:11:14,800 --> 00:11:19,440
five that's the next octave once you

00:11:16,800 --> 00:11:23,600
wrap back around that's an octave

00:11:19,440 --> 00:11:27,519
and here i've specified the time

00:11:23,600 --> 00:11:31,279
argument so time in tone j s

00:11:27,519 --> 00:11:34,399
is defined with measures and beats

00:11:31,279 --> 00:11:34,399
so standard time

00:11:34,880 --> 00:11:39,040
like a standard time signature is 4 4

00:11:37,120 --> 00:11:42,320
which is 4 beats

00:11:39,040 --> 00:11:43,200
per measure so you see our four beats it

00:11:42,320 --> 00:11:45,200
starts at zero

00:11:43,200 --> 00:11:47,279
so zero one two three then the second

00:11:45,200 --> 00:11:57,839
measure zero one two three

00:11:47,279 --> 00:12:00,639
so let's see what that scale sounds like

00:11:57,839 --> 00:12:02,320
there we go c scale all right so how

00:12:00,639 --> 00:12:04,480
does this work

00:12:02,320 --> 00:12:07,040
so here's our part component we looked

00:12:04,480 --> 00:12:07,040
at earlier

00:12:07,440 --> 00:12:13,360
so you can see that it yields

00:12:10,880 --> 00:12:15,680
this note component and then here's the

00:12:13,360 --> 00:12:19,040
backing class for that note component

00:12:15,680 --> 00:12:22,079
so we can see that it's calling add note

00:12:19,040 --> 00:12:26,639
that it was passed in and it's

00:12:22,079 --> 00:12:26,639
passing in basically the arguments

00:12:30,399 --> 00:12:33,440
and that's supposed to be rx there where

00:12:32,000 --> 00:12:36,880
it says this

00:12:33,440 --> 00:12:38,240
anyways so the part component so let's

00:12:36,880 --> 00:12:38,959
take a look at this we haven't seen this

00:12:38,240 --> 00:12:43,200
yet

00:12:38,959 --> 00:12:45,120
so it defines an empty array of notes

00:12:43,200 --> 00:12:48,079
create defines this action called add

00:12:45,120 --> 00:12:48,079
note takes a note

00:12:48,399 --> 00:12:51,680
calculates an id for the note so just

00:12:50,399 --> 00:12:54,959
the next one in the list

00:12:51,680 --> 00:12:55,519
just uses length for that pushes onto

00:12:54,959 --> 00:12:57,600
notes

00:12:55,519 --> 00:12:58,800
adding the id and then returns the id

00:12:57,600 --> 00:13:00,480
and you can see

00:12:58,800 --> 00:13:01,920
down the lower left back to the part add

00:13:00,480 --> 00:13:04,560
note component

00:13:01,920 --> 00:13:06,000
where add node's called and returned

00:13:04,560 --> 00:13:10,240
with the id which gets assigned

00:13:06,000 --> 00:13:13,839
to that note then we have trigger synth

00:13:10,240 --> 00:13:14,800
and trigger synth takes a time and a

00:13:13,839 --> 00:13:18,079
note

00:13:14,800 --> 00:13:20,079
and it calls trigger attack release

00:13:18,079 --> 00:13:22,000
which an attack and a release attack is

00:13:20,079 --> 00:13:24,639
basically hitting the key and releases

00:13:22,000 --> 00:13:25,839
releasing the key for a piano or any

00:13:24,639 --> 00:13:29,279
instrument

00:13:25,839 --> 00:13:31,839
on off and so it just doesn't on and off

00:13:29,279 --> 00:13:33,200
in tone.js there there is attack and a

00:13:31,839 --> 00:13:35,600
separate release

00:13:33,200 --> 00:13:36,720
so that you could actually hold a note

00:13:35,600 --> 00:13:39,040
for a long time and

00:13:36,720 --> 00:13:40,079
and do that but we're just going to do

00:13:39,040 --> 00:13:41,760
one hit here

00:13:40,079 --> 00:13:43,680
so what this is actually doing it's not

00:13:41,760 --> 00:13:45,360
actually playing the note when it calls

00:13:43,680 --> 00:13:48,320
trigger attack release it's scheduling

00:13:45,360 --> 00:13:50,560
it for a certain time

00:13:48,320 --> 00:13:50,560
and

00:13:52,240 --> 00:13:56,480
next we have a knit part so the init

00:13:55,600 --> 00:13:58,720
part action

00:13:56,480 --> 00:14:00,639
is what actually ties the notes together

00:13:58,720 --> 00:14:03,920
with trigger synth

00:14:00,639 --> 00:14:07,120
so would it calls uh

00:14:03,920 --> 00:14:07,440
instantiates a new part in part capital

00:14:07,120 --> 00:14:09,600
p

00:14:07,440 --> 00:14:11,920
here is something from tonejs that's the

00:14:09,600 --> 00:14:14,079
tone js part

00:14:11,920 --> 00:14:16,079
and you pass it a trigger trigger synth

00:14:14,079 --> 00:14:19,440
which is a callback

00:14:16,079 --> 00:14:22,000
and you pass it an array of notes

00:14:19,440 --> 00:14:23,440
and it goes through those array of notes

00:14:22,000 --> 00:14:24,800
and it calls trigger sent for each of

00:14:23,440 --> 00:14:27,040
them scheduling them all at the

00:14:24,800 --> 00:14:28,839
appropriate time

00:14:27,040 --> 00:14:30,240
so let's talk about visualization for a

00:14:28,839 --> 00:14:33,120
minute

00:14:30,240 --> 00:14:34,880
so if we look at the template for the

00:14:33,120 --> 00:14:38,959
node

00:14:34,880 --> 00:14:42,800
component you can see we have

00:14:38,959 --> 00:14:44,560
this active class and we have a getter

00:14:42,800 --> 00:14:47,360
this is in the backing class where we

00:14:44,560 --> 00:14:50,639
compare the active note

00:14:47,360 --> 00:14:54,000
argument to the id of

00:14:50,639 --> 00:14:55,680
of the note and active sets of

00:14:54,000 --> 00:14:58,639
background color it's that orangey color

00:14:55,680 --> 00:15:03,519
you can see when they light up

00:14:58,639 --> 00:15:03,519
and so let's see how this actually works

00:15:03,680 --> 00:15:08,720
so in a part component

00:15:06,800 --> 00:15:11,519
you can see we set active note to

00:15:08,720 --> 00:15:14,800
negative one there will never be a note

00:15:11,519 --> 00:15:17,920
with id of negative one

00:15:14,800 --> 00:15:17,920
because it starts at zero

00:15:18,000 --> 00:15:21,120
and in trigger synth we've added a

00:15:19,519 --> 00:15:23,519
little bit more here

00:15:21,120 --> 00:15:25,920
so you see this draw.schedule so

00:15:23,519 --> 00:15:28,240
draw.schedule is something that tone jhs

00:15:25,920 --> 00:15:29,279
gives us to be able to manipulate the

00:15:28,240 --> 00:15:33,519
dom

00:15:29,279 --> 00:15:34,959
at a certain time in sync with the music

00:15:33,519 --> 00:15:37,120
this is a little bit tricky because the

00:15:34,959 --> 00:15:39,440
dom takes a little bit of time to update

00:15:37,120 --> 00:15:41,759
so it actually factors that in to try to

00:15:39,440 --> 00:15:43,440
get it to line up real nicely

00:15:41,759 --> 00:15:45,120
so what's happening here is we're

00:15:43,440 --> 00:15:46,240
actually saying at the time the same

00:15:45,120 --> 00:15:49,120
time that we've scheduled

00:15:46,240 --> 00:15:49,120
the note to play

00:15:49,440 --> 00:15:55,040
we are setting the active note to the id

00:15:53,120 --> 00:15:56,959
of the note that we've scheduled to play

00:15:55,040 --> 00:15:59,199
at that time

00:15:56,959 --> 00:16:01,040
so that will light it up that will set

00:15:59,199 --> 00:16:04,240
the active note it'll match

00:16:01,040 --> 00:16:06,320
the appropriate note component

00:16:04,240 --> 00:16:08,399
set that class to active and it'll light

00:16:06,320 --> 00:16:10,639
up orange

00:16:08,399 --> 00:16:11,519
but then we want it to turn off when we

00:16:10,639 --> 00:16:13,920
release

00:16:11,519 --> 00:16:15,600
and so the next drawdown schedule right

00:16:13,920 --> 00:16:18,000
here is setting it back to negative one

00:16:15,600 --> 00:16:19,120
and what we have to do here is we have

00:16:18,000 --> 00:16:22,480
to

00:16:19,120 --> 00:16:24,079
set the time in the future

00:16:22,480 --> 00:16:25,759
when we know that it's going to be

00:16:24,079 --> 00:16:27,839
released

00:16:25,759 --> 00:16:28,880
so we have the duration and duration up

00:16:27,839 --> 00:16:32,720
there as you can see

00:16:28,880 --> 00:16:33,199
is 4n 4n is how you specify a quarter

00:16:32,720 --> 00:16:36,880
note

00:16:33,199 --> 00:16:37,519
in tone js so that's one quarter of a

00:16:36,880 --> 00:16:42,240
measure

00:16:37,519 --> 00:16:42,240
and four four so

00:16:42,480 --> 00:16:47,360
time here has to be in seconds so tone

00:16:44,880 --> 00:16:48,880
gs provides this time capital t

00:16:47,360 --> 00:16:50,480
here where you can pass a duration and

00:16:48,880 --> 00:16:51,600
convert it to seconds and then just add

00:16:50,480 --> 00:16:54,880
it to the time

00:16:51,600 --> 00:16:56,880
so it knows when to turn off

00:16:54,880 --> 00:17:00,320
okay so what if we want to do multiple

00:16:56,880 --> 00:17:00,320
instruments at the same time

00:17:00,720 --> 00:17:04,720
so two instruments so over on the left

00:17:02,959 --> 00:17:05,760
we have that's our piano scale we had

00:17:04,720 --> 00:17:07,439
before

00:17:05,760 --> 00:17:10,559
and over on the right we've created

00:17:07,439 --> 00:17:12,799
something new uh a violin

00:17:10,559 --> 00:17:13,600
so these would actually be in the same

00:17:12,799 --> 00:17:15,199
template

00:17:13,600 --> 00:17:17,280
it actually doesn't matter what order

00:17:15,199 --> 00:17:18,400
they go in as far as when things will

00:17:17,280 --> 00:17:20,880
play

00:17:18,400 --> 00:17:21,919
but they will visually the one that is

00:17:20,880 --> 00:17:24,959
above the other will

00:17:21,919 --> 00:17:26,079
be above the other on the page so the

00:17:24,959 --> 00:17:28,480
violin

00:17:26,079 --> 00:17:30,000
is another service very similar to the

00:17:28,480 --> 00:17:35,200
piano service we inject it

00:17:30,000 --> 00:17:36,799
into the controller and use it here

00:17:35,200 --> 00:17:39,280
here we're using half notes you can see

00:17:36,799 --> 00:17:40,960
i specified duration on the note

00:17:39,280 --> 00:17:43,200
the instead of the default quarter note

00:17:40,960 --> 00:17:46,240
so we have just two of them in a measure

00:17:43,200 --> 00:17:49,280
and then a little riff there so let's

00:17:46,240 --> 00:17:49,280
see what that sounds like

00:17:56,160 --> 00:18:00,000
and there you go piano and violin

00:17:57,919 --> 00:18:03,280
playing together

00:18:00,000 --> 00:18:05,120
okay what about multiple parts

00:18:03,280 --> 00:18:07,919
so you might have multiple parts for an

00:18:05,120 --> 00:18:09,440
instrument if you wanted some to repeat

00:18:07,919 --> 00:18:11,840
or you just wanted to break them up into

00:18:09,440 --> 00:18:15,360
different phrases so here's where

00:18:11,840 --> 00:18:17,200
you can use start so start

00:18:15,360 --> 00:18:19,120
schedules that part to happen that whole

00:18:17,200 --> 00:18:19,840
part a whole set of notes to happen at a

00:18:19,120 --> 00:18:22,320
certain time

00:18:19,840 --> 00:18:24,240
and that's specified in measures so here

00:18:22,320 --> 00:18:27,200
we have the first part

00:18:24,240 --> 00:18:27,840
we have flute so another sample

00:18:27,200 --> 00:18:31,600
instrument

00:18:27,840 --> 00:18:34,320
service injected the controller

00:18:31,600 --> 00:18:35,520
and we've started the first one at zero

00:18:34,320 --> 00:18:38,160
and then we have two measures

00:18:35,520 --> 00:18:39,200
and then we started the next one at two

00:18:38,160 --> 00:18:42,160
so that'll be

00:18:39,200 --> 00:18:43,679
the third and the fourth measure so

00:18:42,160 --> 00:18:44,559
it'll play the first part and then the

00:18:43,679 --> 00:18:57,280
second part

00:18:44,559 --> 00:19:00,480
let's see what that sounds like

00:18:57,280 --> 00:19:01,600
and second part all right let's talk

00:19:00,480 --> 00:19:04,640
about loops

00:19:01,600 --> 00:19:07,760
so a loop is just a repeat

00:19:04,640 --> 00:19:11,039
i said parts are responsible for loops

00:19:07,760 --> 00:19:12,000
so to specify a loop you pass the loop

00:19:11,039 --> 00:19:13,600
argument

00:19:12,000 --> 00:19:15,679
and you specify a number of how many

00:19:13,600 --> 00:19:17,360
times to loop but you also need to

00:19:15,679 --> 00:19:20,799
specify

00:19:17,360 --> 00:19:22,799
loop end so that's actually how

00:19:20,799 --> 00:19:24,320
long to go before you loop there's also

00:19:22,799 --> 00:19:25,360
a loop start if you don't want to loop

00:19:24,320 --> 00:19:26,960
all the way back to the beginning but

00:19:25,360 --> 00:19:29,520
here we're just going to loop

00:19:26,960 --> 00:19:30,480
back to the beginning we've defined two

00:19:29,520 --> 00:19:32,080
measures

00:19:30,480 --> 00:19:33,360
and we've said we want to loop after two

00:19:32,080 --> 00:19:34,400
measures so we'll just repeat the whole

00:19:33,360 --> 00:19:37,870
thing

00:19:34,400 --> 00:19:45,070
so let's see what that sounds like

00:19:37,870 --> 00:19:45,070
[Music]

00:19:46,320 --> 00:19:49,360
let's see it just played through it

00:19:47,360 --> 00:19:52,720
twice

00:19:49,360 --> 00:19:55,039
all right let's create a drum kit

00:19:52,720 --> 00:19:56,320
so drums are pretty interesting because

00:19:55,039 --> 00:19:59,360
they're an instrument that's actually

00:19:56,320 --> 00:20:00,799
composed of multiple sub instruments

00:19:59,360 --> 00:20:03,360
so what i've done here is i've created a

00:20:00,799 --> 00:20:05,200
drum service and these are actually all

00:20:03,360 --> 00:20:06,799
just one thing i've just broken it apart

00:20:05,200 --> 00:20:08,960
for a display here

00:20:06,799 --> 00:20:09,919
so give it a name drum kit and then

00:20:08,960 --> 00:20:13,200
instead of creating an

00:20:09,919 --> 00:20:14,720
enst i create a kick so the kick drum is

00:20:13,200 --> 00:20:18,159
the big one down on the floor

00:20:14,720 --> 00:20:19,039
the bass drum give it a name i give it a

00:20:18,159 --> 00:20:22,400
default pitch

00:20:19,039 --> 00:20:24,240
and what default pitch lets me do is

00:20:22,400 --> 00:20:25,440
define if i don't give it a pitch just

00:20:24,240 --> 00:20:28,720
use this pitch

00:20:25,440 --> 00:20:31,280
and it's a drum drums are tuned they

00:20:28,720 --> 00:20:31,840
do have pitch but here we've just given

00:20:31,280 --> 00:20:34,720
it a

00:20:31,840 --> 00:20:35,760
c1 a very low because it's a bass drum c

00:20:34,720 --> 00:20:38,960
note

00:20:35,760 --> 00:20:40,880
and for the ants we've created a

00:20:38,960 --> 00:20:43,919
membrane synth and

00:20:40,880 --> 00:20:44,880
this this synth comes from tone js and

00:20:43,919 --> 00:20:47,360
what a synth is

00:20:44,880 --> 00:20:48,000
as opposed to a sample so while samples

00:20:47,360 --> 00:20:50,960
are

00:20:48,000 --> 00:20:52,400
recordings of instruments a synth is

00:20:50,960 --> 00:20:53,280
actually completely generated by the

00:20:52,400 --> 00:20:54,559
computer

00:20:53,280 --> 00:20:56,320
and you give it all these various

00:20:54,559 --> 00:20:57,520
parameters

00:20:56,320 --> 00:20:59,520
that could do a whole talk on

00:20:57,520 --> 00:21:01,200
oscillators and envelopes and how that

00:20:59,520 --> 00:21:03,840
works and

00:21:01,200 --> 00:21:05,039
different waveforms and combining them

00:21:03,840 --> 00:21:07,840
together

00:21:05,039 --> 00:21:09,200
but basically it's computer-generated

00:21:07,840 --> 00:21:09,919
music here and then we send that to

00:21:09,200 --> 00:21:12,960
master

00:21:09,919 --> 00:21:15,200
that's our output snare

00:21:12,960 --> 00:21:16,880
snare is actually pretty hard to

00:21:15,200 --> 00:21:19,679
synthesize

00:21:16,880 --> 00:21:21,440
well so i'm actually using a sample here

00:21:19,679 --> 00:21:22,880
again with the default pitch

00:21:21,440 --> 00:21:24,480
and then the hi-hat and this one's a

00:21:22,880 --> 00:21:25,440
little more complicated because it uses

00:21:24,480 --> 00:21:28,400
this pan fall

00:21:25,440 --> 00:21:29,520
to get some effect but this kind of

00:21:28,400 --> 00:21:31,360
demonstrates

00:21:29,520 --> 00:21:33,840
how you can chain things with tone.js

00:21:31,360 --> 00:21:35,360
together and you can create this pan

00:21:33,840 --> 00:21:37,200
ball effect

00:21:35,360 --> 00:21:38,880
send that to master and then you

00:21:37,200 --> 00:21:41,919
actually connect

00:21:38,880 --> 00:21:44,080
your hi-hat synth to that so you change

00:21:41,919 --> 00:21:46,240
chain things together change instruments

00:21:44,080 --> 00:21:48,720
to effects to a master output

00:21:46,240 --> 00:21:51,600
and it's a metal synth which is just a

00:21:48,720 --> 00:21:51,600
different kind of synth

00:21:52,400 --> 00:21:58,880
so how you use this is

00:21:56,000 --> 00:22:00,559
invoke instrument pass it drums but in

00:21:58,880 --> 00:22:02,720
the part

00:22:00,559 --> 00:22:04,559
you specify the sub instrument that'll

00:22:02,720 --> 00:22:06,480
actually pull off

00:22:04,559 --> 00:22:08,000
that sub instrument off of the

00:22:06,480 --> 00:22:09,120
instrument because again the instrument

00:22:08,000 --> 00:22:13,679
is passed to the

00:22:09,120 --> 00:22:16,799
contextual part component and so

00:22:13,679 --> 00:22:20,480
we do that here and then

00:22:16,799 --> 00:22:21,280
we have the snare part the snare was a

00:22:20,480 --> 00:22:23,679
little bit loud

00:22:21,280 --> 00:22:25,679
so i passed volume to it to turn it down

00:22:23,679 --> 00:22:28,240
a little bit

00:22:25,679 --> 00:22:29,440
and then i've specified half notes here

00:22:28,240 --> 00:22:32,799
to let the snare ring

00:22:29,440 --> 00:22:34,080
a little while it sounds better and

00:22:32,799 --> 00:22:36,640
finally down at the bottom we have the

00:22:34,080 --> 00:22:37,840
hi-hat and the hi-hat was very loud so i

00:22:36,640 --> 00:22:40,640
turned it down

00:22:37,840 --> 00:22:41,600
a good bit i'm also passing this thing

00:22:40,640 --> 00:22:43,679
called humanize

00:22:41,600 --> 00:22:44,880
and what humanizes in tone.js is it

00:22:43,679 --> 00:22:48,400
introduces a little bit of

00:22:44,880 --> 00:22:50,080
random variance instead of hitting right

00:22:48,400 --> 00:22:53,120
exactly on the beat

00:22:50,080 --> 00:22:54,000
and that's because humans don't always

00:22:53,120 --> 00:22:55,840
hit exactly right

00:22:54,000 --> 00:22:57,360
on the beat and it turns out computer

00:22:55,840 --> 00:22:59,120
generating music can

00:22:57,360 --> 00:23:01,120
feel sort of sterile sometimes because

00:22:59,120 --> 00:23:03,919
it's so precise and so this is

00:23:01,120 --> 00:23:06,480
changing that up just a little bit now

00:23:03,919 --> 00:23:08,640
i've scheduled the snare to start it

00:23:06,480 --> 00:23:10,080
one and the hi-hat to start at two

00:23:08,640 --> 00:23:10,799
because for this demonstration i just

00:23:10,080 --> 00:23:14,000
wanted to

00:23:10,799 --> 00:23:14,000
play one after the other

00:23:16,559 --> 00:23:26,480
kick drum

00:23:23,200 --> 00:23:29,600
and hi-hat okay we have a drum kit so

00:23:26,480 --> 00:23:30,559
let's loop it so drum loops so often in

00:23:29,600 --> 00:23:34,480
a song you have

00:23:30,559 --> 00:23:36,960
a riff like a drum riff

00:23:34,480 --> 00:23:37,840
that pattern that plays over and over

00:23:36,960 --> 00:23:40,640
again in a loop

00:23:37,840 --> 00:23:42,000
so the way you do that is you can

00:23:40,640 --> 00:23:44,480
actually pass the loop

00:23:42,000 --> 00:23:47,039
argument to the instrument and it'll

00:23:44,480 --> 00:23:48,240
pass that down to all the parts

00:23:47,039 --> 00:23:50,320
and then we're going to schedule these

00:23:48,240 --> 00:23:53,200
to all play simultaneously

00:23:50,320 --> 00:23:55,039
so the default start is zero so i

00:23:53,200 --> 00:23:57,760
haven't specified that here

00:23:55,039 --> 00:23:59,120
but what i've done is i've specified

00:23:57,760 --> 00:24:01,039
some

00:23:59,120 --> 00:24:02,720
notes to play at various different times

00:24:01,039 --> 00:24:03,679
so the kick is going to be on the first

00:24:02,720 --> 00:24:06,640
beat

00:24:03,679 --> 00:24:08,400
the snare is going to be on the third

00:24:06,640 --> 00:24:10,880
beat and the high hats on every beat and

00:24:08,400 --> 00:24:14,880
this is actually a very standard

00:24:10,880 --> 00:24:14,880
rock beat let's see what that sounds

00:24:16,840 --> 00:24:19,840
like

00:24:26,000 --> 00:24:31,200
very standard beat cool all right

00:24:29,360 --> 00:24:32,640
let's put it all together so i've

00:24:31,200 --> 00:24:34,400
actually composed a song

00:24:32,640 --> 00:24:35,840
with ember which i'm going to

00:24:34,400 --> 00:24:38,720
demonstrate in a minute

00:24:35,840 --> 00:24:39,440
so i've created routes and controllers

00:24:38,720 --> 00:24:41,679
for

00:24:39,440 --> 00:24:43,200
these different sections the intro the

00:24:41,679 --> 00:24:44,559
verse and the chorus

00:24:43,200 --> 00:24:46,559
and i've set it up to actually auto

00:24:44,559 --> 00:24:49,360
advance among the sections

00:24:46,559 --> 00:24:51,760
so it'll actually do intro a verse a

00:24:49,360 --> 00:24:53,679
chorus and then a final verse

00:24:51,760 --> 00:24:56,240
the routes handle all the timing and

00:24:53,679 --> 00:24:56,240
advancing

00:24:56,320 --> 00:25:01,760
so there's some timing

00:24:59,360 --> 00:25:03,600
about where to get these sections to

00:25:01,760 --> 00:25:04,159
play in relation to each other it's all

00:25:03,600 --> 00:25:05,919
handled

00:25:04,159 --> 00:25:07,279
by the routes and then the advancing

00:25:05,919 --> 00:25:10,720
which is just

00:25:07,279 --> 00:25:10,720
transition transition to

00:25:11,360 --> 00:25:15,200
the controllers are really there just to

00:25:13,039 --> 00:25:17,200
inject the instruments the services

00:25:15,200 --> 00:25:18,880
to get them into the templates and so i

00:25:17,200 --> 00:25:22,480
set this up with a parent route

00:25:18,880 --> 00:25:24,960
for the drums because i want those

00:25:22,480 --> 00:25:25,760
drums to loop all the way through the

00:25:24,960 --> 00:25:27,279
whole saw

00:25:25,760 --> 00:25:29,200
and not have to redefine them for every

00:25:27,279 --> 00:25:32,320
section and then we have child routes

00:25:29,200 --> 00:25:32,320
for each of these sections

00:25:32,400 --> 00:25:43,840
so let's have a listen

00:26:22,840 --> 00:26:25,840
first

00:26:36,840 --> 00:26:39,840
up

00:26:41,010 --> 00:26:47,120
[Music]

00:26:43,120 --> 00:26:47,120
there we go there's a song

00:26:48,240 --> 00:26:52,240
so future plans i want to write more

00:26:50,559 --> 00:26:54,240
songs this was actually a lot of fun

00:26:52,240 --> 00:26:55,840
once i got things set up and going i was

00:26:54,240 --> 00:26:58,240
it was fun to build that too

00:26:55,840 --> 00:26:59,760
it was really fun to work with i really

00:26:58,240 --> 00:27:01,360
want to turn this into an add-on

00:26:59,760 --> 00:27:02,799
and put it on the community i think it

00:27:01,360 --> 00:27:04,960
would be great for other people to

00:27:02,799 --> 00:27:07,279
be able to play with this i want to

00:27:04,960 --> 00:27:08,720
continue to add features

00:27:07,279 --> 00:27:10,320
there's a lot more we could do and a lot

00:27:08,720 --> 00:27:11,440
more stuff i could get into the template

00:27:10,320 --> 00:27:14,640
and make it

00:27:11,440 --> 00:27:16,000
usable and i want to try collaboratively

00:27:14,640 --> 00:27:20,080
writing songs using

00:27:16,000 --> 00:27:22,320
github i think that would be pretty cool

00:27:20,080 --> 00:27:24,320
it's probably been done before i'm sure

00:27:22,320 --> 00:27:25,679
but i think this would be a neat any way

00:27:24,320 --> 00:27:28,559
to do it

00:27:25,679 --> 00:27:29,200
so i want to thank you all for listening

00:27:28,559 --> 00:27:32,480
to my talk

00:27:29,200 --> 00:27:32,480
i'm going to put all of this up at

00:27:32,960 --> 00:27:36,720
slash emperor's jmcdavis.github.com and

00:27:35,120 --> 00:27:38,799
if you want to follow me

00:27:36,720 --> 00:27:40,240
i will tweet out when i release this as

00:27:38,799 --> 00:27:42,720
an add-on and

00:27:40,240 --> 00:27:44,240
do more work on it it's jam c davis on

00:27:42,720 --> 00:27:47,039
twitter without the e

00:27:44,240 --> 00:27:49,200
and everywhere else discord and github

00:27:47,039 --> 00:27:55,279
it's james c davis

00:27:49,200 --> 00:27:55,279

YouTube URL: https://www.youtube.com/watch?v=tGg_jG_NsU4


