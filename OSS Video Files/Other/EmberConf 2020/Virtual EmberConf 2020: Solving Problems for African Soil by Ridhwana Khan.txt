Title: Virtual EmberConf 2020: Solving Problems for African Soil by Ridhwana Khan
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Solving Problems for African Soil by Ridhwana Khan

Often smart people build ambitious applications that are meant to solve the worldâ€™s problems - like education, food shortages etc. However, the context like limited resources, minimal infrastructure, and smartphone adoption are usually overlooked. Solutions like low bandwidth apps, offline-first solutions are never at the top of the list even though they are sometimes most appropriate.

In this talk Iâ€™d like to walk you through some of the challenges that Africans face and how we can utilise some of Emberâ€™s features as a tool to support relevant and effective solutions.
Captions: 
	00:00:01,270 --> 00:00:20,820
[Music]

00:00:21,270 --> 00:00:24,970
hi everybody thank you for attending my

00:00:24,130 --> 00:00:27,369
talk today

00:00:24,970 --> 00:00:29,770
my name is Ramona and I'm a senior

00:00:27,369 --> 00:00:31,930
software engineer I currently work at a

00:00:29,770 --> 00:00:35,559
company called Dell you may know it

00:00:31,930 --> 00:00:38,890
better is Delta 2 or at the practical

00:00:35,559 --> 00:00:41,260
Devon Twitter and atever I hope flooding

00:00:38,890 --> 00:00:44,710
my passion for coding learning and

00:00:41,260 --> 00:00:46,660
sharing and building communities if

00:00:44,710 --> 00:00:48,580
you've not heard this episode before

00:00:46,660 --> 00:00:50,979
it's one of the many South African

00:00:48,580 --> 00:00:53,199
accents I hope that some of you have

00:00:50,979 --> 00:00:56,830
been to South Africa particularly Cape

00:00:53,199 --> 00:00:58,979
Town which is beautiful if not I hope

00:00:56,830 --> 00:01:01,449
that you'd visit sometime soon in

00:00:58,979 --> 00:01:03,610
addition to my job all surround a

00:01:01,449 --> 00:01:04,900
nonprofit organization in South Africa

00:01:03,610 --> 00:01:07,479
called Casa Metz

00:01:04,900 --> 00:01:09,820
Claire Metz is an after-school program

00:01:07,479 --> 00:01:13,360
that exposes students in under-resourced

00:01:09,820 --> 00:01:15,970
communities to stir water in the

00:01:13,360 --> 00:01:18,820
environments of kasi Metz has allowed me

00:01:15,970 --> 00:01:21,640
to appreciate the challenges that we as

00:01:18,820 --> 00:01:23,950
African space and it's inspired me to

00:01:21,640 --> 00:01:26,079
Bhosle write the stroke to share my

00:01:23,950 --> 00:01:29,350
experiences on a global level and

00:01:26,079 --> 00:01:31,270
secondly both my own applications with

00:01:29,350 --> 00:01:34,240
performance at the forefront of my mind

00:01:31,270 --> 00:01:38,189
to compensate for the challenges that we

00:01:34,240 --> 00:01:38,189
encounter in developing communities

00:01:38,460 --> 00:01:43,600
unless map the countries marked in

00:01:41,170 --> 00:01:46,030
purple are developing countries the

00:01:43,600 --> 00:01:48,159
darker purple is the high-income

00:01:46,030 --> 00:01:50,619
developing countries unlike most of

00:01:48,159 --> 00:01:53,740
Africa but they nevertheless are still

00:01:50,619 --> 00:01:56,710
developing so why am i showing you this

00:01:53,740 --> 00:01:59,140
map the reason is because whatever the

00:01:56,710 --> 00:02:01,920
challenges that Africa experiences at

00:01:59,140 --> 00:02:05,319
least 80% of these developing countries

00:02:01,920 --> 00:02:08,229
there is all these countries marked in

00:02:05,319 --> 00:02:10,630
purple they experiencing it too which

00:02:08,229 --> 00:02:13,360
means if you don't follow your acts to

00:02:10,630 --> 00:02:15,250
cater for emerging markets these are the

00:02:13,360 --> 00:02:17,740
people that will either not be able to

00:02:15,250 --> 00:02:20,680
use your exit or or will have difficulty

00:02:17,740 --> 00:02:23,440
using them living on the African

00:02:20,680 --> 00:02:23,720
continent I have a lot of exposure to

00:02:23,440 --> 00:02:26,360
the

00:02:23,720 --> 00:02:32,000
that we experienced here and I'd like to

00:02:26,360 --> 00:02:34,550
go through some so the first challenge

00:02:32,000 --> 00:02:37,340
that I'd like to outline is low chilling

00:02:34,550 --> 00:02:39,980
and hello chilling is just really the

00:02:37,340 --> 00:02:43,220
bane of my existence and other Africans

00:02:39,980 --> 00:02:44,720
existence too for those who do not know

00:02:43,220 --> 00:02:46,670
my cloud chilling years

00:02:44,720 --> 00:02:49,610
it's the deliberate shutdown of

00:02:46,670 --> 00:02:52,010
electrical power in part or parts of

00:02:49,610 --> 00:02:54,020
into power distributed system generally

00:02:52,010 --> 00:02:56,240
to prevent the failure of the entire

00:02:54,020 --> 00:02:57,470
system when the demand strains the

00:02:56,240 --> 00:02:59,840
capacity of the system

00:02:57,470 --> 00:03:02,720
I think the quali drawing that blackouts

00:02:59,840 --> 00:03:05,540
in the US but it's a little bit more

00:03:02,720 --> 00:03:08,180
impactful here the implications of these

00:03:05,540 --> 00:03:10,640
is that there is no power for a minimum

00:03:08,180 --> 00:03:13,430
of four hours in South Africa and most

00:03:10,640 --> 00:03:16,130
days rotating around the different parts

00:03:13,430 --> 00:03:18,410
of the city this is a graph on the slide

00:03:16,130 --> 00:03:21,620
showing the plant breakdown of energy

00:03:18,410 --> 00:03:23,720
over the two months it is absolutely

00:03:21,620 --> 00:03:26,570
insane to think that our plants break

00:03:23,720 --> 00:03:29,390
down as much in our African countries

00:03:26,570 --> 00:03:32,150
like Zimbabwe and Zambia as you can see

00:03:29,390 --> 00:03:34,670
from these tweets the power is turned

00:03:32,150 --> 00:03:37,670
off unexpectedly but at around 12 hours

00:03:34,670 --> 00:03:40,400
at the time as a result of having no

00:03:37,670 --> 00:03:42,290
power we tend to have faint - no cell

00:03:40,400 --> 00:03:44,269
phone reception because the cell phone

00:03:42,290 --> 00:03:46,660
towers are being overused and are unable

00:03:44,269 --> 00:03:49,640
to handle this increased capacity

00:03:46,660 --> 00:03:53,600
cheering these periods no cell phone

00:03:49,640 --> 00:03:56,570
reception means no 2g 3G or 4G thus

00:03:53,600 --> 00:04:01,570
without internet access we are unable to

00:03:56,570 --> 00:04:01,570
use full functionality of applications

00:04:01,810 --> 00:04:06,769
another challenge that a large portion

00:04:04,190 --> 00:04:09,170
of Africans face is that we have very

00:04:06,769 --> 00:04:11,060
basic digital literacy and this is

00:04:09,170 --> 00:04:13,820
probably due to the reasons that a lot

00:04:11,060 --> 00:04:15,890
of public schools have no computer labs

00:04:13,820 --> 00:04:17,720
and students don't have access to

00:04:15,890 --> 00:04:21,290
computers at home enough

00:04:17,720 --> 00:04:26,030
hence complex and unintuitive interfaces

00:04:21,290 --> 00:04:28,850
proved to be a hurdle teacher cost in

00:04:26,030 --> 00:04:30,629
South Africa are also extremely high and

00:04:28,850 --> 00:04:33,839
they also hide now

00:04:30,629 --> 00:04:37,499
Africa South Africa on this chart puts

00:04:33,839 --> 00:04:40,949
between China and Canada with about $10

00:04:37,499 --> 00:04:43,469
per gig you may say this is not too

00:04:40,949 --> 00:04:46,499
different compared to the US however

00:04:43,469 --> 00:04:48,360
this is not tip dollars is not

00:04:46,499 --> 00:04:51,659
proportional to the audience of South

00:04:48,360 --> 00:04:54,479
Africans who on earth even less than 50%

00:04:51,659 --> 00:04:59,129
is completed employees in the US or

00:04:54,479 --> 00:05:01,429
Canada while smartphones are common in

00:04:59,129 --> 00:05:04,529
Europe and northern America sub-saharan

00:05:01,429 --> 00:05:07,289
Africa who live in ownership in South

00:05:04,529 --> 00:05:09,990
Africa around 51% of people own a

00:05:07,289 --> 00:05:12,979
smartphone however this is below the

00:05:09,990 --> 00:05:18,080
medium of 59 whilst countries like Ghana

00:05:12,979 --> 00:05:20,939
Nigeria Kenya and Tanzania even lower

00:05:18,080 --> 00:05:23,879
they still huge populations of a

00:05:20,939 --> 00:05:26,969
population of Africa that uses feature

00:05:23,879 --> 00:05:28,559
phones which is more affordable than 7

00:05:26,969 --> 00:05:30,719
which is more affordable than smart

00:05:28,559 --> 00:05:34,379
phones because they sell between 20 to

00:05:30,719 --> 00:05:38,129
25 dollars being no cost feature phones

00:05:34,379 --> 00:05:41,399
tend to have slower CPUs Loram lower

00:05:38,129 --> 00:05:43,830
storage older OS versions and some of

00:05:41,399 --> 00:05:47,669
these devices can even be restricted to

00:05:43,830 --> 00:05:50,279
just 2g or maximum of eg networks many

00:05:47,669 --> 00:05:52,829
contain outdated browsers and they often

00:05:50,279 --> 00:05:55,079
don't even have touch screens instead

00:05:52,829 --> 00:05:58,860
they have a key period or deep here for

00:05:55,079 --> 00:06:01,559
navigation and Casamance we most of the

00:05:58,860 --> 00:06:04,199
students have either no or low end

00:06:01,559 --> 00:06:06,059
devices they gave coated tech hubs in

00:06:04,199 --> 00:06:08,189
the community with their desktop

00:06:06,059 --> 00:06:10,680
computers in Internet is provided

00:06:08,189 --> 00:06:15,869
however there is a time limit for the

00:06:10,680 --> 00:06:18,829
utilization of these computers the

00:06:15,869 --> 00:06:24,559
internet penetration rates are between

00:06:18,829 --> 00:06:28,379
75% level 75% globally and

00:06:24,559 --> 00:06:30,770
in South Africa DS it's about just 59

00:06:28,379 --> 00:06:33,590
percent whilst other African countries

00:06:30,770 --> 00:06:37,099
like again ganya Kenya and Tanzania are

00:06:33,590 --> 00:06:38,660
below 40% the infrastructure is in

00:06:37,099 --> 00:06:41,180
lacking in under-resourced communities

00:06:38,660 --> 00:06:44,569
in South Africa and other parts of

00:06:41,180 --> 00:06:47,840
Africa hence very few have constant

00:06:44,569 --> 00:06:50,720
internet access instead most people end

00:06:47,840 --> 00:06:53,449
up using 2g or 3G networks where they

00:06:50,720 --> 00:06:55,970
are able but it sometimes there's no

00:06:53,449 --> 00:06:58,009
connection at all if we look at the

00:06:55,970 --> 00:07:00,259
statistics for the top apps that I

00:06:58,009 --> 00:07:02,479
downloaded in Africa unlike something

00:07:00,259 --> 00:07:04,880
like the Google Play Store you will see

00:07:02,479 --> 00:07:07,639
that the light versions of applications

00:07:04,880 --> 00:07:12,199
when available always end up being at

00:07:07,639 --> 00:07:14,419
the top of these statistics we need to

00:07:12,199 --> 00:07:17,539
optimize for fast loading performance

00:07:14,419 --> 00:07:21,289
relative to devices destiny means

00:07:17,539 --> 00:07:24,110
optimizing the CPU memory best battery

00:07:21,289 --> 00:07:26,240
and bandwidth usage before divided

00:07:24,110 --> 00:07:28,669
diving into some of these techniques to

00:07:26,240 --> 00:07:29,840
optimize performance let's go to some

00:07:28,669 --> 00:07:31,819
important metrics

00:07:29,840 --> 00:07:34,849
typically used to measure performance of

00:07:31,819 --> 00:07:36,919
web applications or sites these metrics

00:07:34,849 --> 00:07:41,599
can be measured at different phases of

00:07:36,919 --> 00:07:44,060
the loading cycle so the first one is

00:07:41,599 --> 00:07:46,550
the first paint the first paint marks

00:07:44,060 --> 00:07:49,069
the points immediately after navigation

00:07:46,550 --> 00:07:51,469
when the browser Randall renders some

00:07:49,069 --> 00:07:53,330
pixels to the screen depending on the

00:07:51,469 --> 00:07:55,669
structure of the page this could be

00:07:53,330 --> 00:07:57,919
displaying the background color or it

00:07:55,669 --> 00:08:00,440
could be the entire page being rendered

00:07:57,919 --> 00:08:03,080
it's a really depends on how the app was

00:08:00,440 --> 00:08:05,690
structured and how intent full they were

00:08:03,080 --> 00:08:07,870
about performance the we want to

00:08:05,690 --> 00:08:11,330
optimize most of the page being rendered

00:08:07,870 --> 00:08:13,550
the first content full paint is the

00:08:11,330 --> 00:08:16,699
point when the browser renders the first

00:08:13,550 --> 00:08:19,849
bit of content from the Dom which must

00:08:16,699 --> 00:08:21,979
be text in image or just any element for

00:08:19,849 --> 00:08:24,710
site visitors with this time signifies

00:08:21,979 --> 00:08:26,690
when actual content has been loaded on

00:08:24,710 --> 00:08:28,990
the page and it wasn't just like any

00:08:26,690 --> 00:08:30,969
change the first meaningful paint

00:08:28,990 --> 00:08:36,409
measures when the page appears

00:08:30,969 --> 00:08:39,690
meaningfully complete the first CPU idle

00:08:36,409 --> 00:08:42,990
marks the first time in which pages main

00:08:39,690 --> 00:08:45,150
is quiet enough to handle input and the

00:08:42,990 --> 00:08:47,700
time to eat active measures when a user

00:08:45,150 --> 00:08:50,370
can consistently interact which means

00:08:47,700 --> 00:08:54,510
touch or click with all the page

00:08:50,370 --> 00:08:56,490
elements so in subsequent sections I

00:08:54,510 --> 00:08:59,040
will be providing a high level overview

00:08:56,490 --> 00:09:01,620
of some techniques that we can use to

00:08:59,040 --> 00:09:04,080
optimize for performance within emerging

00:09:01,620 --> 00:09:06,780
markets they will include firstly

00:09:04,080 --> 00:09:09,630
reducing the bundle size secondly

00:09:06,780 --> 00:09:12,230
server-side or static rendering the

00:09:09,630 --> 00:09:15,900
implementation of service workers and

00:09:12,230 --> 00:09:17,670
number 4 - some other smaller terms in

00:09:15,900 --> 00:09:20,160
each of these sections we will reference

00:09:17,670 --> 00:09:23,130
the metric that we are optimizing for

00:09:20,160 --> 00:09:24,510
and we will also give examples within

00:09:23,130 --> 00:09:29,240
the context of ember

00:09:24,510 --> 00:09:29,240
we are clickable so let's dive right in

00:09:29,960 --> 00:09:34,020
in modern times

00:09:31,980 --> 00:09:37,200
most of our web applications I have

00:09:34,020 --> 00:09:41,100
really heavily reliant on JavaScript and

00:09:37,200 --> 00:09:42,990
we ship so my JavaScript he uses then it

00:09:41,100 --> 00:09:45,960
has become one of the most expensive

00:09:42,990 --> 00:09:48,120
resources on the web we load our

00:09:45,960 --> 00:09:50,820
applications without thinking of the

00:09:48,120 --> 00:09:53,760
cost implication on both the hard way in

00:09:50,820 --> 00:09:56,160
the network of a user's device the

00:09:53,760 --> 00:09:57,990
consequences of loading to my transcript

00:09:56,160 --> 00:10:00,020
and feature phones are low-end

00:09:57,990 --> 00:10:03,180
smartphones in emerging markets are

00:10:00,020 --> 00:10:05,040
substantial on such devices the

00:10:03,180 --> 00:10:07,470
JavaScript can end up block in the main

00:10:05,040 --> 00:10:10,170
did for significant amount of time

00:10:07,470 --> 00:10:13,140
that's increasing the time to interact

00:10:10,170 --> 00:10:15,510
with the application in addition the

00:10:13,140 --> 00:10:17,430
passing of the extra JavaScript can

00:10:15,510 --> 00:10:19,920
result in a breakdown of that thread

00:10:17,430 --> 00:10:23,430
causing applications to sometimes just

00:10:19,920 --> 00:10:25,230
run out of memory or hang or crash this

00:10:23,430 --> 00:10:28,920
leaves the user of the feeling of

00:10:25,230 --> 00:10:31,110
extreme frustration we he or she ends up

00:10:28,920 --> 00:10:36,089
clicking around the interface without

00:10:31,110 --> 00:10:38,970
seeing an effect according to el us -

00:10:36,089 --> 00:10:42,120
article the cost of javascript in 2019

00:10:38,970 --> 00:10:44,800
which I recommended every person reads

00:10:42,120 --> 00:10:47,230
he outlines how on mobile it takes

00:10:44,800 --> 00:10:50,110
three to four times longer for median

00:10:47,230 --> 00:10:52,240
phone like a moto G four to execute read

00:10:50,110 --> 00:10:54,820
its JavaScript complete a high-end

00:10:52,240 --> 00:10:58,240
device like the pixel T and it takes

00:10:54,820 --> 00:11:00,630
over six times as long under low-end

00:10:58,240 --> 00:11:02,950
device like they are to tell one acts

00:11:00,630 --> 00:11:05,529
similarly downloading loads of

00:11:02,950 --> 00:11:08,140
JavaScript and CSS files on a slow

00:11:05,529 --> 00:11:11,140
network connection increases the first

00:11:08,140 --> 00:11:13,149
meaningful paint I'm VI by leaving the

00:11:11,140 --> 00:11:17,200
user with acceptance a feeling of

00:11:13,149 --> 00:11:19,420
frustration according to Google's

00:11:17,200 --> 00:11:23,320
double-click when come we'll compare

00:11:19,420 --> 00:11:26,380
sites the low in five seconds compared

00:11:23,320 --> 00:11:29,529
to sites that low in 19 seconds the

00:11:26,380 --> 00:11:33,160
fastest sites it is 70%

00:11:29,529 --> 00:11:36,940
longer average session things 35% lower

00:11:33,160 --> 00:11:39,279
bounce rates and 25% higher air view

00:11:36,940 --> 00:11:42,880
mobility than the slower counterparts

00:11:39,279 --> 00:11:44,860
that's a lot of increases knowing that

00:11:42,880 --> 00:11:47,980
the first meaningful paint and the time

00:11:44,860 --> 00:11:50,140
to interact is too high if it's too high

00:11:47,980 --> 00:11:52,600
the juices will leave our sites and most

00:11:50,140 --> 00:11:55,329
likely not written how can you then

00:11:52,600 --> 00:11:57,700
reduce the bundle site so some very

00:11:55,329 --> 00:12:00,459
simple solutions include the first one

00:11:57,700 --> 00:12:03,010
is many file in concatenate in your

00:12:00,459 --> 00:12:04,870
JavaScript both we can improve on the

00:12:03,010 --> 00:12:07,360
overall performance of our sites and

00:12:04,870 --> 00:12:09,810
applications by many finally on the

00:12:07,360 --> 00:12:12,790
transcript to reduce the file size and

00:12:09,810 --> 00:12:16,209
concatenating our relevant files to

00:12:12,790 --> 00:12:18,459
reduce the number of requests in every

00:12:16,209 --> 00:12:20,589
CLI we are fortunate that the J's files

00:12:18,459 --> 00:12:23,050
are ready minified by default in

00:12:20,589 --> 00:12:25,529
production using broccoli uglify draya's

00:12:23,050 --> 00:12:28,000
and then whatever files are ready

00:12:25,529 --> 00:12:31,029
concatenated into just one javascript

00:12:28,000 --> 00:12:35,199
file however we can improve on us even

00:12:31,029 --> 00:12:37,600
further with code splitting so instead

00:12:35,199 --> 00:12:40,180
of shoving all the JavaScript at once we

00:12:37,600 --> 00:12:43,180
can split the JavaScript but page routes

00:12:40,180 --> 00:12:45,940
or component this means that we can sum

00:12:43,180 --> 00:12:49,120
the minimum amount of JavaScript to

00:12:45,940 --> 00:12:52,330
prioritize what a user will need and the

00:12:49,120 --> 00:12:54,310
after we can lazy load the rest so we

00:12:52,330 --> 00:12:57,160
can fetch the additional bundles even in

00:12:54,310 --> 00:13:00,160
the background when the uses idle or in

00:12:57,160 --> 00:13:02,620
response to user initiated action once

00:13:00,160 --> 00:13:05,890
we have introduced the overall amount of

00:13:02,620 --> 00:13:09,520
coding apps we have avoided loading code

00:13:05,890 --> 00:13:11,920
that the user may not use and reduce the

00:13:09,520 --> 00:13:16,060
amount of code needed during the initial

00:13:11,920 --> 00:13:18,430
load another common way that we end up

00:13:16,060 --> 00:13:21,130
loading our Java scripts is by importing

00:13:18,430 --> 00:13:23,530
loads and nodes of Iran's we just keep

00:13:21,130 --> 00:13:26,110
throwing it in me and libraries into our

00:13:23,530 --> 00:13:28,720
applications instead we could have

00:13:26,110 --> 00:13:30,910
simply claimed the same functionality

00:13:28,720 --> 00:13:33,190
sometimes variety which is a small

00:13:30,910 --> 00:13:37,710
custom JavaScript function or by

00:13:33,190 --> 00:13:39,820
importing only a portion of that library

00:13:37,710 --> 00:13:42,070
importing only a portion of the library

00:13:39,820 --> 00:13:45,520
is now possible with tree shaking

00:13:42,070 --> 00:13:47,500
tree shaking was free shaking we can

00:13:45,520 --> 00:13:50,020
take advantage of static import

00:13:47,500 --> 00:13:52,480
statements to put in only the specific

00:13:50,020 --> 00:13:55,300
and relevant parts of es6 modules

00:13:52,480 --> 00:13:58,060
hence eliminating dead code it's

00:13:55,300 --> 00:14:00,370
possible to utilize codes music and tree

00:13:58,060 --> 00:14:02,830
shaking from the embroider v2 package

00:14:00,370 --> 00:14:05,560
for those that don't know embroider is

00:14:02,830 --> 00:14:08,890
modern fully featured Perl system that

00:14:05,560 --> 00:14:11,170
works in tandem with ember CLI it also

00:14:08,890 --> 00:14:13,960
newly embraces the ACMA standard for

00:14:11,170 --> 00:14:17,200
importing es6 modules which makes she

00:14:13,960 --> 00:14:19,510
shaking achievable however it is

00:14:17,200 --> 00:14:21,760
important to note that embroider is

00:14:19,510 --> 00:14:23,770
currently in beta and there are some

00:14:21,760 --> 00:14:25,600
risks to be aware of it using it in

00:14:23,770 --> 00:14:28,420
production you can read more about

00:14:25,600 --> 00:14:33,760
embroider on NS status on their own

00:14:28,420 --> 00:14:36,220
estate this page you can't improve if

00:14:33,760 --> 00:14:38,230
you don't measure so some of the tools

00:14:36,220 --> 00:14:40,630
that we can use to audit our sights

00:14:38,230 --> 00:14:43,420
include the Google Chrome's lighthouse

00:14:40,630 --> 00:14:44,940
tool for performance audits depth audits

00:14:43,420 --> 00:14:46,800
that will be useful to look at

00:14:44,940 --> 00:14:49,380
boss you're using our bundle size and

00:14:46,800 --> 00:14:53,070
they are very aptly named so the first

00:14:49,380 --> 00:14:55,950
one is JavaScript Putin is high on it

00:14:53,070 --> 00:14:58,890
and that reveals how much CPU time each

00:14:55,950 --> 00:15:02,400
script on the page will consume along

00:14:58,890 --> 00:15:04,500
with its URL then the onion JavaScript

00:15:02,400 --> 00:15:07,200
audit which reveals the JavaScript

00:15:04,500 --> 00:15:09,060
downloaded by the current page but their

00:15:07,200 --> 00:15:11,880
child but it shows the JavaScript that

00:15:09,060 --> 00:15:13,830
is never used the many fights are Script

00:15:11,880 --> 00:15:16,080
audits visual compiled a list of and

00:15:13,830 --> 00:15:18,750
many five resources that it finds in the

00:15:16,080 --> 00:15:20,640
current page from there you can simply

00:15:18,750 --> 00:15:23,160
take action for many find those files

00:15:20,640 --> 00:15:29,130
manually or comment in your well system

00:15:23,160 --> 00:15:30,840
to do it for you so the second one that

00:15:29,130 --> 00:15:33,570
I can think of is the Embassy and I

00:15:30,840 --> 00:15:36,360
bundle analyzer the Embassy and I bundle

00:15:33,570 --> 00:15:38,400
analyzer analyzes the size and the

00:15:36,360 --> 00:15:41,220
content of your ember apps bundled

00:15:38,400 --> 00:15:43,950
output using a really cool and easy to

00:15:41,220 --> 00:15:45,930
understand visualization more

00:15:43,950 --> 00:15:47,820
specifically we'll be able to see which

00:15:45,930 --> 00:15:49,740
individual models make it into your

00:15:47,820 --> 00:15:51,630
final bundle so if you look at the

00:15:49,740 --> 00:15:53,670
picture you'll be able to see that it

00:15:51,630 --> 00:15:56,810
shows which which are the different

00:15:53,670 --> 00:15:59,340
packages that have gone into your bundle

00:15:56,810 --> 00:16:01,620
we also can find out how big each

00:15:59,340 --> 00:16:04,280
contained module is including the row

00:16:01,620 --> 00:16:07,650
source the magnified and the gzip sizes

00:16:04,280 --> 00:16:10,020
finally we can by looking at the diagram

00:16:07,650 --> 00:16:12,270
we can kind of see which fund of which

00:16:10,020 --> 00:16:14,100
of the packages have made it into a

00:16:12,270 --> 00:16:17,460
bundle one mistake and then we can

00:16:14,100 --> 00:16:20,910
optimize our bundle size the third one

00:16:17,460 --> 00:16:23,010
is funder phobia and so before I

00:16:20,910 --> 00:16:25,710
actually install a bundle to my

00:16:23,010 --> 00:16:28,410
application I like to know how a bundle

00:16:25,710 --> 00:16:30,810
will impact my site is by the phobia

00:16:28,410 --> 00:16:32,940
does this by showing the cost of an NPM

00:16:30,810 --> 00:16:35,340
package by providing the information on

00:16:32,940 --> 00:16:37,830
the size of the package how far it

00:16:35,340 --> 00:16:40,110
downloads on 2g and how fast it

00:16:37,830 --> 00:16:42,180
downloads on a 3G network a what

00:16:40,110 --> 00:16:43,240
percentage of other dependencies that

00:16:42,180 --> 00:16:45,970
package

00:16:43,240 --> 00:16:50,459
Raisa thus we can then make informed

00:16:45,970 --> 00:16:50,459
decisions and ready to edit or not

00:16:51,839 --> 00:16:57,190
well JavaScript single page applications

00:16:55,000 --> 00:16:59,529
can be quite snappy once they are fully

00:16:57,190 --> 00:17:02,380
loaded this is this time between the

00:16:59,529 --> 00:17:04,329
load and time to interact we uses a

00:17:02,380 --> 00:17:07,120
usually presented with the blacks blank

00:17:04,329 --> 00:17:09,640
screen this is because for most single

00:17:07,120 --> 00:17:12,850
page applications the initial document

00:17:09,640 --> 00:17:15,250
written by Java is empty thus resulting

00:17:12,850 --> 00:17:18,819
in an increase in the first content for

00:17:15,250 --> 00:17:21,189
paint so what if I wanted the best of

00:17:18,819 --> 00:17:24,130
both worlds a quick initial load time

00:17:21,189 --> 00:17:25,030
but also just snappy successive

00:17:24,130 --> 00:17:27,550
interactions

00:17:25,030 --> 00:17:30,730
this is achievable using server-side

00:17:27,550 --> 00:17:32,470
rendering or static rendering for all or

00:17:30,730 --> 00:17:35,530
most of the popular pages in your

00:17:32,470 --> 00:17:38,320
applications thus can result in almost

00:17:35,530 --> 00:17:40,360
instant first content full paint which

00:17:38,320 --> 00:17:42,429
is particularly useful for developing

00:17:40,360 --> 00:17:44,890
countries we network connections may be

00:17:42,429 --> 00:17:47,559
unreliable remember that the first

00:17:44,890 --> 00:17:49,809
content will paint which we discussed in

00:17:47,559 --> 00:17:52,120
one of the earlier sides measures the

00:17:49,809 --> 00:17:55,210
time from when the page starts loading

00:17:52,120 --> 00:17:57,550
to it any parts of the pages content is

00:17:55,210 --> 00:17:59,620
rendered on the screen using this

00:17:57,550 --> 00:18:03,160
technique we are then able to display

00:17:59,620 --> 00:18:07,750
useful information that is content to

00:18:03,160 --> 00:18:09,730
the user instantly when I first went in

00:18:07,750 --> 00:18:12,970
full panes is less than a thousand

00:18:09,730 --> 00:18:15,550
milliseconds and uses are really happy

00:18:12,970 --> 00:18:17,980
when the value is between a thousand

00:18:15,550 --> 00:18:20,380
sixty thousand milliseconds one two

00:18:17,980 --> 00:18:22,929
three seconds usual users they're

00:18:20,380 --> 00:18:26,170
usually a little bit less pissed but

00:18:22,929 --> 00:18:29,050
still pretty happy but over these second

00:18:26,170 --> 00:18:31,960
so say three to five seconds sucks

00:18:29,050 --> 00:18:35,220
causing frustration so over five seconds

00:18:31,960 --> 00:18:39,910
uses I'm just completely lost interest

00:18:35,220 --> 00:18:44,140
it's really simple to server-side render

00:18:39,910 --> 00:18:47,260
pages in Emma and also of all we need to

00:18:44,140 --> 00:18:49,510
do is to just use instant install a

00:18:47,260 --> 00:18:52,960
hospital member which actually

00:18:49,510 --> 00:18:56,530
renders the application and allows us to

00:18:52,960 --> 00:18:59,890
pre-render any list of URLs into static

00:18:56,530 --> 00:19:02,200
HTML files and bail time as a results

00:18:59,890 --> 00:19:04,870
the pages can be self statically and it

00:19:02,200 --> 00:19:07,870
has the fast four spins of the HTML

00:19:04,870 --> 00:19:10,270
content from fastboot so all we do is

00:19:07,870 --> 00:19:13,300
reinstall and the CLI possible to

00:19:10,270 --> 00:19:15,370
install prim Bob and then we can

00:19:13,300 --> 00:19:20,440
configure the URLs that we want to pre

00:19:15,370 --> 00:19:27,910
render now this setup we can simply even

00:19:20,440 --> 00:19:30,520
just see the HTML Viacom since the most

00:19:27,910 --> 00:19:32,320
important values here are with the first

00:19:30,520 --> 00:19:34,570
potential paint we can run the

00:19:32,320 --> 00:19:36,850
performance audit once again and we

00:19:34,570 --> 00:19:38,800
notice how the value decreases we see

00:19:36,850 --> 00:19:44,500
the value from the lighthouse chrome

00:19:38,800 --> 00:19:46,660
tools it's great it's great progress

00:19:44,500 --> 00:19:49,570
that we are able to render our assets

00:19:46,660 --> 00:19:51,520
and our content optimally especially to

00:19:49,570 --> 00:19:54,640
ease the burden of slow network

00:19:51,520 --> 00:19:57,700
connections high data costs in case of

00:19:54,640 --> 00:19:59,230
low end devices but what about taking it

00:19:57,700 --> 00:20:02,050
one step further

00:19:59,230 --> 00:20:05,110
so as workers in caching can reduce

00:20:02,050 --> 00:20:07,510
user's data costs even further and they

00:20:05,110 --> 00:20:10,630
can render pages even faster with the

00:20:07,510 --> 00:20:13,030
least amount of processing time not only

00:20:10,630 --> 00:20:15,580
that but we can also render applications

00:20:13,030 --> 00:20:17,800
offline for those for any connections

00:20:15,580 --> 00:20:21,010
during low chaining was passing through

00:20:17,800 --> 00:20:22,810
poor network areas a serviceworker is

00:20:21,010 --> 00:20:24,760
essentially a background script that

00:20:22,810 --> 00:20:27,820
runs separately from the main main

00:20:24,760 --> 00:20:30,550
process did respond ad films including

00:20:27,820 --> 00:20:32,410
incepting network request caching or

00:20:30,550 --> 00:20:35,770
retrieving ready resources from the

00:20:32,410 --> 00:20:37,600
cache and delivering push messages the

00:20:35,770 --> 00:20:40,000
implementation of service workers is

00:20:37,600 --> 00:20:40,630
pretty simple simple using a magnet

00:20:40,000 --> 00:20:43,330
iran's

00:20:40,630 --> 00:20:45,400
so here's a very brief look on how to

00:20:43,330 --> 00:20:47,680
integrate service workers into our

00:20:45,400 --> 00:20:49,560
application the dockyard and the

00:20:47,680 --> 00:20:51,630
serviceworker dock

00:20:49,560 --> 00:20:54,600
makes it really easy we use the

00:20:51,630 --> 00:20:56,010
following commands cocl bus riders amber

00:20:54,600 --> 00:20:57,810
installed serviceworker

00:20:56,010 --> 00:21:00,720
which is installed the serviceworker

00:20:57,810 --> 00:21:02,790
when the page loads then we do my

00:21:00,720 --> 00:21:04,920
install service working index and the

00:21:02,790 --> 00:21:07,470
serviceworker except cash which

00:21:04,920 --> 00:21:10,380
essentially captures our index and HTML

00:21:07,470 --> 00:21:12,360
page and all the other static assets so

00:21:10,380 --> 00:21:14,490
at this point if you have to disconnect

00:21:12,360 --> 00:21:16,860
your internet connection or time into an

00:21:14,490 --> 00:21:18,750
offline mode in other browsers dev tools

00:21:16,860 --> 00:21:22,350
and refresh the page

00:21:18,750 --> 00:21:24,000
our app should still load then we can do

00:21:22,350 --> 00:21:25,950
we can take it one step even further

00:21:24,000 --> 00:21:28,620
where we can install and the

00:21:25,950 --> 00:21:31,440
serviceworker cache fallback which then

00:21:28,620 --> 00:21:34,320
texted any non-static resources like

00:21:31,440 --> 00:21:36,120
request to the API and just like that

00:21:34,320 --> 00:21:36,660
our service workers would be up and

00:21:36,120 --> 00:21:39,180
running

00:21:36,660 --> 00:21:41,640
we just need to browse the app for few

00:21:39,180 --> 00:21:43,230
moment moment whilst online and it will

00:21:41,640 --> 00:21:45,510
essentially be priming the fallback

00:21:43,230 --> 00:21:48,060
cache and afterwards we can put our

00:21:45,510 --> 00:21:50,250
browser into offline mode and try to

00:21:48,060 --> 00:21:54,330
load a page that we have visited before

00:21:50,250 --> 00:21:59,190
and guess what it should now sell your

00:21:54,330 --> 00:22:01,140
API responses from the cache but can we

00:21:59,190 --> 00:22:04,650
can make our applications even more

00:22:01,140 --> 00:22:07,320
functional I mean if I think about it

00:22:04,650 --> 00:22:09,660
when I'm without internet during times

00:22:07,320 --> 00:22:11,460
of low cheating and not only when to

00:22:09,660 --> 00:22:14,430
view data but I might want to fill out

00:22:11,460 --> 00:22:16,140
forms or bookmark some data or maybe

00:22:14,430 --> 00:22:20,100
even send some information through to

00:22:16,140 --> 00:22:22,350
the application I think the memory of a

00:22:20,100 --> 00:22:24,210
goldfish and once I close it up I'm

00:22:22,350 --> 00:22:26,940
really not going to remember to come

00:22:24,210 --> 00:22:30,090
back to that app so this is where my

00:22:26,940 --> 00:22:32,730
pouch comes into play for us and it

00:22:30,090 --> 00:22:35,510
basically is data persistence and the

00:22:32,730 --> 00:22:38,490
pouch allows data to sync automatically

00:22:35,510 --> 00:22:40,710
once a connection is restored in the

00:22:38,490 --> 00:22:44,280
background the data is saved on the time

00:22:40,710 --> 00:22:46,149
side using index TV or web sequel and we

00:22:44,280 --> 00:22:51,639
just keep using the

00:22:46,149 --> 00:22:53,919
the datastore API once again in order to

00:22:51,639 --> 00:22:56,829
test our improve performance and offline

00:22:53,919 --> 00:23:00,009
strategy lighthouse comes to the rescue

00:22:56,829 --> 00:23:01,809
you can see your cache finds a files and

00:23:00,009 --> 00:23:03,879
you can use Network requests to

00:23:01,809 --> 00:23:06,279
determine where a network request where

00:23:03,879 --> 00:23:07,749
Network we're the with the request is

00:23:06,279 --> 00:23:10,299
getting answered from is it from the

00:23:07,749 --> 00:23:11,979
capture the API and you can also use

00:23:10,299 --> 00:23:14,979
something like Google Analytics to track

00:23:11,979 --> 00:23:20,169
metrics that will help us to assess the

00:23:14,979 --> 00:23:22,719
impact of our service welcome finally we

00:23:20,169 --> 00:23:24,519
come to other performance charts so

00:23:22,719 --> 00:23:27,519
there are a couple of techniques that

00:23:24,519 --> 00:23:29,199
I'm not able to influence DP but I'd

00:23:27,519 --> 00:23:30,759
still like to the some of them out

00:23:29,199 --> 00:23:33,339
because I believe that when they are

00:23:30,759 --> 00:23:35,829
used appropriately they will provide

00:23:33,339 --> 00:23:36,519
better accessibility for emerging

00:23:35,829 --> 00:23:40,359
markets

00:23:36,519 --> 00:23:42,939
some of them include firstly using SVG's

00:23:40,359 --> 00:23:45,549
we were able to or else optimizing

00:23:42,939 --> 00:23:48,579
images by using tools like squash or

00:23:45,549 --> 00:23:50,919
image optimizer HTML sources are also

00:23:48,579 --> 00:23:53,649
really useful to serve different images

00:23:50,919 --> 00:23:57,299
to da from visitors a company called fun

00:23:53,649 --> 00:24:00,149
space reduce the image plane out by 86%

00:23:57,299 --> 00:24:03,549
resulting in a reduction in no time of

00:24:00,149 --> 00:24:06,899
65 percent this improved user experience

00:24:03,549 --> 00:24:10,059
helped double phones based ecommerce

00:24:06,899 --> 00:24:13,329
purchases conversion ratio cut bounce

00:24:10,059 --> 00:24:18,839
rates but 20% increased mobile revenue

00:24:13,329 --> 00:24:18,839
by 7% and dramatically improve SEO

00:24:19,229 --> 00:24:24,969
optimizing and singing through only the

00:24:22,119 --> 00:24:26,919
necessary keys in our JSON payloads can

00:24:24,969 --> 00:24:30,189
really just optimize our network

00:24:26,919 --> 00:24:32,649
requests in our JSON we should serialize

00:24:30,189 --> 00:24:34,719
and compress adequately as well in

00:24:32,649 --> 00:24:36,939
addition and doctor the technology like

00:24:34,719 --> 00:24:40,689
graph QL would automate the optimal

00:24:36,939 --> 00:24:42,580
param param realization of data fetches

00:24:40,689 --> 00:24:44,950
thus increasing the

00:24:42,580 --> 00:24:47,169
performance Instagram increased

00:24:44,950 --> 00:24:50,200
impressions and user profile scrolling

00:24:47,169 --> 00:24:52,269
interactions by decreasing the responses

00:24:50,200 --> 00:24:56,710
of the choice are needed for displaying

00:24:52,269 --> 00:25:02,260
comments but 33% for the median and 50%

00:24:56,710 --> 00:25:04,390
for the 95th percentile and finally we

00:25:02,260 --> 00:25:06,580
can use techniques like adaptive loading

00:25:04,390 --> 00:25:09,700
to tailor the experience based on the

00:25:06,580 --> 00:25:12,340
user's constraints adaptive loading uses

00:25:09,700 --> 00:25:14,860
signals to determine the network CPU

00:25:12,340 --> 00:25:16,809
Kolkata and memory and based on those

00:25:14,860 --> 00:25:19,630
values we can then conditionally load

00:25:16,809 --> 00:25:21,639
more highly interactive components or

00:25:19,630 --> 00:25:24,039
run computationally heavily heavy

00:25:21,639 --> 00:25:26,250
operations whilst not sending these

00:25:24,039 --> 00:25:29,019
scripts down if you know slower device

00:25:26,250 --> 00:25:30,789
however it's useful to know that the web

00:25:29,019 --> 00:25:34,179
properties that are used to determine

00:25:30,789 --> 00:25:37,360
Network CPU are co count and memory and

00:25:34,179 --> 00:25:39,639
not available via the web api to all

00:25:37,360 --> 00:25:41,830
especially older browsers this

00:25:39,639 --> 00:25:45,070
unfortunately does not make it extremely

00:25:41,830 --> 00:25:47,320
useful for African markets idiots but it

00:25:45,070 --> 00:25:49,389
is a useful technique the most likely

00:25:47,320 --> 00:25:52,720
will be used more commonly in the near

00:25:49,389 --> 00:25:54,850
future using all or most of these

00:25:52,720 --> 00:25:56,830
strategies that have outlined allows us

00:25:54,850 --> 00:25:58,990
to build more efficient applications

00:25:56,830 --> 00:26:02,320
that will deliver an improved experience

00:25:58,990 --> 00:26:04,360
within Africa however our professional

00:26:02,320 --> 00:26:07,000
environments usually consist of teams

00:26:04,360 --> 00:26:10,389
that include multiple developers working

00:26:07,000 --> 00:26:12,370
on one application together within these

00:26:10,389 --> 00:26:14,740
teams not all developers are

00:26:12,370 --> 00:26:17,970
knowledgeable or even mindful of

00:26:14,740 --> 00:26:21,130
performance so how do I go about

00:26:17,970 --> 00:26:25,559
proactively maintaining a code base with

00:26:21,130 --> 00:26:28,120
the team for just optimal performance

00:26:25,559 --> 00:26:30,370
this is where performance budgets

00:26:28,120 --> 00:26:33,909
integrated with the CIS will become

00:26:30,370 --> 00:26:36,730
really useful so why is the performance

00:26:33,909 --> 00:26:39,220
budgets a performance budget is a limit

00:26:36,730 --> 00:26:42,039
with pages or components which the team

00:26:39,220 --> 00:26:44,679
are not allowed to exceed any less money

00:26:42,039 --> 00:26:46,400
the performance guru mentions the theory

00:26:44,679 --> 00:26:48,440
of important metrics that we

00:26:46,400 --> 00:26:51,290
to use in order to incorporate this

00:26:48,440 --> 00:26:53,000
budget the first one is master timings

00:26:51,290 --> 00:26:55,370
which are based on the user experience

00:26:53,000 --> 00:26:57,470
when loading the page so things like

00:26:55,370 --> 00:26:59,480
time to interact a first content web

00:26:57,470 --> 00:27:01,010
page it's that first page of metrics

00:26:59,480 --> 00:27:04,220
that I showed you and I started the

00:27:01,010 --> 00:27:06,680
presentation we may need to pay several

00:27:04,220 --> 00:27:09,740
of these metrics together in order to

00:27:06,680 --> 00:27:11,930
represent our full story then this

00:27:09,740 --> 00:27:13,580
quantity based metrics so these are

00:27:11,930 --> 00:27:15,770
based on draw values so the weight of

00:27:13,580 --> 00:27:17,930
the JavaScript the number of HTTP

00:27:15,770 --> 00:27:21,680
requests these are directly correlated

00:27:17,930 --> 00:27:23,960
to a browser experience and finally we

00:27:21,680 --> 00:27:26,270
have blue base metrics which are schools

00:27:23,960 --> 00:27:28,520
generally by tools such as lighthouse or

00:27:26,270 --> 00:27:31,310
web page test they often just provide

00:27:28,520 --> 00:27:33,800
one single number on a series to grade

00:27:31,310 --> 00:27:35,450
the site furthermore we can apply

00:27:33,800 --> 00:27:37,250
different budget stone mobile

00:27:35,450 --> 00:27:39,620
applications forced our desktop

00:27:37,250 --> 00:27:41,420
applications first device classes

00:27:39,620 --> 00:27:44,090
because they are underlying hardware

00:27:41,420 --> 00:27:46,310
like CPUs and memory and the connection

00:27:44,090 --> 00:27:51,860
capabilities tougher across these

00:27:46,310 --> 00:27:54,140
different experiences so an example

00:27:51,860 --> 00:27:56,480
budget on my personal website could

00:27:54,140 --> 00:27:58,580
include something like the home page

00:27:56,480 --> 00:28:01,730
must shop less than hundred and seventy

00:27:58,580 --> 00:28:04,310
caves of kilobytes of JavaScript on

00:28:01,730 --> 00:28:06,590
mobile it should include less than two

00:28:04,310 --> 00:28:09,320
minutes of images on a desktop but maybe

00:28:06,590 --> 00:28:11,150
500 kilobytes and mobile on page load

00:28:09,320 --> 00:28:14,810
and then we get lazy load the rest

00:28:11,150 --> 00:28:17,090
afterwards it should load and get

00:28:14,810 --> 00:28:19,340
interactive in less than seven seconds

00:28:17,090 --> 00:28:21,320
on an Android go which is one of the

00:28:19,340 --> 00:28:24,080
more popular devices in sub-saharan

00:28:21,320 --> 00:28:25,820
Africa and also maybe the score needs to

00:28:24,080 --> 00:28:28,040
be greater than 80 on the lighthouse

00:28:25,820 --> 00:28:30,170
woman's audit these are just some

00:28:28,040 --> 00:28:32,420
examples of what I could put into my

00:28:30,170 --> 00:28:34,280
performance budget it is useful to know

00:28:32,420 --> 00:28:36,800
that there's some standards which we can

00:28:34,280 --> 00:28:39,890
integer - like for mid-range mobile

00:28:36,800 --> 00:28:41,840
devices with slow TG connections a good

00:28:39,890 --> 00:28:44,990
target for force loads is to load the

00:28:41,840 --> 00:28:47,270
page and be interactive in five seconds

00:28:44,990 --> 00:28:48,270
or less for subsequent loads a good

00:28:47,270 --> 00:28:50,940
target is still

00:28:48,270 --> 00:28:52,950
in under two seconds this is where the

00:28:50,940 --> 00:28:55,679
developer has the opportunity to set the

00:28:52,950 --> 00:28:58,830
precedent to be inclusive are the

00:28:55,679 --> 00:29:00,990
emerging markets but the most tricky

00:28:58,830 --> 00:29:02,490
thing about creating a budget is usually

00:29:00,990 --> 00:29:05,309
to come up with the performance metrics

00:29:02,490 --> 00:29:07,920
themselves one way to do this is to use

00:29:05,309 --> 00:29:10,620
a calculator like performance budget at

00:29:07,920 --> 00:29:12,540
i/o to get some baseline and then

00:29:10,620 --> 00:29:14,309
configure the budget based on your

00:29:12,540 --> 00:29:16,590
knowledge of the type of application

00:29:14,309 --> 00:29:18,450
being created as well as your target

00:29:16,590 --> 00:29:20,700
markets the see on the slide is

00:29:18,450 --> 00:29:22,140
performance budget at i/o and it's a

00:29:20,700 --> 00:29:24,660
really good experience

00:29:22,140 --> 00:29:26,850
once we've crunched the numbers we want

00:29:24,660 --> 00:29:29,730
to also proactively stay away from now

00:29:26,850 --> 00:29:32,280
stay away of is not the throughout the

00:29:29,730 --> 00:29:34,110
development process this can be done by

00:29:32,280 --> 00:29:36,210
integrating something like web pack

00:29:34,110 --> 00:29:38,340
performance hints which he issues

00:29:36,210 --> 00:29:40,530
command line warnings or errors when the

00:29:38,340 --> 00:29:42,890
butterflies grows over the limit this is

00:29:40,530 --> 00:29:44,250
perfect for your development process

00:29:42,890 --> 00:29:46,830
thereafter

00:29:44,250 --> 00:29:49,770
once we started drawing we can integrate

00:29:46,830 --> 00:29:52,890
it with the CI to automatically m4 size

00:29:49,770 --> 00:29:55,410
limits on poorer graphs for teams so if

00:29:52,890 --> 00:29:57,870
the test fails we can simply prevent the

00:29:55,410 --> 00:30:00,179
pull request from being large some scare

00:29:57,870 --> 00:30:02,990
options that can be used is the bundle

00:30:00,179 --> 00:30:06,450
size CI and lifehouse boss

00:30:02,990 --> 00:30:09,600
sorry Lighthouse bite finally I

00:30:06,450 --> 00:30:12,350
recommend also using speed curve for the

00:30:09,600 --> 00:30:15,960
reactive monitoring so that we can

00:30:12,350 --> 00:30:20,250
actually monitor some real users also we

00:30:15,960 --> 00:30:22,320
can improve based on some baseline as a

00:30:20,250 --> 00:30:24,540
result using a performance budget and

00:30:22,320 --> 00:30:26,340
these integration tools developers and

00:30:24,540 --> 00:30:28,470
machines have performance at the

00:30:26,340 --> 00:30:30,720
forethought of their minds and hence

00:30:28,470 --> 00:30:35,520
it's shown their development practices

00:30:30,720 --> 00:30:37,890
accordingly in conclusion yes the scrap

00:30:35,520 --> 00:30:39,840
again there are really no downsides to

00:30:37,890 --> 00:30:41,880
make your applications performance there

00:30:39,840 --> 00:30:44,100
are only benefits a performance

00:30:41,880 --> 00:30:46,740
application opens you up to a whole new

00:30:44,100 --> 00:30:50,130
markets this is millions of additional

00:30:46,740 --> 00:30:52,620
people it is also proven facts based on

00:30:50,130 --> 00:30:53,690
statistics in case studies some of which

00:30:52,620 --> 00:30:55,909
are cited in

00:30:53,690 --> 00:30:58,429
your slides their performance and route

00:30:55,909 --> 00:31:01,789
increase increases traffic to your sites

00:30:58,429 --> 00:31:05,480
in keep use keeps uses engage for longer

00:31:01,789 --> 00:31:07,789
periods on a fast site used unknown to

00:31:05,480 --> 00:31:10,460
consume more content some of these

00:31:07,789 --> 00:31:13,850
changes especially server-side rendering

00:31:10,460 --> 00:31:16,789
or even static are rendering allows

00:31:13,850 --> 00:31:18,679
other apps to have enhanced SEO that's

00:31:16,789 --> 00:31:21,919
increasing our leads and signup

00:31:18,679 --> 00:31:25,100
conversion rates in fact the study shows

00:31:21,919 --> 00:31:27,950
the triple complain Pinterest pages for

00:31:25,100 --> 00:31:31,700
performance resulted in a 40% decrease

00:31:27,950 --> 00:31:35,090
in wait time a 15% increase in SEO

00:31:31,700 --> 00:31:38,179
traffic and a 15% increase in conversion

00:31:35,090 --> 00:31:39,700
rates a sign up finally for every

00:31:38,179 --> 00:31:43,669
travelers like myself

00:31:39,700 --> 00:31:45,500
PTAs I hailed lifesavers I mean who

00:31:43,669 --> 00:31:47,840
doesn't want to be able to check the

00:31:45,500 --> 00:31:50,330
train schedule or navigate around the

00:31:47,840 --> 00:31:52,879
city year without any network I know I

00:31:50,330 --> 00:31:55,220
do but that being said I hope I've now

00:31:52,879 --> 00:31:57,950
convinced you to think about performance

00:31:55,220 --> 00:32:02,889
and expanding your apps to the African

00:31:57,950 --> 00:32:02,889
soil why not thank you so much

00:32:03,539 --> 00:32:05,600

YouTube URL: https://www.youtube.com/watch?v=Js_IfaHIP_4


