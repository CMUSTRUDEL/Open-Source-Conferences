Title: Virtual EmberConf 2020: A11y First and Everyone Wins by Ava Wroten
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	A11y First and Everyone Wins by Ava Wroten

By putting accessibility first we can achieve a far more composable, intuitive, and testable product. Come and listen to the real tale of modern automation testing the untestable: a drag and drop user interface. The story of a drag and drop feature doomed to be unaccessible, made accessible. The telling of a feature salvaged by accessibility. We've all been told accessibility is important, but rarely do we feel the fruits of the labor directly. We'll discuss how developers, QA and leads can all feel the same benefit our users feel by putting accessibility first.
Captions: 
	00:00:01,270 --> 00:00:20,820
[Music]

00:00:21,240 --> 00:00:28,270
hello amber cough virtual attendees

00:00:25,259 --> 00:00:31,180
hello Portland if you are streaming

00:00:28,270 --> 00:00:34,420
there and thank you all for having me

00:00:31,180 --> 00:00:37,000
my name is Ava gave our Rotom and I'm

00:00:34,420 --> 00:00:39,340
here to talk about accessibility that's

00:00:37,000 --> 00:00:42,390
gonna be a little bit different this is

00:00:39,340 --> 00:00:45,150
a success story this is a story

00:00:42,390 --> 00:00:48,970
accessibility first and everyone wins

00:00:45,150 --> 00:00:52,239
more composable intuitive and testable

00:00:48,970 --> 00:00:54,540
we've all heard of mobile first I'm

00:00:52,239 --> 00:00:56,650
gonna flip it on its head a little bit

00:00:54,540 --> 00:01:00,519
once again I am Ava

00:00:56,650 --> 00:01:04,449
Wroten I go by see her and I am a

00:01:00,519 --> 00:01:06,909
software engineer at L of U and L of U

00:01:04,449 --> 00:01:09,310
we build software for K through 12

00:01:06,909 --> 00:01:11,650
school districts and I'm very proud of

00:01:09,310 --> 00:01:14,110
what we do there we built this all in

00:01:11,650 --> 00:01:17,710
ember J s and I've been doing ember for

00:01:14,110 --> 00:01:21,130
oh the past seven years or so at

00:01:17,710 --> 00:01:24,609
different companies you can find me on

00:01:21,130 --> 00:01:29,789
get lab or one github at the things in

00:01:24,609 --> 00:01:33,280
the doobly-doo so we'll be discussing a

00:01:29,789 --> 00:01:35,829
project feature that was saved by

00:01:33,280 --> 00:01:38,320
accessibility it might not have gotten

00:01:35,829 --> 00:01:40,799
off the ground otherwise and so I'm very

00:01:38,320 --> 00:01:42,939
excited to share this story with you

00:01:40,799 --> 00:01:45,640
during the course of this story we'll be

00:01:42,939 --> 00:01:48,640
talking about adding functionality with

00:01:45,640 --> 00:01:51,189
composable components so we'll discuss

00:01:48,640 --> 00:01:53,170
composability composable components and

00:01:51,189 --> 00:01:56,770
what that means how I did it in this

00:01:53,170 --> 00:01:59,859
case we'll talk about equitable and

00:01:56,770 --> 00:02:02,020
discoverable user experience design and

00:01:59,859 --> 00:02:05,259
we'll talk about what those things mean

00:02:02,020 --> 00:02:07,479
and finally we'll talk about automation

00:02:05,259 --> 00:02:09,910
testing and how it relates to all these

00:02:07,479 --> 00:02:11,200
topics and hopefully you'll see

00:02:09,910 --> 00:02:14,319
something you haven't quite seen before

00:02:11,200 --> 00:02:17,110
and an automation testing with an ember

00:02:14,319 --> 00:02:19,360
or at least you'll see some of the newer

00:02:17,110 --> 00:02:20,830
ways of how automation testing can be

00:02:19,360 --> 00:02:24,270
done in some of the latest amber

00:02:20,830 --> 00:02:29,560
practices but has me really excited and

00:02:24,270 --> 00:02:31,280
so here's the story I had a feature this

00:02:29,560 --> 00:02:33,650
is several years back now

00:02:31,280 --> 00:02:35,900
and on my team we were given a ticket

00:02:33,650 --> 00:02:40,190
this ticket had a picture on it called

00:02:35,900 --> 00:02:43,520
item reordering this feature was so

00:02:40,190 --> 00:02:46,790
simple that it had no design we just

00:02:43,520 --> 00:02:49,430
wrote it up users should be able to move

00:02:46,790 --> 00:02:52,989
around items on the sidebar in order to

00:02:49,430 --> 00:02:54,950
reorder them to their heart's content ok

00:02:52,989 --> 00:02:57,890
that sounds good

00:02:54,950 --> 00:03:01,880
it sounds simple maybe a little too

00:02:57,890 --> 00:03:03,620
simple so ok Mouse drag and drop that

00:03:01,880 --> 00:03:07,250
makes sense I can make that happen

00:03:03,620 --> 00:03:09,650
what about touch do we support pets

00:03:07,250 --> 00:03:11,180
devices and of course when you ask that

00:03:09,650 --> 00:03:13,820
kind of question that sounds great yeah

00:03:11,180 --> 00:03:16,310
support touch just go through the extra

00:03:13,820 --> 00:03:18,260
loop so you need to do loop holes

00:03:16,310 --> 00:03:19,519
jumping through hoops rather that you

00:03:18,260 --> 00:03:20,900
need to do in order to make touch work

00:03:19,519 --> 00:03:27,739
no big deal

00:03:20,900 --> 00:03:31,190
maybe what about accessibility ok so the

00:03:27,739 --> 00:03:32,780
room goes dead it goes real quiet and I

00:03:31,190 --> 00:03:35,090
need to explain a little bit more what

00:03:32,780 --> 00:03:36,530
I'm talking about so firstly you're

00:03:35,090 --> 00:03:43,190
already seeing on the screen several

00:03:36,530 --> 00:03:45,920
times now a11y or a11y and if you expand

00:03:43,190 --> 00:03:49,280
that out it becomes the word

00:03:45,920 --> 00:03:50,180
accessibility it's a sort of an acronym

00:03:49,280 --> 00:03:52,310
if you will

00:03:50,180 --> 00:03:54,430
that means accessibility perhaps you've

00:03:52,310 --> 00:03:56,660
seen that before perhaps you haven't

00:03:54,430 --> 00:03:58,760
accessibility has 11 characters in it

00:03:56,660 --> 00:04:00,230
and so we shorten it down for things

00:03:58,760 --> 00:04:01,820
like this presentation or her

00:04:00,230 --> 00:04:05,540
documentation to simply mean

00:04:01,820 --> 00:04:10,430
accessibility but we're also be talking

00:04:05,540 --> 00:04:11,989
about equity so what is equity well

00:04:10,430 --> 00:04:14,660
let's think about the idea of what I was

00:04:11,989 --> 00:04:17,539
being assigned to do I was tasked with

00:04:14,660 --> 00:04:20,600
delivering a feature that I felt like

00:04:17,539 --> 00:04:23,330
maybe not everybody could use ok drag

00:04:20,600 --> 00:04:25,910
and drop sounds simple enough a user can

00:04:23,330 --> 00:04:28,700
use their mouse to move up and down

00:04:25,910 --> 00:04:29,060
click on something and drag it and then

00:04:28,700 --> 00:04:31,789
let go

00:04:29,060 --> 00:04:35,270
that requires some fine motor control it

00:04:31,789 --> 00:04:37,610
sounds like and also touch or on a

00:04:35,270 --> 00:04:40,970
mobile device but it doesn't have

00:04:37,610 --> 00:04:43,669
anything to do with a keyboard input or

00:04:40,970 --> 00:04:44,990
a screen reader or some other ways that

00:04:43,669 --> 00:04:48,830
maybe users are inter

00:04:44,990 --> 00:04:50,780
acting with our app imagine using no

00:04:48,830 --> 00:04:52,820
hands and you're using the eyes in order

00:04:50,780 --> 00:04:55,190
to click on things and move them around

00:04:52,820 --> 00:04:58,340
clicking and dragging is a very

00:04:55,190 --> 00:05:03,440
difficult thing to do without a standard

00:04:58,340 --> 00:05:06,470
Mouse or touch interface and so I felt

00:05:03,440 --> 00:05:09,170
like it was potentially unfair that we

00:05:06,470 --> 00:05:11,930
were maybe unintentionally locking out

00:05:09,170 --> 00:05:14,120
some users from accessing parts of the

00:05:11,930 --> 00:05:17,200
app this entire feature that was

00:05:14,120 --> 00:05:19,700
assigned to work on wasn't necessarily

00:05:17,200 --> 00:05:22,310
accessible to everybody literally not

00:05:19,700 --> 00:05:26,060
able to be used by everybody and so I

00:05:22,310 --> 00:05:29,150
felt like there was a lack of equity not

00:05:26,060 --> 00:05:32,710
that everybody is entirely equal that

00:05:29,150 --> 00:05:36,790
everybody can use in the same exact way

00:05:32,710 --> 00:05:39,200
drag and drop but in an equitable way

00:05:36,790 --> 00:05:42,200
that I was hoping users to be able to

00:05:39,200 --> 00:05:47,420
interact with this via the keyboard

00:05:42,200 --> 00:05:49,870
through a different input medium 15% of

00:05:47,420 --> 00:05:53,510
the world lives with some form of

00:05:49,870 --> 00:05:55,630
disability and the great many talks have

00:05:53,510 --> 00:05:58,340
been given already trying to sell

00:05:55,630 --> 00:06:00,470
accessibility trying to be the person up

00:05:58,340 --> 00:06:03,410
on stage who is selling to you why

00:06:00,470 --> 00:06:05,090
accessibility is important I'm merely

00:06:03,410 --> 00:06:07,790
wishing to set the stage for my

00:06:05,090 --> 00:06:10,430
motivations here about what really got

00:06:07,790 --> 00:06:13,130
me thinking about this in return in

00:06:10,430 --> 00:06:16,280
respects to this presentation in

00:06:13,130 --> 00:06:18,410
respects to this feature there are

00:06:16,280 --> 00:06:20,870
different degrees of disabilities

00:06:18,410 --> 00:06:23,570
sometimes there are invisible

00:06:20,870 --> 00:06:26,300
disabilities sometimes there are visible

00:06:23,570 --> 00:06:31,190
disabilities that are just varying forms

00:06:26,300 --> 00:06:34,790
of ability right limited mobility muscle

00:06:31,190 --> 00:06:37,160
slowness tremors low vision color

00:06:34,790 --> 00:06:39,020
blindness partial hearing loss things of

00:06:37,160 --> 00:06:41,750
this nature and this is just a few

00:06:39,020 --> 00:06:43,970
examples of the varying ways that you

00:06:41,750 --> 00:06:46,190
can have a varying degree of ability

00:06:43,970 --> 00:06:48,560
that maybe something isn't completely

00:06:46,190 --> 00:06:50,690
inaccessible to you but might be more

00:06:48,560 --> 00:06:54,290
difficult that perhaps you would even

00:06:50,690 --> 00:06:56,990
just prefer to interact with a device in

00:06:54,290 --> 00:06:58,700
a different way many times I find myself

00:06:56,990 --> 00:07:02,750
preferring to interact

00:06:58,700 --> 00:07:04,520
with a device via the keyboard everybody

00:07:02,750 --> 00:07:06,380
has their own reasons whether it be

00:07:04,520 --> 00:07:08,320
ability or otherwise and I want to

00:07:06,380 --> 00:07:11,210
design for those kinds of things

00:07:08,320 --> 00:07:14,540
luckily web assistive technologies can

00:07:11,210 --> 00:07:17,750
commonly help us with vision hearing and

00:07:14,540 --> 00:07:19,730
movement varying abilities we can use

00:07:17,750 --> 00:07:22,460
these web technologies in order to piece

00:07:19,730 --> 00:07:25,190
together interactivity in a way that can

00:07:22,460 --> 00:07:28,010
allow more people equitable access to

00:07:25,190 --> 00:07:31,270
these kinds of features and at the end

00:07:28,010 --> 00:07:33,410
of the day I build software for humans I

00:07:31,270 --> 00:07:34,730
wouldn't be happy with myself if I

00:07:33,410 --> 00:07:38,810
shipped some software that was

00:07:34,730 --> 00:07:42,740
completely unusable to some users just

00:07:38,810 --> 00:07:47,770
because we lacked some foresight and so

00:07:42,740 --> 00:07:50,630
I did my research I came across the w3c

00:07:47,770 --> 00:07:53,210
website they have a list of patterns if

00:07:50,630 --> 00:07:55,010
you dig down deep enough and I was

00:07:53,210 --> 00:07:58,010
looking at some of their approved web

00:07:55,010 --> 00:07:59,630
patterns and for for wordsworth w3c

00:07:58,010 --> 00:08:03,500
stands for the World Wide Web Consortium

00:07:59,630 --> 00:08:08,150
and so they have a lot of really great a

00:08:03,500 --> 00:08:10,880
well researched accessible UI patterns

00:08:08,150 --> 00:08:13,160
that you can borrow from this one in

00:08:10,880 --> 00:08:16,060
particular caught my eye it's called a

00:08:13,160 --> 00:08:19,150
example of list boxes with

00:08:16,060 --> 00:08:22,520
rearrangements I'll scroll down here

00:08:19,150 --> 00:08:26,900
here's an example with a single select

00:08:22,520 --> 00:08:29,780
list box so this is using a select that

00:08:26,900 --> 00:08:34,040
has has been like kind of made larger

00:08:29,780 --> 00:08:35,600
and also some buttons beneath it I can

00:08:34,040 --> 00:08:37,670
use my mouse they click on any of these

00:08:35,600 --> 00:08:39,979
or I could click on these buttons down

00:08:37,670 --> 00:08:42,250
here at the bottom but I want to use my

00:08:39,979 --> 00:08:47,840
keyboard to try to interact with this I

00:08:42,250 --> 00:08:50,120
will hit tab and I can focus into this

00:08:47,840 --> 00:08:52,340
element the first thing that it does is

00:08:50,120 --> 00:08:55,040
it automatically selects the first item

00:08:52,340 --> 00:08:57,860
in the list for me as a visual selection

00:08:55,040 --> 00:09:00,290
I can see it very obviously become a

00:08:57,860 --> 00:09:02,890
bright blue and I see a dotted border

00:09:00,290 --> 00:09:05,630
around the outside of the entire list

00:09:02,890 --> 00:09:08,090
telling me that the entire list has been

00:09:05,630 --> 00:09:11,090
selected with a sub selection inside of

00:09:08,090 --> 00:09:12,370
it I can then use my arrow keys to move

00:09:11,090 --> 00:09:15,209
down

00:09:12,370 --> 00:09:18,610
selection but not the item itself and

00:09:15,209 --> 00:09:23,379
then up in order to go back up with my

00:09:18,610 --> 00:09:27,069
selection at the bottom of my list I can

00:09:23,379 --> 00:09:29,139
see it there is an UP button and a down

00:09:27,069 --> 00:09:30,699
button there's also an unimportant

00:09:29,139 --> 00:09:33,910
button which is not important for this

00:09:30,699 --> 00:09:37,120
demo but the up-and-down actually allows

00:09:33,910 --> 00:09:40,360
me to deep prioritize for example in

00:09:37,120 --> 00:09:43,600
this case proximity of fast-food can go

00:09:40,360 --> 00:09:47,410
down just by hitting the spacebar or

00:09:43,600 --> 00:09:51,339
Enter key on the down button while I

00:09:47,410 --> 00:09:53,889
have a selected item I can then shift

00:09:51,339 --> 00:09:56,769
tab back to my list and pick another

00:09:53,889 --> 00:09:59,920
item like neighborhood walkability I can

00:09:56,769 --> 00:10:03,399
tab to the UP button and activate it

00:09:59,920 --> 00:10:05,230
with enter or space the first time I

00:10:03,399 --> 00:10:08,230
arrived on this page I felt it was very

00:10:05,230 --> 00:10:11,769
intuitive we were working with something

00:10:08,230 --> 00:10:13,420
that was using some raw HTML elements

00:10:11,769 --> 00:10:16,600
I've already been trained to know how to

00:10:13,420 --> 00:10:18,879
use I know that spacebar + Enter key can

00:10:16,600 --> 00:10:21,389
activate them I know that they are

00:10:18,879 --> 00:10:24,189
readily built to be accessible that

00:10:21,389 --> 00:10:26,230
users will be told how to interact with

00:10:24,189 --> 00:10:28,990
them if they are semantically written

00:10:26,230 --> 00:10:30,910
correctly so now already makes you feel

00:10:28,990 --> 00:10:33,660
a lot better about these items and I

00:10:30,910 --> 00:10:36,910
know how to interact with them it's very

00:10:33,660 --> 00:10:39,850
discoverable the user experience of if

00:10:36,910 --> 00:10:42,399
anybody came here and unintentionally

00:10:39,850 --> 00:10:45,610
hit tab and found themselves selecting

00:10:42,399 --> 00:10:48,160
the entire list almost guaranteed that

00:10:45,610 --> 00:10:50,620
if they knew about how keyboard inputs

00:10:48,160 --> 00:10:53,350
worked they would try to use similar key

00:10:50,620 --> 00:10:55,420
combos in order to interact with this

00:10:53,350 --> 00:10:57,910
list and so you wouldn't even need

00:10:55,420 --> 00:11:02,709
necessarily a tutorial to tell them how

00:10:57,910 --> 00:11:05,170
this works which is excellent down

00:11:02,709 --> 00:11:07,660
further on the list we also have some

00:11:05,170 --> 00:11:09,730
great accessibility information around

00:11:07,660 --> 00:11:11,379
Aria labels and how they can be dynamic

00:11:09,730 --> 00:11:13,240
but that's going to be a little bit

00:11:11,379 --> 00:11:15,670
outside the scope of this presentation

00:11:13,240 --> 00:11:18,699
for now but I highly encourage you to

00:11:15,670 --> 00:11:23,290
read this kind of documentation w3c is

00:11:18,699 --> 00:11:25,960
excellent at providing it next to my

00:11:23,290 --> 00:11:28,120
list of two dudes was to find a

00:11:25,960 --> 00:11:29,470
add on that was sort of the basis

00:11:28,120 --> 00:11:33,580
instead of having to reinvent the wheel

00:11:29,470 --> 00:11:37,270
on drag-and-drop with an ember we have a

00:11:33,580 --> 00:11:39,070
fantastic ecosystem of add-ons out there

00:11:37,270 --> 00:11:41,290
that do a great many things that people

00:11:39,070 --> 00:11:45,640
have built for us that we can then pull

00:11:41,290 --> 00:11:48,370
into our ember applications often as

00:11:45,640 --> 00:11:52,150
simple as in this case running ember

00:11:48,370 --> 00:11:54,970
install ember sortable dad is fantastic

00:11:52,150 --> 00:11:57,570
amber sortable I found on the ember

00:11:54,970 --> 00:12:01,240
observer website under the category of

00:11:57,570 --> 00:12:03,280
components drag and drop it was very

00:12:01,240 --> 00:12:05,860
easy to come across it's also very

00:12:03,280 --> 00:12:09,910
highly ranked by ember observable and

00:12:05,860 --> 00:12:12,190
highly scored the rank on this plugin at

00:12:09,910 --> 00:12:14,140
the current moment is 26 out of the top

00:12:12,190 --> 00:12:16,870
100 add-ons and it's in the top ten

00:12:14,140 --> 00:12:18,760
percent of downloads I can see how many

00:12:16,870 --> 00:12:21,580
open issues there are and when the

00:12:18,760 --> 00:12:26,140
latest commit is so I felt very good

00:12:21,580 --> 00:12:28,560
about leveraging this add-on ember

00:12:26,140 --> 00:12:32,200
sortable provided Mouse drag and drop

00:12:28,560 --> 00:12:35,830
touch drag and drop and it provided a

00:12:32,200 --> 00:12:38,290
really great ember observer ranking so I

00:12:35,830 --> 00:12:40,210
felt like there was no reason not to try

00:12:38,290 --> 00:12:43,320
to use this for the project and that's

00:12:40,210 --> 00:12:46,570
what I did the component structure as

00:12:43,320 --> 00:12:49,660
given to us by ember sortable is a

00:12:46,570 --> 00:12:52,350
component of sortable group and another

00:12:49,660 --> 00:12:55,030
may another component of sortable item

00:12:52,350 --> 00:12:58,840
these components are shipped to be

00:12:55,030 --> 00:13:01,180
composable by default as in a sortable

00:12:58,840 --> 00:13:04,720
item can be placed inside of a Yoda

00:13:01,180 --> 00:13:07,960
sortable group and so I decided to

00:13:04,720 --> 00:13:10,360
follow that pattern instead of doing a

00:13:07,960 --> 00:13:13,420
reopen on these components or even

00:13:10,360 --> 00:13:15,580
forking the entire add-on to add an

00:13:13,420 --> 00:13:18,790
accessibility I added my own custom

00:13:15,580 --> 00:13:21,220
wrappers I generated these sortable

00:13:18,790 --> 00:13:24,430
group accessible and sortable item

00:13:21,220 --> 00:13:26,440
accessible custom wrappers and so it

00:13:24,430 --> 00:13:28,180
looks a little bit like this where you

00:13:26,440 --> 00:13:33,490
can see the nesting of each of these

00:13:28,180 --> 00:13:34,900
items put together in a list there's an

00:13:33,490 --> 00:13:36,610
each loop inside of there for each of

00:13:34,900 --> 00:13:38,420
our items and everything else is just

00:13:36,610 --> 00:13:40,430
kind of nested going down

00:13:38,420 --> 00:13:42,950
and I was able to do not even have to

00:13:40,430 --> 00:13:45,529
touch the original and preservable code

00:13:42,950 --> 00:13:50,060
for this to work so here's the final

00:13:45,529 --> 00:13:52,459
result here's a demo application that

00:13:50,060 --> 00:13:55,120
you can access at that little URL at the

00:13:52,459 --> 00:14:00,170
bottom right of kit lab comm slash

00:13:55,120 --> 00:14:03,500
Gaiety slash sortable - recipes I will

00:14:00,170 --> 00:14:07,880
put this I will place this URL in the

00:14:03,500 --> 00:14:09,410
discord the ember comm channel there in

00:14:07,880 --> 00:14:11,389
case anybody wants to access it where

00:14:09,410 --> 00:14:15,079
you can see the code and also all the

00:14:11,389 --> 00:14:17,930
slides for this presentation so in this

00:14:15,079 --> 00:14:20,690
I have a demo application where I have

00:14:17,930 --> 00:14:22,880
sortable recipes right now we have

00:14:20,690 --> 00:14:25,550
peanut butter cookies in our list I can

00:14:22,880 --> 00:14:28,610
add another meal like this blackberry

00:14:25,550 --> 00:14:31,310
fool with has hazelnuts and butter and

00:14:28,610 --> 00:14:34,670
other things in it so now I have a list

00:14:31,310 --> 00:14:36,649
of several items and I can drag and drop

00:14:34,670 --> 00:14:38,930
these lists let's say I wanted

00:14:36,649 --> 00:14:43,490
blackberry fool to be higher on my list

00:14:38,930 --> 00:14:45,860
I can just click and drag using my

00:14:43,490 --> 00:14:48,829
sortable in order to reorder these items

00:14:45,860 --> 00:14:53,000
and some kind of a priority or however I

00:14:48,829 --> 00:14:54,860
wish to use this list this is really

00:14:53,000 --> 00:14:56,420
great this also works for touch right

00:14:54,860 --> 00:14:59,750
out of the box without me having to do

00:14:56,420 --> 00:15:02,329
any work on my part with the

00:14:59,750 --> 00:15:05,630
accessibility components I added in and

00:15:02,329 --> 00:15:08,420
wrapped around these I can also hit tab

00:15:05,630 --> 00:15:11,360
and I can tap into the point where I

00:15:08,420 --> 00:15:13,040
select the entire list and then the

00:15:11,360 --> 00:15:16,310
entire list gets a different colored

00:15:13,040 --> 00:15:19,480
outline around it and I see buttons

00:15:16,310 --> 00:15:22,550
appear for an up sort and a down sort I

00:15:19,480 --> 00:15:25,339
can now use my arrow keys in order to

00:15:22,550 --> 00:15:29,209
move my selection down and my selection

00:15:25,339 --> 00:15:32,209
up much like the w3c pattern did and I

00:15:29,209 --> 00:15:35,269
can tab into these buttons I can press

00:15:32,209 --> 00:15:37,430
space or enter in order to activate the

00:15:35,269 --> 00:15:40,459
reordering of these items

00:15:37,430 --> 00:15:43,519
I can't quartz shift tab in order to

00:15:40,459 --> 00:15:46,850
move it back up I can just activate

00:15:43,519 --> 00:15:49,029
these buttons as much as I wish and none

00:15:46,850 --> 00:15:51,770
of this blocks the interactivity of

00:15:49,029 --> 00:15:54,170
being able to for example tab

00:15:51,770 --> 00:15:56,030
to the links that are under here so

00:15:54,170 --> 00:15:57,260
these are actual links so here's the

00:15:56,030 --> 00:15:59,300
lengths of peanut butter cookies and

00:15:57,260 --> 00:16:01,820
here's the link for blackberry fool I

00:15:59,300 --> 00:16:04,220
can hit enter in order to activate one

00:16:01,820 --> 00:16:07,280
of these anchor links and it'll take me

00:16:04,220 --> 00:16:09,260
to that page I can also click on any of

00:16:07,280 --> 00:16:12,980
these items in order to activate them as

00:16:09,260 --> 00:16:14,600
well no functionality is lost while

00:16:12,980 --> 00:16:17,690
doing these kind of interactive things

00:16:14,600 --> 00:16:20,690
in fact M burger pardon me

00:16:17,690 --> 00:16:22,130
ember CLI template lint does not throw

00:16:20,690 --> 00:16:22,910
any kind of warnings for this kind of

00:16:22,130 --> 00:16:24,140
composability

00:16:22,910 --> 00:16:26,570
as long as you thought it kind of

00:16:24,140 --> 00:16:28,460
carefully in regards to having nested

00:16:26,570 --> 00:16:30,170
interactivity because you can build

00:16:28,460 --> 00:16:32,890
these as separate elements very

00:16:30,170 --> 00:16:36,620
carefully with your interact ability and

00:16:32,890 --> 00:16:38,210
so this felt great and work great and

00:16:36,620 --> 00:16:40,550
when I showed it off to some of the

00:16:38,210 --> 00:16:43,790
other co-workers they actually really

00:16:40,550 --> 00:16:45,860
liked how it was going so let's dive

00:16:43,790 --> 00:16:47,900
into some implementation details if you

00:16:45,860 --> 00:16:50,180
want the full details of this you're

00:16:47,900 --> 00:16:52,550
able to pull up the gitlab repository

00:16:50,180 --> 00:16:55,280
and digging for yourself all the tests

00:16:52,550 --> 00:16:56,900
are passing for this repository and you

00:16:55,280 --> 00:16:59,060
can see how all the tests are done and

00:16:56,900 --> 00:17:03,380
how the components are done before this

00:16:59,060 --> 00:17:06,710
demo code one of the things I want to

00:17:03,380 --> 00:17:09,320
talk about for composable components are

00:17:06,710 --> 00:17:12,080
splat rebukes splat tributes are

00:17:09,320 --> 00:17:15,260
relatively new to the ember framework

00:17:12,080 --> 00:17:18,650
and with the introduction of glimmer

00:17:15,260 --> 00:17:22,100
components and template only ember

00:17:18,650 --> 00:17:25,100
components we no longer have a wrapper

00:17:22,100 --> 00:17:28,510
div assumed on our component on the

00:17:25,100 --> 00:17:32,000
outside and so if we want to pass in

00:17:28,510 --> 00:17:35,920
attributes like a tab index or a class

00:17:32,000 --> 00:17:39,220
we can now do so by passing at

00:17:35,920 --> 00:17:42,860
attributes within of our within our

00:17:39,220 --> 00:17:45,230
components template and it will

00:17:42,860 --> 00:17:47,270
automatically figure out all the things

00:17:45,230 --> 00:17:49,160
that you passed in and render out

00:17:47,270 --> 00:17:51,500
something like this at the bottom where

00:17:49,160 --> 00:17:53,990
you have a tab within tabindex of zero

00:17:51,500 --> 00:17:57,920
and the class that we defined a boarder

00:17:53,990 --> 00:18:01,130
and a focus boarder of teal what's nice

00:17:57,920 --> 00:18:05,450
about this is that you're able to split

00:18:01,130 --> 00:18:06,620
out the levels of concerns the

00:18:05,450 --> 00:18:08,690
extra buttes that are going to be

00:18:06,620 --> 00:18:12,710
assigned within for example in this case

00:18:08,690 --> 00:18:15,710
the index application kind of route the

00:18:12,710 --> 00:18:18,289
index route template we're able to say

00:18:15,710 --> 00:18:21,679
we want this one to have these classes

00:18:18,289 --> 00:18:23,870
and we don't have to have sortable group

00:18:21,679 --> 00:18:26,000
accessible component either worried

00:18:23,870 --> 00:18:30,380
about the classes itself or have to

00:18:26,000 --> 00:18:32,690
expose a class api of some kind or have

00:18:30,380 --> 00:18:35,240
to have a wrapper div that would allow

00:18:32,690 --> 00:18:37,309
you to pass these things in instead

00:18:35,240 --> 00:18:39,019
we're allowed to use splat tributes to

00:18:37,309 --> 00:18:43,120
intelligently pass these things down

00:18:39,019 --> 00:18:43,120
wherever we wish within the component

00:18:43,630 --> 00:18:50,029
now on to events and modifiers within

00:18:47,720 --> 00:18:52,730
our sortable group accessible component

00:18:50,029 --> 00:18:55,610
I have many many even more than shown

00:18:52,730 --> 00:18:57,409
here you vac the modifiers because we're

00:18:55,610 --> 00:19:00,710
listening for things like focus and blur

00:18:57,409 --> 00:19:04,130
key up key down into spacebar things

00:19:00,710 --> 00:19:06,409
like that one line to you can see an

00:19:04,130 --> 00:19:09,169
example of a modifier this is a modifier

00:19:06,409 --> 00:19:13,519
that ships with ember it's called one

00:19:09,169 --> 00:19:16,220
and Owen is tied to the div itself and

00:19:13,519 --> 00:19:19,429
so it knows what the event is pardon it

00:19:16,220 --> 00:19:23,059
knows what the element is and it listens

00:19:19,429 --> 00:19:26,450
for in this case a focus event and when

00:19:23,059 --> 00:19:29,510
I this div gets a focus event it'll fire

00:19:26,450 --> 00:19:32,480
off the event to this handle focus

00:19:29,510 --> 00:19:35,269
action and in that action is where I

00:19:32,480 --> 00:19:37,639
handle all the focusing logic similarly

00:19:35,269 --> 00:19:40,039
a line down is blur and then on line

00:19:37,639 --> 00:19:44,870
four I could have done the same thing I

00:19:40,039 --> 00:19:47,120
could have done on key up and then

00:19:44,870 --> 00:19:50,090
assigned a key up handler in my

00:19:47,120 --> 00:19:52,880
component but instead I opted to write

00:19:50,090 --> 00:19:55,010
my own amber modifier I wanted to do

00:19:52,880 --> 00:19:58,130
that so that instead of having to have

00:19:55,010 --> 00:20:00,980
the component itself listen for every

00:19:58,130 --> 00:20:02,750
single possible key up event and then

00:20:00,980 --> 00:20:06,019
doing some kind of switch case or a

00:20:02,750 --> 00:20:08,539
series of ifs about which the event is

00:20:06,019 --> 00:20:09,889
being fired for what's key like what key

00:20:08,539 --> 00:20:11,070
is being entered on the keyboard and

00:20:09,889 --> 00:20:13,080
then ignoring

00:20:11,070 --> 00:20:15,350
I wanted to abstract that into its own

00:20:13,080 --> 00:20:18,060
modifier and so that's what I did here

00:20:15,350 --> 00:20:21,540
at the bottom of the screen you can see

00:20:18,060 --> 00:20:23,520
there is a modifier key up file this is

00:20:21,540 --> 00:20:25,800
the entire modifier it's just eight

00:20:23,520 --> 00:20:28,440
lines of code the most important lines

00:20:25,800 --> 00:20:30,840
of code are on line six and seven line

00:20:28,440 --> 00:20:33,780
six adds an event listener on to our

00:20:30,840 --> 00:20:36,900
element that listens for a key up and

00:20:33,780 --> 00:20:38,670
then on seven we undo it we say remove

00:20:36,900 --> 00:20:41,340
that event listener plants no longer

00:20:38,670 --> 00:20:44,220
need it for this modifier the rest of

00:20:41,340 --> 00:20:46,290
the logic is just listening for an event

00:20:44,220 --> 00:20:49,380
and firing off a function when it gets

00:20:46,290 --> 00:20:54,060
done listening for the event and also

00:20:49,380 --> 00:20:56,730
narrowing down to that desired key so

00:20:54,060 --> 00:20:58,080
okay let's with shift gears just a

00:20:56,730 --> 00:21:02,070
little bit we're going to talk about

00:20:58,080 --> 00:21:05,220
some testing details many of you have

00:21:02,070 --> 00:21:07,860
probably seen amber test member test

00:21:05,220 --> 00:21:10,140
helpers up at the top of your testing

00:21:07,860 --> 00:21:12,180
file if you were to generate a new

00:21:10,140 --> 00:21:15,780
component right now you would likely get

00:21:12,180 --> 00:21:20,100
an import that will import from amber

00:21:15,780 --> 00:21:21,840
test helpers a line like a render render

00:21:20,100 --> 00:21:23,640
is the most common one that you see and

00:21:21,840 --> 00:21:26,040
it's how you can render out your

00:21:23,640 --> 00:21:28,650
rendering pass your application tests

00:21:26,040 --> 00:21:30,150
things like that one of the first ones

00:21:28,650 --> 00:21:31,800
that people end up finding out about

00:21:30,150 --> 00:21:35,040
when they want to write more tests is

00:21:31,800 --> 00:21:36,870
click and so these are asynchronous you

00:21:35,040 --> 00:21:38,880
can await a render and you can all wait

00:21:36,870 --> 00:21:41,460
a click event and then you can assert

00:21:38,880 --> 00:21:43,110
some kind of data has been changed or

00:21:41,460 --> 00:21:45,990
some kind of UI state has been changed

00:21:43,110 --> 00:21:48,420
within your tests something that people

00:21:45,990 --> 00:21:52,710
are not as aware of commonly is trigger

00:21:48,420 --> 00:21:56,310
event and trigger key event so we'll be

00:21:52,710 --> 00:21:58,380
using those now if we go back to our key

00:21:56,310 --> 00:22:01,850
up example we want to write a test for

00:21:58,380 --> 00:22:05,280
that we can write a test just like this

00:22:01,850 --> 00:22:07,560
it's asynchronous so work with me here

00:22:05,280 --> 00:22:11,250
we're going to be on line 7 where we are

00:22:07,560 --> 00:22:13,560
going to render out eight div and that

00:22:11,250 --> 00:22:16,710
div is going to have a modifier of key

00:22:13,560 --> 00:22:19,490
up and it'll pass up a function to this

00:22:16,710 --> 00:22:22,800
key up and we'll handle that in a moment

00:22:19,490 --> 00:22:24,000
so now we have a div with our modifier

00:22:22,800 --> 00:22:28,140
on it

00:22:24,000 --> 00:22:28,890
with kia and on line 9 beneath it we

00:22:28,140 --> 00:22:31,710
have a no wait

00:22:28,890 --> 00:22:33,390
trigger key event and it will be first

00:22:31,710 --> 00:22:36,570
passed an element that we're going to

00:22:33,390 --> 00:22:38,310
put the event on to and then a string of

00:22:36,570 --> 00:22:41,940
what type of events which is a key up

00:22:38,310 --> 00:22:46,110
event and then finally what key this

00:22:41,940 --> 00:22:49,710
could be a key code like number 13 or it

00:22:46,110 --> 00:22:53,520
could be a string that starts with an

00:22:49,710 --> 00:22:56,340
uppercase like enter we don't hit line

00:22:53,520 --> 00:22:59,130
10 yet because this is asynchronous so

00:22:56,340 --> 00:23:01,050
after line 9 gets hit it's going to

00:22:59,130 --> 00:23:03,420
trigger that key event which will

00:23:01,050 --> 00:23:06,360
trigger our modifier with the key up

00:23:03,420 --> 00:23:08,640
event listener and in this case it's

00:23:06,360 --> 00:23:11,640
going to go as line 7 says up to this

00:23:08,640 --> 00:23:16,530
key up and you can see that on line 2

00:23:11,640 --> 00:23:19,020
this that key up so this that key up

00:23:16,530 --> 00:23:21,390
receives an event which we are going to

00:23:19,020 --> 00:23:24,990
D structure we're gonna take out of the

00:23:21,390 --> 00:23:28,230
event object just key on line 3 we're

00:23:24,990 --> 00:23:32,160
gonna make sure that key is an assert

00:23:28,230 --> 00:23:34,950
equal to enter now on line 4 we will

00:23:32,160 --> 00:23:37,380
just go ahead and assert a step of key

00:23:34,950 --> 00:23:41,060
up now if you haven't seen step before

00:23:37,380 --> 00:23:44,550
it's one of my favorite bits of cue unit

00:23:41,060 --> 00:23:47,790
1 queue unit you can assign steps which

00:23:44,550 --> 00:23:49,290
will then and automatically to an array

00:23:47,790 --> 00:23:52,920
anything you want

00:23:49,290 --> 00:23:55,470
typically strings on line 10 we can then

00:23:52,920 --> 00:23:58,620
verify those steps for run and so we can

00:23:55,470 --> 00:24:02,040
verify an array of one string in this

00:23:58,620 --> 00:24:05,430
case of key up was fired if for some

00:24:02,040 --> 00:24:07,740
reason line 9 did not trigger this key

00:24:05,430 --> 00:24:09,630
up function then this test would fail as

00:24:07,740 --> 00:24:13,530
it did not get all the steps that are

00:24:09,630 --> 00:24:16,260
expected to get and verify steps and so

00:24:13,530 --> 00:24:19,170
to cover this one more time we make a

00:24:16,260 --> 00:24:21,660
div we can put a modifier on to it in a

00:24:19,170 --> 00:24:24,630
test we can then fire something like a

00:24:21,660 --> 00:24:26,280
trigger key event and then we can listen

00:24:24,630 --> 00:24:28,980
for what that key is in this case and

00:24:26,280 --> 00:24:34,170
make a step and then verify those steps

00:24:28,980 --> 00:24:37,650
occurred similarly in application

00:24:34,170 --> 00:24:40,620
testing we could test the entire page

00:24:37,650 --> 00:24:43,980
tic for something at a higher level and

00:24:40,620 --> 00:24:47,220
so in the index tests for example we

00:24:43,980 --> 00:24:50,130
could assert in the Dom this is using Q

00:24:47,220 --> 00:24:53,630
unit Dom this is another adilyn we can

00:24:50,130 --> 00:24:59,400
use q unit Dom to say assert in the Dom

00:24:53,630 --> 00:25:00,960
the first element has text of item 1 so

00:24:59,400 --> 00:25:04,050
what this is really doing is we're gonna

00:25:00,960 --> 00:25:06,120
find all the items like item add 0 index

00:25:04,050 --> 00:25:08,220
and item at 1 index and we're going to

00:25:06,120 --> 00:25:10,770
assert that it has a certain text inside

00:25:08,220 --> 00:25:13,770
of it you can also do this with dot text

00:25:10,770 --> 00:25:16,050
content if you wish to but at any rate

00:25:13,770 --> 00:25:18,660
this is going to verify the beginning

00:25:16,050 --> 00:25:21,810
state is what we expect it to be item 1

00:25:18,660 --> 00:25:23,730
and then item 2 now we're going to test

00:25:21,810 --> 00:25:26,310
reordering we want to see if we can flip

00:25:23,730 --> 00:25:29,700
those and then test for that the next

00:25:26,310 --> 00:25:31,260
line down we await a trigger event which

00:25:29,700 --> 00:25:33,060
is a lot like what the user is going to

00:25:31,260 --> 00:25:37,340
do where they're going to focus by

00:25:33,060 --> 00:25:40,620
hitting tab 1 - the entire list itself

00:25:37,340 --> 00:25:43,740
so we're going to hit focus as an event

00:25:40,620 --> 00:25:45,900
want to the entire list and then that'll

00:25:43,740 --> 00:25:49,320
make the up arrow and the down arrow up

00:25:45,900 --> 00:25:53,070
here and we'll await a click emulating a

00:25:49,320 --> 00:25:56,160
click event on that down arrow so now

00:25:53,070 --> 00:25:58,380
that's asynchronous and we've said oh

00:25:56,160 --> 00:26:00,450
wait for that click to occur all the

00:25:58,380 --> 00:26:03,780
Emer run loop runs through and now we

00:26:00,450 --> 00:26:05,460
can do another assertion afterward so we

00:26:03,780 --> 00:26:06,480
can now just take the same test that we

00:26:05,460 --> 00:26:08,250
did a second ago with the same

00:26:06,480 --> 00:26:10,560
assertions and we can just flip the

00:26:08,250 --> 00:26:17,160
items now we expect item 2 to be first

00:26:10,560 --> 00:26:19,500
and item 1 to be second accessibility

00:26:17,160 --> 00:26:22,050
this allows us to test reordering when I

00:26:19,500 --> 00:26:24,000
first got to this I did not think that

00:26:22,050 --> 00:26:26,580
we will be able to promise that we can

00:26:24,000 --> 00:26:29,550
have automation testing for drag and

00:26:26,580 --> 00:26:31,800
drop and while technically we did not in

00:26:29,550 --> 00:26:34,080
this case automation test to drag and

00:26:31,800 --> 00:26:36,240
drop of the mouse or the touch but we

00:26:34,080 --> 00:26:38,850
were able to make sure that we can

00:26:36,240 --> 00:26:42,690
guarantee that the list can be restored

00:26:38,850 --> 00:26:47,100
with keyboard inputs and that was a big

00:26:42,690 --> 00:26:49,020
win for us we had a lot of different

00:26:47,100 --> 00:26:51,299
team wins in fact throughout this

00:26:49,020 --> 00:26:53,279
project we had a very quick feedback

00:26:51,299 --> 00:26:55,049
with development because once we had

00:26:53,279 --> 00:26:56,999
tests written we were able to do

00:26:55,049 --> 00:26:58,950
test-driven development from then on and

00:26:56,999 --> 00:27:01,080
we were able to see when tests would go

00:26:58,950 --> 00:27:03,330
red if we broke something and stayed

00:27:01,080 --> 00:27:05,639
green while it was still good we were

00:27:03,330 --> 00:27:08,460
able to work with design to continually

00:27:05,639 --> 00:27:10,679
improve on this functionality in all the

00:27:08,460 --> 00:27:13,320
different visuals passing in splat

00:27:10,679 --> 00:27:17,309
rebukes of more classes to adjust the

00:27:13,320 --> 00:27:18,960
visual style of things very quickly we

00:27:17,309 --> 00:27:21,419
also had a very quick feedback loop with

00:27:18,960 --> 00:27:23,399
project managers who were instantly able

00:27:21,419 --> 00:27:25,769
to see that we achieved the baseline

00:27:23,399 --> 00:27:28,139
functionality of mouse drag and drop and

00:27:25,769 --> 00:27:30,029
touch drag-and-drop and then gave us a

00:27:28,139 --> 00:27:32,359
little bit more time to work on the

00:27:30,029 --> 00:27:36,029
keyboard interactivity

00:27:32,359 --> 00:27:38,129
we got quick sign-off for UX which was

00:27:36,029 --> 00:27:39,269
excellent were able to see how is

00:27:38,129 --> 00:27:41,399
working in every step in the process

00:27:39,269 --> 00:27:45,269
because we're doing composable

00:27:41,399 --> 00:27:47,190
components and we had less stress on QA

00:27:45,269 --> 00:27:51,059
because we were able to deliver an

00:27:47,190 --> 00:27:53,129
automation tested paid the entire

00:27:51,059 --> 00:27:55,919
feature was automation tested from

00:27:53,129 --> 00:27:58,769
beginning to end and so instead of them

00:27:55,919 --> 00:28:01,139
having to do manual testing for every

00:27:58,769 --> 00:28:04,859
release from here on end we were able to

00:28:01,139 --> 00:28:07,679
have that automation tested for them and

00:28:04,859 --> 00:28:09,119
finally we had less scope creep because

00:28:07,679 --> 00:28:11,999
instead of having to come back to this

00:28:09,119 --> 00:28:13,859
either in the final days or months later

00:28:11,999 --> 00:28:15,200
down the road to have to force an

00:28:13,859 --> 00:28:18,019
accessibility for this feature

00:28:15,200 --> 00:28:19,940
it was just already built in there

00:28:18,019 --> 00:28:22,609
didn't have to worry about it

00:28:19,940 --> 00:28:26,580
now something I find very interesting

00:28:22,609 --> 00:28:28,889
amber sortable version 2 came out after

00:28:26,580 --> 00:28:31,679
most of my work was done for this

00:28:28,889 --> 00:28:34,889
feature and I've implemented this into

00:28:31,679 --> 00:28:38,460
the demo project where now we have

00:28:34,889 --> 00:28:39,840
version 2 of amber sortable and now I

00:28:38,460 --> 00:28:43,169
have a list here of peanut butter

00:28:39,840 --> 00:28:45,149
cookies and lasagna and now you can

00:28:43,169 --> 00:28:46,769
ahead love that combination you can

00:28:45,149 --> 00:28:50,429
click and drag just like we were able to

00:28:46,769 --> 00:28:53,489
before but also without any of my

00:28:50,429 --> 00:28:55,679
composable components invert sortable

00:28:53,489 --> 00:28:59,490
out-of-the-box supports keyboard events

00:28:55,679 --> 00:29:01,619
I can tab to the list I can hit enter I

00:28:59,490 --> 00:29:04,140
can use my arrow keys to move them up

00:29:01,619 --> 00:29:07,290
and down and hit enter again to finalize

00:29:04,140 --> 00:29:10,080
selection it's a bit of a different UI

00:29:07,290 --> 00:29:10,920
pattern but I actually really like the

00:29:10,080 --> 00:29:13,230
way that it feels

00:29:10,920 --> 00:29:16,110
and it's shipped by default and it's

00:29:13,230 --> 00:29:18,540
part of a main ember sortable library

00:29:16,110 --> 00:29:20,240
which is excellent you get these kind of

00:29:18,540 --> 00:29:24,300
things for free by leveraging

00:29:20,240 --> 00:29:26,970
open-source community projects on top of

00:29:24,300 --> 00:29:29,160
that in order to do an upgrade from what

00:29:26,970 --> 00:29:31,890
I had shown previously to this version

00:29:29,160 --> 00:29:35,640
all I would have to do is delete those

00:29:31,890 --> 00:29:38,550
two composable components and then

00:29:35,640 --> 00:29:41,520
rewire this back up very slightly and it

00:29:38,550 --> 00:29:43,800
just works I can move forward by this

00:29:41,520 --> 00:29:48,390
deleting code that's something you

00:29:43,800 --> 00:29:52,530
always want and so where do we go from

00:29:48,390 --> 00:29:55,020
there something I did not talk about but

00:29:52,530 --> 00:29:57,480
is very important it's accessible screen

00:29:55,020 --> 00:29:59,130
announcements screen announcements

00:29:57,480 --> 00:30:01,350
letting the user know that something has

00:29:59,130 --> 00:30:02,480
changed such as the order of items in a

00:30:01,350 --> 00:30:05,450
list

00:30:02,480 --> 00:30:09,720
another thing is ember sortable version

00:30:05,450 --> 00:30:11,550
2.2 now has an alpha which has modifiers

00:30:09,720 --> 00:30:13,740
as the main way that you write ember

00:30:11,550 --> 00:30:15,210
sortable components so instead of having

00:30:13,740 --> 00:30:17,370
composable components you could actually

00:30:15,210 --> 00:30:21,150
write something like an ordered list now

00:30:17,370 --> 00:30:25,020
it have a modifier of a sortable group

00:30:21,150 --> 00:30:28,050
and Li like a list item element that has

00:30:25,020 --> 00:30:31,020
a modifier of a sortable item I find it

00:30:28,050 --> 00:30:33,480
to be very exciting there's also ember

00:30:31,020 --> 00:30:35,550
accessibility testing and ember CLI

00:30:33,480 --> 00:30:38,040
template lint then I feel go hand in

00:30:35,550 --> 00:30:42,090
hand to help you avoid some

00:30:38,040 --> 00:30:44,580
accessibility plot holes plot holes

00:30:42,090 --> 00:30:46,410
potholes that you could run into were

00:30:44,580 --> 00:30:49,260
you like oh no I accidentally forgot to

00:30:46,410 --> 00:30:50,640
put a roll on my button for example this

00:30:49,260 --> 00:30:54,240
is the very real case that happened to

00:30:50,640 --> 00:30:56,010
us recently and so what did we discuss

00:30:54,240 --> 00:30:58,710
we were talking about adding

00:30:56,010 --> 00:31:00,240
functionality with composable components

00:30:58,710 --> 00:31:02,160
and all the different advantages that

00:31:00,240 --> 00:31:04,200
came with composable components such as

00:31:02,160 --> 00:31:06,630
being able to upgrade more easily over

00:31:04,200 --> 00:31:10,470
time having faster feedback loops and

00:31:06,630 --> 00:31:12,160
being able to not have to modify core

00:31:10,470 --> 00:31:15,370
functionality from an

00:31:12,160 --> 00:31:17,500
our add-on for example we talked about

00:31:15,370 --> 00:31:19,630
equitable and discoverable user

00:31:17,500 --> 00:31:24,280
experience design while looking at some

00:31:19,630 --> 00:31:25,960
of the w3c patterns and also just the

00:31:24,280 --> 00:31:28,240
reasons why you would want to do these

00:31:25,960 --> 00:31:31,720
things and then the final result and how

00:31:28,240 --> 00:31:33,520
good it feels then we also talked about

00:31:31,720 --> 00:31:36,220
automation testing and automation

00:31:33,520 --> 00:31:38,260
testing accessibility but is something

00:31:36,220 --> 00:31:42,610
that is not commonly done but I would

00:31:38,260 --> 00:31:45,280
love to see more of it once again I work

00:31:42,610 --> 00:31:47,140
at L of U as a software engineer we are

00:31:45,280 --> 00:31:49,420
hiring and we are working right now with

00:31:47,140 --> 00:31:51,370
K through 12 school districts to not

00:31:49,420 --> 00:31:54,070
only help them through the corona virus

00:31:51,370 --> 00:31:56,200
epidemic that is happening right now but

00:31:54,070 --> 00:31:57,820
also throughout the year as they are

00:31:56,200 --> 00:32:01,050
budgeting in order to make a more

00:31:57,820 --> 00:32:04,210
equitable education system for everybody

00:32:01,050 --> 00:32:05,920
we build member software so we are

00:32:04,210 --> 00:32:08,140
Emperor through and through and we

00:32:05,920 --> 00:32:09,700
develop software with shape up by base

00:32:08,140 --> 00:32:11,710
camp so if you're looking for something

00:32:09,700 --> 00:32:15,220
that's an alternative to agile take a

00:32:11,710 --> 00:32:17,650
look at all of you lastly I have a

00:32:15,220 --> 00:32:20,250
challenge for you hire somebody

00:32:17,650 --> 00:32:22,630
different than you that might sound

00:32:20,250 --> 00:32:24,820
completely off topic but it's really not

00:32:22,630 --> 00:32:27,220
if you hire somebody that's different

00:32:24,820 --> 00:32:29,440
than you in regards to I don't care if

00:32:27,220 --> 00:32:31,690
it's race religion orientation gender

00:32:29,440 --> 00:32:33,820
maybe they like Legos and you like Mega

00:32:31,690 --> 00:32:35,050
Bloks it doesn't matter the more

00:32:33,820 --> 00:32:37,390
different people we have on your team

00:32:35,050 --> 00:32:40,000
the more likely you're going to have

00:32:37,390 --> 00:32:44,800
people asking important questions such

00:32:40,000 --> 00:32:47,080
as is this accessible and that is what

00:32:44,800 --> 00:32:49,300
inspired us to do this on our team so I

00:32:47,080 --> 00:32:50,590
encourage you try to hire somebody is

00:32:49,300 --> 00:32:52,980
different than you if you have the

00:32:50,590 --> 00:32:55,780
opportunity you won't regret it and

00:32:52,980 --> 00:32:59,370
lastly I ask you to make accessibility a

00:32:55,780 --> 00:32:59,370

YouTube URL: https://www.youtube.com/watch?v=ESemqChsBEE


