Title: Virtual EmberConf 2020: FastFlood: The Story of a Massive Memory Leak in... by Sergio Arbeo
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	FastFlood: The Story of a Massive Memory Leak in FastBoot Land by Sergio Arbeo

What would you do if you found a memory leak so big, that most of the data of your requests are leaking? What if everyone on your team was distributed? What if no one on the team shared a timezone?

This talk presents the typical techniques to find a memory leak and a few unusual ones when dealing with a significant leak.

We will also discuss how to organize a distributed team to find the leak faster.
Captions: 
	00:00:01,270 --> 00:00:24,939
[Music]

00:00:20,760 --> 00:00:26,919
it was a really exciting day but first

00:00:24,939 --> 00:00:29,080
let me tell you that the story all names

00:00:26,919 --> 00:00:30,700
characters and incidents portrayed in

00:00:29,080 --> 00:00:33,280
these productions are fictitious

00:00:30,700 --> 00:00:36,400
no dedication with the actual persons

00:00:33,280 --> 00:00:38,230
living or disease places building and

00:00:36,400 --> 00:00:42,550
products is intended or should be

00:00:38,230 --> 00:00:45,400
inferred just as a curiosity this was

00:00:42,550 --> 00:00:48,400
started in the film industry after the

00:00:45,400 --> 00:00:53,049
MGM production pristine and the Empress

00:00:48,400 --> 00:00:58,510
in that production it was still pristine

00:00:53,049 --> 00:01:01,900
great Natasha Natasha was the character

00:00:58,510 --> 00:01:06,640
portraying Prince Irina and Princess

00:01:01,900 --> 00:01:09,790
Irina should MDM and Siwon what we would

00:01:06,640 --> 00:01:13,510
be what it would be today over two

00:01:09,790 --> 00:01:18,010
million dollars in court and 90 million

00:01:13,510 --> 00:01:22,890
in out-of-court settlement if you are

00:01:18,010 --> 00:01:22,890
not a native English speaker like I am I

00:01:22,979 --> 00:01:32,619
mean I'm not a native English speaker

00:01:27,840 --> 00:01:36,189
this is legalese for do not sue me

00:01:32,619 --> 00:01:39,759
please as I was saying it was a really

00:01:36,189 --> 00:01:44,829
exciting day after months and months of

00:01:39,759 --> 00:01:47,409
work we were releasing a new feature the

00:01:44,829 --> 00:01:50,880
team was really really excited and

00:01:47,409 --> 00:01:55,710
thriving because of this but suddenly

00:01:50,880 --> 00:02:00,909
our project manager came with bad news

00:01:55,710 --> 00:02:03,759
we were having a leak in the server and

00:02:00,909 --> 00:02:09,940
then I talking about a small leak I'm

00:02:03,759 --> 00:02:13,270
talking like this kind of leak welcome

00:02:09,940 --> 00:02:17,170
to fast flood a message a story of a

00:02:13,270 --> 00:02:19,959
massive memo leaked in fast food lab my

00:02:17,170 --> 00:02:23,650
name is circular Bell I'm also known as

00:02:19,959 --> 00:02:26,440
said Ave in Twitter and github I work

00:02:23,650 --> 00:02:29,500
for Tokyo docker is digital product

00:02:26,440 --> 00:02:30,490
consultancy from idea to the final

00:02:29,500 --> 00:02:33,610
product

00:02:30,490 --> 00:02:37,960
we have QA designers project managers

00:02:33,610 --> 00:02:39,880
engineers if you're looking for some

00:02:37,960 --> 00:02:46,420
people to work with you just drop us a

00:02:39,880 --> 00:02:48,670
line and we see we can we do if any of

00:02:46,420 --> 00:02:51,730
the presents are not familiar with what

00:02:48,670 --> 00:02:54,640
fastboot is fast food is the server

00:02:51,730 --> 00:02:57,850
render ending of member this means that

00:02:54,640 --> 00:03:00,820
we can render in our server the pages so

00:02:57,850 --> 00:03:04,870
we can serve and already render pages

00:03:00,820 --> 00:03:07,330
I let ember take it from there if you're

00:03:04,870 --> 00:03:12,760
not familiar with what a memory leak is

00:03:07,330 --> 00:03:14,890
is basically that it's a piece of data

00:03:12,760 --> 00:03:20,620
that should have been garbage collected

00:03:14,890 --> 00:03:23,770
but it's not for some reason let me let

00:03:20,620 --> 00:03:30,640
me do a kind of a clear example with

00:03:23,770 --> 00:03:34,630
this let's say we have variable one two

00:03:30,640 --> 00:03:40,380
three four five and six in our memory

00:03:34,630 --> 00:03:43,240
and let's say we drop one two and three

00:03:40,380 --> 00:03:47,440
if after this we still have one two

00:03:43,240 --> 00:03:50,860
three four five and six in memory we say

00:03:47,440 --> 00:03:55,570
we have a leak it could be good that

00:03:50,860 --> 00:03:57,910
whenever we drop one two and three we

00:03:55,570 --> 00:04:00,100
find ourselves with one two three four

00:03:57,910 --> 00:04:02,620
five and six in our memory this means

00:04:00,100 --> 00:04:05,280
it's reproducible that's great

00:04:02,620 --> 00:04:09,430
because it will be easier to the book it

00:04:05,280 --> 00:04:12,910
but it's still bad that we have one two

00:04:09,430 --> 00:04:16,660
three drop I still find ourselves one

00:04:12,910 --> 00:04:19,840
two three four five and six and not just

00:04:16,660 --> 00:04:22,420
because we cannot get rid of one two and

00:04:19,840 --> 00:04:28,780
three it is because we don't know what

00:04:22,420 --> 00:04:31,410
else we can have in our work memory like

00:04:28,780 --> 00:04:36,910
oops

00:04:31,410 --> 00:04:39,460
annex ability sorry let's say I hope

00:04:36,910 --> 00:04:45,580
this makes things much clearer but

00:04:39,460 --> 00:04:48,430
why does memory leak happen the main

00:04:45,580 --> 00:04:50,470
reason is that something else is keeping

00:04:48,430 --> 00:04:53,169
a reference this is almost a hundred

00:04:50,470 --> 00:04:56,500
percent of places there is a tiny tiny

00:04:53,169 --> 00:05:01,139
chance really tiny that it's a garbage

00:04:56,500 --> 00:05:01,139
collector book it diesel it happens in

00:05:01,169 --> 00:05:07,080
frameworks themselves it's really rare

00:05:04,000 --> 00:05:10,240
to see one of these in our applications

00:05:07,080 --> 00:05:12,810
as we are talking about references we

00:05:10,240 --> 00:05:16,180
can easily create an object memory graph

00:05:12,810 --> 00:05:18,310
this is the object memory graph tool in

00:05:16,180 --> 00:05:20,470
Firefox we are not going to see much of

00:05:18,310 --> 00:05:22,630
Firefox here because as we are in

00:05:20,470 --> 00:05:24,430
fastboot and password is node it's much

00:05:22,630 --> 00:05:28,449
easier to work with chrome developer

00:05:24,430 --> 00:05:31,360
tools in here I don't know for you but

00:05:28,449 --> 00:05:34,419
this tool reminds me a lot the file

00:05:31,360 --> 00:05:35,919
directory tool in Jurassic Park and a

00:05:34,419 --> 00:05:41,349
colleague told me that that was an

00:05:35,919 --> 00:05:43,150
actual thing in Solaris but let's see a

00:05:41,349 --> 00:05:47,979
tool that's much more useful for us and

00:05:43,150 --> 00:05:50,440
that's he profiled in here we have two

00:05:47,979 --> 00:05:53,680
panels in the panel at valve we have all

00:05:50,440 --> 00:05:57,219
the objects in memory and then we have

00:05:53,680 --> 00:05:59,469
information about them the first piece

00:05:57,219 --> 00:06:01,449
of information we have is what people

00:05:59,469 --> 00:06:04,419
call the distance that's the distance

00:06:01,449 --> 00:06:07,870
from the GC root it's a little hard to

00:06:04,419 --> 00:06:10,419
explain it's much easier to see written

00:06:07,870 --> 00:06:13,090
documentation about this but the general

00:06:10,419 --> 00:06:16,270
idea behind this is that the biggest

00:06:13,090 --> 00:06:19,780
memory leak the technologies number must

00:06:16,270 --> 00:06:22,630
be it's not real correlation but it's

00:06:19,780 --> 00:06:25,479
highly likely and then we have the

00:06:22,630 --> 00:06:30,280
shallow side that's the size of the

00:06:25,479 --> 00:06:32,830
object itself finally we had the

00:06:30,280 --> 00:06:36,570
retained selves the retain size is the

00:06:32,830 --> 00:06:40,509
size with three so we freed that object

00:06:36,570 --> 00:06:45,099
let's see an example or for example the

00:06:40,509 --> 00:06:48,460
object in this case we have four hundred

00:06:45,099 --> 00:06:52,150
thousand like a three percent of memory

00:06:48,460 --> 00:06:52,840
in solid size but so we Frida's object

00:06:52,150 --> 00:06:56,080
we

00:06:52,840 --> 00:07:00,360
between other values as well and those

00:06:56,080 --> 00:07:03,250
with free almost a 30% of the memory

00:07:00,360 --> 00:07:07,900
below this first panel we have the

00:07:03,250 --> 00:07:09,910
retainers panel we can send objects from

00:07:07,900 --> 00:07:13,150
this panel to the panel above and vice

00:07:09,910 --> 00:07:16,090
versa this is really useful because we

00:07:13,150 --> 00:07:19,150
can look for an object in the panel

00:07:16,090 --> 00:07:21,610
above and send it to the retainer panel

00:07:19,150 --> 00:07:26,130
and we can see which object are

00:07:21,610 --> 00:07:26,130
retaining that one really really useful

00:07:27,270 --> 00:07:33,610
as I said this is the heat profile we

00:07:30,580 --> 00:07:36,010
can do really good really cool things

00:07:33,610 --> 00:07:38,440
with this basically we captured the

00:07:36,010 --> 00:07:40,630
memory State at one point in time and

00:07:38,440 --> 00:07:44,950
the tool let us compare several

00:07:40,630 --> 00:07:46,630
different profiles for example if you

00:07:44,950 --> 00:07:49,210
work more leaned mostly in the browser

00:07:46,630 --> 00:07:51,820
we can do things like this what we call

00:07:49,210 --> 00:07:54,550
the tree snapshot technique for doing

00:07:51,820 --> 00:07:58,389
this technique the first step is to warm

00:07:54,550 --> 00:08:01,600
up our our application let's say just

00:07:58,389 --> 00:08:03,700
start it or started on logging in would

00:08:01,600 --> 00:08:08,260
be warming up this will create a few

00:08:03,700 --> 00:08:11,320
objects in our memory after this we

00:08:08,260 --> 00:08:13,750
create the first snapshot after the

00:08:11,320 --> 00:08:18,880
first nap shot we do the action we

00:08:13,750 --> 00:08:23,470
suspect this leak in memory and we do a

00:08:18,880 --> 00:08:29,349
second snapshot as we can see after this

00:08:23,470 --> 00:08:32,020
action a few object has been marked to

00:08:29,349 --> 00:08:34,240
be recollected for example the one in

00:08:32,020 --> 00:08:38,550
the bottom left corner is mark for

00:08:34,240 --> 00:08:47,380
recollection then we repeat the action

00:08:38,550 --> 00:08:51,040
and we do a third snapshot okay now we

00:08:47,380 --> 00:08:52,930
have three snapshots that you might have

00:08:51,040 --> 00:08:55,120
suspected we would do so because it's

00:08:52,930 --> 00:08:57,820
called a free snapshot technique but

00:08:55,120 --> 00:09:02,079
what can we do with this thing we can do

00:08:57,820 --> 00:09:04,420
the following we want the object that

00:09:02,079 --> 00:09:06,160
are in the third snapshot

00:09:04,420 --> 00:09:09,760
that removes all the objects marked for

00:09:06,160 --> 00:09:11,769
a collection or regulated already then

00:09:09,760 --> 00:09:14,050
we want the objects created after the

00:09:11,769 --> 00:09:18,300
first nap shot we are not interested in

00:09:14,050 --> 00:09:18,300
the objects created during the warmup

00:09:18,959 --> 00:09:30,639
maybe if they and finally we want the

00:09:28,360 --> 00:09:33,100
objects created before the second

00:09:30,639 --> 00:09:35,560
snapshot we are not interested in the

00:09:33,100 --> 00:09:38,740
oddly created after doing the action for

00:09:35,560 --> 00:09:41,519
the first time while this does not

00:09:38,740 --> 00:09:44,949
pinpoint us to an object that is leaking

00:09:41,519 --> 00:09:48,250
this does just reduce a lot the memory

00:09:44,949 --> 00:09:52,000
we need to inspect but this is not

00:09:48,250 --> 00:09:54,850
really useful for us because in fastboot

00:09:52,000 --> 00:09:59,110
the memory are are more atomic we don't

00:09:54,850 --> 00:10:01,329
have leaking between requests for that

00:09:59,110 --> 00:10:04,300
it's much more useful the timeline tool

00:10:01,329 --> 00:10:10,329
the timeline tool looks exactly like the

00:10:04,300 --> 00:10:12,250
heap profiler we saw before but with the

00:10:10,329 --> 00:10:18,339
timeline logged off let's inspect that

00:10:12,250 --> 00:10:21,160
timeline in that timeline we have a blue

00:10:18,339 --> 00:10:24,940
bar that represents the memory we are

00:10:21,160 --> 00:10:27,070
consuming if some of the part of that

00:10:24,940 --> 00:10:30,220
memory is being reflected by the garbage

00:10:27,070 --> 00:10:35,589
collector that part is display as a gray

00:10:30,220 --> 00:10:38,529
bar more about the memory in fastboot is

00:10:35,589 --> 00:10:41,800
that easily in fact with the warm-up

00:10:38,529 --> 00:10:46,120
action in involves higher and higher

00:10:41,800 --> 00:10:48,600
memory being consumed but subsequent

00:10:46,120 --> 00:10:52,000
request does not consume that much

00:10:48,600 --> 00:10:54,610
usually after a few requests an

00:10:52,000 --> 00:10:56,440
application because that was the

00:10:54,610 --> 00:10:58,420
application if you remember when we

00:10:56,440 --> 00:11:00,459
introduced fast food there were like

00:10:58,420 --> 00:11:02,500
application initializers and instance

00:11:00,459 --> 00:11:06,279
initializers it's mostly designed here

00:11:02,500 --> 00:11:09,430
like we create the application and we

00:11:06,279 --> 00:11:14,079
create the instances a new application

00:11:09,430 --> 00:11:16,449
is created and the other one is drop in

00:11:14,079 --> 00:11:17,550
this scenario all the requests are

00:11:16,449 --> 00:11:21,029
leaking on

00:11:17,550 --> 00:11:24,269
90% of the memory the ideal situation

00:11:21,029 --> 00:11:28,589
would be something like this we see all

00:11:24,269 --> 00:11:31,200
the requests gray okay

00:11:28,589 --> 00:11:35,100
you'd be wondering now we have the tools

00:11:31,200 --> 00:11:37,680
what okay I'll tell you the process we

00:11:35,100 --> 00:11:42,660
followed and we will find during during

00:11:37,680 --> 00:11:46,920
that story the step zero is we need to

00:11:42,660 --> 00:11:48,690
reproduce that locally some of you might

00:11:46,920 --> 00:11:51,839
think might be thinking about using get

00:11:48,690 --> 00:11:53,790
exact that's a really useful tool if you

00:11:51,839 --> 00:11:57,420
can use it in our case since we were

00:11:53,790 --> 00:11:59,519
using feature flags extensively we've

00:11:57,420 --> 00:12:02,730
been working on that for months so it

00:11:59,519 --> 00:12:04,820
was not useful for us in any case this

00:12:02,730 --> 00:12:08,610
is useful for anybody

00:12:04,820 --> 00:12:10,560
production is build why because we want

00:12:08,610 --> 00:12:16,589
to have the build as close as possible

00:12:10,560 --> 00:12:18,839
as as production that means that we

00:12:16,589 --> 00:12:23,690
might need to remove some loggers or

00:12:18,839 --> 00:12:26,610
some services but if we were using like

00:12:23,690 --> 00:12:27,930
if we were building the first built

00:12:26,610 --> 00:12:30,510
application and moving into another

00:12:27,930 --> 00:12:33,470
project we would be doing that in here

00:12:30,510 --> 00:12:36,180
we want to be as close as possible and

00:12:33,470 --> 00:12:38,310
one big change that really needs to be

00:12:36,180 --> 00:12:40,050
done is notification and that's just

00:12:38,310 --> 00:12:45,630
because in the panel we saw before in

00:12:40,050 --> 00:12:48,380
the in the heap snapshot profile they up

00:12:45,630 --> 00:12:51,420
the name of the objects could be there

00:12:48,380 --> 00:12:57,360
but what if your object has no name like

00:12:51,420 --> 00:13:01,770
a simple polio you were passing well we

00:12:57,360 --> 00:13:05,100
have a snippet for that later the next

00:13:01,770 --> 00:13:07,949
step would be look for the leak in our

00:13:05,100 --> 00:13:10,980
code or look for changes between

00:13:07,949 --> 00:13:14,579
versions we can approach this like okay

00:13:10,980 --> 00:13:16,890
we have just you see we see the project

00:13:14,579 --> 00:13:20,670
in one state then suspect the project as

00:13:16,890 --> 00:13:25,350
you see now or look for the changes that

00:13:20,670 --> 00:13:29,690
happened in those month for finding the

00:13:25,350 --> 00:13:32,600
leak we followed this process the

00:13:29,690 --> 00:13:36,320
first one is running the server don't

00:13:32,600 --> 00:13:37,910
forget to use inspect on its back BRK so

00:13:36,320 --> 00:13:41,330
you can use the chrome developer tools

00:13:37,910 --> 00:13:44,630
which are not the instance then we do

00:13:41,330 --> 00:13:46,490
one request this this idea was taking

00:13:44,630 --> 00:13:50,300
directly from the free snapshot

00:13:46,490 --> 00:13:52,910
technique and also we do this first

00:13:50,300 --> 00:13:55,880
request manually this is important

00:13:52,910 --> 00:13:58,150
because sometimes you don't solve the

00:13:55,880 --> 00:14:01,340
the memory leak but break the build and

00:13:58,150 --> 00:14:07,250
I would let you see if you are still

00:14:01,340 --> 00:14:11,180
returning our website then you start the

00:14:07,250 --> 00:14:14,030
timeline and finally make a few requests

00:14:11,180 --> 00:14:15,650
so you can inspect the code for making

00:14:14,030 --> 00:14:16,790
those few requests we usually use a

00:14:15,650 --> 00:14:20,150
party bag mark

00:14:16,790 --> 00:14:21,560
they'll be tool with concurrency one so

00:14:20,150 --> 00:14:29,510
you can see more clearly each of those

00:14:21,560 --> 00:14:34,580
requests this is the snippet so you can

00:14:29,510 --> 00:14:36,830
see in one expecting the memory the name

00:14:34,580 --> 00:14:40,160
of some poachers you can use these

00:14:36,830 --> 00:14:42,020
niches this lipid that does would let

00:14:40,160 --> 00:14:43,520
you see that pajamas lick detect in the

00:14:42,020 --> 00:14:47,150
inspector and look for it

00:14:43,520 --> 00:14:49,760
or these are the one they have the same

00:14:47,150 --> 00:14:51,620
effect if you need several names just

00:14:49,760 --> 00:14:51,950
change the leak detect for the names you

00:14:51,620 --> 00:14:57,800
want

00:14:51,950 --> 00:14:59,750
foobar makélélé whatever then we have

00:14:57,800 --> 00:15:03,230
step two we need to find the Dominator

00:14:59,750 --> 00:15:06,380
Dominator is a term in the industry I

00:15:03,230 --> 00:15:08,180
haven't found all the one if you know of

00:15:06,380 --> 00:15:10,880
a better one let me know and I'll change

00:15:08,180 --> 00:15:13,010
the presentation but the Dominator is

00:15:10,880 --> 00:15:14,800
basically the retainer we need to remove

00:15:13,010 --> 00:15:17,390
so the link is gone

00:15:14,800 --> 00:15:21,530
or we can also find the dependency

00:15:17,390 --> 00:15:23,839
because that the leak can be can be in

00:15:21,530 --> 00:15:28,220
one of our dependencies updated to

00:15:23,839 --> 00:15:33,260
display time step three

00:15:28,220 --> 00:15:37,160
removal the Dominator or change the

00:15:33,260 --> 00:15:39,070
dependency version and win thank you so

00:15:37,160 --> 00:15:41,300
much

00:15:39,070 --> 00:15:45,270
wait

00:15:41,300 --> 00:15:48,959
this was not that simple in our case we

00:15:45,270 --> 00:15:53,040
were dealing with two big problems first

00:15:48,959 --> 00:15:55,290
we were a fully remote team there were

00:15:53,040 --> 00:16:00,350
four people on our team and I think

00:15:55,290 --> 00:16:03,839
there were even four time zones and we

00:16:00,350 --> 00:16:06,060
were leaking the container if you are

00:16:03,839 --> 00:16:08,370
into ember container is basically the

00:16:06,060 --> 00:16:11,190
registry embarrassing for everything

00:16:08,370 --> 00:16:13,260
everything is the in there so that's the

00:16:11,190 --> 00:16:17,640
reason we were leaking almost 90% of our

00:16:13,260 --> 00:16:19,380
memory so what do we do well

00:16:17,640 --> 00:16:23,060
after confirming we were leak in the

00:16:19,380 --> 00:16:25,860
container that was on the very first day

00:16:23,060 --> 00:16:27,170
we have two approaches the first one is

00:16:25,860 --> 00:16:30,240
look for all not leaking

00:16:27,170 --> 00:16:32,370
owner is basically the public API of the

00:16:30,240 --> 00:16:34,320
container so we might be looking at

00:16:32,370 --> 00:16:37,020
maybe leak in the container something

00:16:34,320 --> 00:16:40,470
some work might be our code or some of

00:16:37,020 --> 00:16:42,120
our dependencies and also day to late

00:16:40,470 --> 00:16:43,649
December we were not in the late

00:16:42,120 --> 00:16:47,430
December because of reasons I cannot

00:16:43,649 --> 00:16:50,579
disclose but that's the other approach

00:16:47,430 --> 00:16:53,670
maybe hopefully sorry for them recording

00:16:50,579 --> 00:16:56,970
but hopefully the leak poster and it was

00:16:53,670 --> 00:17:02,520
not our fault spoiler alert we don't

00:16:56,970 --> 00:17:05,939
know then we assign tasks based on

00:17:02,520 --> 00:17:08,309
people's knowledge for example there

00:17:05,939 --> 00:17:11,160
were one person on our team that had

00:17:08,309 --> 00:17:13,770
updated a similar application so we

00:17:11,160 --> 00:17:19,410
asked him to to start working on that

00:17:13,770 --> 00:17:21,420
update our Umbridge is the other person

00:17:19,410 --> 00:17:25,410
was the main person behind the changes

00:17:21,420 --> 00:17:27,059
behind this new feature so we charge him

00:17:25,410 --> 00:17:30,570
with going through the changes and see

00:17:27,059 --> 00:17:34,080
what could be wrong and two of us had

00:17:30,570 --> 00:17:35,070
more experience finding leaks and

00:17:34,080 --> 00:17:38,070
inspecting memory

00:17:35,070 --> 00:17:39,570
so we charged those people on doing a

00:17:38,070 --> 00:17:43,460
general investigation on approaching

00:17:39,570 --> 00:17:43,460
these as if you were new to the project

00:17:43,640 --> 00:17:51,230
done this I cannot suggest not that

00:17:48,150 --> 00:17:51,230
communication is key

00:17:51,619 --> 00:17:57,690
communicate early and communicate often

00:17:54,889 --> 00:18:00,600
this is as if in a remote environment

00:17:57,690 --> 00:18:05,340
communication is really really important

00:18:00,600 --> 00:18:08,729
in times of crisis it is more early and

00:18:05,340 --> 00:18:12,179
often less let us prevent duplicate over

00:18:08,729 --> 00:18:15,659
40 different tasks and also use your

00:18:12,179 --> 00:18:18,509
colleagues as rubber ducks even if you

00:18:15,659 --> 00:18:20,729
think you might be used wasting your

00:18:18,509 --> 00:18:23,220
time the times of the time of your

00:18:20,729 --> 00:18:26,070
colleague this is not the case because

00:18:23,220 --> 00:18:29,580
this is a time consuming task that

00:18:26,070 --> 00:18:33,539
consumes also a lot of morale you really

00:18:29,580 --> 00:18:35,070
need that human contact as well take

00:18:33,539 --> 00:18:40,080
small victories before winning the war

00:18:35,070 --> 00:18:43,200
is one of the other key concept I want

00:18:40,080 --> 00:18:45,529
you to take from this talk first finding

00:18:43,200 --> 00:18:49,379
the leak won't be done by one individual

00:18:45,529 --> 00:18:52,679
as we were splitting the task the

00:18:49,379 --> 00:18:55,200
responsibility shall not be split why

00:18:52,679 --> 00:18:57,659
because the only reason one person in

00:18:55,200 --> 00:19:00,210
that team is finding the leak is because

00:18:57,659 --> 00:19:03,359
the rest of the team is trying other

00:19:00,210 --> 00:19:05,369
approaches this is really important this

00:19:03,359 --> 00:19:06,889
is not a competition this is a team

00:19:05,369 --> 00:19:09,869
effort

00:19:06,889 --> 00:19:13,049
but while taking small victories before

00:19:09,869 --> 00:19:17,220
finding the leak first add more

00:19:13,049 --> 00:19:19,289
important morale while going through

00:19:17,220 --> 00:19:21,960
this process even if it's just a few

00:19:19,289 --> 00:19:25,799
days they will be a really intensive

00:19:21,960 --> 00:19:29,389
days that will take on your morale but

00:19:25,799 --> 00:19:32,909
why this small victories affect them and

00:19:29,389 --> 00:19:36,179
lift your morale well it decreases the

00:19:32,909 --> 00:19:38,070
pressure if you consume less memory you

00:19:36,179 --> 00:19:40,729
need to restart the server less and you

00:19:38,070 --> 00:19:46,220
get less pressure from from the external

00:19:40,729 --> 00:19:49,229
services also it improves your codebase

00:19:46,220 --> 00:19:52,950
less memory consumption snap your apps

00:19:49,229 --> 00:19:55,099
and less memory consumption you need to

00:19:52,950 --> 00:19:57,960
expect less memory to find a leak and

00:19:55,099 --> 00:20:00,599
that's nice that affects morale as well

00:19:57,960 --> 00:20:03,779
if you need to spec play inspect less

00:20:00,599 --> 00:20:05,040
memory it's easier to find it at least

00:20:03,779 --> 00:20:07,980
in theory

00:20:05,040 --> 00:20:11,370
but please don't take we pick Therese up

00:20:07,980 --> 00:20:14,340
to any price some some improvements

00:20:11,370 --> 00:20:16,980
improvements are not worth it think that

00:20:14,340 --> 00:20:18,510
you might make a change that will need

00:20:16,980 --> 00:20:21,120
to be taken into account for the

00:20:18,510 --> 00:20:24,240
foreseeable future every time you do

00:20:21,120 --> 00:20:26,820
something those changes need to be easy

00:20:24,240 --> 00:20:31,460
to drop in case you want to drop them

00:20:26,820 --> 00:20:35,310
and doesn't need to be hard to maintain

00:20:31,460 --> 00:20:37,410
for example one of the small victory we

00:20:35,310 --> 00:20:41,160
took is that we were using presenters in

00:20:37,410 --> 00:20:42,930
in our team plates and we stopped

00:20:41,160 --> 00:20:45,450
cutting those presenters in fast-food

00:20:42,930 --> 00:20:47,850
land there was four five lines of code

00:20:45,450 --> 00:20:51,720
for that and they were easy to remove in

00:20:47,850 --> 00:20:56,750
case we wanted to and that removed the

00:20:51,720 --> 00:21:01,920
memory consumption by 30% that's nice

00:20:56,750 --> 00:21:04,710
but four days later we were still in the

00:21:01,920 --> 00:21:07,590
same point we were consuming much less

00:21:04,710 --> 00:21:11,220
memory almost half of it that's nice of

00:21:07,590 --> 00:21:15,060
course but we were still leaking like 40

00:21:11,220 --> 00:21:19,230
50 percent of our original memory what

00:21:15,060 --> 00:21:23,060
can we do now this is hard to describe

00:21:19,230 --> 00:21:23,060
because we were out of options

00:21:23,480 --> 00:21:32,730
okay then we thought this is basically

00:21:27,660 --> 00:21:34,230
the request in an Berlin request if

00:21:32,730 --> 00:21:37,200
you're not familiar with this in fact

00:21:34,230 --> 00:21:38,970
tool and Jesus kept our request it goes

00:21:37,200 --> 00:21:42,570
through several middle words because

00:21:38,970 --> 00:21:45,480
childhood is basically an express middle

00:21:42,570 --> 00:21:47,250
war then hits fast food fast food goes

00:21:45,480 --> 00:21:49,770
to the router the router creates the

00:21:47,250 --> 00:21:53,520
routes the routes lost the data from

00:21:49,770 --> 00:21:56,460
data store then the eating solace is the

00:21:53,520 --> 00:21:58,110
controller and the controller Wenders

00:21:56,460 --> 00:22:00,690
the template that uses several

00:21:58,110 --> 00:22:04,020
components to be render this is defied

00:22:00,690 --> 00:22:07,440
version and brilliant accurate but I

00:22:04,020 --> 00:22:09,720
think it's useful for for our purpose so

00:22:07,440 --> 00:22:12,000
the first thing we did indeed and we did

00:22:09,720 --> 00:22:15,270
this early like the first day or the

00:22:12,000 --> 00:22:17,280
second one is to check if it's something

00:22:15,270 --> 00:22:18,590
in our other middle words because we

00:22:17,280 --> 00:22:21,419
were it's in several of them

00:22:18,590 --> 00:22:25,109
what we did is substitute fast-food with

00:22:21,419 --> 00:22:27,450
a static response and the leak was long

00:22:25,109 --> 00:22:31,529
so that means that it's actually in our

00:22:27,450 --> 00:22:33,450
air application after that what we

00:22:31,529 --> 00:22:35,730
thought was the weakest point we can

00:22:33,450 --> 00:22:39,989
attack and easily change for a static

00:22:35,730 --> 00:22:43,590
response that's simple

00:22:39,989 --> 00:22:47,129
the template what we would do is we

00:22:43,590 --> 00:22:51,690
would remove that in plate and just use

00:22:47,129 --> 00:22:55,080
a static HTML receipt from the server we

00:22:51,690 --> 00:22:57,539
did this the league was still there

00:22:55,080 --> 00:22:59,460
that means the league was not in our

00:22:57,539 --> 00:23:05,190
templates or any of the components below

00:22:59,460 --> 00:23:08,730
it next place we would replace the model

00:23:05,190 --> 00:23:12,330
in the route and we would return a plain

00:23:08,730 --> 00:23:17,299
old JavaScript object we did that and

00:23:12,330 --> 00:23:22,489
bingo Tammy Malik was gone so we mean

00:23:17,299 --> 00:23:25,499
the problem was in the store we had

00:23:22,489 --> 00:23:29,129
really really kill some store adapter

00:23:25,499 --> 00:23:31,769
oxidizers so that was bad news the good

00:23:29,129 --> 00:23:33,840
news is that we were using those

00:23:31,769 --> 00:23:38,940
customized adapters and sterilizers for

00:23:33,840 --> 00:23:44,730
really long so we were fairly confident

00:23:38,940 --> 00:23:48,389
on on not being there our our memory

00:23:44,730 --> 00:23:51,570
leak what we did is at this point in

00:23:48,389 --> 00:23:54,600
time we spent a couple of days replacing

00:23:51,570 --> 00:23:57,059
parts of my data and our adapters for

00:23:54,600 --> 00:23:58,710
static responses this is not as simple

00:23:57,059 --> 00:24:00,840
as it sounds because depending on the

00:23:58,710 --> 00:24:04,440
point we might need to tweak different

00:24:00,840 --> 00:24:09,059
things but after a couple of days we

00:24:04,440 --> 00:24:14,220
found the problem was in our adapter do

00:24:09,059 --> 00:24:19,590
you want to see the problem Dell League

00:24:14,220 --> 00:24:22,220
was here we have ended up in our adapter

00:24:19,590 --> 00:24:25,710
we have completed property for headers

00:24:22,220 --> 00:24:28,489
this is using the they all syntax

00:24:25,710 --> 00:24:30,990
because this happened almost a year ago

00:24:28,489 --> 00:24:32,279
and

00:24:30,990 --> 00:24:35,340
these sellers will return in an

00:24:32,279 --> 00:24:38,850
authorization with token injected from

00:24:35,340 --> 00:24:41,059
one album do you want to see the fix

00:24:38,850 --> 00:24:48,840
because this is going to be really nice

00:24:41,059 --> 00:24:55,409
the fix was this one headers was just

00:24:48,840 --> 00:24:57,330
get er but why was that happening we

00:24:55,409 --> 00:24:58,860
suspect that something was happening in

00:24:57,330 --> 00:24:59,880
the request because they all the

00:24:58,860 --> 00:25:04,289
properties in the requests are being

00:24:59,880 --> 00:25:10,350
like lacy like completed at the last

00:25:04,289 --> 00:25:12,210
moment and I we think that's a

00:25:10,350 --> 00:25:14,760
combination of that and how the body in

00:25:12,210 --> 00:25:15,450
the burger was injected but we don't

00:25:14,760 --> 00:25:18,929
really know

00:25:15,450 --> 00:25:24,899
so my last by Ford blasted pies for

00:25:18,929 --> 00:25:28,340
these would be let go if it's hard to

00:25:24,899 --> 00:25:30,990
reproduce you won't be able to send a

00:25:28,340 --> 00:25:34,409
reproduction to the amber team so they

00:25:30,990 --> 00:25:36,750
can find out and maybe it's over your

00:25:34,409 --> 00:25:38,850
level of knowledge maybe it's over any

00:25:36,750 --> 00:25:41,250
of your team's level of knowledge and

00:25:38,850 --> 00:25:45,590
you cannot really find it you can spend

00:25:41,250 --> 00:25:48,450
some time on it but don't sweat over it

00:25:45,590 --> 00:25:51,659
thank you all for attending my talk on

00:25:48,450 --> 00:25:53,029
this remote version of amber comp it's

00:25:51,659 --> 00:25:56,250
in a pleasure talking to you

00:25:53,029 --> 00:25:58,080
at least literally if you have any

00:25:56,250 --> 00:26:00,330
question I don't know if there will be

00:25:58,080 --> 00:26:02,279
any system in place for doing that life

00:26:00,330 --> 00:26:06,620
but you can reach me on twitter at

00:26:02,279 --> 00:26:06,620

YouTube URL: https://www.youtube.com/watch?v=NradLNmO9ec


