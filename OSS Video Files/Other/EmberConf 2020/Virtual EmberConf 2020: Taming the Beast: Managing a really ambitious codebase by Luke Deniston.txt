Title: Virtual EmberConf 2020: Taming the Beast: Managing a really ambitious codebase by Luke Deniston
Publication date: 2020-03-26
Playlist: EmberConf 2020
Description: 
	Taming the Beast: Managing a really ambitious codebase by Luke Deniston

What do you do when your codebase gets too big?

Ember is perfect for “ambitious applications”. But what about really ambitious applications? Apps with hundreds of thousands of lines of code, teams that span countries, and users all over the world? Or apps in high liability environments where regressions from upgrades could cost millions of dollars or even put people in danger?

Recent advances in two tools present an opportunity to structure a project that is easy to work in and upgrade, but without the pain points of past solutions. Those tools are Ember Engines, and Yarn workspaces.
Captions: 
	00:00:01,270 --> 00:00:24,039
[Music]

00:00:20,490 --> 00:00:25,390
hello amber I'm Luke denistoun I'm

00:00:24,039 --> 00:00:27,610
really happy to be here

00:00:25,390 --> 00:00:29,710
I'm gonna talk to you a little bit about

00:00:27,610 --> 00:00:31,330
taming the Beast so these are gonna be

00:00:29,710 --> 00:00:33,879
strategies for managing a really

00:00:31,330 --> 00:00:37,059
ambitious codebase just a little bit

00:00:33,879 --> 00:00:39,940
about myself I've got four children

00:00:37,059 --> 00:00:43,540
I love playing rock and roll it doesn't

00:00:39,940 --> 00:00:45,160
matter what style this is a picture when

00:00:43,540 --> 00:00:48,160
I used to play in a rockabilly band with

00:00:45,160 --> 00:00:49,420
my wife and just in case I'm giving you

00:00:48,160 --> 00:00:51,280
a false impression that I'm a cool guy

00:00:49,420 --> 00:00:53,409
or something I really love magically

00:00:51,280 --> 00:00:55,030
gathering and for the past nine years

00:00:53,409 --> 00:00:57,670
I've been working for a company called

00:00:55,030 --> 00:00:59,049
Agron and I'll explain what we do at a

00:00:57,670 --> 00:01:01,960
green a little bit later but first I

00:00:59,049 --> 00:01:03,850
want to introduce you to our topic so I

00:01:01,960 --> 00:01:07,420
named this taming the Beast what do I

00:01:03,850 --> 00:01:09,430
mean by taming the Beast I think we all

00:01:07,420 --> 00:01:12,280
can relate to this we know this feeling

00:01:09,430 --> 00:01:14,799
where we have the opportunity to do some

00:01:12,280 --> 00:01:16,450
greenfield development and we tell

00:01:14,799 --> 00:01:17,920
ourselves that this time it's gonna be

00:01:16,450 --> 00:01:19,710
different we're not going to make the

00:01:17,920 --> 00:01:23,380
mistakes that we used to make and

00:01:19,710 --> 00:01:25,479
inevitably things happen and it's hard

00:01:23,380 --> 00:01:28,780
to say why that happens but we all know

00:01:25,479 --> 00:01:31,630
what this is so the beast that needs

00:01:28,780 --> 00:01:33,810
taming is complexity complexity creeps

00:01:31,630 --> 00:01:36,460
into every successful software project

00:01:33,810 --> 00:01:40,329
where growth happens complexity creeps

00:01:36,460 --> 00:01:42,429
in so most successful progress most

00:01:40,329 --> 00:01:44,770
successful software projects grow and as

00:01:42,429 --> 00:01:46,450
systems grow by definition the number of

00:01:44,770 --> 00:01:47,799
entities in those systems increase in

00:01:46,450 --> 00:01:49,749
the interactions between those entities

00:01:47,799 --> 00:01:51,759
increase almost exponentially and

00:01:49,749 --> 00:01:53,740
eventually you get to the point where it

00:01:51,759 --> 00:01:56,140
becomes impossible to understand all of

00:01:53,740 --> 00:01:58,780
these interactions so what you're

00:01:56,140 --> 00:02:01,600
looking at right now is a video of all

00:01:58,780 --> 00:02:03,700
of the dependencies of NPM itself

00:02:01,600 --> 00:02:05,319
if you've ever peeked inside your node

00:02:03,700 --> 00:02:08,649
modules folder you know what I'm talking

00:02:05,319 --> 00:02:10,660
about and this is not a new topic right

00:02:08,649 --> 00:02:13,150
this is a quote back from the 70s from

00:02:10,660 --> 00:02:15,819
deep stress he basically pointed out

00:02:13,150 --> 00:02:17,860
that no one's skull can contain a whole

00:02:15,819 --> 00:02:20,230
program at once so we need to try to

00:02:17,860 --> 00:02:22,540
organize our programs in such a way that

00:02:20,230 --> 00:02:26,770
we can safely focus on one part at a

00:02:22,540 --> 00:02:28,200
time when software projects fail it's

00:02:26,770 --> 00:02:30,510
not usually for technical

00:02:28,200 --> 00:02:32,550
it's usually because of poor

00:02:30,510 --> 00:02:35,580
requirements or poor planning poor

00:02:32,550 --> 00:02:37,290
management but when projects do fail for

00:02:35,580 --> 00:02:40,970
reasons that are technical the reason

00:02:37,290 --> 00:02:43,500
given is usually uncontrolled complexity

00:02:40,970 --> 00:02:46,080
the work that we do is just inherently

00:02:43,500 --> 00:02:48,599
complex right when we write code we're

00:02:46,080 --> 00:02:52,260
telling a story but that story has two

00:02:48,599 --> 00:02:54,900
different audiences your code needs to

00:02:52,260 --> 00:02:56,610
be understood by developers who

00:02:54,900 --> 00:02:58,739
sometimes look like this and sometimes

00:02:56,610 --> 00:03:02,160
look like this but it also needs to be

00:02:58,739 --> 00:03:04,470
understood by the computer and computers

00:03:02,160 --> 00:03:06,989
and developers hopefully think very

00:03:04,470 --> 00:03:08,730
differently about things we can also

00:03:06,989 --> 00:03:12,230
become blind to the complexity in our

00:03:08,730 --> 00:03:16,049
projects right the first time that we

00:03:12,230 --> 00:03:18,540
tackle a complex part of our software we

00:03:16,049 --> 00:03:20,370
kind of do the work of untangling it and

00:03:18,540 --> 00:03:22,500
following the threads and then we we

00:03:20,370 --> 00:03:26,940
kind of mentally memorize that right we

00:03:22,500 --> 00:03:31,049
cache the result of the work we weave we

00:03:26,940 --> 00:03:32,760
cashed that understanding so over the

00:03:31,049 --> 00:03:36,299
past years so I've had the opportunity

00:03:32,760 --> 00:03:38,130
to mentor a junior engineer he's a

00:03:36,299 --> 00:03:39,329
really really smart guy I try to be nice

00:03:38,130 --> 00:03:41,030
to him because I'm pretty sure he's

00:03:39,329 --> 00:03:44,400
gonna be my boss in a couple of years

00:03:41,030 --> 00:03:47,430
and in this process I've learned just

00:03:44,400 --> 00:03:49,049
about as much as he has he was the one

00:03:47,430 --> 00:03:52,160
who actually convinced me to give up my

00:03:49,049 --> 00:03:55,370
beloved Adam IDE and switch to BS code

00:03:52,160 --> 00:03:57,540
but it's been great looking at our

00:03:55,370 --> 00:04:00,780
projects through the lens of his

00:03:57,540 --> 00:04:02,819
experiences those things that are simple

00:04:00,780 --> 00:04:05,489
to me because I've been doing it for

00:04:02,819 --> 00:04:07,889
maybe five or ten years he might really

00:04:05,489 --> 00:04:11,010
struggle with so if you're wondering

00:04:07,889 --> 00:04:14,760
where complexity is my advice to you is

00:04:11,010 --> 00:04:16,680
just ask the new guy and complexity is

00:04:14,760 --> 00:04:18,690
inevitable right it creeps into every

00:04:16,680 --> 00:04:24,630
successful software project where growth

00:04:18,690 --> 00:04:26,490
happens complexity creeps in strategies

00:04:24,630 --> 00:04:29,070
for dealing with complexity mostly fall

00:04:26,490 --> 00:04:31,349
into two different groups avoiding

00:04:29,070 --> 00:04:34,669
specifics about discussions about global

00:04:31,349 --> 00:04:37,320
state or syntax inheritance languages

00:04:34,669 --> 00:04:39,200
there's there's basically two ways of

00:04:37,320 --> 00:04:42,650
doing it one is you can

00:04:39,200 --> 00:04:45,160
strapped it away where you provide a

00:04:42,650 --> 00:04:47,510
simpler API for engineers to work with

00:04:45,160 --> 00:04:49,370
ember itself can almost be thought of as

00:04:47,510 --> 00:04:51,380
an abstraction because we don't worry

00:04:49,370 --> 00:04:53,360
about data binding or dawn-marie

00:04:51,380 --> 00:04:56,870
rendering and bruh takes care of that

00:04:53,360 --> 00:04:59,630
for us the other strategy is subdividing

00:04:56,870 --> 00:05:01,580
so subdividing a system into subsystems

00:04:59,630 --> 00:05:03,140
so your brain can just focus on a

00:05:01,580 --> 00:05:06,860
smaller section of the system at a time

00:05:03,140 --> 00:05:10,220
and those systems those sections can be

00:05:06,860 --> 00:05:11,810
tested and deployed in isolation this

00:05:10,220 --> 00:05:13,850
doesn't reduce the complexity of the

00:05:11,810 --> 00:05:15,440
system but it does reduce the complexity

00:05:13,850 --> 00:05:17,870
of the piece that has been divided out

00:05:15,440 --> 00:05:21,770
so today I'm going to talk about one

00:05:17,870 --> 00:05:23,240
specific approach to subdividing so like

00:05:21,770 --> 00:05:25,640
I said I've been an Agron for nine years

00:05:23,240 --> 00:05:30,260
the bulk of that time I've been leaving

00:05:25,640 --> 00:05:31,970
our sort of front-end web team and I'm

00:05:30,260 --> 00:05:33,710
gonna give you a little sneak peek about

00:05:31,970 --> 00:05:35,540
who we are and what we do so that you

00:05:33,710 --> 00:05:38,210
have an understanding of the Sun some of

00:05:35,540 --> 00:05:39,710
the challenges that we face so these are

00:05:38,210 --> 00:05:42,230
some slides I got from our marketing

00:05:39,710 --> 00:05:45,080
department we've got more than 25,000

00:05:42,230 --> 00:05:46,790
growers in our system more than 10,000

00:05:45,080 --> 00:05:49,370
and rodimus use our system so an

00:05:46,790 --> 00:05:51,380
agronomist would be you get to give them

00:05:49,370 --> 00:05:53,510
as a crop doctor they conduct

00:05:51,380 --> 00:05:56,360
experiments like analyzing tissue

00:05:53,510 --> 00:05:57,800
samples or soil samples and then based

00:05:56,360 --> 00:06:00,140
on those experiments they work with the

00:05:57,800 --> 00:06:02,720
actual farmers to get a plan for growing

00:06:00,140 --> 00:06:04,340
the best possible crops these are

00:06:02,720 --> 00:06:06,440
something that AG retailers that we work

00:06:04,340 --> 00:06:09,890
with may be not household names here at

00:06:06,440 --> 00:06:11,540
ember calm but Simplot is one of the

00:06:09,890 --> 00:06:13,580
largest privately owned companies in the

00:06:11,540 --> 00:06:16,580
world nutrient is a thirty four billion

00:06:13,580 --> 00:06:18,740
dollar company CHS is a fortune 100

00:06:16,580 --> 00:06:20,420
company there's some of the food

00:06:18,740 --> 00:06:23,750
companies who work but hopefully you

00:06:20,420 --> 00:06:25,430
recognize some of these names in fact if

00:06:23,750 --> 00:06:27,320
you ate any produce today if you had a

00:06:25,430 --> 00:06:29,210
salad or anything like that there's a

00:06:27,320 --> 00:06:31,130
really good chance that some or all of

00:06:29,210 --> 00:06:34,700
that food was trapped in our systems

00:06:31,130 --> 00:06:36,920
Agron and we have a whole suite of tools

00:06:34,700 --> 00:06:38,930
I'm not going to talk about all of them

00:06:36,920 --> 00:06:40,820
but I'm going to talk about two specific

00:06:38,930 --> 00:06:42,740
features that we have just to kind of

00:06:40,820 --> 00:06:44,930
give you an idea of what we do so we

00:06:42,740 --> 00:06:47,600
have this zone creation tool that's

00:06:44,930 --> 00:06:50,690
where we take a source so in this

00:06:47,600 --> 00:06:53,600
it's a satellite image what you're

00:06:50,690 --> 00:06:55,520
looking at is the vegetation density

00:06:53,600 --> 00:06:58,370
that we figure out by taking

00:06:55,520 --> 00:06:59,900
measurements in the red and

00:06:58,370 --> 00:07:03,650
near-infrared zones it's something

00:06:59,900 --> 00:07:05,600
called that NDVI in this example this is

00:07:03,650 --> 00:07:07,850
a harvest event so those big combine

00:07:05,600 --> 00:07:09,500
harvesters to drive over the field they

00:07:07,850 --> 00:07:11,390
have multiple sensors on them taking

00:07:09,500 --> 00:07:14,690
samples sometimes more than 60 times a

00:07:11,390 --> 00:07:16,400
second this example I think is we're

00:07:14,690 --> 00:07:19,370
looking at the yield so it's the actual

00:07:16,400 --> 00:07:21,920
rate at which crops came out of the

00:07:19,370 --> 00:07:24,400
ground then you take that source you

00:07:21,920 --> 00:07:27,440
plug it into our zone creation tool and

00:07:24,400 --> 00:07:29,000
we we split it up into zones based on

00:07:27,440 --> 00:07:31,640
where you want the break points to be

00:07:29,000 --> 00:07:33,410
how many zones you want and then you can

00:07:31,640 --> 00:07:35,870
take that and then you can attach

00:07:33,410 --> 00:07:38,030
arbitrary data to it so in this example

00:07:35,870 --> 00:07:40,130
we're attaching a spray rate to the

00:07:38,030 --> 00:07:43,670
generated zones then you take those

00:07:40,130 --> 00:07:46,010
zones you can upload it to your GPS

00:07:43,670 --> 00:07:48,050
enabled sprayer and then as that sprayer

00:07:46,010 --> 00:07:49,730
drives over the field and knows what

00:07:48,050 --> 00:07:52,220
zone it's over and adjusts the spray

00:07:49,730 --> 00:07:54,110
rate accordingly this is great for our

00:07:52,220 --> 00:07:56,330
growers bottom line because they're only

00:07:54,110 --> 00:07:57,650
using what they need but it's also great

00:07:56,330 --> 00:08:01,460
for the environment because we're

00:07:57,650 --> 00:08:03,230
eliminating waste I'm going to talk a

00:08:01,460 --> 00:08:05,960
little bit about our compliance or

00:08:03,230 --> 00:08:08,300
prescription creation tool I'm gonna try

00:08:05,960 --> 00:08:10,190
to simplify a really complex subject so

00:08:08,300 --> 00:08:11,840
I'm sorry if you're knowledgeable on and

00:08:10,190 --> 00:08:15,320
I'm gonna leave out a lot of important

00:08:11,840 --> 00:08:17,450
details but basically the legality of

00:08:15,320 --> 00:08:19,520
pesticides or herbicides can change

00:08:17,450 --> 00:08:21,920
based on what state you're in what crop

00:08:19,520 --> 00:08:24,530
you're growing what pests you're

00:08:21,920 --> 00:08:27,080
treating the history of applications at

00:08:24,530 --> 00:08:28,880
that field and other factors and the

00:08:27,080 --> 00:08:31,280
rate at which you can use that pesticide

00:08:28,880 --> 00:08:34,070
herbicide changes based on the same kind

00:08:31,280 --> 00:08:35,990
of factors this is all of that

00:08:34,070 --> 00:08:38,690
information is in what's called the

00:08:35,990 --> 00:08:40,729
product label this is when I pulled off

00:08:38,690 --> 00:08:42,919
the EPA's website and this might be for

00:08:40,729 --> 00:08:45,860
roundup if you look closely this is page

00:08:42,919 --> 00:08:48,730
42 out of 138 there's a lot of

00:08:45,860 --> 00:08:50,930
information there in addition to

00:08:48,730 --> 00:08:54,320
legality and rate information there's

00:08:50,930 --> 00:08:55,889
also associated safety information so

00:08:54,320 --> 00:08:58,139
what's called the re-entry interval

00:08:55,889 --> 00:09:01,769
which is how soon after applying this

00:08:58,139 --> 00:09:03,059
product is it safe to reenter field so

00:09:01,769 --> 00:09:05,100
we have a tool that lets you specify

00:09:03,059 --> 00:09:06,779
some of the details like the location a

00:09:05,100 --> 00:09:08,579
reason for treatment and will tell you

00:09:06,779 --> 00:09:10,829
what pesticides you can use and what

00:09:08,579 --> 00:09:13,379
rate you can apply the map and then we

00:09:10,829 --> 00:09:15,660
we file the paperwork for you so all

00:09:13,379 --> 00:09:17,970
different counties have different

00:09:15,660 --> 00:09:20,910
methods that in different forms that

00:09:17,970 --> 00:09:25,769
need to be filled out so we'll email

00:09:20,910 --> 00:09:28,889
them or get a file via API or we even do

00:09:25,769 --> 00:09:30,689
faxing so as you can imagine it's

00:09:28,889 --> 00:09:32,790
vitally important that the software be

00:09:30,689 --> 00:09:34,319
correct right mistakes could mean

00:09:32,790 --> 00:09:39,989
millions of dollars in lost project

00:09:34,319 --> 00:09:41,220
product or even injury or death so I'm

00:09:39,989 --> 00:09:42,389
not here to talk about a greener

00:09:41,220 --> 00:09:45,720
agriculture I'm here to talk about

00:09:42,389 --> 00:09:47,790
managing a really ambitious codebase so

00:09:45,720 --> 00:09:49,970
I think it'd be helpful to show where we

00:09:47,790 --> 00:09:53,819
came from in terms of our architecture

00:09:49,970 --> 00:09:55,589
so version one is sort of our current

00:09:53,819 --> 00:09:58,079
generation tech stack it started out

00:09:55,589 --> 00:10:00,239
with sort of a micro service

00:09:58,079 --> 00:10:03,720
architecture backends mostly written in

00:10:00,239 --> 00:10:07,290
rails and a single monolithic front-end

00:10:03,720 --> 00:10:10,619
ember app it was served by the rails

00:10:07,290 --> 00:10:12,720
asset pipeline stitched together 300,000

00:10:10,619 --> 00:10:16,709
lines at mostly CoffeeScript there's

00:10:12,720 --> 00:10:20,759
over 13,000 commits in that repo and

00:10:16,709 --> 00:10:23,100
while I got us started it was great but

00:10:20,759 --> 00:10:26,009
over time we just were experiencing

00:10:23,100 --> 00:10:29,040
epically slow builds even slower deploys

00:10:26,009 --> 00:10:31,889
we had endless regressions with every

00:10:29,040 --> 00:10:33,550
upgrade so we we've upgrade something in

00:10:31,889 --> 00:10:35,019
one part of a system and then

00:10:33,550 --> 00:10:37,779
another part of the system would end up

00:10:35,019 --> 00:10:41,769
breaking we actually were never able to

00:10:37,779 --> 00:10:43,860
upgrade it past ember 1.11 we also had

00:10:41,769 --> 00:10:45,640
issues with teams across time zones

00:10:43,860 --> 00:10:46,959
re-implementing the same thing in

00:10:45,640 --> 00:10:49,480
different ways because it wasn't always

00:10:46,959 --> 00:10:53,410
clear what code was features specific

00:10:49,480 --> 00:10:55,180
what was meant for reuse and while I was

00:10:53,410 --> 00:10:56,620
working on this app every day this is

00:10:55,180 --> 00:10:58,570
one of the few times where I really

00:10:56,620 --> 00:11:00,040
thought you know maybe I don't want to

00:10:58,570 --> 00:11:02,140
be a web developer maybe I want to go

00:11:00,040 --> 00:11:05,589
back to iOS development or go like paint

00:11:02,140 --> 00:11:09,070
houses or something but luckily we moved

00:11:05,589 --> 00:11:11,110
on from there so this is version 2 where

00:11:09,070 --> 00:11:14,589
we had these sort of micro service front

00:11:11,110 --> 00:11:17,589
ends that mirrored the Microsoft's

00:11:14,589 --> 00:11:19,779
backends we had an add-on that had the

00:11:17,589 --> 00:11:23,560
shared code for styles and business

00:11:19,779 --> 00:11:25,120
logic and this fixed a lot of problems

00:11:23,560 --> 00:11:28,180
we had really quick builds really quick

00:11:25,120 --> 00:11:29,800
deploys I was easy to see what was meant

00:11:28,180 --> 00:11:31,990
for reuse because anything in that

00:11:29,800 --> 00:11:33,880
shared add-on you know was what we

00:11:31,990 --> 00:11:36,430
should be reusing across all of our

00:11:33,880 --> 00:11:37,899
applications those kind of bad for our

00:11:36,430 --> 00:11:40,120
customers it was a little bit of a

00:11:37,899 --> 00:11:42,250
jarring experience where you go from one

00:11:40,120 --> 00:11:44,500
feature to another and there'd be a

00:11:42,250 --> 00:11:47,320
whole page refresh as a new ember app

00:11:44,500 --> 00:11:49,690
that is downloaded and booted so we

00:11:47,320 --> 00:11:52,300
briefly experimented with using in repo

00:11:49,690 --> 00:11:54,760
engines to break things up but that was

00:11:52,300 --> 00:11:56,680
sort of a bad developer ergonomics where

00:11:54,760 --> 00:11:58,600
it wasn't always clear where the lines

00:11:56,680 --> 00:12:00,430
were between the host application and

00:11:58,600 --> 00:12:02,290
the engine especially with things like

00:12:00,430 --> 00:12:08,579
dependencies and where your tests were

00:12:02,290 --> 00:12:08,579
located but then we hit upon

00:12:10,720 --> 00:12:17,260
so we then we moved to this so Version

00:12:13,390 --> 00:12:21,399
three where those applications they

00:12:17,260 --> 00:12:23,079
became engines this was a lot better for

00:12:21,399 --> 00:12:25,089
customers the experience quick

00:12:23,079 --> 00:12:27,130
transitions between features it was a

00:12:25,089 --> 00:12:31,269
quick time to first paint because those

00:12:27,130 --> 00:12:32,940
engines were worth lazily loaded it was

00:12:31,269 --> 00:12:35,890
kind of bad for developers because

00:12:32,940 --> 00:12:39,279
fixing a bug and the shared add-on meant

00:12:35,890 --> 00:12:42,370
you know four or five six pull requests

00:12:39,279 --> 00:12:45,110
where you first you fix the bug in the

00:12:42,370 --> 00:12:46,610
add-on you bump the version add-on

00:12:45,110 --> 00:12:49,550
to the engines then you bumped the

00:12:46,610 --> 00:12:54,459
engine version in the host app so that

00:12:49,550 --> 00:12:57,320
was kind of a pain then we hit upon the

00:12:54,459 --> 00:12:58,970
current architecture that's just an

00:12:57,320 --> 00:13:00,740
awesome experience it's great for

00:12:58,970 --> 00:13:03,709
customers it's a great experience for

00:13:00,740 --> 00:13:07,490
developers it's sort of the best of both

00:13:03,709 --> 00:13:10,880
worlds and that is using yarn workspaces

00:13:07,490 --> 00:13:13,790
with ember engines so let me just

00:13:10,880 --> 00:13:15,380
introduce some of these concepts you've

00:13:13,790 --> 00:13:16,970
probably heard of yarn already I'm not

00:13:15,380 --> 00:13:19,970
gonna spend a lot of time explaining it

00:13:16,970 --> 00:13:21,500
but if you haven't it was developed by

00:13:19,970 --> 00:13:23,480
Facebook to overcome some of the

00:13:21,500 --> 00:13:25,399
shortcomings of NPM specifically

00:13:23,480 --> 00:13:27,740
problems with deterministic builds and

00:13:25,399 --> 00:13:30,230
performance but importantly it's

00:13:27,740 --> 00:13:32,329
independent from Facebook it's governed

00:13:30,230 --> 00:13:36,200
by an RFC policy similar to ember and

00:13:32,329 --> 00:13:38,300
rust if you are you know dead so using

00:13:36,200 --> 00:13:40,550
NPM NPM has really covered a lot of

00:13:38,300 --> 00:13:42,829
ground and in the time since yarn was

00:13:40,550 --> 00:13:44,630
introduced I'm not going to talk about

00:13:42,829 --> 00:13:46,310
it but there are approaches using NPM

00:13:44,630 --> 00:13:47,720
leveraging tools like lerna where you

00:13:46,310 --> 00:13:49,850
can get some of the benefits of what I'm

00:13:47,720 --> 00:13:51,769
talking about and it's also worth noting

00:13:49,850 --> 00:13:53,360
that yarn too is a complete rewrite it

00:13:51,769 --> 00:13:54,890
seemed to make a lot of people angry I

00:13:53,360 --> 00:13:57,170
couldn't really determine if that was

00:13:54,890 --> 00:13:59,269
real anger or just internet anger

00:13:57,170 --> 00:14:01,190
because there's a lot of internet anger

00:13:59,269 --> 00:14:03,709
that doesn't really equate to like real

00:14:01,190 --> 00:14:05,690
actual anger but most of the issues seem

00:14:03,709 --> 00:14:07,610
to be that yarn two is not compatible

00:14:05,690 --> 00:14:10,670
with some of the more popular packages

00:14:07,610 --> 00:14:13,010
out there you're on to you also right

00:14:10,670 --> 00:14:14,750
constraints in prologue which is either

00:14:13,010 --> 00:14:16,899
great or terrible depending on who you

00:14:14,750 --> 00:14:20,420
ask and what time of day it is

00:14:16,899 --> 00:14:22,279
workspaces a really simple concept it's

00:14:20,420 --> 00:14:24,970
you can have one repository and many

00:14:22,279 --> 00:14:29,209
packages inside that that repository

00:14:24,970 --> 00:14:31,339
those packages can import each other and

00:14:29,209 --> 00:14:33,320
so if you've ever used NPM link it's

00:14:31,339 --> 00:14:35,589
kind of a similar concept but in this

00:14:33,320 --> 00:14:39,260
case it you know it actually works

00:14:35,589 --> 00:14:41,600
emperor engines so engines are a

00:14:39,260 --> 00:14:43,880
specific type of ember add-on that

00:14:41,600 --> 00:14:45,290
they're almost like a mini application

00:14:43,880 --> 00:14:47,779
where they contain their own container

00:14:45,290 --> 00:14:50,410
and registry and namespace but they're

00:14:47,779 --> 00:14:53,089
built and booted by the host application

00:14:50,410 --> 00:14:55,130
they come in two flavors routable or

00:14:53,089 --> 00:14:58,040
route lists they can

00:14:55,130 --> 00:15:00,140
optionally be lazy loaded and they offer

00:14:58,040 --> 00:15:02,690
great code isolation so we're never

00:15:00,140 --> 00:15:04,430
worried about working on when engine is

00:15:02,690 --> 00:15:06,980
going to break something in a different

00:15:04,430 --> 00:15:09,560
engine so this is what our architecture

00:15:06,980 --> 00:15:12,020
looks like now we have mono repo it's

00:15:09,560 --> 00:15:13,610
set up as a workspace and in the side of

00:15:12,020 --> 00:15:15,950
that workspace we have multiple packages

00:15:13,610 --> 00:15:18,080
we have our host application we have our

00:15:15,950 --> 00:15:21,500
engines we still have our shared add-on

00:15:18,080 --> 00:15:26,300
for those styles and and business rules

00:15:21,500 --> 00:15:28,220
that need to go across apps and it's

00:15:26,300 --> 00:15:29,840
great we can boot the host app and work

00:15:28,220 --> 00:15:32,420
on the whole system or we can work on

00:15:29,840 --> 00:15:34,340
just an engine in isolation and I love

00:15:32,420 --> 00:15:36,800
what this layout communicates about this

00:15:34,340 --> 00:15:39,620
code where the physical layout of the

00:15:36,800 --> 00:15:41,660
files kind of tells a story to both

00:15:39,620 --> 00:15:43,580
developers and to the browser so if I

00:15:41,660 --> 00:15:45,650
tell a developer and I need you to work

00:15:43,580 --> 00:15:47,630
on this feature he knows that the code

00:15:45,650 --> 00:15:50,150
for that feature is inside the specific

00:15:47,630 --> 00:15:51,860
engine and the engine add-on kind of

00:15:50,150 --> 00:15:53,870
tells the browser that when we navigate

00:15:51,860 --> 00:15:56,840
to that feature here's the code that you

00:15:53,870 --> 00:15:59,690
need to download include communication

00:15:56,840 --> 00:16:02,660
is really important I was hanging out

00:15:59,690 --> 00:16:04,520
with my aunt over the holidays and she

00:16:02,660 --> 00:16:07,580
told me a story about communication that

00:16:04,520 --> 00:16:09,230
I think I'll never forget she's a really

00:16:07,580 --> 00:16:11,930
sweet lady but she's not particularly

00:16:09,230 --> 00:16:14,210
tech savvy and she was under the

00:16:11,930 --> 00:16:17,570
impression that the acronym lol meant

00:16:14,210 --> 00:16:19,370
lots of love so when one of her friends

00:16:17,570 --> 00:16:22,070
sent her a message saying that one of

00:16:19,370 --> 00:16:27,920
her they had a family member passed away

00:16:22,070 --> 00:16:32,210
she responded lol and didn't know why

00:16:27,920 --> 00:16:35,120
her friends didn't get back to her for a

00:16:32,210 --> 00:16:37,580
few days so it has a happy ending they

00:16:35,120 --> 00:16:40,400
the misunderstanding was sorted out but

00:16:37,580 --> 00:16:44,090
just clear communication is incredibly

00:16:40,400 --> 00:16:47,600
important so how do you get started with

00:16:44,090 --> 00:16:49,430
workspaces it's really simple you add a

00:16:47,600 --> 00:16:51,980
package.json in your route you need to

00:16:49,430 --> 00:16:53,330
add this private is true that's kind of

00:16:51,980 --> 00:16:54,980
a safety measure to make sure that

00:16:53,330 --> 00:16:57,080
you're not accidentally publishing

00:16:54,980 --> 00:16:58,850
things that you didn't mean to you and

00:16:57,080 --> 00:17:00,520
then you have this workspaces feel

00:16:58,850 --> 00:17:02,800
that's an array containing the

00:17:00,520 --> 00:17:04,540
to each package usually you see it set

00:17:02,800 --> 00:17:06,790
up like this where you just have a glob

00:17:04,540 --> 00:17:09,580
everything in the packages folders is

00:17:06,790 --> 00:17:10,630
all your different little workspaces but

00:17:09,580 --> 00:17:13,000
if you wanted to you could iterate

00:17:10,630 --> 00:17:17,110
through each package that you wanted to

00:17:13,000 --> 00:17:18,400
include so what that gets you is if you

00:17:17,110 --> 00:17:22,530
have a setup like this so you've got

00:17:18,400 --> 00:17:25,240
package a it's listed as version 1.0 0.0

00:17:22,530 --> 00:17:28,900
and then in package beef we list that as

00:17:25,240 --> 00:17:31,180
the dependency if we reference package a

00:17:28,900 --> 00:17:34,680
that's gonna pull in your local code

00:17:31,180 --> 00:17:38,140
regardless of what's on publish to NPM

00:17:34,680 --> 00:17:40,180
it's also important to know that what's

00:17:38,140 --> 00:17:43,360
listed in the name field of your package

00:17:40,180 --> 00:17:45,100
JSON that's what the workspace uses to

00:17:43,360 --> 00:17:47,320
resolve your package so it's kind of

00:17:45,100 --> 00:17:49,000
important to have your folders be the

00:17:47,320 --> 00:17:51,010
same as the name of the name field so

00:17:49,000 --> 00:17:55,060
you don't you avoid unnecessary

00:17:51,010 --> 00:17:57,430
confusion so what happens when we start

00:17:55,060 --> 00:18:00,160
bringing in additional dependencies so

00:17:57,430 --> 00:18:05,050
in this scenario since the versions of

00:18:00,160 --> 00:18:07,180
left pad are both 1.0 0.0 yarn just

00:18:05,050 --> 00:18:08,590
installs one instance of left pad and

00:18:07,180 --> 00:18:10,870
that's installed in the root node

00:18:08,590 --> 00:18:14,700
modules but that's available to both

00:18:10,870 --> 00:18:17,830
packages but what happens if we change

00:18:14,700 --> 00:18:21,940
the requirements where package a now

00:18:17,830 --> 00:18:24,670
needs left pad 1.0 point one yarns

00:18:21,940 --> 00:18:26,860
gotcha Covered it installs left Pat 1.0

00:18:24,670 --> 00:18:31,000
point one in the local node modules to

00:18:26,860 --> 00:18:36,100
package a and leaves one point 0.02

00:18:31,000 --> 00:18:37,810
package B in the root node modules so

00:18:36,100 --> 00:18:41,050
what does our workspace look like now at

00:18:37,810 --> 00:18:42,700
Aggron we've got a few packages so we

00:18:41,050 --> 00:18:45,640
have our host app that serves up all our

00:18:42,700 --> 00:18:47,470
engines we have our engines we have a

00:18:45,640 --> 00:18:50,620
little shared files package that has

00:18:47,470 --> 00:18:54,070
shared es lint configs and TS configs

00:18:50,620 --> 00:18:55,600
and some keys and stuff like that we

00:18:54,070 --> 00:18:57,820
also have a published add-on that we

00:18:55,600 --> 00:18:59,590
published our private NPM registry and

00:18:57,820 --> 00:19:02,040
that serves as sort of a bridge to our

00:18:59,590 --> 00:19:06,790
apps that haven't been brought into

00:19:02,040 --> 00:19:07,580
workspaces yet we have the shared add-on

00:19:06,790 --> 00:19:09,770
that has the

00:19:07,580 --> 00:19:11,180
styles and business rules and I'll talk

00:19:09,770 --> 00:19:14,240
about models in just a little bit

00:19:11,180 --> 00:19:15,470
because there's a few gotchas there and

00:19:14,240 --> 00:19:18,170
then we have some add-ons that offer

00:19:15,470 --> 00:19:20,600
specific functionality so mapping is

00:19:18,170 --> 00:19:22,280
obviously really important to Agron in

00:19:20,600 --> 00:19:25,790
the agricultural field

00:19:22,280 --> 00:19:27,290
we mostly leverage open layers but we

00:19:25,790 --> 00:19:28,970
don't necessarily want open liners is a

00:19:27,290 --> 00:19:30,350
big library we don't want to include

00:19:28,970 --> 00:19:31,490
that in every engine we don't

00:19:30,350 --> 00:19:33,140
necessarily want to include it in the

00:19:31,490 --> 00:19:35,240
host app we only want to include it

00:19:33,140 --> 00:19:37,550
where it's needed so we have a little

00:19:35,240 --> 00:19:39,950
mapping tools add-on so those engines

00:19:37,550 --> 00:19:41,840
that are interested in mapping can

00:19:39,950 --> 00:19:45,550
include our mapping tools add-on and

00:19:41,840 --> 00:19:48,590
then open layers gets bundled with them

00:19:45,550 --> 00:19:50,630
member engines so if you're looking to

00:19:48,590 --> 00:19:54,290
get started Umbra engines the guide is

00:19:50,630 --> 00:19:56,300
is really excellent it's concise but it

00:19:54,290 --> 00:19:59,000
covers all the major points it's really

00:19:56,300 --> 00:20:00,740
easy to understand if you're looking to

00:19:59,000 --> 00:20:03,680
get started I recommend reading it from

00:20:00,740 --> 00:20:05,720
start to finish but I'll go ahead and

00:20:03,680 --> 00:20:08,930
explain how to get set up so it's about

00:20:05,720 --> 00:20:11,240
six steps to get an engine going you

00:20:08,930 --> 00:20:14,270
generate an add-on just like normal you

00:20:11,240 --> 00:20:16,160
install the ember engines add-on also

00:20:14,270 --> 00:20:17,870
kind of straightforward if you're

00:20:16,160 --> 00:20:20,090
providing templates you need to make

00:20:17,870 --> 00:20:21,740
sure that ember CLI HTML bars is

00:20:20,090 --> 00:20:24,410
included as the dependency so those get

00:20:21,740 --> 00:20:27,920
compiled and then there's three files

00:20:24,410 --> 00:20:29,720
that you need to edit so your index J

00:20:27,920 --> 00:20:31,340
ass is really similar to the index

00:20:29,720 --> 00:20:36,490
status for an add-on but we're making

00:20:31,340 --> 00:20:38,690
sure sure to extend ember engine the

00:20:36,490 --> 00:20:40,340
environment also similar to just a

00:20:38,690 --> 00:20:42,430
normal add-on but we have to make sure

00:20:40,340 --> 00:20:45,590
that we're providing the module prefix

00:20:42,430 --> 00:20:47,960
and then we have this engine dot J s

00:20:45,590 --> 00:20:49,580
file if you've ever looked at your app

00:20:47,960 --> 00:20:50,210
dot J's file that should look really

00:20:49,580 --> 00:20:53,290
familiar

00:20:50,210 --> 00:20:56,660
but we're extending engine instead of

00:20:53,290 --> 00:20:58,700
ember application and that's it that's

00:20:56,660 --> 00:21:00,680
all it takes to get started then you can

00:20:58,700 --> 00:21:03,590
go into your host application and you

00:21:00,680 --> 00:21:05,300
can mount the engine most often you see

00:21:03,590 --> 00:21:09,110
it just like this so this is an example

00:21:05,300 --> 00:21:11,300
for a routable engine now in our host

00:21:09,110 --> 00:21:15,020
app if we go to slash my engine we're

00:21:11,300 --> 00:21:17,360
now serving up that engine it works just

00:21:15,020 --> 00:21:17,639
like a normal route so if you want to

00:21:17,360 --> 00:21:19,679
over

00:21:17,639 --> 00:21:20,669
ride the path so in this example if we

00:21:19,679 --> 00:21:24,059
go to slash blargh

00:21:20,669 --> 00:21:25,950
now we're serving up my engine be if you

00:21:24,059 --> 00:21:29,789
need multiple instances of the same

00:21:25,950 --> 00:21:31,859
engine you you can pass it this as

00:21:29,789 --> 00:21:35,879
argument so in this if you go to slash

00:21:31,859 --> 00:21:41,639
motor we're now serving up a different

00:21:35,879 --> 00:21:44,669
instance of my engine be for a route

00:21:41,639 --> 00:21:48,059
less engine you mount it in the template

00:21:44,669 --> 00:21:50,519
using the mount helper it takes exactly

00:21:48,059 --> 00:21:52,169
one argument which is the model if you

00:21:50,519 --> 00:21:53,999
need to pass more things to your engine

00:21:52,169 --> 00:22:00,119
the recommended way of doing so is to

00:21:53,999 --> 00:22:01,559
passion a hash so some tips for working

00:22:00,119 --> 00:22:03,139
with engines getting lazy loading

00:22:01,559 --> 00:22:05,879
working is incredibly straightforward

00:22:03,139 --> 00:22:08,039
that's all you have to do you just lazy

00:22:05,879 --> 00:22:09,659
loading enable this true and now you're

00:22:08,039 --> 00:22:13,169
you're asynchronously loading your

00:22:09,659 --> 00:22:16,349
engine there are some gotchas about

00:22:13,169 --> 00:22:17,999
tests so there's similar code on the

00:22:16,349 --> 00:22:19,229
amber engines website i'm gonna post

00:22:17,999 --> 00:22:20,159
these slides they don't expect you to

00:22:19,229 --> 00:22:22,619
remember all of it

00:22:20,159 --> 00:22:24,719
but in tests you have to make sure that

00:22:22,619 --> 00:22:27,450
you're using the correct resolver so

00:22:24,719 --> 00:22:30,089
engine ships with this utilities engine

00:22:27,450 --> 00:22:32,669
resolver for what we've done is we've

00:22:30,089 --> 00:22:34,709
made our own setup test and set up

00:22:32,669 --> 00:22:38,519
rendering tests that we call instead of

00:22:34,709 --> 00:22:39,779
the built in a setup test that makes

00:22:38,519 --> 00:22:44,399
sure that we're using the correct

00:22:39,779 --> 00:22:46,440
resolver sharing services is really

00:22:44,399 --> 00:22:50,129
straightforward just in our host

00:22:46,440 --> 00:22:52,589
application we declare what the service

00:22:50,129 --> 00:22:55,259
is working to share and to what engines

00:22:52,589 --> 00:22:58,229
and in our engine we just let it know

00:22:55,259 --> 00:22:59,999
what what services to look for that are

00:22:58,229 --> 00:23:01,649
going to be shared so if you're using

00:22:59,999 --> 00:23:03,599
something like amber simple off you're

00:23:01,649 --> 00:23:07,079
probably going to be reshoring your

00:23:03,599 --> 00:23:09,839
session service I also recommend sharing

00:23:07,079 --> 00:23:13,679
the store because there's a few little

00:23:09,839 --> 00:23:17,009
gotchas about working with amber data so

00:23:13,679 --> 00:23:19,440
if you this is a real bug that we came

00:23:17,009 --> 00:23:21,809
across so if you've got a shared session

00:23:19,440 --> 00:23:22,960
session that might return a user model

00:23:21,809 --> 00:23:26,169
and then in your end

00:23:22,960 --> 00:23:29,830
you might have like a created by belongs

00:23:26,169 --> 00:23:32,799
to this code will throw an error amber

00:23:29,830 --> 00:23:34,450
will will tell you that you try and use

00:23:32,799 --> 00:23:39,520
models across different stores and you

00:23:34,450 --> 00:23:41,799
can't do that so also your store in your

00:23:39,520 --> 00:23:43,510
engine won't be accessible in amber

00:23:41,799 --> 00:23:45,909
inspector so if you've ever use the data

00:23:43,510 --> 00:23:48,370
tab in the amber inspector it's

00:23:45,909 --> 00:23:50,470
incredibly helpful and not having that

00:23:48,370 --> 00:23:52,799
can be kind of difficult so the

00:23:50,470 --> 00:23:57,520
recommended way of doing things is

00:23:52,799 --> 00:23:59,529
layout your your your workspace kind of

00:23:57,520 --> 00:24:01,899
like this where you have your host you

00:23:59,529 --> 00:24:03,580
have your engine and any models that are

00:24:01,899 --> 00:24:06,059
relevant to that engine just kind of

00:24:03,580 --> 00:24:09,820
name it the same make a new package and

00:24:06,059 --> 00:24:12,370
append models to it that can be consumed

00:24:09,820 --> 00:24:13,720
by your host app so that way it can be

00:24:12,370 --> 00:24:16,570
set up in the store it can also be

00:24:13,720 --> 00:24:17,770
consumed by your engine because if

00:24:16,570 --> 00:24:21,970
you're using tech script you're going to

00:24:17,770 --> 00:24:23,230
want those type definitions and and this

00:24:21,970 --> 00:24:24,789
is this is really helpful i don't

00:24:23,230 --> 00:24:26,409
recommend taking all of your models and

00:24:24,789 --> 00:24:27,809
dumping into the host app because then

00:24:26,409 --> 00:24:30,940
you're losing that clear communication

00:24:27,809 --> 00:24:35,020
about what files for what feature go

00:24:30,940 --> 00:24:36,669
where so that's it it's really

00:24:35,020 --> 00:24:39,250
straightforward working with workspaces

00:24:36,669 --> 00:24:41,559
and engines i wanted to leave you with

00:24:39,250 --> 00:24:44,559
just a few little tips about working

00:24:41,559 --> 00:24:46,649
with really ambitious large code bases

00:24:44,559 --> 00:24:49,720
so i've ranked these in order of

00:24:46,649 --> 00:24:52,330
controversy so least controversial two

00:24:49,720 --> 00:24:54,520
most controversial least controversial

00:24:52,330 --> 00:24:57,610
meaning that they're generally kind of

00:24:54,520 --> 00:24:59,409
well accepted good practices most

00:24:57,610 --> 00:25:00,669
controversial meaning that you can find

00:24:59,409 --> 00:25:02,110
people that are a lot smarter than me

00:25:00,669 --> 00:25:04,480
that will give you a lot of reasons why

00:25:02,110 --> 00:25:05,799
not to do that but there's also other

00:25:04,480 --> 00:25:09,130
people who are smarter mean i tell you

00:25:05,799 --> 00:25:12,250
why to do it so replace this with your

00:25:09,130 --> 00:25:14,470
real tests if i searched for this string

00:25:12,250 --> 00:25:18,460
I would find it an embarrassing amount

00:25:14,470 --> 00:25:20,020
of times in our repositories you need to

00:25:18,460 --> 00:25:22,240
treat that as a commandment don't treat

00:25:20,020 --> 00:25:25,770
it as a suggestion if you see that code

00:25:22,240 --> 00:25:30,669
if it's committed treat that like a bug

00:25:25,770 --> 00:25:32,799
similarly most of the arguments to the

00:25:30,669 --> 00:25:35,950
the queue unit assert functions like

00:25:32,799 --> 00:25:38,740
assert equals they take a final argument

00:25:35,950 --> 00:25:40,690
the message there's so many times where

00:25:38,740 --> 00:25:43,029
I've been doing a big refactor or

00:25:40,690 --> 00:25:45,730
upgrading a library and a test breaks

00:25:43,029 --> 00:25:49,210
and I look at it and the test is assert

00:25:45,730 --> 00:25:52,000
equals foo is two point seven five nine

00:25:49,210 --> 00:25:54,850
and now it's two point seven five eight

00:25:52,000 --> 00:25:58,360
and I don't know if I fixed it or if I

00:25:54,850 --> 00:26:01,600
broke it and if you just include a

00:25:58,360 --> 00:26:04,740
little description about what exactly

00:26:01,600 --> 00:26:06,760
you're testing it's incredibly helpful

00:26:04,740 --> 00:26:08,019
you don't think about it when you're

00:26:06,760 --> 00:26:09,730
just working on your feature because

00:26:08,019 --> 00:26:11,080
it's obvious to you but once you're

00:26:09,730 --> 00:26:13,090
doing those big reef actors where

00:26:11,080 --> 00:26:15,159
there's a thousand tests and you're

00:26:13,090 --> 00:26:17,080
looking at the failed ones on the with

00:26:15,159 --> 00:26:20,049
the little cue unit reporter page having

00:26:17,080 --> 00:26:22,659
that message is incredibly helpful so

00:26:20,049 --> 00:26:24,880
starting to get into the controversial

00:26:22,659 --> 00:26:27,340
side so yes Len is not very

00:26:24,880 --> 00:26:31,350
controversial prettier maybe a little

00:26:27,340 --> 00:26:35,769
bit more so but what's controversial is

00:26:31,350 --> 00:26:37,240
when I first started running a web

00:26:35,769 --> 00:26:39,250
development team I pretty much let

00:26:37,240 --> 00:26:41,830
developers use whatever IDE they felt

00:26:39,250 --> 00:26:45,159
comfortable with so we didn't get into

00:26:41,830 --> 00:26:48,370
some holy war of them or Emacs or code

00:26:45,159 --> 00:26:50,169
or Adam but more and more I'm leaning

00:26:48,370 --> 00:26:51,909
towards recommending everyone on the

00:26:50,169 --> 00:26:55,059
team used the same tools and the same

00:26:51,909 --> 00:26:58,389
add-ons so we started using prettier

00:26:55,059 --> 00:27:00,370
about a year ago at Agron and it's it's

00:26:58,389 --> 00:27:04,450
really cleaned up some of the noise and

00:27:00,370 --> 00:27:06,159
pull requests so in pull requests a lot

00:27:04,450 --> 00:27:08,110
of times you'll have comments about oh

00:27:06,159 --> 00:27:11,500
you need a line break here or clean up

00:27:08,110 --> 00:27:14,440
this white space or follow this you know

00:27:11,500 --> 00:27:16,120
best practices about code formatting if

00:27:14,440 --> 00:27:17,769
you're all in the same page about having

00:27:16,120 --> 00:27:19,929
your code always being automatically

00:27:17,769 --> 00:27:22,679
formatted by the same thing you've never

00:27:19,929 --> 00:27:25,090
run into that and you'll never run into

00:27:22,679 --> 00:27:29,080
changes that are outside of the scope of

00:27:25,090 --> 00:27:30,039
the actual work that you're dealing and

00:27:29,080 --> 00:27:33,720
if you didn't know this there's actually

00:27:30,039 --> 00:27:36,039
a glamor parser for prettier so you can

00:27:33,720 --> 00:27:37,059
format your typescript or JavaScript

00:27:36,039 --> 00:27:41,970
just the same as you form

00:27:37,059 --> 00:27:45,309
or handlebars be careful with addons the

00:27:41,970 --> 00:27:48,610
addon ecosystem in ember is just

00:27:45,309 --> 00:27:50,200
incredible there's there's so much

00:27:48,610 --> 00:27:54,549
functionality that's just an ember

00:27:50,200 --> 00:27:57,299
install away but sometimes that can be a

00:27:54,549 --> 00:28:00,070
deterrent it can slow down upgrades if

00:27:57,299 --> 00:28:02,019
using an addon that uses old syntax and

00:28:00,070 --> 00:28:04,929
it hasn't been updated so before you

00:28:02,019 --> 00:28:06,730
install an add-on just take a look at is

00:28:04,929 --> 00:28:10,450
it actively maintained is it using

00:28:06,730 --> 00:28:12,309
modern best practices look at what does

00:28:10,450 --> 00:28:14,019
it do to the actual size of your

00:28:12,309 --> 00:28:16,450
compiled assets is it bringing on a

00:28:14,019 --> 00:28:18,100
bunch of stuff and bloating your asset

00:28:16,450 --> 00:28:20,289
size and slowing down the download of

00:28:18,100 --> 00:28:22,929
your application if you do find an

00:28:20,289 --> 00:28:24,580
add-on that you want to use but is maybe

00:28:22,929 --> 00:28:27,070
not as actively maintained as you like

00:28:24,580 --> 00:28:28,749
my recommendation is install it with the

00:28:27,070 --> 00:28:31,600
knowledge that you might end up adopting

00:28:28,749 --> 00:28:33,220
it the beauty of open source is that if

00:28:31,600 --> 00:28:34,899
you have a problem with one of the tools

00:28:33,220 --> 00:28:36,419
you're using you can just fix it

00:28:34,899 --> 00:28:39,629
yourself

00:28:36,419 --> 00:28:44,320
lastly and we're firmly in controversial

00:28:39,629 --> 00:28:47,259
side of things use typescript in about

00:28:44,320 --> 00:28:49,409
six months I went from you know

00:28:47,259 --> 00:28:53,019
typescript might be a little bit helpful

00:28:49,409 --> 00:28:55,929
I'm gonna maybe poke around using this

00:28:53,019 --> 00:28:59,249
to oh my god how did I ever live without

00:28:55,929 --> 00:29:02,190
typescript and now whenever I work in a

00:28:59,249 --> 00:29:04,690
in an app that's not in typescript it's

00:29:02,190 --> 00:29:07,899
like kind of scary like I feel like I

00:29:04,690 --> 00:29:10,090
don't have a safety net it's made big

00:29:07,899 --> 00:29:12,639
reef actors really simple it's made it

00:29:10,090 --> 00:29:15,009
easy to find when you know if I change

00:29:12,639 --> 00:29:17,830
something in a class and I think that no

00:29:15,009 --> 00:29:20,080
place else is using a particular member

00:29:17,830 --> 00:29:22,960
of the class getting those typescript

00:29:20,080 --> 00:29:25,539
errors is helps us find those bugs

00:29:22,960 --> 00:29:28,409
before we ship them to production and

00:29:25,539 --> 00:29:31,029
then lastly boolean controversial mode

00:29:28,409 --> 00:29:33,840
even kind of scared to put this on the

00:29:31,029 --> 00:29:38,460
screen use tailwind

00:29:33,840 --> 00:29:41,230
we went from thousands of lines of CSS

00:29:38,460 --> 00:29:43,029
where every component we made felt like

00:29:41,230 --> 00:29:44,710
it needed a few lines the CSS we just

00:29:43,029 --> 00:29:48,009
needed to maybe nudge something one way

00:29:44,710 --> 00:29:48,790
or the other or or reset the the font

00:29:48,009 --> 00:29:51,700
size for

00:29:48,790 --> 00:29:54,160
reason and we switched to using tailwind

00:29:51,700 --> 00:29:55,510
we spent some time up front making sure

00:29:54,160 --> 00:29:59,050
that we had a really good tailing

00:29:55,510 --> 00:30:04,150
configuration and the amount of CSS that

00:29:59,050 --> 00:30:05,710
we wrote dropped by 90% or so I love

00:30:04,150 --> 00:30:07,420
there's a quote from Adam the guy that

00:30:05,710 --> 00:30:09,610
made tail wind

00:30:07,420 --> 00:30:11,530
he said if you haven't worked with a

00:30:09,610 --> 00:30:12,490
library like this before I promise your

00:30:11,530 --> 00:30:14,680
gut reaction will be

00:30:12,490 --> 00:30:17,140
holy hell this is the worst thing I've

00:30:14,680 --> 00:30:18,460
ever seen it was my reaction to you

00:30:17,140 --> 00:30:20,980
really do have to try it to shake that

00:30:18,460 --> 00:30:22,450
impression so if you looked at it and

00:30:20,980 --> 00:30:24,700
you freaked out and you thought it was

00:30:22,450 --> 00:30:27,790
gross I really recommend using it and

00:30:24,700 --> 00:30:30,910
you might be persuaded so that's it for

00:30:27,790 --> 00:30:32,590
me I you can find me at Luke denistoun

00:30:30,910 --> 00:30:34,180
quite a few different places I'd love to

00:30:32,590 --> 00:30:35,860
know if you thought this talk was

00:30:34,180 --> 00:30:38,610
helpful or if you have any feedback

00:30:35,860 --> 00:30:38,610

YouTube URL: https://www.youtube.com/watch?v=K7rNqE5nsgk


