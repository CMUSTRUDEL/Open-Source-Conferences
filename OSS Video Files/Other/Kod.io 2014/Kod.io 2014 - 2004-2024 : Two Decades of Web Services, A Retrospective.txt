Title: Kod.io 2014 - 2004-2024 : Two Decades of Web Services, A Retrospective
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	By Arne Brasseur

With the rise of mobile phones and browsers as application platforms, web API's are something we simply can't get around anymore.
The world, and the web, is changing as we speak, and people are scrambling to figure out how best to build their services.

Having watched this evolution from its early days, and having consumed and built API's of various flavors, I want to take a moment to trace Web Services back to their humble RPC roots.

From there we'll follow Fielding through a landscape of REST and Hypermedia, to arrive at a marvelous vista of connected services in a world of computing that is always-on and always-online.

Help us caption & translate this video!

http://amara.org/v/FG30/
Captions: 
	00:00:18,560 --> 00:00:32,880
hey thank you so this is kind of the

00:00:29,100 --> 00:00:35,820
highlight of my talk just going to put

00:00:32,880 --> 00:00:39,210
this cursor on the side all right so I'm

00:00:35,820 --> 00:00:42,570
our nuh I'm plexus online on twitter and

00:00:39,210 --> 00:00:44,670
github I mostly do Ruby stuff rails

00:00:42,570 --> 00:00:47,820
developer professionally do a bunch of

00:00:44,670 --> 00:00:51,030
open source stuff I'm involved with

00:00:47,820 --> 00:00:53,730
rails girls which if you saw Annika you

00:00:51,030 --> 00:00:55,230
now know all about in Berlin I'm

00:00:53,730 --> 00:00:57,300
originally from Belgium but I live in

00:00:55,230 --> 00:00:59,339
Berlin so I help out there I help out in

00:00:57,300 --> 00:01:00,960
Brussels and I help out a bit with the

00:00:59,339 --> 00:01:04,320
Summer of Code which is happening again

00:01:00,960 --> 00:01:05,760
so that's pretty awesome and there's

00:01:04,320 --> 00:01:07,710
ruby conference in belgium called our

00:01:05,760 --> 00:01:09,479
camp and if you're thinking of going

00:01:07,710 --> 00:01:12,750
there this year for the second time

00:01:09,479 --> 00:01:15,360
we'll do a beer trip tasting some of the

00:01:12,750 --> 00:01:16,740
typical belgian long big beers so i'm

00:01:15,360 --> 00:01:18,110
one of the organizers of that Ruby

00:01:16,740 --> 00:01:24,000
lambic so if you're interested in that

00:01:18,110 --> 00:01:25,500
come and talk to me and then my one

00:01:24,000 --> 00:01:27,930
minute of shameless self-promotion now

00:01:25,500 --> 00:01:30,660
that I have the stage I'm writing a book

00:01:27,930 --> 00:01:32,970
on functional programming in Ruby it's

00:01:30,660 --> 00:01:35,940
one third finished about its own lean

00:01:32,970 --> 00:01:38,460
pop you can already get the current

00:01:35,940 --> 00:01:39,630
status of it there so if that interest

00:01:38,460 --> 00:01:44,850
you come and talk to me as well

00:01:39,630 --> 00:01:47,430
afterwards ok so let's talk about the

00:01:44,850 --> 00:01:51,750
web and what makes the web so special

00:01:47,430 --> 00:01:56,010
and for that we need to go back into the

00:01:51,750 --> 00:02:00,680
past come on Doc let's take us to

00:01:56,010 --> 00:02:04,290
nineteen ninety because then this

00:02:00,680 --> 00:02:06,000
handsome guy named Tim berners-lee came

00:02:04,290 --> 00:02:08,849
up with this brilliant idea he was this

00:02:06,000 --> 00:02:10,920
physicist who won't do a better way of

00:02:08,849 --> 00:02:14,099
sharing documents research with his

00:02:10,920 --> 00:02:16,680
fellow researchers and so on this

00:02:14,099 --> 00:02:19,319
beautiful machine a next cube he

00:02:16,680 --> 00:02:22,920
implemented the first web server and web

00:02:19,319 --> 00:02:25,379
web browser this was kind of end of

00:02:22,920 --> 00:02:27,660
nineteen ninety says there this machine

00:02:25,379 --> 00:02:28,800
is a server to not power down if you did

00:02:27,660 --> 00:02:31,010
you would have powered down the whole

00:02:28,800 --> 00:02:31,010
web

00:02:31,730 --> 00:02:36,060
so from there it went really fast there

00:02:34,530 --> 00:02:39,410
was actually a very simple idea very

00:02:36,060 --> 00:02:43,320
simple implementation his first ideas of

00:02:39,410 --> 00:02:46,350
HTTP HTML and and what now have them

00:02:43,320 --> 00:02:49,140
become you our eyes sort of exists is

00:02:46,350 --> 00:02:51,780
already more or less in the format they

00:02:49,140 --> 00:02:54,810
do now it's evolved a bit but the

00:02:51,780 --> 00:02:57,930
foundations were there and it's grown

00:02:54,810 --> 00:03:01,800
remarkably and so the amazing thing

00:02:57,930 --> 00:03:04,260
about the web is that it the basic

00:03:01,800 --> 00:03:07,250
architecture is virtually unchanged 24

00:03:04,260 --> 00:03:11,670
years later and it's it's scaled

00:03:07,250 --> 00:03:14,400
incredibly so there are there are some

00:03:11,670 --> 00:03:15,690
things there that just make that really

00:03:14,400 --> 00:03:18,780
special I really interesting to study

00:03:15,690 --> 00:03:24,210
like what what is it that that a lot web

00:03:18,780 --> 00:03:26,430
to do that and in 1993 so the web really

00:03:24,210 --> 00:03:28,410
started to take off beyond just the

00:03:26,430 --> 00:03:31,580
small research so circle off of Tim

00:03:28,410 --> 00:03:35,220
berners-lee and also you got the first

00:03:31,580 --> 00:03:39,480
client the mosaic browser that could

00:03:35,220 --> 00:03:42,060
display images and so suddenly the

00:03:39,480 --> 00:03:43,290
traffic pattern of typical web browsers

00:03:42,060 --> 00:03:45,000
changed because it wasn't just

00:03:43,290 --> 00:03:46,739
retrieving a single document at a time

00:03:45,000 --> 00:03:48,690
suddenly this document contained

00:03:46,739 --> 00:03:50,940
references to all kinds of images and

00:03:48,690 --> 00:03:53,520
then then later JavaScript came and so

00:03:50,940 --> 00:03:55,770
you got a different pattern of traffic

00:03:53,520 --> 00:03:57,630
and so people were a bit worried of like

00:03:55,770 --> 00:04:02,160
if that would continue to scale and if

00:03:57,630 --> 00:04:04,890
that wouldn't impact performance so Tim

00:04:02,160 --> 00:04:07,380
berners-lee found at the w3c which was

00:04:04,890 --> 00:04:09,690
in charge of sort of formalizing these

00:04:07,380 --> 00:04:11,760
specifications but the final

00:04:09,690 --> 00:04:13,380
specification work live with the idea of

00:04:11,760 --> 00:04:15,510
the internet engineering task force and

00:04:13,380 --> 00:04:17,130
so they said about thinking about okay

00:04:15,510 --> 00:04:19,669
you know how's the next generation of

00:04:17,130 --> 00:04:22,800
these specifications going to look like

00:04:19,669 --> 00:04:28,680
and so there's this guy involved Roy

00:04:22,800 --> 00:04:32,880
fielding he was part of that initial

00:04:28,680 --> 00:04:35,730
effort and basically from 1994 on he's

00:04:32,880 --> 00:04:36,960
studying these specifications and and

00:04:35,730 --> 00:04:39,000
sort of the architecture that they have

00:04:36,960 --> 00:04:40,919
and trying to understand that what what

00:04:39,000 --> 00:04:42,690
are the essential parts of it that we

00:04:40,919 --> 00:04:44,470
really don't want to change even if this

00:04:42,690 --> 00:04:45,940
evolves if we go forward and

00:04:44,470 --> 00:04:47,920
you know we need to change some parts

00:04:45,940 --> 00:04:49,780
for performance for whatever reasons

00:04:47,920 --> 00:04:52,240
what are kind of the essential parts

00:04:49,780 --> 00:04:55,270
that we don't want to touch and so from

00:04:52,240 --> 00:04:56,860
1994 until 2000 he puts a lot of thought

00:04:55,270 --> 00:04:59,410
into this there's a lot of research on

00:04:56,860 --> 00:05:02,890
architecture and he writes this grant

00:04:59,410 --> 00:05:04,720
word dissertation in 2000 called

00:05:02,890 --> 00:05:07,570
architectural styles and the design of

00:05:04,720 --> 00:05:09,250
network based software architectures I

00:05:07,570 --> 00:05:11,980
need to write read it from the slide

00:05:09,250 --> 00:05:14,290
because I always forget title but it's a

00:05:11,980 --> 00:05:16,810
this is the teases that introduced the

00:05:14,290 --> 00:05:18,780
term rest and we'll talk a lot more

00:05:16,810 --> 00:05:21,490
about that later in this presentation

00:05:18,780 --> 00:05:23,320
but so the first part of the title he

00:05:21,490 --> 00:05:24,730
says okay architectural styles and so

00:05:23,320 --> 00:05:26,800
that basically the first half of his

00:05:24,730 --> 00:05:28,600
dissertation is basically explaining

00:05:26,800 --> 00:05:30,820
what he means by an architectural style

00:05:28,600 --> 00:05:34,300
and sort of putting up a groundwork for

00:05:30,820 --> 00:05:37,030
reasoning about that and and looking

00:05:34,300 --> 00:05:40,090
into some common styles that that exist

00:05:37,030 --> 00:05:43,690
and so in his thinking an architectural

00:05:40,090 --> 00:05:46,169
style is defined by oh well first of all

00:05:43,690 --> 00:05:48,580
the basic components you have components

00:05:46,169 --> 00:05:51,580
which are instructions plus states that

00:05:48,580 --> 00:05:53,919
are kind of encapsulated pieces that can

00:05:51,580 --> 00:05:55,690
transform data and they have an

00:05:53,919 --> 00:05:57,760
outward-facing interface and you can

00:05:55,690 --> 00:05:59,650
only communicate with them through that

00:05:57,760 --> 00:06:02,050
interface what's inside is basically

00:05:59,650 --> 00:06:04,479
hidden from outside then you have

00:06:02,050 --> 00:06:06,070
connectors that mediate the

00:06:04,479 --> 00:06:08,290
collaboration communication between

00:06:06,070 --> 00:06:10,180
these components and then you have the

00:06:08,290 --> 00:06:13,500
actual data that's going back and forth

00:06:10,180 --> 00:06:16,360
so this might sound a bit abstract but

00:06:13,500 --> 00:06:19,450
basically any system and in network

00:06:16,360 --> 00:06:22,840
system can be described in terms of the

00:06:19,450 --> 00:06:25,479
structure the composition of these basic

00:06:22,840 --> 00:06:29,169
parts and then he goes one step further

00:06:25,479 --> 00:06:32,370
and he says okay if you if you choose a

00:06:29,169 --> 00:06:35,200
set of constraints basically you say we

00:06:32,370 --> 00:06:37,810
decide on a number of rules that were

00:06:35,200 --> 00:06:40,240
not going to violate of how we construct

00:06:37,810 --> 00:06:42,700
these this the configuration of these

00:06:40,240 --> 00:06:44,950
different parts and so would take that

00:06:42,700 --> 00:06:46,210
set of constraints and within that set

00:06:44,950 --> 00:06:47,950
of constraints you can come up with all

00:06:46,210 --> 00:06:52,060
kinds of architectures different ways of

00:06:47,950 --> 00:06:53,440
building your systems but if they follow

00:06:52,060 --> 00:06:55,560
the same set of constraints that they

00:06:53,440 --> 00:06:58,240
followed the same architectural style

00:06:55,560 --> 00:07:00,370
and when you have

00:06:58,240 --> 00:07:03,509
certain style that style will exhibit

00:07:00,370 --> 00:07:05,860
certain properties that not necessarily

00:07:03,509 --> 00:07:07,870
directly encoded in these constraints

00:07:05,860 --> 00:07:09,490
but somehow you know the interaction by

00:07:07,870 --> 00:07:11,169
choosing your constraints well you'll

00:07:09,490 --> 00:07:15,550
get interesting properties from your

00:07:11,169 --> 00:07:17,020
system and what are some of the

00:07:15,550 --> 00:07:18,880
important properties of the world wide

00:07:17,020 --> 00:07:20,889
web at that point well it had a very low

00:07:18,880 --> 00:07:22,840
entry barrier so you have to imagine

00:07:20,889 --> 00:07:24,580
like at this time researchers were using

00:07:22,840 --> 00:07:26,770
all kinds of different platforms

00:07:24,580 --> 00:07:29,620
operating systems had to be easy for

00:07:26,770 --> 00:07:30,970
them to implement a browser server on

00:07:29,620 --> 00:07:32,889
various systems so you had this very

00:07:30,970 --> 00:07:35,560
simple text based formats that just

00:07:32,889 --> 00:07:39,300
worked over tcp/ip which was already

00:07:35,560 --> 00:07:41,830
very common at that point and you could

00:07:39,300 --> 00:07:43,569
incrementally grow that network it's all

00:07:41,830 --> 00:07:45,340
very decoupled like there's no central

00:07:43,569 --> 00:07:47,740
authority where you have to ask to add a

00:07:45,340 --> 00:07:49,389
new browser somewhere you know you just

00:07:47,740 --> 00:07:52,990
get on the web and use it and it plugs

00:07:49,389 --> 00:07:55,419
in with all the rest and what makes that

00:07:52,990 --> 00:07:57,669
whole thing work is that you have these

00:07:55,419 --> 00:08:00,310
references these identifiers which we

00:07:57,669 --> 00:08:02,550
now know as you are eyes which can point

00:08:00,310 --> 00:08:05,770
to different resources on the network

00:08:02,550 --> 00:08:08,469
and that that kind of give you that that

00:08:05,770 --> 00:08:10,000
decoupling that make you have these

00:08:08,469 --> 00:08:11,830
different services that don't really

00:08:10,000 --> 00:08:13,539
have to know about each other until the

00:08:11,830 --> 00:08:16,150
last point where through this you or I

00:08:13,539 --> 00:08:19,719
did they look up where where it is and

00:08:16,150 --> 00:08:22,060
start talking to it it's extensible so

00:08:19,719 --> 00:08:24,520
these you know HTTP has changed

00:08:22,060 --> 00:08:26,259
significantly since then with lots of

00:08:24,520 --> 00:08:28,630
extensions but the essentials have

00:08:26,259 --> 00:08:32,079
stayed the same and it's it's simple

00:08:28,630 --> 00:08:33,940
which is part of its success and so this

00:08:32,079 --> 00:08:35,620
is this I look this is the favorite

00:08:33,940 --> 00:08:37,570
phrase from feelings dissertation I had

00:08:35,620 --> 00:08:40,839
to put it on a separate slide so it's an

00:08:37,570 --> 00:08:43,000
Arctic scalability so there's no central

00:08:40,839 --> 00:08:44,740
authority it's it's anarchy you know

00:08:43,000 --> 00:08:46,720
like everybody can add pieces to the

00:08:44,740 --> 00:08:49,660
system and it just all keeps humming

00:08:46,720 --> 00:08:51,339
together and it just scales to ya to web

00:08:49,660 --> 00:08:52,779
scale like people talk about web scale

00:08:51,339 --> 00:08:56,700
nowadays well there's only one thing

00:08:52,779 --> 00:08:56,700
that's really web scale that's the web

00:08:57,060 --> 00:09:03,670
so this is how feeling kind of derives

00:09:01,120 --> 00:09:05,620
his architectural style that he thinks

00:09:03,670 --> 00:09:09,270
is you know kind of what makes a web

00:09:05,620 --> 00:09:09,270
tick and he calls it rest

00:09:10,889 --> 00:09:15,540
it's all a bit abstract but to kind of

00:09:12,899 --> 00:09:18,239
go in it he says okay rest is when you

00:09:15,540 --> 00:09:21,540
have the constraint of a layered system

00:09:18,239 --> 00:09:25,379
so you can for instance have gateways or

00:09:21,540 --> 00:09:27,059
proxies and each layer only knows about

00:09:25,379 --> 00:09:29,999
the next layer and has no knowledge

00:09:27,059 --> 00:09:31,319
about what lies beyond that so this this

00:09:29,999 --> 00:09:33,059
is important for scaling because then

00:09:31,319 --> 00:09:37,559
you can do things like load balancing

00:09:33,059 --> 00:09:40,139
and client-server of course is quite

00:09:37,559 --> 00:09:41,579
obvious but that makes that each like

00:09:40,139 --> 00:09:43,169
clients and servers have specific

00:09:41,579 --> 00:09:47,220
responsibilities and so each of them

00:09:43,169 --> 00:09:50,939
space stays relatively simple caching so

00:09:47,220 --> 00:09:53,249
individual parts of communication real

00:09:50,939 --> 00:09:56,189
pieces of data have metadata associated

00:09:53,249 --> 00:09:59,609
with them which tells you if it's

00:09:56,189 --> 00:10:01,799
cacheable or not so at any point between

00:09:59,609 --> 00:10:04,709
you know in this layered system at any

00:10:01,799 --> 00:10:06,629
any layer can basically cash what it

00:10:04,709 --> 00:10:08,579
considers cashable for whatever lies

00:10:06,629 --> 00:10:11,009
beyond it so that helps again for

00:10:08,579 --> 00:10:13,410
scalability your browser can cash you

00:10:11,009 --> 00:10:16,410
can have reverse proxies that cash these

00:10:13,410 --> 00:10:19,110
kind of things it's stateless so each

00:10:16,410 --> 00:10:21,689
request kind of stance on itself and you

00:10:19,110 --> 00:10:23,879
can kind of replay that request and get

00:10:21,689 --> 00:10:25,290
the same response so the ID there is you

00:10:23,879 --> 00:10:27,059
know other other protocols that went

00:10:25,290 --> 00:10:29,369
before that if you wanted to implement

00:10:27,059 --> 00:10:31,589
them you had to keep a lot of state

00:10:29,369 --> 00:10:33,449
track of state on both sides you know

00:10:31,589 --> 00:10:35,610
client and server had to keep track of

00:10:33,449 --> 00:10:37,799
okay we're in this communication are we

00:10:35,610 --> 00:10:40,860
what has already been said or is on the

00:10:37,799 --> 00:10:44,160
web each request is very on its own so

00:10:40,860 --> 00:10:46,919
that staples is important code on demand

00:10:44,160 --> 00:10:49,290
is what you get with with JavaScript or

00:10:46,919 --> 00:10:51,689
with Java applets which feeling cos it's

00:10:49,290 --> 00:10:53,369
a considers as a knob tional constraint

00:10:51,689 --> 00:10:55,519
but you can do interesting things with

00:10:53,369 --> 00:10:58,649
that because that way you can enhance

00:10:55,519 --> 00:11:00,749
your client without building a new

00:10:58,649 --> 00:11:03,839
client you can basically on the fly make

00:11:00,749 --> 00:11:05,850
your client better but the final piece

00:11:03,839 --> 00:11:08,789
so he you know puts this all together

00:11:05,850 --> 00:11:10,980
like this is the architectural style of

00:11:08,789 --> 00:11:12,899
all these things together layered code

00:11:10,980 --> 00:11:16,230
on-demand client server caching

00:11:12,899 --> 00:11:20,369
stateless system but then when you add

00:11:16,230 --> 00:11:22,769
this uniform interface idea this uniform

00:11:20,369 --> 00:11:24,660
URLs and uniform ways that components

00:11:22,769 --> 00:11:25,260
talk to each other and suddenly it gets

00:11:24,660 --> 00:11:29,820
interesting

00:11:25,260 --> 00:11:33,540
you get what he goes rest so the point

00:11:29,820 --> 00:11:35,460
here is that when you have a URI what it

00:11:33,540 --> 00:11:39,120
points to it's an identifier for

00:11:35,460 --> 00:11:42,690
something abstract it's not so in

00:11:39,120 --> 00:11:45,420
original in early web you are I was a

00:11:42,690 --> 00:11:48,270
reference to a document but feeling says

00:11:45,420 --> 00:11:50,010
no no like we need to get loose of this

00:11:48,270 --> 00:11:53,100
idea of that a URI points to a specific

00:11:50,010 --> 00:11:55,560
document that's already too specific you

00:11:53,100 --> 00:11:57,600
or I points to a resource whatever that

00:11:55,560 --> 00:12:00,620
may be so it's kind of this abstract

00:11:57,600 --> 00:12:03,360
idea of that you can point to things and

00:12:00,620 --> 00:12:05,280
only at the very last point when you try

00:12:03,360 --> 00:12:07,860
to request that your client and your

00:12:05,280 --> 00:12:09,930
server kind of communicate how you want

00:12:07,860 --> 00:12:12,180
that thing to be represented do you want

00:12:09,930 --> 00:12:14,220
that as an HTML page has some JSON as

00:12:12,180 --> 00:12:16,890
some XML so you get these different

00:12:14,220 --> 00:12:20,940
representations of these abstract

00:12:16,890 --> 00:12:23,520
resources the the point there is that

00:12:20,940 --> 00:12:25,380
it's it's a way of hiding information

00:12:23,520 --> 00:12:26,970
hiding implementation of how these

00:12:25,380 --> 00:12:29,250
resources are represented on the server

00:12:26,970 --> 00:12:31,280
your client doesn't really know what

00:12:29,250 --> 00:12:34,410
operating system that is what you know

00:12:31,280 --> 00:12:38,610
it just needs to know how to work on

00:12:34,410 --> 00:12:40,740
these on these resources so that's

00:12:38,610 --> 00:12:43,520
that's the idea of the uniform interface

00:12:40,740 --> 00:12:47,370
and it's a very core part of rest so

00:12:43,520 --> 00:12:50,220
this was 2000 he writes his dissertation

00:12:47,370 --> 00:12:52,950
now in 98 some people were also thinking

00:12:50,220 --> 00:12:55,230
of something else which they called web

00:12:52,950 --> 00:13:03,540
services and the main idea the domain

00:12:55,230 --> 00:13:05,910
implementation is soap and soap can use

00:13:03,540 --> 00:13:07,950
XML and HTTP so it was kind of

00:13:05,910 --> 00:13:09,690
considered a web technology but when you

00:13:07,950 --> 00:13:13,010
look at the architecture of soap it's

00:13:09,690 --> 00:13:15,990
very much non rest it doesn't work with

00:13:13,010 --> 00:13:18,060
resources with representations it's more

00:13:15,990 --> 00:13:19,770
remote procedure call like when you call

00:13:18,060 --> 00:13:23,040
a function locally but then over the

00:13:19,770 --> 00:13:24,900
network the idea was that it was much

00:13:23,040 --> 00:13:27,150
simpler than the main alternative that

00:13:24,900 --> 00:13:28,770
one before it which was korba which was

00:13:27,150 --> 00:13:31,050
this binary protocol for doing similar

00:13:28,770 --> 00:13:33,420
things but somehow things got out of

00:13:31,050 --> 00:13:36,720
hand and so what what was intended to be

00:13:33,420 --> 00:13:39,500
a very simple protocol kind of ended up

00:13:36,720 --> 00:13:39,500
being something like this

00:13:45,410 --> 00:13:54,630
so soap is not something that makes your

00:13:49,530 --> 00:13:57,000
developers happy and so and it's it's

00:13:54,630 --> 00:13:59,430
not something that really you know the

00:13:57,000 --> 00:14:01,680
thing with soap was that they they

00:13:59,430 --> 00:14:05,820
wanted to use HTTP as a transport

00:14:01,680 --> 00:14:08,340
protocol but keep that abstracted the

00:14:05,820 --> 00:14:10,980
way in in a layered way so it didn't

00:14:08,340 --> 00:14:12,930
really use the full you know like HTTPS

00:14:10,980 --> 00:14:14,970
headers for whether things are cacheable

00:14:12,930 --> 00:14:18,030
uses status codes there's all these

00:14:14,970 --> 00:14:20,010
interesting meta information that modern

00:14:18,030 --> 00:14:21,480
API is like try to leverage that as much

00:14:20,010 --> 00:14:23,880
as possible all that knowledge that has

00:14:21,480 --> 00:14:26,190
gone into few decades of evolving the

00:14:23,880 --> 00:14:27,870
web and so kind of had a different

00:14:26,190 --> 00:14:33,210
philosophies like no we can't really

00:14:27,870 --> 00:14:35,040
touch that that's a different layer so a

00:14:33,210 --> 00:14:39,480
few years later something else happened

00:14:35,040 --> 00:14:41,940
in 2005 the term Ajax was coined so a

00:14:39,480 --> 00:14:45,930
jack stands for asynchronous JavaScript

00:14:41,940 --> 00:14:47,820
and XML the Excel there is kind of a

00:14:45,930 --> 00:14:49,650
legacy thing it's not really that much

00:14:47,820 --> 00:14:51,780
about XML but the point here is that

00:14:49,650 --> 00:14:53,400
suddenly so we already talked about code

00:14:51,780 --> 00:14:57,480
on demand you can make your client

00:14:53,400 --> 00:14:59,700
better on the fly but this was kind of

00:14:57,480 --> 00:15:02,190
limited because your client still

00:14:59,700 --> 00:15:03,780
couldn't do it so network requests so

00:15:02,190 --> 00:15:05,670
you could you know you could load some

00:15:03,780 --> 00:15:07,980
functionality and a client and let the

00:15:05,670 --> 00:15:09,240
people like use that there but it was

00:15:07,980 --> 00:15:10,650
limited in what you could do with it

00:15:09,240 --> 00:15:12,300
because that client couldn't really talk

00:15:10,650 --> 00:15:14,040
back to the server if you wanted to go

00:15:12,300 --> 00:15:17,220
back to the server you still had to go

00:15:14,040 --> 00:15:19,080
through a full page reload so Ajax

00:15:17,220 --> 00:15:21,810
changed that suddenly your JavaScript

00:15:19,080 --> 00:15:23,310
really became you could start building

00:15:21,810 --> 00:15:24,990
really applications in there that could

00:15:23,310 --> 00:15:28,800
do their own network requests back to

00:15:24,990 --> 00:15:31,200
the server and so you've got these rich

00:15:28,800 --> 00:15:33,690
Internet applications you got a web 2.0

00:15:31,200 --> 00:15:37,290
you know this was the early days of

00:15:33,690 --> 00:15:39,660
Facebook so this is kind of where we see

00:15:37,290 --> 00:15:42,540
this shift where the browser which was

00:15:39,660 --> 00:15:44,810
always just a document browser start

00:15:42,540 --> 00:15:47,040
shifting very slowly but very

00:15:44,810 --> 00:15:51,630
persistently towards being more of an

00:15:47,040 --> 00:15:51,960
application platform and so suddenly you

00:15:51,630 --> 00:15:53,640
have the

00:15:51,960 --> 00:15:55,650
javascript talking back to the server so

00:15:53,640 --> 00:15:57,900
we need some some protocols some way of

00:15:55,650 --> 00:15:59,970
building that and you know we've already

00:15:57,900 --> 00:16:02,040
seen that developers aren't really that

00:15:59,970 --> 00:16:03,570
form of using soap and especially like

00:16:02,040 --> 00:16:05,910
you know using soap or something like

00:16:03,570 --> 00:16:08,160
that from your browser I don't know it's

00:16:05,910 --> 00:16:09,750
probably close to insanity so people

00:16:08,160 --> 00:16:11,220
came up with their own ideas and they're

00:16:09,750 --> 00:16:13,080
just okay you know like we we now we

00:16:11,220 --> 00:16:15,150
came up with this very lightweight thing

00:16:13,080 --> 00:16:18,290
called JavaScript object notation it's

00:16:15,150 --> 00:16:20,820
very simple as just built his very easy

00:16:18,290 --> 00:16:22,560
services where we we send some Jason to

00:16:20,820 --> 00:16:26,640
the server and we get some Jason back

00:16:22,560 --> 00:16:29,070
and you know everybody's happy but it

00:16:26,640 --> 00:16:30,450
was all pretty ad-hoc you know lots of

00:16:29,070 --> 00:16:32,400
people reinventing the wheel and there

00:16:30,450 --> 00:16:34,680
was it was kind of liking this this

00:16:32,400 --> 00:16:36,180
uniform interface ID like everybody kind

00:16:34,680 --> 00:16:38,760
of implemented their API is in their own

00:16:36,180 --> 00:16:41,220
way and a lot of it was was going back

00:16:38,760 --> 00:16:43,110
to the remote procedure call style you

00:16:41,220 --> 00:16:45,890
know perform this action on the server

00:16:43,110 --> 00:16:49,170
and give me something back completely

00:16:45,890 --> 00:16:50,700
ignoring this this concept of resources

00:16:49,170 --> 00:16:57,000
and this abstraction that makes the web

00:16:50,700 --> 00:17:01,580
scale so nicely so real stressed and how

00:16:57,000 --> 00:17:04,860
to make fielding keramat so five steps

00:17:01,580 --> 00:17:09,000
read feelings thesis pick a few ideas

00:17:04,860 --> 00:17:11,700
from it build some api's which basically

00:17:09,000 --> 00:17:14,430
do crud so basically your database

00:17:11,700 --> 00:17:20,490
operations create read update delete

00:17:14,430 --> 00:17:25,140
over jason and call that rest and then

00:17:20,490 --> 00:17:27,000
watch fielding throw a hissy fit so this

00:17:25,140 --> 00:17:28,530
is a very famous ramp from fielding

00:17:27,000 --> 00:17:30,840
where he says okay you know everybody's

00:17:28,530 --> 00:17:33,570
calling our API stressed nowadays this

00:17:30,840 --> 00:17:38,100
is not rest you know call it whatever

00:17:33,570 --> 00:17:39,540
you like but there are certain so

00:17:38,100 --> 00:17:41,250
there's so much coupling on this play

00:17:39,540 --> 00:17:45,150
that it should be given an x rating look

00:17:41,250 --> 00:17:46,920
very nice graphic quote there so that's

00:17:45,150 --> 00:17:48,420
kind of where we are today that a lot of

00:17:46,920 --> 00:17:52,200
people still talk about rest in this

00:17:48,420 --> 00:17:53,970
sense and so to kind of make the

00:17:52,200 --> 00:17:55,650
distinction between actual rest some

00:17:53,970 --> 00:18:01,920
people have started calling actual rest

00:17:55,650 --> 00:18:05,019
hypermedia api's so that's kind of where

00:18:01,920 --> 00:18:07,730
we're heading with this so

00:18:05,019 --> 00:18:10,600
well to go back to this so what would

00:18:07,730 --> 00:18:13,100
the problem with these AP is is that

00:18:10,600 --> 00:18:15,190
sure they got they got some good ideas

00:18:13,100 --> 00:18:18,610
from feeling like the idea that you know

00:18:15,190 --> 00:18:21,830
you have resources say that you have a

00:18:18,610 --> 00:18:24,889
URL that points to a user resource and

00:18:21,830 --> 00:18:27,409
you can put to that I supposed to create

00:18:24,889 --> 00:18:30,830
a new one or post to updated or the

00:18:27,409 --> 00:18:35,330
other way around I always forget but

00:18:30,830 --> 00:18:36,619
these these URLs are what is called out

00:18:35,330 --> 00:18:39,679
of bad information you have to

00:18:36,619 --> 00:18:41,389
communicate this like your server and

00:18:39,679 --> 00:18:43,879
your client boat need to know about this

00:18:41,389 --> 00:18:47,269
hierarchy of URLs whereas in a proper

00:18:43,879 --> 00:18:49,100
hypermedia system your server is the

00:18:47,269 --> 00:18:51,950
only one who knows about your URL

00:18:49,100 --> 00:18:54,049
structures and it just passes you links

00:18:51,950 --> 00:18:56,019
to navigate around and to find

00:18:54,049 --> 00:19:00,619
everything out that way you can also

00:18:56,019 --> 00:19:04,429
change where things point to and sort of

00:19:00,619 --> 00:19:08,389
get that nice scalability that that way

00:19:04,429 --> 00:19:09,889
of evolving your systems so that's one

00:19:08,389 --> 00:19:14,090
of the main violations the other thing

00:19:09,889 --> 00:19:16,519
is that yeah so what rails really did in

00:19:14,090 --> 00:19:19,429
many systems after rails was making it

00:19:16,519 --> 00:19:22,669
simple when you have a database table to

00:19:19,429 --> 00:19:24,889
expose that table to your JavaScript

00:19:22,669 --> 00:19:29,419
application so you can do those typical

00:19:24,889 --> 00:19:30,950
database operations but what what

00:19:29,419 --> 00:19:32,179
feeling proposed is if you really want

00:19:30,950 --> 00:19:35,600
to get all these benefits of a web

00:19:32,179 --> 00:19:43,399
architecture is that you think of your

00:19:35,600 --> 00:19:45,830
application as a state machine so the

00:19:43,399 --> 00:19:49,460
the point is that your application can

00:19:45,830 --> 00:19:52,159
can be in different states and these

00:19:49,460 --> 00:19:54,169
states for you can go from one state to

00:19:52,159 --> 00:19:57,980
another that's basically following a

00:19:54,169 --> 00:19:59,509
link so 11 representation of a resource

00:19:57,980 --> 00:20:03,559
is basically one state that your

00:19:59,509 --> 00:20:07,070
application can be in this might i know

00:20:03,559 --> 00:20:08,840
this is pretty abstract i'm trying to

00:20:07,070 --> 00:20:11,539
make is clear but there's plenty of time

00:20:08,840 --> 00:20:15,830
for questions at the end if this is not

00:20:11,539 --> 00:20:18,169
very clear so what feeling says is

00:20:15,830 --> 00:20:21,580
hypermedia is a simultaneous presence

00:20:18,169 --> 00:20:24,619
tation of information and controls and

00:20:21,580 --> 00:20:27,519
the information becomes the affordance

00:20:24,619 --> 00:20:30,730
true which the user or the automaton

00:20:27,519 --> 00:20:33,830
obtains choices and selects actions

00:20:30,730 --> 00:20:36,529
right so there's two big words in here

00:20:33,830 --> 00:20:39,080
hypermedia our hypertext is media

00:20:36,529 --> 00:20:41,659
intertwined with hyperlinks to form a

00:20:39,080 --> 00:20:43,070
nonlinear medium of information just

00:20:41,659 --> 00:20:44,299
like we know the WEP you know like

00:20:43,070 --> 00:20:46,519
there's just all these different pages

00:20:44,299 --> 00:20:48,489
and you can have links between them so

00:20:46,519 --> 00:20:51,679
it's a nonlinear system of information

00:20:48,489 --> 00:20:54,559
and affordances are the set of possible

00:20:51,679 --> 00:20:57,070
actions the user is made aware of so

00:20:54,559 --> 00:21:01,820
contrast this with a typical you know

00:20:57,070 --> 00:21:03,859
popular named REST API know where is

00:21:01,820 --> 00:21:05,149
your system being made aware of what it

00:21:03,859 --> 00:21:07,070
can do this is something that you

00:21:05,149 --> 00:21:09,859
communicate separately you can do a post

00:21:07,070 --> 00:21:11,509
to this URL this is what it does whereas

00:21:09,859 --> 00:21:14,149
in a hypermedia that's all kind of

00:21:11,509 --> 00:21:16,789
inside the information that you're

00:21:14,149 --> 00:21:21,289
sending across so if you really want to

00:21:16,789 --> 00:21:22,999
adopt this idea you choose your media

00:21:21,289 --> 00:21:25,580
type this is what used to be mime types

00:21:22,999 --> 00:21:28,159
so this is this how you're going to

00:21:25,580 --> 00:21:32,539
represent your resources something like

00:21:28,159 --> 00:21:34,519
hopeless jason or jason LD these are

00:21:32,539 --> 00:21:38,080
kind of attempts at standardizing this

00:21:34,519 --> 00:21:40,940
to have media types for representing

00:21:38,080 --> 00:21:44,059
resources in a hypermedia way then you

00:21:40,940 --> 00:21:46,249
define how different things can relate

00:21:44,059 --> 00:21:48,169
to each other this is an idea that goes

00:21:46,249 --> 00:21:50,299
back to the atom specification I don't

00:21:48,169 --> 00:21:52,340
know if many people are familiar with

00:21:50,299 --> 00:21:55,100
Adam but they kind of came up with this

00:21:52,340 --> 00:21:57,980
idea that if you have one one resource

00:21:55,100 --> 00:21:59,690
in this case it were documents and say

00:21:57,980 --> 00:22:02,359
you know if it's a list of documents

00:21:59,690 --> 00:22:04,609
maybe one link points to the to the next

00:22:02,359 --> 00:22:07,190
part of the list maybe one link points

00:22:04,609 --> 00:22:08,929
to the author resource maybe one link

00:22:07,190 --> 00:22:10,489
points to a way to make a comment on

00:22:08,929 --> 00:22:12,859
that document so these are different

00:22:10,489 --> 00:22:15,109
relationships that you can have between

00:22:12,859 --> 00:22:18,200
your representations between your

00:22:15,109 --> 00:22:20,659
resources and so you drive your

00:22:18,200 --> 00:22:25,879
application state through these links

00:22:20,659 --> 00:22:29,059
through these hypermedia controls so one

00:22:25,879 --> 00:22:31,099
type that's kind of slowly becoming

00:22:29,059 --> 00:22:31,970
popular this is still all bit early

00:22:31,099 --> 00:22:34,280
development

00:22:31,970 --> 00:22:39,020
but one that you see a lot already is

00:22:34,280 --> 00:22:40,430
how and here's an example so Hall

00:22:39,020 --> 00:22:43,370
basically says okay you know it's just

00:22:40,430 --> 00:22:45,370
it's just a JSON object with some fields

00:22:43,370 --> 00:22:51,830
on it but then you have this special

00:22:45,370 --> 00:22:54,560
links hash object in it so it contains

00:22:51,830 --> 00:22:56,540
in this case a link back to itself so

00:22:54,560 --> 00:22:57,980
this is this is for i work at ticket

00:22:56,540 --> 00:23:00,230
solve this is an irish company that has

00:22:57,980 --> 00:23:04,040
a platform for selling concert tickets

00:23:00,230 --> 00:23:05,300
and this is a representation of a single

00:23:04,040 --> 00:23:07,520
account of one of our customers

00:23:05,300 --> 00:23:10,100
basically in this case they're a theater

00:23:07,520 --> 00:23:13,070
called Leicester Square Theatre and so I

00:23:10,100 --> 00:23:16,000
i read this is a representation of the

00:23:13,070 --> 00:23:18,950
resource Leicester Square Theatre and

00:23:16,000 --> 00:23:21,920
Leicester Square Theatre has shows and

00:23:18,950 --> 00:23:23,540
it has venues and so here we get the

00:23:21,920 --> 00:23:27,050
link to if I want to have all the shows

00:23:23,540 --> 00:23:29,660
of leicester square theatre or if I want

00:23:27,050 --> 00:23:33,290
a specific venue here is a link template

00:23:29,660 --> 00:23:35,480
to request that venue so at no point to

00:23:33,290 --> 00:23:37,850
our heart code any of those URLs in my

00:23:35,480 --> 00:23:42,920
application the application just browse

00:23:37,850 --> 00:23:45,560
around in in the API the initial

00:23:42,920 --> 00:23:48,290
benefits that you get of this is that

00:23:45,560 --> 00:23:50,330
it's it's easy for developers there's no

00:23:48,290 --> 00:23:52,190
separate stack of documentation that you

00:23:50,330 --> 00:23:55,070
need to read through you just get an API

00:23:52,190 --> 00:23:56,570
entry point you read it and then you see

00:23:55,070 --> 00:23:58,340
okay these are the places where I can go

00:23:56,570 --> 00:24:00,680
from there and you can just browse

00:23:58,340 --> 00:24:03,200
around poke around and sort of form your

00:24:00,680 --> 00:24:06,890
mental model of this whole space that

00:24:03,200 --> 00:24:08,420
the API allows you to access and same

00:24:06,890 --> 00:24:09,760
with with your client you don't have to

00:24:08,420 --> 00:24:12,230
hard code all these links it just

00:24:09,760 --> 00:24:16,820
follows the links that are present in

00:24:12,230 --> 00:24:18,380
the information longer-term benefits so

00:24:16,820 --> 00:24:20,630
first to say that suddenly you decide

00:24:18,380 --> 00:24:22,250
that some of this you know your system

00:24:20,630 --> 00:24:24,410
is going to big and you want to split it

00:24:22,250 --> 00:24:26,450
over multiple systems you can just

00:24:24,410 --> 00:24:30,110
update us urls to point somewhere else

00:24:26,450 --> 00:24:32,360
and have that scaling benefit of maybe

00:24:30,110 --> 00:24:34,730
you want to put some stuff on a content

00:24:32,360 --> 00:24:37,340
distribution network you just put a

00:24:34,730 --> 00:24:39,230
different URL there and your client

00:24:37,340 --> 00:24:40,760
doesn't know anything about how two

00:24:39,230 --> 00:24:45,149
constructors it just reach those and

00:24:40,760 --> 00:24:47,950
uses those you can also add

00:24:45,149 --> 00:24:50,259
extra information in there that an older

00:24:47,950 --> 00:24:52,149
client simply ignores but that newer

00:24:50,259 --> 00:24:54,669
clients can make use of so you kind of

00:24:52,149 --> 00:24:58,600
have you know the same way that the web

00:24:54,669 --> 00:25:00,399
has evolved so newer browsers will just

00:24:58,600 --> 00:25:02,679
ignore any HTML that they don't really

00:25:00,399 --> 00:25:06,429
recognize in a similar way you can

00:25:02,679 --> 00:25:08,740
evolve your API but where it really

00:25:06,429 --> 00:25:11,080
shines is if you really think bigger

00:25:08,740 --> 00:25:13,360
scale so they'd say like ok to really

00:25:11,080 --> 00:25:17,619
get the big benefits of this think on a

00:25:13,360 --> 00:25:20,679
scale of decades so suppose you're a

00:25:17,619 --> 00:25:22,419
bookseller and you have your system and

00:25:20,679 --> 00:25:24,490
many clients integrate with that system

00:25:22,419 --> 00:25:26,379
and you're using hypermedia and at some

00:25:24,490 --> 00:25:28,320
point you grow big and you buy up some

00:25:26,379 --> 00:25:31,629
other booksellers with their own systems

00:25:28,320 --> 00:25:33,820
you could integrate those databases with

00:25:31,629 --> 00:25:35,440
your database maybe put big migrations

00:25:33,820 --> 00:25:38,110
to put it all in one database or

00:25:35,440 --> 00:25:40,450
whatever or you can just put a

00:25:38,110 --> 00:25:43,419
hypermedia facade in front of their

00:25:40,450 --> 00:25:45,279
systems and link between them so they

00:25:43,419 --> 00:25:47,590
can be completely different systems on

00:25:45,279 --> 00:25:49,389
different servers on different operating

00:25:47,590 --> 00:25:52,779
systems different programming languages

00:25:49,389 --> 00:25:54,850
but it's just it's just URLs they're

00:25:52,779 --> 00:25:56,559
just pointing to each other and it's all

00:25:54,850 --> 00:25:58,149
this uniform interface idea and your

00:25:56,559 --> 00:26:02,679
client doesn't have to change at all

00:25:58,149 --> 00:26:05,950
just works on the fly but a lot of this

00:26:02,679 --> 00:26:11,169
yeah will depend on media types getting

00:26:05,950 --> 00:26:13,059
standardized it's kind of it's a bit of

00:26:11,169 --> 00:26:16,509
a stretch but there there there was this

00:26:13,059 --> 00:26:18,309
concept of the Semantic Web to add the

00:26:16,509 --> 00:26:20,950
semantic layer of information to web

00:26:18,309 --> 00:26:22,659
pages so that machines can browse them

00:26:20,950 --> 00:26:25,289
and see what the knowledge is that's

00:26:22,659 --> 00:26:28,600
really in there and that relies a lot on

00:26:25,289 --> 00:26:30,220
standardizing vocabulary so that you

00:26:28,600 --> 00:26:32,200
know the semantics of a certain piece of

00:26:30,220 --> 00:26:34,539
information so kind of the same thing

00:26:32,200 --> 00:26:37,360
comes back here if we can standardize

00:26:34,539 --> 00:26:40,119
for certain problem domains vocabularies

00:26:37,360 --> 00:26:42,460
and Link relationships then suddenly

00:26:40,119 --> 00:26:45,009
completely different systems even from

00:26:42,460 --> 00:26:49,029
different vendors can start linking to

00:26:45,009 --> 00:26:50,590
each other also for for machining and

00:26:49,029 --> 00:26:53,460
consumption and not just from human

00:26:50,590 --> 00:26:53,460
consumption from a browser

00:26:55,130 --> 00:27:01,710
so that's kind of the future where

00:26:58,080 --> 00:27:03,330
hopefully we're going to so there's

00:27:01,710 --> 00:27:05,310
still a lot of experimentation happening

00:27:03,330 --> 00:27:08,790
on this there's a really active and

00:27:05,310 --> 00:27:10,380
interesting mailing list API craft where

00:27:08,790 --> 00:27:11,970
a lot of this discussion goes on so one

00:27:10,380 --> 00:27:13,980
of the popular formats now is hall

00:27:11,970 --> 00:27:17,100
there's also a collection that plus

00:27:13,980 --> 00:27:19,290
Jason Jason ldj something data there

00:27:17,100 --> 00:27:22,860
siren which is not based on Jason but

00:27:19,290 --> 00:27:25,410
it's based on edn I think which is based

00:27:22,860 --> 00:27:27,480
on the closure syntax so it's an

00:27:25,410 --> 00:27:32,370
alternative to Jason because Jason also

00:27:27,480 --> 00:27:34,350
has its shortcomings and then a guy

00:27:32,370 --> 00:27:35,490
who's been writing and researching a lot

00:27:34,350 --> 00:27:38,460
of this stuff since early on just

00:27:35,490 --> 00:27:41,580
recently launched a new a new format

00:27:38,460 --> 00:27:46,350
called uber and the cool thing with this

00:27:41,580 --> 00:27:50,100
is also that even even if you know new

00:27:46,350 --> 00:27:52,110
formats arise because HTTP already has

00:27:50,100 --> 00:27:54,150
this content negotiation mechanism where

00:27:52,110 --> 00:27:56,130
your client says okay this is the stuff

00:27:54,150 --> 00:27:57,540
I understand and then your server looks

00:27:56,130 --> 00:27:59,730
okay this is the stuff that I can serve

00:27:57,540 --> 00:28:02,220
up and it just gives like the best thing

00:27:59,730 --> 00:28:03,570
your client can deal with so even if a

00:28:02,220 --> 00:28:05,520
newer format comes around then you want

00:28:03,570 --> 00:28:07,530
to support that you can you can just

00:28:05,520 --> 00:28:13,260
like serve up the representation that's

00:28:07,530 --> 00:28:16,110
best suitable for for the client sure

00:28:13,260 --> 00:28:18,300
what's going on there and so yeah the

00:28:16,110 --> 00:28:19,980
future there's no local linking it's

00:28:18,300 --> 00:28:22,320
linking across organizations where you

00:28:19,980 --> 00:28:24,780
really get a machine consumable web the

00:28:22,320 --> 00:28:26,850
way that you have a hyperlinked web that

00:28:24,780 --> 00:28:29,280
we have today I think is really

00:28:26,850 --> 00:28:32,070
interesting what you already see now

00:28:29,280 --> 00:28:34,020
already is that a directory services are

00:28:32,070 --> 00:28:36,300
springing up so how do we find out

00:28:34,020 --> 00:28:38,720
service providers that can offer certain

00:28:36,300 --> 00:28:41,070
certain information certain services

00:28:38,720 --> 00:28:45,180
aggregators that read these different

00:28:41,070 --> 00:28:48,090
api's and aggregate data and yeah

00:28:45,180 --> 00:28:49,410
hopefully in the future though this is I

00:28:48,090 --> 00:28:51,750
don't know if you're familiar with the

00:28:49,410 --> 00:28:55,070
unholstered initiative it's basically an

00:28:51,750 --> 00:28:57,660
idea of building rich browser in

00:28:55,070 --> 00:29:00,240
applications that are not tied to a

00:28:57,660 --> 00:29:02,550
specific vendor and so you can basically

00:29:00,240 --> 00:29:04,770
let them talk to whatever back-end your

00:29:02,550 --> 00:29:06,960
preferred instead of you know signing up

00:29:04,770 --> 00:29:08,190
for gmail you just have your mail

00:29:06,960 --> 00:29:10,710
application in your browser

00:29:08,190 --> 00:29:13,889
you can use whatever mail provider that

00:29:10,710 --> 00:29:16,080
supplies that interface so I'm really

00:29:13,889 --> 00:29:18,389
excited about that possibility as well

00:29:16,080 --> 00:29:22,860
with that going more mainstream on top

00:29:18,389 --> 00:29:28,190
of these api's so that was there was a

00:29:22,860 --> 00:29:28,190

YouTube URL: https://www.youtube.com/watch?v=dU6mQ0WwUGs


