Title: Kod.io 2014 - The Chroma Zone Engineering Color on the Web by Lea Verou
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	We use color every day, but how well do we really understand it?
More often than not, we are merely scratching the surface of a large and complicated discipline.

In this dynamic session, we will scratch a little deeper, and you will be surprised at how deep the colorful rabbit hole goes.

How does color work on our screens? What's the difference between color models and color spaces? Which existing features of CSS Color are we underutilizing?

What's in store for CSS Color level 4? How can we pick both aesthetically pleasing and accessible color combinations?

This is not a design talk, it's a technical talk about the inner workings of one of the most important design aspects, with many practical takeaways.

Whether you identify as a designer or a developer, you will walk out of this session with a newfound confidence about anything color related.

Help us caption & translate this video!

http://amara.org/v/FG38/
Captions: 
	00:00:17,950 --> 00:00:20,010
you

00:00:26,769 --> 00:00:33,079
hi I'm Leah thanks for being here if

00:00:31,490 --> 00:00:35,090
you've ever heard about me before it's

00:00:33,079 --> 00:00:37,489
probably because one of my open source

00:00:35,090 --> 00:00:41,090
projects the most popular of which are

00:00:37,489 --> 00:00:44,239
this one's I'm also a member of the CSS

00:00:41,090 --> 00:00:45,949
working group I used to work for w3c now

00:00:44,239 --> 00:00:48,769
mostly spending my days writing a book

00:00:45,949 --> 00:00:50,690
about CSS for Riley which hasn't come

00:00:48,769 --> 00:00:53,870
out yet but it will by the end of this

00:00:50,690 --> 00:00:56,659
year and also at the end of this year

00:00:53,870 --> 00:00:59,629
I'm quite changing my life and I'm

00:00:56,659 --> 00:01:03,320
starting at MIT as a grad student which

00:00:59,629 --> 00:01:05,150
is quite exciting and scary so enough

00:01:03,320 --> 00:01:08,360
about me let's move on to more

00:01:05,150 --> 00:01:11,360
interesting things like how color works

00:01:08,360 --> 00:01:13,310
on screen so let's assume this is a

00:01:11,360 --> 00:01:15,890
white pixel or at least this is how most

00:01:13,310 --> 00:01:18,830
people imagine a white pixel most people

00:01:15,890 --> 00:01:20,810
think of pixels as some squares that can

00:01:18,830 --> 00:01:22,640
have like millions of possible states

00:01:20,810 --> 00:01:24,500
for every color but actually the reality

00:01:22,640 --> 00:01:26,240
is a bit different and the white pixel

00:01:24,500 --> 00:01:28,430
does not quite look like this it looks

00:01:26,240 --> 00:01:31,100
more like this and these three are

00:01:28,430 --> 00:01:32,960
called subpixels so every pixel that you

00:01:31,100 --> 00:01:34,280
see on your screen is divided axe is

00:01:32,960 --> 00:01:36,260
actually divided into three sub-pixels

00:01:34,280 --> 00:01:38,810
one for red one for green one for blue

00:01:36,260 --> 00:01:41,930
and in our modern LCD screens they

00:01:38,810 --> 00:01:44,630
actually this broke again I think oh

00:01:41,930 --> 00:01:47,409
okay they actually look more like this

00:01:44,630 --> 00:01:49,460
in CRT screens they're a bit different

00:01:47,409 --> 00:01:52,040
their shapes are different but the

00:01:49,460 --> 00:01:53,960
general idea is still the same every

00:01:52,040 --> 00:01:56,600
pixel is formed by three sub-pixels

00:01:53,960 --> 00:01:59,000
their order might also be different the

00:01:56,600 --> 00:02:01,280
blue might be first instead of the red

00:01:59,000 --> 00:02:02,870
being first but the general idea is the

00:02:01,280 --> 00:02:04,850
same you might be wondering how on earth

00:02:02,870 --> 00:02:06,560
is this a white pixel this is just red

00:02:04,850 --> 00:02:08,840
green blue this doesn't look like white

00:02:06,560 --> 00:02:11,750
at all and yes when you see it in this

00:02:08,840 --> 00:02:13,819
in this kind of size it doesn't look

00:02:11,750 --> 00:02:18,260
like white but when it starts getting

00:02:13,819 --> 00:02:21,080
smaller and smaller and smaller it

00:02:18,260 --> 00:02:24,439
starts looking a bit more like white and

00:02:21,080 --> 00:02:26,150
if this was actually a proper screen

00:02:24,439 --> 00:02:28,069
with proper sub pixels it wouldn't look

00:02:26,150 --> 00:02:30,409
gray now it would look more like white

00:02:28,069 --> 00:02:33,409
because that's the general idea your eye

00:02:30,409 --> 00:02:35,690
that can't tell that level of detail so

00:02:33,409 --> 00:02:37,340
when those sub pixels are really small

00:02:35,690 --> 00:02:39,920
your eye tends to blend the colors

00:02:37,340 --> 00:02:40,520
together and if you blend lights that

00:02:39,920 --> 00:02:44,470
are blue

00:02:40,520 --> 00:02:47,180
green red you end up seeing white and

00:02:44,470 --> 00:02:49,160
this is how subpixels look for different

00:02:47,180 --> 00:02:50,690
colors because depending on what color

00:02:49,160 --> 00:02:52,430
you're trying to make different parts of

00:02:50,690 --> 00:02:54,140
this different subpixels light up at

00:02:52,430 --> 00:02:57,380
different intensities for example if you

00:02:54,140 --> 00:02:59,960
want to make orange which is fully read

00:02:57,380 --> 00:03:01,580
and has some green as you can see the

00:02:59,960 --> 00:03:02,930
green sub-pixel is not completely lit

00:03:01,580 --> 00:03:05,690
this is how it looks when it's

00:03:02,930 --> 00:03:08,870
completely lit up so it's like halfway

00:03:05,690 --> 00:03:10,910
through and that we the blue sub-pixel

00:03:08,870 --> 00:03:13,700
is completely off because orange doesn't

00:03:10,910 --> 00:03:17,810
have any blue and you can see how they

00:03:13,700 --> 00:03:19,100
look for more even more colors by way my

00:03:17,810 --> 00:03:21,170
slides are online so you don't need to

00:03:19,100 --> 00:03:24,290
keep any notes or try to completely

00:03:21,170 --> 00:03:29,780
understand every single bit of code or

00:03:24,290 --> 00:03:32,590
anything and all the demos are there so

00:03:29,780 --> 00:03:36,440
this is our friend the sub-pixel again

00:03:32,590 --> 00:03:39,530
and usually everything I say today has

00:03:36,440 --> 00:03:41,630
exceptions especially these days but

00:03:39,530 --> 00:03:44,990
usually we use eight bits the store

00:03:41,630 --> 00:03:47,180
every channel every channel eight bits

00:03:44,990 --> 00:03:48,980
for red egg bits for green 8-bit bits

00:03:47,180 --> 00:03:51,200
for blue which is exactly why they

00:03:48,980 --> 00:03:54,500
usually go from 0 to 2 50 50 because

00:03:51,200 --> 00:03:56,120
when you have 8 bits you can have to

00:03:54,500 --> 00:03:57,920
raise to the eight state different

00:03:56,120 --> 00:04:01,360
states which is 250 eight different

00:03:57,920 --> 00:04:04,910
states which is 0 to 2 50 50 which means

00:04:01,360 --> 00:04:07,280
every every pixel is 24 bits which is

00:04:04,910 --> 00:04:10,490
three bytes so if you have an

00:04:07,280 --> 00:04:11,900
uncompressed image with absolutely no

00:04:10,490 --> 00:04:14,090
compression and no transparency because

00:04:11,900 --> 00:04:16,489
transparency is an extra channel the

00:04:14,090 --> 00:04:19,760
this is exactly what it's its size looks

00:04:16,489 --> 00:04:21,680
like the number of pixels x 3 that's the

00:04:19,760 --> 00:04:24,740
number of bytes it has you can rest it

00:04:21,680 --> 00:04:29,960
out if you try like a BMP image which is

00:04:24,740 --> 00:04:33,050
completely uncompressed and sub pixels

00:04:29,960 --> 00:04:37,160
are quite interesting because I'm sure

00:04:33,050 --> 00:04:38,510
all of you have zoomed in in text on the

00:04:37,160 --> 00:04:43,100
screen and have noticed these weird

00:04:38,510 --> 00:04:45,770
colors that it's pixels have on the only

00:04:43,100 --> 00:04:48,310
edges it's change this text to something

00:04:45,770 --> 00:04:48,310
nicer

00:04:48,560 --> 00:04:56,070
so actually the reason these there are

00:04:53,430 --> 00:04:59,639
these weird colors on the edges of text

00:04:56,070 --> 00:05:01,259
is because in these days anti-aliasing

00:04:59,639 --> 00:05:03,900
for fonts is usually done through

00:05:01,259 --> 00:05:05,639
subpixels there's also grayscale

00:05:03,900 --> 00:05:11,009
anti-aliasing which is just lightening

00:05:05,639 --> 00:05:13,590
up different shades of black but usually

00:05:11,009 --> 00:05:15,030
it's done through subpixels and if

00:05:13,590 --> 00:05:16,620
you're gray up the whole thing the

00:05:15,030 --> 00:05:18,720
sub-pixels look like this this gives you

00:05:16,620 --> 00:05:21,419
a much better degree of control so the

00:05:18,720 --> 00:05:24,060
outlines look smoother but if you zoom

00:05:21,419 --> 00:05:25,830
in it looks weird because when you light

00:05:24,060 --> 00:05:27,330
up different sub pixels and not all of

00:05:25,830 --> 00:05:30,810
them at the same time you get a color

00:05:27,330 --> 00:05:35,070
you don't get black or gray so for

00:05:30,810 --> 00:05:37,440
example if you see here this channel is

00:05:35,070 --> 00:05:40,860
lit up much more than this so you end up

00:05:37,440 --> 00:05:45,870
getting this weird orange and as you

00:05:40,860 --> 00:05:47,550
move it as you move the text the the

00:05:45,870 --> 00:05:50,039
sub-pixels you have to use for until I

00:05:47,550 --> 00:05:53,669
say for a frontier liasing are different

00:05:50,039 --> 00:05:58,530
so the the colors change and you can

00:05:53,669 --> 00:06:01,500
notice that the pixels used on the on

00:05:58,530 --> 00:06:03,449
the left are more reddish and the pixels

00:06:01,500 --> 00:06:05,610
used on the right are more bluish

00:06:03,449 --> 00:06:09,300
exactly because you have to light up the

00:06:05,610 --> 00:06:11,460
first sub pixels to to do anti-aliasing

00:06:09,300 --> 00:06:13,620
on the right and the last and the third

00:06:11,460 --> 00:06:16,139
ones and the second third ones to do it

00:06:13,620 --> 00:06:21,630
on the left you can see how it looks on

00:06:16,139 --> 00:06:24,030
gray scale so let's move on to color in

00:06:21,630 --> 00:06:26,190
code which is basically color in CSS and

00:06:24,030 --> 00:06:28,880
color in JavaScript there will be quite

00:06:26,190 --> 00:06:33,180
a bit of JavaScript I hope that's okay

00:06:28,880 --> 00:06:36,030
so if you think about RGB it's basically

00:06:33,180 --> 00:06:39,000
a coordinate system with three

00:06:36,030 --> 00:06:41,159
coordinates red green and blue and they

00:06:39,000 --> 00:06:43,889
go from 0 to 3 50 50 so if you think

00:06:41,159 --> 00:06:46,130
about it geometrically all the possible

00:06:43,889 --> 00:06:49,110
colors you can achieve with RGB are

00:06:46,130 --> 00:06:51,690
basically a cube and this point is white

00:06:49,110 --> 00:06:53,310
because to achieve white with RGB uni

00:06:51,690 --> 00:06:56,880
all the components need to be other

00:06:53,310 --> 00:06:58,889
maximum to 5050 usually and you can see

00:06:56,880 --> 00:07:00,750
the different colors the most fully

00:06:58,889 --> 00:07:01,180
saturated bright colors are on the edges

00:07:00,750 --> 00:07:02,830
of the

00:07:01,180 --> 00:07:05,680
OOP don't use those colors they're

00:07:02,830 --> 00:07:12,039
usually pretty ugly like this one or

00:07:05,680 --> 00:07:13,600
this one he and however on screens when

00:07:12,039 --> 00:07:14,830
we're using color Pickers for example to

00:07:13,600 --> 00:07:16,870
select the color we can't really use a

00:07:14,830 --> 00:07:18,940
cube there was a website at some point

00:07:16,870 --> 00:07:21,280
that tried to make to enable users to

00:07:18,940 --> 00:07:22,960
select colors three-dimensionally didn't

00:07:21,280 --> 00:07:25,570
work very well these other screens are

00:07:22,960 --> 00:07:28,150
two-dimensional so we can't really use a

00:07:25,570 --> 00:07:30,310
cube to select colors so the next best

00:07:28,150 --> 00:07:34,120
thing when you need to represent the

00:07:30,310 --> 00:07:36,280
three coordinate system in two

00:07:34,120 --> 00:07:38,740
dimensions is to flatten one of the

00:07:36,280 --> 00:07:40,720
dimensions and so a plane with the other

00:07:38,740 --> 00:07:44,080
two which is what this type of color

00:07:40,720 --> 00:07:45,910
picker usually does so you can change

00:07:44,080 --> 00:07:47,349
you can alter one of the dough what one

00:07:45,910 --> 00:07:50,229
of the three dimensions and you can see

00:07:47,349 --> 00:07:53,410
all the resulting colors here so when

00:07:50,229 --> 00:07:55,210
red is for example 36 as it is here

00:07:53,410 --> 00:07:58,360
these are all the possible colors you

00:07:55,210 --> 00:08:01,449
can achieve and you can move this and

00:07:58,360 --> 00:08:03,460
save all the different colors you can

00:08:01,449 --> 00:08:05,169
get if you keep these constants and you

00:08:03,460 --> 00:08:09,520
change red and you can change the

00:08:05,169 --> 00:08:10,630
coordinates here so that you keep green

00:08:09,520 --> 00:08:12,099
constant and you can see all the

00:08:10,630 --> 00:08:16,210
possible colors that you can achieve

00:08:12,099 --> 00:08:18,570
with specific values of green and same

00:08:16,210 --> 00:08:18,570
with blue

00:08:23,310 --> 00:08:29,860
so as you probably know you can use this

00:08:27,400 --> 00:08:32,680
sort of notation in CSS i'm pretty sure

00:08:29,860 --> 00:08:34,120
you've used it millions of times you

00:08:32,680 --> 00:08:38,529
just specify the three coordinates you

00:08:34,120 --> 00:08:41,080
can specify percentages if you feel like

00:08:38,529 --> 00:08:44,950
it but it's still kind of not very

00:08:41,080 --> 00:08:46,930
useful there's also this one which is

00:08:44,950 --> 00:08:50,080
even more complicated than using decimal

00:08:46,930 --> 00:08:51,880
numbers for for RGB because it's equal

00:08:50,080 --> 00:08:53,500
is it's equally complicated as RGB

00:08:51,880 --> 00:08:55,390
because humans are not really used to

00:08:53,500 --> 00:08:58,120
thinking about colors in that way we

00:08:55,390 --> 00:09:01,420
don't say I want a color that has some

00:08:58,120 --> 00:09:04,899
red light mixed with half green lights

00:09:01,420 --> 00:09:07,480
we say I want an orange so RGB is not

00:09:04,899 --> 00:09:09,520
exactly intuitive and hex RGB is even

00:09:07,480 --> 00:09:11,950
less intuitive because it not only you

00:09:09,520 --> 00:09:15,270
have to think in RGB terms but you also

00:09:11,950 --> 00:09:15,270
need to convert decimal to hexadecimal

00:09:19,410 --> 00:09:24,670
and the second two are the green channel

00:09:22,000 --> 00:09:26,589
the last two are the blue channel and

00:09:24,670 --> 00:09:30,100
we've probably internalized by now that

00:09:26,589 --> 00:09:31,600
FF means to 5050 and 0 is 0 means 0

00:09:30,100 --> 00:09:34,029
because those are the maximum and the

00:09:31,600 --> 00:09:35,860
minimum values we can get but can we

00:09:34,029 --> 00:09:42,399
really say off the top of our head what

00:09:35,860 --> 00:09:45,490
5a means that it's 90 and it's actually

00:09:42,399 --> 00:09:47,260
this color which doesn't really show as

00:09:45,490 --> 00:09:54,690
nice as it doesn't my screen over there

00:09:47,260 --> 00:09:58,750
I was worried about that um yeah oh well

00:09:54,690 --> 00:10:01,420
so even though we've we've internalized

00:09:58,750 --> 00:10:04,270
some values some text values and what

00:10:01,420 --> 00:10:07,510
they correspond to in decimal most most

00:10:04,270 --> 00:10:10,589
of us don't really understand text as

00:10:07,510 --> 00:10:13,839
well but text is actually pretty simple

00:10:10,589 --> 00:10:15,520
we have nine we have 10 digits for

00:10:13,839 --> 00:10:18,520
decimal these are the numbers were used

00:10:15,520 --> 00:10:21,490
to and hex digits start off as the same

00:10:18,520 --> 00:10:24,310
10 digits they are just more than you

00:10:21,490 --> 00:10:25,890
there there we have 16 hex digits that's

00:10:24,310 --> 00:10:30,150
why it's called hex hex means

00:10:25,890 --> 00:10:32,470
hexadecimal which is related to 16 and

00:10:30,150 --> 00:10:35,020
you might be wondering how does a digit

00:10:32,470 --> 00:10:35,920
look after nine well you probably know

00:10:35,020 --> 00:10:40,300
the answer already because

00:10:35,920 --> 00:10:43,290
used it but after we run out of digits

00:10:40,300 --> 00:10:45,910
of that sort we start using letters and

00:10:43,290 --> 00:10:48,610
if it wasn't text and it was a number a

00:10:45,910 --> 00:10:50,320
number system with base I don't know 32

00:10:48,610 --> 00:10:53,410
we would use even more letters we could

00:10:50,320 --> 00:10:59,190
use a whole alphabet if we wanted the

00:10:53,410 --> 00:11:02,110
number a number system with base 24 plus

00:10:59,190 --> 00:11:03,190
34 we can use the whole alphabet look we

00:11:02,110 --> 00:11:05,769
don't need to use the whole alphabet

00:11:03,190 --> 00:11:08,889
with hex we only need these extra digits

00:11:05,769 --> 00:11:13,449
and apart from that if you if you think

00:11:08,889 --> 00:11:15,699
of how it uses 16 digits instead of 10

00:11:13,449 --> 00:11:20,260
everything else works works exactly the

00:11:15,699 --> 00:11:22,660
same way so until nine hexadecimal are

00:11:20,260 --> 00:11:24,610
exactly the same then in decimal after

00:11:22,660 --> 00:11:27,490
nine we run out of digits so we start we

00:11:24,610 --> 00:11:29,410
we need to use to which which is how we

00:11:27,490 --> 00:11:32,139
reach to 10 but in hex we haven't run

00:11:29,410 --> 00:11:39,459
out of digits yet so we can use a B and

00:11:32,139 --> 00:11:43,829
C and D and E and F so after a few run

00:11:39,459 --> 00:11:43,829
out of digits so we start

00:11:45,459 --> 00:11:57,819
and so on eventually at some point we

00:11:52,329 --> 00:12:03,149
will run out of digits in hex as well as

00:11:57,819 --> 00:12:10,089
the first of the two so we will end up

00:12:03,149 --> 00:12:12,610
having to use there it is so there they

00:12:10,089 --> 00:12:16,269
work exactly like regular digits after

00:12:12,610 --> 00:12:24,509
9f we need to increment 9 we have more

00:12:16,269 --> 00:12:29,679
digits to do so so it goes to a a 0 and

00:12:24,509 --> 00:12:31,749
of course to 50 50 s FF and an easy way

00:12:29,679 --> 00:12:36,490
to de Kloet to convert two digit hex

00:12:31,749 --> 00:12:38,619
numbers to do decimal is to multiply the

00:12:36,490 --> 00:12:42,160
fur to multiply the first digit times 16

00:12:38,619 --> 00:12:44,920
because that's how how many 16s you have

00:12:42,160 --> 00:12:46,629
and add the last digit so for example in

00:12:44,920 --> 00:12:50,199
the five way we had before it's

00:12:46,629 --> 00:12:52,959
basically five times sixteen plus 10

00:12:50,199 --> 00:12:54,999
because a means 10 so you reach 90

00:12:52,959 --> 00:12:57,639
however you usually don't really need to

00:12:54,999 --> 00:12:59,829
think about that you just need to have

00:12:57,639 --> 00:13:01,360
access to a console so you can do it so

00:12:59,829 --> 00:13:04,240
you can type a line of code and convert

00:13:01,360 --> 00:13:08,079
them and it's actually pretty easy to do

00:13:04,240 --> 00:13:16,600
it with JavaScript to convert decimal to

00:13:08,079 --> 00:13:19,449
hexadecimal one to use if this parameter

00:13:16,600 --> 00:13:21,790
was to you would convert to binary which

00:13:19,449 --> 00:13:24,009
is also quite interesting and there are

00:13:21,790 --> 00:13:25,779
two ways to convert to decimal these are

00:13:24,009 --> 00:13:27,999
two different ways it's not cold with

00:13:25,779 --> 00:13:29,589
two lines so you can either use the

00:13:27,999 --> 00:13:30,819
second parameter in parse int which is

00:13:29,589 --> 00:13:32,860
the number system you use and it's

00:13:30,819 --> 00:13:38,100
actually faster than the second way or

00:13:32,860 --> 00:13:40,540
you can prepend 0x to the number and

00:13:38,100 --> 00:13:42,189
prevent the plaster the whole thing so

00:13:40,540 --> 00:13:45,999
that it so that javascript converts it

00:13:42,189 --> 00:13:47,350
into a into a decimal number and even

00:13:45,999 --> 00:13:48,610
though this is not very useful when

00:13:47,350 --> 00:13:50,860
you're writing code that converts

00:13:48,610 --> 00:13:52,809
arbitrary hex values to decimal it is

00:13:50,860 --> 00:13:56,410
really useful when you want to do

00:13:52,809 --> 00:13:59,200
something like this so not sure if you

00:13:56,410 --> 00:14:01,270
can see the text code but like the quick

00:13:59,200 --> 00:14:02,830
way if you have a text code that you

00:14:01,270 --> 00:14:04,870
want to convert the decimal is to just

00:14:02,830 --> 00:14:09,420
type something like this and you just

00:14:04,870 --> 00:14:13,090
get the result immediately and of course

00:14:09,420 --> 00:14:15,640
instead of having only six digit hex

00:14:13,090 --> 00:14:19,230
numbers you we can also have three digit

00:14:15,640 --> 00:14:21,790
hex numbers which exhibits expand to the

00:14:19,230 --> 00:14:26,200
clicks the the six digit one you saw at

00:14:21,790 --> 00:14:27,250
first so for example this one keep in

00:14:26,200 --> 00:14:30,070
mind that the colors are actually

00:14:27,250 --> 00:14:31,540
lighter than they appear there would

00:14:30,070 --> 00:14:33,310
convert this and many people have

00:14:31,540 --> 00:14:34,990
requested in the CSS working group that

00:14:33,310 --> 00:14:38,650
we should have two digit hex numbers as

00:14:34,990 --> 00:14:40,540
well like this for example and this was

00:14:38,650 --> 00:14:42,160
not accepted it doesn't seem like we

00:14:40,540 --> 00:14:44,920
will ever getting wherever getting those

00:14:42,160 --> 00:14:46,720
because what does this expand to it's

00:14:44,920 --> 00:14:49,180
kind of it's quite ambiguous because

00:14:46,720 --> 00:14:53,740
most people who requested this expected

00:14:49,180 --> 00:14:55,990
it to expand to something like this but

00:14:53,740 --> 00:14:58,240
if we follow the same rule as three

00:14:55,990 --> 00:15:01,270
digit hex codes it should expand to

00:14:58,240 --> 00:15:04,330
something like this which is much less

00:15:01,270 --> 00:15:05,860
useful nobody would want this it's how

00:15:04,330 --> 00:15:08,530
often do you run out they do you run

00:15:05,860 --> 00:15:10,360
into colors that have the first three

00:15:08,530 --> 00:15:13,440
digits the same the last three digits

00:15:10,360 --> 00:15:16,660
the same so yeah we gave up on that and

00:15:13,440 --> 00:15:21,420
we also got some really awful color

00:15:16,660 --> 00:15:24,160
names in CSS 2.1 of which the ones have

00:15:21,420 --> 00:15:26,350
actually used their white black grey and

00:15:24,160 --> 00:15:28,750
red basically and sometimes yellow the

00:15:26,350 --> 00:15:31,540
rest are kind of useless how many of you

00:15:28,750 --> 00:15:35,020
have actually used any of the other ones

00:15:31,540 --> 00:15:42,610
okay maybe orange as well but they're

00:15:35,020 --> 00:15:44,620
all full of why so yeah CSS 2.1 colors

00:15:42,610 --> 00:15:46,420
are basically the RGB notation which is

00:15:44,620 --> 00:15:48,130
confusing because it's RGB and people

00:15:46,420 --> 00:15:50,950
don't think like that screens think like

00:15:48,130 --> 00:15:53,860
that people think about color in a

00:15:50,950 --> 00:15:56,170
different way hex notation which is even

00:15:53,860 --> 00:15:58,990
more confusing because it's both RGB and

00:15:56,170 --> 00:16:01,030
that you we have to think about hex as

00:15:58,990 --> 00:16:05,260
well and color names that are mostly

00:16:01,030 --> 00:16:06,610
useless so at the times of CSS 2.1 we

00:16:05,260 --> 00:16:10,810
were kind of screwed when it came to

00:16:06,610 --> 00:16:12,910
color and you can actually test that out

00:16:10,810 --> 00:16:13,150
if you try this game I wrote for this

00:16:12,910 --> 00:16:17,770
too

00:16:13,150 --> 00:16:19,240
look so this game if you press play it

00:16:17,770 --> 00:16:21,690
gives you a color to guess and you have

00:16:19,240 --> 00:16:24,760
to type any CSS color to guess it and

00:16:21,690 --> 00:16:27,160
it's it's kind of worth it to try to

00:16:24,760 --> 00:16:28,870
guess a color I mean if you have a

00:16:27,160 --> 00:16:34,840
laptop you can just load it up right now

00:16:28,870 --> 00:16:36,940
and try it this is the URL and it's it's

00:16:34,840 --> 00:16:39,520
interesting to try to guess a color with

00:16:36,940 --> 00:16:41,800
RGB and then p guess one with hex and

00:16:39,520 --> 00:16:44,020
then to guess one with hsl and it's

00:16:41,800 --> 00:16:46,090
interesting how much less time it takes

00:16:44,020 --> 00:16:47,800
you assuming you both understand RGB and

00:16:46,090 --> 00:16:50,620
end dates or sell its really interesting

00:16:47,800 --> 00:16:53,260
how less time it takes you when you try

00:16:50,620 --> 00:16:55,660
to do it in a more natural way that hsl

00:16:53,260 --> 00:16:57,340
provides and I'm actually I don't know

00:16:55,660 --> 00:16:59,680
if I'll manage to do it on stage because

00:16:57,340 --> 00:17:05,320
it's kind of stressful right now but

00:16:59,680 --> 00:17:07,300
i'll try to do it so it's a bit light

00:17:05,320 --> 00:17:17,530
and saturated julie's should be lighter

00:17:07,300 --> 00:17:21,570
and lighter it's getting there it needs

00:17:17,530 --> 00:17:21,570
a bit more green yeah we're close

00:17:30,200 --> 00:17:34,170
yeah it's getting there you actually

00:17:32,340 --> 00:17:36,810
don't have to you actually don't have to

00:17:34,170 --> 00:17:40,170
guess the full color of the way it is

00:17:36,810 --> 00:17:47,130
you just need to find something that's

00:17:40,170 --> 00:17:54,810
close enough like 99.2 at least I think

00:17:47,130 --> 00:18:01,290
oh this was easier when I tried it

00:17:54,810 --> 00:18:04,170
without an audience ah ok you can see

00:18:01,290 --> 00:18:06,570
why RGB is confusing I've done this

00:18:04,170 --> 00:18:10,860
millions of times and it's still quite

00:18:06,570 --> 00:18:20,180
difficult I think I'm close to giving up

00:18:10,860 --> 00:18:20,180
right now yeah I don't like giving up oh

00:18:20,270 --> 00:18:25,650
well sometimes where you have to because

00:18:24,030 --> 00:18:26,700
we don't have infinite time but you see

00:18:25,650 --> 00:18:30,990
I've been trying for a minute and a half

00:18:26,700 --> 00:18:32,760
and I still can't guess it and I i

00:18:30,990 --> 00:18:38,280
generally am quite interested in color

00:18:32,760 --> 00:18:40,050
so uh so in the next few slides

00:18:38,280 --> 00:18:42,960
sometimes we're going to see methods

00:18:40,050 --> 00:18:43,950
added to a simple j/s color class you

00:18:42,960 --> 00:18:45,870
know javascript doesn't really have

00:18:43,950 --> 00:18:47,700
classes so I've included quotes

00:18:45,870 --> 00:18:53,430
otherwise people will lynch me

00:18:47,700 --> 00:18:55,050
afterwards but yes so this is the main

00:18:53,430 --> 00:18:57,240
idea you you want to be able to create

00:18:55,050 --> 00:18:59,130
colors either by providing arguments or

00:18:57,240 --> 00:19:02,370
by providing an array so it checks if

00:18:59,130 --> 00:19:06,840
the first argument is an array or else

00:19:02,370 --> 00:19:08,310
and if it's an array it sets are the RGB

00:19:06,840 --> 00:19:10,260
appropriate e which is actually not a

00:19:08,310 --> 00:19:12,600
property it's a it's a getter and setter

00:19:10,260 --> 00:19:15,240
that we'll see in the next slide to the

00:19:12,600 --> 00:19:17,100
first three elements of that array and

00:19:15,240 --> 00:19:18,600
then it tries to get alpha coz alpha

00:19:17,100 --> 00:19:19,800
could be either the fourth element of

00:19:18,600 --> 00:19:22,380
that array or it could be a second

00:19:19,800 --> 00:19:24,330
parameter we want to be flexible or if

00:19:22,380 --> 00:19:26,160
it's not an array it's pretty easy we

00:19:24,330 --> 00:19:28,020
just set red to red green to green blue

00:19:26,160 --> 00:19:31,490
to blue and then we set alpha or

00:19:28,020 --> 00:19:34,680
whatever it was either this parameter or

00:19:31,490 --> 00:19:36,240
whatever we have from this line or just

00:19:34,680 --> 00:19:39,630
one if we haven't provided an alpha at

00:19:36,240 --> 00:19:41,610
all and we have well to have to get

00:19:39,630 --> 00:19:43,500
rinsed and setters because sometimes we

00:19:41,610 --> 00:19:45,330
want to manipulate RGB all

00:19:43,500 --> 00:19:48,930
once with an array instead of setting

00:19:45,330 --> 00:19:50,460
the three channels individually so if we

00:19:48,930 --> 00:19:52,680
try to get it it returns an array with

00:19:50,460 --> 00:19:55,260
red green blue if we try to set it with

00:19:52,680 --> 00:19:57,420
an array it assigns the first element

00:19:55,260 --> 00:19:59,790
read the second one to green the last

00:19:57,420 --> 00:20:01,110
one to blow and if all the methods that

00:19:59,790 --> 00:20:03,390
were most of the methods we're going to

00:20:01,110 --> 00:20:07,310
see are going to be added at some point

00:20:03,390 --> 00:20:11,340
here and this allows us to create colors

00:20:07,310 --> 00:20:13,740
in any of these ways or even in this way

00:20:11,340 --> 00:20:15,480
because they have default values so by

00:20:13,740 --> 00:20:19,220
default it's just black and then we can

00:20:15,480 --> 00:20:22,050
assign values to it or even by this way

00:20:19,220 --> 00:20:24,720
cuz you we don't even need to set green

00:20:22,050 --> 00:20:26,220
because it's zero by default so that's

00:20:24,720 --> 00:20:28,050
pretty flexible it's kind of useless at

00:20:26,220 --> 00:20:29,610
this point because it just creates and

00:20:28,050 --> 00:20:31,290
stores a color and doesn't do anything

00:20:29,610 --> 00:20:32,580
useful with it at this point but

00:20:31,290 --> 00:20:37,980
throughout the stock we're going to add

00:20:32,580 --> 00:20:41,190
useful things to it ah and let's move on

00:20:37,980 --> 00:20:44,370
to H yourself for a bit so in CSS collar

00:20:41,190 --> 00:20:46,050
level at level three we got a slightly

00:20:44,370 --> 00:20:49,440
more intuitive way to think about color

00:20:46,050 --> 00:20:52,260
and this this was also this is also

00:20:49,440 --> 00:20:54,320
three dimensional it's the first

00:20:52,260 --> 00:20:58,170
dimension is a hue which basically means

00:20:54,320 --> 00:20:59,730
what it is are my color reddish or is it

00:20:58,170 --> 00:21:01,710
orange juice or is it yellowish or

00:20:59,730 --> 00:21:05,220
greenish like what's the main hue of the

00:21:01,710 --> 00:21:07,440
color and then how close it is the gray

00:21:05,220 --> 00:21:10,080
that's what saturation is how close is

00:21:07,440 --> 00:21:11,760
our color to gray and then lightness

00:21:10,080 --> 00:21:16,770
which is how close it is to black or

00:21:11,760 --> 00:21:19,590
white so this is also color picker so

00:21:16,770 --> 00:21:21,180
you can see the different colors that

00:21:19,590 --> 00:21:22,830
that can be generated from this for

00:21:21,180 --> 00:21:26,490
example it's suppose we want to choose a

00:21:22,830 --> 00:21:28,620
muted slightly dark pink we can go we

00:21:26,490 --> 00:21:31,680
can instantly find that it's here and

00:21:28,620 --> 00:21:33,990
then we can it's like this is much more

00:21:31,680 --> 00:21:36,360
intuitive than how compared to how

00:21:33,990 --> 00:21:38,940
people think about color because that's

00:21:36,360 --> 00:21:41,910
what what you usually say I want a muted

00:21:38,940 --> 00:21:46,080
dark pink you don't say I want a color

00:21:41,910 --> 00:21:50,610
that has some red with even less blue

00:21:46,080 --> 00:21:54,450
who talks about colors this way and this

00:21:50,610 --> 00:21:57,530
is the notation you use in CSS which is

00:21:54,450 --> 00:21:57,530
which I'm sure you've all used

00:21:58,160 --> 00:22:06,240
and you can change the coordinates and

00:22:01,380 --> 00:22:09,240
see how it ends up being and I hsl is

00:22:06,240 --> 00:22:11,130
actually three dimensional if a

00:22:09,240 --> 00:22:14,060
coordinate system with three coordinates

00:22:11,130 --> 00:22:16,620
as well but different one it's actually

00:22:14,060 --> 00:22:19,230
something called cylindrical coordinates

00:22:16,620 --> 00:22:21,840
because the first coordinate is not it

00:22:19,230 --> 00:22:23,640
is an angle so it we can provide an

00:22:21,840 --> 00:22:25,890
angle of 400 if we want to it just wraps

00:22:23,640 --> 00:22:28,260
around it it's equivalent to four to

00:22:25,890 --> 00:22:32,700
forty and I think it does actually works

00:22:28,260 --> 00:22:35,460
in browsers as well so 400 is the same

00:22:32,700 --> 00:22:38,940
as if we subtract 360 from it which is

00:22:35,460 --> 00:22:41,820
14 same thing but in reality it's not

00:22:38,940 --> 00:22:44,070
actually a cylinder which is what you

00:22:41,820 --> 00:22:46,020
end up with if you have a circle and two

00:22:44,070 --> 00:22:47,280
other dimensions it ends up being more

00:22:46,020 --> 00:22:49,620
like a code because as you move towards

00:22:47,280 --> 00:22:52,740
a lightness of zero or a lightness of

00:22:49,620 --> 00:22:55,650
100 then you get even less possible

00:22:52,740 --> 00:23:01,350
colors as you can see here as I move

00:22:55,650 --> 00:23:04,770
towards zero there are much fewer

00:23:01,350 --> 00:23:09,090
possible colors i can get same as i move

00:23:04,770 --> 00:23:11,820
towards white I don't get this spectrum

00:23:09,090 --> 00:23:13,920
that I have here it's fewer and fewer

00:23:11,820 --> 00:23:15,630
colors that I can generate and when

00:23:13,920 --> 00:23:18,390
lightness is a hundred I can only

00:23:15,630 --> 00:23:24,960
generate one color white same with when

00:23:18,390 --> 00:23:27,060
it's zero it's only black and yeah I'm

00:23:24,960 --> 00:23:30,860
not going to try this again for hsl but

00:23:27,060 --> 00:23:33,800
trust me on this it is much faster

00:23:30,860 --> 00:23:37,050
however it yourself is not perfect we

00:23:33,800 --> 00:23:39,810
tend to think that lightness actually

00:23:37,050 --> 00:23:45,930
means lightness as in how like the color

00:23:39,810 --> 00:23:49,290
is right however as you can see in this

00:23:45,930 --> 00:23:53,130
example it's not exactly close to how we

00:23:49,290 --> 00:23:54,690
perceive likenesses humans these two

00:23:53,130 --> 00:23:58,050
colors have exactly the same lightness

00:23:54,690 --> 00:24:00,810
values it's yellow and blue are they

00:23:58,050 --> 00:24:03,060
equally light should they have for

00:24:00,810 --> 00:24:06,690
example both the same color of text on

00:24:03,060 --> 00:24:09,810
them to be readable absolutely not so

00:24:06,690 --> 00:24:10,330
and you can see this a little bit with

00:24:09,810 --> 00:24:12,399
gray as

00:24:10,330 --> 00:24:14,320
well although it's not as visible as the

00:24:12,399 --> 00:24:15,850
previous example greys actually it

00:24:14,320 --> 00:24:18,179
should be halfway through white and

00:24:15,850 --> 00:24:22,299
black but it's actually closer to black

00:24:18,179 --> 00:24:24,909
and that happens because hsl is not

00:24:22,299 --> 00:24:27,610
perceptually uniform when it comes to

00:24:24,909 --> 00:24:30,850
color space perceptual uniformity means

00:24:27,610 --> 00:24:32,710
that you can determine how similar two

00:24:30,850 --> 00:24:34,990
colors are by measuring the distance

00:24:32,710 --> 00:24:36,970
between them for example here the

00:24:34,990 --> 00:24:38,980
distance between them you can you can

00:24:36,970 --> 00:24:41,860
see that it's it's the same goes from 0

00:24:38,980 --> 00:24:45,309
to 15 learn from 50 to 100 and in RGB

00:24:41,860 --> 00:24:48,820
it's also the same this will be 0000

00:24:45,309 --> 00:24:51,820
this would be to 50 50 times 3 and this

00:24:48,820 --> 00:24:55,080
should be a hundred and twenty 127 times

00:24:51,820 --> 00:24:57,850
three so it's completely halfway through

00:24:55,080 --> 00:25:01,690
however the problem is RGB is not

00:24:57,850 --> 00:25:04,210
perceptually uniform a small change by

00:25:01,690 --> 00:25:06,360
the same amount in RGB can end up with

00:25:04,210 --> 00:25:10,570
colors that look slightly similar or

00:25:06,360 --> 00:25:12,130
colors that look very similar and hsl

00:25:10,570 --> 00:25:14,169
isn't perceptually uniform either

00:25:12,130 --> 00:25:16,779
because hsl is just RGB it's not a

00:25:14,169 --> 00:25:20,100
different color space the only color

00:25:16,779 --> 00:25:22,570
space that I that that is supposed to be

00:25:20,100 --> 00:25:25,630
well one of the color spaces that you

00:25:22,570 --> 00:25:26,559
that were used to from color Pickers and

00:25:25,630 --> 00:25:28,149
stuff that's actually prefer

00:25:26,559 --> 00:25:30,309
perceptually uniform or at least it's

00:25:28,149 --> 00:25:32,620
designed to be perceptually uniform even

00:25:30,309 --> 00:25:35,019
though it's not a hundred percent that

00:25:32,620 --> 00:25:36,700
way is lab if you've ever used Photoshop

00:25:35,019 --> 00:25:39,490
you might have seen the lab color system

00:25:36,700 --> 00:25:42,279
that's a color system designed by the

00:25:39,490 --> 00:25:43,779
color consortium to look to be to have

00:25:42,279 --> 00:25:46,600
this property to be perceptually uniform

00:25:43,779 --> 00:25:48,370
but RGB is not even close you can see

00:25:46,600 --> 00:25:51,220
this here as well this is not hsl this

00:25:48,370 --> 00:25:53,019
is just RGB the both of these colors

00:25:51,220 --> 00:25:56,909
have exactly the same distance from the

00:25:53,019 --> 00:25:59,350
middle one but are they equally similar

00:25:56,909 --> 00:26:02,230
these two are much more similar than

00:25:59,350 --> 00:26:06,669
this one with the second with is with

00:26:02,230 --> 00:26:08,799
the third and this is the reason why

00:26:06,669 --> 00:26:12,159
likeness isn't exactly a good

00:26:08,799 --> 00:26:14,110
measurement of how light the color

00:26:12,159 --> 00:26:17,769
actually is how we perceive how light we

00:26:14,110 --> 00:26:19,480
perceive a color to be so if we if we

00:26:17,769 --> 00:26:22,210
end up having some color that looks like

00:26:19,480 --> 00:26:23,620
this we have a random color we don't

00:26:22,210 --> 00:26:24,220
really know what it is it's a variable

00:26:23,620 --> 00:26:25,450
we set our

00:26:24,220 --> 00:26:27,640
background to it and then we need to

00:26:25,450 --> 00:26:29,710
figure out a color that contrasts

00:26:27,640 --> 00:26:32,049
sufficiently with it so that we put text

00:26:29,710 --> 00:26:35,280
on it and it's readable so many people

00:26:32,049 --> 00:26:40,780
would end up doing something like this

00:26:35,280 --> 00:26:44,289
but that won't work because if you if

00:26:40,780 --> 00:26:46,720
you see how the lightness a getter is

00:26:44,289 --> 00:26:50,289
defined and this is how to define this

00:26:46,720 --> 00:26:51,909
is how hsl lightness is computed it just

00:26:50,289 --> 00:26:53,620
gets the maximum of the three RGB

00:26:51,909 --> 00:26:57,010
coordinates in the minimum and average

00:26:53,620 --> 00:26:59,500
and averages them that's it if you have

00:26:57,010 --> 00:27:01,390
lots of green it's it counts it becomes

00:26:59,500 --> 00:27:04,179
the same towards lightness as a lot of

00:27:01,390 --> 00:27:08,169
blue even though our eyes are much more

00:27:04,179 --> 00:27:10,539
sensitive to blue that they are to read

00:27:08,169 --> 00:27:12,730
them they are to green so we perceive

00:27:10,539 --> 00:27:14,830
green as much lighter than red and bread

00:27:12,730 --> 00:27:17,919
is much lighter than blue so no not all

00:27:14,830 --> 00:27:20,049
RGB coordinates are born equal some of

00:27:17,919 --> 00:27:21,789
them are more equal than others and if

00:27:20,049 --> 00:27:23,679
we want to get something that that's

00:27:21,789 --> 00:27:26,049
even remotely that even remotely

00:27:23,679 --> 00:27:28,090
represents how light the color is we

00:27:26,049 --> 00:27:31,210
need to take that into account so this

00:27:28,090 --> 00:27:32,710
won't quite won't do very well instead

00:27:31,210 --> 00:27:35,860
there is another measurement called

00:27:32,710 --> 00:27:37,659
relative luminance and you can see that

00:27:35,860 --> 00:27:41,020
this formula is both present in CSS

00:27:37,659 --> 00:27:44,950
collars level four and it's also in an

00:27:41,020 --> 00:27:46,840
earlier specification called web content

00:27:44,950 --> 00:27:49,720
accessibility guidelines for calculating

00:27:46,840 --> 00:27:51,400
color contrast this this is the

00:27:49,720 --> 00:27:52,840
measurement you use when you want to

00:27:51,400 --> 00:27:54,419
calculate color contrast between two

00:27:52,840 --> 00:28:01,150
colors to make them sufficiently

00:27:54,419 --> 00:28:02,860
accessible so as you can see it's not

00:28:01,150 --> 00:28:06,100
actually very it's not actually very

00:28:02,860 --> 00:28:09,400
complicated you just make some small

00:28:06,100 --> 00:28:11,830
transformations on every channel this is

00:28:09,400 --> 00:28:15,429
exactly the same for red green and blue

00:28:11,830 --> 00:28:17,860
but then what you return is weighed so

00:28:15,429 --> 00:28:22,710
as you can see blue is x smaller number

00:28:17,860 --> 00:28:27,700
than green is than red is and you can

00:28:22,710 --> 00:28:29,919
see here how it works for different

00:28:27,700 --> 00:28:31,380
colors for example blue has a luminance

00:28:29,919 --> 00:28:33,700
of seven percent which is much more

00:28:31,380 --> 00:28:36,909
close to how we perceive colors than

00:28:33,700 --> 00:28:38,020
likenesses and it doesn't have the same

00:28:36,909 --> 00:28:39,520
problem as you

00:28:38,020 --> 00:28:42,070
hello for example which has the same

00:28:39,520 --> 00:28:44,800
lightness so according to our code here

00:28:42,070 --> 00:28:46,570
it would end up having white text but

00:28:44,800 --> 00:28:48,430
the luminance of yellow is ninety-three

00:28:46,570 --> 00:28:51,370
percent which is much closer to how we

00:28:48,430 --> 00:28:53,110
perceive color and this is the formula

00:28:51,370 --> 00:28:54,640
for color contrast which is basically

00:28:53,110 --> 00:28:56,440
which calculates the two luminance 'as

00:28:54,640 --> 00:28:58,420
we add a little bit to them so that we

00:28:56,440 --> 00:29:02,590
don't end up dividing by zero in case

00:28:58,420 --> 00:29:05,350
they're zero because of course black has

00:29:02,590 --> 00:29:07,000
both lightness and luminance of zero and

00:29:05,350 --> 00:29:10,300
white plus both of them to one hundred

00:29:07,000 --> 00:29:12,130
percent so we had a little bit to them

00:29:10,300 --> 00:29:13,990
and then we get the ratio and that's

00:29:12,130 --> 00:29:15,790
color contrast so I've written up here

00:29:13,990 --> 00:29:18,330
that you can use the calculate color

00:29:15,790 --> 00:29:20,200
contrast and whether it passes the

00:29:18,330 --> 00:29:27,220
accessibility guidelines and you can

00:29:20,200 --> 00:29:28,680
even use any sort of CSS color in CSS

00:29:27,220 --> 00:29:34,890
color level three we also got

00:29:28,680 --> 00:29:41,980
semi-transparent colors both for RGB and

00:29:34,890 --> 00:29:46,590
for hsl so the same one in hsl would be

00:29:41,980 --> 00:29:53,050
zero and one hundred percent here and

00:29:46,590 --> 00:29:57,280
fifty percent here alright it's you

00:29:53,050 --> 00:29:58,990
silly so we've used that as well but

00:29:57,280 --> 00:30:00,340
have you ever wondered how this sort of

00:29:58,990 --> 00:30:01,750
thing works because our screens cannot

00:30:00,340 --> 00:30:03,400
display transparent pixels really

00:30:01,750 --> 00:30:06,520
everything needs to be composited into

00:30:03,400 --> 00:30:08,230
actual opaque pixels because what would

00:30:06,520 --> 00:30:10,720
the transplant pixel look on on a screen

00:30:08,230 --> 00:30:13,810
would you see the behind of your screen

00:30:10,720 --> 00:30:15,610
like what's inside it so everything

00:30:13,810 --> 00:30:17,410
needs to end up being opaque pixels this

00:30:15,610 --> 00:30:19,570
is just convenience it doesn't

00:30:17,410 --> 00:30:21,400
correspond to any sort of hardware alpha

00:30:19,570 --> 00:30:24,880
channel there's no alpha sub pixel it

00:30:21,400 --> 00:30:29,860
doesn't make sense so we use something

00:30:24,880 --> 00:30:31,840
called alpha blending which we use

00:30:29,860 --> 00:30:33,520
something called out for blending which

00:30:31,840 --> 00:30:36,250
is an algorithm that was invented by

00:30:33,520 --> 00:30:40,810
Porter and off into in 1980 in his early

00:30:36,250 --> 00:30:44,650
as 1984 and simple alpha blending looks

00:30:40,810 --> 00:30:47,440
like this and we basically multiply

00:30:44,650 --> 00:30:51,990
every component of the color on top with

00:30:47,440 --> 00:30:54,210
its alpha and we add every component of

00:30:51,990 --> 00:30:59,040
the color behind it multiplied by its

00:30:54,210 --> 00:31:01,290
own alpha and also x 1 minus the Alpha

00:30:59,040 --> 00:31:03,330
of the color above it because if you

00:31:01,290 --> 00:31:04,860
have sixty percent on the color above

00:31:03,330 --> 00:31:06,390
then you can only see forty percent of

00:31:04,860 --> 00:31:10,830
what's behind so you need to multiply by

00:31:06,390 --> 00:31:13,740
that forty percent and the Alpha of the

00:31:10,830 --> 00:31:15,000
resulting color it all always increases

00:31:13,740 --> 00:31:16,320
because if you if you have an

00:31:15,000 --> 00:31:18,120
semi-transparent color in the same

00:31:16,320 --> 00:31:19,380
transparent color under it obviously you

00:31:18,120 --> 00:31:21,170
cannot get a color that's less

00:31:19,380 --> 00:31:25,320
semi-transparent that what you have and

00:31:21,170 --> 00:31:28,230
it increases by this amount which is the

00:31:25,320 --> 00:31:31,610
Alpha of the color under it x 1 minus

00:31:28,230 --> 00:31:34,980
the Alpha of the color above it and

00:31:31,610 --> 00:31:37,950
something quite similar 12 for blending

00:31:34,980 --> 00:31:39,210
is how you mix two colors together for

00:31:37,950 --> 00:31:41,760
example if you want to get the average

00:31:39,210 --> 00:31:44,360
of two colors with in which case the

00:31:41,760 --> 00:31:47,130
weights here would be zero fifty percent

00:31:44,360 --> 00:31:49,380
so you multiply every component by point

00:31:47,130 --> 00:31:51,870
five for example or whatever the weight

00:31:49,380 --> 00:31:55,710
is and then you add the component of the

00:31:51,870 --> 00:31:59,070
other color x the opposite like 1 minus

00:31:55,710 --> 00:32:02,460
the weight and in SAS you can do that

00:31:59,070 --> 00:32:04,920
with the mix function and it just takes

00:32:02,460 --> 00:32:06,690
two colors and a weight parameter based

00:32:04,920 --> 00:32:10,620
on how much you want over the first

00:32:06,690 --> 00:32:12,179
color so if you specify ninety percent

00:32:10,620 --> 00:32:14,100
here you get ninety percent of this

00:32:12,179 --> 00:32:16,140
color and ten percent of the call of the

00:32:14,100 --> 00:32:18,230
second color and this is actually used

00:32:16,140 --> 00:32:20,670
when the browser is doing a gradient and

00:32:18,230 --> 00:32:22,970
when it's opaque colors you get what you

00:32:20,670 --> 00:32:25,290
expect but what happens when you do a

00:32:22,970 --> 00:32:28,230
gradient between white and transparent

00:32:25,290 --> 00:32:30,059
well at this point we stop being able to

00:32:28,230 --> 00:32:33,179
see our code until yeah I made it black

00:32:30,059 --> 00:32:35,340
so now we can see it however this is not

00:32:33,179 --> 00:32:36,690
a gradient from white to transparent as

00:32:35,340 --> 00:32:38,330
we would expect it you might be

00:32:36,690 --> 00:32:40,530
wondering what's wrong with it it

00:32:38,330 --> 00:32:47,090
becomes more obvious what's wrong with

00:32:40,530 --> 00:32:50,100
it if we see how it should be properly

00:32:47,090 --> 00:32:52,860
yeah and it should look like this so you

00:32:50,100 --> 00:32:55,110
can see the difference here there is

00:32:52,860 --> 00:32:56,970
some gray here that shouldn't exist and

00:32:55,110 --> 00:32:59,429
the reason this happens is that

00:32:56,970 --> 00:33:02,970
transparent is just the shorthand to RGB

00:32:59,429 --> 00:33:05,880
a 0 0 0 0 so as our white is

00:33:02,970 --> 00:33:07,620
transitioning other color white strands

00:33:05,880 --> 00:33:08,850
from opaque to transparent it's also

00:33:07,620 --> 00:33:11,100
transitioning from white to black

00:33:08,850 --> 00:33:16,200
because transparent is transparent black

00:33:11,100 --> 00:33:18,960
and the the CSS color level 3 spec was

00:33:16,200 --> 00:33:21,500
updated at some point and it specified

00:33:18,960 --> 00:33:23,940
that the transition needs to happen in

00:33:21,500 --> 00:33:25,680
what's called appre multiplied RGB a

00:33:23,940 --> 00:33:28,860
space which means every color is stored

00:33:25,680 --> 00:33:30,300
after its x its alpha channel which ends

00:33:28,860 --> 00:33:32,910
up in much smoother transitions because

00:33:30,300 --> 00:33:34,110
transparent is not anymore transparent

00:33:32,910 --> 00:33:37,530
of a specific color it's just

00:33:34,110 --> 00:33:38,760
transparent so the perceived effect this

00:33:37,530 --> 00:33:40,260
is not how the colors are actually

00:33:38,760 --> 00:33:42,380
stored but the perceived effect looks

00:33:40,260 --> 00:33:46,140
like this if you interpolate between

00:33:42,380 --> 00:33:47,910
white and transparent you end up with a

00:33:46,140 --> 00:33:50,730
gradient that looks like this and if you

00:33:47,910 --> 00:33:52,860
want to use to do the same effect in a

00:33:50,730 --> 00:33:54,900
court in a browser that doesn't support

00:33:52,860 --> 00:33:57,030
premultiplied transitions like Firefox

00:33:54,900 --> 00:33:59,130
even at low and using the nightlies here

00:33:57,030 --> 00:34:00,780
it still doesn't support it instead of

00:33:59,130 --> 00:34:03,060
using transparent you can use actual

00:34:00,780 --> 00:34:08,760
transparent white and now we got the

00:34:03,060 --> 00:34:11,879
same gradient and we also got some extra

00:34:08,760 --> 00:34:14,580
colors some extra named colors but

00:34:11,879 --> 00:34:16,139
they're not exactly evenly distributed

00:34:14,580 --> 00:34:19,320
and they're actually they're also kind

00:34:16,139 --> 00:34:22,020
of stupid they're too long some of the

00:34:19,320 --> 00:34:25,710
names are incredibly silly some of them

00:34:22,020 --> 00:34:29,669
even border on the racist and some of

00:34:25,710 --> 00:34:35,879
them are just insane I'm not making this

00:34:29,669 --> 00:34:38,700
up so yeah those are not very useful

00:34:35,879 --> 00:34:40,710
what what we did get that's useful is

00:34:38,700 --> 00:34:42,149
another color keyword so have you ever

00:34:40,710 --> 00:34:44,550
noticed that when you use a border

00:34:42,149 --> 00:34:46,830
without the color it just gets the text

00:34:44,550 --> 00:34:49,830
color I can change the text color and

00:34:46,830 --> 00:34:52,290
adjust the jaw adopts an box shadow has

00:34:49,830 --> 00:34:55,260
also the same property if I use a book

00:34:52,290 --> 00:34:57,600
shadow without the color it just gets

00:34:55,260 --> 00:35:00,990
the text color text shadow is the same

00:34:57,600 --> 00:35:02,700
as well if I use a text shadow without a

00:35:00,990 --> 00:35:04,550
color you can see how this could blurt

00:35:02,700 --> 00:35:07,710
because it's the same as apply as

00:35:04,550 --> 00:35:09,510
specifying line here so until CSS 2.1

00:35:07,710 --> 00:35:11,130
these were just rules and specific

00:35:09,510 --> 00:35:13,530
properties that if if the user that if

00:35:11,130 --> 00:35:17,010
the author doesn't specify a color you

00:35:13,530 --> 00:35:19,830
just get the text color in CSS in level

00:35:17,010 --> 00:35:22,920
3 this kind of behavior got a chunky

00:35:19,830 --> 00:35:25,260
and its current color so we can use it

00:35:22,920 --> 00:35:26,970
even in properties that don't use

00:35:25,260 --> 00:35:29,450
current color as a default so for

00:35:26,970 --> 00:35:35,790
example if we want to have a background

00:35:29,450 --> 00:35:39,290
with stripes that have that are for a

00:35:35,790 --> 00:35:41,820
transparent and the current text color

00:35:39,290 --> 00:35:45,990
we can do something like this and then

00:35:41,820 --> 00:35:47,460
make the background size smaller and we

00:35:45,990 --> 00:35:50,460
end up with something like this and if

00:35:47,460 --> 00:35:54,240
we change the text color it just works

00:35:50,460 --> 00:35:57,090
and it's basically the first variable

00:35:54,240 --> 00:35:58,910
ever ever to be supported in CSS because

00:35:57,090 --> 00:36:03,090
you can just change the text color and

00:35:58,910 --> 00:36:05,400
current color updates everywhere so

00:36:03,090 --> 00:36:08,400
these are the codes we got in css3 hsl

00:36:05,400 --> 00:36:13,590
is not perfect but it's better okay a

00:36:08,400 --> 00:36:14,880
hrg behind hsla we were badly needed we

00:36:13,590 --> 00:36:18,000
got more color names they're mostly

00:36:14,880 --> 00:36:20,730
useless and we got current color so

00:36:18,000 --> 00:36:26,040
what's in store for CSS level 4 i'm

00:36:20,730 --> 00:36:28,080
finishing grey became a function and the

00:36:26,040 --> 00:36:30,510
gray keyword is equivalent of gray fifty

00:36:28,080 --> 00:36:34,680
percent but now we can also adjust this

00:36:30,510 --> 00:36:37,050
and we can get all sorts of Gray's so we

00:36:34,680 --> 00:36:38,340
don't even need the two digit hex codes

00:36:37,050 --> 00:36:40,650
anymore because we can have something

00:36:38,340 --> 00:36:41,640
that reads much more naturally and even

00:36:40,650 --> 00:36:44,580
though this is not supported by any

00:36:41,640 --> 00:36:46,440
browsers yet you can implement it

00:36:44,580 --> 00:36:48,390
yourself in SAS with just these two

00:36:46,440 --> 00:36:50,670
lines of code and it works exactly the

00:36:48,390 --> 00:36:52,140
same way as it will when it's supported

00:36:50,670 --> 00:36:56,010
by browsers this is exactly the same

00:36:52,140 --> 00:37:00,840
syntax we all we will also get four

00:36:56,010 --> 00:37:03,600
digit hex codes in CSS in level 4 which

00:37:00,840 --> 00:37:07,560
which are the same as two three digit

00:37:03,600 --> 00:37:10,200
ones plus alpha and four and eight

00:37:07,560 --> 00:37:14,460
digits and eight digit ones which are

00:37:10,200 --> 00:37:17,130
exactly the same as six digit once plus

00:37:14,460 --> 00:37:18,930
alpha so this is the OPAC color this is

00:37:17,130 --> 00:37:20,370
with alpha so we don't have to convert

00:37:18,930 --> 00:37:23,010
your hex colors anymore to make them

00:37:20,370 --> 00:37:26,340
transparent and we will also get the

00:37:23,010 --> 00:37:29,430
amazing color function that allows us to

00:37:26,340 --> 00:37:30,570
provide lots of adjusters and the just

00:37:29,430 --> 00:37:33,570
colors and this is especially useful

00:37:30,570 --> 00:37:35,250
when you're using variables because red

00:37:33,570 --> 00:37:36,780
be a variable because we're also getting

00:37:35,250 --> 00:37:38,940
custom properties in CSS which are

00:37:36,780 --> 00:37:43,080
basically variables and we can also use

00:37:38,940 --> 00:37:45,510
shade to mix it with black and we can

00:37:43,080 --> 00:37:50,640
even use blend to Rhett to blend it with

00:37:45,510 --> 00:37:52,260
another color and there are all sorts of

00:37:50,640 --> 00:37:53,730
different adjusters we will be able to

00:37:52,260 --> 00:37:56,460
use so we can do all sorts of things

00:37:53,730 --> 00:37:58,410
with the color function tintin shade

00:37:56,460 --> 00:38:00,450
already we can already implement it in

00:37:58,410 --> 00:38:02,850
SAS and if you use bourbon it's already

00:38:00,450 --> 00:38:04,260
included and Tintin shade just mixes

00:38:02,850 --> 00:38:05,550
with a color with white and black which

00:38:04,260 --> 00:38:07,020
is actually pretty useful in making it

00:38:05,550 --> 00:38:09,930
lighter and darker much useful than

00:38:07,020 --> 00:38:12,570
lightning darken and we're also getting

00:38:09,930 --> 00:38:13,890
this HSP color system that many people

00:38:12,570 --> 00:38:15,960
use in Photoshop and until now we

00:38:13,890 --> 00:38:18,600
couldn't use it in CSS and will be

00:38:15,960 --> 00:38:20,520
called h WB which stands for Hugh

00:38:18,600 --> 00:38:23,310
whiteness blackness it's kind of weird

00:38:20,520 --> 00:38:24,870
but it's the same thing here is exactly

00:38:23,310 --> 00:38:26,400
the same as a to sell and the other two

00:38:24,870 --> 00:38:28,980
coordinates are exactly the same as what

00:38:26,400 --> 00:38:31,230
we have in Photoshop so this is a

00:38:28,980 --> 00:38:35,100
summary of what we will get tentatively

00:38:31,230 --> 00:38:36,480
in CSS color level for it the syntax

00:38:35,100 --> 00:38:40,580
might change at any point this is very

00:38:36,480 --> 00:38:43,350
unstable right now and you can use this

00:38:40,580 --> 00:38:45,330
polyfill called myth io which is like a

00:38:43,350 --> 00:38:47,250
preprocessor but it tries to support

00:38:45,330 --> 00:38:51,060
these early draft so you can use the

00:38:47,250 --> 00:38:52,500
syntax today I didn't write it and this

00:38:51,060 --> 00:38:54,030
is some code that you can use to take

00:38:52,500 --> 00:38:55,710
advantage of the browser to parse any

00:38:54,030 --> 00:38:57,660
supported CSS color but I don't think I

00:38:55,710 --> 00:39:00,840
have enough time right now to go through

00:38:57,660 --> 00:39:03,050
it but you can sit in my slide thank you

00:39:00,840 --> 00:39:03,050
very much

00:39:05,790 --> 00:39:07,850

YouTube URL: https://www.youtube.com/watch?v=YJa9v7OTvSQ


