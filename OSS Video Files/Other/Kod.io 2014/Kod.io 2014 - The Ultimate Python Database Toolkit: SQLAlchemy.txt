Title: Kod.io 2014 - The Ultimate Python Database Toolkit: SQLAlchemy
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	By Muhammet Sena Aydin

Meet SQLAlchemy. A high performing, mature, easy, non-opinionated database toolkit which doesn't get in your way
SQLAlchemy does exactly what you command it to do. You can turn it into a highly usable ORM or use it as an impressive SQL abstraction toolkit.

We are going to discuss the basics of this great tool and compare it to other existing libraries.

It's worth noting that SQLAlchemy is used by Reddit, Uber, Fedora, Mozilla, Dropbox and many other companies for years.

It's time to exit via dolorosa.

Your presence is expected.

Help us caption & translate this video!

http://amara.org/v/FG31/
Captions: 
	00:00:24,380 --> 00:00:33,140
my name is I'm a patent developer at a

00:00:27,600 --> 00:00:36,870
company called global the wholesale of

00:00:33,140 --> 00:00:41,250
hotels and planes blankets you can

00:00:36,870 --> 00:00:43,650
follow me on Twitter at menu car so I'm

00:00:41,250 --> 00:00:46,800
going to talk about Chico alchemy and

00:00:43,650 --> 00:00:50,269
how we can use it we're going to explore

00:00:46,800 --> 00:00:53,730
it seek alchemy is a major

00:00:50,269 --> 00:00:56,280
high-performing and modular like Python

00:00:53,730 --> 00:01:00,180
library that you can use to work with

00:00:56,280 --> 00:01:03,089
your database and lets you construct

00:01:00,180 --> 00:01:04,400
your sequel queries with Python

00:01:03,089 --> 00:01:07,830
functions

00:01:04,400 --> 00:01:10,409
it also supports separation of mapping

00:01:07,830 --> 00:01:13,530
and classes which is you can have an

00:01:10,409 --> 00:01:17,220
aura and you can map your tables to

00:01:13,530 --> 00:01:19,830
Python objects and it also lets you

00:01:17,220 --> 00:01:22,770
equal vote or cache the way the objects

00:01:19,830 --> 00:01:28,190
that you achieve from your Tory's and

00:01:22,770 --> 00:01:31,860
culture lets you run logical statements

00:01:28,190 --> 00:01:34,710
sequel alchemy supports oestrus merciful

00:01:31,860 --> 00:01:41,100
and ssq and sequel white sideways

00:01:34,710 --> 00:01:45,420
drizzle fibroid and oracle we are going

00:01:41,100 --> 00:01:48,480
to inspect sequel alchemy as two parts

00:01:45,420 --> 00:01:52,530
one score and one is Ora the first one

00:01:48,480 --> 00:01:54,750
we are going to talk about this core SPL

00:01:52,530 --> 00:01:58,350
okay the core consists of consists of

00:01:54,750 --> 00:02:01,850
six objects which is engine connection

00:01:58,350 --> 00:02:04,860
pilot made a data table and column

00:02:01,850 --> 00:02:08,129
engine is the starting point for your

00:02:04,860 --> 00:02:10,050
super work in my application it is the

00:02:08,129 --> 00:02:11,980
home base for all your all over

00:02:10,050 --> 00:02:16,420
databases connections

00:02:11,980 --> 00:02:21,879
Stables and it's a API connection is a

00:02:16,420 --> 00:02:24,610
record class of your database

00:02:21,879 --> 00:02:28,720
Python library for example this psycho

00:02:24,610 --> 00:02:31,180
PG for phosphorus or magical Python of

00:02:28,720 --> 00:02:35,680
Mexico and connection is a record class

00:02:31,180 --> 00:02:38,769
above them all the sequel statements are

00:02:35,680 --> 00:02:46,510
executed through connection class and

00:02:38,769 --> 00:02:48,959
it's not trusted dialect is the class

00:02:46,510 --> 00:02:52,109
versico of the me generate queries

00:02:48,959 --> 00:02:55,329
execute queries or half of the results

00:02:52,109 --> 00:03:01,690
which might arise from database to

00:02:55,329 --> 00:03:04,269
database for example for example a

00:03:01,690 --> 00:03:08,470
select statement could be different in

00:03:04,269 --> 00:03:11,349
phosphorus and be different in seeker

00:03:08,470 --> 00:03:14,890
white and dialect class when you

00:03:11,349 --> 00:03:17,829
construct ok generously clearly that you

00:03:14,890 --> 00:03:23,859
want to construct according to the

00:03:17,829 --> 00:03:26,290
database metadata is the class that is

00:03:23,859 --> 00:03:28,239
binded to an engine or a connection

00:03:26,290 --> 00:03:34,480
which holds the table at color

00:03:28,239 --> 00:03:38,019
information and the table class is the

00:03:34,480 --> 00:03:41,560
class that you map your tables in the

00:03:38,019 --> 00:03:49,150
database which is storing the metadata

00:03:41,560 --> 00:03:53,500
and the columns are simply columns in

00:03:49,150 --> 00:03:56,169
your table so when you want to create an

00:03:53,500 --> 00:03:58,510
engine and sequel alchemy all we have to

00:03:56,169 --> 00:04:02,169
do is to import the creating crate

00:03:58,510 --> 00:04:05,799
engine function and then do the database

00:04:02,169 --> 00:04:11,169
URI URI and then the echo parameter

00:04:05,799 --> 00:04:15,849
there just to say that about the up what

00:04:11,169 --> 00:04:18,729
see completely you're right when when I

00:04:15,849 --> 00:04:21,250
create a table with sequel alchemy all

00:04:18,729 --> 00:04:26,380
we have to do is just run

00:04:21,250 --> 00:04:29,260
table class giving it metadata and you

00:04:26,380 --> 00:04:31,660
defined our columns in the table as

00:04:29,260 --> 00:04:36,310
argument and all we have to do is to

00:04:31,660 --> 00:04:39,730
call Crapo on the metadata or great on

00:04:36,310 --> 00:04:43,450
table object and this is an example you

00:04:39,730 --> 00:04:46,300
can see we are importing crate engine

00:04:43,450 --> 00:04:48,250
from Chico alchemy to instantiate and

00:04:46,300 --> 00:04:51,160
with a date object and then in the

00:04:48,250 --> 00:04:53,890
countries table we are using the

00:04:51,160 --> 00:04:56,919
countries string as its first argument

00:04:53,890 --> 00:04:59,650
and giving the metadata that we are we

00:04:56,919 --> 00:05:03,550
have just an Associated and then giving

00:04:59,650 --> 00:05:08,350
the column data as arguments to table

00:05:03,550 --> 00:05:13,290
class and as you see we have different

00:05:08,350 --> 00:05:17,230
types such as integer and you recall

00:05:13,290 --> 00:05:20,130
Unicode text and all these are parting

00:05:17,230 --> 00:05:28,410
to us is for sickle ultimately those

00:05:20,130 --> 00:05:32,590
that are in super welcoming so this

00:05:28,410 --> 00:05:36,340
usage is not the only parameters that

00:05:32,590 --> 00:05:39,580
column cell columns also have index

00:05:36,340 --> 00:05:43,240
Malibu unique primary care and other

00:05:39,580 --> 00:05:46,690
increment arguments which are boolean

00:05:43,240 --> 00:05:49,150
which takes boolean values so this

00:05:46,690 --> 00:05:52,750
basically says this column should be

00:05:49,150 --> 00:05:54,850
indexed or this column is unique or its

00:05:52,750 --> 00:06:00,580
columns the primary key for the database

00:05:54,850 --> 00:06:04,720
and the default upon update arguments

00:06:00,580 --> 00:06:09,780
just mean when you create a new record

00:06:04,720 --> 00:06:13,930
in the database set once the default

00:06:09,780 --> 00:06:17,320
argument it can be a particle or can

00:06:13,930 --> 00:06:19,510
just be a default value it should be it

00:06:17,320 --> 00:06:21,910
should match the type you gave it and

00:06:19,510 --> 00:06:25,169
when you update the role you can call

00:06:21,910 --> 00:06:28,680
the own update method on update

00:06:25,169 --> 00:06:28,680
attributes value

00:06:30,000 --> 00:06:37,419
so seeker welcoming supports integers

00:06:34,389 --> 00:06:42,460
with integers strings and the Unicode

00:06:37,419 --> 00:06:45,060
Unicode new context are all of these are

00:06:42,460 --> 00:06:49,889
Python classes and they are working

00:06:45,060 --> 00:06:54,780
standard secure pipes and it also has

00:06:49,889 --> 00:07:00,630
pipes like char varchar and pool but

00:06:54,780 --> 00:07:05,050
these classes above are rappers on them

00:07:00,630 --> 00:07:07,330
so what if you want to do an insert

00:07:05,050 --> 00:07:10,690
operation on the on the table

00:07:07,330 --> 00:07:14,350
so all these select insert update and

00:07:10,690 --> 00:07:17,860
delete functions are called on the table

00:07:14,350 --> 00:07:23,229
that you have created and the values

00:07:17,860 --> 00:07:27,130
method receives a keyword argument what

00:07:23,229 --> 00:07:30,699
will you gain will be used in an easy

00:07:27,130 --> 00:07:33,750
into statement they all should be violet

00:07:30,699 --> 00:07:38,460
or existing in the table or it will

00:07:33,750 --> 00:07:41,289
raise an exaction all the statements are

00:07:38,460 --> 00:07:44,320
as I have said going through the

00:07:41,289 --> 00:07:47,289
connection and you can achieve a

00:07:44,320 --> 00:07:49,690
connection with angel document we have

00:07:47,289 --> 00:07:53,530
created an engine with great engine and

00:07:49,690 --> 00:08:00,970
when you wanna run a query you have to

00:07:53,530 --> 00:08:05,440
call it on the connection so a select

00:08:00,970 --> 00:08:10,320
statement is select statement takes one

00:08:05,440 --> 00:08:13,479
argument but it's an array it could be

00:08:10,320 --> 00:08:16,139
anything you can just give the tables

00:08:13,479 --> 00:08:19,960
table object that you created or

00:08:16,139 --> 00:08:22,210
specific columns in the second example

00:08:19,960 --> 00:08:25,960
we want to secure welcome you to

00:08:22,210 --> 00:08:28,479
generate select call and name from

00:08:25,960 --> 00:08:32,260
country stable that's what we all want

00:08:28,479 --> 00:08:34,900
and in the third example we want to call

00:08:32,260 --> 00:08:38,070
alternative generating as expression

00:08:34,900 --> 00:08:41,729
like select code

00:08:38,070 --> 00:08:50,100
see for counterstain from our country

00:08:41,729 --> 00:08:54,660
stable with the coldest city and in the

00:08:50,100 --> 00:08:58,470
first query we only wanted list of

00:08:54,660 --> 00:09:04,040
countries that of which region is Europe

00:08:58,470 --> 00:09:08,340
and Central Asia and in the second

00:09:04,040 --> 00:09:12,030
statement we are asking cyclical to

00:09:08,340 --> 00:09:15,360
generate a query that twist the

00:09:12,030 --> 00:09:17,180
countries of each region is like Europe

00:09:15,360 --> 00:09:20,370
or Asia

00:09:17,180 --> 00:09:23,070
this is called sequel expression

00:09:20,370 --> 00:09:26,220
language which is a powerful tool of

00:09:23,070 --> 00:09:28,310
sequel alchemy and you can understand

00:09:26,220 --> 00:09:31,760
what I meant by function basically

00:09:28,310 --> 00:09:38,330
generation so you like Python and

00:09:31,760 --> 00:09:42,060
generates sequel so what if we wanted to

00:09:38,330 --> 00:09:44,610
group the regions with the number of

00:09:42,060 --> 00:09:53,730
countries and order them in a descending

00:09:44,610 --> 00:09:56,580
order we simply use select and I will

00:09:53,730 --> 00:10:01,350
get to form later

00:09:56,580 --> 00:10:04,880
it's a separate thing and we want seco

00:10:01,350 --> 00:10:08,730
alchemy to label the count object

00:10:04,880 --> 00:10:12,020
account and group by region and all the

00:10:08,730 --> 00:10:16,710
body count that it's generated and me

00:10:12,020 --> 00:10:20,070
query of January is this select count

00:10:16,710 --> 00:10:24,950
countries the radius count and countries

00:10:20,070 --> 00:10:30,150
that region for country profile and also

00:10:24,950 --> 00:10:34,320
if you wanna select LED pencil and the

00:10:30,150 --> 00:10:37,770
update operation as in select and insert

00:10:34,320 --> 00:10:41,340
and delete this performed on the table

00:10:37,770 --> 00:10:45,059
we simply say that we are going to

00:10:41,340 --> 00:10:48,839
update the country's record which is

00:10:45,059 --> 00:10:53,029
of which ID is one we're going to set

00:10:48,839 --> 00:10:53,029
its name as Turkey and call its truth

00:10:53,209 --> 00:11:02,309
let's do a little bit cocktail update

00:10:57,749 --> 00:11:06,029
operation we have an ordered list which

00:11:02,309 --> 00:11:12,059
is an array you can this is an imaginary

00:11:06,029 --> 00:11:16,949
everybody let's say it has three values

00:11:12,059 --> 00:11:19,619
of one five and six we generate a case

00:11:16,949 --> 00:11:31,709
this is an one filled with case last

00:11:19,619 --> 00:11:35,539
statement sicko so change when statement

00:11:31,709 --> 00:11:38,699
is used in the update operations

00:11:35,539 --> 00:11:42,239
basically a way to say what the

00:11:38,699 --> 00:11:46,499
condition is met use this value for this

00:11:42,239 --> 00:11:49,199
column so we are going to update the

00:11:46,499 --> 00:11:51,569
photo order let's say we have a forest

00:11:49,199 --> 00:11:57,389
table we are going to update the photo

00:11:51,569 --> 00:12:01,829
holder and we have a tree item in our

00:11:57,389 --> 00:12:04,709
ordered list and one we follow the ID

00:12:01,829 --> 00:12:09,299
one will be the first five will be the

00:12:04,709 --> 00:12:14,159
second and eight will be deferred so

00:12:09,299 --> 00:12:16,739
simply see Kawakami has a case method

00:12:14,159 --> 00:12:20,069
which generates the case statement

00:12:16,739 --> 00:12:22,349
it takes a list the first one is the

00:12:20,069 --> 00:12:27,689
statement and you will see that there's

00:12:22,349 --> 00:12:31,009
a triple unless the first one is the

00:12:27,689 --> 00:12:35,129
expression that says the condition is

00:12:31,009 --> 00:12:38,129
the ID must be photo ID that we have in

00:12:35,129 --> 00:12:43,459
the list and the index relief is I'm

00:12:38,129 --> 00:12:47,719
sure it's for order will be that index

00:12:43,459 --> 00:12:50,789
so the secret that will generate this

00:12:47,719 --> 00:12:53,789
update follows set for order and then a

00:12:50,789 --> 00:12:56,519
case statement which will say when it's

00:12:53,789 --> 00:13:00,959
done before I defeat

00:12:56,519 --> 00:13:04,500
but the variety is one if to be one when

00:13:00,959 --> 00:13:06,660
the fluoride is fine it will be true

00:13:04,500 --> 00:13:12,829
when the four is eight it will be three

00:13:06,660 --> 00:13:15,660
and the delete operation is also

00:13:12,829 --> 00:13:19,529
performed on the table we are basically

00:13:15,660 --> 00:13:23,370
saying here that the countries with the

00:13:19,529 --> 00:13:26,970
ID sixty seventy one eighteen ninety

00:13:23,370 --> 00:13:31,850
seven we just wanted to let them and

00:13:26,970 --> 00:13:31,850
that's not it on the score that says nah

00:13:44,820 --> 00:13:48,530
let's adopt that I'm sorry

00:13:50,030 --> 00:14:00,080
so if you'll notice that the columns

00:13:54,080 --> 00:14:03,440
have attributes like like I like the and

00:14:00,080 --> 00:14:06,680
they also support statements like equals

00:14:03,440 --> 00:14:10,460
and greater than greater or equal or

00:14:06,680 --> 00:14:14,680
less than says I Python statements and

00:14:10,460 --> 00:14:21,170
you can use them over you more

00:14:14,680 --> 00:14:25,880
so what if you were to join simple joint

00:14:21,170 --> 00:14:28,670
statement is constructed like this we

00:14:25,880 --> 00:14:33,770
have a search for Club method which will

00:14:28,670 --> 00:14:36,380
add which you create the join table than

00:14:33,770 --> 00:14:40,570
not a joint statement for us and we

00:14:36,380 --> 00:14:44,360
simply go from one table to another one

00:14:40,570 --> 00:14:47,480
if you remember the table creation we

00:14:44,360 --> 00:14:50,660
have any data table and it's headed for

00:14:47,480 --> 00:14:53,570
energy so simple I'll give me

00:14:50,660 --> 00:15:01,550
automatically generates the on statement

00:14:53,570 --> 00:15:08,510
so it will say join data on countries

00:15:01,550 --> 00:15:12,140
the ID equals data that country I or you

00:15:08,510 --> 00:15:14,870
can use the join method you can give the

00:15:12,140 --> 00:15:18,670
table names and then you can give the

00:15:14,870 --> 00:15:18,670
conditions yourself

00:15:20,730 --> 00:15:36,730
and of course you can fish so fun I used

00:15:29,710 --> 00:15:39,130
funk before to count the countries

00:15:36,730 --> 00:15:43,480
is a sequel ultimate class that

00:15:39,130 --> 00:15:46,780
generates sequel statements equal

00:15:43,480 --> 00:15:50,350
function statements that you give as an

00:15:46,780 --> 00:15:53,770
attribute you will understand better

00:15:50,350 --> 00:15:57,730
with an example so sequel has a concave

00:15:53,770 --> 00:16:01,900
extreme function which takes an argument

00:15:57,730 --> 00:16:04,840
as harmonic of the string what what will

00:16:01,900 --> 00:16:09,820
be the first argument and the column

00:16:04,840 --> 00:16:11,680
names so so you can welcome me doesn't

00:16:09,820 --> 00:16:13,720
want to know about quantity string it

00:16:11,680 --> 00:16:18,540
doesn't want to support for definite

00:16:13,720 --> 00:16:22,840
string but wants to tell you the option

00:16:18,540 --> 00:16:26,470
so when you call concave with string on

00:16:22,840 --> 00:16:30,190
the funk object for class it will

00:16:26,470 --> 00:16:33,460
generate the sickle statement as you

00:16:30,190 --> 00:16:36,490
wish with the given argument and it will

00:16:33,460 --> 00:16:39,130
generate a salad pocket with string the

00:16:36,490 --> 00:16:42,270
parameter the first parameter and then

00:16:39,130 --> 00:16:45,670
is query and then the other parameters

00:16:42,270 --> 00:16:48,670
so if we if you understand it doesn't

00:16:45,670 --> 00:16:56,350
use the string as you give me diffuse

00:16:48,670 --> 00:16:58,630
parameter value or ax C cannot give me

00:16:56,350 --> 00:17:02,590
around is built on top of the core and

00:16:58,630 --> 00:17:07,180
it's heavily uses the sequel has put

00:17:02,590 --> 00:17:09,970
expression language and you it suppose

00:17:07,180 --> 00:17:12,250
class declaration and table definition

00:17:09,970 --> 00:17:17,710
is in the class that you create you

00:17:12,250 --> 00:17:20,350
don't have to map tab separately so for

00:17:17,710 --> 00:17:24,520
example this is the country class that

00:17:20,350 --> 00:17:27,070
we created as a country table before if

00:17:24,520 --> 00:17:30,490
you find if you wanted to create the

00:17:27,070 --> 00:17:32,560
countries table as an hour I'm using

00:17:30,490 --> 00:17:38,670
water this is how we would do it

00:17:32,560 --> 00:17:41,860
base is anyone using jungle so this is

00:17:38,670 --> 00:17:46,780
base class is simply the models class

00:17:41,860 --> 00:17:51,400
object it's the main class that all the

00:17:46,780 --> 00:17:54,630
other objects will depend on so you give

00:17:51,400 --> 00:17:57,880
the table name as a table name attribute

00:17:54,630 --> 00:18:02,770
the class definition and you define all

00:17:57,880 --> 00:18:07,060
the columns in the class itself and you

00:18:02,770 --> 00:18:09,760
don't have to give the columns the first

00:18:07,060 --> 00:18:12,880
argument is string as the West alone

00:18:09,760 --> 00:18:15,430
will recall we've just creates the call

00:18:12,880 --> 00:18:17,820
in the column based on the attribute

00:18:15,430 --> 00:18:17,820
itself

00:18:21,360 --> 00:18:30,029
the orange main object is the session

00:18:25,259 --> 00:18:34,739
where the ogram establishes all the

00:18:30,029 --> 00:18:37,889
connections to the database and keeps

00:18:34,739 --> 00:18:42,529
all the objects stored all the objects

00:18:37,889 --> 00:18:47,480
and it's the entry point for the query

00:18:42,529 --> 00:18:54,799
class query classes will perform the

00:18:47,480 --> 00:18:54,799
sequel expression language for example

00:18:57,019 --> 00:19:08,639
okay I put that at the end so see Clark

00:19:05,100 --> 00:19:12,299
and supports master slave construction

00:19:08,639 --> 00:19:14,549
and all these sessions are created with

00:19:12,299 --> 00:19:18,960
the session metal helper it returns a

00:19:14,549 --> 00:19:21,350
function generator and for example the

00:19:18,960 --> 00:19:26,070
mast obsessional slave session we

00:19:21,350 --> 00:19:29,489
provided an engine is a buying argument

00:19:26,070 --> 00:19:32,179
and returns us an object that we can

00:19:29,489 --> 00:19:36,509
call that we can instantiate the class

00:19:32,179 --> 00:19:39,629
so let's say we session make the poor

00:19:36,509 --> 00:19:41,789
master session and slave session we will

00:19:39,629 --> 00:19:45,389
have a session and slave session objects

00:19:41,789 --> 00:19:49,220
which we can start with must calling

00:19:45,389 --> 00:19:54,119
master session and slave session objects

00:19:49,220 --> 00:19:56,519
is that easy so one year we want to

00:19:54,119 --> 00:19:59,429
create an object you can use the master

00:19:56,519 --> 00:20:04,580
session and when you wanna just query

00:19:59,429 --> 00:20:09,330
you can use the slave session like this

00:20:04,580 --> 00:20:12,989
for example this in the first query we

00:20:09,330 --> 00:20:18,840
want to list all the countries that's of

00:20:12,989 --> 00:20:20,040
which names start with tour or we can

00:20:18,840 --> 00:20:22,380
just

00:20:20,040 --> 00:20:25,530
fight the count of all the countries in

00:20:22,380 --> 00:20:29,130
table cicolecchia also supports a the

00:20:25,530 --> 00:20:31,919
duct count method has it completed you

00:20:29,130 --> 00:20:35,580
can just say accession that way and give

00:20:31,919 --> 00:20:42,210
their country argument and then calm and

00:20:35,580 --> 00:20:44,640
the joints are simpler in the third

00:20:42,210 --> 00:20:48,330
example we just want to treat the

00:20:44,640 --> 00:20:50,520
country's name and the data relate to

00:20:48,330 --> 00:20:53,460
that country and we're just going to

00:20:50,520 --> 00:20:59,190
join the data table and if you remember

00:20:53,460 --> 00:21:04,110
the data table was having foreign keys

00:20:59,190 --> 00:21:06,870
to come to stay at CEO alchemy just fine

00:21:04,110 --> 00:21:11,059
just mostly relation between de and

00:21:06,870 --> 00:21:20,040
generates the on stick you could also

00:21:11,059 --> 00:21:24,780
provide the condition yourself so

00:21:20,040 --> 00:21:31,620
if you wanted to update we only provide

00:21:24,780 --> 00:21:36,270
a dictionary with the existent column

00:21:31,620 --> 00:21:41,040
names of the table and the first example

00:21:36,270 --> 00:21:45,809
we are going to update the role the ID 1

00:21:41,040 --> 00:21:50,270
and change its name to USA in the second

00:21:45,809 --> 00:21:54,000
example we are going to find all the

00:21:50,270 --> 00:21:56,760
countries in Europe and Central Asia of

00:21:54,000 --> 00:22:03,830
which region is in Europe and Central

00:21:56,760 --> 00:22:09,870
Asia we are going to delete them but the

00:22:03,830 --> 00:22:12,450
tilde that negates the condition so this

00:22:09,870 --> 00:22:15,830
just deletes all the countries which are

00:22:12,450 --> 00:22:15,830
not in your and Central Asia

00:22:27,570 --> 00:22:33,940
what if you wanted to create

00:22:29,890 --> 00:22:38,020
relationships psycho alchemy has a much

00:22:33,940 --> 00:22:41,010
better class method actually called

00:22:38,020 --> 00:22:45,100
relationship and you can define

00:22:41,010 --> 00:22:48,159
relationship between tables between

00:22:45,100 --> 00:22:51,730
objects using the relationship object in

00:22:48,159 --> 00:22:58,179
the first example we define a carrot ID

00:22:51,730 --> 00:23:01,539
and heaven help every child every child

00:22:58,179 --> 00:23:04,750
class the term relationship to parity

00:23:01,539 --> 00:23:08,320
and in the parent object we say you have

00:23:04,750 --> 00:23:12,190
children and you are going to use the

00:23:08,320 --> 00:23:15,549
relationship with the child object so

00:23:12,190 --> 00:23:18,159
two things you have to pay attention mmm

00:23:15,549 --> 00:23:20,169
the first one is the foreign key it has

00:23:18,159 --> 00:23:26,950
to be a foreign key and the second one

00:23:20,169 --> 00:23:29,850
is the relationship class so if you want

00:23:26,950 --> 00:23:34,720
to have one-to-one relationship like

00:23:29,850 --> 00:23:38,710
general users now that we couldn't have

00:23:34,720 --> 00:23:41,140
our own user model so if you want to

00:23:38,710 --> 00:23:45,070
keep additional data on the user we have

00:23:41,140 --> 00:23:48,010
to create another class called user

00:23:45,070 --> 00:23:54,100
profile profile and something like that

00:23:48,010 --> 00:23:59,230
and to do this we still use the

00:23:54,100 --> 00:24:01,840
relationship class but we are it has an

00:23:59,230 --> 00:24:05,980
argument useless which basically says

00:24:01,840 --> 00:24:08,950
this is not going to be a list of child

00:24:05,980 --> 00:24:12,190
objects will be one child and one child

00:24:08,950 --> 00:24:16,240
only and the child object will be able

00:24:12,190 --> 00:24:17,940
to access the parent if the attribute

00:24:16,240 --> 00:24:23,080
that is given with the backdraft

00:24:17,940 --> 00:24:24,940
argument when you call it something else

00:24:23,080 --> 00:24:27,370
and when you have a child object and

00:24:24,940 --> 00:24:31,620
when you want to reach the parent you

00:24:27,370 --> 00:24:31,620
will say child that already came

00:24:32,960 --> 00:24:39,770
many-to-many relationships are a little

00:24:35,970 --> 00:24:46,290
bit complicated that django django is a

00:24:39,770 --> 00:24:49,250
lot more easy so there are two ways of

00:24:46,290 --> 00:24:54,030
accomplishing this one is using an

00:24:49,250 --> 00:24:58,230
terrible object and one is using an aura

00:24:54,030 --> 00:25:03,090
class so let's say we have a parent and

00:24:58,230 --> 00:25:05,060
a child objects which are going to be

00:25:03,090 --> 00:25:11,910
related through association table

00:25:05,060 --> 00:25:15,660
association table all speed data as for

00:25:11,910 --> 00:25:18,150
eg left ID is the parent ID and right

00:25:15,660 --> 00:25:19,440
that is the child line and all their

00:25:18,150 --> 00:25:22,380
foreign keys

00:25:19,440 --> 00:25:26,370
so when we define relationship in the

00:25:22,380 --> 00:25:29,070
parent we say this parent there's a

00:25:26,370 --> 00:25:34,350
relationship to child using this

00:25:29,070 --> 00:25:35,970
association table and then when we give

00:25:34,350 --> 00:25:37,710
it a background we don't have to give

00:25:35,970 --> 00:25:45,930
the background by the way we can just

00:25:37,710 --> 00:25:49,650
use a parent or turn that children the

00:25:45,930 --> 00:25:51,720
other way is to use the Orem way and you

00:25:49,650 --> 00:25:58,140
can give the class a name and define

00:25:51,720 --> 00:26:00,180
your attributes and you will be you will

00:25:58,140 --> 00:26:03,210
have to define your relationship in the

00:26:00,180 --> 00:26:07,380
parent and it will use the Association

00:26:03,210 --> 00:26:13,520
class will use the information that you

00:26:07,380 --> 00:26:17,760
provided as attributes for example also

00:26:13,520 --> 00:26:22,400
when the parents want to reach the child

00:26:17,760 --> 00:26:22,400
it will use the association table

00:26:24,430 --> 00:26:30,860
so what if what I do

00:26:28,670 --> 00:26:34,690
relationship morning techniques in

00:26:30,860 --> 00:26:38,510
secret Locker sequel or chemist supports

00:26:34,690 --> 00:26:44,720
laser ball joint law and sublevel of

00:26:38,510 --> 00:26:49,040
relationships you can say that the query

00:26:44,720 --> 00:26:51,140
you can say that visual or don't know or

00:26:49,040 --> 00:26:54,590
something about this relationship of

00:26:51,140 --> 00:26:57,950
this object that know I have or you can

00:26:54,590 --> 00:27:01,970
define the relationship in the class

00:26:57,950 --> 00:27:04,460
itself and this path class we have a

00:27:01,970 --> 00:27:08,180
children attribute which is related to

00:27:04,460 --> 00:27:12,860
child and whatever we query a path

00:27:08,180 --> 00:27:16,760
object using an expression language will

00:27:12,860 --> 00:27:22,510
more related objects with a software you

00:27:16,760 --> 00:27:22,510
can do lazy or join as well

00:27:27,030 --> 00:27:31,900
seto alpha means supports events

00:27:29,590 --> 00:27:35,640
violation and many more

00:27:31,900 --> 00:27:38,350
it has many more features and you

00:27:35,640 --> 00:27:41,860
comanche need of its ecological model or

00:27:38,350 --> 00:27:45,970
its source is that it up and it has an

00:27:41,860 --> 00:27:48,160
amazing community on IRC you can go

00:27:45,970 --> 00:27:50,310
there and just ask and people will help

00:27:48,160 --> 00:27:50,310

YouTube URL: https://www.youtube.com/watch?v=f_-ApViOv20


