Title: Kod.io 2014 - Objective-C for Rubyists by Mikael Konutgan
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	Objective-C might look like a crazy, complex and verbose language to the seasoned Rubyist.
In reality, they share many features.

This allows you to use your knowledge of Ruby to quickly get started with Objective-C.

In this talk, I will give an overview of the syntax and semantics of Objective-C and compare and contrast it with Ruby where appropriate.

Help us caption & translate this video!

http://amara.org/v/FG3V/
Captions: 
	00:00:17,940 --> 00:00:26,100
I really like languages all kinds of

00:00:23,580 --> 00:00:28,260
languages functional imperative or logic

00:00:26,100 --> 00:00:30,510
base and I really like objective-c and i

00:00:28,260 --> 00:00:32,970
really like Ruby and I like to compare

00:00:30,510 --> 00:00:35,730
different languages there's syntax and

00:00:32,970 --> 00:00:38,970
semantics and so I thought it would be

00:00:35,730 --> 00:00:41,220
very fun to compare objective-c and Ruby

00:00:38,970 --> 00:00:44,010
because they're I think their syntax is

00:00:41,220 --> 00:00:47,820
like a big couldn't be more different

00:00:44,010 --> 00:00:49,590
maybe but there are semantics like what

00:00:47,820 --> 00:00:52,949
you actually do and right and what

00:00:49,590 --> 00:00:54,720
happens is very similar as Laura already

00:00:52,949 --> 00:00:57,510
said I'm michalak current gun and I'm an

00:00:54,720 --> 00:01:06,440
iOS developer in Vienna at all about

00:00:57,510 --> 00:01:09,000
apps so why objective-c we want to make

00:01:06,440 --> 00:01:11,790
iphone apps and ipad apps because

00:01:09,000 --> 00:01:13,950
iphones are awesome and there it is

00:01:11,790 --> 00:01:18,049
according to Apple at least the most

00:01:13,950 --> 00:01:18,049
advanced operating system in the world

00:01:18,200 --> 00:01:29,190
so and Objective C is the native

00:01:23,840 --> 00:01:31,500
language of iOS all the frameworks are

00:01:29,190 --> 00:01:33,780
neglected see and the frameworks are

00:01:31,500 --> 00:01:38,100
written such that they work great with

00:01:33,780 --> 00:01:43,830
Objective C also max youth objective-c

00:01:38,100 --> 00:01:45,660
and even if you don't want to use

00:01:43,830 --> 00:01:47,580
objective c and you want to make iOS

00:01:45,660 --> 00:01:49,320
apps or mac apps and you want to use

00:01:47,580 --> 00:01:52,110
something like mac ruby or your emotion

00:01:49,320 --> 00:01:55,680
it helps a lot too no objective c and

00:01:52,110 --> 00:01:59,460
know how it works because these are the

00:01:55,680 --> 00:02:03,180
same limitations you have with Ruby

00:01:59,460 --> 00:02:07,200
motion or like why Ruby motion is a way

00:02:03,180 --> 00:02:09,660
it is because of oblivious see so first

00:02:07,200 --> 00:02:11,940
I want to look at a quick example just

00:02:09,660 --> 00:02:15,959
to get a taste of it so here we have

00:02:11,940 --> 00:02:18,000
some simple Ruby code a simple array and

00:02:15,959 --> 00:02:21,599
we're going to iterate over it and print

00:02:18,000 --> 00:02:25,230
out a string and this is how it looks

00:02:21,599 --> 00:02:28,240
tablet to see actually I'm just kidding

00:02:25,230 --> 00:02:29,950
this is what people think

00:02:28,240 --> 00:02:32,020
it looks enough like to see because I

00:02:29,950 --> 00:02:34,960
how that's how it looked like four or

00:02:32,020 --> 00:02:37,600
five years ago so you have to send a

00:02:34,960 --> 00:02:40,660
message to NS number to get a number

00:02:37,600 --> 00:02:43,090
object and you have an array and you can

00:02:40,660 --> 00:02:45,640
only have objects and arrays not actual

00:02:43,090 --> 00:02:48,160
numbers so you have to box them all and

00:02:45,640 --> 00:02:51,040
then put them in array and if you make

00:02:48,160 --> 00:02:54,420
an error you have to release it because

00:02:51,040 --> 00:02:58,690
it's like see and you have to free

00:02:54,420 --> 00:03:01,600
memory also we need to use a for loop

00:02:58,690 --> 00:03:04,300
but Apple is improving objective-c every

00:03:01,600 --> 00:03:07,450
year the language is improving the

00:03:04,300 --> 00:03:09,910
compiler is improving and the frameworks

00:03:07,450 --> 00:03:13,680
are improving and this is how I would

00:03:09,910 --> 00:03:18,670
write it today so as you see we have a

00:03:13,680 --> 00:03:22,750
array literal we have object number of

00:03:18,670 --> 00:03:25,540
literals and I can iterate over it using

00:03:22,750 --> 00:03:27,970
it like in each method and it's called

00:03:25,540 --> 00:03:30,580
inner mate enumerate objects using block

00:03:27,970 --> 00:03:32,920
yes block we have blocks in objective-c

00:03:30,580 --> 00:03:36,120
just like Ruby and that's a block it

00:03:32,920 --> 00:03:39,700
takes three parameters so it's basically

00:03:36,120 --> 00:03:41,500
Ruby objective-c and they're very

00:03:39,700 --> 00:03:46,000
similar of course the practices like

00:03:41,500 --> 00:03:50,250
typed and bit more verbose but they're

00:03:46,000 --> 00:03:52,960
very similar so objective-c is a strict

00:03:50,250 --> 00:03:54,340
superset of C as you've heard today if

00:03:52,960 --> 00:03:57,670
you were there with the Ruby motion

00:03:54,340 --> 00:04:00,570
talks its object oriented of course but

00:03:57,670 --> 00:04:04,780
everything is not an object like maybe

00:04:00,570 --> 00:04:06,820
Java we're like you have numbers that

00:04:04,780 --> 00:04:11,620
aren't objects you need to box them it

00:04:06,820 --> 00:04:14,500
has a dynamic runtime and you can do

00:04:11,620 --> 00:04:16,450
static or dynamic typing so you don't

00:04:14,500 --> 00:04:17,890
actually have to type the objects if you

00:04:16,450 --> 00:04:21,310
don't want to but it's still a good idea

00:04:17,890 --> 00:04:24,690
like in most developers do to it and in

00:04:21,310 --> 00:04:28,290
modern Objective C we have object

00:04:24,690 --> 00:04:30,850
literal to erase we have automatic

00:04:28,290 --> 00:04:34,870
reference counting so we don't have to

00:04:30,850 --> 00:04:37,600
actually manage your memory for objects

00:04:34,870 --> 00:04:39,310
and we have locks we can enumerate

00:04:37,600 --> 00:04:42,000
things and we can actually make

00:04:39,310 --> 00:04:46,610
domain-specific languages just like Ruby

00:04:42,000 --> 00:04:46,610
because we have introspection and blocks

00:04:46,640 --> 00:04:51,600
so it's a strict superset of C as i said

00:04:49,770 --> 00:04:54,540
before so everything that works in c

00:04:51,600 --> 00:04:57,230
wrote some types of C so every C program

00:04:54,540 --> 00:05:00,840
is a valid Objective C program and

00:04:57,230 --> 00:05:03,120
control flow is like see if while for

00:05:00,840 --> 00:05:07,260
structures and you have your primitive

00:05:03,120 --> 00:05:10,050
types in lawncare void start cetera you

00:05:07,260 --> 00:05:11,760
can use the whole seed libraries and the

00:05:10,050 --> 00:05:16,650
unique system calls because of course

00:05:11,760 --> 00:05:22,320
iOS is unix and Mac is also UNIX then

00:05:16,650 --> 00:05:24,300
one small thing because as he didn't

00:05:22,320 --> 00:05:26,790
used to have a boolean type and

00:05:24,300 --> 00:05:28,860
Objective C was written at the time even

00:05:26,790 --> 00:05:32,640
though what she does have a boolean type

00:05:28,860 --> 00:05:35,310
now we have this big bill and yes and no

00:05:32,640 --> 00:05:38,880
so instead of true and false but that's

00:05:35,310 --> 00:05:41,910
a small minor thing so let's define a

00:05:38,880 --> 00:05:43,260
objective c class what i'm going to do

00:05:41,910 --> 00:05:45,060
now is I'm going to go through the

00:05:43,260 --> 00:05:47,910
slides we're going to create a simple

00:05:45,060 --> 00:05:49,380
user class and i'm going to show you the

00:05:47,910 --> 00:05:53,520
objective-c version and the ruby version

00:05:49,380 --> 00:05:55,500
so class user in objective-c it's a

00:05:53,520 --> 00:05:57,990
sea-based language so we have a header

00:05:55,500 --> 00:06:02,310
file and an implementation file so dot

00:05:57,990 --> 00:06:04,700
HTM its we call it an interface so the

00:06:02,310 --> 00:06:07,470
super class is in its object it's not

00:06:04,700 --> 00:06:09,000
implicitly object like Ruby or other

00:06:07,470 --> 00:06:12,360
languages we have to always say in its

00:06:09,000 --> 00:06:13,890
object unless you want to have a object

00:06:12,360 --> 00:06:16,770
that doesn't have a superclass but

00:06:13,890 --> 00:06:19,740
that's another story the information

00:06:16,770 --> 00:06:24,060
file it has to exist but it's empty for

00:06:19,740 --> 00:06:27,180
this case then we want accessor methods

00:06:24,060 --> 00:06:28,800
for a name and last name previously you

00:06:27,180 --> 00:06:31,110
will have to write these yourself and

00:06:28,800 --> 00:06:33,150
define instance variables Ruby does this

00:06:31,110 --> 00:06:36,300
for you objective-c does it for you to

00:06:33,150 --> 00:06:39,229
now so it's called the property two

00:06:36,300 --> 00:06:43,169
strings don't worry about the copy and

00:06:39,229 --> 00:06:46,200
non-atomic part for now installation is

00:06:43,169 --> 00:06:47,220
lengthy again last year or like a few

00:06:46,200 --> 00:06:50,220
years ago you would have to write

00:06:47,220 --> 00:06:53,099
synthesized which generates instance

00:06:50,220 --> 00:06:54,300
variables for you name underscore

00:06:53,099 --> 00:06:55,680
underscore name of mental nothing

00:06:54,300 --> 00:06:58,740
nowadays you have to that either

00:06:55,680 --> 00:07:00,600
so that's enough though and then you can

00:06:58,740 --> 00:07:02,250
implement the initializer in Ruby just

00:07:00,600 --> 00:07:04,740
set the instance variables with the two

00:07:02,250 --> 00:07:06,060
parameters and in objective c you can

00:07:04,740 --> 00:07:07,800
declare the method so don't worry about

00:07:06,060 --> 00:07:10,860
the method syntax for now i'm going to

00:07:07,800 --> 00:07:13,919
come to that so in it with name and last

00:07:10,860 --> 00:07:15,419
name and then in the implementation you

00:07:13,919 --> 00:07:17,580
would implement the method so again

00:07:15,419 --> 00:07:19,320
basically we're doing the same exact

00:07:17,580 --> 00:07:22,699
thing we're setting the instance

00:07:19,320 --> 00:07:26,850
variables to the method parameters and

00:07:22,699 --> 00:07:29,360
this is a joke I saw some time ago

00:07:26,850 --> 00:07:32,430
because objective-c is like verbose and

00:07:29,360 --> 00:07:34,680
typed so when you write a method very

00:07:32,430 --> 00:07:36,479
often type every oftentimes you write

00:07:34,680 --> 00:07:37,800
the same thing like three times so do

00:07:36,479 --> 00:07:42,870
you know the muffin man the muffin man

00:07:37,800 --> 00:07:47,039
the muffin man using classes so and this

00:07:42,870 --> 00:07:49,169
is how we use objective c classes so in

00:07:47,039 --> 00:07:52,080
ruby you would just say I user not new

00:07:49,169 --> 00:07:55,080
we have a user we can get the user and

00:07:52,080 --> 00:07:58,169
then we can set the user objective c is

00:07:55,080 --> 00:08:04,080
basically very similar we send a message

00:07:58,169 --> 00:08:05,880
to the class km user and then we can set

00:08:04,080 --> 00:08:11,400
the user with these dot this dot syntax

00:08:05,880 --> 00:08:13,020
and get it and also we have this message

00:08:11,400 --> 00:08:14,849
sending sometimes that's what happens

00:08:13,020 --> 00:08:16,919
actually happens these thought is just

00:08:14,849 --> 00:08:19,889
like a comedians that also happened

00:08:16,919 --> 00:08:23,340
recently i will get to that in a bit

00:08:19,889 --> 00:08:25,849
also so objective-c messages so this is

00:08:23,340 --> 00:08:31,020
what messages look like they're long

00:08:25,849 --> 00:08:35,339
strings with Collins each column

00:08:31,020 --> 00:08:37,500
represents a a parameter so this first

00:08:35,339 --> 00:08:39,539
method in it with name that would be a

00:08:37,500 --> 00:08:41,400
parameter name and last names also

00:08:39,539 --> 00:08:43,829
parameter so each parameters also has a

00:08:41,400 --> 00:08:48,180
name so like it's the new it's like the

00:08:43,829 --> 00:08:50,190
new Ruby to keyword parameters and this

00:08:48,180 --> 00:08:51,870
is also a very long method named replace

00:08:50,190 --> 00:08:55,110
objects in range with objects from air a

00:08:51,870 --> 00:09:00,110
range which is an method on an array

00:08:55,110 --> 00:09:05,209
which you you could it's what a success

00:09:00,110 --> 00:09:08,520
here again is it the method so the

00:09:05,209 --> 00:09:09,329
first- is a minus or plus it shows that

00:09:08,520 --> 00:09:11,489
it's a class

00:09:09,329 --> 00:09:13,470
method or an instance method minus is an

00:09:11,489 --> 00:09:17,329
instance method that you have the return

00:09:13,470 --> 00:09:19,920
type don't worry about the stars for now

00:09:17,329 --> 00:09:21,480
user is the return type and the first

00:09:19,920 --> 00:09:25,860
parameter is name and the second

00:09:21,480 --> 00:09:29,040
parameters last name and that and the

00:09:25,860 --> 00:09:34,379
whole selector method is in it with name

00:09:29,040 --> 00:09:36,360
Collin last name Collin so in Ruby you

00:09:34,379 --> 00:09:37,860
would call a method like this just for

00:09:36,360 --> 00:09:39,689
example if we had a personal object with

00:09:37,860 --> 00:09:43,410
a say hello method we could call it with

00:09:39,689 --> 00:09:46,199
the string Lucas an objective c you use

00:09:43,410 --> 00:09:48,959
these square brackets so person say

00:09:46,199 --> 00:09:52,139
hello Lucas is the parameter and person

00:09:48,959 --> 00:09:56,939
is getting the say hello message like

00:09:52,139 --> 00:10:00,299
it's the small talk method mmm message

00:09:56,939 --> 00:10:03,569
sending way also like I said objective-c

00:10:00,299 --> 00:10:06,739
is fully dynamic so in Ruby you could

00:10:03,569 --> 00:10:10,139
just send a method like this for example

00:10:06,739 --> 00:10:12,689
objective c you can do preform selector

00:10:10,139 --> 00:10:14,519
so like selectors fully dynamic even

00:10:12,689 --> 00:10:17,699
though it does not like at all so like

00:10:14,519 --> 00:10:20,279
you can actually get a selector object

00:10:17,699 --> 00:10:22,559
from a string this can be any string and

00:10:20,279 --> 00:10:27,179
you can send the message pass it around

00:10:22,559 --> 00:10:30,179
so it's really dynamic objects are all

00:10:27,179 --> 00:10:32,189
see pointers but you don't have to ever

00:10:30,179 --> 00:10:34,519
worry about that okay not ever but

00:10:32,189 --> 00:10:38,730
mostly just put the star there and

00:10:34,519 --> 00:10:40,559
sometimes when things happen it's good

00:10:38,730 --> 00:10:41,910
to know about pointers but basically you

00:10:40,559 --> 00:10:48,899
can do everything without worrying about

00:10:41,910 --> 00:10:51,869
that at all and foundation is where it's

00:10:48,899 --> 00:10:55,069
like the standard library of ability to

00:10:51,869 --> 00:10:59,629
see so it's it defines all things like

00:10:55,069 --> 00:11:02,369
arrays in our data structures algorithms

00:10:59,629 --> 00:11:05,249
XML routines JSON routine state time

00:11:02,369 --> 00:11:07,949
handling networking and all that other

00:11:05,249 --> 00:11:10,679
kind of stuff and even if you use for

00:11:07,949 --> 00:11:14,220
example like Ruby motion you will still

00:11:10,679 --> 00:11:20,279
be working with these objects sometimes

00:11:14,220 --> 00:11:22,329
in an attack in Ruby motion the Ruby

00:11:20,279 --> 00:11:26,739
standard libraries often mapped to

00:11:22,329 --> 00:11:31,089
foundation objects in Ruby we have

00:11:26,739 --> 00:11:33,610
string we have NS string array NS array

00:11:31,089 --> 00:11:36,850
and hash is nsdictionary probably the

00:11:33,610 --> 00:11:39,999
three most used classes and we have a

00:11:36,850 --> 00:11:43,899
concept of mutability so the string

00:11:39,999 --> 00:11:46,989
array in hash classes are not mutable

00:11:43,899 --> 00:11:49,809
you can't change them after you create

00:11:46,989 --> 00:11:53,379
them that's why we have subclasses

00:11:49,809 --> 00:11:55,089
thereof that are you can actually change

00:11:53,379 --> 00:11:59,999
them like add objects to the arrays or

00:11:55,089 --> 00:11:59,999
set or remove objects from laser for

00:12:00,749 --> 00:12:04,509
performance reasons basically but

00:12:02,709 --> 00:12:07,170
nowadays it's not really important you

00:12:04,509 --> 00:12:12,579
can always get away with using a

00:12:07,170 --> 00:12:15,839
immutable variant mostly so in Ruby you

00:12:12,579 --> 00:12:19,929
would use an array like this objective-c

00:12:15,839 --> 00:12:22,209
same almost what the @ sign is just like

00:12:19,929 --> 00:12:26,829
the boxed expression to get an array or

00:12:22,209 --> 00:12:28,660
a string as a hash in Ruby here's a hash

00:12:26,829 --> 00:12:32,379
injective see also basically the same

00:12:28,660 --> 00:12:35,980
with these at signs around you might be

00:12:32,379 --> 00:12:38,649
wondering why I have NS km all these

00:12:35,980 --> 00:12:41,019
little two or three that are prefixes be

00:12:38,649 --> 00:12:45,699
four classes the reason is that we don't

00:12:41,019 --> 00:12:49,869
have like modules or namespaces so we

00:12:45,699 --> 00:12:55,179
just each class has a few letters before

00:12:49,869 --> 00:12:56,709
to prevent namespace issues and NS

00:12:55,179 --> 00:13:00,069
stands for next step the complaint it

00:12:56,709 --> 00:13:01,899
Steve Jobs founded when you got kicked

00:13:00,069 --> 00:13:04,689
out of Apple and that's where you

00:13:01,899 --> 00:13:07,980
started to use objective-c duck typing

00:13:04,689 --> 00:13:11,589
is something that like scripting

00:13:07,980 --> 00:13:16,540
languages are famous for an objective C

00:13:11,589 --> 00:13:19,600
can be duck typed so you can use for

00:13:16,540 --> 00:13:22,869
example like in Ruby you can check if

00:13:19,600 --> 00:13:28,089
object response to a method like this in

00:13:22,869 --> 00:13:29,589
objective c you can do this and in ruby

00:13:28,089 --> 00:13:31,749
you could have like sender it's not

00:13:29,589 --> 00:13:34,059
typed you can check if it's an array or

00:13:31,749 --> 00:13:35,620
a hash and do something else in

00:13:34,059 --> 00:13:39,560
objective c you can see that

00:13:35,620 --> 00:13:41,450
type their ID ID is just means basically

00:13:39,560 --> 00:13:43,370
it's an object but I don't care which

00:13:41,450 --> 00:13:46,010
type it is then you can check if it the

00:13:43,370 --> 00:13:48,470
class is button or a different class and

00:13:46,010 --> 00:13:50,810
do something else so objective-c also in

00:13:48,470 --> 00:13:53,840
this sense is like Ruby that you don't

00:13:50,810 --> 00:13:55,880
actually have to type objects but it's a

00:13:53,840 --> 00:13:59,650
help to the compiler and to the person

00:13:55,880 --> 00:14:02,510
who's bringing the code to check blocks

00:13:59,650 --> 00:14:04,940
in objective c you can use blocks to

00:14:02,510 --> 00:14:07,670
enumerate to pass code around a

00:14:04,940 --> 00:14:10,610
synchronous tasks and blocks or closures

00:14:07,670 --> 00:14:14,210
just like will be again here's a ruby

00:14:10,610 --> 00:14:16,610
block or a lambda the win f 21.9 and you

00:14:14,210 --> 00:14:20,000
can call it objective-c that's a block

00:14:16,610 --> 00:14:22,880
again it's typed so that just basically

00:14:20,000 --> 00:14:25,160
says it's a block that returns nothing

00:14:22,880 --> 00:14:28,520
bored and doesn't take any parameters

00:14:25,160 --> 00:14:32,750
and then you can just call it like a

00:14:28,520 --> 00:14:36,950
normal as if it were a function and you

00:14:32,750 --> 00:14:40,210
can do like concurrency with blocks in

00:14:36,950 --> 00:14:44,720
fact that's the reason that locks were

00:14:40,210 --> 00:14:46,460
added to the language like you can do a

00:14:44,720 --> 00:14:48,020
blond running task in the background

00:14:46,460 --> 00:14:49,910
with this block and then when you're

00:14:48,020 --> 00:14:53,750
done you can run something on the main

00:14:49,910 --> 00:14:56,870
thread and update the UI for example how

00:14:53,750 --> 00:14:59,630
to declare blocks basically we don't

00:14:56,870 --> 00:15:01,670
know because it's so difficult in a bit

00:14:59,630 --> 00:15:03,470
strange and we have the site like

00:15:01,670 --> 00:15:05,510
 block syntax calm and it's not a

00:15:03,470 --> 00:15:08,710
joke I use it every day to check this

00:15:05,510 --> 00:15:11,090
impacts of locks and we all do

00:15:08,710 --> 00:15:13,130
domain-specific languages so if you have

00:15:11,090 --> 00:15:15,590
locks and you have introspection and you

00:15:13,130 --> 00:15:18,440
have duck typing it helps you to create

00:15:15,590 --> 00:15:21,170
domain-specific languages that's why you

00:15:18,440 --> 00:15:24,650
can have crazy things that don't look

00:15:21,170 --> 00:15:27,320
like programs in Ruby and we can do the

00:15:24,650 --> 00:15:33,710
same thing I'd like to see like here's

00:15:27,320 --> 00:15:36,650
the bacon testing framework it doesn't

00:15:33,710 --> 00:15:38,060
really look like code like to a person

00:15:36,650 --> 00:15:39,590
who doesn't really know about Ruby you

00:15:38,060 --> 00:15:43,490
would like you wouldn't guess it's Ruby

00:15:39,590 --> 00:15:47,630
but it is valid Ruby code and this is a

00:15:43,490 --> 00:15:48,800
testing primary objective c also looks

00:15:47,630 --> 00:15:52,029
like

00:15:48,800 --> 00:15:54,200
I end up like code because of the

00:15:52,029 --> 00:16:00,890
semicolon things but also like very

00:15:54,200 --> 00:16:04,160
expressive syntax to test things the

00:16:00,890 --> 00:16:06,320
objective-c runtime I Joshua mentioned

00:16:04,160 --> 00:16:09,740
it today if you were in his talk it

00:16:06,320 --> 00:16:13,810
basically you can let's how you would

00:16:09,740 --> 00:16:16,790
included by the way you have a set of C

00:16:13,810 --> 00:16:18,950
functions that all your objective-c code

00:16:16,790 --> 00:16:22,250
gets compiled down to so you can

00:16:18,950 --> 00:16:25,250
actually create classes on the fly at

00:16:22,250 --> 00:16:28,910
runtime just like Ruby you can you can

00:16:25,250 --> 00:16:31,910
enumerate the instance variables of a

00:16:28,910 --> 00:16:33,860
class just like Ruby you can add methods

00:16:31,910 --> 00:16:35,890
to a class remove methods for my class

00:16:33,860 --> 00:16:38,649
switch your own methods set this

00:16:35,890 --> 00:16:42,410
superclass of an object at runtime

00:16:38,649 --> 00:16:44,450
change its class here I crees and do a

00:16:42,410 --> 00:16:46,100
crazy thing like that all at runtime of

00:16:44,450 --> 00:16:51,470
course I wouldn't recommend it in

00:16:46,100 --> 00:16:54,529
production but it works and it's also

00:16:51,470 --> 00:17:00,410
shows like that it's fully dynamic and

00:16:54,529 --> 00:17:04,280
like Ruby tooling we have Ruby gems and

00:17:00,410 --> 00:17:09,470
bundler to like manage dependencies

00:17:04,280 --> 00:17:15,079
install dependencies recently protective

00:17:09,470 --> 00:17:18,230
see we have cocoa pods so like you can

00:17:15,079 --> 00:17:21,199
ask it's like Ruby gems in fact it is a

00:17:18,230 --> 00:17:24,819
ruby gem it's written in Ruby to install

00:17:21,199 --> 00:17:28,160
dependencies and objective-c and set and

00:17:24,819 --> 00:17:32,450
install them and stuff so that was my

00:17:28,160 --> 00:17:35,150
talk not very long what I try to show

00:17:32,450 --> 00:17:38,050
you here is that like objectivity is not

00:17:35,150 --> 00:17:41,540
some kind of alien and crazy language

00:17:38,050 --> 00:17:44,419
nowadays modern objective-c is very

00:17:41,540 --> 00:17:51,669
expressive it's very dynamic it's very

00:17:44,419 --> 00:17:54,770
nice to work with and it's a great

00:17:51,669 --> 00:17:57,230
choice and the my opinion the best

00:17:54,770 --> 00:17:59,570
choice to write iOS ipad and mac OS 9

00:17:57,230 --> 00:18:02,030
applications

00:17:59,570 --> 00:18:05,090
so where to go from here these are

00:18:02,030 --> 00:18:09,140
actually links so i will provide a link

00:18:05,090 --> 00:18:11,090
to my slides via twitter or maybe if we

00:18:09,140 --> 00:18:15,910
have a site for other sides you can

00:18:11,090 --> 00:18:26,840
click them i listed a few books and

00:18:15,910 --> 00:18:30,530
thank you questions also since we have

00:18:26,840 --> 00:18:32,630
time i could do like show you around

00:18:30,530 --> 00:18:35,600
xcode a little bit maybe five minutes

00:18:32,630 --> 00:18:38,750
start and make an iOS application whoop

00:18:35,600 --> 00:18:45,560
and run it or I could answer more

00:18:38,750 --> 00:18:48,260
questions or something to go ok I have

00:18:45,560 --> 00:19:00,460
are your questions so maybe ever there's

00:18:48,260 --> 00:19:00,460
time we could go for the demo ok ok so

00:19:04,120 --> 00:19:19,909
to mirror my display okay so xcode is a

00:19:15,440 --> 00:19:21,289
app on the mac app store it's free so

00:19:19,909 --> 00:19:25,570
you can just get it and i'm just going

00:19:21,289 --> 00:19:29,299
to create a new application now and like

00:19:25,570 --> 00:19:38,510
usually I start with a single View

00:19:29,299 --> 00:19:42,700
application let's make an iphone

00:19:38,510 --> 00:19:46,850
application and save it somewhere and

00:19:42,700 --> 00:19:50,690
you get a basic project structure here

00:19:46,850 --> 00:19:54,919
so this is the we are here you are your

00:19:50,690 --> 00:19:56,750
classes that's a view controller and you

00:19:54,919 --> 00:19:59,120
have a main like a storyboard file you

00:19:56,750 --> 00:20:02,659
can use this is where like often you can

00:19:59,120 --> 00:20:06,230
do your interface here I often all just

00:20:02,659 --> 00:20:09,260
usually do it like in code plus you it

00:20:06,230 --> 00:20:11,270
is I like it better and as a programmer

00:20:09,260 --> 00:20:14,409
we're better with cold I think they're

00:20:11,270 --> 00:20:17,390
like like I am better than edge like

00:20:14,409 --> 00:20:19,520
moving around buttons one pixel at a

00:20:17,390 --> 00:20:25,760
time and again I can just say 10 by 10

00:20:19,520 --> 00:20:27,260
inch right there and then you can the

00:20:25,760 --> 00:20:29,809
application starts like right here

00:20:27,260 --> 00:20:32,750
application did finish launching with

00:20:29,809 --> 00:20:35,270
options basically after this point your

00:20:32,750 --> 00:20:39,850
code starts to run but if you have a

00:20:35,270 --> 00:20:42,320
storyboard file here then the runtime

00:20:39,850 --> 00:20:46,340
starts this storyboard and the

00:20:42,320 --> 00:20:51,799
storyboards first view controller it's

00:20:46,340 --> 00:20:53,390
like a a mod unit of like a screen one

00:20:51,799 --> 00:20:56,900
screen live on screen shows the view

00:20:53,390 --> 00:20:59,960
controller and it has a class and here

00:20:56,900 --> 00:21:02,840
it is and that class is right here so in

00:20:59,960 --> 00:21:06,169
this case my code would start right here

00:21:02,840 --> 00:21:09,890
in the view did load method of the first

00:21:06,169 --> 00:21:14,390
view controller and I can just run this

00:21:09,890 --> 00:21:16,700
file and I wait a minute yes I run it at

00:21:14,390 --> 00:21:20,990
a 64-bit four-inch

00:21:16,700 --> 00:21:26,450
education and this is already a fully

00:21:20,990 --> 00:21:28,190
functioning iOS app that will get scale

00:21:26,450 --> 00:21:30,800
the window a little bit it's just a

00:21:28,190 --> 00:21:33,050
white screen and that's how the

00:21:30,800 --> 00:21:36,110
application would look so this is the

00:21:33,050 --> 00:21:40,280
iOS simulator when you lead on xcode you

00:21:36,110 --> 00:21:41,840
you get it right there and you can test

00:21:40,280 --> 00:21:45,020
everything here it works really really

00:21:41,840 --> 00:21:47,030
well so like oftentimes you can get away

00:21:45,020 --> 00:21:49,190
with developing all your desk the whole

00:21:47,030 --> 00:21:51,020
application here of course you can also

00:21:49,190 --> 00:21:53,660
test on the device it's really fast and

00:21:51,020 --> 00:21:56,330
like you can make changes and it could

00:21:53,660 --> 00:21:58,430
it it's almost instantly like almost

00:21:56,330 --> 00:22:00,980
even though you have to have a compile

00:21:58,430 --> 00:22:05,230
step because things get like cached it's

00:22:00,980 --> 00:22:11,690
almost as fast as just really only a

00:22:05,230 --> 00:22:13,700
browser often times and then how it

00:22:11,690 --> 00:22:16,220
works usually with you I you have

00:22:13,700 --> 00:22:18,470
different view controllers you can also

00:22:16,220 --> 00:22:20,480
add them in the storyboard and then

00:22:18,470 --> 00:22:23,890
different view controllers you can add

00:22:20,480 --> 00:22:26,540
buttons here or like different

00:22:23,890 --> 00:22:30,770
components and then you can connect them

00:22:26,540 --> 00:22:33,770
with code and then you can add new few

00:22:30,770 --> 00:22:35,360
controllers to the screen and pop your

00:22:33,770 --> 00:22:37,850
controllers from the screen and that's

00:22:35,360 --> 00:22:41,860
how like you develop applications like

00:22:37,850 --> 00:22:45,200
it's an it's off model view controller

00:22:41,860 --> 00:22:46,670
just like rails so this part would be

00:22:45,200 --> 00:22:48,530
the controller park then you would make

00:22:46,670 --> 00:22:50,300
you like a model object and then you can

00:22:48,530 --> 00:22:51,350
make your own views or just use

00:22:50,300 --> 00:22:54,890
different views that are already

00:22:51,350 --> 00:23:01,660
available like buttons or labels or that

00:22:54,890 --> 00:23:04,660
kind of things yeah any questions now

00:23:01,660 --> 00:23:04,660
maybe

00:23:09,440 --> 00:23:14,299

YouTube URL: https://www.youtube.com/watch?v=Goi0CE6Ww4M


