Title: Kod.io 2014 - RubyMotion's Secret Sauce by Joshua Balanco
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	On the surface, RubyMotion is a tool that let's developers use Ruby to create desktop and mobile applications.
Look a bit deeper, though, and you'll find a community of developers actually having fun building libraries, coming up with new ways to design apps, and sharing what they've learned with each other.

In this talk, we'll go over how to get started with RubyMotion, look at some of the features that make it so much fun to work with, and briefly survey some of the many available libraries.

In the end, even if your next app isn't a RubyMotion app, hopefully you'll at least catch the spirit embodied by the RubyMotion community.

Help us caption & translate this video!

http://amara.org/v/FG3T/
Captions: 
	00:00:19,970 --> 00:00:28,710
okay so welcome everyone thank you for

00:00:24,330 --> 00:00:30,900
coming I realize the sacrifice you're

00:00:28,710 --> 00:00:34,070
making coming here instead of waiting in

00:00:30,900 --> 00:00:37,410
line for lunch so I appreciate it

00:00:34,070 --> 00:00:39,000
somehow I have a the luck of always

00:00:37,410 --> 00:00:41,070
going right before lunch so i'll try not

00:00:39,000 --> 00:00:45,480
to keep you too long and hopefully keep

00:00:41,070 --> 00:00:47,220
you entertained in the meanwhile so as

00:00:45,480 --> 00:00:51,989
mentioned i'd like to talk to you today

00:00:47,220 --> 00:00:54,780
a little bit about Ruby motion as was

00:00:51,989 --> 00:00:59,150
mentioned just some contact info for me

00:00:54,780 --> 00:01:02,400
here I do live in bodrum turkey that's

00:00:59,150 --> 00:01:05,159
picture of the castle that we get to see

00:01:02,400 --> 00:01:07,680
so and that in the background and the

00:01:05,159 --> 00:01:12,810
mist is Greece so kind of it's a nice

00:01:07,680 --> 00:01:15,930
place you might have noticed I don't

00:01:12,810 --> 00:01:18,030
necessarily have a Turkish accent and

00:01:15,930 --> 00:01:21,390
it's because I am actually not Turkish

00:01:18,030 --> 00:01:24,320
my wife is and that's how we ended up

00:01:21,390 --> 00:01:28,560
there people sometimes ask you know so

00:01:24,320 --> 00:01:32,420
and currently I work for Glencoe

00:01:28,560 --> 00:01:35,640
software we are the commercial arm of

00:01:32,420 --> 00:01:40,260
the open microscopy environment which

00:01:35,640 --> 00:01:44,700
build tools libraries and a platform for

00:01:40,260 --> 00:01:47,670
scientists to manage and organize a

00:01:44,700 --> 00:01:51,600
microscope data but I'm not going to

00:01:47,670 --> 00:01:53,700
talk about microscopes today instead I'm

00:01:51,600 --> 00:01:56,790
going to talk about Ruby motion so what

00:01:53,700 --> 00:02:01,500
is Ruby motion well to put it quite

00:01:56,790 --> 00:02:04,080
simply Ruby motion is a dialect of the

00:02:01,500 --> 00:02:09,090
Ruby language implemented on the

00:02:04,080 --> 00:02:11,430
objective-c runtime so it's not a

00:02:09,090 --> 00:02:14,610
hundred percent compatible with any

00:02:11,430 --> 00:02:20,459
version of Ruby it's closest to Ruby 193

00:02:14,610 --> 00:02:24,540
20 ish and there are certain reasons

00:02:20,459 --> 00:02:27,510
there are certain limitations of the iOS

00:02:24,540 --> 00:02:29,790
devices that make it impossible to be

00:02:27,510 --> 00:02:31,380
one hundred percent compliant so it

00:02:29,790 --> 00:02:35,910
tries to be as

00:02:31,380 --> 00:02:38,630
compatible as possible uh and using the

00:02:35,910 --> 00:02:44,190
objective-c runtime what does that mean

00:02:38,630 --> 00:02:46,770
well to help you understand how Ruby

00:02:44,190 --> 00:02:48,000
motion relates to objective-c in iOS and

00:02:46,770 --> 00:02:52,500
what the heck is this thing called the

00:02:48,000 --> 00:02:55,080
objective-c runtime let's consider some

00:02:52,500 --> 00:02:56,730
objective-c code so if you're not

00:02:55,080 --> 00:02:59,610
familiar this is a simple class

00:02:56,730 --> 00:03:05,070
declaration in objective-c with two

00:02:59,610 --> 00:03:09,210
member variables x bars right and you

00:03:05,070 --> 00:03:15,110
might assume that when you write this

00:03:09,210 --> 00:03:19,550
code it runs on the device simple right

00:03:15,110 --> 00:03:22,380
but not quite it's not quite that simple

00:03:19,550 --> 00:03:26,310
because what happens when you compile an

00:03:22,380 --> 00:03:31,950
objective-c project is that the compiler

00:03:26,310 --> 00:03:35,400
turns objective c into c function calls

00:03:31,950 --> 00:03:38,100
and the objective-c runtime is this

00:03:35,400 --> 00:03:41,760
collection of function calls that are

00:03:38,100 --> 00:03:44,130
used to do everything that you expect

00:03:41,760 --> 00:03:46,770
objective-c to do right so this is just

00:03:44,130 --> 00:03:49,620
a small sample right so you've defined a

00:03:46,770 --> 00:03:51,120
class with some ivars very simple but

00:03:49,620 --> 00:03:53,760
the compiler actually has to turn this

00:03:51,120 --> 00:03:55,710
into a call to this c function allocate

00:03:53,760 --> 00:03:58,770
class pair and then register class pair

00:03:55,710 --> 00:04:00,000
and then add ivar and a dive are when

00:03:58,770 --> 00:04:03,390
you start calling methods there's

00:04:00,000 --> 00:04:07,350
obviously message send and all sorts of

00:04:03,390 --> 00:04:10,290
different see functions right but what's

00:04:07,350 --> 00:04:12,510
really nice about objective-c is that

00:04:10,290 --> 00:04:16,890
these see functions are available in a

00:04:12,510 --> 00:04:19,590
library for anybody so we can just

00:04:16,890 --> 00:04:23,850
simply say well if you're going to

00:04:19,590 --> 00:04:26,100
define a ruby class and add instance

00:04:23,850 --> 00:04:29,010
variables to the Ruby class which is

00:04:26,100 --> 00:04:32,940
call the same see functions and that's

00:04:29,010 --> 00:04:36,450
exactly what Ruby motion does so people

00:04:32,940 --> 00:04:39,060
sometimes are a little confused by Ruby

00:04:36,450 --> 00:04:41,550
motion because before Ruby motion there

00:04:39,060 --> 00:04:44,760
were a lot of other compatibility

00:04:41,550 --> 00:04:47,260
libraries or frameworks or you know

00:04:44,760 --> 00:04:48,820
phonegap and sencha touch and they've

00:04:47,260 --> 00:04:49,870
all changed their names for some reason

00:04:48,820 --> 00:04:52,810
so I don't think those are the current

00:04:49,870 --> 00:04:56,170
names and a lot of times what they were

00:04:52,810 --> 00:04:58,840
doing is working with JavaScript a lot

00:04:56,170 --> 00:05:02,460
of the time but actually having

00:04:58,840 --> 00:05:05,260
JavaScript call functions on some other

00:05:02,460 --> 00:05:08,380
objects that then call other functions

00:05:05,260 --> 00:05:11,560
that go through to the runtime right so

00:05:08,380 --> 00:05:13,840
you have this layer sitting between your

00:05:11,560 --> 00:05:16,540
code and what the machine is actually

00:05:13,840 --> 00:05:20,560
going to execute in Ruby motion that's

00:05:16,540 --> 00:05:22,630
eliminated by directly emitting the c

00:05:20,560 --> 00:05:24,070
function calls from the Ruby and one of

00:05:22,630 --> 00:05:26,620
the reasons that we can do this is

00:05:24,070 --> 00:05:30,520
because Ruby and Objective C are

00:05:26,620 --> 00:05:33,960
actually very similar they both take a

00:05:30,520 --> 00:05:36,340
lot of influence from small talk and

00:05:33,960 --> 00:05:40,330
their object model is very compatible

00:05:36,340 --> 00:05:44,320
they're both dynamic right it's a little

00:05:40,330 --> 00:05:45,520
hard to you know reconcile the notion of

00:05:44,320 --> 00:05:47,800
objective-c being a dynamic language

00:05:45,520 --> 00:05:49,720
because you still have to put type

00:05:47,800 --> 00:05:52,960
signatures everywhere but it turns out

00:05:49,720 --> 00:06:00,100
that you know those don't really mean

00:05:52,960 --> 00:06:05,850
all that much so so this is how Ruby

00:06:00,100 --> 00:06:10,720
motion works now you might be wondering

00:06:05,850 --> 00:06:15,210
okay neat it's a neat trick why do I

00:06:10,720 --> 00:06:18,400
care right because objective-c is the

00:06:15,210 --> 00:06:22,210
supported platform right what Apple

00:06:18,400 --> 00:06:25,510
wants you to use and you know why would

00:06:22,210 --> 00:06:30,550
I use something else if it's just going

00:06:25,510 --> 00:06:32,560
to give me an equivalent a compiled app

00:06:30,550 --> 00:06:38,020
right it's not necessarily better

00:06:32,560 --> 00:06:39,760
actually is in a couple of cases but so

00:06:38,020 --> 00:06:42,940
to try and convince you why you might

00:06:39,760 --> 00:06:46,510
care about Ruby motion let's take a very

00:06:42,940 --> 00:06:48,430
simple application and this used to be a

00:06:46,510 --> 00:06:50,830
lot more impressive before iOS 7 because

00:06:48,430 --> 00:06:52,930
it's actually a label with a button and

00:06:50,830 --> 00:06:53,890
used to actually have the button and you

00:06:52,930 --> 00:06:57,360
could see now it just looks like

00:06:53,890 --> 00:06:57,360
somebody threw some text up there

00:06:57,630 --> 00:07:04,720
so this is a simple timer app we've got

00:07:01,510 --> 00:07:07,060
a label that's going to display the

00:07:04,720 --> 00:07:08,800
seconds elapsed and we've got a little

00:07:07,060 --> 00:07:10,840
button that we can start the timer

00:07:08,800 --> 00:07:12,370
starts counting up we can stop right and

00:07:10,840 --> 00:07:16,770
we hit start again it goes back to zero

00:07:12,370 --> 00:07:23,220
and starts again very very simple right

00:07:16,770 --> 00:07:23,220
okay let's build this with Objective C

00:07:23,550 --> 00:07:34,210
all right so fire up xcode open a new

00:07:28,030 --> 00:07:38,290
project we probably I it's not an OpenGL

00:07:34,210 --> 00:07:39,790
game let's go with empty application

00:07:38,290 --> 00:07:41,740
right i mean nothing else really kind of

00:07:39,790 --> 00:07:44,980
fits this is simple right so we have to

00:07:41,740 --> 00:07:48,490
give it a name and decide whether or not

00:07:44,980 --> 00:07:51,370
we want to use core data then there's

00:07:48,490 --> 00:07:56,080
this window that pops up to greet you to

00:07:51,370 --> 00:07:58,000
your project with a form and then you

00:07:56,080 --> 00:08:01,900
know we don't actually have a class yet

00:07:58,000 --> 00:08:03,310
so we've got to go back to New class or

00:08:01,900 --> 00:08:05,050
we don't even have a view I'm sorry we

00:08:03,310 --> 00:08:08,650
don't have anything to work with so

00:08:05,050 --> 00:08:11,470
let's add of you right and I don't know

00:08:08,650 --> 00:08:13,300
choose view right and then that gets us

00:08:11,470 --> 00:08:14,710
something like this so we can we're

00:08:13,300 --> 00:08:16,360
gettin somewhere we can pull in a label

00:08:14,710 --> 00:08:18,310
we can pull in a button and then we try

00:08:16,360 --> 00:08:19,600
and hook it up and realize we don't have

00:08:18,310 --> 00:08:22,720
anything to hook it up to so then we got

00:08:19,600 --> 00:08:26,430
to go back to the new file dialog and

00:08:22,720 --> 00:08:30,280
we've got to pick a objective c class

00:08:26,430 --> 00:08:33,700
not a protocol or extension or and then

00:08:30,280 --> 00:08:36,669
we've got to put that in give it a

00:08:33,700 --> 00:08:43,330
action hook it up and then add an Aybar

00:08:36,669 --> 00:08:49,090
and yeah and now you can start

00:08:43,330 --> 00:08:54,820
programming right that was just wiring

00:08:49,090 --> 00:08:58,120
things up now yes I realize that this is

00:08:54,820 --> 00:09:00,490
a bit of a contrived example there

00:08:58,120 --> 00:09:03,550
aren't that many timer apps in the iOS

00:09:00,490 --> 00:09:05,380
App Store and for larger applications

00:09:03,550 --> 00:09:07,450
you know you do this once at the start

00:09:05,380 --> 00:09:10,050
and then you just kind of go from there

00:09:07,450 --> 00:09:10,050
so you know I

00:09:11,440 --> 00:09:19,639
what does the equivalent look like with

00:09:14,149 --> 00:09:23,769
Ruby motion well Ruby motion is built on

00:09:19,639 --> 00:09:26,449
a more unix e philosophy right

00:09:23,769 --> 00:09:28,550
everything from the command line so

00:09:26,449 --> 00:09:30,709
hopefully you are ok with the command

00:09:28,550 --> 00:09:35,149
line because you're going to start your

00:09:30,709 --> 00:09:38,110
project mm-hmm by running a command

00:09:35,149 --> 00:09:41,240
motion create in the name of your

00:09:38,110 --> 00:09:46,310
application done okay we've got a couple

00:09:41,240 --> 00:09:49,670
of files alright so a pretty simple file

00:09:46,310 --> 00:09:51,949
tree we can add a file timer controller

00:09:49,670 --> 00:09:56,269
so that we can create a controller class

00:09:51,949 --> 00:09:58,990
right we open up the app delegate and we

00:09:56,269 --> 00:10:01,970
tell the app delegate to create a window

00:09:58,990 --> 00:10:04,399
to set that windows root view controller

00:10:01,970 --> 00:10:07,310
to this controller class that we're

00:10:04,399 --> 00:10:09,769
going to write in a second right set it

00:10:07,310 --> 00:10:11,630
as a full screen layout and then tell it

00:10:09,769 --> 00:10:15,589
to go write that make key and visible is

00:10:11,630 --> 00:10:19,430
kind of run right so then the timer

00:10:15,589 --> 00:10:22,910
controller is a subclass of UI view

00:10:19,430 --> 00:10:25,850
controller and part of the objective c

00:10:22,910 --> 00:10:27,399
api is that these view controllers have

00:10:25,850 --> 00:10:30,529
this method that gets called viewdidload

00:10:27,399 --> 00:10:33,470
gets called when the view was loaded

00:10:30,529 --> 00:10:35,199
that's the name suggests and this is

00:10:33,470 --> 00:10:39,380
where we get to do some setup right so

00:10:35,199 --> 00:10:42,170
we can create a new UI label we can set

00:10:39,380 --> 00:10:44,779
the font and the text and alignment and

00:10:42,170 --> 00:10:48,199
color and then position it right with

00:10:44,779 --> 00:10:49,670
the frame we add it to our parent view

00:10:48,199 --> 00:10:53,750
and then the same thing with a button

00:10:49,670 --> 00:10:55,339
and the button at the very bottom there

00:10:53,750 --> 00:10:58,339
we say add target so that when it's

00:10:55,339 --> 00:11:01,699
tapped right this UI control event touch

00:10:58,339 --> 00:11:05,389
up inside objective-c loves these really

00:11:01,699 --> 00:11:09,470
long names we're going to call a method

00:11:05,389 --> 00:11:13,250
action tapped define the method pretty

00:11:09,470 --> 00:11:17,209
simple if there's a running timer stop

00:11:13,250 --> 00:11:20,569
it if there is no running timer create

00:11:17,209 --> 00:11:22,670
it and the timer is just this NS timer

00:11:20,569 --> 00:11:25,580
class that will

00:11:22,670 --> 00:11:27,980
every tenth of a second and call this

00:11:25,580 --> 00:11:29,930
time or fired method and then the time

00:11:27,980 --> 00:11:33,980
refinement fired method just updates the

00:11:29,930 --> 00:11:40,100
label and increments the time by point

00:11:33,980 --> 00:11:44,080
01 or point one right nice and simple go

00:11:40,100 --> 00:11:44,080
back to the command line run rake

00:11:44,620 --> 00:11:55,610
there's your app that's it so the idea

00:11:51,740 --> 00:11:58,330
with Ruby motion is a difference of

00:11:55,610 --> 00:12:01,130
philosophy really from objective-c and

00:11:58,330 --> 00:12:03,740
it's not so much a question of right or

00:12:01,130 --> 00:12:07,310
wrong or better or worse but objective-c

00:12:03,740 --> 00:12:10,850
is an cocoa and Xcode are sort of firmly

00:12:07,310 --> 00:12:14,750
in the camp of IDE with you know lots of

00:12:10,850 --> 00:12:17,090
tooling and you know pulling things

00:12:14,750 --> 00:12:22,310
around to the mouse and you know visual

00:12:17,090 --> 00:12:23,960
design Ruby motion is more to the other

00:12:22,310 --> 00:12:27,800
end of the spectrum where everything is

00:12:23,960 --> 00:12:29,720
a plain text file all of the commands

00:12:27,800 --> 00:12:31,280
are are on the command line the build

00:12:29,720 --> 00:12:34,520
process is very straightforward and

00:12:31,280 --> 00:12:41,240
simple so you know it's it's an

00:12:34,520 --> 00:12:43,430
alternative it's out there but again we

00:12:41,240 --> 00:12:45,890
just have the same set of classes that

00:12:43,430 --> 00:12:47,980
we had before right so we haven't really

00:12:45,890 --> 00:12:50,930
gained anything of a over objective-c

00:12:47,980 --> 00:12:53,540
the code that I just showed you looked a

00:12:50,930 --> 00:12:56,780
lot like Objective C but written in Ruby

00:12:53,540 --> 00:13:01,460
right dots instead of brackets you know

00:12:56,780 --> 00:13:02,780
but all the same api's so again you know

00:13:01,460 --> 00:13:04,040
I mean maybe you like the command line

00:13:02,780 --> 00:13:09,470
enough that this is enough to convince

00:13:04,040 --> 00:13:15,380
you but does it get any better what does

00:13:09,470 --> 00:13:16,970
actually because you see we can add

00:13:15,380 --> 00:13:20,090
things to Ruby motion we can add

00:13:16,970 --> 00:13:21,920
libraries and Ruby being Ruby is a

00:13:20,090 --> 00:13:26,120
flexible language much more so than

00:13:21,920 --> 00:13:29,210
objective c you c objective-c is built

00:13:26,120 --> 00:13:31,490
as a strict superset of C right you may

00:13:29,210 --> 00:13:34,040
may have heard that phrase used before

00:13:31,490 --> 00:13:36,339
what does it mean it means that any

00:13:34,040 --> 00:13:41,390
piece of C code

00:13:36,339 --> 00:13:45,110
must be valid objective-c code so you

00:13:41,390 --> 00:13:47,390
cannot alter the objective c language in

00:13:45,110 --> 00:13:52,850
such a way that c code wouldn't compile

00:13:47,390 --> 00:13:55,430
right you're handcuffed to see it's not

00:13:52,850 --> 00:13:58,250
the worst thing in the world but it does

00:13:55,430 --> 00:14:02,180
mean that you can't do certain things

00:13:58,250 --> 00:14:05,630
with syntax and certain conveniences

00:14:02,180 --> 00:14:10,010
that Ruby just you know doesn't think

00:14:05,630 --> 00:14:11,839
twice about so let's rewrite our timer

00:14:10,010 --> 00:14:16,279
controller this time taking advantage of

00:14:11,839 --> 00:14:18,080
a couple of libraries so it'd be really

00:14:16,279 --> 00:14:20,899
nice if I could sort of separate my

00:14:18,080 --> 00:14:23,959
layout in code from everything that's

00:14:20,899 --> 00:14:26,240
going on so let's do that we've got a

00:14:23,959 --> 00:14:28,760
method now called layout that we call on

00:14:26,240 --> 00:14:31,040
the view at the start of our view did

00:14:28,760 --> 00:14:33,770
load and we tell it to add two sub views

00:14:31,040 --> 00:14:37,240
one is a uilabel and one is a button

00:14:33,770 --> 00:14:41,750
with this UI button type rounded rect

00:14:37,240 --> 00:14:43,130
that's it good give them labels time and

00:14:41,750 --> 00:14:46,940
start you'll see why those are important

00:14:43,130 --> 00:14:49,520
in a second okay then let's set up some

00:14:46,940 --> 00:14:50,990
behaviors the button is going to change

00:14:49,520 --> 00:14:53,329
its label depending on whether or not

00:14:50,990 --> 00:14:55,010
the timer is running or not so we give

00:14:53,329 --> 00:14:59,540
it two titles for different control

00:14:55,010 --> 00:15:03,529
states and then that button when it's

00:14:59,540 --> 00:15:06,800
tapped on tap there's our timer logic

00:15:03,529 --> 00:15:09,920
right if the timer is running stop it

00:15:06,800 --> 00:15:13,670
and clear it out if not set it to 0 and

00:15:09,920 --> 00:15:15,410
now instead of that NS timer you know

00:15:13,670 --> 00:15:17,930
invoke method and creating another

00:15:15,410 --> 00:15:18,920
method we have this nice convenience

00:15:17,930 --> 00:15:22,190
where we can just say every 100

00:15:18,920 --> 00:15:25,029
milliseconds do this little thing update

00:15:22,190 --> 00:15:31,820
the label text add point 1 to the timer

00:15:25,029 --> 00:15:33,529
done right the time and the start why

00:15:31,820 --> 00:15:36,850
are those labels up there well because

00:15:33,529 --> 00:15:40,810
now we're going to create a style sheet

00:15:36,850 --> 00:15:44,779
right we've separated presentation logic

00:15:40,810 --> 00:15:47,990
from the rest of our code so we can

00:15:44,779 --> 00:15:49,459
create this style with some dimensions

00:15:47,990 --> 00:15:53,600
to set our

00:15:49,459 --> 00:15:55,879
been left margins and then we can create

00:15:53,600 --> 00:15:58,759
specific styles for the time label in

00:15:55,879 --> 00:16:03,829
the start button setting the font

00:15:58,759 --> 00:16:06,980
setting the text the colors the position

00:16:03,829 --> 00:16:10,089
in the view right and these will get

00:16:06,980 --> 00:16:14,139
applied to each of these UI elements

00:16:10,089 --> 00:16:18,470
within that layout method in viewdidload

00:16:14,139 --> 00:16:21,589
so when all this is done we end up with

00:16:18,470 --> 00:16:23,059
the same exact application but now we've

00:16:21,589 --> 00:16:25,490
sort of restructured the code it's a

00:16:23,059 --> 00:16:27,110
little bit easier to reason about so now

00:16:25,490 --> 00:16:29,509
hopefully you're getting a feel for why

00:16:27,110 --> 00:16:34,910
it might be better to go with Ruby

00:16:29,509 --> 00:16:38,800
motion maybe you know how is this

00:16:34,910 --> 00:16:42,350
possible well what I didn't show you is

00:16:38,800 --> 00:16:44,839
in that Ruby motion project there's a

00:16:42,350 --> 00:16:48,920
rake file and in the rake file i added

00:16:44,839 --> 00:16:50,959
two lines requires four gems that i

00:16:48,920 --> 00:16:55,309
installed the teacup gem and the sugar

00:16:50,959 --> 00:17:00,470
cube gem you see the Ruby motion

00:16:55,309 --> 00:17:04,010
community has been going nuts with gems

00:17:00,470 --> 00:17:05,839
it's really fun to watch right and so

00:17:04,010 --> 00:17:10,279
these are two of the earliest gems that

00:17:05,839 --> 00:17:13,880
were created a teacup is the one that

00:17:10,279 --> 00:17:15,620
lets me do those layouts so it's the one

00:17:13,880 --> 00:17:18,140
that allows you to create the stylesheet

00:17:15,620 --> 00:17:19,669
use the layout command to set the layout

00:17:18,140 --> 00:17:23,240
the sub views to set the sub views

00:17:19,669 --> 00:17:26,539
instead of that verbose uikit code that

00:17:23,240 --> 00:17:28,850
you're usually having to do and sugar

00:17:26,539 --> 00:17:30,740
cube as the name implies is just a lot

00:17:28,850 --> 00:17:33,080
of these sugar methods so that hundred

00:17:30,740 --> 00:17:34,580
milliseconds every to generate a timer

00:17:33,080 --> 00:17:36,679
that fires every hundred milliseconds

00:17:34,580 --> 00:17:38,510
that's sugar cube right I could have

00:17:36,679 --> 00:17:40,250
actually gone even further sugar cube

00:17:38,510 --> 00:17:44,840
has methods to generate you I colors

00:17:40,250 --> 00:17:47,080
from text and set font sizes and all

00:17:44,840 --> 00:17:49,010
kinds of you know fun conveniences that

00:17:47,080 --> 00:17:52,419
rubyists would just sort of take for

00:17:49,010 --> 00:17:55,899
granted right but in objective-c it's

00:17:52,419 --> 00:17:55,899
essentially unheard of

00:17:57,350 --> 00:18:03,050
and so this is where I tell you that

00:17:59,820 --> 00:18:06,990
this is not actually a technical talk I

00:18:03,050 --> 00:18:07,860
fooled you all right um that's the end

00:18:06,990 --> 00:18:13,020
of the code I don't want to talk about

00:18:07,860 --> 00:18:17,550
code anymore because as fun as the code

00:18:13,020 --> 00:18:21,960
is and as nice as it is I think what

00:18:17,550 --> 00:18:23,820
really sets Ruby motion apart is what I

00:18:21,960 --> 00:18:26,730
just showed you those libraries that

00:18:23,820 --> 00:18:29,660
were created and not just the libraries

00:18:26,730 --> 00:18:34,050
but the people behind those libraries as

00:18:29,660 --> 00:18:35,400
it so happens the person behind those

00:18:34,050 --> 00:18:38,480
two libraries it's the same person

00:18:35,400 --> 00:18:42,270
behind both the teacup and sugar cube

00:18:38,480 --> 00:18:45,930
and his name is Colin and shortly after

00:18:42,270 --> 00:18:49,500
Ruby motion was released and the mailing

00:18:45,930 --> 00:18:51,000
list started Colin started sending

00:18:49,500 --> 00:18:54,030
messages saying how would I do this how

00:18:51,000 --> 00:18:58,050
would I do that I had all these ideas on

00:18:54,030 --> 00:19:02,490
how to bring ruby isms into Ruby motion

00:18:58,050 --> 00:19:03,660
to make iOS development easier and it

00:19:02,490 --> 00:19:06,960
was fun we had a lot of back-and-forth

00:19:03,660 --> 00:19:08,910
conversation on the mailing list and you

00:19:06,960 --> 00:19:10,350
know he started taking all of these

00:19:08,910 --> 00:19:12,680
methods that he was generating and

00:19:10,350 --> 00:19:16,020
putting them together in a library and

00:19:12,680 --> 00:19:18,930
originally there wasn't a good way in

00:19:16,020 --> 00:19:22,230
Ruby motion to include outside code

00:19:18,930 --> 00:19:24,390
right other than copy paste so he

00:19:22,230 --> 00:19:27,060
figured out along with a couple of other

00:19:24,390 --> 00:19:30,660
community members how Ruby motion could

00:19:27,060 --> 00:19:36,630
actually use Ruby gems it's a little

00:19:30,660 --> 00:19:41,130
complicated but it works um and you know

00:19:36,630 --> 00:19:43,440
he went at this for a while until he got

00:19:41,130 --> 00:19:45,540
hired by hip bite the company that makes

00:19:43,440 --> 00:19:49,910
Ruby motion and so now he's the

00:19:45,540 --> 00:19:54,510
community manager for Ruby motion right

00:19:49,910 --> 00:19:56,760
so what is Ruby motion well more than

00:19:54,510 --> 00:20:00,140
just a programming language I I really

00:19:56,760 --> 00:20:03,510
think of Ruby motion as a community of

00:20:00,140 --> 00:20:04,860
hackers tinkerers students and even

00:20:03,510 --> 00:20:07,500
professionals there are people making

00:20:04,860 --> 00:20:10,700
money doing Ruby motion you can to have

00:20:07,500 --> 00:20:15,030
a job doing Ruby motion

00:20:10,700 --> 00:20:17,070
but we're all having fun right something

00:20:15,030 --> 00:20:19,260
that I think all too often gets

00:20:17,070 --> 00:20:23,610
overlooked in the programming world

00:20:19,260 --> 00:20:27,390
right we focus so much on the best way

00:20:23,610 --> 00:20:32,190
or the fastest way or the most efficient

00:20:27,390 --> 00:20:34,350
way and sometimes we find ourselves you

00:20:32,190 --> 00:20:38,429
know sitting at our desks or standing at

00:20:34,350 --> 00:20:41,250
our desks or what have you and we're

00:20:38,429 --> 00:20:46,440
grinding out code and we're hating it

00:20:41,250 --> 00:20:49,320
right how did that happen should be able

00:20:46,440 --> 00:20:51,840
to have fun at the same time as you get

00:20:49,320 --> 00:20:56,130
everything done and I think that the

00:20:51,840 --> 00:21:01,799
Ruby motion community has so far managed

00:20:56,130 --> 00:21:04,620
to preserve that sense of fun so I want

00:21:01,799 --> 00:21:09,720
to share with you a sampling of what's

00:21:04,620 --> 00:21:11,970
out there in the community as i

00:21:09,720 --> 00:21:16,080
mentioned Colin created those first two

00:21:11,970 --> 00:21:18,600
libraries and originally just put them

00:21:16,080 --> 00:21:20,400
up on github and then once we figured

00:21:18,600 --> 00:21:23,909
out how to distribute them as gems put

00:21:20,400 --> 00:21:28,169
them up on the ruby gem site but there

00:21:23,909 --> 00:21:30,840
was a concern that ruby is you know the

00:21:28,169 --> 00:21:33,929
bigger Ruby community is is very big and

00:21:30,840 --> 00:21:36,750
there are a lot of gems and only a

00:21:33,929 --> 00:21:39,000
subset of those gems were specific to

00:21:36,750 --> 00:21:42,230
Ruby motion and because of the way that

00:21:39,000 --> 00:21:45,150
Ruby motion is this dialect instead of a

00:21:42,230 --> 00:21:48,720
actual equivalent feature for feature

00:21:45,150 --> 00:21:51,059
equivalent of ruby there was a concern

00:21:48,720 --> 00:21:55,409
that these gems would get lost in the

00:21:51,059 --> 00:21:57,720
mix right so the community again put

00:21:55,409 --> 00:22:01,350
together this website Ruby motion

00:21:57,720 --> 00:22:04,950
wrappers and originally there were I

00:22:01,350 --> 00:22:07,020
think six and now there's I mean this is

00:22:04,950 --> 00:22:10,440
this is just the tags I couldn't I

00:22:07,020 --> 00:22:12,480
wanted to get like the first line of the

00:22:10,440 --> 00:22:16,250
listing of rappers but I couldn't fit it

00:22:12,480 --> 00:22:21,390
on the slide because just the tags alone

00:22:16,250 --> 00:22:24,000
fill up the page so you know there are

00:22:21,390 --> 00:22:25,950
things like promotion

00:22:24,000 --> 00:22:28,820
which tries to take the rails

00:22:25,950 --> 00:22:34,020
development philosophy and apply it to

00:22:28,820 --> 00:22:36,330
Ruby motion apps there is a ruby motion

00:22:34,020 --> 00:22:39,930
query I don't think it has a tag yet but

00:22:36,330 --> 00:22:42,360
RM q which actually takes jquery and the

00:22:39,930 --> 00:22:44,850
notion of selectors to be able to

00:22:42,360 --> 00:22:47,700
manipulate view elements right so so

00:22:44,850 --> 00:22:50,970
we're teacup has this notion of styles

00:22:47,700 --> 00:22:53,940
that you can apply a ruby motion query

00:22:50,970 --> 00:22:56,580
actually lets you manipulate not just

00:22:53,940 --> 00:23:02,220
styles but positions and actions and

00:22:56,580 --> 00:23:04,500
gestures and all the rest we also have

00:23:02,220 --> 00:23:06,780
an IRC channel you'll find me there most

00:23:04,500 --> 00:23:08,340
days sometimes I'm busy and don't

00:23:06,780 --> 00:23:10,140
necessarily get to reply immediately

00:23:08,340 --> 00:23:15,720
sometimes it's quiet sometimes it's very

00:23:10,140 --> 00:23:18,330
active but usually if you pop in there

00:23:15,720 --> 00:23:20,070
ask your question might get a response

00:23:18,330 --> 00:23:23,250
if you don't we also have a mailing list

00:23:20,070 --> 00:23:27,540
it's fairly active and fairly well

00:23:23,250 --> 00:23:30,960
monitored by the guys at hip bite the

00:23:27,540 --> 00:23:33,750
IRC channel especially lights up once a

00:23:30,960 --> 00:23:35,400
month during the motion meet up so this

00:23:33,750 --> 00:23:37,440
is again this is not even something that

00:23:35,400 --> 00:23:39,480
hip bite created this is just members

00:23:37,440 --> 00:23:41,670
from the community decided that we

00:23:39,480 --> 00:23:45,330
should have a virtual meet up once a

00:23:41,670 --> 00:23:49,260
month to talk about Ruby motion so it's

00:23:45,330 --> 00:23:51,780
done as a google hangout and anybody can

00:23:49,260 --> 00:23:54,270
sign up to join you know the back chat

00:23:51,780 --> 00:23:57,000
is an IRC yeah you know usually there's

00:23:54,270 --> 00:23:58,740
a guest that gets invited and it's a bit

00:23:57,000 --> 00:24:00,660
of an interview and QA and then they

00:23:58,740 --> 00:24:02,610
take questions from the IRC room it's a

00:24:00,660 --> 00:24:04,320
lot of fun they're all recorded as well

00:24:02,610 --> 00:24:08,910
by the way so if you go to that website

00:24:04,320 --> 00:24:11,070
you can see all the back episodes we

00:24:08,910 --> 00:24:14,160
have a newsletter now right this is a

00:24:11,070 --> 00:24:17,220
relatively new the Ruby motion dispatch

00:24:14,160 --> 00:24:18,950
and just recently the again this was

00:24:17,220 --> 00:24:23,190
something created by the community and

00:24:18,950 --> 00:24:25,740
the guy that created it was contacted by

00:24:23,190 --> 00:24:27,990
the folks at hit by the company behind

00:24:25,740 --> 00:24:29,760
ruby motion and they said you're doing

00:24:27,990 --> 00:24:32,160
such a good job with this would you mind

00:24:29,760 --> 00:24:33,720
being our official newsletter right when

00:24:32,160 --> 00:24:35,910
we need to do announcements and luck and

00:24:33,720 --> 00:24:37,480
we just point people at your newsletter

00:24:35,910 --> 00:24:43,059
so it is now the

00:24:37,480 --> 00:24:45,100
vishal ruby motion newsletter another

00:24:43,059 --> 00:24:47,710
developer started creating screencasts

00:24:45,100 --> 00:24:51,190
the motion and motion screencasts and

00:24:47,710 --> 00:24:54,100
you can subscribe and I think it's

00:24:51,190 --> 00:24:56,020
weekly yeah he puts out a new episode

00:24:54,100 --> 00:24:57,370
covering a lot of the different rappers

00:24:56,020 --> 00:25:03,910
and technologies that the communities

00:24:57,370 --> 00:25:06,309
come up with and recently a couple of

00:25:03,910 --> 00:25:08,080
the people involved with emotion emotion

00:25:06,309 --> 00:25:11,049
and a couple other members from the

00:25:08,080 --> 00:25:15,280
community set up this group on github

00:25:11,049 --> 00:25:18,340
Ruby commotion it's great and it's all

00:25:15,280 --> 00:25:22,000
about just coming together and hacking

00:25:18,340 --> 00:25:25,270
on Ruby motion right and the first

00:25:22,000 --> 00:25:28,690
project they did was they took this UI

00:25:25,270 --> 00:25:30,640
kits element uikit elements sample app

00:25:28,690 --> 00:25:33,070
right so this is an objective-c sample

00:25:30,640 --> 00:25:34,870
app that basically you've run it on your

00:25:33,070 --> 00:25:37,030
phone and it's like every possible UI

00:25:34,870 --> 00:25:39,880
element you know buttons and sliders and

00:25:37,030 --> 00:25:42,580
progress bars and they converted it all

00:25:39,880 --> 00:25:46,450
over to Ruby motion right so now there's

00:25:42,580 --> 00:25:48,429
this fairly sizable app in Ruby motion

00:25:46,450 --> 00:25:51,190
that you can use as a reference if you

00:25:48,429 --> 00:25:53,230
need to write and when they announced

00:25:51,190 --> 00:25:55,390
that they had done this I said this is

00:25:53,230 --> 00:25:57,340
so cool you would you guys mind if I I

00:25:55,390 --> 00:25:59,710
mentioned this during this talk that i'm

00:25:57,340 --> 00:26:01,809
going to give right and and so the guy

00:25:59,710 --> 00:26:03,309
that leads the group Dennis major

00:26:01,809 --> 00:26:07,299
actually emailed me back and he said

00:26:03,309 --> 00:26:09,250
sure and why don't you tell people says

00:26:07,299 --> 00:26:10,840
during our first IRC orientation get

00:26:09,250 --> 00:26:12,850
together when I noted that I knew

00:26:10,840 --> 00:26:15,580
nothing next to nothing about get in

00:26:12,850 --> 00:26:17,410
github the group made me their github

00:26:15,580 --> 00:26:19,350
github canonical repo integration

00:26:17,410 --> 00:26:21,280
manager right they put him in charge of

00:26:19,350 --> 00:26:25,900
github he didn't know anything about

00:26:21,280 --> 00:26:28,750
github and he thought you know are you

00:26:25,900 --> 00:26:31,270
guys crazy but the group is actually

00:26:28,750 --> 00:26:34,210
being really successful you know they've

00:26:31,270 --> 00:26:38,410
gotten a lot done and they're all sort

00:26:34,210 --> 00:26:40,200
of learning together as they go so what

00:26:38,410 --> 00:26:44,919
is it that makes Ruby motion different

00:26:40,200 --> 00:26:48,100
right what is it that allows Ruby motion

00:26:44,919 --> 00:26:50,260
to preserve that sense of fun well if

00:26:48,100 --> 00:26:51,370
you've been around Ruby as a language

00:26:50,260 --> 00:26:54,850
you may have heard this term

00:26:51,370 --> 00:26:57,490
Swan right it's a acronym formats is

00:26:54,850 --> 00:27:00,820
nice so we are nice matts is the creator

00:26:57,490 --> 00:27:05,140
of the Ruby language and I'm horribly

00:27:00,820 --> 00:27:06,940
mispronouncing his name apologies but if

00:27:05,140 --> 00:27:10,930
you've ever met him in person he is an

00:27:06,940 --> 00:27:13,650
exceedingly nice guy and so you know we

00:27:10,930 --> 00:27:19,600
try and hope that some of that rubs off

00:27:13,650 --> 00:27:23,260
on the community and even more so when

00:27:19,600 --> 00:27:27,309
meh when Matz's talked about why he made

00:27:23,260 --> 00:27:30,070
ruby he explicitly states as a couple of

00:27:27,309 --> 00:27:34,210
times that he optimized Ruby for maximum

00:27:30,070 --> 00:27:36,580
developer happiness right performance

00:27:34,210 --> 00:27:39,580
and speed and parallel eyes ability and

00:27:36,580 --> 00:27:41,620
you know robustness and and fault

00:27:39,580 --> 00:27:43,540
tolerance these are all things that you

00:27:41,620 --> 00:27:46,830
could be concerned with right and

00:27:43,540 --> 00:27:49,630
sometimes you need to be concerned with

00:27:46,830 --> 00:27:51,790
but if you take a look at all the

00:27:49,630 --> 00:27:53,980
programming that you do how many times

00:27:51,790 --> 00:27:57,130
do you really need five nines of uptime

00:27:53,980 --> 00:28:01,630
right you probably for like that central

00:27:57,130 --> 00:28:03,160
core thing but a lot of times you just

00:28:01,630 --> 00:28:07,330
need to be able to get something done

00:28:03,160 --> 00:28:10,150
right do it quickly get an idea out on

00:28:07,330 --> 00:28:12,580
paper as they say right and Ruby is

00:28:10,150 --> 00:28:16,450
really optimized for that step of the

00:28:12,580 --> 00:28:18,340
process the other thing that makes Ruby

00:28:16,450 --> 00:28:20,760
motion a little different is Ruby

00:28:18,340 --> 00:28:23,590
motions history goes back to mac ruby

00:28:20,760 --> 00:28:27,010
which was a project that laurelin

00:28:23,590 --> 00:28:29,559
started at apple and i was at apple at

00:28:27,010 --> 00:28:31,059
the same time but even though we were

00:28:29,559 --> 00:28:34,090
both in cupertino we were in separate

00:28:31,059 --> 00:28:39,460
buildings so we didn't see each other

00:28:34,090 --> 00:28:41,050
most days and he had prior connections

00:28:39,460 --> 00:28:43,450
with the open source community so he

00:28:41,050 --> 00:28:44,770
reached out to some friends from the

00:28:43,450 --> 00:28:47,890
open source community to help him out

00:28:44,770 --> 00:28:50,050
with this project so by the time I

00:28:47,890 --> 00:28:52,090
joined the project he already had a

00:28:50,050 --> 00:28:55,950
developer in Tokyo a developer in

00:28:52,090 --> 00:29:01,060
Amsterdam the two of us in cupertino a

00:28:55,950 --> 00:29:04,660
guy in Paris so from the very beginning

00:29:01,060 --> 00:29:05,740
we were distributed all over and we had

00:29:04,660 --> 00:29:08,860
to rely on

00:29:05,740 --> 00:29:12,670
male and chat to communicate in fact I

00:29:08,860 --> 00:29:15,670
didn't meet one of the developers that I

00:29:12,670 --> 00:29:18,160
I knew so well that I I consider him a

00:29:15,670 --> 00:29:23,620
close friend I only met him for the

00:29:18,160 --> 00:29:26,470
first time like five years later and in

00:29:23,620 --> 00:29:30,190
retrospect you know we did this because

00:29:26,470 --> 00:29:32,170
of necessity Apple wasn't going to

00:29:30,190 --> 00:29:33,700
necessarily hire all these people but

00:29:32,170 --> 00:29:36,010
you know one person alone wasn't going

00:29:33,700 --> 00:29:37,900
to be able to do this on his own we

00:29:36,010 --> 00:29:39,280
wanted it to be open source so we wanted

00:29:37,900 --> 00:29:42,490
to be able to have contributions from

00:29:39,280 --> 00:29:43,840
the community so we didn't really even

00:29:42,490 --> 00:29:45,970
think twice about making this a

00:29:43,840 --> 00:29:49,150
distributed project but it turned out

00:29:45,970 --> 00:29:52,030
that this made it very easy for new

00:29:49,150 --> 00:29:55,120
people to join the project about a year

00:29:52,030 --> 00:29:58,030
after Mac ruby was released uh this

00:29:55,120 --> 00:30:00,550
fellow from Japan just started sending

00:29:58,030 --> 00:30:03,760
pull requests right we didn't know who

00:30:00,550 --> 00:30:08,080
he was he called himself Watson it's not

00:30:03,760 --> 00:30:11,530
as a real name but Watson was employee

00:30:08,080 --> 00:30:13,090
number two at hip bite because just

00:30:11,530 --> 00:30:17,110
sending pull requests and conversing

00:30:13,090 --> 00:30:18,910
with us on chat and email he just melded

00:30:17,110 --> 00:30:21,340
in with the community right and and it

00:30:18,910 --> 00:30:24,250
wasn't really even a second thought and

00:30:21,340 --> 00:30:26,020
what we found is that by being so

00:30:24,250 --> 00:30:28,350
accepting of anybody who wanted to come

00:30:26,020 --> 00:30:31,059
and submit a patch or ask a question

00:30:28,350 --> 00:30:33,370
without even trying we ended up with a

00:30:31,059 --> 00:30:37,360
really really diverse community our

00:30:33,370 --> 00:30:39,220
first conference was this amazing

00:30:37,360 --> 00:30:45,970
display of programming community

00:30:39,220 --> 00:30:48,760
diversity the other thing that I think

00:30:45,970 --> 00:30:50,650
helped Ruby motion to to maintain the

00:30:48,760 --> 00:30:54,640
sense of fun is that we're always the

00:30:50,650 --> 00:30:56,670
underdogs right at Apple we're always

00:30:54,640 --> 00:30:59,410
sort of fighting against objective-c and

00:30:56,670 --> 00:31:03,630
after Apple there is still a fight

00:30:59,410 --> 00:31:05,590
against objective-c you know and and

00:31:03,630 --> 00:31:10,630
people have said some really nasty

00:31:05,590 --> 00:31:13,450
things about Ruby motion you know but

00:31:10,630 --> 00:31:14,530
I'm reminded of the famous quote you

00:31:13,450 --> 00:31:15,790
know first they ignore you then they

00:31:14,530 --> 00:31:19,720
laugh at you then they fight you and

00:31:15,790 --> 00:31:22,240
then you win and I realized that one of

00:31:19,720 --> 00:31:27,730
the things that we sort of inadvertently

00:31:22,240 --> 00:31:32,049
did at Ruby motion is whenever people

00:31:27,730 --> 00:31:36,520
would attack Ruby motion we just go and

00:31:32,049 --> 00:31:38,559
build something right there were a

00:31:36,520 --> 00:31:40,000
number of times that and in different

00:31:38,559 --> 00:31:42,640
members of the community have had to

00:31:40,000 --> 00:31:43,929
hold other members back right people

00:31:42,640 --> 00:31:45,159
have had to hold me back I've had to

00:31:43,929 --> 00:31:46,990
hold other people back you know somebody

00:31:45,159 --> 00:31:48,520
says something really nasty and you just

00:31:46,990 --> 00:31:50,650
want to go out there and you want to say

00:31:48,520 --> 00:31:52,890
no you're wrong and here's why bullet

00:31:50,650 --> 00:31:55,210
point bullet point bullet point right

00:31:52,890 --> 00:31:57,700
but we've done a really good job of

00:31:55,210 --> 00:32:00,820
holding each other back and saying just

00:31:57,700 --> 00:32:05,500
take that energy and focus it into

00:32:00,820 --> 00:32:07,150
building something Ruby motion is

00:32:05,500 --> 00:32:09,070
approachable right I think that's what i

00:32:07,150 --> 00:32:11,650
wanted to point out with the the array

00:32:09,070 --> 00:32:14,020
of windows from xcode right yes xcode is

00:32:11,650 --> 00:32:15,940
capable but it's also a little daunting

00:32:14,020 --> 00:32:20,110
if you've never done iOS development

00:32:15,940 --> 00:32:23,679
before so Ruby motion lets you sort of

00:32:20,110 --> 00:32:26,890
take a easy glide path into the OS

00:32:23,679 --> 00:32:28,299
development world but it still remains

00:32:26,890 --> 00:32:33,640
all of the functionality you would need

00:32:28,299 --> 00:32:36,580
to build a full featured app rich Hickey

00:32:33,640 --> 00:32:40,330
once I had this talk it's a really good

00:32:36,580 --> 00:32:44,860
talk actually about how programming is

00:32:40,330 --> 00:32:47,710
like music performance right nobody

00:32:44,860 --> 00:32:49,570
expects to play you know Beethoven's

00:32:47,710 --> 00:32:52,570
fifth the first time they sit down at a

00:32:49,570 --> 00:32:54,340
piano and yet so many programming

00:32:52,570 --> 00:32:57,090
communities try and say in five minutes

00:32:54,340 --> 00:32:59,880
you're going to create the next Facebook

00:32:57,090 --> 00:33:02,530
well that's just not realistic right

00:32:59,880 --> 00:33:05,380
there's going to be years and years of

00:33:02,530 --> 00:33:10,360
practice and repetition and failure and

00:33:05,380 --> 00:33:11,500
mistakes and learning but that doesn't

00:33:10,360 --> 00:33:15,909
mean that you shouldn't be able to sit

00:33:11,500 --> 00:33:17,950
down at the piano and create a tone the

00:33:15,909 --> 00:33:19,539
first time you hit a key right you don't

00:33:17,950 --> 00:33:24,370
have to string a piano every time you

00:33:19,539 --> 00:33:28,350
want to play it so there is practice

00:33:24,370 --> 00:33:30,690
there is time but that first step should

00:33:28,350 --> 00:33:36,330
be doable

00:33:30,690 --> 00:33:41,690
and finally in reflecting on what makes

00:33:36,330 --> 00:33:45,960
Ruby motion different I realized that

00:33:41,690 --> 00:33:47,430
even though the mac ruby project and

00:33:45,960 --> 00:33:49,710
then the ruby motion project and the

00:33:47,430 --> 00:33:53,910
communities surrounding it it has been

00:33:49,710 --> 00:33:59,880
at it for almost seven years now we

00:33:53,910 --> 00:34:04,590
really don't know what we're doing we're

00:33:59,880 --> 00:34:08,610
constantly surprised by the questions

00:34:04,590 --> 00:34:11,960
people ask you know for example could

00:34:08,610 --> 00:34:16,800
you use Ruby gems with Ruby motion I

00:34:11,960 --> 00:34:21,810
don't know maybe let's try it and find

00:34:16,800 --> 00:34:23,940
out and and the thing is is that you

00:34:21,810 --> 00:34:25,980
know I think every community has that at

00:34:23,940 --> 00:34:28,920
the beginning that's how you get the

00:34:25,980 --> 00:34:32,520
first group of people in but there's

00:34:28,920 --> 00:34:35,130
this tendency over time to have the

00:34:32,520 --> 00:34:39,080
right way to do it the best practices

00:34:35,130 --> 00:34:42,420
you know this is the canonical

00:34:39,080 --> 00:34:44,400
implementation and that can be a little

00:34:42,420 --> 00:34:48,660
off-putting for people that aren't there

00:34:44,400 --> 00:34:50,460
on day zero right you know I wrote this

00:34:48,660 --> 00:34:54,870
code and somebody told me you know

00:34:50,460 --> 00:34:58,950
you're doing it wrong there is a way

00:34:54,870 --> 00:35:02,940
that you can invite people in and guide

00:34:58,950 --> 00:35:05,400
them along a path of discovery so that

00:35:02,940 --> 00:35:09,780
they find those best practices on their

00:35:05,400 --> 00:35:11,100
own but if you keep that open mind you

00:35:09,780 --> 00:35:13,350
might find that may be the best

00:35:11,100 --> 00:35:18,420
practices aren't the best maybe there's

00:35:13,350 --> 00:35:21,060
a different way to do it and so finally

00:35:18,420 --> 00:35:22,320
I think in trying to summarize all of

00:35:21,060 --> 00:35:23,550
these different points and what it is

00:35:22,320 --> 00:35:26,160
about the ruby motion community that I

00:35:23,550 --> 00:35:28,860
love and that I think really makes it an

00:35:26,160 --> 00:35:34,740
enjoyable community to be a part of I

00:35:28,860 --> 00:35:42,540
had to return to this right is famous

00:35:34,740 --> 00:35:45,170
XKCD um I think in our daily lives we

00:35:42,540 --> 00:35:48,330
have the programmers that we interact

00:35:45,170 --> 00:35:53,820
for most of you that might be direct

00:35:48,330 --> 00:35:56,640
face-to-face interaction right and then

00:35:53,820 --> 00:35:58,770
there's everybody else right there's

00:35:56,640 --> 00:36:00,990
this dividing line of the internet on

00:35:58,770 --> 00:36:03,960
all the people out on the internet are

00:36:00,990 --> 00:36:06,599
somehow different then the guy sitting

00:36:03,960 --> 00:36:11,280
in the cubicle next to you but in

00:36:06,599 --> 00:36:14,730
reality programmers are people too right

00:36:11,280 --> 00:36:19,920
so even that person on the mailing list

00:36:14,730 --> 00:36:22,619
or the forum or in the chat room and

00:36:19,920 --> 00:36:26,180
then they might be wrong they're

00:36:22,619 --> 00:36:28,800
probably more like you than you might

00:36:26,180 --> 00:36:31,050
you might be surprised just how how much

00:36:28,800 --> 00:36:39,720
like you they are so something to keep

00:36:31,050 --> 00:36:43,320
in mind thanks I'd be happy to take any

00:36:39,720 --> 00:36:46,880
questions but I will be not at all

00:36:43,320 --> 00:36:50,330
offended if you want to run for food so

00:36:46,880 --> 00:36:50,330
so questions

00:36:52,989 --> 00:36:59,089
hi so um thanks for showing us that that

00:36:56,239 --> 00:37:00,529
was that looks really exciting just to

00:36:59,089 --> 00:37:04,819
go back to a couple of technical

00:37:00,529 --> 00:37:07,279
questions or just the one you mentioned

00:37:04,819 --> 00:37:09,979
that it's fully cocoa-touch compatible

00:37:07,279 --> 00:37:13,309
can you also write Mac you know OS 10

00:37:09,979 --> 00:37:17,749
apps with Ruby motion relatively

00:37:13,309 --> 00:37:22,789
recently yes so originally the idea was

00:37:17,749 --> 00:37:24,619
just iOS but then as of like six months

00:37:22,789 --> 00:37:26,690
ago I think maybe even more recent than

00:37:24,619 --> 00:37:29,839
that you can actually build OS 10 apps

00:37:26,690 --> 00:37:33,469
and and what's interesting is one of the

00:37:29,839 --> 00:37:37,489
big things that's missing from Ruby

00:37:33,469 --> 00:37:40,400
motion on iOS is eval and and that's a

00:37:37,489 --> 00:37:43,219
that's not a technical limitation that's

00:37:40,400 --> 00:37:45,440
a Apple terms and conditions limitation

00:37:43,219 --> 00:37:48,829
right you're not allowed to evaluate

00:37:45,440 --> 00:37:50,900
code on the device right OS 10 doesn't

00:37:48,829 --> 00:37:54,109
have that limitation so if you write

00:37:50,900 --> 00:37:58,249
Ruby motion apps for OS 10 you can

00:37:54,109 --> 00:38:01,119
actually use eval so yeah thank you my

00:37:58,249 --> 00:38:05,719
other question is does Ruby motion

00:38:01,119 --> 00:38:08,359
facilitate code signing commissioning

00:38:05,719 --> 00:38:10,999
profiles and all that it's all handled

00:38:08,359 --> 00:38:13,400
for you in fact that what I didn't know

00:38:10,999 --> 00:38:14,930
that's the best thing I've heard yeah in

00:38:13,400 --> 00:38:17,180
fact what I didn't show is that that

00:38:14,930 --> 00:38:21,019
rake process right i mean i'm sticking

00:38:17,180 --> 00:38:23,239
with the Ruby philosophy everything is

00:38:21,019 --> 00:38:24,769
done through rake so if you want to run

00:38:23,239 --> 00:38:26,599
it in the simulator you just type rate

00:38:24,769 --> 00:38:28,789
right and that's the default action if

00:38:26,599 --> 00:38:31,460
you want to run it on the device you say

00:38:28,789 --> 00:38:32,690
rake device and then it ships it over to

00:38:31,460 --> 00:38:34,219
whatever device is plugged in and it

00:38:32,690 --> 00:38:36,109
runs it there you can say rake device

00:38:34,219 --> 00:38:37,700
debug and it actually runs it on the

00:38:36,109 --> 00:38:40,009
device in debug mode and gives you a

00:38:37,700 --> 00:38:41,509
rebel and a debug prompts that you can

00:38:40,009 --> 00:38:43,789
actually step through the code running

00:38:41,509 --> 00:38:47,180
on the device when you're done you just

00:38:43,789 --> 00:38:50,359
say I think it's rake release and it

00:38:47,180 --> 00:38:52,489
actually signs it packages all up gives

00:38:50,359 --> 00:38:56,299
you the IPA and you're ready to go off

00:38:52,489 --> 00:38:59,469
to iTunes Connect and start making money

00:38:56,299 --> 00:38:59,469
right thank you

00:39:06,380 --> 00:39:12,810
so in practice two people generally

00:39:10,170 --> 00:39:15,600
start projects entirely in Ruby motion

00:39:12,810 --> 00:39:18,540
or do you see some may be larger or

00:39:15,600 --> 00:39:20,220
existing projects where pieces start to

00:39:18,540 --> 00:39:23,420
become Ruby motion but the rest is

00:39:20,220 --> 00:39:26,150
objective c you know it's interesting

00:39:23,420 --> 00:39:30,930
this is one of those examples of

00:39:26,150 --> 00:39:32,400
learning as we go initially it was sort

00:39:30,930 --> 00:39:36,960
of you're going to use Ruby motion to

00:39:32,400 --> 00:39:40,020
make an appt right but as Ruby motion

00:39:36,960 --> 00:39:42,960
grew and the community grew and people

00:39:40,020 --> 00:39:45,570
started asking questions like that there

00:39:42,960 --> 00:39:47,670
were capabilities added to Ruby motion

00:39:45,570 --> 00:39:49,320
so now you can take a pre-existing

00:39:47,670 --> 00:39:52,290
objective-c app and you can start

00:39:49,320 --> 00:39:54,780
building you can start rewriting classes

00:39:52,290 --> 00:39:57,060
in Ruby motion and generate a static

00:39:54,780 --> 00:39:59,130
library from the Ruby motion and Link it

00:39:57,060 --> 00:40:00,600
back into your objective c you can do

00:39:59,130 --> 00:40:03,990
the flip side too you can have an

00:40:00,600 --> 00:40:06,240
objective c library that encapsulate

00:40:03,990 --> 00:40:08,190
some functionality or coordinates with

00:40:06,240 --> 00:40:09,420
some api right and you don't want to

00:40:08,190 --> 00:40:12,450
have to rewrite it in Ruby well that's

00:40:09,420 --> 00:40:14,730
fine you can just add it to your Ruby

00:40:12,450 --> 00:40:16,680
motion project and and Ruby motion will

00:40:14,730 --> 00:40:18,330
call Xcode to compile the objective c

00:40:16,680 --> 00:40:21,570
and then link it into your Ruby motion

00:40:18,330 --> 00:40:22,710
app in fact cocoapods right which I

00:40:21,570 --> 00:40:24,750
don't know how many of you are familiar

00:40:22,710 --> 00:40:27,690
with this it's essentially like Ruby

00:40:24,750 --> 00:40:30,600
gems but for objective-c cocoapods was

00:40:27,690 --> 00:40:32,100
written by alloy who was like the second

00:40:30,600 --> 00:40:34,380
person on the Mac Ruby project and he

00:40:32,100 --> 00:40:36,510
works for hip bike now and it was

00:40:34,380 --> 00:40:38,580
actually created because we wanted

00:40:36,510 --> 00:40:41,640
people to have an easy way to use

00:40:38,580 --> 00:40:43,710
objective c in ruby motion so you can

00:40:41,640 --> 00:40:47,460
use cocoa pods in Ruby motion it's fully

00:40:43,710 --> 00:40:49,560
integrated so you can do any kind of

00:40:47,460 --> 00:40:51,870
mixing and matching of objective-c and

00:40:49,560 --> 00:40:54,120
Ruby motion that you want and we've seen

00:40:51,870 --> 00:40:56,670
people go both ways we've seen people

00:40:54,120 --> 00:40:58,110
take overly complicated UI code and

00:40:56,670 --> 00:41:00,210
objective-c and rewrite it in Ruby

00:40:58,110 --> 00:41:03,000
motion so it's you know easier to to

00:41:00,210 --> 00:41:05,520
change and to refactor and we've seen

00:41:03,000 --> 00:41:07,080
people build Ruby motion apps and then

00:41:05,520 --> 00:41:09,780
realize that there are certain parts

00:41:07,080 --> 00:41:12,540
that you know need that extra bit of low

00:41:09,780 --> 00:41:13,230
level c performance and rewrite certain

00:41:12,540 --> 00:41:17,220
classes and

00:41:13,230 --> 00:41:20,580
acta see so so the common denominator

00:41:17,220 --> 00:41:23,300
seems to be that you have to have a

00:41:20,580 --> 00:41:26,580
stage where you have static libraries

00:41:23,300 --> 00:41:28,560
you don't have like a compiler that that

00:41:26,580 --> 00:41:31,040
compiles everything together in in one

00:41:28,560 --> 00:41:33,240
app well the Ruby motion compiler will

00:41:31,040 --> 00:41:35,400
actually so the Ruby emotion compiler is

00:41:33,240 --> 00:41:36,330
just really a wrapper around Xcode so

00:41:35,400 --> 00:41:38,900
you do still need to have xcode

00:41:36,330 --> 00:41:43,890
installed you just don't need to run it

00:41:38,900 --> 00:41:49,320
yeah iOS is only static linking except

00:41:43,890 --> 00:41:51,420
for like the core classes so yeah it's

00:41:49,320 --> 00:41:52,619
all statically compiled and then linked

00:41:51,420 --> 00:41:54,240
together but it's all handled for you

00:41:52,619 --> 00:41:56,970
you don't have to do that when you run

00:41:54,240 --> 00:41:58,710
rate if you have a cocoa pod the rake

00:41:56,970 --> 00:42:00,480
command will see that you have the cocoa

00:41:58,710 --> 00:42:02,970
pod it will compile the objective-c as

00:42:00,480 --> 00:42:04,680
objective c it will generate the static

00:42:02,970 --> 00:42:07,140
library link it in and compile the rest

00:42:04,680 --> 00:42:10,290
of the code and again package it all up

00:42:07,140 --> 00:42:13,460
for you so it's it's you know optimized

00:42:10,290 --> 00:42:13,460

YouTube URL: https://www.youtube.com/watch?v=BjhcYBNTbKI


