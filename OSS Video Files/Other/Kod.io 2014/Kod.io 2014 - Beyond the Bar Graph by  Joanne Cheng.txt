Title: Kod.io 2014 - Beyond the Bar Graph by  Joanne Cheng
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	Turning set of numbers into a simple graph can instantly tell us a story about data. However, there are times when a standard graph isn't enough.
Sometimes we need to search for alternate ways to visualize our data so we can communicate with users better.

In this talk, we'll be looking at different data sets and the standard ways of representing them using as bar graphs, line graphs, and scatter plots.

We'll then explore less common, creative, and unique ways of visualizing the same data sets and the reasoning behind the graphics we create.

We'll be utilizing two popular JavaScript libraries for data visualization: highcharts.js and d3.js, and talk about the benefits of each library from a design and developer viewpoint.

Help us caption & translate this video!

http://amara.org/v/FG3R/
Captions: 
	00:00:18,650 --> 00:00:26,010
hi my name is Joanne Chang I work for

00:00:23,040 --> 00:00:27,810
thoughtbot out in Denver Colorado so if

00:00:26,010 --> 00:00:29,840
you look at that red dot in the middle

00:00:27,810 --> 00:00:33,780
of North America that's where I live

00:00:29,840 --> 00:00:35,670
these are all of our offices and the red

00:00:33,780 --> 00:00:39,629
dots represent how big the offices are

00:00:35,670 --> 00:00:43,170
if anyone's curious about how were

00:00:39,629 --> 00:00:44,790
distributed at thoughtbot so I do mostly

00:00:43,170 --> 00:00:46,980
web development with Ruby on Rails and

00:00:44,790 --> 00:00:49,260
JavaScript but i've also been fascinated

00:00:46,980 --> 00:00:51,989
by the field of data visualization for

00:00:49,260 --> 00:00:54,000
the past several years data

00:00:51,989 --> 00:00:55,620
visualizations simply defined is the

00:00:54,000 --> 00:00:58,199
study of graphical representation of

00:00:55,620 --> 00:00:59,940
data and today we're mostly going to be

00:00:58,199 --> 00:01:04,530
talking about data visualization in a

00:00:59,940 --> 00:01:05,909
web context so I originally I was going

00:01:04,530 --> 00:01:07,950
to make this talk about creating crazy

00:01:05,909 --> 00:01:10,650
graphics with d3.js which is a

00:01:07,950 --> 00:01:12,360
JavaScript library commonly used to make

00:01:10,650 --> 00:01:14,729
complex data visualizations on the web

00:01:12,360 --> 00:01:17,159
like the ones you see here today but

00:01:14,729 --> 00:01:19,200
data analysis and visualization isn't

00:01:17,159 --> 00:01:21,210
about the craziest most unique ways to

00:01:19,200 --> 00:01:22,980
display data it's about looking for

00:01:21,210 --> 00:01:24,570
stories and data and communicating those

00:01:22,980 --> 00:01:26,820
stories with graphics in the best way

00:01:24,570 --> 00:01:29,730
and sometimes you do need to be creative

00:01:26,820 --> 00:01:33,660
and sometimes you need to use others or

00:01:29,730 --> 00:01:35,100
other forms of visualization and one of

00:01:33,660 --> 00:01:38,340
my favorite creative data visualizations

00:01:35,100 --> 00:01:40,860
isn't a d3 or a javascript example it's

00:01:38,340 --> 00:01:45,140
a print example this is a map by a

00:01:40,860 --> 00:01:48,210
physician named john snow from the 1850s

00:01:45,140 --> 00:01:52,230
so he was a hughes of doctor at the time

00:01:48,210 --> 00:01:55,980
and in around 1854 there was this gloria

00:01:52,230 --> 00:01:58,650
outbreak in london and the theory was

00:01:55,980 --> 00:02:00,360
that most of that the cause of death and

00:01:58,650 --> 00:02:04,230
the cause of this outbreak was caused by

00:02:00,360 --> 00:02:06,570
pollution or bad air but jon snow was

00:02:04,230 --> 00:02:09,000
skeptical of this theory and he his

00:02:06,570 --> 00:02:11,819
theory was all these deaths were created

00:02:09,000 --> 00:02:14,220
um caused by this one contaminated water

00:02:11,819 --> 00:02:17,069
pump in the middle of broad street it's

00:02:14,220 --> 00:02:19,920
a little hard to see the markings so but

00:02:17,069 --> 00:02:22,230
what john snow did was he created bar

00:02:19,920 --> 00:02:25,860
graphs that mapped out that plotted out

00:02:22,230 --> 00:02:27,630
the deaths per building and so you saw a

00:02:25,860 --> 00:02:31,470
concentration of deaths around a certain

00:02:27,630 --> 00:02:33,720
water pump and because of this scruff

00:02:31,470 --> 00:02:35,580
this map he was actually able to

00:02:33,720 --> 00:02:37,140
convince health officials to investigate

00:02:35,580 --> 00:02:40,320
that water pump and they found that

00:02:37,140 --> 00:02:43,620
there wasn't in fact Gloria bacteria in

00:02:40,320 --> 00:02:45,510
that water pump and so that's what's

00:02:43,620 --> 00:02:47,700
great about amazing data visualizations

00:02:45,510 --> 00:02:51,780
it causes people to react and take

00:02:47,700 --> 00:02:55,770
action so how do we translate this into

00:02:51,780 --> 00:02:58,290
the context of web applications I really

00:02:55,770 --> 00:03:00,540
like to think of this as three main ways

00:02:58,290 --> 00:03:05,340
of displaying data and web we can have

00:03:00,540 --> 00:03:08,970
text so HTML table tables in HTML we

00:03:05,340 --> 00:03:11,550
could even just use plain text or JSON

00:03:08,970 --> 00:03:13,470
or other formatted data we could use a

00:03:11,550 --> 00:03:15,660
graphing library where we can just throw

00:03:13,470 --> 00:03:19,230
in data something a little bit more

00:03:15,660 --> 00:03:21,780
configuration based so we basically tell

00:03:19,230 --> 00:03:25,250
it we give it data and we tell it what

00:03:21,780 --> 00:03:29,100
to give us and it gives us back a

00:03:25,250 --> 00:03:30,600
premade graph with our current values or

00:03:29,100 --> 00:03:33,810
we can use something that's a little

00:03:30,600 --> 00:03:36,450
more custom something like d3.js so

00:03:33,810 --> 00:03:37,650
d3.js like i said before is a javascript

00:03:36,450 --> 00:03:40,950
library used a lot for data

00:03:37,650 --> 00:03:42,600
visualizations on the web but it's it's

00:03:40,950 --> 00:03:46,530
not so much a data visualization library

00:03:42,600 --> 00:03:50,700
as a way for you to map data to elements

00:03:46,530 --> 00:03:52,340
in the Dom usually to SVG it was created

00:03:50,700 --> 00:03:56,040
by Mike Bostock of the New York Times

00:03:52,340 --> 00:03:57,870
and it's used a lot to create really

00:03:56,040 --> 00:04:01,200
custom visuals of really custom

00:03:57,870 --> 00:04:02,880
visualizations for newspapers it's a

00:04:01,200 --> 00:04:04,950
little hard to explain d3 without a live

00:04:02,880 --> 00:04:11,430
demo so let's jump into an example of

00:04:04,950 --> 00:04:14,060
how it can be used sweet for everyone to

00:04:11,430 --> 00:04:14,060
stock for a bit

00:04:18,479 --> 00:04:23,229
so I've always been curious about how

00:04:21,009 --> 00:04:24,729
open source communities work and I work

00:04:23,229 --> 00:04:27,520
with rails nearly every day and I know

00:04:24,729 --> 00:04:30,189
it's a very active project on github so

00:04:27,520 --> 00:04:33,819
i chose rails at the open source project

00:04:30,189 --> 00:04:34,960
as data source and before I drove into

00:04:33,819 --> 00:04:36,879
this data I didn't really know what to

00:04:34,960 --> 00:04:38,650
expect from the data I would find on

00:04:36,879 --> 00:04:40,360
github so i started with asking a really

00:04:38,650 --> 00:04:43,330
simple question how can you visualize

00:04:40,360 --> 00:04:45,279
the rails community it's a very broad

00:04:43,330 --> 00:04:47,289
question but it led me into asking what

00:04:45,279 --> 00:04:51,400
data to look for and so eventually i

00:04:47,289 --> 00:04:55,509
settled on issues on get on the rails

00:04:51,400 --> 00:04:57,819
open source project some things that

00:04:55,509 --> 00:04:59,740
jump out at me if you can see there's a

00:04:57,819 --> 00:05:03,189
couple of fields that i think are really

00:04:59,740 --> 00:05:05,830
interesting the title the labels that

00:05:03,189 --> 00:05:07,930
every issue has the state of the issue

00:05:05,830 --> 00:05:09,360
whether or not is closed or open the

00:05:07,930 --> 00:05:11,919
number of comments that the issue has

00:05:09,360 --> 00:05:14,229
the created at date and closed at date

00:05:11,919 --> 00:05:15,639
and the pull requests and this is

00:05:14,229 --> 00:05:18,659
usually what I do when I dive into a

00:05:15,639 --> 00:05:21,279
data set I like to look at individual

00:05:18,659 --> 00:05:25,150
facets and I'd like to just kind of look

00:05:21,279 --> 00:05:26,979
for interesting attributes and also when

00:05:25,150 --> 00:05:29,080
I dive into a data set I like to use a

00:05:26,979 --> 00:05:32,949
library called highcharts to give me

00:05:29,080 --> 00:05:35,020
really basic graphs so this is just open

00:05:32,949 --> 00:05:36,339
versus closed issues on rails and I

00:05:35,020 --> 00:05:39,759
split it out into pull requests in

00:05:36,339 --> 00:05:41,649
issues and it's just a very simple graph

00:05:39,759 --> 00:05:43,330
but it helps and I make a lot of these

00:05:41,649 --> 00:05:45,069
and I it helps me understand the data a

00:05:43,330 --> 00:05:46,930
little bit more but the problem with

00:05:45,069 --> 00:05:48,849
those graphs is that I can't really see

00:05:46,930 --> 00:05:53,379
a lot of these attributes at the same

00:05:48,849 --> 00:05:55,300
time so I got on my sketchbook and I had

00:05:53,379 --> 00:05:58,960
this idea of representing issues in like

00:05:55,300 --> 00:06:00,460
these little bubbles so the size of the

00:05:58,960 --> 00:06:01,839
bubble whether or not it was bigger or

00:06:00,460 --> 00:06:03,810
smaller would actually represent the

00:06:01,839 --> 00:06:06,550
number of comments on the bubble and the

00:06:03,810 --> 00:06:09,699
darker the color or the lighter the

00:06:06,550 --> 00:06:11,110
color that means the less time or the

00:06:09,699 --> 00:06:13,270
darker the color the last time it's been

00:06:11,110 --> 00:06:16,089
open and the lighter it is the more days

00:06:13,270 --> 00:06:17,979
is if it's been open if the issue hasn't

00:06:16,089 --> 00:06:20,259
been closed yet I would outline it with

00:06:17,979 --> 00:06:23,139
this little dotted line I would also

00:06:20,259 --> 00:06:25,300
color pull requests blue and then also

00:06:23,139 --> 00:06:28,750
just plain issues without pull requests

00:06:25,300 --> 00:06:29,919
this dark gray black and I'm going to

00:06:28,750 --> 00:06:30,880
show you how to create this

00:06:29,919 --> 00:06:32,350
visualization with

00:06:30,880 --> 00:06:34,300
3gs with some issues I've already

00:06:32,350 --> 00:06:35,680
collected and the data is going to look

00:06:34,300 --> 00:06:37,450
for every issue the data is going to

00:06:35,680 --> 00:06:39,970
look like this we have these four fields

00:06:37,450 --> 00:06:41,590
we have the age in days we have whether

00:06:39,970 --> 00:06:47,320
or not it's a pull request number of

00:06:41,590 --> 00:06:49,450
comments in the state so I'm going to

00:06:47,320 --> 00:06:51,550
fiddle with this you guys can all talk

00:06:49,450 --> 00:06:56,160
to each other try to get to know your

00:06:51,550 --> 00:06:56,160
neighbor well I set this up

00:07:20,880 --> 00:07:25,870
okay um so I'm actually going to be

00:07:23,620 --> 00:07:27,880
using coffee script for this example is

00:07:25,870 --> 00:07:36,340
anyone like religiously against

00:07:27,880 --> 00:07:38,889
CoffeeScript okay so um I have just so

00:07:36,340 --> 00:07:41,430
blank almost blank javis or coffee

00:07:38,889 --> 00:07:44,740
script file and I have an almost blank

00:07:41,430 --> 00:07:49,270
HTML file except I have this little

00:07:44,740 --> 00:07:51,880
content div over here so or I have this

00:07:49,270 --> 00:07:53,410
contest div with a class content and so

00:07:51,880 --> 00:07:55,750
the first thing I need to do is add an

00:07:53,410 --> 00:08:01,050
SVG container in order to actually draw

00:07:55,750 --> 00:08:08,080
SVG on this page so to do that in d3 I

00:08:01,050 --> 00:08:13,020
select that content div and then I just

00:08:08,080 --> 00:08:15,729
append an SVG element to that d3 object

00:08:13,020 --> 00:08:17,620
and it's a little hard to see but

00:08:15,729 --> 00:08:21,160
there's an SVG element created in that

00:08:17,620 --> 00:08:25,180
content in that div over there and so

00:08:21,160 --> 00:08:28,650
now I have this SVG a d3 object and I

00:08:25,180 --> 00:08:32,320
could actually attach attributes to it

00:08:28,650 --> 00:08:34,529
so I could set the width I can set the

00:08:32,320 --> 00:08:34,529
height

00:08:37,479 --> 00:08:43,990
and so if you can see there's now

00:08:41,649 --> 00:08:46,060
attributes in that SVG element now the

00:08:43,990 --> 00:08:48,190
width is fourteen hundred pixels in the

00:08:46,060 --> 00:08:50,860
height is about twenty four hundred

00:08:48,190 --> 00:08:53,560
pixels and now I need a populated with

00:08:50,860 --> 00:08:56,949
data so I'm going to use this d 3 helper

00:08:53,560 --> 00:08:59,440
method called JSON and it's basically

00:08:56,949 --> 00:09:03,070
like a jquery get method you pass in a

00:08:59,440 --> 00:09:04,360
URL and then it takes that JSON object

00:09:03,070 --> 00:09:07,589
and turns it into a JavaScript object

00:09:04,360 --> 00:09:07,589
and in this case

00:09:15,660 --> 00:09:22,370
in this case is an array of JavaScript

00:09:18,900 --> 00:09:28,140
objects all with those attributes that

00:09:22,370 --> 00:09:30,270
from the issues so now I want to create

00:09:28,140 --> 00:09:33,840
these circles that I was talking about

00:09:30,270 --> 00:09:37,020
before for every one of these issues so

00:09:33,840 --> 00:09:41,870
i take that SVG of d3 object that i

00:09:37,020 --> 00:09:45,150
created on line 6 and then i select all

00:09:41,870 --> 00:09:49,370
circle which is an SVG a circle as an

00:09:45,150 --> 00:09:52,920
SVG element with the class issue so this

00:09:49,370 --> 00:09:54,810
these SVG elements don't exist yet but

00:09:52,920 --> 00:09:56,910
it serves that select all statement

00:09:54,810 --> 00:09:59,600
serves as a placeholder for the ones

00:09:56,910 --> 00:09:59,600
we're about to create

00:10:12,749 --> 00:10:19,119
so these lines i just added on line 13 I

00:10:16,749 --> 00:10:22,179
call a data method and I pass in that

00:10:19,119 --> 00:10:25,209
array of issue information that's

00:10:22,179 --> 00:10:28,509
binding the data to that d3 object then

00:10:25,209 --> 00:10:30,970
I call enter what enter does is for

00:10:28,509 --> 00:10:32,980
every element in the array it's going to

00:10:30,970 --> 00:10:36,129
call all the messes methods chained on

00:10:32,980 --> 00:10:37,720
enter for every element so what it's

00:10:36,129 --> 00:10:39,549
going to do is for every element of the

00:10:37,720 --> 00:10:42,009
array it's going to append a circle and

00:10:39,549 --> 00:10:45,009
give that all of those circles a class

00:10:42,009 --> 00:10:47,379
of issue that class method just sets the

00:10:45,009 --> 00:10:51,489
class attribute to issue so if we

00:10:47,379 --> 00:10:53,139
refresh this page we don't see anything

00:10:51,489 --> 00:10:57,249
yet because we don't have a radius or

00:10:53,139 --> 00:10:59,290
any or position for any of the circles

00:10:57,249 --> 00:11:03,160
but we can see that we have all these

00:10:59,290 --> 00:11:06,189
circles that are created so now we

00:11:03,160 --> 00:11:09,309
actually have to draw them by adding

00:11:06,189 --> 00:11:11,889
more attributes and so circle is an SVG

00:11:09,309 --> 00:11:14,949
shape and so all the attributes I'm

00:11:11,889 --> 00:11:19,269
going to be setting you can look at the

00:11:14,949 --> 00:11:21,549
SVG spec and get all the the attributes

00:11:19,269 --> 00:11:24,299
that you're going to need for whatever

00:11:21,549 --> 00:11:24,299
element you're drawing

00:11:55,740 --> 00:12:02,740
so now we have a lot of circles and so

00:12:00,580 --> 00:12:04,960
going back to the code what we're doing

00:12:02,740 --> 00:12:07,510
is we're just setting attributes CX

00:12:04,960 --> 00:12:08,860
means the center position of a circle cy

00:12:07,510 --> 00:12:10,990
means the center y position of the

00:12:08,860 --> 00:12:13,030
circle and our stands for radius and

00:12:10,990 --> 00:12:16,150
when we have this we have this outer

00:12:13,030 --> 00:12:17,650
function or at our method and so when we

00:12:16,150 --> 00:12:20,830
call the outer method we can either pass

00:12:17,650 --> 00:12:24,490
in a static number or static value like

00:12:20,830 --> 00:12:27,010
that or you can actually pass in a

00:12:24,490 --> 00:12:30,820
function and so when we pass in a

00:12:27,010 --> 00:12:33,460
function we get two parameters d

00:12:30,820 --> 00:12:36,880
represents the element of the array that

00:12:33,460 --> 00:12:39,850
we're on and I represents the index of

00:12:36,880 --> 00:12:41,500
that element so these two lines here all

00:12:39,850 --> 00:12:44,260
it's doing is it's laying out the

00:12:41,500 --> 00:12:45,790
circles and a grid by taking that

00:12:44,260 --> 00:12:49,480
position and calculating where it should

00:12:45,790 --> 00:12:50,920
be I also need to move this over because

00:12:49,480 --> 00:12:55,350
some of its getting cut off so i'm going

00:12:50,920 --> 00:12:58,360
to call this transform attribute and

00:12:55,350 --> 00:13:00,280
going to translate it by moving it 40

00:12:58,360 --> 00:13:05,200
pixels down and 40 pixels to the right

00:13:00,280 --> 00:13:07,870
and this is sorry this is another SVG

00:13:05,200 --> 00:13:10,600
thing then there's more documentation on

00:13:07,870 --> 00:13:13,780
the SVG spec so I want to actually

00:13:10,600 --> 00:13:17,380
attach attributes to each of these

00:13:13,780 --> 00:13:18,880
circles that represent our data first

00:13:17,380 --> 00:13:20,290
thing I want to do is change the color

00:13:18,880 --> 00:13:22,410
based on whether or not it's a pull

00:13:20,290 --> 00:13:22,410
request

00:13:43,660 --> 00:13:52,900
so what I just added on these three

00:13:48,010 --> 00:13:54,280
lines or on these multiple lines i'm

00:13:52,900 --> 00:13:56,830
setting the fill attribute which is

00:13:54,280 --> 00:13:59,980
another SVG attribute and i'm checking

00:13:56,830 --> 00:14:04,720
to see if that element that were that

00:13:59,980 --> 00:14:07,960
we're drawing if that is pull request is

00:14:04,720 --> 00:14:11,400
equal to true if it is then steel blue

00:14:07,960 --> 00:14:14,800
gets returned if not a dark grey gets

00:14:11,400 --> 00:14:16,120
returned so coffeescript has implicit

00:14:14,800 --> 00:14:20,140
returns which is why I don't see any

00:14:16,120 --> 00:14:22,360
return statements here and so that's

00:14:20,140 --> 00:14:24,760
this is how the colors change so all the

00:14:22,360 --> 00:14:27,220
blue circles represent pull requests all

00:14:24,760 --> 00:14:29,680
the gray circles represent issues now i

00:14:27,220 --> 00:14:31,930
want to draw the outline by looking at

00:14:29,680 --> 00:14:36,750
this I want to draw the outline based on

00:14:31,930 --> 00:14:36,750
the state of the poor of the issue

00:15:14,810 --> 00:15:20,760
so now you can see that some of these

00:15:17,040 --> 00:15:24,029
circles have this dashed outline that's

00:15:20,760 --> 00:15:28,080
showing that this the state is still

00:15:24,029 --> 00:15:30,600
open so what I did here was I just set

00:15:28,080 --> 00:15:32,730
the stroke which is the outline of the

00:15:30,600 --> 00:15:36,440
circle to black I said it though stroke

00:15:32,730 --> 00:15:39,240
with 22 and then this attribute dasher a

00:15:36,440 --> 00:15:43,470
stroke dasher a basically just lets you

00:15:39,240 --> 00:15:46,410
define a type of dash line around for

00:15:43,470 --> 00:15:48,900
all of the lines that you're drawing so

00:15:46,410 --> 00:15:52,140
if it's open I wanted to return a

00:15:48,900 --> 00:15:54,450
certain value 3 represents how wide each

00:15:52,140 --> 00:15:57,960
black line is 2 represents a space

00:15:54,450 --> 00:16:00,600
between each black line on the dash and

00:15:57,960 --> 00:16:02,490
if there's no stiff the state is closed

00:16:00,600 --> 00:16:08,880
I don't want it to return anything that

00:16:02,490 --> 00:16:12,089
way we still keep that solid line so now

00:16:08,880 --> 00:16:14,730
i want to make the color or the shade of

00:16:12,089 --> 00:16:17,460
the color that we have on the issue or

00:16:14,730 --> 00:16:19,470
on the circle represent the agent days

00:16:17,460 --> 00:16:22,020
so i'm going to change the value of

00:16:19,470 --> 00:16:25,860
opacity opacity takes a value between 1

00:16:22,020 --> 00:16:28,110
and 0 or 0 and 1 and these agent days go

00:16:25,860 --> 00:16:32,120
this age in days attribute can go from

00:16:28,110 --> 00:16:35,060
zero to let's say 60 for argument's sake

00:16:32,120 --> 00:16:39,120
so we need a function that translates

00:16:35,060 --> 00:16:42,150
that asian days number into a value

00:16:39,120 --> 00:16:43,589
between 0 and 1 and so d3 comes with all

00:16:42,150 --> 00:16:46,910
these helper functions that let us

00:16:43,589 --> 00:16:49,320
create functions that translates

00:16:46,910 --> 00:16:52,020
translates these numbers into numbers we

00:16:49,320 --> 00:16:54,990
want and they're just called they're

00:16:52,020 --> 00:16:59,670
just called scales in d3 so I'm going to

00:16:54,990 --> 00:17:03,260
create a scale function for to return

00:16:59,670 --> 00:17:03,260
the right value for opacity

00:17:43,130 --> 00:17:47,690
now we could see some of the circles are

00:17:45,470 --> 00:17:53,420
a little bit lighter so what this

00:17:47,690 --> 00:17:54,980
function does this so d3 scale gives us

00:17:53,420 --> 00:17:57,140
an object with all these different

00:17:54,980 --> 00:17:58,670
scales that we can use I chose a linear

00:17:57,140 --> 00:18:01,370
scale because we want a one-to-one

00:17:58,670 --> 00:18:03,980
mapping of the domain and the range so

00:18:01,370 --> 00:18:05,090
the domain is the input that's the

00:18:03,980 --> 00:18:07,220
number that we're going to give to this

00:18:05,090 --> 00:18:09,290
scale and the range is the output that's

00:18:07,220 --> 00:18:12,380
the range of numbers that we want back

00:18:09,290 --> 00:18:16,000
from the scale so if we had so for

00:18:12,380 --> 00:18:18,800
example if we pass in a a number of zero

00:18:16,000 --> 00:18:21,110
that function that agent de scale

00:18:18,800 --> 00:18:23,330
function is going to give us one and

00:18:21,110 --> 00:18:27,080
that's what we want we want the lower

00:18:23,330 --> 00:18:30,620
number of days to be a higher to be more

00:18:27,080 --> 00:18:33,200
visible and so for the size of the

00:18:30,620 --> 00:18:35,030
circle we have to do something similar

00:18:33,200 --> 00:18:37,780
except we're going to be changing the

00:18:35,030 --> 00:18:37,780
value of the radius

00:19:13,320 --> 00:19:18,059
and now we have now the size of the

00:19:16,230 --> 00:19:22,500
circle represents the number of comments

00:19:18,059 --> 00:19:24,659
we have and so what i did on line 16 was

00:19:22,500 --> 00:19:26,909
i created another scale this time I had

00:19:24,659 --> 00:19:30,570
to use an exponential or I had to use a

00:19:26,909 --> 00:19:33,059
different kind of skill because so to

00:19:30,570 --> 00:19:36,509
calculate the area of a circle we need

00:19:33,059 --> 00:19:39,059
the square of the radius so if we just

00:19:36,509 --> 00:19:40,320
use the linear scale that means the area

00:19:39,059 --> 00:19:43,799
of the circle would actually increase

00:19:40,320 --> 00:19:45,149
exponentially which we don't want so we

00:19:43,799 --> 00:19:48,659
needed to create a different type of

00:19:45,149 --> 00:19:51,990
scale for this and that's really it for

00:19:48,659 --> 00:19:56,909
the example it was about 40 some-odd

00:19:51,990 --> 00:20:00,269
lines of code so this this example that

00:19:56,909 --> 00:20:01,679
we just created it isn't complete for

00:20:00,269 --> 00:20:02,850
instance we would probably need a legend

00:20:01,679 --> 00:20:04,710
if we were ever going to present this

00:20:02,850 --> 00:20:06,570
and we made there's a lot of more

00:20:04,710 --> 00:20:08,159
interesting things to do maybe we want

00:20:06,570 --> 00:20:10,710
to group all these issues and pull

00:20:08,159 --> 00:20:13,850
request by the labels and tags if they

00:20:10,710 --> 00:20:17,789
have because some of them are grouped by

00:20:13,850 --> 00:20:20,129
what class in rails that they reference

00:20:17,789 --> 00:20:25,590
to or the release number and maybe we

00:20:20,129 --> 00:20:27,809
want tool tips to show the actual up to

00:20:25,590 --> 00:20:29,519
show the title and the body and like the

00:20:27,809 --> 00:20:32,820
comments that people have made on each

00:20:29,519 --> 00:20:37,879
pull request but it's an interesting way

00:20:32,820 --> 00:20:37,879
of looking at the data sorry

00:20:54,710 --> 00:20:58,220
so it's an interesting way of looking at

00:20:56,419 --> 00:21:01,130
the data and I think it's also like

00:20:58,220 --> 00:21:04,190
visually appealing and usually when and

00:21:01,130 --> 00:21:06,289
I find that when visualizations are like

00:21:04,190 --> 00:21:08,419
more aesthetically pleasing people spend

00:21:06,289 --> 00:21:09,980
a lot more time on them and they kind of

00:21:08,419 --> 00:21:11,360
have more fun digging into a

00:21:09,980 --> 00:21:14,570
visualization and trying to understand

00:21:11,360 --> 00:21:17,270
it so I also created another

00:21:14,570 --> 00:21:19,220
visualization for this talk I was kind

00:21:17,270 --> 00:21:21,200
of curious about when issues get created

00:21:19,220 --> 00:21:23,480
I was interested to see if there's any

00:21:21,200 --> 00:21:26,929
interesting I was interested to see if

00:21:23,480 --> 00:21:30,049
there was any trends or correlation

00:21:26,929 --> 00:21:32,000
between issues that get created and

00:21:30,049 --> 00:21:34,580
release dates so i just took all the

00:21:32,000 --> 00:21:36,710
created at dates and map them on or put

00:21:34,580 --> 00:21:40,100
them on a line graph using highcharts

00:21:36,710 --> 00:21:42,470
Jas and I first noticed that huge spike

00:21:40,100 --> 00:21:44,210
that was a day that they imported the

00:21:42,470 --> 00:21:45,770
rails project imported all the issues

00:21:44,210 --> 00:21:48,110
from another issue tracking system that

00:21:45,770 --> 00:21:49,880
they used so going through that I

00:21:48,110 --> 00:21:52,220
normalize the data by removing that date

00:21:49,880 --> 00:21:52,970
and all those lighthouse issues and I

00:21:52,220 --> 00:21:57,020
saw that there are some interesting

00:21:52,970 --> 00:21:59,870
spikes at first I thought so there are

00:21:57,020 --> 00:22:01,399
some interesting spikes for instance a

00:21:59,870 --> 00:22:05,090
lot of issues get created around the

00:22:01,399 --> 00:22:07,100
beginning of 2000-2012 and that's when

00:22:05,090 --> 00:22:09,559
rails 3 2 was released I thought that

00:22:07,100 --> 00:22:11,929
was pretty interesting but I also

00:22:09,559 --> 00:22:13,850
couldn't see when issues get closed so I

00:22:11,929 --> 00:22:15,230
had this idea of creating this time line

00:22:13,850 --> 00:22:17,330
diagram where I could see the lifespan

00:22:15,230 --> 00:22:20,929
of an issue on a horizontal timeline

00:22:17,330 --> 00:22:24,049
like this and so I just looked at these

00:22:20,929 --> 00:22:26,000
two attributes of every issue and I try

00:22:24,049 --> 00:22:29,720
to map them out on a timeline and it

00:22:26,000 --> 00:22:31,640
came out a little messy so first thing I

00:22:29,720 --> 00:22:33,440
did to clean it up a little bit was to

00:22:31,640 --> 00:22:36,529
increase the opacity of the line so that

00:22:33,440 --> 00:22:39,130
way you can see kind of groupings so the

00:22:36,529 --> 00:22:42,529
darker the area on the timeline the more

00:22:39,130 --> 00:22:45,289
issues were closed also if an issue

00:22:42,529 --> 00:22:48,500
hadn't been closed yet I just I just

00:22:45,289 --> 00:22:53,299
made the closed at date the day or today

00:22:48,500 --> 00:22:55,340
or I date that a new date object but I

00:22:53,299 --> 00:22:58,190
can see that there's some like dark

00:22:55,340 --> 00:23:01,429
spots but I couldn't see if they

00:22:58,190 --> 00:23:03,020
correlated with any releases because so

00:23:01,429 --> 00:23:04,549
that was disappointing I thought that

00:23:03,020 --> 00:23:07,220
was going to reveal something

00:23:04,549 --> 00:23:08,419
interesting so then I asked myself tiff

00:23:07,220 --> 00:23:10,929
issues or puller class

00:23:08,419 --> 00:23:14,779
gets close faster and so I split out

00:23:10,929 --> 00:23:16,429
those that view into two different views

00:23:14,779 --> 00:23:18,950
one with just issues and one with just

00:23:16,429 --> 00:23:21,230
pull requests I couldn't really find

00:23:18,950 --> 00:23:26,090
much except for that same dark spot in

00:23:21,230 --> 00:23:30,139
May 2012 I tried to split it out in

00:23:26,090 --> 00:23:31,669
color did so the gray lines represent

00:23:30,139 --> 00:23:33,919
issues that haven't been closed yet and

00:23:31,669 --> 00:23:36,559
the blue lines represent issues that

00:23:33,919 --> 00:23:39,109
were closed I couldn't find any

00:23:36,559 --> 00:23:40,789
interesting data other than there's a

00:23:39,109 --> 00:23:43,820
lot of issues that are still open from

00:23:40,789 --> 00:23:46,309
like 2011 whereas pull requests there's

00:23:43,820 --> 00:23:47,690
a lot fewer but it was an interesting

00:23:46,309 --> 00:23:51,169
way of looking at the data I've never

00:23:47,690 --> 00:23:52,730
really seen pull requests or issues like

00:23:51,169 --> 00:23:55,519
this before I thought was an interesting

00:23:52,730 --> 00:23:58,309
way of looking at open source which so I

00:23:55,519 --> 00:24:02,210
thought it was a mild success although

00:23:58,309 --> 00:24:04,340
not really so this talk was mostly

00:24:02,210 --> 00:24:06,019
inspired by this question I get a lot is

00:24:04,340 --> 00:24:08,419
which is how do i get into data

00:24:06,019 --> 00:24:10,730
visualization and analysis and many

00:24:08,419 --> 00:24:12,859
people have actually recommended tools

00:24:10,730 --> 00:24:14,659
like saying learn our or learn python

00:24:12,859 --> 00:24:17,059
many people say that Ruby developers

00:24:14,659 --> 00:24:19,820
like myself that Ruby is not suited for

00:24:17,059 --> 00:24:21,109
data analysis but these are all the

00:24:19,820 --> 00:24:24,440
technologies I use for this

00:24:21,109 --> 00:24:25,940
demonstration highcharts in d3 of course

00:24:24,440 --> 00:24:29,749
but I use Ruby on Rails to collect my

00:24:25,940 --> 00:24:32,090
data and to just create JSON and do some

00:24:29,749 --> 00:24:33,409
really quick analytics and you can adapt

00:24:32,090 --> 00:24:36,649
your own technologies to help you with

00:24:33,409 --> 00:24:38,269
data analysis because the important part

00:24:36,649 --> 00:24:40,039
of data analysis is not really the tools

00:24:38,269 --> 00:24:41,570
that you use but the process and the

00:24:40,039 --> 00:24:44,029
reasonings that you have behind your

00:24:41,570 --> 00:24:45,889
results you want to be inquisitive of

00:24:44,029 --> 00:24:49,820
your data you want to keep asking small

00:24:45,889 --> 00:24:52,519
questions about your data and try to get

00:24:49,820 --> 00:24:54,919
quick feedback and yes you want to keep

00:24:52,519 --> 00:24:56,749
your question simple so you can get more

00:24:54,919 --> 00:24:59,269
out of your data especially out of large

00:24:56,749 --> 00:25:01,549
complex data sets because it's really

00:24:59,269 --> 00:25:04,309
difficult to get a big idea or to get

00:25:01,549 --> 00:25:06,679
the big picture of such a large amount

00:25:04,309 --> 00:25:09,799
of information so you have to think

00:25:06,679 --> 00:25:12,259
iteratively and I was hoping to show

00:25:09,799 --> 00:25:15,169
that iterative process by going through

00:25:12,259 --> 00:25:17,389
some of my some of the examples that I

00:25:15,169 --> 00:25:18,769
showed you before and you also want to

00:25:17,389 --> 00:25:21,710
create the visualization that answers

00:25:18,769 --> 00:25:24,080
your questions sometimes a simple

00:25:21,710 --> 00:25:25,760
chart or even a single number will be

00:25:24,080 --> 00:25:27,110
the visualization that you need but

00:25:25,760 --> 00:25:29,630
sometimes you need to think a little bit

00:25:27,110 --> 00:25:31,730
more creatively and adding d3 to your

00:25:29,630 --> 00:25:34,580
toolbox we'll let you be able to express

00:25:31,730 --> 00:25:37,460
your data in a lot less with a lot less

00:25:34,580 --> 00:25:39,649
limits on the web and we touch on the

00:25:37,460 --> 00:25:41,059
very basics of d3 today there are tons

00:25:39,649 --> 00:25:43,250
more feature of this library that can

00:25:41,059 --> 00:25:46,700
help you express anything you need from

00:25:43,250 --> 00:25:50,710
your data so that's it for my

00:25:46,700 --> 00:25:50,710
presentation are there any questions

00:25:52,600 --> 00:26:01,669
questions anyone so the one chart you

00:26:00,470 --> 00:26:03,980
did with the pull request whether you

00:26:01,669 --> 00:26:06,440
had the arc that's all highcharts or oh

00:26:03,980 --> 00:26:08,570
no this is all d3 that was all to you

00:26:06,440 --> 00:26:14,470
three okay sorry I should have made that

00:26:08,570 --> 00:26:14,470
more clear anyone else

00:26:19,659 --> 00:26:28,850
thank you are there any examples of the

00:26:24,470 --> 00:26:33,350
3gs doing visualizations on maps either

00:26:28,850 --> 00:26:48,909
with coloring regions or even having

00:26:33,350 --> 00:26:48,909
charts / map yes nope not the swage

00:26:56,509 --> 00:26:59,809
oh sorry did you want to see the

00:26:58,070 --> 00:27:04,399
examples or did you just want to guess

00:26:59,809 --> 00:27:07,489
or no question I was going to show I

00:27:04,399 --> 00:27:16,299
mean so this page is really oh this is

00:27:07,489 --> 00:27:19,519
not mirrored sorry so this page which is

00:27:16,299 --> 00:27:22,609
Mike Bostock github page Mike Bostock

00:27:19,519 --> 00:27:23,899
being the creator of get of d3 has it

00:27:22,609 --> 00:27:27,409
really has like a lot of really

00:27:23,899 --> 00:27:32,209
experimental small examples this is kind

00:27:27,409 --> 00:27:33,979
of a really basic so what you have to do

00:27:32,209 --> 00:27:37,219
though with this is you actually have to

00:27:33,979 --> 00:27:41,029
have JSON files that represent the

00:27:37,219 --> 00:27:43,639
geography that you want it's not not so

00:27:41,029 --> 00:27:45,649
much like mapping isn't really built in

00:27:43,639 --> 00:27:48,019
but there's a lot of functions that will

00:27:45,649 --> 00:27:54,889
can help you build maps and build

00:27:48,019 --> 00:27:56,959
visualizations on top of maps what will

00:27:54,889 --> 00:27:59,329
you need to do in order to draw the

00:27:56,959 --> 00:28:02,029
regions how would be the bedroom so I

00:27:59,329 --> 00:28:03,709
you need shapefiles so close you should

00:28:02,029 --> 00:28:08,079
talk to uh it's a little hard to explain

00:28:03,709 --> 00:28:08,079
right now but remember this yeah

00:28:15,510 --> 00:28:24,190
hey in heaviest any of the libraries

00:28:20,380 --> 00:28:27,310
built on top of d3 like and we did three

00:28:24,190 --> 00:28:30,580
or rickshaw or something I'm not your

00:28:27,310 --> 00:28:33,400
opinion on that I like NBD three it's

00:28:30,580 --> 00:28:35,890
not as well documented as I liked but

00:28:33,400 --> 00:28:38,470
with envy d3 and why generally the

00:28:35,890 --> 00:28:39,970
library is built on top of d3 it's if

00:28:38,470 --> 00:28:41,650
you do a little bit of digging you can

00:28:39,970 --> 00:28:43,930
actually like customize your graphs to

00:28:41,650 --> 00:28:45,310
look the way you want so a lot of

00:28:43,930 --> 00:28:47,560
designers I work with actually really

00:28:45,310 --> 00:28:49,330
like MBD 3 because they just have to

00:28:47,560 --> 00:28:52,150
change in order to change the style they

00:28:49,330 --> 00:28:57,370
just have to change the CSS not good

00:28:52,150 --> 00:28:59,350
things I was wondering if you have any

00:28:57,370 --> 00:29:01,510
experience with interactive

00:28:59,350 --> 00:29:04,950
visualizations where you can really sort

00:29:01,510 --> 00:29:07,000
of explore your data and if d3 has

00:29:04,950 --> 00:29:10,540
features specifically to help with that

00:29:07,000 --> 00:29:14,500
yes um so you can actually set a call

00:29:10,540 --> 00:29:16,750
backs on all of the so in this example

00:29:14,500 --> 00:29:21,490
of let me actually open up the code of

00:29:16,750 --> 00:29:28,140
it again do I have time for just a quick

00:29:21,490 --> 00:29:28,140
go to oh okay so

00:29:33,510 --> 00:29:39,730
so I'm d3 has methods that lets you

00:29:37,450 --> 00:29:42,940
write callbacks and mouse actions so I

00:29:39,730 --> 00:29:44,530
think it's mouse over and then so every

00:29:42,940 --> 00:29:49,390
time there's a mouse over on any of the

00:29:44,530 --> 00:29:52,690
elements you can have an event fire and

00:29:49,390 --> 00:29:56,610
then have a function so I'm just going

00:29:52,690 --> 00:29:56,610
to go print out the title every time I

00:29:56,730 --> 00:30:13,270
mouse over a circle whoops that's not

00:30:04,150 --> 00:30:17,170
supposed to happen okay so as you can

00:30:13,270 --> 00:30:19,900
see there's every time I mouse over a

00:30:17,170 --> 00:30:28,390
circle the title of the pull request

00:30:19,900 --> 00:30:30,460
gets pulled up so yeah you can attach

00:30:28,390 --> 00:30:32,590
Mouse handler or you can attach Mouse

00:30:30,460 --> 00:30:42,390
handlers ad for interactive

00:30:32,590 --> 00:30:42,390

YouTube URL: https://www.youtube.com/watch?v=VevQo46jCAI


