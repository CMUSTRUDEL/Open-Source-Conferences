Title: Kod.io 2014 - Vagrant, Packer, Serf: Maximum Potency DevOps
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	By Mitchelle Hashimoto

In 2013, we saw the introduction of many new DevOps tools and existing tools such as Vagrant saw some huge improvements and features added.
With all this change, its hard to keep up with not only what has changed, but how to use these changes and what benefits they have.

This talk begins by briefly introducing a handful of my own tools: Vagrant, Packer, and Serf.

I talk about what their purpose is, some of their latest features, and who is using these tools.

I then continue to show how these tools can be used along with other software such as Docker to create some truly amazing development and production stacks.

For production stacks, I discuss the benefits of using some of these tools over existing options, and for development stacks, I show how Vagrant improves process and workflow to help streamline the entire process from development through to production.

Help us caption & translate this video!

http://amara.org/v/FG3U/
Captions: 
	00:00:18,650 --> 00:00:26,100
all right hello hello okay so today I'm

00:00:23,970 --> 00:00:29,880
gonna be talking a little bit a lot

00:00:26,100 --> 00:00:31,290
about DevOps so this is a developer

00:00:29,880 --> 00:00:33,830
conference so I don't know how many of

00:00:31,290 --> 00:00:35,730
you have to do ops very often so

00:00:33,830 --> 00:00:37,860
basically what I'm going to be talking

00:00:35,730 --> 00:00:39,690
about today is I'm going to start by

00:00:37,860 --> 00:00:42,809
talking kind of in the general sense

00:00:39,690 --> 00:00:44,580
about what DevOps is and what's been

00:00:42,809 --> 00:00:46,580
going on with them ups and then get a

00:00:44,580 --> 00:00:48,900
little bit more specific and talk about

00:00:46,580 --> 00:00:51,300
my tools specifically but i'll mention

00:00:48,900 --> 00:00:54,960
some other tools in passing but the

00:00:51,300 --> 00:00:57,030
general goal is i think i think from

00:00:54,960 --> 00:00:58,500
maybe like for four years from like two

00:00:57,030 --> 00:01:01,350
thousand seven to two thousand eleven

00:00:58,500 --> 00:01:03,449
give or take a little bit of time devops

00:01:01,350 --> 00:01:05,400
was really easy you just had to know

00:01:03,449 --> 00:01:07,550
like chef for puppet or something and

00:01:05,400 --> 00:01:11,010
you were done that's all there was to do

00:01:07,550 --> 00:01:12,990
and implement it but i would say in the

00:01:11,010 --> 00:01:16,260
past like three years especially the

00:01:12,990 --> 00:01:18,630
past year for people who don't do ops or

00:01:16,260 --> 00:01:20,490
devops all the time it's gotten really

00:01:18,630 --> 00:01:22,800
really confusing because there's a lot

00:01:20,490 --> 00:01:24,780
of different new tools coming out in a

00:01:22,800 --> 00:01:27,120
lot of different ways to do things and

00:01:24,780 --> 00:01:28,800
now like it's assumed you chef or puppet

00:01:27,120 --> 00:01:32,760
now but there's all these other things

00:01:28,800 --> 00:01:34,320
so I constantly see on twitter and get

00:01:32,760 --> 00:01:36,840
asked at conferences and meetups and

00:01:34,320 --> 00:01:39,420
icings questions that don't make a lot

00:01:36,840 --> 00:01:41,160
of sense you know there'll be people

00:01:39,420 --> 00:01:42,720
comparing basically no apples and

00:01:41,160 --> 00:01:45,540
oranges in terms of DevOps they'll say

00:01:42,720 --> 00:01:48,030
like should I use chef or should I use

00:01:45,540 --> 00:01:51,930
vagrant and I'm like what those are the

00:01:48,030 --> 00:01:52,890
okay so I but I i think this these sorts

00:01:51,930 --> 00:01:54,630
of questions come out of the fact that

00:01:52,890 --> 00:01:56,160
it's just very confusing right now so

00:01:54,630 --> 00:01:58,860
I'm going to try to explain some of this

00:01:56,160 --> 00:02:00,840
but also diving in the second half of

00:01:58,860 --> 00:02:04,200
the talking to more technical things of

00:02:00,840 --> 00:02:06,330
what's going on so we're going to move a

00:02:04,200 --> 00:02:10,860
little fast though cuz this talk runs a

00:02:06,330 --> 00:02:12,750
little long so that's me and yeah so I

00:02:10,860 --> 00:02:16,500
have a company Hoshi Corp and we're

00:02:12,750 --> 00:02:18,330
devops tools company so what we do is we

00:02:16,500 --> 00:02:20,159
just try to talk to other companies and

00:02:18,330 --> 00:02:22,860
see where their pain points are with dev

00:02:20,159 --> 00:02:25,140
ops and try to build tools to solve

00:02:22,860 --> 00:02:27,330
those problems because i believe that

00:02:25,140 --> 00:02:29,040
good tools can't come out of other

00:02:27,330 --> 00:02:31,800
companies that are doing other things

00:02:29,040 --> 00:02:33,150
because they're not interested

00:02:31,800 --> 00:02:34,560
making the tool very good because

00:02:33,150 --> 00:02:36,450
they're trying to make the business good

00:02:34,560 --> 00:02:38,460
so they usually get something that works

00:02:36,450 --> 00:02:40,290
for them then release it and then either

00:02:38,460 --> 00:02:43,080
don't maintain it very well or just like

00:02:40,290 --> 00:02:45,300
fix bugs where what you really want is

00:02:43,080 --> 00:02:47,100
something to grow and adapt to be useful

00:02:45,300 --> 00:02:49,110
for everyone and that's what I'm trying

00:02:47,100 --> 00:02:53,160
to do while also trying to make money

00:02:49,110 --> 00:02:55,290
and it's working so far but who knows we

00:02:53,160 --> 00:02:57,600
have three tools and these are the three

00:02:55,290 --> 00:03:01,230
kind of out right now I'm going to cover

00:02:57,600 --> 00:03:02,610
each so don't worry about that okay so

00:03:01,230 --> 00:03:05,220
start I'm going to start off by talking

00:03:02,610 --> 00:03:06,960
about the application lifecycle like I

00:03:05,220 --> 00:03:09,120
said we start general and then get more

00:03:06,960 --> 00:03:12,840
technical so the application lifecycle

00:03:09,120 --> 00:03:15,120
is the process of any application from

00:03:12,840 --> 00:03:16,890
development to production and when I

00:03:15,120 --> 00:03:18,900
break this down it really breaks down

00:03:16,890 --> 00:03:22,050
into three categories sometimes

00:03:18,900 --> 00:03:24,900
depending on the company three silos and

00:03:22,050 --> 00:03:27,570
I'm just going to go in order so the

00:03:24,900 --> 00:03:30,240
first one is the development process so

00:03:27,570 --> 00:03:32,550
in development which I also say is the

00:03:30,240 --> 00:03:34,290
fun part because nothing really matters

00:03:32,550 --> 00:03:37,560
that much you could break things and try

00:03:34,290 --> 00:03:39,930
new things and it's fun here it gets

00:03:37,560 --> 00:03:41,489
less fun as you go on but in development

00:03:39,930 --> 00:03:44,400
no matter what you're working on you

00:03:41,489 --> 00:03:46,920
kind of want for I think four different

00:03:44,400 --> 00:03:48,330
like features of a development

00:03:46,920 --> 00:03:50,370
environment whether you're using vagrant

00:03:48,330 --> 00:03:52,709
or anything else you kind of just want

00:03:50,370 --> 00:03:54,989
these four things so for one you want it

00:03:52,709 --> 00:03:56,970
to be readily available so whether

00:03:54,989 --> 00:04:00,959
you're at work or cafe or something or

00:03:56,970 --> 00:04:03,090
on a plane or you know on vacation or

00:04:00,959 --> 00:04:05,790
something you want to be able to work on

00:04:03,090 --> 00:04:07,320
something if you have to and when I say

00:04:05,790 --> 00:04:08,459
readily available i'm not saying it has

00:04:07,320 --> 00:04:10,500
to be offline because there's a lot of

00:04:08,459 --> 00:04:12,570
interesting like online ids coming out

00:04:10,500 --> 00:04:14,100
I'm not saying has to be offline but it

00:04:12,570 --> 00:04:16,380
just has to be accessible so there's

00:04:14,100 --> 00:04:20,010
some companies where you could only work

00:04:16,380 --> 00:04:24,150
on your thing if you're like at your

00:04:20,010 --> 00:04:26,490
work work computer and unless it's the

00:04:24,150 --> 00:04:29,570
NSA or something you you should be able

00:04:26,490 --> 00:04:31,950
to pretty much work on it anywhere

00:04:29,570 --> 00:04:33,450
another feature you kind of want is to

00:04:31,950 --> 00:04:34,950
be able to make changes and see those

00:04:33,450 --> 00:04:38,190
the effects of those changes as quickly

00:04:34,950 --> 00:04:40,440
as possible so the golden like circle

00:04:38,190 --> 00:04:43,410
that every development tries to reach is

00:04:40,440 --> 00:04:44,900
this thing where you code you save and

00:04:43,410 --> 00:04:47,650
then you reload the web page or

00:04:44,900 --> 00:04:49,880
anything and you see the difference and

00:04:47,650 --> 00:04:51,560
sometimes you can't achieve this but

00:04:49,880 --> 00:04:53,389
everything tries to head in this

00:04:51,560 --> 00:04:55,910
direction and not just websites which is

00:04:53,389 --> 00:04:57,979
like PHP got this really right this is

00:04:55,910 --> 00:05:01,250
like one of the only good things about

00:04:57,979 --> 00:05:02,840
PHP but you know even with there was

00:05:01,250 --> 00:05:04,039
like a ruby motion talk earlier and you

00:05:02,840 --> 00:05:05,330
want this sorted like it would be great

00:05:04,039 --> 00:05:07,820
if you could do this with an iOS app

00:05:05,330 --> 00:05:09,560
right because if you use iOS with just

00:05:07,820 --> 00:05:11,930
xcode you have to save something compile

00:05:09,560 --> 00:05:13,430
it sends stuff down to the phone which

00:05:11,930 --> 00:05:16,009
takes forever for some reason and then

00:05:13,430 --> 00:05:17,539
it starts and then with room ocean use

00:05:16,009 --> 00:05:19,729
run rake and it's a lot faster like you

00:05:17,539 --> 00:05:22,430
get closer to this so you really want a

00:05:19,729 --> 00:05:24,590
head in this direction you want

00:05:22,430 --> 00:05:26,690
consistency and by consistency I mean

00:05:24,590 --> 00:05:29,630
avoiding what's happening in this comic

00:05:26,690 --> 00:05:31,400
so you want the development environment

00:05:29,630 --> 00:05:33,650
to work the same on everyone's computer

00:05:31,400 --> 00:05:35,930
and ideally you want people to be able

00:05:33,650 --> 00:05:37,660
to use any sort of operating system but

00:05:35,930 --> 00:05:40,120
that's kind of just the cherry on top

00:05:37,660 --> 00:05:43,250
but basically when you have this problem

00:05:40,120 --> 00:05:44,570
it's really sucks because you don't know

00:05:43,250 --> 00:05:45,889
whose fault it is when when something

00:05:44,570 --> 00:05:47,000
doesn't work on someone's machine and

00:05:45,889 --> 00:05:49,099
works on the other person's machine

00:05:47,000 --> 00:05:50,870
you're not quite sure if the other like

00:05:49,099 --> 00:05:53,210
whose machine's broken you don't know

00:05:50,870 --> 00:05:55,130
and so you end up you you end up wasting

00:05:53,210 --> 00:05:58,220
time of at least two people for some

00:05:55,130 --> 00:06:01,669
amount of time to fix it and that should

00:05:58,220 --> 00:06:03,590
just never happen and then to some

00:06:01,669 --> 00:06:05,770
extent you want collaboration and

00:06:03,590 --> 00:06:10,220
sharing features so while programming

00:06:05,770 --> 00:06:11,990
mostly is like a solitary task unless

00:06:10,220 --> 00:06:13,490
you're like pair programming at certain

00:06:11,990 --> 00:06:15,830
points at least i would say once a week

00:06:13,490 --> 00:06:17,570
or more you want to be able to show

00:06:15,830 --> 00:06:19,580
people what you're working on or get

00:06:17,570 --> 00:06:21,849
help from someone or something so you

00:06:19,580 --> 00:06:25,430
want some level of collaboration and

00:06:21,849 --> 00:06:26,409
then just a review slide but yeah no

00:06:25,430 --> 00:06:29,720
matter if you're working on web apps

00:06:26,409 --> 00:06:33,710
desktop apps iphone apps you want these

00:06:29,720 --> 00:06:37,340
sorts of things and then going down the

00:06:33,710 --> 00:06:39,349
next one is deployment so once you're

00:06:37,340 --> 00:06:41,270
done with the development part that app

00:06:39,349 --> 00:06:45,320
needs to get to wherever it's going to

00:06:41,270 --> 00:06:46,310
run somehow and for this talk it doesn't

00:06:45,320 --> 00:06:47,960
matter if it's going to a test

00:06:46,310 --> 00:06:49,760
environment or staging your production

00:06:47,960 --> 00:06:51,380
i'm just talking in general about

00:06:49,760 --> 00:06:54,919
deployment it's just got to go from your

00:06:51,380 --> 00:06:58,529
computer to some usable like real real

00:06:54,919 --> 00:06:59,579
world environment somehow

00:06:58,529 --> 00:07:03,209
and this could kind of break down into

00:06:59,579 --> 00:07:04,229
two separate categories on it on its own

00:07:03,209 --> 00:07:07,499
so you have the part where you at the

00:07:04,229 --> 00:07:10,079
start and configure servers so you need

00:07:07,499 --> 00:07:12,929
to run a server somewhere or needs to

00:07:10,079 --> 00:07:14,579
get running somehow some software that

00:07:12,929 --> 00:07:15,899
needs to be installed on it and then the

00:07:14,579 --> 00:07:17,969
software needs to be configured to be

00:07:15,899 --> 00:07:20,549
able to run your application so that's

00:07:17,969 --> 00:07:21,599
the first phase of it and that's I'm

00:07:20,549 --> 00:07:23,399
sure everyone's seen this picture now

00:07:21,599 --> 00:07:26,999
but that's Google's data center which is

00:07:23,399 --> 00:07:29,759
super cool and then you want deploy and

00:07:26,999 --> 00:07:31,169
run your application so once the servers

00:07:29,759 --> 00:07:32,609
are up this that's usually a separate

00:07:31,169 --> 00:07:34,529
task even though they're all part of the

00:07:32,609 --> 00:07:36,329
same goal of deployment and you know

00:07:34,529 --> 00:07:38,489
someone else starts the servers but then

00:07:36,329 --> 00:07:40,919
someone else wants be able to deploy and

00:07:38,489 --> 00:07:42,059
run applications which has a few steps

00:07:40,919 --> 00:07:45,989
you know there might be a compilation

00:07:42,059 --> 00:07:48,059
step java or something you want to get

00:07:45,989 --> 00:07:51,059
it on the server somehow deliver it on

00:07:48,059 --> 00:07:52,229
there you want to start it I'm verify

00:07:51,059 --> 00:07:53,819
it's running and then hopefully the

00:07:52,229 --> 00:07:55,799
separate step but sometimes the same

00:07:53,819 --> 00:07:59,159
step and if it's PHP they're all the

00:07:55,799 --> 00:08:00,809
same step oh but you hopefully have

00:07:59,159 --> 00:08:02,369
another separate step that makes it

00:08:00,809 --> 00:08:03,839
active so you want it to start and you

00:08:02,369 --> 00:08:05,579
want to make sure it's okay somehow and

00:08:03,839 --> 00:08:07,979
then you want people to actually go to

00:08:05,579 --> 00:08:13,049
it but this is kind of things you want

00:08:07,979 --> 00:08:14,519
in the deploy phase deploy phase is

00:08:13,049 --> 00:08:16,110
really funny because it's really easy to

00:08:14,519 --> 00:08:18,269
say what the problems are or the goals

00:08:16,110 --> 00:08:20,129
are of deployment but it's actually

00:08:18,269 --> 00:08:22,379
really hard to solve these problems like

00:08:20,129 --> 00:08:24,419
I have it's very rare to enter any

00:08:22,379 --> 00:08:28,259
company where they're super happy with

00:08:24,419 --> 00:08:29,939
both of these systems unless it's PHP

00:08:28,259 --> 00:08:36,269
there's like we just ftp it up it just

00:08:29,939 --> 00:08:40,409
works deployed I don't mean to make fun

00:08:36,269 --> 00:08:42,000
of PHP is so easy and the last the last

00:08:40,409 --> 00:08:43,529
kind of phase after deploy it goes in

00:08:42,000 --> 00:08:45,029
the maintenance mode and like I said it

00:08:43,529 --> 00:08:46,589
gets less and less fun so now we're at

00:08:45,029 --> 00:08:49,980
the part that's probably the least fun

00:08:46,589 --> 00:08:51,860
for most people and so maintenance is

00:08:49,980 --> 00:08:54,990
really about keeping everything running

00:08:51,860 --> 00:08:57,209
while also changing everything which are

00:08:54,990 --> 00:09:00,089
kind of two opposite things because the

00:08:57,209 --> 00:09:01,709
easiest way to not break things or keep

00:09:00,089 --> 00:09:04,319
things running is to just never change

00:09:01,709 --> 00:09:08,819
them but that's not what the businessman

00:09:04,319 --> 00:09:10,139
wants so for maintenance there's just a

00:09:08,819 --> 00:09:11,759
few things you need monitoring

00:09:10,139 --> 00:09:12,680
monitoring's pretty much about

00:09:11,759 --> 00:09:15,480
anticipating

00:09:12,680 --> 00:09:17,130
problems reacting it reacting to

00:09:15,480 --> 00:09:19,770
problems before they're really problems

00:09:17,130 --> 00:09:22,560
but when things go red to know what's

00:09:19,770 --> 00:09:25,830
going red you want to be able update

00:09:22,560 --> 00:09:27,810
things so not just update the updating

00:09:25,830 --> 00:09:29,760
again to things so the obstacle unveiled

00:09:27,810 --> 00:09:31,890
update software and update servers and

00:09:29,760 --> 00:09:34,560
security patches and distros once in a

00:09:31,890 --> 00:09:36,720
while and the application people want to

00:09:34,560 --> 00:09:39,300
update applications so you got to be

00:09:36,720 --> 00:09:41,220
able to do both and then there's

00:09:39,300 --> 00:09:43,230
orchestrating so orchestrating is the

00:09:41,220 --> 00:09:44,520
really overloaded word it could mean a

00:09:43,230 --> 00:09:48,680
lot of things and what I mean by

00:09:44,520 --> 00:09:51,180
orchestrating is you want some way of

00:09:48,680 --> 00:09:54,060
inspecting your cluster and saying like

00:09:51,180 --> 00:09:56,100
is the average web load below X and if

00:09:54,060 --> 00:09:58,740
it's not then increase the capacity

00:09:56,100 --> 00:09:59,940
somehow way for those go online and put

00:09:58,740 --> 00:10:02,250
them in a load balancer and this is

00:09:59,940 --> 00:10:03,840
orchestration because it needs a it

00:10:02,250 --> 00:10:05,610
needs like a full view of your

00:10:03,840 --> 00:10:07,020
infrastructure it needs to be able to

00:10:05,610 --> 00:10:10,500
interact with multiple servers like in

00:10:07,020 --> 00:10:12,360
lockstep and eventually you know have

00:10:10,500 --> 00:10:14,850
some goal and usually this is like

00:10:12,360 --> 00:10:16,290
humans doing this but again this is

00:10:14,850 --> 00:10:19,820
general so in general for the

00:10:16,290 --> 00:10:23,550
maintenance thing you want these three

00:10:19,820 --> 00:10:28,620
you have these three goals and so those

00:10:23,550 --> 00:10:30,270
are the three steps kind of and what I

00:10:28,620 --> 00:10:32,910
call and this will come up a few times

00:10:30,270 --> 00:10:34,460
in this talk but this slide is basically

00:10:32,910 --> 00:10:38,400
what i call the application lifecycle

00:10:34,460 --> 00:10:39,660
and every single application follows

00:10:38,400 --> 00:10:41,790
this life cycle it doesn't matter if

00:10:39,660 --> 00:10:43,860
it's going to Heroku it doesn't matter

00:10:41,790 --> 00:10:46,770
if it's going to a windows computer as a

00:10:43,860 --> 00:10:50,250
desktop thing everything has to hit

00:10:46,770 --> 00:10:54,660
these points usually at some point yeah

00:10:50,250 --> 00:10:55,920
this so yeah if it's Heroku for example

00:10:54,660 --> 00:10:57,960
it just gets rid of maintenance and

00:10:55,920 --> 00:10:59,850
deployment Heroku just chooses to

00:10:57,960 --> 00:11:02,250
control those for you and you still have

00:10:59,850 --> 00:11:03,240
development problems but if you're

00:11:02,250 --> 00:11:06,570
running your own servers you have all

00:11:03,240 --> 00:11:09,330
these problems and so on and so this

00:11:06,570 --> 00:11:11,160
leads to DevOps finally and there's tons

00:11:09,330 --> 00:11:15,720
of talks on dev ops and this isn't a

00:11:11,160 --> 00:11:17,760
talk on what is DevOps not but every

00:11:15,720 --> 00:11:19,380
talk will mention that DevOps is mostly

00:11:17,760 --> 00:11:21,870
a cultural thing and that's probably

00:11:19,380 --> 00:11:23,400
true but I'm mostly on the technical

00:11:21,870 --> 00:11:25,680
side so I'm going to only talk about the

00:11:23,400 --> 00:11:26,310
technical things so what I say here

00:11:25,680 --> 00:11:27,450
don't ignore

00:11:26,310 --> 00:11:29,100
the fact that there's some cultural

00:11:27,450 --> 00:11:32,730
component that I'm not even going to

00:11:29,100 --> 00:11:34,590
talk about but on the pragmatic goal of

00:11:32,730 --> 00:11:37,500
DevOps like the actual goal of it no

00:11:34,590 --> 00:11:39,180
matter what it is is just to make that

00:11:37,500 --> 00:11:41,520
application lifecycle I talked about

00:11:39,180 --> 00:11:42,779
more efficient people could say a lot of

00:11:41,520 --> 00:11:44,339
things it's about people being happier

00:11:42,779 --> 00:11:47,700
it's about people working together it's

00:11:44,339 --> 00:11:51,000
about all the stuff it the reason DevOps

00:11:47,700 --> 00:11:52,260
is popular or works is because it makes

00:11:51,000 --> 00:11:53,940
developers happier because they get

00:11:52,260 --> 00:11:56,640
their changes out faster it makes

00:11:53,940 --> 00:11:58,560
obstacle happier because they feel safer

00:11:56,640 --> 00:11:59,730
doing that sort of thing and they're

00:11:58,560 --> 00:12:01,260
talking to people and it makes business

00:11:59,730 --> 00:12:02,430
people happier because they think if

00:12:01,260 --> 00:12:04,710
they're deploying faster that they'll

00:12:02,430 --> 00:12:07,410
make money faster so because everyone's

00:12:04,710 --> 00:12:10,140
happier DevOps is this huge buzz word

00:12:07,410 --> 00:12:13,410
and really the goal is just to make that

00:12:10,140 --> 00:12:16,890
thing more efficient and it's a good

00:12:13,410 --> 00:12:18,810
thing so how does that maps make or how

00:12:16,890 --> 00:12:21,360
do you make something more efficient and

00:12:18,810 --> 00:12:23,040
the answer is tools of course and that's

00:12:21,360 --> 00:12:24,690
kind of a very human answer I mean

00:12:23,040 --> 00:12:27,240
that's what people do is they do

00:12:24,690 --> 00:12:29,700
something okay but it kind of get away

00:12:27,240 --> 00:12:31,320
and then they learn how to make a tool

00:12:29,700 --> 00:12:33,390
to do it a little better and then they

00:12:31,320 --> 00:12:36,780
improve the tools to eventually we

00:12:33,390 --> 00:12:39,089
master it so these tools we make for

00:12:36,780 --> 00:12:42,390
DevOps are real important so what they

00:12:39,089 --> 00:12:43,920
do what tools do is reduce human error

00:12:42,390 --> 00:12:45,150
because we're not perfect and no matter

00:12:43,920 --> 00:12:47,460
what we do we're going to make a mistake

00:12:45,150 --> 00:12:50,820
at some point so remove the human

00:12:47,460 --> 00:12:53,010
element and make it consistent which

00:12:50,820 --> 00:12:55,470
consistency repeatability so you're able

00:12:53,010 --> 00:12:57,030
to do things over and over and the most

00:12:55,470 --> 00:12:59,460
important thing though that a tool does

00:12:57,030 --> 00:13:02,490
is this codification of knowledge and

00:12:59,460 --> 00:13:04,740
basically what that means is that when

00:13:02,490 --> 00:13:06,510
you build a tool you actually remove the

00:13:04,740 --> 00:13:10,770
need for people to know how that tool

00:13:06,510 --> 00:13:12,390
works so for example at there's a the

00:13:10,770 --> 00:13:13,950
first talk today was about a bunch of

00:13:12,390 --> 00:13:19,680
old computers that were older than me

00:13:13,950 --> 00:13:22,110
but as an example when it way back when

00:13:19,680 --> 00:13:23,700
ever to know how to program you had to

00:13:22,110 --> 00:13:25,230
know you know assembly language you had

00:13:23,700 --> 00:13:27,720
to really know how computers worked in

00:13:25,230 --> 00:13:29,700
terms of registers and cycles and clock

00:13:27,720 --> 00:13:32,160
speeds and how fast each instruction

00:13:29,700 --> 00:13:33,839
took and memory alignment and all SF yes

00:13:32,160 --> 00:13:35,850
know all that to MIT write a program and

00:13:33,839 --> 00:13:38,010
then compilers came out which were a

00:13:35,850 --> 00:13:40,140
tool and compilers got better to the

00:13:38,010 --> 00:13:42,180
point where people

00:13:40,140 --> 00:13:44,190
Ruby Python like you don't even optimize

00:13:42,180 --> 00:13:45,390
cache lines anymore like most people

00:13:44,190 --> 00:13:47,220
don't even think about this or think

00:13:45,390 --> 00:13:49,380
because you don't have to because it

00:13:47,220 --> 00:13:51,540
works well in it it's the same way with

00:13:49,380 --> 00:13:53,520
any tool so the idea of tools you build

00:13:51,540 --> 00:13:54,990
something and people don't need to learn

00:13:53,520 --> 00:13:57,600
what's underneath it because it'll just

00:13:54,990 --> 00:13:59,070
work and that's actually it's not a bad

00:13:57,600 --> 00:14:00,630
thing it doesn't make people Dumber it

00:13:59,070 --> 00:14:02,460
actually makes us smarter because then

00:14:00,630 --> 00:14:03,750
those people are able to focus their

00:14:02,460 --> 00:14:06,120
mental effort and all their knowledge

00:14:03,750 --> 00:14:07,800
gaining efforts on making things better

00:14:06,120 --> 00:14:09,300
above it and then suddenly have another

00:14:07,800 --> 00:14:14,340
tool and you get rid of more knowledge

00:14:09,300 --> 00:14:15,480
so tools codify knowledge and so that's

00:14:14,340 --> 00:14:16,830
two things you don't need to learn it

00:14:15,480 --> 00:14:19,170
anymore but if you do need to learn it

00:14:16,830 --> 00:14:21,450
it's in code which is the most verbose

00:14:19,170 --> 00:14:26,820
thing ever so you can know exactly how

00:14:21,450 --> 00:14:29,640
it works so come back to this DevOps

00:14:26,820 --> 00:14:33,540
tool is going to solve one or more of

00:14:29,640 --> 00:14:35,760
these bullet points and span one or more

00:14:33,540 --> 00:14:37,440
of these columns and so if you take a

00:14:35,760 --> 00:14:39,090
look at any tool they're usually

00:14:37,440 --> 00:14:41,220
specialized to one thing like there's a

00:14:39,090 --> 00:14:45,120
lot of monitoring tools there's some

00:14:41,220 --> 00:14:48,570
deployment tools there's development

00:14:45,120 --> 00:14:51,150
tools and the whole idea is that you

00:14:48,570 --> 00:14:54,090
need more than a hammer to build a house

00:14:51,150 --> 00:14:56,250
so if each of those tools is a hammer

00:14:54,090 --> 00:14:58,170
that could hammer a nail you can't build

00:14:56,250 --> 00:15:00,120
a whole house with just a hammer a nail

00:14:58,170 --> 00:15:04,170
like maybe someone can i'm sure someone

00:15:00,120 --> 00:15:06,450
can but most people can so you need to

00:15:04,170 --> 00:15:10,590
use these tools together in order to

00:15:06,450 --> 00:15:13,500
best optimize that whole cycle and it is

00:15:10,590 --> 00:15:16,020
true that sometimes the tools are

00:15:13,500 --> 00:15:17,250
ambiguous sometimes you're not quite

00:15:16,020 --> 00:15:20,090
sure where they fit in there because

00:15:17,250 --> 00:15:22,200
they seem to solve multiple problems and

00:15:20,090 --> 00:15:23,940
that's actually okay I mean that's

00:15:22,200 --> 00:15:26,370
totally okay and there are a lot of

00:15:23,940 --> 00:15:28,710
tools that like a Swiss Army knife do a

00:15:26,370 --> 00:15:33,060
lot of things pretty well so you just

00:15:28,710 --> 00:15:35,670
gotta know that alright so now let's get

00:15:33,060 --> 00:15:37,110
more technical I went through that

00:15:35,670 --> 00:15:38,610
really fast so I'm really happy about

00:15:37,110 --> 00:15:41,790
because the technical stuff takes longer

00:15:38,610 --> 00:15:43,650
and let's just do a tour of tools but

00:15:41,790 --> 00:15:46,260
it's that's not really true because the

00:15:43,650 --> 00:15:50,010
tour of tools tour of tools is really

00:15:46,260 --> 00:15:52,230
going to be a tour of my tools um but I

00:15:50,010 --> 00:15:53,880
try to mention some other tools where

00:15:52,230 --> 00:15:57,360
possible i'm not trying to pretend that

00:15:53,880 --> 00:15:59,100
only mine exists so we're going to go in

00:15:57,360 --> 00:16:02,070
order in this thing from left to right

00:15:59,100 --> 00:16:04,110
so we'll start with development just

00:16:02,070 --> 00:16:06,090
because it makes things easy and I think

00:16:04,110 --> 00:16:08,460
most of you probably know development is

00:16:06,090 --> 00:16:12,210
pretty much synonymous with me for

00:16:08,460 --> 00:16:13,350
vagrant if you don't know a vagrant is

00:16:12,210 --> 00:16:16,020
you could learn about at this website

00:16:13,350 --> 00:16:19,200
but I'm going to pretty much skip all

00:16:16,020 --> 00:16:21,150
the what is vagrant thing because it's

00:16:19,200 --> 00:16:23,690
about it's over four years old now and I

00:16:21,150 --> 00:16:27,420
think I've graduated from that talk so

00:16:23,690 --> 00:16:29,400
the basic idea though of vagrant the

00:16:27,420 --> 00:16:31,950
general idea is that when you integrate

00:16:29,400 --> 00:16:33,450
vagrant into your environment anyone in

00:16:31,950 --> 00:16:35,550
your company is able to clone out any

00:16:33,450 --> 00:16:38,730
project doesn't matter if it's a PHP

00:16:35,550 --> 00:16:40,170
project a dotnet project anything you

00:16:38,730 --> 00:16:42,450
know like any sort of project any

00:16:40,170 --> 00:16:45,210
technology run vagrant up and then have

00:16:42,450 --> 00:16:48,960
all the tools they need to work that's

00:16:45,210 --> 00:16:51,540
the idea and that works pretty well so

00:16:48,960 --> 00:16:53,010
going back to those four things you want

00:16:51,540 --> 00:16:55,820
in the development environment the four

00:16:53,010 --> 00:16:59,850
traits the way vagrant hits those is

00:16:55,820 --> 00:17:03,780
first being readily available vagrant

00:16:59,850 --> 00:17:08,520
works with virtualbox VMware and as of

00:17:03,780 --> 00:17:10,050
last night hyper-v yeah so but because

00:17:08,520 --> 00:17:14,069
it works with these local virtualization

00:17:10,050 --> 00:17:16,680
tools virtualbox at VMware which run on

00:17:14,069 --> 00:17:19,319
any platform linux mac and windows and

00:17:16,680 --> 00:17:21,060
windows hyper-v on windows but because

00:17:19,319 --> 00:17:22,560
it's virtualization it's available on

00:17:21,060 --> 00:17:26,370
any laptop that has the software

00:17:22,560 --> 00:17:29,220
installed which is pretty available but

00:17:26,370 --> 00:17:30,780
also more and more vagrants starting to

00:17:29,220 --> 00:17:34,070
work better and better with cloud

00:17:30,780 --> 00:17:37,620
services as well so AWS digitalocean

00:17:34,070 --> 00:17:41,550
OpenStack some other stuff Asher once

00:17:37,620 --> 00:17:43,260
Microsoft signs off legally but yeah and

00:17:41,550 --> 00:17:45,390
this is readily available that you need

00:17:43,260 --> 00:17:48,840
an internet connection but then it's

00:17:45,390 --> 00:17:50,070
accessible as long as you have won the

00:17:48,840 --> 00:17:52,080
second sort of feature was you want to

00:17:50,070 --> 00:17:54,150
make and be able to see changes so the

00:17:52,080 --> 00:17:55,800
way vagrant does this is it separates

00:17:54,150 --> 00:17:57,840
the concept of the host machine which is

00:17:55,800 --> 00:17:59,250
the machine running vagrant and the

00:17:57,840 --> 00:18:00,750
guest machine which is the machine

00:17:59,250 --> 00:18:03,240
managed by vagrant and that might be a

00:18:00,750 --> 00:18:05,580
virtual machine or it might be like AWS

00:18:03,240 --> 00:18:07,230
instance but those are the two terms we

00:18:05,580 --> 00:18:10,350
use host and guest

00:18:07,230 --> 00:18:12,570
and vagrant uses some technology to

00:18:10,350 --> 00:18:14,340
create a sink that's usually

00:18:12,570 --> 00:18:15,690
bi-directional but a sync between the

00:18:14,340 --> 00:18:17,010
two machines and it does this

00:18:15,690 --> 00:18:19,350
automatically so you don't have to like

00:18:17,010 --> 00:18:22,049
tell it which one you want usually it'll

00:18:19,350 --> 00:18:23,970
it'll choose what it could do so it

00:18:22,049 --> 00:18:27,120
tries virtual machine shared folders

00:18:23,970 --> 00:18:30,450
like virtual ox4 VMware's NFS if you're

00:18:27,120 --> 00:18:32,790
on a linux computer SMB if you're on

00:18:30,450 --> 00:18:35,100
Windows it'll actually is SMB and then

00:18:32,790 --> 00:18:40,230
our sink if you must usually like cloud

00:18:35,100 --> 00:18:41,880
environments and actually this is what

00:18:40,230 --> 00:18:43,770
allows you this is what's really

00:18:41,880 --> 00:18:45,770
important what allows vagrant to get

00:18:43,770 --> 00:18:48,270
close to that code savory load cycle

00:18:45,770 --> 00:18:49,860
because you still code on your machine

00:18:48,270 --> 00:18:52,650
using whatever ide editor you're

00:18:49,860 --> 00:18:54,630
comfortable with you save it appears

00:18:52,650 --> 00:18:57,000
reasonably fast like definitely less

00:18:54,630 --> 00:19:00,059
than a second by usually milliseconds to

00:18:57,000 --> 00:19:01,320
the guest machine and then it picks up

00:19:00,059 --> 00:19:06,110
the changes and you could hopefully

00:19:01,320 --> 00:19:09,419
reload and see them as for consistency

00:19:06,110 --> 00:19:11,549
vagrant works equally well on windows

00:19:09,419 --> 00:19:15,960
mac and linux so this is really nice

00:19:11,549 --> 00:19:17,429
because companies don't have to enforce

00:19:15,960 --> 00:19:19,860
employees anymore to use a certain

00:19:17,429 --> 00:19:22,470
operating system as their work operating

00:19:19,860 --> 00:19:24,270
system so you don't need to join a

00:19:22,470 --> 00:19:27,120
company and get a mac handed to you and

00:19:24,270 --> 00:19:28,679
have to use it linux people are usually

00:19:27,120 --> 00:19:30,929
the people who are really religious

00:19:28,679 --> 00:19:32,790
about like not touching anything else so

00:19:30,929 --> 00:19:35,070
now you can make them pretty happy by

00:19:32,790 --> 00:19:37,020
having them run virtual machines with

00:19:35,070 --> 00:19:39,210
anything else underneath but there's

00:19:37,020 --> 00:19:41,790
also some people that are surprisingly

00:19:39,210 --> 00:19:43,470
good at windows which is rare so instead

00:19:41,790 --> 00:19:45,299
of forcing them to learn mac which

00:19:43,470 --> 00:19:49,860
they'll be pretty slow at you could just

00:19:45,299 --> 00:19:51,210
let them keep using windows any why your

00:19:49,860 --> 00:19:54,179
environment shareable so these are

00:19:51,210 --> 00:19:55,559
actually new features that i kind of

00:19:54,179 --> 00:19:59,400
announced or blogged about or whatever

00:19:55,559 --> 00:20:00,900
last week but the next version vagrant

00:19:59,400 --> 00:20:03,030
has these and it's called vagrant share

00:20:00,900 --> 00:20:05,100
and bear connect and these make your

00:20:03,030 --> 00:20:07,230
vagrant environment shareable so you

00:20:05,100 --> 00:20:08,700
could run bigger share at any point you

00:20:07,230 --> 00:20:12,299
have a virtual machine and it'll

00:20:08,700 --> 00:20:14,790
actually create a name URL thing that

00:20:12,299 --> 00:20:16,559
makes your virtual machine addressable

00:20:14,790 --> 00:20:19,740
from any computer in the world that's

00:20:16,559 --> 00:20:20,970
connected to the Internet so as an

00:20:19,740 --> 00:20:22,980
example

00:20:20,970 --> 00:20:25,919
if you go to this on your phone or your

00:20:22,980 --> 00:20:27,330
computer or whatever right now it should

00:20:25,919 --> 00:20:29,970
load a webpage and that web page is

00:20:27,330 --> 00:20:32,580
actually being served by by virtual

00:20:29,970 --> 00:20:35,190
locks on my computer right now that's

00:20:32,580 --> 00:20:38,400
assuming that my computer Nets sleep or

00:20:35,190 --> 00:20:39,570
something but I think it worked and then

00:20:38,400 --> 00:20:42,120
the flip side there's a new command

00:20:39,570 --> 00:20:44,250
called vagrant connect and if you did if

00:20:42,120 --> 00:20:46,710
you had the new version of vagrant which

00:20:44,250 --> 00:20:48,809
hopefully you don't because this would

00:20:46,710 --> 00:20:50,730
be disruptive you could run bigger

00:20:48,809 --> 00:20:53,370
connect and then this thing and it'll

00:20:50,730 --> 00:20:55,530
actually give you an IP that acts like

00:20:53,370 --> 00:20:58,049
it's on your local network but every

00:20:55,530 --> 00:21:00,299
port maps of that virtual machine so

00:20:58,049 --> 00:21:03,210
that would be fun but hopefully no one's

00:21:00,299 --> 00:21:07,320
like SS a Qing into my computer right

00:21:03,210 --> 00:21:11,010
now yeah just let you try that if you

00:21:07,320 --> 00:21:12,929
want and all the details about this

00:21:11,010 --> 00:21:18,059
thing are online right now but not

00:21:12,929 --> 00:21:19,860
released soon so the the idea behind

00:21:18,059 --> 00:21:23,760
vagrant though is that it's a technology

00:21:19,860 --> 00:21:24,990
agnostic development environment creates

00:21:23,760 --> 00:21:25,799
technology agnostic development

00:21:24,990 --> 00:21:29,580
environments they share a common

00:21:25,799 --> 00:21:31,230
workflow so vagrants goal or it's not in

00:21:29,580 --> 00:21:32,760
vagrants best interest to tie you into

00:21:31,230 --> 00:21:36,570
any sort of technology whether again

00:21:32,760 --> 00:21:39,240
like it's PHP or java or Ruby or what

00:21:36,570 --> 00:21:41,669
have you vagrants real benefit is that

00:21:39,240 --> 00:21:43,679
no matter what technology it is it's big

00:21:41,669 --> 00:21:45,179
R enough to start it vagrant a stage to

00:21:43,679 --> 00:21:49,230
access it bigger and destroy to end it

00:21:45,179 --> 00:21:50,940
like it's the common workflow so we do

00:21:49,230 --> 00:21:52,980
our best to support any sort of

00:21:50,940 --> 00:21:54,510
technologies that happen and there's a

00:21:52,980 --> 00:21:56,880
docker talk happening right now

00:21:54,510 --> 00:21:59,400
somewhere and for example vagran right

00:21:56,880 --> 00:22:00,870
now supports docker reasonably well and

00:21:59,400 --> 00:22:05,640
we have other stuff coming that makes it

00:22:00,870 --> 00:22:08,100
support it really well but if you don't

00:22:05,640 --> 00:22:09,600
want to use containers and they're using

00:22:08,100 --> 00:22:15,780
like windows for example as a virtual

00:22:09,600 --> 00:22:18,330
machine that works too yet this and

00:22:15,780 --> 00:22:20,520
vagrant today is pretty popular so i

00:22:18,330 --> 00:22:22,169
have this slide I probably shouldn't

00:22:20,520 --> 00:22:24,659
even cluded it the slides actually from

00:22:22,169 --> 00:22:25,980
two years ago so I have enough data in

00:22:24,659 --> 00:22:29,669
the company there's a lot more now that

00:22:25,980 --> 00:22:32,159
use it usually when people ask me they

00:22:29,669 --> 00:22:34,230
asked me to is using vagrant and I tell

00:22:32,159 --> 00:22:34,890
them to list their five favorite

00:22:34,230 --> 00:22:36,270
websites

00:22:34,890 --> 00:22:39,120
that aren't obscure like aren't really

00:22:36,270 --> 00:22:40,890
obscure and in general the five I could

00:22:39,120 --> 00:22:44,730
say three are using it which is pretty

00:22:40,890 --> 00:22:47,100
cool nowadays in general so that's

00:22:44,730 --> 00:22:49,260
development there's really no other

00:22:47,100 --> 00:22:50,730
option for development right now I mean

00:22:49,260 --> 00:22:53,610
the other option is install things on

00:22:50,730 --> 00:22:56,760
your own computer MAMP zamp I guess if

00:22:53,610 --> 00:23:00,270
you're in the PHP stack and that's kind

00:22:56,760 --> 00:23:01,590
of it so vagrants biggest competition is

00:23:00,270 --> 00:23:02,850
trying to convince people to not install

00:23:01,590 --> 00:23:07,680
things on their own computer anymore

00:23:02,850 --> 00:23:09,450
because it's not too repeatable and then

00:23:07,680 --> 00:23:10,830
now let's just head on to the deployment

00:23:09,450 --> 00:23:12,600
side so like I said the ployment really

00:23:10,830 --> 00:23:15,510
complicated so I'm just going to cover

00:23:12,600 --> 00:23:17,040
one aspect of it and I'm to do that I'm

00:23:15,510 --> 00:23:18,480
going to talk about packer and explain

00:23:17,040 --> 00:23:22,650
what Packers which is a pretty ops

00:23:18,480 --> 00:23:25,530
specific thing but deployments really

00:23:22,650 --> 00:23:27,930
complicated so it has yeah here's like

00:23:25,530 --> 00:23:31,560
six things that are in the deployment

00:23:27,930 --> 00:23:32,760
space and if if someone locked me in a

00:23:31,560 --> 00:23:37,200
room and made me i could probably list

00:23:32,760 --> 00:23:38,580
50 but six will work so and and again i

00:23:37,200 --> 00:23:40,860
said there's two categories so they're

00:23:38,580 --> 00:23:42,210
starting and configuring servers and

00:23:40,860 --> 00:23:43,950
then there's like deploying and running

00:23:42,210 --> 00:23:46,170
software and you can see that there's

00:23:43,950 --> 00:23:50,790
like overlap and those two things so

00:23:46,170 --> 00:23:52,410
it's really complicated but i'm going to

00:23:50,790 --> 00:23:54,960
talk about packer which is in these

00:23:52,410 --> 00:23:58,830
start configure servers part of

00:23:54,960 --> 00:24:00,330
deploying deployment so what packer does

00:23:58,830 --> 00:24:02,670
and again this is really ops heavy sing

00:24:00,330 --> 00:24:04,620
so i think you guys might not really

00:24:02,670 --> 00:24:08,610
care as developers but it's interesting

00:24:04,620 --> 00:24:11,610
so what packer does is optimizes the

00:24:08,610 --> 00:24:16,860
slow parts of setting up a server by pre

00:24:11,610 --> 00:24:18,780
building in image for it and images kind

00:24:16,860 --> 00:24:21,300
of have this negative stigma associated

00:24:18,780 --> 00:24:24,240
with them it's kind of starting to go

00:24:21,300 --> 00:24:26,220
away which is really nice but DevOps

00:24:24,240 --> 00:24:28,770
historically has been against images so

00:24:26,220 --> 00:24:30,720
DevOps the DevOps way of doing things

00:24:28,770 --> 00:24:33,780
for the past like five years has been to

00:24:30,720 --> 00:24:35,670
just install a bun to like a fresh

00:24:33,780 --> 00:24:37,800
install of ubuntu then install sheffer

00:24:35,670 --> 00:24:39,090
puppet on top of it and do that for

00:24:37,800 --> 00:24:40,800
every server and then let chef and

00:24:39,090 --> 00:24:44,070
puppet mold it into what it's supposed

00:24:40,800 --> 00:24:45,180
to be and that's what they've said but

00:24:44,070 --> 00:24:49,460
it's important to understand like why

00:24:45,180 --> 00:24:49,460
they said this so

00:24:49,490 --> 00:24:54,059
historically if you go back like 10

00:24:51,390 --> 00:24:57,570
years images were pretty much the only

00:24:54,059 --> 00:25:00,690
way that that servers were deployed in a

00:24:57,570 --> 00:25:02,100
in a large environment if most small

00:25:00,690 --> 00:25:04,679
websites just managed like one server

00:25:02,100 --> 00:25:05,730
and kept it working but if you had a

00:25:04,679 --> 00:25:07,559
large environment images were

00:25:05,730 --> 00:25:09,030
professional only way it was done and

00:25:07,559 --> 00:25:10,650
the way that would work is you would

00:25:09,030 --> 00:25:13,770
have the ops people somewhere in some

00:25:10,650 --> 00:25:16,400
dark corner of the office and they would

00:25:13,770 --> 00:25:19,230
do things and then they would stamp off

00:25:16,400 --> 00:25:21,179
the server image for like the business

00:25:19,230 --> 00:25:23,400
quarter and they would call it a golden

00:25:21,179 --> 00:25:25,950
image because that one is golden it's

00:25:23,400 --> 00:25:27,540
not changing because it's too risky and

00:25:25,950 --> 00:25:30,030
they would lock it off usually for a

00:25:27,540 --> 00:25:31,110
business quarter because that's what you

00:25:30,030 --> 00:25:33,120
want to make sure you know things are

00:25:31,110 --> 00:25:35,309
working for the whole the whole quarter

00:25:33,120 --> 00:25:38,730
and this is really frustrating for

00:25:35,309 --> 00:25:40,110
everyone so office people can't get much

00:25:38,730 --> 00:25:41,309
improvements into the server because

00:25:40,110 --> 00:25:44,309
they're not going to change it for at

00:25:41,309 --> 00:25:46,020
least three months developers obviously

00:25:44,309 --> 00:25:48,299
they're deploying during this time once

00:25:46,020 --> 00:25:50,820
in a while but they can't get big

00:25:48,299 --> 00:25:51,840
changes in because it might have new

00:25:50,820 --> 00:25:53,309
dependencies and might need

00:25:51,840 --> 00:25:55,919
configuration changes and the office

00:25:53,309 --> 00:25:58,380
people won't do that for you so everyone

00:25:55,919 --> 00:26:01,230
gets a little bit frustrated and so it

00:25:58,380 --> 00:26:03,150
was easy with as modern configuration

00:26:01,230 --> 00:26:05,520
management came into play like two

00:26:03,150 --> 00:26:09,660
thousand six ish I became easy to simply

00:26:05,520 --> 00:26:11,700
pretend that images didn't exist so that

00:26:09,660 --> 00:26:13,169
made sense so what ended up happening is

00:26:11,700 --> 00:26:14,790
or what ended up happening at these

00:26:13,169 --> 00:26:16,320
organizations was you would have these

00:26:14,790 --> 00:26:17,940
shadow ops people that started using

00:26:16,320 --> 00:26:20,669
this sort of stuff that threw away

00:26:17,940 --> 00:26:22,590
images and eventually took over because

00:26:20,669 --> 00:26:26,190
it allowed people to iterate much faster

00:26:22,590 --> 00:26:27,990
and it was a better option honestly but

00:26:26,190 --> 00:26:29,760
the problem is by doing that we also

00:26:27,990 --> 00:26:32,010
threw away all the benefits that came

00:26:29,760 --> 00:26:33,030
with server images there are a lot of

00:26:32,010 --> 00:26:35,190
negatives but there were a lot of

00:26:33,030 --> 00:26:38,190
benefits and we lost all everything by

00:26:35,190 --> 00:26:39,840
giving it up and so Packers goal is

00:26:38,190 --> 00:26:41,669
really to bring back the benefits while

00:26:39,840 --> 00:26:43,950
not throwing away the modern changes so

00:26:41,669 --> 00:26:46,740
that images don't become that same

00:26:43,950 --> 00:26:48,929
problem anymore some of the benefits

00:26:46,740 --> 00:26:51,390
though are superfast infrastructure

00:26:48,929 --> 00:26:55,110
deployment so I'm sure most of you have

00:26:51,390 --> 00:26:56,880
either done a vagrant up or a or run

00:26:55,110 --> 00:26:59,909
chef or puppet probably to set up like

00:26:56,880 --> 00:27:01,260
an AWS instance where pretty simple

00:26:59,909 --> 00:27:02,269
maybe just deploying a rails app or

00:27:01,260 --> 00:27:05,389
something but

00:27:02,269 --> 00:27:07,519
running that chef Ron maybe took 10 or

00:27:05,389 --> 00:27:11,749
30 minutes just it just so you got a

00:27:07,519 --> 00:27:13,669
server and with images it's just as fast

00:27:11,749 --> 00:27:16,249
as Amazon could boot it pretty much so

00:27:13,669 --> 00:27:18,709
everything deploys in like minutes so

00:27:16,249 --> 00:27:20,959
all like the for example the vagrant

00:27:18,709 --> 00:27:24,259
share infrastructure that's running that

00:27:20,959 --> 00:27:25,820
sort of thing kind of just auto scales

00:27:24,259 --> 00:27:29,629
out in minutes because they're all

00:27:25,820 --> 00:27:30,979
image-based there's and and more

00:27:29,629 --> 00:27:34,369
importantly I would say as stability and

00:27:30,979 --> 00:27:36,769
testability so I think I have slides

00:27:34,369 --> 00:27:38,929
yeah so an analogy I make for stability

00:27:36,769 --> 00:27:40,999
in testability of images for developers

00:27:38,929 --> 00:27:42,409
is that ops without machine images is

00:27:40,999 --> 00:27:46,759
kind of like applications without

00:27:42,409 --> 00:27:48,229
binaries so with applications you have a

00:27:46,759 --> 00:27:50,299
source code you compile it becomes a

00:27:48,229 --> 00:27:52,399
binary and the source code usually

00:27:50,299 --> 00:27:55,459
depends on a bunch of libraries and if

00:27:52,399 --> 00:27:58,009
one of those library changes then the

00:27:55,459 --> 00:27:59,869
compile usually fails as well but it's

00:27:58,009 --> 00:28:03,109
usually not an issue because once you

00:27:59,869 --> 00:28:05,239
have the binary it's all linked up so it

00:28:03,109 --> 00:28:07,700
just keeps working and servers never had

00:28:05,239 --> 00:28:11,539
this concept or they did but then they

00:28:07,700 --> 00:28:13,399
lost this concept so without Packer

00:28:11,539 --> 00:28:14,929
without images you'd have a new server

00:28:13,399 --> 00:28:17,089
you run chef or puppet and then the

00:28:14,929 --> 00:28:18,259
server is ready and chef and puppet

00:28:17,089 --> 00:28:20,289
depend on a bunch of things like

00:28:18,259 --> 00:28:24,200
packages existing the network being

00:28:20,289 --> 00:28:26,719
really available and any changes that

00:28:24,200 --> 00:28:30,950
Chef or puppet code itself and if any of

00:28:26,719 --> 00:28:34,639
these changes it usually results in the

00:28:30,950 --> 00:28:35,719
server setup totally failing and so by

00:28:34,639 --> 00:28:37,309
building machine image you're kind of

00:28:35,719 --> 00:28:39,469
protecting yourself against this in a

00:28:37,309 --> 00:28:42,379
lot of ways for the most part when a

00:28:39,469 --> 00:28:44,179
machine image things work machine images

00:28:42,379 --> 00:28:46,729
are usually more reliable with less

00:28:44,179 --> 00:28:48,049
reliable networks for example and they

00:28:46,729 --> 00:28:51,200
already have all their packages and

00:28:48,049 --> 00:28:53,269
everything installed so the part that's

00:28:51,200 --> 00:28:56,269
slow about chef and puppet is really

00:28:53,269 --> 00:28:58,940
compiling software bringing down

00:28:56,269 --> 00:29:01,909
packages and doing this over and over

00:28:58,940 --> 00:29:03,799
again like if if all this was done for

00:29:01,909 --> 00:29:06,320
chef run or a puppet run it would be

00:29:03,799 --> 00:29:08,659
really fast chef and puppet themselves

00:29:06,320 --> 00:29:11,029
aren't inherently that slow it's really

00:29:08,659 --> 00:29:13,429
what they're doing it's much slower so

00:29:11,029 --> 00:29:15,229
what packer does is try to get rid of

00:29:13,429 --> 00:29:16,050
these common things that happen on every

00:29:15,229 --> 00:29:20,400
single run

00:29:16,050 --> 00:29:23,490
and just do it for you so again without

00:29:20,400 --> 00:29:26,310
Packer you get this sort of thing and

00:29:23,490 --> 00:29:28,350
then we're Packer it's quite simple and

00:29:26,310 --> 00:29:31,380
I already talked about this and I want

00:29:28,350 --> 00:29:33,090
to go faster so the basic way it works

00:29:31,380 --> 00:29:34,800
though with Packers ops people work on

00:29:33,090 --> 00:29:37,590
something they were on a packer bill

00:29:34,800 --> 00:29:39,330
this sets up users install software and

00:29:37,590 --> 00:29:41,190
configures it and then they have an

00:29:39,330 --> 00:29:42,750
image the only difference between

00:29:41,190 --> 00:29:44,340
traditional ops environments is you

00:29:42,750 --> 00:29:46,710
can't do any sort of orchestration at

00:29:44,340 --> 00:29:48,510
this level so the best example that uses

00:29:46,710 --> 00:29:50,850
if you're building a load balancer the

00:29:48,510 --> 00:29:53,040
load balancer this point can't find the

00:29:50,850 --> 00:29:54,300
web servers because that load balancer

00:29:53,040 --> 00:29:55,530
image might be launched three months

00:29:54,300 --> 00:29:57,810
from now and all the web servers might

00:29:55,530 --> 00:30:00,120
be different so it can't do that sort of

00:29:57,810 --> 00:30:01,440
thing but I could do everything else and

00:30:00,120 --> 00:30:04,500
that sort of thing is usually much much

00:30:01,440 --> 00:30:05,790
faster anyway so you have a couple

00:30:04,500 --> 00:30:07,170
options that you can still run sheffer

00:30:05,790 --> 00:30:09,390
puppet again after the image is already

00:30:07,170 --> 00:30:12,360
built and it'll be a much faster run or

00:30:09,390 --> 00:30:14,670
you could use something like surf which

00:30:12,360 --> 00:30:17,610
is part of the reason we built it and

00:30:14,670 --> 00:30:19,560
I'll talk about that next and again

00:30:17,610 --> 00:30:23,580
puppet like vagrant is a technology

00:30:19,560 --> 00:30:26,520
agnostic tool so Packer or Packer like

00:30:23,580 --> 00:30:28,650
vagrant so Packer integrates with as

00:30:26,520 --> 00:30:30,240
many people as it can to build images so

00:30:28,650 --> 00:30:33,030
here's the things that could build

00:30:30,240 --> 00:30:34,530
images for already and they're more than

00:30:33,030 --> 00:30:37,680
that OpenStack and some other things in

00:30:34,530 --> 00:30:40,800
there and to install software it could

00:30:37,680 --> 00:30:43,830
use these things so it's interest is its

00:30:40,800 --> 00:30:45,810
interest is in building images as best

00:30:43,830 --> 00:30:49,800
as it can for you without again imposing

00:30:45,810 --> 00:30:52,260
you on a technology and it's doing super

00:30:49,800 --> 00:30:56,100
well I don't want to say cuz I'm on

00:30:52,260 --> 00:31:00,320
camera but big websites are using it and

00:30:56,100 --> 00:31:03,660
I'll have permission to say so okay so

00:31:00,320 --> 00:31:06,090
now the maintenance phase maintenance is

00:31:03,660 --> 00:31:07,740
the most convoluted so there's a lot of

00:31:06,090 --> 00:31:11,640
things and maintenance and again I think

00:31:07,740 --> 00:31:13,920
this is nine and I cry 100 of these ones

00:31:11,640 --> 00:31:16,080
but there's a lot of things doing a lot

00:31:13,920 --> 00:31:17,820
of for a lot of different purposes but

00:31:16,080 --> 00:31:19,680
they all have a really common goal if

00:31:17,820 --> 00:31:22,880
you look at these the goal of any

00:31:19,680 --> 00:31:26,280
monitoring or any what else is in here

00:31:22,880 --> 00:31:29,100
deployment or container solution or

00:31:26,280 --> 00:31:29,680
anything is really to allow you to

00:31:29,100 --> 00:31:32,140
change the

00:31:29,680 --> 00:31:34,390
things with with a resiliency to failure

00:31:32,140 --> 00:31:35,770
so being able to handle if something

00:31:34,390 --> 00:31:37,660
goes wrong or anticipate something's

00:31:35,770 --> 00:31:40,330
going wrong it's all just about changing

00:31:37,660 --> 00:31:43,270
things so the one thing I want to talk

00:31:40,330 --> 00:31:46,570
about for this is surf because surf

00:31:43,270 --> 00:31:48,370
kinda is built on the idea that you

00:31:46,570 --> 00:31:50,560
could change things and react to changes

00:31:48,370 --> 00:31:55,060
really quickly and failures really

00:31:50,560 --> 00:31:56,950
quickly without causing problems so the

00:31:55,060 --> 00:31:59,560
one sentence description of serve is

00:31:56,950 --> 00:32:02,710
this and I'll just let you read it

00:31:59,560 --> 00:32:07,330
because I say the sentence a lot and

00:32:02,710 --> 00:32:09,280
it's just a lot of words yeah it's a lot

00:32:07,330 --> 00:32:10,780
of buzz words but there I could there's

00:32:09,280 --> 00:32:11,890
evidence to back all of them but still

00:32:10,780 --> 00:32:14,410
doesn't matter because everyone who

00:32:11,890 --> 00:32:16,150
reads that just just a super confused it

00:32:14,410 --> 00:32:17,320
doesn't know what's going on so it

00:32:16,150 --> 00:32:20,050
doesn't matter how smart you are most

00:32:17,320 --> 00:32:22,900
people are really confused so the basics

00:32:20,050 --> 00:32:26,140
behind it the basic thing it does is

00:32:22,900 --> 00:32:28,240
managed membership it's all does so it

00:32:26,140 --> 00:32:33,130
tells you when something joins a cluster

00:32:28,240 --> 00:32:34,750
leaves fails and so on and it's funny

00:32:33,130 --> 00:32:38,770
because a lot of ops problems actually

00:32:34,750 --> 00:32:40,780
just boil down to membership so as an

00:32:38,770 --> 00:32:43,480
example the easiest example the most

00:32:40,780 --> 00:32:44,860
obvious example is a load balancer load

00:32:43,480 --> 00:32:48,400
balancer needs to know about web servers

00:32:44,860 --> 00:32:50,470
so for example how does the web slow

00:32:48,400 --> 00:32:53,320
down sir find out if you want to take a

00:32:50,470 --> 00:32:54,910
web server out of rotation of course the

00:32:53,320 --> 00:32:56,500
web server fails load balancers have

00:32:54,910 --> 00:32:58,180
held checks so it'll just disappear but

00:32:56,500 --> 00:33:00,100
I'm saying if you want to perform

00:32:58,180 --> 00:33:02,320
maintenance on this node and you want to

00:33:00,100 --> 00:33:05,170
gracefully remove it out you could

00:33:02,320 --> 00:33:07,300
either manually remove it out of the

00:33:05,170 --> 00:33:08,650
load balancer you could just kill it

00:33:07,300 --> 00:33:10,720
because the load balancer will figure it

00:33:08,650 --> 00:33:14,050
out but then you'll kill any connections

00:33:10,720 --> 00:33:16,000
it has or you run chef or puppet in some

00:33:14,050 --> 00:33:17,980
way but the problem is sheffer puppet

00:33:16,000 --> 00:33:20,050
usually run on like 30 minutes cycles or

00:33:17,980 --> 00:33:21,670
something they're about so in the best

00:33:20,050 --> 00:33:23,350
case it's pretty fast and then they were

00:33:21,670 --> 00:33:25,210
in the worst case you're waiting around

00:33:23,350 --> 00:33:27,520
an hour for these changes to propagate

00:33:25,210 --> 00:33:30,880
and it's not worth it you'd probably

00:33:27,520 --> 00:33:32,530
just kill it so how does this happen and

00:33:30,880 --> 00:33:34,570
on the flip side if you add a server how

00:33:32,530 --> 00:33:40,180
does the load balancer learn about this

00:33:34,570 --> 00:33:42,490
server so surf is one way to do it so

00:33:40,180 --> 00:33:43,630
the way surf works is you run an agent

00:33:42,490 --> 00:33:45,820
on every note

00:33:43,630 --> 00:33:47,770
or on the nose you care about you

00:33:45,820 --> 00:33:49,450
register handler the handler could be

00:33:47,770 --> 00:33:51,760
anything a shell can execute so I just

00:33:49,450 --> 00:33:53,080
use a shell script as an example and the

00:33:51,760 --> 00:33:55,420
handler actually does the business logic

00:33:53,080 --> 00:33:58,210
such as adding or removing a node from

00:33:55,420 --> 00:34:00,010
load balancer and surf will then invoke

00:33:58,210 --> 00:34:02,560
that handler for any sort of membership

00:34:00,010 --> 00:34:04,180
changes it detects and it detects these

00:34:02,560 --> 00:34:07,840
membership changes really really fast

00:34:04,180 --> 00:34:09,610
really fast so I'll get to the speed

00:34:07,840 --> 00:34:11,409
part later but basically when people

00:34:09,610 --> 00:34:14,409
join aleve and so on so and the load

00:34:11,409 --> 00:34:15,850
balancer example it'll be notified that

00:34:14,409 --> 00:34:17,590
a member is leaving and it could

00:34:15,850 --> 00:34:19,090
gracefully pull them out it can be

00:34:17,590 --> 00:34:20,500
notified a member just joined and it

00:34:19,090 --> 00:34:22,570
could add it to the load balancer and

00:34:20,500 --> 00:34:25,780
also failure checks to does health

00:34:22,570 --> 00:34:28,270
checks on the nodes so how does this

00:34:25,780 --> 00:34:32,919
work what does it do to do this in a

00:34:28,270 --> 00:34:35,500
novel way so surf communicates

00:34:32,919 --> 00:34:38,260
completely using a gossip based protocol

00:34:35,500 --> 00:34:41,169
so it's no master the agent runs on

00:34:38,260 --> 00:34:42,940
everything there's no central server you

00:34:41,169 --> 00:34:45,220
could kill any number of the gossip pool

00:34:42,940 --> 00:34:46,659
and it'll still be fine and for those

00:34:45,220 --> 00:34:50,590
who don't know what gossip based

00:34:46,659 --> 00:34:52,929
protocols are I the the best example and

00:34:50,590 --> 00:34:57,370
I love explaining it is zombie

00:34:52,929 --> 00:35:00,160
apocalypses so if there was a zombie

00:34:57,370 --> 00:35:02,170
apocalypse happening in linz right now

00:35:00,160 --> 00:35:04,600
we would probably find out because

00:35:02,170 --> 00:35:06,910
someone would hysterically run into this

00:35:04,600 --> 00:35:08,770
room and tell us and then our immediate

00:35:06,910 --> 00:35:11,350
reaction would probably be to tell more

00:35:08,770 --> 00:35:15,250
people by family or something calling

00:35:11,350 --> 00:35:16,360
people run and do that too and those

00:35:15,250 --> 00:35:18,250
people would tell people and so on

00:35:16,360 --> 00:35:19,930
eventually somehow really quickly I bet

00:35:18,250 --> 00:35:21,280
you really quickly the whole world would

00:35:19,930 --> 00:35:23,830
figure out Twitter and stuff Twitter's

00:35:21,280 --> 00:35:26,800
gossipy and that's the same way the

00:35:23,830 --> 00:35:28,540
computer so with a gossip protocol one

00:35:26,800 --> 00:35:30,100
server tells another server something

00:35:28,540 --> 00:35:31,870
and that server chooses some other

00:35:30,100 --> 00:35:32,980
servers to tell and they choose some

00:35:31,870 --> 00:35:35,140
other servers and eventually everyone

00:35:32,980 --> 00:35:37,390
finds out and that's a really

00:35:35,140 --> 00:35:40,450
unscientific way to explain it and

00:35:37,390 --> 00:35:42,070
there's actually a lot more sane like

00:35:40,450 --> 00:35:46,180
science and math behind it to make it so

00:35:42,070 --> 00:35:47,590
it's not crazy and random um but this is

00:35:46,180 --> 00:35:49,870
actually really fast and really

00:35:47,590 --> 00:35:51,130
efficient so one of the biggest people

00:35:49,870 --> 00:35:54,970
running a surf cluster that I know of

00:35:51,130 --> 00:35:57,040
right now runs a 40 100 node surf

00:35:54,970 --> 00:35:58,570
cluster in AWS

00:35:57,040 --> 00:36:02,500
and when they add a new node to this

00:35:58,570 --> 00:36:05,470
4,100 node cluster everyone knows within

00:36:02,500 --> 00:36:07,600
200 milliseconds without any failures

00:36:05,470 --> 00:36:10,450
and in the worst case mathematically at

00:36:07,600 --> 00:36:12,070
least in the worst case if there's ten

00:36:10,450 --> 00:36:13,660
percent packet loss which is outrageous

00:36:12,070 --> 00:36:16,000
but if there's ten percent packet loss

00:36:13,660 --> 00:36:20,670
on those links then they'll find out in

00:36:16,000 --> 00:36:23,970
a second says the mask but yeah yeah

00:36:20,670 --> 00:36:26,500
usually the Amazon networks are okay and

00:36:23,970 --> 00:36:30,880
200 milliseconds for any changes which

00:36:26,500 --> 00:36:33,580
is really cool a lot faster than its 30

00:36:30,880 --> 00:36:34,960
minutes chef run or something then

00:36:33,580 --> 00:36:36,730
there's failure detection so built on

00:36:34,960 --> 00:36:39,490
top of this gossip pool served us

00:36:36,730 --> 00:36:42,810
failure detection so the way this works

00:36:39,490 --> 00:36:45,790
isn't as again somewhat novel it's not

00:36:42,810 --> 00:36:47,830
stupid there's a lot of stupid ways to

00:36:45,790 --> 00:36:49,720
do failure detection and the most common

00:36:47,830 --> 00:36:51,070
one is heart beats so most people do

00:36:49,720 --> 00:36:52,630
failure detection by saying I know about

00:36:51,070 --> 00:36:53,560
you so to make sure you're alive i'm

00:36:52,630 --> 00:36:55,930
just going to ask you if you're alive

00:36:53,560 --> 00:36:57,250
every so often and everyone does that

00:36:55,930 --> 00:36:59,890
and the problem with everyone doing that

00:36:57,250 --> 00:37:01,420
is for every node you add you

00:36:59,890 --> 00:37:03,010
exponentially increase the number of

00:37:01,420 --> 00:37:05,200
connections and like heartbeats that are

00:37:03,010 --> 00:37:07,570
happening so your bandwidth as your

00:37:05,200 --> 00:37:09,640
notes scales linearly your bandwidth

00:37:07,570 --> 00:37:13,900
scales exponentially and it's not

00:37:09,640 --> 00:37:16,260
scalable so surf on the other hand uses

00:37:13,900 --> 00:37:20,290
a linear approach to failure detection

00:37:16,260 --> 00:37:23,380
and I'll just start with the bandwidth

00:37:20,290 --> 00:37:25,540
so the bandwidth that that 4,100 cluster

00:37:23,380 --> 00:37:27,790
uses 4,100 node cluster uses at all

00:37:25,540 --> 00:37:30,550
times is around a constant I forgot i

00:37:27,790 --> 00:37:32,710
think it's like 700 kilobits per second

00:37:30,550 --> 00:37:33,910
so it doesn't even show up on network

00:37:32,710 --> 00:37:35,920
graph you won't even know it's happening

00:37:33,910 --> 00:37:38,920
but that's the communication and it

00:37:35,920 --> 00:37:41,710
scales linearly so the way the failure

00:37:38,920 --> 00:37:44,140
detection works in surf is again a lot a

00:37:41,710 --> 00:37:46,540
very human way of doing it it it does

00:37:44,140 --> 00:37:49,000
heartbeat but it heartbeats by relying

00:37:46,540 --> 00:37:51,760
on probabilities so instead of heart

00:37:49,000 --> 00:37:53,230
beating everyone every second surf will

00:37:51,760 --> 00:37:55,300
just choose a random person that knows

00:37:53,230 --> 00:37:57,700
about so the 4100 no cluster will just

00:37:55,300 --> 00:37:59,470
choose one out of 40 100 and ask that

00:37:57,700 --> 00:38:01,810
person if they're alive and the way

00:37:59,470 --> 00:38:03,640
probability works is if all 40 100 is

00:38:01,810 --> 00:38:05,890
choose one random person then hopefully

00:38:03,640 --> 00:38:07,270
you just hit everyone and that turns out

00:38:05,890 --> 00:38:08,860
to mostly be the case at least

00:38:07,270 --> 00:38:09,880
especially if doing it every second than

00:38:08,860 --> 00:38:10,650
every few seconds you're hitting

00:38:09,880 --> 00:38:12,610
everyone

00:38:10,650 --> 00:38:14,590
and then when and ask them if they're

00:38:12,610 --> 00:38:16,750
okay if they don't respond it doesn't

00:38:14,590 --> 00:38:18,700
it's very protective of failures because

00:38:16,750 --> 00:38:19,990
failures are usually kind of annoying to

00:38:18,700 --> 00:38:22,300
deal with so instead of just reporting

00:38:19,990 --> 00:38:24,370
that person's dead it then asks three

00:38:22,300 --> 00:38:25,930
other random people have you heard from

00:38:24,370 --> 00:38:29,800
this person lately because maybe I just

00:38:25,930 --> 00:38:32,830
can't talk to them and the three people

00:38:29,800 --> 00:38:35,380
you know if they say no then again then

00:38:32,830 --> 00:38:40,210
it uses the gossip and tells everyone I

00:38:35,380 --> 00:38:43,750
suspect that this person is dead and

00:38:40,210 --> 00:38:45,160
then that lasts suspicion it's actually

00:38:43,750 --> 00:38:48,340
called a suspicion packet that last

00:38:45,160 --> 00:38:50,470
packet gives the suspected person a

00:38:48,340 --> 00:38:52,870
chance that they're alive to send back a

00:38:50,470 --> 00:38:56,110
message to the cluster and say like no

00:38:52,870 --> 00:38:58,000
no no I'm definitely alive of good and

00:38:56,110 --> 00:39:00,580
finally if that fails then he's marked

00:38:58,000 --> 00:39:02,590
it so that's a lot of communication

00:39:00,580 --> 00:39:06,490
happening but again it's reasonably fast

00:39:02,590 --> 00:39:08,770
so in that big cluster 40 100 nodes the

00:39:06,490 --> 00:39:09,940
failure detecting a node failing takes

00:39:08,770 --> 00:39:12,370
about a second for all that

00:39:09,940 --> 00:39:14,860
communication happen and that's pretty

00:39:12,370 --> 00:39:16,090
good and you could tune all those things

00:39:14,860 --> 00:39:17,500
like if you don't want to ask the people

00:39:16,090 --> 00:39:19,300
three people they've talked about

00:39:17,500 --> 00:39:20,410
someone recently then you can just turn

00:39:19,300 --> 00:39:22,810
that off and you'll get failure

00:39:20,410 --> 00:39:25,600
detection in like 100 milliseconds or

00:39:22,810 --> 00:39:27,310
whatever and then the coolest thing is

00:39:25,600 --> 00:39:29,920
we've built this layer that allows

00:39:27,310 --> 00:39:32,140
people to gossip already so why don't we

00:39:29,920 --> 00:39:34,270
just expose it to people and that's what

00:39:32,140 --> 00:39:37,060
we do so with surf you're able to just

00:39:34,270 --> 00:39:39,670
say send this data through the gossip

00:39:37,060 --> 00:39:41,710
cluster and we'll communicate it for you

00:39:39,670 --> 00:39:43,510
and so these custom events as they're

00:39:41,710 --> 00:39:45,970
called are really useful because in that

00:39:43,510 --> 00:39:48,250
load balancer example you could send a

00:39:45,970 --> 00:39:50,830
custom event that's saying web 36 is

00:39:48,250 --> 00:39:53,320
going to go down in 30 minutes so the

00:39:50,830 --> 00:39:54,880
load balancer could get that gossip

00:39:53,320 --> 00:39:56,500
thing you could send that message on

00:39:54,880 --> 00:39:57,640
anyone the load balancer will get it

00:39:56,500 --> 00:40:00,490
eventually and be able to gracefully

00:39:57,640 --> 00:40:04,510
pull them out before that 30 minutes is

00:40:00,490 --> 00:40:06,490
up yeah neat so a lot of people are

00:40:04,510 --> 00:40:09,250
using surf to do things like kickoff

00:40:06,490 --> 00:40:10,510
chef and puppet runs instead of running

00:40:09,250 --> 00:40:13,120
chef or puppet there every 30 minutes

00:40:10,510 --> 00:40:14,560
they don't run it at all until they make

00:40:13,120 --> 00:40:16,780
a change to sheffer puppet and then they

00:40:14,560 --> 00:40:18,760
use surf to send out a message it's like

00:40:16,780 --> 00:40:21,640
okay you guys should all run chef now

00:40:18,760 --> 00:40:23,290
because I changed it or deploys they're

00:40:21,640 --> 00:40:26,170
using it for deploys and other stuff

00:40:23,290 --> 00:40:28,860
so what it looks like is I'm running out

00:40:26,170 --> 00:40:31,720
of time so I think so you run the agent

00:40:28,860 --> 00:40:33,160
you join a node and to join because the

00:40:31,720 --> 00:40:35,890
gossip thing you only need to know one

00:40:33,160 --> 00:40:36,790
IP and a lot of people ask how you how

00:40:35,890 --> 00:40:39,730
do you figure out that chicken egg

00:40:36,790 --> 00:40:41,410
problem of that first IP and I'm running

00:40:39,730 --> 00:40:45,120
out time so I go into detail but use the

00:40:41,410 --> 00:40:47,350
dns server that it knows everyone and

00:40:45,120 --> 00:40:50,170
but the result of surf what makes it

00:40:47,350 --> 00:40:52,750
valuable is because you engineer all

00:40:50,170 --> 00:40:55,440
your software to know when people come

00:40:52,750 --> 00:40:58,180
and go within like sub second

00:40:55,440 --> 00:41:01,870
notification times you actually make it

00:40:58,180 --> 00:41:03,280
really resilient to failure so if I have

00:41:01,870 --> 00:41:03,970
if this is like a 50 minute talk or

00:41:03,280 --> 00:41:07,720
something I would show you an example

00:41:03,970 --> 00:41:10,540
where I bring up a cluster of 150 AWS

00:41:07,720 --> 00:41:12,400
nodes that are load balanced and then it

00:41:10,540 --> 00:41:14,200
I could show you them load balancing and

00:41:12,400 --> 00:41:16,300
then I could just like choose you know

00:41:14,200 --> 00:41:18,490
however many you want and then there's

00:41:16,300 --> 00:41:20,440
kill them and they disappear from the

00:41:18,490 --> 00:41:21,490
load balancer within like before you

00:41:20,440 --> 00:41:24,400
could even refresh the page they're

00:41:21,490 --> 00:41:25,870
already gone but because every app is

00:41:24,400 --> 00:41:28,990
knows that's going to happen then

00:41:25,870 --> 00:41:33,760
they're engineered that way yeah doesn't

00:41:28,990 --> 00:41:38,440
matter for right now haha ok so now

00:41:33,760 --> 00:41:44,920
let's just skip that so the whole uh no

00:41:38,440 --> 00:41:46,660
yeah so the whole topic I guess at this

00:41:44,920 --> 00:41:49,120
talk was DevOps moves really fast like

00:41:46,660 --> 00:41:51,310
packer and surf and let's just throw in

00:41:49,120 --> 00:41:54,880
another one that's not my daugher all

00:41:51,310 --> 00:42:00,040
three of those things did not exist nine

00:41:54,880 --> 00:42:02,770
months ago right that's weird and really

00:42:00,040 --> 00:42:05,800
big companies are adopting all three and

00:42:02,770 --> 00:42:07,120
so that's really crazy and DevOps moves

00:42:05,800 --> 00:42:10,030
really fast so it's hard to keep up with

00:42:07,120 --> 00:42:13,030
this sort of stuff and so my warning to

00:42:10,030 --> 00:42:14,440
you is to be aware of locking risks

00:42:13,030 --> 00:42:16,240
because when things move really fast

00:42:14,440 --> 00:42:19,240
like this lock-in is the worst thing you

00:42:16,240 --> 00:42:21,100
could do for example chef and puppet are

00:42:19,240 --> 00:42:24,250
really high lock-in factors and that's

00:42:21,100 --> 00:42:26,380
fine but if you adopted chef six years

00:42:24,250 --> 00:42:28,150
ago you're probably still using chef

00:42:26,380 --> 00:42:29,890
today because you have millions of lines

00:42:28,150 --> 00:42:31,600
of chef cookbooks and even though

00:42:29,890 --> 00:42:33,820
something cooler might come out I'm not

00:42:31,600 --> 00:42:35,980
saying they are cooler but say you like

00:42:33,820 --> 00:42:36,849
ansible or something you might play with

00:42:35,980 --> 00:42:38,319
it and think it's cool

00:42:36,849 --> 00:42:39,940
it's really unlikely that you'll be able

00:42:38,319 --> 00:42:41,440
to switch to Ansel it's just not going

00:42:39,940 --> 00:42:44,170
to happen because it's too expensive and

00:42:41,440 --> 00:42:46,299
managers will shoot that down so just be

00:42:44,170 --> 00:42:50,410
aware of what's happening and lock and

00:42:46,299 --> 00:42:53,440
risk and think about it and my sort of

00:42:50,410 --> 00:42:56,319
pitches I I personally and it and from a

00:42:53,440 --> 00:42:57,940
business perspective not in our tools

00:42:56,319 --> 00:43:01,839
aren't in the best interests of locking

00:42:57,940 --> 00:43:04,269
you in there's that and my takeaway is

00:43:01,839 --> 00:43:07,299
that there's a really clear problem set

00:43:04,269 --> 00:43:08,950
here and DevOps tools have to solve one

00:43:07,299 --> 00:43:11,289
or more of these things so whenever

00:43:08,950 --> 00:43:13,599
something comes out which is probably

00:43:11,289 --> 00:43:14,950
like today I don't know something comes

00:43:13,599 --> 00:43:16,749
out every day whenever something comes

00:43:14,950 --> 00:43:19,749
out just take a look at this sort of

00:43:16,749 --> 00:43:21,640
thing and think of where it comes in and

00:43:19,749 --> 00:43:24,849
that'll answer your question of do I

00:43:21,640 --> 00:43:28,239
need it what problem to solve what tools

00:43:24,849 --> 00:43:32,229
does it replace or compete with and some

00:43:28,239 --> 00:43:34,329
and so the the final acute analogy is

00:43:32,229 --> 00:43:37,119
like say the opening slide we started

00:43:34,329 --> 00:43:38,650
with this and because of tools and this

00:43:37,119 --> 00:43:40,660
took like what eighty years to build or

00:43:38,650 --> 00:43:43,269
something and because the tools we can

00:43:40,660 --> 00:43:45,279
now build something like this in in less

00:43:43,269 --> 00:43:48,819
than a year and that's also kind of a

00:43:45,279 --> 00:43:51,839
grave because it's a museum so yeah so

00:43:48,819 --> 00:43:51,839

YouTube URL: https://www.youtube.com/watch?v=n04Xgv9aXg4


