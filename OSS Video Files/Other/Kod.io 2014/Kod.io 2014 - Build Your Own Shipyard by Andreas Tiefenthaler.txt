Title: Kod.io 2014 - Build Your Own Shipyard by Andreas Tiefenthaler
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	On how to stuff your application into Docker containers, wire them up and make them ready for shipping.
We sail through the oceans of code and the bays of operating systems.

The adventure ends in the harbor of polyglot deployments after we sailed around the great reefs of pitfall.

Help us caption & translate this video!

http://amara.org/v/FG3Z/
Captions: 
	00:00:18,710 --> 00:00:26,460
so hi I'm Andy I work for a company

00:00:23,460 --> 00:00:28,590
called content full we do some content

00:00:26,460 --> 00:00:31,500
hosting for you and presented to us an

00:00:28,590 --> 00:00:33,390
API it's quite nice I'm also known as

00:00:31,500 --> 00:00:35,070
pixel punk on twitter and github you can

00:00:33,390 --> 00:00:38,309
follow me there you can stalk media you

00:00:35,070 --> 00:00:39,690
can fork my project and commit to them

00:00:38,309 --> 00:00:42,300
would be awesome because you have a few

00:00:39,690 --> 00:00:44,879
bucks you might recognize me from the

00:00:42,300 --> 00:00:48,960
picture I don't know who picked it but

00:00:44,879 --> 00:00:51,360
thank you very much so um we're talking

00:00:48,960 --> 00:00:53,970
today about docker the shipping another

00:00:51,360 --> 00:00:55,949
ship reference sorry um the thing is

00:00:53,970 --> 00:00:57,030
what is this whole talk about so we go a

00:00:55,949 --> 00:00:58,559
little bit through a theory have a

00:00:57,030 --> 00:01:01,500
little bit of technology have a tiny

00:00:58,559 --> 00:01:04,500
demo have a litte more demo there will

00:01:01,500 --> 00:01:06,659
be no cats there will also be no CSS

00:01:04,500 --> 00:01:09,330
HTML Javascript other front and stuff

00:01:06,659 --> 00:01:13,740
this is a dry back-end talk with a

00:01:09,330 --> 00:01:15,870
little bit of code so what is a talker

00:01:13,740 --> 00:01:18,000
in in theory I don't see my speaker

00:01:15,870 --> 00:01:20,070
notes or whatever so talk is an open

00:01:18,000 --> 00:01:23,070
source engine that basically allows you

00:01:20,070 --> 00:01:24,900
to pack your stuff your application your

00:01:23,070 --> 00:01:27,480
tools that you created in a container

00:01:24,900 --> 00:01:29,430
and ship it literally everywhere you can

00:01:27,480 --> 00:01:32,820
move it from one server to another can

00:01:29,430 --> 00:01:34,890
create updates push it out to there it

00:01:32,820 --> 00:01:37,230
was intentionally created by dot cloud

00:01:34,890 --> 00:01:38,640
they could ask you what are you using to

00:01:37,230 --> 00:01:40,710
host all this content and this stuff

00:01:38,640 --> 00:01:43,350
that you have to and they said yeah well

00:01:40,710 --> 00:01:44,850
it's a wild mixture of things that we

00:01:43,350 --> 00:01:46,590
created and then they thought well we

00:01:44,850 --> 00:01:48,210
could rewrite it make it better and then

00:01:46,590 --> 00:01:49,800
give it back to the community so they

00:01:48,210 --> 00:01:53,220
started using go lengths to create a

00:01:49,800 --> 00:01:56,250
completely new project called docker the

00:01:53,220 --> 00:01:58,350
main features of docker arm are as I

00:01:56,250 --> 00:02:00,330
said you can literally encapsulate any

00:01:58,350 --> 00:02:02,850
kind of payload that I have but payload

00:02:00,330 --> 00:02:05,190
I mean your app your PHP or will be your

00:02:02,850 --> 00:02:07,920
Python you're if you're right it in

00:02:05,190 --> 00:02:09,660
haskell go for it you can do a bit the

00:02:07,920 --> 00:02:11,430
cool thing is your only packing the

00:02:09,660 --> 00:02:13,769
dependencies that you have so if you

00:02:11,430 --> 00:02:17,040
have a pain its library be in version

00:02:13,769 --> 00:02:19,319
one and FB needs library the same

00:02:17,040 --> 00:02:21,180
library in version 2 you have a conflict

00:02:19,319 --> 00:02:22,620
and so you just ship the libraries and

00:02:21,180 --> 00:02:25,280
the tools and your dependencies that you

00:02:22,620 --> 00:02:29,250
need within your app nothing else it's

00:02:25,280 --> 00:02:31,620
super lightweight it has no literally or

00:02:29,250 --> 00:02:34,049
virtually no performance over

00:02:31,620 --> 00:02:35,610
penalty when you start it you start a

00:02:34,049 --> 00:02:37,860
container and it's there and then the

00:02:35,610 --> 00:02:39,120
app starts immediately you can shut them

00:02:37,860 --> 00:02:40,260
down you can move them to a different

00:02:39,120 --> 00:02:42,569
server you can move them to a different

00:02:40,260 --> 00:02:43,980
country can move them to USB stick bring

00:02:42,569 --> 00:02:46,500
them home to your offline computer start

00:02:43,980 --> 00:02:47,940
them up there and use your app there and

00:02:46,500 --> 00:02:50,549
you can also manipulate it it works a

00:02:47,940 --> 00:02:51,599
little bit like get where you have every

00:02:50,549 --> 00:02:53,340
stage where I add something to your

00:02:51,599 --> 00:02:55,650
container it gets committed and you can

00:02:53,340 --> 00:02:58,079
always revert to these things and then

00:02:55,650 --> 00:02:59,540
you can build up your containers

00:02:58,079 --> 00:03:01,980
step-by-step it's like stacking up

00:02:59,540 --> 00:03:08,730
slices of bread to make a very nice and

00:03:01,980 --> 00:03:10,410
awesome sandwich a live food so what is

00:03:08,730 --> 00:03:12,450
it also helps you to separate your

00:03:10,410 --> 00:03:14,069
duties usually have you have your

00:03:12,450 --> 00:03:15,390
application that is nicely written

00:03:14,069 --> 00:03:16,829
engineered and well tests and everything

00:03:15,390 --> 00:03:18,569
and then you have your infrastructure

00:03:16,829 --> 00:03:19,560
and you always don't have to mess with

00:03:18,569 --> 00:03:20,849
the infrastructure when you want to

00:03:19,560 --> 00:03:22,890
deploy some new code because you need a

00:03:20,849 --> 00:03:25,650
new feature and you always have to do

00:03:22,890 --> 00:03:27,540
manual instil a pro John this you can

00:03:25,650 --> 00:03:29,730
either use automative tools like a chef

00:03:27,540 --> 00:03:31,440
and puppet that help you to automate it

00:03:29,730 --> 00:03:33,209
but they are kind of confusing sometimes

00:03:31,440 --> 00:03:35,700
and you need to learn a new language to

00:03:33,209 --> 00:03:37,799
get your code somewhere there with your

00:03:35,700 --> 00:03:40,500
dependencies and all your this is a

00:03:37,799 --> 00:03:41,970
 mess and here is just separated

00:03:40,500 --> 00:03:43,859
you write a simple script to create your

00:03:41,970 --> 00:03:47,840
container and then you have your app you

00:03:43,859 --> 00:03:50,430
stuff it in you ship it also it nicely

00:03:47,840 --> 00:03:52,230
takes care of your network resources of

00:03:50,430 --> 00:03:56,160
your resources in general your CPU your

00:03:52,230 --> 00:03:57,660
memory and also helps you to say this

00:03:56,160 --> 00:03:59,069
container only is allowed to have this

00:03:57,660 --> 00:04:01,260
amount of memory and it doesn't get more

00:03:59,069 --> 00:04:03,329
so one app cannot go wild and eat up all

00:04:01,260 --> 00:04:04,650
your CPU power your memory and then

00:04:03,329 --> 00:04:05,910
crash and you have a down time you get

00:04:04,650 --> 00:04:07,379
woken up at three in the morning after

00:04:05,910 --> 00:04:13,019
you were at the party because you'd

00:04:07,379 --> 00:04:14,250
service is down again well or when you

00:04:13,019 --> 00:04:15,629
still the party even worse because then

00:04:14,250 --> 00:04:16,979
you don't have internet or you have to

00:04:15,629 --> 00:04:20,340
place a beer somewhere while you have to

00:04:16,979 --> 00:04:23,220
code never put your beer on your

00:04:20,340 --> 00:04:24,449
notebook bad idea so what is the

00:04:23,220 --> 00:04:26,550
difference between a container and the

00:04:24,449 --> 00:04:28,919
classic definition of a virtual machine

00:04:26,550 --> 00:04:30,419
a virtual machine consists of you have

00:04:28,919 --> 00:04:33,270
your operating system then you have your

00:04:30,419 --> 00:04:34,710
hyper base visor on top of it then you

00:04:33,270 --> 00:04:36,570
have your virtual machines then you have

00:04:34,710 --> 00:04:38,010
another operation system in it then you

00:04:36,570 --> 00:04:39,479
have your all your dependents use the

00:04:38,010 --> 00:04:41,490
libraries your tools that you need and

00:04:39,479 --> 00:04:42,990
then on top of it you stack your app so

00:04:41,490 --> 00:04:44,580
you need to build literally Mount

00:04:42,990 --> 00:04:45,270
Everest to get to the point where you

00:04:44,580 --> 00:04:48,390
can actually run

00:04:45,270 --> 00:04:49,650
it and presented to users out there in a

00:04:48,390 --> 00:04:51,750
document it all runs a little bit

00:04:49,650 --> 00:04:54,000
different it's almost the same until a

00:04:51,750 --> 00:04:56,400
virtualization or hypervisor and there

00:04:54,000 --> 00:04:57,630
you said in your daugher and your

00:04:56,400 --> 00:04:59,610
install your library isn't docker

00:04:57,630 --> 00:05:01,590
containers can share your dependencies

00:04:59,610 --> 00:05:04,410
with each other only if it's necessary

00:05:01,590 --> 00:05:06,630
and only if it's a wanted and then on

00:05:04,410 --> 00:05:08,190
top of that you put up your app and then

00:05:06,630 --> 00:05:09,600
you want to have the same up again you

00:05:08,190 --> 00:05:11,490
just take the image clone it and you

00:05:09,600 --> 00:05:13,800
have another appt we put just put up a

00:05:11,490 --> 00:05:15,660
fresh color container in the next way

00:05:13,800 --> 00:05:17,370
you can just take your app that you have

00:05:15,660 --> 00:05:19,200
now modified a little bit creating your

00:05:17,370 --> 00:05:21,240
container out of it you can run both in

00:05:19,200 --> 00:05:23,030
parallel you can do a B testing but just

00:05:21,240 --> 00:05:25,350
creating new virtual machines in a way

00:05:23,030 --> 00:05:28,170
so you don't have to do any kind of red

00:05:25,350 --> 00:05:32,340
flags or other stuff and the front end

00:05:28,170 --> 00:05:34,110
is all it's all nice container it's like

00:05:32,340 --> 00:05:35,550
you can imagine you have this fringe

00:05:34,110 --> 00:05:37,410
example in Rotterdam you have this huge

00:05:35,550 --> 00:05:39,390
container harbor they have these things

00:05:37,410 --> 00:05:41,370
where you go down grab a container and

00:05:39,390 --> 00:05:45,630
move it somewhere else drop it again put

00:05:41,370 --> 00:05:47,730
it on a ship shape it and it uses

00:05:45,630 --> 00:05:50,820
basically a Linux lightweights container

00:05:47,730 --> 00:05:53,190
they are not so new but pretty cool

00:05:50,820 --> 00:05:55,590
technology or actually they are quite

00:05:53,190 --> 00:05:58,680
new but this recently reached it

00:05:55,590 --> 00:06:00,150
released a stable version of it it uses

00:05:58,680 --> 00:06:02,220
see groups to actually take care of your

00:06:00,150 --> 00:06:04,530
resources a few CPU of your memory and

00:06:02,220 --> 00:06:07,470
the Linux kernel itself so if you want

00:06:04,530 --> 00:06:09,840
to use it you have to use Linux and now

00:06:07,470 --> 00:06:14,910
I make Windows is a little bit

00:06:09,840 --> 00:06:16,680
unsupported basically not at all so how

00:06:14,910 --> 00:06:18,480
is the life cycle the basic function of

00:06:16,680 --> 00:06:20,970
container look like you build a

00:06:18,480 --> 00:06:23,550
container from a docker file you modify

00:06:20,970 --> 00:06:25,470
it and so you add your your content to

00:06:23,550 --> 00:06:27,270
it your application again you can also

00:06:25,470 --> 00:06:28,650
just add a service like readies to it or

00:06:27,270 --> 00:06:31,980
a database which I would not recommend

00:06:28,650 --> 00:06:34,620
but it's possible and you publish it to

00:06:31,980 --> 00:06:37,020
so-called registry which is a package

00:06:34,620 --> 00:06:38,880
management system in a way for your

00:06:37,020 --> 00:06:40,020
containers and then you just pull your

00:06:38,880 --> 00:06:41,970
containers on your service that you

00:06:40,020 --> 00:06:44,790
wanted to run them store them up and

00:06:41,970 --> 00:06:46,080
their life you can always push new

00:06:44,790 --> 00:06:48,570
versions out of there you can delete

00:06:46,080 --> 00:06:50,340
stuff it's it's still all a little bit

00:06:48,570 --> 00:06:53,100
in in the running and in the go but it's

00:06:50,340 --> 00:06:55,860
getting better now we have our very

00:06:53,100 --> 00:06:57,060
first little a demo here it's super

00:06:55,860 --> 00:06:59,280
simple

00:06:57,060 --> 00:07:01,860
and just to explain you a little bit

00:06:59,280 --> 00:07:03,960
what's happening in the docker world so

00:07:01,860 --> 00:07:06,930
in dr. you create images and from this

00:07:03,960 --> 00:07:09,300
image is then you create containers and

00:07:06,930 --> 00:07:12,120
this containers actually run them so we

00:07:09,300 --> 00:07:13,919
have here our knives example that was

00:07:12,120 --> 00:07:16,530
already example so what happened here is

00:07:13,919 --> 00:07:18,540
it's pretty amazing we took an image we

00:07:16,530 --> 00:07:20,280
created a container vanillish initialize

00:07:18,540 --> 00:07:22,290
the file system in it we created the

00:07:20,280 --> 00:07:23,580
whole network stack around it we putted

00:07:22,290 --> 00:07:26,880
it up we start at the echo command

00:07:23,580 --> 00:07:29,280
printed out hello world we destroyed the

00:07:26,880 --> 00:07:33,389
container again and we're done in a

00:07:29,280 --> 00:07:36,930
matter of no time it's so fast so how

00:07:33,389 --> 00:07:39,750
fast is it incredibly fast um so this is

00:07:36,930 --> 00:07:41,100
basically how it works you start up your

00:07:39,750 --> 00:07:42,660
app and it's running and you see there

00:07:41,100 --> 00:07:43,919
it's not really an overhead it front a

00:07:42,660 --> 00:07:45,780
shoe like this just it doesn't really

00:07:43,919 --> 00:07:47,250
take much longer but I don't really have

00:07:45,780 --> 00:07:54,270
to set up the whole network and stuff

00:07:47,250 --> 00:07:55,620
like this so next Emma too fast or we

00:07:54,270 --> 00:07:57,930
just make it short and then we can go

00:07:55,620 --> 00:08:02,610
have a longer break what I use cases for

00:07:57,930 --> 00:08:04,440
talker I already presented if you well

00:08:02,610 --> 00:08:06,020
it's mostly about shipping so this is

00:08:04,440 --> 00:08:10,110
where all the shipping and ships and

00:08:06,020 --> 00:08:12,450
pirate the things come from you can

00:08:10,110 --> 00:08:14,910
basically I should stop saying basic

00:08:12,450 --> 00:08:17,700
user you ultimate your whole deployment

00:08:14,910 --> 00:08:19,110
of your app you script the hell out of

00:08:17,700 --> 00:08:21,060
it you don't want to touch it anymore

00:08:19,110 --> 00:08:22,950
you don't want to run a manual install

00:08:21,060 --> 00:08:24,419
commands on your servers just put

00:08:22,950 --> 00:08:26,250
everything in containers and ship it out

00:08:24,419 --> 00:08:29,340
you can also create your own private

00:08:26,250 --> 00:08:32,520
platform as a service so your mini

00:08:29,340 --> 00:08:33,810
hiroko a mini any nines in your own

00:08:32,520 --> 00:08:35,219
infrastructure this is actually was

00:08:33,810 --> 00:08:36,780
already happening out of their companies

00:08:35,219 --> 00:08:39,270
are creating the internal infrastructure

00:08:36,780 --> 00:08:40,530
Sun poker and just chip always container

00:08:39,270 --> 00:08:42,570
and don't really have to do any kit

00:08:40,530 --> 00:08:44,339
check out anymore manually somewhere we

00:08:42,570 --> 00:08:45,630
start the app and stuff like this you

00:08:44,339 --> 00:08:47,339
can also stop your hole if you do

00:08:45,630 --> 00:08:49,770
automated testing which every single one

00:08:47,339 --> 00:08:51,600
of you should do all the time never let

00:08:49,770 --> 00:08:54,540
the line of code is not tested it will

00:08:51,600 --> 00:08:57,810
blow up if you will hate it there is a

00:08:54,540 --> 00:08:59,580
new project its drone and which helps

00:08:57,810 --> 00:09:01,440
you to run locally a test and you just

00:08:59,580 --> 00:09:03,390
need the dependencies to need for it

00:09:01,440 --> 00:09:05,880
stuff it in there run a test everything

00:09:03,390 --> 00:09:08,730
is green fine ship it as you go into the

00:09:05,880 --> 00:09:10,649
shipping industry and you can also

00:09:08,730 --> 00:09:12,509
deploy yeah

00:09:10,649 --> 00:09:14,189
of course and you can scale them so if

00:09:12,509 --> 00:09:16,290
for example have a worker somewhere

00:09:14,189 --> 00:09:18,119
running and is taking long and long and

00:09:16,290 --> 00:09:20,519
long and you have multiple requests

00:09:18,119 --> 00:09:21,449
coming into to do this work you just add

00:09:20,519 --> 00:09:23,189
another container and have two

00:09:21,449 --> 00:09:25,230
containers than working late of three or

00:09:23,189 --> 00:09:27,360
four or five and you can virtually run

00:09:25,230 --> 00:09:29,490
hundreds and thousands of container in

00:09:27,360 --> 00:09:30,839
parallel it's not a problem it's a super

00:09:29,490 --> 00:09:33,269
thin layer you don't have any problems

00:09:30,839 --> 00:09:35,910
there there are few companies are there

00:09:33,269 --> 00:09:37,290
who already use docker as I said it's

00:09:35,910 --> 00:09:39,329
quite beta they are not stable yet

00:09:37,290 --> 00:09:40,800
there's a lot of change going on they

00:09:39,329 --> 00:09:43,920
made a lot of progress the project is

00:09:40,800 --> 00:09:45,929
now a year old and they achieved a lot

00:09:43,920 --> 00:09:48,869
of there you have companies like bit

00:09:45,929 --> 00:09:50,429
bleed line ebay flynner which offers our

00:09:48,869 --> 00:09:52,829
open source platform as a service you

00:09:50,429 --> 00:09:54,929
have Yandex who created cocaine their

00:09:52,829 --> 00:09:57,779
own platform as a service in it you have

00:09:54,929 --> 00:10:00,389
worker who is an automated continuous

00:09:57,779 --> 00:10:03,480
integration system if cloudflare travis

00:10:00,389 --> 00:10:05,249
CI who also everyone should love uses it

00:10:03,480 --> 00:10:08,040
and makes it possible for you to create

00:10:05,249 --> 00:10:10,709
your own build pegs and and you have rec

00:10:08,040 --> 00:10:13,019
space and there's also if some people

00:10:10,709 --> 00:10:14,850
use OpenStack you can also have adapters

00:10:13,019 --> 00:10:18,509
for that too remote control your cloud

00:10:14,850 --> 00:10:21,240
from your OpenStack installation now

00:10:18,509 --> 00:10:23,759
we're going to have some code so to

00:10:21,240 --> 00:10:25,620
create a container or an image to to

00:10:23,759 --> 00:10:28,529
create an image to actually launch a

00:10:25,620 --> 00:10:31,860
container you need a little bit of help

00:10:28,529 --> 00:10:33,990
and sometimes you script it but doctor

00:10:31,860 --> 00:10:36,209
decided to make their own language to do

00:10:33,990 --> 00:10:39,179
this and it's super simple this is the

00:10:36,209 --> 00:10:41,550
most basic example that you can have to

00:10:39,179 --> 00:10:43,800
get an up and running container so the

00:10:41,550 --> 00:10:45,990
first line you have from this means this

00:10:43,800 --> 00:10:51,019
is our base image we create this image

00:10:45,990 --> 00:10:53,459
now from our bun to 12 point 10 sorry um

00:10:51,019 --> 00:10:55,199
you can also create your own base images

00:10:53,459 --> 00:10:57,329
and you can also for example creator

00:10:55,199 --> 00:10:59,249
image and then on top of that create

00:10:57,329 --> 00:11:01,040
more images and more images and then

00:10:59,249 --> 00:11:04,889
spread it out like the snowball system

00:11:01,040 --> 00:11:07,470
you can run commands when the image gets

00:11:04,889 --> 00:11:10,019
created the cool thing is every run

00:11:07,470 --> 00:11:12,480
comment there's a commit so if you run

00:11:10,019 --> 00:11:13,410
your commands and then it fails the next

00:11:12,480 --> 00:11:15,569
time you try it when you change

00:11:13,410 --> 00:11:18,089
something it will run off point rate

00:11:15,569 --> 00:11:19,499
last time could to commit sucide I'm it

00:11:18,089 --> 00:11:21,269
don't always have to set up to complete

00:11:19,499 --> 00:11:23,249
server again and again and again which

00:11:21,269 --> 00:11:24,520
is time consuming and you can get more

00:11:23,249 --> 00:11:27,310
stuff done

00:11:24,520 --> 00:11:28,510
the lunch break is yeah that time is

00:11:27,310 --> 00:11:30,820
over done a little bit I'm sorry and

00:11:28,510 --> 00:11:32,710
then at the end you just define an entry

00:11:30,820 --> 00:11:35,740
point and this is when you create a

00:11:32,710 --> 00:11:37,630
container and you launch it this is then

00:11:35,740 --> 00:11:40,330
what gets started so in this case it

00:11:37,630 --> 00:11:42,490
just use bin bash but usually use then

00:11:40,330 --> 00:11:45,190
the executing function of your

00:11:42,490 --> 00:11:47,350
application you use your rec up you

00:11:45,190 --> 00:11:50,740
start your race you start your PHP

00:11:47,350 --> 00:11:53,170
Python the jungle whatever everything

00:11:50,740 --> 00:11:56,140
that can fit somehow into a vm can fit

00:11:53,170 --> 00:11:58,120
into a docker container now we get to

00:11:56,140 --> 00:12:00,250
the app i created a little super easy

00:11:58,120 --> 00:12:02,580
straightforward application to show a

00:12:00,250 --> 00:12:04,840
little bit of what doctor is able to do

00:12:02,580 --> 00:12:08,440
the app is super same place is that it's

00:12:04,840 --> 00:12:11,080
a web service in sinatra where you make

00:12:08,440 --> 00:12:13,300
a web request you give it a chop and a

00:12:11,080 --> 00:12:15,580
cost how much it will take to process

00:12:13,300 --> 00:12:16,660
this job and then you have a worker

00:12:15,580 --> 00:12:17,890
container who is then actually

00:12:16,660 --> 00:12:20,320
processing the job and working like

00:12:17,890 --> 00:12:23,470
crazy and you have to exchange i abused

00:12:20,320 --> 00:12:25,870
here little bit radius as a queuing

00:12:23,470 --> 00:12:28,540
system usually you can also use rabbitmq

00:12:25,870 --> 00:12:32,640
or whatever is out there has so much

00:12:28,540 --> 00:12:35,560
awesome stuff the web app is rather

00:12:32,640 --> 00:12:38,740
rather simple so here's the get request

00:12:35,560 --> 00:12:41,860
you take a task with the cost we take a

00:12:38,740 --> 00:12:44,050
teleworker do this asynchronously this

00:12:41,860 --> 00:12:45,640
puts it into the Redis the reddest and

00:12:44,050 --> 00:12:47,080
the worker and fetches it from red is

00:12:45,640 --> 00:12:48,670
and there's no direct connection between

00:12:47,080 --> 00:12:52,720
them and we are currently are going to

00:12:48,670 --> 00:12:55,420
use containers this is the worker it's a

00:12:52,720 --> 00:12:56,590
simple work it's cute it's just going to

00:12:55,420 --> 00:12:57,790
tell you what it's doing and then it's

00:12:56,590 --> 00:13:02,770
sleeping for this time because the lazy

00:12:57,790 --> 00:13:04,750
worker so the extra this is all super

00:13:02,770 --> 00:13:08,860
boring stuff the fun part comes here

00:13:04,750 --> 00:13:10,540
this bold DB port 3678 tcp at all it's

00:13:08,860 --> 00:13:12,100
awful but this is opportune rated by

00:13:10,540 --> 00:13:14,230
docker and what you can do is you can

00:13:12,100 --> 00:13:16,030
tell Dora take this container in this

00:13:14,230 --> 00:13:17,980
container and I want to have those two

00:13:16,030 --> 00:13:19,900
linked over the network and document

00:13:17,980 --> 00:13:21,010
automatically exposes this variables for

00:13:19,900 --> 00:13:23,170
you and you can use them in your

00:13:21,010 --> 00:13:24,610
application so you don't even have to do

00:13:23,170 --> 00:13:26,710
this manually more you just whatever

00:13:24,610 --> 00:13:31,900
container and say listen to connected

00:13:26,710 --> 00:13:33,220
your friends go and ship it um then is

00:13:31,900 --> 00:13:35,530
the rest is just even more boring

00:13:33,220 --> 00:13:38,089
configuration stuff that no one cares

00:13:35,530 --> 00:13:40,459
about let's get our hands dirty

00:13:38,089 --> 00:13:41,749
I prepared something here because it's a

00:13:40,459 --> 00:13:43,790
lot about shipping it's also a bit about

00:13:41,749 --> 00:13:48,339
cooking and it's a little bit like a

00:13:43,790 --> 00:13:51,139
cooking show um so let's get started um

00:13:48,339 --> 00:13:53,600
what do we have here so i created this

00:13:51,139 --> 00:13:55,220
funky little things I because i'm a lazy

00:13:53,600 --> 00:13:57,709
guy i'm a programmer i create and

00:13:55,220 --> 00:14:00,350
automate everything so i have a pill

00:13:57,709 --> 00:14:02,779
script that is just creating my eyes my

00:14:00,350 --> 00:14:08,930
containers that's not very good to see

00:14:02,779 --> 00:14:10,730
you this side better yes what's

00:14:08,930 --> 00:14:13,339
happening here is this are the docker

00:14:10,730 --> 00:14:15,559
files and they define how my containers

00:14:13,339 --> 00:14:17,870
look like and then I give them a name

00:14:15,559 --> 00:14:20,029
attack this is reddish and then tell dr.

00:14:17,870 --> 00:14:21,680
build it and it creates for me the whole

00:14:20,029 --> 00:14:24,800
infrastructure needs creates on the file

00:14:21,680 --> 00:14:28,459
system definitions in it and places it

00:14:24,800 --> 00:14:30,949
into my local registry and this docker

00:14:28,459 --> 00:14:32,660
files look super simple so ever base

00:14:30,949 --> 00:14:34,399
file to define everything that I need

00:14:32,660 --> 00:14:37,579
this is all the commands that are on to

00:14:34,399 --> 00:14:39,920
install my stuff have fun with it really

00:14:37,579 --> 00:14:43,850
has a one another dependency all of this

00:14:39,920 --> 00:14:45,350
is also on github because I actually

00:14:43,850 --> 00:14:49,129
planned to to bring her like a laser

00:14:45,350 --> 00:14:51,350
sword with an LED pointer in it but I

00:14:49,129 --> 00:14:56,029
forgot it I'm sorry which button do i

00:14:51,350 --> 00:14:58,819
press good um so this is just here again

00:14:56,029 --> 00:15:00,769
every run gets into a commit and you can

00:14:58,819 --> 00:15:03,800
start from there all over again and this

00:15:00,769 --> 00:15:07,160
is my basic tool that I use I then

00:15:03,800 --> 00:15:10,490
created the actual app on top of it

00:15:07,160 --> 00:15:16,610
rapala we don't want to that gives on

00:15:10,490 --> 00:15:19,699
that so this is our web app it's

00:15:16,610 --> 00:15:26,319
extremely simple oh sorry it's extremely

00:15:19,699 --> 00:15:28,759
simple yeah I should keep on talking

00:15:26,319 --> 00:15:31,069
because we use just our pace app

00:15:28,759 --> 00:15:33,199
container here and tell it you start my

00:15:31,069 --> 00:15:34,999
Foreman this is a directory start this

00:15:33,199 --> 00:15:36,889
working for me done whenever I want to

00:15:34,999 --> 00:15:40,189
update this worker I just run and you

00:15:36,889 --> 00:15:44,209
get clone in it and ship it again it's

00:15:40,189 --> 00:15:46,100
okay but what I did for the for the

00:15:44,209 --> 00:15:47,870
weapon itself so i can actually access

00:15:46,100 --> 00:15:50,600
it from the outside otherwise which

00:15:47,870 --> 00:15:52,100
stays in stalker universe is i had to

00:15:50,600 --> 00:15:56,160
expose

00:15:52,100 --> 00:16:01,679
of course wrong I had to expose the port

00:15:56,160 --> 00:16:05,429
so I can access it from the outside so

00:16:01,679 --> 00:16:07,649
this is where is it don't see it sorry I

00:16:05,429 --> 00:16:08,610
don't find it you have to expose stuff

00:16:07,649 --> 00:16:09,959
if you want to access it from the

00:16:08,610 --> 00:16:13,980
outside otherwise it's just completely

00:16:09,959 --> 00:16:18,420
locked down it's a closer point to stay

00:16:13,980 --> 00:16:19,860
secure so if I now built this I believe

00:16:18,420 --> 00:16:21,749
the docker container the thing is it

00:16:19,860 --> 00:16:23,519
actually didn't do anything because it's

00:16:21,749 --> 00:16:25,139
already everything did all the commits

00:16:23,519 --> 00:16:27,239
are there this is always the committee I

00:16:25,139 --> 00:16:30,179
can always choose one of these parts and

00:16:27,239 --> 00:16:31,319
just run this part again so in the end

00:16:30,179 --> 00:16:34,589
we have a successfully built our

00:16:31,319 --> 00:16:38,429
successfully built containers so next

00:16:34,589 --> 00:16:40,230
step we're going to run them so right

00:16:38,429 --> 00:16:43,019
now there's no single container running

00:16:40,230 --> 00:16:45,389
it's completely empty but you can see

00:16:43,019 --> 00:16:47,009
here my images that I created and I have

00:16:45,389 --> 00:16:50,819
to read this container here of my web

00:16:47,009 --> 00:16:53,549
app my babe and this is a bug in here

00:16:50,819 --> 00:16:55,019
and I can always start them for this for

00:16:53,549 --> 00:16:59,449
starting it again I'm a little bit lazy

00:16:55,019 --> 00:17:03,869
i created my run script very sorry I

00:16:59,449 --> 00:17:06,659
credit my run script here and here's a

00:17:03,869 --> 00:17:08,579
run in a detached mode this container

00:17:06,659 --> 00:17:09,720
and named it this so I can always access

00:17:08,579 --> 00:17:11,579
it you can always been a start a

00:17:09,720 --> 00:17:13,110
container you name it something you make

00:17:11,579 --> 00:17:14,220
an auto generate the names you ever find

00:17:13,110 --> 00:17:15,689
them again otherwise you lose the

00:17:14,220 --> 00:17:18,149
container you can access it but you

00:17:15,689 --> 00:17:21,480
don't find it anymore happened here I

00:17:18,149 --> 00:17:24,149
linked them here link my radius

00:17:21,480 --> 00:17:26,100
container my key value store with my

00:17:24,149 --> 00:17:27,689
worker and this is what i showed you

00:17:26,100 --> 00:17:30,899
before the environment variables they

00:17:27,689 --> 00:17:32,970
get exposed this is happening there here

00:17:30,899 --> 00:17:34,919
do some more to actually act this is

00:17:32,970 --> 00:17:36,750
where I what I wanted to show is this is

00:17:34,919 --> 00:17:39,000
where I can access it from the outside

00:17:36,750 --> 00:17:44,429
world and there's a comment that you can

00:17:39,000 --> 00:17:47,639
completely ignore so yeah let's run them

00:17:44,429 --> 00:17:49,590
I would say so they're all started and

00:17:47,639 --> 00:17:53,429
they're all running and they're already

00:17:49,590 --> 00:17:57,809
all able to work so if I now try to make

00:17:53,429 --> 00:18:00,120
a request on it I get a hash back to

00:17:57,809 --> 00:18:01,770
this from app it's already in the

00:18:00,120 --> 00:18:03,179
background up and running and processing

00:18:01,770 --> 00:18:04,519
the task where it's actually sleeping

00:18:03,179 --> 00:18:06,229
right now

00:18:04,519 --> 00:18:07,639
and we're now going to attach to a

00:18:06,229 --> 00:18:10,279
docker container that we see what's

00:18:07,639 --> 00:18:12,229
happening there so we have these IDs

00:18:10,279 --> 00:18:15,169
that get generated I can either use the

00:18:12,229 --> 00:18:20,440
name or can use the ID in this case I

00:18:15,169 --> 00:18:22,669
want to check out the the web container

00:18:20,440 --> 00:18:23,809
so I going to attach to this web

00:18:22,669 --> 00:18:25,779
container to see what's happening

00:18:23,809 --> 00:18:27,859
there's not much happening because well

00:18:25,779 --> 00:18:29,239
support but here you see the request

00:18:27,859 --> 00:18:36,709
that just came in cleaner keyboard and

00:18:29,239 --> 00:18:37,879
for 10 minutes or 10 10 * time units we

00:18:36,709 --> 00:18:44,059
also not going to take a look at the

00:18:37,879 --> 00:18:47,629
worker to see how that performs so at

00:18:44,059 --> 00:18:52,459
the shades if you can sweetie which ones

00:18:47,629 --> 00:18:54,169
do work could be that one thing is the

00:18:52,459 --> 00:19:00,759
screen is a little bit small sweater oh

00:18:54,169 --> 00:19:05,889
yeah Thank You lot yes so here I just

00:19:00,759 --> 00:19:05,889
published now this is my my radius

00:19:06,729 --> 00:19:15,409
that's UDF oh yeah sorry so doing life

00:19:13,669 --> 00:19:21,739
stuff is not always so easy as it looks

00:19:15,409 --> 00:19:23,839
like so here we have now our other the

00:19:21,739 --> 00:19:25,609
worker that is performing all our tasks

00:19:23,839 --> 00:19:27,950
for us we tell him I don't do a

00:19:25,609 --> 00:19:29,749
clipboard a cleaner keyboard and i work

00:19:27,950 --> 00:19:31,879
at just is able to do three tasks at a

00:19:29,749 --> 00:19:33,679
time so we can add now another worker

00:19:31,879 --> 00:19:36,139
now they start piling up and queuing up

00:19:33,679 --> 00:19:37,489
and slowly step by step we get a bigger

00:19:36,139 --> 00:19:39,889
and bigger queue and we don't want that

00:19:37,489 --> 00:19:44,059
they're not very resource intense but

00:19:39,889 --> 00:19:45,769
they clog our workers so we start up a

00:19:44,059 --> 00:19:48,469
new container here the difference is

00:19:45,769 --> 00:19:50,509
that is too fast it already started I

00:19:48,469 --> 00:19:52,459
pressed enter it started up the whole

00:19:50,509 --> 00:19:55,899
app and it's instantaneous you started

00:19:52,459 --> 00:20:01,749
working on it this is kind of awesome or

00:19:55,899 --> 00:20:04,459
yeah I think I'm pretty fast okay um

00:20:01,749 --> 00:20:07,279
well so what is happening here right now

00:20:04,459 --> 00:20:10,369
is I added a second container with a

00:20:07,279 --> 00:20:12,139
broker in it to my whole setup told it

00:20:10,369 --> 00:20:14,059
you connect to this Redis instance and

00:20:12,139 --> 00:20:16,190
start working immediately and so it got

00:20:14,059 --> 00:20:18,110
there pulled the first task of their

00:20:16,190 --> 00:20:19,340
started working or sleeping on it

00:20:18,110 --> 00:20:20,929
and takes the next one the next one the

00:20:19,340 --> 00:20:22,880
next one and now virtually could start

00:20:20,929 --> 00:20:24,799
like thousands of them as much for

00:20:22,880 --> 00:20:26,330
memory as I have in parallel and just

00:20:24,799 --> 00:20:30,200
work everything at once and then kill

00:20:26,330 --> 00:20:35,390
them all again at the end so that was

00:20:30,200 --> 00:20:37,150
the demonstration any questions here so

00:20:35,390 --> 00:20:43,670
we're not just going to kill them all

00:20:37,150 --> 00:20:46,630
bye-bye so dr. is awesome it's a super

00:20:43,670 --> 00:20:49,070
cool technology it will take a lot of

00:20:46,630 --> 00:20:51,590
overhead of your administration of you

00:20:49,070 --> 00:20:53,299
but it also has its downsides as I said

00:20:51,590 --> 00:20:55,730
it's not production ready yet they're

00:20:53,299 --> 00:20:58,429
still working on it filing on it making

00:20:55,730 --> 00:21:00,799
it prettier making the FBI's clean it's

00:20:58,429 --> 00:21:03,140
rapidly changing therefore you should

00:21:00,799 --> 00:21:05,840
run databases in it we can later talk up

00:21:03,140 --> 00:21:10,820
in ER for about a coffee about it but

00:21:05,840 --> 00:21:13,040
databases have more need more resources

00:21:10,820 --> 00:21:15,470
and it had different approaches that

00:21:13,040 --> 00:21:17,750
they need to do their superpowers and

00:21:15,470 --> 00:21:19,850
get out of there it does not give you

00:21:17,750 --> 00:21:22,760
security superpowers in a way it helps

00:21:19,850 --> 00:21:24,620
you a lot in putting your app in a

00:21:22,760 --> 00:21:27,110
container where it's almost secured to

00:21:24,620 --> 00:21:28,370
break out from it doesn't help you that

00:21:27,110 --> 00:21:31,130
you can write shitty code that people

00:21:28,370 --> 00:21:33,290
can break in this is not so if you use

00:21:31,130 --> 00:21:35,419
it cool you had get an additional layer

00:21:33,290 --> 00:21:42,919
of security but it doesn't make you

00:21:35,419 --> 00:21:47,929
invulnerable oval yeah you know last

00:21:42,919 --> 00:21:49,850
week ago the released version 0.8 has a

00:21:47,929 --> 00:21:52,309
new few new features you can finally use

00:21:49,850 --> 00:21:54,470
it from OS X they started to introduce

00:21:52,309 --> 00:21:58,309
one release per month so there will be

00:21:54,470 --> 00:22:00,799
at one point 10 dated new builder

00:21:58,309 --> 00:22:02,809
features for example that when you start

00:22:00,799 --> 00:22:04,940
up your container you can say bill

00:22:02,809 --> 00:22:07,850
unbilled and if you build the container

00:22:04,940 --> 00:22:09,740
then it gets executed so you can on the

00:22:07,850 --> 00:22:11,690
fly pull the fresh source code for

00:22:09,740 --> 00:22:14,540
example internal they made a lot of

00:22:11,690 --> 00:22:17,510
things faster more stable created a the

00:22:14,540 --> 00:22:19,040
registry a little bit better as I said

00:22:17,510 --> 00:22:20,690
brace yourself stalker one pillow is

00:22:19,040 --> 00:22:23,169
coming if they keep their promises

00:22:20,690 --> 00:22:26,390
within two months it would be awesome

00:22:23,169 --> 00:22:27,890
cool trick on the side you can let run

00:22:26,390 --> 00:22:30,050
docker on your remote server somewhere

00:22:27,890 --> 00:22:31,760
and let it point to your local host and

00:22:30,050 --> 00:22:33,530
then just use on your maker in unique

00:22:31,760 --> 00:22:36,890
localhost to remote control your docker

00:22:33,530 --> 00:22:39,860
containers friend roof told me at lunch

00:22:36,890 --> 00:22:42,020
that he recently had attended the

00:22:39,860 --> 00:22:46,160
security challenge and what they did is

00:22:42,020 --> 00:22:48,260
put on they shipped they ship the

00:22:46,160 --> 00:22:49,970
containers to challenges in docker

00:22:48,260 --> 00:22:51,890
containers to the people so everything

00:22:49,970 --> 00:22:53,150
was already there they just needed to

00:22:51,890 --> 00:22:54,950
start it up and could right away start

00:22:53,150 --> 00:22:59,660
working on it without having to download

00:22:54,950 --> 00:23:01,700
a full vm with a gigabyte of file size

00:22:59,660 --> 00:23:04,010
you just download like 150 megabyte

00:23:01,700 --> 00:23:06,380
container with everything in there mmm

00:23:04,010 --> 00:23:08,270
one thing that I want to say is rescue

00:23:06,380 --> 00:23:12,440
some of code completely not talk or

00:23:08,270 --> 00:23:14,840
related but super important we need help

00:23:12,440 --> 00:23:16,280
there we need people who sponsor eight

00:23:14,840 --> 00:23:18,200
we need people who are willing to coach

00:23:16,280 --> 00:23:20,120
be any people who are willing to answer

00:23:18,200 --> 00:23:21,500
questions and help out a little bit if

00:23:20,120 --> 00:23:24,140
you want to help if you want to

00:23:21,500 --> 00:23:26,570
contribute to this all open source find

00:23:24,140 --> 00:23:29,740
this lady talked to her she knows all

00:23:26,570 --> 00:23:39,140
details about it so thank you very much

00:23:29,740 --> 00:23:40,760
if you have my company was so nice to

00:23:39,140 --> 00:23:42,080
give me a voucher for this conference so

00:23:40,760 --> 00:23:43,970
if you sign up for content folder calm

00:23:42,080 --> 00:23:46,910
you get ten percent of your plan that

00:23:43,970 --> 00:23:48,800
you choose if you have any questions the

00:23:46,910 --> 00:23:50,930
talk will be online on my website it's

00:23:48,800 --> 00:23:52,340
all on github da creo and what i

00:23:50,930 --> 00:23:54,050
recommend you is doctor if you go to

00:23:52,340 --> 00:23:55,430
doctor to do they have a life

00:23:54,050 --> 00:23:57,560
interactive tutorial but i can play

00:23:55,430 --> 00:24:00,760
around it's pretty cool this is HTML and

00:23:57,560 --> 00:24:00,760

YouTube URL: https://www.youtube.com/watch?v=9UdmlN_Fcp0


