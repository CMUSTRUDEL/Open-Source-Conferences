Title: Kod.io 2014 - Fly, You Tools! by Piotr Szotkowski
Publication date: 2020-01-24
Playlist: Kod.io 2014
Description: 
	As developers we heavily depend on our tools of the trade, as oftentimes mastering them means getting out of deep trouble so much faster.
This talk covers some lesser known features of our everyday infrastructure : Git, PostgreSQL and command-line; tricks which make using these tools such a pleasure, regardless whether it's for shaving yet another yak or saving one's own skin.

Help us caption & translate this video!

http://amara.org/v/FG37/
Captions: 
	00:00:17,940 --> 00:00:24,630
and I'm here between you and your lunch

00:00:21,330 --> 00:00:27,600
so I will try to make it as quick as

00:00:24,630 --> 00:00:29,850
possible but at the same time my duty is

00:00:27,600 --> 00:00:31,590
to make you forget for about your lunch

00:00:29,850 --> 00:00:33,600
for the next half an hour or so let's

00:00:31,590 --> 00:00:35,790
see how it goes there are times when

00:00:33,600 --> 00:00:38,820
you're working on your code base like

00:00:35,790 --> 00:00:40,890
the chap here and it's Friday afternoon

00:00:38,820 --> 00:00:43,230
you're happily hacking at whatever

00:00:40,890 --> 00:00:46,410
you're doing but suddenly there's a

00:00:43,230 --> 00:00:48,930
little bag showing up somewhere in the

00:00:46,410 --> 00:00:51,570
code and you're like oops there might be

00:00:48,930 --> 00:00:53,820
a bag and your co-workers which you can

00:00:51,570 --> 00:00:56,280
see here but just pretend you're seeing

00:00:53,820 --> 00:00:59,519
Frodo or like don't don't look at the

00:00:56,280 --> 00:01:01,440
bag and but the bag shows up and attacks

00:00:59,519 --> 00:01:04,080
you and then you make faces at the bag

00:01:01,440 --> 00:01:07,140
and the bag makes faces at you and then

00:01:04,080 --> 00:01:09,360
you eventually vanquish it and if it's a

00:01:07,140 --> 00:01:11,430
typical back then then then you vanish

00:01:09,360 --> 00:01:13,200
it and it's okay if it's a Jesus back

00:01:11,430 --> 00:01:14,880
which you think you have it nailed down

00:01:13,200 --> 00:01:18,470
pretty well and comes back to haunt you

00:01:14,880 --> 00:01:21,930
three days later then this is basically

00:01:18,470 --> 00:01:24,360
Elon on Monday but the the upside is you

00:01:21,930 --> 00:01:28,530
have all those very nice stories to tell

00:01:24,360 --> 00:01:30,630
afterwards from the trenches and just

00:01:28,530 --> 00:01:33,600
think for a second how different could

00:01:30,630 --> 00:01:36,270
it be if kind of a better tooling would

00:01:33,600 --> 00:01:39,150
if he were a better engineer if he

00:01:36,270 --> 00:01:47,120
actually knew his tools would this be

00:01:39,150 --> 00:01:49,950
what he tells to our fellow ship and

00:01:47,120 --> 00:01:52,320
everybody else I'm Peter I work at a

00:01:49,950 --> 00:01:54,810
university I'm the CSO they were also

00:01:52,320 --> 00:01:56,610
based Ruby and rice consultancy if you

00:01:54,810 --> 00:02:01,200
want us to work for you get in touch

00:01:56,610 --> 00:02:03,060
with me and the stalk is based on a

00:02:01,200 --> 00:02:05,460
couple of assumptions you know there are

00:02:03,060 --> 00:02:07,590
nifty things you can do it tools you've

00:02:05,460 --> 00:02:10,500
seen some blog posts that describe them

00:02:07,590 --> 00:02:12,360
in excruciating detail and you can

00:02:10,500 --> 00:02:14,610
remember ninety percent of what that

00:02:12,360 --> 00:02:16,920
blocks were about including that one

00:02:14,610 --> 00:02:20,420
trick that you really wanted to remember

00:02:16,920 --> 00:02:23,129
so it would be cool if somebody just

00:02:20,420 --> 00:02:25,379
just limited this to all the tricks that

00:02:23,129 --> 00:02:28,590
are actually useful at our maybe not

00:02:25,379 --> 00:02:31,380
necessarily very widely known will cover

00:02:28,590 --> 00:02:31,800
gate will cover a bit tiny bit of

00:02:31,380 --> 00:02:34,800
progress

00:02:31,800 --> 00:02:38,130
ql obviously this is what we have to

00:02:34,800 --> 00:02:40,580
cover and actually we'll also cover some

00:02:38,130 --> 00:02:43,530
command line to link and some basic

00:02:40,580 --> 00:02:46,920
piping between the link let's start with

00:02:43,530 --> 00:02:49,890
get get is this this wonderful thing

00:02:46,920 --> 00:02:51,240
that we use we know that it it looks

00:02:49,890 --> 00:02:53,100
like a sharp knife and the hound was

00:02:51,240 --> 00:02:56,370
also a knife and each side contains more

00:02:53,100 --> 00:02:58,290
knives frak frak chewy but then you

00:02:56,370 --> 00:03:00,480
learn more about gate and you have all

00:02:58,290 --> 00:03:02,730
of those visions like how branches work

00:03:00,480 --> 00:03:04,650
and you eventually realize that their

00:03:02,730 --> 00:03:06,090
common morphic and the functors mappings

00:03:04,650 --> 00:03:08,760
mother falls of a hilbert space and

00:03:06,090 --> 00:03:11,460
everything just fits into place and the

00:03:08,760 --> 00:03:14,370
nice things about gate is you can fly

00:03:11,460 --> 00:03:16,980
very nice games with your team by using

00:03:14,370 --> 00:03:19,890
it you can create a remote branch called

00:03:16,980 --> 00:03:21,840
head and see what happens especially

00:03:19,890 --> 00:03:24,360
close to a release that that's up

00:03:21,840 --> 00:03:26,310
actually very nice you can use unicode

00:03:24,360 --> 00:03:29,850
lace because these are just just you

00:03:26,310 --> 00:03:32,370
know files on the disk and the things

00:03:29,850 --> 00:03:34,770
that actually are very nice about about

00:03:32,370 --> 00:03:37,920
gates is that you can alter the comets

00:03:34,770 --> 00:03:41,090
and history git commit amend which can

00:03:37,920 --> 00:03:44,190
also be a barrier Ravi ated apparently

00:03:41,090 --> 00:03:46,200
it's something that you can use very

00:03:44,190 --> 00:03:48,750
often to update the previous comment

00:03:46,200 --> 00:03:51,090
that you just made but this is actually

00:03:48,750 --> 00:03:53,400
the the text I read it for those in the

00:03:51,090 --> 00:03:55,560
back just discovered get rebates

00:03:53,400 --> 00:03:57,750
interactive auto squash holy we'll

00:03:55,560 --> 00:04:00,270
never again need to do any work that was

00:03:57,750 --> 00:04:01,650
actually the tweet that prompted me to

00:04:00,270 --> 00:04:03,000
give this talk because I didn't know

00:04:01,650 --> 00:04:05,970
about git rebase interactive photo

00:04:03,000 --> 00:04:07,709
squash and I am really happy that I know

00:04:05,970 --> 00:04:10,980
now so hopefully you will also know

00:04:07,709 --> 00:04:14,250
about it in a second let's start with a

00:04:10,980 --> 00:04:16,500
simple git repository and let's start

00:04:14,250 --> 00:04:18,720
with creating an empty comet this is

00:04:16,500 --> 00:04:21,090
something you don't usually do but if

00:04:18,720 --> 00:04:22,890
you ever had this nagging thought that

00:04:21,090 --> 00:04:25,080
maybe you really really need to rewrite

00:04:22,890 --> 00:04:28,710
that project which probably you have to

00:04:25,080 --> 00:04:31,290
you have had many times I've I have it

00:04:28,710 --> 00:04:33,660
about every other day and I rewrite my

00:04:31,290 --> 00:04:36,690
pet projects about every quarter this

00:04:33,660 --> 00:04:38,160
allows you to create an empty comment at

00:04:36,690 --> 00:04:40,410
the root of your repo so we can then

00:04:38,160 --> 00:04:42,510
branch off of this comet without it

00:04:40,410 --> 00:04:44,220
having any files if you want to rewrite

00:04:42,510 --> 00:04:45,390
your application in a different

00:04:44,220 --> 00:04:47,250
programming language

00:04:45,390 --> 00:04:51,480
actually rewrite it in the same repo and

00:04:47,250 --> 00:04:53,700
just switch the master at some point for

00:04:51,480 --> 00:04:56,490
all the fun for your users while this

00:04:53,700 --> 00:04:58,170
being the same repo so let's say we have

00:04:56,490 --> 00:05:00,360
this comment it has a very nice shower

00:04:58,170 --> 00:05:02,330
because we're very lucky it's looks like

00:05:00,360 --> 00:05:04,620
it tries to spell ageless but can't and

00:05:02,330 --> 00:05:07,340
let's say we have a readme because we

00:05:04,620 --> 00:05:11,790
are of the readme driven development

00:05:07,340 --> 00:05:15,090
cult and let's add this file its

00:05:11,790 --> 00:05:18,870
committed again we we are lucky to have

00:05:15,090 --> 00:05:21,270
the cabbage shot of the comet and let's

00:05:18,870 --> 00:05:22,950
start coding we are working on an

00:05:21,270 --> 00:05:24,090
application to take over the world so

00:05:22,950 --> 00:05:28,170
obviously this is the first

00:05:24,090 --> 00:05:31,050
implementation and let's also add this

00:05:28,170 --> 00:05:34,800
comment it with a cult foo hash and

00:05:31,050 --> 00:05:37,290
let's review what we have so far the

00:05:34,800 --> 00:05:40,140
gate lock on one line the crate is a

00:05:37,290 --> 00:05:42,510
very very nice thing to have for example

00:05:40,140 --> 00:05:45,180
earliest because it gives you a lock

00:05:42,510 --> 00:05:48,090
with just the shower and the comet

00:05:45,180 --> 00:05:50,280
message and if there are any branch is

00:05:48,090 --> 00:05:52,050
pointing at this comet it also spells

00:05:50,280 --> 00:05:54,390
them there are a lot of blog posts that

00:05:52,050 --> 00:05:58,140
say what you can pass to this command to

00:05:54,390 --> 00:06:00,420
make it all colorful but if you want to

00:05:58,140 --> 00:06:03,360
just use it the quickest way is just

00:06:00,420 --> 00:06:06,000
this and by the way if you're into

00:06:03,360 --> 00:06:08,160
colorful slides unfortunately there

00:06:06,000 --> 00:06:11,610
won't be any more color in this talk

00:06:08,160 --> 00:06:15,060
it's all black and white pretending it's

00:06:11,610 --> 00:06:17,750
white on black so let's let's fix our

00:06:15,060 --> 00:06:20,130
read me now we really weren't actually

00:06:17,750 --> 00:06:22,920
that good at writing the reading we

00:06:20,130 --> 00:06:24,540
should have it capitalized and the

00:06:22,920 --> 00:06:27,780
simplest way to capitalize the file is

00:06:24,540 --> 00:06:29,520
to use the TR tool which translates one

00:06:27,780 --> 00:06:31,230
group of characters into another so this

00:06:29,520 --> 00:06:33,720
one translate all lowercase characters

00:06:31,230 --> 00:06:35,970
into upper case characters but if we

00:06:33,720 --> 00:06:38,220
just run it it would display it and if

00:06:35,970 --> 00:06:40,740
we just pipe it back to read me and the

00:06:38,220 --> 00:06:42,630
readme was long enough it would corrupt

00:06:40,740 --> 00:06:44,220
the file because it would try to read

00:06:42,630 --> 00:06:46,020
from the file and write to it at the

00:06:44,220 --> 00:06:47,940
same time so it would overwrite the file

00:06:46,020 --> 00:06:50,340
what people usually do is create a

00:06:47,940 --> 00:06:52,470
temporary file and that move it over but

00:06:50,340 --> 00:06:53,730
what you might find using in the future

00:06:52,470 --> 00:06:56,490
now that you know about it there's a

00:06:53,730 --> 00:06:58,930
sponge utility which basically sucks

00:06:56,490 --> 00:07:01,870
anything that goes into it and I

00:06:58,930 --> 00:07:04,479
puts it to a file only when it's

00:07:01,870 --> 00:07:07,449
finished this is very very nice thing to

00:07:04,479 --> 00:07:11,979
use when you want to alter a file in

00:07:07,449 --> 00:07:16,060
place so now we have this and the trick

00:07:11,979 --> 00:07:18,970
is we really want this change that we

00:07:16,060 --> 00:07:20,979
now have to alter this comet not the

00:07:18,970 --> 00:07:24,039
newest comet we could do it just get

00:07:20,979 --> 00:07:25,960
comment amend or get comment ammon but

00:07:24,039 --> 00:07:30,490
we actually want to do this to this

00:07:25,960 --> 00:07:32,349
comet so what we can do is we can make

00:07:30,490 --> 00:07:34,419
the comet message in a very particular

00:07:32,349 --> 00:07:38,020
format if the commit message is fix a

00:07:34,419 --> 00:07:39,940
bank space and then this shower or just

00:07:38,020 --> 00:07:44,199
like large enough part of the shower

00:07:39,940 --> 00:07:46,300
like cabbage to to fix it up then the

00:07:44,199 --> 00:07:49,240
magic can happen so this is another

00:07:46,300 --> 00:07:51,729
comet just like the fourth comet if we

00:07:49,240 --> 00:07:53,020
now see the log is age less than the

00:07:51,729 --> 00:07:58,300
cabbage and the code food in the seafood

00:07:53,020 --> 00:07:59,889
and if we now rebase our branch against

00:07:58,300 --> 00:08:02,889
the parent of the cabbage so to speak

00:07:59,889 --> 00:08:04,780
then if we do interactive it will allow

00:08:02,889 --> 00:08:07,720
us to reorder the Comets but if we do

00:08:04,780 --> 00:08:12,520
out of squash it will also understand

00:08:07,720 --> 00:08:14,470
this fix up comment and it will provide

00:08:12,520 --> 00:08:16,840
us with an editor that already have this

00:08:14,470 --> 00:08:20,229
comment next to the cabbage and market

00:08:16,840 --> 00:08:21,789
as a fix-up if we save it then the lock

00:08:20,229 --> 00:08:23,889
will look like this first the age less

00:08:21,789 --> 00:08:26,770
than the cabbage and seafood squashed

00:08:23,889 --> 00:08:29,830
into bad food and then the code fool

00:08:26,770 --> 00:08:32,770
with a new show of beagles because it

00:08:29,830 --> 00:08:34,779
has a different parent now so get

00:08:32,770 --> 00:08:38,020
rebates interactive auto squash very

00:08:34,779 --> 00:08:40,060
useful ok let's go on let's say we have

00:08:38,020 --> 00:08:42,760
a file that for example stores the ruby

00:08:40,060 --> 00:08:46,329
version of a program that we use we add

00:08:42,760 --> 00:08:49,930
it we come at it we and then we want to

00:08:46,329 --> 00:08:51,640
use a different version of Ruby but only

00:08:49,930 --> 00:08:55,360
on our laptop we want the repository to

00:08:51,640 --> 00:08:58,870
still have the 2.0 version so we save

00:08:55,360 --> 00:09:02,290
2.1 the trick is now we have this file

00:08:58,870 --> 00:09:04,930
modified in our working copy git status

00:09:02,290 --> 00:09:06,760
short branch is a very nice way of

00:09:04,930 --> 00:09:09,040
displaying status it shows you which

00:09:06,760 --> 00:09:11,230
branch are you on and what are the

00:09:09,040 --> 00:09:12,209
changed files without all the usual git

00:09:11,230 --> 00:09:13,499
status craft

00:09:12,209 --> 00:09:16,290
this is also something that might be

00:09:13,499 --> 00:09:18,089
very useful so now we have the situation

00:09:16,290 --> 00:09:20,069
where we have a modified file in our

00:09:18,089 --> 00:09:21,749
working copy but we don't want to

00:09:20,069 --> 00:09:23,670
comment that change and we don't want to

00:09:21,749 --> 00:09:25,679
be reminded that the change is there all

00:09:23,670 --> 00:09:27,869
the time so we have to skip it when

00:09:25,679 --> 00:09:29,910
committing stuff we can do get update

00:09:27,869 --> 00:09:32,670
index assume unchanged and then that

00:09:29,910 --> 00:09:35,309
file and then when we run status it will

00:09:32,670 --> 00:09:37,889
show that it's actually not change and

00:09:35,309 --> 00:09:38,939
the nice well you in general you

00:09:37,889 --> 00:09:41,279
shouldn't have those kinds of situations

00:09:38,939 --> 00:09:42,809
where you have a file and repository a

00:09:41,279 --> 00:09:45,899
different version of that file in your

00:09:42,809 --> 00:09:47,160
check out in your working copy and and

00:09:45,899 --> 00:09:49,139
you keep ignoring it but there are

00:09:47,160 --> 00:09:51,779
certain edge cases when this is actually

00:09:49,139 --> 00:09:53,279
useful like dot r vm RC files some

00:09:51,779 --> 00:09:54,569
configurations files that shouldn't be

00:09:53,279 --> 00:09:57,149
in the repository in the first place but

00:09:54,569 --> 00:09:58,829
are and you have a local changes get

00:09:57,149 --> 00:10:01,079
update index as human changes is very

00:09:58,829 --> 00:10:02,819
useful and it will actually tell you if

00:10:01,079 --> 00:10:04,980
there are some updates to that file in

00:10:02,819 --> 00:10:09,389
the repository that can be merged to

00:10:04,980 --> 00:10:13,949
your version so let's go on let's create

00:10:09,389 --> 00:10:17,490
a new a new branch pinkie and let's

00:10:13,949 --> 00:10:20,189
let's realize that our the world

00:10:17,490 --> 00:10:22,559
domination application is actually run

00:10:20,189 --> 00:10:24,059
able by anyone whereas we want to we

00:10:22,559 --> 00:10:25,799
want it to be only runnable by brain

00:10:24,059 --> 00:10:28,019
because he's the one who's supposed to

00:10:25,799 --> 00:10:29,730
take over the world and pinkie is not

00:10:28,019 --> 00:10:32,549
necessarily supposed to take over the

00:10:29,730 --> 00:10:35,819
world on their own so let's adjust the

00:10:32,549 --> 00:10:37,170
plans that if this is run by brain then

00:10:35,819 --> 00:10:42,089
we actually take over the world

00:10:37,170 --> 00:10:44,429
otherwise we say well nice try the thing

00:10:42,089 --> 00:10:46,740
is when we run git diff get dave tells

00:10:44,429 --> 00:10:48,959
us that we have removed one line and

00:10:46,740 --> 00:10:51,240
added five other lines which is not

00:10:48,959 --> 00:10:53,459
necessarily true we actually indented

00:10:51,240 --> 00:10:55,829
that single line a bit and wrapped it

00:10:53,459 --> 00:10:58,559
around in conditional logic or wrapped

00:10:55,829 --> 00:11:01,379
it and conditioner Rajic so what we can

00:10:58,559 --> 00:11:04,259
do is get this ignore own space and it

00:11:01,379 --> 00:11:05,970
will show us the diff without whitespace

00:11:04,259 --> 00:11:08,549
changes this is very useful if you have

00:11:05,970 --> 00:11:11,339
a co-worker who make some changes and

00:11:08,549 --> 00:11:13,889
also in dense the whole file this is

00:11:11,339 --> 00:11:15,480
very useful or if you're the nice

00:11:13,889 --> 00:11:17,249
co-worker that Rendon's the whole file

00:11:15,480 --> 00:11:19,410
and make sure that it's only a ray

00:11:17,249 --> 00:11:21,269
indenting commit because for example you

00:11:19,410 --> 00:11:22,769
anticipate this is that file somebody

00:11:21,269 --> 00:11:24,899
works and so you of course go and we

00:11:22,769 --> 00:11:25,260
indent it at white space and so forth so

00:11:24,899 --> 00:11:30,870
here's

00:11:25,260 --> 00:11:33,090
fun and or or or she and then this

00:11:30,870 --> 00:11:36,260
allows you to display things without

00:11:33,090 --> 00:11:39,420
whitespace changes we can add this and

00:11:36,260 --> 00:11:41,550
we have another comment and now we want

00:11:39,420 --> 00:11:43,680
to switch back to master we could get

00:11:41,550 --> 00:11:46,290
check out master but we can actually go

00:11:43,680 --> 00:11:47,700
git checkout dash this is exactly how CD

00:11:46,290 --> 00:11:49,560
dash in the console that takes you to

00:11:47,700 --> 00:11:51,450
the previous directory this actually

00:11:49,560 --> 00:11:53,370
takes you to the previous branch so if

00:11:51,450 --> 00:11:55,110
we run it now we switch to master if we

00:11:53,370 --> 00:11:57,690
run git checkout the dash again it

00:11:55,110 --> 00:11:59,490
switches us back to pinky this is very

00:11:57,690 --> 00:12:01,140
useful if you work on a branch then go

00:11:59,490 --> 00:12:03,960
back to master than on a branch then go

00:12:01,140 --> 00:12:06,930
back to master get check out dash ok so

00:12:03,960 --> 00:12:08,880
what did we learn about get so far we

00:12:06,930 --> 00:12:12,030
can create empty comments we can rebase

00:12:08,880 --> 00:12:13,530
with Otto squashing and make it look

00:12:12,030 --> 00:12:16,800
like we knew what we are doing all along

00:12:13,530 --> 00:12:18,480
we can update index so that it doesn't

00:12:16,800 --> 00:12:20,970
track files that we don't want it to

00:12:18,480 --> 00:12:24,380
track we can do get update index no

00:12:20,970 --> 00:12:27,990
assume unchanged which revert that that

00:12:24,380 --> 00:12:30,630
change and git diff dash W is the short

00:12:27,990 --> 00:12:32,730
shortened version of ignore white space

00:12:30,630 --> 00:12:35,760
and actually if you have a github URL

00:12:32,730 --> 00:12:38,910
that shows you at this if you add W

00:12:35,760 --> 00:12:40,500
equals 1 at the end of the URL then you

00:12:38,910 --> 00:12:41,640
will get help will not display

00:12:40,500 --> 00:12:44,580
widespread change this is very useful

00:12:41,640 --> 00:12:46,860
when you reviewing PRS to just hide the

00:12:44,580 --> 00:12:48,450
Y speed changes git checkout dash takes

00:12:46,860 --> 00:12:50,730
you to a previous branch and one thing

00:12:48,450 --> 00:12:53,120
that you probably some of you maybe most

00:12:50,730 --> 00:12:55,800
of you knew all along if you want to add

00:12:53,120 --> 00:12:58,110
only some changes that you made to your

00:12:55,800 --> 00:13:01,680
next comment you get you do get at Dash

00:12:58,110 --> 00:13:04,440
P which goes one file after another by

00:13:01,680 --> 00:13:06,300
adding chunk after chunk or patch after

00:13:04,440 --> 00:13:08,070
patch that you made so we can compose a

00:13:06,300 --> 00:13:10,290
comet that is only from some of the

00:13:08,070 --> 00:13:12,270
changes that you made but what I didn't

00:13:10,290 --> 00:13:14,310
know and you might not as well dash B

00:13:12,270 --> 00:13:16,200
also works with get check out so we can

00:13:14,310 --> 00:13:19,230
revert some of the changes but not all

00:13:16,200 --> 00:13:21,510
and also with git stash so you can stash

00:13:19,230 --> 00:13:24,360
only parts of the changes that you made

00:13:21,510 --> 00:13:27,030
but not the others so this is the last

00:13:24,360 --> 00:13:30,840
thing about get that I think it's worth

00:13:27,030 --> 00:13:35,700
using on everyday basis so let's go

00:13:30,840 --> 00:13:37,380
further postgresql postgresql this

00:13:35,700 --> 00:13:38,920
wonderful database that unfortunately is

00:13:37,380 --> 00:13:41,860
not the most popular relations

00:13:38,920 --> 00:13:45,490
the base maybe it could have been if it

00:13:41,860 --> 00:13:47,560
was named differently but we can work on

00:13:45,490 --> 00:13:50,769
that we can work on the naming of post

00:13:47,560 --> 00:13:52,300
gray school and I will do my best to to

00:13:50,769 --> 00:13:56,649
name it like this until the end of this

00:13:52,300 --> 00:13:58,420
talk so the actual important thing that

00:13:56,649 --> 00:14:00,399
you should know about post grade school

00:13:58,420 --> 00:14:02,949
is this page if you go to the

00:14:00,399 --> 00:14:07,149
documentation if you look at the data

00:14:02,949 --> 00:14:10,120
tapes URL for postgresql documentation

00:14:07,149 --> 00:14:12,639
you will see all the native state native

00:14:10,120 --> 00:14:14,019
types that post grad school supports and

00:14:12,639 --> 00:14:17,019
if this doesn't convince you this is the

00:14:14,019 --> 00:14:20,560
best are DBM as ever then we need to

00:14:17,019 --> 00:14:22,540
talk seriously okay let's say we have a

00:14:20,560 --> 00:14:25,480
database and let's say we want to track

00:14:22,540 --> 00:14:28,899
the agenda for this conference so we can

00:14:25,480 --> 00:14:31,329
create our own type that is a enim of

00:14:28,899 --> 00:14:33,940
either first track second track or both

00:14:31,329 --> 00:14:36,790
tracks and we can use it just as an

00:14:33,940 --> 00:14:39,370
every any other postgresql types we can

00:14:36,790 --> 00:14:42,040
create a table that tracks the track the

00:14:39,370 --> 00:14:45,490
speaker the title then has this column

00:14:42,040 --> 00:14:47,140
that is strange that we will get into in

00:14:45,490 --> 00:14:50,079
a second and then it has this

00:14:47,140 --> 00:14:53,890
interesting text square brackets column

00:14:50,079 --> 00:14:56,850
what we can do we can insert a the first

00:14:53,890 --> 00:15:00,880
item which is registration and this

00:14:56,850 --> 00:15:03,459
strange column is a time stamp with time

00:15:00,880 --> 00:15:06,790
zone range which means if you want to

00:15:03,459 --> 00:15:10,480
track things that happen that have some

00:15:06,790 --> 00:15:13,360
time spans for example or are happening

00:15:10,480 --> 00:15:15,160
between two different years or any kind

00:15:13,360 --> 00:15:18,220
of range you can actually track ranges

00:15:15,160 --> 00:15:22,120
in postgresql this means that this range

00:15:18,220 --> 00:15:25,390
includes the 830 and that parentheses

00:15:22,120 --> 00:15:27,100
means it could excludes nine sharp so

00:15:25,390 --> 00:15:29,949
you can actually say whether the range

00:15:27,100 --> 00:15:32,920
is it inclusive or exclusive and on

00:15:29,949 --> 00:15:35,740
which end and when we select this we

00:15:32,920 --> 00:15:38,139
actually see that indeed this is a range

00:15:35,740 --> 00:15:39,940
of time stabbed with time zone and the

00:15:38,139 --> 00:15:44,920
time zone was properly inferred that

00:15:39,940 --> 00:15:47,890
this is the CET time zone ok let's go

00:15:44,920 --> 00:15:52,060
further let's create another agenda item

00:15:47,890 --> 00:15:52,720
and let's also include one more now with

00:15:52,060 --> 00:15:56,050
the

00:15:52,720 --> 00:15:57,759
tax is an array of strings we can

00:15:56,050 --> 00:16:00,730
actually have arrays in postgresql

00:15:57,759 --> 00:16:03,790
columns and the syntax is kind of

00:16:00,730 --> 00:16:05,680
strange but your favorite postgresql

00:16:03,790 --> 00:16:08,290
adapter in your favorite programming

00:16:05,680 --> 00:16:11,970
language will take care of that and the

00:16:08,290 --> 00:16:16,600
nice thing is that we can again create

00:16:11,970 --> 00:16:20,560
entries that are arrays of whatever you

00:16:16,600 --> 00:16:22,899
want like numbers x ne ne postgresql

00:16:20,560 --> 00:16:24,879
type and now when we select it we can

00:16:22,899 --> 00:16:27,009
see that those two tag talks are tagged

00:16:24,879 --> 00:16:29,550
with C sharp mobile the first one and

00:16:27,009 --> 00:16:31,660
the second with CSS and color and

00:16:29,550 --> 00:16:34,959
there's actually very very useful

00:16:31,660 --> 00:16:36,790
because you can you don't need a

00:16:34,959 --> 00:16:38,410
separate tax table and you don't need a

00:16:36,790 --> 00:16:41,439
separate join table you can actually

00:16:38,410 --> 00:16:46,149
index this column and the searches will

00:16:41,439 --> 00:16:48,389
work fairly well so let's let's insert a

00:16:46,149 --> 00:16:53,079
couple of more a couple more talks and

00:16:48,389 --> 00:16:54,939
what the range is allow us is that we

00:16:53,079 --> 00:16:57,490
can actually ask the range for its lower

00:16:54,939 --> 00:17:01,240
bound and of course this will give us a

00:16:57,490 --> 00:17:02,980
time stamp so we can test it to car and

00:17:01,240 --> 00:17:04,329
say we only are interested in our in a

00:17:02,980 --> 00:17:07,600
minute and we can have a very nice

00:17:04,329 --> 00:17:12,880
agenda of all the talks that we have

00:17:07,600 --> 00:17:15,579
seen so far and again because that time

00:17:12,880 --> 00:17:18,250
is arranged we can ask what were the

00:17:15,579 --> 00:17:21,909
talks that were happening at 9 45 and

00:17:18,250 --> 00:17:24,819
this is talks were time included this

00:17:21,909 --> 00:17:27,640
thing again the syntax is kind of bumpy

00:17:24,819 --> 00:17:30,669
but your your library will take care of

00:17:27,640 --> 00:17:32,530
that Ruby Python other languages for

00:17:30,669 --> 00:17:34,780
sure have libraries that take care of

00:17:32,530 --> 00:17:38,679
this so we can say right these two talks

00:17:34,780 --> 00:17:40,090
were happening at 9 45 and just as well

00:17:38,679 --> 00:17:42,600
we can say what are the talks that are

00:17:40,090 --> 00:17:46,360
taxed either with angularjs or

00:17:42,600 --> 00:17:49,450
JavaScript again the syntax is kind of

00:17:46,360 --> 00:17:52,240
not necessarily very intuitive but

00:17:49,450 --> 00:17:54,370
basically we say we're angularjs is in

00:17:52,240 --> 00:17:56,500
any of the tax or javascript is any of

00:17:54,370 --> 00:17:59,440
the tax and again we can see that so far

00:17:56,500 --> 00:18:02,440
these two talks were about JavaScript

00:17:59,440 --> 00:18:05,440
and arguer jas so cause grace cool

00:18:02,440 --> 00:18:06,460
custom types ranges are a search you can

00:18:05,440 --> 00:18:10,300
create wonderful

00:18:06,460 --> 00:18:12,640
vector searches H store which is key

00:18:10,300 --> 00:18:15,760
value store j zone and geometry types

00:18:12,640 --> 00:18:18,490
and post gates and xml you can index xml

00:18:15,760 --> 00:18:21,670
and query it and you can work with mark

00:18:18,490 --> 00:18:23,590
ipv4 and ipv6 addresses and uuid is

00:18:21,670 --> 00:18:25,810
supported natively and so on and so

00:18:23,590 --> 00:18:27,550
forth this really post grad school is

00:18:25,810 --> 00:18:29,170
really really the hackers database

00:18:27,550 --> 00:18:34,000
please play with it when you have time

00:18:29,170 --> 00:18:36,430
there is quite often there is not much

00:18:34,000 --> 00:18:40,690
need for youth other databases ordered

00:18:36,430 --> 00:18:42,970
other than than being a different kind

00:18:40,690 --> 00:18:45,910
of they have properties like being in

00:18:42,970 --> 00:18:48,130
memory or anything like this okay the

00:18:45,910 --> 00:18:50,740
last part CLI there are tons of comments

00:18:48,130 --> 00:18:54,070
useful in everyday basis this will be

00:18:50,740 --> 00:18:57,340
just some of them and some pipe shining

00:18:54,070 --> 00:18:58,900
because some of you probably uses on an

00:18:57,340 --> 00:19:01,000
everyday basis some of you might not

00:18:58,900 --> 00:19:03,790
this is actually very easy unless you do

00:19:01,000 --> 00:19:05,770
this would miss type find out X arcs

00:19:03,790 --> 00:19:08,680
around pipeline backfire skinning to do

00:19:05,770 --> 00:19:10,570
but you borrowed a lot of stuff on CL I

00:19:08,680 --> 00:19:13,900
so that actually might have been the

00:19:10,570 --> 00:19:16,660
reason okay let's say we want to look at

00:19:13,900 --> 00:19:19,930
some files in our repository in this

00:19:16,660 --> 00:19:22,060
case rails models find will display all

00:19:19,930 --> 00:19:26,110
the files matching this pattern in this

00:19:22,060 --> 00:19:29,470
directory if we now pipe this 2x arcs

00:19:26,110 --> 00:19:32,200
and then give exergue a command X orcs

00:19:29,470 --> 00:19:34,840
will run this command with those lines

00:19:32,200 --> 00:19:37,960
as parameters so this will actually tell

00:19:34,840 --> 00:19:42,210
us how many lines has each of those

00:19:37,960 --> 00:19:45,370
files in themselves if we now sort it in

00:19:42,210 --> 00:19:48,760
reverse order treating this as numbers

00:19:45,370 --> 00:19:51,130
so not alphabetically bad by numerically

00:19:48,760 --> 00:19:54,490
we can see what are the largest models

00:19:51,130 --> 00:19:57,580
in our code base I really wish this was

00:19:54,490 --> 00:19:59,320
a joke it's actually from a project I

00:19:57,580 --> 00:20:01,510
worked it not from the start just to

00:19:59,320 --> 00:20:03,670
make this clear this is something I work

00:20:01,510 --> 00:20:06,250
with there was a model with 36 hundred

00:20:03,670 --> 00:20:11,080
lines and there were two others that

00:20:06,250 --> 00:20:13,660
were over a thousand line each so the

00:20:11,080 --> 00:20:16,360
other thing is that you might want to

00:20:13,660 --> 00:20:18,610
check when you join a new project if you

00:20:16,360 --> 00:20:19,200
run get lock one line name only you will

00:20:18,610 --> 00:20:23,100
see

00:20:19,200 --> 00:20:25,080
the comet information and then the files

00:20:23,100 --> 00:20:26,970
that were altered then another comet and

00:20:25,080 --> 00:20:29,940
all the files that will altered if we

00:20:26,970 --> 00:20:33,299
grab only the in this case Ruby files

00:20:29,940 --> 00:20:36,570
out of this command we will see only the

00:20:33,299 --> 00:20:38,940
ruby file but the file will be repeated

00:20:36,570 --> 00:20:40,409
every time there was a comment that

00:20:38,940 --> 00:20:42,659
altered it because it basically means

00:20:40,409 --> 00:20:44,429
the the newest commit altered the first

00:20:42,659 --> 00:20:45,840
file the second commit probably the

00:20:44,429 --> 00:20:48,419
other two and so on and so forth these

00:20:45,840 --> 00:20:50,880
are just files one after one altered by

00:20:48,419 --> 00:20:54,090
all the subsequent comments if we now

00:20:50,880 --> 00:20:57,210
sort this and pipe it to unique dash C

00:20:54,090 --> 00:21:00,120
unique will tell us how many times a div

00:20:57,210 --> 00:21:03,120
a different a given input string repeat

00:21:00,120 --> 00:21:06,330
so we can see that there are actually 63

00:21:03,120 --> 00:21:08,639
comments that alter this file and 183

00:21:06,330 --> 00:21:10,980
comets that alter that other file and

00:21:08,639 --> 00:21:15,240
only for comets that altered this file

00:21:10,980 --> 00:21:17,090
and if we again sorted by dash and or we

00:21:15,240 --> 00:21:19,590
can see that there is one particular

00:21:17,090 --> 00:21:23,309
model that was altered almost eleven

00:21:19,590 --> 00:21:25,620
hundred times again this is actual

00:21:23,309 --> 00:21:29,760
number like this this file was changed

00:21:25,620 --> 00:21:32,100
by almost 1100 comets and by now it has

00:21:29,760 --> 00:21:33,539
been changed by him anymore so this is

00:21:32,100 --> 00:21:35,130
this is a great way to find what the

00:21:33,539 --> 00:21:37,139
pain points are in a given code base

00:21:35,130 --> 00:21:39,120
like if there's a file that was altered

00:21:37,139 --> 00:21:41,909
many many times you probably should take

00:21:39,120 --> 00:21:44,639
a look at it before you accept to work

00:21:41,909 --> 00:21:46,500
on that let's say we have a migration

00:21:44,639 --> 00:21:48,690
log we have a lock of all the migration

00:21:46,500 --> 00:21:50,730
that we run with rightly be migrated if

00:21:48,690 --> 00:21:52,740
you don't know it basically says the way

00:21:50,730 --> 00:21:55,320
database was older than how much time it

00:21:52,740 --> 00:21:56,909
is it took and let's see let's try to

00:21:55,320 --> 00:21:59,639
figure out how much time all of the

00:21:56,909 --> 00:22:02,610
migrations took together we can grab the

00:21:59,639 --> 00:22:05,909
line that contains the migration time

00:22:02,610 --> 00:22:09,120
this is like this but we now we only not

00:22:05,909 --> 00:22:11,730
want to have the last part so there are

00:22:09,120 --> 00:22:13,769
many ways of taking that information out

00:22:11,730 --> 00:22:16,350
of it and there are many quick ways but

00:22:13,769 --> 00:22:19,169
i usually don't remember any of them so

00:22:16,350 --> 00:22:22,260
i usually work my way very painfully

00:22:19,169 --> 00:22:26,250
very slowly but actually step after step

00:22:22,260 --> 00:22:29,010
getting to where i want to go so what i

00:22:26,250 --> 00:22:32,280
can do is i can say thread this every

00:22:29,010 --> 00:22:35,190
line treat it as a space separated call

00:22:32,280 --> 00:22:37,170
so the delimiter should be a space and I

00:22:35,190 --> 00:22:39,450
want the fifth column this leaves me

00:22:37,170 --> 00:22:41,790
with that now I want to drop the S from

00:22:39,450 --> 00:22:43,650
the end so I can tell the translate tool

00:22:41,790 --> 00:22:45,720
that we knew previously not to translate

00:22:43,650 --> 00:22:47,340
one character to another or a group

00:22:45,720 --> 00:22:49,440
characters to another but just to delete

00:22:47,340 --> 00:22:52,100
all the s characters now I have those

00:22:49,440 --> 00:22:55,140
numbers if you can see just just pretend

00:22:52,100 --> 00:22:57,180
there are just numbers and now I can

00:22:55,140 --> 00:22:59,880
pipe it 2x arcs which will turn it into

00:22:57,180 --> 00:23:02,580
a line and then I can translate all the

00:22:59,880 --> 00:23:04,260
spaces into pluses and then I can pipe

00:23:02,580 --> 00:23:05,970
it to bc which is this command line

00:23:04,260 --> 00:23:08,730
calculator it actually happens much

00:23:05,970 --> 00:23:10,680
faster in real life unless you kind of

00:23:08,730 --> 00:23:13,470
keep messing up the comments and then we

00:23:10,680 --> 00:23:14,760
can see this set of migrations took four

00:23:13,470 --> 00:23:17,490
seconds you can actually do it much

00:23:14,760 --> 00:23:20,340
faster and I highly encourage you to

00:23:17,490 --> 00:23:22,200
check out why this also works and this

00:23:20,340 --> 00:23:24,390
is probably how I would do it if I ever

00:23:22,200 --> 00:23:26,010
remembered the parameters to the paste

00:23:24,390 --> 00:23:27,600
command which is very useful but I I

00:23:26,010 --> 00:23:29,640
knew it's very useful but I can't

00:23:27,600 --> 00:23:32,040
remember how it works so this is why I

00:23:29,640 --> 00:23:36,110
always end with this cut TR and so on

00:23:32,040 --> 00:23:39,660
pipeline ok two more things from this

00:23:36,110 --> 00:23:41,370
from this groups and three more things

00:23:39,660 --> 00:23:44,220
about command line tools if you ever

00:23:41,370 --> 00:23:47,100
wanted to compare the output of two

00:23:44,220 --> 00:23:50,040
commands in the past you probably would

00:23:47,100 --> 00:23:51,450
run one command pipe it to a file run

00:23:50,040 --> 00:23:53,430
another command pipe it to a different

00:23:51,450 --> 00:23:55,800
file and diff those two files together

00:23:53,430 --> 00:23:58,440
you can actually run those commands and

00:23:55,800 --> 00:24:00,420
sub shells and redirect their outputs to

00:23:58,440 --> 00:24:03,660
death like this and this will basically

00:24:00,420 --> 00:24:05,880
show you the difference in the output of

00:24:03,660 --> 00:24:10,080
running those two commands very useful

00:24:05,880 --> 00:24:11,910
when you need it and the next last thing

00:24:10,080 --> 00:24:14,190
is if you ever created a presentation

00:24:11,910 --> 00:24:16,460
and tools like PowerPoint or keynote you

00:24:14,190 --> 00:24:19,500
know that you can you want to have

00:24:16,460 --> 00:24:21,630
color-coded code examples like syntax

00:24:19,500 --> 00:24:23,700
highlighted but usually just want to

00:24:21,630 --> 00:24:26,130
copy them from your editor because you

00:24:23,700 --> 00:24:28,410
keep working on them in actual text

00:24:26,130 --> 00:24:30,510
editor what you can do is you can PD

00:24:28,410 --> 00:24:33,390
paste which will so we can open your

00:24:30,510 --> 00:24:35,220
editor copy a code fragment run PB pace

00:24:33,390 --> 00:24:36,600
which would paste that code fragment

00:24:35,220 --> 00:24:38,520
from the clipboard to the command line

00:24:36,600 --> 00:24:40,620
but rather than pasting it on your

00:24:38,520 --> 00:24:43,470
command line you can pipe it to pitchman

00:24:40,620 --> 00:24:45,760
ties which will colorize it with in this

00:24:43,470 --> 00:24:49,030
case assuming it's Ruby syntax and

00:24:45,760 --> 00:24:51,520
telling it to format is as RTS you can

00:24:49,030 --> 00:24:53,530
pipe it back to PB copy which we copied

00:24:51,520 --> 00:24:55,780
back to your clipboard and then you can

00:24:53,530 --> 00:24:57,760
paste it into a PowerPoint keynote

00:24:55,780 --> 00:25:00,130
whatever presentation software use and

00:24:57,760 --> 00:25:02,110
suddenly that text fragment will be

00:25:00,130 --> 00:25:04,900
colorized on its way through this

00:25:02,110 --> 00:25:06,460
pipeline very useful unless you do your

00:25:04,900 --> 00:25:08,440
presentations and stuff like regal GS

00:25:06,460 --> 00:25:11,800
where you have all the nice colors that

00:25:08,440 --> 00:25:13,360
you've been seeing here the last tool

00:25:11,800 --> 00:25:17,110
that I want to show you that I actually

00:25:13,360 --> 00:25:21,160
adore very very much pipe viewer if you

00:25:17,110 --> 00:25:24,250
ever had a large database dump that you

00:25:21,160 --> 00:25:25,900
wanted to import into a database if you

00:25:24,250 --> 00:25:27,550
yell at me that this is a useless use of

00:25:25,900 --> 00:25:29,440
cut I agree with you but I wanted this

00:25:27,550 --> 00:25:31,480
to be a very simple example you could

00:25:29,440 --> 00:25:35,110
actually redirect this file more

00:25:31,480 --> 00:25:37,750
elegantly to postgresql client but let's

00:25:35,110 --> 00:25:40,870
assume you you cut a large database dump

00:25:37,750 --> 00:25:42,460
into your database and time passes and

00:25:40,870 --> 00:25:43,570
you're getting bored you have no clue

00:25:42,460 --> 00:25:45,540
what's happening because those things

00:25:43,570 --> 00:25:48,430
actually don't show up in this game and

00:25:45,540 --> 00:25:51,130
you have no clue what's going on but you

00:25:48,430 --> 00:25:53,020
can rather than doing this you can use

00:25:51,130 --> 00:25:56,560
pipe viewer which is this little pv

00:25:53,020 --> 00:26:00,040
command that you put inside of your pipe

00:25:56,560 --> 00:26:02,020
pipe line so to speak and it will pass

00:26:00,040 --> 00:26:04,360
the input to its output so it won't

00:26:02,020 --> 00:26:07,420
alter the things you're cutting but it

00:26:04,360 --> 00:26:09,220
will show you how much data is passes is

00:26:07,420 --> 00:26:11,260
passing through it so it would tell you

00:26:09,220 --> 00:26:13,240
you've been doing this for 12 seconds

00:26:11,260 --> 00:26:15,880
it's been 97 megabytes so it's been

00:26:13,240 --> 00:26:17,170
twenty eight megabytes per second the

00:26:15,880 --> 00:26:20,530
nice thing though is you can actually

00:26:17,170 --> 00:26:23,050
run PI viewer on the file itself and it

00:26:20,530 --> 00:26:24,730
will output the file like a cut would do

00:26:23,050 --> 00:26:26,380
but it will actually tell you the

00:26:24,730 --> 00:26:28,630
progress because now it knows the size

00:26:26,380 --> 00:26:30,940
so it can tell you like it's been 97

00:26:28,630 --> 00:26:32,980
megabytes and we'll take another 24

00:26:30,940 --> 00:26:35,530
seconds so it's basically eternity until

00:26:32,980 --> 00:26:38,080
it completes and we are out thirty-two

00:26:35,530 --> 00:26:39,610
percent very useful for all kinds of

00:26:38,080 --> 00:26:41,740
operations that you have no clue how

00:26:39,610 --> 00:26:44,830
much time they will take if you're

00:26:41,740 --> 00:26:46,090
dumping a database you're usually out of

00:26:44,830 --> 00:26:48,400
luck because you don't know how large

00:26:46,090 --> 00:26:50,080
the dump will be but if you know that it

00:26:48,400 --> 00:26:52,990
should be around six hundred megabytes

00:26:50,080 --> 00:26:56,200
you can q pi viewer that it should be

00:26:52,990 --> 00:26:58,120
just assume the total sum will be six

00:26:56,200 --> 00:26:59,330
hundred megabytes and then you will get

00:26:58,120 --> 00:27:01,550
this progress even though

00:26:59,330 --> 00:27:03,410
you that the pipe view itself not

00:27:01,550 --> 00:27:05,840
necessarily know how large the the data

00:27:03,410 --> 00:27:08,990
will be and in this case I was wrong by

00:27:05,840 --> 00:27:13,580
eight megabytes and this dump took five

00:27:08,990 --> 00:27:16,190
minutes to complete okay some other CLI

00:27:13,580 --> 00:27:18,980
tools that you might find useful p grab

00:27:16,190 --> 00:27:21,520
and pickle for grabbing and killing

00:27:18,980 --> 00:27:25,640
processes but by their name rather than

00:27:21,520 --> 00:27:27,770
their process ID watch which will rerun

00:27:25,640 --> 00:27:29,750
a command every two seconds and show

00:27:27,770 --> 00:27:32,720
your output so if you're waiting for a

00:27:29,750 --> 00:27:35,360
command to change it output just put a

00:27:32,720 --> 00:27:37,310
watch before it and it will rerun it

00:27:35,360 --> 00:27:40,310
times and again if you ever did this

00:27:37,310 --> 00:27:43,040
like rerun it rerun it rerun it this is

00:27:40,310 --> 00:27:45,350
what computers are made to do timeout

00:27:43,040 --> 00:27:47,870
will timeout a comment after a given

00:27:45,350 --> 00:27:50,450
number of minutes hours whatever if you

00:27:47,870 --> 00:27:51,860
are making a backup and you're you know

00:27:50,450 --> 00:27:54,290
it's not supposed to take more than an

00:27:51,860 --> 00:27:56,960
hour you can say timeout one hour do the

00:27:54,290 --> 00:28:01,100
backup and if it won't finish timeout

00:27:56,960 --> 00:28:03,200
will kill it no parallel is so wonderful

00:28:01,100 --> 00:28:04,730
that I couldn't give it justice just

00:28:03,200 --> 00:28:06,500
read the documentation it's not only

00:28:04,730 --> 00:28:08,980
about running commands and prowl it's

00:28:06,500 --> 00:28:12,320
it's an absolute marvel of engineering

00:28:08,980 --> 00:28:14,570
just read about it NCD you if you ever

00:28:12,320 --> 00:28:16,370
run out of space on your servers which

00:28:14,570 --> 00:28:20,000
we never should but we all do probably

00:28:16,370 --> 00:28:22,430
and CD you will show you and courses

00:28:20,000 --> 00:28:25,070
text based interface which files are too

00:28:22,430 --> 00:28:27,650
big and which directories are can be

00:28:25,070 --> 00:28:29,690
probably get ridden off a proxy local

00:28:27,650 --> 00:28:31,340
can easily expose any port on your local

00:28:29,690 --> 00:28:33,290
machine to the outside world so if you

00:28:31,340 --> 00:28:34,700
have a local installation of a web

00:28:33,290 --> 00:28:36,800
application that you want to expose to

00:28:34,700 --> 00:28:38,150
the client you can use props local and

00:28:36,800 --> 00:28:39,740
it will give you a domain that is

00:28:38,150 --> 00:28:41,510
publicly visible and you can actually

00:28:39,740 --> 00:28:42,740
name that domain and this tool is

00:28:41,510 --> 00:28:44,960
actually free there are a ton of tunes

00:28:42,740 --> 00:28:47,390
but this one is actually free and and

00:28:44,960 --> 00:28:49,760
very easy to use our medicine if you

00:28:47,390 --> 00:28:51,470
ever wondered which version of the given

00:28:49,760 --> 00:28:53,750
package say post grade school is in

00:28:51,470 --> 00:28:55,400
which release of ubuntu or debian or

00:28:53,750 --> 00:28:57,650
medicine will tell you this you just go

00:28:55,400 --> 00:28:59,450
our Madison post grad school and it will

00:28:57,650 --> 00:29:01,310
show you like that version of ubuntu

00:28:59,450 --> 00:29:06,020
head post grad school 91 but the other

00:29:01,310 --> 00:29:08,210
has 9.3 very useful sometimes so to wrap

00:29:06,020 --> 00:29:11,990
up the talk this is an area that you all

00:29:08,210 --> 00:29:13,880
should have in your bash or see

00:29:11,990 --> 00:29:15,530
because rather than saying that boring

00:29:13,880 --> 00:29:17,710
pseudo you can actually say computer

00:29:15,530 --> 00:29:21,790
apt-get install post grade school

00:29:17,710 --> 00:29:25,429
computer reboot and so on and so forth

00:29:21,790 --> 00:29:28,100
there is a wonderful blog post get tips

00:29:25,429 --> 00:29:29,600
from the trenches a wonderful talk to

00:29:28,100 --> 00:29:31,130
watch five things you didn't know about

00:29:29,600 --> 00:29:33,350
post grad school that you really should

00:29:31,130 --> 00:29:34,880
watch post grad school awesomeness for

00:29:33,350 --> 00:29:38,000
Ray's developers if you happen to be one

00:29:34,880 --> 00:29:39,950
a very nice block of small snippets

00:29:38,000 --> 00:29:43,100
today I learned about small bites and

00:29:39,950 --> 00:29:44,929
bits of code with that that you can use

00:29:43,100 --> 00:29:47,450
every day but so small that you can and

00:29:44,929 --> 00:29:50,570
so seldom posted that you can actually

00:29:47,450 --> 00:29:52,490
internalize them and there's a CLI magic

00:29:50,570 --> 00:29:55,970
Twitter account that posts stuff like

00:29:52,490 --> 00:29:57,460
this and this is I'm sorry you can see

00:29:55,970 --> 00:30:00,170
it from the back but this basically

00:29:57,460 --> 00:30:02,150
lists all the comments that you have in

00:30:00,170 --> 00:30:04,910
your bin and user bin directories

00:30:02,150 --> 00:30:06,830
shuffles them takes the first one so

00:30:04,910 --> 00:30:09,350
basically a random one and then displays

00:30:06,830 --> 00:30:11,330
the man page of that command you can run

00:30:09,350 --> 00:30:12,770
this now and then and learn something

00:30:11,330 --> 00:30:15,650
new about your computer and maybe get

00:30:12,770 --> 00:30:20,570
frightened maybe get better maybe both

00:30:15,650 --> 00:30:21,679
so that's almost all i have for you the

00:30:20,570 --> 00:30:25,400
last thing that you really should have

00:30:21,679 --> 00:30:27,290
as aliases or such ideas to get various

00:30:25,400 --> 00:30:29,750
to get and while others could get status

00:30:27,290 --> 00:30:33,370
because then you can say whoa such

00:30:29,750 --> 00:30:35,840
comment very posh and off you go and

00:30:33,370 --> 00:30:39,320
that's all i have for you today thank

00:30:35,840 --> 00:30:41,650
you decide our talks just on that enjoy

00:30:39,320 --> 00:30:41,650

YouTube URL: https://www.youtube.com/watch?v=vPyhRZNyQ0o


