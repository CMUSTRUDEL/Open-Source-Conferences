Title: GoGaRuCo 2014- The Scientific Method of Troubleshooting
Publication date: 2020-01-23
Playlist: GoGaRuCo 2014
Description: 
	By, Blithe Rocher
For software engineers, troubleshooting is one of the toughest and most important skills to develop. When problems arise, a beginning developer's first instincts are to panic and head to StackOverflow. Rather than quick fixes, it's important to seek a deeper understanding of what went wrong.

Biologists, chemists, and physicists increase understanding about the world by applying the logical steps of the scientific method to discover solutions to complex problems. Like scientists, developers can learn troubleshooting skills by treating each problem like a mini "science" experiment.

In this talk we'll explore how using the scientific method can lead to greater understanding and more viable solutions to complex problems.

Help us caption & translate this video!

http://amara.org/v/FV3e/
Captions: 
	00:00:13,832 --> 00:00:17,885
First of all, I just want to start off by thanking the organizer.

00:00:17,885 --> 00:00:20,074
They really put in a lot of effort

00:00:20,083 --> 00:00:22,036
to make me feel really special as a speaker.

00:00:22,046 --> 00:00:24,833
Also as an attendee, watching these other talks

00:00:25,421 --> 00:00:27,611
so I just want to give them a huge thanks

00:00:27,751 --> 00:00:30,821
Can I get an extra round of applaud for the organizers

00:00:36,175 --> 00:00:38,879
And also, thanks everyone for being here.

00:00:39,991 --> 00:00:40,930
So, I'm Blithe

00:00:40,939 --> 00:00:43,374
You can find me @blithe on Twitter and Github

00:00:45,103 --> 00:00:47,517
I work for a company call Big Nerd Ranch

00:00:47,517 --> 00:00:49,711
It's based in Atlanta and

00:00:49,711 --> 00:00:51,905
some people know it. Alright!

00:00:51,905 --> 00:00:54,916
It's based in Atlanta and I work remotely full time in Oakland

00:00:54,916 --> 00:00:57,216
We do a couple of things at Big Nerd Ranch

00:00:57,220 --> 00:01:01,295
We develop apps, we write books and we also teach courses.

00:01:02,163 --> 00:01:04,673
And of course, we're hiring good people, always.

00:01:06,336 --> 00:01:08,582
As you heard, I used to be a scientist

00:01:08,597 --> 00:01:10,781
I have a PhD in Physical Chemistry

00:01:11,475 --> 00:01:13,913
And a lot of people ask me what is physical chemistry?

00:01:13,913 --> 00:01:15,400
what does that mean?

00:01:15,416 --> 00:01:17,956
Well, if you think about it It's right on the border between

00:01:17,956 --> 00:01:23,470
what you know as physics and what you know as chemistry

00:01:23,491 --> 00:01:26,566
That means I spent a long time in grad school

00:01:27,156 --> 00:01:30,122
It also means I've done a lot of experiments

00:01:30,123 --> 00:01:32,510
A lot of people asked me "How did you do it?

00:01:32,510 --> 00:01:34,397
How did you make it through 6 years of grad school

00:01:34,622 --> 00:01:36,160
make it to the end?"

00:01:36,194 --> 00:01:39,026
And I did it by using the scientific method

00:01:41,118 --> 00:01:44,992
and I'm still using it everyday

00:01:45,420 --> 00:01:48,910
I'm a developer, but I'm still using the scientific method everyday

00:01:49,470 --> 00:01:51,247
How many of you have gotten an error

00:01:51,788 --> 00:01:52,721
Google it

00:01:53,061 --> 00:01:56,030
pull the first answer straight from StackOverflow

00:01:56,033 --> 00:01:57,517
and put it in your code and run it

00:01:58,795 --> 00:02:00,236
I think we all tried it

00:02:01,786 --> 00:02:03,097
And did it solve your problem?

00:02:03,847 --> 00:02:04,658
Maybe

00:02:04,678 --> 00:02:06,878
Maybe it did. Maybe if you were lucky

00:02:07,038 --> 00:02:08,387
But probably not

00:02:08,532 --> 00:02:09,788
Most of the time, probably not

00:02:09,788 --> 00:02:11,400
and it was pretty inefficient

00:02:11,412 --> 00:02:13,015
and the more important question is

00:02:13,015 --> 00:02:15,564
Did you learn anything from that?

00:02:17,227 --> 00:02:20,690
The most important part of troubleshooting is learning

00:02:20,921 --> 00:02:23,991
If you solved a problem without learning from it,

00:02:23,991 --> 00:02:25,922
It's only a temporary fix

00:02:25,922 --> 00:02:32,095
It's either going to come back later or you're going to make the same mistake in the future

00:02:33,515 --> 00:02:37,711
Learning is how you level up as a developer

00:02:37,711 --> 00:02:40,381
by learning from your experiences

00:02:40,381 --> 00:02:43,279
And that bring me back to the scientific method

00:02:43,282 --> 00:02:48,225
How can using the scientific method help you level up as a developer?

00:02:48,225 --> 00:02:49,794
Well, What is it?

00:02:49,794 --> 00:02:54,665
Well, if you Google it and go straight to Wikipedia you'll see this definition

00:02:54,665 --> 00:02:58,295
It's a set of techniques for acquiring knowledge

00:02:58,295 --> 00:03:01,005
And I love this definition because it can apply to anything

00:03:01,005 --> 00:03:04,699
any career, including being a developer

00:03:04,699 --> 00:03:07,915
The scientific method, it's methodical

00:03:07,915 --> 00:03:13,322
It's an established procedure and scientists have been using it since the 17th century

00:03:13,322 --> 00:03:15,452
It's also systematic

00:03:15,452 --> 00:03:19,198
It's a step-by-step process

00:03:19,198 --> 00:03:23,881
and it's for gaining knowledge and incorporating that into your process

00:03:23,881 --> 00:03:28,660
and the time for reflection is built right into the scientific method

00:03:30,130 --> 00:03:35,196
The other day, a coworker of mine popped up in the company chat room and said

00:03:35,196 --> 00:03:39,790
"Has anyone seen Ruby string interpolation fail?"

00:03:39,790 --> 00:03:41,617
and I thought that's a pretty interesting question

00:03:41,617 --> 00:03:45,147
Why do you ask? Why are you asking that?

00:03:45,147 --> 00:03:50,115
So we dug a little deeper and they were using factory girl sequencing method

00:03:50,115 --> 00:03:54,155
to create a series of users with unique email addresses.

00:03:54,155 --> 00:03:57,154
So email 1, email 2, email 3...

00:03:57,154 --> 00:03:58,872
and it wasn't working. It was failing.

00:03:58,872 --> 00:04:01,867
It was trying to create users with the same email address

00:04:01,867 --> 00:04:04,133
and it was failing and they couldn't figure out why

00:04:04,133 --> 00:04:06,399
and their solution,

00:04:06,399 --> 00:04:09,115
they ended up just rolling their own sequencing method

00:04:09,115 --> 00:04:11,831
Well, that may have solved their problem temporarily,

00:04:11,831 --> 00:04:14,547
that wasn't really the most elegant solution

00:04:14,547 --> 00:04:16,374
and it turned out,

00:04:16,374 --> 00:04:20,061
the real problem was that they were missing the hash symbol

00:04:20,061 --> 00:04:22,819
that was required for interpolation

00:04:22,819 --> 00:04:26,202
so simple mistakes, but we all make simple mistakes like that

00:04:26,202 --> 00:04:28,151
We all make them all the times

00:04:28,151 --> 00:04:32,320
But maybe using the scientific method would have helped in this case

00:04:33,120 --> 00:04:37,452
The first step of the scientific method is defining the problem

00:04:37,452 --> 00:04:43,296
As a scientist, this means saying what is the information that you're trying to gain?

00:04:43,296 --> 00:04:49,007
What knowledge are you trying to gain or learn?

00:04:49,007 --> 00:04:52,315
What's important to keep in mind when you're defining the problem is

00:04:52,315 --> 00:04:56,803
forget what you think you know and question everything

00:04:56,803 --> 00:05:01,622
Just think about open up your mind, question everything and just define the problem

00:05:01,622 --> 00:05:06,050
It's also important to get rid of your emotions at this point

00:05:06,050 --> 00:05:10,299
You want to, maybe you're on a tight deadline maybe you think you know what the answer is

00:05:10,299 --> 00:05:14,906
I'm just going to go do this. I already know what's wrong blah blah blah

00:05:14,906 --> 00:05:18,457
Get rid of all that and just define the problem

00:05:18,457 --> 00:05:20,904
You can do that by answering a few questions

00:05:20,904 --> 00:05:23,533
What is behavior that you're expecting to happen?

00:05:23,533 --> 00:05:26,162
What's actually happening?

00:05:26,162 --> 00:05:28,792
and how are those two things different?

00:05:28,792 --> 00:05:31,950
and how will you know when you solved your problem?

00:05:31,950 --> 00:05:35,550
What is your criteria for success?

00:05:35,550 --> 00:05:38,616
This is particularly important when

00:05:38,616 --> 00:05:42,492
when other people come and ask you to help them troubleshoot

00:05:42,492 --> 00:05:44,375
Don't listen to their assumptions.

00:05:44,375 --> 00:05:46,238
Get rid of that out of the way.

00:05:46,238 --> 00:05:49,192
and just start from scratch and answer these simple questions

00:05:49,192 --> 00:05:52,142
What do you want to happen? What's actually happening?

00:05:52,142 --> 00:05:55,012
How will you know when you fixed the problem?

00:05:55,012 --> 00:05:57,048
Once you defined your problem, 

00:05:57,048 --> 00:05:59,474
you can start by doing some background research

00:05:59,474 --> 00:06:01,866
and in reality, you guys are already doing this.

00:06:01,866 --> 00:06:04,258
Everyone's doing it.

00:06:04,258 --> 00:06:06,652
In grad school, we would just be constantly reading

00:06:06,652 --> 00:06:08,669
Before we would ever start an experiment, 

00:06:08,669 --> 00:06:11,716
we would just be reading for days and days and days

00:06:11,716 --> 00:06:14,190
Reading recent articles

00:06:14,190 --> 00:06:18,034
or sometimes really old article that we would have to go to the library and dig up

00:06:18,034 --> 00:06:20,780
We were just constantly reading

00:06:20,780 --> 00:06:25,167
And the reason is because you want to have enough background information

00:06:25,167 --> 00:06:30,506
So that you know you're starting with the right experiment

00:06:30,506 --> 00:06:33,556
As a scientist, it's really expensive both 

00:06:33,556 --> 00:06:36,606
It cost a lot of time and money to do an experiment

00:06:36,606 --> 00:06:39,656
So you want to make sure you're starting with the right experiment

00:06:39,656 --> 00:06:44,627
and you do that by making sure you have enough background information

00:06:44,627 --> 00:06:47,878
As a developer, you can do that by knowing your environment

00:06:47,878 --> 00:06:51,072
So you need to know the language that you're working in

00:06:51,072 --> 00:06:54,285
and you can always become a little more familiar with it

00:06:54,285 --> 00:06:58,227
go dig in that dark area that you're unfamiliar with

00:06:58,227 --> 00:07:00,884
or how does this work? What's going on here?

00:07:00,884 --> 00:07:04,063
When you're working on a specific application,

00:07:04,063 --> 00:07:07,622
you can look at what are the dependencies that you're using

00:07:07,622 --> 00:07:13,183
Get to know those and even which version of those dependency are you using

00:07:13,183 --> 00:07:16,859
For the case of the factory girl sequencing,

00:07:16,859 --> 00:07:20,165
probably just taking a look at the documentation might have helped

00:07:20,165 --> 00:07:23,802
Oh, I'm missing the hash symbol. That's it.

00:07:23,802 --> 00:07:26,147
You also want to be reading the literature

00:07:26,147 --> 00:07:29,294
You want to stay up to date with blog post

00:07:29,294 --> 00:07:32,380
Always be reading what's coming out, what's new

00:07:32,380 --> 00:07:36,571
There's always a lot of content out there, so you want to be reading it

00:07:36,571 --> 00:07:38,635
For your specific dependency,

00:07:38,635 --> 00:07:40,401
you can look at the README

00:07:40,401 --> 00:07:43,307
or the changelog for the most recent version

00:07:43,307 --> 00:07:45,645
What changed, what's different

00:07:45,645 --> 00:07:49,754
You can also look at the specific source code of the version you're using

00:07:49,754 --> 00:07:53,901
Either on GitHub or using bundle open and the gem name

00:07:53,901 --> 00:07:56,796
You can pull it right up, right on your computer

00:07:56,796 --> 00:07:59,734
And dig around in there. Look at what's going on.

00:07:59,734 --> 00:08:03,122
And also a helpful thing is to look at the test suite

00:08:03,122 --> 00:08:05,612
of this dependency that you're looking at

00:08:05,612 --> 00:08:08,280
Sometimes that helps you tell the expect behavior of the gem 

00:08:08,280 --> 00:08:10,528
What's suppose to be happening

00:08:11,348 --> 00:08:14,996
Another helpful source of background information is just discussion

00:08:14,996 --> 00:08:17,138
with your friends and colleagues

00:08:17,138 --> 00:08:19,840
Maybe they have already encounter your problem

00:08:19,840 --> 00:08:22,263
and they know the perfect solution

00:08:22,263 --> 00:08:25,531
The best first experiment for you to start with 

00:08:25,531 --> 00:08:27,244
That's really hellpful

00:08:27,244 --> 00:08:30,949
Particularly, when you're struggling on a problem

00:08:30,949 --> 00:08:33,274
maybe you been working on it for a long time

00:08:33,274 --> 00:08:34,881
and you're not getting anywhere

00:08:34,881 --> 00:08:37,842
it's time to get up and go ask somebody for help

00:08:37,842 --> 00:08:39,743
Have you seen anything like this?

00:08:39,743 --> 00:08:42,176
And that's exactly what my colleague did

00:08:42,176 --> 00:08:43,755
They popped in the company chatroom

00:08:43,755 --> 00:08:46,102
"Hey, I need some help on this"

00:08:46,102 --> 00:08:47,754
We have a rule at Big Nerd Ranch

00:08:47,754 --> 00:08:50,059
If you're working on something for more than an hour

00:08:50,059 --> 00:08:51,424
and you're not making progress

00:08:51,424 --> 00:08:52,450
Don't!

00:08:52,450 --> 00:08:54,800
It's time to stop and go ask somebody for help 

00:08:54,800 --> 00:08:57,600
It's better to get help from other people

00:08:57,600 --> 00:09:02,769
And of course, sometime the good old rubber duck is a good helpful solution

00:09:02,769 --> 00:09:04,798
Maybe the rubber duck doesn't talk back,

00:09:04,798 --> 00:09:06,934
but just by explaining your problem

00:09:06,934 --> 00:09:12,140
and how you got there is a good way to get ideas

00:09:12,140 --> 00:09:17,698
You also want to make sure you can replicate the problem that you're having

00:09:17,698 --> 00:09:19,185
Make it fail.

00:09:19,185 --> 00:09:23,132
I mean can you even reproduce it? Is it an error you can reproduce?

00:09:23,132 --> 00:09:26,255
And what are the steps that it takes to do that

00:09:26,255 --> 00:09:27,927
Once you have that information,

00:09:27,927 --> 00:09:30,099
you can go ahead and write an automated test

00:09:30,099 --> 00:09:32,223
to help you solve that problem

00:09:32,803 --> 00:09:35,507
After you gather a lot of background information,

00:09:35,507 --> 00:09:38,213
you can then establish a hypothesis

00:09:38,213 --> 00:09:43,768
A hypothesis needs to be educated and based in evidence

00:09:43,768 --> 00:09:46,388
So this goes back to all the research that you've been doing

00:09:46,388 --> 00:09:49,696
And it also need to be something that you can test

00:09:49,696 --> 00:09:52,436
So this goes back to defining your problem

00:09:52,436 --> 00:09:55,236
and your criteria for success

00:09:55,236 --> 00:09:57,200
So once you have a hypothesis,

00:09:57,200 --> 00:09:59,724
then you can start to design an experiment

00:09:59,724 --> 00:10:02,141
And the most important part of an experiment design

00:10:02,141 --> 00:10:04,781
is that it test your hypothesis, of course.

00:10:04,781 --> 00:10:08,687
Don't do an experiment that doesn't test your hypothesis

00:10:08,687 --> 00:10:11,715
Couple of tips for designing an experiment

00:10:11,715 --> 00:10:16,294
One good thing to start with is just dividing and conquering your code base

00:10:16,294 --> 00:10:19,387
Well first of all, hopefully you've written an automated test

00:10:19,387 --> 00:10:21,918
So you can just run that test over and over again

00:10:21,918 --> 00:10:24,939
to focus on the condition that you're working on

00:10:24,939 --> 00:10:30,240
So that isolate a lot other behavior that you don't need to test immediately right now

00:10:30,240 --> 00:10:33,821
Of course, you can always comment out big chunks of codes

00:10:33,821 --> 00:10:35,597
If you're like "I know this stuff is working.

00:10:35,597 --> 00:10:37,201
Let me kind of comment it out

00:10:37,201 --> 00:10:40,855
and just run the part of the code that I need to look at right now."

00:10:40,855 --> 00:10:45,359
Breakpoints are excellent helpful way to do it

00:10:45,359 --> 00:10:47,515
Say your code has to go through 10 steps

00:10:47,515 --> 00:10:49,751
and only the last one isn't working

00:10:49,751 --> 00:10:51,462
Go ahead and enter a breakpoint

00:10:51,462 --> 00:10:53,343
or a binding .pry right in there

00:10:53,343 --> 00:10:58,276
You can stop and just look at the code is broken, that is not working

00:11:00,446 --> 00:11:02,230
You can also

00:11:02,230 --> 00:11:06,285
Say you suspect there's a problem with the dependency or a gem

00:11:06,285 --> 00:11:08,590
What you can do is maybe create a new app

00:11:08,590 --> 00:11:12,155
and only use that one dependency or API

00:11:12,155 --> 00:11:13,872
Are you still having the problem?

00:11:13,872 --> 00:11:17,469
OK, well maybe you just got rid of all of the other code that you have written

00:11:17,469 --> 00:11:18,886
and you know it just with that

00:11:18,886 --> 00:11:21,070
you can replicate it in a fresh app

00:11:21,070 --> 00:11:25,946
That's another way you can isolate the code

00:11:27,246 --> 00:11:30,125
Another important thing is to limit the variables

00:11:30,125 --> 00:11:31,484
that you're testing

00:11:31,484 --> 00:11:34,355
When you look at beginner troubleshoot sometimes

00:11:34,355 --> 00:11:37,374
They try to change many variables at once

00:11:37,374 --> 00:11:39,337
Maybe it's a problem with the controller over here

00:11:39,337 --> 00:11:42,970
and the view or maybe it's in the model. I don't know.

00:11:42,970 --> 00:11:46,953
and sometimes they get down a road that's really hard to come back from

00:11:46,953 --> 00:11:50,885
and they can't even answer the question "what has changed?"

00:11:50,885 --> 00:11:52,543
So you really don't want to do that

00:11:52,543 --> 00:11:56,125
You want to limit your experiment to one variable at a time.

00:11:56,125 --> 00:11:58,218
Let's test one variable

00:11:58,218 --> 00:12:01,043
and finish our experiment before we start another one

00:12:01,043 --> 00:12:02,698
so that we know

00:12:02,698 --> 00:12:07,644
and we need to make sure we do the analysis part of the experiment

00:12:07,644 --> 00:12:11,734
Don't be afraid to try something weird

00:12:11,734 --> 00:12:14,050
Sometimes, you know you think, you're thinking

00:12:14,050 --> 00:12:16,816
"Ah this never gonna work but I'll try it anyway."

00:12:16,816 --> 00:12:20,282
And you try it and you find your solution

00:12:20,282 --> 00:12:23,107
Don't be afraid to do that. Try something strange.

00:12:23,107 --> 00:12:24,857
You can also try maybe

00:12:24,857 --> 00:12:28,171
try something that you know is going to break your program

00:12:28,171 --> 00:12:30,488
Go throw some gibberish in there. Type it in there.

00:12:30,488 --> 00:12:32,618
And you know it's going to break it.

00:12:32,618 --> 00:12:34,748
You know it's going to fail.

00:12:34,748 --> 00:12:38,285
What happen when you run your program and it doesn't fail?

00:12:38,285 --> 00:12:40,308
Maybe that code was never even getting run

00:12:40,308 --> 00:12:43,039
Maybe you're not including that file or something

00:12:43,039 --> 00:12:45,592
So try something strange

00:12:45,592 --> 00:12:48,108
A friend of mine told me a story the other day

00:12:48,108 --> 00:12:50,724
about how they've created a table

00:12:50,724 --> 00:12:53,495
anytime they were trying to do a join with that table,

00:12:53,495 --> 00:12:56,266
it was throwing some obscure error and they couldn't figure it out

00:12:56,266 --> 00:12:59,037
What's wrong with this one table? What's wrong with it?

00:12:59,037 --> 00:13:01,462
So they ended up, they just

00:13:01,462 --> 00:13:03,757
they got rid of the table

00:13:03,757 --> 00:13:06,192
They created a new one and they named it Bananas. 

00:13:06,192 --> 00:13:07,626
Just something weird.

00:13:07,626 --> 00:13:09,410
Like just do it weird.

00:13:09,410 --> 00:13:11,387
And that actually fixed their problem. 

00:13:11,387 --> 00:13:12,924
So Bananas worked.

00:13:12,924 --> 00:13:14,407
And they're just like "What? What is going on?

00:13:14,407 --> 00:13:16,240
Why? Why did that work"

00:13:16,240 --> 00:13:21,195
and it turned out they had named their original table attributes

00:13:21,945 --> 00:13:25,321
So of course that's a protected name so it didn't work

00:13:25,321 --> 00:13:26,983
So trying something weird,

00:13:26,983 --> 00:13:30,385
naming the table Bananas, that worked for them.

00:13:31,555 --> 00:13:34,847
How many of you have ever done something like this?

00:13:34,847 --> 00:13:37,710
Where you dig, you super deep dive. Yeah.

00:13:37,710 --> 00:13:39,820
You're like oh it's way down here.

00:13:39,820 --> 00:13:41,690
There's some weird problem.

00:13:41,690 --> 00:13:43,930
And it ends up being just right on the surface.

00:13:43,930 --> 00:13:45,660
Something simple.

00:13:46,140 --> 00:13:47,978
When you're designing your experiment,

00:13:47,978 --> 00:13:49,546
you want to focus on

00:13:49,546 --> 00:13:52,156
Think about the hierarchy of blame.

00:13:52,156 --> 00:13:53,441
Think about OK,

00:13:53,441 --> 00:13:57,246
what is the most likely candidate for this problem?

00:13:57,246 --> 00:14:00,474
Once you eliminated the most likely candidates,

00:14:00,474 --> 00:14:03,952
then you can go on to the harder problems

00:14:03,952 --> 00:14:05,052
For example,

00:14:05,052 --> 00:14:07,246
more recently changed code

00:14:07,246 --> 00:14:10,250
is probably more likely to be at fault

00:14:10,250 --> 00:14:13,894
than codes that's been in production for a long time

00:14:13,894 --> 00:14:16,178
and something that you wrote

00:14:16,178 --> 00:14:19,332
is probably more likely to be the problem than say,

00:14:19,332 --> 00:14:21,106
something in Ruby

00:14:22,156 --> 00:14:26,413
But through your experiments go ahead and eliminate the most likely candidate

00:14:26,413 --> 00:14:28,230
and then work your way down

00:14:28,230 --> 00:14:32,419
Don't start by trying to figure out what's wrong with Ruby

00:14:32,979 --> 00:14:35,138
After you designed your experiment,

00:14:35,138 --> 00:14:36,997
go ahead and carry it out

00:14:36,997 --> 00:14:38,867
and you're going to start gathering your data

00:14:38,867 --> 00:14:41,787
that you're going to use for your analysis

00:14:42,687 --> 00:14:44,441
So you need to think about OK,

00:14:44,441 --> 00:14:46,825
what's the current status of your program now?

00:14:46,825 --> 00:14:48,267
What's happening now?

00:14:49,167 --> 00:14:50,795
Were there any changes?

00:14:50,795 --> 00:14:52,487
Are there any new messages?

00:14:52,487 --> 00:14:55,539
Are there any new results from your experiment?

00:14:55,539 --> 00:14:57,390
What else changed recently?

00:14:57,390 --> 00:14:59,597
Were there any other things that you changed?

00:14:59,597 --> 00:15:01,644
What does the log file say?

00:15:01,644 --> 00:15:04,142
Gather all that information

00:15:04,522 --> 00:15:06,250
And this one may seem obvious

00:15:06,250 --> 00:15:09,498
but it need to be said even for senior developers

00:15:09,498 --> 00:15:11,737
Read the error message!

00:15:11,737 --> 00:15:12,781
Just read it.

00:15:12,781 --> 00:15:13,927
Read it out loud.

00:15:13,927 --> 00:15:15,447
Even that alone will help it.

00:15:15,447 --> 00:15:16,357
Just read it.

00:15:16,917 --> 00:15:18,385
Take a look at the stack trace.

00:15:18,385 --> 00:15:19,827
Look at the line number.

00:15:19,827 --> 00:15:21,122
What's going on?

00:15:21,122 --> 00:15:24,113
That's very useful information for a reason

00:15:24,113 --> 00:15:26,027
So gather that information

00:15:26,027 --> 00:15:28,091
as part of your experiment.

00:15:29,011 --> 00:15:30,440
Once you have all your data,

00:15:30,440 --> 00:15:32,519
you can start doing your analysis

00:15:32,519 --> 00:15:35,140
and you really don't want to skip this part

00:15:35,140 --> 00:15:36,912
This is the most important part

00:15:36,912 --> 00:15:39,424
because this where the learning happens

00:15:39,424 --> 00:15:42,058
This is where you level up as a developer

00:15:43,048 --> 00:15:46,441
and it's built right into the scientific method

00:15:47,801 --> 00:15:49,218
So now that you've done your experiment

00:15:49,218 --> 00:15:51,138
Did it solve your problem?

00:15:51,138 --> 00:15:53,828
That test that you wrote, is it passing now?

00:15:53,828 --> 00:15:56,030
and what about all the rest of your test suite?

00:15:56,030 --> 00:15:58,622
Make sure it's also passing

00:15:58,622 --> 00:16:02,106
Make sure you solved your problem without breaking something else

00:16:02,106 --> 00:16:06,297
And make sure you met all your criteria for success

00:16:07,227 --> 00:16:09,079
And you also want to think about

00:16:09,079 --> 00:16:12,191
what did you learn from that experiment?

00:16:12,191 --> 00:16:14,924
What information can you get from that?

00:16:14,924 --> 00:16:17,366
Don't just move on to the next thing and say

00:16:17,366 --> 00:16:19,628
"OK, it's fixed now. Let's go"

00:16:20,068 --> 00:16:21,632
And take a moment,

00:16:21,632 --> 00:16:24,251
Take the time to reflect on your experiment.

00:16:24,251 --> 00:16:27,250
What went well? What didn't go well?

00:16:27,250 --> 00:16:28,931
Think about that

00:16:29,431 --> 00:16:30,799
And most importantly,

00:16:30,799 --> 00:16:32,840
you need to understand

00:16:32,840 --> 00:16:35,892
why you solved your problem

00:16:35,892 --> 00:16:37,674
Have you ever said,

00:16:37,674 --> 00:16:41,187
"Well, I don't why it works, but it works."

00:16:41,997 --> 00:16:44,185
I have news for you. You didn't fix it.

00:16:44,185 --> 00:16:46,553
You didn't solve your problem.

00:16:47,223 --> 00:16:49,140
It's the understanding

00:16:49,140 --> 00:16:52,077
that cement the knowledge in your brain.

00:16:52,077 --> 00:16:54,574
That's what make you a better developer.

00:16:54,574 --> 00:16:57,076
And for those of you in leadership positions,

00:16:57,076 --> 00:16:59,908
maybe you're teaching a newer developer

00:16:59,908 --> 00:17:03,741
It's important that you make sure that they understand the why

00:17:03,741 --> 00:17:06,126
So make them explain it to you,

00:17:06,126 --> 00:17:08,761
Why did this change solved your problem?

00:17:10,441 --> 00:17:12,564
Your results from your experiment

00:17:12,564 --> 00:17:14,379
will also help you determine

00:17:14,379 --> 00:17:17,704
what's going to happen in your next experiment.

00:17:17,704 --> 00:17:19,809
Maybe you solved your problem already

00:17:19,809 --> 00:17:22,534
and you don't have to do another experiment

00:17:22,534 --> 00:17:25,881
but it will influence your experiment in the future

00:17:25,881 --> 00:17:29,259
Maybe now you know a better first experiment to start with

00:17:29,259 --> 00:17:30,040
"I know.

00:17:30,040 --> 00:17:32,691
I know the fix. I'll start with this next time."

00:17:32,691 --> 00:17:34,883
Or if you didn't solve your problem,

00:17:34,883 --> 00:17:37,255
maybe you have a new error message

00:17:37,255 --> 00:17:38,797
"Ok, you can work with that.

00:17:38,797 --> 00:17:40,649
Now what's the new experiment?"

00:17:40,649 --> 00:17:42,997
Or "Oh maybe it's a problem with this gem.

00:17:42,997 --> 00:17:46,605
I should do more background research on that"

00:17:47,925 --> 00:17:49,899
Another important part of the analysis

00:17:49,899 --> 00:17:52,423
is embracing your successes.

00:17:52,723 --> 00:17:54,206
This is really important.

00:17:54,206 --> 00:17:55,368
A lot of people they just,

00:17:55,368 --> 00:17:57,133
they sort of skip over this part

00:17:57,133 --> 00:17:58,998
and go back to work

00:17:59,278 --> 00:18:00,974
But it's really important.

00:18:01,164 --> 00:18:03,498
If you did solve your problem,

00:18:03,498 --> 00:18:05,302
let that sink in

00:18:05,302 --> 00:18:06,884
because that's going to drive you

00:18:06,884 --> 00:18:09,286
for future troubleshooting problems

00:18:09,736 --> 00:18:11,610
You need to remember all those problems

00:18:11,610 --> 00:18:13,139
that you solved before

00:18:13,139 --> 00:18:14,758
and know that you can do it

00:18:14,758 --> 00:18:16,907
and that you can keep going

00:18:17,027 --> 00:18:18,956
And even if you didn't solved your problem this time

00:18:18,956 --> 00:18:20,645
and you're still working on it

00:18:20,645 --> 00:18:23,000
maybe you got a new error message.

00:18:23,000 --> 00:18:27,655
That's progress and that's something to be celebrated

00:18:29,535 --> 00:18:32,101
Another important part of being a scientist

00:18:32,101 --> 00:18:34,137
is keeping a good lab notebook

00:18:34,137 --> 00:18:35,981
and the reason you do this is because

00:18:35,981 --> 00:18:39,545
it tells the story of your experiences

00:18:39,545 --> 00:18:43,258
either to you in the future when you're going back to look at it

00:18:43,258 --> 00:18:45,231
or to somebody else

00:18:45,231 --> 00:18:47,844
maybe another developer in the future

00:18:47,924 --> 00:18:51,054
So this is the picture of one of my lab notebook from grad school.

00:18:51,054 --> 00:18:55,402
I probably filled about 10 of these and they're like 300 pages each

00:18:55,402 --> 00:18:58,716
So I did a lot of documenting in grad school.

00:18:58,716 --> 00:19:01,026
The reason I included this is just to say

00:19:01,026 --> 00:19:05,336
" it's OK to have a paper lab notebook and write the things that you're doing

00:19:05,336 --> 00:19:08,606
That's OK. Digital work also."

00:19:08,826 --> 00:19:11,076
And the reason you keep a lab notebook is because

00:19:11,076 --> 00:19:13,796
you're just not going to remember it

00:19:13,796 --> 00:19:15,898
you're not going to remember

00:19:15,898 --> 00:19:16,899
As a grad student,

00:19:16,899 --> 00:19:20,900
we probably did about 20 to 30 experiments a day

00:19:21,340 --> 00:19:24,273
each just changing one variable at a time.

00:19:24,273 --> 00:19:26,621
And there's just no way we would've remember

00:19:26,621 --> 00:19:28,879
all of the things that we tried

00:19:28,879 --> 00:19:32,551
And think about how many experiments you do as a developer each day

00:19:32,551 --> 00:19:34,783
when you're troubleshooting

00:19:35,363 --> 00:19:36,961
And maybe you think

00:19:36,961 --> 00:19:40,089
"OK, well I'm already just recording all this stuff in the log.

00:19:40,089 --> 00:19:41,993
It's all saved over there.

00:19:41,993 --> 00:19:44,257
I can always go back and look

00:19:44,257 --> 00:19:48,572
But that's not an sufficient lab notebook

00:19:48,572 --> 00:19:53,096
Too much information can be just as bad as too little information

00:19:53,096 --> 00:19:54,379
So it's up to you

00:19:54,379 --> 00:19:58,512
to glean the meaning from these experiment that you're doing

00:19:58,512 --> 00:20:00,736
and record that

00:20:00,736 --> 00:20:04,416
One of the best first step for keeping a good lab notebook

00:20:04,416 --> 00:20:06,796
is writing a good commit message

00:20:06,806 --> 00:20:08,917
It's all fresh in your brain

00:20:08,917 --> 00:20:11,685
and so you can maybe you solve the problem

00:20:11,685 --> 00:20:14,073
so you can commit that change and push it

00:20:14,073 --> 00:20:16,242
So write some explanation in that

00:20:16,242 --> 00:20:19,634
that commit message and let people know what's going on

00:20:19,634 --> 00:20:21,771
and people will see this in the future

00:20:21,771 --> 00:20:23,985
Either you'll come back and look at it

00:20:23,985 --> 00:20:28,529
or maybe another developer who's working in the codebase will come back and look

00:20:28,889 --> 00:20:33,068
Additionally , if you added test for the scenario that you're working on,

00:20:33,068 --> 00:20:36,397
that's also a good documentation for what's going on.

00:20:36,397 --> 00:20:38,340
"OK, this was the the problem.

00:20:38,340 --> 00:20:40,193
We added a test for it now."

00:20:42,133 --> 00:20:44,443
Also, right after you solve a problem,

00:20:44,443 --> 00:20:46,393
you want to update the documentation.

00:20:46,393 --> 00:20:48,285
Is it missing anything?

00:20:48,285 --> 00:20:50,039
Did you have that error because

00:20:50,039 --> 00:20:52,693
the documentation wasn't good enough?

00:20:52,693 --> 00:20:54,698
So go ahead and go update the README.

00:20:54,698 --> 00:20:58,153
Or maybe you were missing some environment variable

00:20:58,153 --> 00:21:01,627
Go ahead and set up an example environment variable file

00:21:01,627 --> 00:21:05,141
so people know "Hey, you need this thing."

00:21:05,141 --> 00:21:06,935
to save them that time

00:21:06,935 --> 00:21:09,135
So that's all part of good documentation.

00:21:09,135 --> 00:21:10,375
so keep that

00:21:10,375 --> 00:21:12,627
Set that up for other people.

00:21:12,627 --> 00:21:15,310
You can also contribute to open source.

00:21:15,310 --> 00:21:20,738
So say you find a problem in someone else software or gem,

00:21:20,738 --> 00:21:22,596
go ahead and let them know

00:21:22,596 --> 00:21:26,996
So open up an issue on Github if it doesn't already exist.

00:21:26,996 --> 00:21:31,223
Let them know the step that it takes to recreate this problem.

00:21:32,163 --> 00:21:34,668
If you were able to write a test for it,

00:21:34,668 --> 00:21:37,513
go ahead and submit a pull request with that test

00:21:37,513 --> 00:21:40,976
Sometimes that's helpful even if you don't know how to solve the problem.

00:21:40,976 --> 00:21:42,591
That's helpful for maintainers to say

00:21:42,591 --> 00:21:45,046
"Oh, this is the test that's failing."

00:21:45,046 --> 00:21:46,088
And of course,

00:21:46,088 --> 00:21:47,800
if you do know how how to solve the problem,

00:21:47,800 --> 00:21:49,704
go ahead and submit a pull request for that

00:21:49,704 --> 00:21:51,924
You just got some open source contribution

00:21:51,924 --> 00:21:53,764
and that's awesome

00:21:54,984 --> 00:21:58,774
You can also write about your experiences

00:22:00,464 --> 00:22:03,420
Have you ever written something up and then

00:22:03,420 --> 00:22:07,666
later down the road and you're like googling for that same problem

00:22:07,666 --> 00:22:10,437
and you come back and you find your own blog post?

00:22:10,787 --> 00:22:12,058
Yes. Yes.

00:22:12,058 --> 00:22:16,218
And you're like "Man, thank you so much old me. 

00:22:16,378 --> 00:22:17,628
That was really helpful.

00:22:17,628 --> 00:22:20,108
Thank you for writing that down."

00:22:20,108 --> 00:22:22,775
So think about all those other people out there

00:22:22,775 --> 00:22:25,632
that are getting the same reaction when they find your blog post

00:22:25,632 --> 00:22:28,428
and they're like "Man, that was really helpful blog post.

00:22:28,428 --> 00:22:30,364
Thank you for writing that down."

00:22:30,364 --> 00:22:33,080
So if you're not doing this already, you should be doing this

00:22:33,080 --> 00:22:34,784
Anyone can start a blog.

00:22:34,784 --> 00:22:38,088
If you don't already have one, go start it.

00:22:39,522 --> 00:22:42,061
You can also write failed experiment.

00:22:42,061 --> 00:22:44,060
Don't be afraid to do that.

00:22:44,060 --> 00:22:48,370
In grad school, we always joked about starting a journal of failed experiments

00:22:48,370 --> 00:22:51,671
That way we would publish a million papers that way

00:22:51,671 --> 00:22:55,462
Like well, these are the million things we tried and they didn't work

00:22:55,462 --> 00:22:57,456
But that's OK. If you...

00:22:57,456 --> 00:23:00,310
Sometimes that's also helpful

00:23:00,310 --> 00:23:03,705
and maybe somebody comes along and read this and can help you

00:23:03,705 --> 00:23:05,085
and say "Hey,

00:23:05,085 --> 00:23:07,095
you might try doing it this way.

00:23:07,095 --> 00:23:09,387
That might solve your problem."

00:23:10,067 --> 00:23:11,696
The most important part

00:23:11,696 --> 00:23:16,005
about keeping a lab notebook is sharing the the knowledge

00:23:16,005 --> 00:23:18,489
In academia, it's all about

00:23:18,489 --> 00:23:21,523
gaining knowledge and then sharing that knowledge

00:23:21,523 --> 00:23:24,958
either through publication or through teaching

00:23:24,958 --> 00:23:29,622
and I think developers can really learn a lot from that

00:23:29,622 --> 00:23:31,743
So as you're doing these experiments,

00:23:31,743 --> 00:23:33,464
go ahead and share that information

00:23:33,464 --> 00:23:35,417
Maybe tweet about it

00:23:35,417 --> 00:23:38,510
or blog about it, like I said

00:23:38,510 --> 00:23:42,124
or you can even come and present a talk at a conference like this

00:23:42,124 --> 00:23:44,361
"Hey, here's this weird thing that I figured out.

00:23:44,361 --> 00:23:46,368
Let me tell you about it."

00:23:47,057 --> 00:23:49,817
So that's really the most important part

00:23:49,817 --> 00:23:52,109
is sharing that knowledge with other people

00:23:52,109 --> 00:23:54,211
and teaching it to other people

00:23:54,211 --> 00:23:59,595
And so I'm really looking forward to seeing all of your lab notebooks online.

00:23:59,595 --> 00:24:01,542
Thanks very much

00:24:18,000 --> 00:24:21,000

YouTube URL: https://www.youtube.com/watch?v=h9YZXuUjyOs


