Title: Vienna.go, Building Cloud Native Applications Crash Course, February 2020
Publication date: 2020-02-20
Playlist: Vienna.go
Description: 
	_________________________________________________________________
Talk by Peter Malina

About Pusher Sessions:

We're bringing the meetup to you. With Sessions, you can watch recordings of top-notch talks from developer meetups -- wherever and whenever you want.

Meetups are a great way to learn from our peers and to keep up with the latest trends and technologies. As developers ourselves, we at Pusher wanted to bring this great content to more people... So we built Sessions. On Sessions, you can watch talks that interest you and subscribe to be notified when new content gets added.

If you run a meetup and want to get involved, kindly get in touch.

_________________________________________________________________

About Pusher:

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,030 --> 00:00:05,069
all right so thanks for having me I'm

00:00:02,820 --> 00:00:07,560
Peter and I'm gonna talk about like this

00:00:05,069 --> 00:00:09,300
will be very very fast talk about cloud

00:00:07,560 --> 00:00:11,370
native applications so it will be like

00:00:09,300 --> 00:00:13,290
ten minutes I'll have a couple of

00:00:11,370 --> 00:00:14,880
examples but I'll share I'll share the

00:00:13,290 --> 00:00:17,699
present-day presentation with you after

00:00:14,880 --> 00:00:19,020
a talk so you don't need to take

00:00:17,699 --> 00:00:21,270
pictures or anything

00:00:19,020 --> 00:00:24,000
everything will be shared afterwards so

00:00:21,270 --> 00:00:26,279
again hi I'm Peter I'm a CTO at a

00:00:24,000 --> 00:00:29,699
company called flow up and we do cloud

00:00:26,279 --> 00:00:31,890
native solutions we're basically well

00:00:29,699 --> 00:00:34,649
we're based in Brynner which is Czech

00:00:31,890 --> 00:00:37,050
Republic hour and a half from Vienna I'm

00:00:34,649 --> 00:00:38,489
a Google developer expert for cloud and

00:00:37,050 --> 00:00:40,680
if you want to reach out to me I'll be

00:00:38,489 --> 00:00:43,260
here for the rest of the Meetup or you

00:00:40,680 --> 00:00:45,329
can just use the social links so let's

00:00:43,260 --> 00:00:48,600
start with cloud native applications and

00:00:45,329 --> 00:00:49,950
what do you actually need there just to

00:00:48,600 --> 00:00:52,410
be on the same page when we look at

00:00:49,950 --> 00:00:54,390
cloud you basically need to know these

00:00:52,410 --> 00:00:56,129
three things when you look at the

00:00:54,390 --> 00:00:58,530
traditional computer you get these free

00:00:56,129 --> 00:01:00,449
every time together but when you look at

00:00:58,530 --> 00:01:02,879
clouds you get all these things

00:01:00,449 --> 00:01:04,650
sometimes together or sometimes very

00:01:02,879 --> 00:01:06,030
separately so for example when you get

00:01:04,650 --> 00:01:08,369
networking you can get only little

00:01:06,030 --> 00:01:10,080
balancers or when you look at things

00:01:08,369 --> 00:01:12,659
like storage you can get only disks and

00:01:10,080 --> 00:01:13,710
so on so there are many services and you

00:01:12,659 --> 00:01:17,100
should actually use these services

00:01:13,710 --> 00:01:21,380
separately as well to maximize scaling

00:01:17,100 --> 00:01:28,259
iterating to reduce your costs now oops

00:01:21,380 --> 00:01:31,259
okay I think it just all right I'll just

00:01:28,259 --> 00:01:33,030
use this one so the first thing that you

00:01:31,259 --> 00:01:35,820
want to do when you're when you're gonna

00:01:33,030 --> 00:01:37,890
be going to cloud is containerization

00:01:35,820 --> 00:01:40,140
condensation is a very simple process

00:01:37,890 --> 00:01:42,509
right now because you basically use all

00:01:40,140 --> 00:01:44,759
the things that you have but you build

00:01:42,509 --> 00:01:47,399
your application with things like docker

00:01:44,759 --> 00:01:50,280
or any other any other image image

00:01:47,399 --> 00:01:52,170
building utilities and I recommend to

00:01:50,280 --> 00:01:54,479
use multistage builds which you can see

00:01:52,170 --> 00:01:56,280
on this slide basically what you do is

00:01:54,479 --> 00:01:59,479
you build your application the

00:01:56,280 --> 00:02:03,659
traditional way and this brings you like

00:01:59,479 --> 00:02:05,490
1.5 gig container or image which is not

00:02:03,659 --> 00:02:07,710
really sufficient for distribution but

00:02:05,490 --> 00:02:09,360
what you can do next is you can use this

00:02:07,710 --> 00:02:12,060
second step which basically creates

00:02:09,360 --> 00:02:13,620
another container or another image which

00:02:12,060 --> 00:02:15,989
is far smaller because it's LP

00:02:13,620 --> 00:02:17,370
what you do you copy all the stuff there

00:02:15,989 --> 00:02:19,019
you install certificate so we can

00:02:17,370 --> 00:02:21,480
communicate with the with the world and

00:02:19,019 --> 00:02:25,110
you get to go now we have 20 max image

00:02:21,480 --> 00:02:27,720
which is very simply distribute and one

00:02:25,110 --> 00:02:30,120
more thing if you can don't push

00:02:27,720 --> 00:02:31,829
anything like configurations or secret

00:02:30,120 --> 00:02:33,780
or anything like that into your

00:02:31,829 --> 00:02:37,890
containers because the thing just big

00:02:33,780 --> 00:02:40,230
fires now when we go deeper one level

00:02:37,890 --> 00:02:42,510
deeper basically we get to login and

00:02:40,230 --> 00:02:44,420
that's what you want from your

00:02:42,510 --> 00:02:47,099
application from the start

00:02:44,420 --> 00:02:49,290
many many people think that logging in

00:02:47,099 --> 00:02:51,060
cloud is a different different thing but

00:02:49,290 --> 00:02:52,620
literally only different thing there is

00:02:51,060 --> 00:02:54,810
you don't want to use any external

00:02:52,620 --> 00:02:57,329
service directly in your app you want

00:02:54,810 --> 00:03:00,060
your app to use the standard logging as

00:02:57,329 --> 00:03:01,440
much as possible and then rely on the

00:03:00,060 --> 00:03:03,450
underlying infrastructure such as

00:03:01,440 --> 00:03:06,390
exporters there on the machine or in

00:03:03,450 --> 00:03:08,760
docker or on any on any other host to

00:03:06,390 --> 00:03:11,849
export those things into ELQ stack or

00:03:08,760 --> 00:03:14,010
any other any other monitoring tool they

00:03:11,849 --> 00:03:17,489
will aggregate it for you which means

00:03:14,010 --> 00:03:19,680
you can just use STP out and then what

00:03:17,489 --> 00:03:21,630
you do is you use for matters for

00:03:19,680 --> 00:03:23,130
example on G cloud or when you when

00:03:21,630 --> 00:03:27,720
you're using ELQ stack you can use JSON

00:03:23,130 --> 00:03:30,299
for matters this will bring you to a to

00:03:27,720 --> 00:03:32,370
a point where you will be looking with

00:03:30,299 --> 00:03:34,530
fields and these fields are very

00:03:32,370 --> 00:03:36,209
important for your application and it's

00:03:34,530 --> 00:03:38,459
because then when you look at the tools

00:03:36,209 --> 00:03:40,530
the tools will let you filter on these

00:03:38,459 --> 00:03:42,690
so this is basically like the first

00:03:40,530 --> 00:03:44,849
level where you look where you look when

00:03:42,690 --> 00:03:46,440
you're debugging something on or where

00:03:44,849 --> 00:03:47,849
you want it like when you want to know

00:03:46,440 --> 00:03:51,329
what your what's your application

00:03:47,849 --> 00:03:53,190
actually doing why is it cool because

00:03:51,329 --> 00:03:55,019
you can then use the JSON payload or

00:03:53,190 --> 00:03:57,329
anything basically anything that you put

00:03:55,019 --> 00:04:01,199
into your fields and basically filter on

00:03:57,329 --> 00:04:03,510
that very quickly the next thing that

00:04:01,199 --> 00:04:05,639
you want to do and this is to keep up

00:04:03,510 --> 00:04:07,829
with your application on a like more

00:04:05,639 --> 00:04:10,829
high level on what's it doing and it's

00:04:07,829 --> 00:04:12,780
open telemetry there's one one the

00:04:10,829 --> 00:04:15,030
library they recommend using and it's

00:04:12,780 --> 00:04:17,669
open census so right now open census and

00:04:15,030 --> 00:04:21,329
open tracing both libraries are part of

00:04:17,669 --> 00:04:23,880
the open telemetry project but what you

00:04:21,329 --> 00:04:25,680
want to do here is you sometimes wanna

00:04:23,880 --> 00:04:27,060
use some metrics you don't want to just

00:04:25,680 --> 00:04:29,370
know that the

00:04:27,060 --> 00:04:31,650
it's healthy or unhealthy you actually

00:04:29,370 --> 00:04:33,240
want to know if the latency is good if

00:04:31,650 --> 00:04:35,340
anything that you're doing like counters

00:04:33,240 --> 00:04:37,410
if you're processing good like if you're

00:04:35,340 --> 00:04:39,360
processing the request in a time that

00:04:37,410 --> 00:04:42,300
you want to process them and so on and

00:04:39,360 --> 00:04:44,970
so forth and here basically the same

00:04:42,300 --> 00:04:48,660
applies is for logging open sensors

00:04:44,970 --> 00:04:50,940
gives you a more of a abstract way to

00:04:48,660 --> 00:04:52,260
dealing with these metrics because what

00:04:50,940 --> 00:04:53,820
you want to do here or what we're doing

00:04:52,260 --> 00:04:56,910
here for example is we're creating a

00:04:53,820 --> 00:04:59,160
view for aggregation and we're basically

00:04:56,910 --> 00:05:00,810
creating a distribution and every time

00:04:59,160 --> 00:05:05,040
we put something into this distribution

00:05:00,810 --> 00:05:07,169
it then gets exported somewhere where

00:05:05,040 --> 00:05:10,710
you export it is then basically on the

00:05:07,169 --> 00:05:12,450
specific tool so until and like the way

00:05:10,710 --> 00:05:14,760
you create all the stuff is very

00:05:12,450 --> 00:05:17,220
abstract and you would not rely in

00:05:14,760 --> 00:05:18,720
called any provider or any basically

00:05:17,220 --> 00:05:21,150
anything but the library that open

00:05:18,720 --> 00:05:22,620
sensors has on the other hand when you

00:05:21,150 --> 00:05:24,810
won't export that you can export it to

00:05:22,620 --> 00:05:27,000
anything that's really supported and

00:05:24,810 --> 00:05:28,290
right now they have they have many

00:05:27,000 --> 00:05:30,930
supported tools or many support

00:05:28,290 --> 00:05:33,770
libraries here you can see we're using

00:05:30,930 --> 00:05:37,680
set driver which is also which is GCP

00:05:33,770 --> 00:05:42,330
and by just changing this one line you

00:05:37,680 --> 00:05:44,100
can export to other tools as well so the

00:05:42,330 --> 00:05:46,140
last thing i want to talk about is go

00:05:44,100 --> 00:05:49,919
call developing get are anybody heard

00:05:46,140 --> 00:05:54,419
about it yeah yeah did you guys did you

00:05:49,919 --> 00:05:56,850
guys use it okay all right so I got two

00:05:54,419 --> 00:06:00,360
examples here the first example is

00:05:56,850 --> 00:06:02,340
asynchronous tasks and these like it's

00:06:00,360 --> 00:06:04,560
always about the same thing you're just

00:06:02,340 --> 00:06:06,090
using some abstraction and then if you

00:06:04,560 --> 00:06:08,910
want to you can use the cloud provider

00:06:06,090 --> 00:06:11,520
or anything that you want what go cloud

00:06:08,910 --> 00:06:13,889
has very like go call has a very cool

00:06:11,520 --> 00:06:16,590
idea behind it and the idea is that you

00:06:13,889 --> 00:06:16,800
can use any provider which means right

00:06:16,590 --> 00:06:20,400
now

00:06:16,800 --> 00:06:22,350
AVS GCP or edger or you can use the same

00:06:20,400 --> 00:06:24,660
code on your local machines which open

00:06:22,350 --> 00:06:26,550
source alternatives which means I think

00:06:24,660 --> 00:06:30,740
this one may be using something like

00:06:26,550 --> 00:06:34,020
Kafka or Reddy's as well what you do

00:06:30,740 --> 00:06:36,060
you're not seeing basically anything

00:06:34,020 --> 00:06:39,030
that's provider specific here everything

00:06:36,060 --> 00:06:40,800
is pure pops up and if you want to use

00:06:39,030 --> 00:06:42,900
this on a vs you basically

00:06:40,800 --> 00:06:45,120
important driver for AVS if you want to

00:06:42,900 --> 00:06:47,009
use this with with Kafka you import the

00:06:45,120 --> 00:06:49,919
driver for Kafka and so on

00:06:47,009 --> 00:06:52,979
but sometimes there you actually need

00:06:49,919 --> 00:06:55,889
those specific specific features because

00:06:52,979 --> 00:06:58,250
some messages for example and GCP or AVS

00:06:55,889 --> 00:07:01,139
you can use things like time out or

00:06:58,250 --> 00:07:02,879
retries and so on and these are

00:07:01,139 --> 00:07:04,650
configured can be carefully configured

00:07:02,879 --> 00:07:08,099
for each message and the library

00:07:04,650 --> 00:07:10,110
basically gives you this opportunity by

00:07:08,099 --> 00:07:12,389
exporting everything for you so you can

00:07:10,110 --> 00:07:13,889
then use the same messages or you can

00:07:12,389 --> 00:07:16,409
use this interface which is very

00:07:13,889 --> 00:07:19,020
abstract or you can use the type which

00:07:16,409 --> 00:07:22,979
has GCP or a vias and that's very easy

00:07:19,020 --> 00:07:24,509
to use as well and last pink which is

00:07:22,979 --> 00:07:27,569
really cool and this this is I think the

00:07:24,509 --> 00:07:31,409
first thing that came that came up with

00:07:27,569 --> 00:07:34,080
go cloud and that's storage so right now

00:07:31,409 --> 00:07:37,889
or back then when you want to use like

00:07:34,080 --> 00:07:39,210
blob storage buckets basically for

00:07:37,889 --> 00:07:43,440
multiple clouds or multi cloud strategy

00:07:39,210 --> 00:07:45,810
you need to basically import a VSS dkg

00:07:43,440 --> 00:07:48,779
Cloud SDK and all the stuff and then

00:07:45,810 --> 00:07:52,229
kind of use their api's which was kind

00:07:48,779 --> 00:07:55,020
of different every time to basically do

00:07:52,229 --> 00:07:57,120
what you want in your buckets with go

00:07:55,020 --> 00:08:00,180
cloud what you do is you have every time

00:07:57,120 --> 00:08:02,099
you have just the same code and all all

00:08:00,180 --> 00:08:05,520
all the changes in the code is basically

00:08:02,099 --> 00:08:07,409
driver on the top so you can use the

00:08:05,520 --> 00:08:11,520
same code everywhere and that's the idea

00:08:07,409 --> 00:08:13,979
behind go cloud if there's one thing you

00:08:11,520 --> 00:08:15,629
should remember from this talk it's you

00:08:13,979 --> 00:08:18,120
should always focus on your application

00:08:15,629 --> 00:08:19,560
and if you're not focusing or if you

00:08:18,120 --> 00:08:22,650
feel like you're reinventing the wheel

00:08:19,560 --> 00:08:25,169
or I don't know you're just not doing

00:08:22,650 --> 00:08:27,479
your business logic then it doesn't or

00:08:25,169 --> 00:08:31,229
it shouldn't be in your app or in your

00:08:27,479 --> 00:08:34,070
container and maybe outside in some tool

00:08:31,229 --> 00:08:38,849
which like clouds has a lot of tools so

00:08:34,070 --> 00:08:40,890
disease them and if you want more there

00:08:38,849 --> 00:08:43,409
are two great resources here

00:08:40,890 --> 00:08:46,610
the first one are SR ebooks which is

00:08:43,409 --> 00:08:48,630
more about the reliability of the of the

00:08:46,610 --> 00:08:51,060
applications and then you can get like

00:08:48,630 --> 00:08:53,610
things like how do i how do I set up my

00:08:51,060 --> 00:08:54,480
metrics how elastic my SSL logs or

00:08:53,610 --> 00:08:56,190
objectives

00:08:54,480 --> 00:08:59,040
how do I monitor all the stuff and so on

00:08:56,190 --> 00:09:01,620
and if you want to know if there's a

00:08:59,040 --> 00:09:03,769
tool for what you want then I recommend

00:09:01,620 --> 00:09:06,300
go into landscape see and see if I oh

00:09:03,769 --> 00:09:08,790
and just try to navigate that because

00:09:06,300 --> 00:09:11,519
there is like tens or maybe hundreds of

00:09:08,790 --> 00:09:12,920
tools right now that you can get so

00:09:11,519 --> 00:09:17,260
that's it thank you

00:09:12,920 --> 00:09:17,260

YouTube URL: https://www.youtube.com/watch?v=p44LXYw85Ow


