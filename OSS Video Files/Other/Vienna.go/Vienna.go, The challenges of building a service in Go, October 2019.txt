Title: Vienna.go, The challenges of building a service in Go, October 2019
Publication date: 2019-10-31
Playlist: Vienna.go
Description: 
	Speaker: Daniel from Safing.io

Go is a perfect match for building a system service in Go, but there are numerous common hurdles to take in creating a scalable and maintainable code base. In this talk, we'll have a look at startup and shutdown procedures, resilient goroutine management, configuration management with live updates and a database layer with a websockets API.
There will be only few slides and lots of live coding and demo-ing (with prepared code).
Captions: 
	00:00:00,030 --> 00:00:07,040
I'm Daniel from saving a yo and I have

00:00:04,259 --> 00:00:09,570
all the bachelors in security and have

00:00:07,040 --> 00:00:15,420
about three years of full-time Co

00:00:09,570 --> 00:00:18,240
experience in my own company things that

00:00:15,420 --> 00:00:20,850
happen when building a servicing kill so

00:00:18,240 --> 00:00:25,230
we're building our main product Inc Oh

00:00:20,850 --> 00:00:29,570
and right now that already spans 70

00:00:25,230 --> 00:00:32,700
packages just making it one service and

00:00:29,570 --> 00:00:35,450
at some point we started segregating

00:00:32,700 --> 00:00:40,980
that from one big-money repo into

00:00:35,450 --> 00:00:44,460
multiple repos where we decided to have

00:00:40,980 --> 00:00:47,129
to progress and then one rep we called

00:00:44,460 --> 00:00:52,079
port base which serves as kind of the

00:00:47,129 --> 00:00:54,809
base for services in general filled with

00:00:52,079 --> 00:00:57,210
things that we found that were not

00:00:54,809 --> 00:01:02,030
specific to our product but were a

00:00:57,210 --> 00:01:02,030
general helpers and general framework

00:01:02,239 --> 00:01:08,520
libraries that others can also use so

00:01:05,610 --> 00:01:10,640
first we're going to go into some of the

00:01:08,520 --> 00:01:14,130
common problems you'd experience when

00:01:10,640 --> 00:01:15,990
creating a service in go and then we'll

00:01:14,130 --> 00:01:19,850
look at some of the things we've

00:01:15,990 --> 00:01:24,540
implemented to come about these problems

00:01:19,850 --> 00:01:26,280
so one of the basic things you notice

00:01:24,540 --> 00:01:28,890
pretty fast when using with the packages

00:01:26,280 --> 00:01:32,189
that input loops are not so cool

00:01:28,890 --> 00:01:34,380
so you can't just import package being

00:01:32,189 --> 00:01:37,799
package a and an import package in

00:01:34,380 --> 00:01:39,810
package B it will not even compile so

00:01:37,799 --> 00:01:44,159
you have to somehow come around that

00:01:39,810 --> 00:01:45,720
with help and methods for example if you

00:01:44,159 --> 00:01:49,290
have multiple choice and they want to

00:01:45,720 --> 00:01:52,530
buy as Flags at some point you kind of

00:01:49,290 --> 00:01:55,770
will just kill the application within

00:01:52,530 --> 00:01:59,850
the start up procedure screaming that

00:01:55,770 --> 00:02:03,590
some flag isn't okay then that may cause

00:01:59,850 --> 00:02:03,590
some harm to whatever state there is

00:02:03,740 --> 00:02:09,229
clean shot on that that's a big thing so

00:02:06,270 --> 00:02:12,510
you don't want you want the service to

00:02:09,229 --> 00:02:14,550
come up creepy and then also when

00:02:12,510 --> 00:02:16,409
some debate and then when it's cancelled

00:02:14,550 --> 00:02:19,590
by the OS or when the server's shutting

00:02:16,409 --> 00:02:21,330
down - also close all the files shut

00:02:19,590 --> 00:02:23,190
down on data space correctly and that

00:02:21,330 --> 00:02:28,129
gets a bit challenging if you're using a

00:02:23,190 --> 00:02:31,080
lot of packages configuration changes

00:02:28,129 --> 00:02:34,170
you don't want to just change your

00:02:31,080 --> 00:02:37,080
configuration once you may want to

00:02:34,170 --> 00:02:39,510
change configuration while the service

00:02:37,080 --> 00:02:41,010
is running and have the change

00:02:39,510 --> 00:02:43,980
configuration take effect immediately

00:02:41,010 --> 00:02:46,019
and not want to restart your service

00:02:43,980 --> 00:02:46,769
every time you want to change the

00:02:46,019 --> 00:02:51,959
configuration

00:02:46,769 --> 00:02:54,810
I think the database changes a lot of

00:02:51,959 --> 00:02:57,269
services have some kind of state or most

00:02:54,810 --> 00:03:01,370
often database in the background that

00:02:57,269 --> 00:03:04,019
saves data and sometimes you want to

00:03:01,370 --> 00:03:07,440
wait for something to change and of

00:03:04,019 --> 00:03:14,299
course the the fast and easy problem is

00:03:07,440 --> 00:03:17,329
to just pull the database every or so

00:03:14,299 --> 00:03:20,579
seconds or a minute and just check if

00:03:17,329 --> 00:03:23,459
something changed but that is now the

00:03:20,579 --> 00:03:28,319
slow which also consumes resource

00:03:23,459 --> 00:03:32,190
resources needlessly so we're gonna look

00:03:28,319 --> 00:03:35,040
at some of these problems now with live

00:03:32,190 --> 00:03:36,810
code examples so I've prepared some

00:03:35,040 --> 00:03:40,470
short files that we'll go through

00:03:36,810 --> 00:03:43,530
together and I'll show you what we did

00:03:40,470 --> 00:03:48,000
about these problems I don't want to you

00:03:43,530 --> 00:03:50,519
to use just our library well you can of

00:03:48,000 --> 00:03:52,470
course if you want to but I want to show

00:03:50,519 --> 00:03:55,829
you how we solve them one to inspire you

00:03:52,470 --> 00:03:58,980
to find you or your own way of doing

00:03:55,829 --> 00:04:01,590
things and go and help you learn a

00:03:58,980 --> 00:04:03,629
couple things and I also hope that

00:04:01,590 --> 00:04:06,150
there's someone here that will tell me

00:04:03,629 --> 00:04:08,340
how something that I did can be done

00:04:06,150 --> 00:04:14,160
even better I'm looking forward to it

00:04:08,340 --> 00:04:19,609
I'll talk to you so I'll switch to the

00:04:14,160 --> 00:04:23,750
code editor now so so the way

00:04:19,609 --> 00:04:27,139
basic thing we use import base is a

00:04:23,750 --> 00:04:34,340
modules package which helps a structure

00:04:27,139 --> 00:04:36,469
or code in multiple segments the basic

00:04:34,340 --> 00:04:40,610
thing that we do with our modules we

00:04:36,469 --> 00:04:42,830
first obey gesture them to the module

00:04:40,610 --> 00:04:45,379
package so we register service has

00:04:42,830 --> 00:04:49,069
called service it has a preparation

00:04:45,379 --> 00:04:54,620
start and stop function these kind of

00:04:49,069 --> 00:04:57,680
extend the initialization functions that

00:04:54,620 --> 00:05:00,080
already has a go has the Const the VAR

00:04:57,680 --> 00:05:04,279
and the init functions and these are run

00:05:00,080 --> 00:05:06,889
in that order so first all the con

00:05:04,279 --> 00:05:09,199
sections are run in all packages then

00:05:06,889 --> 00:05:11,539
the VAR sections are running all

00:05:09,199 --> 00:05:14,360
packages and then all the init functions

00:05:11,539 --> 00:05:18,529
around all packages and then with our

00:05:14,360 --> 00:05:20,569
modules the prep function runs in all

00:05:18,529 --> 00:05:23,449
packages and then the start function

00:05:20,569 --> 00:05:25,969
when all packages and when we finally

00:05:23,449 --> 00:05:28,339
want to shut down the stop function was

00:05:25,969 --> 00:05:33,199
in all packages so we kind of extend the

00:05:28,339 --> 00:05:37,759
existing initialization procedure that

00:05:33,199 --> 00:05:41,449
go already has also then in the back we

00:05:37,759 --> 00:05:44,449
add two dependencies that this module

00:05:41,449 --> 00:05:48,620
has is to make sure that these other

00:05:44,449 --> 00:05:50,870
molecules are started before this one so

00:05:48,620 --> 00:05:54,379
in our case because just to dummy

00:05:50,870 --> 00:05:57,740
modules to showcase you how this works

00:05:54,379 --> 00:06:00,680
so I've just registered them here

00:05:57,740 --> 00:06:03,099
without any start and stop functions but

00:06:00,680 --> 00:06:07,879
we'll see them later in the log output

00:06:03,099 --> 00:06:12,710
how they're handled by the system so we

00:06:07,879 --> 00:06:20,210
can look over here right now and see how

00:06:12,710 --> 00:06:22,819
does it play so we do go so you see it

00:06:20,210 --> 00:06:25,490
it initially initiates the modules it

00:06:22,819 --> 00:06:28,430
then starts the two dependencies from

00:06:25,490 --> 00:06:32,089
the service then starts a service to

00:06:28,430 --> 00:06:33,490
also see here that the VAR clan that the

00:06:32,089 --> 00:06:35,560
service itself

00:06:33,490 --> 00:06:37,840
amidst during staff procedure then

00:06:35,560 --> 00:06:40,539
starts finishes starting the service

00:06:37,840 --> 00:06:44,530
module and then tells us that it's

00:06:40,539 --> 00:06:48,340
finished storing and when we kill it

00:06:44,530 --> 00:06:50,860
it Werner's hey I'm setting down then

00:06:48,340 --> 00:06:55,030
first stop the service and then the

00:06:50,860 --> 00:07:02,319
other two you may note that they started

00:06:55,030 --> 00:07:03,699
in a different different order then they

00:07:02,319 --> 00:07:07,360
stopped different when they started

00:07:03,699 --> 00:07:10,259
because dependency 1 & 2 don't have and

00:07:07,360 --> 00:07:13,300
dependencies to each other so they're

00:07:10,259 --> 00:07:17,919
started there their orders somewhat

00:07:13,300 --> 00:07:21,909
random and then tells us shuttling

00:07:17,919 --> 00:07:23,229
completed and ends the log file let's

00:07:21,909 --> 00:07:25,990
continue if there are any questions

00:07:23,229 --> 00:07:30,639
please just raise your hand and ask me

00:07:25,990 --> 00:07:36,550
so I want you to follow along I don't

00:07:30,639 --> 00:07:38,409
want anyone to to drop out so here we

00:07:36,550 --> 00:07:42,789
are there are three modules and declare

00:07:38,409 --> 00:07:47,500
dependencies between them the prep phase

00:07:42,789 --> 00:07:49,509
is meant for checking everything that's

00:07:47,500 --> 00:07:51,699
going on before we actually start

00:07:49,509 --> 00:07:55,960
anything so this is mainly used for

00:07:51,699 --> 00:07:59,849
checking flags if they're correct this

00:07:55,960 --> 00:08:02,830
is just here we just check if lag exists

00:07:59,849 --> 00:08:06,310
but there are flags that may have very

00:08:02,830 --> 00:08:08,590
complex meanings that you will want to

00:08:06,310 --> 00:08:13,389
check with your own custom code and then

00:08:08,590 --> 00:08:18,250
you can do this here the start function

00:08:13,389 --> 00:08:21,610
then actually starts the service with

00:08:18,250 --> 00:08:24,909
whatever needs it needs here we start

00:08:21,610 --> 00:08:26,830
the HTTP server and I will explain the

00:08:24,909 --> 00:08:30,400
rest of the code that the wraps this a

00:08:26,830 --> 00:08:34,719
bit later and then we have the stop

00:08:30,400 --> 00:08:37,959
function that stops the server in this

00:08:34,719 --> 00:08:40,750
case shuts down the HTTP server so that

00:08:37,959 --> 00:08:43,539
it closes it waits for all the open edge

00:08:40,750 --> 00:08:46,169
of these sessions to end and then

00:08:43,539 --> 00:08:46,169
returns

00:08:47,670 --> 00:08:58,290
so we got this we got this okay so what

00:08:55,540 --> 00:09:01,180
we're doing here so that we looked at

00:08:58,290 --> 00:09:05,860
startup and shutdown procedures and how

00:09:01,180 --> 00:09:11,740
dependencies are handled each as an

00:09:05,860 --> 00:09:14,709
addition each module also has its own

00:09:11,740 --> 00:09:17,860
context so there's always a module

00:09:14,709 --> 00:09:20,080
context that also gets cancelled

00:09:17,860 --> 00:09:23,680
whenever the module shuts down so I

00:09:20,080 --> 00:09:26,950
always have a context available that I

00:09:23,680 --> 00:09:34,120
can give any function that wants it they

00:09:26,950 --> 00:09:35,260
go like how the go team thought about

00:09:34,120 --> 00:09:38,170
this is that

00:09:35,260 --> 00:09:40,810
well most functions that take a bit

00:09:38,170 --> 00:09:44,890
longer do some complex things should

00:09:40,810 --> 00:09:47,890
always take a context that then it can

00:09:44,890 --> 00:09:50,110
react to when something shutting down so

00:09:47,890 --> 00:09:52,630
this is really easy you can just give

00:09:50,110 --> 00:09:54,250
any function that want to context the

00:09:52,630 --> 00:10:00,900
module context and it will react

00:09:54,250 --> 00:10:05,380
accordingly let's continue with

00:10:00,900 --> 00:10:07,390
resilient go routines so the module

00:10:05,380 --> 00:10:12,250
system also gives us the give us the

00:10:07,390 --> 00:10:14,950
option to start go routines in Jerusalem

00:10:12,250 --> 00:10:17,680
matters so the thing with guru teams is

00:10:14,950 --> 00:10:18,250
that whenever something panics within a

00:10:17,680 --> 00:10:21,790
goroutine

00:10:18,250 --> 00:10:22,959
it will kill your whole service it won't

00:10:21,790 --> 00:10:28,860
just kill that girl routine with

00:10:22,959 --> 00:10:32,140
everything so we started not using go

00:10:28,860 --> 00:10:36,160
function call at all but started using

00:10:32,140 --> 00:10:38,770
wrapper services and I can show you how

00:10:36,160 --> 00:10:46,600
these look like these are really easy

00:10:38,770 --> 00:10:51,779
and down here whoops oops oops yeah here

00:10:46,600 --> 00:10:51,779
is so that's like the core principle of

00:10:51,899 --> 00:10:59,110
what these go routine wrappers do they

00:10:56,050 --> 00:11:02,080
just call recover so

00:10:59,110 --> 00:11:04,000
in the defer function and check if

00:11:02,080 --> 00:11:08,440
there's a panic available if there's a

00:11:04,000 --> 00:11:10,360
panic available it creates new panic

00:11:08,440 --> 00:11:13,089
error which kind of wraps beautifully

00:11:10,360 --> 00:11:16,690
wraps the panic into a nice error it

00:11:13,089 --> 00:11:18,490
reports this error error to wherever you

00:11:16,690 --> 00:11:20,980
wanted to report it to I'll come to that

00:11:18,490 --> 00:11:25,149
in a second and then of course assigns

00:11:20,980 --> 00:11:28,120
the error to the that it's returned by

00:11:25,149 --> 00:11:30,910
the function and then down here we just

00:11:28,120 --> 00:11:33,579
execute the given function with the

00:11:30,910 --> 00:11:37,120
module context you going back to our

00:11:33,579 --> 00:11:40,029
example we this is the function we

00:11:37,120 --> 00:11:43,180
declare here in line and we just call

00:11:40,029 --> 00:11:47,500
the server the listen and serve server

00:11:43,180 --> 00:11:50,829
is an HTTP server we define groups up

00:11:47,500 --> 00:11:53,200
here because that's the way you have to

00:11:50,829 --> 00:11:56,890
handle this if you want to cleanly shut

00:11:53,200 --> 00:12:01,300
down an HTTP server and go so we then

00:11:56,890 --> 00:12:04,529
add the listen address to the server

00:12:01,300 --> 00:12:07,810
struct and set to request Handler and

00:12:04,529 --> 00:12:11,350
then we look good to listen and serve

00:12:07,810 --> 00:12:14,920
and whenever there's an error we return

00:12:11,350 --> 00:12:18,700
it except if the error is error surf

00:12:14,920 --> 00:12:20,800
server closed which is emitted when we

00:12:18,700 --> 00:12:23,140
shut down the server down here in a stop

00:12:20,800 --> 00:12:26,500
method there it was that alters nil

00:12:23,140 --> 00:12:31,589
telling the module that everything went

00:12:26,500 --> 00:12:34,870
well so there are different types of

00:12:31,589 --> 00:12:37,870
these wrappers we have so we have one

00:12:34,870 --> 00:12:40,079
wrapper for I want generic wrapper which

00:12:37,870 --> 00:12:47,670
is conscious over cur

00:12:40,079 --> 00:12:51,810
so we have module dot yep start with a

00:12:47,670 --> 00:12:54,490
normal worker some generic worker that

00:12:51,810 --> 00:12:58,000
doesn't fit any of the other categories

00:12:54,490 --> 00:13:00,640
it just starts a function in a safe

00:12:58,000 --> 00:13:03,339
context then we have the service worker

00:13:00,640 --> 00:13:06,310
which starts a function but it'll

00:13:03,339 --> 00:13:08,470
restart it with a back of timer whenever

00:13:06,310 --> 00:13:11,590
it fails which is very convenient for

00:13:08,470 --> 00:13:13,810
things like an API a listener who

00:13:11,590 --> 00:13:17,350
to have to restart whenever for whatever

00:13:13,810 --> 00:13:20,110
reason it it might fail then the we have

00:13:17,350 --> 00:13:23,620
macro tasks which is a wrapper for very

00:13:20,110 --> 00:13:28,360
short and small but important things so

00:13:23,620 --> 00:13:33,640
for example if we were handling HTTP

00:13:28,360 --> 00:13:36,820
requests we want the that go routine to

00:13:33,640 --> 00:13:40,480
be prioritized and then for example I

00:13:36,820 --> 00:13:43,029
can start writing a log file or writing

00:13:40,480 --> 00:13:46,089
a config file has changed I can wrap

00:13:43,029 --> 00:13:48,550
that in a low priority macro task which

00:13:46,089 --> 00:13:51,279
will then be scheduled with lower

00:13:48,550 --> 00:13:56,860
priority than the important micro tasks

00:13:51,279 --> 00:14:03,370
this is kind of a very simple scheduling

00:13:56,860 --> 00:14:07,750
mechanism that tries to give macro tasks

00:14:03,370 --> 00:14:11,710
with a higher priority the right to

00:14:07,750 --> 00:14:13,390
execute first so here is just start a

00:14:11,710 --> 00:14:14,440
service worker which means that whenever

00:14:13,390 --> 00:14:19,510
turns an error

00:14:14,440 --> 00:14:22,570
it will just be restarted again let's

00:14:19,510 --> 00:14:27,180
look at this request handler for a

00:14:22,570 --> 00:14:31,480
second with the fan this down here for

00:14:27,180 --> 00:14:35,260
the HTTP request handlers interface so

00:14:31,480 --> 00:14:39,070
we need a struct with serve HTTP method

00:14:35,260 --> 00:14:44,440
and that is called in a separate go

00:14:39,070 --> 00:14:47,410
routine whenever we whenever a new

00:14:44,440 --> 00:14:50,410
request comes in with the I should be

00:14:47,410 --> 00:14:56,650
server and here you can see where we run

00:14:50,410 --> 00:15:03,520
a macro task and handle the request

00:14:56,650 --> 00:15:06,160
within this wrapped a goroutine here you

00:15:03,520 --> 00:15:08,589
can see there's a small function

00:15:06,160 --> 00:15:11,260
built-in where we can test panics I show

00:15:08,589 --> 00:15:15,100
that in second and then we spread hello

00:15:11,260 --> 00:15:19,750
world let's see how that looks like when

00:15:15,100 --> 00:15:22,420
we execute so we run this thing here we

00:15:19,750 --> 00:15:28,300
have to loosen flag we

00:15:22,420 --> 00:15:48,850
sorry four and then we go here up steps

00:15:28,300 --> 00:15:56,920
small okay whoo hello world that works

00:15:48,850 --> 00:15:59,680
and then we can check thank ya

00:15:56,920 --> 00:16:02,040
so we start here and then if we call

00:15:59,680 --> 00:16:05,579
panic we don't get anything back because

00:16:02,040 --> 00:16:08,950
it would have killed the server but

00:16:05,579 --> 00:16:11,320
other but not killing it we get a

00:16:08,950 --> 00:16:15,519
beautiful error report that in default

00:16:11,320 --> 00:16:19,959
configuration is written two standard

00:16:15,519 --> 00:16:21,910
error and then we get a nice error log

00:16:19,959 --> 00:16:24,339
line telling us that the macro test

00:16:21,910 --> 00:16:28,660
service request handler panicked with

00:16:24,339 --> 00:16:32,019
the message test so the even though we

00:16:28,660 --> 00:16:34,930
had a panic you know you know service

00:16:32,019 --> 00:16:39,839
the go service can continue to operate

00:16:34,930 --> 00:16:43,660
and then you can hook in to whatever

00:16:39,839 --> 00:16:45,910
service you're using to get these

00:16:43,660 --> 00:16:49,420
reports ship to what we're gonna do when

00:16:45,910 --> 00:16:52,240
one or two month is to implement a

00:16:49,420 --> 00:16:55,600
simple web hook thing so we can have

00:16:52,240 --> 00:16:56,500
these errors posted to our slack Channel

00:16:55,600 --> 00:17:01,839
or whatever privacy-preserving

00:16:56,500 --> 00:17:03,250
alternative you're using so any

00:17:01,839 --> 00:17:05,550
questions about that so far

00:17:03,250 --> 00:17:05,550
please

00:17:09,100 --> 00:17:15,290
yes there's yeah yes thank you so the

00:17:13,640 --> 00:17:19,190
question was if we have our own

00:17:15,290 --> 00:17:22,460
scheduler for it has no so the the

00:17:19,190 --> 00:17:25,040
golang runtimes

00:17:22,460 --> 00:17:31,000
scheduler still does all the work what

00:17:25,040 --> 00:17:34,580
we do is just with we postpone execution

00:17:31,000 --> 00:17:43,190
until there's a lower count of

00:17:34,580 --> 00:17:45,680
prioritized tax executing yeah so so yes

00:17:43,190 --> 00:17:49,010
we have all we have there's something

00:17:45,680 --> 00:17:51,400
there's control of normal tasks and I

00:17:49,010 --> 00:17:55,340
didn't touch tab now because it's again

00:17:51,400 --> 00:17:57,860
the topic but we do have tasks that you

00:17:55,340 --> 00:18:00,350
can schedule and that come time when

00:17:57,860 --> 00:18:03,200
they should run but the macro tasks are

00:18:00,350 --> 00:18:05,000
just done in a very simple manner I

00:18:03,200 --> 00:18:12,680
could actually show you that really

00:18:05,000 --> 00:18:19,550
quick the scheduling function is down

00:18:12,680 --> 00:18:25,700
here so scheduler so here I so what it

00:18:19,550 --> 00:18:28,910
does is it just checks it it just checks

00:18:25,700 --> 00:18:34,730
if a medium priority task is waiting and

00:18:28,910 --> 00:18:36,290
we'll just give that a go and if that if

00:18:34,730 --> 00:18:40,700
nothing is waiting with a medium

00:18:36,290 --> 00:18:43,640
priority it will trigger low priority

00:18:40,700 --> 00:18:46,220
tasks medium priority tasks trigger lock

00:18:43,640 --> 00:18:48,650
right lock writing because we don't want

00:18:46,220 --> 00:18:51,500
to have that interfere with important

00:18:48,650 --> 00:18:53,570
tasks and also trigger tasks if there is

00:18:51,500 --> 00:18:57,650
some thermo waiting for execution so

00:18:53,570 --> 00:18:59,330
it's really simple it just uses channels

00:18:57,650 --> 00:19:04,280
as a waiting mechanism which will be

00:18:59,330 --> 00:19:06,760
fast and thus there's some like counting

00:19:04,280 --> 00:19:09,710
here so for you for example it checks if

00:19:06,760 --> 00:19:11,780
there are more micro tasks running at

00:19:09,710 --> 00:19:15,020
the moment than the configure threshold

00:19:11,780 --> 00:19:17,510
and if there are less than the threshold

00:19:15,020 --> 00:19:20,240
it will start creating additional tasks

00:19:17,510 --> 00:19:20,659
but also every every task type has their

00:19:20,240 --> 00:19:23,840
own

00:19:20,659 --> 00:19:25,999
so I think medium party tasks only wait

00:19:23,840 --> 00:19:27,559
for a maximum three seconds and if they

00:19:25,999 --> 00:19:30,049
haven't got the clearance until them

00:19:27,559 --> 00:19:31,909
they'll execute anyway so there's also

00:19:30,049 --> 00:19:34,179
offer fallback it won't just wait

00:19:31,909 --> 00:19:34,179
indefinitely

00:19:37,749 --> 00:19:44,720
no no so at some point it will the log

00:19:41,869 --> 00:19:46,340
especially has its own intro mechanism

00:19:44,720 --> 00:19:50,029
when the lock buffer is full

00:19:46,340 --> 00:19:52,399
it looks just right yeah so yeah that's

00:19:50,029 --> 00:19:54,859
covered we we want to implements like a

00:19:52,399 --> 00:19:57,340
dynamic I'm scheduling in the future

00:19:54,859 --> 00:20:01,340
where it kind of looks at the last

00:19:57,340 --> 00:20:06,320
minute the execution and then sees how

00:20:01,340 --> 00:20:08,659
they how the how many macro tests are

00:20:06,320 --> 00:20:11,649
being run and then wait for like a lower

00:20:08,659 --> 00:20:22,609
amount so it like adapts to your current

00:20:11,649 --> 00:20:29,479
load of the program yeah we are we okay

00:20:22,609 --> 00:20:33,169
yeah okay so that was a small addition

00:20:29,479 --> 00:20:35,479
to the tasks so I showed you exactly

00:20:33,169 --> 00:20:39,169
that was where we left that with the

00:20:35,479 --> 00:20:43,989
reporting and we will as I said have

00:20:39,169 --> 00:20:51,649
this posted via web hook to our slack

00:20:43,989 --> 00:20:54,799
similar service so that's the the main

00:20:51,649 --> 00:20:56,359
thing that we have with modules so if

00:20:54,799 --> 00:21:00,789
you want to execute all this which has

00:20:56,359 --> 00:21:03,999
to always exit or run run run is blank

00:21:00,789 --> 00:21:07,129
one is the package we use a wrapper for

00:21:03,999 --> 00:21:10,009
handling all the signals and doing stuff

00:21:07,129 --> 00:21:12,590
it just starts all the modules and then

00:21:10,009 --> 00:21:16,249
whenever there's interruption from us it

00:21:12,590 --> 00:21:21,649
will start a shutdown also which which

00:21:16,249 --> 00:21:24,979
is really great with testing there's a

00:21:21,649 --> 00:21:27,320
flag that whenever you kill the program

00:21:24,979 --> 00:21:30,619
it was first printed stacktrace

00:21:27,320 --> 00:21:34,520
and then start shutdown or if you send

00:21:30,619 --> 00:21:37,790
the process a cig user one so signal you

00:21:34,520 --> 00:21:41,600
one via command then it'll just print

00:21:37,790 --> 00:21:44,180
the full stack of all the routines in

00:21:41,600 --> 00:21:46,310
the middle of the execution so whenever

00:21:44,180 --> 00:21:49,280
you have a feeling something is hanging

00:21:46,310 --> 00:21:52,700
something is deadlocking or whatever you

00:21:49,280 --> 00:21:55,310
can just send it to the server signal it

00:21:52,700 --> 00:21:59,180
will print you all the the girl routine

00:21:55,310 --> 00:22:04,040
stacks to standard error and you can

00:21:59,180 --> 00:22:07,480
inspect what's going on there okay so

00:22:04,040 --> 00:22:10,190
that was the module system we are using

00:22:07,480 --> 00:22:15,620
let's continue to the conflict system

00:22:10,190 --> 00:22:17,900
which will be a lot shorter so the thing

00:22:15,620 --> 00:22:21,410
with configuration and services that we

00:22:17,900 --> 00:22:25,370
want them want to to change it in during

00:22:21,410 --> 00:22:28,520
one time and take effect immediately and

00:22:25,370 --> 00:22:32,510
also we don't want to want to have it

00:22:28,520 --> 00:22:38,180
easy to write so what we've come up with

00:22:32,510 --> 00:22:41,240
is just variables that are functions and

00:22:38,180 --> 00:22:46,610
we can do like if service enabled what

00:22:41,240 --> 00:22:49,430
that function is is just a function

00:22:46,610 --> 00:22:51,260
these are the types available and the

00:22:49,430 --> 00:22:53,440
function just which was a billion there

00:22:51,260 --> 00:22:57,350
is no error that we have to check for

00:22:53,440 --> 00:23:01,130
nothing is just return that value and

00:22:57,350 --> 00:23:09,170
let's get on with life how it works is

00:23:01,130 --> 00:23:15,020
that we first register a config option

00:23:09,170 --> 00:23:18,220
we name it we give it a key and then we

00:23:15,020 --> 00:23:22,430
give a description we tell it what type

00:23:18,220 --> 00:23:24,170
that configuration option is we also

00:23:22,430 --> 00:23:25,820
tell us like that's like some extra

00:23:24,170 --> 00:23:28,400
stuff like what expertise remove this

00:23:25,820 --> 00:23:32,180
level so what maturity this is function

00:23:28,400 --> 00:23:34,640
have and what like how how bad can you

00:23:32,180 --> 00:23:37,300
break this service if you change it so

00:23:34,640 --> 00:23:40,910
here we have the expertise user

00:23:37,300 --> 00:23:43,610
expertise level expert and develop

00:23:40,910 --> 00:23:46,310
developer also so if you see expertise

00:23:43,610 --> 00:23:48,650
level developer you might very well

00:23:46,310 --> 00:23:52,970
something if you change that and then of

00:23:48,650 --> 00:23:57,280
course we have a default value that's

00:23:52,970 --> 00:23:57,280
just bad reasoning but registering the

00:23:57,310 --> 00:24:04,760
option if want to use it there's this

00:24:02,500 --> 00:24:07,250
special function we also have to

00:24:04,760 --> 00:24:10,790
initialize and we do that here which is

00:24:07,250 --> 00:24:14,150
say config get as boolean use the same

00:24:10,790 --> 00:24:17,720
key as before and then give it a default

00:24:14,150 --> 00:24:21,080
value we now have a second default value

00:24:17,720 --> 00:24:24,740
so the first default value will be taken

00:24:21,080 --> 00:24:27,710
if this configuration exists and this

00:24:24,740 --> 00:24:30,170
one most will be taken if that key not

00:24:27,710 --> 00:24:32,030
even exists so there's no possibility of

00:24:30,170 --> 00:24:34,850
an error here you will always have a

00:24:32,030 --> 00:24:36,980
default value that can be used and if

00:24:34,850 --> 00:24:42,710
this is really fast and I'll show you

00:24:36,980 --> 00:24:46,520
how that works this works by the first

00:24:42,710 --> 00:24:50,240
time we get ability flag so we get a

00:24:46,520 --> 00:24:53,900
flag which is a cool package called a

00:24:50,240 --> 00:24:55,910
bool atomic boolean which is built on

00:24:53,900 --> 00:24:59,200
atomic package so there's no locking

00:24:55,910 --> 00:25:01,910
involved here this is really fast and

00:24:59,200 --> 00:25:03,710
then I get the actual value from the

00:25:01,910 --> 00:25:07,070
configuration and then that just would

00:25:03,710 --> 00:25:10,790
turn this function which every time it's

00:25:07,070 --> 00:25:13,970
called it will check atomically if the

00:25:10,790 --> 00:25:15,980
configuration itself has changed if it

00:25:13,970 --> 00:25:16,790
has not changed it will just return the

00:25:15,980 --> 00:25:20,480
value immediately

00:25:16,790 --> 00:25:23,900
so whenever the configuration not change

00:25:20,480 --> 00:25:26,690
this call only costs me one atomic check

00:25:23,900 --> 00:25:30,350
and that's it if the configuration has

00:25:26,690 --> 00:25:32,690
changed I'll get the new flag to check

00:25:30,350 --> 00:25:34,700
if something changed and I'll get a

00:25:32,690 --> 00:25:37,790
fresh value and then continue with that

00:25:34,700 --> 00:25:41,480
so it's kind of a function that has its

00:25:37,790 --> 00:25:45,650
own cache built in so if you don't

00:25:41,480 --> 00:25:51,080
change your configuration there's hardly

00:25:45,650 --> 00:25:52,880
any performance impact if you of course

00:25:51,080 --> 00:25:55,580
so this is only safe for one Gorgo

00:25:52,880 --> 00:25:57,050
routine to be used if you want to use it

00:25:55,580 --> 00:25:59,770
from multiple Google teams there's a

00:25:57,050 --> 00:25:59,770
concurrent

00:25:59,970 --> 00:26:03,790
subtracting you can use which then

00:26:02,260 --> 00:26:06,580
there's the same thing as before but

00:26:03,790 --> 00:26:08,710
booth locking which of course has a

00:26:06,580 --> 00:26:13,060
performance penalty but something that's

00:26:08,710 --> 00:26:14,860
just easier to use or if you're doing

00:26:13,060 --> 00:26:18,850
things as synchronously you have to do

00:26:14,860 --> 00:26:22,800
it that way and that's what we can just

00:26:18,850 --> 00:26:25,600
we can just here use service enabled and

00:26:22,800 --> 00:26:31,330
there's no error that can happen and we

00:26:25,600 --> 00:26:37,570
always know that this will work if you

00:26:31,330 --> 00:26:41,890
ever get configuration option doesn't

00:26:37,570 --> 00:26:45,130
exist it will warn you with an error log

00:26:41,890 --> 00:26:50,040
line so last package that will go

00:26:45,130 --> 00:26:54,210
through and then I'll how I doing

00:26:50,040 --> 00:26:54,210
okay great thanks

00:26:54,660 --> 00:27:01,180
which just look at databases real quick

00:26:57,160 --> 00:27:03,880
and then as these two topics require

00:27:01,180 --> 00:27:08,590
complex investors showcase them to you

00:27:03,880 --> 00:27:15,250
in finished application of the finished

00:27:08,590 --> 00:27:18,460
haha development stage application that

00:27:15,250 --> 00:27:22,690
we're using in the company so that

00:27:18,460 --> 00:27:24,850
abases are a really controversial topic

00:27:22,690 --> 00:27:26,740
and go because there's so many different

00:27:24,850 --> 00:27:29,770
ways to go about it there's nothing

00:27:26,740 --> 00:27:34,620
there's no official way to do it there's

00:27:29,770 --> 00:27:36,790
like everyone everyone thinks they're

00:27:34,620 --> 00:27:39,580
there can do it they can do it better

00:27:36,790 --> 00:27:41,500
that's also a thought I'm not sure if it

00:27:39,580 --> 00:27:43,870
did it better you can't judge afterwards

00:27:41,500 --> 00:27:44,440
tell me if you think there's something I

00:27:43,870 --> 00:27:47,020
can do better

00:27:44,440 --> 00:27:49,660
I'd love to hear so but that's like our

00:27:47,020 --> 00:27:52,510
interpretation what we'd like to have as

00:27:49,660 --> 00:27:55,210
a database system so this is kind of a

00:27:52,510 --> 00:27:58,120
key value metal layer so we're not

00:27:55,210 --> 00:28:02,980
implementing a database itself we're

00:27:58,120 --> 00:28:05,560
using existing packages with that it is

00:28:02,980 --> 00:28:07,900
multi back-end so there's like one key

00:28:05,560 --> 00:28:09,250
space you can use and you can register

00:28:07,900 --> 00:28:12,590
different backends

00:28:09,250 --> 00:28:15,029
into that key space I'll show you

00:28:12,590 --> 00:28:17,190
rather we well how does look like then

00:28:15,029 --> 00:28:23,179
there are hooks and subscriptions so we

00:28:17,190 --> 00:28:27,570
can hook into a certain key space and

00:28:23,179 --> 00:28:30,179
change or dual checks before something

00:28:27,570 --> 00:28:33,090
which the database or I can subscribe to

00:28:30,179 --> 00:28:36,510
a certain key space and get all the

00:28:33,090 --> 00:28:38,760
updates what that change there and then

00:28:36,510 --> 00:28:40,649
there's a beautiful web socket API that

00:28:38,760 --> 00:28:44,909
gives us the same functionality we see

00:28:40,649 --> 00:28:48,620
in our own girl also in JavaScript so

00:28:44,909 --> 00:28:52,440
here I'm just initializing a testing

00:28:48,620 --> 00:28:54,210
directory then my initials database in

00:28:52,440 --> 00:28:57,750
that directory and then it's ready to

00:28:54,210 --> 00:29:01,860
use what I then do is a register a new

00:28:57,750 --> 00:29:05,130
database with its key space so the name

00:29:01,860 --> 00:29:07,140
is this key space I give it a

00:29:05,130 --> 00:29:11,130
description and then I select a storage

00:29:07,140 --> 00:29:14,630
type in that case we use the bolt back

00:29:11,130 --> 00:29:19,200
end which is a very nice resilient

00:29:14,630 --> 00:29:21,440
golang pure gold ank database we also

00:29:19,200 --> 00:29:27,659
have backends for badger which is

00:29:21,440 --> 00:29:30,809
similar go database F is true.you which

00:29:27,659 --> 00:29:33,240
is just thought I files and folders my

00:29:30,809 --> 00:29:35,730
hash map is just a golden map which is

00:29:33,240 --> 00:29:40,679
in memory and a sinkhole which will

00:29:35,730 --> 00:29:43,370
never give you anything back to exit

00:29:40,679 --> 00:29:48,029
that database we couldn't interface and

00:29:43,370 --> 00:29:51,620
then we create a test record like almost

00:29:48,029 --> 00:29:55,970
any database system and go there's some

00:29:51,620 --> 00:30:00,779
interface to satisfy and there's a base

00:29:55,970 --> 00:30:02,760
struct you can inherit from to increase

00:30:00,779 --> 00:30:07,260
or to you in that direction and then we

00:30:02,760 --> 00:30:09,419
can just create our record then we set

00:30:07,260 --> 00:30:11,700
the key and we put it on that it and

00:30:09,419 --> 00:30:13,799
then we can get it back here you see how

00:30:11,700 --> 00:30:16,169
the key works like first we always have

00:30:13,799 --> 00:30:19,140
name space which correlates to one

00:30:16,169 --> 00:30:22,350
back-end and then we have the key which

00:30:19,140 --> 00:30:25,529
is kind of path like syntax

00:30:22,350 --> 00:30:28,980
and you we can we can query without go

00:30:25,529 --> 00:30:31,559
into that we hit the thing you can strap

00:30:28,980 --> 00:30:34,259
you can register hooks and you can also

00:30:31,559 --> 00:30:36,539
inject virtual databases which is

00:30:34,259 --> 00:30:38,279
exactly what the configuration

00:30:36,539 --> 00:30:41,070
configuration package is doing it

00:30:38,279 --> 00:30:43,409
injects a virtual back-end which are we

00:30:41,070 --> 00:30:49,549
back end is just governed by code and

00:30:43,409 --> 00:30:54,659
I'll show how that works right now so

00:30:49,549 --> 00:30:58,080
here we have okay that's okay

00:30:54,659 --> 00:31:03,419
I think and you can you read that okay

00:30:58,080 --> 00:31:07,470
so this is the Application Firewall that

00:31:03,419 --> 00:31:10,320
we're fireball that we are working on

00:31:07,470 --> 00:31:12,240
and we have this kind of security levels

00:31:10,320 --> 00:31:14,639
and they're saved in the database so I

00:31:12,240 --> 00:31:17,159
can just go onto my notification thing

00:31:14,639 --> 00:31:21,240
here change the security level to

00:31:17,159 --> 00:31:23,519
another one and you'll see it it pushed

00:31:21,240 --> 00:31:27,899
that change over the web socket API to

00:31:23,519 --> 00:31:31,559
your database the application here which

00:31:27,899 --> 00:31:33,450
is a web tech thing also is subscribed

00:31:31,559 --> 00:31:35,009
to that same namespace receive the

00:31:33,450 --> 00:31:36,480
updater and change that can occur on the

00:31:35,009 --> 00:31:40,879
same thing in the other direction if I

00:31:36,480 --> 00:31:47,149
click here we'll see an update up here

00:31:40,879 --> 00:31:52,080
just a short bit later here we have a

00:31:47,149 --> 00:31:55,289
four peak at the configuration settings

00:31:52,080 --> 00:31:58,830
page so all the data you see here comes

00:31:55,289 --> 00:32:03,840
from the gold packages but that's the

00:31:58,830 --> 00:32:06,330
name we gave the distinct at the

00:32:03,840 --> 00:32:08,970
description that's the current value and

00:32:06,330 --> 00:32:15,629
that's default value and then I can go

00:32:08,970 --> 00:32:19,559
here and change things and update them

00:32:15,629 --> 00:32:25,379
and here we have the console where we

00:32:19,559 --> 00:32:29,600
can manually interact with that API so I

00:32:25,379 --> 00:32:33,260
connect to the database I just go query

00:32:29,600 --> 00:32:36,260
take the config or actually

00:32:33,260 --> 00:32:38,330
qe and subscribe at the same time to the

00:32:36,260 --> 00:32:41,360
conflict scope the database hit enter

00:32:38,330 --> 00:32:44,600
and it'll give me all the configuration

00:32:41,360 --> 00:32:47,809
options that I have in there and then if

00:32:44,600 --> 00:32:53,059
I go back to the settings and I go here

00:32:47,809 --> 00:32:55,519
and change one of these settings okay

00:32:53,059 --> 00:33:01,039
God saved as in the dev console oh

00:32:55,519 --> 00:33:04,399
there's an update with that database key

00:33:01,039 --> 00:33:07,159
and here's the chase on then you chase

00:33:04,399 --> 00:33:11,769
on that not updated so I have live

00:33:07,159 --> 00:33:14,809
updates with the database on whatever

00:33:11,769 --> 00:33:17,539
query subscribe still queries can also

00:33:14,809 --> 00:33:22,309
unlock only touch prefixes but also the

00:33:17,539 --> 00:33:27,889
content I can subscribe to a certain key

00:33:22,309 --> 00:33:33,529
space when certain conditions apply so

00:33:27,889 --> 00:33:37,580
that was a quick introduction to oops to

00:33:33,529 --> 00:33:43,639
port base and I'm going to finish the

00:33:37,580 --> 00:33:49,820
presentation here really quick play so a

00:33:43,639 --> 00:33:51,590
short reduction I'm of some more

00:33:49,820 --> 00:33:54,139
information about who we are and about

00:33:51,590 --> 00:33:58,880
me so I'm the CTO of safing I am the

00:33:54,139 --> 00:34:01,309
lead developer of our two product saving

00:33:58,880 --> 00:34:04,130
I was founded in 2017 our mission is to

00:34:01,309 --> 00:34:06,260
enable online citizens to reclaim their

00:34:04,130 --> 00:34:08,540
privacy so we're absolutely passionate

00:34:06,260 --> 00:34:08,810
about privacy for - we'd love to talk to

00:34:08,540 --> 00:34:11,240
you

00:34:08,810 --> 00:34:13,669
we recruited founded panetta day which

00:34:11,240 --> 00:34:15,770
is a private funding agency by the

00:34:13,669 --> 00:34:19,190
Internet service providers Association

00:34:15,770 --> 00:34:21,260
austria then we're in the is a big

00:34:19,190 --> 00:34:24,800
incubation program which is a program by

00:34:21,260 --> 00:34:27,020
the european space agency where they are

00:34:24,800 --> 00:34:30,079
together with the cont with the country

00:34:27,020 --> 00:34:33,950
of lower austria fund startups and

00:34:30,079 --> 00:34:36,700
supply technology and we recently got a

00:34:33,950 --> 00:34:40,190
big grant from the ffk which is the

00:34:36,700 --> 00:34:43,270
national public funding agency for

00:34:40,190 --> 00:34:45,109
innovation and development our two Pro

00:34:43,270 --> 00:34:46,200
products that we're developing in do

00:34:45,109 --> 00:34:49,140
rank are

00:34:46,200 --> 00:34:50,790
an application firewall with the

00:34:49,140 --> 00:34:53,430
codename poor master and perish Network

00:34:50,790 --> 00:34:55,080
with the Coulomb gauge 17 we absolutely

00:34:53,430 --> 00:34:57,470
love talking about these products if

00:34:55,080 --> 00:35:00,360
you're interested in them talk to later

00:34:57,470 --> 00:35:00,510
they're both open source well yes there

00:35:00,360 --> 00:35:04,170
are

00:35:00,510 --> 00:35:06,900
k7 screen not on github it will be soon

00:35:04,170 --> 00:35:10,110
and also we are hiring a golden

00:35:06,900 --> 00:35:14,370
developer if anyone of you wanted to

00:35:10,110 --> 00:35:16,500
join our company that was it thank you

00:35:14,370 --> 00:35:20,420
are there any questions left do you have

00:35:16,500 --> 00:35:23,309
any ideas for me or feedback

00:35:20,420 --> 00:35:23,309

YouTube URL: https://www.youtube.com/watch?v=WyG2mXGj1yo


