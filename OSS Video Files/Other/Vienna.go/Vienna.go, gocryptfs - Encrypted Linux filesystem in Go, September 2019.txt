Title: Vienna.go, gocryptfs - Encrypted Linux filesystem in Go, September 2019
Publication date: 2019-10-01
Playlist: Vienna.go
Description: 
	Talk by Jakob Unterwurzacher
Captions: 
	00:00:00,079 --> 00:00:07,080
welcome to my talk my name is Jakob

00:00:03,659 --> 00:00:10,260
ultimate AHA and I'm the author of go

00:00:07,080 --> 00:00:13,410
crypt FS which is an transparent

00:00:10,260 --> 00:00:18,510
encrypting file system I will I will go

00:00:13,410 --> 00:00:21,300
about what it is what it does short how

00:00:18,510 --> 00:00:26,900
to use it a bit of history about go

00:00:21,300 --> 00:00:31,050
crypto face and how go made it easier to

00:00:26,900 --> 00:00:33,600
to get this project done so I start with

00:00:31,050 --> 00:00:36,329
the basics the name it's not very

00:00:33,600 --> 00:00:40,290
creative but this is this is what it

00:00:36,329 --> 00:00:43,200
means it is it is an encrypted

00:00:40,290 --> 00:00:48,410
filesystem written in code so that's

00:00:43,200 --> 00:00:48,410
what go cryptid face is what does it do

00:00:49,219 --> 00:00:56,399
and what is it / - it's a file

00:00:54,360 --> 00:00:58,800
encryption a file encryption solution it

00:00:56,399 --> 00:01:01,170
works on Linux which which is where it

00:00:58,800 --> 00:01:04,170
is primarily developed developed it also

00:01:01,170 --> 00:01:08,220
works on Mac and there is a third-party

00:01:04,170 --> 00:01:11,369
port it written in written in C++ which

00:01:08,220 --> 00:01:13,500
is what's called cpp crypt office which

00:01:11,369 --> 00:01:17,820
works in Windows it's an open source

00:01:13,500 --> 00:01:21,090
project on github MIT licensed and it's

00:01:17,820 --> 00:01:22,470
transparent encryption which means that

00:01:21,090 --> 00:01:24,509
you can use it like any other file

00:01:22,470 --> 00:01:29,100
system it's like a regular folder you

00:01:24,509 --> 00:01:31,110
can store files there and and a table D

00:01:29,100 --> 00:01:34,680
they will be transparently encrypted on

00:01:31,110 --> 00:01:39,900
your disk the the goal and motto of goal

00:01:34,680 --> 00:01:46,229
crypto-fascist simple secure fast we

00:01:39,900 --> 00:01:49,920
will see if I achieve this goal so what

00:01:46,229 --> 00:01:53,939
does it - I will revisit it revisit that

00:01:49,920 --> 00:01:59,880
in a lifetime or shortly we've go crypt

00:01:53,939 --> 00:02:02,219
of s you have two folders one is this is

00:01:59,880 --> 00:02:04,399
this is the folder on the right is where

00:02:02,219 --> 00:02:08,520
the files are actually stored on disk

00:02:04,399 --> 00:02:12,610
then go crypt of s generates a plain

00:02:08,520 --> 00:02:16,390
text view of this encrypted folder

00:02:12,610 --> 00:02:19,720
this is called my files here and as

00:02:16,390 --> 00:02:22,600
indicated here when you when you put

00:02:19,720 --> 00:02:25,720
files or folders in here they will

00:02:22,600 --> 00:02:28,510
appear on the encrypted side and as you

00:02:25,720 --> 00:02:31,810
see the filenames are just a bunch of

00:02:28,510 --> 00:02:37,090
garbage because these are encrypted

00:02:31,810 --> 00:02:39,970
together with the file content I will I

00:02:37,090 --> 00:02:50,130
will make a short life table to show you

00:02:39,970 --> 00:02:59,520
how to use it so so will make my files

00:02:50,130 --> 00:02:59,520
my files encrypted and then you have to

00:02:59,730 --> 00:03:04,330
you have to initialize the encrypted

00:03:02,260 --> 00:03:06,970
folder this will this will generate

00:03:04,330 --> 00:03:12,489
click the config file where the master

00:03:06,970 --> 00:03:15,640
key stored you choose the password I

00:03:12,489 --> 00:03:17,590
will just use test tests here then it

00:03:15,640 --> 00:03:20,860
prints this very important message that

00:03:17,590 --> 00:03:22,780
you should read and you should save or

00:03:20,860 --> 00:03:24,610
print out your master key because this

00:03:22,780 --> 00:03:29,290
will help you recover your files when

00:03:24,610 --> 00:03:29,860
you forget your password ok created

00:03:29,290 --> 00:03:33,519
successfully

00:03:29,860 --> 00:03:36,340
you can now mount it using Goku profess

00:03:33,519 --> 00:03:39,430
my files encrypted mount point so that's

00:03:36,340 --> 00:03:45,489
what I'm good what I'm gonna do my files

00:03:39,430 --> 00:03:51,840
and that's it I will open both both

00:03:45,489 --> 00:03:51,840
folders now so this is the

00:03:52,920 --> 00:04:00,360
okay so as we have seen before

00:03:57,360 --> 00:04:03,239
this is maybe I can get it a little

00:04:00,360 --> 00:04:06,390
bigger this is this is where the actual

00:04:03,239 --> 00:04:09,780
files are stored at the moment we just

00:04:06,390 --> 00:04:12,720
have this config file which is a it's a

00:04:09,780 --> 00:04:15,350
it's a JSON file that stores the

00:04:12,720 --> 00:04:20,160
equipted master key and some settings

00:04:15,350 --> 00:04:22,470
and an internal random seed which is not

00:04:20,160 --> 00:04:24,720
important here and this is the mounted

00:04:22,470 --> 00:04:27,450
this is the encrypted view and when I

00:04:24,720 --> 00:04:33,660
make a new folder you see that it

00:04:27,450 --> 00:04:34,500
appears on the other side that's it

00:04:33,660 --> 00:04:43,320
basically

00:04:34,500 --> 00:04:46,220
now you can we can we can unmold we can

00:04:43,320 --> 00:04:46,220
unmount this folder

00:04:48,350 --> 00:04:57,910
and then the decrypted view is gone and

00:04:52,520 --> 00:04:57,910
you need a password again to unlock this

00:04:59,350 --> 00:05:02,350
okay

00:05:15,930 --> 00:05:27,180
interesting okay there was a short

00:05:19,530 --> 00:05:29,490
lifetime what do you use it for you can

00:05:27,180 --> 00:05:31,889
use it to store your files and have them

00:05:29,490 --> 00:05:34,949
still easily accessible store them on an

00:05:31,889 --> 00:05:38,220
untrusted medium for example you can you

00:05:34,949 --> 00:05:40,320
can put it you could put it on your drop

00:05:38,220 --> 00:05:44,699
on your drop box or have an encrypted

00:05:40,320 --> 00:05:46,590
folder on your laptop or upload upload

00:05:44,699 --> 00:05:49,139
your files in an encrypted way from

00:05:46,590 --> 00:05:51,300
Google Drive but of course I basically

00:05:49,139 --> 00:05:52,949
have no idea what is what it was used

00:05:51,300 --> 00:05:54,960
for I just get little bits of

00:05:52,949 --> 00:05:57,740
information from from github tickets

00:05:54,960 --> 00:06:01,830
this was this was pretty interesting

00:05:57,740 --> 00:06:06,030
this was a github ticket from a user who

00:06:01,830 --> 00:06:08,340
uses it on Google Drive he an teen he

00:06:06,030 --> 00:06:11,280
wanted to know how to basically how to

00:06:08,340 --> 00:06:13,650
decrypt the file names so he can

00:06:11,280 --> 00:06:16,139
organize his stuff without decrypting

00:06:13,650 --> 00:06:20,310
and downloading everything and it turns

00:06:16,139 --> 00:06:22,500
out that he has 1.2 petabytes of data on

00:06:20,310 --> 00:06:26,660
Google Drive encrypted with conquer of

00:06:22,500 --> 00:06:26,660
device which I which I found pretty much

00:06:28,639 --> 00:06:36,870
now for the short history of crypt of s

00:06:32,099 --> 00:06:41,400
I started contribute contributing to a

00:06:36,870 --> 00:06:45,360
cafes which is a similar project it is

00:06:41,400 --> 00:06:47,190
written in C++ and I found a code quite

00:06:45,360 --> 00:06:51,449
complicated so I got the idea of

00:06:47,190 --> 00:06:53,430
starting a new project and I also found

00:06:51,449 --> 00:07:00,180
Co which which looked like the perfect

00:06:53,430 --> 00:07:06,030
match on 2015 I put the first code to

00:07:00,180 --> 00:07:09,630
github 2016 a a motivated person started

00:07:06,030 --> 00:07:11,849
a Windows port of Concord service with

00:07:09,630 --> 00:07:15,060
Nancy plus plus which is why it's called

00:07:11,849 --> 00:07:19,949
C PP crypt office I think it's I think

00:07:15,060 --> 00:07:24,270
it's a work event nowadays I reached one

00:07:19,949 --> 00:07:27,659
one dot over at some time and then looks

00:07:24,270 --> 00:07:28,600
like the company 23andme got interested

00:07:27,659 --> 00:07:31,390
in

00:07:28,600 --> 00:07:34,840
do you know do you know what this 20

00:07:31,390 --> 00:07:38,770
filled me however I will maybe just

00:07:34,840 --> 00:07:42,640
click it for people who don't they are a

00:07:38,770 --> 00:07:45,040
genetic testing company so they

00:07:42,640 --> 00:07:49,710
sponsored a security consulting firm to

00:07:45,040 --> 00:07:49,710
look at the security of go crypto face

00:07:50,260 --> 00:07:56,650
it was performed by Taylor Hornby and

00:07:53,280 --> 00:07:59,950
was generally favorable he found he

00:07:56,650 --> 00:08:05,020
found he found possible weaknesses which

00:07:59,950 --> 00:08:06,940
were subsequently fixed but in the end I

00:08:05,020 --> 00:08:13,180
have no idea if they if they chose to

00:08:06,940 --> 00:08:16,480
use Co profess or not a few months later

00:08:13,180 --> 00:08:19,210
I released the first version that is

00:08:16,480 --> 00:08:21,490
actually faster than Inc of s which was

00:08:19,210 --> 00:08:24,250
which were which always was the goal and

00:08:21,490 --> 00:08:28,320
over the years go corruptive s got

00:08:24,250 --> 00:08:31,900
included in the packet repositories of

00:08:28,320 --> 00:08:39,640
basically all the major distribution and

00:08:31,900 --> 00:08:41,440
even in homebrew for for McCoys and it

00:08:39,640 --> 00:08:48,840
has come to my attention that there's

00:08:41,440 --> 00:08:48,840
even talks about Co crypt Affairs now so

00:08:49,050 --> 00:08:55,600
the underlying technology that go crypt

00:08:51,700 --> 00:08:57,730
efface uses is called fuse it's the it's

00:08:55,600 --> 00:09:00,700
a file system in userspace protocol

00:08:57,730 --> 00:09:05,200
which which was originally developed for

00:09:00,700 --> 00:09:11,620
Linux it is also available in on Mac OS

00:09:05,200 --> 00:09:15,730
and on FreeBSD and Windows has something

00:09:11,620 --> 00:09:19,570
similar but it is much younger and and

00:09:15,730 --> 00:09:22,060
not and not as well integrated what

00:09:19,570 --> 00:09:24,400
happens here is that a user application

00:09:22,060 --> 00:09:27,550
for example wants to create a directory

00:09:24,400 --> 00:09:30,970
it asks the Linux kernel to create this

00:09:27,550 --> 00:09:33,070
directory for a system call and then the

00:09:30,970 --> 00:09:38,290
Linux kernel forwards it to a special

00:09:33,070 --> 00:09:40,540
file which is called death fuse and it

00:09:38,290 --> 00:09:41,320
sells the EM cardia photos command

00:09:40,540 --> 00:09:48,610
through

00:09:41,320 --> 00:09:52,060
the fuse protocol and this ends up in in

00:09:48,610 --> 00:09:53,740
the Goku profess file system and it's a

00:09:52,060 --> 00:09:55,540
note here other notable fuse file

00:09:53,740 --> 00:10:01,630
systems that you have maybe heard about

00:09:55,540 --> 00:10:05,160
our missus sshfs or even Linux NTFS the

00:10:01,630 --> 00:10:12,040
windows file system driver for linux is

00:10:05,160 --> 00:10:15,850
uses fuse so the fuse protocol is no fun

00:10:12,040 --> 00:10:17,410
to parse it's pretty complex I would I

00:10:15,850 --> 00:10:19,810
would I would say that it's more complex

00:10:17,410 --> 00:10:22,570
than HTTP it has sequence numbers

00:10:19,810 --> 00:10:25,390
parallel streams everything everything

00:10:22,570 --> 00:10:28,210
is addressed by node numbers instead of

00:10:25,390 --> 00:10:30,340
paths but fortunately there's a very

00:10:28,210 --> 00:10:37,420
good fuse library which is called

00:10:30,340 --> 00:10:40,780
confuse and go fuels parses this fuse

00:10:37,420 --> 00:10:43,090
protocol stream and gives us a normal go

00:10:40,780 --> 00:10:45,280
fund go function call whether what a

00:10:43,090 --> 00:10:48,760
file name is in this case the file name

00:10:45,280 --> 00:10:51,070
is just passed as a parameter then

00:10:48,760 --> 00:10:55,150
concur profess receive this function

00:10:51,070 --> 00:10:58,900
call encrypts the file name and write it

00:10:55,150 --> 00:11:02,350
to disk the reference implementation is

00:10:58,900 --> 00:11:04,090
it's called lit fuse and this is

00:11:02,350 --> 00:11:09,580
developed in lockstep with the Linux

00:11:04,090 --> 00:11:11,710
kernel so it's also it's also a bit of

00:11:09,580 --> 00:11:14,680
work to keep those two in sync but

00:11:11,710 --> 00:11:18,510
fortunately there's a maintain of

00:11:14,680 --> 00:11:18,510
confused who does a pretty good job so

00:11:19,740 --> 00:11:27,580
as I said go crypt of s encrypts both

00:11:23,380 --> 00:11:32,100
the content and the file names let's

00:11:27,580 --> 00:11:35,490
let's let's say you the user wants to

00:11:32,100 --> 00:11:38,410
make the directory photos confuse

00:11:35,490 --> 00:11:41,350
translates this into inter function call

00:11:38,410 --> 00:11:43,650
in to go crypt of s and then we actually

00:11:41,350 --> 00:11:48,340
create a directory with some random

00:11:43,650 --> 00:11:50,880
random garbage name in in the backing

00:11:48,340 --> 00:11:50,880
directory

00:11:52,200 --> 00:12:01,709
so I use a somewhat not too widely used

00:11:59,459 --> 00:12:04,709
algorithm which is called encrypt mix

00:12:01,709 --> 00:12:07,079
encrypt where I brought the

00:12:04,709 --> 00:12:10,970
implementation myself this this was also

00:12:07,079 --> 00:12:10,970
criticized in the in the security on it

00:12:11,300 --> 00:12:20,370
however I have test data well I did not

00:12:16,800 --> 00:12:23,250
specify the algorithm myself those two

00:12:20,370 --> 00:12:25,920
pretty pretty famous people Halevy rogue

00:12:23,250 --> 00:12:27,870
awaited and they also in the paper they

00:12:25,920 --> 00:12:31,079
also provide a test data to validate

00:12:27,870 --> 00:12:34,529
that the implementation is correct and

00:12:31,079 --> 00:12:43,470
of course there's a test for that so I

00:12:34,529 --> 00:12:49,350
think it's fine okay for file content we

00:12:43,470 --> 00:12:52,620
use the AES GCM algorithm because it's

00:12:49,350 --> 00:12:54,899
very fast and of course to allow random

00:12:52,620 --> 00:12:57,000
random offset you have to segment a file

00:12:54,899 --> 00:12:59,519
into into four kilo in the four

00:12:57,000 --> 00:13:00,089
kilobytes and stuff if you want all the

00:12:59,519 --> 00:13:03,180
details

00:13:00,089 --> 00:13:06,779
it's only a go crypt of this website by

00:13:03,180 --> 00:13:08,940
the way the last slide will be a link

00:13:06,779 --> 00:13:16,610
section that is references to all the

00:13:08,940 --> 00:13:19,620
projects that I mentioned testing so

00:13:16,610 --> 00:13:22,380
losing user data or obvious is a big

00:13:19,620 --> 00:13:25,790
deal so that's that's what file system

00:13:22,380 --> 00:13:25,790
implementation always wants to avoid

00:13:26,540 --> 00:13:34,470
what I what I did to a word toward it is

00:13:30,269 --> 00:13:37,350
to have tests and also make them easy to

00:13:34,470 --> 00:13:39,990
run I have a what I call a one click

00:13:37,350 --> 00:13:41,640
test shoot it's called tested paste you

00:13:39,990 --> 00:13:43,050
execute it it doesn't take any

00:13:41,640 --> 00:13:45,209
parameters you don't have to set up

00:13:43,050 --> 00:13:48,690
anything and it just does does its thing

00:13:45,209 --> 00:13:51,350
it runs two tests and in any 21 seconds

00:13:48,690 --> 00:13:55,319
which includes the compilation it's done

00:13:51,350 --> 00:13:59,370
I I also have a puncture of stress test

00:13:55,319 --> 00:14:02,209
scripts they run indefinitely in in the

00:13:59,370 --> 00:14:04,589
stress test folder and also those

00:14:02,209 --> 00:14:05,910
everything is one click you just execute

00:14:04,589 --> 00:14:10,350
it you don't need any power me

00:14:05,910 --> 00:14:12,660
and it just doesn't sting if if it's

00:14:10,350 --> 00:14:18,030
annoying to start the tests you just

00:14:12,660 --> 00:14:20,460
will not run them I think then what also

00:14:18,030 --> 00:14:24,180
found important is to not only have your

00:14:20,460 --> 00:14:26,730
own tests but to have an external

00:14:24,180 --> 00:14:30,030
testitude fortunately there is there is

00:14:26,730 --> 00:14:31,890
XFS test for linux it's it's like the

00:14:30,030 --> 00:14:34,770
standard test suit

00:14:31,890 --> 00:14:38,520
it is also tested it was used for

00:14:34,770 --> 00:14:43,730
testing the normal Linux file systems so

00:14:38,520 --> 00:14:47,100
what I did is I made my own fork I

00:14:43,730 --> 00:14:50,880
called it few success tests which is

00:14:47,100 --> 00:14:54,120
basically the exif s tests extended to

00:14:50,880 --> 00:14:57,830
also support testing go corrupt affairs

00:14:54,120 --> 00:15:03,050
and of course I added a one-click script

00:14:57,830 --> 00:15:03,050
that you execute and it runs the test

00:15:03,380 --> 00:15:09,240
the good thing about an actual test

00:15:05,850 --> 00:15:10,890
shoot is that they test things that you

00:15:09,240 --> 00:15:15,060
probably didn't even know about that

00:15:10,890 --> 00:15:17,490
they exist and X invest test does that

00:15:15,060 --> 00:15:20,100
and it it fallback single corrupt

00:15:17,490 --> 00:15:22,160
affairs of course in the indigo fields

00:15:20,100 --> 00:15:31,830
library and even in the Linux kernel

00:15:22,160 --> 00:15:34,920
that one was interesting how to how to

00:15:31,830 --> 00:15:37,260
get your project to run fast I think

00:15:34,920 --> 00:15:38,550
it's important if you if you want it if

00:15:37,260 --> 00:15:42,270
you need that it's important to have

00:15:38,550 --> 00:15:43,740
benchmarks and to make it easy to run

00:15:42,270 --> 00:15:45,270
them and of course there's a one-click

00:15:43,740 --> 00:15:49,620
script which is called benchmark

00:15:45,270 --> 00:15:52,970
toadfish and also concrete reverse has

00:15:49,620 --> 00:15:57,180
this integrated profiling and tracing

00:15:52,970 --> 00:15:59,220
you can enable it through command line

00:15:57,180 --> 00:16:01,500
flags this is this is all standard

00:15:59,220 --> 00:16:06,300
library functionality you pass those

00:16:01,500 --> 00:16:10,080
flags and it will bright the data you

00:16:06,300 --> 00:16:12,120
can analyze to those files and you see

00:16:10,080 --> 00:16:16,710
where your problems are where you spend

00:16:12,120 --> 00:16:19,560
most most of the time then what was also

00:16:16,710 --> 00:16:22,170
pretty helpful is to have a

00:16:19,560 --> 00:16:25,529
for the critical path for go crypt of s

00:16:22,170 --> 00:16:28,439
that's encryption to have a very simple

00:16:25,529 --> 00:16:38,730
speed test included maybe maybe maybe I

00:16:28,439 --> 00:16:40,559
can show it quickly what it does so it

00:16:38,730 --> 00:16:43,529
doesn't look too interesting in itself

00:16:40,559 --> 00:16:45,319
it just compares it compares two

00:16:43,529 --> 00:16:48,480
different implementations of

00:16:45,319 --> 00:16:50,399
the encryption the one is the one is in

00:16:48,480 --> 00:16:54,329
the standard library and the other is

00:16:50,399 --> 00:16:59,610
open SSL this is not too interesting in

00:16:54,329 --> 00:17:02,370
itself but to have this enabled users to

00:16:59,610 --> 00:17:07,370
run it easily on different CPUs and and

00:17:02,370 --> 00:17:09,390
and and somebody started the wiki page

00:17:07,370 --> 00:17:11,010
recording that the results for a

00:17:09,390 --> 00:17:19,169
difference abuse which was pretty

00:17:11,010 --> 00:17:22,110
interesting as I mentioned one one of

00:17:19,169 --> 00:17:24,539
the one of the goals was to get control

00:17:22,110 --> 00:17:28,890
defense running faster then the intended

00:17:24,539 --> 00:17:33,059
grandfather HFS of course what helps

00:17:28,890 --> 00:17:35,399
here is that I use a is just the ASUC M

00:17:33,059 --> 00:17:37,590
algorithm which is very fast and was not

00:17:35,399 --> 00:17:47,580
available at the time that NFS was

00:17:37,590 --> 00:17:51,870
written then what I also do is code is

00:17:47,580 --> 00:17:55,500
that you that I we use the data buffers

00:17:51,870 --> 00:17:58,049
that I allocate a as you may know as you

00:17:55,500 --> 00:18:01,049
may be aware go as a garbage collected

00:17:58,049 --> 00:18:04,110
language so when you when you ask give

00:18:01,049 --> 00:18:06,210
me give me a buffer of one megabyte then

00:18:04,110 --> 00:18:09,390
you use it and then you stop using it

00:18:06,210 --> 00:18:11,130
and then you get the next one then the

00:18:09,390 --> 00:18:16,080
garbage and locator has to clean up

00:18:11,130 --> 00:18:20,640
after you so cool is a way to save this

00:18:16,080 --> 00:18:22,950
buffer for later use you lose a few

00:18:20,640 --> 00:18:27,299
advantages and that the garbage

00:18:22,950 --> 00:18:29,130
collector provides so only do it if the

00:18:27,299 --> 00:18:32,960
profiles that you should be looking at

00:18:29,130 --> 00:18:35,640
tell you that you need it I think

00:18:32,960 --> 00:18:39,750
then also the library is very efficient

00:18:35,640 --> 00:18:47,580
and go made it very easy to parallelize

00:18:39,750 --> 00:18:51,630
the encryption into two frets then

00:18:47,580 --> 00:18:54,059
there's cases where pure go-go is not

00:18:51,630 --> 00:18:55,950
fast enough I've mentioned that I've

00:18:54,059 --> 00:18:59,940
mentioned that they use a very fast

00:18:55,950 --> 00:19:04,919
algorithm for encryption which is GCM

00:18:59,940 --> 00:19:07,710
and the goal library has a hint

00:19:04,919 --> 00:19:10,230
optimized version of this a written

00:19:07,710 --> 00:19:16,260
assembly it's super fast but it only

00:19:10,230 --> 00:19:22,320
exists for 64 bits 64-bit pcc peels that

00:19:16,260 --> 00:19:23,850
have crypto acceleration the pc i was

00:19:22,320 --> 00:19:26,400
working on the pc I was developing

00:19:23,850 --> 00:19:28,860
encrypted vessel did not have this

00:19:26,400 --> 00:19:32,130
crypto acceleration which was a pretty

00:19:28,860 --> 00:19:35,610
big motivation to try to get it to run

00:19:32,130 --> 00:19:38,330
faster and this was to use open SSL

00:19:35,610 --> 00:19:40,919
because open SSL has has optimized

00:19:38,330 --> 00:19:44,130
implementations for basically all the

00:19:40,919 --> 00:19:49,620
all only crypto algorithms built in for

00:19:44,130 --> 00:19:52,320
every CPU out there and conquer the face

00:19:49,620 --> 00:19:56,820
on startup detects if your CPU has this

00:19:52,320 --> 00:20:00,450
and decides what to use and I called a

00:19:56,820 --> 00:20:03,539
and I wrote a minimal wrapper around

00:20:00,450 --> 00:20:06,600
open SSL like a language bindings for Co

00:20:03,539 --> 00:20:10,380
it's called stupid to GCM it was not

00:20:06,600 --> 00:20:12,990
that bad and stupid GCM is called stupid

00:20:10,380 --> 00:20:14,960
because it only does what go

00:20:12,990 --> 00:20:17,640
defense really needs and if you pass

00:20:14,960 --> 00:20:20,010
other parameters are the key levels

00:20:17,640 --> 00:20:21,900
different different note says it was

00:20:20,010 --> 00:20:25,640
just panic and and a crash your

00:20:21,900 --> 00:20:30,409
application but it otherwise works fine

00:20:25,640 --> 00:20:30,409
okay last slide

00:20:33,889 --> 00:20:40,889
when I when I started thinking about or

00:20:38,159 --> 00:20:43,339
when I was working on NFS which which

00:20:40,889 --> 00:20:48,919
was written in which is still written in

00:20:43,339 --> 00:20:52,799
C++ it the code was very convoluted and

00:20:48,919 --> 00:20:55,830
and I originally planned to rewrite it

00:20:52,799 --> 00:20:58,499
in C because I find C easier to

00:20:55,830 --> 00:21:02,190
understand but done but then I

00:20:58,499 --> 00:21:06,389
discovered code which was C but somehow

00:21:02,190 --> 00:21:11,849
better in every way and that's what I

00:21:06,389 --> 00:21:15,359
chose and I think having getting Co help

00:21:11,849 --> 00:21:19,889
to have easier code have easier testing

00:21:15,359 --> 00:21:22,979
and easier profiling and it also still

00:21:19,889 --> 00:21:26,129
provided the tools to to call into into

00:21:22,979 --> 00:21:31,950
C libraries like like open SSL and also

00:21:26,129 --> 00:21:36,179
to do emergency scores here it also

00:21:31,950 --> 00:21:38,549
allowed me to use functions in the Linux

00:21:36,179 --> 00:21:41,399
kernel that are not available through

00:21:38,549 --> 00:21:47,459
the gold standard library so all this is

00:21:41,399 --> 00:21:50,429
possible in Co it runs pretty fast and I

00:21:47,459 --> 00:21:54,869
would definitely recommend it I would

00:21:50,429 --> 00:21:56,609
definitely choose it again so this is

00:21:54,869 --> 00:21:57,149
the this is the literal the literature

00:21:56,609 --> 00:22:00,599
slide

00:21:57,149 --> 00:22:04,560
I promised for later if you download the

00:22:00,599 --> 00:22:08,339
slides and that's it thank you

00:22:04,560 --> 00:22:08,339

YouTube URL: https://www.youtube.com/watch?v=N1xnEGdxF0Q


