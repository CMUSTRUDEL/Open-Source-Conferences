Title: Vienna.go, Versioned Go With vgo, May 2018
Publication date: 2018-05-10
Playlist: Vienna.go
Description: 
	Michael KÃ¶ppl will give a talk about vgo. When Go was first released, it had no concept of versioning software. Over the years, it became clear that a solution was needed and godep, glide, dep and many more came to be. vgo is the official approach by the Go developers to solve the problem of versioned Go software once and for all in a way fit for Go.
Captions: 
	00:00:00,030 --> 00:00:07,680
okay hi guys so I'm going to talk about

00:00:04,049 --> 00:00:09,389
Vigo first of all I want to thank Rob

00:00:07,680 --> 00:00:12,300
for pointing me in the direction of this

00:00:09,389 --> 00:00:15,240
topic because I had no idea it even

00:00:12,300 --> 00:00:19,980
existed so has anyone heard about Vigo

00:00:15,240 --> 00:00:22,199
as I used it has it worked really

00:00:19,980 --> 00:00:24,449
because I couldn't get it to work from

00:00:22,199 --> 00:00:31,230
my own project just for smaller project

00:00:24,449 --> 00:00:34,440
with fewer dependencies so yeah okay so

00:00:31,230 --> 00:00:37,590
I'm gonna start by talking about how

00:00:34,440 --> 00:00:41,460
this even came to be or how Vigo came to

00:00:37,590 --> 00:00:44,820
be so in 2009 we go started there was

00:00:41,460 --> 00:00:47,280
basically just a go build command which

00:00:44,820 --> 00:00:51,210
let you build a single package and

00:00:47,280 --> 00:00:54,210
created a make file for it so it was

00:00:51,210 --> 00:00:57,239
very simple very basic but it worked at

00:00:54,210 --> 00:01:01,219
the time so one year later we had to go

00:00:57,239 --> 00:01:03,899
install command which introduced the

00:01:01,219 --> 00:01:05,670
path comment conventions we have today

00:01:03,899 --> 00:01:10,290
like with go path and stuff like that

00:01:05,670 --> 00:01:12,420
and allows us to download packages from

00:01:10,290 --> 00:01:15,659
online sources like github bitbucket and

00:01:12,420 --> 00:01:18,590
so on and it didn't take long until

00:01:15,659 --> 00:01:21,930
developers started like migrating their

00:01:18,590 --> 00:01:24,659
projects to this new structure because

00:01:21,930 --> 00:01:29,060
it's it was like really needed for

00:01:24,659 --> 00:01:31,680
development with go and later on we got

00:01:29,060 --> 00:01:34,259
like the command was just basically

00:01:31,680 --> 00:01:38,909
transformed into go get so it wasn't

00:01:34,259 --> 00:01:42,960
much different in in in go get from go

00:01:38,909 --> 00:01:47,040
install and it was part of the goal one

00:01:42,960 --> 00:01:50,850
release but it still had no like concept

00:01:47,040 --> 00:01:54,210
of anything of versioning basically so

00:01:50,850 --> 00:01:58,710
you couldn't say this is version 1.0 of

00:01:54,210 --> 00:01:59,850
my package so the community jumped in

00:01:58,710 --> 00:02:02,729
and basically developed multiple

00:01:59,850 --> 00:02:05,189
packages that could do this like go tap

00:02:02,729 --> 00:02:09,840
glide and tap and there are probably

00:02:05,189 --> 00:02:11,670
hundreds more so that kind of showed

00:02:09,840 --> 00:02:13,010
that the community really wanted to have

00:02:11,670 --> 00:02:17,840
some kind of version

00:02:13,010 --> 00:02:19,489
rendering and stuff like that so but

00:02:17,840 --> 00:02:23,269
there was still like no official

00:02:19,489 --> 00:02:25,069
approach to this so someone said we need

00:02:23,269 --> 00:02:27,110
to add package versioning to go like an

00:02:25,069 --> 00:02:31,400
official once-and-for-all

00:02:27,110 --> 00:02:34,280
solution for this problem why because

00:02:31,400 --> 00:02:38,659
the developers of Go thought that we

00:02:34,280 --> 00:02:40,370
need reproducible builds like if I build

00:02:38,659 --> 00:02:42,319
my package today and they build it again

00:02:40,370 --> 00:02:43,970
tomorrow it has to be exactly the exact

00:02:42,319 --> 00:02:46,239
same package if I don't change any

00:02:43,970 --> 00:02:48,859
version numbers or something like that

00:02:46,239 --> 00:02:51,129
which is currently not always the case

00:02:48,859 --> 00:02:56,480
because if I build a package today and

00:02:51,129 --> 00:02:58,489
like Rio I update my dependencies

00:02:56,480 --> 00:03:00,799
tomorrow we've go get there's no

00:02:58,489 --> 00:03:04,040
guarantee I get the exam the exact same

00:03:00,799 --> 00:03:08,269
version that I had yesterday so it like

00:03:04,040 --> 00:03:11,690
it might break my my entire program if

00:03:08,269 --> 00:03:14,409
that happens so that is something the

00:03:11,690 --> 00:03:17,359
code developers thought important and

00:03:14,409 --> 00:03:19,069
they wanted us wanted to allow us to

00:03:17,359 --> 00:03:25,730
explicitly pick versions for the

00:03:19,069 --> 00:03:28,870
packages we use so one part of Vigo is

00:03:25,730 --> 00:03:31,489
that it uses or introduces semantic

00:03:28,870 --> 00:03:34,519
versioning or semantic and semantic

00:03:31,489 --> 00:03:37,250
import versioning which means that

00:03:34,519 --> 00:03:41,449
there's basically semver formatted

00:03:37,250 --> 00:03:46,579
version which is like three numbers two

00:03:41,449 --> 00:03:51,169
dots and the V and every number

00:03:46,579 --> 00:03:54,440
basically also has a meaning and yeah so

00:03:51,169 --> 00:03:56,949
if we import the package and it's a we

00:03:54,440 --> 00:03:59,239
have a version two of a package then the

00:03:56,949 --> 00:04:02,480
import path of that package also

00:03:59,239 --> 00:04:05,810
contains v2 if it's a version one of the

00:04:02,480 --> 00:04:08,150
package there is no v1 directory because

00:04:05,810 --> 00:04:11,180
the developers thought it isn't

00:04:08,150 --> 00:04:12,829
necessary at least for now it's that way

00:04:11,180 --> 00:04:17,000
maybe it will change because ego is

00:04:12,829 --> 00:04:19,329
still in development and it's mostly

00:04:17,000 --> 00:04:22,909
because the core developers encourage

00:04:19,329 --> 00:04:25,280
the developers of packages not to really

00:04:22,909 --> 00:04:26,560
introduce any breaking changes like a

00:04:25,280 --> 00:04:30,580
version to version

00:04:26,560 --> 00:04:33,900
three and they want to keep it that way

00:04:30,580 --> 00:04:35,950
can also they just decided that if

00:04:33,900 --> 00:04:38,169
developer never release is version to

00:04:35,950 --> 00:04:43,480
version free they don't have any

00:04:38,169 --> 00:04:47,190
subdirectory of that kind also new

00:04:43,480 --> 00:04:50,740
concept is that we have modules now or

00:04:47,190 --> 00:04:53,520
maybe we will have modules which are

00:04:50,740 --> 00:04:56,919
defined by a dot mod file where we enter

00:04:53,520 --> 00:04:58,750
basically the name of our module and the

00:04:56,919 --> 00:05:03,010
requirements of the dependencies it has

00:04:58,750 --> 00:05:05,440
where we can also pick a version there

00:05:03,010 --> 00:05:06,880
are many different ways to really pick a

00:05:05,440 --> 00:05:10,120
version you can just enter version

00:05:06,880 --> 00:05:12,130
number you can pick it by a committee

00:05:10,120 --> 00:05:18,060
edge basically yeah

00:05:12,130 --> 00:05:21,340
and this also what they want modules and

00:05:18,060 --> 00:05:25,360
the mod file to basically replace what

00:05:21,340 --> 00:05:27,010
is like the go path we have now so your

00:05:25,360 --> 00:05:29,410
project can be anywhere it doesn't have

00:05:27,010 --> 00:05:33,479
to be in your go path anymore or at

00:05:29,410 --> 00:05:37,419
least at least that's the goal for Vigo

00:05:33,479 --> 00:05:40,240
and right now we're using repositories

00:05:37,419 --> 00:05:44,979
for the import of packages we're using

00:05:40,240 --> 00:05:47,140
and it's it the developers want it to be

00:05:44,979 --> 00:05:49,600
really simple for other developers to

00:05:47,140 --> 00:05:52,990
switch to the new module system which is

00:05:49,600 --> 00:05:56,889
why I just have to tag your commits with

00:05:52,990 --> 00:06:01,000
a version number and it automatically

00:05:56,889 --> 00:06:04,960
creates a module for V go to import

00:06:01,000 --> 00:06:08,110
basically so it also it detects that

00:06:04,960 --> 00:06:11,289
this is a version that you defined so

00:06:08,110 --> 00:06:13,990
there's now a way for V go or go itself

00:06:11,289 --> 00:06:15,789
to recognize that there is a module and

00:06:13,990 --> 00:06:17,440
that there is a version of that module

00:06:15,789 --> 00:06:21,690
which was not the case or is not the

00:06:17,440 --> 00:06:24,190
case right now in the normal go version

00:06:21,690 --> 00:06:27,460
yeah it has to use the same birth format

00:06:24,190 --> 00:06:30,160
and that's what I already mentioned the

00:06:27,460 --> 00:06:33,659
v2 directory is added if there is a

00:06:30,160 --> 00:06:37,780
version two and so on and so forth and

00:06:33,659 --> 00:06:40,000
from a version two forwards there's a

00:06:37,780 --> 00:06:42,010
modifier required so if you have a

00:06:40,000 --> 00:06:44,500
version 1 you don't have to have a go

00:06:42,010 --> 00:06:45,790
mod file but with version 2 you have to

00:06:44,500 --> 00:06:47,940
have one because otherwise it doesn't

00:06:45,790 --> 00:06:47,940
work

00:06:48,100 --> 00:06:52,900
this is an example form from the

00:06:50,080 --> 00:06:55,960
proposal of Vigo there's an official

00:06:52,900 --> 00:06:58,390
proposal now and this is what the

00:06:55,960 --> 00:07:00,420
developers assume people are working

00:06:58,390 --> 00:07:02,830
like like they assume that you have

00:07:00,420 --> 00:07:04,240
major parameters basically so you have a

00:07:02,830 --> 00:07:08,410
version 1 branch

00:07:04,240 --> 00:07:10,810
version 2 branch and so on and you can

00:07:08,410 --> 00:07:13,419
see at the top left that there's like

00:07:10,810 --> 00:07:16,240
starting version which was created when

00:07:13,419 --> 00:07:18,280
there was no Vigo so it doesn't it isn't

00:07:16,240 --> 00:07:21,910
the module basically but you can still

00:07:18,280 --> 00:07:24,610
import it with Vigo so that works as so

00:07:21,910 --> 00:07:27,370
in modules that or packages that were

00:07:24,610 --> 00:07:32,350
created before we go existed can still

00:07:27,370 --> 00:07:34,600
be imported then in version 1.0.1

00:07:32,350 --> 00:07:37,750
we added a module definition with the

00:07:34,600 --> 00:07:41,200
mod file and when we jump to the version

00:07:37,750 --> 00:07:44,830
2 branch we basically just changed the

00:07:41,200 --> 00:07:46,930
module definition to a v2 so that that

00:07:44,830 --> 00:07:51,820
we go now knows that there is a v2 of

00:07:46,930 --> 00:07:55,479
that package there is also a difference

00:07:51,820 --> 00:07:59,530
in how static file servers can serve

00:07:55,479 --> 00:08:04,270
modules which is by using this structure

00:07:59,530 --> 00:08:09,520
of your URLs where you can define you

00:08:04,270 --> 00:08:12,910
define these these routes and this

00:08:09,520 --> 00:08:15,820
basically shows the Vigo that there are

00:08:12,910 --> 00:08:19,240
modules on that server or that the

00:08:15,820 --> 00:08:21,460
server serves modules to Vigo so there's

00:08:19,240 --> 00:08:24,150
a list which means that this is the list

00:08:21,460 --> 00:08:26,530
of all available versions for a package

00:08:24,150 --> 00:08:29,740
there's a info file which contains

00:08:26,530 --> 00:08:31,570
metadata for the package notify the

00:08:29,740 --> 00:08:36,909
server which we can download and the zip

00:08:31,570 --> 00:08:38,620
file for the package so the question is

00:08:36,909 --> 00:08:40,599
of course why don't they use that

00:08:38,620 --> 00:08:44,440
because that was the initial plan right

00:08:40,599 --> 00:08:49,860
they wanted to use step 2 or include

00:08:44,440 --> 00:08:53,290
that in go and the reason is mostly that

00:08:49,860 --> 00:08:54,040
that was somewhat inspired by Ruby's

00:08:53,290 --> 00:08:57,699
package man

00:08:54,040 --> 00:08:59,860
and entrusts cargo and so on and they

00:08:57,699 --> 00:09:02,170
kept very strictly to that structure and

00:08:59,860 --> 00:09:04,360
when the go developers started getting

00:09:02,170 --> 00:09:06,639
into the whole thing they somewhat

00:09:04,360 --> 00:09:10,600
decided that this wasn't perfect for God

00:09:06,639 --> 00:09:12,930
wasn't what go developers would want

00:09:10,600 --> 00:09:15,730
what they thought it wouldn't be because

00:09:12,930 --> 00:09:18,970
they don't want to break anything with

00:09:15,730 --> 00:09:23,470
Viggo they want to let developers keep

00:09:18,970 --> 00:09:28,089
their workflows and this wasn't really

00:09:23,470 --> 00:09:31,060
possible with the structure of depth so

00:09:28,089 --> 00:09:35,920
yeah they decided not to you step and go

00:09:31,060 --> 00:09:38,259
with Viggo instead so we go as it is

00:09:35,920 --> 00:09:42,130
right now because this it's it's really

00:09:38,259 --> 00:09:43,839
subject to change in the future is that

00:09:42,130 --> 00:09:46,389
it wants to keep the best parts of go

00:09:43,839 --> 00:09:49,389
get that it has right now wants to

00:09:46,389 --> 00:09:53,199
introduce or add with reproducible

00:09:49,389 --> 00:09:55,000
builds it wants to adopt some antic

00:09:53,199 --> 00:09:58,589
versioning so we really can define

00:09:55,000 --> 00:10:00,730
versions that make sense kind of

00:09:58,589 --> 00:10:02,860
eliminate been during so they don't want

00:10:00,730 --> 00:10:08,550
to have any vendor directories anymore

00:10:02,860 --> 00:10:12,610
like some yeah vendor in packages use it

00:10:08,550 --> 00:10:15,639
they want to deprecated gopath I think

00:10:12,610 --> 00:10:18,190
that's a good thing because it's it's

00:10:15,639 --> 00:10:20,290
unusual for a programming language to

00:10:18,190 --> 00:10:24,579
require to have your projects in a

00:10:20,290 --> 00:10:27,850
single directory so yeah why not change

00:10:24,579 --> 00:10:30,459
that and they also want to provide a

00:10:27,850 --> 00:10:34,240
smooth migration for it from the

00:10:30,459 --> 00:10:36,670
currently existing managers like Deb

00:10:34,240 --> 00:10:40,029
glide and so on so that developers don't

00:10:36,670 --> 00:10:44,399
have to get used entirely entirely new

00:10:40,029 --> 00:10:48,430
workflow and can just jump over to we go

00:10:44,399 --> 00:10:50,740
so the current status is that there is a

00:10:48,430 --> 00:10:52,480
preview of Vigo vert available so you

00:10:50,740 --> 00:10:55,870
can use it as a drop-in replacement for

00:10:52,480 --> 00:10:58,000
go as for the go command basically it

00:10:55,870 --> 00:11:00,759
can do everything the go command can do

00:10:58,000 --> 00:11:03,699
but it can like in like you can see in

00:11:00,759 --> 00:11:06,459
the video you can already import

00:11:03,699 --> 00:11:07,529
packages basically automatically so you

00:11:06,459 --> 00:11:10,230
don't have to do anything

00:11:07,529 --> 00:11:14,040
apart from adding the dependencies to

00:11:10,230 --> 00:11:16,829
the mod file so I tested this with a

00:11:14,040 --> 00:11:18,899
very small package in this example which

00:11:16,829 --> 00:11:20,850
has just one dependency but it worked

00:11:18,899 --> 00:11:22,860
for bigger projects I couldn't get it to

00:11:20,850 --> 00:11:26,069
work because there are still some

00:11:22,860 --> 00:11:31,019
mistakes in in Vigo and many issues on

00:11:26,069 --> 00:11:33,480
github so it works most of the time it

00:11:31,019 --> 00:11:35,999
requires go one point ten and upwards so

00:11:33,480 --> 00:11:41,430
you can't you have to upgrade if you

00:11:35,999 --> 00:11:44,699
want to not but as soon as it's included

00:11:41,430 --> 00:11:48,660
in goal yeah you will have to use it

00:11:44,699 --> 00:11:52,649
anyway at some point because the current

00:11:48,660 --> 00:11:57,329
plan is to introduce Vigo sort of into

00:11:52,649 --> 00:11:59,639
go one point 11 and then go on and let

00:11:57,329 --> 00:12:02,279
the developers give feedback to it and

00:11:59,639 --> 00:12:08,569
sort of finalize it until go one point

00:12:02,279 --> 00:12:12,809
12 and then sort of end to support for

00:12:08,569 --> 00:12:18,990
gopath and non modules we are go get by

00:12:12,809 --> 00:12:21,089
one point thirteen so yeah there are

00:12:18,990 --> 00:12:22,589
still many bigger problems that need

00:12:21,089 --> 00:12:27,329
solving so it's going to take take some

00:12:22,589 --> 00:12:29,970
time so it's gonna be a like quick so

00:12:27,329 --> 00:12:33,990
you're going to be a fast development of

00:12:29,970 --> 00:12:37,110
the new package management or module

00:12:33,990 --> 00:12:39,720
management and there is currently no

00:12:37,110 --> 00:12:41,550
deprecation feature so developers cannot

00:12:39,720 --> 00:12:46,110
say that this version of a package is

00:12:41,550 --> 00:12:48,420
deprecated so that's just one of the

00:12:46,110 --> 00:12:53,870
features that that's not included right

00:12:48,420 --> 00:12:53,870
now but they're working on it so yeah

00:12:54,960 --> 00:13:01,739
Thanks

00:12:57,320 --> 00:13:01,739

YouTube URL: https://www.youtube.com/watch?v=Qz681npRFAg


