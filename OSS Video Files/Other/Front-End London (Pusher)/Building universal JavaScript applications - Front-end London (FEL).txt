Title: Building universal JavaScript applications - Front-end London (FEL)
Publication date: 2016-07-14
Playlist: Front-End London
Description: 
	The main criticism of single page applications has always been their reliance on JavaScript but recently we've seen a focus in running these client side applications on the server. In this talk, Jack Franklin discusses why and how you can run your client side JavaScript application on the server.

▼ Links mentioned in the talk ▼

- https://github.com/jackfranklin/universal-react-talk

▼ Slides ▼

https://speakerdeck.com/jackfranklin/front-end-london-universal-react

▼ Speaker ▼

Jack Franklin (@jack_franklin)

▼ Event ▼

This talk was part of the Front-end London (FEL) May 2016 event.

▼ Transcript ▼

Coming soon...

▼ Video by Pusher ▼

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications.

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure.

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more.

Getting started takes just a few seconds: simply go to https://pusher.com and create a free account. Happy hacking!

▼ More from Pusher ▼

Subscribe to Pusher: https://www.youtube.com/c/pusherrealtime?sub_confirmation=1
Front End London playlist: https://www.youtube.com/playlist?list=PL8xuokhAnn4pZ6tAyFobOcUrLI2MNKZbU
Captions: 
	00:00:12,460 --> 00:00:16,810
everyone thankfully into R&D and for

00:00:15,040 --> 00:00:18,369
having me for the third time here I

00:00:16,810 --> 00:00:20,260
think and an epic fellows well so don't

00:00:18,369 --> 00:00:21,730
know why still putting up with me but he

00:00:20,260 --> 00:00:22,930
keeps letting me come along and I keep

00:00:21,730 --> 00:00:24,939
talking about JavaScript hopefully

00:00:22,930 --> 00:00:26,200
without boring people too much so yeah

00:00:24,939 --> 00:00:27,670
my name is Jack oh that's me on Twitter

00:00:26,200 --> 00:00:30,640
I work for a company called pusher I'm

00:00:27,670 --> 00:00:32,290
entrust whose heads are pusher that's

00:00:30,640 --> 00:00:34,060
pretty good as my job done for evening

00:00:32,290 --> 00:00:36,370
those haven't we're like a hosted

00:00:34,060 --> 00:00:37,810
real-time platform coming chat to me

00:00:36,370 --> 00:00:40,329
about pusher I'm not here to talk about

00:00:37,810 --> 00:00:42,430
them what I talk about is actually my

00:00:40,329 --> 00:00:44,679
own company as one of my colleagues whom

00:00:42,430 --> 00:00:46,030
is sat in the audience so I just work

00:00:44,679 --> 00:00:47,859
for a company called Go Carles who's

00:00:46,030 --> 00:00:50,530
heard of goecart this it's not gonna be

00:00:47,859 --> 00:00:51,820
every slide okay more people have more

00:00:50,530 --> 00:00:54,480
people have heard of go Carlist so I've

00:00:51,820 --> 00:00:56,920
made a dreadful career move but anyway

00:00:54,480 --> 00:00:58,719
so this whole story started the reason

00:00:56,920 --> 00:01:00,399
this this talk came about was we had to

00:00:58,719 --> 00:01:02,920
rebuild this website so go cars is a

00:01:00,399 --> 00:01:04,540
payments provider and at the time we

00:01:02,920 --> 00:01:06,730
were based purely in the UK and we only

00:01:04,540 --> 00:01:08,320
served UK businesses that was fine so

00:01:06,730 --> 00:01:10,090
the go card is kind of what I would call

00:01:08,320 --> 00:01:12,460
these the splash pages the static site

00:01:10,090 --> 00:01:13,780
was a jackal build and it was all in

00:01:12,460 --> 00:01:15,070
English because we only served the UK

00:01:13,780 --> 00:01:17,890
and that was easy we just generate some

00:01:15,070 --> 00:01:20,140
HTML and threw it onto the internet but

00:01:17,890 --> 00:01:21,549
then we we launched in France and we

00:01:20,140 --> 00:01:24,520
needed a French version so we needed

00:01:21,549 --> 00:01:25,720
actual you know French pages so we did

00:01:24,520 --> 00:01:28,329
what every good developer does and

00:01:25,720 --> 00:01:31,420
copied the folder

00:01:28,329 --> 00:01:32,439
made another one called France and got

00:01:31,420 --> 00:01:34,659
the people who speak French in the

00:01:32,439 --> 00:01:36,520
office which is not me to to make the

00:01:34,659 --> 00:01:38,170
French version and that kind of worked

00:01:36,520 --> 00:01:39,490
just about you know jus plication is

00:01:38,170 --> 00:01:41,380
okay once and all the rest of it and

00:01:39,490 --> 00:01:43,090
then we need to launch in a current a

00:01:41,380 --> 00:01:45,310
Germany wherever it was another language

00:01:43,090 --> 00:01:47,110
basically and we can quite bring

00:01:45,310 --> 00:01:49,210
ourselves to to do it three times

00:01:47,110 --> 00:01:50,590
although it was quite tempting and we

00:01:49,210 --> 00:01:54,039
started think about what else we might

00:01:50,590 --> 00:01:55,450
instead do and we needed to build a

00:01:54,039 --> 00:01:57,060
framework to kind of let us manage all

00:01:55,450 --> 00:01:59,530
these multiple languages on the site

00:01:57,060 --> 00:02:00,820
additionally this site you know this is

00:01:59,530 --> 00:02:02,079
their whole go color site so there's all

00:02:00,820 --> 00:02:04,570
about our product but there's also

00:02:02,079 --> 00:02:05,979
things like the jobs pages about us so

00:02:04,570 --> 00:02:07,329
we needed not just engineer's to be able

00:02:05,979 --> 00:02:09,369
to edit this stuff ideally this should

00:02:07,329 --> 00:02:10,899
be as well across the whole company and

00:02:09,369 --> 00:02:14,020
at the time there was this little

00:02:10,899 --> 00:02:16,090
library called react flowing around and

00:02:14,020 --> 00:02:17,200
we kind of use this as a mint of excuse

00:02:16,090 --> 00:02:18,550
to see if we could build a react

00:02:17,200 --> 00:02:21,040
application that would that would run

00:02:18,550 --> 00:02:23,770
all us all our all the splash pages for

00:02:21,040 --> 00:02:25,420
go cardless as we'd let use we'd have a

00:02:23,770 --> 00:02:26,230
French version and so on and so forth we

00:02:25,420 --> 00:02:29,050
build it as a kind of

00:02:26,230 --> 00:02:30,370
javascript framework if you like but of

00:02:29,050 --> 00:02:32,290
course we didn't want go cardless to be

00:02:30,370 --> 00:02:34,060
a massive javascript application that

00:02:32,290 --> 00:02:36,459
wasn't accessible there was no need for

00:02:34,060 --> 00:02:38,860
it to be a JavaScript application though

00:02:36,459 --> 00:02:40,299
these days everyone is doing that and we

00:02:38,860 --> 00:02:42,280
started look at how we could write react

00:02:40,299 --> 00:02:43,810
on the server as well react does come

00:02:42,280 --> 00:02:45,430
out the box we have server-side support

00:02:43,810 --> 00:02:47,049
that means you can run reactant and say

00:02:45,430 --> 00:02:49,690
a node environment and just get it to

00:02:47,049 --> 00:02:51,220
spit out strings of HTML for you and

00:02:49,690 --> 00:02:54,250
that's really where where we started

00:02:51,220 --> 00:02:55,420
from the website launched I can remember

00:02:54,250 --> 00:02:57,370
how long ago it launched it was quite a

00:02:55,420 --> 00:02:58,420
while ago it's been out a while I've see

00:02:57,370 --> 00:02:59,980
I've not been there for a while but I'm

00:02:58,420 --> 00:03:03,280
led to believe it's still doing a good

00:02:59,980 --> 00:03:04,510
job and still plugging along and it's a

00:03:03,280 --> 00:03:06,549
really nice experience because if you

00:03:04,510 --> 00:03:07,840
visit it without JavaScript you get the

00:03:06,549 --> 00:03:09,910
website because it comes from the server

00:03:07,840 --> 00:03:12,099
if you happen to have JavaScript loaded

00:03:09,910 --> 00:03:13,900
for whatever reason then you get the

00:03:12,099 --> 00:03:15,849
full just experience it's all loaded in

00:03:13,900 --> 00:03:17,440
the page so every click is incredibly

00:03:15,849 --> 00:03:19,359
snappy because you're just you're just

00:03:17,440 --> 00:03:21,849
swapping out bits of content basically

00:03:19,359 --> 00:03:23,470
using react if you load it and then you

00:03:21,849 --> 00:03:24,790
lose connection or your JavaScript

00:03:23,470 --> 00:03:26,200
doesn't load you click a button it just

00:03:24,790 --> 00:03:27,879
goes it goes back to serve again so it's

00:03:26,200 --> 00:03:29,560
a really nice experience for for all the

00:03:27,879 --> 00:03:31,410
really and why we kind of we really

00:03:29,560 --> 00:03:33,669
bought into it and why I bought into it

00:03:31,410 --> 00:03:35,590
so I'll link to all these at the end but

00:03:33,669 --> 00:03:37,510
I wrote a blog post for twenty four ways

00:03:35,590 --> 00:03:39,639
last Christmas on Universal react and

00:03:37,510 --> 00:03:41,109
then from this the blog post kind of

00:03:39,639 --> 00:03:43,750
sorry from that blog post that the

00:03:41,109 --> 00:03:46,180
talking about there's a few kind of

00:03:43,750 --> 00:03:48,669
reasons that we you know building Java

00:03:46,180 --> 00:03:52,209
applications that are a hundred central

00:03:48,669 --> 00:03:54,099
line on JavaScript is a bad idea I just

00:03:52,209 --> 00:03:56,139
work at GDS as well along with long

00:03:54,099 --> 00:03:57,940
Sharron and we did this study or I say

00:03:56,139 --> 00:03:59,709
we someone in the company but if I say

00:03:57,940 --> 00:04:02,470
we it sounds like I was involved did

00:03:59,709 --> 00:04:04,660
this study and on the gov UK website one

00:04:02,470 --> 00:04:05,590
in one in ninety three or one point one

00:04:04,660 --> 00:04:07,599
percent of people weren't getting

00:04:05,590 --> 00:04:09,069
JavaScript so when they visited gov UK

00:04:07,599 --> 00:04:11,079
for whatever reason we didn't have any

00:04:09,069 --> 00:04:13,000
JavaScript running what's more

00:04:11,079 --> 00:04:14,980
interesting than that stat is that of

00:04:13,000 --> 00:04:16,539
those 1.1 percent only nought point two

00:04:14,980 --> 00:04:18,099
were the people who had explicitly gone

00:04:16,539 --> 00:04:19,959
into their browser and configured

00:04:18,099 --> 00:04:21,910
JavaScript to be turned off the rest

00:04:19,959 --> 00:04:23,410
hadn't got JavaScript for any number of

00:04:21,910 --> 00:04:24,729
reasons their connectivity was bad

00:04:23,410 --> 00:04:26,710
whatever they were in a train they went

00:04:24,729 --> 00:04:29,590
in a tunnel they were on a national rail

00:04:26,710 --> 00:04:31,000
train whatever it might be and and this

00:04:29,590 --> 00:04:32,650
was really interesting to me because I

00:04:31,000 --> 00:04:35,650
did used to have this kind of gung-ho

00:04:32,650 --> 00:04:36,969
attitude of well you know if people have

00:04:35,650 --> 00:04:39,760
turned off JavaScript and they don't

00:04:36,969 --> 00:04:40,100
deserve anything and I still kind of

00:04:39,760 --> 00:04:41,990
think

00:04:40,100 --> 00:04:43,460
might be a little bit true but you know

00:04:41,990 --> 00:04:44,810
most people who are visiting without

00:04:43,460 --> 00:04:46,790
javascript didn't actually have it in

00:04:44,810 --> 00:04:49,250
the first place and not out of choice

00:04:46,790 --> 00:04:52,670
because of their their certain situation

00:04:49,250 --> 00:04:54,620
and this blog posting includes that

00:04:52,670 --> 00:04:55,730
quote just only a small slice of people

00:04:54,620 --> 00:04:58,310
who don't run JavaScript are the ones

00:04:55,730 --> 00:04:59,720
who have chosen not to and this kind of

00:04:58,310 --> 00:05:01,280
comes down to the whole progressive

00:04:59,720 --> 00:05:03,260
enhancement and does it just mean if

00:05:01,280 --> 00:05:05,270
javascript is turned off or not Jake

00:05:03,260 --> 00:05:06,740
Archibald in this blog post about

00:05:05,270 --> 00:05:08,240
progressive enhancement says it's still

00:05:06,740 --> 00:05:10,520
it's never been about people who have

00:05:08,240 --> 00:05:11,630
turned JavaScript off these greens by

00:05:10,520 --> 00:05:14,630
the way all links and I'll put the

00:05:11,630 --> 00:05:15,650
slides up afterwards and a guy called

00:05:14,630 --> 00:05:17,300
Stuart language is this really cool

00:05:15,650 --> 00:05:19,520
flowchart which again is linked at the

00:05:17,300 --> 00:05:22,040
bottom which goes through the the steps

00:05:19,520 --> 00:05:23,930
taken from a user hitting like go Carlos

00:05:22,040 --> 00:05:26,150
comm and it downloading all the files

00:05:23,930 --> 00:05:27,620
and all the points that for what some

00:05:26,150 --> 00:05:29,180
reason the requests can fail and

00:05:27,620 --> 00:05:31,400
therefore JavaScript won't make it to

00:05:29,180 --> 00:05:34,820
the end user on a train there was

00:05:31,400 --> 00:05:37,100
incident where sky they decided that

00:05:34,820 --> 00:05:39,770
jquery's from I think the Google CDN was

00:05:37,100 --> 00:05:40,850
a virus and blocked jQuery again might

00:05:39,770 --> 00:05:43,010
be the best decision they've ever made

00:05:40,850 --> 00:05:45,470
but you know suddenly loads these

00:05:43,010 --> 00:05:47,690
websites broke completely because sky

00:05:45,470 --> 00:05:49,460
made a mistake and we've had like

00:05:47,690 --> 00:05:50,810
browser add-ons can mess with JavaScript

00:05:49,460 --> 00:05:52,160
there are so many different

00:05:50,810 --> 00:05:55,160
circumstances in which your JavaScript

00:05:52,160 --> 00:05:57,290
can partially xq not ask you at all be a

00:05:55,160 --> 00:05:58,790
bit or whatever so it's really important

00:05:57,290 --> 00:06:02,000
that we we deal with that and bear that

00:05:58,790 --> 00:06:04,370
in mind a really recent talk from Google

00:06:02,000 --> 00:06:05,600
IO which I've stupidly not put the link

00:06:04,370 --> 00:06:10,070
to so you have to copy it from the

00:06:05,600 --> 00:06:11,690
screenshot yeah that was a bit silly of

00:06:10,070 --> 00:06:12,860
me this is addy osmani talking about

00:06:11,690 --> 00:06:14,600
progressive web apps across all

00:06:12,860 --> 00:06:16,370
frameworks this was literally last week

00:06:14,600 --> 00:06:17,810
I just want to put this in there and I

00:06:16,370 --> 00:06:19,370
mention this again in a minute whilst

00:06:17,810 --> 00:06:20,780
I'm gonna talk within the context of a

00:06:19,370 --> 00:06:23,180
react application because that's what I

00:06:20,780 --> 00:06:25,010
know and have worked on this this this

00:06:23,180 --> 00:06:27,650
kind of general thinking is is spreading

00:06:25,010 --> 00:06:29,150
across all frameworks as well so even if

00:06:27,650 --> 00:06:30,500
you personally are not using react if

00:06:29,150 --> 00:06:33,080
using something else I hope that the

00:06:30,500 --> 00:06:34,850
talk can still be relevant team and

00:06:33,080 --> 00:06:36,170
another thing just to be clear I'm

00:06:34,850 --> 00:06:37,910
definitely not here to advocate building

00:06:36,170 --> 00:06:39,110
all websites and applications as we're

00:06:37,910 --> 00:06:40,370
at applications that are run on the

00:06:39,110 --> 00:06:42,110
server and the client as well there's

00:06:40,370 --> 00:06:44,570
very you have to think about if this is

00:06:42,110 --> 00:06:45,950
the right fit for you you know go

00:06:44,570 --> 00:06:47,840
cardless could easily be a server-side

00:06:45,950 --> 00:06:49,010
application only and that'd be fine

00:06:47,840 --> 00:06:50,419
we found that with a little bit of

00:06:49,010 --> 00:06:52,310
JavaScript we could really improve the

00:06:50,419 --> 00:06:52,830
experience but this isn't a talk where

00:06:52,310 --> 00:06:56,160
I'm going to have

00:06:52,830 --> 00:06:58,350
react for absolutely everything and also

00:06:56,160 --> 00:07:00,180
caveats were kind of just we're just

00:06:58,350 --> 00:07:01,770
starting to really get deep into the

00:07:00,180 --> 00:07:03,600
nitty-gritty of server-side rendering

00:07:01,770 --> 00:07:05,400
and frameworks and how this this plays

00:07:03,600 --> 00:07:07,680
nicely so there are a bit of rough edges

00:07:05,400 --> 00:07:08,880
I'm gonna throw some code at you I'll

00:07:07,680 --> 00:07:10,350
see all the sides will be online there

00:07:08,880 --> 00:07:13,110
is also github repo that has an actual

00:07:10,350 --> 00:07:14,700
working example some of the api's are

00:07:13,110 --> 00:07:16,020
stuff for a little bit rough like these

00:07:14,700 --> 00:07:17,190
will probably be chained these will

00:07:16,020 --> 00:07:18,990
probably change over time and be

00:07:17,190 --> 00:07:22,170
outdated in six months or a year or a

00:07:18,990 --> 00:07:23,190
day so so just bear with me like some of

00:07:22,170 --> 00:07:24,870
the stuff is a bit rough around the

00:07:23,190 --> 00:07:27,660
edges but we are kind of really at the

00:07:24,870 --> 00:07:30,060
boundaries of this stuff as I said react

00:07:27,660 --> 00:07:31,950
to paved the way but we have Ember have

00:07:30,060 --> 00:07:33,600
a thing called fastboot which is the

00:07:31,950 --> 00:07:36,270
same idea you can run your ember app in

00:07:33,600 --> 00:07:39,060
a node node kind of environment and

00:07:36,270 --> 00:07:40,590
angular 2 has angular Universal which is

00:07:39,060 --> 00:07:43,440
a similar idea to that you can run these

00:07:40,590 --> 00:07:44,970
apps away from the browser and the whole

00:07:43,440 --> 00:07:46,920
idea here with all of these framers is

00:07:44,970 --> 00:07:48,540
that we can get this not for free but

00:07:46,920 --> 00:07:50,010
with very little effort so that the goal

00:07:48,540 --> 00:07:51,690
here is that you can write your react or

00:07:50,010 --> 00:07:53,790
ember or angular or whatever app and

00:07:51,690 --> 00:07:55,080
just put a small amount extra effort in

00:07:53,790 --> 00:07:58,200
to get that service side rendering for

00:07:55,080 --> 00:07:59,730
you and just to give you a link again

00:07:58,200 --> 00:08:00,960
I'll tweet the slides and hashtag it and

00:07:59,730 --> 00:08:03,360
put it in the slack group and all the

00:08:00,960 --> 00:08:05,160
rest of it but there is a repo on github

00:08:03,360 --> 00:08:06,210
there is a branch called fel because

00:08:05,160 --> 00:08:08,190
I've done this talk about four times

00:08:06,210 --> 00:08:11,760
that has the latest version of all the

00:08:08,190 --> 00:08:13,440
demos and stuff on them so if we take a

00:08:11,760 --> 00:08:16,050
look at a kind of standard reactor

00:08:13,440 --> 00:08:18,150
application in-depth knowledge of react

00:08:16,050 --> 00:08:20,790
definitely not required for the talk but

00:08:18,150 --> 00:08:22,260
we have a component called my app and it

00:08:20,790 --> 00:08:23,640
has a render method in that render

00:08:22,260 --> 00:08:24,780
method I declare what this component

00:08:23,640 --> 00:08:27,360
should look like when it's put into the

00:08:24,780 --> 00:08:28,740
browser then we call react Dom dot

00:08:27,360 --> 00:08:30,570
render we give it the component to

00:08:28,740 --> 00:08:32,160
render this this my app tag here and

00:08:30,570 --> 00:08:33,750
then we just tell it where to put it

00:08:32,160 --> 00:08:35,310
onto the page so this in this case it's

00:08:33,750 --> 00:08:37,320
going to render that my app component

00:08:35,310 --> 00:08:40,290
and put it into the div on the page with

00:08:37,320 --> 00:08:42,930
an ID of app and that's the the browser

00:08:40,290 --> 00:08:44,850
side and if I want to swap this to a

00:08:42,930 --> 00:08:47,130
server-side render that I just swap out

00:08:44,850 --> 00:08:49,170
the react Dom bit to render to string

00:08:47,130 --> 00:08:51,150
and that instead of trying to render it

00:08:49,170 --> 00:08:54,000
into a Dom into a browser will just give

00:08:51,150 --> 00:08:57,750
me a literal string of HTML and that's

00:08:54,000 --> 00:08:59,550
it talks over but it's really cool that

00:08:57,750 --> 00:09:01,800
react gives you all that out of the box

00:08:59,550 --> 00:09:03,600
and it is that that simple and the key

00:09:01,800 --> 00:09:05,610
thing to note here is that the my app

00:09:03,600 --> 00:09:06,220
bit never changes and that's the thing I

00:09:05,610 --> 00:09:07,930
want you to keep

00:09:06,220 --> 00:09:10,510
heads as we go through and if you start

00:09:07,930 --> 00:09:12,550
building apps in this way as little of

00:09:10,510 --> 00:09:13,840
your as excuse me as little as your

00:09:12,550 --> 00:09:15,010
application as possible should know

00:09:13,840 --> 00:09:16,810
whether it's on the server or the client

00:09:15,010 --> 00:09:18,820
or whatnot ideally we keep it entirely

00:09:16,810 --> 00:09:20,440
agnostic and only at the very boundaries

00:09:18,820 --> 00:09:23,680
do we change where we're going to render

00:09:20,440 --> 00:09:25,270
it to of course it's a little bit more

00:09:23,680 --> 00:09:28,750
involved in that so we can set up like a

00:09:25,270 --> 00:09:30,550
little Express node server which just

00:09:28,750 --> 00:09:32,530
kind of imports this this app component

00:09:30,550 --> 00:09:35,320
we pull in the render to string methods

00:09:32,530 --> 00:09:37,450
and then on any request we just generate

00:09:35,320 --> 00:09:38,860
our own markup and we render this just

00:09:37,450 --> 00:09:40,630
renders a template and just runs the

00:09:38,860 --> 00:09:42,400
HTML the kind of details of that aren't

00:09:40,630 --> 00:09:43,930
too important and that's it that will

00:09:42,400 --> 00:09:46,960
spin up a server that does indeed work

00:09:43,930 --> 00:09:48,430
and in some examples you'll see this

00:09:46,960 --> 00:09:50,050
method render to string used

00:09:48,430 --> 00:09:52,030
there's also another method called

00:09:50,050 --> 00:09:53,860
render to static markup that react

00:09:52,030 --> 00:09:55,960
provides for us there's a subtle

00:09:53,860 --> 00:09:57,640
difference between the two you should

00:09:55,960 --> 00:09:59,530
use render to string when you're

00:09:57,640 --> 00:10:01,390
expecting the the HTML that is rendered

00:09:59,530 --> 00:10:03,070
to be picked up by react application on

00:10:01,390 --> 00:10:04,600
the client rendered source string will

00:10:03,070 --> 00:10:06,250
include some kind of extra attributes in

00:10:04,600 --> 00:10:07,660
the HTML that will allow the client-side

00:10:06,250 --> 00:10:09,580
JavaScript to pick it up and work with

00:10:07,660 --> 00:10:10,900
it if you know that's not going to be

00:10:09,580 --> 00:10:12,010
the case you're purely working on the

00:10:10,900 --> 00:10:13,210
server-side you're not going to run

00:10:12,010 --> 00:10:15,100
client-side JavaScript for whatever

00:10:13,210 --> 00:10:16,330
reason you can just call renders a

00:10:15,100 --> 00:10:17,890
static markup and that will give you a

00:10:16,330 --> 00:10:20,020
kind of lien markup if you like that

00:10:17,890 --> 00:10:23,560
doesn't have any of the specific react

00:10:20,020 --> 00:10:26,140
attributes and if I take this server and

00:10:23,560 --> 00:10:27,580
I run it I just get back this I think

00:10:26,140 --> 00:10:29,440
actually this with the latest version of

00:10:27,580 --> 00:10:31,150
react some of these nitty-gritty details

00:10:29,440 --> 00:10:35,070
have changed but the idea is are saying

00:10:31,150 --> 00:10:37,900
this is generated purely from from react

00:10:35,070 --> 00:10:39,850
so that's a bit very basic server-side

00:10:37,900 --> 00:10:41,470
example but one of the benefits we found

00:10:39,850 --> 00:10:43,630
at go cardless was that we could then

00:10:41,470 --> 00:10:45,520
take all this code and push it onto the

00:10:43,630 --> 00:10:47,560
client as well and those people who did

00:10:45,520 --> 00:10:50,260
have JavaScript will get a just a little

00:10:47,560 --> 00:10:51,400
bit more of a snappy experience then if

00:10:50,260 --> 00:10:53,860
we start looking at how we can take this

00:10:51,400 --> 00:10:55,210
client-side we're gonna have a shared

00:10:53,860 --> 00:10:57,190
set of components that are environment

00:10:55,210 --> 00:10:59,590
agnostic this is all our react

00:10:57,190 --> 00:11:01,150
components will have a server rendering

00:10:59,590 --> 00:11:02,920
step just that that little JavaScript

00:11:01,150 --> 00:11:04,990
file we we saw that run on our server

00:11:02,920 --> 00:11:06,010
will have a similar file that runs on

00:11:04,990 --> 00:11:06,280
the client which we'll look at in a

00:11:06,010 --> 00:11:08,320
minute

00:11:06,280 --> 00:11:10,540
and we need some form of bundler like a

00:11:08,320 --> 00:11:12,820
web pack or a browserify type thing that

00:11:10,540 --> 00:11:16,690
can take all our JavaScript and create a

00:11:12,820 --> 00:11:18,790
browsers version of it as well but the

00:11:16,690 --> 00:11:19,570
real key detail here is the agnostic

00:11:18,790 --> 00:11:20,980
components your

00:11:19,570 --> 00:11:22,960
Component shouldn't know whether they're

00:11:20,980 --> 00:11:24,880
on the server or the client you of

00:11:22,960 --> 00:11:26,950
course can check in either the typical

00:11:24,880 --> 00:11:28,210
check is to check if a type of window is

00:11:26,950 --> 00:11:30,100
undefined to know if you're on the

00:11:28,210 --> 00:11:31,840
server or the client but you should try

00:11:30,100 --> 00:11:33,940
to do that as little as possible and try

00:11:31,840 --> 00:11:36,640
and keep all your components plain and

00:11:33,940 --> 00:11:38,650
without knowledge and we are going to

00:11:36,640 --> 00:11:40,300
use webpack some people love it some

00:11:38,650 --> 00:11:42,130
people hate it but in this the example I

00:11:40,300 --> 00:11:44,620
have will use webpack to bundle but I'm

00:11:42,130 --> 00:11:47,470
not going to go into too much detail on

00:11:44,620 --> 00:11:48,880
that but the example in the github repo

00:11:47,470 --> 00:11:51,850
has all this stuff set up so you can

00:11:48,880 --> 00:11:53,830
have a look through it so if we look at

00:11:51,850 --> 00:11:54,760
rendering on the client the first thing

00:11:53,830 --> 00:11:56,380
you need to do is update the actual

00:11:54,760 --> 00:11:56,860
template that we're using from the

00:11:56,380 --> 00:11:59,140
server

00:11:56,860 --> 00:12:01,180
so my server-side template looks someone

00:11:59,140 --> 00:12:02,440
like this so the mark-up here that's

00:12:01,180 --> 00:12:04,210
going to be the thing that's generated

00:12:02,440 --> 00:12:05,620
by react on the server and this tank

00:12:04,210 --> 00:12:07,690
will be swapped out by the HTML we

00:12:05,620 --> 00:12:08,980
generated bill J's will be the

00:12:07,690 --> 00:12:12,640
client-side bundle that's pulled in

00:12:08,980 --> 00:12:15,010
through web pack to create my client J's

00:12:12,640 --> 00:12:17,050
file all you have to do is write this as

00:12:15,010 --> 00:12:18,520
if there was no server-side rendering

00:12:17,050 --> 00:12:20,700
ever so you just write this as if you're

00:12:18,520 --> 00:12:23,740
only building JavaScript on the browser

00:12:20,700 --> 00:12:25,620
so again I import what I need I'm port

00:12:23,740 --> 00:12:28,510
my app and I call read on dot render

00:12:25,620 --> 00:12:30,760
react Dom its render method is really

00:12:28,510 --> 00:12:32,800
really clever if it calls render and the

00:12:30,760 --> 00:12:34,870
stuff inside this div looks like the

00:12:32,800 --> 00:12:37,060
same react app it knows that and it will

00:12:34,870 --> 00:12:38,740
not completely re re render your entire

00:12:37,060 --> 00:12:39,820
application so we're not getting the

00:12:38,740 --> 00:12:41,560
thing where you render from the server

00:12:39,820 --> 00:12:43,390
the JavaScript loads and we then get a

00:12:41,560 --> 00:12:45,100
big flash of white as the react app

00:12:43,390 --> 00:12:46,750
re-renders itself is clever enough to

00:12:45,100 --> 00:12:49,810
pick up and know where it where it is so

00:12:46,750 --> 00:12:51,100
it doesn't have to do that and the

00:12:49,810 --> 00:12:52,300
important thing here as I said I'm going

00:12:51,100 --> 00:12:53,680
to keep harping on about it we have the

00:12:52,300 --> 00:12:55,660
same components on the client and server

00:12:53,680 --> 00:12:59,530
this my app component is the same one on

00:12:55,660 --> 00:13:00,790
on both sides very briefly look at how

00:12:59,530 --> 00:13:02,290
we can configure the clients I build

00:13:00,790 --> 00:13:05,230
you'll notice I'm using quite a lot of

00:13:02,290 --> 00:13:07,210
es2015 features and so on and also the

00:13:05,230 --> 00:13:09,370
JSX kind of HTML in your JavaScript

00:13:07,210 --> 00:13:10,840
syntax that rillette provides so we

00:13:09,370 --> 00:13:12,700
store a bunch of things web pack and

00:13:10,840 --> 00:13:13,840
Babel and Babel something else and Babel

00:13:12,700 --> 00:13:15,610
something else and Babel something else

00:13:13,840 --> 00:13:18,760
and you keep guessing what you need to

00:13:15,610 --> 00:13:20,380
install and you kind of write random

00:13:18,760 --> 00:13:21,730
config files that might work and they

00:13:20,380 --> 00:13:23,380
might not work and they'll be out of

00:13:21,730 --> 00:13:25,750
date next week and who knows but

00:13:23,380 --> 00:13:27,010
eventually then you write some more but

00:13:25,750 --> 00:13:29,050
eventually once you get through all this

00:13:27,010 --> 00:13:30,520
stuff you're able to run web pack or

00:13:29,050 --> 00:13:33,010
whatever you've chosen and get this this

00:13:30,520 --> 00:13:33,470
build out it's worthless well I'm not

00:13:33,010 --> 00:13:35,090
going to talk

00:13:33,470 --> 00:13:37,370
upon how in production I would like

00:13:35,090 --> 00:13:39,590
minify this and all the rest of it but

00:13:37,370 --> 00:13:41,120
this builders you'll notice 690

00:13:39,590 --> 00:13:42,440
kilobytes that this is for a HelloWorld

00:13:41,120 --> 00:13:45,350
react application

00:13:42,440 --> 00:13:46,760
this is incredibly unoptimized this this

00:13:45,350 --> 00:13:48,860
would be way smaller if I actually

00:13:46,760 --> 00:13:53,180
bothered to do a proper demo and wasn't

00:13:48,860 --> 00:13:54,950
such a shoddy speaker so so we've got

00:13:53,180 --> 00:13:56,300
this far but so far the components we

00:13:54,950 --> 00:13:57,380
built have just been like HelloWorld and

00:13:56,300 --> 00:13:58,970
there's not much to it and if you're

00:13:57,380 --> 00:14:00,440
building in an application for real

00:13:58,970 --> 00:14:02,150
you'd probably gone a bit over the top

00:14:00,440 --> 00:14:05,030
doing all this just to render HelloWorld

00:14:02,150 --> 00:14:08,420
onto the screen so if we imagine a more

00:14:05,030 --> 00:14:09,590
interactive component this component it

00:14:08,420 --> 00:14:11,420
might be a little bit small but

00:14:09,590 --> 00:14:12,830
basically it's it's a button that you

00:14:11,420 --> 00:14:14,770
can click a button and it increments a

00:14:12,830 --> 00:14:17,720
number by one and shows it on the page

00:14:14,770 --> 00:14:19,490
and it looks somewhat like that so I can

00:14:17,720 --> 00:14:21,770
click and we get the count if I then

00:14:19,490 --> 00:14:23,870
disable JavaScript I can refresh and

00:14:21,770 --> 00:14:25,310
although I still get some things

00:14:23,870 --> 00:14:27,260
although I can't click off see because

00:14:25,310 --> 00:14:29,810
we have no JavaScript we can still get

00:14:27,260 --> 00:14:31,550
something onto the page now I'm expert

00:14:29,810 --> 00:14:33,260
contrived examples and this is an

00:14:31,550 --> 00:14:34,580
incredibly contrived example but I'm

00:14:33,260 --> 00:14:36,350
trying to illustrate here is that a

00:14:34,580 --> 00:14:38,840
read-only experience is way better than

00:14:36,350 --> 00:14:39,860
no experience for users this is I don't

00:14:38,840 --> 00:14:42,920
think many of us are building that

00:14:39,860 --> 00:14:44,390
application in production this is kind

00:14:42,920 --> 00:14:46,430
of analogous if you think of an app that

00:14:44,390 --> 00:14:47,990
that pulls from an API and put some data

00:14:46,430 --> 00:14:49,580
on the screen then lets you click a

00:14:47,990 --> 00:14:51,620
button say delete one of those entries

00:14:49,580 --> 00:14:53,150
or whatever it might be you might not be

00:14:51,620 --> 00:14:55,280
able to replicate all of that without

00:14:53,150 --> 00:14:57,590
JavaScript enabled you might be able to

00:14:55,280 --> 00:14:59,900
with a bit more work but even if you can

00:14:57,590 --> 00:15:01,190
just get your your list of data rendered

00:14:59,900 --> 00:15:02,720
without JavaScript that's way better

00:15:01,190 --> 00:15:05,540
than getting a blank screen or or an

00:15:02,720 --> 00:15:07,540
error instead so whilst you know ideally

00:15:05,540 --> 00:15:09,500
we are striving for a hundred percent

00:15:07,540 --> 00:15:11,330
functionality without JavaScript in

00:15:09,500 --> 00:15:12,710
reality sometimes we can't quite get

00:15:11,330 --> 00:15:14,570
there and that's absolutely fine you

00:15:12,710 --> 00:15:17,920
know even the read-only view is going to

00:15:14,570 --> 00:15:19,880
be way better than absolutely nothing

00:15:17,920 --> 00:15:22,460
now if we're going to start building a

00:15:19,880 --> 00:15:23,960
proper application like say go Carles

00:15:22,460 --> 00:15:26,210
the one thing we do need to look at is

00:15:23,960 --> 00:15:27,530
routing or if you're building just

00:15:26,210 --> 00:15:30,020
client-side applications you can get

00:15:27,530 --> 00:15:31,250
away with not bothering with URLs or

00:15:30,020 --> 00:15:33,290
they definitely shouldn't I think we've

00:15:31,250 --> 00:15:34,760
all like taken a URL from a JavaScript

00:15:33,290 --> 00:15:36,290
app and sent it to a friend and they've

00:15:34,760 --> 00:15:39,230
clicked that URL and got a completely

00:15:36,290 --> 00:15:42,620
different page and because the developer

00:15:39,230 --> 00:15:44,180
hasn't kept the URL in sync but

00:15:42,620 --> 00:15:46,520
obviously on the server side we have to

00:15:44,180 --> 00:15:47,300
kind of set up URLs the de-facto kind of

00:15:46,520 --> 00:15:50,690
standard solution

00:15:47,300 --> 00:15:52,130
this in react is called react Rooter it

00:15:50,690 --> 00:15:53,690
might as well be kind of built-in to

00:15:52,130 --> 00:15:55,190
react at this point it's very much

00:15:53,690 --> 00:15:58,700
because the winner if you like it's a

00:15:55,190 --> 00:16:00,380
very good library so the first thing I'm

00:15:58,700 --> 00:16:02,450
going to do is actually build my proper

00:16:00,380 --> 00:16:04,399
app so I'm going to have an app

00:16:02,450 --> 00:16:07,790
component and this is my kind of top

00:16:04,399 --> 00:16:09,950
level component so I'll have this minus

00:16:07,790 --> 00:16:11,839
heading and then this dot product is

00:16:09,950 --> 00:16:13,610
where the the kind of nested routes will

00:16:11,839 --> 00:16:15,500
go so this is like my layout file if you

00:16:13,610 --> 00:16:17,690
like and this is just a placeholder for

00:16:15,500 --> 00:16:20,089
whichever route we're currently on its

00:16:17,690 --> 00:16:21,890
content will be put there again the kind

00:16:20,089 --> 00:16:23,360
of nitty-gritty details of routing and

00:16:21,890 --> 00:16:26,420
react components aren't too important

00:16:23,360 --> 00:16:29,079
here then create an index page which is

00:16:26,420 --> 00:16:31,880
just returns this is the index page and

00:16:29,079 --> 00:16:33,380
then to find my roots so again I have

00:16:31,880 --> 00:16:35,600
this top route called app component and

00:16:33,380 --> 00:16:39,019
this path slash I have this index

00:16:35,600 --> 00:16:41,180
component and now on the server side

00:16:39,019 --> 00:16:43,579
what we need to do is take the current

00:16:41,180 --> 00:16:45,890
URL that's just been requested see if we

00:16:43,579 --> 00:16:49,279
have a route that matches and render the

00:16:45,890 --> 00:16:51,950
the correct components now the API here

00:16:49,279 --> 00:16:53,899
is a little bit hairy and it looks trust

00:16:51,950 --> 00:16:55,579
me it does look worse on a projector

00:16:53,899 --> 00:16:57,620
than it actually is if you actually were

00:16:55,579 --> 00:16:59,000
to write it yourself so please stick

00:16:57,620 --> 00:17:00,140
with me the other thing is that you'd

00:16:59,000 --> 00:17:02,570
only ever need to write this once and

00:17:00,140 --> 00:17:04,490
you can pretend it doesn't exist so so

00:17:02,570 --> 00:17:06,079
please bear with me so we need a couple

00:17:04,490 --> 00:17:07,730
of things from react Rooter we need this

00:17:06,079 --> 00:17:09,589
match function which is a function that

00:17:07,730 --> 00:17:11,809
can take a URL and all our routes and

00:17:09,589 --> 00:17:13,370
decide if they match up and then Rooter

00:17:11,809 --> 00:17:14,390
context is the react component that we

00:17:13,370 --> 00:17:17,089
need to render that will deal with

00:17:14,390 --> 00:17:19,189
rendering everything else so the overall

00:17:17,089 --> 00:17:21,980
code looks like that easy

00:17:19,189 --> 00:17:24,380
okay next so what do is we'll we'll

00:17:21,980 --> 00:17:26,030
break that down a little bit so the

00:17:24,380 --> 00:17:27,650
first thing I do is I call match I give

00:17:26,030 --> 00:17:29,360
it all our routes and I tell it the

00:17:27,650 --> 00:17:31,610
location which if you're using Express

00:17:29,360 --> 00:17:33,590
on the server is the request URL

00:17:31,610 --> 00:17:35,390
property that will do that

00:17:33,590 --> 00:17:37,460
asynchronously we then have a callback

00:17:35,390 --> 00:17:40,220
function which takes an error redirect

00:17:37,460 --> 00:17:41,450
location and render properties if we've

00:17:40,220 --> 00:17:43,340
got an error that means something went

00:17:41,450 --> 00:17:44,720
wrong we should probably return a 500 or

00:17:43,340 --> 00:17:47,240
something similar or return the fail

00:17:44,720 --> 00:17:48,650
whale type page if we get a redirect

00:17:47,240 --> 00:17:50,270
location that means we've actually hit a

00:17:48,650 --> 00:17:52,400
route that is a redirect because react

00:17:50,270 --> 00:17:54,050
routes or supports redirects finally if

00:17:52,400 --> 00:17:55,700
we get to if we don't have an error and

00:17:54,050 --> 00:17:57,470
we don't have a redirect then we have

00:17:55,700 --> 00:17:59,040
these render props which means we've got

00:17:57,470 --> 00:18:01,080
all the data we need to render

00:17:59,040 --> 00:18:02,640
generate our HTML render props is

00:18:01,080 --> 00:18:04,590
basically all the information the Rooter

00:18:02,640 --> 00:18:06,780
needs to generate the the HTML and

00:18:04,590 --> 00:18:08,700
render the components so firstly if

00:18:06,780 --> 00:18:10,560
there's an error I just send the error

00:18:08,700 --> 00:18:12,150
message with 500 you would probably want

00:18:10,560 --> 00:18:14,700
to do something a bit more polished for

00:18:12,150 --> 00:18:17,960
your app else if we have a redirect I'll

00:18:14,700 --> 00:18:17,960
just redirect with a 302

00:18:18,000 --> 00:18:21,030
and finally if we've got to this file we

00:18:19,530 --> 00:18:23,160
can actually render successfully so I'll

00:18:21,030 --> 00:18:24,990
render my index template again and I'll

00:18:23,160 --> 00:18:27,030
call render to string and I have to use

00:18:24,990 --> 00:18:29,160
this Rooter context component and pass

00:18:27,030 --> 00:18:30,540
in all the properties this this isn't

00:18:29,160 --> 00:18:32,070
really important this is basically just

00:18:30,540 --> 00:18:33,600
saying if we get to this stage I've got

00:18:32,070 --> 00:18:35,880
all the information I need to render and

00:18:33,600 --> 00:18:38,160
generate your HTML for you and this just

00:18:35,880 --> 00:18:39,450
does it finally if we get past and we

00:18:38,160 --> 00:18:41,850
get to this last bit not really sure

00:18:39,450 --> 00:18:43,920
what happens that's just 404 again you'd

00:18:41,850 --> 00:18:45,210
probably fail well we'd lock this too to

00:18:43,920 --> 00:18:46,290
you it so you'd be aware of it as the

00:18:45,210 --> 00:18:49,590
developer working on it

00:18:46,290 --> 00:18:52,380
and this actually completely works it's

00:18:49,590 --> 00:18:55,050
pretty dull but it does work with all

00:18:52,380 --> 00:18:56,310
without JavaScript so let's make it a

00:18:55,050 --> 00:18:59,220
bit more interesting let's add an about

00:18:56,310 --> 00:19:02,070
page so we're add an about page with

00:18:59,220 --> 00:19:03,950
some really dreadful text on it and then

00:19:02,070 --> 00:19:07,230
we add it in as a root just down here

00:19:03,950 --> 00:19:08,910
and then I'm going to use react Rooter

00:19:07,230 --> 00:19:10,920
gives us a link component which is just

00:19:08,910 --> 00:19:12,360
like a layer on top of an anchor the

00:19:10,920 --> 00:19:14,100
great thing about this is it means in a

00:19:12,360 --> 00:19:16,020
non JavaScript environment it will just

00:19:14,100 --> 00:19:17,460
be an anchor effectively and in a

00:19:16,020 --> 00:19:18,840
JavaScript environment react routes will

00:19:17,460 --> 00:19:21,540
kind of hijack the click and and

00:19:18,840 --> 00:19:23,750
progress you through JavaScript so I'll

00:19:21,540 --> 00:19:26,190
add a link to the home and about page

00:19:23,750 --> 00:19:27,900
with no client-side bundles this is all

00:19:26,190 --> 00:19:29,370
server-side this does work I can click

00:19:27,900 --> 00:19:31,350
between them I get the right content

00:19:29,370 --> 00:19:31,770
rendered and as a user I'm none the

00:19:31,350 --> 00:19:33,780
wiser

00:19:31,770 --> 00:19:35,940
oh nice white flash at the end none the

00:19:33,780 --> 00:19:38,100
wiser that that I you know something is

00:19:35,940 --> 00:19:39,390
wrong I don't have JavaScript enabled or

00:19:38,100 --> 00:19:42,000
something's gone wrong with my request

00:19:39,390 --> 00:19:44,400
or whatever it might be we can update

00:19:42,000 --> 00:19:46,620
the client-side generator as well or

00:19:44,400 --> 00:19:47,940
sorry client-side JavaScript so I just

00:19:46,620 --> 00:19:49,200
could react on that render and I just

00:19:47,940 --> 00:19:51,750
rendered this Reuter component which

00:19:49,200 --> 00:19:52,950
comes from react Reuter I can talk in

00:19:51,750 --> 00:19:54,690
much more detail about react Reuter

00:19:52,950 --> 00:19:56,700
there's lots of tutorials online so when

00:19:54,690 --> 00:19:58,800
going to too much of what's going on

00:19:56,700 --> 00:20:01,290
here then if I regenerate web pack and I

00:19:58,800 --> 00:20:03,300
visit it with JavaScript turned on we

00:20:01,290 --> 00:20:04,620
get a really nice so this it's a bit

00:20:03,300 --> 00:20:06,120
unclear to see but these clicks now

00:20:04,620 --> 00:20:08,550
aren't going to the server they're just

00:20:06,120 --> 00:20:11,130
all in my browser and note as well that

00:20:08,550 --> 00:20:12,870
rear Rooter is is great and deals with

00:20:11,130 --> 00:20:14,429
things like forward and back

00:20:12,870 --> 00:20:17,940
and it all works for us as you would

00:20:14,429 --> 00:20:19,919
expect and this would work I don't think

00:20:17,940 --> 00:20:22,980
I include it but this also works without

00:20:19,919 --> 00:20:24,360
JavaScript as well so that's very nice

00:20:22,980 --> 00:20:25,440
we're at this point now where our

00:20:24,360 --> 00:20:27,390
application works pretty seamlessly

00:20:25,440 --> 00:20:29,039
between JavaScript and non JavaScript

00:20:27,390 --> 00:20:30,690
the final step is kind of dealing with

00:20:29,039 --> 00:20:33,510
data on the server and the client

00:20:30,690 --> 00:20:34,950
a lot of react applications or Jasjit

00:20:33,510 --> 00:20:36,809
applications generally will make a

00:20:34,950 --> 00:20:38,400
request to some API get some data in

00:20:36,809 --> 00:20:40,400
probably JSON and then render that in

00:20:38,400 --> 00:20:42,360
some form and let the user manipulate it

00:20:40,400 --> 00:20:44,730
this is actually something we didn't

00:20:42,360 --> 00:20:46,260
have to tackle it go carlos because ours

00:20:44,730 --> 00:20:48,419
was more kind of a marketing page you

00:20:46,260 --> 00:20:49,799
weren't hitting so many api's and but

00:20:48,419 --> 00:20:52,470
I've delved into this a little bit more

00:20:49,799 --> 00:20:54,090
since this area if you think server-side

00:20:52,470 --> 00:20:55,830
rendering is a bit more work in progress

00:20:54,090 --> 00:20:56,909
this is particularly working progress

00:20:55,830 --> 00:20:58,440
there's kind of a number of different

00:20:56,909 --> 00:21:00,659
kind of approaches to this and thoughts

00:20:58,440 --> 00:21:03,029
going on so there's lots of unknowns

00:21:00,659 --> 00:21:05,190
here I think better solutions or improve

00:21:03,029 --> 00:21:07,710
solutions will kind of reveal themselves

00:21:05,190 --> 00:21:10,679
over time but for now this is what I've

00:21:07,710 --> 00:21:12,059
come up with see the general idea here

00:21:10,679 --> 00:21:15,480
is we want to be able to fetch data from

00:21:12,059 --> 00:21:17,039
some API on the server and the client so

00:21:15,480 --> 00:21:18,690
if I don't have JavaScript that request

00:21:17,039 --> 00:21:20,250
should happen on the server and we

00:21:18,690 --> 00:21:22,730
should get the results of it fetching

00:21:20,250 --> 00:21:25,470
that data and rendering it into my HTML

00:21:22,730 --> 00:21:27,120
however if I do have jobs gets enabled

00:21:25,470 --> 00:21:29,190
the server should still make the request

00:21:27,120 --> 00:21:30,539
but then when I when I come back into my

00:21:29,190 --> 00:21:32,130
browser and everything's rendered I

00:21:30,539 --> 00:21:33,539
don't want the browser to then remake

00:21:32,130 --> 00:21:35,070
that same request within kind of a

00:21:33,539 --> 00:21:38,309
second of the server doing it because

00:21:35,070 --> 00:21:39,149
that's just a complete waste of time so

00:21:38,309 --> 00:21:40,620
what you really want to do is avoid

00:21:39,149 --> 00:21:42,169
making the request again and that's

00:21:40,620 --> 00:21:44,100
where this gets a little bit tricky

00:21:42,169 --> 00:21:45,809
there's a number of libraries out there

00:21:44,100 --> 00:21:49,230
I've come to really enjoy one called

00:21:45,809 --> 00:21:50,700
react resolver this again is a link the

00:21:49,230 --> 00:21:52,740
the general idea here is we have a

00:21:50,700 --> 00:21:55,919
component so just look at this top bit

00:21:52,740 --> 00:21:58,679
for now and this component renders some

00:21:55,919 --> 00:22:00,840
information about someone from github so

00:21:58,679 --> 00:22:02,159
I reference this top props which is kind

00:22:00,840 --> 00:22:04,830
of properties you can give a component

00:22:02,159 --> 00:22:06,120
some extra information doc github which

00:22:04,830 --> 00:22:08,700
will be the data I've got from github

00:22:06,120 --> 00:22:10,320
and then public repos is one of the keys

00:22:08,700 --> 00:22:11,940
that github provides you it just tell

00:22:10,320 --> 00:22:14,850
you how many repositories you've got

00:22:11,940 --> 00:22:16,649
there public what I can then do is down

00:22:14,850 --> 00:22:18,029
here I can use react resolver which is

00:22:16,649 --> 00:22:20,610
where this resolve function comes from

00:22:18,029 --> 00:22:22,260
to say the github prop that I that I

00:22:20,610 --> 00:22:24,480
want defined on this component should be

00:22:22,260 --> 00:22:25,670
the result of fetching this this URL and

00:22:24,480 --> 00:22:28,010
then returning

00:22:25,670 --> 00:22:29,480
the data from it so react resolver lets

00:22:28,010 --> 00:22:35,030
us basically say this component needs

00:22:29,480 --> 00:22:36,890
this data from some API and then on the

00:22:35,030 --> 00:22:38,360
client side what we do is instead of

00:22:36,890 --> 00:22:41,390
using react Dom don't render I use

00:22:38,360 --> 00:22:43,610
resolver dot render on the server side

00:22:41,390 --> 00:22:45,890
it's a little bit more involved but I

00:22:43,610 --> 00:22:48,590
resolve and then we do some extra stuff

00:22:45,890 --> 00:22:51,800
so basically we're resolving we use

00:22:48,590 --> 00:22:53,690
react Rooter to render everything the

00:22:51,800 --> 00:22:54,230
key thing here is now I have got this

00:22:53,690 --> 00:22:56,720
data

00:22:54,230 --> 00:22:58,640
I don't just I need to spit out my HTML

00:22:56,720 --> 00:23:00,440
that I've just generated that this has

00:22:58,640 --> 00:23:02,120
generated for me or sorry this this

00:23:00,440 --> 00:23:03,920
render to string call here but I also

00:23:02,120 --> 00:23:06,020
need to pass the data from any API

00:23:03,920 --> 00:23:07,940
request down to the client because if I

00:23:06,020 --> 00:23:09,140
don't do that the client can't reuse

00:23:07,940 --> 00:23:12,590
that data and is going to have to make

00:23:09,140 --> 00:23:14,450
the request all over again and then my

00:23:12,590 --> 00:23:16,190
template I add this extra property

00:23:14,450 --> 00:23:17,750
called react resolver payload and that's

00:23:16,190 --> 00:23:23,030
going to be any data the server had to

00:23:17,750 --> 00:23:24,710
fetch from an API so we update the

00:23:23,030 --> 00:23:26,330
server-side rendering to spit out this

00:23:24,710 --> 00:23:28,700
payload we update the client-side

00:23:26,330 --> 00:23:30,170
rendering to use rail resolver all data

00:23:28,700 --> 00:23:32,120
gets resolved on the server by default

00:23:30,170 --> 00:23:33,860
it's rendered and it's then used to

00:23:32,120 --> 00:23:36,560
populate the data on the client side as

00:23:33,860 --> 00:23:38,180
well so react routes are all kind of set

00:23:36,560 --> 00:23:39,950
this a sorry rillette resolve will set

00:23:38,180 --> 00:23:42,440
this property to all the data it got

00:23:39,950 --> 00:23:44,690
then when the client runs on the in the

00:23:42,440 --> 00:23:46,580
browser it can see that this exists and

00:23:44,690 --> 00:23:48,170
it can use data from that rather than

00:23:46,580 --> 00:23:51,050
having to remake all those requests to

00:23:48,170 --> 00:23:53,660
an API and now this definitely works

00:23:51,050 --> 00:23:55,130
with and without JavaScript so see I've

00:23:53,660 --> 00:23:56,960
not made any extra requests here and

00:23:55,130 --> 00:23:59,210
I've still got over here my github repo

00:23:56,960 --> 00:24:01,070
count 201 which is that is actually

00:23:59,210 --> 00:24:02,660
coming from the API just you can have to

00:24:01,070 --> 00:24:04,220
trust me on that but with them without

00:24:02,660 --> 00:24:08,840
JavaScript we do get the the full

00:24:04,220 --> 00:24:10,190
application experience so I appreciate

00:24:08,840 --> 00:24:12,560
that was quite a lot of stuff to throw

00:24:10,190 --> 00:24:14,180
at you in quite short space of time I

00:24:12,560 --> 00:24:15,620
was quite relieved to see the previous

00:24:14,180 --> 00:24:17,750
two talks didn't have lots of code else

00:24:15,620 --> 00:24:20,060
you'd be way fed up of all this by now

00:24:17,750 --> 00:24:22,580
and that's something to get hub it's

00:24:20,060 --> 00:24:24,830
just that repository basically if you

00:24:22,580 --> 00:24:26,630
have any questions after I'm on Twitter

00:24:24,830 --> 00:24:29,240
I can also be emailed as Jack pusher

00:24:26,630 --> 00:24:31,280
comm some final closing thoughts

00:24:29,240 --> 00:24:33,020
I think universal JavaScript is here to

00:24:31,280 --> 00:24:34,730
stay I expect the techniques and

00:24:33,020 --> 00:24:37,100
libraries and approaches to change over

00:24:34,730 --> 00:24:39,200
time if I did this talk in in 12 months

00:24:37,100 --> 00:24:40,490
if Andy housing back yes again

00:24:39,200 --> 00:24:41,690
I'd probably do a very different slide

00:24:40,490 --> 00:24:43,909
deck and the code will look pretty

00:24:41,690 --> 00:24:45,980
different but I think we're kind of

00:24:43,909 --> 00:24:47,899
getting there with react on ember and

00:24:45,980 --> 00:24:49,399
angular and I think view jess might be

00:24:47,899 --> 00:24:51,080
working on it all the rest of them kind

00:24:49,399 --> 00:24:52,940
of all going in this direction I've no

00:24:51,080 --> 00:24:54,889
doubt that will kind of will improve our

00:24:52,940 --> 00:24:56,330
approaches and when one framework figure

00:24:54,889 --> 00:24:59,120
something out that will kind of come

00:24:56,330 --> 00:25:00,710
through to the the others as well and

00:24:59,120 --> 00:25:03,049
kind of the the goal here is that as

00:25:00,710 --> 00:25:04,789
developers you we should be able to get

00:25:03,049 --> 00:25:06,080
this working with very little effort and

00:25:04,789 --> 00:25:08,539
that is the direction we're going in

00:25:06,080 --> 00:25:10,549
ember fastboot will kind of do it all

00:25:08,539 --> 00:25:11,960
for you angular 2 Universal should do a

00:25:10,549 --> 00:25:13,760
lot of it for you and as you've seen

00:25:11,960 --> 00:25:16,580
react does make it pretty

00:25:13,760 --> 00:25:18,470
straightforward to long time I'd love to

00:25:16,580 --> 00:25:20,779
see frameworks go server-side by default

00:25:18,470 --> 00:25:22,789
and it kind of be the baseline that a

00:25:20,779 --> 00:25:26,269
new JavaScript framework of which I

00:25:22,789 --> 00:25:29,750
already 10 also out since I started will

00:25:26,269 --> 00:25:31,100
kind of be server side by default and

00:25:29,750 --> 00:25:33,169
just kind of work and the hopefully will

00:25:31,100 --> 00:25:35,210
will get somewhere towards that soon but

00:25:33,169 --> 00:25:36,950
you know go Carlos was a site that we

00:25:35,210 --> 00:25:38,779
used it on there are loads of site now

00:25:36,950 --> 00:25:40,880
using it as well I think packed coffee

00:25:38,779 --> 00:25:42,260
we've probably all come across they use

00:25:40,880 --> 00:25:44,059
the same approach to and they've had a

00:25:42,260 --> 00:25:45,529
lot of success from that loads of people

00:25:44,059 --> 00:25:48,230
are doing this so you know there'll be a

00:25:45,529 --> 00:25:50,360
lot of advancement in this area so final

00:25:48,230 --> 00:25:53,210
links that's my that's the blog post on

00:25:50,360 --> 00:25:54,830
24 ways there's a blog post by my former

00:25:53,210 --> 00:25:57,409
colleague Jamie on how we built the new

00:25:54,830 --> 00:25:58,880
go cars website from whenever it was the

00:25:57,409 --> 00:26:00,889
actual source code so the go Carter site

00:25:58,880 --> 00:26:02,240
is entirely freely available at least it

00:26:00,889 --> 00:26:04,429
was I think I'm pretty sure it still is

00:26:02,240 --> 00:26:08,029
and that's a link to that and then the

00:26:04,429 --> 00:26:09,289
example application on github as well it

00:26:08,029 --> 00:26:12,769
wouldn't be a talk at meetup if I didn't

00:26:09,289 --> 00:26:14,899
do a plug if you want to do more react

00:26:12,769 --> 00:26:17,179
or you'd like to learn more about it I'm

00:26:14,899 --> 00:26:20,000
doing day-long workshops in London so a

00:26:17,179 --> 00:26:21,110
day-long workshop in London so they're

00:26:20,000 --> 00:26:23,029
still tickets available it's on the 10th

00:26:21,110 --> 00:26:25,309
of June so it's not too long away it's

00:26:23,029 --> 00:26:26,809
in it's time for the river it is an

00:26:25,309 --> 00:26:29,720
elephant and castle but if you can bear

00:26:26,809 --> 00:26:31,450
that there are tickets available wasn't

00:26:29,720 --> 00:26:33,889
my choice of venue

00:26:31,450 --> 00:26:35,690
so thank very much for listening I hope

00:26:33,889 --> 00:26:37,279
that was useful I'm Jack and Scott

00:26:35,690 --> 00:26:39,320
frankly in JavaScript I am calm is my

00:26:37,279 --> 00:26:41,600
blog I will put the slide on to speaker

00:26:39,320 --> 00:26:43,010
deck so you can find me there and if

00:26:41,600 --> 00:26:45,500
there are any questions when you wake up

00:26:43,010 --> 00:26:47,389
tomorrow morning about react life or

00:26:45,500 --> 00:26:49,580
anything else or Rafa Benitez staying at

00:26:47,389 --> 00:26:50,840
Newcastle jacket pusher comment its way

00:26:49,580 --> 00:26:51,920
finally so thank you very much for

00:26:50,840 --> 00:26:53,980
listening

00:26:51,920 --> 00:26:53,980

YouTube URL: https://www.youtube.com/watch?v=D9zVXX4TywA


