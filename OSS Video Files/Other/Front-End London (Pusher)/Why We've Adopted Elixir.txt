Title: Why We've Adopted Elixir
Publication date: 2018-01-31
Playlist: Front-End London
Description: 
	Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:04,529
I'm gonna talk about why we adopted

00:00:01,709 --> 00:00:07,580
Alexia here out made by many I'm just a

00:00:04,529 --> 00:00:12,950
quick show fans who's heard of elixir

00:00:07,580 --> 00:00:15,780
has anyone using it just those two yeah

00:00:12,950 --> 00:00:16,260
okay cool so Alex there's a programming

00:00:15,780 --> 00:00:18,300
language

00:00:16,260 --> 00:00:22,529
and it's built on top of language is

00:00:18,300 --> 00:00:24,359
another programming language and Erlang

00:00:22,529 --> 00:00:28,019
was originally developed in the 1980s

00:00:24,359 --> 00:00:29,820
for telephone switches so it's designed

00:00:28,019 --> 00:00:31,980
to handle millions of parallel

00:00:29,820 --> 00:00:33,770
conversations all happening at the same

00:00:31,980 --> 00:00:37,829
time and it was also designed to have

00:00:33,770 --> 00:00:40,260
zero tolerance for downtime and its most

00:00:37,829 --> 00:00:43,200
famous these days for being the

00:00:40,260 --> 00:00:47,070
technology that powers whatsapp so it

00:00:43,200 --> 00:00:48,930
handles 1.3 billion users so yeah it's

00:00:47,070 --> 00:00:53,190
really powerful but it's always been

00:00:48,930 --> 00:00:57,180
quite a niche language until recently so

00:00:53,190 --> 00:00:59,520
in 2011 elixir came along and it grew

00:00:57,180 --> 00:01:01,170
out of the Ruby on Rails community with

00:00:59,520 --> 00:01:03,210
the idea to kind of take the benefits of

00:01:01,170 --> 00:01:05,309
our lang and make it a lot more

00:01:03,210 --> 00:01:08,909
approachable particularly for web

00:01:05,309 --> 00:01:10,939
developers elixir it's got its own web

00:01:08,909 --> 00:01:15,780
framework that is quite a lot like Rails

00:01:10,939 --> 00:01:18,900
and that's called Phoenix so we've used

00:01:15,780 --> 00:01:20,250
rails quite a lot so that's how we heard

00:01:18,900 --> 00:01:22,710
about Alexia and it sounded really

00:01:20,250 --> 00:01:25,049
interesting to us so we tried out and

00:01:22,710 --> 00:01:27,240
built some small websites and apps and

00:01:25,049 --> 00:01:30,240
things and we were really impressed by

00:01:27,240 --> 00:01:32,729
it so we took the plunge and used it for

00:01:30,240 --> 00:01:35,250
the first time on a project a couple of

00:01:32,729 --> 00:01:38,220
years ago and since then it's kind of

00:01:35,250 --> 00:01:41,340
become a go-to for building websites and

00:01:38,220 --> 00:01:44,520
api's and that kind of thing so just we

00:01:41,340 --> 00:01:46,500
have context about what we do say I made

00:01:44,520 --> 00:01:48,810
by many we we build things for clients

00:01:46,500 --> 00:01:52,229
who want to solve problems by using

00:01:48,810 --> 00:01:54,600
technology so that's you know apps and

00:01:52,229 --> 00:01:57,540
websites and hardware as well so in

00:01:54,600 --> 00:02:00,840
hackable that kind of thing and we work

00:01:57,540 --> 00:02:03,450
in cross-functional teams so developers

00:02:00,840 --> 00:02:05,909
designers product managers strategists

00:02:03,450 --> 00:02:08,369
kind of all working together mucking in

00:02:05,909 --> 00:02:11,730
to work out the best solution to the

00:02:08,369 --> 00:02:13,860
problems that our clients have when we

00:02:11,730 --> 00:02:15,540
aim to get what we've built in front of

00:02:13,860 --> 00:02:18,450
uses as fast as we can so that we can

00:02:15,540 --> 00:02:19,950
adapt it and make it better so we often

00:02:18,450 --> 00:02:22,410
start out by building something quick

00:02:19,950 --> 00:02:25,050
and dirty and then just just adapting it

00:02:22,410 --> 00:02:27,240
over time and so that's why we've used

00:02:25,050 --> 00:02:30,660
Ruby on Rails a lot because it's really

00:02:27,240 --> 00:02:35,280
good at building things really quickly

00:02:30,660 --> 00:02:36,750
and just getting stuff up there but

00:02:35,280 --> 00:02:38,550
since we started using elixir we found

00:02:36,750 --> 00:02:41,220
that it's really enhanced our

00:02:38,550 --> 00:02:44,340
development process for a few different

00:02:41,220 --> 00:02:46,290
reasons and the first one is that it's

00:02:44,340 --> 00:02:48,660
it's helped bridge the gap that we have

00:02:46,290 --> 00:02:51,209
between our prototypes and what we go

00:02:48,660 --> 00:02:53,430
and put into production see are these

00:02:51,209 --> 00:02:54,750
quick and dirty things that we build are

00:02:53,430 --> 00:02:58,410
really designed just to kind of test

00:02:54,750 --> 00:03:00,150
with and after we've validated that what

00:02:58,410 --> 00:03:01,470
what we want to build is the right thing

00:03:00,150 --> 00:03:03,870
there's a point where we have to kind of

00:03:01,470 --> 00:03:06,330
transition what we've made is a

00:03:03,870 --> 00:03:09,870
prototype into production something that

00:03:06,330 --> 00:03:11,910
will work a scale and that means taking

00:03:09,870 --> 00:03:13,860
it from being viable with just a small

00:03:11,910 --> 00:03:17,280
set of users to you know potentially

00:03:13,860 --> 00:03:18,810
thousands or even more and though it's

00:03:17,280 --> 00:03:20,340
quite a tricky part of the projects

00:03:18,810 --> 00:03:22,860
doing that kind of taking something from

00:03:20,340 --> 00:03:24,390
prototype to production and we often end

00:03:22,860 --> 00:03:26,220
up kind of reworking a lot of what we

00:03:24,390 --> 00:03:28,799
have and sometimes even just starting

00:03:26,220 --> 00:03:31,970
from scratch but we found that

00:03:28,799 --> 00:03:34,620
transition to be much easier with elixir

00:03:31,970 --> 00:03:37,380
the language was designed to write for

00:03:34,620 --> 00:03:38,940
writing scalable applications so often

00:03:37,380 --> 00:03:41,820
throwaway work doesn't actually have to

00:03:38,940 --> 00:03:45,269
be thrown away and that lets us move a

00:03:41,820 --> 00:03:46,380
lot faster with product development the

00:03:45,269 --> 00:03:48,600
second thing that's given us is the

00:03:46,380 --> 00:03:51,239
ability to kind of stay really focused

00:03:48,600 --> 00:03:52,769
on creating great products it's quite

00:03:51,239 --> 00:03:55,110
easy as a developer to sort of lose

00:03:52,769 --> 00:03:56,820
focus and lose sight of the vision of

00:03:55,110 --> 00:03:58,320
the products especially when you're

00:03:56,820 --> 00:04:01,320
getting bogged down in like the detail

00:03:58,320 --> 00:04:05,040
of error handling or configuring caching

00:04:01,320 --> 00:04:07,049
or optimizing your code yeah these

00:04:05,040 --> 00:04:09,750
things have been kind of less of a

00:04:07,049 --> 00:04:11,070
concern for us with the lake year and

00:04:09,750 --> 00:04:13,880
that's just giving us more time to focus

00:04:11,070 --> 00:04:16,590
on the product itself what a building

00:04:13,880 --> 00:04:19,200
and the third thing has given us is the

00:04:16,590 --> 00:04:21,989
ability to to solve problems that we can

00:04:19,200 --> 00:04:24,599
really solve before so features like

00:04:21,989 --> 00:04:26,550
it's in chat or collaborative editing

00:04:24,599 --> 00:04:27,720
they're really commonplace things now

00:04:26,550 --> 00:04:29,580
our users are released

00:04:27,720 --> 00:04:31,380
those sorts of things clients are

00:04:29,580 --> 00:04:33,540
getting used to asking for those sorts

00:04:31,380 --> 00:04:35,280
of things as well so with the liquor in

00:04:33,540 --> 00:04:37,800
our tool box we now feel quite

00:04:35,280 --> 00:04:42,030
comfortable confident and comfortable in

00:04:37,800 --> 00:04:44,370
building those sorts of features so

00:04:42,030 --> 00:04:50,130
those are the core three core strengths

00:04:44,370 --> 00:04:52,380
that elixir has given us and it's it's a

00:04:50,130 --> 00:04:54,330
few there are a few features core

00:04:52,380 --> 00:04:56,850
features - elixir that have allowed us

00:04:54,330 --> 00:04:59,160
to to benefit from those things and the

00:04:56,850 --> 00:05:02,970
first one is its concurrency model and

00:04:59,160 --> 00:05:04,980
the ability to do parallel processing so

00:05:02,970 --> 00:05:10,530
I'm just going to define those terms to

00:05:04,980 --> 00:05:12,060
start off with with a tasty analogy so I

00:05:10,530 --> 00:05:15,180
saw this from a blog post that I read

00:05:12,060 --> 00:05:16,590
while I was writing this talk that's the

00:05:15,180 --> 00:05:18,330
link so if you want to take a photo or

00:05:16,590 --> 00:05:22,680
anything I would definitely recommend

00:05:18,330 --> 00:05:25,320
reading it so this example you fulfilled

00:05:22,680 --> 00:05:29,130
your lifelong dream of opening your own

00:05:25,320 --> 00:05:30,480
burrito shop and on your first day your

00:05:29,130 --> 00:05:33,240
customers come in they place their

00:05:30,480 --> 00:05:36,990
orders you make their burritos you take

00:05:33,240 --> 00:05:39,450
their payment and everyone's happy but

00:05:36,990 --> 00:05:43,200
people start noticing this new burrito

00:05:39,450 --> 00:05:44,640
shop so queue starts forming lunchtime

00:05:43,200 --> 00:05:45,840
you're making someone's burrito you're

00:05:44,640 --> 00:05:48,000
kind of halfway through and you realize

00:05:45,840 --> 00:05:51,360
you've run out of peppers so you call

00:05:48,000 --> 00:05:52,590
into the kitchen for more peppers and

00:05:51,360 --> 00:05:54,210
because you're quite new to the burrito

00:05:52,590 --> 00:05:56,070
business you just sort of stand there

00:05:54,210 --> 00:05:57,960
for however long it takes to make

00:05:56,070 --> 00:06:00,000
peppers like three three minutes or so

00:05:57,960 --> 00:06:03,510
and as you're just standing there the

00:06:00,000 --> 00:06:05,310
queue is still building and everyone

00:06:03,510 --> 00:06:08,190
just gets really angry that you're not

00:06:05,310 --> 00:06:11,640
doing any work and they just leave your

00:06:08,190 --> 00:06:14,910
shop so it's not the best start to your

00:06:11,640 --> 00:06:16,669
new burrito business so next thing you

00:06:14,910 --> 00:06:18,930
come in with a plan

00:06:16,669 --> 00:06:21,270
at lunchtime the same thing happens

00:06:18,930 --> 00:06:22,770
you're making a burrito and again the

00:06:21,270 --> 00:06:25,050
peppers run out but instead of waiting

00:06:22,770 --> 00:06:26,640
this time you take the half made burrito

00:06:25,050 --> 00:06:29,700
and put it to one side and you take the

00:06:26,640 --> 00:06:32,160
next order and you start making that and

00:06:29,700 --> 00:06:33,479
then the next one and the next one and

00:06:32,160 --> 00:06:35,070
people you don't want peppers just get

00:06:33,479 --> 00:06:37,349
there burrito straightaway they'd have

00:06:35,070 --> 00:06:39,060
to wait and then when the peppers do

00:06:37,349 --> 00:06:39,770
arrive you finish off the waiting ones

00:06:39,060 --> 00:06:45,590
and then

00:06:39,770 --> 00:06:46,970
everyone gets that burrito so yeah

00:06:45,590 --> 00:06:48,800
you've got concurrency there and

00:06:46,970 --> 00:06:51,879
concurrency is about the ability to

00:06:48,800 --> 00:06:54,379
handle multiple tasks at the same time

00:06:51,879 --> 00:06:55,789
so your reputation for making burritos

00:06:54,379 --> 00:06:58,849
is getting better you're getting more

00:06:55,789 --> 00:07:00,979
popular and the keys are still building

00:06:58,849 --> 00:07:03,650
again and people are getting a bit

00:07:00,979 --> 00:07:06,169
annoyed about that so you hire some more

00:07:03,650 --> 00:07:08,780
staff to work with you and now you've

00:07:06,169 --> 00:07:09,860
got multiple pairs of hands working on

00:07:08,780 --> 00:07:13,720
burritos you're smashing through the

00:07:09,860 --> 00:07:18,710
queue and yeah the money's rolling in

00:07:13,720 --> 00:07:21,110
getting rich and famous and it's because

00:07:18,710 --> 00:07:24,440
you've got multiple people working on

00:07:21,110 --> 00:07:27,080
burritos at the same time and that's

00:07:24,440 --> 00:07:29,509
that's parallelism parallelism it's not

00:07:27,080 --> 00:07:31,340
just about handling multiple multiple

00:07:29,509 --> 00:07:33,830
tasks but also about executing multiple

00:07:31,340 --> 00:07:37,639
tasks at the same time and parallelism

00:07:33,830 --> 00:07:39,620
is really important these days most of

00:07:37,639 --> 00:07:41,300
the increase in computing power that we

00:07:39,620 --> 00:07:44,120
see is is coming from having multiple

00:07:41,300 --> 00:07:46,849
CPU cores rather than rather than the

00:07:44,120 --> 00:07:48,229
actual speed of a single core but it's

00:07:46,849 --> 00:07:50,449
not possible to take advantage of

00:07:48,229 --> 00:07:56,080
multi-core processors unless you can

00:07:50,449 --> 00:07:59,259
execute in parallel so websites

00:07:56,080 --> 00:08:01,699
obviously quite a lot like burrito shops

00:07:59,259 --> 00:08:05,180
people people make requests for your web

00:08:01,699 --> 00:08:08,360
pages so you make the web pages and then

00:08:05,180 --> 00:08:11,389
we serve them out and similarly people

00:08:08,360 --> 00:08:13,279
they want to have to wait too long for

00:08:11,389 --> 00:08:15,770
your web page because they'll just leave

00:08:13,279 --> 00:08:18,979
if it's taken too long so concurrency is

00:08:15,770 --> 00:08:20,990
pretty important for the web and there's

00:08:18,979 --> 00:08:23,539
a few common ways to do concurrency that

00:08:20,990 --> 00:08:25,909
were quite accustomed to these days so

00:08:23,539 --> 00:08:28,240
the first one is a bit of a mouthful

00:08:25,909 --> 00:08:31,370
non-blocking single threaded event loop

00:08:28,240 --> 00:08:33,560
and if any of you have used to no js'

00:08:31,370 --> 00:08:35,329
you might recognize this this is kind of

00:08:33,560 --> 00:08:39,500
how they sell themselves and this is

00:08:35,329 --> 00:08:41,779
like the core technology for nodejs i've

00:08:39,500 --> 00:08:45,740
got a little diagram so you can work yet

00:08:41,779 --> 00:08:48,020
so this is roughly how it works so

00:08:45,740 --> 00:08:51,949
events come in they're added to this

00:08:48,020 --> 00:08:53,180
queue here and when they get to the

00:08:51,949 --> 00:08:53,480
front of the queue they get a bit of

00:08:53,180 --> 00:08:56,750
time

00:08:53,480 --> 00:08:59,480
the CPU it's a kind of process and if

00:08:56,750 --> 00:09:00,949
they make any calls to the database so

00:08:59,480 --> 00:09:03,110
let's say this is you're serving a

00:09:00,949 --> 00:09:06,529
website that needs to load something

00:09:03,110 --> 00:09:09,440
from a database they yield from the CPU

00:09:06,529 --> 00:09:11,870
so they stop they stop using it and

00:09:09,440 --> 00:09:15,170
something else can then use it so it's

00:09:11,870 --> 00:09:16,339
non-blocking then when your database

00:09:15,170 --> 00:09:19,070
comes back with the data

00:09:16,339 --> 00:09:21,230
another event gets added and once that's

00:09:19,070 --> 00:09:22,490
reached the front of the queue the

00:09:21,230 --> 00:09:26,300
response for your website can be

00:09:22,490 --> 00:09:27,680
formulated in it sent yeah so this is

00:09:26,300 --> 00:09:30,440
this works pretty well

00:09:27,680 --> 00:09:34,970
in a lot of cases but there's a few

00:09:30,440 --> 00:09:37,579
downsides to it so let's say you've got

00:09:34,970 --> 00:09:40,910
a really long running task that comes in

00:09:37,579 --> 00:09:43,970
so you're it's a request to transform a

00:09:40,910 --> 00:09:47,480
large data set maybe or you need to read

00:09:43,970 --> 00:09:50,470
a large file from disk because it's

00:09:47,480 --> 00:09:54,139
taking so long but CPU now is blocks and

00:09:50,470 --> 00:09:55,699
requests are still coming in and yeah

00:09:54,139 --> 00:09:59,060
you've got a queue for your website

00:09:55,699 --> 00:10:01,459
basically so that's the first downside

00:09:59,060 --> 00:10:04,459
of the event loop the other downside is

00:10:01,459 --> 00:10:06,050
that on its own it's it doesn't have

00:10:04,459 --> 00:10:08,660
parallelism because it's single threaded

00:10:06,050 --> 00:10:14,449
so you can't take advantage of the

00:10:08,660 --> 00:10:15,800
speeds that multiple CPUs brings you but

00:10:14,449 --> 00:10:17,839
there's there's a way around that and

00:10:15,800 --> 00:10:21,350
that's to combine it with a second

00:10:17,839 --> 00:10:23,480
concurrency model which is also fairly

00:10:21,350 --> 00:10:25,490
commonly used and that's to have

00:10:23,480 --> 00:10:28,130
multiple operating system processes

00:10:25,490 --> 00:10:29,990
running and that's that's essentially

00:10:28,130 --> 00:10:33,399
just multiple instances of your

00:10:29,990 --> 00:10:33,399
application running at the same time

00:10:33,670 --> 00:10:39,760
yeah so that that would kind of look

00:10:37,519 --> 00:10:43,760
like this it's just the same thing but

00:10:39,760 --> 00:10:45,380
replicated twice and so this is this is

00:10:43,760 --> 00:10:47,300
all running in one computer and this

00:10:45,380 --> 00:10:51,050
computer has got CPU that's got two

00:10:47,300 --> 00:10:54,230
cores and if this was configured

00:10:51,050 --> 00:10:56,690
correctly then you'd have work being

00:10:54,230 --> 00:11:00,889
done in parallel there's two tasks that

00:10:56,690 --> 00:11:03,620
are being processed by the CPU but often

00:11:00,889 --> 00:11:05,390
this requires some extra work some extra

00:11:03,620 --> 00:11:06,720
software like Redis for example to

00:11:05,390 --> 00:11:08,520
manage the key

00:11:06,720 --> 00:11:11,250
that's passing things to the different

00:11:08,520 --> 00:11:14,940
processes and in terms of a concurrency

00:11:11,250 --> 00:11:16,410
model is it's fairly crude it's thinking

00:11:14,940 --> 00:11:18,330
about to the burrito analogy it's kind

00:11:16,410 --> 00:11:20,190
of like opening to burrito places next

00:11:18,330 --> 00:11:24,210
to each other and then just sticking the

00:11:20,190 --> 00:11:27,720
queue outside the front yeah so quite

00:11:24,210 --> 00:11:29,550
crude and then the third way the

00:11:27,720 --> 00:11:34,140
concurrency is is done it's probably the

00:11:29,550 --> 00:11:36,150
most common this is this is how Java and

00:11:34,140 --> 00:11:38,420
C and other C based languages like Ruby

00:11:36,150 --> 00:11:40,710
and Python this is how they do

00:11:38,420 --> 00:11:44,300
concurrency within the programming

00:11:40,710 --> 00:11:46,290
language it looks a bit more like that

00:11:44,300 --> 00:11:49,650
so threads are a lot more lightweight

00:11:46,290 --> 00:11:52,560
than processes and this is this is kind

00:11:49,650 --> 00:11:54,750
of like having the two members of staff

00:11:52,560 --> 00:12:00,240
in the shop working on things at the

00:11:54,750 --> 00:12:02,580
same time so they share resources to

00:12:00,240 --> 00:12:04,440
reduce overhead so again in the burrito

00:12:02,580 --> 00:12:06,810
shop you might have just one spoon for

00:12:04,440 --> 00:12:08,970
the rice that both members of staff are

00:12:06,810 --> 00:12:13,170
using or just one stack of tortillas

00:12:08,970 --> 00:12:17,010
that they're both going for but the

00:12:13,170 --> 00:12:19,770
sharing of resource can mean that it's

00:12:17,010 --> 00:12:22,950
notoriously hard to program

00:12:19,770 --> 00:12:25,770
multi-threaded programs it's easy to

00:12:22,950 --> 00:12:27,060
mutate data or create race conditions so

00:12:25,770 --> 00:12:29,370
team members of staff come and grab

00:12:27,060 --> 00:12:32,070
tools here at the same time and they

00:12:29,370 --> 00:12:35,700
break their fingers and yeah it's not

00:12:32,070 --> 00:12:38,930
good and code can often be hard to

00:12:35,700 --> 00:12:41,190
reason about with threaded programming

00:12:38,930 --> 00:12:43,740
another downside is there a lot of

00:12:41,190 --> 00:12:45,720
standard interpreters so like the Ruby

00:12:43,740 --> 00:12:48,330
and Python interpreters don't actually

00:12:45,720 --> 00:12:49,800
allow you to run multiple threads at the

00:12:48,330 --> 00:12:51,390
same time so you can do threaded

00:12:49,800 --> 00:12:54,270
programming but you'll never have

00:12:51,390 --> 00:12:56,730
parallel processing so I've got a thing

00:12:54,270 --> 00:12:58,380
called a global lock so yeah you can

00:12:56,730 --> 00:13:03,830
only have one thing going on at the same

00:12:58,380 --> 00:13:06,000
time no parallelism

00:13:03,830 --> 00:13:10,260
Alexis got kind of a different

00:13:06,000 --> 00:13:12,030
concurrency model so when I said Lex is

00:13:10,260 --> 00:13:15,540
built on a line that really means that

00:13:12,030 --> 00:13:17,940
elixir as a language gets compiled down

00:13:15,540 --> 00:13:21,030
to run on the Erlang virtual machine

00:13:17,940 --> 00:13:22,350
kind of like how Java works or how Java

00:13:21,030 --> 00:13:26,550
scripts in the browser is run in a

00:13:22,350 --> 00:13:29,370
virtual machine and inside the the

00:13:26,550 --> 00:13:33,650
virtual machine there's the single

00:13:29,370 --> 00:13:36,990
organizing principle which is a process

00:13:33,650 --> 00:13:38,460
it's a bit confusing but the process in

00:13:36,990 --> 00:13:40,620
Erlang is very different from like an

00:13:38,460 --> 00:13:44,640
operating system process it's a lot more

00:13:40,620 --> 00:13:46,170
lightweight it's very small and you

00:13:44,640 --> 00:13:47,910
could potentially have hundreds of

00:13:46,170 --> 00:13:49,910
thousands or even millions of processes

00:13:47,910 --> 00:13:51,870
being handled by your application

00:13:49,910 --> 00:13:54,810
they're also more lightweight than

00:13:51,870 --> 00:13:58,290
threads and they don't share anything

00:13:54,810 --> 00:13:59,760
like threads D so that makes them much

00:13:58,290 --> 00:14:02,280
safer to work with there's no kind of

00:13:59,760 --> 00:14:06,390
grubbing data at the same time and get

00:14:02,280 --> 00:14:09,510
and having clashes so instead they send

00:14:06,390 --> 00:14:10,950
messages to each other and when they

00:14:09,510 --> 00:14:13,350
send a message with some data in the

00:14:10,950 --> 00:14:17,339
data gets copied in memory so there's no

00:14:13,350 --> 00:14:21,720
there's no chance of dead locking so in

00:14:17,339 --> 00:14:24,839
practice it looks like this pretty much

00:14:21,720 --> 00:14:28,920
exactly the same as the event loop than

00:14:24,839 --> 00:14:31,530
no js' uses your requests come in they

00:14:28,920 --> 00:14:33,180
get some time with the CPU and then if

00:14:31,530 --> 00:14:34,950
there's a blocking request they need to

00:14:33,180 --> 00:14:38,160
make to the database they yield and go

00:14:34,950 --> 00:14:40,500
back into the queue so very similar

00:14:38,160 --> 00:14:43,370
concept to that but there's two key

00:14:40,500 --> 00:14:45,960
differences the first one is that

00:14:43,370 --> 00:14:49,770
processes only get a set amount of time

00:14:45,960 --> 00:14:51,450
with the CPU before they get kicked to

00:14:49,770 --> 00:14:55,740
the back of the queue so if we have this

00:14:51,450 --> 00:14:57,690
long-running process after a certain

00:14:55,740 --> 00:15:01,130
amount of time the timer will go off and

00:14:57,690 --> 00:15:03,660
it just gets kick to the back

00:15:01,130 --> 00:15:05,610
this means that long-running CPU

00:15:03,660 --> 00:15:07,140
intensive processes don't degrade the

00:15:05,610 --> 00:15:10,110
system for other people so if someone's

00:15:07,140 --> 00:15:13,410
downloading a large file no one else

00:15:10,110 --> 00:15:15,510
will notice because they have to

00:15:13,410 --> 00:15:17,310
download it in chunks and that kind of

00:15:15,510 --> 00:15:19,290
demonstrates what elixir in our line

00:15:17,310 --> 00:15:21,720
good for and that's heavy computations

00:15:19,290 --> 00:15:26,190
so lots of data processing or image

00:15:21,720 --> 00:15:29,240
transformations the kind of thing the

00:15:26,190 --> 00:15:32,760
other difference between this model and

00:15:29,240 --> 00:15:36,150
the event loop is that parallelism is

00:15:32,760 --> 00:15:40,410
possible so you can you can process

00:15:36,150 --> 00:15:41,940
things with as many CPUs as you have and

00:15:40,410 --> 00:15:45,750
that's only really possible because

00:15:41,940 --> 00:15:48,240
processes don't share data at all they

00:15:45,750 --> 00:15:49,800
just send each other bits of data and

00:15:48,240 --> 00:15:53,070
that means you can safely run things at

00:15:49,800 --> 00:15:55,350
the same time so what does this mean for

00:15:53,070 --> 00:16:01,950
us going back to like how we've

00:15:55,350 --> 00:16:05,339
benefited from alexia so what we build

00:16:01,950 --> 00:16:07,290
in our prototypes is already scalable to

00:16:05,339 --> 00:16:10,230
many users because when you're building

00:16:07,290 --> 00:16:12,570
things in elixir you're already building

00:16:10,230 --> 00:16:15,540
within this concurrency model that just

00:16:12,570 --> 00:16:19,050
scales up so that means we spend a lot

00:16:15,540 --> 00:16:22,230
less time refactoring and rebuilding or

00:16:19,050 --> 00:16:25,850
configuring caching rules or making it

00:16:22,230 --> 00:16:28,620
perform a scale in various fancy ways

00:16:25,850 --> 00:16:30,270
and that means that we can just focus on

00:16:28,620 --> 00:16:32,160
making the best products we can we can

00:16:30,270 --> 00:16:35,820
think about the core features and the

00:16:32,160 --> 00:16:37,770
user needs it also means that we can be

00:16:35,820 --> 00:16:39,390
more confident about approaching

00:16:37,770 --> 00:16:43,589
concurrency problems that seemed a lot

00:16:39,390 --> 00:16:49,589
harder before so building chat or other

00:16:43,589 --> 00:16:51,030
things that that need concurrency so the

00:16:49,589 --> 00:16:54,060
next factor that complements our

00:16:51,030 --> 00:16:55,940
development process is Alexis

00:16:54,060 --> 00:16:59,339
fault-tolerance

00:16:55,940 --> 00:17:02,339
so there's this mantra in Alex in Erlang

00:16:59,339 --> 00:17:04,170
which is let let it crash and when I

00:17:02,339 --> 00:17:06,300
have first heard this I thought they're

00:17:04,170 --> 00:17:09,689
just completely contradicted the whole

00:17:06,300 --> 00:17:11,670
zero tolerance for downtime thing how

00:17:09,689 --> 00:17:14,339
could you just let it crash but actually

00:17:11,670 --> 00:17:18,060
it makes a lot of sense and this is from

00:17:14,339 --> 00:17:19,319
the elixir website says the unavoidable

00:17:18,060 --> 00:17:20,850
truth about software running in

00:17:19,319 --> 00:17:23,400
production is that things will go wrong

00:17:20,850 --> 00:17:25,110
even more when we take network file

00:17:23,400 --> 00:17:26,839
systems and other third-party resources

00:17:25,110 --> 00:17:29,520
into account

00:17:26,839 --> 00:17:31,140
so letting processes crash when

00:17:29,520 --> 00:17:34,560
something goes wrong is actually elixir

00:17:31,140 --> 00:17:37,350
way of preventing outages and I'll give

00:17:34,560 --> 00:17:39,840
you a really contrived example of how

00:17:37,350 --> 00:17:41,400
that works and what it means so let's

00:17:39,840 --> 00:17:43,530
say we've made a website and it lets you

00:17:41,400 --> 00:17:45,060
choose your favorite animal and then you

00:17:43,530 --> 00:17:50,910
press a button and then it will tell you

00:17:45,060 --> 00:17:53,070
what your personality type is yeah so

00:17:50,910 --> 00:17:55,370
the first version we make just a quick

00:17:53,070 --> 00:18:00,870
and easy one there's only three options

00:17:55,370 --> 00:18:03,260
doc dog cat or duck and what's powering

00:18:00,870 --> 00:18:06,600
that is this is basically this function

00:18:03,260 --> 00:18:11,430
which converts the animal into

00:18:06,600 --> 00:18:12,840
personality type so this this is an

00:18:11,430 --> 00:18:14,400
example of a language feature that lets

00:18:12,840 --> 00:18:16,560
you define different logic for a

00:18:14,400 --> 00:18:20,610
function based on what was passed into

00:18:16,560 --> 00:18:23,040
it so convert does this if dog was

00:18:20,610 --> 00:18:24,960
passed into it that's really powerful

00:18:23,040 --> 00:18:28,230
this is just quite a simple example of

00:18:24,960 --> 00:18:30,300
it so yeah that's that that's the

00:18:28,230 --> 00:18:35,480
function that the powers the convertor

00:18:30,300 --> 00:18:38,040
and this is the HTML pretty simple stuff

00:18:35,480 --> 00:18:39,840
so one day someone visits your site and

00:18:38,040 --> 00:18:41,580
they're really annoyed because their

00:18:39,840 --> 00:18:44,730
favorite animal is just not listed there

00:18:41,580 --> 00:18:47,670
but luckily they've got some really

00:18:44,730 --> 00:18:50,190
advanced hacking skills so they go into

00:18:47,670 --> 00:18:55,200
the browser and add their favorite

00:18:50,190 --> 00:18:57,000
animal so yeah this is this is

00:18:55,200 --> 00:19:00,660
potentially a problem because when they

00:18:57,000 --> 00:19:02,540
press the convert button the request

00:19:00,660 --> 00:19:05,430
comes through to this function and

00:19:02,540 --> 00:19:08,910
there's no definition of convert that

00:19:05,430 --> 00:19:13,620
takes tortoise as an argument so it's

00:19:08,910 --> 00:19:16,530
just not going to work and the process

00:19:13,620 --> 00:19:20,460
that's handling the requests gets killed

00:19:16,530 --> 00:19:22,620
and we get this error message it's no

00:19:20,460 --> 00:19:24,120
function close matching so there's two

00:19:22,620 --> 00:19:26,460
reasons why normally you might want to

00:19:24,120 --> 00:19:28,290
catch an error like this and the first

00:19:26,460 --> 00:19:30,210
one is that you want to show you like a

00:19:28,290 --> 00:19:31,710
really nice friendly message to the

00:19:30,210 --> 00:19:35,880
users just so they know what went wrong

00:19:31,710 --> 00:19:38,010
but that we really want to spend time

00:19:35,880 --> 00:19:39,420
like designing a nice friendly error

00:19:38,010 --> 00:19:42,120
message for someone who's trying to hack

00:19:39,420 --> 00:19:43,710
your site it just seems a bit a bit of a

00:19:42,120 --> 00:19:45,210
waste of time

00:19:43,710 --> 00:19:46,880
we shouldn't really need to spend time

00:19:45,210 --> 00:19:52,230
on kind of handling all these edge cases

00:19:46,880 --> 00:19:54,300
what if this what if that so we're in

00:19:52,230 --> 00:19:55,620
the Brito shop if someone came in to the

00:19:54,300 --> 00:19:57,000
shop and instead of ordering they just

00:19:55,620 --> 00:19:59,910
started like dissing your mom or

00:19:57,000 --> 00:20:01,470
something then you just kick them astray

00:19:59,910 --> 00:20:07,110
out you wouldn't do like a friendly

00:20:01,470 --> 00:20:09,150
error message for them you might also

00:20:07,110 --> 00:20:11,010
want to handle an error like that and to

00:20:09,150 --> 00:20:13,110
stop its spreading to other parts of the

00:20:11,010 --> 00:20:16,530
system or kind of even bringing the

00:20:13,110 --> 00:20:19,380
whole system down and this is a quote

00:20:16,530 --> 00:20:21,360
from a blog posts that no the no

00:20:19,380 --> 00:20:23,790
foundation recently shared I think it's

00:20:21,360 --> 00:20:25,950
from a few years ago so the developers

00:20:23,790 --> 00:20:27,450
need to be really careful not to allow

00:20:25,950 --> 00:20:29,610
an exception bubbling up from the call

00:20:27,450 --> 00:20:31,790
no js' event loop which will cause the

00:20:29,610 --> 00:20:36,180
the no Jess instance to terminate

00:20:31,790 --> 00:20:37,620
effectively crashing the program but

00:20:36,180 --> 00:20:40,380
with elixir you're you're protected

00:20:37,620 --> 00:20:42,030
against other processes dying when a

00:20:40,380 --> 00:20:44,130
process dies all the other processes

00:20:42,030 --> 00:20:46,080
just carry on as normal just doing what

00:20:44,130 --> 00:20:48,090
they're doing because what they're doing

00:20:46,080 --> 00:20:52,890
is totally separate from the process

00:20:48,090 --> 00:20:54,390
that just died and yeah if that wasn't

00:20:52,890 --> 00:20:55,800
the case like imagine in your burrito

00:20:54,390 --> 00:20:58,610
shop someone was this in your mom and

00:20:55,800 --> 00:21:00,780
you just had to shut the whole shop down

00:20:58,610 --> 00:21:05,160
because you were so sad and just had to

00:21:00,780 --> 00:21:07,020
go home for the day so yeah with the

00:21:05,160 --> 00:21:10,380
process has died and we've got this nice

00:21:07,020 --> 00:21:12,900
error message but what happens next like

00:21:10,380 --> 00:21:14,310
the process has died then like what

00:21:12,900 --> 00:21:19,020
happens to the request that the user was

00:21:14,310 --> 00:21:21,210
making so in our web server there's we

00:21:19,020 --> 00:21:22,860
have like a single process that's

00:21:21,210 --> 00:21:26,400
responsible for kind of listening out

00:21:22,860 --> 00:21:29,490
for incoming requests and each time a

00:21:26,400 --> 00:21:33,000
request comes in it just spawns a new a

00:21:29,490 --> 00:21:34,470
new process to handle the requests to go

00:21:33,000 --> 00:21:36,830
and like work out the logic for the

00:21:34,470 --> 00:21:40,500
particular web page that was requested

00:21:36,830 --> 00:21:42,600
and the the blue process the one that's

00:21:40,500 --> 00:21:44,940
listening out for requests it can choose

00:21:42,600 --> 00:21:46,620
to supervise the processes that it

00:21:44,940 --> 00:21:48,770
spawns I kind of keep an eye on them

00:21:46,620 --> 00:21:51,330
just make sure that they're doing okay

00:21:48,770 --> 00:21:55,150
and that essentially means that when a

00:21:51,330 --> 00:21:58,330
child process dies so yeah supervisor

00:21:55,150 --> 00:22:01,420
when a child process dies the supervisor

00:21:58,330 --> 00:22:03,100
can choose what to do it can do it can

00:22:01,420 --> 00:22:05,559
do various things but one option is to

00:22:03,100 --> 00:22:10,270
just restart the process again and just

00:22:05,559 --> 00:22:11,920
yeah try and try and do it again but

00:22:10,270 --> 00:22:14,470
actually in this case it would just be

00:22:11,920 --> 00:22:19,240
best to send a kind of standard serve

00:22:14,470 --> 00:22:21,370
area like HTTP 500 error when anything

00:22:19,240 --> 00:22:23,440
unexpected happens so we've just got

00:22:21,370 --> 00:22:25,809
this one place where the processes die

00:22:23,440 --> 00:22:29,770
and that's the that's the message they

00:22:25,809 --> 00:22:31,000
get sent and that's just a lot easier we

00:22:29,770 --> 00:22:32,380
don't have to think about what if this

00:22:31,000 --> 00:22:36,510
error happens what if that error happens

00:22:32,380 --> 00:22:39,580
the process dies and we just send a 500

00:22:36,510 --> 00:22:43,090
so that's a bit of a contrived example

00:22:39,580 --> 00:22:45,340
and quite a basic description of how it

00:22:43,090 --> 00:22:47,890
works but it's helped us in lots of

00:22:45,340 --> 00:22:49,809
different ways the prototypes that we

00:22:47,890 --> 00:22:52,679
build are inevitably going to have some

00:22:49,809 --> 00:22:54,910
problems with them maybe a few bugs but

00:22:52,679 --> 00:22:57,730
we can be more confident that their

00:22:54,910 --> 00:22:59,980
impacts will be contained as we're

00:22:57,730 --> 00:23:02,380
scaling up to production and that gives

00:22:59,980 --> 00:23:04,480
us time to kind of fix them so you know

00:23:02,380 --> 00:23:07,360
if 1% of our users have that bug then

00:23:04,480 --> 00:23:10,420
the 99% will just not even know anything

00:23:07,360 --> 00:23:12,100
happened it also means that we can spend

00:23:10,420 --> 00:23:14,860
less time programming defensively

00:23:12,100 --> 00:23:16,330
thinking about all the what-ifs and we

00:23:14,860 --> 00:23:17,890
can focus again on like the core

00:23:16,330 --> 00:23:20,650
products the core user need that we're

00:23:17,890 --> 00:23:22,030
trying to solve and also gives us the

00:23:20,650 --> 00:23:25,330
confidence to tackle those really

00:23:22,030 --> 00:23:28,480
difficult concurrency problems for

00:23:25,330 --> 00:23:30,490
building things like chat because we're

00:23:28,480 --> 00:23:32,890
not working on handing potential errors

00:23:30,490 --> 00:23:34,870
where we can focus on designing the

00:23:32,890 --> 00:23:41,710
system in a way that will work really

00:23:34,870 --> 00:23:46,660
well so the third factor those really

00:23:41,710 --> 00:23:50,710
helps us is developer happiness sounds a

00:23:46,660 --> 00:23:52,500
little bit kind of airy-fairy but it's

00:23:50,710 --> 00:23:54,760
actually been a really important thing

00:23:52,500 --> 00:23:57,150
all of the things I've thought about so

00:23:54,760 --> 00:24:00,880
far so fault-tolerance concurrency

00:23:57,150 --> 00:24:06,490
they're all features of Erlang not

00:24:00,880 --> 00:24:08,730
elixir so what sets elixir apart well

00:24:06,490 --> 00:24:11,619
firstly this is our loan

00:24:08,730 --> 00:24:13,330
and for me that's not the most familiar

00:24:11,619 --> 00:24:15,549
looking language this is just a function

00:24:13,330 --> 00:24:20,559
definition which prints hello world

00:24:15,549 --> 00:24:24,009
obviously whereas this is Alexia it's

00:24:20,559 --> 00:24:25,779
it's kind of a lot more familiar and

00:24:24,009 --> 00:24:27,279
it's got a lot of similar concepts to

00:24:25,779 --> 00:24:29,049
things like Ruby and Python and Java

00:24:27,279 --> 00:24:31,570
scripts all the things that we're used

00:24:29,049 --> 00:24:33,519
to using as web developers so

00:24:31,570 --> 00:24:36,909
familiarity makes learning the language

00:24:33,519 --> 00:24:39,730
just a lot less daunting means we can

00:24:36,909 --> 00:24:41,110
spend more time building it and less

00:24:39,730 --> 00:24:44,740
time kind of scratching my head working

00:24:41,110 --> 00:24:46,809
out what's going on and that's really

00:24:44,740 --> 00:24:50,470
like a core principle of Alexia

00:24:46,809 --> 00:24:52,480
it was designed for this very reason and

00:24:50,470 --> 00:24:55,320
that was really inspired by Ruby because

00:24:52,480 --> 00:24:58,269
Ruby also was developed for that reason

00:24:55,320 --> 00:25:00,399
but Alexa is more than just a ruby clone

00:24:58,269 --> 00:25:03,039
it takes inspiration from a lot of

00:25:00,399 --> 00:25:06,309
different languages give you an example

00:25:03,039 --> 00:25:10,350
so this is the pipe operator so a bit of

00:25:06,309 --> 00:25:13,840
a celebrity operator and Alexia world

00:25:10,350 --> 00:25:19,690
and this was inspired by Unix

00:25:13,840 --> 00:25:21,309
and languages like f-sharp and if

00:25:19,690 --> 00:25:25,299
anyone's used L but I think it's got

00:25:21,309 --> 00:25:27,999
something similar to this and this how

00:25:25,299 --> 00:25:30,159
it works really simple example of the

00:25:27,999 --> 00:25:33,820
same logic but with them without the

00:25:30,159 --> 00:25:35,440
pipe so with the pipe version the value

00:25:33,820 --> 00:25:37,830
on the left is passed as the first

00:25:35,440 --> 00:25:40,749
argument to the function on the right

00:25:37,830 --> 00:25:42,759
and this example here it kind of it

00:25:40,749 --> 00:25:44,200
doesn't really improve the codes in fact

00:25:42,759 --> 00:25:47,289
it kind of makes it look a bit less

00:25:44,200 --> 00:25:50,740
readable I'd I'd say but if you took

00:25:47,289 --> 00:25:53,019
some code like this you might be able to

00:25:50,740 --> 00:25:56,110
improve it with pipes so it just takes

00:25:53,019 --> 00:25:58,090
some data which is the starting point

00:25:56,110 --> 00:26:00,309
which is kind of two thirds of the way

00:25:58,090 --> 00:26:01,869
down the first line and those

00:26:00,309 --> 00:26:05,320
transformations it converts the data

00:26:01,869 --> 00:26:08,860
filters it sorts it it's just quite hard

00:26:05,320 --> 00:26:10,960
to read so you there's one way to

00:26:08,860 --> 00:26:12,970
improve there would be to just assign

00:26:10,960 --> 00:26:15,940
the result of each step as you go along

00:26:12,970 --> 00:26:17,740
to a variable and you could also just

00:26:15,940 --> 00:26:19,090
abstract out the function that removes

00:26:17,740 --> 00:26:21,220
cats

00:26:19,090 --> 00:26:24,910
into its own function it's a bit more

00:26:21,220 --> 00:26:28,150
readable but with the pipes you can make

00:26:24,910 --> 00:26:30,420
it even even more readable and just a

00:26:28,150 --> 00:26:32,770
lot easier to kind of debug and modify

00:26:30,420 --> 00:26:34,780
so you can see the first thing happens

00:26:32,770 --> 00:26:36,430
is you've got the data then you're

00:26:34,780 --> 00:26:39,070
converting it then you're filtering out

00:26:36,430 --> 00:26:42,340
cats then you're sorting it and that's

00:26:39,070 --> 00:26:44,080
just so much easier to read and yeah

00:26:42,340 --> 00:26:45,520
what if you come to modify this and you

00:26:44,080 --> 00:26:48,640
want to change it sort of removed

00:26:45,520 --> 00:26:50,680
tortoises or whatever then you know

00:26:48,640 --> 00:26:53,830
exactly what to look for and we're wet

00:26:50,680 --> 00:26:55,630
and serviced and you filter and that's

00:26:53,830 --> 00:26:58,360
the PI property that's just one example

00:26:55,630 --> 00:27:00,310
of these kind of nice things that elixir

00:26:58,360 --> 00:27:01,890
has that helps make things just a lot

00:27:00,310 --> 00:27:04,300
more manageable and readable and and

00:27:01,890 --> 00:27:09,040
yeah you just spend a lot less time kind

00:27:04,300 --> 00:27:10,470
of working out what's going on so yeah

00:27:09,040 --> 00:27:12,550
that's the kind of first thing about

00:27:10,470 --> 00:27:15,130
developer happiness has just got this

00:27:12,550 --> 00:27:18,880
really nice language this kind of a joy

00:27:15,130 --> 00:27:20,650
to use yeah you kind of have to try out

00:27:18,880 --> 00:27:23,850
just to see it's functional and

00:27:20,650 --> 00:27:23,850
immutable and all these nice things

00:27:25,590 --> 00:27:31,120
there's also really really kind of

00:27:28,060 --> 00:27:33,460
strong focus on learning both within the

00:27:31,120 --> 00:27:38,020
language and within the community that's

00:27:33,460 --> 00:27:39,250
developing it so one example is that so

00:27:38,020 --> 00:27:40,680
Phoenix though which is the web

00:27:39,250 --> 00:27:43,780
framework that I mentioned but earlier

00:27:40,680 --> 00:27:46,270
it had a new version out a few months

00:27:43,780 --> 00:27:49,450
ago and kind of a headline feature of it

00:27:46,270 --> 00:27:51,580
was not like a feature per se it was the

00:27:49,450 --> 00:27:54,460
fact that they'd rethought about how the

00:27:51,580 --> 00:27:57,160
projects are structured in a way they

00:27:54,460 --> 00:27:59,470
can encourage people who are new to the

00:27:57,160 --> 00:28:02,290
language and use the framework to pick

00:27:59,470 --> 00:28:04,420
it up really quickly and to pick up in a

00:28:02,290 --> 00:28:07,150
way that they're using best practice

00:28:04,420 --> 00:28:08,410
from the start so it's a really strong

00:28:07,150 --> 00:28:12,070
focus in the community it's probably

00:28:08,410 --> 00:28:13,450
like the the top priority of people who

00:28:12,070 --> 00:28:16,180
are making the language and all the

00:28:13,450 --> 00:28:17,740
libraries that sit around it and

00:28:16,180 --> 00:28:19,030
alongside that the documentation is

00:28:17,740 --> 00:28:24,700
really good and there's loads of guides

00:28:19,030 --> 00:28:26,560
and tutorials and things and alongside

00:28:24,700 --> 00:28:27,940
that the community is not just focused

00:28:26,560 --> 00:28:30,120
on learning but it's really active and

00:28:27,940 --> 00:28:30,120
supportive

00:28:32,750 --> 00:28:37,380
so if you have a look at three kind of

00:28:35,160 --> 00:28:39,720
poor requests on github in the lexer and

00:28:37,380 --> 00:28:43,080
also other libraries you quite often see

00:28:39,720 --> 00:28:45,780
this comment and this is from guide

00:28:43,080 --> 00:28:47,910
shows ALM who's the creator of elixir

00:28:45,780 --> 00:28:49,770
and he likes to go through and just kind

00:28:47,910 --> 00:28:51,030
of encourage people give them love

00:28:49,770 --> 00:28:53,010
hearts on their pour request when

00:28:51,030 --> 00:28:55,309
they're about to be merged in just

00:28:53,010 --> 00:28:57,780
creates this atmosphere of support

00:28:55,309 --> 00:29:00,330
there's a lot of encouraging discussion

00:28:57,780 --> 00:29:04,919
that goes on it's just a nice atmosphere

00:29:00,330 --> 00:29:06,120
to work in alongside that there's a

00:29:04,919 --> 00:29:07,770
growing number of conferences and

00:29:06,120 --> 00:29:10,230
meetups where you can learn about lots

00:29:07,770 --> 00:29:13,710
of different interesting things and go

00:29:10,230 --> 00:29:15,540
to seminars and just learn learn the

00:29:13,710 --> 00:29:21,390
basics everyone's really happy to kind

00:29:15,540 --> 00:29:23,340
of help teach you things so again what

00:29:21,390 --> 00:29:24,780
how has that helped us we need to be

00:29:23,340 --> 00:29:27,980
able to get things up and running really

00:29:24,780 --> 00:29:30,299
fast in front of users as fast as we can

00:29:27,980 --> 00:29:32,870
so our lang just wouldn't have been a

00:29:30,299 --> 00:29:36,000
good fit for us that first example

00:29:32,870 --> 00:29:38,490
didn't quite show just how weird our

00:29:36,000 --> 00:29:41,309
language it is recommend you can have a

00:29:38,490 --> 00:29:42,750
look at excess bit weird so it literally

00:29:41,309 --> 00:29:44,309
gives us the best of both worlds it's

00:29:42,750 --> 00:29:47,070
got lines fault tolerance and

00:29:44,309 --> 00:29:48,679
concurrency but it's also just a lot

00:29:47,070 --> 00:29:54,000
easier to use a lot more kind of

00:29:48,679 --> 00:29:56,490
accessible the fact that is fun and

00:29:54,000 --> 00:30:00,750
approachable meant that we got up and

00:29:56,490 --> 00:30:02,220
running with it really quickly it also

00:30:00,750 --> 00:30:04,679
means that we can bring new developers

00:30:02,220 --> 00:30:07,650
onto projects with minimal effort even

00:30:04,679 --> 00:30:10,040
if they've got no experience with it it

00:30:07,650 --> 00:30:12,299
often doesn't take you long to learn it

00:30:10,040 --> 00:30:14,610
and again this just gives us the space

00:30:12,299 --> 00:30:16,679
to focus on the real-life problems that

00:30:14,610 --> 00:30:18,090
the users are having rather than

00:30:16,679 --> 00:30:20,940
focusing on the technical problems that

00:30:18,090 --> 00:30:23,760
we're having making the solutions to

00:30:20,940 --> 00:30:27,809
problems that they're having so that's

00:30:23,760 --> 00:30:30,150
really important to us so yeah I'd

00:30:27,809 --> 00:30:32,270
recommend just go out and try it out see

00:30:30,150 --> 00:30:34,530
see how it feels

00:30:32,270 --> 00:30:36,620
try out Phoenix as well because you can

00:30:34,530 --> 00:30:40,980
fire up a web application in like a

00:30:36,620 --> 00:30:42,419
matter of minutes so yeah the first

00:30:40,980 --> 00:30:44,030
place I'd recommend is just go to the

00:30:42,419 --> 00:30:45,860
Alexa website

00:30:44,030 --> 00:30:47,300
there's really great guides on there and

00:30:45,860 --> 00:30:49,490
there's a long list of resources that

00:30:47,300 --> 00:30:50,750
you can use and yeah if you try it out

00:30:49,490 --> 00:30:55,490
just let us know what you think just

00:30:50,750 --> 00:30:56,660
tweet us or something yeah thank you

00:30:55,490 --> 00:30:58,490
thanks to everyone who maybe are many

00:30:56,660 --> 00:31:01,550
who helped me write that as well and

00:30:58,490 --> 00:31:07,390
thanks for coming through the cold

00:31:01,550 --> 00:31:07,390

YouTube URL: https://www.youtube.com/watch?v=zL2wcqS78UA


