Title: Adopting Modular JS - Front-end London (FEL)
Publication date: 2016-07-14
Playlist: Front-End London
Description: 
	Writing applications that are both maintainable and scalable is a challenge, but one we can more easily overcome with modularisation. The emergence of new module types and powerful tools has furnished JavaScript developers with the freedom and control they need to deliver easy-to-manage and larger scale web products. In this talk, Richard Bultitude explains what modular development is, why you should use it and how you can implement it as a solo dev or within your organisation.

▼ Speaker ▼

Richard Bultitude (@rbultitudezone)

▼ Event ▼

This talk was part of the Front-end London (fel) March 2016 event.

▼ Transcript ▼

https://blog.pusher.com/adopting-modular-javascript/

▼ Video by Pusher ▼

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications.

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure.

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more.

Getting started takes just a few seconds: simply go to https://pusher.com and create a free account. Happy hacking!

▼ More from Pusher ▼

Subscribe to Pusher: https://www.youtube.com/c/pusherrealtime?Front-end London playlist: https://www.youtube.com/playlist?list=PL8xuokhAnn4pZ6tAyFobOcUrLI2MNKZbU
Captions: 
	00:00:05,000 --> 00:00:08,900
maybe aren't familiar with modular

00:00:07,279 --> 00:00:10,730
JavaScript at all or what even that

00:00:08,900 --> 00:00:12,469
means so I'll cover a bit of that but

00:00:10,730 --> 00:00:15,170
also I've hopefully got some kind of

00:00:12,469 --> 00:00:17,110
slightly more meaty juicy stuff for you

00:00:15,170 --> 00:00:19,640
guys that actually already know about it

00:00:17,110 --> 00:00:21,430
so that you know I'm not entirely

00:00:19,640 --> 00:00:25,010
preaching to the converted pointlessly

00:00:21,430 --> 00:00:28,010
so a little bit about myself this is me

00:00:25,010 --> 00:00:29,840
I think I'm aged 11 there but you know

00:00:28,010 --> 00:00:31,580
this is before you know you had time

00:00:29,840 --> 00:00:33,530
coded cameras and stuff so you know

00:00:31,580 --> 00:00:35,270
something around age and as you can see

00:00:33,530 --> 00:00:39,620
I was kind of big into my tech you know

00:00:35,270 --> 00:00:42,079
I've got Casio keyboard so that's how I

00:00:39,620 --> 00:00:43,519
became what I am now and these are some

00:00:42,079 --> 00:00:46,760
of the things that I'm interested in or

00:00:43,519 --> 00:00:48,499
that I do in my job my job definitely

00:00:46,760 --> 00:00:50,420
focuses a lot on best practice because

00:00:48,499 --> 00:00:53,809
half of my role is kind of about

00:00:50,420 --> 00:00:55,909
leadership and and understanding what

00:00:53,809 --> 00:00:57,889
you know the industry does and making

00:00:55,909 --> 00:01:00,469
sense of that figure into my team

00:00:57,889 --> 00:01:03,019
I'm also got kind of a little personal

00:01:00,469 --> 00:01:05,170
obsession with web accessibility I think

00:01:03,019 --> 00:01:08,270
we should all be making products that

00:01:05,170 --> 00:01:11,420
can be used by anyone and for the

00:01:08,270 --> 00:01:13,100
keen-eyed of you out there might notice

00:01:11,420 --> 00:01:15,410
that actually I've got gardening in

00:01:13,100 --> 00:01:18,500
there it's it's true amongst all those

00:01:15,410 --> 00:01:21,830
are the amazing neat Eric things I do

00:01:18,500 --> 00:01:24,590
actually have an allotment so yeah I

00:01:21,830 --> 00:01:27,890
work at a company called zone we are a

00:01:24,590 --> 00:01:30,800
full-service agency we have offices in

00:01:27,890 --> 00:01:33,680
London Bristol and now Cologne and

00:01:30,800 --> 00:01:36,500
weirdly enough as of tomorrow I'll have

00:01:33,680 --> 00:01:40,070
been there for four years so this is

00:01:36,500 --> 00:01:43,550
something of an anniversary so without

00:01:40,070 --> 00:01:46,280
further ado yeah what want to explain is

00:01:43,550 --> 00:01:48,020
a little bit about what it is what

00:01:46,280 --> 00:01:49,330
modular JavaScript is and why you would

00:01:48,020 --> 00:01:54,230
switch to it if you don't use it already

00:01:49,330 --> 00:01:56,740
a little bit about what the actual api's

00:01:54,230 --> 00:02:00,110
are that are out there that you can use

00:01:56,740 --> 00:02:04,010
what tools you can use to actually make

00:02:00,110 --> 00:02:06,100
it happen and some of the ways we

00:02:04,010 --> 00:02:09,080
actually go about where I work

00:02:06,100 --> 00:02:13,160
implementing it because it can be a bit

00:02:09,080 --> 00:02:14,690
of a minefield so what exactly is it

00:02:13,160 --> 00:02:17,300
well let's maybe start just by looking

00:02:14,690 --> 00:02:18,470
at the actual goals all of the kind of

00:02:17,300 --> 00:02:20,720
api's that have been

00:02:18,470 --> 00:02:23,920
produced over the last whatever five or

00:02:20,720 --> 00:02:27,620
six years have kind of got similar goals

00:02:23,920 --> 00:02:29,570
so yeah to encapsulate code there was a

00:02:27,620 --> 00:02:32,510
good talk last time actually about some

00:02:29,570 --> 00:02:34,780
CSS modules and that was you know one of

00:02:32,510 --> 00:02:38,780
the big pluses of that was encapsulation

00:02:34,780 --> 00:02:40,580
and having logically organized files in

00:02:38,780 --> 00:02:42,260
a similar way to other languages the

00:02:40,580 --> 00:02:45,950
languages obviously had this approach

00:02:42,260 --> 00:02:48,350
for quite some time and also defining

00:02:45,950 --> 00:02:49,760
dependencies that must load before a

00:02:48,350 --> 00:02:52,600
module has execute that's really really

00:02:49,760 --> 00:02:55,540
important and one of the massive

00:02:52,600 --> 00:02:59,120
persuading factors for switching to this

00:02:55,540 --> 00:03:00,590
so essentially you are ensuring that you

00:02:59,120 --> 00:03:02,600
don't have that ridiculous situation

00:03:00,590 --> 00:03:05,510
where you know you have a script tag

00:03:02,600 --> 00:03:08,390
somewhere on the page and jQuery loading

00:03:05,510 --> 00:03:10,459
as the JavaScript runtime or the browser

00:03:08,390 --> 00:03:12,170
sees fit and then another bit of code

00:03:10,459 --> 00:03:14,840
which relies on it maybe not loading and

00:03:12,170 --> 00:03:17,209
actually having access to that so this

00:03:14,840 --> 00:03:22,010
whole structure is to avoid that

00:03:17,209 --> 00:03:24,290
silliness and finally to load smaller

00:03:22,010 --> 00:03:26,810
more manageable files and only load them

00:03:24,290 --> 00:03:29,930
when needed which some of the things I'm

00:03:26,810 --> 00:03:33,260
going to talk about later in the talk do

00:03:29,930 --> 00:03:36,350
better than others what it actually

00:03:33,260 --> 00:03:37,550
really is it's a design pattern so you

00:03:36,350 --> 00:03:41,750
know I suppose in lots of industries

00:03:37,550 --> 00:03:43,430
where you make things you have different

00:03:41,750 --> 00:03:45,110
patterns different approaches to imagine

00:03:43,430 --> 00:03:48,019
in engineering and some of the

00:03:45,110 --> 00:03:49,760
industries you have different ways of

00:03:48,019 --> 00:03:52,880
organizing things that you can reuse

00:03:49,760 --> 00:03:54,680
them so a sort of quick example of the

00:03:52,880 --> 00:03:57,049
kind of things I'm going to dip into you

00:03:54,680 --> 00:04:00,769
know having multiple files that are

00:03:57,049 --> 00:04:02,780
maybe if you decide so organized in such

00:04:00,769 --> 00:04:05,090
a way that you control them with one

00:04:02,780 --> 00:04:07,400
single file there are other patterns or

00:04:05,090 --> 00:04:09,730
complex ones but the whole idea of it I

00:04:07,400 --> 00:04:13,640
guess in a way is to reduce complexity

00:04:09,730 --> 00:04:15,920
and as nice old Brian Kernighan said

00:04:13,640 --> 00:04:18,680
controlling complexity is the essence of

00:04:15,920 --> 00:04:20,900
computer programming and if you kind of

00:04:18,680 --> 00:04:22,970
wrote UNIX you probably know what you're

00:04:20,900 --> 00:04:25,760
talking about

00:04:22,970 --> 00:04:27,200
so this is how it used to be for us when

00:04:25,760 --> 00:04:30,740
I started his own it was very much like

00:04:27,200 --> 00:04:31,729
this so we had one one awful horrendous

00:04:30,740 --> 00:04:34,189
single

00:04:31,729 --> 00:04:36,740
normos file of like thousands of lines

00:04:34,189 --> 00:04:39,740
of code in it and no dependency

00:04:36,740 --> 00:04:41,120
management poor ordering if you could be

00:04:39,740 --> 00:04:42,710
asked you might move some functions

00:04:41,120 --> 00:04:44,809
around to kind of group them with their

00:04:42,710 --> 00:04:46,699
buddies but generally no one could be

00:04:44,809 --> 00:04:49,129
asked or didn't at the time you had

00:04:46,699 --> 00:04:50,509
really weird close coupling and you had

00:04:49,129 --> 00:04:52,759
loads of merge conflicts because

00:04:50,509 --> 00:04:54,919
obviously if you have lots of big files

00:04:52,759 --> 00:04:56,779
with lots of lines of code get or

00:04:54,919 --> 00:04:57,860
whatever it is you use to version

00:04:56,779 --> 00:04:59,749
controllers can have a nightmare

00:04:57,860 --> 00:05:01,490
actually making sense of all that if you

00:04:59,749 --> 00:05:03,889
have lots of Deb's working on the same

00:05:01,490 --> 00:05:07,309
file so it was kind of like this for us

00:05:03,889 --> 00:05:10,520
you look at file and what you couldn't

00:05:07,309 --> 00:05:13,009
make any sense of it and now because

00:05:10,520 --> 00:05:15,110
it'll be better so we might have on

00:05:13,009 --> 00:05:19,849
maybe a medium sized sort of CMS driven

00:05:15,110 --> 00:05:22,069
project 30 smaller files we have

00:05:19,849 --> 00:05:25,099
complete dependency control so you know

00:05:22,069 --> 00:05:27,289
any third party plugins any frameworks

00:05:25,099 --> 00:05:30,409
and libraries we're using are only

00:05:27,289 --> 00:05:32,389
required when necessary we have loads

00:05:30,409 --> 00:05:35,360
less repetition like I used to look

00:05:32,389 --> 00:05:36,499
through when I was tat leading I put the

00:05:35,360 --> 00:05:39,110
project so you can look through the code

00:05:36,499 --> 00:05:41,389
that we produced in are ginormous single

00:05:39,110 --> 00:05:42,889
files and actually sometimes find the

00:05:41,389 --> 00:05:44,509
same function doing the same thing

00:05:42,889 --> 00:05:46,370
because one dev would have written it

00:05:44,509 --> 00:05:47,810
and happily got it working and other dev

00:05:46,370 --> 00:05:50,360
wouldn't know that it existed and

00:05:47,810 --> 00:05:53,749
happily got it working and so it goes on

00:05:50,360 --> 00:05:55,969
and consequently fewer bugs and fewer

00:05:53,749 --> 00:05:58,370
merge conflicts but just to point out

00:05:55,969 --> 00:06:00,080
with all these approaches you have a

00:05:58,370 --> 00:06:02,059
little overhead and I'll come to why

00:06:00,080 --> 00:06:05,149
that is later so now we've got a nice

00:06:02,059 --> 00:06:08,479
you know nice warm feeling when we work

00:06:05,149 --> 00:06:13,430
with each other you know that's that's

00:06:08,479 --> 00:06:14,629
me so just a bucket or some evidence and

00:06:13,430 --> 00:06:17,120
you should always have a slide like this

00:06:14,629 --> 00:06:20,139
I think in a presentation at about you

00:06:17,120 --> 00:06:24,499
know really full-on vertical text of

00:06:20,139 --> 00:06:27,889
numbers say numbers cell stuff so Stack

00:06:24,499 --> 00:06:29,509
Overflow absolutely tons of results for

00:06:27,889 --> 00:06:32,990
people probably having loads of

00:06:29,509 --> 00:06:34,339
headaches with modular JavaScript loads

00:06:32,990 --> 00:06:35,719
of github repos loads of people have

00:06:34,339 --> 00:06:39,169
tried to solve the same problem which is

00:06:35,719 --> 00:06:41,360
great and loads of Google results if you

00:06:39,169 --> 00:06:43,490
google it that's an astonishing number

00:06:41,360 --> 00:06:45,860
of results half a million I guess maybe

00:06:43,490 --> 00:06:47,990
some of it is kind of porn spam

00:06:45,860 --> 00:06:51,259
stuff but you know it's a good number

00:06:47,990 --> 00:06:52,479
and you know as a consequence thousands

00:06:51,259 --> 00:06:56,150
of happy devs

00:06:52,479 --> 00:06:58,009
and we've used this approach on loads of

00:06:56,150 --> 00:07:00,680
projects so it's just a handful of the

00:06:58,009 --> 00:07:01,819
clients that we work with it definitely

00:07:00,680 --> 00:07:03,979
saved our bacon in a couple of

00:07:01,819 --> 00:07:07,430
circumstances though the work we did for

00:07:03,979 --> 00:07:09,050
Tesco I know SBB or recently has really

00:07:07,430 --> 00:07:12,439
benefited from us being really organized

00:07:09,050 --> 00:07:15,110
taking this approach so for those of you

00:07:12,439 --> 00:07:17,030
that haven't adopted it already and I'm

00:07:15,110 --> 00:07:20,419
guessing some of you have in fact let's

00:07:17,030 --> 00:07:25,310
do a quick poll so hands up if you use a

00:07:20,419 --> 00:07:28,580
modular JavaScript approach okay so yeah

00:07:25,310 --> 00:07:32,419
just over half so I'll skip this bit no

00:07:28,580 --> 00:07:34,550
joking this is why you would do it this

00:07:32,419 --> 00:07:36,110
I would say you're gonna get more

00:07:34,550 --> 00:07:38,750
manageable code you're going about two

00:07:36,110 --> 00:07:40,520
separate concerns more easily one

00:07:38,750 --> 00:07:42,319
advantage that is probably a bit

00:07:40,520 --> 00:07:44,870
underrated but we've all had headaches

00:07:42,319 --> 00:07:46,729
with is you protect the namespace so not

00:07:44,870 --> 00:07:48,289
everything in the whole world is hanging

00:07:46,729 --> 00:07:51,020
off the window and possibly fighting

00:07:48,289 --> 00:07:52,819
with other things and you can leverage

00:07:51,020 --> 00:07:54,349
open source packages more easily I'll

00:07:52,819 --> 00:07:56,479
come to that in a bit but essentially

00:07:54,349 --> 00:07:58,719
it's about kind of using things like NPM

00:07:56,479 --> 00:08:01,759
or other ecosystems that exist out there

00:07:58,719 --> 00:08:03,529
and you can do lazy loading and I'll

00:08:01,759 --> 00:08:05,389
come to that shortly as well too

00:08:03,529 --> 00:08:08,020
so if you had to sell it to your

00:08:05,389 --> 00:08:10,069
colleagues for any reason or your boss

00:08:08,020 --> 00:08:12,440
you know maybe they're particularly

00:08:10,069 --> 00:08:14,089
stubborn I don't know but you can

00:08:12,440 --> 00:08:16,219
definitely make the case that you're

00:08:14,089 --> 00:08:18,409
gonna have a lot more easy onboarding

00:08:16,219 --> 00:08:21,139
and handovers with other team members um

00:08:18,409 --> 00:08:22,669
more easily have parallel work streams

00:08:21,139 --> 00:08:25,279
because you know one person can work on

00:08:22,669 --> 00:08:28,300
one module or one feature which could be

00:08:25,279 --> 00:08:31,570
a module and another person on another

00:08:28,300 --> 00:08:36,079
therefore you get more easy application

00:08:31,570 --> 00:08:37,640
maintenance and yeah you get less errors

00:08:36,079 --> 00:08:39,680
and debugging is kind of easier because

00:08:37,640 --> 00:08:43,760
you're able to focus on the problems

00:08:39,680 --> 00:08:46,790
that exist in one small area so in one

00:08:43,760 --> 00:08:48,380
phrase that would be the cell it's

00:08:46,790 --> 00:08:49,699
basically an investment if you don't you

00:08:48,380 --> 00:08:52,459
haven't got a boilerplate or something

00:08:49,699 --> 00:08:54,949
that is configured like this but a bit

00:08:52,459 --> 00:08:57,230
of time in make it work and reap the

00:08:54,949 --> 00:09:00,710
benefits so

00:08:57,230 --> 00:09:02,000
the landscape this is the bit that fried

00:09:00,710 --> 00:09:05,690
my head when I was putting it together I

00:09:02,000 --> 00:09:08,750
have to say because there is quite a big

00:09:05,690 --> 00:09:12,470
landscape out there however I'm going to

00:09:08,750 --> 00:09:15,260
start off gently so the first thing I

00:09:12,470 --> 00:09:16,490
think is worth pointing out is that

00:09:15,260 --> 00:09:18,470
before we're kind of going into any of

00:09:16,490 --> 00:09:20,570
the major api's there is a pattern

00:09:18,470 --> 00:09:22,250
that's been around for ages which addy

00:09:20,570 --> 00:09:24,500
Osmani has done a great job of

00:09:22,250 --> 00:09:28,010
documenting which is called the

00:09:24,500 --> 00:09:29,390
revealing module pattern and it's not

00:09:28,010 --> 00:09:31,160
necessarily quints you know it's not

00:09:29,390 --> 00:09:32,390
quite essentially modular JavaScript but

00:09:31,160 --> 00:09:34,970
it's just a way of thinking about

00:09:32,390 --> 00:09:37,960
JavaScript so we have a quick look at

00:09:34,970 --> 00:09:41,240
some code I know it's a bit scary but

00:09:37,960 --> 00:09:44,630
essentially you can have a module which

00:09:41,240 --> 00:09:46,280
is just a self calling function and some

00:09:44,630 --> 00:09:47,330
things in it there could be objects that

00:09:46,280 --> 00:09:49,670
could be functions they could be

00:09:47,330 --> 00:09:52,100
properties and you decide what it is you

00:09:49,670 --> 00:09:53,900
want to return what kind of undoing

00:09:52,100 --> 00:09:56,690
myself with my own shadow it's a bit

00:09:53,900 --> 00:09:59,780
annoying and when you actually want to

00:09:56,690 --> 00:10:01,670
run it you essentially you've decided

00:09:59,780 --> 00:10:03,530
what you've revealed or not and you can

00:10:01,670 --> 00:10:06,350
call it so one of them isn't going to

00:10:03,530 --> 00:10:07,660
work and one of them is and you can

00:10:06,350 --> 00:10:09,740
really have things that run privately

00:10:07,660 --> 00:10:12,110
things that happen when you've loaded

00:10:09,740 --> 00:10:15,350
that module but it's just a really

00:10:12,110 --> 00:10:17,380
really simple idea do any elegant idea

00:10:15,350 --> 00:10:21,110
that you just encapsulate something and

00:10:17,380 --> 00:10:26,150
you decide what you make private and

00:10:21,110 --> 00:10:28,730
make public and early on in

00:10:26,150 --> 00:10:32,240
I guess the thinking about JavaScript

00:10:28,730 --> 00:10:35,570
patterns a group formed who were

00:10:32,240 --> 00:10:38,150
previously called server jeaious and

00:10:35,570 --> 00:10:40,130
have since become common junior now they

00:10:38,150 --> 00:10:44,030
create a pattern they actually wanted

00:10:40,130 --> 00:10:46,970
this to be the kind of the tonic for

00:10:44,030 --> 00:10:48,800
lots of JavaScript programming woes and

00:10:46,970 --> 00:10:50,750
they were hoping I think that the

00:10:48,800 --> 00:10:53,060
industry and maybe even JavaScript

00:10:50,750 --> 00:10:55,280
itself would adopt their ideas and maybe

00:10:53,060 --> 00:10:57,950
in a funny kind of way it did but they

00:10:55,280 --> 00:10:59,150
came up with this idea and it was kind

00:10:57,950 --> 00:11:01,010
of really I guess born out of

00:10:59,150 --> 00:11:03,800
server-side JavaScript so node

00:11:01,010 --> 00:11:06,590
essentially and it's really really nice

00:11:03,800 --> 00:11:07,760
and and clean to look at and really

00:11:06,590 --> 00:11:09,470
simple to use

00:11:07,760 --> 00:11:11,420
it doesn't have any kind of wrapping

00:11:09,470 --> 00:11:14,300
function or anything you can just decide

00:11:11,420 --> 00:11:17,000
what you what dependencies your list and

00:11:14,300 --> 00:11:19,580
decide what things you export as a

00:11:17,000 --> 00:11:23,270
module funnily enough it does actually

00:11:19,580 --> 00:11:26,990
work synchronously so if in a weird

00:11:23,270 --> 00:11:30,470
situation you were loading a module

00:11:26,990 --> 00:11:32,720
which it it could get but was gonna take

00:11:30,470 --> 00:11:34,400
time to acquire it would actually

00:11:32,720 --> 00:11:36,020
completely stop the browser from working

00:11:34,400 --> 00:11:38,720
temporarily while it was thinking about

00:11:36,020 --> 00:11:40,970
that but it's the whole sort of premise

00:11:38,720 --> 00:11:42,860
of commonjs is it's some sub having a

00:11:40,970 --> 00:11:44,900
short distance so all the files that

00:11:42,860 --> 00:11:47,420
you're using are are in your application

00:11:44,900 --> 00:11:48,320
and are easily accessible and therefore

00:11:47,420 --> 00:11:51,380
you don't really have a problem with

00:11:48,320 --> 00:11:54,590
that you won't notice it there is a

00:11:51,380 --> 00:11:56,390
little bit of an example of commonjs so

00:11:54,590 --> 00:11:58,010
as you can see don't need anything kind

00:11:56,390 --> 00:12:00,050
of wrapping anything else you can just

00:11:58,010 --> 00:12:02,750
decide what it is that you attach to

00:12:00,050 --> 00:12:04,190
this module object which it gives you

00:12:02,750 --> 00:12:06,320
and you know it can just be a

00:12:04,190 --> 00:12:10,580
calculation it could be another function

00:12:06,320 --> 00:12:13,910
and yeah it's really really clean and

00:12:10,580 --> 00:12:17,300
straightforward and very nice and then

00:12:13,910 --> 00:12:18,680
shortly after that came along AMD which

00:12:17,300 --> 00:12:21,890
at the time seemed like the most

00:12:18,680 --> 00:12:25,040
wonderful thing in the world I guess we

00:12:21,890 --> 00:12:27,830
certainly thought it was and the whole

00:12:25,040 --> 00:12:28,910
idea this was rather than the common jet

00:12:27,830 --> 00:12:30,860
approach which is kind of about the

00:12:28,910 --> 00:12:33,110
server that was about giving something

00:12:30,860 --> 00:12:36,250
to front-end amps you know people that

00:12:33,110 --> 00:12:38,720
work in the client in the browser and

00:12:36,250 --> 00:12:42,220
designing a system that's not blocking

00:12:38,720 --> 00:12:45,320
so when you require when you request

00:12:42,220 --> 00:12:47,030
access to another module it goes and

00:12:45,320 --> 00:12:48,500
gets it asynchronously so it basically

00:12:47,030 --> 00:12:50,270
sort of puts the phone down

00:12:48,500 --> 00:12:52,400
and walks away and goes and watches the

00:12:50,270 --> 00:12:54,590
TV for a bit and then comes back and

00:12:52,400 --> 00:12:56,300
says your module is ready now and but it

00:12:54,590 --> 00:12:57,470
hasn't broken anything in your app which

00:12:56,300 --> 00:13:01,730
is really nice

00:12:57,470 --> 00:13:03,380
can be really nice but speaking of

00:13:01,730 --> 00:13:07,640
wrapping functions it uses this define

00:13:03,380 --> 00:13:10,340
wrapper and yeah that has its pluses and

00:13:07,640 --> 00:13:13,580
minuses it's a bit ugly maybe and it's

00:13:10,340 --> 00:13:15,260
yeah it's more of a boats so you have to

00:13:13,580 --> 00:13:16,790
list the things you want to load and

00:13:15,260 --> 00:13:18,770
then you have to list the things that

00:13:16,790 --> 00:13:20,620
you might get back if those things

00:13:18,770 --> 00:13:22,070
return something so obviously I'm using

00:13:20,620 --> 00:13:23,660
jQuery here and

00:13:22,070 --> 00:13:27,500
get back a dollar and then I can use it

00:13:23,660 --> 00:13:29,990
and yeah it can get pretty messy we had

00:13:27,500 --> 00:13:33,080
some really really fun times with the

00:13:29,990 --> 00:13:34,190
AMD approach so even though it's talking

00:13:33,080 --> 00:13:35,600
and supposed to have too much opinion in

00:13:34,190 --> 00:13:38,270
it you're probably gonna get some you

00:13:35,600 --> 00:13:38,980
know I basically I'm over this now I'm

00:13:38,270 --> 00:13:42,650
over it

00:13:38,980 --> 00:13:44,120
and I had to sort of shoehorn this in

00:13:42,650 --> 00:13:48,680
because I think this is really

00:13:44,120 --> 00:13:52,250
interesting example of I guess how weird

00:13:48,680 --> 00:13:55,610
the landscape is so someone cooked up

00:13:52,250 --> 00:13:59,420
this idea that okay we want to be make

00:13:55,610 --> 00:14:02,660
be able to publish modules that use AMD

00:13:59,420 --> 00:14:05,390
and CJ s and actually jQuery plugins and

00:14:02,660 --> 00:14:06,950
and it goes on and on and so they made

00:14:05,390 --> 00:14:09,920
this amazing thing called the UMD

00:14:06,950 --> 00:14:12,920
wrapper which you can throw in the top

00:14:09,920 --> 00:14:15,230
of your module and it's only really

00:14:12,920 --> 00:14:18,530
really small and concise like this and

00:14:15,230 --> 00:14:20,000
really easy to configure Wow I actually

00:14:18,530 --> 00:14:24,170
contributed to a live in recent anywhere

00:14:20,000 --> 00:14:29,120
I had to add this and it so wasn't fun

00:14:24,170 --> 00:14:31,100
and the real gotcha is that if it uses a

00:14:29,120 --> 00:14:32,750
node style thing like a command Jack's

00:14:31,100 --> 00:14:35,120
kind of thing then all these paths will

00:14:32,750 --> 00:14:38,780
probably work because things like moment

00:14:35,120 --> 00:14:39,800
J s or es6 promises may exist on NPM and

00:14:38,780 --> 00:14:41,690
that's great because it will just go and

00:14:39,800 --> 00:14:43,730
find it will look it up by its name but

00:14:41,690 --> 00:14:45,800
if it's AMD it probably won't know where

00:14:43,730 --> 00:14:47,510
it is unless you've told it so so you

00:14:45,800 --> 00:14:50,270
have to figure these paths yourselves

00:14:47,510 --> 00:14:53,480
and anyway it served a purpose it still

00:14:50,270 --> 00:14:57,620
serves a purpose but as Scott Andrew

00:14:53,480 --> 00:14:59,300
says it's not a lie I mean no one said

00:14:57,620 --> 00:15:01,510
it was a lie right but anyway it's not a

00:14:59,300 --> 00:15:04,340
lie it works but it isn't compromised

00:15:01,510 --> 00:15:08,410
he's actually the author of curl jeaious

00:15:04,340 --> 00:15:10,460
which is a library a bit like require

00:15:08,410 --> 00:15:15,170
which I'm sadly not going to feature in

00:15:10,460 --> 00:15:17,450
this talk so apologies Scott so yeah

00:15:15,170 --> 00:15:18,410
here we go dinner it's the slider one

00:15:17,450 --> 00:15:21,950
was waiting for probably it's the one

00:15:18,410 --> 00:15:24,050
I'm so excited to deliver yeah six

00:15:21,950 --> 00:15:26,660
modules I mean es6 is the panacea for

00:15:24,050 --> 00:15:29,240
everything right I mean yeah es6

00:15:26,660 --> 00:15:32,320
or someone shaking the head okay well

00:15:29,240 --> 00:15:32,320
I'm gonna go with it anyway

00:15:33,269 --> 00:15:39,329
it's it's good for certain things right

00:15:36,059 --> 00:15:42,149
but it's got a way to go so yeah because

00:15:39,329 --> 00:15:43,800
of the proliferation of these api's and

00:15:42,149 --> 00:15:44,910
because I guess there are kind of

00:15:43,800 --> 00:15:48,269
managed by different groups and

00:15:44,910 --> 00:15:50,759
non-standard yeah JavaScript adopted it

00:15:48,269 --> 00:15:52,259
so it's actually an official part of the

00:15:50,759 --> 00:15:55,589
spec now even though almost no browser

00:15:52,259 --> 00:15:56,579
actually fully can implement it yet but

00:15:55,589 --> 00:15:58,139
it's designed for the browser on the

00:15:56,579 --> 00:15:59,689
server which is really really nice so it

00:15:58,139 --> 00:16:02,670
kind of caters for both of those worlds

00:15:59,689 --> 00:16:05,100
and the wrapping that I mentioned it's

00:16:02,670 --> 00:16:06,720
implicit so you don't need to do

00:16:05,100 --> 00:16:09,720
anything too fancy it's really really

00:16:06,720 --> 00:16:11,879
concise I suppose and and kind of pretty

00:16:09,720 --> 00:16:14,309
to look at there's lots and lots of

00:16:11,879 --> 00:16:15,809
really lovely ways that you can that you

00:16:14,309 --> 00:16:18,509
can import an export and you can do

00:16:15,809 --> 00:16:22,439
multiple things at once you can rename

00:16:18,509 --> 00:16:24,230
modules just using one line and I won't

00:16:22,439 --> 00:16:26,999
go too much into it because I'm probably

00:16:24,230 --> 00:16:27,269
eating into my own time infusing about

00:16:26,999 --> 00:16:30,540
it

00:16:27,269 --> 00:16:33,629
but some but yeah it's pretty smart so

00:16:30,540 --> 00:16:37,279
just to summarize this bit AMD user does

00:16:33,629 --> 00:16:40,350
kind of require and define paradigm and

00:16:37,279 --> 00:16:41,730
it actually does also support module on

00:16:40,350 --> 00:16:44,100
exports and exports so you can actually

00:16:41,730 --> 00:16:46,829
with requiring with AMD environments you

00:16:44,100 --> 00:16:48,660
can actually also write in the CJ style

00:16:46,829 --> 00:16:50,850
I don't know if anyone's done that or

00:16:48,660 --> 00:16:54,149
had much fun doing that but I can't

00:16:50,850 --> 00:16:56,009
imagine it's particularly great cjh uses

00:16:54,149 --> 00:17:00,299
require and this exports well this

00:16:56,009 --> 00:17:02,249
module object and es6 just has a very

00:17:00,299 --> 00:17:05,639
simple import and export interesting

00:17:02,249 --> 00:17:07,529
though it does also have a system import

00:17:05,639 --> 00:17:09,179
which again I don't think it's

00:17:07,529 --> 00:17:11,159
implemented that well but there are

00:17:09,179 --> 00:17:13,799
polyfills for it and it basically means

00:17:11,159 --> 00:17:15,959
using promises you can you can load

00:17:13,799 --> 00:17:20,159
other modules so you can do nice

00:17:15,959 --> 00:17:24,480
asynchronous stuff and yeah conversion

00:17:20,159 --> 00:17:26,149
so yeah I'm really really it pains me to

00:17:24,480 --> 00:17:29,700
think of anyone who's had to do this

00:17:26,149 --> 00:17:31,980
convert from AMD CJ CJ s you can do it

00:17:29,700 --> 00:17:33,240
there's a couple of decent libraries on

00:17:31,980 --> 00:17:36,899
github

00:17:33,240 --> 00:17:39,110
I can't imagine is much fun and you can

00:17:36,899 --> 00:17:42,330
go the other way as well so you can go

00:17:39,110 --> 00:17:44,429
from CJ at AMD which I believe

00:17:42,330 --> 00:17:45,670
SoundCloud had to do so they had load

00:17:44,429 --> 00:17:48,190
the legacy code and they had

00:17:45,670 --> 00:17:52,900
convert it so they used a library called

00:17:48,190 --> 00:17:59,580
sweet Jas do it you can convert from es6

00:17:52,900 --> 00:18:02,380
to Andy and CJ s confused okay good

00:17:59,580 --> 00:18:04,059
which is kind of getting to the number

00:18:02,380 --> 00:18:06,429
to talk in a way because is this

00:18:04,059 --> 00:18:07,720
approaches is what we actually take and

00:18:06,429 --> 00:18:12,100
is working really well for us

00:18:07,720 --> 00:18:13,420
using the lovely babel trans pilot so

00:18:12,100 --> 00:18:17,470
let's have a quick look at the loaders

00:18:13,420 --> 00:18:20,080
so first up require which largely uses

00:18:17,470 --> 00:18:22,390
the AMD pan but as i say can also do CJ

00:18:20,080 --> 00:18:23,650
s and the nice thing about require maybe

00:18:22,390 --> 00:18:26,470
is that it runs in the browser so you

00:18:23,650 --> 00:18:28,059
you basically you can write a module and

00:18:26,470 --> 00:18:30,730
save it and it will manage it for you

00:18:28,059 --> 00:18:32,500
there's no build step and it can lazy

00:18:30,730 --> 00:18:34,299
load things so let's say you've got

00:18:32,500 --> 00:18:36,250
application where you've got loads of

00:18:34,299 --> 00:18:38,440
libraries on one page you've got d3 and

00:18:36,250 --> 00:18:41,230
I don't know p5 and loads of canvas

00:18:38,440 --> 00:18:43,480
stuff loads of fancy stuff going on you

00:18:41,230 --> 00:18:44,890
can just load the modules that you want

00:18:43,480 --> 00:18:48,940
for that page without having to do any

00:18:44,890 --> 00:18:50,740
fancy bundling and it's now got some

00:18:48,940 --> 00:18:53,080
pretty decent community support because

00:18:50,740 --> 00:18:55,090
it's been around for a while the cons

00:18:53,080 --> 00:18:58,690
are using it the error logging is

00:18:55,090 --> 00:19:00,580
terrible if for some reason you've got

00:18:58,690 --> 00:19:02,110
one single name wrong for a module it's

00:19:00,580 --> 00:19:03,880
not going to tell you that you can

00:19:02,110 --> 00:19:04,960
basically kind of if you use it for long

00:19:03,880 --> 00:19:06,820
enough you kind of get used to these

00:19:04,960 --> 00:19:08,470
weird errors and you eventually figure

00:19:06,820 --> 00:19:10,720
out what they mean or you make educated

00:19:08,470 --> 00:19:11,950
guesses that's not fun and the caching

00:19:10,720 --> 00:19:13,630
problems that's that this is a really

00:19:11,950 --> 00:19:16,360
weird one for me even if you've got dev

00:19:13,630 --> 00:19:17,890
tools open and you refresh it still

00:19:16,360 --> 00:19:20,970
doesn't say always give you your new

00:19:17,890 --> 00:19:24,130
code which is horrible the documentation

00:19:20,970 --> 00:19:27,970
so awful in fact I'm gonna start there

00:19:24,130 --> 00:19:29,530
I'm just moaning mmm so yeah one gotcha

00:19:27,970 --> 00:19:32,020
one thing you've got to watch out for if

00:19:29,530 --> 00:19:33,220
you're using it is this order the order

00:19:32,020 --> 00:19:35,740
of the things that you're loading and

00:19:33,220 --> 00:19:37,299
the order of the callback the the

00:19:35,740 --> 00:19:39,850
objects you're getting back in your

00:19:37,299 --> 00:19:41,770
callback they have to be absolutely

00:19:39,850 --> 00:19:45,820
correct if this structure data was

00:19:41,770 --> 00:19:47,860
before base game over so just want to

00:19:45,820 --> 00:19:52,360
watch out for their next up browserify

00:19:47,860 --> 00:19:55,150
which is basically born out of node so I

00:19:52,360 --> 00:19:57,270
mean to check out that logo what a

00:19:55,150 --> 00:19:59,650
stinker

00:19:57,270 --> 00:20:03,130
horrible I don't know what they were

00:19:59,650 --> 00:20:04,360
thinking but and it's just nothing to do

00:20:03,130 --> 00:20:08,590
with notice it's not even you know

00:20:04,360 --> 00:20:10,660
anyway so yeah with commonjs

00:20:08,590 --> 00:20:13,360
that kind of someone saw the need to

00:20:10,660 --> 00:20:14,740
bring all that node loveliness into the

00:20:13,360 --> 00:20:17,200
browser and so they came up with

00:20:14,740 --> 00:20:20,200
browserify which basically allows you to

00:20:17,200 --> 00:20:21,910
take advantage of NPM and all the node

00:20:20,200 --> 00:20:25,780
modules that are out there in that

00:20:21,910 --> 00:20:28,270
ecosystem so pros for browserify as I

00:20:25,780 --> 00:20:30,970
said earlier simple syntax you do get

00:20:28,270 --> 00:20:32,440
some sensible errors it's got really

00:20:30,970 --> 00:20:37,630
really nice documentation if you can

00:20:32,440 --> 00:20:39,130
overlook the branding and with with the

00:20:37,630 --> 00:20:42,040
help of Babel if I which is like a a

00:20:39,130 --> 00:20:47,500
nice little plugin you can write in es6

00:20:42,040 --> 00:20:49,570
and it will spit out CJ s for you so

00:20:47,500 --> 00:20:51,250
yeah once more downside I suppose is you

00:20:49,570 --> 00:20:55,450
need is there's a build step but then I

00:20:51,250 --> 00:20:58,270
suppose lots of front end our Deb's and

00:20:55,450 --> 00:21:01,020
generally using data managers tough to

00:20:58,270 --> 00:21:02,980
do build step so so maybe not a big deal

00:21:01,020 --> 00:21:05,260
yeah if you want to output multiple

00:21:02,980 --> 00:21:08,740
bundles it's a bit more of a headache

00:21:05,260 --> 00:21:10,840
it only supports CJ s and as I said

00:21:08,740 --> 00:21:12,010
earlier it's synchronous it could be a

00:21:10,840 --> 00:21:20,190
downside but I've not had a problem with

00:21:12,010 --> 00:21:22,810
it and yeah just just to reiterate so

00:21:20,190 --> 00:21:24,340
yeah got cheese I suppose he only got

00:21:22,810 --> 00:21:27,910
 really is it and this is just a

00:21:24,340 --> 00:21:30,970
general node got you is that what an

00:21:27,910 --> 00:21:33,190
actual NPM module returns is like varies

00:21:30,970 --> 00:21:36,010
wildly so if you're using this nice

00:21:33,190 --> 00:21:37,570
handy ESX promised polyfill you've

00:21:36,010 --> 00:21:40,180
actually got a you know you've got to

00:21:37,570 --> 00:21:42,850
actually attach it to that particular

00:21:40,180 --> 00:21:44,200
property some things don't actually

00:21:42,850 --> 00:21:45,580
return anything at all which I suppose

00:21:44,200 --> 00:21:48,190
happens in other situations but I

00:21:45,580 --> 00:21:51,430
definitely had some some NPM weirdness

00:21:48,190 --> 00:21:53,830
or node module weirdness next up web

00:21:51,430 --> 00:21:56,860
pack which is by far the most powerful

00:21:53,830 --> 00:22:00,700
of all of them I would say it supports

00:21:56,860 --> 00:22:02,980
AMD and CJ s it's really easy to create

00:22:00,700 --> 00:22:04,600
multiple bundles which kind of

00:22:02,980 --> 00:22:07,750
ameliorates the problem of not being

00:22:04,600 --> 00:22:09,010
able to do lazy loading so well it's got

00:22:07,750 --> 00:22:10,809
a massive set of features so you can

00:22:09,010 --> 00:22:12,190
kind of process images in it

00:22:10,809 --> 00:22:14,139
do all sorts of fancy stuff

00:22:12,190 --> 00:22:17,830
documentation is really really good

00:22:14,139 --> 00:22:19,629
logos okay ships with its own server

00:22:17,830 --> 00:22:20,679
which is pretty nifty it's basically

00:22:19,629 --> 00:22:22,330
trying to take over the world really

00:22:20,679 --> 00:22:26,529
it's it's a completely comprehensive

00:22:22,330 --> 00:22:28,899
it's amazing and I sort of struggle for

00:22:26,529 --> 00:22:30,700
some cons I suppose it's quite quite a

00:22:28,899 --> 00:22:31,870
lot of fat to configure and there's a

00:22:30,700 --> 00:22:34,210
bit of a steep learning curve because

00:22:31,870 --> 00:22:35,769
you've got so much power and it's not

00:22:34,210 --> 00:22:38,769
very prescriptive browserify does a very

00:22:35,769 --> 00:22:41,200
sort of single purpose thing whereas

00:22:38,769 --> 00:22:45,690
webpack kind of yeah as I say tries to

00:22:41,200 --> 00:22:49,240
do too much and just quickly JSP M which

00:22:45,690 --> 00:22:51,249
is kind of a new clean on the block this

00:22:49,240 --> 00:22:52,210
has its own registry I'm going to leap

00:22:51,249 --> 00:22:54,369
to that point because it's a really

00:22:52,210 --> 00:22:58,210
interesting one so you can't just sort

00:22:54,369 --> 00:23:02,440
of say JSP m install jQuery or go and

00:22:58,210 --> 00:23:04,869
get it look it up and it supports all

00:23:02,440 --> 00:23:07,419
the different patterns there are but you

00:23:04,869 --> 00:23:09,999
have to pick one so that's one of the

00:23:07,419 --> 00:23:12,129
cons I'm included that you actually have

00:23:09,999 --> 00:23:14,350
to pick an API you can't mix them in web

00:23:12,129 --> 00:23:16,570
pack you can which is really interesting

00:23:14,350 --> 00:23:18,580
and the community is quite small and

00:23:16,570 --> 00:23:21,970
some of the plugins aren't very mature

00:23:18,580 --> 00:23:23,679
so really nice idea JSP m but I'm not

00:23:21,970 --> 00:23:26,470
sold on it personally as I say no

00:23:23,679 --> 00:23:29,919
opinion whatsoever so how do we actually

00:23:26,470 --> 00:23:32,830
implement this so I think the most

00:23:29,919 --> 00:23:34,119
important things to to assess first of

00:23:32,830 --> 00:23:37,149
the performance of the actual product

00:23:34,119 --> 00:23:38,950
you're making the maintainability and

00:23:37,149 --> 00:23:41,440
the scale so if it's a really small

00:23:38,950 --> 00:23:44,799
project then I suppose you know there's

00:23:41,440 --> 00:23:46,600
no reason to you know throw all the big

00:23:44,799 --> 00:23:48,129
tools at it you know you could just go

00:23:46,600 --> 00:23:50,769
for the most simple and straightforward

00:23:48,129 --> 00:23:52,240
scaffolded project that's not to say you

00:23:50,769 --> 00:23:53,769
shouldn't use modular jobs get and just

00:23:52,240 --> 00:23:55,600
saying that you might not need web pack

00:23:53,769 --> 00:23:58,419
or something as heavy as that but it

00:23:55,600 --> 00:24:01,720
depends entirely on yeah on what you

00:23:58,419 --> 00:24:02,980
want to achieve and the shape of your

00:24:01,720 --> 00:24:05,200
team I think is important as well okay

00:24:02,980 --> 00:24:06,340
if you're a freelancer then perhaps this

00:24:05,200 --> 00:24:07,419
doesn't matter so much if you're not

00:24:06,340 --> 00:24:09,450
gonna have to hand the code over to

00:24:07,419 --> 00:24:12,070
someone else perhaps as much so much but

00:24:09,450 --> 00:24:14,470
what I've found is every time we've made

00:24:12,070 --> 00:24:16,360
a new step forward or what feels like

00:24:14,470 --> 00:24:19,299
forward where we've adopted a new

00:24:16,360 --> 00:24:22,600
strategy to building web sites into

00:24:19,299 --> 00:24:24,520
making our code more maintainable that

00:24:22,600 --> 00:24:26,020
we've obviously got to educate the

00:24:24,520 --> 00:24:28,330
they're less experienced people in the

00:24:26,020 --> 00:24:29,890
team and some of the concepts in here

00:24:28,330 --> 00:24:31,900
and some of you know the products like

00:24:29,890 --> 00:24:33,429
require for example we start a great

00:24:31,900 --> 00:24:34,809
documentation they're going to take more

00:24:33,429 --> 00:24:37,780
of your time if you're the person who's

00:24:34,809 --> 00:24:39,790
in charge of educating other people yeah

00:24:37,780 --> 00:24:41,620
you're going to have to really put the

00:24:39,790 --> 00:24:42,990
put the hours in and put the effort in

00:24:41,620 --> 00:24:45,100
to make sure everyone's up to scratch

00:24:42,990 --> 00:24:46,270
and you're probably gonna have to sit

00:24:45,100 --> 00:24:49,720
with them occasionally and do some

00:24:46,270 --> 00:24:52,780
really grim debugging so yeah make make

00:24:49,720 --> 00:24:54,490
the time for the education the nature of

00:24:52,780 --> 00:24:57,700
the app itself so if you're using a

00:24:54,490 --> 00:24:59,950
framework like react or something then

00:24:57,700 --> 00:25:01,630
it kind of starts to D couple lots of

00:24:59,950 --> 00:25:03,580
the scripts and the views and things

00:25:01,630 --> 00:25:06,100
anyway and it's got an a it's got its

00:25:03,580 --> 00:25:12,760
own way of tackling I guess some of the

00:25:06,100 --> 00:25:15,010
goals which this subject does and yeah

00:25:12,760 --> 00:25:17,530
and if the application shares code on

00:25:15,010 --> 00:25:19,540
the server and on the client then it's

00:25:17,530 --> 00:25:21,850
maybe worth just picking commonjs

00:25:19,540 --> 00:25:23,500
approach because it's kind of designed

00:25:21,850 --> 00:25:26,590
for the server and can work in the

00:25:23,500 --> 00:25:28,380
browser and you know if the project is

00:25:26,590 --> 00:25:32,020
going to be around for a long long time

00:25:28,380 --> 00:25:34,360
could argue that you should use es6 not

00:25:32,020 --> 00:25:36,550
just for modular JavaScript but for for

00:25:34,360 --> 00:25:38,440
everything and shaking heads out there

00:25:36,550 --> 00:25:39,940
this time maybe not

00:25:38,440 --> 00:25:41,950
but yeah you know it's if you want a

00:25:39,940 --> 00:25:43,660
future proof it then that's the

00:25:41,950 --> 00:25:45,640
direction that everyone is seemingly

00:25:43,660 --> 00:25:47,830
going in I though I appreciate this an

00:25:45,640 --> 00:25:49,660
effort that goes with that because you

00:25:47,830 --> 00:25:51,850
have to transpile down to something that

00:25:49,660 --> 00:25:54,010
browsers can understand so here's just a

00:25:51,850 --> 00:25:56,500
quick diagram a simple diagram of how

00:25:54,010 --> 00:25:58,900
you might manage a site how you might be

00:25:56,500 --> 00:26:01,600
bundling it have a bunch of things which

00:25:58,900 --> 00:26:03,820
go into two different modules which are

00:26:01,600 --> 00:26:05,800
then only rendered on the home page and

00:26:03,820 --> 00:26:08,620
you can sort of decide on the

00:26:05,800 --> 00:26:11,470
architecture yourself as I say the

00:26:08,620 --> 00:26:15,010
easiest thing I found for doing this is

00:26:11,470 --> 00:26:19,200
either require or webpack browserify

00:26:15,010 --> 00:26:22,110
does do it but it's a bit more stuff and

00:26:19,200 --> 00:26:24,700
the tools that you can use to actually

00:26:22,110 --> 00:26:26,230
compile and concatenate all these things

00:26:24,700 --> 00:26:28,960
together and they do need to compile

00:26:26,230 --> 00:26:30,280
because even with CGAs you need

00:26:28,960 --> 00:26:33,160
something which is going to tell the

00:26:30,280 --> 00:26:34,900
browser how to actually work with it so

00:26:33,160 --> 00:26:36,999
gulp and grunt are the two obvious task

00:26:34,900 --> 00:26:40,269
managers but you can

00:26:36,999 --> 00:26:42,929
you want to use some of your colleagues

00:26:40,269 --> 00:26:47,829
the server-side applications I

00:26:42,929 --> 00:26:48,579
personally wouldn't no opinion so the

00:26:47,829 --> 00:26:51,219
way we do it

00:26:48,579 --> 00:26:55,329
zone is all modules are discrete pieces

00:26:51,219 --> 00:26:58,989
of functionality they they are sometimes

00:26:55,329 --> 00:27:01,419
a sort of trackable feature you know in

00:26:58,989 --> 00:27:02,949
a project management sense sometimes

00:27:01,419 --> 00:27:05,379
there's more than one module that

00:27:02,949 --> 00:27:08,289
belongs to that particular feature in

00:27:05,379 --> 00:27:09,909
the browser that is they always run

00:27:08,289 --> 00:27:12,099
based on the presence of a data

00:27:09,909 --> 00:27:15,489
attribute so we kind of don't use CSS

00:27:12,099 --> 00:27:18,159
classes or anything like that we keep it

00:27:15,489 --> 00:27:21,669
just to using patron tributes for

00:27:18,159 --> 00:27:24,009
decoupling and we use source Maps

00:27:21,669 --> 00:27:25,779
so with gulp and grunt you can create a

00:27:24,009 --> 00:27:27,729
map of all the modules that you were

00:27:25,779 --> 00:27:30,069
writing in so that when it actually

00:27:27,729 --> 00:27:33,399
renders one bundle or one big file

00:27:30,069 --> 00:27:34,299
you still know what you're looking at if

00:27:33,399 --> 00:27:35,889
there's a bit more time I could have

00:27:34,299 --> 00:27:37,209
shown a nice little screen cup of that

00:27:35,889 --> 00:27:40,029
but you just have to use your

00:27:37,209 --> 00:27:41,079
imagination sorry and headaches I mean

00:27:40,029 --> 00:27:44,969
of course with these things that were

00:27:41,079 --> 00:27:47,709
always headache so lots of times I've

00:27:44,969 --> 00:27:49,839
we've had problems incorporating

00:27:47,709 --> 00:27:51,369
third-party scripts so you might need a

00:27:49,839 --> 00:27:53,829
shame or you might need to actually wrap

00:27:51,369 --> 00:27:55,719
it yourself in that UMD wrapper or some

00:27:53,829 --> 00:27:57,519
something to make it work properly

00:27:55,719 --> 00:27:58,989
because not everything that's published

00:27:57,519 --> 00:28:01,569
on the internet for Lena works with

00:27:58,989 --> 00:28:03,549
everything else and keeping a large

00:28:01,569 --> 00:28:05,919
project organized it takes a bit of

00:28:03,549 --> 00:28:07,539
effort so you know consider things like

00:28:05,919 --> 00:28:11,499
naming conventions and how you structure

00:28:07,539 --> 00:28:14,709
your folders and yeah one last little

00:28:11,499 --> 00:28:16,629
tip handling data so each module is

00:28:14,709 --> 00:28:18,599
obviously encapsulated so you need to

00:28:16,629 --> 00:28:22,119
think about how you're going to share

00:28:18,599 --> 00:28:25,419
things that happen user actions and we

00:28:22,119 --> 00:28:27,249
use pub/sub which is a way of listening

00:28:25,419 --> 00:28:30,519
for a particular event you can use

00:28:27,249 --> 00:28:32,619
jQuery to go to and we use promises face

00:28:30,519 --> 00:28:34,599
and kind of stuff and we completely

00:28:32,619 --> 00:28:38,259
avoid using callbacks as much as

00:28:34,599 --> 00:28:40,239
possible so this is our stack so we

00:28:38,259 --> 00:28:44,669
write in es6 as much as possible we use

00:28:40,239 --> 00:28:48,369
gulp to manage most of our tasks we use

00:28:44,669 --> 00:28:50,590
browser fri / babel defi to convert from

00:28:48,369 --> 00:28:55,269
es6 to common j

00:28:50,590 --> 00:28:56,649
and it works in the browser and this is

00:28:55,269 --> 00:29:00,220
what we're kind of moving to so we're

00:28:56,649 --> 00:29:02,649
going to adopt web pack and I'm sorry

00:29:00,220 --> 00:29:06,899
that was almost half an hour big subject

00:29:02,649 --> 00:29:06,899

YouTube URL: https://www.youtube.com/watch?v=aAn9CQGZuz8


