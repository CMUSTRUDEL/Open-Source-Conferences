Title: Testing Analytics At Buzzfeed - Front End London - January 18
Publication date: 2018-02-10
Playlist: Front-End London
Description: 
	Ian Feather 

Testing without assertions 

Analytics is a crucial feedback loop to BuzzFeed content creators but actually testing the system is working is a hard problem. End to end tests are notoriously flakey and analytics are invisible. So, we deleted all the assertions in our end to end tests. You'll never guess what happened next.

_______________________________________________________________

Pusher is a hosted service with APIs, developer tools and open source libraries that greatly simplify integrating real-time functionality into web and mobile applications. 

Pusher will automatically scale when required, removing all the pain of setting up and maintaining a secure, real-time infrastructure. 

Pusher is already trusted to do so by thousands of developers and companies like GitHub, MailChimp, the Financial Times, Buffer and many more. 

Getting started takes just a few seconds: simply go to pusher.com and create a free account. Happy hacking!
Captions: 
	00:00:00,000 --> 00:00:04,890
thanks everyone okay so yeah I work at

00:00:03,000 --> 00:00:06,450
BuzzFeed I want to be this person when I

00:00:04,890 --> 00:00:09,150
grow up this would be amazing

00:00:06,450 --> 00:00:11,190
great socks great life but for the

00:00:09,150 --> 00:00:13,349
moment you know I'm just working as a

00:00:11,190 --> 00:00:17,010
developer on the front end

00:00:13,349 --> 00:00:18,000
infrastructure team in London and one of

00:00:17,010 --> 00:00:19,740
the tasks I've been in about two years

00:00:18,000 --> 00:00:21,750
and one of the tasks that we took on in

00:00:19,740 --> 00:00:24,869
that time was figuring out how to test

00:00:21,750 --> 00:00:28,160
our analytic systems and so a disclaimer

00:00:24,869 --> 00:00:30,240
this is a pretty specific topic but

00:00:28,160 --> 00:00:32,369
really this is kind of a case study of

00:00:30,240 --> 00:00:34,380
approaching quite tricky challenging

00:00:32,369 --> 00:00:36,630
problem that like pushed me out of my

00:00:34,380 --> 00:00:38,100
comfort zone and then we can all kind of

00:00:36,630 --> 00:00:39,570
relate to that with like things that we

00:00:38,100 --> 00:00:42,510
work on all that hopefully they would

00:00:39,570 --> 00:00:44,610
get to work on now and again so it

00:00:42,510 --> 00:00:47,280
should be pretty useful stuff so with

00:00:44,610 --> 00:00:50,760
this we're going to cover like why and

00:00:47,280 --> 00:00:53,520
how we use analytics suppose speed how

00:00:50,760 --> 00:00:55,440
we used to test analytics like this

00:00:53,520 --> 00:00:56,610
moment of intense head scratching as we

00:00:55,440 --> 00:00:58,170
figured out that that wasn't very good

00:00:56,610 --> 00:01:01,559
and we should figure out to do better

00:00:58,170 --> 00:01:04,320
and then now we how we actually do test

00:01:01,559 --> 00:01:09,020
analytics all right

00:01:04,320 --> 00:01:11,400
let's kick it off so why anyway well so

00:01:09,020 --> 00:01:15,030
BuzzFeed has been around for 12 years

00:01:11,400 --> 00:01:17,070
now nearly a teenager and like they're

00:01:15,030 --> 00:01:18,990
convinced that they were successful and

00:01:17,070 --> 00:01:21,540
survived through this like 12 years

00:01:18,990 --> 00:01:24,810
because they understood their audience

00:01:21,540 --> 00:01:26,070
better than many other and publishers

00:01:24,810 --> 00:01:29,850
many of whom were coming from a print

00:01:26,070 --> 00:01:32,850
background and so we're really into this

00:01:29,850 --> 00:01:34,979
this feedback cycle so up on the Left we

00:01:32,850 --> 00:01:36,570
have our editors who are creating

00:01:34,979 --> 00:01:39,090
they're the people who are really the

00:01:36,570 --> 00:01:41,250
true talents of BuzzFeed and they create

00:01:39,090 --> 00:01:43,439
inside the CMS we published it to our

00:01:41,250 --> 00:01:45,030
users and then we collect that store it

00:01:43,439 --> 00:01:48,360
and then we can put it on nice i pads

00:01:45,030 --> 00:01:50,369
and stuff but like the bit that we

00:01:48,360 --> 00:01:51,780
really care about is like the bit in

00:01:50,369 --> 00:01:55,380
between they're like the learning part

00:01:51,780 --> 00:01:59,520
and how we get our analytics into the

00:01:55,380 --> 00:02:01,860
CMS we're like we can meet the creative

00:01:59,520 --> 00:02:04,170
talent with our insights about the

00:02:01,860 --> 00:02:06,149
audience and then create even better

00:02:04,170 --> 00:02:08,520
content there helps to engage more helps

00:02:06,149 --> 00:02:09,140
to go viral or like kind of stuff all

00:02:08,520 --> 00:02:12,030
that good stuff

00:02:09,140 --> 00:02:13,710
so another thing that I want to just

00:02:12,030 --> 00:02:15,990
before I go any

00:02:13,710 --> 00:02:18,090
is to explain this word pixie dust

00:02:15,990 --> 00:02:21,150
because I'm gonna use that a lot during

00:02:18,090 --> 00:02:23,130
this talk and pixie dust is our

00:02:21,150 --> 00:02:24,990
analytics pipeline it's kind of

00:02:23,130 --> 00:02:27,240
sprinkled all over our infrastructure

00:02:24,990 --> 00:02:29,910
and all our websites and mobile apps and

00:02:27,240 --> 00:02:31,650
all that kind of stuff the simplest

00:02:29,910 --> 00:02:33,270
level is just a one by one gift with a

00:02:31,650 --> 00:02:35,730
bunch of gory strings on the end and

00:02:33,270 --> 00:02:38,010
then the fighting more complex level

00:02:35,730 --> 00:02:40,230
there's all sorts of things happening

00:02:38,010 --> 00:02:43,410
behind the scenes all right

00:02:40,230 --> 00:02:44,760
so how we used to test analytics with

00:02:43,410 --> 00:02:48,510
end-to-end tests this kind of whole

00:02:44,760 --> 00:02:50,040
thing is based on that and well the fact

00:02:48,510 --> 00:02:51,510
that we even have to have like the types

00:02:50,040 --> 00:02:55,890
of like how we used to means that there

00:02:51,510 --> 00:02:57,600
was an outage at some point so this like

00:02:55,890 --> 00:02:58,560
with all our outages on post-mortems the

00:02:57,600 --> 00:03:01,440
first thing we do is we look at

00:02:58,560 --> 00:03:03,870
timelines and it looks really useful we

00:03:01,440 --> 00:03:05,010
still have all these saved and I went

00:03:03,870 --> 00:03:07,710
back and looked to them and for this

00:03:05,010 --> 00:03:09,270
talk and we could figure out like all

00:03:07,710 --> 00:03:11,760
the stuff that I bought from my memory

00:03:09,270 --> 00:03:13,350
when we finished this project and so

00:03:11,760 --> 00:03:16,440
this really happened it started in May

00:03:13,350 --> 00:03:18,030
June 2016 quite a few like tiny outages

00:03:16,440 --> 00:03:20,520
of analytics so maybe we stopped

00:03:18,030 --> 00:03:22,980
tracking for an hour maybe like one

00:03:20,520 --> 00:03:25,740
small event that we want to publish and

00:03:22,980 --> 00:03:27,750
start creating back by themselves they

00:03:25,740 --> 00:03:30,140
weren't a big deal but collectively kind

00:03:27,750 --> 00:03:32,460
of either to like people thinking that

00:03:30,140 --> 00:03:35,250
we weren't really on top of this stuff

00:03:32,460 --> 00:03:37,050
that a inka system was a bit fragile and

00:03:35,250 --> 00:03:39,780
people were just bit frustrated with it

00:03:37,050 --> 00:03:42,480
and then in july we had a bigger outage

00:03:39,780 --> 00:03:45,090
and this was a two day outage where

00:03:42,480 --> 00:03:47,570
safari wasn't sending back page view

00:03:45,090 --> 00:03:50,610
events to either google analytics or

00:03:47,570 --> 00:03:53,010
picked adjust and this was irrecoverable

00:03:50,610 --> 00:03:56,340
it was a big deal people are pretty

00:03:53,010 --> 00:03:59,490
upset about it and surely after this we

00:03:56,340 --> 00:04:01,890
were told to fix it so what actually

00:03:59,490 --> 00:04:04,560
happened here was we used a we used to

00:04:01,890 --> 00:04:07,140
use a third party called so stir and

00:04:04,560 --> 00:04:10,770
their impulse library widget which they

00:04:07,140 --> 00:04:14,040
tracks the real user performance metrics

00:04:10,770 --> 00:04:15,780
of how really our users and beacons it

00:04:14,040 --> 00:04:16,799
back and they released a an update for

00:04:15,780 --> 00:04:19,980
their script which we bring in

00:04:16,799 --> 00:04:21,359
dynamically and that was one half of it

00:04:19,980 --> 00:04:23,220
they released a burg the other half was

00:04:21,359 --> 00:04:25,800
we had some really bad code around eric

00:04:23,220 --> 00:04:27,660
caching and like when we caught the

00:04:25,800 --> 00:04:30,270
error we just bailed on all unwitting

00:04:27,660 --> 00:04:35,610
which is in retrospect quite stupid but

00:04:30,270 --> 00:04:38,100
you know we fix that but yeah it was a

00:04:35,610 --> 00:04:42,210
big issue so we go away and fix a we're

00:04:38,100 --> 00:04:45,480
told and I wanted to explain how we

00:04:42,210 --> 00:04:46,890
actually used to test it anyway so when

00:04:45,480 --> 00:04:49,230
you go to our site when you request the

00:04:46,890 --> 00:04:51,570
page we load like the HTML we load CSS

00:04:49,230 --> 00:04:54,020
and without the JavaScript inside that

00:04:51,570 --> 00:04:56,130
javascript bundle we initialize our

00:04:54,020 --> 00:04:58,560
application code and somewhere in the

00:04:56,130 --> 00:05:00,990
application code we make a call out to

00:04:58,560 --> 00:05:02,550
this to like track we say

00:05:00,990 --> 00:05:04,710
--trackpageview maybe when we load the

00:05:02,550 --> 00:05:07,320
page when it's absolutely loaded and

00:05:04,710 --> 00:05:09,660
that track goes to something called BF a

00:05:07,320 --> 00:05:13,050
stands for BF analytics and this is kind

00:05:09,660 --> 00:05:15,540
of our abstraction on top of a bunch of

00:05:13,050 --> 00:05:18,510
other analytics libraries so dual

00:05:15,540 --> 00:05:20,580
analytics pixie-dust Quantcast comScore

00:05:18,510 --> 00:05:23,130
many of this and in BF a kind of

00:05:20,580 --> 00:05:25,440
describes how one event should map to

00:05:23,130 --> 00:05:28,520
many events and so the idea is then you

00:05:25,440 --> 00:05:31,950
track in one place and multiple vendors

00:05:28,520 --> 00:05:34,980
receive your data this is like a really

00:05:31,950 --> 00:05:36,180
annoying abstraction VFA but one that we

00:05:34,980 --> 00:05:38,490
don't really have much of a better

00:05:36,180 --> 00:05:40,110
answer for the moment when I was back at

00:05:38,490 --> 00:05:42,240
Lonely Planet we wrote the same thing we

00:05:40,110 --> 00:05:45,690
have it at BuzzFeed I imagine some other

00:05:42,240 --> 00:05:47,850
people have something similar something

00:05:45,690 --> 00:05:50,520
like segment IO and I'm always looking

00:05:47,850 --> 00:05:51,750
for a better replacement for this so if

00:05:50,520 --> 00:05:53,490
anyone has a better idea of how this

00:05:51,750 --> 00:05:56,250
little though works I'm super interested

00:05:53,490 --> 00:05:57,930
but this is tricky to test anyway that's

00:05:56,250 --> 00:05:59,130
going back to the virtual point of this

00:05:57,930 --> 00:06:02,310
rather than we just trying to find out

00:05:59,130 --> 00:06:03,710
how you do this so how do we test on

00:06:02,310 --> 00:06:07,440
only things right with end-to-end tests

00:06:03,710 --> 00:06:09,660
so typically in a end-to-end feature you

00:06:07,440 --> 00:06:11,370
let's say like we want to log in you

00:06:09,660 --> 00:06:14,970
would go to their welcome go to the page

00:06:11,370 --> 00:06:17,070
go to the home page maybe click on the

00:06:14,970 --> 00:06:19,470
log in burn and assert that you see a

00:06:17,070 --> 00:06:22,860
form right that's like kind of standard

00:06:19,470 --> 00:06:24,570
and reasonably easy but there's

00:06:22,860 --> 00:06:26,700
something to assert on something visual

00:06:24,570 --> 00:06:28,740
that happens there's analytics we don't

00:06:26,700 --> 00:06:30,780
really there's nothing to see like it

00:06:28,740 --> 00:06:34,620
just goes off into the ether and it's a

00:06:30,780 --> 00:06:36,419
network request but that's that's it so

00:06:34,620 --> 00:06:38,910
the way that we had solved this prior to

00:06:36,419 --> 00:06:40,710
this project was we had built something

00:06:38,910 --> 00:06:43,199
into PFA which

00:06:40,710 --> 00:06:46,500
moved those Network requests into

00:06:43,199 --> 00:06:49,169
session storage as well so when we made

00:06:46,500 --> 00:06:51,020
a request to like fetch pictures as fee

00:06:49,169 --> 00:06:53,310
with a type of page view a source of web

00:06:51,020 --> 00:06:54,570
in session story if you have something

00:06:53,310 --> 00:06:56,039
that looks like this which kind of

00:06:54,570 --> 00:06:59,430
described those requests that had gone

00:06:56,039 --> 00:07:02,430
out and then we use our tests to figure

00:06:59,430 --> 00:07:03,960
out if they were correct it's not it's

00:07:02,430 --> 00:07:07,440
not ideal we're already kind of bending

00:07:03,960 --> 00:07:09,210
how end-to-end test should work looked a

00:07:07,440 --> 00:07:11,910
bit like this we put we open a pull

00:07:09,210 --> 00:07:13,350
request we start this test it goes to

00:07:11,910 --> 00:07:15,270
source labs and we spin up a couple of

00:07:13,350 --> 00:07:17,850
different browsers we go to three or

00:07:15,270 --> 00:07:19,470
four pages we share something we look

00:07:17,850 --> 00:07:21,510
inside session storage and assert that

00:07:19,470 --> 00:07:24,620
all these values are here and then we

00:07:21,510 --> 00:07:27,449
give a green or a red the far end and

00:07:24,620 --> 00:07:30,539
because we're because we're bending how

00:07:27,449 --> 00:07:33,900
n20 should work the tests were super

00:07:30,539 --> 00:07:36,960
flaky and I'm sure all of you

00:07:33,900 --> 00:07:38,610
experienced flaky tests like to like be

00:07:36,960 --> 00:07:40,320
specific about what this means like we

00:07:38,610 --> 00:07:43,139
talked about non deterministic test so

00:07:40,320 --> 00:07:45,570
if I run the same power in ten tests ten

00:07:43,139 --> 00:07:48,720
times they should be 10 fails or 10

00:07:45,570 --> 00:07:50,400
passes and that's that's the ideal case

00:07:48,720 --> 00:07:53,669
and in reality we've all been in the

00:07:50,400 --> 00:07:55,860
situation where 7 + 3 5 + 5 + 5 whatever

00:07:53,669 --> 00:07:57,870
blah blah and this is actually really

00:07:55,860 --> 00:08:00,900
bad this is really bad problem because

00:07:57,870 --> 00:08:02,310
what typically tends to happen is well

00:08:00,900 --> 00:08:04,770
first people start to blame the tests

00:08:02,310 --> 00:08:08,250
and they get angry and frustrated when

00:08:04,770 --> 00:08:10,590
things timeout and secondly they disable

00:08:08,250 --> 00:08:12,720
the tests and then totally they don't

00:08:10,590 --> 00:08:14,430
put them back on right so then six weeks

00:08:12,720 --> 00:08:16,139
later you check and like oh the test has

00:08:14,430 --> 00:08:20,460
been off for like six weeks that was

00:08:16,139 --> 00:08:22,860
lucky and I don't you know like our hold

00:08:20,460 --> 00:08:24,300
of my hands but yeah this is a bad

00:08:22,860 --> 00:08:26,970
problem because we were like bending

00:08:24,300 --> 00:08:28,349
these tests to be something they weren't

00:08:26,970 --> 00:08:30,000
and we were running interest more often

00:08:28,349 --> 00:08:32,339
and it was harder to make make this good

00:08:30,000 --> 00:08:35,909
+ anyway bugs still reached prediction

00:08:32,339 --> 00:08:37,020
right we'd already had these outages so

00:08:35,909 --> 00:08:38,490
it's not that these were perfect when we

00:08:37,020 --> 00:08:40,469
were catching them they weren't really

00:08:38,490 --> 00:08:41,969
testing that a network request went and

00:08:40,469 --> 00:08:45,630
left the page they just tested that

00:08:41,969 --> 00:08:47,700
something when is it session storage and

00:08:45,630 --> 00:08:49,350
bugs could still appear in production

00:08:47,700 --> 00:08:51,360
because we're only testing when we put

00:08:49,350 --> 00:08:54,600
them into prod we're not testing that

00:08:51,360 --> 00:08:58,100
like so stirrer breaks and the party

00:08:54,600 --> 00:09:01,410
javascript which then changes prediction

00:08:58,100 --> 00:09:03,990
so those are the was that was the state

00:09:01,410 --> 00:09:07,350
at the time and the problems and then

00:09:03,990 --> 00:09:10,430
the next part was disappear in this

00:09:07,350 --> 00:09:12,750
section I think probably took it

00:09:10,430 --> 00:09:15,810
conservatively say three months of just

00:09:12,750 --> 00:09:17,370
they working different things but having

00:09:15,810 --> 00:09:18,690
this in my head all the time there was

00:09:17,370 --> 00:09:21,690
two was working on this but we're kind

00:09:18,690 --> 00:09:24,690
of juggling a few things so to be

00:09:21,690 --> 00:09:27,120
specific about what we wanted we wanted

00:09:24,690 --> 00:09:29,399
to validate the core metrics core

00:09:27,120 --> 00:09:31,529
Analytics event is captured when someone

00:09:29,399 --> 00:09:33,810
goes to a page so for us that's page

00:09:31,529 --> 00:09:36,120
views page exits so we can marry those

00:09:33,810 --> 00:09:37,920
up and share events there's a few of the

00:09:36,120 --> 00:09:39,779
things that we track but we don't really

00:09:37,920 --> 00:09:41,519
care of those too much those the three

00:09:39,779 --> 00:09:43,410
big ones we want to check that the

00:09:41,519 --> 00:09:44,759
correct value is a cent with those it's

00:09:43,410 --> 00:09:46,680
not good enough that we just say there's

00:09:44,759 --> 00:09:48,899
a page view that has to be like URL with

00:09:46,680 --> 00:09:50,449
it and bits and pieces and to help her

00:09:48,899 --> 00:09:52,680
just like marry them up at the far end

00:09:50,449 --> 00:09:54,600
we to make sure the requests are

00:09:52,680 --> 00:09:56,819
actually made not just in session

00:09:54,600 --> 00:09:59,069
storage and that we only send them once

00:09:56,819 --> 00:10:00,389
because that was a getting duplicate

00:09:59,069 --> 00:10:01,920
events through is a problem we've had a

00:10:00,389 --> 00:10:03,870
few times and that can be as bad as

00:10:01,920 --> 00:10:06,389
having non sometimes takes a long time

00:10:03,870 --> 00:10:08,100
to figure those things out to tube them

00:10:06,389 --> 00:10:11,459
and there's a lot of effort and do you

00:10:08,100 --> 00:10:15,410
really care too much so we wanted and

00:10:11,459 --> 00:10:18,360
our requirements on the other side where

00:10:15,410 --> 00:10:19,740
this should be cross browser the big

00:10:18,360 --> 00:10:23,790
outage was in Safari but it could easily

00:10:19,740 --> 00:10:27,000
been in chrome non flaky tests would be

00:10:23,790 --> 00:10:29,850
ideal so the good table stakes baseline

00:10:27,000 --> 00:10:32,490
to start with we want to prevent bugs

00:10:29,850 --> 00:10:34,439
reaching prediction I wanna catch bug as

00:10:32,490 --> 00:10:36,269
they appear in production and we want to

00:10:34,439 --> 00:10:39,000
be notified immediately when any of

00:10:36,269 --> 00:10:41,040
these books occur which like seems an

00:10:39,000 --> 00:10:44,459
aggressive like number of requirements

00:10:41,040 --> 00:10:45,829
but yeah it's not too much to ask or

00:10:44,459 --> 00:10:48,899
nothing

00:10:45,829 --> 00:10:50,220
so we listed out some options like this

00:10:48,899 --> 00:10:52,079
was kind of spitballing we didn't really

00:10:50,220 --> 00:10:53,430
know like so you can have some selenium

00:10:52,079 --> 00:10:55,410
test which actually test the network

00:10:53,430 --> 00:10:57,240
requests go out there are certain

00:10:55,410 --> 00:10:58,880
plugins for things like webdriver i/o

00:10:57,240 --> 00:11:01,889
which we were using which can do that

00:10:58,880 --> 00:11:04,050
but they have to initialize before you

00:11:01,889 --> 00:11:05,760
send the requests and you know be the

00:11:04,050 --> 00:11:07,550
race conditions and doesn't help

00:11:05,760 --> 00:11:08,570
flakiness like just

00:11:07,550 --> 00:11:10,399
laughs that doesn't and we tried for

00:11:08,570 --> 00:11:12,589
ages there was no way to really made

00:11:10,399 --> 00:11:14,269
them to turn mystic we thought about

00:11:12,589 --> 00:11:15,470
using service workers to intercept a

00:11:14,269 --> 00:11:17,500
request because that actually is

00:11:15,470 --> 00:11:19,940
proxying real request that gets an out

00:11:17,500 --> 00:11:20,779
that was also kind of flaky and a bit

00:11:19,940 --> 00:11:22,490
difficult to handle

00:11:20,779 --> 00:11:24,170
although we end up turning that into a

00:11:22,490 --> 00:11:26,000
developer tool which you can run and

00:11:24,170 --> 00:11:28,370
make sure that your page is sending

00:11:26,000 --> 00:11:31,209
requests currently we thought about just

00:11:28,370 --> 00:11:34,130
enforcing you have to use QA in stage

00:11:31,209 --> 00:11:35,720
not really very scalable plus the

00:11:34,130 --> 00:11:38,089
production traffic from real users is

00:11:35,720 --> 00:11:40,339
very different to our stage traffic that

00:11:38,089 --> 00:11:42,380
didn't really fly plus stage 4 is isn't

00:11:40,339 --> 00:11:44,540
really an explicit path on the road to

00:11:42,380 --> 00:11:46,550
production so we there's no gate for us

00:11:44,540 --> 00:11:49,640
to like pirates that i promote stage to

00:11:46,550 --> 00:11:50,959
prod he can just skip it and we thought

00:11:49,640 --> 00:11:52,880
about it he is in production monitoring

00:11:50,959 --> 00:11:55,190
that would be fine we could catch things

00:11:52,880 --> 00:11:58,399
pretty quickly we do have some of that

00:11:55,190 --> 00:12:01,940
already in place every four hours we run

00:11:58,399 --> 00:12:03,709
a script which like analyzes the number

00:12:01,940 --> 00:12:04,880
of events that went into GA and the

00:12:03,709 --> 00:12:07,190
number of events that went into Pixy

00:12:04,880 --> 00:12:09,560
dust and make sure they within 2 percent

00:12:07,190 --> 00:12:11,209
3 percent threshold and so we can notify

00:12:09,560 --> 00:12:16,100
that before hours is a bit too slow for

00:12:11,209 --> 00:12:18,050
us in this kind of scenario and to speed

00:12:16,100 --> 00:12:19,640
that up we would have to take into

00:12:18,050 --> 00:12:21,260
account trends because we have quite

00:12:19,640 --> 00:12:24,079
spiky traffic if a post is very viral

00:12:21,260 --> 00:12:28,040
we'd had to pick a page we had stable

00:12:24,079 --> 00:12:31,970
traffic not know impossible maybe were

00:12:28,040 --> 00:12:34,730
pretty difficult alright so the most

00:12:31,970 --> 00:12:35,990
important slide those are booked by

00:12:34,730 --> 00:12:37,640
george pólya called how to solve

00:12:35,990 --> 00:12:39,529
anything which I bought but didn't even

00:12:37,640 --> 00:12:42,110
read because it was I was too focused

00:12:39,529 --> 00:12:43,399
missing but the first one I think is one

00:12:42,110 --> 00:12:45,350
of most important like just budget

00:12:43,399 --> 00:12:47,690
colleagues and testing someone has had

00:12:45,350 --> 00:12:49,550
this problem before or someone has been

00:12:47,690 --> 00:12:52,160
involved in with somebody who you know

00:12:49,550 --> 00:12:53,930
sold some ideas and I asked

00:12:52,160 --> 00:12:54,890
well I asked literally everybody talking

00:12:53,930 --> 00:12:58,250
Twitter when two meets like this

00:12:54,890 --> 00:13:00,020
automatically you cam to see if you have

00:12:58,250 --> 00:13:02,060
like one little spark of information

00:13:00,020 --> 00:13:03,410
which triggers something cuz you're

00:13:02,060 --> 00:13:04,730
letting all these thoughts percolate in

00:13:03,410 --> 00:13:06,500
the back of your head all the time and

00:13:04,730 --> 00:13:11,120
sometimes you can just take one or two

00:13:06,500 --> 00:13:11,690
words work on something else that's we

00:13:11,120 --> 00:13:13,220
do that a lot

00:13:11,690 --> 00:13:15,680
mostly because we just didn't know what

00:13:13,220 --> 00:13:16,790
to do half the time with this so we

00:13:15,680 --> 00:13:19,220
would go and work in different projects

00:13:16,790 --> 00:13:19,760
come back to it I took a lot of long

00:13:19,220 --> 00:13:21,470
showers

00:13:19,760 --> 00:13:24,590
basically just get some styling

00:13:21,470 --> 00:13:26,300
step away from your staff go to float

00:13:24,590 --> 00:13:28,250
works in Vauxhall and have an isolation

00:13:26,300 --> 00:13:31,490
tank even if it doesn't work he'll feel

00:13:28,250 --> 00:13:33,410
good afterwards and then steal ideas

00:13:31,490 --> 00:13:35,990
every single opportunity and that's

00:13:33,410 --> 00:13:38,840
actually kind of what we did yeah which

00:13:35,990 --> 00:13:40,730
isn't a great Tory but at the time there

00:13:38,840 --> 00:13:43,850
was three of us in London office and we

00:13:40,730 --> 00:13:45,260
were having for the fourth and I was

00:13:43,850 --> 00:13:47,750
interviewing a guy called mark who now

00:13:45,260 --> 00:13:49,850
works this and I took the opportunity

00:13:47,750 --> 00:13:53,600
just to ask him how he does end-to-end

00:13:49,850 --> 00:13:55,160
testing and it turns out they do

00:13:53,600 --> 00:13:58,340
something really good he worked at halo

00:13:55,160 --> 00:14:00,860
at the time and they have a real NOAA

00:13:58,340 --> 00:14:02,780
yeah a real Island but they but he's

00:14:00,860 --> 00:14:04,460
uninhabited and they put fake cars on it

00:14:02,780 --> 00:14:06,590
and fake people and then we have robots

00:14:04,460 --> 00:14:09,050
going around and they they realize if

00:14:06,590 --> 00:14:10,640
none of those fairs go up like no if the

00:14:09,050 --> 00:14:12,170
fair's suddenly get like 300 X or

00:14:10,640 --> 00:14:14,900
Affairs stopped happening that

00:14:12,170 --> 00:14:16,940
something's probably broken and I was a

00:14:14,900 --> 00:14:19,280
aah huh that's interesting so you're

00:14:16,940 --> 00:14:22,490
kind of production traffic but

00:14:19,280 --> 00:14:23,840
synthetically managed and it got me

00:14:22,490 --> 00:14:27,800
thinking and then later we could do some

00:14:23,840 --> 00:14:35,750
like that and then we hired him like not

00:14:27,800 --> 00:14:38,690
related so how it has how we now attest

00:14:35,750 --> 00:14:41,270
I'm with is so when we started thinking

00:14:38,690 --> 00:14:44,210
about ok what if what if we just think

00:14:41,270 --> 00:14:46,160
about production we realized that we

00:14:44,210 --> 00:14:48,170
can't do this pull request thing anymore

00:14:46,160 --> 00:14:49,370
like it would still be really nice to do

00:14:48,170 --> 00:14:51,250
on the polar crest but we couldn't find

00:14:49,370 --> 00:14:53,840
a way to make a test non flaky and

00:14:51,250 --> 00:14:54,950
because bugs will happen in prod anyway

00:14:53,840 --> 00:14:56,930
we're going to have to solve that

00:14:54,950 --> 00:14:58,550
problem so let's solve that problem and

00:14:56,930 --> 00:15:02,240
maybe we can figure out later how to do

00:14:58,550 --> 00:15:06,710
that the CI problem and so we we got rid

00:15:02,240 --> 00:15:09,350
of this so I'll go back a few and think

00:15:06,710 --> 00:15:14,090
about like what actually is pixie list

00:15:09,350 --> 00:15:16,820
let's go into a bit more detail so so

00:15:14,090 --> 00:15:18,350
when the request leaves the browser it

00:15:16,820 --> 00:15:20,420
goes to the textures API which is inside

00:15:18,350 --> 00:15:22,490
our infrastructure this stuff isn't

00:15:20,420 --> 00:15:26,390
super important but it's just worth

00:15:22,490 --> 00:15:28,310
painting the picture and then the Pyxis

00:15:26,390 --> 00:15:31,310
api passes that off immediately to

00:15:28,310 --> 00:15:33,740
something called NS key so like rabbitmq

00:15:31,310 --> 00:15:35,480
or Kafka or whatever and basically this

00:15:33,740 --> 00:15:37,250
is if you don't know about cue

00:15:35,480 --> 00:15:39,829
like that's okay I don't really either

00:15:37,250 --> 00:15:41,899
but it's something like BFA right it's

00:15:39,829 --> 00:15:44,600
the perb step so you say I've got this

00:15:41,899 --> 00:15:46,339
event from pixie dust if anyone else

00:15:44,600 --> 00:15:47,870
wants it you can have it and you can

00:15:46,339 --> 00:15:49,760
subscribe to those events and I'll pass

00:15:47,870 --> 00:15:51,589
you them I mean that's how we get it

00:15:49,760 --> 00:15:53,899
into the database all right that's one

00:15:51,589 --> 00:15:55,310
of the ways in which this database of

00:15:53,899 --> 00:16:00,529
known as the iPod and with the good

00:15:55,310 --> 00:16:03,649
socks so when we're looking at session

00:16:00,529 --> 00:16:05,570
storage before our end-to-end was like

00:16:03,649 --> 00:16:07,910
the browser to session storage but

00:16:05,570 --> 00:16:11,620
really these are the two ends right the

00:16:07,910 --> 00:16:13,760
ends are the database and the browser I

00:16:11,620 --> 00:16:15,769
don't really want to go anywhere near

00:16:13,760 --> 00:16:18,139
the database like production database

00:16:15,769 --> 00:16:19,250
but we do we still want to test in the

00:16:18,139 --> 00:16:21,079
browser even though it's not going to

00:16:19,250 --> 00:16:24,529
come from a poor request anymore we need

00:16:21,079 --> 00:16:27,260
to make those requests somehow we could

00:16:24,529 --> 00:16:29,930
assert yeah and make sure that what's in

00:16:27,260 --> 00:16:30,370
the database like is good but seems kind

00:16:29,930 --> 00:16:32,389
of risky

00:16:30,370 --> 00:16:36,889
however because and as curious as

00:16:32,389 --> 00:16:38,810
pub/sub mechanism we can add another

00:16:36,889 --> 00:16:40,519
thing in there which does the assistance

00:16:38,810 --> 00:16:42,649
and it's going to say give me all the

00:16:40,519 --> 00:16:44,569
events to do with page views and page

00:16:42,649 --> 00:16:46,040
exits and share events and suddenly

00:16:44,569 --> 00:16:49,940
you've got this application which is

00:16:46,040 --> 00:16:51,680
getting this fire hose of events which

00:16:49,940 --> 00:16:53,899
is the same situation we were using

00:16:51,680 --> 00:16:56,029
production traffic and why is production

00:16:53,899 --> 00:16:57,709
traffic but like all production traffic

00:16:56,029 --> 00:17:00,350
it's not that useful to us it's like

00:16:57,709 --> 00:17:03,680
it's nice to hook into but we don't

00:17:00,350 --> 00:17:05,660
really have anything right now but if we

00:17:03,680 --> 00:17:09,319
can control the traffic that comes in

00:17:05,660 --> 00:17:11,929
then maybe we can do so what we did is

00:17:09,319 --> 00:17:13,610
we built a like just this small cron job

00:17:11,929 --> 00:17:17,839
which runs the tests every two minutes

00:17:13,610 --> 00:17:19,850
and those tests go to three pages share

00:17:17,839 --> 00:17:22,010
something on the Facebook and then bail

00:17:19,850 --> 00:17:24,770
out and on each of them has a unique ID

00:17:22,010 --> 00:17:27,260
which we can like we can get at the far

00:17:24,770 --> 00:17:28,580
end so now instead of there's firehose

00:17:27,260 --> 00:17:31,610
of events that's coming into this

00:17:28,580 --> 00:17:33,290
application we say okay I'm gonna ignore

00:17:31,610 --> 00:17:35,630
everything that doesn't have this unique

00:17:33,290 --> 00:17:37,610
ID event or in tests so suddenly I just

00:17:35,630 --> 00:17:40,669
have this trickle of events rather than

00:17:37,610 --> 00:17:42,350
with this firehose and within there we

00:17:40,669 --> 00:17:47,179
can do the same test that we were doing

00:17:42,350 --> 00:17:48,679
before on our in the CSS of like they

00:17:47,179 --> 00:17:49,370
should look like this these are the ones

00:17:48,679 --> 00:17:51,590
that go

00:17:49,370 --> 00:17:53,270
the same if they are or if they aren't

00:17:51,590 --> 00:17:55,580
you know we'll push that off to a

00:17:53,270 --> 00:17:57,560
dashboard and also we'll push it off

00:17:55,580 --> 00:17:59,240
just luck because we don't have a way on

00:17:57,560 --> 00:18:01,070
the like blocking pour across anymore so

00:17:59,240 --> 00:18:02,960
we have to fill in those blanks so that

00:18:01,070 --> 00:18:04,490
how do we communicate back to users that

00:18:02,960 --> 00:18:08,840
he broke it because this is all a

00:18:04,490 --> 00:18:10,910
one-way wall my street and this is

00:18:08,840 --> 00:18:12,530
pretty much like without a few bits and

00:18:10,910 --> 00:18:15,200
pieces this is the final solution and

00:18:12,530 --> 00:18:17,600
the way that we kind of solved flaky

00:18:15,200 --> 00:18:19,760
tests I mean fundamentally is by just

00:18:17,600 --> 00:18:22,700
removing the assertions at the bottom

00:18:19,760 --> 00:18:25,490
you don't test anything you can't have

00:18:22,700 --> 00:18:27,260
flakiness all right so now so now it

00:18:25,490 --> 00:18:29,380
just goes to the web goes to the website

00:18:27,260 --> 00:18:31,730
and that's it that's its job done so

00:18:29,380 --> 00:18:35,420
these things run happily in the

00:18:31,730 --> 00:18:36,890
background and then we are so at the far

00:18:35,420 --> 00:18:40,310
end and then we pipe it into a dashboard

00:18:36,890 --> 00:18:42,110
that looks like this which is in de dog

00:18:40,310 --> 00:18:43,550
bed just of my too much it's just we

00:18:42,110 --> 00:18:46,730
have the different share events page

00:18:43,550 --> 00:18:48,860
view page exits share our different page

00:18:46,730 --> 00:18:52,040
types and some different share bars and

00:18:48,860 --> 00:18:54,920
this is going every every two minutes we

00:18:52,040 --> 00:18:57,470
run these tests with three instances so

00:18:54,920 --> 00:18:59,360
we run like three concurrently and then

00:18:57,470 --> 00:19:01,070
every five minutes we check to make sure

00:18:59,360 --> 00:19:04,790
we have events that are coming through

00:19:01,070 --> 00:19:07,040
in those in that five minutes we do like

00:19:04,790 --> 00:19:10,400
so we can't guarantee immediate like

00:19:07,040 --> 00:19:13,160
resolution of those events in nsq and

00:19:10,400 --> 00:19:14,360
then we if they go wrong you know that

00:19:13,160 --> 00:19:17,780
goes red but people don't really look at

00:19:14,360 --> 00:19:19,820
that but we send it in this line and if

00:19:17,780 --> 00:19:22,160
these goes off it's usually pretty scary

00:19:19,820 --> 00:19:24,950
like everything's broken or its source

00:19:22,160 --> 00:19:26,630
Labs has gone down and then it's just a

00:19:24,950 --> 00:19:27,830
big stream of red and we know that

00:19:26,630 --> 00:19:30,260
sources go down we just go and check

00:19:27,830 --> 00:19:33,560
this outage and it comes with five

00:19:30,260 --> 00:19:35,000
minutes later so anyway this is kind of

00:19:33,560 --> 00:19:37,160
a solution this is very good but there

00:19:35,000 --> 00:19:39,050
are still some issues with it so they

00:19:37,160 --> 00:19:40,460
because we've taken it off the poor

00:19:39,050 --> 00:19:43,580
request we don't really have a great way

00:19:40,460 --> 00:19:45,440
of reassociate ngey come here that

00:19:43,580 --> 00:19:47,570
happened and maybe we can finally commit

00:19:45,440 --> 00:19:49,700
I would deploy but the person and then

00:19:47,570 --> 00:19:51,740
getting them in slack that's turkey so

00:19:49,700 --> 00:19:53,060
we're just quite noisy with our alerts

00:19:51,740 --> 00:19:54,320
like something broke

00:19:53,060 --> 00:19:57,470
you should probably pay attention to

00:19:54,320 --> 00:20:00,260
this we do depend on third-party source

00:19:57,470 --> 00:20:02,270
labs and if he goes down our tests go

00:20:00,260 --> 00:20:03,290
down but you can correlate them pretty

00:20:02,270 --> 00:20:05,560
easily

00:20:03,290 --> 00:20:07,610
and downtown's don't say about really

00:20:05,560 --> 00:20:09,920
plus we don't really care about latency

00:20:07,610 --> 00:20:11,240
like sometimes we're sauce labs the

00:20:09,920 --> 00:20:13,430
tests can be slow it's kind of annoying

00:20:11,240 --> 00:20:14,630
but we can just run more of them it

00:20:13,430 --> 00:20:18,020
doesn't really matter how long it's like

00:20:14,630 --> 00:20:20,510
so we found that the booting up like iOS

00:20:18,020 --> 00:20:22,880
which is one things we test on so like

00:20:20,510 --> 00:20:25,280
when we went to iOS 10 whatever changed

00:20:22,880 --> 00:20:28,400
from a minute so like five minutes just

00:20:25,280 --> 00:20:29,570
a boot up the phone and but it was fine

00:20:28,400 --> 00:20:31,340
we just added a few more and they just

00:20:29,570 --> 00:20:34,250
run a bit different speeds and it's all

00:20:31,340 --> 00:20:35,450
good we still have no coverage during

00:20:34,250 --> 00:20:37,670
development like we had this

00:20:35,450 --> 00:20:38,990
serviceworker kind of hack but we

00:20:37,670 --> 00:20:42,850
deleted it recently because we just

00:20:38,990 --> 00:20:45,890
weren't investing enough time into it so

00:20:42,850 --> 00:20:46,940
it would be nice to solve that problem

00:20:45,890 --> 00:20:49,190
we don't have a good answer for it right

00:20:46,940 --> 00:20:52,370
now but ultimately the analytics are

00:20:49,190 --> 00:20:53,840
working so it's all good and we have no

00:20:52,370 --> 00:20:55,670
coverage of anything that's not pixie

00:20:53,840 --> 00:20:57,140
just because this is really specific to

00:20:55,670 --> 00:20:58,970
fix just the fact that we can get to the

00:20:57,140 --> 00:21:00,290
other end of that and never request is

00:20:58,970 --> 00:21:02,330
something we can't do with anything else

00:21:00,290 --> 00:21:04,520
so there were a little bit exposed there

00:21:02,330 --> 00:21:08,020
but ultimately picks this is the source

00:21:04,520 --> 00:21:10,630
of truth for us that's not too bad and

00:21:08,020 --> 00:21:13,190
yeah I know what did we find out

00:21:10,630 --> 00:21:15,950
well we had a lot more bugs than we then

00:21:13,190 --> 00:21:18,320
we knew like once beside properly

00:21:15,950 --> 00:21:20,510
testing enter and we realized that there

00:21:18,320 --> 00:21:21,560
was bugs inside the routing and nsq in

00:21:20,510 --> 00:21:23,270
Pyxis api

00:21:21,560 --> 00:21:27,380
all sorts of stuff that we hadn't

00:21:23,270 --> 00:21:29,450
anticipated like felt like weeks I was

00:21:27,380 --> 00:21:30,920
watching this dashboard waiting for it

00:21:29,450 --> 00:21:32,300
to go green it just like there was more

00:21:30,920 --> 00:21:34,660
and more things happening there like

00:21:32,300 --> 00:21:36,980
wasn't quite right

00:21:34,660 --> 00:21:39,080
and we yeah we found that testing a

00:21:36,980 --> 00:21:43,490
person has some fun side effects so this

00:21:39,080 --> 00:21:46,700
is a dashboard of it just the post I

00:21:43,490 --> 00:21:48,710
picked up early today but then the main

00:21:46,700 --> 00:21:51,640
thing about this is this - but this is

00:21:48,710 --> 00:21:55,820
called dashboard it's measuring like the

00:21:51,640 --> 00:21:57,830
the social share effect of a post so

00:21:55,820 --> 00:21:59,510
like ideally the read is like way higher

00:21:57,830 --> 00:22:02,660
and that means that more people have

00:21:59,510 --> 00:22:04,850
shared it and now like because I run the

00:22:02,660 --> 00:22:07,010
tests on my post I have the most popular

00:22:04,850 --> 00:22:11,420
post on BuzzFeed

00:22:07,010 --> 00:22:14,390
it's staggering League successful 3,000

00:22:11,420 --> 00:22:17,600
deck social lift and this annoys date

00:22:14,390 --> 00:22:19,220
scientists and engineering and stuff

00:22:17,600 --> 00:22:20,630
and strides of people because it just

00:22:19,220 --> 00:22:24,680
appears in a recommendation fees and we

00:22:20,630 --> 00:22:26,420
have to like block that up but anyway

00:22:24,680 --> 00:22:27,860
the thing I think they would take away

00:22:26,420 --> 00:22:31,010
from this talk even if you don't go and

00:22:27,860 --> 00:22:34,370
rement picture this on your website is

00:22:31,010 --> 00:22:37,400
that this thing that I learned from like

00:22:34,370 --> 00:22:39,350
that conversation with Mark in the

00:22:37,400 --> 00:22:41,420
interview is like I was trying to solve

00:22:39,350 --> 00:22:43,340
this problem using the tools I knew

00:22:41,420 --> 00:22:45,800
which was kind of end to end testing at

00:22:43,340 --> 00:22:47,240
the PR level and we couldn't solve it

00:22:45,800 --> 00:22:49,429
that way like it just wasn't possible

00:22:47,240 --> 00:22:52,130
and I were betting a heads against that

00:22:49,429 --> 00:22:53,630
and he made me think about it's like

00:22:52,130 --> 00:22:55,940
different way we suddenly opened up a

00:22:53,630 --> 00:22:57,590
whole bunch of new ideas so I would

00:22:55,940 --> 00:22:59,630
suggest that yeah if you find yourself

00:22:57,590 --> 00:23:00,890
you're like reaching the limit of what

00:22:59,630 --> 00:23:02,870
you're capable of doing with the tools

00:23:00,890 --> 00:23:04,550
you've got it's worth just completely

00:23:02,870 --> 00:23:05,660
thrown away for a second think about how

00:23:04,550 --> 00:23:09,290
you can approach it from a different way

00:23:05,660 --> 00:23:10,170
and it might work out that's it thank

00:23:09,290 --> 00:23:15,880
you

00:23:10,170 --> 00:23:15,880

YouTube URL: https://www.youtube.com/watch?v=HctZ3Q-642c


