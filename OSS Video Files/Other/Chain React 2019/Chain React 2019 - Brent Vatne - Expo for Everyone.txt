Title: Chain React 2019 - Brent Vatne - Expo for Everyone
Publication date: 2019-08-06
Playlist: Chain React 2019
Description: 
	What is Expo, what have we been working on, and whatâ€™s up next? Give me your attention for half an hour and let me tell you about that.

https://www.icloud.com/keynote/0Jab6KBEszi8hWKJ8Ey-07Csg#chain-react
Captions: 
	00:00:11,309 --> 00:00:16,470
my name is Brent I'm gonna talk about

00:00:13,049 --> 00:00:18,270
Expo Expos an open source project it's

00:00:16,470 --> 00:00:19,830
also a company built by all these

00:00:18,270 --> 00:00:22,650
wonderful people that you see here you

00:00:19,830 --> 00:00:24,359
might recognize some of them we want to

00:00:22,650 --> 00:00:25,859
help you focus on the essential

00:00:24,359 --> 00:00:28,230
complexity of the problem that your

00:00:25,859 --> 00:00:30,330
business solves and to do this we try to

00:00:28,230 --> 00:00:32,189
handle the accidental complexity that

00:00:30,330 --> 00:00:35,010
comes with building cross-platform apps

00:00:32,189 --> 00:00:38,820
and as you all probably know there's a

00:00:35,010 --> 00:00:40,590
lot of that so more concretely we build

00:00:38,820 --> 00:00:43,620
tools and services to help you build

00:00:40,590 --> 00:00:46,559
deploy and quickly iterate on react apps

00:00:43,620 --> 00:00:50,309
for iOS Android and web from the same

00:00:46,559 --> 00:00:54,570
codebase the tools we provide are the

00:00:50,309 --> 00:00:59,180
expo clients the CLI the sdk and snack

00:00:54,570 --> 00:01:01,980
the services are build update and notify

00:00:59,180 --> 00:01:04,320
the client is like a web browser for

00:01:01,980 --> 00:01:05,610
react native apps you can open projects

00:01:04,320 --> 00:01:09,299
that you're working on in the same way

00:01:05,610 --> 00:01:11,010
you can open a web site with the CLI you

00:01:09,299 --> 00:01:13,409
can initialize projects run a

00:01:11,010 --> 00:01:15,180
development server and do common tasks

00:01:13,409 --> 00:01:18,180
like launch the project in the simulator

00:01:15,180 --> 00:01:21,570
and view the logs it also helps you

00:01:18,180 --> 00:01:23,580
interact with some of the services the

00:01:21,570 --> 00:01:26,549
CLI comes with a pleasant graphical

00:01:23,580 --> 00:01:29,810
interface so you can open that up in a

00:01:26,549 --> 00:01:33,600
web browser if that's more your style

00:01:29,810 --> 00:01:35,909
the sdk is a collection of plugins for

00:01:33,600 --> 00:01:38,490
react native to expose the underlying

00:01:35,909 --> 00:01:42,570
native functionality so things like the

00:01:38,490 --> 00:01:44,310
accelerometer or camera or SMS the SDK

00:01:42,570 --> 00:01:46,710
takes care of providing a uniform

00:01:44,310 --> 00:01:49,500
interface to these native features and

00:01:46,710 --> 00:01:50,700
it's all typed with typescript you can

00:01:49,500 --> 00:01:54,869
kind of think of it as an extended

00:01:50,700 --> 00:01:56,460
standard library for react native snack

00:01:54,869 --> 00:01:58,979
is a web-based editor that lets you

00:01:56,460 --> 00:02:01,140
write react native code from the browser

00:01:58,979 --> 00:02:04,310
and see the changes live in an

00:02:01,140 --> 00:02:06,930
in-browser preview or in a simulator or

00:02:04,310 --> 00:02:09,209
directly on your device even you can

00:02:06,930 --> 00:02:11,760
save and share your work this is pretty

00:02:09,209 --> 00:02:12,490
invaluable for use cases like reporting

00:02:11,760 --> 00:02:13,840
a biodag or

00:02:12,490 --> 00:02:16,630
sharing examples to teach different

00:02:13,840 --> 00:02:20,590
techniques it's kind of like code

00:02:16,630 --> 00:02:22,890
sandbox or code pen for react native you

00:02:20,590 --> 00:02:24,610
can embed your snacks on other web sites

00:02:22,890 --> 00:02:27,460
like what we do here in our

00:02:24,610 --> 00:02:30,790
documentation notice as well that you

00:02:27,460 --> 00:02:32,920
can edit the code directly on the page

00:02:30,790 --> 00:02:35,320
and see it update live inside of the

00:02:32,920 --> 00:02:37,570
preview and this makes it easy to test

00:02:35,320 --> 00:02:39,550
different options that are listed in the

00:02:37,570 --> 00:02:44,200
API reference without actually having to

00:02:39,550 --> 00:02:46,360
leave the page or go anywhere when you

00:02:44,200 --> 00:02:48,610
have snack open in your web browser and

00:02:46,360 --> 00:02:51,040
you're signed into your Expo account and

00:02:48,610 --> 00:02:53,380
on your web browser and in the client

00:02:51,040 --> 00:02:55,030
app it will just show up on the projects

00:02:53,380 --> 00:02:56,410
tab so you can quickly open it up on

00:02:55,030 --> 00:03:00,340
your device as well just while you're

00:02:56,410 --> 00:03:01,750
browsing the documentation very soon

00:03:00,340 --> 00:03:03,790
we're going to be launching support for

00:03:01,750 --> 00:03:05,680
previewing web projects within snack as

00:03:03,790 --> 00:03:07,600
well so you'll be able to see iOS

00:03:05,680 --> 00:03:12,580
Android and web all previewed within the

00:03:07,600 --> 00:03:14,710
browser the build service takes the

00:03:12,580 --> 00:03:17,290
JavaScript code that makes up your

00:03:14,710 --> 00:03:18,820
project bundles it into a binary and

00:03:17,290 --> 00:03:21,910
then you can take that binary and submit

00:03:18,820 --> 00:03:23,860
it to the App Store or the Play Store if

00:03:21,910 --> 00:03:25,810
you want it'll also manage your Android

00:03:23,860 --> 00:03:27,400
key store and iOS certificates so you

00:03:25,810 --> 00:03:32,080
don't even need to know what those are

00:03:27,400 --> 00:03:34,630
or even think about them the update

00:03:32,080 --> 00:03:36,520
service gives you over there updates for

00:03:34,630 --> 00:03:38,500
your app javascript assets and some of

00:03:36,520 --> 00:03:40,030
the configuration you can split up

00:03:38,500 --> 00:03:42,250
releases into different release channels

00:03:40,030 --> 00:03:45,280
so you can create staging production or

00:03:42,250 --> 00:03:47,530
different release environments the

00:03:45,280 --> 00:03:50,080
notify service makes it dead simple to

00:03:47,530 --> 00:03:52,780
send push notifications in fact setting

00:03:50,080 --> 00:03:54,490
up push notifications with a managed

00:03:52,780 --> 00:03:56,950
textbook project is about as quick as

00:03:54,490 --> 00:03:58,360
possible in the time it took me to say

00:03:56,950 --> 00:04:00,730
this you could copy and paste ten lines

00:03:58,360 --> 00:04:02,590
of code into a project and get push

00:04:00,730 --> 00:04:06,330
notifications working in the same way

00:04:02,590 --> 00:04:09,100
that you can see here on iOS and Android

00:04:06,330 --> 00:04:11,620
so at a high level there are two main

00:04:09,100 --> 00:04:13,540
ways to use the tools and services to

00:04:11,620 --> 00:04:16,780
build your app we call these workflows

00:04:13,540 --> 00:04:18,690
so the first the two first-class

00:04:16,780 --> 00:04:23,500
workflows that we support are called the

00:04:18,690 --> 00:04:24,760
manage workflow and the bare workflow in

00:04:23,500 --> 00:04:25,900
the manage workflow you just write

00:04:24,760 --> 00:04:28,000
JavaScript and we Matt

00:04:25,900 --> 00:04:29,259
the rest for you so let's go through

00:04:28,000 --> 00:04:32,110
what it might look like to build an app

00:04:29,259 --> 00:04:34,110
with the manager workflow first you

00:04:32,110 --> 00:04:37,360
might initialize project with Expo in it

00:04:34,110 --> 00:04:40,560
run the server with Expo start open the

00:04:37,360 --> 00:04:42,910
project in the client app use the

00:04:40,560 --> 00:04:46,270
community standard libraries like react

00:04:42,910 --> 00:04:48,160
native Maps or SPG along with things

00:04:46,270 --> 00:04:51,940
like the things that are included in the

00:04:48,160 --> 00:04:54,280
Expo SDK to expose the underlying native

00:04:51,940 --> 00:04:57,280
features you can configure your project

00:04:54,280 --> 00:04:59,560
inside of App JSON publish and share

00:04:57,280 --> 00:05:04,470
your app with expert publish or export

00:04:59,560 --> 00:05:06,610
and build it with expo build iOS android

00:05:04,470 --> 00:05:09,430
finally you can deploy your app using

00:05:06,610 --> 00:05:12,070
excel upload and update over the air

00:05:09,430 --> 00:05:14,320
with publish and send push notifications

00:05:12,070 --> 00:05:16,900
using the API is that are part of the

00:05:14,320 --> 00:05:20,560
SDK as well as SDKs for whatever

00:05:16,900 --> 00:05:21,729
language you're using on the backend so

00:05:20,560 --> 00:05:24,070
let's start out with initializing

00:05:21,729 --> 00:05:25,479
project exponent it gives you several

00:05:24,070 --> 00:05:27,550
options for templates including a

00:05:25,479 --> 00:05:29,050
typescript template and one with react

00:05:27,550 --> 00:05:32,979
navigation installed and some basic

00:05:29,050 --> 00:05:34,900
navigation stuff set up after that we

00:05:32,979 --> 00:05:39,940
just run yarn start on the project which

00:05:34,900 --> 00:05:42,699
delegates to expo start for us then we

00:05:39,940 --> 00:05:43,960
open it in the client app to run the app

00:05:42,699 --> 00:05:45,460
we don't need to build any native code

00:05:43,960 --> 00:05:48,250
because it runs in the client which is

00:05:45,460 --> 00:05:49,510
pre-built and the CLI will automatically

00:05:48,250 --> 00:05:52,180
install it for us in the iOS simulator

00:05:49,510 --> 00:05:54,970
or on any connected iOS or Android

00:05:52,180 --> 00:05:57,280
devices or sorry Android devices only

00:05:54,970 --> 00:05:59,080
you would need to if you want to get it

00:05:57,280 --> 00:06:01,810
on your iOS device download it from the

00:05:59,080 --> 00:06:03,789
App Store once it's running anyone in

00:06:01,810 --> 00:06:06,159
the world with the expo client can open

00:06:03,789 --> 00:06:10,270
the app if you share a tunnel URL with

00:06:06,159 --> 00:06:13,330
them so now we need to build something

00:06:10,270 --> 00:06:15,820
let's make a react native version of

00:06:13,330 --> 00:06:17,919
syndra sources open source ios app

00:06:15,820 --> 00:06:20,320
called blir it's an app for creating

00:06:17,919 --> 00:06:22,210
vibrant blurred images from photos on

00:06:20,320 --> 00:06:26,949
your phone like this one that i use at

00:06:22,210 --> 00:06:28,449
my home screen so we could scroll

00:06:26,949 --> 00:06:29,949
through the expo documentation and try

00:06:28,449 --> 00:06:31,930
to find packages that provide the

00:06:29,949 --> 00:06:33,909
capabilities that we need if we know

00:06:31,930 --> 00:06:35,710
right away that the x-bow sdk doesn't

00:06:33,909 --> 00:06:37,510
have the necessary native api's built in

00:06:35,710 --> 00:06:38,720
then we should probably eject there just

00:06:37,510 --> 00:06:40,540
realized with the

00:06:38,720 --> 00:06:44,240
workflow which we'll talk about later

00:06:40,540 --> 00:06:45,830
for this app we can have a look and see

00:06:44,240 --> 00:06:47,990
we need the image picker we need

00:06:45,830 --> 00:06:50,960
permissions we need some way to a flat

00:06:47,990 --> 00:06:54,170
apply this effect to the image and we

00:06:50,960 --> 00:06:57,950
need media library access to save images

00:06:54,170 --> 00:06:59,180
to an album so we have to start

00:06:57,950 --> 00:07:01,760
somewhere so let's start with image

00:06:59,180 --> 00:07:03,830
picker there is a runnable example of it

00:07:01,760 --> 00:07:06,860
on the docs page so let's just copy that

00:07:03,830 --> 00:07:08,990
over but before we paste it in I'll

00:07:06,860 --> 00:07:11,570
install all of the dependencies using

00:07:08,990 --> 00:07:14,600
Expo install XML install is a wrapper

00:07:11,570 --> 00:07:16,190
around NPM and yarn to ensure that the

00:07:14,600 --> 00:07:19,640
version of the package you're installing

00:07:16,190 --> 00:07:21,140
is compatible with your app so now we

00:07:19,640 --> 00:07:26,870
can paste the code in and reload and

00:07:21,140 --> 00:07:29,570
it'll work next we can build out the UI

00:07:26,870 --> 00:07:32,330
just using action sheet and slider and

00:07:29,570 --> 00:07:32,840
core react native primitives for the

00:07:32,330 --> 00:07:34,700
icons

00:07:32,840 --> 00:07:36,560
I used Expo vector icons which is a

00:07:34,700 --> 00:07:42,110
slightly modified version of react

00:07:36,560 --> 00:07:44,900
native vector icons excellence tall Expo

00:07:42,110 --> 00:07:46,610
GL to leverage WebGL to create the blur

00:07:44,900 --> 00:07:49,130
effect then I'll install react native

00:07:46,610 --> 00:07:51,350
view shot Expo file system and ex-pro

00:07:49,130 --> 00:07:55,370
media library to capture the result and

00:07:51,350 --> 00:07:56,870
save it to an album so those installed

00:07:55,370 --> 00:07:59,360
all you have to do is some good old

00:07:56,870 --> 00:08:03,350
fashioned programming and you can create

00:07:59,360 --> 00:08:05,870
this so this works now in iOS and

00:08:03,350 --> 00:08:08,120
Android we can try running it on web but

00:08:05,870 --> 00:08:09,410
it won't quite work out of the box you

00:08:08,120 --> 00:08:11,630
can see the slider is just this little

00:08:09,410 --> 00:08:15,140
red dot so let's just take a simpler

00:08:11,630 --> 00:08:16,610
approach on the web we can make a page

00:08:15,140 --> 00:08:18,320
more like the one that we saw for the

00:08:16,610 --> 00:08:20,990
real blir app that just has a link to

00:08:18,320 --> 00:08:23,360
the store and some source code but if

00:08:20,990 --> 00:08:25,400
you want to make the actual app work the

00:08:23,360 --> 00:08:29,870
source is available and so you can give

00:08:25,400 --> 00:08:31,610
it a go as an exercise so in a managed

00:08:29,870 --> 00:08:33,919
app we don't have access to the iOS and

00:08:31,610 --> 00:08:35,030
Android native projects directly so we

00:08:33,919 --> 00:08:36,979
can't poke around and modify the

00:08:35,030 --> 00:08:38,750
different configuration so when we want

00:08:36,979 --> 00:08:40,729
to change configuration like the icon or

00:08:38,750 --> 00:08:45,710
the splash screen we have to use app

00:08:40,729 --> 00:08:47,660
JSON for that if you want to build an

00:08:45,710 --> 00:08:48,620
animation from the splash screen then

00:08:47,660 --> 00:08:50,360
you'll need to do that part

00:08:48,620 --> 00:08:51,630
programmatically but you'll still want

00:08:50,360 --> 00:08:53,490
to provide a

00:08:51,630 --> 00:08:55,410
screen and app JSON because it'll be

00:08:53,490 --> 00:08:59,520
displayed before the JavaScript for your

00:08:55,410 --> 00:09:01,620
app loads to share the app with

00:08:59,520 --> 00:09:03,630
teammates we can run Expo publish and

00:09:01,620 --> 00:09:09,900
we'll build the bundle and upload it and

00:09:03,630 --> 00:09:11,430
the assets to our CDN you may have

00:09:09,900 --> 00:09:13,640
noticed as well that when we ran

00:09:11,430 --> 00:09:16,290
published the CLI warned us about

00:09:13,640 --> 00:09:18,660
optimizing assets so we can run Expo

00:09:16,290 --> 00:09:22,140
optimized and this will just use sharp

00:09:18,660 --> 00:09:24,660
to attempt to reduce the size of our

00:09:22,140 --> 00:09:26,250
assets by supplying some compression if

00:09:24,660 --> 00:09:27,690
it doesn't make the assets smaller it

00:09:26,250 --> 00:09:30,180
just skips them if it is capable of

00:09:27,690 --> 00:09:31,470
making them smaller than it does that so

00:09:30,180 --> 00:09:33,810
we've saved a couple megabytes on a few

00:09:31,470 --> 00:09:36,000
images that's pretty good

00:09:33,810 --> 00:09:38,220
so now we could share the app so when we

00:09:36,000 --> 00:09:40,350
publish we got this URL where if you

00:09:38,220 --> 00:09:41,840
have the expo client you can open it on

00:09:40,350 --> 00:09:45,000
your device

00:09:41,840 --> 00:09:47,310
however on iOS due to apps or

00:09:45,000 --> 00:09:48,600
restrictions you can only open projects

00:09:47,310 --> 00:09:50,850
that are built by you and your team

00:09:48,600 --> 00:09:54,120
unless you do something called a custom

00:09:50,850 --> 00:09:56,340
ad hoc build so this is something we

00:09:54,120 --> 00:09:57,810
recently built so you can create a

00:09:56,340 --> 00:10:00,330
custom ad hoc build of the client by

00:09:57,810 --> 00:10:01,890
running Expo client iOS this requires

00:10:00,330 --> 00:10:06,600
that you have a paid Apple Developer

00:10:01,890 --> 00:10:07,980
account but once you actually run a

00:10:06,600 --> 00:10:09,810
build you can actually give other people

00:10:07,980 --> 00:10:12,060
access to it who don't have a paid

00:10:09,810 --> 00:10:15,120
developer account they just have to go

00:10:12,060 --> 00:10:17,970
to a link that registers their device

00:10:15,120 --> 00:10:20,370
UUID with the ad hoc profile and then

00:10:17,970 --> 00:10:22,350
they can install it directly and so what

00:10:20,370 --> 00:10:26,820
that would look like when it's ready to

00:10:22,350 --> 00:10:28,380
install is something like this so this

00:10:26,820 --> 00:10:30,480
version of the client is unlocked to

00:10:28,380 --> 00:10:32,760
open any project and also has some other

00:10:30,480 --> 00:10:33,840
capabilities that we can't include in

00:10:32,760 --> 00:10:35,820
the app store version of the client

00:10:33,840 --> 00:10:37,830
because of the restrictions some of

00:10:35,820 --> 00:10:40,080
those being background geolocation

00:10:37,830 --> 00:10:41,430
support and background audio and there

00:10:40,080 --> 00:10:44,810
will be more things in the future that

00:10:41,430 --> 00:10:48,270
we we also can't ship to the App Store

00:10:44,810 --> 00:10:50,880
so now that the app is tested and ready

00:10:48,270 --> 00:10:53,490
for production or at least ready for a

00:10:50,880 --> 00:10:56,970
broader set of testers let's go ahead

00:10:53,490 --> 00:10:59,760
and build a binary so when we run Expo

00:10:56,970 --> 00:11:03,060
build iOS it looks like we've forgot to

00:10:59,760 --> 00:11:04,290
provide a bundle identifier so that's

00:11:03,060 --> 00:11:05,100
pretty easy fix we just follow the

00:11:04,290 --> 00:11:07,470
instruction

00:11:05,100 --> 00:11:11,880
again go to app JSON add it under the

00:11:07,470 --> 00:11:13,710
iOS key and settle identifiers now when

00:11:11,880 --> 00:11:16,110
we run it again it will kick off a build

00:11:13,710 --> 00:11:18,060
and we can enter our developer

00:11:16,110 --> 00:11:21,150
credentials and then just hit enter a

00:11:18,060 --> 00:11:23,250
couple of times so that Expo will just

00:11:21,150 --> 00:11:25,200
handle the distribution certificate push

00:11:23,250 --> 00:11:27,300
key provisioning profile you don't have

00:11:25,200 --> 00:11:28,500
to think about that of course you can

00:11:27,300 --> 00:11:30,480
still get it at any time by going

00:11:28,500 --> 00:11:34,910
through your Apple Developer account

00:11:30,480 --> 00:11:37,680
it's just managed in this way for you

00:11:34,910 --> 00:11:39,660
you can also just upload your version of

00:11:37,680 --> 00:11:41,760
these things as well if you maybe have

00:11:39,660 --> 00:11:44,580
an existing app that you are starting to

00:11:41,760 --> 00:11:46,320
build with the manage workflow and using

00:11:44,580 --> 00:11:48,180
the service you can upload all of these

00:11:46,320 --> 00:11:51,840
things so that we're able to use them in

00:11:48,180 --> 00:11:53,490
the build process now you can use the

00:11:51,840 --> 00:11:55,020
application loader so you upload the app

00:11:53,490 --> 00:11:58,200
but I find it's a little bit easier to

00:11:55,020 --> 00:12:01,170
just run x-bow upload iOS this uses

00:11:58,200 --> 00:12:04,830
Fastlane to upload the app to app store

00:12:01,170 --> 00:12:06,570
connect and now that it's uploaded you

00:12:04,830 --> 00:12:07,830
can add the metadata and all that kind

00:12:06,570 --> 00:12:11,490
of thing and push it through test flight

00:12:07,830 --> 00:12:13,260
for review Android builds follow a very

00:12:11,490 --> 00:12:15,090
similar process but we're just going to

00:12:13,260 --> 00:12:20,010
restrict the permissions to the ones

00:12:15,090 --> 00:12:22,230
that we need here and we'll build an

00:12:20,010 --> 00:12:25,200
Android app bundle because we want to

00:12:22,230 --> 00:12:26,970
take advantage of being able to include

00:12:25,200 --> 00:12:31,080
different architectures and split that

00:12:26,970 --> 00:12:34,260
out into a more lean binary size but if

00:12:31,080 --> 00:12:36,210
you do want to test your build locally

00:12:34,260 --> 00:12:38,520
then you can leave out the app bundle

00:12:36,210 --> 00:12:41,540
flag and build an apk and just install

00:12:38,520 --> 00:12:44,640
it directly on your device or simulator

00:12:41,540 --> 00:12:45,990
to point to the Play Store as you're

00:12:44,640 --> 00:12:48,450
probably all familiar requires that you

00:12:45,990 --> 00:12:51,570
first create an entry in the Play Store

00:12:48,450 --> 00:12:53,430
the Play console rather but once you've

00:12:51,570 --> 00:12:55,650
done that you can run expo upload

00:12:53,430 --> 00:12:57,930
android and it'll upload the build for

00:12:55,650 --> 00:13:00,650
you it'll just download it and upload

00:12:57,930 --> 00:13:03,000
the most recent build that you've done

00:13:00,650 --> 00:13:04,740
so now we just need to do the usual

00:13:03,000 --> 00:13:07,920
clicking and whatever you need to do in

00:13:04,740 --> 00:13:09,930
the console and you can get these builds

00:13:07,920 --> 00:13:11,340
ready to share with people in the

00:13:09,930 --> 00:13:13,380
meantime of course you can continue

00:13:11,340 --> 00:13:18,390
sharing updates just through the expo

00:13:13,380 --> 00:13:18,780
client and using publish we can run expo

00:13:18,390 --> 00:13:21,720
build

00:13:18,780 --> 00:13:24,360
web to build the web version and share

00:13:21,720 --> 00:13:26,310
the links through app you can deploy to

00:13:24,360 --> 00:13:29,250
any hosting provider that you like I

00:13:26,310 --> 00:13:34,190
just deployed it using sites now service

00:13:29,250 --> 00:13:36,240
and an alias that to Blair Bronte XYZ

00:13:34,190 --> 00:13:37,680
it's worth noting that even without

00:13:36,240 --> 00:13:39,900
thinking about it this little web site

00:13:37,680 --> 00:13:41,370
got a pretty good score on lighthouse if

00:13:39,900 --> 00:13:43,140
I fixed a couple of things with those

00:13:41,370 --> 00:13:45,660
links then it would be much better on

00:13:43,140 --> 00:13:50,070
accessibility but did this in about two

00:13:45,660 --> 00:13:52,080
minutes so once your app is out for

00:13:50,070 --> 00:13:53,070
testing or on the stores you probably

00:13:52,080 --> 00:13:56,310
don't want to have to repeat that

00:13:53,070 --> 00:13:59,910
process again very often or ideally as

00:13:56,310 --> 00:14:01,110
infrequently as possible so in this case

00:13:59,910 --> 00:14:04,020
I noticed that I wasn't asking for

00:14:01,110 --> 00:14:06,600
camera role permissions before trying to

00:14:04,020 --> 00:14:08,580
save the file so if you tried to save a

00:14:06,600 --> 00:14:11,880
file before opening the camera roll to

00:14:08,580 --> 00:14:13,560
pick a file then it wouldn't work so to

00:14:11,880 --> 00:14:19,380
ship an update we just make the change

00:14:13,560 --> 00:14:21,000
and then run Expo publish however I did

00:14:19,380 --> 00:14:22,260
build the Android binary you might have

00:14:21,000 --> 00:14:23,310
noticed pointing to a different release

00:14:22,260 --> 00:14:25,200
channel so it was pointing to the

00:14:23,310 --> 00:14:26,250
Android release channel so I'm going to

00:14:25,200 --> 00:14:28,290
publish to that one as well

00:14:26,250 --> 00:14:31,140
and that just allows us to release

00:14:28,290 --> 00:14:32,910
separately to iOS and Android if we want

00:14:31,140 --> 00:14:34,650
to there are a lot of different ways you

00:14:32,910 --> 00:14:37,440
can separate release channels that's

00:14:34,650 --> 00:14:39,330
just one that I did here if you don't

00:14:37,440 --> 00:14:41,780
configure them the updates will download

00:14:39,330 --> 00:14:44,340
synchronously on startup and then apply

00:14:41,780 --> 00:14:46,890
the next time you start the app or

00:14:44,340 --> 00:14:50,460
rather apply immediately but if it falls

00:14:46,890 --> 00:14:52,080
back to the cached version due to time

00:14:50,460 --> 00:14:54,300
out in downloading then it'll apply the

00:14:52,080 --> 00:14:56,280
next time you start the app I usually

00:14:54,300 --> 00:14:57,900
recommend though setting this to zero

00:14:56,280 --> 00:15:00,240
they fall back to cache timeout so that

00:14:57,900 --> 00:15:01,680
it will always download asynchronously

00:15:00,240 --> 00:15:05,250
and then apply when you restart the app

00:15:01,680 --> 00:15:08,730
but you can also just manually do it as

00:15:05,250 --> 00:15:12,360
well so just change check automatically

00:15:08,730 --> 00:15:13,980
and then instead go ahead and use the

00:15:12,360 --> 00:15:19,470
programmatic API to check for updates

00:15:13,980 --> 00:15:21,050
and restart whenever you need to so the

00:15:19,470 --> 00:15:23,370
build service and the update service

00:15:21,050 --> 00:15:25,440
default to the easiest out-of-the-box

00:15:23,370 --> 00:15:26,940
experience but sometimes you need to

00:15:25,440 --> 00:15:28,050
have more control than that so it's

00:15:26,940 --> 00:15:30,870
common for organizations to have

00:15:28,050 --> 00:15:31,760
policies where their apps need to be

00:15:30,870 --> 00:15:33,350
post

00:15:31,760 --> 00:15:35,870
in a certain place or cannot be hosted

00:15:33,350 --> 00:15:38,270
in certain places for example valve uses

00:15:35,870 --> 00:15:40,400
Expo for the steam chat app and their

00:15:38,270 --> 00:15:43,550
policies required that they host their

00:15:40,400 --> 00:15:45,680
own app bundles and assets and so in

00:15:43,550 --> 00:15:48,470
order to do that they can run Expo

00:15:45,680 --> 00:15:50,180
export to create the JavaScript bundle

00:15:48,470 --> 00:15:52,310
and other artifacts associated with the

00:15:50,180 --> 00:15:55,700
release then they upload it wherever

00:15:52,310 --> 00:15:57,200
they like when they run Expo build later

00:15:55,700 --> 00:16:00,290
they just point it to wherever they

00:15:57,200 --> 00:16:04,430
uploaded the release and it will build

00:16:00,290 --> 00:16:05,960
against that release if you want to run

00:16:04,430 --> 00:16:08,270
the native build on your own machine or

00:16:05,960 --> 00:16:10,850
on your own CI server the build service

00:16:08,270 --> 00:16:13,520
is actually just an open source tool and

00:16:10,850 --> 00:16:15,470
we have guides for helping you set it up

00:16:13,520 --> 00:16:17,270
on circle CI a and other popular CI

00:16:15,470 --> 00:16:20,270
services so you don't actually need to

00:16:17,270 --> 00:16:21,830
use our services directly if you'd

00:16:20,270 --> 00:16:23,380
rather just use the tools and your own

00:16:21,830 --> 00:16:26,660
infrastructure

00:16:23,380 --> 00:16:28,790
so with manage workflow you don't really

00:16:26,660 --> 00:16:31,370
need to know a lot about native code or

00:16:28,790 --> 00:16:34,550
configuration you're just writing react

00:16:31,370 --> 00:16:37,310
code react native version updates are

00:16:34,550 --> 00:16:39,170
also relatively easy you have a third of

00:16:37,310 --> 00:16:41,840
the surface area to cover in updates and

00:16:39,170 --> 00:16:43,670
all of your native dependencies are

00:16:41,840 --> 00:16:46,820
updated and guaranteed to be compatible

00:16:43,670 --> 00:16:48,800
by Expo because we update them ourselves

00:16:46,820 --> 00:16:51,710
for everybody

00:16:48,800 --> 00:16:54,440
Kristof mogera wanted me to emphasize

00:16:51,710 --> 00:16:55,880
how easy the updates are I had to

00:16:54,440 --> 00:16:57,140
paraphrase him in the last sentence

00:16:55,880 --> 00:16:59,180
because he used some more harsh language

00:16:57,140 --> 00:17:00,650
about updating but I'm sure you could

00:16:59,180 --> 00:17:02,690
fill it in with whatever you feel when

00:17:00,650 --> 00:17:04,760
you do a large update in an app that has

00:17:02,690 --> 00:17:06,980
something like 15 to 20 dependencies on

00:17:04,760 --> 00:17:11,060
it which is fairly normal for a lot of

00:17:06,980 --> 00:17:12,709
good sized react native apps of course

00:17:11,060 --> 00:17:14,209
there are some trade-offs most notably

00:17:12,709 --> 00:17:16,520
you can't add your own custom native

00:17:14,209 --> 00:17:20,690
code that's the showstopper for a lot of

00:17:16,520 --> 00:17:22,850
people you also can't remove native code

00:17:20,690 --> 00:17:24,290
that you don't use from the runtime so

00:17:22,850 --> 00:17:27,970
the base size of an android app is about

00:17:24,290 --> 00:17:32,030
13 megabytes iOS roughly about 20

00:17:27,970 --> 00:17:34,490
finally when you get to ejecting if you

00:17:32,030 --> 00:17:38,180
do need to do that there's a pretty

00:17:34,490 --> 00:17:40,309
sharp increase in complexity in your app

00:17:38,180 --> 00:17:42,350
it's kind of a cliff

00:17:40,309 --> 00:17:43,610
and you kind of need to handle all the

00:17:42,350 --> 00:17:47,720
stuff that you wanted to avoid in the

00:17:43,610 --> 00:17:49,279
first place so in order to mitigate some

00:17:47,720 --> 00:17:51,169
of these things we're of course going to

00:17:49,279 --> 00:17:53,720
continue expanding and improving on the

00:17:51,169 --> 00:17:55,360
SDK so there's less reason that you

00:17:53,720 --> 00:17:58,070
would need to leave the manage workflow

00:17:55,360 --> 00:18:00,440
we're gonna work on we actually have

00:17:58,070 --> 00:18:03,140
this for Android already in testing and

00:18:00,440 --> 00:18:05,539
working on it soon after that for iOS

00:18:03,140 --> 00:18:07,100
the ability to opt out of api's in the

00:18:05,539 --> 00:18:09,730
build process so that rather than having

00:18:07,100 --> 00:18:11,750
a base size of 13 megabytes for a

00:18:09,730 --> 00:18:13,820
Android app you could have a base size

00:18:11,750 --> 00:18:14,570
of five or six megabytes or something

00:18:13,820 --> 00:18:16,220
like that

00:18:14,570 --> 00:18:19,340
because you only include the api's that

00:18:16,220 --> 00:18:20,390
you use now we can talk later about some

00:18:19,340 --> 00:18:25,279
of the trade-offs that come with that

00:18:20,390 --> 00:18:27,320
but it's just worth knowing another

00:18:25,279 --> 00:18:29,090
thing that is a little bit further away

00:18:27,320 --> 00:18:32,570
but we are also planning on working on

00:18:29,090 --> 00:18:35,929
is custom modules so you could add your

00:18:32,570 --> 00:18:37,370
own native plugins in ad hoc builds and

00:18:35,929 --> 00:18:40,070
in standalone apps and so you'd have

00:18:37,370 --> 00:18:42,110
basically your own kind of like white

00:18:40,070 --> 00:18:43,520
labeled expert client with your own kind

00:18:42,110 --> 00:18:48,529
of native dependencies in runtime

00:18:43,520 --> 00:18:50,419
inside of it lastly if we make the bear

00:18:48,529 --> 00:18:52,010
workflow more similar to the manage

00:18:50,419 --> 00:18:53,840
workflow then the complexity that's

00:18:52,010 --> 00:18:56,620
introduced by ejecting hopefully becomes

00:18:53,840 --> 00:18:59,179
more of a speed bump and less of a cliff

00:18:56,620 --> 00:19:02,419
so that's kind of the perfect segue to

00:18:59,179 --> 00:19:05,450
the bear workflow the bear workflow is

00:19:02,419 --> 00:19:07,730
is just how we think about using Expo

00:19:05,450 --> 00:19:09,200
tools and services in a typical react

00:19:07,730 --> 00:19:12,289
native app so what probably a lot of

00:19:09,200 --> 00:19:14,539
people here are doing but with some

00:19:12,289 --> 00:19:17,630
extra stuff being used long-sighted

00:19:14,539 --> 00:19:19,190
so if you have an existing react native

00:19:17,630 --> 00:19:22,880
project you can just install react

00:19:19,190 --> 00:19:24,590
native view you know modules or you can

00:19:22,880 --> 00:19:29,210
initialize a bear project with expo in

00:19:24,590 --> 00:19:31,490
it if you have an existing manage

00:19:29,210 --> 00:19:33,080
project you can inject to a bear project

00:19:31,490 --> 00:19:37,809
starting from the next release which is

00:19:33,080 --> 00:19:42,140
sta 34 coming sometime week fish or so

00:19:37,809 --> 00:19:43,700
and now basically you can just use any

00:19:42,140 --> 00:19:46,399
native code you want of course as we're

00:19:43,700 --> 00:19:48,760
all familiar with but you can also

00:19:46,399 --> 00:19:52,260
continue to use the expo client to share

00:19:48,760 --> 00:19:54,330
parts of your work if you if you want to

00:19:52,260 --> 00:19:57,090
you can continue also to use Expo for

00:19:54,330 --> 00:19:59,420
web if you like everything else though

00:19:57,090 --> 00:20:01,650
is is up to you

00:19:59,420 --> 00:20:04,350
so it's stalling it in a project with

00:20:01,650 --> 00:20:06,120
react native CLI or Wright ignite CLI or

00:20:04,350 --> 00:20:07,290
whatever you use to create it it's just

00:20:06,120 --> 00:20:10,080
a matter of installing this react

00:20:07,290 --> 00:20:11,130
interview modules package I've sped it

00:20:10,080 --> 00:20:13,020
up here it would probably take you a few

00:20:11,130 --> 00:20:15,990
minutes the instructions are all in the

00:20:13,020 --> 00:20:18,090
readme it's a lot easier though if you

00:20:15,990 --> 00:20:20,070
having new projects you just initialize

00:20:18,090 --> 00:20:23,309
it from scratch in it it'll include all

00:20:20,070 --> 00:20:27,720
of that stuff for you as for rejecting

00:20:23,309 --> 00:20:32,250
from an existing manage project it's

00:20:27,720 --> 00:20:33,360
just a matter of running eject so when

00:20:32,250 --> 00:20:35,370
we launch support for rejecting two

00:20:33,360 --> 00:20:37,380
projects it's going to be the first big

00:20:35,370 --> 00:20:40,860
step to replacing our old version of

00:20:37,380 --> 00:20:43,620
ejecting which was called people photos

00:20:40,860 --> 00:20:45,900
detach or expo kit it was really

00:20:43,620 --> 00:20:48,480
monolithic and prescriptive and it was

00:20:45,900 --> 00:20:49,890
problematic for a variety of reasons you

00:20:48,480 --> 00:20:55,140
can learn more about why we're changing

00:20:49,890 --> 00:20:56,520
that in the blog the most important

00:20:55,140 --> 00:20:57,960
guiding principle for us here is that

00:20:56,520 --> 00:20:59,460
when you eject you should end up with

00:20:57,960 --> 00:21:00,900
the same project he would have started

00:20:59,460 --> 00:21:03,570
with or you would have ended up with if

00:21:00,900 --> 00:21:06,270
you started from scratch using you know

00:21:03,570 --> 00:21:09,480
any any other react native bootstrapping

00:21:06,270 --> 00:21:11,190
tool this way you could start off with

00:21:09,480 --> 00:21:12,780
the manage workflow and if you end up

00:21:11,190 --> 00:21:14,490
rejecting there basically be zero cost

00:21:12,780 --> 00:21:15,679
you'll have just saved yourself the time

00:21:14,490 --> 00:21:20,490
that you would have otherwise spent

00:21:15,679 --> 00:21:22,110
doing other things earlier on to add a

00:21:20,490 --> 00:21:23,580
library from the x-bow sdk we just

00:21:22,110 --> 00:21:25,980
installed through NPM and then run pod

00:21:23,580 --> 00:21:29,160
install to and then we compile our

00:21:25,980 --> 00:21:30,840
projects this is the same thing as react

00:21:29,160 --> 00:21:32,220
natives upstream auto linking which was

00:21:30,840 --> 00:21:35,130
actually inspired by the Expo

00:21:32,220 --> 00:21:39,090
implementation we've had that there for

00:21:35,130 --> 00:21:40,980
a number of months now in terms of

00:21:39,090 --> 00:21:42,510
adding other libraries it's just the

00:21:40,980 --> 00:21:45,000
same as you would do another react

00:21:42,510 --> 00:21:48,120
native apps so here I'm just adding

00:21:45,000 --> 00:21:50,370
react native matte box GL to an app that

00:21:48,120 --> 00:21:51,809
I acted which was just the chain react

00:21:50,370 --> 00:21:54,480
app that I converted to use the manage

00:21:51,809 --> 00:21:59,420
workflow originally and we could see now

00:21:54,480 --> 00:22:01,590
that we've got the matte box view there

00:21:59,420 --> 00:22:03,510
so you can continue using the expo

00:22:01,590 --> 00:22:04,440
client as I mentioned after you've added

00:22:03,510 --> 00:22:06,720
this native code

00:22:04,440 --> 00:22:08,820
you just need to add some guards to

00:22:06,720 --> 00:22:13,170
prevent the native api's from being

00:22:08,820 --> 00:22:15,450
invoked when they aren't available so

00:22:13,170 --> 00:22:17,280
we've we found that some developers have

00:22:15,450 --> 00:22:18,930
needed to eject but that they want to

00:22:17,280 --> 00:22:22,260
continue using the client for day to day

00:22:18,930 --> 00:22:23,670
development or for sharing builds so we

00:22:22,260 --> 00:22:25,560
decided that we were going to explicitly

00:22:23,670 --> 00:22:27,300
support it one neat thing that this

00:22:25,560 --> 00:22:30,570
enables is that you can set up a tool

00:22:27,300 --> 00:22:33,600
like a per from formidable labs and and

00:22:30,570 --> 00:22:35,010
it will automatically deploy a build on

00:22:33,600 --> 00:22:36,900
each pull request and then you can just

00:22:35,010 --> 00:22:38,910
scan a QR code and open it so as long as

00:22:36,900 --> 00:22:40,770
you're careful about adding guards

00:22:38,910 --> 00:22:43,950
around the native dependencies that

00:22:40,770 --> 00:22:47,730
aren't supported you can use the client

00:22:43,950 --> 00:22:52,230
to test out absolutely easily each pull

00:22:47,730 --> 00:22:54,270
requests ex before web as well continues

00:22:52,230 --> 00:22:56,730
to work the same in their projects here

00:22:54,270 --> 00:23:00,330
I just imported one of the components

00:22:56,730 --> 00:23:02,430
into a plain app web KS like we already

00:23:00,330 --> 00:23:04,610
seen it's most likely that your app

00:23:02,430 --> 00:23:07,470
won't just work out of the box using

00:23:04,610 --> 00:23:09,720
react native web or expo web which is

00:23:07,470 --> 00:23:12,510
just is more about that but it's react

00:23:09,720 --> 00:23:14,010
native web with some stuff but we're

00:23:12,510 --> 00:23:16,560
working towards getting it there where

00:23:14,010 --> 00:23:18,000
it can be ideally as close to possible

00:23:16,560 --> 00:23:22,190
as getting it just working out of the

00:23:18,000 --> 00:23:24,480
box so using the Expo tools in a vanilla

00:23:22,190 --> 00:23:27,120
standard react native app can be pretty

00:23:24,480 --> 00:23:28,710
useful but compared to the manage

00:23:27,120 --> 00:23:31,650
workflow you're really accepting a lot

00:23:28,710 --> 00:23:33,540
more complexity in its current form the

00:23:31,650 --> 00:23:35,910
bare work flows allows you to use the

00:23:33,540 --> 00:23:38,850
SDK to some extent the client the CLI

00:23:35,910 --> 00:23:40,620
and snack but not any of the services so

00:23:38,850 --> 00:23:46,140
this is a pretty good start but it's not

00:23:40,620 --> 00:23:48,870
where we want to be in terms of

00:23:46,140 --> 00:23:51,000
mitigating the trade-offs you think that

00:23:48,870 --> 00:23:53,820
by bringing the bare work flow closer to

00:23:51,000 --> 00:23:56,790
the manage workflow we hope to decrease

00:23:53,820 --> 00:23:58,410
the kind of sudden cliff of complexity

00:23:56,790 --> 00:24:00,870
that you encounter when you eject and

00:23:58,410 --> 00:24:05,790
make it yeah a little a little more

00:24:00,870 --> 00:24:08,400
tolerable as the SDK grows and improves

00:24:05,790 --> 00:24:10,350
as we're mentioning before there will be

00:24:08,400 --> 00:24:11,700
less dependencies that you need to have

00:24:10,350 --> 00:24:13,139
on

00:24:11,700 --> 00:24:16,679
you know random third-party libraries

00:24:13,139 --> 00:24:19,529
that are you know maybe sporadically

00:24:16,679 --> 00:24:21,600
maintained and you'll be able to use

00:24:19,529 --> 00:24:24,149
more of the x-bow SDK for your app and

00:24:21,600 --> 00:24:27,450
therefore have hopefully easier updates

00:24:24,149 --> 00:24:29,130
in any react native app we're also

00:24:27,450 --> 00:24:30,690
exploring applying app JSON

00:24:29,130 --> 00:24:32,370
configuration to projects so this could

00:24:30,690 --> 00:24:36,419
be a way where rather than having to

00:24:32,370 --> 00:24:38,130
learn about how to configure things in

00:24:36,419 --> 00:24:40,620
the native way you could just make the

00:24:38,130 --> 00:24:42,210
change that we saw to app JSON and then

00:24:40,620 --> 00:24:46,470
apply it and it should update Europe

00:24:42,210 --> 00:24:48,620
projects so Expo is an open source

00:24:46,470 --> 00:24:50,850
project and it's a company it's a

00:24:48,620 --> 00:24:52,740
universal react development platform

00:24:50,850 --> 00:24:53,909
that can handle the accidental

00:24:52,740 --> 00:24:56,279
complexity of building and deploying

00:24:53,909 --> 00:24:59,610
apps to these platforms and maybe more

00:24:56,279 --> 00:25:01,110
platforms in the future today we're

00:24:59,610 --> 00:25:02,700
launching our first paid plan called the

00:25:01,110 --> 00:25:04,919
priority plan that adds support for

00:25:02,700 --> 00:25:07,860
teams and for some dedicated build

00:25:04,919 --> 00:25:09,450
infrastructure so teams allow you to

00:25:07,860 --> 00:25:12,059
collaborate on the same map from

00:25:09,450 --> 00:25:13,559
different accounts so different people

00:25:12,059 --> 00:25:14,700
on your team can publish and rollback

00:25:13,559 --> 00:25:16,679
and whatever and you don't have to be

00:25:14,700 --> 00:25:19,320
sharing credentials between people and

00:25:16,679 --> 00:25:21,990
they can also give access to people to

00:25:19,320 --> 00:25:24,899
view the app from the iOS version the

00:25:21,990 --> 00:25:26,429
App Store client in addition to that the

00:25:24,899 --> 00:25:27,870
dedicated build infrastructure means

00:25:26,429 --> 00:25:29,279
that your builds that you run through

00:25:27,870 --> 00:25:31,260
the build service never have to sit in a

00:25:29,279 --> 00:25:34,440
queue you run the build and it'll be

00:25:31,260 --> 00:25:36,659
processed essentially immediately or as

00:25:34,440 --> 00:25:38,580
close to immediately as possible coming

00:25:36,659 --> 00:25:40,230
up we have private snacks we've had

00:25:38,580 --> 00:25:42,360
people asking for this for a while a lot

00:25:40,230 --> 00:25:44,669
of people will use snack internally at

00:25:42,360 --> 00:25:46,769
their larger companies to create

00:25:44,669 --> 00:25:48,330
prototypes and share things around and

00:25:46,769 --> 00:25:49,860
they don't want this kind of thing to be

00:25:48,330 --> 00:25:51,690
public so we're going to be adding

00:25:49,860 --> 00:25:52,679
support for you to make private snacks

00:25:51,690 --> 00:25:55,710
and just share them with people on your

00:25:52,679 --> 00:25:58,649
team some better integration of the

00:25:55,710 --> 00:26:00,559
services into CI optional modules which

00:25:58,649 --> 00:26:02,850
I mentioned before and custom modules

00:26:00,559 --> 00:26:04,220
that's set the community plan so

00:26:02,850 --> 00:26:06,990
everything people have been using so far

00:26:04,220 --> 00:26:09,840
remains free and our services will

00:26:06,990 --> 00:26:11,370
continue to be able to be operated on

00:26:09,840 --> 00:26:12,659
your own infrastructure so it's just a

00:26:11,370 --> 00:26:14,280
matter of if you want the convenience

00:26:12,659 --> 00:26:16,140
and

00:26:14,280 --> 00:26:18,210
and these capabilities just out of the

00:26:16,140 --> 00:26:20,130
box without the headache of maintaining

00:26:18,210 --> 00:26:24,900
your infrastructure and and whatnot then

00:26:20,130 --> 00:26:26,669
this could be a good option for you so

00:26:24,900 --> 00:26:28,770
that's about it just want to mention

00:26:26,669 --> 00:26:31,559
that coming up quite a ways away from

00:26:28,770 --> 00:26:32,940
now next April a pas cough is a

00:26:31,559 --> 00:26:35,400
conference that we do with software

00:26:32,940 --> 00:26:38,610
mentioned in Krakow Poland a few people

00:26:35,400 --> 00:26:40,679
were here that I saw there you know last

00:26:38,610 --> 00:26:42,539
April it was really fun so I encourage

00:26:40,679 --> 00:26:44,850
you to check it out and we'll talk more

00:26:42,539 --> 00:26:48,100
about Expo there as well and and just

00:26:44,850 --> 00:26:49,820
react native in general thank you

00:26:48,100 --> 00:27:03,119
[Applause]

00:26:49,820 --> 00:27:03,119

YouTube URL: https://www.youtube.com/watch?v=Z2WV9DWrPNk


