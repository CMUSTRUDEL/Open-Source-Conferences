Title: Chain React 2019- Alex Hinson- LT- Convert a React Native Project to Typescript in 10 Minutes
Publication date: 2019-08-06
Playlist: Chain React 2019
Description: 
	"As TypeScript continues it's gradual take over of the JavaScript world, you might be having some similar FOMO as myself:

“What will all my friends think of me if I'm not using TypeScript in my React Native project?” 
“Where do I even begin to convert this giant codebase to TypeScript?”
“What the #*$% even is TypeScript?”

Luckily, there is a solution! And it won't take you weeks to do!
This talk will show you all the steps involved in converting a React Native project to TypeScript, as well as many of the pitfalls and gotchas that you might encounter along the way. 


https://speakerdeck.com/amhinson/convert-a-react-native-project-to-typescript-in-10-minutes
Captions: 
	00:00:10,370 --> 00:00:17,850
yeah hey everyone I'm Alex I work for a

00:00:14,639 --> 00:00:19,080
great company called airship like I just

00:00:17,850 --> 00:00:20,910
said they're based and

00:00:19,080 --> 00:00:22,830
the companies based in Birmingham but I

00:00:20,910 --> 00:00:24,510
live in Chattanooga I want to first

00:00:22,830 --> 00:00:26,010
start off in a more personal note by

00:00:24,510 --> 00:00:27,750
just kind of saying how thankful I am to

00:00:26,010 --> 00:00:30,960
be here so I've attended chain react for

00:00:27,750 --> 00:00:32,520
the past two years and very very honored

00:00:30,960 --> 00:00:35,219
very thankful to be able to present over

00:00:32,520 --> 00:00:37,649
the course of this year over the course

00:00:35,219 --> 00:00:39,180
of those two years a lot has obviously

00:00:37,649 --> 00:00:41,460
changed within the react and react

00:00:39,180 --> 00:00:44,129
Native community particularly regarding

00:00:41,460 --> 00:00:46,079
typescript so as I'm sure everyone in

00:00:44,129 --> 00:00:48,510
the room can attest to it's kind of

00:00:46,079 --> 00:00:50,129
impossible to browse Twitter or blogs

00:00:48,510 --> 00:00:52,559
and not see people talking about

00:00:50,129 --> 00:00:54,300
switching over to typescript so like if

00:00:52,559 --> 00:00:55,559
your timeline is anything like mine

00:00:54,300 --> 00:00:58,140
you've probably seen things like this

00:00:55,559 --> 00:01:00,570
where you know you got Kent C Dodds

00:00:58,140 --> 00:01:02,640
talking about it Dan Abramov talking

00:01:00,570 --> 00:01:03,030
about it Raphael who's somewhere around

00:01:02,640 --> 00:01:04,589
here

00:01:03,030 --> 00:01:07,439
he's been tweeting about it for awhile

00:01:04,589 --> 00:01:09,150
even the infinite red crew there they're

00:01:07,439 --> 00:01:11,159
all in on type surfing and talking about

00:01:09,150 --> 00:01:13,350
converting projects over so if you're

00:01:11,159 --> 00:01:14,939
anything like me you might be might get

00:01:13,350 --> 00:01:16,140
a little bit of FOMO any time these

00:01:14,939 --> 00:01:18,540
people tweet about things that you're

00:01:16,140 --> 00:01:20,189
not currently doing in your work so

00:01:18,540 --> 00:01:22,920
fortunately at heirship we've moved a

00:01:20,189 --> 00:01:25,409
handful of projects over to typescript

00:01:22,920 --> 00:01:27,659
and along the way I found a repeatable

00:01:25,409 --> 00:01:29,790
compartmentalized pattern to approach

00:01:27,659 --> 00:01:32,729
this type of conversion from regular

00:01:29,790 --> 00:01:33,930
JavaScript to typescript so if you

00:01:32,729 --> 00:01:35,729
aren't quite as familiar with what

00:01:33,930 --> 00:01:37,590
typescript is unfortunate we don't

00:01:35,729 --> 00:01:39,720
really have a lot of time to go it into

00:01:37,590 --> 00:01:41,729
any sort of detail but essentially

00:01:39,720 --> 00:01:44,369
typescript is a superset of JavaScript

00:01:41,729 --> 00:01:45,630
so it's built on top of the JavaScript

00:01:44,369 --> 00:01:47,549
you already know it just has some

00:01:45,630 --> 00:01:50,189
additional features that make it unique

00:01:47,549 --> 00:01:52,500
such as types so this close relationship

00:01:50,189 --> 00:01:54,600
with JavaScript is what makes a

00:01:52,500 --> 00:01:56,939
conversion a lot more manageable than

00:01:54,600 --> 00:01:59,040
you might think so throughout the

00:01:56,939 --> 00:02:02,130
process today we're gonna be using an

00:01:59,040 --> 00:02:04,740
existing project of mine which may be a

00:02:02,130 --> 00:02:07,350
bit arbitrarily simple but I know

00:02:04,740 --> 00:02:09,509
strangely important to society right now

00:02:07,350 --> 00:02:11,069
I don't know but nonetheless the

00:02:09,509 --> 00:02:13,360
projects can help convey some ideas that

00:02:11,069 --> 00:02:15,220
are this conversion is going to

00:02:13,360 --> 00:02:16,960
or happen so one of the great things

00:02:15,220 --> 00:02:19,360
about typescript is that it is very

00:02:16,960 --> 00:02:21,520
configurable so we can make it as strict

00:02:19,360 --> 00:02:23,980
or as loose as we want in terms of type

00:02:21,520 --> 00:02:25,390
checking so a common problem I've seen

00:02:23,980 --> 00:02:27,430
is people trying to convert projects

00:02:25,390 --> 00:02:29,350
over to typescript and basically trying

00:02:27,430 --> 00:02:31,690
to do it all in one go with the strict

00:02:29,350 --> 00:02:34,660
configuration so like the initial setup

00:02:31,690 --> 00:02:36,520
of that is is way more daunting than it

00:02:34,660 --> 00:02:38,980
probably should be so that's what we're

00:02:36,520 --> 00:02:41,140
splitting up into three particular steps

00:02:38,980 --> 00:02:42,460
so each of the three steps that we're

00:02:41,140 --> 00:02:45,160
going to talk about today could be the

00:02:42,460 --> 00:02:46,750
end of your typescript conversion and

00:02:45,160 --> 00:02:49,630
you'll get a certain level of benefits

00:02:46,750 --> 00:02:51,610
at each at each step so we're gonna go

00:02:49,630 --> 00:02:54,040
from the loosest configuration to the

00:02:51,610 --> 00:02:56,200
strictest and then you can make your own

00:02:54,040 --> 00:02:59,320
judgments about what makes sense for you

00:02:56,200 --> 00:03:01,480
and your team so on to step one we're

00:02:59,320 --> 00:03:04,000
calling it just make it work so the goal

00:03:01,480 --> 00:03:05,590
for the first step is simply to get our

00:03:04,000 --> 00:03:07,270
code running again without having to

00:03:05,590 --> 00:03:09,760
make any significant changes to the code

00:03:07,270 --> 00:03:11,980
itself so we'll need to set up a basic

00:03:09,760 --> 00:03:14,410
config file so that type strip can know

00:03:11,980 --> 00:03:16,900
what rules we want to follow or not

00:03:14,410 --> 00:03:18,640
follow and as I mentioned before this

00:03:16,900 --> 00:03:22,600
would be the loosest configuration of

00:03:18,640 --> 00:03:25,420
typescript so here's an example TS

00:03:22,600 --> 00:03:26,860
config file for react native this is

00:03:25,420 --> 00:03:28,570
this would live in the root of your

00:03:26,860 --> 00:03:29,830
project so it has a couple of rules

00:03:28,570 --> 00:03:31,840
we're going to gloss over for the sake

00:03:29,830 --> 00:03:34,989
of time but I want to focus on one in

00:03:31,840 --> 00:03:38,080
particular setting no implicit any to

00:03:34,989 --> 00:03:40,239
false will allow implicit in ease so

00:03:38,080 --> 00:03:41,920
these implicit in ease are used in

00:03:40,239 --> 00:03:44,980
typescript when it can't infer a

00:03:41,920 --> 00:03:46,840
particular type of a variable so we're

00:03:44,980 --> 00:03:48,760
allowing these in the first step just to

00:03:46,840 --> 00:03:51,220
get our code to our project to compile

00:03:48,760 --> 00:03:53,820
with typescript without making any

00:03:51,220 --> 00:03:57,820
significant changes to the code itself

00:03:53,820 --> 00:03:59,230
so the next thing we need to do is is

00:03:57,820 --> 00:04:02,980
just gonna involve changing the file

00:03:59,230 --> 00:04:05,440
extensions over from Jas to GS and TS x

00:04:02,980 --> 00:04:08,050
so one slight gotcha with typescript is

00:04:05,440 --> 00:04:10,720
that anytime you want to use JSX in your

00:04:08,050 --> 00:04:12,790
code the file has to end and dot tsx

00:04:10,720 --> 00:04:14,890
which is a bit stricter than how

00:04:12,790 --> 00:04:17,859
javascript might work so if you have a

00:04:14,890 --> 00:04:19,660
larger project that isn't just to a to

00:04:17,859 --> 00:04:21,609
screen app with cats

00:04:19,660 --> 00:04:23,979
manually changing this over could be a

00:04:21,609 --> 00:04:26,260
bit more daunting but luckily there's an

00:04:23,979 --> 00:04:26,980
excellent tool and perfectly title tool

00:04:26,260 --> 00:04:29,650
called

00:04:26,980 --> 00:04:31,780
js2 TS converter that handles changing

00:04:29,650 --> 00:04:35,650
these file extensions over as well as

00:04:31,780 --> 00:04:37,780
parsing the file for any JSX that that

00:04:35,650 --> 00:04:40,150
might be in the in the file and naming

00:04:37,780 --> 00:04:42,880
that with the dot TSX extension in that

00:04:40,150 --> 00:04:45,130
case so once we're done changing the

00:04:42,880 --> 00:04:47,800
file extensions over we're working with

00:04:45,130 --> 00:04:49,690
a real type script project okay

00:04:47,800 --> 00:04:51,880
however there's probably a decent

00:04:49,690 --> 00:04:54,280
possibility that you might still be

00:04:51,880 --> 00:04:57,940
seeing a few errors which is actually a

00:04:54,280 --> 00:04:59,800
good thing so in my example with the cat

00:04:57,940 --> 00:05:01,300
app I was really rushed for time you

00:04:59,800 --> 00:05:03,900
know I had investors calling me they

00:05:01,300 --> 00:05:06,040
were like we need this cat app right now

00:05:03,900 --> 00:05:07,360
and I was like probably need to write

00:05:06,040 --> 00:05:09,460
more tests and they're like no we have

00:05:07,360 --> 00:05:10,320
to have the cats and so I had to rush

00:05:09,460 --> 00:05:12,760
into the App Store

00:05:10,320 --> 00:05:14,650
unfortunately I had a few fundamental

00:05:12,760 --> 00:05:17,200
JavaScript issues that went unnoticed

00:05:14,650 --> 00:05:19,060
before but types trip is now able to

00:05:17,200 --> 00:05:20,380
identify those errors immediately and

00:05:19,060 --> 00:05:23,680
give me some feedback as to what the

00:05:20,380 --> 00:05:25,990
problem is so in this example you can

00:05:23,680 --> 00:05:28,150
see I have a log error function at the

00:05:25,990 --> 00:05:30,010
top it expects two arguments however

00:05:28,150 --> 00:05:30,910
when I'm using it at the bottom I'm only

00:05:30,010 --> 00:05:33,310
passing it one

00:05:30,910 --> 00:05:35,230
so type scrip is able to bring it to my

00:05:33,310 --> 00:05:38,110
attention immediately and tell me what

00:05:35,230 --> 00:05:40,840
argument I'm missing in the in the table

00:05:38,110 --> 00:05:42,700
so once I fix these issues the project

00:05:40,840 --> 00:05:46,570
should run successfully and we're

00:05:42,700 --> 00:05:50,050
officially done with step one so now for

00:05:46,570 --> 00:05:51,820
step two we're gonna be explicit so the

00:05:50,050 --> 00:05:54,580
next step in the process is going to be

00:05:51,820 --> 00:05:57,880
to only allow explicit innies by

00:05:54,580 --> 00:05:59,410
toggling no and plus at any to true so

00:05:57,880 --> 00:06:01,960
this means that instead of typescript

00:05:59,410 --> 00:06:04,030
defaulting to in any type when it can't

00:06:01,960 --> 00:06:06,010
use type inference it's actually gonna

00:06:04,030 --> 00:06:07,210
give it a compile error so all the

00:06:06,010 --> 00:06:09,190
places that the compiler was

00:06:07,210 --> 00:06:11,170
automatically adding it any type will

00:06:09,190 --> 00:06:13,920
now require you to give it a type or

00:06:11,170 --> 00:06:16,600
explicitly say it's an inning which

00:06:13,920 --> 00:06:19,570
contrary to prop contrary to popular

00:06:16,600 --> 00:06:20,980
belief using any types is fine use them

00:06:19,570 --> 00:06:23,440
when you need to

00:06:20,980 --> 00:06:27,370
don't don't feel any pressure to not or

00:06:23,440 --> 00:06:28,870
to not use any so you can see here in

00:06:27,370 --> 00:06:31,780
this example I'm saying that this

00:06:28,870 --> 00:06:35,470
function expects an image ID and as a

00:06:31,780 --> 00:06:36,430
string and value as a boolean so I would

00:06:35,470 --> 00:06:39,010
then need to go through the application

00:06:36,430 --> 00:06:40,780
and do the same sort of thing by

00:06:39,010 --> 00:06:42,670
specifying the argument types for

00:06:40,780 --> 00:06:45,660
the different functions and methods of

00:06:42,670 --> 00:06:48,490
whatnot so this is also a good time to

00:06:45,660 --> 00:06:50,530
start creating the common object types

00:06:48,490 --> 00:06:52,960
that are used throughout the project and

00:06:50,530 --> 00:06:55,390
adding them where possible so here's a

00:06:52,960 --> 00:06:56,310
cat object type you can see all the

00:06:55,390 --> 00:06:59,260
properties that it has

00:06:56,310 --> 00:07:00,640
I'm then going to use this type all over

00:06:59,260 --> 00:07:02,800
my project any time I'm dealing with a

00:07:00,640 --> 00:07:06,130
cat in the data so I'm just going to add

00:07:02,800 --> 00:07:07,930
it as the type in the function another

00:07:06,130 --> 00:07:10,270
part of this step will be to bring in

00:07:07,930 --> 00:07:12,910
types from third-party libraries that

00:07:10,270 --> 00:07:14,410
don't provide type script types so if

00:07:12,910 --> 00:07:16,960
the library is written in regular

00:07:14,410 --> 00:07:19,690
JavaScript we can still add types on top

00:07:16,960 --> 00:07:21,280
of it that describe its usage so there's

00:07:19,690 --> 00:07:24,580
an excellent open-source resource called

00:07:21,280 --> 00:07:26,500
definitely typed that contains types for

00:07:24,580 --> 00:07:29,500
many popular libraries such as you know

00:07:26,500 --> 00:07:32,500
lodash or react or react native itself

00:07:29,500 --> 00:07:34,930
even so you just going to add at types

00:07:32,500 --> 00:07:38,490
before the library name and then just

00:07:34,930 --> 00:07:40,930
add it to your projects dependencies so

00:07:38,490 --> 00:07:43,450
this step will probably take a bit

00:07:40,930 --> 00:07:45,729
longer than that first step so but the

00:07:43,450 --> 00:07:47,350
efforts you spend doing this will pay

00:07:45,729 --> 00:07:49,750
off dividends once you start adding to

00:07:47,350 --> 00:07:52,150
your codebase and especially when you

00:07:49,750 --> 00:07:54,130
start refactoring your code so like I

00:07:52,150 --> 00:07:56,020
mentioned before any of these steps

00:07:54,130 --> 00:07:58,840
could be the end of your types of

00:07:56,020 --> 00:08:00,520
conversion so we have many projects at

00:07:58,840 --> 00:08:03,400
heirship that ended up somewhere in the

00:08:00,520 --> 00:08:04,900
middle of steps one and two and honestly

00:08:03,400 --> 00:08:06,820
they're a lot better off because of that

00:08:04,900 --> 00:08:09,700
so however if you want to keep pushing

00:08:06,820 --> 00:08:13,840
on and go all in on typescript there's

00:08:09,700 --> 00:08:17,590
only one more step we'll call it strict

00:08:13,840 --> 00:08:20,530
mode so the last step involves enabling

00:08:17,590 --> 00:08:22,990
the strict setting which simply adds a

00:08:20,530 --> 00:08:25,240
number of strict rules for typescript to

00:08:22,990 --> 00:08:27,780
adhere to even though the studying might

00:08:25,240 --> 00:08:30,280
sound a bit invasive and over-the-top

00:08:27,780 --> 00:08:33,010
these rules really just enforced good

00:08:30,280 --> 00:08:34,570
JavaScript patterns in your code so one

00:08:33,010 --> 00:08:37,659
of the rules enabled with strict is

00:08:34,570 --> 00:08:39,789
straight null checks so this was created

00:08:37,659 --> 00:08:41,740
to ensure that you don't try to use the

00:08:39,789 --> 00:08:44,560
variable that could potentially be null

00:08:41,740 --> 00:08:46,300
or undefined so for example we have this

00:08:44,560 --> 00:08:49,450
cat type from earlier and you can see

00:08:46,300 --> 00:08:50,830
that the age property is optional so you

00:08:49,450 --> 00:08:52,690
can see that it's optional because it

00:08:50,830 --> 00:08:56,320
has a question mark after the key which

00:08:52,690 --> 00:08:58,300
means that it could be undefined so when

00:08:56,320 --> 00:09:01,030
I try to run the two string method on

00:08:58,300 --> 00:09:02,530
age types what is going to give me or

00:09:01,030 --> 00:09:04,000
types going to give me an error so I

00:09:02,530 --> 00:09:05,860
need to make sure age exists first

00:09:04,000 --> 00:09:07,720
before trying to run that method

00:09:05,860 --> 00:09:10,390
otherwise I'm just going to return a

00:09:07,720 --> 00:09:13,120
default string so depending on the

00:09:10,390 --> 00:09:14,709
project there might actually not be that

00:09:13,120 --> 00:09:18,250
much refactoring for step three at all

00:09:14,709 --> 00:09:19,630
if you're already writing safe and safe

00:09:18,250 --> 00:09:22,050
JavaScript and there's a high likelihood

00:09:19,630 --> 00:09:24,640
that types rip is going to agree as well

00:09:22,050 --> 00:09:27,850
so and that's pretty much it so we've

00:09:24,640 --> 00:09:29,620
taken a standard react native JavaScript

00:09:27,850 --> 00:09:33,010
project and successfully converted over

00:09:29,620 --> 00:09:35,589
to type strip and three contain steps so

00:09:33,010 --> 00:09:38,709
first we added a basic type script

00:09:35,589 --> 00:09:41,020
configuration and simply change the file

00:09:38,709 --> 00:09:42,550
extension is over then we got more

00:09:41,020 --> 00:09:44,709
explicit about the types we're using

00:09:42,550 --> 00:09:47,080
throughout the application by turning

00:09:44,709 --> 00:09:49,150
off implicit in ease and creating our

00:09:47,080 --> 00:09:51,760
own common types as well as bringing in

00:09:49,150 --> 00:09:53,650
third-party types and then finally we

00:09:51,760 --> 00:09:55,630
enabled this strict configuration which

00:09:53,650 --> 00:09:59,320
further ensures that we're writing safe

00:09:55,630 --> 00:10:01,150
and air resilient code now I I know the

00:09:59,320 --> 00:10:03,760
title of this lightning talk might have

00:10:01,150 --> 00:10:05,770
been a bit misleading because a full and

00:10:03,760 --> 00:10:08,230
complete conversion to type script with

00:10:05,770 --> 00:10:10,240
a robust project that isn't just two

00:10:08,230 --> 00:10:12,990
screens about cats you know could take

00:10:10,240 --> 00:10:15,550
days weeks or even months to

00:10:12,990 --> 00:10:17,470
successfully pour it over but I want to

00:10:15,550 --> 00:10:19,540
reiterate the fact that types rip can

00:10:17,470 --> 00:10:21,550
add value to your project you know at

00:10:19,540 --> 00:10:23,050
any step no matter if you're just

00:10:21,550 --> 00:10:24,790
changing the file extensions over and

00:10:23,050 --> 00:10:27,070
setting up the config or you're a

00:10:24,790 --> 00:10:29,080
hundred percent integrated so I hope

00:10:27,070 --> 00:10:30,520
this quick talk has helped clear up some

00:10:29,080 --> 00:10:32,140
questions you might have had but as you

00:10:30,520 --> 00:10:34,660
might imagine there's a lot more to this

00:10:32,140 --> 00:10:36,339
process then then we can fit in in ten

00:10:34,660 --> 00:10:38,080
minutes so please come find me

00:10:36,339 --> 00:10:39,100
afterwards if you have any more

00:10:38,080 --> 00:10:41,410
questions about typescript

00:10:39,100 --> 00:10:42,150
and react native so thank you very much

00:10:41,410 --> 00:10:45,920
for having me

00:10:42,150 --> 00:10:59,230
[Applause]

00:10:45,920 --> 00:10:59,230

YouTube URL: https://www.youtube.com/watch?v=lZeXnW8qUdY


