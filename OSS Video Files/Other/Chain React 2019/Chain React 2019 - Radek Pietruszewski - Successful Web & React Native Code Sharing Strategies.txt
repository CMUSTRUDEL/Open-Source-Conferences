Title: Chain React 2019 - Radek Pietruszewski - Successful Web & React Native Code Sharing Strategies
Publication date: 2019-08-06
Playlist: Chain React 2019
Description: 
	"At Nozbe, we share almost all component-level code between React for the web and React Native (both iOS and Android) — without ReactXP, react-native-web, or react-primitives!

Let me show you how we did this — from project setup, through shared infrastructure, all the way up to shared components and styling — and how you can achieve the same thing.

https://www.dropbox.com/s/dzaedyr0dzptoaj/SuccessfulCodeSharingStrategies-v1.1.pdf?dl=0
Captions: 
	00:00:11,330 --> 00:00:15,089
all right thank you so much thanks for

00:00:14,519 --> 00:00:17,310
coming

00:00:15,089 --> 00:00:19,050
my name is Roddick I'm the technical

00:00:17,310 --> 00:00:21,840
director at nas B and in this

00:00:19,050 --> 00:00:24,420
presentation I will show you how we've

00:00:21,840 --> 00:00:26,250
built a truly cross-platform app sharing

00:00:24,420 --> 00:00:28,710
the vast majority of our code between

00:00:26,250 --> 00:00:30,840
not just iOS and Android but the web as

00:00:28,710 --> 00:00:36,270
well without using react native web

00:00:30,840 --> 00:00:38,070
react XP or other existing solutions the

00:00:36,270 --> 00:00:40,170
following is a distillation of what

00:00:38,070 --> 00:00:42,239
we've learned building those before our

00:00:40,170 --> 00:00:44,879
company has had a successful product on

00:00:42,239 --> 00:00:46,920
the market for 12 years but throughout

00:00:44,879 --> 00:00:49,379
all of its iterations it has always been

00:00:46,920 --> 00:00:51,239
a web app and three years ago we've

00:00:49,379 --> 00:00:52,980
decided to rewrite everything from

00:00:51,239 --> 00:00:55,739
scratch using react and react native

00:00:52,980 --> 00:00:57,629
still being a small company it was

00:00:55,739 --> 00:00:59,969
extremely important for us to share as

00:00:57,629 --> 00:01:03,390
much code between all of the platforms

00:00:59,969 --> 00:01:05,610
as possible so I'll show you a very

00:01:03,390 --> 00:01:07,920
small snippet of the app just so you

00:01:05,610 --> 00:01:10,080
have the context as to what sort of

00:01:07,920 --> 00:01:13,590
challenges we face and overcome in our

00:01:10,080 --> 00:01:15,030
quest to sharing code so Osby is

00:01:13,590 --> 00:01:16,979
essentially to do up four teams right

00:01:15,030 --> 00:01:20,610
and this is filled with just randomly

00:01:16,979 --> 00:01:24,060
generated data and notice a bunch of

00:01:20,610 --> 00:01:26,880
mobile specific patterns here like the

00:01:24,060 --> 00:01:29,130
drawer layout we have here now we have a

00:01:26,880 --> 00:01:31,680
project and when I want to add a task

00:01:29,130 --> 00:01:34,350
notice above the soft keyboard you have

00:01:31,680 --> 00:01:36,540
a bar with attributes I can add to a

00:01:34,350 --> 00:01:38,700
task in the task we have a discussion

00:01:36,540 --> 00:01:41,040
you can see all the comments you can tap

00:01:38,700 --> 00:01:43,649
off on reactions see who's reacted at a

00:01:41,040 --> 00:01:46,229
new reaction and if you want to add a

00:01:43,649 --> 00:01:48,689
new comment we'll have a full screen

00:01:46,229 --> 00:01:50,820
interface for that and for above that

00:01:48,689 --> 00:01:52,560
and all of the menus and Pickers will

00:01:50,820 --> 00:01:54,899
have this bottom sheet card interface

00:01:52,560 --> 00:01:56,880
which just makes a lot of sense on iOS

00:01:54,899 --> 00:02:00,329
it's really nice to use with some tweaks

00:01:56,880 --> 00:02:02,219
on Android as well now contrast that

00:02:00,329 --> 00:02:04,680
with the desktop version which is also

00:02:02,219 --> 00:02:07,110
the web version as you can see this is

00:02:04,680 --> 00:02:09,209
mostly the same thing mostly looks kind

00:02:07,110 --> 00:02:11,790
of the same works the same way layout is

00:02:09,209 --> 00:02:14,220
completely different though it's now not

00:02:11,790 --> 00:02:16,440
much bigger it's all in column

00:02:14,220 --> 00:02:17,909
we don't have a soft keyboard so the

00:02:16,440 --> 00:02:20,549
attributes are going to be on the right

00:02:17,909 --> 00:02:22,980
of the input it doesn't make sense to

00:02:20,549 --> 00:02:26,250
use a card interface so use menus and

00:02:22,980 --> 00:02:28,110
popovers also a lot of small tweaks like

00:02:26,250 --> 00:02:31,470
everything is slightly smaller on

00:02:28,110 --> 00:02:33,120
desktop we can use certain things like

00:02:31,470 --> 00:02:36,000
hover gestures which are just not

00:02:33,120 --> 00:02:39,120
available mobile and certain patterns

00:02:36,000 --> 00:02:40,829
are just different for the web such as

00:02:39,120 --> 00:02:42,269
if you want to add a new comment it

00:02:40,829 --> 00:02:43,620
doesn't make sense to cover up the

00:02:42,269 --> 00:02:47,040
entire screen it's better to have the

00:02:43,620 --> 00:02:49,410
discussion in context right so as you

00:02:47,040 --> 00:02:52,650
can see mostly the same thing mostly the

00:02:49,410 --> 00:02:55,470
same UI logic product but a lot of

00:02:52,650 --> 00:02:57,959
differences small and big so how do we

00:02:55,470 --> 00:02:59,790
fare with code reuse how much code were

00:02:57,959 --> 00:03:02,700
we able to reuse between all the

00:02:59,790 --> 00:03:08,280
platforms as of last week maybe 2

00:03:02,700 --> 00:03:10,950
percent and of course this is not just

00:03:08,280 --> 00:03:13,290
like business logic data model utilities

00:03:10,950 --> 00:03:18,000
it's pretty much all of the components

00:03:13,290 --> 00:03:19,500
as well so how do you do that well one

00:03:18,000 --> 00:03:29,669
option is to go with one of these

00:03:19,500 --> 00:03:31,980
libraries and this is sort of an easy

00:03:29,669 --> 00:03:33,480
way to go like if you're starting out

00:03:31,980 --> 00:03:35,819
you want something that's been tested

00:03:33,480 --> 00:03:38,430
that a lot of other people done this is

00:03:35,819 --> 00:03:40,709
the way to go if you have a react native

00:03:38,430 --> 00:03:42,840
app that's already built out and now you

00:03:40,709 --> 00:03:46,260
need to port it to the web use react

00:03:42,840 --> 00:03:48,780
native web there's just not much else to

00:03:46,260 --> 00:03:50,639
pick from but at least for us when we

00:03:48,780 --> 00:03:53,069
started 2 years ago none of the

00:03:50,639 --> 00:03:54,540
solutions that existed fit our bill we

00:03:53,069 --> 00:03:56,699
didn't think that it's the right

00:03:54,540 --> 00:03:59,370
approach to take all of the react native

00:03:56,699 --> 00:04:01,799
API and just bring it to the web pretend

00:03:59,370 --> 00:04:04,379
that the web is react native we wanted

00:04:01,799 --> 00:04:06,180
to chart a different path for ourselves

00:04:04,379 --> 00:04:08,609
because we wanted to have flexibility

00:04:06,180 --> 00:04:10,709
control over the abstractions and really

00:04:08,609 --> 00:04:12,690
good performance so instead of bringing

00:04:10,709 --> 00:04:15,979
react native to the web we wanted to

00:04:12,690 --> 00:04:19,109
have as lightweight as possible an

00:04:15,979 --> 00:04:21,030
abstraction layer that bridges react

00:04:19,109 --> 00:04:23,909
native and the web instead of bringing

00:04:21,030 --> 00:04:27,319
react native to the web so we don't use

00:04:23,909 --> 00:04:30,090
any of that so how do we do that instead

00:04:27,319 --> 00:04:32,310
so let's start by talking just project

00:04:30,090 --> 00:04:36,599
structure how do you go about having a

00:04:32,310 --> 00:04:38,849
shared codebase we have everything in

00:04:36,599 --> 00:04:40,680
one mono repo there's one repository for

00:04:38,849 --> 00:04:43,830
the entire app and it comes in three

00:04:40,680 --> 00:04:45,900
chunks one is the app folder and it

00:04:43,830 --> 00:04:48,000
contains all of the application code all

00:04:45,900 --> 00:04:50,849
of the application JavaScript the native

00:04:48,000 --> 00:04:54,150
folder is for react native specific

00:04:50,849 --> 00:04:57,900
things so react native configuration the

00:04:54,150 --> 00:04:59,460
Xcode project the Android project all of

00:04:57,900 --> 00:05:01,919
the negative Swift and Kotlin code we've

00:04:59,460 --> 00:05:03,630
written and the web folder is mostly for

00:05:01,919 --> 00:05:05,849
web configuration and things like that

00:05:03,630 --> 00:05:10,229
we also have multiple package Jason's

00:05:05,849 --> 00:05:12,630
the root one is purely for development

00:05:10,229 --> 00:05:16,199
tools such as Babel aslant just a

00:05:12,630 --> 00:05:17,789
package jason is purely for application

00:05:16,199 --> 00:05:20,729
dependencies that are shared across the

00:05:17,789 --> 00:05:23,310
board native package jason is for react

00:05:20,729 --> 00:05:25,469
native specific tooling as well as app

00:05:23,310 --> 00:05:27,360
dependencies that only work for react

00:05:25,469 --> 00:05:30,599
native just to keep things organized and

00:05:27,360 --> 00:05:33,599
the same for the web and just like in

00:05:30,599 --> 00:05:35,729
react native you can have dot io SJS and

00:05:33,599 --> 00:05:38,159
android draya's files used to configure

00:05:35,729 --> 00:05:40,199
all of our tools to accept web dot j s

00:05:38,159 --> 00:05:41,729
and- that is when we have to

00:05:40,199 --> 00:05:50,099
differentiate between those two

00:05:41,729 --> 00:05:52,289
platforms so there's a lot of tools that

00:05:50,099 --> 00:05:54,120
you need to make aware of this setup

00:05:52,289 --> 00:05:58,440
that they understand the mono repo and

00:05:54,120 --> 00:06:00,479
understand the custom file extensions so

00:05:58,440 --> 00:06:02,279
unfortunately I won't go into the nuts

00:06:00,479 --> 00:06:04,319
and bolts of how to configure that

00:06:02,279 --> 00:06:07,289
because this could take the entire talk

00:06:04,319 --> 00:06:09,150
but what we plan on doing is either to

00:06:07,289 --> 00:06:11,460
write it up as a blog post or open

00:06:09,150 --> 00:06:15,000
source a full project template later

00:06:11,460 --> 00:06:17,370
this year ok so we have them on a repo

00:06:15,000 --> 00:06:19,409
then we need kind of an infrastructure

00:06:17,370 --> 00:06:21,479
layer the base building blocks upon

00:06:19,409 --> 00:06:22,710
which we can build our app the most

00:06:21,479 --> 00:06:25,099
important of which is of course react

00:06:22,710 --> 00:06:27,210
and react native we have that but

00:06:25,099 --> 00:06:30,419
there's an another piece that was really

00:06:27,210 --> 00:06:32,130
important for us so hands up just sort

00:06:30,419 --> 00:06:36,710
of curiosity how many of you know

00:06:32,130 --> 00:06:40,990
watermelon DB all right some people go

00:06:36,710 --> 00:06:43,240
so here's the thing we need we need

00:06:40,990 --> 00:06:46,510
some sort of data persistence layer for

00:06:43,240 --> 00:06:48,640
the app and the thing about nozbe it's

00:06:46,510 --> 00:06:53,080
an offline first app so you have all of

00:06:48,640 --> 00:06:56,250
your stuff downloaded offline on the

00:06:53,080 --> 00:06:59,230
device and it's not uncommon to have

00:06:56,250 --> 00:07:01,480
tens of thousands of records in the app

00:06:59,230 --> 00:07:03,610
all the projects tasks and comments so

00:07:01,480 --> 00:07:05,980
we need really good performance it needs

00:07:03,610 --> 00:07:09,820
to be scalable the very common approach

00:07:05,980 --> 00:07:11,500
of just going with you know persisting a

00:07:09,820 --> 00:07:12,310
Redux or a mob back store it just

00:07:11,500 --> 00:07:14,620
doesn't work

00:07:12,310 --> 00:07:16,840
trying to low load all of that at up

00:07:14,620 --> 00:07:19,330
launch would slow things down

00:07:16,840 --> 00:07:22,240
tremendously so we need a real database

00:07:19,330 --> 00:07:24,250
we need everything to be lazy loaded but

00:07:22,240 --> 00:07:26,560
because the app is really interactive we

00:07:24,250 --> 00:07:27,850
also needed to be observable reactive we

00:07:26,560 --> 00:07:28,690
need to be able to easily connect

00:07:27,850 --> 00:07:31,390
datasource

00:07:28,690 --> 00:07:33,070
to components so that they rerender when

00:07:31,390 --> 00:07:35,740
the data changed which is kind of hard

00:07:33,070 --> 00:07:38,340
to combine with lazy loading it needs to

00:07:35,740 --> 00:07:40,570
be capable of server synchronization

00:07:38,340 --> 00:07:42,340
because it's not flying first app and

00:07:40,570 --> 00:07:43,840
then you synchronize with the server to

00:07:42,340 --> 00:07:45,790
get the same thing across all devices

00:07:43,840 --> 00:07:47,380
and of course it needs to be

00:07:45,790 --> 00:07:50,500
multi-platform it needs to understand

00:07:47,380 --> 00:07:53,590
iOS Android and the web so nothing like

00:07:50,500 --> 00:07:56,440
that existed and last year we open

00:07:53,590 --> 00:07:57,970
sourced watermelon to be and you can

00:07:56,440 --> 00:08:01,060
check it out online if that's relevant

00:07:57,970 --> 00:08:05,500
per project alright let's talk about

00:08:01,060 --> 00:08:08,110
styling this is the first major obstacle

00:08:05,500 --> 00:08:09,850
to sharing components between react

00:08:08,110 --> 00:08:13,480
native and the web and you already know

00:08:09,850 --> 00:08:16,390
this but just the API is completely

00:08:13,480 --> 00:08:19,360
different here we have dips and spans on

00:08:16,390 --> 00:08:21,880
the web we have capital V views and

00:08:19,360 --> 00:08:23,980
texts you have class names we have style

00:08:21,880 --> 00:08:25,990
is just the API difference is untenable

00:08:23,980 --> 00:08:28,720
we can't use it like that we need an

00:08:25,990 --> 00:08:31,300
abstraction layer so we really like the

00:08:28,720 --> 00:08:32,380
approach of styled components not

00:08:31,300 --> 00:08:34,540
necessarily the styled

00:08:32,380 --> 00:08:36,850
- component library but a lot of

00:08:34,540 --> 00:08:40,750
libraries like that because this

00:08:36,850 --> 00:08:43,030
abstracts away HTML and CSS but at least

00:08:40,750 --> 00:08:46,360
when we started no such library existed

00:08:43,030 --> 00:08:48,490
that would be both cross platform

00:08:46,360 --> 00:08:50,440
between react native and the web and be

00:08:48,490 --> 00:08:53,110
high-performance so we created one and

00:08:50,440 --> 00:08:55,959
here's how it works

00:08:53,110 --> 00:08:59,649
when you want to make a box or text you

00:08:55,959 --> 00:09:00,820
import view or text from style that

00:08:59,649 --> 00:09:03,459
abstracts away the difference between

00:09:00,820 --> 00:09:06,130
view and div span and text and then you

00:09:03,459 --> 00:09:09,339
import styles from a local file for the

00:09:06,130 --> 00:09:11,410
component and you just define the styled

00:09:09,339 --> 00:09:14,639
component if you lose used something

00:09:11,410 --> 00:09:18,790
like style components this is broadly

00:09:14,639 --> 00:09:20,889
recognizable a box is a view its main

00:09:18,790 --> 00:09:23,170
style is style that box if you want

00:09:20,889 --> 00:09:26,350
conditional styles you add that in if

00:09:23,170 --> 00:09:28,750
you want to pass explicit as house you

00:09:26,350 --> 00:09:30,730
add that in and then in the render

00:09:28,750 --> 00:09:32,170
method or the function component you

00:09:30,730 --> 00:09:33,100
just use it like a normal component

00:09:32,170 --> 00:09:37,630
right

00:09:33,100 --> 00:09:42,610
this way we we neither directly used Dom

00:09:37,630 --> 00:09:46,600
nor do we import react native and now

00:09:42,610 --> 00:09:48,339
the Styles so ok here we do need two

00:09:46,600 --> 00:09:50,649
different files unfortunately because of

00:09:48,339 --> 00:09:52,750
the approach we took so we have styles

00:09:50,649 --> 00:09:56,110
that native that j/s with just exports

00:09:52,750 --> 00:10:00,430
as a stylesheet and a stylus web CSS

00:09:56,110 --> 00:10:02,769
with the CSS classes and we use post CSS

00:10:00,430 --> 00:10:06,279
in the web pack configuration such that

00:10:02,769 --> 00:10:08,920
the CSS file is imported from JavaScript

00:10:06,279 --> 00:10:10,510
so just import styles and it will import

00:10:08,920 --> 00:10:12,870
the right thing depending on whether you

00:10:10,510 --> 00:10:16,240
compiled for react native or the web

00:10:12,870 --> 00:10:18,699
still even though we're duplicating that

00:10:16,240 --> 00:10:22,000
part which is unfortunate and we do want

00:10:18,699 --> 00:10:25,060
to share as much as possible so what we

00:10:22,000 --> 00:10:30,130
do is we have a single style constants

00:10:25,060 --> 00:10:33,790
file so we try not to ever use literals

00:10:30,130 --> 00:10:37,089
in the style file like colors sizes

00:10:33,790 --> 00:10:40,240
margins padding it's text Styles instead

00:10:37,089 --> 00:10:42,069
we have a standardized palette of all

00:10:40,240 --> 00:10:45,550
the colors and sizes in one file and

00:10:42,069 --> 00:10:49,870
then you either import that in native or

00:10:45,550 --> 00:10:53,670
you use this CSS variables syntax which

00:10:49,870 --> 00:10:56,170
post CSS compiles to the literal and

00:10:53,670 --> 00:10:58,779
this way this is a good practice in

00:10:56,170 --> 00:11:00,939
general but particularly when we do need

00:10:58,779 --> 00:11:03,630
those two separate parts it's easier to

00:11:00,939 --> 00:11:06,259
just keep things shared and in control

00:11:03,630 --> 00:11:08,839
so we were thinking of opens

00:11:06,259 --> 00:11:10,819
our styling stout components library

00:11:08,839 --> 00:11:13,819
since it's working pretty well for us

00:11:10,819 --> 00:11:16,759
but we think we have an even better idea

00:11:13,819 --> 00:11:19,249
see the problem is that our application

00:11:16,759 --> 00:11:21,229
is big and complex enough that the

00:11:19,249 --> 00:11:23,929
performance overhead of having like

00:11:21,229 --> 00:11:26,350
actual components for each every each

00:11:23,929 --> 00:11:30,109
and every box and and piece of text is

00:11:26,350 --> 00:11:32,479
no longer negligible so we have a

00:11:30,109 --> 00:11:34,879
project in the works which is codenamed

00:11:32,479 --> 00:11:37,309
Zach's for Europe abstraction cost

00:11:34,879 --> 00:11:40,759
styling that would still allow us to

00:11:37,309 --> 00:11:43,669
have a completely shared abstraction for

00:11:40,759 --> 00:11:45,439
building styled components but the

00:11:43,669 --> 00:11:47,779
entire abstraction would be implemented

00:11:45,439 --> 00:11:50,869
at compile level as a bubble plugin such

00:11:47,779 --> 00:11:52,910
that the runtime cost of this is zero if

00:11:50,869 --> 00:11:57,009
all goes well which you know we'll see

00:11:52,910 --> 00:11:59,209
pull open search that later this year

00:11:57,009 --> 00:12:02,600
okay now let's talk about shared

00:11:59,209 --> 00:12:06,439
components the first step is to build a

00:12:02,600 --> 00:12:08,899
small library of very base UI components

00:12:06,439 --> 00:12:11,449
and I just mean the sort of components

00:12:08,899 --> 00:12:14,089
with whose implementation is completely

00:12:11,449 --> 00:12:16,609
platform dependent so this is an almost

00:12:14,089 --> 00:12:18,169
complete list that there's not as many

00:12:16,609 --> 00:12:20,779
of those as you might think but

00:12:18,169 --> 00:12:24,499
something like image text input icon for

00:12:20,779 --> 00:12:26,749
vector icons or touchable which on the

00:12:24,499 --> 00:12:29,509
web might be an anchor or a button or a

00:12:26,749 --> 00:12:31,999
div on press you just have to make two

00:12:29,509 --> 00:12:33,199
different implementations but there's

00:12:31,999 --> 00:12:36,259
just a couple of them it's not a big

00:12:33,199 --> 00:12:38,239
deal and now that we have those few

00:12:36,259 --> 00:12:41,480
layers of abstraction the base UI

00:12:38,239 --> 00:12:44,839
components library and a styling

00:12:41,480 --> 00:12:48,699
approach making actual styled components

00:12:44,839 --> 00:12:51,439
actual I'm sorry shared components is

00:12:48,699 --> 00:12:55,909
trivial like there's not that much to

00:12:51,439 --> 00:12:58,129
show you just build styled components

00:12:55,909 --> 00:13:01,519
and you compose them together with the

00:12:58,129 --> 00:13:03,949
base UI components library and this way

00:13:01,519 --> 00:13:07,009
you neither have to import react native

00:13:03,949 --> 00:13:10,039
or refer to Dom specific things in the

00:13:07,009 --> 00:13:14,109
component in x-rays file it's that's

00:13:10,039 --> 00:13:14,109
really that's it in most cases

00:13:15,820 --> 00:13:20,020
of course the devil is in the details

00:13:17,230 --> 00:13:22,480
and since we did not take the approach

00:13:20,020 --> 00:13:25,060
of bringing react native to the web you

00:13:22,480 --> 00:13:26,440
still have to deal with many platform

00:13:25,060 --> 00:13:29,590
differences and you'll have to resolve

00:13:26,440 --> 00:13:32,260
them so the first and simplest approach

00:13:29,590 --> 00:13:34,420
is to just if else it and just like

00:13:32,260 --> 00:13:36,460
react native has a platform export that

00:13:34,420 --> 00:13:38,650
allows you to differentiate between iOS

00:13:36,460 --> 00:13:41,230
and Android we have the same thing but

00:13:38,650 --> 00:13:44,560
we also add is web and is native to the

00:13:41,230 --> 00:13:46,570
mix in those cases that's really all

00:13:44,560 --> 00:13:50,290
that's needed most differences are very

00:13:46,570 --> 00:13:52,270
simple the second approach is to

00:13:50,290 --> 00:13:55,060
abstract the differences using helpers

00:13:52,270 --> 00:13:57,640
so for example when you have a text

00:13:55,060 --> 00:14:00,520
input the events of those work slightly

00:13:57,640 --> 00:14:02,020
differently on the web and in react

00:14:00,520 --> 00:14:03,790
native on the web you might have

00:14:02,020 --> 00:14:06,910
something like events target value on

00:14:03,790 --> 00:14:08,680
react native events native events text

00:14:06,910 --> 00:14:10,810
it's not a big deal you could if-else it

00:14:08,680 --> 00:14:13,180
but it just becomes tiring when you have

00:14:10,810 --> 00:14:15,430
to do it in 10 different places so

00:14:13,180 --> 00:14:18,190
there's a lot of just really small

00:14:15,430 --> 00:14:20,560
trivial differences like that and what

00:14:18,190 --> 00:14:22,060
we do is you just make a simple helper

00:14:20,560 --> 00:14:24,790
like this is essentially one line of

00:14:22,060 --> 00:14:26,620
code with index web J's index native Jes

00:14:24,790 --> 00:14:28,690
you encapsulate the entire difference

00:14:26,620 --> 00:14:30,580
between those two platforms and then in

00:14:28,690 --> 00:14:32,830
actual components you don't see that

00:14:30,580 --> 00:14:35,800
difference you just import a helper use

00:14:32,830 --> 00:14:39,850
that and all of the component level code

00:14:35,800 --> 00:14:42,970
is the same the third approach is what

00:14:39,850 --> 00:14:46,570
we call platform files so imagine you

00:14:42,970 --> 00:14:49,570
have or imagine so you have the root

00:14:46,570 --> 00:14:51,010
component of your app right it probably

00:14:49,570 --> 00:14:53,290
has a lot of things that are completely

00:14:51,010 --> 00:14:55,120
shared between all the places you

00:14:53,290 --> 00:14:57,670
probably have some context providers

00:14:55,120 --> 00:15:00,460
maybe some shared logic but some things

00:14:57,670 --> 00:15:03,130
are obviously different on the web you

00:15:00,460 --> 00:15:05,920
might have a simple column based layout

00:15:03,130 --> 00:15:07,770
just like we do and on react native you

00:15:05,920 --> 00:15:11,020
might be using some sort of drawerlayout

00:15:07,770 --> 00:15:13,300
react navigation what-have-you so you

00:15:11,020 --> 00:15:15,550
don't want to duplicate all of the codes

00:15:13,300 --> 00:15:18,220
since there are shared parts but also

00:15:15,550 --> 00:15:20,860
you need to resolve those differences so

00:15:18,220 --> 00:15:22,360
a common technique that we use is we

00:15:20,860 --> 00:15:24,010
just have an index JS file with

00:15:22,360 --> 00:15:26,260
everything that's shared and the

00:15:24,010 --> 00:15:28,420
differences are extracted into a

00:15:26,260 --> 00:15:29,350
platform web GIS file and platform

00:15:28,420 --> 00:15:31,060
native J's file

00:15:29,350 --> 00:15:32,650
and then you just put all of the

00:15:31,060 --> 00:15:34,660
snippets of components that are

00:15:32,650 --> 00:15:36,460
different or low helper functions that

00:15:34,660 --> 00:15:39,790
are just specific for this one component

00:15:36,460 --> 00:15:42,580
and this approach is particularly useful

00:15:39,790 --> 00:15:44,440
when you have to import dependencies

00:15:42,580 --> 00:15:46,480
that only work on one of those two

00:15:44,440 --> 00:15:49,720
platforms because if you put it in the

00:15:46,480 --> 00:15:52,270
index J s file a lot of libraries a lot

00:15:49,720 --> 00:15:54,100
of tools like Babel webpack will just

00:15:52,270 --> 00:15:58,000
get really confused by this

00:15:54,100 --> 00:15:59,650
so in index in J's files you only import

00:15:58,000 --> 00:16:02,320
things that are available everywhere in

00:15:59,650 --> 00:16:04,390
that web GIS that Native Jas you import

00:16:02,320 --> 00:16:06,340
things that are different and then you

00:16:04,390 --> 00:16:08,500
can react sport it so that the index.js

00:16:06,340 --> 00:16:10,300
file might use it and for the other

00:16:08,500 --> 00:16:12,760
platform you just export a placeholder

00:16:10,300 --> 00:16:16,290
such as a no op function or a component

00:16:12,760 --> 00:16:16,290
that doesn't actually render anything

00:16:16,770 --> 00:16:21,940
okay but sometimes it's not enough as a

00:16:20,020 --> 00:16:24,160
last-ditch effort if you can't really

00:16:21,940 --> 00:16:25,860
share it you might have to do two

00:16:24,160 --> 00:16:29,800
different implementations

00:16:25,860 --> 00:16:31,900
when will it be necessary one case is

00:16:29,800 --> 00:16:33,850
when you have big platform differences

00:16:31,900 --> 00:16:36,990
and again this is something like image

00:16:33,850 --> 00:16:39,310
text input there's not a lot of those

00:16:36,990 --> 00:16:41,530
the second reason to have two different

00:16:39,310 --> 00:16:43,890
implementations is when you want to have

00:16:41,530 --> 00:16:46,840
a completely different design for

00:16:43,890 --> 00:16:51,390
example you saw in my screencast how we

00:16:46,840 --> 00:16:54,490
have these menus and pickers that are

00:16:51,390 --> 00:16:56,710
represent on all the platforms but are

00:16:54,490 --> 00:16:58,510
represented visually differently such as

00:16:56,710 --> 00:17:01,750
as a popover on the web and a bottom

00:16:58,510 --> 00:17:04,270
sheet card on native so we have just one

00:17:01,750 --> 00:17:05,830
component for it we call it model but it

00:17:04,270 --> 00:17:08,880
has two different implementations that

00:17:05,830 --> 00:17:12,190
implement a completely different design

00:17:08,880 --> 00:17:14,670
the third reason to have this is when

00:17:12,190 --> 00:17:17,320
you abstract over different dependencies

00:17:14,670 --> 00:17:19,930
for instance we have a component called

00:17:17,320 --> 00:17:22,090
list because pretty much all of our

00:17:19,930 --> 00:17:24,760
lists are drag and drop a bomb and on

00:17:22,090 --> 00:17:26,890
native you need something like flat list

00:17:24,760 --> 00:17:30,430
for Liz virtualization to get good

00:17:26,890 --> 00:17:32,050
performance so we don't want all of the

00:17:30,430 --> 00:17:33,910
components all of the pages to have to

00:17:32,050 --> 00:17:35,500
think about it and and know about those

00:17:33,910 --> 00:17:37,780
differences so instead we have

00:17:35,500 --> 00:17:40,270
components like lists with two different

00:17:37,780 --> 00:17:42,790
implementations that wrap over two

00:17:40,270 --> 00:17:44,590
different external libraries and

00:17:42,790 --> 00:17:48,400
provide a common API for the rest of the

00:17:44,590 --> 00:17:49,510
app it's important to note that even

00:17:48,400 --> 00:17:53,830
when you do need two different

00:17:49,510 --> 00:17:55,660
implementations you don't want to you

00:17:53,830 --> 00:17:58,420
don't want to duplicate yourself if it's

00:17:55,660 --> 00:18:01,240
not absolutely necessary so when you do

00:17:58,420 --> 00:18:04,180
have parts that are shared extract them

00:18:01,240 --> 00:18:06,310
like extract common logic to a hook or a

00:18:04,180 --> 00:18:08,890
hydro component and put it in a common

00:18:06,310 --> 00:18:11,200
J's file that then you import from the

00:18:08,890 --> 00:18:13,300
two different implementations or if you

00:18:11,200 --> 00:18:14,740
have a really big complicated component

00:18:13,300 --> 00:18:16,720
you should probably split it into

00:18:14,740 --> 00:18:20,770
smaller parts and some of these might be

00:18:16,720 --> 00:18:24,720
completely shared and really that's all

00:18:20,770 --> 00:18:28,450
that's needed for 80 85 % code reuse

00:18:24,720 --> 00:18:30,850
still there are some missing pieces we

00:18:28,450 --> 00:18:33,670
think we can do even better and maybe

00:18:30,850 --> 00:18:37,330
get to 90% or more without compromises

00:18:33,670 --> 00:18:41,050
by with just this approach of having a

00:18:37,330 --> 00:18:42,610
shared lightweight abstraction that

00:18:41,050 --> 00:18:46,240
shares across react native and the web

00:18:42,610 --> 00:18:49,600
not bringing react native to the web for

00:18:46,240 --> 00:18:51,310
example styling so my 82% figure okay I

00:18:49,600 --> 00:18:53,710
lied a little bit doesn't include the

00:18:51,310 --> 00:18:57,190
styling the styles that are a little bit

00:18:53,710 --> 00:18:59,560
diplucate it so react native web has the

00:18:57,190 --> 00:19:02,680
solution of just compiling stylesheet to

00:18:59,560 --> 00:19:05,980
CSS but we really didn't want to do that

00:19:02,680 --> 00:19:08,590
and I don't think this is a lost cause I

00:19:05,980 --> 00:19:11,200
think we can build a tool that will

00:19:08,590 --> 00:19:14,590
provide an API that's as shared as

00:19:11,200 --> 00:19:17,890
possible but just statically compiled

00:19:14,590 --> 00:19:19,960
the styles for CSS and then for react

00:19:17,890 --> 00:19:24,100
native I think we can do this performant

00:19:19,960 --> 00:19:26,460
ly without compromises animations work

00:19:24,100 --> 00:19:29,890
in a completely different way just

00:19:26,460 --> 00:19:34,920
completely different sets of tools there

00:19:29,890 --> 00:19:37,450
are many react animations libraries but

00:19:34,920 --> 00:19:39,700
last time we did the research on that

00:19:37,450 --> 00:19:42,430
most of them were frankly not very good

00:19:39,700 --> 00:19:45,220
because they drove the animations from

00:19:42,430 --> 00:19:49,390
JavaScript and that just won't get you

00:19:45,220 --> 00:19:52,780
very nice smooth animations so actually

00:19:49,390 --> 00:19:55,030
with we do have a partial solution it's

00:19:52,780 --> 00:19:56,380
only for static animations it it won't

00:19:55,030 --> 00:19:57,850
work when you need

00:19:56,380 --> 00:19:59,740
something like react nurse to react

00:19:57,850 --> 00:20:02,170
native gesture handler for interactive

00:19:59,740 --> 00:20:04,690
animations but for static animations we

00:20:02,170 --> 00:20:06,250
made a very small simple library that

00:20:04,690 --> 00:20:09,550
essentially implements the react native

00:20:06,250 --> 00:20:12,460
animated API but it's built on top of

00:20:09,550 --> 00:20:15,960
web animations API so it actually has

00:20:12,460 --> 00:20:18,280
really nice smooth 60fps animations

00:20:15,960 --> 00:20:22,810
would anyone want to see that open

00:20:18,280 --> 00:20:29,140
sourced nice okay we'll think about it

00:20:22,810 --> 00:20:30,640
a bundling two different bundlers that's

00:20:29,140 --> 00:20:32,110
slightly annoying because those are like

00:20:30,640 --> 00:20:34,060
pretty big complex pieces of

00:20:32,110 --> 00:20:36,670
infrastructure that we just have to

00:20:34,060 --> 00:20:38,830
maintain and we think the future is with

00:20:36,670 --> 00:20:42,010
halt which is call stacks project to

00:20:38,830 --> 00:20:43,960
bring web back to or react native

00:20:42,010 --> 00:20:45,820
allison we checked it so had some

00:20:43,960 --> 00:20:48,490
missing pieces but if not today then

00:20:45,820 --> 00:20:51,630
very soon I hope we can completely share

00:20:48,490 --> 00:20:54,700
that and then there's just a lot of

00:20:51,630 --> 00:20:57,100
small and big UI components that you're

00:20:54,700 --> 00:20:59,400
just not gonna implement yourself such

00:20:57,100 --> 00:21:02,020
as Liz virtualization drag-and-drop

00:20:59,400 --> 00:21:03,760
navigation and what you see is what you

00:21:02,020 --> 00:21:07,570
get editors for like comments or

00:21:03,760 --> 00:21:09,550
something and in all of these cases we

00:21:07,570 --> 00:21:12,460
had to use two different implementations

00:21:09,550 --> 00:21:15,880
two different third-party libraries and

00:21:12,460 --> 00:21:18,580
then make a lightweight abstraction to

00:21:15,880 --> 00:21:21,370
bridge them together for WYSIWYG

00:21:18,580 --> 00:21:23,380
WordPress recently made the Guttenberg

00:21:21,370 --> 00:21:27,670
editor which might be solution to this

00:21:23,380 --> 00:21:29,710
and for other items on that list there's

00:21:27,670 --> 00:21:32,590
some work in that direction like with

00:21:29,710 --> 00:21:35,380
react navigation but for now we can't

00:21:32,590 --> 00:21:38,440
truly share that and then last but not

00:21:35,380 --> 00:21:41,260
least end-to-end testing lower levels of

00:21:38,440 --> 00:21:42,760
testing you can pretty easily share but

00:21:41,260 --> 00:21:44,080
for end-to-end testing we have two

00:21:42,760 --> 00:21:46,330
grades but completely different

00:21:44,080 --> 00:21:48,490
libraries Cypress and detox will be

00:21:46,330 --> 00:21:50,050
great to build an open source a common

00:21:48,490 --> 00:21:51,880
abstraction to bridge the two together

00:21:50,050 --> 00:21:54,370
or maybe start with a completely

00:21:51,880 --> 00:21:56,310
different approach like use kV and build

00:21:54,370 --> 00:22:02,350
that out to be like truly fully featured

00:21:56,310 --> 00:22:03,310
they'll be great all right now before I

00:22:02,350 --> 00:22:05,290
leave the stage

00:22:03,310 --> 00:22:06,730
I want to share something with you a

00:22:05,290 --> 00:22:09,180
controversial ping I think it's

00:22:06,730 --> 00:22:09,180
controversial

00:22:13,330 --> 00:22:20,509
so in the beginning when you wanted to

00:22:16,849 --> 00:22:22,639
have a nap you build the app and if you

00:22:20,509 --> 00:22:25,609
wanted to have an app for iOS and for

00:22:22,639 --> 00:22:28,369
Android you build an iOS app and an

00:22:25,609 --> 00:22:32,539
Android app but what about if you want

00:22:28,369 --> 00:22:35,659
the web app an iOS app an Android app a

00:22:32,539 --> 00:22:38,119
Mac OS app and a Windows app they'll be

00:22:35,659 --> 00:22:40,940
great right for something for an app

00:22:38,119 --> 00:22:44,450
like ours that would be perfect but but

00:22:40,940 --> 00:22:46,070
then we've with the the first the

00:22:44,450 --> 00:22:48,259
correct approach of writing it

00:22:46,070 --> 00:22:50,629
everywhere now we have to hire and build

00:22:48,259 --> 00:22:52,669
about five different teams that will

00:22:50,629 --> 00:22:55,549
design the same app implement the same

00:22:52,669 --> 00:22:59,419
app fix the same issues over and over

00:22:55,549 --> 00:23:00,799
again this is wasteful and really

00:22:59,419 --> 00:23:03,169
disheartening when you build something

00:23:00,799 --> 00:23:05,509
that somebody already built just against

00:23:03,169 --> 00:23:07,249
a slightly different framework and it's

00:23:05,509 --> 00:23:10,579
really expensive I mean think about it

00:23:07,249 --> 00:23:14,450
even big companies like Twitter or slack

00:23:10,579 --> 00:23:17,869
can't make native mac OS apps it's just

00:23:14,450 --> 00:23:18,619
too much so someone came up with a great

00:23:17,869 --> 00:23:21,229
idea

00:23:18,619 --> 00:23:25,339
let's just write it once and run it

00:23:21,229 --> 00:23:28,549
everywhere right it's it's mm let's just

00:23:25,339 --> 00:23:30,229
write everything in Java and ten years

00:23:28,549 --> 00:23:35,529
later let's just write everything in

00:23:30,229 --> 00:23:39,019
Java Script put it in a electron or

00:23:35,529 --> 00:23:42,739
PhoneGap run it everywhere that's great

00:23:39,019 --> 00:23:45,229
right no the problem here is it almost

00:23:42,739 --> 00:23:47,629
inevitably leads to bad user experience

00:23:45,229 --> 00:23:49,339
now each platform is unique and

00:23:47,629 --> 00:23:54,369
different and users have different

00:23:49,339 --> 00:23:54,369
expectations that needs to be respected

00:23:56,049 --> 00:24:03,469
and so react native came up with this

00:23:59,659 --> 00:24:06,349
great mantra learn wants right

00:24:03,469 --> 00:24:09,049
everywhere now this is great I love this

00:24:06,349 --> 00:24:11,809
the idea here is you only have to learn

00:24:09,049 --> 00:24:14,629
the react paradigm once right in

00:24:11,809 --> 00:24:17,149
JavaScript and then you can use this

00:24:14,629 --> 00:24:20,119
knowledge to target the web and react

00:24:17,149 --> 00:24:22,040
native it appreciates the needs to not

00:24:20,119 --> 00:24:23,630
redo work that

00:24:22,040 --> 00:24:25,700
we're only there are technical

00:24:23,630 --> 00:24:27,140
differences but at the same time there

00:24:25,700 --> 00:24:30,950
are platform differences as well they

00:24:27,140 --> 00:24:33,710
need to be respected but is that enough

00:24:30,950 --> 00:24:35,510
I don't think that's enough yes that's

00:24:33,710 --> 00:24:37,490
great that we learn once right

00:24:35,510 --> 00:24:40,370
everywhere but why do we have to write

00:24:37,490 --> 00:24:42,860
everywhere yes there are UX differences

00:24:40,370 --> 00:24:45,170
that need to be respected but a lot of

00:24:42,860 --> 00:24:47,090
differences between react native and the

00:24:45,170 --> 00:24:49,790
web are merely technical differences

00:24:47,090 --> 00:24:54,350
they're just incidental complexity not

00:24:49,790 --> 00:24:57,620
real one so I want to propose a new

00:24:54,350 --> 00:25:01,450
mantra for the community the Galactic

00:24:57,620 --> 00:25:04,070
brain choice right ones learn everywhere

00:25:01,450 --> 00:25:08,050
let me explain let me explain here's the

00:25:04,070 --> 00:25:11,300
idea if 90% of your app of its logic UI

00:25:08,050 --> 00:25:15,080
layout it's the same so it should be the

00:25:11,300 --> 00:25:17,990
code you shouldn't go for 100% code

00:25:15,080 --> 00:25:20,920
reuse you should go for 90% code reuse

00:25:17,990 --> 00:25:24,080
each platform needs to be respected

00:25:20,920 --> 00:25:25,460
right but we shouldn't have to write the

00:25:24,080 --> 00:25:27,170
same thing over and over again just

00:25:25,460 --> 00:25:31,340
because of some technical differences

00:25:27,170 --> 00:25:34,310
like isn't that just silly so I think we

00:25:31,340 --> 00:25:36,890
should write once everything that is the

00:25:34,310 --> 00:25:38,960
same but we shouldn't just be lazy and

00:25:36,890 --> 00:25:40,640
like oh we've written once and now we

00:25:38,960 --> 00:25:43,070
run it everywhere now we don't run it

00:25:40,640 --> 00:25:45,440
everywhere now that we've saved time by

00:25:43,070 --> 00:25:49,130
writing it once we can reinvest that

00:25:45,440 --> 00:25:51,890
time to learn all of the platforms and I

00:25:49,130 --> 00:25:53,360
think if we really want to step up our

00:25:51,890 --> 00:25:55,430
game and make a really great user

00:25:53,360 --> 00:25:57,290
experience we should learn all of the

00:25:55,430 --> 00:25:59,480
platforms yes we want to share as much

00:25:57,290 --> 00:26:03,410
code as possible but you should learn

00:25:59,480 --> 00:26:05,510
DOM and CSS and HTML and UI kit Swift

00:26:03,410 --> 00:26:08,420
Kotlin to make a truly great user

00:26:05,510 --> 00:26:10,310
experience right so you write once

00:26:08,420 --> 00:26:12,950
everything that is the same and then you

00:26:10,310 --> 00:26:15,740
reinvest that to make a truly great app

00:26:12,950 --> 00:26:17,800
for all the platforms all right thank

00:26:15,740 --> 00:26:17,800
you

00:26:18,390 --> 00:26:34,229
[Applause]

00:26:20,940 --> 00:26:34,229

YouTube URL: https://www.youtube.com/watch?v=KxSwRHi4lHk


