Title: Chain React 2019 - Devlin Duldulao - Getting Started with Mobx Statetree
Publication date: 2019-08-06
Playlist: Chain React 2019
Description: 
	Creating scalable and maintainable React Native app using Mobx State Tree

Slides: https://drive.google.com/file/d/1cBf1FFVewPSKI7TmMdrvsyk8NuYtxMUN/view
Repository: https://github.com/webmasterdevlin/mstdemo
Captions: 
	00:00:11,300 --> 00:00:18,119
last last topic for today

00:00:14,610 --> 00:00:20,340
so yeah I'm so glad that there's an

00:00:18,119 --> 00:00:24,600
after-party later right

00:00:20,340 --> 00:00:29,990
and yeah just otherwise some of you

00:00:24,600 --> 00:00:35,070
would be now halfway somewhere else oh

00:00:29,990 --> 00:00:39,079
yeah so let's give ourselves around the

00:00:35,070 --> 00:00:39,079
phosphorus staying here until the end

00:00:39,530 --> 00:00:49,050
thank you so yeah ah okay Oh secondly

00:00:46,050 --> 00:00:51,300
I'd like to thank infinite red for the

00:00:49,050 --> 00:00:54,210
excellent job of organizing and managing

00:00:51,300 --> 00:00:58,829
this huge event and for inviting me to

00:00:54,210 --> 00:01:02,430
speak here in front of you so again I'm

00:00:58,829 --> 00:01:04,589
Devlin doodle ow I'm a Microsoft MVP and

00:01:02,430 --> 00:01:07,049
on at zero ambassador

00:01:04,589 --> 00:01:10,290
I'm also used to be a summer in

00:01:07,049 --> 00:01:13,680
developer okay so uh in my background

00:01:10,290 --> 00:01:16,890
that's why those are all there's no in

00:01:13,680 --> 00:01:19,409
Japan it's a it's a frequently praised

00:01:16,890 --> 00:01:23,040
by skiers around the world so if you

00:01:19,409 --> 00:01:26,420
love skiing and snowboarding um going

00:01:23,040 --> 00:01:26,420
there should be in your bucket list

00:01:27,530 --> 00:01:36,960
okay I'm from Manila originally but I

00:01:32,009 --> 00:01:39,900
live in Oslo now in Norway and I work

00:01:36,960 --> 00:01:45,299
for a in Mara doing full-stack or

00:01:39,900 --> 00:01:50,220
development so uh let's start with the

00:01:45,299 --> 00:01:53,040
state management oh we all know or redox

00:01:50,220 --> 00:01:56,280
is the most popular state management

00:01:53,040 --> 00:01:59,869
library in rec world approaches

00:01:56,280 --> 00:02:04,590
functional it has three core principles

00:01:59,869 --> 00:02:06,240
first one has a store so sorry access

00:02:04,590 --> 00:02:08,729
single source of truth

00:02:06,240 --> 00:02:11,550
the other one is state state itself

00:02:08,729 --> 00:02:13,950
read-only can only be changed by meeting

00:02:11,550 --> 00:02:16,709
an action

00:02:13,950 --> 00:02:22,340
last we changes to state are made by

00:02:16,709 --> 00:02:22,340
pure functions also known as reducers

00:02:22,849 --> 00:02:33,150
okay so we also know that a reader is an

00:02:27,450 --> 00:02:35,940
incredibly manual but do you know that

00:02:33,150 --> 00:02:40,650
there's another state management library

00:02:35,940 --> 00:02:44,700
in react that you can use lo and behold

00:02:40,650 --> 00:02:48,830
we have a mob X it's a incredibly

00:02:44,700 --> 00:02:48,830
magical you'll see that in a bit

00:02:49,160 --> 00:02:55,110
now why some developers are prefer

00:02:52,080 --> 00:02:56,640
babak's over read else they said read

00:02:55,110 --> 00:03:02,880
ups gives you too much

00:02:56,640 --> 00:03:05,790
boilerplate marks on the other hand has

00:03:02,880 --> 00:03:10,830
easier learning curve and significantly

00:03:05,790 --> 00:03:12,780
let's go to right now shoutout to james

00:03:10,830 --> 00:03:16,739
Porter's our presentation early this

00:03:12,780 --> 00:03:19,290
year he built two identical react apps

00:03:16,739 --> 00:03:23,030
one is written in Marburg state 3 the

00:03:19,290 --> 00:03:27,690
other one is written in redux

00:03:23,030 --> 00:03:30,600
so yeah as you can see here Redux have a

00:03:27,690 --> 00:03:33,709
higher number of lines of codes done

00:03:30,600 --> 00:03:37,049
Marburg state 3 this because of the

00:03:33,709 --> 00:03:40,250
action types action creators and

00:03:37,049 --> 00:03:44,430
reducers that you need to write in a

00:03:40,250 --> 00:03:47,489
react redux application so uh the

00:03:44,430 --> 00:03:50,400
implication here is writing react mob X

00:03:47,489 --> 00:03:54,420
apps would be more in Tayna belen the

00:03:50,400 --> 00:03:58,650
future than react read excerpts so uh

00:03:54,420 --> 00:04:01,230
what really is marks marks is a

00:03:58,650 --> 00:04:03,810
battle-tested library that makes state

00:04:01,230 --> 00:04:06,930
management you know simple and scalable

00:04:03,810 --> 00:04:11,250
by transparently applying a functional

00:04:06,930 --> 00:04:13,230
reactive programming so for anyone here

00:04:11,250 --> 00:04:16,169
doesn't know reactive programming to

00:04:13,230 --> 00:04:19,530
make it short reactive programming has

00:04:16,169 --> 00:04:22,650
principal similarities with the observer

00:04:19,530 --> 00:04:25,250
pattern so commonly used in Hopi or

00:04:22,650 --> 00:04:27,360
object-oriented programming

00:04:25,250 --> 00:04:29,969
now I must

00:04:27,360 --> 00:04:32,789
you have encountered pubsub design

00:04:29,969 --> 00:04:36,050
pattern at some point to differentiate

00:04:32,789 --> 00:04:40,039
observer from pop dip subscribe

00:04:36,050 --> 00:04:43,650
observers are aware of the subject and

00:04:40,039 --> 00:04:46,500
also the subject maintains a copy of the

00:04:43,650 --> 00:04:48,990
absorbers whereas in a publisher

00:04:46,500 --> 00:04:54,330
subscriber they don't need to know each

00:04:48,990 --> 00:04:56,909
other now a common question of a

00:04:54,330 --> 00:05:02,460
developer here is how does mob ex relate

00:04:56,909 --> 00:05:06,150
to extreme libraries like rxjs bacon the

00:05:02,460 --> 00:05:10,949
jsj Tura so extreme libraries solve a

00:05:06,150 --> 00:05:14,969
different problem than mob x rh gaius

00:05:10,949 --> 00:05:18,300
helps you react to event while mob x

00:05:14,969 --> 00:05:22,379
helps you write to values which is the

00:05:18,300 --> 00:05:27,419
state if you will so uh let's suppose

00:05:22,379 --> 00:05:29,490
you want to reactively derive a display

00:05:27,419 --> 00:05:33,740
name of a person object you want

00:05:29,490 --> 00:05:37,190
something like this in rxjs

00:05:33,740 --> 00:05:40,860
you would use combine layers map

00:05:37,190 --> 00:05:46,080
distinct until change so these are

00:05:40,860 --> 00:05:49,050
operators in mob X you hardly have

00:05:46,080 --> 00:05:51,319
operators as it's tough it's normally

00:05:49,050 --> 00:05:53,810
combined through normal JavaScript

00:05:51,319 --> 00:06:00,960
constructions

00:05:53,810 --> 00:06:03,930
now let's go to MS D unlike mob x marks

00:06:00,960 --> 00:06:06,870
victory or MST is an opinionated library

00:06:03,930 --> 00:06:11,909
that imposes a strict architecture on

00:06:06,870 --> 00:06:13,560
your state organization so uh what are

00:06:11,909 --> 00:06:18,500
the packages that you'll need when

00:06:13,560 --> 00:06:23,219
developing in retin-a team we have mob x

00:06:18,500 --> 00:06:25,259
marks react myopic state tree although

00:06:23,219 --> 00:06:27,900
in working on our react web app you

00:06:25,259 --> 00:06:31,560
would also need to install this mob

00:06:27,900 --> 00:06:35,219
Pixar react router it keeps your public

00:06:31,560 --> 00:06:37,979
state in sync with a react router or by

00:06:35,219 --> 00:06:41,120
a router store the other one is a mob

00:06:37,979 --> 00:06:41,120
Pixar wrap dev tools

00:06:41,420 --> 00:06:47,510
rap mob extract dev tools to track the

00:06:45,140 --> 00:06:51,140
rendering behavior and data dependencies

00:06:47,510 --> 00:06:57,620
of your app now let's go to es NEX

00:06:51,140 --> 00:07:00,410
optional decorators in mob X so just

00:06:57,620 --> 00:07:02,930
like in Java and Python you can also use

00:07:00,410 --> 00:07:06,200
annotations here in react but it's

00:07:02,930 --> 00:07:09,260
called decorators so a decorator in

00:07:06,200 --> 00:07:13,060
JavaScript is simply a way of wrapping a

00:07:09,260 --> 00:07:18,830
piece of code with another so literally

00:07:13,060 --> 00:07:23,230
decorating it and to enable that in your

00:07:18,830 --> 00:07:23,230
compiler you have to add these packages

00:07:24,130 --> 00:07:31,580
and you should edit or update your

00:07:28,640 --> 00:07:38,300
bubble our C configuration to be like

00:07:31,580 --> 00:07:41,000
this and if you prefer to use bubble

00:07:38,300 --> 00:07:45,140
that config that Jas this is how you do

00:07:41,000 --> 00:07:48,110
it and note that the order of plugins is

00:07:45,140 --> 00:07:52,480
important decorators should be listed

00:07:48,110 --> 00:07:52,480
first so here it is

00:07:55,690 --> 00:08:02,150
so however are based on the official

00:07:59,120 --> 00:08:04,580
docs of mob x decorators are not

00:08:02,150 --> 00:08:07,040
recommended when building react marks

00:08:04,580 --> 00:08:09,890
apps the recommended approach here is to

00:08:07,040 --> 00:08:13,640
use the mob X utilities you will see

00:08:09,890 --> 00:08:16,660
them in a bit now let's go let's get to

00:08:13,640 --> 00:08:16,660
the meat of the topic

00:08:19,340 --> 00:08:24,060
now to help you easily learn mob X or

00:08:23,190 --> 00:08:27,150
reactive programming

00:08:24,060 --> 00:08:29,900
let's associate them to spreadsheet so

00:08:27,150 --> 00:08:34,260
just remember these key concepts here

00:08:29,900 --> 00:08:38,280
observables computed values actions and

00:08:34,260 --> 00:08:43,110
reactions now how can we compare this

00:08:38,280 --> 00:08:45,780
with spreadsheet ok observables they

00:08:43,110 --> 00:08:50,700
turn properties of an object into

00:08:45,780 --> 00:08:55,550
spreadsheet cells actions actions are

00:08:50,700 --> 00:08:55,550
the act of editing the values of cells

00:08:55,850 --> 00:09:02,250
computed values derived from data cells

00:08:59,400 --> 00:09:05,010
and other formulas it is updated

00:09:02,250 --> 00:09:10,200
automatically when one of the properties

00:09:05,010 --> 00:09:12,690
is modified and lastly reaction drawing

00:09:10,200 --> 00:09:15,120
the output of a data cell or a formula

00:09:12,690 --> 00:09:20,910
this is the real-time UI updates in

00:09:15,120 --> 00:09:24,930
react patches the Dom so that's the core

00:09:20,910 --> 00:09:27,420
maahox library but in react you know use

00:09:24,930 --> 00:09:29,550
you also need to use these two functions

00:09:27,420 --> 00:09:32,370
these are the two functions or

00:09:29,550 --> 00:09:34,650
decorators that you saw earlier absorber

00:09:32,370 --> 00:09:37,170
decorator that can be used to turn

00:09:34,650 --> 00:09:40,610
react.js components into reactive

00:09:37,170 --> 00:09:44,130
components and the other one is inject

00:09:40,610 --> 00:09:49,110
which connects components to provide the

00:09:44,130 --> 00:09:54,090
stores now let's go to our demo first

00:09:49,110 --> 00:10:02,430
demo so here we're creating a react

00:09:54,090 --> 00:10:10,500
native app let's name it MSD demo let's

00:10:02,430 --> 00:10:16,800
open it up using a vs code and first

00:10:10,500 --> 00:10:19,110
step is let's create a directory let's

00:10:16,800 --> 00:10:24,200
name it app and let's move our app that

00:10:19,110 --> 00:10:27,470
J s and then update our index at j s

00:10:24,200 --> 00:10:27,470
like so

00:10:31,750 --> 00:10:42,530
and then next step is now we can start

00:10:37,840 --> 00:10:45,080
creating our model so to do type this

00:10:42,530 --> 00:10:48,710
will be the schema for model but first

00:10:45,080 --> 00:10:57,230
we need to add our libraries mob xmarks

00:10:48,710 --> 00:11:00,860
react and mob makes a state tree then we

00:10:57,230 --> 00:11:11,090
need to import or first module here that

00:11:00,860 --> 00:11:14,960
will be using types to do type so tabs

00:11:11,090 --> 00:11:20,680
can be primitive complex utility they

00:11:14,960 --> 00:11:27,940
define a model and the ID will be

00:11:20,680 --> 00:11:35,660
identifier it's done types that optional

00:11:27,940 --> 00:11:39,940
and then set a default value false next

00:11:35,660 --> 00:11:39,940
step is now we can create our store

00:11:41,770 --> 00:11:46,540
let's name it to do store that yes

00:11:47,110 --> 00:12:00,640
import it from our mark state tree

00:11:51,910 --> 00:12:00,640
gametypes then to do model types model

00:12:02,140 --> 00:12:08,060
to do model and then we can pass in

00:12:05,420 --> 00:12:12,260
there to do type that we created earlier

00:12:08,060 --> 00:12:20,840
and now we can start creating the store

00:12:12,260 --> 00:12:26,290
itself types model to do store then an

00:12:20,840 --> 00:12:26,290
object this will be the state the store

00:12:26,410 --> 00:12:40,490
types array of the model then to do

00:12:33,190 --> 00:12:42,410
types nullable you know to the model and

00:12:40,490 --> 00:12:46,519
then

00:12:42,410 --> 00:12:50,230
loading for our spinner or loader set it

00:12:46,519 --> 00:12:53,810
to bullion now we can start chaining

00:12:50,230 --> 00:12:57,829
some actions here so actions they modify

00:12:53,810 --> 00:13:01,459
the states self meaning it is bound to

00:12:57,829 --> 00:13:06,649
current instance and views are where you

00:13:01,459 --> 00:13:09,319
derive effect from your state and then

00:13:06,649 --> 00:13:17,470
here where we're now initializing our

00:13:09,319 --> 00:13:20,389
states to do it's an empty array to do

00:13:17,470 --> 00:13:23,350
let's jump back to you to the types of

00:13:20,389 --> 00:13:28,550
das is to make it cleaner

00:13:23,350 --> 00:13:34,870
here's to do initial state then ID will

00:13:28,550 --> 00:13:34,870
be just a empty string it's done pause

00:13:35,050 --> 00:13:43,069
then here to the initial state is

00:13:39,230 --> 00:13:43,910
loading let's set it to false and now

00:13:43,069 --> 00:13:52,610
we're done here

00:13:43,910 --> 00:13:58,759
now we can export the store now you can

00:13:52,610 --> 00:14:03,319
start adding a navigation name it the

00:13:58,759 --> 00:14:13,639
first route navigation what we need a

00:14:03,319 --> 00:14:19,639
library that react navigation and then

00:14:13,639 --> 00:14:21,589
I'm pasting here stock navigation to-do

00:14:19,639 --> 00:14:33,519
list our to-do list will be there the

00:14:21,589 --> 00:14:37,430
screen for app to do list at years and

00:14:33,519 --> 00:14:43,420
also need a third-party library UI

00:14:37,430 --> 00:14:43,420
component library let's add native base

00:14:51,220 --> 00:15:02,530
and then pasting here some components

00:14:55,720 --> 00:15:13,320
from a tea base some views now we can

00:15:02,530 --> 00:15:16,300
start creating the two Dooley's render

00:15:13,320 --> 00:15:21,310
okay let's remove this pasting here the

00:15:16,300 --> 00:15:29,470
UI of our app now we can start exporting

00:15:21,310 --> 00:15:35,130
it export default to do this and just

00:15:29,470 --> 00:15:39,090
paste it here our Styles okay

00:15:35,130 --> 00:15:52,420
and then jumping back to root navigation

00:15:39,090 --> 00:15:54,490
need to import that to do this yeah

00:15:52,420 --> 00:15:59,070
that's it and then we also need a

00:15:54,490 --> 00:15:59,070
wrapper for a root navigation

00:16:05,400 --> 00:16:17,100
so we'll be putting their our provider

00:16:08,870 --> 00:16:30,920
import mob backs react and then the

00:16:17,100 --> 00:16:30,920
provider okay and then store to do store

00:16:36,530 --> 00:16:48,040
then of course our root navigation we're

00:16:39,320 --> 00:16:51,020
bringing it in now this is the object

00:16:48,040 --> 00:16:54,290
stores so you can put as many stores you

00:16:51,020 --> 00:16:56,800
want here then class we can start

00:16:54,290 --> 00:17:07,970
creating our component navigation

00:16:56,800 --> 00:17:11,510
wrapper stand rack component render need

00:17:07,970 --> 00:17:15,400
to edit that provider and then inside of

00:17:11,510 --> 00:17:19,970
our provider will be the root navigation

00:17:15,400 --> 00:17:27,560
like so and then that's an object spread

00:17:19,970 --> 00:17:37,100
the stores like so then we can export

00:17:27,560 --> 00:17:39,100
that application wrapper now okay

00:17:37,100 --> 00:17:41,680
we have to update our index that yes

00:17:39,100 --> 00:17:44,920
replace the app component with

00:17:41,680 --> 00:17:51,080
application wrapper that we just created

00:17:44,920 --> 00:17:55,210
delete this line here okay

00:17:51,080 --> 00:17:55,210
I think that's it let's run the app

00:18:01,090 --> 00:18:08,409
okay so that's our UI there and now the

00:18:05,409 --> 00:18:13,419
next step is we need to inject the store

00:18:08,409 --> 00:18:20,289
or to do store so you need to go to to

00:18:13,419 --> 00:18:26,340
do list and that's our to do list we

00:18:20,289 --> 00:18:26,340
need to import from mob X or react

00:18:27,480 --> 00:18:45,039
inject and observer back here inject

00:18:42,059 --> 00:18:47,860
passing the name of our store to do

00:18:45,039 --> 00:18:50,860
store and then let's convert the

00:18:47,860 --> 00:18:57,970
component into a reactive component by

00:18:50,860 --> 00:19:00,490
using absorber sit first yeah and let's

00:18:57,970 --> 00:19:03,129
see let's open up the react native of

00:19:00,490 --> 00:19:07,090
debugger here just to see if we properly

00:19:03,129 --> 00:19:09,210
place or store here store searching for

00:19:07,090 --> 00:19:09,210
it

00:19:09,629 --> 00:19:19,440
component to do this okay so that's the

00:19:14,409 --> 00:19:19,440
state of our store beautiful

00:19:27,820 --> 00:19:30,570
okay

00:19:31,330 --> 00:19:36,820
for your rat web app this is the

00:19:34,870 --> 00:19:39,280
implementation of merging your stores

00:19:36,820 --> 00:19:42,190
together and then passing them in your

00:19:39,280 --> 00:19:45,310
provider as you can see here the mob

00:19:42,190 --> 00:19:49,090
extract router is in use a big stretch

00:19:45,310 --> 00:19:57,810
router yep that one and then the router

00:19:49,090 --> 00:20:03,880
store yep and the dev tools like so yeah

00:19:57,810 --> 00:20:06,130
yes now how about changing the states of

00:20:03,880 --> 00:20:13,870
your app after sending requests to Web

00:20:06,130 --> 00:20:16,170
Services now let's define our action but

00:20:13,870 --> 00:20:25,330
we need a third-party library

00:20:16,170 --> 00:20:30,760
Axios and let's add JSON server fake for

00:20:25,330 --> 00:20:37,000
our fake web service JSON server watch

00:20:30,760 --> 00:20:46,330
DB JSON port Towson delay 750 in second

00:20:37,000 --> 00:20:49,300
just to make it realistic now yeah we

00:20:46,330 --> 00:20:55,680
need to remove this these are default

00:20:49,300 --> 00:21:04,330
values our response by a JSON server and

00:20:55,680 --> 00:21:08,260
reduce returns empty array for now then

00:21:04,330 --> 00:21:10,110
for our services let's define our API

00:21:08,260 --> 00:21:13,720
config that j/s here

00:21:10,110 --> 00:21:20,050
pasting here the the endpoints or URL

00:21:13,720 --> 00:21:22,750
API let's go back to our directory now

00:21:20,050 --> 00:21:27,220
we can start creating our service to the

00:21:22,750 --> 00:21:30,430
service and here I'm pasting the HTTP

00:21:27,220 --> 00:21:35,700
verbs that we're going to use delete to

00:21:30,430 --> 00:21:35,700
do put to do post to do and get to this

00:21:37,760 --> 00:21:50,279
okay so now we can start adding some

00:21:42,210 --> 00:21:52,620
actions to do store actions let's name

00:21:50,279 --> 00:21:57,029
it first our first action load to Deus

00:21:52,620 --> 00:21:59,730
flow you need to import that from public

00:21:57,029 --> 00:22:02,570
state tree so Flo telling your app that

00:21:59,730 --> 00:22:07,110
this is an a synchronous process flow

00:22:02,570 --> 00:22:10,260
and function generator

00:22:07,110 --> 00:22:12,659
so what generator is a function that can

00:22:10,260 --> 00:22:17,880
stop Midway and then continue from word

00:22:12,659 --> 00:22:25,230
stop setting this loading to true

00:22:17,880 --> 00:22:27,049
turning it on so to do this you so yield

00:22:25,230 --> 00:22:36,450
it's like than a weight

00:22:27,049 --> 00:22:43,140
there are semantically the same services

00:22:36,450 --> 00:22:44,370
get to Deus okay also are supposed to do

00:22:43,140 --> 00:22:46,590
so

00:22:44,370 --> 00:22:50,850
so flog is your a sync yield this your a

00:22:46,590 --> 00:22:53,130
weight so since we're using access here

00:22:50,850 --> 00:22:58,740
we need to extract the response that we

00:22:53,130 --> 00:23:03,020
need from a data property then making

00:22:58,740 --> 00:23:03,020
use of our catch error

00:23:07,090 --> 00:23:18,539
now yep setting it to false turning it

00:23:10,870 --> 00:23:28,029
off let's add another one create to do

00:23:18,539 --> 00:23:30,820
flow again function generator let's set

00:23:28,029 --> 00:23:40,299
it to our it's loading then try catch

00:23:30,820 --> 00:23:52,830
inside of that a request yield supposed

00:23:40,299 --> 00:23:56,710
to do new to do self there to deuce and

00:23:52,830 --> 00:23:59,460
shift just to make sure sure or just

00:23:56,710 --> 00:24:05,039
want to see the the newly created object

00:23:59,460 --> 00:24:10,570
on top of the list then alert message

00:24:05,039 --> 00:24:19,740
please try again again then turning off

00:24:10,570 --> 00:24:27,340
the spinner all order and now we have to

00:24:19,740 --> 00:24:36,149
edit or sit delete no this one console

00:24:27,340 --> 00:24:40,119
warned create but we're adding first a

00:24:36,149 --> 00:24:47,700
third-party library again so it's you

00:24:40,119 --> 00:24:50,679
you ID so here we're gonna create the

00:24:47,700 --> 00:24:53,950
gooood so we're generating goods here on

00:24:50,679 --> 00:24:58,779
our client rather than doing that on the

00:24:53,950 --> 00:25:06,129
server or good service so that's the

00:24:58,779 --> 00:25:15,629
function before then we need to import

00:25:06,129 --> 00:25:15,629
also the store then going back

00:25:15,720 --> 00:25:29,100
to do store that great to do then

00:25:21,030 --> 00:25:35,280
passing the object we had gooood ID and

00:25:29,100 --> 00:25:43,940
then lastly guess it right component did

00:25:35,280 --> 00:25:43,940
mount to do store that load to deuce

00:25:44,299 --> 00:25:53,880
yeah it let's refresh the app let's add

00:25:50,070 --> 00:25:57,140
the object here to do to do and another

00:25:53,880 --> 00:25:57,140
one so it's working

00:25:57,530 --> 00:26:04,329
[Applause]

00:26:04,890 --> 00:26:17,770
okay so let's go to our last demo

00:26:08,039 --> 00:26:23,770
destroy and computed values okay so next

00:26:17,770 --> 00:26:27,820
is for our put request let's name it

00:26:23,770 --> 00:26:29,710
strike through to do so we're putting

00:26:27,820 --> 00:26:38,460
strike through on every cell that is

00:26:29,710 --> 00:26:38,460
done cons index

00:26:48,390 --> 00:26:55,500
so here uh you have to do it's done bang

00:26:53,010 --> 00:26:59,790
operator to do is done you should be

00:26:55,500 --> 00:27:01,320
able to tabulate self to do this so as

00:26:59,790 --> 00:27:04,170
you can see here we're updating the UI

00:27:01,320 --> 00:27:06,690
or right before we send the request so

00:27:04,170 --> 00:27:12,420
we are doing a simple optimistic you

00:27:06,690 --> 00:27:14,549
update here so this is this guys are you

00:27:12,420 --> 00:27:18,179
know this is really cool because it

00:27:14,549 --> 00:27:21,210
makes your app look real-time but it's

00:27:18,179 --> 00:27:26,460
not actually so it's really good for for

00:27:21,210 --> 00:27:31,049
your user for your user experience but

00:27:26,460 --> 00:27:34,679
of course we have we need to go to its

00:27:31,049 --> 00:27:38,809
previous state need to bring it back so

00:27:34,679 --> 00:27:38,809
here inside the catch error

00:27:39,200 --> 00:27:43,470
we're rolling back to it's a previous

00:27:41,610 --> 00:27:47,940
state and then telling your user

00:27:43,470 --> 00:27:51,530
something happened so this is just a

00:27:47,940 --> 00:27:51,530
simple optimistic UI update

00:27:57,070 --> 00:28:04,720
we will be testing it later and then for

00:28:01,390 --> 00:28:13,090
our delete requests name it removed to

00:28:04,720 --> 00:28:16,330
do low function also using us on

00:28:13,090 --> 00:28:21,820
optimistic update here but we'll be

00:28:16,330 --> 00:28:25,480
using the mob X state tree utilities get

00:28:21,820 --> 00:28:29,680
snapshot so we're storing the old state

00:28:25,480 --> 00:28:33,010
of the two deuce and then here destroy

00:28:29,680 --> 00:28:34,450
so using destroy to remove an instance

00:28:33,010 --> 00:28:36,910
entirely from the tree

00:28:34,450 --> 00:28:45,700
in short you need no need for using

00:28:36,910 --> 00:28:48,450
splice so this is our request yield

00:28:45,700 --> 00:28:48,450
delete to do

00:28:55,090 --> 00:29:05,890
and then we're sit so here we should be

00:29:01,000 --> 00:29:10,510
able to roll back so we'll use apply

00:29:05,890 --> 00:29:15,150
snapshot then to deuce replace that with

00:29:10,510 --> 00:29:15,150
the alt reduce that we copied

00:29:24,560 --> 00:29:34,630
and then of course the alert informing

00:29:28,070 --> 00:29:34,630
your users please try again

00:29:37,600 --> 00:29:53,030
yep now we need to put some styling here

00:29:47,080 --> 00:29:59,300
yep for the it's done toggling text

00:29:53,030 --> 00:30:04,280
decoration line through in here okay I'm

00:29:59,300 --> 00:30:05,750
pasting the handles of the reactions and

00:30:04,280 --> 00:30:08,750
they'll delete to do and they'll update

00:30:05,750 --> 00:30:12,580
to do inside of that so to do store

00:30:08,750 --> 00:30:12,580
actions that we just created

00:30:14,050 --> 00:30:28,090
okay console worn in to update that this

00:30:17,950 --> 00:30:37,450
handle update to do yep and then this

00:30:28,090 --> 00:30:44,030
handle delete to do yep yeah and then

00:30:37,450 --> 00:30:51,470
yep let's refresh the app strikethrough

00:30:44,030 --> 00:30:54,190
it's working delete working oh let's

00:30:51,470 --> 00:30:54,190
disable that

00:31:02,610 --> 00:31:14,070
okay let's write it again delete yep

00:31:08,670 --> 00:31:19,800
working date strikethrough delete again

00:31:14,070 --> 00:31:23,380
yeah so let's uh let's go to our service

00:31:19,800 --> 00:31:24,070
and we'll edit the endpoint of our

00:31:23,380 --> 00:31:27,010
request

00:31:24,070 --> 00:31:29,350
it's just put a number here so that we

00:31:27,010 --> 00:31:30,940
get the the error that we we want and

00:31:29,350 --> 00:31:32,400
then we can roll back to its previous

00:31:30,940 --> 00:31:37,030
state

00:31:32,400 --> 00:31:40,900
strikethrough alert no structure anymore

00:31:37,030 --> 00:31:46,300
it's right again delete it's gone

00:31:40,900 --> 00:31:56,770
I went back so yeah it's right through

00:31:46,300 --> 00:32:01,260
so the optimistic update is working yep

00:31:56,770 --> 00:32:08,080
so it rolls back guys it's really cool

00:32:01,260 --> 00:32:12,210
and then here for our counter remaining

00:32:08,080 --> 00:32:12,210
to do switch is we haven't created yet

00:32:12,660 --> 00:32:20,290
so let's go back to the views and then

00:32:16,930 --> 00:32:23,140
here's our computed values get remaining

00:32:20,290 --> 00:32:29,760
to deuce which returns the total number

00:32:23,140 --> 00:32:29,760
of of the deuce that are not yet done

00:32:36,740 --> 00:32:42,370
so to do this filter

00:32:50,640 --> 00:33:01,070
dot Lent yeah I think that's it let's

00:32:58,020 --> 00:33:12,380
press the app now the counter is working

00:33:01,070 --> 00:33:20,270
two three four three again - yep syncing

00:33:12,380 --> 00:33:26,490
perfectly delete date so there again

00:33:20,270 --> 00:33:28,560
delete yep so yeah just like that

00:33:26,490 --> 00:33:37,290
it worked like a charm

00:33:28,560 --> 00:33:37,290
[Applause]

00:33:41,950 --> 00:33:48,410
so what about errors so let's be real

00:33:46,250 --> 00:33:52,430
you'll face a lot of this while you are

00:33:48,410 --> 00:33:55,280
well you're developing your app in here

00:33:52,430 --> 00:34:00,290
this is a what we call red screen of

00:33:55,280 --> 00:34:03,440
death so what does it say it says error

00:34:00,290 --> 00:34:06,100
while converting to type value is not

00:34:03,440 --> 00:34:08,330
assignable to type so this is MSD

00:34:06,100 --> 00:34:10,700
showing an error at you because you're

00:34:08,330 --> 00:34:15,320
not assigning the right types there are

00:34:10,700 --> 00:34:17,440
objects so that's how it's trigger is so

00:34:15,320 --> 00:34:20,270
what's next

00:34:17,440 --> 00:34:24,889
snapshots and patches please check them

00:34:20,270 --> 00:34:28,070
out in MSD drops and here infinite red

00:34:24,889 --> 00:34:30,500
has this very awesome CLI tool called

00:34:28,070 --> 00:34:33,560
ignite browser helps you scaffold the

00:34:30,500 --> 00:34:37,600
project it has rack navigation mark

00:34:33,560 --> 00:34:43,639
state 3 and typescript out of the box

00:34:37,600 --> 00:34:45,530
this is the CLI the you know default

00:34:43,639 --> 00:34:48,379
project scaffolded project for you and

00:34:45,530 --> 00:34:57,500
the default the default UI or home

00:34:48,379 --> 00:35:00,380
screen but wait there's more another one

00:34:57,500 --> 00:35:03,860
from infinite red rag the tron so

00:35:00,380 --> 00:35:06,290
Bracketron is based on official remote

00:35:03,860 --> 00:35:08,510
debugger it provides more insights while

00:35:06,290 --> 00:35:13,040
your app is running so do yourself a

00:35:08,510 --> 00:35:16,070
favor check them out we have mob extract

00:35:13,040 --> 00:35:18,470
light next iteration of mopix

00:35:16,070 --> 00:35:24,410
react built especially for our rack

00:35:18,470 --> 00:35:30,290
hooks MST dql bindings for my box a tree

00:35:24,410 --> 00:35:33,260
and graph QL and here we have marks and

00:35:30,290 --> 00:35:37,850
mark state tree free courses on egghead

00:35:33,260 --> 00:35:41,060
io are made by Michelle Michelle West

00:35:37,850 --> 00:35:44,000
rates who created marks and marks tech

00:35:41,060 --> 00:35:47,840
tree check the map guys these are free

00:35:44,000 --> 00:35:49,550
and if you're hearing a wall while

00:35:47,840 --> 00:35:52,300
developing your app you can always go to

00:35:49,550 --> 00:35:54,580
ms t's community channel and spectrum

00:35:52,300 --> 00:36:00,380
most of the time you'll get answers in

00:35:54,580 --> 00:36:02,720
within an hour so a word of caution here

00:36:00,380 --> 00:36:07,640
once you tried mob X you'll never go

00:36:02,720 --> 00:36:09,950
back so I'll hang around for questions

00:36:07,640 --> 00:36:15,130
please don't hesitate to approach me

00:36:09,950 --> 00:36:18,950
later and source codes here slides

00:36:15,130 --> 00:36:20,000
download it okay so before we end I have

00:36:18,950 --> 00:36:23,810
a favor to ask

00:36:20,000 --> 00:36:31,870
so you know this become a tradition of

00:36:23,810 --> 00:36:39,350
mine so just a selfie so guys oops

00:36:31,870 --> 00:36:42,230
yeah thanks okay so and then lastly if

00:36:39,350 --> 00:36:44,480
you're interested working in Oslo let me

00:36:42,230 --> 00:36:50,990
know send me your CVS we are hiring

00:36:44,480 --> 00:36:52,290
that's my email so that's all again I'm

00:36:50,990 --> 00:36:56,560
doubling to the Lao

00:36:52,290 --> 00:37:03,590
[Applause]

00:36:56,560 --> 00:37:03,590
[Music]

00:37:06,289 --> 00:37:08,349

YouTube URL: https://www.youtube.com/watch?v=jD6iCt-Qz5k


