Title: Chain React 2019 - Carly Litchfield- LightningTalk - Screenshot Testing React Native Apps with Percy
Publication date: 2019-08-06
Playlist: Chain React 2019
Description: 
	Visual regressions in mobile applications can be serious problems and are notoriously tedious to catch. Hours, even days, can be spent manually sifting through screenshots of a mobile application before releasing it to real users. With automated screenshot testing, much of this tedium can be avoided, and mobile app developers can be empowered to iterate with confidence.
Captions: 
	00:00:10,519 --> 00:00:16,980
hey everyone so my name is Carly I am a

00:00:13,920 --> 00:00:18,390
software engineer at Haven and today I'm

00:00:16,980 --> 00:00:22,470
going to talk about automated screen

00:00:18,390 --> 00:00:23,820
shot testing for react native but first

00:00:22,470 --> 00:00:25,470
let me do a quick introduction about

00:00:23,820 --> 00:00:28,050
Haven it's a new company it's a

00:00:25,470 --> 00:00:30,090
healthcare company um it's a joint

00:00:28,050 --> 00:00:32,910
venture between Amazon Berkshire

00:00:30,090 --> 00:00:34,860
Hathaway and JPMorgan Chase and our

00:00:32,910 --> 00:00:36,270
mission is to transform healthcare to

00:00:34,860 --> 00:00:38,640
create better outcomes and overall

00:00:36,270 --> 00:00:41,550
experiences for patients as well as

00:00:38,640 --> 00:00:44,640
lower patient's costs and for their

00:00:41,550 --> 00:00:46,980
families we have offices in New York and

00:00:44,640 --> 00:00:48,719
Boston and we are hiring for all kinds

00:00:46,980 --> 00:00:50,760
of software engineers so if you're

00:00:48,719 --> 00:00:55,350
interested at all um please come in talk

00:00:50,760 --> 00:00:57,809
to me or any of my colleagues after ok

00:00:55,350 --> 00:00:58,800
so now our screen shot testing first I'm

00:00:57,809 --> 00:01:00,600
going to talk a little bit about the

00:00:58,800 --> 00:01:01,859
motivation for a screen shot testing and

00:01:00,600 --> 00:01:03,539
sort of the problem that I'm aiming to

00:01:01,859 --> 00:01:05,689
solve with it and then I'll talk

00:01:03,539 --> 00:01:08,640
actually about the implementation of it

00:01:05,689 --> 00:01:11,189
so every website and application out

00:01:08,640 --> 00:01:13,310
there has a button you all are quite

00:01:11,189 --> 00:01:16,439
intimately familiar with these and

00:01:13,310 --> 00:01:17,520
they're used all over the app many

00:01:16,439 --> 00:01:19,140
different places they have to be

00:01:17,520 --> 00:01:22,710
flexible enough to be different sizes

00:01:19,140 --> 00:01:24,720
shapes colors different states they

00:01:22,710 --> 00:01:26,790
probably handle click tracking and

00:01:24,720 --> 00:01:29,729
metrics they actually can become pretty

00:01:26,790 --> 00:01:31,590
complex components and because of that

00:01:29,729 --> 00:01:34,079
we are all kind of an agreement that

00:01:31,590 --> 00:01:35,640
component reuse is good we don't want to

00:01:34,079 --> 00:01:38,250
write a new button for every single time

00:01:35,640 --> 00:01:40,860
we need to instantiate one for a few

00:01:38,250 --> 00:01:43,110
reasons we get consistent styling across

00:01:40,860 --> 00:01:45,860
the application we also have less code

00:01:43,110 --> 00:01:48,869
to manage and fewer bugs to track down

00:01:45,860 --> 00:01:51,540
so that's great but it doesn't come

00:01:48,869 --> 00:01:54,780
completely for free let's go back to

00:01:51,540 --> 00:01:56,369
that button again designer might ask you

00:01:54,780 --> 00:01:58,590
to make the button a little bit wider

00:01:56,369 --> 00:02:00,630
the default padding should be just a

00:01:58,590 --> 00:02:02,250
little bit more it's a totally

00:02:00,630 --> 00:02:05,640
reasonable request that doesn't always

00:02:02,250 --> 00:02:07,500
make all the time but as the number of

00:02:05,640 --> 00:02:09,119
use cases for this button goes up the

00:02:07,500 --> 00:02:11,430
amount of manual QA that you have to do

00:02:09,119 --> 00:02:13,170
will also go up so when you increase the

00:02:11,430 --> 00:02:14,150
padding on that button you might need to

00:02:13,170 --> 00:02:16,500
track down

00:02:14,150 --> 00:02:20,220
dozens or even hundreds of use cases

00:02:16,500 --> 00:02:21,330
across both iOS and Android apps to make

00:02:20,220 --> 00:02:23,310
sure that you haven't broken anything

00:02:21,330 --> 00:02:27,120
you haven't cut off any Content or

00:02:23,310 --> 00:02:29,040
messed up one of the pages so with that

00:02:27,120 --> 00:02:30,930
manual QA the fear for making that

00:02:29,040 --> 00:02:32,340
change goes up and you worry that maybe

00:02:30,930 --> 00:02:35,550
you've missed a case or you forgot to

00:02:32,340 --> 00:02:36,510
check one screen size or you just decide

00:02:35,550 --> 00:02:38,190
that you're not going to do all that

00:02:36,510 --> 00:02:41,580
manual QA and you're just worried that

00:02:38,190 --> 00:02:43,860
you've broken something so as that fear

00:02:41,580 --> 00:02:46,440
goes up I'd argue that your team's

00:02:43,860 --> 00:02:48,660
velocity will go down you'll spend more

00:02:46,440 --> 00:02:50,940
time doing manual QA on all these use

00:02:48,660 --> 00:02:53,069
cases or you might end up creating

00:02:50,940 --> 00:02:55,019
branching logic in your button because

00:02:53,069 --> 00:02:56,489
you are too nervous to change it for

00:02:55,019 --> 00:02:58,470
every single button across the website

00:02:56,489 --> 00:03:00,450
that makes your mode code like more

00:02:58,470 --> 00:03:03,750
complex and then more difficult to

00:03:00,450 --> 00:03:06,000
manage in the long run so just just sum

00:03:03,750 --> 00:03:07,709
up this point what I'm arguing is that

00:03:06,000 --> 00:03:10,170
changing styles is a company with

00:03:07,709 --> 00:03:11,849
increased manual QA and fear which will

00:03:10,170 --> 00:03:13,980
ultimately sell your team down and

00:03:11,849 --> 00:03:16,470
prevent you from shipping features as

00:03:13,980 --> 00:03:20,370
fast as you can in delivering value to

00:03:16,470 --> 00:03:22,769
your users as well as to your company so

00:03:20,370 --> 00:03:25,950
screenshot testing can help to fix some

00:03:22,769 --> 00:03:28,319
of these problems let's dive into what

00:03:25,950 --> 00:03:30,660
that looks like there's a company called

00:03:28,319 --> 00:03:32,639
percy their tagline is that they do

00:03:30,660 --> 00:03:34,650
continuous visual review for web apps

00:03:32,639 --> 00:03:35,940
and I have no formal affiliation with

00:03:34,650 --> 00:03:36,389
Percy but I think they have a wonderful

00:03:35,940 --> 00:03:38,760
product

00:03:36,389 --> 00:03:41,910
I've used it at previous companies and

00:03:38,760 --> 00:03:43,920
it's been great this is a screenshot

00:03:41,910 --> 00:03:46,200
that I just took from their marketing

00:03:43,920 --> 00:03:48,420
materials on their website and basically

00:03:46,200 --> 00:03:50,940
how Percy works is that it maintains a

00:03:48,420 --> 00:03:52,470
baseline of your application and then as

00:03:50,940 --> 00:03:54,900
you make changes to your application it

00:03:52,470 --> 00:03:56,880
will automatically take screenshots of

00:03:54,900 --> 00:03:58,739
your changes and compare them to the

00:03:56,880 --> 00:04:01,079
previous version and highlight in red

00:03:58,739 --> 00:04:02,910
anything that's changed so you can

00:04:01,079 --> 00:04:05,010
really quickly see what's different on

00:04:02,910 --> 00:04:08,099
your website and decide if you intended

00:04:05,010 --> 00:04:09,810
to make that change or not so right here

00:04:08,099 --> 00:04:11,280
if you intend it to make this change you

00:04:09,810 --> 00:04:14,819
can go ahead and hit that approve button

00:04:11,280 --> 00:04:17,070
and just move on this is a wonderful

00:04:14,819 --> 00:04:19,410
product I saw this I've seen this

00:04:17,070 --> 00:04:20,910
product like changed attitudes for

00:04:19,410 --> 00:04:22,919
finite developers at companies before

00:04:20,910 --> 00:04:25,860
and just really increase the confidence

00:04:22,919 --> 00:04:28,400
that people can make changes to broadly

00:04:25,860 --> 00:04:31,230
used styling

00:04:28,400 --> 00:04:33,450
but yeah it's only for web apps so then

00:04:31,230 --> 00:04:35,250
when you went over to native there

00:04:33,450 --> 00:04:37,470
wasn't much you could do you just really

00:04:35,250 --> 00:04:39,360
sat there really missing this tool and

00:04:37,470 --> 00:04:42,960
back in the old days of having to do a

00:04:39,360 --> 00:04:45,630
lot of manual QA but in this superhot 20

00:04:42,960 --> 00:04:48,390
19 update I'm excited to tell you that

00:04:45,630 --> 00:04:50,220
it's no longer just for web apps and

00:04:48,390 --> 00:04:52,280
actually Haven and Percy have done a

00:04:50,220 --> 00:04:56,040
little open source collaboration here

00:04:52,280 --> 00:05:00,120
we've created this NPM package that's

00:04:56,040 --> 00:05:01,740
called Percy slash a p.m. - WD which is

00:05:00,120 --> 00:05:05,090
based on a p.m. which is kind of like

00:05:01,740 --> 00:05:07,470
selenium a test runner for native apps

00:05:05,090 --> 00:05:09,330
quick shout-out to the two main

00:05:07,470 --> 00:05:11,280
contributors on this one is Thomas

00:05:09,330 --> 00:05:12,630
Houston my colleague at Haven he's here

00:05:11,280 --> 00:05:15,030
so it should definitely ask some more

00:05:12,630 --> 00:05:18,120
questions about this library and Robert

00:05:15,030 --> 00:05:19,410
De Luca he's a developer at percy and he

00:05:18,120 --> 00:05:21,540
really took this over and got it over

00:05:19,410 --> 00:05:25,260
the finish line and and helped us to

00:05:21,540 --> 00:05:26,970
open-source it okay so let's talk about

00:05:25,260 --> 00:05:28,740
what this library actually does and how

00:05:26,970 --> 00:05:29,160
it works and what it looks like in

00:05:28,740 --> 00:05:33,330
practice

00:05:29,160 --> 00:05:36,570
so I forked the chain react app for the

00:05:33,330 --> 00:05:38,700
purposes of this talk there's actually

00:05:36,570 --> 00:05:41,100
difference between these two images so

00:05:38,700 --> 00:05:48,750
try to take a second and see if you can

00:05:41,100 --> 00:05:50,400
detect it okay so if you didn't see it

00:05:48,750 --> 00:05:52,740
or maybe if you did the button is a

00:05:50,400 --> 00:05:55,710
little bit less wide a little bit

00:05:52,740 --> 00:05:57,240
narrower so again come back here I just

00:05:55,710 --> 00:05:59,820
made the button a little bit shorter as

00:05:57,240 --> 00:06:02,820
all and so what Percy is doing here is

00:05:59,820 --> 00:06:05,100
it's saving an image from the baseline

00:06:02,820 --> 00:06:07,680
essentially the master branch and then

00:06:05,100 --> 00:06:09,330
taking an image of my changes of that

00:06:07,680 --> 00:06:11,100
how the app looks with my changes

00:06:09,330 --> 00:06:13,770
comparing the two and highlighting in

00:06:11,100 --> 00:06:15,210
red exactly where they're different so

00:06:13,770 --> 00:06:16,740
here you can see the two sides of the

00:06:15,210 --> 00:06:19,080
button are red because those pixels have

00:06:16,740 --> 00:06:20,610
changed it's also interesting to note

00:06:19,080 --> 00:06:23,090
here that you can see there's some red

00:06:20,610 --> 00:06:26,370
outline on the text part of the button

00:06:23,090 --> 00:06:28,710
and that's because I changed the width

00:06:26,370 --> 00:06:30,660
of the button to be an odd number to an

00:06:28,710 --> 00:06:33,240
even number and then a centering got

00:06:30,660 --> 00:06:34,590
shifted one pixel over and so it's just

00:06:33,240 --> 00:06:36,510
an example of like something that you

00:06:34,590 --> 00:06:38,370
you know maybe it's not super important

00:06:36,510 --> 00:06:39,690
but you'd never catch it on your own and

00:06:38,370 --> 00:06:41,260
if you're aiming for pixel perfection

00:06:39,690 --> 00:06:46,240
like Percy can really help you

00:06:41,260 --> 00:06:47,740
in this area okay so then if I was happy

00:06:46,240 --> 00:06:49,630
with the changes I can go ahead and hit

00:06:47,740 --> 00:06:50,940
approve and my new image will be

00:06:49,630 --> 00:06:54,790
accepted as the baseline to compare

00:06:50,940 --> 00:06:56,290
future screenshots against and at this

00:06:54,790 --> 00:06:57,820
point you might be thinking like this

00:06:56,290 --> 00:06:59,410
sounds like a lot of images to manage

00:06:57,820 --> 00:07:02,110
this is really gonna make my repository

00:06:59,410 --> 00:07:04,300
huge but Percy actually manages all the

00:07:02,110 --> 00:07:06,430
images for you so you don't have to

00:07:04,300 --> 00:07:09,400
worry about storing a bunch of images in

00:07:06,430 --> 00:07:13,900
your repo or figuring out which is the

00:07:09,400 --> 00:07:16,900
correct baseline to compare to it works

00:07:13,900 --> 00:07:19,380
for Apple and for Android so no more do

00:07:16,900 --> 00:07:21,280
you have to boot up every single 100

00:07:19,380 --> 00:07:22,720
emulators and all your different screen

00:07:21,280 --> 00:07:24,670
sizes and compare all these like you

00:07:22,720 --> 00:07:26,860
could set up screenshot testing and all

00:07:24,670 --> 00:07:29,050
the different platforms if you like and

00:07:26,860 --> 00:07:32,920
just have automated visual regression

00:07:29,050 --> 00:07:35,230
review okay so this is what an actual

00:07:32,920 --> 00:07:38,020
percy test looks like um this is written

00:07:35,230 --> 00:07:40,600
and just syntax it's using a PM in the

00:07:38,020 --> 00:07:43,450
background and what this is doing is

00:07:40,600 --> 00:07:45,520
first just booting up the iOS app and

00:07:43,450 --> 00:07:47,350
then that second line is what's really

00:07:45,520 --> 00:07:49,240
important that percy snapshot command

00:07:47,350 --> 00:07:50,920
what that will do is take a picture of

00:07:49,240 --> 00:07:53,650
the app and whatever state on whatever

00:07:50,920 --> 00:07:55,840
page you're on and then that will send

00:07:53,650 --> 00:07:59,200
that up to percy percy will run the the

00:07:55,840 --> 00:08:01,270
diff on the two images and calculate if

00:07:59,200 --> 00:08:04,390
there's a test failure or not and then

00:08:01,270 --> 00:08:06,610
you just end the test so you could do

00:08:04,390 --> 00:08:07,690
any number of sort of actions in between

00:08:06,610 --> 00:08:10,960
if you wanted to navigate to different

00:08:07,690 --> 00:08:12,400
pages or you just click some buttons or

00:08:10,960 --> 00:08:13,750
whatever it is and then you can call

00:08:12,400 --> 00:08:15,670
percy snapshot and it will take a

00:08:13,750 --> 00:08:19,480
picture of the app and over state you're

00:08:15,670 --> 00:08:21,250
in percy also has a really nice github

00:08:19,480 --> 00:08:24,190
integration and so it goes right into

00:08:21,250 --> 00:08:26,560
your github status checks so this can

00:08:24,190 --> 00:08:28,960
save a ton of time from the pull request

00:08:26,560 --> 00:08:30,880
authors when they have to usually load

00:08:28,960 --> 00:08:32,200
up the apps and take a bunch of

00:08:30,880 --> 00:08:35,740
screenshots put them in the pull request

00:08:32,200 --> 00:08:37,090
description and then the reviewers have

00:08:35,740 --> 00:08:39,430
to trust that they've captured all the

00:08:37,090 --> 00:08:40,930
changes now you can basically skip all

00:08:39,430 --> 00:08:43,120
of that and just click into the percy

00:08:40,930 --> 00:08:47,620
run to see exactly what's changed and

00:08:43,120 --> 00:08:49,660
exactly what's added yeah so this all

00:08:47,620 --> 00:08:51,160
sounds great um but I do want to come

00:08:49,660 --> 00:08:52,930
back to the fact that this is a pretty

00:08:51,160 --> 00:08:54,790
new library it's just released a couple

00:08:52,930 --> 00:08:56,560
weeks ago

00:08:54,790 --> 00:08:57,760
and the version number zero point one

00:08:56,560 --> 00:08:58,780
point two should tell you that it's

00:08:57,760 --> 00:09:00,460
pretty fresh

00:08:58,780 --> 00:09:02,380
so there's definitely still some things

00:09:00,460 --> 00:09:05,500
to work out and some rough edges to

00:09:02,380 --> 00:09:07,240
smooth specifically the things that the

00:09:05,500 --> 00:09:09,340
team will work on next is making it

00:09:07,240 --> 00:09:11,320
easier to set up right now because of

00:09:09,340 --> 00:09:13,630
the appium dependency it can be a little

00:09:11,320 --> 00:09:15,130
bit tricky so we're looking to add

00:09:13,630 --> 00:09:16,480
better documentation and also just make

00:09:15,130 --> 00:09:18,460
that a little bit more seamless of an

00:09:16,480 --> 00:09:21,850
experience and then furthermore

00:09:18,460 --> 00:09:24,400
minimizing false negatives on the web

00:09:21,850 --> 00:09:26,050
percy does a lot of things to prevent

00:09:24,400 --> 00:09:28,120
test failures that shouldn't really be

00:09:26,050 --> 00:09:30,340
test failures for example like with

00:09:28,120 --> 00:09:32,740
animations or with pausing gifts

00:09:30,340 --> 00:09:34,540
stuff like that and so just need to

00:09:32,740 --> 00:09:37,720
think about how we can apply those to

00:09:34,540 --> 00:09:39,550
the native world also and the most

00:09:37,720 --> 00:09:42,430
exciting thing coming up next is a

00:09:39,550 --> 00:09:44,740
potential react native person story book

00:09:42,430 --> 00:09:45,760
integration story books come up a few

00:09:44,740 --> 00:09:48,280
times today already

00:09:45,760 --> 00:09:49,870
but it's component library where you can

00:09:48,280 --> 00:09:51,760
look at all of your individual react

00:09:49,870 --> 00:09:54,610
native components and how they exist as

00:09:51,760 --> 00:09:55,900
a unit and so if person integrates with

00:09:54,610 --> 00:10:00,220
story book then you can really achieve

00:09:55,900 --> 00:10:02,020
very unit test level testing of your

00:10:00,220 --> 00:10:04,420
individual components rather than the

00:10:02,020 --> 00:10:09,370
more integration testing style of whole

00:10:04,420 --> 00:10:10,810
screens so that's really great too ok so

00:10:09,370 --> 00:10:12,330
here are some relevant links if you're

00:10:10,810 --> 00:10:14,890
interested at all in getting started

00:10:12,330 --> 00:10:16,600
definitely reach out to anyone at Haven

00:10:14,890 --> 00:10:20,320
or Percy to we'd be happy to help you

00:10:16,600 --> 00:10:23,380
get up and started with it and thank you

00:10:20,320 --> 00:10:24,580
yeah so again I'm working with Haven and

00:10:23,380 --> 00:10:26,940
we're hiring so let us know if you're

00:10:24,580 --> 00:10:26,940
interested

00:10:28,750 --> 00:10:35,950
[Applause]

00:10:29,210 --> 00:10:38,010
[Music]

00:10:35,950 --> 00:10:38,010

YouTube URL: https://www.youtube.com/watch?v=y7TZ_ltwjZ4


