Title: RailsConf 2020 CE - Advanced ActionText: Attaching any Model in rich text by Chris Oliver
Publication date: 2020-05-04
Playlist: RailsConf 2020 CE
Description: 
	Advanced ActionText: Attaching any Model in rich text by Chris Oliver

Whether it's @ mentions for users, hashtags, or other resources, many application these days need rich text fields. ActionText allows you to embed rich snippets for any model in your Rails app, but it requires a bit of communication with the backend. You'll learn how to add @ mentions for users and YouTube embeds as ActionText attachments and see how it all works together.

__________

Chris is the founder of GoRails, host of the Remote Ruby podcast, and creator of Jumpstart and Hatchbox.io. He loves building tools to make developers' lives easier and helping people learn to code.
Captions: 
	00:00:09,280 --> 00:00:15,650
Hey guys, I'm gonna be giving a talk on advanced usage of ActionText and how you can use it

00:00:15,650 --> 00:00:20,850
to attach any model in your Rails application to your rich text fields.

00:00:20,850 --> 00:00:27,119
I'm Chris Oliver, you can find me on Twitter, @excid3.

00:00:27,119 --> 00:00:33,150
I run a site called GoRails and record Screencasts talking about exactly stuff like this.

00:00:33,150 --> 00:00:35,930
So, we're gonna be diving in.

00:00:35,930 --> 00:00:42,839
If you aren't familiar with ActionText, it's basically a rich text editor for Rails.

00:00:42,839 --> 00:00:47,379
You've probably used WYSIWYGs or Markdown in the past.

00:00:47,379 --> 00:00:49,480
This is now built into Rails.

00:00:49,480 --> 00:00:57,659
It uses the Trix editor, and you can do things like make your font bold, italic, add links,

00:00:57,659 --> 00:01:03,539
bullets, that sort of thing, but it also connected to active storage out of the box, so that

00:01:03,539 --> 00:01:04,559
you can upload files.

00:01:04,559 --> 00:01:10,500
So, you'll see that, in the example here, we upload the Ruby logo to our rich text editor.

00:01:10,500 --> 00:01:18,270
And everything is connected and uploaded behind the scenes and inserted into our rich text.

00:01:18,270 --> 00:01:24,220
So, all of this is powered by the Trix editor, it's something Basecamp created for this.

00:01:24,220 --> 00:01:27,110
They use it in Basecamp, obviously.

00:01:27,110 --> 00:01:31,960
And all of this is being stored as HTML in the back end.

00:01:31,960 --> 00:01:36,970
So, this is a rich text editor that's actually generating HTML.

00:01:36,970 --> 00:01:40,850
And then when it saves it, server side, it's gonna save that HTML.

00:01:40,850 --> 00:01:46,369
So, unlike Markdown, where you're saving Markdown and converting it to HTML, you have actual

00:01:46,369 --> 00:01:48,470
HTML in your database.

00:01:48,470 --> 00:01:53,630
So, like I mentioned, file uploads come out of the box.

00:01:53,630 --> 00:01:57,009
That's something that's a little bit more tricky in Markdown.

00:01:57,009 --> 00:02:01,110
You'd actually have to generate some Markdown to insert your files.

00:02:01,110 --> 00:02:05,759
You can see an example of that if you've ever uploaded a file to GitHub.

00:02:05,759 --> 00:02:08,720
They use Markdown for their comment system.

00:02:08,720 --> 00:02:15,000
And one of the big things that makes using HTML a little bit easier than Markdown is

00:02:15,000 --> 00:02:18,430
things like user mentions, like @mentions.

00:02:18,430 --> 00:02:22,370
If you're going to use Markdown, you would search for a username, you would replace that

00:02:22,370 --> 00:02:28,420
with the link to the user, and then render that out in your HTML.

00:02:28,420 --> 00:02:31,900
GitHub has a library called HTML pipeline.

00:02:31,900 --> 00:02:36,319
I believe it was Dunn that created that, and it allows you to put in these filters for

00:02:36,319 --> 00:02:40,930
your Markdown so you can process that as you generate your HTML.

00:02:40,930 --> 00:02:46,840
So, one of their examples that it comes with, I believe, is a way to search for user mentions

00:02:46,840 --> 00:02:52,319
and replace them with links to the actual profiles on GitHub and stuff.

00:02:52,319 --> 00:02:55,700
So, you can use that same thing for yourself if you want.

00:02:55,700 --> 00:03:01,150
However, what happens when the user changes their username?

00:03:01,150 --> 00:03:07,819
So, on this screenshot here, we have an app mentioned to a user that doesn't exist.

00:03:07,819 --> 00:03:11,330
And so it's just regular text, you can't click on it.

00:03:11,330 --> 00:03:16,090
And there's not an easy way to update this to the user's new name.

00:03:16,090 --> 00:03:23,549
So, if you did rename or change your username, you'd have to actually search every single

00:03:23,549 --> 00:03:28,340
comment ever created and see if it mentions a user.

00:03:28,340 --> 00:03:33,530
And then go and update that comment with a Find and Replace in that specific location,

00:03:33,530 --> 00:03:38,000
or multiple locations, and then update that record.

00:03:38,000 --> 00:03:44,120
You have to do that across your entire database, so that you had every single reference of

00:03:44,120 --> 00:03:47,390
that up to date, which would be a real pain in the butt.

00:03:47,390 --> 00:03:53,170
And that's one of the problems that ActionText solves, is truly rich text.

00:03:53,170 --> 00:03:59,769
So when you were doing a link to a record in your Rails app, it will actually be a link

00:03:59,769 --> 00:04:05,090
to to the database record, which means that it'll always be able to render the current

00:04:05,090 --> 00:04:08,430
username, the current name, that sort of thing.

00:04:08,430 --> 00:04:15,569
The other problem with the app mentions here in Markdown is that it's really hard to do

00:04:15,569 --> 00:04:21,989
user mentions with spaces in them, because you don't know, if a user's name is normal,

00:04:21,989 --> 00:04:27,280
typical, you would have two names, two words, a first name and a last name.

00:04:27,280 --> 00:04:31,470
But there's many, many names out there that have junior or senior at the end.

00:04:31,470 --> 00:04:33,470
So then, you have to search three words.

00:04:33,470 --> 00:04:37,310
And there's plenty of others that are more than three words, too.

00:04:37,310 --> 00:04:43,289
So, how do you know when to stop auto-completing or searching that text to grab that and go

00:04:43,289 --> 00:04:44,289
find a user?

00:04:44,289 --> 00:04:49,919
You can really only do these mentions with usernames and not with people's real names.

00:04:49,919 --> 00:04:52,850
And that's one of the features that you can definitely see.

00:04:52,850 --> 00:04:58,639
You can start typing a person's real name in Basecamp, and it will auto-complete.

00:04:58,639 --> 00:05:02,750
So we're gonna go through examples on how to do that with ActionText.

00:05:02,750 --> 00:05:06,920
So, if you haven't ever set up ActionText before, it's very simple.

00:05:06,920 --> 00:05:09,740
You run rails action_text:install.

00:05:09,740 --> 00:05:14,910
That's gonna copy over some migrations, both for ActionText and active storage, because

00:05:14,910 --> 00:05:18,820
it uses active storage to store things like image uploads.

00:05:18,820 --> 00:05:23,440
And it's gonna install the JavaScript for this, so that you get the Trix editor, JavaScript.

00:05:23,440 --> 00:05:30,220
and you'll also wanna include the image processing gem to process your images and generate previews

00:05:30,220 --> 00:05:31,889
and thumbnails and things.

00:05:31,889 --> 00:05:34,330
So, it's pretty straightforward to install.

00:05:34,330 --> 00:05:39,949
If you wanna add a rich text field to any model in your app, you can add has_rich_text

00:05:39,949 --> 00:05:42,360
and give it a name.

00:05:42,360 --> 00:05:50,990
And the has_rich_text is basically going to generate methods and insert that on to your

00:05:50,990 --> 00:05:52,150
class.

00:05:52,150 --> 00:05:58,410
So it's gonna add a has one association to an ActionText, rich text with this name of

00:05:58,410 --> 00:06:03,180
body, and that's how you're gonna be able to reference that stuff.

00:06:03,180 --> 00:06:11,139
And it's also going to allow you to eager load the rich text and the embeds, the attachments,

00:06:11,139 --> 00:06:13,120
in them by adding that scope.

00:06:13,120 --> 00:06:15,949
So, that's gonna make that easier.

00:06:15,949 --> 00:06:22,950
So then, there's another way to add rich text field, when you're creating a model or a scaffold.

00:06:22,950 --> 00:06:26,840
This is actually a feature I added to Rails, which is pretty cool.

00:06:26,840 --> 00:06:36,070
This is alongside of the active storage file uploads are, I guess, the three fields in

00:06:36,070 --> 00:06:40,830
the Rails generators that don't actually map to database columns.

00:06:40,830 --> 00:06:45,539
So, your ActionText stuff is all polymorphic.

00:06:45,539 --> 00:06:53,020
So you don't have to add any fields to your models to have a rich text field.

00:06:53,020 --> 00:06:59,539
So, this is actually generating a normal field in your scaffolds but it skips that piece

00:06:59,539 --> 00:07:00,949
in the migrations.

00:07:00,949 --> 00:07:03,379
So, that we'll go ahead and create it.

00:07:03,379 --> 00:07:09,819
You can access the body by saying .body on my post.

00:07:09,819 --> 00:07:14,870
That's gonna give you a rich text database record that has your name.

00:07:14,870 --> 00:07:19,849
And the body is actually an instance of the ActionText content class.

00:07:19,849 --> 00:07:22,220
And that wraps all of your ActionText HTML.

00:07:22,220 --> 00:07:27,561
And you'll see that in the string, here in the middle.

00:07:27,561 --> 00:07:32,919
The record type, of course, is the polymorphic association to your model.

00:07:32,919 --> 00:07:40,710
And we can load the models, like all of our posts, with eager loading, their rich text

00:07:40,710 --> 00:07:41,710
content.

00:07:41,710 --> 00:07:44,370
And you can also load the attachments, as well.

00:07:44,370 --> 00:07:46,620
If you say with rich_text_content_and_embeds.

00:07:46,620 --> 00:07:53,199
It's gonna make sure that it loads all of that stuff, so you can render that out without

00:07:53,199 --> 00:07:56,030
any N-plus-one queries.

00:07:56,030 --> 00:07:59,449
So, how does ActionText work?

00:07:59,449 --> 00:08:02,710
Well, we have the ActionText rich text table.

00:08:02,710 --> 00:08:06,930
This is the association that has one that we talked about.

00:08:06,930 --> 00:08:11,569
So when we say has Rich Text body, it's gonna have a record.

00:08:11,569 --> 00:08:15,550
elated to that n the ActionText rich text.

00:08:15,550 --> 00:08:22,190
The text column, called body, is gonna store our HTML that gets wrapped as the ActionText

00:08:22,190 --> 00:08:25,669
content class, which adds some methods around that.

00:08:25,669 --> 00:08:28,639
And this is an example of the raw data that you would see in there.

00:08:28,639 --> 00:08:34,740
So this is an example like you saw at the very beginning, just with the image.

00:08:34,740 --> 00:08:43,470
So, you'll see here, we have a div, we have a new line, and we have an ActionText attachment.

00:08:43,470 --> 00:08:49,190
This ActionText attachment tag has some attributes on it, but no content inside of it.

00:08:49,190 --> 00:08:51,070
And that's kind of the trick here.

00:08:51,070 --> 00:08:57,700
So, the ActionText HTML that's stored in your database, when it references attachments,

00:08:57,700 --> 00:09:02,551
it's gonna minify them and compress them, basically, so that it doesn't store any of

00:09:02,551 --> 00:09:03,590
the actual HTML.

00:09:03,590 --> 00:09:10,720
So, if we were to render this out directly in the browser, you would see no image represented

00:09:10,720 --> 00:09:11,720
at all.

00:09:11,720 --> 00:09:19,170
And that is because when ActionText goes and parses this HTML to render out, for the final

00:09:19,170 --> 00:09:25,290
version, it's gonna look at these attachments, find the database record for active storage

00:09:25,290 --> 00:09:32,490
blobs for these images, then render those out as HTML with a certain template, and then

00:09:32,490 --> 00:09:36,860
insert it in here, inside of the ActionText attachment.

00:09:36,860 --> 00:09:45,260
So, the way that it does that is it has a signed Global ID, or SGID, that it has as

00:09:45,260 --> 00:09:46,330
an attribute here.

00:09:46,330 --> 00:09:47,580
So it's gonna parse that out.

00:09:47,580 --> 00:09:53,530
And this big long string is a Global ID, which allows you to reference a different model

00:09:53,530 --> 00:09:55,850
in your Rails app.

00:09:55,850 --> 00:09:59,190
So Global ID looks like this.

00:09:59,190 --> 00:10:07,620
It's gid://, your app, and then, your class name, and your lookup ID.

00:10:07,620 --> 00:10:14,940
So what this one would do was grab user number one, it would just call user.find one.

00:10:14,940 --> 00:10:21,400
So, for signed Global IDs, they're basically the exact same thing, but they're signed by

00:10:21,400 --> 00:10:26,830
the server and they can have like a purpose, as well as expirations.

00:10:26,830 --> 00:10:34,290
Now the ActionText, Signed Global IDs don't have expirations.

00:10:34,290 --> 00:10:37,620
But they are marked as for attachable.

00:10:37,620 --> 00:10:43,850
So, this big long string is our assigned Global ID, and internally, when ActionText is going

00:10:43,850 --> 00:10:49,500
through every one of those attachments it finds, if it has an assigned Global ID, it's

00:10:49,500 --> 00:10:52,280
going to run it through the Global ID locator.

00:10:52,280 --> 00:11:01,120
And that's gonna make sure that the Signed Global ID is correct, and then grab the related

00:11:01,120 --> 00:11:02,120
record.

00:11:02,120 --> 00:11:07,330
So, in our example, with the file upload, it's gonna return us an active storage blob.

00:11:07,330 --> 00:11:10,820
So, that's gonna find the image upload for us.

00:11:10,820 --> 00:11:15,120
That's gonna prevent tampering, because, of course, if the user is typing this stuff in,

00:11:15,120 --> 00:11:19,480
you don't want them to be able to actually just change the user ID and point to a different

00:11:19,480 --> 00:11:24,410
user and print out someone else's details.

00:11:24,410 --> 00:11:29,780
And because this will work across any class, it doesn't have to be an active record class,

00:11:29,780 --> 00:11:33,380
as long as it supports Global ID lookup.

00:11:33,380 --> 00:11:37,520
You could use this to reference pretty much anything in your Rails app, as long as it's

00:11:37,520 --> 00:11:43,890
supported Global ID, which I think only the default stuff is active record models.

00:11:43,890 --> 00:11:52,210
So, that's another thing that you wouldn't want this to be too editable by a user.

00:11:52,210 --> 00:11:56,720
So, that is probably the most complex part of ActionText.

00:11:56,720 --> 00:12:02,840
To get the Signed Global IDs, we actually have to make a request to the server and say,

00:12:02,840 --> 00:12:08,340
here's our file upload, or the user that we wanna mention.

00:12:08,340 --> 00:12:14,830
And the server's gonna have to sign that and return the Signed Global ID to the JavaScript

00:12:14,830 --> 00:12:16,360
to insert into the page.

00:12:16,360 --> 00:12:21,840
That way, it can't be tampered with, and it's generated by the server.

00:12:21,840 --> 00:12:26,030
So then once it finds that record it will render a template.

00:12:26,030 --> 00:12:29,090
There's two templates that it might render.

00:12:29,090 --> 00:12:32,320
By default, they're gonna use the same one, but you can change it.

00:12:32,320 --> 00:12:35,420
So, there's the template when you render out this content.

00:12:35,420 --> 00:12:40,120
But there's also a template when you're editing the content, and it's going in the Trix editor.

00:12:40,120 --> 00:12:45,320
So, you can actually have two different sets of HTML here for a file upload.

00:12:45,320 --> 00:12:49,630
One might have an input for the caption, the other one, where it's being rendered for the

00:12:49,630 --> 00:12:52,490
final version, doesn't need an input.

00:12:52,490 --> 00:12:55,600
It just needs to render the caption, if it exists.

00:12:55,600 --> 00:13:02,760
So, your HTML is going to end up inserting these things for the action of active storage

00:13:02,760 --> 00:13:04,600
blobs.

00:13:04,600 --> 00:13:09,670
You're gonna get a figure tag and an image tag and a figure caption, and so on.

00:13:09,670 --> 00:13:15,060
So it's gonna include all of that info in your final version of this rendering.

00:13:15,060 --> 00:13:20,830
So, because we need these two different types of templates, that is why it definitely doesn't

00:13:20,830 --> 00:13:27,630
need, or should not, store this HTML in the database, because it's gonna be changing it

00:13:27,630 --> 00:13:28,630
and replacing it.

00:13:28,630 --> 00:13:33,180
So, why store it if we're gonna replace it anyways?

00:13:33,180 --> 00:13:39,360
So, active storage attachments are used for ActionText rich text.

00:13:39,360 --> 00:13:42,380
You can see these in your database.

00:13:42,380 --> 00:13:45,900
This is going to reference the embeds, and so on.

00:13:45,900 --> 00:13:52,110
So that's another thing you should be aware of that is helping to power ActionText to

00:13:52,110 --> 00:13:53,480
make all of this work.

00:13:53,480 --> 00:13:56,250
So, let's dive into an example.

00:13:56,250 --> 00:14:01,810
YouTube embeds is a highly, highly requested feature on this, and we're gonna walk through

00:14:01,810 --> 00:14:04,790
how to add that to your application.

00:14:04,790 --> 00:14:12,130
So, first things first is, we need to customize the Trix editor so we can start and detect

00:14:12,130 --> 00:14:16,920
when the user wants to embed a YouTube video in the first place.

00:14:16,920 --> 00:14:22,060
So the way that we're gonna do this is the URL linking.

00:14:22,060 --> 00:14:24,770
This pops up a little modal when you click the button.

00:14:24,770 --> 00:14:29,540
And we want it so that when you paste in a YouTube URL that it will detect that with

00:14:29,540 --> 00:14:35,680
a regex and then display a little link that says, do you want to embed this, and a button

00:14:35,680 --> 00:14:37,900
that says yes, embed this.

00:14:37,900 --> 00:14:44,870
So, what we can do is we can write a little JavaScript that imports Trix, so we can customize

00:14:44,870 --> 00:14:46,430
their toolbar.

00:14:46,430 --> 00:14:54,220
So we're gonna need to import Trix in the language config, because that's used in the

00:14:54,220 --> 00:14:58,200
Trix editor for internationalization.

00:14:58,200 --> 00:15:02,380
And then, we need to override the get default HTML function.

00:15:02,380 --> 00:15:04,220
And that needs to return some HTML.

00:15:04,220 --> 00:15:09,890
I've removed most of it because it's super long, definitely too long to fit on a slide.

00:15:09,890 --> 00:15:15,860
But you'll want to go and grab the HTML out of Trix, so that you can override it in your

00:15:15,860 --> 00:15:17,420
JavaScript.

00:15:17,420 --> 00:15:25,420
So, what we need to do is add a little link underneath that, inside of that HTML.

00:15:25,420 --> 00:15:26,790
And we'll make it look like this.

00:15:26,790 --> 00:15:28,550
Would you like to embed from the site?

00:15:28,550 --> 00:15:29,630
Yes, embed it.

00:15:29,630 --> 00:15:34,230
So, we'll display this only if we find a matching URL.

00:15:34,230 --> 00:15:43,830
So, Trix' toolbar HTML has a section in here for a dialogue, and the link field is the

00:15:43,830 --> 00:15:45,600
one that we're looking for.

00:15:45,600 --> 00:15:49,610
So this has the dialogue for the href.

00:15:49,610 --> 00:15:54,560
You'll see that in the grayed-out portion up here, but we need to add in our own HTML

00:15:54,560 --> 00:15:55,770
into that.

00:15:55,770 --> 00:16:03,390
And so, we add our text and our input through the embed URL, and that is our button.

00:16:03,390 --> 00:16:06,500
And so, we'll listen to that when it's clicked.

00:16:06,500 --> 00:16:10,880
And we'll grab the value out of the link href.

00:16:10,880 --> 00:16:15,730
And basically, we need to go and listen to that URL field.

00:16:15,730 --> 00:16:20,970
So, anytime it changes, we need to run it through our regex matcher, see if it's a YouTube

00:16:20,970 --> 00:16:23,800
URL, and we can grab the ID out of it.

00:16:23,800 --> 00:16:30,670
If it is, we'll enable the embed container HTML that we just added, and we'll make that

00:16:30,670 --> 00:16:31,670
visible.

00:16:31,670 --> 00:16:36,140
If it's not, we can just hide this so that it disappears.

00:16:36,140 --> 00:16:40,680
So, we need our regex to match all of this.

00:16:40,680 --> 00:16:43,510
So, here's an example regex.

00:16:43,510 --> 00:16:49,820
You're probably gonna need a list of these because YouTube even has many different URLs

00:16:49,820 --> 00:16:52,740
with the IDs that you can paste in.

00:16:52,740 --> 00:16:55,320
And so, you might need more than just this format.

00:16:55,320 --> 00:17:01,110
So, it's gonna be kind of a thing you'll need to loop through and make more complex.

00:17:01,110 --> 00:17:08,021
But in the basic case, we can use the standard YouTube watch URLs with a video ID at the

00:17:08,021 --> 00:17:09,280
end.

00:17:09,280 --> 00:17:11,559
So, here's what that should look like.

00:17:11,559 --> 00:17:15,800
We can paste that in, and we'll listen to that.

00:17:15,800 --> 00:17:17,690
And we'll display that text.

00:17:17,690 --> 00:17:20,230
And then, we have this Yes, embedded button.

00:17:20,230 --> 00:17:25,150
So now, once we have that all working, we'll need to set that up.

00:17:25,150 --> 00:17:31,540
So, I'm gonna skip over setting up the event listeners for that button, and so on.

00:17:31,540 --> 00:17:32,540
But it's pretty easy.

00:17:32,540 --> 00:17:37,100
It's just like listening to any other field for changes.

00:17:37,100 --> 00:17:43,000
So, once we have the user clicking that button, we wanna double check and match against that

00:17:43,000 --> 00:17:44,530
regex.

00:17:44,530 --> 00:17:51,730
Just in case that button, maybe, is accidentally displayed, and our CSS didn't hide it properly.

00:17:51,730 --> 00:17:58,160
We can double check with this, and we can also use that to grab the ID of the YouTube

00:17:58,160 --> 00:17:59,670
video out.

00:17:59,670 --> 00:18:03,490
And then, we can make an AJAX request to our Rails app.

00:18:03,490 --> 00:18:09,820
So, we're gonna make a URL called /youtube, we'll give it the YouTube video ID.

00:18:09,820 --> 00:18:11,480
And this will be a get request.

00:18:11,480 --> 00:18:16,200
If it's successful, then we can insert that attachment into ActionText.

00:18:16,200 --> 00:18:24,100
And if it's a failure, we can reset the form so we can hide that YouTube embed.

00:18:24,100 --> 00:18:31,610
So, our controller is gonna need a YouTube controller that is used specifically for this.

00:18:31,610 --> 00:18:37,930
Now, this is going to be a controller used specifically for the Trix editor portion of

00:18:37,930 --> 00:18:38,930
this.

00:18:38,930 --> 00:18:42,710
So, we're gonna have it create a YouTube instance.

00:18:42,710 --> 00:18:48,510
we'll pass in that ID for the YouTube video, and YouTube's special, because we don't need

00:18:48,510 --> 00:18:52,690
to actually make any API requests, we can just have this in memory, because we're gonna

00:18:52,690 --> 00:18:57,920
have a string for the URL, we can just put the ID in and that's our thumbnail URL 'cause

00:18:57,920 --> 00:19:00,380
it's always the same format.

00:19:00,380 --> 00:19:07,720
If you needed to do to make an API request, you would go and create a database record

00:19:07,720 --> 00:19:12,940
and cache that URL, or the ID, or whatever, so that you don't have to do this look up

00:19:12,940 --> 00:19:15,890
every single time that you would render things.

00:19:15,890 --> 00:19:23,020
So, this YouTube instance that we're creating here with an ID is going to be what ActionText

00:19:23,020 --> 00:19:26,070
references in that Global ID later on.

00:19:26,070 --> 00:19:31,500
So, if you are doing something that takes a little bit of work, you wanna make sure

00:19:31,500 --> 00:19:36,180
that this is a database record so it can be looked up very quickly, rather than creating

00:19:36,180 --> 00:19:39,630
an instance that needs to make an API request.

00:19:39,630 --> 00:19:45,470
That would have to run the API request every single time you rendered the ActionText content,

00:19:45,470 --> 00:19:46,630
which be very bad.

00:19:46,630 --> 00:19:50,960
So you don't wanna do that in memory.

00:19:50,960 --> 00:19:53,540
You wanna cache that stuff to the database.

00:19:53,540 --> 00:20:00,950
So, once we have our YouTube instance representing that video, we can render out some HTML content.

00:20:00,950 --> 00:20:03,630
So, we wanna render out the YouTube thumbnail.

00:20:03,630 --> 00:20:11,390
So, we got a little partial called youtubes/thumbnail, and we can render that to HTML.

00:20:11,390 --> 00:20:16,890
And by rendering it to a string, we can include the HTML in our JSON response.

00:20:16,890 --> 00:20:23,380
Now, YouTube is gonna have this method called attachable SGID, or attachable Signed Global

00:20:23,380 --> 00:20:26,930
ID, that we will include in our JSON response.

00:20:26,930 --> 00:20:29,100
And I'm gonna talk about that now.

00:20:29,100 --> 00:20:31,640
So, we'll go into our YouTube class.

00:20:31,640 --> 00:20:40,670
And we need a class to be able to reference all of the ActionText stuff.

00:20:40,670 --> 00:20:49,330
So first off, we need a way to have an ID kept track of here, our YouTube video ID.

00:20:49,330 --> 00:20:54,860
So we're gonna import active model and active model attributes, that way, we can use the

00:20:54,860 --> 00:21:01,450
attribute ID, and we can make a little find method that will be match what the Global

00:21:01,450 --> 00:21:03,280
ID stuff needs.

00:21:03,280 --> 00:21:08,820
So, this is just because we are making something that isn't Active Record base, we're gonna

00:21:08,820 --> 00:21:14,750
need to import active model and Global ID and create our attribute and find to kind

00:21:14,750 --> 00:21:19,800
of match the API or interface that active record already has.

00:21:19,800 --> 00:21:25,830
Now, the real important line here is the include ActionText attachable.

00:21:25,830 --> 00:21:29,900
That is gonna make your model attachable to ActionText.

00:21:29,900 --> 00:21:35,200
It's gonna give you that attachable Signed Global ID that will generate a Global ID for

00:21:35,200 --> 00:21:39,030
this record based on the ID and the class name for you.

00:21:39,030 --> 00:21:48,070
So, it's gonna use the Global ID functionality to generate that same Global ID and add that

00:21:48,070 --> 00:21:52,330
attachable SGID method that we just called in the controller.

00:21:52,330 --> 00:21:56,110
So then, we have a couple other methods down here at the bottom.

00:21:56,110 --> 00:21:57,610
We have thumbnail URL.

00:21:57,610 --> 00:22:02,340
That way, we can easily reference the YouTube video thumbnail.

00:22:02,340 --> 00:22:05,110
It's always the same format.

00:22:05,110 --> 00:22:10,150
But if this changed or was dynamic, we would probably wanna cache this to the database.

00:22:10,150 --> 00:22:15,960
But since it's static, or as far as I know, it's static, we can just insert the ID, and

00:22:15,960 --> 00:22:21,360
voila, we have our image URL, or thumbnail URL, for our YouTube video.

00:22:21,360 --> 00:22:31,530
Now, like we talked about earlier, especially for videos, in some cases, we want our ActionText

00:22:31,530 --> 00:22:39,440
attachments to have different renderings in the Trix editor versus our final content.

00:22:39,440 --> 00:22:40,920
And this is one of those cases.

00:22:40,920 --> 00:22:45,630
With YouTube embed, you want your Trix editor to just display a thumbnail.

00:22:45,630 --> 00:22:48,480
You don't want, actually, a playable video in your editor.

00:22:48,480 --> 00:22:51,880
That would be too hard to work with, and it's gonna be tricky.

00:22:51,880 --> 00:22:56,240
You might accidentally play the video when you're trying to select it and just delete

00:22:56,240 --> 00:22:57,240
it.

00:22:57,240 --> 00:23:04,810
So it's very hard to work with, and instead, ActionText gives you a method you can override

00:23:04,810 --> 00:23:09,130
called to Trix content attachment partial path.

00:23:09,130 --> 00:23:15,900
Long name, but it basically allows you to override the partial path so that it can render

00:23:15,900 --> 00:23:23,250
out the correct partial for the Trix version of this.

00:23:23,250 --> 00:23:25,970
This is actually a feature I worked on, as well.

00:23:25,970 --> 00:23:31,090
By default, I think it wasn't even defined, and now, it's set up.

00:23:31,090 --> 00:23:36,640
The default is gonna render the normal to partial path from active record and active

00:23:36,640 --> 00:23:37,640
model.

00:23:37,640 --> 00:23:44,040
So, that would be like youtubes/youtube.htmlerb, is the partial name.

00:23:44,040 --> 00:23:48,450
So, you can override that and provide a different template.

00:23:48,450 --> 00:23:53,570
If you leave this out, it will render the regular to partial path template.

00:23:53,570 --> 00:23:58,470
So, our thumbnail template, we just want to display that image tag.

00:23:58,470 --> 00:24:01,910
We can do whatever we want in this partial.

00:24:01,910 --> 00:24:06,430
And because we referenced that personal name, this is the file location we're gonna need

00:24:06,430 --> 00:24:07,940
to create that.

00:24:07,940 --> 00:24:12,770
And we'll do the image tag to the YouTube thumbnail URL.

00:24:12,770 --> 00:24:14,110
Simple as that.

00:24:14,110 --> 00:24:18,990
So, then for actual final rendering, it's gonna use that to partial path.

00:24:18,990 --> 00:24:20,400
We didn't override that.

00:24:20,400 --> 00:24:23,970
So it's gonna render app/views/youtubes/_youtube.html.erb.

00:24:23,970 --> 00:24:32,180
So, when it finds the YouTube class name, that's the default to partial path.

00:24:32,180 --> 00:24:37,710
So in that case, we want to render an iframe, which is actually our video.

00:24:37,710 --> 00:24:45,080
So, in this case, our iframe will have a source to youtube.com/embed, and our video ID.

00:24:45,080 --> 00:24:49,150
So, there's nothing too complex about that.

00:24:49,150 --> 00:24:56,560
But that is a nice feature when you need different things in your editor versus otherwise.

00:24:56,560 --> 00:24:58,990
So, let's take a look at an example.

00:24:58,990 --> 00:25:04,670
If we paste in a YouTube link to one of the videos I've created on GoRails, actually about

00:25:04,670 --> 00:25:11,570
building the next feature we will talk about, this will walk you through how all that works.

00:25:11,570 --> 00:25:16,870
So this is when we click the button, it makes a Rails Ajax request that returns a Signed

00:25:16,870 --> 00:25:22,750
Global ID to the JavaScript, and then the content, as well.

00:25:22,750 --> 00:25:28,550
And that embeds it as an attachment on the page inside of Trix.

00:25:28,550 --> 00:25:32,630
And then, we can see these two things being rendered out.

00:25:32,630 --> 00:25:38,910
So, this is an example of how all of that works.

00:25:38,910 --> 00:25:48,030
And our JavaScript, when the JavaScript response comes back from our Ajax request, we'll just

00:25:48,030 --> 00:25:50,970
create a new Trix attachment and insert it.

00:25:50,970 --> 00:25:56,880
So, we'll talk about that in our user mentions, which will get into a little bit more of the

00:25:56,880 --> 00:25:58,800
JavaScript portion of this stuff.

00:25:58,800 --> 00:26:04,620
So, for users mentions, where we type the at symbol and we type a user's name or username,

00:26:04,620 --> 00:26:08,730
we're gonna need a extra JavaScript library to do this.

00:26:08,730 --> 00:26:12,330
And the one we're gonna use is ZURB Tribute, you could use, really, any of these.

00:26:12,330 --> 00:26:20,240
I really like ZURB Tribute though, because it's capable of matching with spaces.

00:26:20,240 --> 00:26:26,210
So you'll see that it's typing out people's full names here, and those are being returned

00:26:26,210 --> 00:26:27,210
here.

00:26:27,210 --> 00:26:28,500
So, this is really nice.

00:26:28,500 --> 00:26:35,460
And this example is actually using local collection in memory and JavaScript for the at symbol,

00:26:35,460 --> 00:26:42,550
but the hash symbol is actually making an AJAX request to retrieve the HTML, or the

00:26:42,550 --> 00:26:45,680
JSON suggestions.

00:26:45,680 --> 00:26:47,680
And then, you can select from those.

00:26:47,680 --> 00:26:54,309
And we want, of course, to use the AJAX request to grab the user suggestions in JSON.

00:26:54,309 --> 00:27:00,950
So, to use Tribute, you run yarn add tributejs.

00:27:00,950 --> 00:27:04,070
Pretty simple, like every other node module.

00:27:04,070 --> 00:27:10,340
So, we need to build something like a stimulus controller that will go and set up every time

00:27:10,340 --> 00:27:14,940
that we see a rich text field on the page.

00:27:14,940 --> 00:27:17,140
And that's something I forgot to mention.

00:27:17,140 --> 00:27:21,910
But the rich text field, when you render out that editor, your scaffold will generate this

00:27:21,910 --> 00:27:26,840
for you, but normally, have a text field or text area.

00:27:26,840 --> 00:27:33,440
There's a rich text field that you can use for creating your Tribute, or your Trix in

00:27:33,440 --> 00:27:35,960
your ActionText form field.

00:27:35,960 --> 00:27:40,470
So, for Tribute, we need to import the CSS and the JavaScript.

00:27:40,470 --> 00:27:45,870
And if we use a stimulus controller that we can add to our rich text field, then it will

00:27:45,870 --> 00:27:49,550
be set up to use Tribute on every single one of those.

00:27:49,550 --> 00:27:51,470
we can remove it, as well.

00:27:51,470 --> 00:27:57,730
So if we don't want at mentions in a certain rich text field, we just remove the stimulus

00:27:57,730 --> 00:28:02,150
controller attributes from the field, and we're done.

00:28:02,150 --> 00:28:07,440
So, the other benefit of this is that it's gonna create a different stimulus controller

00:28:07,440 --> 00:28:09,640
instance for each one of those fields.

00:28:09,640 --> 00:28:15,290
So, if you were doing like a survey and you had multiple rich text attributes, you could

00:28:15,290 --> 00:28:20,280
have multiple rich text fields, and each one of those could be set up with an instance

00:28:20,280 --> 00:28:23,800
of our mentions stimulus controller.

00:28:23,800 --> 00:28:29,810
So, when our stimulus controller connects, we're gonna be able to grab the field.

00:28:29,810 --> 00:28:34,920
You probably also skip the target here, and just reference this .element, I think.

00:28:34,920 --> 00:28:40,390
But the Trix editor will be set up as editor on our field.

00:28:40,390 --> 00:28:46,370
So, we'll save a reference to this .editor so that we can access Trix anytime we need

00:28:46,370 --> 00:28:49,200
to, and we'll initialize Tribute.

00:28:49,200 --> 00:28:54,590
And then when we disconnect, we just wanna remove Tribute and detach it from that field

00:28:54,590 --> 00:28:58,660
before TurboLinks caches the HTML on the page.

00:28:58,660 --> 00:29:01,730
So, initializing Tribute is straightforward.

00:29:01,730 --> 00:29:05,250
We can create a new Tribute instance, we can say, allow spaces.

00:29:05,250 --> 00:29:10,990
That's gonna allow us to have names with spaces in between the first name, last name, and

00:29:10,990 --> 00:29:13,620
so on.

00:29:13,620 --> 00:29:18,670
Lookup is for taking the JSON response of all the user suggestions.

00:29:18,670 --> 00:29:25,360
And we look at the name attribute or property in those, and we filter out by that.

00:29:25,360 --> 00:29:29,570
Then for values, we can have a method called fetch users.

00:29:29,570 --> 00:29:33,740
It will take the text that you've already typed, and a callback, and we just make an

00:29:33,740 --> 00:29:40,390
AJAX request to the server to get mentions that match that text that you've already typed.

00:29:40,390 --> 00:29:43,440
And if there are some, we'll call the callback.

00:29:43,440 --> 00:29:48,270
Otherwise, if there is no response, or an error or something, we'll just have an empty

00:29:48,270 --> 00:29:50,090
array that we pass to the callback.

00:29:50,090 --> 00:29:58,440
And then of course, we attach Tribute to our rich text field, so it can listen to that.

00:29:58,440 --> 00:30:03,590
And all of that will be connected, so that when we're typing in the field, Tribute will

00:30:03,590 --> 00:30:07,010
be analyzing that, looking for you to type the at symbol.

00:30:07,010 --> 00:30:11,780
And if you do, then it's gonna listen to the next characters and keep track of what characters

00:30:11,780 --> 00:30:15,360
you've typed so far, and all of that.

00:30:15,360 --> 00:30:22,250
So then, server side, we make our Ajax request, and we pass it the text you've typed like

00:30:22,250 --> 00:30:23,250
CHR.

00:30:23,250 --> 00:30:29,770
And then, the server needs to find all user names that start with the CHR, and so on.

00:30:29,770 --> 00:30:33,600
So we have some sort of query to do this.

00:30:33,600 --> 00:30:40,090
Using SQL for an example here, we can use like, and then we have our query for the text

00:30:40,090 --> 00:30:47,820
and we put a percent sign at the end that will find anything that starts with CHR and

00:30:47,820 --> 00:30:50,420
doesn't care what it ends with.

00:30:50,420 --> 00:30:55,790
This is also case insensitive in SQL Lite, so that will take care of what we need it.

00:30:55,790 --> 00:31:02,911
But if you're using Postgres, or, you know, you can use PGD search or Elastic Search,

00:31:02,911 --> 00:31:06,630
or anything for this, as long as you can query your names.

00:31:06,630 --> 00:31:10,730
Probably want them all to be down cased, and so on.

00:31:10,730 --> 00:31:18,420
It is a thing that you can spend a bit more time on, trying to get good matching of names

00:31:18,420 --> 00:31:21,190
set up in in the server side.

00:31:21,190 --> 00:31:27,170
So, we have a very trivial example, to do that, but it'll work for our use case.

00:31:27,170 --> 00:31:33,530
So then, we need to go through all of those users that we found that match that name.

00:31:33,530 --> 00:31:36,330
And then, we need to generate a JSON response.

00:31:36,330 --> 00:31:39,750
So, this is gonna be very similar to our YouTube embeds.

00:31:39,750 --> 00:31:46,570
We need our SGID, which is our attachable SGID, and our content, the HTML that we wanna

00:31:46,570 --> 00:31:49,080
insert into the Trix editor.

00:31:49,080 --> 00:31:51,310
But we've also included that name in there.

00:31:51,310 --> 00:31:57,740
That name is gonna be like I mentioned before, what Tribute will filter this JSON array with.

00:31:57,740 --> 00:32:02,230
So it's gonna look at that property and filter it out accordingly.

00:32:02,230 --> 00:32:09,420
So, our users need ActionText attachable, and, of course, because they are active record

00:32:09,420 --> 00:32:16,179
objects, we don't need to include active model or Global ID, or any of those things.

00:32:16,179 --> 00:32:21,299
This is going to be all you need to do as long as you have an active record model.

00:32:21,299 --> 00:32:23,230
So very, very simple.

00:32:23,230 --> 00:32:31,110
And in users cases, when we're doing at mentions, we want the exact same display of those users

00:32:31,110 --> 00:32:34,980
in the editor as with the final version.

00:32:34,980 --> 00:32:42,059
So, we don't need to worry too much about overriding the to Trix content attachment

00:32:42,059 --> 00:32:47,910
partial path, because it's gonna be the same thing, basically, for this.

00:32:47,910 --> 00:32:54,170
And what's really neat about this, and if you've seen or used Basecamp, you're partial

00:32:54,170 --> 00:32:58,170
for this user can actually include their avatar.

00:32:58,170 --> 00:33:04,890
So, it's really neat to be able to at-mention a user, see their avatar and their name.

00:33:04,890 --> 00:33:11,470
If they go and update their avatar, then your next time you refresh the page, when their

00:33:11,470 --> 00:33:17,010
user mentioned is rendered in your text, it will display the current avatar.

00:33:17,010 --> 00:33:22,100
It's not caching any of that, and so it's gonna always render the latest version of

00:33:22,100 --> 00:33:23,570
it, which is neat.

00:33:23,570 --> 00:33:30,391
Or you can cach it, but it's not catching it in the ActionText HTML itself, like you

00:33:30,391 --> 00:33:34,590
would see with Markdown or any other WYSIWYG editor.

00:33:34,590 --> 00:33:38,710
So, here's an example of our JSON response.

00:33:38,710 --> 00:33:46,840
We have an array of JavaScript objects, JSON objects, that have a name, an SG ID, and our

00:33:46,840 --> 00:33:47,840
content.

00:33:47,840 --> 00:33:49,890
And so, our example is a super simple.

00:33:49,890 --> 00:33:54,100
We have a span tag and the user's name.

00:33:54,100 --> 00:33:56,810
We can insert the their avatar in there.

00:33:56,810 --> 00:34:02,700
Doesn't really matter, but you can put anything you want in here.

00:34:02,700 --> 00:34:09,889
So then, Tribute is a little tricky, because you've been typing into your Trix editor,

00:34:09,889 --> 00:34:20,500
the at mention, like @CHR, or in this case @HENR, to get the Henry's filtered down.

00:34:20,500 --> 00:34:25,780
So, when you're typing that text, that's actually living, still, in the Trix editor, you don't

00:34:25,780 --> 00:34:27,210
wanna save that.

00:34:27,210 --> 00:34:30,470
And so, when you select a user, we're gonna delete that.

00:34:30,470 --> 00:34:40,210
So, we can use the paste HTML callback inside of Tribute, and it will give us the HTML and

00:34:40,210 --> 00:34:42,080
the start position and the end position.

00:34:42,080 --> 00:34:48,340
So, we can actually interact with Trix to go and select the text you've already written.

00:34:48,340 --> 00:34:54,850
So, if we grab the current position in Trix, and we move backwards the amount of characters

00:34:54,850 --> 00:35:02,720
you've typed, so like, the at symbol and the HENR for Henry, we could go and basically

00:35:02,720 --> 00:35:06,200
highlight all the way back to that symbol, and then delete I.

00:35:06,200 --> 00:35:10,109
And that's what this paste HTML function is doing.

00:35:10,109 --> 00:35:15,540
It's calculating the length of stuff you've typed, taking the current position, moving

00:35:15,540 --> 00:35:22,120
back to the at symbol, and then just deleting all of that with a backspace, basically.

00:35:22,120 --> 00:35:27,410
So, get selected range and select selected range is gonna highlight text, like you would

00:35:27,410 --> 00:35:29,720
do with your mouse cursor.

00:35:29,720 --> 00:35:33,810
And then, we delete direction backwards with a backspace.

00:35:33,810 --> 00:35:40,760
If you delete in direction forward, it's like hitting the delete key instead.

00:35:40,760 --> 00:35:43,580
So, here's basically what that looks like.

00:35:43,580 --> 00:35:51,770
If we type @HENR, and we hit to insert one of these Henry's, we are gonna set the selected

00:35:51,770 --> 00:36:02,030
range to highlight @HENR, our autocomplete suggestion thing there that we've typed, and

00:36:02,030 --> 00:36:04,820
we just wanna delete that.

00:36:04,820 --> 00:36:10,770
So then, the next step is to actually insert the Henry we selected, the HTML we got from

00:36:10,770 --> 00:36:11,770
the server.

00:36:11,770 --> 00:36:14,500
So, there's an event listener and called Tribute Replaced.

00:36:14,500 --> 00:36:17,880
We listen to this, and then we insert our Trix attachment.

00:36:17,880 --> 00:36:27,240
So, we can grab the JSON for Henry, by saying event.detail.item.original.

00:36:27,240 --> 00:36:33,859
That's gonna grab our JSON object for it that Tribute has filtered out for us.

00:36:33,859 --> 00:36:37,390
And then, we need to insert our Trix attachment.

00:36:37,390 --> 00:36:41,330
This is the same code we would do on the YouTube example.

00:36:41,330 --> 00:36:48,000
Just insert the SG ID and the content and voila, you have a Trix attachment that is

00:36:48,000 --> 00:36:51,210
safe for active storage to save.

00:36:51,210 --> 00:36:57,650
And then, we insert our attachment, and then, we can just add a space at the end, so that

00:36:57,650 --> 00:37:02,550
you can continue typing and you don't have to hit space after typing the name.

00:37:02,550 --> 00:37:04,010
Simple as that.

00:37:04,010 --> 00:37:10,530
So, what that will do is insert Henry Gutkowski into our editor.

00:37:10,530 --> 00:37:18,200
And what's kind of interesting about this is it is a HTML tag, a span tag.

00:37:18,200 --> 00:37:25,590
And while you might normally be able to edit and delete this text, that is treated as a

00:37:25,590 --> 00:37:26,600
single object.

00:37:26,600 --> 00:37:28,840
It's a single character in Trix.

00:37:28,840 --> 00:37:34,869
So, if you hit Delete, or the Backspace key, or click this X, it's gonna delete all of

00:37:34,869 --> 00:37:39,590
Henry Gutkowski, and you're aren't able to edit his name at all.

00:37:39,590 --> 00:37:44,930
It's gonna just render out whatever HTML was sent from the server side.

00:37:44,930 --> 00:37:51,220
So, that is a nice thing that you can get rid of our user reference just by doing that,

00:37:51,220 --> 00:37:56,800
just by hitting the X, and it is a single object inside of Trix.

00:37:56,800 --> 00:37:59,640
So, here's how user mentions look.

00:37:59,640 --> 00:38:03,400
When you type a user's name, we see our auto-completes.

00:38:03,400 --> 00:38:07,880
If we make a mistake, and there's no results, it says, no matches found.

00:38:07,880 --> 00:38:13,920
We hit Enter, inserts their full name, deletes the text we typed.

00:38:13,920 --> 00:38:21,230
And if we render it and go back to the editor, we can change the name, we can delete and

00:38:21,230 --> 00:38:22,230
aim.

00:38:22,230 --> 00:38:28,310
All of those references are kept intact before and after we render this.

00:38:28,310 --> 00:38:33,280
So, that is kind of the end end example with user mentions.

00:38:33,280 --> 00:38:36,080
You could add in your avatars, like I mentioned.

00:38:36,080 --> 00:38:43,200
You just make them small, whatever text size it is, and probably make them rounded or something

00:38:43,200 --> 00:38:45,380
to look pretty.

00:38:45,380 --> 00:38:52,400
And you could have a much richer text experience, similar to you know, what you would see on

00:38:52,400 --> 00:38:53,400
Basecamp.

00:38:53,400 --> 00:38:56,600
That was always the example I was like, oh, man, they did a really good job.

00:38:56,600 --> 00:39:00,190
I would love to do that in Rails, and here we are.

00:39:00,190 --> 00:39:02,070
We can now do that in Rails.

00:39:02,070 --> 00:39:05,970
So, those two examples are pretty cool.

00:39:05,970 --> 00:39:07,840
But look at this.

00:39:07,840 --> 00:39:13,650
If we go into our terminal, and we update the user's name and just refresh the page,

00:39:13,650 --> 00:39:20,850
we can change Flavio's name to my name Chris Oliver, and refresh our page.

00:39:20,850 --> 00:39:26,880
And next time it renders, it's gonna say, hey, Chris Oliver, and just update and use

00:39:26,880 --> 00:39:27,880
the latest version.

00:39:27,880 --> 00:39:35,869
So that is the real magic to the ActionText stuff, because it is referencing actual instances

00:39:35,869 --> 00:39:43,160
of database records or other classes in your code, you have always the latest version of

00:39:43,160 --> 00:39:44,690
that.

00:39:44,690 --> 00:39:49,130
Nothing will be stale, but of course, this is a little bit more complex, because any

00:39:49,130 --> 00:39:52,970
attachment you add now needs to be signed by the server.

00:39:52,970 --> 00:39:58,220
So, you can't just add a regular Trix attachment like you might be used to, if you've used

00:39:58,220 --> 00:39:59,380
Trix in the past.

00:39:59,380 --> 00:40:06,060
Those all must have SGIDs, otherwise, it will just remove that attachment when it does the

00:40:06,060 --> 00:40:07,990
final rendering.

00:40:07,990 --> 00:40:14,760
There are some exceptions, like the horizontal rules that I know are kind of built into ActionText

00:40:14,760 --> 00:40:15,760
right now.

00:40:15,760 --> 00:40:21,010
I need to go and look into that a little bit more myself and see how they set up that one.

00:40:21,010 --> 00:40:28,260
But it is not the easiest to go add a new feature, but because it is pretty robust,

00:40:28,260 --> 00:40:30,880
you can actually do all kinds of complex things.

00:40:30,880 --> 00:40:38,180
So, my friend Jason was talking about, how would we go and add tables to ActionText?

00:40:38,180 --> 00:40:40,170
And that is a good question.

00:40:40,170 --> 00:40:46,080
There's a lot of things that, you know, are you referencing maybe a database model for

00:40:46,080 --> 00:40:48,960
your table?

00:40:48,960 --> 00:40:51,960
Probably not, you probably want your individual cells to be something.

00:40:51,960 --> 00:40:59,640
So, there's, you know, a lot of things we'll have to dive into in depth in Trix and ActionText

00:40:59,640 --> 00:41:05,050
to kind of get an idea of how you would actually implement something more complex like adding

00:41:05,050 --> 00:41:09,300
tables and columns and rows into your ActionText output.

00:41:09,300 --> 00:41:13,830
And you just have a little bit more complexity with ActionText.

00:41:13,830 --> 00:41:20,300
But because you can use the Signed Global IDs, it gives you a whole lot of nice functionality,

00:41:20,300 --> 00:41:27,490
that, until they use the Signed Global IDs, I didn't actually know how I would reliably

00:41:27,490 --> 00:41:33,250
and securely reference user models and other things in my rich text.

00:41:33,250 --> 00:41:35,670
And this is a great way to do that.

00:41:35,670 --> 00:41:43,070
So, that is it for the introduction to how to do some more advanced things with ActionText.

00:41:43,070 --> 00:41:48,060
If you wanna see the source code for all of this, I've got it on GitHub, you can find

00:41:48,060 --> 00:41:50,510
it in the link there.

00:41:50,510 --> 00:41:56,790
You can find more videos and stuff that I've made on gorails.com I post videos weekly about

00:41:56,790 --> 00:41:59,100
ActionText and things like this.

00:41:59,100 --> 00:42:00,730
So, that Is it.

00:42:00,730 --> 00:42:07,370
I hope you enjoyed it, and I wish we could be in person to hang out together at Rails

00:42:07,370 --> 00:42:11,710

YouTube URL: https://www.youtube.com/watch?v=2iGBuLQ3S0c


