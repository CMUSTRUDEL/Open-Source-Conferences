Title: RailsConf 2020 CE - Monoliths Between Microservices by Vladimir Dementyev
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Monoliths Between Microservices by Vladimir Dementyev

"Rails applications tend to turn into giant monoliths. Keeping the codebase maintainable usually requires architectural changes. Microservices? A distributed monolith is still a monolith. What about breaking the code into pieces and rebuild a monolithic puzzle out of them?

In Rails, we have the right tool for the job: engines. With engines, you can break your application into componentsâ€”the same way as Rails combines all its parts, which are engines, too.

This path is full of snares and pitfalls. Let me be your guide in this journey and share the story of a monolith engine-ification."

__________

Vladimir is a mathematician who found his happiness in programming Ruby and Erlang, contributing to open source and being an Evil Martian. Author of AnyCable, TestProf and many yet unknown ukulele melodies.
Captions: 
	00:00:09,030 --> 00:00:12,420
hello everyone

00:00:12,920 --> 00:00:19,189
for railsconf 2020 my name is Vladimir

00:00:16,139 --> 00:00:21,540
and I'm gonna talk about my lives and

00:00:19,189 --> 00:00:23,430
micros or sexually not microcephaly but

00:00:21,540 --> 00:00:26,550
what lies between monoliths and

00:00:23,430 --> 00:00:29,759
micro-services so let's start with

00:00:26,550 --> 00:00:32,910
monoliths rails is monolithic by design

00:00:29,759 --> 00:00:36,750
we have everything included in every new

00:00:32,910 --> 00:00:39,750
rails application API tools background

00:00:36,750 --> 00:00:44,219
jobs web sockets front and utilities

00:00:39,750 --> 00:00:46,140
even even rich text editors well if it's

00:00:44,219 --> 00:00:48,450
not a curse it's an architectural

00:00:46,140 --> 00:00:51,840
pattern and it could be very inefficient

00:00:48,450 --> 00:00:54,360
pattern we know that there are great

00:00:51,840 --> 00:00:57,450
trail smallest or majestic modulus which

00:00:54,360 --> 00:00:59,660
are very successful unfortunately

00:00:57,450 --> 00:01:03,150
majestic male lives are like black swans

00:00:59,660 --> 00:01:04,229
we know they exist but we don't see them

00:01:03,150 --> 00:01:08,430
very often

00:01:04,229 --> 00:01:11,369
a typical rails application is doomed to

00:01:08,430 --> 00:01:14,460
become a monolithic monster and the

00:01:11,369 --> 00:01:17,070
question is how to prevent this how to

00:01:14,460 --> 00:01:19,620
keep our application maintainable as it

00:01:17,070 --> 00:01:21,479
grows how to make developers happy to

00:01:19,620 --> 00:01:25,260
work with it what should we do without

00:01:21,479 --> 00:01:27,720
monolith one may suggest well maybe we

00:01:25,260 --> 00:01:30,150
should just split it into micro services

00:01:27,720 --> 00:01:30,950
that Sushil should sell sell solve all

00:01:30,150 --> 00:01:33,450
our problems

00:01:30,950 --> 00:01:35,729
that was a hype train regarding this

00:01:33,450 --> 00:01:38,540
hopefully starting to derail now we know

00:01:35,729 --> 00:01:41,460
that micro services usually end up

00:01:38,540 --> 00:01:44,640
becoming distributed monolith which is

00:01:41,460 --> 00:01:49,830
just the same monster even harder to

00:01:44,640 --> 00:01:53,130
struggle with and the problem why mala

00:01:49,830 --> 00:01:56,939
lives all distributed my lives become a

00:01:53,130 --> 00:02:00,299
mass is that we forget about the core

00:01:56,939 --> 00:02:03,000
principle of the separation we need to

00:02:00,299 --> 00:02:06,710
split application to logical logical

00:02:03,000 --> 00:02:09,179
independent units into components and

00:02:06,710 --> 00:02:12,870
components connected we are together it

00:02:09,179 --> 00:02:16,640
was there some kind of bus still live

00:02:12,870 --> 00:02:19,140
without still live was animal live and

00:02:16,640 --> 00:02:23,040
but make the smell of loosely coupled

00:02:19,140 --> 00:02:26,260
that means that if one component is

00:02:23,040 --> 00:02:29,260
broken it doesn't affect others and

00:02:26,260 --> 00:02:31,959
six innate or factoring it is much

00:02:29,260 --> 00:02:36,640
easier unlike with monoliths if there is

00:02:31,959 --> 00:02:41,200
a bog and it usually could be hard to

00:02:36,640 --> 00:02:43,329
fix it and or slow painful and we cannot

00:02:41,200 --> 00:02:46,810
guarantee that this back won't reappear

00:02:43,329 --> 00:02:48,930
in the next version so we're gonna talk

00:02:46,810 --> 00:02:53,109
about component based monoliths or

00:02:48,930 --> 00:02:56,290
modular model lives one particular

00:02:53,109 --> 00:02:58,569
example of such model is Shopify and I

00:02:56,290 --> 00:03:03,909
had a great article describing the

00:02:58,569 --> 00:03:06,180
architecture and we can take a quick

00:03:03,909 --> 00:03:10,870
look at that structure so they have

00:03:06,180 --> 00:03:15,209
components with some gem like structure

00:03:10,870 --> 00:03:18,099
inside the application and that's great

00:03:15,209 --> 00:03:19,930
but the problem with Shopify approach we

00:03:18,099 --> 00:03:22,150
cannot apply it to our application

00:03:19,930 --> 00:03:24,129
because they're sewing hasn't been open

00:03:22,150 --> 00:03:25,690
sourced yet you can still borrow the

00:03:24,129 --> 00:03:27,940
idea and that's what we're gonna do

00:03:25,690 --> 00:03:30,790
during this talk let's talk

00:03:27,940 --> 00:03:35,310
take a look at other examples and any

00:03:30,790 --> 00:03:37,989
framework another ruby framework it also

00:03:35,310 --> 00:03:39,940
allows you to use component by the

00:03:37,989 --> 00:03:42,879
architecture they call themself Molly

00:03:39,940 --> 00:03:45,310
thirst which means that you can start

00:03:42,879 --> 00:03:48,790
with a single component but if you need

00:03:45,310 --> 00:03:51,370
you can add other components later as

00:03:48,790 --> 00:03:55,329
your application grows another example

00:03:51,370 --> 00:03:59,199
as umbrella projects in elixir actually

00:03:55,329 --> 00:04:02,609
they routed back to pair along but

00:03:59,199 --> 00:04:06,340
that's the same idea you have multiple

00:04:02,609 --> 00:04:09,609
logical applications working as a class

00:04:06,340 --> 00:04:13,750
as a single system as one process as you

00:04:09,609 --> 00:04:16,690
can tell it and in rails we actually

00:04:13,750 --> 00:04:19,449
also have this idea and it's called

00:04:16,690 --> 00:04:20,699
engines and that's what we're gonna talk

00:04:19,449 --> 00:04:24,150
about today

00:04:20,699 --> 00:04:27,090
let's take a quick detour and talk about

00:04:24,150 --> 00:04:29,020
myself a little bit how I ended up here

00:04:27,090 --> 00:04:31,780
talking about component-based

00:04:29,020 --> 00:04:34,180
architecture in rails so you can find me

00:04:31,780 --> 00:04:36,550
on github under that name Falcon you

00:04:34,180 --> 00:04:37,780
probably know about it let's talk about

00:04:36,550 --> 00:04:39,159
what I'm working on

00:04:37,780 --> 00:04:40,889
so I'm called I'm working a company

00:04:39,159 --> 00:04:42,810
called Eva Marsh

00:04:40,889 --> 00:04:45,229
we've been off in Ramallah for more than

00:04:42,810 --> 00:04:48,060
10 years and now we have vases and

00:04:45,229 --> 00:04:51,150
around the world with agents scattered

00:04:48,060 --> 00:04:54,860
in different continents so we are

00:04:51,150 --> 00:04:57,449
everywhere resistance is futile and

00:04:54,860 --> 00:05:00,870
you've all heard about open source

00:04:57,449 --> 00:05:06,750
projects and from the Ruby world Brown

00:05:00,870 --> 00:05:09,900
and world and development tools and also

00:05:06,750 --> 00:05:12,659
we have a beautiful block with love

00:05:09,900 --> 00:05:14,490
technical paths but today I'm not

00:05:12,659 --> 00:05:15,870
talking about love it's ours so I'm

00:05:14,490 --> 00:05:18,690
talking about the dark side of my

00:05:15,870 --> 00:05:22,860
everyday life working on commercial

00:05:18,690 --> 00:05:26,039
projects and about half of all clients

00:05:22,860 --> 00:05:28,110
use rails as the core technology and

00:05:26,039 --> 00:05:31,530
today I want to share one particular

00:05:28,110 --> 00:05:34,550
case study so that's a story of between

00:05:31,530 --> 00:05:39,780
projects called common and cocaine and

00:05:34,550 --> 00:05:41,009
that's where we started actively use

00:05:39,780 --> 00:05:45,060
component-based architecture

00:05:41,009 --> 00:05:48,060
architecture where this approach evolved

00:05:45,060 --> 00:05:51,419
and form some guidelines which we use

00:05:48,060 --> 00:05:56,370
today in other applications let's take a

00:05:51,419 --> 00:06:00,029
quick overview what this services are

00:05:56,370 --> 00:06:03,870
and why we decided to use this kind of

00:06:00,029 --> 00:06:05,969
architecture for them so common assault

00:06:03,870 --> 00:06:08,759
started with this service it's a long

00:06:05,969 --> 00:06:12,029
term Cleveland rental service working in

00:06:08,759 --> 00:06:16,159
big cities in the US and Canada before

00:06:12,029 --> 00:06:19,110
we joined their team they only had a

00:06:16,159 --> 00:06:21,539
management application for as many

00:06:19,110 --> 00:06:24,180
properties losses billing staff and and

00:06:21,539 --> 00:06:27,469
so on so not user facing application and

00:06:24,180 --> 00:06:30,599
our task was to build a community portal

00:06:27,469 --> 00:06:34,110
for users and one of the requirements

00:06:30,599 --> 00:06:36,479
was that we needed to do this within the

00:06:34,110 --> 00:06:39,800
same rails app we they didn't want to

00:06:36,479 --> 00:06:42,120
and that was a right decision to have

00:06:39,800 --> 00:06:45,379
micro service or services right away

00:06:42,120 --> 00:06:48,149
because most of the logic was

00:06:45,379 --> 00:06:50,399
implemented in this rails monolith and

00:06:48,149 --> 00:06:52,340
that's actually when this model have

00:06:50,399 --> 00:06:56,040
started to become a monster

00:06:52,340 --> 00:06:58,860
good become a master if we didn't under

00:06:56,040 --> 00:07:04,170
the right thing so what is a community

00:06:58,860 --> 00:07:08,870
portal so it's a mix of let's say meetup

00:07:04,170 --> 00:07:12,360
calm and chat platform and some other

00:07:08,870 --> 00:07:14,100
smaller stuff so as you can see the

00:07:12,360 --> 00:07:18,840
pictures are almost independent of each

00:07:14,100 --> 00:07:21,590
other and even on the logical level they

00:07:18,840 --> 00:07:24,990
have a well-defined binder boundaries

00:07:21,590 --> 00:07:28,610
that's why from the day one we started

00:07:24,990 --> 00:07:35,220
to use namespaces in to kind of isolate

00:07:28,610 --> 00:07:38,280
the lexical and structural level all the

00:07:35,220 --> 00:07:42,030
code related to a particular feature to

00:07:38,280 --> 00:07:44,100
give a domain so namespaces oh actually

00:07:42,030 --> 00:07:47,460
we don't have namespaces in Ruby so it's

00:07:44,100 --> 00:07:52,190
just modules continue all the code it's

00:07:47,460 --> 00:07:54,720
a very easy and fast way of doing this

00:07:52,190 --> 00:07:57,540
fake component-based architecture we

00:07:54,720 --> 00:07:59,160
could why fight because you cannot

00:07:57,540 --> 00:08:03,030
guarantee you that a code from one

00:07:59,160 --> 00:08:05,280
namespace doesn't access the code from a

00:08:03,030 --> 00:08:07,500
different inner space which should be

00:08:05,280 --> 00:08:10,620
wouldn't that was pretty much for the

00:08:07,500 --> 00:08:15,450
MVP it's a very initial version but then

00:08:10,620 --> 00:08:18,780
the requirements evolved

00:08:15,450 --> 00:08:21,960
it's it was clear that we are not going

00:08:18,780 --> 00:08:24,090
we are we going to build some kind of

00:08:21,960 --> 00:08:27,710
spin-off projects and other community

00:08:24,090 --> 00:08:31,320
portals for different applications but

00:08:27,710 --> 00:08:33,990
with a very similar functionality and it

00:08:31,320 --> 00:08:37,349
looked like we can reuse we could reuse

00:08:33,990 --> 00:08:38,760
most of the features code this possibly

00:08:37,349 --> 00:08:42,659
as a later code but we needed a way to

00:08:38,760 --> 00:08:46,230
make it truly isolated and also portable

00:08:42,659 --> 00:08:51,030
that's when we started to use engines

00:08:46,230 --> 00:08:53,700
and project gems so that's our final

00:08:51,030 --> 00:08:56,280
architecture structure of the project

00:08:53,700 --> 00:08:58,200
I'm going to talk about it in details in

00:08:56,280 --> 00:09:01,740
a few minutes

00:08:58,200 --> 00:09:04,080
one of the key point which made us to

00:09:01,740 --> 00:09:06,600
make this decision was this particle

00:09:04,080 --> 00:09:08,940
model model of architecture this is

00:09:06,600 --> 00:09:10,650
really good starting point to learn

00:09:08,940 --> 00:09:15,030
about component-based architecture and

00:09:10,650 --> 00:09:18,780
rails and to know what kind of initial

00:09:15,030 --> 00:09:21,060
problems you might encounter while doing

00:09:18,780 --> 00:09:24,030
this it turned out that there are much

00:09:21,060 --> 00:09:26,100
more pitfalls so that's what I got to

00:09:24,030 --> 00:09:30,780
talk about today so technical deals on

00:09:26,100 --> 00:09:36,150
how to make engines work great in a

00:09:30,780 --> 00:09:39,720
component based system so as I already

00:09:36,150 --> 00:09:42,540
mentioned we used engines and also local

00:09:39,720 --> 00:09:45,900
gems as we call it soul gems live just

00:09:42,540 --> 00:09:48,780
in this application so like a mono repo

00:09:45,900 --> 00:09:53,160
without publishing anywhere and we call

00:09:48,780 --> 00:09:57,570
this both concepts in a single world

00:09:53,160 --> 00:09:58,650
called engines so that's the name let's

00:09:57,570 --> 00:10:00,600
start with an engine

00:09:58,650 --> 00:10:02,490
what is the rails engine let's like a

00:10:00,600 --> 00:10:05,850
short answer it's just something you can

00:10:02,490 --> 00:10:08,010
generate running rails plugin new but

00:10:05,850 --> 00:10:12,080
let's take a bit deeper we need to know

00:10:08,010 --> 00:10:20,760
what engine is before going into details

00:10:12,080 --> 00:10:22,650
so first of all engine is a gem so you

00:10:20,760 --> 00:10:23,160
can build it and publish like any other

00:10:22,650 --> 00:10:25,880
gem

00:10:23,160 --> 00:10:28,170
it has a gem specification which lists

00:10:25,880 --> 00:10:32,790
requirements independent didn't require

00:10:28,170 --> 00:10:37,530
dependencies and the leap folder was all

00:10:32,790 --> 00:10:40,590
the code secondly what makes engine a

00:10:37,530 --> 00:10:44,580
bit different from a typical Jam is that

00:10:40,590 --> 00:10:47,550
some rail specific entities it has your

00:10:44,580 --> 00:10:52,200
app folder with controllers models

00:10:47,550 --> 00:10:56,010
whatever and the idea is that when you

00:10:52,200 --> 00:10:58,740
add engine to Rails application this and

00:10:56,010 --> 00:11:00,780
it is available to outer loading

00:10:58,740 --> 00:11:04,770
mechanism so we can just use this

00:11:00,780 --> 00:11:07,110
constant without required them engines

00:11:04,770 --> 00:11:10,520
also have their own test Suites so we

00:11:07,110 --> 00:11:18,410
can ensure tell them in isolation

00:11:10,520 --> 00:11:21,620
and and Jen also come with Android class

00:11:18,410 --> 00:11:24,200
in the namespace which acts like a glue

00:11:21,620 --> 00:11:26,420
between Rails application and this

00:11:24,200 --> 00:11:28,820
particular engine functionality you can

00:11:26,420 --> 00:11:32,140
add initializer their configuration and

00:11:28,820 --> 00:11:38,149
other stuff like in a rails application

00:11:32,140 --> 00:11:42,110
and finally you can add roads to the

00:11:38,149 --> 00:11:44,750
engine and use this roads later your

00:11:42,110 --> 00:11:50,330
main application by mountain diamonds

00:11:44,750 --> 00:11:53,450
core app roads are B so have you ever

00:11:50,330 --> 00:11:58,370
seen engine some wildlife of course you

00:11:53,450 --> 00:11:59,660
did and this is just the most popular

00:11:58,370 --> 00:12:03,140
engines that's part of the rails

00:11:59,660 --> 00:12:05,000
application so rails actually has a

00:12:03,140 --> 00:12:06,800
component based architecture that some

00:12:05,000 --> 00:12:09,170
of the components engines full-featured

00:12:06,800 --> 00:12:13,250
engines others rail test we're gonna

00:12:09,170 --> 00:12:15,950
talk about today so if I'm gonna talk

00:12:13,250 --> 00:12:17,600
about outside outside rails world the

00:12:15,950 --> 00:12:20,360
most popular engine of course is device

00:12:17,600 --> 00:12:24,110
where we use device or extended it's

00:12:20,360 --> 00:12:29,329
controllers use paths and rolls or

00:12:24,110 --> 00:12:32,089
whatever so you used engines so use

00:12:29,329 --> 00:12:33,740
engines and you'll be happy and you can

00:12:32,089 --> 00:12:36,110
build a component based application and

00:12:33,740 --> 00:12:42,680
that's it that could be the end of this

00:12:36,110 --> 00:12:43,850
talk but likely for me so I can talk

00:12:42,680 --> 00:12:46,660
about it here

00:12:43,850 --> 00:12:50,680
the process of engine if occasion of

00:12:46,660 --> 00:12:54,350
applications is not that straightforward

00:12:50,680 --> 00:12:57,350
and realizing what anthony's is just a

00:12:54,350 --> 00:13:00,829
very beginning of the process it hides a

00:12:57,350 --> 00:13:04,700
lot of complexities problems or whatever

00:13:00,829 --> 00:13:06,680
that you will likely face if you not

00:13:04,700 --> 00:13:09,279
aware of them that's just a map of all

00:13:06,680 --> 00:13:13,270
the kind of situations we had and

00:13:09,279 --> 00:13:15,829
solutions were found to deal with

00:13:13,270 --> 00:13:18,320
engines in a component-based

00:13:15,829 --> 00:13:20,690
architecture i'm not going to cover all

00:13:18,320 --> 00:13:22,660
of them today but just the most

00:13:20,690 --> 00:13:26,200
interesting of them so

00:13:22,660 --> 00:13:29,470
let's start discussing the architecture

00:13:26,200 --> 00:13:33,310
of the Apple head well that's just a few

00:13:29,470 --> 00:13:36,700
pictures of what was the final result so

00:13:33,310 --> 00:13:41,520
we had a engines folder with a few

00:13:36,700 --> 00:13:45,070
engines jams folder again with some jams

00:13:41,520 --> 00:13:50,160
the application roadster B consisted

00:13:45,070 --> 00:13:55,300
only from sis only of mount directives

00:13:50,160 --> 00:13:57,790
and our our Jam file we had this Jam

00:13:55,300 --> 00:14:00,070
definitions with which pointed to our

00:13:57,790 --> 00:14:04,920
local engines so we're using just a half

00:14:00,070 --> 00:14:08,080
option of the Jam the application

00:14:04,920 --> 00:14:12,820
diagram as like a components diagram

00:14:08,080 --> 00:14:17,290
could be seen like this so if you can

00:14:12,820 --> 00:14:20,830
see the picture related engines which

00:14:17,290 --> 00:14:23,980
implements some business logic have the

00:14:20,830 --> 00:14:25,690
similar names with a by suffix that's

00:14:23,980 --> 00:14:29,170
just a convention we use in all the

00:14:25,690 --> 00:14:34,450
projects so we're engines are named some

00:14:29,170 --> 00:14:39,580
kind of verb or mostly usually verb now

00:14:34,450 --> 00:14:41,650
and some suffix so the connect that was

00:14:39,580 --> 00:14:45,850
the name without core engine which

00:14:41,650 --> 00:14:50,290
consists contained basic models like

00:14:45,850 --> 00:14:53,200
user building whatever and some base

00:14:50,290 --> 00:14:56,950
entities and there are another layer

00:14:53,200 --> 00:15:00,940
which used connect by as a dependency is

00:14:56,950 --> 00:15:06,100
of me by chat by and Burke by birds by

00:15:00,940 --> 00:15:08,560
all future engines and we also had two

00:15:06,100 --> 00:15:09,940
utility engines for search proxy and

00:15:08,560 --> 00:15:10,360
common events we're going to talk about

00:15:09,940 --> 00:15:14,260
it later

00:15:10,360 --> 00:15:17,440
and finally one umbrella engine was

00:15:14,260 --> 00:15:21,520
adding your implementation and so

00:15:17,440 --> 00:15:23,560
because I mean I use data from all of

00:15:21,520 --> 00:15:24,940
the engines that's one of the way of

00:15:23,560 --> 00:15:26,530
doing this we're not going to talk about

00:15:24,940 --> 00:15:28,819
alternatives but that's how we

00:15:26,530 --> 00:15:32,999
implemented

00:15:28,819 --> 00:15:38,779
so let's start investigating our map and

00:15:32,999 --> 00:15:40,920
now first stop is dependency management

00:15:38,779 --> 00:15:43,079
so that's actually the first problem

00:15:40,920 --> 00:15:45,990
you're gonna encounter I think when you

00:15:43,079 --> 00:15:50,370
use in engines there's a number of

00:15:45,990 --> 00:15:52,499
question when you're starting to extract

00:15:50,370 --> 00:15:54,959
functionality an isolated chance let's

00:15:52,499 --> 00:15:59,910
consider them one by one first problem

00:15:54,959 --> 00:16:01,920
has occurred when you have some non

00:15:59,910 --> 00:16:05,699
rubygems dependencies it is dependence

00:16:01,920 --> 00:16:08,189
is loaded from github from local sources

00:16:05,699 --> 00:16:11,160
from any other key repositories or

00:16:08,189 --> 00:16:13,620
whatever you cannot specify them into

00:16:11,160 --> 00:16:16,019
the giant pack which is used by jam

00:16:13,620 --> 00:16:18,540
command for in the gem file so you have

00:16:16,019 --> 00:16:21,269
to duplicate this definition in your

00:16:18,540 --> 00:16:24,209
root gem file and that makes it harder

00:16:21,269 --> 00:16:26,999
to maintain and synchronize dependencies

00:16:24,209 --> 00:16:28,589
it's it's really easy to forget to port

00:16:26,999 --> 00:16:30,930
some dependency from one place to

00:16:28,589 --> 00:16:35,100
another and end up in some problems in

00:16:30,930 --> 00:16:37,519
production so we found a in my opinion

00:16:35,100 --> 00:16:39,689
intelligent way of solving this problem

00:16:37,519 --> 00:16:42,360
evolved gem file that's building

00:16:39,689 --> 00:16:46,559
functionality into bundler which allows

00:16:42,360 --> 00:16:50,759
you to just kind of include another gem

00:16:46,559 --> 00:16:54,329
file into the gem file and the final

00:16:50,759 --> 00:16:57,689
idea was set every engine and except

00:16:54,329 --> 00:17:04,429
except from the gem spec has also a gem

00:16:57,689 --> 00:17:07,470
file runtime gem file which consists of

00:17:04,429 --> 00:17:11,159
non Ruby gems dependence is required in

00:17:07,470 --> 00:17:14,280
runtime and also a usual gem file which

00:17:11,159 --> 00:17:16,949
depend development dependencies this way

00:17:14,280 --> 00:17:19,770
we can make sure that our dependence is

00:17:16,949 --> 00:17:21,750
synchronized and that's problems how to

00:17:19,770 --> 00:17:25,439
share common dependencies between

00:17:21,750 --> 00:17:28,260
engines without duplication as well so

00:17:25,439 --> 00:17:30,799
the approach is pretty much similar we

00:17:28,260 --> 00:17:33,750
have shared gem files in the gem files

00:17:30,799 --> 00:17:35,549
folder for example to synchronize rails

00:17:33,750 --> 00:17:38,630
version between engines and the main app

00:17:35,549 --> 00:17:38,630
we use a gem file

00:17:38,679 --> 00:17:48,000
then in engines and files root jam file

00:17:42,220 --> 00:17:48,000
we just do the same evil Jeff I'll treat

00:17:49,320 --> 00:17:55,240
okay so we know how to specify versions

00:17:52,600 --> 00:17:57,520
but we also have lock files and will

00:17:55,240 --> 00:18:00,910
like the versions of the root

00:17:57,520 --> 00:18:06,040
application and engines be the same

00:18:00,910 --> 00:18:09,640
why so first of all because we run tests

00:18:06,040 --> 00:18:12,280
insulation does means that we want to

00:18:09,640 --> 00:18:15,700
use the same versions there is a gem

00:18:12,280 --> 00:18:17,679
called Tran steps which acts like a

00:18:15,700 --> 00:18:19,809
guard which prevents you from having

00:18:17,679 --> 00:18:23,140
different versions your root gem file

00:18:19,809 --> 00:18:26,500
and engine gem file can try to use it if

00:18:23,140 --> 00:18:27,549
you want but now to be honest we didn't

00:18:26,500 --> 00:18:30,610
care about this problem in the very

00:18:27,549 --> 00:18:35,620
beginning yeah we were just okay we had

00:18:30,610 --> 00:18:38,049
some system specs coverage that was good

00:18:35,620 --> 00:18:40,540
enough for us but then I saw this Jamis

00:18:38,049 --> 00:18:44,559
and tried to run it and check whether we

00:18:40,540 --> 00:18:47,200
consistent and turn now that now we're

00:18:44,559 --> 00:18:49,330
not really but actually if you take a

00:18:47,200 --> 00:18:52,390
look closer look at this list of

00:18:49,330 --> 00:18:55,080
inconsistent as you can find that about

00:18:52,390 --> 00:18:58,929
how of them related to development and

00:18:55,080 --> 00:19:00,280
test dependencies which we do not care

00:18:58,929 --> 00:19:02,890
about so we only should care about

00:19:00,280 --> 00:19:04,570
production dependencies and another

00:19:02,890 --> 00:19:09,360
portion of this is just a batch version

00:19:04,570 --> 00:19:11,590
differences which is also pretty safe to

00:19:09,360 --> 00:19:13,600
not care about batch version differences

00:19:11,590 --> 00:19:15,160
anyway we started thinking about a

00:19:13,600 --> 00:19:20,860
better way of keeping versions in sync

00:19:15,160 --> 00:19:26,580
and we ended up with this idea so

00:19:20,860 --> 00:19:26,580
instead of having separate log files for

00:19:26,640 --> 00:19:33,790
engines and main application we started

00:19:30,070 --> 00:19:36,780
to use root log file for everyone by

00:19:33,790 --> 00:19:43,360
using the roots and file all the engines

00:19:36,780 --> 00:19:46,480
so this idea kind of simple but has its

00:19:43,360 --> 00:19:49,419
own limitations or actually problems

00:19:46,480 --> 00:19:51,520
which we had to solve what about engines

00:19:49,419 --> 00:19:55,910
development test dependent

00:19:51,520 --> 00:19:58,940
we don't want to add them to the route

00:19:55,910 --> 00:20:00,140
gemfile into the default bounder group

00:19:58,940 --> 00:20:02,920
because they will be loaded in

00:20:00,140 --> 00:20:05,440
production and we don't want this

00:20:02,920 --> 00:20:08,900
another problem is kind of West versa

00:20:05,440 --> 00:20:12,050
when we test engines we use Demi rails

00:20:08,900 --> 00:20:14,420
apps which to bundle require for the

00:20:12,050 --> 00:20:16,490
test environment and the default

00:20:14,420 --> 00:20:18,620
environment and that could cause loading

00:20:16,490 --> 00:20:21,290
everything all the application for

00:20:18,620 --> 00:20:23,170
testing a single engine and that means

00:20:21,290 --> 00:20:25,940
that we do not have a real installation

00:20:23,170 --> 00:20:30,050
so we had to solve these problems and we

00:20:25,940 --> 00:20:32,030
sold it by adding a helper method bundle

00:20:30,050 --> 00:20:34,310
DSL so it could be used in the gem file

00:20:32,030 --> 00:20:37,790
called component and the ID of this

00:20:34,310 --> 00:20:40,850
method is the following first part of it

00:20:37,790 --> 00:20:43,070
and just repeats something we just

00:20:40,850 --> 00:20:46,190
discussed so it's just adding a gem and

00:20:43,070 --> 00:20:48,280
it's wrong time gem file and another

00:20:46,190 --> 00:20:53,360
portion of it is a bit more interesting

00:20:48,280 --> 00:20:55,910
it allows us to add this gem development

00:20:53,360 --> 00:20:59,000
dependencies to the main gen file under

00:20:55,910 --> 00:21:00,890
this specific named group named by the

00:20:59,000 --> 00:21:03,170
name of this gem so it won't be loaded

00:21:00,890 --> 00:21:06,770
in production or even in development or

00:21:03,170 --> 00:21:08,510
test for the manor we do this by parsing

00:21:06,770 --> 00:21:13,400
the gems back and extracting development

00:21:08,510 --> 00:21:15,560
dependencies from it why we use a named

00:21:13,400 --> 00:21:17,450
bundle group so that's actually about

00:21:15,560 --> 00:21:20,990
the second problem do not load

00:21:17,450 --> 00:21:23,990
everything in the deme apps so that's

00:21:20,990 --> 00:21:27,590
how Tammy default to any application for

00:21:23,990 --> 00:21:30,380
the engine looks like it has this one

00:21:27,590 --> 00:21:33,700
they require rails groups we just load

00:21:30,380 --> 00:21:37,960
all the gems specified in your gem file

00:21:33,700 --> 00:21:40,280
with default and current and group

00:21:37,960 --> 00:21:42,110
instead of it we use a name group named

00:21:40,280 --> 00:21:45,560
by this engine this way we're allowed

00:21:42,110 --> 00:21:47,510
only this really and only the dependence

00:21:45,560 --> 00:21:53,710
is related to this gem from the main gem

00:21:47,510 --> 00:21:57,440
file and as we would leaking other

00:21:53,710 --> 00:21:59,930
engines dependencies into this

00:21:57,440 --> 00:22:02,920
particular engine so we save so the

00:21:59,930 --> 00:22:04,780
problem of isolation this way

00:22:02,920 --> 00:22:07,300
to avoid specifying bundle gem file

00:22:04,780 --> 00:22:09,310
environment wearable there is a simple

00:22:07,300 --> 00:22:11,320
tip you can use a local bonding

00:22:09,310 --> 00:22:18,130
configuration and specify it for a

00:22:11,320 --> 00:22:20,950
particular jam or engine so let's go

00:22:18,130 --> 00:22:24,970
further in the next job in our journey

00:22:20,950 --> 00:22:26,530
his database what's interesting about

00:22:24,970 --> 00:22:31,050
database and engines

00:22:26,530 --> 00:22:34,360
that's questions well first of all we

00:22:31,050 --> 00:22:37,090
may have migrations in our engines and

00:22:34,360 --> 00:22:40,110
we need wait to use these migrations in

00:22:37,090 --> 00:22:42,880
the main app and also we might have

00:22:40,110 --> 00:22:45,760
season our engines also will be great to

00:22:42,880 --> 00:22:48,330
use them as main app right so let's take

00:22:45,760 --> 00:22:52,810
a look at this two problems quickly

00:22:48,330 --> 00:22:54,580
first migrations standard way of doing

00:22:52,810 --> 00:22:57,010
with migrations and engines usually

00:22:54,580 --> 00:22:59,370
meant for external engines which you

00:22:57,010 --> 00:23:03,310
third-party engines like a device is

00:22:59,370 --> 00:23:05,440
instant migrations and to the main app

00:23:03,310 --> 00:23:07,680
insulin is just actually mean copying

00:23:05,440 --> 00:23:11,410
them into the main apps migrations

00:23:07,680 --> 00:23:13,320
directory but when we work in the

00:23:11,410 --> 00:23:17,200
component-based architecture we do not

00:23:13,320 --> 00:23:19,270
want to extract this component somewhere

00:23:17,200 --> 00:23:24,370
else we just keep the codebase together

00:23:19,270 --> 00:23:28,420
and we prefer to not copy the migrations

00:23:24,370 --> 00:23:31,090
but make the main app use this macro

00:23:28,420 --> 00:23:33,550
migrations has their own migration so to

00:23:31,090 --> 00:23:34,840
mount migrations into the main app that

00:23:33,550 --> 00:23:37,450
requires just tweaking with two

00:23:34,840 --> 00:23:39,430
parameters of the rails migration system

00:23:37,450 --> 00:23:42,550
refers to the path to look for

00:23:39,430 --> 00:23:45,730
migrations and for the whole application

00:23:42,550 --> 00:23:48,310
and the second which is surprisingly is

00:23:45,730 --> 00:23:49,870
a different configuration for checking

00:23:48,310 --> 00:23:53,680
the pending immigrations we also need to

00:23:49,870 --> 00:23:56,080
specify that we have this additional

00:23:53,680 --> 00:23:56,380
part path to look for migrations that's

00:23:56,080 --> 00:24:01,260
it

00:23:56,380 --> 00:24:03,820
and for seeds that's pretty simple

00:24:01,260 --> 00:24:08,320
engine already have a method called lot

00:24:03,820 --> 00:24:12,180
seed which loads DB c RB file from the

00:24:08,320 --> 00:24:14,560
engine and you can use it from Romania

00:24:12,180 --> 00:24:15,760
as to power the next question so we

00:24:14,560 --> 00:24:20,520
already mentioned that Angie

00:24:15,760 --> 00:24:25,120
tested in isolation how exactly is

00:24:20,520 --> 00:24:28,750
happening so we need coal rails flaggin

00:24:25,120 --> 00:24:31,150
you rails will generate and Tommy rails

00:24:28,750 --> 00:24:35,770
app for you to use in tests which is

00:24:31,150 --> 00:24:38,140
just a very simple which kind of Slean a

00:24:35,770 --> 00:24:40,870
rails application but still consists of

00:24:38,140 --> 00:24:43,750
containing a lot of stuff you don't need

00:24:40,870 --> 00:24:46,540
like you know every result of rails new

00:24:43,750 --> 00:24:47,980
command right so hopefully there was a

00:24:46,540 --> 00:24:52,290
better alternative and it's called

00:24:47,980 --> 00:24:56,250
combustion that's the gem which makes

00:24:52,290 --> 00:25:00,310
using to any applications in your gems

00:24:56,250 --> 00:25:03,370
very simple as simple as writing a few

00:25:00,310 --> 00:25:06,340
lines of code instead of having a full

00:25:03,370 --> 00:25:08,530
feature structure if you want to add

00:25:06,340 --> 00:25:12,280
some specific files which are not

00:25:08,530 --> 00:25:15,340
couldn't be implement and described in

00:25:12,280 --> 00:25:17,680
the configuration you can just add only

00:25:15,340 --> 00:25:21,430
them without all their boiler parade

00:25:17,680 --> 00:25:24,340
which is generated by rails you so with

00:25:21,430 --> 00:25:25,570
combustion you limit their application

00:25:24,340 --> 00:25:27,730
to the frameworks you need they

00:25:25,570 --> 00:25:30,580
explicitly specified you only by the

00:25:27,730 --> 00:25:33,760
braid and the good news is migrations

00:25:30,580 --> 00:25:38,620
are managed for you they run for every

00:25:33,760 --> 00:25:42,000
test run and another testing related

00:25:38,620 --> 00:25:45,420
questions how to run engines nest on CI

00:25:42,000 --> 00:25:50,470
so on one hand this kind of camp

00:25:45,420 --> 00:25:51,880
architecture makes CI configurations bit

00:25:50,470 --> 00:25:56,770
more complex because you have to run

00:25:51,880 --> 00:26:00,850
separate tests for each engine on the

00:25:56,770 --> 00:26:03,040
other hand we can skip tests for engines

00:26:00,850 --> 00:26:05,860
we haven't been changed in this pull

00:26:03,040 --> 00:26:08,650
request for example so if something

00:26:05,860 --> 00:26:10,300
hasn't changed we do not need to run

00:26:08,650 --> 00:26:12,490
tests for it well actually not changed

00:26:10,300 --> 00:26:15,100
that's not right word the right word

00:26:12,490 --> 00:26:17,950
would be really dirty which means that

00:26:15,100 --> 00:26:20,710
the engine called the engines code was

00:26:17,950 --> 00:26:24,400
changed or any other engines which this

00:26:20,710 --> 00:26:27,370
engine depends on was changed and to

00:26:24,400 --> 00:26:28,240
make this decision so to figure out

00:26:27,370 --> 00:26:32,290
whether

00:26:28,240 --> 00:26:35,530
engine is dirty in that we wrote a

00:26:32,290 --> 00:26:38,200
simple script which go through the old

00:26:35,530 --> 00:26:40,120
list of our engines and jams load their

00:26:38,200 --> 00:26:42,840
specifications building inverted index

00:26:40,120 --> 00:26:45,850
three and check whether something for

00:26:42,840 --> 00:26:48,340
this gem or its dependency has changed

00:26:45,850 --> 00:26:52,600
yeah that's kind of maybe sounds a bit

00:26:48,340 --> 00:26:54,250
creepy but we can set show you link to

00:26:52,600 --> 00:26:56,190
the other source codes in the end of the

00:26:54,250 --> 00:26:59,650
talk so don't worry that's just an

00:26:56,190 --> 00:27:08,830
algorithm and then on CI you called this

00:26:59,650 --> 00:27:11,140
script and if it returns zero code you

00:27:08,830 --> 00:27:19,390
go and run test and if it returns one

00:27:11,140 --> 00:27:22,600
you just exit okay let's talk about more

00:27:19,390 --> 00:27:27,280
code related stuff and configuration

00:27:22,600 --> 00:27:32,850
related stuff so another problem with

00:27:27,280 --> 00:27:35,950
engines is in one day you would like to

00:27:32,850 --> 00:27:38,290
somehow access an entity from one engine

00:27:35,950 --> 00:27:41,559
in another or from the main app in the

00:27:38,290 --> 00:27:46,720
engine and vice versa or extend some and

00:27:41,559 --> 00:27:48,070
relax for example model or very another

00:27:46,720 --> 00:27:49,750
typical example how to extend the

00:27:48,070 --> 00:27:55,000
engine's application controller on base

00:27:49,750 --> 00:27:57,730
controller so how to deal with different

00:27:55,000 --> 00:28:00,970
Android entities and we came up with the

00:27:57,730 --> 00:28:04,660
idea called base and behavior sounds guy

00:28:00,970 --> 00:28:07,380
convention which helps us to make iOS

00:28:04,660 --> 00:28:11,770
engines entities within engines flexible

00:28:07,380 --> 00:28:13,990
let's take a look at the example so

00:28:11,770 --> 00:28:16,270
suppose that we have our application

00:28:13,990 --> 00:28:17,559
controller one of our engines so

00:28:16,270 --> 00:28:19,420
application controller is a base

00:28:17,559 --> 00:28:26,890
controller for all controllers from this

00:28:19,420 --> 00:28:34,510
engine and then this controller has the

00:28:26,890 --> 00:28:37,690
following structure first we inherit it

00:28:34,510 --> 00:28:41,050
from the South configurable controller

00:28:37,690 --> 00:28:42,010
which is configured outside of the

00:28:41,050 --> 00:28:43,660
engines code could

00:28:42,010 --> 00:28:45,520
configure it outside from the agents

00:28:43,660 --> 00:28:50,950
called usually defaults to application

00:28:45,520 --> 00:28:56,950
controller and we can change it to

00:28:50,950 --> 00:28:59,800
anything we want then we have these

00:28:56,950 --> 00:29:03,570
checks which like a something like

00:28:59,800 --> 00:29:08,620
interface so we can define requirements

00:29:03,570 --> 00:29:12,070
if you use power if your application

00:29:08,620 --> 00:29:15,730
controller does not include this

00:29:12,070 --> 00:29:17,590
behavior it's just a module and does not

00:29:15,730 --> 00:29:20,080
implement this method we raise an

00:29:17,590 --> 00:29:23,770
exception so that's kind of a contract

00:29:20,080 --> 00:29:25,390
if you want to use this engine and want

00:29:23,770 --> 00:29:27,160
to specify an application controller for

00:29:25,390 --> 00:29:29,290
this application controller must provide

00:29:27,160 --> 00:29:34,720
some functionality that's how it looks

00:29:29,290 --> 00:29:36,520
in the application code so we have a

00:29:34,720 --> 00:29:39,100
custom application controller which

00:29:36,520 --> 00:29:41,580
include this behavior which include

00:29:39,100 --> 00:29:44,520
another Mario implementing current user

00:29:41,580 --> 00:29:47,500
methods and also it includes some

00:29:44,520 --> 00:29:52,150
application related stuff so usually so

00:29:47,500 --> 00:29:55,960
this is used to add instrumentation

00:29:52,150 --> 00:29:59,260
error capturing and other stuff not

00:29:55,960 --> 00:30:03,280
related to the logic but some ancillary

00:29:59,260 --> 00:30:04,870
stuff and that's how we make it

00:30:03,280 --> 00:30:07,060
configurable from the main app and

00:30:04,870 --> 00:30:09,670
engines code shouldn't care about all

00:30:07,060 --> 00:30:12,690
this additions it just needs this

00:30:09,670 --> 00:30:17,320
behavior and this method to be defined

00:30:12,690 --> 00:30:19,660
another use case extending models a very

00:30:17,320 --> 00:30:22,210
common situation and when you won't want

00:30:19,660 --> 00:30:25,240
to add associations to the existing

00:30:22,210 --> 00:30:27,250
model from the other engine we need to

00:30:25,240 --> 00:30:31,780
do this using concerns and the question

00:30:27,250 --> 00:30:34,870
is how to load these concerns for that

00:30:31,780 --> 00:30:37,450
we use active support loud Fuchs so

00:30:34,870 --> 00:30:40,830
every module from every engine implement

00:30:37,450 --> 00:30:44,380
a load hook so when this model is loaded

00:30:40,830 --> 00:30:46,720
and the hook is called and you can

00:30:44,380 --> 00:30:49,390
subscribe to this hook for example the

00:30:46,720 --> 00:30:52,390
initializer and include your extension

00:30:49,390 --> 00:30:54,340
your concern to work that makes this

00:30:52,390 --> 00:30:57,120
extensions work correctly it was Auto

00:30:54,340 --> 00:30:57,120
loading and reloading

00:30:58,300 --> 00:31:01,540
let's talk about another related

00:31:00,070 --> 00:31:04,690
question how to communicate between

00:31:01,540 --> 00:31:07,660
engines so so far we talked about how to

00:31:04,690 --> 00:31:11,320
modify code from one engine in another

00:31:07,660 --> 00:31:13,560
what about runtime communication let's

00:31:11,320 --> 00:31:16,720
consider an example again

00:31:13,560 --> 00:31:18,430
so this scenario will be common scenario

00:31:16,720 --> 00:31:22,630
every time a new user registers

00:31:18,430 --> 00:31:24,550
registers in the application we want

00:31:22,630 --> 00:31:27,340
them to automatically join the default

00:31:24,550 --> 00:31:29,880
CD chat so remember we had chats users

00:31:27,340 --> 00:31:33,040
know this time and here is a problem

00:31:29,880 --> 00:31:35,830
registration is happening within the

00:31:33,040 --> 00:31:37,720
connect by engine and chat by engine

00:31:35,830 --> 00:31:39,550
depends on it but connected by it

00:31:37,720 --> 00:31:41,470
doesn't know anything about chats it

00:31:39,550 --> 00:31:43,900
shouldn't know anything about chess so

00:31:41,470 --> 00:31:47,710
how can we resolve this situation how

00:31:43,900 --> 00:31:51,690
should we inform the chat by engine that

00:31:47,710 --> 00:31:55,900
user has been registered the answer is

00:31:51,690 --> 00:31:57,280
let's use events a precising event base

00:31:55,900 --> 00:32:00,310
with highball publish/subscribe

00:31:57,280 --> 00:32:04,600
mechanism as a list of tools we

00:32:00,310 --> 00:32:07,510
considered for the event pass and I'm in

00:32:04,600 --> 00:32:09,430
advance that actually has nothing with

00:32:07,510 --> 00:32:12,130
an Emmy framework it could be used

00:32:09,430 --> 00:32:15,550
separately looks promising

00:32:12,130 --> 00:32:17,950
but still we're young you know so that

00:32:15,550 --> 00:32:21,730
was the main reason why we didn't choose

00:32:17,950 --> 00:32:23,410
it we can't consider it in dry Ranson

00:32:21,730 --> 00:32:25,510
whisper seriously because it's just a

00:32:23,410 --> 00:32:29,290
simple tap SAP implementations with

00:32:25,510 --> 00:32:34,330
quite opinionated api's which we do not

00:32:29,290 --> 00:32:37,060
like a lot so we decided on Rails to

00:32:34,330 --> 00:32:41,080
answer well so story the powerful

00:32:37,060 --> 00:32:43,660
framework using many applications and

00:32:41,080 --> 00:32:46,590
that's what I'll chose and it's still

00:32:43,660 --> 00:32:46,590
our choice for today

00:32:48,110 --> 00:32:52,700
it's based it's backed by active record

00:32:50,810 --> 00:32:55,250
so we've installed an active record and

00:32:52,700 --> 00:32:57,980
consumed by the consume synchronously a

00:32:55,250 --> 00:33:00,560
synchronously and it has actually many

00:32:57,980 --> 00:33:04,640
different features from event sourcing

00:33:00,560 --> 00:33:06,350
own world which we do not use a lot but

00:33:04,640 --> 00:33:08,300
we decided not to use the store directly

00:33:06,350 --> 00:33:12,080
instead of wrapping into a custom gem so

00:33:08,300 --> 00:33:15,880
let me introduce a new gem called

00:33:12,080 --> 00:33:19,580
actives event store it's just a wrapper

00:33:15,880 --> 00:33:23,480
over rails event store for now but it

00:33:19,580 --> 00:33:26,120
add some conventions and also my opinion

00:33:23,480 --> 00:33:33,730
better rails integration what we changed

00:33:26,120 --> 00:33:36,050
is that we edit some testing entities

00:33:33,730 --> 00:33:39,080
that it some conventions already said

00:33:36,050 --> 00:33:41,720
but the my reason for wrapping a rails

00:33:39,080 --> 00:33:45,530
event store gem and to another gem was

00:33:41,720 --> 00:33:49,310
to make this relevant store just an

00:33:45,530 --> 00:33:51,410
adapter for all this functionality so we

00:33:49,310 --> 00:33:53,860
were thinking about switching to

00:33:51,410 --> 00:33:57,550
something else in the future and that's

00:33:53,860 --> 00:33:59,780
why we say it to add a wrapper

00:33:57,550 --> 00:34:02,330
let's take a look quick look at how it

00:33:59,780 --> 00:34:08,630
works so we define advanced at the Ruby

00:34:02,330 --> 00:34:12,320
classes attributes identifiers which is

00:34:08,630 --> 00:34:14,600
just ID of the event you publish an

00:34:12,320 --> 00:34:17,360
event by creating an instance of this

00:34:14,600 --> 00:34:20,210
class and calling it publish method and

00:34:17,360 --> 00:34:23,030
you can subscribe to this advanced

00:34:20,210 --> 00:34:25,250
somewhere in the application and start

00:34:23,030 --> 00:34:27,640
to react into them some subscribers

00:34:25,250 --> 00:34:29,480
could be synchronous or asynchronous

00:34:27,640 --> 00:34:31,970
synchronous absque Reiber called in a

00:34:29,480 --> 00:34:35,450
background job you don't have to add a

00:34:31,970 --> 00:34:37,370
custom class a job or whatever for that

00:34:35,450 --> 00:34:39,140
you can use the same subscriber in a

00:34:37,370 --> 00:34:42,970
synchronous and asynchronous manner and

00:34:39,140 --> 00:34:46,429
we introduced some convention of naming

00:34:42,970 --> 00:34:50,000
subscribers so you name subscribers

00:34:46,429 --> 00:34:54,290
using a name of the event as its shown

00:34:50,000 --> 00:34:57,040
at this picture so that's a gem you can

00:34:54,290 --> 00:34:57,040
use today

00:34:57,610 --> 00:35:05,690
and the final question to discuss today

00:35:02,300 --> 00:35:08,680
so we talked about engines engines

00:35:05,690 --> 00:35:10,820
engines wallah so we suspended

00:35:08,680 --> 00:35:11,750
implication two components what's left

00:35:10,820 --> 00:35:15,500
for the main event

00:35:11,750 --> 00:35:19,460
should we keep something there or not we

00:35:15,500 --> 00:35:22,820
cannot make the app mean up like a zero

00:35:19,460 --> 00:35:26,480
code because we even an extreme case

00:35:22,820 --> 00:35:29,300
when we do not have the app folder and

00:35:26,480 --> 00:35:35,590
that's what we use sometimes we still

00:35:29,300 --> 00:35:35,590
use use configuration database stuff and

00:35:35,890 --> 00:35:42,290
maybe something in the leak folder like

00:35:38,590 --> 00:35:43,850
generators in place or whatever that's

00:35:42,290 --> 00:35:46,970
an ideal case so you don't need an app

00:35:43,850 --> 00:35:47,840
folder it's works for applications

00:35:46,970 --> 00:35:49,430
written from scratch

00:35:47,840 --> 00:35:52,280
it was very well defined requirements

00:35:49,430 --> 00:35:56,450
one you know beforehand helps to lead to

00:35:52,280 --> 00:36:00,440
your logic more common case and actually

00:35:56,450 --> 00:36:02,870
it's case from a common service is when

00:36:00,440 --> 00:36:06,590
you still have something in your app

00:36:02,870 --> 00:36:08,870
folder like base application something

00:36:06,590 --> 00:36:12,380
stuff like application controller I

00:36:08,870 --> 00:36:14,420
already showed before and even in our

00:36:12,380 --> 00:36:20,000
case we have a Fanta Gatien logic in the

00:36:14,420 --> 00:36:24,530
main app but that's like a controversial

00:36:20,000 --> 00:36:27,850
idea I don't recommend it for everyone

00:36:24,530 --> 00:36:32,090
what's definitely stays in the main app

00:36:27,850 --> 00:36:34,760
is first of all feature or system tests

00:36:32,090 --> 00:36:36,290
you should test you should write

00:36:34,760 --> 00:36:39,100
integration tests for the system as a

00:36:36,290 --> 00:36:41,660
whole not just four separate components

00:36:39,100 --> 00:36:44,330
local center plates overrides your

00:36:41,660 --> 00:36:47,200
engines shouldn't worry about UI changes

00:36:44,330 --> 00:36:48,890
and all the non code specific stuff

00:36:47,200 --> 00:36:51,890
instrumentation exception handling

00:36:48,890 --> 00:36:53,930
that's what we already covered and of

00:36:51,890 --> 00:36:55,670
course configuration stuff for rails for

00:36:53,930 --> 00:37:01,070
configuration frameworks configuration

00:36:55,670 --> 00:37:05,420
and so a few words about jams

00:37:01,070 --> 00:37:08,930
so our configuration has a codename

00:37:05,420 --> 00:37:09,869
engines and jams or engines so we also

00:37:08,930 --> 00:37:12,690
had jams

00:37:09,869 --> 00:37:15,150
local James welcome James solve

00:37:12,690 --> 00:37:17,759
different problems first of all it's a

00:37:15,150 --> 00:37:19,440
better organization of the cold not

00:37:17,759 --> 00:37:21,479
related to the business logic to the

00:37:19,440 --> 00:37:23,670
application itself the code that could

00:37:21,479 --> 00:37:28,410
be shared between different applications

00:37:23,670 --> 00:37:32,910
and even the published somewhere in the

00:37:28,410 --> 00:37:35,069
private or public registry so that's

00:37:32,910 --> 00:37:36,900
what we did was give event straw

00:37:35,069 --> 00:37:38,880
recession originally it was just a jam

00:37:36,900 --> 00:37:43,499
within the project but then we decided

00:37:38,880 --> 00:37:46,469
to open source it and of course it also

00:37:43,499 --> 00:37:51,180
gives you a benefit of isolated tests

00:37:46,469 --> 00:37:57,390
which reduce CI build times and you know

00:37:51,180 --> 00:37:59,700
fast tests is what I'm worried okay and

00:37:57,390 --> 00:38:02,579
that's just an example typical gems that

00:37:59,700 --> 00:38:04,380
we have in the projects it's a shared

00:38:02,579 --> 00:38:07,170
rubric all configurations with custom

00:38:04,380 --> 00:38:11,960
cups and plugins

00:38:07,170 --> 00:38:16,279
it's our spec configuration was again

00:38:11,960 --> 00:38:18,509
useful tools in it and so on and

00:38:16,279 --> 00:38:21,719
applications which use graph care we

00:38:18,509 --> 00:38:24,089
usually have a common graph Cal local

00:38:21,719 --> 00:38:28,380
gem with some graphical specific tools

00:38:24,089 --> 00:38:32,190
all of this local gems eventually I

00:38:28,380 --> 00:38:35,039
think would be open sourced but for now

00:38:32,190 --> 00:38:40,739
we just keep them in different projects

00:38:35,039 --> 00:38:42,900
and collect the different features to be

00:38:40,739 --> 00:38:47,880
combined later in the official public

00:38:42,900 --> 00:38:49,619
jam so that was a quick overview of the

00:38:47,880 --> 00:38:51,329
engines and gem self-rejection if you

00:38:49,619 --> 00:38:54,450
noticed we only cover the half of the

00:38:51,329 --> 00:38:57,539
map I showed but still I think you got

00:38:54,450 --> 00:39:00,029
an idea and hopefully I demonstrated

00:38:57,539 --> 00:39:02,910
some solutions to the problems

00:39:00,029 --> 00:39:09,799
so she'll use engines are not for your

00:39:02,910 --> 00:39:13,140
monoliths there are a lot of benefits

00:39:09,799 --> 00:39:14,819
I'm not gonna just talking about them I

00:39:13,140 --> 00:39:17,819
already talked about this one of the

00:39:14,819 --> 00:39:19,319
benefits is that we can extract engines

00:39:17,819 --> 00:39:20,400
into micro service in the future if you

00:39:19,319 --> 00:39:22,890
braid now

00:39:20,400 --> 00:39:25,499
the problem was entrance is that third

00:39:22,890 --> 00:39:28,230
party jams usually lacks support for

00:39:25,499 --> 00:39:31,950
them and even rails is not good

00:39:28,230 --> 00:39:35,400
it was engine support here's a link to

00:39:31,950 --> 00:39:37,950
the resources script and other useful

00:39:35,400 --> 00:39:41,130
materials from this talk feel free to

00:39:37,950 --> 00:39:44,299
use it thank you

00:39:41,130 --> 00:39:47,299
just don't make him all these become a

00:39:44,299 --> 00:39:47,299

YouTube URL: https://www.youtube.com/watch?v=P6IXPM3zFTw


