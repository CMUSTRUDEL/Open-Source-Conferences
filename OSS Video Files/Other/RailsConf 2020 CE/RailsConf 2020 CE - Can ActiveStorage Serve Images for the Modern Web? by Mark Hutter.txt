Title: RailsConf 2020 CE - Can ActiveStorage Serve Images for the Modern Web? by Mark Hutter
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Can ActiveStorage Serve Images for the Modern Web? by Mark Hutter

"It’s a simple question: can ActiveStorage be used for image serving in your modern web apps? The answer is not so simple. Can it handle the speed requirements and size specifications of images that the modern web browsers deems as “fast”?

We’ll look at the out-of-the-box approach ActiveStorage takes on asset serving, where it works well - resizing, usability, and security, and where we run into rough edges - image load times, CDN integration, and next gen image format storage. And then we’ll look at one pattern working in production today."

__________

I am 11 years into my career in the software development industry. This adventure has allowed me to pursue a range of technology specialties from SQL, Java, Ruby, Javascript, and Go. I am a husband and father, and there is nothing more important to me than family. I love food. All food. I have an eternal ongoing pursuit of the best quality audio experience I can find in headphones.
Captions: 
	00:00:12,200 --> 00:00:19,920
hi I'm marketer I work at a company

00:00:17,490 --> 00:00:21,840
called landing we're trying to reinvent

00:00:19,920 --> 00:00:23,970
the way people think about apartment

00:00:21,840 --> 00:00:25,560
living and leasing and I'm here to talk

00:00:23,970 --> 00:00:28,500
through the logistics today of the

00:00:25,560 --> 00:00:32,820
following question can active storage

00:00:28,500 --> 00:00:35,190
serve images for the modern web well as

00:00:32,820 --> 00:00:40,320
it turns out the answer to that is not

00:00:35,190 --> 00:00:42,660
so easy so what are we really talking

00:00:40,320 --> 00:00:45,180
about here well we're talking about

00:00:42,660 --> 00:00:48,710
speed we're talking about fast so what

00:00:45,180 --> 00:00:54,080
is fast how do we how do we define it

00:00:48,710 --> 00:00:57,320
lightening boom done any questions

00:00:54,080 --> 00:00:59,760
that's not right that's not right for

00:00:57,320 --> 00:01:01,739
the purposes here we're talking about

00:00:59,760 --> 00:01:04,530
effective storage can handle the speed

00:01:01,739 --> 00:01:06,780
requirements of serving images can it

00:01:04,530 --> 00:01:10,170
live up to the modern web browsers and

00:01:06,780 --> 00:01:11,729
what they deem as fast so what is fast

00:01:10,170 --> 00:01:14,010
it's a good question

00:01:11,729 --> 00:01:15,750
fastest one of these amorphous things we

00:01:14,010 --> 00:01:18,030
all kind of know what it looks like when

00:01:15,750 --> 00:01:20,189
we see it we've all been to those sites

00:01:18,030 --> 00:01:23,159
where they say where you say wow that

00:01:20,189 --> 00:01:25,170
was fast but putting actual metrics or

00:01:23,159 --> 00:01:26,789
numbers to it can sometimes be tricky

00:01:25,170 --> 00:01:29,009
and we can kind of drive ourselves into

00:01:26,789 --> 00:01:30,990
a ditch we can focus on the wrong things

00:01:29,009 --> 00:01:32,969
or we can become consumed with

00:01:30,990 --> 00:01:36,450
particular aspects of performance with

00:01:32,969 --> 00:01:39,020
neglecting others to get a holistic view

00:01:36,450 --> 00:01:41,579
of this performance situation is complex

00:01:39,020 --> 00:01:45,329
especially these days so much JavaScript

00:01:41,579 --> 00:01:51,049
third party editions DNS CD ends acronym

00:01:45,329 --> 00:01:51,049
salad but let me start off by saying

00:01:52,600 --> 00:01:57,979
everything you already know about

00:01:54,530 --> 00:01:59,930
performance is true I'm not here to

00:01:57,979 --> 00:02:03,170
reinvent your knowledge of rails

00:01:59,930 --> 00:02:04,990
performance or JavaScript performance or

00:02:03,170 --> 00:02:07,970
preach some overarching

00:02:04,990 --> 00:02:12,470
one-size-fits-all solution to all your

00:02:07,970 --> 00:02:15,350
performance problems you're already a

00:02:12,470 --> 00:02:17,660
good developer you know what performance

00:02:15,350 --> 00:02:20,150
is you know how to make your websites

00:02:17,660 --> 00:02:22,810
and your web apps fast I'm not here to

00:02:20,150 --> 00:02:26,420
change that or to confuse the situation

00:02:22,810 --> 00:02:29,300
I'm only here to discuss performance as

00:02:26,420 --> 00:02:33,080
it pertains to using active storage to

00:02:29,300 --> 00:02:36,950
serve your image assets and performance

00:02:33,080 --> 00:02:38,930
still has some big pillars your

00:02:36,950 --> 00:02:41,600
server-side your javascript and your

00:02:38,930 --> 00:02:44,000
images they all need to be performing

00:02:41,600 --> 00:02:46,100
well in order for your site to be

00:02:44,000 --> 00:02:49,519
measured as something that is fast on

00:02:46,100 --> 00:02:52,850
the modern web and I'm not going to

00:02:49,519 --> 00:02:56,720
cover anything other than how images

00:02:52,850 --> 00:02:59,209
perform using active storage as your

00:02:56,720 --> 00:03:03,290
library of choice for serving image

00:02:59,209 --> 00:03:07,760
assets so at this point you might be

00:03:03,290 --> 00:03:10,100
thinking why should I care I know how to

00:03:07,760 --> 00:03:13,420
make things fast I'm sure all my

00:03:10,100 --> 00:03:15,829
Production apps are working fast enough

00:03:13,420 --> 00:03:18,799
that I hit play on the wrong conference

00:03:15,829 --> 00:03:24,380
talk here this seems like a trivial

00:03:18,799 --> 00:03:28,220
thing and you might think that but as of

00:03:24,380 --> 00:03:31,459
November 2019 goggle announced that

00:03:28,220 --> 00:03:33,859
chrome will start identifying sites that

00:03:31,459 --> 00:03:37,100
typically load is slow they'll start

00:03:33,859 --> 00:03:41,870
badging things to notify the end user

00:03:37,100 --> 00:03:44,959
that a site is slower than other sites

00:03:41,870 --> 00:03:48,200
on the internet and if you needed more

00:03:44,959 --> 00:03:49,970
persuasion there are a few users out

00:03:48,200 --> 00:03:52,220
there who use Chrome as the primary

00:03:49,970 --> 00:03:55,600
browser you may be viewing this

00:03:52,220 --> 00:03:57,650
conference talk on Google Chrome so

00:03:55,600 --> 00:04:00,920
what's it going to look like if they

00:03:57,650 --> 00:04:03,170
start too bad your site is slow well

00:04:00,920 --> 00:04:04,930
here's some screenshots taken from the

00:04:03,170 --> 00:04:07,820
blog post

00:04:04,930 --> 00:04:11,120
you can see they have this indicator

00:04:07,820 --> 00:04:13,160
that it's usually slow and if you're a

00:04:11,120 --> 00:04:14,990
site that sells something a product or a

00:04:13,160 --> 00:04:21,100
service you probably don't want to be on

00:04:14,990 --> 00:04:23,870
this list okay so how do we determine

00:04:21,100 --> 00:04:26,390
that something is fast how do we measure

00:04:23,870 --> 00:04:32,510
this what tools are at my disposal

00:04:26,390 --> 00:04:37,640
how's Google figuring it out well

00:04:32,510 --> 00:04:40,210
actually there are quite a few so of

00:04:37,640 --> 00:04:43,150
course Google provides a couple tools

00:04:40,210 --> 00:04:45,740
themselves there's a page speed index a

00:04:43,150 --> 00:04:47,590
web-based tool and then lighthouse which

00:04:45,740 --> 00:04:50,270
is built right into the Chrome browser

00:04:47,590 --> 00:04:52,910
there are also some other things and in

00:04:50,270 --> 00:04:54,560
my experience it's better to use a wide

00:04:52,910 --> 00:04:57,230
variety of tools when measuring these

00:04:54,560 --> 00:04:59,480
things to get a more holistic view of

00:04:57,230 --> 00:05:02,180
what performance is on your site they

00:04:59,480 --> 00:05:05,210
even have a tool specifically for images

00:05:02,180 --> 00:05:10,700
and paid as it pertains to your page

00:05:05,210 --> 00:05:12,290
weight and your image sizes but for the

00:05:10,700 --> 00:05:13,880
purposes that this talk will lean into

00:05:12,290 --> 00:05:15,380
the Google tools I find a lot of

00:05:13,880 --> 00:05:16,880
business partners like to use them

00:05:15,380 --> 00:05:19,640
anyway they're easy to read and easier

00:05:16,880 --> 00:05:21,140
to understand so if you've ever seen

00:05:19,640 --> 00:05:24,680
these tools you don't know what they

00:05:21,140 --> 00:05:30,700
look like they look like this they have

00:05:24,680 --> 00:05:34,490
several things here there are lists of

00:05:30,700 --> 00:05:38,890
opportunities in one section there are

00:05:34,490 --> 00:05:42,590
lists of Diagnostics in another section

00:05:38,890 --> 00:05:45,820
and all these are great but what we

00:05:42,590 --> 00:05:48,919
really want to focus on is this top six

00:05:45,820 --> 00:05:53,000
listing here of the measurements from

00:05:48,919 --> 00:05:55,450
the lab data so what do these

00:05:53,000 --> 00:05:57,590
measurement measurement actually mean

00:05:55,450 --> 00:05:59,870
well I don't want to really go too deep

00:05:57,590 --> 00:06:01,190
on this because this is railsconf and I

00:05:59,870 --> 00:06:02,600
want to talk about rails and active

00:06:01,190 --> 00:06:05,090
storage and we could probably have an

00:06:02,600 --> 00:06:06,950
entirely different talk about what these

00:06:05,090 --> 00:06:11,000
measurements mean and how to affect

00:06:06,950 --> 00:06:14,990
change on each one but all shortcuts use

00:06:11,000 --> 00:06:16,310
some documentation reading it's

00:06:14,990 --> 00:06:18,340
important to note that not all the

00:06:16,310 --> 00:06:20,330
measurements are created equal

00:06:18,340 --> 00:06:23,000
some of them are weighted very

00:06:20,330 --> 00:06:31,850
differently much higher much lower than

00:06:23,000 --> 00:06:33,730
others like what's this 0x so we can

00:06:31,850 --> 00:06:36,560
just throw that one out right away and

00:06:33,730 --> 00:06:38,660
it's also important to note all over the

00:06:36,560 --> 00:06:41,270
documentation it says opportunities and

00:06:38,660 --> 00:06:43,340
diagnostics do not directly affect your

00:06:41,270 --> 00:06:46,850
performance score even though they're in

00:06:43,340 --> 00:06:49,220
big red letters on the page it's

00:06:46,850 --> 00:06:51,110
important that these are suggestions to

00:06:49,220 --> 00:06:53,090
things that might improve it but won't

00:06:51,110 --> 00:06:57,200
directly in fact affect your performance

00:06:53,090 --> 00:06:59,030
score for instance it's often noted in

00:06:57,200 --> 00:07:01,640
the opportunities section that you could

00:06:59,030 --> 00:07:05,300
use next-gen formats to increase the

00:07:01,640 --> 00:07:08,450
performance of your site however if your

00:07:05,300 --> 00:07:09,440
rail server is running 3,800 queries

00:07:08,450 --> 00:07:12,380
true story

00:07:09,440 --> 00:07:14,330
your performance score will still be bad

00:07:12,380 --> 00:07:15,740
always there's no amount of image

00:07:14,330 --> 00:07:18,920
optimization that gets you away from

00:07:15,740 --> 00:07:20,900
that okay so we probably do need to

00:07:18,920 --> 00:07:23,180
delve a little bit into what these

00:07:20,900 --> 00:07:26,990
things mean especially as it pertains to

00:07:23,180 --> 00:07:29,570
images so we'll look at a couple first

00:07:26,990 --> 00:07:31,130
content full paint measures how long it

00:07:29,570 --> 00:07:34,760
takes the browser to render the first

00:07:31,130 --> 00:07:37,190
piece of Dom content first first HTML to

00:07:34,760 --> 00:07:39,470
hit the page you could think about this

00:07:37,190 --> 00:07:42,290
on your real server as if you have a lot

00:07:39,470 --> 00:07:44,960
of partials a lot of nested partials and

00:07:42,290 --> 00:07:46,160
they're all rendering some image how

00:07:44,960 --> 00:07:49,700
long is it going to take your rails

00:07:46,160 --> 00:07:51,500
server to accrue all that and render it

00:07:49,700 --> 00:07:55,220
back out and send it back across the

00:07:51,500 --> 00:07:57,350
wire another big one is the speed index

00:07:55,220 --> 00:08:02,390
measure of how quickly you can get

00:07:57,350 --> 00:08:04,040
visual content to start to load so the

00:08:02,390 --> 00:08:07,280
lighthouse tool will start to capture a

00:08:04,040 --> 00:08:10,490
video of as the page loads and compute

00:08:07,280 --> 00:08:13,700
visual progress kind of everything helps

00:08:10,490 --> 00:08:16,400
this one honestly but again you can

00:08:13,700 --> 00:08:18,790
think are my logos blocking are there

00:08:16,400 --> 00:08:23,330
those assets coming from active storage

00:08:18,790 --> 00:08:25,910
are there lots of partials or things

00:08:23,330 --> 00:08:28,310
that are going on on the server through

00:08:25,910 --> 00:08:31,460
active storage that could be preventing

00:08:28,310 --> 00:08:34,310
the page from getting that first visual

00:08:31,460 --> 00:08:38,390
display going can I defer some things to

00:08:34,310 --> 00:08:40,010
an AJAX call okay so now we have some

00:08:38,390 --> 00:08:42,500
tools we understand a little bit about

00:08:40,010 --> 00:08:44,660
the measurements which brings us back to

00:08:42,500 --> 00:08:47,560
our original question can we use active

00:08:44,660 --> 00:08:51,730
storage to serve all our image assets

00:08:47,560 --> 00:08:54,410
well like every single technology choice

00:08:51,730 --> 00:08:57,200
you'll ever make in your entire career

00:08:54,410 --> 00:08:59,240
it all depends on what exactly your

00:08:57,200 --> 00:09:01,160
specific needs are and what your

00:08:59,240 --> 00:09:04,490
requirements are for your business or

00:09:01,160 --> 00:09:08,750
your project however just like all of

00:09:04,490 --> 00:09:10,730
the rails features and modules active

00:09:08,750 --> 00:09:13,850
storage solves a ton of problems we had

00:09:10,730 --> 00:09:18,050
and I think it's important to highlight

00:09:13,850 --> 00:09:20,990
some of those and give you a fair and

00:09:18,050 --> 00:09:23,300
balanced view of what active storage

00:09:20,990 --> 00:09:25,100
gives you and what some of the

00:09:23,300 --> 00:09:29,230
trade-offs might be before you decide

00:09:25,100 --> 00:09:32,800
whether it will be your image serving

00:09:29,230 --> 00:09:35,300
resource so we all remember the

00:09:32,800 --> 00:09:37,279
third-party gem way of doing this we had

00:09:35,300 --> 00:09:39,380
solutions to this paper clip carrier

00:09:37,279 --> 00:09:43,180
wave to name a few and how did they

00:09:39,380 --> 00:09:46,730
solve this problem of attaching images

00:09:43,180 --> 00:09:49,670
to domain models well they would

00:09:46,730 --> 00:09:51,500
sprinkle data attributes all across your

00:09:49,670 --> 00:09:54,589
domain models for anything that needed

00:09:51,500 --> 00:09:56,660
to have an image so if you had a user

00:09:54,589 --> 00:09:58,579
and they had an avatar there would be

00:09:56,660 --> 00:10:02,329
some data elements on the user's table

00:09:58,579 --> 00:10:05,180
to represent the data necessary to get

00:10:02,329 --> 00:10:08,839
that image if you had a product and it

00:10:05,180 --> 00:10:11,120
had some images the same thing data data

00:10:08,839 --> 00:10:13,550
attributes sprinkled on this worked

00:10:11,120 --> 00:10:15,920
pretty well but it was very hard for

00:10:13,550 --> 00:10:20,020
anybody who was analyzing the data to

00:10:15,920 --> 00:10:23,390
know where to look at all times

00:10:20,020 --> 00:10:26,420
active storage brought all that into one

00:10:23,390 --> 00:10:30,079
or rather two places and they

00:10:26,420 --> 00:10:32,630
centralized all of your image needs into

00:10:30,079 --> 00:10:35,899
two tables the attachments and the blobs

00:10:32,630 --> 00:10:37,279
table now this might not seem like such

00:10:35,899 --> 00:10:39,800
a big deal but if you're in a bigger

00:10:37,279 --> 00:10:41,959
organization and you maybe have

00:10:39,800 --> 00:10:44,570
different facets of engineering like

00:10:41,959 --> 00:10:45,880
data engineering or data analysts that

00:10:44,570 --> 00:10:48,500
are doing

00:10:45,880 --> 00:10:51,890
analysis on things that have proper

00:10:48,500 --> 00:10:54,650
imaging have enough images etc this

00:10:51,890 --> 00:10:56,420
makes it really easy for them to know

00:10:54,650 --> 00:10:59,000
where to go to look they don't have to

00:10:56,420 --> 00:11:02,480
have intimate knowledge of your domain

00:10:59,000 --> 00:11:04,760
model and if you haven't yet used active

00:11:02,480 --> 00:11:07,070
storage in real life the ease of use is

00:11:04,760 --> 00:11:09,080
pretty fantastic just like everything we

00:11:07,070 --> 00:11:10,460
use as rails developers there's a little

00:11:09,080 --> 00:11:13,610
configuration to get your cloud provider

00:11:10,460 --> 00:11:15,260
set up but then the actual code to

00:11:13,610 --> 00:11:17,480
integrate it into your application is

00:11:15,260 --> 00:11:20,350
really simple and easy to understand and

00:11:17,480 --> 00:11:23,270
very comfortable as a rails developer

00:11:20,350 --> 00:11:28,610
there's an association on to your models

00:11:23,270 --> 00:11:31,880
to attach some amount of images change

00:11:28,610 --> 00:11:36,830
to your strong params pretty easy stuff

00:11:31,880 --> 00:11:40,070
a little form update to consume the

00:11:36,830 --> 00:11:42,410
images and then we render the images

00:11:40,070 --> 00:11:46,100
with the image tag we're also familiar

00:11:42,410 --> 00:11:47,990
with again very easy very comfortable

00:11:46,100 --> 00:11:49,610
there's nothing tremendous here but

00:11:47,990 --> 00:11:52,520
isn't that sort of the beauty of it

00:11:49,610 --> 00:11:55,130
simple clean method api's into our image

00:11:52,520 --> 00:11:59,320
assets and active storage out of the box

00:11:55,130 --> 00:12:02,000
is going to give you on-the-fly resizing

00:11:59,320 --> 00:12:04,760
to all of the sizes you may need of an

00:12:02,000 --> 00:12:06,800
image across your site this is a great

00:12:04,760 --> 00:12:09,590
way to assure proper size is used every

00:12:06,800 --> 00:12:11,660
time the developer doesn't have to have

00:12:09,590 --> 00:12:14,090
any knowledge of how the transformation

00:12:11,660 --> 00:12:17,600
happens whether it's mini magic or image

00:12:14,090 --> 00:12:19,130
magic or some other processing gem they

00:12:17,600 --> 00:12:21,950
don't know need to know the methods that

00:12:19,130 --> 00:12:24,860
are used to do so you just called dot

00:12:21,950 --> 00:12:27,620
variant and it just works and there's

00:12:24,860 --> 00:12:30,620
some added security features that I at

00:12:27,620 --> 00:12:32,380
least have not been aware of that have

00:12:30,620 --> 00:12:35,840
been available to me with the other

00:12:32,380 --> 00:12:39,080
libraries these are great for sharing or

00:12:35,840 --> 00:12:42,200
returning sensitive information to a

00:12:39,080 --> 00:12:44,150
client without necessarily exposing

00:12:42,200 --> 00:12:46,160
yourself to long-term permanent risk or

00:12:44,150 --> 00:12:49,600
having to manage this so by using this

00:12:46,160 --> 00:12:53,560
dot service URL method you get a nice

00:12:49,600 --> 00:12:59,180
URL 302 redirect to your cloud provider

00:12:53,560 --> 00:13:02,630
return to the client with default expert

00:12:59,180 --> 00:13:05,390
it's signed it's authorized it has all

00:13:02,630 --> 00:13:07,990
the proper security features so that you

00:13:05,390 --> 00:13:12,230
can be assured without a doubt that this

00:13:07,990 --> 00:13:14,570
link to some file attachment is non

00:13:12,230 --> 00:13:16,970
permanent and will go away without you

00:13:14,570 --> 00:13:18,890
having to manage the situation but maybe

00:13:16,970 --> 00:13:21,740
the most compelling reason to use active

00:13:18,890 --> 00:13:25,130
storage as a rails developer is that

00:13:21,740 --> 00:13:27,440
it's just baked right in which means you

00:13:25,130 --> 00:13:29,570
know you're getting the support of the

00:13:27,440 --> 00:13:32,870
rails team that this thing is being

00:13:29,570 --> 00:13:35,149
actively maintained that it's being

00:13:32,870 --> 00:13:39,050
actively triaged and that people are

00:13:35,149 --> 00:13:42,740
working and thinking about this gem all

00:13:39,050 --> 00:13:44,990
the time we've all used gems in the past

00:13:42,740 --> 00:13:48,380
I'm sure that have fallen out of favor

00:13:44,990 --> 00:13:50,329
out of support or seemingly just by the

00:13:48,380 --> 00:13:54,019
wayside and we have to decide what to do

00:13:50,329 --> 00:13:56,300
with that with active storage being part

00:13:54,019 --> 00:13:59,660
of rails you know it's coming along the

00:13:56,300 --> 00:14:02,180
way along the way in the journey for all

00:13:59,660 --> 00:14:03,890
of our web apps so at this point you

00:14:02,180 --> 00:14:06,079
might be thinking you have made some

00:14:03,890 --> 00:14:07,279
compelling arguments why are we even

00:14:06,079 --> 00:14:09,380
having this conversation

00:14:07,279 --> 00:14:14,690
of course active storage should be what

00:14:09,380 --> 00:14:16,190
I use for my image assets well let's

00:14:14,690 --> 00:14:19,339
take a look at an example of what

00:14:16,190 --> 00:14:21,170
happens when the browser requests an

00:14:19,339 --> 00:14:23,779
image asset from active storage the

00:14:21,170 --> 00:14:25,519
process it goes through the first thing

00:14:23,779 --> 00:14:28,100
that happens is it's going to run to

00:14:25,519 --> 00:14:29,930
database queries one to the attachments

00:14:28,100 --> 00:14:34,820
table and one to the blobs table to try

00:14:29,930 --> 00:14:36,500
to find the relevant asset these queries

00:14:34,820 --> 00:14:38,870
are good they're well optimized they're

00:14:36,500 --> 00:14:42,110
well written however you can see even in

00:14:38,870 --> 00:14:44,300
this example kind of we we end up with a

00:14:42,110 --> 00:14:46,730
total of four milliseconds to get one

00:14:44,300 --> 00:14:48,380
image asset you can think of this as if

00:14:46,730 --> 00:14:51,589
you're returning a lot of models and

00:14:48,380 --> 00:14:53,360
those models have a lot of assets this

00:14:51,589 --> 00:14:55,850
could get out of hand very quickly just

00:14:53,360 --> 00:14:58,250
as any N+ 1 query could unless you're

00:14:55,850 --> 00:15:01,670
using n plus 1 as a feature of Russian

00:14:58,250 --> 00:15:04,880
doll caching or something then when

00:15:01,670 --> 00:15:06,800
active storage returns the asset to the

00:15:04,880 --> 00:15:10,720
browser it actually returns a 302

00:15:06,800 --> 00:15:10,720
redirect to the cloud provider

00:15:11,020 --> 00:15:15,280
you are now subject to the network

00:15:13,510 --> 00:15:17,050
latency of whatever file storage

00:15:15,280 --> 00:15:20,230
provider you have and this is off your

00:15:17,050 --> 00:15:23,320
web server and out of your control I'm

00:15:20,230 --> 00:15:27,250
not a CDN expert but I also think there

00:15:23,320 --> 00:15:29,290
may be some trouble with getting a CDN

00:15:27,250 --> 00:15:33,010
such as cloud front or CloudFlare to

00:15:29,290 --> 00:15:36,700
cache the asset once seen if it's

00:15:33,010 --> 00:15:39,330
returned as a 302 redirect we also saw

00:15:36,700 --> 00:15:42,070
the benefits of that on the fly very

00:15:39,330 --> 00:15:45,190
resizing but it can be a very expensive

00:15:42,070 --> 00:15:47,590
process so you can see in this example

00:15:45,190 --> 00:15:51,400
when we call and it needs to do the

00:15:47,590 --> 00:15:55,480
variant it runs the requisite active

00:15:51,400 --> 00:15:58,750
storage queries it then if the resize

00:15:55,480 --> 00:16:02,470
doesn't exist it performs the

00:15:58,750 --> 00:16:04,990
transformation persists to the cloud

00:16:02,470 --> 00:16:08,020
provider and gives you back the URL in

00:16:04,990 --> 00:16:10,930
order to perform the redirect you see in

00:16:08,020 --> 00:16:14,380
this one example that entire process

00:16:10,930 --> 00:16:16,330
took one point eight seven two seconds

00:16:14,380 --> 00:16:21,280
that's two whole seconds on the server

00:16:16,330 --> 00:16:24,010
to give you back a thumbnail image if it

00:16:21,280 --> 00:16:27,790
wasn't already there now this may not be

00:16:24,010 --> 00:16:31,090
a problem since it'll only happen the

00:16:27,790 --> 00:16:33,100
first time the resize is requested after

00:16:31,090 --> 00:16:35,260
that active storage will save it for you

00:16:33,100 --> 00:16:37,690
and this will happen much faster however

00:16:35,260 --> 00:16:39,880
if you're doing a lot of image uploading

00:16:37,690 --> 00:16:42,220
your images are changing frequently or

00:16:39,880 --> 00:16:45,310
you're getting a lot of new images or

00:16:42,220 --> 00:16:48,700
expanding your image collection pretty

00:16:45,310 --> 00:16:50,410
often your end-user stands a decent

00:16:48,700 --> 00:16:54,760
percentage chance of running into this

00:16:50,410 --> 00:16:59,770
at least sometimes if you're tracking

00:16:54,760 --> 00:17:01,660
your p99 p95 metrics really closely this

00:16:59,770 --> 00:17:05,410
could throw your metrics off pretty bad

00:17:01,660 --> 00:17:09,390
if even one user or two users get really

00:17:05,410 --> 00:17:15,850
high response times because of this

00:17:09,390 --> 00:17:19,060
feature you can see here in the network

00:17:15,850 --> 00:17:21,449
tab what that might look like to the end

00:17:19,060 --> 00:17:21,449
browser

00:17:22,610 --> 00:17:29,179
and if you are an organization that

00:17:26,510 --> 00:17:32,929
cares deeply about your mobile friendly

00:17:29,179 --> 00:17:38,390
compressed next-gen formats like WebP II

00:17:32,929 --> 00:17:40,910
or JPEG 2000 JPEG XR how do you handle

00:17:38,390 --> 00:17:42,920
attaching those compressed formats to

00:17:40,910 --> 00:17:47,770
either the canonical or the resized

00:17:42,920 --> 00:17:51,230
variant as far as I know there's not an

00:17:47,770 --> 00:17:53,120
out-of-the-box solution or something

00:17:51,230 --> 00:17:59,990
very clearly defined as to hand how to

00:17:53,120 --> 00:18:02,990
handle this however most of this can be

00:17:59,990 --> 00:18:05,630
very easily mitigated with a few active

00:18:02,990 --> 00:18:08,120
storage best practices so just like as

00:18:05,630 --> 00:18:10,400
we came along as rails developers and we

00:18:08,120 --> 00:18:12,260
got better at active record and we got

00:18:10,400 --> 00:18:14,660
better at query optimization and

00:18:12,260 --> 00:18:17,299
developer practice of writing active

00:18:14,660 --> 00:18:20,419
record queries I think some best

00:18:17,299 --> 00:18:23,120
practices are starting to emerge out of

00:18:20,419 --> 00:18:25,669
active storage how to best use it so

00:18:23,120 --> 00:18:30,860
that it's optimized for your situations

00:18:25,669 --> 00:18:33,350
and you won't run into these pitfalls so

00:18:30,860 --> 00:18:35,480
just go ahead and process all your

00:18:33,350 --> 00:18:37,070
resizes ahead of time when they're

00:18:35,480 --> 00:18:40,490
uploaded or when they're added to your

00:18:37,070 --> 00:18:42,230
site if you can this is a pretty simple

00:18:40,490 --> 00:18:45,500
way to make sure that you never run into

00:18:42,230 --> 00:18:46,669
the problem of having resize happen in

00:18:45,500 --> 00:18:51,710
flight with the request response

00:18:46,669 --> 00:18:53,480
lifecycle you can do this very very

00:18:51,710 --> 00:18:55,400
easily with active storage with the dot

00:18:53,480 --> 00:18:57,500
processed method where dot processed

00:18:55,400 --> 00:18:59,390
will do the resize for you and save it

00:18:57,500 --> 00:19:01,790
to your storage so that it'll be there

00:18:59,390 --> 00:19:05,059
when your end-user your customer

00:19:01,790 --> 00:19:06,770
requests makes that same request now

00:19:05,059 --> 00:19:08,630
this depends on your situation if your

00:19:06,770 --> 00:19:11,179
end user is uploading the image and they

00:19:08,630 --> 00:19:14,240
need it back immediately this may not be

00:19:11,179 --> 00:19:15,740
possible however if you're a company and

00:19:14,240 --> 00:19:18,500
you have a catalogue of products and

00:19:15,740 --> 00:19:21,200
images are uploaded with any length

00:19:18,500 --> 00:19:23,030
duration ahead of time this becomes a

00:19:21,200 --> 00:19:24,890
trivial thing to do that will keep your

00:19:23,030 --> 00:19:28,100
response times down where you'll never

00:19:24,890 --> 00:19:31,669
see or pay penalties for inline resizing

00:19:28,100 --> 00:19:34,520
or better yet process it in the

00:19:31,669 --> 00:19:36,020
background this becomes really important

00:19:34,520 --> 00:19:37,760
if you're uploading a lot of

00:19:36,020 --> 00:19:40,820
at once or you if you have a lot of

00:19:37,760 --> 00:19:43,970
variant resizes so if you are uploading

00:19:40,820 --> 00:19:47,270
25 images at a time and those 25 images

00:19:43,970 --> 00:19:48,980
have four or five different formats just

00:19:47,270 --> 00:19:51,290
go ahead and throw all those into a

00:19:48,980 --> 00:19:53,210
background jobs and let the background

00:19:51,290 --> 00:19:55,490
jobs plow through them in their good old

00:19:53,210 --> 00:19:58,880
time you don't want your administrative

00:19:55,490 --> 00:20:00,290
users who are uploading these things to

00:19:58,880 --> 00:20:03,950
be sitting and waiting for all that

00:20:00,290 --> 00:20:06,590
processing to happen either it takes it

00:20:03,950 --> 00:20:08,990
out of the user requests off of your web

00:20:06,590 --> 00:20:11,630
server thread and puts it into a

00:20:08,990 --> 00:20:14,990
background process thread where it can

00:20:11,630 --> 00:20:17,750
be done in its own time and we saw the

00:20:14,990 --> 00:20:20,179
problem where active storage is running

00:20:17,750 --> 00:20:22,490
two queries to get every attachment to a

00:20:20,179 --> 00:20:24,770
model well remember these are just

00:20:22,490 --> 00:20:27,710
tables they're tables with associations

00:20:24,770 --> 00:20:29,600
has many we can eager load these things

00:20:27,710 --> 00:20:33,020
and active storage provides for you a

00:20:29,600 --> 00:20:35,690
handy method that will eager load all of

00:20:33,020 --> 00:20:40,700
the relevant attachments for you thereby

00:20:35,690 --> 00:20:45,590
eliminating that / / querying the

00:20:40,700 --> 00:20:47,720
database problem so what about my CDN

00:20:45,590 --> 00:20:51,950
how do I get my image assets into the

00:20:47,720 --> 00:20:53,980
CDN this one's a little trickier so this

00:20:51,950 --> 00:20:57,770
has been talked about a great deal on

00:20:53,980 --> 00:21:00,170
github issues on the rails project this

00:20:57,770 --> 00:21:02,240
comes directly from a github issue on

00:21:00,170 --> 00:21:04,760
Rails but there's a pretty well

00:21:02,240 --> 00:21:07,160
published monkey patch to the

00:21:04,760 --> 00:21:09,500
representations controller show action

00:21:07,160 --> 00:21:11,120
so what what this does the

00:21:09,500 --> 00:21:15,590
representations controller is what

00:21:11,120 --> 00:21:18,860
handles finding the variant resize when

00:21:15,590 --> 00:21:20,720
you call that variant from a view so

00:21:18,860 --> 00:21:23,840
this is overriding the behavior so that

00:21:20,720 --> 00:21:26,270
it no longer behaves in the default

00:21:23,840 --> 00:21:31,100
manner but rather returns to you the

00:21:26,270 --> 00:21:34,790
asset looking more like it came from the

00:21:31,100 --> 00:21:38,000
web server itself rather than giving you

00:21:34,790 --> 00:21:41,150
the cloud provider URL in a redirect and

00:21:38,000 --> 00:21:45,110
I've used this this works we use this in

00:21:41,150 --> 00:21:47,060
our production apps today so what do I

00:21:45,110 --> 00:21:51,020
do with my compressed formats

00:21:47,060 --> 00:21:56,930
well another tricky one you're gonna

00:21:51,020 --> 00:21:59,780
have to build something here's some

00:21:56,930 --> 00:22:03,820
samples of part of our solution it's the

00:21:59,780 --> 00:22:06,290
data layer and the view layer we have

00:22:03,820 --> 00:22:08,480
compressed attachments table that

00:22:06,290 --> 00:22:11,660
associates to the active storage blobs

00:22:08,480 --> 00:22:15,860
this is where we keep our formats the

00:22:11,660 --> 00:22:19,400
sizes and the URL of our the cloud

00:22:15,860 --> 00:22:21,980
provider in our case s3 we then write

00:22:19,400 --> 00:22:24,680
some few helpers that look very much

00:22:21,980 --> 00:22:28,760
like image tag where it will render back

00:22:24,680 --> 00:22:31,100
out the HTML for us but this all depends

00:22:28,760 --> 00:22:33,380
on what your specific needs are I

00:22:31,100 --> 00:22:35,960
wouldn't take anything I've said today

00:22:33,380 --> 00:22:39,020
and get too hung up on any one given

00:22:35,960 --> 00:22:41,900
point for instance if we just take an

00:22:39,020 --> 00:22:43,850
isolation the compressed formats what

00:22:41,900 --> 00:22:44,540
are your needs for serving compressed

00:22:43,850 --> 00:22:47,120
formats

00:22:44,540 --> 00:22:49,010
don't walk away thinking oh I must be

00:22:47,120 --> 00:22:51,920
serving web P on all of my applications

00:22:49,010 --> 00:22:57,140
this won't work for me a good for

00:22:51,920 --> 00:22:58,970
instance this is the Google PageSpeed

00:22:57,140 --> 00:23:04,490
score for the Birmingham on Rails

00:22:58,970 --> 00:23:08,180
conference it scores a 100 perfect score

00:23:04,490 --> 00:23:10,820
on lighthouse and Google page speeds it

00:23:08,180 --> 00:23:13,160
also is listed as opportunities to serve

00:23:10,820 --> 00:23:16,160
next-gen formats because we are doing

00:23:13,160 --> 00:23:18,860
nothing with web P or any other

00:23:16,160 --> 00:23:20,990
compressed formats so again the

00:23:18,860 --> 00:23:27,080
compressed formats is not going to win

00:23:20,990 --> 00:23:30,050
you the trophy back to the question can

00:23:27,080 --> 00:23:35,090
active storage be used explicitly as

00:23:30,050 --> 00:23:39,380
your image serving resource well we

00:23:35,090 --> 00:23:42,290
think so and just as an example I spun

00:23:39,380 --> 00:23:45,230
up a scaffolded new rails application

00:23:42,290 --> 00:23:48,800
for the purposes of serving very high

00:23:45,230 --> 00:23:51,320
resolution and images with many variant

00:23:48,800 --> 00:23:52,730
resizes I ran this through the

00:23:51,320 --> 00:23:55,280
performance tool Google PageSpeed

00:23:52,730 --> 00:23:57,170
insights and got a 73 you might think

00:23:55,280 --> 00:24:00,350
that's not that bad but for an empty app

00:23:57,170 --> 00:24:00,800
with little logic and no JavaScript or

00:24:00,350 --> 00:24:03,290
CS

00:24:00,800 --> 00:24:06,500
this is actually pretty hard to look at

00:24:03,290 --> 00:24:09,320
and then following some of the best

00:24:06,500 --> 00:24:12,110
practices we've discussed as part of

00:24:09,320 --> 00:24:14,060
this talk we were able to improve the

00:24:12,110 --> 00:24:19,040
score to a ninety nine simply by

00:24:14,060 --> 00:24:23,120
eliminating some of the areas that cause

00:24:19,040 --> 00:24:25,280
performance hiccups thank you thank you

00:24:23,120 --> 00:24:27,110
for watching this talk thank you to my

00:24:25,280 --> 00:24:29,060
wife and my family who supported me and

00:24:27,110 --> 00:24:31,790
gave me the time and support to do this

00:24:29,060 --> 00:24:33,680
in an unprecedented time for the world

00:24:31,790 --> 00:24:35,540
thank you to the rails conference

00:24:33,680 --> 00:24:37,460
organizers for putting this together so

00:24:35,540 --> 00:24:40,280
that we could still share ideas and

00:24:37,460 --> 00:24:43,220
connect as a rails community I'm mark

00:24:40,280 --> 00:24:46,450
hunter you can find me on Twitter please

00:24:43,220 --> 00:24:46,450

YouTube URL: https://www.youtube.com/watch?v=MfaWl2-U_Zw


