Title: RailsConf 2020 CE - Blank Page Panic! Creating Confidence with Test Driven ... by Elayne Juten
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Blank Page Panic! Creating Confidence with Test Driven Development by Elayne Juten

Have you ever stared at a blank feature spec file hoping for tests to magically appear? Well, you’re not alone! In this talk we’ll take a look at how the combination of Test-Driven Development, pseudocode and RSpec can help get you to your initial commit with confidence, one RSpec error at a time!

__________

Elayne Juten is a Software Engineer at Getty Images. As an early-career developer, she is passionate about finding ways to help build confidence in Ruby, Rails and RSpec.
Captions: 
	00:00:08,790 --> 00:00:14,350
hi everyone thanks so much for clicking

00:00:11,500 --> 00:00:16,140
on my talk Blake page panic in creating

00:00:14,350 --> 00:00:18,610
confidence with test-driven development

00:00:16,140 --> 00:00:20,980
so what I'm going to discuss in this

00:00:18,610 --> 00:00:23,140
talk is the combination of pseudocode

00:00:20,980 --> 00:00:25,930
test-driven development and the r-spec

00:00:23,140 --> 00:00:28,660
testing language and how those three

00:00:25,930 --> 00:00:31,720
help me get over that initial panic when

00:00:28,660 --> 00:00:33,850
picking up a news story so a little

00:00:31,720 --> 00:00:36,250
introduction to me my name is Elaine

00:00:33,850 --> 00:00:38,380
Newton I'm an early career developer

00:00:36,250 --> 00:00:40,750
from Madison Wisconsin so I've been

00:00:38,380 --> 00:00:43,150
developing professionally for about two

00:00:40,750 --> 00:00:46,600
years and I'm a software engineer at

00:00:43,150 --> 00:00:51,010
Getty Images here in Madison and I have

00:00:46,600 --> 00:00:53,650
two adorable cats Henry and Otto so

00:00:51,010 --> 00:00:56,560
blink Paige panic what is it it's in the

00:00:53,650 --> 00:00:59,710
title but I kind of made up this phrase

00:00:56,560 --> 00:01:02,230
and for me it's when I pick up a new

00:00:59,710 --> 00:01:02,950
story I read it through and I'm feeling

00:01:02,230 --> 00:01:05,110
pretty good

00:01:02,950 --> 00:01:11,070
you know I understand what needs to be

00:01:05,110 --> 00:01:15,939
done so then I open up a new file and I

00:01:11,070 --> 00:01:18,789
stare at the cursor blinking and I start

00:01:15,939 --> 00:01:22,210
to sweat a little bit I look around at

00:01:18,789 --> 00:01:25,780
my co-workers and wonder if they know

00:01:22,210 --> 00:01:27,549
that I don't know what I'm doing and you

00:01:25,780 --> 00:01:30,130
know I think okay I just need to get

00:01:27,549 --> 00:01:34,960
some text on this page to get some code

00:01:30,130 --> 00:01:37,810
out there and I have nothing I don't

00:01:34,960 --> 00:01:41,469
know what I'm doing I start to spiral

00:01:37,810 --> 00:01:43,479
into negative thoughts self-doubt why

00:01:41,469 --> 00:01:47,469
how did I even get this job I'm getting

00:01:43,479 --> 00:01:49,929
paid for this I shouldn't be and I never

00:01:47,469 --> 00:01:54,130
seemed to make progress when I get into

00:01:49,929 --> 00:01:56,200
these head spaces and so blank page

00:01:54,130 --> 00:01:59,200
panic to me is the programming

00:01:56,200 --> 00:02:03,039
equivalent of writer's block and I found

00:01:59,200 --> 00:02:06,249
this quote from gene Fowler who's an

00:02:03,039 --> 00:02:09,670
American journalist author dramatis from

00:02:06,249 --> 00:02:12,310
the 1930s that really spoke to me he

00:02:09,670 --> 00:02:14,440
says writing is easy all you do is stare

00:02:12,310 --> 00:02:16,930
at a blank sheet of paper until drops a

00:02:14,440 --> 00:02:19,550
blood form on your forehead it's a

00:02:16,930 --> 00:02:24,590
little morbid but I

00:02:19,550 --> 00:02:27,170
I agree with this quote a lot so some

00:02:24,590 --> 00:02:29,810
underlying causes of blank page panic

00:02:27,170 --> 00:02:32,590
you know might be fear perfection

00:02:29,810 --> 00:02:35,930
self-criticism and external pressure

00:02:32,590 --> 00:02:38,270
personally for me it's the trifecta of

00:02:35,930 --> 00:02:41,630
fear perfection and self-criticism I

00:02:38,270 --> 00:02:45,860
think all three kind of coalesce on my

00:02:41,630 --> 00:02:48,320
anxiety and that's when I get into the

00:02:45,860 --> 00:02:51,680
negative headspace and I end up making

00:02:48,320 --> 00:02:53,200
less progress than if I had just started

00:02:51,680 --> 00:02:55,850
small

00:02:53,200 --> 00:02:58,190
so some possible ways to help get over

00:02:55,850 --> 00:03:00,890
this panic feeling is again similar to

00:02:58,190 --> 00:03:03,200
getting over a writer's block the first

00:03:00,890 --> 00:03:06,230
one would be exercise it's a little

00:03:03,200 --> 00:03:08,390
weird of a time right now but if you can

00:03:06,230 --> 00:03:10,970
safely walk around the block you can do

00:03:08,390 --> 00:03:15,080
so you can walk around your house or

00:03:10,970 --> 00:03:17,870
apartment getting up and getting away

00:03:15,080 --> 00:03:20,510
from the screen is a great way to kind

00:03:17,870 --> 00:03:23,030
of reset your mind take a couple minutes

00:03:20,510 --> 00:03:24,500
cool off especially if you're like me

00:03:23,030 --> 00:03:27,620
and you're in that negative headspace

00:03:24,500 --> 00:03:33,320
and then start fresh come at it with a

00:03:27,620 --> 00:03:35,390
new sense of tackling a new problem and

00:03:33,320 --> 00:03:38,840
that might help that might help you get

00:03:35,390 --> 00:03:40,640
through that block switching tasks if

00:03:38,840 --> 00:03:43,610
you have a peer review that you could do

00:03:40,640 --> 00:03:45,200
or if you have that email to that client

00:03:43,610 --> 00:03:47,750
that you've been meaning to do it'll

00:03:45,200 --> 00:03:51,110
only take a couple of minutes get those

00:03:47,750 --> 00:03:53,480
easy winds out of the way that will

00:03:51,110 --> 00:03:55,700
build up the confidence again getting

00:03:53,480 --> 00:03:57,530
away from that initial problem and then

00:03:55,700 --> 00:04:02,570
coming back to it with a fresh set of

00:03:57,530 --> 00:04:04,459
eyes can always help and it's kind of

00:04:02,570 --> 00:04:07,040
similar with exercise as a change of

00:04:04,459 --> 00:04:08,420
scenery again it's a little weird time

00:04:07,040 --> 00:04:11,330
right now

00:04:08,420 --> 00:04:14,300
not everyone has 30 desks at their home

00:04:11,330 --> 00:04:17,239
but if you're at a desk maybe move to a

00:04:14,300 --> 00:04:20,480
kitchen table or a couch if if you feel

00:04:17,239 --> 00:04:26,330
comfortable doing so getting that change

00:04:20,480 --> 00:04:28,700
of scenery can again be a good way to

00:04:26,330 --> 00:04:31,130
get a fresh set of eyes on a situation

00:04:28,700 --> 00:04:33,080
it can take you out of that negative

00:04:31,130 --> 00:04:35,150
funk I know just kind of

00:04:33,080 --> 00:04:36,710
walking away from my computer even if

00:04:35,150 --> 00:04:39,710
it's closing it to move to a different

00:04:36,710 --> 00:04:43,099
spot always helps me come back at it

00:04:39,710 --> 00:04:45,169
with a fresh set of eyes setting

00:04:43,099 --> 00:04:49,280
everything to do not disturb closing

00:04:45,169 --> 00:04:52,909
your email closing slack even making a

00:04:49,280 --> 00:04:55,490
calendar reminder on your personal or

00:04:52,909 --> 00:04:59,210
work calendar just saying hey you know

00:04:55,490 --> 00:05:01,969
what from 1 to 3 p.m. I can't be reached

00:04:59,210 --> 00:05:05,030
all that email can wait I can email you

00:05:01,969 --> 00:05:08,719
back after I'm done with kind of my head

00:05:05,030 --> 00:05:10,819
down time but getting rid of those

00:05:08,719 --> 00:05:13,159
distractions might be able to help you

00:05:10,819 --> 00:05:16,009
get over that that panic feeling that

00:05:13,159 --> 00:05:18,919
you feel at first and then the one for

00:05:16,009 --> 00:05:20,870
me that I've really stuck with and has

00:05:18,919 --> 00:05:23,780
really helped me and kind of as the

00:05:20,870 --> 00:05:26,690
catalyst of this talk is progress not

00:05:23,780 --> 00:05:28,819
perfection I am definitely a

00:05:26,690 --> 00:05:33,319
perfectionist and so reminding myself

00:05:28,819 --> 00:05:35,419
that you know any step how no matter how

00:05:33,319 --> 00:05:38,569
small is still a step towards that

00:05:35,419 --> 00:05:42,560
finish line and so remembering that you

00:05:38,569 --> 00:05:45,529
know perfection almost always for me if

00:05:42,560 --> 00:05:47,479
I'm gonna try to make something perfect

00:05:45,529 --> 00:05:49,909
I'm never gonna turn it in I'm never

00:05:47,479 --> 00:05:52,250
gonna commit that code because it's

00:05:49,909 --> 00:05:54,770
never gonna be perfect in my eyes so

00:05:52,250 --> 00:05:57,020
just remembering it's about the progress

00:05:54,770 --> 00:05:59,750
that you're making and that kind of

00:05:57,020 --> 00:06:01,639
leads into test-driven development so

00:05:59,750 --> 00:06:04,190
for me test-driven development is a

00:06:01,639 --> 00:06:06,379
process of writing tests first and then

00:06:04,190 --> 00:06:09,560
following the error messages that that

00:06:06,379 --> 00:06:12,440
those tests produce and filling it in

00:06:09,560 --> 00:06:15,560
with the least amount of actual code we

00:06:12,440 --> 00:06:17,539
can to get the test to pass so for me

00:06:15,560 --> 00:06:22,099
test-driven development is a perfect

00:06:17,539 --> 00:06:25,219
progress not perfection model starting

00:06:22,099 --> 00:06:28,219
out with those tests helped kind of set

00:06:25,219 --> 00:06:30,229
me up on a path for success so we'll

00:06:28,219 --> 00:06:33,169
come back to test driven development but

00:06:30,229 --> 00:06:35,569
that is the main thing so when I am in

00:06:33,169 --> 00:06:38,330
that panic mode I kind of make a

00:06:35,569 --> 00:06:41,240
decision and say okay let's do some

00:06:38,330 --> 00:06:44,479
test-driven development so the first

00:06:41,240 --> 00:06:46,130
thing that I will go to is pseudocode so

00:06:44,479 --> 00:06:46,860
I've decided I'm going to do test-driven

00:06:46,130 --> 00:06:49,650
development

00:06:46,860 --> 00:06:52,830
and so I kind of want to get my head

00:06:49,650 --> 00:06:54,870
around the situation so pseudocode is

00:06:52,830 --> 00:06:57,659
high-level descriptions of a product or

00:06:54,870 --> 00:06:59,340
a process and therefore your eyes only

00:06:57,659 --> 00:07:03,060
so they're going to be in comments in

00:06:59,340 --> 00:07:05,490
the individual files that you set up so

00:07:03,060 --> 00:07:08,729
let's set the scene let's create an

00:07:05,490 --> 00:07:11,370
example for us so creature comforts

00:07:08,729 --> 00:07:13,080
needs a new feature so a local Humane

00:07:11,370 --> 00:07:15,030
Society has an application called

00:07:13,080 --> 00:07:16,770
creature comforts that they use to track

00:07:15,030 --> 00:07:19,199
all day animals from the day they come

00:07:16,770 --> 00:07:21,120
in through their adoption and going to

00:07:19,199 --> 00:07:23,639
their forever home part of this

00:07:21,120 --> 00:07:26,430
application is a daily task list that is

00:07:23,639 --> 00:07:29,129
generated for all of the volunteers they

00:07:26,430 --> 00:07:31,349
can see which animals need water maybe

00:07:29,129 --> 00:07:34,529
they need another Walker more playtime

00:07:31,349 --> 00:07:37,560
or getting a kennel cleaned and this is

00:07:34,529 --> 00:07:39,900
updated throughout the day they so

00:07:37,560 --> 00:07:42,120
creature or so the local humane society

00:07:39,900 --> 00:07:44,340
wants to add a feature that allows for

00:07:42,120 --> 00:07:46,590
food to be calculated and added to that

00:07:44,340 --> 00:07:48,930
daily list so they'll see you like water

00:07:46,590 --> 00:07:52,050
it needs a walk and also needs two

00:07:48,930 --> 00:07:55,529
scoops of dog food so the story card

00:07:52,050 --> 00:07:57,990
that we receive is this as an adoption

00:07:55,529 --> 00:08:00,029
center employee I want to have the daily

00:07:57,990 --> 00:08:02,310
amount of food calculated for an animal

00:08:00,029 --> 00:08:04,889
based on the animal type which in our

00:08:02,310 --> 00:08:06,419
case is dogs and cats and weight and

00:08:04,889 --> 00:08:09,569
this will be added to their daily

00:08:06,419 --> 00:08:11,669
routine list so doing an emotional

00:08:09,569 --> 00:08:13,560
check-in I'm feeling pretty good reading

00:08:11,669 --> 00:08:16,289
through that story card it kind of all

00:08:13,560 --> 00:08:18,990
seems to make sense to me they just want

00:08:16,289 --> 00:08:21,479
to generate the amount of food per

00:08:18,990 --> 00:08:26,639
animal so I'm feeling good I'm gonna

00:08:21,479 --> 00:08:29,460
open up that file and the panic starts

00:08:26,639 --> 00:08:31,650
to set in again so again we're gonna go

00:08:29,460 --> 00:08:36,149
through test-driven development and get

00:08:31,650 --> 00:08:37,979
that pseudocode set up so first again

00:08:36,149 --> 00:08:39,810
we're gonna get the pseudocode set up

00:08:37,979 --> 00:08:42,930
I'm just going to create a pseudo code

00:08:39,810 --> 00:08:44,699
RB file so I'm doing this all in Ruby

00:08:42,930 --> 00:08:47,370
you can do it in any language you want

00:08:44,699 --> 00:08:50,610
but obviously for this example we're

00:08:47,370 --> 00:08:53,130
just gonna go through Ruby and so I've

00:08:50,610 --> 00:08:56,069
created a file I've done something I've

00:08:53,130 --> 00:08:58,690
already made that step to continue on

00:08:56,069 --> 00:09:00,610
and to get to that finish line

00:08:58,690 --> 00:09:03,670
so the first thing I'm going to do is

00:09:00,610 --> 00:09:06,310
what I like to call a pseudocode dump it

00:09:03,670 --> 00:09:10,480
might just be copying and pasting that

00:09:06,310 --> 00:09:12,790
story card into the file within comments

00:09:10,480 --> 00:09:14,410
but for me what I tend to do is read

00:09:12,790 --> 00:09:17,110
through the story card and then kind of

00:09:14,410 --> 00:09:20,050
put it in my own words so what I have

00:09:17,110 --> 00:09:22,150
here is within the daily routine we need

00:09:20,050 --> 00:09:24,700
to calculate food based on the animal

00:09:22,150 --> 00:09:26,890
type and weight ten pounds is the weight

00:09:24,700 --> 00:09:28,840
threshold for both dogs and cats so I

00:09:26,890 --> 00:09:30,930
read through the story card realized I

00:09:28,840 --> 00:09:33,820
didn't have all the information I needed

00:09:30,930 --> 00:09:35,680
asked around and found that ten pounds

00:09:33,820 --> 00:09:38,020
is going to be the weight threshold that

00:09:35,680 --> 00:09:39,850
we need but luckily it's for both dogs

00:09:38,020 --> 00:09:42,940
and cats so that makes our lives a

00:09:39,850 --> 00:09:47,590
little simpler so what I have written up

00:09:42,940 --> 00:09:53,950
here is what I see the actual story card

00:09:47,590 --> 00:09:56,260
as and I'm starting to kind of get more

00:09:53,950 --> 00:09:58,660
technical so within the daily routine

00:09:56,260 --> 00:10:01,180
maybe we have a class that is daily

00:09:58,660 --> 00:10:04,450
routine maybe we need to create one we

00:10:01,180 --> 00:10:07,570
need to calculate food so there I'm kind

00:10:04,450 --> 00:10:11,260
of saying hey this might be a method and

00:10:07,570 --> 00:10:13,840
we might have instances of animal type

00:10:11,260 --> 00:10:16,930
and animal weight that we'll need to

00:10:13,840 --> 00:10:20,680
actually use that method so I'm just

00:10:16,930 --> 00:10:23,680
starting to get into a little bit of the

00:10:20,680 --> 00:10:25,540
nitty-gritty of that story so then I'm

00:10:23,680 --> 00:10:27,820
going to write some more pseudocode I

00:10:25,540 --> 00:10:30,550
really like pseudocode and you'll see

00:10:27,820 --> 00:10:33,220
that throughout this talk I'm gonna

00:10:30,550 --> 00:10:35,800
write some more focused pseudo code so

00:10:33,220 --> 00:10:38,290
that pseudocode the previous pseudocode

00:10:35,800 --> 00:10:40,210
was more general and based off of the

00:10:38,290 --> 00:10:42,720
story card and this one is gonna be more

00:10:40,210 --> 00:10:46,089
specific for what I want to do right now

00:10:42,720 --> 00:10:48,550
so I'm stripping down the pseudocode to

00:10:46,089 --> 00:10:51,040
just dogs to make things easier to

00:10:48,550 --> 00:10:55,300
swallow for me you know making those

00:10:51,040 --> 00:10:57,970
smaller goals for myself makes the story

00:10:55,300 --> 00:11:01,990
seem less daunting and I can really get

00:10:57,970 --> 00:11:05,110
to that end goal quicker and with more

00:11:01,990 --> 00:11:07,000
mental clarity and less negativity that

00:11:05,110 --> 00:11:09,950
I would have if I just tried to take the

00:11:07,000 --> 00:11:11,720
whole story card and do it all at once

00:11:09,950 --> 00:11:14,090
so for this focus pseudocode I have

00:11:11,720 --> 00:11:16,970
create a method for calculating food in

00:11:14,090 --> 00:11:18,890
the daily routine file cool so I have it

00:11:16,970 --> 00:11:21,080
more specific here I need to create a

00:11:18,890 --> 00:11:23,360
method for calculating food and it'll

00:11:21,080 --> 00:11:25,250
live in the daily routine file I'm gonna

00:11:23,360 --> 00:11:27,470
start with dogs I'm going to start with

00:11:25,250 --> 00:11:29,060
dogs over ten pounds and then once all

00:11:27,470 --> 00:11:31,910
those tests are passing I'm gonna add

00:11:29,060 --> 00:11:34,340
the dogs under ten pounds so again I'm

00:11:31,910 --> 00:11:39,290
just taking small little bites out of

00:11:34,340 --> 00:11:42,860
the story and we'll see as we go through

00:11:39,290 --> 00:11:46,280
this my process and the actual coding

00:11:42,860 --> 00:11:50,210
will speed up so as I take these small

00:11:46,280 --> 00:11:53,240
bits I'm learning as I go and it'll just

00:11:50,210 --> 00:11:55,520
be easier in the end so then I'm going

00:11:53,240 --> 00:11:58,010
to write some more pseudocode I'm gonna

00:11:55,520 --> 00:12:00,980
write some structured pseudocode so this

00:11:58,010 --> 00:12:03,140
is the more technical end of things so

00:12:00,980 --> 00:12:05,810
within the routine class I put a

00:12:03,140 --> 00:12:08,060
question mark I'm not sure yet

00:12:05,810 --> 00:12:09,920
we'll find out so we're gonna do dogs

00:12:08,060 --> 00:12:11,900
only right now and we'll have the

00:12:09,920 --> 00:12:14,240
calculate food method and we're gonna

00:12:11,900 --> 00:12:17,300
need an animal type and an animal weight

00:12:14,240 --> 00:12:19,460
in order to calculate how much food

00:12:17,300 --> 00:12:21,560
we're going to need and then I also put

00:12:19,460 --> 00:12:23,570
a little note to myself over ten pound

00:12:21,560 --> 00:12:25,280
animals are gonna get two scoops under

00:12:23,570 --> 00:12:28,790
ten pound animals are gonna get one

00:12:25,280 --> 00:12:30,550
scoop so looking at this I create

00:12:28,790 --> 00:12:33,350
another question for the Humane Society

00:12:30,550 --> 00:12:35,540
do we need to specify if it's dogs or

00:12:33,350 --> 00:12:39,110
cats or can we just say two scoops of

00:12:35,540 --> 00:12:41,150
food and they request that we specify

00:12:39,110 --> 00:12:44,210
the animal so we are going to need to go

00:12:41,150 --> 00:12:47,060
through dogs and cats over ten pound

00:12:44,210 --> 00:12:49,760
dogs get two scoops of dog food under

00:12:47,060 --> 00:12:53,180
ten pound cats get one scoop of cat food

00:12:49,760 --> 00:12:55,580
so we need to be specific on that so an

00:12:53,180 --> 00:12:57,740
emotional check-in I'm I'm feeling okay

00:12:55,580 --> 00:13:01,220
you know I have something in the files

00:12:57,740 --> 00:13:04,550
yes it's comments that only I myself am

00:13:01,220 --> 00:13:07,190
going to read but it's a start I have a

00:13:04,550 --> 00:13:10,190
little bit of a mental checklist of what

00:13:07,190 --> 00:13:11,510
I need to get doing and so that's when

00:13:10,190 --> 00:13:13,340
our spec comes in

00:13:11,510 --> 00:13:16,550
so our spec is a testing language

00:13:13,340 --> 00:13:18,320
written in Ruby for Ruby testing it's

00:13:16,550 --> 00:13:21,110
designed with test-driven development in

00:13:18,320 --> 00:13:23,180
mind and there are several blocks that

00:13:21,110 --> 00:13:25,820
we can use to set up our code

00:13:23,180 --> 00:13:28,850
and it's going to end up looking a lot

00:13:25,820 --> 00:13:31,910
like a conversation and it's gonna be a

00:13:28,850 --> 00:13:33,950
really nice sentence structure so it's

00:13:31,910 --> 00:13:36,620
easy to keep track of where we are

00:13:33,950 --> 00:13:39,410
within the tests what tests were

00:13:36,620 --> 00:13:42,500
actually running and what our output

00:13:39,410 --> 00:13:44,840
needs to be so with the blocks in mind

00:13:42,500 --> 00:13:47,420
we're gonna go through those so first we

00:13:44,840 --> 00:13:50,780
have the describe blocks describe blocks

00:13:47,420 --> 00:13:53,000
are used for a class or a method I like

00:13:50,780 --> 00:13:54,320
the routine creator or the calculate

00:13:53,000 --> 00:13:57,140
food method that we're going to

00:13:54,320 --> 00:13:59,980
eventually write and I like to think of

00:13:57,140 --> 00:14:02,810
our spec tests as kind of an upside down

00:13:59,980 --> 00:14:05,000
triangle so the describe blocks are

00:14:02,810 --> 00:14:07,700
going to be the widest part of that

00:14:05,000 --> 00:14:10,790
triangle it's really general you know

00:14:07,700 --> 00:14:13,460
routine creator class can have so much

00:14:10,790 --> 00:14:15,890
within it and same with the calculate

00:14:13,460 --> 00:14:18,590
food method yes it is more specific in

00:14:15,890 --> 00:14:22,160
terms of calculating food but it's still

00:14:18,590 --> 00:14:25,190
kind of a general descriptor of what

00:14:22,160 --> 00:14:27,170
we're going to be doing inside so I'm

00:14:25,190 --> 00:14:29,870
going to set up the routine creator spec

00:14:27,170 --> 00:14:32,570
file and I'm going to describe routine

00:14:29,870 --> 00:14:35,090
creator and then I'm also going to add a

00:14:32,570 --> 00:14:37,370
let so this is adding a new instance of

00:14:35,090 --> 00:14:39,470
the class in order for the test to have

00:14:37,370 --> 00:14:41,990
access to the methods and variables that

00:14:39,470 --> 00:14:43,820
we're going to be adding later on so I

00:14:41,990 --> 00:14:46,400
know I'm going to need animal type an

00:14:43,820 --> 00:14:49,670
animal weight so I'm going to add them

00:14:46,400 --> 00:14:51,830
into that let newing up that routine

00:14:49,670 --> 00:14:54,380
Creator class and adding in those

00:14:51,830 --> 00:14:56,030
variables and then also underneath I'm

00:14:54,380 --> 00:14:57,620
going to describe the calculate food

00:14:56,030 --> 00:14:59,930
method I know we're gonna need that

00:14:57,620 --> 00:15:01,640
that's part of the story card and part

00:14:59,930 --> 00:15:05,210
of my focus pseudocode that i wrote out

00:15:01,640 --> 00:15:08,840
so i'm just gonna set both of those

00:15:05,210 --> 00:15:12,500
describes so the next thing we have is

00:15:08,840 --> 00:15:16,160
content context blocks so context blocks

00:15:12,500 --> 00:15:19,010
are describing the context for which the

00:15:16,160 --> 00:15:20,690
describe blocks are being used that's a

00:15:19,010 --> 00:15:23,900
little confusing

00:15:20,690 --> 00:15:26,240
I like to think of again the upside-down

00:15:23,900 --> 00:15:29,780
triangle so we have our describe blocks

00:15:26,240 --> 00:15:32,510
very general the class or method and

00:15:29,780 --> 00:15:33,209
then our context blocks are a little bit

00:15:32,510 --> 00:15:35,759
more

00:15:33,209 --> 00:15:39,679
civics so in our case under the describe

00:15:35,759 --> 00:15:43,769
of routine creator and the describe of

00:15:39,679 --> 00:15:46,470
the calculate food method so when the

00:15:43,769 --> 00:15:48,660
animal type is a dog that's our context

00:15:46,470 --> 00:15:50,670
so under the calculate food we need to

00:15:48,660 --> 00:15:53,459
make sure this animal type is a dog and

00:15:50,670 --> 00:15:55,679
then within that dog we need to make

00:15:53,459 --> 00:15:58,589
sure that the weight threshold is being

00:15:55,679 --> 00:16:00,179
met so we're having two contexts when

00:15:58,589 --> 00:16:03,179
the animal type is a dog and then

00:16:00,179 --> 00:16:05,879
underneath that context of the animal

00:16:03,179 --> 00:16:08,850
type we have the animal weight check so

00:16:05,879 --> 00:16:12,749
and weighs over ten pounds so if we look

00:16:08,850 --> 00:16:15,720
at this altogether it's sort of starting

00:16:12,749 --> 00:16:17,730
to look like a sentence so we have the

00:16:15,720 --> 00:16:19,829
calculate food method and when the

00:16:17,730 --> 00:16:23,610
animal type is a dog and weighs over 10

00:16:19,829 --> 00:16:26,309
pounds we expect it to do something this

00:16:23,610 --> 00:16:28,499
is where it blocks come in so it blocks

00:16:26,309 --> 00:16:32,490
our laying out the specification for the

00:16:28,499 --> 00:16:35,309
contexts and it's our test cases there

00:16:32,490 --> 00:16:38,189
it's laying it out this is this is where

00:16:35,309 --> 00:16:41,459
we're gonna put code to check if our

00:16:38,189 --> 00:16:44,459
tests pass or fail so again with the

00:16:41,459 --> 00:16:47,399
upside-down triangle model we have the

00:16:44,459 --> 00:16:50,699
widest part being our describes again

00:16:47,399 --> 00:16:52,949
the methods or the class and then we

00:16:50,699 --> 00:16:55,470
have the context that adds a little bit

00:16:52,949 --> 00:16:57,389
more detail and then our it blocks are

00:16:55,470 --> 00:17:00,029
the point of the triangle it's saying

00:16:57,389 --> 00:17:02,429
this is what we're going to see so in

00:17:00,029 --> 00:17:05,850
our case we have it returns the proper

00:17:02,429 --> 00:17:08,370
amount of food pretty simple wording and

00:17:05,850 --> 00:17:10,649
again if we look at everything all in

00:17:08,370 --> 00:17:13,140
one we can kind of see that conversation

00:17:10,649 --> 00:17:15,270
happening so the calculate food method

00:17:13,140 --> 00:17:18,630
when animal type is a dog and it weighs

00:17:15,270 --> 00:17:21,299
over 10 pounds it returns the proper

00:17:18,630 --> 00:17:22,679
amount of food so we're gonna run the

00:17:21,299 --> 00:17:25,949
test I think we have a pretty good

00:17:22,679 --> 00:17:28,649
skeleton setup with the describe the

00:17:25,949 --> 00:17:30,360
context and the it's we're just gonna

00:17:28,649 --> 00:17:33,720
run it and see where we're at

00:17:30,360 --> 00:17:36,480
and our tests fail with the error

00:17:33,720 --> 00:17:39,600
message uninitialized constant routine

00:17:36,480 --> 00:17:42,840
creator and we never required a routine

00:17:39,600 --> 00:17:45,059
creator ruby file with the actual code

00:17:42,840 --> 00:17:46,010
so we kind of need to hook that up so

00:17:45,059 --> 00:17:48,380
the next couple

00:17:46,010 --> 00:17:50,960
test failures are probably gonna involve

00:17:48,380 --> 00:17:54,470
the routine creator not fully being

00:17:50,960 --> 00:17:57,620
hooked up yet with test code and then

00:17:54,470 --> 00:17:59,210
the actual code file so an emotional

00:17:57,620 --> 00:18:01,520
check-in I'm feeling okay

00:17:59,210 --> 00:18:03,380
you know I described what I think our

00:18:01,520 --> 00:18:06,230
issues are gonna be in these next couple

00:18:03,380 --> 00:18:09,500
test runs and I know what I need to do

00:18:06,230 --> 00:18:12,230
so at the top of my spec file I'm gonna

00:18:09,500 --> 00:18:13,790
just require a routine creator file I

00:18:12,230 --> 00:18:15,530
know that eventually we're gonna need

00:18:13,790 --> 00:18:18,710
that and again with test-driven

00:18:15,530 --> 00:18:22,160
development we're writing as little code

00:18:18,710 --> 00:18:25,010
as possible in order for the test to

00:18:22,160 --> 00:18:27,470
pass in order for to get a new error

00:18:25,010 --> 00:18:30,590
message so now I'm gonna run the test

00:18:27,470 --> 00:18:33,170
again okay test fail again but it's a

00:18:30,590 --> 00:18:35,840
different error message cannot load such

00:18:33,170 --> 00:18:38,060
file routine creator yeah because I

00:18:35,840 --> 00:18:40,030
haven't created one perfect I know what

00:18:38,060 --> 00:18:43,010
I need to do next I'm going to rotate

00:18:40,030 --> 00:18:45,200
recreate a routine creator Ruby file and

00:18:43,010 --> 00:18:47,660
I'm just creating a blank file

00:18:45,200 --> 00:18:49,310
I'm not putting in anything in there I

00:18:47,660 --> 00:18:51,730
just want to make sure that error

00:18:49,310 --> 00:18:54,430
message goes away and we get a new one

00:18:51,730 --> 00:18:57,830
so I'm gonna run the tests again and

00:18:54,430 --> 00:19:00,170
again the tests fail with another

00:18:57,830 --> 00:19:02,330
message that's similar to the first one

00:19:00,170 --> 00:19:05,030
we got an initialized constant routine

00:19:02,330 --> 00:19:08,540
creator so I know I required that

00:19:05,030 --> 00:19:10,880
routine creator in the tests so I know

00:19:08,540 --> 00:19:14,210
that it needs to be in the actual Ruby

00:19:10,880 --> 00:19:17,270
file so I go in and I create a class of

00:19:14,210 --> 00:19:20,120
routine creator I'm gonna run the tests

00:19:17,270 --> 00:19:22,850
again and again I get another failure

00:19:20,120 --> 00:19:23,840
seeing test failures is is not awesome

00:19:22,850 --> 00:19:25,880
feeling

00:19:23,840 --> 00:19:28,340
but with test-driven development I know

00:19:25,880 --> 00:19:30,650
this is what I need I'm getting new test

00:19:28,340 --> 00:19:32,600
failures every time and new error

00:19:30,650 --> 00:19:36,020
messages so I know I'm making progress

00:19:32,600 --> 00:19:38,030
and this one is saying we have the wrong

00:19:36,020 --> 00:19:41,090
number of arguments given we've been

00:19:38,030 --> 00:19:44,090
given two in our test but we only expect

00:19:41,090 --> 00:19:48,020
a zero and so looking back at our tests

00:19:44,090 --> 00:19:50,810
we let that routine Creator we nude up a

00:19:48,020 --> 00:19:53,450
new teen creator class and we passed in

00:19:50,810 --> 00:19:57,710
variables of animal type and animal

00:19:53,450 --> 00:19:59,450
weight okay I'm feeling good I know what

00:19:57,710 --> 00:20:02,870
I need to do I just need to

00:19:59,450 --> 00:20:05,720
initialize those variables in my actual

00:20:02,870 --> 00:20:08,090
Ruby code so I'm going in and I'm gonna

00:20:05,720 --> 00:20:09,919
create an initialize method I'm gonna

00:20:08,090 --> 00:20:14,299
pass in an animal type an animal weight

00:20:09,919 --> 00:20:16,669
and I'm gonna set those up and I'm gonna

00:20:14,299 --> 00:20:20,179
run the tests one more time and the

00:20:16,669 --> 00:20:23,389
tests pass I've made progress the

00:20:20,179 --> 00:20:26,330
skeleton is set I'm feeling good

00:20:23,389 --> 00:20:28,909
the harder part of like actually setting

00:20:26,330 --> 00:20:31,460
up a test is coming but you know what

00:20:28,909 --> 00:20:34,669
getting that skeleton set up is huge

00:20:31,460 --> 00:20:37,549
progress so now we're going to the

00:20:34,669 --> 00:20:40,490
expect this is within the test file

00:20:37,549 --> 00:20:43,880
again and this is stating what you'd

00:20:40,490 --> 00:20:45,950
expect the tests to receive or equal so

00:20:43,880 --> 00:20:48,409
in our case we're returning the proper

00:20:45,950 --> 00:20:50,659
amount of food and what add what is that

00:20:48,409 --> 00:20:52,700
proper amount of food we're expecting

00:20:50,659 --> 00:20:55,419
the routine Creator dot calculate food

00:20:52,700 --> 00:20:58,580
method to equal two scoops of dog food

00:20:55,419 --> 00:21:00,200
we're gonna run the tests and the tests

00:20:58,580 --> 00:21:02,330
are gonna fail but that's okay we

00:21:00,200 --> 00:21:05,029
expected that undefined method calculate

00:21:02,330 --> 00:21:08,059
food we never set up that method in our

00:21:05,029 --> 00:21:10,659
actual Ruby file so I'm going in and

00:21:08,059 --> 00:21:14,510
setting up the calculate food method and

00:21:10,659 --> 00:21:18,230
again I'm gonna run that test and the

00:21:14,510 --> 00:21:20,330
tests fail again they expect calculate

00:21:18,230 --> 00:21:23,990
food to equal two scoops of dog food and

00:21:20,330 --> 00:21:25,850
we got nil which makes sense here's a

00:21:23,990 --> 00:21:28,279
positive we've made it through the test

00:21:25,850 --> 00:21:30,590
file it's testing that expect it's

00:21:28,279 --> 00:21:33,289
seeing that so we've gotten through all

00:21:30,590 --> 00:21:34,940
the layers of our test file and I'm

00:21:33,289 --> 00:21:37,549
feeling good that everything is running

00:21:34,940 --> 00:21:39,529
the way that it should and I know what I

00:21:37,549 --> 00:21:42,470
need to do I just need to add the

00:21:39,529 --> 00:21:45,080
minimum amount of code in order for that

00:21:42,470 --> 00:21:48,440
test to pass so all I'm going to do is

00:21:45,080 --> 00:21:50,659
return two scoops of dog food I'm gonna

00:21:48,440 --> 00:21:54,470
run the test again and they pass and

00:21:50,659 --> 00:21:57,049
this is committable code and I'm feeling

00:21:54,470 --> 00:21:59,299
great I've made great progress that I

00:21:57,049 --> 00:22:03,230
can use for the other test cases coming

00:21:59,299 --> 00:22:05,179
up so I have added the describe I've set

00:22:03,230 --> 00:22:07,460
up the routine Creator class with the

00:22:05,179 --> 00:22:09,500
calculate food method and I've checked

00:22:07,460 --> 00:22:11,480
if an animal type is a dog and weighs

00:22:09,500 --> 00:22:11,980
over ten pounds it's going to return the

00:22:11,480 --> 00:22:14,890
proper

00:22:11,980 --> 00:22:16,960
amount of food what that returns is two

00:22:14,890 --> 00:22:20,440
scoops of dog food and then in our

00:22:16,960 --> 00:22:22,270
actual Ruby code I have my animal type

00:22:20,440 --> 00:22:24,760
an animal weight initialized and the

00:22:22,270 --> 00:22:25,870
calculate food method is returning two

00:22:24,760 --> 00:22:28,450
scoops of dog food

00:22:25,870 --> 00:22:31,059
I've got completed tests that are

00:22:28,450 --> 00:22:33,580
passing and I'm past that blank page

00:22:31,059 --> 00:22:37,030
panic I'm feeling way more confident a

00:22:33,580 --> 00:22:39,760
lot less negative and I feel like I can

00:22:37,030 --> 00:22:43,360
continue forward so I'm gonna go back to

00:22:39,760 --> 00:22:45,070
my pseudocode we've done a ton we've

00:22:43,360 --> 00:22:48,370
done a ton of that first chunk that I

00:22:45,070 --> 00:22:51,190
set out for myself so all we have to do

00:22:48,370 --> 00:22:54,730
now is once the dog tests are passing

00:22:51,190 --> 00:22:57,280
for over ten pounds which they are we're

00:22:54,730 --> 00:22:59,830
gonna go ahead and add dogs under ten

00:22:57,280 --> 00:23:01,450
pounds so again I'm just gonna take a

00:22:59,830 --> 00:23:03,610
look at my structured pseudocode

00:23:01,450 --> 00:23:05,650
okay so within the routine class we're

00:23:03,610 --> 00:23:07,240
already set up there calculate food

00:23:05,650 --> 00:23:09,850
needs animal weight and animal type

00:23:07,240 --> 00:23:13,330
again we're set up we have access to

00:23:09,850 --> 00:23:15,880
those variables so for over 10 pounds we

00:23:13,330 --> 00:23:17,950
need two scoops of dog food got that so

00:23:15,880 --> 00:23:20,980
now under 10 pounds we're going to

00:23:17,950 --> 00:23:26,590
expect our tests to return one scoop of

00:23:20,980 --> 00:23:30,040
dog food so going to our tests we're

00:23:26,590 --> 00:23:31,750
gonna set it up just like we set up and

00:23:30,040 --> 00:23:33,910
weighs over 10 pounds but we're gonna

00:23:31,750 --> 00:23:36,610
have a context that says an weighs under

00:23:33,910 --> 00:23:39,340
10 pounds again we're gonna set the

00:23:36,610 --> 00:23:41,440
animal weight to 8 pounds just so for

00:23:39,340 --> 00:23:44,110
testing purposes and we're gonna create

00:23:41,440 --> 00:23:46,030
our it it's the same as over 10 pounds

00:23:44,110 --> 00:23:48,760
it's going to return the proper amount

00:23:46,030 --> 00:23:51,429
of food then we're gonna add our expect

00:23:48,760 --> 00:23:53,799
ok we expect the routine create or

00:23:51,429 --> 00:23:56,320
calculate food method to equal one scoop

00:23:53,799 --> 00:23:57,910
of dog food we're gonna run the tests I

00:23:56,320 --> 00:24:00,070
think they're gonna fail because we

00:23:57,910 --> 00:24:03,700
haven't added anything into the actual

00:24:00,070 --> 00:24:07,299
Ruby file and they do we expected this

00:24:03,700 --> 00:24:09,370
error we we expected calculate food to

00:24:07,299 --> 00:24:12,100
equal one scoop of dog food when the dog

00:24:09,370 --> 00:24:14,290
is under 10 pounds and we got to scoop

00:24:12,100 --> 00:24:17,799
as of dog food and that's because we

00:24:14,290 --> 00:24:19,960
just added this one return of two scoops

00:24:17,799 --> 00:24:22,080
of dog food so of course it's always

00:24:19,960 --> 00:24:26,130
going to return two scoops

00:24:22,080 --> 00:24:32,700
so we go back in and we just add an

00:24:26,130 --> 00:24:35,039
if-else so I am saying if animal wait is

00:24:32,700 --> 00:24:37,440
over or equal to ten pounds we're gonna

00:24:35,039 --> 00:24:39,830
return two scoops of dog food otherwise

00:24:37,440 --> 00:24:44,190
we're gonna return one scoop of dog food

00:24:39,830 --> 00:24:46,200
I'm not a huge fan of if-else nesting

00:24:44,190 --> 00:24:49,850
and we're probably gonna see more of

00:24:46,200 --> 00:24:53,120
that within this example but always know

00:24:49,850 --> 00:24:56,279
with test-driven development it is about

00:24:53,120 --> 00:24:58,950
creating the minimum amount of work to

00:24:56,279 --> 00:25:01,590
get those tests to pass and get new

00:24:58,950 --> 00:25:03,929
error messages going so I can always

00:25:01,590 --> 00:25:08,279
come back and refactor and change

00:25:03,929 --> 00:25:10,529
something how I want but right now this

00:25:08,279 --> 00:25:13,740
is the fastest way that I know to get

00:25:10,529 --> 00:25:16,559
these tests to potentially pass so we're

00:25:13,740 --> 00:25:19,620
gonna run the tests and the tests pass

00:25:16,559 --> 00:25:23,220
and again we have committable code we

00:25:19,620 --> 00:25:25,019
now have all of the dogs done we have

00:25:23,220 --> 00:25:27,419
dogs over ten pounds and under ten

00:25:25,019 --> 00:25:30,630
pounds accounted for we've got the right

00:25:27,419 --> 00:25:34,019
output in food that we can later on add

00:25:30,630 --> 00:25:38,700
to the routine list dogs are done I'm

00:25:34,019 --> 00:25:41,940
feeling great I am kind of seeing where

00:25:38,700 --> 00:25:45,299
I'm gonna go I know that my progress is

00:25:41,940 --> 00:25:49,350
gonna speed up as well because next I'm

00:25:45,299 --> 00:25:52,620
assuming is gonna be cats and it's gonna

00:25:49,350 --> 00:25:54,210
be really similar to the dogs so I'm

00:25:52,620 --> 00:25:57,450
gonna take a look a look back at my

00:25:54,210 --> 00:25:59,460
story card and we want to have the daily

00:25:57,450 --> 00:26:01,590
amount of food calculated for an animal

00:25:59,460 --> 00:26:04,710
based on animal type dogs and cats and

00:26:01,590 --> 00:26:08,279
weight okay great so I'm over halfway

00:26:04,710 --> 00:26:10,260
done with this story in my mind so I'm

00:26:08,279 --> 00:26:12,029
gonna go back to my focus pseudocode and

00:26:10,260 --> 00:26:14,639
the focus pseudocode that I had before

00:26:12,029 --> 00:26:19,529
is completely finished so I'm gonna add

00:26:14,639 --> 00:26:22,019
some new pseudocode again I'm gonna I

00:26:19,529 --> 00:26:24,299
can tell that my progress is going to

00:26:22,019 --> 00:26:26,039
speed up now since a lot of what is left

00:26:24,299 --> 00:26:29,730
is similar to what we've done with the

00:26:26,039 --> 00:26:32,940
dogs so first I want to refactor dogs to

00:26:29,730 --> 00:26:35,170
include the animal type and then move on

00:26:32,940 --> 00:26:37,150
to cats I'm going to start with the cats

00:26:35,170 --> 00:26:38,710
for ten pounds and then once passing I'm

00:26:37,150 --> 00:26:42,000
going to add the cats under ten pounds

00:26:38,710 --> 00:26:48,700
this all sounds very similar to the dogs

00:26:42,000 --> 00:26:51,280
so refactoring I know I'll need to now

00:26:48,700 --> 00:26:54,010
start factoring in the animal type since

00:26:51,280 --> 00:26:57,100
we're dealing with both dogs and cats so

00:26:54,010 --> 00:26:59,560
I'm gonna go in and refactor so within

00:26:57,100 --> 00:27:02,620
the Ruby file again it's a lot of

00:26:59,560 --> 00:27:04,870
if-else nesting so if the animal weight

00:27:02,620 --> 00:27:06,730
is over equal to ten pounds and the

00:27:04,870 --> 00:27:09,910
animal type is a dog we're gonna return

00:27:06,730 --> 00:27:12,250
two scoops of dog food or if the animal

00:27:09,910 --> 00:27:13,930
weight is under ten pounds and the

00:27:12,250 --> 00:27:16,810
animal type is equals to dog we're gonna

00:27:13,930 --> 00:27:19,720
return one scoop of dog food so looking

00:27:16,810 --> 00:27:22,530
at this there's some repetition so

00:27:19,720 --> 00:27:24,760
animal type equaling dog is the same

00:27:22,530 --> 00:27:28,360
among both of them so I'm going to

00:27:24,760 --> 00:27:31,090
refactor some even more and again we're

00:27:28,360 --> 00:27:33,760
nesting even more that in the if-else

00:27:31,090 --> 00:27:37,090
and I can always refer this later I know

00:27:33,760 --> 00:27:39,310
there's simpler ways maybe pulling

00:27:37,090 --> 00:27:43,270
things out into more methods could be a

00:27:39,310 --> 00:27:46,600
way to go but right now I think this is

00:27:43,270 --> 00:27:50,440
a good starting point we can plug our

00:27:46,600 --> 00:27:53,200
cat checks in here and I think we can

00:27:50,440 --> 00:27:56,350
make some progress so I feel good about

00:27:53,200 --> 00:27:57,670
this refactoring we're gonna run the

00:27:56,350 --> 00:28:00,040
test and make sure I didn't break

00:27:57,670 --> 00:28:02,380
anything in the refractor and the tests

00:28:00,040 --> 00:28:05,080
pass so I'm gonna commit that code again

00:28:02,380 --> 00:28:07,690
and I've got the first chunk of our

00:28:05,080 --> 00:28:10,030
focus pseudocode taken care of so we're

00:28:07,690 --> 00:28:12,430
gonna move on to the cats so we're gonna

00:28:10,030 --> 00:28:15,300
start with cats over ten pounds okay

00:28:12,430 --> 00:28:20,650
this is going to be really similar to

00:28:15,300 --> 00:28:23,530
our dogs so I'm adding a context of type

00:28:20,650 --> 00:28:25,420
cat if the animal type is a cat and

00:28:23,530 --> 00:28:27,820
weighs over ten pounds it's going to

00:28:25,420 --> 00:28:30,130
return the proper amount of food which

00:28:27,820 --> 00:28:32,620
we expect to be two scoops of cat food

00:28:30,130 --> 00:28:34,390
I'm gonna run the tests I'm going to

00:28:32,620 --> 00:28:37,300
expect that it fails because we didn't

00:28:34,390 --> 00:28:40,390
add anything to a ruby file yet we're

00:28:37,300 --> 00:28:43,390
gonna let the test the errormsgs kind of

00:28:40,390 --> 00:28:46,000
guide us on what to add and the tests

00:28:43,390 --> 00:28:47,850
fail we expected the calculate food

00:28:46,000 --> 00:28:50,760
method to equal two scoops of cat

00:28:47,850 --> 00:28:53,490
but it got nil so we're just gonna add

00:28:50,760 --> 00:28:55,679
that information in we're gonna add the

00:28:53,490 --> 00:28:58,110
check of if the animal type is a cat and

00:28:55,679 --> 00:28:59,970
the animal wait is over equal to ten

00:28:58,110 --> 00:29:02,910
pounds it's going to return two scoops

00:28:59,970 --> 00:29:06,000
of cat food we're gonna run that test

00:29:02,910 --> 00:29:09,210
one more time and the tests pass again

00:29:06,000 --> 00:29:11,970
we can commit that code feeling good so

00:29:09,210 --> 00:29:18,059
now we're gonna add in the cats under 10

00:29:11,970 --> 00:29:20,610
pounds so we add that context weighs

00:29:18,059 --> 00:29:23,070
under 10 pounds we set the animal weight

00:29:20,610 --> 00:29:24,659
to 8 pounds and then we're going to

00:29:23,070 --> 00:29:27,090
return the proper amount of food which

00:29:24,659 --> 00:29:29,549
is one scoop of cat food we're gonna run

00:29:27,090 --> 00:29:33,000
that test again I'm expecting that the

00:29:29,549 --> 00:29:34,679
tests are gonna fail and they do they

00:29:33,000 --> 00:29:37,559
expected one scoop of cat food and

00:29:34,679 --> 00:29:41,220
gotten nil so we're gonna go back into

00:29:37,559 --> 00:29:44,220
the Ruby file add in that else return

00:29:41,220 --> 00:29:46,710
one scoop of cat food again as a little

00:29:44,220 --> 00:29:49,770
code as we can to make this test pass or

00:29:46,710 --> 00:29:52,470
get a new error message we're gonna run

00:29:49,770 --> 00:29:55,860
the test and the test pass again and

00:29:52,470 --> 00:29:59,490
just like that in a matter of minutes of

00:29:55,860 --> 00:30:04,140
work our focus pseudocode our second

00:29:59,490 --> 00:30:08,280
iteration is done so I'm feeling great

00:30:04,140 --> 00:30:11,280
I've completed most of this story I have

00:30:08,280 --> 00:30:14,159
my routine creator spec file looking

00:30:11,280 --> 00:30:16,590
pretty full we're checking for animal

00:30:14,159 --> 00:30:17,940
type of dog and weighs over 10 pounds is

00:30:16,590 --> 00:30:20,880
going to return the proper amount of

00:30:17,940 --> 00:30:22,860
food we're checking when animal type is

00:30:20,880 --> 00:30:25,200
cat and weighs over 10 pounds or under

00:30:22,860 --> 00:30:27,809
10 pounds it's going to return the

00:30:25,200 --> 00:30:30,390
proper amount of food and then I have

00:30:27,809 --> 00:30:32,280
this Ruby file setup and I have the

00:30:30,390 --> 00:30:35,190
confidence knowing that these tests are

00:30:32,280 --> 00:30:38,039
passing I have some solid code and I

00:30:35,190 --> 00:30:40,710
know now I can go in and refactor this

00:30:38,039 --> 00:30:43,230
code again kind of what I explained

00:30:40,710 --> 00:30:45,450
earlier I can break some of these out

00:30:43,230 --> 00:30:49,110
into different methods if I want and

00:30:45,450 --> 00:30:52,350
find ways to simplify what I have and

00:30:49,110 --> 00:30:54,900
knowing that I have solid tests in the

00:30:52,350 --> 00:30:58,140
background that I can make these changes

00:30:54,900 --> 00:31:00,059
and then feel confident running the

00:30:58,140 --> 00:31:02,790
tests knowing that it's going to check

00:31:00,059 --> 00:31:07,050
for all of these variable

00:31:02,790 --> 00:31:09,660
so that's the method that I use I can

00:31:07,050 --> 00:31:13,290
then go on and add the the output into

00:31:09,660 --> 00:31:16,650
the routine creator act routine list for

00:31:13,290 --> 00:31:19,740
the volunteers but I'm feeling good I'm

00:31:16,650 --> 00:31:22,650
clearly past that panic stage and that

00:31:19,740 --> 00:31:28,050
negative negativity stage and my

00:31:22,650 --> 00:31:31,890
confidence is back I feel great

00:31:28,050 --> 00:31:34,980
so that's how I have found what has

00:31:31,890 --> 00:31:37,290
helped me to get over that panic but I'm

00:31:34,980 --> 00:31:39,870
really interested if if anything has

00:31:37,290 --> 00:31:42,240
worked for you whether it is test-driven

00:31:39,870 --> 00:31:44,610
development or not I would love to hear

00:31:42,240 --> 00:31:48,800
your feedback my twitter is at Elaine

00:31:44,610 --> 00:31:53,310
talks so feel free to tweet me DM me

00:31:48,800 --> 00:31:55,890
whatever I would love to hear the the

00:31:53,310 --> 00:31:58,520
things that you use to kind of build up

00:31:55,890 --> 00:32:03,030
that confidence get over that initial

00:31:58,520 --> 00:32:05,700
block or panic around either starting a

00:32:03,030 --> 00:32:08,310
new feature or adding something into

00:32:05,700 --> 00:32:10,950
already existing code that's already set

00:32:08,310 --> 00:32:12,810
up really well I feel like I get a

00:32:10,950 --> 00:32:14,970
little bit of impostor syndrome when

00:32:12,810 --> 00:32:17,970
looking at other people's code when I

00:32:14,970 --> 00:32:22,200
see lines of code that I'm not even sure

00:32:17,970 --> 00:32:24,930
how that functions and kind of thinking

00:32:22,200 --> 00:32:27,630
my codes gonna be next to this code so

00:32:24,930 --> 00:32:29,340
those are the steps that I take if

00:32:27,630 --> 00:32:32,940
anything has worked well for you I would

00:32:29,340 --> 00:32:35,730
love to hear it and here's a reference

00:32:32,940 --> 00:32:37,530
slide of what I've used to kind of get

00:32:35,730 --> 00:32:40,530
this talk together but most of it is

00:32:37,530 --> 00:32:42,630
personal experience and diving a little

00:32:40,530 --> 00:32:45,720
bit into the psychology of writer's

00:32:42,630 --> 00:32:47,040
block and that panic feeling and and

00:32:45,720 --> 00:32:49,410
ways to get over it

00:32:47,040 --> 00:32:51,540
thank you so much for listening and I

00:32:49,410 --> 00:32:53,370
hope you all have a wonderful day I hope

00:32:51,540 --> 00:32:55,790
you're staying safe and healthy have a

00:32:53,370 --> 00:32:55,790

YouTube URL: https://www.youtube.com/watch?v=hrZktRv1XR4


