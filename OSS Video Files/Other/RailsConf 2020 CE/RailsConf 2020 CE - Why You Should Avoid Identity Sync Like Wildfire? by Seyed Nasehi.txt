Title: RailsConf 2020 CE - Why You Should Avoid Identity Sync Like Wildfire? by Seyed Nasehi
Publication date: 2020-04-24
Playlist: RailsConf 2020 CE
Description: 
	Why You Should Avoid Identity Sync Like Wildfire? by Seyed Nasehi

When we built our single sign-on service, we learned that syncing identity changes among applications can be deceptively complex. This is because we had to iteratively deploy the SSO service while supporting our existing applications that used the service. In this talk, we discuss lessons learned and recommendations on three key identity sync problems: 1) using editable fields such as email as an ID, 2) relying on unproven promises by standards such as SCIM, and 3) split-tenant situation. This talk will help developers avoid some pitfalls while building or working with an identity service.

__________

Seyed M Nasehi is a software engineer at Cisco with a decade of software development experience. He's been building Ruby on Rails applications in the past 3 years to help customers who are using Cisco security products. His latest involvement was building a single sign-on service to be used by multiple security products within Cisco.
Captions: 
	00:00:08,840 --> 00:00:14,809
well can't they start my name is saya I

00:00:14,330 --> 00:00:18,619
work

00:00:14,809 --> 00:00:20,360
Cisco speery that's about why you should

00:00:18,619 --> 00:00:24,410
avoid Ida sink

00:00:20,360 --> 00:00:29,540
it's based on my experience building I&T

00:00:24,410 --> 00:00:32,469
services for Cisco I'm gonna give you a

00:00:29,540 --> 00:00:36,140
fictionalized version of what we learned

00:00:32,469 --> 00:00:39,320
so meet our heroes here Zoe in Chloe

00:00:36,140 --> 00:00:41,350
both devs but they live in two parallel

00:00:39,320 --> 00:00:41,350
universes

00:00:42,219 --> 00:00:49,159
they were both tasked with creating

00:00:45,190 --> 00:00:52,460
authentication services for respective

00:00:49,159 --> 00:00:56,030
companies the requirements are the same

00:00:52,460 --> 00:00:59,350
but they ended up building very

00:00:56,030 --> 00:01:05,560
different systems what start their

00:00:59,350 --> 00:01:11,150
stories started Zoe so once upon a time

00:01:05,560 --> 00:01:14,619
was a very smart developer Hedgehog

00:01:11,150 --> 00:01:18,860
called Zoe she's been working on a

00:01:14,619 --> 00:01:21,469
service called boost and that service

00:01:18,860 --> 00:01:25,640
provided hedgehogs with health and

00:01:21,469 --> 00:01:28,549
safety information it was built using

00:01:25,640 --> 00:01:32,570
Ruby on Rails customer could buy

00:01:28,549 --> 00:01:37,340
licenses to have their information there

00:01:32,570 --> 00:01:39,380
and when they license was processed her

00:01:37,340 --> 00:01:42,259
record of the business was created and

00:01:39,380 --> 00:01:45,079
then they kept could add multiple users

00:01:42,259 --> 00:01:49,990
there and the users could log in and

00:01:45,079 --> 00:01:49,990
have access to these services of boost

00:01:54,039 --> 00:02:04,359
the Zoe was a happy Hedgehog it's over

00:02:01,070 --> 00:02:08,300
time more and more customers but boost

00:02:04,359 --> 00:02:13,370
and I was an increase in income and more

00:02:08,300 --> 00:02:17,920
users but over time a portion of those

00:02:13,370 --> 00:02:22,450
users start to ask why should they have

00:02:17,920 --> 00:02:28,090
yet another password in another system

00:02:22,450 --> 00:02:30,620
so initially they needed to create an

00:02:28,090 --> 00:02:33,920
user account with their email as their

00:02:30,620 --> 00:02:38,180
user ID and save a password which was

00:02:33,920 --> 00:02:41,030
safe in the database but there are

00:02:38,180 --> 00:02:43,790
accounts elsewhere so why couldn't we

00:02:41,030 --> 00:02:49,510
use the existing accounts we had

00:02:43,790 --> 00:02:53,209
elsewhere in our companies so II decided

00:02:49,510 --> 00:02:57,310
to implement service that's called

00:02:53,209 --> 00:03:00,519
single sign-on and the way that were

00:02:57,310 --> 00:03:08,620
like this

00:03:00,519 --> 00:03:11,420
it's a boost pour it single SIA using a

00:03:08,620 --> 00:03:13,670
different Island provider the boost

00:03:11,420 --> 00:03:16,280
could be its own either the provider if

00:03:13,670 --> 00:03:18,650
the users decide to save their own

00:03:16,280 --> 00:03:22,690
password there but if they had another

00:03:18,650 --> 00:03:27,590
eidetic provider the identity provider

00:03:22,690 --> 00:03:30,620
could be registered with boost so the

00:03:27,590 --> 00:03:34,690
users started to go through the login

00:03:30,620 --> 00:03:38,829
page of boost they chose SSO login post

00:03:34,690 --> 00:03:42,819
redirected them to the registered

00:03:38,829 --> 00:03:47,389
third-party IDP but the user

00:03:42,819 --> 00:03:51,290
authenticated their the IDP returned

00:03:47,389 --> 00:03:54,769
with response the format of XML is

00:03:51,290 --> 00:03:57,639
called sam'l response and sent it to an

00:03:54,769 --> 00:04:02,599
end point of posts that was registered

00:03:57,639 --> 00:04:10,310
with the IDP which in semo language is

00:04:02,599 --> 00:04:14,690
called the ACS so that end point trance

00:04:10,310 --> 00:04:19,030
would process the summer response and if

00:04:14,690 --> 00:04:22,160
the sam'l response was valid they would

00:04:19,030 --> 00:04:25,479
predict user to the main page of post

00:04:22,160 --> 00:04:25,479
because they logged in

00:04:30,240 --> 00:04:42,520
this was very successful but there are

00:04:35,740 --> 00:04:46,270
more products or services under the main

00:04:42,520 --> 00:04:51,360
company that impose the top manager they

00:04:46,270 --> 00:04:54,730
were deciding that they had something a

00:04:51,360 --> 00:04:57,820
similar issue because each of those

00:04:54,730 --> 00:05:01,570
services they had their own user and

00:04:57,820 --> 00:05:04,540
passwords and users they needed to have

00:05:01,570 --> 00:05:09,490
separate logins and passwords and

00:05:04,540 --> 00:05:13,060
different services they thought why do

00:05:09,490 --> 00:05:16,330
they have to do this when they can

00:05:13,060 --> 00:05:19,000
actually have a centralized place for

00:05:16,330 --> 00:05:24,460
authentication Zoe was tasked to create

00:05:19,000 --> 00:05:26,380
such a service so the new service would

00:05:24,460 --> 00:05:30,040
be done in the provider to multiple

00:05:26,380 --> 00:05:37,750
products or services which are called

00:05:30,040 --> 00:05:42,510
service providers so what Zoe decided to

00:05:37,750 --> 00:05:49,750
do was to start with the existing logic

00:05:42,510 --> 00:05:53,010
that exists in boost she decide to

00:05:49,750 --> 00:05:58,200
extract all that logic out and to a new

00:05:53,010 --> 00:05:58,200
application which called boost awesome

00:05:58,920 --> 00:06:12,690
so our two main models are in boost the

00:06:06,610 --> 00:06:15,580
user email as their username and they're

00:06:12,690 --> 00:06:21,030
encoded password and they belong to a

00:06:15,580 --> 00:06:26,280
business but so he decided that she

00:06:21,030 --> 00:06:28,630
wanted to have separate or new database

00:06:26,280 --> 00:06:32,470
but she didn't like the way that

00:06:28,630 --> 00:06:35,470
passwords were encoded in boost she

00:06:32,470 --> 00:06:40,200
wanted to use a new encoding scheme

00:06:35,470 --> 00:06:40,200
called Hedgehog creep to

00:06:41,160 --> 00:06:46,300
since the passwords were encrypted

00:06:43,810 --> 00:06:49,210
inside booth she couldn't actually read

00:06:46,300 --> 00:06:55,060
them back so what she decided to do was

00:06:49,210 --> 00:06:58,000
to have new system access to both

00:06:55,060 --> 00:07:02,170
databases but she kept the models from

00:06:58,000 --> 00:07:03,670
boosting and she created new models for

00:07:02,170 --> 00:07:06,550
the new database called boost off

00:07:03,670 --> 00:07:08,740
database and you know it's a rails

00:07:06,550 --> 00:07:12,480
application you can have the same model

00:07:08,740 --> 00:07:17,590
names so you should decided to name the

00:07:12,480 --> 00:07:22,480
new users for the new database as

00:07:17,590 --> 00:07:26,710
Hedgehog and what's represented as

00:07:22,480 --> 00:07:30,120
business in boost as organization so

00:07:26,710 --> 00:07:33,790
what happened was when a user logged in

00:07:30,120 --> 00:07:35,860
through boost arts for the first time if

00:07:33,790 --> 00:07:40,120
they had a record in boost database

00:07:35,860 --> 00:07:44,950
they're authenticated against that but

00:07:40,120 --> 00:07:47,320
at that point boost I've had the non

00:07:44,950 --> 00:07:49,660
encrypted password so they could

00:07:47,320 --> 00:07:52,150
actually save it in the new database as

00:07:49,660 --> 00:07:57,520
well the new record was created the same

00:07:52,150 --> 00:07:59,560
email same UID same password and also an

00:07:57,520 --> 00:08:01,210
organization was created so there's a

00:07:59,560 --> 00:08:03,430
one-to-one relationship between a

00:08:01,210 --> 00:08:10,780
hedgehog and user and organization and

00:08:03,430 --> 00:08:14,830
business so that was the initial thing

00:08:10,780 --> 00:08:16,650
but that wasn't the plan for the long

00:08:14,830 --> 00:08:21,820
term

00:08:16,650 --> 00:08:25,750
Zoe wanted to actually separate the new

00:08:21,820 --> 00:08:31,330
application from the old database but to

00:08:25,750 --> 00:08:33,760
do that she needed to create some

00:08:31,330 --> 00:08:40,390
services for boost because boost still

00:08:33,760 --> 00:08:43,980
had its own pages to manage users as I

00:08:40,390 --> 00:08:47,740
started to go through different options

00:08:43,980 --> 00:08:53,220
and one of the option that she looked

00:08:47,740 --> 00:08:53,220
into deeply was standard called skim

00:08:53,410 --> 00:09:03,010
which stands for system for cross-domain

00:08:56,760 --> 00:09:08,200
identity management had multiple RFC's

00:09:03,010 --> 00:09:11,820
and she started some famous website

00:09:08,200 --> 00:09:15,640
started to implement some of that and

00:09:11,820 --> 00:09:20,410
support it so she decided that's a good

00:09:15,640 --> 00:09:26,950
start because that was a standard so

00:09:20,410 --> 00:09:32,860
what scheme provides to us few models

00:09:26,950 --> 00:09:40,380
and few operations so the basic models

00:09:32,860 --> 00:09:44,580
are user and groups and operations are

00:09:40,380 --> 00:09:48,880
base crowd operations

00:09:44,580 --> 00:09:53,020
it also uses JSON representation for

00:09:48,880 --> 00:09:55,500
both resources and the operation

00:09:53,020 --> 00:09:55,500
endpoint

00:09:57,600 --> 00:10:05,530
Zoe started to look to see if there were

00:10:00,940 --> 00:10:08,980
some implementations for that but no no

00:10:05,530 --> 00:10:12,220
Ruby implementation she was starving

00:10:08,980 --> 00:10:17,410
opor she was like okay I'm gonna build

00:10:12,220 --> 00:10:24,610
my own started reading RFC's and decide

00:10:17,410 --> 00:10:28,840
to implement skip but some parts of this

00:10:24,610 --> 00:10:31,590
skin standard was very complicated so

00:10:28,840 --> 00:10:36,430
for phase one so I decided all right

00:10:31,590 --> 00:10:40,570
we're gonna implement the subset of skim

00:10:36,430 --> 00:10:48,570
that whole hello services like boost to

00:10:40,570 --> 00:10:53,560
talk to the new service so after that

00:10:48,570 --> 00:10:57,670
implementation was in place those two

00:10:53,560 --> 00:11:01,690
services look like this so boots are

00:10:57,670 --> 00:11:04,910
still had access to the boost database

00:11:01,690 --> 00:11:08,300
and its own boost off database

00:11:04,910 --> 00:11:13,370
and there was this scheme API which

00:11:08,300 --> 00:11:17,450
boost could use so the plan was inside

00:11:13,370 --> 00:11:20,900
boost with if they try to use the pages

00:11:17,450 --> 00:11:24,890
to add or remove users to different

00:11:20,900 --> 00:11:29,780
businesses would call a scheme API which

00:11:24,890 --> 00:11:31,670
would save it to boost off and then

00:11:29,780 --> 00:11:35,330
boost could save the stuff in boost

00:11:31,670 --> 00:11:40,490
database she kept the information in

00:11:35,330 --> 00:11:44,210
both places and eventually Zoey and her

00:11:40,490 --> 00:11:49,240
team could remove the dependency to the

00:11:44,210 --> 00:11:53,360
old database in the meantime

00:11:49,240 --> 00:11:54,980
developers for boosts they have to work

00:11:53,360 --> 00:11:58,070
on some higher stuff there were other

00:11:54,980 --> 00:12:02,720
requirements so they don't have time to

00:11:58,070 --> 00:12:06,770
actually implement scheme integration in

00:12:02,720 --> 00:12:10,640
the meantime managers ask Zoey and her

00:12:06,770 --> 00:12:14,600
team can you support another service

00:12:10,640 --> 00:12:19,070
they don't have anywhere to often to get

00:12:14,600 --> 00:12:22,060
users and so it was like oh why not

00:12:19,070 --> 00:12:28,570
we implemented skim so they can use that

00:12:22,060 --> 00:12:35,150
so that service was called boost craft

00:12:28,570 --> 00:12:38,810
and they told Zoey and our team all

00:12:35,150 --> 00:12:42,800
right we're gonna use your skinny guy so

00:12:38,810 --> 00:12:46,430
he decided and these users they are not

00:12:42,800 --> 00:12:48,620
probably gonna use boost right away so

00:12:46,430 --> 00:12:54,560
what we gonna do is we're just gonna

00:12:48,620 --> 00:12:59,290
create them in the new database so

00:12:54,560 --> 00:13:02,630
that's how that integration I was built

00:12:59,290 --> 00:13:07,660
so that boost graph and boost the boost

00:13:02,630 --> 00:13:14,690
graph talk to scheme API boost did not

00:13:07,660 --> 00:13:17,630
so over time some users started to add

00:13:14,690 --> 00:13:20,810
them selves from boost graph let's say

00:13:17,630 --> 00:13:23,240
it's a user and you user with this email

00:13:20,810 --> 00:13:27,310
address that is username so they added

00:13:23,240 --> 00:13:31,100
themselves on boost graph to a new

00:13:27,310 --> 00:13:33,800
customer that went through the scheme

00:13:31,100 --> 00:13:39,470
API and it was added to boost us

00:13:33,800 --> 00:13:43,190
database but the UI ideas were generated

00:13:39,470 --> 00:13:45,319
by boost off so they had their unique

00:13:43,190 --> 00:13:50,540
user ID for the user and the

00:13:45,319 --> 00:13:57,050
organization same time or some time

00:13:50,540 --> 00:13:59,389
after that user decided oh we all still

00:13:57,050 --> 00:14:02,000
had the license or boost I want to have

00:13:59,389 --> 00:14:06,319
access to boost as well so they asked

00:14:02,000 --> 00:14:09,290
that bender can you add me there so they

00:14:06,319 --> 00:14:13,550
added them boost but boosted a talk to

00:14:09,290 --> 00:14:16,519
boost us had its own internal you IDs

00:14:13,550 --> 00:14:20,029
for business and user but these users

00:14:16,519 --> 00:14:22,339
were added they belong to an

00:14:20,029 --> 00:14:27,490
organization and a business in two

00:14:22,339 --> 00:14:32,240
separate places with different uu IDs so

00:14:27,490 --> 00:14:35,920
how to match this because initially the

00:14:32,240 --> 00:14:39,319
design was businesses boost and

00:14:35,920 --> 00:14:41,000
organizations boost off gonna be one on

00:14:39,319 --> 00:14:45,680
one but now we have an organization

00:14:41,000 --> 00:14:48,259
which was supposed to have a business in

00:14:45,680 --> 00:14:51,189
boost but didn't match because the you

00:14:48,259 --> 00:14:51,189
IDs were different

00:14:52,870 --> 00:15:01,639
so to avoid this Zoey decided alright

00:14:57,199 --> 00:15:04,449
I'm gonna make sure the user the same

00:15:01,639 --> 00:15:08,329
username which was the email address

00:15:04,449 --> 00:15:13,720
should apply to the same organizations

00:15:08,329 --> 00:15:19,300
and businesses she added a validation

00:15:13,720 --> 00:15:25,310
that was applied during authentication

00:15:19,300 --> 00:15:28,069
the the user is found in the boosts

00:15:25,310 --> 00:15:29,730
database using that email address and

00:15:28,069 --> 00:15:34,500
boosts us

00:15:29,730 --> 00:15:37,530
and the unities of the user and its

00:15:34,500 --> 00:15:42,720
counterpart just called hitchhike it's

00:15:37,530 --> 00:15:45,170
compared so if the UI these mashed and

00:15:42,720 --> 00:15:48,690
the business and or UI these matched

00:15:45,170 --> 00:15:51,300
like oh don't lines are the same

00:15:48,690 --> 00:15:56,780
business and org everything was fine

00:15:51,300 --> 00:16:00,480
otherwise there was a validation error

00:15:56,780 --> 00:16:03,480
but what happened after is change was

00:16:00,480 --> 00:16:08,790
released a lot of users starts

00:16:03,480 --> 00:16:12,240
complaining like oh they used to be able

00:16:08,790 --> 00:16:15,720
to log in to boost or I used to be able

00:16:12,240 --> 00:16:20,790
to log in to boost graph now can access

00:16:15,720 --> 00:16:26,150
any of those so he was like what just

00:16:20,790 --> 00:16:26,150
happened need to investigate some more

00:16:31,970 --> 00:16:40,320
so after looking into this so we decided

00:16:37,140 --> 00:16:42,660
the main reason was that post didn't

00:16:40,320 --> 00:16:46,260
talk to boost us but boost us was

00:16:42,660 --> 00:16:50,490
reading from its own its own database

00:16:46,260 --> 00:16:56,310
and the old database from the boost

00:16:50,490 --> 00:16:59,610
application when new users were added

00:16:56,310 --> 00:17:02,820
and boost gustas didn't know I think

00:16:59,610 --> 00:17:05,730
about that at the same time when the

00:17:02,820 --> 00:17:08,100
users added through skim he didn't

00:17:05,730 --> 00:17:13,170
actually check in to boost database was

00:17:08,100 --> 00:17:17,040
just adding them and boost off so to

00:17:13,170 --> 00:17:20,420
make sure that the mismatches wouldn't

00:17:17,040 --> 00:17:20,420
happen again

00:17:20,900 --> 00:17:28,830
Zoe and team from boost they decided

00:17:25,260 --> 00:17:31,010
that they need to change the logic when

00:17:28,830 --> 00:17:35,310
users are added in boots

00:17:31,010 --> 00:17:39,480
so the start to call a scheme API when

00:17:35,310 --> 00:17:43,140
users rather so if the user with the

00:17:39,480 --> 00:17:45,570
same email existed but lying too

00:17:43,140 --> 00:17:48,420
an organization in different UUID it

00:17:45,570 --> 00:17:51,650
wouldn't allow them to add it in boost

00:17:48,420 --> 00:17:56,040
say okay there's some mismatches

00:17:51,650 --> 00:18:00,600
but that means for those customers they

00:17:56,040 --> 00:18:02,940
start to ask why can I use add this user

00:18:00,600 --> 00:18:05,070
it just tells me you can't do that

00:18:02,940 --> 00:18:08,880
because of some mismatches and I don't

00:18:05,070 --> 00:18:12,390
understand what they are so for more and

00:18:08,880 --> 00:18:16,920
more requests to fix this

00:18:12,390 --> 00:18:19,260
so though we needed to go and move users

00:18:16,920 --> 00:18:21,420
from this organization to the other one

00:18:19,260 --> 00:18:27,290
that matched the business and boost or

00:18:21,420 --> 00:18:30,900
vice versa so a lot of manual

00:18:27,290 --> 00:18:34,680
synchronization was needed so life

00:18:30,900 --> 00:18:42,720
wasn't as happy as he used to be when

00:18:34,680 --> 00:18:46,590
she just were composed another nightmare

00:18:42,720 --> 00:18:51,960
scenario that happened with updates as

00:18:46,590 --> 00:18:53,940
booze had the page for user changes the

00:18:51,960 --> 00:18:56,820
users could actually change their user

00:18:53,940 --> 00:18:58,680
name which was their email okay and I

00:18:56,820 --> 00:19:00,450
want to use this email anymore I just

00:18:58,680 --> 00:19:03,810
want to change it with something

00:19:00,450 --> 00:19:06,210
different but that email address was

00:19:03,810 --> 00:19:12,260
shared between different services as

00:19:06,210 --> 00:19:16,170
well so with another nightmare scenario

00:19:12,260 --> 00:19:19,950
what if they update in one service what

00:19:16,170 --> 00:19:22,170
should we do should the updated and the

00:19:19,950 --> 00:19:25,380
I didn't provider and then just call the

00:19:22,170 --> 00:19:28,650
other services to update as well a lot

00:19:25,380 --> 00:19:29,130
of sync needed why did we start like

00:19:28,650 --> 00:19:38,400
this

00:19:29,130 --> 00:19:41,060
Zoe wasn't happy at all now let's go to

00:19:38,400 --> 00:19:41,060
close work

00:19:43,660 --> 00:19:52,390
generally Khloe least in a parallel

00:19:47,650 --> 00:19:57,400
universe it's kind of a doppelganger for

00:19:52,390 --> 00:20:04,150
Zoey she works on boost in this universe

00:19:57,400 --> 00:20:08,650
and she was asked to build and I did

00:20:04,150 --> 00:20:13,080
provider had the requirements or the

00:20:08,650 --> 00:20:23,980
initial requirement pretty similar to

00:20:13,080 --> 00:20:30,000
Zoey start with Chloe was a magician she

00:20:23,980 --> 00:20:35,260
had a secret weapon was the time device

00:20:30,000 --> 00:20:42,580
she could travel time travel to the

00:20:35,260 --> 00:20:43,240
future and see what would happen the

00:20:42,580 --> 00:20:48,220
future

00:20:43,240 --> 00:20:57,570
based on her decisions so her initial

00:20:48,220 --> 00:21:01,180
ideas very similar to Zoey's said Limpy

00:20:57,570 --> 00:21:05,830
traveling time and see what happened if

00:21:01,180 --> 00:21:08,730
I choose to implement stuff like to

00:21:05,830 --> 00:21:11,170
databases extracting out an

00:21:08,730 --> 00:21:15,270
authentication services that have access

00:21:11,170 --> 00:21:20,350
to those databases and implementing skin

00:21:15,270 --> 00:21:28,560
to travel a couple of years and time she

00:21:20,350 --> 00:21:32,790
was back it's like oh ha quit future

00:21:28,560 --> 00:21:36,640
wasn't as good as I anticipated

00:21:32,790 --> 00:21:38,760
hedgehogs had to stay home work from

00:21:36,640 --> 00:21:43,030
home all the time

00:21:38,760 --> 00:21:46,330
toilet peppers hurt the house commodity

00:21:43,030 --> 00:21:50,620
I love users couldn't log in they

00:21:46,330 --> 00:21:56,700
weren't happy at all so my initial

00:21:50,620 --> 00:21:56,700
design decision then work out too well

00:22:00,150 --> 00:22:12,280
so she looked at what went wrong and

00:22:07,510 --> 00:22:15,600
just she figured for a few things that

00:22:12,280 --> 00:22:22,960
made life miserable for her future self

00:22:15,600 --> 00:22:35,800
so she wanted to avoid that so those

00:22:22,960 --> 00:22:41,620
things were first one was the identity

00:22:35,800 --> 00:22:49,840
replication which Zoe I had learned

00:22:41,620 --> 00:22:53,860
about it very painful way that identity

00:22:49,840 --> 00:22:55,960
related information was replicated among

00:22:53,860 --> 00:22:59,380
multiple services the IT provider and

00:22:55,960 --> 00:23:04,090
the service provider and they were all

00:22:59,380 --> 00:23:07,840
so changeable so the change in one place

00:23:04,090 --> 00:23:13,300
they had to be sing Christ in many

00:23:07,840 --> 00:23:16,210
different places the second one was

00:23:13,300 --> 00:23:19,900
having multiple databases keeping things

00:23:16,210 --> 00:23:23,620
in sync between those two databases so

00:23:19,900 --> 00:23:26,320
the initial idea was the employment skin

00:23:23,620 --> 00:23:31,450
and get rid of that dependency to do de

00:23:26,320 --> 00:23:35,590
databases but things didn't turn out the

00:23:31,450 --> 00:23:38,650
way that she anticipated so the

00:23:35,590 --> 00:23:43,630
dependency to two databases stayed there

00:23:38,650 --> 00:23:46,210
for a long long time so she didn't want

00:23:43,630 --> 00:23:52,120
to go through with that decision

00:23:46,210 --> 00:23:55,540
a third one was kind of subset of the

00:23:52,120 --> 00:23:58,390
first one that the user ID was updatable

00:23:55,540 --> 00:24:02,110
but because it was replicated it needed

00:23:58,390 --> 00:24:09,600
to be updated in multiple places it

00:24:02,110 --> 00:24:15,150
could create difficulties if

00:24:09,600 --> 00:24:17,840
did updated value existed in a different

00:24:15,150 --> 00:24:17,840
organization

00:24:18,500 --> 00:24:24,799
the initial design didn't support such a

00:24:21,240 --> 00:24:32,480
thing the user could only exist in one

00:24:24,799 --> 00:24:32,480
organization and finally choosing skin

00:24:32,960 --> 00:24:39,660
since it's not a permutation for skin

00:24:36,470 --> 00:24:45,510
she had to implement a subset of that

00:24:39,660 --> 00:24:48,030
and made a few months to do that in the

00:24:45,510 --> 00:24:50,820
future she realized the skip didn't

00:24:48,030 --> 00:24:54,419
actually help her much it could have

00:24:50,820 --> 00:24:58,620
just avoided the whole thing and spend

00:24:54,419 --> 00:25:05,309
time other factors made sure she didn't

00:24:58,620 --> 00:25:08,130
have any of those issues so Chloe told

00:25:05,309 --> 00:25:11,159
herself it's time to change the initial

00:25:08,130 --> 00:25:14,309
designs they didn't work out in the

00:25:11,159 --> 00:25:17,070
future so I'm just gonna go with some

00:25:14,309 --> 00:25:21,480
different designs I learnt a lot from

00:25:17,070 --> 00:25:27,270
the future so I'm not gonna make the

00:25:21,480 --> 00:25:31,380
same mistakes again now let me go with a

00:25:27,270 --> 00:25:35,159
new set of design and I can travel in

00:25:31,380 --> 00:25:42,480
time one more time and see how it worked

00:25:35,159 --> 00:25:45,419
out so hernia design was something like

00:25:42,480 --> 00:25:48,419
this she wanted to extract the

00:25:45,419 --> 00:25:52,970
authentication logic out of boost but

00:25:48,419 --> 00:25:58,110
she don't want to rely on two databases

00:25:52,970 --> 00:26:01,049
so what she did was to copy all that

00:25:58,110 --> 00:26:09,390
data from boost database to the new

00:26:01,049 --> 00:26:13,190
database so she had the old version of

00:26:09,390 --> 00:26:19,200
encrypted password with hedgehog crypt 1

00:26:13,190 --> 00:26:22,179
but she had the new column for the newer

00:26:19,200 --> 00:26:25,009
version of the encryption

00:26:22,179 --> 00:26:28,850
so when I user logged in she could

00:26:25,009 --> 00:26:31,909
populate the new column is roll over

00:26:28,850 --> 00:26:34,460
time she could switch from the old

00:26:31,909 --> 00:26:39,460
encryption to the new encryption I need

00:26:34,460 --> 00:26:41,570
to rely on the Boost database for that

00:26:39,460 --> 00:26:46,269
it made some changes in boost

00:26:41,570 --> 00:26:49,429
application as well so she hid all the

00:26:46,269 --> 00:26:52,240
authentication related stuff in boost

00:26:49,429 --> 00:27:00,289
application boost didn't need to see

00:26:52,240 --> 00:27:01,129
password or email as user names emails

00:27:00,289 --> 00:27:04,669
still there

00:27:01,129 --> 00:27:13,870
if boots needed to send emails to the

00:27:04,669 --> 00:27:17,870
users but there was no notion of user ID

00:27:13,870 --> 00:27:20,629
when referring to that email so another

00:27:17,870 --> 00:27:28,490
thing that you learned from the future

00:27:20,629 --> 00:27:33,879
with that some users need to be part of

00:27:28,490 --> 00:27:37,730
multiple organizations also each

00:27:33,879 --> 00:27:40,700
organization which represents a customer

00:27:37,730 --> 00:27:46,940
could also buy licenses for different

00:27:40,700 --> 00:27:50,600
services so there was a new notion of a

00:27:46,940 --> 00:27:53,259
service provider or SP so you have the

00:27:50,600 --> 00:27:57,710
organization to present the customer but

00:27:53,259 --> 00:27:59,659
some of the services and was the user so

00:27:57,710 --> 00:28:03,830
each organization could have multiple

00:27:59,659 --> 00:28:08,240
users each organization would have one

00:28:03,830 --> 00:28:10,549
or more services they paid for the

00:28:08,240 --> 00:28:12,789
retire organization but a license for

00:28:10,549 --> 00:28:18,799
one of the services that registered

00:28:12,789 --> 00:28:23,360
moose odd that service was added to that

00:28:18,799 --> 00:28:27,639
organization she also decided that none

00:28:23,360 --> 00:28:30,110
of the services need to have any UI

00:28:27,639 --> 00:28:33,139
dealing with authentication related

00:28:30,110 --> 00:28:35,290
stuff so she moved all those pages to

00:28:33,139 --> 00:28:39,800
boost us as well

00:28:35,290 --> 00:28:44,840
so admins could add users to the

00:28:39,800 --> 00:28:49,030
organization and they could also assign

00:28:44,840 --> 00:28:54,340
those user to different services was a

00:28:49,030 --> 00:28:59,180
user called Chloe belong to organization

00:28:54,340 --> 00:29:02,330
one and they have both boost and boost

00:28:59,180 --> 00:29:07,750
graph the admin could decide this user

00:29:02,330 --> 00:29:10,970
could have access to both that user have

00:29:07,750 --> 00:29:14,750
relations do both service provider

00:29:10,970 --> 00:29:17,140
records but the I think we decide this

00:29:14,750 --> 00:29:25,910
user could only have access to boost or

00:29:17,140 --> 00:29:29,900
just boost graph so now during the

00:29:25,910 --> 00:29:36,110
authentication what happened was the

00:29:29,900 --> 00:29:41,020
users start and a service like boost

00:29:36,110 --> 00:29:46,310
boost graph and they will send a user

00:29:41,020 --> 00:29:50,510
boost to authenticate who's the login

00:29:46,310 --> 00:29:58,460
patient boost so they can enter their

00:29:50,510 --> 00:30:03,290
information and boost or check their

00:29:58,460 --> 00:30:06,710
username and password and send sam'l

00:30:03,290 --> 00:30:09,260
response back to boost or boost graph

00:30:06,710 --> 00:30:13,700
based on what are they serving this case

00:30:09,260 --> 00:30:17,030
they started boost so if they are

00:30:13,700 --> 00:30:23,000
authenticated properly they could access

00:30:17,030 --> 00:30:27,710
boost but the new sample response had

00:30:23,000 --> 00:30:32,330
some extra information so the extra

00:30:27,710 --> 00:30:35,660
information was if the application was

00:30:32,330 --> 00:30:40,090
successful and the second extra

00:30:35,660 --> 00:30:44,090
information was if the user actually

00:30:40,090 --> 00:30:48,360
authorized for that service so the user

00:30:44,090 --> 00:30:52,620
could existing boost

00:30:48,360 --> 00:31:00,390
but they might not have access to a

00:30:52,620 --> 00:31:03,030
specific service so and boost ACS

00:31:00,390 --> 00:31:06,960
endpoint receive the sam'l response and

00:31:03,030 --> 00:31:09,420
decided oh if the authentication was

00:31:06,960 --> 00:31:13,760
successful and the authorization was

00:31:09,420 --> 00:31:20,549
also true they could access this service

00:31:13,760 --> 00:31:29,580
any of those or false boosts didn't give

00:31:20,549 --> 00:31:34,440
access to the user so the sam'l response

00:31:29,580 --> 00:31:40,650
also contained the hue IDs of the user

00:31:34,440 --> 00:31:43,470
and it's organization that this extra

00:31:40,650 --> 00:31:49,320
information helped us to see if the user

00:31:43,470 --> 00:31:55,280
already existed its own database if it's

00:31:49,320 --> 00:32:00,540
not this could create the user and work

00:31:55,280 --> 00:32:04,169
using those user IDs so for a service

00:32:00,540 --> 00:32:08,820
provider the only thing that was

00:32:04,169 --> 00:32:13,320
meaningful or goes to do you IDs so the

00:32:08,820 --> 00:32:17,700
new X user DUI the xxx belong to the

00:32:13,320 --> 00:32:21,020
organization but do you ID yyy if they

00:32:17,700 --> 00:32:26,040
existed always good if they didn't

00:32:21,020 --> 00:32:29,610
probably as a new user if the user was

00:32:26,040 --> 00:32:31,679
authenticated but not authorized they

00:32:29,610 --> 00:32:33,450
could have checked a database so Oh a

00:32:31,679 --> 00:32:34,620
Caesar used to be here but not

00:32:33,450 --> 00:32:36,660
authorized anymore

00:32:34,620 --> 00:32:41,730
I could remove it from their own

00:32:36,660 --> 00:32:45,840
database as well so that was a passive

00:32:41,730 --> 00:32:49,710
way we're dealing with user and

00:32:45,840 --> 00:32:52,380
organization related stuff a COI decided

00:32:49,710 --> 00:32:54,450
some services might want to be more

00:32:52,380 --> 00:32:57,370
proactive so she could actually

00:32:54,450 --> 00:33:01,900
implement a way for them

00:32:57,370 --> 00:33:04,120
to be informed when authentication

00:33:01,900 --> 00:33:08,470
authorization information was change

00:33:04,120 --> 00:33:16,780
boost us so each service could register

00:33:08,470 --> 00:33:20,770
web quick boost off and that web hug

00:33:16,780 --> 00:33:23,890
would be an endpoint to be called when

00:33:20,770 --> 00:33:28,570
any authentication authorization related

00:33:23,890 --> 00:33:34,300
to this specific service changed and

00:33:28,570 --> 00:33:38,590
boost awesome so if an admin added the

00:33:34,300 --> 00:33:43,200
user with access to boost Service or

00:33:38,590 --> 00:33:46,900
remove them or move them and boost up

00:33:43,200 --> 00:33:49,960
call that web hug sending their

00:33:46,900 --> 00:33:52,710
information about the changes there so

00:33:49,960 --> 00:33:55,300
they could update their internal

00:33:52,710 --> 00:34:00,100
representation of users and organization

00:33:55,300 --> 00:34:03,970
which only included au IDs the with this

00:34:00,100 --> 00:34:07,780
design the user ID that the user used

00:34:03,970 --> 00:34:11,379
their email to log in was only a concern

00:34:07,780 --> 00:34:14,260
for boost earth if they change it didn't

00:34:11,379 --> 00:34:19,210
change anything about the presentation

00:34:14,260 --> 00:34:22,540
of the user and services they could have

00:34:19,210 --> 00:34:27,310
access to and the organization's they

00:34:22,540 --> 00:34:31,139
belong to it was only changed in one

00:34:27,310 --> 00:34:33,550
place in boost us there's no need to

00:34:31,139 --> 00:34:39,820
sing cries that piece of information

00:34:33,550 --> 00:34:46,090
between multiple services so after all

00:34:39,820 --> 00:34:50,740
these changes she traveled in time in

00:34:46,090 --> 00:34:55,870
the future users much happier and this

00:34:50,740 --> 00:34:58,840
version of her future the whole it's a

00:34:55,870 --> 00:35:01,980
lack of toilet paper again apart she

00:34:58,840 --> 00:35:01,980
couldn't do much about

00:35:03,880 --> 00:35:16,040
so I can summarize what they learned so

00:35:11,720 --> 00:35:18,800
they learned that sometimes standards

00:35:16,040 --> 00:35:22,840
are not the best things to go with if

00:35:18,800 --> 00:35:25,940
they're not adopted in many places and

00:35:22,840 --> 00:35:30,410
they might actually make your life more

00:35:25,940 --> 00:35:33,080
miserable synchronization between

00:35:30,410 --> 00:35:36,410
multiple services with the

00:35:33,080 --> 00:35:40,280
authentication related information not a

00:35:36,410 --> 00:35:42,160
good idea if you centralize that

00:35:40,280 --> 00:35:45,860
information in one place

00:35:42,160 --> 00:35:49,880
the need for synchronization that go

00:35:45,860 --> 00:35:53,570
down considerably and will make your

00:35:49,880 --> 00:35:57,760
life much easier at the end of this

00:35:53,570 --> 00:36:03,320
presentation just want to thank our

00:35:57,760 --> 00:36:05,750
friends and coworkers Cisco so point to

00:36:03,320 --> 00:36:09,320
special thanks so hand for brainstorming

00:36:05,750 --> 00:36:12,860
the initial drafts of this and Jonathan

00:36:09,320 --> 00:36:15,980
for providing me with the adorable

00:36:12,860 --> 00:36:19,220
Hedgehog pictures if you have any

00:36:15,980 --> 00:36:23,260
questions you can contact me my email

00:36:19,220 --> 00:36:23,260

YouTube URL: https://www.youtube.com/watch?v=huJtiA_wOtc


