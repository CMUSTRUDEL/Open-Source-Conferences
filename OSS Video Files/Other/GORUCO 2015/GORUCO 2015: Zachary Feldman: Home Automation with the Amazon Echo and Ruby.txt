Title: GORUCO 2015: Zachary Feldman: Home Automation with the Amazon Echo and Ruby
Publication date: 2020-01-23
Playlist: GORUCO 2015
Description: 
	@zachfeldman
The Amazon Echo recently debuted and made a big splash with its incredibly accurate voice recognition, capable of hearing and transliterating commands from 20-30 feet away. Home automation enthusiasts and hackers alike wondered if it would be possible to intercept commands from the device and trigger custom actions. While device traffic is encrypted, the device pushes commands to a history page in a web application. Using Watir WebDriver, which normally is used for feature testing, we've created a proxy that can be run on a Raspberry Pi as well as a modular Ruby framework based on Sinatra to run custom commands, allowing us to control the Hue wireless lighting system, Nest, and even request an Uber!
 
Talk given at GORUCO 2015: http://goruco.com
Captions: 
	00:00:14,340 --> 00:00:17,800
so I'm going to give you guys a little

00:00:16,059 --> 00:00:20,860
bit of a talk about home automation with

00:00:17,800 --> 00:00:22,390
Amazon echo and Ruby I hope it works

00:00:20,860 --> 00:00:24,490
well I've never tried this thing out in

00:00:22,390 --> 00:00:26,800
a room with 300 people so you know I

00:00:24,490 --> 00:00:28,990
guess we'll see but basically I wanted

00:00:26,800 --> 00:00:30,849
to create a kind of an API where there

00:00:28,990 --> 00:00:32,260
wasn't one to ameliorate all of my first

00:00:30,849 --> 00:00:35,739
world problems I don't want to get up

00:00:32,260 --> 00:00:38,860
off the couch why would you so Who am I

00:00:35,739 --> 00:00:40,480
at zacks elvin on github and Twitter and

00:00:38,860 --> 00:00:42,190
all those things i'm the co-founder and

00:00:40,480 --> 00:00:43,930
chief academic officer of the New York

00:00:42,190 --> 00:00:45,670
code and Design Academy we're one of

00:00:43,930 --> 00:00:47,320
those newfangled coding boot camps that

00:00:45,670 --> 00:00:48,489
you keep hearing about one of our

00:00:47,320 --> 00:00:53,110
students is actually in the audience

00:00:48,489 --> 00:00:55,239
right there how's it going for NYC da

00:00:53,110 --> 00:00:57,489
comm classes on web development from

00:00:55,239 --> 00:00:59,500
basic to advanced iOS development UI UX

00:00:57,489 --> 00:01:01,900
design pretty much just awesome

00:00:59,500 --> 00:01:03,100
technology classes so check them out ask

00:01:01,900 --> 00:01:05,680
me any questions if you want afterwards

00:01:03,100 --> 00:01:09,520
about them we're launching in Amsterdam

00:01:05,680 --> 00:01:11,229
in September so I'm stoked about that so

00:01:09,520 --> 00:01:12,280
the Amazon echo is this thing right next

00:01:11,229 --> 00:01:14,409
to me that looks kind of like a garbage

00:01:12,280 --> 00:01:17,290
can you know kind of like r2d2 in that

00:01:14,409 --> 00:01:20,200
way it has seven microphones which is

00:01:17,290 --> 00:01:22,060
amazing you know i can tell you almost

00:01:20,200 --> 00:01:23,950
for sure that this doesn't have seven

00:01:22,060 --> 00:01:26,679
microphones nor do any of the android

00:01:23,950 --> 00:01:28,240
phones so you know all the kind of

00:01:26,679 --> 00:01:30,219
approaches to speech recognition that

00:01:28,240 --> 00:01:31,990
have happened so far have been on

00:01:30,219 --> 00:01:35,560
inferior hardware if you ask me you know

00:01:31,990 --> 00:01:37,960
i don't know a ton about actually taking

00:01:35,560 --> 00:01:40,179
a waveform and parsing it into text that

00:01:37,960 --> 00:01:42,070
is not really my area of expertise but i

00:01:40,179 --> 00:01:43,749
can guess i also have a music degree i

00:01:42,070 --> 00:01:46,299
can guess that it's probably a lot

00:01:43,749 --> 00:01:48,219
easier to parse speech from something

00:01:46,299 --> 00:01:50,350
out of seven microphones versus you know

00:01:48,219 --> 00:01:51,909
one two three microphones and max so

00:01:50,350 --> 00:01:54,280
that's why this is so amazing i'm

00:01:51,909 --> 00:01:55,509
sitting on my couch at home or even in

00:01:54,280 --> 00:01:57,100
my bathroom at home and my living room

00:01:55,509 --> 00:02:00,189
is like over here and that's where my

00:01:57,100 --> 00:02:01,659
echo is i say like you know i'm not

00:02:00,189 --> 00:02:02,799
going to say that wake word just yet but

00:02:01,659 --> 00:02:04,329
i'll ask it to do something and it'll

00:02:02,799 --> 00:02:06,939
hear me from 20 feet away and it'll

00:02:04,329 --> 00:02:08,069
parse that text pretty clearly for you

00:02:06,939 --> 00:02:11,590
know this generation of voice

00:02:08,069 --> 00:02:14,230
recognition technology so when I got my

00:02:11,590 --> 00:02:15,850
echo about eight or nine months ago I

00:02:14,230 --> 00:02:17,500
don't know how I got it that quickly

00:02:15,850 --> 00:02:19,240
don't ask me I don't know how to get

00:02:17,500 --> 00:02:21,790
your name up in the waitlist or whatever

00:02:19,240 --> 00:02:23,470
beats me I came in with some it came

00:02:21,790 --> 00:02:27,020
with some built-in functionality like

00:02:23,470 --> 00:02:32,300
for instance Alexa set an alarm for 41

00:02:27,020 --> 00:02:36,590
seconds from now I love my beautiful

00:02:32,300 --> 00:02:39,950
assistant Mike 2 Mike the echo so you

00:02:36,590 --> 00:02:42,370
guys can all hear it Alexa where is the

00:02:39,950 --> 00:02:46,330
International Space Station

00:02:42,370 --> 00:02:49,390
International Space Station his face

00:02:46,330 --> 00:02:53,900
thank you thank you very much Alexa

00:02:49,390 --> 00:02:58,940
place sober by Childish Gambino the

00:02:53,900 --> 00:03:02,050
songs over right yes silver by Childish

00:02:58,940 --> 00:03:06,610
Gambino that's one of my favorite songs

00:03:02,050 --> 00:03:09,560
Alexa what's the forecast for tomorrow

00:03:06,610 --> 00:03:12,530
tomorrow in Brooklyn you'll see rainy

00:03:09,560 --> 00:03:20,240
weather in chemical a baby for and a low

00:03:12,530 --> 00:03:22,430
of 73 uh Alexa do my talk for me hmm I

00:03:20,240 --> 00:03:23,870
can't find the answer to the question I

00:03:22,430 --> 00:03:30,640
heard oh no I don't have any other

00:03:23,870 --> 00:03:33,640
slides so oh that's my alarm alexa alexa

00:03:30,640 --> 00:03:33,640
alexa

00:03:34,709 --> 00:03:55,750
alexa alexa stop alright so i love this

00:03:46,450 --> 00:03:57,190
alexa alexa stop so it comes with a

00:03:55,750 --> 00:03:59,410
bunch of amazing built-in functionality

00:03:57,190 --> 00:04:01,150
and when i unboxed it I was wowed and

00:03:59,410 --> 00:04:03,459
amazed by this but I was also thinking

00:04:01,150 --> 00:04:04,989
why can't it do more this is a little

00:04:03,459 --> 00:04:06,400
bit ridiculous you know like it seems

00:04:04,989 --> 00:04:08,019
like i could just parse the text and

00:04:06,400 --> 00:04:11,980
have it control of your things in my

00:04:08,019 --> 00:04:14,230
life so yeah i wanted to add some more

00:04:11,980 --> 00:04:16,959
functionality to it and to do that i

00:04:14,230 --> 00:04:18,519
created a kind of proxy a weird kind of

00:04:16,959 --> 00:04:20,560
api and i'll go ahead and start it up

00:04:18,519 --> 00:04:23,860
right here and hopefully it'll work

00:04:20,560 --> 00:04:25,240
let's see so i'll explain a little bit

00:04:23,860 --> 00:04:26,650
more about exactly how this works later

00:04:25,240 --> 00:04:29,050
on but i'm not touching my computer

00:04:26,650 --> 00:04:32,410
right now putting it out there it's kind

00:04:29,050 --> 00:04:38,160
of all happening so i can say once this

00:04:32,410 --> 00:04:40,810
is done booting up let's see alexa add

00:04:38,160 --> 00:04:46,090
an event breakfast at tiffany's at

00:04:40,810 --> 00:04:48,880
five-thirty stop and then hopefully if

00:04:46,090 --> 00:04:51,190
all is gone well i'll have an event up

00:04:48,880 --> 00:04:52,720
there it is Breakfast at Tiffany's it

00:04:51,190 --> 00:04:54,340
has the word stop in it that's kind of a

00:04:52,720 --> 00:04:55,990
bit of a hack so you know we have to

00:04:54,340 --> 00:04:57,729
kind of work around the limitations of

00:04:55,990 --> 00:04:59,410
the device obviously amazon is not

00:04:57,729 --> 00:05:03,160
condoning this so if anyone from amazon

00:04:59,410 --> 00:05:04,240
is in the audience sorry but i also have

00:05:03,160 --> 00:05:07,300
some other functionality to show you

00:05:04,240 --> 00:05:10,930
guys to be in the so Alexa tell the

00:05:07,300 --> 00:05:19,479
world Gotham Alexa tell the world Gotham

00:05:10,930 --> 00:05:22,930
ruby conference rocks stop no so

00:05:19,479 --> 00:05:25,630
hopefully so you know it's like kind of

00:05:22,930 --> 00:05:27,070
working at at least tribe you say tell

00:05:25,630 --> 00:05:29,410
the world which is kind of the

00:05:27,070 --> 00:05:33,430
instruction to tweet right you guys kind

00:05:29,410 --> 00:05:37,979
of get the point of that Alexa tell the

00:05:33,430 --> 00:05:39,760
world Jesse Chan Norris is the man stop

00:05:37,979 --> 00:05:41,740
Jesse Chen Norris is going to be

00:05:39,760 --> 00:05:44,490
organizers also one of my mentors let's

00:05:41,740 --> 00:05:44,490
have a hand for Jesse

00:05:44,970 --> 00:05:49,870
and hopefully he showed up in my Twitter

00:05:47,490 --> 00:05:55,690
well you know at least someone kind of

00:05:49,870 --> 00:05:57,070
like him so you know the point is you

00:05:55,690 --> 00:05:59,530
guys are all gonna favorite these right

00:05:57,070 --> 00:06:01,150
it's going to be great you know the

00:05:59,530 --> 00:06:03,160
point is like it at least heard the

00:06:01,150 --> 00:06:04,510
instruction tell the world you know the

00:06:03,160 --> 00:06:06,130
text after that may have been a little

00:06:04,510 --> 00:06:07,480
garbled works a little better when I'm

00:06:06,130 --> 00:06:10,420
at home and like I said not in the room

00:06:07,480 --> 00:06:13,060
with 300 people but it works okay so how

00:06:10,420 --> 00:06:15,130
does this work does anyone know the i'm

00:06:13,060 --> 00:06:19,360
just getting i know the answer it's the

00:06:15,130 --> 00:06:22,060
alexa home project we click on this it's

00:06:19,360 --> 00:06:23,770
just kind of a short URL this is a get a

00:06:22,060 --> 00:06:25,840
repo if you guys want to take a look at

00:06:23,770 --> 00:06:29,650
it if any of you guys ever heard of

00:06:25,840 --> 00:06:31,090
github yeah so anyway there's a scraper

00:06:29,650 --> 00:06:32,800
which scrapes the commands from the

00:06:31,090 --> 00:06:34,690
Amazon echo web app and there's a server

00:06:32,800 --> 00:06:39,970
which receives the script commands and

00:06:34,690 --> 00:06:43,090
then parses them so basically it's two

00:06:39,970 --> 00:06:45,070
different components here and the

00:06:43,090 --> 00:06:46,660
scraper uses water webdriver to log into

00:06:45,070 --> 00:06:48,610
the Amazon echo web application which

00:06:46,660 --> 00:06:50,530
you saw and then when a new command is

00:06:48,610 --> 00:06:52,000
posted it sends the command to the Alexa

00:06:50,530 --> 00:06:57,370
home server application to be parsed

00:06:52,000 --> 00:06:58,780
further so what's in a water a lot of

00:06:57,370 --> 00:07:00,700
you guys have used water before for

00:06:58,780 --> 00:07:02,500
feature testing and basically it's a way

00:07:00,700 --> 00:07:05,320
to run webdriver really easily from your

00:07:02,500 --> 00:07:08,320
tests but i'm actually not using it for

00:07:05,320 --> 00:07:09,880
that with just a little bit weird why

00:07:08,320 --> 00:07:12,100
can i just use nokogiri like everyone

00:07:09,880 --> 00:07:13,840
else another question you might ask is

00:07:12,100 --> 00:07:15,190
why wouldn't I why would I scrape it

00:07:13,840 --> 00:07:16,720
from the web app why wouldn't I just try

00:07:15,190 --> 00:07:19,000
to intercept Network requests from the

00:07:16,720 --> 00:07:20,800
device itself I'm glad you asked i

00:07:19,000 --> 00:07:22,630
actually did try to do that they're

00:07:20,800 --> 00:07:24,070
obviously encrypted so if any of you

00:07:22,630 --> 00:07:25,690
guys are kind of worried about oh

00:07:24,070 --> 00:07:27,669
whatever i say to this thing is going to

00:07:25,690 --> 00:07:28,870
end up in the hands of amazon i will

00:07:27,669 --> 00:07:31,360
tell you that it only sends a request

00:07:28,870 --> 00:07:33,010
whenever you give it command and that

00:07:31,360 --> 00:07:34,720
all those requests are encrypted I

00:07:33,010 --> 00:07:36,580
couldn't find a way to decrypt them very

00:07:34,720 --> 00:07:37,960
easily so i went to the next available

00:07:36,580 --> 00:07:39,610
option which is there's a web

00:07:37,960 --> 00:07:43,780
application that has a history of

00:07:39,610 --> 00:07:45,160
exactly what you said check it out so I

00:07:43,780 --> 00:07:47,229
was like great i'll just scrape it using

00:07:45,160 --> 00:07:48,850
nokogiri but then i was like but i don't

00:07:47,229 --> 00:07:50,229
want to pull it every two minutes or

00:07:48,850 --> 00:07:51,430
every five minutes or something I want

00:07:50,229 --> 00:07:52,510
this to be immediate I want to say

00:07:51,430 --> 00:07:56,710
something that immediately have a

00:07:52,510 --> 00:07:57,160
command be executed so we're not just

00:07:56,710 --> 00:07:58,630
web square

00:07:57,160 --> 00:08:01,360
being we're actually monitoring for Ajax

00:07:58,630 --> 00:08:02,680
complete events on the document and it's

00:08:01,360 --> 00:08:04,450
kind of like a web hook in a way

00:08:02,680 --> 00:08:06,220
basically whenever the web page does

00:08:04,450 --> 00:08:12,540
something it sends a command to my

00:08:06,220 --> 00:08:15,460
server so let's see some code this is my

00:08:12,540 --> 00:08:16,720
water login that RB file which is

00:08:15,460 --> 00:08:18,700
basically taking care of all the magic

00:08:16,720 --> 00:08:21,100
here I'm creating an object called alexa

00:08:18,700 --> 00:08:23,380
crawler getting it some settings so the

00:08:21,100 --> 00:08:25,990
URL of exactly where all the history is

00:08:23,380 --> 00:08:28,780
for the app for the echo itself the

00:08:25,990 --> 00:08:30,640
login URL if you go to echo amazon com

00:08:28,780 --> 00:08:32,620
you can usually get redirected to this

00:08:30,640 --> 00:08:35,080
page also there refresh time in minutes

00:08:32,620 --> 00:08:36,430
this is a hack so every 32 minutes I

00:08:35,080 --> 00:08:38,410
want to just kill the application

00:08:36,430 --> 00:08:41,890
entirely kill Firefox and restart it and

00:08:38,410 --> 00:08:44,050
it's a lot more reliable that way when

00:08:41,890 --> 00:08:45,940
we start up we're going to initialize a

00:08:44,050 --> 00:08:47,710
new instance of water browser and that

00:08:45,940 --> 00:08:50,380
opens up Firefox for me or whatever your

00:08:47,710 --> 00:08:51,760
default browser with water is and then

00:08:50,380 --> 00:08:53,890
there's also this keep-alive method

00:08:51,760 --> 00:08:56,380
which is going to ensure that like I

00:08:53,890 --> 00:08:59,530
said every 32 minutes the process is

00:08:56,380 --> 00:09:01,000
killed and then restarted again and as

00:08:59,530 --> 00:09:02,620
you saw before we're basically using

00:09:01,000 --> 00:09:04,500
water to fill out all the fields to log

00:09:02,620 --> 00:09:06,340
into the application echoed amazoncom

00:09:04,500 --> 00:09:08,590
clicking the submit button and then

00:09:06,340 --> 00:09:12,040
going to the history URL to look at the

00:09:08,590 --> 00:09:14,410
history from the echo once we're on that

00:09:12,040 --> 00:09:16,120
history page how do we find out what the

00:09:14,410 --> 00:09:17,770
next command is good question we're

00:09:16,120 --> 00:09:20,890
actually going to inject some JavaScript

00:09:17,770 --> 00:09:22,540
into the page that's going to first of

00:09:20,890 --> 00:09:23,920
all you know for restarting the script

00:09:22,540 --> 00:09:25,960
it's going to recognize if there was a

00:09:23,920 --> 00:09:27,850
last command so that we don't repeat

00:09:25,960 --> 00:09:32,470
commands I was having this weird problem

00:09:27,850 --> 00:09:35,590
where I would tell Alexa stop to do

00:09:32,470 --> 00:09:37,030
something and then 32 minutes later it

00:09:35,590 --> 00:09:38,320
would do that thing again so that would

00:09:37,030 --> 00:09:39,820
be like you know turn on all the lights

00:09:38,320 --> 00:09:40,960
or turn off all the lights and I would

00:09:39,820 --> 00:09:42,160
just be sitting in my apartment like

00:09:40,960 --> 00:09:43,510
talking to my friends and all my lights

00:09:42,160 --> 00:09:45,400
would just turn off you know and that

00:09:43,510 --> 00:09:46,780
wasn't very fun and I had to find the

00:09:45,400 --> 00:09:48,990
bug and it was just that you know I was

00:09:46,780 --> 00:09:51,070
just executing the same commands twice

00:09:48,990 --> 00:09:53,110
so we have to protect against that but

00:09:51,070 --> 00:09:54,430
basically the point of this snippet is

00:09:53,110 --> 00:09:56,380
that whenever an ajax complete event

00:09:54,430 --> 00:09:57,580
fires on the document which is what

00:09:56,380 --> 00:09:59,800
happens whenever a new command gets

00:09:57,580 --> 00:10:01,300
pushed to the page we're going to figure

00:09:59,800 --> 00:10:02,830
out the command by just doing some

00:10:01,300 --> 00:10:04,900
parsing with jquery of whatever the

00:10:02,830 --> 00:10:06,550
command command is and then we're going

00:10:04,900 --> 00:10:07,130
to send a get request to the server that

00:10:06,550 --> 00:10:09,320
i have run

00:10:07,130 --> 00:10:11,180
on localhost four five six seven can

00:10:09,320 --> 00:10:13,310
anybody tell me localhost four five six

00:10:11,180 --> 00:10:15,920
seven what framework I'm probably using

00:10:13,310 --> 00:10:18,200
building Sinatra exactly so our good old

00:10:15,920 --> 00:10:20,150
friend Sinatra and then I'm going to run

00:10:18,200 --> 00:10:21,470
they keep alive it's a recursive

00:10:20,150 --> 00:10:24,110
function it just calls itself over and

00:10:21,470 --> 00:10:25,910
over again and stays alive and also it

00:10:24,110 --> 00:10:27,770
has to begin rescue end which is you

00:10:25,910 --> 00:10:29,150
know not super awesome you know I know

00:10:27,770 --> 00:10:31,220
I'm not exactly following best practices

00:10:29,150 --> 00:10:32,330
here but you know I just wanted this

00:10:31,220 --> 00:10:36,020
thing to stay alive as long as possible

00:10:32,330 --> 00:10:37,880
without my interference cool so that's

00:10:36,020 --> 00:10:39,740
how the scraper works we're just using

00:10:37,880 --> 00:10:43,130
javascript injection to send a get

00:10:39,740 --> 00:10:44,960
request to a local server so the server

00:10:43,130 --> 00:10:46,940
it receives a scraped commands from the

00:10:44,960 --> 00:10:48,770
Amazon echo and we're basically using

00:10:46,940 --> 00:10:50,450
regex powered parsing to match against

00:10:48,770 --> 00:10:52,660
key phrases for different modules that

00:10:50,450 --> 00:10:54,860
we've written for the echo for this hack

00:10:52,660 --> 00:10:56,540
and it can be used with any plain text

00:10:54,860 --> 00:10:58,310
input not just from echo which is really

00:10:56,540 --> 00:11:00,290
interesting actually so if any of you

00:10:58,310 --> 00:11:02,990
guys I know that there was the Google

00:11:00,290 --> 00:11:05,720
now hack for for Syria where you could

00:11:02,990 --> 00:11:08,000
say you know or googolplex I'm sorry you

00:11:05,720 --> 00:11:09,470
could say googolplex and then go through

00:11:08,000 --> 00:11:11,090
some kind of proxy and scrape whatever

00:11:09,470 --> 00:11:12,950
Syria was saying I feel like it's been

00:11:11,090 --> 00:11:15,890
deactivated recently but you could find

00:11:12,950 --> 00:11:17,180
a way to take the commands of Syria the

00:11:15,890 --> 00:11:18,890
commands from google now or something

00:11:17,180 --> 00:11:20,810
else and pass it to this it could also

00:11:18,890 --> 00:11:22,370
parse them and cran do the same types of

00:11:20,810 --> 00:11:23,870
actions which is kind of interesting so

00:11:22,370 --> 00:11:25,370
that's why I decided to break it into

00:11:23,870 --> 00:11:26,990
two parts i wanted other people to be

00:11:25,370 --> 00:11:30,410
able to use this code for their projects

00:11:26,990 --> 00:11:31,820
too so the server architecture sounds

00:11:30,410 --> 00:11:35,750
like a really complicated word right

00:11:31,820 --> 00:11:37,730
five lines of code Sinatra and so the

00:11:35,750 --> 00:11:40,220
first pass that I did was super simple

00:11:37,730 --> 00:11:43,010
require Sinatra get requests to slash

00:11:40,220 --> 00:11:45,020
process with a parameter Q scanning that

00:11:43,010 --> 00:11:47,960
parameter for the words turn on and then

00:11:45,020 --> 00:11:49,670
do Hugh stuff so pretty much I just had

00:11:47,960 --> 00:11:50,900
to write hashtag do Hugh stuff and then

00:11:49,670 --> 00:11:55,310
all the huge stuff happened it was very

00:11:50,900 --> 00:11:56,570
simple joking so the first pass that I

00:11:55,310 --> 00:11:58,910
did at this was like I said to control

00:11:56,570 --> 00:12:00,680
the hue lights in my apartment so I was

00:11:58,910 --> 00:12:02,990
scanning for the words turn on when I

00:12:00,680 --> 00:12:05,240
found those words I used the hue API to

00:12:02,990 --> 00:12:06,830
you know ping the lights in my apartment

00:12:05,240 --> 00:12:08,660
and turn them on and then eventually

00:12:06,830 --> 00:12:10,190
turn them off as well and as you can

00:12:08,660 --> 00:12:12,710
imagine the code base kind of grew from

00:12:10,190 --> 00:12:14,600
that into this really gnarly if else if

00:12:12,710 --> 00:12:16,940
you know else kind of thing that just

00:12:14,600 --> 00:12:18,830
was looking really terrible

00:12:16,940 --> 00:12:20,090
and things just got more complicated and

00:12:18,830 --> 00:12:22,820
I wanted to encourage open source

00:12:20,090 --> 00:12:24,350
contributions so two things that I think

00:12:22,820 --> 00:12:26,990
really encourage open source

00:12:24,350 --> 00:12:28,760
contribution documentation right don't

00:12:26,990 --> 00:12:30,710
be all of documentation really easily

00:12:28,760 --> 00:12:32,900
readable documentation and also an

00:12:30,710 --> 00:12:35,390
easily extensible modular system you

00:12:32,900 --> 00:12:37,340
know so not just kind of a huge if

00:12:35,390 --> 00:12:38,660
else--if tree but you know something

00:12:37,340 --> 00:12:40,040
that people could actually see as a

00:12:38,660 --> 00:12:41,750
pattern and you know replicate that

00:12:40,040 --> 00:12:44,570
pattern really easily on their own and

00:12:41,750 --> 00:12:48,440
then write code on their own to do so so

00:12:44,570 --> 00:12:50,330
the result is the current code base and

00:12:48,440 --> 00:12:59,720
that's like i said at alexa ho demi

00:12:50,330 --> 00:13:01,550
Alexa home stop sometimes this thing

00:12:59,720 --> 00:13:04,520
gets a little bit annoying but you know

00:13:01,550 --> 00:13:06,620
so my code is a little bit better

00:13:04,520 --> 00:13:07,850
formatted now and I'll show you guys on

00:13:06,620 --> 00:13:11,360
github just because it looks a little

00:13:07,850 --> 00:13:13,490
cleaner there so we've got the docs

00:13:11,360 --> 00:13:16,160
folder which basically describes getting

00:13:13,490 --> 00:13:17,960
started how to run the program on a

00:13:16,160 --> 00:13:19,310
Raspberry Pi which is really nice so I

00:13:17,960 --> 00:13:21,260
don't have to have my laptop open all

00:13:19,310 --> 00:13:23,150
the time I just have a Raspberry Pi in a

00:13:21,260 --> 00:13:24,920
closet in my apartment that runs this

00:13:23,150 --> 00:13:26,840
program for me so that's really nice

00:13:24,920 --> 00:13:29,530
it's basically you know editing the

00:13:26,840 --> 00:13:32,000
autostart file I'm Raspberry Pi and then

00:13:29,530 --> 00:13:33,800
also how to stop Alexa home it's not

00:13:32,000 --> 00:13:35,300
everyone knows how to search with graph

00:13:33,800 --> 00:13:36,650
through all their processes and kill a

00:13:35,300 --> 00:13:38,150
process so I thought this was pretty

00:13:36,650 --> 00:13:40,370
important and then there's also

00:13:38,150 --> 00:13:42,470
documentation for all the modules so we

00:13:40,370 --> 00:13:44,840
have a Google Calendar module Google to

00:13:42,470 --> 00:13:49,610
phone module Hugh a J River player nest

00:13:44,840 --> 00:13:51,680
uber Evernote and also scheduling so

00:13:49,610 --> 00:13:53,360
that's the docs folder and then scraper

00:13:51,680 --> 00:13:55,640
is in a separate folder and server is in

00:13:53,360 --> 00:13:57,230
a separate folder and then we have all

00:13:55,640 --> 00:13:59,090
the different modules also in their own

00:13:57,230 --> 00:14:02,060
folders so it's a very modular kind of

00:13:59,090 --> 00:14:05,960
architecture and if you take a look at

00:14:02,060 --> 00:14:07,550
the current state of things it's a lot

00:14:05,960 --> 00:14:09,350
cleaner than it was and I first started

00:14:07,550 --> 00:14:11,690
still not necessarily the best pattern

00:14:09,350 --> 00:14:13,760
but I think that it's easy to contribute

00:14:11,690 --> 00:14:16,430
to which is most important so whenever

00:14:13,760 --> 00:14:18,890
you create a new module for this for

00:14:16,430 --> 00:14:20,870
this platform basically it's a class

00:14:18,890 --> 00:14:22,040
that starts with the words I'm not going

00:14:20,870 --> 00:14:23,330
to say them because it's going to react

00:14:22,040 --> 00:14:26,570
to me but you know what i mean the a

00:14:23,330 --> 00:14:29,110
word by the way the two things you can

00:14:26,570 --> 00:14:31,269
wake it up with our that word and also

00:14:29,110 --> 00:14:32,709
amazon if you set it that way so if you

00:14:31,269 --> 00:14:34,540
happen to have an ex-girlfriend with the

00:14:32,709 --> 00:14:38,320
name you know then you can just call it

00:14:34,540 --> 00:14:39,310
amazon instead if you like so anyway

00:14:38,320 --> 00:14:42,790
we're configuring the twitter client

00:14:39,310 --> 00:14:45,610
here every class that's defined for this

00:14:42,790 --> 00:14:47,290
specific project has wake words method

00:14:45,610 --> 00:14:48,519
which is basically an array of all the

00:14:47,290 --> 00:14:50,500
different words that could wake up at

00:14:48,519 --> 00:14:52,390
specific module so before I was saying

00:14:50,500 --> 00:14:53,709
tell the world that's exactly how that

00:14:52,390 --> 00:14:55,630
works I just defined the week where it's

00:14:53,709 --> 00:14:57,310
inside of that array and then I have a

00:14:55,630 --> 00:14:58,870
process command method which is on every

00:14:57,310 --> 00:15:03,220
single class and that's going to take

00:14:58,870 --> 00:15:05,740
whatever command she output and parse it

00:15:03,220 --> 00:15:07,480
and do something with it so this is a

00:15:05,740 --> 00:15:09,579
really simple example because the

00:15:07,480 --> 00:15:11,500
Twitter gem is very easy to use right so

00:15:09,579 --> 00:15:13,870
whenever the command comes in I'm

00:15:11,500 --> 00:15:15,220
basically removing the word stop and

00:15:13,870 --> 00:15:17,200
also removing tell the world then

00:15:15,220 --> 00:15:19,570
returning whatever is left and that is

00:15:17,200 --> 00:15:21,790
what gets sent to my Twitter account and

00:15:19,570 --> 00:15:23,470
at the bottom of each module I have this

00:15:21,790 --> 00:15:25,140
constant module instances which is going

00:15:23,470 --> 00:15:27,190
to push a new instance of each module

00:15:25,140 --> 00:15:28,990
into that array and then later on we

00:15:27,190 --> 00:15:30,399
iterate through the array to check the

00:15:28,990 --> 00:15:32,860
method each time and that's actually

00:15:30,399 --> 00:15:35,430
done a nap dot RB so here we're saying

00:15:32,860 --> 00:15:38,140
first of all load the correct modules

00:15:35,430 --> 00:15:39,880
right here modules equals yamel download

00:15:38,140 --> 00:15:41,860
file this is just a quick llamo

00:15:39,880 --> 00:15:43,779
configuration file so I can decide which

00:15:41,860 --> 00:15:45,160
modules to load and in fact if you're

00:15:43,779 --> 00:15:46,930
going to be trying this at home when you

00:15:45,160 --> 00:15:48,459
get your Amazon echo i'd recommend

00:15:46,930 --> 00:15:50,199
commenting out the huemul unless you

00:15:48,459 --> 00:15:51,579
have a hue because it's going to ask you

00:15:50,199 --> 00:15:53,290
to press the button on top of your hue

00:15:51,579 --> 00:15:54,820
device but you do not have so you're

00:15:53,290 --> 00:15:56,100
going to need to do that and that's

00:15:54,820 --> 00:15:59,440
actually why we built in this module

00:15:56,100 --> 00:16:02,050
this modular module selection cool wow

00:15:59,440 --> 00:16:03,579
that was really meta um because we

00:16:02,050 --> 00:16:04,750
wanted people to be able to use this

00:16:03,579 --> 00:16:06,010
without necessarily having all the

00:16:04,750 --> 00:16:08,410
components that are necessary for all

00:16:06,010 --> 00:16:11,110
the different packages that it uses and

00:16:08,410 --> 00:16:12,490
we have some selectivity there so so

00:16:11,110 --> 00:16:13,750
once again we're using this to figure

00:16:12,490 --> 00:16:15,880
out which modules were going to load

00:16:13,750 --> 00:16:18,370
we're going to iterate over each module

00:16:15,880 --> 00:16:20,769
and then require it inside of this loop

00:16:18,370 --> 00:16:22,360
and then whenever we get a command we're

00:16:20,769 --> 00:16:25,300
going to use the module instances that

00:16:22,360 --> 00:16:26,890
we have and basically scan through the

00:16:25,300 --> 00:16:29,980
command that we get for any of the wake

00:16:26,890 --> 00:16:31,390
words here if we find any of the wake

00:16:29,980 --> 00:16:33,399
words that will process the command

00:16:31,390 --> 00:16:34,839
using that specific module so

00:16:33,399 --> 00:16:37,000
everything's a lot more modular now

00:16:34,839 --> 00:16:40,029
people are contributing to the project

00:16:37,000 --> 00:16:41,680
there's a man Stephen Arcana out

00:16:40,029 --> 00:16:42,380
in Washington who is already contributed

00:16:41,680 --> 00:16:43,700
three or four different

00:16:42,380 --> 00:16:45,230
jules and is this really gung-ho about

00:16:43,700 --> 00:16:47,300
it and yeah it actually got him into

00:16:45,230 --> 00:16:48,830
Ruby which I was really happy about to

00:16:47,300 --> 00:16:52,670
see another rubios kind of join the team

00:16:48,830 --> 00:16:53,690
was great and generally I'm just much

00:16:52,670 --> 00:16:56,000
more happy with the way this

00:16:53,690 --> 00:16:57,980
architecture is laid out just anything

00:16:56,000 --> 00:16:59,390
that contributes more open source that

00:16:57,980 --> 00:17:01,310
encourages more open source

00:16:59,390 --> 00:17:07,010
contributions as in my mind something

00:17:01,310 --> 00:17:09,650
that's great so cool so imitation is the

00:17:07,010 --> 00:17:12,650
sincerest form of flattery well be zose

00:17:09,650 --> 00:17:14,810
laughs on yacht Jeff Jesus that is the

00:17:12,650 --> 00:17:16,280
head of Amazon Alexa home is actually

00:17:14,810 --> 00:17:17,990
the first to market with these now

00:17:16,280 --> 00:17:19,819
native integrations what I mean by that

00:17:17,990 --> 00:17:21,260
is that i actually hacked together these

00:17:19,819 --> 00:17:22,850
integrations that about a month later

00:17:21,260 --> 00:17:24,920
amazon came out with the same exact

00:17:22,850 --> 00:17:27,380
thing and fair product so i thought that

00:17:24,920 --> 00:17:28,760
was kind of funny and you know whatever

00:17:27,380 --> 00:17:30,340
amazon that's cool i'm not going to see

00:17:28,760 --> 00:17:34,640
you or anything i would never do that

00:17:30,340 --> 00:17:36,440
that's impossible apparently yeah but we

00:17:34,640 --> 00:17:39,830
came out with a hue model and the humans

00:17:36,440 --> 00:17:41,660
will for this project can control not

00:17:39,830 --> 00:17:43,790
only turning the lights on and off but

00:17:41,660 --> 00:17:46,490
also the brightness of the lights the

00:17:43,790 --> 00:17:47,870
saturation also many many different

00:17:46,490 --> 00:17:49,850
colors of the lights which is really

00:17:47,870 --> 00:17:52,040
nice and the modules they have can turn

00:17:49,850 --> 00:17:53,570
the model off which is great but I want

00:17:52,040 --> 00:17:57,500
more functionality so I'm still using my

00:17:53,570 --> 00:18:00,200
hack there's also a Google Calendar

00:17:57,500 --> 00:18:02,120
module which is contributed by Steve

00:18:00,200 --> 00:18:03,710
Arcana and they actually just

00:18:02,120 --> 00:18:05,510
integrated that two or three weeks ago

00:18:03,710 --> 00:18:06,890
so leading up to this talk I was

00:18:05,510 --> 00:18:08,180
panicking a little bit i was like what

00:18:06,890 --> 00:18:09,980
if they take all the integrations that

00:18:08,180 --> 00:18:11,300
i've created and i have literally you

00:18:09,980 --> 00:18:12,830
know presenting the same exact thing

00:18:11,300 --> 00:18:14,540
that is now inside of this product but

00:18:12,830 --> 00:18:16,220
you know luckily they only took two of

00:18:14,540 --> 00:18:19,460
them so i saw some other things to show

00:18:16,220 --> 00:18:22,130
you guys it is nice there's also an

00:18:19,460 --> 00:18:23,990
official api now so you don't have to

00:18:22,130 --> 00:18:25,640
use my hack any more correctly i think

00:18:23,990 --> 00:18:28,160
it's a bit easier to use because the way

00:18:25,640 --> 00:18:29,420
that their they've kind of like only

00:18:28,160 --> 00:18:30,800
vaguely released some details the

00:18:29,420 --> 00:18:32,270
developer program but it's not just

00:18:30,800 --> 00:18:35,600
parsing text it's a bit more difficult

00:18:32,270 --> 00:18:37,310
than that and i think frankly that my my

00:18:35,600 --> 00:18:39,290
hack is easier to program apps with than

00:18:37,310 --> 00:18:40,670
their official program so what I'd love

00:18:39,290 --> 00:18:42,740
to do one day is create some kind of

00:18:40,670 --> 00:18:44,210
Ruby dsl for creating applications for

00:18:42,740 --> 00:18:46,850
the Amazon echo that makes it as easy to

00:18:44,210 --> 00:18:49,910
use as modular as the library that I've

00:18:46,850 --> 00:18:52,850
built versus what's out officially

00:18:49,910 --> 00:18:54,680
currently so so I'm going to give you

00:18:52,850 --> 00:18:56,870
guys one final demo and then I'm going

00:18:54,680 --> 00:19:00,720
to leave some time for class

00:18:56,870 --> 00:19:05,310
this is a demo with uber so we need to

00:19:00,720 --> 00:19:07,890
bring up that app make sure my servers

00:19:05,310 --> 00:19:11,610
running yep now I need to raid the sky

00:19:07,890 --> 00:19:16,790
what should I give him it was pretty

00:19:11,610 --> 00:19:16,790
good it was a pretty good ride good job

00:19:17,180 --> 00:19:22,470
cool so I'm not going to I'm not

00:19:20,310 --> 00:19:26,430
pressing any buttons here and lets the

00:19:22,470 --> 00:19:30,710
stove of this works Alexa get me a cab

00:19:26,430 --> 00:19:30,710
to Union Square New York New York stop

00:19:32,300 --> 00:19:41,090
so I'm not touching no just my voice

00:19:35,850 --> 00:19:45,060
give it a moment here see what happens

00:19:41,090 --> 00:19:47,910
and my drivers confirmed and in route to

00:19:45,060 --> 00:19:49,200
my apartment in Brooklyn so you're all

00:19:47,910 --> 00:19:52,230
wondering oh well why are we in brooklyn

00:19:49,200 --> 00:19:53,640
right now so i did all the testing there

00:19:52,230 --> 00:19:55,830
and that's kind of what's hard coded in

00:19:53,640 --> 00:19:57,720
right now but in the future I'd hope to

00:19:55,830 --> 00:19:59,610
be able to parse both you know beginning

00:19:57,720 --> 00:20:01,350
and ending locations as well and you can

00:19:59,610 --> 00:20:04,380
actually get a cab with your voice which

00:20:01,350 --> 00:20:06,840
is pretty cool I have to cancel this

00:20:04,380 --> 00:20:10,830
ride unfortunately if so I'm sorry I

00:20:06,840 --> 00:20:14,940
Milan any of you guys noble on son of my

00:20:10,830 --> 00:20:16,830
apologies cool so that's what I've got

00:20:14,940 --> 00:20:19,290
for you guys I have more stuff at Alexa

00:20:16,830 --> 00:20:20,670
ho Demi and I'd love for you guys to

00:20:19,290 --> 00:20:22,140
contribute to this project as you get

00:20:20,670 --> 00:20:24,270
your echoes and we can keep kind of

00:20:22,140 --> 00:20:26,310
hacking on it and I'd love to eventually

00:20:24,270 --> 00:20:27,900
like I said build the dsl that means you

00:20:26,310 --> 00:20:29,820
can bring all those modules over to the

00:20:27,900 --> 00:20:32,840
native platform once that's out to the

00:20:29,820 --> 00:20:32,840
public thanks guys

00:20:45,130 --> 00:20:47,190

YouTube URL: https://www.youtube.com/watch?v=u1guHGWD1TU


