Title: GORUCO 2015: Aaron Patterson: Closing Keynote
Publication date: 2020-01-23
Playlist: GORUCO 2015
Description: 
	@tenderlove

 Talk given at GORUCO 2015: http://goruco.com
Captions: 
	00:00:14,780 --> 00:00:19,080
so I want to say thanks to all the

00:00:17,070 --> 00:00:21,660
organizers I'm really really honored to

00:00:19,080 --> 00:00:24,380
be here we were talking last night about

00:00:21,660 --> 00:00:26,759
how I think guru co is the oldest

00:00:24,380 --> 00:00:30,869
regional conference I don't think

00:00:26,759 --> 00:00:32,640
anybody has refuted that yet and go Rico

00:00:30,869 --> 00:00:34,800
is also very special to me because it's

00:00:32,640 --> 00:00:37,410
the first regional conference I ever

00:00:34,800 --> 00:00:39,030
attended so I'm really happy and honored

00:00:37,410 --> 00:00:42,390
to be here to speak speak to you today

00:00:39,030 --> 00:00:45,960
so thank you for having me here I just

00:00:42,390 --> 00:00:50,880
want to start off and say that I I the

00:00:45,960 --> 00:00:54,540
code I've broken it it is broken that is

00:00:50,880 --> 00:00:58,620
it so this this talk is called code

00:00:54,540 --> 00:01:00,660
required I have to do every slide in

00:00:58,620 --> 00:01:02,280
seven seconds or less because there are

00:01:00,660 --> 00:01:07,229
many slides my name is Aaron Patterson

00:01:02,280 --> 00:01:09,360
uh I'm your closing keynote and I am the

00:01:07,229 --> 00:01:14,759
only thing that stands between you and

00:01:09,360 --> 00:01:16,320
beer right now so I'll try I'll try to

00:01:14,759 --> 00:01:17,939
hurry it along oh I also want to say

00:01:16,320 --> 00:01:23,940
thank you to the organizers for passing

00:01:17,939 --> 00:01:25,430
out those surveys before I speak so if

00:01:23,940 --> 00:01:28,200
you haven't filled it out yet you know

00:01:25,430 --> 00:01:31,890
be sure to say nice things about me like

00:01:28,200 --> 00:01:35,250
I want feedback but only good feedback I

00:01:31,890 --> 00:01:37,380
work for a company called red hat at Red

00:01:35,250 --> 00:01:39,659
Hat I'm on the manage IQ team our team

00:01:37,380 --> 00:01:42,090
builds an application for managing

00:01:39,659 --> 00:01:45,210
containers and virtualization stuff we

00:01:42,090 --> 00:01:47,460
if you have a cloud we will manage it my

00:01:45,210 --> 00:01:52,560
title on the team is hacker man this is

00:01:47,460 --> 00:01:54,659
me all of our so all of our code is open

00:01:52,560 --> 00:01:56,700
source and you can actually go get it

00:01:54,659 --> 00:01:57,810
here and throughout my talk I'm going to

00:01:56,700 --> 00:02:00,210
be referring to different benchmarks

00:01:57,810 --> 00:02:02,100
that I brought and different things that

00:02:00,210 --> 00:02:04,560
I'm doing and testing and I usually test

00:02:02,100 --> 00:02:06,210
it against our our applications so if

00:02:04,560 --> 00:02:08,489
you want to see the code that word or

00:02:06,210 --> 00:02:10,890
that i'm testing against you can go

00:02:08,489 --> 00:02:12,750
ahead here and check it out i'm on the

00:02:10,890 --> 00:02:15,269
ruby core team i'm also on the rails

00:02:12,750 --> 00:02:18,540
core team i'm the only person that is on

00:02:15,269 --> 00:02:20,730
both teams as far as i know so i want to

00:02:18,540 --> 00:02:22,020
say i want to say thanks again to all of

00:02:20,730 --> 00:02:24,360
you for being here into the word

00:02:22,020 --> 00:02:27,150
for having me I really wanted to go out

00:02:24,360 --> 00:02:29,250
like I'm from Seattle i'm from the west

00:02:27,150 --> 00:02:31,710
coast we don't really have is good you

00:02:29,250 --> 00:02:33,270
know good traditional New York Pizza

00:02:31,710 --> 00:02:35,340
there so I really wanted to go get some

00:02:33,270 --> 00:02:39,480
traditional New York style pizza but I

00:02:35,340 --> 00:02:41,370
didn't have time yet so fortunately

00:02:39,480 --> 00:02:46,950
Eileen and her husband went out and got

00:02:41,370 --> 00:02:49,470
some traditional New York Keitha anyway

00:02:46,950 --> 00:02:51,450
my my wife is coming later today we have

00:02:49,470 --> 00:02:54,150
some reservations we're gonna go we're

00:02:51,450 --> 00:02:56,940
gonna go to this really nice Italian

00:02:54,150 --> 00:02:59,640
joint I'm not sure where it where is it

00:02:56,940 --> 00:03:03,300
my community and time it in time square

00:02:59,640 --> 00:03:07,860
it's called all garden you might maybe

00:03:03,300 --> 00:03:08,820
you've heard of it so I'm gonna go over

00:03:07,860 --> 00:03:10,320
some things I've learned at the

00:03:08,820 --> 00:03:11,400
conference here so I'm going to talk

00:03:10,320 --> 00:03:15,300
about all the things that I've learned

00:03:11,400 --> 00:03:16,590
so far first I learned that we should

00:03:15,300 --> 00:03:22,380
not hate the player we should hate the

00:03:16,590 --> 00:03:24,750
game theory haha i leap from eileen i er

00:03:22,380 --> 00:03:31,650
I learned about a vb which means always

00:03:24,750 --> 00:03:33,209
be borrowing Eileen's go ahead so I

00:03:31,650 --> 00:03:36,240
learned I learned about how to control

00:03:33,209 --> 00:03:38,480
hue lights this is a very enlightening

00:03:36,240 --> 00:03:38,480
talk

00:03:41,489 --> 00:03:49,870
25 minutes left right I learned about

00:03:47,290 --> 00:03:51,190
caching and the dangers of caching and I

00:03:49,870 --> 00:03:55,420
learned that I should just be cashing

00:03:51,190 --> 00:04:01,150
everything all the time something

00:03:55,420 --> 00:04:07,060
something turbo links uh-huh happy

00:04:01,150 --> 00:04:09,459
birthday uh we learned about

00:04:07,060 --> 00:04:10,870
just-in-time compilers so when I think

00:04:09,459 --> 00:04:15,640
about Justin time compilers and

00:04:10,870 --> 00:04:17,530
javascript is what I think of I hope

00:04:15,640 --> 00:04:19,329
that I hope that when Ruby gets a

00:04:17,530 --> 00:04:24,040
just-in-time compiler it can be a bit

00:04:19,329 --> 00:04:26,050
more like this a bit more classy so from

00:04:24,040 --> 00:04:27,520
Carrie I learned about science and the

00:04:26,050 --> 00:04:34,000
main thing that I took home from her

00:04:27,520 --> 00:04:37,060
talk is that homeopathy works I need

00:04:34,000 --> 00:04:39,370
adult a Doge sweater I learned about

00:04:37,060 --> 00:04:41,139
Skynet and pair programming and I want

00:04:39,370 --> 00:04:46,510
to show you the I do pair programming to

00:04:41,139 --> 00:04:51,190
time I'm programming a pair programming

00:04:46,510 --> 00:04:55,500
is hard but teaching sounds harder this

00:04:51,190 --> 00:04:55,500
guy works for Shopify maybe I'm not sure

00:04:57,600 --> 00:05:01,780
so the point that I'm trying to make

00:04:59,919 --> 00:05:04,539
here is that we've had on like many

00:05:01,780 --> 00:05:06,700
amazing speakers today with incredible

00:05:04,539 --> 00:05:08,740
information and amazing slides like

00:05:06,700 --> 00:05:10,419
they're very very stylish like really

00:05:08,740 --> 00:05:13,660
just really really cool and what I want

00:05:10,419 --> 00:05:18,120
to get across to you is that for my talk

00:05:13,660 --> 00:05:21,400
you need to lower your expectations so

00:05:18,120 --> 00:05:23,470
Mike said to me you know what is you

00:05:21,400 --> 00:05:24,639
know I although organizers have been

00:05:23,470 --> 00:05:26,320
asking what's your talk about what's

00:05:24,639 --> 00:05:28,090
your talk about and he he told the

00:05:26,320 --> 00:05:29,620
organizers my talk is about cats and it

00:05:28,090 --> 00:05:32,260
really that's what it is it's all about

00:05:29,620 --> 00:05:34,630
cats I actually am a pro neck a lot to

00:05:32,260 --> 00:05:36,340
my player this is my this is my game

00:05:34,630 --> 00:05:38,530
field here you can really see that I

00:05:36,340 --> 00:05:40,000
have some real real cats that I'm

00:05:38,530 --> 00:05:43,330
collecting at home this is one of them

00:05:40,000 --> 00:05:44,950
is 22 thats that's one cat and Gorby

00:05:43,330 --> 00:05:46,690
puffs and if you want to have a cat like

00:05:44,950 --> 00:05:48,480
this I have instructions for how to do

00:05:46,690 --> 00:05:59,280
it this is how you do it it's good

00:05:48,480 --> 00:06:02,850
okay here's a picture that I like no

00:05:59,280 --> 00:06:04,590
reason I just like I also like strange

00:06:02,850 --> 00:06:05,850
keyboards too so if you like strange

00:06:04,590 --> 00:06:07,290
keyboards you should come talk to me

00:06:05,850 --> 00:06:09,150
this is a picture of a keyboard that I

00:06:07,290 --> 00:06:10,920
built myself I have it here here's

00:06:09,150 --> 00:06:14,010
another one that I built my cat likes it

00:06:10,920 --> 00:06:16,740
other cat likes it too she likes that a

00:06:14,010 --> 00:06:18,120
lot we also made like another thing I

00:06:16,740 --> 00:06:21,330
want to share with you is that my wife

00:06:18,120 --> 00:06:23,400
and I made some holiday cards last

00:06:21,330 --> 00:06:24,960
December but we didn't get around to

00:06:23,400 --> 00:06:26,370
sending them out so i'm just showing the

00:06:24,960 --> 00:06:30,030
pictures at all the conferences that i

00:06:26,370 --> 00:06:36,450
go to so this is this is it here's

00:06:30,030 --> 00:06:37,950
another one another one unfortunately i

00:06:36,450 --> 00:06:39,600
don't actually own the copyright to

00:06:37,950 --> 00:06:41,430
these images which you can talk to me

00:06:39,600 --> 00:06:45,600
about late i will complain about this on

00:06:41,430 --> 00:06:48,180
the boat another one of my cats anyway

00:06:45,600 --> 00:06:49,590
i'm an extreme programmer i love extreme

00:06:48,180 --> 00:06:52,380
programming and i had an opportunity

00:06:49,590 --> 00:06:53,730
while i was at railsconf to meet kent

00:06:52,380 --> 00:06:55,740
beck which was really really amazing

00:06:53,730 --> 00:06:59,040
this is me meeting him there he is right

00:06:55,740 --> 00:07:01,200
there we we became fast friends we're

00:06:59,040 --> 00:07:03,870
BFFs now which is really really exciting

00:07:01,200 --> 00:07:07,980
we together we're collaborating very

00:07:03,870 --> 00:07:10,050
closely we're collaborating very closely

00:07:07,980 --> 00:07:12,420
on some new equipment for doing extreme

00:07:10,050 --> 00:07:14,370
programming it's essentially a extreme

00:07:12,420 --> 00:07:16,290
programming safety gear and this is this

00:07:14,370 --> 00:07:18,060
is it right here working on it at home

00:07:16,290 --> 00:07:21,150
so I can do extreme programming at home

00:07:18,060 --> 00:07:24,360
anyway I'm really sorry like this this

00:07:21,150 --> 00:07:26,330
whole talk now we're done I'm calming

00:07:24,360 --> 00:07:28,440
down on stage we are through the

00:07:26,330 --> 00:07:29,790
entertainment section of this talk now

00:07:28,440 --> 00:07:31,470
we're gonna now we're going to get down

00:07:29,790 --> 00:07:34,110
to the nitty-gritty unfortunately this

00:07:31,470 --> 00:07:36,120
talk is all tech stuff so it's very very

00:07:34,110 --> 00:07:40,350
technical and I apologize in advance for

00:07:36,120 --> 00:07:42,840
that so welcome you may have noticed

00:07:40,350 --> 00:07:45,810
something about my slides that the font

00:07:42,840 --> 00:07:47,310
is actually in Baskerville and the

00:07:45,810 --> 00:07:49,680
reason that it's in Baskerville is

00:07:47,310 --> 00:07:51,620
because apparently i read online that if

00:07:49,680 --> 00:07:56,070
you use Baskerville it's more believable

00:07:51,620 --> 00:07:58,740
so I'm going to show you a bunch of

00:07:56,070 --> 00:07:59,470
numbers and code and you should believe

00:07:58,740 --> 00:08:03,940
it

00:07:59,470 --> 00:08:05,620
the font clearly anyway so this this

00:08:03,940 --> 00:08:07,000
talk is everything you ever wanted to

00:08:05,620 --> 00:08:08,980
know about loading files but we're

00:08:07,000 --> 00:08:10,090
afraid to ask or maybe you didn't really

00:08:08,980 --> 00:08:12,160
want to know that but you're stuck at

00:08:10,090 --> 00:08:14,440
this conference anyway watching me so

00:08:12,160 --> 00:08:16,000
you'll just endure my talk or code

00:08:14,440 --> 00:08:17,530
required so I'm going to talk about

00:08:16,000 --> 00:08:19,210
loading code i'm going to talk about

00:08:17,530 --> 00:08:21,220
performance with loading code and how we

00:08:19,210 --> 00:08:25,030
can improve performance going going

00:08:21,220 --> 00:08:28,720
forward and what to do it so the reason

00:08:25,030 --> 00:08:30,790
I got into this this issue is i was

00:08:28,720 --> 00:08:33,849
sitting there on my computer and like I

00:08:30,790 --> 00:08:35,530
i compute away and i love using IRB and

00:08:33,849 --> 00:08:37,180
I'm sitting there because I pull that up

00:08:35,530 --> 00:08:38,530
that's my calculator or when I need to

00:08:37,180 --> 00:08:42,099
you know when I need to calculate some

00:08:38,530 --> 00:08:44,590
stuff I pull up IRB a run IRB and it

00:08:42,099 --> 00:08:49,000
just SAT there I was like okay IRB enter

00:08:44,590 --> 00:08:54,340
and then it was like okay okay okay

00:08:49,000 --> 00:08:57,130
prompt and I'm like what why Wyatt why

00:08:54,340 --> 00:08:58,810
isn't this fast why is why is this not

00:08:57,130 --> 00:09:00,760
fast I just had to hurt me that's all I

00:08:58,810 --> 00:09:03,250
did I'm not doing anything wrong what

00:09:00,760 --> 00:09:05,430
did I do so it turns out the reason that

00:09:03,250 --> 00:09:07,180
I RB was slow i started investing

00:09:05,430 --> 00:09:09,850
investigating this is because i have

00:09:07,180 --> 00:09:11,980
tons of gems on my machine i have maybe

00:09:09,850 --> 00:09:14,680
i don't know six or seven hundred gems

00:09:11,980 --> 00:09:16,300
installed on my machine and turns out

00:09:14,680 --> 00:09:18,310
the answer to this the answer to

00:09:16,300 --> 00:09:20,710
speeding up IRB was that don't install

00:09:18,310 --> 00:09:23,020
so many gems and I thought to myself

00:09:20,710 --> 00:09:24,970
don't tell me how many gems to install

00:09:23,020 --> 00:09:27,190
I'm an install as made gems as I want to

00:09:24,970 --> 00:09:28,960
I apart I apologize for the outdated

00:09:27,190 --> 00:09:31,180
mean but this is how I felt I was just

00:09:28,960 --> 00:09:33,730
pissed I like I want it to be fast it

00:09:31,180 --> 00:09:36,280
doesn't matter I have gems who cares IRB

00:09:33,730 --> 00:09:43,050
should be fast just to make it fast just

00:09:36,280 --> 00:09:43,050
do it just do it just do it

00:09:43,650 --> 00:09:47,890
unfortunately nobody will do this nobody

00:09:45,970 --> 00:09:50,170
does this but we will do it we're going

00:09:47,890 --> 00:09:52,330
to talk about it so the other thing is

00:09:50,170 --> 00:09:53,710
that i was looking into rails i'm

00:09:52,330 --> 00:09:55,150
looking into boot time a lot of what i'm

00:09:53,710 --> 00:09:57,430
going to talk about i touched on this a

00:09:55,150 --> 00:09:59,500
little bit of my railsconf keynote but

00:09:57,430 --> 00:10:01,810
that was more about performance from

00:09:59,500 --> 00:10:03,760
external outside of your application

00:10:01,810 --> 00:10:06,070
like running IRB or running running

00:10:03,760 --> 00:10:07,990
different things on your system like

00:10:06,070 --> 00:10:09,880
bundle or whatever today I want to talk

00:10:07,990 --> 00:10:10,630
about internal stuff stuff that's in

00:10:09,880 --> 00:10:12,280
turn in

00:10:10,630 --> 00:10:14,470
Colonel to your application loading code

00:10:12,280 --> 00:10:16,380
inside of apps rather than from the

00:10:14,470 --> 00:10:19,540
outside and you can think of this as

00:10:16,380 --> 00:10:21,130
essentially inside of your apps being

00:10:19,540 --> 00:10:24,370
anything run inside a bundler

00:10:21,130 --> 00:10:26,890
essentially so I'm looking at boot time

00:10:24,370 --> 00:10:29,080
a lot and the application that we have

00:10:26,890 --> 00:10:30,430
at work has I did where I ran rake stats

00:10:29,080 --> 00:10:32,560
on it and this is about what it looks

00:10:30,430 --> 00:10:35,890
like we have over 500 models 83

00:10:32,560 --> 00:10:37,960
controllers says 292,000 lines of code

00:10:35,890 --> 00:10:39,640
our boot boot time is about 12 seconds

00:10:37,960 --> 00:10:42,310
and the way I measured that boot I'm a

00:10:39,640 --> 00:10:44,350
totally scientific process which I

00:10:42,310 --> 00:10:47,950
learned earlier learned about earlier in

00:10:44,350 --> 00:10:49,570
this conference it's just a runtime all

00:10:47,950 --> 00:10:52,360
I did was run time on this is what it

00:10:49,570 --> 00:10:54,430
looks like on our on our application so

00:10:52,360 --> 00:10:56,080
what I want to talk about first is we're

00:10:54,430 --> 00:10:57,760
going to talk about how files are

00:10:56,080 --> 00:11:01,030
actually loaded in Ruby then we're going

00:10:57,760 --> 00:11:02,980
to talk about gems and they're the

00:11:01,030 --> 00:11:04,960
ecosystem of surrounding gems and we're

00:11:02,980 --> 00:11:07,270
going to talk about speeding up actually

00:11:04,960 --> 00:11:09,760
speeding up the code loading process so

00:11:07,270 --> 00:11:11,230
the way that files are loaded is there

00:11:09,760 --> 00:11:12,910
are three different ways we can load

00:11:11,230 --> 00:11:14,380
files in Ruby there's actually four

00:11:12,910 --> 00:11:17,620
let's talk about the fourth one on the

00:11:14,380 --> 00:11:19,360
boat the three ones are load require an

00:11:17,620 --> 00:11:21,250
auto load and these all involve a few

00:11:19,360 --> 00:11:23,440
global variables and those few global

00:11:21,250 --> 00:11:24,850
variables are the load path dollar load

00:11:23,440 --> 00:11:27,340
paths you may have seen this before and

00:11:24,850 --> 00:11:30,700
all dollar load path is it's just a list

00:11:27,340 --> 00:11:31,930
so whenever we do a require on a file it

00:11:30,700 --> 00:11:33,910
looks at the load path and we can

00:11:31,930 --> 00:11:35,740
actually modify the load path via just

00:11:33,910 --> 00:11:37,360
we can mutate it like that or you can

00:11:35,740 --> 00:11:39,610
actually do a dash I on the command line

00:11:37,360 --> 00:11:41,680
and that will also mutate mutate the

00:11:39,610 --> 00:11:43,990
load path so if we run with a dash hi

00:11:41,680 --> 00:11:46,360
you can see here okay we've mutated it

00:11:43,990 --> 00:11:48,400
our stuff is at the top of the list so

00:11:46,360 --> 00:11:50,770
essentially the load path is our code to

00:11:48,400 --> 00:11:53,290
load data base that's we need to load

00:11:50,770 --> 00:11:54,790
some code where do we find that go look

00:11:53,290 --> 00:11:57,340
in this thing to figure out where we can

00:11:54,790 --> 00:11:59,290
find that code so the other thing we

00:11:57,340 --> 00:12:00,850
need to know is probably all of you are

00:11:59,290 --> 00:12:02,950
aware when you do require you can

00:12:00,850 --> 00:12:04,960
require a file twice but only loads the

00:12:02,950 --> 00:12:07,570
file once so how does it do that it does

00:12:04,960 --> 00:12:08,890
that with a variable called loaded

00:12:07,570 --> 00:12:11,230
features this is the other global

00:12:08,890 --> 00:12:13,450
variable and this this global variable

00:12:11,230 --> 00:12:15,190
is also just a list no it's not just a

00:12:13,450 --> 00:12:17,260
list but it looks like a list to you

00:12:15,190 --> 00:12:19,420
however internally Ruby keeps a cache

00:12:17,260 --> 00:12:22,060
that's actually a hash so lookups are

00:12:19,420 --> 00:12:23,230
fast inside of MRI although to us Ruby

00:12:22,060 --> 00:12:25,510
programmers when we just

00:12:23,230 --> 00:12:27,880
got it it'll look like a list so this

00:12:25,510 --> 00:12:29,650
list is our already loaded code database

00:12:27,880 --> 00:12:32,170
this is code that's already been loaded

00:12:29,650 --> 00:12:34,270
in so just to keep this in mind if we

00:12:32,170 --> 00:12:36,010
need to find some code we use loaded the

00:12:34,270 --> 00:12:37,780
load path in order to determine whether

00:12:36,010 --> 00:12:40,030
or not the code has already already been

00:12:37,780 --> 00:12:41,380
loaded we look at loaded features so

00:12:40,030 --> 00:12:42,820
with that let's take a look at some of

00:12:41,380 --> 00:12:44,350
the methods that we use for actually

00:12:42,820 --> 00:12:46,210
loading code and Ruby this is the first

00:12:44,350 --> 00:12:48,730
one it's called load and it's the

00:12:46,210 --> 00:12:50,620
easiest way to load files it'll load the

00:12:48,730 --> 00:12:52,450
file however many times you call it

00:12:50,620 --> 00:12:54,040
it'll load that file every single time

00:12:52,450 --> 00:12:56,950
this is what it looks like we can use it

00:12:54,040 --> 00:12:58,510
do load with a full path and if we run

00:12:56,950 --> 00:13:01,330
this code you'll see that outputs hello

00:12:58,510 --> 00:13:03,010
world twice makes sense it just looks up

00:13:01,330 --> 00:13:05,140
the file and actually execute the code

00:13:03,010 --> 00:13:07,270
inside that file we can also use a

00:13:05,140 --> 00:13:09,190
relative path so we can just say like we

00:13:07,270 --> 00:13:11,380
don't have to fully qualify the path and

00:13:09,190 --> 00:13:13,690
if we do that then we have to mutate the

00:13:11,380 --> 00:13:16,060
loaded the load path in order for load

00:13:13,690 --> 00:13:18,010
define that so load consults the load

00:13:16,060 --> 00:13:19,750
path in order to find file so if we run

00:13:18,010 --> 00:13:21,550
this again you'll see I had to specify

00:13:19,750 --> 00:13:24,070
dash I there so that it would actually

00:13:21,550 --> 00:13:27,160
find those find those files so load

00:13:24,070 --> 00:13:29,050
actually searches load path the other

00:13:27,160 --> 00:13:30,610
thing to notice about load which maybe

00:13:29,050 --> 00:13:32,710
you've never seen this before but it has

00:13:30,610 --> 00:13:36,010
a second parameter they're called wrap

00:13:32,710 --> 00:13:37,840
and that wrap defaults to false so we'll

00:13:36,010 --> 00:13:39,880
try turning that on and making it true

00:13:37,840 --> 00:13:41,560
in a minute but if we say let's look at

00:13:39,880 --> 00:13:43,960
this test program here first we'll load

00:13:41,560 --> 00:13:46,210
X dot RB and inside of X dot RB will

00:13:43,960 --> 00:13:48,610
define a class X and we'll print out the

00:13:46,210 --> 00:13:50,560
name of the class and then back over in

00:13:48,610 --> 00:13:52,180
the first file test dot RB will print

00:13:50,560 --> 00:13:54,580
out the constant so we can see what it

00:13:52,180 --> 00:13:56,680
looks like we run it not a problem we

00:13:54,580 --> 00:13:59,920
get X the name of the class and then we

00:13:56,680 --> 00:14:02,350
get the actual class itself now if we

00:13:59,920 --> 00:14:04,510
turn that thing to true if we say if we

00:14:02,350 --> 00:14:06,820
change that second parameter to true

00:14:04,510 --> 00:14:08,920
what Ruby will do is it'll actually wrap

00:14:06,820 --> 00:14:11,800
that entire file inside of an anonymous

00:14:08,920 --> 00:14:14,530
module so when we run this again inside

00:14:11,800 --> 00:14:16,090
the file you'll see instead of X it's

00:14:14,530 --> 00:14:19,030
now module blah blah blah blah blah blah

00:14:16,090 --> 00:14:20,950
blah X and then the original files has

00:14:19,030 --> 00:14:23,560
uninitialized constant X because we

00:14:20,950 --> 00:14:25,540
didn't define X at the top level so I

00:14:23,560 --> 00:14:27,010
think this is really cool isn't it this

00:14:25,540 --> 00:14:29,650
seems like a really cool feature like

00:14:27,010 --> 00:14:32,400
you might be able to say like ok I have

00:14:29,650 --> 00:14:35,430
a library this library requires

00:14:32,400 --> 00:14:36,990
I don't know some JSON version one this

00:14:35,430 --> 00:14:38,850
other one requires JSON version two

00:14:36,990 --> 00:14:40,560
maybe we could namespace them inside of

00:14:38,850 --> 00:14:42,930
this anonymous module well unfortunately

00:14:40,560 --> 00:14:45,000
there's a little caveat let's say we do

00:14:42,930 --> 00:14:48,900
this we load three three files we say

00:14:45,000 --> 00:14:51,450
this loads xrp this loads that Y dot RB

00:14:48,900 --> 00:14:53,250
and then these print out the different

00:14:51,450 --> 00:14:55,170
names so if we look at the order of this

00:14:53,250 --> 00:14:57,390
will expect this bottom one to be

00:14:55,170 --> 00:14:58,890
printed out first the name of Y then

00:14:57,390 --> 00:15:02,130
we'll expect that second one to be

00:14:58,890 --> 00:15:03,300
printed out there the name of X so when

00:15:02,130 --> 00:15:06,750
you think about this what do you think

00:15:03,300 --> 00:15:08,730
the output would be me a reasonable

00:15:06,750 --> 00:15:10,350
person would think that both of these

00:15:08,730 --> 00:15:11,940
will be wrapped inside of a module but

00:15:10,350 --> 00:15:13,890
in fact they are not only that very

00:15:11,940 --> 00:15:15,810
first one is wrapped inside of a module

00:15:13,890 --> 00:15:18,270
all the ones that it depends on are not

00:15:15,810 --> 00:15:20,580
wrapped inside of a module so it only

00:15:18,270 --> 00:15:24,300
wraps that very first one so my question

00:15:20,580 --> 00:15:26,160
is is it useful I don't know it seems

00:15:24,300 --> 00:15:27,990
like I don't know what I would use this

00:15:26,160 --> 00:15:29,790
for I've never ever seen this used in

00:15:27,990 --> 00:15:31,350
the wild it seems like you would want to

00:15:29,790 --> 00:15:32,700
wrap everything or just remove this

00:15:31,350 --> 00:15:34,050
feature i'm not sure what it's for i

00:15:32,700 --> 00:15:38,660
actually talked to matt's about this

00:15:34,050 --> 00:15:43,020
particular feature and he was like ah so

00:15:38,660 --> 00:15:45,000
there you go anyway summary of load load

00:15:43,020 --> 00:15:46,620
searches the load path has no

00:15:45,000 --> 00:15:49,830
interaction with the loaded features

00:15:46,620 --> 00:15:51,750
list whatsoever okay our next one is

00:15:49,830 --> 00:15:53,520
required and we all know require we've

00:15:51,750 --> 00:15:55,530
typed this into our Ruby programs this

00:15:53,520 --> 00:15:58,410
is a very simple example of it you can

00:15:55,530 --> 00:16:00,030
give require a full path and if you call

00:15:58,410 --> 00:16:01,560
require twice it's only going to print

00:16:00,030 --> 00:16:03,690
out a hello world once we run the code

00:16:01,560 --> 00:16:05,640
works just like that or we can give it a

00:16:03,690 --> 00:16:07,020
relative path and if we give it a

00:16:05,640 --> 00:16:09,390
relative path that'll have the same

00:16:07,020 --> 00:16:11,160
behavior but we have to change dash I so

00:16:09,390 --> 00:16:13,380
that it mutates the load path son knows

00:16:11,160 --> 00:16:15,360
where to find those files so you can see

00:16:13,380 --> 00:16:17,280
there have added / temp to the load path

00:16:15,360 --> 00:16:18,900
so it can find them now what's also

00:16:17,280 --> 00:16:20,850
interesting about require is that

00:16:18,900 --> 00:16:22,380
require will return a boolean and that

00:16:20,850 --> 00:16:26,210
boolean indicates whether or not the

00:16:22,380 --> 00:16:29,400
file has already been required right so

00:16:26,210 --> 00:16:30,930
it will return true indicating we loaded

00:16:29,400 --> 00:16:32,940
the file or it'll return false

00:16:30,930 --> 00:16:34,920
indicating I didn't load the file it's

00:16:32,940 --> 00:16:36,480
already been loaded so you can tell if

00:16:34,920 --> 00:16:38,760
you look at the return value of require

00:16:36,480 --> 00:16:40,110
so in order for required to know whether

00:16:38,760 --> 00:16:40,990
or not it's actually loaded the file

00:16:40,110 --> 00:16:43,120
already

00:16:40,990 --> 00:16:45,399
search loaded features and we can see

00:16:43,120 --> 00:16:46,899
that loaded features get mutated gets

00:16:45,399 --> 00:16:49,060
mutated if we run some code like this

00:16:46,899 --> 00:16:50,860
we'll duplo did feature is do a require

00:16:49,060 --> 00:16:52,870
and then look at the difference after we

00:16:50,860 --> 00:16:54,520
do the require and you'll see the output

00:16:52,870 --> 00:16:57,070
from that is the file that we required

00:16:54,520 --> 00:17:00,070
so you can see that full path there and

00:16:57,070 --> 00:17:02,410
if we run run this again but we say

00:17:00,070 --> 00:17:04,900
require two things one that's X and one

00:17:02,410 --> 00:17:07,120
that's X dot RB it'll have exactly the

00:17:04,900 --> 00:17:08,890
same output as before just that one file

00:17:07,120 --> 00:17:10,990
will be added to the list and the way

00:17:08,890 --> 00:17:13,000
that it does this is it does this with

00:17:10,990 --> 00:17:14,860
load path canonicalization it uses the

00:17:13,000 --> 00:17:17,260
load paths to canonicalize any

00:17:14,860 --> 00:17:19,329
parameters that are sent to require so

00:17:17,260 --> 00:17:20,679
it says okay that X I'm going to go

00:17:19,329 --> 00:17:22,720
search the load path in order to

00:17:20,679 --> 00:17:24,189
canonicalize it turn it into a full path

00:17:22,720 --> 00:17:26,860
and then put that thing into loaded

00:17:24,189 --> 00:17:29,140
features so as an example on the left

00:17:26,860 --> 00:17:31,330
side we have non-canonical requires

00:17:29,140 --> 00:17:33,190
these are not full paths and on the

00:17:31,330 --> 00:17:35,530
right side is a canonical require it is

00:17:33,190 --> 00:17:37,660
a full path so the way that the logic

00:17:35,530 --> 00:17:40,090
works for requires we say hey okay is

00:17:37,660 --> 00:17:42,309
this parameter canonical if it's not

00:17:40,090 --> 00:17:44,860
canonical then we'll canonicalize it

00:17:42,309 --> 00:17:46,929
then if it is canonical will say has it

00:17:44,860 --> 00:17:49,210
been loaded already if it hasn't been

00:17:46,929 --> 00:17:50,710
loaded then we load it add it to the

00:17:49,210 --> 00:17:52,360
loaded features list and then we're done

00:17:50,710 --> 00:17:55,540
if it's already been loaded than we're

00:17:52,360 --> 00:17:59,260
just done so canonicalization takes into

00:17:55,540 --> 00:18:02,050
account the load path loaded is loaded ?

00:17:59,260 --> 00:18:04,420
looks at loaded features and then add

00:18:02,050 --> 00:18:09,000
two loaded also mutates loaded features

00:18:04,420 --> 00:18:09,000
it's just that simple really

00:18:11,880 --> 00:18:16,210
alright so next let's look at autoload

00:18:14,260 --> 00:18:18,220
autoload is another interesting another

00:18:16,210 --> 00:18:19,420
interesting way of loading code so it

00:18:18,220 --> 00:18:21,540
looks like this you may have seen this

00:18:19,420 --> 00:18:25,150
in code before we say auto load bar and

00:18:21,540 --> 00:18:27,670
bar loads X so we say ok bar is the

00:18:25,150 --> 00:18:29,620
constant and I want you to load X now

00:18:27,670 --> 00:18:32,470
what's interesting about this is it

00:18:29,620 --> 00:18:35,860
loads bar as soon as that bar constant

00:18:32,470 --> 00:18:38,770
is referenced so right here in a load X

00:18:35,860 --> 00:18:40,660
because we've referenced bar alright

00:18:38,770 --> 00:18:42,610
we've referenced that constant as soon

00:18:40,660 --> 00:18:44,910
as we do that it'll go load this file so

00:18:42,610 --> 00:18:47,590
it'll puts high and then we're done

00:18:44,910 --> 00:18:49,630
evaluates that and we're done so we run

00:18:47,590 --> 00:18:51,160
this and you'll see okay yes we output

00:18:49,630 --> 00:18:56,290
high first and now we get the bar

00:18:51,160 --> 00:18:58,390
constant ok so this file this particular

00:18:56,290 --> 00:19:00,280
file is governed by exactly the same

00:18:58,390 --> 00:19:02,410
rules as require it won't load the same

00:19:00,280 --> 00:19:03,970
file twice we can give it a full path if

00:19:02,410 --> 00:19:06,340
we want to and it canonicalize is

00:19:03,970 --> 00:19:10,270
against the load path exactly the same

00:19:06,340 --> 00:19:12,340
features that that require does so if we

00:19:10,270 --> 00:19:13,870
run this run this particular code print

00:19:12,340 --> 00:19:15,460
out bar three times you'll see it only

00:19:13,870 --> 00:19:18,280
prints out high once and then prints out

00:19:15,460 --> 00:19:19,810
all the bars so our auto load logical it

00:19:18,280 --> 00:19:21,910
looks a little bit like this well soon

00:19:19,810 --> 00:19:24,220
as the conference constant is referenced

00:19:21,910 --> 00:19:25,390
we say have we loaded it if we haven't

00:19:24,220 --> 00:19:27,130
loaded it then we'll go and do the

00:19:25,390 --> 00:19:28,930
require logic for that particular file

00:19:27,130 --> 00:19:32,140
if we have loaded it then we're just

00:19:28,930 --> 00:19:34,000
done ok now something to bear in mind

00:19:32,140 --> 00:19:37,090
here that I didn't really demonstrate is

00:19:34,000 --> 00:19:39,400
that constants constants are loaded as

00:19:37,090 --> 00:19:41,980
soon as they are referenced ok as soon

00:19:39,400 --> 00:19:44,590
as that constant is referenced it tries

00:19:41,980 --> 00:19:46,900
to load that file so let's look at this

00:19:44,590 --> 00:19:49,900
example one more time we say alright we

00:19:46,900 --> 00:19:52,390
referenced bar here so it goes and loads

00:19:49,900 --> 00:19:54,580
of file doing exactly the same thing we

00:19:52,390 --> 00:19:57,040
say hi you know prints out high and it

00:19:54,580 --> 00:19:58,600
comes down here defines foo but then we

00:19:57,040 --> 00:20:01,840
hit bar again we've referenced the

00:19:58,600 --> 00:20:03,490
constant again we've referenced the

00:20:01,840 --> 00:20:07,780
constant for a second time but it's

00:20:03,490 --> 00:20:09,700
inside this file so what do we do bar is

00:20:07,780 --> 00:20:13,600
referenced even though we're not done

00:20:09,700 --> 00:20:15,790
evaluating X dot RB yet somehow this

00:20:13,600 --> 00:20:17,200
code all works you'd imagine Oh bar got

00:20:15,790 --> 00:20:18,820
referenced again we're going to get into

00:20:17,200 --> 00:20:21,070
an infinite loop but clearly that is not

00:20:18,820 --> 00:20:24,519
what happens that is not what happens at

00:20:21,070 --> 00:20:26,379
all so we actually have some

00:20:24,519 --> 00:20:29,009
additional logic inside of autoload that

00:20:26,379 --> 00:20:31,509
we say okay have we loaded it no are we

00:20:29,009 --> 00:20:33,369
loading it are we currently in the

00:20:31,509 --> 00:20:35,529
process of loading that particular file

00:20:33,369 --> 00:20:38,109
if we're not then just continue on with

00:20:35,529 --> 00:20:40,029
the require logic if we are in the

00:20:38,109 --> 00:20:42,309
process of loading that file then we say

00:20:40,029 --> 00:20:44,379
that we're done or if we've loaded it

00:20:42,309 --> 00:20:48,729
we're done so I'm going to get a little

00:20:44,379 --> 00:20:52,450
bit hand wavy here but there is a yeah a

00:20:48,729 --> 00:20:53,739
transition will there's a hidden global

00:20:52,450 --> 00:20:55,479
this means there's a hidden global

00:20:53,739 --> 00:20:56,919
inside of Ruby and that hidden global is

00:20:55,479 --> 00:20:58,629
called the loading table and you will

00:20:56,919 --> 00:21:00,909
not see this inside of your Ruby code

00:20:58,629 --> 00:21:03,190
you can't access this you can't access

00:21:00,909 --> 00:21:05,169
this global from Ruby at all it's inside

00:21:03,190 --> 00:21:06,700
of em r is c code and you'll see it in a

00:21:05,169 --> 00:21:09,249
function that looks like this this is a

00:21:06,700 --> 00:21:12,309
loading table this keeps track of files

00:21:09,249 --> 00:21:13,959
that are currently being loaded so our

00:21:12,309 --> 00:21:16,389
file load steps look a little bit like

00:21:13,959 --> 00:21:17,889
this again this is the one this one

00:21:16,389 --> 00:21:19,839
right here this step is where we

00:21:17,889 --> 00:21:21,759
actually consult the loading table and

00:21:19,839 --> 00:21:24,009
what those load steps look like are we

00:21:21,759 --> 00:21:26,679
actually acquire a lock we add it to

00:21:24,009 --> 00:21:29,889
that loading that loading hash the load

00:21:26,679 --> 00:21:31,929
tables a hash we eval the file add it to

00:21:29,889 --> 00:21:34,869
the loaded features and then remove it

00:21:31,929 --> 00:21:36,639
from the loading hash then unlock so

00:21:34,869 --> 00:21:38,409
we've talked all about this is all been

00:21:36,639 --> 00:21:39,549
about the stuff that's built into Ruby

00:21:38,409 --> 00:21:41,979
and I want to talk a little bit about

00:21:39,549 --> 00:21:43,899
how Ruby gems plays into this so Ruby

00:21:41,979 --> 00:21:45,669
gems and require overlap a little bit I

00:21:43,899 --> 00:21:47,499
want to talk about that little overlap

00:21:45,669 --> 00:21:50,229
there so we'll do that by looking at

00:21:47,499 --> 00:21:52,599
rack and will just require a rack okay

00:21:50,229 --> 00:21:54,309
so we didn't do anything special we just

00:21:52,599 --> 00:21:56,739
required rack how did how did that work

00:21:54,309 --> 00:21:58,029
how did Ruby find rack we didn't you

00:21:56,739 --> 00:22:00,789
take the load path we didn't do anything

00:21:58,029 --> 00:22:02,649
how did it know to load rack well the

00:22:00,789 --> 00:22:04,539
way that it does that is that Ruby gems

00:22:02,649 --> 00:22:06,820
actually implements require and we can

00:22:04,539 --> 00:22:08,950
prove this by if you pull up IRB and say

00:22:06,820 --> 00:22:10,719
give me the method require and then look

00:22:08,950 --> 00:22:12,399
at the source location on that you'll

00:22:10,719 --> 00:22:15,339
see that it's located somewhere inside

00:22:12,399 --> 00:22:17,589
of rubygems error so if we disable

00:22:15,339 --> 00:22:19,690
rubygems we can disable rubygems by

00:22:17,589 --> 00:22:22,179
using this flag dash dash disable gems

00:22:19,690 --> 00:22:23,950
and we look up that method again you'll

00:22:22,179 --> 00:22:25,629
see that the source location is nil and

00:22:23,950 --> 00:22:27,820
what that indicates is that the method

00:22:25,629 --> 00:22:29,649
was implemented in C so this requires

00:22:27,820 --> 00:22:31,299
the one that's actually inside of Ruby

00:22:29,649 --> 00:22:34,119
the previous one is inside of rubygems

00:22:31,299 --> 00:22:36,219
so how does Ruby gems as require work

00:22:34,119 --> 00:22:36,830
the code looks a little bit like this

00:22:36,219 --> 00:22:39,740
this is

00:22:36,830 --> 00:22:41,630
the basic overview it's not exactly like

00:22:39,740 --> 00:22:43,640
this the way that it works is we say

00:22:41,630 --> 00:22:46,309
okay try rubies require try the original

00:22:43,640 --> 00:22:49,549
require if that works then we're done

00:22:46,309 --> 00:22:51,799
great Ruby could require it we're good

00:22:49,549 --> 00:22:53,330
but if it doesn't work if it can't find

00:22:51,799 --> 00:22:56,090
that file Ruby will raise an exception

00:22:53,330 --> 00:22:59,299
and we catch that exception and we say

00:22:56,090 --> 00:23:02,210
okay now go try to find a gem that

00:22:59,299 --> 00:23:04,340
contains that file if we find a gem that

00:23:02,210 --> 00:23:06,490
contains that file mutate the load path

00:23:04,340 --> 00:23:09,350
and add that gem on to the load path

00:23:06,490 --> 00:23:12,649
then try the real require to our Ruby's

00:23:09,350 --> 00:23:14,240
require and then we're done so that

00:23:12,649 --> 00:23:15,889
means the first time you require

00:23:14,240 --> 00:23:17,720
anything out of a gem it'll actually

00:23:15,889 --> 00:23:20,330
raise an exception so if we look at this

00:23:17,720 --> 00:23:22,490
look at loading rack that first line

00:23:20,330 --> 00:23:24,110
there will raise an exception but rack

00:23:22,490 --> 00:23:25,760
gets put on to the load path and that

00:23:24,110 --> 00:23:29,090
second require will not raise an

00:23:25,760 --> 00:23:32,059
exception so the first call to Rack lock

00:23:29,090 --> 00:23:34,159
goes through this left-hand side raised

00:23:32,059 --> 00:23:36,049
an exception and we're done the the

00:23:34,159 --> 00:23:37,610
second require since rack is already on

00:23:36,049 --> 00:23:41,570
the load path will actually go down the

00:23:37,610 --> 00:23:43,669
right hand side and no exception so we

00:23:41,570 --> 00:23:45,639
can actually do this both requires with

00:23:43,669 --> 00:23:47,990
no exception by using the gem command

00:23:45,639 --> 00:23:49,730
you may not want to you please

00:23:47,990 --> 00:23:51,590
understand how gem works before you do

00:23:49,730 --> 00:23:53,929
this don't go spreading this throughout

00:23:51,590 --> 00:23:55,730
all of your code quite yet but what gem

00:23:53,929 --> 00:23:57,649
does is it just takes that particular

00:23:55,730 --> 00:23:59,929
gem and puts it on to the load path that

00:23:57,649 --> 00:24:02,179
mutates the load path then both of these

00:23:59,929 --> 00:24:03,860
requires will have no exceptions so to

00:24:02,179 --> 00:24:06,260
tie it all together we can see the

00:24:03,860 --> 00:24:08,779
exception in action here if we run Ruby

00:24:06,260 --> 00:24:10,399
with dash D dash D will print out any

00:24:08,779 --> 00:24:11,750
exceptions that have occurred inside of

00:24:10,399 --> 00:24:13,970
your application so you can see that

00:24:11,750 --> 00:24:17,389
first require there we get a load error

00:24:13,970 --> 00:24:19,700
on rack lock the second required did not

00:24:17,389 --> 00:24:22,010
have did not have an exception now we

00:24:19,700 --> 00:24:24,049
can also see loaded the load path get

00:24:22,010 --> 00:24:26,299
mutated so if we duped the load path

00:24:24,049 --> 00:24:28,519
require rack lock and then look at the

00:24:26,299 --> 00:24:30,139
new additions to the load path you can

00:24:28,519 --> 00:24:32,600
see that the gem is now on the load path

00:24:30,139 --> 00:24:35,750
you can also see that loaded features is

00:24:32,600 --> 00:24:38,600
mutated as well with rach lock so so far

00:24:35,750 --> 00:24:42,950
we've looked at loading code Global's

00:24:38,600 --> 00:24:44,840
and Ruby gems so I want to look at a

00:24:42,950 --> 00:24:46,789
little bit of to understand how to

00:24:44,840 --> 00:24:49,220
increase performance with this I want to

00:24:46,789 --> 00:24:51,960
look at rubygems usage a little bit

00:24:49,220 --> 00:24:53,519
what is what I wanted to understand is

00:24:51,960 --> 00:24:55,110
what a typical development environment

00:24:53,519 --> 00:24:56,460
looks like because this is going to

00:24:55,110 --> 00:24:58,139
impact the way that we can do caching

00:24:56,460 --> 00:24:59,880
and performance improvements I wrote a

00:24:58,139 --> 00:25:01,590
little survey this is a survey code you

00:24:59,880 --> 00:25:03,509
can check it out all i did is gather

00:25:01,590 --> 00:25:05,519
some stats about your system upload them

00:25:03,509 --> 00:25:07,950
to this google spreadsheet for me to

00:25:05,519 --> 00:25:10,590
take a look at it gathered stuff like

00:25:07,950 --> 00:25:12,509
how many gems people use per project how

00:25:10,590 --> 00:25:15,120
many are on their system how many files

00:25:12,509 --> 00:25:17,549
is each gem have what versions of Ruby

00:25:15,120 --> 00:25:19,440
gems they have a versions of Ruby the

00:25:17,549 --> 00:25:22,110
reason I did this is because gem count

00:25:19,440 --> 00:25:23,399
impacts the performance file count we

00:25:22,110 --> 00:25:25,259
have to search through all those gems

00:25:23,399 --> 00:25:26,909
file count impacts of performance as

00:25:25,259 --> 00:25:29,039
well because we need to search through

00:25:26,909 --> 00:25:31,590
all the files in the particular gems so

00:25:29,039 --> 00:25:33,419
Ruby and Ruby gems versions impacts the

00:25:31,590 --> 00:25:35,340
programming the performance techniques

00:25:33,419 --> 00:25:37,259
that I'm going to be using so this is

00:25:35,340 --> 00:25:39,210
the collected info again I'd collect gem

00:25:37,259 --> 00:25:40,940
count per system ruby version host OS

00:25:39,210 --> 00:25:43,320
and i would also collect a unique ID

00:25:40,940 --> 00:25:45,389
unique idea is actually generated like

00:25:43,320 --> 00:25:47,039
this its unique in quotes it's not

00:25:45,389 --> 00:25:49,830
totally unique it's essentially your

00:25:47,039 --> 00:25:51,870
hostname IP address your time zone and

00:25:49,830 --> 00:25:54,779
maybe your home your home directory and

00:25:51,870 --> 00:25:56,279
then I shot encode that the reason is I

00:25:54,779 --> 00:25:58,289
want something that's unique but not

00:25:56,279 --> 00:25:59,580
identifiable I don't actually care who

00:25:58,289 --> 00:26:01,679
you are and I don't really want to know

00:25:59,580 --> 00:26:05,730
who you are that's that's not for don't

00:26:01,679 --> 00:26:09,000
hold me I do care about you I care about

00:26:05,730 --> 00:26:10,529
who you are I just don't need to know in

00:26:09,000 --> 00:26:12,389
the data so then we have a unique

00:26:10,529 --> 00:26:14,309
project ID in the way that I got that is

00:26:12,389 --> 00:26:15,899
bundler will provide bundlers that will

00:26:14,309 --> 00:26:17,309
provide an environment variable when

00:26:15,899 --> 00:26:18,960
you're running inside of bundler and I

00:26:17,309 --> 00:26:20,759
would just grab that and shot so

00:26:18,960 --> 00:26:23,759
duplicates were possible but very

00:26:20,759 --> 00:26:26,610
unlikely so I got about up 466 unique

00:26:23,759 --> 00:26:28,379
projects 140 unique systems this is the

00:26:26,610 --> 00:26:29,669
ruby version breakdown i'm not going to

00:26:28,379 --> 00:26:32,759
talk about it too much but this is

00:26:29,669 --> 00:26:35,519
essentially it we got a lot of 21 users

00:26:32,759 --> 00:26:37,710
and 22 users I think that one percent

00:26:35,519 --> 00:26:40,129
there the 230 that's me I am the one

00:26:37,710 --> 00:26:40,129
percent

00:26:41,840 --> 00:26:48,540
say with my Apple watch so

00:26:46,260 --> 00:26:50,520
implementations the implementation wise

00:26:48,540 --> 00:26:52,110
i only got JRuby and MRI people

00:26:50,520 --> 00:26:54,000
responding so you can see the breakdown

00:26:52,110 --> 00:26:56,340
system-wide or per project when I say

00:26:54,000 --> 00:26:58,170
system-wide that's default like when you

00:26:56,340 --> 00:27:00,780
run Ruby on the command line what is it

00:26:58,170 --> 00:27:02,460
what are you using I looked at rubygems

00:27:00,780 --> 00:27:04,140
upgrades what was interesting is that

00:27:02,460 --> 00:27:07,380
forty-four percent of the people

00:27:04,140 --> 00:27:09,450
responding had upgraded once but only

00:27:07,380 --> 00:27:10,770
twenty-three percent were on the current

00:27:09,450 --> 00:27:13,230
current version and the way that I

00:27:10,770 --> 00:27:14,700
determined that was I looked at for that

00:27:13,230 --> 00:27:16,350
particular version of Ruby what

00:27:14,700 --> 00:27:18,300
particular version of rubygems shipped

00:27:16,350 --> 00:27:19,980
with that Ruby so then I would look at

00:27:18,300 --> 00:27:21,240
your current version of Ruby gems and I

00:27:19,980 --> 00:27:22,770
can compare the two and determine

00:27:21,240 --> 00:27:24,870
whether or not you had upgraded so

00:27:22,770 --> 00:27:26,040
interesting thing projects per machine

00:27:24,870 --> 00:27:27,690
you can see it's a very interesting

00:27:26,040 --> 00:27:31,740
curve there its spikes way up on the

00:27:27,690 --> 00:27:34,830
right-hand side the top is 82 somebody

00:27:31,740 --> 00:27:37,710
had 82 projects on one machine OS

00:27:34,830 --> 00:27:39,870
distribution mostly mostly OSN we had

00:27:37,710 --> 00:27:42,030
some people running linux project

00:27:39,870 --> 00:27:44,130
distributions so this is like the number

00:27:42,030 --> 00:27:45,930
of gems in each project I cared about I

00:27:44,130 --> 00:27:48,120
want to know how many gems do you have

00:27:45,930 --> 00:27:50,910
in your project how many do depend on so

00:27:48,120 --> 00:27:52,380
our top there is nearly 300 file

00:27:50,910 --> 00:27:55,860
distribution I want to know like how

00:27:52,380 --> 00:28:00,450
many files you have in your in your gems

00:27:55,860 --> 00:28:02,190
we have here the max is like 14,000

00:28:00,450 --> 00:28:07,710
files which is interesting i believe

00:28:02,190 --> 00:28:09,450
that is fog i'm guessing system

00:28:07,710 --> 00:28:11,910
distribution so I want to know number of

00:28:09,450 --> 00:28:13,650
gems installed system wide so what did

00:28:11,910 --> 00:28:15,450
that look like here is our gems system

00:28:13,650 --> 00:28:17,190
wide and that's crazy on the right hand

00:28:15,450 --> 00:28:18,750
side there's somebody with like 1300

00:28:17,190 --> 00:28:23,760
gems installed on their system that's

00:28:18,750 --> 00:28:25,320
not me but anyway yeah Wow like wow 12 I

00:28:23,760 --> 00:28:27,420
guess 1200 gems installed on their

00:28:25,320 --> 00:28:28,860
system so the number of files on each

00:28:27,420 --> 00:28:31,230
system to we had somebody there are

00:28:28,860 --> 00:28:33,900
nearly 90,000 files installed on their

00:28:31,230 --> 00:28:35,400
system with gems so the average project

00:28:33,900 --> 00:28:37,290
what did the average project look like

00:28:35,400 --> 00:28:39,960
the average project had about 100 gems

00:28:37,290 --> 00:28:41,670
at about 4,000 files this is what we

00:28:39,960 --> 00:28:44,430
were looking at the average system has

00:28:41,670 --> 00:28:46,730
about three projects and maybe 280 gems

00:28:44,430 --> 00:28:48,620
around 13,000 files

00:28:46,730 --> 00:28:50,870
okay so now we know we're dealing with

00:28:48,620 --> 00:28:52,429
we know what we need to we know the side

00:28:50,870 --> 00:28:54,049
we can kind of figure out what the size

00:28:52,429 --> 00:28:55,280
of any caches are that we want to

00:28:54,049 --> 00:28:57,799
generate so let's look at some

00:28:55,280 --> 00:29:01,400
performance characteristics I have two

00:28:57,799 --> 00:29:03,440
minutes oh my god i want to know as the

00:29:01,400 --> 00:29:06,980
number of gems grows how does require

00:29:03,440 --> 00:29:10,070
change and as the load path grows how

00:29:06,980 --> 00:29:11,660
does require time grow so really what I

00:29:10,070 --> 00:29:14,480
wanted to study is I want to study load

00:29:11,660 --> 00:29:15,770
past search time now this i'm going to

00:29:14,480 --> 00:29:18,799
show you the test here this is the test

00:29:15,770 --> 00:29:20,960
code please read it very carefully where

00:29:18,799 --> 00:29:23,030
we're going to study this and talk about

00:29:20,960 --> 00:29:24,890
it on the boat but anyway this is the

00:29:23,030 --> 00:29:26,510
main like most important thing

00:29:24,890 --> 00:29:29,630
essentially what i did is i said okay

00:29:26,510 --> 00:29:32,390
i'm going to require that require a file

00:29:29,630 --> 00:29:33,980
and i want to see how long it takes to

00:29:32,390 --> 00:29:35,809
require a file and I'm going to do a

00:29:33,980 --> 00:29:38,330
best-case scenario in a worst-case

00:29:35,809 --> 00:29:40,340
scenario and we know that that load path

00:29:38,330 --> 00:29:42,110
is an array so when I say best-case

00:29:40,340 --> 00:29:43,669
scenario I mean the thing that's on the

00:29:42,110 --> 00:29:45,230
very left and when I say worst case

00:29:43,669 --> 00:29:47,450
scenario i mean the thing that's on the

00:29:45,230 --> 00:29:49,040
very right so if we take that and graph

00:29:47,450 --> 00:29:51,080
it this is what the graph looks like

00:29:49,040 --> 00:29:53,240
along the x-axis is the number of gems

00:29:51,080 --> 00:29:55,040
that we have activated on the y-axis is

00:29:53,240 --> 00:29:58,460
the number of milliseconds it takes to

00:29:55,040 --> 00:30:00,590
require one file so red line is worst

00:29:58,460 --> 00:30:02,510
case blue line is best case so this

00:30:00,590 --> 00:30:05,120
scales linearly with the size of the

00:30:02,510 --> 00:30:06,350
load path so just to drive that at home

00:30:05,120 --> 00:30:09,350
and make it clear our worst-case

00:30:06,350 --> 00:30:10,970
scenario is when we require foo and food

00:30:09,350 --> 00:30:12,710
doesn't occur until all the way at the

00:30:10,970 --> 00:30:15,559
end of the load path so it's got to go

00:30:12,710 --> 00:30:17,390
search through all of those right that's

00:30:15,559 --> 00:30:20,330
our worst-case scenario now our

00:30:17,390 --> 00:30:21,740
best-case scenario is when it's it's at

00:30:20,330 --> 00:30:24,410
the very beginning we found it at the

00:30:21,740 --> 00:30:26,030
very beginning right that's our very

00:30:24,410 --> 00:30:27,530
first are found out of the very

00:30:26,030 --> 00:30:29,240
beginning so it should be our fastest

00:30:27,530 --> 00:30:31,370
and when you think about that if it's

00:30:29,240 --> 00:30:33,260
always at the beginning of the array if

00:30:31,370 --> 00:30:36,169
it's always at the beginning the

00:30:33,260 --> 00:30:38,059
performance should be a constant time

00:30:36,169 --> 00:30:40,070
it's always there always takes the same

00:30:38,059 --> 00:30:42,710
amount of time no matter how long the

00:30:40,070 --> 00:30:45,280
array is so why is the best case

00:30:42,710 --> 00:30:48,080
scenario performing in linear time I

00:30:45,280 --> 00:30:49,490
don't I don't actually have an answer

00:30:48,080 --> 00:30:51,919
for you I think that this is a bug it

00:30:49,490 --> 00:30:53,360
should be performing in constant time we

00:30:51,919 --> 00:30:55,400
know it's always at the beginning you

00:30:53,360 --> 00:30:57,440
would expect the worst case scenario to

00:30:55,400 --> 00:30:58,220
be linear performance but the best case

00:30:57,440 --> 00:30:59,270
is also lynnie

00:30:58,220 --> 00:31:01,070
performance so that's something that I

00:30:59,270 --> 00:31:04,640
need to look into just something I found

00:31:01,070 --> 00:31:06,890
interesting as I researching this so if

00:31:04,640 --> 00:31:08,480
you have 300 gems and it takes four to

00:31:06,890 --> 00:31:11,990
six milliseconds to require any

00:31:08,480 --> 00:31:13,970
particular file that can add up so my

00:31:11,990 --> 00:31:15,320
idea is for performance improvements

00:31:13,970 --> 00:31:17,240
essentially what i want to do is I want

00:31:15,320 --> 00:31:18,620
to take that Oh end search that we have

00:31:17,240 --> 00:31:21,980
and turn that into a constant time

00:31:18,620 --> 00:31:24,650
search so searching the load path is 0 n

00:31:21,980 --> 00:31:26,120
its linear time because it depends on

00:31:24,650 --> 00:31:28,549
how many how many things are in that

00:31:26,120 --> 00:31:31,190
array well my question is okay you know

00:31:28,549 --> 00:31:33,770
if that thing is linear time what if we

00:31:31,190 --> 00:31:36,980
just stop searching it let's just stop

00:31:33,770 --> 00:31:38,659
don't do it anymore just stop you think

00:31:36,980 --> 00:31:40,520
well okay how can we do that the way

00:31:38,659 --> 00:31:42,200
that we can do that is that full path

00:31:40,520 --> 00:31:44,600
names don't actually search the load

00:31:42,200 --> 00:31:46,760
path if the if the path name is totally

00:31:44,600 --> 00:31:48,200
canonicalize it doesn't search it it

00:31:46,760 --> 00:31:50,270
just goes and looks in the already

00:31:48,200 --> 00:31:51,950
loaded database and if it's already in

00:31:50,270 --> 00:31:54,080
it if it's in the already loaded

00:31:51,950 --> 00:31:55,520
database it just says nope done if it

00:31:54,080 --> 00:31:58,190
isn't it just goes and loads a file

00:31:55,520 --> 00:32:00,770
there is no load path search there so

00:31:58,190 --> 00:32:02,450
for example here this top one does no

00:32:00,770 --> 00:32:04,309
search because it's a full path the

00:32:02,450 --> 00:32:06,020
bottom one does do a search so how can

00:32:04,309 --> 00:32:07,520
we do this I mean we don't want to go

00:32:06,020 --> 00:32:09,020
through our applications and replace

00:32:07,520 --> 00:32:10,429
every single one of these things with

00:32:09,020 --> 00:32:12,740
the full paths it doesn't make sense

00:32:10,429 --> 00:32:13,970
it's too tedious and it's also going to

00:32:12,740 --> 00:32:15,679
bind us it's going to couple our

00:32:13,970 --> 00:32:18,080
application to the location on the file

00:32:15,679 --> 00:32:20,900
system we can't do that so how do we do

00:32:18,080 --> 00:32:22,309
it well if we look at canonicalization

00:32:20,900 --> 00:32:24,549
the way that the canonicalization

00:32:22,309 --> 00:32:26,809
process happens it happens in two places

00:32:24,549 --> 00:32:28,429
happens when Ruby search is a load path

00:32:26,809 --> 00:32:30,799
and it happens when ruby gem searches

00:32:28,429 --> 00:32:32,419
gem specs now for example when you do

00:32:30,799 --> 00:32:34,010
require who it's going to look for

00:32:32,419 --> 00:32:36,799
particular files it's going to look for

00:32:34,010 --> 00:32:38,870
food on our be soo and just the bare

00:32:36,799 --> 00:32:41,419
file name and as a side track here or

00:32:38,870 --> 00:32:44,059
some bugs that I found while I was doing

00:32:41,419 --> 00:32:46,820
some research you can require dot bundle

00:32:44,059 --> 00:32:49,159
files this this is just using pure Ruby

00:32:46,820 --> 00:32:51,049
Ruby's require not Ruby gems is require

00:32:49,159 --> 00:32:52,700
you'll notice that i'm doing a gem which

00:32:51,049 --> 00:32:54,409
I'm mutating the load path so this

00:32:52,700 --> 00:32:56,960
shouldn't go through any of rubygems is

00:32:54,409 --> 00:32:59,690
logic I can require nokogiri dot bundle

00:32:56,960 --> 00:33:01,580
and I can also require no Kabir ESO imma

00:32:59,690 --> 00:33:03,559
on OS 10 which means that there's a dot

00:33:01,580 --> 00:33:06,090
bundle file that exists there is no s 0

00:33:03,559 --> 00:33:08,669
file but Ruby converts that s 0 and

00:33:06,090 --> 00:33:10,320
bundle now if we try to do this same

00:33:08,669 --> 00:33:13,020
thing but we do it through rubygems we

00:33:10,320 --> 00:33:15,600
actually get an exception so fortunately

00:33:13,020 --> 00:33:18,390
none of you have ever ever run into this

00:33:15,600 --> 00:33:21,150
because that first require puts the Ruby

00:33:18,390 --> 00:33:22,799
puts that gem on the load path so you'll

00:33:21,150 --> 00:33:24,480
never run into this and anyway I'm

00:33:22,799 --> 00:33:26,970
getting you're getting off track yes i

00:33:24,480 --> 00:33:28,529
know i need I alright so back to this we

00:33:26,970 --> 00:33:31,740
have different ways of canonicalization

00:33:28,529 --> 00:33:33,570
now we have to take the the way it works

00:33:31,740 --> 00:33:35,490
is we're taking that require parameter

00:33:33,570 --> 00:33:37,080
we're looking at that we're canonicalize

00:33:35,490 --> 00:33:40,679
on that and converting it into a file

00:33:37,080 --> 00:33:42,990
name but given a particular file name if

00:33:40,679 --> 00:33:45,539
we have a particular file name we can

00:33:42,990 --> 00:33:48,029
actually predict what those short valid

00:33:45,539 --> 00:33:50,010
short names are we know that we know the

00:33:48,029 --> 00:33:52,620
logic for this we know that if we have

00:33:50,010 --> 00:33:54,149
lib foo the possible things that we can

00:33:52,620 --> 00:33:57,779
pass to require are going to be either

00:33:54,149 --> 00:33:59,520
food RV or just foo we know that so why

00:33:57,779 --> 00:34:01,649
don't we generate those in advance we

00:33:59,520 --> 00:34:03,929
can keep a hash we can say okay we have

00:34:01,649 --> 00:34:06,299
this hash here that if somebody says if

00:34:03,929 --> 00:34:07,860
somebody passes me food on RB then we

00:34:06,299 --> 00:34:09,810
know that it goes to lib food somebody

00:34:07,860 --> 00:34:12,359
passes me foo we know that goes to lib

00:34:09,810 --> 00:34:14,490
food so today we have a process that

00:34:12,359 --> 00:34:16,679
looks like this we're trying Ruby

00:34:14,490 --> 00:34:20,250
require finding the gem with a file all

00:34:16,679 --> 00:34:22,470
these are linear time linear time

00:34:20,250 --> 00:34:24,300
performance what I want to do is if we

00:34:22,470 --> 00:34:27,240
had this particular cache we could say

00:34:24,300 --> 00:34:28,560
ok we'll change that will do a hash look

00:34:27,240 --> 00:34:30,540
up which is going to be constant time

00:34:28,560 --> 00:34:33,450
and will be constant time throughout

00:34:30,540 --> 00:34:35,369
this entire process now if it doesn't

00:34:33,450 --> 00:34:37,440
exist in the cache then we'll go through

00:34:35,369 --> 00:34:39,659
and try Ruby's require which is going to

00:34:37,440 --> 00:34:42,659
be 0 end time but since we're not

00:34:39,659 --> 00:34:44,820
mutating the load path anymore that end

00:34:42,659 --> 00:34:46,889
time is going to be shorter so what I

00:34:44,820 --> 00:34:48,750
did was I put together a test that

00:34:46,889 --> 00:34:49,980
generated this cash and said ok I'm

00:34:48,750 --> 00:34:53,220
going to activate I'm going to activate

00:34:49,980 --> 00:34:57,540
many many gems and study how the require

00:34:53,220 --> 00:34:58,770
time grows as we activate many gems now

00:34:57,540 --> 00:35:00,660
this is what this is what it looked like

00:34:58,770 --> 00:35:02,580
along the x-axis there is the number of

00:35:00,660 --> 00:35:04,619
gems that I have activated on my system

00:35:02,580 --> 00:35:07,080
so I activated up to a thousand gems and

00:35:04,619 --> 00:35:09,000
along there on the on the y-axis is the

00:35:07,080 --> 00:35:10,080
amount of time that it took and I want

00:35:09,000 --> 00:35:11,820
you to know that that's time in

00:35:10,080 --> 00:35:13,830
milliseconds and note that it is less

00:35:11,820 --> 00:35:17,060
than a 1 which is really awesome and

00:35:13,830 --> 00:35:18,650
that it scales linearly to I have

00:35:17,060 --> 00:35:21,350
and gems and it's still taking less than

00:35:18,650 --> 00:35:22,940
a millisecond to do this now the way

00:35:21,350 --> 00:35:25,100
that I want to do this is we could

00:35:22,940 --> 00:35:27,050
calculate all this cash on gem install

00:35:25,100 --> 00:35:28,580
when you do a gem install whatever we

00:35:27,050 --> 00:35:29,750
can say okay let's calculate all the

00:35:28,580 --> 00:35:32,150
short names from the files that are

00:35:29,750 --> 00:35:34,010
inside that gym so that's what I want to

00:35:32,150 --> 00:35:35,630
do eventually now the challenges with

00:35:34,010 --> 00:35:37,310
this are we have to be able to deal with

00:35:35,630 --> 00:35:39,290
dash I because you can do Ruby dash

00:35:37,310 --> 00:35:41,240
value whatever and that dash fire takes

00:35:39,290 --> 00:35:42,890
precedence over gems but I think this is

00:35:41,240 --> 00:35:44,780
something that we can accomplish we know

00:35:42,890 --> 00:35:46,640
where those are in the load path we can

00:35:44,780 --> 00:35:51,310
manually search those so we'll only

00:35:46,640 --> 00:35:51,310
punish people who are using dash I now

00:35:51,370 --> 00:35:56,090
we have to deal with load path mutations

00:35:54,050 --> 00:35:57,470
of people unshifted to the array we have

00:35:56,090 --> 00:35:59,210
to be able to deal with that but we know

00:35:57,470 --> 00:36:00,920
at boot time what that load path looks

00:35:59,210 --> 00:36:02,840
like so we know we can tell when

00:36:00,920 --> 00:36:04,250
somebody has mutated it we have to deal

00:36:02,840 --> 00:36:06,290
with somebody doing the Sun shift

00:36:04,250 --> 00:36:08,270
whatever so we'll punish people using

00:36:06,290 --> 00:36:09,830
dash I and will punish people using done

00:36:08,270 --> 00:36:12,440
shift but if you don't do those and it

00:36:09,830 --> 00:36:14,150
doesn't matter so we also need to deal

00:36:12,440 --> 00:36:17,150
with bundler support as well and what I

00:36:14,150 --> 00:36:18,230
mean by this is I want if you look at

00:36:17,150 --> 00:36:20,330
the way bundler works bundler

00:36:18,230 --> 00:36:22,520
essentially takes your lock file and

00:36:20,330 --> 00:36:24,110
just mutates the load path for you and

00:36:22,520 --> 00:36:25,760
gets rid of all the gems on your system

00:36:24,110 --> 00:36:27,140
I'm not saying it actually deletes all

00:36:25,760 --> 00:36:29,360
the gems on your system it just makes

00:36:27,140 --> 00:36:31,250
them unavailable so if you go and run

00:36:29,360 --> 00:36:33,200
inside of your application if you say

00:36:31,250 --> 00:36:34,940
bundle exec Ruby dashi and you print out

00:36:33,200 --> 00:36:36,230
the load path you'll see that all of

00:36:34,940 --> 00:36:38,960
your gems are already on the load path

00:36:36,230 --> 00:36:40,580
there for you right and what I'm

00:36:38,960 --> 00:36:42,530
proposing is that we don't mutate the

00:36:40,580 --> 00:36:44,000
load path anymore so fundamentally we

00:36:42,530 --> 00:36:46,280
would have to change bundler to go look

00:36:44,000 --> 00:36:52,670
up from this cash so let's take I guess

00:36:46,280 --> 00:36:54,260
I'm over but f it I don't let's do it

00:36:52,670 --> 00:36:56,510
straight I want to talk about a strange

00:36:54,260 --> 00:37:00,050
bug that I encountered so I was doing

00:36:56,510 --> 00:37:01,970
this studying how auto auto load works

00:37:00,050 --> 00:37:03,560
and i was doing this constant reference

00:37:01,970 --> 00:37:06,890
here i was doing testing it out here we

00:37:03,560 --> 00:37:08,630
had a and B and I was trying to come up

00:37:06,890 --> 00:37:12,710
with an example to show on the slide and

00:37:08,630 --> 00:37:16,430
I'm running it and like okay all right I

00:37:12,710 --> 00:37:18,680
run this same example we had earlier and

00:37:16,430 --> 00:37:21,740
it prints out a high and i get an error

00:37:18,680 --> 00:37:25,930
and I'm like wait a minute this okay can

00:37:21,740 --> 00:37:25,930
any can anyone spot the bug in my code

00:37:28,000 --> 00:37:38,990
anyone know bugs anyone no no no well I

00:37:37,460 --> 00:37:40,520
should I should have put a troll face on

00:37:38,990 --> 00:37:42,589
here because there is no bug in this

00:37:40,520 --> 00:37:44,329
code it's not there it's not existent so

00:37:42,589 --> 00:37:47,420
I kept getting this error and I like

00:37:44,329 --> 00:37:50,359
okay so I i am a co-worker my homily

00:37:47,420 --> 00:37:52,640
Kate uh I need you to try this example

00:37:50,359 --> 00:37:54,859
for me autoload just seems completely

00:37:52,640 --> 00:37:59,599
broken I don't know how anything is

00:37:54,859 --> 00:38:01,430
working anywhere at all so I say I need

00:37:59,599 --> 00:38:03,859
you to do one file to auto loads another

00:38:01,430 --> 00:38:06,349
file and just you know do that and he

00:38:03,859 --> 00:38:09,320
says Oh works for me you know like

00:38:06,349 --> 00:38:12,109
really and he says yeah you must have

00:38:09,320 --> 00:38:14,329
broken something and I like well know

00:38:12,109 --> 00:38:18,109
what what file names are you using what

00:38:14,329 --> 00:38:20,359
file names I said try a and B make make

00:38:18,109 --> 00:38:26,570
sure that they are named a dot RB and B

00:38:20,359 --> 00:38:28,640
dot RB oh oh they do break so so it

00:38:26,570 --> 00:38:31,280
finally it finally finally broke for him

00:38:28,640 --> 00:38:33,230
but only on certain file names so these

00:38:31,280 --> 00:38:43,579
file names break if you name a fallon be

00:38:33,230 --> 00:38:45,230
darby or RB RB de RB so the solution let

00:38:43,579 --> 00:38:50,060
me tell the solution is don't name her

00:38:45,230 --> 00:38:51,800
files like that you dummy but i think

00:38:50,060 --> 00:38:53,540
like coming from this experience like

00:38:51,800 --> 00:38:55,579
ninety-nine percent of the time we blame

00:38:53,540 --> 00:38:57,500
ourselves right I mean clearly I should

00:38:55,579 --> 00:39:00,140
I didn't show this I show this problems

00:38:57,500 --> 00:39:02,240
of my coworker ID and he's like oh it's

00:39:00,140 --> 00:39:04,160
your fault it clearly it's your fault it

00:39:02,240 --> 00:39:05,869
has to be your fault I'm not sure that

00:39:04,160 --> 00:39:07,700
it is I don't think it is I don't know

00:39:05,869 --> 00:39:10,250
what I'm doing I actually showed this

00:39:07,700 --> 00:39:12,349
problem 2 3 people total and all of them

00:39:10,250 --> 00:39:14,480
told me it was my fault at first until i

00:39:12,349 --> 00:39:16,790
got them to change the filenames and the

00:39:14,480 --> 00:39:18,470
thing is we I think that we blame

00:39:16,790 --> 00:39:19,910
ourselves ninety-nine percent of the

00:39:18,470 --> 00:39:21,619
time we blame ourselves because ninety

00:39:19,910 --> 00:39:24,079
nine percent of the time it is our fault

00:39:21,619 --> 00:39:27,319
we did make a mistake we did make a

00:39:24,079 --> 00:39:33,109
mistake we did do that now oh I have to

00:39:27,319 --> 00:39:35,450
I have to show you one who this oh I'm

00:39:33,109 --> 00:39:37,170
sorry this is this autoload thing I i

00:39:35,450 --> 00:39:39,880
actually had

00:39:37,170 --> 00:39:42,009
two of my co-workers help me with it I

00:39:39,880 --> 00:39:44,799
had Eileen help you with it and we were

00:39:42,009 --> 00:39:46,569
debugging through the C code and she

00:39:44,799 --> 00:39:49,930
starts reading the documentation and she

00:39:46,569 --> 00:39:54,369
says you know what this this example is

00:39:49,930 --> 00:39:59,109
in the documentation it's literally a

00:39:54,369 --> 00:40:01,329
redneck it doesn't work anyway okay okay

00:39:59,109 --> 00:40:06,249
okay okay okay fast-forward come on come

00:40:01,329 --> 00:40:08,259
on build yes yes yes okay uh right so

00:40:06,249 --> 00:40:09,670
what I want to say is that we should

00:40:08,259 --> 00:40:11,170
take we should take the time to

00:40:09,670 --> 00:40:13,240
understand why these particular things

00:40:11,170 --> 00:40:14,880
break like even if it is your fault you

00:40:13,240 --> 00:40:17,680
should try to debug it because I think

00:40:14,880 --> 00:40:19,329
probably people have run into this exact

00:40:17,680 --> 00:40:21,130
issue before and then they just rename

00:40:19,329 --> 00:40:22,390
the files and they're like I'd probably

00:40:21,130 --> 00:40:24,700
just did something stupid I don't know

00:40:22,390 --> 00:40:26,410
right and then moved on we've all done

00:40:24,700 --> 00:40:27,910
that I've done that I know that you've

00:40:26,410 --> 00:40:30,009
done that to your like I just change

00:40:27,910 --> 00:40:32,049
this thing that works i'll move on but

00:40:30,009 --> 00:40:35,529
we should always be asking wine taking

00:40:32,049 --> 00:40:38,230
the time to find out then we should just

00:40:35,529 --> 00:40:42,309
make it fast just just do it please make

00:40:38,230 --> 00:40:43,720
it fast thing is though i said earlier i

00:40:42,309 --> 00:40:45,999
mentioned this earlier please make it

00:40:43,720 --> 00:40:48,670
fast nobody will do it but nobody will

00:40:45,999 --> 00:40:51,640
do this right like nobody will do this i

00:40:48,670 --> 00:40:53,499
complain IRB is slowly say oh just

00:40:51,640 --> 00:40:54,670
uninstalled gems i'm like no i just want

00:40:53,499 --> 00:40:57,190
it to be fast why do i have to uninstall

00:40:54,670 --> 00:41:00,069
gems like I just uninstall your gems

00:40:57,190 --> 00:41:02,640
thing is nobody will do this stuff I I

00:41:00,069 --> 00:41:05,710
have to do this stuff I have to do it I

00:41:02,640 --> 00:41:07,690
want it to be fast I have to do it but

00:41:05,710 --> 00:41:09,880
it's not just me you have to do it too

00:41:07,690 --> 00:41:12,130
we all have to do this stuff if we don't

00:41:09,880 --> 00:41:13,839
do it nobody else will and it's just

00:41:12,130 --> 00:41:16,119
going to be the same forever and ever

00:41:13,839 --> 00:41:18,579
and we can't have that we need to change

00:41:16,119 --> 00:41:21,989
it so with that I'm going to end it I'm

00:41:18,579 --> 00:41:21,989
overtime thank you very much

00:41:42,360 --> 00:41:44,420

YouTube URL: https://www.youtube.com/watch?v=kwkbrOwLsZY


