Title: GORUCO 2015: Rachel Warbelow: Common pitfalls of junior developers
Publication date: 2020-01-23
Playlist: GORUCO 2015
Description: 
	@rwarbelow
The learning curve to becoming a great developer is incredibly steep, especially when starting with no background knowledge. And it's not a smooth ride, either - trying to learn tools, concepts, syntax, and best practices simultaneously will inevitably result in hiccups along the way. As a DevBootcamp alumnus, Rachel knows what it's like to go from zero to developer in a very short time frame and the challenges that journey can present. Now as an instructor at the Turing School of Software and Design, she draws on her years of experience in the classroom to employ strategies that allow her students just the right balance between hand-holding and struggling. In this talk, Rachel will share tips to help people who are just getting started with programming overcome common struggles while also sharing proven teaching techniques that will help more experienced developers become effective mentors.

 Talk given at GORUCO 2015: http://goruco.com
Captions: 
	00:00:14,000 --> 00:00:21,680
Rachel that's my Twitter and my email

00:00:18,279 --> 00:00:23,390
and so like Luke was saying in my past

00:00:21,680 --> 00:00:26,000
life by taught elementary school and

00:00:23,390 --> 00:00:27,830
middle school for seven years and now I

00:00:26,000 --> 00:00:29,029
teach software development at the Turing

00:00:27,830 --> 00:00:31,670
school of software and design in

00:00:29,029 --> 00:00:34,400
Colorado and so over the course of seven

00:00:31,670 --> 00:00:36,800
months we turn people into developers

00:00:34,400 --> 00:00:39,379
and then we release them out into the

00:00:36,800 --> 00:00:40,940
wild world of programming and so we hear

00:00:39,379 --> 00:00:42,379
all sorts of stories about the great

00:00:40,940 --> 00:00:45,050
things that they encounter as doona

00:00:42,379 --> 00:00:46,640
developers and problems that they run

00:00:45,050 --> 00:00:49,100
into when trying to integrate as a

00:00:46,640 --> 00:00:51,500
junior developer so I thought that today

00:00:49,100 --> 00:00:54,200
I would talk to all of you about the

00:00:51,500 --> 00:00:56,090
common pitfalls of junior developers but

00:00:54,200 --> 00:00:58,370
then I decided that making people aware

00:00:56,090 --> 00:00:59,930
of the common pitfalls it wasn't really

00:00:58,370 --> 00:01:01,969
going to change anything so instead

00:00:59,930 --> 00:01:03,860
we're going to talk about how software

00:01:01,969 --> 00:01:05,210
development teams and mentors can

00:01:03,860 --> 00:01:08,420
prevent these problems in the first

00:01:05,210 --> 00:01:11,030
place but preventing these problems can

00:01:08,420 --> 00:01:12,860
be difficult because being an expert

00:01:11,030 --> 00:01:15,740
doesn't necessarily make someone a good

00:01:12,860 --> 00:01:17,450
teacher or a good mentor an experienced

00:01:15,740 --> 00:01:20,360
developer may be able to write very

00:01:17,450 --> 00:01:22,130
clean and performant code but they may

00:01:20,360 --> 00:01:24,950
not be armed with the strategies to best

00:01:22,130 --> 00:01:26,420
help junior developers and it can also

00:01:24,950 --> 00:01:28,010
be difficult for an experienced

00:01:26,420 --> 00:01:29,240
developer to remember the pain points

00:01:28,010 --> 00:01:31,759
that they went through as a junior

00:01:29,240 --> 00:01:33,500
developer so I decided to talk to some

00:01:31,759 --> 00:01:35,750
junior developers some senior developers

00:01:33,500 --> 00:01:37,580
and some people in between and figure

00:01:35,750 --> 00:01:40,250
out what was successful and what wasn't

00:01:37,580 --> 00:01:42,829
and in the process I saw three key

00:01:40,250 --> 00:01:45,229
points that were echoed so my hope today

00:01:42,829 --> 00:01:46,939
is that you'll not just start thinking

00:01:45,229 --> 00:01:49,549
about these problems but you'll be able

00:01:46,939 --> 00:01:51,110
to take away some strategies that you

00:01:49,549 --> 00:01:54,290
can start applying in order to best

00:01:51,110 --> 00:01:56,630
support junior developers so one of the

00:01:54,290 --> 00:01:59,659
frustrations that was voiced was lack of

00:01:56,630 --> 00:02:01,130
structure many places say that they have

00:01:59,659 --> 00:02:02,689
the capacity to take on a junior

00:02:01,130 --> 00:02:05,299
developer but what does that really mean

00:02:02,689 --> 00:02:08,090
a lack of structure can be overwhelming

00:02:05,299 --> 00:02:10,700
and turning a junior developer loose on

00:02:08,090 --> 00:02:12,500
a random tracker story is not only

00:02:10,700 --> 00:02:15,350
stressful to them but it's ultimately

00:02:12,500 --> 00:02:17,570
less productive so what structures can

00:02:15,350 --> 00:02:20,950
we put into place to increase

00:02:17,570 --> 00:02:22,480
productivity and decrease stress

00:02:20,950 --> 00:02:25,629
so the first thing I recommend is

00:02:22,480 --> 00:02:27,250
creating a long-term plan this involves

00:02:25,629 --> 00:02:29,440
answering questions like what are the

00:02:27,250 --> 00:02:31,030
minimal essential skills that this

00:02:29,440 --> 00:02:33,129
developer needs to know right now in

00:02:31,030 --> 00:02:36,430
order to become a productive member of

00:02:33,129 --> 00:02:38,769
our team what or should he or she be

00:02:36,430 --> 00:02:41,860
able to do by next week by next month

00:02:38,769 --> 00:02:44,620
and next year and how are we going to

00:02:41,860 --> 00:02:46,989
get there so having a long-term plan

00:02:44,620 --> 00:02:50,769
provides a roadmap for both the company

00:02:46,989 --> 00:02:52,090
and and the junior developer the next

00:02:50,769 --> 00:02:54,849
thing I recommend is create a structure

00:02:52,090 --> 00:02:57,430
for pairing how often will the junior

00:02:54,849 --> 00:03:00,250
developer pair at our company with whom

00:02:57,430 --> 00:03:03,010
will they pair pairing a junior with a

00:03:00,250 --> 00:03:04,680
junior can be beneficial because juniors

00:03:03,010 --> 00:03:07,329
tend to have similar thought processes

00:03:04,680 --> 00:03:09,340
similar skill levels but they'll most

00:03:07,329 --> 00:03:12,430
likely bring different skill sets the

00:03:09,340 --> 00:03:14,200
table so if specific stories in your

00:03:12,430 --> 00:03:16,180
project management tool are tagged as

00:03:14,200 --> 00:03:17,290
being junior level meaning that their

00:03:16,180 --> 00:03:19,480
problems that are going to be

00:03:17,290 --> 00:03:21,519
challenging but not out of reach it's

00:03:19,480 --> 00:03:23,560
almost guaranteed that a junior junior

00:03:21,519 --> 00:03:26,350
pair will provide a productive learning

00:03:23,560 --> 00:03:28,180
experience but at the same time we don't

00:03:26,350 --> 00:03:30,639
want our junior developers to be stuck

00:03:28,180 --> 00:03:33,190
indefinitely with these easiest stories

00:03:30,639 --> 00:03:35,260
so build in time for juniors to Paris

00:03:33,190 --> 00:03:36,880
seniors in order to be exposed to

00:03:35,260 --> 00:03:39,310
different ways of thinking that will

00:03:36,880 --> 00:03:41,410
allow the junior to grow and remember

00:03:39,310 --> 00:03:45,190
that ultimately in a junior senior pair

00:03:41,410 --> 00:03:47,829
the measure of a successful pair is not

00:03:45,190 --> 00:03:50,980
how much work gets done but how much the

00:03:47,829 --> 00:03:52,569
junior developer learns and finally

00:03:50,980 --> 00:03:55,030
create a structure for consistent

00:03:52,569 --> 00:03:57,190
feedback for example code reviews when

00:03:55,030 --> 00:03:59,680
will they happen who will be reviewing

00:03:57,190 --> 00:04:01,389
them how often and it goes both ways

00:03:59,680 --> 00:04:03,310
make sure that the junior is also

00:04:01,389 --> 00:04:05,920
reviewing pull requests for more

00:04:03,310 --> 00:04:07,780
experienced developers one-on-ones are

00:04:05,920 --> 00:04:10,389
also an easy way to provide feedback to

00:04:07,780 --> 00:04:12,280
the developer and also salid solicit

00:04:10,389 --> 00:04:14,709
feedback from the developer both on

00:04:12,280 --> 00:04:17,440
career a career level and a personal

00:04:14,709 --> 00:04:19,570
level so a well-thought-out structure

00:04:17,440 --> 00:04:22,919
makes it easy for a junior developer to

00:04:19,570 --> 00:04:24,940
drop into the system and start driving

00:04:22,919 --> 00:04:27,010
this is a problem that we hear a lot

00:04:24,940 --> 00:04:28,590
about and it's natural for one to be

00:04:27,010 --> 00:04:31,080
want to be really

00:04:28,590 --> 00:04:32,160
really good at something often junior

00:04:31,080 --> 00:04:33,870
developers come into an environment

00:04:32,160 --> 00:04:36,390
where their co-workers are people who

00:04:33,870 --> 00:04:39,240
have been programming for 5 10 15 years

00:04:36,390 --> 00:04:41,850
and so the gym junior developer realizes

00:04:39,240 --> 00:04:43,380
how much he or she doesn't know and so

00:04:41,850 --> 00:04:46,140
it's easy to start thinking I don't

00:04:43,380 --> 00:04:47,550
belong here I'm a fraud or if I can't

00:04:46,140 --> 00:04:50,010
figure this out they're gonna think I'm

00:04:47,550 --> 00:04:51,750
incapable and that's the kind of mindset

00:04:50,010 --> 00:04:53,580
that causes a junior developer to go

00:04:51,750 --> 00:04:55,140
down rabbit holes searching for an

00:04:53,580 --> 00:04:57,450
answer when they could easily turn to

00:04:55,140 --> 00:04:58,770
the person next to them and just ask so

00:04:57,450 --> 00:05:00,180
we need to create an environment where a

00:04:58,770 --> 00:05:02,130
junior feels comfortable asking

00:05:00,180 --> 00:05:06,240
questions and exposing gaps in their

00:05:02,130 --> 00:05:07,260
knowledge so how do we do this when

00:05:06,240 --> 00:05:09,600
you're bringing on a junior developer

00:05:07,260 --> 00:05:10,980
one of the first things that you must do

00:05:09,600 --> 00:05:13,140
is let them know that if they have a

00:05:10,980 --> 00:05:15,480
question or if they're struggling it's

00:05:13,140 --> 00:05:17,760
fine and even expected to ask another

00:05:15,480 --> 00:05:18,990
developer for help and then fault the

00:05:17,760 --> 00:05:20,880
follow through on this is just an

00:05:18,990 --> 00:05:23,460
important be patient when those

00:05:20,880 --> 00:05:25,350
questions are asked be willing to really

00:05:23,460 --> 00:05:29,580
listen and show that their questions are

00:05:25,350 --> 00:05:32,340
valuable make sure to set and share

00:05:29,580 --> 00:05:34,650
realistic expectations it seems pretty

00:05:32,340 --> 00:05:36,300
logical but a junior developer is not

00:05:34,650 --> 00:05:38,460
going to have near the productivity

00:05:36,300 --> 00:05:39,990
level as a senior developer but it's not

00:05:38,460 --> 00:05:41,400
going to be as obvious the junior

00:05:39,990 --> 00:05:43,620
developer when the people that they're

00:05:41,400 --> 00:05:46,170
surrounded by are moving at twice the

00:05:43,620 --> 00:05:49,260
speed that they are so be upfront with

00:05:46,170 --> 00:05:51,720
new hires tell them we don't expect you

00:05:49,260 --> 00:05:55,740
to complete this giant feature in 23

00:05:51,720 --> 00:05:57,330
days and finally allowed junior

00:05:55,740 --> 00:05:59,910
developers to see other developers

00:05:57,330 --> 00:06:01,170
struggle one of the junior developers

00:05:59,910 --> 00:06:03,300
that I talked to you in preparing for

00:06:01,170 --> 00:06:05,910
this talk said that one of the most

00:06:03,300 --> 00:06:07,740
relieving things was watching a senior

00:06:05,910 --> 00:06:09,870
developer struggle with a problem that

00:06:07,740 --> 00:06:11,490
they had just been having and it made

00:06:09,870 --> 00:06:13,740
him realize that it wasn't a problem

00:06:11,490 --> 00:06:16,410
with his abilities or his intellect it

00:06:13,740 --> 00:06:17,970
was that programming is hard and so be

00:06:16,410 --> 00:06:19,920
open with junior developers make it

00:06:17,970 --> 00:06:24,660
clear that nobody has all the answers

00:06:19,920 --> 00:06:27,060
and finally I think the last problem

00:06:24,660 --> 00:06:29,340
that I heard kind of commonly was having

00:06:27,060 --> 00:06:31,110
a surface level understanding and one

00:06:29,340 --> 00:06:33,060
misconception that I see among people

00:06:31,110 --> 00:06:35,040
learning how to code is that it's just

00:06:33,060 --> 00:06:37,890
about memorizing implementation which

00:06:35,040 --> 00:06:38,940
it's not I just want to be clear so

00:06:37,890 --> 00:06:40,500
without true under

00:06:38,940 --> 00:06:42,330
standing it's very difficult to

00:06:40,500 --> 00:06:44,280
distinguish between bad code and

00:06:42,330 --> 00:06:45,990
mediocre code and good code and really

00:06:44,280 --> 00:06:48,360
good code because you have nothing to

00:06:45,990 --> 00:06:50,010
base that on and so have they only

00:06:48,360 --> 00:06:51,480
having a surface level understanding can

00:06:50,010 --> 00:06:53,520
result in big problems when you're

00:06:51,480 --> 00:06:54,540
trying to debug something or when you're

00:06:53,520 --> 00:06:56,670
trying to implement a feature that's

00:06:54,540 --> 00:06:58,530
maybe slightly different than the norm

00:06:56,670 --> 00:07:00,750
because those memorized patterns are

00:06:58,530 --> 00:07:03,390
going to work anymore ultimately we want

00:07:00,750 --> 00:07:04,950
junior developers over time to expand

00:07:03,390 --> 00:07:07,080
their knowledge and to have a deep

00:07:04,950 --> 00:07:11,370
understanding of how and why something

00:07:07,080 --> 00:07:13,470
works so how do we do this when working

00:07:11,370 --> 00:07:15,870
with a junior developer use proven

00:07:13,470 --> 00:07:18,840
teaching techniques one of my favorites

00:07:15,870 --> 00:07:20,490
is creating visual representations so

00:07:18,840 --> 00:07:24,120
whether that means whiteboarding or

00:07:20,490 --> 00:07:25,740
drawing diagrams it forces a mind to

00:07:24,120 --> 00:07:28,260
process information in a different way

00:07:25,740 --> 00:07:31,440
you're connecting the abstract with the

00:07:28,260 --> 00:07:33,570
concrete using analogies is another one

00:07:31,440 --> 00:07:35,910
of my favorite teaching techniques for

00:07:33,570 --> 00:07:38,610
example how can you relate mapping over

00:07:35,910 --> 00:07:41,190
an array to taking individual polaroid

00:07:38,610 --> 00:07:43,560
pictures of people in a line or how is

00:07:41,190 --> 00:07:45,870
an ORM like a translator between two

00:07:43,560 --> 00:07:48,180
people speaking different languages so

00:07:45,870 --> 00:07:49,950
both visualizations and analogies bridge

00:07:48,180 --> 00:07:51,690
that gap between abstract code and

00:07:49,950 --> 00:07:55,050
situations that a junior developers

00:07:51,690 --> 00:07:56,400
already familiar with and finally one of

00:07:55,050 --> 00:07:58,410
the most effective ways to deepen

00:07:56,400 --> 00:08:00,300
understanding is to provide junior

00:07:58,410 --> 00:08:02,610
developers with opportunities to work on

00:08:00,300 --> 00:08:04,890
projects that build on or reinforce

00:08:02,610 --> 00:08:06,780
concepts that they've already seen so

00:08:04,890 --> 00:08:08,790
assigning projects with slight

00:08:06,780 --> 00:08:10,890
differences provide practice

00:08:08,790 --> 00:08:12,240
opportunities but they do it in a way

00:08:10,890 --> 00:08:14,550
where the developer is forced to

00:08:12,240 --> 00:08:18,780
consider how those differences impact

00:08:14,550 --> 00:08:20,760
the way they choose to implement it so I

00:08:18,780 --> 00:08:22,230
have a challenge for you during this

00:08:20,760 --> 00:08:26,040
afternoon's tea time which sounds very

00:08:22,230 --> 00:08:29,310
fancy I want you to find someone to talk

00:08:26,040 --> 00:08:31,260
to you and I want you to share mentoring

00:08:29,310 --> 00:08:34,560
strategies how does your company

00:08:31,260 --> 00:08:36,479
currently support junior developers if

00:08:34,560 --> 00:08:38,219
you're here with a co-worker discuss

00:08:36,479 --> 00:08:41,190
what you want to take back to your team

00:08:38,219 --> 00:08:44,159
what will you implement what do you want

00:08:41,190 --> 00:08:46,990
the outcomes to be and finally find

00:08:44,159 --> 00:08:48,940
someone who needs a mentor and this is

00:08:46,990 --> 00:08:51,250
particularly relevant for those of you

00:08:48,940 --> 00:08:53,680
who may be newer to development I know

00:08:51,250 --> 00:08:55,570
it sounds counterintuitive but you're

00:08:53,680 --> 00:08:57,160
able to better remember what it's like

00:08:55,570 --> 00:08:59,500
to learn something for the first time

00:08:57,160 --> 00:09:03,160
what worked for you where did you find

00:08:59,500 --> 00:09:06,640
those pain points and so with that a

00:09:03,160 --> 00:09:08,500
shout out to will Andrew try steve jason

00:09:06,640 --> 00:09:11,170
aaron and john for letting me pick their

00:09:08,500 --> 00:09:14,140
brains for this talk feel free to reach

00:09:11,170 --> 00:09:18,690
out to me on twitter or by email and

00:09:14,140 --> 00:09:18,690
enjoy your afternoon tea and thank you

00:09:35,900 --> 00:09:37,960

YouTube URL: https://www.youtube.com/watch?v=tYOx8mA5p2c


