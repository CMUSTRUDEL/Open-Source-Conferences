Title: GORUCO 2015: Godfrey Chan: Dropping down to The Metalâ„¢
Publication date: 2020-01-23
Playlist: GORUCO 2015
Description: 
	@chancancode
As much as we love Ruby, when you need to be really close to the metal, you have no choice but to use JavaScript. This is why I developed the javascript gem to help you harness the raw power of your machines. In this talk, we will examine the Ruby tricks and black magic hidden behind this ludicrous invention. Along the way, we will learn about how Ruby internally deal with variable lookups, method calls, scoping and bindings. Together, we will push the limits of the Ruby language, taking it to places Matz never ever envisioned!

 Talk given at GORUCO 2015: http://goruco.com
Captions: 
	00:00:13,959 --> 00:00:20,750
I'm goffrey you can find me on the

00:00:16,400 --> 00:00:22,820
internets as schenken code and I worked

00:00:20,750 --> 00:00:26,599
for consulting agency improve your call

00:00:22,820 --> 00:00:28,340
Driehaus we basically help people design

00:00:26,599 --> 00:00:30,529
and build stuff so if you need help

00:00:28,340 --> 00:00:32,989
building your next rails app or

00:00:30,529 --> 00:00:37,940
JavaScript app please call we're pretty

00:00:32,989 --> 00:00:40,790
awesome team and yes Luke mentioned i am

00:00:37,940 --> 00:00:44,210
from canada and I'm a Canadian from what

00:00:40,790 --> 00:00:47,449
I hear we are basically known for free

00:00:44,210 --> 00:00:54,710
things among the Americans the Canadian

00:00:47,449 --> 00:01:01,900
accent healthcare and Texas I'm so sorry

00:00:54,710 --> 00:01:04,970
for the typo wrong Texas if you want to

00:01:01,900 --> 00:01:08,270
learn about or practice your Canadian

00:01:04,970 --> 00:01:10,729
accent I made a jump for you simply gem

00:01:08,270 --> 00:01:12,799
install Canada on your computer and you

00:01:10,729 --> 00:01:22,280
will be able to compete here like a true

00:01:12,799 --> 00:01:26,450
Canadian would so that takes care of the

00:01:22,280 --> 00:01:28,970
accent about health care to be honest we

00:01:26,450 --> 00:01:31,310
don't actually talk about that that much

00:01:28,970 --> 00:01:33,440
in Canada and I really have no idea what

00:01:31,310 --> 00:01:36,290
healthcare is all about so unfortunately

00:01:33,440 --> 00:01:38,720
I can't tell you too much about it but

00:01:36,290 --> 00:01:42,170
as for Texas basically everyone hates it

00:01:38,720 --> 00:01:45,470
I really did not enjoy doing accounting

00:01:42,170 --> 00:01:48,380
and every year I get really stressed out

00:01:45,470 --> 00:01:50,870
about it on in April fortunately for me

00:01:48,380 --> 00:01:54,970
i recently bought a kindle and I'll

00:01:50,870 --> 00:01:54,970
source all my bookkeeping to Amazon ah

00:01:55,180 --> 00:02:01,010
so hopefully things would get better

00:01:57,710 --> 00:02:06,979
their bookkeeping amazon kindle for

00:02:01,010 --> 00:02:10,039
keeping kindle okay I I am also a member

00:02:06,979 --> 00:02:11,599
of the rails for team as you learn from

00:02:10,039 --> 00:02:13,489
Arlene this morning that means that I

00:02:11,599 --> 00:02:16,760
get a treat from the rails Twitter

00:02:13,489 --> 00:02:19,099
account but beyond that that basically

00:02:16,760 --> 00:02:20,810
at zero credibility to what I'm about to

00:02:19,099 --> 00:02:23,930
tell you and it's very important for you

00:02:20,810 --> 00:02:27,859
to remember that for resident out

00:02:23,930 --> 00:02:29,750
what it actually means though is being

00:02:27,859 --> 00:02:31,459
on the rails for team it means that I

00:02:29,750 --> 00:02:34,430
get to work alongside some really smart

00:02:31,459 --> 00:02:36,560
people like ehh Aaron Patterson and I

00:02:34,430 --> 00:02:38,239
lean on one hand that's pretty awesome

00:02:36,560 --> 00:02:40,790
to be able to learn from these people

00:02:38,239 --> 00:02:43,700
but on the other hand it does make me

00:02:40,790 --> 00:02:46,489
feel inadequate sometimes I mean like

00:02:43,700 --> 00:02:48,290
these are thought leaders and like Ruby

00:02:46,489 --> 00:02:52,010
heroes right like what am I doing here

00:02:48,290 --> 00:02:55,239
so I decided it is time for me to up my

00:02:52,010 --> 00:02:58,819
game and become a thought leader myself

00:02:55,239 --> 00:03:01,280
fortunately for me there are a lot of

00:02:58,819 --> 00:03:03,620
resource out there these days for anyone

00:03:01,280 --> 00:03:06,290
that's willing to learn you can probably

00:03:03,620 --> 00:03:08,989
find this book in your local library the

00:03:06,290 --> 00:03:12,409
promise is to transform you from regular

00:03:08,989 --> 00:03:14,090
dummy to a thought leader that's a

00:03:12,409 --> 00:03:16,700
little bit too basic for me though and

00:03:14,090 --> 00:03:20,930
my personal favorite is this other book

00:03:16,700 --> 00:03:22,730
from a different publisher because it's

00:03:20,930 --> 00:03:26,540
written by some of my favorite pal

00:03:22,730 --> 00:03:30,530
eaters in the industry so I i order a

00:03:26,540 --> 00:03:32,870
copy of this book on my kindle and i was

00:03:30,530 --> 00:03:37,129
really excited to find out what's in

00:03:32,870 --> 00:03:40,819
store for me and try it out this book

00:03:37,129 --> 00:03:42,799
definitely does not disappoint I I only

00:03:40,819 --> 00:03:45,169
had time to read the first chapter on my

00:03:42,799 --> 00:03:47,479
flight here but already learned some

00:03:45,169 --> 00:03:50,900
very valuable lessons that I can apply

00:03:47,479 --> 00:03:52,729
to my talk today here learned that when

00:03:50,900 --> 00:03:55,280
common tactic amount thought leaders is

00:03:52,729 --> 00:03:58,449
too great controversies for example

00:03:55,280 --> 00:04:02,269
David famously from now to death of the

00:03:58,449 --> 00:04:04,280
TDD at is railsconf Kino last year which

00:04:02,269 --> 00:04:06,259
sparked a lot of controversies and made

00:04:04,280 --> 00:04:09,859
him really famous even among people that

00:04:06,259 --> 00:04:11,599
doesn't know what rails is so I was

00:04:09,859 --> 00:04:14,030
really inspired by this and I decide to

00:04:11,599 --> 00:04:17,329
make this talk as a controversial as

00:04:14,030 --> 00:04:20,680
possible and to start I would like to

00:04:17,329 --> 00:04:24,009
pronounce death or something and

00:04:20,680 --> 00:04:26,650
I would like to announce that thought

00:04:24,009 --> 00:04:28,630
leadership is now dead my name is Scott

00:04:26,650 --> 00:04:36,070
free and I'm allowed to think whatever

00:04:28,630 --> 00:04:38,590
one take that ball leaders seriously

00:04:36,070 --> 00:04:41,199
though all our rails contributors are

00:04:38,590 --> 00:04:43,930
like really awesome people and if you're

00:04:41,199 --> 00:04:45,460
interested in contributing rails or just

00:04:43,930 --> 00:04:47,380
keeping out what the latest changes in

00:04:45,460 --> 00:04:49,000
rails in general I help run this

00:04:47,380 --> 00:04:50,560
newsletter called this week in rails you

00:04:49,000 --> 00:04:52,330
can subscribe to it on this website or

00:04:50,560 --> 00:04:54,460
you can read it on Rails flogged every

00:04:52,330 --> 00:04:56,289
Friday you should also come talk to us

00:04:54,460 --> 00:04:57,520
at the conference we would love to give

00:04:56,289 --> 00:05:00,729
you some pointers to help you get

00:04:57,520 --> 00:05:02,979
started and anyway that's enough about

00:05:00,729 --> 00:05:13,419
Canada and rails let's get to the real

00:05:02,979 --> 00:05:17,169
talk alright let's talk about JavaScript

00:05:13,419 --> 00:05:20,080
I know we all love Ruby that's why we

00:05:17,169 --> 00:05:22,080
here but deep down we all know it unlike

00:05:20,080 --> 00:05:24,460
JavaScript ruby is not web-scale

00:05:22,080 --> 00:05:26,199
everyone's a while and you will need to

00:05:24,460 --> 00:05:29,760
get really close to metal and you have

00:05:26,199 --> 00:05:32,170
no choice but to use javascript

00:05:29,760 --> 00:05:35,320
let's talk about what make JavaScript so

00:05:32,170 --> 00:05:38,320
fast that's right the secret is in the

00:05:35,320 --> 00:05:42,610
syntax you see javascript has very fast

00:05:38,320 --> 00:05:45,070
syntax I'll give you an example get

00:05:42,610 --> 00:05:46,900
hints most your arts group runtimes have

00:05:45,070 --> 00:05:49,300
a just-in-time compiler to make things

00:05:46,900 --> 00:05:51,400
really fast but the JavaScript syntax

00:05:49,300 --> 00:05:54,100
allows you to drop in some hints for a

00:05:51,400 --> 00:05:55,900
compiler to make things even faster for

00:05:54,100 --> 00:05:58,720
example let's say you have a triangle

00:05:55,900 --> 00:06:01,120
you know the length of side a and B and

00:05:58,720 --> 00:06:04,750
you're wondering what this length of

00:06:01,120 --> 00:06:07,090
side c is you might remember this from

00:06:04,750 --> 00:06:09,520
your high school geometry class you can

00:06:07,090 --> 00:06:12,850
get the length of the first slide first

00:06:09,520 --> 00:06:14,950
side by calculating the square root of a

00:06:12,850 --> 00:06:16,360
squared plus b square if that doesn't

00:06:14,950 --> 00:06:18,130
ring bell don't worry about it the

00:06:16,360 --> 00:06:21,190
actual purpose of this wampler is

00:06:18,130 --> 00:06:22,840
irrelevant to the example so let's

00:06:21,190 --> 00:06:25,060
implement the triangle formula in

00:06:22,840 --> 00:06:26,350
javascript first you probably start by

00:06:25,060 --> 00:06:29,470
writing a function that computes the

00:06:26,350 --> 00:06:31,620
square of a number and from there you

00:06:29,470 --> 00:06:33,820
would write a function that actually

00:06:31,620 --> 00:06:35,560
implement the formula are using the

00:06:33,820 --> 00:06:37,840
square function you implement it so

00:06:35,560 --> 00:06:40,390
square root of a squared plus B Square

00:06:37,840 --> 00:06:42,880
pretty straightforward what you might

00:06:40,390 --> 00:06:45,280
not know is that you can sprinkle in a

00:06:42,880 --> 00:06:46,830
few more lines of code and your code

00:06:45,280 --> 00:06:49,000
will automatically become faster

00:06:46,830 --> 00:06:51,580
specifically because javascript is a

00:06:49,000 --> 00:06:54,010
weakly typed language even though this

00:06:51,580 --> 00:06:56,110
is really obvious to you that like the

00:06:54,010 --> 00:06:58,360
inputs are supposed to be numbers it's

00:06:56,110 --> 00:07:01,330
not obvious to kampala but don't worry

00:06:58,360 --> 00:07:03,490
by adding some unary + operators here

00:07:01,330 --> 00:07:06,070
and there your code will automatically

00:07:03,490 --> 00:07:09,310
become faster because the compiler now

00:07:06,070 --> 00:07:12,220
know what you expect from those inputs

00:07:09,310 --> 00:07:16,060
and bam now your code is five percent

00:07:12,220 --> 00:07:18,660
plastic not too bad for just a few

00:07:16,060 --> 00:07:18,660
characters

00:07:19,760 --> 00:07:28,260
all right in case you don't believe me I

00:07:23,550 --> 00:07:31,920
made a chart as you can now clearly see

00:07:28,260 --> 00:07:34,320
is actually much faster but um s with

00:07:31,920 --> 00:07:37,680
moles marketing charts it did not start

00:07:34,320 --> 00:07:40,950
from zero so that seems fine to me

00:07:37,680 --> 00:07:44,130
personally but if you insist it looks

00:07:40,950 --> 00:07:47,430
like this if you reposition the x axis

00:07:44,130 --> 00:07:49,470
look zero anyway as you can see that's

00:07:47,430 --> 00:07:51,510
just a quick example but like it already

00:07:49,470 --> 00:07:54,540
short case why jars with such a powerful

00:07:51,510 --> 00:07:56,430
language so that got me thinking what if

00:07:54,540 --> 00:07:58,710
we can combine the JavaScript syntax

00:07:56,430 --> 00:08:00,740
which is very fast with the review

00:07:58,710 --> 00:08:03,390
virtual machine which is both magic

00:08:00,740 --> 00:08:05,640
perhaps maybe we'll just get the best of

00:08:03,390 --> 00:08:09,690
both worlds and everything will be

00:08:05,640 --> 00:08:12,210
awesome so if you are already sold at

00:08:09,690 --> 00:08:14,010
this introduction the code is already

00:08:12,210 --> 00:08:18,570
published on the internets you can get

00:08:14,010 --> 00:08:20,040
it by running gem install java script if

00:08:18,570 --> 00:08:21,750
you're in patient you can just download

00:08:20,040 --> 00:08:24,000
that now and ignore me for the rest of

00:08:21,750 --> 00:08:27,060
the talk but for rest of you will build

00:08:24,000 --> 00:08:29,760
this thing together right now let's talk

00:08:27,060 --> 00:08:32,099
about Java for a moment let's say

00:08:29,760 --> 00:08:35,849
hypothetically you have a hello world

00:08:32,099 --> 00:08:37,349
program written in Java and it's okay if

00:08:35,849 --> 00:08:39,690
you don't know Java this is basically

00:08:37,349 --> 00:08:43,620
the standard hello world example copy

00:08:39,690 --> 00:08:45,600
from redirects the chakra website now

00:08:43,620 --> 00:08:49,200
what do you think would happen if we

00:08:45,600 --> 00:08:53,010
save this file with a dot RB extension

00:08:49,200 --> 00:08:55,980
and run it with Ruby would it just work

00:08:53,010 --> 00:08:58,980
and print hello world or would it give

00:08:55,980 --> 00:09:03,750
you a syntax error or would it give you

00:08:58,980 --> 00:09:08,640
a runtime error let's fold who thinks

00:09:03,750 --> 00:09:12,089
it's gonna be a all right some more

00:09:08,640 --> 00:09:19,170
money Oh ends who you think it's gonna

00:09:12,089 --> 00:09:23,850
be be okay more hints and see okay a few

00:09:19,170 --> 00:09:27,870
hints as it turns out the correct answer

00:09:23,850 --> 00:09:29,209
is B it's a syntax error but what does

00:09:27,870 --> 00:09:31,279
that even mean

00:09:29,209 --> 00:09:33,079
well understand that we have to

00:09:31,279 --> 00:09:34,459
understand how Ruby works from your

00:09:33,079 --> 00:09:36,259
perspective you just write some Ruby

00:09:34,459 --> 00:09:38,240
code and you throw it at the interpreter

00:09:36,259 --> 00:09:40,189
and it runs the code for you but what

00:09:38,240 --> 00:09:42,350
actually happens on your hood and it

00:09:40,189 --> 00:09:44,300
very high level is a two-step process

00:09:42,350 --> 00:09:45,889
the first step is for the interpreter

00:09:44,300 --> 00:09:48,139
you try to understand your coat at a

00:09:45,889 --> 00:09:50,119
syntactical level which we call parsing

00:09:48,139 --> 00:09:53,480
and once it understood your code it can

00:09:50,119 --> 00:09:55,399
actually evaluate them for you if at the

00:09:53,480 --> 00:09:56,809
parsing step the interpret thinks that

00:09:55,399 --> 00:09:59,540
you code is so broken that it doesn't

00:09:56,809 --> 00:10:01,819
even understand it it will refuse to

00:09:59,540 --> 00:10:04,160
continue and promote syntax error which

00:10:01,819 --> 00:10:06,350
is what we got earlier obviously since

00:10:04,160 --> 00:10:07,610
your code is not even runnable a syntax

00:10:06,350 --> 00:10:09,529
error is not something that you can

00:10:07,610 --> 00:10:12,559
rescue and recover from within the code

00:10:09,529 --> 00:10:14,540
that cost it on the other hand if the

00:10:12,559 --> 00:10:16,459
interpreter understands the basic

00:10:14,540 --> 00:10:18,230
meaning and structure of your code but

00:10:16,459 --> 00:10:19,970
it found problems with it later on at

00:10:18,230 --> 00:10:22,490
execution time it would give you a

00:10:19,970 --> 00:10:24,949
runtime error that could this could be

00:10:22,490 --> 00:10:27,800
anything from a divided by zero error or

00:10:24,949 --> 00:10:29,209
no method there and that's probably

00:10:27,800 --> 00:10:30,860
something that you're more used to

00:10:29,209 --> 00:10:33,980
dealing with on a day-to-day basis as a

00:10:30,860 --> 00:10:37,009
programmer fortunately for us because

00:10:33,980 --> 00:10:39,529
our code is now running in the Ruby VM

00:10:37,009 --> 00:10:42,499
we can actually anticipate these errors

00:10:39,529 --> 00:10:46,249
and rescue from them and try to recover

00:10:42,499 --> 00:10:49,519
from the error States enough about Ruby

00:10:46,249 --> 00:10:50,990
let's talk about dr. hypothetically

00:10:49,519 --> 00:10:53,059
let's say you have a hello world example

00:10:50,990 --> 00:10:54,439
written javascripts what do you think

00:10:53,059 --> 00:10:56,619
would happen if you save that as

00:10:54,439 --> 00:10:59,660
JavaScript of RB and try to run it rude

00:10:56,619 --> 00:11:01,939
what did you forge would it give you a

00:10:59,660 --> 00:11:06,730
syntax error or would I give you a

00:11:01,939 --> 00:11:15,499
runtime error let's all who thinks it is

00:11:06,730 --> 00:11:18,019
a-ok no one b/c ok Wow most of you are

00:11:15,499 --> 00:11:19,549
really smart the correct answer is C is

00:11:18,019 --> 00:11:22,129
the runtime error there's a good news

00:11:19,549 --> 00:11:23,689
because now that we are in the second

00:11:22,129 --> 00:11:26,779
stage the Ruby interpreter actually

00:11:23,689 --> 00:11:28,939
understand Dakota syntactic level and so

00:11:26,779 --> 00:11:31,220
we can possibly recover it from this and

00:11:28,939 --> 00:11:33,559
try to make it work to do that we need

00:11:31,220 --> 00:11:37,309
to understand how Ruby sees this piece

00:11:33,559 --> 00:11:39,370
of code first it thinks that you're

00:11:37,309 --> 00:11:42,850
trying to find a local variable

00:11:39,370 --> 00:11:45,010
or local or method name console and

00:11:42,850 --> 00:11:47,770
you're trying to take the result of that

00:11:45,010 --> 00:11:51,370
variable lookup or method call and call

00:11:47,770 --> 00:11:53,440
a lock method on it and we know that

00:11:51,370 --> 00:11:56,650
parenthesis are option on review so Ian

00:11:53,440 --> 00:11:59,770
ignore these and finally we are passing

00:11:56,650 --> 00:12:02,170
a single argument to the method call log

00:11:59,770 --> 00:12:05,830
and in this case the argument is the

00:12:02,170 --> 00:12:07,330
string literal hello and at the end we

00:12:05,830 --> 00:12:09,640
have a semicolon that we know that

00:12:07,330 --> 00:12:12,970
semicolons are optional and Ruby so we

00:12:09,640 --> 00:12:14,680
can also ignore it so looking at the

00:12:12,970 --> 00:12:17,230
error message again Ruby is basically

00:12:14,680 --> 00:12:20,200
complaining that it doesn't know what

00:12:17,230 --> 00:12:23,730
console refers to that's easy enough to

00:12:20,200 --> 00:12:26,260
fix we can just define a class with a

00:12:23,730 --> 00:12:28,450
instance method called log and then we

00:12:26,260 --> 00:12:32,080
can assign an instance of this class to

00:12:28,450 --> 00:12:35,110
the local variable called console and if

00:12:32,080 --> 00:12:36,880
we save this run it again it would do

00:12:35,110 --> 00:12:40,390
exactly what you expected and will print

00:12:36,880 --> 00:12:42,550
hello to the teacher screen and with

00:12:40,390 --> 00:12:44,850
that we have successfully executed our

00:12:42,550 --> 00:12:51,279
first line of JavaScript in the Ruby VM

00:12:44,850 --> 00:12:54,100
success if you look at it closely though

00:12:51,279 --> 00:12:56,320
there's a problem we are first of all

00:12:54,100 --> 00:12:59,380
leaking a top level variable which is

00:12:56,320 --> 00:13:01,360
not very nice and we're also mixing the

00:12:59,380 --> 00:13:03,600
Ruby code with JavaScript code which is

00:13:01,360 --> 00:13:06,040
like a little bit annoying to read

00:13:03,600 --> 00:13:08,080
ideally we want to keep all the ball at

00:13:06,040 --> 00:13:10,029
played in a file that we require and

00:13:08,080 --> 00:13:13,990
then maybe keep all the JavaScript code

00:13:10,029 --> 00:13:16,300
in block for bonus points in other words

00:13:13,990 --> 00:13:19,089
we are trying to write domain-specific

00:13:16,300 --> 00:13:21,459
language in review fortunately this is a

00:13:19,089 --> 00:13:25,029
really well established frontier in the

00:13:21,459 --> 00:13:28,600
river community if you remember rick our

00:13:25,029 --> 00:13:31,260
spec or even rawr be in your rails app

00:13:28,600 --> 00:13:34,150
these are all examples of Ruby dsl's and

00:13:31,260 --> 00:13:37,120
the number one weapon for writing Ruby

00:13:34,150 --> 00:13:38,980
dsl's is using instance exec which lets

00:13:37,120 --> 00:13:41,770
you take a block and run it in the

00:13:38,980 --> 00:13:44,170
context of an arbitrary object or in

00:13:41,770 --> 00:13:47,170
other words you can change which the

00:13:44,170 --> 00:13:49,769
what the self pointer points to when

00:13:47,170 --> 00:13:51,929
executing the block

00:13:49,769 --> 00:13:55,619
this is really handy so we can basically

00:13:51,929 --> 00:13:56,910
just define a class called contacts well

00:13:55,619 --> 00:13:59,429
you can call whatever you want but I

00:13:56,910 --> 00:14:01,529
caught contacts and whenever you want to

00:13:59,429 --> 00:14:04,259
run some JavaScript code instantiate

00:14:01,529 --> 00:14:07,819
like an instance of this object and we

00:14:04,259 --> 00:14:10,709
call instance exact with with the block

00:14:07,819 --> 00:14:12,480
because Ruby allows you to omit the cell

00:14:10,709 --> 00:14:15,029
cured when calling method on the same

00:14:12,480 --> 00:14:17,670
object this essentially allows you to

00:14:15,029 --> 00:14:19,589
provide arbitrary global methods to the

00:14:17,670 --> 00:14:22,100
JavaScript block without actually using

00:14:19,589 --> 00:14:28,769
global methods which is pretty neat

00:14:22,100 --> 00:14:30,629
success let's talk about variables now

00:14:28,769 --> 00:14:33,029
this is how you define a variable in

00:14:30,629 --> 00:14:35,279
Java scripts VAR message equals hello

00:14:33,029 --> 00:14:38,489
world what do you think would happen

00:14:35,279 --> 00:14:41,759
when we try to run this code would it

00:14:38,489 --> 00:14:45,899
just work or would it give you a syntax

00:14:41,759 --> 00:14:49,139
error or maybe no method error or name

00:14:45,899 --> 00:14:50,790
error now before you go I would like to

00:14:49,139 --> 00:14:53,699
point out that no method error and name

00:14:50,790 --> 00:14:56,309
errors are specific examples of runtime

00:14:53,699 --> 00:14:58,139
errors and you can basically assume that

00:14:56,309 --> 00:14:59,699
for the rest of the top like anything

00:14:58,139 --> 00:15:03,299
that's not a syntax error you can assume

00:14:59,699 --> 00:15:08,879
that's a runtime error so who would like

00:15:03,299 --> 00:15:15,449
to vote for a no one and let me hand for

00:15:08,879 --> 00:15:20,309
be any hands for C and any hands for

00:15:15,449 --> 00:15:23,040
thee okay the correct answer according

00:15:20,309 --> 00:15:25,199
to the Ruby interpreter is seen no man

00:15:23,040 --> 00:15:27,139
error but if you voted for name error

00:15:25,199 --> 00:15:30,059
you're still technically correct because

00:15:27,139 --> 00:15:33,540
no method error is a class of name error

00:15:30,059 --> 00:15:35,910
so just one of them is more specific

00:15:33,540 --> 00:15:37,919
than the other but anywho like

00:15:35,910 --> 00:15:39,569
regardless of what the area is it's

00:15:37,919 --> 00:15:41,339
great news because this is a runtime

00:15:39,569 --> 00:15:43,709
error or not a syntax error so that

00:15:41,339 --> 00:15:45,509
means we can fix this so to do that

00:15:43,709 --> 00:15:48,809
let's look at how really looks and up

00:15:45,509 --> 00:15:51,480
code now this doesn't really look like

00:15:48,809 --> 00:15:54,959
Ruby code to me but how come we're not

00:15:51,480 --> 00:15:56,549
getting a syntax error well it turns out

00:15:54,959 --> 00:16:00,880
that if you look at this in the right

00:15:56,549 --> 00:16:03,010
way this is actually plausible Ruby code

00:16:00,880 --> 00:16:05,440
we assume that we're trying to call

00:16:03,010 --> 00:16:07,960
method called bar here which can be make

00:16:05,440 --> 00:16:12,040
more obvious by inserting those optional

00:16:07,960 --> 00:16:13,930
parentheses and let's start from the

00:16:12,040 --> 00:16:15,880
back so first we have the optional

00:16:13,930 --> 00:16:17,410
semicolon and then we have those

00:16:15,880 --> 00:16:20,380
optional parentheses that we just

00:16:17,410 --> 00:16:22,600
inserted for clarity and we have a

00:16:20,380 --> 00:16:25,990
string literal which we then assign to a

00:16:22,600 --> 00:16:28,780
local variable called message and then

00:16:25,990 --> 00:16:32,080
we call the method bar with whatever

00:16:28,780 --> 00:16:34,300
happens inside those parentheses it

00:16:32,080 --> 00:16:39,970
turns out that variable assignments in

00:16:34,300 --> 00:16:41,800
ruby has a value so the value of an

00:16:39,970 --> 00:16:43,720
assignment expression in Ruby is

00:16:41,800 --> 00:16:45,910
basically the value being assigned which

00:16:43,720 --> 00:16:48,430
is the thing on the right hand side or

00:16:45,910 --> 00:16:52,180
in this case string literal hello world

00:16:48,430 --> 00:16:54,010
so we can basically rewrite this as Miss

00:16:52,180 --> 00:16:58,060
H equals hello world and then we call

00:16:54,010 --> 00:17:00,460
VAR with message so hopefully that makes

00:16:58,060 --> 00:17:02,410
more sense now as you can see because

00:17:00,460 --> 00:17:05,770
Ruby doesn't require any special syntax

00:17:02,410 --> 00:17:07,900
for declaring a local variable the first

00:17:05,770 --> 00:17:11,650
time basically that all we wanted to

00:17:07,900 --> 00:17:13,810
accomplish so we don't actually need the

00:17:11,650 --> 00:17:18,579
bar method to do anything we just need

00:17:13,810 --> 00:17:20,319
to not blow up and if you look at the

00:17:18,579 --> 00:17:21,910
area miss you can Ruby is complaining

00:17:20,319 --> 00:17:24,640
that we have not defined a method called

00:17:21,910 --> 00:17:26,410
bar so that's pretty easy to fix we can

00:17:24,640 --> 00:17:29,260
just define a method Kivar that does

00:17:26,410 --> 00:17:35,380
nothing and if we run the code again it

00:17:29,260 --> 00:17:40,410
will work and more success let's talk

00:17:35,380 --> 00:17:43,630
about I mean and initialize variables in

00:17:40,410 --> 00:17:45,250
JavaScript it is possible to initial to

00:17:43,630 --> 00:17:48,160
declare variable without actually

00:17:45,250 --> 00:17:49,960
initializing it to anything as you can

00:17:48,160 --> 00:17:51,730
see that's like four message on the top

00:17:49,960 --> 00:17:54,160
and you didn't assign it to any value

00:17:51,730 --> 00:17:56,110
when you declare the variable what do

00:17:54,160 --> 00:17:58,420
you think what happened if we run this

00:17:56,110 --> 00:18:01,240
code do you think it would just switch

00:17:58,420 --> 00:18:05,280
or do you think we'll get a syntax error

00:18:01,240 --> 00:18:10,490
at this time or maybe a new method here

00:18:05,280 --> 00:18:13,770
or maybe an a mirror who thinks it is a

00:18:10,490 --> 00:18:20,490
okay we have a few hints who thinks it

00:18:13,770 --> 00:18:24,300
is V no hands rupee see okay with some

00:18:20,490 --> 00:18:26,370
hands and d okay we have roughly the

00:18:24,300 --> 00:18:28,880
same amount of hands or Cindy the

00:18:26,370 --> 00:18:34,620
correct answer is a name error this time

00:18:28,880 --> 00:18:37,470
why is that well unlike JavaScript

00:18:34,620 --> 00:18:39,630
Revere has no variable poisoning so

00:18:37,470 --> 00:18:41,900
since we never define a local variable

00:18:39,630 --> 00:18:44,580
called message before the first line

00:18:41,900 --> 00:18:48,450
ruby is assuming that we're trying to

00:18:44,580 --> 00:18:50,370
call a method called message which we

00:18:48,450 --> 00:18:56,190
can make clearer by inserting those

00:18:50,370 --> 00:18:58,140
optional parentheses we then yeah we

00:18:56,190 --> 00:19:00,630
then like you a second line which is

00:18:58,140 --> 00:19:02,610
completely irrelevant and we just

00:19:00,630 --> 00:19:04,590
basically a sign hello to a local

00:19:02,610 --> 00:19:06,060
variable message so those are few

00:19:04,590 --> 00:19:10,020
messages that they refer to different

00:19:06,060 --> 00:19:12,840
things the first is the first is a

00:19:10,020 --> 00:19:17,180
method call and the second is a local

00:19:12,840 --> 00:19:21,180
variable and just like before we are

00:19:17,180 --> 00:19:25,050
passing the result of message to bar

00:19:21,180 --> 00:19:28,530
whatever message is and in this case we

00:19:25,050 --> 00:19:30,660
can see all we want to do is the declare

00:19:28,530 --> 00:19:32,850
variable called message without signing

00:19:30,660 --> 00:19:35,850
it to anything but Ruby doesn't really

00:19:32,850 --> 00:19:38,340
require you to do that anyway and the

00:19:35,850 --> 00:19:41,820
variable will be created whenever you

00:19:38,340 --> 00:19:43,800
first assign it so we don't actually

00:19:41,820 --> 00:19:45,660
need the first line to do anything once

00:19:43,800 --> 00:19:49,800
again we just want it to not blow up and

00:19:45,660 --> 00:19:51,870
leather coat run and if you look at the

00:19:49,800 --> 00:19:55,860
error message ruby is complaining that

00:19:51,870 --> 00:19:57,630
we did not have a method call message of

00:19:55,860 --> 00:19:59,070
course we can go ahead and define method

00:19:57,630 --> 00:20:01,050
called message but that would be

00:19:59,070 --> 00:20:03,060
cheating because we really want this to

00:20:01,050 --> 00:20:07,530
work with any arbitrarily named

00:20:03,060 --> 00:20:09,300
variables right fortunately for us ruby

00:20:07,530 --> 00:20:11,760
has a hook for us to handle these cases

00:20:09,300 --> 00:20:13,260
and that's call method missing all we

00:20:11,760 --> 00:20:13,820
need to do here is define a method

00:20:13,260 --> 00:20:18,440
missing

00:20:13,820 --> 00:20:20,840
that doesn't do anything and it will

00:20:18,440 --> 00:20:25,070
capture all the unhandled method calls

00:20:20,840 --> 00:20:26,690
and suppress the errors so with that a

00:20:25,070 --> 00:20:28,160
code works again the first fly

00:20:26,690 --> 00:20:29,930
environment say she doesn't do anything

00:20:28,160 --> 00:20:31,760
and then when you run message equals all

00:20:29,930 --> 00:20:33,800
what is signs it and then the third line

00:20:31,760 --> 00:20:40,670
uses the local variable because it's

00:20:33,800 --> 00:20:44,300
been created so success let's talk about

00:20:40,670 --> 00:20:46,580
functions this is how you define a

00:20:44,300 --> 00:20:49,340
function in general scripts function

00:20:46,580 --> 00:20:51,650
hello followed by the function body and

00:20:49,340 --> 00:20:54,100
then when you want to call use the

00:20:51,650 --> 00:20:56,690
hollow which is pretty similar to review

00:20:54,100 --> 00:20:59,720
what do you think would happen if we try

00:20:56,690 --> 00:21:02,990
to run this code will it just work what

00:20:59,720 --> 00:21:13,300
we get a syntax error no method error or

00:21:02,990 --> 00:21:13,300
name error so who thinks it is a b c d

00:21:13,990 --> 00:21:19,440
okay of course this is actually a trick

00:21:18,200 --> 00:21:23,190
question

00:21:19,440 --> 00:21:25,710
the correct answer is nothing happens as

00:21:23,190 --> 00:21:28,440
you can see the code runs fine there are

00:21:25,710 --> 00:21:32,850
no errors but there is no output why is

00:21:28,440 --> 00:21:34,710
that well let's take a look at how

00:21:32,850 --> 00:21:38,039
really understand this code because this

00:21:34,710 --> 00:21:39,480
does not look like review to me well

00:21:38,039 --> 00:21:41,580
again we will start from the right to

00:21:39,480 --> 00:21:45,539
the left here Ruby thinks that we're

00:21:41,580 --> 00:21:48,029
calling a method called hello and we're

00:21:45,539 --> 00:21:50,909
not passing any positional or keyword

00:21:48,029 --> 00:21:53,220
arguments to the method hello but we are

00:21:50,909 --> 00:21:56,399
passing a block argument to the method

00:21:53,220 --> 00:21:58,529
hello and the curly braces actually has

00:21:56,399 --> 00:22:00,929
a high presidential like that binds to

00:21:58,529 --> 00:22:04,139
hello instead of like the other time

00:22:00,929 --> 00:22:06,870
that we talk about later so usually you

00:22:04,139 --> 00:22:09,059
do do end but then like curly braces

00:22:06,870 --> 00:22:11,460
that's more or less the same thing so

00:22:09,059 --> 00:22:15,090
this is actually a block that year parts

00:22:11,460 --> 00:22:18,509
and to your passing to hello and then

00:22:15,090 --> 00:22:21,570
finally we are passing whatever the

00:22:18,509 --> 00:22:24,960
hello method returns and to this method

00:22:21,570 --> 00:22:27,720
called function which we can rewrite for

00:22:24,960 --> 00:22:29,399
clarity like this or maybe if we

00:22:27,720 --> 00:22:34,080
introduce a temporary variable things

00:22:29,399 --> 00:22:37,139
will be a little bit more clear but then

00:22:34,080 --> 00:22:39,059
there's something pretty strange here we

00:22:37,139 --> 00:22:40,889
never define a method call hello or

00:22:39,059 --> 00:22:46,679
method call function so how come this

00:22:40,889 --> 00:22:49,019
works well turns out that we're being

00:22:46,679 --> 00:22:51,480
trolled by own code the method missing

00:22:49,019 --> 00:22:55,169
we defined earlier is silently salling

00:22:51,480 --> 00:23:00,480
all errors perhaps that was a bad idea

00:22:55,169 --> 00:23:04,049
that a goddess it goes pretty far so we

00:23:00,480 --> 00:23:06,500
can we can probably fix this so here is

00:23:04,049 --> 00:23:09,690
what I came up with let's walk through

00:23:06,500 --> 00:23:11,639
so we know that when we are trying to

00:23:09,690 --> 00:23:14,730
define a function will pass a block

00:23:11,639 --> 00:23:16,409
argument so animefan missing we can just

00:23:14,730 --> 00:23:18,360
see that if there's a block we know that

00:23:16,409 --> 00:23:23,500
we're defining a function so we can just

00:23:18,360 --> 00:23:26,270
define a method on the context class so

00:23:23,500 --> 00:23:28,010
yes the like I said before we start from

00:23:26,270 --> 00:23:29,960
right when you call hello it would

00:23:28,010 --> 00:23:32,870
trigger method missing and then we'll

00:23:29,960 --> 00:23:34,790
see that there's a lock and we'll go

00:23:32,870 --> 00:23:37,610
ahead and define a function called hello

00:23:34,790 --> 00:23:42,260
with the block that's being passed to

00:23:37,610 --> 00:23:43,730
you method missing and then when okay

00:23:42,260 --> 00:23:46,370
then Ruby would call this function

00:23:43,730 --> 00:23:52,730
called sorry this method call function

00:23:46,370 --> 00:23:56,150
which doesn't do anything and finally

00:23:52,730 --> 00:23:58,100
when we call hello Ruby will notice that

00:23:56,150 --> 00:23:59,929
there's actually a method call hello on

00:23:58,100 --> 00:24:03,890
the current contacts so it would just

00:23:59,929 --> 00:24:06,440
run that for us and with that we have

00:24:03,890 --> 00:24:10,970
thought really how to define and invoke

00:24:06,440 --> 00:24:13,280
JavaScript functions success all right

00:24:10,970 --> 00:24:16,400
finally let's talk about function

00:24:13,280 --> 00:24:19,630
arguments of course function is not very

00:24:16,400 --> 00:24:23,840
useful if they cannot pick arguments so

00:24:19,630 --> 00:24:25,700
let's do this this is how you define a

00:24:23,840 --> 00:24:27,860
function that takes an argument in

00:24:25,700 --> 00:24:30,799
JavaScript so function hello and then

00:24:27,860 --> 00:24:34,340
you can take name as an argument and you

00:24:30,799 --> 00:24:35,840
can use that inside the function and of

00:24:34,340 --> 00:24:38,570
course when you call it you would pass

00:24:35,840 --> 00:24:42,799
the argument into the function as you

00:24:38,570 --> 00:24:46,570
would expect so what do you think would

00:24:42,799 --> 00:24:50,600
happen when we try to run this code

00:24:46,570 --> 00:24:54,049
would it just work or would it give you

00:24:50,600 --> 00:24:58,730
a syntax error may be an argument error

00:24:54,049 --> 00:25:01,330
this line or perhaps a name error or i

00:24:58,730 --> 00:25:06,049
would even give you the design option

00:25:01,330 --> 00:25:11,149
maybe nothing happens again so let's see

00:25:06,049 --> 00:25:21,269
some hands hey okay no hand speed

00:25:11,149 --> 00:25:32,269
C D and E okay we have a pretty even

00:25:21,269 --> 00:25:32,269
distribution amount C D and E well well

00:25:33,649 --> 00:25:38,899
I'm glad that I got me thinking about

00:25:36,210 --> 00:25:41,370
these completely useless problems but I

00:25:38,899 --> 00:25:46,559
am out of time so you would have to

00:25:41,370 --> 00:25:48,389
figure it out on your own this is there

00:25:46,559 --> 00:25:50,340
actually a lot more cool stuff from the

00:25:48,389 --> 00:25:51,990
gem I will like to show you but I can

00:25:50,340 --> 00:25:54,330
only fit so much into half an hour talk

00:25:51,990 --> 00:25:58,409
if you find this interesting we should

00:25:54,330 --> 00:26:00,090
chat like at the hallway track and like

00:25:58,409 --> 00:26:03,690
I said the code is available on the

00:26:00,090 --> 00:26:06,389
internets on get up you can also find a

00:26:03,690 --> 00:26:07,919
link to it from the Ruby gems page the

00:26:06,389 --> 00:26:09,929
version on github actually does a lot

00:26:07,919 --> 00:26:12,960
more than what I just showed you here

00:26:09,929 --> 00:26:15,269
and it is actually surprisingly robust

00:26:12,960 --> 00:26:17,460
for what it is I mean I wouldn't write

00:26:15,269 --> 00:26:19,830
production code with that but like you

00:26:17,460 --> 00:26:23,279
can do a fair amount of JavaScript

00:26:19,830 --> 00:26:28,470
looking thing in Ruby as it turns out

00:26:23,279 --> 00:26:31,559
and we even have tests and so I heard

00:26:28,470 --> 00:26:33,059
that if you want to make your encourage

00:26:31,559 --> 00:26:34,889
people to contribute to you open for

00:26:33,059 --> 00:26:37,830
further you should write tests and good

00:26:34,889 --> 00:26:40,759
documentation so I have both hopefully

00:26:37,830 --> 00:26:44,970
you would contribute to this project now

00:26:40,759 --> 00:26:49,420
at this point you probably wondering why

00:26:44,970 --> 00:26:54,220
clearly this is completely useless

00:26:49,420 --> 00:26:58,110
and you're probably right but well why

00:26:54,220 --> 00:27:00,250
not as programmers I think we're often

00:26:58,110 --> 00:27:03,310
too caught up with building something

00:27:00,250 --> 00:27:05,740
useful and it is very easy to forget

00:27:03,310 --> 00:27:07,510
they have fun sometimes we probably all

00:27:05,740 --> 00:27:09,270
start doing programming because we had a

00:27:07,510 --> 00:27:12,160
lot of fun building things on a computer

00:27:09,270 --> 00:27:15,100
and I think it's very important for us

00:27:12,160 --> 00:27:16,750
not lose that passion over time so this

00:27:15,100 --> 00:27:18,810
is basically me coming up with

00:27:16,750 --> 00:27:21,040
ridiculous ideas on the Saturday and

00:27:18,810 --> 00:27:22,990
essentially playing a single pair

00:27:21,040 --> 00:27:25,570
single-player mode of coke ping pong

00:27:22,990 --> 00:27:28,870
with the Ruby interpreter and that

00:27:25,570 --> 00:27:30,820
actually kept me amused for a really

00:27:28,870 --> 00:27:34,720
long time it's almost embarrassing to

00:27:30,820 --> 00:27:36,340
admit them as an aside I actually learn

00:27:34,720 --> 00:27:38,440
to the surprising amount of stuff about

00:27:36,340 --> 00:27:40,390
Ruby and JavaScript from doing this for

00:27:38,440 --> 00:27:42,970
example that you know how we actually

00:27:40,390 --> 00:27:44,530
distinguish between a local variable and

00:27:42,970 --> 00:27:47,530
a method call when you don't use

00:27:44,530 --> 00:27:50,050
parentheses or do you know what happens

00:27:47,530 --> 00:27:54,340
when you try to have a return statement

00:27:50,050 --> 00:27:56,320
with within a block surprisingly I can

00:27:54,340 --> 00:27:58,270
actually point you to real places in the

00:27:56,320 --> 00:27:59,980
rails code base where these knowledge

00:27:58,270 --> 00:28:03,270
has helped me to understand the code in

00:27:59,980 --> 00:28:05,560
fix bugs for better or worse while these

00:28:03,270 --> 00:28:07,450
particular piece of knowledge might not

00:28:05,560 --> 00:28:11,200
be very useful to you my point is I

00:28:07,450 --> 00:28:13,000
didn't really start out to with the set

00:28:11,200 --> 00:28:16,030
goal to learn about these specific

00:28:13,000 --> 00:28:18,700
things in mind so it just happened

00:28:16,030 --> 00:28:20,110
organically along the journey so chances

00:28:18,700 --> 00:28:22,060
are when you do something like this

00:28:20,110 --> 00:28:23,920
there will be some nice surprises for

00:28:22,060 --> 00:28:26,320
you and they might be useful to you

00:28:23,920 --> 00:28:30,130
later on without you realizing it up

00:28:26,320 --> 00:28:33,460
front so go spend some time with you

00:28:30,130 --> 00:28:35,800
come here and of course doesn't have to

00:28:33,460 --> 00:28:37,600
be silly things like this that basically

00:28:35,800 --> 00:28:40,570
just go kill something build something

00:28:37,600 --> 00:28:42,820
that's fun for you if you are into

00:28:40,570 --> 00:28:45,010
collecting magic cards maybe you can

00:28:42,820 --> 00:28:47,680
build the thing that scans your card and

00:28:45,010 --> 00:28:51,540
like use artificial intelligence you

00:28:47,680 --> 00:28:53,890
recognize the card for you yeah so

00:28:51,540 --> 00:28:56,710
hopefully you'll learn something new

00:28:53,890 --> 00:28:58,870
from doing these kind of exercise but

00:28:56,710 --> 00:29:01,030
most importantly I hope

00:28:58,870 --> 00:29:03,280
help you find the passion you have in

00:29:01,030 --> 00:29:04,840
programming again and if nothing else

00:29:03,280 --> 00:29:07,330
comes out of it you can at least go to

00:29:04,840 --> 00:29:11,980
conferences and make people listen to

00:29:07,330 --> 00:29:14,320
you for half an hour so that's I have

00:29:11,980 --> 00:29:16,390
and finally please remember this if

00:29:14,320 --> 00:29:18,720
shanking code then so can you thank you

00:29:16,390 --> 00:29:18,720
very much

00:29:34,830 --> 00:29:36,890

YouTube URL: https://www.youtube.com/watch?v=90OytTY-xMo


