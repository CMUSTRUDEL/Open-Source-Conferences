Title: GORUCO 2015: Nate Berkopec: Rails 5, Turbolinks 3, and the future of View-Over-the-Wire
Publication date: 2020-01-23
Playlist: GORUCO 2015
Description: 
	@nateberkopec
With Rails 5, Turbolinks is getting a nice upgrade, with new features like partial replacement and a progress bar with a public API. This talk will demonstrate how Rails 5 Turbolinks can achieve sub-100ms UI response times, and demonstrate some tools to help you get there.

 Talk given at GORUCO 2015: http://goruco.com
Captions: 
	00:00:13,629 --> 00:00:21,170
so let's talk about triple links because

00:00:17,359 --> 00:00:23,509
everyone loves Derby links you don't so

00:00:21,170 --> 00:00:25,849
that's why I'm here to talk about it my

00:00:23,509 --> 00:00:27,439
name is Nate burger Peck I'm a freelance

00:00:25,849 --> 00:00:29,119
whales consultants and a lot of the

00:00:27,439 --> 00:00:30,560
products I work on are really slow and

00:00:29,119 --> 00:00:32,599
no business owner likes having a website

00:00:30,560 --> 00:00:36,080
slow and I'd like to show you how you

00:00:32,599 --> 00:00:38,629
can use rails to have a website that has

00:00:36,080 --> 00:00:42,199
a less than 100 millisecond time from

00:00:38,629 --> 00:00:47,720
key press or click or whatever to glass

00:00:42,199 --> 00:00:49,820
to final rendering and we go so if you

00:00:47,720 --> 00:00:51,170
read programming websites you would

00:00:49,820 --> 00:00:52,850
things have the only way to get a fast

00:00:51,170 --> 00:00:55,129
website is to throw it everything you

00:00:52,850 --> 00:00:57,860
have rewrite your app with node and a

00:00:55,129 --> 00:01:01,309
Java JavaScript client side framework

00:00:57,860 --> 00:01:06,470
and you got to use node closure go at

00:01:01,309 --> 00:01:09,080
the same time well I'm not a huge fan of

00:01:06,470 --> 00:01:10,939
that it happens I don't really like

00:01:09,080 --> 00:01:13,430
these languages I love Ruby and I'd like

00:01:10,939 --> 00:01:18,320
to write Ruby and not JavaScript and not

00:01:13,430 --> 00:01:20,450
all these other languages and so let's

00:01:18,320 --> 00:01:23,180
start with some definitions to glass

00:01:20,450 --> 00:01:25,160
well that is sort of an informal term

00:01:23,180 --> 00:01:27,110
I'm going to define it here as the time

00:01:25,160 --> 00:01:30,740
from the user interaction the keypress

00:01:27,110 --> 00:01:33,980
registering the cliq registering to the

00:01:30,740 --> 00:01:36,580
final paint being finished for whatever

00:01:33,980 --> 00:01:40,490
interaction you were just doing so not

00:01:36,580 --> 00:01:43,010
Dom content loaded not load but when is

00:01:40,490 --> 00:01:45,350
the page stable when is that interaction

00:01:43,010 --> 00:01:47,210
completed which sometimes is after the

00:01:45,350 --> 00:01:49,460
document is ready because you could have

00:01:47,210 --> 00:01:51,290
tons of document ready handlers the

00:01:49,460 --> 00:01:53,780
great thing about how fast this needs to

00:01:51,290 --> 00:01:55,909
happen is that while computers have

00:01:53,780 --> 00:01:59,960
gotten faster in the last 50 years human

00:01:55,909 --> 00:02:01,820
beings have not so back in the 60s these

00:01:59,960 --> 00:02:04,070
guys at like Xerox or whatever studied

00:02:01,820 --> 00:02:05,780
how fast computer interactions have to

00:02:04,070 --> 00:02:07,370
be for humans that have different

00:02:05,780 --> 00:02:08,629
feelings about them and if your

00:02:07,370 --> 00:02:11,269
interaction is less than a hundred

00:02:08,629 --> 00:02:13,340
milliseconds it's perceived as

00:02:11,269 --> 00:02:15,799
instantaneous if it's between 100

00:02:13,340 --> 00:02:18,140
milliseconds and a second the user

00:02:15,799 --> 00:02:19,400
perceives the delay but they still have

00:02:18,140 --> 00:02:21,349
a feeling that they're working directly

00:02:19,400 --> 00:02:23,180
on the data and if it's more than a

00:02:21,349 --> 00:02:26,120
second but less than 10 seconds you have

00:02:23,180 --> 00:02:27,560
their attention but they feel the delay

00:02:26,120 --> 00:02:29,090
more than 10 seconds you've lost their

00:02:27,560 --> 00:02:34,159
attention they're checking Twitter or

00:02:29,090 --> 00:02:36,290
whatever this is a readout from chrome

00:02:34,159 --> 00:02:39,830
timeline of a typical rails website that

00:02:36,290 --> 00:02:42,620
will remain nameless but chrome timeline

00:02:39,830 --> 00:02:45,409
shows you between the time I hit refresh

00:02:42,620 --> 00:02:47,750
and the final paint exactly where all my

00:02:45,409 --> 00:02:49,040
time went there's a big like timeline

00:02:47,750 --> 00:02:50,750
thing that I'm not going to show you or

00:02:49,040 --> 00:02:53,269
get into how to use say but basically

00:02:50,750 --> 00:02:55,940
check it out if you haven't already most

00:02:53,269 --> 00:02:57,349
of the time in a typical rails app page

00:02:55,940 --> 00:02:59,390
load is not actually in the server

00:02:57,349 --> 00:03:00,890
response time which shows up here is

00:02:59,390 --> 00:03:03,410
idle time because the server is just

00:03:00,890 --> 00:03:05,000
waiting for a response it's and this is

00:03:03,410 --> 00:03:07,310
a slow which I'm going to get to in a

00:03:05,000 --> 00:03:08,900
minute but it's actually all that crap

00:03:07,310 --> 00:03:10,730
that you threw in a document ready over

00:03:08,900 --> 00:03:13,010
about three years that's all this

00:03:10,730 --> 00:03:15,109
scripting time is second and a half of I

00:03:13,010 --> 00:03:18,530
got to attach an event listener here I

00:03:15,109 --> 00:03:20,599
gotta you know fire up optimizely and

00:03:18,530 --> 00:03:23,060
then change all the fonts on the page or

00:03:20,599 --> 00:03:26,540
whatever the guy in biz dev told you to

00:03:23,060 --> 00:03:28,069
do and a lot of that time is spending

00:03:26,540 --> 00:03:30,169
re-rendering because of all the scripts

00:03:28,069 --> 00:03:31,880
that get executed at document ready

00:03:30,169 --> 00:03:34,069
change all the stuff in the render tree

00:03:31,880 --> 00:03:37,370
and the render tree is like oh fine okay

00:03:34,069 --> 00:03:39,680
well we render everything again and that

00:03:37,370 --> 00:03:43,459
really sucks I I hate I it's ave it's a

00:03:39,680 --> 00:03:45,950
pain interact with it's very slow so

00:03:43,459 --> 00:03:48,019
that break down again is your you have a

00:03:45,950 --> 00:03:51,049
network latency going to and from the

00:03:48,019 --> 00:03:53,200
server typical rails app is 250 to 500

00:03:51,049 --> 00:03:56,870
milliseconds in the server response time

00:03:53,200 --> 00:03:59,030
and then even so you're already five

00:03:56,870 --> 00:04:01,010
times past 100 milliseconds and then

00:03:59,030 --> 00:04:03,049
you've got a Parsi HTML you've got to

00:04:01,010 --> 00:04:04,760
create the render tree the CSS object

00:04:03,049 --> 00:04:07,040
model you got to evaluate all the

00:04:04,760 --> 00:04:10,579
JavaScript and then you've actually got

00:04:07,040 --> 00:04:12,199
to paint the result so let's talk really

00:04:10,579 --> 00:04:15,379
quickly about server response time I'm

00:04:12,199 --> 00:04:18,049
just going to have to say if your app is

00:04:15,379 --> 00:04:20,030
slow 250 milliseconds 500 milliseconds

00:04:18,049 --> 00:04:22,910
like sorry it doesn't have to be that

00:04:20,030 --> 00:04:25,010
way it's not rails it's you there are

00:04:22,910 --> 00:04:27,440
lots of other large websites that have

00:04:25,010 --> 00:04:29,780
achieved these very fast times and the

00:04:27,440 --> 00:04:33,410
way if they do it is caching so suck it

00:04:29,780 --> 00:04:35,050
up figure it out do it make your dreams

00:04:33,410 --> 00:04:38,050
come true

00:04:35,050 --> 00:04:42,789
and get a 50 millisecond app it's

00:04:38,050 --> 00:04:44,229
totally possible so we figured out your

00:04:42,789 --> 00:04:45,970
server response time it's now 50

00:04:44,229 --> 00:04:48,099
milliseconds you spent ten milliseconds

00:04:45,970 --> 00:04:49,539
going to the server 50 milliseconds at

00:04:48,099 --> 00:04:52,330
the server 10 milliseconds on the way

00:04:49,539 --> 00:04:56,169
back we're at 70 milliseconds we have 30

00:04:52,330 --> 00:04:59,979
milliseconds left to do all this stuff

00:04:56,169 --> 00:05:03,400
that took two seconds how are you gonna

00:04:59,979 --> 00:05:04,919
do that well what if i told you that you

00:05:03,400 --> 00:05:07,419
just didn't have to do all those things

00:05:04,919 --> 00:05:09,610
what if we just didn't do all that stuff

00:05:07,419 --> 00:05:14,500
on every page load that's what turbo

00:05:09,610 --> 00:05:16,509
links lets us do so traditionally when

00:05:14,500 --> 00:05:18,580
you come up to this problem of well the

00:05:16,509 --> 00:05:20,889
client needs to attach all these event

00:05:18,580 --> 00:05:24,069
listeners and do all this stuff well you

00:05:20,889 --> 00:05:27,099
want to avoid the page load we reach for

00:05:24,069 --> 00:05:29,590
JSON we say all right we're going to

00:05:27,099 --> 00:05:31,659
bring the logic into the client the

00:05:29,590 --> 00:05:33,580
client is going to decide with the the

00:05:31,659 --> 00:05:35,469
JSON data over the wire how to update

00:05:33,580 --> 00:05:37,509
the view it's going to say okay well

00:05:35,469 --> 00:05:39,849
that means that this list element needs

00:05:37,509 --> 00:05:41,500
to be updated over here and that moves

00:05:39,849 --> 00:05:43,569
all this logic into the client

00:05:41,500 --> 00:05:47,169
JavaScript I don't like that because I

00:05:43,569 --> 00:05:49,270
don't like writing JavaScript and the

00:05:47,169 --> 00:05:52,630
really tough part about this is a in a

00:05:49,270 --> 00:05:54,880
in a team people perspective is that you

00:05:52,630 --> 00:05:58,599
have one code base now you have to code

00:05:54,880 --> 00:06:00,190
bases now you have a JavaScript app that

00:05:58,599 --> 00:06:03,810
requires an entirely different set of

00:06:00,190 --> 00:06:07,569
knowledge experience skilled tooling and

00:06:03,810 --> 00:06:09,580
uh and that splits your team and I'm I

00:06:07,569 --> 00:06:12,099
mostly work with small companies of

00:06:09,580 --> 00:06:15,279
engineering teams of you know 56 people

00:06:12,099 --> 00:06:18,759
that's a big team and they just don't

00:06:15,279 --> 00:06:19,870
have the resources to make that split

00:06:18,759 --> 00:06:22,330
it's like it's kind of like adding

00:06:19,870 --> 00:06:23,830
another service to your architecture and

00:06:22,330 --> 00:06:27,490
that can be taught that can be very

00:06:23,830 --> 00:06:29,560
tough for smaller or smaller teams so

00:06:27,490 --> 00:06:31,330
what view over the wire really all it

00:06:29,560 --> 00:06:33,490
does is it says okay I'm going to go to

00:06:31,330 --> 00:06:34,750
the server I'm gonna get an HTML

00:06:33,490 --> 00:06:36,759
document and then I'm just going to

00:06:34,750 --> 00:06:39,849
replace the document i have with the

00:06:36,759 --> 00:06:41,500
document i just got this is not actually

00:06:39,849 --> 00:06:45,279
turbo links code but that's basically

00:06:41,500 --> 00:06:48,600
all it does and what that lets just not

00:06:45,279 --> 00:06:50,040
do is all the stuff in my previous slide

00:06:48,600 --> 00:06:52,020
we don't have to throw away our entire

00:06:50,040 --> 00:06:54,360
JavaScript runtime we don't have to

00:06:52,020 --> 00:06:58,200
throw away the entire Dom we get to keep

00:06:54,360 --> 00:07:00,960
the jas global scope and we can don't

00:06:58,200 --> 00:07:02,580
have to reparse reevaluate the scripts

00:07:00,960 --> 00:07:04,500
from the head even though you don't have

00:07:02,580 --> 00:07:06,840
to redownload them you still have to

00:07:04,500 --> 00:07:10,770
reevaluate them to rebuild a JavaScript

00:07:06,840 --> 00:07:12,240
p.m. if you're not doing this just so

00:07:10,770 --> 00:07:13,140
just like your fancy-pants JavaScript

00:07:12,240 --> 00:07:16,380
framework and get all the benefits

00:07:13,140 --> 00:07:19,160
without all the client logic living in

00:07:16,380 --> 00:07:23,150
your JavaScript so as an experiment I

00:07:19,160 --> 00:07:25,470
rebuilds a very the to do MVC project

00:07:23,150 --> 00:07:27,090
which is a sort of project where you

00:07:25,470 --> 00:07:28,050
build a to-do list in different

00:07:27,090 --> 00:07:30,390
JavaScript client side JavaScript

00:07:28,050 --> 00:07:32,940
frameworks and did it with turbo links

00:07:30,390 --> 00:07:34,200
instead of client-side j/s that is

00:07:32,940 --> 00:07:35,760
available here at this URL which is

00:07:34,200 --> 00:07:39,870
going to pop up at the end of this talk

00:07:35,760 --> 00:07:42,350
again so this is what a chrome timeline

00:07:39,870 --> 00:07:45,570
page load on this new app looks like

00:07:42,350 --> 00:07:46,830
when you're not using turbo links you I

00:07:45,570 --> 00:07:48,960
just want you to pay attention to the

00:07:46,830 --> 00:07:52,250
time spent in loading rendering and

00:07:48,960 --> 00:07:55,130
painting with the turbo links page load

00:07:52,250 --> 00:07:57,750
that's greatly reduced because we're not

00:07:55,130 --> 00:07:59,480
rely k head section of the page is

00:07:57,750 --> 00:08:02,700
exactly the same it hasn't been touched

00:07:59,480 --> 00:08:03,990
and we're just replacing especially with

00:08:02,700 --> 00:08:05,660
partial replacement which I'm gonna get

00:08:03,990 --> 00:08:08,550
to in a second parts of the page that

00:08:05,660 --> 00:08:10,740
actually need to be changed and all the

00:08:08,550 --> 00:08:12,000
event listeners that were on the page to

00:08:10,740 --> 00:08:14,940
start with are still there there was

00:08:12,000 --> 00:08:16,020
only one Dom ready event which tends to

00:08:14,940 --> 00:08:19,050
be a source of a lot of your script

00:08:16,020 --> 00:08:20,160
slowness so you have to get a lot

00:08:19,050 --> 00:08:22,710
smarter about the way you write your

00:08:20,160 --> 00:08:24,090
JavaScript unfortunately if you were if

00:08:22,710 --> 00:08:25,380
you are that kind of developer that

00:08:24,090 --> 00:08:27,120
throws everything and document dot ready

00:08:25,380 --> 00:08:29,790
you can't do that anymore it's difficult

00:08:27,120 --> 00:08:33,060
yes it's a little cheating pain but it

00:08:29,790 --> 00:08:36,450
gives you this incredible experience of

00:08:33,060 --> 00:08:38,760
having an almost instantaneous user

00:08:36,450 --> 00:08:43,050
interface that feels pretty pretty

00:08:38,760 --> 00:08:44,850
awesome as an interesting comparison on

00:08:43,050 --> 00:08:47,520
the left here is my turbo links

00:08:44,850 --> 00:08:49,590
implementation of to do NBC and on the

00:08:47,520 --> 00:08:54,180
right here is a chrome temp Timeline

00:08:49,590 --> 00:08:57,210
view of an ember app and doing the exact

00:08:54,180 --> 00:09:02,490
same interaction I think this was

00:08:57,210 --> 00:09:05,700
clicking on it a to-do item complete and

00:09:02,490 --> 00:09:09,779
what's really crazy is the ember app and

00:09:05,700 --> 00:09:13,140
the turbulence app have very similar

00:09:09,779 --> 00:09:14,490
amounts of time spent unless except for

00:09:13,140 --> 00:09:17,339
the waiting for the server part because

00:09:14,490 --> 00:09:19,320
all the to do MVC apps that use

00:09:17,339 --> 00:09:20,760
JavaScript just use local storage so you

00:09:19,320 --> 00:09:23,370
can see that the idle time is quite a

00:09:20,760 --> 00:09:25,470
bit different but other than that they

00:09:23,370 --> 00:09:28,230
both take about 35 milliseconds in

00:09:25,470 --> 00:09:29,550
scripting in and rendering and the only

00:09:28,230 --> 00:09:32,550
difference is how much time they spent

00:09:29,550 --> 00:09:34,050
waiting for the data to be updated which

00:09:32,550 --> 00:09:35,700
is pretty incredible and I got that from

00:09:34,050 --> 00:09:38,040
basically writing 10 lines of JavaScript

00:09:35,700 --> 00:09:40,459
and dropping in turbo links which is

00:09:38,040 --> 00:09:44,820
awesome from a development perspective

00:09:40,459 --> 00:09:50,070
hopefully this will work on here yes one

00:09:44,820 --> 00:09:51,959
of these videos is my to do NBC

00:09:50,070 --> 00:09:54,779
implementation and turbo links and one

00:09:51,959 --> 00:09:55,770
of them is an ember app I don't know if

00:09:54,779 --> 00:09:59,120
you can figure out which one is which

00:09:55,770 --> 00:09:59,120
just from looking at it because I can't

00:09:59,720 --> 00:10:04,290
so that's pretty cool it really does

00:10:02,790 --> 00:10:08,190
feel instantaneous it's kind of

00:10:04,290 --> 00:10:11,040
incredible to realize that this is going

00:10:08,190 --> 00:10:14,100
to a server on Heroku updating an active

00:10:11,040 --> 00:10:16,320
record a model and coming back in the

00:10:14,100 --> 00:10:17,970
same amount of time or feeling like a

00:10:16,320 --> 00:10:20,880
similar amount of time the Ember app is

00:10:17,970 --> 00:10:26,550
taking just to go to my local storage

00:10:20,880 --> 00:10:28,890
which is pretty incredible so turbulence

00:10:26,550 --> 00:10:31,200
three coming up with rails five although

00:10:28,890 --> 00:10:32,579
you can use server links three today if

00:10:31,200 --> 00:10:35,670
you go to github and point your gem

00:10:32,579 --> 00:10:37,500
source at github mostly it's just

00:10:35,670 --> 00:10:39,930
Shopify is incredible production

00:10:37,500 --> 00:10:42,420
experience being merged into turbo links

00:10:39,930 --> 00:10:44,790
core Tebow's doing a lot of incredible

00:10:42,420 --> 00:10:46,920
work we have partial replacement which

00:10:44,790 --> 00:10:49,110
replaces not the entire body like you

00:10:46,920 --> 00:10:51,450
saw in my example but just parts of the

00:10:49,110 --> 00:10:53,790
page or if there's like a list of models

00:10:51,450 --> 00:10:55,440
it will replace just the models

00:10:53,790 --> 00:10:59,070
instances that have changed which is

00:10:55,440 --> 00:11:00,450
incredible and you've now got a progress

00:10:59,070 --> 00:11:02,510
bar at the top of the page which has a

00:11:00,450 --> 00:11:05,850
public API and how you can control it

00:11:02,510 --> 00:11:06,839
it's really cool and there's a couple

00:11:05,850 --> 00:11:09,600
other things you have to do to stay

00:11:06,839 --> 00:11:12,779
under 100 milliseconds to glass passing

00:11:09,600 --> 00:11:14,370
mention that don't forget rack mini

00:11:12,779 --> 00:11:15,329
profiler an incredible gem by the

00:11:14,370 --> 00:11:17,819
incredible Sam

00:11:15,329 --> 00:11:20,220
fron I would use this in any rails

00:11:17,819 --> 00:11:22,499
project I've ever put on it puts this

00:11:20,220 --> 00:11:25,379
really cool little badge top left it

00:11:22,499 --> 00:11:27,600
lets you look at the current how fast

00:11:25,379 --> 00:11:29,399
everything on your page loaded it breaks

00:11:27,600 --> 00:11:32,819
it down by how many queries you ran

00:11:29,399 --> 00:11:34,529
there's even a flame graph extension

00:11:32,819 --> 00:11:36,689
that lets you see the stack profile from

00:11:34,529 --> 00:11:38,910
the entire page load it's incredible for

00:11:36,689 --> 00:11:41,429
breaking down slow slow page loads and

00:11:38,910 --> 00:11:42,929
figure out exactly where you went chrome

00:11:41,429 --> 00:11:46,379
timeline like I've been showing you the

00:11:42,929 --> 00:11:48,809
grass from it's an awesome tool for

00:11:46,379 --> 00:11:51,059
everything except the server response

00:11:48,809 --> 00:11:54,269
time so breaking down its it's basically

00:11:51,059 --> 00:11:56,699
just flame drafts of where your

00:11:54,269 --> 00:12:00,869
JavaScript execution time goes very

00:11:56,699 --> 00:12:03,540
valuable for getting that down for if

00:12:00,869 --> 00:12:06,600
your are living in this magical world of

00:12:03,540 --> 00:12:09,420
sub 200 milliseconds to glass I found

00:12:06,600 --> 00:12:12,769
that the new turbo links progress bar or

00:12:09,420 --> 00:12:15,239
spinners or whatever is actually sort of

00:12:12,769 --> 00:12:16,350
it makes the site feel slower I don't

00:12:15,239 --> 00:12:18,779
know what it is about our minds we're

00:12:16,350 --> 00:12:20,549
like we're just now that we see progress

00:12:18,779 --> 00:12:22,860
bar and we think oh it's slow I got to

00:12:20,549 --> 00:12:24,419
sit here and wait if your app is

00:12:22,860 --> 00:12:26,459
actually that fast i think disabling

00:12:24,419 --> 00:12:28,110
these things can actually make it you

00:12:26,459 --> 00:12:32,249
can perceive a little bit more speed

00:12:28,110 --> 00:12:33,899
which is kind of weird and when you're

00:12:32,249 --> 00:12:35,699
living in this world of 100 milliseconds

00:12:33,899 --> 00:12:39,839
the network actually becomes a big

00:12:35,699 --> 00:12:42,149
problem so your typical rails controller

00:12:39,839 --> 00:12:44,610
when you go to the create action for a

00:12:42,149 --> 00:12:47,579
post you say okay you've succeeded at

00:12:44,610 --> 00:12:49,579
doing that here's your 301 redirect come

00:12:47,579 --> 00:12:52,319
back to me later for your get request

00:12:49,579 --> 00:12:55,379
but that you're just doubled the amount

00:12:52,319 --> 00:12:57,149
of back and forth and with network

00:12:55,379 --> 00:12:58,649
latency that can actually add up but now

00:12:57,149 --> 00:13:01,559
all us on your outside of a hundred

00:12:58,649 --> 00:13:04,290
milliseconds so experimenting with not

00:13:01,559 --> 00:13:06,540
using redirects in 100 millisecond you

00:13:04,290 --> 00:13:10,199
is is interesting you can see examples

00:13:06,540 --> 00:13:15,360
of my Hiroko repo my git repo here at

00:13:10,199 --> 00:13:17,249
the end so your two options for view

00:13:15,360 --> 00:13:19,559
over the wire technology sending HTML

00:13:17,249 --> 00:13:21,209
over the wire instead of JSON right now

00:13:19,559 --> 00:13:22,949
as turbo links which is awesome for new

00:13:21,209 --> 00:13:25,439
projects but it's very difficult to use

00:13:22,949 --> 00:13:26,879
on existing projects if you have a big

00:13:25,439 --> 00:13:28,499
an existing project and you want to use

00:13:26,879 --> 00:13:30,539
this technology I would

00:13:28,499 --> 00:13:32,969
NP Jax we do need to have jQuery

00:13:30,539 --> 00:13:34,199
installed unfortunately but P Jax lets

00:13:32,969 --> 00:13:36,419
you sort of take this a little bit more

00:13:34,199 --> 00:13:39,659
piecemeal it's more in an opt-in API

00:13:36,419 --> 00:13:41,519
rather than opt-out like turbo lynxes so

00:13:39,659 --> 00:13:45,599
definitely give that a shot in

00:13:41,519 --> 00:13:47,579
conclusion you over the wire is fast it

00:13:45,599 --> 00:13:50,129
is lets you write less JavaScript and

00:13:47,579 --> 00:13:52,199
it's been battle tested by really big

00:13:50,129 --> 00:13:54,029
companies that have millions and

00:13:52,199 --> 00:13:58,259
millions of users and are in the top

00:13:54,029 --> 00:14:00,419
1000 websites in the world I been Nate

00:13:58,259 --> 00:14:08,839
berkovic and that is turbo links and

00:14:00,419 --> 00:14:08,839
view over the wire awesome

00:14:21,010 --> 00:14:23,070

YouTube URL: https://www.youtube.com/watch?v=eBccDerJPJE


