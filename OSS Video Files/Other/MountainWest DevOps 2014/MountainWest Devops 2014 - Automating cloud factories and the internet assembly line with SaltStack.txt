Title: MountainWest Devops 2014 - Automating cloud factories and the internet assembly line with SaltStack
Publication date: 2020-01-24
Playlist: MountainWest DevOps 2014
Description: 
	By Thomas Hatch

SaltStack does a lot of stuff, mostly focusing on infrastructure automation, configuration management and cloud orchestration. Quite simply, our software helps automate DevOps tasks for speed and scale on the Internet assembly line. But there's much more, so Tom will provide a quick overview of the SaltStack platform and share a few things you probably don't know about how SaltStack is used in DevOps organizations today. Tom's talk will highlight the need for speed and scale in DevOps, put an end to an age-old holy war in configuration management, talk about why we need more lightweight cloud control, outline the benefits of automation glue for all the infrastructure things, and show how test automation can be easier and faster combining Salt, Jenkins, Docker and Git.

Help us caption & translate this video!

http://amara.org/v/FG2e/
Captions: 
	00:00:24,680 --> 00:00:28,740
you know it is a pleasure to be here

00:00:26,940 --> 00:00:30,330
they only call me a couple days ago so

00:00:28,740 --> 00:00:32,340
we had to throw this together kind of

00:00:30,330 --> 00:00:34,190
quickly but I I do present fairly

00:00:32,340 --> 00:00:37,440
regularly so it isn't that big of a deal

00:00:34,190 --> 00:00:39,650
but it's always I gotta say it's always

00:00:37,440 --> 00:00:42,030
fantastic to be presenting at home

00:00:39,650 --> 00:00:43,770
there's a lot of there's a lot of people

00:00:42,030 --> 00:00:46,350
here that I recognize it's it's a lot

00:00:43,770 --> 00:00:51,150
friendlier than the last time I was in

00:00:46,350 --> 00:00:53,190
Paris for instance now for those of you

00:00:51,150 --> 00:00:59,820
who don't know just ask who here knows

00:00:53,190 --> 00:01:03,390
what salt is oh I'm home and we're only

00:00:59,820 --> 00:01:10,380
at forty percent well we can we can fix

00:01:03,390 --> 00:01:12,000
that that's why we're here now so let me

00:01:10,380 --> 00:01:15,630
introduce myself very quickly my name is

00:01:12,000 --> 00:01:20,330
Thomas hatch I'm the primary author of

00:01:15,630 --> 00:01:23,670
salt which is an automation platform and

00:01:20,330 --> 00:01:26,510
we're located here in Utah despite the

00:01:23,670 --> 00:01:30,299
fact that we have a rather serious

00:01:26,510 --> 00:01:32,100
international presence now salt has one

00:01:30,299 --> 00:01:33,750
of the largest open source developer

00:01:32,100 --> 00:01:36,510
communities in the world last year we

00:01:33,750 --> 00:01:40,409
were the third most active merger of

00:01:36,510 --> 00:01:42,630
pull requests on all of github we have

00:01:40,409 --> 00:01:44,549
over 800 people actively developing salt

00:01:42,630 --> 00:01:47,040
right now and that number continues to

00:01:44,549 --> 00:01:48,900
climb at a staggering pace which does

00:01:47,040 --> 00:01:51,180
make us one of the largest again open

00:01:48,900 --> 00:01:55,950
source communities in the world salt

00:01:51,180 --> 00:01:59,670
itself is as I just said an automation

00:01:55,950 --> 00:02:02,070
platform now a lot of people look at

00:01:59,670 --> 00:02:06,200
salt and they say OVO salts like puppet

00:02:02,070 --> 00:02:09,360
or chef well it is or they say well

00:02:06,200 --> 00:02:12,600
salts just this remote control thing

00:02:09,360 --> 00:02:16,820
well it is a lot of people say that salt

00:02:12,600 --> 00:02:20,489
is a cloud platform and it is

00:02:16,820 --> 00:02:23,130
fundamentally what we've done is created

00:02:20,489 --> 00:02:26,130
a system for ubiquitous remote control

00:02:23,130 --> 00:02:30,000
of servers at an incredibly high rate at

00:02:26,130 --> 00:02:31,889
high speed the benefit here is that we

00:02:30,000 --> 00:02:33,860
were able to execute live commands of an

00:02:31,889 --> 00:02:37,100
arbitrary nature on large groups of sir

00:02:33,860 --> 00:02:39,950
vers in a highly targeted way what we

00:02:37,100 --> 00:02:43,100
execute on those systems is I'll say it

00:02:39,950 --> 00:02:45,440
again arbitrary that means it's very

00:02:43,100 --> 00:02:47,720
very easy for us to start hopping into a

00:02:45,440 --> 00:02:50,960
server infrastructure and managing

00:02:47,720 --> 00:02:52,490
whatever the devil we want to manage so

00:02:50,960 --> 00:02:54,100
one of the things I'm really excited

00:02:52,490 --> 00:02:57,830
about somebody asks the question of

00:02:54,100 --> 00:02:59,420
James what do you do if you've got a

00:02:57,830 --> 00:03:03,590
large deployment and you want to manage

00:02:59,420 --> 00:03:05,480
many Dockers well in salt we just

00:03:03,590 --> 00:03:08,720
introduced in the last version which

00:03:05,480 --> 00:03:11,150
came out three weeks ago we just

00:03:08,720 --> 00:03:15,080
introduced automation systems for docker

00:03:11,150 --> 00:03:18,050
and for raw lxc so now via salt you can

00:03:15,080 --> 00:03:19,870
easily have from a central location the

00:03:18,050 --> 00:03:22,959
ability to execute commands to get

00:03:19,870 --> 00:03:26,330
status of docker or lxc containers

00:03:22,959 --> 00:03:28,550
across tens hundreds and thousands of

00:03:26,330 --> 00:03:30,320
servers so that you can get those

00:03:28,550 --> 00:03:32,989
summaries instantly of what's going on

00:03:30,320 --> 00:03:35,930
but you can also execute to spin up

00:03:32,989 --> 00:03:38,870
fresh docker images you can also go out

00:03:35,930 --> 00:03:40,790
and communicate with those systems in

00:03:38,870 --> 00:03:43,190
any way that you'd like also you can

00:03:40,790 --> 00:03:46,910
make it so that you can do very complex

00:03:43,190 --> 00:03:50,540
configuration management in or out of

00:03:46,910 --> 00:03:53,239
things like containers and virtual

00:03:50,540 --> 00:03:58,340
machines so that's what we mean when we

00:03:53,239 --> 00:03:59,630
talk about an automation platform the

00:03:58,340 --> 00:04:01,340
ability to reach out to the

00:03:59,630 --> 00:04:03,590
infrastructure and change what needs to

00:04:01,340 --> 00:04:06,500
be changed see what needs to be seen and

00:04:03,590 --> 00:04:10,160
have the other utmost flexibility with

00:04:06,500 --> 00:04:17,510
respect to how it works now the wrong

00:04:10,160 --> 00:04:21,830
way oh I'm obviously not very fluent

00:04:17,510 --> 00:04:25,370
with slides okay so I mentioned before

00:04:21,830 --> 00:04:27,560
the salt is fast salt was principally

00:04:25,370 --> 00:04:30,590
engineered to be able to send commands

00:04:27,560 --> 00:04:33,680
to large groups of systems in parallel

00:04:30,590 --> 00:04:36,350
and get information back from those

00:04:33,680 --> 00:04:39,140
systems and information pertaining to

00:04:36,350 --> 00:04:40,669
what again whatever you want now salt

00:04:39,140 --> 00:04:44,140
was originally written on top of a

00:04:40,669 --> 00:04:47,630
system called zeromq who hears her 20 mq

00:04:44,140 --> 00:04:50,930
I'll see I've lost 20 mq-1 awareness

00:04:47,630 --> 00:04:53,120
I was like eighty-six percent okay

00:04:50,930 --> 00:04:58,700
that's all right sir mq is pretty

00:04:53,120 --> 00:05:01,670
freaking awesome so 0 mq is a messaging

00:04:58,700 --> 00:05:04,790
and queuing library for sockets very

00:05:01,670 --> 00:05:06,170
very powerful very very useful stuff and

00:05:04,790 --> 00:05:08,180
that's principally what's allowed us to

00:05:06,170 --> 00:05:10,940
be able to do things like communicate

00:05:08,180 --> 00:05:14,030
with 10,000 servers and get messages

00:05:10,940 --> 00:05:17,770
back from all 10,000 servers in the mall

00:05:14,030 --> 00:05:22,270
in a matter of a couple of seconds okay

00:05:17,770 --> 00:05:24,950
now recently to the transport medium

00:05:22,270 --> 00:05:27,200
we've had a lot of different demand for

00:05:24,950 --> 00:05:29,300
taking different approaches to how our

00:05:27,200 --> 00:05:31,160
underlying communication system works

00:05:29,300 --> 00:05:34,820
and what I'm talking about here actually

00:05:31,160 --> 00:05:36,290
ties into another aspect of salt salt is

00:05:34,820 --> 00:05:40,120
a system which has been made to be

00:05:36,290 --> 00:05:43,160
extremely modular and extremely flexible

00:05:40,120 --> 00:05:45,260
the idea they're being that everybody's

00:05:43,160 --> 00:05:48,800
deployment is different how many of you

00:05:45,260 --> 00:05:50,270
have gone from one infrastructure or one

00:05:48,800 --> 00:05:56,030
development shop to another and

00:05:50,270 --> 00:05:57,560
everything was the same as often as many

00:05:56,030 --> 00:05:59,390
people out there we love to go around

00:05:57,560 --> 00:06:01,940
and say this is the philosophy of the

00:05:59,390 --> 00:06:04,010
future but everybody disagrees

00:06:01,940 --> 00:06:06,350
everybody's finite points are different

00:06:04,010 --> 00:06:08,150
the only way to solve problems on a

00:06:06,350 --> 00:06:10,280
large scale is to have a platform which

00:06:08,150 --> 00:06:15,050
is fundamentally flexible enough to

00:06:10,280 --> 00:06:19,700
solve the targeted problems of the of

00:06:15,050 --> 00:06:23,540
the underlying installation okay and so

00:06:19,700 --> 00:06:25,730
that's why inside of salt we had we have

00:06:23,540 --> 00:06:30,560
our original transport system / 0 you

00:06:25,730 --> 00:06:34,460
very fast very reliable but we also last

00:06:30,560 --> 00:06:36,530
year introduced salt SSH so that you can

00:06:34,460 --> 00:06:38,900
do all of these automation routines push

00:06:36,530 --> 00:06:43,010
out commands do configuration management

00:06:38,900 --> 00:06:46,490
with salt but you don't need to install

00:06:43,010 --> 00:06:48,620
a new agent you can use the existing SSH

00:06:46,490 --> 00:06:50,630
agent that's out there inside of your

00:06:48,620 --> 00:06:52,880
infrastructure which for many of our

00:06:50,630 --> 00:06:56,270
users and customers this made a lot of

00:06:52,880 --> 00:06:57,919
sense and then we had another camp of

00:06:56,270 --> 00:07:00,620
our users and customers who told us that

00:06:57,919 --> 00:07:01,289
we were stark raving mad that this was

00:07:00,620 --> 00:07:03,240
the stupidest

00:07:01,289 --> 00:07:06,499
thing that ever heard and we said well

00:07:03,240 --> 00:07:06,499
that's fine you don't have to use it I

00:07:06,619 --> 00:07:12,349
don't even have to install it because

00:07:09,509 --> 00:07:14,819
the way salt has been made to be modular

00:07:12,349 --> 00:07:16,619
similarly we've got customers now who

00:07:14,819 --> 00:07:18,599
are asking for a different approach to

00:07:16,619 --> 00:07:20,430
the networking and so I'm very excited

00:07:18,599 --> 00:07:23,550
about our next release which is

00:07:20,430 --> 00:07:26,580
codenamed helium will be introducing our

00:07:23,550 --> 00:07:28,259
initial deployment of a system called

00:07:26,580 --> 00:07:33,059
raped which stands for the reliable

00:07:28,259 --> 00:07:36,029
asynchronous event transport initially

00:07:33,059 --> 00:07:39,839
it's a UDP based transport port which at

00:07:36,029 --> 00:07:42,569
least in some of our tests thus far we

00:07:39,839 --> 00:07:45,599
have a few more optimizations to make is

00:07:42,569 --> 00:07:49,639
faster than 0 mq on the communication

00:07:45,599 --> 00:07:51,749
end and just as if not more reliable and

00:07:49,639 --> 00:07:53,490
it gives us a lot more control over

00:07:51,749 --> 00:07:58,819
what's happening inside of our networks

00:07:53,490 --> 00:07:58,819
tax which gives us more flexibility ok

00:07:58,909 --> 00:08:07,249
so that's really the foundation of salt

00:08:02,689 --> 00:08:10,620
it's this idea of remote execution

00:08:07,249 --> 00:08:13,499
remote control controlling lots of

00:08:10,620 --> 00:08:15,089
servers now on top of that we said well

00:08:13,499 --> 00:08:18,029
if we're going to be controlling a lot

00:08:15,089 --> 00:08:20,759
of servers then what we need to be able

00:08:18,029 --> 00:08:23,639
to do is have a powerful way to interact

00:08:20,759 --> 00:08:25,680
with those servers and so when salt

00:08:23,639 --> 00:08:28,979
sends out remote commands to remote

00:08:25,680 --> 00:08:31,379
systems it accesses a very large library

00:08:28,979 --> 00:08:33,510
of routines of system management

00:08:31,379 --> 00:08:35,310
routines these system management

00:08:33,510 --> 00:08:36,839
routines make it very very easy to do

00:08:35,310 --> 00:08:39,029
something like get the network

00:08:36,839 --> 00:08:42,389
information from every server regardless

00:08:39,029 --> 00:08:45,269
of OS platform etc doesn't care if it's

00:08:42,389 --> 00:08:47,069
linux bsd windows mac it's going to

00:08:45,269 --> 00:08:49,260
return all the network information in

00:08:47,069 --> 00:08:51,829
the same data structure so that it's

00:08:49,260 --> 00:08:54,720
very very easy for you to deal with

00:08:51,829 --> 00:08:58,079
similarly you can say install a package

00:08:54,720 --> 00:09:00,449
on all of these systems and it'll know

00:08:58,079 --> 00:09:03,689
to use your apt anything of that nature

00:09:00,449 --> 00:09:05,970
so there is a vast and very powerful

00:09:03,689 --> 00:09:08,670
library of routines at your command but

00:09:05,970 --> 00:09:13,260
on top of that we built a configuration

00:09:08,670 --> 00:09:14,550
management system now configuration

00:09:13,260 --> 00:09:15,120
management of course is nothing new

00:09:14,550 --> 00:09:18,779
especially

00:09:15,120 --> 00:09:20,880
this crowd but the salt configuration

00:09:18,779 --> 00:09:24,060
management system decided to do do a few

00:09:20,880 --> 00:09:26,220
things a little differently one it is a

00:09:24,060 --> 00:09:28,490
fundamentally declarative system now the

00:09:26,220 --> 00:09:31,740
reason why i made it fundamentally

00:09:28,490 --> 00:09:33,180
declarative in nature was because if you

00:09:31,740 --> 00:09:36,150
have a declarative configuration

00:09:33,180 --> 00:09:38,010
management system you do have more more

00:09:36,150 --> 00:09:40,880
underlying power with respect to what

00:09:38,010 --> 00:09:43,410
you can do inside of your routines but

00:09:40,880 --> 00:09:45,630
there are many many many benefits to

00:09:43,410 --> 00:09:48,540
having an imperative system as well and

00:09:45,630 --> 00:09:51,150
so in a recent release last year which

00:09:48,540 --> 00:09:53,850
we updated the config management system

00:09:51,150 --> 00:09:56,070
in salt thus that all of the routines

00:09:53,850 --> 00:09:58,380
for your configuration management always

00:09:56,070 --> 00:09:59,460
execute in the same order and they

00:09:58,380 --> 00:10:01,980
always execute in the order in which

00:09:59,460 --> 00:10:04,890
they're defined which means that allows

00:10:01,980 --> 00:10:06,900
you to create routines which can be

00:10:04,890 --> 00:10:09,779
either imperative war declarative or

00:10:06,900 --> 00:10:11,910
both it also means that every time you

00:10:09,779 --> 00:10:13,790
do deployments inside of our

00:10:11,910 --> 00:10:16,320
configuration management system

00:10:13,790 --> 00:10:18,630
everything is going to be deployed in a

00:10:16,320 --> 00:10:21,779
completely finite way they will always

00:10:18,630 --> 00:10:25,430
run in the same order and always run in

00:10:21,779 --> 00:10:29,940
the same way regardless of platform okay

00:10:25,430 --> 00:10:32,850
and so again our approach to that was to

00:10:29,940 --> 00:10:36,120
say to that particular debate was to say

00:10:32,850 --> 00:10:41,070
fine we'll do both there's no reason why

00:10:36,120 --> 00:10:43,130
we couldn't and so we did now the other

00:10:41,070 --> 00:10:45,300
nice thing is that the way in which the

00:10:43,130 --> 00:10:48,200
configuration management system in salt

00:10:45,300 --> 00:10:52,050
is built is that it's entirely

00:10:48,200 --> 00:10:54,720
data-driven so we have a compiler in

00:10:52,050 --> 00:10:56,160
this runtime for managing for doing

00:10:54,720 --> 00:10:58,080
config management and rolling out

00:10:56,160 --> 00:10:59,760
changes and making sure that our states

00:10:58,080 --> 00:11:04,920
are all lined up cleanly and all that

00:10:59,760 --> 00:11:08,089
jazz but everything's data-driven so

00:11:04,920 --> 00:11:11,040
it's all just data structures

00:11:08,089 --> 00:11:12,000
dictionaries or hash maps or whatever

00:11:11,040 --> 00:11:13,410
you call them depending on your

00:11:12,000 --> 00:11:16,860
programming language of core of choice

00:11:13,410 --> 00:11:20,190
of course dictionaries lists strings

00:11:16,860 --> 00:11:23,640
integers that's it it's all Jason

00:11:20,190 --> 00:11:26,459
serializable so another aspect of salt

00:11:23,640 --> 00:11:29,040
is that all communication all return

00:11:26,459 --> 00:11:31,230
information from salt is jasons

00:11:29,040 --> 00:11:32,639
realisable so that it can be naturally

00:11:31,230 --> 00:11:36,870
plugged into virtually any other

00:11:32,639 --> 00:11:39,839
interface you can dream up okay but the

00:11:36,870 --> 00:11:46,740
compiler since its data-driven we don't

00:11:39,839 --> 00:11:48,509
really care how we get the data and so

00:11:46,740 --> 00:11:51,930
by default you define your config

00:11:48,509 --> 00:11:53,970
management using y Amal but if you'd

00:11:51,930 --> 00:11:56,339
rather use a programming language you

00:11:53,970 --> 00:12:00,930
could do that as well we ship a DSL that

00:11:56,339 --> 00:12:03,449
runs in Python if you'd rather use raw

00:12:00,930 --> 00:12:04,889
JSON you can write them in raw JSON some

00:12:03,449 --> 00:12:06,899
people do it doesn't make sense to me

00:12:04,889 --> 00:12:09,089
the ammo looks much better personally

00:12:06,899 --> 00:12:13,290
but people do we let them do whatever

00:12:09,089 --> 00:12:15,000
they want ok so again we're talking

00:12:13,290 --> 00:12:17,670
about having many many different

00:12:15,000 --> 00:12:21,120
management layers with room with respect

00:12:17,670 --> 00:12:22,740
to what we can do inside of salt so

00:12:21,120 --> 00:12:25,230
that's probably the least I've ever

00:12:22,740 --> 00:12:27,779
spent talking about our config

00:12:25,230 --> 00:12:29,790
management system it's usually our main

00:12:27,779 --> 00:12:32,699
highlight a lot of people come to salt

00:12:29,790 --> 00:12:34,649
because they want config management

00:12:32,699 --> 00:12:36,720
insult because it's faster it's leaner

00:12:34,649 --> 00:12:39,060
the files are smaller than anything else

00:12:36,720 --> 00:12:41,190
that's out there very very easy to learn

00:12:39,060 --> 00:12:43,529
most people are able to translate entire

00:12:41,190 --> 00:12:45,089
infrastructures over very very quickly

00:12:43,529 --> 00:12:47,579
and by quickly I mean we've had people

00:12:45,089 --> 00:12:49,290
take other config management managed

00:12:47,579 --> 00:12:52,470
infrastructures and translate them all

00:12:49,290 --> 00:12:55,319
over to salt in a matter of weeks one of

00:12:52,470 --> 00:13:00,600
my favorite examples of that is is the

00:12:55,319 --> 00:13:01,949
entire backend for hulu okay but I want

00:13:00,600 --> 00:13:05,899
to go back to something that I lighted

00:13:01,949 --> 00:13:09,240
upon when when I started talking and

00:13:05,899 --> 00:13:13,529
this is the fact that since we've got

00:13:09,240 --> 00:13:16,230
this generic communication library that

00:13:13,529 --> 00:13:17,939
we're able to interface with a we could

00:13:16,230 --> 00:13:20,399
we can manage whatever it is that we

00:13:17,939 --> 00:13:22,709
want and it ties right back into this

00:13:20,399 --> 00:13:25,560
question of how do you manage a large

00:13:22,709 --> 00:13:28,709
deployment of heaven knows what now

00:13:25,560 --> 00:13:33,029
we've got a stick of butter here because

00:13:28,709 --> 00:13:34,860
well in its salted of course but we've

00:13:33,029 --> 00:13:39,980
got to stick of butter here because when

00:13:34,860 --> 00:13:42,540
I originally road salt the intent for it

00:13:39,980 --> 00:13:44,130
or the original intent for it

00:13:42,540 --> 00:13:47,490
the config management system was written

00:13:44,130 --> 00:13:49,170
within within and I started writing it

00:13:47,490 --> 00:13:53,010
two months after I first got salt out

00:13:49,170 --> 00:13:55,080
the door but the original intent was for

00:13:53,010 --> 00:13:57,840
it to be the back end for a Cloud

00:13:55,080 --> 00:13:59,970
Controller an interface that was able to

00:13:57,840 --> 00:14:02,600
go out talk to hypervisors and spin up

00:13:59,970 --> 00:14:06,270
and manage virtual machines on them and

00:14:02,600 --> 00:14:09,510
my main idea behind this was that we

00:14:06,270 --> 00:14:11,730
could manage a cloud without having to

00:14:09,510 --> 00:14:14,400
have a database that's generally out of

00:14:11,730 --> 00:14:17,540
sync or old and simplify the overall

00:14:14,400 --> 00:14:20,010
deployment salts really easy to deploy

00:14:17,540 --> 00:14:23,850
stick a stick and agent we call the

00:14:20,010 --> 00:14:26,270
minions because I mean why not but just

00:14:23,850 --> 00:14:28,410
stick an agent out there on your servers

00:14:26,270 --> 00:14:31,950
all I need to do is know where the

00:14:28,410 --> 00:14:34,950
master is and you're up very very easy

00:14:31,950 --> 00:14:37,440
to deploy when linkedin first deployed

00:14:34,950 --> 00:14:39,090
salt we went back and asked them how

00:14:37,440 --> 00:14:42,090
long did it take you to deploy salt

00:14:39,090 --> 00:14:44,520
inside of your first your first

00:14:42,090 --> 00:14:47,000
production deployment and they said it

00:14:44,520 --> 00:14:51,950
took 30 minutes and that deployment had

00:14:47,000 --> 00:14:56,340
6,500 servers so it's not hard to deploy

00:14:51,950 --> 00:14:59,160
okay but so again I wanted to make a

00:14:56,340 --> 00:15:00,870
cloud controller so the first Cloud

00:14:59,160 --> 00:15:03,420
Controller I made which is deprecated

00:15:00,870 --> 00:15:05,250
was called butter and then I threw it

00:15:03,420 --> 00:15:08,460
promptly away and focused on config

00:15:05,250 --> 00:15:11,700
management but more recently we have put

00:15:08,460 --> 00:15:16,290
a lot more effort inside of our salt

00:15:11,700 --> 00:15:20,730
Alexei soccer and salt verte routines as

00:15:16,290 --> 00:15:22,140
well as our sour salt Zen routines so

00:15:20,730 --> 00:15:23,460
now we have many many production

00:15:22,140 --> 00:15:26,160
deployments around the world which are

00:15:23,460 --> 00:15:30,480
using salt to manage kvm virtual

00:15:26,160 --> 00:15:33,180
machines Zen virtual machines and we're

00:15:30,480 --> 00:15:35,540
just starting to get into Alexei and

00:15:33,180 --> 00:15:41,750
docker containers which again has been

00:15:35,540 --> 00:15:41,750
very exciting now

00:15:44,960 --> 00:15:52,810
this is the picture that I've really

00:15:47,090 --> 00:15:55,070
been trying to paint thus far there's a

00:15:52,810 --> 00:15:56,750
there's a phrase that goes around in the

00:15:55,070 --> 00:16:01,120
cloud world which is don't have pets

00:15:56,750 --> 00:16:01,120
have cattle cinnamon heard this before

00:16:01,390 --> 00:16:07,670
okay I've got some yeses if white in the

00:16:04,070 --> 00:16:10,940
middle there's this resounding like I'm

00:16:07,670 --> 00:16:13,460
a complete idiot how dare I yeah but the

00:16:10,940 --> 00:16:15,140
idea being that when you deploy servers

00:16:13,460 --> 00:16:16,790
into an infrastructure you don't want to

00:16:15,140 --> 00:16:18,800
have to be babysitting them and updating

00:16:16,790 --> 00:16:20,240
them all the time when you've got a new

00:16:18,800 --> 00:16:21,680
deployment of software you deploy new

00:16:20,240 --> 00:16:25,730
server where you deploy a new container

00:16:21,680 --> 00:16:28,100
and so this philosophy of we should use

00:16:25,730 --> 00:16:30,380
cattle because they're more disposable

00:16:28,100 --> 00:16:33,230
in the way in which they're managed then

00:16:30,380 --> 00:16:35,540
dogs are because we love our dogs much

00:16:33,230 --> 00:16:40,040
more than we love our hamburger well we

00:16:35,540 --> 00:16:41,390
love our hamburgers but so that's the

00:16:40,040 --> 00:16:47,420
term that goes around in many of these

00:16:41,390 --> 00:16:49,490
cloud cloud management systems but

00:16:47,420 --> 00:16:51,680
inside of salt we've got a philosophy

00:16:49,490 --> 00:16:53,090
more of sure if you've got cattle then

00:16:51,680 --> 00:16:56,840
you're still going to have to have a dog

00:16:53,090 --> 00:16:59,510
to take care of them we have never and

00:16:56,840 --> 00:17:01,100
we've seen many many infrastructures at

00:16:59,510 --> 00:17:04,520
this point that we've been involved in

00:17:01,100 --> 00:17:06,020
deploying and we've we've never seen an

00:17:04,520 --> 00:17:07,760
infrastructure where they would be able

00:17:06,020 --> 00:17:10,190
to pull off making the entire

00:17:07,760 --> 00:17:13,400
infrastructure disposable it just

00:17:10,190 --> 00:17:15,500
doesn't make sense and then that goes

00:17:13,400 --> 00:17:18,530
back into another philosophy which is

00:17:15,500 --> 00:17:20,810
this question about should we use config

00:17:18,530 --> 00:17:23,930
management for deploying our apps or

00:17:20,810 --> 00:17:27,800
should we use images for deploying our

00:17:23,930 --> 00:17:29,600
abs and over time these two these two

00:17:27,800 --> 00:17:31,580
ideas have kind of wrestled with each

00:17:29,600 --> 00:17:34,580
other they've taken the limelight in

00:17:31,580 --> 00:17:38,570
different order I mean we go back not

00:17:34,580 --> 00:17:42,410
very far far ago long long it far ago we

00:17:38,570 --> 00:17:44,030
not very long ago and we see many

00:17:42,410 --> 00:17:46,670
companies that were deploying their

00:17:44,030 --> 00:17:48,940
servers based on images that were being

00:17:46,670 --> 00:17:53,780
pushed out to bare metal hardware and

00:17:48,940 --> 00:17:56,810
then we see a big popularity around

00:17:53,780 --> 00:17:58,700
config management systems and now we see

00:17:56,810 --> 00:18:01,100
that images are becoming more

00:17:58,700 --> 00:18:03,010
killer and honestly what I think is that

00:18:01,100 --> 00:18:06,170
we're just seeing the fact that

00:18:03,010 --> 00:18:08,540
infrastructures are different everybody

00:18:06,170 --> 00:18:10,990
does it differently which is why our

00:18:08,540 --> 00:18:14,000
approach to infrastructure management is

00:18:10,990 --> 00:18:17,360
that we are a system which can manage

00:18:14,000 --> 00:18:20,060
containers virtual machines config

00:18:17,360 --> 00:18:22,880
management monitoring whatever it is

00:18:20,060 --> 00:18:25,420
that you need can be fundamentally

00:18:22,880 --> 00:18:28,580
managed with salt and in ways which are

00:18:25,420 --> 00:18:32,960
faster and more efficient in most cases

00:18:28,580 --> 00:18:34,580
than anybody else that's out there I i

00:18:32,960 --> 00:18:37,940
do want to mention we've got that little

00:18:34,580 --> 00:18:42,610
etsy d bullet down there we had an

00:18:37,940 --> 00:18:45,350
extensive EDD support and to solve as of

00:18:42,610 --> 00:18:47,360
yesterday i'm very excited about its

00:18:45,350 --> 00:18:57,800
it's quite cool if you don't know what

00:18:47,360 --> 00:18:59,060
it's ed is don't worry about it now the

00:18:57,800 --> 00:19:01,340
last thing that I want to talk about

00:18:59,060 --> 00:19:05,320
here because I'm almost out of time so

00:19:01,340 --> 00:19:05,320
yeah my yes I am almost out of time is

00:19:06,040 --> 00:19:11,690
some of the internal things that we do

00:19:08,870 --> 00:19:15,500
with salt this is an example that a lot

00:19:11,690 --> 00:19:19,910
of people really like and that is how we

00:19:15,500 --> 00:19:22,130
manage our test suite so if you go to

00:19:19,910 --> 00:19:24,950
Jenkins all stacked calm you'll see that

00:19:22,130 --> 00:19:29,690
most of our tests are failing on develop

00:19:24,950 --> 00:19:31,370
right now to my embarrassment we're in

00:19:29,690 --> 00:19:35,390
the middle of a bit of a refactor on a

00:19:31,370 --> 00:19:37,550
few things that's my excuse but you'll

00:19:35,390 --> 00:19:39,530
see that we are testing salt against

00:19:37,550 --> 00:19:41,660
many different platforms now the way

00:19:39,530 --> 00:19:46,040
that we do that is that we've got a

00:19:41,660 --> 00:19:50,960
Jenkins server and from said Jenkins

00:19:46,040 --> 00:19:52,910
server it communicates down to salt

00:19:50,960 --> 00:19:55,490
every time a commit goes into github

00:19:52,910 --> 00:19:59,030
which happens quite regularly we were

00:19:55,490 --> 00:20:01,460
actually accused of D dossing the Python

00:19:59,030 --> 00:20:03,560
read the docs site because they were

00:20:01,460 --> 00:20:06,890
rebuilding our documentation something

00:20:03,560 --> 00:20:09,080
like 50 times every 10 minutes

00:20:06,890 --> 00:20:12,610
occasionally because our development

00:20:09,080 --> 00:20:14,350
activity was too too quick but

00:20:12,610 --> 00:20:16,510
on this rack space system we get a new

00:20:14,350 --> 00:20:19,000
commit in and it goes out and

00:20:16,510 --> 00:20:20,170
communicates using salt cloud which I

00:20:19,000 --> 00:20:22,179
haven't talked about it all the salt

00:20:20,170 --> 00:20:24,610
cloud is our system for communicating

00:20:22,179 --> 00:20:26,140
with public and private cloud api's so

00:20:24,610 --> 00:20:30,179
it can communicate with ec2 and

00:20:26,140 --> 00:20:32,950
Rackspace and digital ocean of course

00:20:30,179 --> 00:20:37,900
the digital ocean is awesome by the way

00:20:32,950 --> 00:20:39,580
when I like those guys are our test

00:20:37,900 --> 00:20:42,910
suite is running on rackspace I'm really

00:20:39,580 --> 00:20:49,929
sorry I'll explain why I'm sorry in more

00:20:42,910 --> 00:20:52,750
ways later not on stage but mostly

00:20:49,929 --> 00:20:55,720
because that's you know what we had when

00:20:52,750 --> 00:20:57,549
we built it but anyway spins up these

00:20:55,720 --> 00:21:00,340
virtual machines on ranked space using

00:20:57,549 --> 00:21:02,410
salt cloud communicates with the virtual

00:21:00,340 --> 00:21:04,510
machines once they're spun up have has

00:21:02,410 --> 00:21:07,030
the virtual machine run the test suite

00:21:04,510 --> 00:21:09,730
and then we spin it down and destroy it

00:21:07,030 --> 00:21:13,540
when when we're done so we're spinning

00:21:09,730 --> 00:21:15,720
up many many thousands of virtual

00:21:13,540 --> 00:21:18,490
machines and destroying them continually

00:21:15,720 --> 00:21:21,370
on ranked space on a very very regular

00:21:18,490 --> 00:21:23,040
basis with their own software another

00:21:21,370 --> 00:21:25,929
thing that I want to point out is that

00:21:23,040 --> 00:21:29,650
our test suite is directly hooked into

00:21:25,929 --> 00:21:32,110
darker so you can say that we want to

00:21:29,650 --> 00:21:35,140
run the full salt test suite inside of a

00:21:32,110 --> 00:21:38,230
docker container now this is useful

00:21:35,140 --> 00:21:40,000
primarily because we're a system

00:21:38,230 --> 00:21:43,150
management platform in an automation

00:21:40,000 --> 00:21:45,520
platform to truly test what we're doing

00:21:43,150 --> 00:21:47,710
we generally have to make changes to the

00:21:45,520 --> 00:21:50,230
underlying system you don't like install

00:21:47,710 --> 00:21:52,929
packages and create users and things of

00:21:50,230 --> 00:21:54,640
that nature our test suite our

00:21:52,929 --> 00:21:56,919
integration test suite can be run from

00:21:54,640 --> 00:21:59,440
the command line to make a docker image

00:21:56,919 --> 00:22:02,080
pull that docker image down from dr.

00:21:59,440 --> 00:22:04,780
site and execute within it which again I

00:22:02,080 --> 00:22:08,890
mean we were infinitely grateful to the

00:22:04,780 --> 00:22:14,620
things that docker has has done all

00:22:08,890 --> 00:22:16,890
right now I am out of time thank you for

00:22:14,620 --> 00:22:16,890
your time

00:22:24,750 --> 00:22:26,810

YouTube URL: https://www.youtube.com/watch?v=SSOhXhLBxXc


