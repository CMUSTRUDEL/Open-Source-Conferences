Title: MountainWest Devops 2014 - Bridging the DevOps Islands with Pantry
Publication date: 2020-01-24
Playlist: MountainWest DevOps 2014
Description: 
	By Jason Roelofs

DevOps is a fascinating, quickly growing field. With Chef, Puppet, Ansible, Salt, Packer, Docker, Vagrant, AWS, and others, there are many ways to get an infrastructure up and running. However, it is quickly evident to those entering this field that choosing one tool often excludes all others or requires significant investment in custom development to fit the chosen tool(s) into the intended infrastructure. In this talk I'll be introducing Pantry, a tool-agnostic provisioning service we've been building and running at Collective Idea. Pantry's job is to facilitate communication between developers and their infrastructure, ease the burden on setting up new infrastructure, and to allow seamless use of multiple DevOps tools together. I will be talking about how Pantry came to be, the ideas and technology it uses, the problems Pantry solves for us at Collective Idea and what the future will bring.

Help us caption & translate this video!

http://amara.org/v/FG0u/
Captions: 
	00:00:25,070 --> 00:00:31,500
my name is Jason Roelofs i work at

00:00:28,080 --> 00:00:33,510
collective idea and i'm here to talk to

00:00:31,500 --> 00:00:35,310
you today about pantry tool that we've

00:00:33,510 --> 00:00:38,190
been building past couple of months to

00:00:35,310 --> 00:00:40,530
help us manage our server infrastructure

00:00:38,190 --> 00:00:43,050
how we host and manage multiple

00:00:40,530 --> 00:00:45,090
applications across multiple clients and

00:00:43,050 --> 00:00:47,160
how we deal with our chef stack

00:00:45,090 --> 00:00:49,680
accordingly i'm going to go over gonna

00:00:47,160 --> 00:00:54,030
what it is basically where it came from

00:00:49,680 --> 00:00:57,210
how it's used and go from there so what

00:00:54,030 --> 00:01:00,540
is pantry at its core it's a plug-in

00:00:57,210 --> 00:01:04,649
based client server asynchronous remote

00:01:00,540 --> 00:01:06,690
execution framework which is kind of a

00:01:04,649 --> 00:01:09,330
boring way of introducing it so I'm

00:01:06,690 --> 00:01:14,030
going to try that again and we're gonna

00:01:09,330 --> 00:01:17,160
so what is pantry pantry is DevOps

00:01:14,030 --> 00:01:20,160
automation pipeline framework lets you

00:01:17,160 --> 00:01:22,649
use tools of your choice for like we're

00:01:20,160 --> 00:01:25,200
a chef company or if you want to use

00:01:22,649 --> 00:01:28,950
docker with Chef or or packer or whatnot

00:01:25,200 --> 00:01:35,280
and it uses the principles of convention

00:01:28,950 --> 00:01:37,470
over configuration to offer up a DevOps

00:01:35,280 --> 00:01:39,240
kind of glue between how the tools that

00:01:37,470 --> 00:01:41,100
you choose you want to run your servers

00:01:39,240 --> 00:01:42,540
you're trying to configure it's like

00:01:41,100 --> 00:01:43,560
glue between those two which kind of

00:01:42,540 --> 00:01:45,210
gives you a framework on how to

00:01:43,560 --> 00:01:49,340
communicate with them how to send

00:01:45,210 --> 00:01:52,350
commands how to how to run your stack I

00:01:49,340 --> 00:01:53,580
want to be clear this has kind of been a

00:01:52,350 --> 00:01:55,409
confusing point for people who have

00:01:53,580 --> 00:01:58,380
talked with pantry before pantries not

00:01:55,409 --> 00:01:59,670
itself a configuration tool we didn't

00:01:58,380 --> 00:02:04,799
build something to compete against chef

00:01:59,670 --> 00:02:06,600
or puppet or any of them we pantry is

00:02:04,799 --> 00:02:09,660
meant to be something that uses these

00:02:06,600 --> 00:02:13,500
tools I'm works with these tools so it's

00:02:09,660 --> 00:02:17,780
not directly the competition for a lot

00:02:13,500 --> 00:02:20,670
of tools that we use everyday pantry

00:02:17,780 --> 00:02:22,709
today is the first initial release of

00:02:20,670 --> 00:02:25,350
pantry and Oh point one release what's

00:02:22,709 --> 00:02:27,360
out is pantry core which is the

00:02:25,350 --> 00:02:29,639
execution framework that everything is

00:02:27,360 --> 00:02:32,190
built off of and pantry chef the first

00:02:29,639 --> 00:02:33,960
plug-in which is basically a minimal

00:02:32,190 --> 00:02:35,460
chef server chef client

00:02:33,960 --> 00:02:36,720
placement that offers up just the

00:02:35,460 --> 00:02:39,180
functionality and features that we

00:02:36,720 --> 00:02:42,900
really need so where did this come from

00:02:39,180 --> 00:02:44,430
a collective idea where as you heard

00:02:42,900 --> 00:02:47,520
earlier from Chris where a consulting

00:02:44,430 --> 00:02:51,240
shop we have a number of customers we

00:02:47,520 --> 00:02:52,820
run their websites and we maintain a

00:02:51,240 --> 00:02:56,190
number of applications including our own

00:02:52,820 --> 00:02:57,540
all these apps have their own kind of

00:02:56,190 --> 00:02:58,590
chefs stacked to them they have their

00:02:57,540 --> 00:03:00,240
own cookbooks I have their own

00:02:58,590 --> 00:03:02,430
application info which is environments

00:03:00,240 --> 00:03:05,370
data bagged roles and whatnot um and

00:03:02,430 --> 00:03:07,260
over time I'll we've been basically

00:03:05,370 --> 00:03:09,990
copying these cookbooks from one to the

00:03:07,260 --> 00:03:12,900
other making small changes trying to

00:03:09,990 --> 00:03:14,640
copy changes back across and as you

00:03:12,900 --> 00:03:16,770
expect over time the cookbooks

00:03:14,640 --> 00:03:18,810
themselves have kind of grown out of

00:03:16,770 --> 00:03:22,890
sync with each other so they're all kind

00:03:18,810 --> 00:03:26,130
of different uh and we've got to the

00:03:22,890 --> 00:03:27,330
point now where we need to get a

00:03:26,130 --> 00:03:29,730
solution because kind of getting

00:03:27,330 --> 00:03:31,170
untenable applying security updates

00:03:29,730 --> 00:03:33,290
whatnot is really kind of a pain right

00:03:31,170 --> 00:03:35,700
now so we trying to find a solution to

00:03:33,290 --> 00:03:38,370
better share our cookbooks across our

00:03:35,700 --> 00:03:39,750
applications so we looked into a couple

00:03:38,370 --> 00:03:41,160
of solutions obviously the first one

00:03:39,750 --> 00:03:42,840
being chef server and then we

00:03:41,160 --> 00:03:45,780
investigated Burke shelf and librarian

00:03:42,840 --> 00:03:47,540
among a couple others um so obvious the

00:03:45,780 --> 00:03:51,120
first one we looked at a chef server and

00:03:47,540 --> 00:03:52,680
found out pretty quickly that it doesn't

00:03:51,120 --> 00:03:55,680
actually solve our problem either

00:03:52,680 --> 00:03:59,760
there's a fundamental design decision in

00:03:55,680 --> 00:04:01,470
chef server that it organizations which

00:03:59,760 --> 00:04:02,970
are their de limiting factor of how to

00:04:01,470 --> 00:04:05,760
keep information separate from each

00:04:02,970 --> 00:04:07,200
other doesn't they don't share cookbooks

00:04:05,760 --> 00:04:10,010
there's no way in chef server to share

00:04:07,200 --> 00:04:12,780
cookbooks directly between organizations

00:04:10,010 --> 00:04:15,300
so we decided that was and we did

00:04:12,780 --> 00:04:17,370
actually look into a way of having a

00:04:15,300 --> 00:04:18,690
like an organization that was just the

00:04:17,370 --> 00:04:20,190
cookbooks and then sharing those across

00:04:18,690 --> 00:04:23,430
the applications and that was very

00:04:20,190 --> 00:04:26,460
quickly painful and untamable and we

00:04:23,430 --> 00:04:29,640
decided to drop that we took a look at

00:04:26,460 --> 00:04:32,010
Burke shelf and this was as Burke shelf

00:04:29,640 --> 00:04:35,370
was kind of turning into version 3.0 and

00:04:32,010 --> 00:04:37,080
the movement of ownership from riot

00:04:35,370 --> 00:04:38,250
games to two obstacles things might have

00:04:37,080 --> 00:04:40,530
changed since then but when we were

00:04:38,250 --> 00:04:41,910
playing with Burke shelf it was kind of

00:04:40,530 --> 00:04:43,169
a confusing tool for us we weren't quite

00:04:41,910 --> 00:04:45,600
sure what exactly was trying to

00:04:43,169 --> 00:04:47,639
accomplish if it was just going to try

00:04:45,600 --> 00:04:49,229
to be like a bundler for cookbooks or if

00:04:47,639 --> 00:04:52,430
something to sit in between you and your

00:04:49,229 --> 00:04:54,930
chef server and kind of felt like it was

00:04:52,430 --> 00:04:57,889
overly complicated and then it split up

00:04:54,930 --> 00:05:00,060
into berk shelf and bourke shelf API to

00:04:57,889 --> 00:05:04,340
facilitate finding cookbooks across the

00:05:00,060 --> 00:05:06,569
chef server or get or get one not um so

00:05:04,340 --> 00:05:09,659
kind of confused by that weren't sure

00:05:06,569 --> 00:05:11,099
exactly how to use it best and we didn't

00:05:09,659 --> 00:05:14,490
really find it very reliable at the time

00:05:11,099 --> 00:05:16,169
what we did get working would maybe then

00:05:14,490 --> 00:05:17,699
start throwing errors a couple days down

00:05:16,169 --> 00:05:18,840
the road if a small version bumper or

00:05:17,699 --> 00:05:20,460
who knows well we weren't ever to

00:05:18,840 --> 00:05:25,069
actually really figure it out so that

00:05:20,460 --> 00:05:25,069
one kind of fell fell off the list too

00:05:28,400 --> 00:05:34,080
we also took a look at librarian which

00:05:31,620 --> 00:05:37,110
is that has been around for a decent

00:05:34,080 --> 00:05:39,960
amount time in the chef world didn't

00:05:37,110 --> 00:05:42,080
look a whole lot into it I would I would

00:05:39,960 --> 00:05:45,270
imagine it does a pretty good job of

00:05:42,080 --> 00:05:48,060
what it claims to do managing your

00:05:45,270 --> 00:05:49,620
cookbooks across a couple of your

00:05:48,060 --> 00:05:52,050
applications or whatnot but was about

00:05:49,620 --> 00:05:55,159
this time we started looking into packer

00:05:52,050 --> 00:05:57,599
and other DevOps tools and realize that

00:05:55,159 --> 00:06:00,210
maybe looking into it just a chef only

00:05:57,599 --> 00:06:02,039
tool wasn't the right solution for what

00:06:00,210 --> 00:06:07,409
we really needed in both now and in the

00:06:02,039 --> 00:06:09,689
upcoming future also we did discuss and

00:06:07,409 --> 00:06:11,310
think about what if we did away with

00:06:09,689 --> 00:06:13,469
chef and went to a different tool we

00:06:11,310 --> 00:06:16,370
went to salt or puppet or any of the

00:06:13,469 --> 00:06:19,169
other numerous tools that are out there

00:06:16,370 --> 00:06:21,210
of course that would be throwing away

00:06:19,169 --> 00:06:22,620
many thousands of hours of work and

00:06:21,210 --> 00:06:24,689
years of knowledge that we've

00:06:22,620 --> 00:06:26,580
accumulated that I personally

00:06:24,689 --> 00:06:28,379
accumulated over time a collective idea

00:06:26,580 --> 00:06:35,029
in my previous jobs I've basically doing

00:06:28,379 --> 00:06:37,050
chef for a number of years and we didn't

00:06:35,029 --> 00:06:38,639
couldn't really tell going through the

00:06:37,050 --> 00:06:40,289
other tools that are available whether

00:06:38,639 --> 00:06:42,599
they would have helped to solve the

00:06:40,289 --> 00:06:44,430
problem or if they've just solved one

00:06:42,599 --> 00:06:45,870
aspect of the problem and pushed off

00:06:44,430 --> 00:06:49,139
another problem to be solved later down

00:06:45,870 --> 00:06:50,460
the road so we decided what we're going

00:06:49,139 --> 00:06:52,229
to build we're going to build something

00:06:50,460 --> 00:06:54,479
you would have to be would work with

00:06:52,229 --> 00:06:57,509
chef work with what we've got and move

00:06:54,479 --> 00:06:59,370
on from there um so we started taking us

00:06:57,509 --> 00:07:01,800
so I took a step back and sort of think

00:06:59,370 --> 00:07:04,430
about what is top of you what's

00:07:01,800 --> 00:07:07,050
DevOps how is the field looking today

00:07:04,430 --> 00:07:12,900
what's there how can we how can we solve

00:07:07,050 --> 00:07:14,849
this problem and DevOps is is a fun

00:07:12,900 --> 00:07:16,169
environment to be in there's a lot of

00:07:14,849 --> 00:07:18,000
great people there's a lot of great

00:07:16,169 --> 00:07:21,030
tools the tools are constantly getting

00:07:18,000 --> 00:07:22,710
better I'm improving and a lot of people

00:07:21,030 --> 00:07:24,060
are using them you know you can choose a

00:07:22,710 --> 00:07:27,629
tool and you know what's going to solve

00:07:24,060 --> 00:07:29,069
a specific problem the communities are

00:07:27,629 --> 00:07:31,819
really open and helpful there's a lot of

00:07:29,069 --> 00:07:34,590
knowledge flowing in between them as a

00:07:31,819 --> 00:07:37,740
lot of ideas coming out from from all

00:07:34,590 --> 00:07:39,060
the sides but when you come down to

00:07:37,740 --> 00:07:40,650
trying to use a lot of these tools and

00:07:39,060 --> 00:07:42,509
use a lot of these ideas there's still a

00:07:40,650 --> 00:07:44,490
decent bit of custom development that

00:07:42,509 --> 00:07:46,699
everyone still needs to do when they set

00:07:44,490 --> 00:07:49,319
up their new server stack taking a tool

00:07:46,699 --> 00:07:50,879
putting on the servers what goes in

00:07:49,319 --> 00:07:53,219
between there how do you get everything

00:07:50,879 --> 00:07:54,780
set up so that you actually can use what

00:07:53,219 --> 00:07:59,490
you want to learn what you're wanting to

00:07:54,780 --> 00:08:01,050
use and on top of all that coming up

00:07:59,490 --> 00:08:02,639
with the name of this talk I initially

00:08:01,050 --> 00:08:04,830
was thinking DevOps silos but that

00:08:02,639 --> 00:08:06,990
really wasn't the right term I feel it

00:08:04,830 --> 00:08:09,740
DevOps is more of work we're kind of a

00:08:06,990 --> 00:08:13,949
bunch of islands and in this ocean of

00:08:09,740 --> 00:08:15,810
operations the chef community and the

00:08:13,949 --> 00:08:17,550
puppet community and salt ansible and

00:08:15,810 --> 00:08:19,770
their CF engine now we got vagrant and

00:08:17,550 --> 00:08:21,389
packer and there's and we know about

00:08:19,770 --> 00:08:23,460
each other and we talk with each other a

00:08:21,389 --> 00:08:25,139
little bit but a lot of the most of the

00:08:23,460 --> 00:08:28,430
ideas kind of stay within these islands

00:08:25,139 --> 00:08:28,430
and within these communities and

00:08:30,409 --> 00:08:34,680
everybody is in the end solving a lot of

00:08:33,539 --> 00:08:36,870
the same problems just with different

00:08:34,680 --> 00:08:38,430
tools when you're setting up a new

00:08:36,870 --> 00:08:39,870
server or a new stack or in your

00:08:38,430 --> 00:08:42,899
application and what not everybody has

00:08:39,870 --> 00:08:44,310
to answer the same questions and so it

00:08:42,899 --> 00:08:45,390
kind of condensed down to the main

00:08:44,310 --> 00:08:46,649
questions that people have to answer

00:08:45,390 --> 00:08:48,480
when they're when they're setting up new

00:08:46,649 --> 00:08:49,890
servers like where do I store my data

00:08:48,480 --> 00:08:53,100
where do my cookbooks go where do my

00:08:49,890 --> 00:08:55,260
manifest go and salt pillars and all

00:08:53,100 --> 00:08:57,480
that stuff how do I provision the new

00:08:55,260 --> 00:09:00,060
servers how do i configure these servers

00:08:57,480 --> 00:09:02,040
or how do I run these tools how do I

00:09:00,060 --> 00:09:05,430
share my configurations across the

00:09:02,040 --> 00:09:06,690
various apps that I have to run and last

00:09:05,430 --> 00:09:09,269
but definitely not least how to make

00:09:06,690 --> 00:09:10,860
sure that this data flowing across my

00:09:09,269 --> 00:09:12,360
network flowing across here now how do I

00:09:10,860 --> 00:09:14,730
keep this secure so that someone doesn't

00:09:12,360 --> 00:09:15,480
actually intercept important API keys

00:09:14,730 --> 00:09:18,089
and

00:09:15,480 --> 00:09:23,610
swords and whatnot so that's where

00:09:18,089 --> 00:09:26,940
pantry comes in this pantry is the glue

00:09:23,610 --> 00:09:28,649
as I said before to set up a stack such

00:09:26,940 --> 00:09:31,170
that you can use the tool of your choice

00:09:28,649 --> 00:09:34,440
to set up and manage manage your servers

00:09:31,170 --> 00:09:36,500
and pantry offers a number of specific

00:09:34,440 --> 00:09:39,000
answers for a lot of these questions for

00:09:36,500 --> 00:09:40,529
storage it's obviously recommended that

00:09:39,000 --> 00:09:42,540
you put your configs and a source

00:09:40,529 --> 00:09:45,660
control management of some sort but

00:09:42,540 --> 00:09:48,209
other than that for operational purposes

00:09:45,660 --> 00:09:50,519
the information that you're trying to

00:09:48,209 --> 00:09:52,350
use on your on your servers goes up into

00:09:50,519 --> 00:09:53,639
the pantry server stored on the file

00:09:52,350 --> 00:09:56,190
system there and available to all

00:09:53,639 --> 00:09:58,949
clients that are part of this network

00:09:56,190 --> 00:10:01,260
and then that's all contained in one

00:09:58,949 --> 00:10:02,940
little area that doesn't pollute the the

00:10:01,260 --> 00:10:06,209
file system so it's easy to add and

00:10:02,940 --> 00:10:08,279
remove as necessary how you provision

00:10:06,209 --> 00:10:11,430
and configure your servers is the realm

00:10:08,279 --> 00:10:13,889
of either may it's not pantries job

00:10:11,430 --> 00:10:15,750
mates something else if you're setting

00:10:13,889 --> 00:10:17,760
up barebone hardware whatnot but

00:10:15,750 --> 00:10:20,069
configuration we've done through pantry

00:10:17,760 --> 00:10:24,240
plugins which is what adds functionality

00:10:20,069 --> 00:10:28,190
support to pantry sharing configuration

00:10:24,240 --> 00:10:30,029
is something that is by design in pantry

00:10:28,190 --> 00:10:32,310
everything that gets uploaded to a

00:10:30,029 --> 00:10:34,380
pantry server is technically accessible

00:10:32,310 --> 00:10:37,230
to all the clients that connect into the

00:10:34,380 --> 00:10:39,930
server so it's easy to set up a packer

00:10:37,230 --> 00:10:42,480
which can talk to the cookbooks and use

00:10:39,930 --> 00:10:44,850
all that together in one piece we don't

00:10:42,480 --> 00:10:47,220
have any limitations on who can access

00:10:44,850 --> 00:10:50,250
what data that isn't to say that pantry

00:10:47,220 --> 00:10:52,800
isn't secure security is actually a very

00:10:50,250 --> 00:10:56,639
important aspect of pantry so as I keep

00:10:52,800 --> 00:10:59,220
a secure well yes but that's a that's a

00:10:56,639 --> 00:11:03,269
much bigger part of this talk and that

00:10:59,220 --> 00:11:06,089
will come later using pantry is simply

00:11:03,269 --> 00:11:07,860
gems install the gems it gives you a

00:11:06,089 --> 00:11:09,180
couple of binaries you have one cert you

00:11:07,860 --> 00:11:10,139
have your server and the clients connect

00:11:09,180 --> 00:11:11,970
to the server and then there's a

00:11:10,139 --> 00:11:13,889
command-line interface which you use to

00:11:11,970 --> 00:11:16,470
actually send commands into your pantry

00:11:13,889 --> 00:11:22,680
network and interact with what you've

00:11:16,470 --> 00:11:25,199
got set up andrea is a very minimal set

00:11:22,680 --> 00:11:28,380
of dependencies it's a Ruby 2 point 0

00:11:25,199 --> 00:11:29,190
plus project uses 0 mq for the network

00:11:28,380 --> 00:11:30,300
communication

00:11:29,190 --> 00:11:33,030
doing the serve on the clients and it

00:11:30,300 --> 00:11:35,400
will work on three point X but is

00:11:33,030 --> 00:11:36,720
recommended if you want to use the

00:11:35,400 --> 00:11:39,180
security layer which I'll talk about in

00:11:36,720 --> 00:11:41,730
a sec that you'll need 0 and Q 4 and the

00:11:39,180 --> 00:11:44,310
lib sodium library installed there are

00:11:41,730 --> 00:11:47,280
plans to set up some sort of omnibus

00:11:44,310 --> 00:11:48,690
installer so that this is easier to just

00:11:47,280 --> 00:11:50,190
drop onto the server without needing

00:11:48,690 --> 00:11:52,680
Ruby installed or any of that stuff and

00:11:50,190 --> 00:11:55,890
just kind of works on itself quick a

00:11:52,680 --> 00:11:58,890
couple of the rundown on the parts of

00:11:55,890 --> 00:12:02,010
pantry the server is the brains of the

00:11:58,890 --> 00:12:04,620
whole thing there's in most cases one

00:12:02,010 --> 00:12:06,990
server for all of the clients and all

00:12:04,620 --> 00:12:08,340
the applications it holds everything all

00:12:06,990 --> 00:12:10,820
the communication goes through the

00:12:08,340 --> 00:12:13,440
service every command line interface

00:12:10,820 --> 00:12:14,730
invocation will send a request to the

00:12:13,440 --> 00:12:16,590
server and the server will figure out

00:12:14,730 --> 00:12:21,360
what clients need to actually run this

00:12:16,590 --> 00:12:23,040
command the client itself is a simple it

00:12:21,360 --> 00:12:25,800
just runs the command that's told it can

00:12:23,040 --> 00:12:28,290
be configured with a specific identity

00:12:25,800 --> 00:12:30,810
to identify it across the whole network

00:12:28,290 --> 00:12:32,450
can be cleared up for working for

00:12:30,810 --> 00:12:35,610
specific application in environmental

00:12:32,450 --> 00:12:37,830
occasion and across specific roles and

00:12:35,610 --> 00:12:40,500
these are the values that are used to

00:12:37,830 --> 00:12:44,040
figure out which clients need to run

00:12:40,500 --> 00:12:48,000
certain commands you can specify through

00:12:44,040 --> 00:12:49,500
the command line tool right all clients

00:12:48,000 --> 00:12:52,380
run on some clients run our specific

00:12:49,500 --> 00:12:55,280
client as an example to see the check

00:12:52,380 --> 00:12:58,310
and status of all the clients for my

00:12:55,280 --> 00:13:00,720
production application you say my

00:12:58,310 --> 00:13:03,180
application in the production and run

00:13:00,720 --> 00:13:05,940
the status command and then when the

00:13:03,180 --> 00:13:07,680
chef plugins installed you can run chef

00:13:05,940 --> 00:13:10,020
Tsai on your staging servers with just a

00:13:07,680 --> 00:13:14,970
simple chef run command and that will

00:13:10,020 --> 00:13:17,280
run and then pantry itself is easily

00:13:14,970 --> 00:13:20,520
accessible through plugins system which

00:13:17,280 --> 00:13:22,740
uses rubygems underneath I the initial

00:13:20,520 --> 00:13:24,000
hooks are commands I can run the server

00:13:22,740 --> 00:13:26,220
commands like we're on the client and

00:13:24,000 --> 00:13:28,650
I've signed up for a lightning talk to

00:13:26,220 --> 00:13:31,620
show what the details of how this works

00:13:28,650 --> 00:13:34,050
so if you want to know more I'll be

00:13:31,620 --> 00:13:36,060
there to show that so if we come back to

00:13:34,050 --> 00:13:37,740
our problem of lots of apps lots of

00:13:36,060 --> 00:13:41,220
cookbooks information is kind of spread

00:13:37,740 --> 00:13:42,230
out the idea behind Patrick chef and

00:13:41,220 --> 00:13:46,670
then what

00:13:42,230 --> 00:13:49,160
pantry is we want the server to hold our

00:13:46,670 --> 00:13:51,380
cookbooks to then keep separate

00:13:49,160 --> 00:13:53,720
application information the environments

00:13:51,380 --> 00:13:55,580
to data bags and the roles such that

00:13:53,720 --> 00:13:57,980
clients can come in and say hey I'm this

00:13:55,580 --> 00:13:59,450
application on this application give me

00:13:57,980 --> 00:14:01,100
the cookbooks I need given the

00:13:59,450 --> 00:14:05,780
information I need no configure itself

00:14:01,100 --> 00:14:08,510
to run and off it goes we is a very

00:14:05,780 --> 00:14:10,040
minimal chef server replacement we don't

00:14:08,510 --> 00:14:11,660
do any sort of users or permissions

00:14:10,040 --> 00:14:14,420
management no extra accounts there's no

00:14:11,660 --> 00:14:15,590
web front-end we don't do cookbook

00:14:14,420 --> 00:14:19,040
versioning because we've personally

00:14:15,590 --> 00:14:20,840
never needed it and it's if if enough

00:14:19,040 --> 00:14:23,060
people feel it's necessary and it's easy

00:14:20,840 --> 00:14:24,590
enough to add we don't do a whole lot

00:14:23,060 --> 00:14:27,560
with cookbook dependencies will let chef

00:14:24,590 --> 00:14:29,150
figure it out I'll we run on the clients

00:14:27,560 --> 00:14:31,580
to run chef solo so we just drop all the

00:14:29,150 --> 00:14:32,960
cookbooks on the client and we let Chef

00:14:31,580 --> 00:14:35,420
figure it out from the run list what

00:14:32,960 --> 00:14:38,600
cookbooks actually need to run and then

00:14:35,420 --> 00:14:40,640
the configuration itself on what clients

00:14:38,600 --> 00:14:43,640
run what is done through regular chef

00:14:40,640 --> 00:14:45,470
files so I upload your roles and the

00:14:43,640 --> 00:14:47,150
roles contain the run list and the run

00:14:45,470 --> 00:14:49,010
list tell chef what to do so there's no

00:14:47,150 --> 00:14:51,080
actual work to be done on pantry side

00:14:49,010 --> 00:14:54,140
you just configure install the plug-in

00:14:51,080 --> 00:14:57,140
upload your data and run chef and it

00:14:54,140 --> 00:15:01,160
figures it all out for you and this is

00:14:57,140 --> 00:15:03,110
the whole set plot but one solicited

00:15:01,160 --> 00:15:04,460
commands for how to Huggies pantry chef

00:15:03,110 --> 00:15:05,690
you upload your cookbooks your

00:15:04,460 --> 00:15:07,610
environment you rolls your data bag fee

00:15:05,690 --> 00:15:08,870
application and then run chef and

00:15:07,610 --> 00:15:18,050
everything else just happens

00:15:08,870 --> 00:15:20,960
automatically for you so from here I'm

00:15:18,050 --> 00:15:23,480
talking about the answer the question

00:15:20,960 --> 00:15:26,020
that I put off earlier security pantry

00:15:23,480 --> 00:15:29,530
takes a slightly different aspect of

00:15:26,020 --> 00:15:31,940
security than a lot of the tools we know

00:15:29,530 --> 00:15:33,440
or very well it's like we don't we know

00:15:31,940 --> 00:15:35,330
we didn't want to build our own because

00:15:33,440 --> 00:15:37,780
that's very difficult thing to get right

00:15:35,330 --> 00:15:42,350
I don't profess to be any sort of crypto

00:15:37,780 --> 00:15:44,450
guy I look at what people do and I read

00:15:42,350 --> 00:15:46,240
about it but I wouldn't be able to

00:15:44,450 --> 00:15:50,090
implement a really good one on my own

00:15:46,240 --> 00:15:53,510
getting it wrong this is a really bad

00:15:50,090 --> 00:15:55,160
thing um and I feel that some sometimes

00:15:53,510 --> 00:15:55,880
it can be hardened in today's day and

00:15:55,160 --> 00:15:58,700
age to really

00:15:55,880 --> 00:16:00,830
no what is and what isn't secure and it

00:15:58,700 --> 00:16:05,380
seems like that is changing quite a bit

00:16:00,830 --> 00:16:08,450
in the last couple of years so in pantry

00:16:05,380 --> 00:16:12,110
the default security is that while there

00:16:08,450 --> 00:16:15,140
is none the initial setup is plain text

00:16:12,110 --> 00:16:16,430
communication and we don't really do any

00:16:15,140 --> 00:16:18,200
authentication on what clients can

00:16:16,430 --> 00:16:20,780
connect in this is to say there isn't a

00:16:18,200 --> 00:16:23,690
layer of security on here but we've set

00:16:20,780 --> 00:16:26,600
we had to build it best to make the

00:16:23,690 --> 00:16:28,520
default just empty for a reason what you

00:16:26,600 --> 00:16:30,050
understand the sec it is obviously

00:16:28,520 --> 00:16:32,840
recommend if you choose go this route to

00:16:30,050 --> 00:16:35,270
set up security on the sockets using

00:16:32,840 --> 00:16:36,920
like so cat or ssh tunnels or s tunnels

00:16:35,270 --> 00:16:40,760
to make sure that that stuff is actually

00:16:36,920 --> 00:16:44,120
encrypted why didn't we use openssl it

00:16:40,760 --> 00:16:46,190
is the de facto standard there's tons of

00:16:44,120 --> 00:16:48,320
protocols tons of ciphers and it's

00:16:46,190 --> 00:16:49,730
coming ever more complicated on which

00:16:48,320 --> 00:16:51,080
protocols in which ciphers work well

00:16:49,730 --> 00:16:52,970
together which ones don't work well

00:16:51,080 --> 00:16:55,820
together which ones are secure which

00:16:52,970 --> 00:16:57,620
ones aren't and we didn't want to have

00:16:55,820 --> 00:16:59,180
to keep track of the ones that we did

00:16:57,620 --> 00:17:04,069
use where there are problems with it

00:16:59,180 --> 00:17:06,280
need to switch to others and also there

00:17:04,069 --> 00:17:10,010
was no actual built in to support for

00:17:06,280 --> 00:17:13,220
openssl using zeromq and actually adding

00:17:10,010 --> 00:17:17,780
that is not a trivial thing due to the

00:17:13,220 --> 00:17:20,540
complexity of the openssl capi we didn't

00:17:17,780 --> 00:17:22,910
really want to deal with that so what we

00:17:20,540 --> 00:17:26,930
did go with is something that's new in

00:17:22,910 --> 00:17:29,570
Durham q4 it's called curves EMQ it's

00:17:26,930 --> 00:17:32,900
implication of a new protocol under

00:17:29,570 --> 00:17:34,640
development called curve CP completely

00:17:32,900 --> 00:17:38,860
turned on in pantry with just a simple

00:17:34,640 --> 00:17:43,640
config setting and what curve CP is as a

00:17:38,860 --> 00:17:47,510
replacement for TCP that builds a fully

00:17:43,640 --> 00:17:51,890
encrypted pipeline using UDP underneath

00:17:47,510 --> 00:17:54,440
and using this curve 255 19 encryption

00:17:51,890 --> 00:17:58,010
algorithm it's a pretty complicated

00:17:54,440 --> 00:18:00,170
thing right now curve CP in itself I

00:17:58,010 --> 00:18:02,870
don't believe is run anywhere it's more

00:18:00,170 --> 00:18:04,220
of a prototype test bed but it's ideas

00:18:02,870 --> 00:18:07,010
are starting to spread into a number of

00:18:04,220 --> 00:18:09,650
places a quick jump down one more level

00:18:07,010 --> 00:18:11,870
two what is curve 255 19

00:18:09,650 --> 00:18:14,540
it's an implementation of elliptic curve

00:18:11,870 --> 00:18:20,030
cryptography and the name comes from the

00:18:14,540 --> 00:18:23,900
base prime number that it uses ECC has I

00:18:20,030 --> 00:18:27,440
feel gotten a bad rap lately with the

00:18:23,900 --> 00:18:30,470
the NSA revelations on the number of

00:18:27,440 --> 00:18:33,290
NIST curves that were previously well

00:18:30,470 --> 00:18:36,800
used and considered secure have now been

00:18:33,290 --> 00:18:38,570
are now considered backdoored but that

00:18:36,800 --> 00:18:41,930
isn't to say that ECC isn't itself

00:18:38,570 --> 00:18:43,190
secure a cc is actually very very solid

00:18:41,930 --> 00:18:44,690
mathematically you just how to make sure

00:18:43,190 --> 00:18:47,240
that you choose the right curves and the

00:18:44,690 --> 00:18:49,580
right numbers if you're unfamiliar with

00:18:47,240 --> 00:18:52,610
ECC there's an article on ARS technica

00:18:49,580 --> 00:18:53,930
which is by the best description of ECC

00:18:52,610 --> 00:18:56,240
I've ever seen helped me really kind

00:18:53,930 --> 00:18:57,980
understand what it actually is and then

00:18:56,240 --> 00:19:03,050
the bottom link is a link to the

00:18:57,980 --> 00:19:05,180
information page for this ECC curve so

00:19:03,050 --> 00:19:07,400
curves EMQ then is an improved

00:19:05,180 --> 00:19:09,470
implantation of curve CP sitting using

00:19:07,400 --> 00:19:13,100
zeromq as the networking layer instead

00:19:09,470 --> 00:19:15,560
of replacing tcp for those interested in

00:19:13,100 --> 00:19:21,050
in the security upcoming and the new

00:19:15,560 --> 00:19:24,530
security changes NaCl lib sodium are two

00:19:21,050 --> 00:19:26,900
important libraries to keep in mind NaCl

00:19:24,530 --> 00:19:30,260
is being developed by Daniel Burnstein

00:19:26,900 --> 00:19:33,730
and number of others and it's more of

00:19:30,260 --> 00:19:35,950
kind of like curves EP a test bed and a

00:19:33,730 --> 00:19:39,440
prototyping tool for these new

00:19:35,950 --> 00:19:41,690
cryptography ideas and live sodium came

00:19:39,440 --> 00:19:43,520
around because NaCl is difficult to use

00:19:41,690 --> 00:19:46,670
wasn't really portable so lib sodium is

00:19:43,520 --> 00:19:48,170
a fork of NaCl that makes it package'

00:19:46,670 --> 00:19:49,760
before tible it's very easy to install

00:19:48,170 --> 00:19:54,250
on a lot of machines now and it only

00:19:49,760 --> 00:19:54,250
includes the well-known strong and

00:19:54,340 --> 00:20:03,380
working on being proven cryptography

00:19:57,410 --> 00:20:05,690
primitives like curve courtesy mq by

00:20:03,380 --> 00:20:07,640
design prevents a lot of many common

00:20:05,690 --> 00:20:10,460
attacks that we've seen on the internet

00:20:07,640 --> 00:20:13,460
but it is still very young it is only

00:20:10,460 --> 00:20:15,710
actually released as of i think two

00:20:13,460 --> 00:20:17,600
months ago and while a lot of people are

00:20:15,710 --> 00:20:20,390
using it is still not considered vetted

00:20:17,600 --> 00:20:23,500
by the cryptographic community so I is

00:20:20,390 --> 00:20:26,410
best for us to add this as an opt-in

00:20:23,500 --> 00:20:28,560
instead of an opt-out until more people

00:20:26,410 --> 00:20:32,560
are comfortable with its strengths and

00:20:28,560 --> 00:20:36,850
then its website is there so the attacks

00:20:32,560 --> 00:20:38,680
and how it stops it um Kurt the curve 25

00:20:36,850 --> 00:20:40,720
519 is a typical diffie-hellman key

00:20:38,680 --> 00:20:42,670
exchange format so man in the middle

00:20:40,720 --> 00:20:45,940
doesn't work by unless they have both

00:20:42,670 --> 00:20:48,190
keys on both sides packet replay is

00:20:45,940 --> 00:20:49,840
prevented because every packet uses

00:20:48,190 --> 00:20:51,970
what's called a nonce which is a number

00:20:49,840 --> 00:20:54,310
only used once so if you try to replay a

00:20:51,970 --> 00:20:56,620
packet the system will notice that that

00:20:54,310 --> 00:20:57,760
nuts has been replayed and we'll just

00:20:56,620 --> 00:21:01,540
drop the packet because it can't

00:20:57,760 --> 00:21:05,350
actually decrypt it altering in forging

00:21:01,540 --> 00:21:07,060
packets is similarly difficult any

00:21:05,350 --> 00:21:08,920
alteration to an existing packet

00:21:07,060 --> 00:21:10,900
immediately makes it unencrypted abul

00:21:08,920 --> 00:21:12,670
and it gets dropped and forging again

00:21:10,900 --> 00:21:16,090
requires the actual keys to create a

00:21:12,670 --> 00:21:18,540
valid packet it also has preventatives

00:21:16,090 --> 00:21:21,490
for amplification attacks much like the

00:21:18,540 --> 00:21:24,100
dns and ntp ddos attacks we've been

00:21:21,490 --> 00:21:26,020
seeing as of late we're a small request

00:21:24,100 --> 00:21:30,160
out creates a whole lot of traffic out

00:21:26,020 --> 00:21:32,710
to a forged client but instead what

00:21:30,160 --> 00:21:34,870
curves EMQ does is simply make that

00:21:32,710 --> 00:21:39,430
initial request that causes a response

00:21:34,870 --> 00:21:42,670
to be bigger than the response a really

00:21:39,430 --> 00:21:45,400
neat attack that curves the mq stops is

00:21:42,670 --> 00:21:49,270
key theft so if an attacker is sitting

00:21:45,400 --> 00:21:51,430
there between two endpoints listening on

00:21:49,270 --> 00:21:53,110
this encrypted communication stream and

00:21:51,430 --> 00:21:55,600
recording it straight out to disk and

00:21:53,110 --> 00:21:58,210
then this attacker ends up getting the

00:21:55,600 --> 00:22:00,330
keys public private keys for the both

00:21:58,210 --> 00:22:02,560
end points he still can't actually

00:22:00,330 --> 00:22:04,660
decrypt that communication stream

00:22:02,560 --> 00:22:06,760
because instead of using those keys

00:22:04,660 --> 00:22:09,190
directly to encrypt those keys are used

00:22:06,760 --> 00:22:10,450
to create transient keys and those keys

00:22:09,190 --> 00:22:12,220
are then used to encrypt and decrypt

00:22:10,450 --> 00:22:15,930
communication which are then dropped as

00:22:12,220 --> 00:22:18,070
soon as the pipeline is closed so once a

00:22:15,930 --> 00:22:19,960
pipeline is closed the keys are gone

00:22:18,070 --> 00:22:22,000
there is no way of getting access to

00:22:19,960 --> 00:22:25,420
them again and your basic suck having to

00:22:22,000 --> 00:22:27,460
brute-force a save stream it also

00:22:25,420 --> 00:22:30,400
prevents client identification because

00:22:27,460 --> 00:22:31,990
nothing is ever sent via plaintext even

00:22:30,400 --> 00:22:33,490
the initial handshake is sent via these

00:22:31,990 --> 00:22:39,420
transient keys using the diffie-hellman

00:22:33,490 --> 00:22:39,420
key exchange and then curves iam qmix

00:22:40,059 --> 00:22:45,440
specific that any community any

00:22:43,570 --> 00:22:47,269
connection that comes in doesn't

00:22:45,440 --> 00:22:49,399
actually create any memory and this is

00:22:47,269 --> 00:22:51,799
allocated memory in the system until it

00:22:49,399 --> 00:22:53,959
is a valid connection to a valid clients

00:22:51,799 --> 00:22:55,909
all you have to worry about someone

00:22:53,959 --> 00:22:59,839
hitting with a bunch of junk in your

00:22:55,909 --> 00:23:04,609
server going crazy with memory usage so

00:22:59,839 --> 00:23:06,769
curves iam human pantry of ads we use

00:23:04,609 --> 00:23:08,749
curves in queue to do encrypted

00:23:06,769 --> 00:23:10,999
communication between the server and the

00:23:08,749 --> 00:23:12,589
clients as well as authentication on who

00:23:10,999 --> 00:23:15,499
can actually connect into this server

00:23:12,589 --> 00:23:18,139
and so for this to work the clients and

00:23:15,499 --> 00:23:20,089
the CLI which is actively a client needs

00:23:18,139 --> 00:23:22,759
the their own public and private keys in

00:23:20,089 --> 00:23:24,979
the server's public key and the server

00:23:22,759 --> 00:23:26,450
will know what clients are allowed to

00:23:24,979 --> 00:23:28,429
connect to it via the client it all a

00:23:26,450 --> 00:23:29,749
list of client public keys because it

00:23:28,429 --> 00:23:32,929
then is the one that actually generates

00:23:29,749 --> 00:23:35,839
these key pairs so to go back to the

00:23:32,929 --> 00:23:40,669
initial question how to keep it secure

00:23:35,839 --> 00:23:43,249
pantry is secure as long as you opt into

00:23:40,669 --> 00:23:48,589
the curve security or if you set up your

00:23:43,249 --> 00:23:49,729
own s tunnel obviously this technical

00:23:48,589 --> 00:23:52,039
the curve stuff is technically use at

00:23:49,729 --> 00:23:53,779
your own risk but there is a lot of

00:23:52,039 --> 00:23:57,139
really smart people behind it and

00:23:53,779 --> 00:23:59,479
there's a ever-increasing number of

00:23:57,139 --> 00:24:00,769
tools and utilities who are using this

00:23:59,479 --> 00:24:02,779
encryption in this communication

00:24:00,769 --> 00:24:05,179
protocol that I think will find that

00:24:02,779 --> 00:24:07,729
it's a considered incredibly strong and

00:24:05,179 --> 00:24:11,440
very secure and there's always

00:24:07,729 --> 00:24:14,269
improvements coming on so to recap

00:24:11,440 --> 00:24:19,039
pantry is a DevOps pipeline framework it

00:24:14,269 --> 00:24:21,589
offers a way to connect between your dev

00:24:19,039 --> 00:24:23,209
environments your tool of choice and the

00:24:21,589 --> 00:24:25,489
servers you're trying to configure so

00:24:23,209 --> 00:24:27,919
you don't have to keep setting up your

00:24:25,489 --> 00:24:34,129
own custom stack every time you're

00:24:27,919 --> 00:24:35,719
setting up new servers I'm trying to

00:24:34,129 --> 00:24:39,589
basically just remove the tedium of

00:24:35,719 --> 00:24:42,799
setting up more DevOps pantry and pantry

00:24:39,589 --> 00:24:45,200
sheffer out now and well there's more on

00:24:42,799 --> 00:24:46,999
the way we're investigating packer bogus

00:24:45,200 --> 00:24:50,149
start looking into docker and all these

00:24:46,999 --> 00:24:51,320
can be part of the of the pantry

00:24:50,149 --> 00:24:54,170
ecosystem

00:24:51,320 --> 00:24:56,450
um so I want to get a call-up to the two

00:24:54,170 --> 00:25:00,470
main libraries that paint reuses zeromq

00:24:56,450 --> 00:25:02,750
is awesome I've never been happier

00:25:00,470 --> 00:25:05,120
building a tool that actually does sake

00:25:02,750 --> 00:25:08,360
communication because soccer program he

00:25:05,120 --> 00:25:09,470
just kind of sucks and it offers a whole

00:25:08,360 --> 00:25:12,020
bunch of built-in communication

00:25:09,470 --> 00:25:14,540
topologies that just work right out of

00:25:12,020 --> 00:25:17,300
the right out of the gate like a pub sub

00:25:14,540 --> 00:25:19,850
and just basic request reply and all

00:25:17,300 --> 00:25:22,550
sorts of asynchronous stuff also pantry

00:25:19,850 --> 00:25:25,190
makes heavy use of celluloid which is

00:25:22,550 --> 00:25:28,280
also awesome because concurrency sucks

00:25:25,190 --> 00:25:30,020
and celluloid does all this for us using

00:25:28,280 --> 00:25:32,030
actors futures conditionals a lot of

00:25:30,020 --> 00:25:34,180
really great ideas and all comes

00:25:32,030 --> 00:25:37,160
together in a really easy to use package

00:25:34,180 --> 00:25:39,260
and also we've got it comes with the

00:25:37,160 --> 00:25:42,020
celluloid ZM queue so that was already

00:25:39,260 --> 00:25:44,990
there for me to use so if celluloid with

00:25:42,020 --> 00:25:47,530
zeromq as like a thing basically just

00:25:44,990 --> 00:25:50,780
wrote itself is great oh so that's

00:25:47,530 --> 00:25:52,670
pantry the website is pantry offset org

00:25:50,780 --> 00:25:56,660
there is an organization up on github at

00:25:52,670 --> 00:25:58,910
/ pantry um and yeah so that's our tool

00:25:56,660 --> 00:26:03,790
we hope you check it out and let us know

00:25:58,910 --> 00:26:03,790
what you think okay thank you

00:26:33,750 --> 00:26:35,810

YouTube URL: https://www.youtube.com/watch?v=VoxIxQwRco0


