Title: MountainWest Devops 2014 - Modern DevOps: Understanding the Terrain
Publication date: 2020-01-24
Playlist: MountainWest DevOps 2014
Description: 
	By Mitchell Hashimoto

In 2013, we saw the introduction of many new DevOps tools and existing tools such as Vagrant saw some huge improvements and features added. With all this change, its hard to keep up with not only what has changed, but how to use these changes and what benefits they have. This talk begins by briefly introducing a handful of my own tools: Vagrant, Packer, and Serf. I talk about what their purpose is, some of their latest features, and who is using these tools. I then continue to show how these tools can be used along with other software such as Docker to create some truly amazing development and production stacks. For production stacks, I discuss the benefits of using some of these tools over existing options, and for development stacks, I show how Vagrant improves process and workflow to help streamline the entire process from development through to production.

Help us caption & translate this video!

http://amara.org/v/FG29/
Captions: 
	00:00:24,860 --> 00:00:34,590
okay ah yes this is a windows computer

00:00:29,040 --> 00:00:37,559
so it's just as bad as you think but

00:00:34,590 --> 00:00:41,160
PowerPoint works really well so okay so

00:00:37,559 --> 00:00:43,500
I'm gonna open it up today i guess i'm

00:00:41,160 --> 00:00:44,970
gonna be talking about understanding the

00:00:43,500 --> 00:00:46,890
terrain of DevOps and i think that's

00:00:44,970 --> 00:00:49,770
pretty appropriate given the schedule i

00:00:46,890 --> 00:00:51,840
saw here today it's really going to be

00:00:49,770 --> 00:00:54,180
about i think you know i think for a

00:00:51,840 --> 00:00:55,890
couple of years you know doing devops

00:00:54,180 --> 00:01:00,239
quote-unquote as correct or incorrect

00:00:55,890 --> 00:01:02,610
that maybe was pretty easy because you

00:01:00,239 --> 00:01:04,229
knew sheffer puppet and use sheffer

00:01:02,610 --> 00:01:06,119
puppet and as long as you did that that

00:01:04,229 --> 00:01:09,149
was pretty much all there was to it from

00:01:06,119 --> 00:01:10,470
a technical side of things and then no

00:01:09,149 --> 00:01:12,000
new tools really came out for a long

00:01:10,470 --> 00:01:15,090
time and then I feel like in the past

00:01:12,000 --> 00:01:16,680
you know two years or so it's gotten

00:01:15,090 --> 00:01:18,360
really crazy and a lot of tools have

00:01:16,680 --> 00:01:21,600
come out and I get a lot of confusion

00:01:18,360 --> 00:01:23,850
you know of what people should use and

00:01:21,600 --> 00:01:25,350
not what they shouldn't and I get asked

00:01:23,850 --> 00:01:29,909
a lot you know things like oh should i

00:01:25,350 --> 00:01:33,090
use surf or should i use docker and it's

00:01:29,909 --> 00:01:36,900
kind of like hmm they don't overlap in

00:01:33,090 --> 00:01:39,590
the slightest so yeah i'm trying to

00:01:36,900 --> 00:01:43,799
address those questions with this talk

00:01:39,590 --> 00:01:45,479
so this is me the most valuable piece of

00:01:43,799 --> 00:01:47,310
information on this slide is the twitter

00:01:45,479 --> 00:01:48,689
handle if you have any questions or want

00:01:47,310 --> 00:01:52,200
to get a hold me during the conference

00:01:48,689 --> 00:01:54,420
I'll it makes my phone vibrate even if I

00:01:52,200 --> 00:01:59,759
don't want it to so I'll know if you

00:01:54,420 --> 00:02:02,820
ping me I started work for this company

00:01:59,759 --> 00:02:05,189
and we're a DevOps tools company so

00:02:02,820 --> 00:02:07,170
basically what we like to do is work

00:02:05,189 --> 00:02:09,030
with a lot of companies and see where

00:02:07,170 --> 00:02:12,060
they have DevOps pains and try to see if

00:02:09,030 --> 00:02:14,489
we could solve a tool build a tool to

00:02:12,060 --> 00:02:16,320
solve their problems because I having

00:02:14,489 --> 00:02:18,390
worked in various companies i really

00:02:16,320 --> 00:02:21,150
believe that being in a company you

00:02:18,390 --> 00:02:22,860
can't really build a good DevOps tool

00:02:21,150 --> 00:02:24,750
because it doesn't align most of the

00:02:22,860 --> 00:02:27,299
time with what your business wants so

00:02:24,750 --> 00:02:29,190
you build a duct-tape solution and you

00:02:27,299 --> 00:02:31,919
might open source that but you don't

00:02:29,190 --> 00:02:33,810
really make it as general or as

00:02:31,919 --> 00:02:35,970
applicable to the indus

00:02:33,810 --> 00:02:38,160
as you can so instead I like to go

00:02:35,970 --> 00:02:39,420
around and see what people are doing see

00:02:38,160 --> 00:02:41,849
how they're solving problems and maybe

00:02:39,420 --> 00:02:43,620
you know if I could get permission I use

00:02:41,849 --> 00:02:47,670
some of their inspiration to build open

00:02:43,620 --> 00:02:50,760
source tools to do the same thing and to

00:02:47,670 --> 00:02:52,950
date we have three tools three tools or

00:02:50,760 --> 00:02:54,900
pieces of software that are out there's

00:02:52,950 --> 00:02:57,300
vagrants which I'm sure most of you are

00:02:54,900 --> 00:02:59,010
familiar with a packer of which there's

00:02:57,300 --> 00:03:01,980
two or three talks at this conference

00:02:59,010 --> 00:03:03,450
about and there's surf which I'll be

00:03:01,980 --> 00:03:04,950
spending the most time probably talking

00:03:03,450 --> 00:03:07,140
about today mostly because the other two

00:03:04,950 --> 00:03:09,810
there is a dedicated vagrant talk today

00:03:07,140 --> 00:03:12,299
and there's a talk about Packers so i'll

00:03:09,810 --> 00:03:13,590
talk about surf and there's a couple

00:03:12,299 --> 00:03:17,120
more coming out in the next couple

00:03:13,590 --> 00:03:19,920
months okay so i'm going to start out

00:03:17,120 --> 00:03:23,880
general and kind of move to more

00:03:19,920 --> 00:03:26,040
specific and more technical and so let's

00:03:23,880 --> 00:03:28,110
start with the application lifecycle and

00:03:26,040 --> 00:03:31,019
i kind of want to describe what the

00:03:28,110 --> 00:03:33,209
application lifecycle is and what

00:03:31,019 --> 00:03:35,099
problems are with this process of

00:03:33,209 --> 00:03:37,470
getting an application from development

00:03:35,099 --> 00:03:40,980
to production and how kind of DevOps

00:03:37,470 --> 00:03:43,769
comes in here to solve these problems so

00:03:40,980 --> 00:03:46,290
i split this down into three categories

00:03:43,769 --> 00:03:48,900
and sometimes in certain companies three

00:03:46,290 --> 00:03:51,390
silos and i just kind of go left to

00:03:48,900 --> 00:03:53,970
right and sand and we'll see what we get

00:03:51,390 --> 00:03:55,500
so the first kind of category i talked

00:03:53,970 --> 00:03:59,790
about as development that's really where

00:03:55,500 --> 00:04:00,959
the the process starts and and this is

00:03:59,790 --> 00:04:03,030
kind of the fun part because it's the

00:04:00,959 --> 00:04:04,859
part the part where things matter the

00:04:03,030 --> 00:04:07,170
least you could use whatever you want

00:04:04,859 --> 00:04:09,299
you could be as unscalable as you want

00:04:07,170 --> 00:04:11,430
you could be backwards and compatible it

00:04:09,299 --> 00:04:13,049
doesn't really matter but there are

00:04:11,430 --> 00:04:14,489
certain traits that are important to

00:04:13,049 --> 00:04:17,190
development environments in order to be

00:04:14,489 --> 00:04:20,729
productive and to be happy kind of

00:04:17,190 --> 00:04:21,900
working so some for things that you kind

00:04:20,729 --> 00:04:25,590
of want to develop an environment you

00:04:21,900 --> 00:04:26,940
want them to be readily available so you

00:04:25,590 --> 00:04:31,280
know whether you're working at the cafe

00:04:26,940 --> 00:04:33,210
or an office or you know on a plane or

00:04:31,280 --> 00:04:34,979
you're on vacation you need to access

00:04:33,210 --> 00:04:36,510
your computer you want to be able to

00:04:34,979 --> 00:04:37,650
work on things and when I say readily

00:04:36,510 --> 00:04:39,990
available i don't mean there has to be

00:04:37,650 --> 00:04:42,090
offline there's a lot of web ids coming

00:04:39,990 --> 00:04:43,200
out and stuff which are pretty cool but

00:04:42,090 --> 00:04:45,289
I just mean that you need to be able to

00:04:43,200 --> 00:04:49,909
access it without

00:04:45,289 --> 00:04:51,680
a lot of effort another tray you want us

00:04:49,909 --> 00:04:54,139
to be able to make changes and see those

00:04:51,680 --> 00:04:55,819
changes so this is kind of the Golden

00:04:54,139 --> 00:04:58,159
Circle of what you want to achieve in a

00:04:55,819 --> 00:04:59,599
development environment you want to code

00:04:58,159 --> 00:05:01,339
something you want to save it and you

00:04:59,599 --> 00:05:02,869
want to reload the page reload you know

00:05:01,339 --> 00:05:05,899
an iphone app or something and see the

00:05:02,869 --> 00:05:09,949
change and this is something that PHP

00:05:05,899 --> 00:05:13,189
got really really right very very few

00:05:09,949 --> 00:05:14,300
things but this is good but this is

00:05:13,189 --> 00:05:16,539
really what you want to head towards and

00:05:14,300 --> 00:05:18,439
it's really hard to do with things like

00:05:16,539 --> 00:05:20,839
sometimes it's harder to do this with

00:05:18,439 --> 00:05:23,180
Ruby sometimes it's very hard to do this

00:05:20,839 --> 00:05:24,229
with mobile applications but if you

00:05:23,180 --> 00:05:28,430
could head towards this direction this

00:05:24,229 --> 00:05:30,709
is where you want to get and you want

00:05:28,430 --> 00:05:34,159
consistency so consistency is really

00:05:30,709 --> 00:05:35,419
well described with this this comic here

00:05:34,159 --> 00:05:36,619
and the basic thing you wanted

00:05:35,419 --> 00:05:38,629
consistencies you want to avoid this

00:05:36,619 --> 00:05:40,159
problem which is that something works on

00:05:38,629 --> 00:05:42,020
your computer and something doesn't work

00:05:40,159 --> 00:05:44,599
on someone else's computer or something

00:05:42,020 --> 00:05:46,879
works on your computer but that doesn't

00:05:44,599 --> 00:05:48,589
work in production and you really want

00:05:46,879 --> 00:05:50,059
to avoid this because this is this

00:05:48,589 --> 00:05:54,080
problem is there's a huge waste of time

00:05:50,059 --> 00:05:58,009
because for example using these bare

00:05:54,080 --> 00:05:59,659
bird things if this happened it could be

00:05:58,009 --> 00:06:01,519
the birds fault or could be the Bears

00:05:59,659 --> 00:06:03,199
fault you don't really know you don't

00:06:01,519 --> 00:06:05,629
really want to point blame so then these

00:06:03,199 --> 00:06:07,159
two expensive engineers end up spinning

00:06:05,629 --> 00:06:08,300
their wheels for an hour trying to

00:06:07,159 --> 00:06:10,099
figure out whose problem it really is

00:06:08,300 --> 00:06:12,469
and then at the end of it at the end of

00:06:10,099 --> 00:06:13,279
it they get it working but that problem

00:06:12,469 --> 00:06:17,689
really shouldn't have existed in the

00:06:13,279 --> 00:06:19,159
first place and then you want on some

00:06:17,689 --> 00:06:21,919
degree a level of collaboration and

00:06:19,159 --> 00:06:23,749
sharing so even though programming a lot

00:06:21,919 --> 00:06:25,759
of times is a pretty solitary thing or

00:06:23,749 --> 00:06:28,699
sometimes your pair programming but then

00:06:25,759 --> 00:06:30,259
it's solitary to two people you know at

00:06:28,699 --> 00:06:31,550
least once a week or once a month or

00:06:30,259 --> 00:06:32,899
something hopefully more than once a

00:06:31,550 --> 00:06:34,099
month you want to share what you're

00:06:32,899 --> 00:06:36,319
working on and show people what you're

00:06:34,099 --> 00:06:37,610
working on maybe get help from others so

00:06:36,319 --> 00:06:39,229
there's some more of a collaboration and

00:06:37,610 --> 00:06:43,219
development environment and you want to

00:06:39,229 --> 00:06:45,860
make this as easy as possible so just as

00:06:43,219 --> 00:06:47,089
a summary slide here's four traits i

00:06:45,860 --> 00:06:48,759
found just over the years that people

00:06:47,089 --> 00:06:52,339
really want a development environment

00:06:48,759 --> 00:06:54,019
and want to head towards and so that's

00:06:52,339 --> 00:06:56,569
the development aspect of application

00:06:54,019 --> 00:06:58,480
the application lifecycle and then we're

00:06:56,569 --> 00:07:01,930
going to head to deployment

00:06:58,480 --> 00:07:04,030
so deployment is really just after

00:07:01,930 --> 00:07:05,590
development has to run somewhere and so

00:07:04,030 --> 00:07:07,630
for the purpose of this talk that

00:07:05,590 --> 00:07:09,700
somewhere could be a test cluster stage

00:07:07,630 --> 00:07:11,230
and cluster or production it doesn't

00:07:09,700 --> 00:07:12,730
really matter that's all form of

00:07:11,230 --> 00:07:15,790
deployments really from development to

00:07:12,730 --> 00:07:19,240
something more real and this is a really

00:07:15,790 --> 00:07:20,860
important step and also a huge pain so

00:07:19,240 --> 00:07:25,090
there's two you can break this down kind

00:07:20,860 --> 00:07:27,070
of into two different phases so to speak

00:07:25,090 --> 00:07:29,650
but the end goal of both is really to

00:07:27,070 --> 00:07:32,620
deploy something so the first phase

00:07:29,650 --> 00:07:34,480
there's the start configure server part

00:07:32,620 --> 00:07:35,950
and if you've never seen this picture

00:07:34,480 --> 00:07:37,210
that's Google's data center but I think

00:07:35,950 --> 00:07:40,300
it's like two years old so I think

00:07:37,210 --> 00:07:42,190
everyone's seen it by now but in this

00:07:40,300 --> 00:07:44,050
phase basically you want to run a server

00:07:42,190 --> 00:07:45,340
somewhere you have to even if you're

00:07:44,050 --> 00:07:48,100
using something like karoku you know

00:07:45,340 --> 00:07:49,300
someone started a server somewhere and

00:07:48,100 --> 00:07:51,250
then you want to install some sort of

00:07:49,300 --> 00:07:53,260
base software or base layer of

00:07:51,250 --> 00:07:55,510
configuration in order to run the

00:07:53,260 --> 00:07:57,130
application and then finally I want to

00:07:55,510 --> 00:07:58,690
deploy and run the application so this

00:07:57,130 --> 00:08:00,790
might be broken down in the series of

00:07:58,690 --> 00:08:04,930
steps to there's maybe a compilation

00:08:00,790 --> 00:08:08,200
step java ruby has one now with like

00:08:04,930 --> 00:08:10,750
node for some reason you want to get

00:08:08,200 --> 00:08:12,910
that thing on the server you want to

00:08:10,750 --> 00:08:16,060
start it and then hopefully as a second

00:08:12,910 --> 00:08:18,760
step you want to make it live or to poke

00:08:16,060 --> 00:08:27,220
more fun at PHP this could all be one

00:08:18,760 --> 00:08:28,600
step whatever works man but yeah so you

00:08:27,220 --> 00:08:30,850
you want these steps to kind of break

00:08:28,600 --> 00:08:32,979
down and that's really deployment phase

00:08:30,850 --> 00:08:34,900
and it's deceptive because it's really

00:08:32,979 --> 00:08:38,130
easy to define the problems and yet

00:08:34,900 --> 00:08:40,270
really difficult to solve solve them I

00:08:38,130 --> 00:08:42,970
still haven't been in a company where

00:08:40,270 --> 00:08:44,380
deployment has been easy Heroku makes

00:08:42,970 --> 00:08:45,790
things easy to a certain extent I'm

00:08:44,380 --> 00:08:48,010
hoping you know docker makes things a

00:08:45,790 --> 00:08:53,170
lot easier in this regards but it's

00:08:48,010 --> 00:08:55,060
still today a huge pain okay and then

00:08:53,170 --> 00:08:57,730
finally there's maintenance the least

00:08:55,060 --> 00:08:59,320
fun the most boring and in the

00:08:57,730 --> 00:09:01,030
maintenance phase the primary goal is

00:08:59,320 --> 00:09:02,380
that everything just has to keep running

00:09:01,030 --> 00:09:04,660
but everything has to keep running while

00:09:02,380 --> 00:09:06,550
things are also changing which are which

00:09:04,660 --> 00:09:09,340
is a little bit of a crazy request but

00:09:06,550 --> 00:09:11,290
that's what we have to do so this

00:09:09,340 --> 00:09:12,220
involves a few things of course there's

00:09:11,290 --> 00:09:15,010
monitoring

00:09:12,220 --> 00:09:16,990
and monitoring is all about anticipating

00:09:15,010 --> 00:09:19,650
problems and reacting to them before

00:09:16,990 --> 00:09:22,950
they hopefully become actual problems

00:09:19,650 --> 00:09:25,780
but sometimes this sort of thing happens

00:09:22,950 --> 00:09:27,490
there's the updating side of things and

00:09:25,780 --> 00:09:30,220
when you're updating there's two aspects

00:09:27,490 --> 00:09:31,510
to this to you need to update obstacle

00:09:30,220 --> 00:09:32,800
want to update servers they want to

00:09:31,510 --> 00:09:34,540
update you know they want to apply

00:09:32,800 --> 00:09:36,730
security patches they want to change the

00:09:34,540 --> 00:09:38,530
OS sometimes they want to update

00:09:36,730 --> 00:09:40,780
software and then there's the

00:09:38,530 --> 00:09:42,610
application side where developers want

00:09:40,780 --> 00:09:45,010
to deploy changes to the application and

00:09:42,610 --> 00:09:48,850
those are sometimes at odds but they

00:09:45,010 --> 00:09:51,640
both need to happen and then there's

00:09:48,850 --> 00:09:53,380
orchestrating and this is kind of a very

00:09:51,640 --> 00:09:55,030
overloaded term a lot of people use

00:09:53,380 --> 00:09:56,800
orchestrating a lot so I'm going to just

00:09:55,030 --> 00:09:58,000
define a little bit more by

00:09:56,800 --> 00:09:59,890
orchestrating I mean you want to be able

00:09:58,000 --> 00:10:01,720
to do something like this you want to be

00:09:59,890 --> 00:10:04,000
able to look kind of the state of an

00:10:01,720 --> 00:10:06,640
entire infrastructure or a set of a set

00:10:04,000 --> 00:10:08,320
of multiple servers you want to make

00:10:06,640 --> 00:10:11,500
some decision and then affect the entire

00:10:08,320 --> 00:10:13,510
infrastructure and so this you know kind

00:10:11,500 --> 00:10:14,830
of transcends just one shell script

00:10:13,510 --> 00:10:17,050
because you can't write a cell shell

00:10:14,830 --> 00:10:18,250
script and run it on one server I expect

00:10:17,050 --> 00:10:20,980
to do these sorts of things you need

00:10:18,250 --> 00:10:25,030
some sort of outside orchestration of

00:10:20,980 --> 00:10:28,390
sorts and that really breaks down

00:10:25,030 --> 00:10:33,820
maintenance which is also three bullet

00:10:28,390 --> 00:10:36,520
points but infinite pain so that really

00:10:33,820 --> 00:10:37,390
defines these these three categories and

00:10:36,520 --> 00:10:38,710
really defines what I call the

00:10:37,390 --> 00:10:41,260
application lifecycle and what's

00:10:38,710 --> 00:10:43,180
interesting is I broken it down to this

00:10:41,260 --> 00:10:47,440
and then if you think about it this

00:10:43,180 --> 00:10:49,810
these problems or goals and categories

00:10:47,440 --> 00:10:51,760
really apply to pretty much every

00:10:49,810 --> 00:10:54,760
application in existence no matter what

00:10:51,760 --> 00:10:56,860
tooling you use so whether you're

00:10:54,760 --> 00:10:58,860
developing a desktop application or web

00:10:56,860 --> 00:11:01,240
application or mobile application

00:10:58,860 --> 00:11:02,650
there's some sort of operations involved

00:11:01,240 --> 00:11:04,240
in some sort of process involved and

00:11:02,650 --> 00:11:06,010
this kind of generalizes that pretty

00:11:04,240 --> 00:11:09,330
well you know if you're using something

00:11:06,010 --> 00:11:11,770
like Heroku do you still have these

00:11:09,330 --> 00:11:13,120
issues except to Roku just tries to get

00:11:11,770 --> 00:11:15,250
rid of you have the second two columns

00:11:13,120 --> 00:11:18,670
for you but there's still their problems

00:11:15,250 --> 00:11:19,780
so they exist and so why this is still

00:11:18,670 --> 00:11:22,300
important so why is this poor why am I

00:11:19,780 --> 00:11:23,710
even telling you this this important

00:11:22,300 --> 00:11:26,050
understand DevOps a little bit more and

00:11:23,710 --> 00:11:27,970
so DevOps is not on what is DevOps

00:11:26,050 --> 00:11:29,800
by the way but DevOps you know of course

00:11:27,970 --> 00:11:31,810
has cultural and technical components

00:11:29,800 --> 00:11:33,040
I'm going to pretend the cultural ones

00:11:31,810 --> 00:11:35,560
don't exist because on a day-to-day

00:11:33,040 --> 00:11:37,420
basis this is not what I do I work on a

00:11:35,560 --> 00:11:38,560
technical side of things so we're just

00:11:37,420 --> 00:11:40,480
gonna be talking about the technical

00:11:38,560 --> 00:11:42,490
side so not to say the cultural side

00:11:40,480 --> 00:11:45,339
isn't important but I'm not going to

00:11:42,490 --> 00:11:48,820
talk about it but the goal of DevOps is

00:11:45,339 --> 00:11:51,760
to make that application lifecycle more

00:11:48,820 --> 00:11:52,779
efficient you know you people could say

00:11:51,760 --> 00:11:54,550
a lot of things about them up so they

00:11:52,779 --> 00:11:57,279
could say they could make up some

00:11:54,550 --> 00:11:59,320
harmonious you know holding hands sort

00:11:57,279 --> 00:12:00,790
of definition for it or you could say

00:11:59,320 --> 00:12:02,829
that devs are actually doing ops

00:12:00,790 --> 00:12:04,480
themselves or something like that but

00:12:02,829 --> 00:12:08,290
really everywhere I've seen DevOps in

00:12:04,480 --> 00:12:09,970
place the pragmatic real goal for

00:12:08,290 --> 00:12:11,740
everyone that's aligned is just to make

00:12:09,970 --> 00:12:13,930
that application lifecycle more

00:12:11,740 --> 00:12:15,760
efficient so developers want to get

00:12:13,930 --> 00:12:17,490
things through to you know the

00:12:15,760 --> 00:12:19,240
maintenance phase to deploy faster

00:12:17,490 --> 00:12:22,240
obstacle want to be able to do

00:12:19,240 --> 00:12:24,370
maintenance easier business people also

00:12:22,240 --> 00:12:27,100
want it the application got faster

00:12:24,370 --> 00:12:29,019
because it perhaps means they'll make

00:12:27,100 --> 00:12:30,430
more money so everyone's goals are

00:12:29,019 --> 00:12:32,920
pretty well aligned and so it's really

00:12:30,430 --> 00:12:37,480
no surprise that DevOps is a buzzword

00:12:32,920 --> 00:12:39,089
really succeeded but how do we make this

00:12:37,480 --> 00:12:41,860
application lifecycle more efficient

00:12:39,089 --> 00:12:43,899
it's the same way humans have been

00:12:41,860 --> 00:12:47,500
making things more efficient forever and

00:12:43,899 --> 00:12:51,459
that's tools so tools basically you know

00:12:47,500 --> 00:12:52,810
we do something crappy one time or we

00:12:51,459 --> 00:12:54,640
duct-taped something together one time

00:12:52,810 --> 00:12:57,790
and we learn about it and we kind of

00:12:54,640 --> 00:13:00,459
enhance and refine that process until we

00:12:57,790 --> 00:13:03,550
could get it into a form that is a tool

00:13:00,459 --> 00:13:06,550
and these tools you know reduce human

00:13:03,550 --> 00:13:08,440
error where humans even though if even

00:13:06,550 --> 00:13:10,529
if we do something a hundred times 100

00:13:08,440 --> 00:13:14,050
first time we might mess up it happens

00:13:10,529 --> 00:13:15,910
increases repeatability because well

00:13:14,050 --> 00:13:17,680
increase the repeatability because the

00:13:15,910 --> 00:13:19,180
knowledge is codified and that's the

00:13:17,680 --> 00:13:22,300
most important step is the codification

00:13:19,180 --> 00:13:27,459
of knowledge because if you think about

00:13:22,300 --> 00:13:28,720
it for example tools get rid of once you

00:13:27,459 --> 00:13:30,790
use a tool you don't need to know how it

00:13:28,720 --> 00:13:32,019
works beneath that tool some people

00:13:30,790 --> 00:13:34,540
might say you know you should understand

00:13:32,019 --> 00:13:35,920
how everything works but with tools that

00:13:34,540 --> 00:13:37,899
simply isn't necessary and it's not

00:13:35,920 --> 00:13:40,120
necessarily a bad thing either because

00:13:37,899 --> 00:13:42,490
for example let's think about

00:13:40,120 --> 00:13:44,170
compilers or something compilers are a

00:13:42,490 --> 00:13:47,170
tool so that we could build things

00:13:44,170 --> 00:13:50,890
faster do most people know how compilers

00:13:47,170 --> 00:13:53,080
are you know making a lexical pass or

00:13:50,890 --> 00:13:55,000
semantic analysis or how that's turning

00:13:53,080 --> 00:13:57,339
into an AST that's turning down into

00:13:55,000 --> 00:13:59,080
assembly or some sort of bytecode know

00:13:57,339 --> 00:14:01,110
like most people don't know and it's

00:13:59,080 --> 00:14:04,180
really not important in the general case

00:14:01,110 --> 00:14:06,250
it's the same thing with tools tools

00:14:04,180 --> 00:14:08,740
make it so that for example there's

00:14:06,250 --> 00:14:10,570
something like vagrant for for the

00:14:08,740 --> 00:14:12,220
person who sets up vagrant yes perhaps I

00:14:10,570 --> 00:14:14,170
need to understand how the servers

00:14:12,220 --> 00:14:16,900
worked or how software gets installed to

00:14:14,170 --> 00:14:18,760
set up a Drupal development environment

00:14:16,900 --> 00:14:21,430
but when you then deploy that to your

00:14:18,760 --> 00:14:22,990
company of 200 Drupal developers they

00:14:21,430 --> 00:14:24,730
don't know how that was set up and it

00:14:22,990 --> 00:14:26,320
doesn't matter to them but now you have

00:14:24,730 --> 00:14:28,540
this tool that they could then teach to

00:14:26,320 --> 00:14:30,520
other people and it lets them focus on

00:14:28,540 --> 00:14:33,580
the higher-level things new problems

00:14:30,520 --> 00:14:38,500
pretty much so tools kind of push us

00:14:33,580 --> 00:14:41,800
forward and so DevOps tools have to

00:14:38,500 --> 00:14:46,180
solve something one or more things in

00:14:41,800 --> 00:14:49,360
this application lifecycle so just like

00:14:46,180 --> 00:14:51,310
this hammer in the background here just

00:14:49,360 --> 00:14:52,510
like there's a hammer you basically need

00:14:51,310 --> 00:14:54,790
more than a hammer to build a whole

00:14:52,510 --> 00:14:58,230
house so there's a lot of tools out

00:14:54,790 --> 00:15:01,570
there that solve a lot of problems yeah

00:14:58,230 --> 00:15:03,190
and so it gets a little confusing

00:15:01,570 --> 00:15:05,890
because these tools are sometimes

00:15:03,190 --> 00:15:08,709
ambiguous and that's okay you know that

00:15:05,890 --> 00:15:10,930
this in that in that chart sometimes

00:15:08,709 --> 00:15:12,940
tools saw more than one problem like for

00:15:10,930 --> 00:15:15,910
example if you think of Heroku as a tool

00:15:12,940 --> 00:15:18,010
it gets rid of two entire categories and

00:15:15,910 --> 00:15:20,170
and that's totally okay she's the matter

00:15:18,010 --> 00:15:21,580
of understanding where the tool wise and

00:15:20,170 --> 00:15:23,890
understanding this really helps you

00:15:21,580 --> 00:15:28,720
figure out what tools you need and where

00:15:23,890 --> 00:15:30,010
they belong in your organization okay so

00:15:28,720 --> 00:15:31,510
we're done talking about general things

00:15:30,010 --> 00:15:33,220
and now we're going to kind of do a

00:15:31,510 --> 00:15:36,520
little tour of tools on technical side

00:15:33,220 --> 00:15:38,980
of things and I'll mention a lot of

00:15:36,520 --> 00:15:41,339
things I'll only focus on things that I

00:15:38,980 --> 00:15:45,100
work on because I'm allowed to do that

00:15:41,339 --> 00:15:46,810
but I'm going to kind of go lighter than

00:15:45,100 --> 00:15:49,150
normal on talking about vagrant and

00:15:46,810 --> 00:15:50,920
packer because there's talks about it

00:15:49,150 --> 00:15:53,529
here and I don't want to steal their

00:15:50,920 --> 00:15:57,249
thunder and I also don't have a su

00:15:53,529 --> 00:15:58,899
per amount of time and I'm going to go

00:15:57,249 --> 00:16:00,660
in order so I'm going to go from left to

00:15:58,899 --> 00:16:02,589
right and i'm going to go an order here

00:16:00,660 --> 00:16:06,009
so let's start with development

00:16:02,589 --> 00:16:08,499
development perhaps is no surprise is

00:16:06,009 --> 00:16:10,899
pretty synonymous right now with vagrant

00:16:08,499 --> 00:16:13,449
so let's talk a little bit about vagrant

00:16:10,899 --> 00:16:14,949
i think most of you probably know i hope

00:16:13,449 --> 00:16:17,709
most of you know I hope we're past that

00:16:14,949 --> 00:16:19,149
point but if you don't you know I'll

00:16:17,709 --> 00:16:21,189
describe the basic workflow or a

00:16:19,149 --> 00:16:24,040
high-level idea of what vagrant is you

00:16:21,189 --> 00:16:26,170
know the idea of vagrant is that if you

00:16:24,040 --> 00:16:28,480
adopt it within your company anyone in

00:16:26,170 --> 00:16:30,910
your company can clone any repository

00:16:28,480 --> 00:16:33,790
that was built at hopefully any point in

00:16:30,910 --> 00:16:35,889
time using any sort of technology you

00:16:33,790 --> 00:16:38,230
know whether it was a huge java

00:16:35,889 --> 00:16:43,420
application you know 15 years ago or

00:16:38,230 --> 00:16:45,370
pearl or nowadays perhaps it's node you

00:16:43,420 --> 00:16:46,839
know God forbid or something but you

00:16:45,370 --> 00:16:49,180
know you clone it out and then you run

00:16:46,839 --> 00:16:50,709
favorite up and you're ready to work no

00:16:49,180 --> 00:16:52,509
matter what the technology is and the

00:16:50,709 --> 00:16:54,220
the workflow is the same in the process

00:16:52,509 --> 00:16:55,870
the same and is therefore you know

00:16:54,220 --> 00:16:59,769
teachable to people and repeatable and

00:16:55,870 --> 00:17:01,569
so on and within that that development

00:16:59,769 --> 00:17:04,720
category i mentioned four problems and

00:17:01,569 --> 00:17:07,059
or four goals and how bigger'n kind of

00:17:04,720 --> 00:17:11,260
attacks these on the readily available

00:17:07,059 --> 00:17:14,350
side vagrant works with any sort of kind

00:17:11,260 --> 00:17:16,449
of technology to run code it can so

00:17:14,350 --> 00:17:19,240
there's virtualization providers such as

00:17:16,449 --> 00:17:22,899
virtual locks VMware and recently

00:17:19,240 --> 00:17:25,260
hyper-v and on the more cloudy side

00:17:22,899 --> 00:17:28,840
there's a WS things like digital ocean

00:17:25,260 --> 00:17:32,230
and as soon as Microsoft legal check

00:17:28,840 --> 00:17:34,240
stuff on it windows azure and the idea

00:17:32,230 --> 00:17:36,429
here is that you know you use what's

00:17:34,240 --> 00:17:37,929
best for you and we make it pretty

00:17:36,429 --> 00:17:39,250
easily available in both cases in the

00:17:37,929 --> 00:17:41,260
virtualization case of course you just

00:17:39,250 --> 00:17:43,149
need a computer that can run that and

00:17:41,260 --> 00:17:46,059
then the cloud case you just need an

00:17:43,149 --> 00:17:47,830
internet connection you want to be able

00:17:46,059 --> 00:17:50,320
to make and see changes so you want that

00:17:47,830 --> 00:17:52,659
golden circle the way vagrant sells this

00:17:50,320 --> 00:17:54,159
is it splits the concept between a host

00:17:52,659 --> 00:17:55,710
machine which is the thing running

00:17:54,159 --> 00:17:58,000
vagrant and the guest machine which is

00:17:55,710 --> 00:18:00,970
these thing running your code which

00:17:58,000 --> 00:18:03,700
could be again a vm or another computer

00:18:00,970 --> 00:18:05,890
or you know cloud thing and he uses a

00:18:03,700 --> 00:18:07,600
synced folder abstraction in order to

00:18:05,890 --> 00:18:09,910
usually get a biter

00:18:07,600 --> 00:18:11,080
you'll sink of files so am i use vm

00:18:09,910 --> 00:18:15,309
shared folders that they're available

00:18:11,080 --> 00:18:16,960
uses NFS if you choose to and then

00:18:15,309 --> 00:18:19,000
recently there's our sink which is

00:18:16,960 --> 00:18:21,130
currently one directional but soon will

00:18:19,000 --> 00:18:23,470
be bi-directional and then there's SMB

00:18:21,130 --> 00:18:25,660
which is also bidirectional so the idea

00:18:23,470 --> 00:18:27,100
though is that you as a developer really

00:18:25,660 --> 00:18:28,809
not to worry about how the files get

00:18:27,100 --> 00:18:33,190
there bayron just provides a mechanism

00:18:28,809 --> 00:18:35,770
to make sure they do get there then

00:18:33,190 --> 00:18:37,390
there's consistency and so the

00:18:35,770 --> 00:18:39,390
importance of consistency in vagrant is

00:18:37,390 --> 00:18:42,340
really in its in its

00:18:39,390 --> 00:18:44,620
compartmentalization in a virtual

00:18:42,340 --> 00:18:47,740
machine or some other sort of you know

00:18:44,620 --> 00:18:51,010
sandbox that runs on Windows Linux or

00:18:47,740 --> 00:18:52,240
Mac so whether you have someone who

00:18:51,010 --> 00:18:54,460
works as a Mac or whether you have the

00:18:52,240 --> 00:18:56,950
one person who refuses to even look at

00:18:54,460 --> 00:18:58,570
something other than Linux you could get

00:18:56,950 --> 00:19:00,940
them to work in a consistent development

00:18:58,570 --> 00:19:04,570
environment because it works identically

00:19:00,940 --> 00:19:06,490
on every on every platform and then

00:19:04,570 --> 00:19:08,590
recently on the sharing side the

00:19:06,490 --> 00:19:10,450
collaboration side we release this sort

00:19:08,590 --> 00:19:12,460
of feature vagrant shared vagrant

00:19:10,450 --> 00:19:14,080
Connect which if you don't know about

00:19:12,460 --> 00:19:15,760
basically if you have a vagrant of

00:19:14,080 --> 00:19:17,860
environment up and running you type

00:19:15,760 --> 00:19:19,960
vagrant share and hit enter and it will

00:19:17,860 --> 00:19:22,059
give you a URL that routes directly to

00:19:19,960 --> 00:19:23,320
your virtual machine through any nad or

00:19:22,059 --> 00:19:26,020
corporate firewall and stuff like that

00:19:23,320 --> 00:19:28,150
and vagrant connect will actually give

00:19:26,020 --> 00:19:30,549
you a static IP that you could pretend

00:19:28,150 --> 00:19:32,080
is on a local network and again any

00:19:30,549 --> 00:19:33,549
packets that are sent to the static IP

00:19:32,080 --> 00:19:37,150
actually route all the way through to a

00:19:33,549 --> 00:19:38,289
virtual machine so as an example the

00:19:37,150 --> 00:19:39,909
internet here is pretty good and

00:19:38,289 --> 00:19:41,980
assuming it's still running on my laptop

00:19:39,909 --> 00:19:44,860
and sleep or anything you should be able

00:19:41,980 --> 00:19:46,390
to go to this URL and it'll load up a

00:19:44,860 --> 00:19:48,520
directory listing and that directory

00:19:46,390 --> 00:19:51,880
listing is actually my virtual machine

00:19:48,520 --> 00:19:53,770
on this computer right now but you could

00:19:51,880 --> 00:19:57,730
do that with anything so that's kind of

00:19:53,770 --> 00:20:01,270
neat and this is super this was super

00:19:57,730 --> 00:20:02,409
important because it it just let people

00:20:01,270 --> 00:20:04,000
share their environment easier than

00:20:02,409 --> 00:20:06,610
others a lot of companies now with this

00:20:04,000 --> 00:20:07,750
or getting rid of a lot of you know they

00:20:06,610 --> 00:20:10,299
sell a staging area but they're getting

00:20:07,750 --> 00:20:12,010
rid of dozens of staging areas because

00:20:10,299 --> 00:20:14,770
developers no longer need to push to a

00:20:12,010 --> 00:20:16,059
staging area to collaborate on a pis or

00:20:14,770 --> 00:20:17,909
work with mobile clients or stuff like

00:20:16,059 --> 00:20:21,490
that they could just run the share thing

00:20:17,909 --> 00:20:24,100
and get a URL and work

00:20:21,490 --> 00:20:27,010
and so vagrant net score is just really

00:20:24,100 --> 00:20:29,650
a technology agnostic development

00:20:27,010 --> 00:20:31,059
environment builder that focuses on

00:20:29,650 --> 00:20:33,040
giving you a common workflow so the

00:20:31,059 --> 00:20:36,730
important part of vagrant is really the

00:20:33,040 --> 00:20:38,800
workflow much less the technology and so

00:20:36,730 --> 00:20:42,370
by technology agnostic I mean you know

00:20:38,800 --> 00:20:44,380
it runs on windows mac linux it could

00:20:42,370 --> 00:20:47,050
run Windows Mac or Linux virtual

00:20:44,380 --> 00:20:48,490
machines as well and then you know if

00:20:47,050 --> 00:20:50,830
you have things like darker within their

00:20:48,490 --> 00:20:52,270
it knows how to deal with those and and

00:20:50,830 --> 00:20:55,390
that integration is getting just a lot

00:20:52,270 --> 00:20:57,340
better every day and nowadays it's also

00:20:55,390 --> 00:20:59,140
pretty popular this slides actually from

00:20:57,340 --> 00:21:02,080
two years ago so it's a lot more popular

00:20:59,140 --> 00:21:03,640
nowadays which is pretty cool it's it's

00:21:02,080 --> 00:21:05,170
it's good to know because it's good to

00:21:03,640 --> 00:21:06,850
know that if you learn something or

00:21:05,170 --> 00:21:08,800
invest in something that it'll stick

00:21:06,850 --> 00:21:12,250
around and that it's well you know

00:21:08,800 --> 00:21:15,220
adopted and I'll leave the rest of the

00:21:12,250 --> 00:21:16,540
vagrant talk to pull who have never met

00:21:15,220 --> 00:21:20,650
but is here and is a committer on

00:21:16,540 --> 00:21:22,750
vagrants and then deployment so then on

00:21:20,650 --> 00:21:24,040
the deployment side I said it's

00:21:22,750 --> 00:21:26,110
complicated I'm going to talk about a

00:21:24,040 --> 00:21:28,630
packer just a little bit because again

00:21:26,110 --> 00:21:30,910
there's a talk there but the deployment

00:21:28,630 --> 00:21:34,120
sides really complicated so here's six

00:21:30,910 --> 00:21:36,309
things I could have listed 50 but

00:21:34,120 --> 00:21:38,380
there's a lot of a lot of tools that are

00:21:36,309 --> 00:21:40,059
in this space and if you break it down

00:21:38,380 --> 00:21:41,559
to the phases there's a couple lives you

00:21:40,059 --> 00:21:43,510
know the start configure server side a

00:21:41,559 --> 00:21:46,120
thing and then there's the deploying run

00:21:43,510 --> 00:21:48,280
software side of things and if you look

00:21:46,120 --> 00:21:52,090
there's like overlap there and which

00:21:48,280 --> 00:21:53,350
makes things more complicated and but

00:21:52,090 --> 00:21:54,520
I'm just going to focus on Packer a

00:21:53,350 --> 00:21:56,890
little bit which is on the start

00:21:54,520 --> 00:22:02,590
configure server side of things so

00:21:56,890 --> 00:22:05,200
Packer is almost a year old now and then

00:22:02,590 --> 00:22:06,550
that year is actually used quite a lot

00:22:05,200 --> 00:22:07,980
which is surprising to me I didn't

00:22:06,550 --> 00:22:10,960
expect it to be adopted that quickly

00:22:07,980 --> 00:22:12,370
because it took vagrant years but the

00:22:10,960 --> 00:22:14,890
idea of Packer is basically that it

00:22:12,370 --> 00:22:17,559
optimizes the slow parts of setting up a

00:22:14,890 --> 00:22:22,740
server by pre building those into an

00:22:17,559 --> 00:22:24,850
image and you might be thinking like you

00:22:22,740 --> 00:22:29,350
images especially we've been doing ops

00:22:24,850 --> 00:22:31,030
for a long time there's in modern DevOps

00:22:29,350 --> 00:22:34,000
practices there's kind of an anti image

00:22:31,030 --> 00:22:35,710
stigma and you know they've

00:22:34,000 --> 00:22:37,270
the devil's movement in the past few

00:22:35,710 --> 00:22:40,000
years has historically been against

00:22:37,270 --> 00:22:41,260
making machine images but it's kind of

00:22:40,000 --> 00:22:42,850
important understand why because there

00:22:41,260 --> 00:22:44,980
are good reasons was very good reasons

00:22:42,850 --> 00:22:47,530
and it's foreign to understand those in

00:22:44,980 --> 00:22:51,790
order to avoid those problems so I'm

00:22:47,530 --> 00:22:53,950
just going to talk about that so the

00:22:51,790 --> 00:22:56,890
with with images let me make sure I

00:22:53,950 --> 00:22:59,340
didn't make these slides ya know so if

00:22:56,890 --> 00:23:01,780
you were doing ops like 10 years ago

00:22:59,340 --> 00:23:05,620
images were pretty much the way things

00:23:01,780 --> 00:23:07,960
were done most of the time and this made

00:23:05,620 --> 00:23:11,970
a lot of sense it was the tooling wasn't

00:23:07,960 --> 00:23:15,580
very good you had stuff like CF Engine 2

00:23:11,970 --> 00:23:18,280
and some older technologies that were

00:23:15,580 --> 00:23:20,410
kind of just not very fun to use even

00:23:18,280 --> 00:23:22,510
though they got the job done so more

00:23:20,410 --> 00:23:24,670
people it was easier for people just to

00:23:22,510 --> 00:23:26,680
go in manually and set up a server and

00:23:24,670 --> 00:23:28,060
be done with it and so what end up

00:23:26,680 --> 00:23:31,270
happening was when he had more than one

00:23:28,060 --> 00:23:33,400
server handful of servers you'd go into

00:23:31,270 --> 00:23:34,660
the server set it up manually once it

00:23:33,400 --> 00:23:36,760
got to a state where is working pretty

00:23:34,660 --> 00:23:38,650
well you would just stamp it off and say

00:23:36,760 --> 00:23:40,180
like this is it this is perfect and you

00:23:38,650 --> 00:23:43,090
would save a disk image and that would

00:23:40,180 --> 00:23:45,940
become your your golden image because it

00:23:43,090 --> 00:23:47,560
was gold you set it up and you would

00:23:45,940 --> 00:23:49,360
generally use that for the next like

00:23:47,560 --> 00:23:50,680
business quarter a business quarter was

00:23:49,360 --> 00:23:52,060
like a safe period of time to use

00:23:50,680 --> 00:23:53,950
something because you're pretty

00:23:52,060 --> 00:23:56,890
confident that that image wouldn't mess

00:23:53,950 --> 00:23:58,960
up you know earnings or have downtime

00:23:56,890 --> 00:24:01,570
during that quarter that was though that

00:23:58,960 --> 00:24:03,730
was the hope and this is pretty

00:24:01,570 --> 00:24:05,080
frustrating because as an office person

00:24:03,730 --> 00:24:07,240
you can't really get changes in there

00:24:05,080 --> 00:24:08,590
unless they're critical as an

00:24:07,240 --> 00:24:10,570
application developer if you have new

00:24:08,590 --> 00:24:12,580
dependencies or you need changes to the

00:24:10,570 --> 00:24:14,500
environment to run new features you

00:24:12,580 --> 00:24:16,840
couldn't get those in there frustrating

00:24:14,500 --> 00:24:20,560
again really hindering like ability to

00:24:16,840 --> 00:24:22,240
ship and so what ended up happening is

00:24:20,560 --> 00:24:24,940
you know modern configuration management

00:24:22,240 --> 00:24:27,220
came around and it became easy to simply

00:24:24,940 --> 00:24:29,650
ignore images you got these kind of

00:24:27,220 --> 00:24:31,240
shadow ops deals happening where people

00:24:29,650 --> 00:24:33,210
were saying like okay screw it we'll

00:24:31,240 --> 00:24:35,290
just run our own servers and we'll use

00:24:33,210 --> 00:24:37,630
configuration management to spin it all

00:24:35,290 --> 00:24:38,980
up from scratch and we'll treat every

00:24:37,630 --> 00:24:40,690
server the same so we'll start with like

00:24:38,980 --> 00:24:43,240
a bear bunt to on every machine and

00:24:40,690 --> 00:24:44,860
we'll just run Chef and chef will turn

00:24:43,240 --> 00:24:47,380
that stem cell into whatever I want it

00:24:44,860 --> 00:24:48,610
to be and it'll be great and it

00:24:47,380 --> 00:24:51,670
it works really great and that's why

00:24:48,610 --> 00:24:53,440
people do it now and the problem is a

00:24:51,670 --> 00:24:55,660
machine image has also had a ton of

00:24:53,440 --> 00:25:00,150
benefits and we've pretty much lost

00:24:55,660 --> 00:25:02,170
those benefits by by ignoring them so

00:25:00,150 --> 00:25:03,880
one of the benefits of superfast

00:25:02,170 --> 00:25:05,800
infrastructure deployment so even in the

00:25:03,880 --> 00:25:07,180
simplest case a chef or puppet run for

00:25:05,800 --> 00:25:09,760
example something stateless like

00:25:07,180 --> 00:25:11,950
memcache or web server could still take

00:25:09,760 --> 00:25:13,240
with all the basic monitoring and stuff

00:25:11,950 --> 00:25:15,070
you lay down on a production server

00:25:13,240 --> 00:25:18,160
could still take you know five minutes

00:25:15,070 --> 00:25:21,280
maybe a more stateful server like a

00:25:18,160 --> 00:25:22,450
database or if you're pulling a web

00:25:21,280 --> 00:25:24,700
server that has a lot of dependencies

00:25:22,450 --> 00:25:26,280
could take 10 30 minutes I've seen

00:25:24,700 --> 00:25:28,510
longer than that that's a little crazy

00:25:26,280 --> 00:25:30,190
but it could take a long time with

00:25:28,510 --> 00:25:32,320
images if you have the slow parts baked

00:25:30,190 --> 00:25:34,480
in you just launched a server and that

00:25:32,320 --> 00:25:37,060
parts done there's just a little bit of

00:25:34,480 --> 00:25:39,250
orchestration to do after that and

00:25:37,060 --> 00:25:41,530
there's also stability and testability

00:25:39,250 --> 00:25:44,770
so right now the way we test chef and

00:25:41,530 --> 00:25:47,650
puppet is we run chef or puppet or any

00:25:44,770 --> 00:25:48,940
config management we you know in a CI we

00:25:47,650 --> 00:25:50,500
just run it against a new server and if

00:25:48,940 --> 00:25:51,550
it succeeds we assume it's always going

00:25:50,500 --> 00:25:55,150
to succeed and that's going to be good

00:25:51,550 --> 00:25:56,980
but the problem is that it's it's it's

00:25:55,150 --> 00:25:58,960
not safe against things like network

00:25:56,980 --> 00:26:00,940
changes you don't really know the ripple

00:25:58,960 --> 00:26:02,260
effect of chef and cookbook changes so

00:26:00,940 --> 00:26:05,200
if you say like yes the load balancer

00:26:02,260 --> 00:26:07,330
role succeeded three months ago it's

00:26:05,200 --> 00:26:08,260
super common three months later to try

00:26:07,330 --> 00:26:09,660
to swing up a load balancer and

00:26:08,260 --> 00:26:13,750
something fails for some silly reason

00:26:09,660 --> 00:26:15,250
and with images since most of the it

00:26:13,750 --> 00:26:18,760
basically minimizes the surface area

00:26:15,250 --> 00:26:22,540
where things could fail so so you don't

00:26:18,760 --> 00:26:24,640
have that anymore so basically Packer

00:26:22,540 --> 00:26:26,860
does is it takes the slow parts the

00:26:24,640 --> 00:26:29,170
building servers which are mostly this

00:26:26,860 --> 00:26:31,360
if you were to get rid of this servers

00:26:29,170 --> 00:26:33,430
actually set themselves up in less than

00:26:31,360 --> 00:26:35,950
a minute usually and it kind of just

00:26:33,430 --> 00:26:37,420
gets rid of those by redoing it so I'm

00:26:35,950 --> 00:26:38,560
actually going to skip these because I

00:26:37,420 --> 00:26:40,420
don't want to run on time but there's a

00:26:38,560 --> 00:26:43,150
packer talk later how it fits into the

00:26:40,420 --> 00:26:45,940
workflow it could build images for all

00:26:43,150 --> 00:26:51,430
these things and it could do it using

00:26:45,940 --> 00:26:52,450
these things okay so maintenance this is

00:26:51,430 --> 00:26:53,800
where it gets interesting because I get

00:26:52,450 --> 00:26:55,840
to talk about surf which is really fun

00:26:53,800 --> 00:26:58,330
to talk about so there's a lot of things

00:26:55,840 --> 00:27:00,100
in maintenance the category but the

00:26:58,330 --> 00:27:01,270
thing is you know log stash is really

00:27:00,100 --> 00:27:03,550
nothing to do with like CF

00:27:01,270 --> 00:27:04,780
and the reason there's lots of things is

00:27:03,550 --> 00:27:05,710
they have lots of different purposes

00:27:04,780 --> 00:27:07,990
they're solving lots of different

00:27:05,710 --> 00:27:09,640
problems but the interesting thing is

00:27:07,990 --> 00:27:12,100
all these things really have a common

00:27:09,640 --> 00:27:14,290
goal and that is really to be able to

00:27:12,100 --> 00:27:16,270
change things and move with some

00:27:14,290 --> 00:27:18,490
resiliency to failure to either avoid

00:27:16,270 --> 00:27:21,160
problems or anticipate problems to fix

00:27:18,490 --> 00:27:22,690
problems but really the end goal is can

00:27:21,160 --> 00:27:24,010
I shoot my software safely could I ship

00:27:22,690 --> 00:27:28,900
this update safely is everything going

00:27:24,010 --> 00:27:29,860
to be okay and one thing to help do this

00:27:28,900 --> 00:27:35,740
in which I'm going to talk about today

00:27:29,860 --> 00:27:39,970
is surf so surf the one sentence word

00:27:35,740 --> 00:27:42,880
buzzword packed description is this I'll

00:27:39,970 --> 00:27:45,820
let you read it I guess because I don't

00:27:42,880 --> 00:27:48,970
like to read it but even if you're super

00:27:45,820 --> 00:27:52,150
smart guy or girl and you read this

00:27:48,970 --> 00:27:54,900
usually the response at the end is what

00:27:52,150 --> 00:27:58,870
like what i read it but i still don't

00:27:54,900 --> 00:28:00,640
know anything so really the best way to

00:27:58,870 --> 00:28:02,410
think about it is that surf manages

00:28:00,640 --> 00:28:04,660
membership and let you know when

00:28:02,410 --> 00:28:07,690
membership changes when things join when

00:28:04,660 --> 00:28:10,390
things leave when things fail and what's

00:28:07,690 --> 00:28:12,340
funny is nowadays a lot of ops problems

00:28:10,390 --> 00:28:15,640
could actually be boiled down pretty

00:28:12,340 --> 00:28:18,250
nicely to membership problems and as an

00:28:15,640 --> 00:28:20,290
example the easiest example is a load

00:28:18,250 --> 00:28:22,420
balancer and web server so in this case

00:28:20,290 --> 00:28:23,890
for example if you want to take that web

00:28:22,420 --> 00:28:26,080
server out of the cluster let's say it's

00:28:23,890 --> 00:28:28,510
not failing you want to take it out how

00:28:26,080 --> 00:28:30,370
does the load balancer find out and this

00:28:28,510 --> 00:28:32,170
has an easy answer without surf which is

00:28:30,370 --> 00:28:33,910
my which is load balancers you'll have

00:28:32,170 --> 00:28:37,230
health checks the hell check will figure

00:28:33,910 --> 00:28:40,030
out it's down and just ignore it sure

00:28:37,230 --> 00:28:43,030
but that usually sometimes involves

00:28:40,030 --> 00:28:44,860
killing HTTP connections so how do we

00:28:43,030 --> 00:28:47,380
gracefully get it out of there how do we

00:28:44,860 --> 00:28:51,040
tell the load balancer I want to turn

00:28:47,380 --> 00:28:53,440
off you know web server too so finish

00:28:51,040 --> 00:28:55,840
any outstanding requests stop it and

00:28:53,440 --> 00:28:58,020
then turn it off again a lot of web

00:28:55,840 --> 00:29:00,370
servers have this so on the flip side

00:28:58,020 --> 00:29:02,140
what if we're adding a note how does the

00:29:00,370 --> 00:29:04,960
load balancer learn about the new node

00:29:02,140 --> 00:29:07,870
how does it discover that and that's

00:29:04,960 --> 00:29:09,460
really where surf comes in and you can

00:29:07,870 --> 00:29:12,610
think about this in terms of memcache

00:29:09,460 --> 00:29:15,070
clusters database clusters application

00:29:12,610 --> 00:29:18,399
configuration trying to know where

00:29:15,070 --> 00:29:21,639
postgres is for example and the way this

00:29:18,399 --> 00:29:24,159
works is every node runs every node runs

00:29:21,639 --> 00:29:25,450
a surf agent you register handlers with

00:29:24,159 --> 00:29:28,240
the survey jman which are any sort of

00:29:25,450 --> 00:29:30,340
shell scripts and this handlers actually

00:29:28,240 --> 00:29:31,779
execute the business logic which is

00:29:30,340 --> 00:29:35,019
things like add or remove a note from a

00:29:31,779 --> 00:29:36,759
load balancer and the events that are

00:29:35,019 --> 00:29:38,710
sent to the handler are things like

00:29:36,759 --> 00:29:41,710
someone joined the cluster someone left

00:29:38,710 --> 00:29:43,059
someone failed someone changed and then

00:29:41,710 --> 00:29:46,659
there's user events which are custom

00:29:43,059 --> 00:29:48,129
events which I'll talk about but how

00:29:46,659 --> 00:29:49,419
does surf work how to surf know these

00:29:48,129 --> 00:29:51,610
things how is it different from other

00:29:49,419 --> 00:29:55,419
solutions and this is where it gets kind

00:29:51,610 --> 00:29:59,590
of interesting so surf uses a gossip

00:29:55,419 --> 00:30:02,460
based membership cluster and for those

00:29:59,590 --> 00:30:05,169
who don't know what a gossip protocol is

00:30:02,460 --> 00:30:06,700
the best description or the best analogy

00:30:05,169 --> 00:30:08,440
I like to make is gossip based

00:30:06,700 --> 00:30:10,629
membership is a lot like what would

00:30:08,440 --> 00:30:12,580
happen in the real world if there was

00:30:10,629 --> 00:30:15,820
like a zombie apocalypse happening in

00:30:12,580 --> 00:30:17,470
Salt Lake City right now so if zombies

00:30:15,820 --> 00:30:19,480
were taking over salt lake right now and

00:30:17,470 --> 00:30:22,240
we're happily in here we would find out

00:30:19,480 --> 00:30:23,830
probably because someone there'd be loud

00:30:22,240 --> 00:30:26,289
noises someone would run in from the

00:30:23,830 --> 00:30:27,730
library and tell us and then we'd

00:30:26,289 --> 00:30:28,960
probably freak out and a lot of people

00:30:27,730 --> 00:30:30,309
here from Salt Lake's they'd probably

00:30:28,960 --> 00:30:33,279
call their family and tell them there's

00:30:30,309 --> 00:30:34,720
zombies in Salt Lake and they would be

00:30:33,279 --> 00:30:37,090
panic and but everyone would find out

00:30:34,720 --> 00:30:38,559
really really fast another examples

00:30:37,090 --> 00:30:40,539
Twitter you sell someone on Twitter they

00:30:38,559 --> 00:30:42,629
retweet it spreads out gossip aimer

00:30:40,539 --> 00:30:46,330
gossip based memberships the same way

00:30:42,629 --> 00:30:48,340
one node joins the cluster it tells one

00:30:46,330 --> 00:30:49,419
or more other nodes they tell one or

00:30:48,340 --> 00:30:51,700
more other nodes and eventually the

00:30:49,419 --> 00:30:52,690
whole cluster finds out and that

00:30:51,700 --> 00:30:54,100
eventually is kind of interesting

00:30:52,690 --> 00:30:57,250
because a lot of people think well that

00:30:54,100 --> 00:30:59,860
sounds expensive or slow it's actually

00:30:57,250 --> 00:31:01,809
very cheap and very fast so one of the

00:30:59,860 --> 00:31:04,419
biggest surf clusters that I know about

00:31:01,809 --> 00:31:08,320
right now is running four thousand

00:31:04,419 --> 00:31:10,149
machines in ec2 and in that four

00:31:08,320 --> 00:31:13,120
thousand node cluster when they add one

00:31:10,149 --> 00:31:15,309
node to the cluster it gossips assuming

00:31:13,120 --> 00:31:17,500
no network errors which is generally the

00:31:15,309 --> 00:31:19,179
case in ec2 I'm assuming no network

00:31:17,500 --> 00:31:21,789
errors it reaches out across the entire

00:31:19,179 --> 00:31:23,200
cluster and about 200 milliseconds so

00:31:21,789 --> 00:31:24,730
you add a node and within 200

00:31:23,200 --> 00:31:27,700
milliseconds every node knows it was

00:31:24,730 --> 00:31:28,570
added in their event handlers fired and

00:31:27,700 --> 00:31:31,840
that's pretty

00:31:28,570 --> 00:31:33,159
and it's pretty cheap too so on on the

00:31:31,840 --> 00:31:35,590
network bandwidth sort of thing it uses

00:31:33,159 --> 00:31:37,769
I think 700 kilobits per second so you

00:31:35,590 --> 00:31:39,909
don't even see it on your network graphs

00:31:37,769 --> 00:31:41,320
then on top of this gossip based

00:31:39,909 --> 00:31:43,600
membership there's failure detection

00:31:41,320 --> 00:31:45,850
built in so I'm just about out of time

00:31:43,600 --> 00:31:48,909
but I'll power through this so failure

00:31:45,850 --> 00:31:50,620
detection basically instead of doing a

00:31:48,909 --> 00:31:53,889
heartbeat which is kind of naive because

00:31:50,620 --> 00:31:57,309
heartbeats generally scale exponentially

00:31:53,889 --> 00:32:00,279
in terms of network traffic what surf

00:31:57,309 --> 00:32:01,659
does is it uses probability it's a very

00:32:00,279 --> 00:32:03,669
probabilistic tool so use this

00:32:01,659 --> 00:32:06,370
probability and the idea is that if I

00:32:03,669 --> 00:32:08,470
choose if every second I choose a random

00:32:06,370 --> 00:32:10,210
person to talk to and everyone chooses a

00:32:08,470 --> 00:32:11,710
random person to talk to then

00:32:10,210 --> 00:32:14,169
probabilistically we've checked

00:32:11,710 --> 00:32:16,210
everybody and so every second that's

00:32:14,169 --> 00:32:18,220
what surf does one node will choose a

00:32:16,210 --> 00:32:21,340
random member and it's thousands of

00:32:18,220 --> 00:32:23,289
nodes ask them are you alive basically

00:32:21,340 --> 00:32:25,779
do a ping in a knack and if it says I'm

00:32:23,289 --> 00:32:27,909
not alive then it's a little bit smarter

00:32:25,779 --> 00:32:30,220
it asks a few other random notes it

00:32:27,909 --> 00:32:32,409
chooses like three random notes and ask

00:32:30,220 --> 00:32:34,059
them do you can you talk to this person

00:32:32,409 --> 00:32:38,429
maybe I'm just having networking issues

00:32:34,059 --> 00:32:40,149
and if they say no then that node

00:32:38,429 --> 00:32:43,210
broadcasts across the entire cluster

00:32:40,149 --> 00:32:45,279
that he or she suspects there's no

00:32:43,210 --> 00:32:47,500
gender to computers but the computer

00:32:45,279 --> 00:32:50,049
says you know I suspect that this person

00:32:47,500 --> 00:32:51,399
is dead and that gives that red node a

00:32:50,049 --> 00:32:53,529
certain amount of time to receive that

00:32:51,399 --> 00:32:55,330
message and refute it and if the node

00:32:53,529 --> 00:32:57,429
doesn't refute it then it's actually

00:32:55,330 --> 00:32:59,129
dead so we take a very defensive

00:32:57,429 --> 00:33:01,330
approach the detecting of a note is dead

00:32:59,129 --> 00:33:02,980
which takes a little bit longer but

00:33:01,330 --> 00:33:05,830
again using the 4,000 node cluster and

00:33:02,980 --> 00:33:07,269
as an example if I were to just punch

00:33:05,830 --> 00:33:10,120
one of the servers in the face and it

00:33:07,269 --> 00:33:11,950
died the whole cluster would find out

00:33:10,120 --> 00:33:13,690
about a second it was pretty good and

00:33:11,950 --> 00:33:16,090
you could turn off a lot of those checks

00:33:13,690 --> 00:33:17,169
like don't suspect to them don't ask

00:33:16,090 --> 00:33:18,429
others if they're dead just assume

00:33:17,169 --> 00:33:21,700
they're dead and then you'll get the 200

00:33:18,429 --> 00:33:23,139
millisecond thing and then finally

00:33:21,700 --> 00:33:24,669
there's custom events so we have this

00:33:23,139 --> 00:33:26,200
gossip base layer and a way to

00:33:24,669 --> 00:33:28,720
communicate very efficiently among

00:33:26,200 --> 00:33:31,090
thousands of nodes very quickly but

00:33:28,720 --> 00:33:32,529
probabilistically and we expose

00:33:31,090 --> 00:33:34,059
something called custom events to do

00:33:32,529 --> 00:33:37,059
that so you could actually tell any node

00:33:34,059 --> 00:33:38,740
to say you know send the deploy event to

00:33:37,059 --> 00:33:40,029
the entire cluster and then the event

00:33:38,740 --> 00:33:41,799
handlers will be invoked and they could

00:33:40,029 --> 00:33:42,400
do things so a lot of people are using

00:33:41,799 --> 00:33:44,230
custom

00:33:42,400 --> 00:33:45,940
events for example to trigger shaffer

00:33:44,230 --> 00:33:48,490
puppet runs instead of writing them on a

00:33:45,940 --> 00:33:50,410
cron I update sheffer puppet and then I

00:33:48,490 --> 00:33:51,520
run an events and the latest version of

00:33:50,410 --> 00:33:54,400
surf that came out last week actually

00:33:51,520 --> 00:33:56,170
has a request response mechanism so you

00:33:54,400 --> 00:33:58,570
could you could send the event

00:33:56,170 --> 00:34:00,160
efficiently across the pool and say send

00:33:58,570 --> 00:34:01,450
me a knack when you finish running or

00:34:00,160 --> 00:34:03,130
that you got the message and you will

00:34:01,450 --> 00:34:04,360
start running and so that way you can

00:34:03,130 --> 00:34:07,930
kind of defeat the probabilistic nature

00:34:04,360 --> 00:34:09,460
by retrying basically fail they're

00:34:07,930 --> 00:34:11,460
targeting specific machines there's a

00:34:09,460 --> 00:34:13,990
whole query language to target machines

00:34:11,460 --> 00:34:16,750
and that's kind of what surf is there's

00:34:13,990 --> 00:34:18,190
I'll skip that but the result basically

00:34:16,750 --> 00:34:20,500
is when you build with a sort of thing

00:34:18,190 --> 00:34:22,540
in mind you build a huge resiliency to

00:34:20,500 --> 00:34:23,590
failure because you're expecting that

00:34:22,540 --> 00:34:25,870
your application can learn about

00:34:23,590 --> 00:34:28,330
failures or joins and membership in

00:34:25,870 --> 00:34:30,399
milliseconds and that change allows

00:34:28,330 --> 00:34:34,030
adaptation so it's really just a mindset

00:34:30,399 --> 00:34:35,770
sort of thing and we're working a little

00:34:34,030 --> 00:34:37,870
something we're really focused on this

00:34:35,770 --> 00:34:39,550
sort of orchestration aspect right now

00:34:37,870 --> 00:34:41,409
in terms of tooling so we're working on

00:34:39,550 --> 00:34:43,659
a little bit more and so just to tease

00:34:41,409 --> 00:34:46,030
you this is just the logo of something

00:34:43,659 --> 00:34:49,000
else we have coming out at about two

00:34:46,030 --> 00:34:55,090
weeks you could try to guess it starts

00:34:49,000 --> 00:34:57,070
with c ya okay so amount of time so

00:34:55,090 --> 00:34:58,450
we're going to sew the point earlier

00:34:57,070 --> 00:34:59,950
this talk is that deadmau5 moves really

00:34:58,450 --> 00:35:01,510
really fast and there's a lot of tools

00:34:59,950 --> 00:35:02,530
coming out now and they're really

00:35:01,510 --> 00:35:05,080
interesting they're all really

00:35:02,530 --> 00:35:06,700
interesting but sometimes especially

00:35:05,080 --> 00:35:10,000
don't work in ops all the time it's

00:35:06,700 --> 00:35:11,380
pretty confusing of where they apply but

00:35:10,000 --> 00:35:13,720
the good news is that there's a really

00:35:11,380 --> 00:35:15,310
clear problem set of of what these

00:35:13,720 --> 00:35:16,810
DevOps will solve and it has to be

00:35:15,310 --> 00:35:19,180
somewhere in here has to be one or more

00:35:16,810 --> 00:35:21,340
things in here and if you really you

00:35:19,180 --> 00:35:23,020
know print this thing out or something

00:35:21,340 --> 00:35:24,520
and start marking off what tools you use

00:35:23,020 --> 00:35:26,860
where you could really get a pretty

00:35:24,520 --> 00:35:28,300
clear picture of whether you need a new

00:35:26,860 --> 00:35:30,340
tool or whether a new tool will solve a

00:35:28,300 --> 00:35:31,750
problem you have whether you're

00:35:30,340 --> 00:35:33,580
replacing another tool or putting

00:35:31,750 --> 00:35:37,150
something next to it it's really useful

00:35:33,580 --> 00:35:39,250
and kind of as a final analogy I like to

00:35:37,150 --> 00:35:43,480
say you know we start with things like

00:35:39,250 --> 00:35:45,880
this graves and because the tools you

00:35:43,480 --> 00:35:47,500
know this took you know I forgot how

00:35:45,880 --> 00:35:50,200
many years now but you know let's say 80

00:35:47,500 --> 00:35:51,220
years to build it took like 80 plus 100

00:35:50,200 --> 00:35:53,140
plus years to build one of these

00:35:51,220 --> 00:35:55,840
pyramids but nowadays we could build

00:35:53,140 --> 00:35:58,240
something very similar and

00:35:55,840 --> 00:36:00,670
quite large and scale in a year or two

00:35:58,240 --> 00:36:02,620
and that's really big as the tools so

00:36:00,670 --> 00:36:06,010
and that's grave too because it's a

00:36:02,620 --> 00:36:07,660
museum and that's it so thank you and

00:36:06,010 --> 00:36:09,150
you can learn more about the technical

00:36:07,660 --> 00:36:14,430
side of things that the other talks

00:36:09,150 --> 00:36:14,430

YouTube URL: https://www.youtube.com/watch?v=TtJ6Q4ogjWw


