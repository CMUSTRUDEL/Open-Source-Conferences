Title: MountainWest Devops 2014 - Introduction to Docker by James Turnbull
Publication date: 2020-01-24
Playlist: MountainWest DevOps 2014
Description: 
	Docker is an open source LXC-based container service that was released in March 2013. It makes it easy to create lightweight, portable, and self-sufficient containers. Containers which you can use to test applications, build and run services or even to build your own platform-as-a-service. Learn why Docker matters, how to get started with it and see some cool examples of Docker in action. This talk will explain:
Why Docker?
Installing Docker

Help us caption & translate this video!

http://amara.org/v/FG2d/
Captions: 
	00:00:25,010 --> 00:00:31,230
okay this is either the second third or

00:00:28,710 --> 00:00:32,790
worse lot in the in the conference but

00:00:31,230 --> 00:00:34,230
you you need to get the first thing in

00:00:32,790 --> 00:00:36,840
the morning when people are sort of only

00:00:34,230 --> 00:00:38,550
marginally caffeinated you can then get

00:00:36,840 --> 00:00:39,960
the very last slot in the afternoon

00:00:38,550 --> 00:00:42,440
where everyone it's like I would like to

00:00:39,960 --> 00:00:44,910
go somewhere else and get caffeinated or

00:00:42,440 --> 00:00:48,570
alcohol or anywhere but this conference

00:00:44,910 --> 00:00:52,470
so after lunch you're all digesting so

00:00:48,570 --> 00:00:54,570
please please don't hesitate to jump up

00:00:52,470 --> 00:00:57,630
and down and ask questions it will aid

00:00:54,570 --> 00:00:59,610
with the digestive process in between

00:00:57,630 --> 00:01:02,640
that process are we talking a bit about

00:00:59,610 --> 00:01:08,040
docker and talk about containerization

00:01:02,640 --> 00:01:10,890
so I've been doing this computer

00:01:08,040 --> 00:01:13,500
everything as my parents describe it for

00:01:10,890 --> 00:01:15,000
about 20 years now I was just saying to

00:01:13,500 --> 00:01:16,259
someone before the talk I usually print

00:01:15,000 --> 00:01:17,729
out a thing that explains what my new

00:01:16,259 --> 00:01:20,729
job is to my parents every time I get

00:01:17,729 --> 00:01:22,560
any job but I've been an Operations

00:01:20,729 --> 00:01:24,240
person about 20 years and on and off a

00:01:22,560 --> 00:01:26,970
sort of developer and engineer very bad

00:01:24,240 --> 00:01:30,180
one I've been involved in open-source

00:01:26,970 --> 00:01:32,299
about the same amount of time i think i

00:01:30,180 --> 00:01:35,790
think i first installed linux off some

00:01:32,299 --> 00:01:36,990
floppy disks so that dates me for those

00:01:35,790 --> 00:01:40,110
of you who are too young a floppy disk

00:01:36,990 --> 00:01:44,540
is like a DVD wait hang on it's like a

00:01:40,110 --> 00:01:44,540
USB key no it's like the cloud

00:01:47,800 --> 00:01:52,270
so you also need to take that I have a

00:01:49,820 --> 00:01:54,550
funny accent I'm not from around here

00:01:52,270 --> 00:01:57,080
I'm actually from Australia originally

00:01:54,550 --> 00:01:59,000
my accent does throw a few Americans

00:01:57,080 --> 00:02:00,920
every now and again and actually

00:01:59,000 --> 00:02:04,220
arguably it throws anyone who speaks

00:02:00,920 --> 00:02:05,660
English so if i do say something you

00:02:04,220 --> 00:02:08,180
don't understand wave your hand in the

00:02:05,660 --> 00:02:09,560
air I will try and speak slowly if you

00:02:08,180 --> 00:02:12,490
didn't understand something was probably

00:02:09,560 --> 00:02:14,630
a swear word and he just safer not to

00:02:12,490 --> 00:02:16,400
I'm also writing a book about docker

00:02:14,630 --> 00:02:17,720
called the docker book please go and if

00:02:16,400 --> 00:02:18,590
you would like to preorder it you can if

00:02:17,720 --> 00:02:20,720
you'd like to stick your name with a

00:02:18,590 --> 00:02:23,450
mailing list it's going to be like an

00:02:20,720 --> 00:02:26,480
introductory guide and this is how I pay

00:02:23,450 --> 00:02:27,650
my mortgage outside of my day job so or

00:02:26,480 --> 00:02:29,750
at least it pays for holidays every now

00:02:27,650 --> 00:02:38,240
and again my wife describes us doing

00:02:29,750 --> 00:02:41,600
more things for free you bastard so who

00:02:38,240 --> 00:02:43,720
here is a developer lots of developers

00:02:41,600 --> 00:02:48,500
that's good who is an operations person

00:02:43,720 --> 00:02:52,370
who he does both is anyone here a truck

00:02:48,500 --> 00:02:53,570
driver or lost yeah okay yeah he works a

00:02:52,370 --> 00:02:57,080
digital ocean by the way wonderful

00:02:53,570 --> 00:02:58,010
hosting so those those guys definitely

00:02:57,080 --> 00:03:01,310
definitely know something about

00:02:58,010 --> 00:03:04,010
operations hopefully so the reason I ask

00:03:01,310 --> 00:03:06,020
this is that this talk is really about

00:03:04,010 --> 00:03:07,280
last few years I've been heavily

00:03:06,020 --> 00:03:08,570
involved in sort of configuration

00:03:07,280 --> 00:03:09,709
management and sort of that sort of see

00:03:08,570 --> 00:03:11,690
said mean things I was one of the

00:03:09,709 --> 00:03:12,800
founding employees at puppet labs and I

00:03:11,690 --> 00:03:15,560
spent the last few years trooping around

00:03:12,800 --> 00:03:16,670
talking about puppet and as I started to

00:03:15,560 --> 00:03:18,170
give this talks the reeling to think

00:03:16,670 --> 00:03:20,239
about containerisation and about

00:03:18,170 --> 00:03:22,340
virtualization overall is that I found

00:03:20,239 --> 00:03:24,050
that my audiences have have started to

00:03:22,340 --> 00:03:25,370
drift from being purely sis admins to

00:03:24,050 --> 00:03:27,200
being more developers to actually being

00:03:25,370 --> 00:03:28,670
developer centric and I talked a bit

00:03:27,200 --> 00:03:30,140
about why that's really exciting to me

00:03:28,670 --> 00:03:30,950
and about why that sort of exciting from

00:03:30,140 --> 00:03:33,019
the point of view of containerization

00:03:30,950 --> 00:03:37,430
and why doctor is interesting to

00:03:33,019 --> 00:03:41,269
developers so what is dakka dakka is

00:03:37,430 --> 00:03:43,459
very loosely and a framework that is

00:03:41,269 --> 00:03:46,940
built on top of our container

00:03:43,459 --> 00:03:48,200
virtualization so what's contained a

00:03:46,940 --> 00:03:50,060
virtualization we're going to we're

00:03:48,200 --> 00:03:51,320
going to dig down into the onion here so

00:03:50,060 --> 00:03:52,940
most of you have probably familiar with

00:03:51,320 --> 00:03:54,500
virtualization you almost certainly have

00:03:52,940 --> 00:03:57,450
used some sort of virtual machine at

00:03:54,500 --> 00:03:59,640
some point essentially it's a

00:03:57,450 --> 00:04:01,020
there is a box and on top of the box

00:03:59,640 --> 00:04:03,900
there is some sort of virtualization

00:04:01,020 --> 00:04:06,269
software and often like described as a

00:04:03,900 --> 00:04:07,680
hypervisor and on top of that you run a

00:04:06,269 --> 00:04:09,209
virtual machine and a virtual machine is

00:04:07,680 --> 00:04:11,489
extension another operating system and

00:04:09,209 --> 00:04:13,739
another bunch of files and configuration

00:04:11,489 --> 00:04:16,320
and you can use that to say deploy code

00:04:13,739 --> 00:04:18,479
or to do testing in or if you some like

00:04:16,320 --> 00:04:21,620
Amazon or EAC to then essentially that's

00:04:18,479 --> 00:04:23,720
your production environment

00:04:21,620 --> 00:04:26,070
virtualization has been around in

00:04:23,720 --> 00:04:27,690
various forms for quite some time but

00:04:26,070 --> 00:04:28,950
really it's been commoditized it's been

00:04:27,690 --> 00:04:30,600
actually available to people sort of

00:04:28,950 --> 00:04:32,070
stuff you can run in your laptop for

00:04:30,600 --> 00:04:34,110
sort of each this sort of five to ten

00:04:32,070 --> 00:04:35,430
years and sort of big the big sort of

00:04:34,110 --> 00:04:36,900
tools there you probably for me too I

00:04:35,430 --> 00:04:39,270
see a lot of macbooks so probably some

00:04:36,900 --> 00:04:40,440
people have virtual box installed those

00:04:39,270 --> 00:04:44,340
of you some of you may be a VMware

00:04:40,440 --> 00:04:45,750
customers but you know Red Hat Oracle or

00:04:44,340 --> 00:04:47,850
all sell things that are sort of

00:04:45,750 --> 00:04:49,020
virtualization technology and if you a

00:04:47,850 --> 00:04:51,000
little bit older you may have been

00:04:49,020 --> 00:04:52,800
familiar with sort of you know Solaris

00:04:51,000 --> 00:04:54,690
and IBM also sold some stuff and I'll

00:04:52,800 --> 00:04:57,750
talk a bit about that limiting intent of

00:04:54,690 --> 00:04:59,130
virtualization is kind of a I won't call

00:04:57,750 --> 00:05:00,479
it an evolutionary step and I'll explain

00:04:59,130 --> 00:05:01,680
why I won't call any misused it but it's

00:05:00,479 --> 00:05:03,060
a different type of virtualization

00:05:01,680 --> 00:05:05,160
essentially it's virtualization without

00:05:03,060 --> 00:05:06,830
the hypervisor part so essentially what

00:05:05,160 --> 00:05:08,940
you have is you have an operating system

00:05:06,830 --> 00:05:10,560
and on top of that operating system

00:05:08,940 --> 00:05:11,760
there's a bunch of capabilities that

00:05:10,560 --> 00:05:15,030
that operating system has things like

00:05:11,760 --> 00:05:17,039
networks and disk drives and CPU and

00:05:15,030 --> 00:05:19,110
memory process management all that sort

00:05:17,039 --> 00:05:21,419
of thing what container virtualization

00:05:19,110 --> 00:05:22,770
does is it says I'm going to build a

00:05:21,419 --> 00:05:24,780
thin layer on top of the operating

00:05:22,770 --> 00:05:26,820
system that abstracts away these

00:05:24,780 --> 00:05:29,190
components and we use the direct calls

00:05:26,820 --> 00:05:31,320
to the colonel in this case the Linux

00:05:29,190 --> 00:05:33,570
kernel and I'm going to create a little

00:05:31,320 --> 00:05:35,460
virtual shell and it's essentially a

00:05:33,570 --> 00:05:37,650
virtual machine that is run directly on

00:05:35,460 --> 00:05:38,850
top of the operating system and there's

00:05:37,650 --> 00:05:42,360
a couple of reasons why this is sort of

00:05:38,850 --> 00:05:43,470
interesting and I would like the color

00:05:42,360 --> 00:05:45,750
reason wants to do interesting one is

00:05:43,470 --> 00:05:47,220
it's very performant so by taking the

00:05:45,750 --> 00:05:48,870
hypervisor out of the way my take a lot

00:05:47,220 --> 00:05:49,889
of mechanics needed to abstract the way

00:05:48,870 --> 00:05:52,380
different bits of hardware and things

00:05:49,889 --> 00:05:54,539
like that you get a fair bit of grunt

00:05:52,380 --> 00:05:56,970
back on a machine and the other aspect

00:05:54,539 --> 00:05:58,440
of it is it's very lightweight so if you

00:05:56,970 --> 00:06:00,660
want to do things very quickly very

00:05:58,440 --> 00:06:02,340
simply very easy to create and delete

00:06:00,660 --> 00:06:04,139
things you're essentially no you are

00:06:02,340 --> 00:06:05,580
writing at the kernel level very fast

00:06:04,139 --> 00:06:08,280
little operations which means that

00:06:05,580 --> 00:06:09,750
instead of seconds or minutes to spin up

00:06:08,280 --> 00:06:10,830
a virtual machine and it takes

00:06:09,750 --> 00:06:14,280
subseconds to Bill

00:06:10,830 --> 00:06:15,240
the container so as you can imagine it's

00:06:14,280 --> 00:06:18,930
pretty attractive for a number of

00:06:15,240 --> 00:06:20,280
reasons but it's not very in the past

00:06:18,930 --> 00:06:22,440
it's not been very easy to use and

00:06:20,280 --> 00:06:23,430
probably the main container framework

00:06:22,440 --> 00:06:26,850
people familiar with there's a thing

00:06:23,430 --> 00:06:29,370
called lxc which is Linux containers lxc

00:06:26,850 --> 00:06:31,410
has been around and sort of supported in

00:06:29,370 --> 00:06:34,410
Linux kernel since about the 2.6 colonel

00:06:31,410 --> 00:06:35,940
in various forms of support it's

00:06:34,410 --> 00:06:37,770
well-maintained and it's got a great

00:06:35,940 --> 00:06:39,540
team of guys who work on it however it's

00:06:37,770 --> 00:06:42,030
not very user-friendly like you needed

00:06:39,540 --> 00:06:43,680
to be a reasonably solid C said mean we

00:06:42,030 --> 00:06:45,630
understand a bunch of stuff about how

00:06:43,680 --> 00:06:48,600
the Linux kernel works in order to be

00:06:45,630 --> 00:06:50,130
sort of an alexei expert so people have

00:06:48,600 --> 00:06:51,600
used containers in the past but it's not

00:06:50,130 --> 00:06:53,610
been easy to do and dockers aims to

00:06:51,600 --> 00:06:55,560
change that model so we take have all

00:06:53,610 --> 00:06:56,910
this advantages containers offers but

00:06:55,560 --> 00:06:58,890
the technology has been not easy to

00:06:56,910 --> 00:07:01,350
consume so dr. kind of takes that and

00:06:58,890 --> 00:07:03,930
puts it together and the key principle

00:07:01,350 --> 00:07:06,270
behind docker is this standard shipping

00:07:03,930 --> 00:07:08,190
container sort of idea essentially what

00:07:06,270 --> 00:07:11,040
we've said to the world is that is that

00:07:08,190 --> 00:07:14,390
that container stuffs pretty cool but we

00:07:11,040 --> 00:07:16,920
need to build a shelf I can you know a

00:07:14,390 --> 00:07:19,590
concept around it that makes it easy to

00:07:16,920 --> 00:07:21,030
use and the reason we've chosen shipping

00:07:19,590 --> 00:07:21,990
attain is is those of you familiar with

00:07:21,030 --> 00:07:23,730
the sort of concept of shipping

00:07:21,990 --> 00:07:27,660
containers these things are only about

00:07:23,730 --> 00:07:28,890
60 years old as a construct before that

00:07:27,660 --> 00:07:31,530
when you wanted to put things on a ship

00:07:28,890 --> 00:07:32,730
you basically you looked at the ship and

00:07:31,530 --> 00:07:35,280
there was a quartermaster and a

00:07:32,730 --> 00:07:36,510
loadmaster and a petty officer and a and

00:07:35,280 --> 00:07:38,220
they all looked at the ship and said we

00:07:36,510 --> 00:07:40,710
can take this many this weight of stuff

00:07:38,220 --> 00:07:43,020
and we can ship this this sort of size

00:07:40,710 --> 00:07:45,210
stuff let's fit it together and they fit

00:07:43,020 --> 00:07:46,680
together like a jigsaw puzzle and you

00:07:45,210 --> 00:07:48,990
have to convey kin for considerations

00:07:46,680 --> 00:07:50,790
like the weight had to be right and you

00:07:48,990 --> 00:07:52,950
shouldn't put the Gunpowder right next

00:07:50,790 --> 00:07:54,060
to the Flint you know all that sort of

00:07:52,950 --> 00:07:56,490
critical things like you know possibly

00:07:54,060 --> 00:07:58,770
don't don't don't stick the the you know

00:07:56,490 --> 00:08:00,090
the the the thing that might leak in a

00:07:58,770 --> 00:08:01,440
storm right next to the really valuable

00:08:00,090 --> 00:08:03,270
carpets all of that sort of sup it was a

00:08:01,440 --> 00:08:05,880
complicated exercise and it cost a lot

00:08:03,270 --> 00:08:07,860
of money to do so someone said if we had

00:08:05,880 --> 00:08:10,440
these boxes and we'll call them shipping

00:08:07,860 --> 00:08:12,420
containers and these boxes you could

00:08:10,440 --> 00:08:14,400
stick anything in them they would be

00:08:12,420 --> 00:08:16,170
built the same way they click together

00:08:14,400 --> 00:08:18,300
they connect together they've got the

00:08:16,170 --> 00:08:20,400
same labeling the same codes and you

00:08:18,300 --> 00:08:23,220
made a beef rib is but the the concept

00:08:20,400 --> 00:08:24,270
of an ISBN in a book is actually a very

00:08:23,220 --> 00:08:26,130
shipping container like

00:08:24,270 --> 00:08:27,870
cept every one of these containers has

00:08:26,130 --> 00:08:30,150
it has a code that tells you what

00:08:27,870 --> 00:08:31,440
company that owns them and you can

00:08:30,150 --> 00:08:32,820
identify interrogate them no matter

00:08:31,440 --> 00:08:34,350
where in the world you can stick a

00:08:32,820 --> 00:08:35,700
barcode scanner against a shipping

00:08:34,350 --> 00:08:39,330
container and know exactly a little

00:08:35,700 --> 00:08:40,860
attest to its details you know as a as

00:08:39,330 --> 00:08:42,270
you probably see what something like 24

00:08:40,860 --> 00:08:43,560
you know whether it's ship the nuclear

00:08:42,270 --> 00:08:46,290
weapon into the port of miami or

00:08:43,560 --> 00:08:47,970
whatever so docker came up with the

00:08:46,290 --> 00:08:49,530
concept of let's take this particular

00:08:47,970 --> 00:08:52,470
concept and apply it to linux and

00:08:49,530 --> 00:08:55,320
Tanner's and and the way we look at this

00:08:52,470 --> 00:08:57,150
is that we want to be able to take your

00:08:55,320 --> 00:08:58,710
application we want to be able to say

00:08:57,150 --> 00:08:59,670
let's build some work flow around your

00:08:58,710 --> 00:09:00,840
application we want to build your

00:08:59,670 --> 00:09:03,270
application once and if you're a

00:09:00,840 --> 00:09:06,510
developer or sysadmin you want to say

00:09:03,270 --> 00:09:08,370
this is how I build my this particular

00:09:06,510 --> 00:09:11,220
service or this particular application I

00:09:08,370 --> 00:09:12,540
wanted to find that in such a way and I

00:09:11,220 --> 00:09:14,670
will look a bit i'll look a bit later

00:09:12,540 --> 00:09:17,690
about how we define it and then i want

00:09:14,670 --> 00:09:20,190
to be over to construct an image that

00:09:17,690 --> 00:09:22,500
represents this application then i want

00:09:20,190 --> 00:09:23,820
to be able to distribute that image to

00:09:22,500 --> 00:09:25,800
lots of different people and i want them

00:09:23,820 --> 00:09:27,870
to be able to consume that image and run

00:09:25,800 --> 00:09:29,040
it in many places and i don't want those

00:09:27,870 --> 00:09:30,390
people to care about where they're

00:09:29,040 --> 00:09:31,830
running it and I don't want to them to

00:09:30,390 --> 00:09:33,870
care about too much about the detail

00:09:31,830 --> 00:09:35,820
like all that stuff's inside the

00:09:33,870 --> 00:09:36,960
container like that's my application I

00:09:35,820 --> 00:09:38,310
care about the stuff inside the

00:09:36,960 --> 00:09:39,600
container all these other people just

00:09:38,310 --> 00:09:41,400
care about the outside of the container

00:09:39,600 --> 00:09:45,950
where they can stack it where they can

00:09:41,400 --> 00:09:47,610
put it where they can ship it so

00:09:45,950 --> 00:09:51,180
essentially what we're looking at is

00:09:47,610 --> 00:09:52,980
these little isolated boxes and we added

00:09:51,180 --> 00:09:54,960
a little bit of technology on top which

00:09:52,980 --> 00:09:56,640
we call which is takes advantage of a

00:09:54,960 --> 00:09:58,830
concept called union file systems and

00:09:56,640 --> 00:10:00,570
this is like a layer so essentially what

00:09:58,830 --> 00:10:01,650
we're doing is we build a build our

00:10:00,570 --> 00:10:02,940
container and it's like loading

00:10:01,650 --> 00:10:04,500
different things in the container so I

00:10:02,940 --> 00:10:06,270
say into the container I'm gonna load my

00:10:04,500 --> 00:10:08,730
operating system ubuntu and I load

00:10:06,270 --> 00:10:10,440
Apache and I'm our load some code and

00:10:08,730 --> 00:10:12,600
each of those is a layer and I can slot

00:10:10,440 --> 00:10:14,940
those layers in and out and every time I

00:10:12,600 --> 00:10:17,010
I have those layers I can reuse them and

00:10:14,940 --> 00:10:19,950
change them and it's very simple model

00:10:17,010 --> 00:10:21,840
and it provides a standard and it means

00:10:19,950 --> 00:10:24,510
that that we get that contact agnostic

00:10:21,840 --> 00:10:25,980
look at the world so some of you

00:10:24,510 --> 00:10:28,470
particularly those of you with longer

00:10:25,980 --> 00:10:30,450
beards and no hair like me will go this

00:10:28,470 --> 00:10:31,470
isn't new the concept of this sort of

00:10:30,450 --> 00:10:33,420
workflow in this sort of

00:10:31,470 --> 00:10:35,460
containerization and those are familiar

00:10:33,420 --> 00:10:37,230
with salari salari zones is it very much

00:10:35,460 --> 00:10:37,900
we adopt we've adopted a bunch of

00:10:37,230 --> 00:10:41,050
concepts

00:10:37,900 --> 00:10:43,210
out of that world and certainly if

00:10:41,050 --> 00:10:45,370
you're even older my very first job was

00:10:43,210 --> 00:10:46,870
an IBM mainframe shop anyone who's

00:10:45,370 --> 00:10:48,790
worked with with our logical

00:10:46,870 --> 00:10:50,590
partitioning the very similar concept to

00:10:48,790 --> 00:10:52,720
so it's a it's a very light weight

00:10:50,590 --> 00:10:56,440
really fast to run up threesum easy to

00:10:52,720 --> 00:10:59,260
manage sort of model so why should you

00:10:56,440 --> 00:11:01,510
care first of all most it's a very easy

00:10:59,260 --> 00:11:04,870
and lightweight waiter model reality so

00:11:01,510 --> 00:11:07,540
if you think about the way the the way

00:11:04,870 --> 00:11:10,510
that you build and develop applications

00:11:07,540 --> 00:11:11,740
is that is that I'm a developer I've got

00:11:10,510 --> 00:11:14,380
some code I've checked it out of gear

00:11:11,740 --> 00:11:15,940
I've worked on it a bit and i'll

00:11:14,380 --> 00:11:17,200
probably on my laptop and an upset okay

00:11:15,940 --> 00:11:19,120
I'm going to I'm going to commit this

00:11:17,200 --> 00:11:20,470
going to push it up to my github repo or

00:11:19,120 --> 00:11:21,970
two might get internal get repo whatever

00:11:20,470 --> 00:11:24,490
happens to be please tell me you're

00:11:21,970 --> 00:11:25,870
using in distributed version control and

00:11:24,490 --> 00:11:27,670
then i'm gonna i'm going to build it

00:11:25,870 --> 00:11:29,290
maybe build I've got some tests or maybe

00:11:27,670 --> 00:11:32,560
I'm a builder on a test instance our

00:11:29,290 --> 00:11:33,970
test vm run my tests maybe if that's

00:11:32,560 --> 00:11:37,480
successful i promote it to the next

00:11:33,970 --> 00:11:39,280
environment and so on and so forth so

00:11:37,480 --> 00:11:40,780
this is a non trivial exercise and the

00:11:39,280 --> 00:11:42,010
reasons are non trivial exercise is you

00:11:40,780 --> 00:11:44,020
need to replicate a whole bunch of stuff

00:11:42,010 --> 00:11:45,970
so you need to have an environment that

00:11:44,020 --> 00:11:47,590
looks something like production to test

00:11:45,970 --> 00:11:48,700
things in if you've got a staging

00:11:47,590 --> 00:11:51,160
environment that environment needs to

00:11:48,700 --> 00:11:52,990
look pretty close to production you need

00:11:51,160 --> 00:11:54,310
to have test servers you need to have a

00:11:52,990 --> 00:11:56,320
bunch of infrastructure and more often

00:11:54,310 --> 00:11:57,520
than not as a developer you're not

00:11:56,320 --> 00:11:58,660
interested in that infrastructure that

00:11:57,520 --> 00:12:00,550
infrastructure should just be there

00:11:58,660 --> 00:12:03,370
right you didn't have to go and ask

00:12:00,550 --> 00:12:04,900
somebody for that hands up here who's

00:12:03,370 --> 00:12:06,760
ever been to stop their development

00:12:04,900 --> 00:12:08,470
works I had to ask a sysadmin or an

00:12:06,760 --> 00:12:12,190
Operations person or someone else for a

00:12:08,470 --> 00:12:16,030
resource of some kind hands up anyone

00:12:12,190 --> 00:12:19,150
who's taken that more than a week anyone

00:12:16,030 --> 00:12:20,650
take more than six weeks okay I you

00:12:19,150 --> 00:12:22,390
still work in a bank used to take eight

00:12:20,650 --> 00:12:26,050
weeks to provision a server like a test

00:12:22,390 --> 00:12:27,820
box eight weeks like you at developer

00:12:26,050 --> 00:12:29,350
sends an email and says I would like a

00:12:27,820 --> 00:12:30,850
server to eight weeks later they would

00:12:29,350 --> 00:12:32,440
get a box and like a dagger an IP

00:12:30,850 --> 00:12:34,120
address and maybe some keys and they

00:12:32,440 --> 00:12:35,560
would and they were and there's no

00:12:34,120 --> 00:12:37,780
guarantee that box actually resembled

00:12:35,560 --> 00:12:39,430
for a lot of reasons production and then

00:12:37,780 --> 00:12:41,200
you had to then work on it and build it

00:12:39,430 --> 00:12:42,610
and change it and you discovered that in

00:12:41,200 --> 00:12:44,740
the time in the meantime production had

00:12:42,610 --> 00:12:47,770
changed and moved on or as a result your

00:12:44,740 --> 00:12:49,330
environment didn't match reality so doc

00:12:47,770 --> 00:12:50,830
oh is it a tend to be able to say I can

00:12:49,330 --> 00:12:51,820
build these very lightweight images

00:12:50,830 --> 00:12:54,520
these very lightweight

00:12:51,820 --> 00:12:55,900
containers I can do build them my selves

00:12:54,520 --> 00:12:57,670
at myself as the developers a very

00:12:55,900 --> 00:12:59,380
simple we fight aversive way of doing

00:12:57,670 --> 00:13:01,150
that or I can get these images from

00:12:59,380 --> 00:13:02,890
other people the extremely lightweight

00:13:01,150 --> 00:13:04,240
that takes seconds to download and I'll

00:13:02,890 --> 00:13:07,180
give a demo at the end here about how

00:13:04,240 --> 00:13:08,350
this works and then I no longer have to

00:13:07,180 --> 00:13:10,990
worry about that wait time I no longer

00:13:08,350 --> 00:13:12,730
have to ask anybody for our resource I

00:13:10,990 --> 00:13:15,130
can build multiple containers on my

00:13:12,730 --> 00:13:16,630
laptop I can have something that

00:13:15,130 --> 00:13:20,050
resembles my production environment and

00:13:16,630 --> 00:13:21,750
we have a one of the major users of that

00:13:20,050 --> 00:13:24,370
one of the early adopters users of

00:13:21,750 --> 00:13:26,230
docker is a company in New York or guilt

00:13:24,370 --> 00:13:27,880
who do fashion sort of stuff they have a

00:13:26,230 --> 00:13:29,260
micro services environment and the

00:13:27,880 --> 00:13:31,120
reason they find this so interactive is

00:13:29,260 --> 00:13:32,740
that they can replicate the entire

00:13:31,120 --> 00:13:34,750
microservices stack for a particular

00:13:32,740 --> 00:13:38,170
part of their product on a developer's

00:13:34,750 --> 00:13:39,340
laptop no no need for testing servers no

00:13:38,170 --> 00:13:40,900
need for production vibe they have all

00:13:39,340 --> 00:13:43,480
of those things but an individual

00:13:40,900 --> 00:13:45,610
developer can work offline essentially

00:13:43,480 --> 00:13:47,050
with a pile of micro services that

00:13:45,610 --> 00:13:48,790
represent the production environment and

00:13:47,050 --> 00:13:50,230
bit test code against that they don't

00:13:48,790 --> 00:13:51,640
have to ask an operations person for it

00:13:50,230 --> 00:13:53,700
they don't have to ask a sysadmin for it

00:13:51,640 --> 00:13:56,440
they get that replicated environment and

00:13:53,700 --> 00:13:57,730
more importantly devs care about their

00:13:56,440 --> 00:13:59,650
application you care about the stuff

00:13:57,730 --> 00:14:01,570
that's inside the container and ops care

00:13:59,650 --> 00:14:05,500
about the containers and that's a really

00:14:01,570 --> 00:14:06,940
good demarcation I some people said to

00:14:05,500 --> 00:14:09,070
be always this in anti DevOps ting and I

00:14:06,940 --> 00:14:10,240
like no it's not but the real is the

00:14:09,070 --> 00:14:12,430
realistic thing about the world is that

00:14:10,240 --> 00:14:14,560
I'm these guys are good at caring about

00:14:12,430 --> 00:14:16,090
the containers and they're getting more

00:14:14,560 --> 00:14:18,970
caring about this stuff in the middle

00:14:16,090 --> 00:14:21,370
here but the primary focus of their

00:14:18,970 --> 00:14:22,930
entire lives is about this if the

00:14:21,370 --> 00:14:25,480
developers are able to build something

00:14:22,930 --> 00:14:27,670
that the operations people know what it

00:14:25,480 --> 00:14:29,920
looks like inside and no one has a

00:14:27,670 --> 00:14:31,540
standard interface on the outside makes

00:14:29,920 --> 00:14:34,390
this a very easy story to tell makes

00:14:31,540 --> 00:14:36,760
very easy to use and Mitchell this

00:14:34,390 --> 00:14:39,010
morning talked about golden images and

00:14:36,760 --> 00:14:41,410
about how images were previously a model

00:14:39,010 --> 00:14:43,990
that worked for a lot of I to shops or

00:14:41,410 --> 00:14:45,130
rather didn't work so this because of

00:14:43,990 --> 00:14:46,630
its lightweight nature is the same

00:14:45,130 --> 00:14:48,280
concept as those golden images but

00:14:46,630 --> 00:14:50,230
because it takes minutes or seconds to

00:14:48,280 --> 00:14:51,820
reprovision those images you don't end

00:14:50,230 --> 00:14:56,590
up with a huge drift of images across

00:14:51,820 --> 00:14:57,700
the environment so I've talked a little

00:14:56,590 --> 00:14:58,990
bit about this source step to this quite

00:14:57,700 --> 00:15:01,720
quickly why not virtual machines of the

00:14:58,990 --> 00:15:04,720
cloud the primary reasons are speed of

00:15:01,720 --> 00:15:05,560
deployment it does take a few minutes to

00:15:04,720 --> 00:15:08,490
spin up a virtual machine

00:15:05,560 --> 00:15:11,080
is a sub second activity portability

00:15:08,490 --> 00:15:12,880
docker provides a standard API you can

00:15:11,080 --> 00:15:15,310
run docker and easy to you can run it on

00:15:12,880 --> 00:15:16,690
a virtual vmware cluster you can run it

00:15:15,310 --> 00:15:20,080
on your laptop you can run it on a

00:15:16,690 --> 00:15:21,790
windows box as a result you get the same

00:15:20,080 --> 00:15:24,160
standard interface in the same standard

00:15:21,790 --> 00:15:28,870
API across those environments it's very

00:15:24,160 --> 00:15:29,950
cheap from from a size disk space point

00:15:28,870 --> 00:15:32,140
of view because of the cats of layering

00:15:29,950 --> 00:15:34,540
I talked about for you can get a lot of

00:15:32,140 --> 00:15:36,070
density you can back put in you have

00:15:34,540 --> 00:15:37,390
that hypervisor is removed so you get a

00:15:36,070 --> 00:15:38,850
lot more a lot more bang for your buck

00:15:37,390 --> 00:15:41,500
out of every machine you deploy it on

00:15:38,850 --> 00:15:42,339
doesn't cost you anything well we're

00:15:41,500 --> 00:15:44,200
going to send you something at some

00:15:42,339 --> 00:15:45,130
point but at the moment it doesn't cost

00:15:44,200 --> 00:15:46,990
you anything those of you who are

00:15:45,130 --> 00:15:49,600
familiar with VMware's licensing model

00:15:46,990 --> 00:15:52,060
it's pretty expensive to run a server

00:15:49,600 --> 00:15:53,200
farm of test boxes in virtual in in it

00:15:52,060 --> 00:15:55,779
with VMware technology it's a

00:15:53,200 --> 00:15:58,450
non-trivial invoice if you can say to

00:15:55,779 --> 00:16:00,940
our CIO we can cut in half or reduce the

00:15:58,450 --> 00:16:02,770
overhead of that that that cost they can

00:16:00,940 --> 00:16:05,520
say to a CFO see if I was like hearing

00:16:02,770 --> 00:16:08,800
things like thirty percent cost savings

00:16:05,520 --> 00:16:10,150
the technology stack really quickly it

00:16:08,800 --> 00:16:13,240
runs on most Linux distributions

00:16:10,150 --> 00:16:16,960
natively with the help of some boot

00:16:13,240 --> 00:16:19,150
strapping it runs on OS X and Windows it

00:16:16,960 --> 00:16:20,770
relies on some some some kernel

00:16:19,150 --> 00:16:21,610
technology called cgroups a name spacing

00:16:20,770 --> 00:16:23,620
these have been in the kernel for a

00:16:21,610 --> 00:16:25,660
while they are safe secure and

00:16:23,620 --> 00:16:28,240
relatively well tested and it's a linux

00:16:25,660 --> 00:16:31,390
kernel I mean I can't promise everything

00:16:28,240 --> 00:16:33,400
and we also rely on some with cycle

00:16:31,390 --> 00:16:36,220
describers Union file systems things

00:16:33,400 --> 00:16:37,570
like device map aufs VFS it's it but

00:16:36,220 --> 00:16:39,160
from the point of view of other than the

00:16:37,570 --> 00:16:41,710
benefits you get from it it's not hugely

00:16:39,160 --> 00:16:42,880
critical you care much about this we've

00:16:41,710 --> 00:16:44,470
also written our own contain a

00:16:42,880 --> 00:16:46,450
technology called lib container which we

00:16:44,470 --> 00:16:48,730
related and last release which replaces

00:16:46,450 --> 00:16:50,680
the LXE that linux containers i talked

00:16:48,730 --> 00:16:53,800
about earlier which means that now it's

00:16:50,680 --> 00:16:55,480
even 11 even one less dependency in

00:16:53,800 --> 00:16:59,980
there and we're managing we're providing

00:16:55,480 --> 00:17:03,100
our own container technology this is

00:16:59,980 --> 00:17:04,780
really loosely how you what I a docker

00:17:03,100 --> 00:17:06,370
container looks like there's a kernel as

00:17:04,780 --> 00:17:09,010
the colonel underneath as a file system

00:17:06,370 --> 00:17:10,449
and you add it to these layers step to

00:17:09,010 --> 00:17:12,250
the process there's right upon matana

00:17:10,449 --> 00:17:13,839
I'm going to step really quickly through

00:17:12,250 --> 00:17:15,670
the basics of this and include a bit of

00:17:13,839 --> 00:17:17,500
a demo because it's much easier to show

00:17:15,670 --> 00:17:18,630
you than it is to tell and far more

00:17:17,500 --> 00:17:20,730
interesting

00:17:18,630 --> 00:17:23,250
will warn you as working with children

00:17:20,730 --> 00:17:25,050
animals live demos tend to be dangerous

00:17:23,250 --> 00:17:26,339
this work this morning there was

00:17:25,050 --> 00:17:27,839
absolutely no guarantee it's going to

00:17:26,339 --> 00:17:31,830
work now and if it does it's entirely

00:17:27,839 --> 00:17:34,080
the fault of the conference wireless so

00:17:31,830 --> 00:17:36,750
this is how I build a docker a docker

00:17:34,080 --> 00:17:39,330
container this is a I start with what I

00:17:36,750 --> 00:17:41,160
call a docker image excuse me the doctor

00:17:39,330 --> 00:17:42,750
images are sent to a file and we call

00:17:41,160 --> 00:17:44,640
this the docker file that describes what

00:17:42,750 --> 00:17:47,690
the image looks like it's a bunch of

00:17:44,640 --> 00:17:49,770
steps instructions really simple it says

00:17:47,690 --> 00:17:51,480
I'm going to base it on another image

00:17:49,770 --> 00:17:53,880
and this is a stock ubuntu operating

00:17:51,480 --> 00:17:55,080
system i'm going to run a few things in

00:17:53,880 --> 00:17:56,700
this case i'm going to install apache

00:17:55,080 --> 00:17:58,110
i'm going to set some environment

00:17:56,700 --> 00:17:59,790
variables i'm in a deuce in

00:17:58,110 --> 00:18:03,180
configuration of the network i'm going

00:17:59,790 --> 00:18:05,700
to say no exposed port 80 and i'm going

00:18:03,180 --> 00:18:07,080
to run some commands these commands are

00:18:05,700 --> 00:18:09,150
going to run when the container launches

00:18:07,080 --> 00:18:13,010
so this is it's very simple example is

00:18:09,150 --> 00:18:16,860
an apache web server in a container it's

00:18:13,010 --> 00:18:18,300
what the nine lines of code which is

00:18:16,860 --> 00:18:21,720
considerably smaller than most people's

00:18:18,300 --> 00:18:23,910
chef and puppet cookbooks it is

00:18:21,720 --> 00:18:27,450
anybody's purely these instructions are

00:18:23,910 --> 00:18:29,400
basically bash esque or bash itself

00:18:27,450 --> 00:18:32,670
which means anyone can very easily learn

00:18:29,400 --> 00:18:34,080
how to do it this docker file can be

00:18:32,670 --> 00:18:35,520
shipped its text you can ship it around

00:18:34,080 --> 00:18:37,050
you can stick it in your repositories

00:18:35,520 --> 00:18:38,490
you're going to attach the daka file

00:18:37,050 --> 00:18:39,960
stick it in the applications

00:18:38,490 --> 00:18:42,510
repositories means you can see exactly

00:18:39,960 --> 00:18:45,150
how the image that runs the application

00:18:42,510 --> 00:18:46,260
is built and you can keep it in version

00:18:45,150 --> 00:18:47,670
control which means that if you change

00:18:46,260 --> 00:18:48,930
the way the Apple image is built you can

00:18:47,670 --> 00:18:50,910
always go backwards or forwards and

00:18:48,930 --> 00:18:52,770
things like that so let's quickly look

00:18:50,910 --> 00:19:01,680
at building an image and see what

00:18:52,770 --> 00:19:04,640
happens so oh that's awesome as I said

00:19:01,680 --> 00:19:04,640
I'll blame the comfort wireless

00:19:06,860 --> 00:19:19,010
I did so thank you very much thank you

00:19:16,940 --> 00:19:20,600
very much this is actually a digital

00:19:19,010 --> 00:19:22,370
ocean droplet that lives for the period

00:19:20,600 --> 00:19:23,480
of my demo and gets killed afterwards so

00:19:22,370 --> 00:19:24,650
I'm not particularly fast if anyone

00:19:23,480 --> 00:19:25,700
compromises you're welcome to it hasn't

00:19:24,650 --> 00:19:28,340
only thing I can honor if I care about

00:19:25,700 --> 00:19:33,590
so so here's the docker file I talked

00:19:28,340 --> 00:19:37,010
about before it's basically what you saw

00:19:33,590 --> 00:19:38,720
before I've got one more line in here

00:19:37,010 --> 00:19:40,700
than the previous one sorry i haven't

00:19:38,720 --> 00:19:43,309
updated my slide obviously I'm adding

00:19:40,700 --> 00:19:45,350
some code in this case i can do add code

00:19:43,309 --> 00:19:46,730
one of two ways I'm just really

00:19:45,350 --> 00:19:49,370
important thing to know particularly as

00:19:46,730 --> 00:19:51,169
as the dock containers is i can add my

00:19:49,370 --> 00:19:53,179
code into the image itself so what

00:19:51,169 --> 00:19:55,669
happens is when I rebuild my image I can

00:19:53,179 --> 00:19:58,010
say load all of my website with my web

00:19:55,669 --> 00:19:59,120
applications code inside the image which

00:19:58,010 --> 00:20:00,500
means that every time I make a change

00:19:59,120 --> 00:20:02,720
all I do is rebuild the image and

00:20:00,500 --> 00:20:05,150
because it's layered it's very fast to

00:20:02,720 --> 00:20:07,760
rebuild that process or I can actually

00:20:05,150 --> 00:20:09,110
mount my code inside the container so I

00:20:07,760 --> 00:20:10,970
can actually do a white lies if you've

00:20:09,110 --> 00:20:12,260
been doing a mount on the command line I

00:20:10,970 --> 00:20:13,640
can actually mount a particular

00:20:12,260 --> 00:20:15,860
directory containing the code which

00:20:13,640 --> 00:20:18,350
means the container can be running I can

00:20:15,860 --> 00:20:20,179
make a change to my application code hit

00:20:18,350 --> 00:20:21,980
refresh on the browser it'll hit the

00:20:20,179 --> 00:20:24,110
disk and settle new version of the thing

00:20:21,980 --> 00:20:29,900
load my HTML code which means that it's

00:20:24,110 --> 00:20:32,840
incredibly fast way to do testing so I'm

00:20:29,900 --> 00:20:33,919
going to build this container that I

00:20:32,840 --> 00:20:41,720
just used it a command called docker

00:20:33,919 --> 00:20:42,950
build oops sorry I'm typing one handed I

00:20:41,720 --> 00:20:45,190
shouldn't type on hand off with down the

00:20:42,950 --> 00:20:45,190
remote

00:20:49,670 --> 00:20:54,620
that just built that image and I wish to

00:20:53,060 --> 00:20:56,630
me I cheated a little bit here some of

00:20:54,620 --> 00:20:59,180
these layers may already exist so once

00:20:56,630 --> 00:21:03,350
you've done that once it keeps them

00:20:59,180 --> 00:21:04,880
caged so a part of that process it would

00:21:03,350 --> 00:21:06,080
have liked to think when I build this

00:21:04,880 --> 00:21:07,610
this morning I probably I forgot to

00:21:06,080 --> 00:21:09,560
delete this that the steps in the middle

00:21:07,610 --> 00:21:13,580
so I apologize for that but it took

00:21:09,560 --> 00:21:15,920
about 36 seconds 35 seconds that's

00:21:13,580 --> 00:21:22,070
actually now an image more importantly

00:21:15,920 --> 00:21:24,320
about that image is that I can then push

00:21:22,070 --> 00:21:26,420
that image around and we maintain our

00:21:24,320 --> 00:21:28,520
site we call the doc or registry or the

00:21:26,420 --> 00:21:30,290
doctor index and the dot essentially

00:21:28,520 --> 00:21:31,660
it's a collection of about 10,000

00:21:30,290 --> 00:21:34,070
different images that people have used

00:21:31,660 --> 00:21:36,200
you can also run private registries and

00:21:34,070 --> 00:21:38,570
as in behind your firewall registry so

00:21:36,200 --> 00:21:40,490
I've got this image I could then say

00:21:38,570 --> 00:21:42,440
this is the new version of the Apache

00:21:40,490 --> 00:21:44,420
container container image I want to

00:21:42,440 --> 00:21:46,070
share this with the rest of the team so

00:21:44,420 --> 00:21:48,020
that when they start building their

00:21:46,070 --> 00:21:51,530
their containers they can they can

00:21:48,020 --> 00:21:59,000
actually do the they can use the updated

00:21:51,530 --> 00:22:00,560
version I just go docker push this one

00:21:59,000 --> 00:22:09,050
may or may not work depending on how

00:22:00,560 --> 00:22:10,820
aggressive their firewalls so again this

00:22:09,050 --> 00:22:12,470
is this is up this there's a few changes

00:22:10,820 --> 00:22:17,240
from this morning but essentially the

00:22:12,470 --> 00:22:24,200
other thing about this is that yeah it's

00:22:17,240 --> 00:22:26,540
like so sorry they are in fact layers

00:22:24,200 --> 00:22:28,040
yes so I've already pushed some of these

00:22:26,540 --> 00:22:29,480
layers before because I didn't change

00:22:28,040 --> 00:22:32,150
anything obtained I've only changed some

00:22:29,480 --> 00:22:34,130
later stuff so it said ah I can skip

00:22:32,150 --> 00:22:36,410
those layers which means sending around

00:22:34,130 --> 00:22:37,970
this is very very cheap you only send

00:22:36,410 --> 00:22:39,850
the data to the registry that you care

00:22:37,970 --> 00:22:42,020
about which is the change you've made I

00:22:39,850 --> 00:22:43,400
can then tell the rest of the team or I

00:22:42,020 --> 00:22:44,570
can use a web hook or something like

00:22:43,400 --> 00:22:45,890
that to notify the rest of the team

00:22:44,570 --> 00:22:47,720
there's a new version of their patch

00:22:45,890 --> 00:22:53,950
image and they can pull it down and

00:22:47,720 --> 00:22:53,950
that's as simple as going and this will

00:23:00,020 --> 00:23:05,130
and it will only download any changes so

00:23:03,450 --> 00:23:06,180
today this is the last layer I changed

00:23:05,130 --> 00:23:08,030
we'd say a new version of the

00:23:06,180 --> 00:23:10,500
application code I don't care about

00:23:08,030 --> 00:23:11,850
apache exists on there everything else

00:23:10,500 --> 00:23:14,490
is configured I don't care about the

00:23:11,850 --> 00:23:16,320
others attempts I just get the 10 meg of

00:23:14,490 --> 00:23:17,820
my application that comes down again so

00:23:16,320 --> 00:23:20,010
you can imagine how fast this makes your

00:23:17,820 --> 00:23:22,170
workflow no more shipping around images

00:23:20,010 --> 00:23:25,860
no more sending around vagrant boxes you

00:23:22,170 --> 00:23:27,360
just get this just the diff and that's

00:23:25,860 --> 00:23:29,040
that's incredibly lightweight and fast

00:23:27,360 --> 00:23:32,130
so let's see if I can just run a

00:23:29,040 --> 00:23:36,060
container from I'm actually gonna go

00:23:32,130 --> 00:23:39,600
back here and so this is the very simple

00:23:36,060 --> 00:23:50,190
process of running a container I'll see

00:23:39,600 --> 00:23:53,190
whether this that that has launched a

00:23:50,190 --> 00:23:56,730
container so if I go docker PS which is

00:23:53,190 --> 00:24:00,300
our equivalent of I should see see it

00:23:56,730 --> 00:24:02,070
that process is this is the idea of the

00:24:00,300 --> 00:24:03,780
container I can also give it a name I

00:24:02,070 --> 00:24:06,150
could could have ordered apache2 or

00:24:03,780 --> 00:24:07,770
something I can see he's my running

00:24:06,150 --> 00:24:09,960
container was created five seconds ago

00:24:07,770 --> 00:24:12,330
it's been out for five seconds it's

00:24:09,960 --> 00:24:13,890
based on this image I'm its run this

00:24:12,330 --> 00:24:15,360
process so it's you know thats launched

00:24:13,890 --> 00:24:17,820
the patch is part of that and it's

00:24:15,360 --> 00:24:22,860
mapped port 80 inside to an external

00:24:17,820 --> 00:24:23,910
port of 49 157 and so it does this port

00:24:22,860 --> 00:24:25,560
mapping here so you can run multiple

00:24:23,910 --> 00:24:27,450
versions of containers and the glad so

00:24:25,560 --> 00:24:29,520
get out I could have if i was a rails

00:24:27,450 --> 00:24:30,990
developer I could have rails multiple

00:24:29,520 --> 00:24:33,750
rails versions running inside this or

00:24:30,990 --> 00:24:34,950
pointing different or different ports

00:24:33,750 --> 00:24:36,270
pointing out here so I can see what my

00:24:34,950 --> 00:24:39,450
application looked like under multiple

00:24:36,270 --> 00:24:42,620
rubies multiple rails I can run bundle

00:24:39,450 --> 00:24:45,330
or IBM or whatever like inside that and

00:24:42,620 --> 00:24:46,530
that process as you can see that's

00:24:45,330 --> 00:24:48,710
considerably faster than starting a

00:24:46,530 --> 00:24:51,300
virtual machine like sub second faster I

00:24:48,710 --> 00:24:55,440
can spawn a lot of these containers I

00:24:51,300 --> 00:24:57,150
have a III have run like I don't know a

00:24:55,440 --> 00:24:59,190
couple hundred containers on a macbook

00:24:57,150 --> 00:25:00,750
air doing reasonably process intensive

00:24:59,190 --> 00:25:03,360
things they're very lightweight they're

00:25:00,750 --> 00:25:06,810
very cheap I can dispose of them when we

00:25:03,360 --> 00:25:07,440
start them in fact if I go over to 14 9

00:25:06,810 --> 00:25:14,279
00:25:07,440 --> 00:25:16,620
I should be able to hopefully I had time

00:25:14,279 --> 00:25:18,179
to actually update the dns that's

00:25:16,620 --> 00:25:19,730
actually that so the index file is from

00:25:18,179 --> 00:25:22,169
a previous fling my life did last week

00:25:19,730 --> 00:25:24,360
but essentially that is the that is the

00:25:22,169 --> 00:25:27,960
index HTML i added inside the container

00:25:24,360 --> 00:25:30,570
i can then go back and say I want to

00:25:27,960 --> 00:25:38,929
make change actually I think this one

00:25:30,570 --> 00:25:44,340
might be mounted I'm out this one or not

00:25:38,929 --> 00:25:47,149
shattering whether I am yep I got this

00:25:44,340 --> 00:25:47,149
wrong on conference

00:25:57,899 --> 00:26:14,620
what I'm going to want to do here and I

00:26:04,360 --> 00:26:18,220
want to refer something refresh you want

00:26:14,620 --> 00:26:19,749
you refresh sorry I'm having aa

00:26:18,220 --> 00:26:25,690
wonderful wonderful problems of

00:26:19,749 --> 00:26:30,549
technical technical problems don't you

00:26:25,690 --> 00:26:32,139
refresh ok I came up with a with funds

00:26:30,549 --> 00:26:40,480
mounted inside that might be mounted

00:26:32,139 --> 00:26:47,950
inside the um yeah okay I mean quickly I

00:26:40,480 --> 00:26:49,419
will demonstrate a different way I'm

00:26:47,950 --> 00:26:51,190
sorry the demo was a bit ad hoc this

00:26:49,419 --> 00:26:55,149
morning when I discovered that a couple

00:26:51,190 --> 00:26:57,159
things didn't work I can then go docker

00:26:55,149 --> 00:27:00,059
build I'm essentially rebuilding the

00:26:57,159 --> 00:27:00,059
image i just created before

00:27:08,870 --> 00:27:12,320
you

00:27:10,880 --> 00:27:13,910
so you can see it ran through the

00:27:12,320 --> 00:27:17,210
process again it only thing will have

00:27:13,910 --> 00:27:19,940
updated is the process by which it by

00:27:17,210 --> 00:27:32,240
which it added the the thing image I can

00:27:19,940 --> 00:27:33,410
then spawn another container now I've

00:27:32,240 --> 00:27:35,510
got another one in container I could

00:27:33,410 --> 00:27:36,650
have killed the old container but it's

00:27:35,510 --> 00:27:43,430
dead it's just incremented to another

00:27:36,650 --> 00:27:48,440
port and be very embarrassing if this

00:27:43,430 --> 00:27:49,940
doesn't work so that's the probation

00:27:48,440 --> 00:27:53,720
that processes if I've just changed some

00:27:49,940 --> 00:27:55,160
application code I've rebuilt my image

00:27:53,720 --> 00:27:56,870
I've distributed that to all the rest

00:27:55,160 --> 00:27:58,820
the team they've got the new they've got

00:27:56,870 --> 00:28:02,050
version 2 of the code and I've got the

00:27:58,820 --> 00:28:06,410
right conference data in there so

00:28:02,050 --> 00:28:09,190
questions thanks for much everyone feel

00:28:06,410 --> 00:28:09,190
free to ask me questions up

00:28:37,320 --> 00:28:39,380

YouTube URL: https://www.youtube.com/watch?v=e6s6xqSl9iw


