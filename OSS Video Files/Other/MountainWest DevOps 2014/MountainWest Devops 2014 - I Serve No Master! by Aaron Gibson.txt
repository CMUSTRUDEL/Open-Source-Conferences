Title: MountainWest Devops 2014 - I Serve No Master! by Aaron Gibson
Publication date: 2020-01-24
Playlist: MountainWest DevOps 2014
Description: 
	Typical Puppet users implement this tool in its traditional role of client and master. At Adaptive Computing we build environments for developers all day long using OpenStack, as such the traditional model of client to server for Puppet just didn't fit. For the longest time I thought I was doing it wrong, however Puppet can be implemented without the need of a puppetmaster. The presentation will focus on utilizing puppet in a masterless state allowing the rapid configuration for your environment with no need for the cruft of managing a traditional puppet master. There are pros and cons that will be explored as well as detailed examples of how Adaptive took environment installs from hours of developers time down to about 10 minutes.

Help us caption & translate this video!

http://amara.org/v/FG2S/
Captions: 
	00:00:26,300 --> 00:00:40,140
alright let's make sure this thing works

00:00:30,690 --> 00:00:41,790
first alright everybody still awake it's

00:00:40,140 --> 00:00:44,790
the it's the final countdown right it's

00:00:41,790 --> 00:00:46,920
the last stretch of the day quite

00:00:44,790 --> 00:00:49,550
possibly the worst the worst time slot

00:00:46,920 --> 00:00:55,590
in the afternoon but that's alright

00:00:49,550 --> 00:00:57,060
hopefully I'll keep you interested so my

00:00:55,590 --> 00:01:01,170
name is Aaron and I'm going to talk

00:00:57,060 --> 00:01:02,610
about how i use puppet people still use

00:01:01,170 --> 00:01:04,170
puppet right I've heard a lot of mention

00:01:02,610 --> 00:01:06,090
of salt and I've heard a lot of mention

00:01:04,170 --> 00:01:08,310
of we got a puppy guy up there a lot of

00:01:06,090 --> 00:01:11,910
mention of chef but people still do use

00:01:08,310 --> 00:01:14,220
puppet right okay good I'm going to talk

00:01:11,910 --> 00:01:16,320
about how i use puppet in a little bit

00:01:14,220 --> 00:01:18,420
different of a state than most folks do

00:01:16,320 --> 00:01:20,789
simply because of some ramifications

00:01:18,420 --> 00:01:22,619
that will explore but all the puppet

00:01:20,789 --> 00:01:24,869
work that I've done at adaptive

00:01:22,619 --> 00:01:26,640
computing is in a masterless state

00:01:24,869 --> 00:01:28,920
meaning i'm not using puppet in its

00:01:26,640 --> 00:01:30,950
traditional client-server model right

00:01:28,920 --> 00:01:33,360
I'm not managing anodes file I'm not

00:01:30,950 --> 00:01:34,890
signing certificates because of some

00:01:33,360 --> 00:01:37,619
ramifications that I'll show you as we

00:01:34,890 --> 00:01:43,430
get into things here okay so just keep

00:01:37,619 --> 00:01:46,140
that in mind a little bit about about me

00:01:43,430 --> 00:01:47,490
these are some things I like to do and

00:01:46,140 --> 00:01:49,380
some history on me I've been in

00:01:47,490 --> 00:01:51,060
operations if that's what you call it

00:01:49,380 --> 00:01:52,650
for 15 years usually it's just hey

00:01:51,060 --> 00:01:55,860
something's broken please fix it right

00:01:52,650 --> 00:01:57,740
I'm sure all of us can relate to those

00:01:55,860 --> 00:02:01,200
type of comments coming from our users

00:01:57,740 --> 00:02:03,329
I'm an automator I don't like

00:02:01,200 --> 00:02:06,450
unrepeatable work so that leads into

00:02:03,329 --> 00:02:09,360
bullet number three my colleagues might

00:02:06,450 --> 00:02:14,670
say that I'm a finder of silos and other

00:02:09,360 --> 00:02:17,340
unrepeatable work a typical accolade

00:02:14,670 --> 00:02:19,110
that I that I subscribe to is if if I if

00:02:17,340 --> 00:02:21,299
you get hit by a bus if you walk out and

00:02:19,110 --> 00:02:22,860
get hit by a bus and it's not repeatable

00:02:21,299 --> 00:02:25,890
none of your work counted for anything

00:02:22,860 --> 00:02:27,060
to me right I want it repeatable I don't

00:02:25,890 --> 00:02:28,230
want to have to go dig into your code

00:02:27,060 --> 00:02:29,790
and figure out how to do it I want to be

00:02:28,230 --> 00:02:33,000
able to deploy it I want to be able to

00:02:29,790 --> 00:02:34,140
reuse it on the fly right so if it can't

00:02:33,000 --> 00:02:37,730
be repeated it doesn't

00:02:34,140 --> 00:02:40,290
I'm passionate about DevOps culture

00:02:37,730 --> 00:02:43,410
simply because of the people because all

00:02:40,290 --> 00:02:45,270
of you are smarter together then then

00:02:43,410 --> 00:02:47,040
individuals are right I'm not that smart

00:02:45,270 --> 00:02:48,780
of a person but together with other

00:02:47,040 --> 00:02:50,670
like-minded people I think we can come

00:02:48,780 --> 00:02:54,240
up with some pretty cool stuff so i

00:02:50,670 --> 00:02:55,650
really like devops culture I like the

00:02:54,240 --> 00:02:56,910
tools i think the tools are great but at

00:02:55,650 --> 00:02:59,250
the end of the day it's the people it's

00:02:56,910 --> 00:03:02,610
all of you right they get things done

00:02:59,250 --> 00:03:04,920
and that's what's important pull our

00:03:02,610 --> 00:03:07,050
strings both puppet strings and guitar

00:03:04,920 --> 00:03:08,730
right I'm not very good at the guitar

00:03:07,050 --> 00:03:11,010
and I some say I'm not very good at

00:03:08,730 --> 00:03:13,190
puppet either but I try right and I get

00:03:11,010 --> 00:03:16,860
a little bit of enjoyment out of it

00:03:13,190 --> 00:03:18,780
recently got back into motorcycling it's

00:03:16,860 --> 00:03:21,870
kind of funny to see a big guy on a bike

00:03:18,780 --> 00:03:24,330
but it can be done I had a bike when I

00:03:21,870 --> 00:03:26,820
was much younger more less intelligence

00:03:24,330 --> 00:03:28,920
person but I've recently got back into

00:03:26,820 --> 00:03:30,120
it it's a lot of fun and then if I do

00:03:28,920 --> 00:03:34,010
some of these things that are at the top

00:03:30,120 --> 00:03:36,000
of this list and I do them well

00:03:34,010 --> 00:03:37,830
specifically my career that gives me

00:03:36,000 --> 00:03:39,570
time to do what I ultimately enjoy and

00:03:37,830 --> 00:03:41,370
that as being a husband and a father

00:03:39,570 --> 00:03:43,620
have two little girls beautiful wife

00:03:41,370 --> 00:03:45,570
it's much rather spend time with them

00:03:43,620 --> 00:03:47,579
and with my colleagues not that my

00:03:45,570 --> 00:03:49,110
colleagues are bad but I'd like to go

00:03:47,579 --> 00:03:52,350
home at night I know that things were

00:03:49,110 --> 00:03:54,120
going to function right so I work for

00:03:52,350 --> 00:03:58,380
adaptive computing and what's adaptive

00:03:54,120 --> 00:04:00,180
about adaptive computing manages the

00:03:58,380 --> 00:04:02,070
world's largest computing installations

00:04:00,180 --> 00:04:04,530
with its Moab self-optimizing cloud

00:04:02,070 --> 00:04:06,150
management blah blah blah blah blah

00:04:04,530 --> 00:04:08,310
that's a marketing so I can you guys

00:04:06,150 --> 00:04:10,230
tell a marketing person wrote it right

00:04:08,310 --> 00:04:11,820
so adaptive zon the world's largest

00:04:10,230 --> 00:04:13,560
supercomputers that's what you need to

00:04:11,820 --> 00:04:16,760
get out of the slide and what that

00:04:13,560 --> 00:04:18,989
really means I've listed out some of our

00:04:16,760 --> 00:04:20,669
some of our customers what that really

00:04:18,989 --> 00:04:22,770
means is that we do some some kind of

00:04:20,669 --> 00:04:27,060
cool stuff that I get to did I get to

00:04:22,770 --> 00:04:28,740
take part in a new way Noah I had to

00:04:27,060 --> 00:04:32,460
look up the acronym because I couldn't I

00:04:28,740 --> 00:04:35,070
mean Noah doesn't know a national

00:04:32,460 --> 00:04:36,330
oceanographic whatever it is right but

00:04:35,070 --> 00:04:38,130
we predict the weather that's kind of

00:04:36,330 --> 00:04:41,010
important to people anyone that

00:04:38,130 --> 00:04:42,030
remembers Hurricane Katrina or sandy or

00:04:41,010 --> 00:04:46,020
some of these other life threatening

00:04:42,030 --> 00:04:46,979
weather emergencies care about knowing

00:04:46,020 --> 00:04:47,670
when the weather is going to change

00:04:46,979 --> 00:04:49,890
right so we

00:04:47,670 --> 00:04:51,950
predict the weather a digital globe is a

00:04:49,890 --> 00:04:55,590
company that does a lot of cool stuff

00:04:51,950 --> 00:04:58,680
they analyze large sets of data from

00:04:55,590 --> 00:04:59,730
from satellites all over the globe one

00:04:58,680 --> 00:05:02,580
of the things they're doing right now is

00:04:59,730 --> 00:05:04,740
trying to locate the Malaysia Airlines

00:05:02,580 --> 00:05:07,140
flight so that's meaningful work that's

00:05:04,740 --> 00:05:09,480
pretty cool stuff Hospital for Sick

00:05:07,140 --> 00:05:11,730
Children in Toronto trying to find a

00:05:09,480 --> 00:05:13,230
cure for cancer is some of the some of

00:05:11,730 --> 00:05:15,930
the work that they do they're meaningful

00:05:13,230 --> 00:05:17,430
work we also claim that we have an

00:05:15,930 --> 00:05:20,130
installation on Stephen Hawking's

00:05:17,430 --> 00:05:23,790
supercomputer at the University of

00:05:20,130 --> 00:05:26,430
Cambridge searching for something about

00:05:23,790 --> 00:05:27,930
the universe and then boeing is another

00:05:26,430 --> 00:05:30,870
one of our larger customers they do

00:05:27,930 --> 00:05:33,600
obviously data analysis for how a plane

00:05:30,870 --> 00:05:36,300
flies what makes it fly better etc etc

00:05:33,600 --> 00:05:38,250
right so some of our some of our

00:05:36,300 --> 00:05:39,870
customers and and and what that means is

00:05:38,250 --> 00:05:42,300
that I think we do meaningful work I

00:05:39,870 --> 00:05:44,700
think we do some fun stuff my history at

00:05:42,300 --> 00:05:51,150
adaptive I've been there for about a

00:05:44,700 --> 00:05:53,460
year in a couple months I think chef was

00:05:51,150 --> 00:05:55,830
in place it's not a it's not a chef

00:05:53,460 --> 00:05:57,780
hating talk that's not the point of the

00:05:55,830 --> 00:06:00,870
the message here but chef was in a small

00:05:57,780 --> 00:06:02,580
little corner of the company there was

00:06:00,870 --> 00:06:05,430
no advocates for the there was no dev

00:06:02,580 --> 00:06:07,320
ops ii type people for the product for

00:06:05,430 --> 00:06:08,760
chef it wasn't being maintained it

00:06:07,320 --> 00:06:10,890
wasn't being evangelized it wasn't being

00:06:08,760 --> 00:06:14,220
promoted or expanded outside of that

00:06:10,890 --> 00:06:16,590
group so we were able to replicate the

00:06:14,220 --> 00:06:19,050
chef work in puppet some silos were

00:06:16,590 --> 00:06:20,670
prevalent as I'm sure all of you have

00:06:19,050 --> 00:06:22,610
experience with that silos being

00:06:20,670 --> 00:06:25,320
prevalent in your in your organization's

00:06:22,610 --> 00:06:27,420
these ones at adaptive were fortified

00:06:25,320 --> 00:06:29,910
they were made out of titanium and they

00:06:27,420 --> 00:06:32,490
were very hard to to penetrate right

00:06:29,910 --> 00:06:34,620
there they're impenetrable silos and

00:06:32,490 --> 00:06:38,300
then because of that because of the

00:06:34,620 --> 00:06:40,590
items above there was there was these

00:06:38,300 --> 00:06:42,150
disconnected efforts between each of the

00:06:40,590 --> 00:06:45,170
business units inside of the company

00:06:42,150 --> 00:06:47,490
which equated to a lot of waste and

00:06:45,170 --> 00:06:51,120
we're in DevOps right we care about

00:06:47,490 --> 00:06:54,180
eliminating in efficiencies and so the

00:06:51,120 --> 00:06:56,130
the territory was ripe if you will so

00:06:54,180 --> 00:06:59,360
here's a little bit about the problem

00:06:56,130 --> 00:07:01,600
that I was trying to solve specifically

00:06:59,360 --> 00:07:03,220
one of the things that was disturbing

00:07:01,600 --> 00:07:05,560
early on was it was taking our own

00:07:03,220 --> 00:07:08,500
developers the guys that work for

00:07:05,560 --> 00:07:11,560
adaptive days of time to install our own

00:07:08,500 --> 00:07:13,090
staff typically those weren't the you

00:07:11,560 --> 00:07:14,920
know the who were cool developers those

00:07:13,090 --> 00:07:17,110
are the guys were being on boarded but

00:07:14,920 --> 00:07:19,120
the fact of the matter was that we were

00:07:17,110 --> 00:07:21,670
having a waste a time waste of

00:07:19,120 --> 00:07:24,490
developers time eating our own dog food

00:07:21,670 --> 00:07:26,380
right installing our own product most

00:07:24,490 --> 00:07:28,570
importantly none of those individual

00:07:26,380 --> 00:07:30,760
silos about how to do the installation

00:07:28,570 --> 00:07:35,140
of our own stack was reproducible

00:07:30,760 --> 00:07:37,600
nothing was automated and then to add

00:07:35,140 --> 00:07:39,910
insult to injury no to devs did it

00:07:37,600 --> 00:07:42,700
exactly the same way if you asked Tom

00:07:39,910 --> 00:07:45,280
his way was the way but if you asked

00:07:42,700 --> 00:07:46,900
Fred as soon as Tom left and he'd be

00:07:45,280 --> 00:07:49,990
like dude that guy doesn't know anything

00:07:46,900 --> 00:07:51,520
right this is the way I do it and so I

00:07:49,990 --> 00:07:54,040
think we all say that to a certain

00:07:51,520 --> 00:07:55,990
extent but you get the problem right we

00:07:54,040 --> 00:08:00,180
didn't have the way to do it and it

00:07:55,990 --> 00:08:05,590
wasn't reproducible or automated and

00:08:00,180 --> 00:08:08,470
then to add to that this work that was

00:08:05,590 --> 00:08:10,510
not automated a reproducible wasn't even

00:08:08,470 --> 00:08:11,770
following to a tee our own public

00:08:10,510 --> 00:08:12,910
documentation that we released to

00:08:11,770 --> 00:08:14,680
customers and we care about our

00:08:12,910 --> 00:08:16,630
customers we want them to have a

00:08:14,680 --> 00:08:20,020
pleasant experience with our piece of

00:08:16,630 --> 00:08:21,760
software ok and then these

00:08:20,020 --> 00:08:24,400
inefficiencies were we're kind of

00:08:21,760 --> 00:08:26,560
spilling over we're overflowing the

00:08:24,400 --> 00:08:28,330
banks of productivity and to other

00:08:26,560 --> 00:08:29,530
business units inside of the company

00:08:28,330 --> 00:08:34,539
I've already kind of mentioned about

00:08:29,530 --> 00:08:36,099
that so this is how I felt right one of

00:08:34,539 --> 00:08:39,400
the guys that I used to work for Jake is

00:08:36,099 --> 00:08:41,050
here in the audience in and I think I

00:08:39,400 --> 00:08:43,350
might have told him that it was one of

00:08:41,050 --> 00:08:46,090
the hardest places to do DevOps right

00:08:43,350 --> 00:08:49,780
because we're not a typical DevOps shop

00:08:46,090 --> 00:08:51,820
we don't deploy a hundred times a day to

00:08:49,780 --> 00:08:54,400
production our release cycle is six

00:08:51,820 --> 00:08:58,210
months long it's not a typical dev ops

00:08:54,400 --> 00:09:00,820
ii type shop and so I felt I felt like

00:08:58,210 --> 00:09:05,850
that and I wanted to run but I stuck it

00:09:00,820 --> 00:09:08,260
I stuck it out so we began searching for

00:09:05,850 --> 00:09:09,940
what was going to be a solution to some

00:09:08,260 --> 00:09:11,350
of these these problems that we were

00:09:09,940 --> 00:09:12,690
able to identify that i was able to

00:09:11,350 --> 00:09:16,590
identify early on app

00:09:12,690 --> 00:09:19,830
and so I turned to a tool that I had a

00:09:16,590 --> 00:09:21,030
lot of experience with worked for six

00:09:19,830 --> 00:09:24,900
and a half years at a company called

00:09:21,030 --> 00:09:26,040
spark networks they do niche dating

00:09:24,900 --> 00:09:28,110
sites you've probably seen

00:09:26,040 --> 00:09:30,720
advertisements on TV for Christian

00:09:28,110 --> 00:09:33,000
mingle or different sites like that work

00:09:30,720 --> 00:09:34,370
there for a long time utilizing tools

00:09:33,000 --> 00:09:38,010
like puppet to make configuration

00:09:34,370 --> 00:09:39,900
repeatable reproducible hopefully before

00:09:38,010 --> 00:09:41,610
all the other cool kids were doing it

00:09:39,900 --> 00:09:44,220
right I'd like to I'd like to say that I

00:09:41,610 --> 00:09:46,920
was was using puppet before it was

00:09:44,220 --> 00:09:50,130
widely adopted glad to see there's still

00:09:46,920 --> 00:09:53,400
some puppet people but we ran into a

00:09:50,130 --> 00:09:55,950
couple of problems and they went

00:09:53,400 --> 00:09:57,660
something like and those that have used

00:09:55,950 --> 00:10:00,090
puppet probably going to be very

00:09:57,660 --> 00:10:01,860
familiar with this okay let's spin up

00:10:00,090 --> 00:10:03,660
our new box one thing to note is that we

00:10:01,860 --> 00:10:04,890
utilize OpenStack internally right

00:10:03,660 --> 00:10:06,420
that's a value add that we give our

00:10:04,890 --> 00:10:08,790
developers we don't want to want to have

00:10:06,420 --> 00:10:12,570
them wasting resources via virtual box

00:10:08,790 --> 00:10:14,790
on their own machine so we we provide

00:10:12,570 --> 00:10:17,610
for them a means by which they can use

00:10:14,790 --> 00:10:20,160
OpenStack to build these images to test

00:10:17,610 --> 00:10:24,840
and to install on and to develop code on

00:10:20,160 --> 00:10:28,620
and what not so you decided you'd kick

00:10:24,840 --> 00:10:31,050
off a certificate assignment and and pop

00:10:28,620 --> 00:10:32,820
in wait for cert specify where your

00:10:31,050 --> 00:10:34,980
puppet master was and then you jump over

00:10:32,820 --> 00:10:37,890
the puppet master you need do you know

00:10:34,980 --> 00:10:39,630
puppet see a dash dash list and you may

00:10:37,890 --> 00:10:41,250
wait for a couple seconds and then

00:10:39,630 --> 00:10:44,040
you'll go back to your client and do

00:10:41,250 --> 00:10:45,750
this again right and then you'll go back

00:10:44,040 --> 00:10:49,470
and check and see if it's there and then

00:10:45,750 --> 00:10:50,670
you'll sign it and sometimes you'll go

00:10:49,470 --> 00:10:53,700
back and make sure that you really did

00:10:50,670 --> 00:10:55,680
sign it then it got the right fully

00:10:53,700 --> 00:10:57,150
qualified domain name that's on the cert

00:10:55,680 --> 00:10:58,170
so that matches when it goes back to the

00:10:57,150 --> 00:11:00,750
client that everything's going to work

00:10:58,170 --> 00:11:03,540
and then inevitably when a developer

00:11:00,750 --> 00:11:05,460
were kicked off an image on OpenStack

00:11:03,540 --> 00:11:08,070
from a snapshot versus a fresh install

00:11:05,460 --> 00:11:09,570
and run into a certificate problem these

00:11:08,070 --> 00:11:11,790
were the type of issues that I started

00:11:09,570 --> 00:11:13,440
to run into as I was trying to apply a

00:11:11,790 --> 00:11:15,330
tool that I was fairly familiar with

00:11:13,440 --> 00:11:21,210
into a new problem set new environment

00:11:15,330 --> 00:11:23,160
okay now those that are puppets a V are

00:11:21,210 --> 00:11:24,600
going to say yeah but you could regex

00:11:23,160 --> 00:11:25,800
you could there's there's ways that you

00:11:24,600 --> 00:11:28,800
could get around this right

00:11:25,800 --> 00:11:30,990
you could regex your node file right we

00:11:28,800 --> 00:11:32,730
we have pieces of our components tax

00:11:30,990 --> 00:11:34,910
that we need to apply before we install

00:11:32,730 --> 00:11:37,830
a sweet and after we install a sweet

00:11:34,910 --> 00:11:39,149
some of those are java 6 vs java 7

00:11:37,830 --> 00:11:44,519
depending on which product we're

00:11:39,149 --> 00:11:46,140
installing mysql odbc etc etc so you

00:11:44,519 --> 00:11:47,850
could just regex and say apply

00:11:46,140 --> 00:11:49,500
everything to anything that that comes

00:11:47,850 --> 00:11:51,300
in then you could also say go ahead and

00:11:49,500 --> 00:11:54,600
auto sign on your certificates well I

00:11:51,300 --> 00:11:58,110
felt like that was fairly kludgy I felt

00:11:54,600 --> 00:12:00,540
like it wasn't efficient the other the

00:11:58,110 --> 00:12:02,700
other concern that I have is when you

00:12:00,540 --> 00:12:04,410
start to manage your notes file via

00:12:02,700 --> 00:12:06,209
regular expressions and then a developer

00:12:04,410 --> 00:12:07,769
comes to you right before a release and

00:12:06,209 --> 00:12:09,570
says yeah but I need to plug in this

00:12:07,769 --> 00:12:12,450
module and I need to try this

00:12:09,570 --> 00:12:14,040
configuration and these four associated

00:12:12,450 --> 00:12:15,630
modules and that becomes a little bit

00:12:14,040 --> 00:12:16,980
harder and it's a manual touch point I

00:12:15,630 --> 00:12:19,290
don't want to have to go touch anodes

00:12:16,980 --> 00:12:20,910
file for all these stacks that I'm

00:12:19,290 --> 00:12:24,269
standing up inside of OpenStack for

00:12:20,910 --> 00:12:25,649
developers right and so there's some

00:12:24,269 --> 00:12:28,200
things that we could have done but they

00:12:25,649 --> 00:12:30,690
weren't quite right for our environment

00:12:28,200 --> 00:12:31,950
they weren't quite as effective as we

00:12:30,690 --> 00:12:33,870
wanted them to be and at the end of the

00:12:31,950 --> 00:12:35,040
day as I already mentioned it was a

00:12:33,870 --> 00:12:36,120
touch point I didn't want to have to

00:12:35,040 --> 00:12:37,320
make I don't want to have to touch

00:12:36,120 --> 00:12:39,000
something I want it to be I want it to

00:12:37,320 --> 00:12:42,329
be simple want it to be is easy as

00:12:39,000 --> 00:12:45,589
breathing so here's what we identified

00:12:42,329 --> 00:12:48,510
that we needed we needed to bring order

00:12:45,589 --> 00:12:52,050
which is a difficult thing to do tow to

00:12:48,510 --> 00:12:55,680
order things can take people years of

00:12:52,050 --> 00:12:57,360
time we wanted the the pieces that we're

00:12:55,680 --> 00:12:59,520
going to be used in the stack to follow

00:12:57,360 --> 00:13:00,839
our documentation we wanted to be

00:12:59,520 --> 00:13:03,720
modular we wanted to eliminate

00:13:00,839 --> 00:13:06,450
inefficiencies and then we wanted to

00:13:03,720 --> 00:13:09,959
create some of these feedback loops so

00:13:06,450 --> 00:13:11,910
it is we did things differently in in

00:13:09,959 --> 00:13:14,190
our documentation then we would be able

00:13:11,910 --> 00:13:17,970
to eat eat our own dog food in that

00:13:14,190 --> 00:13:19,529
documentation and as a result be able to

00:13:17,970 --> 00:13:21,149
create these tight integration points

00:13:19,529 --> 00:13:23,190
where something changed in documentation

00:13:21,149 --> 00:13:25,680
right and then we're able to immediately

00:13:23,190 --> 00:13:27,540
validate it immediately validate it

00:13:25,680 --> 00:13:29,070
inside of OpenStack going through the

00:13:27,540 --> 00:13:31,050
install process of our stack the way

00:13:29,070 --> 00:13:32,160
that we the way that we tell our

00:13:31,050 --> 00:13:33,930
customers to in the wake you get

00:13:32,160 --> 00:13:36,240
immediate feedback and validation that

00:13:33,930 --> 00:13:38,180
that's working right and then as some

00:13:36,240 --> 00:13:39,710
bonus items outside of an engineering

00:13:38,180 --> 00:13:41,840
centric role

00:13:39,710 --> 00:13:44,000
others should be able to utilize our

00:13:41,840 --> 00:13:45,860
efforts right if I have a sales engineer

00:13:44,000 --> 00:13:47,530
and Taiwan and he wants to be able to

00:13:45,860 --> 00:13:50,720
use the same tool that I use in

00:13:47,530 --> 00:13:52,040
engineering to stand up a stack he

00:13:50,720 --> 00:13:53,840
should be able to do that it should be

00:13:52,040 --> 00:13:55,970
nothing more than I get a git clone away

00:13:53,840 --> 00:13:57,970
right if someone in sales wants to do it

00:13:55,970 --> 00:14:02,210
right so easy a sales guys could do it

00:13:57,970 --> 00:14:03,950
by the way that never works right but we

00:14:02,210 --> 00:14:05,930
wanted to make sure that anyone could do

00:14:03,950 --> 00:14:08,120
it right anyone inside the organization

00:14:05,930 --> 00:14:10,340
should be able to utilize this tool and

00:14:08,120 --> 00:14:13,280
then we also wanted it to be automatable

00:14:10,340 --> 00:14:15,380
via other systems that we had in place

00:14:13,280 --> 00:14:17,150
namely jenkins right we wanted to be

00:14:15,380 --> 00:14:20,150
able to call this via jenkins scripts

00:14:17,150 --> 00:14:21,890
with Jenkins once Jenkins saw commit it

00:14:20,150 --> 00:14:24,170
could reach out to OpenStack and stand

00:14:21,890 --> 00:14:26,030
up our environment via a tool and then

00:14:24,170 --> 00:14:28,310
we could do some testing via knows we

00:14:26,030 --> 00:14:30,590
use Python tool kit called knows to do

00:14:28,310 --> 00:14:32,600
our testing and then based on whether or

00:14:30,590 --> 00:14:34,160
not that was fruitful if the tests pass

00:14:32,600 --> 00:14:35,720
and we can promote that build on down

00:14:34,160 --> 00:14:37,490
the pipeline right stuff we're all

00:14:35,720 --> 00:14:44,060
familiar with so this is what we needed

00:14:37,490 --> 00:14:45,910
and so we built this know this well it

00:14:44,060 --> 00:14:47,930
started out like well here's the deal

00:14:45,910 --> 00:14:51,050
the important thing to remember from

00:14:47,930 --> 00:14:52,490
this slide is if you create a tool and

00:14:51,050 --> 00:14:54,050
you name it as something as benign as

00:14:52,490 --> 00:14:56,030
builder because I couldn't think of

00:14:54,050 --> 00:14:57,620
anything else to call it I thought well

00:14:56,030 --> 00:15:00,440
it builds stuff right so I'm going to

00:14:57,620 --> 00:15:02,060
call it builder then someone will come

00:15:00,440 --> 00:15:04,340
by your office cubicle and they'll put a

00:15:02,060 --> 00:15:07,220
picture of Bob the Builder on your

00:15:04,340 --> 00:15:09,380
cubical window and then for ever and

00:15:07,220 --> 00:15:11,750
ever inside the organization it will be

00:15:09,380 --> 00:15:15,460
known as as builder as Bob so that's

00:15:11,750 --> 00:15:15,460
what we call the tool that was created

00:15:16,990 --> 00:15:24,710
that one looks cooler right doesn't that

00:15:19,160 --> 00:15:28,940
kind of that one just looks so weird all

00:15:24,710 --> 00:15:30,170
right so introducing builder utilize

00:15:28,940 --> 00:15:33,530
this puppet that's probably pretty

00:15:30,170 --> 00:15:36,050
obvious it's a rapper that's built in

00:15:33,530 --> 00:15:38,150
bash it captures everything that's

00:15:36,050 --> 00:15:39,740
reported from puppet runs because we

00:15:38,150 --> 00:15:42,590
miss out because of the nature of

00:15:39,740 --> 00:15:44,390
masterless setups we miss out by some of

00:15:42,590 --> 00:15:47,950
the value adds of client server right we

00:15:44,390 --> 00:15:47,950
don't get some of the reporting etc etc

00:15:48,370 --> 00:15:53,390
it's modular which is really really

00:15:51,080 --> 00:15:53,610
really important so if a developer wants

00:15:53,390 --> 00:15:56,970
to

00:15:53,610 --> 00:15:58,380
the project and play with pieces inside

00:15:56,970 --> 00:16:00,750
of that stack they can do that all on

00:15:58,380 --> 00:16:02,700
their own without any intervention from

00:16:00,750 --> 00:16:04,290
me or from anyone else they can do that

00:16:02,700 --> 00:16:05,550
all on their own as they're testing and

00:16:04,290 --> 00:16:10,170
developing new different features and

00:16:05,550 --> 00:16:13,230
whatnot that was a big one for us needed

00:16:10,170 --> 00:16:15,209
to be automatable needed to be pluggable

00:16:13,230 --> 00:16:16,829
meaning that there's things that we do

00:16:15,209 --> 00:16:20,010
that we tell our customers to do before

00:16:16,829 --> 00:16:22,019
and install the suite and after and then

00:16:20,010 --> 00:16:23,850
we wanted it to be awesome right I

00:16:22,019 --> 00:16:26,010
wanted to be the one tool that everyone

00:16:23,850 --> 00:16:29,010
inside the organization eventually got

00:16:26,010 --> 00:16:33,120
to using and I and I'm very proud that

00:16:29,010 --> 00:16:36,360
builder is now the way that all of

00:16:33,120 --> 00:16:39,480
engineering Quality Assurance those two

00:16:36,360 --> 00:16:41,550
big ones operations but also these other

00:16:39,480 --> 00:16:43,589
business units pre-sales sales

00:16:41,550 --> 00:16:45,839
engineering professional services are

00:16:43,589 --> 00:16:48,420
able to utilize this tool and stand-up

00:16:45,839 --> 00:16:49,709
stacks all on their own this is what a

00:16:48,420 --> 00:16:51,600
picture of the project kind of looks

00:16:49,709 --> 00:16:55,610
like it's not out on github we use get

00:16:51,600 --> 00:16:57,779
lab which is a an internal private only

00:16:55,610 --> 00:17:02,130
installation replication if you will of

00:16:57,779 --> 00:17:03,269
get lab or of github so you'll notice or

00:17:02,130 --> 00:17:09,120
what I want to call your attention to

00:17:03,269 --> 00:17:12,240
are the AC apply and the M apply these

00:17:09,120 --> 00:17:15,839
are what the M apply is directly what

00:17:12,240 --> 00:17:18,419
users interact with in a non automated

00:17:15,839 --> 00:17:21,900
way the AC apply basically takes

00:17:18,419 --> 00:17:24,030
anything that's been given by a user if

00:17:21,900 --> 00:17:27,720
they've called it manually and passes

00:17:24,030 --> 00:17:31,470
that into the AC apply to then initiate

00:17:27,720 --> 00:17:33,600
the run the puppet runs the AC apply can

00:17:31,470 --> 00:17:36,390
also be given command line arguments

00:17:33,600 --> 00:17:38,840
right so we have an RPM that we released

00:17:36,390 --> 00:17:42,210
but we also release a tarball right

00:17:38,840 --> 00:17:43,890
everything can be passed into the AC

00:17:42,210 --> 00:17:45,900
apply script and well sure I'll show

00:17:43,890 --> 00:17:48,030
this stuff to you but just to give you

00:17:45,900 --> 00:17:50,070
some background on everything can be

00:17:48,030 --> 00:17:52,169
passed into the AC apply script from

00:17:50,070 --> 00:17:54,960
again Jenkins right so when we when we

00:17:52,169 --> 00:17:57,900
finish a build we want to test that we

00:17:54,960 --> 00:17:59,700
passed these permit parameters into AC

00:17:57,900 --> 00:18:01,500
apply and then via reaching out to

00:17:59,700 --> 00:18:05,490
OpenStack we stand up stand up the stack

00:18:01,500 --> 00:18:07,410
etc right back here one other thing to

00:18:05,490 --> 00:18:09,120
call note to ancillary was

00:18:07,410 --> 00:18:11,070
what I deemed is all the places for our

00:18:09,120 --> 00:18:14,120
Lego bricks if you will all the pieces

00:18:11,070 --> 00:18:16,590
all the modules this is an example

00:18:14,120 --> 00:18:18,840
directory listing from the ancillary

00:18:16,590 --> 00:18:21,210
folder we talked about things like Java

00:18:18,840 --> 00:18:22,770
6 and 7 different versions of our

00:18:21,210 --> 00:18:24,960
product depend on different versions of

00:18:22,770 --> 00:18:27,990
Java being there right so everything is

00:18:24,960 --> 00:18:29,550
modular Moab is the name of our software

00:18:27,990 --> 00:18:31,680
so we have a we have a module that

00:18:29,550 --> 00:18:37,140
places that Moab file for us right

00:18:31,680 --> 00:18:41,340
modular pieces building bricks right so

00:18:37,140 --> 00:18:44,010
this is what the output from a.m apply

00:18:41,340 --> 00:18:46,470
looks like or I'm sorry this is an

00:18:44,010 --> 00:18:48,600
output from just em apply the the the

00:18:46,470 --> 00:18:51,330
shell script in general you'll notice

00:18:48,600 --> 00:18:53,310
the options that we give users right RPM

00:18:51,330 --> 00:18:55,140
is assumed in the script but we also

00:18:53,310 --> 00:18:56,790
allow them to test via tarball because

00:18:55,140 --> 00:18:59,760
we want to test that those bits that we

00:18:56,790 --> 00:19:02,100
give to customers as well cloud we also

00:18:59,760 --> 00:19:03,720
have a cloud offering and then recently

00:19:02,100 --> 00:19:05,520
we've added the ability to replicate

00:19:03,720 --> 00:19:07,740
customer environments right so as our

00:19:05,520 --> 00:19:09,510
support team wants to test something

00:19:07,740 --> 00:19:11,430
that a bug that a customer seeing they

00:19:09,510 --> 00:19:13,320
can stand up a customer environment via

00:19:11,430 --> 00:19:16,080
builder right there on the fly as well

00:19:13,320 --> 00:19:21,570
so that's what that's what this the M

00:19:16,080 --> 00:19:22,950
apply script looks like this is the kind

00:19:21,570 --> 00:19:25,860
of the most important piece out of the

00:19:22,950 --> 00:19:28,260
AC apply script you'll notice that we

00:19:25,860 --> 00:19:30,500
set some custom factor variables and

00:19:28,260 --> 00:19:33,150
then we have things that happen pre

00:19:30,500 --> 00:19:36,000
right so we do things before we install

00:19:33,150 --> 00:19:38,220
a sweet then we have an install section

00:19:36,000 --> 00:19:42,900
of the sweet and then we do things on a

00:19:38,220 --> 00:19:46,770
post apply basis okay so modular LEGO

00:19:42,900 --> 00:19:50,940
building blocks pieces right this is the

00:19:46,770 --> 00:19:53,100
output of a run of the M apply on a

00:19:50,940 --> 00:19:55,950
machine so you'll notice each of these

00:19:53,100 --> 00:19:58,020
are l6 is right that's because factor

00:19:55,950 --> 00:20:00,090
has run it has detected that we're on a

00:19:58,020 --> 00:20:01,800
scent OS system that has detected the

00:20:00,090 --> 00:20:04,830
version of that sent to a system to be

00:20:01,800 --> 00:20:06,660
six and is only presenting for us that

00:20:04,830 --> 00:20:08,490
the associated property files that we

00:20:06,660 --> 00:20:11,040
can actually install on our operating

00:20:08,490 --> 00:20:12,630
system okay and so the other thing to

00:20:11,040 --> 00:20:18,840
remember about builder is that it's

00:20:12,630 --> 00:20:20,250
property file driven okay think pieces

00:20:18,840 --> 00:20:20,850
right we want to be able to do things

00:20:20,250 --> 00:20:22,050
before

00:20:20,850 --> 00:20:24,120
and do things after and then have a

00:20:22,050 --> 00:20:27,510
consistent way to do things in the

00:20:24,120 --> 00:20:29,790
middle this is an example listing of

00:20:27,510 --> 00:20:31,830
what some of the property files we have

00:20:29,790 --> 00:20:38,250
notice we have el5 s and yell sixes in

00:20:31,830 --> 00:20:42,090
there this is an example of the property

00:20:38,250 --> 00:20:45,150
file itself so again you'll notice we do

00:20:42,090 --> 00:20:47,220
things in the pre apply section we

00:20:45,150 --> 00:20:50,400
already talked about Java 7 so we apply

00:20:47,220 --> 00:20:52,050
Java 7 we because it's an openstack we

00:20:50,400 --> 00:20:54,030
have to do some munching of the hostname

00:20:52,050 --> 00:20:55,680
so that when we install our product it

00:20:54,030 --> 00:20:58,650
actually functions correctly the way

00:20:55,680 --> 00:21:00,570
that we intended to you'll notice that

00:20:58,650 --> 00:21:02,280
we install MySQL then in the middle here

00:21:00,570 --> 00:21:03,660
this this in-between section is where we

00:21:02,280 --> 00:21:06,600
do the install sweet you'll remember

00:21:03,660 --> 00:21:09,540
that from a few slides ago the the AC

00:21:06,600 --> 00:21:11,580
apply script installs the sweet and then

00:21:09,540 --> 00:21:13,260
we have a post apply list here right

00:21:11,580 --> 00:21:16,230
these are all the things that we tell

00:21:13,260 --> 00:21:18,990
our customers to do post configuration

00:21:16,230 --> 00:21:20,700
torque is a resource manager that we

00:21:18,990 --> 00:21:23,100
sponsor as adaptive computing but it's

00:21:20,700 --> 00:21:26,010
open source but we we lay down a

00:21:23,100 --> 00:21:28,200
resource manager we lay down obviously

00:21:26,010 --> 00:21:30,720
we have a couple different DBS mysql and

00:21:28,200 --> 00:21:32,880
 we lay down some system tests

00:21:30,720 --> 00:21:34,740
that's the only thing that's outside of

00:21:32,880 --> 00:21:36,630
exactly what we tell a customer to do

00:21:34,740 --> 00:21:38,970
because we want to make sure that some

00:21:36,630 --> 00:21:42,690
of these builds pass are our nose

00:21:38,970 --> 00:21:44,820
testing MWSS moab web services we have

00:21:42,690 --> 00:21:46,710
some users that we tell folks to place

00:21:44,820 --> 00:21:48,300
all this is automated their property

00:21:46,710 --> 00:21:54,690
file right again giving people that

00:21:48,300 --> 00:21:57,690
ability to stand up a suite on the fly

00:21:54,690 --> 00:21:59,640
right on the fly using builder one tool

00:21:57,690 --> 00:22:06,770
no matter who you are in the company an

00:21:59,640 --> 00:22:10,350
example of Java 7 or Java yeah java 7

00:22:06,770 --> 00:22:12,180
JRE 17 there so this is what an actual

00:22:10,350 --> 00:22:13,680
and it not PP file will look that should

00:22:12,180 --> 00:22:17,880
be very familiar for you puppet nerds

00:22:13,680 --> 00:22:21,090
out there this is encapsulated inside of

00:22:17,880 --> 00:22:23,720
the ancillary folder java 7 manifest and

00:22:21,090 --> 00:22:27,990
it PP right it should look very familiar

00:22:23,720 --> 00:22:30,600
and then this is a rinse and repeat

00:22:27,990 --> 00:22:32,550
right obviously the Julia Child's

00:22:30,600 --> 00:22:34,590
kitchen here we're usually seeing

00:22:32,550 --> 00:22:38,640
execution times in the 11-minute

00:22:34,590 --> 00:22:40,350
change but this is what the output of em

00:22:38,640 --> 00:22:42,210
apply will look like once a developer

00:22:40,350 --> 00:22:44,460
has run it on their own individual

00:22:42,210 --> 00:22:47,100
OpenStack instance you get down here you

00:22:44,460 --> 00:22:48,600
will capture a total runtime and it'll

00:22:47,100 --> 00:22:50,159
show all the different manifests that

00:22:48,600 --> 00:22:52,110
have been applied if there's any error

00:22:50,159 --> 00:22:54,960
here will actually capture that for them

00:22:52,110 --> 00:22:57,000
and alert them to it via the standard

00:22:54,960 --> 00:22:59,669
out the puppets giving and it's error

00:22:57,000 --> 00:23:01,500
and warning messages average install

00:22:59,669 --> 00:23:04,380
takes like I said for our most complex

00:23:01,500 --> 00:23:07,020
product which is called inner inner HPC

00:23:04,380 --> 00:23:08,789
enter price we has all the different

00:23:07,020 --> 00:23:11,220
variations and flavors that you can that

00:23:08,789 --> 00:23:15,029
you can plug into a takes about 11 11

00:23:11,220 --> 00:23:17,039
minutes or so so just to understand 12

00:23:15,029 --> 00:23:20,309
hours historically have developers time

00:23:17,039 --> 00:23:21,990
that's that's a long time right for a

00:23:20,309 --> 00:23:25,350
developer to go through this step

00:23:21,990 --> 00:23:28,230
manually down to about 11 minutes was a

00:23:25,350 --> 00:23:30,690
huge was a huge win inside of inside of

00:23:28,230 --> 00:23:35,130
our organization right huge time

00:23:30,690 --> 00:23:38,190
reduction 11 minutes it's repeatable

00:23:35,130 --> 00:23:40,679
right builder is now the way the only

00:23:38,190 --> 00:23:42,840
way that we allow people to install our

00:23:40,679 --> 00:23:44,340
stack it is also the approved way we

00:23:42,840 --> 00:23:45,990
want to encourage as many people as

00:23:44,340 --> 00:23:50,399
possible to go ahead and use this way

00:23:45,990 --> 00:23:52,740
because it's supported the property

00:23:50,399 --> 00:23:55,080
files that we looked at earlier in the

00:23:52,740 --> 00:23:57,000
deck follow our documentation that we

00:23:55,080 --> 00:23:59,130
release to customers right it's

00:23:57,000 --> 00:24:01,049
important that we give them our very

00:23:59,130 --> 00:24:03,480
best and so that's one way that we can

00:24:01,049 --> 00:24:05,190
do that and again we created those tight

00:24:03,480 --> 00:24:07,980
feedback loops and we know immediately

00:24:05,190 --> 00:24:10,110
if we change something in documentation

00:24:07,980 --> 00:24:12,029
or even change something in a build if a

00:24:10,110 --> 00:24:13,830
developer changes and fixes a bug will

00:24:12,029 --> 00:24:15,870
have immediate feedback once that build

00:24:13,830 --> 00:24:17,190
has been committed and associated

00:24:15,870 --> 00:24:19,740
Jenkins job has run we'll know

00:24:17,190 --> 00:24:23,970
immediately if that's you know been

00:24:19,740 --> 00:24:25,620
successful or not and then because of

00:24:23,970 --> 00:24:28,890
the ability to pass command-line

00:24:25,620 --> 00:24:31,590
arguments to the AC apply script we're

00:24:28,890 --> 00:24:33,270
able to reach out in Jenkins and reach

00:24:31,590 --> 00:24:35,850
out into open stack and stand up these

00:24:33,270 --> 00:24:38,070
these instances kind of on the fly we do

00:24:35,850 --> 00:24:39,960
this I'd really like to say hundreds of

00:24:38,070 --> 00:24:41,370
times a day but we do it tens of times a

00:24:39,960 --> 00:24:43,080
day we don't have a huge engineering

00:24:41,370 --> 00:24:46,530
department but this is being utilized

00:24:43,080 --> 00:24:48,340
today tens of times a day to the tune of

00:24:46,530 --> 00:24:50,049
probably you know i'd say anywhere in

00:24:48,340 --> 00:24:52,809
range of 50 to 60 installs a day

00:24:50,049 --> 00:24:54,640
depending on which phase of the release

00:24:52,809 --> 00:24:58,120
were going through which is which is

00:24:54,640 --> 00:25:01,559
really gratifying some things that that

00:24:58,120 --> 00:25:06,120
I missed as I was thinking about this

00:25:01,559 --> 00:25:08,620
because we don't have the typical source

00:25:06,120 --> 00:25:11,529
from the puppet master meaning I can't

00:25:08,620 --> 00:25:14,320
do a source colon slash slash module

00:25:11,529 --> 00:25:16,960
name files directory and then a file i

00:25:14,320 --> 00:25:20,140
made a early assumption to go ahead and

00:25:16,960 --> 00:25:22,539
put relative paths and in all of the

00:25:20,140 --> 00:25:27,220
ancillary manifest files meaning that

00:25:22,539 --> 00:25:30,399
we're kind of tied to temp it's proven

00:25:27,220 --> 00:25:35,049
to be a little bit of a limitation the

00:25:30,399 --> 00:25:36,789
reporting is fairly basic one of the

00:25:35,049 --> 00:25:39,610
things that the the bash wrapper does

00:25:36,789 --> 00:25:41,620
after a successful run as it will report

00:25:39,610 --> 00:25:46,990
basically do a simple curl command out

00:25:41,620 --> 00:25:50,860
to a PHP app to record things like what

00:25:46,990 --> 00:25:53,830
flavor was an enterprise or was it basic

00:25:50,860 --> 00:25:56,110
was it you know five or six and then

00:25:53,830 --> 00:25:58,029
also what the total time was on the run

00:25:56,110 --> 00:26:00,039
and then who ran it obviously it's

00:25:58,029 --> 00:26:03,059
primarily always going to be root

00:26:00,039 --> 00:26:05,710
because we want to get things done right

00:26:03,059 --> 00:26:08,890
but we miss out on some of the reporting

00:26:05,710 --> 00:26:10,149
right it'd be really nice to know we are

00:26:08,890 --> 00:26:12,070
be really nice to get a little bit

00:26:10,149 --> 00:26:13,480
better insight and introspection into

00:26:12,070 --> 00:26:17,740
the actual puppet runs and how they're

00:26:13,480 --> 00:26:20,320
doing and then again we mentioned this

00:26:17,740 --> 00:26:23,020
already but who right we if a user logs

00:26:20,320 --> 00:26:26,080
into OpenStack puppet runs as root

00:26:23,020 --> 00:26:29,409
therefore we we force the root user to

00:26:26,080 --> 00:26:32,980
be run when we're running em apply right

00:26:29,409 --> 00:26:35,070
we should be able to better escape that

00:26:32,980 --> 00:26:37,840
root user have a have a pseudo in there

00:26:35,070 --> 00:26:39,460
and then be able to capture who actually

00:26:37,840 --> 00:26:41,350
ran that so we'd like to know inside of

00:26:39,460 --> 00:26:43,390
organization you know is it Fred and Joe

00:26:41,350 --> 00:26:45,010
that keep running these and Brian's not

00:26:43,390 --> 00:26:46,630
we just like a little bit better

00:26:45,010 --> 00:26:49,210
introspection into who's actually

00:26:46,630 --> 00:26:51,880
utilizing the tool we do a we do a

00:26:49,210 --> 00:26:53,230
survey to know how many respondents were

00:26:51,880 --> 00:26:54,789
actually using the tool we'd like to get

00:26:53,230 --> 00:26:56,169
a little more granular in our reporting

00:26:54,789 --> 00:26:59,799
there so those are some things that were

00:26:56,169 --> 00:27:01,700
obviously missed in the tool tools not

00:26:59,799 --> 00:27:04,809
perfect no tools perfect right

00:27:01,700 --> 00:27:09,649
but it's important to call those out and

00:27:04,809 --> 00:27:14,330
so again as a recap 12 hours of time

00:27:09,649 --> 00:27:17,630
down to 11 minutes the way to install at

00:27:14,330 --> 00:27:19,730
adaptive our product stack the benefits

00:27:17,630 --> 00:27:21,230
are spilling over into other business

00:27:19,730 --> 00:27:23,059
groups which is really important for us

00:27:21,230 --> 00:27:24,730
meaning that these efficient

00:27:23,059 --> 00:27:26,570
inefficiencies that are inside of

00:27:24,730 --> 00:27:28,730
engineering are not getting propagated

00:27:26,570 --> 00:27:30,139
to other business units that's that's

00:27:28,730 --> 00:27:31,700
really important for us we want to

00:27:30,139 --> 00:27:35,919
enable the organization instead of

00:27:31,700 --> 00:27:39,350
detain them right and that's about it so

00:27:35,919 --> 00:27:40,940
thanks for your time we'll get on to the

00:27:39,350 --> 00:27:43,250
next speaker and then let you guys get

00:27:40,940 --> 00:27:45,559
out here for dinner any questions I can

00:27:43,250 --> 00:27:47,330
be reached there via Twitter or I'd be

00:27:45,559 --> 00:27:51,010
happy to take a question or two if you

00:27:47,330 --> 00:27:51,010
have any alright guys thanks so much

00:28:01,870 --> 00:28:03,930

YouTube URL: https://www.youtube.com/watch?v=EFByexKKkIE


