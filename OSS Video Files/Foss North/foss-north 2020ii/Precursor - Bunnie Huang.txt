Title: Precursor - Bunnie Huang
Publication date: 2020-11-02
Playlist: foss-north 2020ii
Description: 
	Talk details: https://foss-north.se/2020ii/speakers-and-talks.html#ahuang
Conference details: https://foss-north.se/2020ii/
Captions: 
	00:00:12,480 --> 00:00:16,960
welcome to another

00:00:13,759 --> 00:00:20,320
virtual frost north event big thanks to

00:00:16,960 --> 00:00:20,320
our sponsors and partners

00:00:29,439 --> 00:00:33,520
make my screen go away and replace it

00:00:32,480 --> 00:00:36,399
with

00:00:33,520 --> 00:00:37,200
slides which i think you guys can now

00:00:36,399 --> 00:00:41,840
see

00:00:37,200 --> 00:00:43,680
and let me go full screen and great so

00:00:41,840 --> 00:00:45,120
uh today i'd really like to talk to you

00:00:43,680 --> 00:00:46,320
a bit about um

00:00:45,120 --> 00:00:48,320
a project i'm working on called

00:00:46,320 --> 00:00:49,920
precursor and the idea of this project

00:00:48,320 --> 00:00:53,280
is to facilitate

00:00:49,920 --> 00:00:56,399
what i call evan evidence-based trust

00:00:53,280 --> 00:00:58,239
for secure mobile computation um

00:00:56,399 --> 00:01:00,960
and so you know getting into this let's

00:00:58,239 --> 00:01:02,879
start with the basic question of do you

00:01:00,960 --> 00:01:04,320
trust your computer if you do why or if

00:01:02,879 --> 00:01:07,280
you don't why not

00:01:04,320 --> 00:01:08,400
right if we think about the trust

00:01:07,280 --> 00:01:11,360
problem in software

00:01:08,400 --> 00:01:13,840
we have a bit of a bias to perhaps think

00:01:11,360 --> 00:01:16,400
that more open things are more trustable

00:01:13,840 --> 00:01:18,400
but you know why is that is it because

00:01:16,400 --> 00:01:19,920
you know in open source we can actually

00:01:18,400 --> 00:01:21,520
read the source thoroughly and check it

00:01:19,920 --> 00:01:23,680
every single time there's a release of

00:01:21,520 --> 00:01:25,200
you know you know chrome or firefox we

00:01:23,680 --> 00:01:26,560
check all those lines or that we could

00:01:25,200 --> 00:01:28,479
actually compile our browsers from

00:01:26,560 --> 00:01:29,840
source before we use them and you know

00:01:28,479 --> 00:01:31,600
actually there's not enough time in the

00:01:29,840 --> 00:01:34,880
day to do that

00:01:31,600 --> 00:01:36,560
and the reason why we feel more

00:01:34,880 --> 00:01:38,320
trustable in this type of software is

00:01:36,560 --> 00:01:39,360
that they're actually evidence-based

00:01:38,320 --> 00:01:41,680
tools

00:01:39,360 --> 00:01:43,360
that we can use to transfer trust

00:01:41,680 --> 00:01:44,799
between different stages of the

00:01:43,360 --> 00:01:46,079
development process so we have things

00:01:44,799 --> 00:01:47,920
like hashing and

00:01:46,079 --> 00:01:49,920
public keys and merkle trees which is

00:01:47,920 --> 00:01:51,119
what is based off of to try and transfer

00:01:49,920 --> 00:01:53,280
trust

00:01:51,119 --> 00:01:55,119
so you know hashing just to recall you

00:01:53,280 --> 00:01:57,119
know takes a big pile of bits and turns

00:01:55,119 --> 00:02:00,240
into a short sequence of symbols so that

00:01:57,119 --> 00:02:01,759
a tiny change inside the file itself

00:02:00,240 --> 00:02:02,880
will make a big change in the output

00:02:01,759 --> 00:02:04,399
symbol so it's very obvious that

00:02:02,880 --> 00:02:06,479
someone's tampered with something with a

00:02:04,399 --> 00:02:07,920
hash and it's also very hard to

00:02:06,479 --> 00:02:10,319
tamper with it in a way that creates the

00:02:07,920 --> 00:02:12,640
same set of symbols and signing

00:02:10,319 --> 00:02:14,160
then allows us to take that that set of

00:02:12,640 --> 00:02:15,840
symbols that shorthand for what should

00:02:14,160 --> 00:02:17,120
be in the file and encrypt it so that we

00:02:15,840 --> 00:02:19,440
can't tamper with

00:02:17,120 --> 00:02:20,879
the signature at the end of the day and

00:02:19,440 --> 00:02:24,080
so the key point is that

00:02:20,879 --> 00:02:27,280
uh you know in software you know we have

00:02:24,080 --> 00:02:28,560
this ability uh to transfer trusts so

00:02:27,280 --> 00:02:30,720
that the place of check

00:02:28,560 --> 00:02:32,239
is near the user so we have you know in

00:02:30,720 --> 00:02:33,120
sort of the the software development

00:02:32,239 --> 00:02:34,879
cycle

00:02:33,120 --> 00:02:36,480
maybe we have some developers who are in

00:02:34,879 --> 00:02:38,160
the community maybe you even know some

00:02:36,480 --> 00:02:39,760
of them and they're working in git

00:02:38,160 --> 00:02:41,519
and they they use merkle trees to go

00:02:39,760 --> 00:02:43,920
ahead and make sure that everything is

00:02:41,519 --> 00:02:45,120
you know attached to a commit it then

00:02:43,920 --> 00:02:46,319
goes to the cloud and some build

00:02:45,120 --> 00:02:47,280
infrastructure we don't even know who's

00:02:46,319 --> 00:02:49,440
there could be some

00:02:47,280 --> 00:02:51,120
some malicious people who even run that

00:02:49,440 --> 00:02:52,640
but you know as long as

00:02:51,120 --> 00:02:54,800
someone's checking the output of that

00:02:52,640 --> 00:02:56,720
and signing it that person

00:02:54,800 --> 00:02:58,480
can then sign that build send it to a

00:02:56,720 --> 00:03:00,879
cdn that we don't trust

00:02:58,480 --> 00:03:02,000
download it into different stages also

00:03:00,879 --> 00:03:03,519
that we don't trust

00:03:02,000 --> 00:03:05,519
until we finally get to the ram on our

00:03:03,519 --> 00:03:07,920
cpu and then we can go ahead

00:03:05,519 --> 00:03:09,840
and actually check that the the software

00:03:07,920 --> 00:03:10,480
going to run matches what the developer

00:03:09,840 --> 00:03:12,959
intended

00:03:10,480 --> 00:03:14,959
right at the place of use and because

00:03:12,959 --> 00:03:16,640
it's open source we can have auditors

00:03:14,959 --> 00:03:18,159
who then take the copies of stuff that

00:03:16,640 --> 00:03:19,760
are downloaded and you know check them

00:03:18,159 --> 00:03:21,599
against builds and say okay everything's

00:03:19,760 --> 00:03:24,640
checking out so we have this way

00:03:21,599 --> 00:03:26,239
to transfer trust and software the

00:03:24,640 --> 00:03:28,560
problem with evidence based

00:03:26,239 --> 00:03:29,840
trust and hardware is that it's actually

00:03:28,560 --> 00:03:31,440
a talk to problem

00:03:29,840 --> 00:03:33,120
it's a time of check a time of use

00:03:31,440 --> 00:03:34,319
problem all the way through the hardware

00:03:33,120 --> 00:03:36,959
supply chain

00:03:34,319 --> 00:03:38,480
and so just to sort of think through

00:03:36,959 --> 00:03:40,959
what this means let's imagine

00:03:38,480 --> 00:03:42,720
you know for example we have you and you

00:03:40,959 --> 00:03:44,400
know there are class of things

00:03:42,720 --> 00:03:45,920
like even if you've checked everything

00:03:44,400 --> 00:03:47,840
you have evil made so maybe you've

00:03:45,920 --> 00:03:49,599
you've checked your computer and then

00:03:47,840 --> 00:03:51,040
you know someone can go ahead and modify

00:03:49,599 --> 00:03:51,760
your computer after you've checked let's

00:03:51,040 --> 00:03:54,640
not

00:03:51,760 --> 00:03:55,840
worry quite about that one yet but let's

00:03:54,640 --> 00:03:58,239
worry a little bit more about more

00:03:55,840 --> 00:03:59,360
common scenarios for example like

00:03:58,239 --> 00:04:01,200
you're getting something from a

00:03:59,360 --> 00:04:02,000
distributor and it goes through a

00:04:01,200 --> 00:04:03,840
courier

00:04:02,000 --> 00:04:05,439
right and so you've you you have reason

00:04:03,840 --> 00:04:07,200
to trust maybe that

00:04:05,439 --> 00:04:08,480
the person selling you the computer is

00:04:07,200 --> 00:04:09,920
selling a good computer but

00:04:08,480 --> 00:04:11,519
now it's you know it's gone through a

00:04:09,920 --> 00:04:12,319
third party a truck or something like

00:04:11,519 --> 00:04:14,640
that

00:04:12,319 --> 00:04:16,320
um and unfortunately we have actual

00:04:14,640 --> 00:04:17,600
evidence that there are government

00:04:16,320 --> 00:04:20,560
programs to go ahead

00:04:17,600 --> 00:04:22,560
and intercept packages and put implants

00:04:20,560 --> 00:04:26,240
inside of them on route between

00:04:22,560 --> 00:04:28,960
you know a vendor and a customer right

00:04:26,240 --> 00:04:30,560
um let's say you know we trust all those

00:04:28,960 --> 00:04:31,840
things well we have the problem of like

00:04:30,560 --> 00:04:34,000
returns and exchanges

00:04:31,840 --> 00:04:36,160
other customers actually because of the

00:04:34,000 --> 00:04:37,040
way our sort of logistics work today

00:04:36,160 --> 00:04:39,120
with amazon

00:04:37,040 --> 00:04:41,040
and all the online buying is that people

00:04:39,120 --> 00:04:43,120
can buy something

00:04:41,040 --> 00:04:44,800
tamper with it put it back in a box with

00:04:43,120 --> 00:04:46,560
the tamper evidence seals in place and

00:04:44,800 --> 00:04:48,160
then return it back and so now

00:04:46,560 --> 00:04:50,080
they may not be able to direct a

00:04:48,160 --> 00:04:51,759
particular malicious package at you

00:04:50,080 --> 00:04:53,440
specifically but they have a good chance

00:04:51,759 --> 00:04:54,000
of targeting people in the region so you

00:04:53,440 --> 00:04:56,160
could

00:04:54,000 --> 00:04:57,759
imagine a distributor that is near the

00:04:56,160 --> 00:04:59,840
data center or the noc

00:04:57,759 --> 00:05:01,680
may you you may have someone being paid

00:04:59,840 --> 00:05:02,240
to buy things tamper with them return

00:05:01,680 --> 00:05:04,080
them into

00:05:02,240 --> 00:05:05,280
into the into the system so you can try

00:05:04,080 --> 00:05:08,080
and get an implant

00:05:05,280 --> 00:05:09,440
closer to the point of of of interest

00:05:08,080 --> 00:05:10,960
and you know

00:05:09,440 --> 00:05:12,880
there's some actually really interesting

00:05:10,960 --> 00:05:13,520
talks about you know how this happens uh

00:05:12,880 --> 00:05:15,440
particularly

00:05:13,520 --> 00:05:16,560
in the in the sort of the the bitcoin

00:05:15,440 --> 00:05:18,960
wallet space you know

00:05:16,560 --> 00:05:20,639
attempts to remove um uh these tamper

00:05:18,960 --> 00:05:21,919
evan stickers to replace them and also

00:05:20,639 --> 00:05:23,280
it just turns out the tamper event

00:05:21,919 --> 00:05:24,240
stickers are actually very easy to get

00:05:23,280 --> 00:05:26,560
printed

00:05:24,240 --> 00:05:27,759
and make them look new plus oftentimes

00:05:26,560 --> 00:05:29,280
customers don't even know what they look

00:05:27,759 --> 00:05:29,759
like so as long as it's shiny and it

00:05:29,280 --> 00:05:31,280
says

00:05:29,759 --> 00:05:33,039
you know warranty void if you move

00:05:31,280 --> 00:05:36,240
they'll probably accept it

00:05:33,039 --> 00:05:37,039
um so then that sort of illustrates sort

00:05:36,240 --> 00:05:38,880
of like the

00:05:37,039 --> 00:05:40,800
the close area issues but then we also

00:05:38,880 --> 00:05:42,479
have sort of the the geopolitical

00:05:40,800 --> 00:05:45,199
cross boundary issues of like we have a

00:05:42,479 --> 00:05:47,600
factory which may not be in your locale

00:05:45,199 --> 00:05:49,440
and of course things that come into your

00:05:47,600 --> 00:05:51,199
country go through a customs inspection

00:05:49,440 --> 00:05:52,080
right so there's a perfect opportunity

00:05:51,199 --> 00:05:54,639
there

00:05:52,080 --> 00:05:55,919
for some type of interception or some

00:05:54,639 --> 00:05:58,160
kind of tampering with

00:05:55,919 --> 00:05:59,680
um you know the hardware on route to to

00:05:58,160 --> 00:06:02,160
your local supply chain

00:05:59,680 --> 00:06:04,000
so if we go ahead and cut to the chase

00:06:02,160 --> 00:06:04,960
and sort of expand this all the way back

00:06:04,000 --> 00:06:06,960
so you know

00:06:04,960 --> 00:06:08,479
on the lower right here there's you

00:06:06,960 --> 00:06:10,960
hanging out

00:06:08,479 --> 00:06:12,240
you have a query distributor it goes

00:06:10,960 --> 00:06:14,000
through customs

00:06:12,240 --> 00:06:15,840
there's a factory but behind the factory

00:06:14,000 --> 00:06:17,199
is this enormous network of other

00:06:15,840 --> 00:06:18,720
suppliers that you don't see

00:06:17,199 --> 00:06:21,120
and don't normally look into but you

00:06:18,720 --> 00:06:22,160
have distributors who sell parts to the

00:06:21,120 --> 00:06:23,840
factory you have

00:06:22,160 --> 00:06:25,360
circuit board assembly you have people

00:06:23,840 --> 00:06:26,639
who are designing the product you have

00:06:25,360 --> 00:06:28,319
chip design

00:06:26,639 --> 00:06:30,080
mass prep chip fab and then you have

00:06:28,319 --> 00:06:32,080
these gray markets to operate behind

00:06:30,080 --> 00:06:34,639
factories to help facilitate you know

00:06:32,080 --> 00:06:36,560
what happens if you uh you know order a

00:06:34,639 --> 00:06:38,720
million units but you only sell 900 000

00:06:36,560 --> 00:06:40,080
do they throw away 100 000 units no they

00:06:38,720 --> 00:06:41,759
they end up in the gray market and

00:06:40,080 --> 00:06:43,199
people end up you know trading them

00:06:41,759 --> 00:06:45,039
with each other right that's just a part

00:06:43,199 --> 00:06:47,199
of uh business that exists

00:06:45,039 --> 00:06:48,319
that is very opaque behind this whole

00:06:47,199 --> 00:06:50,160
system

00:06:48,319 --> 00:06:51,919
so there's a big attack surface where

00:06:50,160 --> 00:06:52,479
things can go wrong in terms of trying

00:06:51,919 --> 00:06:55,199
to get

00:06:52,479 --> 00:06:56,960
trusted chips and trusted components

00:06:55,199 --> 00:06:58,720
into the supply chain

00:06:56,960 --> 00:07:00,319
so the question is you know can open

00:06:58,720 --> 00:07:01,440
source save us like so if we go ahead

00:07:00,319 --> 00:07:03,599
and we say now i've added to this

00:07:01,440 --> 00:07:05,680
picture in the lower left developers

00:07:03,599 --> 00:07:06,800
who are contributing ideas to get and

00:07:05,680 --> 00:07:08,319
and then sticking them

00:07:06,800 --> 00:07:09,919
on the left hand side here and then

00:07:08,319 --> 00:07:10,960
working it through the you know the

00:07:09,919 --> 00:07:13,599
supply chain to

00:07:10,960 --> 00:07:14,800
till it gets to the consumer the problem

00:07:13,599 --> 00:07:16,800
ultimately

00:07:14,800 --> 00:07:18,319
with just using open source to solve the

00:07:16,800 --> 00:07:20,880
hardware problem is that

00:07:18,319 --> 00:07:22,560
the place of check is too far from the

00:07:20,880 --> 00:07:24,080
place of use

00:07:22,560 --> 00:07:25,759
so you know you can have your ci checks

00:07:24,080 --> 00:07:28,240
in the cloud you can have an open

00:07:25,759 --> 00:07:28,960
physical design kit for the chip design

00:07:28,240 --> 00:07:30,960
you can have

00:07:28,960 --> 00:07:32,000
open pcb designs but then you're

00:07:30,960 --> 00:07:33,599
trusting

00:07:32,000 --> 00:07:35,520
this whole supply chain customs

00:07:33,599 --> 00:07:36,880
distributors other customers

00:07:35,520 --> 00:07:38,639
to make sure that things come to you

00:07:36,880 --> 00:07:40,639
without being tampered with

00:07:38,639 --> 00:07:42,400
um you know i've heard proposals like oh

00:07:40,639 --> 00:07:44,000
let's let's build a trustable factory

00:07:42,400 --> 00:07:46,319
like you know let's let's go ahead and

00:07:44,000 --> 00:07:47,360
put something on eu soil that you know

00:07:46,319 --> 00:07:49,120
is is is

00:07:47,360 --> 00:07:50,479
you know we watch over and make sure

00:07:49,120 --> 00:07:52,639
that it's all approved and

00:07:50,479 --> 00:07:53,840
and we don't have any sort of uh you

00:07:52,639 --> 00:07:56,000
know potential for

00:07:53,840 --> 00:07:57,599
all this gray market stuff going on and

00:07:56,000 --> 00:07:58,960
some open test infrastructure whatever

00:07:57,599 --> 00:08:00,960
it is the problem is you still

00:07:58,960 --> 00:08:02,400
haven't solved the problem of

00:08:00,960 --> 00:08:04,080
distributors and couriers and other

00:08:02,400 --> 00:08:05,759
customers and returns and exchanges that

00:08:04,080 --> 00:08:09,120
sort of thing

00:08:05,759 --> 00:08:09,520
so ultimately this stems from the fact

00:08:09,120 --> 00:08:12,639
that

00:08:09,520 --> 00:08:15,039
you can't hash hardware we don't have a

00:08:12,639 --> 00:08:17,120
hash function that we can run at home

00:08:15,039 --> 00:08:19,440
on the hardware we receive like we can

00:08:17,120 --> 00:08:20,639
run on the files we download from the

00:08:19,440 --> 00:08:22,000
internet and check them against

00:08:20,639 --> 00:08:22,800
signatures to make sure that they're any

00:08:22,000 --> 00:08:25,759
good so

00:08:22,800 --> 00:08:27,840
harder is you know one huge time of

00:08:25,759 --> 00:08:30,960
check the time of use problem

00:08:27,840 --> 00:08:32,399
so i've i'm on record saying that but

00:08:30,960 --> 00:08:33,680
you can always get a bigger microscope

00:08:32,399 --> 00:08:35,120
this is from the standpoint of like

00:08:33,680 --> 00:08:36,959
people trying to hide secrets and

00:08:35,120 --> 00:08:38,719
hardware and keys and whatnot i always

00:08:36,959 --> 00:08:40,320
say like look you know

00:08:38,719 --> 00:08:41,760
you know secrecy and hardware it doesn't

00:08:40,320 --> 00:08:43,360
really work because i can always get a

00:08:41,760 --> 00:08:44,080
microscope that can pull the secret out

00:08:43,360 --> 00:08:45,680
right

00:08:44,080 --> 00:08:47,360
and there are technological technologies

00:08:45,680 --> 00:08:49,600
like a tychographic x great

00:08:47,360 --> 00:08:51,120
x-rays um which are non-destructive

00:08:49,600 --> 00:08:51,600
which is good so you're not destroying

00:08:51,120 --> 00:08:53,360
the chip

00:08:51,600 --> 00:08:54,800
there they can do 3d imaging of very

00:08:53,360 --> 00:08:56,240
complex chips and they're really good

00:08:54,800 --> 00:08:58,000
for reverse engineering

00:08:56,240 --> 00:08:58,959
and verification there's a link to if

00:08:58,000 --> 00:09:00,560
you want to read more about it in a

00:08:58,959 --> 00:09:03,200
nature article here

00:09:00,560 --> 00:09:04,959
the catch is that the microscope is

00:09:03,200 --> 00:09:06,959
literally the size of a building this is

00:09:04,959 --> 00:09:10,320
uh i think this is in switzerland

00:09:06,959 --> 00:09:12,959
um and the this donut shaped

00:09:10,320 --> 00:09:14,720
thing here is is a building which is the

00:09:12,959 --> 00:09:16,480
light source for the microscope that is

00:09:14,720 --> 00:09:17,440
capable of doing that right so it's not

00:09:16,480 --> 00:09:20,000
something

00:09:17,440 --> 00:09:21,680
you're going to be able to just put next

00:09:20,000 --> 00:09:23,600
to your house i mean maybe you could but

00:09:21,680 --> 00:09:25,600
like i don't think most people can

00:09:23,600 --> 00:09:27,120
and uh and and use it to inspect your

00:09:25,600 --> 00:09:27,600
chips so now you have this problem of we

00:09:27,120 --> 00:09:29,440
can

00:09:27,600 --> 00:09:31,279
send maybe chips to this microscope to

00:09:29,440 --> 00:09:32,880
check but then you're once again back in

00:09:31,279 --> 00:09:34,480
the courier problem of you know now it

00:09:32,880 --> 00:09:35,920
has to maybe go through customs because

00:09:34,480 --> 00:09:36,720
the microscope isn't in your same

00:09:35,920 --> 00:09:38,000
country

00:09:36,720 --> 00:09:39,279
has to go through a courier and then

00:09:38,000 --> 00:09:40,720
gets to the over to you so you didn't

00:09:39,279 --> 00:09:42,399
have a timer check the time of use

00:09:40,720 --> 00:09:43,920
problem

00:09:42,399 --> 00:09:45,440
the second problem is that actually

00:09:43,920 --> 00:09:48,800
checking one chip

00:09:45,440 --> 00:09:50,800
only checks one chip right you wouldn't

00:09:48,800 --> 00:09:52,880
say okay i'm just going to download a

00:09:50,800 --> 00:09:55,519
file once you know from the internet

00:09:52,880 --> 00:09:56,959
and and check hash check it and say okay

00:09:55,519 --> 00:09:59,680
all the future downloads will be

00:09:56,959 --> 00:10:00,880
okay right so you know but then in

00:09:59,680 --> 00:10:02,640
hardware people are like well let's just

00:10:00,880 --> 00:10:04,320
take samples of chips

00:10:02,640 --> 00:10:06,079
take them apart and look on the inside

00:10:04,320 --> 00:10:07,440
and confirm that there's no implants on

00:10:06,079 --> 00:10:09,519
this one sample of a chip

00:10:07,440 --> 00:10:10,880
i mean it's the exact same problem just

00:10:09,519 --> 00:10:12,800
because you've checked

00:10:10,880 --> 00:10:15,200
one sample out of a million that says

00:10:12,800 --> 00:10:18,480
nothing about the other 999

00:10:15,200 --> 00:10:20,000
999 you know parts out there um and so

00:10:18,480 --> 00:10:22,240
random sampling is just

00:10:20,000 --> 00:10:23,040
not actually effective so you know when

00:10:22,240 --> 00:10:24,560
you when

00:10:23,040 --> 00:10:26,079
you want to implement a checking program

00:10:24,560 --> 00:10:27,600
a thorough one it has to be on a hundred

00:10:26,079 --> 00:10:30,800
percent of the units

00:10:27,600 --> 00:10:33,279
going to uh critical points of use

00:10:30,800 --> 00:10:34,560
so then okay you know i've sort of

00:10:33,279 --> 00:10:38,000
painted a semi

00:10:34,560 --> 00:10:40,160
bleak picture of of of of sort of the

00:10:38,000 --> 00:10:41,519
the hardware trust issue and the

00:10:40,160 --> 00:10:44,480
question is can we build

00:10:41,519 --> 00:10:46,399
an evidence-based case to trust our

00:10:44,480 --> 00:10:47,519
computers you know in the face of things

00:10:46,399 --> 00:10:50,160
like you know this

00:10:47,519 --> 00:10:50,560
nominal article that bloomberg put out

00:10:50,160 --> 00:10:52,000
which

00:10:50,560 --> 00:10:54,000
you know you can argue about the

00:10:52,000 --> 00:10:55,519
veracity of it or not but you know the

00:10:54,000 --> 00:10:57,600
a lot of the facts on the inside are

00:10:55,519 --> 00:10:59,440
absolutely technically true

00:10:57,600 --> 00:11:00,880
whether it happened or not is is is you

00:10:59,440 --> 00:11:02,320
know we can't say for sure because we

00:11:00,880 --> 00:11:03,200
don't actually have the instance of the

00:11:02,320 --> 00:11:04,720
device

00:11:03,200 --> 00:11:06,399
uh but you know there's also you know

00:11:04,720 --> 00:11:09,040
these pages from the snowden files

00:11:06,399 --> 00:11:10,560
about you know literally you know cables

00:11:09,040 --> 00:11:12,320
with implants on the inside

00:11:10,560 --> 00:11:14,800
of them that can go ahead and exfiltrate

00:11:12,320 --> 00:11:17,519
data that looks exactly like

00:11:14,800 --> 00:11:19,120
a regular usb cable or ethernet cable or

00:11:17,519 --> 00:11:20,640
ethernet mag jack that would go into a

00:11:19,120 --> 00:11:24,399
computer

00:11:20,640 --> 00:11:27,200
so i've been thinking a lot about this

00:11:24,399 --> 00:11:28,640
and i think i've kind of managed to

00:11:27,200 --> 00:11:30,800
reduce if you really cared about

00:11:28,640 --> 00:11:32,880
evidence-based trust there are three

00:11:30,800 --> 00:11:34,079
principles i think that are important to

00:11:32,880 --> 00:11:37,920
embody

00:11:34,079 --> 00:11:39,440
um to to fix this problem first is that

00:11:37,920 --> 00:11:41,760
you know complexity is the enemy of

00:11:39,440 --> 00:11:42,320
verification second is that we should

00:11:41,760 --> 00:11:44,079
verify

00:11:42,320 --> 00:11:46,079
entire systems and not just individual

00:11:44,079 --> 00:11:47,760
components and finally

00:11:46,079 --> 00:11:49,519
we really need to make sure that end

00:11:47,760 --> 00:11:50,399
users are empowered empowered to do the

00:11:49,519 --> 00:11:52,320
verification

00:11:50,399 --> 00:11:54,079
and not just you know certification

00:11:52,320 --> 00:11:54,639
agencies or third parties or whatever it

00:11:54,079 --> 00:11:56,560
is so

00:11:54,639 --> 00:11:58,399
like we'll spend the next few minutes or

00:11:56,560 --> 00:12:02,480
going through what each of these lines

00:11:58,399 --> 00:12:05,200
implies right so when i say that

00:12:02,480 --> 00:12:06,240
we have complexity is the enemy of

00:12:05,200 --> 00:12:09,519
verification

00:12:06,240 --> 00:12:12,560
it's that literally you know phones are

00:12:09,519 --> 00:12:15,200
built out of a bazillion parts today

00:12:12,560 --> 00:12:16,720
um if you wanted to verify that every

00:12:15,200 --> 00:12:18,320
part of a phone is correct

00:12:16,720 --> 00:12:19,680
it's actually pretty hard and it's

00:12:18,320 --> 00:12:21,760
almost a destructive process because

00:12:19,680 --> 00:12:24,959
they have glue seals and everything and

00:12:21,760 --> 00:12:27,440
it's a it's it's pretty difficult and so

00:12:24,959 --> 00:12:28,079
there's a trade-off we have to make in

00:12:27,440 --> 00:12:30,000
terms of

00:12:28,079 --> 00:12:32,399
okay we really want to trust something

00:12:30,000 --> 00:12:35,600
but we also have to

00:12:32,399 --> 00:12:36,320
be able to realistically verify what's

00:12:35,600 --> 00:12:38,880
inside of it

00:12:36,320 --> 00:12:40,639
and one way to do that is to reduce the

00:12:38,880 --> 00:12:42,240
attack surface you have to verify

00:12:40,639 --> 00:12:43,839
reduce it to the core function that you

00:12:42,240 --> 00:12:45,839
really care about for security

00:12:43,839 --> 00:12:47,279
and not you know necessarily put in all

00:12:45,839 --> 00:12:49,920
the features for taking

00:12:47,279 --> 00:12:51,360
i know beautiful pictures of of of of

00:12:49,920 --> 00:12:53,440
your food or whatever it is

00:12:51,360 --> 00:12:55,440
at the table that's great but maybe you

00:12:53,440 --> 00:12:57,920
don't need that high level of trust for

00:12:55,440 --> 00:13:00,320
all those features all the time

00:12:57,920 --> 00:13:01,600
um of course if we go away from these

00:13:00,320 --> 00:13:02,959
complicated you know

00:13:01,600 --> 00:13:05,040
systems that we have today these super

00:13:02,959 --> 00:13:07,200
computers in our pocket um

00:13:05,040 --> 00:13:09,040
we can go say okay well let's just build

00:13:07,200 --> 00:13:10,320
a 6502 or something from discrete

00:13:09,040 --> 00:13:11,839
transistors this has been done

00:13:10,320 --> 00:13:14,480
a friend of mine he built the monster

00:13:11,839 --> 00:13:16,560
6502 uh it's literally

00:13:14,480 --> 00:13:18,720
a circuit board that has a transistor

00:13:16,560 --> 00:13:20,240
level implementation of the 6502 it's an

00:13:18,720 --> 00:13:22,079
8-bit uh cpu from

00:13:20,240 --> 00:13:23,440
you know 20 some odd years ago 30 years

00:13:22,079 --> 00:13:25,200
ago um

00:13:23,440 --> 00:13:26,639
you know it's trivial to verify that

00:13:25,200 --> 00:13:26,959
it's been built correctly because you

00:13:26,639 --> 00:13:28,399
can

00:13:26,959 --> 00:13:30,639
literally see the transistors with your

00:13:28,399 --> 00:13:31,680
own eyes the problem is it runs at a 50

00:13:30,639 --> 00:13:33,200
kilohertz clock rate

00:13:31,680 --> 00:13:35,519
right you're not going to really be able

00:13:33,200 --> 00:13:37,920
to do a lot with it

00:13:35,519 --> 00:13:39,360
and okay so let's say we just say let's

00:13:37,920 --> 00:13:41,040
not go so extreme that we're building it

00:13:39,360 --> 00:13:41,760
out of little discrete transistors let's

00:13:41,040 --> 00:13:43,360
build

00:13:41,760 --> 00:13:44,959
a processor out of a node that you can

00:13:43,360 --> 00:13:46,639
inspect with a microscope without having

00:13:44,959 --> 00:13:48,079
to get an electron microscope a regular

00:13:46,639 --> 00:13:50,240
light microscope can do it

00:13:48,079 --> 00:13:51,680
well the problem is photons are big

00:13:50,240 --> 00:13:53,920
they're like you know

00:13:51,680 --> 00:13:56,320
380 nanometers for blue light and so

00:13:53,920 --> 00:13:58,160
maybe 500 nanometers half a micron is

00:13:56,320 --> 00:13:59,440
what you're looking at for that type of

00:13:58,160 --> 00:14:01,760
process

00:13:59,440 --> 00:14:03,519
um well you know that turns out to be

00:14:01,760 --> 00:14:04,079
about a 100 megahertz clock rate you

00:14:03,519 --> 00:14:05,760
know with

00:14:04,079 --> 00:14:07,279
a lot of power consumption you know

00:14:05,760 --> 00:14:09,839
we're rolling the clock

00:14:07,279 --> 00:14:11,600
way way way back to the 80s or 90s in

00:14:09,839 --> 00:14:14,880
terms of process technology

00:14:11,600 --> 00:14:16,959
and um and you can maybe fit you know

00:14:14,880 --> 00:14:18,079
a couple kilobytes per square millimeter

00:14:16,959 --> 00:14:18,959
in that piece of silicon it's not going

00:14:18,079 --> 00:14:22,399
to do a lot

00:14:18,959 --> 00:14:23,680
right so when we talk about sort of

00:14:22,399 --> 00:14:25,440
complexity being the enemy of

00:14:23,680 --> 00:14:27,040
verification and we want to do

00:14:25,440 --> 00:14:28,639
point of views verification we have to

00:14:27,040 --> 00:14:30,560
think carefully about

00:14:28,639 --> 00:14:32,079
what features we're putting in and what

00:14:30,560 --> 00:14:33,519
people really need so on the left hand

00:14:32,079 --> 00:14:36,800
side here i have you know

00:14:33,519 --> 00:14:37,760
the you know the latest ipod earphones

00:14:36,800 --> 00:14:40,959
or whatever it is

00:14:37,760 --> 00:14:42,399
they probably have over 10 mil 100

00:14:40,959 --> 00:14:44,000
million transistors or something like

00:14:42,399 --> 00:14:46,160
this inside of it right

00:14:44,000 --> 00:14:47,839
um it's got a lot of features it's

00:14:46,160 --> 00:14:49,360
wireless and whatever it is but on the

00:14:47,839 --> 00:14:50,880
on the right hand side we have a

00:14:49,360 --> 00:14:52,639
functional equivalent thing which is

00:14:50,880 --> 00:14:54,959
like this little headset here

00:14:52,639 --> 00:14:56,480
i it has exactly one transistor it's

00:14:54,959 --> 00:14:57,360
used to bias the microphone on the

00:14:56,480 --> 00:14:59,839
inside

00:14:57,360 --> 00:15:01,519
um and you know everything else like the

00:14:59,839 --> 00:15:03,440
the earphones the pieces they're just

00:15:01,519 --> 00:15:05,360
magnets and wires you can go back to

00:15:03,440 --> 00:15:07,680
first principles and verify right

00:15:05,360 --> 00:15:09,440
and so here we have a situation on the

00:15:07,680 --> 00:15:10,480
left-hand side we have a completely you

00:15:09,440 --> 00:15:12,320
know you could have a bluetooth

00:15:10,480 --> 00:15:13,040
transmitter inside of a headphone that

00:15:12,320 --> 00:15:14,800
can transmit

00:15:13,040 --> 00:15:16,000
you know exfiltrate data whatever it is

00:15:14,800 --> 00:15:18,000
and you're never going to be able to

00:15:16,000 --> 00:15:20,079
have the time of the day to verify it

00:15:18,000 --> 00:15:21,519
um and the loss of function you get

00:15:20,079 --> 00:15:22,480
going to the right hand side is you now

00:15:21,519 --> 00:15:23,920
have a cord

00:15:22,480 --> 00:15:25,519
that comes out of the wire and it's a

00:15:23,920 --> 00:15:27,440
bit bigger you can't really carry

00:15:25,519 --> 00:15:29,360
your pocket right but but if you really

00:15:27,440 --> 00:15:31,199
care about trust and

00:15:29,360 --> 00:15:32,480
and and evidence-based trust in your

00:15:31,199 --> 00:15:33,279
hardware the thing on the right-hand

00:15:32,480 --> 00:15:35,120
side

00:15:33,279 --> 00:15:37,199
it wins hands down in terms of being

00:15:35,120 --> 00:15:38,800
able to verify so this is an example of

00:15:37,199 --> 00:15:40,000
what i mean in terms of sort of thinking

00:15:38,800 --> 00:15:42,480
about the complexity

00:15:40,000 --> 00:15:43,519
problem and reducing the attack surface

00:15:42,480 --> 00:15:46,000
so that's the first

00:15:43,519 --> 00:15:47,120
point to sort of address we have to sort

00:15:46,000 --> 00:15:48,880
of you know

00:15:47,120 --> 00:15:51,040
think about exactly where we're building

00:15:48,880 --> 00:15:52,959
and reduce the tax surface

00:15:51,040 --> 00:15:54,240
um the second point is that i think we

00:15:52,959 --> 00:15:56,079
need to think about it from a system

00:15:54,240 --> 00:15:57,040
standpoint not just component standpoint

00:15:56,079 --> 00:15:58,639
so

00:15:57,040 --> 00:16:00,560
um if you look inside your phone right

00:15:58,639 --> 00:16:02,639
now actually you have

00:16:00,560 --> 00:16:04,320
a device which is a like most of them

00:16:02,639 --> 00:16:05,120
have this little secure enclave on the

00:16:04,320 --> 00:16:06,560
inside

00:16:05,120 --> 00:16:08,639
which keeps all of your keys on the

00:16:06,560 --> 00:16:10,399
inside and not they don't keep inside

00:16:08,639 --> 00:16:11,040
your main cpu because it can be hacked

00:16:10,399 --> 00:16:12,959
there's a lot of

00:16:11,040 --> 00:16:14,240
you know you know it's a big attack

00:16:12,959 --> 00:16:15,680
surface there

00:16:14,240 --> 00:16:17,839
the problem is is that you have like

00:16:15,680 --> 00:16:18,320
this secure i o problem so even though

00:16:17,839 --> 00:16:20,240
if you

00:16:18,320 --> 00:16:21,360
keep your keys inside the security

00:16:20,240 --> 00:16:23,199
enclave

00:16:21,360 --> 00:16:25,279
the stuff that you type and the stuff

00:16:23,199 --> 00:16:27,120
that goes to the screen is still

00:16:25,279 --> 00:16:28,880
visible and scrapable so like anyone

00:16:27,120 --> 00:16:30,639
who's perhaps used android may have

00:16:28,880 --> 00:16:32,240
noted that when you try to add a

00:16:30,639 --> 00:16:34,160
keyboard region it says

00:16:32,240 --> 00:16:35,920
literally it says you know this input

00:16:34,160 --> 00:16:37,120
method can collect all the data you type

00:16:35,920 --> 00:16:38,880
including your personal data like

00:16:37,120 --> 00:16:41,360
passwords and credit card numbers

00:16:38,880 --> 00:16:42,959
and then you know i don't know if people

00:16:41,360 --> 00:16:46,160
even read they just click ok

00:16:42,959 --> 00:16:47,920
right you just you just sort of gave you

00:16:46,160 --> 00:16:49,279
despite all the security you have you

00:16:47,920 --> 00:16:50,880
just sort of gave

00:16:49,279 --> 00:16:53,199
the right to read everything that you

00:16:50,880 --> 00:16:54,720
type to a third-party application to

00:16:53,199 --> 00:16:55,279
which you know very little about right

00:16:54,720 --> 00:16:56,880
so this is

00:16:55,279 --> 00:16:58,480
this is a problem with if we just said

00:16:56,880 --> 00:17:00,160
okay we're going to solve the security

00:16:58,480 --> 00:17:01,120
enclave problem and build a chip that's

00:17:00,160 --> 00:17:02,560
secure

00:17:01,120 --> 00:17:04,880
we i don't think we've meaningfully

00:17:02,560 --> 00:17:06,559
moved the ball forward in terms of

00:17:04,880 --> 00:17:09,520
trust you know being able to trust a

00:17:06,559 --> 00:17:11,679
piece of hardware with a secret

00:17:09,520 --> 00:17:12,720
so that's the that's the second point

00:17:11,679 --> 00:17:14,240
and the third point is

00:17:12,720 --> 00:17:16,160
is we need to empower end users to

00:17:14,240 --> 00:17:18,400
verify and seal the hardware

00:17:16,160 --> 00:17:19,199
um so you know people need to be able to

00:17:18,400 --> 00:17:22,000
you know

00:17:19,199 --> 00:17:23,520
in their own at least ideally as close

00:17:22,000 --> 00:17:25,039
to home as possible maybe

00:17:23,520 --> 00:17:26,319
if you don't have the the technical

00:17:25,039 --> 00:17:28,559
capability yourself you have a friend

00:17:26,319 --> 00:17:30,320
who can help you do this right

00:17:28,559 --> 00:17:31,840
verify at multiple levels what's going

00:17:30,320 --> 00:17:33,919
on inside the hardware so you know at

00:17:31,840 --> 00:17:34,799
the design level we can have open review

00:17:33,919 --> 00:17:36,400
of the design

00:17:34,799 --> 00:17:38,000
at the sort of board level we have

00:17:36,400 --> 00:17:39,200
guides that show us where things are and

00:17:38,000 --> 00:17:40,799
what they should look like and then you

00:17:39,200 --> 00:17:43,120
know at the chip level we have the

00:17:40,799 --> 00:17:45,679
the circuit you know you know principles

00:17:43,120 --> 00:17:47,679
available for us to sort of think about

00:17:45,679 --> 00:17:49,280
and ideally we can also sort of you know

00:17:47,679 --> 00:17:51,679
do something about that

00:17:49,280 --> 00:17:52,480
and in addition to that you know once

00:17:51,679 --> 00:17:54,400
it's verified

00:17:52,480 --> 00:17:56,799
users should be able to fully provision

00:17:54,400 --> 00:17:58,000
device and then seal the secrets on the

00:17:56,799 --> 00:18:00,000
inside

00:17:58,000 --> 00:18:01,360
and when you know this this be this is

00:18:00,000 --> 00:18:03,280
actually worth

00:18:01,360 --> 00:18:04,480
a bullet point because the problem is

00:18:03,280 --> 00:18:06,880
ironically

00:18:04,480 --> 00:18:08,240
a lot of tools that we get for um you

00:18:06,880 --> 00:18:11,120
know trustable hardware if you ever

00:18:08,240 --> 00:18:13,120
have developed for like uh um an soc or

00:18:11,120 --> 00:18:15,679
like some embedded device

00:18:13,120 --> 00:18:16,400
you can the the factories won't give you

00:18:15,679 --> 00:18:18,240
the

00:18:16,400 --> 00:18:19,679
source code for the thing that burns the

00:18:18,240 --> 00:18:21,600
keys into the device you have to

00:18:19,679 --> 00:18:23,360
download a third-party tool because they

00:18:21,600 --> 00:18:24,320
oftentimes keep it locked behind some

00:18:23,360 --> 00:18:26,160
jtag

00:18:24,320 --> 00:18:27,520
door that protocols aren't you know

00:18:26,160 --> 00:18:29,120
disclosed it's not

00:18:27,520 --> 00:18:31,039
it's not you know so it's sort of a

00:18:29,120 --> 00:18:33,120
weird break in the whole idea of

00:18:31,039 --> 00:18:35,039
creating trust in the process so

00:18:33,120 --> 00:18:36,160
um you know so when i put the slide in

00:18:35,039 --> 00:18:37,360
here it's actually speaking to a

00:18:36,160 --> 00:18:40,559
specific

00:18:37,360 --> 00:18:43,679
sort of endemic problem in the um chip

00:18:40,559 --> 00:18:44,160
industry of not um empowering people to

00:18:43,679 --> 00:18:47,120
put

00:18:44,160 --> 00:18:48,000
you know burn e fuses on their devices

00:18:47,120 --> 00:18:49,919
um

00:18:48,000 --> 00:18:51,760
and then sealing can maybe perhaps

00:18:49,919 --> 00:18:53,919
should be physical too

00:18:51,760 --> 00:18:55,440
depending on your threat model you may

00:18:53,919 --> 00:18:57,200
want to have some tamper resistance

00:18:55,440 --> 00:18:59,039
measures so you want to be able to take

00:18:57,200 --> 00:19:00,799
you know you know perhaps a trusted

00:18:59,039 --> 00:19:02,880
domain of chips here and then put a

00:19:00,799 --> 00:19:05,280
metal can over it and glue on top of it

00:19:02,880 --> 00:19:06,880
and that way you know it's a it's a very

00:19:05,280 --> 00:19:07,679
it's a crude way it's a very simple way

00:19:06,880 --> 00:19:10,080
but it's also

00:19:07,679 --> 00:19:11,440
actually surprisingly effective way to

00:19:10,080 --> 00:19:12,880
sort of at least know if someone's

00:19:11,440 --> 00:19:14,160
trying to tamper with your device

00:19:12,880 --> 00:19:15,520
because they have to remove that shield

00:19:14,160 --> 00:19:17,840
to get on the inside it'll leave

00:19:15,520 --> 00:19:20,000
evidence and they can and it raises the

00:19:17,840 --> 00:19:23,039
stakes on the physical security for

00:19:20,000 --> 00:19:25,760
a relatively small amount of effort

00:19:23,039 --> 00:19:27,360
so these are the three principles like

00:19:25,760 --> 00:19:29,039
sort of like you know at a very high

00:19:27,360 --> 00:19:31,200
level uh talking about

00:19:29,039 --> 00:19:33,280
you know some big ideas but let's you

00:19:31,200 --> 00:19:37,520
know i've been trying to distill these

00:19:33,280 --> 00:19:40,559
ideas into an actual coherent

00:19:37,520 --> 00:19:42,320
product i guess if you will a project

00:19:40,559 --> 00:19:44,799
to try and figure out you know what does

00:19:42,320 --> 00:19:47,840
it mean to have verifiable hardware so

00:19:44,799 --> 00:19:49,919
um it's a device i call precursor

00:19:47,840 --> 00:19:51,120
and the name is chosen because it's it's

00:19:49,919 --> 00:19:53,840
literally a precursor

00:19:51,120 --> 00:19:54,160
it's it's a platform for people to sort

00:19:53,840 --> 00:19:57,360
of

00:19:54,160 --> 00:19:59,120
start building secure applications

00:19:57,360 --> 00:20:00,799
um and it's designed to facilitate

00:19:59,120 --> 00:20:03,280
evidence-based trust it's still

00:20:00,799 --> 00:20:03,919
simple in construction it's open in

00:20:03,280 --> 00:20:05,600
design

00:20:03,919 --> 00:20:07,039
and i hope it's sufficient and function

00:20:05,600 --> 00:20:10,480
to do some

00:20:07,039 --> 00:20:12,799
um key applications so what applications

00:20:10,480 --> 00:20:13,760
uh i i envision it maybe being used for

00:20:12,799 --> 00:20:16,320
secure text

00:20:13,760 --> 00:20:16,880
based messaging could be used for voice

00:20:16,320 --> 00:20:19,440
chat

00:20:16,880 --> 00:20:21,520
um i'm designing it with multi-lingual

00:20:19,440 --> 00:20:22,080
capabilities so it's not english only or

00:20:21,520 --> 00:20:24,000
even a

00:20:22,080 --> 00:20:26,880
one particular style of language only

00:20:24,000 --> 00:20:28,240
right um

00:20:26,880 --> 00:20:29,520
it's i think it should be ideal for

00:20:28,240 --> 00:20:31,520
things like password management and

00:20:29,520 --> 00:20:33,440
crypto wallet these sorts of things

00:20:31,520 --> 00:20:34,960
stuff it's explicitly not designed for

00:20:33,440 --> 00:20:35,840
for example is web browsing like the

00:20:34,960 --> 00:20:38,880
moment i

00:20:35,840 --> 00:20:39,760
feel like i throw a web browser into a

00:20:38,880 --> 00:20:42,400
device i

00:20:39,760 --> 00:20:44,480
i i don't feel like i can really

00:20:42,400 --> 00:20:46,559
necessarily trust it that much anymore

00:20:44,480 --> 00:20:48,400
i mean you know web browsers naturally

00:20:46,559 --> 00:20:50,000
just pull down gobs of javascript and

00:20:48,400 --> 00:20:52,000
tries to run it on your device

00:20:50,000 --> 00:20:53,600
locally and you know and we know the

00:20:52,000 --> 00:20:55,760
number of sorts of

00:20:53,600 --> 00:20:57,120
escapes and exploits that have existed

00:20:55,760 --> 00:20:58,960
in these types of systems

00:20:57,120 --> 00:21:00,480
um so i don't think it even makes sense

00:20:58,960 --> 00:21:02,720
from a security standpoint to

00:21:00,480 --> 00:21:04,000
to include that in the scope um it's not

00:21:02,720 --> 00:21:05,520
really designed for games but you can do

00:21:04,000 --> 00:21:07,360
some retro gaming on it um

00:21:05,520 --> 00:21:08,960
you know but it's you know that's not a

00:21:07,360 --> 00:21:11,120
thing that's in scope and you know

00:21:08,960 --> 00:21:13,039
photos and videos i think are also a bit

00:21:11,120 --> 00:21:15,039
too hard for it to process at this point

00:21:13,039 --> 00:21:17,840
in time because you don't have good

00:21:15,039 --> 00:21:19,039
uh solutions to you know cameras and

00:21:17,840 --> 00:21:22,000
video playback that

00:21:19,039 --> 00:21:24,320
doesn't sort of um expand the extent the

00:21:22,000 --> 00:21:26,640
the attack surface too much

00:21:24,320 --> 00:21:27,440
um so that's sort of like where from the

00:21:26,640 --> 00:21:28,799
from the

00:21:27,440 --> 00:21:31,039
functional standpoint where i think it's

00:21:28,799 --> 00:21:32,960
going to sit but you know let's talk a

00:21:31,039 --> 00:21:35,120
bit about the construction i say it's

00:21:32,960 --> 00:21:36,080
it's simple in construction so a lot of

00:21:35,120 --> 00:21:37,600
phones you know

00:21:36,080 --> 00:21:39,520
you've seen maybe some tear downs of

00:21:37,600 --> 00:21:40,559
them they have you know adhesives

00:21:39,520 --> 00:21:42,480
everywhere and they're

00:21:40,559 --> 00:21:44,000
deliberately hard to take apart this

00:21:42,480 --> 00:21:46,640
one's actually made to be

00:21:44,000 --> 00:21:48,080
taken apart and looked at there's a you

00:21:46,640 --> 00:21:50,000
know a single main circuit board on the

00:21:48,080 --> 00:21:52,320
inside it can come out

00:21:50,000 --> 00:21:53,600
um you know i use screws in the bezel to

00:21:52,320 --> 00:21:55,760
hold the bezel in place

00:21:53,600 --> 00:21:56,840
uh the keyboard is you know everything

00:21:55,760 --> 00:21:59,919
is basically

00:21:56,840 --> 00:22:01,520
made so that's it's simple to to take

00:21:59,919 --> 00:22:03,280
apart simple to look at easy to

00:22:01,520 --> 00:22:04,880
understand

00:22:03,280 --> 00:22:07,039
uh so for example if you want to go

00:22:04,880 --> 00:22:10,080
ahead and verify the keyboard

00:22:07,039 --> 00:22:11,600
uh you know we use a physical keyboard

00:22:10,080 --> 00:22:13,520
instead of a touchscreen keyboard

00:22:11,600 --> 00:22:14,799
because you know physical keyboards are

00:22:13,520 --> 00:22:16,320
visually inspectable

00:22:14,799 --> 00:22:17,840
right there's no silicon chips on the

00:22:16,320 --> 00:22:19,440
inside and if you want to be

00:22:17,840 --> 00:22:20,640
multilingual we have to do the the

00:22:19,440 --> 00:22:22,640
old-school way

00:22:20,640 --> 00:22:23,840
which is we take out an overlay and we

00:22:22,640 --> 00:22:25,280
stick a new one on you don't get the

00:22:23,840 --> 00:22:27,039
download one unfortunately you have to

00:22:25,280 --> 00:22:28,559
take some screws and do a little elbow

00:22:27,039 --> 00:22:29,360
grease but you but you can change out

00:22:28,559 --> 00:22:31,520
the overlay

00:22:29,360 --> 00:22:32,640
to your favorite language uh with a

00:22:31,520 --> 00:22:33,840
screwdriver

00:22:32,640 --> 00:22:35,679
on a physical keyboard so it's a

00:22:33,840 --> 00:22:36,159
trade-off but i think you know in terms

00:22:35,679 --> 00:22:39,760
of

00:22:36,159 --> 00:22:41,440
inspectability this is like

00:22:39,760 --> 00:22:43,039
really trivial to inspect you just hold

00:22:41,440 --> 00:22:43,760
up the circuit board to some light and

00:22:43,039 --> 00:22:45,280
we've actually

00:22:43,760 --> 00:22:46,960
selected the circuit board to be made

00:22:45,280 --> 00:22:47,919
out of this clear translucent material

00:22:46,960 --> 00:22:49,360
so it's not

00:22:47,919 --> 00:22:50,960
nothing's hidden it's very easy to see

00:22:49,360 --> 00:22:52,960
all the way through you can see you know

00:22:50,960 --> 00:22:54,480
in this picture here we can see the

00:22:52,960 --> 00:22:55,840
traces we can see the switches and we

00:22:54,480 --> 00:22:56,240
can see the connector that's it we're

00:22:55,840 --> 00:22:58,320
done

00:22:56,240 --> 00:22:59,679
right we know that there's nothing that

00:22:58,320 --> 00:23:02,960
can intercept

00:22:59,679 --> 00:23:05,039
um the the keystrokes you know

00:23:02,960 --> 00:23:06,799
opposed to you know for example a touch

00:23:05,039 --> 00:23:08,240
keyboard if you look if we start to look

00:23:06,799 --> 00:23:09,360
at what goes inside these touchscreen

00:23:08,240 --> 00:23:12,159
controllers

00:23:09,360 --> 00:23:14,000
they almost always use a microcontroller

00:23:12,159 --> 00:23:16,080
on the inside which has a firmware block

00:23:14,000 --> 00:23:17,440
right that's the people even talk about

00:23:16,080 --> 00:23:18,480
it it just comes shipped inside the

00:23:17,440 --> 00:23:20,400
device

00:23:18,480 --> 00:23:21,520
um you know what what's what's going on

00:23:20,400 --> 00:23:22,000
inside this device it's actually

00:23:21,520 --> 00:23:23,520
extremely

00:23:22,000 --> 00:23:25,919
hard to say even if the touchscreen

00:23:23,520 --> 00:23:27,520
itself is is not have some embedded

00:23:25,919 --> 00:23:29,440
logging capability that can have an

00:23:27,520 --> 00:23:31,120
exfiltration path later on through

00:23:29,440 --> 00:23:32,799
the i squared c interface or whatever it

00:23:31,120 --> 00:23:34,880
is um

00:23:32,799 --> 00:23:37,039
now let's talk about the screen uh you

00:23:34,880 --> 00:23:38,799
know i do worried about screen scrapers

00:23:37,039 --> 00:23:40,159
and screen grabbers and so uh i think

00:23:38,799 --> 00:23:43,200
it's important to have

00:23:40,159 --> 00:23:44,559
an ability for humans to directly see

00:23:43,200 --> 00:23:46,480
the things they're working on and so

00:23:44,559 --> 00:23:49,200
we've picked a high dpi

00:23:46,480 --> 00:23:50,320
black and white screen it's 200 dpi 336

00:23:49,200 --> 00:23:52,799
by 536

00:23:50,320 --> 00:23:54,240
pixels and the the coolest feature about

00:23:52,799 --> 00:23:56,000
this in my opinion

00:23:54,240 --> 00:23:58,000
is that all the drive electrons are

00:23:56,000 --> 00:23:58,400
actually fabricated on glass so what i

00:23:58,000 --> 00:24:00,720
have

00:23:58,400 --> 00:24:02,080
here the picture on the right hand side

00:24:00,720 --> 00:24:03,520
is actually taken with an optical

00:24:02,080 --> 00:24:07,279
microscope at 50x

00:24:03,520 --> 00:24:09,679
zoom of the of the actual glass itself

00:24:07,279 --> 00:24:11,440
and you can see these here are

00:24:09,679 --> 00:24:13,919
individual logic gates

00:24:11,440 --> 00:24:15,520
that are that compose the address

00:24:13,919 --> 00:24:17,120
decoder

00:24:15,520 --> 00:24:18,640
inside the display and these bright

00:24:17,120 --> 00:24:20,159
spots here are the pixel

00:24:18,640 --> 00:24:21,760
elements of the display and there's a

00:24:20,159 --> 00:24:23,360
little hole in it where they i think

00:24:21,760 --> 00:24:25,039
it's where the drive transistor is and a

00:24:23,360 --> 00:24:28,000
little bit of light can come through

00:24:25,039 --> 00:24:28,880
uh even though the screen is off right

00:24:28,000 --> 00:24:32,480
um and so

00:24:28,880 --> 00:24:34,080
and so you can literally take this thing

00:24:32,480 --> 00:24:35,840
uh and because it constructed the

00:24:34,080 --> 00:24:36,320
transistors directly in the glass using

00:24:35,840 --> 00:24:39,679
this

00:24:36,320 --> 00:24:41,600
amorphous tft technology um you can just

00:24:39,679 --> 00:24:43,360
like sort of see what's going on there's

00:24:41,600 --> 00:24:44,559
less things to verify

00:24:43,360 --> 00:24:46,480
and there's less things that need to

00:24:44,559 --> 00:24:48,159
check so for example

00:24:46,480 --> 00:24:50,159
but then compared for example to a color

00:24:48,159 --> 00:24:53,039
lcd virtually all

00:24:50,159 --> 00:24:54,880
lcds of other construction incorporate

00:24:53,039 --> 00:24:56,799
an actual driver ic so if you ever

00:24:54,880 --> 00:24:58,480
take apart an lcd and you actually strip

00:24:56,799 --> 00:25:00,400
off the backlight and whatnot

00:24:58,480 --> 00:25:02,080
you'll see and i've kind of put red

00:25:00,400 --> 00:25:04,000
arrow here you see this kind of bar

00:25:02,080 --> 00:25:05,440
that is underneath the piece of glue if

00:25:04,000 --> 00:25:06,640
you flip it over and put a microscope

00:25:05,440 --> 00:25:08,799
you'll see that it's actually a chip

00:25:06,640 --> 00:25:10,960
there's a full on silicon chip

00:25:08,799 --> 00:25:12,640
um on the inside here that decodes the

00:25:10,960 --> 00:25:14,640
interface and has a whole frame buffer

00:25:12,640 --> 00:25:17,760
and a command interface it's actually

00:25:14,640 --> 00:25:19,520
quite powerful has a lot of state and uh

00:25:17,760 --> 00:25:20,960
you know who knows what could be on the

00:25:19,520 --> 00:25:24,080
inside but that's a difficult

00:25:20,960 --> 00:25:26,480
piece again to verify so that's so we

00:25:24,080 --> 00:25:29,200
tried to make the screen also verifiable

00:25:26,480 --> 00:25:30,000
now in terms of the pcb um the pcb

00:25:29,200 --> 00:25:33,279
itself

00:25:30,000 --> 00:25:35,360
you know was designed um with security

00:25:33,279 --> 00:25:36,000
in mind and verifiability in mind i have

00:25:35,360 --> 00:25:38,320
some

00:25:36,000 --> 00:25:39,840
diagrams we can i'll make them available

00:25:38,320 --> 00:25:40,880
online so people can look at it but you

00:25:39,840 --> 00:25:42,799
know this is

00:25:40,880 --> 00:25:44,240
calls out all the different features so

00:25:42,799 --> 00:25:45,840
that ideally if you look at it you're

00:25:44,240 --> 00:25:46,799
not guessing what something is like okay

00:25:45,840 --> 00:25:48,880
here's the

00:25:46,799 --> 00:25:51,200
trng and here's where the flash rom is

00:25:48,880 --> 00:25:53,840
and here's where the you know soc fpga

00:25:51,200 --> 00:25:56,080
is and okay these are the the keyboard

00:25:53,840 --> 00:25:57,919
isolators and whatnot right so this

00:25:56,080 --> 00:25:59,440
we you know we're trying to facilitate

00:25:57,919 --> 00:26:02,240
verification with

00:25:59,440 --> 00:26:03,600
um you know pictures like this um but

00:26:02,240 --> 00:26:05,760
perhaps more meaningfully

00:26:03,600 --> 00:26:07,679
uh the pcb itself was designed along

00:26:05,760 --> 00:26:09,600
attack surface so i also have a more

00:26:07,679 --> 00:26:10,880
logical diagram here i can show you of

00:26:09,600 --> 00:26:13,120
how it was designed

00:26:10,880 --> 00:26:15,360
and so we have that we logically split

00:26:13,120 --> 00:26:17,039
the pcb into sort of two

00:26:15,360 --> 00:26:18,400
halves one is i call the u domain the

00:26:17,039 --> 00:26:19,840
untrusted domain and the other one's

00:26:18,400 --> 00:26:20,640
called the t domain or the trusted

00:26:19,840 --> 00:26:22,720
domain

00:26:20,640 --> 00:26:24,080
as the names imply the t domain is where

00:26:22,720 --> 00:26:25,760
you keep your secrets

00:26:24,080 --> 00:26:27,840
and the u domain is sort of like this

00:26:25,760 --> 00:26:29,440
interface a firewall if you will to the

00:26:27,840 --> 00:26:30,880
to the outside world that you notably

00:26:29,440 --> 00:26:32,799
have to interface with so

00:26:30,880 --> 00:26:35,120
for example new domain we keep the

00:26:32,799 --> 00:26:35,760
actual internet interface it's a wi-fi

00:26:35,120 --> 00:26:37,279
chip

00:26:35,760 --> 00:26:38,880
it has a firmware blob we don't care

00:26:37,279 --> 00:26:40,480
right it's it's as if

00:26:38,880 --> 00:26:42,240
arguing over you know does the core

00:26:40,480 --> 00:26:44,000
router that this you know goes to or is

00:26:42,240 --> 00:26:44,720
my cable modem have a firmware blob by

00:26:44,000 --> 00:26:46,240
the time

00:26:44,720 --> 00:26:48,400
we've gotten to this point everything's

00:26:46,240 --> 00:26:49,520
encrypted and and wrapped up we're not

00:26:48,400 --> 00:26:51,600
really caring

00:26:49,520 --> 00:26:53,440
so much about what happens there we have

00:26:51,600 --> 00:26:56,240
a small chip that we we designed

00:26:53,440 --> 00:26:58,080
that acts as a as a bit of a firewall

00:26:56,240 --> 00:26:58,880
between the wi-fi chip and the trusted

00:26:58,080 --> 00:27:00,480
domain

00:26:58,880 --> 00:27:02,159
and it relays the data to the trusted

00:27:00,480 --> 00:27:03,840
domain through a single

00:27:02,159 --> 00:27:05,760
link that we call the com link and that

00:27:03,840 --> 00:27:06,720
is the link that is the attack service

00:27:05,760 --> 00:27:08,960
to keep an eye on

00:27:06,720 --> 00:27:10,000
um from a software software security

00:27:08,960 --> 00:27:11,919
standpoint

00:27:10,000 --> 00:27:13,440
in addition to that we have to have some

00:27:11,919 --> 00:27:14,720
housekeeping things that we have to take

00:27:13,440 --> 00:27:17,039
advantage of or take

00:27:14,720 --> 00:27:18,960
manage like you know the power charging

00:27:17,039 --> 00:27:20,640
the usb interface whatever it is

00:27:18,960 --> 00:27:22,799
these are all in the untrust untrusted

00:27:20,640 --> 00:27:25,279
domain and managed by this

00:27:22,799 --> 00:27:26,960
inside the trusted domain of course we

00:27:25,279 --> 00:27:28,640
keep our memory we keep our flash we

00:27:26,960 --> 00:27:31,039
keep our audio codec

00:27:28,640 --> 00:27:33,120
we keep the display in the keyboard we

00:27:31,039 --> 00:27:33,679
have a mechanism here that we've also

00:27:33,120 --> 00:27:35,279
put

00:27:33,679 --> 00:27:36,960
kind of specific to the hardware for a

00:27:35,279 --> 00:27:38,640
self-destruct if you have some

00:27:36,960 --> 00:27:39,919
battery back aes keys and you want to go

00:27:38,640 --> 00:27:42,000
ahead and just erase everything very

00:27:39,919 --> 00:27:43,520
quickly you can activate that

00:27:42,000 --> 00:27:45,039
that's all in the trusted domain and

00:27:43,520 --> 00:27:47,840
this diagram helps us

00:27:45,039 --> 00:27:48,960
think about what the attack surfaces are

00:27:47,840 --> 00:27:50,480
and what we really need to pay attention

00:27:48,960 --> 00:27:52,000
to so if we were to go back to that

00:27:50,480 --> 00:27:52,399
circuit board diagram and sort of look

00:27:52,000 --> 00:27:54,880
at it

00:27:52,399 --> 00:27:55,679
from the attack surfaces to the to the t

00:27:54,880 --> 00:27:57,440
domain

00:27:55,679 --> 00:27:59,360
we have to worry about you know people

00:27:57,440 --> 00:28:01,360
injecting glitches on gpao

00:27:59,360 --> 00:28:02,799
people trying to do you know attacks

00:28:01,360 --> 00:28:05,039
through usb you know

00:28:02,799 --> 00:28:06,000
how do we isolate that the keyboard the

00:28:05,039 --> 00:28:07,679
audio interface

00:28:06,000 --> 00:28:09,200
you know there's obviously a debug port

00:28:07,679 --> 00:28:10,640
because we're all developers that has to

00:28:09,200 --> 00:28:11,919
be glued shut and sealed if you want to

00:28:10,640 --> 00:28:13,600
be even secure

00:28:11,919 --> 00:28:14,880
and you know we have a com bus going to

00:28:13,600 --> 00:28:16,399
the untrusted domain which is through a

00:28:14,880 --> 00:28:19,200
set of very traces

00:28:16,399 --> 00:28:21,520
um so this this this helps us sort of

00:28:19,200 --> 00:28:23,120
now decompose not just verifying it from

00:28:21,520 --> 00:28:24,880
like oh my god what is this

00:28:23,120 --> 00:28:26,880
crazy thing we're looking at but ideally

00:28:24,880 --> 00:28:28,559
we're now able to reason about

00:28:26,880 --> 00:28:30,000
what are the important things to look at

00:28:28,559 --> 00:28:31,679
and what should we pay attention

00:28:30,000 --> 00:28:33,120
to as we verify so we prioritize our

00:28:31,679 --> 00:28:35,600
limited resources

00:28:33,120 --> 00:28:37,840
and actually you know look at the things

00:28:35,600 --> 00:28:40,559
that matter for verification

00:28:37,840 --> 00:28:42,399
now finally let's sort of talk about the

00:28:40,559 --> 00:28:44,880
hardest problem which is how do we get

00:28:42,399 --> 00:28:46,799
to evidence-based trust on the cpu or i

00:28:44,880 --> 00:28:47,679
often refer to it as a system on chip

00:28:46,799 --> 00:28:49,520
because

00:28:47,679 --> 00:28:52,000
we have basically one large block in the

00:28:49,520 --> 00:28:55,039
middle that is an fpga and it contains

00:28:52,000 --> 00:28:56,799
all the functions right and as i

00:28:55,039 --> 00:28:58,399
alluded to earlier silicon instruction

00:28:56,799 --> 00:29:00,559
is typically destructive

00:28:58,399 --> 00:29:01,840
there is that one typographic x-ray

00:29:00,559 --> 00:29:02,720
machine i talked about that's the size

00:29:01,840 --> 00:29:04,399
of the building

00:29:02,720 --> 00:29:05,919
but there are less there are smaller

00:29:04,399 --> 00:29:07,840
solutions you know sort of

00:29:05,919 --> 00:29:09,120
you know desktop size microscope

00:29:07,840 --> 00:29:10,880
solutions for

00:29:09,120 --> 00:29:12,159
inspecting chips but those are all

00:29:10,880 --> 00:29:13,440
typically destructive because you have

00:29:12,159 --> 00:29:14,799
to declare the chip

00:29:13,440 --> 00:29:16,720
as you can see here like you know this

00:29:14,799 --> 00:29:18,559
this this is a great sort of

00:29:16,720 --> 00:29:20,480
you know demo of what you can see on a

00:29:18,559 --> 00:29:21,840
chip but they cut the chip right you

00:29:20,480 --> 00:29:23,279
know they literally had to slice through

00:29:21,840 --> 00:29:24,880
the chip to get this so the chip doesn't

00:29:23,279 --> 00:29:27,679
work anymore right you can verify

00:29:24,880 --> 00:29:28,960
this chip all you want but you know good

00:29:27,679 --> 00:29:31,360
luck using it right

00:29:28,960 --> 00:29:33,440
um so it's very difficult to check and

00:29:31,360 --> 00:29:36,640
use a specific chip

00:29:33,440 --> 00:29:38,240
so the solution we've come up with for

00:29:36,640 --> 00:29:40,880
this generation

00:29:38,240 --> 00:29:42,880
is to use an fpga it's a field

00:29:40,880 --> 00:29:44,559
programmable gate array so when they say

00:29:42,880 --> 00:29:46,159
field they mean like users in the field

00:29:44,559 --> 00:29:48,640
as opposed to in the lab

00:29:46,159 --> 00:29:50,000
um i i was always confused because i i

00:29:48,640 --> 00:29:51,440
had more of a bit of a physics

00:29:50,000 --> 00:29:52,640
background i was like field programmable

00:29:51,440 --> 00:29:53,120
maybe they're using electric fields or

00:29:52,640 --> 00:29:54,559
whatever

00:29:53,120 --> 00:29:56,480
means like field as in like you know

00:29:54,559 --> 00:30:00,320
field applications engineer

00:29:56,480 --> 00:30:01,840
um so the um you know it if an fpga for

00:30:00,320 --> 00:30:04,000
people who aren't familiar with it it's

00:30:01,840 --> 00:30:05,120
basically a large array of logic and

00:30:04,000 --> 00:30:07,120
wires so just

00:30:05,120 --> 00:30:08,960
individual registers and some lookup

00:30:07,120 --> 00:30:10,720
tables and they can be

00:30:08,960 --> 00:30:13,039
user configured to implement the

00:30:10,720 --> 00:30:16,880
hardware design of your choice

00:30:13,039 --> 00:30:18,880
right and the idea behind the fpga is

00:30:16,880 --> 00:30:21,279
you can sort of narrow that talk to get

00:30:18,880 --> 00:30:23,919
that time of check the time of use gap

00:30:21,279 --> 00:30:25,679
by compiling your own system on chip

00:30:23,919 --> 00:30:27,520
right and so the idea is that if anyone

00:30:25,679 --> 00:30:30,080
can compile the designs from source

00:30:27,520 --> 00:30:32,080
we can once again enable that trust

00:30:30,080 --> 00:30:33,360
transfer mechanism to be like software

00:30:32,080 --> 00:30:35,440
and so the system

00:30:33,360 --> 00:30:37,120
in particular we're using is this python

00:30:35,440 --> 00:30:38,559
basis and describe hardware it's called

00:30:37,120 --> 00:30:40,720
megan

00:30:38,559 --> 00:30:42,399
and we basically create a set of python

00:30:40,720 --> 00:30:45,760
arrays that you know sort of

00:30:42,399 --> 00:30:48,240
map into a verilog set

00:30:45,760 --> 00:30:49,120
of statements and then those flow into

00:30:48,240 --> 00:30:50,640
various

00:30:49,120 --> 00:30:52,240
place and route tools that didn't go to

00:30:50,640 --> 00:30:53,919
the actual hardware itself

00:30:52,240 --> 00:30:56,000
there is a subtlety in that the tool

00:30:53,919 --> 00:30:58,240
chain openness is not yet 100

00:30:56,000 --> 00:30:59,519
on everything um but you know there's a

00:30:58,240 --> 00:31:01,440
actually a really big team of people

00:30:59,519 --> 00:31:03,279
working on solving that problem as well

00:31:01,440 --> 00:31:05,279
and we have other other cool techniques

00:31:03,279 --> 00:31:09,120
like bit stream inspection that can help

00:31:05,279 --> 00:31:13,600
mitigate the issue of the tool chain

00:31:09,120 --> 00:31:16,080
now fpga has a has a feature that

00:31:13,600 --> 00:31:17,679
makes it a little bit more like aslr for

00:31:16,080 --> 00:31:19,360
hardware so for people who are familiar

00:31:17,679 --> 00:31:20,880
with mitigations and software there's

00:31:19,360 --> 00:31:21,919
this thing called outer space layout

00:31:20,880 --> 00:31:23,760
randomization

00:31:21,919 --> 00:31:24,880
so it is even if you have an exploit and

00:31:23,760 --> 00:31:25,760
someone managed to get inside your

00:31:24,880 --> 00:31:28,080
computer

00:31:25,760 --> 00:31:29,679
finding the location of stack or finding

00:31:28,080 --> 00:31:30,399
the location of a library or something

00:31:29,679 --> 00:31:32,240
like this

00:31:30,399 --> 00:31:34,720
is not as simple as loading a hard-coded

00:31:32,240 --> 00:31:36,480
constant in and then jumping to it right

00:31:34,720 --> 00:31:38,159
and so you can do a similar technique

00:31:36,480 --> 00:31:40,480
for fpgas where you sort of

00:31:38,159 --> 00:31:42,240
randomize where the actual things go so

00:31:40,480 --> 00:31:44,559
if we have like a critical

00:31:42,240 --> 00:31:46,000
uh section like you know the the decoder

00:31:44,559 --> 00:31:47,840
for the program counter or whatever

00:31:46,000 --> 00:31:49,279
it is right you know if you just change

00:31:47,840 --> 00:31:50,960
a random seat

00:31:49,279 --> 00:31:53,200
you can actually end up with that

00:31:50,960 --> 00:31:54,880
particular logic cell being located in a

00:31:53,200 --> 00:31:56,720
different spot so if someone was

00:31:54,880 --> 00:31:58,480
to try and be nefarious and build a

00:31:56,720 --> 00:32:01,120
backdoor into the fpga

00:31:58,480 --> 00:32:02,080
they would need to um you know sort of

00:32:01,120 --> 00:32:04,880
literally

00:32:02,080 --> 00:32:06,320
make a huge uh change to the chip like

00:32:04,880 --> 00:32:07,840
they would have to basically inside

00:32:06,320 --> 00:32:11,440
every single one of those

00:32:07,840 --> 00:32:13,679
small logic cells in include logic that

00:32:11,440 --> 00:32:16,720
would be a backdoor to try and capture

00:32:13,679 --> 00:32:19,039
the potential random location of

00:32:16,720 --> 00:32:20,320
of of of of a key bit that would

00:32:19,039 --> 00:32:22,240
actually

00:32:20,320 --> 00:32:23,760
morphologically change the dye size

00:32:22,240 --> 00:32:25,600
grossly right it would actually be a

00:32:23,760 --> 00:32:28,159
much larger piece of silicon

00:32:25,600 --> 00:32:29,760
so now we're not needing to go to a big

00:32:28,159 --> 00:32:31,120
microscope to verify we can just go to

00:32:29,760 --> 00:32:32,480
an x-ray machine

00:32:31,120 --> 00:32:34,240
look at the silicon dye say ah the

00:32:32,480 --> 00:32:35,840
silicon die is the right size

00:32:34,240 --> 00:32:37,840
therefore we can at least say it doesn't

00:32:35,840 --> 00:32:39,760
have like a very powerful

00:32:37,840 --> 00:32:42,080
exploit built into it they can view all

00:32:39,760 --> 00:32:44,399
the bits maybe we have

00:32:42,080 --> 00:32:46,480
um some smaller level exploits that can

00:32:44,399 --> 00:32:48,320
be in specific areas

00:32:46,480 --> 00:32:49,840
but also sort of the cool is that the

00:32:48,320 --> 00:32:51,760
cool thing is is that like you know

00:32:49,840 --> 00:32:53,200
if we do uh sort of discover these

00:32:51,760 --> 00:32:54,640
smaller exploits we can actually

00:32:53,200 --> 00:32:56,080
reconstruct the bit stream

00:32:54,640 --> 00:32:57,679
as a counter measure to it so we're no

00:32:56,080 --> 00:32:59,120
longer in the realm of like you know

00:32:57,679 --> 00:33:00,880
we're screwed we don't know what to do

00:32:59,120 --> 00:33:02,799
because we have some prominent hardware

00:33:00,880 --> 00:33:04,240
it's actually as we find problems we can

00:33:02,799 --> 00:33:05,760
go ahead and patch and mitigate which

00:33:04,240 --> 00:33:07,039
which greatly changes the calculus in

00:33:05,760 --> 00:33:09,519
the game

00:33:07,039 --> 00:33:10,960
um so and then another thing i had

00:33:09,519 --> 00:33:11,919
alluded to earlier is that we can close

00:33:10,960 --> 00:33:13,919
the loop around the

00:33:11,919 --> 00:33:14,960
the the generated bit stream there's a

00:33:13,919 --> 00:33:18,159
project called peer

00:33:14,960 --> 00:33:19,919
j prod prg x-ray project x-ray

00:33:18,159 --> 00:33:22,080
um you can it's on github you can check

00:33:19,919 --> 00:33:25,600
it out here um and basically it's

00:33:22,080 --> 00:33:28,480
it it's been sort of fuzzing the

00:33:25,600 --> 00:33:30,399
um bit stream of the fpga series that i

00:33:28,480 --> 00:33:31,919
use for precursor

00:33:30,399 --> 00:33:33,440
and they're they're they're teasing out

00:33:31,919 --> 00:33:34,399
what every single bit in that bit stream

00:33:33,440 --> 00:33:35,919
does so now

00:33:34,399 --> 00:33:38,159
it's possible to do sort of a post

00:33:35,919 --> 00:33:40,399
compilation check to stand you check

00:33:38,159 --> 00:33:41,519
where key functions are doing like did

00:33:40,399 --> 00:33:44,320
are are the

00:33:41,519 --> 00:33:46,320
aes blocks actually correct and you know

00:33:44,320 --> 00:33:47,840
are the key management roms you know

00:33:46,320 --> 00:33:49,760
you know having no back doors we can

00:33:47,840 --> 00:33:51,679
actually sort of start to build tools

00:33:49,760 --> 00:33:53,039
that do that at a softer level

00:33:51,679 --> 00:33:55,120
and not having to use a microscope to

00:33:53,039 --> 00:33:56,720
sort of figure it out

00:33:55,120 --> 00:33:58,799
so at the end of the day the fpga's

00:33:56,720 --> 00:34:01,600
biggest potential advantage

00:33:58,799 --> 00:34:03,600
is that it moves the point of check

00:34:01,600 --> 00:34:04,799
towards the user one can imagine that we

00:34:03,600 --> 00:34:06,240
have a bitstream checker

00:34:04,799 --> 00:34:08,079
or we have like maybe someday a

00:34:06,240 --> 00:34:10,159
one-click tool to go ahead and

00:34:08,079 --> 00:34:11,679
compile and verify the bit stream um

00:34:10,159 --> 00:34:12,720
we're not there yet today i want to

00:34:11,679 --> 00:34:14,639
clarify this is a

00:34:12,720 --> 00:34:15,839
sort of a vision where where we want to

00:34:14,639 --> 00:34:18,159
go but

00:34:15,839 --> 00:34:20,000
i do think it's doable this is not like

00:34:18,159 --> 00:34:23,040
a completely crazy

00:34:20,000 --> 00:34:25,280
you know unobtainium thing where we want

00:34:23,040 --> 00:34:27,599
everyone to have a typographic

00:34:25,280 --> 00:34:30,320
you know x-ray machine by their house or

00:34:27,599 --> 00:34:32,960
something like that to solve the problem

00:34:30,320 --> 00:34:34,639
so now i've talked a bit about why we're

00:34:32,960 --> 00:34:36,000
using an fpga let's have a quick look on

00:34:34,639 --> 00:34:37,760
the inside

00:34:36,000 --> 00:34:39,679
of what we're putting into it right and

00:34:37,760 --> 00:34:42,000
so this is a this is a

00:34:39,679 --> 00:34:43,599
maybe i don't know how it's rendering on

00:34:42,000 --> 00:34:44,800
the internet and if people's screen

00:34:43,599 --> 00:34:46,000
resolution is high enough but we'll go

00:34:44,800 --> 00:34:47,679
through block by block so you don't have

00:34:46,000 --> 00:34:50,159
to stare at this too hard

00:34:47,679 --> 00:34:52,159
but the idea is that we have a few major

00:34:50,159 --> 00:34:53,919
blocks we have like the core complex we

00:34:52,159 --> 00:34:57,280
have some i o blocks we have a crypto

00:34:53,919 --> 00:34:59,440
cryptography complex a debug block um

00:34:57,280 --> 00:35:01,119
and uh and when you actually compile

00:34:59,440 --> 00:35:02,800
this onto the fpga

00:35:01,119 --> 00:35:04,320
this is kind of what it looks like right

00:35:02,800 --> 00:35:06,720
so this is actually one of the

00:35:04,320 --> 00:35:07,839
big views of the tool this block here is

00:35:06,720 --> 00:35:10,000
actually a

00:35:07,839 --> 00:35:11,040
a almost literal map of the shape of the

00:35:10,000 --> 00:35:13,440
silicon

00:35:11,040 --> 00:35:14,720
and i've highlighted what these

00:35:13,440 --> 00:35:16,079
different things look like after i've

00:35:14,720 --> 00:35:17,520
gone through a place in route tool now

00:35:16,079 --> 00:35:18,000
of course every time you recompile it

00:35:17,520 --> 00:35:19,440
the

00:35:18,000 --> 00:35:21,599
shape changes slightly like i said

00:35:19,440 --> 00:35:23,119
there's a bit of aslr going here

00:35:21,599 --> 00:35:24,960
but you can see how big the things

00:35:23,119 --> 00:35:25,760
roughly are like you know the actual cpu

00:35:24,960 --> 00:35:27,920
core is actually

00:35:25,760 --> 00:35:29,200
quite small and the crypto functions

00:35:27,920 --> 00:35:33,359
take up the bulk

00:35:29,200 --> 00:35:36,720
of the space inside the chin

00:35:33,359 --> 00:35:39,920
um so now going back to the

00:35:36,720 --> 00:35:41,839
sort of the logical diagram we have um

00:35:39,920 --> 00:35:43,119
you know the core complex it's what i

00:35:41,839 --> 00:35:45,760
call it's a

00:35:43,119 --> 00:35:48,400
it's a single core risk 5 cpu that's

00:35:45,760 --> 00:35:50,320
using the rv 32 imac

00:35:48,400 --> 00:35:52,000
instruction set and we've added an mmu

00:35:50,320 --> 00:35:54,000
to it because we think that even though

00:35:52,000 --> 00:35:55,599
it's a very small footprint device

00:35:54,000 --> 00:35:58,320
we want the security properties in the

00:35:55,599 --> 00:35:59,839
mmu brings inside our os

00:35:58,320 --> 00:36:01,839
we're using the vex risk v

00:35:59,839 --> 00:36:04,880
implementation it's done um

00:36:01,839 --> 00:36:05,280
it's made in europe and the it's got a

00:36:04,880 --> 00:36:08,400
small

00:36:05,280 --> 00:36:10,800
also on-chip boot rom and ram

00:36:08,400 --> 00:36:11,760
to help with some housekeeping functions

00:36:10,800 --> 00:36:13,920
and

00:36:11,760 --> 00:36:15,839
and we use a tool called lidex for

00:36:13,920 --> 00:36:17,440
integration so a little bit more on each

00:36:15,839 --> 00:36:20,000
of these things

00:36:17,440 --> 00:36:21,200
uh the vex press v you can actually go

00:36:20,000 --> 00:36:24,240
to um

00:36:21,200 --> 00:36:26,160
this github repo and you can like look

00:36:24,240 --> 00:36:26,560
at the source code for the cpu so this

00:36:26,160 --> 00:36:28,000
here

00:36:26,560 --> 00:36:29,920
like you know i've oftentimes wondered

00:36:28,000 --> 00:36:31,359
like why why

00:36:29,920 --> 00:36:33,680
how do we know that there isn't an

00:36:31,359 --> 00:36:36,000
opcode that isn't mapped

00:36:33,680 --> 00:36:37,040
that does something interesting right to

00:36:36,000 --> 00:36:38,800
your cpu so

00:36:37,040 --> 00:36:40,320
you can go to this repo you can sort of

00:36:38,800 --> 00:36:41,200
see the mapping of the op codes to the

00:36:40,320 --> 00:36:43,440
functions which is

00:36:41,200 --> 00:36:44,800
really neat and also likewise you can

00:36:43,440 --> 00:36:45,520
add op codes if you want that are

00:36:44,800 --> 00:36:48,720
important to you

00:36:45,520 --> 00:36:51,359
uh by modifying and forking the design

00:36:48,720 --> 00:36:52,960
also like really important to note this

00:36:51,359 --> 00:36:56,160
just happened recently

00:36:52,960 --> 00:36:57,520
um like the maintainer of the project uh

00:36:56,160 --> 00:36:59,119
dropped me an email like oh by the way

00:36:57,520 --> 00:37:00,000
we found this problem with a privilege

00:36:59,119 --> 00:37:02,880
class

00:37:00,000 --> 00:37:03,359
privet privilege crossing in one of the

00:37:02,880 --> 00:37:05,440
um

00:37:03,359 --> 00:37:06,720
the the control status register plugins

00:37:05,440 --> 00:37:08,400
right and

00:37:06,720 --> 00:37:10,160
if this were a closed-source cpu and

00:37:08,400 --> 00:37:11,440
this was found in the wild after a ship

00:37:10,160 --> 00:37:12,800
it would have it named

00:37:11,440 --> 00:37:14,240
it'd be like a named exploit like the

00:37:12,800 --> 00:37:15,839
zombie load or specter it'd be like you

00:37:14,240 --> 00:37:17,599
know one of those things that you would

00:37:15,839 --> 00:37:19,280
read about on the on the tech news or

00:37:17,599 --> 00:37:21,359
whatever it is right but in an

00:37:19,280 --> 00:37:22,720
open source cpu it was an email commit

00:37:21,359 --> 00:37:24,800
in the patch and we've just sort of

00:37:22,720 --> 00:37:27,040
solved this problem of a privilege

00:37:24,800 --> 00:37:28,480
crossing um in one of the harder pieces

00:37:27,040 --> 00:37:30,480
that it's actually you know pretty

00:37:28,480 --> 00:37:32,079
a little obscure and hard to find so i

00:37:30,480 --> 00:37:33,920
think that's like that's like you know

00:37:32,079 --> 00:37:36,079
i actually look forward to seeing more

00:37:33,920 --> 00:37:36,640
and more sort of security review and

00:37:36,079 --> 00:37:37,920
patching

00:37:36,640 --> 00:37:39,920
happening at this level we can actually

00:37:37,920 --> 00:37:41,680
have a conversation about this which is

00:37:39,920 --> 00:37:43,280
really exciting to me that we can we can

00:37:41,680 --> 00:37:46,560
we can we can do things like this

00:37:43,280 --> 00:37:48,079
now um a little bit more about lidex

00:37:46,560 --> 00:37:50,480
which is the framework that we use to

00:37:48,079 --> 00:37:51,119
put together the sock it's a really

00:37:50,480 --> 00:37:52,640
powerful

00:37:51,119 --> 00:37:54,480
system-on-chip integration framework

00:37:52,640 --> 00:37:56,800
it's made by um

00:37:54,480 --> 00:37:58,400
you know florence um and he's also look

00:37:56,800 --> 00:38:00,880
he's located in france

00:37:58,400 --> 00:38:02,160
um it's uh his github repost here is

00:38:00,880 --> 00:38:03,359
enjoy digital

00:38:02,160 --> 00:38:05,280
like as i mentioned before it's all

00:38:03,359 --> 00:38:07,839
written in meegan which is a

00:38:05,280 --> 00:38:08,880
it's based on python and outputs verilog

00:38:07,839 --> 00:38:10,480
um and

00:38:08,880 --> 00:38:12,079
uh i've included on the right-hand side

00:38:10,480 --> 00:38:15,440
sort of example of what the

00:38:12,079 --> 00:38:17,040
um sorry oops uh of what the

00:38:15,440 --> 00:38:19,040
the number of arguments and sort of

00:38:17,040 --> 00:38:20,880
customizations you can have

00:38:19,040 --> 00:38:22,079
on the sock core you can kind of just

00:38:20,880 --> 00:38:23,599
glance over the list and

00:38:22,079 --> 00:38:26,000
it's mind-boggling how many things you

00:38:23,599 --> 00:38:26,880
can add to it but uh the high point here

00:38:26,000 --> 00:38:29,200
is that like

00:38:26,880 --> 00:38:30,480
like if you don't like what i'm putting

00:38:29,200 --> 00:38:32,000
in as the reference design

00:38:30,480 --> 00:38:33,760
you can do what you want right like if

00:38:32,000 --> 00:38:34,160
you can put a multi-core of x-rays in

00:38:33,760 --> 00:38:36,079
there two

00:38:34,160 --> 00:38:37,920
three four cores whatever you want a

00:38:36,079 --> 00:38:41,119
rocket cpu you can do pico rv

00:38:37,920 --> 00:38:42,560
32 this um you know or 1k

00:38:41,119 --> 00:38:44,960
x you can do minerva i think it's a

00:38:42,560 --> 00:38:47,119
power pc implementation lm32

00:38:44,960 --> 00:38:48,960
there's a whole bunch of different cpus

00:38:47,119 --> 00:38:50,880
that you can swap in by just

00:38:48,960 --> 00:38:52,400
there's this little string here cpu type

00:38:50,880 --> 00:38:54,160
you actually just change it to the type

00:38:52,400 --> 00:38:56,480
that you want and recompile

00:38:54,160 --> 00:38:57,680
and you'll get a sock out that has that

00:38:56,480 --> 00:38:59,520
cpu that you want or you write your own

00:38:57,680 --> 00:39:01,599
cpu and extend it right

00:38:59,520 --> 00:39:02,880
and supports multiple bus types xi

00:39:01,599 --> 00:39:04,720
wishbone csr

00:39:02,880 --> 00:39:06,400
it has multi-master capability in the

00:39:04,720 --> 00:39:08,800
bosses and debug modes logic and

00:39:06,400 --> 00:39:09,440
it's really powerful um and it's pretty

00:39:08,800 --> 00:39:13,119
cool to

00:39:09,440 --> 00:39:15,920
to have been developing with this um

00:39:13,119 --> 00:39:17,359
we have uh also inside the chip um a

00:39:15,920 --> 00:39:19,359
debug complex

00:39:17,359 --> 00:39:20,960
so it allows us to do remote debugging

00:39:19,359 --> 00:39:22,320
of obviously if when you go into the

00:39:20,960 --> 00:39:23,920
secure configuration you would just

00:39:22,320 --> 00:39:25,359
compile this out so it wouldn't exist

00:39:23,920 --> 00:39:28,640
because it's a it's a huge black

00:39:25,359 --> 00:39:31,119
backdoor um but uh you know we it

00:39:28,640 --> 00:39:33,359
gives us the ability to basically use a

00:39:31,119 --> 00:39:34,240
desktop host to sort of uh debug and

00:39:33,359 --> 00:39:38,079
develop

00:39:34,240 --> 00:39:41,119
for all the i o cores um on the inside

00:39:38,079 --> 00:39:42,079
we have a bunch of um i o functions uh

00:39:41,119 --> 00:39:44,160
that are built in

00:39:42,079 --> 00:39:45,839
to the device you know sort of uh

00:39:44,160 --> 00:39:47,680
they're called we call them the csr

00:39:45,839 --> 00:39:49,839
based i o these are sort of simple i o

00:39:47,680 --> 00:39:52,560
for housekeeping we have i squared c

00:39:49,839 --> 00:39:53,920
we have some interrupt pins the keyboard

00:39:52,560 --> 00:39:57,359
uh matrix is on here

00:39:53,920 --> 00:39:59,280
power control we have jtag self jtag

00:39:57,359 --> 00:40:01,839
inspection revealed so we can go ahead

00:39:59,280 --> 00:40:03,359
and provision the e-fuses

00:40:01,839 --> 00:40:05,760
analog digital converter for power

00:40:03,359 --> 00:40:07,359
management debug uart these

00:40:05,760 --> 00:40:09,040
types of things as well as the com spy

00:40:07,359 --> 00:40:10,880
is here

00:40:09,040 --> 00:40:12,319
we also have memory mapped i o which is

00:40:10,880 --> 00:40:14,000
a sort of a higher performance version

00:40:12,319 --> 00:40:15,920
of the i o and here we hang things like

00:40:14,000 --> 00:40:16,480
the external ram which is 16 megabytes

00:40:15,920 --> 00:40:18,079
which is

00:40:16,480 --> 00:40:19,680
you know admittedly it's a small amount

00:40:18,079 --> 00:40:20,480
of ram but that was actually a very

00:40:19,680 --> 00:40:23,520
deliberate

00:40:20,480 --> 00:40:24,079
uh very deliberate choice made so that

00:40:23,520 --> 00:40:26,079
we're not

00:40:24,079 --> 00:40:28,240
writing code bases that are

00:40:26,079 --> 00:40:29,520
uninspectable there's no point in

00:40:28,240 --> 00:40:31,520
building a very trustable device and

00:40:29,520 --> 00:40:32,800
then throwing i know for example linux

00:40:31,520 --> 00:40:34,319
on it which has so many lines of code

00:40:32,800 --> 00:40:35,599
and so many patches to it i can't even

00:40:34,319 --> 00:40:38,240
keep up with it right so

00:40:35,599 --> 00:40:39,200
it's deliberately designed for a smaller

00:40:38,240 --> 00:40:41,680
attack surface

00:40:39,200 --> 00:40:43,359
os like a like a rtos type of

00:40:41,680 --> 00:40:47,119
environment

00:40:43,359 --> 00:40:49,280
um audio codec flash memory

00:40:47,119 --> 00:40:50,800
right now 120 megabytes of embedded

00:40:49,280 --> 00:40:53,280
storage and the lcd controller

00:40:50,800 --> 00:40:55,040
also exists on this bus and then we also

00:40:53,280 --> 00:40:56,720
have a cryptography complex because

00:40:55,040 --> 00:40:58,560
you know we want to be able to do crypto

00:40:56,720 --> 00:40:59,520
work um you know people who don't want

00:40:58,560 --> 00:41:01,920
to do crypto work can

00:40:59,520 --> 00:41:04,160
just compile it out but we offer aes

00:41:01,920 --> 00:41:06,000
shopify 12 shot 2

00:41:04,160 --> 00:41:07,280
cores and we have a curve two five five

00:41:06,000 --> 00:41:09,760
one nine accelerator

00:41:07,280 --> 00:41:10,319
um uh key storage rom uh we have a

00:41:09,760 --> 00:41:11,920
couple

00:41:10,319 --> 00:41:13,359
actually a couple of trngs that are

00:41:11,920 --> 00:41:15,359
built into the system

00:41:13,359 --> 00:41:17,280
and we also are careful to tie down some

00:41:15,359 --> 00:41:18,480
internal debug buses so that we make

00:41:17,280 --> 00:41:20,240
sure that there's no

00:41:18,480 --> 00:41:21,839
accidental exploits or something like

00:41:20,240 --> 00:41:24,160
this that can turn on uh

00:41:21,839 --> 00:41:26,079
buses that we didn't explicitly specify

00:41:24,160 --> 00:41:28,079
to be off

00:41:26,079 --> 00:41:30,319
uh a little bit more about the curve

00:41:28,079 --> 00:41:31,520
25519 engine this is a this is the thing

00:41:30,319 --> 00:41:33,040
that actually also came out of the

00:41:31,520 --> 00:41:36,400
project it's a full

00:41:33,040 --> 00:41:38,800
256 bit wide modular arrhythmic

00:41:36,400 --> 00:41:41,200
arithmetic alu that's built into the

00:41:38,800 --> 00:41:43,440
system so in addition to that vex core

00:41:41,200 --> 00:41:44,480
which you which i showed on the slide

00:41:43,440 --> 00:41:47,280
you can see here

00:41:44,480 --> 00:41:47,760
the vex is sort of like this red area

00:41:47,280 --> 00:41:49,599
here

00:41:47,760 --> 00:41:51,440
the curve two five five or nine is huge

00:41:49,599 --> 00:41:53,200
right it's it's you know as big or

00:41:51,440 --> 00:41:56,720
bigger than the cpu

00:41:53,200 --> 00:41:58,240
um because it's 256 bits it it's very

00:41:56,720 --> 00:42:00,800
simple pipeline you can do the field

00:41:58,240 --> 00:42:02,480
multiply uh operation in 52 cycles that

00:42:00,800 --> 00:42:05,359
includes normalization

00:42:02,480 --> 00:42:06,880
of the of the of the result uh it's

00:42:05,359 --> 00:42:08,800
about a 40x speed up

00:42:06,880 --> 00:42:10,000
on montgomery scalar multiplication

00:42:08,800 --> 00:42:12,000
which is a core operation

00:42:10,000 --> 00:42:13,599
in the divi helm and key exchange goes

00:42:12,000 --> 00:42:16,480
from about 100 milliseconds and software

00:42:13,599 --> 00:42:17,920
down to about 2.3 milliseconds um

00:42:16,480 --> 00:42:19,040
using the hardware accelerator and the

00:42:17,920 --> 00:42:20,800
part of the reason we spent so much

00:42:19,040 --> 00:42:22,240
effort on this is you know we want

00:42:20,800 --> 00:42:23,920
people to be able to secure messaging

00:42:22,240 --> 00:42:25,359
which involves the double ratchet

00:42:23,920 --> 00:42:26,880
which uses lots and lots of these

00:42:25,359 --> 00:42:28,319
operations and so if you're waiting 100

00:42:26,880 --> 00:42:30,160
milliseconds

00:42:28,319 --> 00:42:32,000
you know you know the ui glitch for 100

00:42:30,160 --> 00:42:33,440
milliseconds while the ratchet completes

00:42:32,000 --> 00:42:34,960
that's not good so we've got a harder

00:42:33,440 --> 00:42:37,119
accelerator to go ahead and

00:42:34,960 --> 00:42:38,960
um allow us to accomplish that you can

00:42:37,119 --> 00:42:39,760
read more about the docs uh at a link

00:42:38,960 --> 00:42:42,560
here we it's

00:42:39,760 --> 00:42:43,599
it's all full open source you can um of

00:42:42,560 --> 00:42:47,119
course download it

00:42:43,599 --> 00:42:50,400
and um modify it and use it for your own

00:42:47,119 --> 00:42:52,800
uh we have a pair of actually uh trngs

00:42:50,400 --> 00:42:55,839
on the device so we have a a

00:42:52,800 --> 00:42:59,040
small um actual discrete

00:42:55,839 --> 00:43:00,800
trng it's off chip uh made with discrete

00:42:59,040 --> 00:43:02,560
components and the concept of this was

00:43:00,800 --> 00:43:04,640
that it's easy to verify

00:43:02,560 --> 00:43:06,480
like literally we can put an

00:43:04,640 --> 00:43:07,280
oscilloscope on it and confirm that it's

00:43:06,480 --> 00:43:09,920
actually

00:43:07,280 --> 00:43:12,400
behaving well right but the problem also

00:43:09,920 --> 00:43:12,800
is that it's easy to tamper with um you

00:43:12,400 --> 00:43:14,160
know

00:43:12,800 --> 00:43:15,839
the fact that you can point an

00:43:14,160 --> 00:43:16,079
oscilloscope probe it means someone you

00:43:15,839 --> 00:43:17,520
know

00:43:16,079 --> 00:43:19,359
evil mate or something like this can

00:43:17,520 --> 00:43:19,920
come into your device open it up and

00:43:19,359 --> 00:43:21,119
maybe

00:43:19,920 --> 00:43:23,440
short out a point when you weren't

00:43:21,119 --> 00:43:24,079
looking or something and so as a backup

00:43:23,440 --> 00:43:26,720
we have

00:43:24,079 --> 00:43:28,400
inside the soc itself uh ring

00:43:26,720 --> 00:43:29,920
oscillator-based tng which is harder to

00:43:28,400 --> 00:43:30,800
verify because you can't see it we can't

00:43:29,920 --> 00:43:32,880
probe it

00:43:30,800 --> 00:43:33,839
um but it's also harder to tamper with

00:43:32,880 --> 00:43:35,520
at the end of the day

00:43:33,839 --> 00:43:36,400
the idea is that you just xor those two

00:43:35,520 --> 00:43:38,240
together so you get a little bit of

00:43:36,400 --> 00:43:41,599
defense and depth uh depending upon your

00:43:38,240 --> 00:43:44,960
attack scenario um

00:43:41,599 --> 00:43:47,040
so uh and so sort of in summary um

00:43:44,960 --> 00:43:49,520
you know precursor the idea is that we

00:43:47,040 --> 00:43:50,720
want to build a thing that embodied

00:43:49,520 --> 00:43:52,560
these three principles for

00:43:50,720 --> 00:43:54,079
evidence-based trust and hardware right

00:43:52,560 --> 00:43:55,280
you know we're trying to avoid

00:43:54,079 --> 00:43:57,440
complexity

00:43:55,280 --> 00:43:58,720
we try to build a full system so it's

00:43:57,440 --> 00:44:00,640
not just like we're handing you a

00:43:58,720 --> 00:44:02,079
circuit board or just a chip it's a full

00:44:00,640 --> 00:44:04,079
end to end solution for your secrets

00:44:02,079 --> 00:44:06,160
from your fingertips to your eyes

00:44:04,079 --> 00:44:08,480
and we're doing it in a very open

00:44:06,160 --> 00:44:09,839
fashion so users can sort of be

00:44:08,480 --> 00:44:12,079
empowered to

00:44:09,839 --> 00:44:14,480
verify and seal their hardware and so

00:44:12,079 --> 00:44:15,920
the idea is that we want to close this

00:44:14,480 --> 00:44:17,520
time of check time of use gap you

00:44:15,920 --> 00:44:18,319
remember this this attack you know

00:44:17,520 --> 00:44:21,359
service

00:44:18,319 --> 00:44:24,640
issue that that i illustrated before

00:44:21,359 --> 00:44:26,079
so that you know you uh can go ahead and

00:44:24,640 --> 00:44:27,440
verify some parts and we can teach

00:44:26,079 --> 00:44:29,280
people how to verify things that they

00:44:27,440 --> 00:44:31,040
want to do themselves

00:44:29,280 --> 00:44:33,119
and if you aren't the type of person who

00:44:31,040 --> 00:44:35,119
really wants to put all the effort into

00:44:33,119 --> 00:44:37,040
the verification

00:44:35,119 --> 00:44:39,359
a sort of a design goal is to make it so

00:44:37,040 --> 00:44:42,560
that ideally within maybe

00:44:39,359 --> 00:44:44,240
you know two orders of separation uh two

00:44:42,560 --> 00:44:44,640
degrees of separation you you can find a

00:44:44,240 --> 00:44:46,880
friend

00:44:44,640 --> 00:44:47,920
or trusted friend who can vouch for it

00:44:46,880 --> 00:44:49,839
for you i don't

00:44:47,920 --> 00:44:51,280
want to build systems that are so

00:44:49,839 --> 00:44:52,319
complicated you have to send to a third

00:44:51,280 --> 00:44:53,599
party system

00:44:52,319 --> 00:44:54,720
service and there's only a couple of

00:44:53,599 --> 00:44:56,480
them and they're regulated by the

00:44:54,720 --> 00:44:59,280
government or whatever it is to check

00:44:56,480 --> 00:45:01,119
i actually personally prefer to have

00:44:59,280 --> 00:45:03,119
people who have the same values of me

00:45:01,119 --> 00:45:04,800
who are in my friend's network

00:45:03,119 --> 00:45:06,160
to be able to verify things i think

00:45:04,800 --> 00:45:08,000
that's that's actually sort of

00:45:06,160 --> 00:45:09,520
fundamentally how human trust works is

00:45:08,000 --> 00:45:10,560
that you know the people

00:45:09,520 --> 00:45:12,880
who are doing it and you know their

00:45:10,560 --> 00:45:15,040
intents are good and that's actually at

00:45:12,880 --> 00:45:18,400
the end of the day what's most important

00:45:15,040 --> 00:45:21,920
uh in in in trust so

00:45:18,400 --> 00:45:23,680
uh the current development status of the

00:45:21,920 --> 00:45:24,960
of the project is that we're we've got

00:45:23,680 --> 00:45:26,560
hardware

00:45:24,960 --> 00:45:28,160
uh we're actually starting crowdfunding

00:45:26,560 --> 00:45:30,400
um there's there's a

00:45:28,160 --> 00:45:32,880
link now that's live you can go to and

00:45:30,400 --> 00:45:35,839
learn a whole lot more about the device

00:45:32,880 --> 00:45:36,880
and even potentially you know get in

00:45:35,839 --> 00:45:39,040
line to

00:45:36,880 --> 00:45:40,160
be the first ones to receive it when it

00:45:39,040 --> 00:45:43,920
ships in about a year

00:45:40,160 --> 00:45:47,119
um the and we also have

00:45:43,920 --> 00:45:48,640
um a software stack that's in progress

00:45:47,119 --> 00:45:50,640
so we've actually we're designing our

00:45:48,640 --> 00:45:52,960
own os it's rust based

00:45:50,640 --> 00:45:54,880
um and it's called zeus it's by a guy

00:45:52,960 --> 00:45:55,599
named sean zobs cross it's now booting

00:45:54,880 --> 00:45:57,040
we're

00:45:55,599 --> 00:45:59,359
we've got message passing working and

00:45:57,040 --> 00:46:00,960
logging all these sorts of things and

00:45:59,359 --> 00:46:02,880
we're now sort of like trying to push it

00:46:00,960 --> 00:46:05,119
up into the level it's useful for

00:46:02,880 --> 00:46:06,319
ux and applications um i also want to

00:46:05,119 --> 00:46:09,440
give a quick shout out to

00:46:06,319 --> 00:46:12,000
nlnet uh and the ngi zero uh

00:46:09,440 --> 00:46:14,160
project um for uh giving us funding

00:46:12,000 --> 00:46:15,920
which allowed us to sort of spend the

00:46:14,160 --> 00:46:17,920
last couple of years developing

00:46:15,920 --> 00:46:19,280
uh this project without having to deal

00:46:17,920 --> 00:46:20,079
with sort of the pressure of

00:46:19,280 --> 00:46:21,920
crowdfunding

00:46:20,079 --> 00:46:23,040
and and sort of the political politics

00:46:21,920 --> 00:46:25,040
that come from that so i really

00:46:23,040 --> 00:46:26,880
appreciate that thank you guys

00:46:25,040 --> 00:46:28,160
um and that's basically it for the

00:46:26,880 --> 00:46:30,720
presentation

00:46:28,160 --> 00:46:31,839
like i said you can go to crown supply

00:46:30,720 --> 00:46:33,599
there's a quick url at the bottom

00:46:31,839 --> 00:46:35,520
precursor.dev you can visit

00:46:33,599 --> 00:46:37,119
if you want to if you're interested in

00:46:35,520 --> 00:46:38,240
finding out more about it

00:46:37,119 --> 00:46:40,079
all the information is there and my

00:46:38,240 --> 00:46:41,119
twitter handle is at bunny studios you

00:46:40,079 --> 00:46:43,520
can tweet me

00:46:41,119 --> 00:46:45,440
as well later on uh and i think we can

00:46:43,520 --> 00:46:47,760
open this up to questions i was told

00:46:45,440 --> 00:46:50,480
uh i should end it this time and and

00:46:47,760 --> 00:46:50,480
take some questions

00:46:51,520 --> 00:46:57,440
yes indeed thanks for a great uh

00:46:54,640 --> 00:46:58,319
talk honey we have gotten some questions

00:46:57,440 --> 00:47:01,359
from the

00:46:58,319 --> 00:47:03,359
from the youtube audience the first one

00:47:01,359 --> 00:47:05,839
the first one is what do you think about

00:47:03,359 --> 00:47:08,880
the idea of delaying some syscalls

00:47:05,839 --> 00:47:10,640
as a way to make the cpu more secure

00:47:08,880 --> 00:47:12,880
delaying syscalls has been implemented

00:47:10,640 --> 00:47:15,040
as a defense against spectre

00:47:12,880 --> 00:47:16,480
oh okay so timing attacks and these

00:47:15,040 --> 00:47:20,240
types of things

00:47:16,480 --> 00:47:23,280
yeah i think that um actually

00:47:20,240 --> 00:47:25,680
personally my so delaying cis calls is a

00:47:23,280 --> 00:47:27,440
is an interesting way to encapsulate

00:47:25,680 --> 00:47:29,599
say you have a black box in the inside

00:47:27,440 --> 00:47:31,040
and it and it emits

00:47:29,599 --> 00:47:32,240
some timing side channel right and

00:47:31,040 --> 00:47:33,440
you're trying to essentially say we're

00:47:32,240 --> 00:47:34,800
going to just snap

00:47:33,440 --> 00:47:36,480
time to equal increments so you're sort

00:47:34,800 --> 00:47:38,800
of rubbing out the

00:47:36,480 --> 00:47:40,160
the the footprint the time footprint of

00:47:38,800 --> 00:47:43,119
computation

00:47:40,160 --> 00:47:44,000
the hope actually with a system as open

00:47:43,119 --> 00:47:46,079
as precursor

00:47:44,000 --> 00:47:47,599
is that we can still keep the

00:47:46,079 --> 00:47:49,280
optimizations in place

00:47:47,599 --> 00:47:50,640
but we can because it's open you can

00:47:49,280 --> 00:47:53,359
actually reason

00:47:50,640 --> 00:47:54,559
about the secure paths and so now we we

00:47:53,359 --> 00:47:56,079
don't have to turn off

00:47:54,559 --> 00:47:57,599
branch prediction we don't have to turn

00:47:56,079 --> 00:47:59,119
off caches we don't have to

00:47:57,599 --> 00:48:00,720
not do these syscalls because the

00:47:59,119 --> 00:48:02,559
compiler can actually say this is the

00:48:00,720 --> 00:48:04,319
micro architecture of the device

00:48:02,559 --> 00:48:06,160
and we can prove that this code does not

00:48:04,319 --> 00:48:07,680
have a side channel it with a lot of

00:48:06,160 --> 00:48:08,880
extra compiler analysis and some other

00:48:07,680 --> 00:48:09,680
caveats that sort of thing that's

00:48:08,880 --> 00:48:11,680
actually

00:48:09,680 --> 00:48:13,200
i would i you know and it doesn't we

00:48:11,680 --> 00:48:15,440
can't we're not there today

00:48:13,200 --> 00:48:17,280
but that's the i think the promise of

00:48:15,440 --> 00:48:19,200
openness is that we could get there

00:48:17,280 --> 00:48:20,559
um and so yes i think if we of course if

00:48:19,200 --> 00:48:22,240
we can't get there then delaying

00:48:20,559 --> 00:48:23,839
syscalls can be a way to sort of rub out

00:48:22,240 --> 00:48:24,559
the side channel information but um

00:48:23,839 --> 00:48:26,079
ideally

00:48:24,559 --> 00:48:28,000
we're getting to a point where we don't

00:48:26,079 --> 00:48:29,280
have to make these performance loss

00:48:28,000 --> 00:48:30,800
things because we're so open we can

00:48:29,280 --> 00:48:35,839
actually reason about

00:48:30,800 --> 00:48:35,839
this code not having side channels in it

00:48:36,000 --> 00:48:39,680
all right yeah that makes sense to me at

00:48:38,160 --> 00:48:43,359
least but i was not the wrong

00:48:39,680 --> 00:48:44,720
writer another question is

00:48:43,359 --> 00:48:47,599
regarding what what the scope of

00:48:44,720 --> 00:48:50,079
precursor is what is your take on email

00:48:47,599 --> 00:48:51,200
is it regarded as the web browser as in

00:48:50,079 --> 00:48:53,760
out of scope

00:48:51,200 --> 00:48:55,680
or would you would you rather view it as

00:48:53,760 --> 00:48:59,040
something like secure text messaging

00:48:55,680 --> 00:49:00,800
which is in scope uh i think i think you

00:48:59,040 --> 00:49:04,720
know you

00:49:00,800 --> 00:49:06,800
email is i think it fits within

00:49:04,720 --> 00:49:08,079
the footprint of the device

00:49:06,800 --> 00:49:11,119
computationally

00:49:08,079 --> 00:49:12,720
um i think the issue kind of more with

00:49:11,119 --> 00:49:13,920
email is that it's hard to get safe

00:49:12,720 --> 00:49:15,599
defaults on it that

00:49:13,920 --> 00:49:17,040
that don't essentially leak everything

00:49:15,599 --> 00:49:18,960
anyways to the

00:49:17,040 --> 00:49:20,640
email provider right the email itself is

00:49:18,960 --> 00:49:23,040
not by default encrypted

00:49:20,640 --> 00:49:24,559
um it you know it's it's tricky to get

00:49:23,040 --> 00:49:26,720
right um the reason why

00:49:24,559 --> 00:49:27,920
i like secure messaging is that we now

00:49:26,720 --> 00:49:29,680
have

00:49:27,920 --> 00:49:31,359
protocols and contact management things

00:49:29,680 --> 00:49:34,079
that have safe defaults

00:49:31,359 --> 00:49:35,920
and and so and so part of the the push

00:49:34,079 --> 00:49:36,880
for precursor was to build a device

00:49:35,920 --> 00:49:39,040
eventually i called

00:49:36,880 --> 00:49:40,319
a system that i called be trusted some

00:49:39,040 --> 00:49:41,839
people may have heard of this um and

00:49:40,319 --> 00:49:44,319
they're actually related so precursor is

00:49:41,839 --> 00:49:46,240
just the hardware platform and

00:49:44,319 --> 00:49:47,920
be trusted as the larger with the

00:49:46,240 --> 00:49:50,400
software on top of it

00:49:47,920 --> 00:49:52,240
thing that would be a secure solution

00:49:50,400 --> 00:49:53,599
for people who aren't tech savvy like i

00:49:52,240 --> 00:49:54,800
don't you just you shouldn't have to be

00:49:53,599 --> 00:49:57,440
a hacker

00:49:54,800 --> 00:49:58,000
to be able to configure your email and

00:49:57,440 --> 00:49:59,520
know that

00:49:58,000 --> 00:50:01,280
you know someone's not reading it part

00:49:59,520 --> 00:50:02,960
way through and even i mean even though

00:50:01,280 --> 00:50:04,079
i try my best to sorry and try to lock

00:50:02,960 --> 00:50:06,000
things down

00:50:04,079 --> 00:50:07,760
this is ui mistakes and your brain fart

00:50:06,000 --> 00:50:08,960
and then you just send without

00:50:07,760 --> 00:50:10,400
hitting the crib button or something and

00:50:08,960 --> 00:50:11,680
then you're okay well that the whole

00:50:10,400 --> 00:50:13,599
thread's gone right oops

00:50:11,680 --> 00:50:15,359
right it's like you know email email is

00:50:13,599 --> 00:50:17,200
hard from a user standpoint

00:50:15,359 --> 00:50:18,800
but it's not out of scope the show

00:50:17,200 --> 00:50:20,319
answer is not out of scope it's just the

00:50:18,800 --> 00:50:23,520
reason why we didn't

00:50:20,319 --> 00:50:24,720
pick it initially is that it's um it's

00:50:23,520 --> 00:50:27,839
hard to get right

00:50:24,720 --> 00:50:30,480
but i i i people i think people could

00:50:27,839 --> 00:50:31,839
very realistically port uh that

00:50:30,480 --> 00:50:35,359
application

00:50:31,839 --> 00:50:38,480
to the framework all right

00:50:35,359 --> 00:50:41,119
yeah uh there's uh another question here

00:50:38,480 --> 00:50:43,119
uh which regards a camera what about

00:50:41,119 --> 00:50:44,319
having a camera for example for reading

00:50:43,119 --> 00:50:46,160
qr codes i mean

00:50:44,319 --> 00:50:48,240
not for a general photography but just

00:50:46,160 --> 00:50:48,800
to just to ease the input in certain

00:50:48,240 --> 00:50:52,160
cases

00:50:48,800 --> 00:50:55,520
yes yes very good question

00:50:52,160 --> 00:50:58,640
thought about that a lot um

00:50:55,520 --> 00:51:00,319
it's possible um uh and actually the the

00:50:58,640 --> 00:51:02,319
actual precursor device itself breaks

00:51:00,319 --> 00:51:03,520
out some extra gpios into the battery

00:51:02,319 --> 00:51:05,119
compartment

00:51:03,520 --> 00:51:07,119
so and and i did a little bit of

00:51:05,119 --> 00:51:08,000
background checking on things it's it's

00:51:07,119 --> 00:51:10,720
wired up so you

00:51:08,000 --> 00:51:11,040
could potentially take a csi interface

00:51:10,720 --> 00:51:12,960
and

00:51:11,040 --> 00:51:14,960
and and as an extension a hacker

00:51:12,960 --> 00:51:16,319
extension sort of swap out the flex pcb

00:51:14,960 --> 00:51:19,280
and put a camera

00:51:16,319 --> 00:51:21,440
on it right um so it's definitely has

00:51:19,280 --> 00:51:23,440
the capability to be extended there

00:51:21,440 --> 00:51:26,240
but the reason i didn't want to throw in

00:51:23,440 --> 00:51:28,880
at this level is we work so hard to

00:51:26,240 --> 00:51:30,559
really delineate the attack surfaces

00:51:28,880 --> 00:51:32,319
within a trusted domain

00:51:30,559 --> 00:51:34,160
and pulling the camera into the trusted

00:51:32,319 --> 00:51:36,079
domain sort of breaks that

00:51:34,160 --> 00:51:37,760
that symmetry i have around around the

00:51:36,079 --> 00:51:40,319
attack surfaces right

00:51:37,760 --> 00:51:41,040
um i think that there's certainly people

00:51:40,319 --> 00:51:42,880
who can

00:51:41,040 --> 00:51:44,400
you know they know what they're doing

00:51:42,880 --> 00:51:46,240
they accept the risk

00:51:44,400 --> 00:51:48,000
um you know they feel comfortable with

00:51:46,240 --> 00:51:48,800
with the sort of the complexity of the

00:51:48,000 --> 00:51:49,839
camera chips and

00:51:48,800 --> 00:51:51,760
the other thing is the camera chips are

00:51:49,839 --> 00:51:52,800
just insanely complicated if you ever

00:51:51,760 --> 00:51:54,160
take one apart

00:51:52,800 --> 00:51:55,760
and see what's on the inside and the

00:51:54,160 --> 00:51:57,040
amount of even the firmware that runs

00:51:55,760 --> 00:51:58,480
inside the camera chip

00:51:57,040 --> 00:52:00,079
it uh it can be it can be a little

00:51:58,480 --> 00:52:02,400
daunting so uh

00:52:00,079 --> 00:52:04,160
it may it might be a thing that later on

00:52:02,400 --> 00:52:05,760
you could could support it's not

00:52:04,160 --> 00:52:07,760
ruled out but i didn't put it initially

00:52:05,760 --> 00:52:09,040
just because i can't i can't find it i

00:52:07,760 --> 00:52:11,839
couldn't source a camera that i could

00:52:09,040 --> 00:52:11,839
trust basically

00:52:12,240 --> 00:52:17,200
all right yeah cool but maybe then it

00:52:15,440 --> 00:52:19,280
would be possible to do some kind of

00:52:17,200 --> 00:52:20,720
simplistic camera thing that only reads

00:52:19,280 --> 00:52:22,559
qr codes or something like that

00:52:20,720 --> 00:52:24,000
yeah possible there's so there's some i

00:52:22,559 --> 00:52:26,240
think there's some

00:52:24,000 --> 00:52:27,280
options the other sort of complexity in

00:52:26,240 --> 00:52:30,319
the camera supply chain

00:52:27,280 --> 00:52:31,680
is that um it's it's actually they're

00:52:30,319 --> 00:52:33,200
basically just built for mobile phones

00:52:31,680 --> 00:52:33,839
and so the models keep swapping out

00:52:33,200 --> 00:52:35,680
every

00:52:33,839 --> 00:52:37,440
like few months and then it's you they

00:52:35,680 --> 00:52:38,079
all you basically can't buy a dumb

00:52:37,440 --> 00:52:40,800
camera

00:52:38,079 --> 00:52:42,079
they're going to be high-end fast

00:52:40,800 --> 00:52:42,800
cameras because that's where the market

00:52:42,079 --> 00:52:46,559
is right

00:52:42,800 --> 00:52:48,240
and so that market has anyway it's a

00:52:46,559 --> 00:52:50,000
it's a good idea that's why i'm saying

00:52:48,240 --> 00:52:52,240
um and it's a thing that i

00:52:50,000 --> 00:52:53,680
you know i have pondered um but and but

00:52:52,240 --> 00:52:56,880
these are some of the thoughts i've gone

00:52:53,680 --> 00:52:56,880
through my head and thinking about it

00:52:57,440 --> 00:53:03,680
all right yeah i had another question uh

00:53:00,480 --> 00:53:05,599
from from myself was this fpga

00:53:03,680 --> 00:53:07,680
programming is there no proprietary

00:53:05,599 --> 00:53:08,800
firmware in the fpga to handle the

00:53:07,680 --> 00:53:11,599
programming of it

00:53:08,800 --> 00:53:12,400
or is that what this prj x-ray helps

00:53:11,599 --> 00:53:15,040
with

00:53:12,400 --> 00:53:17,280
uh so the actual literal programming of

00:53:15,040 --> 00:53:20,720
the fpga is a state machine

00:53:17,280 --> 00:53:23,280
uh and it's it's pretty well documented

00:53:20,720 --> 00:53:25,680
um there's part of the reason i'm going

00:53:23,280 --> 00:53:27,680
with this particular fpga is that it has

00:53:25,680 --> 00:53:29,599
been studied by academics

00:53:27,680 --> 00:53:31,280
up and down literally people looked at

00:53:29,599 --> 00:53:32,800
it under a microscope

00:53:31,280 --> 00:53:34,240
and found all kinds of exploits and all

00:53:32,800 --> 00:53:34,640
kinds of problems but they're known we

00:53:34,240 --> 00:53:37,280
know

00:53:34,640 --> 00:53:38,079
what the issues are in the programming

00:53:37,280 --> 00:53:39,839
mechanism

00:53:38,079 --> 00:53:41,359
as opposed to some of the other fpgas

00:53:39,839 --> 00:53:42,880
which may even be

00:53:41,359 --> 00:53:44,079
more secure in the programming mechanism

00:53:42,880 --> 00:53:45,760
but we don't know we don't have we

00:53:44,079 --> 00:53:48,960
haven't looked at it yet

00:53:45,760 --> 00:53:50,640
and so but basically it's a very simple

00:53:48,960 --> 00:53:52,240
state machine that has a bit stream

00:53:50,640 --> 00:53:53,920
format that's defined um

00:53:52,240 --> 00:53:55,280
all the tools that we use to generate

00:53:53,920 --> 00:53:56,880
the bit stream are open we can

00:53:55,280 --> 00:54:00,000
re-encrypt the bit streams we can

00:53:56,880 --> 00:54:03,119
inspect them with these open tools um

00:54:00,000 --> 00:54:04,960
and so you know to to that extent i feel

00:54:03,119 --> 00:54:06,400
fairly comfortable that we haven't sort

00:54:04,960 --> 00:54:07,839
of you know i don't

00:54:06,400 --> 00:54:09,920
you don't have to buy this special box

00:54:07,839 --> 00:54:11,920
from xylinks that is cloud source has a

00:54:09,920 --> 00:54:13,520
blob on the inside that does the loading

00:54:11,920 --> 00:54:14,960
for you it's like you know we can

00:54:13,520 --> 00:54:16,559
through the python code step through it

00:54:14,960 --> 00:54:17,440
and i can show you here's where the bits

00:54:16,559 --> 00:54:21,040
go you can look on the

00:54:17,440 --> 00:54:24,800
microscope on a oscilloscope and confirm

00:54:21,040 --> 00:54:25,280
everything is in line all right yeah

00:54:24,800 --> 00:54:28,720
that's

00:54:25,280 --> 00:54:30,880
kind of nice um all right

00:54:28,720 --> 00:54:32,559
i don't think we have any more questions

00:54:30,880 --> 00:54:33,440
from uh from the youtube stream right

00:54:32,559 --> 00:54:36,799
now

00:54:33,440 --> 00:54:38,400
um in that case thank you very much for

00:54:36,799 --> 00:54:41,440
the talk it was uh

00:54:38,400 --> 00:54:44,000
way more in depth than i would ever so i

00:54:41,440 --> 00:54:46,319
couldn't understand

00:54:44,000 --> 00:54:47,680
sorry but it's very interesting to dive

00:54:46,319 --> 00:54:49,760
deep in something that

00:54:47,680 --> 00:54:50,880
you're not dealing with yourself so so

00:54:49,760 --> 00:54:54,079
thanks a lot

00:54:50,880 --> 00:54:56,720
cool yep great to see you guys

00:54:54,079 --> 00:54:57,280
yeah and i see that we already have

00:54:56,720 --> 00:55:00,079
simon

00:54:57,280 --> 00:55:00,799
uh lined up but i think we have five

00:55:00,079 --> 00:55:03,599
minutes left

00:55:00,799 --> 00:55:04,160
until uh we're about to start that right

00:55:03,599 --> 00:55:06,720
yeah

00:55:04,160 --> 00:55:07,520
so we'll go to a short pause so refill

00:55:06,720 --> 00:55:10,160
your coffees

00:55:07,520 --> 00:55:11,040
and we'll be back at 10. okay see you

00:55:10,160 --> 00:55:21,839
guys thanks

00:55:11,040 --> 00:55:21,839
see you thank you

00:55:33,520 --> 00:55:35,599

YouTube URL: https://www.youtube.com/watch?v=w8BA6_9HCzk


