Title: Atari ST Free Operating Systems - Vincent Rivière
Publication date: 2018-04-27
Playlist: foss-north 2018
Description: 
	The Atari ST was released in 1985, with a simple but efficient operating system: TOS. Later, a multitasking kernel named MiNT was adopted by Atari, and finally released as Free Software under the name FreeMiNT. GCC was ported to FreeMiNT and allowed to compile many other GNU software for the Atari platform. Emulators appeared in the '90s. As Atari TOS is still non-Free, independent developers created EmuTOS: a Free TOS clone based on open-sourced components. GCC was later upgraded to newer versions, and ready-to-use binaries of the cross-compiler were made available for Ubuntu, Cygwin, and more. This brought a new impulse to the platform. EmuTOS and FreeMiNT are still actively developed nowadays. They have been improved over the ages, and extended to support special features of emulators as well as extra hardware. They even support non-Atari hardware, such as Amiga and ColdFire processor. Moreover, development environment has been modernized to use GitHub facilities and Travis CI for automatic builds. This is a good example to see how modern tools can advantageously be used for development on old platforms.

---

Vincent Rivière has always loved computers, and the Atari ST was his first own one in 1992. He learned a lot on that machine, specially assembly language and operating system internals. Then he studied Unix and Windows development in C/C++. He worked as software engineer in several companies. Later, he became interested in cross-development, and came back to the Atari ST as training target. He ported old GCC patches to newer compiler versions, and that was the starting point of new adventures with contemporary Atari communities. Especially, he was the project manager of EmuTOS between 2010 and 2015. EmuTOS is a Free operating system compatible with the original Atari one. Combined to the FreeMiNT multitasking kernel, it extends Atari-like operating systems to unsuspected levels, such as support for GNU/Linux software and exotic hardware.

Vincent currently works as software developer at the IT department of University Paris 1 Panthéon-Sorbonne. He develops and deploys web applications related to student management, mainly using Java, Oracle Database and MySQL. 

http://foss-north.se/2018/speakers-and-talks.html#vriviere
Captions: 
	00:00:16,240 --> 00:00:17,000
Hello!

00:00:17,120 --> 00:00:17,980
[Hello!]

00:00:18,180 --> 00:00:19,440
Are you OK?

00:00:19,440 --> 00:00:20,340
[Yep!]

00:00:20,940 --> 00:00:22,540
So, let's go!

00:00:24,580 --> 00:00:26,820
First, a few words about me.

00:00:29,240 --> 00:00:31,240
[The audio equipment failed...]

00:00:34,720 --> 00:00:37,460
Okay, I can speak louder, no problem.

00:00:37,460 --> 00:00:39,120
So, let's start again.

00:00:41,220 --> 00:00:43,660
So, a few words about me.

00:00:43,660 --> 00:00:46,440
My name is Vincent Rivière

00:00:46,440 --> 00:00:50,600
I'm French, and I live in Paris.

00:00:50,600 --> 00:00:51,840
And I'm currently working

00:00:51,840 --> 00:00:53,160
as software developer

00:00:53,160 --> 00:00:56,860
in University Paris 1 Panthéon-Sorbonne.

00:00:58,160 --> 00:01:01,300
And today we will speak about...

00:01:01,300 --> 00:01:02,880
this thing.

00:01:02,880 --> 00:01:05,380
Who knows this computer?

00:01:05,540 --> 00:01:07,260
Yeah, very good.

00:01:07,260 --> 00:01:09,860
So this computer is the Atari ST.

00:01:09,860 --> 00:01:15,360
It's the first computer I had in 1992.

00:01:15,360 --> 00:01:17,920
The Atari ST was really a nice computer.

00:01:17,920 --> 00:01:19,280
You will see.

00:01:19,280 --> 00:01:21,880
And it can still be used today.

00:01:21,880 --> 00:01:23,860
We can do nice things.

00:01:24,620 --> 00:01:27,380
I have a lot of slides today,

00:01:27,380 --> 00:01:31,560
but don't worry, you will have the PDF online.

00:01:32,720 --> 00:01:34,060
OK.

00:01:34,220 --> 00:01:39,920
The Atari ST was based around the CPU 68000.

00:01:40,360 --> 00:01:45,040
It was very powerful when it was released in 1985.

00:01:46,280 --> 00:01:49,960
The Atari ST was famous about music.

00:01:49,960 --> 00:01:51,460
Not because of its soundchip,

00:01:51,460 --> 00:01:53,500
because it was a basic one.

00:01:53,500 --> 00:01:56,200
But because of the MIDI plugs

00:01:56,200 --> 00:01:58,820
which [were] on the computer.

00:01:59,840 --> 00:02:02,460
It was very popular for musicians.

00:02:03,340 --> 00:02:08,000
About storage, it uses the same floppies as PC.

00:02:08,000 --> 00:02:11,460
So it was very easy to make transfers

00:02:11,460 --> 00:02:13,900
between PC and Atari.

00:02:15,420 --> 00:02:19,480
What is the operating system of the Atari ST?

00:02:19,480 --> 00:02:24,040
Well, it is "The Operating System". TOS. T.O.S.

00:02:24,040 --> 00:02:27,360
Some people say it was: Tramiel Operating System,

00:02:27,360 --> 00:02:30,660
because of the name of the Atari CEO.

00:02:31,020 --> 00:02:34,480
And... it looks like this.

00:02:34,480 --> 00:02:38,920
So, basically, you can see: windows, icons, menus...

00:02:38,920 --> 00:02:43,620
everything as computers nowadays.

00:02:43,920 --> 00:02:47,160
This is low resolution.

00:02:47,300 --> 00:02:50,160
It's mainly used by games.

00:02:50,920 --> 00:02:54,940
Medium resolution, for using utilities.

00:02:55,300 --> 00:03:00,300
[And] the high resolution, in monochrome, for utilities.

00:03:00,420 --> 00:03:05,360
It was very nice to use.

00:03:06,200 --> 00:03:08,600
Here are a few Atari programs.

00:03:10,420 --> 00:03:13,600
For example, a dialog-based program,

00:03:13,600 --> 00:03:15,000
with everything known.

00:03:15,000 --> 00:03:18,860
With buttons, edit fields, everything.

00:03:19,220 --> 00:03:20,020
Windowed program.

00:03:20,020 --> 00:03:23,680
You can see a spreadsheet, a word processor,

00:03:23,680 --> 00:03:27,840
just like modern tools. The same.

00:03:30,820 --> 00:03:33,640
There was also some text-mode applications.

00:03:33,640 --> 00:03:37,020
But you must know that Atari people use the mouse.

00:03:37,020 --> 00:03:39,420
They don't like text-mode.

00:03:39,620 --> 00:03:42,420
And they don't like command-line.

00:03:43,380 --> 00:03:45,860
Of course, there was games.

00:03:45,860 --> 00:03:48,100
And this was a great one.

00:03:49,480 --> 00:03:51,080
And of course: demos!

00:03:51,080 --> 00:03:54,620
Which were very, very nice.

00:03:59,460 --> 00:04:04,320
In my opinion, the Atari ST had a GUI

00:04:04,320 --> 00:04:07,820
which was similar to early Macintosh.

00:04:07,820 --> 00:04:11,160
But the API was similar to MS-DOS.

00:04:11,160 --> 00:04:15,540
Just like short file names, 8.3, etc.

00:04:15,540 --> 00:04:17,620
But everything was much, much cleaner

00:04:17,620 --> 00:04:20,840
thanks to the 68000 CPU.

00:04:22,300 --> 00:04:24,200
About the internals:

00:04:24,200 --> 00:04:27,180
Basically, you have the hardware.

00:04:27,180 --> 00:04:29,560
Then on top you have the BIOS,

00:04:29,560 --> 00:04:32,180
for low-level input/output.

00:04:32,360 --> 00:04:34,700
GEMDOS, which handles

00:04:34,700 --> 00:04:37,880
memory, filesystems, processes...

00:04:38,580 --> 00:04:41,580
VDI, for low-level graphics, and more.

00:04:41,740 --> 00:04:45,260
AES, for the menus, windows, dialogs...

00:04:45,380 --> 00:04:47,920
And the Desktop for user interface.

00:04:47,920 --> 00:04:50,700
The three upper layers are called GEM.

00:04:52,740 --> 00:04:54,080
About programming:

00:04:54,080 --> 00:04:57,280
Of course, BASIC was very popular, then.

00:04:58,480 --> 00:05:00,760
And... assembly language.

00:05:00,760 --> 00:05:04,080
Because BASIC was not very...

00:05:04,700 --> 00:05:07,700
It was very nice, but not very fast,

00:05:07,700 --> 00:05:11,500
so people started learning assembly language.

00:05:11,500 --> 00:05:15,040
Here is a simple sample, a simple "Hello, World!".

00:05:16,740 --> 00:05:20,840
C. The C language was not so much used, because

00:05:20,840 --> 00:05:25,200
compilers [were] not as good as today.

00:05:26,280 --> 00:05:28,520
And, to compile a C program,

00:05:28,520 --> 00:05:31,240
you had to have a hard disk,

00:05:31,240 --> 00:05:33,940
and not everyone had a hard disk.

00:05:36,700 --> 00:05:39,320
Here is a nice command-line interface I used.

00:05:39,320 --> 00:05:43,540
But as I said, people didn't use much command-line.

00:05:44,600 --> 00:05:47,520
There was C compilers.

00:05:49,420 --> 00:05:51,780
I used that one. C68.

00:05:51,780 --> 00:05:55,780
It was a nice one. I used it much.

00:05:57,700 --> 00:06:00,640
But where it becomes interesting...

00:06:01,960 --> 00:06:07,040
A few years before that, in the year 1990,

00:06:07,040 --> 00:06:11,620
something really unexpected happened on the Atari.

00:06:12,340 --> 00:06:17,260
It was MiNT. MiNT is Not TOS.

00:06:17,260 --> 00:06:19,980
A recursive acronym, just like GNU.

00:06:21,520 --> 00:06:27,380
It is a multitasking kernel for the Atari ST.

00:06:28,120 --> 00:06:31,040
It works on top of TOS.

00:06:31,220 --> 00:06:33,860
It supports device drivers.

00:06:34,080 --> 00:06:36,480
It supports alternate filesystems,

00:06:36,480 --> 00:06:39,580
such as MINIX, ext2 from Linux.

00:06:39,720 --> 00:06:40,800
Long filenames.

00:06:40,940 --> 00:06:43,380
Basically, it extends the TOS API

00:06:43,380 --> 00:06:45,480
with UNIX-like features.

00:06:46,240 --> 00:06:49,260
So it's something which is really, really different

00:06:49,260 --> 00:06:51,740
from the Atari ST.

00:06:52,080 --> 00:06:59,040
But Eric R. Smith developed it and released it in 1990.

00:07:01,220 --> 00:07:06,160
In 1992, Atari hired Eric R. Smith

00:07:06,160 --> 00:07:11,420
and they added some software to MiNT.

00:07:11,420 --> 00:07:14,320
- A multitasking AES, for graphical interface.

00:07:14,320 --> 00:07:16,440
- A multitasking desktop

00:07:16,440 --> 00:07:19,800
And... it was a bit slow, but it worked.

00:07:20,420 --> 00:07:24,220
Then, as MiNT was hired by Atari,

00:07:24,660 --> 00:07:28,660
it has been renamed to: MiNT is Now TOS.

00:07:31,340 --> 00:07:38,060
Here is MultiTOS working on my 4 MB Atari STe

00:07:38,840 --> 00:07:41,940
It was a bit slow, but it worked.

00:07:44,680 --> 00:07:46,320
About compatibility.

00:07:47,180 --> 00:07:50,960
Generally, for utilities, which respect the OS,

00:07:50,960 --> 00:07:53,420
it works really fine.

00:07:54,760 --> 00:07:57,840
But not all programs respect the OS.

00:08:00,840 --> 00:08:03,540
MiNT also has memory protection.

00:08:03,540 --> 00:08:06,360
It is not virtual memory,

00:08:06,360 --> 00:08:11,620
but it's a way for processes to not crush each other.

00:08:12,300 --> 00:08:14,800
Ahem, sorry. I'm just...

00:08:15,440 --> 00:08:18,680
I have a little keyboard problem...

00:08:19,380 --> 00:08:20,280
OK.

00:08:20,360 --> 00:08:23,820
The MiNTLib. MiNTLib is very important.

00:08:23,820 --> 00:08:27,140
MiNTLib is a standard library

00:08:28,180 --> 00:08:30,620
It provides POSIX API.

00:08:31,200 --> 00:08:34,720
So it is translated at runtime.

00:08:34,840 --> 00:08:38,560
So it's translated to MiNT system calls,

00:08:38,560 --> 00:08:40,420
if MiNT is available.

00:08:40,420 --> 00:08:45,200
Otherwise, it translates to TOS system calls.

00:08:45,760 --> 00:08:48,620
So binaries can automatically take advantage

00:08:48,620 --> 00:08:51,400
of MiNT features at runtime when available.

00:08:51,400 --> 00:08:54,280
For example: directory API.

00:08:55,160 --> 00:08:57,380
If MiNT is present, long filenames work.

00:08:57,380 --> 00:09:01,200
If not, short filenames still work.

00:09:02,860 --> 00:09:05,180
The most important thing:

00:09:05,200 --> 00:09:06,980
Most GNU/Linux software

00:09:06,980 --> 00:09:10,200
can be built out of the box for MiNT

00:09:10,200 --> 00:09:12,440
without specific adaptations.

00:09:12,440 --> 00:09:18,360
So basically, you run "configure", "make" and it works.

00:09:18,960 --> 00:09:21,700
Sometimes, you may have to patch a few things,

00:09:21,700 --> 00:09:24,160
but globally, it works really fine.

00:09:27,280 --> 00:09:29,400
And the resulting binaries,

00:09:29,400 --> 00:09:32,060
if they don't need advanced features,

00:09:32,060 --> 00:09:33,940
they can run in plain TOS.

00:09:34,200 --> 00:09:36,240
Even without [Free]MiNT.

00:09:39,840 --> 00:09:45,480
Here, you can still see my old 4 MB Atari STe

00:09:45,480 --> 00:09:50,100
running in... maybe it was in 1995

00:09:51,940 --> 00:10:01,820
with bash, the real Bourne Again SHell.

00:10:01,820 --> 00:10:05,240
And I use the C68 compiler

00:10:05,240 --> 00:10:07,460
to compile a simple "Hello, world!"

00:10:08,360 --> 00:10:12,860
Really, it is a very UNIX-like environment.

00:10:12,860 --> 00:10:15,180
I used it much when I was at school.

00:10:15,180 --> 00:10:16,960
I used a UNIX at school,

00:10:16,960 --> 00:10:21,080
and I used that thing at home.

00:10:22,660 --> 00:10:25,900
In 1997, I stopped using the Atari ST

00:10:25,900 --> 00:10:29,440
because I reached the limits, not enough CPU,

00:10:29,440 --> 00:10:32,160
so I switched to some dark side.

00:10:33,700 --> 00:10:39,160
But meanwhile, on the Atari scene, the story continued.

00:10:40,060 --> 00:10:42,260
Atari released other computers.

00:10:42,260 --> 00:10:46,980
Mainly the Atari TT, which is in [the] picture.

00:10:46,980 --> 00:10:50,380
And most of all, the Atari Falcon.

00:10:52,840 --> 00:10:54,240
The Atari company:

00:10:54,240 --> 00:11:01,120
In 1993, it stopped all computer activities.

00:11:01,320 --> 00:11:05,400
The company has been bought several times.

00:11:05,400 --> 00:11:08,840
And finally, it has been bought by Infogrames,

00:11:08,840 --> 00:11:12,240
which has been renamed to Atari, finally.

00:11:14,520 --> 00:11:16,160
TOS-related software:

00:11:17,500 --> 00:11:20,480
It has been abandoned, but unofficially.

00:11:20,480 --> 00:11:26,660
So the problem is: nowadays, it's not usable legally.

00:11:26,660 --> 00:11:30,200
So it is the problem of closed source.

00:11:30,200 --> 00:11:34,080
Closed abandoned source software.

00:11:34,380 --> 00:11:37,740
The special case of [Free]MiNT kernel.

00:11:38,040 --> 00:11:41,720
It has always [been] provided as open source

00:11:42,400 --> 00:11:44,560
and supported by the community.

00:11:44,800 --> 00:11:47,460
It has been renamed as FreeMiNT.

00:11:48,240 --> 00:11:50,200
and put into CVS.

00:11:50,420 --> 00:11:54,660
FreeMiNT is something really important today

00:11:54,660 --> 00:11:56,380
for the MiNT community.

00:11:57,460 --> 00:12:00,120
SpareMiNT. SpareMiNT is a distribution.

00:12:01,380 --> 00:12:05,780
Based around RPM packages, the same as Red Hat.

00:12:06,080 --> 00:12:08,500
With FreeMiNT, GCC 2,

00:12:08,500 --> 00:12:10,260
and a huge effort to provide

00:12:10,260 --> 00:12:14,060
a complete UNIX-like environment for....

00:12:14,260 --> 00:12:16,420
Sorry, I clicked.

00:12:18,200 --> 00:12:23,060
It's an effort to provide a full UNIX-like environment

00:12:23,060 --> 00:12:24,900
for Atari machines.

00:12:26,700 --> 00:12:29,400
Around the year 2000,

00:12:29,400 --> 00:12:33,540
I was working with C++.

00:12:33,540 --> 00:12:39,300
And I wanted to use templates, advanced things...

00:12:39,300 --> 00:12:40,440
Mainly on the GameBoy Advance,

00:12:40,440 --> 00:12:41,900
because it was a cool machine.

00:12:41,900 --> 00:12:44,200
But I didn't know either the GameBoy Advance,

00:12:44,200 --> 00:12:45,240
and neither GCC,

00:12:45,240 --> 00:12:50,420
so I started to train with GCC for the Atari ST.

00:12:50,560 --> 00:12:54,860
And I never went back to the GameBoy.

00:12:57,680 --> 00:13:02,560
I found the work of Patrice on the on the web,

00:13:02,560 --> 00:13:04,640
and it's very important because

00:13:04,640 --> 00:13:07,600
I could start with that.

00:13:07,780 --> 00:13:09,680
What I want to say is:

00:13:09,680 --> 00:13:12,060
When you do something, publish it.

00:13:12,060 --> 00:13:15,860
So someone, someday, can use it again.

00:13:16,000 --> 00:13:19,840
So he used the old patches from GCC 2

00:13:19,840 --> 00:13:22,080
and upgraded them to GCC 3.

00:13:22,080 --> 00:13:25,860
So I took them, and I upgraded them to GCC 4.

00:13:25,980 --> 00:13:27,940
It was not so easy.

00:13:30,500 --> 00:13:33,820
So I worked for years, alone.

00:13:34,640 --> 00:13:36,040
It was not fun.

00:13:36,580 --> 00:13:39,500
Upgrading versions, fixing many many bugs,

00:13:39,500 --> 00:13:42,180
because... a lot of things.

00:13:42,180 --> 00:13:45,080
And finally, in 2007,

00:13:45,080 --> 00:13:49,920
I released the m68k-atari-mint cross-tools

00:13:49,920 --> 00:13:53,320
with ready-to-use binaries for Cygwin

00:13:53,320 --> 00:13:56,320
and GCC 4, and all the libraries.

00:13:58,040 --> 00:14:01,220
You certainly know what Cygwin is.

00:14:01,220 --> 00:14:04,300
It's a full UNIX-like environment for Windows.

00:14:04,820 --> 00:14:07,740
That's my favorite Windows software.

00:14:10,260 --> 00:14:14,400
And I published the...

00:14:14,560 --> 00:14:17,220
I made an announce on the newsgroups,

00:14:17,220 --> 00:14:21,740
and it was the beginning of my public contributions.

00:14:22,960 --> 00:14:27,200
If you are interested about the

00:14:27,200 --> 00:14:29,820
GCC port for the Atari ST,

00:14:30,520 --> 00:14:33,820
I wrote an article in Software Developer's Journal,

00:14:33,820 --> 00:14:37,580
and the full PDF is available on my website.

00:14:40,440 --> 00:14:41,520
With the community, really,

00:14:41,520 --> 00:14:43,860
I got very very good feedback.

00:14:46,340 --> 00:14:47,160
And someone told me:

00:14:47,160 --> 00:14:49,000
"Hey, go to the MiNT Mailing List!"

00:14:49,000 --> 00:14:50,540
"Oh, what is it?"

00:14:51,280 --> 00:14:54,660
And there, in the MiNT Mailing List, I got...

00:14:55,040 --> 00:14:58,700
People told me a lot a lot of things.

00:15:02,240 --> 00:15:04,320
And I discovered [that] the Atari machines

00:15:04,320 --> 00:15:06,120
were still used.

00:15:06,980 --> 00:15:11,200
So the main hardware is the Falcon 030.

00:15:11,200 --> 00:15:13,000
It's really...

00:15:13,000 --> 00:15:16,200
People are really fans of this machine.

00:15:18,860 --> 00:15:20,620
It's very, very popular.

00:15:20,620 --> 00:15:23,940
And mainly the CT60 accelerator,

00:15:23,940 --> 00:15:28,420
which brings more speed, etc.

00:15:28,540 --> 00:15:30,100
Here is the Atari Falcon.

00:15:30,100 --> 00:15:35,240
It's the same look and feel as the Atari ST,

00:15:35,240 --> 00:15:37,700
but much, much, much [more] powerful.

00:15:38,940 --> 00:15:43,260
This is the CT60, the accelerator board

00:15:44,380 --> 00:15:48,060
with 68060 CPU,

00:15:49,240 --> 00:15:51,220
and also an extension port.

00:15:51,760 --> 00:15:55,480
And a bunch of RAM, also.

00:15:56,260 --> 00:15:58,460
Here you can see the SuperVidel,

00:15:58,460 --> 00:16:01,800
which is an extension board for the CT60.

00:16:01,800 --> 00:16:03,500
Popular, also.

00:16:04,560 --> 00:16:09,720
There are also USB drivers for USB Mass Storage.

00:16:11,000 --> 00:16:12,200
Devices like this.

00:16:12,200 --> 00:16:13,580
This is a recent one.

00:16:14,600 --> 00:16:18,980
CosmosEx, which is a keyboard, harddisk,

00:16:18,980 --> 00:16:20,940
floppy emulator, network emulator,

00:16:20,940 --> 00:16:23,780
for Atari machines.

00:16:23,780 --> 00:16:26,920
I discovered software, hardware, a lot of things.

00:16:27,080 --> 00:16:29,700
About hardware, there are also:

00:16:29,840 --> 00:16:31,180
Ethernet adapters,

00:16:31,900 --> 00:16:33,440
floppy emulators,

00:16:35,280 --> 00:16:37,200
keyboard emulators... a lot of things.

00:16:37,200 --> 00:16:39,940
Really, people continue making new hardware

00:16:39,940 --> 00:16:41,700
for that machine.

00:16:43,000 --> 00:16:44,880
Now about emulators.

00:16:45,920 --> 00:16:47,600
The main one is ARAnyM.

00:16:47,600 --> 00:16:50,620
ARAnyM means: Atari Running on Any Machine.

00:16:50,620 --> 00:16:54,380
It is a partial Falcon emulator.

00:16:54,380 --> 00:16:57,000
Because it focuses on speed.

00:16:57,000 --> 00:16:59,660
Speed and software compatibility.

00:17:01,460 --> 00:17:05,460
And also, it supports Native Features,

00:17:05,980 --> 00:17:06,980
which means:

00:17:06,980 --> 00:17:11,700
features implemented natively in the emulator,

00:17:11,700 --> 00:17:17,580
then used by special drivers in the Atari environment.

00:17:18,500 --> 00:17:20,320
Other emulators:

00:17:21,200 --> 00:17:24,380
Hatari and Steem are very good ones.

00:17:25,380 --> 00:17:27,820
Hatari is mainly interesting

00:17:27,820 --> 00:17:31,580
because it supports TT and Falcon emulation.

00:17:33,280 --> 00:17:37,060
Not really complete, but it's really good.

00:17:37,240 --> 00:17:40,300
And any combination of hardware, CPU.

00:17:40,300 --> 00:17:42,720
You can mix a lot a lot of things.

00:17:42,720 --> 00:17:44,320
Really interesting.

00:17:45,640 --> 00:17:50,300
Here is Steem SSE, with a nice UI.

00:17:51,300 --> 00:17:54,640
Hatari, with a basic Falcon emulation.

00:17:56,300 --> 00:17:59,280
And... ARAnyM.

00:17:59,280 --> 00:18:02,220
Here is a very basic setup.

00:18:02,720 --> 00:18:05,160
But you will see, it's not the main point.

00:18:06,980 --> 00:18:10,700
ARAnyM: it supports extended video modes,

00:18:12,060 --> 00:18:14,060
access to the host file system,

00:18:14,060 --> 00:18:16,240
network support,

00:18:17,880 --> 00:18:19,080
a lot of things.

00:18:19,400 --> 00:18:21,120
Here is EmuTOS.

00:18:21,540 --> 00:18:25,600
EmuTOS is my favorite software for the Atari ST.

00:18:26,360 --> 00:18:29,140
What is it? It is a Free operating system.

00:18:29,300 --> 00:18:30,920
It is....

00:18:31,440 --> 00:18:33,920
Really, it has more or less

00:18:33,920 --> 00:18:36,360
the same functionality as TOS.

00:18:36,360 --> 00:18:39,180
But it is really Free Software.

00:18:39,180 --> 00:18:41,180
So it can be extended,

00:18:41,180 --> 00:18:43,800
it can be distributed legally.

00:18:46,480 --> 00:18:49,960
You can see EmuTOS, the desktop.

00:18:49,960 --> 00:18:54,220
It looks really similar to Atari's one.

00:18:54,220 --> 00:18:57,040
But the implementation is different.

00:18:59,480 --> 00:19:02,080
Why the UI is similar?

00:19:02,080 --> 00:19:05,980
Because it is based on old GEM sources.

00:19:06,320 --> 00:19:09,980
Atari used these old sources from Digital Research

00:19:09,980 --> 00:19:11,800
to make their TOS.

00:19:11,800 --> 00:19:13,700
That is still non-Free.

00:19:13,880 --> 00:19:16,020
But that old software, at some point of the time,

00:19:16,020 --> 00:19:18,080
it has been freed.

00:19:18,260 --> 00:19:20,540
Then the EmuTOS people

00:19:20,540 --> 00:19:22,280
have taken the sources,

00:19:22,280 --> 00:19:25,200
have filled the gaps,

00:19:25,200 --> 00:19:27,240
and it became EmuTOS.

00:19:27,240 --> 00:19:31,180
It is a very good example of Free Software.

00:19:32,880 --> 00:19:35,880
About the main features:

00:19:35,880 --> 00:19:39,720
It is distributed in ROM,

00:19:39,720 --> 00:19:41,500
RAM, for running on real hardware

00:19:41,500 --> 00:19:43,160
without changing the ROM.

00:19:43,160 --> 00:19:45,680
It has a built-in harddisk driver,

00:19:45,680 --> 00:19:47,900
and many, many features.

00:19:48,760 --> 00:19:51,180
fVDI. What is it?

00:19:51,180 --> 00:19:53,580
It is a new VDI implementation.

00:19:53,580 --> 00:19:57,880
I told that VDI is the graphical layer.

00:19:57,880 --> 00:20:01,640
fVDI is a new implementation of the layer.

00:20:01,640 --> 00:20:04,160
And it supports external drivers.

00:20:04,880 --> 00:20:07,580
So we can write new drivers

00:20:07,580 --> 00:20:10,560
to support new graphical hardware.

00:20:12,220 --> 00:20:13,560
For example,

00:20:16,260 --> 00:20:18,560
for ARAnyM extended video modes.

00:20:18,560 --> 00:20:23,220
So here, you can see ARAnyM running with EmuTOS

00:20:23,220 --> 00:20:26,660
and extended video mode, with plenty of space.

00:20:30,340 --> 00:20:31,940
Other Free Software.

00:20:32,100 --> 00:20:35,120
Tera Desktop. It is an extended desktop.

00:20:35,120 --> 00:20:40,960
Here is TeraDesk. Still a bit monochrome,

00:20:40,960 --> 00:20:43,700
but it can support a lot of other things.

00:20:44,780 --> 00:20:48,120
XaAES. It is the windowed environment.

00:20:48,800 --> 00:20:51,420
It supports multitasking AES.

00:20:51,420 --> 00:20:52,540
It is provided by FreeMiNT,

00:20:52,540 --> 00:20:55,540
and it is still Free Software.

00:20:56,480 --> 00:20:58,580
And here you can see...

00:20:58,760 --> 00:21:01,720
ARAnyM, EmuTOS, FreeMiNT, XaAES, Tera Desktop.

00:21:01,720 --> 00:21:04,140
It's a full stack of Free Software.

00:21:05,400 --> 00:21:08,860
TosWin2. It is a terminal emulator.

00:21:10,200 --> 00:21:12,700
And here you can see bash

00:21:12,700 --> 00:21:15,280
running inside a window.

00:21:16,980 --> 00:21:18,940
So, a lot of bricks.

00:21:18,940 --> 00:21:20,600
Putting all together.

00:21:21,520 --> 00:21:23,980
There was the EasyMiNT installer

00:21:23,980 --> 00:21:27,780
to easily install the SpareMiNT distribution.

00:21:27,980 --> 00:21:30,560
Here is an example installation,

00:21:30,560 --> 00:21:32,300
with every software.

00:21:32,300 --> 00:21:34,320
Then you can run

00:21:34,320 --> 00:21:38,180
several Atari programs simultaneously.

00:21:40,400 --> 00:21:41,500
What I mean [with] Atari programs,

00:21:41,500 --> 00:21:44,080
I mean old or new binaries.

00:21:44,080 --> 00:21:46,520
Even old programs can be multitasked.

00:21:48,840 --> 00:21:50,500
And other distributions.

00:21:50,500 --> 00:21:53,420
AFROS, which is also provided as a live CD.

00:21:54,340 --> 00:21:57,320
The miniPack, which has support

00:21:57,320 --> 00:21:59,840
for PlayStation 3 with ARAnyM.

00:22:00,540 --> 00:22:02,800
VanillaMiNT. A very simple distribution,

00:22:02,800 --> 00:22:05,360
but easy to install on any machine.

00:22:06,300 --> 00:22:10,920
EasyAraMiNT, which is much prettier than other ones,

00:22:10,920 --> 00:22:13,600
because it's not always green.

00:22:14,520 --> 00:22:16,400
You can put a desktop background,

00:22:16,400 --> 00:22:18,500
you can change icons,

00:22:18,500 --> 00:22:19,820
you can surf the web,

00:22:19,820 --> 00:22:22,360
you can do many things.

00:22:23,560 --> 00:22:29,940
BeeKey, which is a distribution for Raspberry Pi.

00:22:30,600 --> 00:22:34,120
And even Gentoo. Gentoo FreeMiNT.

00:22:36,860 --> 00:22:40,780
So, many, many distributions.

00:22:42,340 --> 00:22:44,860
A few software. For example, NetSurf.

00:22:44,860 --> 00:22:47,740
The famous browser can run on FreeMiNT.

00:22:47,740 --> 00:22:49,640
You can see it running,

00:22:49,640 --> 00:22:50,520
and browse the web

00:22:50,520 --> 00:22:52,800
from an Atari machine or emulator.

00:22:53,300 --> 00:22:57,180
GFA Basic Editor, which is still maintained

00:22:58,200 --> 00:22:59,560
Taskbar, which is a modern

00:22:59,560 --> 00:23:01,820
task bar for Atari systems.

00:23:03,820 --> 00:23:07,220
MyAES which is another windowed environment.

00:23:08,440 --> 00:23:11,380
with a different look and feel. Very nice.

00:23:13,180 --> 00:23:16,740
Conholio, which is an alternate terminal emulator.

00:23:16,740 --> 00:23:20,180
It is based on Linux virtual consoles.

00:23:20,480 --> 00:23:22,940
So [more] compatible than other ones.

00:23:24,060 --> 00:23:25,380
Benchmark.

00:23:26,340 --> 00:23:27,980
FTP client.

00:23:28,680 --> 00:23:30,060
Video player.

00:23:30,700 --> 00:23:31,900
Music player.

00:23:32,420 --> 00:23:34,440
Amiga music player.

00:23:35,400 --> 00:23:38,960
And even Doom running in a window.

00:23:40,260 --> 00:23:43,340
And... my own recompiled software.

00:23:43,340 --> 00:23:46,540
I took some packages from Linux,

00:23:46,540 --> 00:23:49,380
and I did "configure", "make",

00:23:49,380 --> 00:23:52,540
and it just worked.

00:23:54,140 --> 00:23:57,460
There are also other C compilers.

00:23:57,980 --> 00:23:59,200
AHCC.

00:23:59,560 --> 00:24:01,900
vbcc, which is multi-platform.

00:24:01,900 --> 00:24:06,140
GCC 7, because people have upgraded my work.

00:24:08,120 --> 00:24:09,620
Many, many, many other software.

00:24:09,620 --> 00:24:11,620
So, what is important?

00:24:11,620 --> 00:24:13,960
Thanks to the community and free software,

00:24:13,960 --> 00:24:18,360
the Atari ST and its successors still live today.

00:24:20,440 --> 00:24:22,120
But the story continued,

00:24:22,120 --> 00:24:25,580
because as I released GCC 4,

00:24:26,700 --> 00:24:30,580
it really gave a new impulse to the community,

00:24:30,580 --> 00:24:34,860
and more things have been ported.

00:24:35,400 --> 00:24:38,620
The first thing people asked was:

00:24:38,620 --> 00:24:41,580
"Oh, I use this Linux distribution,

00:24:41,580 --> 00:24:44,320
I would like to have binaries."

00:24:44,320 --> 00:24:49,260
OK, so I set up a Debian repository,

00:24:49,260 --> 00:24:54,780
I created Debian packages,

00:24:54,780 --> 00:24:57,100
I provided Ubuntu binaries...

00:24:57,100 --> 00:25:01,720
After that, recently, I put everything into Ubuntu PPA.

00:25:01,840 --> 00:25:04,480
So there are a lot of binaries.

00:25:04,480 --> 00:25:07,340
Other people also provided their own binaries

00:25:07,340 --> 00:25:10,180
for other systems.

00:25:12,860 --> 00:25:15,100
Of course, it has only been possible

00:25:15,100 --> 00:25:16,880
because it was Free Software

00:25:16,880 --> 00:25:18,920
and published, of course.

00:25:19,920 --> 00:25:22,620
GitHub. This is a typical example

00:25:22,620 --> 00:25:24,580
where new tools can be used

00:25:24,580 --> 00:25:26,280
for old software.

00:25:28,180 --> 00:25:32,540
Because some projects were in CVS,

00:25:32,540 --> 00:25:36,040
some others weren't [anywhere] at all.

00:25:37,220 --> 00:25:41,120
And recently, all the projects have moved to GitHub

00:25:41,120 --> 00:25:43,620
with all the facilities we know.

00:25:43,620 --> 00:25:45,700
With easy browsing on the web,

00:25:45,700 --> 00:25:48,840
and also full history.

00:25:50,020 --> 00:25:52,840
Travis CI. This is really something interesting

00:25:52,840 --> 00:25:57,620
because it's an automatic building tool on the web.

00:25:57,780 --> 00:26:02,380
And it can be used to rebuild everything.

00:26:02,380 --> 00:26:04,760
To rebuild the FreeMiNT kernel,

00:26:04,760 --> 00:26:06,140
all the components,

00:26:06,140 --> 00:26:07,720
on each commit.

00:26:09,140 --> 00:26:12,780
And everything is deployed to Bintray.

00:26:12,940 --> 00:26:17,120
Before that, binaries for FreeMiNT

00:26:17,120 --> 00:26:19,320
were complicated to get.

00:26:19,320 --> 00:26:23,140
Everyone had to get a compiler to compile it himself.

00:26:23,140 --> 00:26:25,520
So now, on every commit,

00:26:25,520 --> 00:26:28,980
everyone can get daily snapshots.

00:26:31,040 --> 00:26:34,120
So I did the same thing for EmuTOS sources.

00:26:34,120 --> 00:26:36,140
So... same thing.

00:26:36,140 --> 00:26:39,400
When we commit something into EmuTOS,

00:26:39,400 --> 00:26:42,680
binary snapshots are available immediately.

00:26:43,700 --> 00:26:47,320
I also tried the same technique for...

00:26:47,320 --> 00:26:50,480
for the patches for GCC.

00:26:50,480 --> 00:26:52,920
So on every commit,

00:26:52,920 --> 00:26:55,540
all Ubuntu PPA are rebuilt.

00:26:55,540 --> 00:26:57,260
It's also nice.

00:26:58,060 --> 00:27:01,700
It's faster than when I did it manually.

00:27:03,040 --> 00:27:04,940
And new hardware projects.

00:27:05,840 --> 00:27:07,060
The Suska board.

00:27:07,060 --> 00:27:08,760
It is a really nice one,

00:27:08,760 --> 00:27:12,560
because it is a full Atari ST in an FPGA.

00:27:14,160 --> 00:27:15,500
It just works.

00:27:18,380 --> 00:27:23,260
And it's open software, also.

00:27:24,580 --> 00:27:28,200
The FireBee. The FireBee is a big project.

00:27:29,020 --> 00:27:31,920
I spent a lot of years of my of my life

00:27:31,920 --> 00:27:34,320
working for the FireBee.

00:27:34,320 --> 00:27:39,180
Basically, it is a Falcon-compatible computer

00:27:39,180 --> 00:27:41,360
with a ColdFire CPU.

00:27:42,300 --> 00:27:45,600
So, how was it done?

00:27:45,860 --> 00:27:48,000
Basically, it was the...

00:27:50,340 --> 00:27:54,320
the core of the Suska board, with an FPGA.

00:27:54,500 --> 00:27:56,260
The...

00:28:00,140 --> 00:28:01,760
I will tell you [later].

00:28:01,900 --> 00:28:03,880
Here is the FireBee board.

00:28:03,880 --> 00:28:06,260
You have the FPGA,

00:28:06,260 --> 00:28:08,760
for emulation of Atari hardware.

00:28:08,760 --> 00:28:11,300
The ColdFire, as main CPU.

00:28:11,300 --> 00:28:15,780
And the PIC, for additional tasks.

00:28:18,080 --> 00:28:19,700
This is open hardware.

00:28:19,700 --> 00:28:22,880
All the plans are available on the web.

00:28:24,940 --> 00:28:26,580
The ColdFire: what is it?

00:28:26,580 --> 00:28:29,960
It is the successor of the 68000,

00:28:29,960 --> 00:28:32,500
but it isn't fully compatible.

00:28:32,500 --> 00:28:35,320
There are missing instructions.

00:28:35,620 --> 00:28:36,720
You may wonder why.

00:28:36,720 --> 00:28:39,260
Why are there missing instructions?

00:28:39,720 --> 00:28:42,560
[Legal issues?]

00:28:42,640 --> 00:28:44,560
No legal issues.

00:28:44,680 --> 00:28:47,760
Because it was a new CPU

00:28:47,760 --> 00:28:50,120
which has been simplified.

00:28:50,120 --> 00:28:57,180
Because compilers don't use some instructions.

00:28:58,000 --> 00:29:00,500
So generally, compilers are good enough

00:29:00,500 --> 00:29:02,580
to use other instructions.

00:29:02,580 --> 00:29:05,680
So instructions have been removed

00:29:05,680 --> 00:29:08,020
to improve the speed.

00:29:08,020 --> 00:29:10,300
Because old processors were running

00:29:10,300 --> 00:29:14,820
at something like 8 or 16 MHz.

00:29:14,820 --> 00:29:16,000
This one is running at

00:29:16,000 --> 00:29:19,960
much much much higher frequency.

00:29:19,960 --> 00:29:22,500
It was mainly used in embedded systems.

00:29:22,500 --> 00:29:25,780
For example, there are HP printers

00:29:25,780 --> 00:29:27,600
using that CPU.

00:29:27,600 --> 00:29:29,840
But as far as I know,

00:29:29,840 --> 00:29:34,000
there is no computer based on this CPU.

00:29:34,180 --> 00:29:36,260
And also, it's a microcontroller

00:29:36,260 --> 00:29:37,780
with embedded features

00:29:37,780 --> 00:29:39,980
such as Ethernet, PCI,

00:29:39,980 --> 00:29:42,140
and many, many things.

00:29:42,320 --> 00:29:44,520
So basically, for the FireBee,

00:29:44,520 --> 00:29:48,360
it was the Suska FPGA core.

00:29:48,360 --> 00:29:51,020
The 68000 has been removed,

00:29:51,020 --> 00:29:53,520
ColdFire has been used instead,

00:29:53,520 --> 00:29:54,960
and it has been modified

00:29:54,960 --> 00:29:56,680
to emulate Falcon hardware

00:29:56,680 --> 00:29:59,880
instead of ST one.

00:30:01,880 --> 00:30:04,120
About the operating system.

00:30:06,320 --> 00:30:07,580
There are two ones.

00:30:09,220 --> 00:30:11,220
EmuTOS and FireTOS.

00:30:11,360 --> 00:30:13,320
Just a word about the FireBee:

00:30:13,320 --> 00:30:14,880
It isn't a full Falcon.

00:30:14,880 --> 00:30:17,040
The main goal is to make

00:30:17,040 --> 00:30:18,600
a full Falcon emulation.

00:30:18,600 --> 00:30:21,440
But, for example, the Falcon has a DSP

00:30:21,440 --> 00:30:24,600
which is very fast and difficult to emulate.

00:30:24,600 --> 00:30:27,680
That DSP isn't emulated by the FireBee.

00:30:27,680 --> 00:30:30,340
There are also some bugs.

00:30:30,340 --> 00:30:32,580
So it isn't fully functional,

00:30:32,580 --> 00:30:34,340
but it's the main goal.

00:30:34,940 --> 00:30:36,500
So the operating system.

00:30:37,220 --> 00:30:42,140
EmuTOS is completely ColdFire native,

00:30:42,140 --> 00:30:45,600
but there is no 68000 emulation.

00:30:45,600 --> 00:30:48,320
FireTOS has partial emulation

00:30:48,320 --> 00:30:50,860
and advanced hardware support.

00:30:52,980 --> 00:30:56,320
So, how to make EmuTOS working on the [FireBee]?

00:30:57,060 --> 00:30:59,600
EmuTOS is compatible with Falcon.

00:31:00,040 --> 00:31:02,640
It has always been compatible with Falcon.

00:31:03,860 --> 00:31:07,080
The FireBee is a Falcon with a ColdFire CPU.

00:31:07,780 --> 00:31:13,020
So, just add ColdFire support into EmuTOS.

00:31:14,280 --> 00:31:17,840
And this was my main task in 2009.

00:31:18,860 --> 00:31:21,640
I had to patch assembler files.

00:31:21,800 --> 00:31:24,260
Modify all the libraries:

00:31:24,260 --> 00:31:26,580
EmuTOS, FreeMiNT kernel, etc.

00:31:26,580 --> 00:31:29,120
It took time, but it worked fine.

00:31:34,540 --> 00:31:41,160
So, why EmuTOS doesn't support 68000 emulation?

00:31:41,160 --> 00:31:44,020
Because I wanted to run everything natively.

00:31:47,560 --> 00:31:49,600
I wanted everything to be fast,

00:31:49,600 --> 00:31:51,500
with no emulation.

00:31:51,500 --> 00:31:55,760
Of course, EmuTOS can't run old binaries.

00:31:55,760 --> 00:32:00,500
But if you recompile binaries for ColdFire,

00:32:00,500 --> 00:32:03,180
they can run on EmuTOS at full speed.

00:32:03,180 --> 00:32:06,460
And also on FireTOS: fully optimized.

00:32:08,200 --> 00:32:12,480
FireTOS: it's the main OS of the FireBee

00:32:12,480 --> 00:32:15,140
because of advanced features.

00:32:16,620 --> 00:32:21,300
It has partial 68060 emulation

00:32:21,300 --> 00:32:23,720
with a library.

00:32:23,880 --> 00:32:26,420
Basically, it's Atari TOS

00:32:26,420 --> 00:32:30,500
which has been binary-patched

00:32:30,500 --> 00:32:33,240
with extended video modes.

00:32:33,400 --> 00:32:35,640
It supports USB keyboards.

00:32:37,100 --> 00:32:39,320
It's very nice.

00:32:41,160 --> 00:32:45,060
I already talked about compatibility.

00:32:45,660 --> 00:32:47,140
About FreeMiNT.

00:32:47,980 --> 00:32:50,340
Here is a typical ColdFire patch.

00:32:51,340 --> 00:32:54,320
This is the solution I chose.

00:32:54,480 --> 00:32:58,580
It uses ugly preprocessor #ifdef.

00:32:58,580 --> 00:33:01,420
It's ugly, but it works really well.

00:33:01,420 --> 00:33:05,600
I think it was the best solution.

00:33:05,600 --> 00:33:07,000
For example, here,

00:33:07,000 --> 00:33:11,780
the addressing mode "predecrementation"

00:33:11,780 --> 00:33:13,400
isn't supported on the ColdFire

00:33:13,400 --> 00:33:15,480
for the "movem" instruction.

00:33:15,480 --> 00:33:18,220
So the solution is to...

00:33:18,220 --> 00:33:21,860
to do it with another instruction, just before.

00:33:22,260 --> 00:33:27,000
So, do so, for every line of incompatible code.

00:33:29,420 --> 00:33:31,500
Here is my own setup,

00:33:31,500 --> 00:33:34,360
with EmuTOS running on the FireBee.

00:33:35,980 --> 00:33:38,200
You can see the FireBee board,

00:33:38,200 --> 00:33:40,300
because I don't have a case.

00:33:40,920 --> 00:33:42,860
And I use an Eiffel adapter

00:33:43,900 --> 00:33:46,660
to use a PS/2 keyboard and mouse

00:33:46,660 --> 00:33:49,260
and convert it into Atari keyboard.

00:33:51,560 --> 00:33:55,480
So this is the standard Falcon resolution

00:33:55,480 --> 00:33:59,280
running in 16 colors.

00:34:01,580 --> 00:34:03,580
The same, but with FreeMiNT.

00:34:03,580 --> 00:34:05,540
FreeMiNT patched for ColdFire.

00:34:05,540 --> 00:34:08,460
You can see it's the same as ARAnyM.

00:34:08,640 --> 00:34:12,040
It could be more pretty.

00:34:14,500 --> 00:34:16,060
Just a nice hack.

00:34:16,060 --> 00:34:18,900
It's 68Kemu.

00:34:19,040 --> 00:34:22,720
Because of EmuTOS for ColdFire.

00:34:22,720 --> 00:34:28,080
I told you it can't run old 68000 binaries.

00:34:28,080 --> 00:34:35,240
So, the idea was to emulate user programs

00:34:35,240 --> 00:34:38,200
using a software CPU emulator,

00:34:38,200 --> 00:34:40,600
then switch to the real CPU

00:34:40,600 --> 00:34:42,620
for running the operating system.

00:34:42,620 --> 00:34:46,760
So a CPU switch when entering the kernel mode.

00:34:47,260 --> 00:34:50,380
Simple idea, it's limited,

00:34:50,380 --> 00:34:51,460
but it works fine.

00:34:51,460 --> 00:34:54,120
I was surprised it actually worked.

00:34:55,680 --> 00:34:58,260
Putting all together. Again.

00:34:59,000 --> 00:35:05,040
This is the official FreeMiNT setup for the FireBee.

00:35:05,220 --> 00:35:08,060
So I just downloaded it,

00:35:08,060 --> 00:35:12,020
put it on a CompactFlash board,

00:35:12,020 --> 00:35:15,240
then I could surf on the foss-north website.

00:35:20,300 --> 00:35:21,920
But the more interesting part

00:35:21,920 --> 00:35:25,020
is exotic hardware. My favorite one.

00:35:26,460 --> 00:35:27,620
The Kiwi board.

00:35:27,780 --> 00:35:29,220
It is not an Atari machine,

00:35:29,220 --> 00:35:34,120
but it's a computer based on 68008.

00:35:34,120 --> 00:35:37,700
And the author of this board

00:35:37,700 --> 00:35:40,300
ported EmuTOS to it.

00:35:40,480 --> 00:35:44,620
So free software can run on new hardware.

00:35:46,260 --> 00:35:47,080
The MiST board.

00:35:47,080 --> 00:35:49,500
It is very popular nowadays.

00:35:49,500 --> 00:35:53,080
It is an FPGA board.

00:35:54,220 --> 00:35:55,840
It can run many cores.

00:35:56,460 --> 00:35:59,420
The Atari ST, the Amiga, old 8-bit computers,

00:35:59,420 --> 00:36:01,660
and even consoles.

00:36:01,660 --> 00:36:04,740
It's popular hardware.

00:36:05,660 --> 00:36:09,380
MiSTer. It is a clone of the MiST.

00:36:11,580 --> 00:36:13,420
It's cheaper.

00:36:14,960 --> 00:36:17,920
ColdFire evaluation board.

00:36:18,400 --> 00:36:21,360
I really love that hardware.

00:36:21,520 --> 00:36:27,420
Because it can run EmuTOS and FreeMiNT in text mode

00:36:27,420 --> 00:36:32,180
(because it doesn't have graphical output)

00:36:32,180 --> 00:36:34,980
in a terminal.

00:36:36,540 --> 00:36:40,300
And I used it to debug

00:36:40,300 --> 00:36:41,760
EmuTOS for ColdFire

00:36:41,760 --> 00:36:44,580
when the FireBee wasn't available.

00:36:49,760 --> 00:36:53,460
This board was also used

00:36:53,460 --> 00:36:55,940
to create FireTOS.

00:36:56,100 --> 00:36:57,940
Because it was another project.

00:36:57,940 --> 00:37:00,320
It was the CTPCI project.

00:37:00,960 --> 00:37:03,500
It was an add-on for the CT60 board.

00:37:03,500 --> 00:37:05,980
And as Didier needed it

00:37:05,980 --> 00:37:08,320
to debug his code,

00:37:10,240 --> 00:37:13,180
he worked on this board.

00:37:14,100 --> 00:37:15,680
Different board, different hardware,

00:37:15,680 --> 00:37:17,720
different CPU, but...

00:37:17,720 --> 00:37:20,340
he managed to go forward

00:37:20,340 --> 00:37:21,900
with this hardware.

00:37:22,040 --> 00:37:24,880
And also, he made a driver for

00:37:24,880 --> 00:37:26,900
ATI Radeon PCI card.

00:37:27,060 --> 00:37:29,880
It's truly amazing.

00:37:31,920 --> 00:37:35,620
Here is EmuTOS running in a terminal.

00:37:36,640 --> 00:37:39,540
So basically, I routed all the text output

00:37:39,540 --> 00:37:41,480
to the serial port.

00:37:41,480 --> 00:37:48,280
And here, I can run text-mode software.

00:37:48,720 --> 00:37:51,940
But as the CPU is ColdFire, I can only run

00:37:52,360 --> 00:37:55,000
ColdFire text-mode Atari software.

00:37:55,000 --> 00:37:56,820
So it's a bit limited.

00:37:57,260 --> 00:38:01,660
But it's nice enough to run FreeMiNT, bash,

00:38:01,660 --> 00:38:02,840
put an SSH server,

00:38:02,840 --> 00:38:06,900
connect to the board through SSH, etc.

00:38:10,600 --> 00:38:13,000
Easy to say, but there [were] many challenges.

00:38:13,000 --> 00:38:15,220
Because it was a new CPU,

00:38:15,220 --> 00:38:16,800
support for non-Atari hardware,

00:38:16,800 --> 00:38:21,280
because EmuTOS used all the Atari hardware.

00:38:21,460 --> 00:38:25,300
And add support for foreign hardware.

00:38:26,160 --> 00:38:27,860
But it worked.

00:38:29,780 --> 00:38:31,560
For FreeMiNT, it was actually easier,

00:38:31,560 --> 00:38:34,540
because it depends on the underlying BIOS.

00:38:34,540 --> 00:38:38,460
So if you make a clean port of EmuTOS,

00:38:38,460 --> 00:38:40,680
FreeMiNT will just run out of the box.

00:38:40,680 --> 00:38:44,740
For example, today,

00:38:44,740 --> 00:38:46,440
FreeMiNT binaries for ColdFire

00:38:46,440 --> 00:38:48,200
can run on the FireBee

00:38:48,200 --> 00:38:52,120
or on the evaluation boards.

00:38:52,120 --> 00:38:53,900
The same binaries.

00:38:57,820 --> 00:39:00,900
Do you know that machine?

00:39:01,140 --> 00:39:02,460
This is the Amiga!

00:39:02,460 --> 00:39:05,780
It is the enemy of the Atari ST.

00:39:05,780 --> 00:39:07,400
The main competitor.

00:39:08,980 --> 00:39:10,140
[The Atari won.]

00:39:11,260 --> 00:39:13,000
Atari has FreeMiNT.

00:39:13,000 --> 00:39:16,020
[I'm sorry, Atari didn't win.]

00:39:16,020 --> 00:39:19,340
And now [Amiga] has also EmuTOS.

00:39:20,780 --> 00:39:25,740
Because it was quite hard to make EmuTOS

00:39:25,740 --> 00:39:28,860
working on the ColdFire evaluation board.

00:39:29,020 --> 00:39:33,720
So, I told myself:

00:39:33,720 --> 00:39:37,340
"But it would be much easier to port it to Amiga!"

00:39:38,360 --> 00:39:40,180
I didn't know Amiga at all,

00:39:40,180 --> 00:39:43,200
so I took the Commodore documentation,

00:39:43,200 --> 00:39:44,600
and I read it.

00:39:44,740 --> 00:39:48,060
And in a very few time, it worked on the Amiga

00:39:48,060 --> 00:39:51,700
because documentation is very good.

00:39:53,160 --> 00:39:55,380
And it was not so hard because

00:39:56,540 --> 00:39:59,760
EmuTOS was already patched for non-Atari hardware.

00:39:59,760 --> 00:40:02,960
So it's the same for the Amiga.

00:40:04,640 --> 00:40:06,940
It was complicated on the evaluation board

00:40:06,940 --> 00:40:09,620
because it had a ColdFire processor.

00:40:09,620 --> 00:40:14,780
But the Amiga has a normal 68000 CPU.

00:40:16,240 --> 00:40:17,680
And the main point:

00:40:17,680 --> 00:40:20,260
I saw a video on the net

00:40:20,260 --> 00:40:25,100
where I saw that the Amiga was compatible

00:40:25,100 --> 00:40:28,580
with the Atari ST-High video mode.

00:40:30,420 --> 00:40:32,880
So I got all the elements,

00:40:32,880 --> 00:40:35,380
and it just worked.

00:40:37,860 --> 00:40:41,080
I used some routines from AROS.

00:40:41,080 --> 00:40:44,900
AROS is a free operating system for the Amiga,

00:40:44,900 --> 00:40:47,000
compatible to AmigaOS.

00:40:47,760 --> 00:40:50,080
Mainly, floppy driver,

00:40:50,080 --> 00:40:51,840
because it's a bit tricky

00:40:51,840 --> 00:40:54,460
to write a floppy driver for the Amiga.

00:40:56,320 --> 00:40:57,680
It worked well,

00:40:57,680 --> 00:41:01,500
but I couldn't release the binaries

00:41:01,500 --> 00:41:05,540
because the two projects use different licenses.

00:41:05,540 --> 00:41:08,020
It's very sad because both are open-source,

00:41:08,020 --> 00:41:10,320
but not with the same licenses.

00:41:10,500 --> 00:41:15,760
So I started replacing the AROS routines

00:41:15,760 --> 00:41:17,540
with new ones.

00:41:17,900 --> 00:41:22,040
I have done the floppy routines,

00:41:22,040 --> 00:41:24,820
but I need to do the other ones.

00:41:26,480 --> 00:41:27,420
About compatibility.

00:41:27,420 --> 00:41:31,660
Well, for software just using the OS,

00:41:31,660 --> 00:41:33,320
it just works.

00:41:33,500 --> 00:41:36,080
But of course, software like games,

00:41:36,080 --> 00:41:39,780
which go directly to the Atari hardware,

00:41:39,780 --> 00:41:41,420
it can't work. It doesn't work.

00:41:41,420 --> 00:41:43,440
So most utilities work,

00:41:43,440 --> 00:41:47,820
but almost no game works.

00:41:50,080 --> 00:41:51,320
Still on the Amiga:

00:41:51,320 --> 00:41:54,500
Who knows this board?

00:41:54,500 --> 00:41:56,180
The Vampire board.

00:41:56,580 --> 00:41:57,940
It's a cool one.

00:41:58,260 --> 00:42:01,120
On the Amiga scene, nowadays,

00:42:01,120 --> 00:42:03,540
there are much efforts for this board.

00:42:03,540 --> 00:42:05,620
The Vampire V2.

00:42:05,620 --> 00:42:09,960
It supports the 68080 CPU.

00:42:09,960 --> 00:42:10,920
It is not a real CPU,

00:42:10,920 --> 00:42:15,560
it is a CPU emulation in an FPGA.

00:42:16,380 --> 00:42:23,220
It's by far the fastest 68000 hardware compatible CPU.

00:42:24,660 --> 00:42:27,820
And... it is on this board.

00:42:27,820 --> 00:42:31,660
And of course, it is supported by EmuTOS.

00:42:32,920 --> 00:42:36,520
I even bought an Amiga, the one you saw.

00:42:36,520 --> 00:42:37,360
I even bought an Amiga

00:42:37,360 --> 00:42:41,680
and a Vampire card to support it.

00:42:44,280 --> 00:42:45,680
But why I did it?

00:42:45,680 --> 00:42:48,160
Because maybe someday,

00:42:50,040 --> 00:42:52,760
that board may work on Atari machines.

00:42:52,760 --> 00:42:56,800
So it was worth the effort to buy the Amiga

00:42:56,800 --> 00:43:00,240
if it could go back to the Atari machines.

00:43:03,840 --> 00:43:08,380
The Vampire has also an HDMI output.

00:43:10,980 --> 00:43:13,640
But it requires a special driver.

00:43:15,200 --> 00:43:21,440
So I just wrote an fVDI driver for SAGA.

00:43:22,140 --> 00:43:23,960
So the result

00:43:23,960 --> 00:43:26,500
is something like this.

00:43:28,040 --> 00:43:33,360
It's still the old EmuTOS behind the scenes.

00:43:33,360 --> 00:43:37,100
EmuTOS, FreeMiNT, XaAES...

00:43:37,100 --> 00:43:40,860
and standard Atari software.

00:43:40,860 --> 00:43:42,900
The same old binaries

00:43:42,900 --> 00:43:44,000
running on Amiga,

00:43:44,000 --> 00:43:47,120
just like the best Atari emulator,

00:43:47,120 --> 00:43:49,220
at full speed.

00:43:50,660 --> 00:43:53,500
This is the Amitari distribution.

00:43:53,500 --> 00:43:55,520
because it is a bit complicated

00:43:55,520 --> 00:43:58,020
to put everything together.

00:43:59,000 --> 00:44:01,820
Stefan has created this distribution.

00:44:01,820 --> 00:44:03,620
Just unpack and use.

00:44:04,740 --> 00:44:07,300
[Does god approve this?]

00:44:09,220 --> 00:44:11,640
I approve this.

00:44:11,640 --> 00:44:13,900
I love mixing...

00:44:15,680 --> 00:44:17,220
I love...

00:44:17,500 --> 00:44:22,720
You could call me "Dr. Frankenstein."

00:44:25,240 --> 00:44:27,000
About fVDI drivers,

00:44:27,000 --> 00:44:31,640
I also made one for WinUAE,

00:44:31,640 --> 00:44:33,000
the Amiga emulator.

00:44:33,000 --> 00:44:33,840
So the same thing,

00:44:33,840 --> 00:44:38,080
but to run all the Atari Free software

00:44:38,080 --> 00:44:40,680
on WinUAE.

00:44:41,700 --> 00:44:43,980
You can put, of course, nice background, etc.

00:44:43,980 --> 00:44:49,000
But it's my setup, with green background like Atari.

00:44:51,880 --> 00:44:55,940
So if I could ask for something:

00:44:55,940 --> 00:44:57,980
Free old software!

00:44:58,280 --> 00:45:03,020
Some of the companies have freed software.

00:45:03,620 --> 00:45:04,820
It's very nice effort,

00:45:04,820 --> 00:45:08,660
because it's the only way to keep software alive.

00:45:11,020 --> 00:45:12,700
So in conclusion:

00:45:12,700 --> 00:45:16,340
If the Atari software, Atari operating systems,

00:45:16,340 --> 00:45:18,800
are still alive today,

00:45:18,800 --> 00:45:20,980
it is not because of Atari

00:45:20,980 --> 00:45:22,880
which has abandoned everything.

00:45:22,880 --> 00:45:24,300
But because of Free Software

00:45:24,300 --> 00:45:25,640
and the community.

00:45:25,640 --> 00:45:27,920
So this can continue.

00:45:31,460 --> 00:45:35,960
And finally, if you enjoyed what I shown,

00:45:35,960 --> 00:45:38,620
you can subscribe to my new YouTube channel

00:45:38,620 --> 00:45:41,240
where I decided to show everything,

00:45:41,240 --> 00:45:42,200
step by step.

00:45:42,200 --> 00:45:44,300
It will take some years,

00:45:44,300 --> 00:45:47,980
but I started with the boring things

00:45:47,980 --> 00:45:50,780
and the cool stuff starts to come.

00:45:51,720 --> 00:45:53,700
[So this is called Vretrocomputing?]

00:45:53,700 --> 00:45:57,020
But it's my name, it's my initials. VR.

00:45:57,020 --> 00:45:58,480
[Ah, OK].

00:45:59,180 --> 00:46:00,140
That's all!

00:46:00,340 --> 00:46:02,500
Thank you for hearing.

00:46:10,760 --> 00:46:11,740
Any question?

00:46:11,740 --> 00:46:14,060
I didn't look at the time...

00:46:14,860 --> 00:46:17,500
[There are 7 minutes left until 3:00 PM]

00:46:17,500 --> 00:46:19,700
[So it's plenty of time for questions.]

00:46:19,700 --> 00:46:22,200
[I already see one from the Amiga guy.]

00:46:22,200 --> 00:46:26,420
[Where did you hide from the Amiga users]

00:46:26,420 --> 00:46:28,320
[when you did that?]

00:46:28,320 --> 00:46:29,160
Where?

00:46:29,160 --> 00:46:32,280
[Where did you hide from the Amiga users?]

00:46:32,280 --> 00:46:33,520
I didn't hide!

00:46:33,520 --> 00:46:36,880
I registered to Amiga forums

00:46:36,880 --> 00:46:38,500
And: "Hey, look at that!"

00:46:38,500 --> 00:46:41,020
"There is Atari software on your machine".

00:46:41,020 --> 00:46:42,240
"Oh!"

00:46:44,680 --> 00:46:46,860
Some of them said: "Oh!"

00:46:46,860 --> 00:46:49,400
And other ones, most of ones, said:

00:46:49,400 --> 00:46:50,940
"Oh, that's cool."

00:46:52,220 --> 00:46:54,520
[This is based on the same chipset?]

00:46:54,520 --> 00:46:56,460
Exactly, they are actually very,

00:46:56,460 --> 00:46:58,660
very similar machines.

00:47:00,880 --> 00:47:04,420
[Will it run on the new Atari that is coming?]

00:47:04,420 --> 00:47:07,720
The new Atari will be, basically, a PC.

00:47:07,720 --> 00:47:08,600
[Yes.]

00:47:08,600 --> 00:47:11,460
So maybe, if someone ports

00:47:11,460 --> 00:47:13,360
an emulator, such as ARAnyM

00:47:13,360 --> 00:47:15,540
to the new Atari console...

00:47:17,400 --> 00:47:20,260
It [already] works for the PS3, so...

00:47:20,260 --> 00:47:22,120
it will work for the new Atari console.

00:47:22,120 --> 00:47:25,140
If it supports Linux.

00:47:25,140 --> 00:47:27,020
[But, actually, Atari promises]

00:47:27,020 --> 00:47:29,480
[that he machine will be open, to do it.]

00:47:29,480 --> 00:47:31,640
[People will want to do it later.]

00:47:31,640 --> 00:47:34,400
So if it is open, it will work.

00:47:35,640 --> 00:47:37,600
[Yes. So running Atari in PC,]

00:47:37,600 --> 00:47:39,880
[inside an Atari, it's sense, yes.]

00:47:40,760 --> 00:47:42,100
Like this, I could...

00:47:43,180 --> 00:47:49,180
I shown you Hatari, the Atari emulator.

00:47:49,980 --> 00:47:52,620
But Hatari is highly portable.

00:47:52,620 --> 00:47:55,560
Hatari uses the SDL library.

00:47:55,560 --> 00:47:57,180
Then someone has ported

00:47:57,180 --> 00:47:59,640
SDL library for FreeMiNT.

00:48:00,580 --> 00:48:04,320
And I recompiled Hatari for FreeMiNT

00:48:04,320 --> 00:48:08,540
to run an Atari emulator inside...

00:48:08,540 --> 00:48:09,700
an Atari machine.

00:48:12,200 --> 00:48:16,020
So it works, but SDL is...

00:48:16,020 --> 00:48:17,240
There are some bugs

00:48:17,240 --> 00:48:18,700
which prevents [keyboard] to be usable.

00:48:18,700 --> 00:48:21,760
And also, it's really slow.

00:48:21,760 --> 00:48:23,780
So it's not really usable,

00:48:23,780 --> 00:48:25,720
but it works.

00:48:32,280 --> 00:48:34,740
And also, about emulators.

00:48:34,740 --> 00:48:38,060
It was quite amazing, for example:

00:48:38,060 --> 00:48:40,080
DOSBox. Running inside FreeMiNT,

00:48:40,080 --> 00:48:41,160
inside ARAnyM,

00:48:41,160 --> 00:48:43,520
because ARAnyM is really fast.

00:48:44,900 --> 00:48:47,660
But ARAnyM isn't fast enough

00:48:47,660 --> 00:48:50,160
to run DOSBox normally.

00:48:50,160 --> 00:48:52,220
I played something like Pac-Man,

00:48:52,220 --> 00:48:54,760
or old DOS games inside ARAnyM,

00:48:54,760 --> 00:48:56,900
inside the double emulator.

00:48:56,900 --> 00:48:59,260
But not usable.

00:49:00,380 --> 00:49:03,120
[Does it run on original hardware?]

00:49:03,120 --> 00:49:06,060
Yes. Because it's the rule.

00:49:06,060 --> 00:49:10,920
Original hardware is the testcase.

00:49:10,920 --> 00:49:14,080
So if it doesn't work on the original hardware,

00:49:14,080 --> 00:49:17,760
you can't prove it is good.

00:49:17,760 --> 00:49:19,700
For example, about EmuTOS.

00:49:22,500 --> 00:49:26,180
EmuTOS is mainly used with emulators.

00:49:26,180 --> 00:49:30,920
But if the emulator is wrong

00:49:30,920 --> 00:49:33,100
EmuTOS may work by chance.

00:49:34,940 --> 00:49:37,920
So we test,

00:49:37,920 --> 00:49:41,260
we try EmuTOS on real hardware

00:49:41,260 --> 00:49:42,460
by making a program

00:49:42,460 --> 00:49:44,820
and running it on the Atari.

00:49:44,820 --> 00:49:48,100
It is what I call: the RAM version.

00:49:48,100 --> 00:49:51,480
Because you don't have to remove your ROM.

00:49:52,580 --> 00:49:54,320
But it also works as ROM.

00:49:54,320 --> 00:49:57,380
And there are some people,

00:49:57,380 --> 00:50:01,140
not much, but I know two of them,

00:50:01,140 --> 00:50:03,360
who have replaced

00:50:03,360 --> 00:50:06,300
the ROM of their Atari ST

00:50:06,300 --> 00:50:07,960
by EmuTOS.

00:50:07,960 --> 00:50:10,880
To prove it works on cold boot.

00:50:10,880 --> 00:50:15,060
And we had to fix things because

00:50:15,060 --> 00:50:17,080
you know, running an operating system

00:50:17,080 --> 00:50:17,840
on cold boot

00:50:17,840 --> 00:50:19,040
is something quite difficult

00:50:19,040 --> 00:50:20,780
because you have to initialize

00:50:20,780 --> 00:50:22,600
all the hardware.

00:50:24,080 --> 00:50:25,440
Especially when you start,

00:50:25,440 --> 00:50:26,880
there is no memory at all.

00:50:26,880 --> 00:50:28,800
You have to initialize

00:50:28,800 --> 00:50:31,360
the RAM controller, etc.

00:50:31,360 --> 00:50:33,800
And it was actually buggy in EmuTOS.

00:50:33,800 --> 00:50:37,300
So someone tried it, in real ROM,

00:50:38,040 --> 00:50:39,200
found the bug,

00:50:39,200 --> 00:50:40,640
and contributed.

00:50:40,640 --> 00:50:42,860
And now it works on real hardware.

00:50:42,860 --> 00:50:44,480
As cold boot.

00:50:44,480 --> 00:50:47,740
I also know one person who has

00:50:47,740 --> 00:50:50,180
removed the ROM of the Amiga

00:50:50,180 --> 00:50:51,940
to put EmuTOS instead.

00:50:51,940 --> 00:50:53,600
And it worked.

00:50:53,600 --> 00:50:56,540
I don't recommend doing that.

00:50:56,540 --> 00:50:57,820
But it worked.

00:50:57,980 --> 00:51:02,080
For running EmuTOS on Amiga, currently, I...

00:51:03,140 --> 00:51:05,500
(This is because I don't have the

00:51:05,500 --> 00:51:08,200
network enabled. And I clicked.)

00:51:09,000 --> 00:51:10,860
I recommend to use the

00:51:10,860 --> 00:51:12,420
EmuTOS for Amiga floppy.

00:51:12,420 --> 00:51:14,320
Simple, just like like a game.

00:51:14,320 --> 00:51:17,220
You take EmuTOS,

00:51:17,220 --> 00:51:19,580
you put it on an Amiga floppy,

00:51:19,580 --> 00:51:20,500
you put it in the drive,

00:51:20,500 --> 00:51:21,700
you power on,

00:51:21,700 --> 00:51:23,560
and you have

00:51:23,560 --> 00:51:25,940
EmuTOS running on your Amiga.

00:51:25,940 --> 00:51:27,140
Just like a game.

00:51:27,140 --> 00:51:28,300
Very easy.

00:51:32,940 --> 00:51:34,100
[More questions?]

00:51:41,080 --> 00:51:42,560

YouTube URL: https://www.youtube.com/watch?v=28ieOWEQXhU


