Title: Isolating GPU access in its own process - Patricia Aas
Publication date: 2018-04-30
Playlist: foss-north 2018
Description: 
	Chromium's process architecture has graphics access restricted to a separate GPU-process. There are several reasons why this could make sense, three common ones are: Security, Robustness and Dependency Separation.

GPU access restricted to a single process requires an efficient framework for communication over IPC from the other processes, and most likely a framework for composition of surfaces. This talk describes both the possible motivations for this kind of architecture and Chromium's solution for the IPC framework. We will demonstrate how a multiprocess program can compose into a single window on Linux.

---

Patricia Aas is a C++ programmer working on the Vivaldi Browser where she has currently taken on platform integration of media. She has previously worked at Opera Software on their Desktop Browser and at Cisco on their Telepresence Hardware Endpoints, primarily on Linux. Patricia is a curious person, always trying to find out how things work. She hopes that we will find a way to make the world a better place by creating things that can be used for good.

http://foss-north.se/2018/speakers-and-talks.html#paas
Captions: 
	00:00:15,600 --> 00:00:24,670
hi good afternoon how are you doing okay

00:00:21,880 --> 00:00:27,070
so this is the first half game to do

00:00:24,670 --> 00:00:29,669
this talk and so I'm a little bit

00:00:27,070 --> 00:00:34,300
nervous but I think it will be fine

00:00:29,669 --> 00:00:36,579
so the talk is on isolating GPU access

00:00:34,300 --> 00:00:40,329
in its own process which is a very nice

00:00:36,579 --> 00:00:42,790
topic but it might be interesting for

00:00:40,329 --> 00:00:44,350
more projects outside of chromium I know

00:00:42,790 --> 00:00:50,920
of several of the projects that have

00:00:44,350 --> 00:00:54,699
this type of problem so first oh my my

00:00:50,920 --> 00:00:56,949
name is my name is Patricia I am a C++

00:00:54,699 --> 00:00:58,749
developer and then suppose post

00:00:56,949 --> 00:01:01,600
developer for about 13 years

00:00:58,749 --> 00:01:05,260
I currently work in Vivaldi we make a

00:01:01,600 --> 00:01:09,580
browser I brought stuff so after the

00:01:05,260 --> 00:01:11,800
talk please tank before there everything

00:01:09,580 --> 00:01:15,370
in the system where they tell present

00:01:11,800 --> 00:01:17,590
systems and I'm a consultant and

00:01:15,370 --> 00:01:22,390
before that I made another browser

00:01:17,590 --> 00:01:24,790
called opera and Marines opera thank you

00:01:22,390 --> 00:01:30,100
I worked on the original opera browser

00:01:24,790 --> 00:01:32,140
nothing new professor anyway so yeah so

00:01:30,100 --> 00:01:33,760
that's me that's my Twitter no no I have

00:01:32,140 --> 00:01:38,020
it practically on every slide so you

00:01:33,760 --> 00:01:43,060
don't have to take notes so what is it

00:01:38,020 --> 00:01:45,430
like building a browser is started not

00:01:43,060 --> 00:01:46,600
we become a believer just from your base

00:01:45,430 --> 00:01:49,000
and we're going to talk a little bit

00:01:46,600 --> 00:01:51,900
about chromium but previously an opera

00:01:49,000 --> 00:01:56,470
restaurant have a different path source

00:01:51,900 --> 00:01:58,900
which is a big difference biking home

00:01:56,470 --> 00:02:01,720
you like it those of you have experience

00:01:58,900 --> 00:02:04,540
with that with after it with the entire

00:02:01,720 --> 00:02:06,400
Android chromium is very similar in

00:02:04,540 --> 00:02:09,039
pulling in also as an open source

00:02:06,400 --> 00:02:12,840
project so the actual source is massive

00:02:09,039 --> 00:02:19,260
a debug build on Linux is closed

00:02:12,840 --> 00:02:20,970
good gig what debugger so it's huge but

00:02:19,260 --> 00:02:23,190
we're going to look at a little tiny

00:02:20,970 --> 00:02:27,500
aspect throughout but building a browser

00:02:23,190 --> 00:02:30,150
is fun and you guys should do it okay so

00:02:27,500 --> 00:02:33,959
this talk is a bit Linux focus our

00:02:30,150 --> 00:02:35,790
momentum is focused so if you have

00:02:33,959 --> 00:02:38,330
windows questions or math questions are

00:02:35,790 --> 00:02:43,319
probably not the questions to ask

00:02:38,330 --> 00:02:45,120
ok so first of all what is coming just

00:02:43,319 --> 00:02:49,950
say that I there's a little bit of a

00:02:45,120 --> 00:02:51,599
browser to me in here so I understand

00:02:49,950 --> 00:02:53,910
were like people from then from that

00:02:51,599 --> 00:02:57,480
Kenny project are they can eat people

00:02:53,910 --> 00:02:59,579
here now yeah they're you know because

00:02:57,480 --> 00:03:04,980
that is the source of all of these

00:02:59,579 --> 00:03:09,360
browsers I I worked in Opera when Apple

00:03:04,980 --> 00:03:14,430
made Safari that they chose cage to Nala

00:03:09,360 --> 00:03:17,400
that that engine because they said the

00:03:14,430 --> 00:03:19,350
Cook was better easier to eat they said

00:03:17,400 --> 00:03:22,310
doesn't the alternative so I'm not gonna

00:03:19,350 --> 00:03:25,500
name names but that's what they said so

00:03:22,310 --> 00:03:33,030
but this was quite a bit tense time at

00:03:25,500 --> 00:03:34,709
the top because because this was an open

00:03:33,030 --> 00:03:39,660
source project now effectively forced

00:03:34,709 --> 00:03:41,760
into hidden inside of Apple and Apple

00:03:39,660 --> 00:03:43,230
said that they would release it but it

00:03:41,760 --> 00:03:48,359
was all there was a fire on a time

00:03:43,230 --> 00:03:50,040
period but in the end did publish the

00:03:48,359 --> 00:03:53,370
code but they published the code by

00:03:50,040 --> 00:03:56,880
dropping it once a night without any

00:03:53,370 --> 00:03:59,519
really source version in between and

00:03:56,880 --> 00:04:00,840
that was a problem later my Google came

00:03:59,519 --> 00:04:03,660
and said oh you want to make a browser

00:04:00,840 --> 00:04:05,849
too because one of they say you'll see

00:04:03,660 --> 00:04:07,799
here and then one of the things that

00:04:05,849 --> 00:04:10,769
most people don't know is there nobody

00:04:07,799 --> 00:04:13,290
makes a browser from scratch nobody has

00:04:10,769 --> 00:04:17,370
made a browser from scratch since the

00:04:13,290 --> 00:04:19,239
90s there are four

00:04:17,370 --> 00:04:21,859
browser families

00:04:19,239 --> 00:04:26,509
one of them has been discontinued and I

00:04:21,859 --> 00:04:29,620
was the opera as browser family so there

00:04:26,509 --> 00:04:32,379
are three browser families in the world

00:04:29,620 --> 00:04:35,060
so choosing an browser is basically

00:04:32,379 --> 00:04:38,300
picking one but they're all come from

00:04:35,060 --> 00:04:39,919
very few sources and so this is the

00:04:38,300 --> 00:04:43,330
source of many browsers and they came

00:04:39,919 --> 00:04:46,550
from cadiz of who is any further out and

00:04:43,330 --> 00:04:48,319
anyway so so when I travel decided

00:04:46,550 --> 00:04:49,819
Norman Google decided to make chrome

00:04:48,319 --> 00:04:54,110
they have a problem because they got the

00:04:49,819 --> 00:04:56,750
source code once a night and they had no

00:04:54,110 --> 00:04:58,520
control over the quality of it and they

00:04:56,750 --> 00:04:59,240
had lots of problems with the crashing

00:04:58,520 --> 00:05:03,400
all the time

00:04:59,240 --> 00:05:06,259
and they made a framework around WebKit

00:05:03,400 --> 00:05:09,560
which basically put WebKit in its own

00:05:06,259 --> 00:05:12,289
process and then made the browser and

00:05:09,560 --> 00:05:15,830
another process and then composed all of

00:05:12,289 --> 00:05:18,229
this stuff together to make the final

00:05:15,830 --> 00:05:19,940
window and the the feature of this and

00:05:18,229 --> 00:05:22,310
how they marketed it when they started

00:05:19,940 --> 00:05:24,080
making problem was that you know you

00:05:22,310 --> 00:05:27,500
could have a tab and it can crash and

00:05:24,080 --> 00:05:30,110
their disapproval browser this is this

00:05:27,500 --> 00:05:33,919
is a problem they not because but kit

00:05:30,110 --> 00:05:36,199
was crashing taps were crashing hey so

00:05:33,919 --> 00:05:37,279
moving on later on the high up excited

00:05:36,199 --> 00:05:42,229
enough to have their own momentum

00:05:37,279 --> 00:05:45,789
anymore and when order to use the link

00:05:42,229 --> 00:05:48,349
fork of WebKit and that's another story

00:05:45,789 --> 00:05:51,099
anyway so there are lots of browsers

00:05:48,349 --> 00:05:57,319
based on this Lake Fork among the

00:05:51,099 --> 00:05:59,479
prominent Vivaldi on the new Walker okay

00:05:57,319 --> 00:06:02,659
so the process architecture inside of a

00:05:59,479 --> 00:06:04,940
chromium browser on Linux look something

00:06:02,659 --> 00:06:06,710
like this so there are several projects

00:06:04,940 --> 00:06:08,270
as we will see that if you do PS you'll

00:06:06,710 --> 00:06:14,150
see many different kinds of processes

00:06:08,270 --> 00:06:17,240
and coming from like an Android or /

00:06:14,150 --> 00:06:20,599
Linux type background and this is sort

00:06:17,240 --> 00:06:21,690
of Linux II so if you look at the left

00:06:20,599 --> 00:06:24,810
side you have this

00:06:21,690 --> 00:06:27,600
in it that's my name I made it up but

00:06:24,810 --> 00:06:30,390
it's basically like an init process and

00:06:27,600 --> 00:06:32,400
it just takes care of everything in

00:06:30,390 --> 00:06:34,590
child processes it just sits there

00:06:32,400 --> 00:06:37,320
spinning you know the psycho process

00:06:34,590 --> 00:06:40,440
it's similar to the psychic concept in

00:06:37,320 --> 00:06:43,290
Android where it basically Forks off the

00:06:40,440 --> 00:06:45,600
new processes and these processes and

00:06:43,290 --> 00:06:46,890
are being these vendor processes that

00:06:45,600 --> 00:06:50,690
you see at the bottom and around new

00:06:46,890 --> 00:06:54,810
processes roughly corresponds to one tap

00:06:50,690 --> 00:06:57,540
so you will have you will in your

00:06:54,810 --> 00:06:59,820
browser will have one browser process

00:06:57,540 --> 00:07:04,350
and then you might have wonderful

00:06:59,820 --> 00:07:06,720
process per time and all their records

00:07:04,350 --> 00:07:08,760
and you will see that the GPU access is

00:07:06,720 --> 00:07:11,820
split into two processes are not to talk

00:07:08,760 --> 00:07:15,090
about that if your broker much but so

00:07:11,820 --> 00:07:18,330
all of the GPU access is done from one

00:07:15,090 --> 00:07:21,080
process and the renderer processes are

00:07:18,330 --> 00:07:24,840
completely set up so they they can't

00:07:21,080 --> 00:07:26,610
touch the GBM down they don't even have

00:07:24,840 --> 00:07:28,410
access to the file system I have a whole

00:07:26,610 --> 00:07:32,490
talk on sound boxing and chrome English

00:07:28,410 --> 00:07:35,760
is on YouTube okay so this is like the

00:07:32,490 --> 00:07:37,260
general world in living and now of

00:07:35,760 --> 00:07:38,790
course we end up in this kind of world

00:07:37,260 --> 00:07:40,590
you need some kind of composition you

00:07:38,790 --> 00:07:42,660
need some way to compose the final

00:07:40,590 --> 00:07:45,240
browser window because now we have all

00:07:42,660 --> 00:07:46,950
sorts of processes producing these

00:07:45,240 --> 00:07:52,740
images and in the end it has to be

00:07:46,950 --> 00:07:54,300
composed into one so why would you do

00:07:52,740 --> 00:08:00,260
this like why would you have a separate

00:07:54,300 --> 00:08:03,150
GPU process in your project and then

00:08:00,260 --> 00:08:03,990
from it why would why would you do do

00:08:03,150 --> 00:08:05,880
you

00:08:03,990 --> 00:08:07,620
composition in a separate process why

00:08:05,880 --> 00:08:11,880
not just do it in the browser process

00:08:07,620 --> 00:08:16,410
because it's there already and actually

00:08:11,880 --> 00:08:18,540
it's it's done they have a GPU thread on

00:08:16,410 --> 00:08:21,170
that hundred but I'm not going to talk

00:08:18,540 --> 00:08:22,350
about that because I'm a desktop focus

00:08:21,170 --> 00:08:24,060
okay

00:08:22,350 --> 00:08:26,730
so generally lose and you will hear

00:08:24,060 --> 00:08:28,560
people talk about three reasons actually

00:08:26,730 --> 00:08:33,620
a fourth as well but we'll get to it at

00:08:28,560 --> 00:08:33,620
the end so the first one is security and

00:08:34,490 --> 00:08:40,350
the issue around security is of course

00:08:36,810 --> 00:08:44,420
that you want to have a really a strict

00:08:40,350 --> 00:08:47,880
some boxing of the render process and

00:08:44,420 --> 00:08:49,770
because well ok we'll get back to them

00:08:47,880 --> 00:08:52,050
I'll do this first because this is an

00:08:49,770 --> 00:08:54,570
interesting example actually and you've

00:08:52,050 --> 00:08:56,790
seen several memorable is where you have

00:08:54,570 --> 00:08:59,760
things like texture memory being leaked

00:08:56,790 --> 00:09:01,830
in different ways where it hasn't been

00:08:59,760 --> 00:09:03,510
properly zeroed out they'd be forgiven

00:09:01,830 --> 00:09:05,220
and two other processes sort of giving

00:09:03,510 --> 00:09:11,550
it to the browser or giving it from one

00:09:05,220 --> 00:09:15,000
tap to another tab and you get drunk or

00:09:11,550 --> 00:09:21,420
a junk it could be interesting junk give

00:09:15,000 --> 00:09:24,210
it to other things so so one of the

00:09:21,420 --> 00:09:28,740
things that that Google wanted to do

00:09:24,210 --> 00:09:32,690
when they made this design is to enforce

00:09:28,740 --> 00:09:37,770
a stricter and more uniform contract

00:09:32,690 --> 00:09:43,530
with the render process but at the same

00:09:37,770 --> 00:09:46,110
time you have robustness and like I said

00:09:43,530 --> 00:09:49,560
before we had that they had already took

00:09:46,110 --> 00:09:51,570
the vendor in its own process and to

00:09:49,560 --> 00:09:52,320
make sure that the president ration

00:09:51,570 --> 00:09:56,610
service

00:09:52,320 --> 00:10:00,600
the renderer crashed but you also have

00:09:56,610 --> 00:10:04,320
had issues of many budgets a dose of

00:10:00,600 --> 00:10:07,350
graphics drivers and those making your

00:10:04,320 --> 00:10:09,870
application crash or some kind of like

00:10:07,350 --> 00:10:13,740
inside remember you have a WebGL stuff

00:10:09,870 --> 00:10:15,509
that would be basically down the code

00:10:13,740 --> 00:10:17,190
from the internet and execute on the

00:10:15,509 --> 00:10:17,759
user's machine that's what we do thank

00:10:17,190 --> 00:10:19,709
you

00:10:17,759 --> 00:10:23,009
like I said at a security conference

00:10:19,709 --> 00:10:25,829
remote execution is our business model

00:10:23,009 --> 00:10:27,449
we do that we download random code from

00:10:25,829 --> 00:10:29,480
the internet and executed on your

00:10:27,449 --> 00:10:34,019
machine that's kind of what a browser is

00:10:29,480 --> 00:10:38,009
and so you wouldn't want something to

00:10:34,019 --> 00:10:42,750
crash the whole browser so you can put

00:10:38,009 --> 00:10:44,339
in a layer here of work routes where

00:10:42,750 --> 00:10:47,639
runs could drive the bugs where perhaps

00:10:44,339 --> 00:10:50,550
for for features workouts for lack of

00:10:47,639 --> 00:10:53,339
features all sorts of things and also a

00:10:50,550 --> 00:10:54,870
very cool thing that you can do in a

00:10:53,339 --> 00:10:57,089
program based browser is that you can

00:10:54,870 --> 00:10:59,760
actually crash the GPU process and not

00:10:57,089 --> 00:11:03,029
put down browser and you might have seen

00:10:59,760 --> 00:11:05,149
this in in on your machines and any kind

00:11:03,029 --> 00:11:08,279
of program based browser it's a GPU

00:11:05,149 --> 00:11:10,980
process crashes you window goes black

00:11:08,279 --> 00:11:15,470
and then it goes like a couple of

00:11:10,980 --> 00:11:19,470
seconds and comes back that's magic I

00:11:15,470 --> 00:11:22,769
think that's pretty cool okay another

00:11:19,470 --> 00:11:25,050
thing that is it could be very

00:11:22,769 --> 00:11:28,560
interesting and in certain situations is

00:11:25,050 --> 00:11:31,199
dependency separation now like I said

00:11:28,560 --> 00:11:33,060
before you in a program based browser

00:11:31,199 --> 00:11:36,300
you trying to minimize the render

00:11:33,060 --> 00:11:39,990
sandbox massively as much as you can and

00:11:36,300 --> 00:11:44,280
that results in a very strange kind of

00:11:39,990 --> 00:11:49,650
which is it uses namespace sensitive to

00:11:44,280 --> 00:11:52,410
set comp and uses that sugar to to to

00:11:49,650 --> 00:11:54,660
basically cut off this process from the

00:11:52,410 --> 00:11:58,080
file system a render process is a very

00:11:54,660 --> 00:12:00,750
strange animal on your machine and back

00:11:58,080 --> 00:12:05,630
again you can watch my other talk about

00:12:00,750 --> 00:12:09,030
that but one of the things that I find

00:12:05,630 --> 00:12:10,520
specifically interesting is the fact

00:12:09,030 --> 00:12:13,290
that they can have different

00:12:10,520 --> 00:12:15,120
dependencies now of course you have

00:12:13,290 --> 00:12:18,090
different dependencies already because

00:12:15,120 --> 00:12:19,530
you're not loading GL libraries into

00:12:18,090 --> 00:12:22,110
your render because that's kind of the

00:12:19,530 --> 00:12:24,300
point here and that you can also have

00:12:22,110 --> 00:12:25,830
other kinds of dependencies like

00:12:24,300 --> 00:12:27,660
different versions of different

00:12:25,830 --> 00:12:30,630
libraries they can happen these two

00:12:27,660 --> 00:12:34,110
different processes and if this is

00:12:30,630 --> 00:12:38,820
imagine general design if you want to do

00:12:34,110 --> 00:12:41,550
this and you know I I have the pleasure

00:12:38,820 --> 00:12:45,210
of reading lots of look like respect

00:12:41,550 --> 00:12:47,790
that question and in luminary centers

00:12:45,210 --> 00:12:50,870
that is also a problem that is trying to

00:12:47,790 --> 00:12:53,280
be strong in fact that you have bionic

00:12:50,870 --> 00:12:55,920
over here and yet you would see over

00:12:53,280 --> 00:12:59,670
there and how are these things got to

00:12:55,920 --> 00:13:02,360
co-exist and and maybe you could have

00:12:59,670 --> 00:13:06,570
had some way of doing this over I see

00:13:02,360 --> 00:13:10,170
I'm not sure if it would work and that's

00:13:06,570 --> 00:13:11,940
kind of what this talk is about one

00:13:10,170 --> 00:13:15,240
thing that they bring up a lot when you

00:13:11,940 --> 00:13:17,490
read about it on the interweb is that

00:13:15,240 --> 00:13:19,500
they say oh but it's very performance is

00:13:17,490 --> 00:13:21,480
very good and this one thing is because

00:13:19,500 --> 00:13:22,890
whenever you proposed this idea most

00:13:21,480 --> 00:13:26,880
people go together what about

00:13:22,890 --> 00:13:28,530
performance if you have only a GPU

00:13:26,880 --> 00:13:31,190
access and one process you basically

00:13:28,530 --> 00:13:33,920
have to serialize things right over

00:13:31,190 --> 00:13:35,450
dc2 this one process and he quite

00:13:33,920 --> 00:13:37,280
worried about the performance whereas

00:13:35,450 --> 00:13:39,440
the Google people think that promise

00:13:37,280 --> 00:13:41,390
better and the reason why they think

00:13:39,440 --> 00:13:42,860
that it's better is because everything

00:13:41,390 --> 00:13:44,630
is asynchronous and then just fire

00:13:42,860 --> 00:13:46,070
something off to the GPO process and

00:13:44,630 --> 00:13:49,960
don't think about it

00:13:46,070 --> 00:13:52,790
since it's a whole different process

00:13:49,960 --> 00:13:57,110
scheduling on the machine might be

00:13:52,790 --> 00:14:01,420
better I don't know I don't know if it's

00:13:57,110 --> 00:14:06,320
better they claim it is okay before we

00:14:01,420 --> 00:14:10,340
look at him I just this is this is a

00:14:06,320 --> 00:14:12,710
generic wisdom we can solve any problem

00:14:10,340 --> 00:14:14,840
by introducing an extra level of

00:14:12,710 --> 00:14:17,570
indirection except the problem of too

00:14:14,840 --> 00:14:19,220
low too many levels of indirection this

00:14:17,570 --> 00:14:24,290
is called fundamental theorem of some

00:14:19,220 --> 00:14:26,780
strange nearing Wow and if you try to

00:14:24,290 --> 00:14:28,970
look in the Google code or the chromium

00:14:26,780 --> 00:14:32,060
source code for a long time this will

00:14:28,970 --> 00:14:36,110
feel like you need it in poster size it

00:14:32,060 --> 00:14:38,830
is ridiculously many layers of

00:14:36,110 --> 00:14:40,940
indirection and indirection everywhere

00:14:38,830 --> 00:14:44,570
and they can be very difficult to

00:14:40,940 --> 00:14:46,460
navigate and so this talk is more or

00:14:44,570 --> 00:14:48,050
less pointing you to the places that

00:14:46,460 --> 00:14:49,160
might be interesting and this is the

00:14:48,050 --> 00:14:52,190
kind of problem that you'd meant to

00:14:49,160 --> 00:14:56,750
solve okay so first we look at the

00:14:52,190 --> 00:15:00,140
communication architecture and that is

00:14:56,750 --> 00:15:01,850
the other C that's involved and the

00:15:00,140 --> 00:15:05,720
concept of something they call a command

00:15:01,850 --> 00:15:09,010
and the synchronization okay so remember

00:15:05,720 --> 00:15:10,990
this is far this is the process

00:15:09,010 --> 00:15:13,580
architecture so this is like

00:15:10,990 --> 00:15:18,920
parent-child relationships between these

00:15:13,580 --> 00:15:21,220
things but in addition to the process

00:15:18,920 --> 00:15:24,170
architecture and the relationship with

00:15:21,220 --> 00:15:27,440
parent-child we have massive amount

00:15:24,170 --> 00:15:29,210
I beseech ants everywhere and in this

00:15:27,440 --> 00:15:31,850
case I'm just going to be looking at a

00:15:29,210 --> 00:15:33,440
simple set of like C channels and those

00:15:31,850 --> 00:15:37,640
are the ones that go from the regular

00:15:33,440 --> 00:15:40,400
old browser to the GPU process in the

00:15:37,640 --> 00:15:42,440
digit to the army itself you will have a

00:15:40,400 --> 00:15:44,480
shared memory and there's tons of stuff

00:15:42,440 --> 00:15:46,790
that are allocated in shared memory they

00:15:44,480 --> 00:15:49,280
use shared memory extensively and the

00:15:46,790 --> 00:15:50,180
chromium project but in this case we're

00:15:49,280 --> 00:15:52,850
going to be looking at two things

00:15:50,180 --> 00:15:56,020
something they call command buffer and a

00:15:52,850 --> 00:15:59,030
GPU memory buffers

00:15:56,020 --> 00:16:01,670
okay so the high-level design of this

00:15:59,030 --> 00:16:03,950
thing is the idea of a client-server

00:16:01,670 --> 00:16:05,330
architecture so the GPU processes server

00:16:03,950 --> 00:16:08,630
and then you have clients which are

00:16:05,330 --> 00:16:12,700
vendors or the browser process all the

00:16:08,630 --> 00:16:15,020
client-side it emulates OpenGL es2

00:16:12,700 --> 00:16:17,180
so that means no matter if you're on

00:16:15,020 --> 00:16:19,340
desktop or you're on that on that on an

00:16:17,180 --> 00:16:22,510
embedded device your fee on mobile or

00:16:19,340 --> 00:16:24,490
whatever on the client side it emulates

00:16:22,510 --> 00:16:28,040
OpenGL es2

00:16:24,490 --> 00:16:30,080
so the actual implementation is that a

00:16:28,040 --> 00:16:35,690
specific and it depends you know some

00:16:30,080 --> 00:16:37,460
places we regular desktop OpenGL the

00:16:35,690 --> 00:16:39,770
composition is done the final

00:16:37,460 --> 00:16:42,470
composition this is if you are doing

00:16:39,770 --> 00:16:47,390
hardware composition which might our

00:16:42,470 --> 00:16:49,190
talk will assume then the composition

00:16:47,390 --> 00:16:51,920
the final composition is done inside a

00:16:49,190 --> 00:16:54,680
particular process but it is controlled

00:16:51,920 --> 00:16:56,750
outside so you have a browser is

00:16:54,680 --> 00:16:58,670
controlling the muscle not to be used

00:16:56,750 --> 00:17:00,320
and everything so you have like the tabs

00:16:58,670 --> 00:17:01,210
and you have all of these things as a

00:17:00,320 --> 00:17:04,160
high-level

00:17:01,210 --> 00:17:07,070
thing and then in half the render

00:17:04,160 --> 00:17:10,870
process itself is doing that controlling

00:17:07,070 --> 00:17:10,870
the composition of the web page so

00:17:12,820 --> 00:17:18,500
implementation design like moving down

00:17:15,949 --> 00:17:20,160
levels here okay so you have this

00:17:18,500 --> 00:17:23,730
emulation of okay

00:17:20,160 --> 00:17:25,740
- but you are now in a different process

00:17:23,730 --> 00:17:27,690
so these things are serialized into

00:17:25,740 --> 00:17:32,100
something they call the command and

00:17:27,690 --> 00:17:34,290
these commands are placed in a place of

00:17:32,100 --> 00:17:37,680
shared memory - this is kind of like a

00:17:34,290 --> 00:17:40,530
ring buffer and they call this a command

00:17:37,680 --> 00:17:43,290
bar so basically you put commands in a

00:17:40,530 --> 00:17:45,180
command buffer in shared memory and all

00:17:43,290 --> 00:17:47,640
of the clients will have this mouth show

00:17:45,180 --> 00:17:51,110
up in ship and then the GPU will

00:17:47,640 --> 00:17:53,580
deserialize these commands do validation

00:17:51,110 --> 00:17:55,440
maybe work routes maybe compensate

00:17:53,580 --> 00:17:58,530
whatever they want to do and then

00:17:55,440 --> 00:18:04,610
finally do the actual call to the

00:17:58,530 --> 00:18:07,530
classrooms the graphic system yes so

00:18:04,610 --> 00:18:09,930
this is basically the high level

00:18:07,530 --> 00:18:10,830
architecture you have the you have your

00:18:09,930 --> 00:18:13,800
grade of kananga's

00:18:10,830 --> 00:18:15,810
plan to this command buffer then you do

00:18:13,800 --> 00:18:18,990
signaling override the sea to say that

00:18:15,810 --> 00:18:22,100
you've done at some point to say okay

00:18:18,990 --> 00:18:24,930
I'm not this right position here and

00:18:22,100 --> 00:18:29,460
asynchronously then the the GPU process

00:18:24,930 --> 00:18:32,280
will be able to read commands up to your

00:18:29,460 --> 00:18:34,110
position and at the same time you could

00:18:32,280 --> 00:18:36,750
be writing past opposition and only

00:18:34,110 --> 00:18:38,520
point you will stay up at this foot

00:18:36,750 --> 00:18:43,380
position and so basically that's how it

00:18:38,520 --> 00:18:45,240
goes on the server side you have the GPU

00:18:43,380 --> 00:18:47,490
process and it will read these commands

00:18:45,240 --> 00:18:49,440
from shared memory and do all sorts of

00:18:47,490 --> 00:18:51,360
things you know but you will have many

00:18:49,440 --> 00:18:56,540
clients so there has to be some kind of

00:18:51,360 --> 00:18:59,250
kind of scheduling between this and so

00:18:56,540 --> 00:19:00,570
in addition to this you might want to do

00:18:59,250 --> 00:19:04,350
some some kind of synchronization

00:19:00,570 --> 00:19:05,670
because you have many different channels

00:19:04,350 --> 00:19:09,120
of communication and we'll look at that

00:19:05,670 --> 00:19:12,120
number and they have different kind

00:19:09,120 --> 00:19:16,320
synchronization depending so this is my

00:19:12,120 --> 00:19:18,390
most complicated diagram and but it's

00:19:16,320 --> 00:19:21,900
kind of important so I'll go through it

00:19:18,390 --> 00:19:25,260
a little bit okay so you have three

00:19:21,900 --> 00:19:29,160
concepts here you have the IPC channel

00:19:25,260 --> 00:19:31,380
which should be like colic

00:19:29,160 --> 00:19:36,600
well no but then you have something that

00:19:31,380 --> 00:19:38,730
they call a command stream and inside of

00:19:36,600 --> 00:19:41,750
the master they have these command

00:19:38,730 --> 00:19:45,630
buffers now right now this is this is a

00:19:41,750 --> 00:19:48,240
conceptual drawing because these command

00:19:45,630 --> 00:19:49,920
refers actually in shared memory and you

00:19:48,240 --> 00:19:52,440
know they're a writable and quite boring

00:19:49,920 --> 00:19:56,250
in real life but but this is the the

00:19:52,440 --> 00:20:01,080
design so as a client you will push it

00:19:56,250 --> 00:20:03,390
man on this command buffer and the

00:20:01,080 --> 00:20:06,630
command mother could be in you could

00:20:03,390 --> 00:20:08,580
have the top one you have one NBC

00:20:06,630 --> 00:20:10,950
channel that has one command stream

00:20:08,580 --> 00:20:12,809
which has one command buffer that you

00:20:10,950 --> 00:20:15,090
can have several command buffers inside

00:20:12,809 --> 00:20:17,010
of one command stream or you can have

00:20:15,090 --> 00:20:20,700
several command streams inside of one I

00:20:17,010 --> 00:20:23,610
procedure and depending on where you are

00:20:20,700 --> 00:20:26,010
what is your scenario you have different

00:20:23,610 --> 00:20:28,410
kinds of synchronization so in the

00:20:26,010 --> 00:20:31,820
middle there is the easiest one if you

00:20:28,410 --> 00:20:37,020
have to command well first of all the

00:20:31,820 --> 00:20:38,850
easiest is if you know they have what

00:20:37,020 --> 00:20:40,710
commander there's no need for

00:20:38,850 --> 00:20:42,890
synchronization it will be read and

00:20:40,710 --> 00:20:44,659
executed sequentially and services

00:20:42,890 --> 00:20:47,409
there's no need for sync

00:20:44,659 --> 00:20:49,609
fiction but if you have to command

00:20:47,409 --> 00:20:52,879
command reference inside of my mouth

00:20:49,609 --> 00:20:54,590
stream which is the middle example then

00:20:52,879 --> 00:20:55,659
they have some difficult an ordering

00:20:54,590 --> 00:20:58,999
barrier

00:20:55,659 --> 00:21:00,830
so basically everything before has to be

00:20:58,999 --> 00:21:07,159
processed before you can kind of pass

00:21:00,830 --> 00:21:10,970
the ordering barrier and if you have the

00:21:07,159 --> 00:21:13,570
bottom one so if you have to command

00:21:10,970 --> 00:21:15,499
streams that each have a command buffer

00:21:13,570 --> 00:21:17,989
then if you want some kind of

00:21:15,499 --> 00:21:20,179
synchronization between these you use

00:21:17,989 --> 00:21:24,080
something called an unverified same

00:21:20,179 --> 00:21:28,279
token it's the concept brats sort of

00:21:24,080 --> 00:21:32,090
fences so what you will have is on the

00:21:28,279 --> 00:21:34,429
the bottom command buffer you are you're

00:21:32,090 --> 00:21:36,710
putting our wait token so you must wait

00:21:34,429 --> 00:21:38,570
for this other unverified same token

00:21:36,710 --> 00:21:41,149
which basically means that the two

00:21:38,570 --> 00:21:44,989
mounts in front of the signal can have

00:21:41,149 --> 00:21:46,849
to be processed before the unmanifested

00:21:44,989 --> 00:21:50,659
token is processed and when it is

00:21:46,849 --> 00:21:54,950
positive is signaled and then unlocking

00:21:50,659 --> 00:21:57,440
the bottom string and the last one is a

00:21:54,950 --> 00:22:02,479
very fancy token which works across at

00:21:57,440 --> 00:22:04,669
the C channels and we will look very

00:22:02,479 --> 00:22:08,599
much after that you'll see them are a

00:22:04,669 --> 00:22:11,269
little bit ok so the same token this is

00:22:08,599 --> 00:22:13,129
a concept of same token so it inserts a

00:22:11,269 --> 00:22:16,099
synchronization cells inside of the

00:22:13,129 --> 00:22:19,190
command stream in a how it is handled it

00:22:16,099 --> 00:22:21,739
depends on support on the platform but

00:22:19,190 --> 00:22:23,629
it is pretty high level concept inside

00:22:21,739 --> 00:22:27,979
of the program which means you can have

00:22:23,629 --> 00:22:29,720
different passive implementations it can

00:22:27,979 --> 00:22:32,659
also be a task to resource and that's

00:22:29,720 --> 00:22:36,950
what we're going to see that you do a

00:22:32,659 --> 00:22:39,379
bunch of GL commands to establish some

00:22:36,950 --> 00:22:44,389
kind of texture and then you insert

00:22:39,379 --> 00:22:47,629
insert a sync token in the command

00:22:44,389 --> 00:22:51,830
stream later on other things that need

00:22:47,629 --> 00:22:54,289
this texture can wait on your Center

00:22:51,830 --> 00:22:56,090
to make sure that it has been created it

00:22:54,289 --> 00:23:02,419
is all of these things have already been

00:22:56,090 --> 00:23:04,399
done by the time they move on and to to

00:23:02,419 --> 00:23:06,500
hold the same token and to connect it to

00:23:04,399 --> 00:23:08,419
text attorney to have something folk

00:23:06,500 --> 00:23:12,799
that I and they'll box holder but you

00:23:08,419 --> 00:23:16,159
can pass around okay so the example that

00:23:12,799 --> 00:23:18,289
we'll show is a video frame that's been

00:23:16,159 --> 00:23:22,539
software decoded so we're going to use

00:23:18,289 --> 00:23:22,539
that to explore how composition works

00:23:22,570 --> 00:23:28,340
now if you have software composition

00:23:26,360 --> 00:23:31,220
which firmly supports and that's what's

00:23:28,340 --> 00:23:35,389
the original file design then it was

00:23:31,220 --> 00:23:37,519
done in the browser process in most

00:23:35,389 --> 00:23:40,610
modern on most modern computers you will

00:23:37,519 --> 00:23:45,740
have the hardware GPU composition but it

00:23:40,610 --> 00:23:48,230
depends on your GPU and you will have

00:23:45,740 --> 00:23:49,880
their self there's lots of workarounds

00:23:48,230 --> 00:23:52,250
for different kinds of bugs that diffuse

00:23:49,880 --> 00:23:55,850
but the last resort is something called

00:23:52,250 --> 00:23:59,049
a GPU blacklisting so if they think your

00:23:55,850 --> 00:24:03,110
GPU is not possible to work with

00:23:59,049 --> 00:24:03,889
permeable blacklister GPU and then all

00:24:03,110 --> 00:24:06,440
of yours

00:24:03,889 --> 00:24:10,279
everything will be software based which

00:24:06,440 --> 00:24:13,070
means that for a for for some machines

00:24:10,279 --> 00:24:17,029
the the the performance will be

00:24:13,070 --> 00:24:23,419
dramatically different because the GP is

00:24:17,029 --> 00:24:25,700
not possible to use yeah ok so insert

00:24:23,419 --> 00:24:27,559
some halfway thing the full

00:24:25,700 --> 00:24:28,390
architectural composition in the side of

00:24:27,559 --> 00:24:32,680
the program is

00:24:28,390 --> 00:24:35,860
massive and it's fast all over the

00:24:32,680 --> 00:24:39,160
source code so it is it is very

00:24:35,860 --> 00:24:41,350
difficult to get an idea on how this and

00:24:39,160 --> 00:24:43,570
now how my mind this is much easier to

00:24:41,350 --> 00:24:46,690
see one path then you kind of understand

00:24:43,570 --> 00:24:48,550
how it all gets put together so we're

00:24:46,690 --> 00:24:50,200
going to follow one path and there what

00:24:48,550 --> 00:24:52,990
we are going to do is try to see and how

00:24:50,200 --> 00:25:02,620
the software they put a video frame ends

00:24:52,990 --> 00:25:04,960
up inside of a web page so how video is

00:25:02,620 --> 00:25:06,940
decoded inside of chromium as a as

00:25:04,960 --> 00:25:09,970
another thing and I'm just going to kind

00:25:06,940 --> 00:25:11,700
of skip lightly over that but if you

00:25:09,970 --> 00:25:16,960
have software they could and frame at

00:25:11,700 --> 00:25:20,460
some point it will be in memory either

00:25:16,960 --> 00:25:24,370
in shared memory or in a normal memory

00:25:20,460 --> 00:25:26,620
inside of the regular process and the

00:25:24,370 --> 00:25:28,960
GPU composition is done in the GPU

00:25:26,620 --> 00:25:32,470
process so you want to upload this

00:25:28,960 --> 00:25:34,710
software buffer decoded video frank

00:25:32,470 --> 00:25:37,330
which is basically a chunk of memory and

00:25:34,710 --> 00:25:39,400
you want to upload it to the GPU as a

00:25:37,330 --> 00:25:45,490
texture so you can compose it as a

00:25:39,400 --> 00:25:48,310
texture and this is i I realized a

00:25:45,490 --> 00:25:49,810
little bit going into this is that I

00:25:48,310 --> 00:25:53,860
haven't done a Breton drawing lots of

00:25:49,810 --> 00:25:56,230
boxes and arrows and then this is a boat

00:25:53,860 --> 00:25:59,770
for me because I knew for myself because

00:25:56,230 --> 00:26:01,860
I'm here at a high enough level of

00:25:59,770 --> 00:26:06,520
abstraction everything looks the same

00:26:01,860 --> 00:26:07,870
law of PowerPoint architecture anyway

00:26:06,520 --> 00:26:09,430
who's been in like an architecture

00:26:07,870 --> 00:26:10,720
meeting in the end it just kind of draw

00:26:09,430 --> 00:26:12,159
like okay so we have this

00:26:10,720 --> 00:26:14,109
over here and there's an arrow to this

00:26:12,159 --> 00:26:19,720
other box and basically that's the

00:26:14,109 --> 00:26:21,639
architecture of anything but there's

00:26:19,720 --> 00:26:26,429
superbee boxes and there's gonna be

00:26:21,639 --> 00:26:30,070
arrows okay self rest just a very rough

00:26:26,429 --> 00:26:32,169
idea of how the software decoding a

00:26:30,070 --> 00:26:35,649
video works is basically you get some

00:26:32,169 --> 00:26:37,979
internet stuff coming into the browser

00:26:35,649 --> 00:26:40,869
process this is an interesting part of

00:26:37,979 --> 00:26:43,989
chromium architecture is that network

00:26:40,869 --> 00:26:46,509
access in the browser is centralized

00:26:43,989 --> 00:26:50,649
inside of the browser process so that

00:26:46,509 --> 00:26:52,389
the renderers this is this is a browser

00:26:50,649 --> 00:26:54,099
right what you do is like you download

00:26:52,389 --> 00:26:56,799
stuff from the internet and you display

00:26:54,099 --> 00:26:59,679
it but the renders cannot access the

00:26:56,799 --> 00:27:03,210
network so all of the network traffic

00:26:59,679 --> 00:27:07,690
goes through the browser process and

00:27:03,210 --> 00:27:11,470
another kind of interesting tidbit so

00:27:07,690 --> 00:27:16,690
anyway so the network traffic is then

00:27:11,470 --> 00:27:21,099
piped over at the C again to the render

00:27:16,690 --> 00:27:23,830
process and that's like nice halfway

00:27:21,099 --> 00:27:25,989
we've kind of box that says decoder so

00:27:23,830 --> 00:27:29,619
something magic happens and this is

00:27:25,989 --> 00:27:32,649
decoded now this decoder consult has to

00:27:29,619 --> 00:27:34,389
be inside of the GPU process sometimes

00:27:32,649 --> 00:27:36,220
you do hardware decoding D comes

00:27:34,389 --> 00:27:38,109
directly to texture and I can look at

00:27:36,220 --> 00:27:40,450
that and we thought that we also do

00:27:38,109 --> 00:27:43,059
software decoding inside of the GPU

00:27:40,450 --> 00:27:46,590
process you know doesn't use that you

00:27:43,059 --> 00:27:49,509
feel because it has an elusive sandbox

00:27:46,590 --> 00:27:53,739
so and then we don't have to loosen the

00:27:49,509 --> 00:27:56,080
rendering sandbox anyway so that so the

00:27:53,739 --> 00:27:59,169
you have this decoder magic decoder gets

00:27:56,080 --> 00:28:02,379
this video stream thing and it produces

00:27:59,169 --> 00:28:06,279
a video frame now the natural class is

00:28:02,379 --> 00:28:07,720
called video frame but in this case it

00:28:06,279 --> 00:28:10,570
referred many instant

00:28:07,720 --> 00:28:13,650
we'll look at two but this is the basic

00:28:10,570 --> 00:28:18,299
one for when you've had a decoded friend

00:28:13,650 --> 00:28:21,460
suffered eco friendly on Linux on monkey

00:28:18,299 --> 00:28:24,100
so you have a white planet you plan a

00:28:21,460 --> 00:28:29,260
navy plane it is in this memory buffer

00:28:24,100 --> 00:28:31,230
which is could me and the memory of the

00:28:29,260 --> 00:28:34,630
renderer can be a shared memory wherever

00:28:31,230 --> 00:28:36,880
but from the point of view of the memory

00:28:34,630 --> 00:28:41,010
as soon as it's in the RAM in regular

00:28:36,880 --> 00:28:44,260
memory so now we need to texture Isis

00:28:41,010 --> 00:28:45,940
push it to the GPU somehow now we're

00:28:44,260 --> 00:28:50,470
inside of the render process we have no

00:28:45,940 --> 00:28:54,610
contact with the GPU so how how this is

00:28:50,470 --> 00:28:56,140
done now if you go digging inside of the

00:28:54,610 --> 00:28:58,210
drum unit circle you'll see that there

00:28:56,140 --> 00:29:01,270
are different ways that they are upload

00:28:58,210 --> 00:29:04,750
textures and there's lots of its dev

00:29:01,270 --> 00:29:10,330
subjects but this is like the general

00:29:04,750 --> 00:29:13,450
plan so in rock you use this GL texture

00:29:10,330 --> 00:29:16,320
rectangle ARB on average the Linux you

00:29:13,450 --> 00:29:19,090
use GL texture external oh yes and

00:29:16,320 --> 00:29:21,640
generally everywhere else or whenever

00:29:19,090 --> 00:29:25,780
the above doesn't work you to use GL

00:29:21,640 --> 00:29:30,039
texture 2d but we're going to be looking

00:29:25,780 --> 00:29:37,270
at Linux so OS ideal image if external

00:29:30,039 --> 00:29:39,820
is an extension to OpenGL es2 where you

00:29:37,270 --> 00:29:44,610
can create email images and then you can

00:29:39,820 --> 00:29:49,990
um you can use those to create a texture

00:29:44,610 --> 00:29:52,870
in our case it's going to use two 1 for

00:29:49,990 --> 00:29:55,360
the Y plane and one for the and one for

00:29:52,870 --> 00:29:57,100
both of you in the V plane this is kind

00:29:55,360 --> 00:29:57,770
of it just skip the part where I say

00:29:57,100 --> 00:30:00,590
playing

00:29:57,770 --> 00:30:01,940
don't care about any of them but I'm

00:30:00,590 --> 00:30:06,680
going to be drawing them all the time so

00:30:01,940 --> 00:30:09,170
just pretend okay okay for for people

00:30:06,680 --> 00:30:14,750
who are not like video nerds the right

00:30:09,170 --> 00:30:18,320
thing this is a type of sort of like a

00:30:14,750 --> 00:30:21,710
compression of a video frame where the

00:30:18,320 --> 00:30:25,040
right plan has lunes so you can have

00:30:21,710 --> 00:30:28,190
done because that's very invisible to

00:30:25,040 --> 00:30:30,770
the human eye how bright or dark

00:30:28,190 --> 00:30:33,050
something else and the uv-plane has the

00:30:30,770 --> 00:30:38,960
color but there have a less space of

00:30:33,050 --> 00:30:40,580
memory and so in this case we we started

00:30:38,960 --> 00:30:42,530
off with what we have on the left right

00:30:40,580 --> 00:30:44,000
so we have this video franklin thing and

00:30:42,530 --> 00:30:46,910
we have a memory buffer and how's that

00:30:44,000 --> 00:30:50,810
why you with a bead plane that's great

00:30:46,910 --> 00:30:53,810
but we need to put it on the GPU so what

00:30:50,810 --> 00:30:57,530
happens is that we create another video

00:30:53,810 --> 00:31:00,350
frame object and then we construct a

00:30:57,530 --> 00:31:03,490
thing for it so in a so we do cut we

00:31:00,350 --> 00:31:06,320
copy all this stuff into shared memory

00:31:03,490 --> 00:31:08,480
into something that it calls a GPU

00:31:06,320 --> 00:31:09,950
memory butter wherever you put the unit

00:31:08,480 --> 00:31:12,410
the be playing together the Y playing

00:31:09,950 --> 00:31:16,030
along and we attach this to the video

00:31:12,410 --> 00:31:19,070
frame but at the same time we also use

00:31:16,030 --> 00:31:24,160
these commands that we are serializable

00:31:19,070 --> 00:31:29,360
despite to say that we want to copy them

00:31:24,160 --> 00:31:32,030
in on the GPU so I have I have it in my

00:31:29,360 --> 00:31:34,610
appendix thing I have another much more

00:31:32,030 --> 00:31:38,000
complicated diagram of this so we'll see

00:31:34,610 --> 00:31:40,310
if we get to it every but the most one

00:31:38,000 --> 00:31:43,940
thing is here is that after you have

00:31:40,310 --> 00:31:47,870
done all of your GL commands you

00:31:43,940 --> 00:31:50,090
generate this sigatoka so that means

00:31:47,870 --> 00:31:52,130
that you have all these commands to bind

00:31:50,090 --> 00:31:53,170
this texture of blah blah blah and then

00:31:52,130 --> 00:31:57,150
integrate and

00:31:53,170 --> 00:32:00,490
verified same token so that means that

00:31:57,150 --> 00:32:02,530
all of the things before has to be

00:32:00,490 --> 00:32:05,410
processed before the same token is its

00:32:02,530 --> 00:32:08,530
signal and so anything that uses this

00:32:05,410 --> 00:32:10,210
texture later on can wait on the same

00:32:08,530 --> 00:32:16,630
token to make sure that all of this has

00:32:10,210 --> 00:32:18,640
been done and so they're the they all

00:32:16,630 --> 00:32:20,740
have the exact same same token so

00:32:18,640 --> 00:32:22,540
whenever I talk like a shows and all of

00:32:20,740 --> 00:32:25,680
us live session of the same token it is

00:32:22,540 --> 00:32:31,000
the same one like the actual saving one

00:32:25,680 --> 00:32:33,700
all the time which is passed around and

00:32:31,000 --> 00:32:35,920
this is put inside of this object called

00:32:33,700 --> 00:32:37,750
a mailbox folder and the mailbox holder

00:32:35,920 --> 00:32:39,880
also has another kind of thing which is

00:32:37,750 --> 00:32:43,030
called the mailbox and remember stress

00:32:39,880 --> 00:32:47,440
has a unique name and the unique name is

00:32:43,030 --> 00:32:53,140
kind of connected to two to this image

00:32:47,440 --> 00:32:56,860
on the in the GPU process okay so now I

00:32:53,140 --> 00:32:59,710
want to so we have this like video frame

00:32:56,860 --> 00:33:00,760
which has these mailboxes and and same

00:32:59,710 --> 00:33:03,460
token and so on

00:33:00,760 --> 00:33:05,260
and but then they again this is like

00:33:03,460 --> 00:33:07,750
levels of indirection pants so this

00:33:05,260 --> 00:33:11,590
thing is again moved into something they

00:33:07,750 --> 00:33:13,930
call a transferable resource and it

00:33:11,590 --> 00:33:16,540
takes a hold of the sink token mailboxes

00:33:13,930 --> 00:33:21,550
and everything and from now on we don't

00:33:16,540 --> 00:33:24,970
care about the video frame anymore okay

00:33:21,550 --> 00:33:27,460
so let me get to to the point where we

00:33:24,970 --> 00:33:29,170
want to render this and like I said

00:33:27,460 --> 00:33:32,200
there's like layers of indirection in

00:33:29,170 --> 00:33:34,750
this case we are looking at transferable

00:33:32,200 --> 00:33:37,840
resources and these transferable

00:33:34,750 --> 00:33:39,460
resources are put into storage saying

00:33:37,840 --> 00:33:42,610
these are the months of resources were

00:33:39,460 --> 00:33:45,130
using for the current paint and they're

00:33:42,610 --> 00:33:47,240
registered and they get IDs in this case

00:33:45,130 --> 00:33:49,460
is ID 0

00:33:47,240 --> 00:33:52,580
and this is put in something with a

00:33:49,460 --> 00:33:56,059
layer tree resource provider so if you

00:33:52,580 --> 00:33:58,130
have a tab and you have many videos then

00:33:56,059 --> 00:34:01,490
you might have meant or many other kinds

00:33:58,130 --> 00:34:03,559
of resources in that webpage they will

00:34:01,490 --> 00:34:07,340
all be put into this lady resource

00:34:03,559 --> 00:34:09,109
provider and when the actual the

00:34:07,340 --> 00:34:11,600
rendering happens that's where it's not

00:34:09,109 --> 00:34:13,700
professional photography so what we're

00:34:11,600 --> 00:34:16,340
going to do here is but it will create

00:34:13,700 --> 00:34:18,710
what is called on why you'll be video

00:34:16,340 --> 00:34:20,899
draw quad and attach it to something

00:34:18,710 --> 00:34:24,230
impulsive meander Passman really pastors

00:34:20,899 --> 00:34:25,909
has loved these walls basically squares

00:34:24,230 --> 00:34:31,659
that know how to paint themselves

00:34:25,909 --> 00:34:37,190
somehow and this is the last time

00:34:31,659 --> 00:34:39,560
basically you have this div video drop

00:34:37,190 --> 00:34:41,720
but it has these resources attached it

00:34:39,560 --> 00:34:45,109
has a clipped region and here is where

00:34:41,720 --> 00:34:47,540
the GL programmers so it basically picks

00:34:45,109 --> 00:34:51,740
up all sorts of attributes to put in

00:34:47,540 --> 00:34:54,379
your jail program matches you can see

00:34:51,740 --> 00:34:56,570
all of this in the classical GL render

00:34:54,379 --> 00:35:02,119
and the function I'll show you why you

00:34:56,570 --> 00:35:03,680
need video Quan and basically it uses

00:35:02,119 --> 00:35:06,500
all sorts of information and the

00:35:03,680 --> 00:35:09,619
references to the texture IDs and it

00:35:06,500 --> 00:35:11,660
draws now we are still inside of the

00:35:09,619 --> 00:35:15,920
rendering process and this is using

00:35:11,660 --> 00:35:19,280
OpenGL es2 mats from the regular process

00:35:15,920 --> 00:35:23,180
to you you haven't really the code you

00:35:19,280 --> 00:35:26,540
don't really see on the client-side you

00:35:23,180 --> 00:35:31,850
don't really see the GPU at all you kind

00:35:26,540 --> 00:35:37,250
of pretend you will have a local local

00:35:31,850 --> 00:35:38,810
interface and that sounds all well and

00:35:37,250 --> 00:35:40,910
good because now it seems like okay I

00:35:38,810 --> 00:35:42,770
can abstract this way and okay it's good

00:35:40,910 --> 00:35:44,300
or whatever but they added lots of

00:35:42,770 --> 00:35:48,230
extensions right because some of this is

00:35:44,300 --> 00:35:54,470
not supported so they have a whole bunch

00:35:48,230 --> 00:35:55,630
of Julius two extensions these are some

00:35:54,470 --> 00:35:58,720
that that

00:35:55,630 --> 00:36:02,980
used as a specific example and where for

00:35:58,720 --> 00:36:05,980
the image they have for for the actual

00:36:02,980 --> 00:36:08,020
copying of the data over and to the ETL

00:36:05,980 --> 00:36:10,990
images that makes up the texture later

00:36:08,020 --> 00:36:14,470
and so on that's the problem image

00:36:10,990 --> 00:36:16,120
extension for the map box it has a

00:36:14,470 --> 00:36:18,190
separate extension and for the sync

00:36:16,120 --> 00:36:19,600
token has also another extension and

00:36:18,190 --> 00:36:21,280
there are more many extensions they

00:36:19,600 --> 00:36:27,540
generally look like that so you have

00:36:21,280 --> 00:36:29,800
appropriate underscore so can I use

00:36:27,540 --> 00:36:31,750
because that's kind of like the idea of

00:36:29,800 --> 00:36:33,160
it's like if you want to have this kind

00:36:31,750 --> 00:36:34,870
of architecture is this something that

00:36:33,160 --> 00:36:43,680
you can just grab and use in your

00:36:34,870 --> 00:36:43,680
project no not the way it is at least

00:36:45,060 --> 00:36:51,550
because there are three kinds of api's

00:36:48,970 --> 00:36:55,000
that are in use from the renderer site

00:36:51,550 --> 00:36:56,740
you have like a standard OpenGL es2 and

00:36:55,000 --> 00:36:59,350
that's fine if you say you can just kind

00:36:56,740 --> 00:37:03,250
of pretend but you also have these

00:36:59,350 --> 00:37:06,040
promeo areas which are extensions but

00:37:03,250 --> 00:37:08,710
and you have also just a plain chromium

00:37:06,040 --> 00:37:10,870
eight this is not made to be generic

00:37:08,710 --> 00:37:13,090
it's made to fix a specific

00:37:10,870 --> 00:37:19,300
architectural thing inside of chromium

00:37:13,090 --> 00:37:20,830
and then we have another nice book I

00:37:19,300 --> 00:37:22,930
definitely don't do books but I really

00:37:20,830 --> 00:37:27,640
felt quoting in this presentation and

00:37:22,930 --> 00:37:32,080
that's from Joel famous Joe lock

00:37:27,640 --> 00:37:35,040
software lock from 2002 all not trivial

00:37:32,080 --> 00:37:37,840
abstractions to some degree are leaky

00:37:35,040 --> 00:37:39,880
Tommy likes to pretend that this is not

00:37:37,840 --> 00:37:40,390
true and we keep on programming like

00:37:39,880 --> 00:37:44,349
it's not

00:37:40,390 --> 00:37:46,000
true but it is true that when you try to

00:37:44,349 --> 00:37:48,849
make something that is sufficiently

00:37:46,000 --> 00:37:51,519
complicated than some of the

00:37:48,849 --> 00:37:57,210
restrictions in the implementation will

00:37:51,519 --> 00:38:00,519
leak through your interface that's a

00:37:57,210 --> 00:38:01,990
line 11 good thing because if it's not

00:38:00,519 --> 00:38:03,640
that he has to compensate you have to

00:38:01,990 --> 00:38:05,349
make a workaround so generally those

00:38:03,640 --> 00:38:07,289
workouts are very expensive there's a

00:38:05,349 --> 00:38:09,480
reason why you're pushing your

00:38:07,289 --> 00:38:11,769
complications all the way to interface

00:38:09,480 --> 00:38:19,200
if you didn't you would probably make

00:38:11,769 --> 00:38:19,200
something that was very inefficient so

00:38:19,260 --> 00:38:25,869
not exactly a cut and paste but it's

00:38:23,049 --> 00:38:30,160
interesting and it's something that it

00:38:25,869 --> 00:38:32,049
runs on your machine so you know you

00:38:30,160 --> 00:38:36,549
know the works you know it's fairly

00:38:32,049 --> 00:38:39,160
efficient because it does work so the

00:38:36,549 --> 00:38:41,710
question is is more for your own project

00:38:39,160 --> 00:38:43,420
is doesn't solve as a problem for you is

00:38:41,710 --> 00:38:45,369
it sufficiently important because this

00:38:43,420 --> 00:38:49,559
is a non-trivial amount of code and

00:38:45,369 --> 00:38:49,559
there's a non-trivial amount of sister

00:38:50,069 --> 00:39:00,609
so can I use maybe maybe some people

00:38:57,819 --> 00:39:02,200
asked me about our rating systems of

00:39:00,609 --> 00:39:03,700
doing massive amounts of soundbox you

00:39:02,200 --> 00:39:06,369
know their processes and they can't do

00:39:03,700 --> 00:39:09,430
any GL stuff maybe you would want to

00:39:06,369 --> 00:39:11,980
introduce some kind of GL service in

00:39:09,430 --> 00:39:13,599
that kind of operating system and in

00:39:11,980 --> 00:39:15,460
that case it's like it's for the whole

00:39:13,599 --> 00:39:17,019
operating system it's not just for one

00:39:15,460 --> 00:39:18,579
application and so you might actually

00:39:17,019 --> 00:39:20,079
think that this did the amount of

00:39:18,579 --> 00:39:29,589
complexity in the amount of work might

00:39:20,079 --> 00:39:30,970
be worth it so that I have I have since

00:39:29,589 --> 00:39:32,619
I have a little bit of time how some

00:39:30,970 --> 00:39:37,230
extra slides some of those things

00:39:32,619 --> 00:39:40,569
through that and I'll come back to this

00:39:37,230 --> 00:39:46,319
so these are not these are like random

00:39:40,569 --> 00:39:48,890
thoughts okay so this is not very

00:39:46,319 --> 00:39:51,860
interesting but I thought it was kind of

00:39:48,890 --> 00:39:56,140
just as the actual copying into shared

00:39:51,860 --> 00:39:59,900
memory of these paths and these buffers

00:39:56,140 --> 00:40:03,200
where they use little UI beside why you

00:39:59,900 --> 00:40:05,390
mean sorry which I thought was kind of

00:40:03,200 --> 00:40:10,040
interesting also the fact that there's

00:40:05,390 --> 00:40:12,140
copying and this is the more complicated

00:40:10,040 --> 00:40:16,640
view of what we saw before and here you

00:40:12,140 --> 00:40:18,380
actually see the GL commands and so so

00:40:16,640 --> 00:40:20,780
you have this video friend before and

00:40:18,380 --> 00:40:23,120
have these frame resources and our kids

00:40:20,780 --> 00:40:26,570
are two top three but you can have up to

00:40:23,120 --> 00:40:31,670
three and the mail box holders up there

00:40:26,570 --> 00:40:36,920
that hold the references to the texture

00:40:31,670 --> 00:40:39,860
target texture ID thing so the other DP

00:40:36,920 --> 00:40:41,450
is a way the first call that you get is

00:40:39,860 --> 00:40:43,700
the byte texture so yeah the texture

00:40:41,450 --> 00:40:46,640
target anyhow this texture ID which is

00:40:43,700 --> 00:40:50,390
connected to plain resource and that we

00:40:46,640 --> 00:40:54,140
create you use this image the premium

00:40:50,390 --> 00:40:58,460
image extension and cause function all

00:40:54,140 --> 00:41:01,010
create image chromium which binds your

00:40:58,460 --> 00:41:03,650
memory buffer to your image and then

00:41:01,010 --> 00:41:06,530
afterwards you do the line text image to

00:41:03,650 --> 00:41:09,020
D chromium now like like I said this is

00:41:06,530 --> 00:41:13,130
like this is not generic right this is

00:41:09,020 --> 00:41:17,140
this is very specific to premium then

00:41:13,130 --> 00:41:17,140
you find that image to text tutorial and

00:41:18,040 --> 00:41:22,850
this code is in this class up there and

00:41:21,350 --> 00:41:24,470
listen this is another thing that they

00:41:22,850 --> 00:41:29,780
love it's a program the love really

00:41:24,470 --> 00:41:31,310
really long class things so it's like

00:41:29,780 --> 00:41:33,890
it's like if it could be a sentence

00:41:31,310 --> 00:41:38,210
please okay so this is the GPU memory

00:41:33,890 --> 00:41:42,710
buffer video frame pool and this is what

00:41:38,210 --> 00:41:45,400
it does okay so so the problem image

00:41:42,710 --> 00:41:47,140
extension it has a

00:41:45,400 --> 00:41:50,260
these functions and then this is how

00:41:47,140 --> 00:41:56,500
this eagle and Mitch versus texture

00:41:50,260 --> 00:41:58,180
uploading thing uses these so it's not

00:41:56,500 --> 00:42:01,360
like like it let's say that you have a

00:41:58,180 --> 00:42:03,100
deal application area that are open

00:42:01,360 --> 00:42:05,260
daily it's two applications and users

00:42:03,100 --> 00:42:06,820
kind of have to just pop it on the top

00:42:05,260 --> 00:42:08,590
of this thing and it's supposed to be a

00:42:06,820 --> 00:42:14,260
little transparent and just work and

00:42:08,590 --> 00:42:17,860
stuff that's don't expect that there is

00:42:14,260 --> 00:42:23,980
like serious leakage here this is this

00:42:17,860 --> 00:42:25,540
is not standard and this remember I

00:42:23,980 --> 00:42:28,090
stopped several layers of extraction I

00:42:25,540 --> 00:42:29,500
knew this I had this slide and you can

00:42:28,090 --> 00:42:33,910
see it's not finished because I don't

00:42:29,500 --> 00:42:36,930
have like fancy colors but it happens

00:42:33,910 --> 00:42:39,550
like I find this like so funny okay so

00:42:36,930 --> 00:42:41,260
okay I don't know which end do you want

00:42:39,550 --> 00:42:43,180
to start in but you basically have you

00:42:41,260 --> 00:42:45,220
have the decoders down there right so

00:42:43,180 --> 00:42:47,700
that's where the video frame is coming

00:42:45,220 --> 00:42:51,250
from but basically it's pushed into this

00:42:47,700 --> 00:42:53,650
rent video render influences in the

00:42:51,250 --> 00:42:55,900
middle all the way to the right when it

00:42:53,650 --> 00:42:57,130
gets framed it kind of pushes it over to

00:42:55,900 --> 00:42:59,650
what is called the video frame

00:42:57,130 --> 00:43:01,840
compositor the Lydia frame combustor

00:42:59,650 --> 00:43:06,070
implements video render sync and that's

00:43:01,840 --> 00:43:09,280
how it gets this call back but it is a

00:43:06,070 --> 00:43:12,100
video frame provider which also has of

00:43:09,280 --> 00:43:14,130
course a client interface which the

00:43:12,100 --> 00:43:19,000
video frame provider client info

00:43:14,130 --> 00:43:21,070
infamous see I told you there's like

00:43:19,000 --> 00:43:23,110
this lip code is not really easy to read

00:43:21,070 --> 00:43:24,490
and these things are of course not even

00:43:23,110 --> 00:43:26,080
co-located in the code so it's

00:43:24,490 --> 00:43:29,590
absolutely you kind of have to just like

00:43:26,080 --> 00:43:31,960
wrap to find things and the first set

00:43:29,590 --> 00:43:33,490
you have for each video frame on the

00:43:31,960 --> 00:43:38,830
webpage you will have a video frame

00:43:33,490 --> 00:43:40,450
provider client info yeah that's great

00:43:38,830 --> 00:43:42,430
anyway so this one has something called

00:43:40,450 --> 00:43:44,380
an active video layer and that's an

00:43:42,430 --> 00:43:46,360
active video layer is where you kind of

00:43:44,380 --> 00:43:47,260
you get a paint and this is how the

00:43:46,360 --> 00:43:50,830
logical

00:43:47,260 --> 00:43:53,950
to do this paint happens and then use of

00:43:50,830 --> 00:43:57,790
this video resource updater which is the

00:43:53,950 --> 00:44:02,050
one that actually populates the render

00:43:57,790 --> 00:44:05,050
paths and so on anyway and this is just

00:44:02,050 --> 00:44:06,700
like just a little bit of things that

00:44:05,050 --> 00:44:08,560
are connected to this specific thing

00:44:06,700 --> 00:44:10,810
which is basically the bottom part here

00:44:08,560 --> 00:44:14,740
you have decoders it puts out a video

00:44:10,810 --> 00:44:17,560
frame it gets into this very small thing

00:44:14,740 --> 00:44:20,230
which is not an active video layer which

00:44:17,560 --> 00:44:22,180
knows how to paint itself and it makes

00:44:20,230 --> 00:44:24,430
this - yellow program type answer you

00:44:22,180 --> 00:44:31,230
would think this would be simple but

00:44:24,430 --> 00:44:31,230
there are like 1 2 3 4 5 6 7 8 9 10 11

00:44:31,890 --> 00:44:37,000
so and this is just a 20-bit so

00:44:35,200 --> 00:44:40,660
navigating the chromium source code is

00:44:37,000 --> 00:44:45,160
not for that faint apart but if you want

00:44:40,660 --> 00:44:48,940
to I would read these so I told you

00:44:45,160 --> 00:44:52,540
about the GPU memory video no different

00:44:48,940 --> 00:44:55,240
video frame pool and then you have the

00:44:52,540 --> 00:44:58,470
video resource out there and then you

00:44:55,240 --> 00:45:01,300
have the GL render and then you have

00:44:58,470 --> 00:45:03,730
programmer I think OCC so if I was going

00:45:01,300 --> 00:45:06,340
to read for classes to understand how

00:45:03,730 --> 00:45:10,870
this thing works or for prize then I'm

00:45:06,340 --> 00:45:13,150
going to read those and we're gonna skip

00:45:10,870 --> 00:45:14,200
that but there's an interesting on that

00:45:13,150 --> 00:45:17,230
I'm not going to talk about it much but

00:45:14,200 --> 00:45:19,180
I like what you saw is that you have

00:45:17,230 --> 00:45:22,360
resource sharing and across these

00:45:19,180 --> 00:45:25,660
command buffers and to be able to do

00:45:22,360 --> 00:45:28,600
that you have to to create the context

00:45:25,660 --> 00:45:30,100
in a shared group to be able to share

00:45:28,600 --> 00:45:34,780
resources between them

00:45:30,100 --> 00:45:37,420
and this has implications to things that

00:45:34,780 --> 00:45:44,370
you can use in the underlying APRs like

00:45:37,420 --> 00:45:53,820
a geofence now we're going to go back

00:45:44,370 --> 00:45:59,520
there because I am it's my pet cause

00:45:53,820 --> 00:46:03,000
we've seen in the last few years we have

00:45:59,520 --> 00:46:04,770
made I come from a product background I

00:46:03,000 --> 00:46:07,320
make products that will make services

00:46:04,770 --> 00:46:09,840
and I also spent five years working

00:46:07,320 --> 00:46:13,110
embedded industry and we make like

00:46:09,840 --> 00:46:15,480
physical products with people and we've

00:46:13,110 --> 00:46:18,720
seen several cases of making products

00:46:15,480 --> 00:46:22,110
for people that don't work for people

00:46:18,720 --> 00:46:25,290
with dark skin for people with

00:46:22,110 --> 00:46:27,900
disabilities and and you have certain

00:46:25,290 --> 00:46:29,700
things that you've seen like the fact

00:46:27,900 --> 00:46:32,310
that we actually managed to have a

00:46:29,700 --> 00:46:36,390
technology sector making products that

00:46:32,310 --> 00:46:40,680
didn't support Unicode for decades that

00:46:36,390 --> 00:46:47,130
says something about us because the

00:46:40,680 --> 00:46:49,980
world is not seven and asking so what is

00:46:47,130 --> 00:46:52,620
important to me is if people talk about

00:46:49,980 --> 00:46:54,150
being inclusive and diversity of

00:46:52,620 --> 00:46:56,730
something that is just a nice-to-have

00:46:54,150 --> 00:46:58,770
thing but the thing is what we've seen

00:46:56,730 --> 00:47:02,360
is that we're producing products that

00:46:58,770 --> 00:47:04,650
don't work on people with a dark skinned

00:47:02,360 --> 00:47:07,380
snapchat really is these like fancy

00:47:04,650 --> 00:47:08,490
filters easy to put like little Wiggly

00:47:07,380 --> 00:47:10,710
things on your head

00:47:08,490 --> 00:47:12,810
they were released to production and

00:47:10,710 --> 00:47:17,730
they didn't work on people with dark

00:47:12,810 --> 00:47:21,780
skin how do you do that how do you do

00:47:17,730 --> 00:47:23,880
that in 2016 that means you didn't have

00:47:21,780 --> 00:47:25,350
a single person in your office that

00:47:23,880 --> 00:47:26,880
walked into your office while are you

00:47:25,350 --> 00:47:28,590
testing this and playing around with

00:47:26,880 --> 00:47:31,470
this that said oh can I try to put a

00:47:28,590 --> 00:47:33,180
little legally thing on my head every

00:47:31,470 --> 00:47:34,290
single person throughout the entire pack

00:47:33,180 --> 00:47:37,380
red blue white

00:47:34,290 --> 00:47:41,460
the only way you get to this point you

00:47:37,380 --> 00:47:43,950
had asked the iWatch the first one it

00:47:41,460 --> 00:47:46,710
couldn't measure the pulse of black

00:47:43,950 --> 00:47:48,090
people how do you do that it shipped it

00:47:46,710 --> 00:47:51,030
to production you can't do it because

00:47:48,090 --> 00:47:53,820
you can't test you can't try the

00:47:51,030 --> 00:47:56,340
Cosabella I'm someone who's dark-skinned

00:47:53,820 --> 00:48:01,890
and we keep on doing this over and over

00:47:56,340 --> 00:48:03,210
again we make things that are anti-trans

00:48:01,890 --> 00:48:06,330
reinforce people

00:48:03,210 --> 00:48:09,140
specify that gender what really do you

00:48:06,330 --> 00:48:15,480
really need to know you use this gender

00:48:09,140 --> 00:48:19,339
we as a community that makes things for

00:48:15,480 --> 00:48:23,040
everyone in the world we need to have

00:48:19,339 --> 00:48:26,640
representation in our teams for everyone

00:48:23,040 --> 00:48:29,250
in the world and you know people talk

00:48:26,640 --> 00:48:31,589
about diversity of things like we need

00:48:29,250 --> 00:48:34,020
more women but the thing is we don't

00:48:31,589 --> 00:48:36,930
only need more women we need all

00:48:34,020 --> 00:48:38,880
everybody they just think about your own

00:48:36,930 --> 00:48:43,650
careers your own teams

00:48:38,880 --> 00:48:47,640
how many openly gay men have you worked

00:48:43,650 --> 00:48:51,930
with this is something that doesn't show

00:48:47,640 --> 00:48:56,430
me you know you can't tell how many gay

00:48:51,930 --> 00:49:01,609
men what men in our industry are not

00:48:56,430 --> 00:49:05,760
open about their sexuality for fear of

00:49:01,609 --> 00:49:08,040
repercussions this is this isn't just

00:49:05,760 --> 00:49:10,710
about women it's not just about people

00:49:08,040 --> 00:49:12,690
with dark skin it's about everybody we

00:49:10,710 --> 00:49:15,540
have to have room to be different we

00:49:12,690 --> 00:49:19,380
have to have room for people to not be

00:49:15,540 --> 00:49:21,570
the same because that is the future that

00:49:19,380 --> 00:49:23,609
is the future if you have a team where

00:49:21,570 --> 00:49:25,589
everyone the way you have representation

00:49:23,609 --> 00:49:29,099
of all sorts of people and they feel

00:49:25,589 --> 00:49:32,849
safe they feel safe to tell you who they

00:49:29,099 --> 00:49:37,800
are then they will tell you when things

00:49:32,849 --> 00:49:39,450
you do don't work when the interfaces

00:49:37,800 --> 00:49:41,849
that you make are really really bad for

00:49:39,450 --> 00:49:44,609
right to left languages if you have a

00:49:41,849 --> 00:49:46,080
person who has a background that can

00:49:44,609 --> 00:49:48,510
read right to left they'll tell you this

00:49:46,080 --> 00:49:50,339
will look really strange and nobody will

00:49:48,510 --> 00:49:51,869
like this because the okay buttons to

00:49:50,339 --> 00:49:54,930
the right not to the left and they'll

00:49:51,869 --> 00:49:57,960
tell you them and to do this week we

00:49:54,930 --> 00:50:00,170
have to have the people in the room but

00:49:57,960 --> 00:50:04,560
we also have to make them feel safe and

00:50:00,170 --> 00:50:08,520
that is a central point because to make

00:50:04,560 --> 00:50:09,819
these products that don't work for large

00:50:08,520 --> 00:50:13,660
portions of the

00:50:09,819 --> 00:50:16,959
population then either they went in the

00:50:13,660 --> 00:50:20,579
room or they were too afraid to say

00:50:16,959 --> 00:50:26,739
something or when they did say something

00:50:20,579 --> 00:50:28,869
we didn't listen so this is this is the

00:50:26,739 --> 00:50:30,549
this is to all of us we all have biases

00:50:28,869 --> 00:50:32,949
we all have things we need to work on

00:50:30,549 --> 00:50:36,069
this is not like oh you have no no we

00:50:32,949 --> 00:50:38,799
all have I have lots of things I need to

00:50:36,069 --> 00:50:41,019
work on what I'm saying is as an

00:50:38,799 --> 00:50:44,440
industry if we really want to service

00:50:41,019 --> 00:50:47,680
the entire world then we have to work on

00:50:44,440 --> 00:50:52,650
making stuff that works for the entire

00:50:47,680 --> 00:50:56,170
world and that is my last slide except

00:50:52,650 --> 00:50:58,660
this one because I have us

00:50:56,170 --> 00:51:00,999
so before you caucus like before you

00:50:58,660 --> 00:51:02,130
leave you cannot rush into something but

00:51:00,999 --> 00:51:05,559
before you leave please

00:51:02,130 --> 00:51:08,619
picks up I work for a browser please try

00:51:05,559 --> 00:51:12,339
the browser it's cool and take a t-shirt

00:51:08,619 --> 00:51:16,559
and stickers and whatnot and pants okay

00:51:12,339 --> 00:51:16,559
so now I've done so now you can clap

00:51:20,230 --> 00:51:35,480
okay please any questions on either

00:51:24,290 --> 00:51:38,750
topic it's good so how many times is

00:51:35,480 --> 00:51:43,520
that video from copied yeah actually

00:51:38,750 --> 00:51:45,590
going all the memory bus it depends it

00:51:43,520 --> 00:51:47,420
depends on the implementation like one

00:51:45,590 --> 00:51:49,130
of the reasons why I'm looking into it

00:51:47,420 --> 00:51:52,700
is because I think they have at least

00:51:49,130 --> 00:51:55,700
one copy too many ah it will be well

00:51:52,700 --> 00:51:56,690
damn certain scenarios probably to which

00:51:55,700 --> 00:51:58,790
I don't appreciate

00:51:56,690 --> 00:52:00,710
so that is one of the reasons why I've

00:51:58,790 --> 00:52:03,590
been looking at this to try to minimize

00:52:00,710 --> 00:52:06,320
the copies now the good thing about you

00:52:03,590 --> 00:52:11,090
know this is playing a video file right

00:52:06,320 --> 00:52:14,119
so so the latency is not a huge deal but

00:52:11,090 --> 00:52:18,010
if you have something like real-time

00:52:14,119 --> 00:52:20,570
video then this the copies will cost and

00:52:18,010 --> 00:52:23,450
so yeah so that's definitely something

00:52:20,570 --> 00:52:25,790
that I want to work on how crazy are you

00:52:23,450 --> 00:52:29,720
thinking about going like actually

00:52:25,790 --> 00:52:33,350
telling the render process how to title

00:52:29,720 --> 00:52:37,010
the pictures and send it directly to if

00:52:33,350 --> 00:52:41,570
you or are you some very well it depends

00:52:37,010 --> 00:52:43,970
if you if you have the decoded frame in

00:52:41,570 --> 00:52:46,160
it depends on how the decoder works with

00:52:43,970 --> 00:52:48,170
a platform and blah blah blah but let's

00:52:46,160 --> 00:52:51,770
say that you have a deeper to friend in

00:52:48,170 --> 00:52:53,900
memory in the GPU process already what

00:52:51,770 --> 00:52:57,320
you do in some scenarios there is no

00:52:53,900 --> 00:52:59,299
reason to send it over so then you could

00:52:57,320 --> 00:53:01,909
send a handle over

00:52:59,299 --> 00:53:06,019
and when the handle comes back then you

00:53:01,909 --> 00:53:07,929
do the uploading so something like that

00:53:06,019 --> 00:53:14,869
maybe yeah

00:53:07,929 --> 00:53:17,439
any more questions yes elements of it

00:53:14,869 --> 00:53:22,969
all you were talking about different

00:53:17,439 --> 00:53:26,029
acquisitions what kind of a silly method

00:53:22,969 --> 00:53:28,549
do you use in the produce aisle we were

00:53:26,029 --> 00:53:30,669
we use low calorie so gets to

00:53:28,549 --> 00:53:34,189
communicate between different processes

00:53:30,669 --> 00:53:39,439
do use some other method or how do you

00:53:34,189 --> 00:53:42,459
communicate between yeah since since its

00:53:39,439 --> 00:53:44,599
cross-platform that the the the the

00:53:42,459 --> 00:53:46,339
concepts are very high level because

00:53:44,599 --> 00:53:49,039
they generally have a platform specific

00:53:46,339 --> 00:53:52,249
implementation and so they're generally

00:53:49,039 --> 00:53:57,140
like layers of implementation but yeah

00:53:52,249 --> 00:54:02,479
local sockets is used I anything where

00:53:57,140 --> 00:54:05,149
you can now I have to think because I am

00:54:02,479 --> 00:54:07,009
just thinking to do their file the past

00:54:05,149 --> 00:54:08,539
file descriptors I'm not sure the thing

00:54:07,009 --> 00:54:10,459
is very often in the colony who are

00:54:08,539 --> 00:54:12,319
generally so I love you up like three

00:54:10,459 --> 00:54:15,829
layers of abstraction beneath you so I

00:54:12,319 --> 00:54:18,079
don't really think about it anymore but

00:54:15,829 --> 00:54:20,089
yeah but but then there are some

00:54:18,079 --> 00:54:21,380
specific implementations and you can do

00:54:20,089 --> 00:54:23,359
whatever you want on your clever

00:54:21,380 --> 00:54:27,880
whatever it is the most optimal for your

00:54:23,359 --> 00:54:27,880
background yeah okay thanks

00:54:34,260 --> 00:54:39,440
so since you've worked with the browsers

00:54:36,359 --> 00:54:42,720
I see that most of the browser's are

00:54:39,440 --> 00:54:46,079
kind of report from the chromium family

00:54:42,720 --> 00:54:48,270
and now there's one of stuff happening

00:54:46,079 --> 00:54:50,190
since we talked about you beautifully

00:54:48,270 --> 00:54:53,310
there's not stuff happening in the

00:54:50,190 --> 00:54:54,810
Mozilla side with this product so if you

00:54:53,310 --> 00:54:57,270
have the chance to look on the Mozilla

00:54:54,810 --> 00:54:59,220
side do you think in the future we'll

00:54:57,270 --> 00:55:03,060
have browsers coming from using our

00:54:59,220 --> 00:55:06,510
technologies as well there are process

00:55:03,060 --> 00:55:09,150
that based on several other browsers

00:55:06,510 --> 00:55:11,040
outside of Firefox but then again that

00:55:09,150 --> 00:55:12,540
there are interests are looking into the

00:55:11,040 --> 00:55:16,589
browser space there are planning a lot

00:55:12,540 --> 00:55:20,180
of browsers but they have varying

00:55:16,589 --> 00:55:22,950
degrees some how many people use them so

00:55:20,180 --> 00:55:25,349
and I think I think the quantum stuff is

00:55:22,950 --> 00:55:28,349
really cool I think the work they didn't

00:55:25,349 --> 00:55:30,540
trust is really cool what will you have

00:55:28,349 --> 00:55:34,200
when you have access to somebody earlier

00:55:30,540 --> 00:55:36,420
near is that the work that was done in

00:55:34,200 --> 00:55:39,720
around the early 2000 that was really

00:55:36,420 --> 00:55:41,849
cool and and what happened when they

00:55:39,720 --> 00:55:43,710
kind of downsize that and went over to

00:55:41,849 --> 00:55:46,319
the chromium link thing is that a lot of

00:55:43,710 --> 00:55:48,329
our people went to other browsers so

00:55:46,319 --> 00:55:51,240
today we have Excel for people working

00:55:48,329 --> 00:55:54,300
on all the major browsers there's a

00:55:51,240 --> 00:55:56,160
little bit of opera everywhere and then

00:55:54,300 --> 00:55:57,660
it's a small community and there's a lot

00:55:56,160 --> 00:55:59,700
of people who skipped from one place to

00:55:57,660 --> 00:56:02,430
another and get ideas from our place to

00:55:59,700 --> 00:56:07,079
another and then the the original prompt

00:56:02,430 --> 00:56:09,960
team was filled with Firefox people and

00:56:07,079 --> 00:56:11,700
and and and they brought you know what

00:56:09,960 --> 00:56:13,260
they have learned from Firefox and that

00:56:11,700 --> 00:56:15,420
is some of the inspiration to the

00:56:13,260 --> 00:56:17,849
premium architecture was this kind of we

00:56:15,420 --> 00:56:19,500
want to to do more separation in the

00:56:17,849 --> 00:56:21,930
processes we want to sound except

00:56:19,500 --> 00:56:24,900
separately and and you get a rough from

00:56:21,930 --> 00:56:27,270
that and then again that framework again

00:56:24,900 --> 00:56:31,829
us aspiring Firefox again in this

00:56:27,270 --> 00:56:33,359
quantum so the thing about having

00:56:31,829 --> 00:56:34,860
several browsers and I think in that

00:56:33,359 --> 00:56:36,780
case

00:56:34,860 --> 00:56:39,120
to try many different roses because

00:56:36,780 --> 00:56:42,830
having several browsers and having

00:56:39,120 --> 00:56:46,530
browser Wars is good for browsers like I

00:56:42,830 --> 00:56:48,210
worked in Opera and I would go to party

00:56:46,530 --> 00:56:50,760
people do that a lot well then I'm gonna

00:56:48,210 --> 00:56:53,130
party they look oh yeah we're working on

00:56:50,760 --> 00:56:57,030
Sakai we're currently making process I

00:56:53,130 --> 00:57:01,430
don't use your browser I don't know why

00:56:57,030 --> 00:57:01,430
that is like a clean oh sorry

00:57:08,720 --> 00:57:15,560
does he browser have taps you know like

00:57:11,940 --> 00:57:15,560
yeah so you're welcome

00:57:15,740 --> 00:57:20,190
does your browser house speed down the

00:57:18,300 --> 00:57:23,700
thing we open and of course it does

00:57:20,190 --> 00:57:26,610
you're welcome because that's the thing

00:57:23,700 --> 00:57:29,730
these browsers they inspire each other

00:57:26,610 --> 00:57:33,960
what you haven't I use all along was it

00:57:29,730 --> 00:57:36,720
was all all innovation stopped browser

00:57:33,960 --> 00:57:38,910
wars are good for the web browser Wars

00:57:36,720 --> 00:57:41,130
are good for the user experience and

00:57:38,910 --> 00:57:43,410
browsers we meet competition we need

00:57:41,130 --> 00:57:51,750
people who are different not the same

00:57:43,410 --> 00:57:56,790
and okay sir it's my personal a couple

00:57:51,750 --> 00:57:58,760
more questions right so you obviously

00:57:56,790 --> 00:58:01,320
talked a lot about explicit

00:57:58,760 --> 00:58:04,460
synchronization and building mount

00:58:01,320 --> 00:58:09,060
Gotham ascend and having this whole

00:58:04,460 --> 00:58:12,810
system built on the chromium side of

00:58:09,060 --> 00:58:16,530
things so it it can still sit on some of

00:58:12,810 --> 00:58:20,390
OpenGL and so going a little bit for

00:58:16,530 --> 00:58:23,750
what and is welcome and maybe

00:58:20,390 --> 00:58:26,180
like directs 12 but when you can do this

00:58:23,750 --> 00:58:28,000
kind of explicit synchronization

00:58:26,180 --> 00:58:31,010
natively have you thought about

00:58:28,000 --> 00:58:33,760
exploring using like just ripping out

00:58:31,010 --> 00:58:36,520
the opengl back in time

00:58:33,760 --> 00:58:38,440
and then maybe facing future products

00:58:36,520 --> 00:58:40,480
about them

00:58:38,440 --> 00:58:44,050
III know there's been some work on the

00:58:40,480 --> 00:58:45,970
Vulcan already I don't know what they

00:58:44,050 --> 00:58:49,990
would like to go that way I find going

00:58:45,970 --> 00:58:52,870
to be super interesting so III would

00:58:49,990 --> 00:58:57,370
definitely want to look more into that

00:58:52,870 --> 00:58:59,410
but basically it's it's a little bit

00:58:57,370 --> 00:59:00,790
like I said earlier it's like if you're

00:58:59,410 --> 00:59:02,680
going to have something that is

00:59:00,790 --> 00:59:05,470
currently functional and you want to

00:59:02,680 --> 00:59:07,720
replace a essential opponent then you

00:59:05,470 --> 00:59:10,800
have to make sure that that it you don't

00:59:07,720 --> 00:59:13,300
have any glitches in the moon right so

00:59:10,800 --> 00:59:15,460
yeah but I find it very interesting and

00:59:13,300 --> 00:59:17,260
I definitely think you're probably going

00:59:15,460 --> 00:59:20,440
to go that way it's much easier to

00:59:17,260 --> 00:59:23,380
maintain conformity using Vulcan than

00:59:20,440 --> 00:59:29,650
you have with a very high level API like

00:59:23,380 --> 00:59:33,880
OpenGL is in my opinion okay all right

00:59:29,650 --> 00:59:40,329
so everybody once again for Patricia

00:59:33,880 --> 00:59:40,329

YouTube URL: https://www.youtube.com/watch?v=Oow7r4xQdDs


