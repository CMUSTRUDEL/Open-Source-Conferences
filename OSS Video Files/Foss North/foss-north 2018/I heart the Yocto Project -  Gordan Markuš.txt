Title: I heart the Yocto Project -  Gordan MarkuÅ¡
Publication date: 2018-04-26
Playlist: foss-north 2018
Description: 
	Out of all the Embedded Linux Build System solutions why is the Yocto Project so popular?
This talk aims to introduce the audience with the Yocto Project: how is it different from the other solutions, as well as its architecture and community.
Furthermore, as the focal point of this talk, Gordan will present the reasons why the Yocto Project is his go-to option when creating Embedded Linux solutions. His analysis is be based on personal experience from several different industries, the difficulties faced and the solutions found.

---

During his career, Gordan has been working in several industries, but most notably tinkering with IoT devices and developing critical communication systems, before joining the automotive sector. As a part of his daily work, he strives to contribute to open source projects that are extensively used in the automotive industry, like the Yocto project, OpenEmbedded framework, Linux Kernel, GENIVI and Qt Automotive Suite. Currently he is an active member of the AUTOSAR Consortium developing the Adaptive Platform. 

http://foss-north.se/2018/speakers-and-talks.html#gmarkus
Captions: 
	00:00:12,280 --> 00:00:20,900
so there I go hello everyone I guess the

00:00:17,869 --> 00:00:23,270
speech in the other room just ended and

00:00:20,900 --> 00:00:24,920
thank you all for joining us even though

00:00:23,270 --> 00:00:28,610
it's really sunny outside today in

00:00:24,920 --> 00:00:31,119
Gothenburg so yeah we might cut this

00:00:28,610 --> 00:00:33,440
talk a bit short no I'm just kidding

00:00:31,119 --> 00:00:37,130
we're going to use a full hour you're

00:00:33,440 --> 00:00:39,530
gonna have to be here for so today I'm

00:00:37,130 --> 00:00:41,510
gonna talk to you about the Yocto

00:00:39,530 --> 00:00:43,850
project and what is my experience with

00:00:41,510 --> 00:00:46,309
it and why actually going to like it

00:00:43,850 --> 00:00:48,140
this much so we're gonna talk about a

00:00:46,309 --> 00:00:51,410
little bit of non-existence essentially

00:00:48,140 --> 00:00:55,250
with the Yocto project so a little bit

00:00:51,410 --> 00:00:57,260
about me my name is I come from Croatia

00:00:55,250 --> 00:00:59,440
I've been working with the metabolomics

00:00:57,260 --> 00:01:01,730
for like eight years now proximately

00:00:59,440 --> 00:01:05,390
working for a company called books of

00:01:01,730 --> 00:01:07,670
here in Gothenburg I'm also a be an open

00:01:05,390 --> 00:01:10,790
source project I hope to base and put a

00:01:07,670 --> 00:01:19,280
platform that we're just spitting off a

00:01:10,790 --> 00:01:21,710
bit as well and also consumption that's

00:01:19,280 --> 00:01:23,689
a little bit about me then I have a few

00:01:21,710 --> 00:01:26,930
questions for the crowd that stay here

00:01:23,689 --> 00:01:28,729
even though with some outside so how

00:01:26,930 --> 00:01:30,770
many of you here have built their own

00:01:28,729 --> 00:01:32,899
and metabolomics image can you raise

00:01:30,770 --> 00:01:35,119
your hands oh that's what I'm saying

00:01:32,899 --> 00:01:38,659
like 60% of the people here that's what

00:01:35,119 --> 00:01:43,430
I see and how many of you here have used

00:01:38,659 --> 00:01:45,079
the project like almost the same people

00:01:43,430 --> 00:01:46,670
so that means there is a small portion

00:01:45,079 --> 00:01:50,539
that people who have been building

00:01:46,670 --> 00:01:52,159
appendix images but actually without the

00:01:50,539 --> 00:01:56,659
active project so we might try to

00:01:52,159 --> 00:01:58,549
converge now so I guess now is the time

00:01:56,659 --> 00:01:59,450
to start the presentation and I heard

00:01:58,549 --> 00:02:03,380
the result of

00:01:59,450 --> 00:02:05,390
here were fond of system P so I guess

00:02:03,380 --> 00:02:09,830
it's time to actually start the

00:02:05,390 --> 00:02:11,630
presentation so like I mentioned before

00:02:09,830 --> 00:02:14,060
the topic of this talk is going to be

00:02:11,630 --> 00:02:15,860
building a better life existence so what

00:02:14,060 --> 00:02:17,930
are the main goals here actually we want

00:02:15,860 --> 00:02:20,090
to have like a custom and better live

00:02:17,930 --> 00:02:22,250
exhibition but now I'm going to compile

00:02:20,090 --> 00:02:24,410
our own applications and if you don't

00:02:22,250 --> 00:02:26,330
want that image as well though

00:02:24,410 --> 00:02:28,970
supplications not necessarily don't

00:02:26,330 --> 00:02:30,470
because sample systems don't do this we

00:02:28,970 --> 00:02:32,660
want to create the integration points

00:02:30,470 --> 00:02:34,610
for custom software meaning that if you

00:02:32,660 --> 00:02:37,040
develop a base platform you want to have

00:02:34,610 --> 00:02:38,510
a lot of system that allows us to have

00:02:37,040 --> 00:02:40,850
the points where other people can

00:02:38,510 --> 00:02:43,340
develop against this metabolic system

00:02:40,850 --> 00:02:46,040
between episodes we also want to be able

00:02:43,340 --> 00:02:48,500
to test out the miners and check the

00:02:46,040 --> 00:02:50,989
ecosystem compatibility the last point

00:02:48,500 --> 00:02:52,640
is a career a good open source troopers

00:02:50,989 --> 00:02:54,760
which since we're here at this

00:02:52,640 --> 00:02:59,780
conference I guess everybody is so

00:02:54,760 --> 00:03:01,880
that's nice to see so basically which

00:02:59,780 --> 00:03:03,739
have been on Linux build systems you

00:03:01,880 --> 00:03:06,049
know from before these are kind of like

00:03:03,739 --> 00:03:08,540
the ones that I want to highlight

00:03:06,049 --> 00:03:11,090
because I have experienced what would

00:03:08,540 --> 00:03:12,590
this was from before so I guess you

00:03:11,090 --> 00:03:16,010
heard before about the build routes open

00:03:12,590 --> 00:03:18,650
wrt PKK's this and of course the other

00:03:16,010 --> 00:03:21,380
project and open a minute all the limits

00:03:18,650 --> 00:03:24,230
are quite different but also quite

00:03:21,380 --> 00:03:26,120
similar in their own way and basically

00:03:24,230 --> 00:03:28,340
how my path with the better Linux

00:03:26,120 --> 00:03:31,430
systems was actually building then it

00:03:28,340 --> 00:03:34,100
went like this so I first started with

00:03:31,430 --> 00:03:35,329
the image to it which is essentially

00:03:34,100 --> 00:03:37,579
about the build system but it's the

00:03:35,329 --> 00:03:39,440
distribution and I hope that my

00:03:37,579 --> 00:03:43,010
pronunciation was good even though this

00:03:39,440 --> 00:03:45,109
is a even though this is a Swedish name

00:03:43,010 --> 00:03:48,170
and I'm living here for two years so

00:03:45,109 --> 00:03:50,650
pardon me everyone and later on

00:03:48,170 --> 00:03:53,630
basically angstrom is just the

00:03:50,650 --> 00:03:55,430
distribution so it's just a people

00:03:53,630 --> 00:03:58,670
binary that you flash

00:03:55,430 --> 00:04:00,349
targets later on I switch to pollute

00:03:58,670 --> 00:04:04,010
because that actually enabled me to

00:04:00,349 --> 00:04:05,959
build my own custom and distribution and

00:04:04,010 --> 00:04:08,150
what was with a nice little booth that

00:04:05,959 --> 00:04:10,340
leverages the technologies that I was

00:04:08,150 --> 00:04:12,950
aware before for disabil system meaning

00:04:10,340 --> 00:04:16,509
make and k perfect so it was quite easy

00:04:12,950 --> 00:04:19,699
to get to know it and do things with it

00:04:16,509 --> 00:04:22,850
later I switched to P takes this because

00:04:19,699 --> 00:04:24,949
it was or in my opinion it was kind of

00:04:22,850 --> 00:04:26,479
constrained but I use it back in the day

00:04:24,949 --> 00:04:29,870
so right now I have a lot of knowledge

00:04:26,479 --> 00:04:31,940
about it so I wanted to see how he

00:04:29,870 --> 00:04:33,889
thinks this compares left and then I

00:04:31,940 --> 00:04:36,770
switched to Peking sness which is

00:04:33,889 --> 00:04:40,160
actually was a really nice experience

00:04:36,770 --> 00:04:41,930
but then when I moved here to speak I

00:04:40,160 --> 00:04:45,520
started working with the of the project

00:04:41,930 --> 00:04:48,260
which was approximately two years ago so

00:04:45,520 --> 00:04:50,630
basically my background is in the doctor

00:04:48,260 --> 00:04:52,639
only two years now and I'm going to try

00:04:50,630 --> 00:04:55,759
to introduce you with the points while I

00:04:52,639 --> 00:04:59,389
learn to love it as maybe sometimes when

00:04:55,759 --> 00:05:02,570
comparing its to the two buildings this

00:04:59,389 --> 00:05:05,630
but also highlighting some points about

00:05:02,570 --> 00:05:07,910
the why I really came to understand why

00:05:05,630 --> 00:05:13,250
a lot people why would use it and why

00:05:07,910 --> 00:05:15,620
see adoption so big so what is the other

00:05:13,250 --> 00:05:17,180
project I guess the good thing to

00:05:15,620 --> 00:05:20,750
mention here is that it's a

00:05:17,180 --> 00:05:23,210
collaboration project basically its main

00:05:20,750 --> 00:05:25,639
goal is always to create the best system

00:05:23,210 --> 00:05:28,789
for a better products and a custom one

00:05:25,639 --> 00:05:30,169
and the good point here is evolve its we

00:05:28,789 --> 00:05:31,729
want to do it that regardless of the

00:05:30,169 --> 00:05:35,210
heart of architecture which pretty much

00:05:31,729 --> 00:05:38,690
is always the case we're talking about

00:05:35,210 --> 00:05:40,430
the cooperation projects we want to

00:05:38,690 --> 00:05:42,320
highlight here that it has its core

00:05:40,430 --> 00:05:44,840
building blocks and one of those is open

00:05:42,320 --> 00:05:47,659
a Bennett core essentially open ability

00:05:44,840 --> 00:05:50,240
was a analytics framework that was

00:05:47,659 --> 00:05:53,000
started off on its own later on the

00:05:50,240 --> 00:05:55,690
octave project and the wings foundation

00:05:53,000 --> 00:05:57,300
founded to open a bit mark model of

00:05:55,690 --> 00:05:59,940
cooperating

00:05:57,300 --> 00:06:03,420
developing was not any more suitable

00:05:59,940 --> 00:06:05,940
they adapted the core part and build its

00:06:03,420 --> 00:06:08,490
other children all the other project the

00:06:05,940 --> 00:06:10,740
other core parts is a bit big which is

00:06:08,490 --> 00:06:14,550
essentially the parser and interpreter

00:06:10,740 --> 00:06:17,760
that manifested the build and pokey is

00:06:14,550 --> 00:06:19,290
the reference platform actually for

00:06:17,760 --> 00:06:20,910
Gotham so every single time I started

00:06:19,290 --> 00:06:24,630
after me will start with the pokey

00:06:20,910 --> 00:06:27,330
distribution which is quite nice so to

00:06:24,630 --> 00:06:29,760
get a more into detail that balance that

00:06:27,330 --> 00:06:31,920
was building box so what is open ability

00:06:29,760 --> 00:06:34,890
core like I said before it evolved from

00:06:31,920 --> 00:06:36,330
open embedded in collaboration doctor

00:06:34,890 --> 00:06:38,370
and essentially like now it's a

00:06:36,330 --> 00:06:41,150
collaboration of components shared

00:06:38,370 --> 00:06:43,530
between open Avella based systems and

00:06:41,150 --> 00:06:46,500
when we're talking about components here

00:06:43,530 --> 00:06:48,780
those are layers recipes and classes

00:06:46,500 --> 00:06:50,850
meaning that we're talking about the

00:06:48,780 --> 00:06:53,270
software components and how they're

00:06:50,850 --> 00:06:56,610
bundled and illogical thoughts together

00:06:53,270 --> 00:06:58,800
so the biggest part of how we define

00:06:56,610 --> 00:07:01,440
like a software component inside of the

00:06:58,800 --> 00:07:04,620
optical system or as an artifact and

00:07:01,440 --> 00:07:06,420
openembedded framework is the recipe as

00:07:04,620 --> 00:07:08,910
you might see there's an analogy for

00:07:06,420 --> 00:07:12,750
cooking it's a baby then we have recipes

00:07:08,910 --> 00:07:17,190
and some there is a call so baker point

00:07:12,750 --> 00:07:18,780
as well as silently it big so you know

00:07:17,190 --> 00:07:21,030
the recipe is essentially like a

00:07:18,780 --> 00:07:23,550
metadata file comparable to what you

00:07:21,030 --> 00:07:25,800
would have in in build route like a

00:07:23,550 --> 00:07:28,560
mikvah and it's also describes the

00:07:25,800 --> 00:07:30,870
components dependencies deploy steps and

00:07:28,560 --> 00:07:32,760
so on the main difference here is with

00:07:30,870 --> 00:07:35,220
ethics this bill truth is that it has

00:07:32,760 --> 00:07:37,470
its own specific syntax so basically the

00:07:35,220 --> 00:07:39,450
first time I looked at it it was a bit

00:07:37,470 --> 00:07:41,640
puzzling it introduced a lot of new

00:07:39,450 --> 00:07:44,340
things that I did not know actually not

00:07:41,640 --> 00:07:46,159
to publish ok I hope that the

00:07:44,340 --> 00:07:48,819
visibility's were nice and even

00:07:46,159 --> 00:07:51,229
what's wrong with to look at it

00:07:48,819 --> 00:07:53,029
basically as you might see there is a

00:07:51,229 --> 00:07:55,669
lot of information that you need to fill

00:07:53,029 --> 00:07:58,699
to create your own recipe essentially I

00:07:55,669 --> 00:08:00,289
divide it into three parts the first

00:07:58,699 --> 00:08:03,349
part being the component information

00:08:00,289 --> 00:08:04,879
which is basically just metadata for

00:08:03,349 --> 00:08:08,569
other people to understand what you're

00:08:04,879 --> 00:08:11,029
actually writing here and also license

00:08:08,569 --> 00:08:13,159
information and revision technique if

00:08:11,029 --> 00:08:14,989
you want to do that so this part you

00:08:13,159 --> 00:08:16,969
could be populated what now even without

00:08:14,989 --> 00:08:18,199
being acquainted with the octal project

00:08:16,969 --> 00:08:19,669
because it's something that's quite

00:08:18,199 --> 00:08:21,709
generic privacy

00:08:19,669 --> 00:08:23,719
the second part is the source

00:08:21,709 --> 00:08:26,599
information where you essentially put

00:08:23,719 --> 00:08:28,759
how to fetch the sources and which

00:08:26,599 --> 00:08:31,519
division or that source to use if it's

00:08:28,759 --> 00:08:33,589
applicable for this instance I'm using a

00:08:31,519 --> 00:08:38,810
template library project which is

00:08:33,589 --> 00:08:40,579
essentially a pair a pair c c++ library

00:08:38,810 --> 00:08:44,779
that is used to exhibit how to actually

00:08:40,579 --> 00:08:46,189
debate things with Yocto then the last

00:08:44,779 --> 00:08:48,380
part the third part the building

00:08:46,189 --> 00:08:50,000
deployed structures that is actually

00:08:48,380 --> 00:08:51,980
where to spent the most time learning

00:08:50,000 --> 00:08:53,500
new things and trying to understand how

00:08:51,980 --> 00:08:55,490
it actually works

00:08:53,500 --> 00:08:57,560
coming back to build ruled in the big

00:08:55,490 --> 00:08:59,060
files it's much simpler because over

00:08:57,560 --> 00:09:00,259
there use of this technology at least

00:08:59,060 --> 00:09:02,240
the majority of the people who've been

00:09:00,259 --> 00:09:03,709
working with open source when you waited

00:09:02,240 --> 00:09:05,750
for the first time at the altar recipe

00:09:03,709 --> 00:09:07,610
all of these variables are really

00:09:05,750 --> 00:09:09,680
perplexing and I'm not going to go into

00:09:07,610 --> 00:09:11,269
detail what they really mean but the

00:09:09,680 --> 00:09:13,699
nice thing is here is that as you might

00:09:11,269 --> 00:09:16,069
see there is no instructions actually

00:09:13,699 --> 00:09:19,279
saying how to build it per se but

00:09:16,069 --> 00:09:21,470
there's an inherit thing that we're

00:09:19,279 --> 00:09:23,180
gonna inherit seaming and if it's a

00:09:21,470 --> 00:09:25,699
similar project it's going to be as easy

00:09:23,180 --> 00:09:28,399
as that meaning that if you can run

00:09:25,699 --> 00:09:31,819
Semenuk and actually build it that way

00:09:28,399 --> 00:09:33,860
and doctors make it's gonna happen so

00:09:31,819 --> 00:09:35,899
that's not nice so you don't need to

00:09:33,860 --> 00:09:38,779
define a lot of things on your own so

00:09:35,899 --> 00:09:40,189
basically to summarize from this the

00:09:38,779 --> 00:09:43,150
recipe is the part where you actually

00:09:40,189 --> 00:09:46,839
find how to build a single component and

00:09:43,150 --> 00:09:48,490
into the system in some the opening bid

00:09:46,839 --> 00:09:50,380
court which is like a cellphone to make

00:09:48,490 --> 00:09:51,910
you blue box there are recipes that are

00:09:50,380 --> 00:09:55,060
commonly used to build event the

00:09:51,910 --> 00:09:58,330
assistants like also busy box and also

00:09:55,060 --> 00:10:02,050
classes and recipes for civic and auto

00:09:58,330 --> 00:10:03,490
call and other actually both systems so

00:10:02,050 --> 00:10:05,110
there's going to be one of the examples

00:10:03,490 --> 00:10:09,700
what you can actually find it open a bit

00:10:05,110 --> 00:10:11,950
at the core then maybe since y'all talk

00:10:09,700 --> 00:10:14,260
has this layered approach we're trying

00:10:11,950 --> 00:10:16,660
to collect everything like logically in

00:10:14,260 --> 00:10:18,730
a single place meaning that certain

00:10:16,660 --> 00:10:20,410
opponents has a logical common purpose

00:10:18,730 --> 00:10:23,980
then we try to include it in a single

00:10:20,410 --> 00:10:25,960
layer and basically the thing with the

00:10:23,980 --> 00:10:28,420
layers is that you can blue layer but

00:10:25,960 --> 00:10:30,370
you don't have to pull everything what's

00:10:28,420 --> 00:10:32,080
inside it you just pull the parts that

00:10:30,370 --> 00:10:35,170
you want to but I will explain this

00:10:32,080 --> 00:10:37,480
later on and everything that is a layer

00:10:35,170 --> 00:10:40,410
essentially has a network graphics so

00:10:37,480 --> 00:10:44,170
with the octo everything's really meta

00:10:40,410 --> 00:10:46,570
and the examples of certain layers are

00:10:44,170 --> 00:10:48,459
like the meta cute fiber where you'd

00:10:46,570 --> 00:10:51,940
expect to find all the food components

00:10:48,459 --> 00:10:53,770
so family experimented and having

00:10:51,940 --> 00:10:55,690
recipes flying all around you have one

00:10:53,770 --> 00:10:58,120
metal there that their compasses the

00:10:55,690 --> 00:10:59,830
whole food fiber components and then

00:10:58,120 --> 00:11:02,560
depending on the value including

00:10:59,830 --> 00:11:04,000
material or excluded the same for metal

00:11:02,560 --> 00:11:07,360
networking which is a different example

00:11:04,000 --> 00:11:10,540
because it's inside of metal and is

00:11:07,360 --> 00:11:14,080
essentially networking and dev tools and

00:11:10,540 --> 00:11:16,390
also network managers and so on

00:11:14,080 --> 00:11:20,020
for instance we met Alito is an example

00:11:16,390 --> 00:11:22,089
of a metal layer that is a skin layer so

00:11:20,020 --> 00:11:26,320
it's essentially made for certain

00:11:22,089 --> 00:11:28,180
hardware architecture then basically you

00:11:26,320 --> 00:11:30,070
also have a motive at a project foo

00:11:28,180 --> 00:11:32,170
which is essentially what you do you

00:11:30,070 --> 00:11:32,840
would create your own project in your

00:11:32,170 --> 00:11:35,750
own servers

00:11:32,840 --> 00:11:38,120
you looted in your own in your own metal

00:11:35,750 --> 00:11:42,170
there so that would be kind of similar

00:11:38,120 --> 00:11:44,480
to that then we go back to be baked

00:11:42,170 --> 00:11:46,430
which I said before is the build engine

00:11:44,480 --> 00:11:47,870
which is why responsible for parsing and

00:11:46,430 --> 00:11:49,340
interpreting the metadata files

00:11:47,870 --> 00:11:52,130
essentially the recipes are the

00:11:49,340 --> 00:11:53,660
configuration in the end it's a fast

00:11:52,130 --> 00:11:56,950
schedule because it creates the

00:11:53,660 --> 00:12:00,020
dependencies and it creates a task list

00:11:56,950 --> 00:12:01,910
depending on the image meaning which is

00:12:00,020 --> 00:12:04,610
such a list of packages of list of

00:12:01,910 --> 00:12:07,250
recipes and the configurations and it

00:12:04,610 --> 00:12:10,400
creates an order to pass risk after that

00:12:07,250 --> 00:12:13,700
that needs to be executed so that's also

00:12:10,400 --> 00:12:15,470
quite nice with the octo you can easily

00:12:13,700 --> 00:12:17,810
picture the dependency chain afterwards

00:12:15,470 --> 00:12:22,220
and paralyze the build as much as

00:12:17,810 --> 00:12:25,010
possible so then we going back to pokey

00:12:22,220 --> 00:12:27,080
is that we mention before the reference

00:12:25,010 --> 00:12:28,760
implementation and a collection of two

00:12:27,080 --> 00:12:31,040
we configuration is to create a new

00:12:28,760 --> 00:12:33,290
distribution so when they will start

00:12:31,040 --> 00:12:36,530
first doctor project is always referred

00:12:33,290 --> 00:12:39,170
to bulky and try to make a spinoff on it

00:12:36,530 --> 00:12:40,880
and build your layer and your software

00:12:39,170 --> 00:12:42,740
components and integrate it against it

00:12:40,880 --> 00:12:47,350
because that's probably the best way to

00:12:42,740 --> 00:12:47,350
go set up getting too deep in the water

00:12:47,920 --> 00:12:55,850
all right and then to bundle it all

00:12:51,290 --> 00:12:58,340
together in one picture essentially we

00:12:55,850 --> 00:13:00,440
have the park like I mentioned before we

00:12:58,340 --> 00:13:03,590
have the apps resources on the top that

00:13:00,440 --> 00:13:06,290
we're trying to fetch those instructions

00:13:03,590 --> 00:13:08,030
are found in the meta funds that are

00:13:06,290 --> 00:13:10,370
essentially recipes and configuration

00:13:08,030 --> 00:13:14,150
files and once all this is bundled

00:13:10,370 --> 00:13:16,790
together the bitbake essentially creates

00:13:14,150 --> 00:13:19,640
the wild blue part which is the build

00:13:16,790 --> 00:13:20,090
system so with fetching sources patches

00:13:19,640 --> 00:13:22,430
them

00:13:20,090 --> 00:13:25,100
configures them and also possible steps

00:13:22,430 --> 00:13:27,080
creates the analysis and expensive

00:13:25,100 --> 00:13:29,150
packages and then essentially creates it

00:13:27,080 --> 00:13:31,460
creates a package stream so that's also

00:13:29,150 --> 00:13:33,320
one difference from the

00:13:31,460 --> 00:13:34,760
from the roots that essentially will do

00:13:33,320 --> 00:13:36,260
the substrate the back stream it

00:13:34,760 --> 00:13:38,390
essentially creates the hole with our

00:13:36,260 --> 00:13:40,339
system immediately while Yocto

00:13:38,390 --> 00:13:42,860
essentially it creates a packed stream

00:13:40,339 --> 00:13:45,800
which is then used to create the image

00:13:42,860 --> 00:13:48,529
and the SDK as well so basically you

00:13:45,800 --> 00:13:51,320
need the host tooling to which is not to

00:13:48,529 --> 00:13:57,290
be used to actually work within a target

00:13:51,320 --> 00:14:00,290
later on so all this is fine and dandy

00:13:57,290 --> 00:14:01,790
and you probably you didn't nobly of the

00:14:00,290 --> 00:14:03,920
project I guess you already knew this

00:14:01,790 --> 00:14:06,709
before and a lot of you that are new to

00:14:03,920 --> 00:14:08,029
the author project basically the things

00:14:06,709 --> 00:14:10,310
that I said right now are really

00:14:08,029 --> 00:14:12,080
confusing because the opto is really

00:14:10,310 --> 00:14:14,510
difficult to explain and this is about a

00:14:12,080 --> 00:14:17,120
small it's really powerful to to build a

00:14:14,510 --> 00:14:19,190
bit of other systems but it's really

00:14:17,120 --> 00:14:21,170
hard to explain especially ours so I'm

00:14:19,190 --> 00:14:24,140
not gonna try to do that and this one

00:14:21,170 --> 00:14:26,420
had come here to say like okay why why

00:14:24,140 --> 00:14:27,890
do I think it's a cool thing why do I

00:14:26,420 --> 00:14:29,510
want to use it off the project

00:14:27,890 --> 00:14:31,130
as compared to the other solutions baby

00:14:29,510 --> 00:14:33,920
and what are the positive that

00:14:31,130 --> 00:14:35,450
highlights from my personal experience

00:14:33,920 --> 00:14:39,170
and from the projects that I was

00:14:35,450 --> 00:14:41,470
involved in so basically coming back to

00:14:39,170 --> 00:14:44,240
the meta layers and the layered approach

00:14:41,470 --> 00:14:46,010
basically what we try to achieve is a

00:14:44,240 --> 00:14:48,500
logical separation and aggregation of

00:14:46,010 --> 00:14:50,690
software components and also like try to

00:14:48,500 --> 00:14:51,950
be more agnostic to the top layers as

00:14:50,690 --> 00:14:53,900
well as the bottom layers when you're

00:14:51,950 --> 00:14:55,700
developing meaning if you're creating a

00:14:53,900 --> 00:14:57,830
middleware layer you want to make it

00:14:55,700 --> 00:15:01,130
compatible with pretty much any hardware

00:14:57,830 --> 00:15:03,080
and also any users that are gonna be on

00:15:01,130 --> 00:15:05,180
the top layer from you and also that

00:15:03,080 --> 00:15:07,790
means like maintainability and naturally

00:15:05,180 --> 00:15:10,970
visibility of your components and other

00:15:07,790 --> 00:15:14,020
open-source components so to paint a

00:15:10,970 --> 00:15:16,520
picture again about their approach

00:15:14,020 --> 00:15:18,440
basically in the bottom there's always

00:15:16,520 --> 00:15:20,420
the open a better pair like I mentioned

00:15:18,440 --> 00:15:22,850
the base components that you use to

00:15:20,420 --> 00:15:25,339
build a method in existence then on top

00:15:22,850 --> 00:15:27,800
of it you have the October basically

00:15:25,339 --> 00:15:29,860
that this is here because you use for

00:15:27,800 --> 00:15:32,140
the

00:15:29,860 --> 00:15:34,870
actually to work then we have the

00:15:32,140 --> 00:15:36,750
hardware i spended here like metal in

00:15:34,870 --> 00:15:40,810
tow for instance what it could be also

00:15:36,750 --> 00:15:42,670
another platform or nvidia zone which is

00:15:40,810 --> 00:15:44,860
essentially our then we have the UI

00:15:42,670 --> 00:15:46,750
layer which can indicate acute for

00:15:44,860 --> 00:15:49,060
instance then we have the commercial

00:15:46,750 --> 00:15:51,700
layer and then we have the project layer

00:15:49,060 --> 00:15:56,170
on top of it and the idea is here that

00:15:51,700 --> 00:15:58,870
as you might see as a hardware vendor

00:15:56,170 --> 00:16:02,190
you want to have your hardware adopted

00:15:58,870 --> 00:16:04,450
with all of these projects about you

00:16:02,190 --> 00:16:06,339
essentially you try to make your metal

00:16:04,450 --> 00:16:08,649
layer in a way that it doesn't block

00:16:06,339 --> 00:16:10,209
others from working on top of that and

00:16:08,649 --> 00:16:12,010
as well as you're working on your

00:16:10,209 --> 00:16:13,420
product layer you want to make it that

00:16:12,010 --> 00:16:14,769
way that the hardware layer is

00:16:13,420 --> 00:16:17,320
interchangeable you want to be agnostic

00:16:14,769 --> 00:16:19,089
to it naturally the projects there are

00:16:17,320 --> 00:16:21,310
sometimes might depend on the UI layer

00:16:19,089 --> 00:16:24,160
or the commercial there but in the end

00:16:21,310 --> 00:16:26,100
you want to make it in a way that's that

00:16:24,160 --> 00:16:29,740
certain software is reusable and

00:16:26,100 --> 00:16:31,660
interchangeable so that's kind of a the

00:16:29,740 --> 00:16:34,810
main idea behind a layered approach is

00:16:31,660 --> 00:16:37,209
the reusability and moving moving from

00:16:34,810 --> 00:16:40,029
one software stack to another or from

00:16:37,209 --> 00:16:44,350
one hopper to another which is enabled

00:16:40,029 --> 00:16:46,390
by this kind of approach that I want to

00:16:44,350 --> 00:16:49,300
say a few things about development and

00:16:46,390 --> 00:16:51,519
debugging when I was visiting one of the

00:16:49,300 --> 00:16:53,290
conference's about better movies

00:16:51,519 --> 00:16:55,750
development there was a really small

00:16:53,290 --> 00:16:58,779
room allocated for like they will

00:16:55,750 --> 00:17:01,329
actually debug tools and the room was

00:16:58,779 --> 00:17:03,490
complete before basically because anyone

00:17:01,329 --> 00:17:04,900
is really interested how actually people

00:17:03,490 --> 00:17:07,809
inside of Linux what are the tools that

00:17:04,900 --> 00:17:11,079
we can use it so on do you think about

00:17:07,809 --> 00:17:12,490
doctor is that tries to aggregate and

00:17:11,079 --> 00:17:14,260
naturally you have at least all these

00:17:12,490 --> 00:17:16,059
open source tools in what place you can

00:17:14,260 --> 00:17:18,160
really easily find them and you can

00:17:16,059 --> 00:17:19,669
really easily use them but it's also

00:17:18,160 --> 00:17:22,350
really nice

00:17:19,669 --> 00:17:26,039
laughter we just a few variables that

00:17:22,350 --> 00:17:28,649
you can use to tweak your essentially it

00:17:26,039 --> 00:17:30,330
image the whole image or additional

00:17:28,649 --> 00:17:33,570
artifacts that you can use together with

00:17:30,330 --> 00:17:38,899
your image and those are can be found in

00:17:33,570 --> 00:17:42,659
the image features for essentially this

00:17:38,899 --> 00:17:44,519
this word label this is something that

00:17:42,659 --> 00:17:45,720
you will set in your configuration in

00:17:44,519 --> 00:17:49,649
there perfectly with your actual

00:17:45,720 --> 00:17:52,110
distribution and here is an example like

00:17:49,649 --> 00:17:54,750
what kind of image features you can have

00:17:52,110 --> 00:17:57,120
so basically like I mentioned before if

00:17:54,750 --> 00:17:58,860
we look at to this big bug it's quite

00:17:57,120 --> 00:18:00,090
nice because it would add all the

00:17:58,860 --> 00:18:01,860
debugging tools that you pretty much

00:18:00,090 --> 00:18:04,200
expect to have from a Linux system it

00:18:01,860 --> 00:18:07,649
would add like versatility and esterase

00:18:04,200 --> 00:18:12,509
if you have tooth profile do the profile

00:18:07,649 --> 00:18:15,629
tools like alright perfect so on even

00:18:12,509 --> 00:18:18,990
you can include deeper packages on the

00:18:15,629 --> 00:18:21,000
target itself if you want to but that

00:18:18,990 --> 00:18:23,100
might become a scary because there's not

00:18:21,000 --> 00:18:24,509
enough space to have debug symbols for

00:18:23,100 --> 00:18:30,360
pretty much everything under target

00:18:24,509 --> 00:18:33,059
right so because of that that

00:18:30,360 --> 00:18:35,580
essentially you want to create you want

00:18:33,059 --> 00:18:37,799
to have debug symbols on her a better

00:18:35,580 --> 00:18:40,169
target it's not feasible to panelist for

00:18:37,799 --> 00:18:42,299
every single package and sometimes you

00:18:40,169 --> 00:18:43,919
really need to go we need to inspect

00:18:42,299 --> 00:18:46,500
what has actually gone wrong with your

00:18:43,919 --> 00:18:49,230
system so from my experience we had a

00:18:46,500 --> 00:18:51,360
story when we were developing system

00:18:49,230 --> 00:18:57,809
that essentially used acute photons we

00:18:51,360 --> 00:19:01,019
were developing application and we had

00:18:57,809 --> 00:19:03,299
intermittent crashes and we had no clue

00:19:01,019 --> 00:19:05,610
what was going on and this

00:19:03,299 --> 00:19:07,710
target essentially we started to pull on

00:19:05,610 --> 00:19:09,809
one by one people packages there and

00:19:07,710 --> 00:19:11,879
essentially looking at the trace we

00:19:09,809 --> 00:19:14,129
could easily see okay this is where the

00:19:11,879 --> 00:19:16,230
trace stops to be readable because it's

00:19:14,129 --> 00:19:17,820
not in this component anymore and then

00:19:16,230 --> 00:19:20,129
we start digging deeper and deeper the

00:19:17,820 --> 00:19:22,470
deeper I just it's it didn't become

00:19:20,129 --> 00:19:25,049
feasible anymore because the system ran

00:19:22,470 --> 00:19:27,059
out of space we couldn't identify where

00:19:25,049 --> 00:19:29,129
it actually stack would lead us and it

00:19:27,059 --> 00:19:30,090
became really hard to understand what

00:19:29,129 --> 00:19:33,119
was happening there

00:19:30,090 --> 00:19:34,440
thankfully the smart people who develop

00:19:33,119 --> 00:19:35,519
the after project they have a really

00:19:34,440 --> 00:19:37,739
nice solution for this

00:19:35,519 --> 00:19:40,619
so essentially you can create bitmap

00:19:37,739 --> 00:19:42,720
file system that is remote that is not

00:19:40,619 --> 00:19:45,299
on the target itself but you create the

00:19:42,720 --> 00:19:48,149
target image and on your build machine

00:19:45,299 --> 00:19:50,820
you have the remote assistant with all

00:19:48,149 --> 00:19:53,100
the debug symbols and basically it's

00:19:50,820 --> 00:19:55,649
easy just as easy as this

00:19:53,100 --> 00:19:58,049
you have this few lines and basically

00:19:55,649 --> 00:20:00,450
you're able to read through the whole

00:19:58,049 --> 00:20:02,279
stack pretty much which is which is

00:20:00,450 --> 00:20:05,940
super valuable in the case that we had

00:20:02,279 --> 00:20:09,090
and basically you will then use gdb

00:20:05,940 --> 00:20:11,580
naturally connect your host to digital

00:20:09,090 --> 00:20:13,909
target points to the debug file system

00:20:11,580 --> 00:20:15,779
that's the octa project produced and

00:20:13,909 --> 00:20:17,359
essentially then you would have the full

00:20:15,779 --> 00:20:20,129
trace and we're able to actually

00:20:17,359 --> 00:20:23,100
introspect what happened they also said

00:20:20,129 --> 00:20:25,169
to the code and so on and let's say this

00:20:23,100 --> 00:20:27,359
a lot of time and we actually found like

00:20:25,169 --> 00:20:30,179
a really people bug inside of the cubes

00:20:27,359 --> 00:20:32,639
actually kills quickly for JavaScript

00:20:30,179 --> 00:20:34,919
engine which was something that we will

00:20:32,639 --> 00:20:35,879
never actually got there if you see that

00:20:34,919 --> 00:20:37,649
there's a better target

00:20:35,879 --> 00:20:39,539
it's intermittent crashes nobody knows

00:20:37,649 --> 00:20:42,960
when it happens but actually be losing

00:20:39,539 --> 00:20:50,460
this approach it was easy so that's very

00:20:42,960 --> 00:20:54,989
nice then something about testing yoga

00:20:50,460 --> 00:20:58,739
has the concept of test images so they

00:20:54,989 --> 00:20:59,530
can be ones like alternate eyes or they

00:20:58,739 --> 00:21:02,060
can be

00:20:59,530 --> 00:21:04,520
manually and that can also be run under

00:21:02,060 --> 00:21:06,560
virtualized meeting of the queue or they

00:21:04,520 --> 00:21:08,510
can be rather than the real hardware and

00:21:06,560 --> 00:21:10,970
once again it's really just as easy as

00:21:08,510 --> 00:21:12,590
including this flight test image equals

00:21:10,970 --> 00:21:14,450
one

00:21:12,590 --> 00:21:16,340
what does this mean actually to have

00:21:14,450 --> 00:21:18,410
like a test image concept essentially

00:21:16,340 --> 00:21:20,240
you want to have something in your

00:21:18,410 --> 00:21:21,980
continuous integration pipeline that you

00:21:20,240 --> 00:21:24,340
want to test the sanity of our platform

00:21:21,980 --> 00:21:27,590
before you even start to analyzing

00:21:24,340 --> 00:21:29,060
crashes on certain parts that you're

00:21:27,590 --> 00:21:31,010
developing because it might mean that

00:21:29,060 --> 00:21:32,840
are changing the configuration they're

00:21:31,010 --> 00:21:34,970
actually acting the lower layers and

00:21:32,840 --> 00:21:38,570
something you're definitely the hardware

00:21:34,970 --> 00:21:41,420
and even let's say the message stop

00:21:38,570 --> 00:21:42,860
working or SSH stops working or they

00:21:41,420 --> 00:21:45,110
can't even begin to market because you

00:21:42,860 --> 00:21:48,110
brought an elephant down for instance so

00:21:45,110 --> 00:21:50,180
this is something that uses a suit to

00:21:48,110 --> 00:21:56,000
actually test the sanity of your target

00:21:50,180 --> 00:21:57,800
and also has a set of predefined unit

00:21:56,000 --> 00:21:59,480
tests but I could have mentioned for

00:21:57,800 --> 00:22:02,060
example table test I think they could

00:21:59,480 --> 00:22:03,530
baby the target basically forward real

00:22:02,060 --> 00:22:05,450
harder target there's a lot of

00:22:03,530 --> 00:22:07,250
instrumentation actually do you actually

00:22:05,450 --> 00:22:08,780
connected that song with the virtual

00:22:07,250 --> 00:22:10,490
Isis target this really quite

00:22:08,780 --> 00:22:12,230
straightforward because it's going to go

00:22:10,490 --> 00:22:15,800
the state machine where it baked is

00:22:12,230 --> 00:22:19,040
actually planning and executing this the

00:22:15,800 --> 00:22:21,560
test tasks basically like I mentioned

00:22:19,040 --> 00:22:23,390
before Pig SSH domestic and so on

00:22:21,560 --> 00:22:26,030
it also has the variable that eventually

00:22:23,390 --> 00:22:29,330
here the cold water so there's a lot of

00:22:26,030 --> 00:22:30,950
the source components it will include

00:22:29,330 --> 00:22:33,380
it's already have three different tests

00:22:30,950 --> 00:22:35,090
and by including this portable you will

00:22:33,380 --> 00:22:37,670
actually show that all of those tests

00:22:35,090 --> 00:22:39,320
that are applicable for your image

00:22:37,670 --> 00:22:42,470
embedded image are actually going to be

00:22:39,320 --> 00:22:43,760
rather which is quite nice because for

00:22:42,470 --> 00:22:45,470
regression testing like I mentioned

00:22:43,760 --> 00:22:46,910
before you would change something it

00:22:45,470 --> 00:22:48,800
will change a lot of other things in the

00:22:46,910 --> 00:22:50,660
stack and one of these auto tests

00:22:48,800 --> 00:22:51,490
actually one of those components will

00:22:50,660 --> 00:22:54,970
become broken

00:22:51,490 --> 00:22:58,450
as other changes and once again it is as

00:22:54,970 --> 00:23:00,309
easy as including one line and because

00:22:58,450 --> 00:23:03,340
the best is just a matter of following a

00:23:00,309 --> 00:23:06,040
pattern that is already easily found on

00:23:03,340 --> 00:23:07,660
other open-source components because

00:23:06,040 --> 00:23:10,450
everybody trusts be compliant with it

00:23:07,660 --> 00:23:12,370
and like if the the background has

00:23:10,450 --> 00:23:14,740
actually happened happening it's

00:23:12,370 --> 00:23:17,500
actually biting remove item actually

00:23:14,740 --> 00:23:20,980
script is a staging and executing like a

00:23:17,500 --> 00:23:22,540
test suite that is then developed with

00:23:20,980 --> 00:23:24,010
open source components so basically a

00:23:22,540 --> 00:23:26,980
component will develop it you need to

00:23:24,010 --> 00:23:30,840
have audacity file in this way and then

00:23:26,980 --> 00:23:30,840
you can easily complete independent here

00:23:32,340 --> 00:23:38,110
and what's really nice about like I said

00:23:36,490 --> 00:23:39,580
that the tests are available with the

00:23:38,110 --> 00:23:41,080
big big console because the testing is

00:23:39,580 --> 00:23:43,929
actually executed from the build system

00:23:41,080 --> 00:23:46,270
was actually mad on the virtualized or

00:23:43,929 --> 00:23:48,340
to real hardware so the best results are

00:23:46,270 --> 00:23:50,350
available to build a console which makes

00:23:48,340 --> 00:23:53,320
really nice and easy to integrate with

00:23:50,350 --> 00:23:54,670
the CI system so you can easily pass

00:23:53,320 --> 00:23:57,670
through long as you don't need to

00:23:54,670 --> 00:23:59,740
actually go to the logs manually on the

00:23:57,670 --> 00:24:02,440
hardware targets or on the actual time

00:23:59,740 --> 00:24:04,540
and then extract that see where did the

00:24:02,440 --> 00:24:06,580
actual when they get the metal color saw

00:24:04,540 --> 00:24:08,980
everything will be actually reported

00:24:06,580 --> 00:24:12,280
inside of the building a console which

00:24:08,980 --> 00:24:14,679
is for my experience I saw all of us

00:24:12,280 --> 00:24:17,440
homemade solutions that do this

00:24:14,679 --> 00:24:20,650
essentially they create remote Harbor

00:24:17,440 --> 00:24:23,230
they SSH into these tests the SSH again

00:24:20,650 --> 00:24:24,970
they copy those and so on and in New

00:24:23,230 --> 00:24:27,130
York though there is already it was a

00:24:24,970 --> 00:24:27,830
there was a need identified and they had

00:24:27,130 --> 00:24:29,570
already made

00:24:27,830 --> 00:24:31,250
they created a ready-made solution for

00:24:29,570 --> 00:24:32,960
it essentially and it's super easy I

00:24:31,250 --> 00:24:39,320
think a couple of ones essentially

00:24:32,960 --> 00:24:43,360
through configuration file but I want to

00:24:39,320 --> 00:24:46,010
mention something about lesson plans and

00:24:43,360 --> 00:24:47,990
basically this all of us here are quite

00:24:46,010 --> 00:24:52,669
interested because we're open source

00:24:47,990 --> 00:24:54,409
developers Center so the question is how

00:24:52,669 --> 00:24:55,730
to maintain compliance with various open

00:24:54,409 --> 00:24:58,549
source licenses during the progress

00:24:55,730 --> 00:25:00,200
lifecycle because we want to do our due

00:24:58,549 --> 00:25:02,419
diligence we want we will have to

00:25:00,200 --> 00:25:04,519
understand what is actually what kind of

00:25:02,419 --> 00:25:06,110
artifacts do we need to deliver with our

00:25:04,519 --> 00:25:07,580
while using open source

00:25:06,110 --> 00:25:09,740
what kind of artifacts we need to

00:25:07,580 --> 00:25:12,559
deliver and water applications of music

00:25:09,740 --> 00:25:15,340
certain software and essentially the

00:25:12,559 --> 00:25:18,470
other product comes with really nice

00:25:15,340 --> 00:25:21,019
features for that like coming back to

00:25:18,470 --> 00:25:23,929
the recipe file there is a mention of

00:25:21,019 --> 00:25:27,620
these variables like the license and the

00:25:23,929 --> 00:25:30,679
license file checks out so basically you

00:25:27,620 --> 00:25:32,419
would point to certain a certain

00:25:30,679 --> 00:25:35,240
software component that you want to

00:25:32,419 --> 00:25:37,370
build and during its lifetime the offer

00:25:35,240 --> 00:25:41,450
that component might decide to actually

00:25:37,370 --> 00:25:43,539
change the license which is like the

00:25:41,450 --> 00:25:47,120
sole owner he came to live and

00:25:43,539 --> 00:25:49,370
essentially what then happens is that

00:25:47,120 --> 00:25:51,080
you might be cleared the license and

00:25:49,370 --> 00:25:53,179
you're not aware of this change anymore

00:25:51,080 --> 00:25:54,769
and that might be tricky because at some

00:25:53,179 --> 00:25:56,720
points you might be prone to lessons

00:25:54,769 --> 00:25:58,039
from them which might not be nice at

00:25:56,720 --> 00:26:01,130
some point you might have to base

00:25:58,039 --> 00:26:03,289
overall thesis on so but that when you

00:26:01,130 --> 00:26:06,830
declare a license license variable and

00:26:03,289 --> 00:26:08,659
you define the file actual file and the

00:26:06,830 --> 00:26:11,240
checksum of that file so basically

00:26:08,659 --> 00:26:14,539
stepping up by religion or by version of

00:26:11,240 --> 00:26:16,730
the software component this will be

00:26:14,539 --> 00:26:19,340
reported in error this checksum is no

00:26:16,730 --> 00:26:21,500
longer valid and you have to revisit it

00:26:19,340 --> 00:26:24,150
and then you see okay this license

00:26:21,500 --> 00:26:26,640
change from being IBM to

00:26:24,150 --> 00:26:28,530
changed to be gplv3 and then you're like

00:26:26,640 --> 00:26:31,520
okay that's not something that I want

00:26:28,530 --> 00:26:33,810
really actually might be might not be

00:26:31,520 --> 00:26:36,660
but it's a really nice way to actually

00:26:33,810 --> 00:26:40,470
capture this as well as the license

00:26:36,660 --> 00:26:43,350
variable is also quite nice because

00:26:40,470 --> 00:26:46,040
later on we have like an aggregate of Oh

00:26:43,350 --> 00:26:48,210
actually the oh I had a dislike as well

00:26:46,040 --> 00:26:49,980
so this is kind of like a mental

00:26:48,210 --> 00:26:53,400
exercise about the cute revenge and

00:26:49,980 --> 00:26:55,230
license that sometimes the open-source

00:26:53,400 --> 00:26:57,600
licenses are easy straightforward like

00:26:55,230 --> 00:27:00,960
in the previous example which was MV MV

00:26:57,600 --> 00:27:03,840
too and then we have the example they

00:27:00,960 --> 00:27:07,500
keep a bunch of license so as you might

00:27:03,840 --> 00:27:10,620
see it's actually it's like a logical

00:27:07,500 --> 00:27:12,360
equation that you have to solve before

00:27:10,620 --> 00:27:13,590
you want to actually use the component

00:27:12,360 --> 00:27:17,700
that oh it's actually it comes with a

00:27:13,590 --> 00:27:19,710
blog post so even though sometimes the

00:27:17,700 --> 00:27:22,040
license fields should be nice and short

00:27:19,710 --> 00:27:24,630
and easy sometimes they're not so I

00:27:22,040 --> 00:27:26,610
don't want to encourage you to do

00:27:24,630 --> 00:27:28,050
something really bad but I say that

00:27:26,610 --> 00:27:30,270
every single time you see like

00:27:28,050 --> 00:27:33,270
especially this studying as much as

00:27:30,270 --> 00:27:35,370
possible because yeah sometimes it's not

00:27:33,270 --> 00:27:37,350
easy especially in this example where

00:27:35,370 --> 00:27:39,600
people are Belgian actually realize that

00:27:37,350 --> 00:27:42,000
water open-source components which are

00:27:39,600 --> 00:27:49,410
devices on their own way and basically

00:27:42,000 --> 00:27:52,980
that's why and essentially in the end by

00:27:49,410 --> 00:27:55,020
using the license or enables what at the

00:27:52,980 --> 00:27:56,160
end is like the Bill of Materials we

00:27:55,020 --> 00:27:58,350
need to provide as open-source

00:27:56,160 --> 00:28:01,350
developers most of the time it's the

00:27:58,350 --> 00:28:03,830
source code as well as the license text

00:28:01,350 --> 00:28:06,120
and the qualifications that we have done

00:28:03,830 --> 00:28:07,530
with the octal there is always a double

00:28:06,120 --> 00:28:09,120
directory in which you can introspect

00:28:07,530 --> 00:28:11,640
and look and all the components that you

00:28:09,120 --> 00:28:14,670
actually download it and use before

00:28:11,640 --> 00:28:16,590
modify them and basically can always

00:28:14,670 --> 00:28:18,780
shoot that but that's partly not working

00:28:16,590 --> 00:28:21,810
so you will not usually do that but you

00:28:18,780 --> 00:28:23,870
would create small scripts that is oh

00:28:21,810 --> 00:28:25,700
really

00:28:23,870 --> 00:28:29,059
two developers manual that will only

00:28:25,700 --> 00:28:30,890
extract the sources that are under

00:28:29,059 --> 00:28:33,140
certain license that tells you have to

00:28:30,890 --> 00:28:33,830
provide a source code as well when the

00:28:33,140 --> 00:28:36,170
license tax

00:28:33,830 --> 00:28:37,640
Yocto will aggregate the licenses the

00:28:36,170 --> 00:28:40,010
text on the licenses and it will provide

00:28:37,640 --> 00:28:42,950
you in a separate folder all this text

00:28:40,010 --> 00:28:45,320
pretty much so that way you already have

00:28:42,950 --> 00:28:47,990
it in one place and you can easily copy

00:28:45,320 --> 00:28:50,330
it and share it with your users and your

00:28:47,990 --> 00:28:53,360
customers are solvent when they've got

00:28:50,330 --> 00:28:55,340
some modifications that is also if your

00:28:53,360 --> 00:28:57,320
incoming patches or creating your own

00:28:55,340 --> 00:28:59,360
changes on your source you have to do

00:28:57,320 --> 00:29:00,980
this a bit more explicit with them so

00:28:59,360 --> 00:29:03,020
it's not as straightforward as just

00:29:00,980 --> 00:29:05,030
including the source code that this

00:29:03,020 --> 00:29:08,210
license or a certain version but it's

00:29:05,030 --> 00:29:11,000
still a developer's manual they easily

00:29:08,210 --> 00:29:13,070
explained how he also said that so

00:29:11,000 --> 00:29:15,790
basically trying to diffuse all the

00:29:13,070 --> 00:29:18,559
possible cases that we have here and

00:29:15,790 --> 00:29:21,440
there's also another nice feature well

00:29:18,559 --> 00:29:23,900
honestly I'm not sure if it's it's nice

00:29:21,440 --> 00:29:25,940
or not because as open-source developers

00:29:23,900 --> 00:29:28,130
we want to create everything in that way

00:29:25,940 --> 00:29:29,480
so we don't want to have certain

00:29:28,130 --> 00:29:31,220
licenses that we don't agree with

00:29:29,480 --> 00:29:33,650
especially when it's like open source

00:29:31,220 --> 00:29:36,500
licenses they have a variable that's

00:29:33,650 --> 00:29:39,140
called incompatible licenses where you

00:29:36,500 --> 00:29:40,700
can actually blacklist certain licenses

00:29:39,140 --> 00:29:42,679
that they're not that you don't want to

00:29:40,700 --> 00:29:45,800
use in the product for a certain reason

00:29:42,679 --> 00:29:47,390
and then afterwards if you do that

00:29:45,800 --> 00:29:49,250
naturally you have to manually remove

00:29:47,390 --> 00:29:51,290
the dependencies on or provide

00:29:49,250 --> 00:29:53,690
alternatives to the components that are

00:29:51,290 --> 00:29:55,280
actually required so just to paint a

00:29:53,690 --> 00:29:58,040
proper picture what does this actually

00:29:55,280 --> 00:29:59,330
happen it's quite quite common

00:29:58,040 --> 00:30:01,670
especially the sector that I'm working

00:29:59,330 --> 00:30:04,610
on and that is

00:30:01,670 --> 00:30:07,160
sector for instance the gplv3 licenses

00:30:04,610 --> 00:30:09,710
and software is still a big no-no for

00:30:07,160 --> 00:30:11,750
certain industries because essentially

00:30:09,710 --> 00:30:13,730
the goal these industries is to prevent

00:30:11,750 --> 00:30:17,060
the user modifications on an embedded

00:30:13,730 --> 00:30:19,610
device so naturally then you would have

00:30:17,060 --> 00:30:20,480
to practice those licenses in the

00:30:19,610 --> 00:30:22,940
following way

00:30:20,480 --> 00:30:24,710
essentially this is good because if you

00:30:22,940 --> 00:30:26,120
look at the complexity of you're a

00:30:24,710 --> 00:30:28,370
better billing system you're gonna

00:30:26,120 --> 00:30:29,630
include a lot of things and you look at

00:30:28,370 --> 00:30:31,310
the licenses of the things that you

00:30:29,630 --> 00:30:33,830
actually included but we're never gonna

00:30:31,310 --> 00:30:35,960
look at the actual licenses of the

00:30:33,830 --> 00:30:38,060
dependencies because you don't have

00:30:35,960 --> 00:30:41,000
talked to us to do it manually so by

00:30:38,060 --> 00:30:42,830
setting actually the license lacks the

00:30:41,000 --> 00:30:45,470
build system will scream at you and say

00:30:42,830 --> 00:30:48,350
there is like a dependency for the GPL

00:30:45,470 --> 00:30:50,060
free software and I can rebuild at this

00:30:48,350 --> 00:30:53,180
anymore because there's nothing I can

00:30:50,060 --> 00:30:56,390
build actually that has this like I said

00:30:53,180 --> 00:30:58,400
it's something that is sort of

00:30:56,390 --> 00:31:01,460
industries to prevent modification of

00:30:58,400 --> 00:31:03,620
yeah the device and the software on it

00:31:01,460 --> 00:31:05,600
just for saying like the GPL free

00:31:03,620 --> 00:31:08,690
software but you can also put here

00:31:05,600 --> 00:31:11,330
incompatible license and say commercial

00:31:08,690 --> 00:31:12,940
for instance and that way you protect

00:31:11,330 --> 00:31:16,160
yourself from actually including

00:31:12,940 --> 00:31:18,140
commercial license products but

00:31:16,160 --> 00:31:19,880
basically then you would not get that

00:31:18,140 --> 00:31:21,440
easily then probably some others would

00:31:19,880 --> 00:31:23,090
give it to you but that's when you know

00:31:21,440 --> 00:31:27,070
that you're not including actually their

00:31:23,090 --> 00:31:32,390
software in their product in the end and

00:31:27,070 --> 00:31:34,490
when it comes to GPL v3 the people from

00:31:32,390 --> 00:31:37,030
Yocto actually open a ballot they found

00:31:34,490 --> 00:31:39,590
a nice way how to go around it and

00:31:37,030 --> 00:31:42,170
actually it's more of a hacker than and

00:31:39,590 --> 00:31:46,070
encourage solution so they created the

00:31:42,170 --> 00:31:49,280
method GPL v2 there that holds the

00:31:46,070 --> 00:31:52,100
software that was once license GPL v2

00:31:49,280 --> 00:31:55,280
but now the licenses switched to GTA 3

00:31:52,100 --> 00:31:58,640
so essentially it's like old versions of

00:31:55,280 --> 00:31:59,400
certain software components and there's

00:31:58,640 --> 00:32:01,750
like

00:31:59,400 --> 00:32:04,510
[Music]

00:32:01,750 --> 00:32:04,750
they tell me that this is a ticking time

00:32:04,510 --> 00:32:07,270
bomb

00:32:04,750 --> 00:32:09,150
essentially it's really not encouraged

00:32:07,270 --> 00:32:12,760
to do these things you should find a

00:32:09,150 --> 00:32:16,080
local therapist or just use gplv3

00:32:12,760 --> 00:32:19,000
versions of server software because this

00:32:16,080 --> 00:32:21,400
solution but anyways it's still

00:32:19,000 --> 00:32:23,170
available and you can still use it so I

00:32:21,400 --> 00:32:25,030
think that's quite nice that they're

00:32:23,170 --> 00:32:29,860
actually trying to maintain it at least

00:32:25,030 --> 00:32:32,860
do a small degree and then to service

00:32:29,860 --> 00:32:35,560
about this is actually quite fun when

00:32:32,860 --> 00:32:37,330
you get to know it because with a path

00:32:35,560 --> 00:32:39,880
with all these things that I encountered

00:32:37,330 --> 00:32:41,590
the first time I was trying to solve my

00:32:39,880 --> 00:32:43,660
first little debugging solution of that

00:32:41,590 --> 00:32:45,670
solution you always think about how many

00:32:43,660 --> 00:32:47,110
manually do with you know I'm going to

00:32:45,670 --> 00:32:49,030
write this script to that script that's

00:32:47,110 --> 00:32:50,950
gonna do this at this and that and then

00:32:49,030 --> 00:32:52,750
you realize these people have already

00:32:50,950 --> 00:32:54,760
thought about it and they're gonna solve

00:32:52,750 --> 00:32:57,130
this problems for you so there's no need

00:32:54,760 --> 00:32:59,410
to actually cut around it and then once

00:32:57,130 --> 00:33:03,550
you actually figure it out it's really

00:32:59,410 --> 00:33:05,170
fun to actually work the doctor and like

00:33:03,550 --> 00:33:09,280
I mentioned before it has also features

00:33:05,170 --> 00:33:11,530
to ease your development and I have to

00:33:09,280 --> 00:33:13,210
say it's a bit hard to learn compared to

00:33:11,530 --> 00:33:15,520
the solution at that counter with

00:33:13,210 --> 00:33:17,680
because it has its own syntax in

00:33:15,520 --> 00:33:20,260
sentence or particularity s the layered

00:33:17,680 --> 00:33:22,210
approach which is actually really nice

00:33:20,260 --> 00:33:27,100
but it's a definitely pill to swallow

00:33:22,210 --> 00:33:29,800
and yeah I mean the thing is that if you

00:33:27,100 --> 00:33:31,210
may be part of the software stack or

00:33:29,800 --> 00:33:33,160
actually hardware that you're developing

00:33:31,210 --> 00:33:35,380
on integrating into the Yocto project

00:33:33,160 --> 00:33:36,010
has the benefit of you being able be

00:33:35,380 --> 00:33:38,170
compatible

00:33:36,010 --> 00:33:40,810
it would be echo system quite a bit so I

00:33:38,170 --> 00:33:43,870
think it's really really good good thing

00:33:40,810 --> 00:33:46,720
to get involved in and also I'd like to

00:33:43,870 --> 00:33:49,580
encourage you to share the experience of

00:33:46,720 --> 00:33:51,320
the technology that you like

00:33:49,580 --> 00:33:53,900
project and I hope that I presented it

00:33:51,320 --> 00:33:56,750
in a way that do be more encouraged to

00:33:53,900 --> 00:33:58,490
try out new solutions even though in the

00:33:56,750 --> 00:34:00,470
beginning they might see there's a rocky

00:33:58,490 --> 00:34:02,480
road and you might also complain to

00:34:00,470 --> 00:34:04,550
people like I did like why is this done

00:34:02,480 --> 00:34:06,560
in this way you know a good route hasn't

00:34:04,550 --> 00:34:08,360
done much nicer but then you grow up and

00:34:06,560 --> 00:34:12,110
you realize not everything is the same

00:34:08,360 --> 00:34:14,180
any natural we have to have two things

00:34:12,110 --> 00:34:17,300
so what they wanted to share your

00:34:14,180 --> 00:34:20,990
experience with you like in any way and

00:34:17,300 --> 00:34:22,850
you're free to actually yeah oh we have

00:34:20,990 --> 00:34:24,950
to stop the presentation in the same way

00:34:22,850 --> 00:34:29,210
we started it for all the system defense

00:34:24,950 --> 00:34:31,790
here we want you to ask me some

00:34:29,210 --> 00:34:38,840
questions if you want and completely

00:34:31,790 --> 00:34:41,810
natural so any questions a great

00:34:38,840 --> 00:34:46,100
position and so you said he told us what

00:34:41,810 --> 00:34:47,870
you like can you tell us reasons some

00:34:46,100 --> 00:34:50,990
parts that we hate about it aside that

00:34:47,870 --> 00:34:55,250
it can be difficult to learn what so the

00:34:50,990 --> 00:34:57,110
things that are sometimes not the the

00:34:55,250 --> 00:34:59,660
best things that we learn to actually

00:34:57,110 --> 00:35:01,640
learn from experience is there is a

00:34:59,660 --> 00:35:03,170
caching mechanism meaning that when

00:35:01,640 --> 00:35:06,980
you're trying to build an image it

00:35:03,170 --> 00:35:10,220
actually creates a cap and it is up the

00:35:06,980 --> 00:35:11,840
bill times quite a lot and sometimes the

00:35:10,220 --> 00:35:14,000
system tries to be much smarter than it

00:35:11,840 --> 00:35:16,130
actually is which might cause you

00:35:14,000 --> 00:35:18,590
problems that you're trying to reuse

00:35:16,130 --> 00:35:20,210
already built our artifacts while you're

00:35:18,590 --> 00:35:22,370
changing some kind of configuration it

00:35:20,210 --> 00:35:23,900
doesn't happen often but we saw them for

00:35:22,370 --> 00:35:26,420
certain components that it might happen

00:35:23,900 --> 00:35:28,940
and then you spend hours and hours of

00:35:26,420 --> 00:35:31,400
your own time to try to get underneath

00:35:28,940 --> 00:35:34,780
something trusting the tool completely

00:35:31,400 --> 00:35:39,440
while sometimes you can trust them 100%

00:35:34,780 --> 00:35:41,410
when I say build times that's actually

00:35:39,440 --> 00:35:43,500
that's also

00:35:41,410 --> 00:35:45,940
the build times are not the best but

00:35:43,500 --> 00:35:48,130
leveraging the caching mechanism then

00:35:45,940 --> 00:35:50,230
they're great if you can trust it I mean

00:35:48,130 --> 00:35:51,549
that some components you should know

00:35:50,230 --> 00:35:53,529
which components you should not trust

00:35:51,549 --> 00:35:55,240
and you can wire them even so that's a

00:35:53,529 --> 00:35:56,890
good - when you learn which components

00:35:55,240 --> 00:35:58,390
you can trust anymore with the caching

00:35:56,890 --> 00:36:02,349
mechanism they divide them I don't trust

00:35:58,390 --> 00:36:04,059
you and the other thing is like it's

00:36:02,349 --> 00:36:06,220
like a steep learning curve meaning if

00:36:04,059 --> 00:36:08,529
you want to learn yeah it's it's gonna

00:36:06,220 --> 00:36:11,109
take a bit of time but you're always

00:36:08,529 --> 00:36:14,349
free to leave the developers might never

00:36:11,109 --> 00:36:16,270
contact me personally as well and read

00:36:14,349 --> 00:36:18,700
about it I think they're quite good with

00:36:16,270 --> 00:36:20,470
their documentation honestly I mean it's

00:36:18,700 --> 00:36:23,289
scary when you have a two pocket page

00:36:20,470 --> 00:36:28,470
like developers manual ain't no one got

00:36:23,289 --> 00:36:28,470
time to read that right but it's worth

00:36:28,529 --> 00:36:41,230
any more questions quick presentation so

00:36:37,740 --> 00:36:43,690
I've used yo kitto or currently using it

00:36:41,230 --> 00:36:48,940
that's this testing invention was I

00:36:43,690 --> 00:36:52,390
missed completely so really the question

00:36:48,940 --> 00:36:56,799
is the tests you said you could run on

00:36:52,390 --> 00:36:59,049
the real harbour exactly is I mean is

00:36:56,799 --> 00:37:02,020
the resource requirements for running

00:36:59,049 --> 00:37:04,000
the tests on par with the north and that

00:37:02,020 --> 00:37:05,710
location or is this is it the same issue

00:37:04,000 --> 00:37:09,849
when you try to add all the debug

00:37:05,710 --> 00:37:12,940
symbols to the platform so it requires

00:37:09,849 --> 00:37:14,859
instrumentation actually but as far as I

00:37:12,940 --> 00:37:16,510
remember with the test image you have to

00:37:14,859 --> 00:37:19,180
instrument the bootloader and have a

00:37:16,510 --> 00:37:21,490
separate SD card mounted in silent that

00:37:19,180 --> 00:37:23,950
is always that you're always able to

00:37:21,490 --> 00:37:26,920
actually put the flash image and switch

00:37:23,950 --> 00:37:28,990
between two partitions in a way so there

00:37:26,920 --> 00:37:31,700
is an implication that you would need an

00:37:28,990 --> 00:37:34,760
extra resource inside

00:37:31,700 --> 00:37:36,650
harder so that's true but in the end if

00:37:34,760 --> 00:37:39,589
you make it work which honestly we only

00:37:36,650 --> 00:37:41,900
have only managed to make it work on on

00:37:39,589 --> 00:37:44,299
a virtual target and we are trying not

00:37:41,900 --> 00:37:46,309
to do it with the proper partner it

00:37:44,299 --> 00:37:48,410
still needs instrumentation meaning that

00:37:46,309 --> 00:37:49,730
you have to have that the power the

00:37:48,410 --> 00:37:53,210
power controller rights you have to

00:37:49,730 --> 00:37:57,589
control the switching of the of the

00:37:53,210 --> 00:38:00,740
actual like the petitions you're going

00:37:57,589 --> 00:38:04,000
to use a so on so it's not as easy as it

00:38:00,740 --> 00:38:07,490
is virtual started but it's still the

00:38:04,000 --> 00:38:09,829
workflow how to do it is present there

00:38:07,490 --> 00:38:11,630
and it also tells you how with your own

00:38:09,829 --> 00:38:13,579
application how to create the test shoot

00:38:11,630 --> 00:38:16,569
and run in 20 opportune which is I think

00:38:13,579 --> 00:38:21,319
a really good for regression testing

00:38:16,569 --> 00:38:25,900
Thanks we have support for just-in-time

00:38:21,319 --> 00:38:30,890
debugging or break points in the editor

00:38:25,900 --> 00:38:33,290
in the editor for instance well since as

00:38:30,890 --> 00:38:37,400
far as I know well since our two is a

00:38:33,290 --> 00:38:40,190
build system then usually what you do is

00:38:37,400 --> 00:38:43,099
I guess then you would have to manually

00:38:40,190 --> 00:38:46,040
then take the actual symbols and load

00:38:43,099 --> 00:38:48,109
them inside the editor I guess and then

00:38:46,040 --> 00:38:49,819
you will be able to run the GDP through

00:38:48,109 --> 00:38:52,160
the editor and then you will be able to

00:38:49,819 --> 00:38:54,079
stack them and so on so it depends on

00:38:52,160 --> 00:38:55,970
the a literature music and the tooling

00:38:54,079 --> 00:38:58,670
but basically by using the concept

00:38:55,970 --> 00:39:00,619
that's written here and for Windows

00:38:58,670 --> 00:39:02,510
guidelines you would still be able to do

00:39:00,619 --> 00:39:04,819
it so meaning you would have the debug

00:39:02,510 --> 00:39:07,490
root filesystem and you load it inside

00:39:04,819 --> 00:39:08,640
of HTTP that society editor put you to

00:39:07,490 --> 00:39:10,410
the target and then actual

00:39:08,640 --> 00:39:12,359
watching the process you'll be able to

00:39:10,410 --> 00:39:15,809
step people get go through pretty much

00:39:12,359 --> 00:39:18,210
any application I think you created us

00:39:15,809 --> 00:39:20,940
that for instance if you define kicked

00:39:18,210 --> 00:39:23,010
and imported the debug symbols but what

00:39:20,940 --> 00:39:25,230
it does this set up as an SSH session

00:39:23,010 --> 00:39:27,420
and launch of a process on the target

00:39:25,230 --> 00:39:31,470
but it does it for you you don't have to

00:39:27,420 --> 00:39:40,200
think about all the details do we have

00:39:31,470 --> 00:39:44,549
more questions and you have the image

00:39:40,200 --> 00:39:49,890
feature of slide profiling if you have

00:39:44,549 --> 00:39:52,049
use that which so we use the whole grant

00:39:49,890 --> 00:39:54,420
and it was also the same project where

00:39:52,049 --> 00:39:56,849
we use the people file system so we use

00:39:54,420 --> 00:39:58,710
more intuitive sense over there because

00:39:56,849 --> 00:40:02,130
initially it gave us more information

00:39:58,710 --> 00:40:04,920
just more than just GDP when we didn't

00:40:02,130 --> 00:40:07,109
have any information on the target and

00:40:04,920 --> 00:40:16,470
also like unnaturally before jumping

00:40:07,109 --> 00:40:17,430
from everyone else everyone something

00:40:16,470 --> 00:40:19,090
thank you

00:40:17,430 --> 00:40:19,390
[Music]

00:40:19,090 --> 00:40:22,570
[Applause]

00:40:19,390 --> 00:40:22,570

YouTube URL: https://www.youtube.com/watch?v=vM3SvjaHxek


