Title: Running Android on the Mainline Graphics Stack - Robert Foss
Publication date: 2018-04-30
Playlist: foss-north 2018
Description: 
	Finally, it is possible to run Android on top of mainline Graphics! The recent addition of DRM Atomic Modesetting and Explicit Synchronization to the kernel paved the way, albeit some changes to the Android userspace were necessary.

The Android graphics stack is built on a abstraction layer, thus drm_hwcomposer - a component to connect this abstraction layer to the mainline DRM API - was created. 

Moreover, changes to MESA and the abstraction layer itself were also needed for a full conversion to mainline.

This talk will cover recent developments in the area which enabled Qualcomm, i.MX and Intel based platforms to run Android using the mainline graphics stack.

---

Robert Foss is a Linux graphic stack contributor and Software Engineer at Collabora, and has worked in number of areas including Android, drm_hwcomposer, MESA, Linux DRM and Intel GPU Tools. He holds a MSc in Computer Science and Engineering from the Technical University of Lund, Sweden. Previously he has spoken at Embedded Linux Conference Europe, Open Source Summit North America, Xorg Developers Conference and FOSDEM.

http://foss-north.se/2018/speakers-and-talks.html#rfoss
Captions: 
	00:00:14,419 --> 00:00:24,689
all right okay it's what we're buff and

00:00:21,529 --> 00:00:26,579
if you put what I want together you may

00:00:24,689 --> 00:00:28,400
figure out that this conference is

00:00:26,579 --> 00:00:30,480
totally made not for me

00:00:28,400 --> 00:00:32,489
[Music]

00:00:30,480 --> 00:00:39,539
which is why I was the fight of the

00:00:32,489 --> 00:00:41,460
third year very confusing so I'm going

00:00:39,539 --> 00:00:44,100
to talk a little bit about running

00:00:41,460 --> 00:00:47,430
Android on top of an entirely open

00:00:44,100 --> 00:00:51,660
source graphic stack and I've been doing

00:00:47,430 --> 00:00:53,850
this work for flour did he want to go

00:00:51,660 --> 00:00:57,390
get ahold of me there's some contact

00:00:53,850 --> 00:01:03,050
details yeah we've got a question about

00:00:57,390 --> 00:01:03,050
this stuff I'm always interested so

00:01:04,189 --> 00:01:10,170
we're going to talk about and the

00:01:07,350 --> 00:01:12,659
history of Android what the Android

00:01:10,170 --> 00:01:14,820
graphic style looks like what the

00:01:12,659 --> 00:01:18,990
mainland never expected us like they're

00:01:14,820 --> 00:01:20,700
not entirely identical and also the

00:01:18,990 --> 00:01:23,880
bigger picture of what's actually going

00:01:20,700 --> 00:01:33,359
on and what may be coming down the

00:01:23,880 --> 00:01:37,499
pipeline this is an amazing guy it's the

00:01:33,359 --> 00:01:41,789
dip number of lines dip from mainland

00:01:37,499 --> 00:01:42,479
kernel to various governments I call

00:01:41,789 --> 00:01:46,529
internals

00:01:42,479 --> 00:01:51,450
so it's around like two and a half

00:01:46,529 --> 00:01:55,499
million ways which is a lot of months or

00:01:51,450 --> 00:01:59,279
so good yep - not very less so there's

00:01:55,499 --> 00:02:02,130
no clear trend we're seeing some little

00:01:59,279 --> 00:02:05,759
slope here but I think it's a little too

00:02:02,130 --> 00:02:06,540
early to draw any coefficients yeah so

00:02:05,759 --> 00:02:12,840
it's mostly

00:02:06,540 --> 00:02:15,510
I'd say the reason for this and that

00:02:12,840 --> 00:02:17,220
amory basically the corner they

00:02:15,510 --> 00:02:20,490
have been doing their own thing for a

00:02:17,220 --> 00:02:23,130
long time and for good reasons they

00:02:20,490 --> 00:02:25,130
didn't do it willy-nilly they have heart

00:02:23,130 --> 00:02:29,400
requirements that the colonel just

00:02:25,130 --> 00:02:31,980
couldn't provide specifically relating

00:02:29,400 --> 00:02:33,870
to the graphics time it wasn't really

00:02:31,980 --> 00:02:36,210
good good enough for a mobile use case

00:02:33,870 --> 00:02:39,210
there were some parts missing or some

00:02:36,210 --> 00:02:42,030
parts that were so optimal and general

00:02:39,210 --> 00:02:43,680
it wasn't the prophesy was never

00:02:42,030 --> 00:02:51,150
intended for a low-powered

00:02:43,680 --> 00:02:54,660
usage scenario so support for it device

00:02:51,150 --> 00:02:59,610
types for example display IP wasn't so

00:02:54,660 --> 00:03:07,140
good with the down the current page guys

00:02:59,610 --> 00:03:09,060
the kms specifically and there was an

00:03:07,140 --> 00:03:10,860
apparently there was no support at all

00:03:09,060 --> 00:03:15,060
for doing atomic instructions for an

00:03:10,860 --> 00:03:18,120
atomic commits or anything atomic really

00:03:15,060 --> 00:03:19,650
so doing things that are moving is

00:03:18,120 --> 00:03:21,510
really important when you have a

00:03:19,650 --> 00:03:24,780
graphics time there's a lot of state in

00:03:21,510 --> 00:03:27,840
it and it's hard to know exactly what

00:03:24,780 --> 00:03:30,300
kind of state your partner is in and if

00:03:27,840 --> 00:03:32,850
you do a bunch of operations and it's

00:03:30,300 --> 00:03:35,610
sort of summer in the middle I figuring

00:03:32,850 --> 00:03:38,459
out where you are is nearly impossible

00:03:35,610 --> 00:03:38,880
and just some portion of bucks waiting

00:03:38,459 --> 00:03:43,380
to happen

00:03:38,880 --> 00:03:45,239
so the need for being able to do a bunch

00:03:43,380 --> 00:03:47,730
of things together and have them all

00:03:45,239 --> 00:03:51,269
fail or all succeeding

00:03:47,730 --> 00:03:53,780
manner is very real and the current a

00:03:51,269 --> 00:03:58,190
lot of time didn't support it at all so

00:03:53,780 --> 00:04:03,239
that's one one eviction or for the pork

00:03:58,190 --> 00:04:09,349
so what happened was Gregory Gregory

00:04:03,239 --> 00:04:11,870
Hackman at Google as submitted as a

00:04:09,349 --> 00:04:17,760
serious actress for operating need

00:04:11,870 --> 00:04:20,789
Android atomic that's a framework and it

00:04:17,760 --> 00:04:27,210
scratched pretty much all of the edges

00:04:20,789 --> 00:04:29,570
of Google and on RedHat so that's all

00:04:27,210 --> 00:04:34,620
fair problem but not really our problem

00:04:29,570 --> 00:04:37,560
the idea or the Android atomic display

00:04:34,620 --> 00:04:40,380
network it's called data it's not really

00:04:37,560 --> 00:04:42,930
exactly which is problematic for the

00:04:40,380 --> 00:04:44,699
like the more general use case do you

00:04:42,930 --> 00:04:47,010
want to work all kinds of weird and

00:04:44,699 --> 00:04:50,580
wonderful Harper because there's lots of

00:04:47,010 --> 00:04:55,020
it out there you don't still only

00:04:50,580 --> 00:04:59,180
supported Omega commenced for display

00:04:55,020 --> 00:05:02,610
plates not for things like connectors or

00:04:59,180 --> 00:05:05,630
other parts of display starting so only

00:05:02,610 --> 00:05:09,060
one part of it let's say a third

00:05:05,630 --> 00:05:12,030
actually had a Tomy support which is a

00:05:09,060 --> 00:05:17,729
nice addition but it's not good enough

00:05:12,030 --> 00:05:20,310
really also it was built on top of none

00:05:17,729 --> 00:05:24,030
of the current I would thank current ad

00:05:20,310 --> 00:05:28,260
guys so it was entirely different and no

00:05:24,030 --> 00:05:29,760
code or no no uses of the API were able

00:05:28,260 --> 00:05:32,190
to like gracefully language

00:05:29,760 --> 00:05:34,800
you just have to it'll intimate a deal

00:05:32,190 --> 00:05:38,070
support from scratch which is

00:05:34,800 --> 00:05:41,070
inconvenient so uh no that meant that

00:05:38,070 --> 00:05:44,270
idiot wasn't really unreachable it's not

00:05:41,070 --> 00:05:50,300
the solution that the community wanted

00:05:44,270 --> 00:05:55,020
so what happened next was the upstream

00:05:50,300 --> 00:05:57,890
alternative was presented and it was

00:05:55,020 --> 00:06:01,980
called or it is called atomic famous

00:05:57,890 --> 00:06:03,210
chemist Asst the API that was used

00:06:01,980 --> 00:06:06,840
before

00:06:03,210 --> 00:06:11,010
EDF was introduced an atomic Amos is the

00:06:06,840 --> 00:06:12,720
atomic neighbor of mine Amos and it

00:06:11,010 --> 00:06:16,730
supports all of the immediate use cases

00:06:12,720 --> 00:06:19,260
so it has all of the same properties and

00:06:16,730 --> 00:06:20,100
additionally it is generically

00:06:19,260 --> 00:06:24,540
accessible

00:06:20,100 --> 00:06:27,960
so the way atomic can came us and it

00:06:24,540 --> 00:06:31,170
works is basically you set a bunch of

00:06:27,960 --> 00:06:35,430
properties that you want and there you

00:06:31,170 --> 00:06:37,860
go commit and either that fails for it

00:06:35,430 --> 00:06:39,480
doesn't feel and these properties are

00:06:37,860 --> 00:06:41,610
accessible you can have whatever

00:06:39,480 --> 00:06:44,520
properties want for your driver

00:06:41,610 --> 00:06:46,040
so you're weird and wonderful hardware

00:06:44,520 --> 00:06:48,410
has support for something

00:06:46,040 --> 00:06:51,950
never existed before you can just have a

00:06:48,410 --> 00:06:55,570
property and usage basic and use it it

00:06:51,950 --> 00:07:00,260
feels like or if it's aware of it so

00:06:55,570 --> 00:07:02,900
that's very accessible in this so what's

00:07:00,260 --> 00:07:08,510
happening now is W ATF is being replaced

00:07:02,900 --> 00:07:11,360
in under practice by calming famous

00:07:08,510 --> 00:07:14,810
which is nice because it's the solution

00:07:11,360 --> 00:07:20,090
the community ended up using or yes

00:07:14,810 --> 00:07:21,830
support so a migration from media to EMS

00:07:20,090 --> 00:07:24,740
is currently happening but it's sort of

00:07:21,830 --> 00:07:27,320
a glacial pace migration so all the

00:07:24,740 --> 00:07:31,820
primary Android graphics cards are

00:07:27,320 --> 00:07:33,680
currently based on idea because there

00:07:31,820 --> 00:07:35,990
was no option really if you wanted to

00:07:33,680 --> 00:07:38,810
ship a droid on your device or on your

00:07:35,990 --> 00:07:42,430
hardware you really had to support and

00:07:38,810 --> 00:07:45,050
yeah it was the only maybe I thought was

00:07:42,430 --> 00:07:47,060
basically allowed on the hard ecosystem

00:07:45,050 --> 00:07:50,960
which means that every printer driver

00:07:47,060 --> 00:07:56,210
today as any other base but you know not

00:07:50,960 --> 00:07:58,010
alone so that brings us to what the

00:07:56,210 --> 00:08:03,550
Android gotta stack actually looks like

00:07:58,010 --> 00:08:06,290
and this is it it's not so complicated

00:08:03,550 --> 00:08:08,680
or this a little bit of sentiment but

00:08:06,290 --> 00:08:12,080
all the important parts are really here

00:08:08,680 --> 00:08:14,690
lots of junk is hidden in the vendor

00:08:12,080 --> 00:08:17,170
driver box but we're going to dig in

00:08:14,690 --> 00:08:22,120
about till yeah our hearts content

00:08:17,170 --> 00:08:26,090
basically so on top we have the house

00:08:22,120 --> 00:08:26,660
this is what we want really like this is

00:08:26,090 --> 00:08:33,440
the goal

00:08:26,660 --> 00:08:36,380
so yeah below me now serves their

00:08:33,440 --> 00:08:38,870
surface finger is sort of a glue

00:08:36,380 --> 00:08:42,080
component it causes all the applications

00:08:38,870 --> 00:08:45,530
to render into basically in a single

00:08:42,080 --> 00:08:47,570
buffer which means that the application

00:08:45,530 --> 00:08:48,889
stone we have to be aware of each other

00:08:47,570 --> 00:08:52,040
service bid

00:08:48,889 --> 00:08:55,309
is this automatically for every

00:08:52,040 --> 00:08:58,759
application let's look at what it can

00:08:55,309 --> 00:09:03,709
look like so here's just a landscape

00:08:58,759 --> 00:09:07,399
algorithm that's my guess and if it has

00:09:03,709 --> 00:09:10,970
components opponents like that satisfy

00:09:07,399 --> 00:09:14,089
the spreader by an application it's

00:09:10,970 --> 00:09:19,699
mostly transparent it's a relatively

00:09:14,089 --> 00:09:22,129
nice small piece of real estate it's

00:09:19,699 --> 00:09:24,799
actually not backed by a pool buffer

00:09:22,129 --> 00:09:27,949
it's only backed by a buffer does this

00:09:24,799 --> 00:09:32,269
thing which means that we can save a lot

00:09:27,949 --> 00:09:34,459
of memory space and memory spaces yeah a

00:09:32,269 --> 00:09:37,609
scarce resource to memory not witness

00:09:34,459 --> 00:09:40,509
also a scarce resource so that's very

00:09:37,609 --> 00:09:44,679
desirable then there's a navigation bar

00:09:40,509 --> 00:09:47,689
also rented by separate matter pond and

00:09:44,679 --> 00:09:52,100
the biggest piece of them all the

00:09:47,689 --> 00:09:54,919
background so these are all combined by

00:09:52,100 --> 00:09:57,019
service finger and as you can see most

00:09:54,919 --> 00:09:59,169
in excess put the background most of

00:09:57,019 --> 00:10:05,649
them are like aspirin

00:09:59,169 --> 00:10:08,449
okay surface thing it does this by

00:10:05,649 --> 00:10:10,759
juggling a bunch of buffers and it

00:10:08,449 --> 00:10:13,279
speaks deep or it communicates these

00:10:10,759 --> 00:10:19,879
buffers to the hardware and using a

00:10:13,279 --> 00:10:22,730
protocol called called HW c and h WCS

00:10:19,879 --> 00:10:25,220
then used to talk to the actual hardware

00:10:22,730 --> 00:10:30,860
and yeah whatever way that on the heart

00:10:25,220 --> 00:10:35,449
of a person so let's look at what the

00:10:30,860 --> 00:10:38,029
hardware composer actually does and what

00:10:35,449 --> 00:10:40,759
it does is receipt supporting layers

00:10:38,029 --> 00:10:45,529
from from an out-of-service finger-like

00:10:40,759 --> 00:10:48,799
up as many layers as you want and then

00:10:45,529 --> 00:10:52,129
it optimizes these will get them for

00:10:48,799 --> 00:10:54,459
that there's a little bit to it and then

00:10:52,129 --> 00:10:57,639
just substitute this play memory and

00:10:54,459 --> 00:11:03,139
this is where a stuff gets complicated

00:10:57,639 --> 00:11:04,309
before the last step it's everything is

00:11:03,139 --> 00:11:06,049
all fine and good because we're all

00:11:04,309 --> 00:11:08,269
software like software about software

00:11:06,049 --> 00:11:09,499
below but when we output it to actually

00:11:08,269 --> 00:11:12,110
display Marguerite there are heart

00:11:09,499 --> 00:11:13,669
restrictions display market typically

00:11:12,110 --> 00:11:17,839
doesn't support an infinite set of

00:11:13,669 --> 00:11:21,079
layers maybe you for is gone I think

00:11:17,839 --> 00:11:23,419
that's the other great guide on your

00:11:21,079 --> 00:11:25,730
hardware should be able support at least

00:11:23,419 --> 00:11:27,829
four layers so what happens when you

00:11:25,730 --> 00:11:30,980
have more than four layers if we look at

00:11:27,829 --> 00:11:33,429
the background picture from before like

00:11:30,980 --> 00:11:35,809
counted three epub we weren't really

00:11:33,429 --> 00:11:40,639
paying all that less attention there's

00:11:35,809 --> 00:11:45,829
actually maybe five so we have five

00:11:40,639 --> 00:11:49,369
layers how do we actually put this the

00:11:45,829 --> 00:11:51,339
hardware only support support and what

00:11:49,369 --> 00:11:53,629
we do is basically we combine a few

00:11:51,339 --> 00:11:59,569
layers we squash them

00:11:53,629 --> 00:12:01,159
so we may be the smallest layers what

00:11:59,569 --> 00:12:04,519
the layers that are easiest

00:12:01,159 --> 00:12:08,989
computationally and we combine them on

00:12:04,519 --> 00:12:11,569
the CPU or on the GPU and we do that

00:12:08,989 --> 00:12:14,029
just repeat that process until we have a

00:12:11,569 --> 00:12:15,919
few enough layers that the hardware

00:12:14,029 --> 00:12:18,919
actually supports to so there are

00:12:15,919 --> 00:12:20,869
supports outputting all of them so when

00:12:18,919 --> 00:12:23,149
we had at least having four we're done

00:12:20,869 --> 00:12:28,399
and we just set them all to this harbor

00:12:23,149 --> 00:12:31,579
and that's all about good so we have

00:12:28,399 --> 00:12:34,429
this process and it sounds kind of

00:12:31,579 --> 00:12:37,699
complicated why do we want to do it at

00:12:34,429 --> 00:12:39,329
all and there are very good reasons for

00:12:37,699 --> 00:12:43,889
wanting to use

00:12:39,329 --> 00:12:46,379
as they ordered a Harper first of four

00:12:43,889 --> 00:12:49,230
mostly it's way more power efficient

00:12:46,379 --> 00:12:52,739
than using a CPU to have the stuff just

00:12:49,230 --> 00:12:55,079
to dump buffer if you have hardware

00:12:52,739 --> 00:12:58,170
acceleration port for these functions

00:12:55,079 --> 00:13:00,629
you save a lot of power but you also

00:12:58,170 --> 00:13:04,889
free up CPU resources or GPU resources

00:13:00,629 --> 00:13:12,389
whatever you would have used instead and

00:13:04,889 --> 00:13:15,389
that not only that only not only not to

00:13:12,389 --> 00:13:16,679
use less power but also you've freed up

00:13:15,389 --> 00:13:18,119
the resources to be used for when you

00:13:16,679 --> 00:13:20,819
actually want to do so if you were

00:13:18,119 --> 00:13:22,920
playing games your GPU is not managing

00:13:20,819 --> 00:13:25,290
buffers and smashing them together

00:13:22,920 --> 00:13:27,689
that's not what we're interested we're

00:13:25,290 --> 00:13:30,049
interested in OpenGL performance or

00:13:27,689 --> 00:13:33,119
equipment performance or whatever maybe

00:13:30,049 --> 00:13:35,179
so those are basically the reasons for

00:13:33,119 --> 00:13:37,470
going through all this complexity and

00:13:35,179 --> 00:13:42,179
there's yeah there's so you know

00:13:37,470 --> 00:13:46,110
complexity to it so we continue looking

00:13:42,179 --> 00:13:48,989
at the stack here's defender driver this

00:13:46,110 --> 00:13:52,970
is the proprietary block but arm will

00:13:48,989 --> 00:13:57,480
give you or remember your vendor may be

00:13:52,970 --> 00:13:59,999
and it includes a harder a poster

00:13:57,480 --> 00:14:03,720
component something just something that

00:13:59,999 --> 00:14:06,209
most this protocol it has to be it has

00:14:03,720 --> 00:14:08,339
to be implemented somewhere and for

00:14:06,209 --> 00:14:13,579
parties tactics just give the block

00:14:08,339 --> 00:14:17,129
similar and it also promotes a video

00:14:13,579 --> 00:14:20,009
Vulcan and memory allocator like a bunch

00:14:17,129 --> 00:14:24,149
of junk much these things are good into

00:14:20,009 --> 00:14:28,069
what we think of as a prior work and a

00:14:24,149 --> 00:14:28,069
lot of or either one we

00:14:32,279 --> 00:14:40,680
so if we look at the main like route

00:14:36,540 --> 00:14:43,529
exactly their current status that we

00:14:40,680 --> 00:14:48,269
have a pretty damn pretty darn good ABI

00:14:43,529 --> 00:14:50,699
and and it's very useful in fact it's a

00:14:48,269 --> 00:14:54,360
useful dance Google ass devices

00:14:50,699 --> 00:14:58,769
build on top of that or that's just one

00:14:54,360 --> 00:15:01,259
product a little pixel see she was

00:14:58,769 --> 00:15:04,350
running on top of almost an entirely

00:15:01,259 --> 00:15:06,600
open source gravity stack not not

00:15:04,350 --> 00:15:14,790
entirely they did some funny business

00:15:06,600 --> 00:15:17,910
with with the record where the round the

00:15:14,790 --> 00:15:19,800
niveau kernel part of department but not

00:15:17,910 --> 00:15:21,689
the uses based part at the driver they

00:15:19,800 --> 00:15:24,809
just picked up the Nvidia the partner

00:15:21,689 --> 00:15:26,430
use user space part of the primary which

00:15:24,809 --> 00:15:27,449
is sort of what we're we're waiting

00:15:26,430 --> 00:15:31,259
about it

00:15:27,449 --> 00:15:35,579
yeah but I'm working it and the problem

00:15:31,259 --> 00:15:38,579
with doing it this way it is something

00:15:35,579 --> 00:15:43,079
has to implement hwc just something

00:15:38,579 --> 00:15:45,779
typically that's the the task of the

00:15:43,079 --> 00:15:47,370
primary driver but in the open source

00:15:45,779 --> 00:15:52,410
stack there's nothing that's really

00:15:47,370 --> 00:15:54,629
naturally to pronounce it so amazed that

00:15:52,410 --> 00:15:56,579
this doesn't even notice that's where I

00:15:54,629 --> 00:15:58,559
would start living apart if I were to

00:15:56,579 --> 00:16:01,230
look for it and the kernels certainly

00:15:58,559 --> 00:16:04,019
doesn't committed so we need something

00:16:01,230 --> 00:16:06,899
that doesn't expand the answer blah is

00:16:04,019 --> 00:16:11,279
DRM harbour composer and different

00:16:06,899 --> 00:16:15,870
market where composer it's just a be

00:16:11,279 --> 00:16:19,050
thin like basically between surface

00:16:15,870 --> 00:16:22,920
flinger and the normal the source

00:16:19,050 --> 00:16:25,860
graphic stack so let's look at what it

00:16:22,920 --> 00:16:29,100
actually doesn't so this is spike we're

00:16:25,860 --> 00:16:33,360
looking at before and here's the primary

00:16:29,100 --> 00:16:36,780
blow of stuff and if we dig into what it

00:16:33,360 --> 00:16:38,880
actually is and

00:16:36,780 --> 00:16:43,830
looks something like this on the other

00:16:38,880 --> 00:16:46,800
side so we have the dryer stuff this is

00:16:43,830 --> 00:16:49,350
the normal stuff you'd run on a good two

00:16:46,800 --> 00:16:52,020
or whatever and the top of it we run a

00:16:49,350 --> 00:16:56,640
d-ring Harbor composer which is actually

00:16:52,020 --> 00:17:01,670
just piece HWC to two circles finger and

00:16:56,640 --> 00:17:05,100
and that's it but wait there's more

00:17:01,670 --> 00:17:07,230
there's also Maison de terre these are

00:17:05,100 --> 00:17:12,180
part of your your normal graphic science

00:17:07,230 --> 00:17:15,089
alone Mesa implements many PBS you're

00:17:12,180 --> 00:17:22,079
used to using for graphics like OpenGL

00:17:15,089 --> 00:17:27,780
or Vulcan lifts DRM is ace yeah it's the

00:17:22,079 --> 00:17:31,080
users basic API for talking to the

00:17:27,780 --> 00:17:33,780
kernel DRM subsystem and the kernel DRM

00:17:31,080 --> 00:17:36,060
subsystem is where all the graphics

00:17:33,780 --> 00:17:38,420
driver stuff so all the graphics related

00:17:36,060 --> 00:17:42,290
things including the display hardware

00:17:38,420 --> 00:17:45,300
lives there talking to it as sort of

00:17:42,290 --> 00:17:47,760
inconvenient if you you're used to

00:17:45,300 --> 00:17:51,180
fighting drunk drivers it's iocked all

00:17:47,760 --> 00:17:53,400
this out of that and it's not a good way

00:17:51,180 --> 00:17:55,140
of communicating with anything so let

00:17:53,400 --> 00:17:56,730
your are sort of Rascals if you're next

00:17:55,140 --> 00:18:02,640
that makes them a little bit more

00:17:56,730 --> 00:18:06,150
convenient to use and for the last part

00:18:02,640 --> 00:18:10,830
there is drama gagas the graphics memory

00:18:06,150 --> 00:18:12,660
down here if you go looking for a for a

00:18:10,830 --> 00:18:17,630
component if ground there isn't one

00:18:12,660 --> 00:18:20,150
really instead there are I think for

00:18:17,630 --> 00:18:23,850
more separate implementations of

00:18:20,150 --> 00:18:28,500
graphics alligators and general is not

00:18:23,850 --> 00:18:30,800
really a assault problem and it's party

00:18:28,500 --> 00:18:33,990
solved in four different ways

00:18:30,800 --> 00:18:36,280
which is problematic but for example

00:18:33,990 --> 00:18:39,910
there's the theorem

00:18:36,280 --> 00:18:43,360
well there's GD umbrella which is the

00:18:39,910 --> 00:18:47,680
current community favorite there's mini

00:18:43,360 --> 00:18:50,560
to be on by Google Chrome OS T and then

00:18:47,680 --> 00:18:51,340
there's many GPM again but this time by

00:18:50,560 --> 00:18:54,090
Intel

00:18:51,340 --> 00:18:58,510
so thanks to Intel Canadian law which is

00:18:54,090 --> 00:19:00,880
mini DBM with a bunch of fixes or rather

00:18:58,510 --> 00:19:04,120
perhaps to make little hardware work a

00:19:00,880 --> 00:19:05,740
little bit better so the situation is a

00:19:04,120 --> 00:19:13,050
little bit messy because it does

00:19:05,740 --> 00:19:28,990
Mississippi area so let's look at h WC -

00:19:13,050 --> 00:19:32,050
sorry sure yeah so let's look here this

00:19:28,990 --> 00:19:35,500
is all space everything above this new

00:19:32,050 --> 00:19:36,010
space this picture is a little bit

00:19:35,500 --> 00:19:39,040
confusing

00:19:36,010 --> 00:19:43,030
this one's confusing as well but DRAM

00:19:39,040 --> 00:19:48,270
the kernel are both d kernel DRM is just

00:19:43,030 --> 00:19:53,170
a subsystem in the kernel good question

00:19:48,270 --> 00:19:58,200
so the hwc - api there there wasn't one

00:19:53,170 --> 00:20:09,970
of course hwc 1 or just HW see I guess

00:19:58,200 --> 00:20:11,470
why did you and something around 200

00:20:09,970 --> 00:20:14,710
added support in the kernel for

00:20:11,470 --> 00:20:18,280
something called fences and the fastest

00:20:14,710 --> 00:20:21,420
is a way of communicating about memory

00:20:18,280 --> 00:20:25,240
buffers and making different components

00:20:21,420 --> 00:20:27,310
be able to just know when a buffer is

00:20:25,240 --> 00:20:32,580
ready to be consumed or what it's ready

00:20:27,310 --> 00:20:36,360
to be sent out to the next guy and how

00:20:32,580 --> 00:20:38,390
does this really makes a lot more simple

00:20:36,360 --> 00:20:40,950
it's

00:20:38,390 --> 00:20:44,190
removes the need for doing like

00:20:40,950 --> 00:20:45,810
threading and you Texas in in the

00:20:44,190 --> 00:20:48,660
hardware composer which is nice because

00:20:45,810 --> 00:20:52,170
the stuff is always really messy and

00:20:48,660 --> 00:20:58,710
unpleasant so instead we just have this

00:20:52,170 --> 00:21:02,370
very simple API and this is sort of

00:20:58,710 --> 00:21:07,170
where I came into it so hundred had this

00:21:02,370 --> 00:21:10,410
path support for for a long time and I

00:21:07,170 --> 00:21:12,810
think about two years ago there was an

00:21:10,410 --> 00:21:15,720
initiative to to implement the support

00:21:12,810 --> 00:21:18,750
in the upstream mainline kernel as well

00:21:15,720 --> 00:21:19,890
so we did but in order to get it

00:21:18,750 --> 00:21:23,160
accepted in the kernel

00:21:19,890 --> 00:21:25,320
it had to be used somewhere and getting

00:21:23,160 --> 00:21:27,990
a few summer is a little bit tricky you

00:21:25,320 --> 00:21:29,880
probably don't want to just like digging

00:21:27,990 --> 00:21:32,430
to the innards of wait land or the X

00:21:29,880 --> 00:21:34,170
server room that's messy stuff so the

00:21:32,430 --> 00:21:37,380
smallest possible product to support

00:21:34,170 --> 00:21:41,220
innocent is dear harbor composer as well

00:21:37,380 --> 00:21:44,070
does what I did I just as important

00:21:41,220 --> 00:21:46,050
offenses and yeah

00:21:44,070 --> 00:21:49,710
as his son is a heart requirement for

00:21:46,050 --> 00:21:52,560
committing the HWC to again and the age

00:21:49,710 --> 00:21:54,840
WC to his heart requirement for modern

00:21:52,560 --> 00:21:56,640
versions of Android it was something

00:21:54,840 --> 00:21:58,800
that was kind of desired him just nice

00:21:56,640 --> 00:22:04,200
to have apart from being relatively

00:21:58,800 --> 00:22:09,540
straightforward to implement so yeah

00:22:04,200 --> 00:22:13,230
agency to business I don't know and this

00:22:09,540 --> 00:22:14,010
happened 2016 and it was a collab run

00:22:13,230 --> 00:22:17,310
gustavo

00:22:14,010 --> 00:22:25,350
Palin but did most of the work for

00:22:17,310 --> 00:22:29,250
removing a passport into community yeah

00:22:25,350 --> 00:22:32,910
and this is the part planet just as it

00:22:29,250 --> 00:22:36,060
wasn't too complicated and this project

00:22:32,910 --> 00:22:40,710
you're a harbor composer originated

00:22:36,060 --> 00:22:41,520
within Google and their Chrome OS t it

00:22:40,710 --> 00:22:44,790
was

00:22:41,520 --> 00:22:49,350
created by jean-paul and sacrificer

00:22:44,790 --> 00:22:52,679
within the google chrome emails - but

00:22:49,350 --> 00:22:55,470
since not too long ago it's under the

00:22:52,679 --> 00:22:57,929
umbrella of read desktop the work

00:22:55,470 --> 00:22:59,910
organization which is where all they

00:22:57,929 --> 00:23:06,480
made my graphics tech stuff yes

00:22:59,910 --> 00:23:09,870
essentially and the move was starkly bad

00:23:06,480 --> 00:23:14,610
due to Sean Paul Anthony Kumar Marissa

00:23:09,870 --> 00:23:17,190
wall who were nice enough to and not

00:23:14,610 --> 00:23:19,200
only just move it but moving it means

00:23:17,190 --> 00:23:21,600
that they are going to continuously go

00:23:19,200 --> 00:23:23,790
through a bunch of truffles and when

00:23:21,600 --> 00:23:25,530
they want to ship this stuff because now

00:23:23,790 --> 00:23:28,130
they have to integrate like an external

00:23:25,530 --> 00:23:31,890
component instead of just relying on it

00:23:28,130 --> 00:23:32,280
which is a lot simpler so yeah thanks

00:23:31,890 --> 00:23:35,550
guys

00:23:32,280 --> 00:23:39,630
that's very helpful and if you want to

00:23:35,550 --> 00:23:41,960
contribute you can give up people don't

00:23:39,630 --> 00:23:41,960
worry

00:23:42,650 --> 00:23:50,940
so let's not look at what the current

00:23:45,390 --> 00:23:53,640
status is this effort has been yeah

00:23:50,940 --> 00:23:56,250
brought to fruition on a bunch of top of

00:23:53,640 --> 00:23:59,940
Katherine's and we can look at a few of

00:23:56,250 --> 00:24:01,970
them there's the 9 X 6 which is a very

00:23:59,940 --> 00:24:06,840
common platform is the amount of space

00:24:01,970 --> 00:24:11,910
it wants the Etna bit and a graphics

00:24:06,840 --> 00:24:18,350
card which yes this year has become a

00:24:11,910 --> 00:24:18,350
very viable like GPU driver up to you

00:24:19,040 --> 00:24:25,740
there's the dragon port port SC which is

00:24:22,530 --> 00:24:30,840
our local partner it has an Adreno GPU

00:24:25,740 --> 00:24:33,059
and it is supported by the by the free

00:24:30,840 --> 00:24:35,490
three note graphics mirror which is also

00:24:33,059 --> 00:24:39,430
like really good like top-notch quality

00:24:35,490 --> 00:24:45,460
and supports all the features

00:24:39,430 --> 00:24:48,270
are specifically focused currently the

00:24:45,460 --> 00:24:51,600
Heike 960 is under development

00:24:48,270 --> 00:24:54,940
it hasn't momiji view unfortunately i

00:24:51,600 --> 00:24:56,440
say unfortunately because barb this is

00:24:54,940 --> 00:24:59,580
not so good with the open source

00:24:56,440 --> 00:25:02,110
barriers they really don't want one

00:24:59,580 --> 00:25:07,570
however there's some efforts in the

00:25:02,110 --> 00:25:10,390
department as well the molle g71 was a

00:25:07,570 --> 00:25:13,510
relatively minor part that the open

00:25:10,390 --> 00:25:15,960
source effort will point out support it

00:25:13,510 --> 00:25:19,390
in for her rather than long time but

00:25:15,960 --> 00:25:22,300
current think there's like a very novel

00:25:19,390 --> 00:25:24,880
equality driver that is drawing its

00:25:22,300 --> 00:25:26,230
first triangles now so you can't really

00:25:24,880 --> 00:25:28,750
use it for something that got very good

00:25:26,230 --> 00:25:32,050
but it may be an indication of what's to

00:25:28,750 --> 00:25:35,380
come or so I hope anyway so this

00:25:32,050 --> 00:25:49,620
platform is under development by Gennaro

00:25:35,380 --> 00:25:52,590
is who they're paid by the see I said so

00:25:49,620 --> 00:25:56,530
so we've covered the current status

00:25:52,590 --> 00:25:58,210
let's look forward to what's going to

00:25:56,530 --> 00:26:04,110
happen next and what's been I think I

00:25:58,210 --> 00:26:07,300
guess so this is what sees Department

00:26:04,110 --> 00:26:09,550
features introduced in Android some

00:26:07,300 --> 00:26:14,950
features are good some are bad some are

00:26:09,550 --> 00:26:17,020
beyond crazy and they're slowly migrated

00:26:14,950 --> 00:26:20,050
into the kernel if they're good and if

00:26:17,020 --> 00:26:24,940
if there's a community need or desire

00:26:20,050 --> 00:26:30,580
for these features in the case of fences

00:26:24,940 --> 00:26:33,220
that took maybe five years so the time

00:26:30,580 --> 00:26:36,520
scale is very long but this does seem to

00:26:33,220 --> 00:26:38,290
happen and we best in the wider

00:26:36,520 --> 00:26:41,200
community you are getting something out

00:26:38,290 --> 00:26:42,640
of Android which is very nice we

00:26:41,200 --> 00:26:46,429
essentially get

00:26:42,640 --> 00:26:48,770
lovely but it's relatively low effort

00:26:46,429 --> 00:26:50,990
when there's already a concept out there

00:26:48,770 --> 00:26:53,120
there's code that's over this course we

00:26:50,990 --> 00:26:57,850
can just take it modify it to our needs

00:26:53,120 --> 00:27:01,010
and then make it accessible to everyone

00:26:57,850 --> 00:27:03,860
however and this is not entirely true

00:27:01,010 --> 00:27:07,940
for all subsystems if we look at the

00:27:03,860 --> 00:27:11,059
diff but spit up across different parts

00:27:07,940 --> 00:27:14,929
of the kernel you can see that at this

00:27:11,059 --> 00:27:16,730
whole bottom part is beggars and drivers

00:27:14,929 --> 00:27:19,549
are never going to be Austrian for

00:27:16,730 --> 00:27:20,990
various reasons or some farmers will be

00:27:19,549 --> 00:27:24,799
but the majority of them

00:27:20,990 --> 00:27:26,960
there's too much as much Sherman so for

00:27:24,799 --> 00:27:30,200
every new cell phone there's a few

00:27:26,960 --> 00:27:32,809
tweaks here and there and there's not

00:27:30,200 --> 00:27:34,580
really any Korean t effort behind like

00:27:32,809 --> 00:27:38,720
supporting almond it would be too much

00:27:34,580 --> 00:27:42,950
work and to add to that most of these

00:27:38,720 --> 00:27:45,260
drivers run a proprietary firmer block

00:27:42,950 --> 00:27:48,620
so they just notes and stuff into memory

00:27:45,260 --> 00:27:50,929
and then the hardware magically works so

00:27:48,620 --> 00:27:52,149
this stuff does loaded into memory we

00:27:50,929 --> 00:27:54,529
don't have any control over

00:27:52,149 --> 00:27:57,340
sometimes it's signs so even if you

00:27:54,529 --> 00:28:00,830
wanted a controller you can't have it

00:27:57,340 --> 00:28:04,100
sometimes it's not but the device is

00:28:00,830 --> 00:28:06,740
probably maybe by the time we're

00:28:04,100 --> 00:28:09,279
interested in it it's maybe never going

00:28:06,740 --> 00:28:12,049
to be sold again to the new device so

00:28:09,279 --> 00:28:14,149
supporting your old phone is it's just

00:28:12,049 --> 00:28:16,850
not you can support your old phone from

00:28:14,149 --> 00:28:20,270
three years ago but it's not going to

00:28:16,850 --> 00:28:27,520
help you the next generation of stuff

00:28:20,270 --> 00:28:27,520
like it's a one-time effort yeah

00:28:47,589 --> 00:28:56,919
so the way I understand strategy with

00:28:52,549 --> 00:28:59,959
the criminal is to take the kernel LTSs

00:28:56,919 --> 00:29:02,269
and spin an android-based line all

00:28:59,959 --> 00:29:05,690
together from that from a few of the top

00:29:02,269 --> 00:29:07,519
versions and then there was baseline now

00:29:05,690 --> 00:29:10,429
to get this are sent or used by the

00:29:07,519 --> 00:29:13,069
vendors like although to add whatever

00:29:10,429 --> 00:29:17,479
called home attic they need just upon

00:29:13,069 --> 00:29:20,690
stuff and that pile of stuff is what

00:29:17,479 --> 00:29:22,759
we're seeing here in a dip like that's

00:29:20,690 --> 00:29:27,769
the heart or probably never going to see

00:29:22,759 --> 00:29:29,809
support for I do think that Google cares

00:29:27,769 --> 00:29:32,599
this is painful for them this is painful

00:29:29,809 --> 00:29:34,940
for us too but there's only so much

00:29:32,599 --> 00:29:36,529
honestly how the founders need to

00:29:34,940 --> 00:29:38,659
support their heart or somehow and they

00:29:36,529 --> 00:29:44,169
have very little interest in us to do

00:29:38,659 --> 00:29:46,819
much of this stuff so in terms of having

00:29:44,169 --> 00:29:48,079
interests aligned and in our community

00:29:46,819 --> 00:29:51,049
interests are very well aligned with

00:29:48,079 --> 00:29:58,249
Google in general but partner butters

00:29:51,049 --> 00:30:00,949
are interested in this stuff so yeah

00:29:58,249 --> 00:30:03,109
getting back to the dip it's pretty cool

00:30:00,949 --> 00:30:06,849
concepts like this there's no clear

00:30:03,109 --> 00:30:12,739
trend here and much of it is virus

00:30:06,849 --> 00:30:15,199
unfortunately but overall there's I

00:30:12,739 --> 00:30:19,429
would say this on a positive to be

00:30:15,199 --> 00:30:22,579
possible things to be said we're slowly

00:30:19,429 --> 00:30:26,539
pushing the industry to west of the

00:30:22,579 --> 00:30:29,089
source and by doing so we were able to

00:30:26,539 --> 00:30:32,539
increase about the speed for let's say a

00:30:29,089 --> 00:30:35,049
small company that just want to make or

00:30:32,539 --> 00:30:37,729
run Android on their own platform and

00:30:35,049 --> 00:30:41,869
that's relatively feasible you can do

00:30:37,729 --> 00:30:44,299
that like one one engineer and a few

00:30:41,869 --> 00:30:47,869
like months probably able to bring 100

00:30:44,299 --> 00:30:51,499
on a new device given up the hardware

00:30:47,869 --> 00:30:56,499
selected has good kernel support so yeah

00:30:51,499 --> 00:30:58,549
using one of the you know most normal

00:30:56,499 --> 00:30:59,419
embedded platforms is probably a good

00:30:58,549 --> 00:31:02,389
way to go about it

00:30:59,419 --> 00:31:05,809
making sure enough the graphics part is

00:31:02,389 --> 00:31:07,579
supported in the kernel that there's not

00:31:05,809 --> 00:31:15,219
a lot more than not required to bring

00:31:07,579 --> 00:31:19,669
something else so it's also nice into a

00:31:15,219 --> 00:31:21,469
small tender being able to get started

00:31:19,669 --> 00:31:23,029
with the stuff we have a little bit all

00:31:21,469 --> 00:31:26,690
this infrastructure

00:31:23,029 --> 00:31:28,850
anyone can do it you can do it you told

00:31:26,690 --> 00:31:32,390
me this is so complicated uh zijn maybe

00:31:28,850 --> 00:31:38,750
you just need a yeah that partner device

00:31:32,390 --> 00:31:41,120
that's easy to to program you another

00:31:38,750 --> 00:31:43,130
part of this that's sort of not really

00:31:41,120 --> 00:31:45,890
spoken about too much and maybe gone

00:31:43,130 --> 00:31:48,919
obvious it's not the open-source drivers

00:31:45,890 --> 00:31:51,890
how that quality must normally higher

00:31:48,919 --> 00:31:54,590
higher than the proprietary ones if we

00:31:51,890 --> 00:31:57,350
look at the multi DP drivers personable

00:31:54,590 --> 00:32:01,880
they're not so good in fact they're very

00:31:57,350 --> 00:32:03,620
not so good which is nice for us in the

00:32:01,880 --> 00:32:06,080
sense that you can easily make something

00:32:03,620 --> 00:32:07,610
that's asked good but we can also

00:32:06,080 --> 00:32:11,330
surpass them we could make something

00:32:07,610 --> 00:32:15,200
that's better than anything that's never

00:32:11,330 --> 00:32:22,850
existed before and yeah that's I guess a

00:32:15,200 --> 00:32:24,679
nice feather in our cap and lastly all

00:32:22,850 --> 00:32:26,809
this work I think in general this

00:32:24,679 --> 00:32:29,840
appreciate on this horse forward like

00:32:26,809 --> 00:32:34,059
we're pushing into the proprietary

00:32:29,840 --> 00:32:36,679
driver space we're also putting Android

00:32:34,059 --> 00:32:39,649
into a realm where it's very accessible

00:32:36,679 --> 00:32:43,100
by normal people like small corporations

00:32:39,649 --> 00:32:45,169
or just individuals which is rather nice

00:32:43,100 --> 00:32:47,230
that's what I care about making

00:32:45,169 --> 00:32:50,630
ill-disposed available to everyone and

00:32:47,230 --> 00:32:54,169
then does it and if you want to get a

00:32:50,630 --> 00:32:59,289
whole thing there's no better handle any

00:32:54,169 --> 00:32:59,289
questions yeah

00:33:06,919 --> 00:33:43,429
there is custom I don't actually know

00:33:55,460 --> 00:34:37,919
than you or so so yeah so in order to

00:34:34,859 --> 00:34:40,109
have an Italian is respect and you need

00:34:37,919 --> 00:34:43,440
the DRM article was a component you need

00:34:40,109 --> 00:34:47,790
mason you need sunbrella you just pick

00:34:43,440 --> 00:34:48,970
one series and the colonel does just

00:34:47,790 --> 00:34:52,060
build with

00:34:48,970 --> 00:34:53,919
and support for Android and whatever are

00:34:52,060 --> 00:34:57,250
very Harvard later

00:34:53,919 --> 00:34:59,920
this is easy stunt by looking at the

00:34:57,250 --> 00:35:03,040
Nara build America's they maintain unity

00:34:59,920 --> 00:35:07,240
when the best for different targets even

00:35:03,040 --> 00:35:11,700
in x86 most before debugging purposes so

00:35:07,240 --> 00:35:14,800
a manifest is sort of a part of the

00:35:11,700 --> 00:35:19,390
version control that's used for four

00:35:14,800 --> 00:35:24,990
hundred and you can add in like a local

00:35:19,390 --> 00:35:27,130
manifest that supplements the the normal

00:35:24,990 --> 00:35:29,470
reversion you've been checking out and

00:35:27,130 --> 00:35:31,030
it will pull in additional components

00:35:29,470 --> 00:35:34,180
and remove some upon the style or a

00:35:31,030 --> 00:35:35,920
conflicting and by using a local

00:35:34,180 --> 00:35:40,359
manifest you can get access to through

00:35:35,920 --> 00:35:45,089
the Nara x86 and arm be a to be seven

00:35:40,359 --> 00:35:50,020
targets which contains all this stuff

00:35:45,089 --> 00:35:54,130
yeah so you show me the two deaths in

00:35:50,020 --> 00:35:55,930
normal form you have maybe four Hardware

00:35:54,130 --> 00:35:58,390
layers basically how do you solve it now

00:35:55,930 --> 00:36:01,660
you just do software wise in the seventh

00:35:58,390 --> 00:36:06,010
right so the other composer does this

00:36:01,660 --> 00:36:08,230
poorly by just using the CPU to plot on

00:36:06,010 --> 00:36:10,480
these layers you can do it using the

00:36:08,230 --> 00:36:11,920
OpenGL if you want to you can just do a

00:36:10,480 --> 00:36:15,130
new single bulkhead if you want to be

00:36:11,920 --> 00:36:19,060
fancy but support for doing it with both

00:36:15,130 --> 00:36:20,500
of those things actually the OpenGL

00:36:19,060 --> 00:36:23,380
support is there the vault this point is

00:36:20,500 --> 00:36:28,530
not so you can use the GPU if you want

00:36:23,380 --> 00:36:28,530
to any more questions

00:36:29,660 --> 00:36:32,349
all right

00:36:33,010 --> 00:36:37,449

YouTube URL: https://www.youtube.com/watch?v=sT_8VeBp5UU


