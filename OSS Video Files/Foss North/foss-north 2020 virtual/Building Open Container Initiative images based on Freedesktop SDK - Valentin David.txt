Title: Building Open Container Initiative images based on Freedesktop SDK - Valentin David
Publication date: 2020-04-28
Playlist: foss-north 2020 virtual
Description: 
	Talk details: https://foss-north.se/2020/speakers-and-talks.html#vdavid
Conference details: https://foss-north.se/2020/
Captions: 
	00:00:02,700 --> 00:00:08,700
welcome to force north the virtual

00:00:05,850 --> 00:00:10,980
edition we would like to thank all our

00:00:08,700 --> 00:00:15,030
sponsors and partners in this difficult

00:00:10,980 --> 00:00:18,500
situation our gold sponsors look soft

00:00:15,030 --> 00:00:22,669
and ansible by Red Hat

00:00:18,500 --> 00:00:24,920
our silver sponsors ITRs group and make

00:00:22,669 --> 00:00:28,539
it right

00:00:24,920 --> 00:00:31,630
our base sponsors

00:00:28,539 --> 00:00:33,820
our partner projects the open source

00:00:31,630 --> 00:00:36,910
community and the region of Gothenburg

00:00:33,820 --> 00:00:38,980
and a huge thanks to our awesome

00:00:36,910 --> 00:00:43,600
community this would not have been

00:00:38,980 --> 00:00:45,730
possible without you so next up will be

00:00:43,600 --> 00:00:47,680
Valentin David who will be talking about

00:00:45,730 --> 00:00:51,640
the building open container initiative

00:00:47,680 --> 00:00:53,399
images based on free desktop SDK the

00:00:51,640 --> 00:00:57,729
stage is yours

00:00:53,399 --> 00:01:01,930
hello everybody so yeah my name I work

00:00:57,729 --> 00:01:12,549
for quitting and my main occupation is

00:01:01,930 --> 00:01:15,189
my work basically and we'll see ya how

00:01:12,549 --> 00:01:20,470
to be continuous with it image the

00:01:15,189 --> 00:01:22,540
container image for containers so what

00:01:20,470 --> 00:01:25,119
is the friend s top SDK the statistic is

00:01:22,540 --> 00:01:28,090
runtime for flat-pack applications so

00:01:25,119 --> 00:01:35,229
maybe not everybody knows what a kiss a

00:01:28,090 --> 00:01:39,640
kiss is continuous system for for a

00:01:35,229 --> 00:01:41,740
desktop application for Linux so that

00:01:39,640 --> 00:01:44,290
means that we are the Baloch runtime and

00:01:41,740 --> 00:01:48,580
SDK to build continuous for desktop

00:01:44,290 --> 00:01:53,979
applications for next flat-pack is not

00:01:48,580 --> 00:02:00,670
ready to the open quaternary initiative

00:01:53,979 --> 00:02:04,119
is a different type of containers but

00:02:00,670 --> 00:02:05,799
still it's it's still some kind of

00:02:04,119 --> 00:02:09,670
container so there is some relations but

00:02:05,799 --> 00:02:14,129
it's not the same thing so what we am at

00:02:09,670 --> 00:02:17,049
to friend the sophisticate is not the

00:02:14,129 --> 00:02:21,670
docker container assuming that is it's

00:02:17,049 --> 00:02:24,519
the main thing we do is flat back on top

00:02:21,670 --> 00:02:28,030
of that fridges top s together other

00:02:24,519 --> 00:02:31,799
runtimes that are built KD SDK and and

00:02:28,030 --> 00:02:39,549
no magic SDK which are also for back

00:02:31,799 --> 00:02:41,740
applications just to be some more

00:02:39,549 --> 00:02:47,350
information about the features of as the

00:02:41,740 --> 00:02:52,390
we release every year for every release

00:02:47,350 --> 00:02:57,720
we have two years of maintenance we have

00:02:52,390 --> 00:03:01,390
a bi-stability in each release branch so

00:02:57,720 --> 00:03:04,720
we make sure that we are not going to

00:03:01,390 --> 00:03:07,980
break your application we do that by

00:03:04,720 --> 00:03:11,170
running tools that will verify that

00:03:07,980 --> 00:03:14,700
there's no ring with symbols on your

00:03:11,170 --> 00:03:17,650
symbols so that there is no worry and

00:03:14,700 --> 00:03:22,260
the runtime can be updated whisper

00:03:17,650 --> 00:03:26,560
exists without breaking we also have

00:03:22,260 --> 00:03:29,790
some automatic scan for probabilities so

00:03:26,560 --> 00:03:33,070
we look at the CV data list and we

00:03:29,790 --> 00:03:36,070
verified against all the sources that we

00:03:33,070 --> 00:03:40,570
use and see whether we are actually of

00:03:36,070 --> 00:03:43,120
some video images so that we can fix

00:03:40,570 --> 00:03:45,250
those the fix is not automatic you have

00:03:43,120 --> 00:03:52,000
to do it but at least we have a report

00:03:45,250 --> 00:03:53,890
of what we know we are with the fridge I

00:03:52,000 --> 00:03:55,510
stopped SDK is almost wrapped so we

00:03:53,890 --> 00:03:58,210
don't we are not based on any

00:03:55,510 --> 00:04:03,460
distribution or anything which it's just

00:03:58,210 --> 00:04:04,870
a bit from the from scratch and to build

00:04:03,460 --> 00:04:07,450
from scratch you still need to have a

00:04:04,870 --> 00:04:10,390
run time and we build every release

00:04:07,450 --> 00:04:12,520
branch with the release branch the

00:04:10,390 --> 00:04:17,200
previous release French there is no

00:04:12,520 --> 00:04:20,890
element that there are tests we support

00:04:17,200 --> 00:04:23,470
multiple architectures so Intel arm and

00:04:20,890 --> 00:04:25,150
we also have experiments in PowerPC so

00:04:23,470 --> 00:04:29,800
we have everything that were working we

00:04:25,150 --> 00:04:34,360
just don't have the resource to to say

00:04:29,800 --> 00:04:39,660
that we support it completely for the

00:04:34,360 --> 00:04:42,730
internet arm so we are we are going to

00:04:39,660 --> 00:04:45,490
we are I've already removed as support

00:04:42,730 --> 00:04:47,980
for 32 bits but we still keep the sub

00:04:45,490 --> 00:04:50,340
stupid as a meeting our support so that

00:04:47,980 --> 00:04:50,340
uh

00:04:50,620 --> 00:04:56,590
if you can still run 32-bit applications

00:04:54,160 --> 00:05:02,289
but you will still need to run on a

00:04:56,590 --> 00:05:05,560
64-bit environment forearm we still have

00:05:02,289 --> 00:05:11,710
the support for arm but we might remove

00:05:05,560 --> 00:05:14,259
it and keep on it around 64 C so what

00:05:11,710 --> 00:05:17,729
the SDK contest it contains lots of

00:05:14,259 --> 00:05:19,900
things but it doesn't contain everything

00:05:17,729 --> 00:05:25,630
there is a lot of seen on this slide

00:05:19,900 --> 00:05:28,599
maybe tastes a bit more than that I just

00:05:25,630 --> 00:05:33,639
wanted to show quickly some names that

00:05:28,599 --> 00:05:37,360
people can recognize there to give you

00:05:33,639 --> 00:05:40,870
an impression of what it contains so we

00:05:37,360 --> 00:05:42,190
are the basic runtime for desktop

00:05:40,870 --> 00:05:45,180
application so we have lots of things

00:05:42,190 --> 00:05:47,409
that are then ready to desktop

00:05:45,180 --> 00:05:52,750
everything that tests to do with Wayland

00:05:47,409 --> 00:05:56,620
X we have gtk ideal to care we have all

00:05:52,750 --> 00:05:58,900
the open G as we can open CL we have

00:05:56,620 --> 00:06:01,030
audio as well and singing that but we

00:05:58,900 --> 00:06:03,970
also have the basic things like we have

00:06:01,030 --> 00:06:07,810
a sea library of course shell Croix

00:06:03,970 --> 00:06:12,490
tears and we have web some compilers

00:06:07,810 --> 00:06:15,060
some thing like that so it's really

00:06:12,490 --> 00:06:20,889
basic things thing that there are you

00:06:15,060 --> 00:06:25,870
kind of everywhere so we already have

00:06:20,889 --> 00:06:29,460
that but we don't have everything we are

00:06:25,870 --> 00:06:33,490
on that we have around like 300 and 400

00:06:29,460 --> 00:06:35,560
pieces of software they're just not

00:06:33,490 --> 00:06:38,800
first is that the choice of technologies

00:06:35,560 --> 00:06:41,770
are in the fittest up SDK is not another

00:06:38,800 --> 00:06:45,250
some endorsement by the free desktop or

00:06:41,770 --> 00:06:47,710
organization just if it there it has

00:06:45,250 --> 00:06:50,050
nothing to do it just we try to take a

00:06:47,710 --> 00:06:52,080
section of making something to work but

00:06:50,050 --> 00:06:54,130
it's not like it doesn't mean that

00:06:52,080 --> 00:06:56,729
usually distribution should use those

00:06:54,130 --> 00:06:56,729
things that

00:07:01,060 --> 00:07:08,330
freida stuff basically is built on

00:07:02,960 --> 00:07:14,750
ministry and not built on its bit with

00:07:08,330 --> 00:07:18,320
this is a tool to build this allow us to

00:07:14,750 --> 00:07:20,510
build different elements in separate

00:07:18,320 --> 00:07:23,540
sandbox what we call an element is every

00:07:20,510 --> 00:07:26,270
piece of software for example gdb is

00:07:23,540 --> 00:07:32,060
built separately from gypsy it's not the

00:07:26,270 --> 00:07:37,010
same sandbox we it's it's reproducible

00:07:32,060 --> 00:07:39,320
so we have quite good control on on the

00:07:37,010 --> 00:07:41,920
sandbox so we know that every time we

00:07:39,320 --> 00:07:44,240
build it should have the same result

00:07:41,920 --> 00:07:47,780
[Music]

00:07:44,240 --> 00:07:50,810
this is cache so that means that if we

00:07:47,780 --> 00:07:53,030
have already built things once we don't

00:07:50,810 --> 00:07:56,360
have to reveal them we have servers that

00:07:53,030 --> 00:07:57,889
can provide cash so when you have to

00:07:56,360 --> 00:08:00,740
build all these things takes a lot of

00:07:57,889 --> 00:08:03,560
time so a new cache can be very good

00:08:00,740 --> 00:08:05,599
especially when you have something that

00:08:03,560 --> 00:08:06,830
doesn't combine any of to fix it and

00:08:05,599 --> 00:08:10,700
that you have to compare again you can

00:08:06,830 --> 00:08:13,460
watch rebuild everything we can know the

00:08:10,700 --> 00:08:15,830
pad with so I mean since we have send

00:08:13,460 --> 00:08:19,870
boxes there is no reason why you can't

00:08:15,830 --> 00:08:19,870
beat a civil project in the same time

00:08:25,400 --> 00:08:29,889
why do we want to build a CI images

00:08:30,669 --> 00:08:37,039
because I mean this is not the goal of

00:08:34,940 --> 00:08:39,919
the 50 that's the basic eight first goal

00:08:37,039 --> 00:08:42,400
is to provide a runtime for desktop

00:08:39,919 --> 00:08:48,080
application and OC is not for this stuff

00:08:42,400 --> 00:08:52,130
but we have seen that for us we need for

00:08:48,080 --> 00:08:57,320
our own infrastructure we of course just

00:08:52,130 --> 00:09:00,529
took her and we need some images and it

00:08:57,320 --> 00:09:04,279
felt like in some places it was better

00:09:00,529 --> 00:09:12,190
for us to use free desktop SDK and

00:09:04,279 --> 00:09:12,190
bittering to build our own docker images

00:09:12,790 --> 00:09:21,610
we know that some existing CI that bit

00:09:18,120 --> 00:09:28,750
existing applications desktop

00:09:21,610 --> 00:09:30,480
applications use docker or similar

00:09:28,750 --> 00:09:39,580
[Music]

00:09:30,480 --> 00:09:43,839
container system and and we need to it's

00:09:39,580 --> 00:09:47,860
a good idea to provide docker or Basia

00:09:43,839 --> 00:09:52,170
images for those systems so that people

00:09:47,860 --> 00:09:52,170
can do immigration that is quite smooth

00:09:52,230 --> 00:10:00,220
so that they can build their desktop

00:09:55,690 --> 00:10:03,070
application against our free database

00:10:00,220 --> 00:10:07,750
again so that it can run safely on the

00:10:03,070 --> 00:10:10,480
runtime of the free database scheme then

00:10:07,750 --> 00:10:13,120
there are some cases where there are

00:10:10,480 --> 00:10:15,370
some applications that have some

00:10:13,120 --> 00:10:19,329
different components that are demon and

00:10:15,370 --> 00:10:22,180
desktop and we might think that in those

00:10:19,329 --> 00:10:26,380
cases that might be nice to be able to

00:10:22,180 --> 00:10:29,339
render daemon in a container where you

00:10:26,380 --> 00:10:33,370
run a flatback application on top of it

00:10:29,339 --> 00:10:37,300
if you can be both in the same time in

00:10:33,370 --> 00:10:38,950
the same system that might be useful so

00:10:37,300 --> 00:10:43,149
being able to output a flatback

00:10:38,950 --> 00:10:47,079
application and posea image might be

00:10:43,149 --> 00:10:50,320
useful that is very limited thing that's

00:10:47,079 --> 00:10:54,220
not a me application that does that and

00:10:50,320 --> 00:10:59,709
also if you want to each bit stream to

00:10:54,220 --> 00:11:03,420
do osya images well first up is the key

00:10:59,709 --> 00:11:06,040
is probably something we want to use

00:11:03,420 --> 00:11:07,839
because this is currently the main

00:11:06,040 --> 00:11:11,649
project that is entirely built with

00:11:07,839 --> 00:11:13,120
Spitzer so if there was another project

00:11:11,649 --> 00:11:18,579
maybe we could have a look at that but

00:11:13,120 --> 00:11:21,040
this is why so I've tried to talk about

00:11:18,579 --> 00:11:23,920
this before in a different conference

00:11:21,040 --> 00:11:26,140
but I saw that it was a bit hard to

00:11:23,920 --> 00:11:28,180
understand what was bit stream so

00:11:26,140 --> 00:11:32,560
we'll start with a very quick

00:11:28,180 --> 00:11:34,089
introduction of this room so it's not

00:11:32,560 --> 00:11:37,750
trigger tutorial it's very on the

00:11:34,089 --> 00:11:41,709
surface but it will be really useful to

00:11:37,750 --> 00:11:46,120
you for you to see what I'm talking

00:11:41,709 --> 00:11:49,600
about so I will go with an example

00:11:46,120 --> 00:11:53,829
example of being bidding new arrow so

00:11:49,600 --> 00:11:58,980
hello is a is a small project just to

00:11:53,829 --> 00:12:03,910
show it's demonstration out to make a

00:11:58,980 --> 00:12:07,200
open source software and it just prints

00:12:03,910 --> 00:12:10,660
a hello in the console is very simple

00:12:07,200 --> 00:12:12,160
but ok so here we want to make a

00:12:10,660 --> 00:12:18,490
business project that will build that

00:12:12,160 --> 00:12:21,089
and provide OCR image right so here we

00:12:18,490 --> 00:12:23,529
have a directory structure of our

00:12:21,089 --> 00:12:25,360
visiting project for green arrow which

00:12:23,529 --> 00:12:28,750
is not the innovative project the

00:12:25,360 --> 00:12:32,140
project will fetch it from either at our

00:12:28,750 --> 00:12:34,510
ball or from get but here we just have

00:12:32,140 --> 00:12:39,490
our basin project which is a project

00:12:34,510 --> 00:12:44,680
that explain how to build narrow we have

00:12:39,490 --> 00:12:48,399
we have civil fines and this is what how

00:12:44,680 --> 00:12:51,490
we usually arrange our files but you can

00:12:48,399 --> 00:12:53,290
do the way you want the main thing first

00:12:51,490 --> 00:12:55,899
is we have a project that conf that

00:12:53,290 --> 00:13:01,570
describes the project itself where we

00:12:55,899 --> 00:13:05,980
will have the configuration and then we

00:13:01,570 --> 00:13:12,190
will have elements and you will see that

00:13:05,980 --> 00:13:17,050
you will see that the elements are files

00:13:12,190 --> 00:13:18,640
that the BST exemption and eventually

00:13:17,050 --> 00:13:22,540
you can also have local files for

00:13:18,640 --> 00:13:23,529
example patches and maybe local scripts

00:13:22,540 --> 00:13:25,149
and things like that that you want

00:13:23,529 --> 00:13:29,290
imports that you don't want to download

00:13:25,149 --> 00:13:31,209
from somewhere else then this product

00:13:29,290 --> 00:13:36,699
there wouldn't be no extra file they

00:13:31,209 --> 00:13:39,920
will be on elements so there is freely

00:13:36,699 --> 00:13:42,740
sophisticated leaf elements which is a

00:13:39,920 --> 00:13:47,120
special eminence it's what we call it a

00:13:42,740 --> 00:13:48,800
junction and I will not show you this my

00:13:47,120 --> 00:13:51,370
motto is written because you just have

00:13:48,800 --> 00:13:54,170
to copy past this file it's not

00:13:51,370 --> 00:13:56,120
important how it's written inside but it

00:13:54,170 --> 00:13:57,740
will describe how to fetch the feeder

00:13:56,120 --> 00:13:59,360
sophisticate so you will be able to

00:13:57,740 --> 00:14:06,050
access the elements from finished

00:13:59,360 --> 00:14:10,760
obesity then we will have more many

00:14:06,050 --> 00:14:11,329
months to build our project a lot of

00:14:10,760 --> 00:14:14,870
ISTE

00:14:11,329 --> 00:14:17,660
so we will see how L dubba C is written

00:14:14,870 --> 00:14:20,540
this is the time so first we will start

00:14:17,660 --> 00:14:24,019
with the describing which plugin we want

00:14:20,540 --> 00:14:25,550
to use receive as a MIDI musical plugins

00:14:24,019 --> 00:14:28,100
depending on the base system that the

00:14:25,550 --> 00:14:30,410
project you want to be released here we

00:14:28,100 --> 00:14:37,519
use it it's easy so - so auto confined

00:14:30,410 --> 00:14:40,880
to make this not only we the PO

00:14:37,519 --> 00:14:42,110
the plug-in will provide or we already

00:14:40,880 --> 00:14:44,029
know how to build the project so you

00:14:42,110 --> 00:14:47,480
wouldn't have to explain how to build

00:14:44,029 --> 00:14:52,190
but also it will be useful for in the

00:14:47,480 --> 00:14:53,870
project configuration itself so - if you

00:14:52,190 --> 00:14:56,329
want to configure all your total's

00:14:53,870 --> 00:14:58,339
project to be built in a certain way you

00:14:56,329 --> 00:15:01,820
can overwrite things in the project

00:14:58,339 --> 00:15:03,890
configuration then after we would have

00:15:01,820 --> 00:15:05,660
our dependencies so there are two types

00:15:03,890 --> 00:15:07,220
of dependencies in between it's built

00:15:05,660 --> 00:15:10,459
offenses and runtime dependencies and

00:15:07,220 --> 00:15:11,360
when you don't specify for nepali are

00:15:10,459 --> 00:15:14,510
the puts up in court

00:15:11,360 --> 00:15:16,130
it's a both build and run time so you

00:15:14,510 --> 00:15:20,089
see that the dependences correspond to

00:15:16,130 --> 00:15:23,300
elements the BST files and those are

00:15:20,089 --> 00:15:24,740
imported from finished up SDK you see

00:15:23,300 --> 00:15:26,420
that we went through the function

00:15:24,740 --> 00:15:31,279
elements for the status indicator a

00:15:26,420 --> 00:15:35,540
sticker on the the element that we want

00:15:31,279 --> 00:15:39,079
to to get if you want to use an element

00:15:35,540 --> 00:15:41,589
from the same project you don't have to

00:15:39,079 --> 00:15:47,089
put the junction in front you just use

00:15:41,589 --> 00:15:49,310
project leader name this would be useful

00:15:47,089 --> 00:15:52,950
this will be used by you soon to be able

00:15:49,310 --> 00:15:56,400
to build sandbox

00:15:52,950 --> 00:15:59,970
for building but also later if you want

00:15:56,400 --> 00:16:01,200
to run the project then after we will

00:15:59,970 --> 00:16:03,510
have some constant Christine magician

00:16:01,200 --> 00:16:05,250
from the plugin so we can overwrite lots

00:16:03,510 --> 00:16:07,590
of things variables is not on variant

00:16:05,250 --> 00:16:09,120
environment variables is those variables

00:16:07,590 --> 00:16:11,460
are just variables for the configuration

00:16:09,120 --> 00:16:15,090
there are lots of different things would

00:16:11,460 --> 00:16:19,680
be not cool into this but here I wanted

00:16:15,090 --> 00:16:23,430
to say that the bootstrap script I want

00:16:19,680 --> 00:16:24,960
to pass some parameters so that it

00:16:23,430 --> 00:16:28,440
doesn't try to download on the internet

00:16:24,960 --> 00:16:32,400
because this break the what's called a

00:16:28,440 --> 00:16:34,650
refreshable or previous ability and then

00:16:32,400 --> 00:16:38,340
after I will explain I will describe the

00:16:34,650 --> 00:16:41,070
source all sources need to be put there

00:16:38,340 --> 00:16:44,580
there's no networks as access from the

00:16:41,070 --> 00:16:46,080
build sandbox because we won't work with

00:16:44,580 --> 00:16:49,740
disability so everything has to be

00:16:46,080 --> 00:16:52,080
declared and there are lots of plugins

00:16:49,740 --> 00:16:58,500
here is to get plug-in this one is a

00:16:52,080 --> 00:17:00,540
specific plug-in that tracks ties yes so

00:16:58,500 --> 00:17:04,320
this is this is how an element is

00:17:00,540 --> 00:17:08,339
written and if we want to put 257 we can

00:17:04,320 --> 00:17:12,930
just call BST bit and with the name of

00:17:08,339 --> 00:17:14,220
the element and there will be that

00:17:12,930 --> 00:17:18,209
something that will happen the digital

00:17:14,220 --> 00:17:22,020
spitting containers and will also try to

00:17:18,209 --> 00:17:23,550
get some from the cache servers all the

00:17:22,020 --> 00:17:25,110
dependencies if it doesn't find it will

00:17:23,550 --> 00:17:27,120
bill it for you so if you just do

00:17:25,110 --> 00:17:31,890
everything at once you don't have to

00:17:27,120 --> 00:17:35,370
worry too much Danny wants a bit you can

00:17:31,890 --> 00:17:37,800
just run to test it so yes tisha so you

00:17:35,370 --> 00:17:40,950
can either open - on into it or you can

00:17:37,800 --> 00:17:43,940
just render comment anything everyone ok

00:17:40,950 --> 00:17:47,220
and if you want you can check out the

00:17:43,940 --> 00:17:51,390
artifact so make a root of s and it will

00:17:47,220 --> 00:17:53,880
make directory which contain all the

00:17:51,390 --> 00:17:56,370
files of the element and all its runtime

00:17:53,880 --> 00:17:58,460
dependencies so it's ready to run so you

00:17:56,370 --> 00:18:03,929
can do it change routes in there every

00:17:58,460 --> 00:18:10,490
you want so that was just quick intro

00:18:03,929 --> 00:18:13,549
to bitstream let's see

00:18:10,490 --> 00:18:22,259
now I will talk about a bit about

00:18:13,549 --> 00:18:27,059
container images so how do we typically

00:18:22,259 --> 00:18:32,389
the OCI images I think of and what what

00:18:27,059 --> 00:18:36,809
is done is you choose a base image and

00:18:32,389 --> 00:18:42,119
probably the distribution so like the

00:18:36,809 --> 00:18:44,850
best talker or OCI image for Debian or

00:18:42,119 --> 00:18:48,480
fedora or and pine very common

00:18:44,850 --> 00:18:51,960
distribution to use and then you will

00:18:48,480 --> 00:18:54,559
write a docker file and the way you will

00:18:51,960 --> 00:18:57,929
your image would be first you probably

00:18:54,559 --> 00:19:00,840
use a package manager to add the

00:18:57,929 --> 00:19:02,610
dependencies that you need then you will

00:19:00,840 --> 00:19:05,730
sequentially build all the differences

00:19:02,610 --> 00:19:07,619
if you don't have things as package or

00:19:05,730 --> 00:19:09,720
you need different version that what is

00:19:07,619 --> 00:19:12,779
packaged and then you build your main

00:19:09,720 --> 00:19:14,759
project and then optionally you have

00:19:12,779 --> 00:19:19,279
some tricks to reduce the size of the

00:19:14,759 --> 00:19:21,929
image by just doing multistage image and

00:19:19,279 --> 00:19:26,999
then after you do some configuration of

00:19:21,929 --> 00:19:29,690
the like occurring exposed parts and

00:19:26,999 --> 00:19:34,220
what comment or anything like that

00:19:29,690 --> 00:19:37,679
so here is an example with a hello again

00:19:34,220 --> 00:19:44,700
so here a bit from Debian because this

00:19:37,679 --> 00:19:47,220
is what I'm most used to so I'm not

00:19:44,700 --> 00:19:50,429
going to explain everything but this is

00:19:47,220 --> 00:19:52,950
the docker file and it's a very very

00:19:50,429 --> 00:19:54,899
simple way to look at another very

00:19:52,950 --> 00:19:56,580
advanced it's very easy to understand so

00:19:54,899 --> 00:20:00,450
here you have you see that on the

00:19:56,580 --> 00:20:02,610
comments are from red orchid here yeah

00:20:00,450 --> 00:20:06,559
could be and untrim Enterprise so it's

00:20:02,610 --> 00:20:06,559
most of them are just for any commands

00:20:07,190 --> 00:20:17,490
so this is very simple so forth

00:20:14,710 --> 00:20:20,620
things it's due care files are very good

00:20:17,490 --> 00:20:21,520
but when you get something bigger it's

00:20:20,620 --> 00:20:23,350
not that great

00:20:21,520 --> 00:20:28,929
there is also things like here you would

00:20:23,350 --> 00:20:33,130
notice that we don't have a pretty CPC

00:20:28,929 --> 00:20:36,159
apt-get update that doesn't work this

00:20:33,130 --> 00:20:40,960
might get new packages and we want to

00:20:36,159 --> 00:20:47,110
know that there is an update and we want

00:20:40,960 --> 00:20:51,880
to also be able to backtrack on those to

00:20:47,110 --> 00:20:55,390
be able to for example the basic issues

00:20:51,880 --> 00:20:57,970
to understand if if the beverage is that

00:20:55,390 --> 00:21:00,190
you spend on the debt somewhere we want

00:20:57,970 --> 00:21:02,559
to know exactly what updated it is but

00:21:00,190 --> 00:21:04,210
there's no control there the keep

00:21:02,559 --> 00:21:05,980
running here is not very important

00:21:04,210 --> 00:21:07,360
because it's there is a check out that

00:21:05,980 --> 00:21:09,429
is correct but if you don't do it to

00:21:07,360 --> 00:21:13,770
check out correctly then it's not good

00:21:09,429 --> 00:21:17,640
and the bootstrap commander here will

00:21:13,770 --> 00:21:22,470
with tunneled sources from internet

00:21:17,640 --> 00:21:24,850
which is not very good and it's hot you

00:21:22,470 --> 00:21:27,520
to have control on that because the

00:21:24,850 --> 00:21:30,909
default configuration on to build the

00:21:27,520 --> 00:21:36,610
docker file is is to have a network and

00:21:30,909 --> 00:21:40,029
we don't really want that and come back

00:21:36,610 --> 00:21:41,590
to the point where what if you want to

00:21:40,029 --> 00:21:43,809
be more things in your docker file

00:21:41,590 --> 00:21:47,860
because the distribution doesn't provide

00:21:43,809 --> 00:21:50,710
what you need ever because the package

00:21:47,860 --> 00:21:53,860
for the library that you want it doesn't

00:21:50,710 --> 00:21:59,380
think is or or it's a different fashion

00:21:53,860 --> 00:22:01,899
that you want or you need a patch so

00:21:59,380 --> 00:22:03,880
there are two ways to approach this

00:22:01,899 --> 00:22:05,710
either you make a package for the

00:22:03,880 --> 00:22:09,700
distribution that you used or you built

00:22:05,710 --> 00:22:12,100
directly in the car I may be the

00:22:09,700 --> 00:22:14,260
cleanest thing it would be to attach for

00:22:12,100 --> 00:22:16,840
this division but first of all package

00:22:14,260 --> 00:22:19,029
manager are quite complex things they

00:22:16,840 --> 00:22:21,220
are very great but they give you a

00:22:19,029 --> 00:22:24,490
situation that are really above

00:22:21,220 --> 00:22:26,350
containers like upgrade and on its own

00:22:24,490 --> 00:22:28,090
this is things that are really useless

00:22:26,350 --> 00:22:28,630
for continuous but you have to take care

00:22:28,090 --> 00:22:35,410
when

00:22:28,630 --> 00:22:37,120
make a package also most of pack and

00:22:35,410 --> 00:22:39,910
manager don't have don't come with us in

00:22:37,120 --> 00:22:43,230
box directly you just built directly on

00:22:39,910 --> 00:22:45,730
the distribution you can have sandbox

00:22:43,230 --> 00:22:47,290
but it start to be a bit complex

00:22:45,730 --> 00:22:50,560
especially when you want to be led

00:22:47,290 --> 00:22:53,860
several packages separately really you

00:22:50,560 --> 00:22:57,550
have to have a big infrastructure to to

00:22:53,860 --> 00:22:59,140
build easily lots of packages and make

00:22:57,550 --> 00:23:01,270
sure they all run into the same box and

00:22:59,140 --> 00:23:04,570
material and also the rebuild is not

00:23:01,270 --> 00:23:11,380
automatic if you build dependencies do

00:23:04,570 --> 00:23:14,680
you have to repeat the the Refresh

00:23:11,380 --> 00:23:19,900
dependencies you might have lost a cycle

00:23:14,680 --> 00:23:22,180
so it's a bit difficult to deal with and

00:23:19,900 --> 00:23:25,510
the other way is to use docker fun and

00:23:22,180 --> 00:23:27,130
the prime is that first it doesn't have

00:23:25,510 --> 00:23:32,140
support for common with system so you

00:23:27,130 --> 00:23:34,930
will have to deal with coding lots of

00:23:32,140 --> 00:23:37,030
Commons and maintain those and if you

00:23:34,930 --> 00:23:41,530
want to change the corporations lots of

00:23:37,030 --> 00:23:43,060
files to lots of lines to modify there

00:23:41,530 --> 00:23:44,440
is no big dependencies between Daka

00:23:43,060 --> 00:23:47,770
right so if you want it to spit into

00:23:44,440 --> 00:23:50,140
musical device which you can do the

00:23:47,770 --> 00:23:52,030
problem is that the order of building

00:23:50,140 --> 00:23:55,300
happens is you will have to deal

00:23:52,030 --> 00:23:57,850
externally and unfortunately things like

00:23:55,300 --> 00:24:03,670
docker compose I think that don't deal

00:23:57,850 --> 00:24:07,920
with building dependencies the cache is

00:24:03,670 --> 00:24:12,340
a bit awkward because it's per command

00:24:07,920 --> 00:24:13,960
so if you have complex graph a definite

00:24:12,340 --> 00:24:15,720
system doesn't work because you will

00:24:13,960 --> 00:24:19,660
have to build everything that goes after

00:24:15,720 --> 00:24:21,490
and also the as I said the sandbox will

00:24:19,660 --> 00:24:24,360
accelerate the truck access it's not

00:24:21,490 --> 00:24:30,820
thankful for it

00:24:24,360 --> 00:24:33,280
so the OCI images are layered so they

00:24:30,820 --> 00:24:36,130
are based they are very close to the

00:24:33,280 --> 00:24:39,910
docker file every comment will make a

00:24:36,130 --> 00:24:42,220
layer layer will be just it's a it's a

00:24:39,910 --> 00:24:45,700
tar file an archive

00:24:42,220 --> 00:24:49,750
that will contain the the new file for

00:24:45,700 --> 00:24:52,900
the layer and and they will lay over

00:24:49,750 --> 00:24:56,760
each others to make the final file

00:24:52,900 --> 00:25:00,130
system and this is very good for going

00:24:56,760 --> 00:25:03,130
to optimize a bit of storage and

00:25:00,130 --> 00:25:09,940
download it's not the best I hope that

00:25:03,130 --> 00:25:14,200
Ostia will move towards content Balak

00:25:09,940 --> 00:25:15,520
there's the indexing on president having

00:25:14,200 --> 00:25:20,140
this a hearing but for the month we have

00:25:15,520 --> 00:25:26,350
to deal with this and we want to to to

00:25:20,140 --> 00:25:31,419
to have lingering so now we go into the

00:25:26,350 --> 00:25:34,870
read contact how do we do we design the

00:25:31,419 --> 00:25:39,940
images with resume and how you should do

00:25:34,870 --> 00:25:42,580
if you use this so first of all the the

00:25:39,940 --> 00:25:45,789
first idea that you can people have when

00:25:42,580 --> 00:25:48,340
is think about it is well we have a

00:25:45,789 --> 00:25:52,870
graph and we need to make the ears which

00:25:48,340 --> 00:25:54,669
is just like stock what we can do is

00:25:52,870 --> 00:25:57,940
just transport every element into a

00:25:54,669 --> 00:26:00,190
layer then we do a topological sort of

00:25:57,940 --> 00:26:02,470
four layers and then each image is just

00:26:00,190 --> 00:26:07,120
a subsequence that doesn't work very

00:26:02,470 --> 00:26:10,150
well there are many issues and too many

00:26:07,120 --> 00:26:13,000
issues will expand their more than that

00:26:10,150 --> 00:26:16,720
but not completely sure of all the

00:26:13,000 --> 00:26:19,240
details there but to think that I that

00:26:16,720 --> 00:26:24,669
is important to remember is that first

00:26:19,240 --> 00:26:27,370
LCIF and implementations so at first it

00:26:24,669 --> 00:26:31,330
was just took her and people wanted to

00:26:27,370 --> 00:26:33,340
make all of the inflammation and and

00:26:31,330 --> 00:26:35,110
that means you would have different

00:26:33,340 --> 00:26:37,360
information also we would have different

00:26:35,110 --> 00:26:41,289
back-end for every implementation so we

00:26:37,360 --> 00:26:43,630
have lots of different way things might

00:26:41,289 --> 00:26:47,350
work so we we want things to work

00:26:43,630 --> 00:26:50,530
everywhere the if the current

00:26:47,350 --> 00:26:53,350
implementation that I've looked at the

00:26:50,530 --> 00:26:56,799
index layers by the

00:26:53,350 --> 00:27:00,220
the hash of the stacker for the of of

00:26:56,799 --> 00:27:02,889
the years so how this store already here

00:27:00,220 --> 00:27:05,830
is just based on the not your itself but

00:27:02,889 --> 00:27:10,990
also on the Wesley your it goes on top

00:27:05,830 --> 00:27:17,169
of and this is the prime because we

00:27:10,990 --> 00:27:20,889
can't use subsequence because if if we

00:27:17,169 --> 00:27:22,870
don't use the same layers on on the

00:27:20,889 --> 00:27:24,460
bottom then we've not be indexed the

00:27:22,870 --> 00:27:26,559
same way so we will have the duplication

00:27:24,460 --> 00:27:32,440
anyway so we fit on load and we will

00:27:26,559 --> 00:27:36,460
restore separately and the second thing

00:27:32,440 --> 00:27:40,240
is that it's not commonly used to have

00:27:36,460 --> 00:27:42,490
several hundreds of figures and so it's

00:27:40,240 --> 00:27:46,179
not expected everywhere having several

00:27:42,490 --> 00:27:49,210
hundreds of layers of cover eight file

00:27:46,179 --> 00:27:54,009
systems would actually work and scale

00:27:49,210 --> 00:27:56,679
perfectly so we should avoid languages

00:27:54,009 --> 00:28:00,820
so we decided to do something a bit more

00:27:56,679 --> 00:28:04,360
but still help the developers to things

00:28:00,820 --> 00:28:07,750
so first the developer has to decide the

00:28:04,360 --> 00:28:14,710
sensible layers thing of that what can

00:28:07,750 --> 00:28:17,049
be reused what makes sense then the

00:28:14,710 --> 00:28:21,330
different the developer will need to

00:28:17,049 --> 00:28:26,580
make one layer pair one element per year

00:28:21,330 --> 00:28:30,759
so each layer itself makes also an image

00:28:26,580 --> 00:28:36,220
and we will use dependencies copied

00:28:30,759 --> 00:28:38,440
layers from other image to build layers

00:28:36,220 --> 00:28:40,570
on top of it I will explain with the

00:28:38,440 --> 00:28:44,289
graph I wanted to you have generated

00:28:40,570 --> 00:28:46,029
graphs for free desktop SDK but this is

00:28:44,289 --> 00:28:49,179
a full graph and this is not really

00:28:46,029 --> 00:28:53,559
usable in transition so we will simplify

00:28:49,179 --> 00:28:55,899
a bit the graph so most of the graph

00:28:53,559 --> 00:29:00,009
nice on the Left it's a crown and then

00:28:55,899 --> 00:29:02,879
way I just extracted some some elements

00:29:00,009 --> 00:29:06,210
in the middle which correspond to the

00:29:02,879 --> 00:29:10,580
bootstrap that from SDK and then days

00:29:06,210 --> 00:29:10,580
and out of that we make

00:29:11,370 --> 00:29:17,730
osya images this is on the right side

00:29:14,750 --> 00:29:26,630
those every of the sediment represent

00:29:17,730 --> 00:29:26,630
the dossier image but also earlier and

00:29:26,990 --> 00:29:32,400
if you follow the dependencies you will

00:29:29,430 --> 00:29:35,370
see that for example if you go on top of

00:29:32,400 --> 00:29:36,900
the below CI there would be 40 years

00:29:35,370 --> 00:29:39,960
because it would be developed as the

00:29:36,900 --> 00:29:41,670
cave I found a bootstrap so you can see

00:29:39,960 --> 00:29:43,200
here the example the coast archives on

00:29:41,670 --> 00:29:45,570
the earth bootstrap the platform as

00:29:43,200 --> 00:29:49,170
platform bootstrap the stochastic as he

00:29:45,570 --> 00:29:53,490
gave platform booster so very simple

00:29:49,170 --> 00:29:55,380
like that we made a plug-in to make

00:29:53,490 --> 00:30:01,170
those elements of course I remember the

00:29:55,380 --> 00:30:03,870
kind in the yellow element which was

00:30:01,170 --> 00:30:05,850
also troops here we omit make a clicking

00:30:03,870 --> 00:30:10,440
force yeah which describe our to build

00:30:05,850 --> 00:30:13,770
CI element but support OCI specification

00:30:10,440 --> 00:30:16,080
and also docker image specification when

00:30:13,770 --> 00:30:20,670
the to be stuck around reduces with

00:30:16,080 --> 00:30:22,650
legacy community we can also do things

00:30:20,670 --> 00:30:25,620
like enable/disable the your compression

00:30:22,650 --> 00:30:27,360
there is a configuration and addition we

00:30:25,620 --> 00:30:29,070
can add comments in this story there is

00:30:27,360 --> 00:30:33,030
a super 4 image image but I have not

00:30:29,070 --> 00:30:36,240
tested that there were so I've tried to

00:30:33,030 --> 00:30:38,460
go to through the world specification

00:30:36,240 --> 00:30:42,690
and implement as much as I can I think

00:30:38,460 --> 00:30:45,530
most of it is available now we come back

00:30:42,690 --> 00:30:50,660
to our example and we would write our

00:30:45,530 --> 00:30:55,500
docker image nor OCA mentions guess

00:30:50,660 --> 00:30:59,960
it'll do PSD first we select our

00:30:55,500 --> 00:31:02,970
OCI plugin then we will have different

00:30:59,960 --> 00:31:04,950
differences so if you remember one of

00:31:02,970 --> 00:31:08,640
the differences are to be the layers

00:31:04,950 --> 00:31:11,210
that we will build on on top of and for

00:31:08,640 --> 00:31:15,090
here because hello doesn't use the

00:31:11,210 --> 00:31:18,030
desktop it's not the desktop application

00:31:15,090 --> 00:31:20,040
so it doesn't have to use the platform

00:31:18,030 --> 00:31:23,430
image we will just use the booster

00:31:20,040 --> 00:31:30,050
which is a very minimal image of Modesto

00:31:23,430 --> 00:31:32,970
versity and then we also need the

00:31:30,050 --> 00:31:36,840
addition that we want to make a layer

00:31:32,970 --> 00:31:41,660
off then we will configure so first we

00:31:36,840 --> 00:31:47,250
say it's a OCI image not a hooker

00:31:41,660 --> 00:31:50,100
then we make our image and decide on the

00:31:47,250 --> 00:31:54,060
architecture and I don't know I expand

00:31:50,100 --> 00:32:01,880
this just which is which architecture

00:31:54,060 --> 00:32:06,440
and this is bit for basic confusion then

00:32:01,880 --> 00:32:10,290
we describe which part we want to use

00:32:06,440 --> 00:32:13,020
this is the layers that we will copy

00:32:10,290 --> 00:32:18,090
from and we will just copy the layers

00:32:13,020 --> 00:32:22,410
from that OCI image which is a bit by

00:32:18,090 --> 00:32:26,490
this minimum note that you could import

00:32:22,410 --> 00:32:28,740
another image this bootstrap possi I

00:32:26,490 --> 00:32:31,770
don't PSD doesn't have to be used the

00:32:28,740 --> 00:32:41,790
posse I plug-in can take any OCI

00:32:31,770 --> 00:32:43,320
overlooker element there is the notation

00:32:41,790 --> 00:32:44,970
is a bit complex because we have parent

00:32:43,320 --> 00:32:46,710
and element and we just don't say parent

00:32:44,970 --> 00:32:50,580
and the things it's because we can

00:32:46,710 --> 00:32:56,370
select also the index into from multi

00:32:50,580 --> 00:33:01,050
image yeah some image can actually

00:32:56,370 --> 00:33:05,880
really mesh inside so we just then after

00:33:01,050 --> 00:33:11,760
we say what layer on top and here it's

00:33:05,880 --> 00:33:14,160
hello the plug-in will take the player

00:33:11,760 --> 00:33:15,900
and build a an artifact out of it with

00:33:14,160 --> 00:33:19,370
all these runtime dependencies and we'll

00:33:15,900 --> 00:33:21,750
make a difference with the parents layer

00:33:19,370 --> 00:33:23,130
we'll check out the front layer and make

00:33:21,750 --> 00:33:25,380
a difference and if you build a layer

00:33:23,130 --> 00:33:29,180
what's the difference between them so

00:33:25,380 --> 00:33:32,130
that mean the Trafficante no should

00:33:29,180 --> 00:33:33,220
contain all that what the top layer

00:33:32,130 --> 00:33:35,139
asked

00:33:33,220 --> 00:33:36,820
if it doesn't it's not a PG because that

00:33:35,139 --> 00:33:39,789
would be sufficient that would be marked

00:33:36,820 --> 00:33:42,759
in the new year so it's not a bigger but

00:33:39,789 --> 00:33:44,769
if you don't do that is probably you

00:33:42,759 --> 00:33:46,809
will make the user download more file

00:33:44,769 --> 00:33:49,539
that is actually need but in this case

00:33:46,809 --> 00:33:53,009
it's fine because the hello rent type

00:33:49,539 --> 00:33:53,009
depends is is actually the bootstrap

00:33:53,099 --> 00:34:00,609
then we can do things like add a comment

00:33:56,109 --> 00:34:02,349
into the history so for in Ostia images

00:34:00,609 --> 00:34:05,279
you have for every day year you have

00:34:02,349 --> 00:34:07,749
comment that it's like a commit message

00:34:05,279 --> 00:34:08,889
and then we can add a configuration for

00:34:07,749 --> 00:34:11,349
us is a very simple configuration

00:34:08,889 --> 00:34:13,000
because just reading a handle you could

00:34:11,349 --> 00:34:14,649
also have much more context co-creation

00:34:13,000 --> 00:34:16,740
so here we just say they aren't your

00:34:14,649 --> 00:34:16,740
friends

00:34:17,190 --> 00:34:25,260
however might have a mystic in the P

00:34:21,940 --> 00:34:26,950
might be capital data I don't remember

00:34:25,260 --> 00:34:31,020
how to build image

00:34:26,950 --> 00:34:33,940
well we just give it like we did before

00:34:31,020 --> 00:34:35,710
by support and if we deal with building

00:34:33,940 --> 00:34:37,869
everything and if you didn't build the

00:34:35,710 --> 00:34:40,059
application before it doesn't matter it

00:34:37,869 --> 00:34:42,250
will bid if it will find if it needs to

00:34:40,059 --> 00:34:43,599
build if it will use the cash otherwise

00:34:42,250 --> 00:34:46,179
if it has already built

00:34:43,599 --> 00:34:48,700
if you have changed anything updating

00:34:46,179 --> 00:34:53,020
anything it will find out if it has to

00:34:48,700 --> 00:34:56,859
build so there is no worries this will

00:34:53,020 --> 00:34:59,049
be a reproducible built of your docker

00:34:56,859 --> 00:35:05,039
image and it will use the cache as much

00:34:59,049 --> 00:35:10,690
at scam then you can check out this this

00:35:05,039 --> 00:35:13,599
posea image way to check out and here an

00:35:10,690 --> 00:35:16,839
extra option that we use is say that we

00:35:13,599 --> 00:35:18,549
want to export it as a town 5 and this

00:35:16,839 --> 00:35:24,520
tar file can be loaded for the Pauline

00:35:18,549 --> 00:35:29,730
2.9 and we have Adobe Tucker the pasilla

00:35:24,520 --> 00:35:29,730
image in point man what it can use right

00:35:30,299 --> 00:35:38,500
so now I will just concrete and wrap up

00:35:33,940 --> 00:35:42,549
a bit so what option is that we have a

00:35:38,500 --> 00:35:46,850
we can make a free vintage we just want

00:35:42,549 --> 00:35:53,780
to you don't have to deal with

00:35:46,850 --> 00:35:58,580
multiple things and it's very well it

00:35:53,780 --> 00:36:02,620
started eating very well the building

00:35:58,580 --> 00:36:05,390
container images it's there is no

00:36:02,620 --> 00:36:06,560
expressing that is not needed and there

00:36:05,390 --> 00:36:09,020
is everything that you need

00:36:06,560 --> 00:36:13,790
so it's cached is reproducible this

00:36:09,020 --> 00:36:17,840
parallel so it will try to run as far as

00:36:13,790 --> 00:36:21,410
you can and and and and you will always

00:36:17,840 --> 00:36:24,020
get December result well unless you do

00:36:21,410 --> 00:36:30,110
something stupid but most of the time in

00:36:24,020 --> 00:36:32,810
Freiburg you can customize your layers

00:36:30,110 --> 00:36:37,450
to optimize the storage and network so

00:36:32,810 --> 00:36:37,450
it's a bit better than just importing

00:36:38,530 --> 00:36:44,120
terrifying as just one layer and also

00:36:42,590 --> 00:36:46,670
you have your configuration that is in

00:36:44,120 --> 00:36:48,740
the European project you don't have to

00:36:46,670 --> 00:36:52,280
have configuration anywhere else after

00:36:48,740 --> 00:36:56,330
you have an external file to have extra

00:36:52,280 --> 00:36:58,070
qualification and finished up SDK

00:36:56,330 --> 00:37:01,520
provides the basic SDK for most of

00:36:58,070 --> 00:37:03,650
common system dependencies we don't have

00:37:01,520 --> 00:37:06,370
everything of course if you want a bit

00:37:03,650 --> 00:37:12,470
further pull an application for another

00:37:06,370 --> 00:37:14,000
it's called not GS we don't have that in

00:37:12,470 --> 00:37:17,330
Festa Baisakhi but we have the element

00:37:14,000 --> 00:37:20,690
in of the project if you want maybe

00:37:17,330 --> 00:37:22,490
there is some interesting contribution

00:37:20,690 --> 00:37:25,130
that we can do there and just make a

00:37:22,490 --> 00:37:28,250
separate project for a different stack

00:37:25,130 --> 00:37:31,130
of software so that you can reuse

00:37:28,250 --> 00:37:32,230
through directionals for your project so

00:37:31,130 --> 00:37:35,510
you don't have to rewrite everything

00:37:32,230 --> 00:37:38,540
first of SDK will be the best we will

00:37:35,510 --> 00:37:41,210
probably not add anything that is too

00:37:38,540 --> 00:37:44,150
specific to your CI because this is not

00:37:41,210 --> 00:37:48,110
the target of free to stop SDK but it

00:37:44,150 --> 00:37:50,270
will be a very good place and if there

00:37:48,110 --> 00:37:51,710
is other things did we we can always

00:37:50,270 --> 00:37:58,190
spawn a new project that will depend on

00:37:51,710 --> 00:37:59,930
for the sophisticate here are some

00:37:58,190 --> 00:38:04,160
pointers to

00:37:59,930 --> 00:38:06,170
the if to get more information so the

00:38:04,160 --> 00:38:09,970
free tester basically the written

00:38:06,170 --> 00:38:12,529
project the OCR plug-in is in an

00:38:09,970 --> 00:38:15,400
external project from bitstream so you

00:38:12,529 --> 00:38:17,750
have to don't they don't add it

00:38:15,400 --> 00:38:19,039
separately but this is something that is

00:38:17,750 --> 00:38:22,309
a dependency of register basically

00:38:19,039 --> 00:38:23,569
itself so you probably if you want to

00:38:22,309 --> 00:38:25,730
build a Frida statistically you will

00:38:23,569 --> 00:38:28,279
have the disassociate break in here I

00:38:25,730 --> 00:38:31,750
did a pointer to the pokey much the

00:38:28,279 --> 00:38:31,750
documentation of the pregnant so you can

00:38:31,900 --> 00:38:36,140
read what you can do with this plug-in

00:38:34,250 --> 00:38:40,549
there's more details than what I stand

00:38:36,140 --> 00:38:46,400
here because it's it would make the talk

00:38:40,549 --> 00:38:51,200
a bit too boring then we also publish

00:38:46,400 --> 00:38:54,920
docker images on the docker hub those

00:38:51,200 --> 00:38:57,920
are based at plugin told are useful if

00:38:54,920 --> 00:39:00,049
you still want to use a docker file to

00:38:57,920 --> 00:39:06,140
be done to look desta basically this are

00:39:00,049 --> 00:39:09,440
mostly for existing infrastructure that

00:39:06,140 --> 00:39:13,490
want to build a pack application for

00:39:09,440 --> 00:39:18,200
example but on docker with docker file

00:39:13,490 --> 00:39:22,579
that some need to do that we don't

00:39:18,200 --> 00:39:26,510
publish the OCI images you can be little

00:39:22,579 --> 00:39:28,819
however from the fiesta basically the

00:39:26,510 --> 00:39:34,730
reason is that I don't know but anyhow

00:39:28,819 --> 00:39:36,500
like to grab that can do that but I mean

00:39:34,730 --> 00:39:40,099
this is the same content and docker

00:39:36,500 --> 00:39:46,579
images and ocm it is a very similar it's

00:39:40,099 --> 00:39:48,980
nearly there are only details out

00:39:46,579 --> 00:39:51,250
different it's so they're mostly

00:39:48,980 --> 00:39:51,250
compatible

00:39:52,599 --> 00:39:58,490
yeah and this work was the sponsor of

00:39:55,099 --> 00:40:01,579
aquatic yeah then I'm done ready for

00:39:58,490 --> 00:40:06,109
question my foot was hope short enough

00:40:01,579 --> 00:40:08,960
so that you can go for an early thanks a

00:40:06,109 --> 00:40:12,260
lot Valentin there is one question that

00:40:08,960 --> 00:40:13,580
we have on the question system how does

00:40:12,260 --> 00:40:16,270
this fit into

00:40:13,580 --> 00:40:21,560
icd system do you have any examples of

00:40:16,270 --> 00:40:29,840
Jenkinson not junkies we use a lab so

00:40:21,560 --> 00:40:33,710
what we have is that what we do is

00:40:29,840 --> 00:40:36,290
actually the the OCI images that we

00:40:33,710 --> 00:40:38,600
build for free disturb basically that

00:40:36,290 --> 00:40:41,060
the first thing that we did was the

00:40:38,600 --> 00:40:42,620
image is to have bit string because we

00:40:41,060 --> 00:40:47,990
need to have a specification on bit

00:40:42,620 --> 00:40:50,240
string so if you have something that's

00:40:47,990 --> 00:40:53,690
used to her or Palma or something like

00:40:50,240 --> 00:40:56,810
that or some what's called a humanities

00:40:53,690 --> 00:40:59,240
you should be able to take those images

00:40:56,810 --> 00:41:00,890
or with custom image so we have a

00:40:59,240 --> 00:41:03,200
separate projector for that I didn't put

00:41:00,890 --> 00:41:05,000
the pointer but if you talk to me later

00:41:03,200 --> 00:41:12,530
if you contact me I can give some

00:41:05,000 --> 00:41:16,910
pointers and then what you need to do is

00:41:12,530 --> 00:41:19,190
just have some commands to say well to

00:41:16,910 --> 00:41:21,110
call the BSC breathe and beastie check

00:41:19,190 --> 00:41:25,310
out and do the same so bitstream doesn't

00:41:21,110 --> 00:41:27,050
do the this is distribute doesn't shift

00:41:25,310 --> 00:41:29,060
so if you want to upload somewhere you

00:41:27,050 --> 00:41:30,560
would have to use another tool we don't

00:41:29,060 --> 00:41:33,710
have plug-ins for that we usually don't

00:41:30,560 --> 00:41:36,350
do that so usually what you do is check

00:41:33,710 --> 00:41:43,250
out the result and and send it somewhere

00:41:36,350 --> 00:41:48,770
else but yeah you can I think if you

00:41:43,250 --> 00:41:52,460
need to have OCI image with this room we

00:41:48,770 --> 00:41:57,710
already have that and it's written in a

00:41:52,460 --> 00:41:59,090
stream itself so if you want it to have

00:41:57,710 --> 00:42:03,710
something a bit different because you

00:41:59,090 --> 00:42:08,090
don't have the same need in your CI you

00:42:03,710 --> 00:42:10,730
can you can adjust that probably even

00:42:08,090 --> 00:42:15,620
use a junction to take from our project

00:42:10,730 --> 00:42:19,580
and just fill your own image but you

00:42:15,620 --> 00:42:22,460
will have some work to you recently need

00:42:19,580 --> 00:42:27,020
to have some script to include to go to

00:42:22,460 --> 00:42:29,180
call me as the piston but

00:42:27,020 --> 00:42:31,690
the building itself will be dealt with

00:42:29,180 --> 00:42:31,690
by Alicia

00:42:32,470 --> 00:42:39,339
alright great thanks a lot and thanks

00:42:35,780 --> 00:42:39,339
again for an interesting talk

00:42:40,880 --> 00:42:45,230
and with that I would like to thank our

00:42:43,250 --> 00:42:47,680
speakers our sponsors and all our

00:42:45,230 --> 00:42:47,680
viewers

00:42:53,430 --> 00:42:55,490

YouTube URL: https://www.youtube.com/watch?v=xiY5qQqVqXk


