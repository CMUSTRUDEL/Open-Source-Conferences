Title: Running Android on the Raspberry Pi  - Chris Simmonds
Publication date: 2020-03-23
Playlist: foss-north 2020 virtual
Description: 
	Lightning talk from foss-north 2020

https://foss-north.se/2020/speakers-and-talks.html#lt-csimmonds
Captions: 
	00:00:00,030 --> 00:00:06,000
welcome to force north the virtual

00:00:03,149 --> 00:00:08,130
edition we would like to thank all our

00:00:06,000 --> 00:00:12,330
sponsors and partners in this difficult

00:00:08,130 --> 00:00:15,830
situation our gold sponsors look soft

00:00:12,330 --> 00:00:20,000
and ansible by Red Hat

00:00:15,830 --> 00:00:22,220
our silver sponsors ITRs group and make

00:00:20,000 --> 00:00:25,900
it right

00:00:22,220 --> 00:00:28,960
our base sponsors

00:00:25,900 --> 00:00:31,150
our partner projects the open source

00:00:28,960 --> 00:00:34,239
community and the region of Gothenburg

00:00:31,150 --> 00:00:36,309
and a huge thanks to our awesome

00:00:34,239 --> 00:00:40,239
community this would not have been

00:00:36,309 --> 00:00:44,080
possible without you hi hello so I'm

00:00:40,239 --> 00:00:46,510
Chris Simmons so welcome to this virtual

00:00:44,080 --> 00:00:49,000
Foss North from virtual Gothenburg and

00:00:46,510 --> 00:00:53,830
I'm here to talk about running Android

00:00:49,000 --> 00:00:56,739
on the Raspberry Pi so just a little bit

00:00:53,830 --> 00:00:58,839
of detail about me I'm I've been doing

00:00:56,739 --> 00:01:00,790
training and presentations for quite

00:00:58,839 --> 00:01:02,769
some time I've been doing all the nicks

00:01:00,790 --> 00:01:08,080
a star for about 20 years and Android

00:01:02,769 --> 00:01:10,960
reiki stuff for about ten years so why

00:01:08,080 --> 00:01:14,080
do we want to run Android on a dev board

00:01:10,960 --> 00:01:16,840
such as a Raspberry Pi so my own

00:01:14,080 --> 00:01:19,299
personal reason for doing this is for

00:01:16,840 --> 00:01:20,560
it's a good learning experience if you

00:01:19,299 --> 00:01:22,720
want to learn how something works it's

00:01:20,560 --> 00:01:24,520
best to pull it to pieces and then put

00:01:22,720 --> 00:01:29,140
it back together and fix it as it breaks

00:01:24,520 --> 00:01:31,450
so that's my approach it allows me to

00:01:29,140 --> 00:01:32,440
test different Android builds I can try

00:01:31,450 --> 00:01:34,870
different versions different

00:01:32,440 --> 00:01:36,490
configurations and it blows up it

00:01:34,870 --> 00:01:39,370
doesn't matter I've lost my entire phone

00:01:36,490 --> 00:01:43,690
I've only lost I only need to reflash my

00:01:39,370 --> 00:01:48,580
my dev board and finally it is fun no

00:01:43,690 --> 00:01:51,820
really it is fun believe me so if you're

00:01:48,580 --> 00:01:52,990
running Android on a dev board what kind

00:01:51,820 --> 00:01:55,930
of thing you're going to be looking for

00:01:52,990 --> 00:01:58,000
in that dev board so it's gotta be one

00:01:55,930 --> 00:02:00,760
of the supported architectures for

00:01:58,000 --> 00:02:04,840
Android so that means basically arm or

00:02:00,760 --> 00:02:07,750
x86 or mix in 32 and 64-bit go in

00:02:04,840 --> 00:02:09,399
varieties variants but I've got to say

00:02:07,750 --> 00:02:11,110
that the mips support is dropping I

00:02:09,399 --> 00:02:17,140
think mips has been dropped out of

00:02:11,110 --> 00:02:18,940
android 10 and anyway mips is not so

00:02:17,140 --> 00:02:21,099
popular as it used to be second thing

00:02:18,940 --> 00:02:24,069
you need a fairly recent version of

00:02:21,099 --> 00:02:28,989
linux if you're running android 10 you

00:02:24,069 --> 00:02:31,540
will need a version 4.9 or later you'll

00:02:28,989 --> 00:02:33,190
need at least half a gig of ram so that

00:02:31,540 --> 00:02:36,579
really is the very bare minimum that or

00:02:33,190 --> 00:02:40,180
just about boot up with that ideally you

00:02:36,579 --> 00:02:44,200
need well 2 gigabytes would be ideal

00:02:40,180 --> 00:02:45,970
for a typical dev board you need some

00:02:44,200 --> 00:02:49,360
storage typically flash memory or some

00:02:45,970 --> 00:02:52,150
kind in practical in in production

00:02:49,360 --> 00:02:54,819
systems it would be emmc or ufs or

00:02:52,150 --> 00:02:56,620
something of that sort but we can for

00:02:54,819 --> 00:02:58,690
predicted for demos to give in the case

00:02:56,620 --> 00:03:02,829
the Raspberry Pi we can get by with just

00:02:58,690 --> 00:03:04,780
using an SD card you can need a

00:03:02,829 --> 00:03:08,519
touchscreen Android is very much a touch

00:03:04,780 --> 00:03:10,930
based user experience and there are many

00:03:08,519 --> 00:03:15,090
fairly cheap HDMI touchscreens

00:03:10,930 --> 00:03:18,280
available and you need support for a GPU

00:03:15,090 --> 00:03:23,459
that will run Android Open old run

00:03:18,280 --> 00:03:26,230
OpenGL ES with their Android extensions

00:03:23,459 --> 00:03:29,230
so here's a bunch of dev boards I pulled

00:03:26,230 --> 00:03:31,090
off my shelf so going across the top

00:03:29,230 --> 00:03:33,489
there there's the one board which is 9 X

00:03:31,090 --> 00:03:37,150
6 base system there's a dragon board

00:03:33,489 --> 00:03:39,340
which is a Qualcomm Snapdragon based

00:03:37,150 --> 00:03:42,220
system there's the high key which is a

00:03:39,340 --> 00:03:43,870
keyring thing on the bottom line we've

00:03:42,220 --> 00:03:46,599
got a digi connect core which is another

00:03:43,870 --> 00:03:47,949
IMX device there's a good old Beagle

00:03:46,599 --> 00:03:50,109
bone in the butt in there in the back

00:03:47,949 --> 00:03:53,799
the Beagle bone isn't quite capable of

00:03:50,109 --> 00:03:55,480
running Android from 8 onwards but it

00:03:53,799 --> 00:03:59,769
was very good good up to and including

00:03:55,480 --> 00:04:01,410
Android Android 7 and then bottom right

00:03:59,769 --> 00:04:04,180
we have the good old Raspberry Pi 3

00:04:01,410 --> 00:04:07,510
which is what I'm focusing on in this

00:04:04,180 --> 00:04:08,440
little presentation so why the rise be

00:04:07,510 --> 00:04:10,510
prior to that bunch

00:04:08,440 --> 00:04:12,489
well it's cheap that's gotta count for

00:04:10,510 --> 00:04:14,500
something

00:04:12,489 --> 00:04:16,959
it's easy to easily get a hold of some

00:04:14,500 --> 00:04:19,299
of those other boards of limited supply

00:04:16,959 --> 00:04:21,130
they tend to go end-of-life very quickly

00:04:19,299 --> 00:04:22,930
the raspberry PI's been around for ages

00:04:21,130 --> 00:04:26,409
and looks like it's going to be around

00:04:22,930 --> 00:04:27,639
for a lot longer yet it's hackable so

00:04:26,409 --> 00:04:29,229
there's a good community there's good

00:04:27,639 --> 00:04:33,699
resources to help you understand how the

00:04:29,229 --> 00:04:34,720
hardware works and anything you want to

00:04:33,699 --> 00:04:37,139
work with in it where the Raspberry Pi

00:04:34,720 --> 00:04:40,210
somebody somewhere has done it and

00:04:37,139 --> 00:04:42,550
finally because it's there so anything

00:04:40,210 --> 00:04:44,830
that can run Android really should run

00:04:42,550 --> 00:04:47,909
Android in my opinion so this as part of

00:04:44,830 --> 00:04:47,909
that so that process

00:04:48,910 --> 00:04:56,680
so this is the Raspberry Pi this is

00:04:50,410 --> 00:04:58,600
actually a Raspberry Pi 3 B+ we're just

00:04:56,680 --> 00:05:00,910
limiting ourselves to Raspberry Pi 3s

00:04:58,600 --> 00:05:03,970
here there is some support for the

00:05:00,910 --> 00:05:06,220
Raspberry Pi 4 but it's it's lacking

00:05:03,970 --> 00:05:07,360
some ways there was some issues with the

00:05:06,220 --> 00:05:12,070
graphics which haven't really yet been

00:05:07,360 --> 00:05:18,040
ironed out yet so the the PI 3 is a

00:05:12,070 --> 00:05:20,800
quad-core cortex a53 ARM processor 1.4

00:05:18,040 --> 00:05:23,440
gigahertz on the honor B plus we've got

00:05:20,800 --> 00:05:24,760
a gigabyte of RAM which is kind of just

00:05:23,440 --> 00:05:26,740
about enough but only just

00:05:24,760 --> 00:05:30,430
given that some of that is shared with

00:05:26,740 --> 00:05:33,160
the GPU we've got an SD card for storage

00:05:30,430 --> 00:05:35,200
which as I said just now is kind of ok

00:05:33,160 --> 00:05:38,380
although we'd prefer onboard

00:05:35,200 --> 00:05:40,030
MMC if we had it there's USB there's

00:05:38,380 --> 00:05:44,050
Ethernet that's why I find is bluetooth

00:05:40,030 --> 00:05:45,910
HDMI and we've got the 40 pin header so

00:05:44,050 --> 00:05:50,380
we can plug in extension hats at one

00:05:45,910 --> 00:05:51,940
sort or another so I'm talking about

00:05:50,380 --> 00:05:54,760
this as if it's the new thing it isn't

00:05:51,940 --> 00:05:57,210
it really isn't so people been working

00:05:54,760 --> 00:05:59,500
on this in various guises for some years

00:05:57,210 --> 00:06:03,130
probably the the longest-running project

00:05:59,500 --> 00:06:05,140
is Android our PI and it's also

00:06:03,130 --> 00:06:08,650
worthwhile mentioning the lineage OS

00:06:05,140 --> 00:06:09,910
port darn by constic hang so the letting

00:06:08,650 --> 00:06:10,810
start they're highly recommend to go

00:06:09,910 --> 00:06:16,690
have a look see what those guys are

00:06:10,810 --> 00:06:18,460
doing internal then so you've got a dev

00:06:16,690 --> 00:06:20,020
for now case the Raspberry Pi bit could

00:06:18,460 --> 00:06:21,100
have been one of the other ones what are

00:06:20,020 --> 00:06:23,920
you going to do if you want to run

00:06:21,100 --> 00:06:26,350
Android on these guys so you need a

00:06:23,920 --> 00:06:30,040
course a copy of the the Android source

00:06:26,350 --> 00:06:32,290
code which is readily available you need

00:06:30,040 --> 00:06:34,630
a kernel with Android extensions that

00:06:32,290 --> 00:06:39,070
usually means that you need some support

00:06:34,630 --> 00:06:41,410
from the applying the upstream SOC

00:06:39,070 --> 00:06:45,360
bender in our case for the Raspberry Pi

00:06:41,410 --> 00:06:49,020
will be used in the car nor from the the

00:06:45,360 --> 00:06:50,950
actually their Android arm PI project

00:06:49,020 --> 00:06:52,270
you're going to be doing some low-level

00:06:50,950 --> 00:06:55,540
hacking so you need to know how the

00:06:52,270 --> 00:06:57,160
hardware works you need all the help you

00:06:55,540 --> 00:07:00,610
can get from anybody who's prepared to

00:06:57,160 --> 00:07:02,620
give it you need a fairly fast computer

00:07:00,610 --> 00:07:05,020
because an AOSP build is going to say at

00:07:02,620 --> 00:07:07,900
least an hour and can easily take four

00:07:05,020 --> 00:07:09,490
or five hours and Connor's

00:07:07,900 --> 00:07:15,460
correspondingly you need a fair amount

00:07:09,490 --> 00:07:17,020
of time and patience what is special

00:07:15,460 --> 00:07:20,860
about the Raspberry Pi that makes it a

00:07:17,020 --> 00:07:26,040
little bit tricky so first of all it has

00:07:20,860 --> 00:07:26,040
a non-standard proprietary bootloader

00:07:26,160 --> 00:07:33,270
the graphics is is an issue whereas our

00:07:30,550 --> 00:07:36,190
discussion on the side of the next and

00:07:33,270 --> 00:07:40,810
there is an issue with the the way the

00:07:36,190 --> 00:07:45,490
USB is wider so let's go through those

00:07:40,810 --> 00:07:47,710
one by one so the booting then so

00:07:45,490 --> 00:07:53,470
normally when you're running doing with

00:07:47,710 --> 00:07:55,300
Android you expect to use fastboot but

00:07:53,470 --> 00:07:58,390
unfortunately the the Raspberry Pi

00:07:55,300 --> 00:07:59,950
bootloader which is proprietary it

00:07:58,390 --> 00:08:07,660
doesn't have that fastboot support

00:07:59,950 --> 00:08:09,250
unsurprisingly so we are we can still

00:08:07,660 --> 00:08:11,500
get around that since you can build you

00:08:09,250 --> 00:08:12,789
can boot Russ barium with it with a

00:08:11,500 --> 00:08:17,070
little bit of a few tweaks here and

00:08:12,789 --> 00:08:19,510
there you can get it to boot Android and

00:08:17,070 --> 00:08:21,760
you still can't use the fastboot

00:08:19,510 --> 00:08:23,440
protocol but then you can always just

00:08:21,760 --> 00:08:25,270
take the SD card out plug it into your

00:08:23,440 --> 00:08:27,539
computer to reflash it and plug it back

00:08:25,270 --> 00:08:29,680
into the Raspberry Pi so that's how we

00:08:27,539 --> 00:08:33,789
will get updates on to the on to the

00:08:29,680 --> 00:08:36,910
device and you can also do some work

00:08:33,789 --> 00:08:39,520
with using an Android aware bootloader

00:08:36,910 --> 00:08:41,260
for example you boot which allows you to

00:08:39,520 --> 00:08:43,900
get some rounder Android integration

00:08:41,260 --> 00:08:45,490
points for example the boot reason so

00:08:43,900 --> 00:08:48,520
you don't you can type some of my ADB

00:08:45,490 --> 00:08:53,410
reboot recovery and that will then book

00:08:48,520 --> 00:08:57,520
you into recovery mode challenge number

00:08:53,410 --> 00:09:00,370
two the graphics so again Jenna speaking

00:08:57,520 --> 00:09:03,370
we need OpenGL ES libraries with Android

00:09:00,370 --> 00:09:05,950
extensions where do you get them from

00:09:03,370 --> 00:09:10,150
so the first option usually is to go to

00:09:05,950 --> 00:09:11,110
the the SOC vendor and you get the

00:09:10,150 --> 00:09:12,579
boundaries from them

00:09:11,110 --> 00:09:14,350
okay broken

00:09:12,579 --> 00:09:18,040
support Android at all so that's not an

00:09:14,350 --> 00:09:21,429
option option two there is support from

00:09:18,040 --> 00:09:24,699
the amis a project and drm which we can

00:09:21,429 --> 00:09:27,009
use for the Raspberry Pi if neither

00:09:24,699 --> 00:09:29,649
those work you can always fall back to

00:09:27,009 --> 00:09:31,869
using the soft GPU called Swift shader

00:09:29,649 --> 00:09:34,199
but it is a soft GPU so it's going to be

00:09:31,869 --> 00:09:34,199
kind of slow

00:09:34,379 --> 00:09:39,819
here's a quick diagram of the Mesa

00:09:37,689 --> 00:09:43,089
graphic stack the important things

00:09:39,819 --> 00:09:46,360
really are that in the middle where it

00:09:43,089 --> 00:09:49,079
says how we have Lib players view on me

00:09:46,360 --> 00:09:52,360
so after ISO and such like so those the

00:09:49,079 --> 00:09:53,980
of the OpenGL libraries and then down

00:09:52,360 --> 00:09:59,980
there at the bottom we have the kernel

00:09:53,980 --> 00:10:01,869
integration through the DRM just get

00:09:59,980 --> 00:10:03,759
through that fairly quickly so me is a

00:10:01,869 --> 00:10:05,860
great project go look at it there it has

00:10:03,759 --> 00:10:10,509
support for a whole bunch of mobile GPUs

00:10:05,860 --> 00:10:12,040
including that bunch swift shader is not

00:10:10,509 --> 00:10:13,989
as the alternative if you don't have

00:10:12,040 --> 00:10:19,239
support from Mesa and you don't have

00:10:13,989 --> 00:10:21,100
proprietary drivers and then fine and

00:10:19,239 --> 00:10:25,600
then the third challenge was with the

00:10:21,100 --> 00:10:27,999
lack of USB so normally you need an OTG

00:10:25,600 --> 00:10:32,889
port turns out the Raspberry Pi 3

00:10:27,999 --> 00:10:36,790
doesn't have an OTG so we can fall back

00:10:32,889 --> 00:10:40,600
to using ADB of Ethernet or over network

00:10:36,790 --> 00:10:42,489
as you do AV connect and then you can

00:10:40,600 --> 00:10:46,509
run a to be shell or any other adv

00:10:42,489 --> 00:10:49,989
command and it works as normal so though

00:10:46,509 --> 00:10:56,040
it is I've put this all together the

00:10:49,989 --> 00:10:58,779
link to the to the github is there and

00:10:56,040 --> 00:11:02,889
you can contact me in various ways and

00:10:58,779 --> 00:11:08,679
you can tweet me and that's me done so I

00:11:02,889 --> 00:11:12,639
guess I have a question here from

00:11:08,679 --> 00:11:15,100
Demetrius so which a o SP Development

00:11:12,639 --> 00:11:18,220
Board is the easiest and cheapest to get

00:11:15,100 --> 00:11:25,179
started with and have you tried Odroid

00:11:18,220 --> 00:11:26,410
and - so the easiest would be one of

00:11:25,179 --> 00:11:29,500
those that support it out

00:11:26,410 --> 00:11:36,120
box with the ASP code base so if you

00:11:29,500 --> 00:11:38,220
look at the ASP code then the Heike 960

00:11:36,120 --> 00:11:42,339
should work pretty much out of the box

00:11:38,220 --> 00:11:45,730
without any additional porting also the

00:11:42,339 --> 00:11:48,459
BeagleBoard x-15 also is directly

00:11:45,730 --> 00:11:52,360
supported neither of those boards are

00:11:48,459 --> 00:11:55,019
particularly cheap they're $200 plus but

00:11:52,360 --> 00:11:58,500
they should work with minimum effort

00:11:55,019 --> 00:12:00,939
have I tried the Odroid no I haven't

00:11:58,500 --> 00:12:05,649
maybe I should but I can go right to do

00:12:00,939 --> 00:12:07,389
that yet okay you when is going to kill

00:12:05,649 --> 00:12:10,660
me for asking one more question but I'll

00:12:07,389 --> 00:12:13,540
do that so is the RPI three fast enough

00:12:10,660 --> 00:12:17,439
to work with or is it really too slow

00:12:13,540 --> 00:12:22,629
then when it's not fast let's put it

00:12:17,439 --> 00:12:24,040
that way it's great for demos I wouldn't

00:12:22,629 --> 00:12:27,459
really want to use it in a production

00:12:24,040 --> 00:12:29,439
device so I would say it's kind of demo

00:12:27,459 --> 00:12:32,139
quality it's not really really even beat

00:12:29,439 --> 00:12:34,240
equality so it's a play thing at the

00:12:32,139 --> 00:12:37,360
moment I have great faith in the

00:12:34,240 --> 00:12:41,470
Raspberry Pi 4 and if we can get the

00:12:37,360 --> 00:12:43,569
Mesa support on the PI 4 then that will

00:12:41,470 --> 00:12:46,029
be a really really good platform but

00:12:43,569 --> 00:12:48,600
it's not there yet perfect thank you

00:12:46,029 --> 00:12:48,600

YouTube URL: https://www.youtube.com/watch?v=cxztlKUCpbU


