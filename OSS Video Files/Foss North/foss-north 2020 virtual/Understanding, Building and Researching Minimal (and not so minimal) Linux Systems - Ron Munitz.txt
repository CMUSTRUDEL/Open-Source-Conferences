Title: Understanding, Building and Researching Minimal (and not so minimal) Linux Systems - Ron Munitz
Publication date: 2020-04-07
Playlist: foss-north 2020 virtual
Description: 
	Talk details: https://foss-north.se/2020/speakers-and-talks.html#rmunitz
Conference details: https://foss-north.se/2020/
Captions: 
	00:00:00,030 --> 00:00:05,759
welcome to force north the virtual

00:00:02,909 --> 00:00:08,040
edition we would like to thank all our

00:00:05,759 --> 00:00:12,090
sponsors and partners in this difficult

00:00:08,040 --> 00:00:15,599
situation our gold sponsors look soft

00:00:12,090 --> 00:00:19,770
and ansible by Red Hat

00:00:15,599 --> 00:00:21,980
our silver sponsors ITRs group and make

00:00:19,770 --> 00:00:25,640
it right

00:00:21,980 --> 00:00:28,699
our base sponsors

00:00:25,640 --> 00:00:30,890
our partner projects the open source

00:00:28,699 --> 00:00:34,010
community and the region of Gothenburg

00:00:30,890 --> 00:00:35,960
and a huge thanks to our awesome

00:00:34,010 --> 00:00:44,379
community this would not have been

00:00:35,960 --> 00:00:47,360
possible without you so now we have Ron

00:00:44,379 --> 00:00:51,050
moon it's coming on stage who will talk

00:00:47,360 --> 00:00:55,129
about minimal systems and not so minimal

00:00:51,050 --> 00:01:04,670
systems you have one hour including Q&A

00:00:55,129 --> 00:01:11,390
Ron so you have the stage now I'm from

00:01:04,670 --> 00:01:14,030
the PSEG about very minimal Linux system

00:01:11,390 --> 00:01:18,410
now I give this talk every now and then

00:01:14,030 --> 00:01:21,110
and usually I started by actually going

00:01:18,410 --> 00:01:23,660
ahead and like asking who has experience

00:01:21,110 --> 00:01:25,160
with one experience with two and then

00:01:23,660 --> 00:01:27,679
people would either raise their hand or

00:01:25,160 --> 00:01:29,750
not but today it's going to be a little

00:01:27,679 --> 00:01:33,110
more challenging because we're doing it

00:01:29,750 --> 00:01:35,329
virtually so I'm just going to go ahead

00:01:33,110 --> 00:01:37,790
and usually I just play with it and I

00:01:35,329 --> 00:01:40,159
select it's like I will get with the

00:01:37,790 --> 00:01:42,560
slides later and you will see that you

00:01:40,159 --> 00:01:43,759
are like over 100 slides and most of the

00:01:42,560 --> 00:01:47,000
work is going to be on the terminal

00:01:43,759 --> 00:01:50,270
anyway however usually there are several

00:01:47,000 --> 00:01:52,399
places we can take this talk so this

00:01:50,270 --> 00:01:55,280
time I will be a little less democratic

00:01:52,399 --> 00:01:57,439
and I will talk about some things that I

00:01:55,280 --> 00:02:00,710
did not talk in one of the previous time

00:01:57,439 --> 00:02:02,840
I did talk about minimal systems so this

00:02:00,710 --> 00:02:06,799
stuff is going to be about taking a

00:02:02,840 --> 00:02:09,380
kernel and building a very minimal ram

00:02:06,799 --> 00:02:12,200
disk and the principles for it to

00:02:09,380 --> 00:02:14,239
actually work it's going to be busy box

00:02:12,200 --> 00:02:16,780
paste I'm going to talk about the terms

00:02:14,239 --> 00:02:20,000
for those or less familiar with it and

00:02:16,780 --> 00:02:22,280
we will conclude by adding some

00:02:20,000 --> 00:02:25,310
components and discussing strategy for

00:02:22,280 --> 00:02:28,579
how to make more or less graphical

00:02:25,310 --> 00:02:33,079
trade-offs and the like so a little bit

00:02:28,579 --> 00:02:35,060
about myself and I am working in the PCG

00:02:33,079 --> 00:02:37,980
it's a company of consulting and

00:02:35,060 --> 00:02:40,920
training also done a couple of startups

00:02:37,980 --> 00:02:43,290
and do a lot of security and mobile but

00:02:40,920 --> 00:02:45,269
I will jump right to business and not

00:02:43,290 --> 00:02:48,209
talk too much about myself and let's

00:02:45,269 --> 00:02:50,370
give some clients and with a lot of

00:02:48,209 --> 00:02:53,129
things okay but most of the thing that

00:02:50,370 --> 00:02:56,069
we do are related to embedded

00:02:53,129 --> 00:02:58,920
development and I would say to all kind

00:02:56,069 --> 00:03:01,260
of like real operating systems and a lot

00:02:58,920 --> 00:03:03,000
a lot a lot of Linux and when I say a

00:03:01,260 --> 00:03:05,640
lot a lot a lot of Linux I mean

00:03:03,000 --> 00:03:08,400
everything that is Linux kernel-based so

00:03:05,640 --> 00:03:11,010
what is Linux and what is like Android

00:03:08,400 --> 00:03:12,989
for example both are Linux kernel and

00:03:11,010 --> 00:03:15,299
then they diverge the moment it boots

00:03:12,989 --> 00:03:18,930
and I will talk about it also like in

00:03:15,299 --> 00:03:21,299
the lecture so all of these phases and

00:03:18,930 --> 00:03:24,840
the slides will be published so you can

00:03:21,299 --> 00:03:29,489
do them one by one and you can also ask

00:03:24,840 --> 00:03:31,019
me for like more contents last week was

00:03:29,489 --> 00:03:34,290
the first time I ever uploaded like a

00:03:31,019 --> 00:03:37,170
video to YouTube and being inspired by

00:03:34,290 --> 00:03:41,069
last week's lightning talk of fast north

00:03:37,170 --> 00:03:43,079
and when I extended a little bit my 10

00:03:41,069 --> 00:03:45,239
minute lightning talk and added some

00:03:43,079 --> 00:03:47,340
contents about the York the project so

00:03:45,239 --> 00:03:50,790
if you're interested I will do it here

00:03:47,340 --> 00:03:52,200
- I'm happy - ok write to me and I'll

00:03:50,790 --> 00:03:54,900
give you again the details at the end of

00:03:52,200 --> 00:03:56,639
the lecture and feel free to do so so in

00:03:54,900 --> 00:03:58,709
order to reproduce the system we're

00:03:56,639 --> 00:04:03,359
building on the host system is going to

00:03:58,709 --> 00:04:05,880
be at the bun - with these packages you

00:04:03,359 --> 00:04:09,209
can all set it you can use the VM and

00:04:05,880 --> 00:04:11,760
and the links here will be updated what

00:04:09,209 --> 00:04:14,579
we have here is something that is almost

00:04:11,760 --> 00:04:17,250
the same but with a little bit of utter

00:04:14,579 --> 00:04:20,039
focus on the user space and a little bit

00:04:17,250 --> 00:04:22,530
of folder kernel version I will and say

00:04:20,039 --> 00:04:24,840
I will update the slides and both have

00:04:22,530 --> 00:04:28,289
these links I also send you the links

00:04:24,840 --> 00:04:31,110
for what we actually do today ok so

00:04:28,289 --> 00:04:34,680
because I'm there are questions there QA

00:04:31,110 --> 00:04:36,419
I'm very open to also answering

00:04:34,680 --> 00:04:39,479
questions and adding some examples ago

00:04:36,419 --> 00:04:45,449
so the methodology here is going to be

00:04:39,479 --> 00:04:47,669
to go and do the following things we're

00:04:45,449 --> 00:04:49,650
going to first show how to get the

00:04:47,669 --> 00:04:51,700
kernel source talk very very very

00:04:49,650 --> 00:04:53,080
quickly about how the kernel boot

00:04:51,700 --> 00:04:55,600
and then we're going to reason

00:04:53,080 --> 00:04:59,350
especially for those who have never seen

00:04:55,600 --> 00:05:02,260
and how Linux boot or built a Linux

00:04:59,350 --> 00:05:05,620
system but yourself regard to actually

00:05:02,260 --> 00:05:08,830
see how user space that we love and like

00:05:05,620 --> 00:05:11,110
comes to life and what are the possible

00:05:08,830 --> 00:05:12,790
customizations on the way what is the

00:05:11,110 --> 00:05:15,130
what are the principles because the

00:05:12,790 --> 00:05:18,130
possible customizations are pretty much

00:05:15,130 --> 00:05:19,780
impossible to come all right so the

00:05:18,130 --> 00:05:22,600
first thing I'm going to do is to get

00:05:19,780 --> 00:05:24,610
the source so I will show slide although

00:05:22,600 --> 00:05:26,610
usually I like just going back to the

00:05:24,610 --> 00:05:30,790
website if you go to

00:05:26,610 --> 00:05:32,230
kernel.org right now and feel free to do

00:05:30,790 --> 00:05:34,090
it you will see something like this you

00:05:32,230 --> 00:05:36,400
will see latest stable kernel is part of

00:05:34,090 --> 00:05:38,200
chapter 13 and then you will have

00:05:36,400 --> 00:05:39,670
several versions we only have one hour

00:05:38,200 --> 00:05:41,770
so I will not talk about them too much

00:05:39,670 --> 00:05:45,280
but I will say some of the important

00:05:41,770 --> 00:05:48,010
thing if something is stable it pretty

00:05:45,280 --> 00:05:50,920
much means you can count on it

00:05:48,010 --> 00:05:54,940
if something is in RC it means it's a

00:05:50,920 --> 00:05:59,200
release candidate so now it's 5.6 RC 7

00:05:54,940 --> 00:06:01,080
admitted colonel 5.6 when it will be the

00:05:59,200 --> 00:06:03,730
next table colonel

00:06:01,080 --> 00:06:07,660
right now the stable currents 5 to 5 is

00:06:03,730 --> 00:06:09,220
now under the seventh round of testing

00:06:07,660 --> 00:06:13,020
which means it's not enough we're going

00:06:09,220 --> 00:06:15,430
to have 5.6 var anywhere between 6 & 8

00:06:13,020 --> 00:06:19,180
but it's an arbitrary number of release

00:06:15,430 --> 00:06:22,120
candidates if you want to ship Linux

00:06:19,180 --> 00:06:23,620
with your device or you want to ship a

00:06:22,120 --> 00:06:26,170
destroy doesn't need to be an embedded

00:06:23,620 --> 00:06:29,340
device it can be any component that you

00:06:26,170 --> 00:06:33,610
have that maybe is your own server or on

00:06:29,340 --> 00:06:37,000
your desktop or so on then you are most

00:06:33,610 --> 00:06:40,540
likely you will most likely want to use

00:06:37,000 --> 00:06:44,440
a long-term release and under the FAQ

00:06:40,540 --> 00:06:48,160
tab of kernel.org you will see what are

00:06:44,440 --> 00:06:50,980
the different and what are the different

00:06:48,160 --> 00:06:53,860
releases and candidates so you have here

00:06:50,980 --> 00:06:56,290
all kind of information about what is

00:06:53,860 --> 00:06:58,390
what and then you have to release it so

00:06:56,290 --> 00:07:00,610
in the releases you can see how long

00:06:58,390 --> 00:07:02,890
some kernels are going to be supported

00:07:00,610 --> 00:07:05,650
and I'm not going to get into it but

00:07:02,890 --> 00:07:08,200
there you can see for example that 4.14

00:07:05,650 --> 00:07:10,570
is going to be supported much more than

00:07:08,200 --> 00:07:12,460
5.4 why don't because of all kind of

00:07:10,570 --> 00:07:14,590
decision happy to elaborate if you're

00:07:12,460 --> 00:07:17,440
interested in so if you want to have

00:07:14,590 --> 00:07:20,050
kernel support for like critical fixes

00:07:17,440 --> 00:07:22,600
but not necessarily anything you need

00:07:20,050 --> 00:07:25,240
like new features and so on it could be

00:07:22,600 --> 00:07:27,220
safe to go on such a long long long term

00:07:25,240 --> 00:07:34,360
support kernel all right

00:07:27,220 --> 00:07:36,490
so um back to the kernel how do we start

00:07:34,360 --> 00:07:38,110
if you know what release you want let's

00:07:36,490 --> 00:07:41,290
say this table you're going to use get

00:07:38,110 --> 00:07:43,000
in order to get it an example can be if

00:07:41,290 --> 00:07:45,280
you go ahead and clone everything it's

00:07:43,000 --> 00:07:47,770
going to be like today around 2 gigs I

00:07:45,280 --> 00:07:51,190
think and you can get just a particular

00:07:47,770 --> 00:07:53,950
branch and do a shadow clone as follows

00:07:51,190 --> 00:07:57,300
and you can figure out what are the

00:07:53,950 --> 00:08:01,090
different facts do all kind of pair of

00:07:57,300 --> 00:08:01,840
git commands in order to verify things

00:08:01,090 --> 00:08:03,190
before you

00:08:01,840 --> 00:08:05,320
sorry download but we're not going to

00:08:03,190 --> 00:08:06,880
get to that and the idea of the car is

00:08:05,320 --> 00:08:08,410
going to be like this if you want to

00:08:06,880 --> 00:08:10,840
play it safe just go for the main line

00:08:08,410 --> 00:08:14,160
for the less stable but for every

00:08:10,840 --> 00:08:17,950
version you're going to have several and

00:08:14,160 --> 00:08:20,290
tugs I do not say branch deliberately

00:08:17,950 --> 00:08:22,270
because like on the stable tree you are

00:08:20,290 --> 00:08:24,490
not going to have brunch developers can

00:08:22,270 --> 00:08:26,380
have brunch on different trees like the

00:08:24,490 --> 00:08:28,240
git workflow in the kernel looks a

00:08:26,380 --> 00:08:31,180
little bit different than what you know

00:08:28,240 --> 00:08:34,300
in many places these days so let's say

00:08:31,180 --> 00:08:37,180
if like the current version or the

00:08:34,300 --> 00:08:40,659
current stable version was 5.1 then the

00:08:37,180 --> 00:08:44,529
next release will be 5.15 or one or two

00:08:40,659 --> 00:08:46,300
and so on and after sometimes if the

00:08:44,529 --> 00:08:48,940
list of features that will be taken from

00:08:46,300 --> 00:08:51,370
another difficulty looks next will be

00:08:48,940 --> 00:08:53,380
decided as the new features that will go

00:08:51,370 --> 00:08:54,910
into the next stable kernel that would

00:08:53,380 --> 00:08:57,460
be five to two in this example if the

00:08:54,910 --> 00:08:59,260
conference microphone so what is going

00:08:57,460 --> 00:09:00,910
to happen is that there's going to be

00:08:59,260 --> 00:09:03,850
something called emerge window a couple

00:09:00,910 --> 00:09:05,680
of weeks where people say hey we get

00:09:03,850 --> 00:09:08,170
this thing we don't get the same and

00:09:05,680 --> 00:09:10,000
then once the features have been decided

00:09:08,170 --> 00:09:12,760
are going to be testing cycles as I

00:09:10,000 --> 00:09:16,089
explained below before an aka they

00:09:12,760 --> 00:09:18,040
release candidates so you need in order

00:09:16,089 --> 00:09:20,740
to make clint seem to decide what is the

00:09:18,040 --> 00:09:21,880
version that you want okay so this is

00:09:20,740 --> 00:09:23,560
what you're going to build and how

00:09:21,880 --> 00:09:26,320
you're going to build it we're going to

00:09:23,560 --> 00:09:28,000
get into it very soon okay now what

00:09:26,320 --> 00:09:30,700
happens when Linux boot I'm not going to

00:09:28,000 --> 00:09:33,820
get you to too much details basically

00:09:30,700 --> 00:09:35,770
and both in PC and in embedded in

00:09:33,820 --> 00:09:38,170
whatever architecture there's going to

00:09:35,770 --> 00:09:39,640
be some bootstrapping code there's going

00:09:38,170 --> 00:09:41,350
to be a boot ROM that will jump

00:09:39,640 --> 00:09:43,660
somewhere that will jump somewhere it'll

00:09:41,350 --> 00:09:46,690
jump somewhere and there can be a little

00:09:43,660 --> 00:09:48,730
bit less of some words but in like PC

00:09:46,690 --> 00:09:50,920
world one of these some worse is going

00:09:48,730 --> 00:09:52,720
to be something like Rob in embedded

00:09:50,920 --> 00:09:56,770
word many times it's going to be a boot

00:09:52,720 --> 00:09:58,150
and and the idea is that this bootloader

00:09:56,770 --> 00:10:01,150
that is also like a program that is

00:09:58,150 --> 00:10:04,959
being loaded is going to go load in

00:10:01,150 --> 00:10:07,810
Linux or another operating system into

00:10:04,959 --> 00:10:10,930
memory and boot it along with other

00:10:07,810 --> 00:10:13,900
thing that it may and will load and put

00:10:10,930 --> 00:10:14,620
them into memory so in x86 for example

00:10:13,900 --> 00:10:17,650
the

00:10:14,620 --> 00:10:20,950
bios or the efi program is going to go

00:10:17,650 --> 00:10:24,010
ahead and grab is going to be loaded

00:10:20,950 --> 00:10:27,940
from there and it will go ahead and

00:10:24,010 --> 00:10:30,550
search in a menu for example for a

00:10:27,940 --> 00:10:32,050
kernel and initial run disk on our

00:10:30,550 --> 00:10:33,520
devices on both devices you're also

00:10:32,050 --> 00:10:36,550
going to be something that is called a

00:10:33,520 --> 00:10:39,100
new battery that absolutely numerate the

00:10:36,550 --> 00:10:42,250
hard work ok I'm going to give the

00:10:39,100 --> 00:10:44,200
example here on x86 and once you load

00:10:42,250 --> 00:10:46,900
the kernel the kernel is going to do all

00:10:44,200 --> 00:10:48,610
kinds of things and at the end of all

00:10:46,900 --> 00:10:51,340
this kind of thing it is going to spawn

00:10:48,610 --> 00:10:56,520
a kernel in it thread so that's have

00:10:51,340 --> 00:10:59,560
like a quick look for example if I went

00:10:56,520 --> 00:11:01,510
to the source tree this looks something

00:10:59,560 --> 00:11:02,260
like this and this is the kernel source

00:11:01,510 --> 00:11:06,490
tree hello

00:11:02,260 --> 00:11:14,710
and if I go like - keenie and look at

00:11:06,490 --> 00:11:16,450
main dock see we will see a function it

00:11:14,710 --> 00:11:18,850
is one going to be caught after a lot of

00:11:16,450 --> 00:11:22,420
initializations and here we have these

00:11:18,850 --> 00:11:24,550
two guys kernel thread with the function

00:11:22,420 --> 00:11:26,260
kernel in it and another kernel Friday

00:11:24,550 --> 00:11:29,770
this case Purdy did never mind where it

00:11:26,260 --> 00:11:32,100
is right now okay now this guy kernel in

00:11:29,770 --> 00:11:34,330
it is going to do all kind of things and

00:11:32,100 --> 00:11:37,590
one of the thing that it's going to do

00:11:34,330 --> 00:11:41,110
is going to try and run the init process

00:11:37,590 --> 00:11:44,770
now there are several such options I

00:11:41,110 --> 00:11:47,170
will explain some like empirically as we

00:11:44,770 --> 00:11:51,820
see but here you can see in the text all

00:11:47,170 --> 00:11:54,310
kind of like interesting text like as we

00:11:51,820 --> 00:11:56,500
Nene can see anything in each bean SH

00:11:54,310 --> 00:11:59,530
and if everything is bad it's going to

00:11:56,500 --> 00:12:01,840
say hey no working in it found ok now

00:11:59,530 --> 00:12:03,670
what is this in it actually I'm not

00:12:01,840 --> 00:12:06,160
going to go talk about the details but

00:12:03,670 --> 00:12:08,320
what happens is that this kernel thread

00:12:06,160 --> 00:12:13,620
that we have here that we create the

00:12:08,320 --> 00:12:18,730
trans kernel in it let me get back to it

00:12:13,620 --> 00:12:21,220
so it's going to have a it sounds like a

00:12:18,730 --> 00:12:23,740
very interesting characteristic first

00:12:21,220 --> 00:12:26,530
it's like complete part of the kernel

00:12:23,740 --> 00:12:28,209
lies in the exact memory mapping of it

00:12:26,530 --> 00:12:29,800
and so on and so forth

00:12:28,209 --> 00:12:30,970
and if we look at a card and not going

00:12:29,800 --> 00:12:35,079
to do it now you're actually going to

00:12:30,970 --> 00:12:37,629
see that we have an x XV e now this

00:12:35,079 --> 00:12:40,509
exactly is going to be after a

00:12:37,629 --> 00:12:41,709
transition of the mold for this process

00:12:40,509 --> 00:12:45,550
like to userspace

00:12:41,709 --> 00:12:48,970
and this is going to be actually a

00:12:45,550 --> 00:12:51,369
process a userspace process as you can

00:12:48,970 --> 00:12:55,660
see if you go ahead and do like PSA X on

00:12:51,369 --> 00:12:58,240
your machine and this guy so see the pit

00:12:55,660 --> 00:13:01,540
is always going to be one there can be

00:12:58,240 --> 00:13:04,449
any time of command here and everything

00:13:01,540 --> 00:13:06,369
that you see here for example this k3t

00:13:04,449 --> 00:13:09,339
is paid for that everything within

00:13:06,369 --> 00:13:12,970
brackets our kernel threads the front in

00:13:09,339 --> 00:13:15,490
the kernel itself okay so this is what

00:13:12,970 --> 00:13:17,279
Colonel Amy does and what happens after

00:13:15,490 --> 00:13:20,350
it is that you can do whatever you want

00:13:17,279 --> 00:13:23,259
with the right configuration options you

00:13:20,350 --> 00:13:26,889
can go ahead and F a script I have like

00:13:23,259 --> 00:13:29,470
a script with the Sheep Bank like being

00:13:26,889 --> 00:13:30,730
bash whatever and execute something

00:13:29,470 --> 00:13:33,339
we're going to look at it and we're

00:13:30,730 --> 00:13:36,309
going to see that you can have a system

00:13:33,339 --> 00:13:39,129
D in it you can have just a program that

00:13:36,309 --> 00:13:41,439
connects and prints something to the

00:13:39,129 --> 00:13:43,540
screen the total let it does whatever

00:13:41,439 --> 00:13:48,040
this is your easel spacing you can do

00:13:43,540 --> 00:13:49,480
whatever you want okay so basically in

00:13:48,040 --> 00:13:51,369
order to do something that are more

00:13:49,480 --> 00:13:54,100
interesting you would want to actually

00:13:51,369 --> 00:13:57,339
be able to do all kind of file

00:13:54,100 --> 00:14:00,790
operations like opening a file writing

00:13:57,339 --> 00:14:03,699
to eat doing jock tail and so on so for

00:14:00,790 --> 00:14:05,920
this the kernel provides an API an

00:14:03,699 --> 00:14:08,079
interface it is called VFS the virtual

00:14:05,920 --> 00:14:10,299
file system which means that every time

00:14:08,079 --> 00:14:14,740
you have this open read write and so on

00:14:10,299 --> 00:14:17,619
then the user does not really care what

00:14:14,740 --> 00:14:20,559
is the underlying file system or driver

00:14:17,619 --> 00:14:24,040
or the implementation they are just

00:14:20,559 --> 00:14:27,160
going to use this API and that's it now

00:14:24,040 --> 00:14:29,290
in order to use this API they would

00:14:27,160 --> 00:14:31,809
probably need to have a concept of the

00:14:29,290 --> 00:14:35,309
file now in order to have the concept of

00:14:31,809 --> 00:14:39,160
fast the kernel needs to have a way to

00:14:35,309 --> 00:14:41,620
know like the concept of files in both

00:14:39,160 --> 00:14:44,529
ways the weight manages internally

00:14:41,620 --> 00:14:48,510
that produce it needs to go ahead and

00:14:44,529 --> 00:14:50,770
have what is known black super block and

00:14:48,510 --> 00:14:52,450
registered file system and we're not

00:14:50,770 --> 00:14:53,980
going to talk into this now I talked

00:14:52,450 --> 00:14:56,800
about it in my kernel courses quite a

00:14:53,980 --> 00:14:59,890
lot but what is important is that the

00:14:56,800 --> 00:15:01,690
user it was to upend me try have like a

00:14:59,890 --> 00:15:05,290
path to work with you know slash

00:15:01,690 --> 00:15:07,779
something slash bin slash LS now in

00:15:05,290 --> 00:15:11,080
order to get we need the slash and this

00:15:07,779 --> 00:15:15,390
is called root filesystem now the root

00:15:11,080 --> 00:15:19,390
filesystem is going to be a place where

00:15:15,390 --> 00:15:21,790
we can work with that is run like this a

00:15:19,390 --> 00:15:23,890
meat from the root filesystem and do

00:15:21,790 --> 00:15:27,070
something and it can be no kind of

00:15:23,890 --> 00:15:30,150
places it can be on a ram disk it can be

00:15:27,070 --> 00:15:33,460
on a physical device it can be on

00:15:30,150 --> 00:15:35,620
remotely using NFS it can be a lot a lot

00:15:33,460 --> 00:15:37,750
a lot of things now one of the most

00:15:35,620 --> 00:15:40,930
common things that you will see for

00:15:37,750 --> 00:15:43,810
example in all of the general-purpose

00:15:40,930 --> 00:15:46,360
this promoter these pros like going to

00:15:43,810 --> 00:15:49,240
like fedora like Reddit and so on is

00:15:46,360 --> 00:15:52,770
that you're going to have an image that

00:15:49,240 --> 00:15:55,270
is going to run some executable or a

00:15:52,770 --> 00:15:56,500
shell script it does all kind of thing

00:15:55,270 --> 00:15:58,810
in color it's putable

00:15:56,500 --> 00:16:01,390
it will easily load all kind of modules

00:15:58,810 --> 00:16:05,320
in order to make your hardware work and

00:16:01,390 --> 00:16:08,529
then it is going to switch route in or

00:16:05,320 --> 00:16:11,589
in to a richer environment for example

00:16:08,529 --> 00:16:14,370
the one is going to be like on the root

00:16:11,589 --> 00:16:19,450
filesystem that you see when you look at

00:16:14,370 --> 00:16:20,980
slash like in your district so it is

00:16:19,450 --> 00:16:23,050
optional but it's not it is not

00:16:20,980 --> 00:16:25,720
obligatory when you go for example to

00:16:23,050 --> 00:16:30,640
rescue mode a lot of time you just see

00:16:25,720 --> 00:16:32,230
part of it so this part of it is usually

00:16:30,640 --> 00:16:33,910
being done in a cut-up technique rom

00:16:32,230 --> 00:16:36,610
fast it is just going to be a file

00:16:33,910 --> 00:16:38,920
system that is compressed in this way or

00:16:36,610 --> 00:16:41,589
another it's very very very common to

00:16:38,920 --> 00:16:45,400
have CGI or archive and compressed in

00:16:41,589 --> 00:16:48,339
all kind of compression methods and you

00:16:45,400 --> 00:16:52,089
can not compress it it's just okay and

00:16:48,339 --> 00:16:53,860
you can choose which method you support

00:16:52,089 --> 00:16:55,360
for example you can say hey I want to

00:16:53,860 --> 00:17:00,310
support only compression

00:16:55,360 --> 00:17:01,589
of X Z and then if you have a GC then

00:17:00,310 --> 00:17:04,870
the current will not be able to

00:17:01,589 --> 00:17:07,360
decompress it any promises now in modern

00:17:04,870 --> 00:17:09,790
systems yeah I will solve demo later

00:17:07,360 --> 00:17:11,470
most of the new something like making it

00:17:09,790 --> 00:17:15,880
from fast and then you can unmake any

00:17:11,470 --> 00:17:17,530
kind of fast they also have other very

00:17:15,880 --> 00:17:18,850
low-level code like you code and things

00:17:17,530 --> 00:17:21,750
like that and I'm not going to talk

00:17:18,850 --> 00:17:21,750
about it too much now

00:17:22,049 --> 00:17:26,860
speaking for example on Ubuntu which is

00:17:24,400 --> 00:17:29,380
the system that hammering now the system

00:17:26,860 --> 00:17:31,870
boot process looks like this let's say

00:17:29,380 --> 00:17:34,390
that we have EFI there is a grub program

00:17:31,870 --> 00:17:37,360
that is going to call be called grub

00:17:34,390 --> 00:17:39,250
something dot EFI then this grub program

00:17:37,360 --> 00:17:41,620
that is actually if you look at the fact

00:17:39,250 --> 00:17:43,270
that it's be like if I programs look

00:17:41,620 --> 00:17:44,919
like the portability kid about the

00:17:43,270 --> 00:17:46,870
windows format those were like to

00:17:44,919 --> 00:17:49,600
research all kind of file format and

00:17:46,870 --> 00:17:53,230
it's going to actually be the bootloader

00:17:49,600 --> 00:17:55,419
the clothes the kernel and it's going to

00:17:53,230 --> 00:17:58,360
also load in it from a fast the car is

00:17:55,419 --> 00:18:00,610
going to be boot the init process is

00:17:58,360 --> 00:18:02,919
always one it's going to run a minute

00:18:00,610 --> 00:18:05,799
from fast that it's going to have an

00:18:02,919 --> 00:18:07,299
interpreter that is busybox which is

00:18:05,799 --> 00:18:10,030
exactly what I'm going to do the second

00:18:07,299 --> 00:18:11,770
part of this lecture and this

00:18:10,030 --> 00:18:13,960
interpreter is going to do all kind of

00:18:11,770 --> 00:18:16,480
thing and it's going to switch route at

00:18:13,960 --> 00:18:19,059
the end so if we look at the image from

00:18:16,480 --> 00:18:21,220
FS it would look something like this and

00:18:19,059 --> 00:18:23,830
I'm not going to get too much into it

00:18:21,220 --> 00:18:27,150
but there are some interesting files to

00:18:23,830 --> 00:18:30,280
note over here sorry about this Bob

00:18:27,150 --> 00:18:32,590
alright now that we've done it I want to

00:18:30,280 --> 00:18:35,350
actually go ahead and show you another

00:18:32,590 --> 00:18:37,390
type of system so this other type of

00:18:35,350 --> 00:18:41,620
system that I'm going to build we look

00:18:37,390 --> 00:18:46,390
something like this so I'm going to have

00:18:41,620 --> 00:18:49,000
this guy here and I'm going to use qemu

00:18:46,390 --> 00:18:49,960
without kind of parameter don't it

00:18:49,000 --> 00:18:55,600
doesn't matter really what the

00:18:49,960 --> 00:18:57,760
parameters are okay and I'm going to be

00:18:55,600 --> 00:19:00,520
able to run faster by doing enable KVL

00:18:57,760 --> 00:19:02,740
but I don't have to I could append all

00:19:00,520 --> 00:19:06,550
kind of options to the kernel

00:19:02,740 --> 00:19:08,919
just like your bootloader does ok and I

00:19:06,550 --> 00:19:12,429
can decide for example if I want to have

00:19:08,919 --> 00:19:15,940
my console that is what is like the main

00:19:12,429 --> 00:19:18,040
place to read from the screen for

00:19:15,940 --> 00:19:20,080
example from cereal and to write from

00:19:18,040 --> 00:19:22,300
the keyboard for example from Syria I'm

00:19:20,080 --> 00:19:24,640
going to do like all these kind of

00:19:22,300 --> 00:19:26,110
things I will be final kind of

00:19:24,640 --> 00:19:29,380
parameters and then I can see things

00:19:26,110 --> 00:19:32,050
now examples for this system will be

00:19:29,380 --> 00:19:34,300
this I deliberately put this print case

00:19:32,050 --> 00:19:36,669
in case I will explain what is like

00:19:34,300 --> 00:19:39,010
different buffer console okay but this

00:19:36,669 --> 00:19:41,230
is my Linux system it prints the PCT

00:19:39,010 --> 00:19:44,950
dot-com and I can do all kind of

00:19:41,230 --> 00:19:46,380
spindell s and PS and I can do something

00:19:44,950 --> 00:19:51,910
like

00:19:46,380 --> 00:19:53,890
and abuse my system and may and show

00:19:51,910 --> 00:19:56,710
that I have that I have the ability like

00:19:53,890 --> 00:19:59,290
to write to the screen okay talking to a

00:19:56,710 --> 00:20:02,500
kind of these things so this is what I'm

00:19:59,290 --> 00:20:07,690
going to build okay and in the same way

00:20:02,500 --> 00:20:13,500
I can also go ahead and for example do

00:20:07,690 --> 00:20:18,040
and console redirection run

00:20:13,500 --> 00:20:21,970
non-graphical board and that's it okay

00:20:18,040 --> 00:20:24,970
in this particular example and I can go

00:20:21,970 --> 00:20:26,860
ahead and just do this as well so we're

00:20:24,970 --> 00:20:29,500
going to learn about the concept of like

00:20:26,860 --> 00:20:32,080
how I built this and how I did like very

00:20:29,500 --> 00:20:33,790
minimal things and later talk about

00:20:32,080 --> 00:20:34,240
considerations when you want to build

00:20:33,790 --> 00:20:37,720
things

00:20:34,240 --> 00:20:40,059
so our distro we're actually going to be

00:20:37,720 --> 00:20:43,000
able to destroy here just like debian

00:20:40,059 --> 00:20:47,830
just like a boot - okay it's going to be

00:20:43,000 --> 00:20:50,110
a kernel that I took from kernel.org

00:20:47,830 --> 00:20:53,110
I took it last week it's the exact

00:20:50,110 --> 00:20:56,070
recent version of 5.6 37 showed you

00:20:53,110 --> 00:20:58,480
earlier we'd busybox

00:20:56,070 --> 00:21:01,390
that I mentioned the tattered trees

00:20:58,480 --> 00:21:04,630
produce and that's what we're going to

00:21:01,390 --> 00:21:06,309
do okay maybe later we'll talk about the

00:21:04,630 --> 00:21:08,290
backers I think usually I talk about

00:21:06,309 --> 00:21:10,540
this in this particular talk I will keep

00:21:08,290 --> 00:21:12,730
it to 50 55 minutes and I will skip it

00:21:10,540 --> 00:21:13,779
although it's easy when you go over it

00:21:12,730 --> 00:21:16,239
on

00:21:13,779 --> 00:21:18,989
there are scripts for everything so you

00:21:16,239 --> 00:21:21,729
can go ahead and do things fast and

00:21:18,989 --> 00:21:26,529
there are a couple of branches in the

00:21:21,729 --> 00:21:29,259
git repository and like the current

00:21:26,529 --> 00:21:31,599
master branch is just going to go and do

00:21:29,259 --> 00:21:33,219
things very very very easily but also

00:21:31,599 --> 00:21:35,200
very bloated it's going to take a

00:21:33,219 --> 00:21:37,659
default configuration of the kernel add

00:21:35,200 --> 00:21:41,859
to it some debug feedback so you can use

00:21:37,659 --> 00:21:45,820
a kernel debugger and K prod and so on

00:21:41,859 --> 00:21:47,769
and then things are easy especially if

00:21:45,820 --> 00:21:50,469
you just want to use console without

00:21:47,769 --> 00:21:51,669
other things okay so this is what you

00:21:50,469 --> 00:21:55,029
can are going to do it I'm going to

00:21:51,669 --> 00:21:58,450
analyze the script version this is one

00:21:55,029 --> 00:22:01,239
example okay so you can see by the names

00:21:58,450 --> 00:22:16,419
that one of them is fetching the kernel

00:22:01,239 --> 00:22:18,549
Tarble is doing W get to this guy the

00:22:16,419 --> 00:22:21,039
other thing is going to actually build

00:22:18,549 --> 00:22:23,229
the kernel so instead of dot slash

00:22:21,039 --> 00:22:26,789
configure and make making store going to

00:22:23,229 --> 00:22:29,859
have a config file that we can generate

00:22:26,789 --> 00:22:31,359
graphical would make menu config make a

00:22:29,859 --> 00:22:33,969
config and so one reuse default

00:22:31,359 --> 00:22:36,639
configuration then we go to do make and

00:22:33,969 --> 00:22:39,759
we can also if we want to build all kind

00:22:36,639 --> 00:22:45,989
of models we can install modules and so

00:22:39,759 --> 00:22:48,759
on now run KVM is a script in order to

00:22:45,989 --> 00:22:52,809
go ahead and do what I did on the

00:22:48,759 --> 00:22:56,020
command line it is run qemu in a way

00:22:52,809 --> 00:22:58,930
that is like

00:22:56,020 --> 00:23:01,720
you don't need to type it yourself and

00:22:58,930 --> 00:23:08,320
fetch busybox at create initial run

00:23:01,720 --> 00:23:09,220
these are going to actually go and build

00:23:08,320 --> 00:23:12,130
busybox

00:23:09,220 --> 00:23:15,970
and create in it and create an initial

00:23:12,130 --> 00:23:19,420
file system now the reason I put this

00:23:15,970 --> 00:23:21,640
one in brackets optional and this one

00:23:19,420 --> 00:23:24,850
here run KPM France is that if you go

00:23:21,640 --> 00:23:26,470
and experiment then the first time when

00:23:24,850 --> 00:23:28,090
I like to demo these kind of things I'd

00:23:26,470 --> 00:23:31,060
like to show you what happens when I do

00:23:28,090 --> 00:23:34,840
not have any Riccardi so let me do it

00:23:31,060 --> 00:23:39,880
very quickly here let me take one of

00:23:34,840 --> 00:23:42,280
this running and I'm going to get rid of

00:23:39,880 --> 00:23:47,510
the image or D here and of all the

00:23:42,280 --> 00:23:50,670
parameters so no in Accardi

00:23:47,510 --> 00:23:54,270
okay I did a mistake because I need to

00:23:50,670 --> 00:23:56,220
at least F the console so this was a

00:23:54,270 --> 00:23:58,370
mistake I need to tell him what is the

00:23:56,220 --> 00:24:03,420
console that is were to redirect

00:23:58,370 --> 00:24:08,340
input-output to from so this is what I

00:24:03,420 --> 00:24:11,370
have and now I forgot to remove the

00:24:08,340 --> 00:24:13,200
initial round disk I will explain what I

00:24:11,370 --> 00:24:15,380
put in like the boot animations and so

00:24:13,200 --> 00:24:15,380
on

00:24:19,550 --> 00:24:24,690
okay

00:24:20,730 --> 00:24:26,610
so look what we have here we have the

00:24:24,690 --> 00:24:30,930
text that we saw earlier on as vanitas

00:24:26,610 --> 00:24:34,500
init process run at CDF Tata boom not

00:24:30,930 --> 00:24:36,180
sinking no working in it fine okay so

00:24:34,500 --> 00:24:38,820
you see this penguin this is the

00:24:36,180 --> 00:24:41,700
bootloader say hi and the reason it

00:24:38,820 --> 00:24:43,710
exists even before I had like a root

00:24:41,700 --> 00:24:46,080
filesystem is because the kernel project

00:24:43,710 --> 00:24:48,300
the kernel does a lot of things and

00:24:46,080 --> 00:24:50,520
you'd be surprised that it does all kind

00:24:48,300 --> 00:24:52,950
of think that our even are connected

00:24:50,520 --> 00:24:55,830
like to like deciding what is like the

00:24:52,950 --> 00:24:58,710
video mode if you remember that it gave

00:24:55,830 --> 00:25:01,440
like VGA ask para maybe I will show it

00:24:58,710 --> 00:25:05,700
later and you say hey check your video

00:25:01,440 --> 00:25:08,120
mode then you will see that and this

00:25:05,700 --> 00:25:10,710
actually comes from the kernel code okay

00:25:08,120 --> 00:25:13,610
now you know what I can go ahead and

00:25:10,710 --> 00:25:17,309
show it like very very very quickly

00:25:13,610 --> 00:25:19,050
vitia equal ask I'll get rid of this

00:25:17,309 --> 00:25:20,940
mode

00:25:19,050 --> 00:25:22,500
and then you see this message booting

00:25:20,940 --> 00:25:24,540
from wrong press ENTER to video more

00:25:22,500 --> 00:25:27,060
developers this is even before the

00:25:24,540 --> 00:25:30,530
kernel is being decompressed so I can go

00:25:27,060 --> 00:25:31,710
ahead and like see what are the mode

00:25:30,530 --> 00:25:35,790
oops

00:25:31,710 --> 00:25:38,040
or do scan and decide like what is the

00:25:35,790 --> 00:25:42,660
mode it I want to run it for example a

00:25:38,040 --> 00:25:46,080
very bad and ugly mo okay alright so

00:25:42,660 --> 00:25:48,180
back to our slides so this is what we

00:25:46,080 --> 00:25:51,420
are going to show now how do you build a

00:25:48,180 --> 00:25:53,160
kernel it's actually very very easy once

00:25:51,420 --> 00:25:55,800
you have like the scripts so the

00:25:53,160 --> 00:25:57,930
important thing is to know the steps you

00:25:55,800 --> 00:26:01,230
go to the kernel directory after you of

00:25:57,930 --> 00:26:04,590
course unpacked it you create a dot

00:26:01,230 --> 00:26:05,970
config file for example for the current

00:26:04,590 --> 00:26:09,780
architecture if you have you just do

00:26:05,970 --> 00:26:12,300
make and death config all means change

00:26:09,780 --> 00:26:14,400
directory of the output to another

00:26:12,300 --> 00:26:16,410
directory you don't have to do it but

00:26:14,400 --> 00:26:19,040
it's nicer if you want to look like at

00:26:16,410 --> 00:26:23,150
the code to not have code and data and

00:26:19,040 --> 00:26:25,860
the executables like together however

00:26:23,150 --> 00:26:27,870
there are a lot of auto generated code

00:26:25,860 --> 00:26:29,760
so if you do these separations many

00:26:27,870 --> 00:26:31,980
times people do that and say hey where

00:26:29,760 --> 00:26:35,340
is the definition worst include our at

00:26:31,980 --> 00:26:36,990
the c-5 it's because auto-generated car

00:26:35,340 --> 00:26:41,130
is going to go to the Auto Club and then

00:26:36,990 --> 00:26:42,720
father now you're going if you want to

00:26:41,130 --> 00:26:44,370
add additional configurations for

00:26:42,720 --> 00:26:46,980
example here and it all kind of thing so

00:26:44,370 --> 00:26:48,840
that I will be able to use Virchow and

00:26:46,980 --> 00:26:50,670
all kind of gas virtualization

00:26:48,840 --> 00:26:54,270
extensions and then you build with me

00:26:50,670 --> 00:26:56,730
very very very simple now when you want

00:26:54,270 --> 00:26:58,200
to run it you need to actually have a

00:26:56,730 --> 00:27:00,510
kernel is built if everything worked

00:26:58,200 --> 00:27:03,240
well you're going to have a VM Linux

00:27:00,510 --> 00:27:06,630
file which is going to be potentially a

00:27:03,240 --> 00:27:08,670
huge file but on our mini links we're

00:27:06,630 --> 00:27:10,230
going to make it very slow instead of a

00:27:08,670 --> 00:27:14,550
couple of hundreds of mega like around

00:27:10,230 --> 00:27:19,170
two Meg's for a for an 32-bit and around

00:27:14,550 --> 00:27:21,780
the eight max or for 64-bit and there's

00:27:19,170 --> 00:27:24,210
going to be a compressed file under arc

00:27:21,780 --> 00:27:26,820
the name of the architecture and when

00:27:24,210 --> 00:27:28,740
you have name of the architecture I'm

00:27:26,820 --> 00:27:32,400
not going to talk about it too much

00:27:28,740 --> 00:27:37,500
but what you're going to have is I have

00:27:32,400 --> 00:27:40,250
it is this like under art everlook take

00:27:37,500 --> 00:27:45,120
five seconds to have a look for example

00:27:40,250 --> 00:27:52,980
x86 arm on 64 and under x86 is both the

00:27:45,120 --> 00:27:56,250
code for x86 and x64 okay so the

00:27:52,980 --> 00:27:58,559
compressed file is going to be over here

00:27:56,250 --> 00:28:01,770
so if you want to debug your kernel you

00:27:58,559 --> 00:28:04,169
want to keep VM Linux in touch there are

00:28:01,770 --> 00:28:06,029
many debug things that you can do many

00:28:04,169 --> 00:28:07,679
bugging things that you can do also

00:28:06,029 --> 00:28:10,260
without having EDM minutes but if you

00:28:07,679 --> 00:28:12,029
want source code debugging or to refer

00:28:10,260 --> 00:28:14,730
to all kind of symbols you may

00:28:12,029 --> 00:28:15,960
definitely need there are other thing

00:28:14,730 --> 00:28:18,809
that will make your life easier in

00:28:15,960 --> 00:28:21,779
debugging it harder in debugging and in

00:28:18,809 --> 00:28:24,000
like a SLR beginning kind of 4.9 but I'm

00:28:21,779 --> 00:28:26,490
not going to tech into it right now if

00:28:24,000 --> 00:28:28,799
you hurt me and then start to thinking

00:28:26,490 --> 00:28:31,440
okay my next task is debugging the

00:28:28,799 --> 00:28:33,090
kernel then I said this sentence for you

00:28:31,440 --> 00:28:33,779
because I always get asked if and for a

00:28:33,090 --> 00:28:36,120
good reason

00:28:33,779 --> 00:28:38,520
okay so what happened if you run either

00:28:36,120 --> 00:28:41,789
this or that it's the same you can run

00:28:38,520 --> 00:28:43,470
this you can run that so what will

00:28:41,789 --> 00:28:47,220
happen if you don't use around disk is

00:28:43,470 --> 00:28:49,350
this panic that we chose so earlier so

00:28:47,220 --> 00:28:51,929
what do we need to do we need to have an

00:28:49,350 --> 00:28:53,669
image file uh no way around this that

00:28:51,929 --> 00:28:56,700
will populate so how do we do it we're

00:28:53,669 --> 00:28:58,559
going to get busy box configure busy box

00:28:56,700 --> 00:29:01,500
now in our configuration we're going to

00:28:58,559 --> 00:29:04,260
use the default configuration and make

00:29:01,500 --> 00:29:08,779
sure that busybox executable that would

00:29:04,260 --> 00:29:12,029
be generated it's going to be static why

00:29:08,779 --> 00:29:14,100
because otherwise and it's a good

00:29:12,029 --> 00:29:15,659
exercise you will see very soon that

00:29:14,100 --> 00:29:18,539
nothing runs because it will have

00:29:15,659 --> 00:29:20,730
dependencies on libraries but for that

00:29:18,539 --> 00:29:23,039
it needs a loader and for that you need

00:29:20,730 --> 00:29:24,510
to configure a lot of things and doing

00:29:23,039 --> 00:29:28,320
all this kind of thing by hand can be

00:29:24,510 --> 00:29:30,330
annoying and can be hard so long story

00:29:28,320 --> 00:29:31,799
short this is one of the reasons why

00:29:30,330 --> 00:29:34,350
there are build systems like build root

00:29:31,799 --> 00:29:37,110
like doctor project like Android and so

00:29:34,350 --> 00:29:38,850
on to take care of that but to me they

00:29:37,110 --> 00:29:41,309
were just going to make it static

00:29:38,850 --> 00:29:43,740
attributable it will run ever that has

00:29:41,309 --> 00:29:46,420
the same architecture and knows to load

00:29:43,740 --> 00:29:49,300
else files and things will be okay

00:29:46,420 --> 00:29:51,670
so we do that and pay attention we build

00:29:49,300 --> 00:29:55,170
and we install whatever we feel natural

00:29:51,670 --> 00:30:00,280
to build into we cram this and install

00:29:55,170 --> 00:30:03,220
what else do we do we create all kind of

00:30:00,280 --> 00:30:05,050
folders that we want we actually don't

00:30:03,220 --> 00:30:07,000
really need all of them you can live

00:30:05,050 --> 00:30:09,910
without frog you can live without seas

00:30:07,000 --> 00:30:12,310
you can live without them and if you

00:30:09,910 --> 00:30:15,330
configure your image file properly and

00:30:12,310 --> 00:30:20,290
like not with the default busybox and

00:30:15,330 --> 00:30:21,880
expectations then you will see that you

00:30:20,290 --> 00:30:25,000
can live without the otherwise you'll

00:30:21,880 --> 00:30:27,340
have a lot like a of annoying garbage

00:30:25,000 --> 00:30:29,980
going to the screen all the time but

00:30:27,340 --> 00:30:32,760
will not get into it now so you can

00:30:29,980 --> 00:30:36,850
create whatever folders that you want

00:30:32,760 --> 00:30:38,830
and what you are likely to do is Mount

00:30:36,850 --> 00:30:42,520
all kind of things maybe print something

00:30:38,830 --> 00:30:45,190
it's like the banner TV and when you run

00:30:42,520 --> 00:30:46,900
this init script it's going to have

00:30:45,190 --> 00:30:49,360
peeed one this is what is going to be

00:30:46,900 --> 00:30:51,490
run from the kernel that we like we

00:30:49,360 --> 00:30:53,440
showed earlier this is what was not

00:30:51,490 --> 00:30:54,940
under this is what we panic so it's

00:30:53,440 --> 00:30:58,480
going to happen here that we're going to

00:30:54,940 --> 00:31:02,620
do X Dec and this is super important to

00:30:58,480 --> 00:31:05,710
/bin slash usage now usually I would ask

00:31:02,620 --> 00:31:08,520
now what would happen if there was no

00:31:05,710 --> 00:31:11,170
exit and then I will wait for the answer

00:31:08,520 --> 00:31:13,060
but I will give you the answer like now

00:31:11,170 --> 00:31:15,670
because I can see if somebody answers it

00:31:13,060 --> 00:31:17,770
what's going to happen now if we remove

00:31:15,670 --> 00:31:22,330
that black is we're going to panic why

00:31:17,770 --> 00:31:24,820
because in it is going to finish its

00:31:22,330 --> 00:31:29,170
execution and it's going to try to exit

00:31:24,820 --> 00:31:31,240
and you cannot kill feed one so we will

00:31:29,170 --> 00:31:33,280
have a kernel panic so whatever you do

00:31:31,240 --> 00:31:37,720
in D in it unless you just want to do it

00:31:33,280 --> 00:31:39,730
one time and then it's suicide then go

00:31:37,720 --> 00:31:42,640
ahead and do exit make sure there is it

00:31:39,730 --> 00:31:46,420
in it does not taxi so here if we do

00:31:42,640 --> 00:31:49,420
just this once I exit the shell then I

00:31:46,420 --> 00:31:51,670
will panic as well unless I have like a

00:31:49,420 --> 00:31:56,590
way to respond myself and I'm not going

00:31:51,670 --> 00:31:59,940
to get into it right now okay so what

00:31:56,590 --> 00:32:02,460
happens if I want to have kernel module

00:31:59,940 --> 00:32:06,629
what our kernel modules when I be the

00:32:02,460 --> 00:32:08,850
kernel as I mentioned I can go ahead and

00:32:06,629 --> 00:32:19,259
now I'll just show you something very

00:32:08,850 --> 00:32:25,289
quickly okay so I can go ahead and have

00:32:19,259 --> 00:32:31,590
this nice VM Linux file that in this

00:32:25,289 --> 00:32:33,019
particular case it's about five minutes

00:32:31,590 --> 00:32:36,860
okay

00:32:33,019 --> 00:32:41,129
this is not for that in mind all right

00:32:36,860 --> 00:32:43,379
now pay attention if I want to go and

00:32:41,129 --> 00:32:46,350
build everything in the kernel for

00:32:43,379 --> 00:32:49,110
example for some of the things in the

00:32:46,350 --> 00:32:51,779
kernel there are a lot of subsystems now

00:32:49,110 --> 00:32:54,389
many times the distro maker wants to

00:32:51,779 --> 00:32:56,549
build one thing but the hardware of the

00:32:54,389 --> 00:32:58,259
user will not really little of this so

00:32:56,549 --> 00:33:00,629
why have all this bloat and have

00:32:58,259 --> 00:33:02,789
everything loaded so the idea is to go

00:33:00,629 --> 00:33:04,250
ahead and you can go and see in your own

00:33:02,789 --> 00:33:11,070
is closed under leaf

00:33:04,250 --> 00:33:15,389
sorry modules and then the kernel

00:33:11,070 --> 00:33:22,350
version you can see that there are a lot

00:33:15,389 --> 00:33:30,120
of Keio files for example if I want to

00:33:22,350 --> 00:33:31,620
see the integrity cards then I have a

00:33:30,120 --> 00:33:35,120
kernel object file it's a lot about

00:33:31,620 --> 00:33:39,149
kernel module now I can go ahead and

00:33:35,120 --> 00:33:40,950
configure the kernel so that this one

00:33:39,149 --> 00:33:44,639
will be built into the static image

00:33:40,950 --> 00:33:46,320
itself so the idea is that you can go

00:33:44,639 --> 00:33:49,379
ahead and I'm not going to talk too much

00:33:46,320 --> 00:33:51,299
about kernel configurations but the idea

00:33:49,379 --> 00:33:52,470
is that you can go ahead it's only

00:33:51,299 --> 00:33:55,799
because I could not have too much time

00:33:52,470 --> 00:33:57,809
right and the kernel configuration looks

00:33:55,799 --> 00:34:01,649
like this it has like tacos usually it's

00:33:57,809 --> 00:34:05,580
going to be either have yes commented

00:34:01,649 --> 00:34:08,250
out or no value for example I support I

00:34:05,580 --> 00:34:13,399
do not support kernel gzip but I do

00:34:08,250 --> 00:34:13,399
support kernel XZ okay and

00:34:13,470 --> 00:34:16,960
I can go this is for the kernel

00:34:15,789 --> 00:34:21,249
compression itself not for the round

00:34:16,960 --> 00:34:23,319
this and I can have something equals

00:34:21,249 --> 00:34:25,299
modules in this particular case I do not

00:34:23,319 --> 00:34:28,470
have anything equals modules everything

00:34:25,299 --> 00:34:31,809
that I built in my configuration is

00:34:28,470 --> 00:34:35,440
statically built into the kernel however

00:34:31,809 --> 00:34:54,759
if we go ahead and look at for example

00:34:35,440 --> 00:34:57,490
boot config whatever sorry you will see

00:34:54,759 --> 00:35:02,339
that we have a lot a lot a lot of things

00:34:57,490 --> 00:35:04,450
that are going to be with equals M so M

00:35:02,339 --> 00:35:06,220
means that is going to be a loadable

00:35:04,450 --> 00:35:09,609
kernel module that is going to be built

00:35:06,220 --> 00:35:12,519
and you will need to install it in order

00:35:09,609 --> 00:35:16,690
for it to go to sleep models and so on

00:35:12,519 --> 00:35:18,759
and hopefully if you know how to install

00:35:16,690 --> 00:35:24,160
properly and build things properly and

00:35:18,759 --> 00:35:27,910
be handled automatically by M death mode

00:35:24,160 --> 00:35:29,410
and by modprobe so the idea is that when

00:35:27,910 --> 00:35:31,329
we build if you want to build for a

00:35:29,410 --> 00:35:34,059
kernel modules we can go ahead and do

00:35:31,329 --> 00:35:39,009
something like modules install okay and

00:35:34,059 --> 00:35:41,140
this is like the syntax so after that

00:35:39,009 --> 00:35:44,829
after two modules install then we're

00:35:41,140 --> 00:35:46,690
going to have under leap modules and the

00:35:44,829 --> 00:35:49,079
version whatever I want to have however

00:35:46,690 --> 00:35:53,349
if I want to make it not for my hosts

00:35:49,079 --> 00:35:56,319
but rather for wherever I want my

00:35:53,349 --> 00:35:58,599
ramdisk to be for example run this code

00:35:56,319 --> 00:36:00,430
WIP then I need to provide these

00:35:58,599 --> 00:36:01,269
parameters so I'm not going to talk into

00:36:00,430 --> 00:36:03,489
it too much

00:36:01,269 --> 00:36:05,829
there are also kind of dependencies but

00:36:03,489 --> 00:36:08,619
you want to know that how to do this

00:36:05,829 --> 00:36:12,430
kind of things okay so this is for

00:36:08,619 --> 00:36:15,039
loadable kernel modules deaths were

00:36:12,430 --> 00:36:17,529
built inside the kernel tree and for

00:36:15,039 --> 00:36:19,539
multiple kernel modules that are built

00:36:17,529 --> 00:36:21,430
outside of the kernel tree it is you

00:36:19,539 --> 00:36:23,200
making a lower module not inside the

00:36:21,430 --> 00:36:24,700
kernel tree and you're going to refer

00:36:23,200 --> 00:36:27,150
the build system to it and there is an

00:36:24,700 --> 00:36:30,330
easy way to do it so this is how it is

00:36:27,150 --> 00:36:31,860
you've got to say op - em in a make file

00:36:30,330 --> 00:36:33,270
I'm not going to beat you now I'm

00:36:31,860 --> 00:36:34,860
teaching it in my kernel courses

00:36:33,270 --> 00:36:38,130
embedded forces and so on

00:36:34,860 --> 00:36:42,300
and you do it like add the module and

00:36:38,130 --> 00:36:45,390
then you change the directory this you -

00:36:42,300 --> 00:36:46,440
wherever you build the kernel it's very

00:36:45,390 --> 00:36:48,930
important you need to have a dog

00:36:46,440 --> 00:36:49,590
configure and all kind of header files

00:36:48,930 --> 00:36:53,490
and so on

00:36:49,590 --> 00:36:55,320
tell the build system that this is the

00:36:53,490 --> 00:36:56,850
work in director Laura Mick Foley's and

00:36:55,320 --> 00:37:00,300
Pete modules and then you can install it

00:36:56,850 --> 00:37:05,090
very easy other thing that I can go and

00:37:00,300 --> 00:37:08,220
do is take partial configurations

00:37:05,090 --> 00:37:11,280
it's called config fragments in many

00:37:08,220 --> 00:37:13,440
build systems like the octo and not that

00:37:11,280 --> 00:37:14,220
like an entire config file like I showed

00:37:13,440 --> 00:37:18,120
you before

00:37:14,220 --> 00:37:21,590
but rather have partial config for

00:37:18,120 --> 00:37:25,410
example if I want to go ahead and add a

00:37:21,590 --> 00:37:28,590
debug fragment what a k props or

00:37:25,410 --> 00:37:31,260
anything like this let's have an example

00:37:28,590 --> 00:37:35,610
here so if I look at in the kernel

00:37:31,260 --> 00:37:38,540
confit and I want to look at my kernel

00:37:35,610 --> 00:37:40,650
debug fragment it's very very very short

00:37:38,540 --> 00:37:43,740
trust me even if it's the first time

00:37:40,650 --> 00:37:46,200
that you see it this is maybe like 15

00:37:43,740 --> 00:37:48,660
lines and like the minimal config is

00:37:46,200 --> 00:37:51,600
going to be like 500 lines okay

00:37:48,660 --> 00:37:54,090
so here we're going to have all kind of

00:37:51,600 --> 00:37:56,970
things like hey we want to support K gdb

00:37:54,090 --> 00:37:59,190
and our architecture supports a GDP and

00:37:56,970 --> 00:38:01,410
in war - f KD p and want to add a phrase

00:37:59,190 --> 00:38:03,240
a phrase you may know from user space

00:38:01,410 --> 00:38:04,800
for more kind of truths if you do for

00:38:03,240 --> 00:38:07,590
example Android application development

00:38:04,800 --> 00:38:10,860
then this is like the tracer that you're

00:38:07,590 --> 00:38:11,220
going to have K probes and so on so

00:38:10,860 --> 00:38:15,150
forth

00:38:11,220 --> 00:38:17,760
so I can go ahead and use emerge

00:38:15,150 --> 00:38:19,920
configuration and see all kind of things

00:38:17,760 --> 00:38:22,350
there are all kind of scripts and that

00:38:19,920 --> 00:38:24,060
are going to be used for merging

00:38:22,350 --> 00:38:28,230
configuration for different

00:38:24,060 --> 00:38:32,790
configuration and actually I show I

00:38:28,230 --> 00:38:37,440
showed how to use it in I added just

00:38:32,790 --> 00:38:39,910
before the talk let's see where it is by

00:38:37,440 --> 00:38:48,030
the way this URL is likely to change

00:38:39,910 --> 00:38:52,599
I added in a configuration a

00:38:48,030 --> 00:38:55,299
configuration repository that explained

00:38:52,599 --> 00:38:57,849
in its commits and its branches all kind

00:38:55,299 --> 00:39:01,480
of phases you want to do when you want

00:38:57,849 --> 00:39:04,210
to build something small step by steps

00:39:01,480 --> 00:39:07,299
or build everything very bloated it then

00:39:04,210 --> 00:39:09,460
go back so here like I have like all

00:39:07,299 --> 00:39:11,470
kinds of figuration examples even if you

00:39:09,460 --> 00:39:12,640
never use it you can learn from me the

00:39:11,470 --> 00:39:15,910
user to you just like a different

00:39:12,640 --> 00:39:18,940
thing script okay now when you want to

00:39:15,910 --> 00:39:20,589
build you're going to override the dot

00:39:18,940 --> 00:39:23,619
config file this for take is super

00:39:20,589 --> 00:39:27,190
important and after that you are going

00:39:23,619 --> 00:39:30,430
to wait for the bill to end and then you

00:39:27,190 --> 00:39:31,720
can put your mechanism this crossed out

00:39:30,430 --> 00:39:36,250
things because we don't have time for

00:39:31,720 --> 00:39:39,730
that so what do we have so far we want

00:39:36,250 --> 00:39:42,089
to have a way like to build a kernel and

00:39:39,730 --> 00:39:45,339
its features to build user space tools

00:39:42,089 --> 00:39:47,470
to pack them together to handle the

00:39:45,339 --> 00:39:50,260
tendencies if there are for example if I

00:39:47,470 --> 00:39:52,359
want Lipsy maybe I want to select all

00:39:50,260 --> 00:39:55,059
kind of graphic frameworks maybe I want

00:39:52,359 --> 00:39:55,750
to have a pocket in system and so on and

00:39:55,059 --> 00:39:58,000
so forth

00:39:55,750 --> 00:40:01,569
so if you want to use something like

00:39:58,000 --> 00:40:03,309
that then things become a little bit

00:40:01,569 --> 00:40:07,390
challenging so for that we would want to

00:40:03,309 --> 00:40:12,490
probably use a build system might be up

00:40:07,390 --> 00:40:14,230
the project okay now some of the things

00:40:12,490 --> 00:40:17,230
that you want to do to advocate minimal

00:40:14,230 --> 00:40:20,789
build so lets me summarize what I have

00:40:17,230 --> 00:40:28,240
done so far and the relevant script okay

00:40:20,789 --> 00:40:35,319
so the first thing I did is to take a

00:40:28,240 --> 00:40:37,359
turbo and get it and unpack it okay in

00:40:35,319 --> 00:40:40,750
order to start working with it there is

00:40:37,359 --> 00:40:43,210
enough set up those do android framework

00:40:40,750 --> 00:40:46,779
development we don't understand the time

00:40:43,210 --> 00:40:48,730
took the same from here and these are

00:40:46,779 --> 00:40:51,940
all kind of like variables okay so we

00:40:48,730 --> 00:40:53,300
need to source it before we start so I'm

00:40:51,940 --> 00:40:55,790
not going to do it now because

00:40:53,300 --> 00:40:59,510
we're going to fetch the colonel and

00:40:55,790 --> 00:41:02,720
then we can build the colonel okay so to

00:40:59,510 --> 00:41:04,670
build the colonel we will have this

00:41:02,720 --> 00:41:07,460
everything this is exactly what we have

00:41:04,670 --> 00:41:09,620
with the slides okay this is a little

00:41:07,460 --> 00:41:11,420
bit of a change because I use a tiny

00:41:09,620 --> 00:41:14,030
config which is what I'm going to show

00:41:11,420 --> 00:41:15,770
you now and not the current standing

00:41:14,030 --> 00:41:18,320
country but I call the time config it's

00:41:15,770 --> 00:41:21,410
something that I build step by step I'm

00:41:18,320 --> 00:41:23,060
going to over here like creation of

00:41:21,410 --> 00:41:26,690
configuration file under the criminal

00:41:23,060 --> 00:41:30,770
output and then I'm going to make then

00:41:26,690 --> 00:41:33,490
I'm going to create a round disk now

00:41:30,770 --> 00:41:35,690
look what's happening here

00:41:33,490 --> 00:41:38,030
the run is that I'm going to create

00:41:35,690 --> 00:41:42,380
looks like this I'm going to get busy

00:41:38,030 --> 00:41:48,680
box and in busy box I'm going to build

00:41:42,380 --> 00:41:54,080
it with a default configuration and I'm

00:41:48,680 --> 00:42:00,620
going to go ahead and and I'm going to

00:41:54,080 --> 00:42:04,040
go ahead and I'm going to to make sure

00:42:00,620 --> 00:42:07,220
that it's static and I'm going to

00:42:04,040 --> 00:42:11,330
install it and installing it will create

00:42:07,220 --> 00:42:17,240
something under week round disk and this

00:42:11,330 --> 00:42:21,040
something will looks like this a lot of

00:42:17,240 --> 00:42:23,510
links that point to /bin busy box okay

00:42:21,040 --> 00:42:24,860
and there is going to be an executable

00:42:23,510 --> 00:42:30,020
called busy box there is going to be

00:42:24,860 --> 00:42:34,040
static okay after this look what I do

00:42:30,020 --> 00:42:36,110
I'm going to create empty directories I

00:42:34,040 --> 00:42:43,130
don't have to do this is just what I do

00:42:36,110 --> 00:42:46,310
and after that we're going to do the

00:42:43,130 --> 00:42:49,520
following thing we create an image file

00:42:46,310 --> 00:42:49,970
and this is the content what do we do

00:42:49,520 --> 00:42:52,700
here

00:42:49,970 --> 00:42:54,980
I mount praça Fest is a festival if as

00:42:52,700 --> 00:42:58,490
if I created them I echo a message in

00:42:54,980 --> 00:43:00,410
colors I do enumeration of death slash

00:42:58,490 --> 00:43:01,400
they have a popularity sorry that I

00:43:00,410 --> 00:43:02,870
don't explain those who are not

00:43:01,400 --> 00:43:06,010
experienced with it feel free to ask me

00:43:02,870 --> 00:43:07,900
question after work I'm going to

00:43:06,010 --> 00:43:11,110
port and some stream that will be

00:43:07,900 --> 00:43:14,700
automatically executable once I execute

00:43:11,110 --> 00:43:17,820
the busybox shell and I'm going to and

00:43:14,700 --> 00:43:20,650
this is a trick that I can either do or

00:43:17,820 --> 00:43:22,300
not to do and execute it directly but I

00:43:20,650 --> 00:43:24,400
forgot the key to shell this is

00:43:22,300 --> 00:43:26,320
something to make busybox less quiet

00:43:24,400 --> 00:43:28,830
more quiet about all constants okay

00:43:26,320 --> 00:43:32,380
then I'm going to make my any executable

00:43:28,830 --> 00:43:33,760
and then I'm going to repack it around

00:43:32,380 --> 00:43:40,990
these squatters repack the around this

00:43:33,760 --> 00:43:45,430
do so repack RAM disk is going to create

00:43:40,990 --> 00:43:49,510
a cpio archive and then gzip it and this

00:43:45,430 --> 00:43:54,330
is my friend what I provided the kernel

00:43:49,510 --> 00:43:58,120
so this dish in Accardi Parmenter okay

00:43:54,330 --> 00:44:01,390
so this is what I did and I did it by

00:43:58,120 --> 00:44:05,970
actually going ahead and and configuring

00:44:01,390 --> 00:44:05,970
all kind of things now if we look at

00:44:10,620 --> 00:44:13,929
[Music]

00:44:14,550 --> 00:44:21,400
build kernel daughter sage we will see

00:44:17,710 --> 00:44:24,340
that what I built there is definitely

00:44:21,400 --> 00:44:26,980
which is very bloated and KTM conceived

00:44:24,340 --> 00:44:28,530
it is not really necessary just means if

00:44:26,980 --> 00:44:32,050
you want to use water for kind of things

00:44:28,530 --> 00:44:34,810
and I asked to it with the merge config

00:44:32,050 --> 00:44:36,190
the kernel debug fermented config but

00:44:34,810 --> 00:44:38,260
the important thing is that I have a dog

00:44:36,190 --> 00:44:40,210
config and the kernel like ransom and I

00:44:38,260 --> 00:44:45,340
need of course to make the kernel work

00:44:40,210 --> 00:44:48,190
all right so I need to carefully craft

00:44:45,340 --> 00:44:51,010
the features so let's go and talk about

00:44:48,190 --> 00:44:52,330
some of the features so so far we

00:44:51,010 --> 00:44:55,210
managed to build a kernel very easily

00:44:52,330 --> 00:44:56,950
build route that's easily run qemu

00:44:55,210 --> 00:44:58,720
either with no graphic mode means

00:44:56,950 --> 00:45:02,080
without the window or with the window

00:44:58,720 --> 00:45:04,890
okay Diane require too much except for

00:45:02,080 --> 00:45:08,710
knowing which devices the console so

00:45:04,890 --> 00:45:12,220
what I want to build a distro I have two

00:45:08,710 --> 00:45:15,310
options one start from nothing and add

00:45:12,220 --> 00:45:17,980
to it until it works to start from

00:45:15,310 --> 00:45:19,630
everything and remove things until it's

00:45:17,980 --> 00:45:21,220
small enough

00:45:19,630 --> 00:45:24,340
but this way or another it's very

00:45:21,220 --> 00:45:26,260
important to understand the basics okay

00:45:24,340 --> 00:45:29,340
the basics are very hard or dependent

00:45:26,260 --> 00:45:32,980
but actually it's a pretty much the same

00:45:29,340 --> 00:45:36,100
some examples if I want to have a

00:45:32,980 --> 00:45:38,950
display output then I need to know that

00:45:36,100 --> 00:45:44,170
if I'm like on x86 I do not even need

00:45:38,950 --> 00:45:46,540
like to know the graphic card internals

00:45:44,170 --> 00:45:51,100
if I know how to work with BIOS for

00:45:46,540 --> 00:45:55,840
example I can go ahead and use BIOS 0x10

00:45:51,100 --> 00:45:58,870
services or BIOS 16x and services to get

00:45:55,840 --> 00:46:00,970
graphics and keyboard now we don't have

00:45:58,870 --> 00:46:02,650
enough time so I'm going to not explain

00:46:00,970 --> 00:46:04,690
it too much but basically speaking of

00:46:02,650 --> 00:46:06,520
graphics there are a couple of drawing

00:46:04,690 --> 00:46:08,740
past the displays like the screen

00:46:06,520 --> 00:46:11,110
wherever I see like the nice drawing and

00:46:08,740 --> 00:46:12,790
so on and the hardware is what's going

00:46:11,110 --> 00:46:14,290
to project to it but I need to see the

00:46:12,790 --> 00:46:16,600
hardware so it's going to be either with

00:46:14,290 --> 00:46:19,780
graphic processor drivers or with the

00:46:16,600 --> 00:46:22,240
BIOS and I can either draw the

00:46:19,780 --> 00:46:25,450
right-click to either of them or use a

00:46:22,240 --> 00:46:27,100
concept that is known as frame buffer so

00:46:25,450 --> 00:46:28,750
a lot of the configuration that you do

00:46:27,100 --> 00:46:30,970
with the frame buffer to visit burn

00:46:28,750 --> 00:46:33,070
directly this is using the frame buffer

00:46:30,970 --> 00:46:35,050
and if I want to work with a console and

00:46:33,070 --> 00:46:39,730
a frame buffer and see like this boot

00:46:35,050 --> 00:46:43,210
animation dislocation boot logo then I'm

00:46:39,730 --> 00:46:44,920
going to need to use a console there's

00:46:43,210 --> 00:46:47,920
also VRA I'm not going to go into it

00:46:44,920 --> 00:46:50,620
right now okay so if you want to see

00:46:47,920 --> 00:46:52,420
graphics in Linux you need to know the

00:46:50,620 --> 00:46:54,250
hardware and you need to know your

00:46:52,420 --> 00:46:55,930
requirements maybe you just want to have

00:46:54,250 --> 00:46:57,370
input output and serial cable that's

00:46:55,930 --> 00:47:01,960
okay and then you need the following

00:46:57,370 --> 00:47:05,470
configs VT a virtual terminal TTY and a

00:47:01,960 --> 00:47:06,970
list of 8250 serial console if you want

00:47:05,470 --> 00:47:10,990
to use the display and keyboard is the

00:47:06,970 --> 00:47:16,240
bios as the console then you need to

00:47:10,990 --> 00:47:18,070
either use bios function or you can if

00:47:16,240 --> 00:47:20,140
you want to use frame buffer interface

00:47:18,070 --> 00:47:22,420
and you need to actual figure a frame

00:47:20,140 --> 00:47:25,770
buffer interface for example you have

00:47:22,420 --> 00:47:29,710
the logo you need frame buffer and

00:47:25,770 --> 00:47:33,300
splash information called P splash that

00:47:29,710 --> 00:47:36,350
I'm going to show a little demo

00:47:33,300 --> 00:47:40,380
also requires frame buffer and so on

00:47:36,350 --> 00:47:43,020
okay so we need to know the hardware now

00:47:40,380 --> 00:47:44,660
let's look what we need for example if

00:47:43,020 --> 00:47:48,900
we just need like monitor and keyboard

00:47:44,660 --> 00:47:52,110
console so in Q and Q mu in q mu there

00:47:48,900 --> 00:47:54,600
is a bios of C bios serial interface is

00:47:52,110 --> 00:47:57,930
going to be TT y 0 and are all kind of

00:47:54,600 --> 00:47:59,880
display graphics so when I boot I can go

00:47:57,930 --> 00:48:02,160
ahead and check all kind of parameters

00:47:59,880 --> 00:48:05,820
for example I can say hey I want to use

00:48:02,160 --> 00:48:07,950
this and for this if I might actually be

00:48:05,820 --> 00:48:10,590
able to use it that the kernel needs to

00:48:07,950 --> 00:48:12,780
also support it or I can say hey I just

00:48:10,590 --> 00:48:17,040
I don't want any graphic I just want to

00:48:12,780 --> 00:48:19,110
do things like this ok so how do I start

00:48:17,040 --> 00:48:21,120
the build and we do not have too much

00:48:19,110 --> 00:48:24,050
time so I'm going to get like to the end

00:48:21,120 --> 00:48:26,370
like version ok

00:48:24,050 --> 00:48:28,410
the easiest way to start like from

00:48:26,370 --> 00:48:30,660
nothing is with either all no config

00:48:28,410 --> 00:48:33,300
that is make all no config is create a

00:48:30,660 --> 00:48:34,770
configuration that does all know of

00:48:33,300 --> 00:48:37,020
course from the kernel and fill

00:48:34,770 --> 00:48:39,510
directory or tiny config that is pretty

00:48:37,020 --> 00:48:42,090
much similar but it's idea is to have

00:48:39,510 --> 00:48:43,980
minimal kernel size and then I'm going

00:48:42,090 --> 00:48:47,400
to start an adult kind of things

00:48:43,980 --> 00:48:49,140
the idea for debugging will be to have

00:48:47,400 --> 00:48:51,510
all kind of messages and make sure that

00:48:49,140 --> 00:48:54,660
my components are included and do what

00:48:51,510 --> 00:48:57,270
they want and in order to even start and

00:48:54,660 --> 00:49:00,690
see them I need to first enable print K

00:48:57,270 --> 00:49:03,570
which is the way to enable it if I want

00:49:00,690 --> 00:49:07,560
any i/o with keyboardist per serial I

00:49:03,570 --> 00:49:10,530
need config TTY and if I want to have

00:49:07,560 --> 00:49:13,500
screen and keyboard to work I need to

00:49:10,530 --> 00:49:15,810
have config VT and if I want it to be

00:49:13,500 --> 00:49:18,330
the console that is not a serial only 12

00:49:15,810 --> 00:49:21,270
config VT console if I want to see

00:49:18,330 --> 00:49:24,570
something I will need to have config VGA

00:49:21,270 --> 00:49:26,520
console or another hardware console for

00:49:24,570 --> 00:49:29,490
serial it's a little bit simpler I will

00:49:26,520 --> 00:49:33,360
need the tty and I will need the context

00:49:29,490 --> 00:49:34,800
or light it's 250 and a 250 console for

00:49:33,360 --> 00:49:36,870
keyboard on the screen and we'll need

00:49:34,800 --> 00:49:40,440
config input keyboard on the keyboard

00:49:36,870 --> 00:49:42,450
ATK 80 keyboard I can add all kinds of

00:49:40,440 --> 00:49:44,580
things and actually make use of it I

00:49:42,450 --> 00:49:46,260
will need an imitate does something but

00:49:44,580 --> 00:49:46,619
I don't have to because some things on

00:49:46,260 --> 00:49:50,759
the

00:49:46,619 --> 00:49:52,859
actually and parts a configuration a

00:49:50,759 --> 00:49:57,359
parts input and do things with it for

00:49:52,859 --> 00:49:59,549
example magic sees RUP now if I want to

00:49:57,359 --> 00:50:02,130
add user space I need to be able to

00:49:59,549 --> 00:50:05,849
execute binaries and for that if I want

00:50:02,130 --> 00:50:08,069
to use the Linux standard execution and

00:50:05,849 --> 00:50:08,819
get format I'm going to use config bean

00:50:08,069 --> 00:50:10,950
for myself

00:50:08,819 --> 00:50:12,150
and if I want to execute script I'm

00:50:10,950 --> 00:50:13,940
going to do like they need if they

00:50:12,150 --> 00:50:16,710
generate that config bean from a script

00:50:13,940 --> 00:50:18,869
now what if I want to have more useful

00:50:16,710 --> 00:50:21,960
application then I would want to go and

00:50:18,869 --> 00:50:24,240
have like frock if I want to use simple

00:50:21,960 --> 00:50:26,400
tools like PS I would need to populate

00:50:24,240 --> 00:50:28,109
slash def in order to use device drivers

00:50:26,400 --> 00:50:29,700
and so on so here you can see we are

00:50:28,109 --> 00:50:32,339
going to pick this one pick that and

00:50:29,700 --> 00:50:34,619
there really is no end to it but at the

00:50:32,339 --> 00:50:37,069
end of the process you can have all

00:50:34,619 --> 00:50:39,539
kinds of displays and it's really nice

00:50:37,069 --> 00:50:40,289
now we don't have time for the next

00:50:39,539 --> 00:50:43,950
subject

00:50:40,289 --> 00:50:47,460
I believe but I'll go very quickly the

00:50:43,950 --> 00:50:50,549
what I show the continuation if it's

00:50:47,460 --> 00:50:52,710
interesting to you and maybe subscribe

00:50:50,549 --> 00:50:54,900
to like a YouTube channel that I have

00:50:52,710 --> 00:50:58,170
prepared last week following the

00:50:54,900 --> 00:51:00,869
previous post north talk and I would add

00:50:58,170 --> 00:51:02,309
explanation about it so about the

00:51:00,869 --> 00:51:04,019
graphics there are different graphics

00:51:02,309 --> 00:51:05,999
mode and different graphics mode if you

00:51:04,019 --> 00:51:07,890
want to make sense of them but that the

00:51:05,999 --> 00:51:11,789
digits would supporters professor this

00:51:07,890 --> 00:51:13,739
is support only for 16 and VGA then this

00:51:11,789 --> 00:51:16,440
is support it also has frame buffer you

00:51:13,739 --> 00:51:20,759
can see very pixel and pinguin here is

00:51:16,440 --> 00:51:22,410
the logo basically there are all kind of

00:51:20,759 --> 00:51:25,380
modes and you will need to configure

00:51:22,410 --> 00:51:26,999
them as well good way to see if

00:51:25,380 --> 00:51:28,559
something works is to cut something to

00:51:26,999 --> 00:51:33,359
the frame buffer here you can see for

00:51:28,559 --> 00:51:38,430
example VGA frame buffer and here you

00:51:33,359 --> 00:51:40,739
can see a higher resolution and high

00:51:38,430 --> 00:51:42,480
resolution acting pepper so there are

00:51:40,739 --> 00:51:46,019
all kind of parameters that can Center

00:51:42,480 --> 00:51:48,089
the pinguin I can I can go and decide if

00:51:46,019 --> 00:51:50,489
there is take over I can add more

00:51:48,089 --> 00:51:56,059
outward so on but these things tend to

00:51:50,489 --> 00:51:58,170
be quite complex sometimes so for this

00:51:56,059 --> 00:52:00,059
you need to first know the hardware

00:51:58,170 --> 00:52:02,489
second have patience

00:52:00,059 --> 00:52:04,019
and third probably use a build system

00:52:02,489 --> 00:52:09,269
like you of the project we can talked

00:52:04,019 --> 00:52:12,329
about in in the previous week and with

00:52:09,269 --> 00:52:15,809
the in the lucky buck and I put

00:52:12,329 --> 00:52:17,819
additional YouTube videos that elaborate

00:52:15,809 --> 00:52:20,910
and what I did in La Veta and in

00:52:17,819 --> 00:52:22,619
addition to it what I also did and what

00:52:20,910 --> 00:52:24,089
also will do is actually if you care

00:52:22,619 --> 00:52:25,680
enough about your project and need it

00:52:24,089 --> 00:52:27,449
then I have an online course that I

00:52:25,680 --> 00:52:28,709
teach in two weeks from now something

00:52:27,449 --> 00:52:32,699
like this you can look at the website

00:52:28,709 --> 00:52:36,109
and contact me for that so what we have

00:52:32,699 --> 00:52:45,769
is a graphical this product with it and

00:52:36,109 --> 00:52:49,249
one more thing that I had is let's see I

00:52:45,769 --> 00:52:55,769
will change it slightly their

00:52:49,249 --> 00:53:00,059
distribution I want a minute Rd and I

00:52:55,769 --> 00:53:02,880
will remove the no splash tareq it see

00:53:00,059 --> 00:53:06,420
like a splash screen use from T splash

00:53:02,880 --> 00:53:09,089
okay I'm the great graphical designer in

00:53:06,420 --> 00:53:11,519
the world and we concede this is like a

00:53:09,089 --> 00:53:13,920
way where I use like the screen like

00:53:11,519 --> 00:53:18,359
from user space utilize like the frame

00:53:13,920 --> 00:53:23,009
buffer so I can go ahead now and use p

00:53:18,359 --> 00:53:24,449
splash now i terminated in qemu and

00:53:23,009 --> 00:53:25,769
that's it so there are a lot of things

00:53:24,449 --> 00:53:28,439
you can do and I hope I gave you like

00:53:25,769 --> 00:53:31,769
the taste for it so when you want to

00:53:28,439 --> 00:53:34,380
build things you may really want to

00:53:31,769 --> 00:53:36,630
build system and build system usually do

00:53:34,380 --> 00:53:39,929
quite a pretty much the same things that

00:53:36,630 --> 00:53:42,869
are going to have all kind of metadata

00:53:39,929 --> 00:53:45,569
that you will parse in order to do very

00:53:42,869 --> 00:53:47,519
common steps like obtaining the source

00:53:45,569 --> 00:53:49,650
and building cross tool chains obtaining

00:53:47,519 --> 00:53:52,109
the Linux kernel and building it same

00:53:49,650 --> 00:53:55,559
from Ubud other boot loaders configuring

00:53:52,109 --> 00:53:57,539
packages building packages and packaging

00:53:55,559 --> 00:53:59,910
packages and creating the root

00:53:57,539 --> 00:54:03,689
filesystem and creating all kind of

00:53:59,910 --> 00:54:07,469
screws for flashing and so on so Linux

00:54:03,689 --> 00:54:09,779
build systems and the idea and with this

00:54:07,469 --> 00:54:13,150
I'm going to finish the talk will be to

00:54:09,779 --> 00:54:16,029
take a house that is on the left side

00:54:13,150 --> 00:54:17,950
and somehow answer this question mark

00:54:16,029 --> 00:54:20,470
resolve it and create everything it's

00:54:17,950 --> 00:54:21,819
under target and Yocto is one of these

00:54:20,470 --> 00:54:25,000
build system that does it

00:54:21,819 --> 00:54:29,829
okay so now I will not do it demo for

00:54:25,000 --> 00:54:31,779
Yocto but Yocto has this metadata as I

00:54:29,829 --> 00:54:35,170
mentioned in the previous lightning talk

00:54:31,779 --> 00:54:37,720
that do the phases that I mentioned like

00:54:35,170 --> 00:54:40,930
fetching packages configuring them

00:54:37,720 --> 00:54:43,420
patching them compiling packaging and

00:54:40,930 --> 00:54:45,700
creating your father says testing and

00:54:43,420 --> 00:54:47,170
preparing for deployment and as I

00:54:45,700 --> 00:54:53,289
mentioned if you want more information

00:54:47,170 --> 00:54:55,450
then and there is under a this YouTube

00:54:53,289 --> 00:54:57,549
channel or in the playlist okay like

00:54:55,450 --> 00:55:00,630
it's still too new I need to make sense

00:54:57,549 --> 00:55:04,990
of it sorry for being old-fashioned and

00:55:00,630 --> 00:55:08,680
this is not hardly come on okay so you

00:55:04,990 --> 00:55:10,329
can see over there and the start will be

00:55:08,680 --> 00:55:12,430
available and you will have all the

00:55:10,329 --> 00:55:15,549
repositories organized together at one

00:55:12,430 --> 00:55:18,190
slide and tomorrow and if you're

00:55:15,549 --> 00:55:20,230
interested in more information then

00:55:18,190 --> 00:55:22,420
these are going to be the next courses

00:55:20,230 --> 00:55:25,240
that I'm going to teach about your

00:55:22,420 --> 00:55:29,170
project about kernel development and

00:55:25,240 --> 00:55:31,270
about Android of the motif Android

00:55:29,170 --> 00:55:33,460
security and all kind of other goodies

00:55:31,270 --> 00:55:38,230
so if you have any questions I'm happy

00:55:33,460 --> 00:55:42,539
to take them and I wish you all good ale

00:55:38,230 --> 00:55:45,900
and a lot of happiness and hope the word

00:55:42,539 --> 00:55:50,589
recovers and gets better after this

00:55:45,900 --> 00:55:53,490
coronal problem so thank you for

00:55:50,589 --> 00:55:56,980
listening and watching

00:55:53,490 --> 00:55:58,779
thanks a lot Ron and there are some

00:55:56,980 --> 00:56:01,240
questions that have come in so my

00:55:58,779 --> 00:56:04,720
believe you have already answered in

00:56:01,240 --> 00:56:06,640
your talk but most people just say that

00:56:04,720 --> 00:56:08,799
they appreciate the content it's really

00:56:06,640 --> 00:56:10,809
great there's a question here when is

00:56:08,799 --> 00:56:13,450
the next kernel course and are there any

00:56:10,809 --> 00:56:15,670
kernel training labs documentation

00:56:13,450 --> 00:56:18,670
available from you on demand either paid

00:56:15,670 --> 00:56:22,720
or free so they are both paid in both

00:56:18,670 --> 00:56:27,420
free and the next kernel course is its

00:56:22,720 --> 00:56:31,119
main thing and poops

00:56:27,420 --> 00:56:35,740
yeah so there is a plant course at me

00:56:31,119 --> 00:56:38,920
for but the idea what happened is that I

00:56:35,740 --> 00:56:43,660
was living and I was most at the time

00:56:38,920 --> 00:56:46,420
like a it Singapore and like last year

00:56:43,660 --> 00:56:49,210
and I came back to Israel right leave

00:56:46,420 --> 00:56:51,420
now and plan to do these courses in

00:56:49,210 --> 00:56:54,220
Israel and they became online so

00:56:51,420 --> 00:56:56,230
schedule has changed a little bit but

00:56:54,220 --> 00:56:59,200
the next course is going to happen in

00:56:56,230 --> 00:57:01,119
May probably but because schedule and

00:56:59,200 --> 00:57:03,460
flight have changed and if there is like

00:57:01,119 --> 00:57:05,259
a particular need just talk to me and

00:57:03,460 --> 00:57:07,809
maybe we can arrange it also like

00:57:05,259 --> 00:57:09,220
another day so on flexible hours like

00:57:07,809 --> 00:57:11,319
you know everybody's working from home

00:57:09,220 --> 00:57:14,680
those who are fortunate enough to be

00:57:11,319 --> 00:57:16,990
able to work at these days so I'm super

00:57:14,680 --> 00:57:20,650
flexible just email me and like I will

00:57:16,990 --> 00:57:23,470
see and watch them thank you

00:57:20,650 --> 00:57:25,690
great and I believe it's worth

00:57:23,470 --> 00:57:28,359
mentioning also that you were originally

00:57:25,690 --> 00:57:31,089
meant to have a training day at the

00:57:28,359 --> 00:57:34,989
physical for storage event right yeah so

00:57:31,089 --> 00:57:36,819
I hope and first of all we'll do it in

00:57:34,989 --> 00:57:37,539
November but hopefully we'll do it with

00:57:36,819 --> 00:57:41,380
first north

00:57:37,539 --> 00:57:43,450
I also anytime soon like we are able to

00:57:41,380 --> 00:57:46,390
do the one-day Android automotive the

00:57:43,450 --> 00:57:49,690
course and we're able to do it online

00:57:46,390 --> 00:57:54,309
because I was going to use all kind of

00:57:49,690 --> 00:57:56,140
emulators anyway and so talked to the

00:57:54,309 --> 00:57:59,829
first North organizers and will be very

00:57:56,140 --> 00:58:04,059
very very happy to to do that and by the

00:57:59,829 --> 00:58:05,230
way for those who want the Linux

00:58:04,059 --> 00:58:06,700
Foundation I work for the Linux

00:58:05,230 --> 00:58:09,059
Foundation I'm training partner of them

00:58:06,700 --> 00:58:12,309
now they have like really really big

00:58:09,059 --> 00:58:15,640
discounts on training so if you want

00:58:12,309 --> 00:58:17,950
them for all my training certificates

00:58:15,640 --> 00:58:20,230
and all that then I can hook you up I

00:58:17,950 --> 00:58:22,119
can get you like best price and so on

00:58:20,230 --> 00:58:24,940
like you can contact them directly but

00:58:22,119 --> 00:58:26,589
like if you I mean they cut it by like

00:58:24,940 --> 00:58:28,299
half it being something like that so

00:58:26,589 --> 00:58:31,920
it's not such a bad deal right now

00:58:28,299 --> 00:58:34,420
and then there is kernel versus also

00:58:31,920 --> 00:58:37,989
really nice and then there was a

00:58:34,420 --> 00:58:39,880
question about the github URL and lights

00:58:37,989 --> 00:58:40,630
and so on but I guess you already said

00:58:39,880 --> 00:58:43,580
that you

00:58:40,630 --> 00:58:46,010
put everything in the slides and have a

00:58:43,580 --> 00:58:51,170
link to it yeah yeah I just want to

00:58:46,010 --> 00:58:53,750
emphasize one thing and so okay so it's

00:58:51,170 --> 00:59:00,080
not showing you so there-there is the

00:58:53,750 --> 00:59:05,360
kernel config one and there is the there

00:59:00,080 --> 00:59:07,100
is the script and Unicron effects and

00:59:05,360 --> 00:59:10,010
run disk and always come to think that I

00:59:07,100 --> 00:59:13,550
did and the URL for that may change

00:59:10,010 --> 00:59:17,630
because I could not fork a project from

00:59:13,550 --> 00:59:21,400
itself and I did not want to rename it

00:59:17,630 --> 00:59:24,020
because I did some talk at the Linux

00:59:21,400 --> 00:59:28,580
adult embedded lips conference last year

00:59:24,020 --> 00:59:29,750
and and it was on different things this

00:59:28,580 --> 00:59:32,660
is why I said at the beginning that they

00:59:29,750 --> 00:59:34,820
give different focus and I did not want

00:59:32,660 --> 00:59:36,440
to change the name of the repo maybe I

00:59:34,820 --> 00:59:39,800
will I will decide after the talk what I

00:59:36,440 --> 00:59:41,780
do okay so this would be available yeah

00:59:39,800 --> 00:59:43,870
really nice and then there was a

00:59:41,780 --> 00:59:47,600
question from from the YouTube audience

00:59:43,870 --> 00:59:50,240
when you type make - j16 what is the

00:59:47,600 --> 00:59:54,190
meaning of the j16 argument I believe it

00:59:50,240 --> 00:59:57,470
was answered that it's the number of of

00:59:54,190 --> 00:59:58,610
concurrent jobs that make creates you

00:59:57,470 --> 01:00:01,970
want to elaborate combats

00:59:58,610 --> 01:00:04,310
that's true now basically the idea of

01:00:01,970 --> 01:00:08,360
fate is going to be and something like

01:00:04,310 --> 01:00:10,970
this like if you look under brock cpu

01:00:08,360 --> 01:00:13,610
info this is like the guideline and it's

01:00:10,970 --> 01:00:16,130
like not exact science then you're going

01:00:13,610 --> 01:00:18,580
to have like a number of like processor

01:00:16,130 --> 01:00:20,720
packages that you have like physical

01:00:18,580 --> 01:00:23,360
things that you buy like at the store

01:00:20,720 --> 01:00:25,010
and put it like on the processor or

01:00:23,360 --> 01:00:28,070
socket put it on the motherboard and

01:00:25,010 --> 01:00:31,730
then you may have several course here

01:00:28,070 --> 01:00:34,220
processor and then you may have like an

01:00:31,730 --> 01:00:37,010
eye prote reticle Northport reading so

01:00:34,220 --> 01:00:39,590
the guidelines is usually to make best

01:00:37,010 --> 01:00:40,790
use of your machine to take the number

01:00:39,590 --> 01:00:43,220
here the higher number that you have

01:00:40,790 --> 01:00:45,740
here multiply it by 2 like you have

01:00:43,220 --> 01:00:48,650
hyper threading but there are it's a

01:00:45,740 --> 01:00:50,760
guideline it's not exact science many

01:00:48,650 --> 01:00:54,120
times it's a bad idea and not

01:00:50,760 --> 01:00:57,660
to get into it now it depends like also

01:00:54,120 --> 01:01:01,590
when and where and when I say bad idea

01:00:57,660 --> 01:01:06,030
then in notorious systems like the

01:01:01,590 --> 01:01:07,530
Android Open Source project and if you

01:01:06,030 --> 01:01:10,470
don't have like super strong computers

01:01:07,530 --> 01:01:12,000
and you know it's not going to end up

01:01:10,470 --> 01:01:16,680
very nice for you you're going to need

01:01:12,000 --> 01:01:18,450
to read new summarize ok yeah I have

01:01:16,680 --> 01:01:21,930
some memories of my own trying to

01:01:18,450 --> 01:01:27,060
compile cute WebKit with not enough RAM

01:01:21,930 --> 01:01:29,580
it is a similar experience and there was

01:01:27,060 --> 01:01:31,980
another question here I love seeing how

01:01:29,580 --> 01:01:33,690
how the flow of the kernel boots is

01:01:31,980 --> 01:01:36,150
there a way to see this flow of

01:01:33,690 --> 01:01:38,250
functions and boot up how it goes

01:01:36,150 --> 01:01:39,900
through on a particular system is there

01:01:38,250 --> 01:01:42,150
a way to trace it somehow in a

01:01:39,900 --> 01:01:43,380
high-level sense yeah so that's a good

01:01:42,150 --> 01:01:46,230
question do I have time to demonstrate

01:01:43,380 --> 01:01:48,390
I'll do it very quickly if I have like

01:01:46,230 --> 01:01:52,610
the idea is like the easiest thing if

01:01:48,390 --> 01:01:52,610
you have an Hardware debugger or QEMU

01:01:53,990 --> 01:02:02,520
would be to attach a hardware debugger

01:01:56,940 --> 01:02:06,270
or qmu and then so I'm going to show it

01:02:02,520 --> 01:02:14,910
like here and just like put breakpoint

01:02:06,270 --> 01:02:19,770
in like a go ahead debug this guy and VM

01:02:14,910 --> 01:02:22,500
Linux for example ok and it is like the

01:02:19,770 --> 01:02:23,700
source code without ok now I'm going to

01:02:22,500 --> 01:02:27,570
soon at every time they not become

01:02:23,700 --> 01:02:30,140
focused on me so so and it's going to be

01:02:27,570 --> 01:02:33,050
the kernel with the parameters and but

01:02:30,140 --> 01:02:39,390
basically what I'm going to do is

01:02:33,050 --> 01:02:42,330
connect to my target this - s s this is

01:02:39,390 --> 01:02:46,410
what it does and then I can go and put

01:02:42,330 --> 01:03:00,140
breakpoints let's say in start kernel or

01:02:46,410 --> 01:03:00,140
in B rest in a or in B and 3 X 1000

01:03:01,329 --> 01:03:08,240
okay I made a mistake somewhere

01:03:05,690 --> 01:03:12,619
and I know why I made a mistake because

01:03:08,240 --> 01:03:17,680
I did not put it with no KLR this is the

01:03:12,619 --> 01:03:17,680
mistake so

01:03:18,240 --> 01:03:25,470
buta darn are incorrect actually it's

01:03:20,400 --> 01:03:27,690
like it's a good example okay but you'd

01:03:25,470 --> 01:03:30,450
say that the general the general tips is

01:03:27,690 --> 01:03:33,450
to to rahmatan qemu and use GDB or a

01:03:30,450 --> 01:03:36,840
similar debugger to yeah yeah that's the

01:03:33,450 --> 01:03:39,090
general tip however however the coil

01:03:36,840 --> 01:03:42,600
it's a tricky question because what is

01:03:39,090 --> 01:03:45,480
considered boot in x86 actually arm it's

01:03:42,600 --> 01:03:49,140
much easier in x86 there is something

01:03:45,480 --> 01:03:49,830
that is annoying for gdb but it's

01:03:49,140 --> 01:03:52,800
workable

01:03:49,830 --> 01:03:56,480
and then when the kernel boots it boots

01:03:52,800 --> 01:03:58,950
in something called 16-bit real mode and

01:03:56,480 --> 01:04:01,670
when the kernel itself operates it's in

01:03:58,950 --> 01:04:03,750
something called protected mode and

01:04:01,670 --> 01:04:07,590
everything that happens before is a

01:04:03,750 --> 01:04:09,740
little harder to to get past the things

01:04:07,590 --> 01:04:14,940
the reason why I wanted to demo thing is

01:04:09,740 --> 01:04:19,920
that it's like so easy no quick target I

01:04:14,940 --> 01:04:30,930
want to do target sorry and target

01:04:19,920 --> 01:04:33,950
remote okay I missed something I just

01:04:30,930 --> 01:04:33,950
don't know what I missed

01:04:34,609 --> 01:04:39,060
okay so our thing but never mind

01:04:36,990 --> 01:04:41,690
like you may be competing in the notes

01:04:39,060 --> 01:04:43,800
after afterwards when we put him up on

01:04:41,690 --> 01:04:46,850
we don't put the slides up and so on

01:04:43,800 --> 01:04:50,250
yeah so maybe it's good to cut this part

01:04:46,850 --> 01:04:52,380
hardware debugger but like to do each

01:04:50,250 --> 01:04:54,270
break oh no no I know exactly what the

01:04:52,380 --> 01:04:55,920
problem is because the symbols I did

01:04:54,270 --> 01:04:56,910
case there are but these addresses are

01:04:55,920 --> 01:05:00,800
not true

01:04:56,910 --> 01:05:03,570
and basically if you look at Prague and

01:05:00,800 --> 01:05:05,970
chaos seems and you will search for the

01:05:03,570 --> 01:05:08,940
value of theta let's say start kernel

01:05:05,970 --> 01:05:11,340
and okay I removed it already then you

01:05:08,940 --> 01:05:15,720
see that it's different so now what I

01:05:11,340 --> 01:05:18,480
need to do like is reload this and then

01:05:15,720 --> 01:05:21,750
it will be okay okay I'll do it later

01:05:18,480 --> 01:05:24,119
are there more questions no that was the

01:05:21,750 --> 01:05:25,470
last question actually so I think in

01:05:24,119 --> 01:05:27,210
that case we are we are more or less

01:05:25,470 --> 01:05:32,020
done or if you want to if you want to

01:05:27,210 --> 01:05:37,180
show just the capture of the kernel unit

01:05:32,020 --> 01:05:40,300
Oh of the colonel in it yeah or the the

01:05:37,180 --> 01:05:42,550
gdb session you have going yeah so I

01:05:40,300 --> 01:05:44,619
need to actually have a look because I

01:05:42,550 --> 01:05:50,110
don't know case LR is what they should

01:05:44,619 --> 01:06:43,300
have done or sure and let's have a

01:05:50,110 --> 01:06:46,810
little bit okay I think any to have an

01:06:43,300 --> 01:06:48,910
and heartbreak or maybe okay there is a

01:06:46,810 --> 01:06:51,130
good chance I'm not running the same

01:06:48,910 --> 01:06:52,869
Colonel when I think about it so never

01:06:51,130 --> 01:06:54,609
mind I mean it it will take me like one

01:06:52,869 --> 01:06:59,200
minute but like way that I'm doing it

01:06:54,609 --> 01:07:02,619
like while we're ready it's not it's not

01:06:59,200 --> 01:07:06,369
idea so I think it's better like to do

01:07:02,619 --> 01:07:07,869
conclude here that's like the whoever

01:07:06,369 --> 01:07:10,210
asked the question I'd be able to like

01:07:07,869 --> 01:07:13,420
to like answer it like immediately like

01:07:10,210 --> 01:07:16,060
after to talk okay yeah great great and

01:07:13,420 --> 01:07:18,130
thanks again for a really good talk it

01:07:16,060 --> 01:07:20,910
was super interesting to see things in

01:07:18,130 --> 01:07:23,650
in more detail than you usually do and

01:07:20,910 --> 01:07:25,800
with that I will hand over back to Joe

01:07:23,650 --> 01:07:28,860
on

01:07:25,800 --> 01:07:31,140
thank you and with that I would like to

01:07:28,860 --> 01:07:33,770
thank our speakers our sponsors and all

01:07:31,140 --> 01:07:33,770
our viewers

01:07:39,859 --> 01:07:41,920

YouTube URL: https://www.youtube.com/watch?v=JtQu3sLMsWk


