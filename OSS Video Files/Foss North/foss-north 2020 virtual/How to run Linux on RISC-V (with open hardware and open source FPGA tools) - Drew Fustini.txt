Title: How to run Linux on RISC-V (with open hardware and open source FPGA tools) - Drew Fustini
Publication date: 2020-11-16
Playlist: foss-north 2020 virtual
Description: 
	Talk details: https://foss-north.se/2020/speakers-and-talks.html#ffustini
Conference details: https://foss-north.se/2020/
Captions: 
	00:00:00,030 --> 00:00:05,759
welcome to force north the virtual

00:00:02,909 --> 00:00:08,040
edition we would like to thank all our

00:00:05,759 --> 00:00:12,090
sponsors and partners in this difficult

00:00:08,040 --> 00:00:15,550
situation our gold sponsors look soft

00:00:12,090 --> 00:00:19,750
and ansible by Red Hat

00:00:15,550 --> 00:00:21,980
our silver sponsors ITRs group and make

00:00:19,750 --> 00:00:25,660
it right

00:00:21,980 --> 00:00:28,720
our base sponsors

00:00:25,660 --> 00:00:30,880
our partner projects the open source

00:00:28,720 --> 00:00:34,000
community and the region of Gothenburg

00:00:30,880 --> 00:00:36,070
and a huge thanks to our awesome

00:00:34,000 --> 00:00:40,300
community this would not have been

00:00:36,070 --> 00:00:43,480
possible without you welcome back so

00:00:40,300 --> 00:00:46,420
next up is drew who will talk about risk

00:00:43,480 --> 00:00:50,320
V and running Linux on it the stage is

00:00:46,420 --> 00:00:52,660
yours drew hello my name is Drew steamie

00:00:50,320 --> 00:00:55,059
I wanted to talk today about two things

00:00:52,660 --> 00:00:57,760
I'm quite excited about which is Linux

00:00:55,059 --> 00:01:00,040
and RISC 5 specifically talking about

00:00:57,760 --> 00:01:04,180
running it on open source hardware and

00:01:00,040 --> 00:01:06,789
with open source PGA tools so just a

00:01:04,180 --> 00:01:08,950
little bit about me I'm sad not been too

00:01:06,789 --> 00:01:10,450
fast nor 'the before so maybe next year

00:01:08,950 --> 00:01:14,080
I'll get there in person but it's great

00:01:10,450 --> 00:01:16,450
to do it online during the day so to

00:01:14,080 --> 00:01:19,300
speak I'm a hardware designer at a PCB

00:01:16,450 --> 00:01:20,590
manufacturing service in the US and then

00:01:19,300 --> 00:01:22,570
I volunteer on the board of directors

00:01:20,590 --> 00:01:25,180
for the Beagle Buddha Burke Foundation

00:01:22,570 --> 00:01:28,180
we make small open hardware Linux

00:01:25,180 --> 00:01:30,580
computers and I'm also part of the open

00:01:28,180 --> 00:01:31,899
source hardware Association if you

00:01:30,580 --> 00:01:34,509
haven't heard of us before we have

00:01:31,899 --> 00:01:36,069
actually a nice way to certify your

00:01:34,509 --> 00:01:37,509
projects if you're building something

00:01:36,069 --> 00:01:39,490
that's open-source hard work so you can

00:01:37,509 --> 00:01:43,990
find out more information about that at

00:01:39,490 --> 00:01:45,940
certification dasha org so if you've not

00:01:43,990 --> 00:01:48,369
heard of the term before open-source

00:01:45,940 --> 00:01:50,200
hardware is hardware whose design is

00:01:48,369 --> 00:01:53,740
made publicly available so that anyone

00:01:50,200 --> 00:01:56,259
can study modify distribute make and

00:01:53,740 --> 00:01:59,470
sell the design or hardware based on

00:01:56,259 --> 00:02:02,289
that design so I mostly do electronics

00:01:59,470 --> 00:02:03,880
so for an electronics project the

00:02:02,289 --> 00:02:05,619
documentation for an open-source

00:02:03,880 --> 00:02:09,819
hardware project would include the

00:02:05,619 --> 00:02:11,739
schematics the board layout and the bill

00:02:09,819 --> 00:02:14,140
materials and for the schematics and the

00:02:11,739 --> 00:02:16,840
board layouts it would be important to

00:02:14,140 --> 00:02:18,580
share the editable source file so I use

00:02:16,840 --> 00:02:20,590
a program called kicad so I'd be sharing

00:02:18,580 --> 00:02:23,890
the key CAD files or if you used eagle

00:02:20,590 --> 00:02:25,930
or LTM you'd be sharing the files from

00:02:23,890 --> 00:02:27,550
your CAD program the reason for that is

00:02:25,930 --> 00:02:29,260
if you want other people to be able to

00:02:27,550 --> 00:02:31,270
collaborate on the development then it's

00:02:29,260 --> 00:02:34,390
best for them to have the original CAD

00:02:31,270 --> 00:02:36,040
files additionally you want to publish

00:02:34,390 --> 00:02:39,250
your build materials that people can

00:02:36,040 --> 00:02:41,470
actually build the project

00:02:39,250 --> 00:02:44,350
based on the parts list and one thing to

00:02:41,470 --> 00:02:45,640
keep in mind is if you want to other

00:02:44,350 --> 00:02:47,320
people to be able to fill your project

00:02:45,640 --> 00:02:51,400
make sure that they can source the parts

00:02:47,320 --> 00:02:54,490
and low quantity I go more into open

00:02:51,400 --> 00:02:58,270
source hardware in this CCC talk that I

00:02:54,490 --> 00:03:00,340
gave at the last Congress so there's a

00:02:58,270 --> 00:03:02,470
link in the slides and on the next slide

00:03:00,340 --> 00:03:05,290
here I'll have a link again there's a

00:03:02,470 --> 00:03:07,810
PDF in a github repo with the link stop

00:03:05,290 --> 00:03:10,300
with links to a bunch of the different

00:03:07,810 --> 00:03:11,530
stuff in the presentation because a lot

00:03:10,300 --> 00:03:13,000
of these are gonna have links in these

00:03:11,530 --> 00:03:17,739
slides if you want to find out more you

00:03:13,000 --> 00:03:21,100
can click on the link so risk 5 let's

00:03:17,739 --> 00:03:24,370
talk about that so when you write a C or

00:03:21,100 --> 00:03:26,620
C plus D gets compiled into instructions

00:03:24,370 --> 00:03:28,870
for the microprocessor or the CPU to

00:03:26,620 --> 00:03:30,820
execute but how does the compiler know

00:03:28,870 --> 00:03:32,980
when instructions the CPU understands

00:03:30,820 --> 00:03:36,970
this is defined by the instruction set

00:03:32,980 --> 00:03:39,220
architecture or the ISA so an ISA is a

00:03:36,970 --> 00:03:42,130
standard it's a set of rules that define

00:03:39,220 --> 00:03:44,739
the tasks that the processor can run so

00:03:42,130 --> 00:03:48,370
you've probably heard of x86 such as

00:03:44,739 --> 00:03:51,310
Intel or AMD or arm so if probably your

00:03:48,370 --> 00:03:54,190
laptop or your desktop or most servers

00:03:51,310 --> 00:03:57,070
or x86 base so they have an Intel or AMD

00:03:54,190 --> 00:04:00,010
processor they're using the x86

00:03:57,070 --> 00:04:01,660
instruction set or your smart phone

00:04:00,010 --> 00:04:03,190
definitely has an arm in it so that's

00:04:01,660 --> 00:04:05,440
the processor that's implementing the

00:04:03,190 --> 00:04:07,150
arm instruction set however both of

00:04:05,440 --> 00:04:09,010
these are proprietary and need

00:04:07,150 --> 00:04:12,670
commercial licensing if you want to be

00:04:09,010 --> 00:04:15,459
able to use them in the case of x86 only

00:04:12,670 --> 00:04:17,890
a few companies are even able to use it

00:04:15,459 --> 00:04:21,940
in the case of arm you have to license

00:04:17,890 --> 00:04:23,979
it from arm so about ten years ago some

00:04:21,940 --> 00:04:25,990
researchers that were doing computer

00:04:23,979 --> 00:04:30,340
architecture research at the University

00:04:25,990 --> 00:04:31,900
of California Berkeley wanted to have an

00:04:30,340 --> 00:04:33,760
ISA that they could use for doing their

00:04:31,900 --> 00:04:35,979
research and they didn't want to bother

00:04:33,760 --> 00:04:38,380
with having to license the commercial is

00:04:35,979 --> 00:04:41,350
a like the arm instruction set

00:04:38,380 --> 00:04:43,780
so they created risk 5 so it's called

00:04:41,350 --> 00:04:45,810
risk 5 because it's the fifth RISC

00:04:43,780 --> 00:04:48,039
instruction set to come out of Berkeley

00:04:45,810 --> 00:04:50,770
Berkeley was involved in creating the

00:04:48,039 --> 00:04:52,479
original RISC instruction set back in

00:04:50,770 --> 00:04:54,969
the early 80s

00:04:52,479 --> 00:04:58,779
so verse five is a new instruction set

00:04:54,969 --> 00:05:02,050
that is free and open for anyone to

00:04:58,779 --> 00:05:04,539
build the Ito's and I believe it's

00:05:02,050 --> 00:05:06,800
licensed under the creative commons

00:05:04,539 --> 00:05:09,240
share-alike license

00:05:06,800 --> 00:05:11,240
if you want to find out more about the

00:05:09,240 --> 00:05:13,830
instructions that is a pretty brief

00:05:11,240 --> 00:05:16,110
presentation here but two great talks

00:05:13,830 --> 00:05:18,750
that I recommend one is instruction sets

00:05:16,110 --> 00:05:20,520
want to be free which is from David

00:05:18,750 --> 00:05:22,290
Patterson who's one of the people that

00:05:20,520 --> 00:05:24,150
actually CRO created risk back in the

00:05:22,290 --> 00:05:27,060
early 80s and he's been involved with

00:05:24,150 --> 00:05:29,520
frisk live and then cursed asana vich

00:05:27,060 --> 00:05:33,410
who's the professor that kind of

00:05:29,520 --> 00:05:36,000
spearheaded the respite project in every

00:05:33,410 --> 00:05:38,460
maybe once or twice a year he gives the

00:05:36,000 --> 00:05:40,050
State of the Union of risk five so if he

00:05:38,460 --> 00:05:42,150
just punch that into YouTube you'll find

00:05:40,050 --> 00:05:46,050
the latest one or you can you can hope

00:05:42,150 --> 00:05:48,990
the link there so this is a curse talk

00:05:46,050 --> 00:05:51,750
that he gives kind of once or twice a

00:05:48,990 --> 00:05:53,310
year called the State of the Union and

00:05:51,750 --> 00:05:56,280
I'm just gonna pull some slides in from

00:05:53,310 --> 00:05:58,140
that to give you a good idea so one of

00:05:56,280 --> 00:06:00,900
the ideas behind race 5 is that it's a

00:05:58,140 --> 00:06:03,030
simple instruction set that they took

00:06:00,900 --> 00:06:04,860
all the knowledge they had over several

00:06:03,030 --> 00:06:07,530
decades of designing versus instruction

00:06:04,860 --> 00:06:09,270
sets to try to make the best one the

00:06:07,530 --> 00:06:11,520
idea to behind risk 5 is that it's

00:06:09,270 --> 00:06:14,100
modular so the idea is it's going to

00:06:11,520 --> 00:06:16,440
scale from tiny little 32-bit

00:06:14,100 --> 00:06:18,990
microcontrollers all the way up to you

00:06:16,440 --> 00:06:21,690
supercomputers so something that's

00:06:18,990 --> 00:06:23,760
modular and extensible so there is a

00:06:21,690 --> 00:06:25,230
small base and then there's extensions

00:06:23,760 --> 00:06:27,330
that allow you to add in additional

00:06:25,230 --> 00:06:29,580
functionality the only thing that's

00:06:27,330 --> 00:06:31,890
important to is the base which is frozen

00:06:29,580 --> 00:06:33,810
now means that if you compile a program

00:06:31,890 --> 00:06:36,060
for the RISC 5 based instruction set

00:06:33,810 --> 00:06:39,240
it'll continue to work even if you have

00:06:36,060 --> 00:06:43,110
some new fancy processor like 20 years

00:06:39,240 --> 00:06:45,060
from now just to give you a sense of the

00:06:43,110 --> 00:06:47,160
timeline here it started about 10 years

00:06:45,060 --> 00:06:50,880
ago and then they've been doing some

00:06:47,160 --> 00:06:53,280
some tape outs of research chips along

00:06:50,880 --> 00:06:54,690
the way and then at some point company's

00:06:53,280 --> 00:06:57,900
going to involve like Western Digital

00:06:54,690 --> 00:06:59,550
and NVIDIA and the other really

00:06:57,900 --> 00:07:02,340
important thing I think when it comes to

00:06:59,550 --> 00:07:04,410
risk 5 is not the first open instruction

00:07:02,340 --> 00:07:07,350
set but it's really gained critical mass

00:07:04,410 --> 00:07:09,510
so their support in Linux and GCC in

00:07:07,350 --> 00:07:12,060
claying a bunch of different real-time

00:07:09,510 --> 00:07:13,500
operating systems so there is the

00:07:12,060 --> 00:07:15,120
support there when it comes to the

00:07:13,500 --> 00:07:17,640
software side of things there's also

00:07:15,120 --> 00:07:20,460
several open source implementations of

00:07:17,640 --> 00:07:22,650
it so the is itself is just

00:07:20,460 --> 00:07:24,030
of what instructions can be run on the

00:07:22,650 --> 00:07:25,920
processor and then there's an

00:07:24,030 --> 00:07:27,180
implementation of that instruction set

00:07:25,920 --> 00:07:28,850
so there's several open source

00:07:27,180 --> 00:07:32,100
implementations that are out there

00:07:28,850 --> 00:07:34,950
rocket and boom or from Berkeley risky

00:07:32,100 --> 00:07:36,510
and Ariane or from ETH Zurich and then

00:07:34,950 --> 00:07:39,120
there's also companies like Western

00:07:36,510 --> 00:07:40,500
Digital has one called swerve that

00:07:39,120 --> 00:07:42,720
they've contributed as well so both

00:07:40,500 --> 00:07:45,990
universities and companies are creating

00:07:42,720 --> 00:07:48,570
open implementations though I should

00:07:45,990 --> 00:07:50,700
note that while the instruction set is

00:07:48,570 --> 00:07:52,470
open there can be both open source

00:07:50,700 --> 00:07:54,510
implementations and proprietary

00:07:52,470 --> 00:07:56,160
implementations so just because it says

00:07:54,510 --> 00:07:57,840
risk 5 doesn't mean that the design of

00:07:56,160 --> 00:08:00,420
the processor is open it just means that

00:07:57,840 --> 00:08:04,110
it's implementing the open instruction

00:08:00,420 --> 00:08:06,570
set so to give you a sense here of what

00:08:04,110 --> 00:08:09,120
is the base is a four risk five so that

00:08:06,570 --> 00:08:12,390
the base is a is just 32 bit fixed

00:08:09,120 --> 00:08:14,580
within integer so that's all you need to

00:08:12,390 --> 00:08:18,720
have to be considered risk 5 is just

00:08:14,580 --> 00:08:23,190
this base is a and to give you a sense

00:08:18,720 --> 00:08:26,220
here this is all the instructions for

00:08:23,190 --> 00:08:29,670
the base is a which is referred to as RV

00:08:26,220 --> 00:08:35,970
risk 532 is 32 bit and then I for

00:08:29,670 --> 00:08:38,190
integer so if you have used arm or x86

00:08:35,970 --> 00:08:39,990
especially you'll notice there's a lot

00:08:38,190 --> 00:08:42,300
more instructions in this so this is a

00:08:39,990 --> 00:08:44,610
pretty small subset here which is the

00:08:42,300 --> 00:08:46,710
idea here is that risk 5 is simple and

00:08:44,610 --> 00:08:49,740
the base is very small and then it can

00:08:46,710 --> 00:08:52,860
be extended as needed for different use

00:08:49,740 --> 00:08:55,290
cases and from David Patterson's talk he

00:08:52,860 --> 00:08:56,850
has this what's called a green card here

00:08:55,290 --> 00:08:58,710
which was back in the day when people do

00:08:56,850 --> 00:09:00,570
machine coding they would have the list

00:08:58,710 --> 00:09:03,570
of all many different instructions for

00:09:00,570 --> 00:09:06,300
the instruction set and the idea here is

00:09:03,570 --> 00:09:08,730
that you can represent the whole breadth

00:09:06,300 --> 00:09:11,180
of risk 5 with just this little card

00:09:08,730 --> 00:09:16,620
here so this covers everything from

00:09:11,180 --> 00:09:19,260
32-bit 64-bit even 128-bit now we we

00:09:16,620 --> 00:09:21,720
don't have 120 bits of memory yet but

00:09:19,260 --> 00:09:25,470
the idea is in the future it might be

00:09:21,720 --> 00:09:27,360
useful especially for security the 128

00:09:25,470 --> 00:09:28,350
bit has some benefits there's there's

00:09:27,360 --> 00:09:31,020
already some people that are

00:09:28,350 --> 00:09:32,550
experimenting with it when you look at

00:09:31,020 --> 00:09:34,140
risk 5 architectures you see all these

00:09:32,550 --> 00:09:38,640
letters and again

00:09:34,140 --> 00:09:41,760
confusing M is for multiply a is for

00:09:38,640 --> 00:09:44,670
atomic f is for float D is for double

00:09:41,760 --> 00:09:46,650
float and then C is for compressed so

00:09:44,670 --> 00:09:49,890
you'll see a mix of those depending on

00:09:46,650 --> 00:09:51,330
what features the it implements and you

00:09:49,890 --> 00:09:53,850
can always go back to these talks if you

00:09:51,330 --> 00:09:56,580
want to learn more about the respond is

00:09:53,850 --> 00:09:59,970
a so let's talk about who's using risk

00:09:56,580 --> 00:10:01,380
five so as I said before the idea here

00:09:59,970 --> 00:10:03,600
was have an instruction set that would

00:10:01,380 --> 00:10:05,670
be extensible from everything from a

00:10:03,600 --> 00:10:07,740
small little microcontroller all the way

00:10:05,670 --> 00:10:09,000
up to a supercomputer and all these

00:10:07,740 --> 00:10:12,120
things are being done right now with

00:10:09,000 --> 00:10:15,780
risk 5 well it was created at Berkeley

00:10:12,120 --> 00:10:18,150
um the risk 5 standard is now maintained

00:10:15,780 --> 00:10:21,570
by the risk 5 foundation at risk 5 .

00:10:18,150 --> 00:10:24,060
risk v org there's over 400 members

00:10:21,570 --> 00:10:26,850
including companies and universities and

00:10:24,060 --> 00:10:29,100
more and one of the things has really

00:10:26,850 --> 00:10:31,320
helped me is they have these used to be

00:10:29,100 --> 00:10:34,620
called risk rag workshop now there is 5

00:10:31,320 --> 00:10:36,120
summit once or twice a year and all the

00:10:34,620 --> 00:10:37,350
talks are up on youtube so if you want

00:10:36,120 --> 00:10:40,260
to find out more it's a great place to

00:10:37,350 --> 00:10:42,660
look in companies like Nvidia and Westar

00:10:40,260 --> 00:10:44,400
digital are looking to ship millions of

00:10:42,660 --> 00:10:47,220
devices so for example Western Digital

00:10:44,400 --> 00:10:48,570
decided that they were gonna take all

00:10:47,220 --> 00:10:50,330
the little controllers that are in their

00:10:48,570 --> 00:10:53,360
disk drives and move them over from

00:10:50,330 --> 00:10:56,760
architectures like arm over to risk 5

00:10:53,360 --> 00:10:59,010
Nvidia also is replacing a controller

00:10:56,760 --> 00:11:00,810
and they're in their GPU without respite

00:10:59,010 --> 00:11:02,520
based controller now the thing that does

00:11:00,810 --> 00:11:04,350
the heavy lifting but just something

00:11:02,520 --> 00:11:06,960
that coordinates and manages the

00:11:04,350 --> 00:11:09,150
hardware and part of this is to avoid

00:11:06,960 --> 00:11:11,760
arm licensing fees so if you're making a

00:11:09,150 --> 00:11:14,520
billion devices that can add up but more

00:11:11,760 --> 00:11:17,370
importantly is it gives them the freedom

00:11:14,520 --> 00:11:21,630
to leverage open source implementations

00:11:17,370 --> 00:11:24,630
like ones from Berkeley in ETH Zurich

00:11:21,630 --> 00:11:27,450
and also gives an ability to implement

00:11:24,630 --> 00:11:30,840
their own microarchitecture the best way

00:11:27,450 --> 00:11:33,810
for their own products so with arm only

00:11:30,840 --> 00:11:36,360
a few companies like Qualcomm and Apple

00:11:33,810 --> 00:11:40,020
have architecture licenses everyone else

00:11:36,360 --> 00:11:42,270
is just licensing specific cores so with

00:11:40,020 --> 00:11:44,610
respond you can you're you have the

00:11:42,270 --> 00:11:47,600
Liberty to do your own micro

00:11:44,610 --> 00:11:49,279
microarchitecture implementation

00:11:47,600 --> 00:11:52,670
and as I mentioned the risk five summit

00:11:49,279 --> 00:11:54,649
it happens I think once a year on

00:11:52,670 --> 00:11:56,180
there's other events as well so if you

00:11:54,649 --> 00:11:58,100
check out there is five a YouTube

00:11:56,180 --> 00:12:00,589
channel you can find a ton there's one

00:11:58,100 --> 00:12:04,190
always I able to stay up with what's

00:12:00,589 --> 00:12:05,810
happening in the risk 5 community and

00:12:04,190 --> 00:12:08,899
one of the other things I think is

00:12:05,810 --> 00:12:10,269
interesting with risk 5 is it's

00:12:08,899 --> 00:12:14,569
something that we're seeing growth

00:12:10,269 --> 00:12:18,889
globally in so one of the reasons I

00:12:14,569 --> 00:12:21,319
think is countries and nations have an

00:12:18,889 --> 00:12:25,519
incentive I think to have technology

00:12:21,319 --> 00:12:27,949
that has developed internally so nations

00:12:25,519 --> 00:12:30,860
such as India have created initiatives

00:12:27,949 --> 00:12:34,180
to make their own processor designs

00:12:30,860 --> 00:12:37,100
based on risk 5 and this way they can

00:12:34,180 --> 00:12:38,690
mitigate the risk of depending on

00:12:37,100 --> 00:12:41,839
technology that's coming from another

00:12:38,690 --> 00:12:43,880
country like the US and something that

00:12:41,839 --> 00:12:45,800
happen last year was the u.s. banned

00:12:43,880 --> 00:12:48,050
companies from doing business with ball

00:12:45,800 --> 00:12:50,509
way which is a large company a very

00:12:48,050 --> 00:12:52,519
large company in China and for a while

00:12:50,509 --> 00:12:55,610
it was uncertain if I would be able to

00:12:52,519 --> 00:12:57,680
continue to use armor not currently they

00:12:55,610 --> 00:12:58,339
are still able to use arm license our

00:12:57,680 --> 00:13:00,110
import

00:12:58,339 --> 00:13:02,269
you have to imagine that this probably

00:13:00,110 --> 00:13:04,730
gave a good incentive for companies in

00:13:02,269 --> 00:13:07,279
China to look at alternatives and many

00:13:04,730 --> 00:13:08,120
of them are now implementing around his

00:13:07,279 --> 00:13:11,269
five designs

00:13:08,120 --> 00:13:14,470
I should mention Alibaba especially as

00:13:11,269 --> 00:13:16,490
designing a server class verse five chip

00:13:14,470 --> 00:13:19,430
so if you want to learn how to learn

00:13:16,490 --> 00:13:21,410
more about risk 5 Bruta column in a

00:13:19,430 --> 00:13:22,750
recent hack space magazine you can

00:13:21,410 --> 00:13:27,199
download that for free off the internet

00:13:22,750 --> 00:13:29,839
at that URL there and the first time

00:13:27,199 --> 00:13:32,720
that I learned of risk 5 was several

00:13:29,839 --> 00:13:34,639
years ago I came across this project

00:13:32,720 --> 00:13:37,519
called on chip open V so this was a

00:13:34,639 --> 00:13:39,709
completely open source design for a

00:13:37,519 --> 00:13:43,160
32-bit microcontroller out of a

00:13:39,709 --> 00:13:45,529
university in Columbia in the effort was

00:13:43,160 --> 00:13:47,269
called on chip so this was really cool

00:13:45,529 --> 00:13:49,220
they designed the microcontroller

00:13:47,269 --> 00:13:52,449
including analog parts and it was all

00:13:49,220 --> 00:13:55,459
open-source implementation of the RISC 5

00:13:52,449 --> 00:13:57,620
instruction set so that that's really

00:13:55,459 --> 00:14:00,529
cool but you know I'm also interested in

00:13:57,620 --> 00:14:01,410
Linux so what is out there that will

00:14:00,529 --> 00:14:04,139
allow us to run Linux

00:14:01,410 --> 00:14:06,019
I was 5 so I was really excited when I

00:14:04,139 --> 00:14:08,279
saw a low risk for him a few years ago

00:14:06,019 --> 00:14:10,319
it was created by a couple people that

00:14:08,279 --> 00:14:12,779
were involved in starting raspberry pie

00:14:10,319 --> 00:14:15,420
and the aim here was to produce a SOC or

00:14:12,779 --> 00:14:17,480
system-on-chip that's capable of doing

00:14:15,420 --> 00:14:20,069
something like running a smartphone or

00:14:17,480 --> 00:14:25,290
making a basic single board computer

00:14:20,069 --> 00:14:27,470
around essentially a a low cost in

00:14:25,290 --> 00:14:30,420
volume associated we could run Linux on

00:14:27,470 --> 00:14:31,860
they're still working on that but in the

00:14:30,420 --> 00:14:34,439
meantime they've also started doing some

00:14:31,860 --> 00:14:38,399
security work with risk 5 and Google

00:14:34,439 --> 00:14:39,839
called open Titan Alex Bradbury who is

00:14:38,399 --> 00:14:41,129
one of the people that was involved in a

00:14:39,839 --> 00:14:43,379
lot of the software stuff on the

00:14:41,129 --> 00:14:45,209
Raspberry Pi when it first started and

00:14:43,379 --> 00:14:47,339
it is one of the founders at low risk he

00:14:45,209 --> 00:14:49,100
gave an interesting talk about the

00:14:47,339 --> 00:14:53,790
feature of operating systems on response

00:14:49,100 --> 00:14:55,709
that is worth checking out there in

00:14:53,790 --> 00:14:57,720
addition while they haven't created a

00:14:55,709 --> 00:15:00,949
silicon chip yet they're still

00:14:57,720 --> 00:15:03,240
developing this idea of the low risk SOC

00:15:00,949 --> 00:15:05,040
and there's information on this page

00:15:03,240 --> 00:15:06,959
here that you can go to in the link

00:15:05,040 --> 00:15:09,899
about how you can take their current

00:15:06,959 --> 00:15:12,750
release and run it on a fpga development

00:15:09,899 --> 00:15:17,100
board and get a full linux graphical

00:15:12,750 --> 00:15:18,089
desktop environment so one of the as I'm

00:15:17,100 --> 00:15:19,829
part of the open source hardware

00:15:18,089 --> 00:15:22,680
Association

00:15:19,829 --> 00:15:26,040
which is mostly typically focused on

00:15:22,680 --> 00:15:27,480
like board-level projects but kind of

00:15:26,040 --> 00:15:29,850
the complement there when it comes to

00:15:27,480 --> 00:15:33,000
chip design is Fossey which is the free

00:15:29,850 --> 00:15:35,370
and open source silicon foundation and

00:15:33,000 --> 00:15:36,569
the idea here is they kind of bring

00:15:35,370 --> 00:15:39,089
together a lot of different

00:15:36,569 --> 00:15:41,670
organizations and people working in risk

00:15:39,089 --> 00:15:42,959
5 and open-source chip design and they

00:15:41,670 --> 00:15:45,300
have several conferences throughout the

00:15:42,959 --> 00:15:48,389
year such as or conf and in latch up

00:15:45,300 --> 00:15:50,970
latch up is in the US and or campus in

00:15:48,389 --> 00:15:52,709
Europe and then they use sometimes they

00:15:50,970 --> 00:15:57,360
do these other one-off conferences as

00:15:52,709 --> 00:15:58,500
well and if you click on the link there

00:15:57,360 --> 00:16:00,329
it'll take you to the fossee

00:15:58,500 --> 00:16:02,850
foundation's website or if you pull out

00:16:00,329 --> 00:16:04,079
fossee and youtube you can see all the

00:16:02,850 --> 00:16:06,540
different talks that have happened at

00:16:04,079 --> 00:16:08,730
their conferences and one of the one of

00:16:06,540 --> 00:16:11,880
the initiatives out of Fossey is a

00:16:08,730 --> 00:16:14,579
website called Libre cords so the idea

00:16:11,880 --> 00:16:14,880
here you know with with source code many

00:16:14,579 --> 00:16:18,090
people

00:16:14,880 --> 00:16:19,560
we'll share their projects github but

00:16:18,090 --> 00:16:22,800
there hasn't been a great place to go

00:16:19,560 --> 00:16:24,120
and find open-source chip design on the

00:16:22,800 --> 00:16:26,250
internet especially things that have

00:16:24,120 --> 00:16:28,950
been proven that they work and you can

00:16:26,250 --> 00:16:29,970
reuse in your project so Libre quarries

00:16:28,950 --> 00:16:33,660
of something that's trying to solve that

00:16:29,970 --> 00:16:35,430
problem it's still a pretty early effort

00:16:33,660 --> 00:16:36,660
but I think in the future hopefully

00:16:35,430 --> 00:16:38,040
that'll be a place that you can deal if

00:16:36,660 --> 00:16:41,520
you're designing your own chip and you

00:16:38,040 --> 00:16:43,050
need a USB controller or you need a spi

00:16:41,520 --> 00:16:47,250
peripheral you can go there and grab

00:16:43,050 --> 00:16:48,780
that and integrate it into something so

00:16:47,250 --> 00:16:51,270
one of the companies that's really

00:16:48,780 --> 00:16:53,190
heavily involved in risk 5 is called Sai

00:16:51,270 --> 00:16:55,100
5 and it's a startup that was formed by

00:16:53,190 --> 00:16:57,420
some of the researchers out of Berkeley

00:16:55,100 --> 00:16:59,600
and they were one of the first to come

00:16:57,420 --> 00:17:02,550
out with a commercially available

00:16:59,600 --> 00:17:05,430
microcontroller and it's called the EFI

00:17:02,550 --> 00:17:06,900
310 and they have this Arduino form

00:17:05,430 --> 00:17:10,650
factor boards that they came out with a

00:17:06,900 --> 00:17:13,170
few years ago now this is really cool

00:17:10,650 --> 00:17:15,480
but it is still just a microcontroller

00:17:13,170 --> 00:17:18,540
so it has you know a couple kilobytes of

00:17:15,480 --> 00:17:19,890
memory it's not something that we can

00:17:18,540 --> 00:17:21,199
unfortunately it's not something I'm

00:17:19,890 --> 00:17:25,470
really running Linux

00:17:21,199 --> 00:17:26,760
so let's talk about well what possible

00:17:25,470 --> 00:17:30,540
risk five chips are out there that we

00:17:26,760 --> 00:17:35,670
could run Linux on well sci-fi also made

00:17:30,540 --> 00:17:39,300
a Penta core 64-bit RISC 5 system on

00:17:35,670 --> 00:17:43,320
chip called Lee called the F freedom

00:17:39,300 --> 00:17:46,220
unleashed fu 5 for me and they came out

00:17:43,320 --> 00:17:49,200
with a board I think about two years ago

00:17:46,220 --> 00:17:51,810
which is really cool it it has you know

00:17:49,200 --> 00:17:54,420
for 64-bit erisa 5 cores

00:17:51,810 --> 00:17:56,430
it's a really nice system the only

00:17:54,420 --> 00:17:59,070
downside here is this was really just

00:17:56,430 --> 00:18:00,960
kind of an evaluation board proof of

00:17:59,070 --> 00:18:03,470
concept they only made I think less than

00:18:00,960 --> 00:18:07,110
a thousand and the board cost $1,000 so

00:18:03,470 --> 00:18:09,210
it is probably the nicest or you can get

00:18:07,110 --> 00:18:11,820
right now if you wanted to run Linux on

00:18:09,210 --> 00:18:15,060
risk 5 however it's not practical for

00:18:11,820 --> 00:18:17,010
most people however I had many people

00:18:15,060 --> 00:18:18,450
any places I've seen it are people that

00:18:17,010 --> 00:18:22,560
are doing things like bringing up

00:18:18,450 --> 00:18:27,779
distros so for example there are people

00:18:22,560 --> 00:18:29,460
working on a fedora port for risk 5

00:18:27,779 --> 00:18:32,309
and there's a good presentation here

00:18:29,460 --> 00:18:34,109
from someone from Red Hat about how

00:18:32,309 --> 00:18:36,869
they're doing that project and they are

00:18:34,109 --> 00:18:39,299
actually leveraging that sci-fi freedom

00:18:36,869 --> 00:18:41,639
unleashed forward along with a graphics

00:18:39,299 --> 00:18:44,999
card and some other hardware to get a

00:18:41,639 --> 00:18:46,710
full Linux desktop running so this is

00:18:44,999 --> 00:18:49,099
not practical for most people it's a

00:18:46,710 --> 00:18:51,389
fairly expensive system but this is what

00:18:49,099 --> 00:18:54,539
some some people are using to bring up

00:18:51,389 --> 00:18:56,969
distress right now for risk 5 so in

00:18:54,539 --> 00:19:00,089
addition to that real hardware solution

00:18:56,969 --> 00:19:02,429
with the expensive sci fi board and then

00:19:00,089 --> 00:19:04,979
some other expensive hardware to get a

00:19:02,429 --> 00:19:09,389
full desktop the other thing that people

00:19:04,979 --> 00:19:11,399
are using is just QEMU so Q is a an

00:19:09,389 --> 00:19:14,539
emulator that allows you to do things

00:19:11,399 --> 00:19:18,179
like emulate armor risk 5 on your x86

00:19:14,539 --> 00:19:21,749
desktop or server so the fedora effort

00:19:18,179 --> 00:19:23,429
from the people at Red Hat they're using

00:19:21,749 --> 00:19:27,210
both a combination of real hardware and

00:19:23,429 --> 00:19:30,119
also qemu and this is kind of gives you

00:19:27,210 --> 00:19:31,950
a flavor here for for how it works it's

00:19:30,119 --> 00:19:35,219
kind of the normal flow that we'd expect

00:19:31,950 --> 00:19:38,399
just with initiative the beginning there

00:19:35,219 --> 00:19:39,809
being something called open spi and

00:19:38,399 --> 00:19:42,210
that's kind of you could think of it as

00:19:39,809 --> 00:19:44,369
the kind of basic initialization of the

00:19:42,210 --> 00:19:46,799
system and that'll go into you boot

00:19:44,369 --> 00:19:49,169
which is a fairly common bootloader that

00:19:46,799 --> 00:19:52,139
you'll see on embedded boards and then

00:19:49,169 --> 00:19:54,839
we jump into Linux and then we do our

00:19:52,139 --> 00:19:57,659
normal an it Ram FS and then we boot up

00:19:54,839 --> 00:20:00,450
into fedora and if you're a Debian fan

00:19:57,659 --> 00:20:03,299
Debian is also doing a port as well so

00:20:00,450 --> 00:20:08,279
both fedora and Debian have working

00:20:03,299 --> 00:20:10,799
ports right now for risk 5 so there's

00:20:08,279 --> 00:20:12,419
the sci-fi bun leash board is $1,000

00:20:10,799 --> 00:20:14,969
it's not something that's generally

00:20:12,419 --> 00:20:16,859
available so it was something that we

00:20:14,969 --> 00:20:18,989
can actually get our hands on so this

00:20:16,859 --> 00:20:22,830
little board here it has a chip on it

00:20:18,989 --> 00:20:25,109
called the Kendrick a 210 so this is

00:20:22,830 --> 00:20:27,839
something that an engineer from Western

00:20:25,109 --> 00:20:29,999
Digital Damian lamal had worked along

00:20:27,839 --> 00:20:31,979
with a couple other people last year to

00:20:29,999 --> 00:20:34,469
try and get it working so the constraint

00:20:31,979 --> 00:20:37,499
here was it only has 8 megabytes of RAM

00:20:34,469 --> 00:20:38,940
so pretty limited environment but right

00:20:37,499 --> 00:20:40,650
now it's the only like thing that's

00:20:38,940 --> 00:20:46,200
journal available for running

00:20:40,650 --> 00:20:49,919
Linux on so it's a dual-core 64-bit RISC

00:20:46,200 --> 00:20:51,870
five core running at 400 megahertz with

00:20:49,919 --> 00:20:54,870
eight megabytes of SRAM which is a lot

00:20:51,870 --> 00:20:57,390
of SRAM for a microcontroller not a lot

00:20:54,870 --> 00:20:59,039
for a Linux system the cool thing is

00:20:57,390 --> 00:21:02,760
this board you can buy the smaller one

00:20:59,039 --> 00:21:04,440
here for only $13 it's made by a company

00:21:02,760 --> 00:21:06,860
called site Pete and you can get it from

00:21:04,440 --> 00:21:10,049
different places including seed studio

00:21:06,860 --> 00:21:12,600
and damián along with a couple of Linux

00:21:10,049 --> 00:21:14,429
kernel hackers they got Linux finally

00:21:12,600 --> 00:21:17,159
running on it and then probably about a

00:21:14,429 --> 00:21:19,799
month ago kind of for a while it was

00:21:17,159 --> 00:21:22,049
like this experimental thing that they

00:21:19,799 --> 00:21:24,120
hadn't really sure yet how to get it

00:21:22,049 --> 00:21:25,350
working and then about a month ago kind

00:21:24,120 --> 00:21:27,059
of all came together and now there is

00:21:25,350 --> 00:21:28,740
really clear instructions about how if

00:21:27,059 --> 00:21:32,039
you get one of these boards you can go

00:21:28,740 --> 00:21:33,659
and load up and put risk 5 I'm sorry you

00:21:32,039 --> 00:21:36,210
can put Linux on it and then you'll

00:21:33,659 --> 00:21:38,640
finally have a system running Linux on

00:21:36,210 --> 00:21:41,220
risk 5 here so here's an example of the

00:21:38,640 --> 00:21:46,100
support that I have and just showing you

00:21:41,220 --> 00:21:49,350
there it's got two 64-bit ARM cores and

00:21:46,100 --> 00:21:52,110
where we can even run a little C compile

00:21:49,350 --> 00:21:54,990
around there to write a small program so

00:21:52,110 --> 00:21:57,779
it's not particularly practical but for

00:21:54,990 --> 00:22:01,350
right now unless you really our options

00:21:57,779 --> 00:22:03,570
are using qvm you you know x86 hardware

00:22:01,350 --> 00:22:06,720
or having that really expensive sci-fi

00:22:03,570 --> 00:22:08,250
board or this smaller board there is

00:22:06,720 --> 00:22:11,840
another option I'll get to very quickly

00:22:08,250 --> 00:22:13,980
which is FPGAs but in terms of actual

00:22:11,840 --> 00:22:16,110
hardships or ecigs

00:22:13,980 --> 00:22:20,159
is another term for that these are our

00:22:16,110 --> 00:22:21,929
options right now and the version called

00:22:20,159 --> 00:22:25,169
the go board beasts I paid max

00:22:21,929 --> 00:22:26,850
go board also has a little Wi-Fi chip in

00:22:25,169 --> 00:22:29,720
it that someone's been trying to get

00:22:26,850 --> 00:22:31,740
working it's connected through serial so

00:22:29,720 --> 00:22:33,750
the goal there is that we'll eventually

00:22:31,740 --> 00:22:36,419
be able to have networking on this small

00:22:33,750 --> 00:22:38,789
system and I think on the in the

00:22:36,419 --> 00:22:40,590
reference image that you can download

00:22:38,789 --> 00:22:42,299
from here I think you still have like

00:22:40,590 --> 00:22:45,360
something like 4 megabytes or 6

00:22:42,299 --> 00:22:47,429
megabytes free so there's some room

00:22:45,360 --> 00:22:49,490
there to do some interesting things I

00:22:47,429 --> 00:22:49,490
think

00:22:50,130 --> 00:22:53,850
though if we're gonna have something

00:22:51,600 --> 00:22:56,210
like a Raspberry Pi or a BeagleBone this

00:22:53,850 --> 00:22:58,470
risk five we really need a a

00:22:56,210 --> 00:23:02,610
system-on-chip that's made in volume

00:22:58,470 --> 00:23:04,920
that has external memory so the things

00:23:02,610 --> 00:23:08,340
that are coming up in 2020 microchip

00:23:04,920 --> 00:23:11,430
from really micro semi has this polar

00:23:08,340 --> 00:23:13,830
fire SOC so this is actually a hard risk

00:23:11,430 --> 00:23:15,990
five processor along with an FPGA so if

00:23:13,830 --> 00:23:17,220
you've heard of the Xilinx Zink this is

00:23:15,990 --> 00:23:20,520
a similar situation where you have a

00:23:17,220 --> 00:23:22,530
hard silicon processor and then you also

00:23:20,520 --> 00:23:25,080
have an FPGA fabric alongside of it

00:23:22,530 --> 00:23:28,470
however because it's an FPGA it's going

00:23:25,080 --> 00:23:31,470
to be I think more expensive and your

00:23:28,470 --> 00:23:34,260
typical sort of us is the mount ship so

00:23:31,470 --> 00:23:36,270
that'll be one option but I think it'll

00:23:34,260 --> 00:23:37,950
be relatively expensive for people are

00:23:36,270 --> 00:23:40,260
used to things like raspberry pies for

00:23:37,950 --> 00:23:43,190
eaglebones one of the other things I'm

00:23:40,260 --> 00:23:46,500
excited about is the open hardware group

00:23:43,190 --> 00:23:48,000
which is a non-profit formed by a couple

00:23:46,500 --> 00:23:50,960
different country companies they're

00:23:48,000 --> 00:23:54,180
creating this board called the

00:23:50,960 --> 00:23:56,070
prettiness chip called the core V SOC

00:23:54,180 --> 00:23:58,560
and it's going to be very similar to an

00:23:56,070 --> 00:24:01,680
NX p iMac so if you've done embedded

00:23:58,560 --> 00:24:04,440
Linux birth before an XP firmly free

00:24:01,680 --> 00:24:07,500
skill is very common with imx6 or I'm

00:24:04,440 --> 00:24:10,290
mx8 and this is essentially that chip

00:24:07,500 --> 00:24:14,100
but with a risk 5 core instead of an arm

00:24:10,290 --> 00:24:17,070
core so they're hoping to tape out which

00:24:14,100 --> 00:24:19,620
means sent to fab the test ship and the

00:24:17,070 --> 00:24:22,190
second half of this year so maybe next

00:24:19,620 --> 00:24:24,450
year we'll see boards come out with this

00:24:22,190 --> 00:24:26,430
processor on it and this is the sort of

00:24:24,450 --> 00:24:28,110
chip that I think is needed for us build

00:24:26,430 --> 00:24:30,180
to do something like you know makeup

00:24:28,110 --> 00:24:33,330
people bone or a Raspberry Pi type board

00:24:30,180 --> 00:24:34,980
with Chris 5 so one of the things I'm

00:24:33,330 --> 00:24:37,470
very interested in is making a board

00:24:34,980 --> 00:24:40,950
that's $100 or less capable of running

00:24:37,470 --> 00:24:43,980
Linux we can't quite do that now because

00:24:40,950 --> 00:24:45,810
we don't have a chip yet but I'm hoping

00:24:43,980 --> 00:24:49,260
to wants a chip like that open hardware

00:24:45,810 --> 00:24:51,480
group core V comes out that we could put

00:24:49,260 --> 00:24:53,460
together an open harbor board with that

00:24:51,480 --> 00:24:54,630
system on chip so if your interest in

00:24:53,460 --> 00:24:57,150
that sort of thing please get in touch

00:24:54,630 --> 00:24:58,470
with me you know I'm thinking of maybe

00:24:57,150 --> 00:25:00,900
setting up a mailing list or something

00:24:58,470 --> 00:25:02,930
like that and see what we can get going

00:25:00,900 --> 00:25:04,280
here however

00:25:02,930 --> 00:25:07,670
we don't necessarily have to just wait

00:25:04,280 --> 00:25:11,660
for Asics chips to come out because we

00:25:07,670 --> 00:25:15,020
can also use something called FPGAs so

00:25:11,660 --> 00:25:18,560
FHA's are a very large topic they stand

00:25:15,020 --> 00:25:21,140
for field programmable gate arrays one

00:25:18,560 --> 00:25:24,080
of great talk from last year was from

00:25:21,140 --> 00:25:25,550
Megan walks of sy5 so you can check this

00:25:24,080 --> 00:25:28,580
out it was from the hackaday super

00:25:25,550 --> 00:25:31,370
conference and it goes into risk 5 and

00:25:28,580 --> 00:25:33,950
also FPGAs and this is a slide from it

00:25:31,370 --> 00:25:37,070
that i think is a good good kind of

00:25:33,950 --> 00:25:38,630
quick explanation of what FPGA is so you

00:25:37,070 --> 00:25:41,270
can think of an FPGA or a field

00:25:38,630 --> 00:25:43,820
programmable gate array as a big sea of

00:25:41,270 --> 00:25:45,260
gates in inside of chips and normally

00:25:43,820 --> 00:25:48,470
inside a chip you have like specific

00:25:45,260 --> 00:25:50,390
functionality specific functions

00:25:48,470 --> 00:25:52,780
dedicated to different parts of the chip

00:25:50,390 --> 00:25:54,980
an FPGA is just a bunch of it's a sea of

00:25:52,780 --> 00:25:58,220
essentially logic gates that we can then

00:25:54,980 --> 00:26:00,950
reprogram to achieve any sort of digital

00:25:58,220 --> 00:26:02,330
logic that we design including even a

00:26:00,950 --> 00:26:05,600
processor so we can have something

00:26:02,330 --> 00:26:07,660
called a soft core which is a processor

00:26:05,600 --> 00:26:10,640
core that we load into the FPGA

00:26:07,660 --> 00:26:13,820
so I mean talking about solutions where

00:26:10,640 --> 00:26:16,280
we design a risk 5 processor and then we

00:26:13,820 --> 00:26:18,410
load it into the FPGA then we can say

00:26:16,280 --> 00:26:22,220
that to be a soft core instead of a hard

00:26:18,410 --> 00:26:24,890
core which is like designed in gates on

00:26:22,220 --> 00:26:29,300
silicon this is basically you can think

00:26:24,890 --> 00:26:33,290
of it as a sea of gates that we can take

00:26:29,300 --> 00:26:36,440
and then through software configure it

00:26:33,290 --> 00:26:39,800
to be whatever sort of hardware that we

00:26:36,440 --> 00:26:42,650
want it to be now traditionally with

00:26:39,800 --> 00:26:46,460
FPGAs you have to download these really

00:26:42,650 --> 00:26:49,250
giant proprietary iges like the one from

00:26:46,460 --> 00:26:51,050
Xilinx is like 40 gigabytes for even the

00:26:49,250 --> 00:26:53,150
smallest installation and it's

00:26:51,050 --> 00:26:54,650
proprietary software so in the last

00:26:53,150 --> 00:26:56,960
couple years it was really exciting to

00:26:54,650 --> 00:26:59,930
see open source tool chains to come to

00:26:56,960 --> 00:27:02,960
some of these FPGAs and in the fpga

00:26:59,930 --> 00:27:04,760
world kind of something similar to when

00:27:02,960 --> 00:27:09,410
you compile a program is instead of

00:27:04,760 --> 00:27:11,630
compiling your source code you then do

00:27:09,410 --> 00:27:12,740
something called synthesis so you have

00:27:11,630 --> 00:27:14,300
something called the hardware

00:27:12,740 --> 00:27:16,669
description language which is basically

00:27:14,300 --> 00:27:19,279
a text description of what you want the

00:27:16,669 --> 00:27:21,529
were to do and examples of this is Vera

00:27:19,279 --> 00:27:24,259
law or VHDL or the languages that you

00:27:21,529 --> 00:27:25,519
use to define the hardware and then you

00:27:24,259 --> 00:27:29,269
run it through a synthesis project

00:27:25,519 --> 00:27:32,090
process that then produces a kind of a

00:27:29,269 --> 00:27:35,480
gate level design of how that logic is

00:27:32,090 --> 00:27:37,730
implemented and one of the first tools

00:27:35,480 --> 00:27:40,369
that was produced was from a person

00:27:37,730 --> 00:27:43,489
named Claire Wolff created a tool called

00:27:40,369 --> 00:27:45,679
OSIS that allows us to do synthesis with

00:27:43,489 --> 00:27:48,019
open source tools and then there's

00:27:45,679 --> 00:27:49,879
another set of tools for placing around

00:27:48,019 --> 00:27:53,210
so using all these things together we

00:27:49,879 --> 00:27:54,889
can go from our our text description of

00:27:53,210 --> 00:27:56,840
the hardware our vera log all the way to

00:27:54,889 --> 00:27:58,609
the bit stream which is the actual like

00:27:56,840 --> 00:28:00,799
ones and zeros they get loaded onto that

00:27:58,609 --> 00:28:02,450
PG all with open source tools so this

00:28:00,799 --> 00:28:04,759
was kind of a big revelation when this

00:28:02,450 --> 00:28:06,739
came out it was for a Braille or small

00:28:04,759 --> 00:28:09,590
FPGA from a company called lattice

00:28:06,739 --> 00:28:11,299
called the ice 40 so there was a lot of

00:28:09,590 --> 00:28:13,489
nifty things you could do with this but

00:28:11,299 --> 00:28:15,080
it's not quite big enough to have a soft

00:28:13,489 --> 00:28:17,840
core that's capable of running Linux

00:28:15,080 --> 00:28:20,149
however one of the bigger loudest parts

00:28:17,840 --> 00:28:21,769
called the ECB 5 later on there was an

00:28:20,149 --> 00:28:24,980
open source project called project

00:28:21,769 --> 00:28:26,989
trellis that came along and allowed you

00:28:24,980 --> 00:28:29,419
to use an open source flow with this

00:28:26,989 --> 00:28:30,769
part as well and I'm going to be talking

00:28:29,419 --> 00:28:34,399
about a project in a little bit where we

00:28:30,769 --> 00:28:36,470
used that however the biggest the

00:28:34,399 --> 00:28:37,970
biggest FPGA is out there and the ones

00:28:36,470 --> 00:28:41,239
that are most common in industry are

00:28:37,970 --> 00:28:43,159
Xilinx and there is even an effort now

00:28:41,239 --> 00:28:45,350
that's close to being done called

00:28:43,159 --> 00:28:47,419
Project X right that's going to allow

00:28:45,350 --> 00:28:50,299
you to have an open source flow for

00:28:47,419 --> 00:28:51,830
these larger Xilinx parts I think things

00:28:50,299 --> 00:28:54,529
will get really interesting once we have

00:28:51,830 --> 00:28:59,179
these open source tools for some of

00:28:54,529 --> 00:29:01,129
these larger tilings parts if you want

00:28:59,179 --> 00:29:04,369
to learn more about FPGAs I talk more

00:29:01,129 --> 00:29:06,289
about kind of the basis of LPGA's and

00:29:04,369 --> 00:29:07,759
these open source tool chains in this

00:29:06,289 --> 00:29:10,659
hack space column that I wrote recently

00:29:07,759 --> 00:29:12,919
you can download it for free at that URL

00:29:10,659 --> 00:29:15,409
and then specifically I want to talk

00:29:12,919 --> 00:29:17,840
about the experience that I had with

00:29:15,409 --> 00:29:21,139
myself and a couple other people at this

00:29:17,840 --> 00:29:22,700
conference at the end of last year so if

00:29:21,139 --> 00:29:24,590
you've heard of the website called

00:29:22,700 --> 00:29:26,450
hackaday they post a lot a lot of cool

00:29:24,590 --> 00:29:29,960
hardware projects that people around the

00:29:26,450 --> 00:29:30,890
world have made every day and then every

00:29:29,960 --> 00:29:32,990
year in

00:29:30,890 --> 00:29:35,960
remember they have a conference in Los

00:29:32,990 --> 00:29:38,090
Angeles where people get together in

00:29:35,960 --> 00:29:40,880
detox and workshops and they usually

00:29:38,090 --> 00:29:43,220
have a cool hardware badge so this bount

00:29:40,880 --> 00:29:46,610
the badge this year had he had that ECB

00:29:43,220 --> 00:29:50,140
5 FPGA in it which you know I mentioned

00:29:46,610 --> 00:29:52,580
the sea of gates before so this one has

00:29:50,140 --> 00:29:54,980
45,000 logic elements that you can

00:29:52,580 --> 00:29:56,990
program to implement your design so just

00:29:54,980 --> 00:29:58,700
to give you a sense of how many gates

00:29:56,990 --> 00:30:01,670
are in there and the FPGA that we can

00:29:58,700 --> 00:30:04,100
play with this one has about 45,000 I

00:30:01,670 --> 00:30:06,920
mean it kind of has this game board form

00:30:04,100 --> 00:30:08,300
factors the idea here was it came what

00:30:06,920 --> 00:30:09,770
it came with was some different games

00:30:08,300 --> 00:30:11,090
you could play and then it had a little

00:30:09,770 --> 00:30:13,520
graphics engine that you could program

00:30:11,090 --> 00:30:15,140
and see to display your name or do

00:30:13,520 --> 00:30:16,940
little animations and graphics and

00:30:15,140 --> 00:30:18,740
things like that it was super fun and

00:30:16,940 --> 00:30:20,960
there was several different workshops I

00:30:18,740 --> 00:30:23,260
taught you how to do things in fare log

00:30:20,960 --> 00:30:26,210
and how to do graphics programming and C

00:30:23,260 --> 00:30:28,160
but a group of us were like that that

00:30:26,210 --> 00:30:29,630
was night that's neat but what we really

00:30:28,160 --> 00:30:31,760
want is wandering Linux on the batch

00:30:29,630 --> 00:30:34,640
right because why wouldn't you want to

00:30:31,760 --> 00:30:36,680
put Linux on anything that you could so

00:30:34,640 --> 00:30:40,310
myself and a couple of people

00:30:36,680 --> 00:30:42,740
Michael Welling Tim Mansell Sean cross

00:30:40,310 --> 00:30:44,750
and Jacob we got together and hacked on

00:30:42,740 --> 00:30:46,130
it for a couple days and then we were

00:30:44,750 --> 00:30:50,420
able to get Linux running on the batch

00:30:46,130 --> 00:30:52,780
and the first attempt was to use the

00:30:50,420 --> 00:30:55,070
built-in RAM which was only 16 megabytes

00:30:52,780 --> 00:30:57,050
and we weren't successful with that but

00:30:55,070 --> 00:30:59,090
thankfully especially you know it's a

00:30:57,050 --> 00:31:01,610
hardware hacking conference so Jacob

00:30:59,090 --> 00:31:03,110
before the conference saw the design of

00:31:01,610 --> 00:31:05,390
the badge and was like hey I'll make an

00:31:03,110 --> 00:31:07,610
add-in board that has 32 megabytes of

00:31:05,390 --> 00:31:11,120
DRAM and that turned out to be very

00:31:07,610 --> 00:31:14,690
critical because we needed the SDRAM to

00:31:11,120 --> 00:31:16,280
both run Linux so he we were like oh it

00:31:14,690 --> 00:31:18,230
would work if we only had DRM and he's

00:31:16,280 --> 00:31:20,810
like well I made this board maybe this

00:31:18,230 --> 00:31:22,910
will work in real life ooh perfect you

00:31:20,810 --> 00:31:26,600
can see on the back here of the badge so

00:31:22,910 --> 00:31:29,210
this is what the front looks like but

00:31:26,600 --> 00:31:31,040
then the back had this connector an idea

00:31:29,210 --> 00:31:33,290
here was you'd have cartridges kind of

00:31:31,040 --> 00:31:37,790
like a gameboy had so this cartridge

00:31:33,290 --> 00:31:40,910
adds 32 megabytes of SDRAM and what

00:31:37,790 --> 00:31:43,700
we're going to do with this FPGA on the

00:31:40,910 --> 00:31:45,820
badge is Logan a soft risk five core

00:31:43,700 --> 00:31:48,280
that currently

00:31:45,820 --> 00:31:50,020
and I mentioned that see of gates and I

00:31:48,280 --> 00:31:51,790
thought this was really cool a great

00:31:50,020 --> 00:31:53,350
person on Twitter this always I'm

00:31:51,790 --> 00:31:57,910
tweeting about open-source tools and

00:31:53,350 --> 00:31:59,710
FPGAs Eco TC has a cool image here of

00:31:57,910 --> 00:32:03,070
what does it look like when we take that

00:31:59,710 --> 00:32:06,430
C of gates and configure it to be a soft

00:32:03,070 --> 00:32:07,870
core a soft whisk live core and this is

00:32:06,430 --> 00:32:09,640
kind of a macro view if you imagine

00:32:07,870 --> 00:32:12,130
zooming out and seeing all this

00:32:09,640 --> 00:32:13,900
thousands of gates wired up just to give

00:32:12,130 --> 00:32:17,380
you an idea of what does it look like at

00:32:13,900 --> 00:32:20,440
a macro level but specifically how did

00:32:17,380 --> 00:32:22,060
we create this a software is five core

00:32:20,440 --> 00:32:23,700
that got loaded into the hackaday badge

00:32:22,060 --> 00:32:27,190
so we paired Linux on it

00:32:23,700 --> 00:32:29,860
well we actually used Python to do that

00:32:27,190 --> 00:32:31,330
so Tim Ansel who goes by me throw he was

00:32:29,860 --> 00:32:34,000
one of the people there at the hackaday

00:32:31,330 --> 00:32:35,440
super conference and when we were

00:32:34,000 --> 00:32:40,270
talking about Oh it'd be called the run

00:32:35,440 --> 00:32:44,050
Linux he along with Sean suggested using

00:32:40,270 --> 00:32:46,540
this framework that uses Python and Tim

00:32:44,050 --> 00:32:49,020
has a longer talk where he goes into why

00:32:46,540 --> 00:32:53,140
python is great for creating hardware

00:32:49,020 --> 00:32:54,700
and his justification is that python is

00:32:53,140 --> 00:32:57,790
a powerful language and a productive

00:32:54,700 --> 00:33:00,220
language I I used Python alone and I

00:32:57,790 --> 00:33:02,160
would agree with that and we can

00:33:00,220 --> 00:33:04,270
actually use that to generate the

00:33:02,160 --> 00:33:05,890
hardware description language like

00:33:04,270 --> 00:33:08,770
Verilog that you would normally use in

00:33:05,890 --> 00:33:10,210
chip design specifically we use this

00:33:08,770 --> 00:33:12,520
framework called me Jen

00:33:10,210 --> 00:33:15,490
so me Jen is a Python framework that

00:33:12,520 --> 00:33:17,350
allows us to easily generate a bunch of

00:33:15,490 --> 00:33:19,180
Thera logs so instead of having to write

00:33:17,350 --> 00:33:21,280
in this very log language means that

00:33:19,180 --> 00:33:23,110
just used Python and that produces the

00:33:21,280 --> 00:33:26,230
ver log that that goes into this

00:33:23,110 --> 00:33:29,950
synthesis tool that produces the design

00:33:26,230 --> 00:33:31,510
that goes into the FPGA so Python is not

00:33:29,950 --> 00:33:34,750
running on the FPGA but we're using

00:33:31,510 --> 00:33:37,990
Python to create hardware description

00:33:34,750 --> 00:33:40,680
language that will then produce the gate

00:33:37,990 --> 00:33:43,360
configuration that goes into the FPGA

00:33:40,680 --> 00:33:45,460
so this is just a quick little example

00:33:43,360 --> 00:33:47,410
from his talk about what does it look

00:33:45,460 --> 00:33:50,830
like they have a you know a little hello

00:33:47,410 --> 00:33:52,990
road led blinker in me Jen if you've

00:33:50,830 --> 00:33:56,380
done any sort of digital design before

00:33:52,990 --> 00:33:57,850
if you're logger or VHDL you'll probably

00:33:56,380 --> 00:34:00,669
see some of the similar patterns

00:33:57,850 --> 00:34:02,679
here so this is give you a flavor of

00:34:00,669 --> 00:34:06,370
what it looks like to do a hardware

00:34:02,679 --> 00:34:06,940
design in Python I can't go too much

00:34:06,370 --> 00:34:08,440
into it

00:34:06,940 --> 00:34:11,770
in this talk because we don't have that

00:34:08,440 --> 00:34:16,119
much time but there's a great tutorial

00:34:11,770 --> 00:34:18,760
called FPGA 101 and the link there to

00:34:16,119 --> 00:34:20,530
the github repo with it and I suppose a

00:34:18,760 --> 00:34:24,700
combination of slides and little

00:34:20,530 --> 00:34:26,830
tutorials that teach you how to do use

00:34:24,700 --> 00:34:28,510
me Chen and to give you a kind of

00:34:26,830 --> 00:34:31,000
example here I was talking about VHDL

00:34:28,510 --> 00:34:33,790
welfare log and VHDL are usually used to

00:34:31,000 --> 00:34:38,109
do chip design so on the left there is

00:34:33,790 --> 00:34:41,379
VHDL of basically defining a flip-flop

00:34:38,109 --> 00:34:43,480
which is a very basic digital circuit

00:34:41,379 --> 00:34:45,879
and then on the right hand side is the

00:34:43,480 --> 00:34:49,200
implementation in media which is that

00:34:45,879 --> 00:34:51,609
Python framework so it's basically a

00:34:49,200 --> 00:34:57,190
alternative harbour description language

00:34:51,609 --> 00:34:59,050
based on pipeline and what we use to get

00:34:57,190 --> 00:35:01,330
linux running on the hackaday batch was

00:34:59,050 --> 00:35:04,000
something that's built up on top of me

00:35:01,330 --> 00:35:07,180
gen called light x so light x actually

00:35:04,000 --> 00:35:10,660
allows us to create a whole system on

00:35:07,180 --> 00:35:13,720
chip with all the different parts that

00:35:10,660 --> 00:35:18,040
we need in there based with this Python

00:35:13,720 --> 00:35:20,800
me Chen language so light x gives us the

00:35:18,040 --> 00:35:23,050
cores and the controllers that we need

00:35:20,800 --> 00:35:25,750
for building a full system you can find

00:35:23,050 --> 00:35:29,950
out more on the github there for light x

00:35:25,750 --> 00:35:33,100
and here's a nice little overview of

00:35:29,950 --> 00:35:36,880
what light x is so light X we have the

00:35:33,100 --> 00:35:39,190
we're writing Python code in this me Gen

00:35:36,880 --> 00:35:40,960
framework and then we also have

00:35:39,190 --> 00:35:43,480
different peripherals that we can pull

00:35:40,960 --> 00:35:44,980
in from the light x course ecosystem so

00:35:43,480 --> 00:35:46,990
things like either than that controller

00:35:44,980 --> 00:35:48,970
SATA controller which we don't have on

00:35:46,990 --> 00:35:50,140
this badge but we do have DRAM so we

00:35:48,970 --> 00:35:52,270
don't have to write our own vrm

00:35:50,140 --> 00:35:55,600
controller we can use the light dram

00:35:52,270 --> 00:35:56,920
controller and there's fancier fpga

00:35:55,600 --> 00:35:59,350
boards that have things like Ethernet

00:35:56,920 --> 00:36:03,160
and sada and PCI Express and for those

00:35:59,350 --> 00:36:07,480
boards you can use these other modules

00:36:03,160 --> 00:36:10,450
from live X there's kind of a closer up

00:36:07,480 --> 00:36:11,380
a picture of this ASCII diagram so we

00:36:10,450 --> 00:36:13,150
have our FPGA

00:36:11,380 --> 00:36:14,650
- l'chaim like the open-source tool

00:36:13,150 --> 00:36:16,900
chains I was talking about before like

00:36:14,650 --> 00:36:19,599
project ice storm or in the case of this

00:36:16,900 --> 00:36:21,309
fpga project trellis and then we have me

00:36:19,599 --> 00:36:23,170
gen which is that python framework and

00:36:21,309 --> 00:36:26,200
then we have the implementation of

00:36:23,170 --> 00:36:28,390
different cores like the DRAM controller

00:36:26,200 --> 00:36:30,130
from light x and that all gets pulled

00:36:28,390 --> 00:36:32,680
together along with the definition of

00:36:30,130 --> 00:36:38,140
our board into the design that actually

00:36:32,680 --> 00:36:39,910
gets loaded onto that pga however we

00:36:38,140 --> 00:36:40,990
were we were very much aided in the fact

00:36:39,910 --> 00:36:45,279
that there was part of this project

00:36:40,990 --> 00:36:48,640
called linux unlike XFX risk v so that's

00:36:45,279 --> 00:36:52,630
kind of a mouthful vex rizvi is a 32-bit

00:36:48,640 --> 00:36:56,170
lin is capable risk v implementation so

00:36:52,630 --> 00:36:59,200
this is a open source implementation of

00:36:56,170 --> 00:37:02,769
the risk v instruction set at 32 bits

00:36:59,200 --> 00:37:04,750
and is capable of running linux and then

00:37:02,769 --> 00:37:07,480
this project takes that core

00:37:04,750 --> 00:37:10,029
implementation along with things from

00:37:07,480 --> 00:37:12,009
light x like like a ram gain allows you

00:37:10,029 --> 00:37:13,779
to produce a system that is a full

00:37:12,009 --> 00:37:17,500
system on chip that Crenna linux and

00:37:13,779 --> 00:37:20,319
then load that on to an FPGA so here's

00:37:17,500 --> 00:37:22,690
an example of what it looks like having

00:37:20,319 --> 00:37:27,519
Linux online expects to risk boot up on

00:37:22,690 --> 00:37:31,690
FPGA board and here is an example of a

00:37:27,519 --> 00:37:34,690
Linux running on the hackaday badge so

00:37:31,690 --> 00:37:37,210
in this case I have a serial port wired

00:37:34,690 --> 00:37:39,130
up to my laptop from the badge and I'm

00:37:37,210 --> 00:37:41,859
seeing the output there of the serial

00:37:39,130 --> 00:37:45,819
port on the back so we have the Linux on

00:37:41,859 --> 00:37:48,430
light x 4x risk on the ECB 5 FPGA

00:37:45,819 --> 00:37:51,369
and the hackaday badge and it boots up

00:37:48,430 --> 00:37:53,589
and then it loads the kernel loads a

00:37:51,369 --> 00:37:55,299
root file system and then we can

00:37:53,589 --> 00:38:00,009
interact with it through the serial port

00:37:55,299 --> 00:38:02,470
in the terminal emulator on my laptop so

00:38:00,009 --> 00:38:03,579
after we got back from the conference it

00:38:02,470 --> 00:38:06,759
seemed like a good idea to try and

00:38:03,579 --> 00:38:09,700
upstream the work that we did so if

00:38:06,759 --> 00:38:11,079
you're interested in seeing the files

00:38:09,700 --> 00:38:12,759
that we had to change to make this

00:38:11,079 --> 00:38:14,980
possible you can go look at this pull

00:38:12,759 --> 00:38:17,109
request here well you probably don't

00:38:14,980 --> 00:38:18,099
have the packet a badge because it was

00:38:17,109 --> 00:38:20,740
only made for the people at the

00:38:18,099 --> 00:38:22,180
conference this is kind of gives a good

00:38:20,740 --> 00:38:25,580
overview of what does it look like to

00:38:22,180 --> 00:38:28,970
add support for a new board in light ax

00:38:25,580 --> 00:38:31,790
and to give you a flavor here of what

00:38:28,970 --> 00:38:33,920
the the Python code looks like this is

00:38:31,790 --> 00:38:36,200
the file where we defined the pin

00:38:33,920 --> 00:38:39,620
constraints so this is essentially for

00:38:36,200 --> 00:38:40,220
all the different hardware ports on the

00:38:39,620 --> 00:38:42,560
badge

00:38:40,220 --> 00:38:45,170
how do those met back to pins on the

00:38:42,560 --> 00:38:48,620
FPGA chip so that's what's described in

00:38:45,170 --> 00:38:50,390
this file and I think again for me as a

00:38:48,620 --> 00:38:52,580
Python program we're not someone with it

00:38:50,390 --> 00:38:54,830
chip design background this is much more

00:38:52,580 --> 00:38:59,270
readable and understandable to me than

00:38:54,830 --> 00:39:01,550
having to look at fair law or VHDL it

00:38:59,270 --> 00:39:05,270
also leverages the nice object-oriented

00:39:01,550 --> 00:39:06,680
nature of Python so you know you don't

00:39:05,270 --> 00:39:09,410
have to understand what all these things

00:39:06,680 --> 00:39:11,900
mean but you can see here we're in our

00:39:09,410 --> 00:39:13,400
in our border and the definition for the

00:39:11,900 --> 00:39:20,000
hackaday badge we're pulling in things

00:39:13,400 --> 00:39:22,040
like light X you know SDRAM light X you

00:39:20,000 --> 00:39:24,020
know clocks and stuff like that so we're

00:39:22,040 --> 00:39:25,670
able to pull in these modules that were

00:39:24,020 --> 00:39:27,740
already implemented and just bring it in

00:39:25,670 --> 00:39:29,480
for our board and then just change the

00:39:27,740 --> 00:39:31,130
little things that are specific to our

00:39:29,480 --> 00:39:36,560
board and not have to re-implement

00:39:31,130 --> 00:39:38,210
everything on our own and just to give

00:39:36,560 --> 00:39:42,560
an example here of what does it look

00:39:38,210 --> 00:39:44,660
like to define a new board in linux

00:39:42,560 --> 00:39:47,450
unlight expects risk so the way we did

00:39:44,660 --> 00:39:50,900
this is we took an existing board called

00:39:47,450 --> 00:39:53,810
the UL X 3s which is from a hacker space

00:39:50,900 --> 00:39:55,940
in Croatia called radio nough and they

00:39:53,810 --> 00:39:58,100
already had a board with the same FPGA

00:39:55,940 --> 00:40:00,380
the ECP v so we took and they were

00:39:58,100 --> 00:40:02,510
already in Linux on might expect risk so

00:40:00,380 --> 00:40:05,270
we just took that board and we changed

00:40:02,510 --> 00:40:08,210
some of the specifics to make it work

00:40:05,270 --> 00:40:11,390
with our hack and a badge in this this

00:40:08,210 --> 00:40:14,930
defines here you can see how we're gonna

00:40:11,390 --> 00:40:17,990
then load the bitstream on to the FPGA B

00:40:14,930 --> 00:40:19,430
is a utility called vfu YouTube and then

00:40:17,990 --> 00:40:22,370
for our badge

00:40:19,430 --> 00:40:24,680
we're very simple we only have serial so

00:40:22,370 --> 00:40:25,970
other boards if you look in this file

00:40:24,680 --> 00:40:28,910
you'll see some of them have Ethernet

00:40:25,970 --> 00:40:30,620
some of them have PCI Express so you can

00:40:28,910 --> 00:40:32,270
have a lot more if your board has more

00:40:30,620 --> 00:40:35,260
peripherals we unfortunately only had

00:40:32,270 --> 00:40:35,260
serial on this one

00:40:35,599 --> 00:40:40,430
so I think another way to illustrate the

00:40:38,089 --> 00:40:42,589
nice object-oriented nature of this and

00:40:40,430 --> 00:40:45,109
why it's easy to make it to extend it to

00:40:42,589 --> 00:40:47,630
new hardware and badges is we have a

00:40:45,109 --> 00:40:50,359
SDRAM chip on this board the one that

00:40:47,630 --> 00:40:52,819
Jacob put on the expansion board and

00:40:50,359 --> 00:40:55,460
that was not already in the light beer

00:40:52,819 --> 00:40:59,269
app module so this is the DRM controller

00:40:55,460 --> 00:41:01,099
that we were using for our project so

00:40:59,269 --> 00:41:03,920
the only code we had to use was just

00:41:01,099 --> 00:41:06,769
extending the SDRAM module class and

00:41:03,920 --> 00:41:09,140
then just adding in the specific timing

00:41:06,769 --> 00:41:10,940
information in structure for our chip so

00:41:09,140 --> 00:41:13,549
we can just go pull up the datasheet for

00:41:10,940 --> 00:41:15,349
this chip look in the table to see what

00:41:13,549 --> 00:41:16,789
the different timing information is and

00:41:15,349 --> 00:41:18,380
just plug that in there so rather than

00:41:16,789 --> 00:41:20,390
having to write our own DRAM controller

00:41:18,380 --> 00:41:22,940
and fairlock or something like that we

00:41:20,390 --> 00:41:24,559
can just take like DRAM and just extend

00:41:22,940 --> 00:41:27,019
it and just put in the information and

00:41:24,559 --> 00:41:28,599
specific to our hardware that we have on

00:41:27,019 --> 00:41:31,130
our badge

00:41:28,599 --> 00:41:33,019
however and we did get linux bleeding

00:41:31,130 --> 00:41:35,930
and running but it was taking 300

00:41:33,019 --> 00:41:38,630
seconds which is not fun wait too long

00:41:35,930 --> 00:41:40,369
right so this was a pretty neat like

00:41:38,630 --> 00:41:44,119
open source moment I thought so I opened

00:41:40,369 --> 00:41:45,440
up a github issue and I said hey you

00:41:44,119 --> 00:41:48,229
know it's taken really long time to be

00:41:45,440 --> 00:41:50,269
is taken like 300 seconds and enjoy

00:41:48,229 --> 00:41:53,119
digital is their user name name is

00:41:50,269 --> 00:41:56,690
Florence he's the person that created

00:41:53,119 --> 00:41:57,319
like X he within like an hour or

00:41:56,690 --> 00:41:59,420
something

00:41:57,319 --> 00:42:03,499
gave me a patch that made it run ten

00:41:59,420 --> 00:42:05,779
times faster and if you've not used this

00:42:03,499 --> 00:42:07,670
utility before ASCII cinema is a really

00:42:05,779 --> 00:42:09,259
fun thing that allows you to record your

00:42:07,670 --> 00:42:11,539
screen so other people can play it back

00:42:09,259 --> 00:42:13,039
so when I created the github issue I

00:42:11,539 --> 00:42:14,719
showed them well what does it look like

00:42:13,039 --> 00:42:17,599
when it boots up in the terminal and

00:42:14,719 --> 00:42:19,099
then I can also put it up there for

00:42:17,599 --> 00:42:21,650
other people to see so it's kind of a

00:42:19,099 --> 00:42:24,410
neat neat trick if you've not seen ASCII

00:42:21,650 --> 00:42:25,759
cinema before and I won't play this here

00:42:24,410 --> 00:42:30,039
but this shows what it looks like the

00:42:25,759 --> 00:42:32,660
boot of Linux on the badge and then we

00:42:30,039 --> 00:42:34,249
yeah so I was saying it sped it up by 10

00:42:32,660 --> 00:42:37,549
seconds and then here's a look at the

00:42:34,249 --> 00:42:39,259
github issue that I opened up and to

00:42:37,549 --> 00:42:43,099
give you a little bit more sense of the

00:42:39,259 --> 00:42:45,910
Python code involved in light x here is

00:42:43,099 --> 00:42:48,380
an example of how Florent was able to

00:42:45,910 --> 00:42:49,010
make it go a lot faster so one of the

00:42:48,380 --> 00:42:51,560
issues with

00:42:49,010 --> 00:42:54,500
badge was we were using an 8 bit wide

00:42:51,560 --> 00:42:56,870
DRAM which means that it can only grab 8

00:42:54,500 --> 00:42:59,810
bits at a time which is not super

00:42:56,870 --> 00:43:01,520
efficient normally I'd have liked DDR

00:42:59,810 --> 00:43:03,350
memory that would be like 16 bit wide so

00:43:01,520 --> 00:43:05,570
one of the reasons this was going so

00:43:03,350 --> 00:43:08,090
slow it was going to have it was

00:43:05,570 --> 00:43:09,830
accessing memory very frequently so

00:43:08,090 --> 00:43:12,620
every eight bits everybody would have to

00:43:09,830 --> 00:43:15,410
go and access Ephrem memory so one of

00:43:12,620 --> 00:43:18,800
the optimizations was Florent enjoy

00:43:15,410 --> 00:43:20,690
digital he made the l2 cache wider so we

00:43:18,800 --> 00:43:22,130
could fit more in there there were some

00:43:20,690 --> 00:43:23,330
other things that he did as well but I

00:43:22,130 --> 00:43:25,880
think this is kind of a neat thing here

00:43:23,330 --> 00:43:27,320
for one if this was very log and I

00:43:25,880 --> 00:43:29,510
looked at the diff I don't know if I'd

00:43:27,320 --> 00:43:32,120
be able to make sense of it I'm not very

00:43:29,510 --> 00:43:33,680
experienced the fair lot with the Python

00:43:32,120 --> 00:43:35,330
code you know even though I don't know

00:43:33,680 --> 00:43:37,700
that too much about the implementation

00:43:35,330 --> 00:43:39,620
details of this DRM controller I can

00:43:37,700 --> 00:43:41,600
look at this diff and kind of make a bit

00:43:39,620 --> 00:43:46,130
of sense of it so I think that's kind of

00:43:41,600 --> 00:43:48,260
a a nice aspect of me gen which is that

00:43:46,130 --> 00:43:50,930
Python based language in light x which

00:43:48,260 --> 00:43:52,040
is built upon me John I think makes a

00:43:50,930 --> 00:43:55,070
little bit more accessible to people

00:43:52,040 --> 00:43:56,590
from us off for a background and then

00:43:55,070 --> 00:43:58,940
you'll notice we have an LCD on the

00:43:56,590 --> 00:44:00,740
hackaday badge and it took us a long

00:43:58,940 --> 00:44:03,050
time to get working but Greg Da'Ville

00:44:00,740 --> 00:44:05,120
who's an awesome hardware hacker and

00:44:03,050 --> 00:44:07,850
Australia who is also at the super

00:44:05,120 --> 00:44:09,170
conference but a maybe a month ago he

00:44:07,850 --> 00:44:12,260
finally got it working with the screen

00:44:09,170 --> 00:44:14,870
so he used another piece of light X

00:44:12,260 --> 00:44:16,790
called light video to basically create a

00:44:14,870 --> 00:44:20,660
VGA terminal with the screen so we can

00:44:16,790 --> 00:44:22,100
see Linux booting up on there and I

00:44:20,660 --> 00:44:24,830
don't I don't think you can see me

00:44:22,100 --> 00:44:27,020
myself but I also have the Badger with

00:44:24,830 --> 00:44:28,420
me and it's doing doing the same little

00:44:27,020 --> 00:44:33,470
movie there that you can watch on

00:44:28,420 --> 00:44:35,300
Twitter if you go to that URL so this is

00:44:33,470 --> 00:44:38,450
the hackaday badge you had the ECB 5

00:44:35,300 --> 00:44:40,520
FPGA in it it is also open source

00:44:38,450 --> 00:44:41,930
hardware so you can get the schematics

00:44:40,520 --> 00:44:44,030
and the board layout and the build

00:44:41,930 --> 00:44:45,980
materials however if you wanted one

00:44:44,030 --> 00:44:47,150
you'd have to build your own because it

00:44:45,980 --> 00:44:49,160
was only made for the people at the

00:44:47,150 --> 00:44:50,860
conference or find someone that wanted

00:44:49,160 --> 00:44:52,640
to he's willing to give you their badge

00:44:50,860 --> 00:44:55,160
but that's not really a sustainable

00:44:52,640 --> 00:44:57,650
thing so what are some open source

00:44:55,160 --> 00:44:59,180
boards that you can either build or get

00:44:57,650 --> 00:45:02,460
that can run Linux

00:44:59,180 --> 00:45:05,010
so David Shaw's the person

00:45:02,460 --> 00:45:07,740
rigidly did the open-source tool chain

00:45:05,010 --> 00:45:10,380
for the ECP 5 called project trellis and

00:45:07,740 --> 00:45:12,569
he created this like mega board and has

00:45:10,380 --> 00:45:16,020
like super cool things like Gigabit

00:45:12,569 --> 00:45:18,960
Ethernet and PCI Express and several

00:45:16,020 --> 00:45:20,670
gigabytes of ddr3 this is not a board

00:45:18,960 --> 00:45:23,400
that you can buy but the plans are out

00:45:20,670 --> 00:45:25,770
there to make it not super practical but

00:45:23,400 --> 00:45:27,240
if you wanted like the highest on each

00:45:25,770 --> 00:45:29,339
board this would be the one that you

00:45:27,240 --> 00:45:31,079
would want to feel however you don't

00:45:29,339 --> 00:45:32,970
want to like build the hardware because

00:45:31,079 --> 00:45:35,130
it's usually pretty expensive to buy

00:45:32,970 --> 00:45:37,589
things than low quantity there are two

00:45:35,130 --> 00:45:39,569
options now so Greg who I mentioned

00:45:37,589 --> 00:45:41,549
before he has this really cool board

00:45:39,569 --> 00:45:43,619
called the orange crab and it's in this

00:45:41,549 --> 00:45:45,569
small form-factor called the Adafruit

00:45:43,619 --> 00:45:48,599
feather farm factor which is quite

00:45:45,569 --> 00:45:50,369
popular for from like the maker a world

00:45:48,599 --> 00:45:51,990
that's working with microcontrollers and

00:45:50,369 --> 00:45:53,609
you can get a lot of expansion board is

00:45:51,990 --> 00:45:56,490
called feather wings that you can add on

00:45:53,609 --> 00:45:59,640
to this form factor so this is a house

00:45:56,490 --> 00:46:02,700
an HP 5 FPGA it also has a 120 megabits

00:45:59,640 --> 00:46:03,960
of DDR memory which means it's it's much

00:46:02,700 --> 00:46:05,910
more than what we have in this hackaday

00:46:03,960 --> 00:46:08,279
badge and it's also much faster so this

00:46:05,910 --> 00:46:10,700
is a great platform for running Linux on

00:46:08,279 --> 00:46:15,390
light Xbox wrist so if you wanted to run

00:46:10,700 --> 00:46:18,270
Linux on a risk 5 soft core in FPGA this

00:46:15,390 --> 00:46:20,220
is a really good way of doing that Greg

00:46:18,270 --> 00:46:22,079
just started a campaign night group guts

00:46:20,220 --> 00:46:24,779
so if you want to get one you can go to

00:46:22,079 --> 00:46:29,160
that group gets URL and sign up there to

00:46:24,779 --> 00:46:31,170
buy one and it also does run Linux we

00:46:29,160 --> 00:46:33,240
were at the kiosk at Peter Congress back

00:46:31,170 --> 00:46:35,940
in December and someone was like hey

00:46:33,240 --> 00:46:37,650
it'd be cool if linux ran on it and greg

00:46:35,940 --> 00:46:40,380
within a couple hours working with tim

00:46:37,650 --> 00:46:42,150
was able to get linux to put up on it so

00:46:40,380 --> 00:46:45,990
it's a great platform if you're looking

00:46:42,150 --> 00:46:48,450
to run linux on an fpga with risk 5 the

00:46:45,990 --> 00:46:50,460
other great board is from a hackerspace

00:46:48,450 --> 00:46:52,650
in croatia called radeon a--

00:46:50,460 --> 00:46:55,980
so they have this board also with the

00:46:52,650 --> 00:46:58,890
eff also with F sorry also with the ECP

00:46:55,980 --> 00:47:00,900
5 FPGA and they have a couple different

00:46:58,890 --> 00:47:02,250
versions with different features you can

00:47:00,900 --> 00:47:04,770
also see there on the board it has a lot

00:47:02,250 --> 00:47:06,029
of additional peripherals so looks like

00:47:04,770 --> 00:47:09,539
it'd be something good especially for

00:47:06,029 --> 00:47:10,890
doing workshops and things like that now

00:47:09,539 --> 00:47:12,119
this is not something they'll run Linux

00:47:10,890 --> 00:47:15,390
but if you just wanted to get into

00:47:12,119 --> 00:47:15,820
learning FPGAs the FOMO board which is a

00:47:15,390 --> 00:47:19,210
prod

00:47:15,820 --> 00:47:22,690
from Tim Ansel in Sean Crosswhite who

00:47:19,210 --> 00:47:24,940
are also on Team Linux on Madge at the

00:47:22,690 --> 00:47:26,980
hackaday conference they created this

00:47:24,940 --> 00:47:29,410
small board that fits inside your USB

00:47:26,980 --> 00:47:33,190
port the idea here is it teaches you the

00:47:29,410 --> 00:47:36,040
basics of FPGAs and it teaches you in

00:47:33,190 --> 00:47:38,260
the context of micro Python very log and

00:47:36,040 --> 00:47:39,100
then also with light x it's kind of kind

00:47:38,260 --> 00:47:41,080
of takes you through these different

00:47:39,100 --> 00:47:42,310
environments showing you have a blinking

00:47:41,080 --> 00:47:45,130
LED and each of those different

00:47:42,310 --> 00:47:47,560
environments so this is a great board to

00:47:45,130 --> 00:47:49,330
get if you want to get started and then

00:47:47,560 --> 00:47:51,820
you can always have your FPGA with you

00:47:49,330 --> 00:47:53,740
wherever you go it won't run Linux but

00:47:51,820 --> 00:47:56,380
it'll it'll get you up to speed because

00:47:53,740 --> 00:47:57,880
in some ways it's a little bit better to

00:47:56,380 --> 00:47:59,590
learn the basics that I VJs with

00:47:57,880 --> 00:48:01,450
something simpler before you jump into

00:47:59,590 --> 00:48:05,530
the world of running Linux on a full

00:48:01,450 --> 00:48:07,600
risk by processor the slides for this

00:48:05,530 --> 00:48:11,710
talk with all the links are that URL

00:48:07,600 --> 00:48:14,440
there and github I also gave a talk back

00:48:11,710 --> 00:48:17,620
at Kaos communications Congress that

00:48:14,440 --> 00:48:20,380
goes into kind of some other ARM based

00:48:17,620 --> 00:48:22,450
open source hardware for sacrum Linux so

00:48:20,380 --> 00:48:25,240
that might also be of interest and I'm

00:48:22,450 --> 00:48:27,100
pdp-7 on Twitter and that's my email

00:48:25,240 --> 00:48:28,740
address and I'd be happy to take any

00:48:27,100 --> 00:48:32,080
questions

00:48:28,740 --> 00:48:35,920
wow thanks that was quite a deep dive

00:48:32,080 --> 00:48:42,730
thank you very much for that so we do

00:48:35,920 --> 00:48:45,610
have some questions let's see so the

00:48:42,730 --> 00:48:50,460
first one is do I remember correctly

00:48:45,610 --> 00:48:50,460
that your hardware has been in space I

00:48:51,330 --> 00:48:57,340
maybe they're referring to the Beagle

00:48:53,350 --> 00:48:59,410
bone I'm not sure I don't know if

00:48:57,340 --> 00:49:02,200
there's any risk five in space I'm sure

00:48:59,410 --> 00:49:04,000
there will be it's just a matter of time

00:49:02,200 --> 00:49:05,890
there's probably also I would imagine

00:49:04,000 --> 00:49:08,020
some CubeSat with risk five my

00:49:05,890 --> 00:49:09,190
controllers I'm not sure about that if

00:49:08,020 --> 00:49:11,200
they were talking about the Beagle bone

00:49:09,190 --> 00:49:13,660
which is a little open hardware board

00:49:11,200 --> 00:49:14,170
I'm involved with there are beagle bones

00:49:13,660 --> 00:49:16,800
in space

00:49:14,170 --> 00:49:21,370
um that have been deployed on cube SATs

00:49:16,800 --> 00:49:25,180
okay then the second one is when working

00:49:21,370 --> 00:49:27,910
with FPGAs are the specific licenses or

00:49:25,180 --> 00:49:31,420
do you use GPL LGPL

00:49:27,910 --> 00:49:35,710
how does the this translate into soft

00:49:31,420 --> 00:49:38,470
hardware so one of the things that I

00:49:35,710 --> 00:49:43,420
thought was interesting that when I was

00:49:38,470 --> 00:49:45,339
at FOSDEM I hung out him like the risk

00:49:43,420 --> 00:49:47,440
five room in the EDA room and one of the

00:49:45,339 --> 00:49:50,440
things I learned is in this world of

00:49:47,440 --> 00:49:54,250
chip design permissive licenses are much

00:49:50,440 --> 00:49:56,319
more popular so when I was talking about

00:49:54,250 --> 00:49:59,470
those open-source implementations of

00:49:56,319 --> 00:50:04,299
risk v like rocket and boom from

00:49:59,470 --> 00:50:06,069
Berkeley and the risky and ariane from

00:50:04,299 --> 00:50:09,910
eth zurich those are all permissively

00:50:06,069 --> 00:50:12,579
licensed and i believe in the chip

00:50:09,910 --> 00:50:14,500
industry it's quite common for if there

00:50:12,579 --> 00:50:16,720
is going to be open IP that they want it

00:50:14,500 --> 00:50:18,369
to be permissive license there are also

00:50:16,720 --> 00:50:20,529
some people in the chip design world

00:50:18,369 --> 00:50:23,170
that believe more strongly and

00:50:20,529 --> 00:50:25,509
reciprocal licenses like GPL though

00:50:23,170 --> 00:50:27,910
there are not I don't think there's

00:50:25,509 --> 00:50:29,769
really any projects right now that are

00:50:27,910 --> 00:50:31,480
there's not too many projects right now

00:50:29,769 --> 00:50:33,579
that you're using reciprocal licenses so

00:50:31,480 --> 00:50:36,009
I would say in the in the open source

00:50:33,579 --> 00:50:37,900
chip design road permissive is very

00:50:36,009 --> 00:50:43,420
permissive licenses it simply much more

00:50:37,900 --> 00:50:47,079
popular with FPGAs the the software

00:50:43,420 --> 00:50:47,769
typically was proprietary this like from

00:50:47,079 --> 00:50:51,490
altaira

00:50:47,769 --> 00:50:54,279
or now Intel in Xilinx they also would

00:50:51,490 --> 00:50:57,329
offer different cores that you could use

00:50:54,279 --> 00:50:59,710
and those would have different licenses

00:50:57,329 --> 00:51:01,690
essentially like proprietary

00:50:59,710 --> 00:51:04,420
implementations that you could use on

00:51:01,690 --> 00:51:06,609
their chips but a lot of this is being

00:51:04,420 --> 00:51:08,559
replaced with the free software tool

00:51:06,609 --> 00:51:10,509
chains I was talking about and then also

00:51:08,559 --> 00:51:14,349
projects that are doing open source

00:51:10,509 --> 00:51:17,049
implementations so like latex is open

00:51:14,349 --> 00:51:19,779
source permissibly license so is me gen

00:51:17,049 --> 00:51:21,670
so and hopefully with things like Libre

00:51:19,779 --> 00:51:26,279
cores from fossee we'll start to see a

00:51:21,670 --> 00:51:28,450
more broader ecosystem of open source IP

00:51:26,279 --> 00:51:30,759
by the way if you look at chip design

00:51:28,450 --> 00:51:32,500
people say IP all the time IP is not IP

00:51:30,759 --> 00:51:34,210
address it's for intellectual property

00:51:32,500 --> 00:51:35,920
which is also kind of weird thing to say

00:51:34,210 --> 00:51:38,980
what they really mean when they say IP

00:51:35,920 --> 00:51:41,210
is they mean like a block or a module in

00:51:38,980 --> 00:51:43,130
a design so like

00:51:41,210 --> 00:51:44,660
Ethernet controller the deem ramp

00:51:43,130 --> 00:51:47,270
controller would be you know your

00:51:44,660 --> 00:51:49,220
Ethernet IP uh I also heard someone say

00:51:47,270 --> 00:51:51,730
basically hardware designers was saying

00:51:49,220 --> 00:51:57,290
IP would they surely be sayings library

00:51:51,730 --> 00:52:01,370
okay then the next question when

00:51:57,290 --> 00:52:06,260
developing risk five do you need to use

00:52:01,370 --> 00:52:09,670
any proprietary software it depends on

00:52:06,260 --> 00:52:12,800
your workflow so with with chip design

00:52:09,670 --> 00:52:15,620
so implementing like so the risk five is

00:52:12,800 --> 00:52:19,460
an instruction set specification so

00:52:15,620 --> 00:52:23,140
implement that instruction set typically

00:52:19,460 --> 00:52:27,260
you'd be using a proprietary flow so

00:52:23,140 --> 00:52:29,900
know only recently has is there kind of

00:52:27,260 --> 00:52:33,200
some alternatives to designing doing

00:52:29,900 --> 00:52:35,570
chip design with open source flows so

00:52:33,200 --> 00:52:37,610
typically it using software from

00:52:35,570 --> 00:52:40,370
companies like cadence or mint or

00:52:37,610 --> 00:52:43,490
synopsis to do the synthesis to do the

00:52:40,370 --> 00:52:46,670
place in or out for making chips there

00:52:43,490 --> 00:52:50,240
are now from some academic projects one

00:52:46,670 --> 00:52:52,630
it's called open roads which is has

00:52:50,240 --> 00:52:55,310
DARPA funding is the University of

00:52:52,630 --> 00:52:56,960
Washington I think and also University

00:52:55,310 --> 00:52:59,300
of California San Diego essentially

00:52:56,960 --> 00:53:03,440
they're trying to create this flow where

00:52:59,300 --> 00:53:05,390
it's completely open-source but almost

00:53:03,440 --> 00:53:09,470
everything currently being done is with

00:53:05,390 --> 00:53:12,470
proprietary tools okay the next question

00:53:09,470 --> 00:53:16,580
is do you know about the European

00:53:12,470 --> 00:53:18,770
processor initiative epi yeah I've

00:53:16,580 --> 00:53:22,940
learned that from watching some of these

00:53:18,770 --> 00:53:26,180
videos at the risk v Foundation events

00:53:22,940 --> 00:53:28,370
and also the Fosse events so this is a

00:53:26,180 --> 00:53:30,500
really neat thing that's being led by

00:53:28,370 --> 00:53:33,680
the EU which is basically providing

00:53:30,500 --> 00:53:37,670
funding for open source processor design

00:53:33,680 --> 00:53:39,410
project so universities like ETH Zurich

00:53:37,670 --> 00:53:41,330
are involved in this and in several

00:53:39,410 --> 00:53:44,680
different companies as well so I think

00:53:41,330 --> 00:53:46,640
this is exciting and there's also

00:53:44,680 --> 00:53:48,620
initiatives like this in other countries

00:53:46,640 --> 00:53:51,410
as well India has one called the

00:53:48,620 --> 00:53:53,720
Schottky Schottky project as well so

00:53:51,410 --> 00:53:55,069
it's really cool to see you know things

00:53:53,720 --> 00:53:56,920
like the EU you know

00:53:55,069 --> 00:53:59,299
trees getting involved in trying to

00:53:56,920 --> 00:54:02,930
generate open-source chip design

00:53:59,299 --> 00:54:06,109
yeah angry okay and then we have the

00:54:02,930 --> 00:54:08,479
last question here in your opinion what

00:54:06,109 --> 00:54:13,130
is stopping risks risk five from

00:54:08,479 --> 00:54:18,880
becoming mainstream yet I think it's I

00:54:13,130 --> 00:54:18,880
think partly it's just it takes time so

00:54:19,209 --> 00:54:24,320
it's only kind of

00:54:22,670 --> 00:54:25,850
jumped out into industry in the last

00:54:24,320 --> 00:54:28,550
couple years it was something that was

00:54:25,850 --> 00:54:30,110
an academic project for a long time

00:54:28,550 --> 00:54:33,740
and now it's being embraced by companies

00:54:30,110 --> 00:54:35,900
like Western Digital and NVIDIA and

00:54:33,740 --> 00:54:38,450
they're in the process of doing product

00:54:35,900 --> 00:54:40,100
design based on it but I think it'll

00:54:38,450 --> 00:54:43,640
it'll take a little while before we see

00:54:40,100 --> 00:54:45,350
it kind of in everything now places

00:54:43,640 --> 00:54:46,880
where it seems to be quite popular right

00:54:45,350 --> 00:54:51,950
now are people that are doing market

00:54:46,880 --> 00:54:54,020
controllers and also people that are

00:54:51,950 --> 00:54:56,360
doing like kind of higher-end things

00:54:54,020 --> 00:54:58,610
like super computers and stuff like that

00:54:56,360 --> 00:54:59,990
I've been seeing some research in that I

00:54:58,610 --> 00:55:01,430
think the kind of thing we're missing

00:54:59,990 --> 00:55:03,830
right now is somewhere in the middle

00:55:01,430 --> 00:55:05,720
like these system on ships that would go

00:55:03,830 --> 00:55:08,510
into a smartphone or a single-board

00:55:05,720 --> 00:55:10,580
computer and I think this is going to

00:55:08,510 --> 00:55:13,100
take time one of the reasons being is

00:55:10,580 --> 00:55:14,840
with FPGAs there's not this huge risk

00:55:13,100 --> 00:55:17,870
you can just design a system with lunar

00:55:14,840 --> 00:55:19,520
onto FPGA but when designing chips being

00:55:17,870 --> 00:55:21,350
with to verify your design and make sure

00:55:19,520 --> 00:55:23,840
that's gonna work so to get a chip made

00:55:21,350 --> 00:55:25,250
you have to get these masks made up for

00:55:23,840 --> 00:55:27,110
lithography and they're very expensive

00:55:25,250 --> 00:55:29,780
someone they say tape out of chip

00:55:27,110 --> 00:55:31,970
they're talking about doing these masks

00:55:29,780 --> 00:55:33,290
and sending them to the fab and this is

00:55:31,970 --> 00:55:34,790
very expensive and if you get it wrong

00:55:33,290 --> 00:55:37,070
you have to do it all over again you

00:55:34,790 --> 00:55:39,170
lose millions of dollars for these newer

00:55:37,070 --> 00:55:41,930
processes like you know 10 nanometers

00:55:39,170 --> 00:55:43,850
these super high-end intel chips and ARM

00:55:41,930 --> 00:55:46,430
chips it can be like tens of millions of

00:55:43,850 --> 00:55:48,020
dollars for the math set so one of the

00:55:46,430 --> 00:55:49,760
things is kind of holding back some of

00:55:48,020 --> 00:55:52,810
these open-source implementations we

00:55:49,760 --> 00:55:56,390
need ways to verify that things work

00:55:52,810 --> 00:55:58,130
before they go to fab and one of the

00:55:56,390 --> 00:56:01,040
groups that specifically is focusing on

00:55:58,130 --> 00:56:02,810
this is the open HW group and there are

00:56:01,040 --> 00:56:05,930
the ones that are looking to have this

00:56:02,810 --> 00:56:07,820
risk 5 SOC at the end of this year if

00:56:05,930 --> 00:56:09,740
you check out open HW group they have a

00:56:07,820 --> 00:56:13,070
lot of information about how they're

00:56:09,740 --> 00:56:15,980
trying to leverage things like Google

00:56:13,070 --> 00:56:17,630
cloud to do design verification so I

00:56:15,980 --> 00:56:20,810
would say the biggest thing is holding

00:56:17,630 --> 00:56:22,670
back open source chip design from being

00:56:20,810 --> 00:56:27,010
out there in the wild more so is the

00:56:22,670 --> 00:56:30,290
ability to verify the open source

00:56:27,010 --> 00:56:33,200
designs before you go to fab with them

00:56:30,290 --> 00:56:35,420
and I think it also just takes time the

00:56:33,200 --> 00:56:36,059
cool thing is the software ecosystem is

00:56:35,420 --> 00:56:37,499
there

00:56:36,059 --> 00:56:41,519
like there's good support in Linux now

00:56:37,499 --> 00:56:43,469
they're supporting GCC and clang so we

00:56:41,519 --> 00:56:46,170
can do a lot with QEMU we can do a lot

00:56:43,469 --> 00:56:48,449
with FPGAs and then essentially having

00:56:46,170 --> 00:56:49,859
chips that are available in volume in

00:56:48,449 --> 00:56:52,049
the market is just going to take a

00:56:49,859 --> 00:56:53,789
little bit of time but by the time we

00:56:52,049 --> 00:56:56,640
get a chip to do like a single board

00:56:53,789 --> 00:56:59,609
computer with the software supports are

00:56:56,640 --> 00:57:01,799
you there so you know you can boot up

00:56:59,609 --> 00:57:03,449
Debian you can boot up fedora right now

00:57:01,799 --> 00:57:04,920
so it's just going to take a little more

00:57:03,449 --> 00:57:08,699
time I think probably a couple years

00:57:04,920 --> 00:57:11,459
before we have more powerful more widely

00:57:08,699 --> 00:57:15,689
available chips that are implementing

00:57:11,459 --> 00:57:18,719
risk fine we running almost out of time

00:57:15,689 --> 00:57:22,140
but we have two more quick questions

00:57:18,719 --> 00:57:27,299
so has writing with my Jen any downsides

00:57:22,140 --> 00:57:29,309
as opposed to pure very long you could

00:57:27,299 --> 00:57:31,279
just kind of I would say it depends a

00:57:29,309 --> 00:57:33,390
lot on the people you're working with so

00:57:31,279 --> 00:57:35,880
system very log is something that's

00:57:33,390 --> 00:57:37,890
quite popular in industry so I would say

00:57:35,880 --> 00:57:40,920
one downside to using media and might be

00:57:37,890 --> 00:57:42,539
well if you're if you're working with

00:57:40,920 --> 00:57:45,449
other hardware designers they probably

00:57:42,539 --> 00:57:47,999
familiar with Verilog or system very log

00:57:45,449 --> 00:57:49,739
so so that's one consideration though I

00:57:47,999 --> 00:57:51,839
think the cool thing about me Jen is is

00:57:49,739 --> 00:57:53,699
going to allow us to get turn more

00:57:51,839 --> 00:57:55,890
software engineers into hardware

00:57:53,699 --> 00:57:59,789
designers so I think that's one of the

00:57:55,890 --> 00:58:01,589
upsides to it you know so the downside

00:57:59,789 --> 00:58:04,650
to me Jen is it's it's kind of a new

00:58:01,589 --> 00:58:07,549
thing most harder signers are using

00:58:04,650 --> 00:58:09,869
Verilog or VHDL or system very log so

00:58:07,549 --> 00:58:11,429
that's kind of the trade-off there but I

00:58:09,869 --> 00:58:13,199
think oh thing here is we could turn

00:58:11,429 --> 00:58:15,630
more software engineers into chip

00:58:13,199 --> 00:58:19,229
designers with something like media I

00:58:15,630 --> 00:58:22,469
say okay okay and the last one look

00:58:19,229 --> 00:58:27,959
looking at your crystal ball when we'll

00:58:22,469 --> 00:58:30,509
be using risk 5 in our desktop PCs yeah

00:58:27,959 --> 00:58:31,709
I think that's a tough one and that goes

00:58:30,509 --> 00:58:35,939
back to what I was talking about with

00:58:31,709 --> 00:58:38,279
with making chips is our desktop PCs are

00:58:35,939 --> 00:58:43,109
we using really high-end technology so

00:58:38,279 --> 00:58:45,839
really small you know 80 nanometer 10

00:58:43,109 --> 00:58:49,170
nanometer and to produce mass for these

00:58:45,839 --> 00:58:49,950
processes is super expensive so it

00:58:49,170 --> 00:58:52,980
really takes

00:58:49,950 --> 00:58:55,050
company to invest a lot of time and

00:58:52,980 --> 00:58:58,230
money into the verification and also

00:58:55,050 --> 00:59:02,460
like the just market justification so I

00:58:58,230 --> 00:59:03,990
think it'll come eventually but it's

00:59:02,460 --> 00:59:06,300
gonna take a while before we see

00:59:03,990 --> 00:59:08,790
companies producing you know something

00:59:06,300 --> 00:59:10,710
like a core i7 with with risk 5 because

00:59:08,790 --> 00:59:12,750
this is a really large bet for them like

00:59:10,710 --> 00:59:15,630
the mass would probably be tens of

00:59:12,750 --> 00:59:17,730
millions of dollars so it's just it's a

00:59:15,630 --> 00:59:20,430
it's a pretty large bet for a company to

00:59:17,730 --> 00:59:22,710
make you know like we've seen with arm

00:59:20,430 --> 00:59:24,990
you know in the server market it's

00:59:22,710 --> 00:59:26,730
taking a long time for that to happen

00:59:24,990 --> 00:59:29,520
but I think it will happen and I think

00:59:26,730 --> 00:59:31,410
in countries like China there's a huge

00:59:29,520 --> 00:59:34,109
motivation to move away from proprietary

00:59:31,410 --> 00:59:35,550
instruction sets like Intel arm into

00:59:34,109 --> 00:59:37,770
have more control over their own

00:59:35,550 --> 00:59:39,060
technology so I think it'll come but

00:59:37,770 --> 00:59:43,290
it'll probably takes probably take some

00:59:39,060 --> 00:59:45,720
time maybe fossa 2025 boss north 2025

00:59:43,290 --> 00:59:49,890
maybe we'll have a miss 5 a laptop or

00:59:45,720 --> 00:59:52,589
something ok great and then another

00:59:49,890 --> 00:59:55,200
question but anonymous wrote thanks for

00:59:52,589 --> 00:59:58,290
the great talk this was one of the most

00:59:55,200 --> 01:00:00,770
interesting so far I agree thank you

00:59:58,290 --> 01:00:00,770
very much

01:00:02,630 --> 01:00:06,289
with that I would like to thank our

01:00:04,339 --> 01:00:08,739
speakers our sponsors and all our

01:00:06,289 --> 01:00:08,739
viewers

01:00:14,460 --> 01:00:16,520

YouTube URL: https://www.youtube.com/watch?v=jgnga7ay7Cg


