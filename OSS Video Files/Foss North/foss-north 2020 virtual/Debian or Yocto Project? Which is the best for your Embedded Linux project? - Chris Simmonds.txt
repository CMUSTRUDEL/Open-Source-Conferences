Title: Debian or Yocto Project? Which is the best for your Embedded Linux project? - Chris Simmonds
Publication date: 2020-06-23
Playlist: foss-north 2020 virtual
Description: 
	Talk details: https://foss-north.se/2020/speakers-and-talks.html#csimmonds
Conference details: https://foss-north.se/2020/
Captions: 
	00:00:00,030 --> 00:00:05,790
welcome to force north the virtual

00:00:02,939 --> 00:00:08,099
edition we would like to thank all our

00:00:05,790 --> 00:00:12,120
sponsors and partners in this difficult

00:00:08,099 --> 00:00:15,630
situation our gold sponsors look soft

00:00:12,120 --> 00:00:19,800
and ansible by Red Hat

00:00:15,630 --> 00:00:22,010
our silver sponsors ITRs group and make

00:00:19,800 --> 00:00:25,670
it right

00:00:22,010 --> 00:00:28,760
our base sponsors

00:00:25,670 --> 00:00:30,920
our partner projects the open source

00:00:28,760 --> 00:00:34,040
community and the region of Gothenburg

00:00:30,920 --> 00:00:36,110
and a huge thanks to our awesome

00:00:34,040 --> 00:00:39,650
community this would not have been

00:00:36,110 --> 00:00:41,600
possible without you good morning

00:00:39,650 --> 00:00:44,600
everyone and welcome to the last day of

00:00:41,600 --> 00:00:47,930
forced north 2020 first on stage is

00:00:44,600 --> 00:00:50,390
Chris Simmons who will talk about Debian

00:00:47,930 --> 00:00:54,129
or Yocto which is best for your embedded

00:00:50,390 --> 00:00:56,960
Linux project the stage is yours Chris

00:00:54,129 --> 00:00:58,010
hello and good morning elitists good

00:00:56,960 --> 00:01:00,290
morning for me it could be a different

00:00:58,010 --> 00:01:03,920
time in a world for yourselves so here

00:01:00,290 --> 00:01:06,799
I'm I'm here to talk about embedded

00:01:03,920 --> 00:01:08,840
Linux operating systems and I want to do

00:01:06,799 --> 00:01:12,530
a comparison between using Debian and

00:01:08,840 --> 00:01:14,060
the Yocto project so let's have a look

00:01:12,530 --> 00:01:20,150
through and see what this is going to be

00:01:14,060 --> 00:01:22,280
about skip their laps at that so a look

00:01:20,150 --> 00:01:26,360
at the dilemma as to which of these two

00:01:22,280 --> 00:01:28,700
you should choose and I'll go through

00:01:26,360 --> 00:01:31,579
the pros and cons I look at Debian first

00:01:28,700 --> 00:01:35,960
then I'll look at Yocto and then I'll

00:01:31,579 --> 00:01:37,520
try and draw some conclusions and I'd be

00:01:35,960 --> 00:01:39,439
happy I hope we have time for some

00:01:37,520 --> 00:01:41,000
questions at the end so if you have

00:01:39,439 --> 00:01:43,520
questions please go ahead and ask them

00:01:41,000 --> 00:01:49,100
on the chat and I'll respond to them

00:01:43,520 --> 00:01:53,090
later so the dilemma so here I am I am

00:01:49,100 --> 00:01:55,070
designing my new gizmo and it's going to

00:01:53,090 --> 00:01:58,520
be running Linux I've decided that which

00:01:55,070 --> 00:02:01,359
linux do I use I want you to work as

00:01:58,520 --> 00:02:05,090
quickly and as effectively as possible

00:02:01,359 --> 00:02:08,990
but I also want to be reversed and

00:02:05,090 --> 00:02:10,340
updatable and maintainable so I know

00:02:08,990 --> 00:02:13,780
there are lots of options out there

00:02:10,340 --> 00:02:13,780
which one do I choose

00:02:14,319 --> 00:02:22,640
so I'm boiling it down to basically two

00:02:18,160 --> 00:02:26,480
two options you can go off the peg and

00:02:22,640 --> 00:02:29,180
use a an existing desktop based distro

00:02:26,480 --> 00:02:33,640
such as Debian or any other destroyed

00:02:29,180 --> 00:02:36,830
your choice Fedora or Susi or whatever

00:02:33,640 --> 00:02:38,420
event is quite popular - they're all

00:02:36,830 --> 00:02:41,270
basically the same in

00:02:38,420 --> 00:02:47,720
they are off the shelf fully ready to

00:02:41,270 --> 00:02:49,880
run distros or you can go bespoke so

00:02:47,720 --> 00:02:51,800
rather than taking something that exists

00:02:49,880 --> 00:02:55,580
already I can build my own distro

00:02:51,800 --> 00:02:57,350
from scratch using Yocto project is the

00:02:55,580 --> 00:02:59,930
most popular but there are other build

00:02:57,350 --> 00:03:08,420
systems including build routes open wrt

00:02:59,930 --> 00:03:11,930
and a few others too so let's look at

00:03:08,420 --> 00:03:13,459
Debian first of all then sew Debian is a

00:03:11,930 --> 00:03:15,800
full distro it's been around for a long

00:03:13,459 --> 00:03:18,380
long time it has many many tens of

00:03:15,800 --> 00:03:22,549
thousands of packages it has a good

00:03:18,380 --> 00:03:24,980
support infrastructure and it comes as a

00:03:22,549 --> 00:03:27,110
bunch of binaries so you don't need to

00:03:24,980 --> 00:03:28,819
mess around cross compiling stuff you

00:03:27,110 --> 00:03:33,580
just install the package as you want and

00:03:28,819 --> 00:03:33,580
you have been ready to go very quickly

00:03:34,930 --> 00:03:41,299
so Debian as an embedded OS it has

00:03:39,620 --> 00:03:46,820
support for a bunch of architectures

00:03:41,299 --> 00:03:50,540
that are useful to us so x86 64 arm v8

00:03:46,820 --> 00:03:53,810
that's the 64-bit ARM distro essentially

00:03:50,540 --> 00:03:58,160
ARM architecture I should say arm HF

00:03:53,810 --> 00:04:02,180
which is arm v7 which is there covers

00:03:58,160 --> 00:04:05,480
all the cortex a series processors in 32

00:04:02,180 --> 00:04:08,750
bits and the old arm e-l which supports

00:04:05,480 --> 00:04:10,940
the arm v40 instruction specs really you

00:04:08,750 --> 00:04:15,290
shouldn't be using that but if you do it

00:04:10,940 --> 00:04:17,660
is still supported and you'll find

00:04:15,290 --> 00:04:21,019
debian as an option on a lot of dev

00:04:17,660 --> 00:04:23,210
boards the most obvious would be

00:04:21,019 --> 00:04:24,830
raspberry pi now recipe pi is slightly

00:04:23,210 --> 00:04:28,330
different to the others in that it has

00:04:24,830 --> 00:04:32,030
its own Debian distribution distribution

00:04:28,330 --> 00:04:34,669
called raspbian which is actually

00:04:32,030 --> 00:04:37,280
compiled for the arm v6 instruction sets

00:04:34,669 --> 00:04:39,320
which is the which makes it compatible

00:04:37,280 --> 00:04:41,810
with the processor used on the first

00:04:39,320 --> 00:04:46,340
Raspberry Pi and is still used today on

00:04:41,810 --> 00:04:50,150
the Raspberry Pi zero if you're using

00:04:46,340 --> 00:04:52,310
bigger boards then yes they all come

00:04:50,150 --> 00:04:54,910
with the Debian distro as an option

00:04:52,310 --> 00:05:03,950
and the same applies to many many other

00:04:54,910 --> 00:05:07,940
dev boards so if you are using Debian

00:05:03,950 --> 00:05:10,430
the typical approach is to take a root

00:05:07,940 --> 00:05:13,490
filesystem which you got with a board

00:05:10,430 --> 00:05:17,990
raspberry and for example and then you

00:05:13,490 --> 00:05:20,600
can use commands like act install to

00:05:17,990 --> 00:05:25,760
install packages so if I do apt

00:05:20,600 --> 00:05:28,640
installed XY said that will go to my the

00:05:25,760 --> 00:05:32,419
list of upstream repositories in my EDC

00:05:28,640 --> 00:05:34,550
app - sources list file it will then

00:05:32,419 --> 00:05:36,830
query the core repository and it will be

00:05:34,550 --> 00:05:40,090
looking for a file typically the name XY

00:05:36,830 --> 00:05:43,820
said underscore some version number

00:05:40,090 --> 00:05:46,820
underscore the architecture and then de

00:05:43,820 --> 00:05:49,610
be dead DB being the package format used

00:05:46,820 --> 00:05:52,040
by Debian and you can do this something

00:05:49,610 --> 00:05:53,960
very very similar with fedora except

00:05:52,040 --> 00:06:02,110
those will be rpms and you'll be doing

00:05:53,960 --> 00:06:06,320
idea D and F installed or something so

00:06:02,110 --> 00:06:08,690
I've got my gizmo I've got my board

00:06:06,320 --> 00:06:12,500
plugged in running Debian now I want the

00:06:08,690 --> 00:06:13,520
system to to be doing stuff so I take

00:06:12,500 --> 00:06:19,600
the off-the-shelf

00:06:13,520 --> 00:06:19,600
distro and then I start installing stuff

00:06:20,260 --> 00:06:24,080
there may be some things in there that I

00:06:22,340 --> 00:06:27,350
definitely don't want so I might want to

00:06:24,080 --> 00:06:32,110
strip out mm-hmm maybe I don't need a

00:06:27,350 --> 00:06:34,640
word processor maybe I don't need the

00:06:32,110 --> 00:06:35,810
media players and such like so I strip

00:06:34,640 --> 00:06:39,620
out all the stuff I don't want because

00:06:35,810 --> 00:06:40,820
it just gets in the way and then I go

00:06:39,620 --> 00:06:41,870
through and install the additional

00:06:40,820 --> 00:06:45,110
things I want

00:06:41,870 --> 00:06:47,539
there are various graphics utilities I

00:06:45,110 --> 00:06:52,850
might need the libraries support for

00:06:47,539 --> 00:06:55,610
various languages and so on I may have

00:06:52,850 --> 00:07:00,169
some code that needs to be compiled

00:06:55,610 --> 00:07:04,820
natively something C and C++ so I'll go

00:07:00,169 --> 00:07:05,930
through and compile those and typically

00:07:04,820 --> 00:07:07,639
I would do that on

00:07:05,930 --> 00:07:10,759
the target board itself because the

00:07:07,639 --> 00:07:13,250
target boss these distros they have a

00:07:10,759 --> 00:07:15,229
full compiler development environment

00:07:13,250 --> 00:07:20,690
they have GCC and G+ plans and

00:07:15,229 --> 00:07:23,780
everything else then add any other

00:07:20,690 --> 00:07:29,270
tweaks startup scripts various other

00:07:23,780 --> 00:07:31,570
configurations and at the end we produce

00:07:29,270 --> 00:07:34,190
an image we call the golden master

00:07:31,570 --> 00:07:36,710
so this golden master now is has

00:07:34,190 --> 00:07:38,840
everything configured correctly it does

00:07:36,710 --> 00:07:47,000
what I want it runs my applications and

00:07:38,840 --> 00:07:49,250
I'm ready to go so I take my golden

00:07:47,000 --> 00:07:51,370
master and then I take a copy of it I

00:07:49,250 --> 00:07:55,220
can just use a simple command like didi

00:07:51,370 --> 00:07:58,610
to take an exact copy of that file in a

00:07:55,220 --> 00:08:00,889
disk image and then just use didi again

00:07:58,610 --> 00:08:04,070
to clone it to all the units that I'm

00:08:00,889 --> 00:08:10,820
shipping so that essentially its job

00:08:04,070 --> 00:08:13,760
done so what can go wrong so the golden

00:08:10,820 --> 00:08:16,310
master wonderful though it is is a

00:08:13,760 --> 00:08:19,550
little bit tricky to reproduce and to

00:08:16,310 --> 00:08:22,610
maintain so first of all the things we

00:08:19,550 --> 00:08:24,349
did a couple of slides back probably we

00:08:22,610 --> 00:08:26,720
never write down exactly what we did

00:08:24,349 --> 00:08:32,539
even if we were fairly meticulous there

00:08:26,720 --> 00:08:33,890
will be some steps that we skipped so if

00:08:32,539 --> 00:08:36,950
we want to make changes to the golden

00:08:33,890 --> 00:08:39,680
master we have to do it incrementally so

00:08:36,950 --> 00:08:41,479
we rebooted the golden master add a

00:08:39,680 --> 00:08:43,490
tweak here and a package change a

00:08:41,479 --> 00:08:47,330
configuration file and then we create a

00:08:43,490 --> 00:08:48,560
new golden master from that that's all

00:08:47,330 --> 00:08:50,600
very fine until we want to make some

00:08:48,560 --> 00:08:52,339
kind of major change so if we want to

00:08:50,600 --> 00:08:54,709
completely replace the golden master

00:08:52,339 --> 00:08:56,779
with a new version based on the later

00:08:54,709 --> 00:08:59,990
version of the underlying operating

00:08:56,779 --> 00:09:01,430
system then that's hard work because we

00:08:59,990 --> 00:09:04,329
then have to go through and reproduce

00:09:01,430 --> 00:09:06,110
all the stages we went through earlier

00:09:04,329 --> 00:09:08,089
remembering that some of them were not

00:09:06,110 --> 00:09:09,529
actually documented so there'll be some

00:09:08,089 --> 00:09:12,350
trial and error and some fitting around

00:09:09,529 --> 00:09:14,959
to get it right so there is a very big

00:09:12,350 --> 00:09:17,480
incentive to stick with the golden

00:09:14,959 --> 00:09:19,900
master has it is using the version that

00:09:17,480 --> 00:09:19,900
was shipped

00:09:20,660 --> 00:09:25,470
not only that when you create such a

00:09:23,490 --> 00:09:28,019
thing as a golden master in this way

00:09:25,470 --> 00:09:30,870
there's usually some kind of fingerprint

00:09:28,019 --> 00:09:34,829
left by the person who created it for

00:09:30,870 --> 00:09:36,779
example there may be some user can user

00:09:34,829 --> 00:09:39,300
accounts and passwords which weren't

00:09:36,779 --> 00:09:43,139
cleaned up there may be some history

00:09:39,300 --> 00:09:46,079
left in the - history file for some of

00:09:43,139 --> 00:09:47,870
those users there may be some log files

00:09:46,079 --> 00:09:50,250
left lying around from previously and

00:09:47,870 --> 00:09:52,740
all of these things can be interesting

00:09:50,250 --> 00:09:59,670
and useful to somebody trying to hack

00:09:52,740 --> 00:10:02,970
into your system so reading the golden

00:09:59,670 --> 00:10:04,980
master is not the best way to do it if

00:10:02,970 --> 00:10:07,949
you really want to use Debian or a

00:10:04,980 --> 00:10:09,959
similar distro for your embedded system

00:10:07,949 --> 00:10:12,660
let's have a look at doing it in a

00:10:09,959 --> 00:10:18,329
slightly better way so we need something

00:10:12,660 --> 00:10:21,360
that's robust and reproducible so

00:10:18,329 --> 00:10:23,100
essentially you can do this after all

00:10:21,360 --> 00:10:24,540
people build Debian the Debian people

00:10:23,100 --> 00:10:27,389
themselves will Debian from scratch so

00:10:24,540 --> 00:10:29,509
it must be possible so you would take a

00:10:27,389 --> 00:10:32,009
thing like rootstock or d bootstrap

00:10:29,509 --> 00:10:35,730
which gives you a minimum minimum

00:10:32,009 --> 00:10:37,829
minimum minimal and Debian image and

00:10:35,730 --> 00:10:39,269
then based on that you would start

00:10:37,829 --> 00:10:43,829
adding in the bits and pieces that you

00:10:39,269 --> 00:10:46,319
need ideally you would do this in a

00:10:43,829 --> 00:10:49,199
scripted way so either use an

00:10:46,319 --> 00:10:52,860
off-the-shelf script or you write your

00:10:49,199 --> 00:10:54,569
own scripts or whatever some examples of

00:10:52,860 --> 00:10:56,490
this would be for example the

00:10:54,569 --> 00:10:59,730
BeagleBoard image builder and there's a

00:10:56,490 --> 00:11:01,019
link there that is essentially the bunch

00:10:59,730 --> 00:11:04,800
of scripts used by the BeagleBoard

00:11:01,019 --> 00:11:07,380
people and similarly for raspberry pi

00:11:04,800 --> 00:11:10,920
and raspberry n' they use whereas we pry

00:11:07,380 --> 00:11:13,769
Jen so you could have a look at either

00:11:10,920 --> 00:11:17,839
one of those and use that as a basis for

00:11:13,769 --> 00:11:22,470
building your own from scratch run once

00:11:17,839 --> 00:11:24,620
script to generate your own debian from

00:11:22,470 --> 00:11:26,699
from the from its component parts and

00:11:24,620 --> 00:11:28,319
that will be much more robust and

00:11:26,699 --> 00:11:30,389
reproducible because you can just run

00:11:28,319 --> 00:11:32,540
the script again change the Debian

00:11:30,389 --> 00:11:41,150
version number for example

00:11:32,540 --> 00:11:42,530
with a few tweaks it would build this is

00:11:41,150 --> 00:11:43,970
slightly off-topic but they just won't

00:11:42,530 --> 00:11:47,060
ever say a quick thing about software

00:11:43,970 --> 00:11:49,690
updates so this is a common thing we

00:11:47,060 --> 00:11:51,710
need once we start shipping our products

00:11:49,690 --> 00:11:53,420
chances are we're going to want to be

00:11:51,710 --> 00:11:56,420
able to update them either over-the-air

00:11:53,420 --> 00:11:58,280
or even just directly using a USB stick

00:11:56,420 --> 00:12:02,980
and just going around and updating each

00:11:58,280 --> 00:12:06,530
individual machine so how do we do that

00:12:02,980 --> 00:12:09,350
so with debian and similar distros it

00:12:06,530 --> 00:12:13,310
will seem to be fairly easy you just run

00:12:09,350 --> 00:12:15,650
out update to update to go to a later

00:12:13,310 --> 00:12:21,140
version and you can app guess any

00:12:15,650 --> 00:12:22,820
additional packages that you want but be

00:12:21,140 --> 00:12:24,880
aware that this is not a complete

00:12:22,820 --> 00:12:28,940
solution or at least not in all cases

00:12:24,880 --> 00:12:31,400
the problem with package based update is

00:12:28,940 --> 00:12:38,150
that the updates themselves are not

00:12:31,400 --> 00:12:40,040
atomic which means that excuse me which

00:12:38,150 --> 00:12:42,620
means that if you're in for example you

00:12:40,040 --> 00:12:45,050
lose power or the system resets halfway

00:12:42,620 --> 00:12:46,220
through an update there's a good chance

00:12:45,050 --> 00:12:49,130
you'll end up with a corrupted system

00:12:46,220 --> 00:12:54,200
which will either not boot or boot and

00:12:49,130 --> 00:12:57,470
not run the app anymore there are many

00:12:54,200 --> 00:13:00,200
solutions to this you can do a full

00:12:57,470 --> 00:13:01,490
image update exactly as you would do

00:13:00,200 --> 00:13:04,370
with the octave project as we're going

00:13:01,490 --> 00:13:05,600
to come on to in a few minutes you can

00:13:04,370 --> 00:13:08,870
also do some clever things with

00:13:05,600 --> 00:13:10,850
containers and flat packs and snappy as

00:13:08,870 --> 00:13:12,320
and all that kind of stuff however I

00:13:10,850 --> 00:13:15,590
just want to point out that if you using

00:13:12,320 --> 00:13:23,570
Debian package update is probably not

00:13:15,590 --> 00:13:24,890
what you're going to be wanting so what

00:13:23,570 --> 00:13:28,760
else is wrong with them with a Debian

00:13:24,890 --> 00:13:30,590
approach it does tend to build larger

00:13:28,760 --> 00:13:33,530
images than if you do the same thing

00:13:30,590 --> 00:13:35,810
with your - and that's because the

00:13:33,530 --> 00:13:38,350
Debian images are meant to be generic

00:13:35,810 --> 00:13:40,820
and to work on a wide range of systems

00:13:38,350 --> 00:13:43,370
and so inevitably they have stuff that's

00:13:40,820 --> 00:13:45,890
common to a large number of their use

00:13:43,370 --> 00:13:46,430
cases but which may not be needed in

00:13:45,890 --> 00:13:52,370
your particular

00:13:46,430 --> 00:13:54,800
use case and that means more software

00:13:52,370 --> 00:13:56,450
means more attack vectors it means

00:13:54,800 --> 00:13:57,800
there's more software to protect there's

00:13:56,450 --> 00:14:00,070
more things there are more things that

00:13:57,800 --> 00:14:00,070
can go wrong

00:14:02,390 --> 00:14:11,720
also the distro repositories although

00:14:08,540 --> 00:14:13,910
they do support typically ARM processors

00:14:11,720 --> 00:14:16,760
and those of their plan various other

00:14:13,910 --> 00:14:19,850
CPU architectures they usually use a

00:14:16,760 --> 00:14:21,620
common denominator approach so for

00:14:19,850 --> 00:14:25,520
example with raspberry n' we just looked

00:14:21,620 --> 00:14:27,620
at that is compiled for arm v6 for

00:14:25,520 --> 00:14:30,459
compatibility reasons with the raspberry

00:14:27,620 --> 00:14:34,810
pi one but it does mean that you're not

00:14:30,459 --> 00:14:37,430
using the the OS as exactly as it is

00:14:34,810 --> 00:14:39,170
it's not taking advantage of the

00:14:37,430 --> 00:14:41,690
instruction sets of the later versions

00:14:39,170 --> 00:14:46,600
of largely PI's it's just using the

00:14:41,690 --> 00:14:46,600
subset that is compatible with arm v6

00:14:49,940 --> 00:14:54,890
next up the these operating systems are

00:14:53,209 --> 00:14:58,250
not really optimized for using flash

00:14:54,890 --> 00:15:01,339
memory they still believe that they are

00:14:58,250 --> 00:15:02,600
running on hard drives and so they will

00:15:01,339 --> 00:15:04,730
do a lot of stuff there with a lot of

00:15:02,600 --> 00:15:08,420
disk writes and eventually that's going

00:15:04,730 --> 00:15:12,830
to wear out the flash memory the worst

00:15:08,420 --> 00:15:16,100
case here is log files log files are

00:15:12,830 --> 00:15:18,470
really bad for a flash memory the

00:15:16,100 --> 00:15:20,930
problem is that whenever you do a write

00:15:18,470 --> 00:15:23,360
to a log file usually they're quite

00:15:20,930 --> 00:15:24,890
short writes small writes that you then

00:15:23,360 --> 00:15:26,870
have to do a flash to make sure that the

00:15:24,890 --> 00:15:29,329
log information got written to the

00:15:26,870 --> 00:15:31,370
underlying storage and every time you do

00:15:29,329 --> 00:15:34,430
that you're going to be forcing the

00:15:31,370 --> 00:15:37,880
flash disk controller to do an erase

00:15:34,430 --> 00:15:40,579
cycle and and as you're ready to commit

00:15:37,880 --> 00:15:42,320
it to flash memory and as you may know

00:15:40,579 --> 00:15:44,420
flash memory you can only do a certain

00:15:42,320 --> 00:15:48,170
number of array cycles before it goes

00:15:44,420 --> 00:15:50,420
bad on modern flash drives is quite a

00:15:48,170 --> 00:15:57,760
small number it's about three thousand

00:15:50,420 --> 00:16:00,040
erases typically for each cell so yep

00:15:57,760 --> 00:16:03,690
who just come back to the topic then so

00:16:00,040 --> 00:16:05,830
like writing lots of log small log files

00:16:03,690 --> 00:16:08,890
sorry writing a lot files with lots of

00:16:05,830 --> 00:16:10,630
small writes will tend to wear out flash

00:16:08,890 --> 00:16:12,730
memory so one of things you may we need

00:16:10,630 --> 00:16:15,510
to do is to go and disable or

00:16:12,730 --> 00:16:17,380
rationalize the login for example

00:16:15,510 --> 00:16:19,930
another thing would be for it would be

00:16:17,380 --> 00:16:26,650
swapping you really don't want to swap

00:16:19,930 --> 00:16:30,490
on to flash memory and then the last

00:16:26,650 --> 00:16:33,280
thing on this topic then yeah if you're

00:16:30,490 --> 00:16:35,340
not using a cross compiler then you're

00:16:33,280 --> 00:16:37,390
going to have to compile on the target

00:16:35,340 --> 00:16:38,890
which in some ways is nice and easy

00:16:37,390 --> 00:16:40,360
because you just install the

00:16:38,890 --> 00:16:43,140
dev fly but you need and run the

00:16:40,360 --> 00:16:44,920
compiler but it is going to be slow and

00:16:43,140 --> 00:16:48,310
you're probably going to run out of

00:16:44,920 --> 00:16:51,340
memory so you may have to set up some

00:16:48,310 --> 00:16:57,700
swapping to some some des storage

00:16:51,340 --> 00:17:00,730
somewhere oh yeah and don't forget that

00:16:57,700 --> 00:17:03,250
the distros generally just cover the

00:17:00,730 --> 00:17:04,600
base operating system you will probably

00:17:03,250 --> 00:17:06,490
still have to build the bootloader

00:17:04,600 --> 00:17:08,709
whichever that may be you book for

00:17:06,490 --> 00:17:12,130
example and the kernel and the kernel

00:17:08,709 --> 00:17:14,380
modules depends on the distro if you're

00:17:12,130 --> 00:17:16,270
using a distro such as Debu such as

00:17:14,380 --> 00:17:19,990
raspberry and rather that indeed will

00:17:16,270 --> 00:17:21,940
update the kernel and you boot within

00:17:19,990 --> 00:17:28,900
general case you'll have to add any that

00:17:21,940 --> 00:17:32,740
in yourself okay so that's the debian

00:17:28,900 --> 00:17:35,530
side of the story let's have a look at

00:17:32,740 --> 00:17:39,910
the open embedded and Yocto side of the

00:17:35,530 --> 00:17:43,060
story so the idea of Yocto project is

00:17:39,910 --> 00:17:47,410
that you create a distro from scratch

00:17:43,060 --> 00:17:49,330
you give a set of rules and it will then

00:17:47,410 --> 00:17:54,190
go and generate whatever you have you

00:17:49,330 --> 00:17:56,290
have special specified and it builds

00:17:54,190 --> 00:17:59,080
everything from the source code so

00:17:56,290 --> 00:18:02,080
rather than using precompiled binaries

00:17:59,080 --> 00:18:04,750
as with a regular distro we're going to

00:18:02,080 --> 00:18:07,360
be taking the upstream source and across

00:18:04,750 --> 00:18:09,520
compiling it for whichever target you

00:18:07,360 --> 00:18:10,809
have selected

00:18:09,520 --> 00:18:13,600
this has the advantage that we can

00:18:10,809 --> 00:18:17,830
optimize for the processor architecture

00:18:13,600 --> 00:18:18,820
we're going to be running on and yeah we

00:18:17,830 --> 00:18:26,890
have complete control over the whole

00:18:18,820 --> 00:18:29,920
thing Yocto project is pretty well

00:18:26,890 --> 00:18:33,040
supported it has been very successful

00:18:29,920 --> 00:18:36,420
over the last 10 years in getting

00:18:33,040 --> 00:18:40,720
support from the main processor

00:18:36,420 --> 00:18:43,090
manufacturers its supports all the main

00:18:40,720 --> 00:18:48,040
architectures MIPS probably seen a few

00:18:43,090 --> 00:18:50,080
others and there's also commercial

00:18:48,040 --> 00:18:51,429
support available from a whole bunch of

00:18:50,080 --> 00:18:59,910
other people including the ones

00:18:51,429 --> 00:19:03,820
mentioned on the slide so going to

00:18:59,910 --> 00:19:04,840
building your your your root fastest in

00:19:03,820 --> 00:19:06,610
your distro

00:19:04,840 --> 00:19:11,140
the way you do this with Yocto project

00:19:06,610 --> 00:19:13,720
is the Yocto project basically is a

00:19:11,140 --> 00:19:16,510
bunch of metadata information about how

00:19:13,720 --> 00:19:21,670
to build things and the most important

00:19:16,510 --> 00:19:25,750
part of those are recipes and then there

00:19:21,670 --> 00:19:27,820
is a tool called bitbake which given

00:19:25,750 --> 00:19:29,770
some global configuration files saying

00:19:27,820 --> 00:19:34,090
what kind of thing you want to build you

00:19:29,770 --> 00:19:36,730
can bitbake a package and bitbake will

00:19:34,090 --> 00:19:38,770
then read the metadata it will download

00:19:36,730 --> 00:19:41,260
the source code from wherever the source

00:19:38,770 --> 00:19:45,460
code comes from typically that will be

00:19:41,260 --> 00:19:47,800
at our dot gz file and from that it

00:19:45,460 --> 00:19:49,809
actually generates a package in my

00:19:47,800 --> 00:19:52,150
diagram I showed it showing it as being

00:19:49,809 --> 00:19:56,230
an RPM file but you can actually change

00:19:52,150 --> 00:20:01,540
the packaging format to be Debian or ipk

00:19:56,230 --> 00:20:03,910
if you so wish but those packages are

00:20:01,540 --> 00:20:06,340
really only used for build time they're

00:20:03,910 --> 00:20:09,309
not really intended for run time

00:20:06,340 --> 00:20:13,000
installation so the final stage of

00:20:09,309 --> 00:20:17,919
building a Yocto or open embedded system

00:20:13,000 --> 00:20:19,330
is a task called do route FS and that

00:20:17,919 --> 00:20:21,130
will take a list of all the packages

00:20:19,330 --> 00:20:23,350
that you want to put into the final root

00:20:21,130 --> 00:20:25,630
filesystem it will extract the

00:20:23,350 --> 00:20:28,299
information it needs from the RPM file

00:20:25,630 --> 00:20:31,150
and it will create the root filesystem

00:20:28,299 --> 00:20:32,950
for you and then that is your goal

00:20:31,150 --> 00:20:34,360
whatever I was gonna say golden master

00:20:32,950 --> 00:20:35,020
it's wrong thing that is your root

00:20:34,360 --> 00:20:37,210
filesystem

00:20:35,020 --> 00:20:42,120
you will then install that on your

00:20:37,210 --> 00:20:42,120
target hardware and away you go

00:20:44,640 --> 00:20:48,910
so I just want talk a little bit about

00:20:47,350 --> 00:20:51,210
the metadata just to give you a bit of

00:20:48,910 --> 00:20:55,000
insight as to how this all works so

00:20:51,210 --> 00:20:57,400
there are three main variables

00:20:55,000 --> 00:21:02,110
associated with generating a Yocto

00:20:57,400 --> 00:21:06,929
project distro Yocto project project

00:21:02,110 --> 00:21:09,400
image they are machine distro and image

00:21:06,929 --> 00:21:11,140
so the distro area ball is literally a

00:21:09,400 --> 00:21:14,230
variable called distro equals and you

00:21:11,140 --> 00:21:19,120
give the name of the distro you want the

00:21:14,230 --> 00:21:21,220
distro is controls the basic policy of

00:21:19,120 --> 00:21:22,720
how we want to put things together so

00:21:21,220 --> 00:21:24,630
what kind of in its this node you want

00:21:22,720 --> 00:21:29,409
to use is it going to be system D or

00:21:24,630 --> 00:21:30,940
system v do you want to use the latest

00:21:29,409 --> 00:21:33,309
version of everything or you want to use

00:21:30,940 --> 00:21:38,470
more conservative version control and so

00:21:33,309 --> 00:21:42,429
on and so on the next one the machine

00:21:38,470 --> 00:21:45,820
this has information about the target

00:21:42,429 --> 00:21:50,860
hardware so it will have information

00:21:45,820 --> 00:21:54,880
like what architecture it is what tuning

00:21:50,860 --> 00:21:57,850
flags you use for GCC which bootloader

00:21:54,880 --> 00:21:59,679
you're going to be using and the file

00:21:57,850 --> 00:22:06,100
system layout and that kind of stuff so

00:21:59,679 --> 00:22:09,580
all low-level machine based stuff and

00:22:06,100 --> 00:22:11,559
then the third variable is the image so

00:22:09,580 --> 00:22:15,510
an image essentially is a list of

00:22:11,559 --> 00:22:15,510
packages quite a long list of packages

00:22:16,110 --> 00:22:21,760
of this of the software languages

00:22:19,630 --> 00:22:24,520
libraries etc that I want to be

00:22:21,760 --> 00:22:26,650
installed into my root filesystem and

00:22:24,520 --> 00:22:28,900
the nice thing about these three

00:22:26,650 --> 00:22:31,360
variables is they are independent

00:22:28,900 --> 00:22:35,270
variables so I can change any one of

00:22:31,360 --> 00:22:37,700
those three things and

00:22:35,270 --> 00:22:41,150
I'll get a I can build using that so for

00:22:37,700 --> 00:22:43,790
example if i have two different dev

00:22:41,150 --> 00:22:45,290
boards or target boards i can just

00:22:43,790 --> 00:22:47,690
change the machine variable for each one

00:22:45,290 --> 00:22:49,910
of them leave the district and the image

00:22:47,690 --> 00:22:52,340
the same and i will get the same

00:22:49,910 --> 00:22:53,870
operating system compiled for each of

00:22:52,340 --> 00:22:55,280
those two boards and it could be

00:22:53,870 --> 00:22:58,010
completely different architectures one

00:22:55,280 --> 00:23:01,700
could be x86 one could be an ARM based

00:22:58,010 --> 00:23:05,360
system likewise if I have a sponge of

00:23:01,700 --> 00:23:08,450
images maybe a dev image for development

00:23:05,360 --> 00:23:11,390
and debugging a production image an

00:23:08,450 --> 00:23:13,940
image for a particular customer then I

00:23:11,390 --> 00:23:16,540
just need to create the image variable

00:23:13,940 --> 00:23:18,860
for that the image recipe for that and

00:23:16,540 --> 00:23:21,650
then I can keep the distro in the

00:23:18,860 --> 00:23:23,929
machine the same and just pump out the

00:23:21,650 --> 00:23:26,260
images for the different target use

00:23:23,929 --> 00:23:30,140
cases so the whole thing is very

00:23:26,260 --> 00:23:39,350
scalable it's easy to customize once you

00:23:30,140 --> 00:23:40,940
have the basic system setup there are

00:23:39,350 --> 00:23:44,510
some downsides from all of this got to

00:23:40,940 --> 00:23:51,400
say so everybody says learning yocto

00:23:44,510 --> 00:23:51,400
project is is tricky and it kind of is

00:23:51,910 --> 00:23:57,290
it's it's hard to say so yeah you've got

00:23:56,120 --> 00:23:58,580
to put some effort into doing this stuff

00:23:57,290 --> 00:24:00,470
it's not just a question of doing a few

00:23:58,580 --> 00:24:02,450
apt-get so you can with debian you've

00:24:00,470 --> 00:24:04,429
got to understand the system to some

00:24:02,450 --> 00:24:06,650
degree in order to set those variables

00:24:04,429 --> 00:24:08,000
up so yeah you've got to invest a bit of

00:24:06,650 --> 00:24:13,520
time and effort in understanding how

00:24:08,000 --> 00:24:14,750
your code works the support window this

00:24:13,520 --> 00:24:20,420
has just got better actually

00:24:14,750 --> 00:24:22,580
so the octo project now has starting the

00:24:20,420 --> 00:24:23,990
end of April the end of this month there

00:24:22,580 --> 00:24:27,800
will be the first long-term support

00:24:23,990 --> 00:24:31,010
release of your project and that will be

00:24:27,800 --> 00:24:33,170
supported for two years nevertheless

00:24:31,010 --> 00:24:35,780
that is still shorter than the support

00:24:33,170 --> 00:24:38,540
window you get with a typical distro

00:24:35,780 --> 00:24:42,740
such as Debian the Debian long-term

00:24:38,540 --> 00:24:44,809
support team will actually support the

00:24:42,740 --> 00:24:49,010
operating system for five years

00:24:44,809 --> 00:24:50,600
typically so you'll need to have a plan

00:24:49,010 --> 00:24:52,250
as to how you're going to bridge about

00:24:50,600 --> 00:24:58,490
how you're going to support your your

00:24:52,250 --> 00:25:00,650
operating system into the future when I

00:24:58,490 --> 00:25:02,059
should say on that you can do that

00:25:00,650 --> 00:25:04,940
yourself there are also a lot of

00:25:02,059 --> 00:25:07,250
commercial organizations including the

00:25:04,940 --> 00:25:10,309
ones I mentioned earlier such as any

00:25:07,250 --> 00:25:12,440
time sis and a few others that will give

00:25:10,309 --> 00:25:18,590
you professional support for this for

00:25:12,440 --> 00:25:22,130
Yocto project the next issue the process

00:25:18,590 --> 00:25:24,830
of building a Yocto image is quite

00:25:22,130 --> 00:25:27,470
lengthy and at least the first time you

00:25:24,830 --> 00:25:29,900
do it it's going to take some hours and

00:25:27,470 --> 00:25:31,429
it's going to take a fairly it's going

00:25:29,900 --> 00:25:34,040
to require a fairly powerful computer to

00:25:31,429 --> 00:25:36,410
do that so you will need to have the

00:25:34,040 --> 00:25:41,260
hardware available to do this and to run

00:25:36,410 --> 00:25:41,260
these builds on a fairly regular basis

00:25:44,679 --> 00:25:52,460
ok so that's the two alternatives Debian

00:25:49,549 --> 00:25:54,620
or similar distro versus building from

00:25:52,460 --> 00:26:00,440
scratch using open embedded and Yocto

00:25:54,620 --> 00:26:03,980
project so now I want to try and build

00:26:00,440 --> 00:26:06,400
some conclusions from all of that so I

00:26:03,980 --> 00:26:10,309
would like to say then that for Debian

00:26:06,400 --> 00:26:12,140
the real advantage from Devon really is

00:26:10,309 --> 00:26:15,770
that you can build the system and have

00:26:12,140 --> 00:26:19,490
it up and running very very quickly so

00:26:15,770 --> 00:26:24,290
Debian is great for proof of concept is

00:26:19,490 --> 00:26:28,130
great for prototypes it's going for

00:26:24,290 --> 00:26:33,520
one-off projects where you're not going

00:26:28,130 --> 00:26:35,630
to be disputing huge numbers of them and

00:26:33,520 --> 00:26:37,580
it's also great if you're using

00:26:35,630 --> 00:26:41,650
commodity hardware such as raspberry

00:26:37,580 --> 00:26:41,650
PI's beaglebones bila boards etc

00:26:44,950 --> 00:26:51,380
correspondingly then I would recommend

00:26:47,150 --> 00:26:54,770
Yocto project if you are designing your

00:26:51,380 --> 00:26:57,860
own hardware and you want to create a

00:26:54,770 --> 00:27:00,610
distro for it from scratch your project

00:26:57,860 --> 00:27:00,610
does exactly that

00:27:01,970 --> 00:27:07,030
with Yocto you can actually lock the

00:27:03,559 --> 00:27:09,710
system down very effectively doctors

00:27:07,030 --> 00:27:12,950
root file systems tend to be quite small

00:27:09,710 --> 00:27:15,020
and tend to have only the the exact

00:27:12,950 --> 00:27:22,970
software that you need so you have the

00:27:15,020 --> 00:27:25,309
reduced attack surface and the people

00:27:22,970 --> 00:27:26,540
writing the recipes for Yocto project

00:27:25,309 --> 00:27:29,900
and openembedded

00:27:26,540 --> 00:27:32,960
do tend to be from the embedded

00:27:29,900 --> 00:27:37,760
community and so they will have in mind

00:27:32,960 --> 00:27:40,820
optimizing for to reduce disk space to

00:27:37,760 --> 00:27:42,590
reduce storage rights and yeah basically

00:27:40,820 --> 00:27:49,850
do things you need for an embedded

00:27:42,590 --> 00:27:51,950
system one little handy thing that Yocto

00:27:49,850 --> 00:27:56,170
and similar things do is they all have

00:27:51,950 --> 00:27:58,970
an option to generate a license manifest

00:27:56,170 --> 00:28:01,070
so you just run the appropriate command

00:27:58,970 --> 00:28:03,440
and that gives you a list of all the

00:28:01,070 --> 00:28:05,090
open-source licenses that you are using

00:28:03,440 --> 00:28:11,270
in that pettite to build that particular

00:28:05,090 --> 00:28:13,429
image so that's handy when you want to

00:28:11,270 --> 00:28:16,360
do your due diligence and say well

00:28:13,429 --> 00:28:19,550
exactly which licenses are we using here

00:28:16,360 --> 00:28:22,550
for example gplv3 can be an issue in

00:28:19,550 --> 00:28:25,340
some cases so this gives you that

00:28:22,550 --> 00:28:28,660
information office directly you can do

00:28:25,340 --> 00:28:31,730
of course a similar thing with Debian

00:28:28,660 --> 00:28:34,190
distros you can go through and extract

00:28:31,730 --> 00:28:35,780
all the lines and says but to my

00:28:34,190 --> 00:28:41,510
knowledge there isn't a way to do that

00:28:35,780 --> 00:28:43,429
very very easily okay and that is

00:28:41,510 --> 00:28:45,500
literally it so I've actually gone

00:28:43,429 --> 00:28:49,940
through this talk about twice as fast as

00:28:45,500 --> 00:28:54,260
I thought I would so we are into the

00:28:49,940 --> 00:28:56,890
question time then and okay thank you

00:28:54,260 --> 00:29:00,260
very much for this exhaustive comparison

00:28:56,890 --> 00:29:02,900
I myself have been using yogurt at work

00:29:00,260 --> 00:29:06,710
for at least six years or something and

00:29:02,900 --> 00:29:10,070
I can really say I'm a fan we do have

00:29:06,710 --> 00:29:12,950
two questions here

00:29:10,070 --> 00:29:15,910
the first one is it seems that the

00:29:12,950 --> 00:29:19,430
ahktar can produce a Deb based systems

00:29:15,910 --> 00:29:26,150
how would that compare to Debian can you

00:29:19,430 --> 00:29:30,200
merge those two worlds no is a simple

00:29:26,150 --> 00:29:31,940
answer though Yocto does not create Deb

00:29:30,200 --> 00:29:37,100
Deb a systems in the way that you're

00:29:31,940 --> 00:29:38,570
thinking so it as a so done on the

00:29:37,100 --> 00:29:41,180
diagram mm-hmm

00:29:38,570 --> 00:29:43,220
the bitbake takes the the upstream

00:29:41,180 --> 00:29:46,510
source code and produces packages from

00:29:43,220 --> 00:29:49,430
it usually in RPM format you can also

00:29:46,510 --> 00:29:51,050
set it to be dead

00:29:49,430 --> 00:29:53,570
but that doesn't mean to say that is a

00:29:51,050 --> 00:29:56,870
Debian operating system it just means

00:29:53,570 --> 00:29:59,150
it's using Deb as a packaging format it

00:29:56,870 --> 00:30:01,340
is in no way a Debian operating system

00:29:59,150 --> 00:30:05,720
so the answer is no you can't merge

00:30:01,340 --> 00:30:09,650
those okay then let's go to the second

00:30:05,720 --> 00:30:12,140
question in Debian's less raspbian you

00:30:09,650 --> 00:30:15,770
can use apt-get to install additional

00:30:12,140 --> 00:30:21,620
software from their project servers how

00:30:15,770 --> 00:30:24,110
would you do that with dr. so there is

00:30:21,620 --> 00:30:27,470
an option with the octo project to

00:30:24,110 --> 00:30:30,250
install a package manager which can

00:30:27,470 --> 00:30:33,350
either be RPM based or or Debian based

00:30:30,250 --> 00:30:35,450
so it's just another component of the

00:30:33,350 --> 00:30:38,920
software and once you've installed that

00:30:35,450 --> 00:30:45,380
you can then do for example how to get

00:30:38,920 --> 00:30:47,240
from your Yocto project history but then

00:30:45,380 --> 00:30:50,000
you need your own service or how does it

00:30:47,240 --> 00:30:52,100
work well okay yes so that that's the

00:30:50,000 --> 00:30:55,160
front end so yes you would of course

00:30:52,100 --> 00:30:58,070
need a back end so you would put the

00:30:55,160 --> 00:31:01,060
packages that you want to update on to

00:30:58,070 --> 00:31:03,410
your own server you would set your

00:31:01,060 --> 00:31:06,620
sources that list to point to your own

00:31:03,410 --> 00:31:10,190
server and it would then when you enact

00:31:06,620 --> 00:31:13,549
upgrade or not installed it would

00:31:10,190 --> 00:31:16,960
download from your servers

00:31:13,549 --> 00:31:19,909
and resolve all the versions

00:31:16,960 --> 00:31:22,429
compatibilities and so on yes it would

00:31:19,909 --> 00:31:25,159
do the the normal dependency checking

00:31:22,429 --> 00:31:27,409
and it would install dependencies in the

00:31:25,159 --> 00:31:29,119
normal way however I would like to say

00:31:27,409 --> 00:31:33,619
you probably don't want to do this this

00:31:29,119 --> 00:31:37,879
is not the recommended way okay thank

00:31:33,619 --> 00:31:42,320
you then to be asked asks what if you

00:31:37,879 --> 00:31:46,009
install something like meander slash f/w

00:31:42,320 --> 00:31:48,049
update on the Debian based systems is it

00:31:46,009 --> 00:31:54,470
possible to combine the best of those

00:31:48,049 --> 00:31:59,419
the two worlds I'm not entirely sure I

00:31:54,470 --> 00:32:03,080
understand the question so semaine data

00:31:59,419 --> 00:32:07,450
i/o is one of several update mechanisms

00:32:03,080 --> 00:32:07,450
commonly used on embedded systems and

00:32:07,690 --> 00:32:14,749
the way does the update essentially is

00:32:10,489 --> 00:32:18,289
using a full image update so you

00:32:14,749 --> 00:32:20,450
typically have two partitions set aside

00:32:18,289 --> 00:32:22,340
for the root filesystem the one you're

00:32:20,450 --> 00:32:24,799
using live and the one that's ready for

00:32:22,340 --> 00:32:27,559
updates when you apply the update you

00:32:24,799 --> 00:32:29,450
apply it to the second or the B imager

00:32:27,559 --> 00:32:31,399
to call it and then you tell the boot

00:32:29,450 --> 00:32:32,869
loaders a swap a and B over so the next

00:32:31,399 --> 00:32:38,989
time you boot you boot into the new

00:32:32,869 --> 00:32:41,299
image and that works for octo project

00:32:38,989 --> 00:32:42,999
and for Debian based systems and there's

00:32:41,299 --> 00:32:48,259
other things as well

00:32:42,999 --> 00:32:49,239
so I don't fully understand the meaning

00:32:48,259 --> 00:32:52,789
of the question

00:32:49,239 --> 00:32:56,509
but you can do you can use meander image

00:32:52,789 --> 00:32:58,639
based update and other mechanisms on

00:32:56,509 --> 00:33:07,730
both Yocto project and Debian based

00:32:58,639 --> 00:33:15,039
systems okay hopefully to the person who

00:33:07,730 --> 00:33:15,039
asked please please ask a question okay

00:33:15,070 --> 00:33:22,480
so yeah once it shows up but that was

00:33:20,059 --> 00:33:26,139
all the questions for now at least

00:33:22,480 --> 00:33:26,139
thank you again and

00:33:26,740 --> 00:33:32,830
yeah thank you're not it was very nice

00:33:30,320 --> 00:33:32,830
having you here

00:33:34,020 --> 00:33:38,370
and with that I would like to thank our

00:33:36,420 --> 00:33:40,790
speakers our sponsors and all our

00:33:38,370 --> 00:33:40,790
viewers

00:33:46,559 --> 00:33:48,620

YouTube URL: https://www.youtube.com/watch?v=95xrN2rI7-0


