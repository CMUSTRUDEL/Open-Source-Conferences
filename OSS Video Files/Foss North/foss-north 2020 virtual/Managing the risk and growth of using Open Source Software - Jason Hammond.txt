Title: Managing the risk and growth of using Open Source Software - Jason Hammond
Publication date: 2021-01-09
Playlist: foss-north 2020 virtual
Description: 
	Talk details: https://foss-north.se/2020/speakers-and-talks.html#jhammond
Conference details: https://foss-north.se/2020/
Captions: 
	00:00:00,030 --> 00:00:05,730
welcome to force north the virtual

00:00:02,879 --> 00:00:08,010
edition we would like to thank all our

00:00:05,730 --> 00:00:12,059
sponsors and partners in this difficult

00:00:08,010 --> 00:00:15,559
situation our gold sponsors look soft

00:00:12,059 --> 00:00:19,700
and ansible by Red Hat

00:00:15,559 --> 00:00:21,940
our silver sponsors ITRs group and make

00:00:19,700 --> 00:00:25,610
it right

00:00:21,940 --> 00:00:28,670
our base sponsors

00:00:25,610 --> 00:00:30,860
our partner projects the open source

00:00:28,670 --> 00:00:33,950
community and the region of Gothenburg

00:00:30,860 --> 00:00:35,930
and a huge thanks to our awesome

00:00:33,950 --> 00:00:40,430
community this would not have been

00:00:35,930 --> 00:00:43,430
possible without you so welcome to the

00:00:40,430 --> 00:00:45,620
next session this will be a pre-recorded

00:00:43,430 --> 00:00:47,800
session by Jason Hammond about managing

00:00:45,620 --> 00:00:50,989
risk and growth in open source software

00:00:47,800 --> 00:00:53,960
Jason will be available for in the Q&A

00:00:50,989 --> 00:00:58,480
session after the pre-recorded session

00:00:53,960 --> 00:01:03,130
so ask your questions and prepare for an

00:00:58,480 --> 00:01:03,130
interactive session afterwards enjoy

00:01:05,020 --> 00:01:09,590
hello thank you for joining today's

00:01:07,579 --> 00:01:12,289
webinar from white source software and

00:01:09,590 --> 00:01:14,780
sinigang on the topic of managing the

00:01:12,289 --> 00:01:17,570
risk and growth of using open source

00:01:14,780 --> 00:01:19,340
software my name is Jason Hammond and

00:01:17,570 --> 00:01:21,770
I'm director of solution solutions

00:01:19,340 --> 00:01:27,470
engineering for channels at white source

00:01:21,770 --> 00:01:30,079
software during today's webinar we will

00:01:27,470 --> 00:01:32,600
cover the following topics the growth of

00:01:30,079 --> 00:01:35,979
open source software use the business

00:01:32,600 --> 00:01:41,200
risks of open source software use and

00:01:35,979 --> 00:01:41,200
best practices for managing these risks

00:01:41,229 --> 00:01:49,630
so let's talk about the first challenge

00:01:44,259 --> 00:01:49,630
open source software use and its growth

00:01:50,649 --> 00:01:55,159
you simply can't develop software

00:01:53,060 --> 00:01:57,560
today's pace without using open source

00:01:55,159 --> 00:02:00,200
software it's become a necessity and

00:01:57,560 --> 00:02:01,819
that's great open source enables

00:02:00,200 --> 00:02:05,000
companies to build better products

00:02:01,819 --> 00:02:06,500
faster after all why should you reinvent

00:02:05,000 --> 00:02:10,009
the wheel and you can just go download

00:02:06,500 --> 00:02:11,870
that wheel from github as a result the

00:02:10,009 --> 00:02:14,209
use of open source software used by

00:02:11,870 --> 00:02:16,640
companies is growing white source

00:02:14,209 --> 00:02:18,350
software's analysis shows that 60 to 80

00:02:16,640 --> 00:02:22,310
percent of an average applications

00:02:18,350 --> 00:02:24,530
codebase is comprised of open source but

00:02:22,310 --> 00:02:27,650
the fact that your team didn't write the

00:02:24,530 --> 00:02:30,170
majority of the code doesn't mean that

00:02:27,650 --> 00:02:32,389
it is not your responsibility to ensure

00:02:30,170 --> 00:02:34,760
that the components in your products are

00:02:32,389 --> 00:02:37,040
secure and compliant with your company's

00:02:34,760 --> 00:02:39,470
policies in order to meet this

00:02:37,040 --> 00:02:41,780
responsibility you need to establish a

00:02:39,470 --> 00:02:44,690
reliable inventory of all open source

00:02:41,780 --> 00:02:46,100
libraries used in your applications you

00:02:44,690 --> 00:02:48,019
need to identify the knowns

00:02:46,100 --> 00:02:50,510
vulnerabilities of those libraries and

00:02:48,019 --> 00:02:53,060
you need to make sure the open source

00:02:50,510 --> 00:02:57,650
libraries you are using are compliant

00:02:53,060 --> 00:03:00,609
with your company's policies but it's

00:02:57,650 --> 00:03:02,720
not that easy the problem is that

00:03:00,609 --> 00:03:05,209
verifying that each and every component

00:03:02,720 --> 00:03:07,849
is secure and complies with your

00:03:05,209 --> 00:03:11,269
company's policies is becoming

00:03:07,849 --> 00:03:13,489
increasingly complex that's because

00:03:11,269 --> 00:03:15,229
information about open source components

00:03:13,489 --> 00:03:17,630
is scattered across hundreds of sources

00:03:15,229 --> 00:03:20,150
with varied levels of credibility

00:03:17,630 --> 00:03:23,870
and most databases on the Internet are

00:03:20,150 --> 00:03:25,640
not easily searchable in addition it can

00:03:23,870 --> 00:03:27,620
take a tremendous amount of manpower to

00:03:25,640 --> 00:03:29,960
do the research required to analyze the

00:03:27,620 --> 00:03:31,700
vulnerability and license information of

00:03:29,960 --> 00:03:35,290
all of the open-source libraries across

00:03:31,700 --> 00:03:38,390
all of your company's applications and

00:03:35,290 --> 00:03:41,890
is only getting more and more chaotic

00:03:38,390 --> 00:03:44,540
it's not getting any easier why is this

00:03:41,890 --> 00:03:46,550
well in recent years we've seen a spike

00:03:44,540 --> 00:03:48,470
in the number of reported open source

00:03:46,550 --> 00:03:51,590
vulnerabilities as awareness of these

00:03:48,470 --> 00:03:54,080
vulnerabilities Rises there is also the

00:03:51,590 --> 00:03:56,420
fact that as open source projects mature

00:03:54,080 --> 00:03:58,400
the average number of transitive

00:03:56,420 --> 00:04:02,450
dependencies across these open source

00:03:58,400 --> 00:04:05,030
projects also Rises and the time it

00:04:02,450 --> 00:04:07,160
takes for bad actors to start attempting

00:04:05,030 --> 00:04:10,160
to exploit unknown vulnerability is

00:04:07,160 --> 00:04:12,500
shrinking meaning you have less time to

00:04:10,160 --> 00:04:17,299
fix the vulnerability before you may

00:04:12,500 --> 00:04:19,970
become a victim of an exploit let's talk

00:04:17,299 --> 00:04:22,790
about the second challenge open source

00:04:19,970 --> 00:04:28,790
software use can present significant

00:04:22,790 --> 00:04:31,750
risk to your business how do these risks

00:04:28,790 --> 00:04:36,670
impact your business well in the case of

00:04:31,750 --> 00:04:39,110
security vulnerability risk by nature

00:04:36,670 --> 00:04:41,720
defects and vulnerabilities in the open

00:04:39,110 --> 00:04:45,710
source libraries you use will equate to

00:04:41,720 --> 00:04:47,600
defects in your product heartbleed and

00:04:45,710 --> 00:04:51,520
shellshock are a couple of good examples

00:04:47,600 --> 00:04:56,480
of open source vulnerabilities that

00:04:51,520 --> 00:04:58,250
inadvertently impacted businesses it's

00:04:56,480 --> 00:04:59,990
probably obvious but security

00:04:58,250 --> 00:05:02,270
vulnerabilities can put your company at

00:04:59,990 --> 00:05:05,000
risk of inadvertently exposing sensitive

00:05:02,270 --> 00:05:06,890
or regulated data which can result in

00:05:05,000 --> 00:05:09,740
regulatory fines or damage to your

00:05:06,890 --> 00:05:11,990
reputation and security vulnerabilities

00:05:09,740 --> 00:05:14,660
can also put your company at risk of

00:05:11,990 --> 00:05:17,630
your services becoming unavailable or

00:05:14,660 --> 00:05:21,050
their performance degrading making them

00:05:17,630 --> 00:05:23,240
effectively unusable when your services

00:05:21,050 --> 00:05:25,580
are unavailable or not well performing

00:05:23,240 --> 00:05:28,010
it can impede your company's ability to

00:05:25,580 --> 00:05:30,200
run its business process orders or

00:05:28,010 --> 00:05:32,710
provide the services that your customers

00:05:30,200 --> 00:05:32,710
rely on

00:05:33,580 --> 00:05:39,590
open-source software licenses can also

00:05:36,410 --> 00:05:41,389
expose companies to risk open source

00:05:39,590 --> 00:05:44,539
software licenses have varying degrees

00:05:41,389 --> 00:05:47,300
of permissiveness or restrictiveness if

00:05:44,539 --> 00:05:49,820
your applications use open source

00:05:47,300 --> 00:05:52,520
libraries with licenses that require

00:05:49,820 --> 00:05:55,190
your company to pay royalties comply

00:05:52,520 --> 00:05:57,320
with copyright protections or require

00:05:55,190 --> 00:05:59,840
you to publish your own code as an

00:05:57,320 --> 00:06:02,780
open-source project this can present a

00:05:59,840 --> 00:06:04,760
problem for your organization some

00:06:02,780 --> 00:06:06,440
open-source licenses may impair your

00:06:04,760 --> 00:06:09,410
company's intellectual property rights

00:06:06,440 --> 00:06:11,600
to your work product that leverages the

00:06:09,410 --> 00:06:14,990
open-source libraries associated with

00:06:11,600 --> 00:06:17,330
these types of licenses you also need to

00:06:14,990 --> 00:06:21,139
ensure that the libraries you are using

00:06:17,330 --> 00:06:24,710
our in fact open source and have open

00:06:21,139 --> 00:06:27,729
source licenses non-compliance with open

00:06:24,710 --> 00:06:34,580
source licenses can beam legal issues or

00:06:27,729 --> 00:06:37,340
fiduciary issues for your company let's

00:06:34,580 --> 00:06:40,490
talk about the third challenge how to

00:06:37,340 --> 00:06:46,250
manage the risk of increased use of open

00:06:40,490 --> 00:06:48,830
source your organization needs to get

00:06:46,250 --> 00:06:52,250
visibility and control of your open

00:06:48,830 --> 00:06:53,990
source inventory the licenses associated

00:06:52,250 --> 00:06:56,419
with the open source libraries in your

00:06:53,990 --> 00:06:58,880
inventory and the security

00:06:56,419 --> 00:07:01,479
vulnerabilities associated with the open

00:06:58,880 --> 00:07:05,210
source libraries in your inventory so

00:07:01,479 --> 00:07:09,760
how can you get control the control you

00:07:05,210 --> 00:07:12,550
need over all of your open source usage

00:07:09,760 --> 00:07:15,080
well you can try to manage it manually

00:07:12,550 --> 00:07:17,539
but then you're asking your development

00:07:15,080 --> 00:07:21,110
teams to track the usage of open source

00:07:17,539 --> 00:07:23,979
with spreadsheets and request approval

00:07:21,110 --> 00:07:26,810
to use open source libraries via email

00:07:23,979 --> 00:07:28,550
these efforts will only slow down your

00:07:26,810 --> 00:07:31,250
developers forcing them to spend

00:07:28,550 --> 00:07:36,680
precious time documenting their use of

00:07:31,250 --> 00:07:39,260
open source instead of building code you

00:07:36,680 --> 00:07:42,229
can do nothing and hope for the best but

00:07:39,260 --> 00:07:43,699
then you're exposed to security and

00:07:42,229 --> 00:07:48,539
compliance risks

00:07:43,699 --> 00:07:50,789
those issues don't go away or you can

00:07:48,539 --> 00:07:53,370
automate all the processes related to

00:07:50,789 --> 00:07:55,800
your open source management and let your

00:07:53,370 --> 00:08:00,030
developers focus on actually building

00:07:55,800 --> 00:08:03,410
products before we dive into the power

00:08:00,030 --> 00:08:07,020
of automated open source management

00:08:03,410 --> 00:08:12,479
here's a snapshot of the scan analysis

00:08:07,020 --> 00:08:14,220
results of 250 applications when

00:08:12,479 --> 00:08:17,070
presented with a comprehensive bill of

00:08:14,220 --> 00:08:21,949
materials of their open source libraries

00:08:17,070 --> 00:08:25,669
across all of their applications over

00:08:21,949 --> 00:08:28,380
75% of our evaluators were aware of only

00:08:25,669 --> 00:08:32,130
50% of their open source

00:08:28,380 --> 00:08:34,770
usage in most cases the evaluators were

00:08:32,130 --> 00:08:37,680
aware of direct dependencies but their

00:08:34,770 --> 00:08:39,870
biggest blind spot was the transitive

00:08:37,680 --> 00:08:43,200
dependencies in their code which are far

00:08:39,870 --> 00:08:45,240
harder to track on computer in a

00:08:43,200 --> 00:08:47,880
computer program a direct dependency is

00:08:45,240 --> 00:08:50,580
functionality exported by the library

00:08:47,880 --> 00:08:53,430
that is referenced director directly by

00:08:50,580 --> 00:08:55,680
the program itself a transitive

00:08:53,430 --> 00:08:58,170
dependency is any dependency that is

00:08:55,680 --> 00:09:00,600
induced by the components that the

00:08:58,170 --> 00:09:02,310
program references directly in other

00:09:00,600 --> 00:09:05,580
words transitive dependencies are

00:09:02,310 --> 00:09:08,580
introduced to your code by the reliance

00:09:05,580 --> 00:09:11,940
of a library with a direct dependency on

00:09:08,580 --> 00:09:13,920
a library which does not have a direct

00:09:11,940 --> 00:09:18,150
dependency and that becomes very

00:09:13,920 --> 00:09:21,839
difficult to gain visibility to almost

00:09:18,150 --> 00:09:25,200
90% of the applications in our analysis

00:09:21,839 --> 00:09:29,279
were vulnerable to at least one security

00:09:25,200 --> 00:09:34,260
vulnerability and 42 percent had more

00:09:29,279 --> 00:09:36,270
than five vulnerabilities our evaluators

00:09:34,260 --> 00:09:38,670
reported constant arguments between

00:09:36,270 --> 00:09:41,760
their Rd security and development teams

00:09:38,670 --> 00:09:44,279
for example when a security analyst

00:09:41,760 --> 00:09:46,980
takes product vulnerability data to a

00:09:44,279 --> 00:09:48,870
developer and may be difficult for the

00:09:46,980 --> 00:09:51,480
analyst to provide evidence of the

00:09:48,870 --> 00:09:53,640
vulnerability to the developer and even

00:09:51,480 --> 00:09:55,290
harder to direct the developer to the

00:09:53,640 --> 00:09:56,910
specific lines in their code that

00:09:55,290 --> 00:10:01,800
invoked those vulnerable

00:09:56,910 --> 00:10:04,740
peace and finally evaluators reported on

00:10:01,800 --> 00:10:07,350
average open source libraries were in

00:10:04,740 --> 00:10:11,040
use with at least one license that

00:10:07,350 --> 00:10:13,350
didn't meet company policy that one

00:10:11,040 --> 00:10:17,360
license was generally associated with

00:10:13,350 --> 00:10:17,360
more than one open source library

00:10:17,480 --> 00:10:22,590
clearly there is a business imperative

00:10:19,610 --> 00:10:24,690
to manage open source software security

00:10:22,590 --> 00:10:26,580
and compliance and doing this in an

00:10:24,690 --> 00:10:32,910
automated way can have a significant

00:10:26,580 --> 00:10:34,830
impact on your business automated open

00:10:32,910 --> 00:10:36,990
source software management is more than

00:10:34,830 --> 00:10:39,780
just ensuring the security of your open

00:10:36,990 --> 00:10:41,820
source usage automated open source

00:10:39,780 --> 00:10:45,240
software management helps you build

00:10:41,820 --> 00:10:48,030
better software faster by consuming open

00:10:45,240 --> 00:10:51,330
source with no restriction or hesitation

00:10:48,030 --> 00:10:53,750
and without adding unnecessary risks or

00:10:51,330 --> 00:10:57,900
friction to your development processes

00:10:53,750 --> 00:10:59,550
and providing automated open source

00:10:57,900 --> 00:11:01,920
software management throughout the

00:10:59,550 --> 00:11:03,900
software development lifecycle can help

00:11:01,920 --> 00:11:06,060
you to address potential security and

00:11:03,900 --> 00:11:08,520
compliance issues earlier in the process

00:11:06,060 --> 00:11:10,650
when it is less expensive to do and

00:11:08,520 --> 00:11:12,390
provides the biggest and most positive

00:11:10,650 --> 00:11:14,490
impact on your security and compliance

00:11:12,390 --> 00:11:18,300
exposure as your product matures

00:11:14,490 --> 00:11:19,740
throughout the SDLC automated open

00:11:18,300 --> 00:11:21,600
source management should make developers

00:11:19,740 --> 00:11:24,180
lives easier when they are relying on

00:11:21,600 --> 00:11:26,940
open source components it should support

00:11:24,180 --> 00:11:29,070
pre-built stages of the SDLC to help

00:11:26,940 --> 00:11:31,050
developers find and fix vulnerabilities

00:11:29,070 --> 00:11:33,180
and compliance issues early on in the

00:11:31,050 --> 00:11:36,360
process when it is easier and less

00:11:33,180 --> 00:11:37,950
expensive to make fixes automated open

00:11:36,360 --> 00:11:40,350
source management should also support

00:11:37,950 --> 00:11:43,620
security and compliance professionals it

00:11:40,350 --> 00:11:46,860
should support the build and post build

00:11:43,620 --> 00:11:49,530
stages to provide managers analysts and

00:11:46,860 --> 00:11:51,750
auditors with full visibility and

00:11:49,530 --> 00:11:53,430
control over the risk associated with

00:11:51,750 --> 00:11:57,110
the open source usage in their

00:11:53,430 --> 00:11:59,310
organization at the planned stage

00:11:57,110 --> 00:12:01,170
developers need to understand the

00:11:59,310 --> 00:12:03,990
vulnerabilities in the open source

00:12:01,170 --> 00:12:09,230
libraries they are considering using in

00:12:03,990 --> 00:12:09,230
their projects so as an example

00:12:20,590 --> 00:12:26,680
your developers may be looking at common

00:12:24,270 --> 00:12:29,410
repositories of open source libraries

00:12:26,680 --> 00:12:30,790
that are posted on the internet and

00:12:29,410 --> 00:12:32,020
there are loads of these available on

00:12:30,790 --> 00:12:34,300
the Internet

00:12:32,020 --> 00:12:36,850
in this case we're looking at maven org

00:12:34,300 --> 00:12:39,960
and we're looking at a specific open

00:12:36,850 --> 00:12:45,220
source library Jackson data bind version

00:12:39,960 --> 00:12:48,430
299 now developers should be able to

00:12:45,220 --> 00:12:50,530
gain insight into the vulnerabilities

00:12:48,430 --> 00:12:53,670
that are associated with these libraries

00:12:50,530 --> 00:12:56,560
and understand which licenses are

00:12:53,670 --> 00:12:59,620
associated with these libraries and if

00:12:56,560 --> 00:13:02,400
those licenses may in fact violate a

00:12:59,620 --> 00:13:05,080
compliance policy of their company

00:13:02,400 --> 00:13:07,420
through browser-based integration a

00:13:05,080 --> 00:13:09,430
developer will be able to see the

00:13:07,420 --> 00:13:12,010
specific license that's associated with

00:13:09,430 --> 00:13:16,030
the library whether or not the library

00:13:12,010 --> 00:13:18,700
is up-to-date or not some inference

00:13:16,030 --> 00:13:20,320
it--in to any organizational policies

00:13:18,700 --> 00:13:23,170
that are defined by their organization

00:13:20,320 --> 00:13:26,170
that may violated by this open source

00:13:23,170 --> 00:13:28,150
library and awareness of the fact that

00:13:26,170 --> 00:13:30,130
there are vulnerabilities in this

00:13:28,150 --> 00:13:32,830
library how many they are or what their

00:13:30,130 --> 00:13:37,620
severity is by getting this type of

00:13:32,830 --> 00:13:40,930
information a developer may be able to

00:13:37,620 --> 00:13:44,140
using insights provided by these types

00:13:40,930 --> 00:13:48,430
of tools look at a newer version of the

00:13:44,140 --> 00:13:50,320
same library and be able to identify a

00:13:48,430 --> 00:13:52,600
version that does not have

00:13:50,320 --> 00:13:56,610
vulnerabilities and complies with

00:13:52,600 --> 00:13:56,610
corporate compliance policies

00:14:02,149 --> 00:14:08,010
at the code stage developers should be

00:14:05,670 --> 00:14:10,500
able to get information they can use to

00:14:08,010 --> 00:14:15,389
remediate security and compliance issues

00:14:10,500 --> 00:14:21,019
in the IDE s they used to write code so

00:14:15,389 --> 00:14:24,209
in our demo our developers using Eclipse

00:14:21,019 --> 00:14:27,089
to build a project based on open source

00:14:24,209 --> 00:14:31,139
libraries now it can scan the dependency

00:14:27,089 --> 00:14:32,699
manifest of the programs that are

00:14:31,139 --> 00:14:35,699
triggering the use of open source

00:14:32,699 --> 00:14:38,519
libraries and gain insight directly in

00:14:35,699 --> 00:14:40,500
the IDE of the fact that a specific

00:14:38,519 --> 00:14:43,529
library that's being invoked has

00:14:40,500 --> 00:14:46,290
vulnerabilities associated with it it

00:14:43,529 --> 00:14:50,149
can even get insight into the fact that

00:14:46,290 --> 00:14:56,899
some of the dependencies are transitive

00:14:50,149 --> 00:15:00,180
while others may be directly called and

00:14:56,899 --> 00:15:03,329
finally we can get a comprehensive list

00:15:00,180 --> 00:15:04,709
in the tabular format of all the

00:15:03,329 --> 00:15:06,810
vulnerabilities associate with this

00:15:04,709 --> 00:15:09,540
library and using this information a

00:15:06,810 --> 00:15:10,589
developer may choose to either not use

00:15:09,540 --> 00:15:13,709
this library at all

00:15:10,589 --> 00:15:15,990
or they may consider using a different

00:15:13,709 --> 00:15:17,940
version of the same library and they can

00:15:15,990 --> 00:15:21,680
make those decisions right here in the

00:15:17,940 --> 00:15:21,680
IDE while they're building their code

00:15:24,949 --> 00:15:30,540
during the build stage you should be

00:15:28,620 --> 00:15:32,730
scanning your code in line with your

00:15:30,540 --> 00:15:34,920
build pipelines to identify potential

00:15:32,730 --> 00:15:37,529
issues in the code repos used by your

00:15:34,920 --> 00:15:39,959
pipeline you may even want to fail a

00:15:37,529 --> 00:15:46,829
build if it does not comply with the

00:15:39,959 --> 00:15:49,079
corporate policy now as an example your

00:15:46,829 --> 00:15:52,980
organization may be using github

00:15:49,079 --> 00:15:59,490
Enterprise to manage your repos if we

00:15:52,980 --> 00:16:01,260
take a look at a specific repo the open

00:15:59,490 --> 00:16:03,149
source our automated open source

00:16:01,260 --> 00:16:06,800
management tools should be able to scan

00:16:03,149 --> 00:16:11,600
the content of a repo when it is created

00:16:06,800 --> 00:16:13,500
updated or modified and after that scan

00:16:11,600 --> 00:16:17,490
you should be able to

00:16:13,500 --> 00:16:22,350
to view any potential issues inside of

00:16:17,490 --> 00:16:24,300
your repo management tool so in this

00:16:22,350 --> 00:16:26,850
case we're able to see there are

00:16:24,300 --> 00:16:29,490
specific jar files that are part of our

00:16:26,850 --> 00:16:31,920
repo that have known vulnerabilities

00:16:29,490 --> 00:16:33,180
associated with them and we can drill

00:16:31,920 --> 00:16:34,980
down into any one of these

00:16:33,180 --> 00:16:37,170
vulnerabilities in order to get more

00:16:34,980 --> 00:16:41,100
information about the vulnerability

00:16:37,170 --> 00:16:46,140
itself maybe even give insight into the

00:16:41,100 --> 00:16:49,560
cbss score and even provide suggested

00:16:46,140 --> 00:16:52,020
fixes such as maybe it's a good idea to

00:16:49,560 --> 00:16:55,500
update to a newer version of this

00:16:52,020 --> 00:16:57,840
library in addition once we've

00:16:55,500 --> 00:17:00,660
identified these issues we should be

00:16:57,840 --> 00:17:02,970
able to help automate the remediation of

00:17:00,660 --> 00:17:06,959
these issues by triggering pull requests

00:17:02,970 --> 00:17:10,980
inside of the repo tool so in this case

00:17:06,959 --> 00:17:16,470
we know that by building a pull request

00:17:10,980 --> 00:17:20,189
and merging it with our repo we'll be

00:17:16,470 --> 00:17:23,689
able to remediate the vulnerabilities

00:17:20,189 --> 00:17:26,910
associated with this zookeeper jar file

00:17:23,689 --> 00:17:29,580
so if we drill into the pull request we

00:17:26,910 --> 00:17:32,730
can see for example that the pull

00:17:29,580 --> 00:17:38,030
request is designed to update the

00:17:32,730 --> 00:17:42,690
library from version 3.4 3 to version

00:17:38,030 --> 00:17:44,880
3.4 dot 1 4 if this is done we are

00:17:42,690 --> 00:17:47,790
notified that will be remediating these

00:17:44,880 --> 00:17:50,480
specific vulnerabilities which will

00:17:47,790 --> 00:17:54,720
close out these specific issues

00:17:50,480 --> 00:17:57,210
generated by the vulnerability scan in

00:17:54,720 --> 00:17:59,340
addition in the pull request we can take

00:17:57,210 --> 00:18:01,920
a look at which file is actually going

00:17:59,340 --> 00:18:04,590
to be changed and see what will change

00:18:01,920 --> 00:18:09,110
inside the file if the pull request is

00:18:04,590 --> 00:18:09,110
merged into the repo

00:18:14,190 --> 00:18:20,110
during the deploy and maintenance stages

00:18:17,080 --> 00:18:21,910
you'll want to rescan your code to

00:18:20,110 --> 00:18:25,330
ensure that no new security

00:18:21,910 --> 00:18:27,300
vulnerabilities will impact your open

00:18:25,330 --> 00:18:31,030
source libraries that are already

00:18:27,300 --> 00:18:33,760
deployed and in active use and are being

00:18:31,030 --> 00:18:35,710
maintained by your organization and you

00:18:33,760 --> 00:18:38,950
want to make sure that no new compliance

00:18:35,710 --> 00:18:41,470
policies limit your use of open source

00:18:38,950 --> 00:18:46,500
libraries that are already being used by

00:18:41,470 --> 00:18:49,660
your applications so in this example you

00:18:46,500 --> 00:18:52,770
may take a look at your open source

00:18:49,660 --> 00:18:55,000
management tool in order to see

00:18:52,770 --> 00:18:56,950
high-level information about the

00:18:55,000 --> 00:18:59,560
libraries that are in use including how

00:18:56,950 --> 00:19:01,990
many have newer versions available

00:18:59,560 --> 00:19:05,320
how many libraries are you using

00:19:01,990 --> 00:19:07,510
multiple versions of how many libraries

00:19:05,320 --> 00:19:09,970
have multiple licenses associated with

00:19:07,510 --> 00:19:11,890
them and you may also want to see

00:19:09,970 --> 00:19:15,850
information from a management

00:19:11,890 --> 00:19:19,510
perspective of the security

00:19:15,850 --> 00:19:21,970
vulnerability alerts by library how many

00:19:19,510 --> 00:19:24,790
libraries have alerts and also by the

00:19:21,970 --> 00:19:27,940
number of vulnerabilities that have been

00:19:24,790 --> 00:19:30,600
identified you also want to see

00:19:27,940 --> 00:19:34,360
comprehensive information around the

00:19:30,600 --> 00:19:36,820
libraries that sorry the licenses that

00:19:34,360 --> 00:19:43,480
are associated with the libraries in

00:19:36,820 --> 00:19:46,060
your inventory if we drill down into our

00:19:43,480 --> 00:19:48,430
product we'll be able to see as an

00:19:46,060 --> 00:19:50,410
example a comprehensive list of all of

00:19:48,430 --> 00:19:52,770
the open source libraries that are in

00:19:50,410 --> 00:19:56,020
use in this product

00:19:52,770 --> 00:19:57,550
the comprehensive list of all the

00:19:56,020 --> 00:20:00,520
different projects that make up the

00:19:57,550 --> 00:20:01,810
product the distribution of licenses

00:20:00,520 --> 00:20:04,570
including their number and the

00:20:01,810 --> 00:20:07,270
percentage of libraries that are

00:20:04,570 --> 00:20:09,970
actually using a specific license and

00:20:07,270 --> 00:20:15,220
also information about the restrictive

00:20:09,970 --> 00:20:17,440
nasur permissiveness of the license and

00:20:15,220 --> 00:20:20,740
you'll also be able to drill down to see

00:20:17,440 --> 00:20:24,450
a list of vulnerabilities that are

00:20:20,740 --> 00:20:24,450
associated with those libraries

00:20:24,999 --> 00:20:33,099
and you'll also be able to see a list of

00:20:28,929 --> 00:20:37,289
alerts that are associated with the open

00:20:33,099 --> 00:20:37,289
source libraries in this product project

00:20:40,649 --> 00:20:47,769
now today you may scan your code and

00:20:44,519 --> 00:20:50,919
identify that this is your current state

00:20:47,769 --> 00:20:53,349
and you may remediate these issues but

00:20:50,919 --> 00:20:56,289
as we know new security vulnerabilities

00:20:53,349 --> 00:20:58,749
are identified validated as known

00:20:56,289 --> 00:21:01,329
vulnerabilities and published every

00:20:58,749 --> 00:21:03,309
single day so it's important to keep in

00:21:01,329 --> 00:21:08,309
mind the fact that even though your scan

00:21:03,309 --> 00:21:10,299
today has cleared your application or

00:21:08,309 --> 00:21:13,119
identified issues which you have

00:21:10,299 --> 00:21:15,099
proactively remediated tomorrow that

00:21:13,119 --> 00:21:17,559
situation may be change when new

00:21:15,099 --> 00:21:19,419
vulnerabilities are released and so

00:21:17,559 --> 00:21:21,759
having this level of insight the

00:21:19,419 --> 00:21:24,009
comprehensiveness of a bill of materials

00:21:21,759 --> 00:21:28,149
of open source libraries that are in

00:21:24,009 --> 00:21:30,939
your products and awareness of the

00:21:28,149 --> 00:21:34,239
vulnerabilities and licenses associated

00:21:30,939 --> 00:21:36,069
with those libraries is an important

00:21:34,239 --> 00:21:39,249
thing to maintain on an ongoing basis

00:21:36,069 --> 00:21:42,399
you're going to want to do re scans to

00:21:39,249 --> 00:21:46,619
make sure that you remain secure and in

00:21:42,399 --> 00:21:46,619
compliance on an ongoing basis

00:21:49,529 --> 00:21:54,369
throughout the software delivery life

00:21:51,729 --> 00:21:56,469
cycle it is important to use your

00:21:54,369 --> 00:21:59,589
development and security analysis

00:21:56,469 --> 00:22:01,449
resources efficiently if you don't your

00:21:59,589 --> 00:22:03,399
teams may waste time focusing

00:22:01,449 --> 00:22:06,909
remediation efforts on vulnerabilities

00:22:03,399 --> 00:22:09,939
your code is not exposed to while other

00:22:06,909 --> 00:22:13,719
vulnerabilities effectively exposed by

00:22:09,939 --> 00:22:16,479
your apps go unchecked there's no reason

00:22:13,719 --> 00:22:18,489
to fix all the vulnerabilities inside of

00:22:16,479 --> 00:22:20,949
your product when only somewhere in the

00:22:18,489 --> 00:22:25,629
neighborhood of 15 to 30 percent of them

00:22:20,949 --> 00:22:27,099
actually impact your products every

00:22:25,629 --> 00:22:29,649
library has multiple functions

00:22:27,099 --> 00:22:32,469
associated with it and each of those

00:22:29,649 --> 00:22:35,499
functions is may be associated with one

00:22:32,469 --> 00:22:38,960
or more security vulnerability but if

00:22:35,499 --> 00:22:39,980
your proprietary code isn't calling the

00:22:38,960 --> 00:22:45,380
functions that expose those

00:22:39,980 --> 00:22:47,779
vulnerabilities they're not effective so

00:22:45,380 --> 00:22:49,880
consider this if all security

00:22:47,779 --> 00:22:52,010
vulnerability alerts are pushed to your

00:22:49,880 --> 00:22:54,260
software development teams they may

00:22:52,010 --> 00:22:56,750
drown in those alerts and they cannot

00:22:54,260 --> 00:22:59,960
possibly respond to all the issues they

00:22:56,750 --> 00:23:02,450
won't be able to keep up and that means

00:22:59,960 --> 00:23:05,480
that prioritization of remediation

00:23:02,450 --> 00:23:08,029
efforts can become critical and your

00:23:05,480 --> 00:23:11,390
organization's ability to manage open

00:23:08,029 --> 00:23:13,789
source security companies need to

00:23:11,390 --> 00:23:15,770
prioritize vulnerability remediation

00:23:13,789 --> 00:23:18,919
efforts according to their impact on

00:23:15,770 --> 00:23:20,809
your applications and this can be done

00:23:18,919 --> 00:23:24,820
by using open source scanning tools to

00:23:20,809 --> 00:23:27,230
create a call graph that shows a trace

00:23:24,820 --> 00:23:30,110
indicating whether your proprietary code

00:23:27,230 --> 00:23:33,260
is making calls to vulnerable methods

00:23:30,110 --> 00:23:35,240
deeming them effective if your

00:23:33,260 --> 00:23:36,950
proprietary code is not making calls to

00:23:35,240 --> 00:23:38,360
vulnerable methods then the

00:23:36,950 --> 00:23:43,700
vulnerabilities are considered

00:23:38,360 --> 00:23:45,260
ineffective and remediation efforts on

00:23:43,700 --> 00:23:49,220
these vulnerabilities can be deep

00:23:45,260 --> 00:23:51,200
prioritized now white sources research

00:23:49,220 --> 00:23:53,029
shows that up to 85% of the

00:23:51,200 --> 00:23:55,370
vulnerabilities and java applications

00:23:53,029 --> 00:23:58,580
are ineffective meaning that the vast

00:23:55,370 --> 00:24:01,909
majority of remediation efforts can be d

00:23:58,580 --> 00:24:03,860
prioritized and remediation efforts can

00:24:01,909 --> 00:24:11,029
be focused on the vulnerabilities that

00:24:03,860 --> 00:24:14,809
most impact your product so as an

00:24:11,029 --> 00:24:17,240
example if we take a look at our alerts

00:24:14,809 --> 00:24:19,610
you'll be able to see the list of all of

00:24:17,240 --> 00:24:22,760
libraries and associated security

00:24:19,610 --> 00:24:26,740
vulnerabilities you see these references

00:24:22,760 --> 00:24:30,799
the shield references in the report a

00:24:26,740 --> 00:24:35,120
red shield in this report is indicative

00:24:30,799 --> 00:24:38,409
of an effective vulnerability it means

00:24:35,120 --> 00:24:42,559
that the scan was able to determine that

00:24:38,409 --> 00:24:45,470
your codebase has an open source library

00:24:42,559 --> 00:24:50,929
in it with known vulnerabilities and the

00:24:45,470 --> 00:24:52,820
scan was able to provide a trace from

00:24:50,929 --> 00:24:55,460
your proprietary code

00:24:52,820 --> 00:24:59,090
to a function in this library that

00:24:55,460 --> 00:25:04,490
exposes the known vulnerability but you

00:24:59,090 --> 00:25:07,300
also see references to green shields now

00:25:04,490 --> 00:25:09,830
the green shields indicate that the scan

00:25:07,300 --> 00:25:12,980
identified the open source library that

00:25:09,830 --> 00:25:14,210
has known vulnerabilities but the scan

00:25:12,980 --> 00:25:16,430
was able to determine that your

00:25:14,210 --> 00:25:20,150
proprietary code does not make

00:25:16,430 --> 00:25:23,440
references to functions that expose the

00:25:20,150 --> 00:25:25,460
vulnerabilities in these libraries

00:25:23,440 --> 00:25:29,150
remediation of these vulnerabilities can

00:25:25,460 --> 00:25:32,960
be deprioritized the yellow shields

00:25:29,150 --> 00:25:35,120
indicate a inability to find a clear

00:25:32,960 --> 00:25:38,450
direct reference from your proprietary

00:25:35,120 --> 00:25:41,600
code to the functions that expose the

00:25:38,450 --> 00:25:43,870
vulnerability this often happens if your

00:25:41,600 --> 00:25:47,630
code is referencing classes which may

00:25:43,870 --> 00:25:50,360
hide or obfuscate the direct reference

00:25:47,630 --> 00:25:53,600
to a function but by providing the

00:25:50,360 --> 00:25:55,700
yellow shield the report can indicate to

00:25:53,600 --> 00:25:58,510
your team that they should certainly

00:25:55,700 --> 00:26:01,360
take a look at and potentially make

00:25:58,510 --> 00:26:04,670
remediation efforts on these

00:26:01,360 --> 00:26:09,260
vulnerabilities in these libraries long

00:26:04,670 --> 00:26:13,160
story short prioritize the red shields D

00:26:09,260 --> 00:26:16,100
prioritize the green shields and make

00:26:13,160 --> 00:26:18,680
some effort to take some look at the

00:26:16,100 --> 00:26:20,930
yellow shields because they may be in

00:26:18,680 --> 00:26:24,250
fact B vulnerabilities you are exposed

00:26:20,930 --> 00:26:27,530
to with this type of awareness

00:26:24,250 --> 00:26:30,140
development teams and security teams can

00:26:27,530 --> 00:26:36,050
more efficiently and effectively focus

00:26:30,140 --> 00:26:38,660
their remediation efforts it is

00:26:36,050 --> 00:26:40,910
important also to keep in mind that open

00:26:38,660 --> 00:26:45,200
source libraries are used in containers

00:26:40,910 --> 00:26:47,840
and in service functions so your open

00:26:45,200 --> 00:26:50,240
source management processes should also

00:26:47,840 --> 00:26:52,160
include scans of your container

00:26:50,240 --> 00:26:55,820
registries and container management

00:26:52,160 --> 00:26:57,980
tools as well as your serverless

00:26:55,820 --> 00:27:01,310
functions such as eight eight of us

00:26:57,980 --> 00:27:06,630
lambda you're going to want to be able

00:27:01,310 --> 00:27:08,429
to scan your docker containers and your

00:27:06,630 --> 00:27:13,320
container management tools such as

00:27:08,429 --> 00:27:16,970
kubernetes in order to identify the use

00:27:13,320 --> 00:27:19,679
of open source libraries in these

00:27:16,970 --> 00:27:22,259
containers and in these service

00:27:19,679 --> 00:27:25,259
functions and to be able to highlight

00:27:22,259 --> 00:27:27,029
for you the vulnerabilities and licenses

00:27:25,259 --> 00:27:34,409
that are known to be associated with the

00:27:27,029 --> 00:27:36,960
libraries that are identified in summary

00:27:34,409 --> 00:27:39,240
when considering approaches to manage

00:27:36,960 --> 00:27:42,289
your open source libraries you should be

00:27:39,240 --> 00:27:46,590
sure to consider these three key areas

00:27:42,289 --> 00:27:48,389
number one completeness your open source

00:27:46,590 --> 00:27:50,820
management approach should offer a

00:27:48,389 --> 00:27:52,740
one-stop shop to manage all of your open

00:27:50,820 --> 00:27:55,620
source libraries regardless of

00:27:52,740 --> 00:27:59,059
environment or language it should also

00:27:55,620 --> 00:28:01,649
service the needs of all constituents of

00:27:59,059 --> 00:28:04,610
open source management information in

00:28:01,649 --> 00:28:08,190
your company including security teams

00:28:04,610 --> 00:28:12,149
development teams DevOps teens legal

00:28:08,190 --> 00:28:15,620
teams audit and compliance teams and of

00:28:12,149 --> 00:28:18,570
course management number two

00:28:15,620 --> 00:28:20,820
prioritization make sure the approach

00:28:18,570 --> 00:28:23,519
does not trigger alerts on false

00:28:20,820 --> 00:28:25,830
positive findings wasting precious time

00:28:23,519 --> 00:28:29,850
researching problems that are not really

00:28:25,830 --> 00:28:31,409
problems also make the approach support

00:28:29,850 --> 00:28:34,590
your efforts to prioritize

00:28:31,409 --> 00:28:37,620
vulnerabilities and their remediation

00:28:34,590 --> 00:28:41,490
based on their real impact to your

00:28:37,620 --> 00:28:44,309
company and finally number three

00:28:41,490 --> 00:28:46,679
remediation your open source management

00:28:44,309 --> 00:28:49,580
approach should not only alert you on

00:28:46,679 --> 00:28:52,259
issues it should also help automate

00:28:49,580 --> 00:28:55,379
remediation of issues by generating

00:28:52,259 --> 00:29:01,549
automated pull requests offer suggested

00:28:55,379 --> 00:29:01,549
fixes and initiate automated workflows

00:29:02,659 --> 00:29:06,520
with

00:29:03,770 --> 00:29:09,680
that we thank you for your time and

00:29:06,520 --> 00:29:14,450
we'll be open to any questions that you

00:29:09,680 --> 00:29:16,520
may have thank you very so that's the

00:29:14,450 --> 00:29:19,190
end of the pre-recorded session so I'd

00:29:16,520 --> 00:29:23,360
like to welcome Jason here and we have

00:29:19,190 --> 00:29:25,280
some questions so everyone this is Jason

00:29:23,360 --> 00:29:26,510
thanks for joining and glad you were

00:29:25,280 --> 00:29:29,000
able to participate in this session

00:29:26,510 --> 00:29:31,820
today yeah thank you for your session it

00:29:29,000 --> 00:29:34,910
was great so the first question we have

00:29:31,820 --> 00:29:36,740
is in reality is it all that common that

00:29:34,910 --> 00:29:38,990
companies get sued for not complying

00:29:36,740 --> 00:29:41,240
with open source licenses I heard the

00:29:38,990 --> 00:29:43,780
only copyright holder khun's only the

00:29:41,240 --> 00:29:46,370
copyright holder can sue and not a user

00:29:43,780 --> 00:29:50,680
yeah that's true it's not individual

00:29:46,370 --> 00:29:53,930
users who are suing and the issue really

00:29:50,680 --> 00:29:55,910
ends up getting applied to the companies

00:29:53,930 --> 00:29:58,490
or enterprises that are using open

00:29:55,910 --> 00:30:02,540
source libraries it's true that that

00:29:58,490 --> 00:30:06,260
generally this is around issues either

00:30:02,540 --> 00:30:09,470
around copyright or royalties right and

00:30:06,260 --> 00:30:11,000
so it's the the owner the the open

00:30:09,470 --> 00:30:13,760
source library that's using the open

00:30:11,000 --> 00:30:16,540
source license will be the one that

00:30:13,760 --> 00:30:19,190
would pursue some sort of legal action

00:30:16,540 --> 00:30:21,410
and that legal action may be trying to

00:30:19,190 --> 00:30:23,450
recoup royalties if the open source

00:30:21,410 --> 00:30:27,680
license has a royalty payment

00:30:23,450 --> 00:30:32,960
requirement or they may try to recoup

00:30:27,680 --> 00:30:35,090
money related to the if there's a

00:30:32,960 --> 00:30:37,040
copyright restriction an open source

00:30:35,090 --> 00:30:41,090
library requires you to publish your own

00:30:37,040 --> 00:30:42,680
code as open source if you use an open

00:30:41,090 --> 00:30:44,720
source library that has that license

00:30:42,680 --> 00:30:46,280
associated with it and you haven't

00:30:44,720 --> 00:30:47,630
actually published your code as open

00:30:46,280 --> 00:30:50,270
source and you've made money off of it

00:30:47,630 --> 00:30:52,780
right then that there is a risk that you

00:30:50,270 --> 00:30:56,360
could be sued by the the license

00:30:52,780 --> 00:30:58,310
copyright holder for payment on the

00:30:56,360 --> 00:31:02,630
revenue you've generated using their

00:30:58,310 --> 00:31:05,540
work product thank you so the next

00:31:02,630 --> 00:31:07,760
question is about tooling so so tooling

00:31:05,540 --> 00:31:09,650
is nice but being hampered by corporate

00:31:07,760 --> 00:31:12,050
compliance policies makes me think that

00:31:09,650 --> 00:31:14,300
the problem is not the for software it's

00:31:12,050 --> 00:31:16,450
the policies well what's your thoughts

00:31:14,300 --> 00:31:20,080
on this

00:31:16,450 --> 00:31:21,910
let's see so being hampered by corporate

00:31:20,080 --> 00:31:26,679
compliance policies yet generally

00:31:21,910 --> 00:31:28,770
speaking this is around if a in the same

00:31:26,679 --> 00:31:31,780
scenario I was just talking about with a

00:31:28,770 --> 00:31:35,290
license that has copyright restrictions

00:31:31,780 --> 00:31:37,330
or royalty payment requirements the

00:31:35,290 --> 00:31:40,179
organization may invoke a policy that

00:31:37,330 --> 00:31:43,390
says we don't want you to use any open

00:31:40,179 --> 00:31:45,130
source library that leverages a open

00:31:43,390 --> 00:31:46,450
source license or is associated with an

00:31:45,130 --> 00:31:50,049
open source license that requires

00:31:46,450 --> 00:31:52,600
royalty payment or restricts our use so

00:31:50,049 --> 00:31:55,270
a good example of that is the GPL 2.0

00:31:52,600 --> 00:31:57,760
license it's really restrictive right it

00:31:55,270 --> 00:32:00,549
requires you to publish your code as an

00:31:57,760 --> 00:32:02,470
open source project if you're using an

00:32:00,549 --> 00:32:07,030
open source library that has that

00:32:02,470 --> 00:32:09,400
license along with it so as a as a

00:32:07,030 --> 00:32:12,190
corporation that's trying to build

00:32:09,400 --> 00:32:15,160
products to generate revenue and wanting

00:32:12,190 --> 00:32:17,290
to use open source libraries to speed up

00:32:15,160 --> 00:32:20,410
the agility of the development of those

00:32:17,290 --> 00:32:22,120
applications you your corporate

00:32:20,410 --> 00:32:26,500
compliance policy maybe don't use

00:32:22,120 --> 00:32:27,669
libraries with those licenses so that's

00:32:26,500 --> 00:32:29,320
really what the the problem it's not

00:32:27,669 --> 00:32:32,260
necessarily the proprietary software

00:32:29,320 --> 00:32:33,490
it's really the utilization of the open

00:32:32,260 --> 00:32:35,530
source libraries that have these

00:32:33,490 --> 00:32:36,880
restrictions and in order for your

00:32:35,530 --> 00:32:39,250
corporate compliance teams to be able to

00:32:36,880 --> 00:32:41,160
make intelligent decisions and guidance

00:32:39,250 --> 00:32:44,290
about how to enforce those policies

00:32:41,160 --> 00:32:47,080
obviously visibility is important in

00:32:44,290 --> 00:32:48,820
terms of visibility of which libraries

00:32:47,080 --> 00:32:50,290
have which licenses associated with them

00:32:48,820 --> 00:32:51,700
you can't make intelligence decisions

00:32:50,290 --> 00:32:55,210
about how to enforce these compliance

00:32:51,700 --> 00:32:59,700
policies without that visibility thank

00:32:55,210 --> 00:33:02,020
you so the next one is a bit cheeky

00:32:59,700 --> 00:33:04,900
it's the scanner software in your

00:33:02,020 --> 00:33:08,410
showcase open source if not why should

00:33:04,900 --> 00:33:13,299
one trust what it scans yeah so it's not

00:33:08,410 --> 00:33:16,090
open source and like that the history of

00:33:13,299 --> 00:33:18,429
this product is that the founders of

00:33:16,090 --> 00:33:21,730
this company built another company

00:33:18,429 --> 00:33:24,460
before white source software right and

00:33:21,730 --> 00:33:27,610
they sold that company to a large

00:33:24,460 --> 00:33:29,380
software company and when that large

00:33:27,610 --> 00:33:30,940
software company acquired the small

00:33:29,380 --> 00:33:32,680
our company one of the things they

00:33:30,940 --> 00:33:35,050
required was a bill of materials of

00:33:32,680 --> 00:33:37,150
every open-source library that was in

00:33:35,050 --> 00:33:41,350
the software that the bigger company was

00:33:37,150 --> 00:33:42,640
buying and in audit reports about the

00:33:41,350 --> 00:33:45,730
known vulnerabilities with those

00:33:42,640 --> 00:33:46,840
libraries and the licenses associated

00:33:45,730 --> 00:33:48,190
those libraries and they were asking for

00:33:46,840 --> 00:33:49,870
that information for the proprietary

00:33:48,190 --> 00:33:52,180
code as well but open source libraries

00:33:49,870 --> 00:33:53,950
were part of that so that's how they did

00:33:52,180 --> 00:33:55,210
I our company the founders of our

00:33:53,950 --> 00:33:57,310
company of what source software

00:33:55,210 --> 00:33:58,870
identified that this was a need because

00:33:57,310 --> 00:34:01,570
they went through months and months of

00:33:58,870 --> 00:34:04,690
compiling these reports now using a tool

00:34:01,570 --> 00:34:10,960
like white source or other SCA tool as

00:34:04,690 --> 00:34:11,950
software analysis tools you can automate

00:34:10,960 --> 00:34:16,300
the process of getting that information

00:34:11,950 --> 00:34:19,750
why you should trust it so the the way

00:34:16,300 --> 00:34:22,540
that our software works is it commits

00:34:19,750 --> 00:34:26,200
will scan the code and look for the

00:34:22,540 --> 00:34:28,060
sha-1 hashes of the libraries that are

00:34:26,200 --> 00:34:30,820
in the code that are referenced in the

00:34:28,060 --> 00:34:32,950
code right so every file has a hash

00:34:30,820 --> 00:34:35,500
associated with it and we can identify

00:34:32,950 --> 00:34:37,510
those that are associated with known

00:34:35,500 --> 00:34:39,790
open-source libraries and compare the

00:34:37,510 --> 00:34:42,070
hashes of the libraries that are

00:34:39,790 --> 00:34:44,320
scanning agent finds in your code and

00:34:42,070 --> 00:34:46,060
compare it to our database so why you

00:34:44,320 --> 00:34:48,399
should trust that is because the sha-1

00:34:46,060 --> 00:34:50,080
hash is immutable right if there's a

00:34:48,399 --> 00:34:52,360
match then you know that the library

00:34:50,080 --> 00:34:54,629
we've scanned is the same library that's

00:34:52,360 --> 00:34:58,480
in our database of course it's true that

00:34:54,629 --> 00:35:00,610
developers may to parse apart take apart

00:34:58,480 --> 00:35:02,080
open-source libraries and use specific

00:35:00,610 --> 00:35:04,840
parts of it or create their own versions

00:35:02,080 --> 00:35:07,930
of it and therefore the the sha-1 hash

00:35:04,840 --> 00:35:09,610
hash matching algorithm will fail in

00:35:07,930 --> 00:35:11,590
those cases and that's why it's not the

00:35:09,610 --> 00:35:14,260
only one we use right we use other

00:35:11,590 --> 00:35:18,190
algorithms such as string matching on

00:35:14,260 --> 00:35:21,040
file names and other information other

00:35:18,190 --> 00:35:22,240
indicators metadata about the libraries

00:35:21,040 --> 00:35:24,040
that we can use to try and make those

00:35:22,240 --> 00:35:26,530
matches as well but the matching of the

00:35:24,040 --> 00:35:28,540
sha-1 hash is is the most reliable so

00:35:26,530 --> 00:35:30,160
that's why you should trust it right on

00:35:28,540 --> 00:35:33,490
top of that we have inside of white

00:35:30,160 --> 00:35:35,620
source a team of security analysts that

00:35:33,490 --> 00:35:38,710
spend all their time every day of every

00:35:35,620 --> 00:35:41,110
week doing the analysis of identifying

00:35:38,710 --> 00:35:42,640
the libraries that are published the

00:35:41,110 --> 00:35:43,180
known vulnerabilities associated with

00:35:42,640 --> 00:35:45,130
them in the late

00:35:43,180 --> 00:35:48,220
since its associated with them across a

00:35:45,130 --> 00:35:50,650
large variety of online resources as

00:35:48,220 --> 00:35:53,650
well as proprietary resources as well as

00:35:50,650 --> 00:35:55,780
our own scanning right we'll run our own

00:35:53,650 --> 00:35:57,309
scans in our lab and identified

00:35:55,780 --> 00:35:59,980
vulnerabilities that maybe haven't been

00:35:57,309 --> 00:36:01,930
published to the public yet as well so

00:35:59,980 --> 00:36:04,050
those are the reasons why you should

00:36:01,930 --> 00:36:06,880
trust us thank you

00:36:04,050 --> 00:36:08,619
and then we have another one here what

00:36:06,880 --> 00:36:10,930
what in your experience is the most

00:36:08,619 --> 00:36:13,000
important skill to teach developers and

00:36:10,930 --> 00:36:16,390
other project members to enable them to

00:36:13,000 --> 00:36:20,500
work with open-source yeah I think from

00:36:16,390 --> 00:36:22,000
my perspective you know I the word skill

00:36:20,500 --> 00:36:23,829
can mean a lot a lot of different things

00:36:22,000 --> 00:36:25,660
it could be you know your coding skills

00:36:23,829 --> 00:36:27,400
it could be communication skills it

00:36:25,660 --> 00:36:30,240
could be a lot of different things for

00:36:27,400 --> 00:36:33,760
me the biggest hurdle that I see

00:36:30,240 --> 00:36:38,230
development teams run into is an

00:36:33,760 --> 00:36:41,470
unwillingness to be open and honest

00:36:38,230 --> 00:36:44,710
about the findings that they run into if

00:36:41,470 --> 00:36:46,809
they identify a potential vulnerability

00:36:44,710 --> 00:36:48,910
they want to try and resolve it before

00:36:46,809 --> 00:36:51,150
the rest of the corporation of the rest

00:36:48,910 --> 00:36:54,010
of the team becomes aware of the issue

00:36:51,150 --> 00:36:57,460
and my experience having open

00:36:54,010 --> 00:36:59,440
communication being willing to be honest

00:36:57,460 --> 00:37:01,299
about what you are running into and what

00:36:59,440 --> 00:37:05,200
you are finding and asking for help

00:37:01,299 --> 00:37:07,599
right and you know being able to to

00:37:05,200 --> 00:37:10,540
communicate the findings clearly and

00:37:07,599 --> 00:37:12,520
consistently those are great skills to

00:37:10,540 --> 00:37:15,309
have and I think that developers and

00:37:12,520 --> 00:37:17,049
development teams that are willing to

00:37:15,309 --> 00:37:18,790
document the developers are great at

00:37:17,049 --> 00:37:20,530
documentation obviously but documenting

00:37:18,790 --> 00:37:23,470
things in a clear concise manner and

00:37:20,530 --> 00:37:25,359
being open about what it is that you're

00:37:23,470 --> 00:37:29,230
seeing relative to things that could be

00:37:25,359 --> 00:37:31,450
risky is is the the best skills that

00:37:29,230 --> 00:37:33,099
developers need to have in order to have

00:37:31,450 --> 00:37:36,940
success when they're working with open

00:37:33,099 --> 00:37:39,520
source right so of course these types of

00:37:36,940 --> 00:37:43,240
challenges revolve across into your

00:37:39,520 --> 00:37:44,710
proprietary code as well so you know

00:37:43,240 --> 00:37:46,599
just having your eyes open and

00:37:44,710 --> 00:37:48,670
understanding you know if we're going to

00:37:46,599 --> 00:37:50,859
be trying to use open source software as

00:37:48,670 --> 00:37:53,349
a mechanism to speed up our agility and

00:37:50,859 --> 00:37:55,180
to add new features and to make

00:37:53,349 --> 00:37:56,530
ourselves more dynamic and responsive to

00:37:55,180 --> 00:37:58,660
the market

00:37:56,530 --> 00:38:01,510
you need to be aware the fact that you

00:37:58,660 --> 00:38:03,310
may also be opening yourself up to risks

00:38:01,510 --> 00:38:08,590
associated either with vulnerabilities

00:38:03,310 --> 00:38:10,900
or with restrictive licenses and go into

00:38:08,590 --> 00:38:12,670
it knowing that and then use the best

00:38:10,900 --> 00:38:15,040
mechanisms that you have available in

00:38:12,670 --> 00:38:19,180
terms of both tooling and process to

00:38:15,040 --> 00:38:21,880
manage that risk thank you and then the

00:38:19,180 --> 00:38:24,340
last question is what's the biggest risk

00:38:21,880 --> 00:38:27,100
to open source these days would you say

00:38:24,340 --> 00:38:30,430
it's patent export regulations or

00:38:27,100 --> 00:38:33,220
perhaps something else well yeah so from

00:38:30,430 --> 00:38:34,900
a compliance perspective it really

00:38:33,220 --> 00:38:38,500
depends on the nature of your business

00:38:34,900 --> 00:38:41,620
so as an example you know as a company

00:38:38,500 --> 00:38:42,660
building a lot of products though some

00:38:41,620 --> 00:38:45,310
of those products may be utilized

00:38:42,660 --> 00:38:46,660
internally only right just by employees

00:38:45,310 --> 00:38:48,160
of your company and they're not actually

00:38:46,660 --> 00:38:51,370
exposed to the Internet or to your

00:38:48,160 --> 00:38:52,810
customers or things like that and so you

00:38:51,370 --> 00:38:55,540
know are there patent and copyright

00:38:52,810 --> 00:38:58,000
risks or export risks associated with

00:38:55,540 --> 00:39:00,370
that probably not but if you start

00:38:58,000 --> 00:39:01,660
exposed building app projects that use

00:39:00,370 --> 00:39:03,730
open source libraries and they're

00:39:01,660 --> 00:39:05,470
exposed to the Internet and to your

00:39:03,730 --> 00:39:08,800
customer bases or to your business

00:39:05,470 --> 00:39:11,620
partners then all of a sudden export

00:39:08,800 --> 00:39:14,830
regulation for sure comes into play GDP

00:39:11,620 --> 00:39:16,870
are comes into play you know any data

00:39:14,830 --> 00:39:23,260
privacy regulation will come into play

00:39:16,870 --> 00:39:26,530
and so you know being cognizant of both

00:39:23,260 --> 00:39:29,050
the security vulnerabilities and the

00:39:26,530 --> 00:39:31,450
license restrictions that are applying

00:39:29,050 --> 00:39:34,390
to the open source libraries that you

00:39:31,450 --> 00:39:37,270
are working with is the they're both

00:39:34,390 --> 00:39:40,330
risks they're both risky from different

00:39:37,270 --> 00:39:42,190
perspectives one is more litigious right

00:39:40,330 --> 00:39:45,220
we're talking about the licenses and the

00:39:42,190 --> 00:39:47,650
potential attempts to recoup royalties

00:39:45,220 --> 00:39:50,500
or to v8 to get control over your work

00:39:47,650 --> 00:39:53,140
product the vulnerabilities are going to

00:39:50,500 --> 00:39:54,880
be concerned relative to data privacy

00:39:53,140 --> 00:39:56,470
protections and there are other

00:39:54,880 --> 00:39:58,840
obviously issues that security

00:39:56,470 --> 00:40:02,280
vulnerabilities address as well long

00:39:58,840 --> 00:40:04,720
story short you know it the the the

00:40:02,280 --> 00:40:06,160
vulnerabilities are changing all the

00:40:04,720 --> 00:40:08,110
time new vulnerabilities are being

00:40:06,160 --> 00:40:09,910
published every day and so from my

00:40:08,110 --> 00:40:10,510
perspective I think that that is the

00:40:09,910 --> 00:40:13,000
larger

00:40:10,510 --> 00:40:15,750
risk because the patents are sorry the

00:40:13,000 --> 00:40:18,220
licenses that will impact things like

00:40:15,750 --> 00:40:19,990
attempts to control patents and export

00:40:18,220 --> 00:40:23,200
control licensing and things like that

00:40:19,990 --> 00:40:24,670
are pretty well founded and documented

00:40:23,200 --> 00:40:27,400
and the bigger issue there is just

00:40:24,670 --> 00:40:29,290
understanding which licenses applies to

00:40:27,400 --> 00:40:32,980
the libraries that you're using in your

00:40:29,290 --> 00:40:34,660
code thank you and that was the last

00:40:32,980 --> 00:40:37,380
question so I'd like to thank you for

00:40:34,660 --> 00:40:39,730
for your session and all your answers

00:40:37,380 --> 00:40:42,220
it's my pleasure thank you for hosting

00:40:39,730 --> 00:40:45,600
and we'll look forward to being in touch

00:40:42,220 --> 00:40:45,600
again in the future thank you so much

00:40:47,380 --> 00:40:51,430
and with that I would like to thank our

00:40:49,480 --> 00:40:53,880
speakers our sponsors and all our

00:40:51,430 --> 00:40:53,880
viewers

00:40:59,660 --> 00:41:01,720

YouTube URL: https://www.youtube.com/watch?v=iphBlAlxmrY


