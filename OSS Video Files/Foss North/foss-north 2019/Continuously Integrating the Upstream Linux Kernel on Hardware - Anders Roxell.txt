Title: Continuously Integrating the Upstream Linux Kernel on Hardware - Anders Roxell
Publication date: 2019-04-22
Playlist: foss-north 2019
Description: 
	The aim of this project is to continuously test one of the biggest open source projects on hardware and in qemu. The project started to continuously run functional tests on TS kernels. Tests that gets run are kselftest, ltp, and libhugetlbfs. Running tests on actual hardware isn’t as easy as you may think. Failing tests, hanging tests or flaky tests are some of the issues. The project that was going to run tests on real hardware is called Linux Kernel Functional Testing (LKFT). LKFT uses infrastructure software like Jenkins, LAVA, SQUAD and bugzilla for building, testing, displaying and tracking regressions of the LTS, mainline and next kernels. LKFT was created in early summer 2017, and the project has helped to enable LTS kernels being supported for 6 years. KernelCI is also used to build and boot testing, and today kernelCI also implements functional tests. --- Anders hates running tests and therefore he loves automating them. He has been working with Linux kernels for telecommunication (e.g. base stations, media gateways) as well as various drivers and RTOS’s for automotive systems (e.g. engine-, gearbox-platforms). He has also experience from NFV/Openstack. 

https://foss-north.se/2019/speakers-and-talks.html#aroxell
Captions: 
	00:00:15,830 --> 00:00:28,610
well hello everybody and thank you for

00:00:24,550 --> 00:00:30,830
being here and being awake that's great

00:00:28,610 --> 00:00:35,750
hopefully we'll be awake after this

00:00:30,830 --> 00:00:38,660
presentation as well however to entice

00:00:35,750 --> 00:00:42,020
you to stay awake I can mention that

00:00:38,660 --> 00:00:43,390
this presentation has been partly made

00:00:42,020 --> 00:00:48,620
by child labor

00:00:43,390 --> 00:00:56,809
well he's my solemn self and I did most

00:00:48,620 --> 00:01:00,980
the work so yep according to my song

00:00:56,809 --> 00:01:10,580
that's how I looked like and I mean I'm

00:01:00,980 --> 00:01:14,930
employed by leonora I've been working

00:01:10,580 --> 00:01:18,290
with the bed for ten plus years involved

00:01:14,930 --> 00:01:24,950
in Linux kernel for sex and testing from

00:01:18,290 --> 00:01:29,500
nine and confusing

00:01:24,950 --> 00:01:35,170
well so Lenora is a open source

00:01:29,500 --> 00:01:39,500
organization that improves Linux a norm

00:01:35,170 --> 00:01:47,090
in various places I'm just going to go

00:01:39,500 --> 00:01:54,250
through them so there's a project called

00:01:47,090 --> 00:02:00,440
LK of T and we're trying to test the

00:01:54,250 --> 00:02:07,599
long-term supported kernels that mainly

00:02:00,440 --> 00:02:13,550
Greg releases and during 2019 we tested

00:02:07,599 --> 00:02:17,610
76 67 stable releases and we reported

00:02:13,550 --> 00:02:28,280
the status within 48 hours

00:02:17,610 --> 00:02:33,870
always over 10 million tests is rolling

00:02:28,280 --> 00:02:38,400
that's a lot of data and here are the

00:02:33,870 --> 00:02:41,700
stable releases and when they are

00:02:38,400 --> 00:02:51,570
handled life and was a test made like

00:02:41,700 --> 00:02:58,200
and mixed and elk FK is just the project

00:02:51,570 --> 00:03:01,230
we use various products for instance we

00:02:58,200 --> 00:03:06,630
used lava to schedule the tests on our

00:03:01,230 --> 00:03:12,990
Hardware Jenkins to build our open

00:03:06,630 --> 00:03:16,770
another image and Scott is time back in

00:03:12,990 --> 00:03:20,820
that we used to hook him to send out the

00:03:16,770 --> 00:03:23,820
email reports to the list and we have a

00:03:20,820 --> 00:03:26,610
dashboard as well so that we go in and

00:03:23,820 --> 00:03:29,060
see both failed so not all good service

00:03:26,610 --> 00:03:29,060
so

00:03:32,670 --> 00:03:45,590
Wunderland tests but when Greg is

00:03:37,950 --> 00:03:51,560
pushing a new kernel to his to get tree

00:03:45,590 --> 00:03:54,180
we what trigger goes on in Jenkins to

00:03:51,560 --> 00:03:58,830
spin over openembedded bill that I

00:03:54,180 --> 00:04:01,230
mentioned and we that builds a kernel in

00:03:58,830 --> 00:04:06,900
a root filesystem and we send that off

00:04:01,230 --> 00:04:12,000
to lava that schedules tests on various

00:04:06,900 --> 00:04:17,390
horrors and we get some results back and

00:04:12,000 --> 00:04:17,390
I will go through that later on as well

00:04:19,489 --> 00:04:35,520
apparently now sorry so we test on arm

00:04:25,979 --> 00:04:39,870
64 and column and also x86 about the

00:04:35,520 --> 00:04:40,380
email reporting that the template heart

00:04:39,870 --> 00:04:43,800
looks like

00:04:40,380 --> 00:04:50,060
when we send out emails to the stable

00:04:43,800 --> 00:04:55,110
list and what I realize now is that I

00:04:50,060 --> 00:04:57,660
cut it just before so we can't see there

00:04:55,110 --> 00:05:01,740
were regressions in this particular

00:04:57,660 --> 00:05:12,990
round but you will see you can see

00:05:01,740 --> 00:05:13,780
regressions and fixes and that's it this

00:05:12,990 --> 00:05:23,050
is

00:05:13,780 --> 00:05:25,750
one view of the dashboard and this is

00:05:23,050 --> 00:05:30,930
for the next colonel that gets built

00:05:25,750 --> 00:05:30,930
every tag of the next Linux next

00:05:31,200 --> 00:05:42,250
repository and we're on hundred fifty

00:05:36,660 --> 00:05:50,800
test jobs in total and a lot of tests

00:05:42,250 --> 00:05:55,030
and if you drill down you can see - one

00:05:50,800 --> 00:05:59,920
of the bills you will see that we do a

00:05:55,030 --> 00:06:03,580
que set of tests and LTP and so on and

00:05:59,920 --> 00:06:06,160
so forth and if it really I mean even

00:06:03,580 --> 00:06:10,570
further you will see or you can see if

00:06:06,160 --> 00:06:14,290
okay self-test that will along a few

00:06:10,570 --> 00:06:22,600
chemists and all the other hardware and

00:06:14,290 --> 00:06:27,340
we can see it pass/fail escape and this

00:06:22,600 --> 00:06:36,910
is a build process but that you can that

00:06:27,340 --> 00:06:45,780
we get from Lincoln's so now to the

00:06:36,910 --> 00:06:45,780
interesting ish we do try on every

00:06:46,140 --> 00:06:53,439
release

00:06:47,719 --> 00:06:53,439
if it if we have a regression or if we

00:06:53,889 --> 00:06:59,119
want to want if the if someone in

00:06:57,319 --> 00:07:02,329
introduced a new test with your

00:06:59,119 --> 00:07:06,039
regression on that and we categorize

00:07:02,329 --> 00:07:10,999
them into these four components

00:07:06,039 --> 00:07:15,679
colonel-general say self test there is a

00:07:10,999 --> 00:07:29,629
test inside the Linux kernel test suite

00:07:15,679 --> 00:07:36,649
insulin the kernel and LTP so for our

00:07:29,629 --> 00:07:41,989
fire process we we have been iterating

00:07:36,649 --> 00:07:46,309
over that in five steps to end up where

00:07:41,989 --> 00:07:50,449
we are today we still have improvements

00:07:46,309 --> 00:07:54,439
to do but I'm going to try to walk you

00:07:50,449 --> 00:08:00,399
through how we ended up where we were we

00:07:54,439 --> 00:08:03,529
was real naive in the beginning so we

00:08:00,399 --> 00:08:06,589
it's really hard to get tests reliable

00:08:03,529 --> 00:08:10,429
because it was running on the developers

00:08:06,589 --> 00:08:17,689
desk but not in our environment so we

00:08:10,429 --> 00:08:20,899
added a skip list only for the tests

00:08:17,689 --> 00:08:24,469
that actually hang the board because if

00:08:20,899 --> 00:08:31,569
a test hang the board we couldn't get

00:08:24,469 --> 00:08:35,509
any results back from our test run and

00:08:31,569 --> 00:08:42,519
when we add the skip list was perfect

00:08:35,509 --> 00:08:46,870
ish we got failures a lot of failures so

00:08:42,519 --> 00:08:49,009
if someone asked us if how is the kernel

00:08:46,870 --> 00:08:56,680
can we release this one

00:08:49,009 --> 00:09:01,329
well 700 tests pass and 50 failed

00:08:56,680 --> 00:09:04,899
maybe not it's hard to say and even

00:09:01,329 --> 00:09:08,769
worse if it's 7000 testified that passes

00:09:04,899 --> 00:09:10,749
in 350 other faiths is it the same one

00:09:08,769 --> 00:09:20,319
that failed from the previous of we

00:09:10,749 --> 00:09:25,119
didn't though so we had to iterate again

00:09:20,319 --> 00:09:29,559
and we'll come up with a regression and

00:09:25,119 --> 00:09:36,459
fixes so if we compared it against the

00:09:29,559 --> 00:09:39,459
previous one and that worked good ish if

00:09:36,459 --> 00:09:46,899
but then we ended up with only flaky

00:09:39,459 --> 00:09:51,999
tests but had timing issues and just a

00:09:46,899 --> 00:10:03,339
badly written test so the data I got

00:09:51,999 --> 00:10:07,329
really really noisy I'm a bit I'm

00:10:03,339 --> 00:10:18,899
speaking a bit too fast I'm slippin some

00:10:07,329 --> 00:10:18,899
stuff well we will get a beer about

00:10:28,390 --> 00:10:36,790
was a downside if we did what we did

00:10:38,410 --> 00:10:51,130
we're hiding too much data which means

00:10:46,190 --> 00:10:54,950
that we if we skipped the flaky tests

00:10:51,130 --> 00:10:59,960
then we didn't know if they got fixed a

00:10:54,950 --> 00:11:07,089
lot so we actually ended up where we are

00:10:59,960 --> 00:11:13,310
today where we have we can annotate

00:11:07,089 --> 00:11:15,230
failures in the UI but then we have to

00:11:13,310 --> 00:11:18,200
do that manually and that's really

00:11:15,230 --> 00:11:24,170
tedious and no one wants to do that

00:11:18,200 --> 00:11:28,400
because it's boring and if I'm involved

00:11:24,170 --> 00:11:33,290
I will miss stuff that's not perfect so

00:11:28,400 --> 00:11:37,420
we need to figure out the way to make

00:11:33,290 --> 00:11:37,420
this ultimately in the future Oh

00:11:41,660 --> 00:11:59,900
so this will this means that we will

00:11:46,790 --> 00:12:09,170
have a lot of Q&A questions I'll walk is

00:11:59,900 --> 00:12:12,590
that what kind of hardware I or your

00:12:09,170 --> 00:12:14,990
running tests on and how do you queue up

00:12:12,590 --> 00:12:18,020
this hardware to test on because that

00:12:14,990 --> 00:12:20,330
hardware is going to be occupied by a

00:12:18,020 --> 00:12:22,250
test and you have several maybe a

00:12:20,330 --> 00:12:28,640
different test that is compatible with

00:12:22,250 --> 00:12:35,210
different hardware versions there were

00:12:28,640 --> 00:12:38,270
so few questions they're both hardware

00:12:35,210 --> 00:12:40,310
did we do on tests old was not the first

00:12:38,270 --> 00:12:45,050
one good

00:12:40,310 --> 00:12:49,430
I think I had some slide tried to say

00:12:45,050 --> 00:12:52,510
that so we run tests on high key dragon

00:12:49,430 --> 00:12:58,580
board and you know that is on 64 based

00:12:52,510 --> 00:13:06,280
and that x-15 from TI there is the 32

00:12:58,580 --> 00:13:06,280
based and then an extra six so ever

00:13:06,580 --> 00:13:12,980
that's just processor platforms on or do

00:13:11,030 --> 00:13:17,210
you have any like hardware or a specific

00:13:12,980 --> 00:13:20,150
test that's required like an aspire to

00:13:17,210 --> 00:13:22,880
some weird stuff going on and other

00:13:20,150 --> 00:13:26,300
hardware it may not have that on oh

00:13:22,880 --> 00:13:28,360
right sorry I misunderstood your

00:13:26,300 --> 00:13:28,360
question

00:13:31,480 --> 00:13:37,740
No

00:13:33,199 --> 00:13:41,790
not today there is a Buist be testing K

00:13:37,740 --> 00:13:43,819
self-test I'm not sure that if we are

00:13:41,790 --> 00:13:53,189
using that or not

00:13:43,819 --> 00:13:58,170
but there are no not in the moment and

00:13:53,189 --> 00:13:59,639
the second question was if you had

00:13:58,170 --> 00:14:02,759
different hardware how would you

00:13:59,639 --> 00:14:05,129
implement like a Q system for this you

00:14:02,759 --> 00:14:08,269
have to know which specific hardware

00:14:05,129 --> 00:14:13,110
have a specific USB version for instance

00:14:08,269 --> 00:14:15,959
another Hardware maybe not have that USB

00:14:13,110 --> 00:14:18,360
bus so you will have to like test

00:14:15,959 --> 00:14:23,480
specific test on specific Hardware

00:14:18,360 --> 00:14:23,480
versions how would you implement that

00:14:23,540 --> 00:14:32,879
good question actually our scheduler the

00:14:29,939 --> 00:14:36,779
hardware said let's schedule staff sorry

00:14:32,879 --> 00:14:39,899
our state let's captives the jobs to

00:14:36,779 --> 00:14:43,290
different ports this that is called

00:14:39,899 --> 00:14:52,370
novel and that is generic enough so we

00:14:43,290 --> 00:14:55,920
could specify that in inside our lovers

00:14:52,370 --> 00:15:00,029
how we described that hardware you can

00:14:55,920 --> 00:15:02,809
specify that you have this USB you know

00:15:00,029 --> 00:15:02,809
that SD card

00:15:12,820 --> 00:15:20,710
I think they did refuse it

00:15:16,480 --> 00:15:25,450
oh sorry

00:15:20,710 --> 00:15:33,000
it's the EFT validation Lenore org ii

00:15:25,450 --> 00:15:33,000
lost anymore

00:15:44,959 --> 00:15:50,880
so is your gold test mainly the Linux

00:15:49,290 --> 00:15:52,949
functionality like the core kernel

00:15:50,880 --> 00:15:56,010
functionality or are you planning on

00:15:52,949 --> 00:15:58,829
extending this to particular drivers as

00:15:56,010 --> 00:16:01,139
well for example the previous question

00:15:58,829 --> 00:16:04,050
was about testing for example the SPI

00:16:01,139 --> 00:16:08,399
bus and I can imagine other buses like

00:16:04,050 --> 00:16:10,829
i2c and SPI USB and so on that has

00:16:08,399 --> 00:16:13,500
problems that you won't really find in

00:16:10,829 --> 00:16:16,019
just testing like core kernel function

00:16:13,500 --> 00:16:17,730
with a sorry my question is in short are

00:16:16,019 --> 00:16:24,899
you planning on extending testing to

00:16:17,730 --> 00:16:25,699
various buses as well yes that's the

00:16:24,899 --> 00:16:33,540
short answer

00:16:25,699 --> 00:16:38,660
but finding good tests that's the

00:16:33,540 --> 00:16:42,209
interesting part I think as a follow-up

00:16:38,660 --> 00:16:44,579
will you are you planning on having a

00:16:42,209 --> 00:16:46,980
sort of full coverage of all hardware

00:16:44,579 --> 00:16:49,649
support in the Linux kernel because I've

00:16:46,980 --> 00:16:52,769
been battling at work with a driver

00:16:49,649 --> 00:16:57,269
accepted into the kernel which was less

00:16:52,769 --> 00:17:00,510
than stellar and wasted a lot of time in

00:16:57,269 --> 00:17:04,230
having to work through the bugs in it

00:17:00,510 --> 00:17:06,630
and apparently it wasn't tested very

00:17:04,230 --> 00:17:09,630
well I suppose that's the subsystem

00:17:06,630 --> 00:17:11,189
maintainer job to make sure that happens

00:17:09,630 --> 00:17:14,809
but it would be nice to have that as

00:17:11,189 --> 00:17:14,809
part of an automated testing as well

00:17:16,189 --> 00:17:24,839
angry and I mentioned K self-test I

00:17:21,569 --> 00:17:30,890
think the kernel has written test suite

00:17:24,839 --> 00:17:33,900
entry and that's where we should add

00:17:30,890 --> 00:17:40,190
tests because that that's the place that

00:17:33,900 --> 00:17:43,340
maintainer cares about running tests

00:17:40,190 --> 00:17:43,340
thank you

00:17:46,400 --> 00:17:52,350
not so much as a question about adding

00:17:49,260 --> 00:17:54,630
to that the problem is it's take so much

00:17:52,350 --> 00:17:58,890
resources to just run tests on all of

00:17:54,630 --> 00:18:01,110
the drivers so we basically need the

00:17:58,890 --> 00:18:02,790
hora manufacturers to actually fly the

00:18:01,110 --> 00:18:06,900
hardware or provide the resources to run

00:18:02,790 --> 00:18:10,410
the tests so it's it needs to be a

00:18:06,900 --> 00:18:15,950
community effort in results you know to

00:18:10,410 --> 00:18:18,990
test it all unfortunately yeah and I can

00:18:15,950 --> 00:18:27,210
actually say that there are some

00:18:18,990 --> 00:18:31,260
projects like Karla CI that tries to do

00:18:27,210 --> 00:18:36,960
that and there are labs in hardware

00:18:31,260 --> 00:18:39,480
vendors labs so we they we spin up a

00:18:36,960 --> 00:18:47,120
novel out there that connects to Cana CI

00:18:39,480 --> 00:18:51,630
and we wrong but they build and Boo test

00:18:47,120 --> 00:18:58,429
that spins off that there are labs in

00:18:51,630 --> 00:19:02,090
the lab so starting together and we

00:18:58,429 --> 00:19:06,750
there are a few functional tests in

00:19:02,090 --> 00:19:08,330
currency I today and we have more over

00:19:06,750 --> 00:19:15,260
there as well

00:19:08,330 --> 00:19:15,260
there will be performance tests as well

00:19:16,130 --> 00:19:20,660
voting and guilty and currency I

00:19:26,710 --> 00:19:38,620
this well I work on both and our goal is

00:19:33,850 --> 00:19:44,200
to move over towards currency and help

00:19:38,620 --> 00:19:49,660
them which makes sense to get more

00:19:44,200 --> 00:19:52,480
people so you talked about the flaky

00:19:49,660 --> 00:19:54,100
tests but they because of poorly written

00:19:52,480 --> 00:19:56,130
tests or is it just because of the

00:19:54,100 --> 00:19:59,650
hardware it says done is a bit flaky or

00:19:56,130 --> 00:20:06,960
what is the races for largest failing

00:19:59,650 --> 00:20:10,150
intimately or all the time shortly yeah

00:20:06,960 --> 00:20:12,030
so is it running more in queue to get

00:20:10,150 --> 00:20:15,480
rid of the hardware to test it or is it

00:20:12,030 --> 00:20:22,860
certain option to get more stable

00:20:15,480 --> 00:20:26,260
failure a tyre soor we don't I think we

00:20:22,860 --> 00:20:30,730
we need to test it on real hardware we

00:20:26,260 --> 00:20:33,330
can test hello give me but we need real

00:20:30,730 --> 00:20:33,330
hardware as well

00:20:53,210 --> 00:20:59,879
so once a new tree has been published do

00:20:57,690 --> 00:21:02,249
you have an idea of approximately how

00:20:59,879 --> 00:21:06,769
long you have to wait until all of your

00:21:02,249 --> 00:21:06,769
tests are run and you get the results

00:21:08,809 --> 00:21:21,600
two long hours days we got ours another

00:21:19,440 --> 00:21:24,360
follow-up question on that on the

00:21:21,600 --> 00:21:26,970
hardware resources who who provides them

00:21:24,360 --> 00:21:29,639
and pays for the hardware resources that

00:21:26,970 --> 00:21:34,889
you run the tests on and and the

00:21:29,639 --> 00:21:38,509
orchestration server since all we take

00:21:34,889 --> 00:21:41,490
care of the hard way right now and we I

00:21:38,509 --> 00:21:44,309
can't I really don't know if we buy them

00:21:41,490 --> 00:21:47,309
or we get them from ok remember company

00:21:44,309 --> 00:21:52,529
so is there a plan to make it kind of

00:21:47,309 --> 00:21:54,570
more distributed having multiple

00:21:52,529 --> 00:21:56,629
companies or individuals providing

00:21:54,570 --> 00:22:01,440
hardware resources in some kind of

00:21:56,629 --> 00:22:05,129
network to run the tests that's where

00:22:01,440 --> 00:22:08,610
currency area comes in yeah I've heard

00:22:05,129 --> 00:22:13,820
of sort of plans in that project but I

00:22:08,610 --> 00:22:20,749
wasn't sure on the details that project

00:22:13,820 --> 00:22:26,720
today have individuals and companies

00:22:20,749 --> 00:22:26,720
having very labs that connects to

00:22:27,139 --> 00:22:35,369
currency I okay so the Lenora might be

00:22:32,519 --> 00:22:40,559
playing a part in that whole network

00:22:35,369 --> 00:22:44,360
innocence yes we we we do that today we

00:22:40,559 --> 00:22:44,360
contribute ok thank you sir

00:22:48,320 --> 00:22:50,320
Oh

00:23:24,169 --> 00:23:31,380
all right any more questions I have a

00:23:29,250 --> 00:23:35,120
question everything

00:23:31,380 --> 00:23:42,890
the testing is for who likes to do tests

00:23:35,120 --> 00:23:42,890
to write tests or to test yeah

00:23:43,610 --> 00:23:53,750
good good remember we need more than two

00:23:57,020 --> 00:24:01,880
well thank you

00:24:02,070 --> 00:24:04,130
you

00:24:13,460 --> 00:24:15,520

YouTube URL: https://www.youtube.com/watch?v=doYHZ3zZzOw


