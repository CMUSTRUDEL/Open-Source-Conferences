Title: Let's Lisp like it's 1959 - Kristoffer Grönlund
Publication date: 2019-04-19
Playlist: foss-north 2019
Description: 
	One of my favorite papers in computer science is the original LISP paper by John McCarthy. Written in 1959, it describes something mind-bending: The interpreter for a language in the language that it interprets. If you understand this paper, you understand how computation works.
A few years ago, I decided to implement the interpreter described in the paper, and this project turned out to be surprisingly popular. In this presentation, I'll show how to implement the original LISP interpreter in C, and together we will marvel at its elegance.

---

Kristoffer lärde sig programmera på en Commodore 64 med drömmar om att en dag bli spelutvecklare. Efter att ha levt drömmen på Massive i Malmö i ett antal år växte intresset för fri mjukvara, och numera jobbar han på SUSE där han hackar på diverse projekt relaterade till High Availability.

https://foss-north.se/2019/speakers-and-talks.html#kgronlund
Captions: 
	00:00:15,869 --> 00:00:20,650
all right I figure need to begin because

00:00:18,100 --> 00:00:25,119
I'm short of time as it is and now we're

00:00:20,650 --> 00:00:27,670
nine minutes late so yes I'm gonna talk

00:00:25,119 --> 00:00:30,009
about Lisp first of all I did this talk

00:00:27,670 --> 00:00:32,619
in January at Linda's come for you New

00:00:30,009 --> 00:00:35,430
Zealand have any of you how many of you

00:00:32,619 --> 00:00:37,570
have seen the video that on YouTube

00:00:35,430 --> 00:00:39,519
alright it's not too many that's good

00:00:37,570 --> 00:00:42,670
alright so then I'll do it kind of the

00:00:39,519 --> 00:00:44,050
same talk because that time I only

00:00:42,670 --> 00:00:46,210
managed to do like half the talks I

00:00:44,050 --> 00:00:50,229
could do the second half now but okay

00:00:46,210 --> 00:00:51,760
we'll do the same one that's good so my

00:00:50,229 --> 00:00:56,530
name is Christopher gorilla I worked for

00:00:51,760 --> 00:00:58,479
Susur this german sort of company it's

00:00:56,530 --> 00:01:04,479
actually owned by a Swedish company now

00:00:58,479 --> 00:01:06,100
called akiti since some time in March so

00:01:04,479 --> 00:01:07,750
it's kind of a Swedish company so you

00:01:06,100 --> 00:01:08,740
know if you want to work for up the

00:01:07,750 --> 00:01:10,210
source you want to work for a Swedish

00:01:08,740 --> 00:01:13,600
company where do you like actual open

00:01:10,210 --> 00:01:16,750
source like yeah there's one there's and

00:01:13,600 --> 00:01:18,790
I work from home which is great I also

00:01:16,750 --> 00:01:21,760
do a podcast called the cord snack if

00:01:18,790 --> 00:01:23,230
you've heard that one it's in Swedish

00:01:21,760 --> 00:01:24,460
but I'm gonna do this talk in English

00:01:23,230 --> 00:01:29,860
because I think there might be some

00:01:24,460 --> 00:01:31,690
English speakers so this talk is started

00:01:29,860 --> 00:01:35,140
with me reading this paper which is the

00:01:31,690 --> 00:01:39,910
kind of the original Lisp paper so there

00:01:35,140 --> 00:01:42,010
are some earlier ones there are

00:01:39,910 --> 00:01:46,260
publications but this is like the first

00:01:42,010 --> 00:01:48,460
like real write-up of what Elizabeth and

00:01:46,260 --> 00:01:51,690
yeah it's the part one but there's no

00:01:48,460 --> 00:01:56,140
part to the he never wrote the same part

00:01:51,690 --> 00:01:58,000
and yeah I call it like let's list like

00:01:56,140 --> 00:02:00,850
this 1959 by actually I saw that the

00:01:58,000 --> 00:02:03,010
papers written in 1960 so I was off by

00:02:00,850 --> 00:02:09,909
one year but it's close enough I thought

00:02:03,010 --> 00:02:12,519
it's like exactly 60 years ago and the

00:02:09,909 --> 00:02:14,890
abstract of this talk says that I'm

00:02:12,519 --> 00:02:16,659
gonna implement a lisp and I do have

00:02:14,890 --> 00:02:18,940
that talk in the toy like last time I

00:02:16,659 --> 00:02:20,860
did this talk I never even got that part

00:02:18,940 --> 00:02:21,940
I'll see if I go a bit faster maybe I

00:02:20,860 --> 00:02:26,650
actually get to the part where we

00:02:21,940 --> 00:02:29,110
actually write Lisp implementation but

00:02:26,650 --> 00:02:29,410
yeah I started looking at the history of

00:02:29,110 --> 00:02:31,030
this

00:02:29,410 --> 00:02:34,360
and I got to fascinating so the talk is

00:02:31,030 --> 00:02:37,330
almost all about that so we're going to

00:02:34,360 --> 00:02:40,450
start in around 1955

00:02:37,330 --> 00:02:43,720
so in 1955 Marvin Minsky and John

00:02:40,450 --> 00:02:46,540
McCarthy like the founders of AI started

00:02:43,720 --> 00:02:50,530
a separate lab at MIT called the AI lab

00:02:46,540 --> 00:02:52,300
and John McCarthy is the the person who

00:02:50,530 --> 00:02:53,650
coined the term artificial intelligence

00:02:52,300 --> 00:02:57,010
so he was the one who came up with the

00:02:53,650 --> 00:02:59,080
idea and their background was mainly

00:02:57,010 --> 00:03:03,610
math so they came from the MIT math

00:02:59,080 --> 00:03:06,580
department and in logic so formal logic

00:03:03,610 --> 00:03:09,400
and so their their vision of AI or how

00:03:06,580 --> 00:03:10,780
computers worked were also based on math

00:03:09,400 --> 00:03:13,000
and logic so they thought you know like

00:03:10,780 --> 00:03:14,530
oh if if a computer is gonna work like a

00:03:13,000 --> 00:03:16,060
human the computer is gonna be very

00:03:14,530 --> 00:03:18,480
logical because humans are extremely

00:03:16,060 --> 00:03:24,250
logical because that's how they were and

00:03:18,480 --> 00:03:26,620
they eventually start figuring out so

00:03:24,250 --> 00:03:30,390
this is a picture of Joe McCarthy much

00:03:26,620 --> 00:03:35,350
later this is when he was playing chess

00:03:30,390 --> 00:03:38,920
against a team in computers in 1967 and

00:03:35,350 --> 00:03:41,800
the Soviet team won three to one

00:03:38,920 --> 00:03:44,860
which may be why generally we haven't

00:03:41,800 --> 00:03:49,390
heard about this that much I can see in

00:03:44,860 --> 00:03:51,910
like Western European society a Soviet

00:03:49,390 --> 00:03:53,740
win was not a good thing actually John

00:03:51,910 --> 00:03:58,300
McCarthy's Paris were both communists

00:03:53,740 --> 00:04:00,550
and he spoke fluent Russian and he got a

00:03:58,300 --> 00:04:04,090
lot of his passion for math and logic

00:04:00,550 --> 00:04:06,250
from reading Russian language books on

00:04:04,090 --> 00:04:08,860
math so that's kind of an interesting

00:04:06,250 --> 00:04:10,630
because all the development of Lisp and

00:04:08,860 --> 00:04:12,010
computers in general are like based in

00:04:10,630 --> 00:04:13,989
Second World War and then in the Cold

00:04:12,010 --> 00:04:15,880
War afterwards so all this is happening

00:04:13,989 --> 00:04:17,859
during the Cold War and actually one of

00:04:15,880 --> 00:04:20,560
the people who like mainly involved in

00:04:17,859 --> 00:04:23,050
the American side actually can talk

00:04:20,560 --> 00:04:25,450
fluent Russian - the people are doing

00:04:23,050 --> 00:04:27,600
computer Doulton on the other side so I

00:04:25,450 --> 00:04:32,860
thought that was kind of an interesting

00:04:27,600 --> 00:04:38,050
thing but yeah so the idea that they had

00:04:32,860 --> 00:04:41,289
at the MIT levels to make computers work

00:04:38,050 --> 00:04:42,560
like people so like you would have a

00:04:41,289 --> 00:04:46,300
computer that

00:04:42,560 --> 00:04:49,010
actually think like a human being and

00:04:46,300 --> 00:04:50,690
the thing is they at the time they

00:04:49,010 --> 00:04:52,220
thought that this is like really close

00:04:50,690 --> 00:04:54,470
like they they already had this

00:04:52,220 --> 00:04:56,630
incredibly advanced computers they can

00:04:54,470 --> 00:04:57,800
basically do anything it's just around

00:04:56,630 --> 00:04:59,930
the corner that they're actually gonna

00:04:57,800 --> 00:05:01,730
start thinking for themselves and it's

00:04:59,930 --> 00:05:03,980
just like kind of we just need to figure

00:05:01,730 --> 00:05:06,919
out a few small things and we're gonna

00:05:03,980 --> 00:05:12,220
have it turns out it's actually really

00:05:06,919 --> 00:05:14,660
difficult to make computers think and

00:05:12,220 --> 00:05:18,680
this is actually a title of a paper that

00:05:14,660 --> 00:05:22,220
Joe McCarthy published in 2006 I I

00:05:18,680 --> 00:05:24,440
actually think that you could say human

00:05:22,220 --> 00:05:26,210
level I a AI is harder than it seems in

00:05:24,440 --> 00:05:28,160
2019 as well

00:05:26,210 --> 00:05:30,110
I think there's like a second

00:05:28,160 --> 00:05:32,090
renaissance in like AI machine learning

00:05:30,110 --> 00:05:33,530
and it's like always gonna be great I'm

00:05:32,090 --> 00:05:42,800
not impressed but you know we can

00:05:33,530 --> 00:05:46,220
discuss that so in nineteen 1956 there

00:05:42,800 --> 00:05:48,680
was a program developed well so at this

00:05:46,220 --> 00:05:50,660
time all of the computer programs

00:05:48,680 --> 00:05:52,729
computer programming languages were

00:05:50,660 --> 00:05:55,070
machine level languages like assembly

00:05:52,729 --> 00:05:59,120
languages specific to particular

00:05:55,070 --> 00:06:00,530
computers and so in 1956 IPL 2 was

00:05:59,120 --> 00:06:03,560
developed which was the first list

00:06:00,530 --> 00:06:09,650
processing language but it was still an

00:06:03,560 --> 00:06:12,020
assembly language in 1957 and Fortran

00:06:09,650 --> 00:06:14,150
was released and Fortran was the first

00:06:12,020 --> 00:06:15,380
high-level language so this is the first

00:06:14,150 --> 00:06:17,510
programming language that you could

00:06:15,380 --> 00:06:19,610
program different machines with so

00:06:17,510 --> 00:06:21,080
previously every language was an

00:06:19,610 --> 00:06:22,789
assembly language is specific to a

00:06:21,080 --> 00:06:24,200
particular architecture and because

00:06:22,789 --> 00:06:26,539
computer was still new they didn't have

00:06:24,200 --> 00:06:28,900
like processes standards or like

00:06:26,539 --> 00:06:31,039
instruction set standards so every

00:06:28,900 --> 00:06:33,229
computer was completely different and

00:06:31,039 --> 00:06:35,240
every computer had to be programmed

00:06:33,229 --> 00:06:38,479
completely differently so Fortran was a

00:06:35,240 --> 00:06:42,440
huge development and these were kind of

00:06:38,479 --> 00:06:44,389
the two foundational ideas the fed into

00:06:42,440 --> 00:06:46,520
Lisp so young McCarthy was really

00:06:44,389 --> 00:06:50,349
impressed with IPL and the ability to

00:06:46,520 --> 00:06:53,150
use lists to represent ideas or

00:06:50,349 --> 00:06:55,220
sentences of thoughts and process on

00:06:53,150 --> 00:06:56,360
those and then he was really impressed

00:06:55,220 --> 00:06:57,770
by Fortran

00:06:56,360 --> 00:07:00,949
like a higher-level language that you

00:06:57,770 --> 00:07:04,370
could use across multiple machines so in

00:07:00,949 --> 00:07:09,020
1958 he started work on on Lisp which

00:07:04,370 --> 00:07:11,229
brings us them to you 99 so at the AI

00:07:09,020 --> 00:07:15,050
lab and they managed to get hold of

00:07:11,229 --> 00:07:16,909
computer which is kind of another

00:07:15,050 --> 00:07:19,759
interesting ideas like computers were

00:07:16,909 --> 00:07:22,479
actually very rare at the time and it

00:07:19,759 --> 00:07:24,409
took a few years for the the AI lab

00:07:22,479 --> 00:07:26,180
devoted to making computer saying to

00:07:24,409 --> 00:07:28,789
actually get a computer but at this time

00:07:26,180 --> 00:07:33,259
they managed to get one they had an IBM

00:07:28,789 --> 00:07:35,689
704 and I think this is an IBM 704 that

00:07:33,259 --> 00:07:39,500
you can see in the picture and it

00:07:35,689 --> 00:07:43,189
consists of a bunch of parts there are

00:07:39,500 --> 00:07:45,860
big as big as fridges the one in the

00:07:43,189 --> 00:07:47,509
front is the punch card reader so that's

00:07:45,860 --> 00:07:49,849
where you see the program into the

00:07:47,509 --> 00:07:51,889
computer and use it do it using punch

00:07:49,849 --> 00:07:55,219
cards with our piece of paper with holes

00:07:51,889 --> 00:07:57,949
punched out of them representing once

00:07:55,219 --> 00:07:59,599
the zeros and so you feed those one by

00:07:57,949 --> 00:08:01,400
one into the punch card reader and then

00:07:59,599 --> 00:08:03,349
the punch card reader feeds that into

00:08:01,400 --> 00:08:04,759
the processor which is another one of

00:08:03,349 --> 00:08:06,949
these big machines that has a lot of

00:08:04,759 --> 00:08:10,009
blinking lights showing the state of the

00:08:06,949 --> 00:08:12,080
registers and so on and then if you're

00:08:10,009 --> 00:08:14,360
lucky the processor then produced some

00:08:12,080 --> 00:08:15,379
output to the printer which prints that

00:08:14,360 --> 00:08:20,240
on a piece of paper and then you can

00:08:15,379 --> 00:08:23,770
look at the paper okay and so I have

00:08:20,240 --> 00:08:26,449
this wonderful quote that I want to read

00:08:23,770 --> 00:08:29,300
that I actually I should have written

00:08:26,449 --> 00:08:32,690
down where I got the quote but if you

00:08:29,300 --> 00:08:36,169
google it you'll find it it may be hard

00:08:32,690 --> 00:08:37,579
to visualize a 704 but to comprehend the

00:08:36,169 --> 00:08:40,039
place it held in the public imagination

00:08:37,579 --> 00:08:42,649
as the type specimen of all the computer

00:08:40,039 --> 00:08:44,690
was a collection of mysterious hulking

00:08:42,649 --> 00:08:47,149
gray cabinets approachable only through

00:08:44,690 --> 00:08:49,070
the intercession of the operator in the

00:08:47,149 --> 00:08:51,769
specially built computer room the

00:08:49,070 --> 00:08:54,050
operator sets switches push buttons and

00:08:51,769 --> 00:08:55,970
examine panels of flashing lights while

00:08:54,050 --> 00:08:58,430
assistants attended various whirring

00:08:55,970 --> 00:09:00,079
clanking in chattering devices rushing

00:08:58,430 --> 00:09:02,720
to a--from with stacks of crippling

00:09:00,079 --> 00:09:05,750
printed paper decks of weirdly punched

00:09:02,720 --> 00:09:08,510
cards and reels of brown ribbon all to

00:09:05,750 --> 00:09:10,130
the background hum of the machine

00:09:08,510 --> 00:09:11,360
little incense and a few candles and you

00:09:10,130 --> 00:09:14,480
could be forgiven for thinking these

00:09:11,360 --> 00:09:17,030
were the rights of some Oracle shrine so

00:09:14,480 --> 00:09:20,630
it's very fascinating very mysterious to

00:09:17,030 --> 00:09:24,800
people in general like computers how do

00:09:20,630 --> 00:09:26,060
they work I have a video that I can't

00:09:24,800 --> 00:09:29,450
show you because I'm not on the internet

00:09:26,060 --> 00:09:31,040
but you can see the link all the slides

00:09:29,450 --> 00:09:34,190
are gonna be online later if you want to

00:09:31,040 --> 00:09:37,220
find this stuff but that's not of a 704

00:09:34,190 --> 00:09:38,930
that's of 1401 which is the computer

00:09:37,220 --> 00:09:42,740
that they have at the Computer History

00:09:38,930 --> 00:09:44,390
lab in California which is actually

00:09:42,740 --> 00:09:46,520
working today so if you ever go to

00:09:44,390 --> 00:09:50,570
California recommend I think it's in San

00:09:46,520 --> 00:09:52,370
Francisco yeah the Bay Area if you ever

00:09:50,570 --> 00:09:53,420
go there I would love to go there and

00:09:52,370 --> 00:09:56,390
you can actually see one of these

00:09:53,420 --> 00:09:58,640
working and I was told when I did this

00:09:56,390 --> 00:10:04,520
talk last time from someone had been

00:09:58,640 --> 00:10:07,400
there that Steve what is anyway the

00:10:04,520 --> 00:10:09,830
space war guy meant to the first he's

00:10:07,400 --> 00:10:11,480
gonna show up later anyway he is there

00:10:09,830 --> 00:10:16,100
in the lab if you're lucky and we'll

00:10:11,480 --> 00:10:17,780
show you how to use the computer but

00:10:16,100 --> 00:10:20,510
yeah I started looking into like the

00:10:17,780 --> 00:10:23,000
early computers around Lisp and at the

00:10:20,510 --> 00:10:25,010
time which is like right at the start of

00:10:23,000 --> 00:10:26,930
computers in general and that caught me

00:10:25,010 --> 00:10:30,290
looking into kind of the early history

00:10:26,930 --> 00:10:31,940
of computers overall and so that of

00:10:30,290 --> 00:10:35,750
course brings me to ENIAC which is kind

00:10:31,940 --> 00:10:39,920
of the first computer turns out actually

00:10:35,750 --> 00:10:42,560
not so during before we had computers as

00:10:39,920 --> 00:10:45,800
machines there were computers as people

00:10:42,560 --> 00:10:47,540
so the term computer was actually a kind

00:10:45,800 --> 00:10:48,950
of a job that you would have you would

00:10:47,540 --> 00:10:50,240
be the computer that would actually do

00:10:48,950 --> 00:10:53,980
the job of doing all the calculations

00:10:50,240 --> 00:10:56,690
for solving a problem and during the war

00:10:53,980 --> 00:11:00,350
basically all of the computers were

00:10:56,690 --> 00:11:02,750
women so all of that men were out dying

00:11:00,350 --> 00:11:04,340
in war and all the women were doing

00:11:02,750 --> 00:11:08,090
computations and what we're doing was

00:11:04,340 --> 00:11:09,890
calculating missile trajectories so the

00:11:08,090 --> 00:11:11,900
military needed to know like when we

00:11:09,890 --> 00:11:13,220
shoot a missile at the enemy where is it

00:11:11,900 --> 00:11:15,740
gonna land and that's a lot of

00:11:13,220 --> 00:11:18,740
complicated calculations and they assign

00:11:15,740 --> 00:11:20,240
those tasks to big rooms of full of

00:11:18,740 --> 00:11:21,440
women doing all these calculations by

00:11:20,240 --> 00:11:23,000
hand

00:11:21,440 --> 00:11:24,680
at the end of the war they were starting

00:11:23,000 --> 00:11:25,640
to develop computers like machine

00:11:24,680 --> 00:11:28,279
computers they could do these

00:11:25,640 --> 00:11:30,830
calculations so the first computers were

00:11:28,279 --> 00:11:32,930
dedicated to calculating missile

00:11:30,830 --> 00:11:34,790
trajectories that was kind of the idea

00:11:32,930 --> 00:11:37,130
and so ENIAC was built for that purpose

00:11:34,790 --> 00:11:39,410
and when they built the anti-oxidant

00:11:37,130 --> 00:11:42,050
needed someone to actually set the

00:11:39,410 --> 00:11:44,660
program and do the programming and this

00:11:42,050 --> 00:11:47,510
was before program was even a term and

00:11:44,660 --> 00:11:49,580
so they had this even computers and of

00:11:47,510 --> 00:11:51,320
course they then picked some of the

00:11:49,580 --> 00:11:53,240
human computers and said okay now your

00:11:51,320 --> 00:11:53,630
job is to tell the machine computer what

00:11:53,240 --> 00:11:57,040
to do

00:11:53,630 --> 00:12:01,370
and so these were the first programmers

00:11:57,040 --> 00:12:05,300
and it was a team led by a woman called

00:12:01,370 --> 00:12:10,490
Jean Jennings that programmed the ENIAC

00:12:05,300 --> 00:12:11,899
there were six women and yeah that's her

00:12:10,490 --> 00:12:14,000
in the picture I think that's her on the

00:12:11,899 --> 00:12:17,630
left and then there's friend violence on

00:12:14,000 --> 00:12:19,730
the right and the history of actually

00:12:17,630 --> 00:12:20,990
digging up this is fascinating I'm not

00:12:19,730 --> 00:12:23,029
gonna go into that too much but there's

00:12:20,990 --> 00:12:24,470
project called the ENIAC programmers and

00:12:23,029 --> 00:12:28,450
I think it's that any programmer start

00:12:24,470 --> 00:12:30,650
org we can read about that so in the 90s

00:12:28,450 --> 00:12:32,209
there was a woman who started looking

00:12:30,650 --> 00:12:33,860
into this and got fascinated with

00:12:32,209 --> 00:12:35,630
finding out that oh actually there were

00:12:33,860 --> 00:12:37,880
all the early programmers from women and

00:12:35,630 --> 00:12:39,440
this is like history that no one had

00:12:37,880 --> 00:12:41,270
talked about and she actually managed to

00:12:39,440 --> 00:12:44,120
find some of them and interview them and

00:12:41,270 --> 00:12:47,240
so she has this documentary where you

00:12:44,120 --> 00:12:49,670
can see the interviews with them but

00:12:47,240 --> 00:12:51,260
yeah I have another quote that I read

00:12:49,670 --> 00:12:53,630
which I think illustrates kind of the

00:12:51,260 --> 00:12:55,520
the problem is that because they were

00:12:53,630 --> 00:12:57,890
women it was assumed that the work they

00:12:55,520 --> 00:13:00,470
did must not have been very difficult so

00:12:57,890 --> 00:13:02,540
at a time everyone was very impressed by

00:13:00,470 --> 00:13:04,880
the big machines making noise and

00:13:02,540 --> 00:13:06,740
blinking lights and no one noticed the

00:13:04,880 --> 00:13:09,410
people actually working machines and

00:13:06,740 --> 00:13:11,770
they were kind of invisible so but I

00:13:09,410 --> 00:13:15,070
think as programmers it's or as

00:13:11,770 --> 00:13:17,660
developers it's kind of up to us to

00:13:15,070 --> 00:13:20,660
rediscover and honor the history of

00:13:17,660 --> 00:13:24,950
programming and so in Sweden we actually

00:13:20,660 --> 00:13:26,839
have a similar history the first

00:13:24,950 --> 00:13:32,110
computers in Sweden were built in the

00:13:26,839 --> 00:13:32,110
50s and they were called bark and desk

00:13:32,850 --> 00:13:38,729
and one of the people working on those

00:13:35,819 --> 00:13:42,149
computers were a woman called Elsa : boo

00:13:38,729 --> 00:13:44,039
in stolt-nielsen and she is actually

00:13:42,149 --> 00:13:46,410
still around and has done some

00:13:44,039 --> 00:13:47,999
interviews lately so you can find

00:13:46,410 --> 00:13:51,329
information about her and the work she

00:13:47,999 --> 00:13:54,689
did but I thought that was pretty cool

00:13:51,329 --> 00:14:00,059
I'm not gonna go into her as either but

00:13:54,689 --> 00:14:03,529
yeah you can find more about her when I

00:14:00,059 --> 00:14:06,539
was looking into this I also came across

00:14:03,529 --> 00:14:09,179
this woman which is it's not really

00:14:06,539 --> 00:14:13,439
related to Lisp or history of computer

00:14:09,179 --> 00:14:16,739
but she's fascinating anyway so where

00:14:13,439 --> 00:14:19,439
Watson was the wife of John McCarthy she

00:14:16,739 --> 00:14:21,059
was of Chinese Russian descent so she

00:14:19,439 --> 00:14:26,309
was a Russian speaker who grew up in

00:14:21,059 --> 00:14:29,009
China and of for reasons and I had to

00:14:26,309 --> 00:14:30,869
move to the US when she was a child but

00:14:29,009 --> 00:14:33,929
she spoke Russian and so she was hired

00:14:30,869 --> 00:14:35,519
by IBM as a translator because they

00:14:33,929 --> 00:14:38,639
wanted to build machines that could

00:14:35,519 --> 00:14:41,669
translate Russian into English for

00:14:38,639 --> 00:14:43,169
obvious reasons but she turned out to be

00:14:41,669 --> 00:14:46,889
a really good programmer so she became a

00:14:43,169 --> 00:14:49,319
programmer at IBM and later she worked

00:14:46,889 --> 00:14:51,449
on among other things she worked on the

00:14:49,319 --> 00:14:54,569
IBM system R which was the first sequel

00:14:51,449 --> 00:14:58,679
database our first computer including a

00:14:54,569 --> 00:15:00,119
sequel database so she had a lot of she

00:14:58,679 --> 00:15:02,220
was a programmer herself and she had a

00:15:00,119 --> 00:15:04,619
lot of influence in kind of the history

00:15:02,220 --> 00:15:05,879
of programming but one fascinating thing

00:15:04,619 --> 00:15:08,879
about her is that she was also a

00:15:05,879 --> 00:15:11,789
mountain climber and not just a mountain

00:15:08,879 --> 00:15:13,649
climber but kind of one of the top

00:15:11,789 --> 00:15:16,319
mountain climbers of all of history and

00:15:13,649 --> 00:15:18,059
so I wanted to go into that because she

00:15:16,319 --> 00:15:20,729
was the first woman to ascend

00:15:18,059 --> 00:15:23,059
aqua aqua which is the highest mountain

00:15:20,729 --> 00:15:27,989
in the southern and western hemispheres

00:15:23,059 --> 00:15:30,600
so it's in the Andes and she was also

00:15:27,989 --> 00:15:34,379
part of the American women's Himalayan

00:15:30,600 --> 00:15:37,859
expedition to climb Annapurna one which

00:15:34,379 --> 00:15:40,319
is this mountain and it's one of the top

00:15:37,859 --> 00:15:43,109
ten mountains in the world so it's one

00:15:40,319 --> 00:15:44,390
of the mountains that are above 8,000

00:15:43,109 --> 00:15:47,930
meters in height

00:15:44,390 --> 00:15:49,790
and it's so what I found is that it's

00:15:47,930 --> 00:15:53,330
one of the most deadly mountains in the

00:15:49,790 --> 00:15:57,620
world as well and sadly as you can see

00:15:53,330 --> 00:15:59,720
on her life span the expedition was 1978

00:15:57,620 --> 00:16:06,560
she and one other member of the

00:15:59,720 --> 00:16:07,700
expedition died doing this climb so one

00:16:06,560 --> 00:16:09,649
really cool thing that happened when I

00:16:07,700 --> 00:16:12,980
did this talk in New Zealand and after

00:16:09,649 --> 00:16:17,690
that I traveled around for a bit and I

00:16:12,980 --> 00:16:20,360
came across this book store in La Mora I

00:16:17,690 --> 00:16:22,670
think it's called on the east coast of

00:16:20,360 --> 00:16:25,220
the South Island and I just happened to

00:16:22,670 --> 00:16:27,620
go in and I found this book which was

00:16:25,220 --> 00:16:30,500
about the expedition and so I said oh

00:16:27,620 --> 00:16:32,420
that's cool and it had it was signed by

00:16:30,500 --> 00:16:33,860
the authorized by others that's really

00:16:32,420 --> 00:16:36,110
awesome it had a dedication to Vera

00:16:33,860 --> 00:16:38,450
Watson and so I said I'm gonna buy this

00:16:36,110 --> 00:16:40,279
book so I went to the guy who had a

00:16:38,450 --> 00:16:43,339
store and say I wanna buy this book and

00:16:40,279 --> 00:16:43,850
it's like do you know I knew them I was

00:16:43,339 --> 00:16:47,600
like what

00:16:43,850 --> 00:16:49,490
so actually he knew the author of the

00:16:47,600 --> 00:16:52,160
book who was the leader of the

00:16:49,490 --> 00:16:53,750
expedition - and the proto one and when

00:16:52,160 --> 00:16:55,190
she came to New Zealand to climb

00:16:53,750 --> 00:17:02,480
mountains in New Zealand he would drive

00:16:55,190 --> 00:17:06,620
her around - that was pretty awesome so

00:17:02,480 --> 00:17:08,870
yeah the final person what a highlight

00:17:06,620 --> 00:17:12,640
that kind of gets forgotten in the

00:17:08,870 --> 00:17:14,990
history of lisp is dr. phyllis fox so

00:17:12,640 --> 00:17:16,790
this is the front page of the first

00:17:14,990 --> 00:17:20,540
manual for lisp which was written in

00:17:16,790 --> 00:17:22,490
1960 so this is kind of pre published

00:17:20,540 --> 00:17:24,230
lisp so there's kind of the first real

00:17:22,490 --> 00:17:26,689
menu which is the list one four five

00:17:24,230 --> 00:17:28,850
manual which was with the version list

00:17:26,689 --> 00:17:30,440
that other people can use this was kind

00:17:28,850 --> 00:17:33,050
of the internal documentation they used

00:17:30,440 --> 00:17:34,790
for lisp the first version of lisp that

00:17:33,050 --> 00:17:36,410
they had that kind of works but they

00:17:34,790 --> 00:17:41,030
hadn't like published it's outside the

00:17:36,410 --> 00:17:43,100
AI lab and on that page you can see

00:17:41,030 --> 00:17:45,260
everyone who's in the team at the time

00:17:43,100 --> 00:17:48,110
so you have john mccarthy was the

00:17:45,260 --> 00:17:49,790
professor and the founder of the MIT lab

00:17:48,110 --> 00:17:51,559
and the kind of the driver of this

00:17:49,790 --> 00:17:54,080
project he was the one who came up with

00:17:51,559 --> 00:17:58,490
it then there's a bunch of names and

00:17:54,080 --> 00:18:02,120
then this P Fox P Fox is Phyllis Fox who

00:17:58,490 --> 00:18:04,940
started as a human computer on the

00:18:02,120 --> 00:18:08,570
UNIVAC together with Jean Jennings from

00:18:04,940 --> 00:18:12,440
the ENIAC so she was during the war and

00:18:08,570 --> 00:18:15,410
so on she was a human computer she later

00:18:12,440 --> 00:18:17,830
worked on a differential and analyzer

00:18:15,410 --> 00:18:20,870
which was kind of like a pre computer

00:18:17,830 --> 00:18:23,720
big calculator you could say and then in

00:18:20,870 --> 00:18:25,790
1949 she worked with the whirlwind team

00:18:23,720 --> 00:18:28,220
which is whirling was another early

00:18:25,790 --> 00:18:31,310
computer writing software for the

00:18:28,220 --> 00:18:32,900
worldand and Layton that she wrote a

00:18:31,310 --> 00:18:36,860
language called dynamo which was the

00:18:32,900 --> 00:18:39,740
first simulation language and she wrote

00:18:36,860 --> 00:18:41,750
the first list manual so she's her

00:18:39,740 --> 00:18:45,230
credits in the manual are for the manual

00:18:41,750 --> 00:18:47,570
and a little bit of work inside but it's

00:18:45,230 --> 00:18:48,950
actually so I when I did this talk the

00:18:47,570 --> 00:18:50,300
first time I said like oh it's silly

00:18:48,950 --> 00:18:52,850
isn't it a little bit fishy that you

00:18:50,300 --> 00:18:54,110
have John McCarthy is the professor who

00:18:52,850 --> 00:18:55,880
came up with the idea but he doesn't

00:18:54,110 --> 00:18:58,610
have any experience to actually beat

00:18:55,880 --> 00:19:00,680
computers he just got his first IBM 704

00:18:58,610 --> 00:19:02,660
and then you have a bunch of students

00:19:00,680 --> 00:19:04,520
that that's the the other people here

00:19:02,660 --> 00:19:06,350
and then you have this person who's

00:19:04,520 --> 00:19:08,240
written not only multiple programming

00:19:06,350 --> 00:19:10,580
languages but actually worked as a human

00:19:08,240 --> 00:19:13,760
computer worked on one of the first

00:19:10,580 --> 00:19:16,400
computers and then helped build another

00:19:13,760 --> 00:19:18,500
computer and now she is credited by just

00:19:16,400 --> 00:19:19,390
writing the manual I said like this this

00:19:18,500 --> 00:19:21,290
fishy

00:19:19,390 --> 00:19:24,410
thanks for the wonders of YouTube

00:19:21,290 --> 00:19:27,890
comments I got this comment and so I

00:19:24,410 --> 00:19:30,530
don't know if you can read that but when

00:19:27,890 --> 00:19:32,540
on the video of that talk I got this

00:19:30,530 --> 00:19:34,850
coming decided like oh yeah I agree that

00:19:32,540 --> 00:19:36,650
making the record clear women in the

00:19:34,850 --> 00:19:38,420
history of computing is great but I

00:19:36,650 --> 00:19:41,210
didn't reprieve it was close to false

00:19:38,420 --> 00:19:44,690
accusations in the talk so regarding the

00:19:41,210 --> 00:19:46,520
involvement of Phyllis Fox if you want

00:19:44,690 --> 00:19:48,110
to see the real story look at this link

00:19:46,520 --> 00:19:49,580
you know us really happy about that

00:19:48,110 --> 00:19:51,590
because I hadn't found that so I

00:19:49,580 --> 00:19:53,570
actually did and there's some really

00:19:51,590 --> 00:19:55,760
great stuff there but yeah they used to

00:19:53,570 --> 00:19:58,340
set the record straight she herself

00:19:55,760 --> 00:19:59,990
doesn't think that she was set aside in

00:19:58,340 --> 00:20:01,700
the Lisp development and she actually

00:19:59,990 --> 00:20:06,140
did write a manual and that was like

00:20:01,700 --> 00:20:08,330
hearing moment but yeah she so in the

00:20:06,140 --> 00:20:09,770
interview she said I would ask questions

00:20:08,330 --> 00:20:11,950
from Minsky and McCarthy and I got it

00:20:09,770 --> 00:20:11,950
done

00:20:12,750 --> 00:20:15,899
I guess essentially I'm a documentary if

00:20:14,730 --> 00:20:19,049
you're looking for it that's what I am

00:20:15,899 --> 00:20:21,179
which i think is under selling but I'll

00:20:19,049 --> 00:20:23,759
go into that I couldn't resist

00:20:21,179 --> 00:20:26,519
so this is from the interview with

00:20:23,759 --> 00:20:31,379
Phyllis Fox and it's really great really

00:20:26,519 --> 00:20:33,539
long she cool stuff but in in this part

00:20:31,379 --> 00:20:34,889
she talks about how she lost her job at

00:20:33,539 --> 00:20:38,370
General Electric working on the

00:20:34,889 --> 00:20:39,960
differential analyzer see she said and

00:20:38,370 --> 00:20:41,639
one day the door opened and some

00:20:39,960 --> 00:20:43,620
high-powered person came in with three

00:20:41,639 --> 00:20:45,539
men they were probably all in suits and

00:20:43,620 --> 00:20:46,740
they looked at the analyzer I was used

00:20:45,539 --> 00:20:48,960
to visitors so I showed them everything

00:20:46,740 --> 00:20:50,429
and towards the end of the visit the big

00:20:48,960 --> 00:20:52,500
boss who was there with them introduced

00:20:50,429 --> 00:20:54,149
us and said now these three gentlemen

00:20:52,500 --> 00:20:57,629
are gonna work here and run this machine

00:20:54,149 --> 00:21:02,429
and you will work for them this is over

00:20:57,629 --> 00:21:03,779
over the past many women even now and at

00:21:02,429 --> 00:21:05,549
the time she saw flock well it's true

00:21:03,779 --> 00:21:08,340
I'm not an engineer and they had been in

00:21:05,549 --> 00:21:10,799
the war and they were engineers but I

00:21:08,340 --> 00:21:13,860
didn't want to do that so I left and so

00:21:10,799 --> 00:21:15,509
I need to get an engineering degree but

00:21:13,860 --> 00:21:16,830
yeah so then the question says so these

00:21:15,509 --> 00:21:18,029
three people were basically doing these

00:21:16,830 --> 00:21:20,250
things that you had been doing on your

00:21:18,029 --> 00:21:21,990
own before and she answered I guess so I

00:21:20,250 --> 00:21:29,159
probably left until I saw wrong but yeah

00:21:21,990 --> 00:21:32,100
I mean it wasn't difficult cause I can't

00:21:29,159 --> 00:21:35,789
resist so here she's talking about her

00:21:32,100 --> 00:21:38,850
work on the whirlwind and see if I can

00:21:35,789 --> 00:21:40,679
find the part I wanna read yes you see

00:21:38,850 --> 00:21:42,210
the computer was still being built so I

00:21:40,679 --> 00:21:43,740
spent the bulk of the year busy with all

00:21:42,210 --> 00:21:45,330
this other stuff doing a computer

00:21:43,740 --> 00:21:47,429
program in machine language for the

00:21:45,330 --> 00:21:48,929
whirlwind and every now and then I would

00:21:47,429 --> 00:21:50,279
see that I needed a certain instruction

00:21:48,929 --> 00:21:51,990
that they hadn't yet included in World

00:21:50,279 --> 00:21:54,269
Ends commands and I would tell the world

00:21:51,990 --> 00:21:56,070
engineers about it I had all the time in

00:21:54,269 --> 00:21:57,809
diagrams showing the past and timing of

00:21:56,070 --> 00:22:00,360
the electric pulses so I knew how the

00:21:57,809 --> 00:22:01,740
Machine worked and what was feasible for

00:22:00,360 --> 00:22:03,360
example I found it would be useful to

00:22:01,740 --> 00:22:05,940
have an instruction that will add one to

00:22:03,360 --> 00:22:07,500
the current address aoi called it it was

00:22:05,940 --> 00:22:09,690
essentially a loop mechanism that I was

00:22:07,500 --> 00:22:11,070
where indenting so they changed some of

00:22:09,690 --> 00:22:12,419
the instruction set in whirlwind and I

00:22:11,070 --> 00:22:15,090
think they found useful to have someone

00:22:12,419 --> 00:22:16,409
actually writing a program for it so if

00:22:15,090 --> 00:22:17,850
you think program is difficult now a

00:22:16,409 --> 00:22:19,350
matching program a computer doesn't

00:22:17,850 --> 00:22:20,639
exist where you go like oh now I need

00:22:19,350 --> 00:22:23,669
this instruction let me tell the

00:22:20,639 --> 00:22:25,620
computer builders well it and like yeah

00:22:23,669 --> 00:22:31,260
but I had all the time in diagrams right

00:22:25,620 --> 00:22:35,790
as possible anyway awesome person

00:22:31,260 --> 00:22:38,550
go read the full interview this so back

00:22:35,790 --> 00:22:40,830
to Lisp this is a quote by Joe McCarthy

00:22:38,550 --> 00:22:42,240
from another of his papers representing

00:22:40,830 --> 00:22:44,670
senses belief structures seemed

00:22:42,240 --> 00:22:45,930
appropriate it still is and the list

00:22:44,670 --> 00:22:47,010
processing language also seemed

00:22:45,930 --> 00:22:48,840
appropriate for programming the

00:22:47,010 --> 00:22:51,720
operations involved in deduction and

00:22:48,840 --> 00:22:54,809
still is so he hasn't given up on Lisp

00:22:51,720 --> 00:22:59,309
and in fact he knows what the right

00:22:54,809 --> 00:23:02,309
Methodism so I've seen this this meme

00:22:59,309 --> 00:23:03,809
before with this is John McCarthy and

00:23:02,309 --> 00:23:05,520
then programming you're doing completely

00:23:03,809 --> 00:23:07,559
wrong and I didn't really know like why

00:23:05,520 --> 00:23:10,020
why this attitude but now that I

00:23:07,559 --> 00:23:10,410
actually read his papers it's totally

00:23:10,020 --> 00:23:14,370
accurate

00:23:10,410 --> 00:23:16,020
this is his attitude it's lovely so he

00:23:14,370 --> 00:23:17,670
he doesn't just think you're doing wrong

00:23:16,020 --> 00:23:19,620
he actually thinks Alan Turing was doing

00:23:17,670 --> 00:23:20,760
it wrong and that's why he was inventing

00:23:19,620 --> 00:23:23,429
a lisp

00:23:20,760 --> 00:23:24,750
so less peace based on lambda calculus

00:23:23,429 --> 00:23:27,750
right I'll get into a little bit more

00:23:24,750 --> 00:23:30,300
but which is equivalent to a Turing

00:23:27,750 --> 00:23:31,679
machine and the problem John McCarthy

00:23:30,300 --> 00:23:33,600
had was he thought the term machine was

00:23:31,679 --> 00:23:35,070
really clunky and not very efficient and

00:23:33,600 --> 00:23:38,340
that there's a better way of doing it

00:23:35,070 --> 00:23:39,000
and that's how list came up so from the

00:23:38,340 --> 00:23:41,730
beginning

00:23:39,000 --> 00:23:44,690
Lisp was not invented as a programming

00:23:41,730 --> 00:23:48,000
language this was invented as a

00:23:44,690 --> 00:23:50,820
mathematical notation for computation

00:23:48,000 --> 00:23:54,270
for talking about processes talking

00:23:50,820 --> 00:23:57,530
about how thinking works basically so

00:23:54,270 --> 00:24:00,030
it's a logical mathematical notation for

00:23:57,530 --> 00:24:04,230
computation so I think that's one of the

00:24:00,030 --> 00:24:06,809
key things about Lisp but yeah what is

00:24:04,230 --> 00:24:11,040
that felt like okay so to show that this

00:24:06,809 --> 00:24:14,160
would be a good term machine we need the

00:24:11,040 --> 00:24:17,220
list function to interpret a list

00:24:14,160 --> 00:24:20,970
function uced had this idea it's like

00:24:17,220 --> 00:24:22,500
yeah writing even recording anything

00:24:20,970 --> 00:24:24,780
annotation representing Lisp functions

00:24:22,500 --> 00:24:28,200
as Lisp data and so then they came up

00:24:24,780 --> 00:24:31,590
with the notation of Lisp for in for

00:24:28,200 --> 00:24:33,870
expressing Lisp statements as list

00:24:31,590 --> 00:24:36,390
programs so it was just like I thought I

00:24:33,870 --> 00:24:37,860
had this was not device for the purposes

00:24:36,390 --> 00:24:39,420
of the paper with no thought it would be

00:24:37,860 --> 00:24:43,050
used to express list programs in

00:24:39,420 --> 00:24:44,580
practice so he still hasn't said that

00:24:43,050 --> 00:24:46,740
okay Lisp is gonna be a program language

00:24:44,580 --> 00:24:49,800
there was still mathematical notation

00:24:46,740 --> 00:24:52,110
but it's used to express computation in

00:24:49,800 --> 00:24:55,610
kind of the language he was inventing in

00:24:52,110 --> 00:24:59,250
this Lisp language but what happened was

00:24:55,610 --> 00:25:02,190
this guy came along this yes Steve

00:24:59,250 --> 00:25:05,130
Russell now I remember his name his

00:25:02,190 --> 00:25:07,200
nickname is slug and he he seems like a

00:25:05,130 --> 00:25:09,300
really fun guy and yeah so he's actually

00:25:07,200 --> 00:25:11,270
still around at the Computer History

00:25:09,300 --> 00:25:13,620
Museum showing people how computers work

00:25:11,270 --> 00:25:16,050
so he invented the first computer game

00:25:13,620 --> 00:25:19,500
that was a bit later but at this time he

00:25:16,050 --> 00:25:27,140
was a student in the MIT team so

00:25:19,500 --> 00:25:30,510
actually if we go back to slide that yes

00:25:27,140 --> 00:25:35,310
this one so that's him at the bottom

00:25:30,510 --> 00:25:38,180
Steve Russell using the team anyway he

00:25:35,310 --> 00:25:41,670
saw kind of this evil function that

00:25:38,180 --> 00:25:43,410
McCarthy had written because his job in

00:25:41,670 --> 00:25:45,600
the team at the time was to hand

00:25:43,410 --> 00:25:47,460
compiled list code into machine code so

00:25:45,600 --> 00:25:49,680
they had a computer that spoke machine

00:25:47,460 --> 00:25:51,960
code and they had these ideas for

00:25:49,680 --> 00:25:54,150
representing knowledge in Lisp and he

00:25:51,960 --> 00:25:57,900
would hand transcribed those into

00:25:54,150 --> 00:26:01,440
machine code it's a boring job he would

00:25:57,900 --> 00:26:03,810
much rather be playing space war so so

00:26:01,440 --> 00:26:05,340
he thought oh I'll just do this evil

00:26:03,810 --> 00:26:07,410
function and then that can do my job and

00:26:05,340 --> 00:26:10,860
I can go back to playing video games so

00:26:07,410 --> 00:26:13,980
I had my quote from Phil sparks which I

00:26:10,860 --> 00:26:15,270
thought was a really great quote so the

00:26:13,980 --> 00:26:16,860
trick was to keep all the group from

00:26:15,270 --> 00:26:18,770
playing space for so they would work on

00:26:16,860 --> 00:26:20,820
the matters at hand

00:26:18,770 --> 00:26:22,380
yeah so the first thing they did was

00:26:20,820 --> 00:26:25,820
invent a first video game and then avoid

00:26:22,380 --> 00:26:27,990
wasting time train video games for those

00:26:25,820 --> 00:26:30,360
so Steve Russell so this is a quote from

00:26:27,990 --> 00:26:32,760
young McCarthy Steve Russell said look

00:26:30,360 --> 00:26:34,980
why don't I program is evil and I said

00:26:32,760 --> 00:26:37,320
him how you're confusing theory and

00:26:34,980 --> 00:26:39,690
practice this evil is for reading it's

00:26:37,320 --> 00:26:42,950
not for computing but he did it anyway

00:26:39,690 --> 00:26:48,090
which you know thank you Steve Russell

00:26:42,950 --> 00:26:51,630
so that brings us to Lisp so the syntax

00:26:48,090 --> 00:26:52,980
Lisp is s expressions s expressions are

00:26:51,630 --> 00:26:55,260
based on Lam

00:26:52,980 --> 00:27:02,340
calculus so you're gonna see the new

00:26:55,260 --> 00:27:06,390
slice I have a hand-drawn this kind of a

00:27:02,340 --> 00:27:09,809
weird mix so the lambda calculus was

00:27:06,390 --> 00:27:13,590
invented in the 30s as a way to

00:27:09,809 --> 00:27:16,169
represent computation using basically

00:27:13,590 --> 00:27:17,880
recursive functions so the idea is that

00:27:16,169 --> 00:27:20,490
if you have recursive functions the

00:27:17,880 --> 00:27:23,130
functions that can call any other

00:27:20,490 --> 00:27:24,960
function and you can express any kind of

00:27:23,130 --> 00:27:27,179
computation any kind of process based on

00:27:24,960 --> 00:27:28,559
that so it's basically the same that

00:27:27,179 --> 00:27:30,540
ideas the Turing machine but whereas the

00:27:28,559 --> 00:27:33,200
Turing machine is the description of a

00:27:30,540 --> 00:27:35,100
physical machine which although

00:27:33,200 --> 00:27:38,160
impossible because involves like an

00:27:35,100 --> 00:27:39,990
infinite tape and things like that the

00:27:38,160 --> 00:27:42,570
lambda calculus is a purely mathematical

00:27:39,990 --> 00:27:44,820
notation so it's it's cleaner in that

00:27:42,570 --> 00:27:47,490
sense that was the idea of John McCarthy

00:27:44,820 --> 00:27:50,419
that this would be a bare basis for

00:27:47,490 --> 00:27:55,440
doing logic and math in about

00:27:50,419 --> 00:27:58,230
computation than the Turing machine so

00:27:55,440 --> 00:27:59,910
kind of the notation of Lisp and some of

00:27:58,230 --> 00:28:01,799
the terminology comes from lamentation

00:27:59,910 --> 00:28:04,890
among that lambda for representing

00:28:01,799 --> 00:28:07,850
functions but yeah it involves a lot of

00:28:04,890 --> 00:28:11,700
parentheses and this is a quote from the

00:28:07,850 --> 00:28:13,169
list 1.5 programmers manual which shows

00:28:11,700 --> 00:28:16,260
kind of the problem of the parenthesis

00:28:13,169 --> 00:28:17,490
exist already to prevent reading from

00:28:16,260 --> 00:28:19,500
continuing indefinitely

00:28:17,490 --> 00:28:21,260
each packet read and would stop followed

00:28:19,500 --> 00:28:23,760
by a large number of right parenthesis

00:28:21,260 --> 00:28:25,410
and unpaired right parenthesis would

00:28:23,760 --> 00:28:28,020
cause a read error and terminate reading

00:28:25,410 --> 00:28:29,220
so you know probably in your program

00:28:28,020 --> 00:28:30,299
you're gonna have too many princes

00:28:29,220 --> 00:28:31,890
somewhere you're not gonna have it

00:28:30,299 --> 00:28:33,600
matched so you just put a bunch of them

00:28:31,890 --> 00:28:39,270
at the end they're gonna solve

00:28:33,600 --> 00:28:43,080
everything and actually this is a quote

00:28:39,270 --> 00:28:44,940
from phyllis fox again so have you ever

00:28:43,080 --> 00:28:46,290
seen a page of lisp and the entry says

00:28:44,940 --> 00:28:48,840
i've done the little list programming

00:28:46,290 --> 00:28:50,280
oh you have so she actually she wasn't

00:28:48,840 --> 00:28:51,480
aware that lisp is still around she

00:28:50,280 --> 00:28:54,000
thought like this is something i was

00:28:51,480 --> 00:28:56,820
doing in the 40s or in the 50s and you

00:28:54,000 --> 00:28:59,220
know like these days they have new fancy

00:28:56,820 --> 00:29:00,570
program languages so she was a bit

00:28:59,220 --> 00:29:03,480
surprised that people actually useless

00:29:00,570 --> 00:29:05,220
today because she said once parentheses

00:29:03,480 --> 00:29:06,800
keys for out they didn't work after a

00:29:05,220 --> 00:29:08,600
while let's programs the load

00:29:06,800 --> 00:29:13,460
pressies you've done it I'm impressed

00:29:08,600 --> 00:29:14,600
that's not easy writing so yeah the

00:29:13,460 --> 00:29:16,310
parentheses this is kind of the

00:29:14,600 --> 00:29:19,940
strengths and the weaknesses list how

00:29:16,310 --> 00:29:21,290
can I argue against that but the cool

00:29:19,940 --> 00:29:23,930
thing about list we said is really

00:29:21,290 --> 00:29:25,760
simple so the basic list was a sim

00:29:23,930 --> 00:29:28,130
symbolic prone language so he didn't

00:29:25,760 --> 00:29:29,540
have things like numbers of strings or

00:29:28,130 --> 00:29:34,220
things that were used to in the primary

00:29:29,540 --> 00:29:37,990
language he had two things you had atoms

00:29:34,220 --> 00:29:42,020
which were kind of words so here I have

00:29:37,990 --> 00:29:44,360
yeah I don't know if you can see that so

00:29:42,020 --> 00:29:47,210
you have food that's an atom 10 is not

00:29:44,360 --> 00:29:48,860
hello world that's an atom and then you

00:29:47,210 --> 00:29:51,680
have lists and lists are basically

00:29:48,860 --> 00:29:57,020
parentheses so two parentheses is the

00:29:51,680 --> 00:29:59,270
empty list or nil parentheses a b and c

00:29:57,020 --> 00:30:02,000
is a list of three elements three atoms

00:29:59,270 --> 00:30:04,810
the atoms a b and c and then you can

00:30:02,000 --> 00:30:07,460
nest these so you have a list of a list

00:30:04,810 --> 00:30:08,900
so here's a list to contain the two

00:30:07,460 --> 00:30:11,510
elements where the two elements are

00:30:08,900 --> 00:30:16,900
lists and each element has two atoms in

00:30:11,510 --> 00:30:19,550
it so a and B and C and E so taking this

00:30:16,900 --> 00:30:22,550
the way to represent that in memory the

00:30:19,550 --> 00:30:25,510
usual way is with linked lists so I have

00:30:22,550 --> 00:30:29,650
kind of drawing of how we represent this

00:30:25,510 --> 00:30:32,420
in memory this usually the case so

00:30:29,650 --> 00:30:34,190
actually if you're programming closure

00:30:32,420 --> 00:30:37,880
which is one of the more modern lisps

00:30:34,190 --> 00:30:39,770
it's not represent this way but for for

00:30:37,880 --> 00:30:42,170
the purposes of writing your own this is

00:30:39,770 --> 00:30:44,570
the easiest way to start so what you

00:30:42,170 --> 00:30:47,210
have are something called cone cells and

00:30:44,570 --> 00:30:51,050
atoms or values and the concepts are

00:30:47,210 --> 00:30:55,010
basically two pointers glue together the

00:30:51,050 --> 00:30:57,020
first one is pointing to the thing in

00:30:55,010 --> 00:30:59,150
the position of list and the second one

00:30:57,020 --> 00:31:03,440
is pointing to the next element next

00:30:59,150 --> 00:31:06,350
part in own list so here we have a list

00:31:03,440 --> 00:31:09,220
of a list of one element and then

00:31:06,350 --> 00:31:12,830
another element so you can see there's

00:31:09,220 --> 00:31:15,110
one console where the first cell points

00:31:12,830 --> 00:31:16,240
to another concept means it's containing

00:31:15,110 --> 00:31:18,220
a list

00:31:16,240 --> 00:31:21,280
and then the second is pointing to the

00:31:18,220 --> 00:31:24,010
second element of the list I don't know

00:31:21,280 --> 00:31:26,290
if that makes sense but that's basically

00:31:24,010 --> 00:31:31,570
kind of how we represent list structures

00:31:26,290 --> 00:31:35,110
in memory and to manipulate lists there

00:31:31,570 --> 00:31:37,960
are some basic operations and the names

00:31:35,110 --> 00:31:42,400
of these kind of deities come from the

00:31:37,960 --> 00:31:44,080
IBM 704 so you have cons which is to add

00:31:42,400 --> 00:31:45,190
an element to the fronted list so

00:31:44,080 --> 00:31:47,650
basically what you're doing is you're

00:31:45,190 --> 00:31:50,500
constructing a console that's why it's

00:31:47,650 --> 00:31:53,080
called cons and you're putting in the

00:31:50,500 --> 00:31:55,240
first element you playing the thing that

00:31:53,080 --> 00:31:57,490
you want to put in that position in list

00:31:55,240 --> 00:31:59,080
and then as the second argument you give

00:31:57,490 --> 00:32:01,390
it the rest of the list so you're kind

00:31:59,080 --> 00:32:06,130
of building lists from the back to the

00:32:01,390 --> 00:32:08,260
front so here we're adding a to the

00:32:06,130 --> 00:32:10,720
front of the empty list which gives us a

00:32:08,260 --> 00:32:13,600
list containing a and then we call cons

00:32:10,720 --> 00:32:15,880
again and adding B to the front of that

00:32:13,600 --> 00:32:18,730
list and then we get a list of B and a

00:32:15,880 --> 00:32:21,150
so building it as we be kind of building

00:32:18,730 --> 00:32:24,730
it backwards and if you look at kind of

00:32:21,150 --> 00:32:26,320
basic Lisp code you see a lot of list

00:32:24,730 --> 00:32:28,210
reversal because you end up building

00:32:26,320 --> 00:32:29,830
things backwards and then flipping it

00:32:28,210 --> 00:32:33,670
over and so you get them in the right

00:32:29,830 --> 00:32:34,960
order then you have the operations for

00:32:33,670 --> 00:32:39,040
actually getting the parts of the list

00:32:34,960 --> 00:32:41,620
and also called car and cutter and these

00:32:39,040 --> 00:32:44,230
come from two instructions on the IBM

00:32:41,620 --> 00:32:46,870
704 called car for contents of the

00:32:44,230 --> 00:32:49,720
address register and Qatar for contents

00:32:46,870 --> 00:32:52,570
of the decrement register and the reason

00:32:49,720 --> 00:32:56,920
for this is that registers on the IBM

00:32:52,570 --> 00:32:59,500
704 were 36 bits wide and they were

00:32:56,920 --> 00:33:01,600
split into multiple parts so you had one

00:32:59,500 --> 00:33:03,610
part which were which was called a tag

00:33:01,600 --> 00:33:06,130
which was a few bytes weak he used to

00:33:03,610 --> 00:33:09,340
identify what's what's in this register

00:33:06,130 --> 00:33:11,290
and then you had to part well you could

00:33:09,340 --> 00:33:17,140
actually fit two pointers into one

00:33:11,290 --> 00:33:18,850
register so you have in the car part you

00:33:17,140 --> 00:33:20,320
have one pointer and in the credit part

00:33:18,850 --> 00:33:22,960
you have another point so this makes it

00:33:20,320 --> 00:33:25,090
really easy to represent these kind of

00:33:22,960 --> 00:33:27,320
structures on the IBM 704 so it makes

00:33:25,090 --> 00:33:29,510
sense why do we use this

00:33:27,320 --> 00:33:30,950
but it also makes it kind of confusing

00:33:29,510 --> 00:33:32,690
me you get to list today and you see

00:33:30,950 --> 00:33:35,450
these names but we're living with them

00:33:32,690 --> 00:33:38,600
then I'm also using this notation called

00:33:35,450 --> 00:33:40,130
quote where because lists are also used

00:33:38,600 --> 00:33:41,930
to represent functions you need some way

00:33:40,130 --> 00:33:43,580
to tell when a list is a list and a list

00:33:41,930 --> 00:33:45,920
is a function and the way you do that is

00:33:43,580 --> 00:33:47,930
you quote the list so you say okay quote

00:33:45,920 --> 00:33:50,480
this list means don't pretend in this

00:33:47,930 --> 00:33:53,840
function a calling with our MSB and see

00:33:50,480 --> 00:33:56,270
it's really a list of a B and C then we

00:33:53,840 --> 00:33:59,600
need some basic operations we need to

00:33:56,270 --> 00:34:01,040
see if something is a list or an atom we

00:33:59,600 --> 00:34:01,670
need to be able to see if two things are

00:34:01,040 --> 00:34:05,120
the same

00:34:01,670 --> 00:34:08,780
and then we have the cond expression

00:34:05,120 --> 00:34:10,040
which is basically if and actually kind

00:34:08,780 --> 00:34:12,230
of the if statement hadn't been invented

00:34:10,040 --> 00:34:14,300
yet they were still thinking machine

00:34:12,230 --> 00:34:15,889
language so you have like jump

00:34:14,300 --> 00:34:17,750
statements jumped these many

00:34:15,889 --> 00:34:21,050
instructions form backwards but there's

00:34:17,750 --> 00:34:23,120
no conditional statements yet so this

00:34:21,050 --> 00:34:29,620
was an invention of Lisp so if you using

00:34:23,120 --> 00:34:32,210
if which is mind blowing

00:34:29,620 --> 00:34:35,210
yeah then we also represent function

00:34:32,210 --> 00:34:36,860
calls as lists so a function call is

00:34:35,210 --> 00:34:38,560
just a normal list we interpret the

00:34:36,860 --> 00:34:41,870
first element as the function to call

00:34:38,560 --> 00:34:44,870
and the way you define a function is

00:34:41,870 --> 00:34:46,550
using lambda so you say lambda and then

00:34:44,870 --> 00:34:49,520
you give it the argument list and then

00:34:46,550 --> 00:34:51,919
you have the body of the function so at

00:34:49,520 --> 00:34:54,560
the bottom here you can see we do so I

00:34:51,919 --> 00:35:00,080
wrote lambda and lambda and then typed

00:34:54,560 --> 00:35:02,390
it out here we have lambda X my add x

00:35:00,080 --> 00:35:03,980
and y and then we pass two and three to

00:35:02,390 --> 00:35:08,000
that function and then we should get

00:35:03,980 --> 00:35:10,610
five like so I haven't shown you

00:35:08,000 --> 00:35:14,510
actually naming functions yet but but

00:35:10,610 --> 00:35:16,430
yeah then the key thing with Lisp is

00:35:14,510 --> 00:35:18,020
recursive functions which is functions

00:35:16,430 --> 00:35:19,430
that can call themselves and the easiest

00:35:18,020 --> 00:35:21,140
way to do this is to give the function

00:35:19,430 --> 00:35:23,120
name that you can refer to it again you

00:35:21,140 --> 00:35:25,520
actually don't have to do that there is

00:35:23,120 --> 00:35:28,040
a way to call anonymous functions

00:35:25,520 --> 00:35:31,360
recursively which is mind-blowing as

00:35:28,040 --> 00:35:33,590
well I'm not gonna go into that but yeah

00:35:31,360 --> 00:35:35,750
with with these things

00:35:33,590 --> 00:35:38,090
you have everything so this basically

00:35:35,750 --> 00:35:38,960
this is Lisp this is you know all the

00:35:38,090 --> 00:35:41,030
programming you can build everything

00:35:38,960 --> 00:35:44,500
else about loops

00:35:41,030 --> 00:35:47,270
that's all you need pretty amazing

00:35:44,500 --> 00:35:50,980
here's a quote from Alan Kay who was the

00:35:47,270 --> 00:35:50,980
inventor of object-oriented programming

00:35:51,220 --> 00:35:55,100
and so when I finally understood that

00:35:53,480 --> 00:35:57,530
the half pasted code on the bottom of

00:35:55,100 --> 00:36:00,500
page 13 of list 1.5 manual was lesbian

00:35:57,530 --> 00:36:01,730
itself it was the whole world of

00:36:00,500 --> 00:36:04,310
programming in a few lines that I could

00:36:01,730 --> 00:36:06,830
put my hand over and it is pretty cool

00:36:04,310 --> 00:36:09,320
that you know if you wonder like oh how

00:36:06,830 --> 00:36:10,940
do you programs work how do does

00:36:09,320 --> 00:36:12,890
programming work in the abstract

00:36:10,940 --> 00:36:17,540
actually you can express it in very

00:36:12,890 --> 00:36:19,190
little code it's it's not that much you

00:36:17,540 --> 00:36:22,430
know you don't need that many primitives

00:36:19,190 --> 00:36:25,580
to build up programming and so this is

00:36:22,430 --> 00:36:29,410
the bottom of page 13 in the list 1 4 5

00:36:25,580 --> 00:36:32,300
menu and this is the evil functions that

00:36:29,410 --> 00:36:34,760
were talking about unfortunate doesn't

00:36:32,300 --> 00:36:35,840
look like Lisp like we know today this

00:36:34,760 --> 00:36:38,330
is written in something called M

00:36:35,840 --> 00:36:40,790
expressions and that's because when your

00:36:38,330 --> 00:36:43,610
McCarthy invented s expressions it was

00:36:40,790 --> 00:36:44,660
just for kind of notational purposes and

00:36:43,610 --> 00:36:45,860
he didn't think anyone would actually

00:36:44,660 --> 00:36:47,690
want to use them and they look horrible

00:36:45,860 --> 00:36:49,700
it's too many Presley's so he also

00:36:47,690 --> 00:36:51,470
invented a program which called M

00:36:49,700 --> 00:36:54,550
expressions that were more user friendly

00:36:51,470 --> 00:36:58,300
but sadly no one ever picked it up

00:36:54,550 --> 00:37:02,690
everybody who's kept using s expressions

00:36:58,300 --> 00:37:03,980
but yes so kind of the unfortunate I'm

00:37:02,690 --> 00:37:07,220
running out of time at the same point

00:37:03,980 --> 00:37:09,680
again so let me let me just okay so if

00:37:07,220 --> 00:37:11,210
you want to know more about like why I'm

00:37:09,680 --> 00:37:14,270
interested in Lisp I have you know like

00:37:11,210 --> 00:37:16,460
why Lisp and why free software is good

00:37:14,270 --> 00:37:18,350
questions I go into that in the previous

00:37:16,460 --> 00:37:21,020
time I did a talk I just want to show

00:37:18,350 --> 00:37:24,670
you a little bit Oh what else I have I'm

00:37:21,020 --> 00:37:26,990
gonna have to do this talk again so yeah

00:37:24,670 --> 00:37:29,300
there's a lot of stuff that I haven't a

00:37:26,990 --> 00:37:32,270
time sorting so I'm still in the 60s at

00:37:29,300 --> 00:37:34,010
this point if we get into 70s we get

00:37:32,270 --> 00:37:35,720
some really fascinating people to talk

00:37:34,010 --> 00:37:37,520
about some really cool stuff scheme is

00:37:35,720 --> 00:37:40,280
another list I like this free awesome

00:37:37,520 --> 00:37:44,570
guy Steve jr. might be my favorite human

00:37:40,280 --> 00:37:48,290
alive my wife then guys deal

00:37:44,570 --> 00:37:50,060
I found the guy steals CVE online and

00:37:48,290 --> 00:37:51,260
it's 57 pages long and I don't think

00:37:50,060 --> 00:37:53,369
it's inflated it's actually you know

00:37:51,260 --> 00:37:56,549
like he's got the essentials in there

00:37:53,369 --> 00:37:57,900
he's an amazing person then in the 80s

00:37:56,549 --> 00:38:00,390
we get common list which is the other

00:37:57,900 --> 00:38:01,950
big dialect and I would say common list

00:38:00,390 --> 00:38:03,930
was death list that's why you haven't

00:38:01,950 --> 00:38:06,619
heard about it so much because a common

00:38:03,930 --> 00:38:09,539
lisp is massive it's too many things

00:38:06,619 --> 00:38:13,349
it's like death by committee not great

00:38:09,539 --> 00:38:17,509
my opinion then in the 2010s we get

00:38:13,349 --> 00:38:21,900
closure again soul is coming back but

00:38:17,509 --> 00:38:23,999
from Lisp you get stuff like basically

00:38:21,900 --> 00:38:27,420
every program you have so virtual

00:38:23,999 --> 00:38:29,969
machines virtual computing John McCarthy

00:38:27,420 --> 00:38:32,430
also invented time sharing when he was

00:38:29,969 --> 00:38:33,660
developing at the MIT lab so they had

00:38:32,430 --> 00:38:36,479
this one computer but they wanted to do

00:38:33,660 --> 00:38:37,499
multiple things at once he meant a cloud

00:38:36,479 --> 00:38:41,819
computing you can say so

00:38:37,499 --> 00:38:44,609
that's kind of part of this but the cool

00:38:41,819 --> 00:38:46,499
thing about Lisp is that it's before

00:38:44,609 --> 00:38:47,789
that and kind of the track that most

00:38:46,499 --> 00:38:49,710
program languages do is that they're

00:38:47,789 --> 00:38:51,719
focused on telling the computer what to

00:38:49,710 --> 00:38:54,210
do they focus on the computer like the

00:38:51,719 --> 00:38:57,029
actual machine and like the specifics of

00:38:54,210 --> 00:38:59,519
doing things in a certain order whereas

00:38:57,029 --> 00:39:01,650
less focused on computation the kind of

00:38:59,519 --> 00:39:02,999
the abstract mathematical notation

00:39:01,650 --> 00:39:05,249
something that doesn't really require a

00:39:02,999 --> 00:39:07,259
computer like you could you could do you

00:39:05,249 --> 00:39:09,029
can say like the ancient Greeks they

00:39:07,259 --> 00:39:12,150
were inventing algorithms we're doing

00:39:09,029 --> 00:39:13,829
computation and anyone following a set

00:39:12,150 --> 00:39:15,900
of instructions is doing computation and

00:39:13,829 --> 00:39:18,089
what john mccarthy was doing is trying

00:39:15,900 --> 00:39:19,529
to formalize this so that he could

00:39:18,089 --> 00:39:23,339
understand it and then tell a computer

00:39:19,529 --> 00:39:25,829
how to do it which i think is kind of a

00:39:23,339 --> 00:39:27,989
cool way to think about it and that's

00:39:25,829 --> 00:39:31,710
that's kind of the amazing thing about

00:39:27,989 --> 00:39:33,660
Lisp so it's thinking about computation

00:39:31,710 --> 00:39:36,180
not as like how do i tell the computer

00:39:33,660 --> 00:39:38,299
what to do but like what is software

00:39:36,180 --> 00:39:42,960
actually that's a difficult question

00:39:38,299 --> 00:39:44,670
it's pretty cool oh yeah I have a few

00:39:42,960 --> 00:39:46,200
minutes left I'm gonna show you so I've

00:39:44,670 --> 00:39:49,039
written in my own Lisp interpreter it's

00:39:46,200 --> 00:39:53,640
as small as I can get it it includes

00:39:49,039 --> 00:39:55,769
copying garbage collector and evil from

00:39:53,640 --> 00:39:58,890
Lisp on 1.5 so you can run like simple

00:39:55,769 --> 00:40:00,660
Lisp 1.5 programs and if you want to see

00:39:58,890 --> 00:40:02,519
like kind of how how do you write a

00:40:00,660 --> 00:40:04,729
LESBIAN see you can look at that so you

00:40:02,519 --> 00:40:07,079
can do it yourself it's not a difficult

00:40:04,729 --> 00:40:08,999
the basic parts you need is that you

00:40:07,079 --> 00:40:11,190
it's a basic machine model which is the

00:40:08,999 --> 00:40:13,650
garbage collector and how to layout

00:40:11,190 --> 00:40:15,209
objects memory how to do a gyro and so

00:40:13,650 --> 00:40:17,700
on and then let's hope that you have

00:40:15,209 --> 00:40:20,099
something called the repple or read eval

00:40:17,700 --> 00:40:23,009
print loop which is you read a lisp

00:40:20,099 --> 00:40:25,319
statement you evaluate it you print the

00:40:23,009 --> 00:40:29,400
result and any loop and that's basically

00:40:25,319 --> 00:40:30,599
it but I'm going to show you how to

00:40:29,400 --> 00:40:31,859
write your own garbage collector because

00:40:30,599 --> 00:40:33,269
I think this is one of the things that

00:40:31,859 --> 00:40:35,160
kind of blew my mind that it's actually

00:40:33,269 --> 00:40:36,719
not that difficult you can do it and

00:40:35,160 --> 00:40:39,450
what I'm going to show you how to write

00:40:36,719 --> 00:40:41,459
is the non recursive list compacting

00:40:39,450 --> 00:40:44,069
algorithm and which is a copying garbage

00:40:41,459 --> 00:40:45,569
collector and it's the foundation for

00:40:44,069 --> 00:40:47,160
every garbage collector in use today

00:40:45,569 --> 00:40:50,910
including the garbage collector used in

00:40:47,160 --> 00:40:52,979
JVM all of them any garbage collector

00:40:50,910 --> 00:40:53,789
that's copying so there's two categories

00:40:52,979 --> 00:40:55,589
of garbage collectors

00:40:53,789 --> 00:40:58,200
there's the non copying and the copying

00:40:55,589 --> 00:40:59,729
garbage collectors the non copying ones

00:40:58,200 --> 00:41:01,499
don't move things around the memories if

00:40:59,729 --> 00:41:03,930
you have a program where you have some

00:41:01,499 --> 00:41:05,609
code in C and you pass pointers around

00:41:03,930 --> 00:41:06,959
you can get the address and stuff then

00:41:05,609 --> 00:41:09,989
you can't really move anything because

00:41:06,959 --> 00:41:11,880
then the addresses get outdated but if

00:41:09,989 --> 00:41:13,049
you can guarantee that no one knows the

00:41:11,880 --> 00:41:14,249
address or anything then you can

00:41:13,049 --> 00:41:16,289
actually move stuff around then you can

00:41:14,249 --> 00:41:17,549
pick fragment memory and so on so that's

00:41:16,289 --> 00:41:20,699
kind of the better way to do it and

00:41:17,549 --> 00:41:23,999
that's how Java works and most garbage

00:41:20,699 --> 00:41:26,670
collectors work and they all use this

00:41:23,999 --> 00:41:29,819
garbage collector as one part of the

00:41:26,670 --> 00:41:31,380
garbage collector so I'm gonna show you

00:41:29,819 --> 00:41:33,630
how that works so basically what we do

00:41:31,380 --> 00:41:35,819
is we split memory in half so we're

00:41:33,630 --> 00:41:38,099
using half of the memory we only use

00:41:35,819 --> 00:41:39,779
half a memory at any time because what

00:41:38,099 --> 00:41:42,959
we need is another has to move stuff

00:41:39,779 --> 00:41:44,670
into so here you can see we have the

00:41:42,959 --> 00:41:48,119
stack which is where the functions

00:41:44,670 --> 00:41:50,699
frames live in the stack we point into

00:41:48,119 --> 00:41:54,719
the heap memory where the rest of the

00:41:50,699 --> 00:41:58,529
stuff lives and so yeah so unfortunately

00:41:54,719 --> 00:42:01,319
I started doing ABC in the ESG and stuff

00:41:58,529 --> 00:42:04,259
there but then I used F G because F for

00:42:01,319 --> 00:42:08,009
function is so it's so DF there it's not

00:42:04,259 --> 00:42:09,359
the same as F there ignore that part but

00:42:08,009 --> 00:42:11,670
what we have is we have some stack

00:42:09,359 --> 00:42:13,469
frames pointing into memory and then we

00:42:11,670 --> 00:42:16,140
have pointers between stuff in memory

00:42:13,469 --> 00:42:17,819
and what we want to do is we want to get

00:42:16,140 --> 00:42:20,249
all the stuff we want to keep over to

00:42:17,819 --> 00:42:20,930
the other half and this leave the

00:42:20,249 --> 00:42:23,710
garbage

00:42:20,930 --> 00:42:27,200
where it is so we do this in two steps

00:42:23,710 --> 00:42:29,240
step one is that we move everything

00:42:27,200 --> 00:42:31,099
that's pointed to you from the stack so

00:42:29,240 --> 00:42:34,069
we go through the stack one by one and

00:42:31,099 --> 00:42:38,180
when we see an object being pointed to

00:42:34,069 --> 00:42:40,190
we move that to the other heap and in

00:42:38,180 --> 00:42:42,019
the place of it we leave kind of a 4-way

00:42:40,190 --> 00:42:44,240
pointer that's one of the three is that

00:42:42,019 --> 00:42:45,740
when then we come across something

00:42:44,240 --> 00:42:47,029
pointing to that location again it's

00:42:45,740 --> 00:42:50,450
gonna say oh I know you have to go over

00:42:47,029 --> 00:42:52,940
here to find it that's this detail so

00:42:50,450 --> 00:42:54,950
what we do is we move those and then

00:42:52,940 --> 00:42:58,279
step two is that we start going through

00:42:54,950 --> 00:43:01,130
the objects in the heap that we move to

00:42:58,279 --> 00:43:03,640
in order and we move this stuff that

00:43:01,130 --> 00:43:06,200
those things are pointing to you and

00:43:03,640 --> 00:43:08,150
that's it when we've done that we're

00:43:06,200 --> 00:43:09,950
done that's we've collected the garbage

00:43:08,150 --> 00:43:12,799
and the cool thing about that is that

00:43:09,950 --> 00:43:14,059
we're only going through this live stuff

00:43:12,799 --> 00:43:15,589
we don't have to actually go through the

00:43:14,059 --> 00:43:21,130
garbage we just leave the garbage behind

00:43:15,589 --> 00:43:24,259
so it's really fast and efficient so

00:43:21,130 --> 00:43:27,079
that probably didn't make sense but yeah

00:43:24,259 --> 00:43:30,009
that's how it works and I actually have

00:43:27,079 --> 00:43:33,440
all the source code for it right here

00:43:30,009 --> 00:43:35,569
it's not that much you can see it it's

00:43:33,440 --> 00:43:38,470
pretty cool that's it that's my talk

00:43:35,569 --> 00:43:38,470
thank you

00:43:40,690 --> 00:43:44,679
[Applause]

00:43:49,780 --> 00:43:51,840

YouTube URL: https://www.youtube.com/watch?v=F140RNyuKXg


