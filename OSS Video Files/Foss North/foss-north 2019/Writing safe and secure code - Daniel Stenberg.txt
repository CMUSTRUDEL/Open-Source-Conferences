Title: Writing safe and secure code - Daniel Stenberg
Publication date: 2019-04-22
Playlist: foss-north 2019
Description: 
	With experiences from the curl project, Daniel talks about how to write safe and secure code to run in every portable device on the planet.

---

Daniel is the lead developer of curl since over twenty years. One of the most widely used software components in the world.

https://foss-north.se/2019/speakers-and-talks.html#dstenberg
Captions: 
	00:00:16,040 --> 00:00:22,790
crowded and cozy over here okay I'm

00:00:19,940 --> 00:00:25,430
going to talk to you today about writing

00:00:22,790 --> 00:00:26,900
safe and secure code and I'm not going

00:00:25,430 --> 00:00:31,660
to mention that other programming

00:00:26,900 --> 00:00:35,600
language at all so I am Daniel Steinberg

00:00:31,660 --> 00:00:37,370
going humble here but I got this few

00:00:35,600 --> 00:00:39,830
years ago I don't work at Mozilla

00:00:37,370 --> 00:00:44,510
anymore I work from Wolf SSL these days

00:00:39,830 --> 00:00:47,930
and you may know me mostly for my work

00:00:44,510 --> 00:00:53,150
with curl that I've been doing for a

00:00:47,930 --> 00:00:56,030
while like twenty four three years or so

00:00:53,150 --> 00:00:58,580
and it so happens that my code runs in a

00:00:56,030 --> 00:01:01,159
lot of places roughly six billion

00:00:58,580 --> 00:01:05,420
instances perhaps or so give or take a

00:01:01,159 --> 00:01:08,510
few so every one of you run my code in

00:01:05,420 --> 00:01:11,540
the things like 150 million cars or and

00:01:08,510 --> 00:01:15,200
two hundred or actually pretty much a

00:01:11,540 --> 00:01:18,170
half a billion games these days and half

00:01:15,200 --> 00:01:20,810
a billion TVs and basically 1 billion

00:01:18,170 --> 00:01:24,500
Windows 10 machines or 3.5 billion

00:01:20,810 --> 00:01:29,570
mobile phones so that's me bragging

00:01:24,500 --> 00:01:31,160
about so ok I'm here today to well

00:01:29,570 --> 00:01:34,310
basically talk about how to write the

00:01:31,160 --> 00:01:36,050
safe code how how do we do how do we get

00:01:34,310 --> 00:01:38,630
our code running in all these places and

00:01:36,050 --> 00:01:43,610
not making everything into terrible

00:01:38,630 --> 00:01:46,070
chaos oh I do that sometimes anyway but

00:01:43,610 --> 00:01:47,660
still so writing safe code and doing

00:01:46,070 --> 00:01:50,180
things correctly it's not by coincidence

00:01:47,660 --> 00:01:52,820
right it doesn't just happen so we have

00:01:50,180 --> 00:01:55,820
to actually make an effort to make sure

00:01:52,820 --> 00:01:57,650
that it ends up secure and safe so it

00:01:55,820 --> 00:02:00,110
means that every one of us have to care

00:01:57,650 --> 00:02:01,580
about it we have to put up a little

00:02:00,110 --> 00:02:03,020
extra make sure that we have the

00:02:01,580 --> 00:02:06,650
routines and everything there and make

00:02:03,020 --> 00:02:09,640
an effort so this is really about time

00:02:06,650 --> 00:02:13,250
that we finally in this day and age

00:02:09,640 --> 00:02:16,849
start being a little bit concerned about

00:02:13,250 --> 00:02:19,909
this and fixing our code our own to

00:02:16,849 --> 00:02:21,409
start with and I'm not going to tell you

00:02:19,909 --> 00:02:23,120
a lot about things today that you don't

00:02:21,409 --> 00:02:25,340
already know I'm just going to emphasize

00:02:23,120 --> 00:02:28,360
and yeah you'll get to hear it again

00:02:25,340 --> 00:02:31,150
from me because we

00:02:28,360 --> 00:02:34,240
saying things many times so but this is

00:02:31,150 --> 00:02:35,710
my way of saying how we should do things

00:02:34,240 --> 00:02:37,420
to make sure that there is secure and

00:02:35,710 --> 00:02:39,940
safe and we start out by writing things

00:02:37,420 --> 00:02:42,550
the correct way of course and when we do

00:02:39,940 --> 00:02:45,700
things like we provide api's and right

00:02:42,550 --> 00:02:48,280
tools for users we should of course

00:02:45,700 --> 00:02:51,040
provide them with a POS that are easy to

00:02:48,280 --> 00:02:52,570
use and not mess everything up if they

00:02:51,040 --> 00:02:55,510
follow what do you think is the easiest

00:02:52,570 --> 00:02:57,670
path forward we should provide them with

00:02:55,510 --> 00:02:59,380
good defaults you know the power of the

00:02:57,670 --> 00:03:01,120
default is very strong you know that

00:02:59,380 --> 00:03:03,190
most users will just stick to the

00:03:01,120 --> 00:03:06,000
defaults if we provide them with that so

00:03:03,190 --> 00:03:08,530
the defaults should be safe and secure

00:03:06,000 --> 00:03:10,570
of course for your API synapse and

00:03:08,530 --> 00:03:13,510
whatever and we should document

00:03:10,570 --> 00:03:15,340
everything a lot and of course that's a

00:03:13,510 --> 00:03:17,709
good thing we're talking about forcing

00:03:15,340 --> 00:03:20,680
up a source open source is good we can

00:03:17,709 --> 00:03:22,720
have the code live a long time long time

00:03:20,680 --> 00:03:24,040
means long time to write documentation

00:03:22,720 --> 00:03:26,800
so over time we will have a lot of

00:03:24,040 --> 00:03:28,570
documentation and that's good and we of

00:03:26,800 --> 00:03:29,980
course get rid of all the warnings we

00:03:28,570 --> 00:03:32,110
don't compile things get it with a few

00:03:29,980 --> 00:03:35,019
warnings no we fix the warnings and then

00:03:32,110 --> 00:03:36,820
move forward there's this notion

00:03:35,019 --> 00:03:38,440
sometimes that comments shouldn't be

00:03:36,820 --> 00:03:41,350
necessary if you just write your code

00:03:38,440 --> 00:03:43,750
correctly which i think is a bit amusing

00:03:41,350 --> 00:03:45,489
because just you know fast forward 10

00:03:43,750 --> 00:03:47,260
years reading your own code from 10

00:03:45,489 --> 00:03:49,570
years ago not that easy anymore

00:03:47,260 --> 00:03:51,519
so of course comments is good for

00:03:49,570 --> 00:03:52,810
everyone we should use it a lot that

00:03:51,519 --> 00:03:54,910
makes it easier for everyone to

00:03:52,810 --> 00:03:57,580
understand the code understanding the

00:03:54,910 --> 00:04:01,660
code is essential to writing secure code

00:03:57,580 --> 00:04:03,519
and then of course one of these golden

00:04:01,660 --> 00:04:06,489
things is assert you should use them a

00:04:03,519 --> 00:04:08,530
lot and of course we release code as

00:04:06,489 --> 00:04:10,870
open source to get more eyeballs on the

00:04:08,530 --> 00:04:12,850
code more people complaining when it

00:04:10,870 --> 00:04:15,760
doesn't do what it should do and it has

00:04:12,850 --> 00:04:17,830
the opportunity to survive for much

00:04:15,760 --> 00:04:19,930
longer time right it doesn't have to die

00:04:17,830 --> 00:04:21,519
just because your project dies at the

00:04:19,930 --> 00:04:24,040
end of the year or whatever it'll

00:04:21,519 --> 00:04:25,210
continue working on and of course this

00:04:24,040 --> 00:04:27,040
goes the other way around

00:04:25,210 --> 00:04:28,990
you'll benefit from using someone else's

00:04:27,040 --> 00:04:31,150
open source instead of a proprietary one

00:04:28,990 --> 00:04:35,919
from for the basically the same reasons

00:04:31,150 --> 00:04:38,110
so if you then do follow this when you

00:04:35,919 --> 00:04:40,060
write the code you then of course review

00:04:38,110 --> 00:04:40,600
the code right you review everything

00:04:40,060 --> 00:04:42,760
that

00:04:40,600 --> 00:04:44,560
written so you don't just commit

00:04:42,760 --> 00:04:47,950
something to your git and be happy with

00:04:44,560 --> 00:04:53,620
that no someone else reviews your stuff

00:04:47,950 --> 00:04:56,830
before you merge it and you follow the

00:04:53,620 --> 00:04:58,780
style guide right you're supposed to

00:04:56,830 --> 00:05:01,720
write code that is easy to read and

00:04:58,780 --> 00:05:03,520
understand you don't get points for

00:05:01,720 --> 00:05:05,560
being clever it's not good to have

00:05:03,520 --> 00:05:07,930
everything crammed up in a little space

00:05:05,560 --> 00:05:09,700
that's not good code you're supposed to

00:05:07,930 --> 00:05:11,590
be able to read the code and understand

00:05:09,700 --> 00:05:14,110
what it does if you don't you better

00:05:11,590 --> 00:05:17,680
write a little extra add a comment

00:05:14,110 --> 00:05:20,830
explain it try it again and we use the

00:05:17,680 --> 00:05:23,260
same style everywhere you don't mix code

00:05:20,830 --> 00:05:25,930
styles you don't you don't read a novel

00:05:23,260 --> 00:05:27,910
right when they mixed the style in a

00:05:25,930 --> 00:05:30,580
novel or whatever you read you want the

00:05:27,910 --> 00:05:32,230
same style throughout the code again to

00:05:30,580 --> 00:05:34,510
make it easier to read and understand

00:05:32,230 --> 00:05:36,760
and follow you don't need you don't need

00:05:34,510 --> 00:05:39,370
to see that there are different peoples

00:05:36,760 --> 00:05:41,500
involved in writing the code you don't

00:05:39,370 --> 00:05:43,330
even have terms like this style that

00:05:41,500 --> 00:05:45,130
you're using in your project just use

00:05:43,330 --> 00:05:47,590
the same style everywhere and it becomes

00:05:45,130 --> 00:05:50,560
easier easier code less problems and

00:05:47,590 --> 00:05:54,040
you'll find those bugs and security

00:05:50,560 --> 00:05:56,710
problems easier and a little pet peeve

00:05:54,040 --> 00:05:59,410
of mine use a sensible commit message

00:05:56,710 --> 00:06:03,430
template II actually provide good

00:05:59,410 --> 00:06:06,160
information in that's fix is not a good

00:06:03,430 --> 00:06:07,990
message I mean you're fixing something

00:06:06,160 --> 00:06:10,720
now right they might sit there in your

00:06:07,990 --> 00:06:13,450
git repository for who knows maybe 21

00:06:10,720 --> 00:06:16,150
years into the future and it is good to

00:06:13,450 --> 00:06:17,950
have that message too big for all those

00:06:16,150 --> 00:06:19,510
other thousand eyeballs that are going

00:06:17,950 --> 00:06:21,400
to read your commit message they will

00:06:19,510 --> 00:06:23,560
enjoy that you actually spent ten

00:06:21,400 --> 00:06:25,840
minutes in producing a good and quality

00:06:23,560 --> 00:06:29,790
commit message fix is not good

00:06:25,840 --> 00:06:29,790
explain where you did it why you did it

00:06:30,000 --> 00:06:35,320
and of course when you review something

00:06:32,830 --> 00:06:37,900
you make sure that the author of the

00:06:35,320 --> 00:06:39,700
code follows this style the style guide

00:06:37,900 --> 00:06:42,910
of the code the template in the commit

00:06:39,700 --> 00:06:46,090
message quality code quality commit

00:06:42,910 --> 00:06:48,940
messages easier to read and understand

00:06:46,090 --> 00:06:50,979
and follow and once you've written the

00:06:48,940 --> 00:06:53,020
code you review the code you merge the

00:06:50,979 --> 00:06:54,940
stuff and you start testing it so of

00:06:53,020 --> 00:06:56,950
course you have a lot of tests right so

00:06:54,940 --> 00:06:58,330
you have your unit test your verify that

00:06:56,950 --> 00:06:59,710
your functions actually do what they're

00:06:58,330 --> 00:07:01,330
supposed to do when you put the

00:06:59,710 --> 00:07:03,820
functions together and they actually

00:07:01,330 --> 00:07:06,520
work together to and your bigger things

00:07:03,820 --> 00:07:10,479
work together they as well you know the

00:07:06,520 --> 00:07:11,890
same way we always do things so of

00:07:10,479 --> 00:07:13,990
course you can test the documentation as

00:07:11,890 --> 00:07:15,520
well that's a harder part but reference

00:07:13,990 --> 00:07:17,290
documentation and you can make sure that

00:07:15,520 --> 00:07:19,720
all the links are there that you don't

00:07:17,290 --> 00:07:22,210
reference stuff you removed and stuff

00:07:19,720 --> 00:07:24,040
things like that harder to test the

00:07:22,210 --> 00:07:28,060
documentation but still valuable to do

00:07:24,040 --> 00:07:30,280
for for as far as you can and of course

00:07:28,060 --> 00:07:33,520
manual test is something we all rely on

00:07:30,280 --> 00:07:36,460
in the end you don't get enough tests of

00:07:33,520 --> 00:07:37,960
your stuff until you release it to the

00:07:36,460 --> 00:07:39,280
world and then suddenly all the users

00:07:37,960 --> 00:07:42,990
start complaining because they use the

00:07:39,280 --> 00:07:45,550
stuff in wasted in test four anyway but

00:07:42,990 --> 00:07:47,200
well they find the bugs we add a test

00:07:45,550 --> 00:07:49,630
and we start over again for the next

00:07:47,200 --> 00:07:54,900
release maybe we'll catch the bug so

00:07:49,630 --> 00:07:57,760
this is how we do it right and once we

00:07:54,900 --> 00:08:00,820
wrote the code we review the code we've

00:07:57,760 --> 00:08:03,790
tested the stuff we written these tests

00:08:00,820 --> 00:08:05,650
and yeah that's good right yep and then

00:08:03,790 --> 00:08:08,560
we'll start to tormenting the code right

00:08:05,650 --> 00:08:11,530
this doesn't just just testing stuff

00:08:08,560 --> 00:08:14,500
with your own created creative ways of

00:08:11,530 --> 00:08:16,419
testing the code that's far from enough

00:08:14,500 --> 00:08:19,240
for finding your problems you need to

00:08:16,419 --> 00:08:22,630
add the fun tools like running your code

00:08:19,240 --> 00:08:24,310
with if you're using C or C++ or

00:08:22,630 --> 00:08:26,050
whatever you want to run everything will

00:08:24,310 --> 00:08:29,020
Val grind you want to add those

00:08:26,050 --> 00:08:31,419
sanitizer tests or checks address

00:08:29,020 --> 00:08:34,210
sacrifices undefined behavior and into

00:08:31,419 --> 00:08:37,180
your overflow sanitizers with clang and

00:08:34,210 --> 00:08:39,070
GCC excellent tools you want to run your

00:08:37,180 --> 00:08:42,270
static cone and analyzers and you want

00:08:39,070 --> 00:08:46,839
to remove every defect there are many

00:08:42,270 --> 00:08:52,390
static analyzers of course both open and

00:08:46,839 --> 00:08:54,550
not so open a great way to smooth and

00:08:52,390 --> 00:08:56,110
out things if they found defects you

00:08:54,550 --> 00:08:59,290
better find a way to write it in a

00:08:56,110 --> 00:09:01,530
different way and then of course once

00:08:59,290 --> 00:09:04,300
you've come all that way everything is

00:09:01,530 --> 00:09:06,100
great and fine then you throw on the

00:09:04,300 --> 00:09:07,660
buzzers on your code

00:09:06,100 --> 00:09:09,610
you start fixing all those bugs that the

00:09:07,660 --> 00:09:11,620
first sirs find because that is

00:09:09,610 --> 00:09:14,560
certainly the next level here everything

00:09:11,620 --> 00:09:16,959
can be green and no zero or rather zero

00:09:14,560 --> 00:09:19,899
defects up until this point throwing the

00:09:16,959 --> 00:09:20,980
fasteners on your api's that's the next

00:09:19,899 --> 00:09:24,699
level of fun

00:09:20,980 --> 00:09:27,279
for a time onwards from their point

00:09:24,699 --> 00:09:29,560
faster than basically throwing a lot of

00:09:27,279 --> 00:09:31,540
 on your API ice making sure what

00:09:29,560 --> 00:09:33,190
happens and then fiddling the data try

00:09:31,540 --> 00:09:35,290
again try it again try it again try it

00:09:33,190 --> 00:09:39,100
again until it finds something that

00:09:35,290 --> 00:09:41,800
wasn't intended so and once you've fixed

00:09:39,100 --> 00:09:45,399
all that well buzzing never really ends

00:09:41,800 --> 00:09:48,069
but you can please once it hasn't found

00:09:45,399 --> 00:09:50,079
anything for good while you're in a

00:09:48,069 --> 00:09:52,149
fairly good spot at least but of course

00:09:50,079 --> 00:09:53,920
your code keeps on changing right so

00:09:52,149 --> 00:09:56,680
even if you followed all these steps up

00:09:53,920 --> 00:09:59,110
until this point you're not done at this

00:09:56,680 --> 00:10:02,259
point so we need to keep doing this all

00:09:59,110 --> 00:10:05,199
the time on every commit and every pull

00:10:02,259 --> 00:10:06,670
because we do all the time right all of

00:10:05,199 --> 00:10:12,540
this all the time

00:10:06,670 --> 00:10:17,110
non-stop easy-peasy

00:10:12,540 --> 00:10:21,040
so in the curl project that I spend some

00:10:17,110 --> 00:10:24,579
time on we try to do all this actually

00:10:21,040 --> 00:10:28,209
so we have for every commit every pull

00:10:24,579 --> 00:10:31,120
request we do 50 bills roughly or test

00:10:28,209 --> 00:10:34,149
rounds and we test for code styles we

00:10:31,120 --> 00:10:36,610
test for indenting so there's a read

00:10:34,149 --> 00:10:39,220
crossing if you don't follow the style

00:10:36,610 --> 00:10:41,740
if you're intending indenting the code

00:10:39,220 --> 00:10:43,300
the wrong way or if you're putting your

00:10:41,740 --> 00:10:48,279
braces on the wrong position on the

00:10:43,300 --> 00:10:50,709
lines we're having two wide lines so we

00:10:48,279 --> 00:10:53,889
do a few thousand tests per build that's

00:10:50,709 --> 00:10:58,240
like 50 bills times thousand so it takes

00:10:53,889 --> 00:11:01,079
a while we build on roughly well I think

00:10:58,240 --> 00:11:04,930
we have a little bit 10 platforms

00:11:01,079 --> 00:11:06,790
limited mostly them by what kind of

00:11:04,930 --> 00:11:09,730
architectures we have access to from

00:11:06,790 --> 00:11:11,889
build forms and volunteers so it makes

00:11:09,730 --> 00:11:16,350
it take roughly twenty twenty-five hours

00:11:11,889 --> 00:11:19,540
per commit in CI build times

00:11:16,350 --> 00:11:20,860
that's basically total CPU time so

00:11:19,540 --> 00:11:22,990
they're actually running a bunch of them

00:11:20,860 --> 00:11:24,880
in parallel so they don't always take 25

00:11:22,990 --> 00:11:28,900
hours until they're done but sometimes

00:11:24,880 --> 00:11:31,480
they do that's a little bit annoying but

00:11:28,900 --> 00:11:32,590
what do you do so in the project I just

00:11:31,480 --> 00:11:35,530
wanted to mention then what would you

00:11:32,590 --> 00:11:37,570
use tools to accomplish all this so we

00:11:35,530 --> 00:11:39,670
like Val grind as I mentioned before

00:11:37,570 --> 00:11:43,900
it's an awesome tool to find some things

00:11:39,670 --> 00:11:46,510
and we of course run clang clang all

00:11:43,900 --> 00:11:49,600
these sanitizer things enabled builds

00:11:46,510 --> 00:11:51,490
and we use clang tidy which is it's a

00:11:49,600 --> 00:11:54,310
sort of a combination but it adds some

00:11:51,490 --> 00:11:56,220
extra limiting mumbo-jumbo I'm not sure

00:11:54,310 --> 00:11:59,170
exactly what they put in each of these

00:11:56,220 --> 00:12:03,640
tools but they they find the different

00:11:59,170 --> 00:12:06,670
problems actually and well we have our

00:12:03,640 --> 00:12:08,680
own torture tests which are funny I just

00:12:06,670 --> 00:12:11,800
wanted to mention that because so when

00:12:08,680 --> 00:12:14,470
we run our we have our own memory debug

00:12:11,800 --> 00:12:17,560
systems that we instrument all basically

00:12:14,470 --> 00:12:19,900
all dynamically all functions that can

00:12:17,560 --> 00:12:22,360
return memory or a handle dynamically

00:12:19,900 --> 00:12:25,630
and you run the tool once and count the

00:12:22,360 --> 00:12:28,630
number of times we return memory 125

00:12:25,630 --> 00:12:30,550
times and we run the tool again 125

00:12:28,630 --> 00:12:32,680
times and let each of these currencies

00:12:30,550 --> 00:12:34,990
fail one at a time and make sure that

00:12:32,680 --> 00:12:37,900
everything works even if every mile look

00:12:34,990 --> 00:12:40,570
over F open or whatever returns failure

00:12:37,900 --> 00:12:43,330
an excellent test actually to test exit

00:12:40,570 --> 00:12:45,310
path from failures so and then we of

00:12:43,330 --> 00:12:47,470
course use a lot of static code

00:12:45,310 --> 00:12:49,930
analyzers can build again another clang

00:12:47,470 --> 00:12:52,990
tool but that to finds other stuff than

00:12:49,930 --> 00:12:56,500
the other clang things and we use the LG

00:12:52,990 --> 00:13:00,280
TM static code analyzer that's a free

00:12:56,500 --> 00:13:05,320
one easy to integrate with github for

00:13:00,280 --> 00:13:07,860
example and the codices similarly easily

00:13:05,320 --> 00:13:10,330
accessible not sure those two are

00:13:07,860 --> 00:13:14,110
possibly the we care among the static

00:13:10,330 --> 00:13:16,270
colonizers cover to being the grand star

00:13:14,110 --> 00:13:19,180
among static code analyzers that's of

00:13:16,270 --> 00:13:22,270
course not a open tool but it's freely

00:13:19,180 --> 00:13:26,860
available to to open source projects at

00:13:22,270 --> 00:13:29,030
least really really the best C C++ code

00:13:26,860 --> 00:13:32,750
static owner analyzer to

00:13:29,030 --> 00:13:35,360
so when that goes zero you're in a good

00:13:32,750 --> 00:13:37,490
place and when that is there as I said

00:13:35,360 --> 00:13:39,260
before you go fussing and we're part of

00:13:37,490 --> 00:13:41,390
the USS fast project which is an

00:13:39,260 --> 00:13:43,850
excellent project run by Google so they

00:13:41,390 --> 00:13:46,010
basically have a lot of machines Google

00:13:43,850 --> 00:13:47,870
has a lot of machines but they have a

00:13:46,010 --> 00:13:50,840
lot of machines and they run fuzzing so

00:13:47,870 --> 00:13:52,460
and they have adopted a huge bunch of

00:13:50,840 --> 00:13:54,230
open-source project that they first so

00:13:52,460 --> 00:13:57,350
they have a whole army of machines

00:13:54,230 --> 00:13:58,760
fuzzing our API is non-stop and they've

00:13:57,350 --> 00:14:01,310
found a lot of fun things

00:13:58,760 --> 00:14:06,130
it has trickled down so they haven't

00:14:01,310 --> 00:14:09,170
found a lot lately which is great so

00:14:06,130 --> 00:14:11,570
initially if I think I think they

00:14:09,170 --> 00:14:13,490
pointed out at least four different

00:14:11,570 --> 00:14:15,460
security problems in a bunch of memory

00:14:13,490 --> 00:14:18,350
leaks and whatever crap

00:14:15,460 --> 00:14:20,330
an excellent project and of course that

00:14:18,350 --> 00:14:23,020
sort of goes if you do reversing right

00:14:20,330 --> 00:14:25,250
you can find a lot of things but fuzzing

00:14:23,020 --> 00:14:26,870
isn't always easy and it's a resource

00:14:25,250 --> 00:14:28,520
intensive and it takes a lot of time

00:14:26,870 --> 00:14:31,370
then it's good to have a lot of

00:14:28,520 --> 00:14:36,320
machinery so we use done a lot of free

00:14:31,370 --> 00:14:38,150
CI services actually all of these tools

00:14:36,320 --> 00:14:40,670
that we use in the culprit everything

00:14:38,150 --> 00:14:43,070
here is provided for free so we don't

00:14:40,670 --> 00:14:46,900
pay for any of this so Travis CI a--

00:14:43,070 --> 00:14:51,440
player 0ci and we have a bunch of

00:14:46,900 --> 00:14:54,740
volunteers running build bots so a lot

00:14:51,440 --> 00:14:56,630
of things running so basically then just

00:14:54,740 --> 00:14:58,400
to go back to what I said before we have

00:14:56,630 --> 00:15:01,580
a few policies the new project we fix

00:14:58,400 --> 00:15:03,680
all warnings which is easier said than

00:15:01,580 --> 00:15:06,320
done because we support basically every

00:15:03,680 --> 00:15:08,150
32-bit architecture you can imagine so

00:15:06,320 --> 00:15:10,990
having the code run warning free

00:15:08,150 --> 00:15:13,220
everywhere it's a little bit of a

00:15:10,990 --> 00:15:17,000
cat-and-mouse game that will never

00:15:13,220 --> 00:15:18,890
really completely managed to come out

00:15:17,000 --> 00:15:21,290
alive from so yeah we have a few

00:15:18,890 --> 00:15:22,940
warnings but yeah basically we fix all

00:15:21,290 --> 00:15:25,430
warnings and we don't leave any defects

00:15:22,940 --> 00:15:27,650
detected by any of these tools and we

00:15:25,430 --> 00:15:30,110
always build everything with a strict

00:15:27,650 --> 00:15:32,630
and most picky warning compiler options

00:15:30,110 --> 00:15:35,420
that we can find anything that is

00:15:32,630 --> 00:15:37,430
suspicious we fix and make them not

00:15:35,420 --> 00:15:39,350
complain and warn about anymore

00:15:37,430 --> 00:15:41,450
and of course we have as many tests as

00:15:39,350 --> 00:15:42,930
possible which is funny because as I

00:15:41,450 --> 00:15:45,899
said we use all these

00:15:42,930 --> 00:15:47,430
tared CI systems and that is a bit of a

00:15:45,899 --> 00:15:51,210
challenge now because we're running into

00:15:47,430 --> 00:15:54,000
the time limit for some of them so it's

00:15:51,210 --> 00:15:56,339
going to be expensive when we go further

00:15:54,000 --> 00:15:58,380
I think or we're going to have to re

00:15:56,339 --> 00:16:00,330
rearrange our testing systems and of

00:15:58,380 --> 00:16:00,990
course we fix security issues as soon as

00:16:00,330 --> 00:16:04,560
we can

00:16:00,990 --> 00:16:07,740
I'll get back to security issues so of

00:16:04,560 --> 00:16:09,180
course this is expensive I mean doing

00:16:07,740 --> 00:16:12,089
this in your project it takes a lot of

00:16:09,180 --> 00:16:15,930
time and effort and yeah so you have to

00:16:12,089 --> 00:16:18,600
you have to spend effort time and energy

00:16:15,930 --> 00:16:21,120
to do this but of course not doing that

00:16:18,600 --> 00:16:23,730
makes makes you suffer from all sorts of

00:16:21,120 --> 00:16:26,250
fun things that you will end up maybe

00:16:23,730 --> 00:16:29,990
you won't right exactly these flaws but

00:16:26,250 --> 00:16:33,600
these flaws are of course the results of

00:16:29,990 --> 00:16:38,880
security problems in development stages

00:16:33,600 --> 00:16:41,130
and you know different kinds and and a

00:16:38,880 --> 00:16:42,899
favorite one and even if you do end up

00:16:41,130 --> 00:16:45,630
with one of these security problems you

00:16:42,899 --> 00:16:47,209
can also opt to fix them in not so good

00:16:45,630 --> 00:16:53,250
ways too

00:16:47,209 --> 00:16:55,200
so so even if you're cisco you can find

00:16:53,250 --> 00:17:00,150
security problems and you might fix them

00:16:55,200 --> 00:17:03,870
but they didn't follow the reviews step

00:17:00,150 --> 00:17:08,309
in my guide here I think but they fix

00:17:03,870 --> 00:17:09,750
their immediate flow right so well and

00:17:08,309 --> 00:17:11,579
then even if you follow all these steps

00:17:09,750 --> 00:17:14,069
you do everything right bad things will

00:17:11,579 --> 00:17:15,839
happen for sure because we're all human

00:17:14,069 --> 00:17:18,929
still we write everything this manually

00:17:15,839 --> 00:17:21,300
so plus will happen and we just have to

00:17:18,929 --> 00:17:22,829
recognize that this is what's going to

00:17:21,300 --> 00:17:24,720
happen so we will just act on it

00:17:22,829 --> 00:17:28,020
immediately when we get to know about it

00:17:24,720 --> 00:17:31,080
and we own the problem so we that we fix

00:17:28,020 --> 00:17:33,600
it we ship anyone we try to learn

00:17:31,080 --> 00:17:37,410
something from it right if add bugs we

00:17:33,600 --> 00:17:39,960
try to correct our procedures how how

00:17:37,410 --> 00:17:42,360
did this flow end up in our code what

00:17:39,960 --> 00:17:43,580
what's wrong did we do what can we do

00:17:42,360 --> 00:17:46,980
better next time

00:17:43,580 --> 00:17:48,540
Norwell is easy to learn because we know

00:17:46,980 --> 00:17:49,920
everything moves all the times and maybe

00:17:48,540 --> 00:17:52,540
the next time is completely different

00:17:49,920 --> 00:17:55,100
but still

00:17:52,540 --> 00:17:57,680
things are not going to be good if we

00:17:55,100 --> 00:18:01,250
don't do that so we just have to shape

00:17:57,680 --> 00:18:03,560
up so I I just to wrap this up then I

00:18:01,250 --> 00:18:09,170
have this fun easy

00:18:03,560 --> 00:18:11,690
remember word through tree right easy to

00:18:09,170 --> 00:18:14,360
remember so that's basically just what

00:18:11,690 --> 00:18:17,930
I've just said in simple easy to say

00:18:14,360 --> 00:18:20,150
word you write clean code right and

00:18:17,930 --> 00:18:22,820
someone verifies it by reviewing it and

00:18:20,150 --> 00:18:27,230
then we test everything we torment it

00:18:22,820 --> 00:18:30,770
and we act on the mistakes that slipped

00:18:27,230 --> 00:18:33,760
in anyway that's what I wanted to say

00:18:30,770 --> 00:18:33,760
thank you

00:18:40,410 --> 00:18:53,160
and I have room for questions if if

00:18:43,110 --> 00:18:54,450
something wasn't really clear you said

00:18:53,160 --> 00:18:56,429
you're not going to talk about the other

00:18:54,450 --> 00:18:59,880
language so I won't be rude and I won't

00:18:56,429 --> 00:19:02,340
talk about that language at all but but

00:18:59,880 --> 00:19:04,440
I would say in general is that you talk

00:19:02,340 --> 00:19:06,570
to her on one slide at least about

00:19:04,440 --> 00:19:08,130
automating things and actually a lot of

00:19:06,570 --> 00:19:11,900
flights where you're talking about

00:19:08,130 --> 00:19:14,780
automating tests and all that and all

00:19:11,900 --> 00:19:18,750
but wouldn't you agree that it would be

00:19:14,780 --> 00:19:20,549
better to do in this modern world to to

00:19:18,750 --> 00:19:23,580
use tools in general not just that

00:19:20,549 --> 00:19:26,340
language but rules in general that make

00:19:23,580 --> 00:19:29,909
it easy to write tests that make it very

00:19:26,340 --> 00:19:32,309
secure to to do not make mistakes of

00:19:29,909 --> 00:19:33,900
course of course I mean I mentioned like

00:19:32,309 --> 00:19:34,620
a whole bunch of tools right that make

00:19:33,900 --> 00:19:36,809
this easier

00:19:34,620 --> 00:19:38,610
tools that we didn't have have for maybe

00:19:36,809 --> 00:19:40,440
ten years ago so so of course the

00:19:38,610 --> 00:19:43,590
tooling has become much better in modern

00:19:40,440 --> 00:19:45,090
times but saying then sort of hallelujah

00:19:43,590 --> 00:19:46,799
we're going to be saved by a magic new

00:19:45,090 --> 00:19:48,480
programming language that's it's going

00:19:46,799 --> 00:19:50,789
to work for Windows and Linux that is

00:19:48,480 --> 00:19:52,650
not the solution short term for any of

00:19:50,789 --> 00:19:54,750
these problems but I'm sure that we can

00:19:52,650 --> 00:19:56,370
fix a lot of problems by switching out

00:19:54,750 --> 00:20:05,010
languages to some other language in the

00:19:56,370 --> 00:20:08,159
future and more tools I upgrade I built

00:20:05,010 --> 00:20:10,830
a builded curl using a library written

00:20:08,159 --> 00:20:12,809
in rust I compile it

00:20:10,830 --> 00:20:15,570
two months ago and today on the train

00:20:12,809 --> 00:20:18,960
down here I tried to build it again what

00:20:15,570 --> 00:20:20,640
happened rust changed right rust up I

00:20:18,960 --> 00:20:22,230
had to upgrade my rust because in two

00:20:20,640 --> 00:20:25,789
months it had grown old

00:20:22,230 --> 00:20:25,789
so yes rust

00:20:27,110 --> 00:20:34,760
I think what happened was that it found

00:20:32,440 --> 00:20:47,120
problems in your court that they didn't

00:20:34,760 --> 00:20:50,539
found before anyone else for your bonus

00:20:47,120 --> 00:21:05,049
if you do things right you can get a

00:20:50,539 --> 00:21:09,440
thing from the king during this evening

00:21:05,049 --> 00:21:11,269
with his awards ceremony thing I sat

00:21:09,440 --> 00:21:14,000
across him during the entire dinner and

00:21:11,269 --> 00:21:15,470
there was a lot of videos and stuff

00:21:14,000 --> 00:21:17,659
about what I done I don't know

00:21:15,470 --> 00:21:19,940
everything but it's very complicated

00:21:17,659 --> 00:21:20,570
does anyone I mean my family you know

00:21:19,940 --> 00:21:25,130
what I'm doing

00:21:20,570 --> 00:21:26,360
you know maybe so no I don't think the

00:21:25,130 --> 00:21:29,980
King knew what it was I don't think

00:21:26,360 --> 00:21:29,980
basically anyone else did either so

00:21:41,310 --> 00:21:48,700
thank you right thanks we will start the

00:21:46,810 --> 00:21:52,420
next talk a little bit ahead of schedule

00:21:48,700 --> 00:21:53,740
so in about five minutes and so don't

00:21:52,420 --> 00:21:56,610
miss out on that if you want to see that

00:21:53,740 --> 00:21:56,610
talk Thanks

00:21:57,620 --> 00:22:03,720
[Applause]

00:22:08,210 --> 00:22:10,270

YouTube URL: https://www.youtube.com/watch?v=n55ZJxL04Hk


