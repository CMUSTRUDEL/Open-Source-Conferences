Title: Cryptech - Open Hardware Security Modules for a safer, open world - Joachim Strömbergson
Publication date: 2019-04-17
Playlist: foss-north 2019
Description: 
	The CrypTech Hardware Security Module (HSM) Project is an international project developing an open-source hardware cryptographic engine design that meets the needs of high assurance Internet infrastructure systems. Until today, HSMs used for CA certificate signing, DNSSEC and Tor, for example, were highly expensive, proprietary tamper protected black boxes. CrypTech is changing that, making HSMs open and available to everyone.
The goal of the CrypTech project is to create an open-source hardware cryptographic engine that can be built by anyone from public hardware specifications and open-source firmware and operated without fees of any kind. In the talk we will describe what the Cryptech Alpha HSM is, the status for the project, some of the experiences we’ve had designing open crypto hardware, PCBs and FPGAs.

---

Joachim Strömbergson is a senior security specialist at Assured AB, a security consultancy based in Gothenburg, Sweden. Joachim focuses on design, implementation and evaluation of embedded security protocols, cryptography and random number generation. Joachim is actively working with the development of biometric, embedded and hardware based security solutions. Joachim has released numerous open hardware implementations.

https://foss-north.se/2019/speakers-and-talks.html#jstrombergson
Captions: 
	00:00:15,599 --> 00:00:21,529
okay either my name is Joakim

00:00:19,110 --> 00:00:25,230
the sake buffs and protocol cryptic

00:00:21,529 --> 00:00:30,450
which is and then the open area security

00:00:25,230 --> 00:00:33,930
module platform and just on it this is

00:00:30,450 --> 00:00:35,699
me and said your first row is 1 I am a

00:00:33,930 --> 00:00:38,879
security consultant working for a

00:00:35,699 --> 00:00:42,629
company owner shirt I specialize in

00:00:38,879 --> 00:00:46,440
embedded systems a second FPGAs and

00:00:42,629 --> 00:00:50,489
biometrics also come out with crypto and

00:00:46,440 --> 00:00:54,059
I don't mean box shake in that case in

00:00:50,489 --> 00:00:56,370
my in my copies free time I I write a

00:00:54,059 --> 00:00:58,470
lot of open crypto hardware

00:00:56,370 --> 00:01:00,269
implementations see if we go to put to

00:00:58,470 --> 00:01:03,869
my into for example you can download

00:01:00,269 --> 00:01:07,770
coerce transport yes a lot of other

00:01:03,869 --> 00:01:11,280
stuff time and I do like to work on CPU

00:01:07,770 --> 00:01:13,049
designs and as a backing and in many

00:01:11,280 --> 00:01:17,490
many years ago I was part of a team

00:01:13,049 --> 00:01:19,170
called ferrite if you made that and

00:01:17,490 --> 00:01:23,940
someday I'm gonna try to release another

00:01:19,170 --> 00:01:26,540
team or something in any here so we're

00:01:23,940 --> 00:01:28,860
talking about hundred security modules

00:01:26,540 --> 00:01:31,490
and whatever we start with put what they

00:01:28,860 --> 00:01:34,140
are and and why they are important and

00:01:31,490 --> 00:01:38,220
why we see there's a problem of them

00:01:34,140 --> 00:01:40,800
being black boxes so a horror secure

00:01:38,220 --> 00:01:45,030
module is a delicate appliance a device

00:01:40,800 --> 00:01:48,990
that is used to generate and store

00:01:45,030 --> 00:01:51,180
secrets typically private keys and

00:01:48,990 --> 00:01:53,010
protect them inside the machine and

00:01:51,180 --> 00:01:55,170
basically offloading sensitive

00:01:53,010 --> 00:01:58,110
operations from a general system will

00:01:55,170 --> 00:02:03,060
normal PC to perform perform operations

00:01:58,110 --> 00:02:05,400
with these keys and this this horoscope

00:02:03,060 --> 00:02:07,620
of those intercepts they are very

00:02:05,400 --> 00:02:09,569
expensive easily cost you hundred

00:02:07,620 --> 00:02:11,879
thousand dollars in one month there are

00:02:09,569 --> 00:02:13,470
very few vendors if I say there's a half

00:02:11,879 --> 00:02:18,120
of them I probably have one finger too

00:02:13,470 --> 00:02:20,909
many and they often they're quite big

00:02:18,120 --> 00:02:23,900
natural interests in these devices they

00:02:20,909 --> 00:02:26,730
often connect the two organizations that

00:02:23,900 --> 00:02:28,290
like secrets like in a say for example

00:02:26,730 --> 00:02:30,270
if you look at they can cipher one of

00:02:28,290 --> 00:02:32,700
the vendors that used to be around

00:02:30,270 --> 00:02:34,400
before then we brought up and I was

00:02:32,700 --> 00:02:37,920
started by any same people for example

00:02:34,400 --> 00:02:41,340
and today basically all of the ATM

00:02:37,920 --> 00:02:47,940
vendors are owned by Dassault the French

00:02:41,340 --> 00:02:49,620
defense command an exam that it

00:02:47,940 --> 00:02:53,340
basically takes you have something like

00:02:49,620 --> 00:02:55,860
like a a CPU inside the machine and that

00:02:53,340 --> 00:02:58,470
they can do that can perform operations

00:02:55,860 --> 00:03:01,200
and it also has horror accelerations for

00:02:58,470 --> 00:03:03,680
crypto typically RSA operations AES

00:03:01,200 --> 00:03:06,930
tests Triple DES symmetric operations

00:03:03,680 --> 00:03:08,280
and then you have a storage of secrets

00:03:06,930 --> 00:03:11,790
inside of the machine in a database

00:03:08,280 --> 00:03:13,200
typically flash memory and then very

00:03:11,790 --> 00:03:15,450
very important keep order basis is a

00:03:13,200 --> 00:03:16,770
random number generator a high quality

00:03:15,450 --> 00:03:18,390
of random number generator that can

00:03:16,770 --> 00:03:21,900
generate keys that you can actually know

00:03:18,390 --> 00:03:24,750
and trust and you can actually trust and

00:03:21,900 --> 00:03:26,550
these machines there are a few standards

00:03:24,750 --> 00:03:28,349
for for having to actually write

00:03:26,550 --> 00:03:31,050
applications then we talk and use an

00:03:28,349 --> 00:03:34,560
excel and then this data one is is

00:03:31,050 --> 00:03:35,880
Pegasus it penises it alone and also

00:03:34,560 --> 00:03:38,190
there's that someone management

00:03:35,880 --> 00:03:39,920
interface also so you can typically do

00:03:38,190 --> 00:03:42,300
things like okay I want to actually

00:03:39,920 --> 00:03:43,830
winning install a machine like this you

00:03:42,300 --> 00:03:45,660
actually set it up in an operation mode

00:03:43,830 --> 00:03:50,370
and then the basic in neighbors several

00:03:45,660 --> 00:03:53,370
security features and the reason why

00:03:50,370 --> 00:03:54,660
these machines are so important is

00:03:53,370 --> 00:03:57,629
because they're used in a lot of

00:03:54,660 --> 00:03:59,190
applications it normally if you buy a

00:03:57,629 --> 00:04:01,489
certificate which hopefully helps it

00:03:59,190 --> 00:04:02,819
certificate authority they use

00:04:01,489 --> 00:04:04,920
intercepts

00:04:02,819 --> 00:04:08,640
just to do the designing operations

00:04:04,920 --> 00:04:10,709
organize and create to start the

00:04:08,640 --> 00:04:13,140
certificate and their private keys are

00:04:10,709 --> 00:04:15,810
stored inside of intercepts but you also

00:04:13,140 --> 00:04:17,669
have ID cards citizen ID cards example

00:04:15,810 --> 00:04:20,009
where you have basically client

00:04:17,669 --> 00:04:23,400
certificate it's generated by its

00:04:20,009 --> 00:04:26,650
emanates and inside of the card and I'll

00:04:23,400 --> 00:04:30,100
use it for like say for example and

00:04:26,650 --> 00:04:31,840
lottery tickets and even if the team

00:04:30,100 --> 00:04:33,880
code when you get in a new smart card

00:04:31,840 --> 00:04:36,340
from your bank and you get a pin code

00:04:33,880 --> 00:04:39,490
like four two four six digits that

00:04:36,340 --> 00:04:40,690
number exactly generated by an exam and

00:04:39,490 --> 00:04:45,400
then generates and then you know

00:04:40,690 --> 00:04:48,400
percentage a so so exams are used in the

00:04:45,400 --> 00:04:50,410
model of important infrastructure and

00:04:48,400 --> 00:04:53,260
systems around the world that we rely a

00:04:50,410 --> 00:04:55,150
trust on not at least internet one of

00:04:53,260 --> 00:05:00,280
the basis of the internet and they

00:04:55,150 --> 00:05:02,139
secure to the Internet and there's this

00:05:00,280 --> 00:05:04,060
you have this because it's eleven and

00:05:02,139 --> 00:05:06,370
you have a lot of standards around these

00:05:04,060 --> 00:05:10,270
formal standards you have government

00:05:06,370 --> 00:05:11,740
agencies that right standards for for

00:05:10,270 --> 00:05:14,139
for the security of these devices and

00:05:11,740 --> 00:05:15,610
how to evaluate invented this thing

00:05:14,139 --> 00:05:18,190
called comma criteria which is a

00:05:15,610 --> 00:05:21,610
standard for how to evaluate as a

00:05:18,190 --> 00:05:24,460
different type of product eleven example

00:05:21,610 --> 00:05:27,280
and nice they American a standardization

00:05:24,460 --> 00:05:29,889
they have a series of standard like FIPS

00:05:27,280 --> 00:05:31,960
140 times two or hundred the Dutch three

00:05:29,889 --> 00:05:34,810
to say I can say there and that

00:05:31,960 --> 00:05:37,539
specifies one things the security levels

00:05:34,810 --> 00:05:39,789
that you have from one to four and four

00:05:37,539 --> 00:05:42,460
being that means that if something tries

00:05:39,789 --> 00:05:45,130
to open up your ATM for some reason it

00:05:42,460 --> 00:05:48,039
should immediately theorize the secret

00:05:45,130 --> 00:05:50,919
key store in Soviet and depending on on

00:05:48,039 --> 00:05:53,560
what level of security security needs

00:05:50,919 --> 00:05:55,720
Osito specify what it means actually

00:05:53,560 --> 00:05:59,620
means is in milliseconds microseconds

00:05:55,720 --> 00:06:01,419
nanoseconds so on and understand that's

00:05:59,620 --> 00:06:04,960
also for for random number generations

00:06:01,419 --> 00:06:08,560
and how to test them and so to proceed

00:06:04,960 --> 00:06:10,780
is al evolution even a certification and

00:06:08,560 --> 00:06:13,210
you have mister FEMA and validators

00:06:10,780 --> 00:06:16,210
another so and all this is basically to

00:06:13,210 --> 00:06:17,979
be able to pay you by this box you can't

00:06:16,210 --> 00:06:20,830
open it up because if you do it back to

00:06:17,979 --> 00:06:23,200
destroy itself but because you have a

00:06:20,830 --> 00:06:25,190
lot of agencies and governments and they

00:06:23,200 --> 00:06:27,410
do formal educationally and

00:06:25,190 --> 00:06:28,400
everything is very very organized that

00:06:27,410 --> 00:06:33,980
you should be able to trust these

00:06:28,400 --> 00:06:39,230
machines they come in different sizes

00:06:33,980 --> 00:06:40,700
and prices of course and typically they

00:06:39,230 --> 00:06:43,100
said it's a very expensive machines but

00:06:40,700 --> 00:06:45,500
you know I'd like an something you can

00:06:43,100 --> 00:06:48,140
put in there in Iraq and they can offer

00:06:45,500 --> 00:06:50,120
me a card inside a host computer and

00:06:48,140 --> 00:06:52,610
performs acceleration and storage in

00:06:50,120 --> 00:06:54,980
soda and you can know that is actually

00:06:52,610 --> 00:06:58,010
it's a super capacitor but normally a

00:06:54,980 --> 00:07:00,260
battery or capacitor so even if you turn

00:06:58,010 --> 00:07:02,330
off the host the car itself were

00:07:00,260 --> 00:07:05,300
particularly temporary temporal

00:07:02,330 --> 00:07:07,760
detection mechanism and the keys are

00:07:05,300 --> 00:07:09,590
actually kept alive inside the machine

00:07:07,760 --> 00:07:13,100
even eternal the whole chain still

00:07:09,590 --> 00:07:15,200
converse still be alive powerfully and

00:07:13,100 --> 00:07:17,900
they start right on down here the NXT

00:07:15,200 --> 00:07:20,180
something that that actually was inside

00:07:17,900 --> 00:07:23,270
your smart card that's a secure element

00:07:20,180 --> 00:07:26,210
as a very very small chip with something

00:07:23,270 --> 00:07:28,850
like five six connectors on it and it's

00:07:26,210 --> 00:07:30,830
normally not that big exactly shaped

00:07:28,850 --> 00:07:32,500
down it's a flat entering into a card

00:07:30,830 --> 00:07:37,820
but it basically have the same

00:07:32,500 --> 00:07:38,900
maintenance us and HSN has it's free if

00:07:37,820 --> 00:07:40,460
you need it

00:07:38,900 --> 00:07:43,520
one of the things that the x-ray is an 8

00:07:40,460 --> 00:07:46,430
and 16-bit CPU inside it that runs a

00:07:43,520 --> 00:07:48,740
version of Java Java card she acted by

00:07:46,430 --> 00:07:50,630
applets running on top of these cards so

00:07:48,740 --> 00:07:55,700
it can be tricky to know about the job

00:07:50,630 --> 00:07:58,700
of running in your in your pocket so and

00:07:55,700 --> 00:08:01,220
if you try to open up - guys this is one

00:07:58,700 --> 00:08:03,950
of the old cards is in the IBM for self

00:08:01,220 --> 00:08:07,640
attains typical PCI chordoma so for

00:08:03,950 --> 00:08:10,610
light so $15,000 and you can see there's

00:08:07,640 --> 00:08:12,890
these metal box there and if you try to

00:08:10,610 --> 00:08:14,660
pull it apart you can see that the bar

00:08:12,890 --> 00:08:17,300
is going inside and put on the backside

00:08:14,660 --> 00:08:18,650
it's it hard to get you and actually if

00:08:17,300 --> 00:08:20,630
you pull it off this actually spring

00:08:18,650 --> 00:08:22,940
that actually one of the tank detection

00:08:20,630 --> 00:08:26,090
so we actually destroy itself if you do

00:08:22,940 --> 00:08:28,730
this already another if you try to open

00:08:26,090 --> 00:08:30,890
up and go into the actual metal part you

00:08:28,730 --> 00:08:32,539
see this black torii thing is called

00:08:30,890 --> 00:08:33,620
polling that you have to feel

00:08:32,539 --> 00:08:36,530
everything's in but you cannot just

00:08:33,620 --> 00:08:38,750
start to see this this layer some of

00:08:36,530 --> 00:08:42,800
wires going back and forth and it's

00:08:38,750 --> 00:08:44,360
multiple layers of electrical plastic

00:08:42,800 --> 00:08:46,160
basically so you can exit detect that

00:08:44,360 --> 00:08:47,450
you try to puncture neither something

00:08:46,160 --> 00:08:49,730
through that people actually detect that

00:08:47,450 --> 00:08:53,150
very easily and then of course kill

00:08:49,730 --> 00:08:54,620
everything inside of it and if you get

00:08:53,150 --> 00:08:56,330
but if you get everything off you can

00:08:54,620 --> 00:09:00,580
actually see that okay this is basic to

00:08:56,330 --> 00:09:04,220
stand on x86 AMD CPU it has some small

00:09:00,580 --> 00:09:07,130
lattice FPGAs and some some basic doing

00:09:04,220 --> 00:09:09,770
some waiting so it's a pretty standard

00:09:07,130 --> 00:09:11,660
electronics but it's packaged in a very

00:09:09,770 --> 00:09:15,230
secure way so you should not be able to

00:09:11,660 --> 00:09:16,910
know what's inside of it and you don't

00:09:15,230 --> 00:09:19,750
have to trust it actually does what it's

00:09:16,910 --> 00:09:22,430
supposed to do and the problem is that

00:09:19,750 --> 00:09:25,370
they actually don't do that this is an

00:09:22,430 --> 00:09:32,830
example this is from from from from

00:09:25,370 --> 00:09:35,090
Taiwan oh this Court would get the

00:09:32,830 --> 00:09:36,140
certificate certificates a hammer or a

00:09:35,090 --> 00:09:38,840
safe key pair away

00:09:36,140 --> 00:09:41,630
only with a private key and what they

00:09:38,840 --> 00:09:43,490
did was that they this is very porous

00:09:41,630 --> 00:09:45,200
toilet they collected a lot of the

00:09:43,490 --> 00:09:47,360
public keys and looked at the public

00:09:45,200 --> 00:09:48,830
keys and see if they got red pepper

00:09:47,360 --> 00:09:51,620
kissed electric match which means that

00:09:48,830 --> 00:09:53,480
the planet is also much and if I figure

00:09:51,620 --> 00:09:56,840
out that several hundred percent percent

00:09:53,480 --> 00:09:58,820
of the keys wrapped for the same so

00:09:56,840 --> 00:10:04,730
something will problem with the way the

00:09:58,820 --> 00:10:06,830
key generation that one and then of

00:10:04,730 --> 00:10:08,300
course you have one of these guys they

00:10:06,830 --> 00:10:10,780
sorry okay this is the token generator

00:10:08,300 --> 00:10:15,020
place it's it's by the company or I say

00:10:10,780 --> 00:10:16,970
and they implemented randomly cool

00:10:15,020 --> 00:10:19,820
people you see them again which is one

00:10:16,970 --> 00:10:22,520
of the remnant randomly tenderness that

00:10:19,820 --> 00:10:25,940
is supposed to be implemented inside an

00:10:22,520 --> 00:10:27,960
HSM but you can you can't actually know

00:10:25,940 --> 00:10:31,140
if you're a t-cell is running the

00:10:27,960 --> 00:10:32,430
typical or not so you have to subtract

00:10:31,140 --> 00:10:35,550
that implement this new services it

00:10:32,430 --> 00:10:37,290
implements SPH on a design team might in

00:10:35,550 --> 00:10:41,340
our system nerd for another generation

00:10:37,290 --> 00:10:43,770
because that's required but it fits 140

00:10:41,340 --> 00:10:45,360
- to standard but not example say which

00:10:43,770 --> 00:10:46,860
follow so you can actually have one of

00:10:45,360 --> 00:10:49,800
these inside of you and it works

00:10:46,860 --> 00:10:52,440
generate random numbers and particularly

00:10:49,800 --> 00:10:54,390
relevant generate keys that is back yard

00:10:52,440 --> 00:10:59,790
that actually I can figure out what

00:10:54,390 --> 00:11:02,970
actually would propose to be and the

00:10:59,790 --> 00:11:04,830
Taiwanese problem because problem

00:11:02,970 --> 00:11:07,350
doesn't come along it actually happened

00:11:04,830 --> 00:11:10,470
again but with another vendor in this

00:11:07,350 --> 00:11:13,200
case Infinia and something like 1

00:11:10,470 --> 00:11:16,440
billion devices have full day or a

00:11:13,200 --> 00:11:18,900
second generation in those so they have

00:11:16,440 --> 00:11:20,310
to know replace card and/or update card

00:11:18,900 --> 00:11:22,500
and this is a good thing we're having

00:11:20,310 --> 00:11:25,200
Java inside we could not to send a

00:11:22,500 --> 00:11:27,690
secure applet to it not update your card

00:11:25,200 --> 00:11:31,140
win in your hair and the accommodative

00:11:27,690 --> 00:11:36,300
applet but that was eight nine thousand

00:11:31,140 --> 00:11:37,710
card seen in that update and then of

00:11:36,300 --> 00:11:39,480
course you can have if you insert serve

00:11:37,710 --> 00:11:43,560
through the CV databases you can find

00:11:39,480 --> 00:11:46,620
some really nice problems like remote

00:11:43,560 --> 00:11:48,270
key export restriction bypass when the

00:11:46,620 --> 00:11:50,700
key things will intercept is that you

00:11:48,270 --> 00:11:52,950
never ever gonna have your season keys

00:11:50,700 --> 00:11:54,630
leaving the machine in our control voice

00:11:52,950 --> 00:11:58,020
so that is basically killing that

00:11:54,630 --> 00:12:02,580
product and orbit assignment key extract

00:11:58,020 --> 00:12:05,070
is also analysis so given this we have

00:12:02,580 --> 00:12:06,540
these boxes we supposed to trust but

00:12:05,070 --> 00:12:08,580
they read on black box if I try to

00:12:06,540 --> 00:12:10,650
figure out how my box works it will

00:12:08,580 --> 00:12:17,700
actually kill itself since really

00:12:10,650 --> 00:12:21,980
trusted safe at face value so there were

00:12:17,700 --> 00:12:25,770
some people predicted ideas of years ago

00:12:21,980 --> 00:12:28,050
that follow this is not really a good

00:12:25,770 --> 00:12:29,540
good a set up and it could wait for word

00:12:28,050 --> 00:12:32,300
particular when we store

00:12:29,540 --> 00:12:34,310
deploying things like DNS SEC and rpki

00:12:32,300 --> 00:12:36,230
another point when the infrastructure

00:12:34,310 --> 00:12:37,910
the internet the wexel reliant trust of

00:12:36,230 --> 00:12:40,370
and the basic foundational internet is

00:12:37,910 --> 00:12:44,450
getting based on public key solutions

00:12:40,370 --> 00:12:46,280
chose to provide security we really need

00:12:44,450 --> 00:12:49,370
to be able to trust the those keys

00:12:46,280 --> 00:12:53,240
actually or good way and we can trust it

00:12:49,370 --> 00:12:58,790
ourselves so this they basically store

00:12:53,240 --> 00:13:01,360
this product to sort of develop it try

00:12:58,790 --> 00:13:04,100
to see we can develop an open intercept

00:13:01,360 --> 00:13:05,960
that some of that we can actually have

00:13:04,100 --> 00:13:07,880
some of the manufacturer you can

00:13:05,960 --> 00:13:10,460
manufacture self but you can be able to

00:13:07,880 --> 00:13:12,230
take the components the software is the

00:13:10,460 --> 00:13:15,500
design therefore were designed PCB

00:13:12,230 --> 00:13:17,570
design and make your own HSN or have

00:13:15,500 --> 00:13:19,010
something to do it for you and also be

00:13:17,570 --> 00:13:21,940
able to sort of pick the parts that you

00:13:19,010 --> 00:13:25,100
actually need for your for a solution

00:13:21,940 --> 00:13:26,900
and we didn't really know if it was

00:13:25,100 --> 00:13:28,040
going to be possible to do this and one

00:13:26,900 --> 00:13:30,140
thing that we learned is that it's sort

00:13:28,040 --> 00:13:33,560
of a process that we start moving to

00:13:30,140 --> 00:13:36,170
vote towards a of that solution and but

00:13:33,560 --> 00:13:38,120
we are a core team and we are trying to

00:13:36,170 --> 00:13:39,920
be diverse we don't have people from all

00:13:38,120 --> 00:13:45,290
of the world we have you from Sweden

00:13:39,920 --> 00:13:46,580
Russia USA Germany Japan Ireland and

00:13:45,290 --> 00:13:49,760
we're trying to get people from from

00:13:46,580 --> 00:13:51,830
China for example we try to work in an

00:13:49,760 --> 00:13:53,840
open development environment to be able

00:13:51,830 --> 00:13:56,780
to open as we can what we do we have

00:13:53,840 --> 00:13:58,970
discussions and I think Sam and all of

00:13:56,780 --> 00:14:01,280
will use gifts and one thing we do it

00:13:58,970 --> 00:14:03,110
with site all our eat comments so you

00:14:01,280 --> 00:14:09,440
can always trace back or the changes are

00:14:03,110 --> 00:14:11,900
done to me and speaking of openness we

00:14:09,440 --> 00:14:14,600
use to cross busy licence for all the

00:14:11,900 --> 00:14:17,360
only source file eyes on the software

00:14:14,600 --> 00:14:19,950
and application source code and so all

00:14:17,360 --> 00:14:23,490
the course that we have for for Horrocks

00:14:19,950 --> 00:14:26,730
creation of crypto stuff like ASO 236

00:14:23,490 --> 00:14:29,360
and RSA and the current stuff is all

00:14:26,730 --> 00:14:31,560
based in two processes and then which

00:14:29,360 --> 00:14:33,960
doesn't really work for for for intro

00:14:31,560 --> 00:14:36,750
X's not serve we use Creative Commons is

00:14:33,960 --> 00:14:38,400
that for peace we layout and think like

00:14:36,750 --> 00:14:43,050
pillow material with all the components

00:14:38,400 --> 00:14:44,820
that use so you can go to if you want to

00:14:43,050 --> 00:14:46,620
track that you can go to our track site

00:14:44,820 --> 00:14:50,790
and then you can look at automated

00:14:46,620 --> 00:14:53,190
system data and we sort of try to work

00:14:50,790 --> 00:14:55,830
step by step towards an open tool chain

00:14:53,190 --> 00:14:59,160
and dependently pins when we build our

00:14:55,830 --> 00:15:00,660
system and so that's it so the goal is a

00:14:59,160 --> 00:15:04,610
bit because that's part of trust that

00:15:00,660 --> 00:15:07,020
yes we do release this or miners and we

00:15:04,610 --> 00:15:08,850
generate 4-fold for our front of

00:15:07,020 --> 00:15:10,590
hardware but you should have caught they

00:15:08,850 --> 00:15:17,630
would recreate them to see that actually

00:15:10,590 --> 00:15:22,200
get the same binary in terms of language

00:15:17,630 --> 00:15:24,660
we use or is what we use very long as a

00:15:22,200 --> 00:15:27,960
horror description language prefer the

00:15:24,660 --> 00:15:30,480
for lesbian course you see a Python for

00:15:27,960 --> 00:15:35,130
example to do the modeling and to

00:15:30,480 --> 00:15:38,070
actually know that building is work by

00:15:35,130 --> 00:15:40,680
Chris Rock is a really good nice open

00:15:38,070 --> 00:15:42,840
burning simulator I use alone very later

00:15:40,680 --> 00:15:44,790
same same thing a little bit harder to

00:15:42,840 --> 00:15:47,160
use I use it mainly for for lean

00:15:44,790 --> 00:15:49,800
technical it's really good to have more

00:15:47,160 --> 00:15:51,390
than one parser of your source code they

00:15:49,800 --> 00:15:54,510
would attempt to find different

00:15:51,390 --> 00:15:56,940
different problems and of course we are

00:15:54,510 --> 00:15:59,220
embedded software Bennett's

00:15:56,940 --> 00:16:02,460
problem probably basically so we use C

00:15:59,220 --> 00:16:06,510
stagnancy assembly a lot of Python bash

00:16:02,460 --> 00:16:08,830
make files of course so we were kind of

00:16:06,510 --> 00:16:12,580
old school not as much rust and

00:16:08,830 --> 00:16:14,290
javascript and also those cool kids but

00:16:12,580 --> 00:16:18,610
we have some open in Sydney for dividing

00:16:14,290 --> 00:16:22,750
MTBE and Sun a lot so it kind of typical

00:16:18,610 --> 00:16:24,760
embedded project basically and we start

00:16:22,750 --> 00:16:26,470
out doing this we realized we need to

00:16:24,760 --> 00:16:28,090
start working on the FPGA design quite

00:16:26,470 --> 00:16:31,120
early and I start working on the course

00:16:28,090 --> 00:16:33,270
so we basically cons cheap African

00:16:31,120 --> 00:16:36,340
horses run real nice not from Tracy

00:16:33,270 --> 00:16:38,020
right in timing board and we can start

00:16:36,340 --> 00:16:39,580
doing development of the thing or some

00:16:38,020 --> 00:16:42,580
of the key parts like the random number

00:16:39,580 --> 00:16:44,860
generators yeah but it's it's not very

00:16:42,580 --> 00:16:46,420
open platform terrific has really put

00:16:44,860 --> 00:16:49,420
documentation but there's no quite like

00:16:46,420 --> 00:16:51,220
a PCB designer or boom a particular

00:16:49,420 --> 00:16:53,110
source code stuff for it for the stuff

00:16:51,220 --> 00:16:55,060
and of course we had to use like the

00:16:53,110 --> 00:16:59,970
Intel Altair tools like quarters for

00:16:55,060 --> 00:17:02,800
example a key thing for us was this

00:16:59,970 --> 00:17:06,459
bunny who are now released this is the

00:17:02,800 --> 00:17:10,480
first open laptop the Nalina it's an

00:17:06,459 --> 00:17:13,270
arm-based quad-core CPU inside of it

00:17:10,480 --> 00:17:14,709
it's block free might not like the

00:17:13,270 --> 00:17:16,360
prosper Python and I it's it's really

00:17:14,709 --> 00:17:18,070
you can actually you can I build

00:17:16,360 --> 00:17:20,920
everything from the sing a bit for

00:17:18,070 --> 00:17:24,360
booting up and all the way up it is a

00:17:20,920 --> 00:17:27,100
very very happy friendly divided Ford

00:17:24,360 --> 00:17:29,440
and there's a huge number interfaces

00:17:27,100 --> 00:17:31,810
this is a few laptops you can buy the

00:17:29,440 --> 00:17:35,350
house do well in easement interfaces can

00:17:31,810 --> 00:17:38,200
interface and all kinds of things in

00:17:35,350 --> 00:17:41,320
chemicals and such a lot of clear

00:17:38,200 --> 00:17:43,390
peripherals and and one key one thing

00:17:41,320 --> 00:17:45,310
for us was that the result is sporting a

00:17:43,390 --> 00:17:47,290
fairly big fpga

00:17:45,310 --> 00:17:50,050
that's connected tightly connected to

00:17:47,290 --> 00:17:51,910
day to the cpu so that we can start

00:17:50,050 --> 00:17:53,680
developing our software on the cpu and

00:17:51,910 --> 00:17:56,970
then we can actually put on course in

00:17:53,680 --> 00:17:59,350
southern FPGA and used moscow processors

00:17:56,970 --> 00:18:02,380
so look at the board here and you have

00:17:59,350 --> 00:18:05,470
the first red circuit that state that

00:18:02,380 --> 00:18:07,600
the fpga and then one of the heatsink

00:18:05,470 --> 00:18:12,020
you about the state the quad-core cpu

00:18:07,600 --> 00:18:13,940
and then over the edge there they say

00:18:12,020 --> 00:18:16,970
that one's goes straight into the FPGA

00:18:13,940 --> 00:18:19,730
is a wide connector with a pig-like 32

00:18:16,970 --> 00:18:20,390
or 64 bits wide bus going straight into

00:18:19,730 --> 00:18:22,820
the FPGA

00:18:20,390 --> 00:18:26,540
she came out stuff on that and do quite

00:18:22,820 --> 00:18:34,340
a good good high performance transfer

00:18:26,540 --> 00:18:36,380
data back and forth but then what we did

00:18:34,340 --> 00:18:39,230
was we started developing like the noise

00:18:36,380 --> 00:18:41,780
port we have a random number generator a

00:18:39,230 --> 00:18:45,020
real number the random generator in an

00:18:41,780 --> 00:18:47,780
HSM is based on you actually try to do

00:18:45,020 --> 00:18:50,960
you base Harbor base random number that

00:18:47,780 --> 00:18:53,059
were a random noise and in this case we

00:18:50,960 --> 00:18:55,160
have basically two random noise

00:18:53,059 --> 00:18:57,110
generators once inside of the FPGA and

00:18:55,160 --> 00:19:00,230
one outside of it and we sort of do

00:18:57,110 --> 00:19:01,910
everything on the outside you can see

00:19:00,230 --> 00:19:04,700
the progression of the pores we did and

00:19:01,910 --> 00:19:06,500
the world the two ports in the middle

00:19:04,700 --> 00:19:08,450
and right actually has the connector the

00:19:06,500 --> 00:19:10,429
same connector on the nabina speaking

00:19:08,450 --> 00:19:12,710
mounted on veena and we can start

00:19:10,429 --> 00:19:19,070
actually using it for for developing the

00:19:12,710 --> 00:19:21,710
rest of the random number generator now

00:19:19,070 --> 00:19:25,880
in G it looks like this we have the

00:19:21,710 --> 00:19:28,040
external generator we have a provider

00:19:25,880 --> 00:19:28,520
that collects data from that external

00:19:28,040 --> 00:19:31,460
board

00:19:28,520 --> 00:19:34,760
we was having internal proprietor is

00:19:31,460 --> 00:19:37,790
based on freerunning ring oscillators

00:19:34,760 --> 00:19:39,890
take the ring off such insult FPGA it's

00:19:37,790 --> 00:19:42,020
working on different mechanism than the

00:19:39,890 --> 00:19:48,320
one from the outside so if you're going

00:19:42,020 --> 00:19:51,260
to try to try to add bias or try to sort

00:19:48,320 --> 00:19:52,850
of modify and disturb the generation of

00:19:51,260 --> 00:19:54,800
not rounded numbers then you have to

00:19:52,850 --> 00:19:58,160
basically do two different type of

00:19:54,800 --> 00:19:59,900
physical mechanism at the same time and

00:19:58,160 --> 00:20:01,850
that we have a mixer which is basically

00:19:59,900 --> 00:20:05,090
this trophy's for a 12 that collects

00:20:01,850 --> 00:20:07,880
data from this in romaine and then we

00:20:05,090 --> 00:20:12,230
use that to see the cha-cha stream

00:20:07,880 --> 00:20:14,870
cipher if you look at the SP 8 on the -

00:20:12,230 --> 00:20:17,750
90 standard from from NIST

00:20:14,870 --> 00:20:21,050
say basically wall or using AES in this

00:20:17,750 --> 00:20:24,050
case but we wanted to use ChaCha

00:20:21,050 --> 00:20:25,790
because it has a much better performance

00:20:24,050 --> 00:20:28,670
I want to when things you can do with my

00:20:25,790 --> 00:20:30,680
Chuck chase it can very easily sort of

00:20:28,670 --> 00:20:33,230
crank up the number of iterations you do

00:20:30,680 --> 00:20:35,330
if you want to have more security say if

00:20:33,230 --> 00:20:37,670
it's done if you want to do like like 20

00:20:35,330 --> 00:20:39,860
20 trations but you can go like 30 40

00:20:37,670 --> 00:20:42,140
whatever it just keeps going so you can

00:20:39,860 --> 00:20:44,030
sort of if you want to be more secure

00:20:42,140 --> 00:20:47,030
you can actually just - and and drop the

00:20:44,030 --> 00:20:49,220
performance of it and it turns up a

00:20:47,030 --> 00:20:51,950
pretty good choice of a deal we are we

00:20:49,220 --> 00:20:54,830
can we can generate multi-gigabit random

00:20:51,950 --> 00:20:59,390
numbers and we're getting after testing

00:20:54,830 --> 00:21:02,780
getting some good results and this we

00:20:59,390 --> 00:21:04,460
develop all the novena and but we

00:21:02,780 --> 00:21:06,350
realize that said that the real has a

00:21:04,460 --> 00:21:09,080
lot of reefers we're talking encrypted

00:21:06,350 --> 00:21:10,970
we talk about kitchen sinks with a lot

00:21:09,080 --> 00:21:14,120
of peripherals and other functionality

00:21:10,970 --> 00:21:15,680
that we don't need and if you have a lot

00:21:14,120 --> 00:21:17,480
of functionality that you don't need

00:21:15,680 --> 00:21:20,150
most of them also normally he'll say

00:21:17,480 --> 00:21:21,860
that their basic black box is - and you

00:21:20,150 --> 00:21:22,910
can really trust them you know even if

00:21:21,860 --> 00:21:24,710
if you look in the in like

00:21:22,910 --> 00:21:26,630
microcontroller it has some of an

00:21:24,710 --> 00:21:30,800
interface like a can interface and you

00:21:26,630 --> 00:21:32,810
are whatnot it sits there in on the box

00:21:30,800 --> 00:21:34,670
connected to your CPU and it's not

00:21:32,810 --> 00:21:36,860
supposed to be doing anything but how

00:21:34,670 --> 00:21:38,270
can you actually trust that it's not

00:21:36,860 --> 00:21:41,000
needed and it's actually just add

00:21:38,270 --> 00:21:44,570
complexity and might actually be bad for

00:21:41,000 --> 00:21:46,910
you so we realize that we can't use bass

00:21:44,570 --> 00:21:49,010
or SSL on Molina we need to develop

00:21:46,910 --> 00:21:51,140
something in our own and one thing we

00:21:49,010 --> 00:21:55,580
did was we basically developed a half of

00:21:51,140 --> 00:21:57,470
an 87 the the process apart as a board

00:21:55,580 --> 00:22:00,500
with the same connector as the novena

00:21:57,470 --> 00:22:03,680
and put them on Amina and this one talks

00:22:00,500 --> 00:22:05,990
to the FPAA on the novena so we have the

00:22:03,680 --> 00:22:08,780
inner design you want to have in the CPU

00:22:05,990 --> 00:22:12,740
and an FPGA but it's half with his own

00:22:08,780 --> 00:22:14,390
own arena and half is important up in

00:22:12,740 --> 00:22:16,460
the red corner you can see the the same

00:22:14,390 --> 00:22:18,110
noise generator that we have external

00:22:16,460 --> 00:22:22,070
was port is now integrated into this

00:22:18,110 --> 00:22:24,100
port so slowly moving away from a lot of

00:22:22,070 --> 00:22:29,050
kids insane sensor moving

00:22:24,100 --> 00:22:30,700
design and this is our pride and joy

00:22:29,050 --> 00:22:35,770
this is what we have today this is

00:22:30,700 --> 00:22:38,350
support about 10 by 10 centimeters it's

00:22:35,770 --> 00:22:40,330
it's basically he sees the noise

00:22:38,350 --> 00:22:43,720
generated excellent noise generator is

00:22:40,330 --> 00:22:49,540
they undertake hood up there and then we

00:22:43,720 --> 00:22:53,700
have an orifice and stm32 my MCU sucess

00:22:49,540 --> 00:22:57,700
cortex m4 f based or processor and

00:22:53,700 --> 00:22:58,630
pretty big FPGA on there that's the

00:22:57,700 --> 00:23:01,930
basic setup behind

00:22:58,630 --> 00:23:03,220
I didn't bring my board because it's in

00:23:01,930 --> 00:23:05,200
your Harrison talked with because I'm

00:23:03,220 --> 00:23:09,360
doing the parking one so I think I'll

00:23:05,200 --> 00:23:09,360
take that a lot and it was this big

00:23:09,550 --> 00:23:14,650
yeah why do we have on this board is

00:23:12,310 --> 00:23:18,130
that we have asylum and small 8-bit

00:23:14,650 --> 00:23:20,320
processor AVR microcontroller that we

00:23:18,130 --> 00:23:21,880
can keep alive on battery so you can

00:23:20,320 --> 00:23:24,310
actually implement the tamper protection

00:23:21,880 --> 00:23:26,020
as we cannot do temporary changes in

00:23:24,310 --> 00:23:27,880
different ways like light and and

00:23:26,020 --> 00:23:32,230
somebody has open up their leaders

00:23:27,880 --> 00:23:33,730
another and we have pkcs 11 implemented

00:23:32,230 --> 00:23:35,800
and we also have a lot manager software

00:23:33,730 --> 00:23:40,660
for it so you can do everything you want

00:23:35,800 --> 00:23:43,690
to do with your we res sell like export

00:23:40,660 --> 00:23:48,490
keys for example in a in a secure manner

00:23:43,690 --> 00:23:51,370
not at we waited and we also have today

00:23:48,490 --> 00:23:53,890
a fairly comprehensive set on FPGA

00:23:51,370 --> 00:23:57,310
course then we have our say we have a

00:23:53,890 --> 00:23:59,050
recurrent support typically for for for

00:23:57,310 --> 00:24:06,130
the needs that occurs but we can also

00:23:59,050 --> 00:24:09,670
support the 5v5 19 we have a set with

00:24:06,130 --> 00:24:11,830
chop-chop is all the short course and

00:24:09,670 --> 00:24:14,050
also we have implemented check with

00:24:11,830 --> 00:24:14,680
maybe do with Dookie wrap and we think

00:24:14,050 --> 00:24:16,660
that's a first

00:24:14,680 --> 00:24:19,990
will you clear up in hardware and then

00:24:16,660 --> 00:24:22,390
we have a random generator and a solid

00:24:19,990 --> 00:24:25,750
preferred like SPI interface and GPIO

00:24:22,390 --> 00:24:29,590
stuff a lot that everybody else so this

00:24:25,750 --> 00:24:34,600
is available from cryptic tray and we

00:24:29,590 --> 00:24:36,290
use that one on our board and so so it's

00:24:34,600 --> 00:24:38,630
so so basically have to hold it

00:24:36,290 --> 00:24:41,060
they design on its itself and it's it's

00:24:38,630 --> 00:24:50,720
useful for PTC's xi applications people

00:24:41,060 --> 00:24:52,070
are using it for DNS sector today and I

00:24:50,720 --> 00:24:54,860
said we have a really good problem app

00:24:52,070 --> 00:24:56,630
generator and has been extended if we

00:24:54,860 --> 00:25:04,460
study in memory

00:24:56,630 --> 00:25:06,560
worried good things we have us Cisco the

00:25:04,460 --> 00:25:10,520
networking company and they turn out to

00:25:06,560 --> 00:25:12,890
have a residential astronomer that's the

00:25:10,520 --> 00:25:14,900
interesting computations and he told us

00:25:12,890 --> 00:25:17,600
that you can actually get a kilowatts

00:25:14,900 --> 00:25:20,030
wheat in in compute power from us if you

00:25:17,600 --> 00:25:21,770
want to because they have an interest in

00:25:20,030 --> 00:25:23,810
testing intercepts and random number

00:25:21,770 --> 00:25:25,280
generators so the basically tell test

00:25:23,810 --> 00:25:27,590
every run on up there they can't get

00:25:25,280 --> 00:25:29,480
hold of and it takes for a week to run

00:25:27,590 --> 00:25:32,570
all the tests on their big compute

00:25:29,480 --> 00:25:34,610
cluster and what the same was that we

00:25:32,570 --> 00:25:37,490
can test you were running our generator

00:25:34,610 --> 00:25:39,140
for you for free on one condition and

00:25:37,490 --> 00:25:42,320
stuff you don't complain we come back to

00:25:39,140 --> 00:25:44,990
you and say it's broken so you give me

00:25:42,320 --> 00:25:47,120
with that so I generate a lot of lot of

00:25:44,990 --> 00:25:49,520
a lot of gigabytes of RAM and Dana and

00:25:47,120 --> 00:25:52,010
Senator and they crunched for a week and

00:25:49,520 --> 00:25:53,720
I come back and say actually works which

00:25:52,010 --> 00:25:56,750
were that was the first one ever

00:25:53,720 --> 00:25:59,440
outside of and cisco themselves and that

00:25:56,750 --> 00:26:05,090
includes all the brown hsf that you have

00:25:59,440 --> 00:26:06,970
that was quite good one thing that we

00:26:05,090 --> 00:26:09,860
talked about openness accessibility

00:26:06,970 --> 00:26:12,380
development ability right now is it

00:26:09,860 --> 00:26:15,320
actually requires that we use the vendor

00:26:12,380 --> 00:26:18,260
tools silence in this case they're free

00:26:15,320 --> 00:26:19,640
is prison beer but of course are open we

00:26:18,260 --> 00:26:23,150
saw have the trucks to visits and

00:26:19,640 --> 00:26:25,190
they're quite complex if maybe the

00:26:23,150 --> 00:26:28,419
installation I have of silence tool is

00:26:25,190 --> 00:26:31,779
20 gigabytes that's the truth

00:26:28,419 --> 00:26:33,609
for 20 million lights but all this

00:26:31,779 --> 00:26:36,149
vehicle simulation is started using over

00:26:33,609 --> 00:26:38,859
two selectors we're gonna get more later

00:26:36,149 --> 00:26:42,970
the PCB design that we have was done

00:26:38,859 --> 00:26:45,519
using algae which is commercial tool we

00:26:42,970 --> 00:26:47,019
have converted free to leaders are great

00:26:45,519 --> 00:26:49,840
training job in a project

00:26:47,019 --> 00:26:53,230
so actually we can't do design but then

00:26:49,840 --> 00:26:57,580
we can use KK car today and we will use

00:26:53,230 --> 00:26:59,559
Kylie cat for the next board and of

00:26:57,580 --> 00:27:01,239
course all the software is much easier

00:26:59,559 --> 00:27:07,779
there's a lot of open doors there so we

00:27:01,239 --> 00:27:09,009
use jesusí and static Langevin today it

00:27:07,779 --> 00:27:11,529
looks something if you look inside of it

00:27:09,009 --> 00:27:15,340
it is something like this that we have

00:27:11,529 --> 00:27:18,039
the CPU on the outside my controller and

00:27:15,340 --> 00:27:20,320
it's talking over bus into that PDA and

00:27:18,039 --> 00:27:24,609
indians in the PA we basically have a

00:27:20,320 --> 00:27:26,139
lot of coprocessors slaves to the cpu so

00:27:24,609 --> 00:27:29,139
they don't talk to each other it's just

00:27:26,139 --> 00:27:30,580
the absent-minded controller using

00:27:29,139 --> 00:27:32,409
addresses can say okay I'm gonna do a

00:27:30,580 --> 00:27:34,899
short pressure for example I want to

00:27:32,409 --> 00:27:38,769
read a new rap number from from the run

00:27:34,899 --> 00:27:41,230
generator and the world's guess we have

00:27:38,769 --> 00:27:43,570
a key rap that actually is able to talk

00:27:41,230 --> 00:27:46,450
to the because about the master key

00:27:43,570 --> 00:27:49,539
memory and now we're temper see people

00:27:46,450 --> 00:27:52,419
outside that can kill the the key that's

00:27:49,539 --> 00:27:55,840
inside the master key memory and now we

00:27:52,419 --> 00:27:59,889
have a storage which is a basica flash

00:27:55,840 --> 00:28:01,450
memory for us there's some things for

00:27:59,889 --> 00:28:03,700
this border we have one thing is that

00:28:01,450 --> 00:28:06,279
that bus between this begin an MCU turns

00:28:03,700 --> 00:28:08,350
out to be a bottleneck it has a quite a

00:28:06,279 --> 00:28:11,649
few cycles for doing in any operations

00:28:08,350 --> 00:28:15,100
about it latency and quite a low

00:28:11,649 --> 00:28:17,919
capacity 32 bits but we can't really run

00:28:15,100 --> 00:28:19,330
it that fast and all the course of

00:28:17,919 --> 00:28:22,480
slaves which means that if I work for

00:28:19,330 --> 00:28:24,399
example do and first I'm going to do an

00:28:22,480 --> 00:28:27,159
alien hash or something so send all the

00:28:24,399 --> 00:28:29,139
data to the shop or and actually then

00:28:27,159 --> 00:28:30,000
generates that is the time to bring that

00:28:29,139 --> 00:28:32,310
thing

00:28:30,000 --> 00:28:33,870
the border of the FPGA and I'm going to

00:28:32,310 --> 00:28:35,910
the RSA Court if they wanted to its

00:28:33,870 --> 00:28:38,750
signing away so I'm moving things back

00:28:35,910 --> 00:28:38,750
and forth all the time

00:28:39,000 --> 00:28:42,330
that's bad for performance also bad for

00:28:40,740 --> 00:28:45,710
security reaction don't wanna know stuff

00:28:42,330 --> 00:28:48,060
out of an FPGA if you really have to

00:28:45,710 --> 00:28:49,740
eventually is also stealing in the inner

00:28:48,060 --> 00:28:52,620
microcontroller particularly for

00:28:49,740 --> 00:28:54,240
generate or say keys we need to do a lot

00:28:52,620 --> 00:28:56,910
of testing if to see if you actually

00:28:54,240 --> 00:28:58,380
have a have primes and from other the

00:28:56,910 --> 00:29:00,840
testing it's kinda hard to do in

00:28:58,380 --> 00:29:02,310
software it's a lot you read some some

00:29:00,840 --> 00:29:03,600
some random numbers and you see through

00:29:02,310 --> 00:29:05,280
them and then you decide which one

00:29:03,600 --> 00:29:07,920
you're going to use stamina so some of

00:29:05,280 --> 00:29:10,740
if some more while and looping and I if

00:29:07,920 --> 00:29:12,830
such as a Nick Unicode since right now

00:29:10,740 --> 00:29:15,480
better to use in the in in the software

00:29:12,830 --> 00:29:19,920
but Atmos means that secrets are exposed

00:29:15,480 --> 00:29:20,910
in the microcontroller still and as I

00:29:19,920 --> 00:29:24,240
said we're talking about keep the same

00:29:20,910 --> 00:29:27,240
see the stm32 microcontroller is not an

00:29:24,240 --> 00:29:29,850
open design it has a lot of peripherals

00:29:27,240 --> 00:29:33,510
as a lot of cool features that we don't

00:29:29,850 --> 00:29:36,150
use and we can't really trust it that we

00:29:33,510 --> 00:29:37,620
actually would love to not have them so

00:29:36,150 --> 00:29:39,780
we can see that where the performance

00:29:37,620 --> 00:29:44,310
and security and openness can definitely

00:29:39,780 --> 00:29:46,440
be improved from what we have today I

00:29:44,310 --> 00:29:48,540
want to talk about the same master key

00:29:46,440 --> 00:29:51,480
memory because it turns out that that

00:29:48,540 --> 00:29:55,170
ATMs actually has blank boxes inside of

00:29:51,480 --> 00:29:56,880
themselves and the thing it is that if

00:29:55,170 --> 00:29:59,760
you want to be if you're gonna do a bill

00:29:56,880 --> 00:30:02,820
root of trust particular root of a good

00:29:59,760 --> 00:30:05,610
temporary spawn stays fast then you want

00:30:02,820 --> 00:30:09,480
to have as little secrets that actually

00:30:05,610 --> 00:30:10,670
are very open and and easy to get to as

00:30:09,480 --> 00:30:13,890
possible

00:30:10,670 --> 00:30:15,060
so a sudden you store the keys your

00:30:13,890 --> 00:30:16,970
private keys for example another

00:30:15,060 --> 00:30:19,740
sensitive information in flash memory

00:30:16,970 --> 00:30:21,600
and we do is that when you store them so

00:30:19,740 --> 00:30:24,030
that they are protected rest you

00:30:21,600 --> 00:30:26,310
actually use a key wrap mechanism for

00:30:24,030 --> 00:30:28,260
that and there's no AES key reverse our

00:30:26,310 --> 00:30:32,220
C standard there's

00:30:28,260 --> 00:30:34,110
and response so you basically crypt your

00:30:32,220 --> 00:30:38,190
keys before you put them into the flash

00:30:34,110 --> 00:30:39,750
memory and the key that you use to do

00:30:38,190 --> 00:30:43,170
the wrapping is called the key to the

00:30:39,750 --> 00:30:44,730
key or master key and this of course

00:30:43,170 --> 00:30:47,460
means that they sing upon a failure if

00:30:44,730 --> 00:30:50,160
you use to keep Ricky then all your

00:30:47,460 --> 00:30:53,040
secrets are worthless they are random

00:30:50,160 --> 00:30:54,570
numbers they're the noise and this is

00:30:53,040 --> 00:30:56,820
what they use when they actually build

00:30:54,570 --> 00:31:00,150
the tamper protection mechanisms inside

00:30:56,820 --> 00:31:02,790
image itself you have a single memory

00:31:00,150 --> 00:31:06,810
somewhere that gets towards about 20 56

00:31:02,790 --> 00:31:09,660
bits if you suffer breaks the tamper

00:31:06,810 --> 00:31:12,270
seal somehow and you detect temper

00:31:09,660 --> 00:31:14,870
intrusion combo then you try to kill

00:31:12,270 --> 00:31:17,580
those two 26 bits as fast as you can

00:31:14,870 --> 00:31:20,370
so it's so use this is singing for point

00:31:17,580 --> 00:31:25,200
of failure in in a good way by the side

00:31:20,370 --> 00:31:27,540
I say and you can have the master key

00:31:25,200 --> 00:31:30,690
the small small random random private

00:31:27,540 --> 00:31:32,490
memory that stores the key the ticket

00:31:30,690 --> 00:31:34,230
circuit is but can be powerful by

00:31:32,490 --> 00:31:37,080
batteries so the restless age cell can

00:31:34,230 --> 00:31:39,060
actually power down so it looked like

00:31:37,080 --> 00:31:41,400
the PSI base with the cord I showed with

00:31:39,060 --> 00:31:45,840
everyday have super capacitor oh yes

00:31:41,400 --> 00:31:48,300
that's what it does there is actually

00:31:45,840 --> 00:31:50,910
you can actually buy these master key

00:31:48,300 --> 00:31:53,070
memories or the core security managers

00:31:50,910 --> 00:31:55,770
you can get the best one from maxi for

00:31:53,070 --> 00:31:59,580
example that's six legs on it really

00:31:55,770 --> 00:32:03,020
small tiny device and it has a story for

00:31:59,580 --> 00:32:06,080
like one kilobytes another and has

00:32:03,020 --> 00:32:09,090
inputs for for for the two they don't do

00:32:06,080 --> 00:32:11,910
template action like like light sensors

00:32:09,090 --> 00:32:13,320
and movement at temperatures a lot some

00:32:11,910 --> 00:32:15,990
of the more expensive intercepts has

00:32:13,320 --> 00:32:17,760
things like a GPS inside of it so if you

00:32:15,990 --> 00:32:18,690
try to even if you're really careful and

00:32:17,760 --> 00:32:21,180
try to move the

00:32:18,690 --> 00:32:22,770
itself slowly like this it will actually

00:32:21,180 --> 00:32:26,100
kill itself it's it's most out of a

00:32:22,770 --> 00:32:27,270
circle at certain area so that's pretty

00:32:26,100 --> 00:32:29,810
cool

00:32:27,270 --> 00:32:31,760
I want to do is also if if you know

00:32:29,810 --> 00:32:33,410
about silly

00:32:31,760 --> 00:32:35,210
how the work there's a problem with

00:32:33,410 --> 00:32:37,850
equal remanence that if you keep

00:32:35,210 --> 00:32:39,920
something in a memory for a while it'll

00:32:37,850 --> 00:32:41,900
be like this to each particular you call

00:32:39,920 --> 00:32:43,760
it down so as I'm going to do it if we

00:32:41,900 --> 00:32:46,130
put in into nitrogen and you can

00:32:43,760 --> 00:32:50,180
actually keep it for basically or a long

00:32:46,130 --> 00:32:52,580
time so one thing is these security men

00:32:50,180 --> 00:32:54,350
do is that they try to have an anti

00:32:52,580 --> 00:32:55,970
reminisce protection or imprinting of

00:32:54,350 --> 00:32:57,500
the coal but it will reduce that the

00:32:55,970 --> 00:33:00,290
right approach to the key or universe

00:32:57,500 --> 00:33:04,280
the beetles another perfectly say that

00:33:00,290 --> 00:33:05,900
it does stink also they work as brew the

00:33:04,280 --> 00:33:08,180
trustor there's a like a private key

00:33:05,900 --> 00:33:11,270
inside of it then you can do something

00:33:08,180 --> 00:33:15,770
like an omok shot of the six pressure

00:33:11,270 --> 00:33:17,780
key authentication of the device there's

00:33:15,770 --> 00:33:21,260
a few manufacture these and they of

00:33:17,780 --> 00:33:23,060
course store there are former standards

00:33:21,260 --> 00:33:25,100
and they are evaluated by the same

00:33:23,060 --> 00:33:27,470
government agencies that evaluates it

00:33:25,100 --> 00:33:29,600
assumes itself it's hard to get

00:33:27,470 --> 00:33:33,080
information you need to get any ace and

00:33:29,600 --> 00:33:35,270
all kind of paperwork to get all this so

00:33:33,080 --> 00:33:37,730
so they basically their black boxes and

00:33:35,270 --> 00:33:40,340
we felt that okay we design it a OpenSSL

00:33:37,730 --> 00:33:41,990
should we actually put the black box at

00:33:40,340 --> 00:33:45,170
stay where we actually keep the crown

00:33:41,990 --> 00:33:46,520
jewels in our design or not and we

00:33:45,170 --> 00:33:50,180
decided that that's no we're not going

00:33:46,520 --> 00:33:51,680
to do that so since having diverse and

00:33:50,180 --> 00:33:54,920
important security is not accepted for

00:33:51,680 --> 00:33:58,610
for us and right now instead master key

00:33:54,920 --> 00:34:00,560
members just under several SRAM our

00:33:58,610 --> 00:34:03,680
tampering is basically kill the power to

00:34:00,560 --> 00:34:05,720
to the to the memory and the temper

00:34:03,680 --> 00:34:08,510
control is and small it beats a be or

00:34:05,720 --> 00:34:09,710
prisoner process outside but we think

00:34:08,510 --> 00:34:11,389
that we can do better and this is

00:34:09,710 --> 00:34:16,399
pointing several pots right now

00:34:11,389 --> 00:34:19,490
basically yeah so we do this project for

00:34:16,399 --> 00:34:22,310
like three four years now and we have

00:34:19,490 --> 00:34:24,110
the board as you show you and we are try

00:34:22,310 --> 00:34:26,000
to talk to to target the scenes with

00:34:24,110 --> 00:34:30,260
with with performance and security and

00:34:26,000 --> 00:34:33,139
openness so and one thing to be done

00:34:30,260 --> 00:34:38,309
actually is we implemented was half my

00:34:33,139 --> 00:34:41,909
signatures for for postcard crypto post

00:34:38,309 --> 00:34:44,010
but the computer resistant signature

00:34:41,909 --> 00:34:45,750
schemes so we implemented that that's

00:34:44,010 --> 00:34:48,030
actually available that's abut you think

00:34:45,750 --> 00:34:51,270
from from us that we can run on our

00:34:48,030 --> 00:34:53,849
machine you can run it on any machine if

00:34:51,270 --> 00:34:55,520
you want to but it's kind of thing

00:34:53,849 --> 00:34:58,700
differentiate you think that we can do

00:34:55,520 --> 00:35:02,520
and we developed or developing the

00:34:58,700 --> 00:35:06,299
support for for it what's to quantitate

00:35:02,520 --> 00:35:11,460
heart a curve in in in hardware circuit

00:35:06,299 --> 00:35:13,109
acceleration but uh what happened also

00:35:11,460 --> 00:35:19,289
is we performed an external security

00:35:13,109 --> 00:35:20,700
audit QT 253 Germany in extensive audit

00:35:19,289 --> 00:35:23,910
of our system

00:35:20,700 --> 00:35:28,890
there's no critical monopolies there was

00:35:23,910 --> 00:35:30,240
some horrible and we fixed those and one

00:35:28,890 --> 00:35:32,700
of the things that I liked was that they

00:35:30,240 --> 00:35:36,690
really appreciated the quality of the

00:35:32,700 --> 00:35:45,240
random number generator and that's

00:35:36,690 --> 00:35:47,880
another good thing was and performance

00:35:45,240 --> 00:35:50,369
improvements we are working on a new

00:35:47,880 --> 00:35:51,329
architecture for the RSA course and we

00:35:50,369 --> 00:35:53,849
think that we could probably get

00:35:51,329 --> 00:35:54,779
something like 10x 20x performance

00:35:53,849 --> 00:35:56,819
increase what we have today

00:35:54,779 --> 00:35:59,010
the one where today is quite simplistic

00:35:56,819 --> 00:36:01,289
but it still matches some of the other

00:35:59,010 --> 00:36:03,960
most of the cores out there but we think

00:36:01,289 --> 00:36:05,970
that we can do much much better so we've

00:36:03,960 --> 00:36:08,010
also hunting latencies particular

00:36:05,970 --> 00:36:10,109
millions of C bus and one of the things

00:36:08,010 --> 00:36:13,010
that we was committed last night was

00:36:10,109 --> 00:36:16,289
that we actually finally are doing the

00:36:13,010 --> 00:36:18,119
commercial from little to big India in

00:36:16,289 --> 00:36:20,250
inside and every day instead of software

00:36:18,119 --> 00:36:24,980
that actually took we have like four

00:36:20,250 --> 00:36:27,510
cycles so we'd like to mem copy now yes

00:36:24,980 --> 00:36:32,490
and in terms of this axis slower and

00:36:27,510 --> 00:36:35,309
again version but it was actually a few

00:36:32,490 --> 00:36:37,470
percent more performance and also trying

00:36:35,309 --> 00:36:40,529
to prove that basically running the FPGA

00:36:37,470 --> 00:36:41,290
at the high Coxie so also doing

00:36:40,529 --> 00:36:45,600
something for

00:36:41,290 --> 00:36:48,310
that's our camera security improvements

00:36:45,600 --> 00:36:50,710
we are trying to find ways of actually

00:36:48,310 --> 00:36:52,870
moving the crypto processing for

00:36:50,710 --> 00:36:57,220
floating from the atomic microcontroller

00:36:52,870 --> 00:37:00,520
into left okay I think this is dkc Levin

00:36:57,220 --> 00:37:02,230
parser management software sniffing

00:37:00,520 --> 00:37:06,040
running all day as temperature or

00:37:02,230 --> 00:37:08,250
something else in the future we also

00:37:06,040 --> 00:37:09,580
tried adding is a lot of DMA again

00:37:08,250 --> 00:37:11,500
incident okay

00:37:09,580 --> 00:37:12,580
something like they've built they see if

00:37:11,500 --> 00:37:15,430
you can say that again I want to

00:37:12,580 --> 00:37:17,620
transfer data from this core to this

00:37:15,430 --> 00:37:20,710
court and you just do it inside leverage

00:37:17,620 --> 00:37:22,510
a back a force a simplistic DMA and so

00:37:20,710 --> 00:37:25,240
we can really mates transfer of data

00:37:22,510 --> 00:37:27,870
over the FFC bus to get performance also

00:37:25,240 --> 00:37:29,890
don't expose stuff outside it for you

00:37:27,870 --> 00:37:31,960
and I'm also working on the really

00:37:29,890 --> 00:37:33,850
really president built for for releases

00:37:31,960 --> 00:37:39,580
for all of our reports like

00:37:33,850 --> 00:37:41,860
microcontroller fpm and I so and one

00:37:39,580 --> 00:37:43,870
thing I'm working on is to try to the

00:37:41,860 --> 00:37:46,540
most icky memory in the six security

00:37:43,870 --> 00:37:48,870
Manistee one thing I really really

00:37:46,540 --> 00:37:53,830
enjoyed I was happy to see was that

00:37:48,870 --> 00:37:58,980
Timberwolves released October open SP

00:37:53,830 --> 00:38:02,050
design flow for a lot of this ice 40 fps

00:37:58,980 --> 00:38:04,360
these devices are the based on Astra

00:38:02,050 --> 00:38:07,210
but they have their configuration memory

00:38:04,360 --> 00:38:10,210
flash based inside of the same package

00:38:07,210 --> 00:38:11,860
so some basic a flash memory is sitting

00:38:10,210 --> 00:38:15,430
next year on white on top row next to

00:38:11,860 --> 00:38:18,130
they the actual FPGA chip you can

00:38:15,430 --> 00:38:19,960
actually so you can actually put the

00:38:18,130 --> 00:38:22,030
configuration of the video inside the

00:38:19,960 --> 00:38:24,760
chip and and its program and you never

00:38:22,030 --> 00:38:28,180
have to prevent it again and you know

00:38:24,760 --> 00:38:30,940
even external memory for it and it's a

00:38:28,180 --> 00:38:35,310
big device if you don't know begin Vijay

00:38:30,940 --> 00:38:37,690
is a chip that has small balls under it

00:38:35,310 --> 00:38:39,880
so so when you when you multiple

00:38:37,690 --> 00:38:43,630
disability healed up and we sit on the

00:38:39,880 --> 00:38:45,580
board and Maliki thinks what that is

00:38:43,630 --> 00:38:50,410
that you actually can get under there as

00:38:45,580 --> 00:38:52,390
easy so it's good for security we think

00:38:50,410 --> 00:38:52,890
that we can do with this design yeah I

00:38:52,390 --> 00:38:54,720
can actually

00:38:52,890 --> 00:38:56,940
implement basically a ram memory in

00:38:54,720 --> 00:39:00,660
celebrity a but I can actually implement

00:38:56,940 --> 00:39:04,620
temper response so I can do a basically

00:39:00,660 --> 00:39:07,110
nano second response basic kill the

00:39:04,620 --> 00:39:11,670
master key store inside it in in in a

00:39:07,110 --> 00:39:13,560
nanosecond so a few nanoseconds and I

00:39:11,670 --> 00:39:15,200
can implement imprinting and stuff that

00:39:13,560 --> 00:39:18,060
like the security matters very easily

00:39:15,200 --> 00:39:19,830
and the good thing is that I can use the

00:39:18,060 --> 00:39:22,800
open toothless and I can even do a

00:39:19,830 --> 00:39:25,410
audible mmm reproducible build of death

00:39:22,800 --> 00:39:28,380
PDI you can I can take the code like to

00:39:25,410 --> 00:39:31,230
see if I change this endeavour no source

00:39:28,380 --> 00:39:33,060
code it generates this bits in the bit

00:39:31,230 --> 00:39:34,800
stream so you can actually trace it and

00:39:33,060 --> 00:39:36,680
see that you actually get the correct

00:39:34,800 --> 00:39:39,060
bit stream from the source code so

00:39:36,680 --> 00:39:41,810
instead of having a black box we have to

00:39:39,060 --> 00:39:48,570
have a very very open and an audible

00:39:41,810 --> 00:39:51,090
master key memory and so we are looking

00:39:48,570 --> 00:39:52,080
at the design engineer alpha and we will

00:39:51,090 --> 00:39:53,790
job on the name

00:39:52,080 --> 00:39:56,160
there's no really good one I'm gonna

00:39:53,790 --> 00:39:57,420
call it an elite you and he be dice

00:39:56,160 --> 00:39:59,070
probably not a good name for something

00:39:57,420 --> 00:40:00,180
that we think is probably production

00:39:59,070 --> 00:40:02,670
ready

00:40:00,180 --> 00:40:04,170
but one thing we look at is that we try

00:40:02,670 --> 00:40:07,290
to move stuff from the microcontroller

00:40:04,170 --> 00:40:10,760
in selective FBA and what we decided

00:40:07,290 --> 00:40:13,530
doing is is to actually use risk 5 so I

00:40:10,760 --> 00:40:17,450
few since I've really been so excited

00:40:13,530 --> 00:40:20,550
about in last two years as there is five

00:40:17,450 --> 00:40:22,470
architecture instruction set and it

00:40:20,550 --> 00:40:26,100
really seems to be taking off also I

00:40:22,470 --> 00:40:30,060
said open microcontroller processor core

00:40:26,100 --> 00:40:32,310
that can use so we're looking at using

00:40:30,060 --> 00:40:35,880
some of the open ones that been released

00:40:32,310 --> 00:40:38,490
like like matrix and for a therapy from

00:40:35,880 --> 00:40:41,100
mostly get up so we've actually trying

00:40:38,490 --> 00:40:42,990
to take they put a map Megatron in there

00:40:41,100 --> 00:40:46,800
that can run and use the courses are

00:40:42,990 --> 00:40:49,230
rated and also looking at also putting a

00:40:46,800 --> 00:40:51,090
small small risk file core like to think

00:40:49,230 --> 00:40:54,450
or v32

00:40:51,090 --> 00:40:56,760
inside of that lapis 140 is for

00:40:54,450 --> 00:40:58,559
fpg it's going to be a master key memory

00:40:56,760 --> 00:41:00,869
so I can actually move the tamper

00:40:58,559 --> 00:41:04,319
function and the detective what's inside

00:41:00,869 --> 00:41:09,029
avi avi into the so I have a base of one

00:41:04,319 --> 00:41:10,859
ship solution are they talkin is it

00:41:09,029 --> 00:41:13,200
promises as we know prepare the micro

00:41:10,859 --> 00:41:15,029
controller this community risk v there's

00:41:13,200 --> 00:41:17,250
not gonna be any kitchen sinks in there

00:41:15,029 --> 00:41:20,279
no no peripherals where things inside

00:41:17,250 --> 00:41:22,829
the packet rack that we don't need and

00:41:20,279 --> 00:41:26,430
we're doing the open master key memory a

00:41:22,829 --> 00:41:32,190
little trust we still use the commercial

00:41:26,430 --> 00:41:34,049
tools but on the lost ccc after

00:41:32,190 --> 00:41:36,089
christmas turn eighteen twas two

00:41:34,049 --> 00:41:38,460
products there are some related that

00:41:36,089 --> 00:41:42,089
presented new were attempt of

00:41:38,460 --> 00:41:43,890
implementing open fpga tools for

00:41:42,089 --> 00:41:45,260
something like the ceilings or pick

00:41:43,890 --> 00:41:47,519
seven that we actually using today

00:41:45,260 --> 00:41:50,069
really really interesting it's going to

00:41:47,519 --> 00:41:53,190
be a big thing for us i'm see you can

00:41:50,069 --> 00:41:55,799
help turbines innovation and we see

00:41:53,190 --> 00:41:57,420
concise improvements but reducing the

00:41:55,799 --> 00:41:59,549
components and removing their my

00:41:57,420 --> 00:42:06,480
controller that's da da da and we can

00:41:59,549 --> 00:42:08,160
reduce the PCB dimensions and so we

00:42:06,480 --> 00:42:11,160
basically gonna be end up basically have

00:42:08,160 --> 00:42:13,170
the same design as well before but we so

00:42:11,160 --> 00:42:15,809
we put the risk for poor and a DMAs

00:42:13,170 --> 00:42:17,759
mastery salivate and we have adverse

00:42:15,809 --> 00:42:19,980
insights we can restore data for water

00:42:17,759 --> 00:42:22,799
at least temporarily inside radius being

00:42:19,980 --> 00:42:25,049
and then we have the SPD area maaske

00:42:22,799 --> 00:42:27,509
memory outside that that keeps the main

00:42:25,049 --> 00:42:34,410
secret and then basically everything the

00:42:27,509 --> 00:42:36,480
same just to address one team to but we

00:42:34,410 --> 00:42:38,940
see the cryptic as an open platform and

00:42:36,480 --> 00:42:41,099
you can maybe take portals and assemble

00:42:38,940 --> 00:42:44,460
your own it's seven to match what you

00:42:41,099 --> 00:42:46,200
need there is two things that happen

00:42:44,460 --> 00:42:48,869
one is that there's a company called

00:42:46,200 --> 00:42:51,810
diamond key security that makes it a dev

00:42:48,869 --> 00:42:57,120
time on SSL and it's a commercial

00:42:51,810 --> 00:42:58,410
hsm based on predict the day access

00:42:57,120 --> 00:43:02,520
sorted live in France machines and they

00:42:58,410 --> 00:43:04,950
used for food in a second management and

00:43:02,520 --> 00:43:06,660
also the Tor project some of the core

00:43:04,950 --> 00:43:08,850
members of cryptic is also heavily

00:43:06,660 --> 00:43:12,080
malting tour and they're actually

00:43:08,850 --> 00:43:14,670
looking at taking a alpha board and

00:43:12,080 --> 00:43:16,590
senior a little bit what do they do is

00:43:14,670 --> 00:43:18,810
actually take a way of being a meter on

00:43:16,590 --> 00:43:21,330
the side of it so I think it fits inside

00:43:18,810 --> 00:43:23,670
of host PC it's one we live in too big

00:43:21,330 --> 00:43:25,950
we didn't know about that

00:43:23,670 --> 00:43:28,230
and removing the time from a controller

00:43:25,950 --> 00:43:31,230
and somebody interface chips but

00:43:28,230 --> 00:43:34,350
basically it's the alpha port basically

00:43:31,230 --> 00:43:36,540
and to be able to run to do what the

00:43:34,350 --> 00:43:38,700
director authorities in the tour for the

00:43:36,540 --> 00:43:40,920
quality is doing so you can offloading

00:43:38,700 --> 00:43:45,900
the operation for that into the port

00:43:40,920 --> 00:43:48,630
itself this is what they diamond HSM

00:43:45,900 --> 00:43:49,920
looks like it's what they if you look

00:43:48,630 --> 00:43:53,040
inside was putting actually habits that

00:43:49,920 --> 00:43:54,240
have to over alpha boards right now that

00:43:53,040 --> 00:43:56,040
have Raspberry Pi they were probably

00:43:54,240 --> 00:44:00,150
hopefully go to and I think I'm gonna go

00:43:56,040 --> 00:44:03,180
to risk five in the next iteration of

00:44:00,150 --> 00:44:05,760
this one yeah and you can use

00:44:03,180 --> 00:44:10,020
disabilities would use for for for DNS a

00:44:05,760 --> 00:44:12,350
photo and they're available and busy

00:44:10,020 --> 00:44:12,350
right now

00:44:12,650 --> 00:44:18,120
so that's basically a cryptic project

00:44:16,260 --> 00:44:21,540
and I hope you understand today did we

00:44:18,120 --> 00:44:23,760
have this move to move forward toward

00:44:21,540 --> 00:44:30,360
something that is open and trusted and

00:44:23,760 --> 00:44:31,560
not a black box and cryptic is sponsor

00:44:30,360 --> 00:44:40,860
to has been sponsored by a lot of

00:44:31,560 --> 00:44:43,700
organizations pigs Angela and questions

00:44:40,860 --> 00:44:43,700
some dump it

00:44:55,710 --> 00:45:00,840
first I'm going to say that I am awfully

00:44:58,470 --> 00:45:02,880
pretty pressed because I was like taking

00:45:00,840 --> 00:45:07,530
lots of questions and you get ansible in

00:45:02,880 --> 00:45:09,660
them so sorry kudos for that but there

00:45:07,530 --> 00:45:11,940
is this only when at this one question I

00:45:09,660 --> 00:45:15,180
still have you said that you are using

00:45:11,940 --> 00:45:18,240
sensitivity for the random number

00:45:15,180 --> 00:45:21,840
generator because it's faster which is

00:45:18,240 --> 00:45:25,050
pity to get from the authority cold core

00:45:21,840 --> 00:45:26,610
I supposed to tear a score when you were

00:45:25,050 --> 00:45:30,690
trying to compare one we tell it or

00:45:26,610 --> 00:45:33,120
maybe hey beans it's running it if you

00:45:30,690 --> 00:45:39,170
say yes to v2 cigs compared to Churchill

00:45:33,120 --> 00:45:42,030
20 with 20 intuitions is something like

00:45:39,170 --> 00:45:44,100
like how does it make me make a bit

00:45:42,030 --> 00:45:47,400
common compared to a number gigabits

00:45:44,100 --> 00:45:49,470
it's quite big faster and the reason is

00:45:47,400 --> 00:45:53,850
is that you have almost the same number

00:45:49,470 --> 00:45:56,460
of iterations 20 verses 14 or actually

00:45:53,850 --> 00:46:01,140
it's gonna be 16 in any a score because

00:45:56,460 --> 00:46:11,880
it if for a but the delay in box Isis is

00:46:01,140 --> 00:46:13,260
much bigger than integer do you looking

00:46:11,880 --> 00:46:19,470
at the community area of the

00:46:13,260 --> 00:46:22,770
certification also if we did we haven't

00:46:19,470 --> 00:46:25,740
decided the Machine very much to be

00:46:22,770 --> 00:46:27,780
impossible to do that and if something

00:46:25,740 --> 00:46:29,220
would like to do that that would be fine

00:46:27,780 --> 00:46:31,830
with us we would really like to see the

00:46:29,220 --> 00:46:34,380
results but we have no plans for Davina

00:46:31,830 --> 00:46:36,570
and I don't think that the key is is

00:46:34,380 --> 00:46:38,130
planning to that as I said we are using

00:46:36,570 --> 00:46:42,390
a run of our

00:46:38,130 --> 00:46:45,360
was quality the deep part of the digital

00:46:42,390 --> 00:46:48,600
revenue generator in : in SP internal

00:46:45,360 --> 00:46:51,870
terms is ChaCha not something like a SCT

00:46:48,600 --> 00:46:53,460
or so we have components and port with

00:46:51,870 --> 00:46:57,829
that's not comparable

00:46:53,460 --> 00:46:57,829
we conquered here thank you

00:47:10,470 --> 00:47:19,800
how come you're not using LLVM instead

00:47:15,060 --> 00:47:22,470
of jesusí for actually compiling that's

00:47:19,800 --> 00:47:29,510
a good question I think I'm not so

00:47:22,470 --> 00:47:33,329
involved in the support team we use

00:47:29,510 --> 00:47:34,950
using the VM honestly the gap will part

00:47:33,329 --> 00:47:38,910
of it to do it doing static code

00:47:34,950 --> 00:47:43,589
analysis of it but I can say why exactly

00:47:38,910 --> 00:47:47,630
use just GCC in this case or only to c4

00:47:43,589 --> 00:47:51,950
for risk 5 remove that one hopefully the

00:47:47,630 --> 00:47:54,720
the risk 5 patches for l1 is going to be

00:47:51,950 --> 00:47:56,880
in in a variant that you buy them but

00:47:54,720 --> 00:48:08,210
right now it's easy so for right now in

00:47:56,880 --> 00:48:08,210
GCC thank you any more questions

00:48:14,370 --> 00:48:23,469
[Applause]

00:48:28,770 --> 00:48:30,830

YouTube URL: https://www.youtube.com/watch?v=ruUFPq7Cr_g


