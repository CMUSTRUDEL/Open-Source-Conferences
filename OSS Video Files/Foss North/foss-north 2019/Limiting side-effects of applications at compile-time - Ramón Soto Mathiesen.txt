Title: Limiting side-effects of applications at compile-time - Ramón Soto Mathiesen
Publication date: 2019-04-19
Playlist: foss-north 2019
Description: 
	By using tools where you have a clear separation between code branches that makes effects and the ones that doesn't, as for example Haskell, it's very easy to argue that this can be done in a fairly easy manner. But it's not always the case that if a specific code branch is allowed to have side-effects, these should be all possible side-effects. In this short talk, we will be showcasing how you will be able to further restrict effects, granularly and even recursively, in order to limit these side-effects. An example could be an application that only needs to access data from a specific website, limited to a relative URL, and then print it to the console. These effects restrictions will be designed into the application, which will allow you to outsource development to anyone with the right skill-set, even if they have bad intentions, knowing that they will live up to 100% the design or the application will not build.

---

Ramón Soto Mathiesen, is a passionate computer scientist, with talent for business, who advocates for: correctness, code quality and high standards, but always with the customer in focus.
He currently works at SPISE MISU ApS, a company founded by him, which is dedicated mainly to solve the problems arising from the application of the General Data Protection Regulation (GDPR) with a scientific approach (Computer Science and Mathematics).

https://foss-north.se/2019/speakers-and-talks.html#rsotomathiesen
Captions: 
	00:00:16,180 --> 00:00:20,430
so I guess you have

00:00:18,490 --> 00:00:23,050
the schedule and you have said this

00:00:20,430 --> 00:00:25,810
titled with limiting side-effects of

00:00:23,050 --> 00:00:27,430
application at compile time and you

00:00:25,810 --> 00:00:32,290
probably also saw like this word called

00:00:27,430 --> 00:00:35,980
Haskell so just so we on the same page

00:00:32,290 --> 00:00:37,809
outpace sorry I would just say a little

00:00:35,980 --> 00:00:40,660
bit about myself Who I am and why I'm

00:00:37,809 --> 00:00:42,370
actually here giving this talk how and

00:00:40,660 --> 00:00:44,050
why is it actually relevant and which

00:00:42,370 --> 00:00:46,239
benefits to be actually get about this

00:00:44,050 --> 00:00:49,720
thing about limiting the side effects of

00:00:46,239 --> 00:00:51,909
application at compile time and s before

00:00:49,720 --> 00:00:53,260
aegeon I'm really thankful to see I'm

00:00:51,909 --> 00:00:55,710
not the only crazy when going around

00:00:53,260 --> 00:00:58,210
releasing all my slides under this

00:00:55,710 --> 00:01:00,640
copyleft license this is the important

00:00:58,210 --> 00:01:01,860
part copyleft at least from my point of

00:01:00,640 --> 00:01:05,770
view

00:01:01,860 --> 00:01:08,770
so as you problem hearing you can hear

00:01:05,770 --> 00:01:10,630
like I have this Danish English accent

00:01:08,770 --> 00:01:13,930
right all the Swedish will notify or no

00:01:10,630 --> 00:01:18,070
notice but I'm actually from a mixed

00:01:13,930 --> 00:01:21,880
merits Spaniard and also a Dane I'm

00:01:18,070 --> 00:01:23,740
really much into theory and and

00:01:21,880 --> 00:01:25,030
everything we do so I have four master

00:01:23,740 --> 00:01:27,579
degree in computer science but I also

00:01:25,030 --> 00:01:29,649
like the math so I went for a - in

00:01:27,579 --> 00:01:34,539
mathematics I work for my own company

00:01:29,649 --> 00:01:37,929
and I'm trying to solve in a probably

00:01:34,539 --> 00:01:39,130
elegant way all this noise we got the

00:01:37,929 --> 00:01:42,609
last two years with regard of the

00:01:39,130 --> 00:01:44,950
European data or general data regulation

00:01:42,609 --> 00:01:47,439
and if you go into that URL you will see

00:01:44,950 --> 00:01:49,689
what I'm working on and of course it has

00:01:47,439 --> 00:01:52,630
to be also copy lifts but I use it more

00:01:49,689 --> 00:01:57,819
permissive one because if you want to

00:01:52,630 --> 00:01:59,469
convince people to use your or like

00:01:57,819 --> 00:02:01,569
companies and private company to use you

00:01:59,469 --> 00:02:04,719
- sometimes you need to respect their

00:02:01,569 --> 00:02:07,899
intellectual property a lot of people

00:02:04,719 --> 00:02:09,610
say why you love Haskell so much so as a

00:02:07,899 --> 00:02:11,590
good hacker or as a good developer I

00:02:09,610 --> 00:02:14,590
always have my IDs and black background

00:02:11,590 --> 00:02:16,870
and green text right so when I put in

00:02:14,590 --> 00:02:18,790
this like 10 min 10 8 10 minutes before

00:02:16,870 --> 00:02:20,530
aliens talk you couldn't see because of

00:02:18,790 --> 00:02:23,410
the amount of flight so I have to change

00:02:20,530 --> 00:02:26,470
everything because say a libreoffice is

00:02:23,410 --> 00:02:28,180
written I think it Java even though you

00:02:26,470 --> 00:02:29,770
change something to black you can still

00:02:28,180 --> 00:02:31,450
see you have traces of green because you

00:02:29,770 --> 00:02:31,810
don't have determinism like you probably

00:02:31,450 --> 00:02:33,340
have

00:02:31,810 --> 00:02:36,209
Haskell's and all this kind of side

00:02:33,340 --> 00:02:38,950
effects so this is why I love Haskell

00:02:36,209 --> 00:02:40,989
and I've been like when we come to the

00:02:38,950 --> 00:02:43,180
table I've been like using 10 minutes

00:02:40,989 --> 00:02:45,330
with the table alone so I hope I got it

00:02:43,180 --> 00:02:45,330
right

00:02:45,520 --> 00:02:49,450
I love copyleft and the guys that

00:02:47,680 --> 00:02:51,459
ensures that this copyleft actually

00:02:49,450 --> 00:02:53,200
lives up to whatever happens in our real

00:02:51,459 --> 00:02:56,319
life is the guys from freezer

00:02:53,200 --> 00:02:59,470
foundations so I've been member from

00:02:56,319 --> 00:03:01,660
their organization for many years I love

00:02:59,470 --> 00:03:04,630
pretty much functional programming so I

00:03:01,660 --> 00:03:06,940
have this meet up in Copenhagen and I

00:03:04,630 --> 00:03:09,430
write a lot of rents on my blog but now

00:03:06,940 --> 00:03:10,989
I just write code so I hope people rate

00:03:09,430 --> 00:03:15,670
there instead and this talk is going to

00:03:10,989 --> 00:03:18,430
be under there many of talks so just so

00:03:15,670 --> 00:03:20,470
we on the same pace you don't need to

00:03:18,430 --> 00:03:24,060
understand Haskell or all this complex

00:03:20,470 --> 00:03:27,250
notion or stuff there is in Haskell but

00:03:24,060 --> 00:03:29,200
I suppose if you have a bit of notion

00:03:27,250 --> 00:03:33,580
with regard of programming so how many

00:03:29,200 --> 00:03:36,040
people here code that's a lot how many

00:03:33,580 --> 00:03:42,489
people here code with statically type

00:03:36,040 --> 00:03:45,459
safe languages okay 50 percent nice so

00:03:42,489 --> 00:03:46,840
like this is a very short talk so so

00:03:45,459 --> 00:03:49,750
what I'm trying to do here is like I

00:03:46,840 --> 00:03:51,850
will I will actually show what we can do

00:03:49,750 --> 00:03:53,079
with Haskell with this tool and how we

00:03:51,850 --> 00:03:55,870
can actually limit all these side

00:03:53,079 --> 00:03:57,400
effects at compile time and I will also

00:03:55,870 --> 00:03:59,079
showcase you why this is relevant for

00:03:57,400 --> 00:04:03,280
you and what benefits do you get out of

00:03:59,079 --> 00:04:06,579
it so Haskell you probably heard about

00:04:03,280 --> 00:04:07,630
it hey we are shown us right so so

00:04:06,579 --> 00:04:09,340
Haskell is like a general-purpose

00:04:07,630 --> 00:04:11,799
language which can be used for many

00:04:09,340 --> 00:04:13,930
things and it comes from this paradigm

00:04:11,799 --> 00:04:16,900
of functional programming but it fares a

00:04:13,930 --> 00:04:18,570
lot from some of the other functional

00:04:16,900 --> 00:04:21,220
programming languages because it's a

00:04:18,570 --> 00:04:23,200
lazy evaluated so we only go introduce

00:04:21,220 --> 00:04:25,720
the calculation if you actually need the

00:04:23,200 --> 00:04:28,060
value with regard for others which are

00:04:25,720 --> 00:04:29,289
like strict evaluated so it will

00:04:28,060 --> 00:04:31,270
calculate the values even though you

00:04:29,289 --> 00:04:34,389
don't use them and of course it's

00:04:31,270 --> 00:04:36,669
strongly typed and it's pure I will come

00:04:34,389 --> 00:04:38,919
a bit into that one it's been widely

00:04:36,669 --> 00:04:40,960
used in academia but thanks to companies

00:04:38,919 --> 00:04:45,130
like AIG FP complete in San Diego and

00:04:40,960 --> 00:04:46,840
Gallo I was called true Gallo in France

00:04:45,130 --> 00:04:48,310
many of those fancy features are

00:04:46,840 --> 00:04:50,460
actually coming to the industry which is

00:04:48,310 --> 00:04:54,490
really really good for us

00:04:50,460 --> 00:04:56,500
so one of the key things about this

00:04:54,490 --> 00:04:59,800
programming language is this concept of

00:04:56,500 --> 00:05:04,600
code that produces side-effects and code

00:04:59,800 --> 00:05:06,250
that doesn't so just to mention this and

00:05:04,600 --> 00:05:08,260
the good thing about like the people

00:05:06,250 --> 00:05:11,050
working with type safe languages you

00:05:08,260 --> 00:05:13,720
cannot put aggregate a string to an

00:05:11,050 --> 00:05:15,160
integer right it's because your compiler

00:05:13,720 --> 00:05:17,860
your type system will say those two

00:05:15,160 --> 00:05:20,440
things don't match so this is what has

00:05:17,860 --> 00:05:24,010
to do with code that has effects and

00:05:20,440 --> 00:05:26,020
code that doesn't have a fix so I made

00:05:24,010 --> 00:05:29,020
the table and I can see this work okay

00:05:26,020 --> 00:05:32,920
no no green lines anymore cool so how

00:05:29,020 --> 00:05:37,960
has collectively works is that as long

00:05:32,920 --> 00:05:40,750
as you have a code path with effects you

00:05:37,960 --> 00:05:44,130
are you able to actually call code with

00:05:40,750 --> 00:05:47,700
the fix oh sorry

00:05:44,130 --> 00:05:50,680
parent with the fix so you can call a

00:05:47,700 --> 00:05:52,270
child branch which has a fix that's

00:05:50,680 --> 00:05:55,230
perfectly fine the compiler will say go

00:05:52,270 --> 00:05:58,330
for it and you can also call pure code

00:05:55,230 --> 00:06:01,200
but once you are in this pure well you

00:05:58,330 --> 00:06:03,670
can call more pure code but you can call

00:06:01,200 --> 00:06:04,840
something that is impure then the

00:06:03,670 --> 00:06:06,130
compiler will tell you oh you're

00:06:04,840 --> 00:06:09,190
actually not following the rules that I

00:06:06,130 --> 00:06:11,590
specified for you and this this kind of

00:06:09,190 --> 00:06:15,910
notion X is actually important in the

00:06:11,590 --> 00:06:17,530
way that you're able to separate all the

00:06:15,910 --> 00:06:19,990
thing that's easy like mathematics

00:06:17,530 --> 00:06:21,730
formulas from mathematics like when you

00:06:19,990 --> 00:06:24,250
do like addition and mathematics you'd

00:06:21,730 --> 00:06:25,810
put two numbers together that door is

00:06:24,250 --> 00:06:28,030
not closing it that door is not opening

00:06:25,810 --> 00:06:30,220
right so that that concept of pure

00:06:28,030 --> 00:06:34,990
mathematics calculation is actually

00:06:30,220 --> 00:06:37,720
built into this system so just a second

00:06:34,990 --> 00:06:41,290
and there's this like everybody knows

00:06:37,720 --> 00:06:43,330
xkcd right so I have to put it there so

00:06:41,290 --> 00:06:44,830
coded or code written and asked is Lexi

00:06:43,330 --> 00:06:47,140
Warren C to have no side effects right

00:06:44,830 --> 00:06:48,430
because nobody would ever run it so I

00:06:47,140 --> 00:06:51,520
had to put it up ahead to put it all

00:06:48,430 --> 00:06:53,470
right so but but the whole point of

00:06:51,520 --> 00:06:55,990
Haskell is that in order for us to

00:06:53,470 --> 00:06:57,660
actually get some information out of our

00:06:55,990 --> 00:06:59,670
applications

00:06:57,660 --> 00:07:01,970
we need to ensure that at top level of

00:06:59,670 --> 00:07:04,410
her skills we can do all kind of effects

00:07:01,970 --> 00:07:05,730
and I think the talk at the morning was

00:07:04,410 --> 00:07:08,580
Christopher when he was talking about

00:07:05,730 --> 00:07:11,700
Lisp because we build on functional

00:07:08,580 --> 00:07:13,440
paradigm lambda calculus we don't have

00:07:11,700 --> 00:07:15,870
this concept of Turing complete a

00:07:13,440 --> 00:07:17,850
languages we actually have something

00:07:15,870 --> 00:07:20,130
that is equivalent to Turing complete

00:07:17,850 --> 00:07:22,140
languages and the person that actually

00:07:20,130 --> 00:07:26,700
showcase this back in the days was of

00:07:22,140 --> 00:07:29,790
course Alan Turing who did his say his

00:07:26,700 --> 00:07:32,820
master thesis no his PhD under Alonzo

00:07:29,790 --> 00:07:36,570
Church which was one of the forefathers

00:07:32,820 --> 00:07:40,230
of functional programming at least

00:07:36,570 --> 00:07:42,090
lambda calculus so so if we couldn't do

00:07:40,230 --> 00:07:43,830
this like if you don't have this parent

00:07:42,090 --> 00:07:45,720
branch where we can actually say that we

00:07:43,830 --> 00:07:46,980
have all kind of fix let's just imagine

00:07:45,720 --> 00:07:50,010
we have this application that's just

00:07:46,980 --> 00:07:51,840
pure we run it we cannot see what

00:07:50,010 --> 00:07:54,180
happens and we cannot give it a input

00:07:51,840 --> 00:07:57,030
right so you just your computer gets

00:07:54,180 --> 00:07:58,710
really really hot and then it stops but

00:07:57,030 --> 00:07:59,820
you don't know what's happening right so

00:07:58,710 --> 00:08:04,200
it will be just a waste of time

00:07:59,820 --> 00:08:06,930
executing those applications so the

00:08:04,200 --> 00:08:08,640
problem is and I'm also getting a lot of

00:08:06,930 --> 00:08:11,400
heat when I give this talks to high

00:08:08,640 --> 00:08:14,070
school people because 90% of all has

00:08:11,400 --> 00:08:15,510
gives it's just like this concept of IO

00:08:14,070 --> 00:08:17,820
where you can do all effects that's

00:08:15,510 --> 00:08:20,430
something they propagate around all the

00:08:17,820 --> 00:08:22,860
code branches so for me this is not like

00:08:20,430 --> 00:08:24,960
the way you should do it right because

00:08:22,860 --> 00:08:26,940
just because you need to do some effects

00:08:24,960 --> 00:08:29,540
why should you be able to do all kind of

00:08:26,940 --> 00:08:32,250
effects so so this is what I will try to

00:08:29,540 --> 00:08:36,000
argue about this limiting limiting the

00:08:32,250 --> 00:08:38,010
effects of your applications so my

00:08:36,000 --> 00:08:38,340
example here a sink of sent confidential

00:08:38,010 --> 00:08:40,830
data

00:08:38,340 --> 00:08:44,000
I got a contractor in and I want those

00:08:40,830 --> 00:08:46,830
guys to coat that stuff with some effect

00:08:44,000 --> 00:08:48,480
but how do I limit those guys not taking

00:08:46,830 --> 00:08:50,130
our sensitive dates and send them back

00:08:48,480 --> 00:08:52,380
to their own service so they can

00:08:50,130 --> 00:08:58,830
actually sell it or get money out of it

00:08:52,380 --> 00:09:03,260
so so every now and then and I would say

00:08:58,830 --> 00:09:05,730
like we live in a really strange world

00:09:03,260 --> 00:09:08,280
there was this really nice packets

00:09:05,730 --> 00:09:10,740
associate decorator which when when you

00:09:08,280 --> 00:09:13,709
were working with your associate

00:09:10,740 --> 00:09:15,149
tools in the terminal you've got all

00:09:13,709 --> 00:09:16,980
kind of nice collars right and you were

00:09:15,149 --> 00:09:18,390
like whoa this is actually cool for me

00:09:16,980 --> 00:09:21,000
so I can actually see which part of it

00:09:18,390 --> 00:09:23,610
right the problem was this person who

00:09:21,000 --> 00:09:26,130
did this he had this line of Cora who

00:09:23,610 --> 00:09:28,830
acted took your sensitive information

00:09:26,130 --> 00:09:30,270
password and whatever it was and his and

00:09:28,830 --> 00:09:33,089
he was sending like a copy of that to

00:09:30,270 --> 00:09:35,730
his own server so that's not the deal

00:09:33,089 --> 00:09:37,890
for me to use your tool why should I

00:09:35,730 --> 00:09:40,290
give you my private information that's

00:09:37,890 --> 00:09:43,140
not part of the deal right luckily this

00:09:40,290 --> 00:09:44,790
was open source somebody has used a lot

00:09:43,140 --> 00:09:47,580
of time to read all those thousand lines

00:09:44,790 --> 00:09:48,810
of code and he say hey guys do you

00:09:47,580 --> 00:09:50,700
actually see this is happening in

00:09:48,810 --> 00:09:52,800
people's just like oh we probably

00:09:50,700 --> 00:09:54,720
shouldn't be using this and you can say

00:09:52,800 --> 00:09:58,230
yeah this is just a rogue developer

00:09:54,720 --> 00:09:59,610
under some github tech right what about

00:09:58,230 --> 00:10:02,640
those two guys do you know those two

00:09:59,610 --> 00:10:05,760
companies so we don't get hub or

00:10:02,640 --> 00:10:08,220
actually login your password from your

00:10:05,760 --> 00:10:10,709
email addresses or whatever is just to a

00:10:08,220 --> 00:10:13,200
file which could be accessed by all

00:10:10,709 --> 00:10:15,540
employees or whatever was so there was

00:10:13,200 --> 00:10:18,060
like no kind of limits to be able to do

00:10:15,540 --> 00:10:20,250
this so let's say you have a a wonder

00:10:18,060 --> 00:10:22,980
team of 42 developers and then you get

00:10:20,250 --> 00:10:24,420
like developer number 43 and he's

00:10:22,980 --> 00:10:26,399
actually a rogue guy he doesn't care he

00:10:24,420 --> 00:10:28,380
just want to get as much as information

00:10:26,399 --> 00:10:34,050
out of your system so he's the weakest

00:10:28,380 --> 00:10:35,640
link your chain breaks right so for me

00:10:34,050 --> 00:10:37,980
this is cyber security this is what we

00:10:35,640 --> 00:10:41,220
do every day when we work with like the

00:10:37,980 --> 00:10:43,920
tools that man it just tells us to work

00:10:41,220 --> 00:10:46,050
with yeah so this is house we've just

00:10:43,920 --> 00:10:47,670
there this is completely fine how many

00:10:46,050 --> 00:10:52,200
of you have seen like the next trip of

00:10:47,670 --> 00:10:54,510
this comic this is us in a bit right

00:10:52,200 --> 00:10:56,910
because we know that what we're doing at

00:10:54,510 --> 00:10:59,880
some point somebody's going to break in

00:10:56,910 --> 00:11:01,350
our somebody's going to forget to enable

00:10:59,880 --> 00:11:02,810
some configuration that the dev ops

00:11:01,350 --> 00:11:04,649
didn't do right or whatever it is and

00:11:02,810 --> 00:11:08,959
then we're actually really getting

00:11:04,649 --> 00:11:12,779
getting the heat and I also get a bit of

00:11:08,959 --> 00:11:14,970
heat of cybersecurity people and

00:11:12,779 --> 00:11:17,459
developers because I say this and this

00:11:14,970 --> 00:11:21,180
next picture is actually true this is my

00:11:17,459 --> 00:11:23,730
neighbor this is actually her what's

00:11:21,180 --> 00:11:25,100
called store room back or down in the

00:11:23,730 --> 00:11:27,710
basement

00:11:25,100 --> 00:11:30,650
somebody broke in there they cut it off

00:11:27,710 --> 00:11:33,330
so she called for professionals to

00:11:30,650 --> 00:11:35,640
actually set up a new locks mechanism

00:11:33,330 --> 00:11:36,990
I can go down with my feet screwdriver I

00:11:35,640 --> 00:11:40,170
can take those three out and I can get

00:11:36,990 --> 00:11:41,610
in again so when we say like we are not

00:11:40,170 --> 00:11:44,130
professionals there's a lot of people

00:11:41,610 --> 00:11:45,780
who aren't professionals right but

00:11:44,130 --> 00:11:48,330
there's not much we can do with real

00:11:45,780 --> 00:11:52,500
real world people but when we get into

00:11:48,330 --> 00:11:55,080
the electronic world or IT well we have

00:11:52,500 --> 00:11:57,300
some fancy tools that I can actually

00:11:55,080 --> 00:12:03,450
help us so we don't do don't do those

00:11:57,300 --> 00:12:10,010
kind of mistakes upfront I'm good I'm

00:12:03,450 --> 00:12:13,740
saying so this is one of the things that

00:12:10,010 --> 00:12:18,050
has caused is really really good to help

00:12:13,740 --> 00:12:21,480
us with so I will try to explain this

00:12:18,050 --> 00:12:23,940
probably a bit complex a concept of the

00:12:21,480 --> 00:12:26,640
prohibited M word I will not even say it

00:12:23,940 --> 00:12:30,330
in a way that I hope most people

00:12:26,640 --> 00:12:32,580
actually understand it so I try to do an

00:12:30,330 --> 00:12:36,030
analogies where I say that we live in

00:12:32,580 --> 00:12:39,500
those two several rules in Haskell so

00:12:36,030 --> 00:12:42,270
how do we actually get from those a

00:12:39,500 --> 00:12:44,160
impure code to pure code and the pure

00:12:42,270 --> 00:12:45,780
code or to the impure code so this is

00:12:44,160 --> 00:12:48,810
like operates right this is how we have

00:12:45,780 --> 00:12:50,820
this notion if I want to go to I don't

00:12:48,810 --> 00:12:52,860
know an island I have to go sorry if I

00:12:50,820 --> 00:12:55,470
want to go from Denmark to Sweden I

00:12:52,860 --> 00:12:59,640
probably have to go all this way or some

00:12:55,470 --> 00:13:01,110
bridge so so so this is like if you just

00:12:59,640 --> 00:13:03,240
think about this how do we go for one

00:13:01,110 --> 00:13:04,560
place to another place if I go over the

00:13:03,240 --> 00:13:05,790
bridge with a train I don't fall into

00:13:04,560 --> 00:13:07,860
the wall and all this thing so we have

00:13:05,790 --> 00:13:10,110
this same mechanism that's get us from

00:13:07,860 --> 00:13:12,930
one point to the others run and like

00:13:10,110 --> 00:13:14,700
this is what you can call the M word so

00:13:12,930 --> 00:13:16,500
this M word just think about it it's

00:13:14,700 --> 00:13:19,080
like some structure where you actually

00:13:16,500 --> 00:13:20,700
represent all the calculation for your

00:13:19,080 --> 00:13:24,600
for your process which is define some

00:13:20,700 --> 00:13:27,660
some kind of sequential step so as soon

00:13:24,600 --> 00:13:29,430
as one of this chains stop like it stops

00:13:27,660 --> 00:13:32,070
like the linkage it will actually stop

00:13:29,430 --> 00:13:33,750
performing any more calculations so it's

00:13:32,070 --> 00:13:35,220
not something that do it in parallel and

00:13:33,750 --> 00:13:37,649
it's not something that it's going to

00:13:35,220 --> 00:13:41,309
give some non-deterministic

00:13:37,649 --> 00:13:48,089
or not reliable shouldn't be drinking

00:13:41,309 --> 00:13:49,769
sparkling water no sorry about that so

00:13:48,089 --> 00:13:52,410
so we're not going to get all this kind

00:13:49,769 --> 00:13:55,889
of a errors like we probably get another

00:13:52,410 --> 00:13:58,649
programming languages so so this bridge

00:13:55,889 --> 00:14:00,329
is a and this is something I got

00:13:58,649 --> 00:14:03,209
inspired from a talk at earlier from

00:14:00,329 --> 00:14:05,939
Chris Jenkins he was talking about pure

00:14:03,209 --> 00:14:07,709
script and in pure script is something

00:14:05,939 --> 00:14:09,209
that also comes from Haskell and they

00:14:07,709 --> 00:14:11,970
have this notion when you put it on your

00:14:09,209 --> 00:14:13,829
main method you just put like a bracket

00:14:11,970 --> 00:14:17,399
off effects that you will allow in your

00:14:13,829 --> 00:14:20,429
HTML application right so so the easiest

00:14:17,399 --> 00:14:22,350
example is just to say I actually want

00:14:20,429 --> 00:14:24,119
to render to the done but I also want to

00:14:22,350 --> 00:14:26,040
print out to the console if I want to do

00:14:24,119 --> 00:14:30,059
some debugging right that's perfectly

00:14:26,040 --> 00:14:31,860
okay if you want to do a test or some

00:14:30,059 --> 00:14:33,720
developer instance of your application

00:14:31,860 --> 00:14:36,269
but what if you want to put it into

00:14:33,720 --> 00:14:38,490
production do you really want all this

00:14:36,269 --> 00:14:40,499
sensitive data getting into the lock and

00:14:38,490 --> 00:14:42,029
that kind of information from the lock

00:14:40,499 --> 00:14:43,889
can get copied by somebody else

00:14:42,029 --> 00:14:46,559
no you really want it to get into like

00:14:43,889 --> 00:14:49,980
the the fields that are defining this

00:14:46,559 --> 00:14:53,339
done so so this in notion that we have

00:14:49,980 --> 00:14:56,910
from a pure script it's only limited to

00:14:53,339 --> 00:15:00,360
the main signature what I'm able to do

00:14:56,910 --> 00:15:02,279
and is that I actually be able to limit

00:15:00,360 --> 00:15:03,149
also on this main method but I can

00:15:02,279 --> 00:15:06,360
granular

00:15:03,149 --> 00:15:08,730
I can I cannot say granularly limit the

00:15:06,360 --> 00:15:11,100
effects on all kind of cold branches and

00:15:08,730 --> 00:15:13,589
I can do this recursively if I want this

00:15:11,100 --> 00:15:15,569
is the power of Haskell so if you just

00:15:13,589 --> 00:15:17,939
go into this example yeah and we're

00:15:15,569 --> 00:15:22,259
going to show some code finally this is

00:15:17,939 --> 00:15:24,029
what it's all about so another thing I

00:15:22,259 --> 00:15:26,249
wanna ensure by design I wanted me to

00:15:24,029 --> 00:15:28,429
make an application I wanna be 100% sure

00:15:26,249 --> 00:15:32,540
that what has happened in my application

00:15:28,429 --> 00:15:35,910
is actually what I'm designing right so

00:15:32,540 --> 00:15:38,839
we only go in to allow access to one web

00:15:35,910 --> 00:15:41,339
service or one website or where else and

00:15:38,839 --> 00:15:43,139
that's that's we can all agree that

00:15:41,339 --> 00:15:44,819
that's an effect right we have to go out

00:15:43,139 --> 00:15:46,110
over the Internet we need to get some

00:15:44,819 --> 00:15:48,360
information and then we need to get it

00:15:46,110 --> 00:15:50,070
back in some kind of a data that we can

00:15:48,360 --> 00:15:52,949
actually work on

00:15:50,070 --> 00:15:54,690
then whatever we do with that data we

00:15:52,949 --> 00:15:56,519
need to get it on our console because

00:15:54,690 --> 00:16:00,360
otherwise it's a waste of time so we

00:15:56,519 --> 00:16:02,759
also need another another effect which

00:16:00,360 --> 00:16:06,360
is displayed to the console output right

00:16:02,759 --> 00:16:07,980
and of course every time I access that

00:16:06,360 --> 00:16:09,660
website maybe there are some changes I

00:16:07,980 --> 00:16:12,779
will really like to also add a timestamp

00:16:09,660 --> 00:16:15,449
so I access this a webpage this morning

00:16:12,779 --> 00:16:17,220
and I got this kind of data and I access

00:16:15,449 --> 00:16:23,690
it afterwards and the data probably is

00:16:17,220 --> 00:16:26,940
not there anymore so this and see

00:16:23,690 --> 00:16:30,149
c-sharp yeah whatever all application

00:16:26,940 --> 00:16:31,980
have this main method which is that

00:16:30,149 --> 00:16:34,290
method that gets executed when you run

00:16:31,980 --> 00:16:37,740
the application right so the power of

00:16:34,290 --> 00:16:40,160
Haskell is that and this the signature

00:16:37,740 --> 00:16:43,319
normally in Haskell it has to be I owe

00:16:40,160 --> 00:16:46,889
everything which is a mark with the i/o

00:16:43,319 --> 00:16:49,649
unit so all application in Haskell can

00:16:46,889 --> 00:16:52,110
do all kind of a computation just like

00:16:49,649 --> 00:16:54,810
equivalent to Turing complete languages

00:16:52,110 --> 00:16:57,839
but what I do here is I say no no no I

00:16:54,810 --> 00:17:02,220
actually bind the main function to a

00:16:57,839 --> 00:17:06,600
granulated function which I limit the

00:17:02,220 --> 00:17:08,909
context of the of the effects allowed in

00:17:06,600 --> 00:17:12,209
this application so I say I wanted to

00:17:08,909 --> 00:17:16,579
have console output access to the

00:17:12,209 --> 00:17:19,650
website and timestamps so now my

00:17:16,579 --> 00:17:22,650
application in Haskell can only do do

00:17:19,650 --> 00:17:26,939
those three effects that's it they

00:17:22,650 --> 00:17:28,679
cannot do anything else so this is just

00:17:26,939 --> 00:17:31,320
like the main entrance of the

00:17:28,679 --> 00:17:34,409
application and a for the people who

00:17:31,320 --> 00:17:39,360
know how to code Haskell this is like

00:17:34,409 --> 00:17:40,620
the thing I've seen so type classes you

00:17:39,360 --> 00:17:43,260
can actually say that it's like

00:17:40,620 --> 00:17:45,150
interfaces in Java and in c-sharp and so

00:17:43,260 --> 00:17:48,120
like on steroids it's it's a very very

00:17:45,150 --> 00:17:50,700
powerful construct so if you just have

00:17:48,120 --> 00:17:52,140
this for the sake of this talk this is

00:17:50,700 --> 00:17:56,750
like an interface right so I'm just

00:17:52,140 --> 00:17:59,730
saying that my interface for console out

00:17:56,750 --> 00:18:01,320
needs to be needs to have this bridge in

00:17:59,730 --> 00:18:03,930
order to communicate communicate with

00:18:01,320 --> 00:18:06,930
those two aisles

00:18:03,930 --> 00:18:09,930
and I want to have some output which I

00:18:06,930 --> 00:18:13,490
take a string and then I just get like

00:18:09,930 --> 00:18:16,170
this effect and if you just think about

00:18:13,490 --> 00:18:18,810
parentheses parentheses is like void in

00:18:16,170 --> 00:18:21,150
most programming languages or object or

00:18:18,810 --> 00:18:23,370
imperative programming languages so I do

00:18:21,150 --> 00:18:25,290
this I want to Brits for my console I

00:18:23,370 --> 00:18:27,690
want to bridge for my date time and I

00:18:25,290 --> 00:18:29,430
want to bridge for my website and

00:18:27,690 --> 00:18:31,350
there's of course we want T layers

00:18:29,430 --> 00:18:33,690
because we want to access encrypted

00:18:31,350 --> 00:18:34,260
websites and so on so this is like the

00:18:33,690 --> 00:18:38,490
design

00:18:34,260 --> 00:18:40,500
I used to say that I know I have chosen

00:18:38,490 --> 00:18:44,450
some bad words but this is like just to

00:18:40,500 --> 00:18:46,530
mimic s kenosha or sorry name convention

00:18:44,450 --> 00:18:48,840
this is something that you can actually

00:18:46,530 --> 00:18:49,890
get businesspeople to do because this is

00:18:48,840 --> 00:18:51,450
not really code and this is just

00:18:49,890 --> 00:18:56,400
specifying the effects of your

00:18:51,450 --> 00:18:57,660
application now as somebody who working

00:18:56,400 --> 00:18:59,370
at this company this is the only effort

00:18:57,660 --> 00:19:01,440
I have to do I just have to implement

00:18:59,370 --> 00:19:04,770
the instances of what I've just design

00:19:01,440 --> 00:19:07,050
so this is implementation details this

00:19:04,770 --> 00:19:08,700
is the only thing I need to do I need to

00:19:07,050 --> 00:19:11,720
ensure that the put string from Haskell

00:19:08,700 --> 00:19:15,870
gets binded to the one I define it why a

00:19:11,720 --> 00:19:17,880
what so sorry yeah interface on steroids

00:19:15,870 --> 00:19:22,440
with the bridge and so on and so forth

00:19:17,880 --> 00:19:25,170
and then I hard code my specific website

00:19:22,440 --> 00:19:27,270
and immutable else in Haskell means that

00:19:25,170 --> 00:19:29,730
you can never change this value in the

00:19:27,270 --> 00:19:32,310
lifetime of this application so I just

00:19:29,730 --> 00:19:37,230
ensure that pass request from Haskell

00:19:32,310 --> 00:19:40,010
adds in base your URL so now you can

00:19:37,230 --> 00:19:42,720
only provide relative URLs so that way I

00:19:40,010 --> 00:19:44,490
know you can kill all you want on this

00:19:42,720 --> 00:19:49,110
specific website but you cannot call

00:19:44,490 --> 00:19:52,650
anything else so we go from this all

00:19:49,110 --> 00:19:55,710
effects to a very small three subsets

00:19:52,650 --> 00:19:58,110
combined together right so so it's just

00:19:55,710 --> 00:20:01,800
like wasted intersection or we remember

00:19:58,110 --> 00:20:03,870
so you can see now that I don't have to

00:20:01,800 --> 00:20:05,430
worry too much of what's happening with

00:20:03,870 --> 00:20:07,740
my application because up front

00:20:05,430 --> 00:20:12,510
I already already know that it can only

00:20:07,740 --> 00:20:14,310
do three things so

00:20:12,510 --> 00:20:17,640
this concept then thanks to Alejandro

00:20:14,310 --> 00:20:19,320
who pointed out to me this is something

00:20:17,640 --> 00:20:21,180
that we call in information security and

00:20:19,320 --> 00:20:26,580
computer science a principle of least

00:20:21,180 --> 00:20:29,300
privilege or pulp in abbreviation so so

00:20:26,580 --> 00:20:31,710
the powerful thing about Haskell is that

00:20:29,300 --> 00:20:33,660
this is something that you see with C

00:20:31,710 --> 00:20:35,970
and sandboxes SE and darker and all this

00:20:33,660 --> 00:20:38,610
stuff but Haskell can do it at compile

00:20:35,970 --> 00:20:39,450
time so if we don't comply with our

00:20:38,610 --> 00:20:42,270
requirements

00:20:39,450 --> 00:20:43,920
we cannot build up in a binary that's it

00:20:42,270 --> 00:20:47,280
if you cannot build a binary you cannot

00:20:43,920 --> 00:20:49,860
ship it so until we don't comply with

00:20:47,280 --> 00:20:54,620
our application requirements we're not

00:20:49,860 --> 00:21:00,180
going to ship the binaries so this is my

00:20:54,620 --> 00:21:01,380
selling point so we design right number

00:21:00,180 --> 00:21:03,810
one hundred percent sure that this

00:21:01,380 --> 00:21:05,580
application will do what I want now I

00:21:03,810 --> 00:21:08,580
can outsource it to anybody I don't even

00:21:05,580 --> 00:21:10,950
care of you the best black hair hacker

00:21:08,580 --> 00:21:14,550
in the world I don't care either you

00:21:10,950 --> 00:21:17,070
comply 100% with my initial design or

00:21:14,550 --> 00:21:19,020
the Haskell compiler will just say now

00:21:17,070 --> 00:21:20,700
I'm not going to build no binaries we

00:21:19,020 --> 00:21:23,330
cannot ship the code so you cannot

00:21:20,700 --> 00:21:26,160
inject backdoors you cannot do anything

00:21:23,330 --> 00:21:27,780
so let's say it's 10 million lines of

00:21:26,160 --> 00:21:29,760
code do you think I want to read 10

00:21:27,780 --> 00:21:32,450
million lines of code from my contract I

00:21:29,760 --> 00:21:35,130
don't give a oh sorry I don't care

00:21:32,450 --> 00:21:37,260
I'm just going to let Haskell decide if

00:21:35,130 --> 00:21:39,090
they want to allow those 10 10 million

00:21:37,260 --> 00:21:41,460
lines of code a if those 10 million

00:21:39,090 --> 00:21:44,970
lines of code complies with what the

00:21:41,460 --> 00:21:46,230
design specifies well then you will get

00:21:44,970 --> 00:21:48,870
your payment and I will actually ship

00:21:46,230 --> 00:21:50,970
the application right and I put a little

00:21:48,870 --> 00:21:54,240
star here because you need to do some

00:21:50,970 --> 00:21:57,530
trickery in Haskell by using some

00:21:54,240 --> 00:22:00,660
compiler flex because you can use this

00:21:57,530 --> 00:22:02,880
really not well sometimes it depends on

00:22:00,660 --> 00:22:04,680
performance but you can actually inject

00:22:02,880 --> 00:22:06,420
something that can bypass the type

00:22:04,680 --> 00:22:08,700
system in Haskell and it's not always

00:22:06,420 --> 00:22:10,440
the side that should be that should be

00:22:08,700 --> 00:22:11,660
the case but at least you can stop it

00:22:10,440 --> 00:22:14,490
from happening

00:22:11,660 --> 00:22:16,380
so what's relevant very relevant when I

00:22:14,490 --> 00:22:20,010
say and this is the thing like I say I

00:22:16,380 --> 00:22:21,900
tried to solve this issues all those

00:22:20,010 --> 00:22:24,240
issues that we get with the general data

00:22:21,900 --> 00:22:26,520
protection regulation from the EU

00:22:24,240 --> 00:22:27,750
and this is taken from a blog post this

00:22:26,520 --> 00:22:29,430
is a person who doesn't know anything

00:22:27,750 --> 00:22:31,260
about software and he's not even a legal

00:22:29,430 --> 00:22:32,940
person he just says that oh yes Reid

00:22:31,260 --> 00:22:35,250
knows of the law and this is what he

00:22:32,940 --> 00:22:38,010
gets out of it oh so we need to ensure

00:22:35,250 --> 00:22:39,750
that we minimize data oh ok if I cannot

00:22:38,010 --> 00:22:41,520
send data out from my application

00:22:39,750 --> 00:22:43,020
because it's limited so it doesn't

00:22:41,520 --> 00:22:45,300
matter which libraries I use I know it's

00:22:43,020 --> 00:22:46,770
got not going to be leaked we need to be

00:22:45,300 --> 00:22:49,070
able to demonstrate it yeah I can sit

00:22:46,770 --> 00:22:52,460
with the Swedish Data Protection Agency

00:22:49,070 --> 00:22:56,070
do you see these three lines of a design

00:22:52,460 --> 00:22:58,890
or sorry of a limitation of effects on

00:22:56,070 --> 00:23:00,750
the system yeah that's it it cannot do

00:22:58,890 --> 00:23:02,070
anything else all you don't trust me go

00:23:00,750 --> 00:23:06,750
talk with Alejandro he'll probably say

00:23:02,070 --> 00:23:08,520
the same thing as I do and you need to

00:23:06,750 --> 00:23:09,960
use the smallest amount of data sure

00:23:08,520 --> 00:23:11,700
it's possible time so you can say or

00:23:09,960 --> 00:23:14,310
once we have get the data we don't

00:23:11,700 --> 00:23:17,880
persist it or we just remove it from

00:23:14,310 --> 00:23:19,190
them from their memory so so like we

00:23:17,880 --> 00:23:21,690
have this really really nice

00:23:19,190 --> 00:23:24,570
microservices totally stateless if you

00:23:21,690 --> 00:23:27,240
want to design it that way and it's like

00:23:24,570 --> 00:23:29,250
it's it's very easy to like make this a

00:23:27,240 --> 00:23:33,560
combination between those those two

00:23:29,250 --> 00:23:36,270
processes so so just to summarize

00:23:33,560 --> 00:23:38,690
there's a lot of people myself included

00:23:36,270 --> 00:23:41,910
I love working with a static typing

00:23:38,690 --> 00:23:44,340
static typing on Haskell is static

00:23:41,910 --> 00:23:45,960
typing on on steroids as well because we

00:23:44,340 --> 00:23:48,240
can actually go a step further where we

00:23:45,960 --> 00:23:51,120
make a distinction between a fixed and

00:23:48,240 --> 00:23:53,340
purity right restricted effects it is

00:23:51,120 --> 00:23:54,900
really really powerful why would I allow

00:23:53,340 --> 00:23:58,380
the application doing anything and

00:23:54,900 --> 00:24:00,090
before taking my going to university I

00:23:58,380 --> 00:24:03,680
was working as a neck network specialist

00:24:00,090 --> 00:24:06,210
right the whole key point of that was

00:24:03,680 --> 00:24:08,400
exclusion if you can exclude as many

00:24:06,210 --> 00:24:10,230
thing as possible we knew that that

00:24:08,400 --> 00:24:12,180
domain was becoming smaller and smaller

00:24:10,230 --> 00:24:15,060
and smaller and we didn't have to do too

00:24:12,180 --> 00:24:18,030
much a file file finding one when there

00:24:15,060 --> 00:24:20,370
was something wrong cyber security all

00:24:18,030 --> 00:24:23,660
your data leaks are belonging to us if

00:24:20,370 --> 00:24:27,150
it's if you understand that reference

00:24:23,660 --> 00:24:29,570
pulp at compile time yes everything

00:24:27,150 --> 00:24:32,580
that's compiled and we love it

00:24:29,570 --> 00:24:34,650
outsourced and design I can always say

00:24:32,580 --> 00:24:36,330
showcase that what I wanted with this

00:24:34,650 --> 00:24:37,600
application is happening hey if I'm

00:24:36,330 --> 00:24:40,030
actually trying to

00:24:37,600 --> 00:24:41,490
misuse people's trust that's going to

00:24:40,030 --> 00:24:45,220
show up as well

00:24:41,490 --> 00:24:46,690
outsourcing I don't care I give it to

00:24:45,220 --> 00:24:51,190
everybody and I will not say that

00:24:46,690 --> 00:24:53,980
I swear again sorry so do you power has

00:24:51,190 --> 00:24:57,280
this concept of a data protection by

00:24:53,980 --> 00:24:59,560
design and default article 25 which was

00:24:57,280 --> 00:25:03,280
previously known like more vaguely as

00:24:59,560 --> 00:25:05,080
privacy by design so by using this kind

00:25:03,280 --> 00:25:08,140
of technique or approach this is very

00:25:05,080 --> 00:25:09,580
easy for us to argue that we actually do

00:25:08,140 --> 00:25:13,270
in the state of the art software that

00:25:09,580 --> 00:25:14,650
actually complies with this and I think

00:25:13,270 --> 00:25:17,370
I probably have one minute or two to

00:25:14,650 --> 00:25:17,370
some Q&A

00:25:20,220 --> 00:25:26,940
okay so anybody has questions except

00:25:24,550 --> 00:25:26,940
Klondike

00:25:33,350 --> 00:25:38,030
I'm gonna say subclass because I don't

00:25:35,990 --> 00:25:41,180
know the right Haskell word for it but

00:25:38,030 --> 00:25:45,350
can you sub class at a string type to be

00:25:41,180 --> 00:25:48,890
an unlockable string so so this concept

00:25:45,350 --> 00:25:51,770
just for the easiness of the eyes this

00:25:48,890 --> 00:25:55,820
could actually be instantiated in a

00:25:51,770 --> 00:25:57,290
misbehaved way but if I add proxy in

00:25:55,820 --> 00:25:59,300
intermediate proxy class between the

00:25:57,290 --> 00:26:00,980
definition of this you cannot

00:25:59,300 --> 00:26:03,710
instantiate it so you have to work with

00:26:00,980 --> 00:26:05,750
my way of defining but I didn't want to

00:26:03,710 --> 00:26:06,830
get too much noiz I wanted to get it

00:26:05,750 --> 00:26:07,370
like on a level so everybody can

00:26:06,830 --> 00:26:14,110
understand it

00:26:07,370 --> 00:26:14,110
thank you any more questions

00:26:16,540 --> 00:26:21,250
Thanks

00:26:19,190 --> 00:26:21,250
you

00:26:28,870 --> 00:26:30,930

YouTube URL: https://www.youtube.com/watch?v=XXx9nDc9L5k


