Title: Saving the Day by Stack Smashing a Hundred Streetlights before Sunrise - Adam Dunkels
Publication date: 2019-04-22
Playlist: foss-north 2019
Description: 
	Hours before an important customer demo, one hundred streetlights are running a pre-release software version with a critical bug that prevents them from working properly. What's worse, the bug also causes the remote-update mechanism to fail. Fortunately, a recent update had introduced an off-by-one bug that allowed us to create a stack smash attack that could inject a patch into each light and fix the lamps just in time before sunrise.

---

Adam Dunkels is the CEO and co-founder Thingsquare and an award-winning Internet of Things pioneer, named a top 35 innovator in the world by the MIT Technology Review for having created the minimal wireless networking protocols that allow almost any device to communicate over the Internet. Most of today's Internet of Things products are powered by software he created.

https://foss-north.se/2019/speakers-and-talks.html#adunkels
Captions: 
	00:00:16,020 --> 00:00:22,020
I guess first off let's let me just say

00:00:18,660 --> 00:00:24,510
thank you for for the do the organizer

00:00:22,020 --> 00:00:28,020
is for organizing this and and to all of

00:00:24,510 --> 00:00:30,119
you for being here for this talk because

00:00:28,020 --> 00:00:32,430
as it turns out there is a competing

00:00:30,119 --> 00:00:34,440
talk in the other room that also would

00:00:32,430 --> 00:00:36,930
be about the Internet of Things and or

00:00:34,440 --> 00:00:40,020
they are updates and and kind of similar

00:00:36,930 --> 00:00:44,190
topics so plus I think they have better

00:00:40,020 --> 00:00:51,450
chairs in there so just super happy to

00:00:44,190 --> 00:00:54,860
see ya so so we are kinda hard core team

00:00:51,450 --> 00:00:57,450
here we were okay to the hearted chairs

00:00:54,860 --> 00:00:59,550
so this is also the last talk of the day

00:00:57,450 --> 00:01:02,309
I think we have the we're actually going

00:00:59,550 --> 00:01:03,989
into the other room after this one so it

00:01:02,309 --> 00:01:05,630
might be we don't we we don't know that

00:01:03,989 --> 00:01:07,619
yet but maybe that talks much better

00:01:05,630 --> 00:01:10,500
we'll see that when we're getting there

00:01:07,619 --> 00:01:13,410
if you forea spontaneous singing you

00:01:10,500 --> 00:01:18,259
know there's just the X credible talk

00:01:13,410 --> 00:01:21,180
but we'll see so I will be talking about

00:01:18,259 --> 00:01:24,570
stack smashing hundred streetlights

00:01:21,180 --> 00:01:27,659
before sunrise something that could come

00:01:24,570 --> 00:01:31,920
out of basically not doing what Daniel

00:01:27,659 --> 00:01:35,970
talked about but then actually can

00:01:31,920 --> 00:01:37,350
happen even if you do that so it's a and

00:01:35,970 --> 00:01:40,500
there is no real moral to the story

00:01:37,350 --> 00:01:45,210
there is no message there's just it's

00:01:40,500 --> 00:01:47,880
just a cool story so I think that's

00:01:45,210 --> 00:01:51,450
that's a good kind of last talk for the

00:01:47,880 --> 00:01:53,670
day you can just relax to sit back so my

00:01:51,450 --> 00:01:56,570
name is Adam I'm the CEO and co-founder

00:01:53,670 --> 00:01:59,759
of the company things Square and

00:01:56,570 --> 00:02:02,579
actually as it turns out and I was quite

00:01:59,759 --> 00:02:07,500
baffled to see this I looked this up

00:02:02,579 --> 00:02:10,170
yesterday and I am according to

00:02:07,500 --> 00:02:13,320
Wikipedia the story about this Daniel

00:02:10,170 --> 00:02:16,040
sorry about this I am the only one the

00:02:13,320 --> 00:02:19,920
only Swedish inventor in the century

00:02:16,040 --> 00:02:22,160
yeah wikipedia says so I'm the only guy

00:02:19,920 --> 00:02:22,160
here

00:02:22,590 --> 00:02:30,150
[Laughter]

00:02:25,879 --> 00:02:31,890
so I think and I I don't I I mean I'm I

00:02:30,150 --> 00:02:33,750
mention here I can't really edit this

00:02:31,890 --> 00:02:37,250
but I think at least Danny will be here

00:02:33,750 --> 00:02:42,840
so maybe tonight maybe someone will have

00:02:37,250 --> 00:02:44,849
edited this we'll see so this is that's

00:02:42,840 --> 00:02:46,470
actually pretty cool it's a it's like

00:02:44,849 --> 00:02:49,409
it's a cool thing to actually realize

00:02:46,470 --> 00:02:53,299
this but my background and the reason

00:02:49,409 --> 00:02:56,760
why I'm I guess I'm here today is that I

00:02:53,299 --> 00:02:59,069
also have this this 20 year history out

00:02:56,760 --> 00:03:00,750
there doing open source stuff I I back

00:02:59,069 --> 00:03:03,239
in the year 2000 I do an open source

00:03:00,750 --> 00:03:06,720
project called like VIP which is in the

00:03:03,239 --> 00:03:08,669
embedded arena it's the pipe and IP

00:03:06,720 --> 00:03:10,019
stack so that the piece of software in

00:03:08,669 --> 00:03:12,120
an operating system that is able to

00:03:10,019 --> 00:03:17,280
communicate using the IP protocols TCP

00:03:12,120 --> 00:03:19,799
UDP icmp an IP yeah this was very

00:03:17,280 --> 00:03:21,419
successful as an open source project in

00:03:19,799 --> 00:03:24,689
the sense that I could leave the project

00:03:21,419 --> 00:03:26,700
and it just kept going and I think it's

00:03:24,689 --> 00:03:28,680
still active at least people still

00:03:26,700 --> 00:03:31,109
actively use this a lot you can see it

00:03:28,680 --> 00:03:32,669
here and they're popping up Google Fuchs

00:03:31,109 --> 00:03:34,979
he had a new operating system called

00:03:32,669 --> 00:03:36,659
this was the operating systems IP stack

00:03:34,979 --> 00:03:40,319
was this so it kind of pops up

00:03:36,659 --> 00:03:46,079
everywhere really quite widely used but

00:03:40,319 --> 00:03:48,090
I I left the project since like 15 or so

00:03:46,079 --> 00:03:49,739
years back I start another project

00:03:48,090 --> 00:03:53,220
called contiki operating system which

00:03:49,739 --> 00:03:56,430
was also in the same kind of embedded

00:03:53,220 --> 00:03:59,430
area doing networked systems except this

00:03:56,430 --> 00:04:01,560
one was was the first system that I ran

00:03:59,430 --> 00:04:04,680
on the first release was on a Commodore

00:04:01,560 --> 00:04:08,040
64 was the first native operating system

00:04:04,680 --> 00:04:09,269
with a web browser web server is Ã©taient

00:04:08,040 --> 00:04:13,409
could all run at the same time pretty

00:04:09,269 --> 00:04:16,889
cool stuff this one is actually the

00:04:13,409 --> 00:04:18,570
basis in a way for the tech and the

00:04:16,889 --> 00:04:19,909
company that that me and a couple of

00:04:18,570 --> 00:04:23,340
colleagues started called things square

00:04:19,909 --> 00:04:26,820
seven years back now just took it crazy

00:04:23,340 --> 00:04:30,750
leap and try to do something in the real

00:04:26,820 --> 00:04:34,500
world something real and we've been

00:04:30,750 --> 00:04:36,870
doing it ever since we are we now have

00:04:34,500 --> 00:04:38,730
customers in all continents except

00:04:36,870 --> 00:04:44,300
Antarctica

00:04:38,730 --> 00:04:46,590
so if anyone knows anyone Antarctica

00:04:44,300 --> 00:04:49,200
talk to me actually we signed it send

00:04:46,590 --> 00:04:51,840
deals yesterday that places in in Africa

00:04:49,200 --> 00:04:55,110
so that wasn't kind of the last blank

00:04:51,840 --> 00:04:57,180
spot on the map except Antarctica and

00:04:55,110 --> 00:04:58,260
now this is this is it this is the end

00:04:57,180 --> 00:05:03,750
of the line now this is the most

00:04:58,260 --> 00:05:06,060
important thing is here today so what

00:05:03,750 --> 00:05:07,710
what we do just to kind of get your

00:05:06,060 --> 00:05:10,920
background what the thing Square is is

00:05:07,710 --> 00:05:12,870
doing and what we're what we're into at

00:05:10,920 --> 00:05:14,100
a very high level the problem we're

00:05:12,870 --> 00:05:15,720
solving is that there's lots of

00:05:14,100 --> 00:05:18,870
information in the real world the fiscal

00:05:15,720 --> 00:05:20,910
data that is hard to get to it's hard to

00:05:18,870 --> 00:05:22,140
figure this out without pulling it out

00:05:20,910 --> 00:05:24,360
using wireless technology and that's

00:05:22,140 --> 00:05:25,620
what we do we put some wireless stuff in

00:05:24,360 --> 00:05:26,640
there and we get to stay down so that

00:05:25,620 --> 00:05:29,250
could be for example the number of

00:05:26,640 --> 00:05:31,080
people in this room is important to know

00:05:29,250 --> 00:05:32,460
for scheduling for the university how

00:05:31,080 --> 00:05:34,440
many how many people are in this room

00:05:32,460 --> 00:05:36,360
when we have a class or or other

00:05:34,440 --> 00:05:37,650
activities and we can if we know that

00:05:36,360 --> 00:05:40,140
number of people we can schedule more

00:05:37,650 --> 00:05:41,910
effectively also if there was a fire the

00:05:40,140 --> 00:05:43,470
firefighters could could know that

00:05:41,910 --> 00:05:48,000
there's lots of people here less people

00:05:43,470 --> 00:05:50,760
in some other place so by having say IR

00:05:48,000 --> 00:05:52,470
detectors on all the entry and exit

00:05:50,760 --> 00:05:54,450
points we can get a pretty good estimate

00:05:52,470 --> 00:05:55,860
of that so this is the kind of

00:05:54,450 --> 00:05:59,610
information that's out there in the real

00:05:55,860 --> 00:06:01,680
world that is valuable but it's really

00:05:59,610 --> 00:06:05,670
hard to get to without some wireless

00:06:01,680 --> 00:06:07,020
technology and we provide that tech so

00:06:05,670 --> 00:06:09,030
it's and price what would you is

00:06:07,020 --> 00:06:11,190
wireless software all the way from the

00:06:09,030 --> 00:06:13,530
wireless chips that goes into all those

00:06:11,190 --> 00:06:14,820
things that might collect this data all

00:06:13,530 --> 00:06:17,850
the way up to the cloud and everything

00:06:14,820 --> 00:06:20,430
in between so a couple of things that

00:06:17,850 --> 00:06:21,720
the software is good-looking and I mean

00:06:20,430 --> 00:06:23,910
that in the sense that that we can

00:06:21,720 --> 00:06:25,680
deploy it and have a nice visual for our

00:06:23,910 --> 00:06:27,210
customers to sell to their customers and

00:06:25,680 --> 00:06:31,560
yeah everyone's really happy but also in

00:06:27,210 --> 00:06:34,380
the sense that we have very strict style

00:06:31,560 --> 00:06:39,390
guidelines for the code so it actually

00:06:34,380 --> 00:06:42,870
looks pretty good so you know we want to

00:06:39,390 --> 00:06:44,760
really emphasize this point here at very

00:06:42,870 --> 00:06:47,610
low power we can run on things like coin

00:06:44,760 --> 00:06:49,710
cell batteries tiny chips very efficient

00:06:47,610 --> 00:06:51,720
wireless networking mesh networking

00:06:49,710 --> 00:06:53,790
large-scale networks hundreds of

00:06:51,720 --> 00:06:56,640
thousands of devices in each Network and

00:06:53,790 --> 00:06:59,100
the most important thing here today is

00:06:56,640 --> 00:07:00,870
the over-the-air updates this is a kind

00:06:59,100 --> 00:07:03,960
of a killer feature if you have

00:07:00,870 --> 00:07:06,420
thousands of wireless devices out there

00:07:03,960 --> 00:07:08,190
and you want to do an update you really

00:07:06,420 --> 00:07:10,170
need to want do you really want to be

00:07:08,190 --> 00:07:12,660
able to do that you can't collect things

00:07:10,170 --> 00:07:15,230
and reflash them using a physical tool

00:07:12,660 --> 00:07:17,460
to do it it's it's not a viable

00:07:15,230 --> 00:07:19,380
procedure so you want to have this

00:07:17,460 --> 00:07:23,480
except the problem is that you may mess

00:07:19,380 --> 00:07:25,820
things up and that's what we did here so

00:07:23,480 --> 00:07:27,990
here are just a few examples of

00:07:25,820 --> 00:07:29,430
customers a virus doing customer

00:07:27,990 --> 00:07:31,260
feedback buttons you know those those

00:07:29,430 --> 00:07:35,460
things where you you pushed a smiley

00:07:31,260 --> 00:07:36,990
face or a happy frowny face or to tell

00:07:35,460 --> 00:07:38,460
the store how you feel in certain

00:07:36,990 --> 00:07:40,620
situations might be you know are the

00:07:38,460 --> 00:07:43,200
bananas good today yes or no are the

00:07:40,620 --> 00:07:44,790
queue lines too long yes or no and lots

00:07:43,200 --> 00:07:47,130
of other things so this is a Dutch

00:07:44,790 --> 00:07:48,600
company doing this one here tiny buttons

00:07:47,130 --> 00:07:49,830
those are completely wireless so they

00:07:48,600 --> 00:07:51,870
are battery operated can put them on

00:07:49,830 --> 00:07:54,750
glass walls anywhere it's pretty cool

00:07:51,870 --> 00:07:56,850
stuff in store purchase interaction so

00:07:54,750 --> 00:07:58,590
how many people are actually interacting

00:07:56,850 --> 00:08:00,630
with the white goods at the wipes goods

00:07:58,590 --> 00:08:03,360
store you know that the ovens were they

00:08:00,630 --> 00:08:06,110
the the dishwashers that information

00:08:03,360 --> 00:08:07,680
helps the store to create a better store

00:08:06,110 --> 00:08:09,690
for them I guess

00:08:07,680 --> 00:08:12,990
especially to sell them sell more stuff

00:08:09,690 --> 00:08:15,150
more efficient exits I monitored this

00:08:12,990 --> 00:08:17,040
was the one thing that that was that we

00:08:15,150 --> 00:08:18,780
could have used in this room actually if

00:08:17,040 --> 00:08:21,479
we use it in this room and in the other

00:08:18,780 --> 00:08:23,520
competing room we wouldn't be able to

00:08:21,479 --> 00:08:25,080
settle the score way that's out so maybe

00:08:23,520 --> 00:08:28,290
it's good for us that we didn't have

00:08:25,080 --> 00:08:31,169
your will see elevator monitoring

00:08:28,290 --> 00:08:33,390
elevators are they're moving up and down

00:08:31,169 --> 00:08:36,810
and they are used in various places

00:08:33,390 --> 00:08:39,900
various different amounts of time so for

00:08:36,810 --> 00:08:42,599
example the bottom floor usually has 50%

00:08:39,900 --> 00:08:45,750
of all movements because you either go

00:08:42,599 --> 00:08:47,550
up or you go down so you have to replace

00:08:45,750 --> 00:08:49,170
the things on the bottom floor more

00:08:47,550 --> 00:08:51,360
often they're not the higher floors

00:08:49,170 --> 00:08:52,589
except you really don't know which ones

00:08:51,360 --> 00:08:55,290
left the higher floors unless you

00:08:52,589 --> 00:08:57,300
measure how the movement is is it's

00:08:55,290 --> 00:08:59,250
doing so we can do that and we can be

00:08:57,300 --> 00:09:02,540
more efficient in in doing servicing on

00:08:59,250 --> 00:09:05,990
these elevators smart gardening and yes

00:09:02,540 --> 00:09:10,490
it's cannabis these are cannabis plants

00:09:05,990 --> 00:09:12,110
and this is one of the this and forgive

00:09:10,490 --> 00:09:14,210
the pun it's it's completely intended

00:09:12,110 --> 00:09:17,510
it's a huge is a growing market is a

00:09:14,210 --> 00:09:20,750
growing market yes it is especially this

00:09:17,510 --> 00:09:23,360
cannabis thing is it's crazy how you

00:09:20,750 --> 00:09:24,950
know Canada legalized it a lot of places

00:09:23,360 --> 00:09:30,520
in the US have legalized it now Canada

00:09:24,950 --> 00:09:30,520
is exporting cannabis to Amsterdam

00:09:31,150 --> 00:09:35,510
apparently so

00:09:32,960 --> 00:09:37,220
we have as several customers actually in

00:09:35,510 --> 00:09:40,340
this area doing things like like

00:09:37,220 --> 00:09:41,990
lighting fixtures sensors making sure

00:09:40,340 --> 00:09:42,820
that all the plants are growing as they

00:09:41,990 --> 00:09:45,260
should

00:09:42,820 --> 00:09:47,090
street lighting and here's what the this

00:09:45,260 --> 00:09:48,950
is the the kind of the core of the that

00:09:47,090 --> 00:09:51,260
the talk your day street hiding so

00:09:48,950 --> 00:09:53,150
large-scale networks and gotta get back

00:09:51,260 --> 00:09:55,190
to that some more but here we want to do

00:09:53,150 --> 00:09:57,500
things like I control the lamps and know

00:09:55,190 --> 00:09:59,120
if the polls have been have changed and

00:09:57,500 --> 00:10:00,560
their orientation which could happen say

00:09:59,120 --> 00:10:04,760
that someone runs into that and kind of

00:10:00,560 --> 00:10:08,300
changes its orientation so the tech that

00:10:04,760 --> 00:10:10,330
we do we use the contiki operating

00:10:08,300 --> 00:10:12,590
system the one that from from back then

00:10:10,330 --> 00:10:15,530
inside those tips that we have deployed

00:10:12,590 --> 00:10:17,870
Arctic's typically arm cortex-m threes

00:10:15,530 --> 00:10:19,400
so those are the micro processors that

00:10:17,870 --> 00:10:22,070
are in those wireless chips those are

00:10:19,400 --> 00:10:26,360
they're pretty it's pretty small 16 K

00:10:22,070 --> 00:10:27,500
RAM 128 K flash and the most popular

00:10:26,360 --> 00:10:30,770
version that we were using it right now

00:10:27,500 --> 00:10:32,990
is it's pretty tight we're using a

00:10:30,770 --> 00:10:35,990
low-power ipv6 networking coin cell

00:10:32,990 --> 00:10:38,810
battery some of this is as it's really

00:10:35,990 --> 00:10:41,780
quite hard to get that right sub one

00:10:38,810 --> 00:10:44,450
gigahertz 2.4 gigahertz nodejs alone so

00:10:41,780 --> 00:10:45,710
it's really C and JavaScript so it when

00:10:44,450 --> 00:10:47,360
someone said you know what's the other

00:10:45,710 --> 00:10:49,970
language stuff of course I thought

00:10:47,360 --> 00:10:56,060
JavaScript the safe language right the

00:10:49,970 --> 00:10:59,150
well we all know so so this is the kind

00:10:56,060 --> 00:11:00,860
of stuff that we do yeah and this is

00:10:59,150 --> 00:11:02,840
what it typically looks like we just

00:11:00,860 --> 00:11:06,860
break it down all those examples here

00:11:02,840 --> 00:11:08,330
are worked like this there are a bunch

00:11:06,860 --> 00:11:12,920
of wireless devices they are chips

00:11:08,330 --> 00:11:16,130
Wireless chips single chip yes I think

00:11:12,920 --> 00:11:20,209
someone did spot the Easter Egg here

00:11:16,130 --> 00:11:24,589
if you can read what it says here 6581

00:11:20,209 --> 00:11:27,440
so that made us it's acid chip it's the

00:11:24,589 --> 00:11:29,389
music chip in the Commodore 64 one of

00:11:27,440 --> 00:11:31,699
the most single most popular chips in

00:11:29,389 --> 00:11:35,810
the world ever I think of the history of

00:11:31,699 --> 00:11:37,069
anything but we actually don't use the

00:11:35,810 --> 00:11:39,949
sit chips I just used it as an

00:11:37,069 --> 00:11:41,990
illustration here but it's a wireless

00:11:39,949 --> 00:11:45,319
chips talking to other wireless chips

00:11:41,990 --> 00:11:49,550
and they can be large they can be

00:11:45,319 --> 00:11:51,709
several square kilometers out here or

00:11:49,550 --> 00:11:53,329
they can be small some kind of access

00:11:51,709 --> 00:11:55,160
point it could be an edge server or

00:11:53,329 --> 00:11:57,970
something like you this is a Raspberry

00:11:55,160 --> 00:12:00,649
Pi of chose this illustrate here it's a

00:11:57,970 --> 00:12:02,660
some kind of server can be local or it

00:12:00,649 --> 00:12:04,670
can be on the cloud so this is kind of

00:12:02,660 --> 00:12:10,220
the framework of things that that we

00:12:04,670 --> 00:12:14,560
always tend to have in our setups so the

00:12:10,220 --> 00:12:18,470
problem the challenge is how do you do

00:12:14,560 --> 00:12:20,740
software development for networks of

00:12:18,470 --> 00:12:24,730
thousands of devices I mean it's it's

00:12:20,740 --> 00:12:28,790
it's a we all know how hard it is to

00:12:24,730 --> 00:12:30,439
program one program we just saw the

00:12:28,790 --> 00:12:33,110
previous talk it's really about like

00:12:30,439 --> 00:12:36,170
this one program doing all these tests

00:12:33,110 --> 00:12:40,160
as one program so one device is kind of

00:12:36,170 --> 00:12:44,569
a challenge in itself and especially in

00:12:40,160 --> 00:12:47,240
the case where we'd have those extreme

00:12:44,569 --> 00:12:50,209
constraints we want to run things and

00:12:47,240 --> 00:12:53,360
coin cell batteries which means that we

00:12:50,209 --> 00:12:55,670
really need to sleep a lot I mean every

00:12:53,360 --> 00:12:58,279
little time we wake up we'll just drain

00:12:55,670 --> 00:13:01,370
the battery little by little but it's

00:12:58,279 --> 00:13:03,339
it's not about not a lot of energy in

00:13:01,370 --> 00:13:06,800
those so we really need to be super

00:13:03,339 --> 00:13:13,130
efficient in how we work the the memory

00:13:06,800 --> 00:13:16,220
is unforgiving it's a it's literally

00:13:13,130 --> 00:13:19,130
have five or six times a week that we

00:13:16,220 --> 00:13:21,620
run into the the limit of this five

00:13:19,130 --> 00:13:23,509
bytes overflow yeah we need to do they

00:13:21,620 --> 00:13:25,550
are four by two it's it's always those

00:13:23,509 --> 00:13:28,550
tiny little Hamas we're gonna be pushing

00:13:25,550 --> 00:13:29,900
this against the kind of the edge but

00:13:28,550 --> 00:13:32,450
it's again is its

00:13:29,900 --> 00:13:34,220
one device is relatively easy to do you

00:13:32,450 --> 00:13:36,230
can do things like printf this for

00:13:34,220 --> 00:13:41,150
debugging how many here used printouts

00:13:36,230 --> 00:13:44,300
for debugging yes everyone how many here

00:13:41,150 --> 00:13:49,640
is something else besides printf for

00:13:44,300 --> 00:13:51,200
debugging okay so but we can do that

00:13:49,640 --> 00:13:56,120
here we can actually we can do better we

00:13:51,200 --> 00:14:00,560
can do use LEDs so it's also another

00:13:56,120 --> 00:14:02,570
trick but but things like logic

00:14:00,560 --> 00:14:04,850
analyzers we can look at you know

00:14:02,570 --> 00:14:06,290
sniff sniff busses and stuff and

00:14:04,850 --> 00:14:10,310
actually make sure that things do as

00:14:06,290 --> 00:14:14,060
they say they should do on one device so

00:14:10,310 --> 00:14:16,040
now the next step is getting out of hand

00:14:14,060 --> 00:14:18,050
now there are two of them right so now

00:14:16,040 --> 00:14:21,230
you have two things talking to each

00:14:18,050 --> 00:14:23,630
other so you can for example you cannot

00:14:21,230 --> 00:14:25,850
just single staff one of them because

00:14:23,630 --> 00:14:27,800
the Allen one will just keep running so

00:14:25,850 --> 00:14:30,500
now you have created this this situation

00:14:27,800 --> 00:14:32,840
where you have a coordination problem

00:14:30,500 --> 00:14:34,940
that you need to deal with you can still

00:14:32,840 --> 00:14:37,280
do things like printf son LEDs and and

00:14:34,940 --> 00:14:39,620
hardware sniffers and and all that

00:14:37,280 --> 00:14:42,410
because it's relatively manageable you

00:14:39,620 --> 00:14:45,730
can have it on a desk that's that's sort

00:14:42,410 --> 00:14:48,230
of fine but then just adding three more

00:14:45,730 --> 00:14:50,930
now it's kind of gets kind of hard to

00:14:48,230 --> 00:14:53,720
make this just physically manage because

00:14:50,930 --> 00:14:55,880
you have five of these and typically if

00:14:53,720 --> 00:14:58,820
you have a an embedded device it's a

00:14:55,880 --> 00:15:02,330
it's a printed circuit board maybe like

00:14:58,820 --> 00:15:04,250
this and you have all sorts of things

00:15:02,330 --> 00:15:08,540
sticking out as wires sticking out you

00:15:04,250 --> 00:15:10,340
have cable s'en so each each work area

00:15:08,540 --> 00:15:11,930
is kind of like this so five of these

00:15:10,340 --> 00:15:15,170
it's pretty much work you can handle on

00:15:11,930 --> 00:15:17,150
one desk and not to mention the fact

00:15:15,170 --> 00:15:19,460
that you're now coordinating a lot more

00:15:17,150 --> 00:15:22,070
because there's no way you can do

00:15:19,460 --> 00:15:23,930
anything like like coordinating print

00:15:22,070 --> 00:15:25,700
halves or LEDs and well Ed of these is

00:15:23,930 --> 00:15:26,810
actually doable because you can visually

00:15:25,700 --> 00:15:29,170
see if they're synchronized and do

00:15:26,810 --> 00:15:31,910
things like that but it's getting harder

00:15:29,170 --> 00:15:34,520
so you need to have automated tools to

00:15:31,910 --> 00:15:37,850
deal with this that's only at this stage

00:15:34,520 --> 00:15:40,970
you're kind of up at that level and now

00:15:37,850 --> 00:15:42,830
adding another five into this you're out

00:15:40,970 --> 00:15:43,500
of space in your desk so you need to

00:15:42,830 --> 00:15:46,440
have

00:15:43,500 --> 00:15:48,210
like a bookshelf something larger to

00:15:46,440 --> 00:15:49,560
just to physically work with us so

00:15:48,210 --> 00:15:51,540
that's actually a challenge that's the

00:15:49,560 --> 00:15:54,450
physical working with us the physically

00:15:51,540 --> 00:15:55,800
active working with this and not to

00:15:54,450 --> 00:15:57,630
mention the fact that now you're

00:15:55,800 --> 00:15:59,820
starting to get into problems with like

00:15:57,630 --> 00:16:01,980
if you have 10% failure rates of things

00:15:59,820 --> 00:16:05,880
well you're starting to actually see

00:16:01,980 --> 00:16:07,620
this happening every time so complexity

00:16:05,880 --> 00:16:10,740
just increases that every step of the

00:16:07,620 --> 00:16:13,830
way and if you're up to 100 now it's

00:16:10,740 --> 00:16:15,630
it's really hard to to like physically

00:16:13,830 --> 00:16:19,080
work with this if you're the first step

00:16:15,630 --> 00:16:21,780
is just unpacking in and putting these

00:16:19,080 --> 00:16:24,270
out and some kind of test bed that takes

00:16:21,780 --> 00:16:26,760
time if you're going to physically

00:16:24,270 --> 00:16:29,520
reprogram these with a cable that takes

00:16:26,760 --> 00:16:30,840
time as well plus the fact that now one

00:16:29,520 --> 00:16:34,140
percent failure rate happens all the

00:16:30,840 --> 00:16:35,610
time and the coordination and the

00:16:34,140 --> 00:16:37,680
congestion and networks and everything

00:16:35,610 --> 00:16:40,110
that could go wrong starts to go wrong

00:16:37,680 --> 00:16:42,390
so it's actually quite challenging to be

00:16:40,110 --> 00:16:45,870
app at this stage with a hundred devices

00:16:42,390 --> 00:16:48,060
adding more surprisingly enough doesn't

00:16:45,870 --> 00:16:50,700
do much more of a problem here because

00:16:48,060 --> 00:16:53,310
you're kind of up at that that maxed out

00:16:50,700 --> 00:16:56,130
the problem said 100 devices it's so

00:16:53,310 --> 00:16:57,690
hard to work with and the in the same

00:16:56,130 --> 00:16:59,940
way as you've been doing up here that

00:16:57,690 --> 00:17:02,700
you've had had to change the way that

00:16:59,940 --> 00:17:04,230
you work anyway and adding more will not

00:17:02,700 --> 00:17:05,820
actually change that as much that would

00:17:04,230 --> 00:17:07,350
change other things like on the back end

00:17:05,820 --> 00:17:10,530
of the fron tank you had to display this

00:17:07,350 --> 00:17:13,080
in a way now with a hundred devices you

00:17:10,530 --> 00:17:14,460
could have a like a list of lists

00:17:13,080 --> 00:17:15,810
display and see with what's going on

00:17:14,460 --> 00:17:17,970
with a thousand you had really have to

00:17:15,810 --> 00:17:19,740
have some kind of grid on the screen so

00:17:17,970 --> 00:17:22,410
there are other types of challenges that

00:17:19,740 --> 00:17:25,710
that arise when you start to get towards

00:17:22,410 --> 00:17:28,560
here but the the the key takeaway here

00:17:25,710 --> 00:17:33,030
is that it's a kind of exponentially

00:17:28,560 --> 00:17:34,740
adding to each each step so how do you

00:17:33,030 --> 00:17:36,030
how do we deal with this how do we deal

00:17:34,740 --> 00:17:39,210
with the scale when we're doing

00:17:36,030 --> 00:17:42,420
large-scale thousands of node networks

00:17:39,210 --> 00:17:46,080
well the first one is to use simulators

00:17:42,420 --> 00:17:48,420
this is the the really the only way to

00:17:46,080 --> 00:17:49,880
to look into and seeing what's going on

00:17:48,420 --> 00:17:53,400
because if you were doing a simulator

00:17:49,880 --> 00:17:55,340
you actually have a chance to to do

00:17:53,400 --> 00:17:57,270
things like singles tapping you can

00:17:55,340 --> 00:18:00,000
excuse me you can

00:17:57,270 --> 00:18:01,950
look at the detail level what is going

00:18:00,000 --> 00:18:03,840
on at every single point in time because

00:18:01,950 --> 00:18:07,250
you'd control the time of the entire

00:18:03,840 --> 00:18:10,140
network so if you're doing things like

00:18:07,250 --> 00:18:12,060
nodejs level you can easily do tens of

00:18:10,140 --> 00:18:16,290
thousands of nodes but those are not

00:18:12,060 --> 00:18:18,900
that close to the actual hardware

00:18:16,290 --> 00:18:21,300
because you have to rewrite everything

00:18:18,900 --> 00:18:23,010
in JavaScript so we kind of test the

00:18:21,300 --> 00:18:27,570
logic of things but not really the real

00:18:23,010 --> 00:18:30,690
behavior we can do simulation of the sea

00:18:27,570 --> 00:18:32,790
level so we recompile the code into

00:18:30,690 --> 00:18:34,440
native code which we then plug into a

00:18:32,790 --> 00:18:36,930
simulator that can run this at high

00:18:34,440 --> 00:18:38,940
speed and we can around easily run tests

00:18:36,930 --> 00:18:41,220
on thousands of nodes here so we can see

00:18:38,940 --> 00:18:42,900
it the kind of ground behavior the high

00:18:41,220 --> 00:18:45,720
level top-level behavior but we don't

00:18:42,900 --> 00:18:47,640
really look into the details so to look

00:18:45,720 --> 00:18:48,900
into the details which we also need to

00:18:47,640 --> 00:18:50,310
do if we're going to make this super

00:18:48,900 --> 00:18:52,070
low-power make sure everything is

00:18:50,310 --> 00:18:55,440
sleeping because it has to sleep and

00:18:52,070 --> 00:18:56,790
communicate at the same time and the

00:18:55,440 --> 00:18:58,740
sleeping really affects the

00:18:56,790 --> 00:19:00,360
communication so we're going to the

00:18:58,740 --> 00:19:02,340
emulated level which means that we're

00:19:00,360 --> 00:19:03,990
running the actual code thrown zombie

00:19:02,340 --> 00:19:06,630
hardware except we're running it to on

00:19:03,990 --> 00:19:08,370
an emulator and and the simulator the

00:19:06,630 --> 00:19:12,060
network simulator we can do do this with

00:19:08,370 --> 00:19:15,750
hundreds of nodes actually hundred nodes

00:19:12,060 --> 00:19:17,880
is quite tough on a laptop it's about 40

00:19:15,750 --> 00:19:22,350
or 50 or so hundred we can run on a

00:19:17,880 --> 00:19:23,880
cloud back in style server and then we

00:19:22,350 --> 00:19:26,400
had verified this because this is still

00:19:23,880 --> 00:19:28,080
emulated it's just software so we don't

00:19:26,400 --> 00:19:29,880
really know what's going on on the real

00:19:28,080 --> 00:19:32,130
hardware and put it on to the test as a

00:19:29,880 --> 00:19:34,770
real hardware testbed we actually have a

00:19:32,130 --> 00:19:36,900
100 no test bed in our in our in our

00:19:34,770 --> 00:19:39,390
office that lets us do those things

00:19:36,900 --> 00:19:42,900
where we can look at the behavior at

00:19:39,390 --> 00:19:44,370
scale on the real hardware but then we

00:19:42,900 --> 00:19:47,610
also need to do the automated testing

00:19:44,370 --> 00:19:50,310
yeah we as we said talked about just now

00:19:47,610 --> 00:19:52,620
we saw that we need automated testing to

00:19:50,310 --> 00:19:54,540
catch those bugs that we always have so

00:19:52,620 --> 00:19:56,790
we as we do that we run those I think

00:19:54,540 --> 00:19:58,920
we're actually you mentioned I think 20

00:19:56,790 --> 00:20:01,320
hours of time I think we're about 10

00:19:58,920 --> 00:20:04,950
hours of time for some reason this is

00:20:01,320 --> 00:20:06,630
faster I not sure why because we're but

00:20:04,950 --> 00:20:09,360
maybe because those are you're running

00:20:06,630 --> 00:20:10,830
more platforms and stuff we kind of only

00:20:09,360 --> 00:20:12,180
have a few platforms but

00:20:10,830 --> 00:20:13,920
large scale in terms of Noah's and

00:20:12,180 --> 00:20:18,450
network so we just have to deal with

00:20:13,920 --> 00:20:20,760
those things every change everything

00:20:18,450 --> 00:20:22,770
that we do run through all those tests

00:20:20,760 --> 00:20:26,540
and the simulators and the testbed we

00:20:22,770 --> 00:20:29,610
use as well for development so this is

00:20:26,540 --> 00:20:32,610
what the testbed looks like in our

00:20:29,610 --> 00:20:35,580
office we have a few of those Lego guys

00:20:32,610 --> 00:20:38,520
to defend it from I don't know but my

00:20:35,580 --> 00:20:40,290
you never know will hit to you yeah but

00:20:38,520 --> 00:20:42,000
those are and we've equipped them in

00:20:40,290 --> 00:20:43,590
this case with with LEDs so we can you

00:20:42,000 --> 00:20:44,910
see that we were testing street lighting

00:20:43,590 --> 00:20:50,220
in this case we saw the kind of ground

00:20:44,910 --> 00:20:53,580
behavior as street lights this is a view

00:20:50,220 --> 00:20:55,770
of the network created by the notes I

00:20:53,580 --> 00:20:58,800
took this yesterday we're running some

00:20:55,770 --> 00:21:02,040
tests so you see some rearrangements of

00:20:58,800 --> 00:21:05,280
the the multi-hop nature here but kind

00:21:02,040 --> 00:21:07,400
of looks like this and seeing here you

00:21:05,280 --> 00:21:09,330
kind of get a feeling for the the

00:21:07,400 --> 00:21:12,360
complexity if we're going to try and see

00:21:09,330 --> 00:21:16,410
what happens at this specific node there

00:21:12,360 --> 00:21:18,990
are quite a few knows him there to that

00:21:16,410 --> 00:21:21,450
we'll have to deal with here's another

00:21:18,990 --> 00:21:23,790
view when we configure it so we can do

00:21:21,450 --> 00:21:26,850
things I configuring this network to be

00:21:23,790 --> 00:21:27,960
in this case a 100 hop Network so that

00:21:26,850 --> 00:21:31,410
means that we're going to talk about

00:21:27,960 --> 00:21:34,080
hops that means that to to talk to this

00:21:31,410 --> 00:21:37,050
nose up from here there's a network that

00:21:34,080 --> 00:21:39,810
kind of goes around and I think the

00:21:37,050 --> 00:21:42,720
ultimate node is somewhere here no I

00:21:39,810 --> 00:21:45,690
don't know maybe up somewhere it has to

00:21:42,720 --> 00:21:48,570
go through all the other nodes to reach

00:21:45,690 --> 00:21:50,640
that and back now the reason why we do

00:21:48,570 --> 00:21:54,540
this is so that we can test some of the

00:21:50,640 --> 00:21:58,290
extreme cases of a very very long

00:21:54,540 --> 00:22:00,510
network so in this case 100 hops so this

00:21:58,290 --> 00:22:05,310
is another view in this case we're

00:22:00,510 --> 00:22:07,800
actually just pinging the end node and

00:22:05,310 --> 00:22:11,070
we're kind of seeing the the message

00:22:07,800 --> 00:22:15,420
getting forwarded so this was here

00:22:11,070 --> 00:22:18,150
that's the end node so we have a sniffer

00:22:15,420 --> 00:22:20,880
that listens to all the messages in the

00:22:18,150 --> 00:22:25,800
network and we just display it like this

00:22:20,880 --> 00:22:28,250
and here is the same view in the

00:22:25,800 --> 00:22:30,990
simulator so it's a much more regular

00:22:28,250 --> 00:22:33,210
way of looking at it because now we can

00:22:30,990 --> 00:22:34,860
simulate everything but this is again a

00:22:33,210 --> 00:22:36,390
hundred notes we're sending ping

00:22:34,860 --> 00:22:40,380
messages back and forth I'm drawing

00:22:36,390 --> 00:22:42,770
arrows so the question is why are we why

00:22:40,380 --> 00:22:47,220
are we doing this extreme 100 hops

00:22:42,770 --> 00:22:50,130
simulator and the reason is those

00:22:47,220 --> 00:22:51,900
streetlights where we were trying to see

00:22:50,130 --> 00:22:54,690
what would happen if we'd have a kind of

00:22:51,900 --> 00:22:56,910
the degenerate case of extremely long

00:22:54,690 --> 00:22:59,540
straight line network that would just be

00:22:56,910 --> 00:23:03,060
100 Street lehem lights all the way down

00:22:59,540 --> 00:23:06,150
one lonely road with one access point

00:23:03,060 --> 00:23:08,400
again we would be able to do with that

00:23:06,150 --> 00:23:11,970
situation and yeah we were able to do

00:23:08,400 --> 00:23:13,950
that but of course I mean seeing it's in

00:23:11,970 --> 00:23:17,870
the simulator like that is is one thing

00:23:13,950 --> 00:23:22,980
I mean I think that's really cool I mean

00:23:17,870 --> 00:23:24,570
don't we all right it's uh it's a like

00:23:22,980 --> 00:23:28,380
that complexity because we're kind of

00:23:24,570 --> 00:23:33,750
two computer science but haven't we also

00:23:28,380 --> 00:23:38,910
all being wanted to stand and the cross

00:23:33,750 --> 00:23:43,260
roads at night and just turn on and off

00:23:38,910 --> 00:23:46,050
street lights boom boom Tim the

00:23:43,260 --> 00:23:48,140
enchanter kind of Monty Python style or

00:23:46,050 --> 00:23:51,300
it sounds like if Marvel Comics

00:23:48,140 --> 00:23:55,440
streetlight gang good God control

00:23:51,300 --> 00:23:58,650
streetlights superpower and as it turns

00:23:55,440 --> 00:24:02,030
out we got this video from a customer of

00:23:58,650 --> 00:24:02,030
ours doing just that

00:24:03,020 --> 00:24:10,890
so look at this whoo they're actually

00:24:08,700 --> 00:24:13,620
turning off the streetlights they

00:24:10,890 --> 00:24:17,370
standing there his phone turning on him

00:24:13,620 --> 00:24:20,730
off like this so this was a closed off

00:24:17,370 --> 00:24:22,800
road at night it was the University with

00:24:20,730 --> 00:24:25,500
no access there so it was it was safe to

00:24:22,800 --> 00:24:29,910
do this but still it's the kind of a

00:24:25,500 --> 00:24:33,180
cool superpower to have like to be able

00:24:29,910 --> 00:24:33,960
to turn it on and off street lights like

00:24:33,180 --> 00:24:36,179
this

00:24:33,960 --> 00:24:37,740
and this is what it did actually look

00:24:36,179 --> 00:24:40,919
like so this is the this is the

00:24:37,740 --> 00:24:43,200
topological view of this the streetlight

00:24:40,919 --> 00:24:47,760
network we can see that the lines being

00:24:43,200 --> 00:24:48,779
drawn here is is the multi-hop nature of

00:24:47,760 --> 00:24:52,260
this network and we can see that

00:24:48,779 --> 00:24:54,929
sometimes they if there is lots of open

00:24:52,260 --> 00:24:56,340
space they would just go directly to the

00:24:54,929 --> 00:24:59,220
access point there sometimes I'd go

00:24:56,340 --> 00:25:02,220
through other streetlights like this and

00:24:59,220 --> 00:25:05,490
it's really up to how the physical

00:25:02,220 --> 00:25:09,059
configuration of the of the environment

00:25:05,490 --> 00:25:15,779
here and it just adapts to that so this

00:25:09,059 --> 00:25:19,289
was the situation and I think so this is

00:25:15,779 --> 00:25:21,299
in each and every of those lamps there

00:25:19,289 --> 00:25:23,850
is a bit of hardware and a bit of

00:25:21,299 --> 00:25:28,700
software of course and what had happened

00:25:23,850 --> 00:25:32,340
now was that our customer had managed to

00:25:28,700 --> 00:25:33,960
upload a piece of code into those

00:25:32,340 --> 00:25:38,130
hundred street lights that they had and

00:25:33,960 --> 00:25:41,570
this proof-of-concept system that made

00:25:38,130 --> 00:25:44,539
them unable to update the system again

00:25:41,570 --> 00:25:47,789
because they made a critical flaw and

00:25:44,539 --> 00:25:50,270
and one of the critical flaws that was I

00:25:47,789 --> 00:25:54,960
think very difficult to catch and

00:25:50,270 --> 00:25:57,029
simulation so we it was it was it was

00:25:54,960 --> 00:26:00,830
easy enough to make and difficult to

00:25:57,029 --> 00:26:05,340
catch and the problem was this we have a

00:26:00,830 --> 00:26:09,630
flash memory I think eight megabytes or

00:26:05,340 --> 00:26:13,470
so looks like this on each of these

00:26:09,630 --> 00:26:17,669
devices and it is controlled by a pen

00:26:13,470 --> 00:26:21,870
called chip select this one is asserted

00:26:17,669 --> 00:26:24,630
when a when we want to talk to this chip

00:26:21,870 --> 00:26:26,640
otherwise you just pull it I think it's

00:26:24,630 --> 00:26:28,230
actually on the other is going up when

00:26:26,640 --> 00:26:30,299
it's not and down when it's we want to

00:26:28,230 --> 00:26:32,279
talk to it either case we just want to

00:26:30,299 --> 00:26:36,360
tell this JPA I want to talk to you and

00:26:32,279 --> 00:26:38,070
this chip we store the the update for

00:26:36,360 --> 00:26:40,440
the the firmware update process uses

00:26:38,070 --> 00:26:43,770
this external flash to store the the

00:26:40,440 --> 00:26:45,899
firmware image my wallets it's doing the

00:26:43,770 --> 00:26:47,850
upload this is encrypted we have the

00:26:45,899 --> 00:26:50,640
encryption keys and the micro

00:26:47,850 --> 00:26:53,549
shoulder so there are lots of there are

00:26:50,640 --> 00:26:55,380
lots of layers to this and our our

00:26:53,549 --> 00:26:58,049
customer said we something's happened we

00:26:55,380 --> 00:26:59,460
just can't do this anymore just stop

00:26:58,049 --> 00:27:02,309
working we try the update and we have

00:26:59,460 --> 00:27:04,640
only tomorrow we have this important

00:27:02,309 --> 00:27:07,470
demo we need to get this def out there

00:27:04,640 --> 00:27:09,000
and it took us some time just to figure

00:27:07,470 --> 00:27:10,620
this out that it was actually the

00:27:09,000 --> 00:27:15,419
problem was in this one line of code

00:27:10,620 --> 00:27:18,990
where they've inadvertently changed the

00:27:15,419 --> 00:27:21,210
pin configuration of this pin so they've

00:27:18,990 --> 00:27:24,720
done an update that was functional

00:27:21,210 --> 00:27:28,830
except it included a problem that made

00:27:24,720 --> 00:27:30,690
the next update impossible to do so they

00:27:28,830 --> 00:27:33,000
came to us and say is there anything

00:27:30,690 --> 00:27:38,700
that you guys can think of that you can

00:27:33,000 --> 00:27:43,620
do so fortunately we're not just thanks

00:27:38,700 --> 00:27:47,610
query by day but sometimes we're also

00:27:43,620 --> 00:27:51,299
things where by nights we pull out our

00:27:47,610 --> 00:27:56,580
trusty old green neon style screen CRT

00:27:51,299 --> 00:27:58,950
monitor terminals and we get to work and

00:27:56,580 --> 00:28:00,390
we you know we try to figure out how do

00:27:58,950 --> 00:28:03,210
we deal with this problem how do we

00:28:00,390 --> 00:28:05,039
solve the problem of actually getting

00:28:03,210 --> 00:28:06,990
this because this was really way down in

00:28:05,039 --> 00:28:09,120
the boot code of the system before

00:28:06,990 --> 00:28:10,890
anything else so there was no way that

00:28:09,120 --> 00:28:12,539
we could just go in there and affect it

00:28:10,890 --> 00:28:16,140
because it means being when the system

00:28:12,539 --> 00:28:20,789
booted up it just set the wrong pin and

00:28:16,140 --> 00:28:22,650
we were going through our change logs to

00:28:20,789 --> 00:28:24,020
see if there was anything there that we

00:28:22,650 --> 00:28:26,520
could see we're going through the git

00:28:24,020 --> 00:28:29,070
repository so you know is there anything

00:28:26,520 --> 00:28:33,480
that we can see but unfortunately we

00:28:29,070 --> 00:28:34,620
used all those tools well not really all

00:28:33,480 --> 00:28:36,360
of them but most of the tools that we

00:28:34,620 --> 00:28:37,440
just saw so we we had found all the

00:28:36,360 --> 00:28:40,429
problems that we could potentially

00:28:37,440 --> 00:28:43,230
exploit to try to fix this in somehow

00:28:40,429 --> 00:28:46,559
but then finally we found this one thing

00:28:43,230 --> 00:28:49,650
that we had actually given our customer

00:28:46,559 --> 00:28:53,250
in this case a pre-release of the

00:28:49,650 --> 00:28:55,110
software that used an undocumented call

00:28:53,250 --> 00:28:57,659
inside the code that we now had changed

00:28:55,110 --> 00:28:59,010
so now it could take 8-bit values it

00:28:57,659 --> 00:29:01,430
could only take seven bit values before

00:28:59,010 --> 00:29:05,600
and this actually turned out

00:29:01,430 --> 00:29:07,730
both one little tiny stack problem

00:29:05,600 --> 00:29:11,200
inside the code one array was allocated

00:29:07,730 --> 00:29:13,610
on the stack with just way to a little

00:29:11,200 --> 00:29:18,380
memory space compared to what we could

00:29:13,610 --> 00:29:21,200
actually enter into this so we saw this

00:29:18,380 --> 00:29:23,630
out now we can see hey now maybe maybe

00:29:21,200 --> 00:29:25,280
there is a way that we can just exploit

00:29:23,630 --> 00:29:30,800
this maybe there is a way you can create

00:29:25,280 --> 00:29:33,830
a stack smash attack that fixes this we

00:29:30,800 --> 00:29:36,410
were super happy to see this act this

00:29:33,830 --> 00:29:39,740
little array has three bytes there and

00:29:36,410 --> 00:29:42,110
we could actually enter through the

00:29:39,740 --> 00:29:44,300
api's so this was access control but but

00:29:42,110 --> 00:29:48,860
still the api's could allow us to send

00:29:44,300 --> 00:29:50,660
128 bytes actually 120 I think into that

00:29:48,860 --> 00:29:53,810
that with them through the customer code

00:29:50,660 --> 00:29:56,600
get copied into this array this allowed

00:29:53,810 --> 00:29:58,820
us to create a a stack smash attack so

00:29:56,600 --> 00:30:01,310
just a quick rundown of what the stack

00:29:58,820 --> 00:30:05,420
smash attack does normally in a computer

00:30:01,310 --> 00:30:07,370
system you have the stack that keeps you

00:30:05,420 --> 00:30:08,600
in line with how the function calls are

00:30:07,370 --> 00:30:10,640
being made you know you jump here and

00:30:08,600 --> 00:30:12,830
jump there and at this point of the

00:30:10,640 --> 00:30:14,210
stack you store the return address that

00:30:12,830 --> 00:30:15,590
you're going back so when you know that

00:30:14,210 --> 00:30:18,410
you're going to go back you can just

00:30:15,590 --> 00:30:21,470
find that place and you're just kind of

00:30:18,410 --> 00:30:23,510
casually jumps back and when you do a

00:30:21,470 --> 00:30:26,390
stack smash attack what you're doing is

00:30:23,510 --> 00:30:30,200
you're inserting data onto the stack

00:30:26,390 --> 00:30:35,080
that allows you to control the the where

00:30:30,200 --> 00:30:38,210
and the code this now jumps and

00:30:35,080 --> 00:30:39,980
unfortunately this is not always the all

00:30:38,210 --> 00:30:42,380
that's needed to do this but you need to

00:30:39,980 --> 00:30:44,990
have some way of inserting known code

00:30:42,380 --> 00:30:46,880
somewhere else sometimes you can do that

00:30:44,990 --> 00:30:50,360
on the stack we cannot do that here that

00:30:46,880 --> 00:30:53,690
was way too small but we found another

00:30:50,360 --> 00:30:58,070
place where we could insert a piece of

00:30:53,690 --> 00:30:59,420
code that in a Sam I know location we

00:30:58,070 --> 00:31:01,250
had to try it a couple of times to

00:30:59,420 --> 00:31:03,800
actually make it place it in the right

00:31:01,250 --> 00:31:05,080
location and then make the jump like

00:31:03,800 --> 00:31:07,640
this

00:31:05,080 --> 00:31:10,490
we found this injection vector the

00:31:07,640 --> 00:31:12,200
lighting schedule the the piece of code

00:31:10,490 --> 00:31:14,140
that controlled when how and when the

00:31:12,200 --> 00:31:18,160
lamps would turn on and off

00:31:14,140 --> 00:31:22,990
that had a little space that we could

00:31:18,160 --> 00:31:26,770
use 48 bytes that we could insert if we

00:31:22,990 --> 00:31:29,800
can make the the so this is the actual

00:31:26,770 --> 00:31:36,040
code that we did what it did was to

00:31:29,800 --> 00:31:38,530
update this the address or update the

00:31:36,040 --> 00:31:41,910
pin of this chip select configuration so

00:31:38,530 --> 00:31:44,050
now that was stored in the in the RAM

00:31:41,910 --> 00:31:46,390
fortunately this was stored in the RAM

00:31:44,050 --> 00:31:48,760
it was not a hard-coded Causton but we

00:31:46,390 --> 00:31:51,610
found the place in RAM so we could send

00:31:48,760 --> 00:31:55,810
a piece of code that would on a specific

00:31:51,610 --> 00:31:57,760
signal update this to the new pin and

00:31:55,810 --> 00:32:00,880
then do the magic to kind of restore the

00:31:57,760 --> 00:32:02,650
stack to no normal state again and and

00:32:00,880 --> 00:32:04,000
then do this so this is the code that we

00:32:02,650 --> 00:32:09,700
injected the compiled code looks like

00:32:04,000 --> 00:32:12,130
that and the and we were able to place

00:32:09,700 --> 00:32:14,350
that in a specific place in RAM and this

00:32:12,130 --> 00:32:16,330
is the exploit code so typically this is

00:32:14,350 --> 00:32:19,140
kind of how it looks there's a bunch of

00:32:16,330 --> 00:32:21,520
similar bytes when you try to kind of

00:32:19,140 --> 00:32:24,820
make it jump into the code that would

00:32:21,520 --> 00:32:29,770
execute the write the actual injected

00:32:24,820 --> 00:32:31,990
code that you did so step 3 do it for

00:32:29,770 --> 00:32:36,060
each and every one of those 100 street

00:32:31,990 --> 00:32:38,470
lights we were right worthless script

00:32:36,060 --> 00:32:40,240
that would verify the firmware version

00:32:38,470 --> 00:32:42,850
that would actually running the same

00:32:40,240 --> 00:32:45,070
problematic version that was able to be

00:32:42,850 --> 00:32:48,720
a hot patched we connect to this device

00:32:45,070 --> 00:32:52,210
over TLS over this this long network

00:32:48,720 --> 00:32:53,910
because that this to inject this code we

00:32:52,210 --> 00:32:57,670
needed to have an active TLS connection

00:32:53,910 --> 00:33:00,640
we injected the code as a lethal light

00:32:57,670 --> 00:33:04,450
in schedule and to the RAM of the the

00:33:00,640 --> 00:33:08,080
the lamp trigger this the stack buffer

00:33:04,450 --> 00:33:10,900
overflow we sent a specific command wait

00:33:08,080 --> 00:33:13,420
for the device to report back and do

00:33:10,900 --> 00:33:19,210
this again for all and once all of these

00:33:13,420 --> 00:33:22,750
had had a a clean Oh clean the applied

00:33:19,210 --> 00:33:25,750
the hotfix or the stack smash exploit

00:33:22,750 --> 00:33:28,930
which then do be working firmware update

00:33:25,750 --> 00:33:32,700
so we set this to work in the in the

00:33:28,930 --> 00:33:35,680
evening because this tick took some

00:33:32,700 --> 00:33:38,170
about five to ten minutes per device to

00:33:35,680 --> 00:33:39,430
go through this and then we had the the

00:33:38,170 --> 00:33:41,860
update to the working firmware it took

00:33:39,430 --> 00:33:44,200
another two hours to update the entire

00:33:41,860 --> 00:33:50,920
network we just gotta start it and hope

00:33:44,200 --> 00:33:53,350
that things would work and woke up the

00:33:50,920 --> 00:33:57,400
following morning to our freshly

00:33:53,350 --> 00:34:00,070
squeezed stack smashed network of

00:33:57,400 --> 00:34:04,390
hundred streetlights all running the new

00:34:00,070 --> 00:34:06,490
working version of the code we were

00:34:04,390 --> 00:34:08,620
happy our customer is even happier

00:34:06,490 --> 00:34:11,200
because they could now show this to

00:34:08,620 --> 00:34:14,590
their customer that had come to this

00:34:11,200 --> 00:34:34,030
location just to see their their new

00:34:14,590 --> 00:34:46,270
streetlights in action so again the keep

00:34:34,030 --> 00:34:54,610
in mind to see your JavaScript to do

00:34:46,270 --> 00:34:57,040
things like this and that is my the end

00:34:54,610 --> 00:35:00,720
of my talk here I think we have some

00:34:57,040 --> 00:35:07,020
time for a few questions if there are

00:35:00,720 --> 00:35:07,020
before we leave for the end session

00:35:27,920 --> 00:35:34,290
yeah it's very question I think that the

00:35:32,369 --> 00:35:35,570
answer really is that we can't different

00:35:34,290 --> 00:35:40,680
thanks member look at the different

00:35:35,570 --> 00:35:43,859
we're looking for at the large-scale sea

00:35:40,680 --> 00:35:45,869
level we're looking for the logic system

00:35:43,859 --> 00:35:50,790
to make sure that that behaves as it

00:35:45,869 --> 00:35:52,800
should so so things like time you're

00:35:50,790 --> 00:35:54,390
very different but we're going to make

00:35:52,800 --> 00:35:56,670
sure that we can see that the actual

00:35:54,390 --> 00:35:59,099
behaviour is operating correctly whereas

00:35:56,670 --> 00:36:01,710
in the the emulated environment we have

00:35:59,099 --> 00:36:06,060
the tiny craft so we can do things like

00:36:01,710 --> 00:36:08,250
look at the par consumption whereas I

00:36:06,060 --> 00:36:09,869
mean we kind of verify the logic of the

00:36:08,250 --> 00:36:13,710
correctness of the system independent

00:36:09,869 --> 00:36:16,640
logical way and then we can see that the

00:36:13,710 --> 00:36:21,119
correctness of the system and that a

00:36:16,640 --> 00:36:22,650
behavioral way or low-level way so we're

00:36:21,119 --> 00:36:24,930
really looking for different things so

00:36:22,650 --> 00:36:28,320
we don't know don't really have a good

00:36:24,930 --> 00:36:29,839
way to kind of compare the metrics of

00:36:28,320 --> 00:36:32,820
the two because they are different

00:36:29,839 --> 00:36:36,890
functionally different but they're on

00:36:32,820 --> 00:36:36,890
the same code but in different ways

00:36:39,730 --> 00:36:42,570
more questions

00:36:54,010 --> 00:37:02,240
so I saw your beautiful IKEA testbench

00:36:58,220 --> 00:37:03,650
there yeah and so I guess you run your

00:37:02,240 --> 00:37:05,810
things from different power

00:37:03,650 --> 00:37:08,660
yeah different Hardware revisions maybe

00:37:05,810 --> 00:37:12,560
the next revision will have dosa is very

00:37:08,660 --> 00:37:14,660
being switched yeah so hope you test

00:37:12,560 --> 00:37:16,339
this are you like manually testing

00:37:14,660 --> 00:37:18,829
things or you have an automated system

00:37:16,339 --> 00:37:22,270
for this and how we take care of

00:37:18,829 --> 00:37:24,380
different permutations of these artworks

00:37:22,270 --> 00:37:27,200
yeah that's that's great question we

00:37:24,380 --> 00:37:30,160
don't we have to some extent we have an

00:37:27,200 --> 00:37:33,770
automated system for this too we have

00:37:30,160 --> 00:37:36,349
only Hardware time to all the CPU types

00:37:33,770 --> 00:37:40,670
that we ever run we have a setup for

00:37:36,349 --> 00:37:44,660
those for the for the things like pin

00:37:40,670 --> 00:37:49,310
configuration we don't we have to rely

00:37:44,660 --> 00:37:51,740
on like running on the real thing but

00:37:49,310 --> 00:37:54,579
what we added so after this this problem

00:37:51,740 --> 00:37:57,770
we had here for example we did at a

00:37:54,579 --> 00:37:59,150
sanity check at the boot to make sure

00:37:57,770 --> 00:38:01,400
that we could actually access that if

00:37:59,150 --> 00:38:03,290
the flash chip and decode it and if

00:38:01,400 --> 00:38:07,660
we're kidding we just discarded that

00:38:03,290 --> 00:38:12,319
that versatile system that the firmer so

00:38:07,660 --> 00:38:14,329
we kind of evolved the system by putting

00:38:12,319 --> 00:38:16,339
into real work problem since it's hard

00:38:14,329 --> 00:38:18,589
it's hard to before see some of the

00:38:16,339 --> 00:38:20,869
things that could happen so the things

00:38:18,589 --> 00:38:24,470
that we have seen we try to add tests

00:38:20,869 --> 00:38:27,319
for them and we do the testing on kind

00:38:24,470 --> 00:38:30,190
of the CPU style level but not at the

00:38:27,319 --> 00:38:30,190
specific hard

00:38:37,530 --> 00:38:50,680
so they keep the bootloader and CPUs the

00:38:45,840 --> 00:38:54,220
application to different programs in

00:38:50,680 --> 00:38:57,100
case one goes anywhere yeah we do we

00:38:54,220 --> 00:39:00,610
actually keep the we repeat the entire

00:38:57,100 --> 00:39:03,280
system has to run from the CPU flash but

00:39:00,610 --> 00:39:05,290
we have the external flash is much

00:39:03,280 --> 00:39:08,020
larger so they were can store several

00:39:05,290 --> 00:39:09,700
versions and then flick back to if we

00:39:08,020 --> 00:39:12,210
indicate that there's a problem can

00:39:09,700 --> 00:39:17,760
actually flip back into another version

00:39:12,210 --> 00:39:20,230
but those are so a problem like this

00:39:17,760 --> 00:39:22,030
where we don't even have access to the

00:39:20,230 --> 00:39:30,040
flash is really difficult to recover

00:39:22,030 --> 00:39:33,060
from Thanks I just believe you said that

00:39:30,040 --> 00:39:33,060
you are using cortex

00:39:41,369 --> 00:39:47,220
yeah that is right on the back end so

00:39:44,410 --> 00:39:47,220
that's

00:39:48,770 --> 00:39:52,220
quite a challenge though it might be

00:39:50,570 --> 00:40:02,950
possible to get something close the OJS

00:39:52,220 --> 00:40:02,950
running on sixty good quite not good

00:40:13,430 --> 00:40:21,590
yeah you mentioned that regular and what

00:40:16,250 --> 00:40:24,650
kind of mashup actually is yeah it's a

00:40:21,590 --> 00:40:27,080
we use I mean it's our system but it's

00:40:24,650 --> 00:40:29,600
like to be sex meshing with the front of

00:40:27,080 --> 00:40:33,350
all goes ripple the mesh routing

00:40:29,600 --> 00:40:35,900
protocol it's an eye test at our back

00:40:33,350 --> 00:40:38,650
and we developed it we were part of the

00:40:35,900 --> 00:40:42,530
development back some 1250 years back

00:40:38,650 --> 00:40:45,100
but exhibit it's not ecstatic sound

00:40:42,530 --> 00:40:45,100
incredible

00:40:58,910 --> 00:41:01,910
yeah

00:41:01,970 --> 00:41:07,780
[Applause]

00:41:13,700 --> 00:41:15,760

YouTube URL: https://www.youtube.com/watch?v=Fy5U1w62Y9Q


