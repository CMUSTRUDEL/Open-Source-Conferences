Title: Knock knock, who's there? Authenticating your single page apps using JSON Web Tokens - Sam Bellen
Publication date: 2019-04-17
Playlist: foss-north 2019
Description: 
	When it comes to writing code, thereâ€™s nothing we take more serious than authentication and security. Modern single page applications bring along new challenges. By using solutions like the OpenID Connect protocol and JSON Web Tokens we can improve the user experience when authenticating with your apps, providing a seamless authentication process.
In this talk I will try to explain in depth, the way JSON Web Tokens work and can be used to secure your single page apps. I will explain the difference between using opaque tokens and JWTs. The talks will also give an overview of a modern authentication flow and a step by step breakdown of how it works exactly. No specific previous knowledge is required, but it helps the audience has some experience with authenticating users.
I'm Google Developer Expert who works as a Developer Evangelist at Auth0. At Auth0 we're trying to make authentication and identification as easy as possible, while still keeping it secure.

---

After office hours I like to play around with the web-audio API, and other "exotic" browser API's. One of my side projects is a library to add audio effects to an audio input using JavaScript.
When I'm not behind a computer, you can me find playing the guitar, having a beer at a concert, or trying to snap the next perfect picture.

https://foss-north.se/2019/speakers-and-talks.html#sbellen
Captions: 
	00:00:15,820 --> 00:00:20,860
thank you very much today I want to be

00:00:18,400 --> 00:00:22,330
talking about JSON web tokens does

00:00:20,860 --> 00:00:25,380
anybody if you already have some

00:00:22,330 --> 00:00:28,390
experience with JSON web tokens at all

00:00:25,380 --> 00:00:30,220
yes all right

00:00:28,390 --> 00:00:31,900
is it so confusing I hope that by the

00:00:30,220 --> 00:00:33,520
end of this talk you'll be it'll be a

00:00:31,900 --> 00:00:35,530
bit more clear to us we'll talk after

00:00:33,520 --> 00:00:37,150
the talk as well so let me quickly

00:00:35,530 --> 00:00:38,949
introduce myself my name is Sam bellum

00:00:37,150 --> 00:00:41,680
I'm from Belgium but from scalp with

00:00:38,949 --> 00:00:43,960
Makia Johan told me I'm a developer

00:00:41,680 --> 00:00:45,340
invented I set off the zero and in case

00:00:43,960 --> 00:00:47,320
you've never made of office here over an

00:00:45,340 --> 00:00:48,850
identity is a service provider which

00:00:47,320 --> 00:00:50,769
means that we try to make it as easy as

00:00:48,850 --> 00:00:52,629
possible for developers all of you

00:00:50,769 --> 00:00:55,059
probably to integrate the secure

00:00:52,629 --> 00:00:56,229
application flow into your apps and so

00:00:55,059 --> 00:00:58,449
you don't have to worry about that you

00:00:56,229 --> 00:01:00,220
can focus on your product I'm also a

00:00:58,449 --> 00:01:02,979
Google developer experts I regret a few

00:01:00,220 --> 00:01:04,540
meetups on a Belgian on a London and you

00:01:02,979 --> 00:01:08,590
can find me on the Internet is up some

00:01:04,540 --> 00:01:10,210
mail so most important slides I've got

00:01:08,590 --> 00:01:12,159
stickers if you want to get sticker

00:01:10,210 --> 00:01:13,990
tweet me picture of a cat or a dog or an

00:01:12,159 --> 00:01:16,470
animal I'll give you some stickers after

00:01:13,990 --> 00:01:18,970
this talk who wants it get sticker I

00:01:16,470 --> 00:01:23,170
want to see all the hats but most of is

00:01:18,970 --> 00:01:25,090
okay alright so why am i why am i this

00:01:23,170 --> 00:01:27,100
conference since I told you that I work

00:01:25,090 --> 00:01:28,510
for a as a service company which means

00:01:27,100 --> 00:01:31,480
that we want to make money with our

00:01:28,510 --> 00:01:33,430
service well basically you don't open

00:01:31,480 --> 00:01:35,590
sources at all to zero we use a lot of

00:01:33,430 --> 00:01:38,080
open source packages and we create a lot

00:01:35,590 --> 00:01:40,630
of open source packages they even have a

00:01:38,080 --> 00:01:42,400
special plan for open source projects if

00:01:40,630 --> 00:01:44,230
you need some authentication in your

00:01:42,400 --> 00:01:46,180
project and your openness source and

00:01:44,230 --> 00:01:48,820
you're free you can get a limited free

00:01:46,180 --> 00:01:50,590
plan and unlimited free plan from us we

00:01:48,820 --> 00:01:52,420
also have an open source portal on our

00:01:50,590 --> 00:01:55,740
website which lists all of the open

00:01:52,420 --> 00:02:00,490
source projects Heather can find it here

00:01:55,740 --> 00:02:02,290
and we joined tank top office last year

00:02:00,490 --> 00:02:04,600
which means that if you pull requests to

00:02:02,290 --> 00:02:05,870
log zero repository we send you some

00:02:04,600 --> 00:02:08,960
extra swag like stickers

00:02:05,870 --> 00:02:12,280
t-shirt most of our repositories around

00:02:08,960 --> 00:02:15,800
github to the bottom and a five of them

00:02:12,280 --> 00:02:18,320
like between forks and together we have

00:02:15,800 --> 00:02:20,300
25,000 stars so this means that we are

00:02:18,320 --> 00:02:21,800
really invested in doing open-source and

00:02:20,300 --> 00:02:25,880
we tried to share as much as much of our

00:02:21,800 --> 00:02:28,100
packages as possible and eight to ten of

00:02:25,880 --> 00:02:29,390
those are JSON web token related and

00:02:28,100 --> 00:02:33,260
today I want to be talking about JSON

00:02:29,390 --> 00:02:34,430
web tokens so let's get started welcome

00:02:33,260 --> 00:02:36,470
to see a bit but traditional

00:02:34,430 --> 00:02:38,180
authentication then I'm going to try to

00:02:36,470 --> 00:02:39,890
explain what adjacent up token is

00:02:38,180 --> 00:02:43,160
because it's confusing to some people

00:02:39,890 --> 00:02:45,110
and by reason and we're going to see

00:02:43,160 --> 00:02:47,870
like how in token based authentication

00:02:45,110 --> 00:02:48,650
works so traditional authentication what

00:02:47,870 --> 00:02:51,230
do I mean with traditional

00:02:48,650 --> 00:02:53,480
authentication it basically is a user

00:02:51,230 --> 00:02:54,980
cause your website and it's requests a

00:02:53,480 --> 00:02:57,170
page your server does all the heavy

00:02:54,980 --> 00:02:59,150
lifting it generates that page sends it

00:02:57,170 --> 00:03:01,640
back to the browser and the user can see

00:02:59,150 --> 00:03:03,590
the page but if that page is protected

00:03:01,640 --> 00:03:05,690
these will have to do some logging in or

00:03:03,590 --> 00:03:07,400
send his email or username and password

00:03:05,690 --> 00:03:09,320
who said the to the book through the

00:03:07,400 --> 00:03:11,959
browser to the server if they check out

00:03:09,320 --> 00:03:13,700
the server sends back the page I told

00:03:11,959 --> 00:03:15,800
always said like the page it also sent

00:03:13,700 --> 00:03:17,360
the session cookie because you don't

00:03:15,800 --> 00:03:20,030
want to log in every time you request a

00:03:17,360 --> 00:03:21,590
protected page so the next time you want

00:03:20,030 --> 00:03:23,600
to access one of the protected pages

00:03:21,590 --> 00:03:26,180
they send along the session cookie if

00:03:23,600 --> 00:03:28,280
it's a valid session cookie or if if

00:03:26,180 --> 00:03:30,200
this session the cookies fell it you

00:03:28,280 --> 00:03:32,570
just get your page that's how it used to

00:03:30,200 --> 00:03:36,260
be done for a long time but it's still

00:03:32,570 --> 00:03:37,910
being done nothing wrong with this but

00:03:36,260 --> 00:03:39,800
if you're working on a single page

00:03:37,910 --> 00:03:41,720
application which is mainly written in

00:03:39,800 --> 00:03:45,020
JavaScript in from death you might want

00:03:41,720 --> 00:03:46,580
to run into some problems so forth

00:03:45,020 --> 00:03:48,350
first thing is a traditional

00:03:46,580 --> 00:03:51,320
architecture is mainly just

00:03:48,350 --> 00:03:53,239
browser ask your server for stuff so we

00:03:51,320 --> 00:03:55,670
sent it in a browser all the logic is

00:03:53,239 --> 00:03:57,950
hammered or server in a single page

00:03:55,670 --> 00:04:00,500
application you might have something

00:03:57,950 --> 00:04:02,090
like this your application in the front

00:04:00,500 --> 00:04:03,530
end there's all the heavy lifting as a

00:04:02,090 --> 00:04:06,800
lot of lodging in it and it just gets

00:04:03,530 --> 00:04:08,959
some data from api's like your main API

00:04:06,800 --> 00:04:12,709
like user in behind like a payments API

00:04:08,959 --> 00:04:15,799
I'll have you you can also have

00:04:12,709 --> 00:04:18,269
something like this a mobile app a web

00:04:15,799 --> 00:04:19,829
app it has Tibet and the only two and

00:04:18,269 --> 00:04:22,620
access to the same data so they all

00:04:19,829 --> 00:04:25,259
communicate to that one API or the

00:04:22,620 --> 00:04:27,629
multiple API yeah but the web is it only

00:04:25,259 --> 00:04:29,550
API or is the only medium that uses

00:04:27,629 --> 00:04:32,190
cookies because what will happen use

00:04:29,550 --> 00:04:34,319
cookies there's a belt of use cookies on

00:04:32,190 --> 00:04:36,569
in the mobile web so it'll be nice if we

00:04:34,319 --> 00:04:38,909
have a way which is unified across all

00:04:36,569 --> 00:04:40,590
different kinds of apps to access that

00:04:38,909 --> 00:04:42,840
data and to prove that we are

00:04:40,590 --> 00:04:46,409
authenticated we were allowed to access

00:04:42,840 --> 00:04:47,699
that data so what are some of the

00:04:46,409 --> 00:04:50,970
problems with traditional cookie based

00:04:47,699 --> 00:04:54,569
approach cookies don't like course who

00:04:50,970 --> 00:04:57,300
likes course nice this usually small

00:04:54,569 --> 00:04:58,710
people personal Ruby says I don't but I

00:04:57,300 --> 00:05:02,580
know they're lying is nobody likes

00:04:58,710 --> 00:05:04,680
course cookies require state because you

00:05:02,580 --> 00:05:06,840
need to give the list of valid sessions

00:05:04,680 --> 00:05:09,389
you need to check your session in that

00:05:06,840 --> 00:05:11,669
cookie every time is being used if it's

00:05:09,389 --> 00:05:14,069
still valid in a database or something

00:05:11,669 --> 00:05:16,500
someplace where you keep the state and

00:05:14,069 --> 00:05:18,419
cookies on flow you cannot pass a cookie

00:05:16,500 --> 00:05:20,219
generated by a certain domain a circuit

00:05:18,419 --> 00:05:22,289
server to another one some of these

00:05:20,219 --> 00:05:24,690
session cookies are just for this one

00:05:22,289 --> 00:05:26,969
server it is one API only and if you

00:05:24,690 --> 00:05:28,889
have a multi server a marker services

00:05:26,969 --> 00:05:33,060
architecture this doesn't really work

00:05:28,889 --> 00:05:35,310
that well for example if your main API

00:05:33,060 --> 00:05:36,889
needs some data from your user API it

00:05:35,310 --> 00:05:39,719
cannot just send this session cookie

00:05:36,889 --> 00:05:41,250
with this session ID from that one

00:05:39,719 --> 00:05:44,090
server to the other doesn't really work

00:05:41,250 --> 00:05:48,440
like that so what's a solution

00:05:44,090 --> 00:05:52,979
token-based authentication maybe I hope

00:05:48,440 --> 00:05:54,710
but let's first see what a token is to

00:05:52,979 --> 00:05:57,360
me a token is a unique identifier

00:05:54,710 --> 00:05:59,389
representing something it's just

00:05:57,360 --> 00:06:02,279
something that you can use to identify

00:05:59,389 --> 00:06:04,139
that's either you're a user but just

00:06:02,279 --> 00:06:06,810
access to something whatever you want it

00:06:04,139 --> 00:06:08,969
to be to meet that's a token there's a

00:06:06,810 --> 00:06:10,650
bunch of different kinds of tokens and

00:06:08,969 --> 00:06:14,240
that's a stokin I think we've all heard

00:06:10,650 --> 00:06:17,639
of access tokens before who has it

00:06:14,240 --> 00:06:21,300
okay we have an ID token we sort of an

00:06:17,639 --> 00:06:24,840
ID token before a few okay refresh

00:06:21,300 --> 00:06:27,240
tokens same question some of you all

00:06:24,840 --> 00:06:28,150
right there's a bunch of different craft

00:06:27,240 --> 00:06:29,320
always but

00:06:28,150 --> 00:06:31,690
three of the most common ones and

00:06:29,320 --> 00:06:33,970
they're often open up extra in the form

00:06:31,690 --> 00:06:35,680
of a user ID which means that they only

00:06:33,970 --> 00:06:38,410
meet something if you can measure that

00:06:35,680 --> 00:06:41,170
user ID to a permission to a user to

00:06:38,410 --> 00:06:42,880
something but does it have to be the

00:06:41,170 --> 00:06:44,680
girl should be XML for example if you

00:06:42,880 --> 00:06:46,510
use a summer protocol that you have an

00:06:44,680 --> 00:06:48,760
excel file object and it could pay some

00:06:46,510 --> 00:06:51,010
information and it can serve as a token

00:06:48,760 --> 00:06:54,520
but some was a bit old

00:06:51,010 --> 00:06:57,160
we don't use XML as often as we did it

00:06:54,520 --> 00:07:02,200
back in the days so we are going to look

00:06:57,160 --> 00:07:03,400
at JSON web tokens at all 0 when you say

00:07:02,200 --> 00:07:07,930
smoke pet dog is as much as possible

00:07:03,400 --> 00:07:10,300
simply because we love so this is Jason

00:07:07,930 --> 00:07:11,980
app token and as you can see from the

00:07:10,300 --> 00:07:14,140
different colors it's three parts of

00:07:11,980 --> 00:07:16,860
JSON web token who's ever notice that a

00:07:14,140 --> 00:07:19,630
JSON web token has three different parts

00:07:16,860 --> 00:07:23,950
okay that's nice I can teach you snake

00:07:19,630 --> 00:07:25,390
or 203 so here the first part in red the

00:07:23,950 --> 00:07:27,100
second one the middle one the biggest

00:07:25,390 --> 00:07:29,710
one in purple and then at the bottom

00:07:27,100 --> 00:07:33,000
there's a blue part and that starts with

00:07:29,710 --> 00:07:35,710
the first part it's called the Heather

00:07:33,000 --> 00:07:37,390
and it contains some metadata some

00:07:35,710 --> 00:07:39,490
information about your JSON web token

00:07:37,390 --> 00:07:41,980
which algorithm is use decided which

00:07:39,490 --> 00:07:44,170
we'll see later and what it is it's a

00:07:41,980 --> 00:07:47,190
JSON web token the type is JSON web

00:07:44,170 --> 00:07:51,730
token this information can be used to

00:07:47,190 --> 00:07:53,950
automate identify what it is and to to

00:07:51,730 --> 00:07:57,280
know which algorithm you need to use

00:07:53,950 --> 00:07:58,870
later to verify or sign the token the

00:07:57,280 --> 00:08:01,780
second part is a payload it's the

00:07:58,870 --> 00:08:03,700
biggest part and it's basically just a

00:08:01,780 --> 00:08:05,590
basic C form of a JSON object but a bit

00:08:03,700 --> 00:08:07,720
some data that's useful to you the

00:08:05,590 --> 00:08:10,540
subject most of the time it that's your

00:08:07,720 --> 00:08:13,300
user your given name your family name

00:08:10,540 --> 00:08:15,070
your user name when it's issued and we

00:08:13,300 --> 00:08:16,990
just expired and this is something

00:08:15,070 --> 00:08:19,590
that's really important to know I chase

00:08:16,990 --> 00:08:21,970
a laptop you can know when it expires

00:08:19,590 --> 00:08:23,740
that's really useful so you don't have

00:08:21,970 --> 00:08:25,420
to look up if it's still valid or not it

00:08:23,740 --> 00:08:28,870
is a laptop and should contain all the

00:08:25,420 --> 00:08:33,340
information and if it's still valid or

00:08:28,870 --> 00:08:35,020
not and I can spy with it there's a

00:08:33,340 --> 00:08:36,700
bunch of different claims you can put in

00:08:35,020 --> 00:08:37,760
the payload and claim as a key value

00:08:36,700 --> 00:08:39,650
pair

00:08:37,760 --> 00:08:42,290
honest reserved claims and these are

00:08:39,650 --> 00:08:44,270
just all of the keys key value pairs

00:08:42,290 --> 00:08:47,060
that are specified in each estimate or

00:08:44,270 --> 00:08:48,380
spec like a subject issuer issue that

00:08:47,060 --> 00:08:50,150
date and expiry date

00:08:48,380 --> 00:08:52,490
there's a bunch more but these are the

00:08:50,150 --> 00:08:54,500
most important ones then we have a

00:08:52,490 --> 00:08:56,810
public claim and these are also claims

00:08:54,500 --> 00:08:59,240
that are standardized in some way not by

00:08:56,810 --> 00:09:04,550
the spec but by Ayane

00:08:59,240 --> 00:09:07,340
and aya has a list of of claims he can

00:09:04,550 --> 00:09:09,110
use just for API probability that if she

00:09:07,340 --> 00:09:11,840
consumed the API for one comes from one

00:09:09,110 --> 00:09:14,660
company and from another these claims

00:09:11,840 --> 00:09:16,790
should be say like given a family name

00:09:14,660 --> 00:09:22,670
preferred username instead of first name

00:09:16,790 --> 00:09:25,160
last name and username for example and

00:09:22,670 --> 00:09:27,410
the third one is private claims and is

00:09:25,160 --> 00:09:29,410
basically a novella chasing you think is

00:09:27,410 --> 00:09:32,390
interesting to put the son of this token

00:09:29,410 --> 00:09:34,100
it's important to remember that this is

00:09:32,390 --> 00:09:35,810
just a basic Sephora code adjacent

00:09:34,100 --> 00:09:38,120
object so don't put anything safe a

00:09:35,810 --> 00:09:42,170
sensitive in this system everybody kept

00:09:38,120 --> 00:09:43,850
just decoded base64 so don't put credit

00:09:42,170 --> 00:09:46,640
card numbers or anything like this in

00:09:43,850 --> 00:09:49,490
your toga the last part is your

00:09:46,640 --> 00:09:51,710
signature and basically you take a

00:09:49,490 --> 00:09:53,690
signing function pass along the basic

00:09:51,710 --> 00:09:56,090
support of your header of your payload

00:09:53,690 --> 00:09:58,720
and some secrets in case of this

00:09:56,090 --> 00:10:01,070
algorithm and you get a signature

00:09:58,720 --> 00:10:03,620
this means a JSON web tokens can be

00:10:01,070 --> 00:10:05,660
verified since this signature is based

00:10:03,620 --> 00:10:06,830
upon your header and your payload should

00:10:05,660 --> 00:10:08,900
you change something in your payload

00:10:06,830 --> 00:10:09,980
your signature will be different so if

00:10:08,900 --> 00:10:11,600
it doesn't match up with what you're

00:10:09,980 --> 00:10:12,500
expecting it to be you know what it is

00:10:11,600 --> 00:10:14,120
to be tampered with

00:10:12,500 --> 00:10:16,040
you know that it's not fellow anymore

00:10:14,120 --> 00:10:18,020
but as long as everything is okay inside

00:10:16,040 --> 00:10:24,080
your bed of and Heather you can verify

00:10:18,020 --> 00:10:26,090
that it's okay instead of an easy to use

00:10:24,080 --> 00:10:31,310
secret is often something seemingly

00:10:26,090 --> 00:10:33,800
random so if you look at some access

00:10:31,310 --> 00:10:35,600
token as a JSON up token it looks like

00:10:33,800 --> 00:10:37,130
this or it can look like this and it

00:10:35,600 --> 00:10:40,970
made it contain some information about

00:10:37,130 --> 00:10:43,220
the exes management or rights of an API

00:10:40,970 --> 00:10:44,649
it contains when it's expired but also

00:10:43,220 --> 00:10:46,629
who it's for what

00:10:44,649 --> 00:10:49,959
like this who is issued this and which

00:10:46,629 --> 00:10:53,170
scopes that this user has if you take

00:10:49,959 --> 00:10:55,029
him and he token it contains some more

00:10:53,170 --> 00:10:57,639
information about the identity of the

00:10:55,029 --> 00:11:00,730
person that was issued this token like a

00:10:57,639 --> 00:11:02,949
snake name is his real name a picture

00:11:00,730 --> 00:11:04,689
just avatar so when the user logs in and

00:11:02,949 --> 00:11:06,339
you receive this token you don't need to

00:11:04,689 --> 00:11:11,319
do an extra quest to show his basic

00:11:06,339 --> 00:11:12,879
information on your website now the

00:11:11,319 --> 00:11:14,829
previous examples of a signature we'll

00:11:12,879 --> 00:11:16,360
use with a symmetrical algorithm there's

00:11:14,829 --> 00:11:20,619
also a bunch of a thematic elaborate

00:11:16,360 --> 00:11:22,240
algorithms to design targets once here

00:11:20,619 --> 00:11:26,379
in black I'm not going to try to

00:11:22,240 --> 00:11:27,970
pronounce the biggest city difficult but

00:11:26,379 --> 00:11:29,439
yeah debate the main thing about

00:11:27,970 --> 00:11:31,509
symmetrical algorithms is that they

00:11:29,439 --> 00:11:33,279
don't use a secret but he was a private

00:11:31,509 --> 00:11:34,990
key and a public key the private key is

00:11:33,279 --> 00:11:37,660
used to sign them and the public key is

00:11:34,990 --> 00:11:39,100
used to verify them so you can pass

00:11:37,660 --> 00:11:40,959
along this public key so everybody you

00:11:39,100 --> 00:11:43,389
want to know who needs to know that the

00:11:40,959 --> 00:11:46,749
public key and it doesn't hurt because

00:11:43,389 --> 00:11:48,429
they cannot sign a token with a public

00:11:46,749 --> 00:11:52,959
key they need the private key and

00:11:48,429 --> 00:11:56,199
they're often shared as a change w k HS

00:11:52,959 --> 00:11:58,300
web key which looks a bit like this it's

00:11:56,199 --> 00:12:00,939
some information about your public key

00:11:58,300 --> 00:12:02,980
but by using this jwk this json web key

00:12:00,939 --> 00:12:08,259
you can verify that the signature is

00:12:02,980 --> 00:12:11,769
felt so if you're using the open idea

00:12:08,259 --> 00:12:14,860
Connect protocol there is this API

00:12:11,769 --> 00:12:19,149
endpoint defined which contains all of

00:12:14,860 --> 00:12:21,279
information about your open ID let's see

00:12:19,149 --> 00:12:25,059
and is this one and one of the parts of

00:12:21,279 --> 00:12:26,559
information that it's it's specifies is

00:12:25,059 --> 00:12:29,949
where to find each other will you keep

00:12:26,559 --> 00:12:36,129
the chaser map key to verify tokens and

00:12:29,949 --> 00:12:38,259
my case is my tribute aw key it's good

00:12:36,129 --> 00:12:40,389
to know so it's often a thought

00:12:38,259 --> 00:12:42,069
well-known slash check the wiki not

00:12:40,389 --> 00:12:46,480
Jason if you ever need to verify this

00:12:42,069 --> 00:12:48,910
murky web token made by somebody else so

00:12:46,480 --> 00:12:51,369
let's make a little comparison this is a

00:12:48,910 --> 00:12:55,460
part of the kingdom of Belgium and four

00:12:51,369 --> 00:12:57,440
languages because yeah why not and then

00:12:55,460 --> 00:13:00,080
contains the fact that it's a passport

00:12:57,440 --> 00:13:02,510
from kingdom of Belgium and that's about

00:13:00,080 --> 00:13:04,220
it Samara Dana what it is the Heather of

00:13:02,510 --> 00:13:06,020
a JSON web token as far as the same

00:13:04,220 --> 00:13:08,660
contains the fact that it's adjacent map

00:13:06,020 --> 00:13:11,480
token and and which algorithm is used

00:13:08,660 --> 00:13:13,910
he opened the passport that contains

00:13:11,480 --> 00:13:15,740
some information about myself my name my

00:13:13,910 --> 00:13:18,050
last name my nationality when I went

00:13:15,740 --> 00:13:22,160
last one expires and he can board us

00:13:18,050 --> 00:13:23,720
good it's more or less the same as a

00:13:22,160 --> 00:13:26,300
payload of your JSON web token it

00:13:23,720 --> 00:13:28,310
contains some more information and then

00:13:26,300 --> 00:13:30,490
your signature it can verify that your

00:13:28,310 --> 00:13:33,140
passport cell it's often some secret

00:13:30,490 --> 00:13:38,209
ultraviolet lights Holograms and stuff

00:13:33,140 --> 00:13:43,279
or your nature it is not local so let's

00:13:38,209 --> 00:13:46,010
see the Nexen i have this app right here

00:13:43,279 --> 00:13:49,250
which is really useful you can show me

00:13:46,010 --> 00:13:53,390
pictures of dogs and they're just free

00:13:49,250 --> 00:13:56,300
to do you can just see the onto that log

00:13:53,390 --> 00:13:59,270
again but if you want to see cats cancer

00:13:56,300 --> 00:14:01,700
a bit more tricky let's say you need to

00:13:59,270 --> 00:14:02,240
log in first and I just broke it so let

00:14:01,700 --> 00:14:04,279
me try again

00:14:02,240 --> 00:14:06,170
so if I click on the button again the

00:14:04,279 --> 00:14:09,830
warning oops you need to be authorized

00:14:06,170 --> 00:14:13,430
for this so I need to log in I go

00:14:09,830 --> 00:14:15,620
throughout zero for convenience okay

00:14:13,430 --> 00:14:17,630
Matt Gogel and once I log I'm logged in

00:14:15,620 --> 00:14:19,760
you will see that I magically have my

00:14:17,630 --> 00:14:21,800
username and my picture on top which I

00:14:19,760 --> 00:14:23,870
get from my I need token but I also have

00:14:21,800 --> 00:14:28,220
an access token which I can use to get

00:14:23,870 --> 00:14:29,839
cats this my cat by the way so if you

00:14:28,220 --> 00:14:33,200
have a simple app like this you have a

00:14:29,839 --> 00:14:35,720
simple API you have an end points to get

00:14:33,200 --> 00:14:37,670
dog pictures and you'll see that I get a

00:14:35,720 --> 00:14:40,940
new picture at the bottom you will have

00:14:37,670 --> 00:14:42,589
an end point against cat pictures but it

00:14:40,940 --> 00:14:46,790
tells me no other means of authorization

00:14:42,589 --> 00:14:48,890
token asam's so I will get a new token

00:14:46,790 --> 00:14:53,870
with this nice username and password

00:14:48,890 --> 00:14:57,620
combination and if I copy this and pass

00:14:53,870 --> 00:14:59,990
it along as a bearer token you will see

00:14:57,620 --> 00:15:01,820
that I can get some cats images so I

00:14:59,990 --> 00:15:02,420
basically just a kiss access token it's

00:15:01,820 --> 00:15:05,300
Jason

00:15:02,420 --> 00:15:12,139
in this case and passes along as the

00:15:05,300 --> 00:15:13,519
bearer token for this endpoint if you

00:15:12,139 --> 00:15:15,800
want to know more J purchase a laptop

00:15:13,519 --> 00:15:17,899
business charity that I own it's created

00:15:15,800 --> 00:15:21,290
and maintained by us at our zero means M

00:15:17,899 --> 00:15:24,470
B in particular so it contains all the

00:15:21,290 --> 00:15:26,540
difference and useful information about

00:15:24,470 --> 00:15:28,010
JSON web tokens it also contains a

00:15:26,540 --> 00:15:29,839
debugger where you can paste your JSON

00:15:28,010 --> 00:15:31,430
web tokens or create new ones

00:15:29,839 --> 00:15:33,079
we don't store this stuff it's anywhere

00:15:31,430 --> 00:15:36,920
on a server they're completely safe and

00:15:33,079 --> 00:15:38,389
tickets it's all been done in a browser

00:15:36,920 --> 00:15:39,740
so you don't have to be afraid to pay

00:15:38,389 --> 00:15:42,519
something in there

00:15:39,740 --> 00:15:45,529
and it also contains the whole list of

00:15:42,519 --> 00:15:47,360
libraries in a whole range of languages

00:15:45,529 --> 00:15:49,970
if you want use JSON web tokens on the

00:15:47,360 --> 00:15:51,920
web or in your project thus chances are

00:15:49,970 --> 00:15:56,420
there's a library in this list open

00:15:51,920 --> 00:15:58,370
source which you can use genuine T

00:15:56,420 --> 00:16:00,500
itself the web site is also open source

00:15:58,370 --> 00:16:02,029
and it's on github so if you feel that

00:16:00,500 --> 00:16:02,449
there's something missing or something's

00:16:02,029 --> 00:16:07,940
broken

00:16:02,449 --> 00:16:09,380
you can also contribute find it here so

00:16:07,940 --> 00:16:12,199
are there some downsides to the JSON web

00:16:09,380 --> 00:16:14,420
tokens anybody in this room who saw me

00:16:12,199 --> 00:16:16,850
presenting Jason Thomas was like hmmm

00:16:14,420 --> 00:16:22,430
but maybe this is a liquid part and if

00:16:16,850 --> 00:16:24,320
so what okay let's continue one of the

00:16:22,430 --> 00:16:26,540
dumb parts is invalidation of tokens

00:16:24,320 --> 00:16:28,820
it's a bit harder if I issued token and

00:16:26,540 --> 00:16:31,279
it's valid for let's say a week but I

00:16:28,820 --> 00:16:33,649
want I mean I want it to be a not valid

00:16:31,279 --> 00:16:34,970
for some reason today it's how it's hard

00:16:33,649 --> 00:16:38,060
to do since it contains all information

00:16:34,970 --> 00:16:39,350
if it's valid or not inside of it so

00:16:38,060 --> 00:16:40,820
you'll have to create a blacklist or

00:16:39,350 --> 00:16:42,949
whitelist which you will check first

00:16:40,820 --> 00:16:45,190
before I'm checking the actual data your

00:16:42,949 --> 00:16:48,800
JSON web token and that's a bit harder

00:16:45,190 --> 00:16:50,810
if you leave your secret or private keys

00:16:48,800 --> 00:16:52,279
can be annoying because everybody can

00:16:50,810 --> 00:16:55,850
issue it a stop talking which is

00:16:52,279 --> 00:16:57,890
seemingly value so don't put cents at a

00:16:55,850 --> 00:17:01,220
time Jason you just have tokens since

00:16:57,890 --> 00:17:04,250
it's just a 64 on to token-based

00:17:01,220 --> 00:17:06,709
authentication we have the same scenario

00:17:04,250 --> 00:17:08,900
user browser server we want I to

00:17:06,709 --> 00:17:11,750
something protected we send our username

00:17:08,900 --> 00:17:13,920
and password when instead of a cookie we

00:17:11,750 --> 00:17:15,900
get back in token and every time

00:17:13,920 --> 00:17:16,829
we save it somewhere in memory and every

00:17:15,900 --> 00:17:19,110
time you want to access something

00:17:16,829 --> 00:17:20,400
protect it it's among this token just

00:17:19,110 --> 00:17:24,510
like we send along a session cookie

00:17:20,400 --> 00:17:28,500
cookie in the first examples and we get

00:17:24,510 --> 00:17:30,660
our data back this is often with the

00:17:28,500 --> 00:17:34,980
auth framework with several use off

00:17:30,660 --> 00:17:37,590
before ok with every use open any

00:17:34,980 --> 00:17:39,870
connect before open and connect is

00:17:37,590 --> 00:17:41,190
mainly just off with an identity that

00:17:39,870 --> 00:17:43,380
you're on top so instead of getting your

00:17:41,190 --> 00:17:44,910
access token and the Refresh token you

00:17:43,380 --> 00:17:46,020
can also get that I need token which

00:17:44,910 --> 00:17:49,290
contains some more information about

00:17:46,020 --> 00:17:51,210
your I identity authors are specified

00:17:49,290 --> 00:17:53,460
the nexus token needs to be chasing up

00:17:51,210 --> 00:17:56,400
talking but it can be open any connector

00:17:53,460 --> 00:18:00,480
specify that in ID token in severe JSON

00:17:56,400 --> 00:18:02,810
web token so if you look its author open

00:18:00,480 --> 00:18:04,500
any connects we know a face separates

00:18:02,810 --> 00:18:07,580
authorization server just for

00:18:04,500 --> 00:18:10,680
convenience to be similar potentials or

00:18:07,580 --> 00:18:13,160
tokens back can be an access token an ID

00:18:10,680 --> 00:18:16,140
token or refresh token say from a memory

00:18:13,160 --> 00:18:17,810
and we sent that token every time we

00:18:16,140 --> 00:18:20,610
need to access something protected and

00:18:17,810 --> 00:18:23,520
once this checks out we get our data

00:18:20,610 --> 00:18:26,280
bank but this means that you don't have

00:18:23,520 --> 00:18:28,410
to log in every time he wants to access

00:18:26,280 --> 00:18:30,090
something protected because we don't

00:18:28,410 --> 00:18:31,770
save the he talking somewhere

00:18:30,090 --> 00:18:34,170
persistently I've mentioned it a few

00:18:31,770 --> 00:18:36,390
times we save it in memory not in local

00:18:34,170 --> 00:18:39,480
storage or in a cookie like you can find

00:18:36,390 --> 00:18:41,580
on the internet a lot so that would be

00:18:39,480 --> 00:18:43,350
annoying but it does not mean that the

00:18:41,580 --> 00:18:46,140
lava flow rate the same we get our

00:18:43,350 --> 00:18:48,480
cooked our tokens but it's yet something

00:18:46,140 --> 00:18:51,660
X R we also get a cookie back to the

00:18:48,480 --> 00:18:52,980
beginning and every time the user visits

00:18:51,660 --> 00:18:55,140
your web sites

00:18:52,980 --> 00:18:56,880
it was just the request in the

00:18:55,140 --> 00:18:58,620
background with this cookie as for your

00:18:56,880 --> 00:19:00,720
tokens you will get these tokens and

00:18:58,620 --> 00:19:02,550
this should be done on bootstraps or the

00:19:00,720 --> 00:19:04,410
first thing you do and then once you get

00:19:02,550 --> 00:19:07,500
the tokens you can do whatever you want

00:19:04,410 --> 00:19:09,660
to do this is the orphan place a flower

00:19:07,500 --> 00:19:11,640
has been a lot of fuss about it's the

00:19:09,660 --> 00:19:13,740
IDF permission new best practices

00:19:11,640 --> 00:19:16,170
document stating issues I'll use it but

00:19:13,740 --> 00:19:16,750
this authorization code with proof key

00:19:16,170 --> 00:19:18,340
for Co

00:19:16,750 --> 00:19:22,720
exchange flow which is a bit more

00:19:18,340 --> 00:19:24,340
complicated so in essence you sent your

00:19:22,720 --> 00:19:26,110
user credentials with eco-challenge to

00:19:24,340 --> 00:19:29,590
your authorization server it sends back

00:19:26,110 --> 00:19:31,120
a code you sign this code and then send

00:19:29,590 --> 00:19:32,860
this card together with a verifier back

00:19:31,120 --> 00:19:35,200
to your authorization server and this

00:19:32,860 --> 00:19:38,080
make this make sure that the code is

00:19:35,200 --> 00:19:40,120
only issued by is only used by a trusted

00:19:38,080 --> 00:19:42,670
source and once you've done these two

00:19:40,120 --> 00:19:44,710
extra steps you get your tokens back so

00:19:42,670 --> 00:19:48,310
it's a bit more complicated but it makes

00:19:44,710 --> 00:19:50,410
it a bit more secure so does this

00:19:48,310 --> 00:19:55,360
approach sort of course with things it

00:19:50,410 --> 00:19:57,790
does I do because it can pass some

00:19:55,360 --> 00:19:59,680
tokens to anybody and anybody can verify

00:19:57,790 --> 00:20:01,570
if their fellows ever not as long as you

00:19:59,680 --> 00:20:03,130
know the secret or have access to your

00:20:01,570 --> 00:20:04,930
public key so doesn't matter which

00:20:03,130 --> 00:20:06,880
domain which origin you pass it along to

00:20:04,930 --> 00:20:09,460
as long as they know how to verify this

00:20:06,880 --> 00:20:13,150
token it will be fine so it does of

00:20:09,460 --> 00:20:14,500
course this is approach so for the flow

00:20:13,150 --> 00:20:18,160
of cookies from one server to the other

00:20:14,500 --> 00:20:19,900
who thinks it does I do because you

00:20:18,160 --> 00:20:22,360
don't even cookies using tokens and

00:20:19,900 --> 00:20:25,560
again as long as the other servers know

00:20:22,360 --> 00:20:28,180
how to verify these tokens you're good

00:20:25,560 --> 00:20:32,860
does this approach solve keeping States

00:20:28,180 --> 00:20:35,110
the things it does maybe in interior

00:20:32,860 --> 00:20:36,400
does but if you want to have if you want

00:20:35,110 --> 00:20:38,350
to invalidate targets and stuff like

00:20:36,400 --> 00:20:40,960
this you kinda need to keep some state

00:20:38,350 --> 00:20:42,700
if you want to do it a bit more security

00:20:40,960 --> 00:20:44,500
only say the talk is in memory it means

00:20:42,700 --> 00:20:46,780
a session cookie which again is keeping

00:20:44,500 --> 00:20:50,020
state so in theory does in practice it

00:20:46,780 --> 00:20:51,100
doesn't so let's summarize use exception

00:20:50,020 --> 00:20:53,230
cookies is hard to single page

00:20:51,100 --> 00:20:55,990
applications because of session cookies

00:20:53,230 --> 00:20:58,840
send us authentication as possible in

00:20:55,990 --> 00:21:01,600
theory and HSN app token consists on the

00:20:58,840 --> 00:21:03,940
three parts thank you oh if you want to

00:21:01,600 --> 00:21:06,160
know more definite open that I own or

00:21:03,940 --> 00:21:07,840
blog has a nice blog post about why

00:21:06,160 --> 00:21:10,570
should not use the implicit flow and

00:21:07,840 --> 00:21:12,130
party should use the pkc flow or blog is

00:21:10,570 --> 00:21:14,770
also full of other interesting things

00:21:12,130 --> 00:21:15,280
you can find these slides on Timothy

00:21:14,770 --> 00:21:20,640
dose

00:21:15,280 --> 00:21:24,540
- I'll tweet them later any questions

00:21:20,640 --> 00:21:24,540
because we still have a bit more time

00:21:26,610 --> 00:21:32,290
questions no questions at all

00:21:30,160 --> 00:21:34,330
no questions okay should you have a

00:21:32,290 --> 00:21:37,060
question but not at this moment to come

00:21:34,330 --> 00:21:38,680
find me after they stop you know bring

00:21:37,060 --> 00:21:41,800
your own questions to Sweden because

00:21:38,680 --> 00:21:44,140
were shy okay Belgians are shy as well

00:21:41,800 --> 00:21:46,300
so our arm can be used to this and so

00:21:44,140 --> 00:21:53,010
thank you thank you

00:21:46,300 --> 00:21:53,010
[Applause]

00:21:59,070 --> 00:22:01,130

YouTube URL: https://www.youtube.com/watch?v=zhRdv0bJea4


