Title: Understanding user namespaces - Michael Kerrisk
Publication date: 2019-04-18
Playlist: foss-north 2019
Description: 
	User namespaces are at the heart of many interesting technologies that allow isolation and sandboxing of applications, for example running containers without root privileges and sandboxes for web browser plug-ins. In this tutorial, we'll look in detail at user namespaces, building up a basic understanding of what a user namespace is and going on to questions such as: what does being “superuser inside a user namespace” allow you do (and what does it not allow); what is the relationship between user namespaces and other namespace types (PID, UTS, network, etc.); and what are the security implications of user namespaces? We'll also explore some simple shell commands that can be used for creating and experimenting with user namespaces in order to better understand how they work. Along the way, there will hopefully be time for a few live demos.

---

Michael Kerrisk is the author of the acclaimed book, “The Linux Programming Interface” (http://man7.org/tlpi/), a guide and reference for system programming on Linux and UNIX. He contributes to the Linux kernel primarily via documentation, review, and testing of new kernel-user-space interfaces. He has contributed to the Linux man-pages project (http://www.kernel.org/doc/man-pages/) since 2000, and been the project maintainer since 2004. Michael is a trainer and consultant, living in Munich, Germany.

https://foss-north.se/2019/speakers-and-talks.html#mkerrisk
Captions: 
	00:00:16,150 --> 00:00:22,869
thank you for coming along so I want to

00:00:20,350 --> 00:00:25,450
talk about user namespaces which

00:00:22,869 --> 00:00:28,630
essentially a one of the key building

00:00:25,450 --> 00:00:33,910
blocks of containers and and a lot of

00:00:28,630 --> 00:00:35,590
other interesting technology could my

00:00:33,910 --> 00:00:37,360
device is going to work just a little

00:00:35,590 --> 00:00:40,540
bit about myself find the maintainer of

00:00:37,360 --> 00:00:43,720
the Linux manual pages project this is

00:00:40,540 --> 00:00:46,390
the manual pages that provide section 2

00:00:43,720 --> 00:00:49,570
and section 3 manual pages system calls

00:00:46,390 --> 00:00:54,850
library functions I've been doing that

00:00:49,570 --> 00:00:56,200
for a while I regret that I can't be in

00:00:54,850 --> 00:01:00,850
the other talk right now

00:00:56,200 --> 00:01:03,370
because it's a documentation talk I

00:01:00,850 --> 00:01:07,690
wrote a book maybe some of you have come

00:01:03,370 --> 00:01:09,700
across us and my day job these days is

00:01:07,690 --> 00:01:15,720
mostly doing training but is my

00:01:09,700 --> 00:01:17,740
background I'm a programmer okay when I

00:01:15,720 --> 00:01:19,750
do this sort of topic in a training

00:01:17,740 --> 00:01:22,509
course I would normally spend several

00:01:19,750 --> 00:01:24,640
hours on it so I'm gonna do things

00:01:22,509 --> 00:01:26,679
obviously in a lot less time I'm gonna

00:01:24,640 --> 00:01:29,440
skip some stuff I'm gonna go a bit fast

00:01:26,679 --> 00:01:30,940
I'm gonna say save the questions till

00:01:29,440 --> 00:01:33,610
the end sometimes and talks I take

00:01:30,940 --> 00:01:37,660
questions in the middle but I need to

00:01:33,610 --> 00:01:39,759
keep keep going before I start talking

00:01:37,660 --> 00:01:41,860
about namespaces though or username

00:01:39,759 --> 00:01:44,160
spaces in particular I need to reduce

00:01:41,860 --> 00:01:48,759
another topic very briefly which is

00:01:44,160 --> 00:01:51,399
capabilities and capabilities on Linux

00:01:48,759 --> 00:01:54,429
are about solving a certain problem and

00:01:51,399 --> 00:01:57,539
the problem goes like this the

00:01:54,429 --> 00:02:00,550
traditional UNIX privilege model divides

00:01:57,539 --> 00:02:04,030
users divides processes into two

00:02:00,550 --> 00:02:06,640
categories there's normal users and

00:02:04,030 --> 00:02:08,679
produces and privileged processes that

00:02:06,640 --> 00:02:11,500
are subject to a lot of permissions

00:02:08,679 --> 00:02:15,130
checks on a UNIX system and then the

00:02:11,500 --> 00:02:19,120
super user who can bypass all of these

00:02:15,130 --> 00:02:25,709
checks or at least most checks so you've

00:02:19,120 --> 00:02:28,319
got this very granular

00:02:25,709 --> 00:02:31,260
privilege model took two classes of

00:02:28,319 --> 00:02:34,349
users and and the way traditionally on

00:02:31,260 --> 00:02:35,849
UNIX systems that you allow a program to

00:02:34,349 --> 00:02:37,680
operate with privileged operate with

00:02:35,849 --> 00:02:40,650
super user privilege is you may get a

00:02:37,680 --> 00:02:42,239
set user ID root program you change its

00:02:40,650 --> 00:02:44,519
ownership to root and you turn on the

00:02:42,239 --> 00:02:47,189
set user ID but using those shell

00:02:44,519 --> 00:02:50,370
commands that I'm showing just there and

00:02:47,189 --> 00:02:53,069
then when some process executes that

00:02:50,370 --> 00:02:54,989
program the effective user ID of the

00:02:53,069 --> 00:02:57,060
process changes to be the same as the

00:02:54,989 --> 00:03:00,120
owner of the program which in this case

00:02:57,060 --> 00:03:02,340
is super user so now the process has the

00:03:00,120 --> 00:03:04,470
power of super user now this is

00:03:02,340 --> 00:03:06,419
obviously very powerful it's also of

00:03:04,470 --> 00:03:09,239
course very dangerous because if the

00:03:06,419 --> 00:03:12,680
process can get compromised then it can

00:03:09,239 --> 00:03:15,810
do all the bad things super user can do

00:03:12,680 --> 00:03:18,840
so this is the problem with the you know

00:03:15,810 --> 00:03:23,069
traditional unix privilege model there's

00:03:18,840 --> 00:03:25,139
this very rough granularity of the

00:03:23,069 --> 00:03:27,599
premortal either your unproduced or you

00:03:25,139 --> 00:03:30,479
have all privileges this is not

00:03:27,599 --> 00:03:33,620
something in between and this is what

00:03:30,479 --> 00:03:36,870
whoops this is why capabilities were

00:03:33,620 --> 00:03:40,049
inventors an idea the idea is let's have

00:03:36,870 --> 00:03:43,189
something in between and the idea is

00:03:40,049 --> 00:03:46,949
let's break the power of soup user into

00:03:43,189 --> 00:03:49,590
small pieces now as things stand in the

00:03:46,949 --> 00:03:52,829
in current kernels there are 38 of these

00:03:49,590 --> 00:03:56,040
small pieces the list is slowly growing

00:03:52,829 --> 00:03:57,479
over the years but there hasn't been a

00:03:56,040 --> 00:03:59,579
new capability added at the fur I think

00:03:57,479 --> 00:04:01,889
about probably at least five years now

00:03:59,579 --> 00:04:04,590
so at the moment have 38 of these

00:04:01,889 --> 00:04:08,699
capabilities and the idea is each one of

00:04:04,590 --> 00:04:11,370
them should let you do some small set of

00:04:08,699 --> 00:04:15,560
the special things that are traditional

00:04:11,370 --> 00:04:20,400
super user can do so a few examples here

00:04:15,560 --> 00:04:23,070
camp DAC override by Pat let's let's the

00:04:20,400 --> 00:04:26,490
process bypass file permissions read and

00:04:23,070 --> 00:04:29,580
write any file on the system caps as

00:04:26,490 --> 00:04:34,409
time lets a process change the system

00:04:29,580 --> 00:04:37,380
clock hips this admin sabhi lets you do

00:04:34,409 --> 00:04:40,130
way too many things but that's the story

00:04:37,380 --> 00:04:40,130
for another tour

00:04:40,670 --> 00:04:43,980
[Music]

00:04:41,780 --> 00:04:47,040
so now the idea is instead of having a

00:04:43,980 --> 00:04:49,160
set user ID root program we can have a

00:04:47,040 --> 00:04:52,200
program that just has a certain

00:04:49,160 --> 00:04:54,360
capability or perhaps a few capabilities

00:04:52,200 --> 00:04:57,780
attached and when the process executes

00:04:54,360 --> 00:05:00,600
their program then it gets just those

00:04:57,780 --> 00:05:02,610
capabilities instead of getting the full

00:05:00,600 --> 00:05:05,070
power of super user which is what you

00:05:02,610 --> 00:05:07,440
would get with a set user ID root

00:05:05,070 --> 00:05:10,980
program and the idea then is that if

00:05:07,440 --> 00:05:13,820
this program gets compromised because

00:05:10,980 --> 00:05:17,420
the process that is running it has a

00:05:13,820 --> 00:05:20,340
subset of the power of super user then

00:05:17,420 --> 00:05:24,210
maybe the damage that the attacker can

00:05:20,340 --> 00:05:28,470
do is is less okay because the program

00:05:24,210 --> 00:05:31,260
is less powerful so we've got we got

00:05:28,470 --> 00:05:33,500
then as the concept of binaries that

00:05:31,260 --> 00:05:37,620
have capabilities as being less

00:05:33,500 --> 00:05:41,670
dangerous than set user ID root binaries

00:05:37,620 --> 00:05:43,590
so then just to subsist just to sort of

00:05:41,670 --> 00:05:45,870
summarize we've got the concept that

00:05:43,590 --> 00:05:47,820
processes can have capabilities some

00:05:45,870 --> 00:05:50,250
subset of the power root we've got the

00:05:47,820 --> 00:05:52,140
concept that files can have capabilities

00:05:50,250 --> 00:05:55,050
and the idea is that if a process

00:05:52,140 --> 00:05:57,420
executes the file then the file gives

00:05:55,050 --> 00:05:59,850
those capabilities to the process and

00:05:57,420 --> 00:06:02,490
the idea is now you know privileged

00:05:59,850 --> 00:06:05,960
processes privileged binaries that are

00:06:02,490 --> 00:06:09,960
less dangerous than traditional route

00:06:05,960 --> 00:06:15,950
processes or set user ad route binaries

00:06:09,960 --> 00:06:18,690
so let's talk about namespaces okay so

00:06:15,950 --> 00:06:21,360
what is the namespace it's really hard

00:06:18,690 --> 00:06:23,730
to define this in some simple sentence

00:06:21,360 --> 00:06:26,250
you'll see something like this as an

00:06:23,730 --> 00:06:29,340
attempt to summarize what our namespace

00:06:26,250 --> 00:06:32,490
is it's it's a mechanism to wrap some

00:06:29,340 --> 00:06:37,110
global resource in a way that provides

00:06:32,490 --> 00:06:41,310
isolation now unpack what that means

00:06:37,110 --> 00:06:44,750
with an example or two as we go the my

00:06:41,310 --> 00:06:47,310
clicker is a little bit oversensitive

00:06:44,750 --> 00:06:49,100
Linux currently supports seven different

00:06:47,310 --> 00:06:52,130
types of namespaces

00:06:49,100 --> 00:06:54,650
this list has been slowly growing over

00:06:52,130 --> 00:06:56,570
time and it's likely to grow again in

00:06:54,650 --> 00:06:58,730
the next year or two I expect cuz it's

00:06:56,570 --> 00:07:01,640
been conversations about a couple of new

00:06:58,730 --> 00:07:05,840
namespace types just lately but what we

00:07:01,640 --> 00:07:07,160
what we currently have is these seven

00:07:05,840 --> 00:07:08,660
mountain expenses I've got them listed

00:07:07,160 --> 00:07:10,370
here just in the order they were added

00:07:08,660 --> 00:07:13,850
to the kernel so the first one was added

00:07:10,370 --> 00:07:15,710
back in 2002 mount namespaces the idea

00:07:13,850 --> 00:07:18,380
of mount namespaces you can have a group

00:07:15,710 --> 00:07:21,230
of processes that are in a mountain lion

00:07:18,380 --> 00:07:23,090
space they see a certain set of mountain

00:07:21,230 --> 00:07:25,760
points a certain arrangement of the

00:07:23,090 --> 00:07:27,380
single directory hierarchy where she

00:07:25,760 --> 00:07:29,390
might have processes that are in another

00:07:27,380 --> 00:07:31,280
mountain airspace they see a different

00:07:29,390 --> 00:07:33,320
set of mount points a completely

00:07:31,280 --> 00:07:35,720
different arrangement of the single

00:07:33,320 --> 00:07:38,090
directory hierarchy putting this in

00:07:35,720 --> 00:07:40,520
container terms this means that your

00:07:38,090 --> 00:07:42,740
different containers could see different

00:07:40,520 --> 00:07:45,500
sets of file systems different sets of

00:07:42,740 --> 00:07:46,970
mount points we've got UTS namespaces

00:07:45,500 --> 00:07:48,830
what these do and I'll look at these

00:07:46,970 --> 00:07:51,230
again in a bit more detail in just a

00:07:48,830 --> 00:07:53,540
moment isolate a couple of system

00:07:51,230 --> 00:07:55,640
identifiers in particular they isolate

00:07:53,540 --> 00:07:57,230
the hostname she didn't processes the

00:07:55,640 --> 00:07:59,540
Durham one UTS namespace let's see a

00:07:57,230 --> 00:08:01,370
certain hostname processes that are in a

00:07:59,540 --> 00:08:05,060
different UTS namespace they see a

00:08:01,370 --> 00:08:06,290
different hostname there's a few other

00:08:05,060 --> 00:08:08,360
namespaces I don't want to try and go

00:08:06,290 --> 00:08:09,560
into the details of IPC namespaces but

00:08:08,360 --> 00:08:12,050
the isolation that's being provided

00:08:09,560 --> 00:08:15,410
there is for certain kinds of IPC

00:08:12,050 --> 00:08:18,110
objects PID namespaces what's being

00:08:15,410 --> 00:08:20,240
isolated here is the process ID number

00:08:18,110 --> 00:08:22,490
space this means you can have from the

00:08:20,240 --> 00:08:24,440
point of view of containers a set of PID

00:08:22,490 --> 00:08:28,100
is inside a container that are visible

00:08:24,440 --> 00:08:29,720
only inside the container and not

00:08:28,100 --> 00:08:33,260
visible and other containers this means

00:08:29,720 --> 00:08:35,660
you can have for example PID one in each

00:08:33,260 --> 00:08:37,729
one of your containers and PID one of

00:08:35,660 --> 00:08:40,729
course is the special init process that

00:08:37,729 --> 00:08:44,120
does many things on a system including

00:08:40,729 --> 00:08:47,020
inside a container network namespaces

00:08:44,120 --> 00:08:51,650
are about isolating network resources

00:08:47,020 --> 00:08:55,520
Network Devices socket port numbers

00:08:51,650 --> 00:08:58,040
space various files and /proc and

00:08:55,520 --> 00:09:00,350
slashes and the idea here is that with

00:08:58,040 --> 00:09:02,819
your containers each container can have

00:09:00,350 --> 00:09:05,669
its own virtual networking devices and

00:09:02,819 --> 00:09:07,229
its own port numbers space so that ain't

00:09:05,669 --> 00:09:09,509
one of your containers for example you

00:09:07,229 --> 00:09:12,869
could run a web server on port 80 and

00:09:09,509 --> 00:09:16,289
this works because each container has

00:09:12,869 --> 00:09:18,389
its own private set of port numbers in

00:09:16,289 --> 00:09:22,350
its own private virtual networking

00:09:18,389 --> 00:09:25,229
device whoops

00:09:22,350 --> 00:09:26,579
life got really interesting with user

00:09:25,229 --> 00:09:28,679
name spaces which is what I'm going to

00:09:26,579 --> 00:09:31,289
spend some time talking about it which

00:09:28,679 --> 00:09:33,720
were essentially reached a milestone of

00:09:31,289 --> 00:09:37,289
maturity about five six years ago now

00:09:33,720 --> 00:09:39,539
and what's being isolated here is user

00:09:37,289 --> 00:09:43,229
IDs and group IDs and I'll come back to

00:09:39,539 --> 00:09:44,699
what that means soon and then the most

00:09:43,229 --> 00:09:46,350
recently added namespace which I don't

00:09:44,699 --> 00:09:47,789
really want to try and explain it all

00:09:46,350 --> 00:09:50,729
because then I don't need to explain

00:09:47,789 --> 00:09:53,429
what C groups are is the C group

00:09:50,729 --> 00:09:55,439
namespaces well I'll say about C group

00:09:53,429 --> 00:09:57,989
namespaces is once you understand what C

00:09:55,439 --> 00:09:59,910
groups are secret namespaces are super

00:09:57,989 --> 00:10:01,589
simple it's there's nothing complicated

00:09:59,910 --> 00:10:03,839
here C groups themselves are quite

00:10:01,589 --> 00:10:09,509
complicated but C group namespaces are

00:10:03,839 --> 00:10:11,970
super simple now how does this thing

00:10:09,509 --> 00:10:13,739
work the idea is we've got seven

00:10:11,970 --> 00:10:16,409
different types of namespace currently

00:10:13,739 --> 00:10:18,659
and for each one of those different

00:10:16,409 --> 00:10:21,359
namespace types there can be multiple

00:10:18,659 --> 00:10:24,239
instances of the namespace on the system

00:10:21,359 --> 00:10:26,069
to begin with when the system is booted

00:10:24,239 --> 00:10:28,949
up there's one instance of each

00:10:26,069 --> 00:10:32,299
namespace type and this this first

00:10:28,949 --> 00:10:35,879
instance is called the initial namespace

00:10:32,299 --> 00:10:39,329
and the idea is that every process on

00:10:35,879 --> 00:10:41,909
the system resides in exactly one

00:10:39,329 --> 00:10:44,369
instance of each namespace type so there

00:10:41,909 --> 00:10:47,519
are currently seven namespace types each

00:10:44,369 --> 00:10:50,269
process on on a Linux system resides in

00:10:47,519 --> 00:10:55,470
one instance of each of those seven

00:10:50,269 --> 00:10:57,029
namespaces and the idea is that for the

00:10:55,470 --> 00:10:59,909
processes that are in a particular

00:10:57,029 --> 00:11:03,029
instance of a particular namespace type

00:10:59,909 --> 00:11:06,329
they see a certain view of some global

00:11:03,029 --> 00:11:08,329
resource that global resource is private

00:11:06,329 --> 00:11:10,799
to them if one of those processes

00:11:08,329 --> 00:11:12,689
changes the global resource that change

00:11:10,799 --> 00:11:15,360
is visible to the other processes that

00:11:12,689 --> 00:11:18,420
are in the namespace instance but

00:11:15,360 --> 00:11:21,959
not visible to processes that are on in

00:11:18,420 --> 00:11:26,070
other instances of that namespace type

00:11:21,959 --> 00:11:30,029
and when a new process gets created it

00:11:26,070 --> 00:11:32,250
begins is life in the same namespaces as

00:11:30,029 --> 00:11:36,149
its parent now this is kind of abstract

00:11:32,250 --> 00:11:38,040
so let's let's try and make this more

00:11:36,149 --> 00:11:40,860
concrete it makes it more understandable

00:11:38,040 --> 00:11:43,740
and UTS namespaces are a good example

00:11:40,860 --> 00:11:46,980
because they're relatively simple what's

00:11:43,740 --> 00:11:49,079
being isolated by UTS namespaces is a

00:11:46,980 --> 00:11:51,240
couple of system identifiers including

00:11:49,079 --> 00:11:54,089
the host name now the host name is the

00:11:51,240 --> 00:11:55,740
the identify that you can see with the

00:11:54,089 --> 00:11:57,930
you name command or with the host name

00:11:55,740 --> 00:12:00,779
command and you can change with the host

00:11:57,930 --> 00:12:03,120
name command as well and of course there

00:12:00,779 --> 00:12:06,120
are system calls and the neath for doing

00:12:03,120 --> 00:12:10,529
these operations now on any particular

00:12:06,120 --> 00:12:15,209
system there might be multiple UTS names

00:12:10,529 --> 00:12:18,300
base instances processes that are in one

00:12:15,209 --> 00:12:21,720
particular instance see a certain host

00:12:18,300 --> 00:12:23,579
name if one of those processes in a

00:12:21,720 --> 00:12:25,320
certain instance changes the host name

00:12:23,579 --> 00:12:27,630
the change is visible to all the other

00:12:25,320 --> 00:12:30,390
processes that are in the same UTS

00:12:27,630 --> 00:12:33,630
namespace instance but the changes

00:12:30,390 --> 00:12:37,050
aren't visible to processes and other

00:12:33,630 --> 00:12:38,339
UTS namespaces see their own host name

00:12:37,050 --> 00:12:42,630
doesn't Nate the host name that

00:12:38,339 --> 00:12:44,190
corresponds to their namespace so we've

00:12:42,630 --> 00:12:46,260
got a situation like this where we've

00:12:44,190 --> 00:12:49,470
got in this case three different UTS

00:12:46,260 --> 00:12:53,010
namespaces we've got some processes in

00:12:49,470 --> 00:12:54,449
each namespace the circles and each one

00:12:53,010 --> 00:12:56,490
of those processes in a particular

00:12:54,449 --> 00:12:59,519
namespace is seeing a particular host

00:12:56,490 --> 00:13:02,670
name okay so the processes that are here

00:12:59,519 --> 00:13:05,040
and say this namespace here are seeing a

00:13:02,670 --> 00:13:07,079
certain host name checkup or if one of

00:13:05,040 --> 00:13:09,240
those processes changes the host name

00:13:07,079 --> 00:13:11,730
that change will be visible to the other

00:13:09,240 --> 00:13:15,420
processes inside the same namespace

00:13:11,730 --> 00:13:17,820
instance but for example the change

00:13:15,420 --> 00:13:20,690
won't have any effect in the other two

00:13:17,820 --> 00:13:25,020
name space instances which see their own

00:13:20,690 --> 00:13:27,870
namespace so it serve their own host

00:13:25,020 --> 00:13:28,870
names corresponding to their own UTS

00:13:27,870 --> 00:13:34,810
namespace

00:13:28,870 --> 00:13:36,790
instance okay

00:13:34,810 --> 00:13:38,080
now the similar there's some system

00:13:36,790 --> 00:13:39,430
calls aren't Leith all of this there's

00:13:38,080 --> 00:13:41,620
some commands for working with

00:13:39,430 --> 00:13:44,380
namespaces I just want to briefly run

00:13:41,620 --> 00:13:49,600
through these in preparation for doing a

00:13:44,380 --> 00:13:52,089
demo or two so but first of all in the

00:13:49,600 --> 00:13:54,520
proc directory in the I'll rephrase that

00:13:52,089 --> 00:13:56,050
in the proc directory have proc paid

00:13:54,520 --> 00:13:58,450
files that have information about each

00:13:56,050 --> 00:14:00,970
process inside each one of these proc

00:13:58,450 --> 00:14:01,720
paid directories there's a subdirectory

00:14:00,970 --> 00:14:04,660
called

00:14:01,720 --> 00:14:07,089
NS and inside that subdirectory there's

00:14:04,660 --> 00:14:09,400
a bunch of symbolic links and these

00:14:07,089 --> 00:14:12,220
symbolic links you can see from the

00:14:09,400 --> 00:14:16,060
names there they correspond to the seven

00:14:12,220 --> 00:14:18,790
different types of namespace and so each

00:14:16,060 --> 00:14:25,060
process has these seven some links in

00:14:18,790 --> 00:14:29,560
this proc pettiness directory and these

00:14:25,060 --> 00:14:31,660
some links serve a number of purposes

00:14:29,560 --> 00:14:33,610
first of all there's some links you can

00:14:31,660 --> 00:14:35,230
read them so if we use the red link

00:14:33,610 --> 00:14:37,150
command for instance or alias - shell

00:14:35,230 --> 00:14:38,589
for that matter we see the symlinks they

00:14:37,150 --> 00:14:40,630
have a certain value now normally the

00:14:38,589 --> 00:14:43,720
value of a symlink is is something like

00:14:40,630 --> 00:14:45,490
a path name but the value of these sim

00:14:43,720 --> 00:14:47,440
links and these are magics and links

00:14:45,490 --> 00:14:50,110
that are created in the proc file system

00:14:47,440 --> 00:14:52,839
on the fly by the kernel the values of

00:14:50,110 --> 00:14:55,900
these symlinks are certain specially

00:14:52,839 --> 00:15:01,029
constructed strings and the strings look

00:14:55,900 --> 00:15:03,070
like a name some namespace the name of

00:15:01,029 --> 00:15:07,650
some namespace a colon and then in

00:15:03,070 --> 00:15:10,570
square brackets a magic inode number and

00:15:07,650 --> 00:15:13,230
the idea is that if you have two

00:15:10,570 --> 00:15:15,970
processes that are in the same namespace

00:15:13,230 --> 00:15:19,209
then if you look at their proc pig in

00:15:15,970 --> 00:15:21,880
its symlink you'll see the same number

00:15:19,209 --> 00:15:24,850
so one of the purposes of these files is

00:15:21,880 --> 00:15:28,089
to answer the question are these two

00:15:24,850 --> 00:15:33,850
processes in the same namespace instance

00:15:28,089 --> 00:15:35,470
or not okay now I mentioned there are

00:15:33,850 --> 00:15:37,510
some system calls that make all the

00:15:35,470 --> 00:15:38,920
stuff work I don't want to go into the

00:15:37,510 --> 00:15:40,420
details of these system calls but just

00:15:38,920 --> 00:15:41,870
to mention what there is there's the

00:15:40,420 --> 00:15:44,150
clone system call

00:15:41,870 --> 00:15:46,250
does many things essentially creates a

00:15:44,150 --> 00:15:48,650
new process but what you can do with

00:15:46,250 --> 00:15:51,110
clone as well as say that new process

00:15:48,650 --> 00:15:52,970
should be in some new namespaces so you

00:15:51,110 --> 00:15:56,390
can create some new namespaces at the

00:15:52,970 --> 00:15:58,160
same time the Sun share and share just

00:15:56,390 --> 00:15:59,450
sit well on JIRA gain does many things

00:15:58,160 --> 00:16:01,160
but one of the things you can say with

00:15:59,450 --> 00:16:03,800
unshare is I want to create some new

00:16:01,160 --> 00:16:06,320
namespaces and you say what kinds of

00:16:03,800 --> 00:16:08,330
namespaces you want to create and

00:16:06,320 --> 00:16:11,750
unshare one of the effects of unshare is

00:16:08,330 --> 00:16:15,050
the calling process gets moved into the

00:16:11,750 --> 00:16:17,810
new namespaces and then the cns which

00:16:15,050 --> 00:16:20,480
allows a process to change its own

00:16:17,810 --> 00:16:23,029
namespace membership to move into a

00:16:20,480 --> 00:16:25,070
different namespace now I don't wanna go

00:16:23,029 --> 00:16:27,710
into the details of those system calls

00:16:25,070 --> 00:16:30,290
but what we have loud on top of these

00:16:27,710 --> 00:16:32,000
system calls are some useful commands

00:16:30,290 --> 00:16:34,160
for doing demonstrations

00:16:32,000 --> 00:16:36,950
there's the unshare command which

00:16:34,160 --> 00:16:40,910
underneath is using the unshare system

00:16:36,950 --> 00:16:43,580
call and the NS enter command which

00:16:40,910 --> 00:16:45,770
underneath is using the set in s system

00:16:43,580 --> 00:16:51,529
pool to allow you to move into an

00:16:45,770 --> 00:16:53,810
existing namespace okay these commands

00:16:51,529 --> 00:16:55,580
they have options that enable you to say

00:16:53,810 --> 00:16:56,270
what kind of namespaces do you want to

00:16:55,580 --> 00:16:57,890
deal with

00:16:56,270 --> 00:16:59,870
so with unshare you can say you want to

00:16:57,890 --> 00:17:03,230
create a new c group namespace or a new

00:16:59,870 --> 00:17:05,179
user namespace the seven different types

00:17:03,230 --> 00:17:07,910
of namespaces and a game with iniya

00:17:05,179 --> 00:17:09,620
Center you can say I want to move into

00:17:07,910 --> 00:17:12,230
an existing namespace the way you

00:17:09,620 --> 00:17:15,260
identify the existing namespace is with

00:17:12,230 --> 00:17:16,760
this accommodation first of all well

00:17:15,260 --> 00:17:19,010
there's a few ways of doing but one way

00:17:16,760 --> 00:17:21,770
is to say I want to move into the

00:17:19,010 --> 00:17:26,059
namespace of a certain existing process

00:17:21,770 --> 00:17:29,179
so you say target PID and then you might

00:17:26,059 --> 00:17:32,450
turn around say well for that process I

00:17:29,179 --> 00:17:36,380
want to move into the user name space of

00:17:32,450 --> 00:17:40,280
that process so you'd use - TP ID and -

00:17:36,380 --> 00:17:41,630
you okay and you'll see the option there

00:17:40,280 --> 00:17:47,420
is on the two commands but they

00:17:41,630 --> 00:17:50,120
correspond now in order to create

00:17:47,420 --> 00:17:52,990
namespaces you need to have privileges

00:17:50,120 --> 00:17:55,240
more specifically you need to have

00:17:52,990 --> 00:17:57,290
capabilities

00:17:55,240 --> 00:17:58,640
except for username spaces to create

00:17:57,290 --> 00:17:59,960
username spaces you don't need any

00:17:58,640 --> 00:18:02,090
privileges but to create all the other

00:17:59,960 --> 00:18:05,660
kinds of namespaces you need to have a

00:18:02,090 --> 00:18:13,730
capability caps as admin one of those 38

00:18:05,660 --> 00:18:23,440
capabilities whoops okay so let's just

00:18:13,730 --> 00:18:27,740
try this out oops

00:18:23,440 --> 00:18:35,900
okay let's make sure I'm in the right

00:18:27,740 --> 00:18:38,570
place okay so what I'm gonna do up here

00:18:35,900 --> 00:18:40,550
I'm gonna say I first of all i've got a

00:18:38,570 --> 00:18:45,740
couple of shells here these shells are

00:18:40,550 --> 00:18:50,570
in the initial UTS namespace and what

00:18:45,740 --> 00:18:55,850
i'm gonna do is read link of proc slash

00:18:50,570 --> 00:18:59,840
dollar dollar PID of the shell in s UTS

00:18:55,850 --> 00:19:03,620
i see a certain magic number there just

00:18:59,840 --> 00:19:12,200
to verify that these two shells really

00:19:03,620 --> 00:19:19,550
are in the same UTS namespace I'll do

00:19:12,200 --> 00:19:21,470
the same okay so you see the same two

00:19:19,550 --> 00:19:25,250
numbers there these processes really are

00:19:21,470 --> 00:19:28,870
in the same UTS namespace now why don't

00:19:25,250 --> 00:19:31,460
we need to up here in the top window is

00:19:28,870 --> 00:19:34,580
first women take advantage of thank god

00:19:31,460 --> 00:19:36,890
I've got a big screen okay up here I'm

00:19:34,580 --> 00:19:42,520
gonna say run the unshare command and

00:19:36,890 --> 00:19:46,309
I'm gonna say create a new UTS namespace

00:19:42,520 --> 00:19:49,309
that's the - capital u option and then I

00:19:46,309 --> 00:19:54,170
specify a command I want to run in their

00:19:49,309 --> 00:19:56,420
new namespace now because this is one of

00:19:54,170 --> 00:19:59,300
the other kinds of names based not a not

00:19:56,420 --> 00:20:02,720
a user name space I need to do this with

00:19:59,300 --> 00:20:13,580
privilege so what I'm gonna do is say

00:20:02,720 --> 00:20:23,330
pseudo okay now I'm gonna run that

00:20:13,580 --> 00:20:25,809
riedling command in I don't learn from

00:20:23,330 --> 00:20:35,679
experience

00:20:25,809 --> 00:20:39,970
okay we see oh I used the wrong letter

00:20:35,679 --> 00:20:42,559
excuse me I should have used lowercase u

00:20:39,970 --> 00:20:46,130
uppercase u as user name spaces

00:20:42,559 --> 00:20:47,380
lowercase U as UTS namespaces let's try

00:20:46,130 --> 00:21:05,210
that again

00:20:47,380 --> 00:21:09,140
now relink slash okay we see a different

00:21:05,210 --> 00:21:15,080
number these this this new shell is in a

00:21:09,140 --> 00:21:19,280
new UTS namespace okay now what I should

00:21:15,080 --> 00:21:20,990
have done down in the original shell and

00:21:19,280 --> 00:21:22,370
the original UTS namespace let's just

00:21:20,990 --> 00:21:24,590
look at the host name I read a certain

00:21:22,370 --> 00:21:29,620
host name now let's look at the host

00:21:24,590 --> 00:21:35,059
name up here in the new UTS namespace

00:21:29,620 --> 00:21:37,400
okay it's also being because to begin

00:21:35,059 --> 00:21:40,790
with the new UTS namespace in here it's

00:21:37,400 --> 00:21:43,880
the host name of the process that

00:21:40,790 --> 00:21:45,980
created this UTS namespace so that the

00:21:43,880 --> 00:21:49,100
creating process was in a certain UTS

00:21:45,980 --> 00:21:51,950
namespace the new UTS namespace inherits

00:21:49,100 --> 00:21:54,350
the same host name but what I can now do

00:21:51,950 --> 00:21:59,000
is turn around say change that host name

00:21:54,350 --> 00:22:02,960
and now

00:21:59,000 --> 00:22:06,830
the hostname is different and then down

00:22:02,960 --> 00:22:11,390
here just to verify okay hostname down

00:22:06,830 --> 00:22:13,190
there is still be in okay so we've got

00:22:11,390 --> 00:22:15,200
two different UTS namespaces they're

00:22:13,190 --> 00:22:17,660
isolating the hostname here and we can

00:22:15,200 --> 00:22:19,340
have different host names okay and of

00:22:17,660 --> 00:22:21,320
course in container terms that means our

00:22:19,340 --> 00:22:26,200
containers could have different host

00:22:21,320 --> 00:22:29,000
names now what I could then do is say

00:22:26,200 --> 00:22:32,380
let's find out the actual PID of that

00:22:29,000 --> 00:22:39,650
she'll and then down here I could say

00:22:32,380 --> 00:22:42,740
pseudo any center - t I want to go into

00:22:39,650 --> 00:22:46,420
the namespace of the target process with

00:22:42,740 --> 00:22:55,700
PID 7 8 3 3 and I want to go into the

00:22:46,420 --> 00:22:59,960
UTS namespace of that process okay so

00:22:55,700 --> 00:23:03,200
now I'm inside their new volunteer list

00:22:59,960 --> 00:23:08,330
I'm in the new UTS namespace and now

00:23:03,200 --> 00:23:10,090
when I type hostname we hope that I'm

00:23:08,330 --> 00:23:18,850
going to see something different and

00:23:10,090 --> 00:23:21,850
luckily for me we do all good so far

00:23:18,850 --> 00:23:21,850
ok

00:23:28,200 --> 00:23:38,250
okay so that's namespaces very briefly

00:23:33,970 --> 00:23:42,730
let's now look at user namespaces now

00:23:38,250 --> 00:23:46,120
excuse me the idea with user namespaces

00:23:42,730 --> 00:23:47,290
is that you can isolate user IDs and

00:23:46,120 --> 00:23:49,900
group IDs

00:23:47,290 --> 00:23:53,470
what this really means is you can have

00:23:49,900 --> 00:23:56,680
user IDs inside the user namespace that

00:23:53,470 --> 00:23:58,330
map to different user IDs outside the

00:23:56,680 --> 00:24:01,540
namespace and the same thing with group

00:23:58,330 --> 00:24:04,150
IDs and the interesting use case here or

00:24:01,540 --> 00:24:07,210
the interesting case here is you can

00:24:04,150 --> 00:24:08,950
have a process that has UID 0 inside the

00:24:07,210 --> 00:24:11,680
user name space but it has an

00:24:08,950 --> 00:24:15,040
unprivileged user ID outside the

00:24:11,680 --> 00:24:19,930
namespace and what that means is this

00:24:15,040 --> 00:24:22,330
process has super user powers inside the

00:24:19,930 --> 00:24:25,600
user namespace and I'm working towards

00:24:22,330 --> 00:24:28,590
explaining what actually that means okay

00:24:25,600 --> 00:24:34,810
but the point is this process has the

00:24:28,590 --> 00:24:39,490
powers of super user in some sense ok

00:24:34,810 --> 00:24:41,110
now user name spaces have hierarchical

00:24:39,490 --> 00:24:42,670
relationships what I'm trying to say

00:24:41,110 --> 00:24:44,440
there is each user name space has a

00:24:42,670 --> 00:24:45,880
parent user namespace which has a parent

00:24:44,440 --> 00:24:48,400
user namespace which has a parent user

00:24:45,880 --> 00:24:51,280
namespace and so on going back to the

00:24:48,400 --> 00:24:53,320
initial user namespace the way that this

00:24:51,280 --> 00:24:55,780
relationship gets created is when a news

00:24:53,320 --> 00:24:58,570
and namespace is created the parent of

00:24:55,780 --> 00:25:02,020
that new user namespace is the user name

00:24:58,570 --> 00:25:04,150
space of the process that created the

00:25:02,020 --> 00:25:06,750
new user namespace that's how that

00:25:04,150 --> 00:25:10,090
parental relationship gets established

00:25:06,750 --> 00:25:12,880
and the reason that this parental

00:25:10,090 --> 00:25:14,400
relationship matters is it's part of

00:25:12,880 --> 00:25:20,410
answering the question of how the

00:25:14,400 --> 00:25:21,610
capabilities work inside user namespaces

00:25:20,410 --> 00:25:23,320
and I'm probably not gonna get time to

00:25:21,610 --> 00:25:26,290
go into those details but I do have some

00:25:23,320 --> 00:25:28,570
in slides after the presentation that

00:25:26,290 --> 00:25:30,020
you could look at if you want to learn

00:25:28,570 --> 00:25:31,490
about those rules

00:25:30,020 --> 00:25:34,400
the point is this hierarchical

00:25:31,490 --> 00:25:38,720
relationship is part of determining how

00:25:34,400 --> 00:25:40,630
capabilities work so we've got the sort

00:25:38,720 --> 00:25:43,850
of situation in this picture then where

00:25:40,630 --> 00:25:46,010
we have namespaces that have child

00:25:43,850 --> 00:25:52,100
namespaces which have child namespaces

00:25:46,010 --> 00:25:55,820
and so on so we've got a hierarchy okay

00:25:52,100 --> 00:25:58,520
now when a new user name space is

00:25:55,820 --> 00:26:01,400
created using say the unshare command

00:25:58,520 --> 00:26:04,450
then the first process in that namespace

00:26:01,400 --> 00:26:08,270
has a full set of capabilities it is

00:26:04,450 --> 00:26:11,990
super user so to speak in their new user

00:26:08,270 --> 00:26:16,430
name space but but only inside that user

00:26:11,990 --> 00:26:19,610
name space okay and so what does that

00:26:16,430 --> 00:26:22,520
mean well we know there are a bunch of

00:26:19,610 --> 00:26:24,860
different namespace types and each one

00:26:22,520 --> 00:26:27,380
of those namespace types governs some

00:26:24,860 --> 00:26:30,170
kind of resource utsa namespaces govern

00:26:27,380 --> 00:26:33,140
host names mount namespaces govern mount

00:26:30,170 --> 00:26:36,470
points Network namespaces govern network

00:26:33,140 --> 00:26:39,290
resources and so on what we're going to

00:26:36,470 --> 00:26:43,370
see is a few more pieces that each one

00:26:39,290 --> 00:26:45,020
of these non user namespaces oh sorry

00:26:43,370 --> 00:26:48,860
I'll rephrase that each one of these non

00:26:45,020 --> 00:26:52,970
user namespace instances is owned by a

00:26:48,860 --> 00:26:56,000
particular user namespace instance so

00:26:52,970 --> 00:27:00,680
every known user name space belongs to

00:26:56,000 --> 00:27:03,530
some user name space and being super

00:27:00,680 --> 00:27:06,920
user inside a username space means you

00:27:03,530 --> 00:27:10,190
can do super user operations on the

00:27:06,920 --> 00:27:13,730
resources that are governed by the non

00:27:10,190 --> 00:27:15,860
username spaces that are owned by their

00:27:13,730 --> 00:27:18,230
username space I've got a picture coming

00:27:15,860 --> 00:27:24,260
up later on that'll make this idea

00:27:18,230 --> 00:27:26,060
clearer I hope now one of the things

00:27:24,260 --> 00:27:29,030
that you do when you create user name

00:27:26,060 --> 00:27:32,540
spaces is you have to set up user ID and

00:27:29,030 --> 00:27:34,640
group ID mappings and the idea is here

00:27:32,540 --> 00:27:37,130
what you're saying is that a certain set

00:27:34,640 --> 00:27:39,370
of user IDs or group IDs

00:27:37,130 --> 00:27:42,010
inside the namespace

00:27:39,370 --> 00:27:42,790
to some other set of name user IDs and

00:27:42,010 --> 00:27:46,780
group IDs

00:27:42,790 --> 00:27:48,820
outside the namespace and the way that

00:27:46,780 --> 00:27:51,310
this these mappings are set up is you

00:27:48,820 --> 00:27:53,200
you you can write and you can also read

00:27:51,310 --> 00:27:54,850
these files by the way but initially you

00:27:53,200 --> 00:27:58,390
have to write them to actually define

00:27:54,850 --> 00:27:59,080
the mappings proc bid UID map and proc

00:27:58,390 --> 00:28:02,050
bid

00:27:59,080 --> 00:28:04,090
GID map they respectable you find the

00:28:02,050 --> 00:28:10,360
user map user ID mappings and the group

00:28:04,090 --> 00:28:13,600
ID mappings every process has these

00:28:10,360 --> 00:28:15,580
files of course you've got multiple

00:28:13,600 --> 00:28:17,680
processes that are in the same user name

00:28:15,580 --> 00:28:20,950
space all these files are doing is

00:28:17,680 --> 00:28:23,250
providing a view of the same UID map or

00:28:20,950 --> 00:28:27,940
the same group ID map there is only one

00:28:23,250 --> 00:28:33,280
UID map or group ID map per user name

00:28:27,940 --> 00:28:38,230
space now for a lot of security reasons

00:28:33,280 --> 00:28:40,570
there are a heap of rules about how you

00:28:38,230 --> 00:28:42,670
update these files and I can't possibly

00:28:40,570 --> 00:28:43,900
go into all those rules right now I just

00:28:42,670 --> 00:28:46,630
want to say there are a lot of rules

00:28:43,900 --> 00:28:48,370
saying how you update those files and

00:28:46,630 --> 00:28:51,790
you can go and look in the user name

00:28:48,370 --> 00:28:56,470
spaces manual page 2 to find out about

00:28:51,790 --> 00:28:59,890
those rules but essentially the files

00:28:56,470 --> 00:29:04,480
consist of records that look like this 3

00:28:59,890 --> 00:29:07,960
numbers an ID inside the namespace maps

00:29:04,480 --> 00:29:11,410
to some ID outside the namespace and

00:29:07,960 --> 00:29:14,860
then a range of that mapping and the

00:29:11,410 --> 00:29:16,420
range says how many consecutive IDs

00:29:14,860 --> 00:29:20,620
should be mapped so you could have a

00:29:16,420 --> 00:29:23,140
mapping that says something like 0 1010

00:29:20,620 --> 00:29:26,740
and that would be saying the IDS from 0

00:29:23,140 --> 00:29:29,590
through to 9 inside the namespace map to

00:29:26,740 --> 00:29:34,660
1000 through to 1009 outside the

00:29:29,590 --> 00:29:37,960
namespace or a quite common mapping to

00:29:34,660 --> 00:29:40,720
see in in in in in many instances is

00:29:37,960 --> 00:29:43,750
what's called the root mapping and the

00:29:40,720 --> 00:29:47,620
root mapping says UID 0 inside this

00:29:43,750 --> 00:29:50,470
namespace maps to some unprivileged ID

00:29:47,620 --> 00:29:52,480
maybe 1000 for example outside the

00:29:50,470 --> 00:29:53,120
namespace and the range of the mapping

00:29:52,480 --> 00:29:57,320
is

00:29:53,120 --> 00:30:04,460
so only a single user ID is mapped okay

00:29:57,320 --> 00:30:07,370
rather than a range now you can create a

00:30:04,460 --> 00:30:11,510
user name space with the route mappings

00:30:07,370 --> 00:30:13,940
you say unshared - you user name space -

00:30:11,510 --> 00:30:15,950
are to say I want the route mappings and

00:30:13,940 --> 00:30:17,960
if I do that from the shell and then

00:30:15,950 --> 00:30:22,340
look at what I've got I'll see something

00:30:17,960 --> 00:30:24,860
like this where first of all then this

00:30:22,340 --> 00:30:29,180
is an unprivileged user user ID 1000 and

00:30:24,860 --> 00:30:33,350
then I've said create a user name space

00:30:29,180 --> 00:30:35,270
unshared - capital u - R and just just

00:30:33,350 --> 00:30:37,610
to make things a bit easier to

00:30:35,270 --> 00:30:40,130
understand I've given the new shell a

00:30:37,610 --> 00:30:41,600
different prompt okay so that in the

00:30:40,130 --> 00:30:45,020
subsequent slides you can see you want

00:30:41,600 --> 00:30:47,090
talking about this new shell okay now I

00:30:45,020 --> 00:30:49,760
inside that new shell I then turn around

00:30:47,090 --> 00:30:52,610
and look at the UID map and the GID map

00:30:49,760 --> 00:30:54,920
that have been created for me and I see

00:30:52,610 --> 00:30:58,520
I've got the route mapping 0 inside the

00:30:54,920 --> 00:31:00,620
namespace 0 0 UID 0 inside the space

00:30:58,520 --> 00:31:02,990
maps - 1000 outside the namespace and

00:31:00,620 --> 00:31:09,260
the range of the mapping is 1 and the

00:31:02,990 --> 00:31:13,250
same thing for the GID map if I then

00:31:09,260 --> 00:31:17,840
turn around and look at the credentials

00:31:13,250 --> 00:31:19,430
of that process if from inside the shell

00:31:17,840 --> 00:31:21,380
so if the share from the shell we look

00:31:19,430 --> 00:31:24,140
at the credentials of that she'll I use

00:31:21,380 --> 00:31:25,550
the ID command I see that the shell has

00:31:24,140 --> 00:31:29,330
UID 0

00:31:25,550 --> 00:31:32,090
GID 0 and if I look in the proc bid

00:31:29,330 --> 00:31:35,030
status file one thing I can do with the

00:31:32,090 --> 00:31:37,430
proc pit status file is find out the

00:31:35,030 --> 00:31:39,410
processes capabilities

00:31:37,430 --> 00:31:41,660
ok so profit status has a lot of

00:31:39,410 --> 00:31:44,480
information about processes including a

00:31:41,660 --> 00:31:46,850
bunch of fields that tell us what are

00:31:44,480 --> 00:31:49,550
the processes capabilities and what I'm

00:31:46,850 --> 00:31:52,430
seeing here is this process has a set of

00:31:49,550 --> 00:31:53,870
effective capabilities expressed as a

00:31:52,430 --> 00:31:59,090
hexadecimal bitmask

00:31:53,870 --> 00:32:04,480
there's 9 FS there +3 that's 38 one bits

00:31:59,090 --> 00:32:04,480
this process has all capabilities

00:32:05,680 --> 00:32:14,780
now what do they want to do is look at

00:32:10,640 --> 00:32:17,450
the the PID of that new shell it's got a

00:32:14,780 --> 00:32:21,170
certain PID and then from a shell in the

00:32:17,450 --> 00:32:24,620
initial username space I don't look at

00:32:21,170 --> 00:32:26,540
the credentials of that of that process

00:32:24,620 --> 00:32:27,890
now from the process that's in the

00:32:26,540 --> 00:32:32,150
initial username space which is the

00:32:27,890 --> 00:32:35,420
parent of the new username space I see a

00:32:32,150 --> 00:32:38,170
different picture from this username

00:32:35,420 --> 00:32:42,620
space the processor also has credentials

00:32:38,170 --> 00:32:44,870
1000 ok because outside the username

00:32:42,620 --> 00:32:56,450
space in the parent username space 0

00:32:44,870 --> 00:33:00,140
mapped to 1,000 okay now if we go back

00:32:56,450 --> 00:33:02,090
to the shell in the initial sorry in the

00:33:00,140 --> 00:33:05,540
second username space we might say hey

00:33:02,090 --> 00:33:08,150
I've got a little capabilities maybe I

00:33:05,540 --> 00:33:11,840
can change the host name but if I try

00:33:08,150 --> 00:33:14,210
and do that I get an error okay you need

00:33:11,840 --> 00:33:17,840
to be root to change the host name but

00:33:14,210 --> 00:33:19,810
you know we had UID 0 we had the

00:33:17,840 --> 00:33:23,120
required capability which is by the way

00:33:19,810 --> 00:33:25,570
sadly caps is admin but that's another

00:33:23,120 --> 00:33:28,640
story for another talk

00:33:25,570 --> 00:33:32,000
the thing is though this shell isn't a

00:33:28,640 --> 00:33:38,240
new username space but it's still in the

00:33:32,000 --> 00:33:40,940
initial UTS namespace okay and UTS

00:33:38,240 --> 00:33:43,640
namespaces are what govern the host name

00:33:40,940 --> 00:33:46,850
so this let's go and look at that

00:33:43,640 --> 00:33:48,590
situation a bit more closely so I said

00:33:46,850 --> 00:33:50,930
that when a new process is created in a

00:33:48,590 --> 00:33:53,270
news namespace that first process gets a

00:33:50,930 --> 00:33:57,380
full set of capabilities but those

00:33:53,270 --> 00:34:00,140
capabilities only apply for resources

00:33:57,380 --> 00:34:05,000
that are governed by the user namespace

00:34:00,140 --> 00:34:10,570
and I mentioned this idea before that

00:34:05,000 --> 00:34:14,060
each non Newser namespace is owned by

00:34:10,570 --> 00:34:15,409
some user name space and the idea is

00:34:14,060 --> 00:34:16,650
that when a non-user namespace is

00:34:15,409 --> 00:34:20,310
created

00:34:16,650 --> 00:34:23,460
it's owned by the username space of the

00:34:20,310 --> 00:34:28,860
process that created the new non

00:34:23,460 --> 00:34:31,230
username space and the idea is then that

00:34:28,860 --> 00:34:34,740
if a process tries to do operations on

00:34:31,230 --> 00:34:37,560
some resource that requires privilege

00:34:34,740 --> 00:34:40,920
the kernel as well which which which

00:34:37,560 --> 00:34:45,120
namespace governs that resource and in

00:34:40,920 --> 00:34:48,030
which username space owns that that

00:34:45,120 --> 00:34:50,190
username space so to make this concrete

00:34:48,030 --> 00:34:51,900
with an example let's look at the setup

00:34:50,190 --> 00:34:56,010
I've got a command here I'm going to use

00:34:51,900 --> 00:34:58,680
unshare - u capital u creating username

00:34:56,010 --> 00:35:03,210
space with root mappings that's the - R

00:34:58,680 --> 00:35:06,480
and then - you at the same time create a

00:35:03,210 --> 00:35:08,780
new UTS namespace and I'm gonna run some

00:35:06,480 --> 00:35:11,760
program I don't care what the program is

00:35:08,780 --> 00:35:17,670
if I do that I end up in a situation

00:35:11,760 --> 00:35:19,290
like this we've got some we've got some

00:35:17,670 --> 00:35:21,830
user name spaces and we've got some non

00:35:19,290 --> 00:35:23,490
user name spaces now to begin with

00:35:21,830 --> 00:35:25,650
before we did anything

00:35:23,490 --> 00:35:27,540
there was the initial user namespace the

00:35:25,650 --> 00:35:32,600
initial user namespace that was created

00:35:27,540 --> 00:35:36,180
the boot time and as well at boot time

00:35:32,600 --> 00:35:41,070
whoops excuse me there were a number of

00:35:36,180 --> 00:35:43,620
non initial namespaces created there was

00:35:41,070 --> 00:35:45,720
an initial UTS namespace an initial

00:35:43,620 --> 00:35:48,750
network names based on initial mount

00:35:45,720 --> 00:35:50,550
namespace an initial IPC namespace

00:35:48,750 --> 00:35:53,460
initial C group namespace and so on

00:35:50,550 --> 00:35:54,720
those six other namespace types there

00:35:53,460 --> 00:35:56,970
were initial instances of those

00:35:54,720 --> 00:36:02,100
namespace types and they were all owned

00:35:56,970 --> 00:36:04,620
by the initial user namespace now when I

00:36:02,100 --> 00:36:07,050
ran my shell command to create a new xur

00:36:04,620 --> 00:36:11,010
namespace what that did was create a new

00:36:07,050 --> 00:36:13,440
namespace here I did this as user ID

00:36:11,010 --> 00:36:18,090
1000 so the new user namespace is owned

00:36:13,440 --> 00:36:19,590
by user ID 1000 and it's a child of the

00:36:18,090 --> 00:36:21,270
initial username space because that's

00:36:19,590 --> 00:36:24,270
how things work when a new surname space

00:36:21,270 --> 00:36:27,690
is created its parent is the username

00:36:24,270 --> 00:36:29,950
space of the process that created the

00:36:27,690 --> 00:36:31,869
Newser namespace

00:36:29,950 --> 00:36:35,290
and at the same time I created the new

00:36:31,869 --> 00:36:38,530
username space I also said I want to

00:36:35,290 --> 00:36:41,799
create a new UTS namespace and because I

00:36:38,530 --> 00:36:45,549
did this at the same time that new UTS

00:36:41,799 --> 00:36:47,400
namespace is owned by the new user

00:36:45,549 --> 00:36:51,880
namespace

00:36:47,400 --> 00:36:55,270
now then I've got my process that I

00:36:51,880 --> 00:36:58,420
created inks whatever some program I ran

00:36:55,270 --> 00:36:59,530
now that process because I created it

00:36:58,420 --> 00:37:01,599
with because I created the username

00:36:59,530 --> 00:37:04,299
space with route mappings that process

00:37:01,599 --> 00:37:06,160
has an effective user ID of zero inside

00:37:04,299 --> 00:37:08,319
the namespace but outside the namespace

00:37:06,160 --> 00:37:11,440
the effective user ID mapped to some

00:37:08,319 --> 00:37:16,319
unprivileged user ID in my case 1000 and

00:37:11,440 --> 00:37:19,569
this process has all capabilities and

00:37:16,319 --> 00:37:22,089
that's what this notation equals EP says

00:37:19,569 --> 00:37:30,000
this process has all permitted and

00:37:22,089 --> 00:37:34,420
effective capabilities now whoops now

00:37:30,000 --> 00:37:38,049
suppose this process inks tried to

00:37:34,420 --> 00:37:40,980
change the host name to change the host

00:37:38,049 --> 00:37:43,299
name indi have a certain capability and

00:37:40,980 --> 00:37:44,589
in order to change the host name when

00:37:43,299 --> 00:37:47,230
this process tries to change the host

00:37:44,589 --> 00:37:50,589
name the colonel says well host names

00:37:47,230 --> 00:37:52,839
are governed by UTS name spaces which

00:37:50,589 --> 00:37:55,720
UTS namespace is this process a member

00:37:52,839 --> 00:37:59,170
of and the answer is it's a member of

00:37:55,720 --> 00:38:01,809
the studious namespace and then the

00:37:59,170 --> 00:38:03,069
colonel says well which UTS namespace oh

00:38:01,809 --> 00:38:06,849
sorry

00:38:03,069 --> 00:38:09,970
which user namespace owns this UTS

00:38:06,849 --> 00:38:12,880
namespace and the answer is this one and

00:38:09,970 --> 00:38:16,059
then the Colonel's question is well what

00:38:12,880 --> 00:38:18,880
capabilities does this process have in

00:38:16,059 --> 00:38:21,099
their user name space and the answer is

00:38:18,880 --> 00:38:23,680
that process lives in the user name

00:38:21,099 --> 00:38:26,079
space and it has all capabilities

00:38:23,680 --> 00:38:28,390
because that's by definition how things

00:38:26,079 --> 00:38:31,059
work for a new the first process in a

00:38:28,390 --> 00:38:34,150
newsie namespace so the answer is this

00:38:31,059 --> 00:38:38,799
process can change the host name that'll

00:38:34,150 --> 00:38:42,860
succeed now suppose instead this process

00:38:38,799 --> 00:38:46,490
tries to bind a protist network port 1

00:38:42,860 --> 00:38:48,530
ports less than 1024 to do that you need

00:38:46,490 --> 00:38:53,530
to be privileged specifically you near

00:38:48,530 --> 00:38:55,970
the capability cap net bind service so

00:38:53,530 --> 00:38:58,130
if this process tries to bind a

00:38:55,970 --> 00:38:59,720
privileged port the colonel says well

00:38:58,130 --> 00:39:03,140
British ports they are governed by

00:38:59,720 --> 00:39:05,240
network namespaces which network

00:39:03,140 --> 00:39:10,130
namespace does this process reside and

00:39:05,240 --> 00:39:12,590
and the answer is it loose in this one

00:39:10,130 --> 00:39:15,110
and then the colonel says well which

00:39:12,590 --> 00:39:18,700
username face owns that network

00:39:15,110 --> 00:39:21,410
namespace and the answer is the initial

00:39:18,700 --> 00:39:25,220
user namespace and then the Colonel's

00:39:21,410 --> 00:39:28,990
question is what capabilities does this

00:39:25,220 --> 00:39:31,370
process have in that user namespace and

00:39:28,990 --> 00:39:35,030
the first part of the answer is this

00:39:31,370 --> 00:39:37,310
process has all capabilities but it's

00:39:35,030 --> 00:39:39,800
not a member of their username space so

00:39:37,310 --> 00:39:43,910
it doesn't have any capabilities in dad

00:39:39,800 --> 00:39:46,970
use namespace so it's not allowed to

00:39:43,910 --> 00:39:48,740
change the network to do the published

00:39:46,970 --> 00:39:57,800
network operation in this case bind a

00:39:48,740 --> 00:40:00,050
provision network port okay now there

00:39:57,800 --> 00:40:03,140
are api's that you can use to discover

00:40:00,050 --> 00:40:04,430
these relationships between namespaces I

00:40:03,140 --> 00:40:06,470
don't want to go into the details there

00:40:04,430 --> 00:40:09,380
I've got a blog post about it I've even

00:40:06,470 --> 00:40:13,610
got a nice little go program that you

00:40:09,380 --> 00:40:15,500
can use to discover these these

00:40:13,610 --> 00:40:17,240
relationships all this code is on my

00:40:15,500 --> 00:40:19,940
website the the details are in the in

00:40:17,240 --> 00:40:21,890
slide the slides are on the on my

00:40:19,940 --> 00:40:25,490
website as well but the code is there

00:40:21,890 --> 00:40:31,850
what I want to do is just then try this

00:40:25,490 --> 00:40:34,760
out with another live demo where I'll

00:40:31,850 --> 00:40:37,400
start with a gain a cup of shells in the

00:40:34,760 --> 00:40:46,160
initial user namespace and up here I'll

00:40:37,400 --> 00:40:48,740
say unshare - you are youth so new user

00:40:46,160 --> 00:40:52,400
name space with root mappings new UTS

00:40:48,740 --> 00:40:53,880
namespace run a bash shell whoops got to

00:40:52,400 --> 00:40:57,980
do that of course

00:40:53,880 --> 00:40:57,980
with privilege

00:41:01,670 --> 00:41:15,160
our end and okay now that shot got a

00:41:13,220 --> 00:41:20,960
certain peer ten minutes thank you

00:41:15,160 --> 00:41:25,730
that shells got a certain PID now down

00:41:20,960 --> 00:41:35,560
here I'm going to say thank you this

00:41:25,730 --> 00:41:39,860
also as super user go run namespaces go

00:41:35,560 --> 00:41:43,130
and their namespaces just to keep life

00:41:39,860 --> 00:41:45,380
simple I'm going to just list show any

00:41:43,130 --> 00:41:47,870
certain namespaces I'll say I want to

00:41:45,380 --> 00:41:49,900
see user name spaces UTSA nine spaces

00:41:47,870 --> 00:41:53,930
and just for illustration let's say

00:41:49,900 --> 00:41:57,890
network news but network no spaces as

00:41:53,930 --> 00:42:00,080
well and I want to see them both for the

00:41:57,890 --> 00:42:02,300
shells and the new username space and

00:42:00,080 --> 00:42:06,530
also for the shell down the bottom which

00:42:02,300 --> 00:42:08,300
is in the initial username space so say

00:42:06,530 --> 00:42:10,850
sure them for this shell and the initial

00:42:08,300 --> 00:42:12,440
user this the shell by the way is in in

00:42:10,850 --> 00:42:14,240
the bottom window is in the original

00:42:12,440 --> 00:42:17,390
initial username space in the initial

00:42:14,240 --> 00:42:25,840
UTS namespace and I want to see the same

00:42:17,390 --> 00:42:25,840
details for the shell on the top window

00:42:37,060 --> 00:42:44,900
okay now what this display is telling me

00:42:41,930 --> 00:42:47,560
is there are two namespaces here this is

00:42:44,900 --> 00:42:50,570
the initial user namespace just here and

00:42:47,560 --> 00:42:54,920
the indentation here is telling me this

00:42:50,570 --> 00:42:58,280
second user namespaces is a child of the

00:42:54,920 --> 00:43:02,420
initial user namespace and what I can

00:42:58,280 --> 00:43:05,510
see otherwise is there's a UTS namespace

00:43:02,420 --> 00:43:07,640
here that UTS namespace is owned by the

00:43:05,510 --> 00:43:10,670
second user namespace this is what the

00:43:07,640 --> 00:43:13,100
indentation is telling me and there's

00:43:10,670 --> 00:43:15,710
also some network namespaces involved

00:43:13,100 --> 00:43:17,180
there's the initial network namespace

00:43:15,710 --> 00:43:19,700
which is in owned by the introducer

00:43:17,180 --> 00:43:22,730
namespace the initial UTS namespace

00:43:19,700 --> 00:43:27,320
which is also owned by the initial user

00:43:22,730 --> 00:43:30,490
namespace now the PID of the shell and

00:43:27,320 --> 00:43:33,740
the bottom window Dola Dola vir that is

00:43:30,490 --> 00:43:35,990
six three one eight so what we can see

00:43:33,740 --> 00:43:38,540
is this shell the in the bottom window

00:43:35,990 --> 00:43:40,640
is in the initial user namespace it's in

00:43:38,540 --> 00:43:43,880
the initial network no space it's in the

00:43:40,640 --> 00:43:47,390
initial UTS namespace whereas the shell

00:43:43,880 --> 00:43:50,600
in the top window it's in the new user

00:43:47,390 --> 00:43:53,869
namespace it's in the new UTS namespace

00:43:50,600 --> 00:44:00,080
but what you can see is it is still in

00:43:53,869 --> 00:44:03,290
the initial network namespace okay I

00:44:00,080 --> 00:44:05,330
find being able to visualize this stuff

00:44:03,290 --> 00:44:08,560
which is why I wrote this program saves

00:44:05,330 --> 00:44:08,560
you from a bit of insanity

00:44:16,990 --> 00:44:24,079
okay I'm so I will wrap up in just a

00:44:21,619 --> 00:44:28,039
couple minutes that the the thing about

00:44:24,079 --> 00:44:30,849
user name spaces is what they do is give

00:44:28,039 --> 00:44:35,299
the new process in the news a namespace

00:44:30,849 --> 00:44:38,270
Super User powers and it's critical that

00:44:35,299 --> 00:44:40,640
those super user powers only operate in

00:44:38,270 --> 00:44:42,140
the news name space that they can only

00:44:40,640 --> 00:44:44,799
do operation that the privileged process

00:44:42,140 --> 00:44:47,270
can don't only do operations on

00:44:44,799 --> 00:44:50,119
resources that are governed by their

00:44:47,270 --> 00:44:51,740
user name space so there was the kernel

00:44:50,119 --> 00:44:55,299
developer concern with all of the stuff

00:44:51,740 --> 00:44:58,039
spent about six years of his life

00:44:55,299 --> 00:45:02,270
bringing user namespaces to fruition

00:44:58,039 --> 00:45:04,130
because people were really scared if

00:45:02,270 --> 00:45:06,319
there's some way that this process that

00:45:04,130 --> 00:45:09,079
gets privileges could somehow use them

00:45:06,319 --> 00:45:10,670
outside the user namespace there to be

00:45:09,079 --> 00:45:14,059
really bad and we don't want that to

00:45:10,670 --> 00:45:16,730
happen okay but the thing is using their

00:45:14,059 --> 00:45:19,490
space implementation touched a heap of

00:45:16,730 --> 00:45:21,829
kernel code and people were carefully

00:45:19,490 --> 00:45:24,619
took took a long time over it but you

00:45:21,829 --> 00:45:29,930
know excuse me maybe there was some

00:45:24,619 --> 00:45:31,579
corner case that people missed okay well

00:45:29,930 --> 00:45:33,289
it turns out there were a few corner

00:45:31,579 --> 00:45:36,260
cases like this there have been cases

00:45:33,289 --> 00:45:39,200
where somehow the privilege could leak

00:45:36,260 --> 00:45:41,539
out into the outside into the initial

00:45:39,200 --> 00:45:44,059
user namespace to let you do an

00:45:41,539 --> 00:45:46,010
unprivileged user do product operations

00:45:44,059 --> 00:45:48,140
in the initial user name space that they

00:45:46,010 --> 00:45:50,150
couldn't formally do that there are very

00:45:48,140 --> 00:45:53,240
odd corner cases some of them are not

00:45:50,150 --> 00:45:55,460
very easy to actually exploit but they

00:45:53,240 --> 00:45:57,589
they these problems have been found they

00:45:55,460 --> 00:45:59,630
have also been fixed there haven't been

00:45:57,589 --> 00:46:01,520
so many of them lately so perhaps

00:45:59,630 --> 00:46:05,029
perhaps we found fixed most of the

00:46:01,520 --> 00:46:07,579
problems by now that's let's hope the

00:46:05,029 --> 00:46:13,220
key point here is that user name spaces

00:46:07,579 --> 00:46:17,059
now allow privileged processes sorry

00:46:13,220 --> 00:46:20,569
unproduced to execute code paths and the

00:46:17,059 --> 00:46:23,480
kernel that formerly only super user

00:46:20,569 --> 00:46:25,309
could exercise and there might have been

00:46:23,480 --> 00:46:27,290
problems with those code paths in the

00:46:25,309 --> 00:46:28,640
kernel but you know normal users

00:46:27,290 --> 00:46:33,680
couldn't try and test them out to see

00:46:28,640 --> 00:46:36,440
walk and we break but now they can okay

00:46:33,680 --> 00:46:38,810
so why why is all this stuff interesting

00:46:36,440 --> 00:46:41,120
why I user namespaces interesting well

00:46:38,810 --> 00:46:44,590
they let us do a lot of interesting

00:46:41,120 --> 00:46:48,350
things one is unprivileged containers

00:46:44,590 --> 00:46:50,270
run your docker as an unproduced own not

00:46:48,350 --> 00:46:53,000
necessary as a set user ID root program

00:46:50,270 --> 00:46:56,420
anymore or run your LXE container

00:46:53,000 --> 00:46:58,760
likewise as an unprivileged user but

00:46:56,420 --> 00:47:01,700
there's a bunch of other interesting use

00:46:58,760 --> 00:47:04,040
cases as well for instance chrome used

00:47:01,700 --> 00:47:05,810
to do its sandboxing set up at

00:47:04,040 --> 00:47:08,900
sandboxing for things like the renderer

00:47:05,810 --> 00:47:12,110
process using set UID root programs say

00:47:08,900 --> 00:47:13,880
UID root programs are always potentially

00:47:12,110 --> 00:47:16,940
dangerous things if we can get rid of

00:47:13,880 --> 00:47:19,580
them somehow it's a good thing well

00:47:16,940 --> 00:47:22,070
nowadays we can replace those set user

00:47:19,580 --> 00:47:24,440
ID root programs with the use of user

00:47:22,070 --> 00:47:26,770
namespaces to achieve the same result

00:47:24,440 --> 00:47:29,270
that is required for the sandboxing

00:47:26,770 --> 00:47:30,860
another you interesting use case is a

00:47:29,270 --> 00:47:36,260
user name space at the bottom there that

00:47:30,860 --> 00:47:38,090
has this UID map unproduced ID maps to

00:47:36,260 --> 00:47:43,460
the same ID outside then space for a

00:47:38,090 --> 00:47:47,660
range of one UID 0 doesn't exist in this

00:47:43,460 --> 00:47:51,220
namespace there can be no concept of a

00:47:47,660 --> 00:47:54,290
privileged process inside this namespace

00:47:51,220 --> 00:47:57,470
from a security perspective depths and

00:47:54,290 --> 00:47:59,420
interesting guarantee you know that you

00:47:57,470 --> 00:48:02,210
can never get privilege escalation

00:47:59,420 --> 00:48:05,990
inside that username space because there

00:48:02,210 --> 00:48:14,510
is no concept of an elevated privilege

00:48:05,990 --> 00:48:17,420
because there is no UID 0 you can do

00:48:14,510 --> 00:48:19,700
chroot style manipulations but better

00:48:17,420 --> 00:48:21,470
with username spaces i won't try and go

00:48:19,700 --> 00:48:23,840
into that if you know what fake root is

00:48:21,470 --> 00:48:25,640
if you have a debian background where

00:48:23,840 --> 00:48:27,800
you can do fake root but without having

00:48:25,640 --> 00:48:29,360
to do the the LD preload magic you just

00:48:27,800 --> 00:48:31,970
create and use a namespace that has the

00:48:29,360 --> 00:48:33,200
required mappings I won't try and go

00:48:31,970 --> 00:48:34,660
into the details there if you don't know

00:48:33,200 --> 00:48:36,760
what fake rooters

00:48:34,660 --> 00:48:38,260
but then there's a couple of other

00:48:36,760 --> 00:48:39,910
interesting programs that have appeared

00:48:38,260 --> 00:48:42,430
in the last few years as well

00:48:39,910 --> 00:48:44,220
fire jail and flat pack I'm just curious

00:48:42,430 --> 00:48:47,980
by the way who's come across fire jail

00:48:44,220 --> 00:48:51,880
how many people okay if it's getting to

00:48:47,980 --> 00:48:58,000
be more known flat-pack wow it really

00:48:51,880 --> 00:49:00,040
has lifted off okay and the thing is a

00:48:58,000 --> 00:49:01,930
lot of these name spaces especially in

00:49:00,040 --> 00:49:04,540
the mid-2000s were added with the

00:49:01,930 --> 00:49:06,060
container use case in mind but each user

00:49:04,540 --> 00:49:08,350
name each name space type was

00:49:06,060 --> 00:49:09,820
implemented independently and see groups

00:49:08,350 --> 00:49:13,180
weren't implemented independently as

00:49:09,820 --> 00:49:15,070
well and after then after people had

00:49:13,180 --> 00:49:16,680
done the container thing people ask oh

00:49:15,070 --> 00:49:20,260
we can combine these features in

00:49:16,680 --> 00:49:22,630
different ways and these are two really

00:49:20,260 --> 00:49:24,820
interesting use cases for combining

00:49:22,630 --> 00:49:26,590
these features to create completely

00:49:24,820 --> 00:49:27,670
different things not wonderfully matte

00:49:26,590 --> 00:49:29,830
containers anymore we're talking about

00:49:27,670 --> 00:49:32,890
you know generalized sandboxing of

00:49:29,830 --> 00:49:35,200
applications or redoing the way we

00:49:32,890 --> 00:49:39,580
package applications which is what of

00:49:35,200 --> 00:49:40,720
course flat Bank does now if you're

00:49:39,580 --> 00:49:43,450
interested in more information about

00:49:40,720 --> 00:49:46,120
namespaces I wrote in there a series of

00:49:43,450 --> 00:49:49,480
articles on lwe now a few years ago

00:49:46,120 --> 00:49:51,460
which are still reasonably current it's

00:49:49,480 --> 00:49:53,830
quite a long series of articles it's

00:49:51,460 --> 00:49:55,510
also nowadays a reasonably decent set of

00:49:53,830 --> 00:49:59,800
manual pages list I like to think

00:49:55,510 --> 00:50:03,010
they're decent and something that I

00:49:59,800 --> 00:50:06,730
didn't write but I highly recommend is a

00:50:03,010 --> 00:50:09,790
wonderful blog post by a woman in

00:50:06,730 --> 00:50:14,550
California Lizzy Dixon Linux containers

00:50:09,790 --> 00:50:16,660
in five hundred lines of code and I

00:50:14,550 --> 00:50:19,570
think she says at the top of sunlight

00:50:16,660 --> 00:50:23,620
it's 500 lines of code and 3000 lines of

00:50:19,570 --> 00:50:25,360
explanation it's a very annotated

00:50:23,620 --> 00:50:27,760
listing of how do you do the container

00:50:25,360 --> 00:50:29,520
thing on Linux and the point is doing

00:50:27,760 --> 00:50:32,590
the container thing on Linux is

00:50:29,520 --> 00:50:35,320
relatively speaking simple it doesn't

00:50:32,590 --> 00:50:37,630
require a lot of code to set up the

00:50:35,320 --> 00:50:38,620
namespaces to set up the C groups to set

00:50:37,630 --> 00:50:41,800
the other bits and pieces that you need

00:50:38,620 --> 00:50:43,960
to put a process in what we think of as

00:50:41,800 --> 00:50:47,620
being a container and this is an

00:50:43,960 --> 00:50:49,730
annotated listing of those steps really

00:50:47,620 --> 00:50:53,060
worth reading

00:50:49,730 --> 00:50:54,950
what makes container systems so complex

00:50:53,060 --> 00:50:56,710
of course is all the orchestration and

00:50:54,950 --> 00:50:59,840
so on that goes with them

00:50:56,710 --> 00:51:01,970
okay and I'm done and I don't know if

00:50:59,840 --> 00:51:09,050
there's time for any questions maybe one

00:51:01,970 --> 00:51:16,730
or two questions or you can break for

00:51:09,050 --> 00:51:18,470
lunch okay that's not what see group

00:51:16,730 --> 00:51:21,070
namespaces are about there are about

00:51:18,470 --> 00:51:23,570
virtualizing a certain set of path names

00:51:21,070 --> 00:51:25,610
what I I do I don't try and get the

00:51:23,570 --> 00:51:27,080
details but actually see secret

00:51:25,610 --> 00:51:28,970
namespaces are not about putting secrets

00:51:27,080 --> 00:51:30,710
in namespaces they're about virtualizing

00:51:28,970 --> 00:51:32,420
path names and the concept once you dig

00:51:30,710 --> 00:51:34,460
down to it once you know what C groups

00:51:32,420 --> 00:51:41,740
are the concept of secret namespaces is

00:51:34,460 --> 00:51:41,740
super simple well that was easy

00:51:43,420 --> 00:51:50,870
don't down down the middle here yes who

00:51:48,410 --> 00:51:52,910
said you can create a user name space by

00:51:50,870 --> 00:51:54,950
being unprivileged process is there a

00:51:52,910 --> 00:51:56,000
way to limit that some I want to just

00:51:54,950 --> 00:51:58,400
check what you see there blinking can

00:51:56,000 --> 00:52:00,620
you repeat those questions from that you

00:51:58,400 --> 00:52:02,840
can create a user name space as an

00:52:00,620 --> 00:52:04,700
unprivileged process yes has none

00:52:02,840 --> 00:52:06,380
produced yes from an unproduced person

00:52:04,700 --> 00:52:09,380
is there a way to limit that somehow or

00:52:06,380 --> 00:52:13,850
like so there's a couple of ways of

00:52:09,380 --> 00:52:15,830
doing this some kernels have like the

00:52:13,850 --> 00:52:17,960
Debian kernel for instance disabled user

00:52:15,830 --> 00:52:20,350
name spaces by default and there's a

00:52:17,960 --> 00:52:22,880
there's a proc file used to enable

00:52:20,350 --> 00:52:25,310
unprivileged user name spaces if you're

00:52:22,880 --> 00:52:29,120
if you're if you're a scaredy cat like

00:52:25,310 --> 00:52:30,680
parent that's one way

00:52:29,120 --> 00:52:32,480
there's also another mechanism where you

00:52:30,680 --> 00:52:35,510
can say I want to limit the number of

00:52:32,480 --> 00:52:37,430
name spaces of each type that can be

00:52:35,510 --> 00:52:39,500
created and I'll just say go and read

00:52:37,430 --> 00:52:41,630
the namespaces manual page to find out

00:52:39,500 --> 00:52:44,270
more about that but also when you build

00:52:41,630 --> 00:52:46,100
your kernel there a config operation or

00:52:44,270 --> 00:52:48,710
config options that you can use to

00:52:46,100 --> 00:52:53,150
disable or enable each kind of namespace

00:52:48,710 --> 00:52:56,230
type you're saying goodbye to the brave

00:52:53,150 --> 00:52:56,230
new world when you do that

00:53:01,000 --> 00:53:04,900
okay thank nor Nikoli alone yep thank

00:53:03,920 --> 00:53:05,910
you

00:53:04,900 --> 00:53:10,260
[Music]

00:53:05,910 --> 00:53:10,260
[Applause]

00:53:15,109 --> 00:53:17,170

YouTube URL: https://www.youtube.com/watch?v=83NOk8pmHi8


