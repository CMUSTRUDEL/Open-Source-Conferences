Title: Developing VK.com web API DSL with macros. Konstantin Stepanov
Publication date: 2019-02-06
Playlist: RustRush 2018
Description: 
	Konstantin is Rust enthusiast, speaker and former Minsk community organizer. He's maintainer of several crates.
Captions: 
	00:00:02,679 --> 00:00:13,030
I want to introduce my small open-source

00:00:07,720 --> 00:00:15,099
project it's a library called VK RS and

00:00:13,030 --> 00:00:18,610
the name of my presentation is

00:00:15,099 --> 00:00:22,869
developing in vk.com API DSL with

00:00:18,610 --> 00:00:32,739
markers in rust just a little bit

00:00:22,869 --> 00:00:38,469
information of myself ok so I I write

00:00:32,739 --> 00:00:41,559
code since 1991 and last time I tried to

00:00:38,469 --> 00:00:45,370
count number of languages I used to eat

00:00:41,559 --> 00:00:51,839
it was around to any of them and I'm in

00:00:45,370 --> 00:00:57,730
love draw since it was version 0.9 I was

00:00:51,839 --> 00:01:03,100
organizer for first rod mincemeat up in

00:00:57,730 --> 00:01:11,580
2016 it was anniversary of first stable

00:01:03,100 --> 00:01:15,790
reg version of rust and so I really like

00:01:11,580 --> 00:01:21,660
rust for its community for its tools for

00:01:15,790 --> 00:01:26,530
its extensive type system and I tried to

00:01:21,660 --> 00:01:30,210
build several things we need and one of

00:01:26,530 --> 00:01:36,850
the things I tried to build in rust is

00:01:30,210 --> 00:01:40,720
vk.com API wrapper what what is vk.com

00:01:36,850 --> 00:01:45,730
for those who don't know about it it's a

00:01:40,720 --> 00:01:50,230
little bit of stats I want with it it's

00:01:45,730 --> 00:01:56,650
very large Russian social network the

00:01:50,230 --> 00:02:01,630
largest one that Russian Facebook and it

00:01:56,650 --> 00:02:05,110
has a very large bloated API Jason Bay

00:02:01,630 --> 00:02:09,489
sleep arrived around for more than 400

00:02:05,110 --> 00:02:13,829
and points last time I checked it out a

00:02:09,489 --> 00:02:15,490
lot of endpoints and constantly growing

00:02:13,829 --> 00:02:18,790
changing

00:02:15,490 --> 00:02:24,130
Alden points change its format it's very

00:02:18,790 --> 00:02:30,220
hard to cover all the API and you have

00:02:24,130 --> 00:02:34,930
to support it so I once I decided to

00:02:30,220 --> 00:02:41,830
develop a wrapper for this API for my

00:02:34,930 --> 00:02:45,850
own usage and I like building some

00:02:41,830 --> 00:02:50,350
scripts or some automation tools and for

00:02:45,850 --> 00:02:54,450
one of such two I decided it wrapper for

00:02:50,350 --> 00:03:00,850
this API also I wanted to try out new

00:02:54,450 --> 00:03:08,380
features so the names of the libraries

00:03:00,850 --> 00:03:11,770
Vic ARS is and to build wrapper I

00:03:08,380 --> 00:03:14,580
decided to use this cell it wasn't the

00:03:11,770 --> 00:03:18,250
first decision I started with small

00:03:14,580 --> 00:03:21,390
implementation but there were a lot of

00:03:18,250 --> 00:03:26,170
bulk of boilerplate code I had to write

00:03:21,390 --> 00:03:30,760
to wrap to describe every API endpoint a

00:03:26,170 --> 00:03:35,020
lot of boilerplate code so well I got

00:03:30,760 --> 00:03:39,340
tired of it and I decided to build their

00:03:35,020 --> 00:03:45,810
cell and my main point is how wonderful

00:03:39,340 --> 00:03:53,530
and sometimes terrible macro system in

00:03:45,810 --> 00:03:56,860
rust is so the first problem I had to

00:03:53,530 --> 00:04:00,820
use when I started to build the search

00:03:56,860 --> 00:04:04,500
was a couple of years ago I had to use

00:04:00,820 --> 00:04:10,230
natural because not all features

00:04:04,500 --> 00:04:16,570
stabilized and just a little bit of

00:04:10,230 --> 00:04:21,250
basic architecture description so the

00:04:16,570 --> 00:04:24,450
main had the many i/o VK is built on

00:04:21,250 --> 00:04:26,790
Jason it's just based a lot of objects

00:04:24,450 --> 00:04:31,650
to work with

00:04:26,790 --> 00:04:35,310
so I used serger library I tried to

00:04:31,650 --> 00:04:39,680
start with ROTC through lies but then I

00:04:35,310 --> 00:04:43,230
switched to sir death and served a Jason

00:04:39,680 --> 00:04:47,730
to dis realize data to sterilise data in

00:04:43,230 --> 00:04:51,360
quests I this I had to use a different

00:04:47,730 --> 00:04:57,120
approach because all the data all the

00:04:51,360 --> 00:05:05,880
arguments of requests actually URL based

00:04:57,120 --> 00:05:13,410
clear strings so to describe a pata

00:05:05,880 --> 00:05:16,560
request I created request rate and each

00:05:13,410 --> 00:05:23,730
each request is described as a struct

00:05:16,560 --> 00:05:27,300
and request straight implementation so

00:05:23,730 --> 00:05:31,760
and to build request it's actually

00:05:27,300 --> 00:05:35,400
common part in classic one I had to I

00:05:31,760 --> 00:05:39,090
decided to use build a pattern to

00:05:35,400 --> 00:05:41,010
simplify things and to implement build a

00:05:39,090 --> 00:05:44,040
pattern for all the different end points

00:05:41,010 --> 00:05:46,920
all the different requests I also had to

00:05:44,040 --> 00:05:49,530
write a lot of boilerplate code but in

00:05:46,920 --> 00:05:53,360
the end it's all down to a couple of

00:05:49,530 --> 00:05:58,320
markers for HTTP a personally I use

00:05:53,360 --> 00:06:05,610
request library for out of tradition its

00:05:58,320 --> 00:06:08,520
e int age or else to it I it's not that

00:06:05,610 --> 00:06:13,910
hard route to implementation it's harder

00:06:08,520 --> 00:06:18,660
to pronounce than you well and the main

00:06:13,910 --> 00:06:24,210
retain an API access point is controlled

00:06:18,660 --> 00:06:30,600
by struct rock client wrapping request

00:06:24,210 --> 00:06:34,500
client so another difficult difficult is

00:06:30,600 --> 00:06:37,470
working with API every API endpoint must

00:06:34,500 --> 00:06:41,610
be marked with concrete a clear version

00:06:37,470 --> 00:06:46,080
because the same request

00:06:41,610 --> 00:06:51,360
can you trade between API version if you

00:06:46,080 --> 00:06:54,300
take the same request but for one

00:06:51,360 --> 00:06:57,030
version IP of API and then you switch to

00:06:54,300 --> 00:07:00,170
another version format of the request

00:06:57,030 --> 00:07:05,220
format of the response can change and

00:07:00,170 --> 00:07:08,790
you have to pinpoint the API of each end

00:07:05,220 --> 00:07:11,460
point you're going to use also some mate

00:07:08,790 --> 00:07:16,370
endpoints require permissions so I have

00:07:11,460 --> 00:07:16,370
to encode permissions in my code as well

00:07:16,970 --> 00:07:26,280
so my presentation will be a little more

00:07:22,970 --> 00:07:32,550
technical than others a lot of examples

00:07:26,280 --> 00:07:39,330
here is an example of a PA call it's a

00:07:32,550 --> 00:07:44,820
very simple one and token all token

00:07:39,330 --> 00:07:54,540
actually is bound to some set of

00:07:44,820 --> 00:07:59,150
permissions required and so lines give

00:07:54,540 --> 00:08:03,290
an overview of how to make actual calls

00:07:59,150 --> 00:08:06,090
see the first call is just setting some

00:08:03,290 --> 00:08:10,920
status and the second call is search

00:08:06,090 --> 00:08:15,990
call retuning collection here is example

00:08:10,920 --> 00:08:19,790
of what to choose it's very large number

00:08:15,990 --> 00:08:26,000
of objects videos whisk it and serve

00:08:19,790 --> 00:08:26,000
everybody like them love them I guess so

00:08:26,540 --> 00:08:36,270
what and here is an example of my DSL

00:08:33,090 --> 00:08:40,229
usage it's a little bit cryptic I may

00:08:36,270 --> 00:08:44,810
have a clicker after all just as a point

00:08:40,229 --> 00:08:44,810
okay oh thank you

00:08:46,980 --> 00:09:06,310
so it's very uh it's it's on it's set on

00:08:58,200 --> 00:09:10,180
yep it works its request macro its video

00:09:06,310 --> 00:09:15,190
ad API call pinpointed to version for

00:09:10,180 --> 00:09:18,460
API version 5.44 requires video

00:09:15,190 --> 00:09:23,710
permissions building is output format

00:09:18,460 --> 00:09:27,640
and it has two or three three hexagons

00:09:23,710 --> 00:09:30,940
if three input arguments to owner this

00:09:27,640 --> 00:09:36,070
and one ID it's a little bit cryptic but

00:09:30,940 --> 00:09:37,870
actually it's the default value because

00:09:36,070 --> 00:09:43,120
every value should have a default

00:09:37,870 --> 00:09:47,589
because build a pattern is is used and

00:09:43,120 --> 00:09:50,350
you have to set up the default value

00:09:47,589 --> 00:09:56,920
when you built initially request object

00:09:50,350 --> 00:09:59,950
and this is the code the code to

00:09:56,920 --> 00:10:05,250
serialize with this thing in the string

00:09:59,950 --> 00:10:05,250
a default this

00:10:06,210 --> 00:10:14,020
this markers mean default default

00:10:11,040 --> 00:10:19,000
default implementation of the string and

00:10:14,020 --> 00:10:28,300
default implementation of two of default

00:10:19,000 --> 00:10:32,410
default just zero so and the result of

00:10:28,300 --> 00:10:35,950
the actual request is this way it just a

00:10:32,410 --> 00:10:42,850
simple get request in the end to add

00:10:35,950 --> 00:10:45,540
videos so I had a little bit of problems

00:10:42,850 --> 00:10:52,930
with markers the first problem was I

00:10:45,540 --> 00:10:57,450
wanted to use boring for better memory

00:10:52,930 --> 00:11:02,430
usage but you can just

00:10:57,450 --> 00:11:05,310
take token market at lifetime and pass

00:11:02,430 --> 00:11:10,350
it into macro so I have to generate

00:11:05,310 --> 00:11:16,260
types with lifetimes and boring syntax

00:11:10,350 --> 00:11:22,769
with lifetimes inside macros so the same

00:11:16,260 --> 00:11:25,950
goes to generic types also there are a

00:11:22,769 --> 00:11:30,930
lot of some beats of civilization logic

00:11:25,950 --> 00:11:37,320
I have to write myself instead of using

00:11:30,930 --> 00:11:39,690
some deriving and also documentation

00:11:37,320 --> 00:11:42,390
because standard way to document things

00:11:39,690 --> 00:11:45,899
in rust is document but you can generate

00:11:42,390 --> 00:11:49,829
just generate the comments in macros

00:11:45,899 --> 00:11:52,140
because their comments after all you

00:11:49,829 --> 00:11:55,730
just can degenerate comments in markers

00:11:52,140 --> 00:12:04,380
so I have to solve all those problems

00:11:55,730 --> 00:12:09,300
after all so well had I had to add

00:12:04,380 --> 00:12:12,600
another marker request rev it has two

00:12:09,300 --> 00:12:16,800
blocks its sized arguments and unsighted

00:12:12,600 --> 00:12:19,649
one actually its types on size types in

00:12:16,800 --> 00:12:22,860
it fields of of on seta

00:12:19,649 --> 00:12:25,740
turns out on sale tops it's true for

00:12:22,860 --> 00:12:32,209
example here default value is empty

00:12:25,740 --> 00:12:35,490
string and inside macro and reference

00:12:32,209 --> 00:12:40,350
generated lifetimes are generated and

00:12:35,490 --> 00:12:44,240
all the machinery is hidden inside of

00:12:40,350 --> 00:12:44,240
macro actually

00:12:45,740 --> 00:12:57,850
so four general types I have to do a lot

00:12:50,660 --> 00:13:01,010
of work because you see I have to build

00:12:57,850 --> 00:13:04,520
actually a real stream query string from

00:13:01,010 --> 00:13:08,450
when put arguments so I have to civilize

00:13:04,520 --> 00:13:13,490
every input value input arguments into

00:13:08,450 --> 00:13:19,910
string so let's help a macaw here which

00:13:13,490 --> 00:13:23,150
just preset processes all the glyphs you

00:13:19,910 --> 00:13:24,410
can see it's for example equal sign it's

00:13:23,150 --> 00:13:26,990
protest here

00:13:24,410 --> 00:13:30,800
it's a clause and implementations that's

00:13:26,990 --> 00:13:34,880
just the reference that set was just to

00:13:30,800 --> 00:13:40,180
string if it's not I can say to string

00:13:34,880 --> 00:13:45,560
and use the string limitation and for

00:13:40,180 --> 00:13:49,940
the same goes for vector for option so

00:13:45,560 --> 00:13:52,900
we just say this is work work of

00:13:49,940 --> 00:13:58,190
something else it just generates

00:13:52,900 --> 00:14:02,570
different code to its places T it places

00:13:58,190 --> 00:14:10,120
all their gene Mauch regenerated types

00:14:02,570 --> 00:14:16,370
from real types with generic arguments

00:14:10,120 --> 00:14:21,640
and for API documentation I this I sold

00:14:16,370 --> 00:14:25,730
it a really nice way I just went down to

00:14:21,640 --> 00:14:31,210
what real really documents mean the

00:14:25,730 --> 00:14:36,470
command suggests a Cintiq sugar around

00:14:31,210 --> 00:14:41,950
dog attribute so I judge you narrated

00:14:36,470 --> 00:14:45,680
doco to boots that said so oh I see so

00:14:41,950 --> 00:14:48,880
it's very nice in simple implementation

00:14:45,680 --> 00:14:51,260
I've had to split out documentation or

00:14:48,880 --> 00:14:55,300
attributes into several paths because

00:14:51,260 --> 00:14:57,899
you just can't have both string and

00:14:55,300 --> 00:15:04,029
macro

00:14:57,899 --> 00:15:06,160
arguments in the same token but it's

00:15:04,029 --> 00:15:08,170
works just fine and just glued up

00:15:06,160 --> 00:15:10,990
together in the documentation generated

00:15:08,170 --> 00:15:14,380
documentation and they have all the

00:15:10,990 --> 00:15:20,890
requests documented to the link to

00:15:14,380 --> 00:15:25,480
actual vk.com documentation here an

00:15:20,890 --> 00:15:30,269
example of its top of an iceberg it's

00:15:25,480 --> 00:15:35,860
the most basic input syntax for request

00:15:30,269 --> 00:15:38,980
and here's example of request ref which

00:15:35,860 --> 00:15:42,040
just generates for this blockage in u.s.

00:15:38,980 --> 00:15:44,740
simple types for vigil blog degenerates

00:15:42,040 --> 00:15:49,149
ties with lifetime savory type is made a

00:15:44,740 --> 00:15:54,730
reference with lifetime and all this

00:15:49,149 --> 00:15:57,700
generated inside a lot of its I ended up

00:15:54,730 --> 00:16:01,390
with more than 500 lines of macro

00:15:57,700 --> 00:16:07,860
definitions a lot of macro-evolution a

00:16:01,390 --> 00:16:12,329
lot of help democracy and I had to make

00:16:07,860 --> 00:16:17,740
think makes made some unusual approach

00:16:12,329 --> 00:16:20,320
for different route syntax features for

00:16:17,740 --> 00:16:24,910
example I had to use dark attribute

00:16:20,320 --> 00:16:28,770
instead of the commands or I had to work

00:16:24,910 --> 00:16:32,680
around an ability to pass lifetime

00:16:28,770 --> 00:16:37,870
tokens into markers I had to work around

00:16:32,680 --> 00:16:43,000
a lot of issues but what what the good

00:16:37,870 --> 00:16:46,029
point it's I want to thank rel

00:16:43,000 --> 00:16:52,870
developers for stabilizing procedural

00:16:46,029 --> 00:16:57,790
matters a table at least because before

00:16:52,870 --> 00:17:02,230
recently I had to use cogeneration to

00:16:57,790 --> 00:17:04,760
make a built-in stable roster kettle of

00:17:02,230 --> 00:17:12,699
template codes

00:17:04,760 --> 00:17:14,390
to use sir the user the cogent but after

00:17:12,699 --> 00:17:18,800
procedural mitosis

00:17:14,390 --> 00:17:23,089
Macross was stabilized the code is

00:17:18,800 --> 00:17:26,320
simplified really really well so I just

00:17:23,089 --> 00:17:30,740
I have just supports table rat without

00:17:26,320 --> 00:17:36,160
feature flags or Java and it works like

00:17:30,740 --> 00:17:41,810
charm that's actually all my hope it was

00:17:36,160 --> 00:17:46,910
quite an example of macro usage and

00:17:41,810 --> 00:17:57,140
implementation of the cell any questions

00:17:46,910 --> 00:17:59,570
I have ten minutes they say yeah thank

00:17:57,140 --> 00:18:03,350
you for your interest in presentation I

00:17:59,570 --> 00:18:06,860
would like to ask about such decays type

00:18:03,350 --> 00:18:10,100
level web based Web API they selves like

00:18:06,860 --> 00:18:14,720
Haskell servant library they allow you

00:18:10,100 --> 00:18:17,180
to describe your API as a type once and

00:18:14,720 --> 00:18:19,810
then generate both server implementation

00:18:17,180 --> 00:18:22,640
client implementation and possibly

00:18:19,810 --> 00:18:25,190
implement some traits like things to

00:18:22,640 --> 00:18:28,640
generate documentation then based on one

00:18:25,190 --> 00:18:33,260
API definitions it would it be possible

00:18:28,640 --> 00:18:36,380
with rust to do such things and could

00:18:33,260 --> 00:18:40,270
you somehow compare these type level

00:18:36,380 --> 00:18:42,770
details with your rust implementation I

00:18:40,270 --> 00:18:48,020
missed the first part what do you

00:18:42,770 --> 00:18:54,950
propose to generate type level API cells

00:18:48,020 --> 00:18:58,160
allow you to generate HTTP client and

00:18:54,950 --> 00:19:03,380
HTTP server implementations from type

00:18:58,160 --> 00:19:07,160
level definition of a API I guess so I

00:19:03,380 --> 00:19:11,630
guess so now that we have procedural

00:19:07,160 --> 00:19:14,510
markers and we have derived markers so I

00:19:11,630 --> 00:19:17,430
guess we can write procedural mark

00:19:14,510 --> 00:19:22,970
derived markers to derive some

00:19:17,430 --> 00:19:29,000
mutation of traits to help with it

00:19:22,970 --> 00:19:34,440
my very have specific skills because of

00:19:29,000 --> 00:19:39,150
mythix of actual the cameras vk.com api

00:19:34,440 --> 00:19:41,550
I'm not sure how I get I guess it's

00:19:39,150 --> 00:19:44,030
possible actually now it's possible even

00:19:41,550 --> 00:19:46,980
in stable or Asti there are some

00:19:44,030 --> 00:19:51,210
problems I see but it's it's possibly

00:19:46,980 --> 00:19:57,960
I'm thank you yeah welcome any more

00:19:51,210 --> 00:19:59,850
questions yep hey how much time has

00:19:57,960 --> 00:20:05,010
passed before start of development and

00:19:59,850 --> 00:20:07,950
before switch to the stable rest it's

00:20:05,010 --> 00:20:10,890
hard it's hard to answer because I

00:20:07,950 --> 00:20:14,280
developed it in several stages a lot of

00:20:10,890 --> 00:20:18,750
time spent between the stages I started

00:20:14,280 --> 00:20:22,890
developing it a couple of years ago it's

00:20:18,750 --> 00:20:26,540
not actually cover all the API endpoints

00:20:22,890 --> 00:20:29,850
a lot of people end points are uncovered

00:20:26,540 --> 00:20:38,390
active development took about maybe

00:20:29,850 --> 00:20:42,930
several months but at this point and

00:20:38,390 --> 00:20:47,580
implementing a new API endpoints wrapper

00:20:42,930 --> 00:20:49,980
is quite simple so it is it's important

00:20:47,580 --> 00:20:54,300
mechanical work to implement each and

00:20:49,980 --> 00:20:56,220
buoyant wrapper but it's it's takes a

00:20:54,300 --> 00:20:58,170
lot of time to develop to describe each

00:20:56,220 --> 00:21:03,210
of them because you have a lot of them

00:20:58,170 --> 00:21:03,720
and then I covered like one third of the

00:21:03,210 --> 00:21:08,780
old

00:21:03,720 --> 00:21:13,350
well yeah round one third you want yeah

00:21:08,780 --> 00:21:16,530
around 100 or 150 endpoints and we have

00:21:13,350 --> 00:21:19,920
more than 400 in points so you just have

00:21:16,530 --> 00:21:21,360
to sit and try it right right diesel

00:21:19,920 --> 00:21:24,000
descriptions

00:21:21,360 --> 00:21:30,410
it's it won't take that much time but

00:21:24,000 --> 00:21:35,690
it's dirty job thanks yeah welcome

00:21:30,410 --> 00:21:35,690

YouTube URL: https://www.youtube.com/watch?v=32ellQaUhzE


