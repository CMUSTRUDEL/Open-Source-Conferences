Title: Libp2p, a Rust peer-to-peer library. Pierre Krieger
Publication date: 2019-02-06
Playlist: RustRush 2018
Description: 
	Pierre is a Rust programmer at Parity. He previously worked on graphics programming, including several Rust crates for Vulkan and OpenGL. He is now working on peer-to-peer networking.

The Rust libp2p library is the Rust implementation of the libp2p protocol initially created by Protocol Labs. Based on futures and tokio, it allows one to easily create a decentralized peer-to-peer network. This talk will introduce you to the main concepts of a peer-to-peer network, and how to use libp2p.
Captions: 
	00:00:02,649 --> 00:00:08,860
good morning everyone my name is Pierre

00:00:05,050 --> 00:00:12,670
tiger also known as Tanaka on github and

00:00:08,860 --> 00:00:14,770
on Twitter and this is not my laptop I'm

00:00:12,670 --> 00:00:15,340
sick I hope I'm not going to lose my

00:00:14,770 --> 00:00:19,119
voice

00:00:15,340 --> 00:00:21,460
so everything is cool if you check my

00:00:19,119 --> 00:00:23,949
github I have a bunch of game dev

00:00:21,460 --> 00:00:25,990
related driver isms the graphics

00:00:23,949 --> 00:00:27,759
programming related libraries but I'm

00:00:25,990 --> 00:00:29,470
not going to talk about game dev of

00:00:27,759 --> 00:00:31,300
graphic or graphics programming at all

00:00:29,470 --> 00:00:34,120
today I'm going to talk about peer to

00:00:31,300 --> 00:00:37,360
peer networking and more specifically in

00:00:34,120 --> 00:00:40,350
leap p2p which is a peer-to-peer library

00:00:37,360 --> 00:00:43,210
written in rust to write peer-to-peer

00:00:40,350 --> 00:00:46,990
networks and you can find the link on

00:00:43,210 --> 00:00:50,650
github there so before diving into only

00:00:46,990 --> 00:00:53,050
p2p I'm going to explain how peer to

00:00:50,650 --> 00:00:56,110
peer network works

00:00:53,050 --> 00:00:57,820
it's made so I am going to assume that

00:00:56,110 --> 00:01:01,210
most of you know what a peer-to-peer

00:00:57,820 --> 00:01:03,640
network is already instead of having a

00:01:01,210 --> 00:01:06,250
central server where everyone connects

00:01:03,640 --> 00:01:08,729
to all the clients of a network the

00:01:06,250 --> 00:01:11,439
article a connect to each other which is

00:01:08,729 --> 00:01:13,210
better for a lot of stuff for a lot of

00:01:11,439 --> 00:01:17,289
reasons I'm not going to elaborate

00:01:13,210 --> 00:01:20,200
before no BitTorrent Bitcoin ipfs maybe

00:01:17,289 --> 00:01:23,499
I to P maybe I'm not sure check them out

00:01:20,200 --> 00:01:26,200
on Google and so how does a peer-to-peer

00:01:23,499 --> 00:01:30,700
network work it's made of four

00:01:26,200 --> 00:01:32,380
components first each node inch machine

00:01:30,700 --> 00:01:34,749
vac connects to the network is

00:01:32,380 --> 00:01:37,299
identified by its public key its

00:01:34,749 --> 00:01:40,240
cryptographic public key and I'm going

00:01:37,299 --> 00:01:44,259
to elaborate afterwards second component

00:01:40,240 --> 00:01:45,569
you need some system to discover how to

00:01:44,259 --> 00:01:49,719
connect to the network

00:01:45,569 --> 00:01:52,359
third component you need a messaging

00:01:49,719 --> 00:01:54,609
system a publish/subscribe system no two

00:01:52,359 --> 00:01:57,569
proper way to propagate events on the

00:01:54,609 --> 00:01:59,829
network and fourth component a

00:01:57,569 --> 00:02:02,709
distributed hash table if you want to

00:01:59,829 --> 00:02:05,649
actually store values but you don't need

00:02:02,709 --> 00:02:07,420
it all necessary needs a neuron system

00:02:05,649 --> 00:02:10,179
or DHT

00:02:07,420 --> 00:02:11,950
these are optional but you need one over

00:02:10,179 --> 00:02:16,549
two otherwise your system is quite

00:02:11,950 --> 00:02:19,159
useless so first of all public key

00:02:16,549 --> 00:02:23,810
that's what define the identity of a

00:02:19,159 --> 00:02:25,700
note it's as I say is identity there's

00:02:23,810 --> 00:02:27,980
no other way of identifying someone

00:02:25,700 --> 00:02:31,280
everyone is anonymous except for the

00:02:27,980 --> 00:02:35,120
public key so in a p2p a public key is

00:02:31,280 --> 00:02:40,670
represented by a string like that QA q

00:02:35,120 --> 00:02:43,129
mu tah etc etc and the format of this is

00:02:40,670 --> 00:02:45,470
basically the hash of a small data

00:02:43,129 --> 00:02:49,810
structure containing a public key which

00:02:45,470 --> 00:02:53,030
can be our Saed 251 9 or secti or any

00:02:49,810 --> 00:02:55,129
asymmetric encryption that exists it's

00:02:53,030 --> 00:02:58,609
designed to be very extensible in any

00:02:55,129 --> 00:03:01,970
p2p and this is strictly enforced so

00:02:58,609 --> 00:03:05,269
that you cannot prove you cannot steal

00:03:01,970 --> 00:03:07,040
someone's identity you need to prove

00:03:05,269 --> 00:03:11,720
that you are the owner of a public key

00:03:07,040 --> 00:03:15,579
when someone connects to you and the

00:03:11,720 --> 00:03:18,140
fact that this is the identity of a node

00:03:15,579 --> 00:03:21,560
makes it possible to be the reputation

00:03:18,140 --> 00:03:23,660
system on this just like on a public

00:03:21,560 --> 00:03:26,060
forum imagine you register to a forum

00:03:23,660 --> 00:03:28,549
you choose a nickname and then you pose

00:03:26,060 --> 00:03:31,220
to become popular etcetera etcetera and

00:03:28,549 --> 00:03:33,859
people get interest in you we do the

00:03:31,220 --> 00:03:35,419
same in peer-to-peer system you have you

00:03:33,859 --> 00:03:37,310
general - public key on the new

00:03:35,419 --> 00:03:40,819
participate in your network and you

00:03:37,310 --> 00:03:43,639
build trust and reputation and you get

00:03:40,819 --> 00:03:47,049
no more trustworthy and that's how we

00:03:43,639 --> 00:03:51,260
usually build more complicated system

00:03:47,049 --> 00:03:55,180
sorry I said I was sick so I'm going to

00:03:51,260 --> 00:03:55,180
cough a lot and I apologize another

00:03:55,569 --> 00:04:01,790
second component in a peer-to-peer

00:03:58,299 --> 00:04:04,699
system is the peer discovery mechanism

00:04:01,790 --> 00:04:07,099
so imagine you create a network you want

00:04:04,699 --> 00:04:10,280
people to connect to it but how does

00:04:07,099 --> 00:04:12,829
that work people need to know your

00:04:10,280 --> 00:04:16,489
programs to know how to connect to a

00:04:12,829 --> 00:04:19,669
network and we have various ways to do

00:04:16,489 --> 00:04:21,530
that you can first of all discover the

00:04:19,669 --> 00:04:24,860
nodes what are on same network as you

00:04:21,530 --> 00:04:27,860
and to do that we use em DNS or DNS as

00:04:24,860 --> 00:04:29,300
do so the way this works is you just

00:04:27,860 --> 00:04:33,740
broadcast a message

00:04:29,300 --> 00:04:36,350
over UDP on the UDP multicast IP and

00:04:33,740 --> 00:04:39,950
every node on the network receives this

00:04:36,350 --> 00:04:41,900
message and broadcast the IP and so no

00:04:39,950 --> 00:04:44,240
just discover each other and connect to

00:04:41,900 --> 00:04:46,280
each other that's how you do on a local

00:04:44,240 --> 00:04:47,720
network you cannot do that on the

00:04:46,280 --> 00:04:49,940
internet because you cannot just

00:04:47,720 --> 00:04:53,300
broadcast a message on the entire

00:04:49,940 --> 00:04:56,120
internet that's not going to work so to

00:04:53,300 --> 00:04:56,690
do that to connect to network on the

00:04:56,120 --> 00:04:59,660
Internet

00:04:56,690 --> 00:05:02,810
we need bootstrap nodes which are an IP

00:04:59,660 --> 00:05:05,510
address which we hard code inside the

00:05:02,810 --> 00:05:07,460
program and the program just connects to

00:05:05,510 --> 00:05:09,290
them you're going to say that's pretty

00:05:07,460 --> 00:05:12,590
centralized me to hard-code

00:05:09,290 --> 00:05:17,000
IP addresses in a program but we have no

00:05:12,590 --> 00:05:19,100
other choice unfortunately so that's a

00:05:17,000 --> 00:05:23,660
hack but we have no other way right now

00:05:19,100 --> 00:05:26,240
and that's the first step you know

00:05:23,660 --> 00:05:28,660
that's what gets you on the network but

00:05:26,240 --> 00:05:31,130
once you are connected you can just

00:05:28,660 --> 00:05:33,440
broadcast messages to the nodes you are

00:05:31,130 --> 00:05:35,540
connected to and share information about

00:05:33,440 --> 00:05:38,390
the network information on the topology

00:05:35,540 --> 00:05:40,880
you discover the rest of a network and

00:05:38,390 --> 00:05:45,070
then you build your whole network and

00:05:40,880 --> 00:05:48,860
you connect to thousands of other peers

00:05:45,070 --> 00:05:53,780
once you are connected third element you

00:05:48,860 --> 00:05:55,550
can start broadcasting messages so why

00:05:53,780 --> 00:05:57,910
do you want to broadcast messages for

00:05:55,550 --> 00:06:01,010
example in your chat application imagine

00:05:57,910 --> 00:06:03,140
your network is just simple chatting

00:06:01,010 --> 00:06:05,060
every time you type in research you

00:06:03,140 --> 00:06:07,430
broadcast it to everyone that's the

00:06:05,060 --> 00:06:09,890
first example second example in

00:06:07,430 --> 00:06:11,540
blockchain technologies if you are

00:06:09,890 --> 00:06:14,060
familiar with how a blockchain work

00:06:11,540 --> 00:06:16,220
wherever you generate a new transaction

00:06:14,060 --> 00:06:18,710
or a new block you also broadcast it to

00:06:16,220 --> 00:06:21,110
the entire network so that everyone

00:06:18,710 --> 00:06:23,930
knows about this transaction or block or

00:06:21,110 --> 00:06:25,790
as I just explained once you are

00:06:23,930 --> 00:06:27,590
connected to just spread information

00:06:25,790 --> 00:06:31,100
about what you know on the network so

00:06:27,590 --> 00:06:33,740
that no discover each other and events

00:06:31,100 --> 00:06:35,930
to begin topics so that we don't flood

00:06:33,740 --> 00:06:39,490
nodes that are not interested in

00:06:35,930 --> 00:06:47,949
something with garbage

00:06:39,490 --> 00:06:50,590
and fourth element a hash table so if

00:06:47,949 --> 00:06:53,710
you are familiar with ipfs ipfs is a way

00:06:50,590 --> 00:06:56,380
of distributing data and ipfs is based

00:06:53,710 --> 00:06:58,270
on a hash table and more specifically on

00:06:56,380 --> 00:07:01,720
Kadima which is the most popular hike

00:06:58,270 --> 00:07:03,970
algorithm for hash tables and what is

00:07:01,720 --> 00:07:06,430
the hash table it's basically the same

00:07:03,970 --> 00:07:10,090
as a house as a hash map in rust which

00:07:06,430 --> 00:07:12,639
associate keys with values just a key

00:07:10,090 --> 00:07:15,220
value store each Key has an Associated

00:07:12,639 --> 00:07:18,070
value the difference is that in a

00:07:15,220 --> 00:07:20,320
distributed hash table as its name says

00:07:18,070 --> 00:07:25,210
it's distributed which means that each

00:07:20,320 --> 00:07:27,120
node on his toes a partial view of hash

00:07:25,210 --> 00:07:30,789
table

00:07:27,120 --> 00:07:32,620
so and to determine which value you

00:07:30,789 --> 00:07:34,750
store you don't saw everything you

00:07:32,620 --> 00:07:37,630
install a partial set the determine

00:07:34,750 --> 00:07:40,599
which values you store you use your

00:07:37,630 --> 00:07:44,710
public key which I explained three size

00:07:40,599 --> 00:07:47,050
ago you saw up to 20 values and to the

00:07:44,710 --> 00:07:49,419
word sorry use the distance between your

00:07:47,050 --> 00:07:52,930
public key and bikini to store so he

00:07:49,419 --> 00:07:55,000
store up to 20 values which have one bit

00:07:52,930 --> 00:07:58,289
of difference between your PID and

00:07:55,000 --> 00:08:03,909
working you store plus up to 20 values

00:07:58,289 --> 00:08:06,849
whose he is two bits away from your PID

00:08:03,909 --> 00:08:09,310
and so on and so forth which means that

00:08:06,849 --> 00:08:12,070
in order to determine where to find a

00:08:09,310 --> 00:08:14,860
value you find the nodes whose public

00:08:12,070 --> 00:08:19,360
key is close to the value and you just

00:08:14,860 --> 00:08:22,120
ask these nodes for the public key the

00:08:19,360 --> 00:08:25,479
drawback of a DHT is that it's quite

00:08:22,120 --> 00:08:28,539
easy to attack unfortunately this whole

00:08:25,479 --> 00:08:31,479
system assumed that the whole network is

00:08:28,539 --> 00:08:34,029
not malicious but everyone's plays the

00:08:31,479 --> 00:08:37,360
game and there's a lot of research being

00:08:34,029 --> 00:08:40,380
done about how to make this more robust

00:08:37,360 --> 00:08:41,520
but right now we have no solution and

00:08:40,380 --> 00:08:44,890
[Music]

00:08:41,520 --> 00:08:48,430
yeah that's also a hack we are

00:08:44,890 --> 00:08:50,920
researching how to do that better and I

00:08:48,430 --> 00:08:53,200
showed the little diagram underneath to

00:08:50,920 --> 00:08:56,260
explain so these pakoras

00:08:53,200 --> 00:08:58,180
great but for example in a th TV Snowden

00:08:56,260 --> 00:09:00,880
story is to value of is snowed on it's

00:08:58,180 --> 00:09:04,030
obvious - and same for the others and

00:09:00,880 --> 00:09:09,490
you just query the node for which value

00:09:04,030 --> 00:09:11,770
you want based on its PID and after this

00:09:09,490 --> 00:09:14,880
please brief explanation I'm going to

00:09:11,770 --> 00:09:17,830
introduce leap p2p repeat - thing is

00:09:14,880 --> 00:09:21,520
basically something but does or what I

00:09:17,830 --> 00:09:25,720
explained automatically so what lipid B

00:09:21,520 --> 00:09:27,220
is is a framework library designed by

00:09:25,720 --> 00:09:29,290
company protocol labs

00:09:27,220 --> 00:09:31,780
that's the company that managed with

00:09:29,290 --> 00:09:34,720
specifications that people who created

00:09:31,780 --> 00:09:37,000
it initially and they are designing it

00:09:34,720 --> 00:09:41,080
as well you can find more information on

00:09:37,000 --> 00:09:44,050
the p2p dot io the origin of the p2p is

00:09:41,080 --> 00:09:49,320
that it's it was the networking system

00:09:44,050 --> 00:09:53,770
ipfs and ipfs uses go and Jas

00:09:49,320 --> 00:09:56,260
implementations which were initially

00:09:53,770 --> 00:09:59,050
part of ifs and were extracted into

00:09:56,260 --> 00:10:00,850
their own Finland named nippy to be what

00:09:59,050 --> 00:10:02,620
we've been doing at parity is write the

00:10:00,850 --> 00:10:05,950
rest implementation and what's what I'm

00:10:02,620 --> 00:10:08,890
present in today you can find the link

00:10:05,950 --> 00:10:12,120
on github there we started with one year

00:10:08,890 --> 00:10:16,030
ago approximately in October I think

00:10:12,120 --> 00:10:18,730
it's almost ready to be published we are

00:10:16,030 --> 00:10:21,790
going to publish version 0.1 next year

00:10:18,730 --> 00:10:24,340
but it's like a polished version it's

00:10:21,790 --> 00:10:26,980
not like a first draft but we just

00:10:24,340 --> 00:10:29,440
quickly publish it's something that's

00:10:26,980 --> 00:10:32,920
supposed to actually work if it doesn't

00:10:29,440 --> 00:10:36,100
please file issues but only beginning of

00:10:32,920 --> 00:10:38,590
next year it uses Tokyo we want it to be

00:10:36,100 --> 00:10:42,010
as fast as possible we wanted to be

00:10:38,590 --> 00:10:44,190
asynchronous we want to we want it to be

00:10:42,010 --> 00:10:46,720
possible we have hundreds of nodes

00:10:44,190 --> 00:10:51,940
connected to your machine without any

00:10:46,720 --> 00:10:55,780
performance issue hopefully and we're

00:10:51,940 --> 00:10:58,450
using it already at parity in what we

00:10:55,780 --> 00:10:59,950
call it substrate and polka dots I don't

00:10:58,450 --> 00:11:01,530
know if you heard of substrate and polka

00:10:59,950 --> 00:11:04,240
dot we are blockchain technologies and

00:11:01,530 --> 00:11:06,550
the p2p is the value networking system

00:11:04,240 --> 00:11:07,150
of substrate and polka dot and you can

00:11:06,550 --> 00:11:09,550
see it in our

00:11:07,150 --> 00:11:12,070
at telemetry that polka dot IO if you

00:11:09,550 --> 00:11:14,110
type that on your laptop you can just

00:11:12,070 --> 00:11:16,839
see it in action you have a list of

00:11:14,110 --> 00:11:19,360
nodes on telemetry oh maybe a few Jovi's

00:11:16,839 --> 00:11:22,240
whatever you have a list of nodes you

00:11:19,360 --> 00:11:24,550
just see we have approximately 70 nodes

00:11:22,240 --> 00:11:27,730
in workout right now which is not a lot

00:11:24,550 --> 00:11:29,980
but you can just write out and see how

00:11:27,730 --> 00:11:35,100
much we can grow the network without it

00:11:29,980 --> 00:11:37,570
crashing and we are betting on the p2p

00:11:35,100 --> 00:11:40,330
because a lot of people actually betting

00:11:37,570 --> 00:11:43,120
only p2p if you on 2.0 is probably going

00:11:40,330 --> 00:11:46,240
to use the p2p and that like triggered

00:11:43,120 --> 00:11:48,970
the chain reaction a lot of people who

00:11:46,240 --> 00:11:50,980
are in the few meters ecosystem are also

00:11:48,970 --> 00:11:54,640
going to bet on the p2p because of that

00:11:50,980 --> 00:11:57,279
it's like a really growing thing and the

00:11:54,640 --> 00:11:58,960
good point about everyone betting on the

00:11:57,279 --> 00:12:01,950
p2p is that we can actually share a

00:11:58,960 --> 00:12:04,390
network so that you don't have like

00:12:01,950 --> 00:12:07,240
hundreds of different peer-to-peer

00:12:04,390 --> 00:12:09,580
networks we cannot we can all have one

00:12:07,240 --> 00:12:12,760
network which then discover cell

00:12:09,580 --> 00:12:17,190
networks and that's that's the advantage

00:12:12,760 --> 00:12:17,190
of having lots of people bets on the p2p

00:12:19,950 --> 00:12:26,140
and before going further I invite you if

00:12:23,950 --> 00:12:28,870
you have a laptop on you you can try it

00:12:26,140 --> 00:12:31,810
out now I would be pleased if some of

00:12:28,870 --> 00:12:35,410
you did by typing this command cargo

00:12:31,810 --> 00:12:39,430
install I hope I hope you trust me to

00:12:35,410 --> 00:12:43,240
not have put a malicious piece of code

00:12:39,430 --> 00:12:45,970
in there but if if you laptop starts

00:12:43,240 --> 00:12:51,100
crushing or something you can find me

00:12:45,970 --> 00:12:53,860
afterwards and beat me down so if you

00:12:51,100 --> 00:12:57,820
want to try it out type cargo install

00:12:53,860 --> 00:13:05,190
with this get URL and then run it with

00:12:57,820 --> 00:13:05,190
rest rush - demo or do I tell

00:13:07,400 --> 00:13:14,300
that's not my laptop sorry oops

00:13:18,460 --> 00:13:24,730
I mean to Mecca and I'm going to wait

00:13:21,300 --> 00:13:27,220
for you to type things so the way this

00:13:24,730 --> 00:13:29,500
demo work is it's going to find people

00:13:27,220 --> 00:13:33,370
on the net of the local network using n

00:13:29,500 --> 00:13:37,570
DNS so I'm connected to the Novotel

00:13:33,370 --> 00:13:40,300
lobby Wi-Fi but I expect it to not work

00:13:37,570 --> 00:13:42,910
properly and DNS here necessarily so I

00:13:40,300 --> 00:13:45,250
also created a bootstrap node on a

00:13:42,910 --> 00:13:46,750
server so it should just work if you

00:13:45,250 --> 00:13:47,800
launch the demo everyone should be able

00:13:46,750 --> 00:13:50,620
to connect to each other

00:13:47,800 --> 00:13:51,850
that's not decentralized since I created

00:13:50,620 --> 00:13:54,370
the bootstrap node but that's a

00:13:51,850 --> 00:13:57,100
workaround because I don't think the

00:13:54,370 --> 00:14:01,750
Wi-Fi here is reliable and also many

00:13:57,100 --> 00:14:04,870
people on the different Wi-Fi so if you

00:14:01,750 --> 00:14:08,140
connect you should be able to shut you

00:14:04,870 --> 00:14:11,020
should see my message and I'm going to

00:14:08,140 --> 00:14:14,200
go back to this demo afterwards so it's

00:14:11,020 --> 00:14:17,410
it uses MDM s to discover local nodes is

00:14:14,200 --> 00:14:19,750
also uses a bootstrap node and every

00:14:17,410 --> 00:14:21,370
single node it discovers it tries to

00:14:19,750 --> 00:14:23,980
connect to interest to maintain a

00:14:21,370 --> 00:14:26,529
connection to and whenever you type a

00:14:23,980 --> 00:14:29,440
message on the chat it just broadcasts

00:14:26,529 --> 00:14:32,050
with chat message everywhere so everyone

00:14:29,440 --> 00:14:34,570
receives the message of course you have

00:14:32,050 --> 00:14:36,730
no history if you connect you don't see

00:14:34,570 --> 00:14:39,910
what people have tried before you you

00:14:36,730 --> 00:14:42,820
also where you access your UX is not so

00:14:39,910 --> 00:14:45,100
great and you can of course check out

00:14:42,820 --> 00:14:46,870
the source code but keep in mind but you

00:14:45,100 --> 00:14:48,430
are trying to improve the API and the

00:14:46,870 --> 00:14:52,360
source code is quite messy right now but

00:14:48,430 --> 00:14:55,300
you can check it out and peace of

00:14:52,360 --> 00:14:58,690
warning we haven't tested with the p2p

00:14:55,300 --> 00:15:01,060
with more than approximately 80 nodes so

00:14:58,690 --> 00:15:05,200
you might find a bug but hopefully not

00:15:01,060 --> 00:15:09,760
so I'm going to continue I hope

00:15:05,200 --> 00:15:12,070
everyone's over URL so let's dive a bit

00:15:09,760 --> 00:15:14,430
more into the p2p you the special things

00:15:12,070 --> 00:15:17,709
about the p2p is that it's very modular

00:15:14,430 --> 00:15:20,230
so we're not using just an IP address

00:15:17,709 --> 00:15:23,740
and a port we're using what we call the

00:15:20,230 --> 00:15:24,970
multi address instead of having so just

00:15:23,740 --> 00:15:27,880
an IP address and a port we have a

00:15:24,970 --> 00:15:31,990
string IP for slash your IP address

00:15:27,880 --> 00:15:33,490
large tcp slash your port and the good

00:15:31,990 --> 00:15:35,670
advantage of this is that we can

00:15:33,490 --> 00:15:38,470
basically do anything we want with

00:15:35,670 --> 00:15:41,560
because we just have a string so instead

00:15:38,470 --> 00:15:44,770
of using TCP you can use UDP you can use

00:15:41,560 --> 00:15:46,000
quake on top of UDP you can use ipv6 you

00:15:44,770 --> 00:15:49,089
can use WebSockets

00:15:46,000 --> 00:15:52,750
well further example has a /ws which

00:15:49,089 --> 00:15:55,779
means put WebSockets on top of his TCP

00:15:52,750 --> 00:15:57,640
connection and why do we want WebSockets

00:15:55,779 --> 00:16:01,660
are you going to ask because browsers

00:15:57,640 --> 00:16:04,360
can only use WebSockets and a use case

00:16:01,660 --> 00:16:07,600
of Lippe TP is we want it to run inside

00:16:04,360 --> 00:16:10,209
of a browser and it works right now you

00:16:07,600 --> 00:16:12,520
can compile a p2p and run it in a

00:16:10,209 --> 00:16:16,060
browser and connect to other nodes which

00:16:12,520 --> 00:16:19,390
is quite nice I think so right now rest

00:16:16,060 --> 00:16:21,880
a bit visible TCP WebSockets DNS you can

00:16:19,390 --> 00:16:24,399
put a DNS domain name and UNIX domain

00:16:21,880 --> 00:16:26,350
sockets that's obviously disabled by

00:16:24,399 --> 00:16:28,360
default because you don't want to tell

00:16:26,350 --> 00:16:32,260
another node to connect through its

00:16:28,360 --> 00:16:34,660
local socket that's not very secure but

00:16:32,260 --> 00:16:38,410
it's supported in the future and in the

00:16:34,660 --> 00:16:40,779
future we very want we want very much

00:16:38,410 --> 00:16:43,329
quick which is the protocol design by

00:16:40,779 --> 00:16:48,520
Google on top of UDP that's basically a

00:16:43,329 --> 00:16:50,709
replacement for TCP IP Bluetooth as well

00:16:48,520 --> 00:16:52,000
to create a true mesh network where

00:16:50,709 --> 00:16:56,170
people are connected to each other

00:16:52,000 --> 00:17:00,190
locally and tor for more privacy that's

00:16:56,170 --> 00:17:02,980
for the future here is an overview of a

00:17:00,190 --> 00:17:06,339
riot of protocol on the wire so what

00:17:02,980 --> 00:17:08,500
happens when two nodes connect so they

00:17:06,339 --> 00:17:11,110
use a transport a multi address to

00:17:08,500 --> 00:17:13,360
decide how to connect to each other the

00:17:11,110 --> 00:17:16,630
tcp/ip web socket what I just explained

00:17:13,360 --> 00:17:18,640
then once they connect they negotiate an

00:17:16,630 --> 00:17:23,740
encryption protocol to make sure that

00:17:18,640 --> 00:17:25,600
the PRI disconnect is correct sorry on

00:17:23,740 --> 00:17:28,179
top of its encryption layer we're using

00:17:25,600 --> 00:17:30,670
a multiplexing protocol so that you can

00:17:28,179 --> 00:17:33,790
divide your connection into multiple sub

00:17:30,670 --> 00:17:36,550
streams as you can see on the Shema and

00:17:33,790 --> 00:17:39,100
then once you negotiated this you can

00:17:36,550 --> 00:17:41,050
open as many requests as you want each

00:17:39,100 --> 00:17:42,850
request is a different sub stream and

00:17:41,050 --> 00:17:44,710
they are all grouped together with a

00:17:42,850 --> 00:17:48,070
multi stream pot with a multiplex

00:17:44,710 --> 00:17:50,200
protocol sorry right now for encryption

00:17:48,070 --> 00:17:52,390
we are using a protocol and SE cayó

00:17:50,200 --> 00:17:55,870
which is basically the same as TLS but

00:17:52,390 --> 00:17:58,029
without certificates you're going to say

00:17:55,870 --> 00:17:59,799
don't roll your own crypto and I agree

00:17:58,029 --> 00:18:03,909
with that which is why we're going to

00:17:59,799 --> 00:18:06,460
switch to TLS in the future for

00:18:03,909 --> 00:18:10,029
multiplexing we're using UNIX which is

00:18:06,460 --> 00:18:11,350
made by Google if I'm not mistaken but

00:18:10,029 --> 00:18:13,570
we're going to switch to quick

00:18:11,350 --> 00:18:18,760
eventually for both the multiplexing and

00:18:13,570 --> 00:18:20,350
the encryption and as I said one of a

00:18:18,760 --> 00:18:22,330
strong point of limb p2p is but it's

00:18:20,350 --> 00:18:24,159
modular that's actually a very important

00:18:22,330 --> 00:18:27,100
point so even though protocol labs

00:18:24,159 --> 00:18:31,059
designing the thing it's only the only

00:18:27,100 --> 00:18:32,770
important part is the core of the p2p on

00:18:31,059 --> 00:18:34,720
top of that you can just design your own

00:18:32,770 --> 00:18:36,419
protocol you can do whatever you want

00:18:34,720 --> 00:18:38,440
once you have encryption and

00:18:36,419 --> 00:18:40,270
multiplexing and just create whatever

00:18:38,440 --> 00:18:42,909
you put protocol you want on top of that

00:18:40,270 --> 00:18:45,940
the p2p doesn't assume that any proto

00:18:42,909 --> 00:18:48,760
writes about it you can just pass any

00:18:45,940 --> 00:18:50,320
protocol name and if you're if a remote

00:18:48,760 --> 00:18:52,480
supports the protocol it's going to

00:18:50,320 --> 00:18:54,669
accept and start speaking your protocol

00:18:52,480 --> 00:18:58,330
so you can just create your own network

00:18:54,669 --> 00:19:00,340
with whatever protocol you want and this

00:18:58,330 --> 00:19:02,710
is really cool even if you know in

00:19:00,340 --> 00:19:04,690
advance which protocol you support its

00:19:02,710 --> 00:19:06,850
they're pretty nice to be able to

00:19:04,690 --> 00:19:08,529
experiment with new stuff imagine you

00:19:06,850 --> 00:19:11,350
want to replace a protocol with another

00:19:08,529 --> 00:19:13,570
you'd create your new protocol you add

00:19:11,350 --> 00:19:17,020
support for both and then you remove a

00:19:13,570 --> 00:19:21,610
deprecated one life without having to do

00:19:17,020 --> 00:19:26,559
a breaking change and that's it I'm

00:19:21,610 --> 00:19:29,740
going to switch back to the demo okay we

00:19:26,559 --> 00:19:31,539
have two people including me are more

00:19:29,740 --> 00:19:36,450
people on the demo if something's not

00:19:31,539 --> 00:19:36,450
working please tell me

00:19:38,400 --> 00:19:49,050
so oh yeah okay just confiding okay so

00:19:47,160 --> 00:19:58,980
that's it thank you if you have

00:19:49,050 --> 00:20:03,410
questions and parity is recruiting yeah

00:19:58,980 --> 00:20:03,410
we have some time for questions so

00:20:03,980 --> 00:20:15,650
anyone yeah hi since first look I have

00:20:13,110 --> 00:20:18,450
question what about a tax told if she

00:20:15,650 --> 00:20:20,280
does have some protection against the

00:20:18,450 --> 00:20:22,590
dish the poisoning maybe spill attacks

00:20:20,280 --> 00:20:25,620
or something like that

00:20:22,590 --> 00:20:28,830
we don't have any protection I against

00:20:25,620 --> 00:20:30,720
poison unfortunately we actually had so

00:20:28,830 --> 00:20:34,830
when using the p2p in substrate right

00:20:30,720 --> 00:20:36,510
now and ipfs also uses the p2p and to

00:20:34,830 --> 00:20:39,179
give you an example but yet is

00:20:36,510 --> 00:20:42,210
accidentally merged once which means

00:20:39,179 --> 00:20:45,690
that substrate got polluted by ipfs and

00:20:42,210 --> 00:20:48,150
ipfs got polluted by substrate and that

00:20:45,690 --> 00:20:49,710
was really nasty because substrate just

00:20:48,150 --> 00:20:52,670
stopped working because of that is

00:20:49,710 --> 00:20:57,120
basically an attack but involuntary and

00:20:52,670 --> 00:21:00,390
we don't we didn't we don't know how to

00:20:57,120 --> 00:21:02,460
fix that yet like its undoing research

00:21:00,390 --> 00:21:07,200
like protocol abs is actively

00:21:02,460 --> 00:21:13,620
researching how to fix that last

00:21:07,200 --> 00:21:16,800
question doesn't implement not reversal

00:21:13,620 --> 00:21:22,670
Natt reversal natural so so i have a

00:21:16,800 --> 00:21:26,160
bonus night I kind of unseated this we

00:21:22,670 --> 00:21:28,710
so right now all we do is whenever you

00:21:26,160 --> 00:21:31,890
connect to the network whenever you dial

00:21:28,710 --> 00:21:35,370
a node you ask which IP other IP address

00:21:31,890 --> 00:21:37,500
is B is yours which gives you your

00:21:35,370 --> 00:21:41,670
external IP address and then you

00:21:37,500 --> 00:21:44,190
advertise this IP to network that's all

00:21:41,670 --> 00:21:46,080
we do right now in the future we're

00:21:44,190 --> 00:21:50,100
going to do your PNP but that's actually

00:21:46,080 --> 00:21:51,580
not working in practice that's working

00:21:50,100 --> 00:21:56,110
in theory but

00:21:51,580 --> 00:21:58,300
yo PNP is very crap PCP also is not

00:21:56,110 --> 00:22:00,970
working very well so we haven't

00:21:58,300 --> 00:22:06,340
prioritize this very well but solution

00:22:00,970 --> 00:22:08,200
we have is reading connections so the

00:22:06,340 --> 00:22:12,610
way it works you just ask another node

00:22:08,200 --> 00:22:14,260
to relay everything you do through it if

00:22:12,610 --> 00:22:16,990
you need the direct connection to a node

00:22:14,260 --> 00:22:19,870
you use with relay in practice you

00:22:16,990 --> 00:22:21,970
probably don't really need a lot of nut

00:22:19,870 --> 00:22:25,780
reversal because you just broadcast

00:22:21,970 --> 00:22:28,630
messages usually and so you don't ring

00:22:25,780 --> 00:22:31,150
the direct connection to a node a node

00:22:28,630 --> 00:22:33,760
behind the knot just dies someone and

00:22:31,150 --> 00:22:36,910
then broadcast message to is peer and

00:22:33,760 --> 00:22:38,890
that's it Naturalizer is quite important

00:22:36,910 --> 00:22:41,320
for a browser use case because browsers

00:22:38,890 --> 00:22:42,910
are like behind the vitro and not more

00:22:41,320 --> 00:22:45,640
or less like the browser doesn't allow

00:22:42,910 --> 00:22:49,360
an incoming connection so that's very

00:22:45,640 --> 00:22:51,550
important but that's all we do really in

00:22:49,360 --> 00:23:02,980
connection and discovering you external

00:22:51,550 --> 00:23:07,060
IP other questions thank you and does

00:23:02,980 --> 00:23:12,390
leap leap p2p has the ability to to pin

00:23:07,060 --> 00:23:17,710
some some K and value like in the IP FS

00:23:12,390 --> 00:23:20,680
never purge as this data from the north

00:23:17,710 --> 00:23:25,030
storage so he wants the second path

00:23:20,680 --> 00:23:29,350
being a value I want to keep some some

00:23:25,030 --> 00:23:32,800
file all we are always store it on my on

00:23:29,350 --> 00:23:36,370
my note and never purge it purchase from

00:23:32,800 --> 00:23:38,380
from the storage so the p2p doesn't do

00:23:36,370 --> 00:23:40,980
that directly but would be on top of

00:23:38,380 --> 00:23:44,110
limb p2p we're just doing the networking

00:23:40,980 --> 00:23:46,300
but we expose everything you need to do

00:23:44,110 --> 00:23:49,150
whatever you want the API should be very

00:23:46,300 --> 00:23:53,020
flexible so if you want to keep your

00:23:49,150 --> 00:23:55,510
value in store just do it manually like

00:23:53,020 --> 00:23:57,790
the p2p is not going to decide which one

00:23:55,510 --> 00:23:58,200
used to purge or to store or blah blah

00:23:57,790 --> 00:24:01,060
blah

00:23:58,200 --> 00:24:06,630
that's your program on top of it

00:24:01,060 --> 00:24:06,630
okay thank you mm-hm

00:24:10,739 --> 00:24:16,929
whether we will so I have several

00:24:13,570 --> 00:24:19,659
questions so first one does leap - B - B

00:24:16,929 --> 00:24:21,999
- B - B has a reference or is it a

00:24:19,659 --> 00:24:24,119
reference implementation which is not

00:24:21,999 --> 00:24:27,929
compatible with J's and go

00:24:24,119 --> 00:24:32,109
implementations second question is about

00:24:27,929 --> 00:24:37,389
comparison with noise protocol so we can

00:24:32,109 --> 00:24:44,769
what sorry noise oh no yes okay question

00:24:37,389 --> 00:24:47,229
but I forgot that so the first question

00:24:44,769 --> 00:24:51,009
is very fancy mean variance so we're

00:24:47,229 --> 00:24:54,369
very of the p2p is that it was initially

00:24:51,009 --> 00:24:57,219
part of ipfs and then it was split so

00:24:54,369 --> 00:24:59,979
the reference information is with its

00:24:57,219 --> 00:25:02,440
JavaScript implementation actually and

00:24:59,979 --> 00:25:05,049
proto grabs currently writing a

00:25:02,440 --> 00:25:07,839
specifications which we are trying to

00:25:05,049 --> 00:25:10,599
follow but it's not complete it's an

00:25:07,839 --> 00:25:12,369
ongoing effort we are recruiting a ton

00:25:10,599 --> 00:25:13,899
of people were recruiting technical

00:25:12,369 --> 00:25:16,479
writers to write an actual

00:25:13,899 --> 00:25:19,029
specifications the reference

00:25:16,479 --> 00:25:21,389
informations in JavaScript right now and

00:25:19,029 --> 00:25:25,929
we try to follow it as much as possible

00:25:21,389 --> 00:25:28,359
but since it's code and code is messy we

00:25:25,929 --> 00:25:31,329
are not we are compatible but we are

00:25:28,359 --> 00:25:34,899
trying to be and as for the noise

00:25:31,329 --> 00:25:37,989
protocol I don't know actually I'm not

00:25:34,899 --> 00:25:42,549
for one who designed this I know

00:25:37,989 --> 00:25:44,349
so we have someone named Jeff at the web

00:25:42,549 --> 00:25:46,209
free Foundation which is friends with

00:25:44,349 --> 00:25:49,569
parity who has been looking into this

00:25:46,209 --> 00:25:51,879
who opened a few issues I think so

00:25:49,569 --> 00:25:56,799
someone is looking into that but not me

00:25:51,879 --> 00:25:59,589
personally so and if I'm if I understand

00:25:56,799 --> 00:26:01,749
correctly yep - p2p it doesn't have any

00:25:59,589 --> 00:26:05,019
protection against money in the middle

00:26:01,749 --> 00:26:08,440
attack because we don't use public key

00:26:05,019 --> 00:26:10,959
as indentification of of a node well

00:26:08,440 --> 00:26:13,299
it's all the communications are

00:26:10,959 --> 00:26:15,669
encrypted so you are protected either so

00:26:13,299 --> 00:26:17,440
you know in advance the PID of the node

00:26:15,669 --> 00:26:19,059
you're supposed to connect to and when

00:26:17,440 --> 00:26:22,070
you connect to your verify this identity

00:26:19,059 --> 00:26:27,170
so there should be no money

00:26:22,070 --> 00:26:29,570
possible well I don't see we don't have

00:26:27,170 --> 00:26:34,310
any central authority right which can

00:26:29,570 --> 00:26:38,930
identify notes we don't have well like

00:26:34,310 --> 00:26:41,780
in web purchase centers

00:26:38,930 --> 00:26:46,940
so with this why money in the middle can

00:26:41,780 --> 00:26:50,420
impersonate as not if we can interfere

00:26:46,940 --> 00:26:52,580
with the traffic very valence of the

00:26:50,420 --> 00:26:54,980
central authorities of a bootstrap knows

00:26:52,580 --> 00:26:57,560
that you hard-code the new program these

00:26:54,980 --> 00:27:00,320
are like the certificate authority is

00:26:57,560 --> 00:27:03,950
more than a so bootstrap nodes provide

00:27:00,320 --> 00:27:11,980
us with public keys of other nodes yes

00:27:03,950 --> 00:27:14,600
ok yes next question

00:27:11,980 --> 00:27:17,570
well thank you for the talk and my

00:27:14,600 --> 00:27:19,550
question is a did you ever did some kind

00:27:17,570 --> 00:27:22,370
of measurements benchmarking for the

00:27:19,550 --> 00:27:23,570
throughput of the network or like

00:27:22,370 --> 00:27:28,460
bandwidth

00:27:23,570 --> 00:27:31,370
unfortunately no I've so the closest

00:27:28,460 --> 00:27:35,570
thing I have to benchmarking I wrote

00:27:31,370 --> 00:27:38,990
small how to say that basically a test

00:27:35,570 --> 00:27:40,010
I'm spawning 25 nodes and they all talk

00:27:38,990 --> 00:27:42,470
to each other

00:27:40,010 --> 00:27:47,900
say hello word to each other and that

00:27:42,470 --> 00:27:50,510
takes I think 30 seconds or so for to

00:27:47,900 --> 00:27:52,640
spawn 25 knows and they flood each

00:27:50,510 --> 00:27:56,840
other's and I don't remember how much

00:27:52,640 --> 00:28:00,050
data which is honestly quite bad but we

00:27:56,840 --> 00:28:05,290
want to improve that but we haven't done

00:28:00,050 --> 00:28:09,110
that yet we have taken over possible

00:28:05,290 --> 00:28:11,060
decisions to make it fast so what I mean

00:28:09,110 --> 00:28:13,610
is that the design is made to be fast

00:28:11,060 --> 00:28:15,620
and now making it actually fast is just

00:28:13,610 --> 00:28:17,920
a matter of measuring and fixing things

00:28:15,620 --> 00:28:21,320
that are slow like unnecessary

00:28:17,920 --> 00:28:22,910
allocations and so on and so forth if

00:28:21,320 --> 00:28:25,700
you see what I mean like the design is

00:28:22,910 --> 00:28:27,470
made to be fast okay and is there any

00:28:25,700 --> 00:28:29,960
kind of limitations inside the protocol

00:28:27,470 --> 00:28:32,450
itself the way it doesn't crypt the day

00:28:29,960 --> 00:28:35,160
the way it does like broadcast messages

00:28:32,450 --> 00:28:38,510
so for that sorry what's the question

00:28:35,160 --> 00:28:41,730
so is there any kind of limitations

00:28:38,510 --> 00:28:44,610
included in the protocol itself the way

00:28:41,730 --> 00:28:47,550
it encodes the data decrypts the data

00:28:44,610 --> 00:28:50,100
encrypts data stuff like that reference

00:28:47,550 --> 00:28:52,800
now in just just just

00:28:50,100 --> 00:28:56,520
well you I think I think you know that

00:28:52,800 --> 00:29:00,180
put the particle bet on me yeah I don't

00:28:56,520 --> 00:29:02,250
know that so that's the question is is

00:29:00,180 --> 00:29:05,550
there any kind of limitations in the

00:29:02,250 --> 00:29:07,320
protocol itself so maybe there's I'm

00:29:05,550 --> 00:29:12,510
sorry I just don't understand the word

00:29:07,320 --> 00:29:18,960
you say that doesn't matter to clarify

00:29:12,510 --> 00:29:21,600
maybe not like other limitations not in

00:29:18,960 --> 00:29:27,660
the implementation but in the protocol

00:29:21,600 --> 00:29:32,000
like in theory but I don't understand

00:29:27,660 --> 00:29:41,060
the word or what limitations and

00:29:32,000 --> 00:29:44,550
implementation limits oh so right now

00:29:41,060 --> 00:29:47,010
more or less like versus the negotiation

00:29:44,550 --> 00:29:50,250
protocol is badly designed and we are

00:29:47,010 --> 00:29:53,520
actually not following the design in

00:29:50,250 --> 00:29:58,140
order to make it actually fast but they

00:29:53,520 --> 00:30:00,660
are fixing this basic you cannot just

00:29:58,140 --> 00:30:03,560
assume that negotiation succeeding so

00:30:00,660 --> 00:30:08,520
you have an extra round trip and that's

00:30:03,560 --> 00:30:10,680
thank you whoever did that you can you

00:30:08,520 --> 00:30:13,260
can not just assume that negotiation is

00:30:10,680 --> 00:30:18,330
succeeding but we are fixing that one

00:30:13,260 --> 00:30:20,640
that has no limitation the design thank

00:30:18,330 --> 00:30:27,740
you any more questions

00:30:20,640 --> 00:30:27,740
Oh should we let fear hostage

00:30:28,730 --> 00:30:34,830
what about protection against debugging

00:30:32,190 --> 00:30:37,590
deep packet inspection is possible to

00:30:34,830 --> 00:30:41,310
distinguish the p2p packets from other

00:30:37,590 --> 00:30:44,580
packets and wholesome where you can for

00:30:41,310 --> 00:30:48,240
sure determine if a connection uses the

00:30:44,580 --> 00:30:48,960
p2p if we're using if we're going to

00:30:48,240 --> 00:30:53,220
implement

00:30:48,960 --> 00:30:57,059
or maybe i2p maybe that will fix face

00:30:53,220 --> 00:30:58,529
but even that know you can be prey you

00:30:57,059 --> 00:31:01,169
can pretty easily know that the

00:30:58,529 --> 00:31:03,720
connection uses EPP unless sorry unless

00:31:01,169 --> 00:31:04,710
you use WebSockets and since it's

00:31:03,720 --> 00:31:09,049
encrypted

00:31:04,710 --> 00:31:09,049

YouTube URL: https://www.youtube.com/watch?v=Sss2Tl7WRDQ


