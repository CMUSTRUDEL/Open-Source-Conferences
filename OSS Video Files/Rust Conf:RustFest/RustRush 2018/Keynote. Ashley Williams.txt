Title: Keynote. Ashley Williams
Publication date: 2019-02-06
Playlist: RustRush 2018
Description: 
	Slides: https://ashleygwilliams.github.io/rustrush-2018/#1

Ashley is Rust Core Team Member, crates.io Team Lead and Rust Community Team Lead. She's the director or Increasing Rust's Reach Project, RustBridge Lead Instructor, and a member of Rust/WebAssembly Working Group. Ashley previously was Registry Engineer at npm, and on Node.js Board of Directors. She's also Community Comittee Founder, TC-39 Invited Expert and NodeTogether Founder and Lead Instructor.
Captions: 
	00:00:02,530 --> 00:00:07,420
as I was introduced my name is Ashley

00:00:05,200 --> 00:00:11,980
Williams and I'm here to give you a very

00:00:07,420 --> 00:00:13,690
detailed titled talk keynote right so

00:00:11,980 --> 00:00:16,450
we're probably wondering like alright

00:00:13,690 --> 00:00:18,880
what is this talk about and I have to be

00:00:16,450 --> 00:00:20,200
honest I also kind of asked my same the

00:00:18,880 --> 00:00:22,840
same question to myself I was like

00:00:20,200 --> 00:00:25,330
alright I'm giving this keynote what the

00:00:22,840 --> 00:00:26,800
heck should I talk about and so I was

00:00:25,330 --> 00:00:29,680
thinking about it for a while I've given

00:00:26,800 --> 00:00:31,330
all different types of talks and I

00:00:29,680 --> 00:00:32,980
decided the talk should be about maybe

00:00:31,330 --> 00:00:34,839
something controversial right so I'm

00:00:32,980 --> 00:00:37,989
going to get y'all going and so how

00:00:34,839 --> 00:00:40,140
about this do we recognize this how many

00:00:37,989 --> 00:00:43,929
people have strong feelings about this

00:00:40,140 --> 00:00:47,109
yeah okay so actually we're not gonna

00:00:43,929 --> 00:00:50,050
specifically talk about the website but

00:00:47,109 --> 00:00:51,609
instead if you can imagine the you know

00:00:50,050 --> 00:00:54,460
on those crime shows when they're like

00:00:51,609 --> 00:00:57,159
enhance right so if we enhance on this

00:00:54,460 --> 00:00:59,260
image a little this gif is too long but

00:00:57,159 --> 00:01:01,600
we're enhancing here the part that I

00:00:59,260 --> 00:01:04,960
kind of want to focus on is a theme for

00:01:01,600 --> 00:01:07,180
this talk is this so you'll note that

00:01:04,960 --> 00:01:10,180
when the new website launched there was

00:01:07,180 --> 00:01:12,969
a new slogan for rust and I bet there

00:01:10,180 --> 00:01:14,500
were also strong feelings about that in

00:01:12,969 --> 00:01:16,689
fact I know there were and you'll notice

00:01:14,500 --> 00:01:19,000
that our slogan has moved from this

00:01:16,689 --> 00:01:21,759
original one but I'd like to talk a

00:01:19,000 --> 00:01:23,680
little bit about this one and so the

00:01:21,759 --> 00:01:26,619
slogan was the programming language that

00:01:23,680 --> 00:01:29,530
empowers everyone to become a systems

00:01:26,619 --> 00:01:31,390
programmer now a lot of people some of

00:01:29,530 --> 00:01:34,030
this I've resonated with them for some

00:01:31,390 --> 00:01:36,630
people it didn't resonate but I am

00:01:34,030 --> 00:01:39,250
really excited about this word in power

00:01:36,630 --> 00:01:40,659
and so obviously it's not a good talk

00:01:39,250 --> 00:01:43,030
unless I you know do a little research

00:01:40,659 --> 00:01:46,210
so I obviously went to an online

00:01:43,030 --> 00:01:48,969
dictionary a super super academic piece

00:01:46,210 --> 00:01:52,390
of resource there and so empower means

00:01:48,969 --> 00:01:54,130
to equip or supply with an ability to

00:01:52,390 --> 00:01:56,500
enable and fundamentally I think

00:01:54,130 --> 00:01:59,259
empowering is one of the characteristics

00:01:56,500 --> 00:02:02,109
of rust that really drew me to it again

00:01:59,259 --> 00:02:05,320
rust goal isn't just to be an awesome

00:02:02,109 --> 00:02:08,170
piece of tech which it happens to be but

00:02:05,320 --> 00:02:10,210
its goal is to get lots of people to use

00:02:08,170 --> 00:02:12,159
really powerful tech and that's a

00:02:10,210 --> 00:02:14,470
completely different problem domain than

00:02:12,159 --> 00:02:16,090
a lot of technologies really address and

00:02:14,470 --> 00:02:18,370
so I understand

00:02:16,090 --> 00:02:20,380
we are in Russia and so I was like oh

00:02:18,370 --> 00:02:22,000
I'm gonna be defining words I should

00:02:20,380 --> 00:02:26,650
look up how to say the word empowering

00:02:22,000 --> 00:02:29,170
in Russian and I I appreciated that they

00:02:26,650 --> 00:02:33,670
have like a pronunciation guide there

00:02:29,170 --> 00:02:35,650
but um I'm sorry I tried in my room but

00:02:33,670 --> 00:02:37,599
I it sounded terrible

00:02:35,650 --> 00:02:40,120
and it probably would sound offensive

00:02:37,599 --> 00:02:42,069
I'm so bad at saying it but anyways this

00:02:40,120 --> 00:02:45,670
is the word maybe this is like a totally

00:02:42,069 --> 00:02:48,670
wrong translation to I have no idea but

00:02:45,670 --> 00:02:50,980
I did try so I apologize if I speak too

00:02:48,670 --> 00:02:53,350
fast I really wish I could speak Russian

00:02:50,980 --> 00:02:55,090
whenever I come to Russia I like start

00:02:53,350 --> 00:02:57,010
seeing Cyrillic and I think that I know

00:02:55,090 --> 00:02:59,739
how to like understand it and it's just

00:02:57,010 --> 00:03:02,739
totally not true I'm not good at it but

00:02:59,739 --> 00:03:05,860
it is very cool all right so instead of

00:03:02,739 --> 00:03:07,780
using a definition and words where

00:03:05,860 --> 00:03:11,290
languages make things complicated I like

00:03:07,780 --> 00:03:13,360
to use some rather outdated American

00:03:11,290 --> 00:03:17,830
culture so does anybody recognize what

00:03:13,360 --> 00:03:20,530
show this gif is from no all right so

00:03:17,830 --> 00:03:23,109
it's an old children's cartoon from the

00:03:20,530 --> 00:03:26,079
United States called Captain Planet and

00:03:23,109 --> 00:03:27,250
the idea of Captain Planet is that

00:03:26,079 --> 00:03:29,470
there's all these different kind of

00:03:27,250 --> 00:03:31,989
elements and then they come together and

00:03:29,470 --> 00:03:35,049
when they all come together they form a

00:03:31,989 --> 00:03:38,980
like environment superhero that fights

00:03:35,049 --> 00:03:40,299
pollution it's an interesting show but I

00:03:38,980 --> 00:03:43,239
really like it because I think is an

00:03:40,299 --> 00:03:45,489
excellent metaphor for what rust is so I

00:03:43,239 --> 00:03:47,410
think rust is Captain Planet and so the

00:03:45,489 --> 00:03:49,780
idea behind this is that we have a lot

00:03:47,410 --> 00:03:52,209
of things coming together to create

00:03:49,780 --> 00:03:53,709
something awesome and so this is that

00:03:52,209 --> 00:03:55,480
example of all the elements coming

00:03:53,709 --> 00:03:59,109
together they have rings that have

00:03:55,480 --> 00:04:02,380
powers but rust is just like this so

00:03:59,109 --> 00:04:04,600
rust is trying to empower everyone to be

00:04:02,380 --> 00:04:06,850
a systems developer but who is everyone

00:04:04,600 --> 00:04:08,769
and everyone is a whole ton of people

00:04:06,850 --> 00:04:10,359
and if you've ever been on an RFC thread

00:04:08,769 --> 00:04:13,359
you'll probably have met some of these

00:04:10,359 --> 00:04:16,209
characters so we have like diehard like

00:04:13,359 --> 00:04:17,590
I do rust I only do rust people and then

00:04:16,209 --> 00:04:20,709
we definitely have a whole bunch of like

00:04:17,590 --> 00:04:22,419
C and C++ developers and then every once

00:04:20,709 --> 00:04:25,240
in a while particularly in stuff I work

00:04:22,419 --> 00:04:27,580
in there's JavaScript people and then

00:04:25,240 --> 00:04:29,140
you know throw in some academics there

00:04:27,580 --> 00:04:31,419
and then we have some people who are

00:04:29,140 --> 00:04:34,090
brand-new developers coming in to rust

00:04:31,419 --> 00:04:35,710
and all of these people come together to

00:04:34,090 --> 00:04:38,169
form what I think makes the rust

00:04:35,710 --> 00:04:40,120
community particularly special the fact

00:04:38,169 --> 00:04:42,430
that we have all of these diverse sets

00:04:40,120 --> 00:04:44,020
of groups coming together allows us to

00:04:42,430 --> 00:04:45,760
actually consider a lot of different

00:04:44,020 --> 00:04:49,830
perspectives that many programming

00:04:45,760 --> 00:04:53,080
language communities don't don't have

00:04:49,830 --> 00:04:56,740
and so I actually came up with this meme

00:04:53,080 --> 00:04:58,360
when I gave the rust cough keynote which

00:04:56,740 --> 00:05:01,150
is here and if you remember that theme

00:04:58,360 --> 00:05:03,310
of enhance if you enhance on this image

00:05:01,150 --> 00:05:05,169
you'll see I have a glaring misspelling

00:05:03,310 --> 00:05:06,760
which I was very disappointed to

00:05:05,169 --> 00:05:09,280
discover because a lot of people tweeted

00:05:06,760 --> 00:05:10,750
it but fundamentally I want us to be

00:05:09,280 --> 00:05:12,550
thinking about this idea of empowering

00:05:10,750 --> 00:05:14,500
and this idea of bringing a lot of

00:05:12,550 --> 00:05:16,840
disparate groups that have a ton of

00:05:14,500 --> 00:05:20,289
different types of perspective together

00:05:16,840 --> 00:05:22,240
to create cool technologies so again we

00:05:20,289 --> 00:05:25,300
were talking about this slogan and yes

00:05:22,240 --> 00:05:27,580
people had feelings about the slogan in

00:05:25,300 --> 00:05:29,050
fact people had a lot of feelings and

00:05:27,580 --> 00:05:31,419
you should note that this is actually

00:05:29,050 --> 00:05:35,229
kind of low for a controversial issue in

00:05:31,419 --> 00:05:38,800
rust so bless only eighty-five comments

00:05:35,229 --> 00:05:40,270
before we closed it well one of the

00:05:38,800 --> 00:05:41,890
things that I think is interesting that

00:05:40,270 --> 00:05:43,810
I do want to mention is a lot of people

00:05:41,890 --> 00:05:46,150
objected to this word systems

00:05:43,810 --> 00:05:47,950
programming the reason I like the slogan

00:05:46,150 --> 00:05:50,530
saying empowering everyone to become a

00:05:47,950 --> 00:05:51,940
systems programmer is often systems

00:05:50,530 --> 00:05:54,310
programming feels like something that's

00:05:51,940 --> 00:05:55,870
not accessible to everyone it's like

00:05:54,310 --> 00:05:57,849
okay like maybe I can write some

00:05:55,870 --> 00:06:00,490
JavaScript on the front end which

00:05:57,849 --> 00:06:04,240
notably is very difficult and actually

00:06:00,490 --> 00:06:05,860
sometimes I think harder than OS dev but

00:06:04,240 --> 00:06:07,300
a lot of people think that it's just

00:06:05,860 --> 00:06:09,310
kind of a type of programming that's not

00:06:07,300 --> 00:06:12,099
accessible to them and they have good

00:06:09,310 --> 00:06:14,830
reason to believe that because has

00:06:12,099 --> 00:06:18,070
anyone ever been to this website this is

00:06:14,830 --> 00:06:19,870
the OS dev wiki and so operating systems

00:06:18,070 --> 00:06:21,849
is a type of systems development and

00:06:19,870 --> 00:06:24,070
this is a page from that wiki called

00:06:21,849 --> 00:06:26,979
required knowledge I'll just read a

00:06:24,070 --> 00:06:29,140
little bit to you so they say if you

00:06:26,979 --> 00:06:31,240
think you can skip this it's probably

00:06:29,140 --> 00:06:33,759
just for you so you know they're already

00:06:31,240 --> 00:06:36,340
getting a little spicy but they say

00:06:33,759 --> 00:06:38,319
reading and OS is not a beginner's task

00:06:36,340 --> 00:06:39,759
in fact reading an OS is usually

00:06:38,319 --> 00:06:40,950
considered the most difficult

00:06:39,759 --> 00:06:43,020
programming

00:06:40,950 --> 00:06:44,790
ask and they move on to talk about the

00:06:43,020 --> 00:06:46,380
things that you absolutely must be able

00:06:44,790 --> 00:06:49,310
to do in order to write an operating

00:06:46,380 --> 00:06:52,020
system like be intimately familiar with

00:06:49,310 --> 00:06:53,760
hexadecimal I don't know what being

00:06:52,020 --> 00:06:55,500
intimately familiar with hexadecimal

00:06:53,760 --> 00:06:56,640
means but again there's a lot of the

00:06:55,500 --> 00:06:58,560
things in here that they're trying to

00:06:56,640 --> 00:07:00,390
get keep or to keep people away from

00:06:58,560 --> 00:07:02,700
trying to experiment in systems

00:07:00,390 --> 00:07:04,560
programming and so one of the reasons I

00:07:02,700 --> 00:07:07,380
liked including systems programming in

00:07:04,560 --> 00:07:09,750
the rest slogan was to try and say hey a

00:07:07,380 --> 00:07:12,720
lot of people think this is scary and

00:07:09,750 --> 00:07:14,340
it's rusts goal to make it not scary

00:07:12,720 --> 00:07:16,080
which is to say there's a lot of people

00:07:14,340 --> 00:07:18,150
out in the world who aren't yet doing

00:07:16,080 --> 00:07:20,910
systems programming but we think they

00:07:18,150 --> 00:07:22,230
should that being said the word systems

00:07:20,910 --> 00:07:24,720
programming has a bunch of negative

00:07:22,230 --> 00:07:26,760
connotations and stuff like this man I

00:07:24,720 --> 00:07:29,400
do not like it I don't like this at all

00:07:26,760 --> 00:07:31,590
so we ended up removing it but again

00:07:29,400 --> 00:07:33,420
this idea of empowerment and being able

00:07:31,590 --> 00:07:34,800
to get people to do different types of

00:07:33,420 --> 00:07:36,090
programming that they didn't do before

00:07:34,800 --> 00:07:40,350
is something that I think is really

00:07:36,090 --> 00:07:42,060
awesome so I give lots of talks and I

00:07:40,350 --> 00:07:44,280
spend a lot of time often talking about

00:07:42,060 --> 00:07:46,800
the people side of things I do a lot of

00:07:44,280 --> 00:07:48,180
telling and not a lot of showing and so

00:07:46,800 --> 00:07:50,850
when I thought about this talk I was

00:07:48,180 --> 00:07:52,590
like hmm what do I want to do and I so

00:07:50,850 --> 00:07:54,870
rarely get to actually give like a

00:07:52,590 --> 00:07:56,820
technical technical talk that I was like

00:07:54,870 --> 00:07:58,770
today I'm gonna talk about empowering

00:07:56,820 --> 00:08:00,450
technologies instead of telling you

00:07:58,770 --> 00:08:03,500
about what makes the technology

00:08:00,450 --> 00:08:07,050
empowering I'm just gonna show you and

00:08:03,500 --> 00:08:08,880
so I am gonna talk to you today about

00:08:07,050 --> 00:08:10,470
wisdom or webassembly

00:08:08,880 --> 00:08:11,850
and in particular a really awesome

00:08:10,470 --> 00:08:14,190
technology that I've been working on

00:08:11,850 --> 00:08:19,260
this year called wisdom Benjen with the

00:08:14,190 --> 00:08:21,630
rust wisdom working group so if you are

00:08:19,260 --> 00:08:24,450
not familiar webassembly is often

00:08:21,630 --> 00:08:26,130
abbreviated as wisdom or wasum depending

00:08:24,450 --> 00:08:28,350
on who you are but my favorite

00:08:26,130 --> 00:08:30,300
interpretation is there is this American

00:08:28,350 --> 00:08:32,910
commercial while back where people go

00:08:30,300 --> 00:08:36,120
what's up and so now the call for

00:08:32,910 --> 00:08:38,160
webassembly is weather and then you know

00:08:36,120 --> 00:08:41,360
you call back welcome

00:08:38,160 --> 00:08:45,060
it's very nerdy but I'm super into it ah

00:08:41,360 --> 00:08:47,880
so as I said my name is Ashley Williams

00:08:45,060 --> 00:08:50,970
I'm known as a g-dubs on Twitter if you

00:08:47,880 --> 00:08:52,260
follow me I'm sorry I am on the rust

00:08:50,970 --> 00:08:54,300
core team I am on the

00:08:52,260 --> 00:08:56,400
as a working group I leave the crates

00:08:54,300 --> 00:08:58,530
IOT my leave the community I'm doing a

00:08:56,400 --> 00:09:00,180
lot of stuff in rust so if you have a

00:08:58,530 --> 00:09:01,590
question come talk to me I'd probably at

00:09:00,180 --> 00:09:04,950
least know who you should talk to if

00:09:01,590 --> 00:09:07,140
it's not me but today I'm gonna focus on

00:09:04,950 --> 00:09:10,500
my work in the rust wasm working group

00:09:07,140 --> 00:09:12,420
this is our snazzy logo which took tons

00:09:10,500 --> 00:09:14,400
of iteration because you know for

00:09:12,420 --> 00:09:19,010
systems programmers we care a lot about

00:09:14,400 --> 00:09:21,450
design which is cool I'm into it ah so

00:09:19,010 --> 00:09:22,920
this is the repository for the tool

00:09:21,450 --> 00:09:24,540
Wesen binder and just to get a sense of

00:09:22,920 --> 00:09:27,750
the room how many people here have

00:09:24,540 --> 00:09:29,630
written something that compiles to or

00:09:27,750 --> 00:09:32,940
actually written webassembly

00:09:29,630 --> 00:09:35,660
it's like all right cool all right how

00:09:32,940 --> 00:09:36,840
many people have used wasn't binding

00:09:35,660 --> 00:09:38,190
okay

00:09:36,840 --> 00:09:39,360
well that's really interesting I know we

00:09:38,190 --> 00:09:41,490
got a couple people from a couple

00:09:39,360 --> 00:09:42,810
companies here that use web assemblies

00:09:41,490 --> 00:09:44,640
so that's cool

00:09:42,810 --> 00:09:46,770
this talk is definitely aimed for people

00:09:44,640 --> 00:09:49,140
who don't super know what web assembly

00:09:46,770 --> 00:09:51,180
is but by the end we're gonna get to

00:09:49,140 --> 00:09:53,940
some real nitty-gritty cool static

00:09:51,180 --> 00:09:56,610
analysis stuff so let's get to it

00:09:53,940 --> 00:09:58,170
so hilariously for a tool that's

00:09:56,610 --> 00:09:59,070
supposed to be empowering and helping

00:09:58,170 --> 00:10:01,920
people

00:09:59,070 --> 00:10:03,990
the term wasm bind gen sounds completely

00:10:01,920 --> 00:10:05,550
obscure so when i was talking about

00:10:03,990 --> 00:10:08,070
writing this talk a little while ago my

00:10:05,550 --> 00:10:10,860
friend was like wesam bind gen sounds

00:10:08,070 --> 00:10:12,570
like a village in germany and in

00:10:10,860 --> 00:10:14,580
particular it sounds like it should be a

00:10:12,570 --> 00:10:16,410
resort and so she was like oh yeah I

00:10:14,580 --> 00:10:18,120
just got back from Wesen binding near

00:10:16,410 --> 00:10:20,660
baden-baden in the Scots vault

00:10:18,120 --> 00:10:22,920
so I know we're in Russia here but also

00:10:20,660 --> 00:10:26,070
Wesen binding is a really kind of

00:10:22,920 --> 00:10:27,750
strange word so the first step in the

00:10:26,070 --> 00:10:30,960
rus community actually has several of

00:10:27,750 --> 00:10:32,820
these binding tools but buying gen can

00:10:30,960 --> 00:10:35,070
be understood as short for bindings

00:10:32,820 --> 00:10:36,900
generator which is an expansion that

00:10:35,070 --> 00:10:39,480
doesn't really tell you all that much

00:10:36,900 --> 00:10:41,460
more about it but the way I would kind

00:10:39,480 --> 00:10:43,050
of describe it is it generates code that

00:10:41,460 --> 00:10:45,450
helps separate types of code work

00:10:43,050 --> 00:10:48,030
together and that's still pretty vague

00:10:45,450 --> 00:10:49,890
but you know building bridges is hard

00:10:48,030 --> 00:10:51,690
let's have computers do it fundamentally

00:10:49,890 --> 00:10:53,670
a binding is going to be generating a

00:10:51,690 --> 00:10:55,590
ton of boilerplate code that's needed to

00:10:53,670 --> 00:10:57,450
get like two different programming

00:10:55,590 --> 00:11:01,200
languages to work together potentially

00:10:57,450 --> 00:11:03,210
and so why I write a ton of boilerplate

00:11:01,200 --> 00:11:04,620
when we have a beautiful language that's

00:11:03,210 --> 00:11:06,840
incredibly good at gender

00:11:04,620 --> 00:11:08,760
reading code so these binding tools are

00:11:06,840 --> 00:11:11,880
pretty common in the rust community

00:11:08,760 --> 00:11:13,880
there's several of them but obviously

00:11:11,880 --> 00:11:16,560
we'll talk about the wasm one today so

00:11:13,880 --> 00:11:18,540
Wesson bind gen describes itself as

00:11:16,560 --> 00:11:22,580
facilitating high-level interactions

00:11:18,540 --> 00:11:25,410
between wasm modules and JavaScript so

00:11:22,580 --> 00:11:28,110
in this talk we'll talk about what the

00:11:25,410 --> 00:11:30,960
heck that means why we want to do this

00:11:28,110 --> 00:11:34,230
and how it is that the binding tool

00:11:30,960 --> 00:11:36,720
itself is able to perform this all right

00:11:34,230 --> 00:11:38,280
so again what wesson binding does we'll

00:11:36,720 --> 00:11:39,660
go through an overview briefly of what

00:11:38,280 --> 00:11:41,910
web assembly is we'll talk about

00:11:39,660 --> 00:11:43,920
developer workflow go through some

00:11:41,910 --> 00:11:46,110
features and then we'll figure out some

00:11:43,920 --> 00:11:48,120
of the nitty-gritty inside wesson

00:11:46,110 --> 00:11:49,980
binding is a fascinating tool and I

00:11:48,120 --> 00:11:52,500
could spend a whole talk talking about

00:11:49,980 --> 00:11:54,300
just the internals of it but that is not

00:11:52,500 --> 00:11:56,850
this talk they'll come find me later if

00:11:54,300 --> 00:11:58,770
you'd like to talk about it alright so

00:11:56,850 --> 00:12:02,100
let's talk first about what Wesson bind

00:11:58,770 --> 00:12:04,170
gen does so fundamentally at its core

00:12:02,100 --> 00:12:05,940
wesam bind gen is going to do two things

00:12:04,170 --> 00:12:08,550
for you the first thing it will do is

00:12:05,940 --> 00:12:10,740
create a wrapper j/s module for your

00:12:08,550 --> 00:12:13,170
wasm code and that's because currently

00:12:10,740 --> 00:12:15,990
browsers are not able to actually load

00:12:13,170 --> 00:12:19,530
wisdom directly and then it's going to

00:12:15,990 --> 00:12:21,720
generate bindings for your j/s to

00:12:19,530 --> 00:12:22,950
communicate with your wasm code and if

00:12:21,720 --> 00:12:23,970
that doesn't totally make sense

00:12:22,950 --> 00:12:27,210
don't worry because that's what we're

00:12:23,970 --> 00:12:28,860
about to dive deeper into so one thing

00:12:27,210 --> 00:12:30,870
that I will mention is that wesam budgin

00:12:28,860 --> 00:12:32,250
is an unusual bind gen if you're used to

00:12:30,870 --> 00:12:34,320
other bind gens this one's a little bit

00:12:32,250 --> 00:12:36,920
stranger and that's because it generates

00:12:34,320 --> 00:12:39,300
bindings for two things to communicate

00:12:36,920 --> 00:12:41,280
but neither of those things is actually

00:12:39,300 --> 00:12:44,400
rust we're actually going to be

00:12:41,280 --> 00:12:46,080
generating javascript which is

00:12:44,400 --> 00:12:47,520
interesting if you are the person who

00:12:46,080 --> 00:12:49,530
thinks that web assembly is going to

00:12:47,520 --> 00:12:53,700
kill JavaScript this talk is for you

00:12:49,530 --> 00:12:55,380
because it's not going to yeah so let's

00:12:53,700 --> 00:12:58,740
talk about why it generates JavaScript

00:12:55,380 --> 00:13:00,390
so why do we have wasn't punching so in

00:12:58,740 --> 00:13:01,860
order to understand the reason why

00:13:00,390 --> 00:13:03,810
somebody didn't exist we have to

00:13:01,860 --> 00:13:05,790
understand some fundamental things about

00:13:03,810 --> 00:13:07,230
web assembly and since a bunch of people

00:13:05,790 --> 00:13:08,700
in this audience are here this might be

00:13:07,230 --> 00:13:12,690
a little light for you but we'll go

00:13:08,700 --> 00:13:14,580
quick so fundamentally wasm is a binary

00:13:12,690 --> 00:13:17,160
instruction format for a stack based

00:13:14,580 --> 00:13:17,970
virtual machine as you'll note it was a

00:13:17,160 --> 00:13:19,319
binary

00:13:17,970 --> 00:13:22,800
action format people like to say

00:13:19,319 --> 00:13:24,990
webassembly neither web nor assembly so

00:13:22,800 --> 00:13:26,699
it's kind of a misleading name but we

00:13:24,990 --> 00:13:28,620
can fundamentally understand it as an

00:13:26,699 --> 00:13:31,620
incredibly low-level language that is

00:13:28,620 --> 00:13:33,990
native to the browser and so if designed

00:13:31,620 --> 00:13:36,600
is a portable target for compilation and

00:13:33,990 --> 00:13:39,000
so here we say high level languages like

00:13:36,600 --> 00:13:42,000
C C++ and rest which is funny because we

00:13:39,000 --> 00:13:44,490
often think of those as low-level and so

00:13:42,000 --> 00:13:46,290
you could enable a deployment on the web

00:13:44,490 --> 00:13:47,910
for a client development but there's

00:13:46,290 --> 00:13:49,860
also puns with people using web assembly

00:13:47,910 --> 00:13:52,980
on the server and a lot of very

00:13:49,860 --> 00:13:55,019
interesting work on wasm independent

00:13:52,980 --> 00:13:56,699
runtimes which is outside the scope of

00:13:55,019 --> 00:13:58,889
this talk but if you are interested in

00:13:56,699 --> 00:14:01,170
like you know running wasm on the edge

00:13:58,889 --> 00:14:03,500
for a CDN or something please come talk

00:14:01,170 --> 00:14:07,470
to me because that stuff super exciting

00:14:03,500 --> 00:14:10,079
all right so what does wasm look like it

00:14:07,470 --> 00:14:12,899
looks like this what assembly has a ton

00:14:10,079 --> 00:14:15,509
of different formats but some of them

00:14:12,899 --> 00:14:18,360
are human readable so you can see up at

00:14:15,509 --> 00:14:20,430
the top that's the s expression format

00:14:18,360 --> 00:14:22,259
for web assembly whenever I show this I

00:14:20,430 --> 00:14:26,309
like to say for anyone out there that

00:14:22,259 --> 00:14:29,490
wanted Lisp to win maybe it did cuz it

00:14:26,309 --> 00:14:32,189
looks like Lisp but you can also see

00:14:29,490 --> 00:14:34,050
there's a bunch of pretty unhuman

00:14:32,189 --> 00:14:37,620
readable sections which is the

00:14:34,050 --> 00:14:39,569
underlying web assembly so why would

00:14:37,620 --> 00:14:43,139
anybody want to use assembly a web

00:14:39,569 --> 00:14:46,139
assembly everyone uses assembly and so

00:14:43,139 --> 00:14:48,120
there's a couple of things so first we'd

00:14:46,139 --> 00:14:51,170
like to say that it's size and load time

00:14:48,120 --> 00:14:54,059
fishing as a binary format and that's

00:14:51,170 --> 00:14:55,949
sort of true it's certainly lower level

00:14:54,059 --> 00:14:58,920
it's faster if it can take advantage of

00:14:55,949 --> 00:15:00,629
some of the native hardware as rust

00:14:58,920 --> 00:15:02,160
developers we may be familiar with the

00:15:00,629 --> 00:15:04,589
fact that rust tends to produce slightly

00:15:02,160 --> 00:15:06,720
larger binaries and sometimes we'd want

00:15:04,589 --> 00:15:08,279
and that's an active piece of

00:15:06,720 --> 00:15:10,769
development right now and web assembly

00:15:08,279 --> 00:15:12,629
for rust which is very interesting a

00:15:10,769 --> 00:15:14,759
nice thing about it particularly on the

00:15:12,629 --> 00:15:17,639
web is that it's a memory safe sandbox

00:15:14,759 --> 00:15:19,500
which is particularly awesome and the

00:15:17,639 --> 00:15:22,079
most important part is that it's part of

00:15:19,500 --> 00:15:24,240
the open web standards so you may be

00:15:22,079 --> 00:15:28,110
familiar with something like pinochle

00:15:24,240 --> 00:15:30,929
from Google or Adobe Flash anyone think

00:15:28,110 --> 00:15:31,740
of like why you would want to use Adobe

00:15:30,929 --> 00:15:33,060
Flash it's really

00:15:31,740 --> 00:15:35,460
similar to why you would want to use

00:15:33,060 --> 00:15:37,080
webassembly except instead of having to

00:15:35,460 --> 00:15:40,260
like download a really shady looking

00:15:37,080 --> 00:15:42,000
installer this is just part of the open

00:15:40,260 --> 00:15:44,660
web standard and something that browsers

00:15:42,000 --> 00:15:47,970
support by default which is super cool

00:15:44,660 --> 00:15:49,980
so why would you want to use rust in

00:15:47,970 --> 00:15:51,750
particular to compile to web assembly

00:15:49,980 --> 00:15:53,790
like any assembly language you can

00:15:51,750 --> 00:15:57,330
target web assembly with many different

00:15:53,790 --> 00:15:59,010
languages so one of the biggest reasons

00:15:57,330 --> 00:16:01,650
that rust is a really excellent choice

00:15:59,010 --> 00:16:03,600
is that rust does not have a runtime

00:16:01,650 --> 00:16:05,880
here I say rust has no garbage

00:16:03,600 --> 00:16:09,060
collection but it's not really true we

00:16:05,880 --> 00:16:10,590
have static garbage collection but the

00:16:09,060 --> 00:16:12,360
big thing to note is that all of that

00:16:10,590 --> 00:16:15,150
stuff is not actually happening at

00:16:12,360 --> 00:16:17,220
runtime if you wanted to take a language

00:16:15,150 --> 00:16:20,190
like JavaScript or maybe something like

00:16:17,220 --> 00:16:22,320
go and compile it to web assembly what

00:16:20,190 --> 00:16:24,720
you'd have to do is also compile your

00:16:22,320 --> 00:16:27,150
runtime to web assembly and include it

00:16:24,720 --> 00:16:29,040
in the bundle and so it's totally

00:16:27,150 --> 00:16:31,260
possible to target web assembly from a

00:16:29,040 --> 00:16:33,300
huge variety of languages but when you

00:16:31,260 --> 00:16:35,250
have to include an a runtime or an

00:16:33,300 --> 00:16:37,260
interpreter your bundle size is going to

00:16:35,250 --> 00:16:39,060
get pretty large and if one of the

00:16:37,260 --> 00:16:40,830
benefits of using web assembly is to

00:16:39,060 --> 00:16:43,320
have a small binary having to add a

00:16:40,830 --> 00:16:45,570
whole runtime to that binary is kind of

00:16:43,320 --> 00:16:47,250
losing that point so rust is

00:16:45,570 --> 00:16:48,930
particularly nice because it

00:16:47,250 --> 00:16:51,450
fundamentally doesn't have that runtime

00:16:48,930 --> 00:16:53,040
overhead and so it's going to produce a

00:16:51,450 --> 00:16:54,390
smaller binary than something like go

00:16:53,040 --> 00:16:57,420
which is going to have to include that

00:16:54,390 --> 00:17:00,270
wrong time and then beyond that whole

00:16:57,420 --> 00:17:03,390
runtime element russ is very awesome and

00:17:00,270 --> 00:17:05,910
again as a low-level language it focuses

00:17:03,390 --> 00:17:06,450
on the empowering element which is to

00:17:05,910 --> 00:17:08,670
say

00:17:06,450 --> 00:17:11,580
rust is tends to be more approachable

00:17:08,670 --> 00:17:12,870
than something like C or C++ and to that

00:17:11,580 --> 00:17:15,630
end if you're a JavaScript developer

00:17:12,870 --> 00:17:17,610
looking to do some web assembly reaching

00:17:15,630 --> 00:17:20,160
for rust could be potentially more

00:17:17,610 --> 00:17:24,570
welcoming than trying to target one of

00:17:20,160 --> 00:17:26,190
those other languages all right so at

00:17:24,570 --> 00:17:28,590
the beginning of last year when we were

00:17:26,190 --> 00:17:30,780
setting the rust 2018 roadmap there was

00:17:28,590 --> 00:17:34,110
a bunch of hype about web assembly and

00:17:30,780 --> 00:17:36,090
web assembly is generating a ton of hype

00:17:34,110 --> 00:17:37,170
now and I have to say I'm personally

00:17:36,090 --> 00:17:38,910
nervous I want to make sure that

00:17:37,170 --> 00:17:40,680
technology lives up to the hype because

00:17:38,910 --> 00:17:42,660
there's a lot of people quite excited

00:17:40,680 --> 00:17:43,590
about it right now but one of the

00:17:42,660 --> 00:17:46,559
reasons I'm

00:17:43,590 --> 00:17:49,020
particularly excited about it is this

00:17:46,559 --> 00:17:51,270
graph so people who know my background

00:17:49,020 --> 00:17:53,520
will know that I used to work at M p.m.

00:17:51,270 --> 00:17:56,070
and so I see people a couple of people

00:17:53,520 --> 00:17:57,539
cringed here going so this is the module

00:17:56,070 --> 00:17:59,640
accounts website which is a website that

00:17:57,539 --> 00:18:01,470
keeps track of the number of packages on

00:17:59,640 --> 00:18:02,880
package managers for many different

00:18:01,470 --> 00:18:06,539
types of communities and languages and

00:18:02,880 --> 00:18:09,539
here I've just reduced it to NPM and

00:18:06,539 --> 00:18:11,669
crates i/o and so you can see NPM kind

00:18:09,539 --> 00:18:14,159
of shooting up like that

00:18:11,669 --> 00:18:16,289
and crates a oh I mean the fact that you

00:18:14,159 --> 00:18:18,210
can even see it going up in comparison

00:18:16,289 --> 00:18:20,190
to the NPM growth chart is actually

00:18:18,210 --> 00:18:22,799
really awesome like good job y'all we're

00:18:20,190 --> 00:18:25,529
doing it because NPM has really just

00:18:22,799 --> 00:18:29,279
taken off with stuff however the awesome

00:18:25,529 --> 00:18:31,409
thing about webassembly is what if rust

00:18:29,279 --> 00:18:34,350
as a language that can target web

00:18:31,409 --> 00:18:37,140
assembly could take advantage of this

00:18:34,350 --> 00:18:40,409
obviously huge exponential growth of the

00:18:37,140 --> 00:18:42,779
NPM and JavaScript ecosystem which is to

00:18:40,409 --> 00:18:44,580
say if we can use rust to target web

00:18:42,779 --> 00:18:48,149
assembly and create packages that could

00:18:44,580 --> 00:18:51,720
be distributed on NPM look at the large

00:18:48,149 --> 00:18:53,640
number of you know people and packages

00:18:51,720 --> 00:18:55,799
that we could interact with like this is

00:18:53,640 --> 00:18:56,730
a huge growth opportunity for us and I

00:18:55,799 --> 00:19:00,960
think that's one of the most awesome

00:18:56,730 --> 00:19:02,309
parts about web assembly so web assembly

00:19:00,960 --> 00:19:04,140
comes with some of its own difficulties

00:19:02,309 --> 00:19:06,809
though like it's a very awesome powerful

00:19:04,140 --> 00:19:08,429
language open standards hopefully at

00:19:06,809 --> 00:19:10,470
this point you're at least vaguely sold

00:19:08,429 --> 00:19:13,230
on the idea that it's interesting but

00:19:10,470 --> 00:19:15,270
there's some serious downsides so one of

00:19:13,230 --> 00:19:17,370
the biggest ones is that wesen modules

00:19:15,270 --> 00:19:20,220
can only call our export functions which

00:19:17,370 --> 00:19:22,950
deal exclusively with number types and

00:19:20,220 --> 00:19:25,049
so you might be sitting there going mmm

00:19:22,950 --> 00:19:28,789
well you know all programming can be

00:19:25,049 --> 00:19:31,260
reduced to numbers it's totally true and

00:19:28,789 --> 00:19:33,840
yeah I guess that's true like it is

00:19:31,260 --> 00:19:35,990
complete that you know webassembly can

00:19:33,840 --> 00:19:39,120
only express a program with numbers but

00:19:35,990 --> 00:19:40,799
I'm not interested in doing that like

00:19:39,120 --> 00:19:42,630
web development is something that I'd

00:19:40,799 --> 00:19:44,909
like to say is fancy string

00:19:42,630 --> 00:19:47,070
concatenation and well I totally

00:19:44,909 --> 00:19:50,130
understand that strings can be expressed

00:19:47,070 --> 00:19:51,600
as a number my interest in expressing

00:19:50,130 --> 00:19:54,659
strings as a number when I'm trying to

00:19:51,600 --> 00:19:56,669
like write some HTML is exactly zero

00:19:54,659 --> 00:19:58,139
I want my string type ID

00:19:56,669 --> 00:20:00,149
want to be trying to convert everything

00:19:58,139 --> 00:20:02,129
to numbers all the time strings are

00:20:00,149 --> 00:20:03,809
already difficult enough as it is and as

00:20:02,129 --> 00:20:05,639
rust developers you probably know that

00:20:03,809 --> 00:20:07,350
so having to take the strings and then

00:20:05,639 --> 00:20:12,529
parm into numbers and all over again

00:20:07,350 --> 00:20:16,590
would be completely unpleasant so enter

00:20:12,529 --> 00:20:18,210
wasm Ferris and this is really the

00:20:16,590 --> 00:20:20,369
driving motivation of wesen bind join

00:20:18,210 --> 00:20:23,549
and so the goal of wesen bindin is to

00:20:20,369 --> 00:20:26,249
enhance this ABI of wesen modules with

00:20:23,549 --> 00:20:27,869
richer types which is to say I'd really

00:20:26,249 --> 00:20:30,480
like to program with something more than

00:20:27,869 --> 00:20:32,789
numbers so if you aren't familiar with

00:20:30,480 --> 00:20:35,669
that word ABI it stands for application

00:20:32,789 --> 00:20:37,320
binary interface and so it's just

00:20:35,669 --> 00:20:39,720
fundamentally the interface between two

00:20:37,320 --> 00:20:41,159
binary program modules one of them is

00:20:39,720 --> 00:20:43,529
often a library and the other an

00:20:41,159 --> 00:20:44,789
operating system or a library or

00:20:43,529 --> 00:20:47,700
operating system and others something

00:20:44,789 --> 00:20:49,289
that's being run by a user and so the

00:20:47,700 --> 00:20:51,840
web is a really interesting platform

00:20:49,289 --> 00:20:54,480
insofar as it never really had this base

00:20:51,840 --> 00:20:56,489
layer if we look at stuff like Linux or

00:20:54,480 --> 00:20:59,100
maybe even the JVM there's an

00:20:56,489 --> 00:21:00,809
understanding of an avi and usually the

00:20:59,100 --> 00:21:02,639
ABI is one of the first things when

00:21:00,809 --> 00:21:04,169
platforms come out to be developed but

00:21:02,639 --> 00:21:06,899
the web is kind of fascinating in that

00:21:04,169 --> 00:21:08,609
it developed kind of out of order so we

00:21:06,899 --> 00:21:11,580
got all of the other higher-level bits

00:21:08,609 --> 00:21:14,009
like languages and tooling and libraries

00:21:11,580 --> 00:21:16,499
and ecosystem and now kind of like a

00:21:14,009 --> 00:21:18,840
little late right now we're throwing in

00:21:16,499 --> 00:21:20,249
that bottom layer and so that's kind of

00:21:18,840 --> 00:21:23,239
an interesting development to see that

00:21:20,249 --> 00:21:26,369
it's kind of happening out of order so

00:21:23,239 --> 00:21:28,710
lazon is the ABI of the web but as I've

00:21:26,369 --> 00:21:30,749
said you know it's just not complete yet

00:21:28,710 --> 00:21:32,840
so we only have numbers and there's also

00:21:30,749 --> 00:21:35,700
a fair number of other things missing

00:21:32,840 --> 00:21:37,049
there's lots of proposals if you're

00:21:35,700 --> 00:21:38,460
interested I'm having to talk about them

00:21:37,049 --> 00:21:40,169
but for the sake of getting through this

00:21:38,460 --> 00:21:43,559
we're not going to dive too deep into

00:21:40,169 --> 00:21:44,999
that but so the dream here would be

00:21:43,559 --> 00:21:47,489
something like this where we could take

00:21:44,999 --> 00:21:49,379
rust we could use cargo and we could

00:21:47,489 --> 00:21:51,809
build our web assembly and it would be

00:21:49,379 --> 00:21:54,989
easily consumable from either a browser

00:21:51,809 --> 00:21:57,779
or no js' that would be the dream but it

00:21:54,989 --> 00:22:00,779
turns out that currently we need a

00:21:57,779 --> 00:22:02,639
little bit more to get this going and so

00:22:00,779 --> 00:22:03,840
why isn't buying jan and a couple of

00:22:02,639 --> 00:22:05,369
other tools i'm going to talk to you

00:22:03,840 --> 00:22:09,059
about or what is going to make this

00:22:05,369 --> 00:22:10,230
better so one of the big reasons this is

00:22:09,059 --> 00:22:11,760
a problem is that

00:22:10,230 --> 00:22:13,650
if you have a website in this day and

00:22:11,760 --> 00:22:16,500
age you likely also have some JavaScript

00:22:13,650 --> 00:22:18,179
and I imagine there's people out here

00:22:16,500 --> 00:22:20,910
who think javascript is terrible and

00:22:18,179 --> 00:22:23,070
like bless but like JavaScript is not

00:22:20,910 --> 00:22:26,130
going away and the web runs in

00:22:23,070 --> 00:22:28,530
JavaScript and so in order to make web

00:22:26,130 --> 00:22:30,660
assembly a viable technology for using

00:22:28,530 --> 00:22:32,850
in the browser or node we need to make

00:22:30,660 --> 00:22:34,980
it be able to interact with JavaScript

00:22:32,850 --> 00:22:36,809
this is a number one important thing

00:22:34,980 --> 00:22:38,700
so again if you thought web assembly was

00:22:36,809 --> 00:22:40,049
trying to kill JavaScript it turns out

00:22:38,700 --> 00:22:42,419
that one of the most important things

00:22:40,049 --> 00:22:43,919
for web assembly to be successful is for

00:22:42,419 --> 00:22:46,260
it to actually be able to talk to

00:22:43,919 --> 00:22:48,179
JavaScript because JavaScript is such a

00:22:46,260 --> 00:22:51,480
runaway success that even if you

00:22:48,179 --> 00:22:53,220
desperately wish for it to die it's not

00:22:51,480 --> 00:22:55,850
going to at least not anytime soon

00:22:53,220 --> 00:22:58,200
likely not in any of our lifetimes so

00:22:55,850 --> 00:23:00,030
how do we solve this problem as I said

00:22:58,200 --> 00:23:01,620
web assembly really only understands

00:23:00,030 --> 00:23:03,419
numbers and if you've programmed in

00:23:01,620 --> 00:23:08,160
JavaScript you're aware that they have

00:23:03,419 --> 00:23:10,230
strings object even classes and so how

00:23:08,160 --> 00:23:12,330
do we get rusts to compile to web

00:23:10,230 --> 00:23:14,640
assembly and then make that web assembly

00:23:12,330 --> 00:23:16,559
able to talk to the JavaScript without

00:23:14,640 --> 00:23:18,809
having to constantly shoehorn things

00:23:16,559 --> 00:23:21,690
into vex of numbers which is an

00:23:18,809 --> 00:23:23,820
unpleasant task and so fundamentally the

00:23:21,690 --> 00:23:27,150
tool gene that we have is going to do

00:23:23,820 --> 00:23:29,340
something like this so as I said before

00:23:27,150 --> 00:23:32,580
what we have is we write our rest we

00:23:29,340 --> 00:23:36,570
compile it using the wasm 32 unknown

00:23:32,580 --> 00:23:38,220
unknown target and we're not yet done so

00:23:36,570 --> 00:23:40,260
once we've done that we're going to use

00:23:38,220 --> 00:23:43,530
tools called lesson pack and wisdom bind

00:23:40,260 --> 00:23:45,960
gen to generate a bunch of JavaScript

00:23:43,530 --> 00:23:47,700
and generating that javascript is going

00:23:45,960 --> 00:23:49,380
to allow us to be able to use our web

00:23:47,700 --> 00:23:51,720
assembly and also have our web assembly

00:23:49,380 --> 00:23:53,280
talk to other JavaScript and so what you

00:23:51,720 --> 00:23:55,350
can see in this picture is that we have

00:23:53,280 --> 00:23:57,150
a little web assembly kind of surrounded

00:23:55,350 --> 00:23:59,340
by a JavaScript that's the module

00:23:57,150 --> 00:24:01,169
wrapper and then we're gonna jump into

00:23:59,340 --> 00:24:03,690
this but the second J's file that's

00:24:01,169 --> 00:24:06,150
generated is going to be a file that is

00:24:03,690 --> 00:24:09,390
going to allow talking to the rich types

00:24:06,150 --> 00:24:11,190
in JavaScript and then have boilerplate

00:24:09,390 --> 00:24:13,919
that will automatically convert those

00:24:11,190 --> 00:24:15,870
rich j/s types into the types that web

00:24:13,919 --> 00:24:18,090
assembly understands fundamentally all

00:24:15,870 --> 00:24:22,320
of that conversion boilerplate being

00:24:18,090 --> 00:24:24,300
generated for you using these tools all

00:24:22,320 --> 00:24:25,650
right so why the heck would you

00:24:24,300 --> 00:24:27,900
to do this like as far as like

00:24:25,650 --> 00:24:30,810
architecture documents go like this

00:24:27,900 --> 00:24:32,610
looks kind of complicated right so

00:24:30,810 --> 00:24:35,580
there's a lot of real good benefits for

00:24:32,610 --> 00:24:37,440
this first off productivity so hmm I

00:24:35,580 --> 00:24:38,070
would like to write rust to generate

00:24:37,440 --> 00:24:39,750
webassembly

00:24:38,070 --> 00:24:42,150
maybe I should write web assembly from

00:24:39,750 --> 00:24:43,500
scratch it's certainly possible to write

00:24:42,150 --> 00:24:45,750
assembly from scratch I've done it

00:24:43,500 --> 00:24:48,390
before it's pretty fun but it's not

00:24:45,750 --> 00:24:50,400
terribly maintainable code I remember at

00:24:48,390 --> 00:24:51,900
one of my first the very first rust fest

00:24:50,400 --> 00:24:53,760
that happened I gave a presentation on a

00:24:51,900 --> 00:24:55,680
teaching operating system I work on and

00:24:53,760 --> 00:24:58,050
they put me right after lunch and I was

00:24:55,680 --> 00:25:00,690
like okay I'm gonna hand code some live

00:24:58,050 --> 00:25:02,850
assembly to hand code assembly live to

00:25:00,690 --> 00:25:05,040
like wake everybody up and of course I

00:25:02,850 --> 00:25:06,660
changed something and my vector and

00:25:05,040 --> 00:25:08,370
didn't update the length and got one of

00:25:06,660 --> 00:25:10,920
those really epic beautiful error

00:25:08,370 --> 00:25:12,660
messages that assembly gives you so

00:25:10,920 --> 00:25:15,420
that's not really fun Russ gives great

00:25:12,660 --> 00:25:17,760
error messages additionally you have

00:25:15,420 --> 00:25:20,310
this idea of maintainability so

00:25:17,760 --> 00:25:21,540
javascript is actually fast and if you

00:25:20,310 --> 00:25:23,280
want to fight me with me about that

00:25:21,540 --> 00:25:25,890
later that's fine we can go do that in

00:25:23,280 --> 00:25:27,240
the hallway but the engines that are

00:25:25,890 --> 00:25:29,670
processing javascript in the browsers

00:25:27,240 --> 00:25:31,980
are actually incredibly great the trick

00:25:29,670 --> 00:25:34,980
is is order to write fast JavaScript you

00:25:31,980 --> 00:25:36,300
have to be a magician or a wizard you

00:25:34,980 --> 00:25:38,070
have to know all of these really fancy

00:25:36,300 --> 00:25:40,050
optimizations that like something like

00:25:38,070 --> 00:25:42,510
v8 is gonna do and you're gonna have to

00:25:40,050 --> 00:25:44,760
write code that looks bonkers like

00:25:42,510 --> 00:25:47,430
absolutely ridiculous looking JavaScript

00:25:44,760 --> 00:25:49,170
whereas writing rust fast even rust that

00:25:47,430 --> 00:25:51,960
compiles to web assembly you can very

00:25:49,170 --> 00:25:53,130
pretty idiomatic looking code and that

00:25:51,960 --> 00:25:55,920
makes things significantly more

00:25:53,130 --> 00:25:57,690
maintainable and then finally one of the

00:25:55,920 --> 00:25:59,280
awesome things about restauranteurs web

00:25:57,690 --> 00:26:02,160
assembly and webassembly in general is

00:25:59,280 --> 00:26:03,930
the accessibility angle so I think rust

00:26:02,160 --> 00:26:07,470
is certainly more approachable than C or

00:26:03,930 --> 00:26:08,700
C++ that is my opinion but additionally

00:26:07,470 --> 00:26:10,440
if we just take a look at it from the

00:26:08,700 --> 00:26:12,720
web assembly technology side with

00:26:10,440 --> 00:26:16,020
smaller bundles and more efficient

00:26:12,720 --> 00:26:18,810
execution web assembly codes going to be

00:26:16,020 --> 00:26:20,160
able to run on better devices we had

00:26:18,810 --> 00:26:21,660
their web somebody working group this

00:26:20,160 --> 00:26:23,550
year and it's fascinating how much

00:26:21,660 --> 00:26:25,200
overlap there was between the web

00:26:23,550 --> 00:26:27,090
assembly working group and the embedded

00:26:25,200 --> 00:26:29,280
working group because we have very

00:26:27,090 --> 00:26:30,870
similar constraints and so all the

00:26:29,280 --> 00:26:32,160
benefits that you have and the things

00:26:30,870 --> 00:26:34,910
that you need from something like an

00:26:32,160 --> 00:26:37,350
embedded ecosystem like small binaries

00:26:34,910 --> 00:26:39,270
memory profile all those things are

00:26:37,350 --> 00:26:43,770
but whether somebody's also gonna help

00:26:39,270 --> 00:26:45,450
benefit from alright so in theory I have

00:26:43,770 --> 00:26:48,150
sold you on wanting to use webassembly

00:26:45,450 --> 00:26:50,130
maybe I haven't but assuming that I have

00:26:48,150 --> 00:26:53,100
sold you on this let's talk about how

00:26:50,130 --> 00:26:55,110
you can do this today so despite the

00:26:53,100 --> 00:26:57,539
fact that webassembly as a technology as

00:26:55,110 --> 00:27:00,090
a spec is still incredibly new and young

00:26:57,539 --> 00:27:02,340
we have done a ton of work this year to

00:27:00,090 --> 00:27:05,520
build a bunch of tools to make using

00:27:02,340 --> 00:27:09,210
rust and webassembly like possible and

00:27:05,520 --> 00:27:10,380
vaguely enjoyable and so I'd like to go

00:27:09,210 --> 00:27:14,159
through a bunch of those tools for you

00:27:10,380 --> 00:27:16,440
now so I like to say that it's magic I

00:27:14,159 --> 00:27:18,450
know the idea of magic in programming is

00:27:16,440 --> 00:27:20,669
some people like it some people don't

00:27:18,450 --> 00:27:23,159
but one of the things worth noting is

00:27:20,669 --> 00:27:25,740
that as we target this rust webassembly

00:27:23,159 --> 00:27:28,049
developer workflow we're focused on rust

00:27:25,740 --> 00:27:30,480
developers but we also want j/s

00:27:28,049 --> 00:27:32,909
developers because remember we want more

00:27:30,480 --> 00:27:35,460
people to become rust developers we want

00:27:32,909 --> 00:27:37,440
to empower folks and so creating these

00:27:35,460 --> 00:27:39,419
workflows is both focused on rust folks

00:27:37,440 --> 00:27:42,299
but also bringing in people who have

00:27:39,419 --> 00:27:45,690
maybe not dealt with a compiled language

00:27:42,299 --> 00:27:50,760
before alright so how many people love

00:27:45,690 --> 00:27:52,140
their developer workflow Oh me I don't

00:27:50,760 --> 00:27:53,520
know if you can understand me or you're

00:27:52,140 --> 00:27:54,720
not participating all right we can cope

00:27:53,520 --> 00:27:56,880
one person that's good

00:27:54,720 --> 00:27:59,460
we're rust developers car goes pretty

00:27:56,880 --> 00:28:00,929
cool the dev tools team is going to have

00:27:59,460 --> 00:28:02,789
to talk to the lot of you because

00:28:00,929 --> 00:28:07,530
apparently are very disappointed in the

00:28:02,789 --> 00:28:09,690
developer workflow but so although

00:28:07,530 --> 00:28:11,159
jeaious developers have fascinating

00:28:09,690 --> 00:28:12,690
workflow problems - and I think

00:28:11,159 --> 00:28:14,250
developer workflow and developer tools

00:28:12,690 --> 00:28:15,600
is really really interesting and that's

00:28:14,250 --> 00:28:18,450
why I've really enjoyed working on these

00:28:15,600 --> 00:28:19,860
projects so what we want is for you to

00:28:18,450 --> 00:28:21,210
feel a little bit more like this with

00:28:19,860 --> 00:28:23,900
your developer workflow really

00:28:21,210 --> 00:28:27,990
coordinated smooth having a good time

00:28:23,900 --> 00:28:32,220
and not crying at your laptop so I look

00:28:27,990 --> 00:28:34,080
like that a lot so and so one of our

00:28:32,220 --> 00:28:36,030
goals with the developer tools for this

00:28:34,080 --> 00:28:38,730
was that wisdom is not trying to replace

00:28:36,030 --> 00:28:40,559
JavaScript which is to say all of the

00:28:38,730 --> 00:28:42,480
workflows that we create for rust and

00:28:40,559 --> 00:28:45,299
webassembly should integrate seamlessly

00:28:42,480 --> 00:28:47,760
with the workflows that JavaScript

00:28:45,299 --> 00:28:49,409
developers already have and let me tell

00:28:47,760 --> 00:28:50,970
you like if you don't like your rust

00:28:49,409 --> 00:28:52,740
developer workflow the job is

00:28:50,970 --> 00:28:54,809
script developer workflow is all over

00:28:52,740 --> 00:28:58,200
the place there's all sorts of bundlers

00:28:54,809 --> 00:29:00,179
and compilers transpilers tons of stuff

00:28:58,200 --> 00:29:01,950
to deal with so at least javascript

00:29:00,179 --> 00:29:03,360
developers are used to a compile step

00:29:01,950 --> 00:29:05,400
they're usually not in the sense that

00:29:03,360 --> 00:29:07,890
rust has won all right

00:29:05,400 --> 00:29:09,570
so as I said before we're not trying to

00:29:07,890 --> 00:29:11,929
kill JavaScript remember almost all of

00:29:09,570 --> 00:29:15,030
this workflow is about generating and

00:29:11,929 --> 00:29:18,690
interoperating with JavaScript it's tons

00:29:15,030 --> 00:29:20,130
of JavaScript here so our use case when

00:29:18,690 --> 00:29:21,929
we first started developing these tools

00:29:20,130 --> 00:29:24,720
was that we want people to use web

00:29:21,929 --> 00:29:26,520
assembly to just surgically replace hot

00:29:24,720 --> 00:29:27,840
paths in their JavaScript like

00:29:26,520 --> 00:29:30,090
potentially you have some sort of

00:29:27,840 --> 00:29:31,799
JavaScript where you know JavaScript

00:29:30,090 --> 00:29:33,419
might not be the right tool for the job

00:29:31,799 --> 00:29:35,370
and it's really complicated for

00:29:33,419 --> 00:29:37,950
front-end developers like the idea of

00:29:35,370 --> 00:29:39,600
right tool for the job if you're a

00:29:37,950 --> 00:29:41,190
friend and developer you're the idea

00:29:39,600 --> 00:29:43,770
that you could like choose the right

00:29:41,190 --> 00:29:46,640
language for the task wasn't really an

00:29:43,770 --> 00:29:48,750
option like you have JavaScript and

00:29:46,640 --> 00:29:50,580
that's what you have that's what you

00:29:48,750 --> 00:29:52,140
have JavaScript and so this whole

00:29:50,580 --> 00:29:53,340
introduction of web assembly means that

00:29:52,140 --> 00:29:55,650
we can also kind of have to teach a

00:29:53,340 --> 00:29:57,750
generation of developers how to decide

00:29:55,650 --> 00:29:59,610
which tasks are good for one language

00:29:57,750 --> 00:30:01,559
versus the other and this is actually an

00:29:59,610 --> 00:30:03,570
incredibly difficult task there's tons

00:30:01,559 --> 00:30:05,640
of people excited about web assembly but

00:30:03,570 --> 00:30:07,409
what is web assembly good for is still

00:30:05,640 --> 00:30:09,630
kind of an interesting and open question

00:30:07,409 --> 00:30:11,549
so a lot of folks that we've seen who

00:30:09,630 --> 00:30:13,230
are early adopters of web assembly for

00:30:11,549 --> 00:30:16,679
this type of use case i've been

00:30:13,230 --> 00:30:19,380
primarily using it for parsing which is

00:30:16,679 --> 00:30:21,120
a incredibly complicated task and

00:30:19,380 --> 00:30:23,460
usually very resource-intensive

00:30:21,120 --> 00:30:27,000
but this is still a very interesting and

00:30:23,460 --> 00:30:28,950
open question all right so one of the

00:30:27,000 --> 00:30:32,730
examples of this that's currently I

00:30:28,950 --> 00:30:35,100
believe now finally in production is the

00:30:32,730 --> 00:30:37,020
source Maps implementation for Mozilla

00:30:35,100 --> 00:30:38,700
Firefox and so this was an article for

00:30:37,020 --> 00:30:40,470
the Mozilla hacks blog that was written

00:30:38,700 --> 00:30:42,179
by the lead of the rest president

00:30:40,470 --> 00:30:43,950
working group Nick Fitzgerald or Fitz

00:30:42,179 --> 00:30:47,159
gen as you may know him on the Internet

00:30:43,950 --> 00:30:50,490
and so these are some benchmarks and I

00:30:47,159 --> 00:30:52,740
know people love benchmarks but I will

00:30:50,490 --> 00:30:55,260
be completely honest with you in that

00:30:52,740 --> 00:30:58,620
it's very early in web assembly days and

00:30:55,260 --> 00:31:00,330
for much of your experience making your

00:30:58,620 --> 00:31:03,990
web simply go faster than your

00:31:00,330 --> 00:31:04,899
javascript is actually hard which is

00:31:03,990 --> 00:31:07,479
what I mean by Java

00:31:04,899 --> 00:31:08,739
just faster than you think it is but

00:31:07,479 --> 00:31:10,749
there's something very interesting about

00:31:08,739 --> 00:31:12,879
this graph that I really love and I

00:31:10,749 --> 00:31:14,080
wonder if you all notice it so just to

00:31:12,879 --> 00:31:16,960
explain what's going on here since the

00:31:14,080 --> 00:31:20,169
colors look a little dull you can see

00:31:16,960 --> 00:31:21,789
down here the red is the JavaScript and

00:31:20,169 --> 00:31:23,799
across we kind of pair it with the web

00:31:21,789 --> 00:31:25,269
assembly which is in blue and then the

00:31:23,799 --> 00:31:28,869
first two are Chrome's second - or

00:31:25,269 --> 00:31:30,369
Firefox second two are Safari so people

00:31:28,869 --> 00:31:32,440
might originally look at this graph and

00:31:30,369 --> 00:31:34,119
go oh the web assembly is faster that's

00:31:32,440 --> 00:31:36,789
very interesting I love that I love

00:31:34,119 --> 00:31:38,529
going fast but particularly as an ops

00:31:36,789 --> 00:31:40,570
developer when I look at this I see the

00:31:38,529 --> 00:31:42,999
vert of something very different which

00:31:40,570 --> 00:31:46,690
is take a look at the standard

00:31:42,999 --> 00:31:48,820
deviations of these timings when you

00:31:46,690 --> 00:31:50,919
look at the JavaScript one you can see

00:31:48,820 --> 00:31:52,779
that it has extremely large standard

00:31:50,919 --> 00:31:56,619
deviations which is it spread pretty far

00:31:52,779 --> 00:31:58,599
and why would that be the case well

00:31:56,619 --> 00:32:00,729
that's the case largely because of some

00:31:58,599 --> 00:32:02,559
fun thing called garbage collection I

00:32:00,729 --> 00:32:03,820
mean there's often other things involved

00:32:02,559 --> 00:32:05,379
in that as well but garbage collection

00:32:03,820 --> 00:32:08,739
is certainly one of them and so when we

00:32:05,379 --> 00:32:10,869
take a look at the web assembly here the

00:32:08,739 --> 00:32:14,019
reason I love web assembly is because it

00:32:10,869 --> 00:32:15,759
is predictable it's cool that it's fast

00:32:14,019 --> 00:32:16,210
but it turns out that making it fast is

00:32:15,759 --> 00:32:19,479
hard

00:32:16,210 --> 00:32:22,679
it's resource usage so is incredibly

00:32:19,479 --> 00:32:24,549
predictable and that's that type of

00:32:22,679 --> 00:32:27,159
reliability is something that I think is

00:32:24,549 --> 00:32:28,809
one of the better cells so you hear

00:32:27,159 --> 00:32:31,210
people say web assemblies fast that's

00:32:28,809 --> 00:32:32,589
cool but you know someone's talking

00:32:31,210 --> 00:32:34,830
about the right thing we're talk more

00:32:32,589 --> 00:32:38,529
about the resource predictability

00:32:34,830 --> 00:32:39,879
all right so ok I told you I was gonna

00:32:38,529 --> 00:32:41,710
tell you how to do this and I've still

00:32:39,879 --> 00:32:43,509
just kept talking about how cool web

00:32:41,710 --> 00:32:45,969
assembly is sorry about that let's get

00:32:43,509 --> 00:32:48,729
into the house all right so this is an

00:32:45,969 --> 00:32:50,559
amazing code cartoon from a artist and

00:32:48,729 --> 00:32:51,849
engineer named Lynn Clark she's super

00:32:50,559 --> 00:32:55,479
awesome and you should read her blog

00:32:51,849 --> 00:32:57,129
posts but funnily this is the workflow

00:32:55,479 --> 00:32:58,929
that you're gonna do so you're gonna

00:32:57,129 --> 00:33:01,239
compile your code to the web assembly

00:32:58,929 --> 00:33:03,489
target from rust then you are going to

00:33:01,239 --> 00:33:05,799
run the wasm binding CLI tool to

00:33:03,489 --> 00:33:08,739
generate your bindings and then you're

00:33:05,799 --> 00:33:11,529
able to package it up and deploy its NPM

00:33:08,739 --> 00:33:13,899
and then you can consume it from one of

00:33:11,529 --> 00:33:15,759
the JavaScript bundlers or alternatively

00:33:13,899 --> 00:33:17,510
you can just consume it whichever way

00:33:15,759 --> 00:33:20,860
you want without using a

00:33:17,510 --> 00:33:23,270
and so this is the general workflow so

00:33:20,860 --> 00:33:26,090
what would the code look like so this is

00:33:23,270 --> 00:33:27,620
our hello world you can see here in your

00:33:26,090 --> 00:33:29,300
cargo tamil you have to put a couple of

00:33:27,620 --> 00:33:31,250
things but your primary dependency is

00:33:29,300 --> 00:33:33,650
going to be wasm binding you're gonna

00:33:31,250 --> 00:33:36,740
quickly see that wasm binding is kind of

00:33:33,650 --> 00:33:39,170
deceptively actually two tools it is a

00:33:36,740 --> 00:33:41,840
library and a CLI tool and we'll talk

00:33:39,170 --> 00:33:43,040
about how those work in a second but

00:33:41,840 --> 00:33:45,710
then you can take a look at your libbed

00:33:43,040 --> 00:33:47,780
RS here and what you'll see is that

00:33:45,710 --> 00:33:49,970
you're gonna be using this wisdom bind

00:33:47,780 --> 00:33:52,309
gen attribute and that's because we

00:33:49,970 --> 00:33:54,110
leverage procedural macros to do a bunch

00:33:52,309 --> 00:33:57,170
of code generation for you there's code

00:33:54,110 --> 00:33:59,720
generation at every step of this but one

00:33:57,170 --> 00:34:01,820
thing you can see is a lot of what we're

00:33:59,720 --> 00:34:03,890
doing in web engine is the idea that we

00:34:01,820 --> 00:34:05,690
have to be able to pull things in from

00:34:03,890 --> 00:34:07,460
j/s then we need to be able to send

00:34:05,690 --> 00:34:10,040
things out to j/s this is like a huge

00:34:07,460 --> 00:34:12,800
input/output machine and so up here on

00:34:10,040 --> 00:34:15,830
the top you can see in the X turn block

00:34:12,800 --> 00:34:18,290
the first one you'll we write basically

00:34:15,830 --> 00:34:21,020
a function signature for what we

00:34:18,290 --> 00:34:22,730
anticipate will exist in the browser so

00:34:21,020 --> 00:34:24,230
this is actually more complicated than

00:34:22,730 --> 00:34:25,879
you actually have to write it we've made

00:34:24,230 --> 00:34:27,139
it even simpler but if you want to

00:34:25,879 --> 00:34:29,060
anticipate that there's an alert

00:34:27,139 --> 00:34:30,620
function in your browser you will write

00:34:29,060 --> 00:34:33,230
function alert and then you will write

00:34:30,620 --> 00:34:35,060
the type of the thing it takes then you

00:34:33,230 --> 00:34:36,740
can write your rust program and here

00:34:35,060 --> 00:34:38,899
we're going to be exporting a greet

00:34:36,740 --> 00:34:40,639
function and that greet function is just

00:34:38,899 --> 00:34:43,700
gonna call the browser's alert function

00:34:40,639 --> 00:34:45,500
and it's gonna pass in hello and then

00:34:43,700 --> 00:34:48,800
your name so this is a basic kind of

00:34:45,500 --> 00:34:51,770
hello world in our system right now and

00:34:48,800 --> 00:34:53,780
as I said it gets super fun so we don't

00:34:51,770 --> 00:34:55,870
only have naive examples and I'll but

00:34:53,780 --> 00:34:58,910
I'm about to dive into a bunch of others

00:34:55,870 --> 00:35:00,590
but the steps that I talked about seemed

00:34:58,910 --> 00:35:02,660
a little complicated like first you add

00:35:00,590 --> 00:35:04,220
the target and you compile to the target

00:35:02,660 --> 00:35:07,160
you run the bindings you do all this

00:35:04,220 --> 00:35:09,770
stuff you publish the NPM we realized

00:35:07,160 --> 00:35:11,750
that having all of these disparate kind

00:35:09,770 --> 00:35:15,080
of tools to use was kind of a pain in

00:35:11,750 --> 00:35:17,480
the butt and so so was born this tool

00:35:15,080 --> 00:35:20,510
called wasm PAC originally was in pack

00:35:17,480 --> 00:35:22,400
was a tool just to publish to NPM but

00:35:20,510 --> 00:35:24,230
it's now become an integrated build tool

00:35:22,400 --> 00:35:26,510
where we're gonna be compiling to web

00:35:24,230 --> 00:35:28,310
assembly we're gonna run wasm bind gen

00:35:26,510 --> 00:35:29,840
for you so you don't even have to use

00:35:28,310 --> 00:35:30,890
baizen Benjen and we're going to

00:35:29,840 --> 00:35:32,809
generate

00:35:30,890 --> 00:35:34,760
package for you that you could simply

00:35:32,809 --> 00:35:37,819
use like any other JavaScript package

00:35:34,760 --> 00:35:39,170
you could publish it to NPM you could do

00:35:37,819 --> 00:35:40,849
all sorts of different things with it

00:35:39,170 --> 00:35:42,589
but fundamentally we basically create

00:35:40,849 --> 00:35:44,539
one of those little web building blocks

00:35:42,589 --> 00:35:48,650
that anybody who's out there on the web

00:35:44,539 --> 00:35:50,960
can just use so you can just publish

00:35:48,650 --> 00:35:52,640
this is an example if you go to my NPM

00:35:50,960 --> 00:35:54,619
profile you'll see that I have tons of

00:35:52,640 --> 00:35:57,500
weird garbage packages that are just

00:35:54,619 --> 00:35:59,599
full of weird example code but there's

00:35:57,500 --> 00:36:01,130
tons of these that you can find and the

00:35:59,599 --> 00:36:04,880
webassembly packages on the NPM registry

00:36:01,130 --> 00:36:06,529
are growing so if you wanted to consume

00:36:04,880 --> 00:36:07,549
one of these packages I wanted to just

00:36:06,529 --> 00:36:09,589
show you quickly what that would look

00:36:07,549 --> 00:36:11,059
like so if we wanted to consume our

00:36:09,589 --> 00:36:12,920
hello Essen package that we just

00:36:11,059 --> 00:36:15,230
generated we can just add it as a

00:36:12,920 --> 00:36:18,740
dependency in our package JSON if you're

00:36:15,230 --> 00:36:20,750
familiar with how NPM works and we can

00:36:18,740 --> 00:36:22,760
just add that right there and then we

00:36:20,750 --> 00:36:25,940
add it like require it like we would

00:36:22,760 --> 00:36:27,619
normally or maybe import and then it

00:36:25,940 --> 00:36:29,029
will just work so that code we had

00:36:27,619 --> 00:36:34,220
called that alert function from the

00:36:29,029 --> 00:36:35,569
browser and here it is alright so one of

00:36:34,220 --> 00:36:36,950
the interesting things about web

00:36:35,569 --> 00:36:39,829
assembly because it's such a

00:36:36,950 --> 00:36:42,859
foundational tool is that its success is

00:36:39,829 --> 00:36:44,599
going to be very quiet because if things

00:36:42,859 --> 00:36:47,000
work well with web assembly you

00:36:44,599 --> 00:36:49,970
shouldn't even have to know that you are

00:36:47,000 --> 00:36:51,529
using it and so our goal at least from

00:36:49,970 --> 00:36:53,599
the Russell has a working group position

00:36:51,529 --> 00:36:56,299
is that we want to find foundational

00:36:53,599 --> 00:36:58,009
libraries in the NPM ecosystem where a

00:36:56,299 --> 00:37:00,440
lot of them are doing like incredibly

00:36:58,009 --> 00:37:02,150
resource intensive work and like kind of

00:37:00,440 --> 00:37:04,670
silently replace them with web assembly

00:37:02,150 --> 00:37:06,710
implementations so you might be using

00:37:04,670 --> 00:37:08,329
something like say react and you'll just

00:37:06,710 --> 00:37:12,140
keep using react the same way you always

00:37:08,329 --> 00:37:13,579
would use it but slowly bits and pieces

00:37:12,140 --> 00:37:14,990
of it maybe like a virtual Dom

00:37:13,579 --> 00:37:17,210
implementation or something like that

00:37:14,990 --> 00:37:19,309
will actually be replaced with web

00:37:17,210 --> 00:37:20,720
assembly so as somebody who's really

00:37:19,309 --> 00:37:22,519
excited about the technology it's an

00:37:20,720 --> 00:37:24,079
interesting thing to evangelize because

00:37:22,519 --> 00:37:26,230
fundamentally if we succeed

00:37:24,079 --> 00:37:28,880
you shouldn't even know we were there

00:37:26,230 --> 00:37:30,710
all right so let's talk a little bit

00:37:28,880 --> 00:37:32,269
about kind of show you what the end work

00:37:30,710 --> 00:37:35,859
is and kind of a high-level workflow

00:37:32,269 --> 00:37:38,329
what exactly just happened all right so

00:37:35,859 --> 00:37:40,099
what we did is we ran this tool called

00:37:38,329 --> 00:37:41,779
wasman pack and so what we can see up

00:37:40,099 --> 00:37:43,160
here is we started with a crate

00:37:41,779 --> 00:37:44,450
directory and inside that crate

00:37:43,160 --> 00:37:46,520
directory we have like

00:37:44,450 --> 00:37:51,530
kind of what we would expect in there so

00:37:46,520 --> 00:37:54,650
we have source we have a lib and so when

00:37:51,530 --> 00:37:56,150
I run where as impact builds what that's

00:37:54,650 --> 00:37:59,359
gonna do is it's gonna generate a

00:37:56,150 --> 00:38:01,040
package directory and inside the package

00:37:59,359 --> 00:38:03,200
directory is all of the things we

00:38:01,040 --> 00:38:05,960
generated both using cargo build and

00:38:03,200 --> 00:38:07,670
using wasm binder so we've got a bunch

00:38:05,960 --> 00:38:09,140
of actually really interesting things in

00:38:07,670 --> 00:38:11,780
here so as I promised you we're gonna

00:38:09,140 --> 00:38:14,869
generate a wasm for you and that exists

00:38:11,780 --> 00:38:17,359
right there but other things that we

00:38:14,869 --> 00:38:20,210
have is this hello Azzam Jas that's

00:38:17,359 --> 00:38:21,950
gonna be all the bindings so all of the

00:38:20,210 --> 00:38:25,040
things all of the functions that you had

00:38:21,950 --> 00:38:26,690
in rust that use rich types that aren't

00:38:25,040 --> 00:38:29,780
numbers this is going to have all those

00:38:26,690 --> 00:38:31,310
conversions for you and then a super-fun

00:38:29,780 --> 00:38:33,320
thing because we're coming from a

00:38:31,310 --> 00:38:35,390
strongly typed language we're able to

00:38:33,320 --> 00:38:38,150
generate typescript definitions for you

00:38:35,390 --> 00:38:39,950
for free which is pretty red even if you

00:38:38,150 --> 00:38:42,380
don't use typescript lots of ideas

00:38:39,950 --> 00:38:44,390
leverage these types files to be able to

00:38:42,380 --> 00:38:46,490
give you autofill and all sorts of

00:38:44,390 --> 00:38:48,770
things and so that's really great

00:38:46,490 --> 00:38:51,920
additionally we generate a package JSON

00:38:48,770 --> 00:38:53,990
for you and right now we just copy or

00:38:51,920 --> 00:38:56,450
read me over but there is some work in

00:38:53,990 --> 00:38:58,579
progress about taking your doc comments

00:38:56,450 --> 00:39:00,770
and being able to take what rust doc

00:38:58,579 --> 00:39:02,329
would write and add it to your readme

00:39:00,770 --> 00:39:04,400
for you so that you can have kind of a

00:39:02,329 --> 00:39:06,290
base API documentation inside your

00:39:04,400 --> 00:39:08,359
readme because it turns out in the NPM

00:39:06,290 --> 00:39:10,849
ecosystem readme czar really the docs

00:39:08,359 --> 00:39:14,240
that people use so just throw everything

00:39:10,849 --> 00:39:15,940
in there all right so those are the

00:39:14,240 --> 00:39:18,470
files that are generated but like what

00:39:15,940 --> 00:39:22,250
actually happened this is a very

00:39:18,470 --> 00:39:24,079
complicated diagram here so what was

00:39:22,250 --> 00:39:26,359
impact does for you is this first it's

00:39:24,079 --> 00:39:29,630
gonna run cargo build target was M

00:39:26,359 --> 00:39:31,280
unknown unknown but then what it's going

00:39:29,630 --> 00:39:34,280
to do and the trick here is that it

00:39:31,280 --> 00:39:36,680
turns out that targeting that wisdom 32

00:39:34,280 --> 00:39:39,890
unknown unknown target doesn't give us

00:39:36,680 --> 00:39:42,410
entirely what we want there's a bunch of

00:39:39,890 --> 00:39:44,260
things that are like vaguely associated

00:39:42,410 --> 00:39:47,089
with like the host bindings proposal

00:39:44,260 --> 00:39:49,339
that but building to this isn't going to

00:39:47,089 --> 00:39:51,380
give you and so that's why the Wesson

00:39:49,339 --> 00:39:54,260
bind JNT CLI tool is going to step in

00:39:51,380 --> 00:39:55,609
and take the product of cargo and make

00:39:54,260 --> 00:39:56,859
something better for you

00:39:55,609 --> 00:39:59,650
so you

00:39:56,859 --> 00:40:02,650
using the magic of procedural macros

00:39:59,650 --> 00:40:04,869
what's gonna happen is wesen Benjen is

00:40:02,650 --> 00:40:06,789
going to take a look inside the

00:40:04,869 --> 00:40:10,630
generated web assembly it's also gonna

00:40:06,789 --> 00:40:12,999
look at your rust and it's going to

00:40:10,630 --> 00:40:15,549
clean up a bunch of your web assembly

00:40:12,999 --> 00:40:18,029
and then it is also going to take a look

00:40:15,549 --> 00:40:20,890
at all of the functions that you've

00:40:18,029 --> 00:40:23,349
tagged with that resin binder attribute

00:40:20,890 --> 00:40:25,299
and it's going to generate the binding

00:40:23,349 --> 00:40:26,799
functions for you and all of the

00:40:25,299 --> 00:40:29,140
wrappers that you're going to need and

00:40:26,799 --> 00:40:31,390
it's also going to generate that types

00:40:29,140 --> 00:40:34,180
file for you and I'll tell you about how

00:40:31,390 --> 00:40:35,559
it does that hopefully very soon but

00:40:34,180 --> 00:40:36,789
fundamentally what you should understand

00:40:35,559 --> 00:40:40,150
is that you're going to be using this

00:40:36,789 --> 00:40:42,069
resin binding attribute just to mark all

00:40:40,150 --> 00:40:43,900
of the interface touch points inside

00:40:42,069 --> 00:40:45,849
your rust so whether you're trying to

00:40:43,900 --> 00:40:47,619
talk to something that's in JavaScript

00:40:45,849 --> 00:40:49,509
or if you're trying to export something

00:40:47,619 --> 00:40:50,950
out so the JavaScript can call it you're

00:40:49,509 --> 00:40:53,680
just always going to be tagging your

00:40:50,950 --> 00:40:56,109
functions your strokes with that

00:40:53,680 --> 00:40:58,150
attribute and that's gonna be how azzam

00:40:56,109 --> 00:41:01,450
bind you and knows how to generate what

00:40:58,150 --> 00:41:03,339
it needs to generate for you and so

00:41:01,450 --> 00:41:06,339
that's the magic of the wisdom binding

00:41:03,339 --> 00:41:08,650
CLI so you use the library to be able to

00:41:06,339 --> 00:41:10,539
tag with the attribute and then the CLI

00:41:08,650 --> 00:41:12,910
is going to take a look at that rust

00:41:10,539 --> 00:41:14,950
code that you wrote and it's going to

00:41:12,910 --> 00:41:17,880
look for all those attributes and do all

00:41:14,950 --> 00:41:21,489
of its macro generation stuff for you

00:41:17,880 --> 00:41:23,289
alright so that's how you can do it but

00:41:21,489 --> 00:41:25,720
we're still are entirely clear about

00:41:23,289 --> 00:41:28,690
what it is you can do and the

00:41:25,720 --> 00:41:31,239
functionality of wesen Benjen has grown

00:41:28,690 --> 00:41:33,880
exponentially over the course of this

00:41:31,239 --> 00:41:36,849
year it's pretty fantastic we went from

00:41:33,880 --> 00:41:39,460
like yeah you can you know manually

00:41:36,849 --> 00:41:41,230
import and export things and do hello

00:41:39,460 --> 00:41:44,349
world which is like super not that

00:41:41,230 --> 00:41:45,819
interesting to let's do some web audio

00:41:44,349 --> 00:41:47,739
stuff which is pretty cool

00:41:45,819 --> 00:41:49,299
so one of the things that I hear a lot

00:41:47,739 --> 00:41:50,980
from people thinking about like rust

00:41:49,299 --> 00:41:52,900
generator web assembly and being able to

00:41:50,980 --> 00:41:55,359
talk to something like JavaScript which

00:41:52,900 --> 00:41:57,069
has prototype will inheritance but now

00:41:55,359 --> 00:41:59,559
kind of has classical inheritance is

00:41:57,069 --> 00:42:01,029
like okay like there's so much classical

00:41:59,559 --> 00:42:03,460
inheritance in JavaScript programming

00:42:01,029 --> 00:42:05,529
how do I write rust that can like talk

00:42:03,460 --> 00:42:06,910
to that type of thing and so there's a

00:42:05,529 --> 00:42:09,849
fair amount of development this year

00:42:06,910 --> 00:42:10,330
that focused on being able to allow rust

00:42:09,849 --> 00:42:12,310
to

00:42:10,330 --> 00:42:14,380
kind of talk in the language of

00:42:12,310 --> 00:42:17,380
classical inheritance which the OO

00:42:14,380 --> 00:42:19,870
functional debate in rust is its own

00:42:17,380 --> 00:42:21,220
other thing but in order to talk to

00:42:19,870 --> 00:42:24,010
JavaScript we need to be able to do it

00:42:21,220 --> 00:42:27,060
and so you could create a constructor

00:42:24,010 --> 00:42:29,800
and be able to instantiate a Jas class

00:42:27,060 --> 00:42:31,210
again you just create that extern block

00:42:29,800 --> 00:42:34,120
and you're gonna write the function

00:42:31,210 --> 00:42:36,250
signature and you can decorate it with

00:42:34,120 --> 00:42:38,590
that attribute and just say hey this is

00:42:36,250 --> 00:42:41,260
the constructor and as a result you can

00:42:38,590 --> 00:42:43,840
now call that Jas constructor from your

00:42:41,260 --> 00:42:46,900
rust just like this here with shoes do

00:42:43,840 --> 00:42:49,090
so it's a pretty pretty fluid interface

00:42:46,900 --> 00:42:50,800
and you can do it in the opposite

00:42:49,090 --> 00:42:53,890
direction though something that you

00:42:50,800 --> 00:42:55,930
should see as a theme is calling the J's

00:42:53,890 --> 00:42:59,260
from rust is like significantly easier

00:42:55,930 --> 00:43:01,270
than the J is calling the rust so here

00:42:59,260 --> 00:43:04,300
you can see this is just instantiating a

00:43:01,270 --> 00:43:06,880
rust class so we can say hey we have a

00:43:04,300 --> 00:43:10,110
struct we'll give it a new function it

00:43:06,880 --> 00:43:13,050
has this method called get contents and

00:43:10,110 --> 00:43:16,090
so if we wanted to be able to do this

00:43:13,050 --> 00:43:18,400
so here we can see that we're at again

00:43:16,090 --> 00:43:21,280
decorating with that attribute so that

00:43:18,400 --> 00:43:23,350
now we can say hey I have some love

00:43:21,280 --> 00:43:26,140
assembly let's load it and now I can say

00:43:23,350 --> 00:43:27,820
get new foo and then call a method on it

00:43:26,140 --> 00:43:29,950
which basically means that I taught

00:43:27,820 --> 00:43:32,020
JavaScript how to treat rust like a

00:43:29,950 --> 00:43:34,240
classical inheritance language which is

00:43:32,020 --> 00:43:35,800
super fun and very interesting if you

00:43:34,240 --> 00:43:37,720
are curious about what the memory is

00:43:35,800 --> 00:43:39,700
doing under all of this it's fascinating

00:43:37,720 --> 00:43:43,960
and probably could be the contents of a

00:43:39,700 --> 00:43:45,880
whole own talk but yeah so this also

00:43:43,960 --> 00:43:47,680
works for methods I won't jump too far

00:43:45,880 --> 00:43:50,500
into this but it's also very interesting

00:43:47,680 --> 00:43:51,610
that we understand class hierarchy if

00:43:50,500 --> 00:43:52,960
you're someone who's deep in web

00:43:51,610 --> 00:43:55,240
assembly you're probably like the any

00:43:52,960 --> 00:43:59,080
rough proposal and like we're working on

00:43:55,240 --> 00:44:00,670
it but you can fundamentally like also

00:43:59,080 --> 00:44:02,470
have those hierarchy trees the way you

00:44:00,670 --> 00:44:05,140
want regardless of if you think those

00:44:02,470 --> 00:44:07,960
are a good idea or not it is possible

00:44:05,140 --> 00:44:10,000
which i think is very interesting all

00:44:07,960 --> 00:44:12,850
right and so yeah this is something that

00:44:10,000 --> 00:44:14,230
happened quite recently and it's

00:44:12,850 --> 00:44:16,090
something that we continue to focus on

00:44:14,230 --> 00:44:17,920
because again it comes back to the idea

00:44:16,090 --> 00:44:19,630
that like being able to interrupt with

00:44:17,920 --> 00:44:21,550
JavaScript and work with JavaScript

00:44:19,630 --> 00:44:23,560
paradigms is incredibly important for

00:44:21,550 --> 00:44:24,380
the success of web assembly and so being

00:44:23,560 --> 00:44:25,700
able to do these

00:44:24,380 --> 00:44:28,180
regardless of your feelings about

00:44:25,700 --> 00:44:31,369
classical inheritance is super important

00:44:28,180 --> 00:44:32,930
alright so the two most exciting things

00:44:31,369 --> 00:44:34,759
that I feel like so few people actually

00:44:32,930 --> 00:44:36,650
know about working in webassembly even

00:44:34,759 --> 00:44:39,500
if you know these technologies are two

00:44:36,650 --> 00:44:41,630
crates that are part of the web weizen

00:44:39,500 --> 00:44:43,160
binding tool called jaya sis and web

00:44:41,630 --> 00:44:46,250
sites just out of curiosity does anybody

00:44:43,160 --> 00:44:48,559
here know these two two crates alright

00:44:46,250 --> 00:44:50,569
well everyone else is going to and it's

00:44:48,559 --> 00:44:53,480
really cool because I honestly think

00:44:50,569 --> 00:44:56,329
they're magical they really are so J

00:44:53,480 --> 00:44:58,759
Isis both of these fundamentally our API

00:44:56,329 --> 00:45:00,319
wrappers which is to say I want to write

00:44:58,759 --> 00:45:02,150
web assembly I want to write rust that

00:45:00,319 --> 00:45:04,039
generates into a web assembly and I

00:45:02,150 --> 00:45:06,230
don't want to have to like write my

00:45:04,039 --> 00:45:07,789
extern block with like all of the things

00:45:06,230 --> 00:45:10,549
like I'm not interested in defining

00:45:07,789 --> 00:45:11,960
document window I don't want to do all

00:45:10,549 --> 00:45:14,750
that I want to be able to use a crate to

00:45:11,960 --> 00:45:16,279
do that and so J Isis is a crate that's

00:45:14,750 --> 00:45:18,259
going to give you all this you don't

00:45:16,279 --> 00:45:20,539
have to manually extern any of those

00:45:18,259 --> 00:45:23,450
things so one thing that you can see in

00:45:20,539 --> 00:45:28,849
this example here is if we bring in the

00:45:23,450 --> 00:45:30,430
jss crate oh gosh I just scrolled that

00:45:28,849 --> 00:45:33,230
was terrible

00:45:30,430 --> 00:45:34,609
alright J is this crate so here you can

00:45:33,230 --> 00:45:36,319
see like I don't want to have to like

00:45:34,609 --> 00:45:38,960
define what the array type is in

00:45:36,319 --> 00:45:40,819
JavaScript the jsj s this crate is just

00:45:38,960 --> 00:45:42,680
gonna do that for me and so we can see

00:45:40,819 --> 00:45:46,609
right here I can just call array dot new

00:45:42,680 --> 00:45:49,339
and date dot date I guess dot is colon

00:45:46,609 --> 00:45:51,410
colon now and that's all exported by the

00:45:49,339 --> 00:45:52,970
jeaious is crate so I have to remember

00:45:51,410 --> 00:45:54,859
what those function signatures look like

00:45:52,970 --> 00:45:58,039
they're already defined for me so I can

00:45:54,859 --> 00:46:01,880
just assume the jsapi inside my rust

00:45:58,039 --> 00:46:06,559
which is very cool but the coolest one

00:46:01,880 --> 00:46:09,259
is web sis so web sis is a fascinating

00:46:06,559 --> 00:46:11,589
tool from several different angles you

00:46:09,259 --> 00:46:15,200
can understand it in relationship to J

00:46:11,589 --> 00:46:17,750
is now the mic is working the mic is not

00:46:15,200 --> 00:46:19,160
working okay it's similar to justice in

00:46:17,750 --> 00:46:22,730
that it's going to take all of the

00:46:19,160 --> 00:46:24,950
browser API and also make those

00:46:22,730 --> 00:46:27,079
available for you the same way the jss

00:46:24,950 --> 00:46:29,930
makes the jeaious API available to you

00:46:27,079 --> 00:46:32,779
and so the coolest thing about this tool

00:46:29,930 --> 00:46:35,650
is that while it was not entirely

00:46:32,779 --> 00:46:36,750
perfect it was possible to mostly

00:46:35,650 --> 00:46:41,480
mechanic

00:46:36,750 --> 00:46:44,160
we generate this entire library using

00:46:41,480 --> 00:46:46,740
using the web interface definition

00:46:44,160 --> 00:46:51,240
language so we all know what specs are

00:46:46,740 --> 00:46:53,400
right yeah yeah cool specs are awesome

00:46:51,240 --> 00:46:55,380
and so there's often a joke particularly

00:46:53,400 --> 00:46:57,600
when we talk about web specs or like web

00:46:55,380 --> 00:47:00,990
specs are written in a type of language

00:46:57,600 --> 00:47:02,250
that directly compiles to C++ and if

00:47:00,990 --> 00:47:04,080
you've done any spec work or

00:47:02,250 --> 00:47:06,720
implementation work you'll probably be

00:47:04,080 --> 00:47:08,370
aware that that's super not the case and

00:47:06,720 --> 00:47:10,940
it would be really delightful if it were

00:47:08,370 --> 00:47:13,830
but it's not at all

00:47:10,940 --> 00:47:16,110
so some people were kind of bummed out

00:47:13,830 --> 00:47:19,170
that it turns out that using English is

00:47:16,110 --> 00:47:20,760
like not a it's very difficult to be

00:47:19,170 --> 00:47:22,470
incredibly precise using English in

00:47:20,760 --> 00:47:24,840
specs even if you're incredibly

00:47:22,470 --> 00:47:26,700
practiced and thoughtful about it so

00:47:24,840 --> 00:47:30,090
they were like what if we had a

00:47:26,700 --> 00:47:31,860
programming language for specs and you

00:47:30,090 --> 00:47:32,520
feel like if you've done any spec work

00:47:31,860 --> 00:47:35,070
you're probably going

00:47:32,520 --> 00:47:39,480
oh no but a nightmare it's a lot of

00:47:35,070 --> 00:47:42,930
extra work but because these IDL this

00:47:39,480 --> 00:47:46,170
IDL exists for the web spec we were able

00:47:42,930 --> 00:47:48,660
to take that and use that that

00:47:46,170 --> 00:47:51,900
definition to be able to automatically

00:47:48,660 --> 00:47:54,030
generate these bindings for you so

00:47:51,900 --> 00:47:55,860
that's pretty cool so it was a pretty

00:47:54,030 --> 00:47:58,110
painless experience the vast majority of

00:47:55,860 --> 00:48:00,060
the manual work was to write tests for

00:47:58,110 --> 00:48:04,130
it which is no it's everyone's favorite

00:48:00,060 --> 00:48:07,320
task but why am I so hype about web says

00:48:04,130 --> 00:48:09,870
all right so this for people who are

00:48:07,320 --> 00:48:12,720
aware of webassembly one of the biggest

00:48:09,870 --> 00:48:14,820
things people will go is well I'm not

00:48:12,720 --> 00:48:17,100
ready to use this because wisdom can't

00:48:14,820 --> 00:48:19,770
access the Dom if you don't know what

00:48:17,100 --> 00:48:22,440
the Dom is it's document object model it

00:48:19,770 --> 00:48:24,360
just means like can I grabbed a div and

00:48:22,440 --> 00:48:27,450
this is something that I mean is

00:48:24,360 --> 00:48:30,500
reasonably very important to folks who

00:48:27,450 --> 00:48:33,090
want to be working on the web and so

00:48:30,500 --> 00:48:40,320
shout out your answer Ken wasm access

00:48:33,090 --> 00:48:43,320
the Dom no right no but also yes but no

00:48:40,320 --> 00:48:47,520
but yes the trick is that wisdom in its

00:48:43,320 --> 00:48:48,150
native sense cannot but because of web

00:48:47,520 --> 00:48:51,210
sis

00:48:48,150 --> 00:48:53,940
you can sort of

00:48:51,210 --> 00:48:55,980
so a lot of people are like Oh Adam

00:48:53,940 --> 00:48:58,950
can't access the Dom I'm done and so

00:48:55,980 --> 00:49:01,079
it's true that it can't natively but

00:48:58,950 --> 00:49:02,849
what web sistas is it's going to be able

00:49:01,079 --> 00:49:05,480
to after having generated all that stuff

00:49:02,849 --> 00:49:09,210
from the web IDL give you an API for

00:49:05,480 --> 00:49:11,700
interacting with the web api's uh that's

00:49:09,210 --> 00:49:14,040
pretty frigging friendly so let's take a

00:49:11,700 --> 00:49:16,500
look at this code here so first what you

00:49:14,040 --> 00:49:20,010
can see is like we have a window

00:49:16,500 --> 00:49:21,420
we have document we have body if you

00:49:20,010 --> 00:49:23,849
work on the web these are things that

00:49:21,420 --> 00:49:26,040
you are used to and then look at this

00:49:23,849 --> 00:49:28,730
it's basically jQuery like oh let's

00:49:26,040 --> 00:49:32,450
create an element let's set inner HTML

00:49:28,730 --> 00:49:35,910
appendchild like again Azzam can't

00:49:32,450 --> 00:49:38,190
officially access the Dom but this is us

00:49:35,910 --> 00:49:40,079
manipulating the Dom right now from rust

00:49:38,190 --> 00:49:42,119
that's gonna compile the web assembly

00:49:40,079 --> 00:49:44,190
and it works very well there's

00:49:42,119 --> 00:49:46,470
definitely work to still be done to like

00:49:44,190 --> 00:49:48,150
make this as fast as it should be to

00:49:46,470 --> 00:49:50,640
make it as small of a binary as it

00:49:48,150 --> 00:49:52,530
should be and fundamentally we want

00:49:50,640 --> 00:49:56,369
wisdom to have these abilities natively

00:49:52,530 --> 00:49:59,549
but this is possible today and these are

00:49:56,369 --> 00:50:02,520
just some very very like small little

00:49:59,549 --> 00:50:04,589
things that you can do but the entire

00:50:02,520 --> 00:50:07,410
web sis crate gives you an immense

00:50:04,589 --> 00:50:09,720
number of abilities so just to start

00:50:07,410 --> 00:50:12,480
like as I mentioned all of the Web Audio

00:50:09,720 --> 00:50:16,559
API is exposed for you there's also Web

00:50:12,480 --> 00:50:19,079
USB that's amazing for people who love

00:50:16,559 --> 00:50:20,790
doing benchmarks performance thought now

00:50:19,079 --> 00:50:23,220
if you want to be doing benchmarks in

00:50:20,790 --> 00:50:25,170
your rest web assembly you can also use

00:50:23,220 --> 00:50:27,299
fetch which for people who might not

00:50:25,170 --> 00:50:30,329
know is kind of what replaced Ajax

00:50:27,299 --> 00:50:32,819
requests but HTTP requests and then if

00:50:30,329 --> 00:50:33,839
you're the type of debugger like me you

00:50:32,819 --> 00:50:36,470
can use console.log

00:50:33,839 --> 00:50:38,609
which is my favorite style of debugging

00:50:36,470 --> 00:50:40,680
but these are things that you can do

00:50:38,609 --> 00:50:43,280
right now and so while it absolutely is

00:50:40,680 --> 00:50:45,420
true like wasm can exit the dom

00:50:43,280 --> 00:50:47,099
fundamentally that is not a blocker

00:50:45,420 --> 00:50:48,690
right now particularly for folks who

00:50:47,099 --> 00:50:50,549
want to use this wiesen by gentle

00:50:48,690 --> 00:50:52,559
training this stuff exists and is ready

00:50:50,549 --> 00:50:54,599
to be used and it's really exciting I

00:50:52,559 --> 00:50:56,940
think the message that wisdom can access

00:50:54,599 --> 00:50:58,829
the dog kind of went out into the

00:50:56,940 --> 00:51:01,170
community very quick like quickly and

00:50:58,829 --> 00:51:02,940
strongly and so I really want to make

00:51:01,170 --> 00:51:04,069
sure that I drive the point home that if

00:51:02,940 --> 00:51:06,079
you want to write rest

00:51:04,069 --> 00:51:07,459
assembly that excess is the Dom you can

00:51:06,079 --> 00:51:10,539
definitely do that and you can do it

00:51:07,459 --> 00:51:13,999
right now and it has a really lovely API

00:51:10,539 --> 00:51:15,739
all right so now into some of the

00:51:13,999 --> 00:51:19,249
nitty-gritty I could definitely give a

00:51:15,739 --> 00:51:20,690
talk about how was in bind Jen works and

00:51:19,249 --> 00:51:22,579
I could do it and it would probably be

00:51:20,690 --> 00:51:24,949
like three hours long it's a fascinating

00:51:22,579 --> 00:51:27,529
tool we're always looking for

00:51:24,949 --> 00:51:28,999
contributors who definitely join in but

00:51:27,529 --> 00:51:31,940
we can talk a little bit about a couple

00:51:28,999 --> 00:51:33,769
of things so classically with tools like

00:51:31,940 --> 00:51:37,009
this you know you want to peer into the

00:51:33,769 --> 00:51:40,969
inside right and sometimes it's not that

00:51:37,009 --> 00:51:42,680
friendly so maybe maybe looking at the

00:51:40,969 --> 00:51:45,499
internals of wesen bindin isn't your

00:51:42,680 --> 00:51:47,209
idea of fun and that's totally okay you

00:51:45,499 --> 00:51:50,390
can feel free to zone out at this part

00:51:47,209 --> 00:51:52,219
if you'd like but fundamentally we had

00:51:50,390 --> 00:51:54,499
kind of two design principles with

00:51:52,219 --> 00:51:57,049
designing wizard by Jen the first was

00:51:54,499 --> 00:51:59,749
that we are really es6 modules from this

00:51:57,049 --> 00:52:01,759
start there's a real focus on wanting to

00:51:59,749 --> 00:52:04,309
use that now of course the entire tool

00:52:01,759 --> 00:52:07,089
chain is designed to work with also

00:52:04,309 --> 00:52:10,160
commonjs and also a no module situation

00:52:07,089 --> 00:52:11,690
but we've really made primary the idea

00:52:10,160 --> 00:52:13,160
of using this with es6 modules

00:52:11,690 --> 00:52:17,029
particularly because of the heavy use of

00:52:13,160 --> 00:52:20,420
bundlers across the web it just works

00:52:17,029 --> 00:52:22,160
out a lot nicer and then like the last

00:52:20,420 --> 00:52:24,650
thing was kind of on this theme of

00:52:22,160 --> 00:52:25,489
empowering which is this tool should not

00:52:24,650 --> 00:52:27,650
get in your way

00:52:25,489 --> 00:52:29,509
this tool should just be like an like an

00:52:27,650 --> 00:52:31,309
oil slick like we just want to get

00:52:29,509 --> 00:52:32,630
through it it shouldn't be right there

00:52:31,309 --> 00:52:34,489
in your face it should be unobtrusive

00:52:32,630 --> 00:52:35,930
and this is part of the reason why we've

00:52:34,489 --> 00:52:38,509
taken wisdom bhaijan and kind of

00:52:35,930 --> 00:52:40,069
subsumed it into as impact like you can

00:52:38,509 --> 00:52:42,140
use wise and back and Wes impacts can

00:52:40,069 --> 00:52:44,150
you use wisdom bind Jen under the hood

00:52:42,140 --> 00:52:46,009
but you shouldn't have to think about it

00:52:44,150 --> 00:52:48,799
that much if you've ever used wiesen

00:52:46,009 --> 00:52:50,539
binding from scratch the CLI tool you

00:52:48,799 --> 00:52:52,339
know that there's like 8000 different

00:52:50,539 --> 00:52:54,019
options and things like that to

00:52:52,339 --> 00:52:56,140
configure it and you can always dive

00:52:54,019 --> 00:52:58,999
down and like do that if you want but

00:52:56,140 --> 00:53:01,640
fundamentally the vast majority people

00:52:58,999 --> 00:53:04,789
love good defaults and not configuring

00:53:01,640 --> 00:53:06,670
so it was a big deal to say okay let's

00:53:04,789 --> 00:53:11,690
make all of this dev joy at work

00:53:06,670 --> 00:53:13,369
unobtrusive alright so in my first

00:53:11,690 --> 00:53:15,890
version of this talk what I did is I

00:53:13,369 --> 00:53:19,160
spent a lot of time talking about

00:53:15,890 --> 00:53:20,720
the fundamental memory layer and I ran

00:53:19,160 --> 00:53:22,880
out of time and I gave that talk so I'm

00:53:20,720 --> 00:53:24,710
gonna talk about something else but the

00:53:22,880 --> 00:53:27,289
real question of how does wasm bind Gen

00:53:24,710 --> 00:53:29,690
work is this how do we shoehorn j/s

00:53:27,289 --> 00:53:31,339
objects into a u32 for wisdom to use

00:53:29,690 --> 00:53:33,950
basically just like how could we turn

00:53:31,339 --> 00:53:36,430
everything into a u32 and do it as

00:53:33,950 --> 00:53:38,569
efficiently as we possibly can and

00:53:36,430 --> 00:53:40,069
sometimes it definitely feels like this

00:53:38,569 --> 00:53:41,900
truck backing into this thing which is

00:53:40,069 --> 00:53:44,900
like magical like how'd it work I'm

00:53:41,900 --> 00:53:46,730
scared but the thing I want to talk a

00:53:44,900 --> 00:53:49,999
little bit about today is the wisdom

00:53:46,730 --> 00:53:53,150
benjin macro so the wesson bündchen

00:53:49,999 --> 00:53:55,640
macro is pretty interesting and the

00:53:53,150 --> 00:53:57,019
challenges that we had in trying to

00:53:55,640 --> 00:54:00,589
figure out how we generate those

00:53:57,019 --> 00:54:02,720
wrapping binding function signatures for

00:54:00,589 --> 00:54:05,180
taking like your rust function and then

00:54:02,720 --> 00:54:06,880
doing all the all the boiler plates and

00:54:05,180 --> 00:54:09,589
make sure that you could use a rich type

00:54:06,880 --> 00:54:12,170
and so what the macro does it's going to

00:54:09,589 --> 00:54:14,539
generate an executable function which

00:54:12,170 --> 00:54:16,480
the point of is to describe the type

00:54:14,539 --> 00:54:18,619
signature of an import or export

00:54:16,480 --> 00:54:21,049
fundamentally this whole tool is about

00:54:18,619 --> 00:54:23,089
these interface liars and we're just

00:54:21,049 --> 00:54:26,210
jumping in between these interfaces and

00:54:23,089 --> 00:54:27,890
trying to talk about them and so we can

00:54:26,210 --> 00:54:29,839
take a little bit of look at this code

00:54:27,890 --> 00:54:31,970
right here so as you saw in our previous

00:54:29,839 --> 00:54:33,890
example in your rust wasm code you

00:54:31,970 --> 00:54:35,599
probably have a function signature that

00:54:33,890 --> 00:54:37,999
looks like this it's probably marked pub

00:54:35,599 --> 00:54:39,680
but it doesn't matter and so we mark

00:54:37,999 --> 00:54:42,470
that with that attribute and we have

00:54:39,680 --> 00:54:44,420
that and so what gasm bind JNT is going

00:54:42,470 --> 00:54:47,239
to do is really interesting but let me

00:54:44,420 --> 00:54:49,789
tell you a little bit about why so when

00:54:47,239 --> 00:54:52,160
we are generating a rust running wizard

00:54:49,789 --> 00:54:54,319
bhaijan CLI we're able to do a fair

00:54:52,160 --> 00:54:57,200
amount of static analysis however

00:54:54,319 --> 00:54:59,869
because of certain types the rust

00:54:57,200 --> 00:55:02,660
compiler is not able to fully know all

00:54:59,869 --> 00:55:04,400
of the rich type information at that

00:55:02,660 --> 00:55:06,019
point like we can't just do static

00:55:04,400 --> 00:55:09,049
analysis we're gonna have to compile it

00:55:06,019 --> 00:55:11,900
we don't want to do that right now so we

00:55:09,049 --> 00:55:16,009
serialized what we can know about the

00:55:11,900 --> 00:55:17,569
function signatures into JSON but then

00:55:16,009 --> 00:55:20,299
because we can't know all that

00:55:17,569 --> 00:55:22,730
information instead what we do is we

00:55:20,299 --> 00:55:24,259
actually generate more rust and this is

00:55:22,730 --> 00:55:25,519
what the macro does and the rest

00:55:24,259 --> 00:55:28,400
generates a function that looks like

00:55:25,519 --> 00:55:30,230
this this second one here

00:55:28,400 --> 00:55:32,140
and what that's doing is it's leveraging

00:55:30,230 --> 00:55:35,569
a trait called described and that

00:55:32,140 --> 00:55:38,809
described trait is gonna snag all of

00:55:35,569 --> 00:55:41,150
that super-rich type information that we

00:55:38,809 --> 00:55:43,579
need in order to be able to generate

00:55:41,150 --> 00:55:45,859
that j/s type information that we want

00:55:43,579 --> 00:55:48,769
to do but we can't do that just with

00:55:45,859 --> 00:55:51,109
static analysis we have to do it by

00:55:48,769 --> 00:55:54,579
creating these executable functions and

00:55:51,109 --> 00:55:58,490
then when we run the wasm bind gen CLI

00:55:54,579 --> 00:56:00,529
it's going to compile and then execute

00:55:58,490 --> 00:56:02,119
these functions and when we execute

00:56:00,529 --> 00:56:05,359
these functions that's when we're able

00:56:02,119 --> 00:56:07,460
to extract that rich type data from our

00:56:05,359 --> 00:56:08,960
function signatures in rust so that we

00:56:07,460 --> 00:56:10,910
can actually generate that really

00:56:08,960 --> 00:56:14,150
important joyous type signature stuff in

00:56:10,910 --> 00:56:15,769
the gif bindings that we generate and so

00:56:14,150 --> 00:56:19,099
I think that's like a very interesting

00:56:15,769 --> 00:56:21,019
design element and so I thought that was

00:56:19,099 --> 00:56:23,900
pretty cool now if I totally lost you

00:56:21,019 --> 00:56:26,839
and you're like what why types I don't

00:56:23,900 --> 00:56:29,269
want to that's fine the best part about

00:56:26,839 --> 00:56:32,140
wasn't binding is that you don't have to

00:56:29,269 --> 00:56:34,819
worry about how it works it just does

00:56:32,140 --> 00:56:37,160
but because it's an empowering

00:56:34,819 --> 00:56:41,029
technology if you want to know how it

00:56:37,160 --> 00:56:43,069
works under the hood you 100% can and I

00:56:41,029 --> 00:56:45,680
think that that's super awesome you can

00:56:43,069 --> 00:56:47,630
learn so much about how rusts the rest

00:56:45,680 --> 00:56:49,910
compiler and JavaScript all work by

00:56:47,630 --> 00:56:53,269
taking a look under the hood and at your

00:56:49,910 --> 00:56:56,119
generated files so fundamentally what I

00:56:53,269 --> 00:56:57,680
want to say is I hope this idea of kind

00:56:56,119 --> 00:56:59,660
of like taking a look at web assembly

00:56:57,680 --> 00:57:03,079
the ideas we had for designing the dev

00:56:59,660 --> 00:57:05,239
tools make you excited to explore

00:57:03,079 --> 00:57:07,009
different parts of programming like I

00:57:05,239 --> 00:57:08,630
think one of the most fun parts was

00:57:07,009 --> 00:57:11,059
being like the web developer

00:57:08,630 --> 00:57:12,950
representative unlike the rust like web

00:57:11,059 --> 00:57:14,930
does suddenly team because we kind of

00:57:12,950 --> 00:57:16,369
had this perspective rust and I'm like

00:57:14,930 --> 00:57:19,099
well this is how jeaious developers

00:57:16,369 --> 00:57:20,720
think about it and expanding rust into

00:57:19,099 --> 00:57:22,279
different areas I think is really

00:57:20,720 --> 00:57:23,660
interesting and fascinating and it

00:57:22,279 --> 00:57:26,720
taught me a lot about rust and

00:57:23,660 --> 00:57:28,609
JavaScript in them in the meantime so if

00:57:26,720 --> 00:57:30,529
you are interested in you know opening

00:57:28,609 --> 00:57:34,279
that basket and getting scratched by the

00:57:30,529 --> 00:57:36,230
cat um you can learn so much about the

00:57:34,279 --> 00:57:39,319
internal design of wesen Benjen from the

00:57:36,230 --> 00:57:41,010
wesam binder guide we have extensive

00:57:39,319 --> 00:57:43,530
documentation not on just how do you

00:57:41,010 --> 00:57:45,570
it but how it is implemented so it's

00:57:43,530 --> 00:57:48,630
super super cool and I would strongly

00:57:45,570 --> 00:57:50,670
recommend you check that out I'd also

00:57:48,630 --> 00:57:53,070
encourage you to get involved even if we

00:57:50,670 --> 00:57:55,200
like need more just web developers like

00:57:53,070 --> 00:57:57,510
if you don't even know rust like we need

00:57:55,200 --> 00:57:58,740
you so badly so please get involved in

00:57:57,510 --> 00:58:01,980
the rust Bassem working group

00:57:58,740 --> 00:58:04,650
additionally we record all of our open

00:58:01,980 --> 00:58:07,350
calls and so if you want to watch all of

00:58:04,650 --> 00:58:10,890
us being goofballs we post all of the

00:58:07,350 --> 00:58:12,840
videos to YouTube so you can check those

00:58:10,890 --> 00:58:16,020
out and hear about our discussions and

00:58:12,840 --> 00:58:16,710
so yeah even if you aren't excited about

00:58:16,020 --> 00:58:18,750
webassembly

00:58:16,710 --> 00:58:20,970
as rust developers I want to encourage

00:58:18,750 --> 00:58:23,580
you to be looking for places where you

00:58:20,970 --> 00:58:26,010
can develop more technologies within the

00:58:23,580 --> 00:58:28,560
rust ecosystem that empower people to do

00:58:26,010 --> 00:58:31,470
stuff because this is truly the Captain

00:58:28,560 --> 00:58:34,280
Planet element of rust and with that

00:58:31,470 --> 00:58:34,280
thank you very much

00:58:34,740 --> 00:58:37,150

YouTube URL: https://www.youtube.com/watch?v=fgJjzgSxTXk


