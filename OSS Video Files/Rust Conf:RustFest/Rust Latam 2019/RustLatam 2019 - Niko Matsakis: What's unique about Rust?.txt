Title: RustLatam 2019 - Niko Matsakis: What's unique about Rust?
Publication date: 2019-04-21
Playlist: Rust Latam 2019
Description: 
	Nicholas Matsakis is a Senior Staff Researcher at Mozilla Research and a member of the Rust core, compiler, and language design teams. He has been working on Rust since 2011 and did much of the initial work on its type system and other core features. He did his undergraduate study at MIT, graduating in 2001, and later obtained a PhD in 2011, working with Thomas Gross at ETH Zurich. He also spent several years at DataPower Technology, a startup since acquired by IBM, working on the JIT compiler and networking runtime.

Follow us on Twitter: https://twitter.com/rustlatamconf
Captions: 
	00:00:00,070 --> 00:00:11,019
oh lucky

00:00:07,930 --> 00:00:11,620
ow my amo Nicholas macaques in no hablo

00:00:11,019 --> 00:00:15,789
espanol

00:00:11,620 --> 00:00:18,640
no no mucho para gracias Santiago so

00:00:15,789 --> 00:00:21,039
yeah I'm gonna talk today so my name is

00:00:18,640 --> 00:00:23,289
Nicolas misaki's I'm gonna talk today

00:00:21,039 --> 00:00:27,369
about about rest I've been working on

00:00:23,289 --> 00:00:28,779
rust since 2011 so like 7 to 8 years I

00:00:27,369 --> 00:00:32,559
think that's probably one of the oldest

00:00:28,779 --> 00:00:35,649
people and a few things have changed in

00:00:32,559 --> 00:00:37,780
that time so when I started the project

00:00:35,649 --> 00:00:39,640
was in a repository called Graydon slash

00:00:37,780 --> 00:00:42,059
rust because it was still a personal

00:00:39,640 --> 00:00:44,800
project to some extent of Graydon horror

00:00:42,059 --> 00:00:46,899
and there was the big warning on it that

00:00:44,800 --> 00:00:47,350
said like don't use this if you run this

00:00:46,899 --> 00:00:48,879
program

00:00:47,350 --> 00:00:51,640
anything could happen it might eat your

00:00:48,879 --> 00:00:54,309
laundry I think that wasn't true

00:00:51,640 --> 00:00:56,019
probably that was unlikely but you know

00:00:54,309 --> 00:00:58,510
that was the point it was a very early

00:00:56,019 --> 00:01:00,129
stages and in my personal life things

00:00:58,510 --> 00:01:02,440
were a little different for example I

00:01:00,129 --> 00:01:04,390
had my daughter was just born you can

00:01:02,440 --> 00:01:06,130
see now she drew these pictures you'll

00:01:04,390 --> 00:01:09,130
see some more of her pictures throughout

00:01:06,130 --> 00:01:10,420
the talk so this is a picture of us kind

00:01:09,130 --> 00:01:14,619
of because it's cute

00:01:10,420 --> 00:01:16,240
wait load there that's me and her from

00:01:14,619 --> 00:01:18,040
from the first day or something at

00:01:16,240 --> 00:01:21,400
Mozilla that was the old offices we had

00:01:18,040 --> 00:01:23,500
a big dinosaur so yeah so I've been

00:01:21,400 --> 00:01:24,850
working on rest for awhile and you know

00:01:23,500 --> 00:01:26,619
things back then they were a little

00:01:24,850 --> 00:01:29,259
different I went looking through the

00:01:26,619 --> 00:01:31,509
history of the repo the syntax for

00:01:29,259 --> 00:01:33,280
example was a little different this is

00:01:31,509 --> 00:01:35,290
if you know Russ today you would

00:01:33,280 --> 00:01:37,090
recognize this more like like that

00:01:35,290 --> 00:01:39,280
that's how it looks now but back then it

00:01:37,090 --> 00:01:41,320
was written a little little differently

00:01:39,280 --> 00:01:42,610
and we'll see that there I'll go talk

00:01:41,320 --> 00:01:44,049
later about how the language was

00:01:42,610 --> 00:01:49,509
different in deeper ways too not just

00:01:44,049 --> 00:01:52,030
the syntax but these days you know rust

00:01:49,509 --> 00:01:53,829
is in a very different place so this is

00:01:52,030 --> 00:01:57,280
a chart showing the number of packages

00:01:53,829 --> 00:02:01,149
in our package repository and it starts

00:01:57,280 --> 00:02:02,979
in 2015 which is about when rust 1.0 was

00:02:01,149 --> 00:02:04,780
released so like three years ago and I

00:02:02,979 --> 00:02:07,539
think I'm not mistaken you can kind of

00:02:04,780 --> 00:02:10,540
see those of you in the front row can

00:02:07,539 --> 00:02:11,670
kind of see a little bump maybe that was

00:02:10,540 --> 00:02:13,709
one dot oh maybe it was

00:02:11,670 --> 00:02:16,760
I don't know Alex tells me no but that's

00:02:13,709 --> 00:02:19,080
okay I'm gonna say that it was and

00:02:16,760 --> 00:02:20,580
obviously things have changed right in

00:02:19,080 --> 00:02:22,620
the meantime we've grown a lot more and

00:02:20,580 --> 00:02:24,750
we're starting to really accelerate

00:02:22,620 --> 00:02:26,819
which is really awesome and not only

00:02:24,750 --> 00:02:28,950
that but we've also started to see a lot

00:02:26,819 --> 00:02:31,410
of people using rust in productions you

00:02:28,950 --> 00:02:34,530
saw various sponsors here for example I

00:02:31,410 --> 00:02:37,230
think the first production user was

00:02:34,530 --> 00:02:39,450
Yehuda Katz who if you're familiar with

00:02:37,230 --> 00:02:41,400
Ruby on Rails or Ruby you might know him

00:02:39,450 --> 00:02:43,590
from that context he also built bundler

00:02:41,400 --> 00:02:47,730
and you can see that you know way back

00:02:43,590 --> 00:02:49,709
in 2013 he started using rust when it

00:02:47,730 --> 00:02:51,900
was in a very unstable state so this was

00:02:49,709 --> 00:02:54,569
like two years before 1.0 we were

00:02:51,900 --> 00:02:56,400
changing things all the time and I think

00:02:54,569 --> 00:02:57,989
our reaction when he said he wanted to

00:02:56,400 --> 00:02:59,610
put rust in production was kind of like

00:02:57,989 --> 00:03:02,310
this right it was like what are you

00:02:59,610 --> 00:03:04,830
talking about that's a terrible idea

00:03:02,310 --> 00:03:06,150
but he did it and you know it served a

00:03:04,830 --> 00:03:08,130
role for them because they were building

00:03:06,150 --> 00:03:10,470
something in Ruby they were building a

00:03:08,130 --> 00:03:13,230
Ruby on Rails kind of plug-in and and

00:03:10,470 --> 00:03:14,970
they had a problem that it was most of

00:03:13,230 --> 00:03:16,320
it was fine but sometimes what it would

00:03:14,970 --> 00:03:18,540
do is it would monitor your Ruby on

00:03:16,320 --> 00:03:19,950
Rails installation and your server and

00:03:18,540 --> 00:03:21,570
it would run too slowly and it would

00:03:19,950 --> 00:03:23,370
actually you know not just monitor it

00:03:21,570 --> 00:03:25,410
but actually be slowing down and causing

00:03:23,370 --> 00:03:27,840
problems sometimes and that wasn't good

00:03:25,410 --> 00:03:29,850
so they wanted to rewrite the core

00:03:27,840 --> 00:03:31,170
performance parts and they needed an

00:03:29,850 --> 00:03:33,390
another language to do it and they had

00:03:31,170 --> 00:03:35,040
already tried to tune it in Ruby as best

00:03:33,390 --> 00:03:36,570
they could and so they ended up choosing

00:03:35,040 --> 00:03:38,400
rust and it worked out really well for

00:03:36,570 --> 00:03:41,220
them but I think it also worked out

00:03:38,400 --> 00:03:43,650
really well for us because we got Yehuda

00:03:41,220 --> 00:03:45,600
as well as a kind of influx of people

00:03:43,650 --> 00:03:46,920
from the communities like the Ruby

00:03:45,600 --> 00:03:49,109
community and so on it brought a lot of

00:03:46,920 --> 00:03:50,489
new ideas to rust and really started to

00:03:49,109 --> 00:03:52,079
influence it right and you who taught

00:03:50,489 --> 00:03:54,120
himself ended up building cargo and a

00:03:52,079 --> 00:03:57,450
bunch of other things so it was good for

00:03:54,120 --> 00:03:58,890
both of us and since then there have

00:03:57,450 --> 00:04:01,290
been a lot more production users these

00:03:58,890 --> 00:04:03,660
are kind of the the biggest names I

00:04:01,290 --> 00:04:04,980
would say the most household names you

00:04:03,660 --> 00:04:06,780
might have thought that Mozilla would be

00:04:04,980 --> 00:04:08,639
the first production user but actually

00:04:06,780 --> 00:04:10,319
we were pretty late we kind of just

00:04:08,639 --> 00:04:12,090
waited and said I think most the rest of

00:04:10,319 --> 00:04:13,920
the company was content to say okay you

00:04:12,090 --> 00:04:15,959
guys just tell us when it's ready we'll

00:04:13,920 --> 00:04:16,979
let you mess around but there are a

00:04:15,959 --> 00:04:18,389
bunch of companies here that you

00:04:16,979 --> 00:04:20,220
probably recognize and if you go to our

00:04:18,389 --> 00:04:23,110
website or check out the sponsors you'll

00:04:20,220 --> 00:04:25,300
see a bunch more so

00:04:23,110 --> 00:04:26,650
that's pretty exciting right and you

00:04:25,300 --> 00:04:28,659
might think someone who's been working

00:04:26,650 --> 00:04:31,120
on rust I would be like super excited

00:04:28,659 --> 00:04:34,750
about this but I'm kind of a cynical

00:04:31,120 --> 00:04:36,340
negative person at times I'm also I

00:04:34,750 --> 00:04:38,860
don't project that way but it's true and

00:04:36,340 --> 00:04:42,400
I and I think to myself well sure

00:04:38,860 --> 00:04:46,150
they're using rust but do they like it

00:04:42,400 --> 00:04:47,770
like this it that would be better right

00:04:46,150 --> 00:04:51,370
they probably hate it but they know that

00:04:47,770 --> 00:04:54,009
it's good for them but actually people

00:04:51,370 --> 00:04:57,460
seem to kind of like rust - right and

00:04:54,009 --> 00:05:00,219
for me that's really exciting in fact I

00:04:57,460 --> 00:05:03,969
might even say that they they love rust

00:05:00,219 --> 00:05:07,060
sometimes we won after all the most

00:05:03,969 --> 00:05:08,680
loved award two years in a row at Stack

00:05:07,060 --> 00:05:12,250
Overflow and that's pretty cool

00:05:08,680 --> 00:05:15,099
and it kind of got me thinking about you

00:05:12,250 --> 00:05:17,289
know why is that right so this

00:05:15,099 --> 00:05:18,940
definitely makes me happy this is kind

00:05:17,289 --> 00:05:22,419
of alright not only do they use it but

00:05:18,940 --> 00:05:23,979
they actually like it but but why what

00:05:22,419 --> 00:05:25,000
is it that people are excited about and

00:05:23,979 --> 00:05:28,690
I thought that's what I would try to

00:05:25,000 --> 00:05:33,969
talk about today to kind of put this

00:05:28,690 --> 00:05:36,370
puzzle together right of what what are

00:05:33,969 --> 00:05:38,800
the pieces of rust that combine to make

00:05:36,370 --> 00:05:40,089
it a kind of different experience that

00:05:38,800 --> 00:05:42,219
people are interested in that might make

00:05:40,089 --> 00:05:45,279
something the most loved language or and

00:05:42,219 --> 00:05:46,690
so forth right and like I said I'm a

00:05:45,279 --> 00:05:48,669
little bit cynical so when I thought

00:05:46,690 --> 00:05:50,500
about this the first thing the word that

00:05:48,669 --> 00:05:52,569
popped in my mind was it's probably just

00:05:50,500 --> 00:05:54,279
hype probably they liked it cuz

00:05:52,569 --> 00:05:56,560
everybody else says they liked it and I

00:05:54,279 --> 00:05:58,300
realize now that this slide like this

00:05:56,560 --> 00:06:00,250
movie is probably kind of old and people

00:05:58,300 --> 00:06:01,810
don't know what's going on here but this

00:06:00,250 --> 00:06:03,969
he's doing the Macarena in case you

00:06:01,810 --> 00:06:07,389
can't tell which maybe you've heard of

00:06:03,969 --> 00:06:10,000
it I don't know anyway but I think like

00:06:07,389 --> 00:06:11,289
I don't think it's just hype anymore

00:06:10,000 --> 00:06:12,639
right I used to think that and maybe in

00:06:11,289 --> 00:06:14,650
the beginning I think there was some

00:06:12,639 --> 00:06:16,180
goodwill and we had a lot of energy but

00:06:14,650 --> 00:06:17,800
over time you wouldn't see this much

00:06:16,180 --> 00:06:19,599
people getting excited this many

00:06:17,800 --> 00:06:21,490
companies picking it up if there was

00:06:19,599 --> 00:06:24,729
really nothing nothing underneath it so

00:06:21,490 --> 00:06:26,469
I think it's more than that and so maybe

00:06:24,729 --> 00:06:29,319
then it's the domain maybe it's this

00:06:26,469 --> 00:06:30,669
like systems programming right which I

00:06:29,319 --> 00:06:32,680
think a lot of people don't even know

00:06:30,669 --> 00:06:35,349
including me actually very precisely

00:06:32,680 --> 00:06:36,039
what that is I like be honest you

00:06:35,349 --> 00:06:39,189
stripped David

00:06:36,039 --> 00:06:41,050
he's the person who invented C++ that I

00:06:39,189 --> 00:06:42,550
think is pretty good which is systems

00:06:41,050 --> 00:06:45,639
programming is like programming when you

00:06:42,550 --> 00:06:47,649
are aware of your resources let's say

00:06:45,639 --> 00:06:49,899
when resources matter when it matters

00:06:47,649 --> 00:06:52,990
how much CPU you use how much memory you

00:06:49,899 --> 00:06:54,369
use that sort of thing and you know I

00:06:52,990 --> 00:06:55,659
think it's a really at the end of the

00:06:54,369 --> 00:06:58,300
day though people like their programs to

00:06:55,659 --> 00:07:01,479
go fast right that's kind of definitely

00:06:58,300 --> 00:07:03,099
true and rust rust tries to deliver on

00:07:01,479 --> 00:07:05,229
that and I think that's a big part of

00:07:03,099 --> 00:07:06,789
our appeal right so that's like one of

00:07:05,229 --> 00:07:09,550
the puzzle pieces and I'm in a label at

00:07:06,789 --> 00:07:11,169
zero cost abstractions and that term may

00:07:09,550 --> 00:07:13,899
not be familiar to you but the reason I

00:07:11,169 --> 00:07:16,569
called that is it comes from C++ right

00:07:13,899 --> 00:07:18,969
and it's this idea that C++ has a bunch

00:07:16,569 --> 00:07:21,399
of key aspects of its language design

00:07:18,969 --> 00:07:23,409
that work together so that when you

00:07:21,399 --> 00:07:24,610
build classes and you build new layers

00:07:23,409 --> 00:07:26,499
and things like that like you have

00:07:24,610 --> 00:07:29,919
iterators and hash tables and vectors

00:07:26,499 --> 00:07:31,270
they perform as fast as they would have

00:07:29,919 --> 00:07:32,919
done if you'd written the code in a

00:07:31,270 --> 00:07:35,409
lower-level way if you'd written the

00:07:32,919 --> 00:07:37,209
code kind of directly in C so if you use

00:07:35,409 --> 00:07:39,430
libraries you don't pay a cost for using

00:07:37,209 --> 00:07:40,809
those libraries and that's that's

00:07:39,430 --> 00:07:43,689
something that's kind of unique to C++

00:07:40,809 --> 00:07:45,249
it's not really true in languages like

00:07:43,689 --> 00:07:47,349
Java or JavaScript we're adding more

00:07:45,249 --> 00:07:48,789
objects on adding objects on top of

00:07:47,349 --> 00:07:50,620
objects and wrapping other objects with

00:07:48,789 --> 00:07:52,599
them kind of increases memory usage

00:07:50,620 --> 00:07:54,819
increases the amount of work that the

00:07:52,599 --> 00:07:57,059
compiler has to do so that's part of it

00:07:54,819 --> 00:08:00,009
I think and that it's also the fact that

00:07:57,059 --> 00:08:01,809
Russ doesn't have a runtime which means

00:08:00,009 --> 00:08:03,819
there's all these places where you could

00:08:01,809 --> 00:08:05,199
use to be you could only use C it was

00:08:03,819 --> 00:08:07,330
kind of the lingua franca like you want

00:08:05,199 --> 00:08:10,269
to extend your Python interpreter well

00:08:07,330 --> 00:08:13,749
you can write a C+ you can write a Russ

00:08:10,269 --> 00:08:15,639
plugin so that's really cool but you

00:08:13,749 --> 00:08:18,309
might then wonder ok so that can't be

00:08:15,639 --> 00:08:20,259
the whole story because if it were just

00:08:18,309 --> 00:08:23,319
the performance we could just use C++ we

00:08:20,259 --> 00:08:25,959
had it already all right but C++ is kind

00:08:23,319 --> 00:08:28,659
of like this rocket a little bit like

00:08:25,959 --> 00:08:30,539
it's super powerful and it's cool but it

00:08:28,659 --> 00:08:32,620
it doesn't always go the way you expect

00:08:30,539 --> 00:08:35,380
right when you actually put it into

00:08:32,620 --> 00:08:37,779
production and of course that was like a

00:08:35,380 --> 00:08:39,760
prime motivator for rust itself right we

00:08:37,779 --> 00:08:42,430
know this at Mozilla from a lot of

00:08:39,760 --> 00:08:44,740
experience that while C++ gives you this

00:08:42,430 --> 00:08:47,050
control and this doesn't have a runtime

00:08:44,740 --> 00:08:48,639
it also gives you all these kinds of

00:08:47,050 --> 00:08:49,960
bugs that are sort of impossible to

00:08:48,639 --> 00:08:52,270
track to track down

00:08:49,960 --> 00:08:54,400
and deal with like double fries and use

00:08:52,270 --> 00:08:55,720
after fries if you've never dealt with

00:08:54,400 --> 00:08:58,720
these or don't know what I mean then

00:08:55,720 --> 00:09:00,820
consider yourself lucky and if you do

00:08:58,720 --> 00:09:03,220
you'll know exactly what I'm talking

00:09:00,820 --> 00:09:05,290
about right and the usual solution to

00:09:03,220 --> 00:09:07,750
all these problems of bringing in a

00:09:05,290 --> 00:09:10,180
garbage collector isn't quite right

00:09:07,750 --> 00:09:12,100
because first of all of course it's

00:09:10,180 --> 00:09:14,110
sacrificing the control and that

00:09:12,100 --> 00:09:15,580
sometimes that's fine for a lot of

00:09:14,110 --> 00:09:17,110
applications that's fine but there are a

00:09:15,580 --> 00:09:21,160
lot if you want peak performance and so

00:09:17,110 --> 00:09:22,600
on it's not so great and secondly it

00:09:21,160 --> 00:09:25,450
didn't actually solve all the problems

00:09:22,600 --> 00:09:27,550
like a GC language Python or Java or

00:09:25,450 --> 00:09:30,130
something you still have null pointers

00:09:27,550 --> 00:09:31,810
you can still have data races so you

00:09:30,130 --> 00:09:33,580
solve some of the problems you gave up

00:09:31,810 --> 00:09:35,410
some of your control but you didn't you

00:09:33,580 --> 00:09:37,270
didn't solve all of it and that's where

00:09:35,410 --> 00:09:40,180
the rest kind of tries to fill this gap

00:09:37,270 --> 00:09:43,600
right we're trying to have all the

00:09:40,180 --> 00:09:46,090
control or all the runtime and none of

00:09:43,600 --> 00:09:49,540
the problems and mostly we succeed I

00:09:46,090 --> 00:09:53,140
would say which is pretty cool but

00:09:49,540 --> 00:09:54,760
sometimes I found that you might think

00:09:53,140 --> 00:09:57,210
well okay so that sounds great why would

00:09:54,760 --> 00:10:00,310
somebody not use it I agree but

00:09:57,210 --> 00:10:02,350
sometimes type systems can be like a

00:10:00,310 --> 00:10:03,880
kind of a hard sell I think the way

00:10:02,350 --> 00:10:05,920
basically the way that we solved all

00:10:03,880 --> 00:10:07,930
these problems is by not using something

00:10:05,920 --> 00:10:09,520
like a garbage collector at runtime but

00:10:07,930 --> 00:10:11,320
by doing a static check at compilation

00:10:09,520 --> 00:10:12,520
time and so we checked that your program

00:10:11,320 --> 00:10:14,500
behaves correctly and you have to learn

00:10:12,520 --> 00:10:15,850
how to work with the type checker so

00:10:14,500 --> 00:10:18,130
there's definitely a learning curve to

00:10:15,850 --> 00:10:19,540
this approach it takes longer to get

00:10:18,130 --> 00:10:22,090
started you have to learn how to factor

00:10:19,540 --> 00:10:25,060
your programs differently and that can

00:10:22,090 --> 00:10:27,400
be a bit tough right it's if you're

00:10:25,060 --> 00:10:28,720
trying to ship a product the last thing

00:10:27,400 --> 00:10:32,020
you want is your compiler telling you no

00:10:28,720 --> 00:10:34,870
I won't run that code right I mean or is

00:10:32,020 --> 00:10:37,300
it actually because I think that it's

00:10:34,870 --> 00:10:38,830
correct like type systems can feel like

00:10:37,300 --> 00:10:40,030
the spinach that your parents kind of

00:10:38,830 --> 00:10:42,040
forced you to eat when you were a kid

00:10:40,030 --> 00:10:43,690
you know it's good for you but you don't

00:10:42,040 --> 00:10:45,670
really want to eat it exactly and and I

00:10:43,690 --> 00:10:48,790
think they are kind of like spinach but

00:10:45,670 --> 00:10:50,350
not that nasty boiled spinach this to

00:10:48,790 --> 00:10:53,590
hug I don't know who's feeding your dog

00:10:50,350 --> 00:10:55,240
spinach but more like this like Popeye

00:10:53,590 --> 00:10:57,340
spinach right the kind of spinach that

00:10:55,240 --> 00:10:59,670
yeah it makes you really strong unless

00:10:57,340 --> 00:11:03,610
you do stuff that you couldn't do before

00:10:59,670 --> 00:11:06,850
so let me give you one example

00:11:03,610 --> 00:11:08,740
from Mozilla where this was true so we

00:11:06,850 --> 00:11:12,010
have you probably can't read that that's

00:11:08,740 --> 00:11:14,350
okay we have recently shipped in a new

00:11:12,010 --> 00:11:17,650
version of Firefox an extension that

00:11:14,350 --> 00:11:20,140
lets us render your do some of the CSS

00:11:17,650 --> 00:11:21,760
processing in parallel so this part

00:11:20,140 --> 00:11:23,530
that's called selector matching it's

00:11:21,760 --> 00:11:25,330
part of the process of displaying a web

00:11:23,530 --> 00:11:27,010
page right and the thing about this

00:11:25,330 --> 00:11:29,170
problem is that it's it's so-called

00:11:27,010 --> 00:11:31,660
embarrassingly parallel which is

00:11:29,170 --> 00:11:33,490
actually a technical term and it means

00:11:31,660 --> 00:11:35,500
like it's so easy to paralyze it's

00:11:33,490 --> 00:11:37,540
really kind of embarrassing if you don't

00:11:35,500 --> 00:11:39,670
do it because it's just a big bucket of

00:11:37,540 --> 00:11:42,820
tasks that can be done in virtually any

00:11:39,670 --> 00:11:45,070
order and yet this bug was only recently

00:11:42,820 --> 00:11:46,690
closed and if you look when it was

00:11:45,070 --> 00:11:48,940
reported let me make it a little bigger

00:11:46,690 --> 00:11:52,380
for you it was reported eight years ago

00:11:48,940 --> 00:11:54,430
so somehow over over eight years of C++

00:11:52,380 --> 00:11:56,560
people like really knowledgeable people

00:11:54,430 --> 00:11:58,150
trying to do this they didn't succeed

00:11:56,560 --> 00:12:00,670
even though it was an embarrassingly

00:11:58,150 --> 00:12:02,140
easy problem to do right and in fact we

00:12:00,670 --> 00:12:04,810
tried it's not for one of trying we

00:12:02,140 --> 00:12:06,970
tried three times twice in C++ and once

00:12:04,810 --> 00:12:09,160
in rust right and only once did we

00:12:06,970 --> 00:12:10,840
succeed so that should tell you

00:12:09,160 --> 00:12:12,400
something about what a difference it can

00:12:10,840 --> 00:12:17,400
make to have a type system on your side

00:12:12,400 --> 00:12:17,400
kind of checking things over for you now

00:12:18,000 --> 00:12:22,240
but so what is the difference then if we

00:12:20,890 --> 00:12:24,940
look okay so we know that the type

00:12:22,240 --> 00:12:27,040
system is useful great but but what

00:12:24,940 --> 00:12:28,870
makes it useful what makes it more

00:12:27,040 --> 00:12:31,270
useful than other type systems say which

00:12:28,870 --> 00:12:33,610
can sort of be very controversial and

00:12:31,270 --> 00:12:36,220
maybe not so helpful I think a normal

00:12:33,610 --> 00:12:39,160
type system kind of gives you structs

00:12:36,220 --> 00:12:41,350
maybe you have fields some methods on

00:12:39,160 --> 00:12:42,910
those trucks or maybe classes but you

00:12:41,350 --> 00:12:44,230
know it's not it's kind of it captures a

00:12:42,910 --> 00:12:45,370
lot of what you're trying to do but a

00:12:44,230 --> 00:12:47,680
lot of times you run into situations

00:12:45,370 --> 00:12:49,870
that it can't describe and well Russ

00:12:47,680 --> 00:12:51,790
tries to do is add a lot to more

00:12:49,870 --> 00:12:53,710
patterns to that so you can describe a

00:12:51,790 --> 00:12:58,330
lot more things and describe how your

00:12:53,710 --> 00:13:01,860
program works more precisely so one big

00:12:58,330 --> 00:13:03,730
piece of that is something called enums

00:13:01,860 --> 00:13:05,980
enums are something we borrowed from

00:13:03,730 --> 00:13:07,690
functional languages but it's kind of

00:13:05,980 --> 00:13:09,340
like a struct in that you have a list of

00:13:07,690 --> 00:13:10,960
fields but you have multiple variants

00:13:09,340 --> 00:13:12,700
right so you might say okay I have a

00:13:10,960 --> 00:13:15,610
shape and a shape can be either a circle

00:13:12,700 --> 00:13:16,819
or a square and if it's a circle it has

00:13:15,610 --> 00:13:18,619
a radius

00:13:16,819 --> 00:13:20,179
if it's a square it has a width and a

00:13:18,619 --> 00:13:21,919
height if you have different sets of

00:13:20,179 --> 00:13:24,859
fields depending on which case you are

00:13:21,919 --> 00:13:27,019
and then you can do things like match

00:13:24,859 --> 00:13:30,919
across them so you say well let me look

00:13:27,019 --> 00:13:32,359
at that shape if it was a circle then

00:13:30,919 --> 00:13:34,639
I'm gonna run this code which is

00:13:32,359 --> 00:13:36,139
computing the area in this case and when

00:13:34,639 --> 00:13:38,449
I'm running that code I get access to

00:13:36,139 --> 00:13:39,769
the field radius but I don't have access

00:13:38,449 --> 00:13:42,649
to these other fields width and height

00:13:39,769 --> 00:13:45,049
that don't apply in this case and

00:13:42,649 --> 00:13:47,329
similarly if it were a square then I can

00:13:45,049 --> 00:13:49,850
I get access to width and height but not

00:13:47,329 --> 00:13:53,329
the radius so that's pretty useful and

00:13:49,850 --> 00:13:55,850
this this kind of enums are something we

00:13:53,329 --> 00:13:57,799
use everywhere in rust and they really

00:13:55,850 --> 00:13:59,149
help us capture a lot of patterns that

00:13:57,799 --> 00:14:00,889
would be a lot more verbose I mean you

00:13:59,149 --> 00:14:02,689
could write this in theory with

00:14:00,889 --> 00:14:04,789
subclasses you could have a base class

00:14:02,689 --> 00:14:06,410
shape and a subclass circle and a

00:14:04,789 --> 00:14:08,089
subclass square but it's just a lot of

00:14:06,410 --> 00:14:10,970
code spread out over a lot of places

00:14:08,089 --> 00:14:13,789
compared to this kind of compact a

00:14:10,970 --> 00:14:16,639
little little snippet right and so you

00:14:13,789 --> 00:14:18,169
don't wind up using them as much as you

00:14:16,639 --> 00:14:20,269
would otherwise and that makes a big

00:14:18,169 --> 00:14:22,879
difference and so one place we use them

00:14:20,269 --> 00:14:25,939
is to get rid of null pointers right so

00:14:22,879 --> 00:14:27,739
a java string it might be a string but

00:14:25,939 --> 00:14:29,209
it might also be nothing at all right

00:14:27,739 --> 00:14:31,999
whereas in rust if you have a string

00:14:29,209 --> 00:14:33,679
it's really a string but if you want to

00:14:31,999 --> 00:14:35,809
maybe have nothing at all you can use

00:14:33,679 --> 00:14:38,479
something like option which is an enum

00:14:35,809 --> 00:14:41,089
it's a generic enum so it's based over

00:14:38,479 --> 00:14:43,399
some type T in this case it might be

00:14:41,089 --> 00:14:45,350
string let's say and it's either yes

00:14:43,399 --> 00:14:47,899
that's other sum which means there is

00:14:45,350 --> 00:14:50,269
something there or none like nothing

00:14:47,899 --> 00:14:53,029
right and that means that the type of

00:14:50,269 --> 00:14:56,179
your variable actually reflects could it

00:14:53,029 --> 00:14:58,999
be no or might it not be no is it a is

00:14:56,179 --> 00:15:00,859
it a string or an optional string which

00:14:58,999 --> 00:15:02,959
in turn means that when you write code

00:15:00,859 --> 00:15:05,389
that uses that variable you can remember

00:15:02,959 --> 00:15:08,089
and handle the case where it might be

00:15:05,389 --> 00:15:10,789
know correctly so these little things

00:15:08,089 --> 00:15:13,939
they kind of add up right

00:15:10,789 --> 00:15:15,609
they make being able to express the

00:15:13,939 --> 00:15:17,720
pattern you want to express concisely

00:15:15,609 --> 00:15:19,879
means it's nice to use instead of

00:15:17,720 --> 00:15:21,470
annoying right and there's a lot of

00:15:19,879 --> 00:15:25,279
things like fall in this category

00:15:21,470 --> 00:15:26,959
I think enums closures I don't know what

00:15:25,279 --> 00:15:28,339
else traits and generic programming we

00:15:26,959 --> 00:15:29,359
have a lot of features that they're not

00:15:28,339 --> 00:15:30,529
really unique to rust

00:15:29,359 --> 00:15:31,879
they kind of were borrowed from

00:15:30,529 --> 00:15:34,459
other languages maybe tweaked a little

00:15:31,879 --> 00:15:37,159
along the way but they let us say things

00:15:34,459 --> 00:15:39,019
that are hard to say sometimes and

00:15:37,159 --> 00:15:40,399
that's really powerful and I think one

00:15:39,019 --> 00:15:41,779
of those is kind of outside of the

00:15:40,399 --> 00:15:43,489
language but it's worth mentioning is

00:15:41,779 --> 00:15:46,009
it's just cargo itself our package

00:15:43,489 --> 00:15:47,299
repository and package manager because

00:15:46,009 --> 00:15:49,909
this is what lets you take some random

00:15:47,299 --> 00:15:51,859
piece of code and just use it with like

00:15:49,909 --> 00:15:53,599
one line of code to download build and

00:15:51,859 --> 00:15:55,909
configure it right and if you've ever

00:15:53,599 --> 00:15:57,759
worked in C++ you know that that didn't

00:15:55,909 --> 00:16:00,759
used to be the case with system software

00:15:57,759 --> 00:16:03,739
that it was easy to reuse other things

00:16:00,759 --> 00:16:05,719
so that's that's a piece of it but those

00:16:03,739 --> 00:16:07,369
things are not unique to rust either

00:16:05,719 --> 00:16:10,459
right there are the things we borrowed

00:16:07,369 --> 00:16:13,039
from other languages I think the last

00:16:10,459 --> 00:16:16,219
piece of this of the type system the

00:16:13,039 --> 00:16:17,749
kind of most central piece is ownership

00:16:16,219 --> 00:16:19,909
and borrowing and this is an extension

00:16:17,749 --> 00:16:20,959
that really is in a way unique to rust I

00:16:19,909 --> 00:16:23,419
mean we borrowed it from research

00:16:20,959 --> 00:16:26,469
languages that are out there but in

00:16:23,419 --> 00:16:29,359
terms of and adapted it but in terms of

00:16:26,469 --> 00:16:33,289
mainstream languages it's it's kind of

00:16:29,359 --> 00:16:35,299
novel right and the key aspect of it is

00:16:33,289 --> 00:16:37,039
unlike say an enum an enum is a

00:16:35,299 --> 00:16:38,899
different version of struct right a

00:16:37,039 --> 00:16:41,119
struct tells you what data is there and

00:16:38,899 --> 00:16:42,379
what you can do with it an enum also

00:16:41,119 --> 00:16:44,419
tells you that but it has some more

00:16:42,379 --> 00:16:46,579
flexibility maybe it's one of two

00:16:44,419 --> 00:16:48,139
different kinds of data but ownership

00:16:46,579 --> 00:16:49,879
and borrowing let you describe something

00:16:48,139 --> 00:16:52,519
that's completely orthogonal another

00:16:49,879 --> 00:16:54,379
aspect not what data is there but who

00:16:52,519 --> 00:16:56,419
has access to that data and what

00:16:54,379 --> 00:16:58,279
permissions do I have and that lets you

00:16:56,419 --> 00:17:01,819
expand the scope of things that you can

00:16:58,279 --> 00:17:04,339
talk about let me give you some examples

00:17:01,819 --> 00:17:05,929
but like I want to kind of give a good

00:17:04,339 --> 00:17:07,579
idea for what it feels like to use

00:17:05,929 --> 00:17:10,069
ownership what does ownership mean in a

00:17:07,579 --> 00:17:13,490
programming language I think we know

00:17:10,069 --> 00:17:16,399
what ownership means in real life this

00:17:13,490 --> 00:17:20,449
guy if I owned something it's like it's

00:17:16,399 --> 00:17:23,659
mine and importantly it is not yours

00:17:20,449 --> 00:17:26,750
right it's that's the key bit and I

00:17:23,659 --> 00:17:27,949
think if we actually look most

00:17:26,750 --> 00:17:30,320
programming languages that are out there

00:17:27,949 --> 00:17:32,720
we find that they're pretty good at the

00:17:30,320 --> 00:17:36,470
mind part and they're not so good at the

00:17:32,720 --> 00:17:37,879
not yours part and that's important all

00:17:36,470 --> 00:17:39,919
right and actually the source of a lot

00:17:37,879 --> 00:17:42,019
of problems so let me walk you through

00:17:39,919 --> 00:17:44,220
an example this is using go I'm not

00:17:42,019 --> 00:17:45,720
picking on go it could be any language

00:17:44,220 --> 00:17:47,870
find ghost syntax actually quite nice

00:17:45,720 --> 00:17:49,890
for this so it's a good example language

00:17:47,870 --> 00:17:52,380
but really any garbage collected

00:17:49,890 --> 00:17:54,600
language has this pattern so what we're

00:17:52,380 --> 00:17:56,480
gonna walk through is two to go routines

00:17:54,600 --> 00:18:01,070
which are two threads and go right to

00:17:56,480 --> 00:18:03,600
independent like things of control and

00:18:01,070 --> 00:18:06,299
the first one oh here's some more of my

00:18:03,600 --> 00:18:07,890
daughter's pictures which I love the

00:18:06,299 --> 00:18:10,080
first one is going to be running this

00:18:07,890 --> 00:18:12,780
function foo and you see that the first

00:18:10,080 --> 00:18:14,370
thing it does is it creates a gift right

00:18:12,780 --> 00:18:17,730
and it puts it in this variable regalo

00:18:14,370 --> 00:18:19,500
and okay this is a struct it has some

00:18:17,730 --> 00:18:21,179
value and then what we're going to do is

00:18:19,500 --> 00:18:23,880
we're gonna send it across this channel

00:18:21,179 --> 00:18:25,830
over to another go routine it's very

00:18:23,880 --> 00:18:29,159
excited and looking forward to receiving

00:18:25,830 --> 00:18:31,890
the present but even though we sent it

00:18:29,159 --> 00:18:33,960
like logically we gave this gift to the

00:18:31,890 --> 00:18:37,500
other girl routine but I'm gonna draw it

00:18:33,960 --> 00:18:39,240
halfway between them because really we

00:18:37,500 --> 00:18:41,220
kind of kept some of it for ourselves

00:18:39,240 --> 00:18:42,780
right we still have this variable regalo

00:18:41,220 --> 00:18:44,340
and we can still use it even though we

00:18:42,780 --> 00:18:46,080
sent this gift to the other party and

00:18:44,340 --> 00:18:49,380
there may be thinking that it's there is

00:18:46,080 --> 00:18:50,820
now it's kind of both of ours so for

00:18:49,380 --> 00:18:55,140
example I could go and open this present

00:18:50,820 --> 00:18:59,640
and find what's inside and maybe it's a

00:18:55,140 --> 00:19:01,409
blueberry so yeah I asked my daughter I

00:18:59,640 --> 00:19:03,360
said just just draw whatever you want to

00:19:01,409 --> 00:19:06,030
know I'll put it in somehow so this is

00:19:03,360 --> 00:19:09,330
what I think this is what I got but it's

00:19:06,030 --> 00:19:11,190
okay so so then we could open it and now

00:19:09,330 --> 00:19:13,200
that's kind of a problem maybe for the

00:19:11,190 --> 00:19:14,940
other side because you know they got

00:19:13,200 --> 00:19:17,100
their present and they were expecting

00:19:14,940 --> 00:19:18,630
that they could open it they wanted to

00:19:17,100 --> 00:19:21,210
open the president but it's already open

00:19:18,630 --> 00:19:23,220
because we did it and now we have this

00:19:21,210 --> 00:19:24,690
this could lead to a crash this could

00:19:23,220 --> 00:19:26,549
lead to all kinds of things you know or

00:19:24,690 --> 00:19:28,230
maybe it's just fine I don't know but

00:19:26,549 --> 00:19:30,120
the important point is this is what we

00:19:28,230 --> 00:19:31,950
call a data race basically we now have

00:19:30,120 --> 00:19:33,900
these two independent actors these two

00:19:31,950 --> 00:19:36,570
threads or to go routines they're both

00:19:33,900 --> 00:19:39,150
working on the same gift and they're

00:19:36,570 --> 00:19:40,559
both they're not coordinating their time

00:19:39,150 --> 00:19:42,330
with each other they can open it in any

00:19:40,559 --> 00:19:43,710
order so different times that you

00:19:42,330 --> 00:19:46,409
execute it different things might happen

00:19:43,710 --> 00:19:47,730
sometimes it crashes my experience is it

00:19:46,409 --> 00:19:49,320
works really great whenever you're

00:19:47,730 --> 00:19:50,850
running your tests right but it doesn't

00:19:49,320 --> 00:19:52,080
work so good when someone else is

00:19:50,850 --> 00:19:57,990
running the testers but then it will

00:19:52,080 --> 00:20:00,090
crash for sure and I mean I should say

00:19:57,990 --> 00:20:02,760
like in the days when I worked on C++ I

00:20:00,090 --> 00:20:04,559
definitely spent evenings just watching

00:20:02,760 --> 00:20:06,360
a movie running the test over and over

00:20:04,559 --> 00:20:08,550
waiting for it to crash exactly once

00:20:06,360 --> 00:20:10,350
even though it would crash consistently

00:20:08,550 --> 00:20:17,370
for the customers we were working for it

00:20:10,350 --> 00:20:19,710
can really be frustrating and so next

00:20:17,370 --> 00:20:21,900
slide thank you so what went wrong here

00:20:19,710 --> 00:20:23,550
kind of what how did we get in this

00:20:21,900 --> 00:20:25,590
situation that we had this present and

00:20:23,550 --> 00:20:27,390
we who both open it and nobody knew who

00:20:25,590 --> 00:20:28,890
was supposed to open it I think the

00:20:27,390 --> 00:20:30,690
answer is that there kind of two ways

00:20:28,890 --> 00:20:32,640
we've we've looked at this problem there

00:20:30,690 --> 00:20:35,370
are like two things that went they were

00:20:32,640 --> 00:20:37,050
combined to cause a problem first we had

00:20:35,370 --> 00:20:38,730
mutation so we had this idea that we

00:20:37,050 --> 00:20:40,050
could open the present and if you're a

00:20:38,730 --> 00:20:42,300
functional programmer or you might look

00:20:40,050 --> 00:20:44,040
at this this slide before and say well

00:20:42,300 --> 00:20:45,900
that's your problem you shouldn't have

00:20:44,040 --> 00:20:47,370
been opening the present you should have

00:20:45,900 --> 00:20:48,720
been creating should have left the

00:20:47,370 --> 00:20:50,970
closed present it's just an immutable

00:20:48,720 --> 00:20:53,490
object for all time that never changes

00:20:50,970 --> 00:20:55,500
but it can create an open present from

00:20:53,490 --> 00:20:57,270
it and then there's no problem because

00:20:55,500 --> 00:20:58,800
norick we're both expected a closed

00:20:57,270 --> 00:21:01,230
present and that's what we got and

00:20:58,800 --> 00:21:03,300
that's true but that if we don't allow

00:21:01,230 --> 00:21:04,950
any mutation we kind of give up on a lot

00:21:03,300 --> 00:21:07,620
of efficiency which is what we were

00:21:04,950 --> 00:21:11,280
trying to do in the first place and we

00:21:07,620 --> 00:21:12,929
kind of it's hard for us to express some

00:21:11,280 --> 00:21:14,790
things in the most natural way I would

00:21:12,929 --> 00:21:16,740
say so mutation is a fact of life

00:21:14,790 --> 00:21:19,890
presents get opened and then they are

00:21:16,740 --> 00:21:21,240
opened you can sort of hide it but then

00:21:19,890 --> 00:21:22,770
you have to capture this pattern in

00:21:21,240 --> 00:21:24,540
another way somehow you have to you may

00:21:22,770 --> 00:21:28,140
still need to agree whether or not you

00:21:24,540 --> 00:21:30,150
open the present and so on right and so

00:21:28,140 --> 00:21:31,830
that that's that's one side but you

00:21:30,150 --> 00:21:33,270
might look at it from the other side of

00:21:31,830 --> 00:21:35,190
this and say well the problem was not

00:21:33,270 --> 00:21:37,110
the mutation it was the sharing you

00:21:35,190 --> 00:21:38,640
shouldn't have had shared memory so

00:21:37,110 --> 00:21:40,140
something like a language like hair long

00:21:38,640 --> 00:21:41,940
or something has this really nice

00:21:40,140 --> 00:21:44,040
approach where whenever you send a

00:21:41,940 --> 00:21:45,750
message also JavaScript whenever you

00:21:44,040 --> 00:21:47,790
send a message between two actors you

00:21:45,750 --> 00:21:49,410
just copy it so you don't share the same

00:21:47,790 --> 00:21:51,480
gift you just have two gifts one on each

00:21:49,410 --> 00:21:53,820
side right and they can both be opened

00:21:51,480 --> 00:21:56,250
independently and that's okay too but

00:21:53,820 --> 00:21:58,350
that again costs efficiency and again it

00:21:56,250 --> 00:22:00,120
might be something that we wanted to

00:21:58,350 --> 00:22:03,870
sort of have a unique resource some

00:22:00,120 --> 00:22:05,220
things can't be copied right so what

00:22:03,870 --> 00:22:07,230
Russ does is take a different approach

00:22:05,220 --> 00:22:09,030
we say okay we're going to allow sharing

00:22:07,230 --> 00:22:10,320
and we're going to allow mutation but

00:22:09,030 --> 00:22:11,309
we're going to impose with the type

00:22:10,320 --> 00:22:12,960
checker

00:22:11,309 --> 00:22:15,779
requirement that they can't happen at

00:22:12,960 --> 00:22:18,210
the same time right as long as you're

00:22:15,779 --> 00:22:19,950
not as long as you have only one copy of

00:22:18,210 --> 00:22:21,870
the gift you can go ahead and mutate it

00:22:19,950 --> 00:22:24,539
all you like and nobody else can see it

00:22:21,870 --> 00:22:26,279
so nobody else can be surprised but if

00:22:24,539 --> 00:22:27,720
you're going to share the gift across

00:22:26,279 --> 00:22:29,549
many people so that they are two

00:22:27,720 --> 00:22:31,139
different threads have access to it then

00:22:29,549 --> 00:22:33,120
it has to be immutable so nobody gets

00:22:31,139 --> 00:22:35,279
surprised and that turns out to capture

00:22:33,120 --> 00:22:37,799
a lot of things that we want to do right

00:22:35,279 --> 00:22:38,669
so if we take that exact example and we

00:22:37,799 --> 00:22:41,220
run it through in rust

00:22:38,669 --> 00:22:42,960
we'll see it turns out differently this

00:22:41,220 --> 00:22:46,409
is some rust in tax so we have a

00:22:42,960 --> 00:22:48,809
function it's called main and it's gonna

00:22:46,409 --> 00:22:52,710
it starts out kind of the same way we

00:22:48,809 --> 00:22:54,899
create a gift and then we write channel

00:22:52,710 --> 00:22:58,799
dot send and we're gonna send our regalo

00:22:54,899 --> 00:23:00,389
across the channel right and on the

00:22:58,799 --> 00:23:02,220
other side this is what a channel type

00:23:00,389 --> 00:23:04,529
might look like in rust okay so it's a

00:23:02,220 --> 00:23:06,090
little more rust syntax um let me just

00:23:04,529 --> 00:23:08,610
walk you through a bit of it we have

00:23:06,090 --> 00:23:11,279
this keyword imple that declares methods

00:23:08,610 --> 00:23:12,720
in rust basically and this is going to

00:23:11,279 --> 00:23:14,429
be a generic method which means a

00:23:12,720 --> 00:23:20,399
channel in rust would have some type

00:23:14,429 --> 00:23:24,149
associated with it that says kind of how

00:23:20,399 --> 00:23:27,419
much what kind of data we're sending and

00:23:24,149 --> 00:23:30,240
so on the other point when we take the

00:23:27,419 --> 00:23:32,580
argument here when we say that we're

00:23:30,240 --> 00:23:34,169
taking a value of type T and rust this

00:23:32,580 --> 00:23:38,580
is where the difference really lies what

00:23:34,169 --> 00:23:40,200
that means is we say that he just showed

00:23:38,580 --> 00:23:43,169
me a slide saying I only had 10 minutes

00:23:40,200 --> 00:23:46,350
and I was like really oh my god anyway

00:23:43,169 --> 00:23:48,779
so when we get a channel of total we get

00:23:46,350 --> 00:23:50,700
a value sorry let me reset when we're in

00:23:48,779 --> 00:23:53,039
a function and we have an argument in

00:23:50,700 --> 00:23:55,169
rust and it's of type T let's say what

00:23:53,039 --> 00:23:57,509
that means is I want ownership of a

00:23:55,169 --> 00:23:59,490
value of type T I need to have it and

00:23:57,509 --> 00:24:01,889
you can't have it right and that's the

00:23:59,490 --> 00:24:04,860
key difference so that means that this

00:24:01,889 --> 00:24:07,230
gift is going to be given from the left

00:24:04,860 --> 00:24:08,610
hand side to the right hand side and on

00:24:07,230 --> 00:24:10,950
the left hand side here when I pass a

00:24:08,610 --> 00:24:15,389
value like this I know I'm giving it

00:24:10,950 --> 00:24:16,889
away I'm not just kind of giving sharing

00:24:15,389 --> 00:24:18,720
it I'm actually giving it to the other

00:24:16,889 --> 00:24:20,159
side completely so I can draw this gift

00:24:18,720 --> 00:24:22,769
it's moving all the way to the right

00:24:20,159 --> 00:24:24,900
hand side right and then you might

00:24:22,769 --> 00:24:26,790
wonder well what happens okay so I just

00:24:24,900 --> 00:24:28,350
I use different words but the code looks

00:24:26,790 --> 00:24:30,390
the same so what happens when I go on

00:24:28,350 --> 00:24:32,400
and I keep using this local variable

00:24:30,390 --> 00:24:34,650
even though I gave it away

00:24:32,400 --> 00:24:36,450
the answer is the compiler tracks what

00:24:34,650 --> 00:24:38,760
you gave away and what you didn't give

00:24:36,450 --> 00:24:41,610
away and you get an error message right

00:24:38,760 --> 00:24:42,930
saying hey you can actually see pretty

00:24:41,610 --> 00:24:44,520
nicely here if you can read it I don't

00:24:42,930 --> 00:24:47,430
know but it's saying on the first line

00:24:44,520 --> 00:24:49,500
you move the value here and on the

00:24:47,430 --> 00:24:54,450
second line then you try to use it even

00:24:49,500 --> 00:24:56,100
though you moved it right and so that's

00:24:54,450 --> 00:24:59,040
kind of the key essence of Russ

00:24:56,100 --> 00:25:01,170
right so let's step back for a second I

00:24:59,040 --> 00:25:02,880
just walked you through two examples but

00:25:01,170 --> 00:25:07,830
what what kind of just happened between

00:25:02,880 --> 00:25:10,320
them well what happened was we went from

00:25:07,830 --> 00:25:11,880
having a compilation error sorry we went

00:25:10,320 --> 00:25:14,340
from having an error when we ran the

00:25:11,880 --> 00:25:16,470
program to an error when we compiled the

00:25:14,340 --> 00:25:17,790
program which we which is a really

00:25:16,470 --> 00:25:21,360
important difference

00:25:17,790 --> 00:25:23,340
I think systems programming has a

00:25:21,360 --> 00:25:25,679
reputation also parallel programming

00:25:23,340 --> 00:25:27,809
they both have a reputation for being

00:25:25,679 --> 00:25:30,270
very difficult right and I think a lot

00:25:27,809 --> 00:25:32,010
of the reason is because you set up this

00:25:30,270 --> 00:25:34,470
structure that seems like it should work

00:25:32,010 --> 00:25:36,030
just fine right but then when you

00:25:34,470 --> 00:25:38,040
actually put it into practice

00:25:36,030 --> 00:25:40,500
you hit problems because there's a lot

00:25:38,040 --> 00:25:42,420
of unwritten rules that you just have to

00:25:40,500 --> 00:25:43,890
learn or they've written but they're not

00:25:42,420 --> 00:25:46,050
enforced right there's a lot of rules

00:25:43,890 --> 00:25:47,700
you have to learn and understand in

00:25:46,050 --> 00:25:50,880
order to make a system that really works

00:25:47,700 --> 00:25:53,280
so there's there's kind of a deceptive

00:25:50,880 --> 00:25:54,450
learning curve that happens where you

00:25:53,280 --> 00:25:55,830
think you've got a system that's working

00:25:54,450 --> 00:26:00,929
but you haven't actually learned all the

00:25:55,830 --> 00:26:05,520
parts it's kind of like this right and

00:26:00,929 --> 00:26:07,350
so in contrast or what so what we find

00:26:05,520 --> 00:26:09,420
is that happens again and again is that

00:26:07,350 --> 00:26:11,280
it's actually pretty easy to write a

00:26:09,420 --> 00:26:13,950
kind of high-performance API that people

00:26:11,280 --> 00:26:15,690
can use the problem is making one that

00:26:13,950 --> 00:26:17,280
they can use correctly that's what's

00:26:15,690 --> 00:26:19,110
really hard and that's where a rust

00:26:17,280 --> 00:26:23,880
where ownership and borrowing kind of

00:26:19,110 --> 00:26:26,309
changes the balance here right so in

00:26:23,880 --> 00:26:28,950
short it kind of makes the difference

00:26:26,309 --> 00:26:32,250
I think if things go right and sometimes

00:26:28,950 --> 00:26:35,760
they do you wind up being somewhere like

00:26:32,250 --> 00:26:37,679
this you set up your your big you try to

00:26:35,760 --> 00:26:38,730
paralyze your loop if you get a

00:26:37,679 --> 00:26:41,250
compilation error

00:26:38,730 --> 00:26:43,080
or then maybe you refactor things or

00:26:41,250 --> 00:26:44,640
maybe you give up but if it works it

00:26:43,080 --> 00:26:47,820
actually works correctly

00:26:44,640 --> 00:26:49,650
right and this is why I think people

00:26:47,820 --> 00:26:51,600
feel or what we find so much more

00:26:49,650 --> 00:26:56,360
success when you're trying to do these

00:26:51,600 --> 00:27:00,210
things in rust versus other languages so

00:26:56,360 --> 00:27:01,919
so these are three things right we have

00:27:00,210 --> 00:27:03,750
these zero cost abstractions that let us

00:27:01,919 --> 00:27:05,130
write really efficient code we have

00:27:03,750 --> 00:27:07,080
these modern conveniences that let us

00:27:05,130 --> 00:27:09,390
express patterns more concisely than we

00:27:07,080 --> 00:27:10,770
used to be able to and we have ownership

00:27:09,390 --> 00:27:13,280
and borrowing that let us actually

00:27:10,770 --> 00:27:16,049
capture permissions and what I think

00:27:13,280 --> 00:27:17,760
happens that maybe we didn't expect in

00:27:16,049 --> 00:27:20,760
the beginning when you have those three

00:27:17,760 --> 00:27:22,530
things is that something emerges else

00:27:20,760 --> 00:27:24,600
and I think this is actually the thing

00:27:22,530 --> 00:27:26,760
that people love about rust if they love

00:27:24,600 --> 00:27:28,320
rust it's that you wind up having this

00:27:26,760 --> 00:27:32,220
sense of craftsmanship that you can

00:27:28,320 --> 00:27:34,650
build a really well-crafted library that

00:27:32,220 --> 00:27:39,450
is kind of simultaneously really

00:27:34,650 --> 00:27:42,419
efficient and easy to use and catches

00:27:39,450 --> 00:27:44,669
problems early right and then on the

00:27:42,419 --> 00:27:45,950
other side you can use libraries like

00:27:44,669 --> 00:27:48,059
that all right

00:27:45,950 --> 00:27:49,890
and you can use them to build your own

00:27:48,059 --> 00:27:52,380
libraries which are also well crafted so

00:27:49,890 --> 00:27:55,770
you end up with this kind of beneficial

00:27:52,380 --> 00:27:57,000
ecosystem and I think it makes the

00:27:55,770 --> 00:28:00,630
difference right like you might think

00:27:57,000 --> 00:28:02,490
that oh it's gonna be this kind of great

00:28:00,630 --> 00:28:04,260
power great responsibility thing but the

00:28:02,490 --> 00:28:07,049
responsibility kind of moves on to the

00:28:04,260 --> 00:28:08,190
compiler its handling that part for you

00:28:07,049 --> 00:28:10,440
and you just kind of get to have fun

00:28:08,190 --> 00:28:11,700
building your program setting up threads

00:28:10,440 --> 00:28:13,470
that talk to one another providing

00:28:11,700 --> 00:28:15,510
parallel loops and so on and knowing

00:28:13,470 --> 00:28:19,200
that it's you're gonna be free from like

00:28:15,510 --> 00:28:22,650
the worst kinds of bugs so I sent out a

00:28:19,200 --> 00:28:25,260
tweet the other day asking you know this

00:28:22,650 --> 00:28:27,480
is not a leading question at all if

00:28:25,260 --> 00:28:29,520
there are any libe if people have

00:28:27,480 --> 00:28:32,190
examples of libraries that they really

00:28:29,520 --> 00:28:34,140
like basically and I got a lot of

00:28:32,190 --> 00:28:37,410
answers I don't have them all in these

00:28:34,140 --> 00:28:38,970
slides you know these are just a few but

00:28:37,410 --> 00:28:40,890
it's kind of interesting to look through

00:28:38,970 --> 00:28:43,169
and look at what these libraries do and

00:28:40,890 --> 00:28:45,840
it gives you a feeling for all the kinds

00:28:43,169 --> 00:28:47,390
of things that people are starting to do

00:28:45,840 --> 00:28:50,220
in rust right so you have for example

00:28:47,390 --> 00:28:52,460
well Saturday which is even kind of a

00:28:50,220 --> 00:28:55,260
lot of base libraries like Saturday that

00:28:52,460 --> 00:28:56,490
serialization deserialization actually

00:28:55,260 --> 00:29:00,240
we have one of the maintainer x' right

00:28:56,490 --> 00:29:01,800
here looking at me until May but and

00:29:00,240 --> 00:29:04,260
it's a really cool library that has a

00:29:01,800 --> 00:29:06,210
lot of flexibility for it that people

00:29:04,260 --> 00:29:09,000
are using and it also gone runs you know

00:29:06,210 --> 00:29:11,070
competitively very fast right you can

00:29:09,000 --> 00:29:13,050
load JSON and deserialize it into a

00:29:11,070 --> 00:29:14,580
rough structure in just a few lines of

00:29:13,050 --> 00:29:15,870
code and it will be as fast as if you

00:29:14,580 --> 00:29:17,340
would hand written the code for the most

00:29:15,870 --> 00:29:18,690
part right probably faster because it

00:29:17,340 --> 00:29:22,740
would be hard to tune it that bit that

00:29:18,690 --> 00:29:24,450
well and we have things like rayon that

00:29:22,740 --> 00:29:27,840
lets you which I was involved with that

00:29:24,450 --> 00:29:29,490
lets you paralyze loops very easily then

00:29:27,840 --> 00:29:32,880
we have higher level things like

00:29:29,490 --> 00:29:37,350
backticks which is a framework for web

00:29:32,880 --> 00:29:38,700
framework argument parsing specs did

00:29:37,350 --> 00:29:41,490
anyone attend the games workshop

00:29:38,700 --> 00:29:43,620
yesterday okay you might have worked

00:29:41,490 --> 00:29:45,510
with specs which is it's an engine for

00:29:43,620 --> 00:29:47,100
for game engines for storing data and so

00:29:45,510 --> 00:29:48,540
on so you can see that people are

00:29:47,100 --> 00:29:50,130
building all these great building blocks

00:29:48,540 --> 00:29:52,710
for doing all kinds of things not to

00:29:50,130 --> 00:29:54,690
mention I should add encryption like I

00:29:52,710 --> 00:29:58,020
don't know what this is curve two five

00:29:54,690 --> 00:30:01,410
five one nine Dalek but if I knew

00:29:58,020 --> 00:30:02,730
encryption stuff I probably would and so

00:30:01,410 --> 00:30:05,010
on and and they're building all these

00:30:02,730 --> 00:30:06,630
things and it's really kind of fun to

00:30:05,010 --> 00:30:08,940
have all these tools to play with right

00:30:06,630 --> 00:30:09,840
and in fact I want to highlight one of

00:30:08,940 --> 00:30:11,850
them because I think it's interesting

00:30:09,840 --> 00:30:14,550
it's on this slide but you can't see it

00:30:11,850 --> 00:30:17,940
it's called crossbeam and what it does

00:30:14,550 --> 00:30:20,550
is it supplies low-level parallel

00:30:17,940 --> 00:30:22,680
primitives so things like the channel I

00:30:20,550 --> 00:30:23,970
showed you well actually a cross beam

00:30:22,680 --> 00:30:26,340
and there's another one called parking

00:30:23,970 --> 00:30:27,900
lot which supplies locks and these

00:30:26,340 --> 00:30:28,830
things are kind of you might think

00:30:27,900 --> 00:30:30,960
they're boring but these are like

00:30:28,830 --> 00:30:33,210
best-in-class really efficient locks and

00:30:30,960 --> 00:30:35,070
channels as well as like queues and

00:30:33,210 --> 00:30:36,720
what's cool about them and the reason I

00:30:35,070 --> 00:30:37,890
want to highlight them is that you

00:30:36,720 --> 00:30:39,180
probably don't interact with them

00:30:37,890 --> 00:30:40,980
directly when you're writing your rusts

00:30:39,180 --> 00:30:42,540
code instead maybe you use ray on that

00:30:40,980 --> 00:30:43,860
library I mentioned earlier that lets

00:30:42,540 --> 00:30:45,840
you just take a loop and really easily

00:30:43,860 --> 00:30:48,060
run it in parallel but rayon uses those

00:30:45,840 --> 00:30:49,760
things right and so it makes building

00:30:48,060 --> 00:30:51,840
things like rayon or building act

00:30:49,760 --> 00:30:53,640
extreme work a lot easier if you have

00:30:51,840 --> 00:30:55,860
these great primitives at your disposal

00:30:53,640 --> 00:30:57,480
so you'll wind up even if you're not

00:30:55,860 --> 00:30:58,650
building libraries using libraries that

00:30:57,480 --> 00:31:01,340
are doing better than they would have

00:30:58,650 --> 00:31:04,020
done because they had stuff to draw on

00:31:01,340 --> 00:31:05,550
so I'm going to pull out this last tweet

00:31:04,020 --> 00:31:06,990
because I think it kind of captures what

00:31:05,550 --> 00:31:09,120
I'm getting

00:31:06,990 --> 00:31:12,450
it's recommending a create called diesel

00:31:09,120 --> 00:31:14,280
which is a database mapping Creek and it

00:31:12,450 --> 00:31:16,080
says here that it takes it kind of

00:31:14,280 --> 00:31:18,030
bridges this dichotomy right these two

00:31:16,080 --> 00:31:20,010
things you had to choose from before

00:31:18,030 --> 00:31:21,540
either you had a low-level database

00:31:20,010 --> 00:31:23,460
connector before where you were writing

00:31:21,540 --> 00:31:25,350
sequel kind of directly and it was very

00:31:23,460 --> 00:31:27,270
error-prone or you could use like an

00:31:25,350 --> 00:31:28,650
object relational mapper thing there was

00:31:27,270 --> 00:31:30,150
very high level and had all these layers

00:31:28,650 --> 00:31:32,400
of indirection and was kind of slow but

00:31:30,150 --> 00:31:34,650
it worked and these will kind of bridges

00:31:32,400 --> 00:31:36,390
those gaps right it it lets you describe

00:31:34,650 --> 00:31:37,710
the schema and write queries and a rust

00:31:36,390 --> 00:31:39,540
like syntax that get checked

00:31:37,710 --> 00:31:40,680
but executed very efficiently a map

00:31:39,540 --> 00:31:45,360
write down and that's a really cool

00:31:40,680 --> 00:31:47,550
thing to have in your toolbox okay so

00:31:45,360 --> 00:31:48,990
there's my four pieces I think this is

00:31:47,550 --> 00:31:51,300
the answer to my question what do people

00:31:48,990 --> 00:31:52,950
love about rust I think it's it's the

00:31:51,300 --> 00:31:54,420
sense of craftsmanship but to get that

00:31:52,950 --> 00:31:56,610
sense of craftsmanship we had to have

00:31:54,420 --> 00:31:59,160
these other pieces all come together so

00:31:56,610 --> 00:32:02,520
you can really support that but you know

00:31:59,160 --> 00:32:04,560
if you're like a keen observer you will

00:32:02,520 --> 00:32:07,290
see that I said this is it but I have

00:32:04,560 --> 00:32:09,540
five puzzle pieces and I've only filled

00:32:07,290 --> 00:32:11,340
in four of them because there's another

00:32:09,540 --> 00:32:15,750
thing I think that I think is really

00:32:11,340 --> 00:32:17,430
easy to overlook which is what let us do

00:32:15,750 --> 00:32:18,930
all of these things what let us get this

00:32:17,430 --> 00:32:21,180
design in the first place right and

00:32:18,930 --> 00:32:22,740
that's the rust community and it's the

00:32:21,180 --> 00:32:24,950
community that you're all a part of now

00:32:22,740 --> 00:32:28,950
since you're attending this conference

00:32:24,950 --> 00:32:31,800
and rust has always had this long

00:32:28,950 --> 00:32:33,780
tradition of being open and open is one

00:32:31,800 --> 00:32:35,790
of those words that everybody says and

00:32:33,780 --> 00:32:37,920
everybody means something different so I

00:32:35,790 --> 00:32:40,230
mean all the things that people are

00:32:37,920 --> 00:32:42,480
saying I think for the most part we are

00:32:40,230 --> 00:32:43,980
open in a lot of different ways but the

00:32:42,480 --> 00:32:47,070
one that I think is the most important

00:32:43,980 --> 00:32:49,140
especially for for this theme is that

00:32:47,070 --> 00:32:51,480
we're open minded right we're always

00:32:49,140 --> 00:32:54,960
focused on trying to find the best

00:32:51,480 --> 00:32:58,890
answer as I wrote here and not just on

00:32:54,960 --> 00:33:00,060
winning the argument and the reason

00:32:58,890 --> 00:33:02,790
that's so important is that's what's

00:33:00,060 --> 00:33:05,400
allowed us to kind of get from that rust

00:33:02,790 --> 00:33:07,110
that we had in 2011 when I started that

00:33:05,400 --> 00:33:09,270
was really a different language for the

00:33:07,110 --> 00:33:11,910
rust we have now and so the rust we had

00:33:09,270 --> 00:33:14,370
in 2011 if you look at it from a

00:33:11,910 --> 00:33:15,960
technical perspective it didn't have

00:33:14,370 --> 00:33:18,840
most of the story I just told you about

00:33:15,960 --> 00:33:19,870
we didn't have zero cost abstractions we

00:33:18,840 --> 00:33:21,700
didn't have ownership and

00:33:19,870 --> 00:33:25,600
we had some of ownership but not

00:33:21,700 --> 00:33:27,580
borrowing and we had a runtime we had a

00:33:25,600 --> 00:33:32,140
garbage collector and not a very good

00:33:27,580 --> 00:33:33,610
one and you know it just kind of we

00:33:32,140 --> 00:33:35,620
didn't have this sense of extensibility

00:33:33,610 --> 00:33:38,440
we had a lot of built in ideas to the

00:33:35,620 --> 00:33:41,200
language and we didn't have libraries

00:33:38,440 --> 00:33:43,570
providing those ideas but we had

00:33:41,200 --> 00:33:45,130
something else though we had something

00:33:43,570 --> 00:33:47,770
much more important which is we kind of

00:33:45,130 --> 00:33:51,130
had the right goals we knew we needed it

00:33:47,770 --> 00:33:53,920
to be fast enough to replace C++ like

00:33:51,130 --> 00:33:56,260
really fast enough we knew it had

00:33:53,920 --> 00:33:57,580
however to also be safe and emphasized

00:33:56,260 --> 00:33:59,980
correctness because that was the

00:33:57,580 --> 00:34:01,990
problems we had and we knew that we

00:33:59,980 --> 00:34:03,640
didn't know exactly how to do that but

00:34:01,990 --> 00:34:05,740
that if we were gonna find the way there

00:34:03,640 --> 00:34:08,649
we needed to have a big community of

00:34:05,740 --> 00:34:10,360
people contributing ideas and concepts

00:34:08,649 --> 00:34:12,480
right and so to make sure that happened

00:34:10,360 --> 00:34:14,409
we had a code of conduct to ensure that

00:34:12,480 --> 00:34:16,360
people are treating each other nicely

00:34:14,409 --> 00:34:19,629
and we had a culture that was really

00:34:16,360 --> 00:34:22,540
focused on exploring trade-offs figuring

00:34:19,629 --> 00:34:23,919
out why are these two things in conflict

00:34:22,540 --> 00:34:25,419
can we find a way to bridge that

00:34:23,919 --> 00:34:31,300
conflict or is it really irreconcilable

00:34:25,419 --> 00:34:33,340
and so on and I would say what you what

00:34:31,300 --> 00:34:34,929
what I if you look over the history of

00:34:33,340 --> 00:34:38,020
rust you will find a lot of great ideas

00:34:34,929 --> 00:34:40,659
this is a partial list but what you will

00:34:38,020 --> 00:34:42,429
not find is one person responsible for

00:34:40,659 --> 00:34:44,409
all of those ideas and actually if you

00:34:42,429 --> 00:34:46,360
look at this list I would say first of

00:34:44,409 --> 00:34:48,370
all they were all introduced by

00:34:46,360 --> 00:34:51,600
different people sometimes intersecting

00:34:48,370 --> 00:34:54,399
sets of people but different groups and

00:34:51,600 --> 00:34:55,810
they all seem kind of obvious now if you

00:34:54,399 --> 00:34:58,630
know rust well you'll like now of course

00:34:55,810 --> 00:35:01,240
we do it that way but actually they were

00:34:58,630 --> 00:35:02,950
pretty controversial in most cases or at

00:35:01,240 --> 00:35:04,990
least in some cases very controversial

00:35:02,950 --> 00:35:06,760
when they came out right and they

00:35:04,990 --> 00:35:09,970
certainly weren't obvious we didn't or

00:35:06,760 --> 00:35:12,070
would have done them to begin with I was

00:35:09,970 --> 00:35:13,960
doing research for this talk and I came

00:35:12,070 --> 00:35:15,430
across this web this blog post that I

00:35:13,960 --> 00:35:17,950
really liked by someone named Jessica

00:35:15,430 --> 00:35:20,530
Lord called privilege community and open

00:35:17,950 --> 00:35:22,000
source you should all go read it the

00:35:20,530 --> 00:35:23,710
URLs down there you can't read it of

00:35:22,000 --> 00:35:26,110
course but you can look at the slides

00:35:23,710 --> 00:35:27,760
later and see it but it has this cool

00:35:26,110 --> 00:35:29,650
quote that I liked that I think captures

00:35:27,760 --> 00:35:31,150
this idea and it was basically saying if

00:35:29,650 --> 00:35:32,980
you're trying to do something that's

00:35:31,150 --> 00:35:35,680
really really hard

00:35:32,980 --> 00:35:38,560
you need all the ideas from all the

00:35:35,680 --> 00:35:40,780
people right and that's I think the

00:35:38,560 --> 00:35:43,300
spirit that I'm going for and in case

00:35:40,780 --> 00:35:45,339
you haven't noticed like rust is trying

00:35:43,300 --> 00:35:48,060
to do something really hard let's just

00:35:45,339 --> 00:35:51,790
take a moment and watch this lady okay

00:35:48,060 --> 00:35:53,500
that's really cool so so we're trying to

00:35:51,790 --> 00:35:55,660
do something that's maybe not quite as

00:35:53,500 --> 00:35:57,810
hard as that I don't know but but pretty

00:35:55,660 --> 00:36:01,030
hard right when we started out with rust

00:35:57,810 --> 00:36:02,829
if you think back it was like I used to

00:36:01,030 --> 00:36:05,290
tell people what is rust about it's

00:36:02,829 --> 00:36:07,119
about we want to have our cake and eat

00:36:05,290 --> 00:36:08,410
it too right which in English is like

00:36:07,119 --> 00:36:11,290
the definition of something that you

00:36:08,410 --> 00:36:12,970
can't do we wanted it to be fast we're

00:36:11,290 --> 00:36:14,770
going to be like C++ but also like

00:36:12,970 --> 00:36:15,880
Haskell and like Java right and all

00:36:14,770 --> 00:36:17,859
these things it seemed like there were

00:36:15,880 --> 00:36:21,280
these inexorable trade-offs and we

00:36:17,859 --> 00:36:22,780
wanted to bridge them and you know we

00:36:21,280 --> 00:36:24,280
kind of did it but we did it only by

00:36:22,780 --> 00:36:27,700
drawing on all these different kinds of

00:36:24,280 --> 00:36:29,500
people and the other thing that's worth

00:36:27,700 --> 00:36:32,109
emphasizing is when I say drawing on

00:36:29,500 --> 00:36:33,880
these ideas it's not just people writing

00:36:32,109 --> 00:36:36,190
code or when we think about open source

00:36:33,880 --> 00:36:37,630
this is from the same blog post you

00:36:36,190 --> 00:36:39,430
often think of people writing code but

00:36:37,630 --> 00:36:41,829
actually there's a lot of skills that

00:36:39,430 --> 00:36:43,569
you need to build a language just to do

00:36:41,829 --> 00:36:45,160
the language design itself you don't

00:36:43,569 --> 00:36:46,839
want to give the language design to a

00:36:45,160 --> 00:36:49,480
bunch of type theorists I think that

00:36:46,839 --> 00:36:51,670
that's the worst thing you can do you do

00:36:49,480 --> 00:36:53,140
want them in the room but you don't want

00:36:51,670 --> 00:36:54,880
them in charge on all on their own

00:36:53,140 --> 00:36:58,030
because it won't be very usable you want

00:36:54,880 --> 00:36:59,680
also teachers and users and users from

00:36:58,030 --> 00:37:01,810
different backgrounds JavaScript people

00:36:59,680 --> 00:37:04,060
Russ or well yeah you probably want Russ

00:37:01,810 --> 00:37:06,490
people now back then I wouldn't say that

00:37:04,060 --> 00:37:07,630
C++ people and so on right and you also

00:37:06,490 --> 00:37:09,760
want people from different domains

00:37:07,630 --> 00:37:11,290
because you'll find that what seems like

00:37:09,760 --> 00:37:13,420
the perfect solution to you actually

00:37:11,290 --> 00:37:17,829
rules out the use case from somebody

00:37:13,420 --> 00:37:19,510
else's situation right and then I guess

00:37:17,829 --> 00:37:21,369
it goes a little past that too right not

00:37:19,510 --> 00:37:23,380
just language design but if we're gonna

00:37:21,369 --> 00:37:24,730
get people to use the language we have

00:37:23,380 --> 00:37:27,130
to teach it to them we have to write

00:37:24,730 --> 00:37:30,369
blog posts we have to look at bugs and

00:37:27,130 --> 00:37:31,569
we have to run conferences right so

00:37:30,369 --> 00:37:32,950
speaking of that I'd like to give a

00:37:31,569 --> 00:37:36,750
round of applause to the rustle of Tom

00:37:32,950 --> 00:37:36,750
organisers for making this happen

00:37:38,460 --> 00:37:46,180
and so a lot of times when I bring this

00:37:43,390 --> 00:37:48,249
up people say well that's great to have

00:37:46,180 --> 00:37:50,200
a lot of a lot of ideas and stuff but

00:37:48,249 --> 00:37:52,539
what about designed by committee all

00:37:50,200 --> 00:37:54,219
right what about the danger of like too

00:37:52,539 --> 00:37:56,079
many cooks in the kitchen there's all

00:37:54,219 --> 00:37:58,029
these great expressions for when you get

00:37:56,079 --> 00:38:00,190
too many people around and the design

00:37:58,029 --> 00:38:03,099
gets messed up and I I kind of see this

00:38:00,190 --> 00:38:05,109
as a complicated question like it's a

00:38:03,099 --> 00:38:06,849
real danger I drew this picture this is

00:38:05,109 --> 00:38:09,099
from The Odyssey if you if you've read

00:38:06,849 --> 00:38:11,710
it I'm Greek so I have to like include

00:38:09,099 --> 00:38:13,059
at least one Greek myth thing but this

00:38:11,710 --> 00:38:14,349
is the twin dangers that all these

00:38:13,059 --> 00:38:16,479
sayers had to face right there's this

00:38:14,349 --> 00:38:17,829
whirlpool and that's kind of maybe

00:38:16,479 --> 00:38:19,180
that's design by committee like there's

00:38:17,829 --> 00:38:20,829
a real risk that if you have too many

00:38:19,180 --> 00:38:22,450
ideas and you can't figure out how to

00:38:20,829 --> 00:38:24,130
put them together you'll just say let's

00:38:22,450 --> 00:38:26,739
just do it all and you'll end up with

00:38:24,130 --> 00:38:28,059
this complicated mess on the other hand

00:38:26,739 --> 00:38:30,880
I think there's this other danger that

00:38:28,059 --> 00:38:32,799
that is maybe represented by what could

00:38:30,880 --> 00:38:34,180
go wrong doesn't necessarily go wrong

00:38:32,799 --> 00:38:36,519
but what could go wrong with a like

00:38:34,180 --> 00:38:38,799
dictator for life kind of model which is

00:38:36,519 --> 00:38:40,630
that you can just ignore people's input

00:38:38,799 --> 00:38:42,309
or not seek it right and you don't know

00:38:40,630 --> 00:38:44,410
about what you don't know and you wind

00:38:42,309 --> 00:38:45,819
up with this system that's not able to

00:38:44,410 --> 00:38:47,920
really solve problems as well as it

00:38:45,819 --> 00:38:51,279
could and the trick is to somehow steer

00:38:47,920 --> 00:38:53,019
between these two get the input but not

00:38:51,279 --> 00:38:54,519
give in to the easy solution of do all

00:38:53,019 --> 00:38:56,559
the things but try to resolve it into

00:38:54,519 --> 00:38:58,299
something that is coherent but addresses

00:38:56,559 --> 00:38:59,829
all the use cases and if there's use

00:38:58,299 --> 00:39:01,989
cases you can't address then you should

00:38:59,829 --> 00:39:03,160
do that consciously right you can say

00:39:01,989 --> 00:39:06,569
well we're not going to handle that and

00:39:03,160 --> 00:39:09,430
we think that's okay because of X Y & Z

00:39:06,569 --> 00:39:11,680
so that's the trick it's not easy I

00:39:09,430 --> 00:39:14,109
think it's something that we're always

00:39:11,680 --> 00:39:17,799
working on doing better but I think it's

00:39:14,109 --> 00:39:21,430
the right way to go so that's the full

00:39:17,799 --> 00:39:24,759
puzzle I think of what what makes rust

00:39:21,430 --> 00:39:26,109
rust and now I hopefully am getting

00:39:24,759 --> 00:39:27,960
close to the end of my time more or less

00:39:26,109 --> 00:39:30,359
but I want to take the last few minutes

00:39:27,960 --> 00:39:35,559
to talk a little bit about the future

00:39:30,359 --> 00:39:37,299
about what I think is up for rust in the

00:39:35,559 --> 00:39:40,210
next year or two what are our big

00:39:37,299 --> 00:39:42,279
challenges coming up and I'm gonna start

00:39:40,210 --> 00:39:44,769
that by looking back at the past at this

00:39:42,279 --> 00:39:47,499
point that apparently is not 1.0 but I'm

00:39:44,769 --> 00:39:48,530
going to call it 1.0 and saying think

00:39:47,499 --> 00:39:50,780
about what if

00:39:48,530 --> 00:39:54,260
were here involved in rust think about

00:39:50,780 --> 00:39:56,960
what it was like in May of 2015 right we

00:39:54,260 --> 00:39:59,210
had a core language but that was kind of

00:39:56,960 --> 00:40:01,370
it we had a standard library that was

00:39:59,210 --> 00:40:03,950
like 90% unstable and not allowed to be

00:40:01,370 --> 00:40:06,050
used on our stable release channels we

00:40:03,950 --> 00:40:08,510
had a few we had you who are using it a

00:40:06,050 --> 00:40:09,440
tilde well and the two folks at tilde I

00:40:08,510 --> 00:40:11,290
don't know if we had any other

00:40:09,440 --> 00:40:16,760
production users maybe I can't remember

00:40:11,290 --> 00:40:18,170
but not if so not many and and we didn't

00:40:16,760 --> 00:40:21,890
have you know a lot of crates you can

00:40:18,170 --> 00:40:23,360
see that so in the meantime you know we

00:40:21,890 --> 00:40:25,550
did pretty good and I'm going to show

00:40:23,360 --> 00:40:27,560
this video of this crazy lady again who

00:40:25,550 --> 00:40:29,810
is so cool and I want you to look at her

00:40:27,560 --> 00:40:32,090
face when it when it ends because I

00:40:29,810 --> 00:40:36,290
think because I think that's kind of how

00:40:32,090 --> 00:40:41,530
we we should feel you know see if it

00:40:36,290 --> 00:40:44,210
loads yeah okay I like that it's like oh

00:40:41,530 --> 00:40:45,620
yes this is what we did you know and

00:40:44,210 --> 00:40:47,240
this is really cool

00:40:45,620 --> 00:40:49,820
oh I didn't mean to watch it again but

00:40:47,240 --> 00:40:51,920
that's okay but there was a downside to

00:40:49,820 --> 00:40:53,540
doing all of that right we were kind of

00:40:51,920 --> 00:40:55,930
like a startup right we had to prove

00:40:53,540 --> 00:40:59,300
that this rust thing could work at all

00:40:55,930 --> 00:41:00,710
and some there weren't that many of us

00:40:59,300 --> 00:41:02,030
has compared to how there is now and

00:41:00,710 --> 00:41:03,650
that meant you know if you had to get it

00:41:02,030 --> 00:41:05,090
done you got it done it didn't matter if

00:41:03,650 --> 00:41:08,390
you're doing a bunch of other things at

00:41:05,090 --> 00:41:11,270
the same time and since then I think

00:41:08,390 --> 00:41:13,430
we've gotten better we're like not doing

00:41:11,270 --> 00:41:15,680
50 things at one time we're doing like

00:41:13,430 --> 00:41:17,060
three and we kind of have a system for

00:41:15,680 --> 00:41:21,020
how to do it so it doesn't seem too

00:41:17,060 --> 00:41:23,090
crazy it almost works but the thing is

00:41:21,020 --> 00:41:24,800
that we're leaving that phase now right

00:41:23,090 --> 00:41:26,720
we've proven that rust can work and now

00:41:24,800 --> 00:41:28,910
we have to prove that we can handle like

00:41:26,720 --> 00:41:31,790
all the details and there's a lot of

00:41:28,910 --> 00:41:33,320
details I've got to make the compiler

00:41:31,790 --> 00:41:35,060
faster we've got to work on various

00:41:33,320 --> 00:41:37,100
aspects of the language design got to

00:41:35,060 --> 00:41:39,170
dig into different people's domains and

00:41:37,100 --> 00:41:40,670
use cases deeply and it's going to take

00:41:39,170 --> 00:41:42,400
a while for us to do that and we have to

00:41:40,670 --> 00:41:45,530
do that in a sustainable way that won't

00:41:42,400 --> 00:41:46,940
wear us out and I think an important

00:41:45,530 --> 00:41:49,220
part of it is we want to do all of that

00:41:46,940 --> 00:41:51,260
while retaining those aspects of the

00:41:49,220 --> 00:41:54,410
community that I was emphasizing while

00:41:51,260 --> 00:41:55,880
retaining this openness to ideas and to

00:41:54,410 --> 00:41:58,940
people and getting contributions from

00:41:55,880 --> 00:42:01,730
all kinds of people so in short I think

00:41:58,940 --> 00:42:05,300
we want to be like Obama like

00:42:01,730 --> 00:42:07,130
every way I like Obama but we we want to

00:42:05,300 --> 00:42:09,590
kind of just be able to have a system

00:42:07,130 --> 00:42:11,810
where we're like it's cool I got this

00:42:09,590 --> 00:42:13,040
you know this we have a system we know

00:42:11,810 --> 00:42:16,130
how to solve these problems we can

00:42:13,040 --> 00:42:18,080
address them and I think that's what we

00:42:16,130 --> 00:42:21,109
need to be focusing on most of all right

00:42:18,080 --> 00:42:23,600
now is kind of building and organizing

00:42:21,109 --> 00:42:25,660
all the things that we're doing and

00:42:23,600 --> 00:42:28,940
figuring out how we can do that best and

00:42:25,660 --> 00:42:30,650
in the process also doing of course the

00:42:28,940 --> 00:42:33,440
things we have to do and so that's

00:42:30,650 --> 00:42:35,240
that's what I'm personally spending a

00:42:33,440 --> 00:42:36,859
lot of time thinking about and I'm gonna

00:42:35,240 --> 00:42:39,530
talk a little bit about that not a whole

00:42:36,859 --> 00:42:41,060
lot but I think it's what we as a

00:42:39,530 --> 00:42:43,550
project kind of some of our biggest

00:42:41,060 --> 00:42:46,580
challenges so an example of this are

00:42:43,550 --> 00:42:48,920
part of how I think about this is right

00:42:46,580 --> 00:42:50,480
now we have a lot of things if you're

00:42:48,920 --> 00:42:52,400
working on the project there's a lot of

00:42:50,480 --> 00:42:54,619
state that's in people's heads right so

00:42:52,400 --> 00:42:56,540
if you want to know what but let's say

00:42:54,619 --> 00:42:57,920
the compiler teams look the rust the

00:42:56,540 --> 00:43:00,890
rust project has broken up into teams

00:42:57,920 --> 00:43:02,240
and these teams focus on different

00:43:00,890 --> 00:43:05,810
things and there's a team focused on the

00:43:02,240 --> 00:43:07,280
compiler and that team you know if you

00:43:05,810 --> 00:43:09,650
want to know what projects they're doing

00:43:07,280 --> 00:43:13,160
you kind of have to go ask around and

00:43:09,650 --> 00:43:15,980
people know but at least you did until

00:43:13,160 --> 00:43:17,210
recently and that was a kind of a

00:43:15,980 --> 00:43:18,410
problem because it meant that we had to

00:43:17,210 --> 00:43:19,490
keep that state in our heads and that

00:43:18,410 --> 00:43:21,619
was a bit of work that we were doing

00:43:19,490 --> 00:43:23,300
right and and if you wanted to get

00:43:21,619 --> 00:43:24,740
involved there was a sort of barrier to

00:43:23,300 --> 00:43:27,050
finding out what's going on and finding

00:43:24,740 --> 00:43:28,880
out how you can get involved so I found

00:43:27,050 --> 00:43:30,530
it useful or I find it useful to kind of

00:43:28,880 --> 00:43:31,970
step back from the project if you're

00:43:30,530 --> 00:43:33,530
heavily involved and think about what

00:43:31,970 --> 00:43:34,670
would it be like if I came to this and I

00:43:33,530 --> 00:43:38,300
didn't know anything

00:43:34,670 --> 00:43:39,740
what could I find out actually and so on

00:43:38,300 --> 00:43:41,960
the compiler team we've been working on

00:43:39,740 --> 00:43:43,100
this right we've been adding things we

00:43:41,960 --> 00:43:44,840
call working groups which are like

00:43:43,100 --> 00:43:47,990
groups of people focused on a particular

00:43:44,840 --> 00:43:50,180
project we have a repository where we

00:43:47,990 --> 00:43:51,770
list all the working groups and they

00:43:50,180 --> 00:43:53,300
have meetings and it tells you like oh

00:43:51,770 --> 00:43:55,160
if you want to get involved in building

00:43:53,300 --> 00:43:56,570
this feature that you think is cool come

00:43:55,160 --> 00:43:59,060
join this meeting at this time and we'll

00:43:56,570 --> 00:44:01,400
try to find you a job and we're working

00:43:59,060 --> 00:44:03,619
on adding more explicit mentorship

00:44:01,400 --> 00:44:05,660
pathways and levels so sometimes we

00:44:03,619 --> 00:44:07,220
would say now we have like official team

00:44:05,660 --> 00:44:09,320
members who are really knowledgeable and

00:44:07,220 --> 00:44:10,310
then everybody else right and we would

00:44:09,320 --> 00:44:12,020
like to have more levels in between

00:44:10,310 --> 00:44:15,290
saying this person has been contributing

00:44:12,020 --> 00:44:17,000
for a long time it can be an irregularly

00:44:15,290 --> 00:44:21,260
mid-level points to recognize the thing

00:44:17,000 --> 00:44:23,270
that they've been doing and one of the

00:44:21,260 --> 00:44:25,520
things I'm coming back to this quote we

00:44:23,270 --> 00:44:28,220
saw this quote already about how you

00:44:25,520 --> 00:44:29,570
need more than people writing code and

00:44:28,220 --> 00:44:30,980
one of the things I've seen from doing

00:44:29,570 --> 00:44:32,840
this work on the compiler team is that

00:44:30,980 --> 00:44:34,880
even in the compiler team which you

00:44:32,840 --> 00:44:37,400
would think of as like the co deist of

00:44:34,880 --> 00:44:39,050
coders or something there's actually a

00:44:37,400 --> 00:44:41,990
lot of roles that are not directly

00:44:39,050 --> 00:44:43,520
writing code that we really need and I

00:44:41,990 --> 00:44:44,900
think we should be speaking to people

00:44:43,520 --> 00:44:47,140
and encouraging people to get involved

00:44:44,900 --> 00:44:49,880
in these ways and it's it's things like

00:44:47,140 --> 00:44:52,040
organizing meetings it's things like

00:44:49,880 --> 00:44:53,750
testing out features triaging bugs

00:44:52,040 --> 00:44:55,150
bisecting bugs some of these roles we

00:44:53,750 --> 00:44:58,850
have ways to fill some of them we don't

00:44:55,150 --> 00:45:00,410
and I think what winds up happening the

00:44:58,850 --> 00:45:01,850
reason when I showed you those pictures

00:45:00,410 --> 00:45:05,330
of people doing a hundred things at once

00:45:01,850 --> 00:45:06,950
part of it a big part of it is stuff

00:45:05,330 --> 00:45:08,870
like this right is there are a few

00:45:06,950 --> 00:45:10,460
people who do a lot of this work and

00:45:08,870 --> 00:45:13,430
it's very tiring and we need to find

00:45:10,460 --> 00:45:15,410
better ways to distribute it out so that

00:45:13,430 --> 00:45:17,030
we can have people as Jessica Lord I'm

00:45:15,410 --> 00:45:18,230
just quoting you could just I'm just

00:45:17,030 --> 00:45:20,240
gonna put her whole post in this

00:45:18,230 --> 00:45:22,400
presentation about time it's done but as

00:45:20,240 --> 00:45:24,020
she said so that people who have only a

00:45:22,400 --> 00:45:26,600
little time actually what an open source

00:45:24,020 --> 00:45:28,550
whenever can come and do a little bit of

00:45:26,600 --> 00:45:30,440
each of these tasks right a little bit

00:45:28,550 --> 00:45:35,330
at a time and we can distribute that out

00:45:30,440 --> 00:45:37,120
and everyone works better so one thing I

00:45:35,330 --> 00:45:39,020
want to call attention to if any of this

00:45:37,120 --> 00:45:41,240
organizational thing of the idea of

00:45:39,020 --> 00:45:43,580
being a part of the rust organization

00:45:41,240 --> 00:45:45,080
itself appeals to you is we're starting

00:45:43,580 --> 00:45:47,120
up an effort we call the governance

00:45:45,080 --> 00:45:48,740
working group there was a recent

00:45:47,120 --> 00:45:51,230
announcement there's a link at the

00:45:48,740 --> 00:45:52,490
bottom that I'm assuming will people be

00:45:51,230 --> 00:45:54,830
able to access my slides they're all

00:45:52,490 --> 00:45:56,330
online you could click it there and or

00:45:54,830 --> 00:45:58,010
you can just search our internal message

00:45:56,330 --> 00:45:59,930
board but the point of this working

00:45:58,010 --> 00:46:01,670
group is you know the compiler team is

00:45:59,930 --> 00:46:03,620
doing some set of things other teams

00:46:01,670 --> 00:46:05,210
lots of them are doing other things and

00:46:03,620 --> 00:46:07,280
this working group is there to kind of

00:46:05,210 --> 00:46:08,990
talk to the different themes coordinate

00:46:07,280 --> 00:46:11,630
amongst them share ideas and help us

00:46:08,990 --> 00:46:14,750
design how the rust organization should

00:46:11,630 --> 00:46:16,700
be structured going forward so yeah if

00:46:14,750 --> 00:46:18,320
you're interested in that please let me

00:46:16,700 --> 00:46:22,670
know or come talk to me afterwards or

00:46:18,320 --> 00:46:24,320
Florian is here somewhere but anyway so

00:46:22,670 --> 00:46:25,820
that's what I got to say I hope you

00:46:24,320 --> 00:46:27,650
learned something and enjoyed it and

00:46:25,820 --> 00:46:29,130
thanks for listening and I'll leave you

00:46:27,650 --> 00:46:31,559
with these awesome picture

00:46:29,130 --> 00:46:33,570
the last set that I didn't know what

00:46:31,559 --> 00:46:36,780
else to do with thank you

00:46:33,570 --> 00:46:36,780
[Applause]

00:46:39,440 --> 00:46:45,780

YouTube URL: https://www.youtube.com/watch?v=jQOZX0xkrWA


