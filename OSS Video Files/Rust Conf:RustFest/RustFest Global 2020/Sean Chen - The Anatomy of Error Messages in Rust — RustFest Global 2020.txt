Title: Sean Chen - The Anatomy of Error Messages in Rust — RustFest Global 2020
Publication date: 2020-12-19
Playlist: RustFest Global 2020
Description: 
	How are Rust’s best-in-class error messages constructed? To figure that out, we’ll be digging through parts of rustc to uncover tidbits of this process. We’ll also take a high-level look at how some other programming languages construct error messages to compare and contrast these approaches.

More at https://rustfest.global/session/5-the-anatomy-of-error-messages-in-rust/
Captions: 
	00:00:04,000 --> 00:00:09,360
wants to show the appeal

00:00:06,080 --> 00:00:12,799
of nicely with errors to deal seeing

00:00:09,360 --> 00:00:13,759
rust sees example there really are ample

00:00:12,799 --> 00:00:17,920
suggestions

00:00:13,759 --> 00:00:17,920
you really should steal

00:00:19,439 --> 00:00:23,519
oh man those are great uh all right

00:00:22,400 --> 00:00:25,760
welcome everyone

00:00:23,519 --> 00:00:27,039
uh welcome to my talk uh titled the

00:00:25,760 --> 00:00:31,039
anatomy of

00:00:27,039 --> 00:00:32,719
rust error messages so again i know they

00:00:31,039 --> 00:00:35,440
gave a little bit of a recap for me but

00:00:32,719 --> 00:00:37,840
uh just to kind of reiterate a little

00:00:35,440 --> 00:00:39,760
a little bit about me uh i teach

00:00:37,840 --> 00:00:43,520
computer science for my day job

00:00:39,760 --> 00:00:46,320
uh over zoom so

00:00:43,520 --> 00:00:47,280
uh i guess i do this kind of thing a lot

00:00:46,320 --> 00:00:50,239
but anyways

00:00:47,280 --> 00:00:52,000
uh shameless plug i also produce a

00:00:50,239 --> 00:00:55,520
podcast called the humans of

00:00:52,000 --> 00:00:59,039
open source um

00:00:55,520 --> 00:01:00,160
where i talk to people who work in open

00:00:59,039 --> 00:01:02,879
source software i

00:01:00,160 --> 00:01:03,840
talk to a lot of people who express

00:01:02,879 --> 00:01:07,280
express

00:01:03,840 --> 00:01:08,720
especially who work in rust open source

00:01:07,280 --> 00:01:10,640
so if you're interested in kind of

00:01:08,720 --> 00:01:13,600
hearing any of those discussions

00:01:10,640 --> 00:01:14,000
a shameless plug for my podcast and then

00:01:13,600 --> 00:01:15,920
uh

00:01:14,000 --> 00:01:17,600
the last piece of kind of relevant

00:01:15,920 --> 00:01:20,000
information here is

00:01:17,600 --> 00:01:21,439
i co-shepherd the rust error handling

00:01:20,000 --> 00:01:23,840
working group

00:01:21,439 --> 00:01:25,439
uh where we basically work to kind of

00:01:23,840 --> 00:01:27,920
lobby and advocate

00:01:25,439 --> 00:01:29,520
for improving rust's error handling

00:01:27,920 --> 00:01:33,200
ecosystem

00:01:29,520 --> 00:01:36,720
and this last role was kind of

00:01:33,200 --> 00:01:39,200
uh what helped to

00:01:36,720 --> 00:01:40,799
pro pose this question for me

00:01:39,200 --> 00:01:42,720
specifically with

00:01:40,799 --> 00:01:44,479
uh well this question of like you know

00:01:42,720 --> 00:01:47,520
how are rust error messages

00:01:44,479 --> 00:01:50,720
so helpful right for me especially

00:01:47,520 --> 00:01:54,320
uh i don't think i would have stuck with

00:01:50,720 --> 00:01:56,240
rust as long as i have without

00:01:54,320 --> 00:01:58,159
rust's error messages being as kind of

00:01:56,240 --> 00:02:01,439
helpful and straightforward and

00:01:58,159 --> 00:02:04,240
unintimidating as they are

00:02:01,439 --> 00:02:05,670
so i think really these are rust's error

00:02:04,240 --> 00:02:07,280
messages are one of the

00:02:05,670 --> 00:02:09,280
[Music]

00:02:07,280 --> 00:02:11,120
i suppose one of its killer features

00:02:09,280 --> 00:02:11,520
even though sometimes i also think

00:02:11,120 --> 00:02:15,040
they're

00:02:11,520 --> 00:02:16,560
a little bit um uh

00:02:15,040 --> 00:02:19,280
that's what i'm looking for they're just

00:02:16,560 --> 00:02:22,560
not given as much credit as

00:02:19,280 --> 00:02:24,080
uh as usual or they're just not in the

00:02:22,560 --> 00:02:26,400
limelight as much i suppose

00:02:24,080 --> 00:02:28,319
and if i had to go ahead and kind of

00:02:26,400 --> 00:02:31,519
rank different programming languages

00:02:28,319 --> 00:02:34,879
kind of on a tier list of the quality

00:02:31,519 --> 00:02:35,519
of their error messages i'd probably go

00:02:34,879 --> 00:02:38,480
ahead

00:02:35,519 --> 00:02:39,840
and do it something like this where i

00:02:38,480 --> 00:02:42,319
would put rust in

00:02:39,840 --> 00:02:43,280
s tier and i think kind of the only

00:02:42,319 --> 00:02:46,000
other

00:02:43,280 --> 00:02:48,000
language that i would also say is kind

00:02:46,000 --> 00:02:51,120
of in the same class would be elm

00:02:48,000 --> 00:02:53,760
uh because i know elm also uh the

00:02:51,120 --> 00:02:55,599
community there also cares a lot about

00:02:53,760 --> 00:02:58,000
uh having their error messages be really

00:02:55,599 --> 00:03:00,159
helpful and and unintimidating

00:02:58,000 --> 00:03:01,040
and then kind of everything else going

00:03:00,159 --> 00:03:03,920
down

00:03:01,040 --> 00:03:06,959
uh something like this by the way uh

00:03:03,920 --> 00:03:10,239
this is just my opinion

00:03:06,959 --> 00:03:12,080
and uh i will also say one thing that

00:03:10,239 --> 00:03:13,840
i think i've gotten a lot of practice

00:03:12,080 --> 00:03:16,879
with teaching over zoom

00:03:13,840 --> 00:03:18,720
every day is i've gotten really good at

00:03:16,879 --> 00:03:21,280
imagining that my audience always laughs

00:03:18,720 --> 00:03:25,360
at my jokes

00:03:21,280 --> 00:03:27,840
so uh that being all said the norm here

00:03:25,360 --> 00:03:28,480
with error messages so here's an example

00:03:27,840 --> 00:03:32,159
of like a

00:03:28,480 --> 00:03:32,640
c plus error message but kind of the the

00:03:32,159 --> 00:03:35,760
norm

00:03:32,640 --> 00:03:37,920
with error messages for developers for

00:03:35,760 --> 00:03:38,799
programmers is like

00:03:37,920 --> 00:03:41,840
there's something that we have to

00:03:38,799 --> 00:03:43,680
decipher right like we have to kind of

00:03:41,840 --> 00:03:45,440
figure out how to read them i think a

00:03:43,680 --> 00:03:47,200
lot of us have

00:03:45,440 --> 00:03:49,120
gotten pretty good or i've gotten a lot

00:03:47,200 --> 00:03:51,040
of practice with running this kind of

00:03:49,120 --> 00:03:52,640
internal algorithm in our heads

00:03:51,040 --> 00:03:54,720
whenever we're encountering an error

00:03:52,640 --> 00:03:55,920
message right we have some set of steps

00:03:54,720 --> 00:03:57,760
that we follow to be like okay

00:03:55,920 --> 00:03:58,959
i have to decipher what this is actually

00:03:57,760 --> 00:04:02,159
saying

00:03:58,959 --> 00:04:05,040
um this is a little bit of a of uh

00:04:02,159 --> 00:04:06,000
i suppose an egregious example but you

00:04:05,040 --> 00:04:08,080
know it's not just

00:04:06,000 --> 00:04:09,439
c plus plus you see this in lots of

00:04:08,080 --> 00:04:12,239
other languages as well

00:04:09,439 --> 00:04:13,040
like here's a python example it's you

00:04:12,239 --> 00:04:16,320
know

00:04:13,040 --> 00:04:20,239
it doesn't exactly tell you

00:04:16,320 --> 00:04:21,440
uh straight up what the problem is

00:04:20,239 --> 00:04:23,440
right again you kind of have to look at

00:04:21,440 --> 00:04:28,080
this and try to figure out

00:04:23,440 --> 00:04:31,120
what the interpreter is telling you um

00:04:28,080 --> 00:04:32,240
and then of course uh in javascript i

00:04:31,120 --> 00:04:33,600
just want to bring this one up in

00:04:32,240 --> 00:04:36,160
particular because you get

00:04:33,600 --> 00:04:37,520
the infamous undefined is not a function

00:04:36,160 --> 00:04:40,800
error message that is

00:04:37,520 --> 00:04:43,360
so unhelpful um

00:04:40,800 --> 00:04:44,560
right so so the norm with a lot of error

00:04:43,360 --> 00:04:46,479
messages and a lot of different

00:04:44,560 --> 00:04:48,160
programming language ecosystems is just

00:04:46,479 --> 00:04:50,400
like

00:04:48,160 --> 00:04:51,840
they're they leave a lot to be desired

00:04:50,400 --> 00:04:54,720
right

00:04:51,840 --> 00:04:56,320
um and again as programmers we have to

00:04:54,720 --> 00:04:58,479
kind of learn to

00:04:56,320 --> 00:05:00,080
decipher them and especially for me as

00:04:58,479 --> 00:05:03,120
someone who teaches

00:05:00,080 --> 00:05:06,320
neophyte programmers you know like

00:05:03,120 --> 00:05:08,240
error messages are very intimidating for

00:05:06,320 --> 00:05:09,600
newcomers for people trying to get into

00:05:08,240 --> 00:05:10,000
programming for the first time and

00:05:09,600 --> 00:05:12,320
especially

00:05:10,000 --> 00:05:14,400
even for me i can remember when i first

00:05:12,320 --> 00:05:15,919
started to learn programming

00:05:14,400 --> 00:05:17,680
which was in javascript so that was kind

00:05:15,919 --> 00:05:18,720
of like my first language that i really

00:05:17,680 --> 00:05:21,039
tried to learn

00:05:18,720 --> 00:05:22,000
uh but when an error message popped up

00:05:21,039 --> 00:05:23,680
like i

00:05:22,000 --> 00:05:25,440
was just so intimidated that i wouldn't

00:05:23,680 --> 00:05:27,360
even i wouldn't even read it

00:05:25,440 --> 00:05:28,560
right i was just kind of like that

00:05:27,360 --> 00:05:29,759
overwhelmed by

00:05:28,560 --> 00:05:31,520
every time i saw an error message and

00:05:29,759 --> 00:05:32,800
i'd actually just go and like poke

00:05:31,520 --> 00:05:34,240
someone who i thought

00:05:32,800 --> 00:05:36,560
knew what they were doing and asked them

00:05:34,240 --> 00:05:37,120
like hey can you like decipher this for

00:05:36,560 --> 00:05:41,600
me because

00:05:37,120 --> 00:05:43,840
i'm too scared to read it um

00:05:41,600 --> 00:05:46,000
all this to say though it's not like you

00:05:43,840 --> 00:05:47,680
have perfect error messages in rust

00:05:46,000 --> 00:05:50,080
right here's a here's a rust example

00:05:47,680 --> 00:05:51,840
that's also a little bit obtuse

00:05:50,080 --> 00:05:53,120
i would say also leaves something to be

00:05:51,840 --> 00:05:56,319
desired

00:05:53,120 --> 00:05:56,960
um so obviously there's still work to be

00:05:56,319 --> 00:05:59,199
done

00:05:56,960 --> 00:06:00,080
in the rust ecosystem around rust error

00:05:59,199 --> 00:06:03,199
messages

00:06:00,080 --> 00:06:05,600
even in russia so um

00:06:03,199 --> 00:06:06,319
but that being said i think most of the

00:06:05,600 --> 00:06:08,319
time

00:06:06,319 --> 00:06:09,600
you're going to get something a little

00:06:08,319 --> 00:06:11,039
bit more seen

00:06:09,600 --> 00:06:12,720
a little bit more straightforward

00:06:11,039 --> 00:06:18,000
hopefully a little bit less

00:06:12,720 --> 00:06:18,000
uh intimidating where you know you

00:06:18,319 --> 00:06:21,600
uh where's very straightforward right

00:06:20,560 --> 00:06:23,120
and it paints

00:06:21,600 --> 00:06:24,800
a lot of helpful ascii art to tell you

00:06:23,120 --> 00:06:26,160
hey this is the offending line this is

00:06:24,800 --> 00:06:30,240
the location

00:06:26,160 --> 00:06:32,240
uh here's what i rusty think is wrong

00:06:30,240 --> 00:06:33,280
and usually there's a helpful hint to

00:06:32,240 --> 00:06:36,960
also tell you

00:06:33,280 --> 00:06:40,479
this might be a good suggested fix

00:06:36,960 --> 00:06:42,800
so the question that i

00:06:40,479 --> 00:06:43,680
kind of wanted to pose during this talk

00:06:42,800 --> 00:06:46,960
is

00:06:43,680 --> 00:06:48,240
this this delta between the best in

00:06:46,960 --> 00:06:51,599
class error messages

00:06:48,240 --> 00:06:54,000
and kind of everyone else i suppose is

00:06:51,599 --> 00:06:56,240
is this like is this a result of of

00:06:54,000 --> 00:06:58,000
culture within those ecosystems or is it

00:06:56,240 --> 00:07:00,240
a question of technology

00:06:58,000 --> 00:07:02,000
and i guess what i mean by that is is

00:07:00,240 --> 00:07:04,000
there just some

00:07:02,000 --> 00:07:06,160
crazy kind of like architecture or

00:07:04,000 --> 00:07:08,800
technology or algorithmic trick

00:07:06,160 --> 00:07:09,520
that is going on in like the rust

00:07:08,800 --> 00:07:12,560
compiler

00:07:09,520 --> 00:07:15,680
that makes these error messages

00:07:12,560 --> 00:07:17,759
possible or makes them easier to be

00:07:15,680 --> 00:07:20,319
you know created when something goes

00:07:17,759 --> 00:07:23,759
wrong in the compilation process

00:07:20,319 --> 00:07:25,680
uh inside of rust c uh

00:07:23,759 --> 00:07:28,240
so if you kind of buy this tycot this

00:07:25,680 --> 00:07:29,840
dichotomy that i'm presenting

00:07:28,240 --> 00:07:31,759
uh the nice thing from there is we can

00:07:29,840 --> 00:07:32,800
kind of go ahead and do a little bit of

00:07:31,759 --> 00:07:35,840
spelunking

00:07:32,800 --> 00:07:36,639
inside of rusty to kind of uncover by

00:07:35,840 --> 00:07:39,360
process of

00:07:36,639 --> 00:07:40,479
elimination like is this a question of

00:07:39,360 --> 00:07:44,240
technology

00:07:40,479 --> 00:07:46,240
or is it a question of culture so

00:07:44,240 --> 00:07:47,919
uh to start off if we can kind of

00:07:46,240 --> 00:07:50,080
distill down

00:07:47,919 --> 00:07:51,599
uh error messages into kind of this nice

00:07:50,080 --> 00:07:55,360
standard format

00:07:51,599 --> 00:07:57,680
where uh up at the top here you can see

00:07:55,360 --> 00:07:59,599
uh is what's called the level where it

00:07:57,680 --> 00:08:01,280
tells you is this an error or it could

00:07:59,599 --> 00:08:04,240
be a warning or it could be a lint

00:08:01,280 --> 00:08:04,720
for example uh you have the error code

00:08:04,240 --> 00:08:06,240
which is

00:08:04,720 --> 00:08:08,319
uh you might hear it called like the

00:08:06,240 --> 00:08:12,160
error index so there's

00:08:08,319 --> 00:08:15,520
like this nice error index documentation

00:08:12,160 --> 00:08:17,280
um kind of classifying uh the error by

00:08:15,520 --> 00:08:18,879
this index so you can go ahead and like

00:08:17,280 --> 00:08:20,960
take this error code

00:08:18,879 --> 00:08:22,479
if rusty gives it to you it doesn't give

00:08:20,960 --> 00:08:24,000
you an error code for every single error

00:08:22,479 --> 00:08:24,800
message but for the ones that it does

00:08:24,000 --> 00:08:26,960
give you

00:08:24,800 --> 00:08:29,120
you can go ahead and take that and

00:08:26,960 --> 00:08:31,520
basically look that up inside of the

00:08:29,120 --> 00:08:34,640
error index to get some more context

00:08:31,520 --> 00:08:36,800
some more information on

00:08:34,640 --> 00:08:37,760
this type of error that you're seeing

00:08:36,800 --> 00:08:40,240
then of course you have

00:08:37,760 --> 00:08:41,839
the main error message the location the

00:08:40,240 --> 00:08:45,440
code in question

00:08:41,839 --> 00:08:48,800
all the nice ascii art that's pointing

00:08:45,440 --> 00:08:51,279
straight at the code in question um

00:08:48,800 --> 00:08:52,880
and then notes as well as any sub

00:08:51,279 --> 00:08:55,760
diagnostics

00:08:52,880 --> 00:08:57,200
uh to try to be helpful and provide you

00:08:55,760 --> 00:08:58,080
with a little bit more context as to

00:08:57,200 --> 00:09:01,279
what

00:08:58,080 --> 00:09:02,560
uh what the error is in your code

00:09:01,279 --> 00:09:05,040
so there's this nice kind of standard

00:09:02,560 --> 00:09:06,880
format and kind of the

00:09:05,040 --> 00:09:08,080
the type or the structure that deals

00:09:06,880 --> 00:09:11,200
with this at the end of the day

00:09:08,080 --> 00:09:12,959
inside of rusty itself is um this

00:09:11,200 --> 00:09:14,320
diagnostic type

00:09:12,959 --> 00:09:16,160
and so again we can see there's like a

00:09:14,320 --> 00:09:19,680
nice kind of one-to-one mapping

00:09:16,160 --> 00:09:23,680
of everything we just saw in that

00:09:19,680 --> 00:09:26,720
kind of standard error message format

00:09:23,680 --> 00:09:28,480
um so uh the way

00:09:26,720 --> 00:09:30,720
error messages are kind of surfaced in

00:09:28,480 --> 00:09:33,200
russ c well first off we have to talk a

00:09:30,720 --> 00:09:35,440
little bit real quick about

00:09:33,200 --> 00:09:37,360
how rusty even compiles your code and

00:09:35,440 --> 00:09:39,600
actually runs it so there's

00:09:37,360 --> 00:09:40,800
actually multiple phases to when the

00:09:39,600 --> 00:09:43,680
rust compiler

00:09:40,800 --> 00:09:44,800
is running your code but first off is

00:09:43,680 --> 00:09:47,040
the parsing phase

00:09:44,800 --> 00:09:48,160
it takes your source code and needs to

00:09:47,040 --> 00:09:51,360
go ahead and parse that

00:09:48,160 --> 00:09:53,600
into some internal representation

00:09:51,360 --> 00:09:54,720
uh so that's called the parsing phase

00:09:53,600 --> 00:09:56,640
and uh

00:09:54,720 --> 00:09:57,839
there are certain types of errors that

00:09:56,640 --> 00:10:00,160
are caught

00:09:57,839 --> 00:10:03,200
within the parsing phase so we can go

00:10:00,160 --> 00:10:06,079
ahead and look at an example like this

00:10:03,200 --> 00:10:07,200
uh just trying to go ahead and collect

00:10:06,079 --> 00:10:10,240
some numbers

00:10:07,200 --> 00:10:11,760
into a vector of unsigned 32-bit

00:10:10,240 --> 00:10:13,680
integers

00:10:11,760 --> 00:10:15,279
and if you stare at this code hard

00:10:13,680 --> 00:10:18,399
enough you might realize

00:10:15,279 --> 00:10:20,320
oh we're uh we need a turbo fish or

00:10:18,399 --> 00:10:23,360
basically we didn't

00:10:20,320 --> 00:10:25,279
uh correctly write the the turbo fish

00:10:23,360 --> 00:10:26,560
in this case so when we're going ahead

00:10:25,279 --> 00:10:28,720
and collecting

00:10:26,560 --> 00:10:30,480
uh and we use a turbo fish to denote

00:10:28,720 --> 00:10:31,600
what kind of collection we want to

00:10:30,480 --> 00:10:34,240
collect into

00:10:31,600 --> 00:10:35,760
we would use a turbo fish to denote that

00:10:34,240 --> 00:10:38,800
and in this case we just

00:10:35,760 --> 00:10:42,079
didn't use the correct syntax and rust c

00:10:38,800 --> 00:10:44,800
uh tells us hey you forgot

00:10:42,079 --> 00:10:45,600
the the turbo fish uh my suggestion is

00:10:44,800 --> 00:10:49,120
to go ahead

00:10:45,600 --> 00:10:51,440
and add those um

00:10:49,120 --> 00:10:54,160
right so at the end of the day inside of

00:10:51,440 --> 00:10:56,399
the rust compiler there is

00:10:54,160 --> 00:10:57,839
functionality that specifically looks

00:10:56,399 --> 00:11:00,720
for this case

00:10:57,839 --> 00:11:01,920
and determines that if this is the case

00:11:00,720 --> 00:11:04,000
spits out this

00:11:01,920 --> 00:11:05,120
error message and determines that that

00:11:04,000 --> 00:11:08,240
is the most

00:11:05,120 --> 00:11:09,200
relevant error message to fix the code

00:11:08,240 --> 00:11:12,000
that

00:11:09,200 --> 00:11:13,600
you're trying to run and uh specifically

00:11:12,000 --> 00:11:15,360
in the case of this error message

00:11:13,600 --> 00:11:16,880
again it happens during the parsing

00:11:15,360 --> 00:11:18,800
phase uh

00:11:16,880 --> 00:11:21,440
and if we were to kind of follow that

00:11:18,800 --> 00:11:23,839
trail down into russia

00:11:21,440 --> 00:11:24,880
we can see that inside of this function

00:11:23,839 --> 00:11:27,120
that happens again

00:11:24,880 --> 00:11:28,560
during parsing this parse.suffix

00:11:27,120 --> 00:11:32,160
function

00:11:28,560 --> 00:11:33,920
down here we can see this function here

00:11:32,160 --> 00:11:37,279
that's called check turbo fish

00:11:33,920 --> 00:11:38,880
missing angle brackets so a plus naming

00:11:37,279 --> 00:11:41,360
there on the function

00:11:38,880 --> 00:11:43,839
and here is the actual body of the

00:11:41,360 --> 00:11:47,760
function itself and it's basically

00:11:43,839 --> 00:11:49,600
uh checking it basically tries to uh

00:11:47,760 --> 00:11:52,720
what it tries to do is actually it it

00:11:49,600 --> 00:11:54,720
assumes whatever is after the two colons

00:11:52,720 --> 00:11:56,560
of the collect it actually tries to

00:11:54,720 --> 00:11:59,839
parse that

00:11:56,560 --> 00:12:01,920
as a valid statement and if it sees that

00:11:59,839 --> 00:12:03,760
that is actually

00:12:01,920 --> 00:12:05,680
a correct expression or an expression

00:12:03,760 --> 00:12:06,800
that makes sense then it will go ahead

00:12:05,680 --> 00:12:09,839
and surface

00:12:06,800 --> 00:12:11,760
the error of oh this makes sense to me

00:12:09,839 --> 00:12:13,360
if i put in angle brackets so that's

00:12:11,760 --> 00:12:14,240
what the problem is you didn't put angle

00:12:13,360 --> 00:12:15,760
brackets in

00:12:14,240 --> 00:12:17,360
so i'm going to go ahead and suggest

00:12:15,760 --> 00:12:20,000
that you put those in

00:12:17,360 --> 00:12:21,040
uh it also this function also will

00:12:20,000 --> 00:12:24,480
specifically check

00:12:21,040 --> 00:12:28,240
for a extra leading

00:12:24,480 --> 00:12:30,320
angle bracket uh but interestingly

00:12:28,240 --> 00:12:32,000
it won't check for if you have an extra

00:12:30,320 --> 00:12:32,480
trailing angle bracket that actually

00:12:32,000 --> 00:12:35,600
then

00:12:32,480 --> 00:12:37,839
surfaces a different uh error message

00:12:35,600 --> 00:12:40,000
altogether

00:12:37,839 --> 00:12:42,399
so this is just kind of like one example

00:12:40,000 --> 00:12:46,160
of a type of error that's surfaced

00:12:42,399 --> 00:12:47,440
during parsing and uh the thing with

00:12:46,160 --> 00:12:49,440
when you're actually going ahead and

00:12:47,440 --> 00:12:50,560
parsing there's this one data structure

00:12:49,440 --> 00:12:52,399
that is

00:12:50,560 --> 00:12:54,079
responsible for the entire parsing phase

00:12:52,399 --> 00:12:56,959
which is called the parse session

00:12:54,079 --> 00:12:57,920
here and so we can see kind of up here

00:12:56,959 --> 00:13:00,480
at this type

00:12:57,920 --> 00:13:01,440
at the top of this type here the span

00:13:00,480 --> 00:13:03,279
diagnostic

00:13:01,440 --> 00:13:06,000
is what is kind of responsible for

00:13:03,279 --> 00:13:08,800
holding on to all of the different

00:13:06,000 --> 00:13:09,279
error messages or diagnostics i should

00:13:08,800 --> 00:13:12,160
say

00:13:09,279 --> 00:13:14,639
that crop up during the parsing session

00:13:12,160 --> 00:13:17,839
specifically

00:13:14,639 --> 00:13:21,120
uh other sorts of error messages

00:13:17,839 --> 00:13:24,079
that can crop up so i or i should say uh

00:13:21,120 --> 00:13:26,000
different phases of the compilation

00:13:24,079 --> 00:13:27,920
process where of course other errors

00:13:26,000 --> 00:13:30,160
other sorts of error messages can crop

00:13:27,920 --> 00:13:33,279
up right of course you have

00:13:30,160 --> 00:13:36,000
um one example here that we'll look at

00:13:33,279 --> 00:13:36,959
uh immutability right so there's a

00:13:36,000 --> 00:13:39,600
separate phase

00:13:36,959 --> 00:13:40,639
after parsing when rusty is running

00:13:39,600 --> 00:13:43,920
through your code

00:13:40,639 --> 00:13:47,120
that specifically checks for mutability

00:13:43,920 --> 00:13:50,079
so this actually happens during uh

00:13:47,120 --> 00:13:52,560
the phase where rusty is kind of like

00:13:50,079 --> 00:13:54,480
validating the borrow checker rules

00:13:52,560 --> 00:13:56,560
uh i'm not really sure why it makes

00:13:54,480 --> 00:13:58,000
sense that mutability is checked

00:13:56,560 --> 00:14:00,880
when it's checking the borrow checking

00:13:58,000 --> 00:14:04,560
rules but that's how it works

00:14:00,880 --> 00:14:06,079
so uh with something like this um

00:14:04,560 --> 00:14:08,000
we go ahead and initialize a string and

00:14:06,079 --> 00:14:10,800
then we go ahead and try to insert

00:14:08,000 --> 00:14:11,920
or basically mutate that string uh but

00:14:10,800 --> 00:14:13,760
we forgot to

00:14:11,920 --> 00:14:15,360
of course denote that the string is

00:14:13,760 --> 00:14:16,000
supposed to be mutable so we forgot the

00:14:15,360 --> 00:14:18,399
mute keyword

00:14:16,000 --> 00:14:19,519
here so then in this case uh that's

00:14:18,399 --> 00:14:22,560
exactly what

00:14:19,519 --> 00:14:25,120
rust c tells us so again there is

00:14:22,560 --> 00:14:27,519
of course a function inside of rust c

00:14:25,120 --> 00:14:31,199
that specifically handles this

00:14:27,519 --> 00:14:33,199
uh this error class and we can find

00:14:31,199 --> 00:14:34,240
that function here called report

00:14:33,199 --> 00:14:36,240
mutability error

00:14:34,240 --> 00:14:37,600
and again this happens during the borrow

00:14:36,240 --> 00:14:40,079
checking phase

00:14:37,600 --> 00:14:41,040
and uh i definitely could not take a

00:14:40,079 --> 00:14:42,639
screenshot of

00:14:41,040 --> 00:14:45,680
the entirety of this function it was

00:14:42,639 --> 00:14:48,880
something like 434 lines of code

00:14:45,680 --> 00:14:50,240
um so it was pretty big

00:14:48,880 --> 00:14:52,160
but of course during the borrowed

00:14:50,240 --> 00:14:53,120
checking phase as well it also checks

00:14:52,160 --> 00:14:56,800
for

00:14:53,120 --> 00:14:58,000
lifetimes and uh wants to ensure that

00:14:56,800 --> 00:15:00,560
you know you don't have dangling

00:14:58,000 --> 00:15:01,680
references uh and all that good stuff

00:15:00,560 --> 00:15:04,639
that the borrowed checker is

00:15:01,680 --> 00:15:05,839
is of course famous for and so an

00:15:04,639 --> 00:15:08,560
example like this

00:15:05,839 --> 00:15:11,360
we're going ahead and trying to uh push

00:15:08,560 --> 00:15:13,120
a couple of references to some vector

00:15:11,360 --> 00:15:15,040
but doing that inside of a closure where

00:15:13,120 --> 00:15:16,639
we go ahead and create those references

00:15:15,040 --> 00:15:19,440
and then pushing those references to

00:15:16,639 --> 00:15:22,320
this vector outside of our closure

00:15:19,440 --> 00:15:22,720
that's going to go ahead and yell at us

00:15:22,320 --> 00:15:24,480
for

00:15:22,720 --> 00:15:26,560
saying hey these references don't live

00:15:24,480 --> 00:15:30,000
long enough because they get dropped

00:15:26,560 --> 00:15:32,800
at the end of this closure and

00:15:30,000 --> 00:15:34,320
then this particular class of error then

00:15:32,800 --> 00:15:37,120
is handled by

00:15:34,320 --> 00:15:37,680
uh this function again with a plus

00:15:37,120 --> 00:15:39,040
naming

00:15:37,680 --> 00:15:41,120
called report borrowed value does not

00:15:39,040 --> 00:15:43,519
live long enough

00:15:41,120 --> 00:15:44,639
and so these two errors that we just

00:15:43,519 --> 00:15:46,320
looked at

00:15:44,639 --> 00:15:47,680
again there happened during the borrower

00:15:46,320 --> 00:15:49,519
checking phase

00:15:47,680 --> 00:15:51,040
uh which at the end of the day is kind

00:15:49,519 --> 00:15:53,759
of governed by

00:15:51,040 --> 00:15:54,399
this borrowed checker context struct

00:15:53,759 --> 00:15:56,320
which

00:15:54,399 --> 00:15:57,920
again is pretty big but we can see down

00:15:56,320 --> 00:15:59,920
here uh

00:15:57,920 --> 00:16:01,519
this errors buffer where it's basically

00:15:59,920 --> 00:16:04,000
holding on to

00:16:01,519 --> 00:16:07,199
all of the diagnostics that are created

00:16:04,000 --> 00:16:07,199
during this particular phase

00:16:07,360 --> 00:16:14,880
um so to step back a little bit

00:16:12,079 --> 00:16:15,920
and try to make sense of all of these

00:16:14,880 --> 00:16:18,240
different

00:16:15,920 --> 00:16:21,040
errors or uh different ways in which

00:16:18,240 --> 00:16:23,440
diagnostics are surfaced

00:16:21,040 --> 00:16:24,959
uh when i was doing research for this

00:16:23,440 --> 00:16:27,519
talk one thing that kind of

00:16:24,959 --> 00:16:29,519
kept one word that kept kind of cropping

00:16:27,519 --> 00:16:31,120
up into my head while i was

00:16:29,519 --> 00:16:32,560
looking through all the stuff and then

00:16:31,120 --> 00:16:33,680
having fun digging through russia but

00:16:32,560 --> 00:16:35,680
the thing that

00:16:33,680 --> 00:16:37,839
again cropped up in my mind the word

00:16:35,680 --> 00:16:39,360
that i would kind of attribute all this

00:16:37,839 --> 00:16:42,079
to

00:16:39,360 --> 00:16:42,959
uh is eagerness and so what i mean by

00:16:42,079 --> 00:16:46,079
that

00:16:42,959 --> 00:16:48,959
is uh well both we can look at this both

00:16:46,079 --> 00:16:50,399
in kind of the programming context as

00:16:48,959 --> 00:16:52,399
well as the more

00:16:50,399 --> 00:16:53,920
general context of what eagerness means

00:16:52,399 --> 00:16:56,800
right so if we think of

00:16:53,920 --> 00:16:58,079
eagerness in just a programming context

00:16:56,800 --> 00:16:59,279
right that's kind of like the opposite

00:16:58,079 --> 00:17:02,000
of laziness

00:16:59,279 --> 00:17:03,279
which is to say every chance we get to

00:17:02,000 --> 00:17:06,160
go ahead and do a thing

00:17:03,279 --> 00:17:07,839
we're gonna do it versus laziness beyond

00:17:06,160 --> 00:17:09,839
the opposite end of the spectrum

00:17:07,839 --> 00:17:11,039
where we're only going to do a thing at

00:17:09,839 --> 00:17:12,720
the last minute

00:17:11,039 --> 00:17:14,319
when we can no longer get away with not

00:17:12,720 --> 00:17:17,360
doing it anymore

00:17:14,319 --> 00:17:21,199
right so in the programming context

00:17:17,360 --> 00:17:22,880
uh eagerness is kind of showcased

00:17:21,199 --> 00:17:24,559
when diagnostics are constructed in

00:17:22,880 --> 00:17:27,199
russia

00:17:24,559 --> 00:17:28,799
because it turns out every time

00:17:27,199 --> 00:17:30,960
something could go wrong

00:17:28,799 --> 00:17:32,240
as in some kind of diagnostic can be

00:17:30,960 --> 00:17:33,520
created to address

00:17:32,240 --> 00:17:35,679
some error that's happening in the

00:17:33,520 --> 00:17:36,960
compilation process rusty will go ahead

00:17:35,679 --> 00:17:39,280
and do it

00:17:36,960 --> 00:17:42,160
and actually one of the methods on the

00:17:39,280 --> 00:17:44,320
diagnostic class is this cancel method

00:17:42,160 --> 00:17:46,559
and so what's actually going on is it's

00:17:44,320 --> 00:17:48,400
basically any chance it gets to

00:17:46,559 --> 00:17:50,880
start creating a diagnostic because it

00:17:48,400 --> 00:17:52,559
thinks something might be going wrong

00:17:50,880 --> 00:17:54,080
during the compilation process it'll go

00:17:52,559 --> 00:17:56,000
ahead and do it and then

00:17:54,080 --> 00:17:57,679
at the end of the day right rusty only

00:17:56,000 --> 00:18:00,240
wants to surface

00:17:57,679 --> 00:18:01,760
the relevant errors so when it's

00:18:00,240 --> 00:18:03,600
compiling your code it might see a bunch

00:18:01,760 --> 00:18:05,520
of errors that turn out to

00:18:03,600 --> 00:18:07,120
not actually be relevant to the error at

00:18:05,520 --> 00:18:07,760
hand and so it'll actually go ahead and

00:18:07,120 --> 00:18:11,520
cancel all

00:18:07,760 --> 00:18:13,360
those right and so we can then also

00:18:11,520 --> 00:18:15,280
think of that in the more general sense

00:18:13,360 --> 00:18:18,080
of what the word eagerness means

00:18:15,280 --> 00:18:20,640
which is well someone's you know wants

00:18:18,080 --> 00:18:23,360
to help you or someone is eager to

00:18:20,640 --> 00:18:24,400
lend you their support right and and

00:18:23,360 --> 00:18:27,200
that's exactly what

00:18:24,400 --> 00:18:28,400
this makes me think of right uh and so

00:18:27,200 --> 00:18:31,840
this goes back

00:18:28,400 --> 00:18:34,480
to this it speaks to again the question

00:18:31,840 --> 00:18:36,559
that we had coming into this talk which

00:18:34,480 --> 00:18:40,400
was was this culture or technology this

00:18:36,559 --> 00:18:43,679
to me really speaks about culture

00:18:40,400 --> 00:18:46,080
right rusty and the

00:18:43,679 --> 00:18:47,200
the developers who worked on rusty right

00:18:46,080 --> 00:18:50,400
they're all

00:18:47,200 --> 00:18:52,240
in that way eager to help you they're

00:18:50,400 --> 00:18:54,400
eager to

00:18:52,240 --> 00:18:56,080
uh provide helpful context provided

00:18:54,400 --> 00:18:58,240
hopeful errors

00:18:56,080 --> 00:18:59,679
uh to make your job your workflow as a

00:18:58,240 --> 00:19:02,480
developer easier

00:18:59,679 --> 00:19:03,840
right like if you're if you have to

00:19:02,480 --> 00:19:05,280
spend less time

00:19:03,840 --> 00:19:07,280
thinking about deciphering error

00:19:05,280 --> 00:19:08,400
messages that's more time that you can

00:19:07,280 --> 00:19:09,760
be productive on

00:19:08,400 --> 00:19:11,679
what you're actually the code you're

00:19:09,760 --> 00:19:13,520
actually writing right

00:19:11,679 --> 00:19:15,760
and so at the end of the day it's it's

00:19:13,520 --> 00:19:17,280
it is culture and technology

00:19:15,760 --> 00:19:19,039
i think technology takes a little bit of

00:19:17,280 --> 00:19:20,720
a back seat because really i think at

00:19:19,039 --> 00:19:22,720
the end of the day even though all this

00:19:20,720 --> 00:19:24,320
stuff that we saw when we were just

00:19:22,720 --> 00:19:25,840
going through all of these code examples

00:19:24,320 --> 00:19:29,360
like it is

00:19:25,840 --> 00:19:31,600
it is cool and it's it's

00:19:29,360 --> 00:19:32,799
probably ingenious in a sense but at the

00:19:31,600 --> 00:19:36,400
end of the day i don't think

00:19:32,799 --> 00:19:38,720
it is more complex

00:19:36,400 --> 00:19:39,600
or more crazy or more ingenious than

00:19:38,720 --> 00:19:42,480
anything else

00:19:39,600 --> 00:19:44,160
inside of russia at the end of the day

00:19:42,480 --> 00:19:46,320
so in my mind

00:19:44,160 --> 00:19:48,480
it really is a question of culture more

00:19:46,320 --> 00:19:52,559
specifically i think the culture

00:19:48,480 --> 00:19:55,840
of the community is what informs

00:19:52,559 --> 00:19:58,400
the technology that we have going on

00:19:55,840 --> 00:19:58,400
in this case

00:19:59,520 --> 00:20:03,120
and it's been really interesting as well

00:20:01,840 --> 00:20:05,679
seeing some other research

00:20:03,120 --> 00:20:07,840
specifically around kind of like culture

00:20:05,679 --> 00:20:09,919
and error messages and how

00:20:07,840 --> 00:20:11,039
uh the two kind of have this feedback

00:20:09,919 --> 00:20:12,880
loop so

00:20:11,039 --> 00:20:15,280
one thing i actually found interesting

00:20:12,880 --> 00:20:18,159
was a research paper

00:20:15,280 --> 00:20:19,600
done in 2011 by some researchers who

00:20:18,159 --> 00:20:21,919
looked at

00:20:19,600 --> 00:20:24,640
uh racket so they actually well i should

00:20:21,919 --> 00:20:27,039
say they um

00:20:24,640 --> 00:20:29,440
they did a bunch of research on students

00:20:27,039 --> 00:20:32,559
looking into

00:20:29,440 --> 00:20:33,520
what is uh how helpful better error

00:20:32,559 --> 00:20:36,960
messages are

00:20:33,520 --> 00:20:39,360
basically and again the takeaway there

00:20:36,960 --> 00:20:41,520
no surprise really but you know better

00:20:39,360 --> 00:20:43,600
error messages led to

00:20:41,520 --> 00:20:45,440
a better learning experience and a

00:20:43,600 --> 00:20:48,000
smoother learning curve

00:20:45,440 --> 00:20:50,000
for students new students getting into

00:20:48,000 --> 00:20:53,679
programming

00:20:50,000 --> 00:20:55,280
in this case um and so

00:20:53,679 --> 00:20:56,880
you know this was done in 2011 but i

00:20:55,280 --> 00:20:58,559
think really the takeaway of this

00:20:56,880 --> 00:21:02,080
particular

00:20:58,559 --> 00:21:03,039
uh research was well you know it's it's

00:21:02,080 --> 00:21:05,520
not a question

00:21:03,039 --> 00:21:07,039
of technology the technology is all

00:21:05,520 --> 00:21:09,200
there to actually make it happen

00:21:07,039 --> 00:21:10,559
really i i think it is just a question

00:21:09,200 --> 00:21:13,919
of

00:21:10,559 --> 00:21:17,120
increasing the priority of

00:21:13,919 --> 00:21:20,159
or or you know

00:21:17,120 --> 00:21:21,280
yeah basically making error messages a

00:21:20,159 --> 00:21:23,840
higher priority

00:21:21,280 --> 00:21:25,200
in your language ecosystem at the end of

00:21:23,840 --> 00:21:28,480
the day and and rust

00:21:25,200 --> 00:21:30,240
early on definitely made that a priority

00:21:28,480 --> 00:21:33,440
and made that a very

00:21:30,240 --> 00:21:36,159
uh as a very conscious choice

00:21:33,440 --> 00:21:38,400
on the part of the early rust core

00:21:36,159 --> 00:21:42,080
developers

00:21:38,400 --> 00:21:46,000
um to go ahead and look at some

00:21:42,080 --> 00:21:49,280
other languages uh here's a blog post

00:21:46,000 --> 00:21:50,720
that the creator of elm again

00:21:49,280 --> 00:21:52,559
kind of the other programming language

00:21:50,720 --> 00:21:55,600
that i would consider to have

00:21:52,559 --> 00:21:59,440
uh s-t or error messages uh so evan

00:21:55,600 --> 00:22:00,640
wrote a very uh thorough and and useful

00:21:59,440 --> 00:22:02,080
blog post

00:22:00,640 --> 00:22:05,039
specifically on the same thing but kind

00:22:02,080 --> 00:22:06,400
of again in a rough in elm context

00:22:05,039 --> 00:22:07,840
and the thing that i found really

00:22:06,400 --> 00:22:09,200
interesting from this particular blog

00:22:07,840 --> 00:22:11,200
post is that he says

00:22:09,200 --> 00:22:12,480
i recently took a couple of weeks to

00:22:11,200 --> 00:22:15,200
really focus on this

00:22:12,480 --> 00:22:16,559
this being improving the error messages

00:22:15,200 --> 00:22:19,520
in in elm

00:22:16,559 --> 00:22:20,559
and so you know he took a couple of

00:22:19,520 --> 00:22:23,200
weeks

00:22:20,559 --> 00:22:24,720
which is to say like it like yeah it is

00:22:23,200 --> 00:22:26,799
a time investment but

00:22:24,720 --> 00:22:27,840
it wasn't like an exorbitant time

00:22:26,799 --> 00:22:30,960
investment

00:22:27,840 --> 00:22:32,559
and uh you know really sat down

00:22:30,960 --> 00:22:34,240
and deliberately thought about how can

00:22:32,559 --> 00:22:37,200
we make error messages in

00:22:34,240 --> 00:22:37,840
elm you know really really good really

00:22:37,200 --> 00:22:39,840
helpful

00:22:37,840 --> 00:22:41,360
if you've never seen an error message

00:22:39,840 --> 00:22:44,000
before it is

00:22:41,360 --> 00:22:45,840
uh in format pretty similar i would say

00:22:44,000 --> 00:22:47,360
to to rust error messages they have

00:22:45,840 --> 00:22:48,640
ascii art in there as well and they

00:22:47,360 --> 00:22:50,720
color code

00:22:48,640 --> 00:22:51,679
uh the error messages again to just

00:22:50,720 --> 00:22:55,039
really make it as

00:22:51,679 --> 00:22:57,840
straightforward and unintimidating

00:22:55,039 --> 00:22:58,880
as possible really right and that's at

00:22:57,840 --> 00:23:02,000
the end of the day

00:22:58,880 --> 00:23:04,240
uh doing that really helps

00:23:02,000 --> 00:23:05,919
uh new people trying to get into your

00:23:04,240 --> 00:23:09,360
language but at the same time it's also

00:23:05,919 --> 00:23:11,039
i would say really useful for

00:23:09,360 --> 00:23:12,159
uh even seasoned developers working in

00:23:11,039 --> 00:23:13,840
your language right because again it

00:23:12,159 --> 00:23:15,440
just like lowers that overhead that

00:23:13,840 --> 00:23:17,360
mental overhead

00:23:15,440 --> 00:23:19,520
of when you encounter an error message

00:23:17,360 --> 00:23:21,200
you don't have to go through all of the

00:23:19,520 --> 00:23:22,559
that mental algorithm to go ahead and

00:23:21,200 --> 00:23:24,000
decipher

00:23:22,559 --> 00:23:25,520
what that error message is saying it's

00:23:24,000 --> 00:23:26,799
kind of just right there and you can

00:23:25,520 --> 00:23:29,600
just kind of address it

00:23:26,799 --> 00:23:31,039
and go on with your day it's you know

00:23:29,600 --> 00:23:32,320
super great makes for a much better

00:23:31,039 --> 00:23:36,080
workflow i think

00:23:32,320 --> 00:23:38,320
um some other languages i'll also

00:23:36,080 --> 00:23:39,600
quickly mention like uh swift and also

00:23:38,320 --> 00:23:42,400
typescript

00:23:39,600 --> 00:23:43,840
um these languages are doing some

00:23:42,400 --> 00:23:45,840
interesting things as well

00:23:43,840 --> 00:23:47,679
uh they're i would say taking a slightly

00:23:45,840 --> 00:23:50,720
different approach but that's

00:23:47,679 --> 00:23:51,279
mostly because swift and typescript both

00:23:50,720 --> 00:23:54,720
have

00:23:51,279 --> 00:23:58,159
really nice integrations with ides

00:23:54,720 --> 00:24:00,880
so you know swift with uh

00:23:58,159 --> 00:24:02,559
xcode and typescript with vs code

00:24:00,880 --> 00:24:03,600
there's some really cool ide stuff that

00:24:02,559 --> 00:24:04,480
they can do there so that's kind of

00:24:03,600 --> 00:24:08,080
another

00:24:04,480 --> 00:24:11,279
really nice and streamlined way to

00:24:08,080 --> 00:24:12,559
surface error messages so i think uh i

00:24:11,279 --> 00:24:15,440
think i've ranked these

00:24:12,559 --> 00:24:16,960
in in the a tier in my uh in my tier

00:24:15,440 --> 00:24:18,320
list and i think you know these two

00:24:16,960 --> 00:24:22,320
languages in particular

00:24:18,320 --> 00:24:23,200
are uh doing i would say they also have

00:24:22,320 --> 00:24:26,400
kind of embraced

00:24:23,200 --> 00:24:28,000
this um this notion of

00:24:26,400 --> 00:24:29,440
improving the culture around error

00:24:28,000 --> 00:24:30,320
messages and are doing some cool things

00:24:29,440 --> 00:24:32,240
there as well

00:24:30,320 --> 00:24:35,039
but ultimately you know i think it would

00:24:32,240 --> 00:24:36,960
be super great as this culture

00:24:35,039 --> 00:24:39,600
of just trying to be more helpful to

00:24:36,960 --> 00:24:41,520
developers trying to be more helpful to

00:24:39,600 --> 00:24:43,200
new learners of a programming language

00:24:41,520 --> 00:24:44,720
as that culture kind of like makes its

00:24:43,200 --> 00:24:47,279
way into other

00:24:44,720 --> 00:24:48,000
uh language ecosystems as well hopefully

00:24:47,279 --> 00:24:49,440
eventually

00:24:48,000 --> 00:24:52,240
we'll get to a point where we have

00:24:49,440 --> 00:24:54,640
something that looks more like this

00:24:52,240 --> 00:24:55,279
and uh overall at the end of the day i

00:24:54,640 --> 00:25:00,640
think

00:24:55,279 --> 00:25:03,600
that would be super great for everybody

00:25:00,640 --> 00:25:05,600
and yeah uh that's my talk uh i hope you

00:25:03,600 --> 00:25:08,480
found that insightful

00:25:05,600 --> 00:25:09,120
and uh just some references as well in

00:25:08,480 --> 00:25:10,799
case

00:25:09,120 --> 00:25:12,480
uh so like the paper that i talked about

00:25:10,799 --> 00:25:16,400
is here as well as

00:25:12,480 --> 00:25:17,279
uh um evan's blog post that i mentioned

00:25:16,400 --> 00:25:19,520
as well as

00:25:17,279 --> 00:25:20,960
the rusty dev guide up at the top uh

00:25:19,520 --> 00:25:23,200
that was definitely

00:25:20,960 --> 00:25:24,799
probably the most helpful resource when

00:25:23,200 --> 00:25:29,840
i was doing research

00:25:24,799 --> 00:25:29,840
into into all of this

00:25:32,240 --> 00:25:35,600
great thank you sean yeah uh quick

00:25:35,120 --> 00:25:37,200
question

00:25:35,600 --> 00:25:39,120
is there anything you would change about

00:25:37,200 --> 00:25:40,240
rust's uh diagnostics interface

00:25:39,120 --> 00:25:45,440
diagnostics like

00:25:40,240 --> 00:25:45,440
with capital b um

00:25:45,919 --> 00:25:52,080
i i i would say

00:25:49,360 --> 00:25:52,960
i think at this point with kind of uh

00:25:52,080 --> 00:25:55,520
the format

00:25:52,960 --> 00:25:56,159
that it has it presents in the terminal

00:25:55,520 --> 00:25:59,279
right

00:25:56,159 --> 00:26:00,559
like i think that's probably the best

00:25:59,279 --> 00:26:02,320
you can do there

00:26:00,559 --> 00:26:04,320
uh some interesting conversations i've

00:26:02,320 --> 00:26:07,120
had with people who

00:26:04,320 --> 00:26:07,760
work on this more i know they've had

00:26:07,120 --> 00:26:09,760
some

00:26:07,760 --> 00:26:11,120
pretty cool ideas such as like if hey if

00:26:09,760 --> 00:26:14,320
we had better

00:26:11,120 --> 00:26:16,320
integrations into some kind of ide

00:26:14,320 --> 00:26:17,760
uh then we'd be able to do some of the

00:26:16,320 --> 00:26:19,200
things that swift and type

00:26:17,760 --> 00:26:21,039
typescript are also doing so that would

00:26:19,200 --> 00:26:22,480
be really cool i don't know if rust

00:26:21,039 --> 00:26:24,159
analyzer is working on some of that

00:26:22,480 --> 00:26:26,960
stuff but that would be great

00:26:24,159 --> 00:26:27,279
um but yeah it's been interesting as

00:26:26,960 --> 00:26:29,679
well

00:26:27,279 --> 00:26:31,919
seeing uh if you actually go back and

00:26:29,679 --> 00:26:32,640
look at some of the earlier pull

00:26:31,919 --> 00:26:34,640
requests

00:26:32,640 --> 00:26:36,840
for how to kind of improve rust's error

00:26:34,640 --> 00:26:39,279
messages so like

00:26:36,840 --> 00:26:40,880
uh

00:26:39,279 --> 00:26:42,400
i'm just i was thinking of some names

00:26:40,880 --> 00:26:45,039
and i totally blanking but anyways

00:26:42,400 --> 00:26:45,919
sorry um yeah like uh there have been

00:26:45,039 --> 00:26:49,039
some pretty

00:26:45,919 --> 00:26:50,880
interesting ideas uh that people

00:26:49,039 --> 00:26:52,000
contributors to rust have kind of

00:26:50,880 --> 00:26:54,720
thought of before for

00:26:52,000 --> 00:26:55,440
how to go ahead and improve error

00:26:54,720 --> 00:26:57,120
handling

00:26:55,440 --> 00:27:00,320
or uh air handling and rusty

00:26:57,120 --> 00:27:00,320
specifically like um

00:27:00,720 --> 00:27:03,840
yeah i can i can name any off the top of

00:27:02,400 --> 00:27:04,720
my head right now but uh there's been

00:27:03,840 --> 00:27:06,400
some

00:27:04,720 --> 00:27:08,559
really interesting ideas there some of

00:27:06,400 --> 00:27:10,559
them i think uh didn't actually end up

00:27:08,559 --> 00:27:13,840
gaining traction unfortunately

00:27:10,559 --> 00:27:15,600
but uh but yeah what about um

00:27:13,840 --> 00:27:17,440
any missing error messages you'd like to

00:27:15,600 --> 00:27:20,240
see either

00:27:17,440 --> 00:27:22,080
russia or clippy or or maybe uplifted

00:27:20,240 --> 00:27:23,919
from clippy to rusty

00:27:22,080 --> 00:27:26,559
like for example the recent c stream

00:27:23,919 --> 00:27:26,559
pointer lint

00:27:27,760 --> 00:27:30,240
um

00:27:31,840 --> 00:27:36,720
yeah that's that's a little bit that's a

00:27:34,880 --> 00:27:39,520
little hard for me to say to be honest

00:27:36,720 --> 00:27:40,559
especially the point about clippy

00:27:39,520 --> 00:27:43,039
because

00:27:40,559 --> 00:27:44,720
even though i think it would be

00:27:43,039 --> 00:27:47,279
interesting to

00:27:44,720 --> 00:27:48,000
kind of like fold clippy into rust c at

00:27:47,279 --> 00:27:49,840
the same time i

00:27:48,000 --> 00:27:51,520
do also know there's this very

00:27:49,840 --> 00:27:54,240
deliberate

00:27:51,520 --> 00:27:54,640
uh there's a very deliberate thing where

00:27:54,240 --> 00:27:58,240
you know

00:27:54,640 --> 00:28:01,279
a lot of where the philosophy of rust is

00:27:58,240 --> 00:28:02,080
just like we want most things to be in

00:28:01,279 --> 00:28:04,159
libraries

00:28:02,080 --> 00:28:05,520
and not folded directly into the

00:28:04,159 --> 00:28:10,240
standard library

00:28:05,520 --> 00:28:14,080
or folded into the compiler itself so um

00:28:10,240 --> 00:28:15,760
yeah i i think i would think

00:28:14,080 --> 00:28:17,200
the current way it's done right now with

00:28:15,760 --> 00:28:19,679
clippy is

00:28:17,200 --> 00:28:20,720
probably what adheres to that philosophy

00:28:19,679 --> 00:28:24,720
the best

00:28:20,720 --> 00:28:26,960
in this case do you feel that um

00:28:24,720 --> 00:28:28,399
the design decisions of rust with

00:28:26,960 --> 00:28:30,720
respect to error

00:28:28,399 --> 00:28:31,840
locality helps the messages compared to

00:28:30,720 --> 00:28:34,240
for example another language like

00:28:31,840 --> 00:28:38,880
typescript

00:28:34,240 --> 00:28:41,600
yeah i i think so i would think so

00:28:38,880 --> 00:28:42,240
i'm sorry to say on that and last

00:28:41,600 --> 00:28:46,000
question

00:28:42,240 --> 00:28:48,399
um one second i had it around here

00:28:46,000 --> 00:28:48,399
somewhere

00:28:50,399 --> 00:28:54,480
if there were one area of improvement uh

00:28:52,960 --> 00:28:59,840
when it comes to compiler diagnostics

00:28:54,480 --> 00:28:59,840
and rust uh what would that be

00:29:01,600 --> 00:29:06,799
as far as compiler diagnostics

00:29:04,720 --> 00:29:08,320
i think again i feel like those are

00:29:06,799 --> 00:29:10,960
mostly in a pretty good place

00:29:08,320 --> 00:29:12,880
and i say that because i know there are

00:29:10,960 --> 00:29:16,000
there's concerted effort

00:29:12,880 --> 00:29:18,159
that continually goes into working on

00:29:16,000 --> 00:29:18,880
those i think maybe where it would be a

00:29:18,159 --> 00:29:22,240
better

00:29:18,880 --> 00:29:25,520
or uh uh more helpful would actually be

00:29:22,240 --> 00:29:28,799
to devote more time and attention to

00:29:25,520 --> 00:29:31,039
error messages in libraries um

00:29:28,799 --> 00:29:32,240
and so actually some of the stuff that

00:29:31,039 --> 00:29:34,559
um

00:29:32,240 --> 00:29:36,080
that we do on the the the rust error

00:29:34,559 --> 00:29:37,520
handling working group is kind of more

00:29:36,080 --> 00:29:40,799
targeting that specifically

00:29:37,520 --> 00:29:43,600
like uh disseminating this culture of

00:29:40,799 --> 00:29:44,960
improving error messages to to outside

00:29:43,600 --> 00:29:47,039
rusty because again i think

00:29:44,960 --> 00:29:48,480
even though this was a really cool kind

00:29:47,039 --> 00:29:50,000
of spelunking tour

00:29:48,480 --> 00:29:52,159
for the most part i think i don't worry

00:29:50,000 --> 00:29:54,320
too much about the state of

00:29:52,159 --> 00:29:56,480
air handling in rusty itself i think you

00:29:54,320 --> 00:29:59,039
know again people really care about that

00:29:56,480 --> 00:29:59,760
in the core team and so i think that's

00:29:59,039 --> 00:30:03,279
uh probably

00:29:59,760 --> 00:30:05,039
as good a spot as it's going to get cool

00:30:03,279 --> 00:30:06,559
all right then thank you so much for

00:30:05,039 --> 00:30:09,760
your talk and your answers

00:30:06,559 --> 00:30:13,520
um it's really interesting um

00:30:09,760 --> 00:30:14,640
so yeah yeah thank you so much and uh

00:30:13,520 --> 00:30:17,200
yeah thanks so much

00:30:14,640 --> 00:30:17,760
to everyone who put on this wonderful

00:30:17,200 --> 00:30:19,120
conference

00:30:17,760 --> 00:30:22,399
and uh giving me the opportunity to give

00:30:19,120 --> 00:30:33,600
this talk it's great

00:30:22,399 --> 00:30:33,600

YouTube URL: https://www.youtube.com/watch?v=oMskswu1SxM


