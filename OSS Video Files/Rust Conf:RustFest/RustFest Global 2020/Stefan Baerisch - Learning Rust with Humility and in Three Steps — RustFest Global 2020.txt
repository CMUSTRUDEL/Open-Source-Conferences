Title: Stefan Baerisch - Learning Rust with Humility and in Three Steps â€” RustFest Global 2020
Publication date: 2020-12-19
Playlist: RustFest Global 2020
Description: 
	When learning Rust, it is tempting to use advanced features and crates right away. But this can be overwhelming and lead to frustration. In this talk, you will get hints on how to learn Rust step by step, using a careful, structured approach and some confident humility.

For more details and resources, check out:
https://rustfest.global/session/24-learning-rust-with-humility-and-in-three-steps/
Captions: 
	00:00:02,639 --> 00:00:07,279
stefan gives us

00:00:04,080 --> 00:00:09,040
three steps to learn rust not saying

00:00:07,279 --> 00:00:12,000
that follow you must

00:00:09,040 --> 00:00:12,320
but if humble you are with rust you'll

00:00:12,000 --> 00:00:17,920
go

00:00:12,320 --> 00:00:17,920
far as you learn the compiler to trust

00:00:18,080 --> 00:00:20,480
okay

00:00:24,720 --> 00:00:29,199
so can you hear me now just cause your

00:00:27,760 --> 00:00:32,640
feedback because we had some

00:00:29,199 --> 00:00:34,079
possibilities yes okay um you mind

00:00:32,640 --> 00:00:38,079
restarting quickly

00:00:34,079 --> 00:00:39,440
yeah sure sorry for that

00:00:38,079 --> 00:00:41,120
but well you see there's always

00:00:39,440 --> 00:00:42,719
something more to learn if it's only the

00:00:41,120 --> 00:00:45,840
mute button

00:00:42,719 --> 00:00:50,960
okay rust with mule team in three

00:00:45,840 --> 00:00:53,520
easy ideas so what i tried to do

00:00:50,960 --> 00:00:55,039
learning west was to write little

00:00:53,520 --> 00:00:57,840
desktop applications because

00:00:55,039 --> 00:00:58,800
honestly i like desktop applications and

00:00:57,840 --> 00:01:02,079
i didn't start out

00:00:58,800 --> 00:01:04,960
which was directly but i went through

00:01:02,079 --> 00:01:07,040
well different technologies which gave

00:01:04,960 --> 00:01:10,080
me the opportunity to

00:01:07,040 --> 00:01:12,400
well see how

00:01:10,080 --> 00:01:14,000
what made it difficult to learn

00:01:12,400 --> 00:01:16,479
different things

00:01:14,000 --> 00:01:18,320
and so the first idea learning rest is

00:01:16,479 --> 00:01:20,880
or learning anything really is

00:01:18,320 --> 00:01:22,080
why do you think it might be hard why do

00:01:20,880 --> 00:01:25,360
you feel it's hard

00:01:22,080 --> 00:01:28,000
know your challenge so

00:01:25,360 --> 00:01:29,360
the background was basically i had to

00:01:28,000 --> 00:01:31,200
write my desktop application i

00:01:29,360 --> 00:01:32,560
choose a desktop framework i started us

00:01:31,200 --> 00:01:34,799
with qt

00:01:32,560 --> 00:01:36,479
qt is a c plus plus framework and it's

00:01:34,799 --> 00:01:39,840
rather big

00:01:36,479 --> 00:01:42,640
so i had to learn or refresh a lot of c

00:01:39,840 --> 00:01:43,920
plus plus which is tricky and i had to

00:01:42,640 --> 00:01:46,640
learn

00:01:43,920 --> 00:01:48,159
cute which is extremely large as the

00:01:46,640 --> 00:01:50,159
framework goes

00:01:48,159 --> 00:01:52,320
and i also had to deal with quite a lot

00:01:50,159 --> 00:01:55,200
of surprises so i had to learn

00:01:52,320 --> 00:01:56,399
a build system and i had to learn how

00:01:55,200 --> 00:01:57,600
different compilers and different

00:01:56,399 --> 00:02:01,520
platforms worked and

00:01:57,600 --> 00:02:03,920
that took a lot of time next attempt

00:02:01,520 --> 00:02:05,280
was to switch over to web technology and

00:02:03,920 --> 00:02:08,080
electron

00:02:05,280 --> 00:02:08,560
which was not hard to learn but again

00:02:08,080 --> 00:02:11,599
was

00:02:08,560 --> 00:02:12,720
much to learn and a few things were once

00:02:11,599 --> 00:02:16,239
again

00:02:12,720 --> 00:02:18,879
unexpected so dependencies between

00:02:16,239 --> 00:02:20,879
the many javascript packages that i used

00:02:18,879 --> 00:02:23,120
were really hard to figure out and

00:02:20,879 --> 00:02:24,400
signing the code to submit it to app

00:02:23,120 --> 00:02:27,520
stores was

00:02:24,400 --> 00:02:29,520
well not really nice which

00:02:27,520 --> 00:02:30,879
is well finally i switched over to

00:02:29,520 --> 00:02:36,160
another architecture

00:02:30,879 --> 00:02:38,720
which worked and that was based on

00:02:36,160 --> 00:02:40,000
well swift javascript and rust in the

00:02:38,720 --> 00:02:43,920
back end

00:02:40,000 --> 00:02:46,080
so what i came up with is basically

00:02:43,920 --> 00:02:47,440
few gears which i had to learn i didn't

00:02:46,080 --> 00:02:49,760
use it before

00:02:47,440 --> 00:02:52,000
swift which i didn't use before and rust

00:02:49,760 --> 00:02:55,760
which i didn't use before

00:02:52,000 --> 00:02:58,879
so well many different things

00:02:55,760 --> 00:03:01,920
and finally i realized

00:02:58,879 --> 00:03:05,040
that rust so it was

00:03:01,920 --> 00:03:07,519
in certain parts the hardest one to

00:03:05,040 --> 00:03:09,599
learn because it made me think

00:03:07,519 --> 00:03:10,959
was also quite quick to learn because

00:03:09,599 --> 00:03:12,879
there was not

00:03:10,959 --> 00:03:14,159
too much to learn and everything that

00:03:12,879 --> 00:03:16,560
was there was

00:03:14,159 --> 00:03:19,040
rather well transparent and expected

00:03:16,560 --> 00:03:22,239
there were few surprises

00:03:19,040 --> 00:03:25,280
so if you struggle with the language

00:03:22,239 --> 00:03:28,000
the first tip the first idea is

00:03:25,280 --> 00:03:29,200
be aware that in learning rust as in

00:03:28,000 --> 00:03:31,120
each technology

00:03:29,200 --> 00:03:32,400
you have to look at different things you

00:03:31,120 --> 00:03:34,560
have to wonder is it just

00:03:32,400 --> 00:03:36,239
hard to learn so are there some concepts

00:03:34,560 --> 00:03:38,879
that i don't know yet

00:03:36,239 --> 00:03:39,680
or is this also much to learn do i have

00:03:38,879 --> 00:03:41,599
to learn

00:03:39,680 --> 00:03:43,760
a lot of libraries a lot of language

00:03:41,599 --> 00:03:45,760
concepts a lot of syntax

00:03:43,760 --> 00:03:46,959
or are there many different things that

00:03:45,760 --> 00:03:50,560
i also need to learn

00:03:46,959 --> 00:03:53,760
package management build systems etc

00:03:50,560 --> 00:03:56,640
each language has a different

00:03:53,760 --> 00:03:57,920
well different degrees of difficulties

00:03:56,640 --> 00:03:59,519
different things that you have to keep

00:03:57,920 --> 00:04:02,799
in mind

00:03:59,519 --> 00:04:04,959
and the thing with rust is that

00:04:02,799 --> 00:04:06,959
the language itself the concept the

00:04:04,959 --> 00:04:09,680
borrower's echo etc

00:04:06,959 --> 00:04:11,360
are quite challenging to learn

00:04:09,680 --> 00:04:12,840
especially if you haven't

00:04:11,360 --> 00:04:14,400
worked with the system programming

00:04:12,840 --> 00:04:17,600
language

00:04:14,400 --> 00:04:21,680
but it is once you have done it

00:04:17,600 --> 00:04:24,000
it gets easier quite quickly so

00:04:21,680 --> 00:04:26,160
it is worthwhile not to get discouraged

00:04:24,000 --> 00:04:28,240
if you run into this

00:04:26,160 --> 00:04:30,160
steep learning curve at the beginning

00:04:28,240 --> 00:04:33,919
because everything else

00:04:30,160 --> 00:04:35,199
will be easier and it will be easier to

00:04:33,919 --> 00:04:38,880
get it along

00:04:35,199 --> 00:04:42,080
however you can do yourself

00:04:38,880 --> 00:04:45,199
one large favor and to try not to do

00:04:42,080 --> 00:04:46,320
too much at the beginning because when

00:04:45,199 --> 00:04:49,360
you learn

00:04:46,320 --> 00:04:50,479
concepts which language like rust you

00:04:49,360 --> 00:04:53,360
will have

00:04:50,479 --> 00:04:54,960
to face many new things just when you

00:04:53,360 --> 00:04:57,280
start and you'll have to

00:04:54,960 --> 00:04:58,960
have some basic understandings for the

00:04:57,280 --> 00:05:00,240
ownership model for example for the

00:04:58,960 --> 00:05:03,199
syntax

00:05:00,240 --> 00:05:05,280
in order to accomplish even the first

00:05:03,199 --> 00:05:08,400
steps with the language

00:05:05,280 --> 00:05:10,160
that means give yourself some time and

00:05:08,400 --> 00:05:13,360
once you start learning

00:05:10,160 --> 00:05:16,639
focus on the language go over this

00:05:13,360 --> 00:05:19,199
first step here and then

00:05:16,639 --> 00:05:20,000
slowly work yourself up with the

00:05:19,199 --> 00:05:22,240
ecosystem

00:05:20,000 --> 00:05:25,280
learn the different libraries learn the

00:05:22,240 --> 00:05:28,080
context of the language so shows a

00:05:25,280 --> 00:05:29,280
simple application domain and try not to

00:05:28,080 --> 00:05:32,160
change too much

00:05:29,280 --> 00:05:34,160
rust is extremely powerful so there can

00:05:32,160 --> 00:05:35,919
be many things that you

00:05:34,160 --> 00:05:38,800
would like to learn that would

00:05:35,919 --> 00:05:41,280
potentially be useful for your project

00:05:38,800 --> 00:05:42,720
but give yourself time and focus on this

00:05:41,280 --> 00:05:46,720
first step

00:05:42,720 --> 00:05:50,400
and well learning should be

00:05:46,720 --> 00:05:52,880
easier when i did my little

00:05:50,400 --> 00:05:54,000
project i basically started out with

00:05:52,880 --> 00:05:55,919
doing

00:05:54,000 --> 00:05:57,360
word counting application hello world

00:05:55,919 --> 00:06:00,800
apps etc

00:05:57,360 --> 00:06:04,080
and only then slowly moved on to

00:06:00,800 --> 00:06:05,680
some multi-spreading work and um more

00:06:04,080 --> 00:06:09,039
complex things that i needed for my

00:06:05,680 --> 00:06:12,080
application back-end and even there was

00:06:09,039 --> 00:06:13,840
well i chose the most boring and maybe

00:06:12,080 --> 00:06:16,639
even inefficient architecture that could

00:06:13,840 --> 00:06:16,639
possibly work

00:06:19,120 --> 00:06:22,880
related to that is the second idea

00:06:21,039 --> 00:06:26,160
practice

00:06:22,880 --> 00:06:29,680
um i have the

00:06:26,160 --> 00:06:30,800
well i'm going to say the personal

00:06:29,680 --> 00:06:33,680
weakness to

00:06:30,800 --> 00:06:34,160
read a lot about languages before i use

00:06:33,680 --> 00:06:35,840
them

00:06:34,160 --> 00:06:38,560
especially if i have the impression that

00:06:35,840 --> 00:06:40,960
they are very

00:06:38,560 --> 00:06:42,160
many new and interesting concepts in the

00:06:40,960 --> 00:06:44,160
language

00:06:42,160 --> 00:06:46,880
and this can be a difficult it can be

00:06:44,160 --> 00:06:49,199
difficult in languages

00:06:46,880 --> 00:06:50,720
where well you can potentially be

00:06:49,199 --> 00:06:53,840
overwhelmed if you try

00:06:50,720 --> 00:06:56,720
too much at once um

00:06:53,840 --> 00:06:58,800
i hope i'm living here in munich we have

00:06:56,720 --> 00:07:01,759
quite a lot of mountains

00:06:58,800 --> 00:07:02,000
and i always thought that the difference

00:07:01,759 --> 00:07:05,120
is

00:07:02,000 --> 00:07:06,479
between trying to think about a hiking

00:07:05,120 --> 00:07:08,880
trip on a map

00:07:06,479 --> 00:07:10,000
and seeing it in real life because in

00:07:08,880 --> 00:07:13,759
real life

00:07:10,000 --> 00:07:16,560
things are always slightly more complex

00:07:13,759 --> 00:07:17,680
which means that if you choose for your

00:07:16,560 --> 00:07:20,160
project um

00:07:17,680 --> 00:07:21,280
all the features that you could

00:07:20,160 --> 00:07:23,759
potentially want

00:07:21,280 --> 00:07:24,400
and if you want to use the most elegant

00:07:23,759 --> 00:07:28,160
um

00:07:24,400 --> 00:07:31,599
syntax and don't repeat yourself and

00:07:28,160 --> 00:07:32,800
and also in well quite good idiomatic

00:07:31,599 --> 00:07:35,759
code

00:07:32,800 --> 00:07:38,560
then it is quite likely that in series

00:07:35,759 --> 00:07:41,680
this will work all out all will work out

00:07:38,560 --> 00:07:43,680
but in practice you run into these

00:07:41,680 --> 00:07:44,800
slight things that hold you back so you

00:07:43,680 --> 00:07:46,639
might just

00:07:44,800 --> 00:07:48,080
have a problem with one particular

00:07:46,639 --> 00:07:51,360
syntax feature that you

00:07:48,080 --> 00:07:54,479
haven't grasped as much as you like to

00:07:51,360 --> 00:07:58,080
and this will all hold you back

00:07:54,479 --> 00:08:01,440
so it's often at least for somebody like

00:07:58,080 --> 00:08:04,560
me a better approach to do

00:08:01,440 --> 00:08:05,280
very very small things and then practice

00:08:04,560 --> 00:08:08,400
them

00:08:05,280 --> 00:08:11,360
and then do something else again

00:08:08,400 --> 00:08:12,080
this will enable you to have well a lot

00:08:11,360 --> 00:08:14,639
of

00:08:12,080 --> 00:08:16,479
certainty a lot of practice when you

00:08:14,639 --> 00:08:20,080
finally move on to

00:08:16,479 --> 00:08:20,080
harder and more complex topics

00:08:22,879 --> 00:08:28,319
so what did i do i

00:08:26,319 --> 00:08:30,720
the first things that i learned is just

00:08:28,319 --> 00:08:35,440
ownership and basic syntax

00:08:30,720 --> 00:08:38,719
so once i had the roughest idea about

00:08:35,440 --> 00:08:41,680
what a copy type was i just moved into

00:08:38,719 --> 00:08:42,240
just pushing some structs around and

00:08:41,680 --> 00:08:45,519
then

00:08:42,240 --> 00:08:48,000
using clone a lot and after i

00:08:45,519 --> 00:08:49,440
did that i started to work more with

00:08:48,000 --> 00:08:52,080
references

00:08:49,440 --> 00:08:53,040
and then slowly worked over two smart

00:08:52,080 --> 00:08:56,720
pointers

00:08:53,040 --> 00:08:58,560
so in essence i just tried to

00:08:56,720 --> 00:09:00,640
get myself to the same knowledge level

00:08:58,560 --> 00:09:03,600
that i would have in other languages

00:09:00,640 --> 00:09:05,600
for example go java python where i do

00:09:03,600 --> 00:09:09,519
more programming

00:09:05,600 --> 00:09:12,240
and that gave me a

00:09:09,519 --> 00:09:12,720
rough idea on how i would have to move

00:09:12,240 --> 00:09:15,600
along

00:09:12,720 --> 00:09:17,440
with it's only then on did i look at my

00:09:15,600 --> 00:09:19,120
application domain

00:09:17,440 --> 00:09:20,800
there was this little back end for this

00:09:19,120 --> 00:09:23,200
timer

00:09:20,800 --> 00:09:24,320
and i thought okay which features what

00:09:23,200 --> 00:09:26,240
do i actually need

00:09:24,320 --> 00:09:28,560
which collections would be useful how

00:09:26,240 --> 00:09:31,360
are these collections used

00:09:28,560 --> 00:09:32,480
i think i need multi spreading and maybe

00:09:31,360 --> 00:09:36,000
a library i

00:09:32,480 --> 00:09:39,120
use ectix um just to handle some

00:09:36,000 --> 00:09:41,200
internal web requests and after

00:09:39,120 --> 00:09:43,040
i edit each of these features i

00:09:41,200 --> 00:09:46,000
practiced a little bit

00:09:43,040 --> 00:09:47,279
did some refactoring did some changes

00:09:46,000 --> 00:09:50,720
and

00:09:47,279 --> 00:09:51,920
in this way i was always able to slowly

00:09:50,720 --> 00:09:54,240
move along

00:09:51,920 --> 00:09:55,760
so i always went through this planning

00:09:54,240 --> 00:09:58,640
doing phase

00:09:55,760 --> 00:10:01,040
which allowed me to well get something

00:09:58,640 --> 00:10:01,040
to work

00:10:02,000 --> 00:10:08,160
which brings me to the certain

00:10:05,120 --> 00:10:10,160
for me at least for most the

00:10:08,160 --> 00:10:11,360
important idea in learning something

00:10:10,160 --> 00:10:13,440
that is

00:10:11,360 --> 00:10:15,600
what is but can be quite challenging

00:10:13,440 --> 00:10:18,959
like west

00:10:15,600 --> 00:10:21,760
um be humble i think

00:10:18,959 --> 00:10:22,800
we as well software developers

00:10:21,760 --> 00:10:26,240
architects

00:10:22,800 --> 00:10:27,040
we always like to not to be honest to

00:10:26,240 --> 00:10:28,880
feel clever

00:10:27,040 --> 00:10:30,800
to be good about ourselves because we

00:10:28,880 --> 00:10:32,000
have grasped and mastered the features

00:10:30,800 --> 00:10:34,880
of our language because

00:10:32,000 --> 00:10:35,440
we write good code the most idiomatic

00:10:34,880 --> 00:10:38,800
one

00:10:35,440 --> 00:10:42,480
code the most well safe code

00:10:38,800 --> 00:10:46,240
or the most performant code sometimes

00:10:42,480 --> 00:10:48,320
in order to get to this point where we

00:10:46,240 --> 00:10:50,240
write the best code we could possibly

00:10:48,320 --> 00:10:53,680
think about

00:10:50,240 --> 00:10:55,920
we challenge ourselves too much

00:10:53,680 --> 00:10:57,440
it's it's basically if you start running

00:10:55,920 --> 00:10:59,120
and decides that

00:10:57,440 --> 00:11:01,519
within two months you want to run a

00:10:59,120 --> 00:11:05,360
marathon

00:11:01,519 --> 00:11:08,160
so take it slow and rust actually

00:11:05,360 --> 00:11:09,200
allows you to start slow it allows you

00:11:08,160 --> 00:11:12,240
to

00:11:09,200 --> 00:11:14,399
be even bored

00:11:12,240 --> 00:11:17,360
with what you're working on and then

00:11:14,399 --> 00:11:20,000
slowly move to more ambitious things

00:11:17,360 --> 00:11:20,480
which gives you the confidence that you

00:11:20,000 --> 00:11:23,680
will need

00:11:20,480 --> 00:11:27,040
to move on with your personal project

00:11:23,680 --> 00:11:28,320
without well being slightly overwhelmed

00:11:27,040 --> 00:11:30,640
all the time or

00:11:28,320 --> 00:11:31,680
without staring at a wall of compiler

00:11:30,640 --> 00:11:33,440
errors

00:11:31,680 --> 00:11:36,560
that you don't really understand because

00:11:33,440 --> 00:11:39,839
you decided to use the most advanced

00:11:36,560 --> 00:11:43,839
equates with the well most advanced

00:11:39,839 --> 00:11:43,839
usage of traits in the type system

00:11:44,800 --> 00:11:50,480
this also has a

00:11:48,160 --> 00:11:51,920
sensitive advantage that you can

00:11:50,480 --> 00:11:55,839
actually

00:11:51,920 --> 00:11:58,639
build higher in terms of knowledge

00:11:55,839 --> 00:12:00,399
personal idea of programming languages

00:11:58,639 --> 00:12:01,040
about learning in general was always

00:12:00,399 --> 00:12:03,120
that

00:12:01,040 --> 00:12:04,399
you build the more advanced concepts on

00:12:03,120 --> 00:12:05,680
the easier concepts that you have

00:12:04,399 --> 00:12:09,600
grasped before

00:12:05,680 --> 00:12:12,320
so in order to get a good idea

00:12:09,600 --> 00:12:12,880
for example about ownership i think it

00:12:12,320 --> 00:12:15,279
helps

00:12:12,880 --> 00:12:16,959
not only to think about ownership but

00:12:15,279 --> 00:12:19,200
but it's not necessary to

00:12:16,959 --> 00:12:21,760
have some idea about pointer management

00:12:19,200 --> 00:12:25,760
memory management works for example in

00:12:21,760 --> 00:12:28,720
c or what reference counting means in

00:12:25,760 --> 00:12:32,079
other languages like python

00:12:28,720 --> 00:12:33,600
and this gives you or

00:12:32,079 --> 00:12:36,320
doing many different things gives you

00:12:33,600 --> 00:12:39,600
this broad basis that you can

00:12:36,320 --> 00:12:41,120
put all the things that you need to do

00:12:39,600 --> 00:12:43,440
into context

00:12:41,120 --> 00:12:45,040
you not only know okay i have seen in

00:12:43,440 --> 00:12:46,320
this book that i needed to do it in the

00:12:45,040 --> 00:12:48,480
following way and

00:12:46,320 --> 00:12:50,160
i know the ref's concepts but you can

00:12:48,480 --> 00:12:52,480
also relate it to other concepts that

00:12:50,160 --> 00:12:54,480
you have learned before and

00:12:52,480 --> 00:12:57,360
this can only happen if you be humble

00:12:54,480 --> 00:13:00,720
and do this small little steps

00:12:57,360 --> 00:13:02,160
which ultimately allow you to ascend

00:13:00,720 --> 00:13:05,839
faster

00:13:02,160 --> 00:13:07,680
if you always work with the most

00:13:05,839 --> 00:13:09,279
difficult thing that you can possibly

00:13:07,680 --> 00:13:12,000
grasp and this is the most

00:13:09,279 --> 00:13:14,079
clever code you can possibly write it

00:13:12,000 --> 00:13:16,639
will be quite hard for you to debug this

00:13:14,079 --> 00:13:18,800
code or to refactor this code or even to

00:13:16,639 --> 00:13:20,959
come back to this code if you

00:13:18,800 --> 00:13:22,800
for example move to something else for a

00:13:20,959 --> 00:13:25,680
couple of months

00:13:22,800 --> 00:13:26,150
so doing simple things and doing them

00:13:25,680 --> 00:13:27,680
often

00:13:26,150 --> 00:13:30,480
[Music]

00:13:27,680 --> 00:13:30,959
ultimately leads to mastery and i would

00:13:30,480 --> 00:13:33,600
argue

00:13:30,959 --> 00:13:34,079
quicker than if you tried to challenge

00:13:33,600 --> 00:13:36,399
yourself

00:13:34,079 --> 00:13:37,440
too much this is all saying that

00:13:36,399 --> 00:13:39,199
shortcuts

00:13:37,440 --> 00:13:40,959
makes for long delays and i think this

00:13:39,199 --> 00:13:43,440
applies to learning programming

00:13:40,959 --> 00:13:45,839
languages

00:13:43,440 --> 00:13:47,839
well i can only remember that when i

00:13:45,839 --> 00:13:49,839
started to learn rust the first program

00:13:47,839 --> 00:13:52,639
i wanted to write was a word counter

00:13:49,839 --> 00:13:54,079
i always um uses little things that

00:13:52,639 --> 00:13:55,600
where i go over

00:13:54,079 --> 00:13:57,440
a couple of hundred files on my file

00:13:55,600 --> 00:13:59,360
systems and counts the words and give me

00:13:57,440 --> 00:14:01,760
the most frequent ones

00:13:59,360 --> 00:14:03,279
which is usually a couple of minutes or

00:14:01,760 --> 00:14:05,600
maybe an hour in

00:14:03,279 --> 00:14:07,760
different programming languages which

00:14:05,600 --> 00:14:09,519
must it took a little bit longer

00:14:07,760 --> 00:14:12,160
mostly because i started out assuming

00:14:09,519 --> 00:14:15,600
that i could just transfer one to one

00:14:12,160 --> 00:14:16,720
from the c plus program and i couldn't i

00:14:15,600 --> 00:14:20,480
had to

00:14:16,720 --> 00:14:22,720
well do this baby steps to slowly ramp

00:14:20,480 --> 00:14:22,720
up

00:14:24,000 --> 00:14:30,320
and i tried to just

00:14:27,040 --> 00:14:31,519
allow myself to be less clever with my

00:14:30,320 --> 00:14:34,560
code

00:14:31,519 --> 00:14:37,920
and i came up with well six sayings

00:14:34,560 --> 00:14:40,639
i think some of you might disagree but

00:14:37,920 --> 00:14:42,240
even if you disagree maybe just think

00:14:40,639 --> 00:14:46,560
about it

00:14:42,240 --> 00:14:49,920
so first of all simple code is okay

00:14:46,560 --> 00:14:54,160
you don't necessarily need to do

00:14:49,920 --> 00:14:57,120
pattern matching or complex programs or

00:14:54,160 --> 00:14:58,639
nicest patching rules if you can just go

00:14:57,120 --> 00:15:01,279
for if else

00:14:58,639 --> 00:15:02,880
you may end up with screens on screens

00:15:01,279 --> 00:15:05,839
of code with

00:15:02,880 --> 00:15:07,440
non-nice if-else statements but you'll

00:15:05,839 --> 00:15:08,000
end up with a working program that you

00:15:07,440 --> 00:15:11,440
can then

00:15:08,000 --> 00:15:15,279
refactor it is also

00:15:11,440 --> 00:15:17,120
okay to limit yourself so

00:15:15,279 --> 00:15:19,199
rust made the design decision to have

00:15:17,120 --> 00:15:22,079
many things that are useful

00:15:19,199 --> 00:15:23,040
but that are not in the standard library

00:15:22,079 --> 00:15:26,480
there are many good

00:15:23,040 --> 00:15:27,760
crates for error handling etc for better

00:15:26,480 --> 00:15:32,240
error types for

00:15:27,760 --> 00:15:35,839
better concurrency abstractions etc

00:15:32,240 --> 00:15:38,240
and i always have to stop myself from

00:15:35,839 --> 00:15:40,240
looking at creates i o and find the most

00:15:38,240 --> 00:15:43,279
suited the most interesting grade

00:15:40,240 --> 00:15:45,279
and allow myself to go to write a simple

00:15:43,279 --> 00:15:45,600
solution even as a simple solution means

00:15:45,279 --> 00:15:48,720
that

00:15:45,600 --> 00:15:49,759
my error value is a string and the code

00:15:48,720 --> 00:15:52,240
is maybe

00:15:49,759 --> 00:15:53,199
well less nice less idiomatic than it

00:15:52,240 --> 00:15:55,360
could be

00:15:53,199 --> 00:15:56,399
because it allows me to focus on some

00:15:55,360 --> 00:15:59,759
basics and

00:15:56,399 --> 00:16:02,240
to at least know what i don't know about

00:15:59,759 --> 00:16:02,240
my code

00:16:02,560 --> 00:16:05,920
inefficient code is okay rust can

00:16:05,199 --> 00:16:08,720
produce

00:16:05,920 --> 00:16:09,600
very fast programs and with essence

00:16:08,720 --> 00:16:12,880
support

00:16:09,600 --> 00:16:15,440
also very fast servers

00:16:12,880 --> 00:16:16,959
the thing is especially with i think

00:16:15,440 --> 00:16:20,639
things get complicated

00:16:16,959 --> 00:16:22,399
pretty quickly so allow yourself

00:16:20,639 --> 00:16:24,720
for your first version of your code to

00:16:22,399 --> 00:16:26,160
be inefficient do some memory copies do

00:16:24,720 --> 00:16:29,440
some clones

00:16:26,160 --> 00:16:31,920
right in sync server

00:16:29,440 --> 00:16:33,360
and later on if you realize that you

00:16:31,920 --> 00:16:37,519
need something faster

00:16:33,360 --> 00:16:40,079
you can always move there

00:16:37,519 --> 00:16:40,720
now to change tone a little bit unsafe

00:16:40,079 --> 00:16:43,920
code is

00:16:40,720 --> 00:16:45,759
not okay so first of all

00:16:43,920 --> 00:16:47,680
it's unlikely that you will succeed in

00:16:45,759 --> 00:16:50,240
tweaking the borrow checker by

00:16:47,680 --> 00:16:52,000
going for unsafe code and it also makes

00:16:50,240 --> 00:16:53,600
things actually harder

00:16:52,000 --> 00:16:55,440
because one of the nice things about

00:16:53,600 --> 00:16:57,920
rust is that you don't have to worry too

00:16:55,440 --> 00:17:01,279
much about shooting yourself in the foot

00:16:57,920 --> 00:17:04,480
or to make well mistakes that you

00:17:01,279 --> 00:17:08,000
wouldn't know about

00:17:04,480 --> 00:17:09,439
oh for example um when i wrote about a

00:17:08,000 --> 00:17:10,640
rust program when i

00:17:09,439 --> 00:17:12,880
worked with a vector and had to

00:17:10,640 --> 00:17:14,480
reallocate some memory

00:17:12,880 --> 00:17:16,880
i just thought okay that's interesting

00:17:14,480 --> 00:17:18,319
that is much harder than it would be in

00:17:16,880 --> 00:17:20,880
go

00:17:18,319 --> 00:17:22,400
but thinking about it in this particular

00:17:20,880 --> 00:17:26,400
corner case i think when i would

00:17:22,400 --> 00:17:29,520
do this in go my area

00:17:26,400 --> 00:17:32,080
yeah i would most likely do a copy where

00:17:29,520 --> 00:17:35,200
i wouldn't really want a copy

00:17:32,080 --> 00:17:35,600
and so well the safety guarantees of

00:17:35,200 --> 00:17:37,200
rusk

00:17:35,600 --> 00:17:40,400
actually help you learning the compiler

00:17:37,200 --> 00:17:43,280
is your tutor in a way

00:17:40,400 --> 00:17:45,440
borrowing code is okay so there are many

00:17:43,280 --> 00:17:47,120
nice macro sets

00:17:45,440 --> 00:17:48,799
that can help us macro programming is

00:17:47,120 --> 00:17:49,679
quite interesting knightly has many

00:17:48,799 --> 00:17:52,960
features

00:17:49,679 --> 00:17:54,960
many quaids need nightly i would not

00:17:52,960 --> 00:17:58,000
necessarily go there at the beginning

00:17:54,960 --> 00:17:58,640
just stay with a boring old stable world

00:17:58,000 --> 00:18:02,720
and

00:17:58,640 --> 00:18:05,919
move along yeah and to repeat myself

00:18:02,720 --> 00:18:08,640
um small steps in your code are okay so

00:18:05,919 --> 00:18:10,320
if you find yourself writing boring

00:18:08,640 --> 00:18:15,760
short functions you're

00:18:10,320 --> 00:18:19,120
quite likely on the right track

00:18:15,760 --> 00:18:21,760
yeah and that's almost all of the talk

00:18:19,120 --> 00:18:23,440
so the summary is quite easy there's

00:18:21,760 --> 00:18:25,039
always this idea in

00:18:23,440 --> 00:18:27,520
where computer science and management

00:18:25,039 --> 00:18:28,080
everywhere of improvement loops and do

00:18:27,520 --> 00:18:31,280
something

00:18:28,080 --> 00:18:32,640
and learn improve it well almost

00:18:31,280 --> 00:18:33,679
embarrassingly it's the same with

00:18:32,640 --> 00:18:35,760
learning a programming

00:18:33,679 --> 00:18:38,160
language the only thing that is

00:18:35,760 --> 00:18:43,840
different with rust is that you

00:18:38,160 --> 00:18:43,840
should keep your steps rather

00:18:44,000 --> 00:18:48,000
you have learned something be motivated

00:18:46,400 --> 00:18:50,799
to learn something more

00:18:48,000 --> 00:18:51,840
write some code look at the code

00:18:50,799 --> 00:18:53,679
refactor it

00:18:51,840 --> 00:18:54,880
think okay which additional feature

00:18:53,679 --> 00:18:58,000
could i

00:18:54,880 --> 00:19:00,480
i what i want to use or maybe how

00:18:58,000 --> 00:19:02,960
i do allow myself to use this particular

00:19:00,480 --> 00:19:06,080
this one crate that i will

00:19:02,960 --> 00:19:08,080
then learn about and research well you

00:19:06,080 --> 00:19:09,360
can stay motivated you don't overwhelm

00:19:08,080 --> 00:19:12,559
yourself and you make

00:19:09,360 --> 00:19:14,720
slow progress right well things that

00:19:12,559 --> 00:19:17,760
start slow can be quickly um

00:19:14,720 --> 00:19:19,600
quite quick um

00:19:17,760 --> 00:19:22,080
for practical things if you are some of

00:19:19,600 --> 00:19:23,600
you are just getting started with rusk

00:19:22,080 --> 00:19:27,760
or

00:19:23,600 --> 00:19:30,400
have well done some initial learning

00:19:27,760 --> 00:19:31,039
i can just give you some hints from me

00:19:30,400 --> 00:19:34,000
i've

00:19:31,039 --> 00:19:35,360
i'm a reader so i learn mostly by

00:19:34,000 --> 00:19:37,840
reading and by doing

00:19:35,360 --> 00:19:39,840
i ironically don't work particularly

00:19:37,840 --> 00:19:42,080
well with videos

00:19:39,840 --> 00:19:43,520
but for me the approach that brought me

00:19:42,080 --> 00:19:44,000
the first was starting with the rust

00:19:43,520 --> 00:19:46,480
book

00:19:44,000 --> 00:19:48,000
which is quite nice because it explains

00:19:46,480 --> 00:19:50,240
a lot

00:19:48,000 --> 00:19:52,720
and then you have some code then do some

00:19:50,240 --> 00:19:53,360
exercises and then go back to rust by

00:19:52,720 --> 00:19:56,400
example

00:19:53,360 --> 00:19:57,039
where you have more code so maybe you

00:19:56,400 --> 00:20:00,000
don't need

00:19:57,039 --> 00:20:01,039
so much so many explanations anymore and

00:20:00,000 --> 00:20:03,440
you can just

00:20:01,039 --> 00:20:06,000
read the code take the code change the

00:20:03,440 --> 00:20:09,679
code and to do some more experiments

00:20:06,000 --> 00:20:12,000
and maybe start do some relatively

00:20:09,679 --> 00:20:14,320
simple things so lead code or

00:20:12,000 --> 00:20:17,760
without a code or just porting your

00:20:14,320 --> 00:20:20,720
command line a simple command line tool

00:20:17,760 --> 00:20:22,080
is something that is well limited in

00:20:20,720 --> 00:20:24,080
scope and that gives you a feeling of

00:20:22,080 --> 00:20:26,400
success when you're done

00:20:24,080 --> 00:20:27,360
and after that what i find quite

00:20:26,400 --> 00:20:30,720
interesting is

00:20:27,360 --> 00:20:33,120
just um select some books and then

00:20:30,720 --> 00:20:35,200
go to the gibbertout repository often

00:20:33,120 --> 00:20:36,880
you find there example code online even

00:20:35,200 --> 00:20:38,880
if you don't want to buy the book

00:20:36,880 --> 00:20:40,320
and then just go over the example code

00:20:38,880 --> 00:20:42,000
read the example code and wonder okay

00:20:40,320 --> 00:20:43,280
what are they doing here which features

00:20:42,000 --> 00:20:45,360
are they using

00:20:43,280 --> 00:20:47,360
and then maybe play around with this

00:20:45,360 --> 00:20:49,919
example code a little more

00:20:47,360 --> 00:20:50,799
this maybe then could be a step for your

00:20:49,919 --> 00:20:54,799
own

00:20:50,799 --> 00:20:57,039
complexer projects or even to well

00:20:54,799 --> 00:20:59,039
move to an existing larger application

00:20:57,039 --> 00:21:01,440
and see how they are working with

00:20:59,039 --> 00:21:03,440
on what source code maybe just download

00:21:01,440 --> 00:21:06,000
it make some changes and see if it still

00:21:03,440 --> 00:21:09,039
compiles

00:21:06,000 --> 00:21:09,039
okay yeah that's

00:21:09,200 --> 00:21:16,640
just been my personal experience with

00:21:12,799 --> 00:21:20,320
writing my first rest program

00:21:16,640 --> 00:21:22,640
so a couple of i think it's about 1000

00:21:20,320 --> 00:21:24,240
lines of rust code

00:21:22,640 --> 00:21:26,640
working messages around in desktop

00:21:24,240 --> 00:21:27,679
application it took me longer than i

00:21:26,640 --> 00:21:30,559
originally would

00:21:27,679 --> 00:21:32,080
would have thought but it was fun and i

00:21:30,559 --> 00:21:34,799
would say

00:21:32,080 --> 00:21:35,360
ultimately it felt good writing rust

00:21:34,799 --> 00:21:38,480
because

00:21:35,360 --> 00:21:39,039
i even if i at times was quite of

00:21:38,480 --> 00:21:42,480
challenge

00:21:39,039 --> 00:21:44,880
learning it i always felt that the code

00:21:42,480 --> 00:21:46,400
that i was writing would actually work

00:21:44,880 --> 00:21:49,280
and that i would actually be able to

00:21:46,400 --> 00:21:53,039
change it in a couple of months time

00:21:49,280 --> 00:21:54,559
so that's all that i have to say now

00:21:53,039 --> 00:21:59,840
thanks for listening in and if there are

00:21:54,559 --> 00:21:59,840
any questions i'd be happy to answer

00:22:08,559 --> 00:22:12,400
thank you stefan for that very

00:22:09,760 --> 00:22:13,840
validating talk um

00:22:12,400 --> 00:22:15,840
as i'm sure everyone will agree it's

00:22:13,840 --> 00:22:20,080
very rough sometimes at the beginning

00:22:15,840 --> 00:22:23,600
um very very good pointers

00:22:20,080 --> 00:22:24,960
yeah it's like it's it's not so much

00:22:23,600 --> 00:22:26,720
rough

00:22:24,960 --> 00:22:28,240
i think what you have to refrain from

00:22:26,720 --> 00:22:30,880
and that's what i think

00:22:28,240 --> 00:22:32,480
i i write a lot of python and with

00:22:30,880 --> 00:22:34,400
python partners always

00:22:32,480 --> 00:22:36,960
say programming language is easy mode

00:22:34,400 --> 00:22:39,120
because you have

00:22:36,960 --> 00:22:40,720
well you have a garbage collector you

00:22:39,120 --> 00:22:41,760
have reference counting you have a nice

00:22:40,720 --> 00:22:43,360
syntax and

00:22:41,760 --> 00:22:45,600
python is extremely good in hiding

00:22:43,360 --> 00:22:48,000
complex libraries from the user

00:22:45,600 --> 00:22:49,120
rust has to expose some of these

00:22:48,000 --> 00:22:53,120
complexities and

00:22:49,120 --> 00:22:55,679
this can be different but

00:22:53,120 --> 00:22:57,440
i think what i'd really like to express

00:22:55,679 --> 00:22:59,760
don't be discouraged there is this

00:22:57,440 --> 00:23:00,720
bump at the beginning where you have to

00:22:59,760 --> 00:23:02,799
learn the concepts

00:23:00,720 --> 00:23:04,000
unfortunately there's no way around it

00:23:02,799 --> 00:23:05,919
but once you've done this

00:23:04,000 --> 00:23:08,000
things will get easier then russ will

00:23:05,919 --> 00:23:10,400
really help you

00:23:08,000 --> 00:23:11,600
exactly yeah so we do have one question

00:23:10,400 --> 00:23:13,440
uh from the public

00:23:11,600 --> 00:23:15,520
based on the experience you've had with

00:23:13,440 --> 00:23:16,960
previous languages

00:23:15,520 --> 00:23:18,720
what was the most difficult thing to

00:23:16,960 --> 00:23:22,080
grasp

00:23:18,720 --> 00:23:25,760
actually access web and this is not

00:23:22,080 --> 00:23:29,919
so much two things um

00:23:25,760 --> 00:23:34,240
actors tries to use quite advanced

00:23:29,919 --> 00:23:36,960
traits in how you actually use a library

00:23:34,240 --> 00:23:39,120
and they are moving quite fast so i

00:23:36,960 --> 00:23:41,520
ended up with finding a lot of different

00:23:39,120 --> 00:23:44,799
or outdated documentation and it

00:23:41,520 --> 00:23:46,960
was quite a bit of trial and error and

00:23:44,799 --> 00:23:48,559
since i'm not an expert on the trade

00:23:46,960 --> 00:23:50,159
system i couldn't just go to this horse

00:23:48,559 --> 00:23:51,919
couldn't see okay this is how this is

00:23:50,159 --> 00:23:56,240
supposed to work

00:23:51,919 --> 00:23:59,360
but i had to slowly work myself up

00:23:56,240 --> 00:24:00,559
and yeah that's actually the one reason

00:23:59,360 --> 00:24:02,480
where the compiler couldn't help me

00:24:00,559 --> 00:24:04,080
normally the compiler is extremely good

00:24:02,480 --> 00:24:06,080
especially now with errol message

00:24:04,080 --> 00:24:07,840
display say okay

00:24:06,080 --> 00:24:09,760
ownership's not working or you should

00:24:07,840 --> 00:24:11,679
know this needs other to be cloned or

00:24:09,760 --> 00:24:14,000
it's owned somewhere else um

00:24:11,679 --> 00:24:15,520
the trade is missing there i got a lot

00:24:14,000 --> 00:24:17,120
of trades but i couldn't

00:24:15,520 --> 00:24:19,039
really at the beginning understand this

00:24:17,120 --> 00:24:21,760
and that's why

00:24:19,039 --> 00:24:24,320
well change is one of the things and why

00:24:21,760 --> 00:24:25,120
i would advise to start with standard

00:24:24,320 --> 00:24:28,240
where you have

00:24:25,120 --> 00:24:28,960
more stability simpler code even if it

00:24:28,240 --> 00:24:31,760
means that

00:24:28,960 --> 00:24:34,880
the performance and the features are not

00:24:31,760 --> 00:24:34,880
necessarily optimal

00:24:36,240 --> 00:24:40,960
and what would you say is the best point

00:24:39,279 --> 00:24:43,039
on the learning curve to start

00:24:40,960 --> 00:24:46,559
interacting with existing projects

00:24:43,039 --> 00:24:48,720
in your experience

00:24:46,559 --> 00:24:49,919
i think when you have skimmed the rust

00:24:48,720 --> 00:24:52,240
book once and

00:24:49,919 --> 00:24:53,520
with skinned i mean if you find a

00:24:52,240 --> 00:24:56,559
project and they start

00:24:53,520 --> 00:25:00,240
throwing about okay you have to

00:24:56,559 --> 00:25:02,559
work with this particular trade oh yeah

00:25:00,240 --> 00:25:05,039
you should know okay i may not have

00:25:02,559 --> 00:25:06,640
grasped this now but i know

00:25:05,039 --> 00:25:08,080
that there is this chapter in the book

00:25:06,640 --> 00:25:11,279
and i can

00:25:08,080 --> 00:25:14,480
think i can figure out how it works

00:25:11,279 --> 00:25:15,679
so that you um you don't read a sentence

00:25:14,480 --> 00:25:18,640
and you have the feeling that you have

00:25:15,679 --> 00:25:21,360
to look up every second word

00:25:18,640 --> 00:25:23,279
and and then it really com depends on

00:25:21,360 --> 00:25:25,200
the project that you want to work with

00:25:23,279 --> 00:25:26,720
i've really found that a good middle

00:25:25,200 --> 00:25:30,320
point is

00:25:26,720 --> 00:25:32,400
um well example source code from books

00:25:30,320 --> 00:25:33,760
because especially if you go into the

00:25:32,400 --> 00:25:35,120
later features

00:25:33,760 --> 00:25:36,559
you can just say okay i know this

00:25:35,120 --> 00:25:38,159
concept i know this concept and then

00:25:36,559 --> 00:25:39,520
this concept but it's not the code that

00:25:38,159 --> 00:25:42,240
i've written before

00:25:39,520 --> 00:25:43,440
or that i have written my exercises in

00:25:42,240 --> 00:25:45,760
and then you can

00:25:43,440 --> 00:25:46,799
maybe use well start on command line

00:25:45,760 --> 00:25:50,000
tools

00:25:46,799 --> 00:25:51,440
so maybe i

00:25:50,000 --> 00:25:53,120
basically looked at simple web

00:25:51,440 --> 00:25:54,480
applications because i need a web

00:25:53,120 --> 00:25:57,120
application

00:25:54,480 --> 00:25:58,720
but maybe just also go to github um

00:25:57,120 --> 00:26:00,720
google for command line to

00:25:58,720 --> 00:26:02,400
look for command line to request some

00:26:00,720 --> 00:26:03,200
easy application domain nothing too

00:26:02,400 --> 00:26:04,880
challenging

00:26:03,200 --> 00:26:06,400
then just see whether you understand it

00:26:04,880 --> 00:26:08,880
or not and if you don't understand it

00:26:06,400 --> 00:26:12,400
move on to something else

00:26:08,880 --> 00:26:13,760
what or dig in whatever

00:26:12,400 --> 00:26:15,760
ends up it depends on what keeps you

00:26:13,760 --> 00:26:17,440
motivated don't get frustrated i think

00:26:15,760 --> 00:26:19,600
that's the most important thing

00:26:17,440 --> 00:26:21,039
yeah the most important but if you do

00:26:19,600 --> 00:26:23,200
get stuck um

00:26:21,039 --> 00:26:24,799
what place do you turn for help uh is

00:26:23,200 --> 00:26:28,799
there any particular website

00:26:24,799 --> 00:26:33,360
or place not really

00:26:28,799 --> 00:26:36,480
so i usually go rest for example is

00:26:33,360 --> 00:26:38,720
by example is quite nice

00:26:36,480 --> 00:26:40,559
in terms of book i still find the old

00:26:38,720 --> 00:26:44,080
o'reilly book quite nice

00:26:40,559 --> 00:26:45,039
um packed say they have the subscription

00:26:44,080 --> 00:26:46,880
service but

00:26:45,039 --> 00:26:49,200
they have the mastering rust the second

00:26:46,880 --> 00:26:51,200
one is quite good and say um source code

00:26:49,200 --> 00:26:54,320
is also on github

00:26:51,200 --> 00:26:54,640
which at least allows you to just search

00:26:54,320 --> 00:26:56,720
by

00:26:54,640 --> 00:26:58,480
m keyword and to see how this is used in

00:26:56,720 --> 00:27:00,159
context

00:26:58,480 --> 00:27:02,000
it depends so much if if you're

00:27:00,159 --> 00:27:03,919
struggling with a library like my

00:27:02,000 --> 00:27:04,960
actress example which is not related to

00:27:03,919 --> 00:27:06,960
much directors it's

00:27:04,960 --> 00:27:08,799
basically that i didn't use a library

00:27:06,960 --> 00:27:10,320
and then you need example code to make

00:27:08,799 --> 00:27:12,799
it work if you're struggling with some

00:27:10,320 --> 00:27:16,000
concepts and i usually i'm just

00:27:12,799 --> 00:27:18,399
hop from book to book and then

00:27:16,000 --> 00:27:20,880
try to work with the simplest possible

00:27:18,399 --> 00:27:23,120
example that i can make up and

00:27:20,880 --> 00:27:24,880
well play around with either rust

00:27:23,120 --> 00:27:28,080
playground or with some local code and

00:27:24,880 --> 00:27:28,080
see whether i can make it work

00:27:28,480 --> 00:27:35,840
great all right i think that's about it

00:27:32,000 --> 00:27:35,840

YouTube URL: https://www.youtube.com/watch?v=xjBZwJHUwSU


