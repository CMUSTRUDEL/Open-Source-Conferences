Title: Carlo & Micah - Project Necromancy: How to Revive a Dead Rust Project â€” RustFest Global 2020
Publication date: 2020-12-19
Playlist: RustFest Global 2020
Description: 
	By Carlo Supina & Micah Tigley


In the past two months we have been collaborating to revive a flawed project through effective planning, refactoring, and documentation. In this talk we will go over the important points that made our collaboration and revival of this project a success.

For more details and resources, check out:
https://rustfest.global/session/22-project-necromancy-how-to-revive-a-dead-rust-project/
Captions: 
	00:00:02,879 --> 00:00:08,800
carlos supina and mikas drive

00:00:05,600 --> 00:00:11,920
left for that rust project to revive

00:00:08,800 --> 00:00:16,640
by making it dress up with an ecs

00:00:11,920 --> 00:00:18,720
now it's perfectly looking alive

00:00:16,640 --> 00:00:20,720
hi everyone welcome to our talk on how

00:00:18,720 --> 00:00:22,080
to revive a dead rust project

00:00:20,720 --> 00:00:24,000
my name is carlo and today i'll be

00:00:22,080 --> 00:00:25,119
presenting together with mika about her

00:00:24,000 --> 00:00:27,439
experiences working on

00:00:25,119 --> 00:00:28,720
a 2d shooter game made with the amethyst

00:00:27,439 --> 00:00:30,640
game engine

00:00:28,720 --> 00:00:32,160
i'm a welder who is currently pursuing

00:00:30,640 --> 00:00:34,000
aws certification

00:00:32,160 --> 00:00:35,840
i also run an education company called

00:00:34,000 --> 00:00:37,120
micronote where i make videos and

00:00:35,840 --> 00:00:39,760
articles about programming

00:00:37,120 --> 00:00:41,920
microcontrollers with micropython

00:00:39,760 --> 00:00:44,160
in my free time i enjoy tinkering with

00:00:41,920 --> 00:00:46,480
electronics designing pcbs

00:00:44,160 --> 00:00:48,480
and designing and printing 3d parts i

00:00:46,480 --> 00:00:49,760
began my rust journey by diving straight

00:00:48,480 --> 00:00:51,520
into embedded rust

00:00:49,760 --> 00:00:53,600
where i made a remote controlled rover

00:00:51,520 --> 00:00:55,360
with sensors and an infrared camera

00:00:53,600 --> 00:00:57,120
then wanted to get more conventional

00:00:55,360 --> 00:00:58,960
experience i started working on a

00:00:57,120 --> 00:01:01,280
project called kibrarian for managing

00:00:58,960 --> 00:01:03,199
schematics and footprints for keycad

00:01:01,280 --> 00:01:04,720
kicad is an open source electronics

00:01:03,199 --> 00:01:06,799
design automation suite

00:01:04,720 --> 00:01:08,159
i also started working on a game called

00:01:06,799 --> 00:01:09,760
space shooter rs

00:01:08,159 --> 00:01:11,200
which is a space shooter game made with

00:01:09,760 --> 00:01:12,880
the amethyst game engine

00:01:11,200 --> 00:01:14,240
with heavy inspiration from the binding

00:01:12,880 --> 00:01:16,640
of isaac

00:01:14,240 --> 00:01:18,080
hey everyone i'm mika and i'm a software

00:01:16,640 --> 00:01:19,920
engineer at mozilla

00:01:18,080 --> 00:01:22,080
my background working on software is

00:01:19,920 --> 00:01:24,000
focused on front-end web development

00:01:22,080 --> 00:01:26,080
currently i work on the firefox web

00:01:24,000 --> 00:01:28,080
browser working on the browser's ui

00:01:26,080 --> 00:01:30,079
in my spare time i like to write blog

00:01:28,080 --> 00:01:31,200
posts about my experiences in software

00:01:30,079 --> 00:01:33,280
development

00:01:31,200 --> 00:01:35,360
my blog posts are a way to help myself

00:01:33,280 --> 00:01:37,759
practice delivering complex topics in a

00:01:35,360 --> 00:01:39,680
way that are simple and easy to follow

00:01:37,759 --> 00:01:41,520
i got started with rust over two years

00:01:39,680 --> 00:01:43,119
ago as an on and off hobby

00:01:41,520 --> 00:01:44,960
some of the things i've done since then

00:01:43,119 --> 00:01:46,560
is contribute to open source rust

00:01:44,960 --> 00:01:47,439
projects and a few of my own toy

00:01:46,560 --> 00:01:49,200
projects

00:01:47,439 --> 00:01:50,960
i recently started learning about game

00:01:49,200 --> 00:01:51,840
development using the amethyst game

00:01:50,960 --> 00:01:53,200
engine

00:01:51,840 --> 00:01:54,960
it was during this time i started

00:01:53,200 --> 00:01:56,560
learning about a common game development

00:01:54,960 --> 00:01:59,040
architecture called ecs

00:01:56,560 --> 00:02:01,040
and how it was used by amethyst and as a

00:01:59,040 --> 00:02:01,920
side note we'll be explaining what ecs

00:02:01,040 --> 00:02:03,680
is later

00:02:01,920 --> 00:02:05,040
in this talk so don't worry about

00:02:03,680 --> 00:02:06,799
knowing what it is right now

00:02:05,040 --> 00:02:08,080
and so i decided to share my learnings

00:02:06,799 --> 00:02:09,679
at rest conf this year

00:02:08,080 --> 00:02:11,599
where it helped solidify my own

00:02:09,679 --> 00:02:11,920
knowledge about the topic in addition to

00:02:11,599 --> 00:02:13,760
this

00:02:11,920 --> 00:02:15,520
i documented my journey learning game

00:02:13,760 --> 00:02:16,319
development with rust by writing blog

00:02:15,520 --> 00:02:18,160
posts

00:02:16,319 --> 00:02:19,840
and now i'll pass it off to carlo where

00:02:18,160 --> 00:02:21,280
he will explain the origin of space

00:02:19,840 --> 00:02:23,840
shooter rs

00:02:21,280 --> 00:02:26,239
in the summer of 2019 i was looking for

00:02:23,840 --> 00:02:28,319
a project to hone my rus skills

00:02:26,239 --> 00:02:30,160
i decided that i wanted to make a game

00:02:28,319 --> 00:02:32,000
so i started looking for a game engines

00:02:30,160 --> 00:02:33,920
that used rust and found a website

00:02:32,000 --> 00:02:35,680
called are we game yet.rs

00:02:33,920 --> 00:02:37,440
this website had many resources for

00:02:35,680 --> 00:02:39,200
creating games with the rust language

00:02:37,440 --> 00:02:41,360
here i discovered a game engine called

00:02:39,200 --> 00:02:42,640
amethyst which used an unfamiliar

00:02:41,360 --> 00:02:44,800
architecture to me called

00:02:42,640 --> 00:02:46,160
ecs i read through the amethyst book and

00:02:44,800 --> 00:02:48,000
followed some tutorials

00:02:46,160 --> 00:02:50,560
and eventually started working on my own

00:02:48,000 --> 00:02:52,160
game called space shooter rs

00:02:50,560 --> 00:02:54,000
this game started as a simple space

00:02:52,160 --> 00:02:55,519
shooter game where the player shoots

00:02:54,000 --> 00:02:56,080
enemies coming from the top of the

00:02:55,519 --> 00:02:58,080
screen

00:02:56,080 --> 00:02:59,760
after a few months of consistent work

00:02:58,080 --> 00:03:01,680
space shooter rs was chosen to be an

00:02:59,760 --> 00:03:02,560
official showcase game for the amethyst

00:03:01,680 --> 00:03:04,560
engine

00:03:02,560 --> 00:03:06,000
space shooter rs was initially a project

00:03:04,560 --> 00:03:07,680
for learning rust

00:03:06,000 --> 00:03:09,920
which meant it contained mistakes that a

00:03:07,680 --> 00:03:12,239
person knew to rust would make

00:03:09,920 --> 00:03:14,959
it was also unorganized due to me being

00:03:12,239 --> 00:03:17,200
new to the ecs architecture of amethyst

00:03:14,959 --> 00:03:19,120
specifically the game contained large

00:03:17,200 --> 00:03:20,720
components with redundant data

00:03:19,120 --> 00:03:22,560
this made the game difficult for me to

00:03:20,720 --> 00:03:24,799
continue contributing to because if i

00:03:22,560 --> 00:03:26,400
had a couple hours to work on a feature

00:03:24,799 --> 00:03:28,080
i would first need to reorient myself

00:03:26,400 --> 00:03:29,519
with the convoluted project before

00:03:28,080 --> 00:03:30,959
working on anything new

00:03:29,519 --> 00:03:32,879
for this same reason it was also

00:03:30,959 --> 00:03:34,640
difficult for others to contribute to

00:03:32,879 --> 00:03:36,720
i was very aware that refactoring was

00:03:34,640 --> 00:03:38,400
needed but i wasn't sure where to start

00:03:36,720 --> 00:03:40,159
or if it was even worth it

00:03:38,400 --> 00:03:42,239
because of these flaws space shooter

00:03:40,159 --> 00:03:43,680
rs's progress slowed to a halt around

00:03:42,239 --> 00:03:45,680
the beginning of 2020

00:03:43,680 --> 00:03:47,680
until two months ago when i watched

00:03:45,680 --> 00:03:49,680
mika's rustconf talk about her

00:03:47,680 --> 00:03:51,599
experiences with amethyst

00:03:49,680 --> 00:03:53,120
this talk inspired me to try working on

00:03:51,599 --> 00:03:54,560
my game again but i ended up

00:03:53,120 --> 00:03:56,480
encountering the same problems

00:03:54,560 --> 00:03:58,400
this is when i considered inviting mika

00:03:56,480 --> 00:04:00,000
to collaborate on space shooter rs

00:03:58,400 --> 00:04:01,599
she clearly had a passion for game

00:04:00,000 --> 00:04:03,120
development she also had knowledge of

00:04:01,599 --> 00:04:03,840
industry practices through a work at

00:04:03,120 --> 00:04:05,200
mozilla

00:04:03,840 --> 00:04:07,120
and we appeared to be at a similar

00:04:05,200 --> 00:04:08,159
experience level with amethyst i ended

00:04:07,120 --> 00:04:09,920
up reaching out after

00:04:08,159 --> 00:04:12,080
determining if i had time to commit to

00:04:09,920 --> 00:04:13,200
the project if i had a plan to catch her

00:04:12,080 --> 00:04:15,040
up with the project

00:04:13,200 --> 00:04:16,639
and if i had a rough idea of what needed

00:04:15,040 --> 00:04:18,400
to be worked on first

00:04:16,639 --> 00:04:20,320
i was interested in collaborating with

00:04:18,400 --> 00:04:22,160
carlo because i wanted to expand my

00:04:20,320 --> 00:04:23,600
knowledge about ecs and the amethyst

00:04:22,160 --> 00:04:26,240
game engine by working on

00:04:23,600 --> 00:04:28,160
an existing game at first i wasn't sure

00:04:26,240 --> 00:04:29,919
if i'd be able to help out meaningfully

00:04:28,160 --> 00:04:31,280
since i2 was still learning rust and

00:04:29,919 --> 00:04:33,360
amethyst

00:04:31,280 --> 00:04:35,199
and i wasn't sure if i'd be able to make

00:04:33,360 --> 00:04:36,320
good suggestions on how we can make the

00:04:35,199 --> 00:04:38,800
existing codebase

00:04:36,320 --> 00:04:40,320
scalable using an ecs architecture due

00:04:38,800 --> 00:04:42,160
to my inexperience

00:04:40,320 --> 00:04:43,759
but i realized doing this collaboration

00:04:42,160 --> 00:04:45,600
would help these concerns i was having

00:04:43,759 --> 00:04:46,800
carlo knew the code better than i did

00:04:45,600 --> 00:04:48,320
and he could guide me through the

00:04:46,800 --> 00:04:50,000
problems the project was having

00:04:48,320 --> 00:04:52,000
it was also clear there were areas of

00:04:50,000 --> 00:04:52,800
amethyst carlo had explored that i

00:04:52,000 --> 00:04:54,320
haven't

00:04:52,800 --> 00:04:56,240
so i knew i would be learning new

00:04:54,320 --> 00:04:57,919
concepts as well and another nice thing

00:04:56,240 --> 00:04:59,600
about this collaboration was that we

00:04:57,919 --> 00:05:01,039
were both coming into this knowing we

00:04:59,600 --> 00:05:02,639
could learn something from each other

00:05:01,039 --> 00:05:03,919
and since it was just the two of us

00:05:02,639 --> 00:05:05,919
there was freedom for us to make

00:05:03,919 --> 00:05:07,520
mistakes and to learn from them but of

00:05:05,919 --> 00:05:09,360
course as someone who was not at all

00:05:07,520 --> 00:05:11,120
familiar with the code it was still hard

00:05:09,360 --> 00:05:13,120
to know where to begin with

00:05:11,120 --> 00:05:14,639
refactoring the code base in this

00:05:13,120 --> 00:05:16,240
section of our talk we're going to

00:05:14,639 --> 00:05:17,520
provide some background for the space

00:05:16,240 --> 00:05:18,880
shooter game

00:05:17,520 --> 00:05:20,560
a little knowledge about how the game

00:05:18,880 --> 00:05:22,240
works will provide some background into

00:05:20,560 --> 00:05:23,039
some of the refactoring decisions we

00:05:22,240 --> 00:05:24,560
made

00:05:23,039 --> 00:05:26,400
and this will lead us into discussing

00:05:24,560 --> 00:05:29,360
how we approach refactoring the existing

00:05:26,400 --> 00:05:31,280
ecs code to make it easier to work with

00:05:29,360 --> 00:05:33,360
and then finally we will be explaining

00:05:31,280 --> 00:05:35,199
collaboration strategies we use to help

00:05:33,360 --> 00:05:37,120
plan and execute the refactors we

00:05:35,199 --> 00:05:38,720
discussed and now i'm going to hand it

00:05:37,120 --> 00:05:40,320
off to carlo who will be giving a

00:05:38,720 --> 00:05:41,919
summary of space shooter

00:05:40,320 --> 00:05:43,520
here's a little background on space

00:05:41,919 --> 00:05:45,039
shooter in this game you play as a

00:05:43,520 --> 00:05:46,400
spaceship defending an objective

00:05:45,039 --> 00:05:48,320
the goal of the game is to survive

00:05:46,400 --> 00:05:49,120
levels by destroying enemies collecting

00:05:48,320 --> 00:05:50,960
consumables

00:05:49,120 --> 00:05:52,960
buying items and defeating the final

00:05:50,960 --> 00:05:53,840
boss the game is inspired by the binding

00:05:52,960 --> 00:05:55,280
of isaac

00:05:53,840 --> 00:05:57,360
with the main points of inspiration

00:05:55,280 --> 00:05:58,080
being items that synergize with each

00:05:57,360 --> 00:06:00,479
other

00:05:58,080 --> 00:06:02,400
randomly generated levels and satisfying

00:06:00,479 --> 00:06:04,560
controls influenced by physics

00:06:02,400 --> 00:06:06,720
currently the game has three enemy types

00:06:04,560 --> 00:06:08,479
each enemy type has a distinct behavior

00:06:06,720 --> 00:06:09,280
to provide a unique challenge to the

00:06:08,479 --> 00:06:11,919
player

00:06:09,280 --> 00:06:13,199
there are also 13 unique items items are

00:06:11,919 --> 00:06:14,880
purchased by the player

00:06:13,199 --> 00:06:16,800
and when acquired change the rules of

00:06:14,880 --> 00:06:18,479
the game to benefit the player

00:06:16,800 --> 00:06:20,720
this could range from changing the speed

00:06:18,479 --> 00:06:22,160
of the player to changing the damage the

00:06:20,720 --> 00:06:24,240
player does to enemies

00:06:22,160 --> 00:06:25,840
or even changing the prices of items in

00:06:24,240 --> 00:06:28,160
the store the game has four

00:06:25,840 --> 00:06:30,080
different consumable drops consumables

00:06:28,160 --> 00:06:31,440
are dropped by enemies when destroyed

00:06:30,080 --> 00:06:33,199
so far there are drops that provide the

00:06:31,440 --> 00:06:34,800
player health and drops for giving the

00:06:33,199 --> 00:06:36,560
player money which in this game

00:06:34,800 --> 00:06:38,479
is represented by bright green space

00:06:36,560 --> 00:06:39,680
rocks the money is used to purchase

00:06:38,479 --> 00:06:41,440
items from the store

00:06:39,680 --> 00:06:43,280
items are listed in the store for a

00:06:41,440 --> 00:06:44,720
price when purchased by the player

00:06:43,280 --> 00:06:46,479
the item will drop from the top of the

00:06:44,720 --> 00:06:48,160
screen where the player can collect it

00:06:46,479 --> 00:06:50,000
there are also some animations 3d

00:06:48,160 --> 00:06:50,560
backgrounds and a work in progress boss

00:06:50,000 --> 00:06:52,319
in the game

00:06:50,560 --> 00:06:54,000
i will now hand it off to mika where she

00:06:52,319 --> 00:06:55,759
will give an overview of the entity

00:06:54,000 --> 00:06:57,039
component system architecture that

00:06:55,759 --> 00:06:58,560
amethyst uses

00:06:57,039 --> 00:07:00,160
throughout this talk we've been throwing

00:06:58,560 --> 00:07:01,840
around the term ecs

00:07:00,160 --> 00:07:03,520
and it's important that we address what

00:07:01,840 --> 00:07:06,160
it is before moving forward

00:07:03,520 --> 00:07:07,919
ecs stands for entity component system

00:07:06,160 --> 00:07:09,360
it's a common pattern used in game

00:07:07,919 --> 00:07:11,120
development that makes it easy to

00:07:09,360 --> 00:07:13,039
compose objects in a game because

00:07:11,120 --> 00:07:14,880
components can be arbitrarily added to

00:07:13,039 --> 00:07:16,400
entities this also makes development

00:07:14,880 --> 00:07:17,919
much more data-driven

00:07:16,400 --> 00:07:20,080
since entities are defined by the

00:07:17,919 --> 00:07:22,639
components that are attached to them

00:07:20,080 --> 00:07:24,479
so in summary an entity often

00:07:22,639 --> 00:07:25,919
represented with a single id

00:07:24,479 --> 00:07:28,080
can be composed of a number of

00:07:25,919 --> 00:07:29,919
components and a component

00:07:28,080 --> 00:07:32,160
acts like a container for data that can

00:07:29,919 --> 00:07:34,639
describe an aspect of an object

00:07:32,160 --> 00:07:36,639
and finally a system is a piece of logic

00:07:34,639 --> 00:07:37,919
that can operate on one or more entities

00:07:36,639 --> 00:07:40,240
in a game

00:07:37,919 --> 00:07:42,479
i find it easier to understand what ecs

00:07:40,240 --> 00:07:44,080
is through a series of examples

00:07:42,479 --> 00:07:46,240
this slide shows a screenshot of the

00:07:44,080 --> 00:07:47,840
game with five circled objects

00:07:46,240 --> 00:07:49,360
these objects are some examples of

00:07:47,840 --> 00:07:50,240
entities that are present in space

00:07:49,360 --> 00:07:52,160
shooter

00:07:50,240 --> 00:07:54,400
the entities circled in this image are

00:07:52,160 --> 00:07:57,520
sprite renders for the strafer enemy

00:07:54,400 --> 00:08:00,400
spaceship steel barrel item drone enemy

00:07:57,520 --> 00:08:01,199
and enemy projectile but as i mentioned

00:08:00,400 --> 00:08:03,840
before

00:08:01,199 --> 00:08:05,440
entities are represented with unique ids

00:08:03,840 --> 00:08:07,120
which is why the entities circled in

00:08:05,440 --> 00:08:08,720
this image have labels numbering them

00:08:07,120 --> 00:08:10,319
one through five

00:08:08,720 --> 00:08:12,479
attaching names to them such as

00:08:10,319 --> 00:08:14,160
spaceship or enemy are labels that make

00:08:12,479 --> 00:08:15,599
it easier to describe the entity's

00:08:14,160 --> 00:08:17,360
purpose to someone else

00:08:15,599 --> 00:08:18,720
next i'll explain the role components

00:08:17,360 --> 00:08:20,560
play in providing entities

00:08:18,720 --> 00:08:20,960
characteristics that are required for

00:08:20,560 --> 00:08:23,759
them

00:08:20,960 --> 00:08:25,759
to function in a game entities have a

00:08:23,759 --> 00:08:27,680
number of components attached to them

00:08:25,759 --> 00:08:29,599
these components define pieces of data

00:08:27,680 --> 00:08:31,680
that help describe some behaviors we

00:08:29,599 --> 00:08:32,880
expect an entity to have

00:08:31,680 --> 00:08:34,800
and it helps to think of these

00:08:32,880 --> 00:08:36,959
associations as collections of data

00:08:34,800 --> 00:08:38,560
grouped together under one id

00:08:36,959 --> 00:08:40,080
in these diagrams i have grouped

00:08:38,560 --> 00:08:42,640
together different components with the

00:08:40,080 --> 00:08:45,040
entity id they are associated with

00:08:42,640 --> 00:08:46,720
entity 1 has the component sprite render

00:08:45,040 --> 00:08:49,519
attack health and movement

00:08:46,720 --> 00:08:51,440
attached to it and entity 2 has similar

00:08:49,519 --> 00:08:52,959
components attached to it as well

00:08:51,440 --> 00:08:54,720
if we needed to access a health

00:08:52,959 --> 00:08:55,360
component specifically for the player

00:08:54,720 --> 00:08:57,200
entity

00:08:55,360 --> 00:08:58,720
then we need an expressive way to do

00:08:57,200 --> 00:09:00,560
this one way

00:08:58,720 --> 00:09:02,720
is to have another component called

00:09:00,560 --> 00:09:04,720
player tag attached to the entity

00:09:02,720 --> 00:09:06,640
so that we can differentiate a health

00:09:04,720 --> 00:09:08,320
component associated with the player

00:09:06,640 --> 00:09:10,240
entity from the others

00:09:08,320 --> 00:09:12,240
of course having something like a health

00:09:10,240 --> 00:09:14,480
component attached to an entity

00:09:12,240 --> 00:09:16,560
doesn't do much on its own we still need

00:09:14,480 --> 00:09:17,680
a way for the game to update the values

00:09:16,560 --> 00:09:19,519
of a health component

00:09:17,680 --> 00:09:21,600
when damage is dealt to the entity it's

00:09:19,519 --> 00:09:23,519
attached to and this is where the system

00:09:21,600 --> 00:09:25,440
part of ecs comes in

00:09:23,519 --> 00:09:26,560
but before we talk about the system part

00:09:25,440 --> 00:09:28,320
of ecs

00:09:26,560 --> 00:09:30,240
we should address component storages

00:09:28,320 --> 00:09:31,600
since this is how amethyst efficiently

00:09:30,240 --> 00:09:34,320
accesses and updates

00:09:31,600 --> 00:09:36,160
on collections of them giving components

00:09:34,320 --> 00:09:38,160
their own storages allows for

00:09:36,160 --> 00:09:40,320
faster access to data needed when

00:09:38,160 --> 00:09:42,240
updating an entity's component state

00:09:40,320 --> 00:09:44,320
this is especially important when a

00:09:42,240 --> 00:09:45,839
system may need to operate on hundreds

00:09:44,320 --> 00:09:47,839
of components at a time

00:09:45,839 --> 00:09:50,000
because of this it's important that

00:09:47,839 --> 00:09:52,320
component storages are responsible for

00:09:50,000 --> 00:09:53,120
containing and managing components of

00:09:52,320 --> 00:09:55,360
one type

00:09:53,120 --> 00:09:57,279
and for every component in a storage

00:09:55,360 --> 00:09:58,560
they have an entity id that they are

00:09:57,279 --> 00:10:00,160
associated with

00:09:58,560 --> 00:10:02,399
now that we have briefly explained

00:10:00,160 --> 00:10:04,320
component storages we can quickly go

00:10:02,399 --> 00:10:06,560
over the system part of ecs

00:10:04,320 --> 00:10:07,680
in this diagram we have an example of an

00:10:06,560 --> 00:10:09,600
animation system

00:10:07,680 --> 00:10:11,920
implemented using the amethyst game

00:10:09,600 --> 00:10:13,680
engine the animation system needs a way

00:10:11,920 --> 00:10:15,760
to know what sprite image is drawn to

00:10:13,680 --> 00:10:17,680
the screen during each game cycle

00:10:15,760 --> 00:10:18,880
this example shows that the animation

00:10:17,680 --> 00:10:21,360
system will need to

00:10:18,880 --> 00:10:23,360
read from a time resource resources in

00:10:21,360 --> 00:10:25,200
amethyst are containers of data that are

00:10:23,360 --> 00:10:27,200
not associated with an entity

00:10:25,200 --> 00:10:28,800
the other two storages it reads from are

00:10:27,200 --> 00:10:30,160
the animation and sprite render

00:10:28,800 --> 00:10:32,320
component storages

00:10:30,160 --> 00:10:34,079
using these resources the animation

00:10:32,320 --> 00:10:35,200
system will write to an entity sprite

00:10:34,079 --> 00:10:37,360
writer component

00:10:35,200 --> 00:10:39,360
in particular a sprite render component

00:10:37,360 --> 00:10:40,480
contains a property whose value can be

00:10:39,360 --> 00:10:42,640
modified to tell

00:10:40,480 --> 00:10:44,880
amethyst which sprite render should be

00:10:42,640 --> 00:10:47,040
drawn the system uses this to change the

00:10:44,880 --> 00:10:48,720
value in relation to the time resource

00:10:47,040 --> 00:10:49,360
which would result in an animation

00:10:48,720 --> 00:10:51,680
sequence

00:10:49,360 --> 00:10:53,120
the animation component serves as data

00:10:51,680 --> 00:10:54,880
the entity should be using when

00:10:53,120 --> 00:10:56,480
determining what to modify the sprite

00:10:54,880 --> 00:10:58,800
render component with

00:10:56,480 --> 00:11:00,720
now that we have a better idea of ecs we

00:10:58,800 --> 00:11:02,399
can identify some of the problems space

00:11:00,720 --> 00:11:04,000
shooter was experiencing that made it

00:11:02,399 --> 00:11:05,760
difficult to contribute to

00:11:04,000 --> 00:11:07,920
one of the first refactoring tasks we

00:11:05,760 --> 00:11:09,600
have identified was that the spaceship

00:11:07,920 --> 00:11:10,800
and enemy components shared a lot of

00:11:09,600 --> 00:11:12,480
redundant data

00:11:10,800 --> 00:11:14,800
these components made us take a step

00:11:12,480 --> 00:11:16,720
back and examine the basics of ecs

00:11:14,800 --> 00:11:18,240
a few things we identified was that we

00:11:16,720 --> 00:11:18,800
wanted to avoid components that were

00:11:18,240 --> 00:11:21,279
bloated

00:11:18,800 --> 00:11:22,880
had redundant data and as a result were

00:11:21,279 --> 00:11:24,640
difficult to reuse

00:11:22,880 --> 00:11:27,440
and we found these problems made some of

00:11:24,640 --> 00:11:29,839
the existing systems overly complex

00:11:27,440 --> 00:11:30,640
the first two points having components

00:11:29,839 --> 00:11:32,640
that were bloated

00:11:30,640 --> 00:11:34,720
and redundant data made it difficult to

00:11:32,640 --> 00:11:35,839
keep track of what data a component was

00:11:34,720 --> 00:11:37,360
responsible for

00:11:35,839 --> 00:11:39,040
this caused some scenarios where it

00:11:37,360 --> 00:11:39,360
wasn't clear what a system was meant to

00:11:39,040 --> 00:11:40,880
do

00:11:39,360 --> 00:11:42,560
and since these problems made them

00:11:40,880 --> 00:11:44,399
difficult to reuse

00:11:42,560 --> 00:11:46,079
it also made these properties specific

00:11:44,399 --> 00:11:46,880
to the component they were associated

00:11:46,079 --> 00:11:48,800
with

00:11:46,880 --> 00:11:50,639
and this meant that modifying something

00:11:48,800 --> 00:11:52,320
like the health stat of an entity would

00:11:50,639 --> 00:11:54,160
need to specifically access the

00:11:52,320 --> 00:11:56,079
component containing it rather than a

00:11:54,160 --> 00:11:57,760
generic health component

00:11:56,079 --> 00:11:59,279
to understand how we can break down

00:11:57,760 --> 00:12:01,120
these components in a way that makes

00:11:59,279 --> 00:12:03,600
them reusable and concise

00:12:01,120 --> 00:12:05,600
it helps to define a set of requirements

00:12:03,600 --> 00:12:07,600
this means that we should define

00:12:05,600 --> 00:12:10,000
what the expected behavior of an entity

00:12:07,600 --> 00:12:11,600
should be this would help conceptualize

00:12:10,000 --> 00:12:13,440
how the components of an entity work

00:12:11,600 --> 00:12:15,519
together and we can do this by

00:12:13,440 --> 00:12:18,000
emphasizing pieces of functionality

00:12:15,519 --> 00:12:19,279
of an entity instead of as in whole to

00:12:18,000 --> 00:12:20,880
illustrate this point

00:12:19,279 --> 00:12:22,320
we can list some of the expected

00:12:20,880 --> 00:12:25,279
behaviors of the spaceship

00:12:22,320 --> 00:12:26,959
enemy and item entities as components it

00:12:25,279 --> 00:12:28,320
might seem like a lot of components for

00:12:26,959 --> 00:12:30,000
only three entities

00:12:28,320 --> 00:12:31,920
but if we keep in mind that every

00:12:30,000 --> 00:12:33,440
component is a small piece of data that

00:12:31,920 --> 00:12:35,200
represents a single piece of

00:12:33,440 --> 00:12:37,360
functionality for an entity

00:12:35,200 --> 00:12:39,200
then it's easier to have a holistic view

00:12:37,360 --> 00:12:41,040
of the entity's behavior

00:12:39,200 --> 00:12:42,800
if we look at the spaceship and enemy

00:12:41,040 --> 00:12:44,959
entities we can see that they are

00:12:42,800 --> 00:12:46,320
expected to have a number of similar

00:12:44,959 --> 00:12:48,639
behaviors such as motion

00:12:46,320 --> 00:12:50,639
animation and health these behaviors can

00:12:48,639 --> 00:12:53,040
be described as pieces of data in the

00:12:50,639 --> 00:12:54,880
form of their own generic components

00:12:53,040 --> 00:12:57,440
having components reusable between

00:12:54,880 --> 00:12:59,360
entities is what ecs strives to do

00:12:57,440 --> 00:13:01,200
you might also notice that the spaceship

00:12:59,360 --> 00:13:03,440
enemy and item entities

00:13:01,200 --> 00:13:05,279
have a component with their same name

00:13:03,440 --> 00:13:07,120
for the space shooter game we made the

00:13:05,279 --> 00:13:08,639
decision that functionality that is

00:13:07,120 --> 00:13:11,600
specific to an entity should be

00:13:08,639 --> 00:13:13,440
contained by its own specific component

00:13:11,600 --> 00:13:15,600
now that we have some behaviors defined

00:13:13,440 --> 00:13:17,600
for the spaceship and enemy component

00:13:15,600 --> 00:13:20,079
let's examine an older revision of the

00:13:17,600 --> 00:13:21,680
spaceship and enemy components in

00:13:20,079 --> 00:13:23,680
particular we'll take a look at the

00:13:21,680 --> 00:13:25,279
motion component as one of the required

00:13:23,680 --> 00:13:27,200
behaviors for these two

00:13:25,279 --> 00:13:29,040
in these code snippets spaceship and

00:13:27,200 --> 00:13:31,120
enemy components are defining data

00:13:29,040 --> 00:13:33,120
required for the motion behavior

00:13:31,120 --> 00:13:35,120
but as we mentioned before we wanted to

00:13:33,120 --> 00:13:37,040
avoid repeating this data and instead

00:13:35,120 --> 00:13:38,720
extracting them into their own generic

00:13:37,040 --> 00:13:40,959
motion component

00:13:38,720 --> 00:13:42,320
that can be attached to any other entity

00:13:40,959 --> 00:13:44,320
that requires motion

00:13:42,320 --> 00:13:46,320
the images here highlight the properties

00:13:44,320 --> 00:13:47,199
that define motion behavior and we can

00:13:46,320 --> 00:13:49,600
now move

00:13:47,199 --> 00:13:51,360
them into their own component this

00:13:49,600 --> 00:13:53,920
motion component applies to entity

00:13:51,360 --> 00:13:55,920
motion within a two-dimensional space

00:13:53,920 --> 00:13:57,680
motion in space shooter refers to an

00:13:55,920 --> 00:13:58,639
entity's velocity acceleration

00:13:57,680 --> 00:14:01,440
deceleration

00:13:58,639 --> 00:14:03,360
and maximum speed values we also

00:14:01,440 --> 00:14:04,959
simplified some of the properties to be

00:14:03,360 --> 00:14:07,360
represented as vectors

00:14:04,959 --> 00:14:08,320
such as velocity to store both its x and

00:14:07,360 --> 00:14:10,320
y values

00:14:08,320 --> 00:14:11,920
and now i'll hand it off to carlo who

00:14:10,320 --> 00:14:13,760
will be explaining how our work on

00:14:11,920 --> 00:14:16,320
refactoring these components allows for

00:14:13,760 --> 00:14:18,480
designing more containable systems

00:14:16,320 --> 00:14:20,800
before when i was summarizing the game i

00:14:18,480 --> 00:14:22,560
talked about items in space shooter

00:14:20,800 --> 00:14:24,480
items fuel the progression of the player

00:14:22,560 --> 00:14:25,040
in the game they are purchased from the

00:14:24,480 --> 00:14:26,720
store

00:14:25,040 --> 00:14:28,320
and they modify the rules of the game to

00:14:26,720 --> 00:14:29,360
advantage the player as the player

00:14:28,320 --> 00:14:31,279
destroys enemies

00:14:29,360 --> 00:14:32,720
their spaceship can collect currency

00:14:31,279 --> 00:14:33,680
which allows them to destroy enemies

00:14:32,720 --> 00:14:35,120
more efficiently

00:14:33,680 --> 00:14:37,040
which allows the player to collect more

00:14:35,120 --> 00:14:38,880
currency and more items and so on

00:14:37,040 --> 00:14:40,320
since items are intended to affect every

00:14:38,880 --> 00:14:41,920
part of the game how can we implement

00:14:40,320 --> 00:14:43,519
them so the systems stay lean and

00:14:41,920 --> 00:14:45,519
focused while at the same time

00:14:43,519 --> 00:14:47,199
allowing them to detect if an item is

00:14:45,519 --> 00:14:48,720
collected for example

00:14:47,199 --> 00:14:50,959
in the game there's an item called

00:14:48,720 --> 00:14:53,040
frequency augmenter when collected this

00:14:50,959 --> 00:14:54,800
item sharply increases the rate of fire

00:14:53,040 --> 00:14:56,639
for the player collisions between items

00:14:54,800 --> 00:14:57,279
and players are detected in a system

00:14:56,639 --> 00:14:59,519
called

00:14:57,279 --> 00:15:01,600
spaceship item collision system all item

00:14:59,519 --> 00:15:03,360
components contain a hash map of data

00:15:01,600 --> 00:15:05,279
about what attributes the item affects

00:15:03,360 --> 00:15:07,040
for the frequency augmenter item

00:15:05,279 --> 00:15:08,560
this data represents an increase in the

00:15:07,040 --> 00:15:10,480
fire rate for the player

00:15:08,560 --> 00:15:12,240
this data needs to find its way to a

00:15:10,480 --> 00:15:13,760
system called spaceship system

00:15:12,240 --> 00:15:15,760
which is a system for managing the

00:15:13,760 --> 00:15:17,600
spaceship attributes so how do we get

00:15:15,760 --> 00:15:18,160
this data from the collision detection

00:15:17,600 --> 00:15:20,639
system

00:15:18,160 --> 00:15:22,639
into the spaceship system the solution

00:15:20,639 --> 00:15:24,720
is through the use of an event channel

00:15:22,639 --> 00:15:26,240
event channels function as communication

00:15:24,720 --> 00:15:28,240
lines between systems

00:15:26,240 --> 00:15:29,600
a good analogy for event channels is a

00:15:28,240 --> 00:15:31,279
radio broadcast

00:15:29,600 --> 00:15:33,360
a system that needs to send data to

00:15:31,279 --> 00:15:35,040
other systems can initialize an event

00:15:33,360 --> 00:15:35,759
message with the data that needs to be

00:15:35,040 --> 00:15:37,360
sent

00:15:35,759 --> 00:15:39,279
this message is then written to the

00:15:37,360 --> 00:15:40,959
event channel in the source system

00:15:39,279 --> 00:15:43,199
this event channel can be thought of as

00:15:40,959 --> 00:15:45,279
a radio tower broadcasting a message

00:15:43,199 --> 00:15:47,440
other systems can then tune in to this

00:15:45,279 --> 00:15:49,759
channel by setting up an event reader

00:15:47,440 --> 00:15:51,600
to look for events of a certain type

00:15:49,759 --> 00:15:53,279
then the system can read the data from

00:15:51,600 --> 00:15:54,000
the event message and use it in the

00:15:53,279 --> 00:15:55,920
system

00:15:54,000 --> 00:15:57,759
going back to the frequency augmenter

00:15:55,920 --> 00:15:59,279
item we can see that when the item is

00:15:57,759 --> 00:16:01,360
collected in the spaceship item

00:15:59,279 --> 00:16:03,279
collision system the item data is used

00:16:01,360 --> 00:16:05,040
to initialize an item get event

00:16:03,279 --> 00:16:06,639
and this event containing the data can

00:16:05,040 --> 00:16:08,880
be sent via an event channel

00:16:06,639 --> 00:16:10,480
to the spaceship system where the

00:16:08,880 --> 00:16:11,519
attributes can be added to the spaceship

00:16:10,480 --> 00:16:13,519
that collected it

00:16:11,519 --> 00:16:15,519
this method of sending item data between

00:16:13,519 --> 00:16:17,440
systems can be extended for items that

00:16:15,519 --> 00:16:19,360
affect any kind of system in the game

00:16:17,440 --> 00:16:21,040
in this next section we will go over how

00:16:19,360 --> 00:16:23,120
we collaborated together to implement

00:16:21,040 --> 00:16:24,639
the refactors we discussed previously

00:16:23,120 --> 00:16:26,160
one of the most important parts of

00:16:24,639 --> 00:16:26,800
trying to revive the space shooter

00:16:26,160 --> 00:16:28,720
project

00:16:26,800 --> 00:16:29,920
was to establish a workflow that worked

00:16:28,720 --> 00:16:31,920
for the both of us

00:16:29,920 --> 00:16:33,440
we needed a way to develop and capture

00:16:31,920 --> 00:16:34,399
the progress we wanted to see in the

00:16:33,440 --> 00:16:35,920
next few weeks

00:16:34,399 --> 00:16:38,240
this meant that we would need to discuss

00:16:35,920 --> 00:16:39,759
and prioritize tasks we both agreed

00:16:38,240 --> 00:16:41,600
would get the project's code in a better

00:16:39,759 --> 00:16:43,600
place we will be exploring four

00:16:41,600 --> 00:16:44,240
approaches we use to stay focused which

00:16:43,600 --> 00:16:46,480
are

00:16:44,240 --> 00:16:47,920
collaborative coding practices writing

00:16:46,480 --> 00:16:50,880
documentation together

00:16:47,920 --> 00:16:52,160
communication and weekly meetings the

00:16:50,880 --> 00:16:53,759
first factor that has made our

00:16:52,160 --> 00:16:56,079
collaboration successful

00:16:53,759 --> 00:16:57,360
is our collaborative coding practices

00:16:56,079 --> 00:17:00,480
when i started this project

00:16:57,360 --> 00:17:00,880
in 2019 i was using github for a little

00:17:00,480 --> 00:17:02,160
more

00:17:00,880 --> 00:17:04,319
than a place to safely store and

00:17:02,160 --> 00:17:06,240
distribute files i had some experience

00:17:04,319 --> 00:17:07,839
using branches and pull requests but i

00:17:06,240 --> 00:17:09,520
knew that i was not using the tools

00:17:07,839 --> 00:17:10,160
github provides to the extent that i

00:17:09,520 --> 00:17:11,839
should be

00:17:10,160 --> 00:17:13,839
i didn't really need to though because

00:17:11,839 --> 00:17:15,679
there were very infrequent contributors

00:17:13,839 --> 00:17:17,199
to the project besides me alone

00:17:15,679 --> 00:17:19,120
part of the reason why i reached out to

00:17:17,199 --> 00:17:21,120
mika to collaborate on the project

00:17:19,120 --> 00:17:22,959
was because i knew that she likely had a

00:17:21,120 --> 00:17:24,480
lot more experience using these tools

00:17:22,959 --> 00:17:26,559
through her work at mozilla

00:17:24,480 --> 00:17:28,400
after a week of working together mika

00:17:26,559 --> 00:17:29,919
built up enough trust for me to give her

00:17:28,400 --> 00:17:31,520
maintainer privileges

00:17:29,919 --> 00:17:33,039
so that she could more easily contribute

00:17:31,520 --> 00:17:33,760
to the project without having to go

00:17:33,039 --> 00:17:35,360
through me

00:17:33,760 --> 00:17:37,039
this allowed her to manage issues

00:17:35,360 --> 00:17:38,240
branches pull requests

00:17:37,039 --> 00:17:40,960
and other things related to the

00:17:38,240 --> 00:17:41,760
repository i was in turn able to follow

00:17:40,960 --> 00:17:43,679
her lead

00:17:41,760 --> 00:17:44,799
and learn for myself how to use these

00:17:43,679 --> 00:17:46,720
collaborative tools

00:17:44,799 --> 00:17:48,400
my last point about these tools is that

00:17:46,720 --> 00:17:48,799
even though we are communicating through

00:17:48,400 --> 00:17:50,880
direct

00:17:48,799 --> 00:17:52,720
communication lines we still make sure

00:17:50,880 --> 00:17:54,640
to do public code reviews

00:17:52,720 --> 00:17:56,080
through github even if it is just a

00:17:54,640 --> 00:17:58,080
small change

00:17:56,080 --> 00:17:59,440
this makes our decisions transparent

00:17:58,080 --> 00:18:00,240
which is good for the growth of the

00:17:59,440 --> 00:18:02,240
project

00:18:00,240 --> 00:18:03,440
and it established a formal process for

00:18:02,240 --> 00:18:05,280
reviewing code

00:18:03,440 --> 00:18:07,120
now i will hand it over to mika to talk

00:18:05,280 --> 00:18:08,400
about the importance of documentation

00:18:07,120 --> 00:18:10,240
for our project

00:18:08,400 --> 00:18:12,400
since carlo and i were both learning new

00:18:10,240 --> 00:18:13,919
things as we refactored space shooter we

00:18:12,400 --> 00:18:15,200
wanted to make sure that we worked on

00:18:13,919 --> 00:18:16,799
documentation

00:18:15,200 --> 00:18:18,480
as a way to record our progress and

00:18:16,799 --> 00:18:20,559
thought processes

00:18:18,480 --> 00:18:22,400
this included tasks such as updating the

00:18:20,559 --> 00:18:24,799
readme to be more of an entry point for

00:18:22,400 --> 00:18:26,400
learning about the space shooter project

00:18:24,799 --> 00:18:28,000
anyone who is interested in learning

00:18:26,400 --> 00:18:30,160
more either about learning

00:18:28,000 --> 00:18:32,240
the game or contributing would go to the

00:18:30,160 --> 00:18:34,320
project's md book where more thorough

00:18:32,240 --> 00:18:36,559
information can be found

00:18:34,320 --> 00:18:38,240
mdbook is a tool written in rust that is

00:18:36,559 --> 00:18:39,600
used to create modern online books for

00:18:38,240 --> 00:18:41,440
markdown files

00:18:39,600 --> 00:18:43,200
we decide to create a book for space

00:18:41,440 --> 00:18:44,880
shooter as a central location for

00:18:43,200 --> 00:18:46,960
documentation

00:18:44,880 --> 00:18:48,799
right now our most important pieces of

00:18:46,960 --> 00:18:50,640
content would be helping anyone make new

00:18:48,799 --> 00:18:52,080
contributions to the project

00:18:50,640 --> 00:18:53,919
this meant that we needed to create a

00:18:52,080 --> 00:18:54,240
basic contributing guide for those who

00:18:53,919 --> 00:18:56,480
are

00:18:54,240 --> 00:18:58,320
interested in contributing code we also

00:18:56,480 --> 00:19:00,080
made sure we had a code of conduct in

00:18:58,320 --> 00:19:02,320
place to establish a safe environment

00:19:00,080 --> 00:19:04,080
where everyone can contribute and learn

00:19:02,320 --> 00:19:05,840
while documentation about the project's

00:19:04,080 --> 00:19:07,200
architecture and code have been the main

00:19:05,840 --> 00:19:08,799
focus right now

00:19:07,200 --> 00:19:10,720
carlo has been actively working to

00:19:08,799 --> 00:19:12,720
provide contribution guidelines

00:19:10,720 --> 00:19:14,799
around adding new items to the game as

00:19:12,720 --> 00:19:16,080
well as artwork the goal of this effort

00:19:14,799 --> 00:19:17,919
is to have more than one way to

00:19:16,080 --> 00:19:18,880
contribute to space shooter which can be

00:19:17,919 --> 00:19:21,600
code artwork

00:19:18,880 --> 00:19:23,120
ideas for items and even documentation

00:19:21,600 --> 00:19:23,840
the online book for space shooter is

00:19:23,120 --> 00:19:25,679
still a work in

00:19:23,840 --> 00:19:27,120
progress but anyone interested in

00:19:25,679 --> 00:19:30,880
previewing it can check it out

00:19:27,120 --> 00:19:35,039
at amethyst.github.io

00:19:30,880 --> 00:19:36,880
space underscore shooter underscore rs

00:19:35,039 --> 00:19:38,480
and now i'll hand it off to carlow who

00:19:36,880 --> 00:19:40,240
will be explaining the importance of

00:19:38,480 --> 00:19:41,760
establishing goals and ideas through

00:19:40,240 --> 00:19:43,600
weekly meetings

00:19:41,760 --> 00:19:44,960
weekly meetings were critical to our

00:19:43,600 --> 00:19:46,240
progress so far

00:19:44,960 --> 00:19:48,480
in these meetings we established

00:19:46,240 --> 00:19:50,320
short-term goals which an example would

00:19:48,480 --> 00:19:52,240
be refactoring a bloated component

00:19:50,320 --> 00:19:54,400
into multiple smaller and more general

00:19:52,240 --> 00:19:56,320
components long-term goals

00:19:54,400 --> 00:19:58,000
an example would be adding a boss to the

00:19:56,320 --> 00:20:00,000
game and what kind of components

00:19:58,000 --> 00:20:01,840
entities and systems it require

00:20:00,000 --> 00:20:03,520
and the last type of goal are these

00:20:01,840 --> 00:20:04,559
larger project goals that relate

00:20:03,520 --> 00:20:06,240
specifically to

00:20:04,559 --> 00:20:07,760
space shooter rs as a project this is

00:20:06,240 --> 00:20:08,400
what kind of documentation do we want to

00:20:07,760 --> 00:20:10,320
have

00:20:08,400 --> 00:20:11,520
and do even plan on selling a version of

00:20:10,320 --> 00:20:12,960
this game at one point

00:20:11,520 --> 00:20:14,720
these weekly meetings were also

00:20:12,960 --> 00:20:16,480
important for sharing ideas

00:20:14,720 --> 00:20:18,480
our main guiding principle for sharing

00:20:16,480 --> 00:20:20,799
ideas is that while some ideas

00:20:18,480 --> 00:20:22,320
are certainly bad all ideas are worth

00:20:20,799 --> 00:20:24,559
sharing this is important

00:20:22,320 --> 00:20:26,080
for us because we have to not be afraid

00:20:24,559 --> 00:20:27,520
of sharing ideas around each other to

00:20:26,080 --> 00:20:28,720
make sure that we are on the same page

00:20:27,520 --> 00:20:30,640
with the project

00:20:28,720 --> 00:20:32,240
some examples of things we might share

00:20:30,640 --> 00:20:35,520
are character abilities

00:20:32,240 --> 00:20:36,640
item ideas bosses and the structure of

00:20:35,520 --> 00:20:38,559
the game

00:20:36,640 --> 00:20:40,320
now mika will discuss our methods for

00:20:38,559 --> 00:20:41,520
effectively communicating when working

00:20:40,320 --> 00:20:43,520
on the project

00:20:41,520 --> 00:20:45,360
having a way to track discussions around

00:20:43,520 --> 00:20:46,960
some refactoring decisions was one of

00:20:45,360 --> 00:20:48,320
the best ways to capture our thought

00:20:46,960 --> 00:20:50,080
processes

00:20:48,320 --> 00:20:52,400
we did this by having these discussions

00:20:50,080 --> 00:20:54,799
on github issues and code reviews

00:20:52,400 --> 00:20:56,640
if we had any questions or ideas about

00:20:54,799 --> 00:20:58,320
an issue we were working on

00:20:56,640 --> 00:20:59,679
we would post them to the issue they

00:20:58,320 --> 00:21:01,760
were relevant to

00:20:59,679 --> 00:21:03,840
ideally these discussions would involve

00:21:01,760 --> 00:21:05,520
any pre-implementation work such as

00:21:03,840 --> 00:21:08,000
clarifying the problem or trying to

00:21:05,520 --> 00:21:10,000
solve before writing any code

00:21:08,000 --> 00:21:11,840
then once a pull request has been

00:21:10,000 --> 00:21:12,720
submitted as a potential fix for that

00:21:11,840 --> 00:21:14,240
issue

00:21:12,720 --> 00:21:16,080
we could move the implementation

00:21:14,240 --> 00:21:18,400
discussions to there while these

00:21:16,080 --> 00:21:20,320
discussions can be done privately

00:21:18,400 --> 00:21:22,159
information that is easily available

00:21:20,320 --> 00:21:24,000
would allow us to revisit the reasoning

00:21:22,159 --> 00:21:24,880
for why we decided to make certain

00:21:24,000 --> 00:21:27,679
implementation

00:21:24,880 --> 00:21:30,159
decisions this can make it easier for

00:21:27,679 --> 00:21:32,640
when documentation is created to address

00:21:30,159 --> 00:21:34,880
this section of the code or if a new

00:21:32,640 --> 00:21:37,120
architecture problem arises as a result

00:21:34,880 --> 00:21:38,720
of fixing that one issue

00:21:37,120 --> 00:21:40,799
at the end of the day making these

00:21:38,720 --> 00:21:42,480
discussions public on github will help

00:21:40,799 --> 00:21:44,159
create an environment that encourages

00:21:42,480 --> 00:21:45,679
open discussion and questions with

00:21:44,159 --> 00:21:47,120
others

00:21:45,679 --> 00:21:48,960
sometimes discussions around

00:21:47,120 --> 00:21:50,880
implementation details can be less

00:21:48,960 --> 00:21:52,799
relevant when addressing an issue

00:21:50,880 --> 00:21:54,480
this is when we discuss project ideas

00:21:52,799 --> 00:21:56,159
through direct messaging

00:21:54,480 --> 00:21:57,679
it can be difficult to find a balance

00:21:56,159 --> 00:21:59,440
between deciding which are relevant to

00:21:57,679 --> 00:22:01,600
the task at hand and what ends up being

00:21:59,440 --> 00:22:03,520
unnecessary information

00:22:01,600 --> 00:22:05,360
in general project ideas that are not

00:22:03,520 --> 00:22:06,559
ready for the public are kept in direct

00:22:05,360 --> 00:22:08,240
messages

00:22:06,559 --> 00:22:09,919
this refers to features that are not

00:22:08,240 --> 00:22:12,159
relevant to our current goal

00:22:09,919 --> 00:22:14,320
such as future project ideas and also

00:22:12,159 --> 00:22:15,039
any implementation ideas that are off

00:22:14,320 --> 00:22:17,039
topic

00:22:15,039 --> 00:22:18,720
and now i'll hand it off to carlo who

00:22:17,039 --> 00:22:20,720
will explain how creating informal

00:22:18,720 --> 00:22:22,400
documentation helped with communicating

00:22:20,720 --> 00:22:25,440
the state of the space shooter project

00:22:22,400 --> 00:22:27,360
to help onboard me onto the project

00:22:25,440 --> 00:22:29,120
i made two informal documents for when

00:22:27,360 --> 00:22:31,200
mika joined the project

00:22:29,120 --> 00:22:32,400
they were called current state and ideal

00:22:31,200 --> 00:22:34,080
state

00:22:32,400 --> 00:22:35,679
the current state document described the

00:22:34,080 --> 00:22:37,600
game as it currently was

00:22:35,679 --> 00:22:39,120
and the ideal state document described

00:22:37,600 --> 00:22:41,840
the game as i thought it should be

00:22:39,120 --> 00:22:42,480
after refactor the intent of these

00:22:41,840 --> 00:22:44,320
documents

00:22:42,480 --> 00:22:45,679
was for mika to use them as a reference

00:22:44,320 --> 00:22:46,480
as she was getting familiar with the

00:22:45,679 --> 00:22:48,000
game

00:22:46,480 --> 00:22:50,960
while at the same time explaining what

00:22:48,000 --> 00:22:52,640
my current intentions for the game were

00:22:50,960 --> 00:22:54,480
as mika became more comfortable working

00:22:52,640 --> 00:22:56,400
on the project we were able to start

00:22:54,480 --> 00:22:58,159
using the ideal state document to have

00:22:56,400 --> 00:23:00,640
in-depth discussions about what the

00:22:58,159 --> 00:23:02,640
ideal state of the game should look like

00:23:00,640 --> 00:23:04,240
over time as we collaborated this

00:23:02,640 --> 00:23:06,880
document slowly started to turn

00:23:04,240 --> 00:23:08,640
into a more informal ideas document

00:23:06,880 --> 00:23:10,159
where we throw ideas out for discussion

00:23:08,640 --> 00:23:12,080
as we think of them

00:23:10,159 --> 00:23:14,240
a lot of these informal ideas came from

00:23:12,080 --> 00:23:15,760
inspiration we drew from other games

00:23:14,240 --> 00:23:17,600
after a few weeks of consistent

00:23:15,760 --> 00:23:19,440
collaboration on this project

00:23:17,600 --> 00:23:21,440
i started working on a few more formal

00:23:19,440 --> 00:23:22,159
documents to put the longer term ideas

00:23:21,440 --> 00:23:24,720
in my head

00:23:22,159 --> 00:23:26,720
onto paper the first document of this

00:23:24,720 --> 00:23:28,559
type i created was a large flowchart

00:23:26,720 --> 00:23:29,919
explaining my ideas for what progression

00:23:28,559 --> 00:23:31,760
through the game could look like

00:23:29,919 --> 00:23:33,679
this included the progression of levels

00:23:31,760 --> 00:23:34,159
unlocking characters where bosses would

00:23:33,679 --> 00:23:35,679
be

00:23:34,159 --> 00:23:38,080
and how theming would change between

00:23:35,679 --> 00:23:40,400
levels the next more formal documents i

00:23:38,080 --> 00:23:43,039
created were the mvps for the project

00:23:40,400 --> 00:23:44,960
i say mvps because i wrote two based on

00:23:43,039 --> 00:23:45,919
the two different scopes we have for the

00:23:44,960 --> 00:23:48,320
project

00:23:45,919 --> 00:23:49,279
the first mvp was for space shooter as a

00:23:48,320 --> 00:23:51,279
showcase game

00:23:49,279 --> 00:23:52,960
this includes how many items characters

00:23:51,279 --> 00:23:54,880
bosses levels and enemies

00:23:52,960 --> 00:23:56,240
you want in the game the general rule

00:23:54,880 --> 00:23:58,080
for this mvp

00:23:56,240 --> 00:23:59,360
was that things should only be included

00:23:58,080 --> 00:24:01,120
in the showcase game

00:23:59,360 --> 00:24:03,039
to the point where they made sense for a

00:24:01,120 --> 00:24:03,760
game intended to show off the amethyst

00:24:03,039 --> 00:24:06,400
engine

00:24:03,760 --> 00:24:07,760
the second mvp was for space shooter as

00:24:06,400 --> 00:24:10,159
a fully released game

00:24:07,760 --> 00:24:12,080
the only difference between this mvp and

00:24:10,159 --> 00:24:13,600
the showcase game nvp

00:24:12,080 --> 00:24:15,440
is that the general rule for this

00:24:13,600 --> 00:24:17,200
document is that it contains more

00:24:15,440 --> 00:24:18,000
content to make the game as fun as

00:24:17,200 --> 00:24:19,840
possible

00:24:18,000 --> 00:24:21,120
rather than just to show off the engine

00:24:19,840 --> 00:24:23,039
an example of this would be things

00:24:21,120 --> 00:24:23,760
relating to a story or even a secret

00:24:23,039 --> 00:24:25,440
ending

00:24:23,760 --> 00:24:28,000
and now i'll hand it over to mika to

00:24:25,440 --> 00:24:29,600
conclude our talk so in summary the main

00:24:28,000 --> 00:24:31,039
takeaways on the collaboration

00:24:29,600 --> 00:24:33,360
approaches we used were that

00:24:31,039 --> 00:24:36,240
engaging regularly in open discussion is

00:24:33,360 --> 00:24:37,919
beneficial to capturing project process

00:24:36,240 --> 00:24:39,760
documentation is important for

00:24:37,919 --> 00:24:41,279
solidifying knowledge about project

00:24:39,760 --> 00:24:43,440
architecture decisions

00:24:41,279 --> 00:24:45,440
and sharing ideas regularly keeps

00:24:43,440 --> 00:24:47,039
everyone on the same page

00:24:45,440 --> 00:24:49,679
and this is what we found to be the most

00:24:47,039 --> 00:24:51,600
helpful for reviving a dead rust project

00:24:49,679 --> 00:24:53,200
if you're interested in learning rust or

00:24:51,600 --> 00:24:54,000
just want to contribute to an open

00:24:53,200 --> 00:24:56,400
source game

00:24:54,000 --> 00:24:58,240
then we'd be happy to help working on

00:24:56,400 --> 00:24:58,880
space shooter is a project that aims to

00:24:58,240 --> 00:25:01,360
be a fun

00:24:58,880 --> 00:25:02,799
and informative learning experience

00:25:01,360 --> 00:25:05,200
whether it's with code

00:25:02,799 --> 00:25:07,120
art and or documentation feel free to

00:25:05,200 --> 00:25:07,919
reach out and we'd be excited to meet

00:25:07,120 --> 00:25:09,919
you

00:25:07,919 --> 00:25:15,840
and thank you for attending our talk we

00:25:09,919 --> 00:25:15,840
are now open to taking any questions

00:25:15,919 --> 00:25:21,200
great talk glad you liked it

00:25:21,360 --> 00:25:28,159
so uh first question is um

00:25:25,440 --> 00:25:29,120
why is item and spaceship collision a

00:25:28,159 --> 00:25:33,360
separate system

00:25:29,120 --> 00:25:33,360
from spaceship and enemy collision

00:25:33,600 --> 00:25:37,520
uh so we organized our systems to listen

00:25:35,760 --> 00:25:40,159
for specific event types so

00:25:37,520 --> 00:25:42,159
um like in in this example spaceship to

00:25:40,159 --> 00:25:45,440
enemy and spaceship to items

00:25:42,159 --> 00:25:46,240
were their own event types and because

00:25:45,440 --> 00:25:48,080
of that we

00:25:46,240 --> 00:25:49,840
decided to make that the decision to

00:25:48,080 --> 00:25:52,559
create separate systems for them so it

00:25:49,840 --> 00:25:54,880
was easier to

00:25:52,559 --> 00:25:56,720
maintain the logic that was specific to

00:25:54,880 --> 00:25:59,440
those particular

00:25:56,720 --> 00:25:59,440
event types

00:26:00,480 --> 00:26:06,240
but yeah gotcha

00:26:04,320 --> 00:26:08,320
um do you feel there is a difference

00:26:06,240 --> 00:26:11,360
between starting a game

00:26:08,320 --> 00:26:14,400
a game design with uh ecs

00:26:11,360 --> 00:26:16,880
and moving one from uh something else to

00:26:14,400 --> 00:26:16,880
ecs

00:26:17,600 --> 00:26:20,960
yeah i can take this one uh yes so i

00:26:20,559 --> 00:26:24,000
have

00:26:20,960 --> 00:26:27,360
i've tried a few smaller games i've done

00:26:24,000 --> 00:26:27,919
like a game jam in the past and yeah ecs

00:26:27,360 --> 00:26:31,279
was very

00:26:27,919 --> 00:26:33,840
unique to me because of the way it

00:26:31,279 --> 00:26:34,320
organizes the data uh it's completely

00:26:33,840 --> 00:26:36,480
different

00:26:34,320 --> 00:26:38,640
so i think the most developed one i've

00:26:36,480 --> 00:26:40,640
done in the past was something with pi

00:26:38,640 --> 00:26:43,279
game and i was sort of

00:26:40,640 --> 00:26:44,000
using the object-oriented tools there to

00:26:43,279 --> 00:26:46,000
make

00:26:44,000 --> 00:26:47,760
to best represent the data in that way

00:26:46,000 --> 00:26:49,600
and it wasn't

00:26:47,760 --> 00:26:50,799
it's very easy to get organized and ecs

00:26:49,600 --> 00:26:53,840
is very good

00:26:50,799 --> 00:26:55,279
at constraining the

00:26:53,840 --> 00:26:57,279
the data and systems into being

00:26:55,279 --> 00:26:59,440
organized which is really nice

00:26:57,279 --> 00:27:02,080
but as you can see we need a refactor

00:26:59,440 --> 00:27:05,200
anyway so you can still mess it up

00:27:02,080 --> 00:27:07,200
of course always always always so it

00:27:05,200 --> 00:27:08,080
seems like ecs is a popular solution for

00:27:07,200 --> 00:27:10,240
games

00:27:08,080 --> 00:27:12,960
but are there any situations where you

00:27:10,240 --> 00:27:12,960
would not use it

00:27:13,360 --> 00:27:16,559
i can't think of any but i don't think

00:27:15,200 --> 00:27:20,559
we're still learning ecs

00:27:16,559 --> 00:27:22,159
and i uh

00:27:20,559 --> 00:27:24,799
yeah i can't think of a situation where

00:27:22,159 --> 00:27:28,960
i wouldn't but i don't think i'm

00:27:24,799 --> 00:27:28,960
uh i know enough to speak fully to that

00:27:29,279 --> 00:27:32,880
also it seems that um the amethyst game

00:27:31,919 --> 00:27:34,559
engine

00:27:32,880 --> 00:27:36,559
in recent versions so i'm not quite sure

00:27:34,559 --> 00:27:38,320
if it's released or not yet

00:27:36,559 --> 00:27:39,919
but it seems they're moving on to a new

00:27:38,320 --> 00:27:42,799
ecs system

00:27:39,919 --> 00:27:45,440
can you comment on that or or know

00:27:42,799 --> 00:27:45,440
anything about that

00:27:46,840 --> 00:27:50,480
uh i i know that yeah they're switching

00:27:49,919 --> 00:27:54,080
from

00:27:50,480 --> 00:27:56,399
uh library called specs to legion and

00:27:54,080 --> 00:27:57,679
i don't think i'm qualified to talk

00:27:56,399 --> 00:27:59,360
about it but

00:27:57,679 --> 00:28:01,120
yeah if you are interested in learning

00:27:59,360 --> 00:28:02,640
about that there

00:28:01,120 --> 00:28:05,279
you should join the amethyst discord

00:28:02,640 --> 00:28:08,720
that's where we learn a lot about it so

00:28:05,279 --> 00:28:10,000
yeah it's it's not something that i

00:28:08,720 --> 00:28:11,760
it's something that we'll need to

00:28:10,000 --> 00:28:15,039
probably do some refactoring

00:28:11,760 --> 00:28:16,559
to adjust for that in the future but uh

00:28:15,039 --> 00:28:18,080
yeah join the amethyst discord i think

00:28:16,559 --> 00:28:20,720
to learn more about that

00:28:18,080 --> 00:28:20,720
another talk

00:28:21,440 --> 00:28:26,000
um and another user asks whether you've

00:28:24,080 --> 00:28:28,240
had a look at the bevi engine

00:28:26,000 --> 00:28:30,000
uh which also is quite recent and

00:28:28,240 --> 00:28:31,919
whether you can comment on it from uh

00:28:30,000 --> 00:28:34,159
the perspe user perspective an amethyst

00:28:31,919 --> 00:28:34,159
user

00:28:35,679 --> 00:28:39,600
uh i can't comment on it but because i

00:28:38,480 --> 00:28:42,320
haven't tried it yet but

00:28:39,600 --> 00:28:44,080
it does look interesting i i can't it i

00:28:42,320 --> 00:28:47,200
know it uses like the same

00:28:44,080 --> 00:28:49,039
design philosophy and i know that uh

00:28:47,200 --> 00:28:51,600
amethyst there's a post that was made

00:28:49,039 --> 00:28:54,559
that amethyst is working with bevy

00:28:51,600 --> 00:28:55,919
and so yeah i think it's a good it's a

00:28:54,559 --> 00:28:58,480
it's a great engine that people should

00:28:55,919 --> 00:29:02,080
try too

00:28:58,480 --> 00:29:02,080
great we're not in competition

00:29:04,480 --> 00:29:07,840
all righty then uh i think we're out of

00:29:06,320 --> 00:29:12,399
questions

00:29:07,840 --> 00:29:16,720
yeah so just one second see if anyone

00:29:12,399 --> 00:29:20,000
came in oh no we're good

00:29:16,720 --> 00:29:22,880
micah carlo thank you so much

00:29:20,000 --> 00:29:24,840
yeah great to be here and until next

00:29:22,880 --> 00:29:27,840
time

00:29:24,840 --> 00:29:27,840

YouTube URL: https://www.youtube.com/watch?v=qoCryIy4bFE


