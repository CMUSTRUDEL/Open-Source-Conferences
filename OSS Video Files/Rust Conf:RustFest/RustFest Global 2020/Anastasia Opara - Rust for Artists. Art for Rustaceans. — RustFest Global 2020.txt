Title: Anastasia Opara - Rust for Artists. Art for Rustaceans. â€” RustFest Global 2020
Publication date: 2020-12-19
Playlist: RustFest Global 2020
Description: 
	Art is a search process. When we create something, we mentally navigate a space of possibilities, searching for an artistic solution to evoking a desired sensation. In this talk I will walk you through an example of translating artistic search into code, a computational drawing algorithm.

More at https://rustfest.global/session/7-rust-for-artists-art-for-rustaceans/
Captions: 
	00:00:03,360 --> 00:00:07,600
anastasia

00:00:04,400 --> 00:00:09,040
plays rust like a flute or maybe a

00:00:07,600 --> 00:00:11,759
magical loot

00:00:09,040 --> 00:00:12,639
to then simulate things that art may

00:00:11,759 --> 00:00:17,359
create

00:00:12,639 --> 00:00:19,920
and this art does really compute

00:00:17,359 --> 00:00:21,119
hi and welcome to rust for artists art

00:00:19,920 --> 00:00:23,279
for stations

00:00:21,119 --> 00:00:25,279
before we start a quick warning this

00:00:23,279 --> 00:00:26,080
talk suffers from multiple personality

00:00:25,279 --> 00:00:27,760
disorder

00:00:26,080 --> 00:00:30,000
it kind of tries to be multiple things

00:00:27,760 --> 00:00:31,920
at once like talk very meta

00:00:30,000 --> 00:00:33,280
about similarities between art and

00:00:31,920 --> 00:00:34,640
programming and science

00:00:33,280 --> 00:00:36,800
while at the same time show your

00:00:34,640 --> 00:00:38,719
computational drawing algorithm

00:00:36,800 --> 00:00:40,320
and yeah also share some practical ras

00:00:38,719 --> 00:00:42,239
tips

00:00:40,320 --> 00:00:43,600
so if you're only interested in the rust

00:00:42,239 --> 00:00:45,840
and algorithm parts

00:00:43,600 --> 00:00:47,200
go get yourself a coffee and come back

00:00:45,840 --> 00:00:48,719
in about 10 minutes

00:00:47,200 --> 00:00:51,600
since we're gonna go through the meta

00:00:48,719 --> 00:00:54,559
part first and without further ado

00:00:51,600 --> 00:00:56,239
let's start with introductions my name

00:00:54,559 --> 00:00:58,320
is anastasia opara

00:00:56,239 --> 00:01:00,160
and i'm a procedural artist at embark

00:00:58,320 --> 00:01:01,760
studios a stockholm based game

00:01:00,160 --> 00:01:03,359
development company

00:01:01,760 --> 00:01:05,119
you might be wondering what is

00:01:03,359 --> 00:01:07,200
procedural artist

00:01:05,119 --> 00:01:09,520
procedural art's distinguishing feature

00:01:07,200 --> 00:01:11,360
is that it is executed by a computer

00:01:09,520 --> 00:01:13,200
following a set of human designed

00:01:11,360 --> 00:01:15,680
procedures described in code

00:01:13,200 --> 00:01:17,360
that's why it's procedural and as a

00:01:15,680 --> 00:01:20,159
procedural artist at embark

00:01:17,360 --> 00:01:21,920
i spend most of my time meditating over

00:01:20,159 --> 00:01:23,600
procedural workflows for assisted

00:01:21,920 --> 00:01:25,280
creativity in games

00:01:23,600 --> 00:01:26,640
from both developer and player

00:01:25,280 --> 00:01:29,040
perspectives

00:01:26,640 --> 00:01:30,240
in reality that kind of r d means a lot

00:01:29,040 --> 00:01:31,600
of head scratching

00:01:30,240 --> 00:01:33,600
and then some more head banging on the

00:01:31,600 --> 00:01:36,000
wall which is fun

00:01:33,600 --> 00:01:36,880
and exhausting and sometimes outright

00:01:36,000 --> 00:01:40,000
terrifying

00:01:36,880 --> 00:01:42,240
but never boring to give you an example

00:01:40,000 --> 00:01:44,640
i'd like to super quickly show you two

00:01:42,240 --> 00:01:47,360
of our recent projects we did at embark

00:01:44,640 --> 00:01:49,040
it will be very tldr versions and if

00:01:47,360 --> 00:01:50,799
you're interested in learning more

00:01:49,040 --> 00:01:52,799
we've presented separate talks about

00:01:50,799 --> 00:01:55,520
both of them

00:01:52,799 --> 00:01:56,960
so the first one is texture synthesis

00:01:55,520 --> 00:01:58,880
which is actually a project where i

00:01:56,960 --> 00:02:01,040
first got introduced to rust

00:01:58,880 --> 00:02:02,399
it's an example-based algorithm for

00:02:01,040 --> 00:02:04,479
image generation

00:02:02,399 --> 00:02:05,680
meaning you can give it an example image

00:02:04,479 --> 00:02:08,160
and it will generate more

00:02:05,680 --> 00:02:10,080
similar-looking images you can also do

00:02:08,160 --> 00:02:10,720
things like guided generations style

00:02:10,080 --> 00:02:12,640
transfer

00:02:10,720 --> 00:02:15,680
fill and missing content even do simple

00:02:12,640 --> 00:02:18,080
geometry generation

00:02:15,680 --> 00:02:20,000
the second project is called kitty wake

00:02:18,080 --> 00:02:21,440
which is a game-like environment

00:02:20,000 --> 00:02:23,440
where we explored a feeling of

00:02:21,440 --> 00:02:24,800
co-creation with an example-based

00:02:23,440 --> 00:02:26,560
placement algorithm

00:02:24,800 --> 00:02:28,640
which is embodied into this little

00:02:26,560 --> 00:02:30,239
creature whom we named kittus

00:02:28,640 --> 00:02:32,000
together you create a small scene by

00:02:30,239 --> 00:02:32,640
going back and forth between you and

00:02:32,000 --> 00:02:34,959
kittis

00:02:32,640 --> 00:02:36,560
sort of like a dialogue and kittus tries

00:02:34,959 --> 00:02:38,800
to mimic the way you create

00:02:36,560 --> 00:02:41,599
by analyzing how you place things and

00:02:38,800 --> 00:02:43,200
using it as an example

00:02:41,599 --> 00:02:45,120
one of the key similarities between

00:02:43,200 --> 00:02:47,360
these projects is that both of them

00:02:45,120 --> 00:02:48,480
heavily rely on performing some kind of

00:02:47,360 --> 00:02:51,280
search

00:02:48,480 --> 00:02:53,120
in both of them given an example like

00:02:51,280 --> 00:02:55,840
object arrangement in kitty wake

00:02:53,120 --> 00:02:57,519
or pixel image and texture synthesis we

00:02:55,840 --> 00:02:59,280
search for a new configuration

00:02:57,519 --> 00:03:01,760
that looks perceptually similar to the

00:02:59,280 --> 00:03:03,360
example while not being a copy

00:03:01,760 --> 00:03:05,920
you could think of the search process in

00:03:03,360 --> 00:03:07,280
a simplified way that is we try a bunch

00:03:05,920 --> 00:03:09,599
of configurations

00:03:07,280 --> 00:03:10,319
thousands in fact we evaluate every one

00:03:09,599 --> 00:03:12,800
of them and

00:03:10,319 --> 00:03:14,560
present you the most promising one it's

00:03:12,800 --> 00:03:15,599
just from the user perspective it can

00:03:14,560 --> 00:03:18,239
happen so fast

00:03:15,599 --> 00:03:19,840
that it might not seem like a search for

00:03:18,239 --> 00:03:21,920
example in texture synthesis

00:03:19,840 --> 00:03:23,680
you can see pixels appearing which is a

00:03:21,920 --> 00:03:26,239
result of searching through possible

00:03:23,680 --> 00:03:28,480
pixel neighborhoods from the example

00:03:26,239 --> 00:03:29,280
and in example base placement you can

00:03:28,480 --> 00:03:31,120
see objects

00:03:29,280 --> 00:03:33,120
magically moving around until they

00:03:31,120 --> 00:03:34,799
settle in positions that satisfy the

00:03:33,120 --> 00:03:36,720
example

00:03:34,799 --> 00:03:38,640
even though the notion of search in

00:03:36,720 --> 00:03:40,319
these projects can be argued to be

00:03:38,640 --> 00:03:42,480
purely algorithmical

00:03:40,319 --> 00:03:43,920
i think it is actually closer to a

00:03:42,480 --> 00:03:46,799
genuine art process

00:03:43,920 --> 00:03:48,480
than we might initially think it is easy

00:03:46,799 --> 00:03:50,720
to perceive the final artwork

00:03:48,480 --> 00:03:51,680
as an outcome of a linear pre-calculated

00:03:50,720 --> 00:03:54,000
path

00:03:51,680 --> 00:03:55,040
like an artist sits down and just does

00:03:54,000 --> 00:03:57,280
art

00:03:55,040 --> 00:03:59,120
however if we dig deeper we will

00:03:57,280 --> 00:04:02,480
discover that there is always an

00:03:59,120 --> 00:04:04,640
underlying network of trial and error

00:04:02,480 --> 00:04:06,319
for example picasso's famous painting

00:04:04,640 --> 00:04:08,239
the ladies of avignon

00:04:06,319 --> 00:04:09,599
is the result of more than a hundred

00:04:08,239 --> 00:04:11,599
preparatory sketches

00:04:09,599 --> 00:04:12,720
that picasso produced over the course of

00:04:11,599 --> 00:04:15,280
two years

00:04:12,720 --> 00:04:17,199
you can clearly see how earlier sketches

00:04:15,280 --> 00:04:18,320
were in a different style than the final

00:04:17,199 --> 00:04:20,239
work

00:04:18,320 --> 00:04:21,840
we can argue that of course this work

00:04:20,239 --> 00:04:24,400
required a lot of exploration

00:04:21,840 --> 00:04:26,400
because of how stylized it is therefore

00:04:24,400 --> 00:04:27,440
the search was purely about finding that

00:04:26,400 --> 00:04:29,199
stylization

00:04:27,440 --> 00:04:32,479
and reimagining what we see into

00:04:29,199 --> 00:04:32,479
something completely different

00:04:32,880 --> 00:04:37,520
however even when painting from

00:04:34,479 --> 00:04:40,080
reference with a goal of copying reality

00:04:37,520 --> 00:04:41,759
it is never a passive observation but

00:04:40,080 --> 00:04:44,240
active interpretation

00:04:41,759 --> 00:04:44,880
and engineering of visual forms that

00:04:44,240 --> 00:04:48,000
together

00:04:44,880 --> 00:04:49,919
construct a representation for example

00:04:48,000 --> 00:04:50,720
if we look at calen's digital photo

00:04:49,919 --> 00:04:52,639
studies

00:04:50,720 --> 00:04:54,160
we can clearly see a process of

00:04:52,639 --> 00:04:56,720
searching for textures

00:04:54,160 --> 00:04:58,479
colors forms that conjure a similar

00:04:56,720 --> 00:04:59,919
perceptual response to the target

00:04:58,479 --> 00:05:02,000
photograph

00:04:59,919 --> 00:05:04,160
it is a dynamic problem solving of

00:05:02,000 --> 00:05:07,120
simplifying the object of depiction

00:05:04,160 --> 00:05:08,880
while keeping the perceptual essence any

00:05:07,120 --> 00:05:10,639
painting if you look close enough

00:05:08,880 --> 00:05:13,039
is just an amorphous jumble of brush

00:05:10,639 --> 00:05:13,840
strokes but then they magically come

00:05:13,039 --> 00:05:15,440
together

00:05:13,840 --> 00:05:17,840
and make you believe that what they

00:05:15,440 --> 00:05:20,160
represent is real

00:05:17,840 --> 00:05:22,160
thus i believe any art is a search for

00:05:20,160 --> 00:05:23,360
representation that conveys a target

00:05:22,160 --> 00:05:25,280
experience

00:05:23,360 --> 00:05:26,400
and the human ability to comprehend

00:05:25,280 --> 00:05:28,720
similarity

00:05:26,400 --> 00:05:30,400
between a representation and the thing

00:05:28,720 --> 00:05:32,639
it aims to represent

00:05:30,400 --> 00:05:35,680
is an astonishing example of abstract

00:05:32,639 --> 00:05:37,919
thinking that comes to us so naturally

00:05:35,680 --> 00:05:40,080
and through the lens of representations

00:05:37,919 --> 00:05:40,639
art can invite us to perceive the same

00:05:40,080 --> 00:05:43,600
object

00:05:40,639 --> 00:05:45,280
in different ways like let's consider

00:05:43,600 --> 00:05:47,360
this sheep for example

00:05:45,280 --> 00:05:49,440
as artists we might emphasize the way

00:05:47,360 --> 00:05:51,680
the wool curls are a repetition of a

00:05:49,440 --> 00:05:53,520
pattern that trees make when this way

00:05:51,680 --> 00:05:55,199
abandoning precision in favor of the

00:05:53,520 --> 00:05:56,479
whole world could be emphasizing that

00:05:55,199 --> 00:05:58,080
motion

00:05:56,479 --> 00:06:00,479
or we might adopt a very different

00:05:58,080 --> 00:06:01,600
perspective and explore the sheep not

00:06:00,479 --> 00:06:03,759
the way we see it

00:06:01,600 --> 00:06:05,600
but invite to experience the concept of

00:06:03,759 --> 00:06:07,919
a sheep through its hoof marks as it

00:06:05,600 --> 00:06:10,319
walks on the canvas

00:06:07,919 --> 00:06:11,280
both works aim to capture the sheep but

00:06:10,319 --> 00:06:14,960
the outcomes

00:06:11,280 --> 00:06:17,120
or representations differ drastically

00:06:14,960 --> 00:06:18,240
and art is not alone in its pursuits to

00:06:17,120 --> 00:06:21,120
deconstruct things

00:06:18,240 --> 00:06:22,880
into representations in programming we

00:06:21,120 --> 00:06:24,960
are often faced with a challenge of

00:06:22,880 --> 00:06:27,039
translating the language of our thoughts

00:06:24,960 --> 00:06:28,560
into the language of implementation

00:06:27,039 --> 00:06:30,560
and if we were asked to represent the

00:06:28,560 --> 00:06:32,240
ship in code we might adopt an

00:06:30,560 --> 00:06:34,080
inheritance pattern of thinking

00:06:32,240 --> 00:06:36,800
and say it should inherit from an animal

00:06:34,080 --> 00:06:37,919
class or we might say that animal is

00:06:36,800 --> 00:06:39,280
just one of the traits

00:06:37,919 --> 00:06:41,680
and there are other traits we are

00:06:39,280 --> 00:06:44,639
interested in such as adorable or

00:06:41,680 --> 00:06:46,880
fluffy in mathematics we can reason

00:06:44,639 --> 00:06:48,639
about sheep by defining a transform that

00:06:46,880 --> 00:06:50,960
maps it into a new space

00:06:48,639 --> 00:06:53,280
or discretize the surface into vertices

00:06:50,960 --> 00:06:55,440
and reason about their connections

00:06:53,280 --> 00:06:56,800
even when dealing with data we are faced

00:06:55,440 --> 00:07:00,400
with a choice of a model

00:06:56,800 --> 00:07:03,440
or a representation that will explain it

00:07:00,400 --> 00:07:05,520
in the end these are all representations

00:07:03,440 --> 00:07:07,199
they don't change the way the ship is

00:07:05,520 --> 00:07:08,319
but they change the way we think about

00:07:07,199 --> 00:07:10,080
it

00:07:08,319 --> 00:07:12,000
and quite often there is no one

00:07:10,080 --> 00:07:13,120
representation that just works for a

00:07:12,000 --> 00:07:15,199
goal at hand

00:07:13,120 --> 00:07:16,479
and it becomes an iterative search for

00:07:15,199 --> 00:07:19,599
conceptual pieces

00:07:16,479 --> 00:07:20,960
needed to design a new representation

00:07:19,599 --> 00:07:23,280
the pieces we manipulate might be

00:07:20,960 --> 00:07:24,560
different but i feel that the process of

00:07:23,280 --> 00:07:26,960
search in art

00:07:24,560 --> 00:07:28,160
programming or science is fundamentally

00:07:26,960 --> 00:07:29,759
similar

00:07:28,160 --> 00:07:32,240
and that's why art programming and

00:07:29,759 --> 00:07:32,800
science are actually much closer to each

00:07:32,240 --> 00:07:35,840
other

00:07:32,800 --> 00:07:38,160
than we usually portray if science helps

00:07:35,840 --> 00:07:40,240
us to reason about the external world

00:07:38,160 --> 00:07:41,440
and how to deconstruct a problem into

00:07:40,240 --> 00:07:44,199
processing flow

00:07:41,440 --> 00:07:45,360
i think art is about looking inward a

00:07:44,199 --> 00:07:48,400
self-introspection

00:07:45,360 --> 00:07:50,879
and observation of one's perceptions art

00:07:48,400 --> 00:07:52,319
is not just about recreation of reality

00:07:50,879 --> 00:07:54,639
even if you do choose to make it your

00:07:52,319 --> 00:07:56,479
focus it's an invitation to

00:07:54,639 --> 00:07:57,599
co-experience something from your

00:07:56,479 --> 00:07:59,840
perspective

00:07:57,599 --> 00:08:02,080
something it used to be bodiless but you

00:07:59,840 --> 00:08:04,639
invented a representation for it

00:08:02,080 --> 00:08:05,120
and from that perspective i genuinely

00:08:04,639 --> 00:08:08,800
think

00:08:05,120 --> 00:08:11,039
anyone can be an artist today there are

00:08:08,800 --> 00:08:13,440
plenty of art media to choose from

00:08:11,039 --> 00:08:15,440
and code is a particularly fascinating

00:08:13,440 --> 00:08:17,599
one as it invites to convey

00:08:15,440 --> 00:08:18,879
not just the final destination of the

00:08:17,599 --> 00:08:21,280
art process

00:08:18,879 --> 00:08:22,240
but the author's workflow the search

00:08:21,280 --> 00:08:24,479
itself

00:08:22,240 --> 00:08:26,720
it invites us artists to reverse

00:08:24,479 --> 00:08:28,960
engineer our own thought process

00:08:26,720 --> 00:08:29,840
and deconstruct it into an algorithmical

00:08:28,960 --> 00:08:31,919
form

00:08:29,840 --> 00:08:33,279
pushing back the outcome of the process

00:08:31,919 --> 00:08:35,839
into the background

00:08:33,279 --> 00:08:36,320
and putting the experience of the search

00:08:35,839 --> 00:08:39,200
to be

00:08:36,320 --> 00:08:40,479
the main art piece and that is what

00:08:39,200 --> 00:08:44,480
computational drawing

00:08:40,479 --> 00:08:45,680
aims to capture computational drawing is

00:08:44,480 --> 00:08:48,000
my hobby project

00:08:45,680 --> 00:08:49,519
which is designed to imitate traditional

00:08:48,000 --> 00:08:51,440
drawing from reference

00:08:49,519 --> 00:08:54,240
by searching for a deconstruction of the

00:08:51,440 --> 00:08:56,640
target into discrete brush strokes

00:08:54,240 --> 00:08:57,440
inviting to co-experience the becoming

00:08:56,640 --> 00:08:59,680
of the work

00:08:57,440 --> 00:09:01,279
from its very rough stages to final

00:08:59,680 --> 00:09:03,200
details

00:09:01,279 --> 00:09:05,200
and just like many paintings are not a

00:09:03,200 --> 00:09:07,519
faithful representation of reality

00:09:05,200 --> 00:09:10,880
so is computational drawing not meant to

00:09:07,519 --> 00:09:13,040
be a recreation of an artist

00:09:10,880 --> 00:09:15,200
it was originally inspired by many

00:09:13,040 --> 00:09:16,959
implementations of genetic algorithms

00:09:15,200 --> 00:09:19,279
available on the internet

00:09:16,959 --> 00:09:20,880
genetic algorithm is a search algorithm

00:09:19,279 --> 00:09:22,160
that is loosely inspired by natural

00:09:20,880 --> 00:09:23,920
selection

00:09:22,160 --> 00:09:25,360
but what was more interesting in my

00:09:23,920 --> 00:09:27,920
opinion is the way

00:09:25,360 --> 00:09:30,160
this project posts the objective that is

00:09:27,920 --> 00:09:31,040
to represent a target image in a budget

00:09:30,160 --> 00:09:33,600
of say

00:09:31,040 --> 00:09:36,720
50 polygons like the mona lisa one or

00:09:33,600 --> 00:09:39,680
hundreds of lines with eiffel tower

00:09:36,720 --> 00:09:40,959
it was a summer of 2017 and i just

00:09:39,680 --> 00:09:44,160
finished my university

00:09:40,959 --> 00:09:46,000
and had no idea about search algorithms

00:09:44,160 --> 00:09:48,080
and seeing that genetic stuff really

00:09:46,000 --> 00:09:51,040
triggered me the process

00:09:48,080 --> 00:09:52,240
as brute force as it was reminded me of

00:09:51,040 --> 00:09:54,959
my own experience

00:09:52,240 --> 00:09:56,240
during live drawing classes having to

00:09:54,959 --> 00:09:58,160
translate what i see

00:09:56,240 --> 00:10:00,240
into a set of discrete motions with a

00:09:58,160 --> 00:10:02,240
pencil or a charcoal

00:10:00,240 --> 00:10:03,760
that personal experience combined with

00:10:02,240 --> 00:10:05,680
discovering an algorithmic

00:10:03,760 --> 00:10:09,040
representation i could use

00:10:05,680 --> 00:10:10,959
i i just had to try it out

00:10:09,040 --> 00:10:12,079
in the end i modified the search quite a

00:10:10,959 --> 00:10:13,839
bit which

00:10:12,079 --> 00:10:15,360
actually made it redundant to frame it

00:10:13,839 --> 00:10:16,959
as a genetic algorithm

00:10:15,360 --> 00:10:18,880
and i'll touch upon it later in the

00:10:16,959 --> 00:10:22,720
presentation

00:10:18,880 --> 00:10:24,640
so this is the results from 2017

00:10:22,720 --> 00:10:26,640
at the time i was just learning python

00:10:24,640 --> 00:10:29,760
so this was written in python

00:10:26,640 --> 00:10:31,680
and it was very slow to calculate

00:10:29,760 --> 00:10:32,800
like a couple of hours to almost a day

00:10:31,680 --> 00:10:36,000
for one image

00:10:32,800 --> 00:10:37,760
the call was ugly and i never really

00:10:36,000 --> 00:10:39,040
showed it to anyone except a couple of

00:10:37,760 --> 00:10:42,000
friends

00:10:39,040 --> 00:10:43,360
i thought it was unsophisticated not

00:10:42,000 --> 00:10:45,279
worth sharing

00:10:43,360 --> 00:10:47,279
so it just kind of collected virtual

00:10:45,279 --> 00:10:50,240
dust in my hard drive

00:10:47,279 --> 00:10:51,040
until this summer of 2020 when thanks to

00:10:50,240 --> 00:10:53,040
covet

00:10:51,040 --> 00:10:54,640
there was a lot of free time and i went

00:10:53,040 --> 00:10:57,120
through my old hard drive and

00:10:54,640 --> 00:10:59,600
rediscovered it

00:10:57,120 --> 00:11:00,880
and the reception was beyond my

00:10:59,600 --> 00:11:02,959
expectations

00:11:00,880 --> 00:11:04,800
which motivated me to clean it up a bit

00:11:02,959 --> 00:11:07,040
and open source it

00:11:04,800 --> 00:11:08,160
and it was super rewarding to see people

00:11:07,040 --> 00:11:10,959
getting inspired

00:11:08,160 --> 00:11:12,880
and trying out their own versions and

00:11:10,959 --> 00:11:15,440
while cleaning up the python code i

00:11:12,880 --> 00:11:17,120
started having a lot of new ideas coming

00:11:15,440 --> 00:11:18,320
from the experience i accumulated at

00:11:17,120 --> 00:11:21,600
embark

00:11:18,320 --> 00:11:23,680
so i decided to start anew and of course

00:11:21,600 --> 00:11:25,760
for my sanity i restarted the whole

00:11:23,680 --> 00:11:27,120
thing in rust and yes yes we are finally

00:11:25,760 --> 00:11:28,079
getting to the part when i talk about

00:11:27,120 --> 00:11:31,600
rust

00:11:28,079 --> 00:11:33,760
so how does the algorithm work

00:11:31,600 --> 00:11:36,000
let's imagine we can draw a single brush

00:11:33,760 --> 00:11:36,720
stroke which is parameterized by its

00:11:36,000 --> 00:11:39,200
scale

00:11:36,720 --> 00:11:40,079
rotation and value for image

00:11:39,200 --> 00:11:43,200
manipulation

00:11:40,079 --> 00:11:44,720
i like using image and image proc crates

00:11:43,200 --> 00:11:46,720
there are functions for rotation as well

00:11:44,720 --> 00:11:49,839
as scale and to change value

00:11:46,720 --> 00:11:52,320
we can simply access pixel data

00:11:49,839 --> 00:11:53,680
so now imagine we drew this brush stroke

00:11:52,320 --> 00:11:55,120
on a canvas

00:11:53,680 --> 00:11:57,279
and just like we thought of scale

00:11:55,120 --> 00:11:58,000
rotation and value as parameters of our

00:11:57,279 --> 00:12:00,160
brush

00:11:58,000 --> 00:12:01,360
we can think of the brush as a parameter

00:12:00,160 --> 00:12:02,480
of the canvas

00:12:01,360 --> 00:12:04,399
just by knowing what kind of

00:12:02,480 --> 00:12:07,680
configuration our brush is

00:12:04,399 --> 00:12:09,600
we can deduce how our canvas looks like

00:12:07,680 --> 00:12:10,800
and representing our brush configuration

00:12:09,600 --> 00:12:13,040
as one dimension

00:12:10,800 --> 00:12:13,839
is just the mental shortcut in fact that

00:12:13,040 --> 00:12:16,880
one dimension

00:12:13,839 --> 00:12:20,480
encapsulates five scale rotation value

00:12:16,880 --> 00:12:21,760
and position in x and y now suppose we

00:12:20,480 --> 00:12:23,519
added a second brush

00:12:21,760 --> 00:12:25,839
extending our brush space to be

00:12:23,519 --> 00:12:27,680
two-dimensional a dot in this new space

00:12:25,839 --> 00:12:29,440
simply encodes both brushes

00:12:27,680 --> 00:12:30,800
and thus appearance our canvas would

00:12:29,440 --> 00:12:32,880
have

00:12:30,800 --> 00:12:34,800
so far it might seem like quite a

00:12:32,880 --> 00:12:36,959
redundant transformation

00:12:34,800 --> 00:12:39,040
cool a dot in brush space represents a

00:12:36,959 --> 00:12:40,399
canvas wow

00:12:39,040 --> 00:12:42,880
but it gets more conceptually

00:12:40,399 --> 00:12:45,600
interesting as we add more brushes

00:12:42,880 --> 00:12:46,800
it also becomes messier to visualize so

00:12:45,600 --> 00:12:50,000
let's imagine that this

00:12:46,800 --> 00:12:52,959
2d space is in fact a space defined by

00:12:50,000 --> 00:12:54,800
100 brushes and a dot in the space

00:12:52,959 --> 00:12:55,519
represents a particular canvas

00:12:54,800 --> 00:12:57,839
appearance

00:12:55,519 --> 00:12:59,440
defined by how our 100 brushes are

00:12:57,839 --> 00:13:01,360
configured

00:12:59,440 --> 00:13:03,519
to move in this space all we have to do

00:13:01,360 --> 00:13:06,240
is change our canvas

00:13:03,519 --> 00:13:08,639
and if we just take a stroll and

00:13:06,240 --> 00:13:10,720
aimlessly wander around in this space

00:13:08,639 --> 00:13:11,920
we might discover that with just a

00:13:10,720 --> 00:13:13,680
hundred brushstrokes

00:13:11,920 --> 00:13:15,360
we can actually depict a lot of

00:13:13,680 --> 00:13:17,920
interesting stuff

00:13:15,360 --> 00:13:19,760
but also a lot of random stuff in fact

00:13:17,920 --> 00:13:20,480
the proportion of interesting stuff to

00:13:19,760 --> 00:13:23,760
random

00:13:20,480 --> 00:13:25,360
is insanely low it is very unlikely that

00:13:23,760 --> 00:13:27,360
we will just stumble upon a good

00:13:25,360 --> 00:13:29,920
painting

00:13:27,360 --> 00:13:30,560
so the question becomes how do we search

00:13:29,920 --> 00:13:34,079
for something

00:13:30,560 --> 00:13:35,920
interesting we provide a target that

00:13:34,079 --> 00:13:38,639
guides our search towards a space

00:13:35,920 --> 00:13:40,320
containing similar images and the way we

00:13:38,639 --> 00:13:41,839
can define similarity

00:13:40,320 --> 00:13:43,760
is simply a difference between the

00:13:41,839 --> 00:13:45,680
pixels of the target and the pixels of

00:13:43,760 --> 00:13:48,000
the drawn images

00:13:45,680 --> 00:13:49,680
so if after mutating a brushstroke our

00:13:48,000 --> 00:13:51,199
pixel difference is smaller

00:13:49,680 --> 00:13:52,880
that means we are moving towards the

00:13:51,199 --> 00:13:55,279
space with more similar images

00:13:52,880 --> 00:13:56,639
and we should keep this mutation and

00:13:55,279 --> 00:13:59,519
then we just do it again

00:13:56,639 --> 00:14:00,639
and again and again here you can see a

00:13:59,519 --> 00:14:02,480
beginning of a search

00:14:00,639 --> 00:14:04,399
as brushes move around trying to

00:14:02,480 --> 00:14:06,399
position themselves in such a way that

00:14:04,399 --> 00:14:08,240
looks more like a target

00:14:06,399 --> 00:14:10,160
and if we continue this guided search

00:14:08,240 --> 00:14:12,160
long enough we will eventually reach a

00:14:10,160 --> 00:14:14,720
canvas configuration whose brushstroke

00:14:12,160 --> 00:14:18,160
arrangement looks similar to the target

00:14:14,720 --> 00:14:20,320
and in general that is pretty much it

00:14:18,160 --> 00:14:21,519
and there are many ways how one might

00:14:20,320 --> 00:14:23,839
implement this search

00:14:21,519 --> 00:14:26,240
it can be a genetic algorithm gradient

00:14:23,839 --> 00:14:27,680
descent simulated annealing greedy you

00:14:26,240 --> 00:14:29,360
pick your favorite

00:14:27,680 --> 00:14:31,600
i'm going to show you how i approached

00:14:29,360 --> 00:14:32,959
it by applying some of the lessons from

00:14:31,600 --> 00:14:35,760
my art education

00:14:32,959 --> 00:14:37,120
and incorporating that into the search i

00:14:35,760 --> 00:14:39,760
was greatly inspired

00:14:37,120 --> 00:14:40,720
how during fine art classes especially

00:14:39,760 --> 00:14:43,199
when we were doing

00:14:40,720 --> 00:14:44,079
oil steel lives we were taught to never

00:14:43,199 --> 00:14:46,560
try to solve

00:14:44,079 --> 00:14:48,079
all the detailed frequencies at once

00:14:46,560 --> 00:14:50,399
most of the times you will just get

00:14:48,079 --> 00:14:52,399
yourself in a corner you can't solve

00:14:50,399 --> 00:14:53,519
very much like a local minima for

00:14:52,399 --> 00:14:55,440
artists

00:14:53,519 --> 00:14:57,760
so you deconstruct the object of

00:14:55,440 --> 00:15:00,000
depiction into big shapes first

00:14:57,760 --> 00:15:01,600
and once you got them only then you go

00:15:00,000 --> 00:15:03,600
into details

00:15:01,600 --> 00:15:05,600
and i wanted to incorporate same kind of

00:15:03,600 --> 00:15:07,839
wisdom into the way my algorithm would

00:15:05,600 --> 00:15:10,000
do the search

00:15:07,839 --> 00:15:10,880
therefore i broke it down into multiple

00:15:10,000 --> 00:15:13,440
stages

00:15:10,880 --> 00:15:14,800
and each stage only solves a particular

00:15:13,440 --> 00:15:16,959
level of details

00:15:14,800 --> 00:15:18,959
starting with very big brush strokes

00:15:16,959 --> 00:15:22,000
forcing to generalize the shape

00:15:18,959 --> 00:15:24,079
and only then applying more details

00:15:22,000 --> 00:15:25,120
and each of those stages is a completely

00:15:24,079 --> 00:15:27,360
separate search

00:15:25,120 --> 00:15:29,199
so when a first stage is done the second

00:15:27,360 --> 00:15:31,839
stage has to just draw on top

00:15:29,199 --> 00:15:33,680
of what has been drawn before here you

00:15:31,839 --> 00:15:35,279
can see the search process happening for

00:15:33,680 --> 00:15:37,120
different stages

00:15:35,279 --> 00:15:38,639
and when you see a sudden jump that's

00:15:37,120 --> 00:15:40,480
when new brushes are added

00:15:38,639 --> 00:15:42,560
and the algorithm is using them to

00:15:40,480 --> 00:15:44,720
better approximate the target

00:15:42,560 --> 00:15:46,800
and during every stage the algorithm

00:15:44,720 --> 00:15:49,279
needs to place 100 brushes

00:15:46,800 --> 00:15:50,079
and it has to do so in 10 000 search

00:15:49,279 --> 00:15:52,639
steps

00:15:50,079 --> 00:15:53,680
10 000 steps might seem like a lot but

00:15:52,639 --> 00:15:56,800
if you need to place

00:15:53,680 --> 00:15:59,279
100 brushes that is 8 000 parameters

00:15:56,800 --> 00:16:01,680
and remember the algorithm cannot remove

00:15:59,279 --> 00:16:04,480
them it is forced to place strokes

00:16:01,680 --> 00:16:05,040
even if it's not perfect and one of the

00:16:04,480 --> 00:16:07,519
reasons

00:16:05,040 --> 00:16:09,120
to limit the step number is to encourage

00:16:07,519 --> 00:16:11,519
happy accidents mistakes

00:16:09,120 --> 00:16:12,320
and imperfections if something goes

00:16:11,519 --> 00:16:14,800
really bad

00:16:12,320 --> 00:16:16,880
it can always be fixed in later stages

00:16:14,800 --> 00:16:17,920
giving a perception of continuous

00:16:16,880 --> 00:16:20,959
problem solving

00:16:17,920 --> 00:16:23,440
in the brush layout itself

00:16:20,959 --> 00:16:25,199
as brush strokes become smaller i use a

00:16:23,440 --> 00:16:26,959
sampling mask to guide the brush

00:16:25,199 --> 00:16:28,160
placement towards places of higher

00:16:26,959 --> 00:16:30,720
frequencies

00:16:28,160 --> 00:16:32,079
i do so to preserve the loose brush work

00:16:30,720 --> 00:16:33,440
while giving a perception of a

00:16:32,079 --> 00:16:35,519
deliberate intent

00:16:33,440 --> 00:16:36,880
that we are not just splattering a

00:16:35,519 --> 00:16:38,880
uniform brush texture

00:16:36,880 --> 00:16:40,800
but have a specific thought process

00:16:38,880 --> 00:16:42,240
manifested in the way the brushes

00:16:40,800 --> 00:16:44,880
non-uniform sizes

00:16:42,240 --> 00:16:46,639
are visually interacting with each other

00:16:44,880 --> 00:16:48,160
i don't remember where i heard it first

00:16:46,639 --> 00:16:50,720
but there is an expression

00:16:48,160 --> 00:16:52,639
don't over pat the painting meaning

00:16:50,720 --> 00:16:53,839
don't overwork it and kill all the

00:16:52,639 --> 00:16:55,360
playfulness

00:16:53,839 --> 00:16:57,920
and that's sort of what i'm trying to

00:16:55,360 --> 00:16:59,680
avoid by having the sampling mask

00:16:57,920 --> 00:17:01,440
you can notice the sampling mask is

00:16:59,680 --> 00:17:03,600
generated based on edges

00:17:01,440 --> 00:17:04,799
and edges play a very important role in

00:17:03,600 --> 00:17:06,720
drawing

00:17:04,799 --> 00:17:09,360
if you've ever had academic drawing

00:17:06,720 --> 00:17:11,520
classes you probably recognize this

00:17:09,360 --> 00:17:13,039
these are usually used as a homework to

00:17:11,520 --> 00:17:15,600
copy and learn from on how to

00:17:13,039 --> 00:17:16,959
deconstruct a 3d shape into simplified

00:17:15,600 --> 00:17:19,360
contours

00:17:16,959 --> 00:17:21,039
as humans we are extremely sensitive to

00:17:19,360 --> 00:17:22,319
sharp transitions between darker and

00:17:21,039 --> 00:17:24,160
lighter elements

00:17:22,319 --> 00:17:26,079
and just a small deviation can make

00:17:24,160 --> 00:17:27,839
something look wrong

00:17:26,079 --> 00:17:30,160
therefore one of the new additions to

00:17:27,839 --> 00:17:31,360
the rust version was using contours to

00:17:30,160 --> 00:17:33,200
guide the search

00:17:31,360 --> 00:17:34,880
this is done by comparing edges of

00:17:33,200 --> 00:17:36,320
target versus drawn

00:17:34,880 --> 00:17:39,440
and computing their earth movement

00:17:36,320 --> 00:17:41,360
distance here is a comparison of using

00:17:39,440 --> 00:17:43,120
versus not using edges to guide the

00:17:41,360 --> 00:17:45,039
search

00:17:43,120 --> 00:17:47,440
notice how much better defined the face

00:17:45,039 --> 00:17:49,120
is and how it looks perceptually closer

00:17:47,440 --> 00:17:51,360
to the original

00:17:49,120 --> 00:17:53,440
it is subtle but i think it gives it an

00:17:51,360 --> 00:17:54,960
extra push towards believability

00:17:53,440 --> 00:17:59,039
that there is an artist's thought

00:17:54,960 --> 00:18:00,960
process behind each brush placement

00:17:59,039 --> 00:18:02,080
since we need to perform edge detect

00:18:00,960 --> 00:18:04,320
every iteration

00:18:02,080 --> 00:18:06,400
it needs to be fast here are just some

00:18:04,320 --> 00:18:08,400
comparisons of how long it takes for

00:18:06,400 --> 00:18:11,440
different edge detection implementations

00:18:08,400 --> 00:18:13,440
available in different rust grades in

00:18:11,440 --> 00:18:14,240
the end i went with a custom sobel

00:18:13,440 --> 00:18:16,720
implementation

00:18:14,240 --> 00:18:18,720
that uses par ether and chunks to make

00:18:16,720 --> 00:18:20,400
it parallel

00:18:18,720 --> 00:18:21,840
and here is the time and quality

00:18:20,400 --> 00:18:24,000
comparisons for

00:18:21,840 --> 00:18:25,600
candy versus subtle versus no edge

00:18:24,000 --> 00:18:28,160
detection

00:18:25,600 --> 00:18:30,640
as you can see edge detection takes a

00:18:28,160 --> 00:18:32,960
huge bulk of the current generation time

00:18:30,640 --> 00:18:34,320
going from five minutes to twenty or

00:18:32,960 --> 00:18:37,600
even one and a half hours

00:18:34,320 --> 00:18:39,440
with kenny however notice how again the

00:18:37,600 --> 00:18:41,360
facial features are captured so much

00:18:39,440 --> 00:18:42,400
more precisely with either kanye or

00:18:41,360 --> 00:18:44,240
sobel

00:18:42,400 --> 00:18:45,760
can he still gives a crisper result in

00:18:44,240 --> 00:18:47,919
most cases

00:18:45,760 --> 00:18:50,720
but that also comes with a four times

00:18:47,919 --> 00:18:52,880
slower generation cost

00:18:50,720 --> 00:18:54,640
and in case someone's interested on how

00:18:52,880 --> 00:18:56,880
the parallel subwool is done

00:18:54,640 --> 00:18:58,160
here is the code feel free to pause once

00:18:56,880 --> 00:19:01,120
this goes online but

00:18:58,160 --> 00:19:02,160
i'm gonna be moving on so another way

00:19:01,120 --> 00:19:03,760
i'm using edges

00:19:02,160 --> 00:19:06,240
is to drive the brush strokes

00:19:03,760 --> 00:19:07,039
orientation the idea is that

00:19:06,240 --> 00:19:08,960
brushstrokes

00:19:07,039 --> 00:19:10,160
generally follow along the edges and

00:19:08,960 --> 00:19:11,679
don't cross them

00:19:10,160 --> 00:19:13,919
because that would violate the

00:19:11,679 --> 00:19:16,080
perceptual contour border

00:19:13,919 --> 00:19:18,080
to guide the brushstrokes i generate an

00:19:16,080 --> 00:19:19,919
image gradient field which describes

00:19:18,080 --> 00:19:21,120
directions towards darker elements for

00:19:19,919 --> 00:19:22,960
each pixel

00:19:21,120 --> 00:19:24,559
the stronger the direction the more

00:19:22,960 --> 00:19:27,120
influence it has on a brush stroke that

00:19:24,559 --> 00:19:29,120
might be placed in that region

00:19:27,120 --> 00:19:30,480
for example here there is almost no

00:19:29,120 --> 00:19:32,320
gradient information

00:19:30,480 --> 00:19:34,080
therefore the brush stroke might have

00:19:32,320 --> 00:19:36,400
any orientation

00:19:34,080 --> 00:19:38,000
however here closer to the edges there

00:19:36,400 --> 00:19:40,320
is a strong directionality

00:19:38,000 --> 00:19:41,840
indicated by the length of the lines and

00:19:40,320 --> 00:19:43,520
the brush strokes placed here

00:19:41,840 --> 00:19:45,919
are more likely to follow along the

00:19:43,520 --> 00:19:47,760
fields direction

00:19:45,919 --> 00:19:49,679
the reason why i made it to be always

00:19:47,760 --> 00:19:51,840
probabilistic is that i don't want to

00:19:49,679 --> 00:19:53,840
exclude any happy accidents

00:19:51,840 --> 00:19:55,520
perhaps if a brushstroke is placed

00:19:53,840 --> 00:19:56,960
completely perpendicular

00:19:55,520 --> 00:19:58,640
it might actually be a very good

00:19:56,960 --> 00:20:00,880
solution in the end

00:19:58,640 --> 00:20:02,559
the pixel and edge difference is what

00:20:00,880 --> 00:20:05,120
matters

00:20:02,559 --> 00:20:06,240
computational drawing is still very much

00:20:05,120 --> 00:20:08,159
work in progress

00:20:06,240 --> 00:20:10,880
and i hope to open source it once it's

00:20:08,159 --> 00:20:13,200
done one thing i still haven't gotten to

00:20:10,880 --> 00:20:15,200
is figuring out a good strategy for

00:20:13,200 --> 00:20:17,360
searching for a color solution

00:20:15,200 --> 00:20:18,799
that's still in my to-do list right now

00:20:17,360 --> 00:20:20,960
i'm just directly sampling from the

00:20:18,799 --> 00:20:22,880
target image

00:20:20,960 --> 00:20:24,880
at the moment the algorithm is running

00:20:22,880 --> 00:20:26,799
on cpu the code is

00:20:24,880 --> 00:20:28,159
paralyzed big thanks to thomas for

00:20:26,799 --> 00:20:30,720
helping me out with that

00:20:28,159 --> 00:20:31,280
but still a drawing on cpu is quite slow

00:20:30,720 --> 00:20:33,919
and

00:20:31,280 --> 00:20:36,240
just so happens recently embark has

00:20:33,919 --> 00:20:37,679
announced a rast on gpu project in case

00:20:36,240 --> 00:20:39,360
you haven't heard

00:20:37,679 --> 00:20:41,919
and i'm really looking forward to its

00:20:39,360 --> 00:20:44,320
development so please go contribute so i

00:20:41,919 --> 00:20:46,080
can do paintings on gpu

00:20:44,320 --> 00:20:47,520
okay so we are reaching the end of the

00:20:46,080 --> 00:20:50,559
presentation now so

00:20:47,520 --> 00:20:51,919
let's summarize we have talked about art

00:20:50,559 --> 00:20:53,120
as a search process for new

00:20:51,919 --> 00:20:55,039
representations

00:20:53,120 --> 00:20:56,960
and how different representations can

00:20:55,039 --> 00:20:58,799
invite us to view the same object from

00:20:56,960 --> 00:21:01,120
different perspectives

00:20:58,799 --> 00:21:03,039
and that art science and programming are

00:21:01,120 --> 00:21:05,360
similar in that regards

00:21:03,039 --> 00:21:06,480
we discussed how code as an art medium

00:21:05,360 --> 00:21:08,559
invites us to convey

00:21:06,480 --> 00:21:11,360
our search process in an algorithmical

00:21:08,559 --> 00:21:13,440
form making it the main art piece

00:21:11,360 --> 00:21:14,640
and how computational drawing tries to

00:21:13,440 --> 00:21:16,559
capture that search

00:21:14,640 --> 00:21:18,159
in the context of traditional drawing

00:21:16,559 --> 00:21:20,159
from reference

00:21:18,159 --> 00:21:22,640
and lastly we have covered the algorithm

00:21:20,159 --> 00:21:23,840
details as well as how we can use our

00:21:22,640 --> 00:21:25,919
artistic intent

00:21:23,840 --> 00:21:28,159
to guide the search by translating it

00:21:25,919 --> 00:21:30,080
into code

00:21:28,159 --> 00:21:32,000
and if you're an artist and you are

00:21:30,080 --> 00:21:33,440
considering getting into rust

00:21:32,000 --> 00:21:35,520
i really recommend that you stop

00:21:33,440 --> 00:21:38,159
considering and just do it

00:21:35,520 --> 00:21:39,440
first of all the ecosystem is great the

00:21:38,159 --> 00:21:42,080
package management is

00:21:39,440 --> 00:21:43,760
heavenly and if you just want to get

00:21:42,080 --> 00:21:45,840
started asap

00:21:43,760 --> 00:21:47,120
learning about ownership is all you

00:21:45,840 --> 00:21:49,039
really need which is

00:21:47,120 --> 00:21:50,720
literally like reading first for

00:21:49,039 --> 00:21:52,799
chapters of the rust book

00:21:50,720 --> 00:21:54,960
it's very rare i find myself in a need

00:21:52,799 --> 00:21:57,360
of advanced features when doing this

00:21:54,960 --> 00:21:59,280
kind of one-off art tools

00:21:57,360 --> 00:22:00,559
i also can't recommend enough getting

00:21:59,280 --> 00:22:02,720
rust analyzer

00:22:00,559 --> 00:22:03,679
it will show you types clippy warnings

00:22:02,720 --> 00:22:06,400
tips it's

00:22:03,679 --> 00:22:07,200
absolutely amazing and when i personally

00:22:06,400 --> 00:22:09,919
prototype

00:22:07,200 --> 00:22:12,480
i often write very messy code and it's a

00:22:09,919 --> 00:22:14,159
breath of fresh air to have the language

00:22:12,480 --> 00:22:16,799
guarding me against making stupid

00:22:14,159 --> 00:22:18,000
mistakes and clippy shouting at me for

00:22:16,799 --> 00:22:21,600
making a variable

00:22:18,000 --> 00:22:24,159
and never using it and just having that

00:22:21,600 --> 00:22:25,039
confidence that if my code compiles it

00:22:24,159 --> 00:22:27,840
works

00:22:25,039 --> 00:22:30,080
that really frees my brain to focus

00:22:27,840 --> 00:22:31,440
exclusively on the algorithm design and

00:22:30,080 --> 00:22:34,000
logic flow

00:22:31,440 --> 00:22:37,280
and i don't envision myself prototyping

00:22:34,000 --> 00:22:40,480
in any other language now

00:22:37,280 --> 00:22:41,440
and before we wrap up i'd like to give a

00:22:40,480 --> 00:22:44,640
quick shout out

00:22:41,440 --> 00:22:47,039
to thomas stakovic and mike klein for

00:22:44,640 --> 00:22:48,960
dealing with my rust coat on daily basis

00:22:47,039 --> 00:22:51,120
and making me a better brass programmer

00:22:48,960 --> 00:22:51,919
as a result a lot of things i learned

00:22:51,120 --> 00:22:54,640
about rust

00:22:51,919 --> 00:22:56,640
i learned from them and i would like to

00:22:54,640 --> 00:22:57,679
thank embark for giving me time to

00:22:56,640 --> 00:22:59,120
prepare this talk

00:22:57,679 --> 00:23:01,440
even though it was mostly about my

00:22:59,120 --> 00:23:03,120
personal non-work project

00:23:01,440 --> 00:23:05,440
and i would like to thank you for

00:23:03,120 --> 00:23:07,440
listening i hope it was useful

00:23:05,440 --> 00:23:08,640
and you learned something new and if you

00:23:07,440 --> 00:23:10,000
have any questions

00:23:08,640 --> 00:23:12,559
write a comment if you're watching it

00:23:10,000 --> 00:23:14,320
offline or post a message in the chat if

00:23:12,559 --> 00:23:16,480
you are watching it live

00:23:14,320 --> 00:23:23,840
thank you and have an awesome remainder

00:23:16,480 --> 00:23:23,840
of rustfest

00:23:25,360 --> 00:23:27,440

YouTube URL: https://www.youtube.com/watch?v=9tHTCNr5H8s


