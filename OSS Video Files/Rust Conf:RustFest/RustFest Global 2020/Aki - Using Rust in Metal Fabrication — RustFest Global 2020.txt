Title: Aki - Using Rust in Metal Fabrication — RustFest Global 2020
Publication date: 2020-12-19
Playlist: RustFest Global 2020
Description: 
	Selecting a programming language has far-reaching implications for any development team, affecting everything from new employee training to system architecture...

More at https://rustfest.global/session/1-using-rust-in-metal-fabrication/
Captions: 
	00:00:02,960 --> 00:00:07,040
aki

00:00:03,600 --> 00:00:07,919
has the unbreakable will to get rust to

00:00:07,040 --> 00:00:11,360
the metal

00:00:07,919 --> 00:00:14,400
to mill it into shapes snappy

00:00:11,360 --> 00:00:14,719
make customers happy though this battle

00:00:14,400 --> 00:00:17,920
is

00:00:14,719 --> 00:00:17,920
somewhat uphill

00:00:18,640 --> 00:00:21,520
thank you very much

00:00:22,480 --> 00:00:26,000
good day everybody thank you very much

00:00:24,480 --> 00:00:29,039
for joining me today

00:00:26,000 --> 00:00:31,840
my name is aki and today i would like to

00:00:29,039 --> 00:00:36,640
share some of my experiences using rust

00:00:31,840 --> 00:00:36,640
in metal fabrication let's get started

00:00:37,920 --> 00:00:41,040
of course i'm not referring to this kind

00:00:40,320 --> 00:00:43,680
of

00:00:41,040 --> 00:00:47,120
oxidized kind of rust which is generally

00:00:43,680 --> 00:00:49,600
not very desirable in metal fabrication

00:00:47,120 --> 00:00:50,879
the oxygen in the air reacts with iron

00:00:49,600 --> 00:00:52,559
to form the colored

00:00:50,879 --> 00:00:54,559
structurally weaker substance that we

00:00:52,559 --> 00:00:57,039
refer to as rust

00:00:54,559 --> 00:00:58,399
in metal fabrication various techniques

00:00:57,039 --> 00:01:00,640
such as painting

00:00:58,399 --> 00:01:03,600
and plating are used to protect the

00:01:00,640 --> 00:01:03,600
steel from rusting

00:01:04,799 --> 00:01:10,159
and today i'd like to explore some uses

00:01:07,840 --> 00:01:12,720
of a more desirable kind of rust

00:01:10,159 --> 00:01:14,320
the rust programming language and share

00:01:12,720 --> 00:01:18,320
some experiences using it

00:01:14,320 --> 00:01:18,320
to develop enterprise software

00:01:20,720 --> 00:01:24,400
today's talk will be a primarily

00:01:22,400 --> 00:01:26,080
non-technical perspective

00:01:24,400 --> 00:01:27,520
on using rust in the development of

00:01:26,080 --> 00:01:30,000
enterprise software

00:01:27,520 --> 00:01:33,360
and the implications of such a

00:01:30,000 --> 00:01:38,159
programming language selection

00:01:33,360 --> 00:01:38,159
so what is metal fabrication anyways

00:01:38,880 --> 00:01:42,880
well it refers to the manufacturing

00:01:41,920 --> 00:01:45,600
process

00:01:42,880 --> 00:01:47,680
that gives us these goodies in life

00:01:45,600 --> 00:01:48,799
large parts of this ferrari are made for

00:01:47,680 --> 00:01:50,960
metal

00:01:48,799 --> 00:01:51,840
the body paneling is made from giant

00:01:50,960 --> 00:01:54,399
sheets of metal

00:01:51,840 --> 00:01:55,520
pressed into the beautiful aerodynamic

00:01:54,399 --> 00:01:57,280
shape

00:01:55,520 --> 00:01:58,799
and the engine blocks are effectively

00:01:57,280 --> 00:02:02,479
carved from

00:01:58,799 --> 00:02:05,200
large blocks of metal the exhaust pipes

00:02:02,479 --> 00:02:08,959
the hubcaps are all created through

00:02:05,200 --> 00:02:11,200
metal fabrication processes

00:02:08,959 --> 00:02:12,959
it also brings us the metal factory

00:02:11,200 --> 00:02:14,720
equipment that bottles our beloved

00:02:12,959 --> 00:02:17,920
coca-cola drinks

00:02:14,720 --> 00:02:20,319
it brings us the belt conveyors

00:02:17,920 --> 00:02:21,440
that run the amazon warehouses that

00:02:20,319 --> 00:02:24,160
brings us

00:02:21,440 --> 00:02:25,280
the boxes to our front doors and of

00:02:24,160 --> 00:02:28,480
course

00:02:25,280 --> 00:02:29,599
our beloved gaming rigs with the metal

00:02:28,480 --> 00:02:31,519
power supplies

00:02:29,599 --> 00:02:33,040
and the cases all made out of sheet

00:02:31,519 --> 00:02:36,160
metal bent and cut

00:02:33,040 --> 00:02:38,400
into the just the right shapes

00:02:36,160 --> 00:02:39,440
so let's take a look at what the

00:02:38,400 --> 00:02:42,239
processes are

00:02:39,440 --> 00:02:42,720
that are used to modify the raw metal

00:02:42,239 --> 00:02:46,480
into

00:02:42,720 --> 00:02:46,480
these goods that we know and love

00:02:47,680 --> 00:02:51,120
so i did what anybody would do and asked

00:02:49,760 --> 00:02:54,640
google image search

00:02:51,120 --> 00:02:54,640
what metal fabrication was

00:02:55,920 --> 00:03:02,080
as you can see a lot of metal

00:02:59,120 --> 00:03:02,080
and lots of sparks

00:03:02,560 --> 00:03:07,519
on the right here we see a welder this

00:03:05,440 --> 00:03:10,800
is a process known as welding

00:03:07,519 --> 00:03:13,599
where metal parts are melted to form one

00:03:10,800 --> 00:03:13,599
solid block

00:03:16,080 --> 00:03:19,599
here with more sparks we see a laser

00:03:19,040 --> 00:03:22,080
cutter

00:03:19,599 --> 00:03:22,879
which uses high intensity laser beams to

00:03:22,080 --> 00:03:25,760
physically cut

00:03:22,879 --> 00:03:27,280
shapes out of sheets of metal and as you

00:03:25,760 --> 00:03:30,080
can imagine

00:03:27,280 --> 00:03:31,760
these are very expensive high precision

00:03:30,080 --> 00:03:34,560
precision machines

00:03:31,760 --> 00:03:35,599
and optimally using these manufacturing

00:03:34,560 --> 00:03:38,239
equipment

00:03:35,599 --> 00:03:40,879
is very very important to the success of

00:03:38,239 --> 00:03:42,560
any manufacturing operation

00:03:40,879 --> 00:03:44,560
so the metal fabrication industry

00:03:42,560 --> 00:03:48,319
benefits quite a bit from the use of

00:03:44,560 --> 00:03:48,319
software to run the business

00:03:51,440 --> 00:03:55,599
software is used throughout all phases

00:03:53,840 --> 00:03:58,159
of metal manufacturing

00:03:55,599 --> 00:03:59,920
from design and simulation on the left

00:03:58,159 --> 00:04:02,239
all the way to final delivery on the

00:03:59,920 --> 00:04:02,239
right

00:04:02,400 --> 00:04:10,159
in design we have cad 3d modeling

00:04:06,560 --> 00:04:11,840
cad stands for computer 80 design where

00:04:10,159 --> 00:04:14,400
the end product is designed on the

00:04:11,840 --> 00:04:16,959
computer using simulation tools for

00:04:14,400 --> 00:04:18,880
aerodynamic testing and whatnot

00:04:16,959 --> 00:04:21,600
as well as something that we software

00:04:18,880 --> 00:04:24,639
developers that was version control

00:04:21,600 --> 00:04:26,560
the equivalent of making sure that

00:04:24,639 --> 00:04:29,759
various iterations are tracked and the

00:04:26,560 --> 00:04:32,479
differences can be seen

00:04:29,759 --> 00:04:35,040
once the design is complete we need to

00:04:32,479 --> 00:04:37,280
go and purchase the raw materials

00:04:35,040 --> 00:04:39,120
this requires the exchange of money that

00:04:37,280 --> 00:04:42,880
requires approval workflows and

00:04:39,120 --> 00:04:45,120
integration with accounting systems

00:04:42,880 --> 00:04:46,960
and once the materials are at hand then

00:04:45,120 --> 00:04:48,560
we need to make sure that we utilize

00:04:46,960 --> 00:04:50,240
these expensive resources the

00:04:48,560 --> 00:04:52,240
manufacturing equipment

00:04:50,240 --> 00:04:54,240
and scheduling workers and the machines

00:04:52,240 --> 00:04:57,840
to optimize optimally plan

00:04:54,240 --> 00:04:57,840
the manufacturing system

00:04:58,560 --> 00:05:03,039
once the actual product is created we

00:05:01,120 --> 00:05:04,880
need to deliver it to the end customer

00:05:03,039 --> 00:05:06,320
which requires equipment like the

00:05:04,880 --> 00:05:07,840
forklift shown here

00:05:06,320 --> 00:05:10,000
we need to track inventory in the

00:05:07,840 --> 00:05:14,080
warehouse and also make sure

00:05:10,000 --> 00:05:14,080
that we know when it's finally delivered

00:05:16,320 --> 00:05:20,160
most of the information in today's talk

00:05:18,560 --> 00:05:20,960
is based around my experiences

00:05:20,160 --> 00:05:23,280
developing

00:05:20,960 --> 00:05:24,240
the right hand three purchasing

00:05:23,280 --> 00:05:26,720
manufacturing

00:05:24,240 --> 00:05:29,360
logistics and developing software for

00:05:26,720 --> 00:05:29,360
these areas

00:05:33,039 --> 00:05:40,320
and these three areas are created

00:05:36,840 --> 00:05:42,400
primarily when when we organize

00:05:40,320 --> 00:05:43,440
that information to streamline the

00:05:42,400 --> 00:05:46,160
workflow

00:05:43,440 --> 00:05:47,199
to enforce data integrity policies and

00:05:46,160 --> 00:05:52,000
track the flow of

00:05:47,199 --> 00:05:54,639
the physical goods and the money

00:05:52,000 --> 00:05:56,000
so a brief overview of the system

00:05:54,639 --> 00:05:57,919
architecture

00:05:56,000 --> 00:05:59,759
my development team builds enterprise

00:05:57,919 --> 00:06:02,319
software that uses the browser

00:05:59,759 --> 00:06:03,360
as the primary user interface and so our

00:06:02,319 --> 00:06:07,600
architecture

00:06:03,360 --> 00:06:10,160
looks very much like a web application

00:06:07,600 --> 00:06:11,680
with a front-end and some back-end

00:06:10,160 --> 00:06:13,199
processes

00:06:11,680 --> 00:06:14,720
but one of the most important things

00:06:13,199 --> 00:06:16,800
that we've done is

00:06:14,720 --> 00:06:18,639
in enterprise software the domain is

00:06:16,800 --> 00:06:20,800
very complex

00:06:18,639 --> 00:06:22,800
and so by separating out concerns with

00:06:20,800 --> 00:06:24,880
the into these separate modules

00:06:22,800 --> 00:06:26,479
we've been able to achieve a higher

00:06:24,880 --> 00:06:30,560
level of development

00:06:26,479 --> 00:06:32,479
efficiency on the left is the front end

00:06:30,560 --> 00:06:35,680
which is designed to optimally present

00:06:32,479 --> 00:06:37,280
data to the to the customer or the user

00:06:35,680 --> 00:06:39,520
in the tasks that they are doing right

00:06:37,280 --> 00:06:39,520
now

00:06:39,759 --> 00:06:43,440
the bff the backend for front end is a

00:06:42,800 --> 00:06:46,479
typescript

00:06:43,440 --> 00:06:47,039
node.js process and its role is to fetch

00:06:46,479 --> 00:06:49,440
data

00:06:47,039 --> 00:06:50,560
from wherever the data is whether it's

00:06:49,440 --> 00:06:53,680
another api

00:06:50,560 --> 00:06:56,400
another system a third party api

00:06:53,680 --> 00:06:58,880
whatever it is its job is to go and get

00:06:56,400 --> 00:06:58,880
the data

00:06:59,360 --> 00:07:05,440
and finally the back end

00:07:02,639 --> 00:07:07,360
this is written in rust and its goal is

00:07:05,440 --> 00:07:10,560
to enforce the domain model

00:07:07,360 --> 00:07:11,919
and to maintain data integrity and this

00:07:10,560 --> 00:07:16,319
is the area that i would like to talk

00:07:11,919 --> 00:07:17,919
about today

00:07:16,319 --> 00:07:22,080
first i'd like to cover some of the

00:07:17,919 --> 00:07:22,080
technical aspects of using rust

00:07:22,160 --> 00:07:26,160
specifically using rust in the domain

00:07:25,199 --> 00:07:29,759
driven design

00:07:26,160 --> 00:07:33,120
sense and second are impressions

00:07:29,759 --> 00:07:33,120
of the library ecosystem

00:07:36,400 --> 00:07:41,039
domain driven design is one of the most

00:07:38,880 --> 00:07:41,840
important concepts that we value in the

00:07:41,039 --> 00:07:44,160
development

00:07:41,840 --> 00:07:47,680
of enterprise software and it's a term

00:07:44,160 --> 00:07:50,479
coined by eric evans in his 2003 book

00:07:47,680 --> 00:07:52,479
and it emphasizes the importance for

00:07:50,479 --> 00:07:54,879
software developers to understand the

00:07:52,479 --> 00:07:57,440
real world domain

00:07:54,879 --> 00:07:58,560
and try to model it and express it in

00:07:57,440 --> 00:08:02,639
software

00:07:58,560 --> 00:08:03,280
so as an example in metal fabrication we

00:08:02,639 --> 00:08:06,080
use

00:08:03,280 --> 00:08:08,560
paint to prevent rusting given the

00:08:06,080 --> 00:08:10,960
various kinds of paints and colors

00:08:08,560 --> 00:08:12,560
let's try to create a data structure to

00:08:10,960 --> 00:08:15,039
express the color of paint

00:08:12,560 --> 00:08:15,039
in rust

00:08:17,280 --> 00:08:23,520
so rgb is a way that

00:08:20,479 --> 00:08:25,599
we use often in web development

00:08:23,520 --> 00:08:27,440
and let's say that 8-bit colors can be

00:08:25,599 --> 00:08:31,280
used and so we have a tuple of 3

00:08:27,440 --> 00:08:31,520
8-bit numbers taking another domain such

00:08:31,280 --> 00:08:35,839
as

00:08:31,520 --> 00:08:39,200
printing we may need to use cmyk

00:08:35,839 --> 00:08:41,279
so another expression of color

00:08:39,200 --> 00:08:43,039
with a different set of tuples and

00:08:41,279 --> 00:08:46,240
coming from c plus plus

00:08:43,039 --> 00:08:47,920
this if this way of expressing kind of

00:08:46,240 --> 00:08:52,320
typed unions

00:08:47,920 --> 00:08:52,320
in rust has been incredibly powerful

00:08:52,399 --> 00:08:59,440
but as with all things in the real world

00:08:55,519 --> 00:09:01,120
things weren't as easy as they seemed

00:08:59,440 --> 00:09:03,440
we found that in certain areas of the

00:09:01,120 --> 00:09:05,600
industry

00:09:03,440 --> 00:09:06,800
our customers did not know what color

00:09:05,600 --> 00:09:09,279
they wanted

00:09:06,800 --> 00:09:10,720
well to be specific they were not able

00:09:09,279 --> 00:09:14,160
to give us an rgb

00:09:10,720 --> 00:09:16,480
or a cmyk value that they wanted

00:09:14,160 --> 00:09:18,160
they actually had a color sample a

00:09:16,480 --> 00:09:20,320
physical product they had made

00:09:18,160 --> 00:09:21,760
previously and they wanted the same

00:09:20,320 --> 00:09:24,160
color as that

00:09:21,760 --> 00:09:25,839
and so as an industry and as a

00:09:24,160 --> 00:09:27,040
manufacturer we need to make sure that

00:09:25,839 --> 00:09:29,279
our enterprise system

00:09:27,040 --> 00:09:30,720
which was already in place be able to

00:09:29,279 --> 00:09:33,760
handle this new kind of

00:09:30,720 --> 00:09:37,279
way of specifying color and so

00:09:33,760 --> 00:09:40,080
rust's enum allowed us to just do this

00:09:37,279 --> 00:09:42,080
create a way to express physical color

00:09:40,080 --> 00:09:44,399
sample

00:09:42,080 --> 00:09:46,160
of course there's other ways to expand

00:09:44,399 --> 00:09:47,920
on this but this was actually a fairly

00:09:46,160 --> 00:09:49,760
simple way for us to know that

00:09:47,920 --> 00:09:51,279
there was no specification that we

00:09:49,760 --> 00:09:52,959
actually needed to get

00:09:51,279 --> 00:09:55,680
the actual physical color sample from

00:09:52,959 --> 00:09:55,680
the customer

00:09:56,480 --> 00:10:00,560
and handling this color is also quite

00:09:58,160 --> 00:10:03,120
easy with a match statement

00:10:00,560 --> 00:10:04,640
we can easily decompose each of rgb or

00:10:03,120 --> 00:10:07,920
cmyk

00:10:04,640 --> 00:10:10,399
and utilize those appropriately

00:10:07,920 --> 00:10:12,399
and as with all things where the domain

00:10:10,399 --> 00:10:14,720
is constantly evolving

00:10:12,399 --> 00:10:16,079
the rest compiler and the ability for

00:10:14,720 --> 00:10:19,200
the match statement

00:10:16,079 --> 00:10:22,000
to tell us when we're missing things

00:10:19,200 --> 00:10:24,480
this has actually saved our saved us

00:10:22,000 --> 00:10:27,120
many many times

00:10:24,480 --> 00:10:28,160
here the commented outline for physical

00:10:27,120 --> 00:10:30,079
color sample

00:10:28,160 --> 00:10:31,360
in the match statement would generate a

00:10:30,079 --> 00:10:34,079
compiler error

00:10:31,360 --> 00:10:34,959
and so if somebody modifying the domain

00:10:34,079 --> 00:10:39,040
model

00:10:34,959 --> 00:10:41,200
or the actual struct did not realize

00:10:39,040 --> 00:10:42,240
all the places where it was being used

00:10:41,200 --> 00:10:47,839
we could simply

00:10:42,240 --> 00:10:47,839
ask the compiler to detect it for us

00:10:49,920 --> 00:10:54,640
the next aspect after enums that we have

00:10:52,880 --> 00:10:57,120
utilized extensively

00:10:54,640 --> 00:11:00,399
is using phantom data types as markers

00:10:57,120 --> 00:11:04,000
for compile-time data type checking

00:11:00,399 --> 00:11:06,880
so we use money in enterprise

00:11:04,000 --> 00:11:09,200
and we use multiple currencies and so if

00:11:06,880 --> 00:11:10,800
we were to have a money struck here

00:11:09,200 --> 00:11:12,399
of course we'd have an amount as some

00:11:10,800 --> 00:11:15,440
kind of decimal value

00:11:12,399 --> 00:11:17,360
and the currency itself could be held as

00:11:15,440 --> 00:11:19,519
some kind of string

00:11:17,360 --> 00:11:21,200
but that would require us to do run time

00:11:19,519 --> 00:11:22,240
checks which are of course sometimes

00:11:21,200 --> 00:11:25,440
necessary

00:11:22,240 --> 00:11:28,399
but when we have uh business logic

00:11:25,440 --> 00:11:29,680
coded in we often want to have compile

00:11:28,399 --> 00:11:33,200
time checking

00:11:29,680 --> 00:11:35,519
and so by using phantom data types here

00:11:33,200 --> 00:11:38,240
we can create some enums for a japanese

00:11:35,519 --> 00:11:41,120
yen or us dollar

00:11:38,240 --> 00:11:43,120
so that when we create a statement like

00:11:41,120 --> 00:11:44,480
this where we try to add a japanese yen

00:11:43,120 --> 00:11:48,640
to a usd

00:11:44,480 --> 00:11:51,279
dollar we would get a compile error

00:11:48,640 --> 00:11:54,639
like this a very very friendly compiler

00:11:51,279 --> 00:11:57,600
that tells us exactly what happened

00:11:54,639 --> 00:11:58,639
this we use not just for monetary types

00:11:57,600 --> 00:12:01,839
but also for

00:11:58,639 --> 00:12:05,040
physical types such as meters length

00:12:01,839 --> 00:12:06,560
versus volume versus area it doesn't

00:12:05,040 --> 00:12:11,279
make sense to add

00:12:06,560 --> 00:12:13,440
volume to a a length for example

00:12:11,279 --> 00:12:14,480
and using these kinds of phantom data

00:12:13,440 --> 00:12:17,120
types has

00:12:14,480 --> 00:12:20,000
helped us extensively and optimize our

00:12:17,120 --> 00:12:20,000
development process

00:12:22,000 --> 00:12:25,040
next i'd like to talk about some of our

00:12:23,839 --> 00:12:28,639
impressions

00:12:25,040 --> 00:12:28,639
of the library ecosystem

00:12:29,760 --> 00:12:35,120
the good parts we actually found

00:12:33,279 --> 00:12:36,320
very high quality coverage across our

00:12:35,120 --> 00:12:39,279
needs

00:12:36,320 --> 00:12:39,760
we use rabbit nq for our event bus redis

00:12:39,279 --> 00:12:43,920
for some

00:12:39,760 --> 00:12:47,040
caching postgresql for

00:12:43,920 --> 00:12:49,920
for data persistence and grpc for

00:12:47,040 --> 00:12:52,399
communication purposes

00:12:49,920 --> 00:12:53,680
here we've used we've listed some of the

00:12:52,399 --> 00:12:56,399
libraries that we've used

00:12:53,680 --> 00:12:59,360
and we have found incredibly good

00:12:56,399 --> 00:12:59,360
experiences with them

00:12:59,920 --> 00:13:05,680
as for some of the wishes that we had

00:13:03,440 --> 00:13:07,600
it'd be great it would have been great

00:13:05,680 --> 00:13:09,120
if we could find more production use

00:13:07,600 --> 00:13:11,040
cases

00:13:09,120 --> 00:13:13,839
because production ready can be a very

00:13:11,040 --> 00:13:16,639
very subjective term

00:13:13,839 --> 00:13:16,639
but the real world

00:13:17,600 --> 00:13:22,720
using a real world product as an example

00:13:20,240 --> 00:13:25,279
really adds concreteness to it

00:13:22,720 --> 00:13:27,120
and so for example we started using

00:13:25,279 --> 00:13:30,720
tower grpc because linker d

00:13:27,120 --> 00:13:33,360
was using it and of course

00:13:30,720 --> 00:13:34,240
we started using rust in version 1.35

00:13:33,360 --> 00:13:36,480
which is pre

00:13:34,240 --> 00:13:37,360
async await and so when async await

00:13:36,480 --> 00:13:39,040
rolled around

00:13:37,360 --> 00:13:40,959
we weren't quite sure if we should jump

00:13:39,040 --> 00:13:42,880
on the bandwagon right then

00:13:40,959 --> 00:13:45,120
and in the end we actually still do not

00:13:42,880 --> 00:13:47,760
use async weight

00:13:45,120 --> 00:13:50,320
we use we just horizontally scale until

00:13:47,760 --> 00:13:52,880
we can handle it

00:13:50,320 --> 00:13:54,639
and so some guidance as to where the

00:13:52,880 --> 00:13:56,639
async awaits story is going

00:13:54,639 --> 00:13:58,399
i think would be really really uh useful

00:13:56,639 --> 00:13:59,120
for us and we're definitely watching the

00:13:58,399 --> 00:14:01,120
community

00:13:59,120 --> 00:14:03,839
and seeing where things are going right

00:14:01,120 --> 00:14:03,839
now

00:14:04,800 --> 00:14:10,320
and finally i'd like to cover some

00:14:06,320 --> 00:14:10,320
things that are non-technical

00:14:11,199 --> 00:14:16,639
primarily hiring hiring for rust

00:14:14,720 --> 00:14:18,320
with new engineering training once new

00:14:16,639 --> 00:14:20,880
engineers are on boarding

00:14:18,320 --> 00:14:22,160
and also how to maintain a good

00:14:20,880 --> 00:14:25,199
community within the com

00:14:22,160 --> 00:14:28,399
the development team itself and finally

00:14:25,199 --> 00:14:28,399
a bit about the community work

00:14:29,440 --> 00:14:32,720
deciding what qualities to look for in a

00:14:31,600 --> 00:14:35,839
candidate

00:14:32,720 --> 00:14:38,959
when your technology stack uses rust is

00:14:35,839 --> 00:14:41,360
incredibly challenging because it's such

00:14:38,959 --> 00:14:44,720
a bleeding edge technology

00:14:41,360 --> 00:14:46,240
and it's so new that compared to other

00:14:44,720 --> 00:14:48,399
languages that have been around for a

00:14:46,240 --> 00:14:50,320
lot longer it can be

00:14:48,399 --> 00:14:52,320
hard to figure out what to write in a

00:14:50,320 --> 00:14:56,480
job description

00:14:52,320 --> 00:14:58,959
and so here in japan one of the

00:14:56,480 --> 00:15:00,240
ways that we have decided to do hiring

00:14:58,959 --> 00:15:03,600
is to look for the

00:15:00,240 --> 00:15:07,760
core aspects of what are the attributes

00:15:03,600 --> 00:15:10,320
that make somebody a good rust engineer

00:15:07,760 --> 00:15:11,760
and so for us what worked and what has

00:15:10,320 --> 00:15:14,160
worked for the last

00:15:11,760 --> 00:15:14,959
year or two is the familiarity with a

00:15:14,160 --> 00:15:17,519
type system

00:15:14,959 --> 00:15:19,519
with traits and generics or something

00:15:17,519 --> 00:15:22,959
that's resembling traits or generics

00:15:19,519 --> 00:15:25,120
such as java or haskell or typescript

00:15:22,959 --> 00:15:26,959
as well as various notions of functional

00:15:25,120 --> 00:15:29,279
programming

00:15:26,959 --> 00:15:31,199
and finally familiarity with computer

00:15:29,279 --> 00:15:33,920
architecture and memory management

00:15:31,199 --> 00:15:36,160
and low-level aspects of how programs

00:15:33,920 --> 00:15:38,639
run

00:15:36,160 --> 00:15:40,079
of course if somebody had all three of

00:15:38,639 --> 00:15:42,639
these aspects they probably

00:15:40,079 --> 00:15:44,480
already have touched rust a little bit

00:15:42,639 --> 00:15:47,199
but we have found that

00:15:44,480 --> 00:15:48,959
many engineers from other languages have

00:15:47,199 --> 00:15:50,639
been very very successful

00:15:48,959 --> 00:15:53,040
using rust in the development of

00:15:50,639 --> 00:15:55,440
enterprise software with us

00:15:53,040 --> 00:15:59,120
and it was because of their strength in

00:15:55,440 --> 00:15:59,120
one or more of these areas

00:15:59,199 --> 00:16:04,959
and as with many engineers

00:16:02,720 --> 00:16:06,720
we don't write code just to write code

00:16:04,959 --> 00:16:08,000
we write code to make good things to

00:16:06,720 --> 00:16:10,800
make a change

00:16:08,000 --> 00:16:12,880
and so from a hiring perspective rust is

00:16:10,800 --> 00:16:15,680
certainly a distinguishing factor

00:16:12,880 --> 00:16:17,759
but enterprise can be kind of a a black

00:16:15,680 --> 00:16:18,880
box and so we've made a lot of efforts

00:16:17,759 --> 00:16:21,519
to make sure that

00:16:18,880 --> 00:16:23,279
people know what we make using rust what

00:16:21,519 --> 00:16:25,519
is rust being used for

00:16:23,279 --> 00:16:27,600
and how are we optimizing for example

00:16:25,519 --> 00:16:29,920
the metal fabrication supply chain using

00:16:27,600 --> 00:16:29,920
rust

00:16:30,800 --> 00:16:37,519
and once we have new hires

00:16:34,240 --> 00:16:40,000
training them has been required

00:16:37,519 --> 00:16:42,800
new kinds of efforts because sometimes

00:16:40,000 --> 00:16:44,480
relearning new foundational concepts

00:16:42,800 --> 00:16:46,880
but also learning to talk with the

00:16:44,480 --> 00:16:48,399
compiler we have found that once people

00:16:46,880 --> 00:16:50,560
get used to talking to

00:16:48,399 --> 00:16:52,800
the compiler they don't actually need

00:16:50,560 --> 00:16:54,800
very much hand holding

00:16:52,800 --> 00:16:56,880
they'll just get up to speed very very

00:16:54,800 --> 00:16:59,600
quickly

00:16:56,880 --> 00:17:01,360
and finally rust is good at some things

00:16:59,600 --> 00:17:03,440
and not as good as some other things

00:17:01,360 --> 00:17:04,400
and so making sure that everybody's

00:17:03,440 --> 00:17:07,039
aware of

00:17:04,400 --> 00:17:09,039
how our development team uses rust and

00:17:07,039 --> 00:17:10,880
where we choose to not use rust

00:17:09,039 --> 00:17:12,799
for example in the development of front

00:17:10,880 --> 00:17:13,439
end it's probably much easier to use

00:17:12,799 --> 00:17:19,039
react

00:17:13,439 --> 00:17:21,520
than to use rust

00:17:19,039 --> 00:17:23,199
as a development team having a critical

00:17:21,520 --> 00:17:26,079
mass of road stations

00:17:23,199 --> 00:17:27,839
has been incredibly important because it

00:17:26,079 --> 00:17:29,679
allows us to create a rustation

00:17:27,839 --> 00:17:30,320
community within the same development

00:17:29,679 --> 00:17:33,039
team

00:17:30,320 --> 00:17:33,760
and fostering culture to stay up to date

00:17:33,039 --> 00:17:35,919
because

00:17:33,760 --> 00:17:38,160
the ecosystem is constantly changing the

00:17:35,919 --> 00:17:41,440
language is always evolving

00:17:38,160 --> 00:17:43,360
and so we have found that fostering this

00:17:41,440 --> 00:17:44,160
kind of culture has been very very

00:17:43,360 --> 00:17:48,000
important

00:17:44,160 --> 00:17:52,000
to the success of using rust within our

00:17:48,000 --> 00:17:54,880
development team and finally

00:17:52,000 --> 00:17:56,480
the success of the rust community

00:17:54,880 --> 00:17:57,280
contributes to the success of the

00:17:56,480 --> 00:17:59,840
business

00:17:57,280 --> 00:18:00,799
and the success of our development team

00:17:59,840 --> 00:18:02,880
and so as

00:18:00,799 --> 00:18:03,919
a enterprise software development

00:18:02,880 --> 00:18:06,960
corporation

00:18:03,919 --> 00:18:08,240
it's important that we participate in

00:18:06,960 --> 00:18:11,760
the community

00:18:08,240 --> 00:18:13,919
and so with the pandemic

00:18:11,760 --> 00:18:15,520
here in tokyo a lot of things started to

00:18:13,919 --> 00:18:19,039
shut down in march

00:18:15,520 --> 00:18:21,360
and so in april we started a meetup

00:18:19,039 --> 00:18:23,600
an online meetup called stamachi rs in

00:18:21,360 --> 00:18:26,000
collaboration with layer x

00:18:23,600 --> 00:18:27,679
because as corporations we often have

00:18:26,000 --> 00:18:28,000
some resources that the community does

00:18:27,679 --> 00:18:30,480
not have

00:18:28,000 --> 00:18:32,320
access to and so we believe that it's

00:18:30,480 --> 00:18:33,360
really important to keep the community

00:18:32,320 --> 00:18:35,679
alive

00:18:33,360 --> 00:18:36,720
and making sure that there is constant

00:18:35,679 --> 00:18:40,799
innovation

00:18:36,720 --> 00:18:40,799
and that people are always engaged

00:18:41,600 --> 00:18:45,200
and with that

00:18:46,000 --> 00:18:50,160
i'd like to give a few closing words

00:18:47,840 --> 00:18:52,880
about using rust and metal fabrication

00:18:50,160 --> 00:18:53,919
metal fabrication itself is a very very

00:18:52,880 --> 00:18:56,000
complicated

00:18:53,919 --> 00:18:57,520
real world domain but rust has been an

00:18:56,000 --> 00:19:00,640
amazing language

00:18:57,520 --> 00:19:01,919
for developing the software and the

00:19:00,640 --> 00:19:04,559
library ecosystem

00:19:01,919 --> 00:19:05,120
maturity has been actually good enough

00:19:04,559 --> 00:19:07,280
for us

00:19:05,120 --> 00:19:10,640
but at the beginning it was a bit

00:19:07,280 --> 00:19:13,039
difficult for us to gauge

00:19:10,640 --> 00:19:13,679
and using rust itself has been

00:19:13,039 --> 00:19:16,400
technically

00:19:13,679 --> 00:19:18,320
an amazing experience and from a

00:19:16,400 --> 00:19:20,640
non-technical perspective

00:19:18,320 --> 00:19:22,080
different kinds of efforts were required

00:19:20,640 --> 00:19:24,559
for hiring and training

00:19:22,080 --> 00:19:26,960
to maintain this kind of efficiency in

00:19:24,559 --> 00:19:29,039
our development

00:19:26,960 --> 00:19:30,480
but the friendly and welcoming community

00:19:29,039 --> 00:19:32,960
has been absolutely

00:19:30,480 --> 00:19:34,640
wonderful the resources are available in

00:19:32,960 --> 00:19:38,160
japanese as well

00:19:34,640 --> 00:19:40,960
and so as my last words

00:19:38,160 --> 00:19:42,000
let's as corporations and as any

00:19:40,960 --> 00:19:44,559
enterprise user

00:19:42,000 --> 00:19:45,039
or as any commercial entity think it's

00:19:44,559 --> 00:19:46,559
really

00:19:45,039 --> 00:19:48,720
or actually any development team for

00:19:46,559 --> 00:19:49,679
that matter i think it's really really

00:19:48,720 --> 00:19:52,320
important

00:19:49,679 --> 00:19:54,559
to share real world use cases of rest

00:19:52,320 --> 00:19:56,640
and to really support the rust community

00:19:54,559 --> 00:19:58,320
because the success of the community

00:19:56,640 --> 00:20:01,760
really gives back to the success of

00:19:58,320 --> 00:20:01,760
every project that we work on

00:20:02,720 --> 00:20:06,080
so thank you very much for your time

00:20:05,039 --> 00:20:08,799
today

00:20:06,080 --> 00:20:08,799
it was a pleasure

00:20:10,480 --> 00:20:15,840
thanks saki if you have any questions

00:20:13,440 --> 00:20:21,840
please leave comments to the chat

00:20:15,840 --> 00:20:21,840
anyway um there are some questions

00:20:23,679 --> 00:20:30,640
uh aki

00:20:28,080 --> 00:20:31,440
do your rough structure start to a

00:20:30,640 --> 00:20:34,720
mirror

00:20:31,440 --> 00:20:37,520
your typescript types in your bff layer

00:20:34,720 --> 00:20:37,520
in any ways

00:20:38,640 --> 00:20:44,880
yes thank you for the question the

00:20:41,760 --> 00:20:45,840
rest structures are reflected in the

00:20:44,880 --> 00:20:49,760
typescript layer

00:20:45,840 --> 00:20:51,760
in fact it requires we use grpc

00:20:49,760 --> 00:20:53,600
in between and so we can share some of

00:20:51,760 --> 00:20:57,039
the grpc

00:20:53,600 --> 00:21:00,000
protobuf definition files so that we can

00:20:57,039 --> 00:21:01,280
do easily we can easily translate them

00:21:00,000 --> 00:21:03,520
to both sides

00:21:01,280 --> 00:21:04,799
however of course the type systems are

00:21:03,520 --> 00:21:07,200
not exactly the same

00:21:04,799 --> 00:21:08,080
in rust and typescript so there's a

00:21:07,200 --> 00:21:10,000
little bit of

00:21:08,080 --> 00:21:11,600
massaging that we need to do to make

00:21:10,000 --> 00:21:15,440
sure that we can handle it

00:21:11,600 --> 00:21:17,679
but both rust and typescript have fairly

00:21:15,440 --> 00:21:18,960
similar notions of types in some ways

00:21:17,679 --> 00:21:22,000
and so that has been

00:21:18,960 --> 00:21:23,840
very instrumental in optimizing

00:21:22,000 --> 00:21:31,200
or to reduce or to increase the

00:21:23,840 --> 00:21:36,159
efficiency of our development process

00:21:31,200 --> 00:21:36,159
um any other questions

00:21:39,600 --> 00:21:47,600
okay thank you aki

00:21:43,280 --> 00:21:59,760
that's all all right thank you very much

00:21:47,600 --> 00:21:59,760

YouTube URL: https://www.youtube.com/watch?v=v376Ds9_ITs


