Title: State of the crates.io — Sean Griffin
Publication date: 2018-11-28
Playlist: Rust Belt Rust 2018
Description: 
	Crates.io is a critical piece of Rust's infrastructure. If it goes down, there's a good chance that your builds will stop working. In this talk we'll learn about what's happened in the last year to improve the resiliency and performance of the site. We'll look at what the plans are for the future, and you'll learn how you can get involved.
Captions: 
	00:00:07,060 --> 00:00:13,080
all right oh no don't worry this

00:00:09,940 --> 00:00:13,080
actually is just my first slide

00:00:14,790 --> 00:00:21,220
hi I'm Sean among other things I am a

00:00:18,850 --> 00:00:23,020
member of the Chris at i/o team thing

00:00:21,220 --> 00:00:24,430
that I've been realizing today is that a

00:00:23,020 --> 00:00:26,560
lot of times I will say something

00:00:24,430 --> 00:00:28,330
intending it to be presented as my

00:00:26,560 --> 00:00:30,160
personal opinion and folks have been

00:00:28,330 --> 00:00:32,199
interpreting it as an official statement

00:00:30,160 --> 00:00:34,059
coming from the team and I'm gonna be

00:00:32,199 --> 00:00:34,840
doing both in this talk so to help

00:00:34,059 --> 00:00:36,489
clarify things

00:00:34,840 --> 00:00:38,140
this is my team hat I'm gonna remind

00:00:36,489 --> 00:00:39,730
every time I change it but if the hat is

00:00:38,140 --> 00:00:41,350
on I am talking as a member of the crazy

00:00:39,730 --> 00:00:42,339
IO team and if I'm not wearing the hat I

00:00:41,350 --> 00:00:44,170
am talking about my own personal

00:00:42,339 --> 00:00:50,590
opinions that do not necessarily reflect

00:00:44,170 --> 00:00:52,989
the rest of the team now I know this is

00:00:50,590 --> 00:00:55,059
a rust conference but this talk is going

00:00:52,989 --> 00:00:57,579
to have a lot of Ruby in it because the

00:00:55,059 --> 00:01:07,210
other project I'm best known for is Ruby

00:00:57,579 --> 00:01:09,759
on Rails I love this picture so much so

00:01:07,210 --> 00:01:11,979
the crates on IO team is very new so

00:01:09,759 --> 00:01:13,570
first I want to talk about what the

00:01:11,979 --> 00:01:16,090
crate what the team is and what our

00:01:13,570 --> 00:01:18,039
responsibilities are we have two main

00:01:16,090 --> 00:01:20,140
responsibilities the first is that we

00:01:18,039 --> 00:01:22,599
manage the day-to-day operations of

00:01:20,140 --> 00:01:25,060
creció we respond to incidents we keep

00:01:22,599 --> 00:01:26,349
everything running the second

00:01:25,060 --> 00:01:28,209
responsibility we have is to set the

00:01:26,349 --> 00:01:30,310
development priorities for the project

00:01:28,209 --> 00:01:31,780
and we're usually doing this based on

00:01:30,310 --> 00:01:34,690
the challenges that we're currently

00:01:31,780 --> 00:01:36,849
facing on the operations side the team

00:01:34,690 --> 00:01:38,289
has started this year in April we

00:01:36,849 --> 00:01:40,060
started with just three people but we've

00:01:38,289 --> 00:01:43,509
grown quite a bit since then we now have

00:01:40,060 --> 00:01:45,399
nine everyone on the team is here for

00:01:43,509 --> 00:01:46,030
different reasons some of us work on

00:01:45,399 --> 00:01:48,310
operations

00:01:46,030 --> 00:01:50,679
some of us work on code some people are

00:01:48,310 --> 00:01:52,209
here just to increase the communication

00:01:50,679 --> 00:01:55,539
between the create CIO team and other

00:01:52,209 --> 00:01:57,369
teams one thing we all agree on though

00:01:55,539 --> 00:02:00,310
is how important creates that IO is to

00:01:57,369 --> 00:02:01,810
the rusty ecosystem now you might be

00:02:00,310 --> 00:02:04,660
wondering why does crates that I own

00:02:01,810 --> 00:02:06,910
need an official team well there's a

00:02:04,660 --> 00:02:08,979
couple of reasons for that in the past

00:02:06,910 --> 00:02:11,290
it's been unclear what the role of

00:02:08,979 --> 00:02:14,739
crates at i/o is in relation to the rust

00:02:11,290 --> 00:02:16,900
project the RFC's repo for rust lays out

00:02:14,739 --> 00:02:19,180
what needs an RFC but how much of that

00:02:16,900 --> 00:02:20,620
applies to create some ill do it does a

00:02:19,180 --> 00:02:22,840
new feature for crates io require a

00:02:20,620 --> 00:02:25,330
feature it does in the compiler but and

00:02:22,840 --> 00:02:26,770
we didn't have separate policies if

00:02:25,330 --> 00:02:28,870
somebody opened in our

00:02:26,770 --> 00:02:30,280
see about crates at i/o who would be the

00:02:28,870 --> 00:02:32,500
team that actually made the final

00:02:30,280 --> 00:02:34,210
decision on that establishing an

00:02:32,500 --> 00:02:36,310
official team only responsible for

00:02:34,210 --> 00:02:37,960
creció provides a lot of clear answers

00:02:36,310 --> 00:02:41,170
these questions or at least an avenue to

00:02:37,960 --> 00:02:44,530
do so it's also an effort to recruit

00:02:41,170 --> 00:02:45,850
more people to work on the project the

00:02:44,530 --> 00:02:47,380
team was started this year when it

00:02:45,850 --> 00:02:50,290
became clear that we needed more people

00:02:47,380 --> 00:02:52,270
working a bug had made it into

00:02:50,290 --> 00:02:54,340
production and nobody with the ability

00:02:52,270 --> 00:02:57,010
to deploy the site had the bandwidth to

00:02:54,340 --> 00:02:58,660
deal with it so Ashley Williams and I

00:02:57,010 --> 00:02:59,830
formed the team in order to deal with

00:02:58,660 --> 00:03:01,360
that bug and some of the other

00:02:59,830 --> 00:03:04,120
operational problems that we had at the

00:03:01,360 --> 00:03:05,620
time we're gonna talk about some of

00:03:04,120 --> 00:03:06,850
those problems but first I want to talk

00:03:05,620 --> 00:03:08,110
about some of the results we've had

00:03:06,850 --> 00:03:11,680
because it's been a really exciting year

00:03:08,110 --> 00:03:14,830
for Chris at i/o the first one is that

00:03:11,680 --> 00:03:17,200
the site is faster did anybody try using

00:03:14,830 --> 00:03:22,540
crates that I oh like March early April

00:03:17,200 --> 00:03:23,890
it was really bad so we've spent a lot

00:03:22,540 --> 00:03:26,980
of time and effort improving that

00:03:23,890 --> 00:03:28,300
throughout the year these are these are

00:03:26,980 --> 00:03:36,790
some of our stats I just took this

00:03:28,300 --> 00:03:39,430
screenshot today so our 95th percentile

00:03:36,790 --> 00:03:41,560
times are consistently staying under 100

00:03:39,430 --> 00:03:43,090
millisecond a hundred and a hundred

00:03:41,560 --> 00:03:45,010
milliseconds and our 99th are

00:03:43,090 --> 00:03:47,620
consistently staying under 150 that

00:03:45,010 --> 00:03:49,330
means that 99% of requests coming into

00:03:47,620 --> 00:03:51,970
crates that I owe get their response in

00:03:49,330 --> 00:03:52,990
less than 150 milliseconds and this is

00:03:51,970 --> 00:03:54,250
huge for us

00:03:52,990 --> 00:03:56,140
because at the start of the year these

00:03:54,250 --> 00:04:01,690
numbers were both frequently multiple

00:03:56,140 --> 00:04:02,980
seconds one of the other big things that

00:04:01,690 --> 00:04:04,480
we've done and probably the most

00:04:02,980 --> 00:04:07,150
important thing we've done is that we

00:04:04,480 --> 00:04:08,230
have an on-call rotation now if the site

00:04:07,150 --> 00:04:10,120
goes down at 3:00 in the morning

00:04:08,230 --> 00:04:13,180
somebody's actually getting woken up to

00:04:10,120 --> 00:04:14,440
deal with it we set up some basic

00:04:13,180 --> 00:04:16,270
monitoring we're not monitoring

00:04:14,440 --> 00:04:17,799
everything that we want to yet but some

00:04:16,270 --> 00:04:20,560
of the big ones like is the site

00:04:17,799 --> 00:04:23,380
returning an error for everybody or our

00:04:20,560 --> 00:04:25,450
response times obnoxiously high wake us

00:04:23,380 --> 00:04:26,650
up in the middle of the night and a lot

00:04:25,450 --> 00:04:28,180
of incidents have occurred over the last

00:04:26,650 --> 00:04:31,720
year and when they have we've been able

00:04:28,180 --> 00:04:32,230
to consistently respond it's in a timely

00:04:31,720 --> 00:04:37,260
fashion

00:04:32,230 --> 00:04:37,260
24 hours a day now of course there's a

00:04:39,760 --> 00:04:44,810
now of course there's sort of a golden

00:04:41,900 --> 00:04:46,100
rule in operations when you start

00:04:44,810 --> 00:04:48,020
monitoring something that didn't

00:04:46,100 --> 00:04:52,990
previously have monitoring you're

00:04:48,020 --> 00:04:56,120
inevitably going to learn it's broken so

00:04:52,990 --> 00:04:57,770
when we first set up pager Duty I was

00:04:56,120 --> 00:05:00,110
the person who was on call for that for

00:04:57,770 --> 00:05:05,000
that rotation so I got woken up in the

00:05:00,110 --> 00:05:06,950
middle of the night a lot this is April

00:05:05,000 --> 00:05:08,930
12th is when we are April 13th is when

00:05:06,950 --> 00:05:11,330
we first introduced monitoring to cryo

00:05:08,930 --> 00:05:13,820
and every single night for three nights

00:05:11,330 --> 00:05:17,720
I got woken up at after midnight thank

00:05:13,820 --> 00:05:18,830
you so I want to talk about what caused

00:05:17,720 --> 00:05:19,910
some of these and how we've corrected

00:05:18,830 --> 00:05:23,390
them because a few of them were rather

00:05:19,910 --> 00:05:26,510
interesting so the first incident was

00:05:23,390 --> 00:05:28,430
really bad requests to the crate

00:05:26,510 --> 00:05:30,620
download end point we're timing out and

00:05:28,430 --> 00:05:32,780
we take this sort of incident more

00:05:30,620 --> 00:05:34,250
seriously than any other because if the

00:05:32,780 --> 00:05:36,110
crate download endpoint isn't working

00:05:34,250 --> 00:05:38,480
that means that cargo build is broken

00:05:36,110 --> 00:05:40,000
for some people's projects and that is

00:05:38,480 --> 00:05:42,740
just unacceptable

00:05:40,000 --> 00:05:44,420
we were randomly sometimes taking more

00:05:42,740 --> 00:05:45,920
than 30 seconds to respond on this

00:05:44,420 --> 00:05:48,890
endpoint which normally responds in

00:05:45,920 --> 00:05:50,690
under 8 milliseconds now we're hosted on

00:05:48,890 --> 00:05:52,280
Heroku which means we have a hard upper

00:05:50,690 --> 00:05:53,900
limit on our response time if we don't

00:05:52,280 --> 00:05:55,550
send a response to the user or at least

00:05:53,900 --> 00:05:57,800
start sending a response city to the

00:05:55,550 --> 00:05:59,390
user within 30 seconds the request is

00:05:57,800 --> 00:06:01,370
killed and we have no control over that

00:05:59,390 --> 00:06:06,560
we cannot increase it any further and we

00:06:01,370 --> 00:06:09,230
really don't want to so the end point is

00:06:06,560 --> 00:06:13,130
really simple we grab a database

00:06:09,230 --> 00:06:14,180
connection we increment a counter to to

00:06:13,130 --> 00:06:16,640
mark that the crate has been downloaded

00:06:14,180 --> 00:06:19,490
at one more time and then we redirect

00:06:16,640 --> 00:06:21,080
you to s3 now redirecting you to s3

00:06:19,490 --> 00:06:22,550
can't possibly be the cause of the

00:06:21,080 --> 00:06:26,510
timeout since that's literally us just

00:06:22,550 --> 00:06:28,340
saying cool now go to this other URL so

00:06:26,510 --> 00:06:30,800
the thing that was timing out had to

00:06:28,340 --> 00:06:33,580
either be grabbing a database connection

00:06:30,800 --> 00:06:36,350
or the actual query that we were running

00:06:33,580 --> 00:06:38,720
the problem was both of these actions

00:06:36,350 --> 00:06:40,640
had a timeout of greater than 30 seconds

00:06:38,720 --> 00:06:42,890
so we really didn't have a way to figure

00:06:40,640 --> 00:06:44,990
out which of those it was if if one was

00:06:42,890 --> 00:06:49,160
fair if either one failed it would fail

00:06:44,990 --> 00:06:51,020
after the request already got killed now

00:06:49,160 --> 00:06:52,400
the other problem was it's the it's a

00:06:51,020 --> 00:06:54,650
very simple code change to lower those

00:06:52,400 --> 00:06:57,710
timeouts but that required deploying new

00:06:54,650 --> 00:07:01,550
code and the rust compiler isn't

00:06:57,710 --> 00:07:03,410
necessarily always the fastest our build

00:07:01,550 --> 00:07:05,840
is actually a lot slower than we'd like

00:07:03,410 --> 00:07:08,150
and we're figuring out why and trying to

00:07:05,840 --> 00:07:11,270
improve that but at best it takes about

00:07:08,150 --> 00:07:12,680
maybe five minutes and it for a release

00:07:11,270 --> 00:07:14,390
build and at worst it can take upwards

00:07:12,680 --> 00:07:16,700
of thirty minutes which if the site's

00:07:14,390 --> 00:07:19,490
down not that's not really the feedback

00:07:16,700 --> 00:07:21,200
cycle you want to have so one of the

00:07:19,490 --> 00:07:23,030
things that we've been doing to improve

00:07:21,200 --> 00:07:25,250
our ability to respond to incidents like

00:07:23,030 --> 00:07:27,170
this is making more things configurable

00:07:25,250 --> 00:07:28,940
by environment variables anything we

00:07:27,170 --> 00:07:30,260
might want to change on the fly we

00:07:28,940 --> 00:07:32,540
configure with an environment variable

00:07:30,260 --> 00:07:35,210
rather than a magic number in code this

00:07:32,540 --> 00:07:38,420
is best practice anyway but it wasn't

00:07:35,210 --> 00:07:39,950
done already and now it is this may it's

00:07:38,420 --> 00:07:41,510
very easy for us to just change an

00:07:39,950 --> 00:07:42,920
environment variable and restart the

00:07:41,510 --> 00:07:47,240
server and it's much faster than

00:07:42,920 --> 00:07:49,580
actually deploying new code so once we

00:07:47,240 --> 00:07:51,290
did this we set the timeouts for both to

00:07:49,580 --> 00:07:53,480
10 seconds and we established yep the

00:07:51,290 --> 00:07:55,220
database connection is coming in fine so

00:07:53,480 --> 00:07:58,490
the problem is that the query itself is

00:07:55,220 --> 00:08:00,650
timing out so we need to figure out why

00:07:58,490 --> 00:08:01,880
why is this query now which we expect to

00:08:00,650 --> 00:08:04,510
finish almost immediately

00:08:01,880 --> 00:08:07,190
sometimes taking upwards of 30 seconds

00:08:04,510 --> 00:08:09,350
so we're hosted on Heroku we use Heroku

00:08:07,190 --> 00:08:11,740
Postgres for our database they have some

00:08:09,350 --> 00:08:13,580
really really great dashboards for this

00:08:11,740 --> 00:08:15,560
they have this view where you can see

00:08:13,580 --> 00:08:18,800
all of your most time-consuming queries

00:08:15,560 --> 00:08:21,500
and a graph over time of how many times

00:08:18,800 --> 00:08:24,590
they're executed per second and also how

00:08:21,500 --> 00:08:26,810
long those queries cake now the query

00:08:24,590 --> 00:08:28,669
that we were executing inside the crate

00:08:26,810 --> 00:08:30,919
download endpoint had a ton of

00:08:28,669 --> 00:08:32,390
variability in it sometimes it was

00:08:30,919 --> 00:08:34,580
taking one millisecond on average

00:08:32,390 --> 00:08:36,440
sometimes it was taking 150 milliseconds

00:08:34,580 --> 00:08:37,880
on average the average never went up to

00:08:36,440 --> 00:08:41,990
30 seconds because it was just a few

00:08:37,880 --> 00:08:45,110
outliers not like every request because

00:08:41,990 --> 00:08:47,810
it was so variable I suspected that it

00:08:45,110 --> 00:08:50,090
was a lock contention issue basically

00:08:47,810 --> 00:08:51,770
some other database connection somewhere

00:08:50,090 --> 00:08:54,140
was trying to update the same row

00:08:51,770 --> 00:08:56,270
locking it to do that and then doing a

00:08:54,140 --> 00:08:58,520
bunch of other work which apparently

00:08:56,270 --> 00:09:01,520
takes more than 30 seconds before let it

00:08:58,520 --> 00:09:02,960
go and our download can continue as I

00:09:01,520 --> 00:09:04,250
was digging through the logs to try and

00:09:02,960 --> 00:09:06,530
find more information on this I actually

00:09:04,250 --> 00:09:08,420
found out that Heroku just logs for you

00:09:06,530 --> 00:09:10,070
anytime a query is waiting on a lock for

00:09:08,420 --> 00:09:12,440
more than a second and we had a lot of

00:09:10,070 --> 00:09:17,660
those logs so we have a lock contention

00:09:12,440 --> 00:09:19,130
issue so because we know that's that

00:09:17,660 --> 00:09:20,660
something else is locking the row that

00:09:19,130 --> 00:09:23,270
means there's somewhere else in our code

00:09:20,660 --> 00:09:26,180
that is updating the same table so we

00:09:23,270 --> 00:09:27,620
need to figure out where that was didn't

00:09:26,180 --> 00:09:29,090
have any fancy graphs this time it was

00:09:27,620 --> 00:09:30,770
actually a really blunt instrument I

00:09:29,090 --> 00:09:32,690
grabbed the code base for the table name

00:09:30,770 --> 00:09:34,850
and looked at like the five other places

00:09:32,690 --> 00:09:37,010
that we're touching it because the table

00:09:34,850 --> 00:09:38,870
is called version downloads it's how

00:09:37,010 --> 00:09:40,970
many times has this version of this

00:09:38,870 --> 00:09:43,400
crate been downloaded on this date and

00:09:40,970 --> 00:09:46,550
just not a lot of things need to need to

00:09:43,400 --> 00:09:48,260
talk to that table so we narrowed it

00:09:46,550 --> 00:09:50,060
down pretty quickly to the update

00:09:48,260 --> 00:09:52,100
downloads binary that we have running

00:09:50,060 --> 00:09:55,010
constantly in the background what this

00:09:52,100 --> 00:09:57,470
does is every few minutes it'll go and

00:09:55,010 --> 00:10:00,560
look at the version downloads table so

00:09:57,470 --> 00:10:02,270
that's our most granular view of how

00:10:00,560 --> 00:10:04,160
often a crate is downloaded and that

00:10:02,270 --> 00:10:06,530
just updates a bunch of other caches

00:10:04,160 --> 00:10:08,780
like we can calculate the number of

00:10:06,530 --> 00:10:10,730
downloads that have happened across all

00:10:08,780 --> 00:10:13,760
crates across all time just from this

00:10:10,730 --> 00:10:15,170
table but that would be obnoxiously slow

00:10:13,760 --> 00:10:16,730
so we don't do that we just have a

00:10:15,170 --> 00:10:19,400
separate place that we store that along

00:10:16,730 --> 00:10:20,570
with how many times was this crate

00:10:19,400 --> 00:10:23,390
download instead of just this version

00:10:20,570 --> 00:10:25,160
per day and then version all time create

00:10:23,390 --> 00:10:27,920
all time etc etc lots of different

00:10:25,160 --> 00:10:29,900
things so what this does is this goes

00:10:27,920 --> 00:10:31,370
through the version download rows and it

00:10:29,900 --> 00:10:33,950
grabs them in batches of a thousand and

00:10:31,370 --> 00:10:35,390
then starts processing each one the

00:10:33,950 --> 00:10:36,620
first thing it does is update the row

00:10:35,390 --> 00:10:39,350
and say like yeah we've counted more

00:10:36,620 --> 00:10:42,680
downloads from here the problem was each

00:10:39,350 --> 00:10:44,780
batch of a thousand was being processed

00:10:42,680 --> 00:10:47,030
in a single database transaction so any

00:10:44,780 --> 00:10:50,360
locks it held we're gonna be held until

00:10:47,030 --> 00:10:52,010
until that transaction committed so the

00:10:50,360 --> 00:10:54,140
first row that we processed in that

00:10:52,010 --> 00:10:56,840
batch would remain locked while we

00:10:54,140 --> 00:11:02,090
processed the remaining 999 rows in that

00:10:56,840 --> 00:11:03,590
batch and this this binary also logged

00:11:02,090 --> 00:11:05,120
every time it started a new batch so we

00:11:03,590 --> 00:11:07,580
could see how long each batch was taking

00:11:05,120 --> 00:11:12,680
looking at the logs it took just over 30

00:11:07,580 --> 00:11:15,080
seconds bingo so this is the actual

00:11:12,680 --> 00:11:16,070
query that we execute in update in the

00:11:15,080 --> 00:11:16,889
download endpoint you don't actually

00:11:16,070 --> 00:11:18,449
need to

00:11:16,889 --> 00:11:20,609
but this is the actual graph from when

00:11:18,449 --> 00:11:22,559
we when we deployed this fix the fix was

00:11:20,609 --> 00:11:24,299
actually really easy we just changed it

00:11:22,559 --> 00:11:26,100
to hold a transaction for one row

00:11:24,299 --> 00:11:28,019
instead of every thousand rows and the

00:11:26,100 --> 00:11:29,579
lock it's released immediately and as

00:11:28,019 --> 00:11:33,419
soon as we deployed that the lock

00:11:29,579 --> 00:11:35,069
contention issue went away and what used

00:11:33,419 --> 00:11:36,749
to take upwards of 30 seconds sometimes

00:11:35,069 --> 00:11:38,879
but the max average we have here is a

00:11:36,749 --> 00:11:40,649
hundred and fifty two and it went to sub

00:11:38,879 --> 00:11:49,169
millisecond which is what we expected to

00:11:40,649 --> 00:11:51,089
see now the other question though was

00:11:49,169 --> 00:11:53,850
why was the update download script

00:11:51,089 --> 00:11:55,769
taking 30 seconds for every bash we

00:11:53,850 --> 00:12:00,059
didn't used to have this issue and it

00:11:55,769 --> 00:12:02,399
just had recently started so the problem

00:12:00,059 --> 00:12:04,230
here was that we were just missing some

00:12:02,399 --> 00:12:05,730
database indexes some caches on your

00:12:04,230 --> 00:12:07,559
database that make it easier to do

00:12:05,730 --> 00:12:09,839
things like sort by individual columns

00:12:07,559 --> 00:12:11,999
and our table had grown to a critical

00:12:09,839 --> 00:12:14,129
mass of size where a different index it

00:12:11,999 --> 00:12:16,230
used to be using could no longer be used

00:12:14,129 --> 00:12:18,299
so this meant that the the every query

00:12:16,230 --> 00:12:20,609
on this table had to scan the entire the

00:12:18,299 --> 00:12:23,100
entire table row by row and do all of

00:12:20,609 --> 00:12:24,989
its operations in memory and this meant

00:12:23,100 --> 00:12:27,629
a query that used to be taking a handful

00:12:24,989 --> 00:12:29,970
of milliseconds now it was taking 14

00:12:27,629 --> 00:12:32,790
seconds on average this one was luckily

00:12:29,970 --> 00:12:34,860
also fairly easy to fix do did some

00:12:32,790 --> 00:12:37,679
tuning added some added some indexes and

00:12:34,860 --> 00:12:42,239
we went from 14 up 14 seconds to 2

00:12:37,679 --> 00:12:44,549
milliseconds little bit of a substantial

00:12:42,239 --> 00:12:46,290
change and at this point the issue was

00:12:44,549 --> 00:12:50,269
fixed which was good because it was 3

00:12:46,290 --> 00:12:50,269
a.m. and I wanted to go back to sleep

00:12:50,629 --> 00:12:55,679
now at this point we didn't have

00:12:52,829 --> 00:12:57,869
requests timing out anymore but we still

00:12:55,679 --> 00:13:01,799
had performance problems everything was

00:12:57,869 --> 00:13:03,629
not fine we were getting reports that

00:13:01,799 --> 00:13:06,029
sometimes Chris audio was taking as long

00:13:03,629 --> 00:13:07,889
as 6 seconds to load this was an

00:13:06,029 --> 00:13:10,289
isolated problem everybody could

00:13:07,889 --> 00:13:11,699
reproduce it it was intermittent we and

00:13:10,289 --> 00:13:13,799
we initially thought it was isolated

00:13:11,699 --> 00:13:16,649
because we tried to verify the report

00:13:13,799 --> 00:13:22,350
like a few hours later and it was I want

00:13:16,649 --> 00:13:23,699
say fine but faster but everybody

00:13:22,350 --> 00:13:25,529
eventually was able me but we all

00:13:23,699 --> 00:13:28,289
realized oh there's something funky

00:13:25,529 --> 00:13:29,850
going on here and one of the metrics

00:13:28,289 --> 00:13:30,570
that we get paged on is when response

00:13:29,850 --> 00:13:33,770
times get

00:13:30,570 --> 00:13:39,030
get too high so inevitably I got paged

00:13:33,770 --> 00:13:40,830
why this is Ruby when she's like thirty

00:13:39,030 --> 00:13:44,420
seconds old it's great I love I love how

00:13:40,830 --> 00:13:44,420
newborns just look like little old men

00:13:45,020 --> 00:13:49,200
so the home page is one of the slow end

00:13:47,490 --> 00:13:51,300
points the other one was our create

00:13:49,200 --> 00:13:52,590
search page which both show which is the

00:13:51,300 --> 00:13:54,720
name of the end point that you hit both

00:13:52,590 --> 00:13:56,250
when you actually are searching or if

00:13:54,720 --> 00:13:57,930
you just click the view all crates

00:13:56,250 --> 00:14:00,540
button its stilled we just hit the same

00:13:57,930 --> 00:14:01,830
end point so we started looking for

00:14:00,540 --> 00:14:03,360
traffic pack because we knew it was

00:14:01,830 --> 00:14:05,190
intermittent that gave us some specific

00:14:03,360 --> 00:14:06,510
times start looking at in the logs and

00:14:05,190 --> 00:14:08,070
so we started looking for traffic

00:14:06,510 --> 00:14:10,380
patterns around the times that things

00:14:08,070 --> 00:14:19,170
slowed down it turned out that the

00:14:10,380 --> 00:14:20,760
problem was BOTS thanks yeah what was

00:14:19,170 --> 00:14:22,410
happening was we had more and more

00:14:20,760 --> 00:14:24,210
crawlers that were coming and just

00:14:22,410 --> 00:14:27,240
trying to get all of our information on

00:14:24,210 --> 00:14:28,980
all of our crates and that's fine like

00:14:27,240 --> 00:14:29,730
you can come do that but you gotta be

00:14:28,980 --> 00:14:31,410
well-behaved

00:14:29,730 --> 00:14:32,910
and these we're not being well behaved

00:14:31,410 --> 00:14:35,400
they were doing things like sending us

00:14:32,910 --> 00:14:37,650
five concurrent requests as quickly as

00:14:35,400 --> 00:14:41,000
we as we could possibly respond to our

00:14:37,650 --> 00:14:43,620
slowest end point on the app in a loop

00:14:41,000 --> 00:14:45,090
you know it's kind of like uh you know

00:14:43,620 --> 00:14:45,990
that feeling when you're just sitting

00:14:45,090 --> 00:14:48,240
there and you're trying to eat your

00:14:45,990 --> 00:14:50,430
chicken nuggets and these creepy fuzzy

00:14:48,240 --> 00:14:52,560
giants just keep coming up and asking

00:14:50,430 --> 00:14:54,330
for a hug and they won't stop coming and

00:14:52,560 --> 00:14:55,560
you just can't handle all this right now

00:14:54,330 --> 00:14:58,380
so you start throwing your chicken

00:14:55,560 --> 00:15:01,650
nuggets on the floor yeah that was us

00:14:58,380 --> 00:15:05,390
with BOTS also I'm sorry your request or

00:15:01,650 --> 00:15:07,740
not chicken nuggets but they kinda are

00:15:05,390 --> 00:15:10,410
now we actually could have solved this

00:15:07,740 --> 00:15:12,030
one really really easily the simplest

00:15:10,410 --> 00:15:14,820
solution would have been just to upgrade

00:15:12,030 --> 00:15:16,290
our database server right now we run on

00:15:14,820 --> 00:15:18,240
the cheapest production to your database

00:15:16,290 --> 00:15:19,950
that Heroku has to offer so there's a

00:15:18,240 --> 00:15:21,480
lot of room for us to scale vertically

00:15:19,950 --> 00:15:22,770
there and we just could have handled

00:15:21,480 --> 00:15:25,470
this increased traffic we just had a

00:15:22,770 --> 00:15:27,810
slightly beefed your database server but

00:15:25,470 --> 00:15:29,910
we have avoided doing that for as long

00:15:27,810 --> 00:15:31,410
as possible because it's forcing us to

00:15:29,910 --> 00:15:33,090
deal with a lot of issues that we will

00:15:31,410 --> 00:15:35,340
eventually have to deal with a little

00:15:33,090 --> 00:15:36,840
bit sooner the one specifically that we

00:15:35,340 --> 00:15:38,520
wanted this to force us to deal with was

00:15:36,840 --> 00:15:40,410
writing a crawler policy which we didn't

00:15:38,520 --> 00:15:42,570
have at the time and well we still don't

00:15:40,410 --> 00:15:43,470
but we've we will soon I promise we need

00:15:42,570 --> 00:15:45,990
to

00:15:43,470 --> 00:15:48,210
um we also didn't have anything in place

00:15:45,990 --> 00:15:50,460
to actually block the misbehaving bots

00:15:48,210 --> 00:15:52,740
which if the if these bots weren't just

00:15:50,460 --> 00:15:54,180
misbehaving but we're actively malicious

00:15:52,740 --> 00:15:57,870
was something that we really really

00:15:54,180 --> 00:15:59,700
would have needed so that was our main

00:15:57,870 --> 00:16:01,770
solution here was to first just give us

00:15:59,700 --> 00:16:05,010
a mechanism to start blocking them both

00:16:01,770 --> 00:16:07,380
by IP address and by user agent and we

00:16:05,010 --> 00:16:10,050
saw our database load go from well

00:16:07,380 --> 00:16:12,090
double what our database can handle back

00:16:10,050 --> 00:16:13,920
down to near zero which is sort of what

00:16:12,090 --> 00:16:17,160
we expected but it never really gets

00:16:13,920 --> 00:16:19,230
above like ten percent these days and

00:16:17,160 --> 00:16:23,010
the site started feeling more responsive

00:16:19,230 --> 00:16:26,430
not not great but not six seconds so

00:16:23,010 --> 00:16:28,110
that was the big big problem but there's

00:16:26,430 --> 00:16:30,030
still the problem of like why why were

00:16:28,110 --> 00:16:30,990
these bots giving us so much load just

00:16:30,030 --> 00:16:33,600
from hitting these end points in the

00:16:30,990 --> 00:16:35,160
first place they still felt like they

00:16:33,600 --> 00:16:36,630
were a lot slower than they should just

00:16:35,160 --> 00:16:39,350
listing all of the crates uh uh

00:16:36,630 --> 00:16:41,160
imaginating it shouldn't take that long

00:16:39,350 --> 00:16:43,050
well turned out the problem was

00:16:41,160 --> 00:16:44,640
calculating the recent downloads number

00:16:43,050 --> 00:16:47,130
the number of downloads that a crate has

00:16:44,640 --> 00:16:49,440
had in the last 90 days we were doing

00:16:47,130 --> 00:16:51,210
this like just the simplest way you

00:16:49,440 --> 00:16:53,250
could you join you join to this other

00:16:51,210 --> 00:16:56,370
table you group it down and you sum up

00:16:53,250 --> 00:16:58,230
the results and like it was fine it the

00:16:56,370 --> 00:17:00,090
query took about 500 milliseconds which

00:16:58,230 --> 00:17:01,860
I mean it's not unreasonable for what it

00:17:00,090 --> 00:17:06,210
was doing but it was making the site

00:17:01,860 --> 00:17:07,950
feel sluggish so this what for this we

00:17:06,210 --> 00:17:09,390
decided to create a materialized view

00:17:07,950 --> 00:17:10,470
which is basically just another form of

00:17:09,390 --> 00:17:12,720
cache that you can have in the database

00:17:10,470 --> 00:17:14,150
and you can create indexes on that so

00:17:12,720 --> 00:17:16,560
basically it was just a way for us to

00:17:14,150 --> 00:17:18,810
occasionally pre calculate the recent

00:17:16,560 --> 00:17:20,310
downloads for every crate and then we

00:17:18,810 --> 00:17:22,380
can just get information from this cache

00:17:20,310 --> 00:17:25,350
table much more frequently the downside

00:17:22,380 --> 00:17:26,760
here is that the that cache only gets

00:17:25,350 --> 00:17:28,350
updated about every once every five

00:17:26,760 --> 00:17:29,790
minutes so like when you see recent

00:17:28,350 --> 00:17:31,050
downloads it's not actually including

00:17:29,790 --> 00:17:34,620
all of the downloads you just sent in

00:17:31,050 --> 00:17:36,180
the last five minutes but who cares once

00:17:34,620 --> 00:17:37,980
we did that that brought us there was

00:17:36,180 --> 00:17:39,840
more work that we've done since then but

00:17:37,980 --> 00:17:41,370
that more or less those were the big big

00:17:39,840 --> 00:17:43,470
wins and that caused mostly to the

00:17:41,370 --> 00:17:44,760
performance we have today that last

00:17:43,470 --> 00:17:47,730
commit there is when we deployed the

00:17:44,760 --> 00:17:49,800
materialized view change and and this is

00:17:47,730 --> 00:17:52,940
where we got to about 250 milliseconds

00:17:49,800 --> 00:17:55,760
for most requests which was pretty good

00:17:52,940 --> 00:17:57,600
so these are two examples of the

00:17:55,760 --> 00:17:58,110
performance work that we've been doing

00:17:57,600 --> 00:17:59,490
and

00:17:58,110 --> 00:18:01,260
kind of incidents that we typically deal

00:17:59,490 --> 00:18:02,549
with there's been a lot more work we've

00:18:01,260 --> 00:18:04,260
done on the performance we've gotten our

00:18:02,549 --> 00:18:05,850
response times down by half from this

00:18:04,260 --> 00:18:07,350
point and there's been a lot of other

00:18:05,850 --> 00:18:08,610
incidents which are super interesting

00:18:07,350 --> 00:18:09,990
and I would love to tell you about all

00:18:08,610 --> 00:18:12,960
of them but we just don't have time

00:18:09,990 --> 00:18:14,280
today but this is a little window into

00:18:12,960 --> 00:18:17,250
what into some of what we've been

00:18:14,280 --> 00:18:18,690
working on now let's talk about what

00:18:17,250 --> 00:18:20,309
we're planning on in the future for the

00:18:18,690 --> 00:18:21,270
next year this isn't everything we want

00:18:20,309 --> 00:18:25,710
to do but these are some of the things

00:18:21,270 --> 00:18:27,450
I'm most excited about so first thing I

00:18:25,710 --> 00:18:28,500
want to do is fix crate uploads now I

00:18:27,450 --> 00:18:30,059
know some of you might be thinking but

00:18:28,500 --> 00:18:32,370
wait create uploads aren't broken I just

00:18:30,059 --> 00:18:35,730
uploaded crate no it's trust me it kind

00:18:32,370 --> 00:18:38,280
of is broken so the way this works is

00:18:35,730 --> 00:18:41,570
you upload your tar file to our server

00:18:38,280 --> 00:18:44,340
we then upload that tar file up to s3

00:18:41,570 --> 00:18:46,020
then we update the database then we also

00:18:44,340 --> 00:18:47,669
have to go update the index which is the

00:18:46,020 --> 00:18:49,740
which is basically a github repo that

00:18:47,669 --> 00:18:52,350
has information that's easier for cargo

00:18:49,740 --> 00:18:53,490
to digest and we do all of that and then

00:18:52,350 --> 00:18:54,870
we're like cool you uploaded your crate

00:18:53,490 --> 00:18:56,880
and this is great because it means if

00:18:54,870 --> 00:19:00,000
any of this is going to fail we can tell

00:18:56,880 --> 00:19:03,210
you very quickly but it's really really

00:19:00,000 --> 00:19:06,540
bad because github can have like Network

00:19:03,210 --> 00:19:09,240
issues or the power can go out in

00:19:06,540 --> 00:19:10,950
between the github index getting updated

00:19:09,240 --> 00:19:12,990
and the database transaction committing

00:19:10,950 --> 00:19:14,910
which then means that your create exists

00:19:12,990 --> 00:19:16,830
in the index but it doesn't exist in our

00:19:14,910 --> 00:19:18,450
database and that can lead to really bad

00:19:16,830 --> 00:19:20,660
things happening and we have no

00:19:18,450 --> 00:19:23,130
mechanism to like redo that later and

00:19:20,660 --> 00:19:24,900
when we have the file the files going

00:19:23,130 --> 00:19:27,780
through our server before they get to s3

00:19:24,900 --> 00:19:29,790
that's fine but we have that hard 30

00:19:27,780 --> 00:19:31,679
second limit on how long we can take and

00:19:29,790 --> 00:19:33,809
that means that there's a hard upper

00:19:31,679 --> 00:19:36,120
limit on how big your crate can be or

00:19:33,809 --> 00:19:38,160
how slow your network connection can be

00:19:36,120 --> 00:19:41,100
before you just can't upload your crate

00:19:38,160 --> 00:19:42,870
there was a person who was like this the

00:19:41,100 --> 00:19:44,280
same IP address trying to upload a crate

00:19:42,870 --> 00:19:47,790
and it was timing out and like for a

00:19:44,280 --> 00:19:49,200
week they tried every day and their

00:19:47,790 --> 00:19:50,850
network was just too slow for them to be

00:19:49,200 --> 00:19:52,799
able to do it I wanted to treat like hit

00:19:50,850 --> 00:19:57,960
whoever is at this IP email us because

00:19:52,799 --> 00:20:00,059
we can like help but so what I want to

00:19:57,960 --> 00:20:04,020
do is four is two changes one of which

00:20:00,059 --> 00:20:05,549
is almost done the first is the updates

00:20:04,020 --> 00:20:07,500
to github I want to move those off the

00:20:05,549 --> 00:20:09,870
web server so when you upload your crate

00:20:07,500 --> 00:20:11,920
when when you do cargo publish and that

00:20:09,870 --> 00:20:14,650
returns you actually won't be able

00:20:11,920 --> 00:20:16,450
to immediately refer to it in your cargo

00:20:14,650 --> 00:20:19,000
tamil you will basically almost

00:20:16,450 --> 00:20:21,340
immediately like it for for the normal

00:20:19,000 --> 00:20:23,050
case it shouldn't be noticeable but what

00:20:21,340 --> 00:20:25,060
we'll do is we'll just update what we'll

00:20:23,050 --> 00:20:26,410
put this into a background cue and we

00:20:25,060 --> 00:20:28,810
can retry this as many times as we want

00:20:26,410 --> 00:20:31,030
later on the other thing I want to do is

00:20:28,810 --> 00:20:32,710
have cargo handle the s3 upload so you

00:20:31,030 --> 00:20:34,600
can take as long as you want uploading

00:20:32,710 --> 00:20:38,770
that file to s3 and only when that's

00:20:34,600 --> 00:20:41,740
done do you come to us the next thing I

00:20:38,770 --> 00:20:43,750
wanna do is load testing I'm gonna talk

00:20:41,740 --> 00:20:46,330
a little bit later on about some of the

00:20:43,750 --> 00:20:48,400
scales that I think we will reach with

00:20:46,330 --> 00:20:50,530
our current setup but this is all based

00:20:48,400 --> 00:20:52,510
on some very very preliminary ad hoc

00:20:50,530 --> 00:20:54,370
load testing I want to guess I want us

00:20:52,510 --> 00:20:56,410
to use a proper service for this and I

00:20:54,370 --> 00:20:58,990
also want to know if we don't change a

00:20:56,410 --> 00:21:00,850
line of code but we get the beefiest

00:20:58,990 --> 00:21:02,890
database server we can possibly get on

00:21:00,850 --> 00:21:04,660
Heroku and buy as many web dinos as we

00:21:02,890 --> 00:21:06,070
feel like we need and not like actually

00:21:04,660 --> 00:21:08,680
buy them for a month but have them up

00:21:06,070 --> 00:21:09,940
for 10 minutes for testing what is the

00:21:08,680 --> 00:21:13,080
max scale we can reach before we

00:21:09,940 --> 00:21:15,250
actually have to start changing code I

00:21:13,080 --> 00:21:17,710
also want us to be monitoring more

00:21:15,250 --> 00:21:20,200
things right now we're getting paged on

00:21:17,710 --> 00:21:21,760
the most important critical items but

00:21:20,200 --> 00:21:23,730
there are a lot of things that we just

00:21:21,760 --> 00:21:26,080
don't get informed about if they break

00:21:23,730 --> 00:21:28,270
there are a couple of times I've broken

00:21:26,080 --> 00:21:30,490
crate uploads in one way or another and

00:21:28,270 --> 00:21:34,060
if it specifically crate uploads that I

00:21:30,490 --> 00:21:35,530
break that doesn't that doesn't people

00:21:34,060 --> 00:21:37,570
aren't uploading crates frequently

00:21:35,530 --> 00:21:39,670
enough for that to trigger any alarms on

00:21:37,570 --> 00:21:41,500
average we get about one crate every

00:21:39,670 --> 00:21:43,690
five minutes and we don't really alert

00:21:41,500 --> 00:21:45,310
unless our error rate is above one

00:21:43,690 --> 00:21:52,060
percent for all requests for five

00:21:45,310 --> 00:21:54,250
minutes one of the problems with growing

00:21:52,060 --> 00:21:55,900
our operations team is that the

00:21:54,250 --> 00:21:58,450
credentials that you need to manage the

00:21:55,900 --> 00:22:00,520
site also give you access to a lot of

00:21:58,450 --> 00:22:03,790
things you don't necessarily need access

00:22:00,520 --> 00:22:05,890
to this isn't like a question of trust

00:22:03,790 --> 00:22:07,720
it's just generally not good policy to

00:22:05,890 --> 00:22:11,020
give people keys to things they don't

00:22:07,720 --> 00:22:13,210
need because they don't need them so one

00:22:11,020 --> 00:22:15,280
of the ways that we're going to fix this

00:22:13,210 --> 00:22:16,780
is just by creating some BOTS and the

00:22:15,280 --> 00:22:18,010
bots are able to manage the site and we

00:22:16,780 --> 00:22:19,990
can give people the ability to give

00:22:18,010 --> 00:22:22,240
commands to the bots this will give us a

00:22:19,990 --> 00:22:24,100
lot more granular control over what

00:22:22,240 --> 00:22:24,730
permissions each individual contributor

00:22:24,100 --> 00:22:27,100
has

00:22:24,730 --> 00:22:29,049
this is also really amusing because this

00:22:27,100 --> 00:22:36,669
year BOTS were our problem and next year

00:22:29,049 --> 00:22:38,559
BOTS are the solution we're also gonna

00:22:36,669 --> 00:22:40,360
be looking at redesigning the site the

00:22:38,559 --> 00:22:42,400
main rustling org site is going to be

00:22:40,360 --> 00:22:43,990
getting a redesign as part of Rus 2018

00:22:42,400 --> 00:22:45,970
and we're looking at it whether we want

00:22:43,990 --> 00:22:47,590
crates that IO to be part of that we're

00:22:45,970 --> 00:22:49,240
also discussing while we're redesigning

00:22:47,590 --> 00:22:51,940
a site if it makes sense for us to

00:22:49,240 --> 00:22:54,640
switch off of our single page web app

00:22:51,940 --> 00:23:01,299
and be serving static server rendered

00:22:54,640 --> 00:23:03,040
HTML instead all right I'm gonna take my

00:23:01,299 --> 00:23:04,570
I'm gonna take my project my project hat

00:23:03,040 --> 00:23:07,600
off everything I say from this point on

00:23:04,570 --> 00:23:08,890
is just me talking as me and not I am

00:23:07,600 --> 00:23:13,059
NOT trying to represent the team right

00:23:08,890 --> 00:23:15,460
now Krista has been a very different

00:23:13,059 --> 00:23:16,960
kind of project for me I've been working

00:23:15,460 --> 00:23:18,580
at open source for a long time but this

00:23:16,960 --> 00:23:21,309
project is just an entirely different

00:23:18,580 --> 00:23:23,020
experience it's the first open-source

00:23:21,309 --> 00:23:25,470
project I've worked on where my primary

00:23:23,020 --> 00:23:27,940
contribution is operations and not code

00:23:25,470 --> 00:23:32,169
it's also the first rust web application

00:23:27,940 --> 00:23:34,600
I've worked on the most that every

00:23:32,169 --> 00:23:37,470
problem I described today was solved by

00:23:34,600 --> 00:23:39,850
tweaking the database and not our code

00:23:37,470 --> 00:23:42,730
this is an application that is really

00:23:39,850 --> 00:23:44,230
truly database bound I've built a lot of

00:23:42,730 --> 00:23:45,640
web apps over the years and this is the

00:23:44,230 --> 00:23:47,890
first time I've ever really been able to

00:23:45,640 --> 00:23:49,809
say that the amount of time we're

00:23:47,890 --> 00:23:52,240
spending in our web servers is virtually

00:23:49,809 --> 00:23:53,950
zero there's no garbage collector to

00:23:52,240 --> 00:23:56,110
tune there's no unreasonable memory

00:23:53,950 --> 00:23:57,760
growth or hard to debug memory leaks and

00:23:56,110 --> 00:23:59,049
the amount of performance we've been

00:23:57,760 --> 00:24:02,010
able to achieve with virtually zero

00:23:59,049 --> 00:24:04,929
caching in front of our servers is

00:24:02,010 --> 00:24:09,220
astonishing and we're using diesel which

00:24:04,929 --> 00:24:11,200
I'm biased on but like we get to take

00:24:09,220 --> 00:24:13,419
advantage of a lot of our a lot of the

00:24:11,200 --> 00:24:14,799
really advanced features of Postgres and

00:24:13,419 --> 00:24:16,299
we don't have to give up type safety to

00:24:14,799 --> 00:24:17,890
do that and that means that we can

00:24:16,299 --> 00:24:21,250
squeeze a lot more performance out of

00:24:17,890 --> 00:24:22,809
our little database server if there's

00:24:21,250 --> 00:24:24,610
one thing that being on the Cray set io

00:24:22,809 --> 00:24:25,929
team if there's one thing that being on

00:24:24,610 --> 00:24:28,120
the kraits that io team has done for me

00:24:25,929 --> 00:24:31,059
it's making me really excited about the

00:24:28,120 --> 00:24:32,470
future of rust on the web people aren't

00:24:31,059 --> 00:24:33,450
kidding when they say rust gives you

00:24:32,470 --> 00:24:36,909
superpowers

00:24:33,450 --> 00:24:38,470
no seriously we spend more money on log

00:24:36,909 --> 00:24:41,080
storage than all of our

00:24:38,470 --> 00:24:43,330
servers combined we can process so many

00:24:41,080 --> 00:24:45,070
requests we have to spend more to store

00:24:43,330 --> 00:24:46,870
the logs from those requests than it

00:24:45,070 --> 00:24:55,360
costs us to actually process them

00:24:46,870 --> 00:24:56,919
it's insane project is also really

00:24:55,360 --> 00:24:59,460
taught me the value of keeping your

00:24:56,919 --> 00:25:02,110
stacks simple that's at least early on

00:24:59,460 --> 00:25:05,080
right now our operations bandwidth is

00:25:02,110 --> 00:25:05,940
very low there are only a handful of us

00:25:05,080 --> 00:25:09,010
working on it

00:25:05,940 --> 00:25:12,280
and each of us only has a little bit of

00:25:09,010 --> 00:25:13,630
time because of this we've been trying

00:25:12,280 --> 00:25:16,000
to keep our stack as simple as possible

00:25:13,630 --> 00:25:17,530
for as long as possible if you want to

00:25:16,000 --> 00:25:19,750
get if you want get involved with great

00:25:17,530 --> 00:25:21,280
audio right now you have to learn our

00:25:19,750 --> 00:25:23,650
web server you have to learn Postgres

00:25:21,280 --> 00:25:25,000
and that's it and I'd like to keep I'd

00:25:23,650 --> 00:25:27,730
like to keep it that way for as long as

00:25:25,000 --> 00:25:29,169
we possibly can it limits the number of

00:25:27,730 --> 00:25:30,820
technologies you have to learn it also

00:25:29,169 --> 00:25:32,799
limits the number of things that we have

00:25:30,820 --> 00:25:36,370
to worry about how to scale or how to

00:25:32,799 --> 00:25:38,409
keep online and when things go wrong we

00:25:36,370 --> 00:25:39,700
have very strong tooling right now that

00:25:38,409 --> 00:25:41,860
can help us diagnose the problem quickly

00:25:39,700 --> 00:25:43,570
that we're familiar with and adding new

00:25:41,860 --> 00:25:46,090
adding new services into the mix means

00:25:43,570 --> 00:25:47,260
that we're gonna have new tools that we

00:25:46,090 --> 00:25:48,730
have to learn to diagnose things when

00:25:47,260 --> 00:25:51,270
everything goes wrong and things will

00:25:48,730 --> 00:25:54,010
eventually go wrong as they always do

00:25:51,270 --> 00:25:56,380
this is good advice for any startup and

00:25:54,010 --> 00:25:59,409
kind of this creció is very analogous to

00:25:56,380 --> 00:26:03,190
like a early post launch startup at this

00:25:59,409 --> 00:26:04,390
point basically prioritize prioritizing

00:26:03,190 --> 00:26:06,010
things in terms of keeping our snacks

00:26:04,390 --> 00:26:08,409
simple means that we're doing a lot of

00:26:06,010 --> 00:26:11,080
things wrong for whatever value of wrong

00:26:08,409 --> 00:26:13,360
you want to use I'm sure when I

00:26:11,080 --> 00:26:14,770
explained how we count downloads some of

00:26:13,360 --> 00:26:17,110
you were horrified because it's not

00:26:14,770 --> 00:26:18,669
gonna scale and it's true download

00:26:17,110 --> 00:26:20,140
counting is for sure gonna be our

00:26:18,669 --> 00:26:22,890
largest bottleneck going forward like we

00:26:20,140 --> 00:26:25,210
know that but we're all we're also

00:26:22,890 --> 00:26:27,250
pretty sure that we can grow about an

00:26:25,210 --> 00:26:28,419
order of magnitude more traffic before

00:26:27,250 --> 00:26:30,520
we even have to worry about just

00:26:28,419 --> 00:26:32,020
upgrading our database server and I

00:26:30,520 --> 00:26:34,480
think we've got about two orders of

00:26:32,020 --> 00:26:35,980
magnitude or maybe three after that

00:26:34,480 --> 00:26:37,570
before we get to the point where we

00:26:35,980 --> 00:26:38,980
actually start changing our approach and

00:26:37,570 --> 00:26:41,370
can't just throw a bigger server at the

00:26:38,980 --> 00:26:41,370
problem

00:26:43,320 --> 00:26:46,800
things are a little different when

00:26:45,270 --> 00:26:49,980
you're building an open-source service

00:26:46,800 --> 00:26:52,860
instead of open-source software your

00:26:49,980 --> 00:26:54,540
priorities have to change there's a lot

00:26:52,860 --> 00:26:56,370
of people who want to crawl crates that

00:26:54,540 --> 00:26:57,840
I owe and they're building all sorts of

00:26:56,370 --> 00:27:00,180
cool things with the data that they're

00:26:57,840 --> 00:27:02,280
getting from their crawlers and I really

00:27:00,180 --> 00:27:04,050
want to be able to like just let them

00:27:02,280 --> 00:27:05,310
hit us as fast as they can and give them

00:27:04,050 --> 00:27:07,650
all their information and see the cool

00:27:05,310 --> 00:27:09,420
things they build the problem is if we

00:27:07,650 --> 00:27:11,640
do that then we have to upgrade our

00:27:09,420 --> 00:27:14,430
servers and buy more servers and that

00:27:11,640 --> 00:27:16,200
costs actual money it's just not a thing

00:27:14,430 --> 00:27:17,760
that you worry about in in when I'm

00:27:16,200 --> 00:27:20,220
building diesel for example it's like to

00:27:17,760 --> 00:27:22,410
do what to do our users want it's just

00:27:20,220 --> 00:27:24,030
more time but it's not it's not actually

00:27:22,410 --> 00:27:27,660
going to cost more actual money from

00:27:24,030 --> 00:27:29,730
somebody and a lot of the things that we

00:27:27,660 --> 00:27:32,490
have to deal with require actual lawyers

00:27:29,730 --> 00:27:34,800
to and as far as I'm aware nobody on the

00:27:32,490 --> 00:27:36,150
team has passed the bar Ashley Steve

00:27:34,800 --> 00:27:39,000
Justin if any of you passed the bar like

00:27:36,150 --> 00:27:42,920
in the last hour - no okay yeah no as

00:27:39,000 --> 00:27:42,920
far as I know nobody's nobody's a lawyer

00:27:44,630 --> 00:27:47,430
when people come to an open source

00:27:46,680 --> 00:27:49,920
project

00:27:47,430 --> 00:27:51,600
most people are expecting to contribute

00:27:49,920 --> 00:27:54,420
some code or write some Doc's

00:27:51,600 --> 00:27:56,160
or open issues but when you what you

00:27:54,420 --> 00:27:59,430
need to grow are things like hey can you

00:27:56,160 --> 00:28:01,650
come join our on-call rotation it's a

00:27:59,430 --> 00:28:03,060
little bit harder to make that work this

00:28:01,650 --> 00:28:04,650
morning Nico and Ashley talked a lot

00:28:03,060 --> 00:28:06,330
about how open source by serendipity

00:28:04,650 --> 00:28:07,740
doesn't always work people don't just

00:28:06,330 --> 00:28:09,750
come I'll always pop out of the blue

00:28:07,740 --> 00:28:10,920
with the pleura Qwest definitely

00:28:09,750 --> 00:28:12,870
nobody's popping out of the blue like

00:28:10,920 --> 00:28:19,560
hey yeah I would totally love get paged

00:28:12,870 --> 00:28:21,330
at 3:00 a.m. if your site is down one

00:28:19,560 --> 00:28:23,850
thing that's really different about

00:28:21,330 --> 00:28:25,800
working on an open source service is how

00:28:23,850 --> 00:28:28,950
you have to measure your interactions

00:28:25,800 --> 00:28:31,080
with people if people disagree with

00:28:28,950 --> 00:28:33,560
something that you say or something that

00:28:31,080 --> 00:28:36,540
you do or something that you don't do

00:28:33,560 --> 00:28:40,380
there's a lot more vectors for them to

00:28:36,540 --> 00:28:41,820
actively attack you unfortunately we got

00:28:40,380 --> 00:28:44,280
to learn that firsthand earlier this

00:28:41,820 --> 00:28:46,860
week on Monday afternoon while I was

00:28:44,280 --> 00:28:48,150
working on this talk actually I didn't

00:28:46,860 --> 00:28:51,210
get to work on my talk that afternoon

00:28:48,150 --> 00:28:53,580
because somebody had decided to create a

00:28:51,210 --> 00:28:55,920
bot registered a user called crate CEO

00:28:53,580 --> 00:28:57,070
and was registering as many crates as

00:28:55,920 --> 00:28:58,690
they could as fast as they

00:28:57,070 --> 00:29:00,220
could with an empty readme just saying

00:28:58,690 --> 00:29:01,419
if you want this crate

00:29:00,220 --> 00:29:03,009
please open an issue on our issue

00:29:01,419 --> 00:29:06,070
tracker linking to the official crates

00:29:03,009 --> 00:29:07,809
that I know issue tracker we think we

00:29:06,070 --> 00:29:10,090
can't read minds but we think that this

00:29:07,809 --> 00:29:12,250
person was doing this to make a point

00:29:10,090 --> 00:29:14,350
there's been an escalating discussion

00:29:12,250 --> 00:29:18,700
around our squatting Paulo our name

00:29:14,350 --> 00:29:22,870
squatting policy and the threads gotten

00:29:18,700 --> 00:29:25,179
very intense it takes a lot of energy to

00:29:22,870 --> 00:29:27,340
spend time even just reading it much

00:29:25,179 --> 00:29:29,500
less responding and so I I know I

00:29:27,340 --> 00:29:31,179
personally have just been trying to like

00:29:29,500 --> 00:29:34,450
keep my distance a little bit until

00:29:31,179 --> 00:29:36,009
things simmer down and that's how I've

00:29:34,450 --> 00:29:37,629
always dealt with open source when

00:29:36,009 --> 00:29:40,029
things got hostile I just sort of backed

00:29:37,629 --> 00:29:41,950
away from it and that's just not an

00:29:40,029 --> 00:29:43,450
option here because if you it because

00:29:41,950 --> 00:29:44,740
people can just come and try and take

00:29:43,450 --> 00:29:50,289
the site down if they don't like what

00:29:44,740 --> 00:29:53,679
you're doing and there's been a lot of

00:29:50,289 --> 00:29:55,149
discussion this is it's a little

00:29:53,679 --> 00:29:58,360
frustrating to talk about because I know

00:29:55,149 --> 00:29:59,919
that most likely nobody in this room is

00:29:58,360 --> 00:30:02,889
the kind of people I'm talking about I

00:29:59,919 --> 00:30:05,980
know that it's a handful of very hostile

00:30:02,889 --> 00:30:09,250
or angry people but they end up just

00:30:05,980 --> 00:30:11,230
taking up an obnoxiously large

00:30:09,250 --> 00:30:13,299
percentage of your time and energy and

00:30:11,230 --> 00:30:15,309
it's and from a maintainer point of view

00:30:13,299 --> 00:30:16,690
it very quickly feels like that those

00:30:15,309 --> 00:30:18,970
are the only conversations that you're

00:30:16,690 --> 00:30:20,919
having and one of the frustrations

00:30:18,970 --> 00:30:22,330
people have been expressing is that we

00:30:20,919 --> 00:30:25,779
haven't been listening or haven't been

00:30:22,330 --> 00:30:27,429
responding which there's some truth to

00:30:25,779 --> 00:30:29,559
that and we probably should have maybe

00:30:27,429 --> 00:30:31,750
not reply to these threads directly but

00:30:29,559 --> 00:30:33,490
made an official blog post reminding

00:30:31,750 --> 00:30:35,500
people that we are watching the

00:30:33,490 --> 00:30:39,970
conversation and just if nothing else

00:30:35,500 --> 00:30:42,340
restating like here's our rationale but

00:30:39,970 --> 00:30:45,009
we have a process in rust to emit to

00:30:42,340 --> 00:30:46,509
make changes in policy happen if you

00:30:45,009 --> 00:30:48,370
want you can start an internal thread to

00:30:46,509 --> 00:30:50,710
kind of come to a consensus on what you

00:30:48,370 --> 00:30:52,720
want to change and then if you want you

00:30:50,710 --> 00:30:54,700
can open an internal thread with a pre

00:30:52,720 --> 00:30:57,850
RFC to get feedback on a hypothetical

00:30:54,700 --> 00:30:59,889
RFC that you want to open and sometimes

00:30:57,850 --> 00:31:01,090
team members will jump in and get

00:30:59,889 --> 00:31:04,539
involved in those but they're not

00:31:01,090 --> 00:31:07,210
obligated to the place where we have to

00:31:04,539 --> 00:31:08,769
give a response and where the real

00:31:07,210 --> 00:31:10,509
discussion happens where the change

00:31:08,769 --> 00:31:13,749
happens is when people open an RF

00:31:10,509 --> 00:31:16,059
see so there's been a lot of frustration

00:31:13,749 --> 00:31:17,979
I've been seeing from people that this

00:31:16,059 --> 00:31:19,539
internals thread got opened up and then

00:31:17,979 --> 00:31:20,919
we just didn't reply when we never got

00:31:19,539 --> 00:31:22,479
art we didn't it was more that we didn't

00:31:20,919 --> 00:31:24,190
take action from just this internals

00:31:22,479 --> 00:31:25,839
thread but we never got in RFC that

00:31:24,190 --> 00:31:29,259
needs to happen before policies can

00:31:25,839 --> 00:31:32,229
change that's so frustrating just as a

00:31:29,259 --> 00:31:34,059
as a maintainer to have people too angry

00:31:32,229 --> 00:31:35,440
then you don't respond and then when you

00:31:34,059 --> 00:31:36,699
do respond they think that you're

00:31:35,440 --> 00:31:37,899
talking on behalf of the team and I

00:31:36,699 --> 00:31:39,699
happen to disagree with some of the

00:31:37,899 --> 00:31:41,349
opinions that these people have but they

00:31:39,699 --> 00:31:43,119
are assuming I'm speaking on behalf of

00:31:41,349 --> 00:31:45,009
everyone on the team so they think I'm

00:31:43,119 --> 00:31:47,819
then shutting the conversation down so

00:31:45,009 --> 00:31:51,489
now they're mad because I did respond

00:31:47,819 --> 00:31:54,940
all this to say is just discussions are

00:31:51,489 --> 00:31:56,139
hard and open-source is hard and I may

00:31:54,940 --> 00:31:58,119
seem tired this week and it's because I

00:31:56,139 --> 00:31:59,829
am it's been a it's been a really rough

00:31:58,119 --> 00:32:01,539
personal week for me and this isn't this

00:31:59,829 --> 00:32:02,859
is not the fault of anybody in this room

00:32:01,539 --> 00:32:06,459
but it's just something I wanted I

00:32:02,859 --> 00:32:10,359
wanted to share now we do actually

00:32:06,459 --> 00:32:11,919
communicate in a lot of channels one of

00:32:10,359 --> 00:32:14,079
the things that I'm trying to be careful

00:32:11,919 --> 00:32:16,029
about is we're trying to now much more

00:32:14,079 --> 00:32:17,769
publicly say hey crates thought the

00:32:16,029 --> 00:32:19,389
crates Ohio team is a thing now and

00:32:17,769 --> 00:32:20,529
we've got a lot of people and like

00:32:19,389 --> 00:32:22,509
there's a lot of ways we want to

00:32:20,529 --> 00:32:24,219
communicate we have to be careful with

00:32:22,509 --> 00:32:26,169
the messaging that we're using because

00:32:24,219 --> 00:32:28,449
it's very easy when I say things like an

00:32:26,169 --> 00:32:30,999
RFC needs to be opened it's very easy

00:32:28,449 --> 00:32:32,949
for me to sound like I'm accusing the

00:32:30,999 --> 00:32:36,159
people who didn't open in RFC of not

00:32:32,949 --> 00:32:38,199
doing that when in that in all of these

00:32:36,159 --> 00:32:40,539
cases I think it's very very reasonable

00:32:38,199 --> 00:32:42,219
for the person for the people involved

00:32:40,539 --> 00:32:43,749
to just not known that was even an

00:32:42,219 --> 00:32:44,919
option and especially for all of these

00:32:43,749 --> 00:32:47,889
which I don't think we've ever talked

00:32:44,919 --> 00:32:48,669
publicly about there's really not a lot

00:32:47,889 --> 00:32:50,079
of reason that you would know about

00:32:48,669 --> 00:32:51,399
these but we're gonna start publicizing

00:32:50,079 --> 00:32:53,999
them a lot because we want people to get

00:32:51,399 --> 00:32:53,999
more involved

00:32:58,740 --> 00:33:03,309
so if you want to know like what's going

00:33:01,330 --> 00:33:05,559
on with great audio sometimes will tweet

00:33:03,309 --> 00:33:08,320
sometimes will tweet features from here

00:33:05,559 --> 00:33:09,760
sometimes we will well we will always

00:33:08,320 --> 00:33:12,250
tweet when we have an incident from here

00:33:09,760 --> 00:33:14,290
but crates REO status you can follow it

00:33:12,250 --> 00:33:18,040
and you'll get a tweet if we are down

00:33:14,290 --> 00:33:19,600
and not up we also have a Status page

00:33:18,040 --> 00:33:23,320
that you can check out where a lot of

00:33:19,600 --> 00:33:24,940
that information goes as well a lot of

00:33:23,320 --> 00:33:27,340
folks that the incident that happened on

00:33:24,940 --> 00:33:29,260
Monday got emailed to the rust

00:33:27,340 --> 00:33:30,669
moderation team which is fine like

00:33:29,260 --> 00:33:33,040
that's a perfectly fine thing to do but

00:33:30,669 --> 00:33:35,919
we are wondering if we need to also be

00:33:33,040 --> 00:33:38,470
making it making helping folks know that

00:33:35,919 --> 00:33:39,820
we have our own email addresses so help

00:33:38,470 --> 00:33:41,950
at great audio will get you in touch

00:33:39,820 --> 00:33:43,809
with the team we also have a discord

00:33:41,950 --> 00:33:51,160
channel on the it's official or is it

00:33:43,809 --> 00:33:53,140
unofficial the rust discord ok the

00:33:51,160 --> 00:33:55,690
official unofficial rust discord we have

00:33:53,140 --> 00:33:58,480
a channel great sigh it's just great - I

00:33:55,690 --> 00:34:00,880
oh and also like if you want a response

00:33:58,480 --> 00:34:04,330
from us you can open an RFC and we'll

00:34:00,880 --> 00:34:06,760
respond and you should come get involved

00:34:04,330 --> 00:34:09,399
anybody can is free to come join our

00:34:06,760 --> 00:34:10,990
weekly team meetings as an observer they

00:34:09,399 --> 00:34:13,690
take place every Thursday at 4:00 p.m.

00:34:10,990 --> 00:34:16,510
Eastern they happen normally they happen

00:34:13,690 --> 00:34:18,970
by text in our discord channel anybody

00:34:16,510 --> 00:34:21,580
can come to that once a month we will do

00:34:18,970 --> 00:34:22,659
them by video you'll need an invite if

00:34:21,580 --> 00:34:24,190
you want to come to that but if you just

00:34:22,659 --> 00:34:26,679
reach out to us we're happy we're happy

00:34:24,190 --> 00:34:27,669
to invite you that's a great way to get

00:34:26,679 --> 00:34:29,800
started if you're interested in joining

00:34:27,669 --> 00:34:31,780
the team one thing that we really really

00:34:29,800 --> 00:34:34,659
want to grow that super low effort if

00:34:31,780 --> 00:34:36,609
you are awake during hours that not that

00:34:34,659 --> 00:34:38,290
not allowed members of the team are we

00:34:36,609 --> 00:34:39,909
want to have an email address that more

00:34:38,290 --> 00:34:41,649
people know that just page an on-call

00:34:39,909 --> 00:34:43,210
person so that if somebody reports

00:34:41,649 --> 00:34:44,980
something in our discord channel that

00:34:43,210 --> 00:34:46,659
we're not already monitoring a human

00:34:44,980 --> 00:34:48,429
being can make the call like is this

00:34:46,659 --> 00:34:49,629
worth waking somebody up yes or no and

00:34:48,429 --> 00:34:52,149
then wake us up so if that's something

00:34:49,629 --> 00:34:55,060
you are interested in doing come get in

00:34:52,149 --> 00:34:57,850
touch with us I want to just thank a

00:34:55,060 --> 00:35:00,010
couple of people before I go Steve and

00:34:57,850 --> 00:35:01,690
Ashley are the two people who did the

00:35:00,010 --> 00:35:03,790
incident response with me this week and

00:35:01,690 --> 00:35:06,430
like I said it's for me personally been

00:35:03,790 --> 00:35:08,890
a very rough week and how professional

00:35:06,430 --> 00:35:10,130
and talented they are has really helped

00:35:08,890 --> 00:35:11,450
get me through it

00:35:10,130 --> 00:35:13,070
so I want to thank them and Josh

00:35:11,450 --> 00:35:24,380
Triplett who helped us with the retro

00:35:13,070 --> 00:35:25,670
and the incident report I also want to

00:35:24,380 --> 00:35:27,890
thank my company for both letting me

00:35:25,670 --> 00:35:29,780
take the time to come here but part of

00:35:27,890 --> 00:35:32,300
the reason we were able to get the retro

00:35:29,780 --> 00:35:34,580
and shepherding on the incident done so

00:35:32,300 --> 00:35:36,080
quickly is because I'm privileged enough

00:35:34,580 --> 00:35:37,550
to work for a company where I could tell

00:35:36,080 --> 00:35:39,200
my boss like hey crates IO is under

00:35:37,550 --> 00:35:40,910
attack and I think this is gonna take

00:35:39,200 --> 00:35:42,620
most of my time so I need to take the

00:35:40,910 --> 00:35:47,150
rest of the week off and they were like

00:35:42,620 --> 00:35:53,900
sure okay so like thank you Shopify for

00:35:47,150 --> 00:35:55,550
that if you want to come ask me

00:35:53,900 --> 00:35:57,080
questions or just talk to me please come

00:35:55,550 --> 00:35:59,210
to do after afterwards out in the

00:35:57,080 --> 00:36:00,950
hallway I've got these stickers that

00:35:59,210 --> 00:36:02,900
this is Ruby's official sticker I would

00:36:00,950 --> 00:36:04,190
love for you to have one if you want to

00:36:02,900 --> 00:36:05,870
get in touch with me personally this is

00:36:04,190 --> 00:36:06,530
where you can do so that's all got thank

00:36:05,870 --> 00:36:14,999
you very much

00:36:06,530 --> 00:36:14,999

YouTube URL: https://www.youtube.com/watch?v=QjQPNZPSlqA


