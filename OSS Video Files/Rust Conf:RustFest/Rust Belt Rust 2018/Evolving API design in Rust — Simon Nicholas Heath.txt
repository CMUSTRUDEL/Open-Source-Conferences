Title: Evolving API design in Rust â€” Simon Nicholas Heath
Publication date: 2018-11-28
Playlist: Rust Belt Rust 2018
Description: 
	As Rust is a young language containing many innovative features, questions about how to structure Rust libraries and API's are common. Heavy use of metaprogramming and trait constraints can make libraries hard to understand and use, but also bring great power to reason about programs at compile-time. How do you design a library that exploits the power of Rust without making new users say 'This is way too complicated to bother with'? We will discuss these issues using an existing Rust crate as a case study in both designing an API and how it is influenced by the API decisions of the crates it uses as dependencies.

---

Simon is a recovering geologist who has always been interested in programming and a general language nerd, and now works as a software engineering consultant. He started using Rust seriously shortly after the 1.0 release and is interested in using it in video games, operating systems and distributed network infrastructure.
Captions: 
	00:00:08,080 --> 00:00:13,690
i'm simon heath i am talking about

00:00:11,320 --> 00:00:17,020
evolving API design and rust I have been

00:00:13,690 --> 00:00:19,060
using rusts pretty much since 1.0 and

00:00:17,020 --> 00:00:21,160
I'm interested in programming languages

00:00:19,060 --> 00:00:23,320
and I'm interested in compilers and I'm

00:00:21,160 --> 00:00:27,640
building infrastructure and making video

00:00:23,320 --> 00:00:30,250
games so I took these things and put

00:00:27,640 --> 00:00:33,420
them together and made a game engine

00:00:30,250 --> 00:00:38,769
because it's more fun than making a game

00:00:33,420 --> 00:00:40,989
called GG easy and this is the first

00:00:38,769 --> 00:00:42,850
major Russ project that I had been

00:00:40,989 --> 00:00:44,379
working on and it's also the first major

00:00:42,850 --> 00:00:48,489
open-source product project that I've

00:00:44,379 --> 00:00:52,780
worked on and the goal is to make it

00:00:48,489 --> 00:00:54,339
easy to make 2d games because this was

00:00:52,780 --> 00:00:56,019
something I wanted to do it it's a good

00:00:54,339 --> 00:00:58,869
way to learn rust and whenever someone

00:00:56,019 --> 00:01:00,369
says I need an idea for a Russ a project

00:00:58,869 --> 00:01:06,720
to learn in rust whit I should I can say

00:01:00,369 --> 00:01:07,869
you should make a game it is based on a

00:01:06,720 --> 00:01:10,570
Lua

00:01:07,869 --> 00:01:12,640
game framework called love 2d which also

00:01:10,570 --> 00:01:15,820
has a similar goal of making 2d games

00:01:12,640 --> 00:01:18,190
easily which is to say that I went

00:01:15,820 --> 00:01:20,820
through the love to dapi docs function

00:01:18,190 --> 00:01:23,620
by function and wrote everything in rust

00:01:20,820 --> 00:01:25,570
because I didn't really have a great

00:01:23,620 --> 00:01:27,970
plan for how to make a good 2d great

00:01:25,570 --> 00:01:29,890
game engine I just wanted something that

00:01:27,970 --> 00:01:32,950
was simple and would work and was easy

00:01:29,890 --> 00:01:34,630
to use so I knew love was simple and

00:01:32,950 --> 00:01:36,570
worked and I've used it before so there

00:01:34,630 --> 00:01:40,480
we go

00:01:36,570 --> 00:01:42,960
GG easy is actually used in the few

00:01:40,480 --> 00:01:50,320
games made by real people who are not me

00:01:42,960 --> 00:01:53,880
which is awesome it's nothing so far

00:01:50,320 --> 00:01:56,440
there's anything like super huge or

00:01:53,880 --> 00:01:59,140
complicated besides Emeraude which is

00:01:56,440 --> 00:02:02,380
this one which has been worked on since

00:01:59,140 --> 00:02:04,060
before I started working on rust but

00:02:02,380 --> 00:02:06,130
hopefully someday I'll actually get to

00:02:04,060 --> 00:02:09,909
write games in GG easy as well that's my

00:02:06,130 --> 00:02:13,510
that's my goal for 2019 so to do all

00:02:09,909 --> 00:02:16,290
this stuff GG easy brings together a lot

00:02:13,510 --> 00:02:19,240
of other crates from the rust ecosystem

00:02:16,290 --> 00:02:21,130
and has to take all of these libraries

00:02:19,240 --> 00:02:21,730
and make them play nice with each other

00:02:21,130 --> 00:02:23,080
and can

00:02:21,730 --> 00:02:24,849
it's the ones that don't have cool logos

00:02:23,080 --> 00:02:29,470
to make cool logos so I can put them on

00:02:24,849 --> 00:02:31,599
the next slide it has to take these

00:02:29,470 --> 00:02:34,000
crates and have them interoperate it has

00:02:31,599 --> 00:02:35,260
to take whatever API they expose and be

00:02:34,000 --> 00:02:37,540
able to kind of wrap it up in the

00:02:35,260 --> 00:02:44,200
consistent way and make it easy to use

00:02:37,540 --> 00:02:46,500
for rust newbies and it has to actually

00:02:44,200 --> 00:02:49,629
be able to use all of these crates

00:02:46,500 --> 00:02:51,670
successfully and so I have gotten to be

00:02:49,629 --> 00:02:53,470
very good friends with some of the

00:02:51,670 --> 00:02:55,120
maintainer of these crates because I

00:02:53,470 --> 00:02:57,040
would keep submitting bug reports or I

00:02:55,120 --> 00:02:59,739
would keep saying I need to be able to

00:02:57,040 --> 00:03:02,920
do X Y can't how do I do X and usually

00:02:59,739 --> 00:03:04,750
they tell me in life is good but I

00:03:02,920 --> 00:03:07,239
wanted to do this talk because I also

00:03:04,750 --> 00:03:09,519
hang out on Reddit and IRC a lot and

00:03:07,239 --> 00:03:14,349
probably too much and I keep seeing

00:03:09,519 --> 00:03:15,609
things like this so everyone who first

00:03:14,349 --> 00:03:19,450
learns to rust and write something big

00:03:15,609 --> 00:03:20,920
has to ask for advice on it and so it

00:03:19,450 --> 00:03:24,579
was it was weird because I don't see

00:03:20,920 --> 00:03:25,959
this a lot in like Python or C sharp or

00:03:24,579 --> 00:03:27,340
whatever maybe the world would be a

00:03:25,959 --> 00:03:30,669
better place if people did do this in

00:03:27,340 --> 00:03:32,760
those languages but either way people

00:03:30,669 --> 00:03:36,489
who learn rust seem to have trouble

00:03:32,760 --> 00:03:38,560
figuring out how to write rust api's or

00:03:36,489 --> 00:03:40,599
at least they have anxiety about writing

00:03:38,560 --> 00:03:42,609
rust api's they keep asking how do I

00:03:40,599 --> 00:03:46,090
write idiomatic rust and so that's what

00:03:42,609 --> 00:03:49,299
I want to talk about so how do we design

00:03:46,090 --> 00:03:51,220
a good API in rust in my case I didn't

00:03:49,299 --> 00:03:55,510
have to design an API I just copied an

00:03:51,220 --> 00:03:57,579
API and made it rusty so that was let's

00:03:55,510 --> 00:04:00,310
take a look at the API I copied it a

00:03:57,579 --> 00:04:02,470
little bit but I'm going to start with

00:04:00,310 --> 00:04:03,880
some GG easy examples and then I'm going

00:04:02,470 --> 00:04:08,650
to look at some of the other crates that

00:04:03,880 --> 00:04:10,090
GG easy uses and how those sort of look

00:04:08,650 --> 00:04:11,169
from an end-user perspective and what's

00:04:10,090 --> 00:04:15,669
good about them and what's bad about

00:04:11,169 --> 00:04:18,760
them so here is a very simple love 2d

00:04:15,669 --> 00:04:20,680
game it's all in Lua I don't know how

00:04:18,760 --> 00:04:23,680
many people out there know Lua but we

00:04:20,680 --> 00:04:25,570
have some functions we have load update

00:04:23,680 --> 00:04:27,639
and draw which are the sort of

00:04:25,570 --> 00:04:30,430
fundamental parts of your game we have a

00:04:27,639 --> 00:04:32,919
global player which is just a table dict

00:04:30,430 --> 00:04:33,750
essentially that's my Python showing

00:04:32,919 --> 00:04:38,580
through and we

00:04:33,750 --> 00:04:40,830
have update detects if you are pressing

00:04:38,580 --> 00:04:44,310
buttons and changes the world state if

00:04:40,830 --> 00:04:47,040
you are and draw draw stuff I'm great

00:04:44,310 --> 00:04:51,600
and these are basically callbacks that

00:04:47,040 --> 00:04:54,270
are loaded by the Lua interpreter and

00:04:51,600 --> 00:04:55,800
love basically has a version of the

00:04:54,270 --> 00:04:57,540
interpreter that is built with a bunch

00:04:55,800 --> 00:04:58,890
of libraries and looks for these

00:04:57,540 --> 00:05:04,020
callbacks and loads them and run to your

00:04:58,890 --> 00:05:07,200
game so this is pretty different from

00:05:04,020 --> 00:05:10,560
how rust works I mean there's no curly

00:05:07,200 --> 00:05:12,270
braces at all it's but we have these

00:05:10,560 --> 00:05:14,520
sort of magic callbacks that the

00:05:12,270 --> 00:05:19,740
interpreter looks for it's dynamically

00:05:14,520 --> 00:05:23,850
typed there's mutable state everywhere

00:05:19,740 --> 00:05:25,440
so it's it's kind of I didn't even know

00:05:23,850 --> 00:05:28,580
if it was going to be possible to make

00:05:25,440 --> 00:05:32,910
this in rust I was like well maybe I

00:05:28,580 --> 00:05:35,190
mean look at just the draw the love 2d

00:05:32,910 --> 00:05:36,450
draw function we have four different

00:05:35,190 --> 00:05:38,730
overloads for the draw function

00:05:36,450 --> 00:05:43,080
I like your expression to them

00:05:38,730 --> 00:05:45,000
responding to this we have a drop some

00:05:43,080 --> 00:05:46,710
drawable object or you can replace the

00:05:45,000 --> 00:05:49,440
drawable object with a texture and a

00:05:46,710 --> 00:05:51,210
quad saying which part of it to draw you

00:05:49,440 --> 00:05:53,730
can have a transform which is a

00:05:51,210 --> 00:05:55,020
structure that basically bundles up all

00:05:53,730 --> 00:05:56,940
of the drawing parameters or you can

00:05:55,020 --> 00:05:59,880
just list all the drawing parameters for

00:05:56,940 --> 00:06:00,750
that are possible individually and it

00:05:59,880 --> 00:06:02,790
also turns out that you can actually

00:06:00,750 --> 00:06:05,490
omit the ones at the end and they'll

00:06:02,790 --> 00:06:07,950
just default to 0 or 1 or whatever is

00:06:05,490 --> 00:06:09,870
appropriate and so you can just leave

00:06:07,950 --> 00:06:13,500
all of those off and just have x and y

00:06:09,870 --> 00:06:14,670
and r and it works fine so I was I was

00:06:13,500 --> 00:06:17,460
kind of like looking at this and saying

00:06:14,670 --> 00:06:19,590
well I just want to make something work

00:06:17,460 --> 00:06:22,370
so worst case I'll just make a separate

00:06:19,590 --> 00:06:25,050
function for each of these variants and

00:06:22,370 --> 00:06:26,520
so I started with that and I sort of

00:06:25,050 --> 00:06:30,060
squished it together and got something

00:06:26,520 --> 00:06:31,620
like this so we have a struct that has

00:06:30,060 --> 00:06:34,560
all the draw parameters in it that you

00:06:31,620 --> 00:06:37,740
can't have and we have a function that

00:06:34,560 --> 00:06:40,290
takes a drawable object and draw params

00:06:37,740 --> 00:06:42,450
and a context which I just hold on to

00:06:40,290 --> 00:06:45,480
the graphics contacts date and appears

00:06:42,450 --> 00:06:47,040
everywhere and it draws it based on

00:06:45,480 --> 00:06:48,720
whatever parameters you give it

00:06:47,040 --> 00:06:50,100
and then well okay we have a simplified

00:06:48,720 --> 00:06:54,270
function that just takes a destination

00:06:50,100 --> 00:06:55,710
point under a rotation and you can use

00:06:54,270 --> 00:06:57,120
that if that's all you need and if you

00:06:55,710 --> 00:06:58,680
need the full power function then you

00:06:57,120 --> 00:07:00,230
can use that instead it was like okay

00:06:58,680 --> 00:07:02,850
yeah fine

00:07:00,230 --> 00:07:05,910
eventually I discovered that the default

00:07:02,850 --> 00:07:07,890
rate and the struct update syntax exists

00:07:05,910 --> 00:07:09,930
and you can do something like this which

00:07:07,890 --> 00:07:13,080
actually is halfway decent it's not

00:07:09,930 --> 00:07:15,450
great it's not terrible but it works

00:07:13,080 --> 00:07:18,300
it's it's not too pretty I don't I never

00:07:15,450 --> 00:07:20,460
really liked it but something that I

00:07:18,300 --> 00:07:23,700
realized as time went on is that GG ez

00:07:20,460 --> 00:07:24,870
is an opinionated framework and so lots

00:07:23,700 --> 00:07:27,840
of people have opinions about it

00:07:24,870 --> 00:07:29,160
whenever they try to use it it's

00:07:27,840 --> 00:07:30,720
actually fairly low-level it doesn't

00:07:29,160 --> 00:07:35,400
provide animations it doesn't provide a

00:07:30,720 --> 00:07:37,110
physics engine but and so everyone says

00:07:35,400 --> 00:07:39,210
oh why don't you do it this way or why

00:07:37,110 --> 00:07:43,080
don't you add this or why don't you not

00:07:39,210 --> 00:07:44,220
add that but nobody in the last like two

00:07:43,080 --> 00:07:45,690
and a half years or whatever has

00:07:44,220 --> 00:07:50,010
actually complained about this horrible

00:07:45,690 --> 00:07:52,110
hack it's not a problem like it's it

00:07:50,010 --> 00:07:55,230
actually has quite a few advantages it's

00:07:52,110 --> 00:07:58,290
simple like even a new even the most

00:07:55,230 --> 00:07:59,820
basic rust programmer can understand it

00:07:58,290 --> 00:08:01,950
is completely obvious what's going on

00:07:59,820 --> 00:08:04,220
and like where the data is coming from

00:08:01,950 --> 00:08:07,050
where it's going and where it's used and

00:08:04,220 --> 00:08:13,470
with this my syntax it's even not too

00:08:07,050 --> 00:08:16,070
terrible so it works so the harder case

00:08:13,470 --> 00:08:19,350
was dealing with love to DS sort of

00:08:16,070 --> 00:08:20,940
callback structure and I ended up

00:08:19,350 --> 00:08:25,560
starting with something like this where

00:08:20,940 --> 00:08:28,290
we had a trait called game state and I

00:08:25,560 --> 00:08:30,750
should have cut out all the inconvenient

00:08:28,290 --> 00:08:32,490
code but it provides load update and

00:08:30,750 --> 00:08:35,280
draw methods that are just like Lewis

00:08:32,490 --> 00:08:37,950
Orlov to DS load update and draw methods

00:08:35,280 --> 00:08:43,710
and then down here you have this game

00:08:37,950 --> 00:08:46,680
struct that is generic on your the type

00:08:43,710 --> 00:08:49,920
that you implemented the game state

00:08:46,680 --> 00:08:51,660
trait for and it just creates your game

00:08:49,920 --> 00:08:53,220
state by calling the load method and

00:08:51,660 --> 00:08:56,400
then it has an event loop inside it that

00:08:53,220 --> 00:08:59,690
calls update and draw and takes keyboard

00:08:56,400 --> 00:08:59,690
events and all that stuff and

00:09:00,199 --> 00:09:03,680
so this is the closest I could get to

00:09:01,879 --> 00:09:05,089
something that looks like love 2d where

00:09:03,680 --> 00:09:07,490
it just had these magic callbacks that

00:09:05,089 --> 00:09:09,649
did everything for you and it sucked

00:09:07,490 --> 00:09:12,769
nobody hated it look or nobody liked it

00:09:09,649 --> 00:09:14,269
I didn't like it I got tons of questions

00:09:12,769 --> 00:09:15,829
like oh how does the game stay it

00:09:14,269 --> 00:09:17,870
actually get created like where do I put

00:09:15,829 --> 00:09:22,009
the new method how do I like who owns it

00:09:17,870 --> 00:09:25,879
it's owned by the game type how does it

00:09:22,009 --> 00:09:30,439
know what type to load well it uses you

00:09:25,879 --> 00:09:33,529
have to annotate it with that generic

00:09:30,439 --> 00:09:35,209
parameter and like howdy where's the

00:09:33,529 --> 00:09:36,620
context get created well it gets created

00:09:35,209 --> 00:09:39,589
in the game and like it was just

00:09:36,620 --> 00:09:41,329
complicated and nasty and eventually I

00:09:39,589 --> 00:09:44,059
wanted to be able to even like take

00:09:41,329 --> 00:09:45,649
apart the event loop and let the user

00:09:44,059 --> 00:09:47,029
sort of write their own with their own

00:09:45,649 --> 00:09:48,829
update functionality if they really

00:09:47,029 --> 00:09:52,309
wanted to because love 2d does allow you

00:09:48,829 --> 00:09:57,040
to do that so eventually I ended up with

00:09:52,309 --> 00:09:59,660
this which is kind of similar we have a

00:09:57,040 --> 00:10:03,199
event handle or trait it defines update

00:09:59,660 --> 00:10:05,749
and draw methods but the main the gain

00:10:03,199 --> 00:10:08,179
state is just a struct you create and

00:10:05,749 --> 00:10:11,420
there's nothing special about it you

00:10:08,179 --> 00:10:14,389
create a context which is sort of the

00:10:11,420 --> 00:10:17,209
handle to all the GG easy library

00:10:14,389 --> 00:10:19,339
functions like it handles the sound

00:10:17,209 --> 00:10:22,879
state the window state it talks to the

00:10:19,339 --> 00:10:25,160
operating system etc and you have this

00:10:22,879 --> 00:10:27,470
event that run or call and run function

00:10:25,160 --> 00:10:29,990
which is literally what you would just

00:10:27,470 --> 00:10:33,949
write it's a while loop that pulls the

00:10:29,990 --> 00:10:35,600
operating system for events calls event

00:10:33,949 --> 00:10:38,199
handler update and then calls event

00:10:35,600 --> 00:10:42,199
handler draw and it just does that and

00:10:38,199 --> 00:10:46,179
now we by making by trying to do less

00:10:42,199 --> 00:10:50,269
magic everything becomes way better and

00:10:46,179 --> 00:10:51,769
so and I didn't like it was like this

00:10:50,269 --> 00:10:54,949
this doesn't really look rusty this is

00:10:51,769 --> 00:10:56,179
kind of dumb as a pile of bricks but how

00:10:54,949 --> 00:10:58,339
do we design a good API and rust

00:10:56,179 --> 00:11:02,540
everything a good API is still a good

00:10:58,339 --> 00:11:04,339
API in rust that was the sort of what I

00:11:02,540 --> 00:11:06,410
figured out Lou loved 2d started off

00:11:04,339 --> 00:11:08,329
with a pretty good API I turned it into

00:11:06,410 --> 00:11:09,709
rust and it's still a good API rust

00:11:08,329 --> 00:11:13,040
doesn't add or remove anything too

00:11:09,709 --> 00:11:14,269
magical from it and when it down

00:11:13,040 --> 00:11:16,430
keep it simple I like the term

00:11:14,269 --> 00:11:20,570
complexity budget that the last talk

00:11:16,430 --> 00:11:22,550
used because having the putting the but

00:11:20,570 --> 00:11:25,399
putting my conflict but into trying to

00:11:22,550 --> 00:11:30,250
make it look exactly like a Lua API

00:11:25,399 --> 00:11:34,940
wasn't worth the extra compact so

00:11:30,250 --> 00:11:36,949
another problem that I deal have often

00:11:34,940 --> 00:11:39,529
when people are trying to get into rust

00:11:36,949 --> 00:11:42,860
gamedev is that some popular crates are

00:11:39,529 --> 00:11:44,449
very hairy so they say well what are my

00:11:42,860 --> 00:11:46,610
options for drawing graphics and someone

00:11:44,449 --> 00:11:49,459
mentions GFX RS which is awesome and

00:11:46,610 --> 00:11:53,329
which love 2d uses and they go to the

00:11:49,459 --> 00:11:56,089
docks and they see this now I don't know

00:11:53,329 --> 00:11:57,230
about you like usually I call it quits

00:11:56,089 --> 00:12:01,550
after only like seven or eight

00:11:57,230 --> 00:12:03,470
associated types here we have twelve or

00:12:01,550 --> 00:12:05,480
they say okay well how do I do matrix

00:12:03,470 --> 00:12:08,810
math well look at an algebra and they

00:12:05,480 --> 00:12:11,480
see this like this is this is the matrix

00:12:08,810 --> 00:12:13,130
type this is what's even going on here

00:12:11,480 --> 00:12:14,569
we it's almost impossible to read when I

00:12:13,130 --> 00:12:17,240
see stuff like this I call it trait

00:12:14,569 --> 00:12:18,470
salad because it's just a pile of

00:12:17,240 --> 00:12:21,380
different stuff all mixed up and you

00:12:18,470 --> 00:12:23,480
can't make heads or tails of it but if

00:12:21,380 --> 00:12:25,569
you're like trying to learn rust and you

00:12:23,480 --> 00:12:28,910
come at this and this is what you see

00:12:25,569 --> 00:12:33,260
then you obviously the Creator is this

00:12:28,910 --> 00:12:36,639
guy who either is just a mentat who is

00:12:33,260 --> 00:12:38,149
one with the computer and knows

00:12:36,639 --> 00:12:40,459
everything there is to know about

00:12:38,149 --> 00:12:42,230
everything or he's just a sadist and he

00:12:40,459 --> 00:12:45,410
likes torturing the users of his crates

00:12:42,230 --> 00:12:47,269
I mean let's look at I mean we saw his

00:12:45,410 --> 00:12:50,329
mantle fried framework let's look at his

00:12:47,269 --> 00:12:53,000
physics engine this actually looks kind

00:12:50,329 --> 00:12:55,130
of reasonable I mean it's just a bunch

00:12:53,000 --> 00:12:58,939
of methods this is part of the collider

00:12:55,130 --> 00:13:00,769
type I think and it's pretty obvious

00:12:58,939 --> 00:13:02,420
like what's supposed to connect so it's

00:13:00,769 --> 00:13:04,370
not that he's a sadist and it's not that

00:13:02,420 --> 00:13:07,819
he is like operating on some plane

00:13:04,370 --> 00:13:09,560
beyond human comprehension so what's

00:13:07,819 --> 00:13:12,829
going act what's actually going on here

00:13:09,560 --> 00:13:16,220
I we have a bunch of traits they all

00:13:12,829 --> 00:13:19,490
have really complicated bounds like we

00:13:16,220 --> 00:13:22,010
have one here called abstract magma I

00:13:19,490 --> 00:13:23,649
usually think of this when I see that or

00:13:22,010 --> 00:13:25,730
maybe this

00:13:23,649 --> 00:13:28,370
however it turns out that what I should

00:13:25,730 --> 00:13:31,069
have been thinking of is this it's a

00:13:28,370 --> 00:13:33,259
math term and so what an algebra is

00:13:31,069 --> 00:13:36,230
doing is teaching the RUS compiler how

00:13:33,259 --> 00:13:40,790
to do fundamental math by encoding it in

00:13:36,230 --> 00:13:42,589
the type system and that's not something

00:13:40,790 --> 00:13:45,529
that would have ever occurred to me to

00:13:42,589 --> 00:13:47,990
do but it also means that it completely

00:13:45,529 --> 00:13:49,310
rules out a lot of math errors at

00:13:47,990 --> 00:13:51,259
compile time

00:13:49,310 --> 00:13:52,699
you can't like if you have a transform

00:13:51,259 --> 00:13:54,920
vector and the scale vector you can't

00:13:52,699 --> 00:13:59,300
add them together the type checker

00:13:54,920 --> 00:14:00,500
catches it and GFX is similar it's doing

00:13:59,300 --> 00:14:02,660
something kind of like that trying to

00:14:00,500 --> 00:14:05,269
encode the state of a graphics card in

00:14:02,660 --> 00:14:07,399
the type system which is really

00:14:05,269 --> 00:14:10,670
complicated in low level but you end up

00:14:07,399 --> 00:14:13,670
it ends up catching a lot of bugs so

00:14:10,670 --> 00:14:16,040
these aren't bad api's they're just very

00:14:13,670 --> 00:14:18,829
sophisticated and specific and low-level

00:14:16,040 --> 00:14:21,740
and are geared towards a certain type of

00:14:18,829 --> 00:14:23,870
use case I've talked to people who have

00:14:21,740 --> 00:14:27,170
a formal math background and use an

00:14:23,870 --> 00:14:29,779
algebra and they love it like they don't

00:14:27,170 --> 00:14:31,220
see this Magma they but they all of this

00:14:29,779 --> 00:14:36,759
pops out at them and they're like oh I

00:14:31,220 --> 00:14:39,579
know how everything fits together so it

00:14:36,759 --> 00:14:41,930
the next lesson is know your audience

00:14:39,579 --> 00:14:44,870
who do you want to be making these

00:14:41,930 --> 00:14:46,339
crates for what do they want to be doing

00:14:44,870 --> 00:14:48,709
and how do you make what they want to do

00:14:46,339 --> 00:14:50,420
easy if you're making something for

00:14:48,709 --> 00:14:51,860
yourself and you're you have a

00:14:50,420 --> 00:14:54,470
background in math then you end up with

00:14:51,860 --> 00:14:55,569
in algebra and if you don't then you end

00:14:54,470 --> 00:14:58,720
up with something else

00:14:55,569 --> 00:15:01,790
so also as an audience know your tools

00:14:58,720 --> 00:15:05,449
it's a lot easier to understand why an

00:15:01,790 --> 00:15:06,949
API is the way it is and what where to

00:15:05,449 --> 00:15:09,920
look when you need some functionality

00:15:06,949 --> 00:15:12,050
when you know who the writer is making

00:15:09,920 --> 00:15:12,920
it for maybe it's not for you maybe it's

00:15:12,050 --> 00:15:18,589
something you can learn

00:15:12,920 --> 00:15:20,930
but either way so we've discovered that

00:15:18,589 --> 00:15:24,050
API design in rust in horror is hard

00:15:20,930 --> 00:15:25,490
it's hard in any language rust seems to

00:15:24,050 --> 00:15:28,519
make it trickier though why do people

00:15:25,490 --> 00:15:32,360
get such anxiety about it and what can

00:15:28,519 --> 00:15:33,980
we do to make it better well in rust API

00:15:32,360 --> 00:15:34,690
and this features are actually really

00:15:33,980 --> 00:15:38,050
nasty

00:15:34,690 --> 00:15:41,320
this is true in any language like Java

00:15:38,050 --> 00:15:43,660
or Python or whatever but rust is good

00:15:41,320 --> 00:15:45,490
at making things subtly terrible in ways

00:15:43,660 --> 00:15:49,390
that aren't obvious to people who don't

00:15:45,490 --> 00:15:52,690
know rust very well for instance Gigi

00:15:49,390 --> 00:15:55,260
easy let has a sub-module for loading

00:15:52,690 --> 00:15:57,460
resources from file paths without and

00:15:55,260 --> 00:15:59,020
keeping the files in some platform

00:15:57,460 --> 00:16:01,420
specific location that's different on

00:15:59,020 --> 00:16:05,620
whatever on Windows on Mac OS X on

00:16:01,420 --> 00:16:07,420
whatever and so it uses a crate to like

00:16:05,620 --> 00:16:11,080
just ask the operating system what paths

00:16:07,420 --> 00:16:12,340
it should use and it's called the crate

00:16:11,080 --> 00:16:14,440
it's called actors and it works

00:16:12,340 --> 00:16:17,470
basically like this you create an app

00:16:14,440 --> 00:16:20,500
info struct which has the name of the

00:16:17,470 --> 00:16:24,490
app and author and the operating system

00:16:20,500 --> 00:16:25,900
has some specific location for based off

00:16:24,490 --> 00:16:30,660
of this information that it uses to

00:16:25,900 --> 00:16:30,660
store images or fonts or whatever and

00:16:30,990 --> 00:16:36,400
you just say ok get me the user config

00:16:34,450 --> 00:16:37,750
directory for whatever operating system

00:16:36,400 --> 00:16:38,950
I'm running on and it gives you a path

00:16:37,750 --> 00:16:43,720
and that's it

00:16:38,950 --> 00:16:44,770
so the API is this it's there's more

00:16:43,720 --> 00:16:48,070
than this but this is the part that

00:16:44,770 --> 00:16:49,840
Gigi's you uses the most and so we have

00:16:48,070 --> 00:16:51,460
a struct and we have a method and the

00:16:49,840 --> 00:16:55,270
struct has some static strings and

00:16:51,460 --> 00:16:57,190
everything is good and so I wanted at

00:16:55,270 --> 00:16:58,750
one point to write a program that loaded

00:16:57,190 --> 00:17:00,760
these paths from a config file or

00:16:58,750 --> 00:17:02,590
something and so I had something like

00:17:00,760 --> 00:17:05,110
this we have author and app name which

00:17:02,590 --> 00:17:07,990
are own strings and we feed weight we

00:17:05,110 --> 00:17:10,270
feed them into app info which is static

00:17:07,990 --> 00:17:12,730
string slices except these are own

00:17:10,270 --> 00:17:16,900
strings but these are static string

00:17:12,730 --> 00:17:18,040
slices you can't get there from here how

00:17:16,900 --> 00:17:20,740
do you do it well you can probably

00:17:18,040 --> 00:17:24,069
figure it like you go on IRC and you ask

00:17:20,740 --> 00:17:25,689
how do you turn a own string into a

00:17:24,069 --> 00:17:26,680
static static string slice and someone

00:17:25,689 --> 00:17:28,990
will say well you can probably do it

00:17:26,680 --> 00:17:30,400
with unsafe but we don't like doing that

00:17:28,990 --> 00:17:32,350
because the point of unsafe is that you

00:17:30,400 --> 00:17:34,060
never need to use it it's there in case

00:17:32,350 --> 00:17:37,720
it's it's like the shotgun on the wall

00:17:34,060 --> 00:17:39,190
in your dad's room like it now it never

00:17:37,720 --> 00:17:42,220
leaves the wall it's there in case you

00:17:39,190 --> 00:17:44,380
need it you just never need it ok so

00:17:42,220 --> 00:17:46,420
well we'll fix that somehow let's just

00:17:44,380 --> 00:17:47,590
get on with the filesystem code I want

00:17:46,420 --> 00:17:48,670
to be able to write something like this

00:17:47,590 --> 00:17:51,070
where

00:17:48,670 --> 00:17:56,080
I have sort of several virtual file

00:17:51,070 --> 00:17:58,480
systems like which one of which will one

00:17:56,080 --> 00:18:00,160
type will be able to load things from

00:17:58,480 --> 00:18:01,960
the disk just from the normal file

00:18:00,160 --> 00:18:03,400
system and one will load things from a

00:18:01,960 --> 00:18:05,380
zip file and pretend it's a file system

00:18:03,400 --> 00:18:07,750
that's sort of been overlaid on top of

00:18:05,380 --> 00:18:09,340
it and this is handy for games because

00:18:07,750 --> 00:18:10,810
especially if you want a game that's

00:18:09,340 --> 00:18:13,600
moddable or something you can have all

00:18:10,810 --> 00:18:15,190
the sort of formal game resources and

00:18:13,600 --> 00:18:17,610
one zip file and then you can have a mod

00:18:15,190 --> 00:18:20,260
that just sort of replaces a few of them

00:18:17,610 --> 00:18:23,050
either in a zip file or in a directory

00:18:20,260 --> 00:18:25,720
and it's nice and we just have I wanted

00:18:23,050 --> 00:18:27,310
to just have a trade the file system be

00:18:25,720 --> 00:18:30,370
a trade object that exposed a few

00:18:27,310 --> 00:18:32,650
methods and we just have a Veck and we

00:18:30,370 --> 00:18:33,850
just look at which ones we just look

00:18:32,650 --> 00:18:37,330
through each of them in turn and use the

00:18:33,850 --> 00:18:40,150
first one that has a file great so I

00:18:37,330 --> 00:18:42,400
found a crate that looks like it head

00:18:40,150 --> 00:18:45,030
does this and is called and it has a

00:18:42,400 --> 00:18:47,920
trait like this and it's called VFS and

00:18:45,030 --> 00:18:50,320
so we have the path which this crate is

00:18:47,920 --> 00:18:52,090
the the path user it uses the path as

00:18:50,320 --> 00:18:53,650
the entry point kind of like you you use

00:18:52,090 --> 00:18:56,740
path and then you open a file and it's

00:18:53,650 --> 00:18:58,420
very object oriented but it works ok and

00:18:56,740 --> 00:19:00,460
then we have a associated file it

00:18:58,420 --> 00:19:04,870
metadata type and then you create a path

00:19:00,460 --> 00:19:07,510
through this method on the trade and it

00:19:04,870 --> 00:19:09,220
takes some thing that can be turned into

00:19:07,510 --> 00:19:12,250
a string and gives you the path type for

00:19:09,220 --> 00:19:15,630
that trait well hang on I want to trade

00:19:12,250 --> 00:19:18,670
objects and this has a generic parameter

00:19:15,630 --> 00:19:21,580
with a trait bound but you can't turn

00:19:18,670 --> 00:19:24,520
that into trade objects because the

00:19:21,580 --> 00:19:27,400
trade object needs a V table and this

00:19:24,520 --> 00:19:31,030
will make one the compiler will make one

00:19:27,400 --> 00:19:35,050
version of the path method for each type

00:19:31,030 --> 00:19:39,610
that you specialize it with and so you

00:19:35,050 --> 00:19:41,200
can't you can't make a trade object from

00:19:39,610 --> 00:19:43,240
that the compiler would have to be able

00:19:41,200 --> 00:19:45,550
to look into the future and see what

00:19:43,240 --> 00:19:48,340
types of T you would use it for and

00:19:45,550 --> 00:19:50,410
compile those as well and it can't like

00:19:48,340 --> 00:19:52,690
so you end up with these situations

00:19:50,410 --> 00:19:54,760
where perfectly reasonable explanations

00:19:52,690 --> 00:19:58,470
are perfectly reasonable design

00:19:54,760 --> 00:20:01,510
decisions just get into weird places

00:19:58,470 --> 00:20:02,500
where you and it's impossible to do

00:20:01,510 --> 00:20:06,820
anything about it

00:20:02,500 --> 00:20:10,360
and so this isn't and these are the easy

00:20:06,820 --> 00:20:12,909
cases if you try to use GFX RS or Tokyo

00:20:10,360 --> 00:20:15,070
and you end up with the end up in one of

00:20:12,909 --> 00:20:16,600
these weird corner cases then even rusty

00:20:15,070 --> 00:20:17,799
can't figure out what's going on and

00:20:16,600 --> 00:20:20,530
tell you what your trunk doing

00:20:17,799 --> 00:20:27,220
incorrectly and so you just end up with

00:20:20,530 --> 00:20:29,590
these weird these weird situations that

00:20:27,220 --> 00:20:30,909
aren't obvious or at least aren't

00:20:29,590 --> 00:20:33,970
obvious if you're not looking for them

00:20:30,909 --> 00:20:36,460
where you want to do something that the

00:20:33,970 --> 00:20:39,220
Krait author didn't want didn't think of

00:20:36,460 --> 00:20:41,740
you trying to do and rust isn't allowing

00:20:39,220 --> 00:20:43,809
you to do it so they made some design

00:20:41,740 --> 00:20:47,289
this is a design decision that had

00:20:43,809 --> 00:20:49,090
unexpected consequences unfortunately I

00:20:47,289 --> 00:20:49,960
don't really have a great answer to this

00:20:49,090 --> 00:20:52,600
one

00:20:49,960 --> 00:20:55,090
besides iterate because people will

00:20:52,600 --> 00:20:57,789
always come up with interesting use

00:20:55,090 --> 00:21:00,309
cases that you never thought of I've

00:20:57,789 --> 00:21:03,429
spent the last two weeks with some

00:21:00,309 --> 00:21:05,530
trying to get GG easy to work on iOS

00:21:03,429 --> 00:21:07,210
because someone really wanted it too and

00:21:05,530 --> 00:21:10,900
I never really considered doing that

00:21:07,210 --> 00:21:13,450
before so your users will always come up

00:21:10,900 --> 00:21:18,390
with something that you didn't expect

00:21:13,450 --> 00:21:21,159
and the nice thing is it's not a

00:21:18,390 --> 00:21:23,770
terrible thing to redesign an API in

00:21:21,159 --> 00:21:26,710
rust at least for small things

00:21:23,770 --> 00:21:28,260
definitely because it's for rust like if

00:21:26,710 --> 00:21:30,400
it compiles it will probably work and

00:21:28,260 --> 00:21:35,559
it's very hard to break things by

00:21:30,400 --> 00:21:37,120
accident so having people actually use

00:21:35,559 --> 00:21:38,860
your crates use your own dog food but

00:21:37,120 --> 00:21:40,450
also have make sure you share your dog

00:21:38,860 --> 00:21:45,450
food around and have other people tasted

00:21:40,450 --> 00:21:48,520
and see if there is to their palate it's

00:21:45,450 --> 00:21:51,190
you like rust is great because you have

00:21:48,520 --> 00:21:53,980
cargo everyone tends to use semantic

00:21:51,190 --> 00:21:56,770
versioning and it has good encapsulation

00:21:53,980 --> 00:21:59,230
and so if you make an update an update

00:21:56,770 --> 00:22:01,200
to your crate like futures or something

00:21:59,230 --> 00:22:03,520
and people don't like it that's fine

00:22:01,200 --> 00:22:08,200
they just use the old version and it's

00:22:03,520 --> 00:22:09,970
no it's no problem so everything you

00:22:08,200 --> 00:22:13,120
know about API design still works in

00:22:09,970 --> 00:22:15,039
rust if you can make a function that

00:22:13,120 --> 00:22:16,090
takes borrowed types and returns as a

00:22:15,039 --> 00:22:18,400
result when necessary

00:22:16,090 --> 00:22:21,100
then you're writing idiomatic Rus code

00:22:18,400 --> 00:22:22,960
it doesn't matter how non fancy it is

00:22:21,100 --> 00:22:24,520
you don't need the fanciness the

00:22:22,960 --> 00:22:26,980
fanciness is there when you need it but

00:22:24,520 --> 00:22:29,140
most of the time you don't always make

00:22:26,980 --> 00:22:31,210
sure that you have some idea of who

00:22:29,140 --> 00:22:33,400
you're writing this crate for just so

00:22:31,210 --> 00:22:35,140
when the next interesting feature pops

00:22:33,400 --> 00:22:37,539
into your head and you say oh I wonder

00:22:35,140 --> 00:22:40,179
if I could do it if it could do X you

00:22:37,539 --> 00:22:41,679
stop the second and say well does X

00:22:40,179 --> 00:22:44,500
really sort of my purpose or not and

00:22:41,679 --> 00:22:45,730
more importantly if I write X how do I

00:22:44,500 --> 00:22:50,140
explain it to someone who's trying to

00:22:45,730 --> 00:22:55,110
use it and iterate and keep keep working

00:22:50,140 --> 00:22:55,110
and keep Mike writing code so thank you

00:23:00,710 --> 00:23:02,770

YouTube URL: https://www.youtube.com/watch?v=Xt1JOVeQ5hw


