Title: Percy: Isomorphic Web Apps with Rust + WebAssembly — Chinedu Francis Nwafili
Publication date: 2018-11-28
Playlist: Rust Belt Rust 2018
Description: 
	Percy is a modular toolkit for building frontend web applications in Rust. It supports serverside rendering out of the box.

In this talk we’ll dive into how Percy works under the hood, starting with a look into its Virtual DOM implementation.

You’ll hopefully walk away with an understanding of the pieces that power Percy - as well as a good sense of how to get started with using Percy to build your own web apps.

---

My name is Chinedu Francis Nwafili and I’m a developer with a passion for the modularity and great tooling. When not chasing my unofficial goal of becoming a four star chef - you can find me working on open source modules, tweeting about graphics programming or blogging about building a 3d game in the browser.
Captions: 
	00:00:07,040 --> 00:00:12,530
all right stuff everybody chinnu

00:00:09,500 --> 00:00:16,130
Francesco fili as you introduced we're

00:00:12,530 --> 00:00:18,470
gonna be talking about Percy which is as

00:00:16,130 --> 00:00:21,770
stated a library for building isomorphic

00:00:18,470 --> 00:00:23,270
web apps in rust a quick warning for the

00:00:21,770 --> 00:00:25,730
beginning a lot of this stuff is

00:00:23,270 --> 00:00:27,110
experimental there are areas where works

00:00:25,730 --> 00:00:28,430
pretty nicely other areas where it's

00:00:27,110 --> 00:00:31,130
like a little verbose a little

00:00:28,430 --> 00:00:32,660
inefficient still working on that but

00:00:31,130 --> 00:00:35,870
hopefully this sort of direction is

00:00:32,660 --> 00:00:38,450
somewhat interesting and so we talked

00:00:35,870 --> 00:00:41,270
about a few things one what is percy

00:00:38,450 --> 00:00:42,500
today how are we targeting watch them

00:00:41,270 --> 00:00:45,020
what does it look like how does it feel

00:00:42,500 --> 00:00:46,460
and since this is a press conference and

00:00:45,020 --> 00:00:48,260
i'm assuming a lot of you care about

00:00:46,460 --> 00:00:50,300
rust and rust details we'll talk about

00:00:48,260 --> 00:00:53,870
it with more of a technical focus versus

00:00:50,300 --> 00:00:55,160
sort of a bird's-eye view and so the

00:00:53,870 --> 00:00:56,450
person I was thinking of is I took a

00:00:55,160 --> 00:00:58,700
bunch of screenshots of a bunch of

00:00:56,450 --> 00:00:59,900
different code that compiles webassembly

00:00:58,700 --> 00:01:01,880
and will sort of just talk through how

00:00:59,900 --> 00:01:03,950
that works you'll hopefully walk away

00:01:01,880 --> 00:01:06,799
with a solid understanding of how and

00:01:03,950 --> 00:01:08,960
why things work the way that they do and

00:01:06,799 --> 00:01:10,159
then sort of the future that will

00:01:08,960 --> 00:01:12,409
hopefully come from that and then at the

00:01:10,159 --> 00:01:13,970
end time permitting will maybe take a

00:01:12,409 --> 00:01:19,010
couple minutes to look at a quick demo

00:01:13,970 --> 00:01:20,870
and make a special surprise okay so

00:01:19,010 --> 00:01:23,780
before we talk about percy i have to

00:01:20,870 --> 00:01:24,860
shout out a couple crates which alex is

00:01:23,780 --> 00:01:28,280
here somewhere

00:01:24,860 --> 00:01:30,549
there you are these do almost all the

00:01:28,280 --> 00:01:32,330
work and then i just kind of use them so

00:01:30,549 --> 00:01:34,970
thank you

00:01:32,330 --> 00:01:38,210
so it's blossom mine Jen and web sis

00:01:34,970 --> 00:01:39,650
which is in the same cargo workspace and

00:01:38,210 --> 00:01:41,030
I won't try and explain all the

00:01:39,650 --> 00:01:42,680
technical details because the person

00:01:41,030 --> 00:01:44,630
that wrote is actually here but in short

00:01:42,680 --> 00:01:46,610
these help you generate a lot of the

00:01:44,630 --> 00:01:49,750
bindings that allow your rust code to

00:01:46,610 --> 00:01:51,979
talk with native browser api's today

00:01:49,750 --> 00:01:54,590
well of assembly code doesn't have any

00:01:51,979 --> 00:01:56,479
access to things like the Dom directly

00:01:54,590 --> 00:01:58,520
you have to talk to JavaScript who then

00:01:56,479 --> 00:02:00,560
talks to your host and does everything

00:01:58,520 --> 00:02:03,200
for you and the future that will change

00:02:00,560 --> 00:02:06,740
and Wasson bind gen is built for that

00:02:03,200 --> 00:02:08,299
future so we're sort of headed in the

00:02:06,740 --> 00:02:09,890
right direction over time not quite

00:02:08,299 --> 00:02:13,069
there yet

00:02:09,890 --> 00:02:14,780
and this is Percy I wanted to call out

00:02:13,069 --> 00:02:16,310
this piece right here which is that it's

00:02:14,780 --> 00:02:18,030
mostly rust and that's sort of the theme

00:02:16,310 --> 00:02:20,430
so yeah

00:02:18,030 --> 00:02:22,410
and what was the motivation before we

00:02:20,430 --> 00:02:25,110
dive into the technical details so I'm

00:02:22,410 --> 00:02:28,890
working on a Russ plus web assembly

00:02:25,110 --> 00:02:30,810
WebGL game so while doing that I realize

00:02:28,890 --> 00:02:33,720
wow I love rust and I want to use this

00:02:30,810 --> 00:02:36,600
for everything and so I needed something

00:02:33,720 --> 00:02:38,010
to build websites with there was another

00:02:36,600 --> 00:02:39,360
library out there that I found that

00:02:38,010 --> 00:02:42,240
looked really interesting but it didn't

00:02:39,360 --> 00:02:43,200
have server-side rendering a lot of

00:02:42,240 --> 00:02:45,240
people here probably are familiar with

00:02:43,200 --> 00:02:49,680
the web because a lot of you write C++ I

00:02:45,240 --> 00:02:52,709
don't know how but I'm learning and so

00:02:49,680 --> 00:02:56,310
that just means that on a search engine

00:02:52,709 --> 00:02:57,630
if you're searching for a website Google

00:02:56,310 --> 00:02:59,160
needs to index it so it needs to know

00:02:57,630 --> 00:03:00,600
what's on it and nowadays I can kind of

00:02:59,160 --> 00:03:02,459
do a good job of indexing things that

00:03:00,600 --> 00:03:04,110
aren't rendered on the server but your

00:03:02,459 --> 00:03:07,620
best bet is to have the server send down

00:03:04,110 --> 00:03:10,050
the content the crawler sees that it can

00:03:07,620 --> 00:03:11,970
index it just fine and so we needed a

00:03:10,050 --> 00:03:13,890
library that can render on both your

00:03:11,970 --> 00:03:17,700
server and on the client in the browser

00:03:13,890 --> 00:03:21,930
so Percy was born and this was the real

00:03:17,700 --> 00:03:23,340
motivation that's one easy rose so this

00:03:21,930 --> 00:03:25,500
is just a screenshot of something I'm

00:03:23,340 --> 00:03:27,840
working on now using Percy it's the

00:03:25,500 --> 00:03:32,519
website for my game so HTML CSS

00:03:27,840 --> 00:03:35,820
generated from rust and it's powered by

00:03:32,519 --> 00:03:38,910
sort of rearward development where my

00:03:35,820 --> 00:03:40,769
time we're up work on something sort of

00:03:38,910 --> 00:03:42,840
run into issues fix them as we go right

00:03:40,769 --> 00:03:46,560
pretty simple so I think we're gonna get

00:03:42,840 --> 00:03:48,090
the code soon cool so let's start diving

00:03:46,560 --> 00:03:50,700
to sort of the pieces that power this

00:03:48,090 --> 00:03:51,720
right so if you've written HTML before

00:03:50,700 --> 00:03:55,290
it's basically similar to late

00:03:51,720 --> 00:03:57,299
similar to XML you define some node and

00:03:55,290 --> 00:04:00,540
then this node can have child nodes and

00:03:57,299 --> 00:04:02,340
then based on the attributes properties

00:04:00,540 --> 00:04:05,090
whatever you wanna call them you specify

00:04:02,340 --> 00:04:09,329
the browser will interpret this into

00:04:05,090 --> 00:04:11,540
graphics that eventually renders and so

00:04:09,329 --> 00:04:14,040
when writing web applications in rust

00:04:11,540 --> 00:04:15,989
while you could sort of just hand code

00:04:14,040 --> 00:04:21,120
the data structures that end up leading

00:04:15,989 --> 00:04:22,470
to these HTML strings you probably don't

00:04:21,120 --> 00:04:25,169
want to and so you need a macro to do

00:04:22,470 --> 00:04:26,669
that right so this is one of the first

00:04:25,169 --> 00:04:29,130
key pieces of Percy

00:04:26,669 --> 00:04:31,800
it's the HTML macro so you can see we

00:04:29,130 --> 00:04:35,009
specify a div with an ID property

00:04:31,800 --> 00:04:37,440
a class property and then inside of that

00:04:35,009 --> 00:04:38,970
div there's a span which has a text node

00:04:37,440 --> 00:04:41,159
that says hey with a little smiley face

00:04:38,970 --> 00:04:43,860
and a button which has an onclick

00:04:41,159 --> 00:04:47,400
handler which is pulling some are

00:04:43,860 --> 00:04:50,220
setting some cell with some value sort

00:04:47,400 --> 00:04:52,470
of all the way down and so you write

00:04:50,220 --> 00:04:54,449
HTML obviously doesn't look exactly like

00:04:52,470 --> 00:04:56,659
you would if you were say in a regular

00:04:54,449 --> 00:04:59,759
HTML file there's these weird commas

00:04:56,659 --> 00:05:01,650
everywhere which I will need to talk to

00:04:59,759 --> 00:05:02,759
more procedural macro experts to see if

00:05:01,650 --> 00:05:04,830
I can figure out a way to get rid of

00:05:02,759 --> 00:05:06,569
those but for now they're there but it's

00:05:04,830 --> 00:05:08,569
mostly similar and you sort of pay a

00:05:06,569 --> 00:05:11,460
little trade off with some slight

00:05:08,569 --> 00:05:13,169
unfamiliarity but on the good side you

00:05:11,460 --> 00:05:16,889
get all the type safety and it's really

00:05:13,169 --> 00:05:18,000
hard to write things incorrectly and at

00:05:16,889 --> 00:05:19,500
the bottom we'll talk about this a bit

00:05:18,000 --> 00:05:22,680
later you're seeing that we're rendering

00:05:19,500 --> 00:05:25,289
two strings because our HTML here is

00:05:22,680 --> 00:05:27,539
just a regular struct that implements

00:05:25,289 --> 00:05:28,740
display so you can render it to a string

00:05:27,539 --> 00:05:34,919
and that will power server-side

00:05:28,740 --> 00:05:36,210
rendering which we will get to so we saw

00:05:34,919 --> 00:05:38,940
that HTML right but what does that

00:05:36,210 --> 00:05:41,250
create so at the end of the day that

00:05:38,940 --> 00:05:43,529
ends up being a macro that generates a

00:05:41,250 --> 00:05:48,330
virtual node and so a virtual node is a

00:05:43,529 --> 00:05:52,620
tag so a div span bold its properties so

00:05:48,330 --> 00:05:54,930
ID class data - foo whatever sort of

00:05:52,620 --> 00:05:57,539
attribute you want events on click on

00:05:54,930 --> 00:06:00,120
mouse-over and then children so a child

00:05:57,539 --> 00:06:01,800
is another virtual node and you know

00:06:00,120 --> 00:06:04,620
Turtles all the way down and then

00:06:01,800 --> 00:06:08,039
optionally it can be a text node so as

00:06:04,620 --> 00:06:10,289
you saw before there was that hey that's

00:06:08,039 --> 00:06:12,060
a text node which in the browser web

00:06:10,289 --> 00:06:14,490
world is different from an element you

00:06:12,060 --> 00:06:16,469
have to handle it kind of weirdly but as

00:06:14,490 --> 00:06:19,560
long as you sort of know the API is you

00:06:16,469 --> 00:06:21,719
can make it all work together so a

00:06:19,560 --> 00:06:24,779
virtual node can represent either text

00:06:21,719 --> 00:06:26,810
or a regular element and sort of based

00:06:24,779 --> 00:06:29,129
on what set here will know how to

00:06:26,810 --> 00:06:32,219
eventually turn this into a real Dom

00:06:29,129 --> 00:06:33,509
element element which we got to and as

00:06:32,219 --> 00:06:35,520
the title says this is sort of the

00:06:33,509 --> 00:06:38,009
behind everything and so your HTML

00:06:35,520 --> 00:06:40,440
generates this the deafening patching

00:06:38,009 --> 00:06:42,719
virtual Dom algorithms useless to then

00:06:40,440 --> 00:06:44,250
update the Dom and everything's really

00:06:42,719 --> 00:06:44,930
built around the sort of virtual node

00:06:44,250 --> 00:06:48,900
comes up

00:06:44,930 --> 00:06:51,689
and again the nice part here is it's

00:06:48,900 --> 00:06:54,449
just some data and then we have methods

00:06:51,689 --> 00:06:57,930
later to use that data to render in the

00:06:54,449 --> 00:07:00,900
browser which we'll get to so the first

00:06:57,930 --> 00:07:02,639
piece of it is the diffing algorithm so

00:07:00,900 --> 00:07:04,289
if any of you are familiar with react

00:07:02,639 --> 00:07:06,839
which kind of popularized this concept

00:07:04,289 --> 00:07:08,249
you will have two different virtual

00:07:06,839 --> 00:07:09,900
trees on the right there's you know a

00:07:08,249 --> 00:07:12,629
bunch of test cases maybe a div and a

00:07:09,900 --> 00:07:15,779
span on top and then when we're dipping

00:07:12,629 --> 00:07:17,550
those what we generate as our diff is a

00:07:15,779 --> 00:07:20,669
vector of patches that will get applied

00:07:17,550 --> 00:07:21,960
to a real Dom element for something

00:07:20,669 --> 00:07:24,029
simple like this there's only one patch

00:07:21,960 --> 00:07:25,589
which is a replace patch and so that's

00:07:24,029 --> 00:07:30,180
saying we're going to replace the first

00:07:25,589 --> 00:07:31,319
node with a span and what isn't shown

00:07:30,180 --> 00:07:33,240
here is the test that sort of make sure

00:07:31,319 --> 00:07:35,249
this works but hopefully you can assume

00:07:33,240 --> 00:07:37,559
that it does and the second one we're

00:07:35,249 --> 00:07:40,770
replacing the second or the second node

00:07:37,559 --> 00:07:42,809
which is indexed one so a bold the b /b

00:07:40,770 --> 00:07:44,999
with a strong right and so on there's

00:07:42,809 --> 00:07:48,029
replaces you can append children you see

00:07:44,999 --> 00:07:49,830
it at the bottom and so how it works and

00:07:48,029 --> 00:07:52,080
this might be familiar to you if you've

00:07:49,830 --> 00:07:55,529
written other maybe JavaScript front-end

00:07:52,080 --> 00:07:57,659
II libraries is in your application code

00:07:55,529 --> 00:08:00,270
in your application crate you are

00:07:57,659 --> 00:08:03,959
generating these virtual nodes you then

00:08:00,270 --> 00:08:06,300
diff two of them as you can sort of see

00:08:03,959 --> 00:08:09,060
here and then you'll get these patches

00:08:06,300 --> 00:08:11,279
and then later on in the browser you'll

00:08:09,060 --> 00:08:13,469
go to your real Dom element using Watson

00:08:11,279 --> 00:08:15,569
bind gen and say okay I want to apply

00:08:13,469 --> 00:08:16,979
this patch I want to replace this new

00:08:15,569 --> 00:08:19,110
and I want to set this attribute and

00:08:16,979 --> 00:08:20,279
then your browser is updated which

00:08:19,110 --> 00:08:22,770
you'll see a visual of in the demo

00:08:20,279 --> 00:08:25,770
hopefully and so that's the dipping

00:08:22,770 --> 00:08:27,449
piece the patch piece is again just

00:08:25,770 --> 00:08:29,550
powered by regular dress trucks right

00:08:27,449 --> 00:08:31,639
you can append children so you have a

00:08:29,550 --> 00:08:34,380
Dom node and then you append other

00:08:31,639 --> 00:08:36,389
elements to it you can truncate children

00:08:34,380 --> 00:08:38,550
so you have a Dom node with some

00:08:36,389 --> 00:08:41,219
children and let's say that your new Dom

00:08:38,550 --> 00:08:43,050
State no longer has those children there

00:08:41,219 --> 00:08:45,420
would be a truncate patch there's a

00:08:43,050 --> 00:08:47,970
replace patch where maybe a div becomes

00:08:45,420 --> 00:08:49,500
a span so you would replace that node

00:08:47,970 --> 00:08:51,209
and then there's adding removing

00:08:49,500 --> 00:08:53,490
attributes and setting texts and so

00:08:51,209 --> 00:08:56,579
effectively every single thing that ever

00:08:53,490 --> 00:08:57,659
changes in your Dom can be represented

00:08:56,579 --> 00:08:59,189
in the

00:08:57,659 --> 00:09:01,559
different mutations and you just have a

00:08:59,189 --> 00:09:03,419
vector of them and you apply them as we

00:09:01,559 --> 00:09:05,399
sort of go farther along and start to

00:09:03,419 --> 00:09:07,049
optimize things the underlying

00:09:05,399 --> 00:09:10,139
implementations of how we handle these

00:09:07,049 --> 00:09:11,609
patches will probably change or be

00:09:10,139 --> 00:09:14,339
cached in certain ways etc but

00:09:11,609 --> 00:09:20,339
effectively all changes to the Dom look

00:09:14,339 --> 00:09:21,989
something like this so as you can

00:09:20,339 --> 00:09:25,469
imagine when you're dealing with

00:09:21,989 --> 00:09:27,359
something so new is compiling Russell

00:09:25,469 --> 00:09:28,739
webassembly you can bang your head for a

00:09:27,359 --> 00:09:30,689
while things might not work as you

00:09:28,739 --> 00:09:32,609
expect and it's kind of very important

00:09:30,689 --> 00:09:34,199
that you have high test coverage so

00:09:32,609 --> 00:09:36,389
another thing that I didn't write but I

00:09:34,199 --> 00:09:40,169
get to talk about is Watson bind gen

00:09:36,389 --> 00:09:41,579
test we're used to some sorcery that I

00:09:40,169 --> 00:09:45,659
don't fully yet understand and again I

00:09:41,579 --> 00:09:47,639
don't need to because alex is here you

00:09:45,659 --> 00:09:50,059
can use gecko driver Chrome browser

00:09:47,639 --> 00:09:53,819
Safari driver compiled to webassembly

00:09:50,059 --> 00:09:56,639
run that code inside of one of these

00:09:53,819 --> 00:10:01,319
browsers and then you effectively have a

00:09:56,639 --> 00:10:02,879
rust test harness running and so I

00:10:01,319 --> 00:10:04,859
probably should have gotten screech out

00:10:02,879 --> 00:10:06,809
of output but I can run all these tests

00:10:04,859 --> 00:10:08,669
they run in the browser I'm dipping and

00:10:06,809 --> 00:10:10,319
patching real Dom nodes and then I can

00:10:08,669 --> 00:10:15,149
assert to make sure as we're doing kind

00:10:10,319 --> 00:10:17,549
of on the left here that I get some node

00:10:15,149 --> 00:10:21,059
in the Dom that matches what I tried to

00:10:17,549 --> 00:10:22,889
patch and so it's not like you know

00:10:21,059 --> 00:10:24,329
theoretical this works in memory and I'm

00:10:22,889 --> 00:10:26,429
hoping it works in the browser we can

00:10:24,329 --> 00:10:32,999
actually test against the browser using

00:10:26,429 --> 00:10:36,179
the awesome tooling that exists unit

00:10:32,999 --> 00:10:37,889
testings another focus where oh one

00:10:36,179 --> 00:10:40,079
thing that I quickly found is waiting a

00:10:37,889 --> 00:10:42,019
few seconds for your code to recompile

00:10:40,079 --> 00:10:44,729
and then refreshing your browser is

00:10:42,019 --> 00:10:46,349
incredibly frustrating and makes you

00:10:44,729 --> 00:10:48,899
want to flip your laptop over and so

00:10:46,349 --> 00:10:51,419
that quickly inspired testing tooling

00:10:48,899 --> 00:10:55,379
and so what's kind of highlighted here

00:10:51,419 --> 00:10:57,089
is again since all of your HTML your

00:10:55,379 --> 00:10:59,279
entire web application is just a bunch

00:10:57,089 --> 00:11:01,619
of virtual nodes that have virtual node

00:10:59,279 --> 00:11:02,609
children you can define methods that

00:11:01,619 --> 00:11:05,129
allow you access to some different

00:11:02,609 --> 00:11:07,649
virtual nodes and so here we're like

00:11:05,129 --> 00:11:10,920
rendering some view we're looking at the

00:11:07,649 --> 00:11:14,000
children we're asserting that there is

00:11:10,920 --> 00:11:16,860
a child at index zero with certain texts

00:11:14,000 --> 00:11:18,870
and sort of making sure that all the

00:11:16,860 --> 00:11:21,600
rendering works and that would work for

00:11:18,870 --> 00:11:23,940
any component that you're working on and

00:11:21,600 --> 00:11:26,339
so because it's all again just data

00:11:23,940 --> 00:11:27,630
behind it you can implement whatever

00:11:26,339 --> 00:11:28,649
method you want and test against

00:11:27,630 --> 00:11:31,170
whatever you want so testing actually

00:11:28,649 --> 00:11:33,360
ends up being very easy and you don't

00:11:31,170 --> 00:11:37,500
have to refresh the browser and get

00:11:33,360 --> 00:11:40,079
upset so one other interesting piece of

00:11:37,500 --> 00:11:43,589
percy that is getting worked on a bit

00:11:40,079 --> 00:11:45,449
now is CSS and rust so here's a

00:11:43,589 --> 00:11:46,560
highlight of it before we sort of talk

00:11:45,449 --> 00:11:49,500
about the underlying implementation

00:11:46,560 --> 00:11:51,690
details which are probably been more

00:11:49,500 --> 00:11:54,329
interesting so at the top here is like a

00:11:51,690 --> 00:11:55,560
quick screenshot from some like very

00:11:54,329 --> 00:11:57,720
simple web app that we'll look at

00:11:55,560 --> 00:11:59,670
towards the end and as you can see

00:11:57,720 --> 00:12:01,500
there's this beautiful gradient which I

00:11:59,670 --> 00:12:04,920
did not take from Yahoo and I did not

00:12:01,500 --> 00:12:06,240
just change the colors and at the bottom

00:12:04,920 --> 00:12:10,490
here's sort of the code that powers it

00:12:06,240 --> 00:12:13,440
right so there's this CSS macro that has

00:12:10,490 --> 00:12:21,240
this align items you know the background

00:12:13,440 --> 00:12:23,160
has a linear gradient and then what

00:12:21,240 --> 00:12:26,070
we'll sort of do with that is there's a

00:12:23,160 --> 00:12:30,750
procedural macro that runs a compile

00:12:26,070 --> 00:12:33,420
time and we take that CSS we'll grab it

00:12:30,750 --> 00:12:35,220
out there's a global counter that says

00:12:33,420 --> 00:12:36,779
how many of these CS flex CSS blocks

00:12:35,220 --> 00:12:38,430
have we seen so this is the first one

00:12:36,779 --> 00:12:41,850
right so we'll generate a class called

00:12:38,430 --> 00:12:44,579
CSS zero if you can kind of see in the

00:12:41,850 --> 00:12:46,260
example on the right at the bottom the

00:12:44,579 --> 00:12:49,500
test cases so there's a class called CSS

00:12:46,260 --> 00:12:52,019
RS zero and that will then have all the

00:12:49,500 --> 00:12:53,970
CSS that you defines then we'll get CSS

00:12:52,019 --> 00:12:55,920
RS one that will have CSS and we'll add

00:12:53,970 --> 00:12:58,110
sort of all this into one large growing

00:12:55,920 --> 00:13:01,290
string we'll write that to a file that

00:12:58,110 --> 00:13:04,050
you specify with a environment variable

00:13:01,290 --> 00:13:06,660
called output CSS and so at compile time

00:13:04,050 --> 00:13:08,899
a procedural macro grabs all of your CSS

00:13:06,660 --> 00:13:11,339
calls generates a bunch of classes and

00:13:08,899 --> 00:13:13,529
writes them to a file and so then when

00:13:11,339 --> 00:13:14,790
you're running your application you are

00:13:13,529 --> 00:13:18,510
only sending down

00:13:14,790 --> 00:13:21,360
I guess class names that your virtual

00:13:18,510 --> 00:13:22,709
nodes are using and the CSS will

00:13:21,360 --> 00:13:24,750
obviously have the same classes of names

00:13:22,709 --> 00:13:27,899
and it works and so you can write your

00:13:24,750 --> 00:13:30,750
CSS right next to your rush views which

00:13:27,899 --> 00:13:31,980
is especially useful for people who want

00:13:30,750 --> 00:13:33,000
to sort of publish things to the web but

00:13:31,980 --> 00:13:35,819
you don't want to learn a bunch of stuff

00:13:33,000 --> 00:13:37,589
like less or sass or all of these tools

00:13:35,819 --> 00:13:39,480
that compile down to CSS you can just

00:13:37,589 --> 00:13:42,259
kind of write a little CSS block right

00:13:39,480 --> 00:13:44,250
next to what is using it and it works

00:13:42,259 --> 00:13:46,129
using this in production right now and

00:13:44,250 --> 00:13:49,259
it feels very nice the reason that I

00:13:46,129 --> 00:13:50,370
know that I like it is when I start from

00:13:49,259 --> 00:13:52,529
scratch I still go in this direction

00:13:50,370 --> 00:13:54,839
versus sort of walking towards something

00:13:52,529 --> 00:13:57,209
that I'm more used to so I'm gonna keep

00:13:54,839 --> 00:13:59,939
exploring that and this is just another

00:13:57,209 --> 00:14:02,730
example of it where you have your navbar

00:13:59,939 --> 00:14:05,639
CSS here which will eventually just get

00:14:02,730 --> 00:14:08,490
turned into a static string CSS rs0 that

00:14:05,639 --> 00:14:11,550
we looked at before and then here you

00:14:08,490 --> 00:14:14,310
have a div with a class that has that

00:14:11,550 --> 00:14:16,819
same static string as the class and you

00:14:14,310 --> 00:14:19,470
know the macro will parse that into the

00:14:16,819 --> 00:14:21,899
class property in the virtual node and

00:14:19,470 --> 00:14:24,600
so then when you render this HTML in the

00:14:21,899 --> 00:14:25,949
browser you end up with a div with the

00:14:24,600 --> 00:14:27,839
right class and then you're sending down

00:14:25,949 --> 00:14:33,329
that CSS and it sort of hooks up

00:14:27,839 --> 00:14:35,459
together so that should be CSS and so

00:14:33,329 --> 00:14:36,990
one other sort of piece that powers the

00:14:35,459 --> 00:14:40,740
puzzle that we'll look at it at the end

00:14:36,990 --> 00:14:42,269
is the router so actually for this piece

00:14:40,740 --> 00:14:43,559
there are a lot of routers that are

00:14:42,269 --> 00:14:45,480
really interesting that are being worked

00:14:43,559 --> 00:14:48,149
on now but they're mostly for back-end

00:14:45,480 --> 00:14:50,100
applications like I know rocket has one

00:14:48,149 --> 00:14:54,089
and sort of other back-end frameworks

00:14:50,100 --> 00:14:55,949
use routers the not necessarily issue

00:14:54,089 --> 00:14:58,319
but difference is that front-end routing

00:14:55,949 --> 00:14:59,939
is largely similar but it also has very

00:14:58,319 --> 00:15:02,009
different concerns like there's no

00:14:59,939 --> 00:15:04,259
author is a or there's authorization but

00:15:02,009 --> 00:15:05,639
there aren't any headers you're not

00:15:04,259 --> 00:15:08,129
dealing with sort of a request response

00:15:05,639 --> 00:15:10,920
cycle in that way and so you need

00:15:08,129 --> 00:15:13,589
something that yes matches pads against

00:15:10,920 --> 00:15:16,500
incoming paths but has whole different

00:15:13,589 --> 00:15:19,559
guards against it and so there is

00:15:16,500 --> 00:15:21,269
definitely a lot of room to make more

00:15:19,559 --> 00:15:24,420
progress on the routing side what we do

00:15:21,269 --> 00:15:28,980
have now so far is sort of a typesafe

00:15:24,420 --> 00:15:32,069
router struct in a ref struct where I

00:15:28,980 --> 00:15:33,660
might specify slash users slash ID as

00:15:32,069 --> 00:15:36,600
you can kind of see on the right right

00:15:33,660 --> 00:15:38,140
in the middle and so we'll see that

00:15:36,600 --> 00:15:40,720
right and

00:15:38,140 --> 00:15:44,019
at the top our struct has our view has

00:15:40,720 --> 00:15:46,329
an idea of a u-32 and so we won't match

00:15:44,019 --> 00:15:48,310
a route that slash user slash foo near

00:15:46,329 --> 00:15:53,829
the bottom because foo is obviously not

00:15:48,310 --> 00:15:55,480
a u-32 but we would match / user / 5

00:15:53,829 --> 00:15:57,490
because that is and so the nice part

00:15:55,480 --> 00:15:59,649
there is if maybe some of you do web

00:15:57,490 --> 00:16:01,480
development use Java Script you find

00:15:59,649 --> 00:16:03,070
yourself repeatedly going through a

00:16:01,480 --> 00:16:05,019
bunch of if statement hurdles to make

00:16:03,070 --> 00:16:07,420
sure that you're matching against the

00:16:05,019 --> 00:16:10,149
sort of right input that you want and

00:16:07,420 --> 00:16:11,709
handling all the other stuff whereas do

00:16:10,149 --> 00:16:14,110
to rest type safety you can just

00:16:11,709 --> 00:16:16,240
completely trust that you will never

00:16:14,110 --> 00:16:19,360
have to handle anything that should not

00:16:16,240 --> 00:16:21,490
be there not a security expert don't

00:16:19,360 --> 00:16:22,750
trust me there but you will usually not

00:16:21,490 --> 00:16:24,880
have to handle anything that should not

00:16:22,750 --> 00:16:26,890
be there unless there's some weird you

00:16:24,880 --> 00:16:30,390
know edge case where someone's giving

00:16:26,890 --> 00:16:32,620
you a really big number or something and

00:16:30,390 --> 00:16:34,660
then so that sort of looks like this

00:16:32,620 --> 00:16:37,209
where you have a router which has a

00:16:34,660 --> 00:16:40,660
vector of routes and then you would add

00:16:37,209 --> 00:16:41,769
routes to it by pushing them and then

00:16:40,660 --> 00:16:44,649
eventually you call a view method

00:16:41,769 --> 00:16:46,570
whenever you change I don't want to talk

00:16:44,649 --> 00:16:48,670
too deeply into sort of the web but in

00:16:46,570 --> 00:16:50,290
your browser URL you have sort of the

00:16:48,670 --> 00:16:51,760
path that you're at and you'll match

00:16:50,290 --> 00:16:53,199
that against your router and you'll say

00:16:51,760 --> 00:16:56,260
give me the view that's associated with

00:16:53,199 --> 00:16:58,000
that which is an option against the box

00:16:56,260 --> 00:16:59,769
sort of straight object you'll get back

00:16:58,000 --> 00:17:01,360
the view you'll render that view and

00:16:59,769 --> 00:17:04,780
then you'll display to the user what

00:17:01,360 --> 00:17:06,459
they should see and then sort of on the

00:17:04,780 --> 00:17:08,079
right side there's the actual route

00:17:06,459 --> 00:17:11,230
which is your route definition that

00:17:08,079 --> 00:17:12,819
might be like slash user slash ID the

00:17:11,230 --> 00:17:17,410
parameter types as we looked at before

00:17:12,819 --> 00:17:18,939
ID might be a u32 you might have a

00:17:17,410 --> 00:17:20,919
string for another parameter etc and

00:17:18,939 --> 00:17:23,439
then your view creator function which

00:17:20,919 --> 00:17:25,660
takes in all the parameters that your

00:17:23,439 --> 00:17:28,059
view was provided so an ID with an

00:17:25,660 --> 00:17:32,740
unsigned in and everything else and then

00:17:28,059 --> 00:17:34,360
generates a a box view that you can then

00:17:32,740 --> 00:17:36,640
render and a view is just a trait that

00:17:34,360 --> 00:17:42,400
percy provides that has a render method

00:17:36,640 --> 00:17:44,559
some other niceties so that's a lot of

00:17:42,400 --> 00:17:47,290
the underlying pieces of it some of the

00:17:44,559 --> 00:17:49,059
longer term goals are to be able to use

00:17:47,290 --> 00:17:51,490
rusts and web assembly for web dev

00:17:49,059 --> 00:17:52,300
without using a lot of concepts and so a

00:17:51,490 --> 00:17:54,940
lot of these sort

00:17:52,300 --> 00:17:58,030
philosophy behind the tooling that Percy

00:17:54,940 --> 00:18:00,790
provides is not needing to learn a bunch

00:17:58,030 --> 00:18:03,820
of terms that we've made up and so you

00:18:00,790 --> 00:18:05,800
kind of there are there industry

00:18:03,820 --> 00:18:07,930
web dev standards now like a virtual DOM

00:18:05,800 --> 00:18:09,820
and different patching and we try to

00:18:07,930 --> 00:18:15,640
sort of reuse those and not create new

00:18:09,820 --> 00:18:17,140
ones which can lead to not inventing

00:18:15,640 --> 00:18:18,460
like really interesting things but

00:18:17,140 --> 00:18:21,880
that's kind of the point I like when my

00:18:18,460 --> 00:18:23,500
stuff is boring and so the goal here is

00:18:21,880 --> 00:18:26,230
to be sort of the underlying tooling

00:18:23,500 --> 00:18:27,700
that can power other frameworks that

00:18:26,230 --> 00:18:29,140
have these interesting ideas I might

00:18:27,700 --> 00:18:31,390
require a bit more of an investment if

00:18:29,140 --> 00:18:34,090
you want them but if you don't then you

00:18:31,390 --> 00:18:37,450
just use the underlying tooling or swap

00:18:34,090 --> 00:18:39,100
out other things right another piece of

00:18:37,450 --> 00:18:41,860
it is to have this be heavily trait

00:18:39,100 --> 00:18:43,450
based and so one of the beauties of rust

00:18:41,860 --> 00:18:46,270
that I found so far and my short time

00:18:43,450 --> 00:18:47,620
using it is the trait system where let's

00:18:46,270 --> 00:18:49,570
say the virtual node right now is its

00:18:47,620 --> 00:18:52,750
own struct so you kind of can't really

00:18:49,570 --> 00:18:55,090
use a lot of what percy offers unless

00:18:52,750 --> 00:18:57,490
you're using that virtual node but as we

00:18:55,090 --> 00:19:00,310
move that to instead be a trait then

00:18:57,490 --> 00:19:02,050
someone can come and say wait this diff

00:19:00,310 --> 00:19:03,490
patch algorithm that even piment is

00:19:02,050 --> 00:19:05,110
terrible we'll have a better one and

00:19:03,490 --> 00:19:06,310
then you can just go and use that

00:19:05,110 --> 00:19:07,960
without having to rewrite any of your

00:19:06,310 --> 00:19:10,180
application because it implements the

00:19:07,960 --> 00:19:13,330
same virtual node trait that you're

00:19:10,180 --> 00:19:15,100
already using there's also the percy

00:19:13,330 --> 00:19:17,830
book which we've started writing using

00:19:15,100 --> 00:19:19,030
md book another shout out to awesome

00:19:17,830 --> 00:19:21,790
bind gen because I just copied your

00:19:19,030 --> 00:19:25,570
Travis yml and it got that working

00:19:21,790 --> 00:19:27,250
pretty quick and so one other piece

00:19:25,570 --> 00:19:29,860
before I think we dumped it to the right

00:19:27,250 --> 00:19:31,450
the demo is contributing so if you're

00:19:29,860 --> 00:19:32,770
interested in doing more web assembly

00:19:31,450 --> 00:19:34,750
stuff obviously I'll be here and we can

00:19:32,770 --> 00:19:36,970
sort of talk about how more-but works

00:19:34,750 --> 00:19:39,400
under the hood but the best way to sort

00:19:36,970 --> 00:19:40,960
of contribute is the world world driven

00:19:39,400 --> 00:19:43,840
development way which is try and build

00:19:40,960 --> 00:19:45,070
something for the web in rust open

00:19:43,840 --> 00:19:47,830
issues about the stumbling block so you

00:19:45,070 --> 00:19:49,630
run into what's not fun what did it make

00:19:47,830 --> 00:19:51,480
sense and then we'll sort of fix those

00:19:49,630 --> 00:19:54,010
one by one and eventually hopefully

00:19:51,480 --> 00:19:56,530
there are a lot of options out there for

00:19:54,010 --> 00:20:01,270
you to build real web applications with

00:19:56,530 --> 00:20:03,720
rust and demo time where's my police

00:20:01,270 --> 00:20:03,720
claps on

00:20:11,860 --> 00:20:20,690
okay so I have a really really basic web

00:20:16,070 --> 00:20:22,190
app that I threw together here what you

00:20:20,690 --> 00:20:24,080
kind of saw in the screenshot and we're

00:20:22,190 --> 00:20:26,450
gonna add a piece to it in the few

00:20:24,080 --> 00:20:30,080
minutes we have right so I'll zoom in a

00:20:26,450 --> 00:20:35,690
little bit so very simple there's that

00:20:30,080 --> 00:20:37,779
navbar that we rendered yeah how do I do

00:20:35,690 --> 00:20:37,779
that

00:20:38,110 --> 00:20:47,600
I'm also working on a PHP to Russ

00:20:41,240 --> 00:21:01,549
compiler good enough to command what I'm

00:20:47,600 --> 00:21:14,269
gonna go command help search straight up

00:21:01,549 --> 00:21:16,929
disappear there we go sorry what is that

00:21:14,269 --> 00:21:19,519
oh dear

00:21:16,929 --> 00:21:33,470
view okay we've got some help from the

00:21:19,519 --> 00:21:37,010
audience some pretty smart out there so

00:21:33,470 --> 00:21:39,289
that nav ya

00:21:37,010 --> 00:21:50,809
so that nav bar that you saw if I can

00:21:39,289 --> 00:21:52,190
type properly nice there you go yes

00:21:50,809 --> 00:21:54,470
perfect

00:21:52,190 --> 00:21:57,440
so the nav bar that you saw sort of

00:21:54,470 --> 00:21:58,970
looks like this where presentation modes

00:21:57,440 --> 00:22:01,309
a little weird but I'll get used to it

00:21:58,970 --> 00:22:03,350
you have a nav bar struct which has an

00:22:01,309 --> 00:22:04,789
active page and some reference to a

00:22:03,350 --> 00:22:06,860
store which holds our state and that's

00:22:04,789 --> 00:22:10,070
how you sort of get access to different

00:22:06,860 --> 00:22:14,679
state and implement view which has a

00:22:10,070 --> 00:22:14,679
render function and so we'll get the

00:22:16,180 --> 00:22:20,870
the navbar item which I'll go back to so

00:22:19,400 --> 00:22:22,790
you can actually see it but we generate

00:22:20,870 --> 00:22:25,070
that by passing in the path for the

00:22:22,790 --> 00:22:26,809
route that it will link to which is

00:22:25,070 --> 00:22:28,090
slash contributors the text for the

00:22:26,809 --> 00:22:30,950
navbar I'd and which is contributors

00:22:28,090 --> 00:22:33,230
some extra styling which is in here

00:22:30,950 --> 00:22:36,200
margin-left:auto and then we will rend

00:22:33,230 --> 00:22:37,580
our navbar with our home button and our

00:22:36,200 --> 00:22:40,580
contributor button and then if we go

00:22:37,580 --> 00:22:42,770
back into the browser you see the

00:22:40,580 --> 00:22:44,420
contributor is here which is just that

00:22:42,770 --> 00:22:47,450
component that we rendered and embedded

00:22:44,420 --> 00:22:49,250
and then the home which just links died

00:22:47,450 --> 00:22:52,910
somewhere for web app so if I click on

00:22:49,250 --> 00:22:54,200
this as you saw it said slash

00:22:52,910 --> 00:22:55,760
contributors so it goes like the

00:22:54,200 --> 00:22:58,220
contributors are out like pretend that

00:22:55,760 --> 00:23:01,520
looks beautiful and then this would come

00:22:58,220 --> 00:23:12,650
back here and then another piece of it

00:23:01,520 --> 00:23:14,210
is yeah yes good there yeah so again

00:23:12,650 --> 00:23:15,980
since you're in rush you have everything

00:23:14,210 --> 00:23:18,710
that you'd expect right so there's a

00:23:15,980 --> 00:23:21,290
state struct which for something that's

00:23:18,710 --> 00:23:22,850
a navbar and two buttons doesn't have a

00:23:21,290 --> 00:23:25,340
lot but there's a click count which is a

00:23:22,850 --> 00:23:27,320
reference counts itself and we can

00:23:25,340 --> 00:23:33,020
render based on that click count so if

00:23:27,320 --> 00:23:36,920
we go to the home page view you can see

00:23:33,020 --> 00:23:41,179
here that will use the click count in

00:23:36,920 --> 00:23:42,740
our rendering and then if we increment

00:23:41,179 --> 00:23:43,820
the click count with this button the

00:23:42,740 --> 00:23:46,280
click count will increment in the

00:23:43,820 --> 00:23:48,320
browser and so one piece that will

00:23:46,280 --> 00:23:51,800
quickly add while there are a few

00:23:48,320 --> 00:23:53,390
minutes left is the special friend which

00:23:51,800 --> 00:23:54,860
right now just increments the click

00:23:53,390 --> 00:23:56,720
count but instead we'll make it show the

00:23:54,860 --> 00:23:58,250
special friend so how we'll do that is

00:23:56,720 --> 00:24:02,240
we'll come back into here I'll go to the

00:23:58,250 --> 00:24:05,170
correct project and first we'll add a

00:24:02,240 --> 00:24:07,580
new message type so this is just an

00:24:05,170 --> 00:24:09,290
annuity num forever until I came here

00:24:07,580 --> 00:24:13,840
and a lot of people look to me crazy so

00:24:09,290 --> 00:24:15,210
I guess it's called the noon I was right

00:24:13,840 --> 00:24:15,840
told you

00:24:15,210 --> 00:24:18,410
[Laughter]

00:24:15,840 --> 00:24:20,000
[Applause]

00:24:18,410 --> 00:24:22,250
so we'll add this and I left a comment

00:24:20,000 --> 00:24:24,560
at the bottom in case I forgot but we'll

00:24:22,250 --> 00:24:26,270
add this show special friend variant

00:24:24,560 --> 00:24:28,070
right and then we'll go to where we

00:24:26,270 --> 00:24:29,240
handle all of our message variants and

00:24:28,070 --> 00:24:31,190
if you haven't written something like

00:24:29,240 --> 00:24:36,020
react before or if you have rather this

00:24:31,190 --> 00:24:37,130
is kind of like state dispatch where you

00:24:36,020 --> 00:24:40,250
have messages and then you'll have

00:24:37,130 --> 00:24:42,980
handler for them so we'll go to our

00:24:40,250 --> 00:24:45,890
state here and then somewhere in this

00:24:42,980 --> 00:24:48,050
blob we handle messages right so there's

00:24:45,890 --> 00:24:51,920
this incoming message for showing a

00:24:48,050 --> 00:24:53,360
special friends and that'll call I also

00:24:51,920 --> 00:24:54,650
threw this at the bottom because I

00:24:53,360 --> 00:24:56,630
forgot

00:24:54,650 --> 00:24:58,420
so that'll set state dot show special

00:24:56,630 --> 00:25:02,150
friend to true

00:24:58,420 --> 00:25:03,830
so we're onto something so now whenever

00:25:02,150 --> 00:25:05,510
we send a show special friend method our

00:25:03,830 --> 00:25:07,340
state store will grab that and it'll say

00:25:05,510 --> 00:25:11,960
what do we want to do okay we want to

00:25:07,340 --> 00:25:15,530
set show special friend to true so now

00:25:11,960 --> 00:25:19,190
if we go back to our view for the home

00:25:15,530 --> 00:25:20,540
page here we have that show special

00:25:19,190 --> 00:25:22,400
friend button that we saw before right

00:25:20,540 --> 00:25:25,430
you see the text show special friends

00:25:22,400 --> 00:25:27,800
it's sending a click message to our

00:25:25,430 --> 00:25:31,480
store which wraps that state instead

00:25:27,800 --> 00:25:37,400
we'll make it send a show special friend

00:25:31,480 --> 00:25:40,900
message and I will grab this so I don't

00:25:37,400 --> 00:25:45,110
have to think and talk paste it here

00:25:40,900 --> 00:25:47,960
delete this hit a little that and then

00:25:45,110 --> 00:25:49,250
we are setting special friend to be a

00:25:47,960 --> 00:25:51,620
different component if it's true so

00:25:49,250 --> 00:25:53,150
you'll see there on line 33 our special

00:25:51,620 --> 00:25:58,490
friend is just an empty div this is

00:25:53,150 --> 00:26:02,810
starting to sound creepy but if show

00:25:58,490 --> 00:26:05,450
special friend is true so if it returns

00:26:02,810 --> 00:26:07,580
true then we'll instead show some image

00:26:05,450 --> 00:26:10,640
which I recognize how creepy this sounds

00:26:07,580 --> 00:26:13,400
at this moment and so now if we just

00:26:10,640 --> 00:26:20,210
compile this and I didn't make any

00:26:13,400 --> 00:26:21,770
mistakes yeah so the server actually

00:26:20,210 --> 00:26:23,720
takes a few seconds to compile now

00:26:21,770 --> 00:26:26,950
whoever was talking about active earlier

00:26:23,720 --> 00:26:30,309
I'm using active web so let's talk

00:26:26,950 --> 00:26:33,960
but it should be listening on port 78 78

00:26:30,309 --> 00:26:37,149
so let's I'm gonna make this thousand

00:26:33,960 --> 00:26:54,070
refresh click a bunch of times and show

00:26:37,149 --> 00:26:55,570
our special friends cool so the last

00:26:54,070 --> 00:26:59,260
piece that we'll talk about really

00:26:55,570 --> 00:27:00,460
quickly before I go is sort of a very

00:26:59,260 --> 00:27:01,870
high-level overview of how this works

00:27:00,460 --> 00:27:04,870
and again if you want to understand it a

00:27:01,870 --> 00:27:11,100
bit further we can talk out there but

00:27:04,870 --> 00:27:11,100
essentially from top to bottom oh man

00:27:11,250 --> 00:27:19,630
like that mind in my in my head or the

00:27:14,649 --> 00:27:23,320
voice in my head ok so so we have an

00:27:19,630 --> 00:27:24,820
activist web server here which will

00:27:23,320 --> 00:27:26,440
receive a request and then it will

00:27:24,820 --> 00:27:31,240
return in XHTML right so what does that

00:27:26,440 --> 00:27:33,519
look like so that is here where we have

00:27:31,240 --> 00:27:37,000
just some HTML file that it's reading

00:27:33,519 --> 00:27:38,409
from disk and on line 11 it will insert

00:27:37,000 --> 00:27:40,539
HTML from the server so it will render

00:27:38,409 --> 00:27:41,470
the application to a string on the back

00:27:40,539 --> 00:27:44,320
end because the server side rendering

00:27:41,470 --> 00:27:46,539
it'll inject it into this HTML file and

00:27:44,320 --> 00:27:48,250
then send that down so right away even

00:27:46,539 --> 00:27:51,190
if you had JavaScript and web assembly

00:27:48,250 --> 00:27:52,659
disabled you'll see something then

00:27:51,190 --> 00:27:58,120
you'll see at the bottom on line 22

00:27:52,659 --> 00:27:59,919
there's this bundle j/s script which and

00:27:58,120 --> 00:28:01,889
also this sort of isomorphic line script

00:27:59,919 --> 00:28:04,510
which effectively these two scripts run

00:28:01,889 --> 00:28:08,019
they'll initialize the web assembly and

00:28:04,510 --> 00:28:09,820
so the client gets this index.html and

00:28:08,019 --> 00:28:11,380
then it sort of stopped writing web

00:28:09,820 --> 00:28:13,720
assembly and web somebody takes over

00:28:11,380 --> 00:28:15,700
from there right the problem is let's

00:28:13,720 --> 00:28:17,409
say that yours as you saw with that sort

00:28:15,700 --> 00:28:20,200
of a knit thing that we did right we can

00:28:17,409 --> 00:28:23,470
say a knit mm the server will see that

00:28:20,200 --> 00:28:26,700
it'll send the page down with mm I will

00:28:23,470 --> 00:28:26,700
switch to the right project and

00:28:31,549 --> 00:28:37,260
they're you so you see it looked at the

00:28:34,590 --> 00:28:40,200
query string you've got the anit flag it

00:28:37,260 --> 00:28:43,019
unwrapped it and then somewhere over

00:28:40,200 --> 00:28:45,480
here ish it will create an application

00:28:43,019 --> 00:28:47,399
with that initial value right so then

00:28:45,480 --> 00:28:49,200
how does the client know what to do from

00:28:47,399 --> 00:28:50,909
there how does it not just start from

00:28:49,200 --> 00:28:52,409
zero and then your page quickly flashes

00:28:50,909 --> 00:28:57,059
and so that's where an index.html

00:28:52,409 --> 00:28:59,460
there's the nice part of the initial

00:28:57,059 --> 00:29:01,230
State JSON so on the server we'll

00:28:59,460 --> 00:29:03,870
replace that initial State JSON with

00:29:01,230 --> 00:29:05,460
just a JSON string of the initial State

00:29:03,870 --> 00:29:06,990
you could also use any other

00:29:05,460 --> 00:29:08,309
serialization you want I'm assuming

00:29:06,990 --> 00:29:10,019
you're using sterday so you could have

00:29:08,309 --> 00:29:13,740
like a binary encoded thing or something

00:29:10,019 --> 00:29:15,269
and then on the client side since this

00:29:13,740 --> 00:29:17,490
is all rest code running we're also

00:29:15,269 --> 00:29:19,769
using surday to deserialize that back

00:29:17,490 --> 00:29:21,330
into your state struct and so all you do

00:29:19,769 --> 00:29:23,309
is just send down what you want

00:29:21,330 --> 00:29:24,990
initially the client when it first

00:29:23,309 --> 00:29:27,240
starts on the web assembly side will see

00:29:24,990 --> 00:29:28,740
that deserialize it and then have the

00:29:27,240 --> 00:29:30,059
exact same state that your server

00:29:28,740 --> 00:29:31,919
started off with and so that's how

00:29:30,059 --> 00:29:33,419
you're able to seamlessly pickup with

00:29:31,919 --> 00:29:35,190
the same state that your back-end had

00:29:33,419 --> 00:29:41,370
and you don't just see the number change

00:29:35,190 --> 00:29:42,510
from like 2000 to 0 and I will just show

00:29:41,370 --> 00:29:52,679
you where that happens and then we're

00:29:42,510 --> 00:29:54,419
done yes it is all on github and add

00:29:52,679 --> 00:29:55,500
some contributions use it there's a

00:29:54,419 --> 00:30:00,679
bunch of instructions on sort of how to

00:29:55,500 --> 00:30:00,679
get started and so the last piece is

00:30:02,029 --> 00:30:07,350
here where we'll pass in that initial

00:30:06,360 --> 00:30:10,260
state string that we read from the

00:30:07,350 --> 00:30:12,480
browser create an application out of

00:30:10,260 --> 00:30:13,950
subscriber so that anytime state changes

00:30:12,480 --> 00:30:15,299
you can do something in this case we

00:30:13,950 --> 00:30:18,149
call some update method to update the

00:30:15,299 --> 00:30:20,639
Dom and then we return this client to

00:30:18,149 --> 00:30:23,039
the j/s side and then the j/s just

00:30:20,639 --> 00:30:25,549
starts it in you're done and that should

00:30:23,039 --> 00:30:25,549
do it

00:30:25,960 --> 00:30:39,579

YouTube URL: https://www.youtube.com/watch?v=M6RLvGqQU10


