Title: Lightning Talks: Rustbots - Robots powered by Rust — Rahul Thakoor
Publication date: 2018-11-28
Playlist: Rust Belt Rust 2018
Description: 
	This lightning talk proposes developing a framework similar to Johnny-Five to make using Rust for Robotics and IoT easier. Leveraging the embedded-hal ecosystem, we could develop a framework that can run on microcontrollers like ARM M0 cortex to single board computers like Raspberry Pi, all using embedded-hal compatible platform agnostic drivers.  

---

Rahul is a medical graduate and developer from Mauritius. He recently participated in Increasing Rust's Reach 2018. He is passionate about public health, open source software, physical computing, and open educational resources. He enjoys writing beginner tutorials and teaching programming and also hosts the Nodebots chapter in Mauritius.
Captions: 
	00:00:07,130 --> 00:00:12,230
hey everyone

00:00:08,970 --> 00:00:16,590
so is anyone familiar with Johnny Five

00:00:12,230 --> 00:00:19,860
yes so the idea is now that we have the

00:00:16,590 --> 00:00:21,930
embedded whole like Jonathan explained

00:00:19,860 --> 00:00:24,779
this morning we have ma Neutron so if

00:00:21,930 --> 00:00:26,700
someone writes drivers for a particular

00:00:24,779 --> 00:00:28,320
device that's an accelerometer or

00:00:26,700 --> 00:00:30,509
perhaps a temperature sensor

00:00:28,320 --> 00:00:33,630
the idea is leveraging all of that and

00:00:30,509 --> 00:00:36,360
making a framework similar to John 25 so

00:00:33,630 --> 00:00:38,130
we could make it very interesting to get

00:00:36,360 --> 00:00:41,970
started with rust on embedded devices

00:00:38,130 --> 00:00:45,630
like microcontrollers on cortex or we

00:00:41,970 --> 00:00:47,730
know anyone uses Arduino so for all we

00:00:45,630 --> 00:00:50,160
know we could have a different one so

00:00:47,730 --> 00:00:51,990
the run the rest code will run directly

00:00:50,160 --> 00:00:54,510
on the ordinary itself it will run on

00:00:51,990 --> 00:00:56,670
your your computer it's based on a

00:00:54,510 --> 00:00:57,000
protocol called formatter everyone use

00:00:56,670 --> 00:01:03,120
it

00:00:57,000 --> 00:01:06,060
anyone know so yes and if someone wants

00:01:03,120 --> 00:01:08,040
to happy with this perhaps I have you

00:01:06,060 --> 00:01:11,130
you can still get started with embedded

00:01:08,040 --> 00:01:13,560
whole so the rest embedded group has a

00:01:11,130 --> 00:01:16,950
very good guide about this you can write

00:01:13,560 --> 00:01:19,829
some drivers and I'm hoping like to make

00:01:16,950 --> 00:01:21,810
a very standard API so there are

00:01:19,829 --> 00:01:22,920
different types of accelerometers you

00:01:21,810 --> 00:01:24,929
could just have a standard way of

00:01:22,920 --> 00:01:27,329
getting the data from all of that

00:01:24,929 --> 00:01:28,889
independent of the drivers itself and

00:01:27,329 --> 00:01:31,819
that's how it would work

00:01:28,889 --> 00:01:31,819
thank you

00:01:34,810 --> 00:01:36,869

YouTube URL: https://www.youtube.com/watch?v=HoD-PrkaGUU


