Title: RustFest Paris 2018 -  Yew a Rust+WebAssembly framework for client-side web apps by Denis Kolodin
Publication date: 2018-05-26
Playlist: RustFest Paris 2018
Description: 
	Here is Denis Kolodin for you Talk
about his framework called 'yew'
His daily work fits
to a fury of bits
and a Rust blockchain speed-trading crew

This is a talk about the architecture of yew â€” a Rust framework for frontend development, inspired by Elm and ReactJS and designed for creating single-page webapps with Rust. You will get to know how it was created: wasm compilation issues, JSX-like templates created with a pure Rust macro, how lifetime rules helps to avoid copying of the model, and how to create a framework without a garbage collector to compete in the JavaScript world.

(Limerick by @llogiq)

https://paris.rustfest.eu/sessions/yew-the-rust-webassembly-web-app-framework
Captions: 
	00:00:04,530 --> 00:00:09,560
here is Dennis coloring for you

00:00:16,340 --> 00:00:23,279
talking about his framework called you

00:00:19,520 --> 00:00:30,480
his daily work fits to a fury of bits

00:00:23,279 --> 00:00:31,759
and rust blockchains be trading crew hi

00:00:30,480 --> 00:00:36,270
Ron

00:00:31,759 --> 00:00:40,829
yes I'm Denis Carradine and I work at

00:00:36,270 --> 00:00:44,100
axonal project in billiary company and

00:00:40,829 --> 00:00:45,989
today I'm here to introduce - which is

00:00:44,100 --> 00:00:50,340
something special I will show you how to

00:00:45,989 --> 00:00:53,190
create front-end application completely

00:00:50,340 --> 00:00:57,360
with rust and no one line of JavaScript

00:00:53,190 --> 00:01:04,530
code our agenda for today is quite

00:00:57,360 --> 00:01:06,990
simple at first I have I also you what

00:01:04,530 --> 00:01:12,540
is you will have an introduction about

00:01:06,990 --> 00:01:15,570
it and after that I show you how to

00:01:12,540 --> 00:01:20,819
create a minimal application using this

00:01:15,570 --> 00:01:23,039
framework what we will talk about what

00:01:20,819 --> 00:01:28,670
you should know to use this framework

00:01:23,039 --> 00:01:32,219
effectively and in the last topic I will

00:01:28,670 --> 00:01:35,219
explain and show you how I created the

00:01:32,219 --> 00:01:37,649
framework from the first steps and to

00:01:35,219 --> 00:01:40,950
the final state which you can see on the

00:01:37,649 --> 00:01:42,929
github a ok let's start with

00:01:40,950 --> 00:01:46,889
introduction of you and a minimal

00:01:42,929 --> 00:01:48,359
application you is a ready to use web

00:01:46,889 --> 00:01:54,560
assembly framework

00:01:48,359 --> 00:01:59,039
I created a half year ago I released it

00:01:54,560 --> 00:02:02,759
16 December of last year and it was

00:01:59,039 --> 00:02:05,310
exactly four days up from my birthday as

00:02:02,759 --> 00:02:09,179
a community community gave a great

00:02:05,310 --> 00:02:12,870
present great gift for me the project

00:02:09,179 --> 00:02:17,130
called I collected four thousand stars

00:02:12,870 --> 00:02:19,080
for today it's open source and it

00:02:17,130 --> 00:02:23,540
released under two licenses which

00:02:19,080 --> 00:02:27,030
popular in rust community MIT for

00:02:23,540 --> 00:02:29,220
commercial proposes and apache license

00:02:27,030 --> 00:02:33,900
for GPL compatible

00:02:29,220 --> 00:02:35,850
projects you can follow this link which

00:02:33,900 --> 00:02:38,910
you can see on the screen on the top of

00:02:35,850 --> 00:02:42,510
the slide to get more information about

00:02:38,910 --> 00:02:46,610
this the present feature of the

00:02:42,510 --> 00:02:46,610
framework is a j6 like templates

00:02:47,660 --> 00:02:57,990
let you put HTML templates directly into

00:02:53,190 --> 00:03:03,210
your code inside Roz code and it looks

00:02:57,990 --> 00:03:08,610
like rekt jazz framework but some some

00:03:03,210 --> 00:03:11,670
features I was inspired by L it supports

00:03:08,610 --> 00:03:15,390
pure web assembly compilation target and

00:03:11,670 --> 00:03:18,450
you could compile front-end application

00:03:15,390 --> 00:03:24,240
without em scripting into a pure web as

00:03:18,450 --> 00:03:30,830
assembly and a bytecode and you could

00:03:24,240 --> 00:03:30,830
find many examples on the project's page

00:03:31,400 --> 00:03:38,970
ok let's start with minimal application

00:03:34,700 --> 00:03:44,520
at first you should create a simple

00:03:38,970 --> 00:03:51,350
struck I call it mobile with one field

00:03:44,520 --> 00:03:54,630
I called value and to turn it into a

00:03:51,350 --> 00:03:59,489
user interface component you should

00:03:54,630 --> 00:04:04,350
implement a component trade where this

00:03:59,489 --> 00:04:07,050
trade could create instances of this of

00:04:04,350 --> 00:04:10,620
the component and that's why it has to

00:04:07,050 --> 00:04:15,840
contain create method which returns a

00:04:10,620 --> 00:04:18,120
new campaign instance now we can add

00:04:15,840 --> 00:04:21,140
behavior to this company because we have

00:04:18,120 --> 00:04:26,430
a struct and now we should add a

00:04:21,140 --> 00:04:33,770
messages we could add an enumeration

00:04:26,430 --> 00:04:37,890
with different events inside and this

00:04:33,770 --> 00:04:39,389
events needs changes of the model it

00:04:37,890 --> 00:04:41,909
contains

00:04:39,389 --> 00:04:45,449
in update method of the sky of the

00:04:41,909 --> 00:04:50,789
component trade and in case of increment

00:04:45,449 --> 00:04:53,969
event it it will add 1 to a very field

00:04:50,789 --> 00:05:00,120
in a case of decrement it will subtract

00:04:53,969 --> 00:05:03,060
one from models field the service should

00:05:00,120 --> 00:05:07,229
render flag which trigger trigger air

00:05:03,060 --> 00:05:09,479
rendering of this company and if you set

00:05:07,229 --> 00:05:14,030
it to true the company will be render it

00:05:09,479 --> 00:05:18,300
again and if you return false the range

00:05:14,030 --> 00:05:20,669
surrendering will be skipped and it is

00:05:18,300 --> 00:05:26,039
useful if you want to change hidden

00:05:20,669 --> 00:05:29,819
fields of your model let's look how to

00:05:26,039 --> 00:05:37,110
create looking fill of our brand new

00:05:29,819 --> 00:05:41,550
campaign and to to implement to make it

00:05:37,110 --> 00:05:44,789
renderable you have to implement render

00:05:41,550 --> 00:05:48,289
render boot trade which contains view

00:05:44,789 --> 00:05:51,870
method of this method should return

00:05:48,289 --> 00:05:55,919
virtual Dom tree and it's simple to make

00:05:51,870 --> 00:06:01,289
it with special macro which included in

00:05:55,919 --> 00:06:04,889
the framework HTML micron it allows you

00:06:01,289 --> 00:06:07,680
to use HTML notation inside the wrath

00:06:04,889 --> 00:06:14,060
code and you could pull HTML text

00:06:07,680 --> 00:06:18,379
directly into your code you can also see

00:06:14,060 --> 00:06:21,990
the click handlers in the buttons and

00:06:18,379 --> 00:06:25,440
they send messages into update function

00:06:21,990 --> 00:06:29,460
back when you click on this button in

00:06:25,440 --> 00:06:32,669
the browser to stop start this

00:06:29,460 --> 00:06:36,750
application you have to add main

00:06:32,669 --> 00:06:40,259
function and you should just initialize

00:06:36,750 --> 00:06:45,300
this framework I create a context I

00:06:40,259 --> 00:06:48,589
created empty context here and use unit

00:06:45,300 --> 00:06:51,819
type but you could create more complex

00:06:48,589 --> 00:06:56,289
contexts if you need more services

00:06:51,819 --> 00:07:00,669
I also created application instance here

00:06:56,289 --> 00:07:01,509
and mount it into to the real Dom

00:07:00,669 --> 00:07:07,360
element

00:07:01,509 --> 00:07:11,439
I used body tag but you could mount the

00:07:07,360 --> 00:07:16,449
application to any element of the Dom

00:07:11,439 --> 00:07:20,110
tree and stop the loop before I show you

00:07:16,449 --> 00:07:24,270
the result how it looks have looks like

00:07:20,110 --> 00:07:30,059
let's see how to build this application

00:07:24,270 --> 00:07:31,659
to build this code you you need a

00:07:30,059 --> 00:07:35,680
special cantillation

00:07:31,659 --> 00:07:41,680
and tag it and you could install install

00:07:35,680 --> 00:07:45,419
it with rust app to add web assembly

00:07:41,680 --> 00:07:48,460
unknown take it you also may need in

00:07:45,419 --> 00:07:49,629
scripting target and it might come in

00:07:48,460 --> 00:07:53,409
handy

00:07:49,629 --> 00:07:58,990
and I will describe why it's why you may

00:07:53,409 --> 00:08:01,349
need M script a little later I also

00:07:58,990 --> 00:08:04,930
recommend you to install carga web tool

00:08:01,349 --> 00:08:11,469
it help you to watch build and run your

00:08:04,930 --> 00:08:15,069
code create a binary grade and food code

00:08:11,469 --> 00:08:20,080
I showed you in to enter source folder

00:08:15,069 --> 00:08:25,389
of your project and run it with cargo

00:08:20,080 --> 00:08:28,120
web to set necessary target I use pure

00:08:25,389 --> 00:08:33,819
web as an assembly target without am

00:08:28,120 --> 00:08:37,779
scripting because it works faster and

00:08:33,819 --> 00:08:42,039
the cargo bag tool will bootstrap a web

00:08:37,779 --> 00:08:47,470
server for your application and it will

00:08:42,039 --> 00:08:50,500
look like this you can see in the

00:08:47,470 --> 00:08:56,860
browser the application and you could

00:08:50,500 --> 00:09:02,189
push these buttons and see that Dom tree

00:08:56,860 --> 00:09:02,189
will be updated on every event

00:09:03,820 --> 00:09:09,500
Alice Lee deep into extra features you

00:09:06,920 --> 00:09:12,890
should know to use the framework

00:09:09,500 --> 00:09:16,820
effectively Campanian sleeve in a

00:09:12,890 --> 00:09:21,650
context environment and context is a

00:09:16,820 --> 00:09:24,770
short state you could add requirements

00:09:21,650 --> 00:09:27,650
for the context even a simple button

00:09:24,770 --> 00:09:33,140
could require something like a timer or

00:09:27,650 --> 00:09:37,990
network connection for example we may

00:09:33,140 --> 00:09:43,400
need a WS connection for our company and

00:09:37,990 --> 00:09:45,200
an implementation of required trade we

00:09:43,400 --> 00:09:48,860
should implement it to satisfy the

00:09:45,200 --> 00:09:52,300
requirements of our company you couldn't

00:09:48,860 --> 00:09:58,490
compile this code if your context

00:09:52,300 --> 00:10:01,190
doesn't fit your requirements you

00:09:58,490 --> 00:10:06,020
contains some services which you could

00:10:01,190 --> 00:10:09,530
use in the context timeout

00:10:06,020 --> 00:10:11,510
service which said use set timeout a

00:10:09,530 --> 00:10:15,230
function of JavaScript and will send a

00:10:11,510 --> 00:10:18,650
single message when timer elapsed

00:10:15,230 --> 00:10:20,600
interval service you which use set

00:10:18,650 --> 00:10:23,840
interval function of JavaScript and

00:10:20,600 --> 00:10:27,440
we'll send a sequence of messages to

00:10:23,840 --> 00:10:31,060
your component fetch let you connect

00:10:27,440 --> 00:10:35,030
connect to HTTP servers and WebSocket

00:10:31,060 --> 00:10:38,170
service let you connect by a WebSocket

00:10:35,030 --> 00:10:40,910
protocol and to your web server

00:10:38,170 --> 00:10:44,300
you also could implement your own

00:10:40,910 --> 00:10:47,120
service and even publish it on creates

00:10:44,300 --> 00:10:53,840
IO and use it from the central

00:10:47,120 --> 00:10:57,290
repository even could put confidence in

00:10:53,840 --> 00:11:01,460
director into templates this feature

00:10:57,290 --> 00:11:04,160
uses Road types without any wrappers you

00:11:01,460 --> 00:11:08,690
could use I put counter into the

00:11:04,160 --> 00:11:11,980
template like you can do in if you

00:11:08,690 --> 00:11:15,100
familiar with rag jazz and jazz vi

00:11:11,980 --> 00:11:17,930
template language

00:11:15,100 --> 00:11:21,410
and company could contain properties

00:11:17,930 --> 00:11:25,400
properties is a simple struct use pure

00:11:21,410 --> 00:11:29,330
rust types inside templates said types

00:11:25,400 --> 00:11:32,420
you need and you could use these types

00:11:29,330 --> 00:11:34,730
in the template and also you have to

00:11:32,420 --> 00:11:41,210
implement default trade because all

00:11:34,730 --> 00:11:43,760
properties optional also the framework

00:11:41,210 --> 00:11:47,570
uses virtual Dom or presentation and

00:11:43,760 --> 00:11:53,780
first view method call a rendering

00:11:47,570 --> 00:11:57,340
rendering there so Dom over real Dom

00:11:53,780 --> 00:12:01,880
tree in a second a rendering call

00:11:57,340 --> 00:12:05,930
creates a patch which applied to the

00:12:01,880 --> 00:12:11,050
existing Dom tree and only changes

00:12:05,930 --> 00:12:11,050
things will be changed on real Dom tree

00:12:11,800 --> 00:12:21,080
it it works fast and reactive there are

00:12:18,200 --> 00:12:23,990
five types of no nodes which you can use

00:12:21,080 --> 00:12:28,130
first is virtual company and which holds

00:12:23,990 --> 00:12:33,589
a component struct inside virtual list

00:12:28,130 --> 00:12:35,720
which has a list of other nodes and it

00:12:33,589 --> 00:12:39,950
will put it as a fragment into the Dom

00:12:35,720 --> 00:12:43,010
tree virtual Tech which produces a real

00:12:39,950 --> 00:12:49,400
Dom element and virtual text which

00:12:43,010 --> 00:12:51,410
produces a real text node and the last

00:12:49,400 --> 00:12:54,020
type of node is a virtual reference

00:12:51,410 --> 00:12:58,750
which keeps a reference to an existing

00:12:54,020 --> 00:13:01,790
element the last is useful for embedding

00:12:58,750 --> 00:13:05,330
JavaScript components into a visual tree

00:13:01,790 --> 00:13:08,990
if JavaScript create element you could

00:13:05,330 --> 00:13:16,220
use reference to put it directly into

00:13:08,990 --> 00:13:19,610
your real rendered Dom tree to create to

00:13:16,220 --> 00:13:23,410
collect and build a tree you could use

00:13:19,610 --> 00:13:26,000
three approaches first is HTML macro

00:13:23,410 --> 00:13:29,050
this is the common and the simplest way

00:13:26,000 --> 00:13:32,860
to create the tree

00:13:29,050 --> 00:13:39,279
you can also create the tree manually

00:13:32,860 --> 00:13:44,260
and you could create a parser and first

00:13:39,279 --> 00:13:47,620
text like mark up any markup like

00:13:44,260 --> 00:13:52,060
markdown for example and create visual

00:13:47,620 --> 00:13:54,190
tree from markdown representation to a

00:13:52,060 --> 00:13:58,930
virtual Dom representation and render it

00:13:54,190 --> 00:14:04,930
over the real Dom tree and it also will

00:13:58,930 --> 00:14:09,010
works effectively this is a way of

00:14:04,930 --> 00:14:12,430
creation of this framework in a few

00:14:09,010 --> 00:14:15,160
slides you should remember that web

00:14:12,430 --> 00:14:18,850
assembly works in a sandbox and you have

00:14:15,160 --> 00:14:21,640
to write some integration code if you do

00:14:18,850 --> 00:14:26,320
it manually

00:14:21,640 --> 00:14:29,050
it's impossible to go fast and create a

00:14:26,320 --> 00:14:31,779
good framework because you should waste

00:14:29,050 --> 00:14:33,700
time for creating every band binding to

00:14:31,779 --> 00:14:38,380
JavaScript to send callbacks to

00:14:33,700 --> 00:14:42,120
JavaScript and to call web assembly from

00:14:38,380 --> 00:14:46,230
JavaScript and it's it's a hard way

00:14:42,120 --> 00:14:51,220
but there is a more simple way to use

00:14:46,230 --> 00:14:54,610
STD web great and I replaced that raw

00:14:51,220 --> 00:14:58,740
approach with SD web crate it provides

00:14:54,610 --> 00:15:02,529
provides browsers API and contains

00:14:58,740 --> 00:15:07,540
awesome.js macro which helps you to

00:15:02,529 --> 00:15:12,430
create callbacks writing JavaScript code

00:15:07,540 --> 00:15:14,920
into the rest code first version of the

00:15:12,430 --> 00:15:21,040
framework contains some JavaScript code

00:15:14,920 --> 00:15:25,180
and now it was replaced with cells and

00:15:21,040 --> 00:15:28,839
reference counters and there is no any

00:15:25,180 --> 00:15:33,370
JavaScript code in the sources over the

00:15:28,839 --> 00:15:37,180
framework HTML macro was another

00:15:33,370 --> 00:15:40,200
challenge I tried to purse at first I

00:15:37,180 --> 00:15:45,690
tried to purse whole tag

00:15:40,200 --> 00:15:49,200
cursory but it exceeded recursion limits

00:15:45,690 --> 00:15:51,360
of the compiler to fast actually it

00:15:49,200 --> 00:15:54,720
doesn't work this probably doesn't work

00:15:51,360 --> 00:15:57,960
and I replaced it with separate rules

00:15:54,720 --> 00:16:02,190
for opening tag and for closing text and

00:15:57,960 --> 00:16:07,830
as add some special rules for passing

00:16:02,190 --> 00:16:12,180
attributes now macro implementation

00:16:07,830 --> 00:16:15,600
holds a stack inside and it creates an

00:16:12,180 --> 00:16:19,110
element for every opening tag and put

00:16:15,600 --> 00:16:24,870
the rest into the previous element on

00:16:19,110 --> 00:16:27,810
every closing tag and in this way HTML

00:16:24,870 --> 00:16:31,260
micro collects and builds a visual tree

00:16:27,810 --> 00:16:36,240
representation using stack and rules for

00:16:31,260 --> 00:16:37,740
opening closing tags and HBU's you can

00:16:36,240 --> 00:16:40,950
develop and compile front-end

00:16:37,740 --> 00:16:44,060
applications with rust and nothing more

00:16:40,950 --> 00:16:48,540
it works but there are some restriction

00:16:44,060 --> 00:16:53,880
restrictions first some crates won't

00:16:48,540 --> 00:16:57,750
work in a simple environment you you

00:16:53,880 --> 00:17:03,090
don't have threads but you could use web

00:16:57,750 --> 00:17:05,220
workers API I but I can't ambit and use

00:17:03,090 --> 00:17:07,800
grades like Diane programming language

00:17:05,220 --> 00:17:10,530
because it's extensible excessively uses

00:17:07,800 --> 00:17:13,140
threads and I can't compile it into web

00:17:10,530 --> 00:17:18,060
assembly it it won't work in the browser

00:17:13,140 --> 00:17:21,170
but maybe in another web assembly

00:17:18,060 --> 00:17:24,449
environment but not in the browsers

00:17:21,170 --> 00:17:27,390
there are there is no system API it's

00:17:24,449 --> 00:17:30,960
not available but you could emulate some

00:17:27,390 --> 00:17:36,270
with inscription if you compile your

00:17:30,960 --> 00:17:40,080
application with inscription and some

00:17:36,270 --> 00:17:43,809
crates will work of that but it takes

00:17:40,080 --> 00:17:46,749
some overhead for him Scoob

00:17:43,809 --> 00:17:51,190
the backing is a hard topic and bugger

00:17:46,749 --> 00:17:53,229
exists but doesn't work properly you

00:17:51,190 --> 00:17:55,059
could use a logging where I took like a

00:17:53,229 --> 00:17:58,299
business logic of your front-end

00:17:55,059 --> 00:18:02,590
application and I remember the things

00:17:58,299 --> 00:18:05,229
that's hard to debug low level cases you

00:18:02,590 --> 00:18:07,960
can use a textual representation of web

00:18:05,229 --> 00:18:13,349
assembly for that but it's really hard

00:18:07,960 --> 00:18:18,519
think back low level integrations of

00:18:13,349 --> 00:18:22,690
with web assembly what is the next I

00:18:18,519 --> 00:18:26,169
want to do with the framework the first

00:18:22,690 --> 00:18:27,279
I want to improve integrations with

00:18:26,169 --> 00:18:30,639
JavaScript

00:18:27,279 --> 00:18:32,950
I want to adapt and cover popular

00:18:30,639 --> 00:18:35,710
JavaScript libraries provide examples

00:18:32,950 --> 00:18:39,309
how to use existent JavaScript files

00:18:35,710 --> 00:18:43,629
because just world is huge and we could

00:18:39,309 --> 00:18:49,269
reuse useful libraries which exists in

00:18:43,629 --> 00:18:57,399
that world I also want to do some

00:18:49,269 --> 00:19:01,359
research with type it CSS and I want to

00:18:57,399 --> 00:19:04,509
try add more reusable components to make

00:19:01,359 --> 00:19:07,539
creating front-end application simpler

00:19:04,509 --> 00:19:11,440
and faster by existing components which

00:19:07,539 --> 00:19:14,739
you could download from crates I and use

00:19:11,440 --> 00:19:17,619
it in your application and put it into

00:19:14,739 --> 00:19:20,559
your templates as a components like

00:19:17,619 --> 00:19:24,489
front-end developers who uses Jess Jess

00:19:20,559 --> 00:19:27,879
X and Reggie's uses this approach and

00:19:24,489 --> 00:19:33,070
you could use creates and put components

00:19:27,879 --> 00:19:37,179
directly into templates benchmarks is

00:19:33,070 --> 00:19:38,889
the most demanded top topic but I

00:19:37,179 --> 00:19:42,849
haven't checked it in the right way

00:19:38,889 --> 00:19:46,749
because it's a little tricky a little

00:19:42,849 --> 00:19:49,839
hard topic I will do it in the future

00:19:46,749 --> 00:19:51,570
and I believe it could hit JavaScript in

00:19:49,839 --> 00:19:57,960
in many cases

00:19:51,570 --> 00:20:00,960
because web rust and webassembly don't

00:19:57,960 --> 00:20:04,620
use garbage collector and other

00:20:00,960 --> 00:20:08,070
overheads and I believe it it will work

00:20:04,620 --> 00:20:12,090
fast but I haven't been Mitch McConnell

00:20:08,070 --> 00:20:17,940
now and I can't answer the question how

00:20:12,090 --> 00:20:20,640
fast is it I want to involve more

00:20:17,940 --> 00:20:23,160
contributors to the project search

00:20:20,640 --> 00:20:27,390
external contributors already sent their

00:20:23,160 --> 00:20:29,360
pull requests and I've noticed them you

00:20:27,390 --> 00:20:33,510
are welcome with your changes too

00:20:29,360 --> 00:20:36,570
and finally I want to write guides for

00:20:33,510 --> 00:20:43,190
rookies and improve the documentation of

00:20:36,570 --> 00:20:47,550
the framework maybe even I will write a

00:20:43,190 --> 00:20:51,870
book about using you in how to create

00:20:47,550 --> 00:20:54,770
your front-end application but for today

00:20:51,870 --> 00:20:59,790
you could see how to use the framework

00:20:54,770 --> 00:21:03,170
in examples in the repository of them

00:20:59,790 --> 00:21:06,810
all the framework and I believe for

00:21:03,170 --> 00:21:09,920
aroused developers it's it's enough to

00:21:06,810 --> 00:21:15,660
start using and use our tool

00:21:09,920 --> 00:21:20,370
examples is a good teacher for the

00:21:15,660 --> 00:21:23,370
loving something something you remember

00:21:20,370 --> 00:21:26,490
the things that rust is ready for

00:21:23,370 --> 00:21:30,010
creating front and applications it's

00:21:26,490 --> 00:21:31,520
real it's true you can do this right now

00:21:30,010 --> 00:21:36,620
[Music]

00:21:31,520 --> 00:21:41,240
start start for today and you should

00:21:36,620 --> 00:21:46,050
this you should use this advantage and

00:21:41,240 --> 00:21:49,410
it's it's really not hard you could use

00:21:46,050 --> 00:21:52,410
your own the raht compiler you already

00:21:49,410 --> 00:21:56,180
have on the computer and start using

00:21:52,410 --> 00:22:07,509
disadvantages from today thank you

00:21:56,180 --> 00:22:07,509
[Applause]

00:22:08,020 --> 00:22:13,700
yeah you could have some questions you

00:22:11,809 --> 00:22:16,160
could ask some about front-end

00:22:13,700 --> 00:22:24,440
development about creating the framework

00:22:16,160 --> 00:22:26,510
maybe using it for your projects I will

00:22:24,440 --> 00:22:32,960
have to answer your questions you're

00:22:26,510 --> 00:22:35,690
welcome thank you so you stands in a

00:22:32,960 --> 00:22:37,190
gigantic ecosystem of other libraries

00:22:35,690 --> 00:22:40,669
that do a similar thing with components

00:22:37,190 --> 00:22:44,120
is there a plan for integrating react

00:22:40,669 --> 00:22:48,500
components say or calling or embedding

00:22:44,120 --> 00:22:52,010
them in new programs did you say I said

00:22:48,500 --> 00:22:54,200
about existing correct come a component

00:22:52,010 --> 00:22:59,660
story in integrate existing companies

00:22:54,200 --> 00:23:04,340
right I haven't tried this but I think

00:22:59,660 --> 00:23:09,260
you could you could do it with virtual

00:23:04,340 --> 00:23:11,299
reference node if you bootstrap create

00:23:09,260 --> 00:23:13,280
the instance of direct component and put

00:23:11,299 --> 00:23:19,669
it into the virtual reference believe it

00:23:13,280 --> 00:23:21,110
it will work years of computer

00:23:19,669 --> 00:23:25,790
architecture do something similar to

00:23:21,110 --> 00:23:32,299
react and over here on the right III

00:23:25,790 --> 00:23:35,419
don't I do you see the potential to

00:23:32,299 --> 00:23:40,040
build something based on you something

00:23:35,419 --> 00:23:42,770
similar to react native so you can use

00:23:40,040 --> 00:23:49,580
it to build applications that are both

00:23:42,770 --> 00:23:56,600
web and native compatible III created

00:23:49,580 --> 00:24:03,200
this framework when I I used to erect a

00:23:56,600 --> 00:24:08,690
wreck Jess but but I I inspired visit a

00:24:03,200 --> 00:24:11,270
little and I don't see so far to

00:24:08,690 --> 00:24:13,670
integral with with that

00:24:11,270 --> 00:24:18,710
but but actually I created this

00:24:13,670 --> 00:24:23,950
framework when I have some issues with

00:24:18,710 --> 00:24:23,950
ell programming language and after that

00:24:24,130 --> 00:24:34,490
when I created the framework which works

00:24:30,740 --> 00:24:40,730
similar like L I found that I could

00:24:34,490 --> 00:24:47,980
replace templates which looks like which

00:24:40,730 --> 00:24:52,580
which could work like rect rect Jess

00:24:47,980 --> 00:24:54,910
template languages but a language but in

00:24:52,580 --> 00:25:00,400
question with resurrect it's not because

00:24:54,910 --> 00:25:00,400
you framework has own direction of

00:25:00,520 --> 00:25:09,590
improve improving and for example now

00:25:04,850 --> 00:25:12,680
I'm considering to use actors which I I

00:25:09,590 --> 00:25:20,440
don't I haven't seen another frameworks

00:25:12,680 --> 00:25:24,400
I I want to try to use actors to run

00:25:20,440 --> 00:25:26,600
some tasks in parallel and you could

00:25:24,400 --> 00:25:31,880
create your campaigns which will

00:25:26,600 --> 00:25:33,590
interact by message passing and with you

00:25:31,880 --> 00:25:36,500
from Brooke you could create really

00:25:33,590 --> 00:25:42,770
parallel and safe application for the

00:25:36,500 --> 00:25:44,930
browser thank you um I wanted to ask you

00:25:42,770 --> 00:25:47,810
do you have any advice for like selling

00:25:44,930 --> 00:25:50,210
moving to a framework like this from

00:25:47,810 --> 00:25:52,850
traditional JavaScript frameworks for

00:25:50,210 --> 00:25:55,300
maybe bosses who have no idea what

00:25:52,850 --> 00:25:55,300
you're talking about

00:26:01,129 --> 00:26:10,559
it's it's it's maybe it's a boy or not

00:26:05,339 --> 00:26:22,609
Sam what questions I I don't know how to

00:26:10,559 --> 00:26:26,009
answer this exactly but I I don't go to

00:26:22,609 --> 00:26:33,539
to beat other and to compete with other

00:26:26,009 --> 00:26:44,940
frameworks and I see I've see that you

00:26:33,539 --> 00:26:50,129
has on direction and for inter person

00:26:44,940 --> 00:26:53,669
with other frameworks I think it could

00:26:50,129 --> 00:26:58,639
replay replace JavaScript frameworks for

00:26:53,669 --> 00:27:01,979
some cases but actually you have to

00:26:58,639 --> 00:27:05,009
provide JavaScript environment and web

00:27:01,979 --> 00:27:09,419
you should remember that that web

00:27:05,009 --> 00:27:12,749
assembly lives in in the sandbox and you

00:27:09,419 --> 00:27:17,989
have to use you need to feed that

00:27:12,749 --> 00:27:22,199
sandbox with JavaScript API and actually

00:27:17,989 --> 00:27:25,679
web assembly represented frameworks in

00:27:22,199 --> 00:27:33,629
any case we'll use JavaScript API and

00:27:25,679 --> 00:27:36,359
and I think the good future position of

00:27:33,629 --> 00:27:39,989
the framework when you could create with

00:27:36,359 --> 00:27:42,779
you components and ambled it into

00:27:39,989 --> 00:27:45,119
existing applications but add some

00:27:42,779 --> 00:27:49,949
features which is simpler to implement

00:27:45,119 --> 00:27:52,979
with rust like capital cryptography and

00:27:49,949 --> 00:27:57,230
other high-performance things and you

00:27:52,979 --> 00:28:07,550
could create a component which solves

00:27:57,230 --> 00:28:14,780
we feel solve issues which we use fire

00:28:07,550 --> 00:28:17,960
flesh for that I hope it will be short

00:28:14,780 --> 00:28:20,390
so the main point is have you tried to

00:28:17,960 --> 00:28:23,210
make the backhand swappable in the sense

00:28:20,390 --> 00:28:26,780
now it is a framework that manipulates

00:28:23,210 --> 00:28:29,210
HTML it could manipulate any kind of

00:28:26,780 --> 00:28:31,340
tree like do 3d rendering or a scene

00:28:29,210 --> 00:28:33,470
graph or a set of web sockets or

00:28:31,340 --> 00:28:40,550
whatever have you have you taught the

00:28:33,470 --> 00:28:48,370
backend as a swappable thing as one of

00:28:40,550 --> 00:28:52,640
the main feature for the framework is is

00:28:48,370 --> 00:28:58,670
creating something like several

00:28:52,640 --> 00:29:03,580
server-side rendering and and I think

00:28:58,670 --> 00:29:07,220
it's possible to to use framework in two

00:29:03,580 --> 00:29:11,720
in two cases when you could interact

00:29:07,220 --> 00:29:16,420
directly with your server or create you

00:29:11,720 --> 00:29:22,730
application and compile it into a

00:29:16,420 --> 00:29:28,420
product which serves your HTML like PHP

00:29:22,730 --> 00:29:28,420
does it or other thing and they will

00:29:29,020 --> 00:29:36,740
sense static templates which will be

00:29:33,740 --> 00:29:39,710
generated generated and when you push

00:29:36,740 --> 00:29:43,820
some buttons it will fire events back to

00:29:39,710 --> 00:29:47,890
the server when the companies will be

00:29:43,820 --> 00:29:54,890
rendered again and will return as static

00:29:47,890 --> 00:29:57,590
static page web patient there are some

00:29:54,890 --> 00:30:00,860
cases and I want to implement some

00:29:57,590 --> 00:30:03,549
interesting features about better into

00:30:00,860 --> 00:30:05,730
integrations with the

00:30:03,549 --> 00:30:05,730
hands

00:30:08,650 --> 00:30:15,759

YouTube URL: https://www.youtube.com/watch?v=qszZTwG0nZs


