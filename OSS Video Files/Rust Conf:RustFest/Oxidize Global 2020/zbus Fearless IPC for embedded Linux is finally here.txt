Title: zbus Fearless IPC for embedded Linux is finally here
Publication date: 2020-11-06
Playlist: Oxidize Global 2020
Description: 
	D-Bus is a popular IPC mechanism used by various services on most desktop and many embedded Linux systems in the wild. It is heavily used by even the most essential services, such as systemd. Unfortunately, in the Rust world, there is only one D-Bus crate that is in a usable state and most users are not happy about it for various reasons, most notably that it depends on a notoriously bad C library. zbus, was created out of this demand for a pure Rust API that makes D-Bus easy and simple. With both elegance and efficiency as the top goals, the development of of zbus has been a much greater challenge than original anticipated but slowly they were all overcome.

Recently, zbus has actually started to take a good shape, with the foundational code already released and zbus nearing it’s first release. In this talk, I’ll go through all major challenges faced during the development of zbus and the solutions chosen, and give an overview of how one can make use of zbus.
Captions: 
	00:00:01,770 --> 00:00:30,839
[Music]

00:00:32,559 --> 00:00:34,960
hello

00:00:33,280 --> 00:00:36,559
can you hear me there we go yeah now we

00:00:34,960 --> 00:00:39,280
can hear you cool

00:00:36,559 --> 00:00:40,480
great welcome thanks for having me yeah

00:00:39,280 --> 00:00:41,760
and thanks for joining on such short

00:00:40,480 --> 00:00:43,760
notice we had a speaker

00:00:41,760 --> 00:00:44,800
fall ill unfortunately and i'm so glad

00:00:43,760 --> 00:00:46,640
we were able to have you

00:00:44,800 --> 00:00:48,000
join us so thank you so much on short

00:00:46,640 --> 00:00:48,640
notice for putting this together i think

00:00:48,000 --> 00:00:51,680
with

00:00:48,640 --> 00:00:53,360
three days notice so super super huge

00:00:51,680 --> 00:00:55,680
thanks from us for uh putting this talk

00:00:53,360 --> 00:00:56,800
together so quickly

00:00:55,680 --> 00:00:59,039
all right well i'll hand it over to you

00:00:56,800 --> 00:01:02,960
now

00:00:59,039 --> 00:01:06,000
okay thank you so much um hello everyone

00:01:02,960 --> 00:01:10,560
i'll start my talk now um

00:01:06,000 --> 00:01:13,600
so yeah that's our cool logo

00:01:10,560 --> 00:01:17,040
i guess everyone agrees it's cool

00:01:13,600 --> 00:01:20,000
um so first of all who am i

00:01:17,040 --> 00:01:21,040
um as you know my name is zijan ali and

00:01:20,000 --> 00:01:23,439
i'm a bit of a

00:01:21,040 --> 00:01:24,560
nova so i've been living in different

00:01:23,439 --> 00:01:27,119
countries and

00:01:24,560 --> 00:01:28,720
recently i'm i've been in germany and i

00:01:27,119 --> 00:01:32,799
think i'm stuck here for a while

00:01:28,720 --> 00:01:36,000
um in berlin so it's awesome as well

00:01:32,799 --> 00:01:40,079
um so um yeah and

00:01:36,000 --> 00:01:41,040
um i work for a startup called lumio we

00:01:40,079 --> 00:01:44,640
have a

00:01:41,040 --> 00:01:47,759
great um goal for creating a

00:01:44,640 --> 00:01:51,439
generic solution for edge to cloud

00:01:47,759 --> 00:01:54,079
machine vision solution um

00:01:51,439 --> 00:01:56,880
check out our website lumia.com for more

00:01:54,079 --> 00:01:58,960
details if you're interested in that

00:01:56,880 --> 00:02:01,119
and we're doing a lot in rust by the way

00:01:58,960 --> 00:02:01,119
so

00:02:01,200 --> 00:02:06,479
um and i have

00:02:04,320 --> 00:02:09,039
my background is in free and open source

00:02:06,479 --> 00:02:09,759
software um both desktop and embedded

00:02:09,039 --> 00:02:13,040
mostly

00:02:09,759 --> 00:02:14,080
i'm not i don't know anything about web

00:02:13,040 --> 00:02:17,040
stuff so when i

00:02:14,080 --> 00:02:18,080
need to do anything web i'm i'm lost but

00:02:17,040 --> 00:02:19,920
desktop and embedded

00:02:18,080 --> 00:02:23,200
these are things i know and i have a lot

00:02:19,920 --> 00:02:25,840
of experience with them

00:02:23,200 --> 00:02:27,599
and flying i'm into flying i have

00:02:25,840 --> 00:02:31,920
licenses and stuff and i have

00:02:27,599 --> 00:02:33,760
i love cats i have three cats now um

00:02:31,920 --> 00:02:35,599
so um a bit of background story for the

00:02:33,760 --> 00:02:38,800
talk um

00:02:35,599 --> 00:02:41,200
i i have a service called geoclue um

00:02:38,800 --> 00:02:42,480
and i wanted to oxidize it right for for

00:02:41,200 --> 00:02:45,440
multiple reasons

00:02:42,480 --> 00:02:46,400
um it's what it is it's a geolocation

00:02:45,440 --> 00:02:49,519
service

00:02:46,400 --> 00:02:52,800
and it uses dbus for for ipc um

00:02:49,519 --> 00:02:56,560
and it's written in c um

00:02:52,800 --> 00:02:59,599
but what is d bus menu of you might ask

00:02:56,560 --> 00:03:02,239
um it's efficient very efficient binary

00:02:59,599 --> 00:03:03,440
inter process communication protocol um

00:03:02,239 --> 00:03:06,480
so

00:03:03,440 --> 00:03:08,879
on um desktop and embedded in on linux

00:03:06,480 --> 00:03:11,920
especially it's very very popular

00:03:08,879 --> 00:03:13,120
um and it's it's used by many many

00:03:11,920 --> 00:03:16,480
projects

00:03:13,120 --> 00:03:19,840
out there uh did we lose my

00:03:16,480 --> 00:03:19,840
screen share

00:03:22,800 --> 00:03:25,599
yep it looks like we lost your slides

00:03:24,319 --> 00:03:26,400
i'm not sure if you're still able to

00:03:25,599 --> 00:03:28,879
share from your

00:03:26,400 --> 00:03:28,879
device

00:03:31,360 --> 00:03:35,920
firefox still says it's here

00:03:34,400 --> 00:03:38,319
yeah i might want to reload otherwise i

00:03:35,920 --> 00:03:47,840
can pull up your slides real quick

00:03:38,319 --> 00:03:47,840
okay uh i'll do that one second

00:03:59,439 --> 00:04:06,720
yeah it's back okay sorry about that um

00:04:03,680 --> 00:04:08,640
okay so um as i said it's used by many

00:04:06,720 --> 00:04:09,840
projects especially on linux systemd

00:04:08,640 --> 00:04:12,239
uses it heavily

00:04:09,840 --> 00:04:13,760
by genome and kd uses it and there was

00:04:12,239 --> 00:04:16,720
also an attempt to

00:04:13,760 --> 00:04:18,799
put it in the kernel itself um so it's

00:04:16,720 --> 00:04:22,240
that important at least for linux

00:04:18,799 --> 00:04:24,639
um so i was like okay

00:04:22,240 --> 00:04:25,840
i need to use dbus because my service is

00:04:24,639 --> 00:04:28,639
a debus service

00:04:25,840 --> 00:04:28,880
so um i created a create for it uh sorry

00:04:28,639 --> 00:04:30,639
i

00:04:28,880 --> 00:04:32,880
um i thought like there must be a crate

00:04:30,639 --> 00:04:34,960
for it right so i searched and of course

00:04:32,880 --> 00:04:38,080
there's a crate called debus rs

00:04:34,960 --> 00:04:40,639
um and but it depends on

00:04:38,080 --> 00:04:42,080
lib dibus which is a notoriously bad c

00:04:40,639 --> 00:04:44,960
library for d bus

00:04:42,080 --> 00:04:46,479
um or like okay whatever it's like i

00:04:44,960 --> 00:04:48,639
don't have to deal with that right

00:04:46,479 --> 00:04:50,320
um but when i started to use it it's

00:04:48,639 --> 00:04:53,120
like it's it had a lot of

00:04:50,320 --> 00:04:54,720
issues in many ways um but still i

00:04:53,120 --> 00:04:55,040
decided to use it because i don't want

00:04:54,720 --> 00:04:57,199
to

00:04:55,040 --> 00:04:58,479
invent a new thing just just for the

00:04:57,199 --> 00:05:01,600
sake of it

00:04:58,479 --> 00:05:03,120
and also i didn't have that much time um

00:05:01,600 --> 00:05:04,880
and i even contributed a bit in the

00:05:03,120 --> 00:05:07,919
beginning to it and in

00:05:04,880 --> 00:05:10,960
many things um and but

00:05:07,919 --> 00:05:14,720
when we had a hack fest last year in me

00:05:10,960 --> 00:05:17,520
and in that time i put i i started

00:05:14,720 --> 00:05:18,400
porting geoclue to it um and i realized

00:05:17,520 --> 00:05:20,880
that

00:05:18,400 --> 00:05:22,479
it's just the api is just over

00:05:20,880 --> 00:05:24,160
complicated especially the ones that i

00:05:22,479 --> 00:05:27,199
was using or leading

00:05:24,160 --> 00:05:28,400
um i was like okay should i just start

00:05:27,199 --> 00:05:31,440
divas from scratch

00:05:28,400 --> 00:05:33,120
um like how hard can it be

00:05:31,440 --> 00:05:34,880
so i was there for three days anyway for

00:05:33,120 --> 00:05:36,479
the hack fest so i was like let's let's

00:05:34,880 --> 00:05:38,320
let's look at what it's involved right

00:05:36,479 --> 00:05:41,440
and and we can see

00:05:38,320 --> 00:05:43,520
and i look at i i pull out the spec and

00:05:41,440 --> 00:05:46,160
i checked and and on low level

00:05:43,520 --> 00:05:47,600
it's just message passing and um and

00:05:46,160 --> 00:05:50,720
there's a wire format

00:05:47,600 --> 00:05:52,320
um for for that and to encapsulate your

00:05:50,720 --> 00:05:55,680
different types of data into

00:05:52,320 --> 00:05:57,840
uh forever device um and

00:05:55,680 --> 00:05:59,759
it's also called g variant although g

00:05:57,840 --> 00:06:00,319
variant is actually a different version

00:05:59,759 --> 00:06:03,440
of it

00:06:00,319 --> 00:06:04,639
it has tiny differences to to debus wire

00:06:03,440 --> 00:06:06,240
format

00:06:04,639 --> 00:06:09,120
but those differences actually mean a

00:06:06,240 --> 00:06:12,160
lot so it's it's not like uh

00:06:09,120 --> 00:06:13,600
easy to switch um anyway we'll talk a

00:06:12,160 --> 00:06:15,520
bit more about that later

00:06:13,600 --> 00:06:17,360
um but it's uh it's this format is used

00:06:15,520 --> 00:06:20,319
a lot and g variant is used

00:06:17,360 --> 00:06:21,440
outside dbus uh for for easy database

00:06:20,319 --> 00:06:23,759
storage and stuff

00:06:21,440 --> 00:06:24,960
um and it's it's actually more efficient

00:06:23,759 --> 00:06:28,880
than the device itself

00:06:24,960 --> 00:06:31,680
um the deepest format itself um

00:06:28,880 --> 00:06:33,680
and what it describes this fact is that

00:06:31,680 --> 00:06:35,440
the different data types

00:06:33,680 --> 00:06:36,720
and and their encodings and their

00:06:35,440 --> 00:06:39,840
padding and stuff

00:06:36,720 --> 00:06:40,960
and they map very nicely to rust rust

00:06:39,840 --> 00:06:43,039
types right

00:06:40,960 --> 00:06:44,080
um so that was that was really

00:06:43,039 --> 00:06:47,039
encouraging

00:06:44,080 --> 00:06:48,319
um and on the high level um it's just a

00:06:47,039 --> 00:06:50,240
bit of object-oriented programming

00:06:48,319 --> 00:06:52,319
without any inheritance or any

00:06:50,240 --> 00:06:53,759
of the other controversial parts of

00:06:52,319 --> 00:06:56,479
object-oriented programming

00:06:53,759 --> 00:06:58,560
um so it has simply objects which are

00:06:56,479 --> 00:07:02,000
just instances which provide the actual

00:06:58,560 --> 00:07:04,319
api different kinds of api on them

00:07:02,000 --> 00:07:05,919
and they the the way they provide the

00:07:04,319 --> 00:07:08,560
api is through something called

00:07:05,919 --> 00:07:08,960
interfaces um the interface provides you

00:07:08,560 --> 00:07:12,240
the

00:07:08,960 --> 00:07:14,479
the methods um um

00:07:12,240 --> 00:07:16,240
i'm putting out some example from a

00:07:14,479 --> 00:07:17,520
real-world examples in there

00:07:16,240 --> 00:07:19,759
uh they're just like programming

00:07:17,520 --> 00:07:21,520
languages um methods right in

00:07:19,759 --> 00:07:24,800
programming languages libraries

00:07:21,520 --> 00:07:28,240
um and um signal signal is just a

00:07:24,800 --> 00:07:31,520
method call but it's a broadcast so it's

00:07:28,240 --> 00:07:33,840
it's like an event a broadcast um

00:07:31,520 --> 00:07:35,520
and uh properties which is just you know

00:07:33,840 --> 00:07:38,479
fields in a struct for example just

00:07:35,520 --> 00:07:39,120
just like that um so i was like actually

00:07:38,479 --> 00:07:41,840
it's not that

00:07:39,120 --> 00:07:43,120
really hard so um i was like let's let's

00:07:41,840 --> 00:07:46,240
just do it right

00:07:43,120 --> 00:07:47,280
um so um so i started this project

00:07:46,240 --> 00:07:50,560
called bebus

00:07:47,280 --> 00:07:54,720
um cool name right um

00:07:50,560 --> 00:07:55,680
so so yeah um and um but before i start

00:07:54,720 --> 00:07:59,199
i have to

00:07:55,680 --> 00:08:01,919
come up with goals first and then i

00:07:59,199 --> 00:08:02,560
have a bit of focus on what what to

00:08:01,919 --> 00:08:04,639
focus on

00:08:02,560 --> 00:08:05,759
what are the priorities and stuff um and

00:08:04,639 --> 00:08:08,560
the goals are true

00:08:05,759 --> 00:08:09,039
one is easy the device rs wasn't easy to

00:08:08,560 --> 00:08:12,080
use

00:08:09,039 --> 00:08:13,199
it wasn't easy to even find out how to

00:08:12,080 --> 00:08:16,560
use it

00:08:13,199 --> 00:08:20,319
so that's was the top goal

00:08:16,560 --> 00:08:22,720
um to have it as easy as possible

00:08:20,319 --> 00:08:23,440
and also efficient device rs is pretty

00:08:22,720 --> 00:08:26,080
efficient

00:08:23,440 --> 00:08:26,879
but i think it's uses as i said lib

00:08:26,080 --> 00:08:29,039
debuss

00:08:26,879 --> 00:08:30,240
so it's limited by how efficient can it

00:08:29,039 --> 00:08:33,839
be because of

00:08:30,240 --> 00:08:35,360
that as far as i know um but in any case

00:08:33,839 --> 00:08:36,080
let's say that libra stars is extremely

00:08:35,360 --> 00:08:38,640
efficient

00:08:36,080 --> 00:08:39,599
um so i wanted to have the same goal as

00:08:38,640 --> 00:08:42,640
well

00:08:39,599 --> 00:08:46,560
um but um first things first

00:08:42,640 --> 00:08:48,800
um i wanted to it was a

00:08:46,560 --> 00:08:49,600
i wanted to write a pure rust debuss

00:08:48,800 --> 00:08:52,160
library from

00:08:49,600 --> 00:08:54,000
scratch so um the first thing is if you

00:08:52,160 --> 00:08:57,040
go from a bottom-up approach

00:08:54,000 --> 00:08:59,200
you have to first implement

00:08:57,040 --> 00:09:01,279
api for the wire protocol and the

00:08:59,200 --> 00:09:03,680
encoding of data and stuff

00:09:01,279 --> 00:09:05,360
um and for that i created like a

00:09:03,680 --> 00:09:07,680
separate create called z-variant

00:09:05,360 --> 00:09:08,880
and because the point is that in future

00:09:07,680 --> 00:09:11,680
i will also support

00:09:08,880 --> 00:09:12,399
g variant format um and as i said that

00:09:11,680 --> 00:09:15,440
is used

00:09:12,399 --> 00:09:19,680
also outside dbs so people will find

00:09:15,440 --> 00:09:23,279
this useful to be used outside of device

00:09:19,680 --> 00:09:25,279
um spent several months um

00:09:23,279 --> 00:09:27,519
tried different approaches and there was

00:09:25,279 --> 00:09:29,440
like failures on many many things

00:09:27,519 --> 00:09:30,880
like i would have like a lot of progress

00:09:29,440 --> 00:09:32,640
and then i'll realize oh

00:09:30,880 --> 00:09:34,320
this particular thing doesn't work and

00:09:32,640 --> 00:09:38,480
i'll mention one of those

00:09:34,320 --> 00:09:40,959
later the biggest problem that i had um

00:09:38,480 --> 00:09:41,760
and a lot of fun with lifetimes because

00:09:40,959 --> 00:09:47,040
as i said

00:09:41,760 --> 00:09:47,040
efficiency was a goal um and um

00:09:47,360 --> 00:09:54,080
also fighting with ebay spec itself um

00:09:50,560 --> 00:09:56,160
so some of the things were not

00:09:54,080 --> 00:09:57,680
like specified very clearly that

00:09:56,160 --> 00:09:59,760
requirements so

00:09:57,680 --> 00:10:01,920
um it was a bit of a fight um

00:09:59,760 --> 00:10:03,440
unfortunately you can easily test it

00:10:01,920 --> 00:10:04,959
as i said it's used so much that you

00:10:03,440 --> 00:10:05,680
have a lot of test cases out there so

00:10:04,959 --> 00:10:07,279
you can

00:10:05,680 --> 00:10:08,880
make calls and find out like if you're

00:10:07,279 --> 00:10:13,200
doing it the right way

00:10:08,880 --> 00:10:17,360
um but finally we had a 1.0 release

00:10:13,200 --> 00:10:21,600
that was beginning of this year um

00:10:17,360 --> 00:10:25,279
i'm sorry um dry throat

00:10:21,600 --> 00:10:29,279
um and um much uh

00:10:25,279 --> 00:10:32,800
like there was a lot of celebrations um

00:10:29,279 --> 00:10:34,399
but then i realized that i i'm not

00:10:32,800 --> 00:10:36,560
dealing with empty areas like it's

00:10:34,399 --> 00:10:39,760
impossible with the api that i

00:10:36,560 --> 00:10:42,800
created to to do um

00:10:39,760 --> 00:10:46,720
empty arrays um

00:10:42,800 --> 00:10:48,640
so i have to rethink um

00:10:46,720 --> 00:10:49,839
what about certain that was actually one

00:10:48,640 --> 00:10:52,880
of the first um

00:10:49,839 --> 00:10:55,360
bugs that was filed on on zebus

00:10:52,880 --> 00:10:56,480
um this was about fire you know choosing

00:10:55,360 --> 00:10:58,959
saturday

00:10:56,480 --> 00:11:00,640
um and that was a good question and i

00:10:58,959 --> 00:11:02,880
actually looked at sergey from the

00:11:00,640 --> 00:11:05,279
beginning like when i just started off

00:11:02,880 --> 00:11:06,320
um but the thing is like as i said like

00:11:05,279 --> 00:11:08,320
i

00:11:06,320 --> 00:11:09,839
i was not familiar with i was familiar

00:11:08,320 --> 00:11:12,480
with d bus as a user

00:11:09,839 --> 00:11:14,000
but not the spec itself so i was already

00:11:12,480 --> 00:11:16,399
fighting with this pack and

00:11:14,000 --> 00:11:17,920
i was learning a lot of new things um

00:11:16,399 --> 00:11:21,040
and i wasn't that experienced with

00:11:17,920 --> 00:11:24,320
rust especially when writing a

00:11:21,040 --> 00:11:26,320
crate um and especially

00:11:24,320 --> 00:11:27,360
efficiency is the goal and all these

00:11:26,320 --> 00:11:29,440
goals so

00:11:27,360 --> 00:11:30,640
i was already i was already having a

00:11:29,440 --> 00:11:33,920
very hard um

00:11:30,640 --> 00:11:36,640
goal um um and i was doing this

00:11:33,920 --> 00:11:37,279
all in my spare time so um i didn't want

00:11:36,640 --> 00:11:39,440
to learn

00:11:37,279 --> 00:11:40,560
nausea as well as a user certainly it's

00:11:39,440 --> 00:11:43,040
pretty easy

00:11:40,560 --> 00:11:44,240
but as an implementer of the serializers

00:11:43,040 --> 00:11:46,720
and deserializers

00:11:44,240 --> 00:11:48,160
it's not super trivial um so i didn't

00:11:46,720 --> 00:11:50,959
want to get into that

00:11:48,160 --> 00:11:52,160
um and also it's not it hasn't been the

00:11:50,959 --> 00:11:55,279
best for binary

00:11:52,160 --> 00:11:57,600
um so binary protocol so

00:11:55,279 --> 00:11:58,399
that was also the reason but anyway um

00:11:57,600 --> 00:12:00,880
since that i

00:11:58,399 --> 00:12:01,839
i ca i didn't succeed in coming with a

00:12:00,880 --> 00:12:04,000
good api

00:12:01,839 --> 00:12:05,200
i was like okay let's let's give it a go

00:12:04,000 --> 00:12:09,279
um

00:12:05,200 --> 00:12:12,320
so i spent a few

00:12:09,279 --> 00:12:14,720
more months on this i'm sorry

00:12:12,320 --> 00:12:14,720
excuse me

00:12:17,839 --> 00:12:23,200
so after spending like a few more months

00:12:21,360 --> 00:12:25,279
and had lots of more fun with

00:12:23,200 --> 00:12:28,399
lifetimes and everything and learning a

00:12:25,279 --> 00:12:28,399
lot of survey

00:12:29,200 --> 00:12:34,800
i was able to do it and we we had to

00:12:32,399 --> 00:12:37,440
have a bit of a

00:12:34,800 --> 00:12:38,079
like the serializer and dcalyzer api we

00:12:37,440 --> 00:12:41,600
have is not

00:12:38,079 --> 00:12:44,320
the most usual you have to pass one more

00:12:41,600 --> 00:12:45,680
requirement for it let's we'll talk

00:12:44,320 --> 00:12:50,000
about that

00:12:45,680 --> 00:12:51,519
in the example code and

00:12:50,000 --> 00:12:53,279
so yeah this is the serde server-based

00:12:51,519 --> 00:12:56,000
new api which is the

00:12:53,279 --> 00:12:56,560
the 2.0 uh oh and uh please ignore the

00:12:56,000 --> 00:12:59,760
last

00:12:56,560 --> 00:13:00,959
line it's uh it's a bug in um reveal.js

00:12:59,760 --> 00:13:02,959
the latest

00:13:00,959 --> 00:13:04,959
git master or whatever i found out

00:13:02,959 --> 00:13:05,600
yesterday so and i don't know how to fix

00:13:04,959 --> 00:13:08,800
it

00:13:05,600 --> 00:13:11,200
anyway ignore the last line um

00:13:08,800 --> 00:13:12,560
and um it's uh as you will see it's like

00:13:11,200 --> 00:13:14,399
very similar to

00:13:12,560 --> 00:13:16,079
if you're familiar with certain it's

00:13:14,399 --> 00:13:19,120
very similar to how you use

00:13:16,079 --> 00:13:22,399
different uh format crates um

00:13:19,120 --> 00:13:24,800
uh two bytes and uh to to encode uh

00:13:22,399 --> 00:13:26,000
to from slice to to decode or

00:13:24,800 --> 00:13:28,639
deserialize

00:13:26,000 --> 00:13:29,839
um it's it looks very normal but you

00:13:28,639 --> 00:13:31,600
will see that one of the differences

00:13:29,839 --> 00:13:34,560
that you are passing a context

00:13:31,600 --> 00:13:35,920
um which we need uh because uh it could

00:13:34,560 --> 00:13:38,160
be different um

00:13:35,920 --> 00:13:39,279
uh formats like as i said like in future

00:13:38,160 --> 00:13:41,279
we will have the variant

00:13:39,279 --> 00:13:43,120
so you need to specify which format and

00:13:41,279 --> 00:13:45,360
also the byte um

00:13:43,120 --> 00:13:46,399
encoding so that's not implicit in

00:13:45,360 --> 00:13:49,920
diversity it's

00:13:46,399 --> 00:13:50,240
uh it's not um in the in the protocol

00:13:49,920 --> 00:13:53,600
that

00:13:50,240 --> 00:13:56,880
uh in the on the on the wire um it's not

00:13:53,600 --> 00:13:59,760
uh specified what proto what byte order

00:13:56,880 --> 00:14:00,560
is being used uh it has to be out of out

00:13:59,760 --> 00:14:02,800
of band

00:14:00,560 --> 00:14:04,079
from the data itself uh that information

00:14:02,800 --> 00:14:06,320
needs to be conveyed

00:14:04,079 --> 00:14:08,320
and in dbus you do that it's in a

00:14:06,320 --> 00:14:12,800
message you you send it

00:14:08,320 --> 00:14:15,839
um so um yeah anyway so you need to

00:14:12,800 --> 00:14:18,000
save which byte order and format

00:14:15,839 --> 00:14:19,120
and that's the context but there's one

00:14:18,000 --> 00:14:21,279
thing that is

00:14:19,120 --> 00:14:22,480
i managed to make invisible for most use

00:14:21,279 --> 00:14:25,199
cases here

00:14:22,480 --> 00:14:25,199
and that is that

00:14:26,560 --> 00:14:32,959
i'm sorry the data you're passing

00:14:30,160 --> 00:14:33,760
um for and for encoding it doesn't have

00:14:32,959 --> 00:14:37,360
to just

00:14:33,760 --> 00:14:39,760
implement serialize or deserialize um

00:14:37,360 --> 00:14:41,199
traits of certain but it also has to

00:14:39,760 --> 00:14:44,399
implement one more trait

00:14:41,199 --> 00:14:47,440
which is a very simple um trait

00:14:44,399 --> 00:14:49,600
but you have to provide it because dbus

00:14:47,440 --> 00:14:52,720
uses something called a signature each

00:14:49,600 --> 00:14:54,240
data that is uh that goes on dbus

00:14:52,720 --> 00:14:56,079
has a signature which is a string

00:14:54,240 --> 00:14:59,920
describing the

00:14:56,079 --> 00:15:02,560
data types um and um

00:14:59,920 --> 00:15:03,279
um yeah um i cannot serialize and

00:15:02,560 --> 00:15:06,000
decelerate

00:15:03,279 --> 00:15:07,040
without that so that is why you have one

00:15:06,000 --> 00:15:09,600
more requirement

00:15:07,040 --> 00:15:11,120
but we provide a macro to to implement

00:15:09,600 --> 00:15:12,240
that so you don't have to worry about

00:15:11,120 --> 00:15:15,120
that

00:15:12,240 --> 00:15:15,680
so for most types you just use the macro

00:15:15,120 --> 00:15:18,320
and

00:15:15,680 --> 00:15:19,120
we will do the handling for you so it

00:15:18,320 --> 00:15:21,279
says

00:15:19,120 --> 00:15:22,160
in general it's as simple as usual said

00:15:21,279 --> 00:15:27,519
the

00:15:22,160 --> 00:15:30,399
workflow i am i'm hoping you agree um

00:15:27,519 --> 00:15:32,240
so back to t was right um uh the

00:15:30,399 --> 00:15:34,639
progress were very slow i was

00:15:32,240 --> 00:15:35,759
so busy like the time i had i was

00:15:34,639 --> 00:15:38,160
spending all

00:15:35,759 --> 00:15:39,519
on all of it in c variant itself uh so

00:15:38,160 --> 00:15:42,639
the dbus was just

00:15:39,519 --> 00:15:46,800
about sending a method call and stuff

00:15:42,639 --> 00:15:48,720
and that was it um and

00:15:46,800 --> 00:15:50,000
around the same time i found out that

00:15:48,720 --> 00:15:51,839
there's a lot of

00:15:50,000 --> 00:15:53,360
new people writing divas crates it

00:15:51,839 --> 00:15:55,440
became a fashion a few

00:15:53,360 --> 00:15:56,480
months ago and i was really surprising

00:15:55,440 --> 00:15:58,480
and i didn't

00:15:56,480 --> 00:16:00,000
i don't know what happened i don't know

00:15:58,480 --> 00:16:04,160
if they saw my talks or

00:16:00,000 --> 00:16:04,160
or what but people got inspired

00:16:04,240 --> 00:16:10,480
but what i was wondering was that why

00:16:08,000 --> 00:16:11,199
uh people are not helping me out instead

00:16:10,480 --> 00:16:14,560
to to

00:16:11,199 --> 00:16:17,360
get zebus into into completion instead

00:16:14,560 --> 00:16:18,240
um and of course it's people's decision

00:16:17,360 --> 00:16:21,199
what do they

00:16:18,240 --> 00:16:22,399
what they spend their time on um who am

00:16:21,199 --> 00:16:23,199
i and maybe they will come up with

00:16:22,399 --> 00:16:25,839
better crits

00:16:23,199 --> 00:16:26,560
who knows um but uh all i'm saying is

00:16:25,839 --> 00:16:28,959
that uh

00:16:26,560 --> 00:16:29,759
if you come up if you want to work on

00:16:28,959 --> 00:16:32,560
dbus

00:16:29,759 --> 00:16:33,440
please first consider helping me out on

00:16:32,560 --> 00:16:36,480
zebus

00:16:33,440 --> 00:16:38,160
um and if you don't like the approach or

00:16:36,480 --> 00:16:39,759
whatever and we can talk right

00:16:38,160 --> 00:16:41,519
um if you don't like the approach you

00:16:39,759 --> 00:16:43,680
can tell us what you don't like about

00:16:41,519 --> 00:16:45,440
yeah maybe we can change it to how you

00:16:43,680 --> 00:16:46,000
like it and then we can help each other

00:16:45,440 --> 00:16:47,839
out

00:16:46,000 --> 00:16:49,120
if not of course you're free to do

00:16:47,839 --> 00:16:52,399
whatever you want

00:16:49,120 --> 00:16:55,440
um yeah so that's a bit of a request

00:16:52,399 --> 00:16:58,480
um but uh talking of helping me out

00:16:55,440 --> 00:17:01,519
a an old friend a few months ago that

00:16:58,480 --> 00:17:05,360
came to a rescue um his name is

00:17:01,519 --> 00:17:07,120
mark andrew um we go way back we have

00:17:05,360 --> 00:17:07,919
been colleagues multiple times we have

00:17:07,120 --> 00:17:10,880
worked on

00:17:07,919 --> 00:17:12,640
same projects multiple times uh it's

00:17:10,880 --> 00:17:13,439
it's our destiny to work on working with

00:17:12,640 --> 00:17:16,559
each other

00:17:13,439 --> 00:17:18,559
um so um yeah he needed divas for

00:17:16,559 --> 00:17:21,360
something in rust

00:17:18,559 --> 00:17:22,079
so he decided to help me out instead of

00:17:21,360 --> 00:17:25,280
waiting out

00:17:22,079 --> 00:17:28,160
for for me to complete it um

00:17:25,280 --> 00:17:29,600
and that helped a lot um he's an awesome

00:17:28,160 --> 00:17:32,960
hacker so he

00:17:29,600 --> 00:17:34,640
really speeded up the project we also

00:17:32,960 --> 00:17:37,679
had a lot of disagreements like

00:17:34,640 --> 00:17:38,160
when i say a lot i mean a loss but

00:17:37,679 --> 00:17:40,720
mainly

00:17:38,160 --> 00:17:42,640
they were about owned versus unowned and

00:17:40,720 --> 00:17:47,200
his use cases don't require

00:17:42,640 --> 00:17:49,360
unowned deserialization and stuff

00:17:47,200 --> 00:17:51,280
and that's typically hard to implement

00:17:49,360 --> 00:17:54,480
like that was one of the challenges

00:17:51,280 --> 00:17:57,840
um for me and zero in any way to to

00:17:54,480 --> 00:18:01,919
uh to encode but i want uh this crate

00:17:57,840 --> 00:18:04,080
to be um useful not just on the desktop

00:18:01,919 --> 00:18:05,360
but also on embedded systems out there

00:18:04,080 --> 00:18:07,679
um so i want to

00:18:05,360 --> 00:18:09,280
i wanted to be as i said efficient and

00:18:07,679 --> 00:18:12,240
you have to provide an

00:18:09,280 --> 00:18:13,120
un owned deserialization and stuff if

00:18:12,240 --> 00:18:16,480
you wanted

00:18:13,120 --> 00:18:18,320
to be as efficient as possible um

00:18:16,480 --> 00:18:19,679
so yeah we had disagreements on that but

00:18:18,320 --> 00:18:21,840
ultimately we

00:18:19,679 --> 00:18:23,120
figured it out and now we have all

00:18:21,840 --> 00:18:25,520
essential api

00:18:23,120 --> 00:18:26,400
all already in place the z bus create

00:18:25,520 --> 00:18:29,280
and

00:18:26,400 --> 00:18:31,039
how does it look like um let's see let's

00:18:29,280 --> 00:18:32,080
start from the bottom like we have low

00:18:31,039 --> 00:18:34,960
level high level

00:18:32,080 --> 00:18:35,919
api the low level api is also already

00:18:34,960 --> 00:18:37,440
very simple

00:18:35,919 --> 00:18:40,559
if you look at it you just create a

00:18:37,440 --> 00:18:43,280
connection um

00:18:40,559 --> 00:18:44,000
in dbs you have like typically two main

00:18:43,280 --> 00:18:46,559
connections

00:18:44,000 --> 00:18:47,840
available on your machine uh one is the

00:18:46,559 --> 00:18:50,880
system one which is for

00:18:47,840 --> 00:18:52,640
global and one is the session one um

00:18:50,880 --> 00:18:56,320
which is per user usually

00:18:52,640 --> 00:18:56,799
um and you create the connection to that

00:18:56,320 --> 00:19:00,320
you just

00:18:56,799 --> 00:19:01,120
um then say which which service you want

00:19:00,320 --> 00:19:04,559
to call a

00:19:01,120 --> 00:19:07,440
method on which um which object

00:19:04,559 --> 00:19:08,160
you want want it on and which interface

00:19:07,440 --> 00:19:10,799
it is

00:19:08,160 --> 00:19:12,320
and which the name and all the arguments

00:19:10,799 --> 00:19:12,720
and then you get back the arguments

00:19:12,320 --> 00:19:14,720
right

00:19:12,720 --> 00:19:16,320
and then you can parse it as you can see

00:19:14,720 --> 00:19:19,280
um this is actually a real

00:19:16,320 --> 00:19:20,160
world example you can use it um to light

00:19:19,280 --> 00:19:22,480
up the

00:19:20,160 --> 00:19:23,280
uh brighten up the screen of your of

00:19:22,480 --> 00:19:25,440
your laptop

00:19:23,280 --> 00:19:26,960
if you want to try it out and it's also

00:19:25,440 --> 00:19:29,280
an examples directory and

00:19:26,960 --> 00:19:30,240
and are created in our repo so you can

00:19:29,280 --> 00:19:33,679
use it

00:19:30,240 --> 00:19:36,799
um pretty easy already as you can see

00:19:33,679 --> 00:19:38,080
but that was a very simple um interface

00:19:36,799 --> 00:19:39,360
so but when you're dealing with a

00:19:38,080 --> 00:19:41,280
complex interface

00:19:39,360 --> 00:19:42,880
uh we have to do a bit better and we

00:19:41,280 --> 00:19:45,039
have to provide a better api

00:19:42,880 --> 00:19:46,000
so we go to the high level api that we

00:19:45,039 --> 00:19:49,440
provide

00:19:46,000 --> 00:19:51,520
um also um and we use um

00:19:49,440 --> 00:19:53,280
macros with that we have a separate of

00:19:51,520 --> 00:19:56,960
course create for macros as you

00:19:53,280 --> 00:19:58,880
normally have to um zbus macros but

00:19:56,960 --> 00:20:00,640
um we re-export it so you don't have to

00:19:58,880 --> 00:20:02,559
worry about that you can

00:20:00,640 --> 00:20:04,080
and we recommend that you use the macros

00:20:02,559 --> 00:20:06,559
you don't use the

00:20:04,080 --> 00:20:08,480
api directly without macros it's it's

00:20:06,559 --> 00:20:11,280
cumbersome it's complicated

00:20:08,480 --> 00:20:12,000
um um so yeah just just use the macros

00:20:11,280 --> 00:20:14,559
to

00:20:12,000 --> 00:20:16,080
declare um so this is the client side

00:20:14,559 --> 00:20:19,440
you declare the interface

00:20:16,080 --> 00:20:21,360
like just like a trade um and um

00:20:19,440 --> 00:20:22,799
once again ignore the last line it's the

00:20:21,360 --> 00:20:26,080
reveal js bucket

00:20:22,799 --> 00:20:28,159
um as you can see it's very simple

00:20:26,080 --> 00:20:29,919
and this is the notification api and

00:20:28,159 --> 00:20:30,320
this is also a real-world example by the

00:20:29,919 --> 00:20:32,159
way

00:20:30,320 --> 00:20:34,080
and this is how you use it once you

00:20:32,159 --> 00:20:36,640
declare it um you can

00:20:34,080 --> 00:20:39,039
instantiate it and then call the the

00:20:36,640 --> 00:20:42,400
methods

00:20:39,039 --> 00:20:45,440
sorry and this will um display

00:20:42,400 --> 00:20:46,000
um a notification on your desktop linux

00:20:45,440 --> 00:20:49,039
based

00:20:46,000 --> 00:20:49,039
desktops up there

00:20:49,280 --> 00:20:55,280
and server side is also

00:20:52,559 --> 00:20:56,080
very simple you create an implementation

00:20:55,280 --> 00:20:59,039
um

00:20:56,080 --> 00:20:59,600
just like you implement a type and you

00:20:59,039 --> 00:21:02,000
use the

00:20:59,600 --> 00:21:02,640
macros to to tell it which interface it

00:21:02,000 --> 00:21:04,799
is

00:21:02,640 --> 00:21:06,480
um you can also declare the default uh

00:21:04,799 --> 00:21:09,679
object path and stuff

00:21:06,480 --> 00:21:11,919
and then to use it you just create

00:21:09,679 --> 00:21:12,720
something we call object server and then

00:21:11,919 --> 00:21:15,440
you can

00:21:12,720 --> 00:21:17,679
you can host multiple interfaces on the

00:21:15,440 --> 00:21:19,679
same object as

00:21:17,679 --> 00:21:22,080
actually i didn't say it but each object

00:21:19,679 --> 00:21:23,520
can have can support multiple interfaces

00:21:22,080 --> 00:21:26,480
and they are dynamic

00:21:23,520 --> 00:21:28,640
um so um an object can have like an

00:21:26,480 --> 00:21:29,520
interface at a specific time and then

00:21:28,640 --> 00:21:31,600
after a while it

00:21:29,520 --> 00:21:33,679
yeah it doesn't so it's called pretty

00:21:31,600 --> 00:21:35,360
dynamic um but in any case

00:21:33,679 --> 00:21:37,679
we you declare it here that okay now

00:21:35,360 --> 00:21:40,159
from now on you you have this interface

00:21:37,679 --> 00:21:41,520
and you just serve it you just you can

00:21:40,159 --> 00:21:44,240
loop it and we

00:21:41,520 --> 00:21:44,559
um we handle all the incoming messages

00:21:44,240 --> 00:21:48,320
uh

00:21:44,559 --> 00:21:50,799
in this loop um

00:21:48,320 --> 00:21:52,480
still not easy enough if you think we

00:21:50,799 --> 00:21:55,280
also provide xml um

00:21:52,480 --> 00:21:56,320
so the debug interface um pro has a

00:21:55,280 --> 00:21:59,600
specification like

00:21:56,320 --> 00:22:02,799
uh for for describing your api

00:21:59,600 --> 00:22:06,159
in a language neutral way and that's xml

00:22:02,799 --> 00:22:08,559
spec um so we provide you a

00:22:06,159 --> 00:22:09,919
way to translate um and you can

00:22:08,559 --> 00:22:13,120
introspect services right

00:22:09,919 --> 00:22:16,000
you can ask them like um give me your um

00:22:13,120 --> 00:22:18,000
a description and it gives you the xml

00:22:16,000 --> 00:22:19,440
um so we automatically do that for you

00:22:18,000 --> 00:22:21,120
so if you implement the service through

00:22:19,440 --> 00:22:22,880
our macros um

00:22:21,120 --> 00:22:24,159
we will deal with the introspection

00:22:22,880 --> 00:22:25,520
request from the client

00:22:24,159 --> 00:22:27,280
for you so you don't need to worry about

00:22:25,520 --> 00:22:30,159
that um and also

00:22:27,280 --> 00:22:30,960
um we have a helper to uh for when the

00:22:30,159 --> 00:22:32,960
first time you

00:22:30,960 --> 00:22:34,320
we want to create for example the client

00:22:32,960 --> 00:22:37,440
uh code

00:22:34,320 --> 00:22:38,240
um uh you uh you don't want to do it all

00:22:37,440 --> 00:22:41,600
manually

00:22:38,240 --> 00:22:44,000
you first want to use

00:22:41,600 --> 00:22:45,600
this helper to create the code for you

00:22:44,000 --> 00:22:47,360
and then you can adjust as you as you

00:22:45,600 --> 00:22:49,840
want

00:22:47,360 --> 00:22:50,400
um but yeah it helps you out to create

00:22:49,840 --> 00:22:55,360
the code

00:22:50,400 --> 00:22:58,000
and the first time and um we have a book

00:22:55,360 --> 00:22:58,640
it's not a big book but um for now at

00:22:58,000 --> 00:23:01,440
least it's a

00:22:58,640 --> 00:23:04,159
small one but um we have like uh right

00:23:01,440 --> 00:23:07,679
sample examples and

00:23:04,159 --> 00:23:11,440
i help you go through the api step by

00:23:07,679 --> 00:23:11,919
um and yeah check it out and let us know

00:23:11,440 --> 00:23:13,280
if you

00:23:11,919 --> 00:23:16,159
if there's something missing or if it

00:23:13,280 --> 00:23:19,280
can be improved and it's in our repo so

00:23:16,159 --> 00:23:21,360
you can improve it on the gitlab um

00:23:19,280 --> 00:23:23,200
it's you don't even need to clone the

00:23:21,360 --> 00:23:26,480
repository it's you can use the

00:23:23,200 --> 00:23:29,039
web front-end to to change the the

00:23:26,480 --> 00:23:31,360
um it's a it's an empty book so it's a

00:23:29,039 --> 00:23:33,600
mark it's markdown so you can just

00:23:31,360 --> 00:23:35,200
you know create the pr right there and

00:23:33,600 --> 00:23:36,000
then and people have done that already

00:23:35,200 --> 00:23:39,200
so

00:23:36,000 --> 00:23:39,200
it's super easy to contribute

00:23:39,280 --> 00:23:41,600
um

00:23:44,159 --> 00:23:47,200
do you see the next slide

00:23:48,159 --> 00:23:52,720
ah okay i have to do the same thing

00:23:50,080 --> 00:23:52,720
again sorry

00:23:59,200 --> 00:24:02,400
i'm sharing your slides if you'd like to

00:24:01,039 --> 00:24:03,360
if you'd like me and just tell me when

00:24:02,400 --> 00:24:06,640
to change the slide

00:24:03,360 --> 00:24:08,000
or you can start sharing again no i'm

00:24:06,640 --> 00:24:10,640
doing it again sorry yeah

00:24:08,000 --> 00:24:10,640
i got useless

00:24:11,200 --> 00:24:14,559
sorry so

00:24:16,240 --> 00:24:20,320
there you go so release or didn't happen

00:24:18,960 --> 00:24:21,840
of course like a lot of people have been

00:24:20,320 --> 00:24:23,360
saying like yeah that all sounds really

00:24:21,840 --> 00:24:24,080
awesome and i've been presenting around

00:24:23,360 --> 00:24:25,520
about it

00:24:24,080 --> 00:24:27,440
and they're like where's the release

00:24:25,520 --> 00:24:31,120
like when can you use it um

00:24:27,440 --> 00:24:31,120
so uh fortunately for you

00:24:31,520 --> 00:24:35,600
and thanks to a lot of thanks to mark

00:24:33,120 --> 00:24:39,039
andre we are almost done

00:24:35,600 --> 00:24:42,240
um i just finished the last uh set of

00:24:39,039 --> 00:24:44,480
essential documentation that we need um

00:24:42,240 --> 00:24:46,400
and then there's one more issue that we

00:24:44,480 --> 00:24:48,799
need to address

00:24:46,400 --> 00:24:49,840
and once that is addressed we intend to

00:24:48,799 --> 00:24:53,440
release either today

00:24:49,840 --> 00:24:55,760
or tomorrow um so stay tuned and we have

00:24:53,440 --> 00:24:58,159
a twitter handle for zebus crate so

00:24:55,760 --> 00:24:59,440
you can you can get the news from there

00:24:58,159 --> 00:25:01,360
um

00:24:59,440 --> 00:25:02,720
so we'll have 1.0 finally and that will

00:25:01,360 --> 00:25:05,919
be awesome and

00:25:02,720 --> 00:25:09,039
everyone will be super happy um

00:25:05,919 --> 00:25:10,960
so future plans um as i said

00:25:09,039 --> 00:25:13,039
we need to support g variant the z

00:25:10,960 --> 00:25:14,159
variant create without that is not very

00:25:13,039 --> 00:25:16,400
useful

00:25:14,159 --> 00:25:18,000
you can use it and if you want to store

00:25:16,400 --> 00:25:21,679
your information is

00:25:18,000 --> 00:25:24,080
in an efficient way already in a deepest

00:25:21,679 --> 00:25:24,720
format yeah you can already use it not a

00:25:24,080 --> 00:25:26,480
problem

00:25:24,720 --> 00:25:29,279
but people already are using the g

00:25:26,480 --> 00:25:32,799
variant format so um that would make it

00:25:29,279 --> 00:25:35,840
even more useful um

00:25:32,799 --> 00:25:37,200
and yeah as you saw um i uh i was we

00:25:35,840 --> 00:25:40,480
were doing the loop

00:25:37,200 --> 00:25:41,919
to receive messages and stuff

00:25:40,480 --> 00:25:43,600
and that is because currently all our

00:25:41,919 --> 00:25:45,760
api is completely sync

00:25:43,600 --> 00:25:47,120
and that's because sync is easier to

00:25:45,760 --> 00:25:50,320
implement than async

00:25:47,120 --> 00:25:52,559
um and um so so but we really

00:25:50,320 --> 00:25:53,840
it's on high on our agendas to to make

00:25:52,559 --> 00:25:56,320
it work

00:25:53,840 --> 00:25:57,520
um again if you want to contribute and

00:25:56,320 --> 00:26:01,440
especially if you are

00:25:57,520 --> 00:26:02,480
um well uh very familiar with async apis

00:26:01,440 --> 00:26:05,440
of um

00:26:02,480 --> 00:26:06,640
for us um then this is a golden

00:26:05,440 --> 00:26:10,799
opportunity for you to

00:26:06,640 --> 00:26:12,799
make a major contribution um and

00:26:10,799 --> 00:26:14,240
when with that we will also provide uh

00:26:12,799 --> 00:26:16,720
some kind of sort of loop

00:26:14,240 --> 00:26:17,360
um the event loop where um you don't

00:26:16,720 --> 00:26:19,840
have to

00:26:17,360 --> 00:26:21,120
you know manually look through the

00:26:19,840 --> 00:26:25,440
incoming messages and

00:26:21,120 --> 00:26:29,039
stuff um so yeah we really want that

00:26:25,440 --> 00:26:30,559
to happen soon uh

00:26:29,039 --> 00:26:32,400
it's uh we're talking about embedded

00:26:30,559 --> 00:26:36,159
here so um no std

00:26:32,400 --> 00:26:37,919
is um in the plans it's in the goals

00:26:36,159 --> 00:26:40,320
uh maybe we can make it work we

00:26:37,919 --> 00:26:43,360
currently do quite a few allocations but

00:26:40,320 --> 00:26:45,360
um we have to do that uh there's

00:26:43,360 --> 00:26:46,400
uh most of them it's a bit hard to get

00:26:45,360 --> 00:26:49,679
around so

00:26:46,400 --> 00:26:53,039
i don't know i cannot guarantee 100

00:26:49,679 --> 00:26:54,559
um but at least we can we can minimize

00:26:53,039 --> 00:26:55,520
the allocation as much as possible we

00:26:54,559 --> 00:26:58,480
already do

00:26:55,520 --> 00:27:00,320
and um we will we will try to make no

00:26:58,480 --> 00:27:03,360
std possible at some point

00:27:00,320 --> 00:27:05,600
um talking of which uh noah look

00:27:03,360 --> 00:27:06,480
um that's that's much harder as i said

00:27:05,600 --> 00:27:08,799
we do quite

00:27:06,480 --> 00:27:09,760
a few allocation and the no std we can

00:27:08,799 --> 00:27:12,880
do um

00:27:09,760 --> 00:27:13,679
you know um but uh no i lock it but it's

00:27:12,880 --> 00:27:16,559
much harder

00:27:13,679 --> 00:27:17,039
so very doubtful um and we need to do

00:27:16,559 --> 00:27:21,840
many

00:27:17,039 --> 00:27:21,840
other fixes improvements of course um

00:27:22,640 --> 00:27:26,000
yeah so that's that's the talk um that

00:27:25,520 --> 00:27:29,120
was the

00:27:26,000 --> 00:27:32,480
actually the last slide so um

00:27:29,120 --> 00:27:35,200
one sec so but in the meantime

00:27:32,480 --> 00:27:36,880
if we have like two minutes or something

00:27:35,200 --> 00:27:38,320
for that

00:27:36,880 --> 00:27:41,200
yeah do you want to talk or would you

00:27:38,320 --> 00:27:44,640
like me to ask some questions

00:27:41,200 --> 00:27:46,960
uh yeah uh questions are nice i'll yeah

00:27:44,640 --> 00:27:48,799
great so uh someone's asking so you

00:27:46,960 --> 00:27:51,039
needed to use dbus in an application for

00:27:48,799 --> 00:27:54,480
embedded linux systems what software

00:27:51,039 --> 00:27:54,480
needed to talk over dbus

00:27:56,960 --> 00:28:01,360
um sorry uh can you could you please

00:27:58,960 --> 00:28:02,559
repeat no worries so what were you using

00:28:01,360 --> 00:28:06,559
that needed to talk

00:28:02,559 --> 00:28:06,559
uh over dbus on embedded linux

00:28:06,640 --> 00:28:12,080
um so um

00:28:10,000 --> 00:28:14,640
my specific use case the because of

00:28:12,080 --> 00:28:17,840
which i started cbus is

00:28:14,640 --> 00:28:20,799
i wasn't using it on um on embedded

00:28:17,840 --> 00:28:21,520
uh which is as i said uh geoclue service

00:28:20,799 --> 00:28:24,000
um but

00:28:21,520 --> 00:28:24,960
um it's used on embedded systems

00:28:24,000 --> 00:28:28,000
including

00:28:24,960 --> 00:28:30,880
um a safe os which

00:28:28,000 --> 00:28:32,320
is uh used on these phones and uh i

00:28:30,880 --> 00:28:35,520
forgot the name of the

00:28:32,320 --> 00:28:37,200
the phone itself um but yeah it's it's

00:28:35,520 --> 00:28:39,440
it's used out there and also

00:28:37,200 --> 00:28:41,600
the old version of geo glue is already

00:28:39,440 --> 00:28:42,480
in in automotive in the cars used

00:28:41,600 --> 00:28:45,840
already

00:28:42,480 --> 00:28:48,559
as far as i know um so yeah um

00:28:45,840 --> 00:28:48,960
uh it's it's useful for at least geoclue

00:28:48,559 --> 00:28:51,520
um

00:28:48,960 --> 00:28:53,039
but there's a lot of services out there

00:28:51,520 --> 00:28:55,919
that like for example systemd

00:28:53,039 --> 00:28:56,399
it is used on embedded systems a lot um

00:28:55,919 --> 00:28:57,919
so

00:28:56,399 --> 00:28:59,600
it will be useful for that for example

00:28:57,919 --> 00:29:03,760
if anyone wants to do any

00:28:59,600 --> 00:29:05,279
um any systemd stuff in rust

00:29:03,760 --> 00:29:07,039
excellent and do you know of anyone

00:29:05,279 --> 00:29:10,960
using z variant or z bus

00:29:07,039 --> 00:29:10,960
in production or in pre-production yet

00:29:11,120 --> 00:29:15,360
uh no as i said zbus is not even

00:29:13,200 --> 00:29:16,399
released so i don't think anyone is

00:29:15,360 --> 00:29:19,360
using it yet

00:29:16,399 --> 00:29:19,679
um but i have been told by many people

00:29:19,360 --> 00:29:23,360
that

00:29:19,679 --> 00:29:25,200
this is something they need um and

00:29:23,360 --> 00:29:27,039
i am pretty sure after the release they

00:29:25,200 --> 00:29:30,159
will feel confident enough to

00:29:27,039 --> 00:29:30,640
start using it um because we don't break

00:29:30,159 --> 00:29:32,080
api

00:29:30,640 --> 00:29:33,520
after the release and that's why the

00:29:32,080 --> 00:29:35,520
release was late because we didn't want

00:29:33,520 --> 00:29:37,760
to do that

00:29:35,520 --> 00:29:39,440
makes a lot of sense i think we've got

00:29:37,760 --> 00:29:40,159
someone's typing but i think that's all

00:29:39,440 --> 00:29:42,159
of the questions

00:29:40,159 --> 00:29:43,520
that we have so thank you again so much

00:29:42,159 --> 00:29:45,679
see sean for being here

00:29:43,520 --> 00:29:47,120
uh we're gonna go to break now for a

00:29:45,679 --> 00:29:49,360
couple minutes and then we'll have our

00:29:47,120 --> 00:29:49,840
next talk i think 45 minutes past the

00:29:49,360 --> 00:29:52,960
hour

00:29:49,840 --> 00:30:06,399
so thank you everyone for watching yeah

00:29:52,960 --> 00:30:06,399

YouTube URL: https://www.youtube.com/watch?v=AoJ76pCmdM4


