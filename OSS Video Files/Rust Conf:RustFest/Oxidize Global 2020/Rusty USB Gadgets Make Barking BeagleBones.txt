Title: Rusty USB Gadgets Make Barking BeagleBones
Publication date: 2020-11-06
Playlist: Oxidize Global 2020
Description: 
	Making a USB device speak is a pain–Rust with a BeagleBone can have your device barking sooner than expected. Rust users often chant “We can have nice things”–and USB device development with Rust is absolutely nicer. 
Each embedded USB stack is unhappy in its own way–a BeagleBone with Rust is standard Linux and all the tools that go with it.

Failures in an embedded USB stack often take down the entire board–Linux USB gadgets run in user space and Rust makes even userspace crashes far less likely. Host software development is hampered by a lack of device hardware and firmware–Rust can make the BeagleBone look like the USB device the host software developers need immediately. Unfortunately, all of this goodness is buried underneath a pile of prerequisite tasks that are neither particularly Rusty nor that well documented.

This talk demonstrates how to cut through the prerequisites and then gets down to the task at hand-decoding and creating USB packets with Rust.
Captions: 
	00:00:03,010 --> 00:00:33,680
[Music]

00:00:32,239 --> 00:00:36,800
so we're happy to

00:00:33,680 --> 00:00:37,280
introduce uh andrew lenforski who has

00:00:36,800 --> 00:00:40,160
actually

00:00:37,280 --> 00:00:41,120
pre-recorded his talk so we're uh here

00:00:40,160 --> 00:00:42,960
to say hi

00:00:41,120 --> 00:00:46,640
and he'll be answering questions

00:00:42,960 --> 00:00:46,640
throughout the talk in the chat

00:00:46,960 --> 00:00:50,879
and uh yeah and then we'll come back

00:00:48,800 --> 00:00:51,440
together after his talk to answer any of

00:00:50,879 --> 00:00:53,440
the uh

00:00:51,440 --> 00:00:55,039
important questions from the chat so

00:00:53,440 --> 00:00:57,199
without uh any further ado

00:00:55,039 --> 00:00:58,960
here is rusty usb gadgets make barking

00:00:57,199 --> 00:01:13,840
beaglebones

00:00:58,960 --> 00:01:13,840
off and running thanks thanks james

00:01:20,720 --> 00:01:24,479
oh flocky we don't have any audio right

00:01:24,840 --> 00:01:27,840
now

00:01:36,479 --> 00:01:41,520
yeah yo audio

00:01:40,079 --> 00:01:43,280
all right well we're sorting out some of

00:01:41,520 --> 00:01:46,720
that audio we'll be back shortly as soon

00:01:43,280 --> 00:01:46,720
as we uh as soon as we sort out the

00:01:52,840 --> 00:01:55,840
audio

00:02:06,840 --> 00:02:09,840
oh

00:02:10,560 --> 00:02:14,080
greetings fellow oxidizers and welcome

00:02:12,959 --> 00:02:17,520
to this session

00:02:14,080 --> 00:02:20,560
of oxidized global 20 20. future usb

00:02:17,520 --> 00:02:22,720
gadgets make barking beagle bones i'm

00:02:20,560 --> 00:02:25,440
your host andrew lenforski

00:02:22,720 --> 00:02:27,280
saying hello greetings y'all i'm

00:02:25,440 --> 00:02:29,120
actually coming at you from austin texas

00:02:27,280 --> 00:02:30,800
right now so i actually get to use that

00:02:29,120 --> 00:02:32,640
particular contraction

00:02:30,800 --> 00:02:35,120
and since this is my first time actually

00:02:32,640 --> 00:02:37,840
doing videos i guess i need to do this

00:02:35,120 --> 00:02:38,879
yo yo yo youtube make sure you actually

00:02:37,840 --> 00:02:40,879
smack that button

00:02:38,879 --> 00:02:43,120
ring that bell and make and hit those

00:02:40,879 --> 00:02:43,840
likes and now presumably i actually have

00:02:43,120 --> 00:02:47,360
to give you

00:02:43,840 --> 00:02:48,400
youtube face okay and now that we've got

00:02:47,360 --> 00:02:50,160
that out of the way

00:02:48,400 --> 00:02:52,400
we can actually get back to what's going

00:02:50,160 --> 00:02:52,400
on

00:02:52,720 --> 00:02:56,239
what are we actually going to be doing

00:02:54,400 --> 00:02:58,319
in this session well we're going to

00:02:56,239 --> 00:03:00,080
convert a beaglebone which is the thing

00:02:58,319 --> 00:03:01,599
you see here on the left

00:03:00,080 --> 00:03:03,920
and we're going to convert it into a

00:03:01,599 --> 00:03:06,080
mouse this seems like an awful waste of

00:03:03,920 --> 00:03:07,760
a lot of hardware and it actually is

00:03:06,080 --> 00:03:09,200
but it turns out that this is actually

00:03:07,760 --> 00:03:10,400
the first step whenever you want to

00:03:09,200 --> 00:03:14,560
create any form

00:03:10,400 --> 00:03:18,400
of usb usb hid device inside linux

00:03:14,560 --> 00:03:20,239
and actually make it work so who am i

00:03:18,400 --> 00:03:22,560
i'm currently the vp of engineering for

00:03:20,239 --> 00:03:25,680
third wave we're an iot company

00:03:22,560 --> 00:03:26,720
and we specialize in secured fda cleared

00:03:25,680 --> 00:03:29,920
systems

00:03:26,720 --> 00:03:32,480
i'm an expatriate full custom vlsi

00:03:29,920 --> 00:03:34,640
designer now hides behind software so

00:03:32,480 --> 00:03:36,720
when everybody says full stack i laugh a

00:03:34,640 --> 00:03:37,519
little bit because my full stack goes

00:03:36,720 --> 00:03:39,360
down to a few

00:03:37,519 --> 00:03:42,000
orders of magnitude smaller than most

00:03:39,360 --> 00:03:42,720
people's i first wrote c on an os9

00:03:42,000 --> 00:03:44,239
system so

00:03:42,720 --> 00:03:46,319
you know you can tell this beard's

00:03:44,239 --> 00:03:48,239
getting very gray at some point

00:03:46,319 --> 00:03:49,840
along the line i actually became the

00:03:48,239 --> 00:03:51,599
oldest dude in the room instead of the

00:03:49,840 --> 00:03:53,439
youngest dude in the room and somehow i

00:03:51,599 --> 00:03:54,799
didn't seem to pass in between the two

00:03:53,439 --> 00:03:57,280
states it just went from one to the

00:03:54,799 --> 00:03:58,959
other i guess it's a quantum thing

00:03:57,280 --> 00:04:00,480
so i've written some other code which

00:03:58,959 --> 00:04:02,159
you can go dig through but we've got a

00:04:00,480 --> 00:04:04,239
lot of stuff to cover so i don't want to

00:04:02,159 --> 00:04:07,280
waste a lot of time on that

00:04:04,239 --> 00:04:08,640
why am i doing this or more particularly

00:04:07,280 --> 00:04:09,599
why would you want to do this you want

00:04:08,640 --> 00:04:11,840
to make a usb

00:04:09,599 --> 00:04:13,439
device generally this is meant to

00:04:11,840 --> 00:04:14,720
interconnect some piece of hardware

00:04:13,439 --> 00:04:16,959
interface to windows

00:04:14,720 --> 00:04:19,199
and quite often building the usb device

00:04:16,959 --> 00:04:20,639
code and linux is way easier than

00:04:19,199 --> 00:04:22,000
dealing with it in a microcontroller

00:04:20,639 --> 00:04:24,080
development kit

00:04:22,000 --> 00:04:26,080
in particular in this instance we're

00:04:24,080 --> 00:04:27,680
actually building a hidden mouse which

00:04:26,080 --> 00:04:29,520
is one of the simplest things

00:04:27,680 --> 00:04:31,840
so there's a little bit more boilerplate

00:04:29,520 --> 00:04:34,400
than actually you would normally give

00:04:31,840 --> 00:04:35,199
but in this particular relative to the

00:04:34,400 --> 00:04:37,280
um

00:04:35,199 --> 00:04:38,320
functional code but this actually

00:04:37,280 --> 00:04:39,759
generally holds

00:04:38,320 --> 00:04:41,759
the biggest problem when doing this

00:04:39,759 --> 00:04:43,520
generally is documentation um

00:04:41,759 --> 00:04:45,680
the issue is that a lot of this stuff is

00:04:43,520 --> 00:04:47,919
scattered around in bits and pieces

00:04:45,680 --> 00:04:50,240
not all of it presented into a coherent

00:04:47,919 --> 00:04:52,800
whole and not all of it presented into

00:04:50,240 --> 00:04:54,639
functions where you can actually work

00:04:52,800 --> 00:04:56,400
in this instance i actually have

00:04:54,639 --> 00:04:58,479
committed the code to a code repository

00:04:56,400 --> 00:05:00,800
i put that on the entry slide

00:04:58,479 --> 00:05:02,560
and you all can dig that down so if you

00:05:00,800 --> 00:05:04,400
want to follow along at home you can

00:05:02,560 --> 00:05:06,960
i suspect it's a bit early for most of

00:05:04,400 --> 00:05:09,120
the folks in in europe right now

00:05:06,960 --> 00:05:10,560
so they probably will be following along

00:05:09,120 --> 00:05:12,160
later but if you want to download it

00:05:10,560 --> 00:05:13,759
it's there

00:05:12,160 --> 00:05:15,360
in this instance we have a hidden mouse

00:05:13,759 --> 00:05:17,520
driver which is what i'm going to do

00:05:15,360 --> 00:05:18,880
in this talk and i've actually got a hid

00:05:17,520 --> 00:05:21,440
generic driver which does

00:05:18,880 --> 00:05:22,720
echo systems and that's not actually

00:05:21,440 --> 00:05:25,840
going to be covered in this talk because

00:05:22,720 --> 00:05:25,840
i've only got 20 minutes

00:05:27,120 --> 00:05:31,360
so let me give a baseline here what's

00:05:29,440 --> 00:05:32,560
actually a beaglebone when i actually

00:05:31,360 --> 00:05:34,240
tried giving

00:05:32,560 --> 00:05:36,400
explaining the concept of this talk to

00:05:34,240 --> 00:05:38,000
some people that was actually the first

00:05:36,400 --> 00:05:41,440
question that they gave me

00:05:38,000 --> 00:05:43,919
in particular a bagel bone is a

00:05:41,440 --> 00:05:44,880
arm-based microcomputer with actual

00:05:43,919 --> 00:05:47,039
linux os

00:05:44,880 --> 00:05:49,199
on it it's an arm it's one gigahertz

00:05:47,039 --> 00:05:50,800
it's got five full mega ram and it does

00:05:49,199 --> 00:05:52,720
micro sd storage

00:05:50,800 --> 00:05:54,320
a bagel bone black which is the thing

00:05:52,720 --> 00:05:56,400
you saw here on the left

00:05:54,320 --> 00:05:58,000
actually is about fifty dollars and the

00:05:56,400 --> 00:06:00,720
thing on the right is called a pocket

00:05:58,000 --> 00:06:02,560
beagle it's actually about 25

00:06:00,720 --> 00:06:04,240
both of these are widely available and

00:06:02,560 --> 00:06:05,039
both of them have roughly speaking the

00:06:04,240 --> 00:06:07,919
same

00:06:05,039 --> 00:06:09,680
uh the same interfaces they all have

00:06:07,919 --> 00:06:11,600
standard you computer interfaces the

00:06:09,680 --> 00:06:13,759
beaglebone black is a little more

00:06:11,600 --> 00:06:16,240
it's already pinned out so as you can

00:06:13,759 --> 00:06:17,680
see it's got ethernet usb host hdmi

00:06:16,240 --> 00:06:19,520
micro sd

00:06:17,680 --> 00:06:22,720
these things also have standard embedded

00:06:19,520 --> 00:06:25,600
interfaces usb devices gpios spi

00:06:22,720 --> 00:06:26,400
and igc uarts cans lcds and a bunch of

00:06:25,600 --> 00:06:28,880
other useful

00:06:26,400 --> 00:06:30,240
stuff they also have what are called

00:06:28,880 --> 00:06:32,400
prus that's

00:06:30,240 --> 00:06:34,160
probably a talk for another time these

00:06:32,400 --> 00:06:35,759
are a pair of 200 megahertz risk cores

00:06:34,160 --> 00:06:36,880
that just have some really useful

00:06:35,759 --> 00:06:38,560
weirdness to them

00:06:36,880 --> 00:06:41,199
one of them in particular is that you

00:06:38,560 --> 00:06:42,240
can actually load 32 registers between

00:06:41,199 --> 00:06:44,319
the two pairs

00:06:42,240 --> 00:06:45,600
between the actual risk microcontrollers

00:06:44,319 --> 00:06:48,080
in one clock cycle

00:06:45,600 --> 00:06:49,039
that works really really well when you

00:06:48,080 --> 00:06:51,360
want to actually

00:06:49,039 --> 00:06:53,039
move something from hard real time in

00:06:51,360 --> 00:06:54,240
the soft real time and then actually

00:06:53,039 --> 00:06:55,599
even the softer

00:06:54,240 --> 00:06:57,440
when you're actually moving it down to

00:06:55,599 --> 00:06:59,919
linux but that's a talk for another day

00:06:57,440 --> 00:07:02,160
we don't have time to go into that

00:06:59,919 --> 00:07:03,120
second baseline what's actually a usb

00:07:02,160 --> 00:07:05,280
hid device

00:07:03,120 --> 00:07:06,880
a usb hid device is nominally supposed

00:07:05,280 --> 00:07:09,520
to be a human interface device

00:07:06,880 --> 00:07:11,440
so these are things like keyboards mice

00:07:09,520 --> 00:07:12,080
game controllers foot pedals stuff like

00:07:11,440 --> 00:07:13,520
that

00:07:12,080 --> 00:07:15,840
these kind of devices want to be

00:07:13,520 --> 00:07:17,440
guaranteed to be pulled regularly so

00:07:15,840 --> 00:07:19,440
in the case of keyboards they want to

00:07:17,440 --> 00:07:21,520
make sure that you pull something like

00:07:19,440 --> 00:07:22,960
once every millisecond or once every

00:07:21,520 --> 00:07:24,720
couple of milliseconds

00:07:22,960 --> 00:07:27,120
they generally return small amounts of

00:07:24,720 --> 00:07:27,840
data in this particular case 64 bytes or

00:07:27,120 --> 00:07:30,000
less

00:07:27,840 --> 00:07:31,759
that's actually limitation of full speed

00:07:30,000 --> 00:07:33,280
if you actually have a high speed device

00:07:31,759 --> 00:07:34,880
they can return a lot more data but

00:07:33,280 --> 00:07:36,639
we're not going to cover that

00:07:34,880 --> 00:07:38,720
and these happen to comply with what's

00:07:36,639 --> 00:07:40,639
called the device class definition for

00:07:38,720 --> 00:07:42,319
the human interface device these

00:07:40,639 --> 00:07:44,639
particular mechanisms are actually

00:07:42,319 --> 00:07:46,879
defined by the usb consortium

00:07:44,639 --> 00:07:49,120
and actually are something that we

00:07:46,879 --> 00:07:51,599
actually normally comply with

00:07:49,120 --> 00:07:52,240
usb hid devices these are standard

00:07:51,599 --> 00:07:54,879
devices

00:07:52,240 --> 00:07:55,919
your everyday ordinary wired keyboard

00:07:54,879 --> 00:07:57,520
wired mouse

00:07:55,919 --> 00:07:59,280
foot pedals are something people often

00:07:57,520 --> 00:08:00,720
forget about they're actually hit device

00:07:59,280 --> 00:08:02,319
we'll talk about that a little bit later

00:08:00,720 --> 00:08:03,360
as well they present some interesting

00:08:02,319 --> 00:08:06,479
problems

00:08:03,360 --> 00:08:08,160
and probably even your your usb keys

00:08:06,479 --> 00:08:09,840
the things you use for authentication

00:08:08,160 --> 00:08:11,039
are a standard our standard human

00:08:09,840 --> 00:08:13,360
interface device

00:08:11,039 --> 00:08:14,639
generally now there's no particular

00:08:13,360 --> 00:08:16,319
reason they're not exchanging huge

00:08:14,639 --> 00:08:17,919
amounts of information so they probably

00:08:16,319 --> 00:08:20,800
sit there although some of them may be

00:08:17,919 --> 00:08:22,479
slightly different these also are usb

00:08:20,800 --> 00:08:24,080
hid devices i know some of people will

00:08:22,479 --> 00:08:25,599
recognize these especially embedded

00:08:24,080 --> 00:08:28,080
these are debug probes

00:08:25,599 --> 00:08:30,960
so and this over here is actually an rf

00:08:28,080 --> 00:08:34,959
attenuator and this is a usb to ieee

00:08:30,960 --> 00:08:36,640
488 gpib converter system

00:08:34,959 --> 00:08:39,039
the interesting question here is these

00:08:36,640 --> 00:08:40,560
are also human interface devices so

00:08:39,039 --> 00:08:42,240
a bit about you're probably scratching

00:08:40,560 --> 00:08:43,440
your head a little bit as to why that

00:08:42,240 --> 00:08:44,800
these would be considered human

00:08:43,440 --> 00:08:46,320
interface devices

00:08:44,800 --> 00:08:48,480
well you're about to scratch your head

00:08:46,320 --> 00:08:49,120
more these are also human interface

00:08:48,480 --> 00:08:51,120
devices

00:08:49,120 --> 00:08:52,560
in fact there's actually 96 of these

00:08:51,120 --> 00:08:54,880
this is actually a

00:08:52,560 --> 00:08:56,160
fixture for accelerated testing that i

00:08:54,880 --> 00:08:58,080
worked on in the past

00:08:56,160 --> 00:09:00,000
these are actually sold to people and

00:08:58,080 --> 00:09:01,040
actually are in fabrication lines and

00:09:00,000 --> 00:09:02,720
things like that

00:09:01,040 --> 00:09:04,080
every one of these devices is actually a

00:09:02,720 --> 00:09:06,720
human interface device

00:09:04,080 --> 00:09:08,959
in particular these are 96 and this go

00:09:06,720 --> 00:09:11,279
the entire system actually has a lot

00:09:08,959 --> 00:09:13,519
and is all driven off of one in fact

00:09:11,279 --> 00:09:15,519
it's probably one of the larger usb hid

00:09:13,519 --> 00:09:16,080
systems you've seen it actually has 96

00:09:15,519 --> 00:09:17,680
usb

00:09:16,080 --> 00:09:20,640
devices that presents some interesting

00:09:17,680 --> 00:09:21,920
problems in an undo itself

00:09:20,640 --> 00:09:24,240
oh the interesting question you're

00:09:21,920 --> 00:09:25,680
probably asking now is what in the world

00:09:24,240 --> 00:09:27,360
are you talking about with human

00:09:25,680 --> 00:09:29,040
interface device and what does that have

00:09:27,360 --> 00:09:32,000
to do with what's going on

00:09:29,040 --> 00:09:33,120
in this particular instance it's a

00:09:32,000 --> 00:09:34,800
particular

00:09:33,120 --> 00:09:36,800
someone call it abuse of the hidden

00:09:34,800 --> 00:09:37,920
specification but quite often

00:09:36,800 --> 00:09:39,920
there were actually very good

00:09:37,920 --> 00:09:41,920
engineering reasons for this

00:09:39,920 --> 00:09:44,160
back in the old days we tended to create

00:09:41,920 --> 00:09:44,959
hid devices for two for two primary

00:09:44,160 --> 00:09:47,200
reasons

00:09:44,959 --> 00:09:48,320
the primary reason was that for many

00:09:47,200 --> 00:09:50,880
many many years

00:09:48,320 --> 00:09:52,480
the only way to actually attach a usb

00:09:50,880 --> 00:09:54,800
device to windows without actually

00:09:52,480 --> 00:09:56,480
having to write or install a driver

00:09:54,800 --> 00:09:58,640
was actually to call it a human

00:09:56,480 --> 00:09:59,360
interface device if you could get away

00:09:58,640 --> 00:10:01,040
with that

00:09:59,360 --> 00:10:02,880
you could actually attach a thing

00:10:01,040 --> 00:10:04,880
directly to windows and then you could

00:10:02,880 --> 00:10:06,079
start attaching it with via various

00:10:04,880 --> 00:10:08,000
windows calls

00:10:06,079 --> 00:10:10,000
in particular a lot of things were

00:10:08,000 --> 00:10:11,680
written in visual basic six which is

00:10:10,000 --> 00:10:13,360
probably too old for some of you

00:10:11,680 --> 00:10:16,560
maybe even a lot of you who are watching

00:10:13,360 --> 00:10:18,800
this talk but because that's circa 1996

00:10:16,560 --> 00:10:21,120
but that was the way it was back then a

00:10:18,800 --> 00:10:24,240
secondary reason was that

00:10:21,120 --> 00:10:24,640
um usb end points were minimized when

00:10:24,240 --> 00:10:27,200
you were

00:10:24,640 --> 00:10:28,240
using hid devices so you really only

00:10:27,200 --> 00:10:30,160
needed

00:10:28,240 --> 00:10:31,760
you you only needed two end points when

00:10:30,160 --> 00:10:33,040
you were doing this besides normally

00:10:31,760 --> 00:10:35,040
your end point zero

00:10:33,040 --> 00:10:36,240
and that was a minimum back when ram

00:10:35,040 --> 00:10:38,640
usage was a big deal

00:10:36,240 --> 00:10:40,720
that really mattered so some of these

00:10:38,640 --> 00:10:42,720
usb devices were built usb

00:10:40,720 --> 00:10:44,160
full speed i don't think i've ever seen

00:10:42,720 --> 00:10:46,079
anything below that

00:10:44,160 --> 00:10:47,519
but these were running on devices that

00:10:46,079 --> 00:10:50,079
had maybe up to

00:10:47,519 --> 00:10:51,120
a couple kilobytes of ram and maybe 32k

00:10:50,079 --> 00:10:53,120
of flash

00:10:51,120 --> 00:10:54,240
this obviously isn't a particular

00:10:53,120 --> 00:10:56,480
consideration now

00:10:54,240 --> 00:10:57,839
but that does actually that was why a

00:10:56,480 --> 00:11:00,560
lot of these were chosen

00:10:57,839 --> 00:11:02,160
and especially when they rolled forward

00:11:00,560 --> 00:11:03,839
so one of the questions you need to ask

00:11:02,160 --> 00:11:04,959
is why would you want to implement a new

00:11:03,839 --> 00:11:06,640
hid device

00:11:04,959 --> 00:11:08,720
um one of the things is you might

00:11:06,640 --> 00:11:10,000
actually need an actual hid human

00:11:08,720 --> 00:11:12,079
interface device

00:11:10,000 --> 00:11:13,600
in one particular instance that i bumped

00:11:12,079 --> 00:11:15,600
into i needed

00:11:13,600 --> 00:11:17,200
multiple foot pedals these foot pedals

00:11:15,600 --> 00:11:19,279
that you saw earlier don't

00:11:17,200 --> 00:11:21,279
tend to cooperate very nicely whenever

00:11:19,279 --> 00:11:23,200
they're plugged into multiple systems

00:11:21,279 --> 00:11:25,600
so if you can actually concentrate them

00:11:23,200 --> 00:11:27,519
into a usb into a usb hub

00:11:25,600 --> 00:11:29,360
and then use a hid device to actually

00:11:27,519 --> 00:11:31,519
pull all the things together

00:11:29,360 --> 00:11:32,959
that's fine in addition quite often if

00:11:31,519 --> 00:11:34,560
you want to use the foot pedal for

00:11:32,959 --> 00:11:37,839
something like a control

00:11:34,560 --> 00:11:39,680
a control key or a modifier key

00:11:37,839 --> 00:11:41,440
not all operating systems will actually

00:11:39,680 --> 00:11:42,000
allow you to do that directly where they

00:11:41,440 --> 00:11:45,120
can combine

00:11:42,000 --> 00:11:46,560
a modifier on one usb device and a key

00:11:45,120 --> 00:11:48,000
pressed on another device like a

00:11:46,560 --> 00:11:49,519
keyboard

00:11:48,000 --> 00:11:52,079
a second reason why you might want to

00:11:49,519 --> 00:11:52,320
implement a do a human interface device

00:11:52,079 --> 00:11:53,760
is

00:11:52,320 --> 00:11:54,959
you may actually have new armor that

00:11:53,760 --> 00:11:56,240
just you want to get your software

00:11:54,959 --> 00:11:57,279
development team up and running

00:11:56,240 --> 00:11:59,200
immediately

00:11:57,279 --> 00:12:01,519
a lot of stuff can be faked on these

00:11:59,200 --> 00:12:02,880
particular mechanisms and you know to be

00:12:01,519 --> 00:12:04,399
perfectly honest you can actually

00:12:02,880 --> 00:12:05,920
implement a lot of stuff in a linux

00:12:04,399 --> 00:12:08,079
computer

00:12:05,920 --> 00:12:08,959
you can also upgrade usb full speed to

00:12:08,079 --> 00:12:10,800
high speed

00:12:08,959 --> 00:12:12,800
most microcontrollers are still running

00:12:10,800 --> 00:12:14,240
at full speed they haven't

00:12:12,800 --> 00:12:15,760
there are a few that have made the jump

00:12:14,240 --> 00:12:16,880
to high speed they tend to be more

00:12:15,760 --> 00:12:18,800
expensive

00:12:16,880 --> 00:12:20,399
whereas most of the linux computers all

00:12:18,800 --> 00:12:23,040
run at least at high speed

00:12:20,399 --> 00:12:24,639
in addition usbc is just not on the map

00:12:23,040 --> 00:12:26,959
for microcontrollers whereas

00:12:24,639 --> 00:12:28,480
a lot of the unix linux systems are

00:12:26,959 --> 00:12:30,240
actually running usbc

00:12:28,480 --> 00:12:31,920
they're a little bit more expensive but

00:12:30,240 --> 00:12:33,600
they're actually have usbc

00:12:31,920 --> 00:12:35,200
today including all the bandwidth that

00:12:33,600 --> 00:12:36,959
goes along with that

00:12:35,200 --> 00:12:38,720
you may also want to be adding features

00:12:36,959 --> 00:12:39,360
to a domain specific device that uses

00:12:38,720 --> 00:12:41,519
hid

00:12:39,360 --> 00:12:43,040
in my instance that was the actual

00:12:41,519 --> 00:12:44,959
reason why i wanted to do this

00:12:43,040 --> 00:12:47,279
in particular i had some issues with

00:12:44,959 --> 00:12:48,880
debug probes we were using them in very

00:12:47,279 --> 00:12:50,639
high volume mechanisms

00:12:48,880 --> 00:12:52,079
as well as we wanted to do certain

00:12:50,639 --> 00:12:55,519
things like add encryption

00:12:52,079 --> 00:12:57,839
keys and install install as well as

00:12:55,519 --> 00:13:00,000
check the device at the same time

00:12:57,839 --> 00:13:01,600
you may also have a legacy thing one of

00:13:00,000 --> 00:13:03,200
the things that you saw earlier was the

00:13:01,600 --> 00:13:06,880
fact that we actually had

00:13:03,200 --> 00:13:08,720
a ieee 488 interface that's called gpib

00:13:06,880 --> 00:13:10,880
that standard goes the way back to the

00:13:08,720 --> 00:13:12,560
70s but still a lot of lab equipment

00:13:10,880 --> 00:13:14,560
uses it especially things like

00:13:12,560 --> 00:13:16,320
spectrum analyzers and vector network

00:13:14,560 --> 00:13:19,200
analyzers which are fairly expensive

00:13:16,320 --> 00:13:20,240
pieces of rf equipment so the real

00:13:19,200 --> 00:13:22,720
question here is

00:13:20,240 --> 00:13:24,160
how do we create a hit on linux in this

00:13:22,720 --> 00:13:25,519
particular instance the first thing we

00:13:24,160 --> 00:13:27,519
need to do is we need to take over the

00:13:25,519 --> 00:13:29,519
gadget system because we don't do that

00:13:27,519 --> 00:13:30,639
what happened you know the beaglebones

00:13:29,519 --> 00:13:33,920
actually

00:13:30,639 --> 00:13:36,240
make use of the gadget system themselves

00:13:33,920 --> 00:13:39,360
so when you plug them directly into

00:13:36,240 --> 00:13:40,560
your usb device or your usb hub or your

00:13:39,360 --> 00:13:43,120
usb computer

00:13:40,560 --> 00:13:44,639
they automatically come up as a ethernet

00:13:43,120 --> 00:13:46,079
device in fact they come with two

00:13:44,639 --> 00:13:47,920
different ethernet devices

00:13:46,079 --> 00:13:49,279
one for linux one for windows we can

00:13:47,920 --> 00:13:50,560
talk about that that's something for

00:13:49,279 --> 00:13:52,720
much later

00:13:50,560 --> 00:13:54,000
and so we need to take care of that the

00:13:52,720 --> 00:13:56,079
next thing you do is you need to

00:13:54,000 --> 00:13:57,760
actually set up the usb gadget on linux

00:13:56,079 --> 00:13:59,680
using the config fs

00:13:57,760 --> 00:14:01,920
if you use the config fs you actually

00:13:59,680 --> 00:14:03,360
have to do some fairly magical things

00:14:01,920 --> 00:14:05,120
they're straightforward

00:14:03,360 --> 00:14:06,880
not all of them are duplicate not all of

00:14:05,120 --> 00:14:08,880
them are documented sorry

00:14:06,880 --> 00:14:10,160
and several of them are gener generally

00:14:08,880 --> 00:14:10,959
when they are documented they're in

00:14:10,160 --> 00:14:12,639
pieces so

00:14:10,959 --> 00:14:14,160
this actually gives you a full i will

00:14:12,639 --> 00:14:14,880
give you a full script it's in the code

00:14:14,160 --> 00:14:16,880
base

00:14:14,880 --> 00:14:18,560
where you get all the pieces you need in

00:14:16,880 --> 00:14:19,760
order to actually bring that descriptor

00:14:18,560 --> 00:14:21,199
up and running

00:14:19,760 --> 00:14:22,720
finally you need to attach to the

00:14:21,199 --> 00:14:24,480
created character device and then you

00:14:22,720 --> 00:14:26,000
read and write the usb reports in this

00:14:24,480 --> 00:14:27,120
particular instance we're going to be

00:14:26,000 --> 00:14:28,880
using rust

00:14:27,120 --> 00:14:30,800
but you don't actually have to be using

00:14:28,880 --> 00:14:32,399
rust that's not a requirement here

00:14:30,800 --> 00:14:34,000
linux takes over some of the heavy

00:14:32,399 --> 00:14:36,800
lifting so it actually

00:14:34,000 --> 00:14:38,160
avoids having to be required to do it in

00:14:36,800 --> 00:14:40,079
fast real time

00:14:38,160 --> 00:14:41,199
so you could even use c in python we're

00:14:40,079 --> 00:14:43,519
going to use rust

00:14:41,199 --> 00:14:44,720
we have to use epoll that's kind of

00:14:43,519 --> 00:14:46,480
annoying but

00:14:44,720 --> 00:14:48,399
we're going to do that because it

00:14:46,480 --> 00:14:49,519
actually works and you need to see

00:14:48,399 --> 00:14:51,440
what's going on

00:14:49,519 --> 00:14:53,040
a lot of the rust libraries wrap that

00:14:51,440 --> 00:14:53,760
and they swallow it and they do weird

00:14:53,040 --> 00:14:55,360
things

00:14:53,760 --> 00:14:57,519
so we need to use it directly which

00:14:55,360 --> 00:15:00,560
means we're going to call it c

00:14:57,519 --> 00:15:02,959
and after that it's alive so

00:15:00,560 --> 00:15:04,639
let's see how we're going to do this

00:15:02,959 --> 00:15:05,680
let's start looking at what's going on

00:15:04,639 --> 00:15:08,079
here

00:15:05,680 --> 00:15:12,079
so the first thing i said is that we

00:15:08,079 --> 00:15:15,600
need to grab a hold of

00:15:12,079 --> 00:15:18,560
actual we need to grab a hold of the

00:15:15,600 --> 00:15:20,880
usb device and we need to grab all the

00:15:18,560 --> 00:15:23,040
gadget system

00:15:20,880 --> 00:15:25,519
in order to actually do what we need to

00:15:23,040 --> 00:15:25,519
do here

00:15:25,600 --> 00:15:28,560
in this instance

00:15:29,279 --> 00:15:32,560
this system actually

00:15:36,240 --> 00:15:38,880
what we're doing is we're actually

00:15:37,360 --> 00:15:41,839
taking down what's called the composite

00:15:38,880 --> 00:15:41,839
system

00:15:43,040 --> 00:15:46,959
and this is actually specific to the

00:15:45,120 --> 00:15:48,480
beaglebone black

00:15:46,959 --> 00:15:51,360
or it's actually specific to the

00:15:48,480 --> 00:15:54,079
beaglebone family is probably a better

00:15:51,360 --> 00:15:56,000
description of it in this particular

00:15:54,079 --> 00:15:59,759
instance a lot of what we're doing here

00:15:56,000 --> 00:15:59,759
certainly also can be used

00:16:00,880 --> 00:16:04,399
with a raspberry pi there's nothing

00:16:02,720 --> 00:16:06,160
stopping you from doing this the gadget

00:16:04,399 --> 00:16:09,600
subsystem is the same

00:16:06,160 --> 00:16:11,360
and now let's reboot that beaglebone

00:16:09,600 --> 00:16:13,120
while we're talking about that so

00:16:11,360 --> 00:16:14,959
there's actually nothing which is

00:16:13,120 --> 00:16:16,399
which is stopping you from using this on

00:16:14,959 --> 00:16:18,720
a raspberry pi

00:16:16,399 --> 00:16:19,440
and it doesn't matter what linux system

00:16:18,720 --> 00:16:22,480
you're on

00:16:19,440 --> 00:16:24,399
the gadget system works the same way so

00:16:22,480 --> 00:16:26,720
i've already cloned my repository in

00:16:24,399 --> 00:16:27,279
here so we've got a barking beaglebone

00:16:26,720 --> 00:16:30,639
system

00:16:27,279 --> 00:16:31,600
and we're going to go down into the hit

00:16:30,639 --> 00:16:33,040
generic

00:16:31,600 --> 00:16:34,079
sorry the hidden mouse because that's

00:16:33,040 --> 00:16:36,000
what we're actually doing in this

00:16:34,079 --> 00:16:38,000
particular instance

00:16:36,000 --> 00:16:40,000
and we're going to take a quick look at

00:16:38,000 --> 00:16:41,600
the actual script that does this

00:16:40,000 --> 00:16:44,880
in order so that we can see what's going

00:16:41,600 --> 00:16:47,040
on in this particular instance

00:16:44,880 --> 00:16:48,240
the script starts off with i go to the

00:16:47,040 --> 00:16:50,720
top where

00:16:48,240 --> 00:16:52,320
we actually tell the linux kernel that

00:16:50,720 --> 00:16:53,199
we actually need to use a lib composite

00:16:52,320 --> 00:16:56,399
system

00:16:53,199 --> 00:16:58,639
and this actually pulls in the requisite

00:16:56,399 --> 00:17:00,800
modules that go along with that

00:16:58,639 --> 00:17:02,079
we actually then go into the config fs

00:17:00,800 --> 00:17:03,519
space of the confirm

00:17:02,079 --> 00:17:06,640
of the kernel which is where we're going

00:17:03,519 --> 00:17:08,799
to actually have to put our usb gadget

00:17:06,640 --> 00:17:10,400
um we make our own directory in here to

00:17:08,799 --> 00:17:11,839
actually hold what's going on and then

00:17:10,400 --> 00:17:14,000
we see into it you

00:17:11,839 --> 00:17:14,959
i there's no point in me being redundant

00:17:14,000 --> 00:17:16,559
about that

00:17:14,959 --> 00:17:17,839
we're going to define some variables

00:17:16,559 --> 00:17:20,000
these variables are then going to get

00:17:17,839 --> 00:17:22,559
picked up by the gadget driver

00:17:20,000 --> 00:17:23,280
in order to actually fill out usb

00:17:22,559 --> 00:17:26,400
reports

00:17:23,280 --> 00:17:29,200
when it actually needs it this is a

00:17:26,400 --> 00:17:31,120
particularly interesting problem in that

00:17:29,200 --> 00:17:32,960
what will happen is linux will intercept

00:17:31,120 --> 00:17:34,000
most of the calls and so the only thing

00:17:32,960 --> 00:17:35,600
we have to do in re

00:17:34,000 --> 00:17:37,120
the only thing we have to deal with are

00:17:35,600 --> 00:17:39,919
the actual reports

00:17:37,120 --> 00:17:41,840
all the things like knacks stalls um

00:17:39,919 --> 00:17:43,760
unplug events replug events will be

00:17:41,840 --> 00:17:45,280
handled by linux

00:17:43,760 --> 00:17:47,760
we're gonna this tells us we're using

00:17:45,280 --> 00:17:51,039
the two usb 2.0 specification

00:17:47,760 --> 00:17:52,400
or later vendor is normally issued by

00:17:51,039 --> 00:17:54,720
this is a code that will be issued by

00:17:52,400 --> 00:17:55,600
the usb consortium if you actually need

00:17:54,720 --> 00:17:57,600
that

00:17:55,600 --> 00:17:59,840
this is a product id if we actually need

00:17:57,600 --> 00:18:02,240
that as to where we're going with that

00:17:59,840 --> 00:18:03,760
we define that as well as the version

00:18:02,240 --> 00:18:05,440
in this instance again some other

00:18:03,760 --> 00:18:07,280
strings so when we actually

00:18:05,440 --> 00:18:09,200
these are these are generally by

00:18:07,280 --> 00:18:11,440
convention they exist

00:18:09,200 --> 00:18:13,039
and we can actually create a a

00:18:11,440 --> 00:18:13,679
configuration descriptor the most

00:18:13,039 --> 00:18:15,760
important

00:18:13,679 --> 00:18:18,080
piece here is actually how much power we

00:18:15,760 --> 00:18:19,520
request if you request too much power

00:18:18,080 --> 00:18:21,120
you can't request more than 500

00:18:19,520 --> 00:18:21,520
milliamps but if you request too much

00:18:21,120 --> 00:18:24,400
power

00:18:21,520 --> 00:18:26,080
it may refuse to actually connect you

00:18:24,400 --> 00:18:28,240
when it doesn't

00:18:26,080 --> 00:18:29,679
after here we actually start doing some

00:18:28,240 --> 00:18:32,400
things these actually call

00:18:29,679 --> 00:18:33,840
into the linux driver so be careful as

00:18:32,400 --> 00:18:36,320
you start making these

00:18:33,840 --> 00:18:37,520
as you start creating uh directories and

00:18:36,320 --> 00:18:39,760
echoing commands

00:18:37,520 --> 00:18:41,760
you actually start winding up causing

00:18:39,760 --> 00:18:43,679
things to go on inside the linux kernel

00:18:41,760 --> 00:18:45,919
itself the module's actually executing

00:18:43,679 --> 00:18:47,679
at that point this calls alec instance

00:18:45,919 --> 00:18:49,600
which starts allocating memory

00:18:47,679 --> 00:18:51,600
this sets up the protocol in this

00:18:49,600 --> 00:18:52,559
particular instance protocol is defined

00:18:51,600 --> 00:18:55,679
by the usb

00:18:52,559 --> 00:18:57,520
consortium this is a mouse subclass

00:18:55,679 --> 00:18:59,039
this is normally zero but in this

00:18:57,520 --> 00:19:00,559
instance the mouse mice

00:18:59,039 --> 00:19:02,640
can be used during boots and they have a

00:19:00,559 --> 00:19:02,960
boot interface and in this instance

00:19:02,640 --> 00:19:04,640
we're

00:19:02,960 --> 00:19:07,039
claiming that our maximum report length

00:19:04,640 --> 00:19:07,440
is eight bytes this enables us to use

00:19:07,039 --> 00:19:09,679
all

00:19:07,440 --> 00:19:10,720
very old full speed or even slow speed

00:19:09,679 --> 00:19:13,760
usbs

00:19:10,720 --> 00:19:16,080
because this minimizes the size

00:19:13,760 --> 00:19:17,039
this magic block of hexadecimal numbers

00:19:16,080 --> 00:19:18,880
is of course

00:19:17,039 --> 00:19:21,120
gobbledygook you really can't understand

00:19:18,880 --> 00:19:22,960
it in this particular instance it's

00:19:21,120 --> 00:19:24,000
actually copied directly from the usb

00:19:22,960 --> 00:19:26,240
consortium because

00:19:24,000 --> 00:19:27,919
it's a mouse they often provide you with

00:19:26,240 --> 00:19:30,799
these kinds of helpful things

00:19:27,919 --> 00:19:31,360
this actually is a full description of

00:19:30,799 --> 00:19:33,440
what

00:19:31,360 --> 00:19:35,440
your usb descriptor should look like of

00:19:33,440 --> 00:19:37,760
what your report looks like

00:19:35,440 --> 00:19:38,880
you're going to be sending this and this

00:19:37,760 --> 00:19:40,960
when you

00:19:38,880 --> 00:19:42,480
your host the computer will actually

00:19:40,960 --> 00:19:44,720
request this from you

00:19:42,480 --> 00:19:46,000
and this is a description of hey this is

00:19:44,720 --> 00:19:48,240
what i'm going to send you when you

00:19:46,000 --> 00:19:50,080
actually ask me to send you something

00:19:48,240 --> 00:19:52,000
you can unpack it there's actually a

00:19:50,080 --> 00:19:53,520
very nice online tool for unpacking

00:19:52,000 --> 00:19:55,039
it i'm not going to go into a lot of

00:19:53,520 --> 00:19:56,880
redundancy about that

00:19:55,039 --> 00:19:58,960
you can look at it yourself in

00:19:56,880 --> 00:20:00,480
particular things note about this is the

00:19:58,960 --> 00:20:01,760
fact that we have a report so

00:20:00,480 --> 00:20:03,919
and we report count of three and a

00:20:01,760 --> 00:20:05,520
report size of one that's bits

00:20:03,919 --> 00:20:08,080
so these are the buttons so we're

00:20:05,520 --> 00:20:10,640
sending three bits for buttons

00:20:08,080 --> 00:20:12,799
and then we have a report kind of one of

00:20:10,640 --> 00:20:13,600
size so those are five extra bits that's

00:20:12,799 --> 00:20:15,760
packing

00:20:13,600 --> 00:20:17,200
because now we actually have a full byte

00:20:15,760 --> 00:20:19,440
in the report

00:20:17,200 --> 00:20:20,400
and it says we have usage for x and y of

00:20:19,440 --> 00:20:22,640
the mouse

00:20:20,400 --> 00:20:24,320
in this instance it's assigned a bit

00:20:22,640 --> 00:20:27,280
number so we're actually telling it that

00:20:24,320 --> 00:20:28,960
it's actually minus 127 to 127.

00:20:27,280 --> 00:20:31,039
the report size is eight bits and we've

00:20:28,960 --> 00:20:32,159
got two of them so we've got an x and

00:20:31,039 --> 00:20:34,720
we've got a y

00:20:32,159 --> 00:20:35,280
and that closes it at this point you've

00:20:34,720 --> 00:20:37,520
got the

00:20:35,280 --> 00:20:38,799
you've got the configuration descriptor

00:20:37,520 --> 00:20:40,320
is in place

00:20:38,799 --> 00:20:42,159
when you actually link this up it

00:20:40,320 --> 00:20:44,000
actually calls allocate in the kernel

00:20:42,159 --> 00:20:46,400
module which starts bringing the usb

00:20:44,000 --> 00:20:47,039
subsystem online actually linking to the

00:20:46,400 --> 00:20:49,840
udis

00:20:47,039 --> 00:20:52,080
udc actually calls bind and at that

00:20:49,840 --> 00:20:55,120
point dev hit g0 now exists

00:20:52,080 --> 00:20:58,080
you can actually plug the cable into

00:20:55,120 --> 00:20:59,760
the into your usb host and it will

00:20:58,080 --> 00:21:01,360
actually recognize it as a mouse we're

00:20:59,760 --> 00:21:03,120
not doing anything yet

00:21:01,360 --> 00:21:05,360
because we haven't actually attached

00:21:03,120 --> 00:21:06,240
anything to catch to drive and eat

00:21:05,360 --> 00:21:08,000
reports

00:21:06,240 --> 00:21:09,520
but that's coming at this point you can

00:21:08,000 --> 00:21:10,880
actually look at it it's being pulled

00:21:09,520 --> 00:21:12,159
and it's sending back what are called

00:21:10,880 --> 00:21:13,840
maps

00:21:12,159 --> 00:21:15,679
so in this instance i'm going to

00:21:13,840 --> 00:21:19,280
actually run this script

00:21:15,679 --> 00:21:22,400
and that's actually going to set us up

00:21:19,280 --> 00:21:24,960
oh oh

00:21:22,400 --> 00:21:26,559
it would actually help if i instead of

00:21:24,960 --> 00:21:29,120
trying to do that on my

00:21:26,559 --> 00:21:31,440
on my mechanism here i actually did that

00:21:29,120 --> 00:21:36,159
on the device itself

00:21:31,440 --> 00:21:38,480
jingle bone this is on the bagel bone

00:21:36,159 --> 00:21:38,480
mouse

00:21:41,440 --> 00:21:46,080
and that's actually now ready to go so

00:21:44,240 --> 00:21:48,320
at this point we switch over to the rust

00:21:46,080 --> 00:21:50,559
part of the world

00:21:48,320 --> 00:21:50,559
and

00:21:52,559 --> 00:21:56,559
we're now sitting inside visual studio

00:21:54,400 --> 00:21:59,679
code which is actually running stuff on

00:21:56,559 --> 00:22:00,880
our on our mechanisms here so one of the

00:21:59,679 --> 00:22:03,039
first things to do

00:22:00,880 --> 00:22:04,159
is that we go down in here everything is

00:22:03,039 --> 00:22:06,799
in a main rs

00:22:04,159 --> 00:22:07,919
i'll actually get down in here so we can

00:22:06,799 --> 00:22:09,919
actually see

00:22:07,919 --> 00:22:12,240
that there is actually a hidden mouse

00:22:09,919 --> 00:22:14,799
rust and if we actually run this

00:22:12,240 --> 00:22:14,799
directly

00:22:17,840 --> 00:22:22,240
our cursor actually starts jumping back

00:22:19,760 --> 00:22:22,240
and forth

00:22:22,400 --> 00:22:30,000
so we'll get back to that um but

00:22:26,480 --> 00:22:33,520
so what's going on inside the rust

00:22:30,000 --> 00:22:35,280
we actually steal a macro call directly

00:22:33,520 --> 00:22:37,600
from tokyo in this instance

00:22:35,280 --> 00:22:39,600
this is very useful because this allows

00:22:37,600 --> 00:22:42,000
us to go down into lib c

00:22:39,600 --> 00:22:42,640
and it actually wraps that the result of

00:22:42,000 --> 00:22:44,480
lib c

00:22:42,640 --> 00:22:46,400
which is a little screw ball because of

00:22:44,480 --> 00:22:47,520
errors it allows us to wrap this and

00:22:46,400 --> 00:22:49,440
return directly

00:22:47,520 --> 00:22:50,960
into the rust results for error which is

00:22:49,440 --> 00:22:52,159
very useful rather than having to write

00:22:50,960 --> 00:22:55,600
this boiler plate

00:22:52,159 --> 00:22:58,159
every single time we need to hit lib c

00:22:55,600 --> 00:22:59,760
we go down into main this is some basic

00:22:58,159 --> 00:23:01,120
stuff for logging so that we can

00:22:59,760 --> 00:23:04,640
actually enable that

00:23:01,120 --> 00:23:06,400
standard open open um idioms uh where we

00:23:04,640 --> 00:23:08,480
actually have to chain back together in

00:23:06,400 --> 00:23:11,360
order to make everything work

00:23:08,480 --> 00:23:12,799
um not not still not a big fan of this

00:23:11,360 --> 00:23:14,480
really would prefer that must finally

00:23:12,799 --> 00:23:15,520
get keyword arguments to make life

00:23:14,480 --> 00:23:17,919
better

00:23:15,520 --> 00:23:18,960
um we can in this particular instance

00:23:17,919 --> 00:23:21,200
we're switching

00:23:18,960 --> 00:23:22,559
that device into what's called

00:23:21,200 --> 00:23:24,799
non-blocking mode

00:23:22,559 --> 00:23:26,480
so when we read or write to it if

00:23:24,799 --> 00:23:27,840
something happens where it can't

00:23:26,480 --> 00:23:29,919
complete immediately

00:23:27,840 --> 00:23:31,440
we want it to come back we don't want to

00:23:29,919 --> 00:23:33,360
wait for forever

00:23:31,440 --> 00:23:34,799
well you know we don't want to write

00:23:33,360 --> 00:23:35,919
something to the usb and have it sit

00:23:34,799 --> 00:23:37,039
there and wait for error because we

00:23:35,919 --> 00:23:39,440
unplugged the device

00:23:37,039 --> 00:23:41,279
that doesn't that's just kind of silly

00:23:39,440 --> 00:23:42,960
um we set up our we're starting to set

00:23:41,279 --> 00:23:45,200
up our epoll infrastructure we're

00:23:42,960 --> 00:23:46,000
calling epoll on linux which is kind of

00:23:45,200 --> 00:23:48,799
annoying

00:23:46,000 --> 00:23:50,880
this is the main main mechanism building

00:23:48,799 --> 00:23:52,000
block on linux that allows you to

00:23:50,880 --> 00:23:54,320
actually

00:23:52,000 --> 00:23:55,760
say i'm waiting on a file descriptor and

00:23:54,320 --> 00:23:57,440
when something comes in on that file

00:23:55,760 --> 00:23:59,840
descriptor please wake me up otherwise

00:23:57,440 --> 00:24:02,000
i'm going to stay asleep

00:23:59,840 --> 00:24:03,600
yet more boilerplate this we're actually

00:24:02,000 --> 00:24:05,840
saying what events we want to watch we

00:24:03,600 --> 00:24:07,919
want to watch a poll in and a poll out

00:24:05,840 --> 00:24:09,120
pull in is actually a read event pull

00:24:07,919 --> 00:24:11,200
out is a write event

00:24:09,120 --> 00:24:12,799
in this particular instance read events

00:24:11,200 --> 00:24:13,760
aren't what we're actually working

00:24:12,799 --> 00:24:16,080
against

00:24:13,760 --> 00:24:18,000
um we're only doing right events because

00:24:16,080 --> 00:24:19,840
we're a mouse we just send stuff

00:24:18,000 --> 00:24:22,480
if you're actually doing more advanced

00:24:19,840 --> 00:24:24,799
hid mechanisms and more advanced hid

00:24:22,480 --> 00:24:27,600
drivers like the echo driver that i have

00:24:24,799 --> 00:24:28,320
e-pull in now matters in this instance

00:24:27,600 --> 00:24:30,480
we're adding it

00:24:28,320 --> 00:24:31,840
and say telling linux hey we really want

00:24:30,480 --> 00:24:32,559
you to pay attention to that file

00:24:31,840 --> 00:24:36,080
descriptor

00:24:32,559 --> 00:24:36,080
get ready for it with epoll

00:24:36,640 --> 00:24:40,000
we're actually keeping track of time in

00:24:38,320 --> 00:24:41,760
this particular instance because we want

00:24:40,000 --> 00:24:43,440
to bounce our cursor back and forth

00:24:41,760 --> 00:24:45,679
depending upon which second

00:24:43,440 --> 00:24:46,720
you know whether we're on an even or an

00:24:45,679 --> 00:24:48,080
odd second

00:24:46,720 --> 00:24:50,080
whether we want it to go up into the

00:24:48,080 --> 00:24:52,159
left or down into the right

00:24:50,080 --> 00:24:53,919
in this particular instance we've got an

00:24:52,159 --> 00:24:55,600
e pull we'll empty it out

00:24:53,919 --> 00:24:57,840
and then the first thing we do is we

00:24:55,600 --> 00:24:59,360
actually ask e paul wait and say hey

00:24:57,840 --> 00:25:00,960
can you give us an event we're going to

00:24:59,360 --> 00:25:03,200
hang out for

00:25:00,960 --> 00:25:05,600
for however many timeout millies which

00:25:03,200 --> 00:25:07,200
is 1000 milliseconds so one second

00:25:05,600 --> 00:25:09,600
and we're going we want you to get one

00:25:07,200 --> 00:25:10,640
event if we don't get any events and it

00:25:09,600 --> 00:25:12,320
actually returns

00:25:10,640 --> 00:25:14,240
we actually wound up with a timeout in

00:25:12,320 --> 00:25:16,480
this particular instance

00:25:14,240 --> 00:25:17,919
and if we wound up with a timeout then

00:25:16,480 --> 00:25:20,480
we can write through it

00:25:17,919 --> 00:25:21,279
and that mechanism says okay we want to

00:25:20,480 --> 00:25:23,200
write a report

00:25:21,279 --> 00:25:24,640
in this instance the report again as i

00:25:23,200 --> 00:25:26,000
said is three bytes

00:25:24,640 --> 00:25:28,559
that's our buttons we don't have any

00:25:26,000 --> 00:25:29,600
buttons to push this is minus 16 this is

00:25:28,559 --> 00:25:32,960
minus 16

00:25:29,600 --> 00:25:34,240
x n minus 16 y or depending upon if it's

00:25:32,960 --> 00:25:36,880
an even it's

00:25:34,240 --> 00:25:39,039
no buttons to push positive 16 x

00:25:36,880 --> 00:25:39,760
positive 16 y so we bounce back and

00:25:39,039 --> 00:25:42,400
forth

00:25:39,760 --> 00:25:42,880
we write the report if the report goes

00:25:42,400 --> 00:25:44,480
through

00:25:42,880 --> 00:25:46,240
it should always go through if we

00:25:44,480 --> 00:25:48,400
actually are capable of running the port

00:25:46,240 --> 00:25:50,240
we should always write three bytes of

00:25:48,400 --> 00:25:51,760
the report itself if that fails

00:25:50,240 --> 00:25:54,640
something went very wrong

00:25:51,760 --> 00:25:56,400
we're going to just die in this instance

00:25:54,640 --> 00:25:58,080
the other thing that can happen is we

00:25:56,400 --> 00:26:00,080
can get an error in this instance

00:25:58,080 --> 00:26:02,320
woodblock becomes the error

00:26:00,080 --> 00:26:04,000
because we're unplugged so when we try

00:26:02,320 --> 00:26:04,400
and write something to it it just goes

00:26:04,000 --> 00:26:06,559
into

00:26:04,400 --> 00:26:07,919
goes into the ether in this instance we

00:26:06,559 --> 00:26:09,760
want to re we're

00:26:07,919 --> 00:26:11,679
name re-enabling a write event sorry

00:26:09,760 --> 00:26:13,520
about the pop-ups right analyzer can be

00:26:11,679 --> 00:26:16,240
a little annoying about that

00:26:13,520 --> 00:26:17,840
we're re-enabling the write system as we

00:26:16,240 --> 00:26:19,760
need that event we'll talk about why we

00:26:17,840 --> 00:26:21,279
need to re-enable it a little bit

00:26:19,760 --> 00:26:22,720
and then we actually tell the linux

00:26:21,279 --> 00:26:24,400
system that we've re-enabled it and

00:26:22,720 --> 00:26:25,600
please look for read and write in this

00:26:24,400 --> 00:26:26,960
particular instance

00:26:25,600 --> 00:26:29,039
if we get an unknown error we just kick

00:26:26,960 --> 00:26:30,880
it upstairs if we can't write it all

00:26:29,039 --> 00:26:31,840
we're unplugged all we can do is hang

00:26:30,880 --> 00:26:33,840
out

00:26:31,840 --> 00:26:35,919
if we do get an epoll event what's going

00:26:33,840 --> 00:26:37,520
on we first check to see that the file

00:26:35,919 --> 00:26:39,200
descriptor is the same as we gave it

00:26:37,520 --> 00:26:39,760
which means that we didn't get some

00:26:39,200 --> 00:26:42,559
weird

00:26:39,760 --> 00:26:43,520
screwball thing due to e-pull which we

00:26:42,559 --> 00:26:45,200
won't discuss

00:26:43,520 --> 00:26:46,880
can happen but as long as you're

00:26:45,200 --> 00:26:48,799
single-threaded this shouldn't happen

00:26:46,880 --> 00:26:51,120
and this is all single-threaded

00:26:48,799 --> 00:26:53,120
um then we're actually looking for

00:26:51,120 --> 00:26:53,919
whether or not this was a right event in

00:26:53,120 --> 00:26:55,760
which point

00:26:53,919 --> 00:26:57,520
we found the right event we can that

00:26:55,760 --> 00:26:59,679
means somebody plugged us back in

00:26:57,520 --> 00:27:01,679
we can actually start writing again and

00:26:59,679 --> 00:27:02,799
then we disable the right events coming

00:27:01,679 --> 00:27:04,400
back from ebol

00:27:02,799 --> 00:27:06,400
the reason for that is we will keep

00:27:04,400 --> 00:27:08,320
getting spammed with right right events

00:27:06,400 --> 00:27:10,080
as long as we we can actually write to

00:27:08,320 --> 00:27:12,480
that file descriptor

00:27:10,080 --> 00:27:14,080
and that file descriptor is is pretty

00:27:12,480 --> 00:27:15,919
much empty all the time

00:27:14,080 --> 00:27:18,320
in this instance we can actually hit the

00:27:15,919 --> 00:27:20,240
e poll we can return the event struct if

00:27:18,320 --> 00:27:20,880
we get a read somebody attempted to read

00:27:20,240 --> 00:27:23,679
from us

00:27:20,880 --> 00:27:25,520
and that just doesn't work very well so

00:27:23,679 --> 00:27:26,720
in that instance that covers all the bus

00:27:25,520 --> 00:27:30,080
code that we're doing

00:27:26,720 --> 00:27:33,200
so now if i go back into the ubuntu

00:27:30,080 --> 00:27:35,200
you can actually see that when i

00:27:33,200 --> 00:27:37,200
actually connect and run via that

00:27:35,200 --> 00:27:39,120
my cursor starts jumping back and forth

00:27:37,200 --> 00:27:42,640
so we've actually managed to create

00:27:39,120 --> 00:27:45,120
a fake mouse using a bigger bone using

00:27:42,640 --> 00:27:48,159
rust and using the linux usb subsystem

00:27:45,120 --> 00:27:51,600
and we did it about 25 minutes

00:27:48,159 --> 00:27:54,159
so what i want to say is

00:27:51,600 --> 00:27:55,120
thanks a lot for attending um i know

00:27:54,159 --> 00:27:58,880
that was sort of

00:27:55,120 --> 00:28:02,480
a that was sort of a

00:27:58,880 --> 00:28:05,520
whirlwind scene

00:28:02,480 --> 00:28:07,760
of how to do usb hid devices i'll

00:28:05,520 --> 00:28:10,080
probably make a talk later at some point

00:28:07,760 --> 00:28:11,120
where i actually make this work for a

00:28:10,080 --> 00:28:13,679
much much

00:28:11,120 --> 00:28:15,600
uh larger hid device where i talk about

00:28:13,679 --> 00:28:17,840
how to do this with a debug pro

00:28:15,600 --> 00:28:19,600
anyway thanks you all for attending and

00:28:17,840 --> 00:28:21,520
i much appreciate your attention

00:28:19,600 --> 00:28:31,840
good luck and enjoy the rest of oxidized

00:28:21,520 --> 00:28:31,840

YouTube URL: https://www.youtube.com/watch?v=NgdWeR1CvI8


