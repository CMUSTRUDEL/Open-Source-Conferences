Title: Opening Keynote: An Update on Sealed Rust
Publication date: 2020-11-06
Playlist: Oxidize Global 2020
Description: 
	James Munns from Ferrous Systems discusses updates on Ferrous System's Sealed Rust project to qualify the Rust Programming Language for mission and safety critical applications, including industrial, automotive, and avionics use cases.


Interested in Sealed Rust? Reach out to use at sealed-rust@ferrous-systems.com!
Captions: 
	00:00:07,010 --> 00:00:34,079
[Music]

00:00:32,719 --> 00:00:35,520
all right well we're going to go ahead

00:00:34,079 --> 00:00:37,280
and get started with the keynote

00:00:35,520 --> 00:00:38,559
thanks for everyone for watching through

00:00:37,280 --> 00:00:41,200
our introduction

00:00:38,559 --> 00:00:42,559
um so i want to start my keynote with an

00:00:41,200 --> 00:00:44,079
updated seal dress so

00:00:42,559 --> 00:00:46,079
uh reminder for anyone who missed the

00:00:44,079 --> 00:00:48,399
first couple minutes i'm james muns

00:00:46,079 --> 00:00:50,000
from ferris systems um and ferris

00:00:48,399 --> 00:00:51,280
systems is a consultancy that's been

00:00:50,000 --> 00:00:54,239
working on

00:00:51,280 --> 00:00:55,120
um improving the state of rust in

00:00:54,239 --> 00:00:56,879
industry

00:00:55,120 --> 00:00:58,399
particularly in this case for the

00:00:56,879 --> 00:01:00,640
embedded systems industry

00:00:58,399 --> 00:01:02,559
so i wanted to give an update on sealed

00:01:00,640 --> 00:01:03,039
rust which is our initiative to bring

00:01:02,559 --> 00:01:05,519
rust

00:01:03,039 --> 00:01:07,920
into more mission and safety critical

00:01:05,519 --> 00:01:07,920
areas

00:01:08,560 --> 00:01:12,479
as i mentioned sealed rust is fair

00:01:10,799 --> 00:01:13,600
systems effort to qualify the rust

00:01:12,479 --> 00:01:15,920
programming language

00:01:13,600 --> 00:01:17,680
for people who are working on using rust

00:01:15,920 --> 00:01:20,159
in either mission critical

00:01:17,680 --> 00:01:22,000
or safety critical software development

00:01:20,159 --> 00:01:24,400
areas

00:01:22,000 --> 00:01:26,320
so last year just after oxidize we

00:01:24,400 --> 00:01:27,200
announced our intention to work on

00:01:26,320 --> 00:01:28,479
sealed rust

00:01:27,200 --> 00:01:30,720
it actually came out of a lot of the

00:01:28,479 --> 00:01:33,759
discussions that happened in person

00:01:30,720 --> 00:01:35,280
at uh oxidized last year so we were able

00:01:33,759 --> 00:01:36,000
to meet with a lot of people who were

00:01:35,280 --> 00:01:38,960
interested

00:01:36,000 --> 00:01:40,400
or already looking at using rust across

00:01:38,960 --> 00:01:43,520
safety critical industries

00:01:40,400 --> 00:01:45,680
and in higher levels of criticality for

00:01:43,520 --> 00:01:47,600
their business

00:01:45,680 --> 00:01:49,439
so since we put out that initial blog

00:01:47,600 --> 00:01:51,680
post about a year ago

00:01:49,439 --> 00:01:53,040
we spent the last year talking to a lot

00:01:51,680 --> 00:01:55,040
of companies in industry

00:01:53,040 --> 00:01:56,399
so we we've spoke with people who are

00:01:55,040 --> 00:01:58,159
engineering people

00:01:56,399 --> 00:02:00,799
at these individual companies companies

00:01:58,159 --> 00:02:02,399
who are technology leads or ctos of

00:02:00,799 --> 00:02:03,280
these companies or people who are

00:02:02,399 --> 00:02:06,320
interested

00:02:03,280 --> 00:02:07,840
in making rust a part of their offering

00:02:06,320 --> 00:02:09,360
we've spent this last year really

00:02:07,840 --> 00:02:11,599
refining the technical plan

00:02:09,360 --> 00:02:13,280
what would it take to bring rust into

00:02:11,599 --> 00:02:14,720
these industries whether it's a mission

00:02:13,280 --> 00:02:18,400
critical industry

00:02:14,720 --> 00:02:19,920
uh or a safety critical industry so

00:02:18,400 --> 00:02:21,680
we've been working on making sure that

00:02:19,920 --> 00:02:23,360
we have the right technical offerings

00:02:21,680 --> 00:02:24,080
and what we would need to do to help

00:02:23,360 --> 00:02:26,319
rust

00:02:24,080 --> 00:02:28,160
enter those markets we've also been

00:02:26,319 --> 00:02:30,239
working on our business plan how can we

00:02:28,160 --> 00:02:32,160
make sure that we have the right people

00:02:30,239 --> 00:02:34,640
and the right funding to bring all of

00:02:32,160 --> 00:02:36,319
these efforts to completion

00:02:34,640 --> 00:02:37,760
we see there being a fair amount of work

00:02:36,319 --> 00:02:39,440
to do and that's something that we

00:02:37,760 --> 00:02:41,440
didn't want to push on open source

00:02:39,440 --> 00:02:44,319
contributors we see this as being

00:02:41,440 --> 00:02:46,080
rightly done by uh companies with

00:02:44,319 --> 00:02:47,519
funding and paid for by

00:02:46,080 --> 00:02:49,440
the companies that would benefit for

00:02:47,519 --> 00:02:51,599
this because it's something that is

00:02:49,440 --> 00:02:53,680
useful to a lot of people but

00:02:51,599 --> 00:02:54,800
generally the most useful to niche

00:02:53,680 --> 00:02:56,720
industries like

00:02:54,800 --> 00:02:59,360
mission critical services and safety

00:02:56,720 --> 00:03:01,360
critical services

00:02:59,360 --> 00:03:03,200
so what we saw as the important parts

00:03:01,360 --> 00:03:03,680
that differ from what's offered from

00:03:03,200 --> 00:03:06,000
rust

00:03:03,680 --> 00:03:07,920
the programming language today is to

00:03:06,000 --> 00:03:09,599
formalize a subset of the rust

00:03:07,920 --> 00:03:11,120
programming language so

00:03:09,599 --> 00:03:12,720
we think that it's important for these

00:03:11,120 --> 00:03:14,480
industries to make sure that there's a

00:03:12,720 --> 00:03:15,360
part of the rust programming language

00:03:14,480 --> 00:03:18,000
that has

00:03:15,360 --> 00:03:19,440
very specific semantics in terms of what

00:03:18,000 --> 00:03:22,319
the language offers

00:03:19,440 --> 00:03:23,680
and what that means in practice either

00:03:22,319 --> 00:03:26,080
at compile time

00:03:23,680 --> 00:03:28,159
or run time so that people can make

00:03:26,080 --> 00:03:29,440
these stronger guarantees on what their

00:03:28,159 --> 00:03:32,400
programs will do

00:03:29,440 --> 00:03:34,000
and what their programs won't do we also

00:03:32,400 --> 00:03:36,080
think it's important to come up with a

00:03:34,000 --> 00:03:37,120
stabilized version of the compiler

00:03:36,080 --> 00:03:39,519
output

00:03:37,120 --> 00:03:40,159
so this is important for two main

00:03:39,519 --> 00:03:42,560
reasons

00:03:40,159 --> 00:03:44,239
so we see people using rust and wanting

00:03:42,560 --> 00:03:45,599
to be able to analyze what their

00:03:44,239 --> 00:03:47,680
programs are doing

00:03:45,599 --> 00:03:49,920
and for this it means that they need to

00:03:47,680 --> 00:03:51,840
have an input to their programs

00:03:49,920 --> 00:03:53,439
that they can use to make assumptions

00:03:51,840 --> 00:03:55,200
and do analysis on this

00:03:53,439 --> 00:03:56,959
so they need some kind of stabilized

00:03:55,200 --> 00:03:58,560
output from the compiler that allows

00:03:56,959 --> 00:04:00,640
them to build these reliable

00:03:58,560 --> 00:04:02,400
analysis tools to make stronger

00:04:00,640 --> 00:04:03,840
guarantees on what their programs are

00:04:02,400 --> 00:04:05,840
going to be doing

00:04:03,840 --> 00:04:06,879
we also need a stabilized compiler

00:04:05,840 --> 00:04:08,799
output for

00:04:06,879 --> 00:04:10,239
different compiler back ends over the

00:04:08,799 --> 00:04:11,840
past year or so

00:04:10,239 --> 00:04:14,400
rust has been growing their second

00:04:11,840 --> 00:04:16,720
compiler back end so historically lvm

00:04:14,400 --> 00:04:19,440
was the only general way that you could

00:04:16,720 --> 00:04:20,000
compile rust using the rust front end

00:04:19,440 --> 00:04:22,400
and

00:04:20,000 --> 00:04:24,160
generate machine code or operational

00:04:22,400 --> 00:04:25,600
code or applications from that

00:04:24,160 --> 00:04:27,440
and over the last year we've grown

00:04:25,600 --> 00:04:29,280
support for a second back end

00:04:27,440 --> 00:04:30,880
crane lift there's been a lot of work

00:04:29,280 --> 00:04:32,880
that's gone into that to make sure rust

00:04:30,880 --> 00:04:35,120
has the ability to offer

00:04:32,880 --> 00:04:37,120
stable output for both crane lift and

00:04:35,120 --> 00:04:38,720
lvm and it's really been paying off

00:04:37,120 --> 00:04:41,280
and we're looking at expanding that

00:04:38,720 --> 00:04:42,160
support to invite more and more compiler

00:04:41,280 --> 00:04:44,000
back ends

00:04:42,160 --> 00:04:46,320
ones that are relevant to either mission

00:04:44,000 --> 00:04:47,520
critical applications or safety critical

00:04:46,320 --> 00:04:50,880
applications

00:04:47,520 --> 00:04:52,880
um into the fold it also means

00:04:50,880 --> 00:04:53,680
especially for safety critical a lot of

00:04:52,880 --> 00:04:56,080
paperwork

00:04:53,680 --> 00:04:58,080
there's a lot of documentation and

00:04:56,080 --> 00:05:00,240
verification that needs to go into

00:04:58,080 --> 00:05:01,199
making a safety critical compiler

00:05:00,240 --> 00:05:04,400
offering

00:05:01,199 --> 00:05:05,840
and that's a lot of work that really is

00:05:04,400 --> 00:05:07,840
different from the kind of work that you

00:05:05,840 --> 00:05:09,280
typically do for an open source project

00:05:07,840 --> 00:05:10,240
so we want to make sure that we have the

00:05:09,280 --> 00:05:12,720
ability to do

00:05:10,240 --> 00:05:14,160
all of that paperwork to submit these to

00:05:12,720 --> 00:05:16,000
the kind of organizations that are going

00:05:14,160 --> 00:05:17,919
to be doing the validation

00:05:16,000 --> 00:05:19,520
of tools like the rust programming

00:05:17,919 --> 00:05:20,320
language for safety critical

00:05:19,520 --> 00:05:23,440
applications

00:05:20,320 --> 00:05:25,520
including automotive industrial avionics

00:05:23,440 --> 00:05:27,520
medical all of these kind of things and

00:05:25,520 --> 00:05:29,840
the different regulatory bodies that go

00:05:27,520 --> 00:05:31,440
with them

00:05:29,840 --> 00:05:33,520
so i've been mentioning the phrases

00:05:31,440 --> 00:05:34,160
mission critical and safety critical a

00:05:33,520 --> 00:05:36,160
lot

00:05:34,160 --> 00:05:38,000
we've been generally from talking to a

00:05:36,160 --> 00:05:38,880
lot of these users that want to use rust

00:05:38,000 --> 00:05:40,080
in new areas

00:05:38,880 --> 00:05:42,400
we've found that they've generally

00:05:40,080 --> 00:05:44,400
fallen into one of two categories

00:05:42,400 --> 00:05:46,560
the first which we call mission critical

00:05:44,400 --> 00:05:49,360
are the kinds of people who are building

00:05:46,560 --> 00:05:50,000
uh services for their business that have

00:05:49,360 --> 00:05:53,120
a lot of

00:05:50,000 --> 00:05:54,720
money and business reliability

00:05:53,120 --> 00:05:56,160
constraints riding on it these are

00:05:54,720 --> 00:05:58,479
people who are providing

00:05:56,160 --> 00:05:59,919
cyber security systems large-scale

00:05:58,479 --> 00:06:02,639
infrastructure

00:05:59,919 --> 00:06:03,680
highly reliable systems that are built

00:06:02,639 --> 00:06:05,280
using rust

00:06:03,680 --> 00:06:07,440
we found a lot of these companies have

00:06:05,280 --> 00:06:08,160
already started using rust in one way or

00:06:07,440 --> 00:06:10,160
another

00:06:08,160 --> 00:06:12,240
but as users of the rust programming

00:06:10,160 --> 00:06:14,639
language they want the highest level of

00:06:12,240 --> 00:06:16,800
confidence available for their tools

00:06:14,639 --> 00:06:18,400
in particular the mission critical folks

00:06:16,800 --> 00:06:20,880
want to have the most

00:06:18,400 --> 00:06:21,759
insight possible for analyzing what it

00:06:20,880 --> 00:06:24,639
means to have

00:06:21,759 --> 00:06:26,240
a correct rust program this goes back to

00:06:24,639 --> 00:06:27,840
that stable output that i mentioned

00:06:26,240 --> 00:06:30,080
where they're either building tools

00:06:27,840 --> 00:06:32,240
in-house to do some kind of formal

00:06:30,080 --> 00:06:34,639
analysis or they're looking to purchase

00:06:32,240 --> 00:06:36,639
third-party tools that do this kind of

00:06:34,639 --> 00:06:37,919
analysis for them

00:06:36,639 --> 00:06:39,840
these are industries that don't

00:06:37,919 --> 00:06:40,720
necessarily have a regulator telling

00:06:39,840 --> 00:06:42,720
them what they can

00:06:40,720 --> 00:06:44,160
and can't use but as a business they

00:06:42,720 --> 00:06:46,400
want to make sure they're minimizing

00:06:44,160 --> 00:06:47,520
risk as much as makes sense

00:06:46,400 --> 00:06:49,520
as i mentioned these are our

00:06:47,520 --> 00:06:52,080
infrastructure provided people who are

00:06:49,520 --> 00:06:54,080
providing hosting for millions of people

00:06:52,080 --> 00:06:54,720
or routing and network infrastructure

00:06:54,080 --> 00:06:57,680
for

00:06:54,720 --> 00:06:59,039
millions or even billions of people and

00:06:57,680 --> 00:07:00,000
we want to make sure that these mission

00:06:59,039 --> 00:07:03,199
critical uses

00:07:00,000 --> 00:07:04,639
users are just as well supported safety

00:07:03,199 --> 00:07:06,720
critical was the use case that we

00:07:04,639 --> 00:07:08,160
originally had in mind for sealed rust

00:07:06,720 --> 00:07:10,000
and we realized that there's a lot of

00:07:08,160 --> 00:07:11,840
interlink in here but there's a little

00:07:10,000 --> 00:07:14,160
bit of slight difference between mission

00:07:11,840 --> 00:07:15,840
critical and safety critical users

00:07:14,160 --> 00:07:18,240
we found that over the past years

00:07:15,840 --> 00:07:20,319
there's a lot of safety critical users

00:07:18,240 --> 00:07:22,560
people building embedded systems that

00:07:20,319 --> 00:07:25,280
have to do with keeping people safe

00:07:22,560 --> 00:07:25,840
uh and they've actually already in many

00:07:25,280 --> 00:07:27,840
cases

00:07:25,840 --> 00:07:29,120
already been doing the analysis to see

00:07:27,840 --> 00:07:31,199
whether that

00:07:29,120 --> 00:07:32,560
rust could provide some kind of benefit

00:07:31,199 --> 00:07:33,840
to their business

00:07:32,560 --> 00:07:36,080
most of these people that we've talked

00:07:33,840 --> 00:07:39,360
to have come away with a positive look

00:07:36,080 --> 00:07:41,039
at rust as a potential tool for safety

00:07:39,360 --> 00:07:42,960
critical applications

00:07:41,039 --> 00:07:44,639
however they need tools that are

00:07:42,960 --> 00:07:45,520
suitable for a slightly different

00:07:44,639 --> 00:07:48,319
product cycle

00:07:45,520 --> 00:07:49,120
people in safety critical often offer

00:07:48,319 --> 00:07:52,319
their

00:07:49,120 --> 00:07:53,840
tools and applications for 10 to 20-year

00:07:52,319 --> 00:07:55,120
product cycles which means they really

00:07:53,840 --> 00:07:57,520
need to have a lot of

00:07:55,120 --> 00:07:59,199
confidence in their tools they also do

00:07:57,520 --> 00:08:00,800
have a regulator typically

00:07:59,199 --> 00:08:02,240
constraining what they can use and

00:08:00,800 --> 00:08:03,440
making sure that they're only using

00:08:02,240 --> 00:08:04,479
tools that are suitable for the

00:08:03,440 --> 00:08:06,639
application

00:08:04,479 --> 00:08:09,440
these are the folks like automotive

00:08:06,639 --> 00:08:11,919
medical industrial avionics railway

00:08:09,440 --> 00:08:13,919
all of these industries that keep people

00:08:11,919 --> 00:08:14,400
safe both their users and the people who

00:08:13,919 --> 00:08:17,520
are

00:08:14,400 --> 00:08:20,639
working with and alongside their uh

00:08:17,520 --> 00:08:23,840
software applications

00:08:20,639 --> 00:08:25,759
so we really see sealed rust being a

00:08:23,840 --> 00:08:27,280
a step forward for the industry both

00:08:25,759 --> 00:08:28,800
from a technical and a developer

00:08:27,280 --> 00:08:30,319
conspiring perspective

00:08:28,800 --> 00:08:31,680
so for the folks that are in the room

00:08:30,319 --> 00:08:33,519
you're probably already familiar what

00:08:31,680 --> 00:08:35,039
kind of things rust offers you

00:08:33,519 --> 00:08:37,039
but from a technical perspective we

00:08:35,039 --> 00:08:39,120
really see rust being a language that

00:08:37,039 --> 00:08:41,360
offers best-in-class safety features

00:08:39,120 --> 00:08:42,959
while still giving you compile time

00:08:41,360 --> 00:08:44,080
control of your performance and

00:08:42,959 --> 00:08:47,279
resources

00:08:44,080 --> 00:08:47,680
we see this being a huge uh benefit for

00:08:47,279 --> 00:08:49,760
these

00:08:47,680 --> 00:08:51,120
mission and safety critical industries

00:08:49,760 --> 00:08:52,720
because they can use one

00:08:51,120 --> 00:08:55,040
programming language whether they're

00:08:52,720 --> 00:08:56,800
developing secure server application

00:08:55,040 --> 00:08:58,800
constrained embedded systems or even

00:08:56,800 --> 00:09:00,320
mobile devices in application

00:08:58,800 --> 00:09:02,000
at the end of the day from a technical

00:09:00,320 --> 00:09:02,880
perspective we really think rust and

00:09:02,000 --> 00:09:05,200
sealed rust

00:09:02,880 --> 00:09:06,560
can help deliver maintainable reliable

00:09:05,200 --> 00:09:08,320
systems

00:09:06,560 --> 00:09:10,240
doesn't matter how good your technical

00:09:08,320 --> 00:09:11,920
solution is though if your developers

00:09:10,240 --> 00:09:13,839
don't really like using it

00:09:11,920 --> 00:09:15,519
we've seen a lot of stronger or safer

00:09:13,839 --> 00:09:17,680
tools out there in industry today

00:09:15,519 --> 00:09:19,440
but none that are quite as well love as

00:09:17,680 --> 00:09:21,200
rust as a programming language

00:09:19,440 --> 00:09:23,279
over the last five years or so we've

00:09:21,200 --> 00:09:25,279
seen rust be a language that's been

00:09:23,279 --> 00:09:27,120
publicly spoken about as a language

00:09:25,279 --> 00:09:30,000
that's been loved by developers

00:09:27,120 --> 00:09:30,640
as well as engineering organizations for

00:09:30,000 --> 00:09:33,040
the last

00:09:30,640 --> 00:09:35,279
five years in a row now rust has been

00:09:33,040 --> 00:09:37,760
stack overflow's most loved language

00:09:35,279 --> 00:09:38,640
and almost every big household

00:09:37,760 --> 00:09:40,720
technology name

00:09:38,640 --> 00:09:42,240
has spoken publicly or a little

00:09:40,720 --> 00:09:44,720
privately about their use of rust

00:09:42,240 --> 00:09:46,720
including google apple mozilla facebook

00:09:44,720 --> 00:09:49,200
dropbox microsoft intel

00:09:46,720 --> 00:09:50,000
the list is really only growing and it's

00:09:49,200 --> 00:09:52,880
been really great

00:09:50,000 --> 00:09:53,760
to see the industry uptake of rust

00:09:52,880 --> 00:09:55,680
everywhere from

00:09:53,760 --> 00:09:56,880
server side systems to beginning to be

00:09:55,680 --> 00:10:00,560
now um

00:09:56,880 --> 00:10:00,560
embedded applications as well

00:10:00,640 --> 00:10:04,079
we really think rust is a modern

00:10:02,160 --> 00:10:06,000
language that can bring new

00:10:04,079 --> 00:10:07,680
improvements it can be a language that

00:10:06,000 --> 00:10:10,640
improves productivity

00:10:07,680 --> 00:10:12,000
as well as improving safety and security

00:10:10,640 --> 00:10:13,600
so i really want to point out one of

00:10:12,000 --> 00:10:15,839
these in particular that

00:10:13,600 --> 00:10:18,000
i mentioned here that 70 of microsoft's

00:10:15,839 --> 00:10:20,000
security vulnerabilities 2004 to

00:10:18,000 --> 00:10:22,000
present were due to memory safety and

00:10:20,000 --> 00:10:24,240
this is a number we keep seeing over

00:10:22,000 --> 00:10:26,640
and over and over again chrome has

00:10:24,240 --> 00:10:30,000
released a study that showed that 70

00:10:26,640 --> 00:10:31,200
or so of their um defects were due to

00:10:30,000 --> 00:10:34,160
memory safety

00:10:31,200 --> 00:10:34,560
and there's been an analysis of apple's

00:10:34,160 --> 00:10:38,000
uh

00:10:34,560 --> 00:10:40,160
cves from some of their os x releases

00:10:38,000 --> 00:10:41,600
that really reiterates that 70

00:10:40,160 --> 00:10:43,760
number so this is a number that we're

00:10:41,600 --> 00:10:45,600
really not going to see change because

00:10:43,760 --> 00:10:47,279
despite all the best practices from some

00:10:45,600 --> 00:10:49,760
of these best-in-class

00:10:47,279 --> 00:10:50,480
engineering organizations these kind of

00:10:49,760 --> 00:10:52,240
problems

00:10:50,480 --> 00:10:53,760
really keep happening so it's time to

00:10:52,240 --> 00:10:54,880
really step back and address these

00:10:53,760 --> 00:10:58,240
fundamentally

00:10:54,880 --> 00:10:58,240
using a language like rust

00:10:59,040 --> 00:11:02,880
from a sealed rust perspective we we

00:11:01,120 --> 00:11:04,000
hope to be offering people in the safety

00:11:02,880 --> 00:11:05,480
critical industry

00:11:04,000 --> 00:11:07,200
pre-qualified compiler and

00:11:05,480 --> 00:11:09,279
pre-qualification packages

00:11:07,200 --> 00:11:11,680
so they can use rust off the shelf in

00:11:09,279 --> 00:11:13,519
their safety critical applications

00:11:11,680 --> 00:11:16,560
we plan to do this by integrating with

00:11:13,519 --> 00:11:18,880
existing qualified compiler tool chains

00:11:16,560 --> 00:11:20,560
and rather than introduce a brand new

00:11:18,880 --> 00:11:22,959
off-the-shelf tool for them

00:11:20,560 --> 00:11:24,320
just add rust as a supported language in

00:11:22,959 --> 00:11:26,800
their existing

00:11:24,320 --> 00:11:28,480
development pipeline for both our

00:11:26,800 --> 00:11:29,680
mission critical and safety critical

00:11:28,480 --> 00:11:32,000
folks we hope to bring

00:11:29,680 --> 00:11:33,600
tooling and analysis capabilities either

00:11:32,000 --> 00:11:35,920
the ability to roll your own

00:11:33,600 --> 00:11:37,920
if you need to in your industry or to

00:11:35,920 --> 00:11:39,680
private provide them off the shelf from

00:11:37,920 --> 00:11:42,079
ferris systems so that you can have

00:11:39,680 --> 00:11:44,399
a greater level of understanding and

00:11:42,079 --> 00:11:46,240
reliability in your applications

00:11:44,399 --> 00:11:47,440
we also hope to provide long-term

00:11:46,240 --> 00:11:49,360
support and training

00:11:47,440 --> 00:11:50,720
for anyone who's integrating rust into

00:11:49,360 --> 00:11:52,160
their offerings to make sure that you

00:11:50,720 --> 00:11:53,519
have a version of the compiler that

00:11:52,160 --> 00:11:55,600
works with your system

00:11:53,519 --> 00:11:56,800
over the long term as well as making

00:11:55,600 --> 00:11:58,800
sure that your developers and

00:11:56,800 --> 00:12:01,920
integrators know how to use rust

00:11:58,800 --> 00:12:01,920
in your applications

00:12:02,000 --> 00:12:06,000
we've been working over the last year on

00:12:03,920 --> 00:12:08,000
establishing partnerships with qualified

00:12:06,000 --> 00:12:10,160
compiler vendors particularly for the

00:12:08,000 --> 00:12:11,040
safety critical application to make sure

00:12:10,160 --> 00:12:12,720
as i said

00:12:11,040 --> 00:12:14,639
that you're not introducing a wholly

00:12:12,720 --> 00:12:15,519
brand new tool into your organization

00:12:14,639 --> 00:12:17,519
but instead

00:12:15,519 --> 00:12:19,760
you can begin using rust with your

00:12:17,519 --> 00:12:22,160
existing qualified compiler

00:12:19,760 --> 00:12:23,120
vendors we've partnered with green hills

00:12:22,160 --> 00:12:25,440
software to be

00:12:23,120 --> 00:12:26,959
our first uh person that we're moving

00:12:25,440 --> 00:12:28,880
forward to

00:12:26,959 --> 00:12:30,800
investigate what it will take to get a

00:12:28,880 --> 00:12:32,079
qualified compiler ready for

00:12:30,800 --> 00:12:34,639
applications like

00:12:32,079 --> 00:12:36,079
asl b in the automotive industry and

00:12:34,639 --> 00:12:37,760
even looking at higher levels of

00:12:36,079 --> 00:12:40,079
criticality and other

00:12:37,760 --> 00:12:42,320
industries we're also talking with even

00:12:40,079 --> 00:12:44,240
more qualified compiler vendors and hope

00:12:42,320 --> 00:12:46,399
over the next months and years to be

00:12:44,240 --> 00:12:47,920
able to support more and more qualified

00:12:46,399 --> 00:12:49,680
compilation tool chains

00:12:47,920 --> 00:12:51,120
to make sure that you really can use

00:12:49,680 --> 00:12:52,880
rust in the way that you're already

00:12:51,120 --> 00:12:54,639
developing safety critical software

00:12:52,880 --> 00:12:56,240
today

00:12:54,639 --> 00:12:57,839
we're also looking at establishing our

00:12:56,240 --> 00:12:59,440
first partnerships with customers

00:12:57,839 --> 00:13:01,120
some of them particularly in the

00:12:59,440 --> 00:13:02,079
automotive industry we're already

00:13:01,120 --> 00:13:04,000
talking with

00:13:02,079 --> 00:13:06,320
um and we hope to be able to talk about

00:13:04,000 --> 00:13:07,839
that publicly here in the future um but

00:13:06,320 --> 00:13:09,279
we're looking to establish these first

00:13:07,839 --> 00:13:11,440
partnership with customers to make sure

00:13:09,279 --> 00:13:13,200
that the first version of sealed rust

00:13:11,440 --> 00:13:15,600
whether that's mission critical sealed

00:13:13,200 --> 00:13:19,360
rust or safety critical sealed rust

00:13:15,600 --> 00:13:21,839
is ready to go on day one

00:13:19,360 --> 00:13:23,680
so we see this milestones being over

00:13:21,839 --> 00:13:25,760
between now and the end of the year

00:13:23,680 --> 00:13:26,800
establishing these partners partnerships

00:13:25,760 --> 00:13:29,200
with either

00:13:26,800 --> 00:13:30,079
um compiler companies potential

00:13:29,200 --> 00:13:32,240
customers

00:13:30,079 --> 00:13:34,720
silicon vendors and anyone building

00:13:32,240 --> 00:13:36,240
tools that has to do with around rust

00:13:34,720 --> 00:13:38,320
we're looking to be establishing those

00:13:36,240 --> 00:13:40,560
partnerships between the end of

00:13:38,320 --> 00:13:41,440
uh this year between now and the end of

00:13:40,560 --> 00:13:43,360
next year

00:13:41,440 --> 00:13:44,800
um then we're really hoping to kick off

00:13:43,360 --> 00:13:47,920
the technical

00:13:44,800 --> 00:13:49,519
uh focus between then and about 18

00:13:47,920 --> 00:13:51,920
months till we can offer our first

00:13:49,519 --> 00:13:54,880
version of mission critical sealed rust

00:13:51,920 --> 00:13:56,160
around the middle of 2022 and then

00:13:54,880 --> 00:13:58,800
hoping to have our first

00:13:56,160 --> 00:13:59,760
safety critical qualified version of

00:13:58,800 --> 00:14:02,000
sealed rust

00:13:59,760 --> 00:14:03,680
safety critical by the end of the year

00:14:02,000 --> 00:14:05,199
00:14:03,680 --> 00:14:06,959
so if you're interested in using rust

00:14:05,199 --> 00:14:08,800
sometime in these milestones definitely

00:14:06,959 --> 00:14:10,800
make sure that you reach out to us

00:14:08,800 --> 00:14:12,000
if you're interested in sealed rust and

00:14:10,800 --> 00:14:12,880
we've already been talking to you

00:14:12,000 --> 00:14:14,720
definitely

00:14:12,880 --> 00:14:16,800
uh make sure you keep talking to us and

00:14:14,720 --> 00:14:18,320
let us know what you're interested in

00:14:16,800 --> 00:14:20,000
but if you're if you haven't talked to

00:14:18,320 --> 00:14:22,079
us yet and you're interested in being an

00:14:20,000 --> 00:14:22,800
early customer or an early partner in

00:14:22,079 --> 00:14:24,240
sealed rust

00:14:22,800 --> 00:14:26,880
make sure you send us an email at

00:14:24,240 --> 00:14:29,360
sealedrust ferrissystems.com

00:14:26,880 --> 00:14:30,079
that's sealed dash rust at ferris

00:14:29,360 --> 00:14:32,160
systems

00:14:30,079 --> 00:14:33,600
dot com and we'll get in touch with you

00:14:32,160 --> 00:14:35,600
and make sure you're in the loop

00:14:33,600 --> 00:14:37,600
with all of these uh developments as

00:14:35,600 --> 00:14:40,240
they go

00:14:37,600 --> 00:14:40,880
so now enjoy the conference make sure

00:14:40,240 --> 00:14:42,800
you uh

00:14:40,880 --> 00:14:44,639
keep an eye on both the chat and the

00:14:42,800 --> 00:14:46,480
stream and we're gonna go to break now

00:14:44,639 --> 00:14:48,240
before we start our first talk

00:14:46,480 --> 00:14:52,399
so thank you all very much for being

00:14:48,240 --> 00:14:52,399
here and being a part of oxidize

00:14:56,839 --> 00:15:01,680
global

00:14:59,600 --> 00:15:01,680

YouTube URL: https://www.youtube.com/watch?v=6i9sonn9s1w


