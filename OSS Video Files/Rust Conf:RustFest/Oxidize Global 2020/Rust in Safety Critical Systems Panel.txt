Title: Rust in Safety Critical Systems Panel
Publication date: 2020-11-06
Playlist: Oxidize Global 2020
Description: 
	The Rust Programming Language has a lot to offer software developers: Memory Safety, Developer Convenience, and powerful static analysis tooling. However, introducing a new programming language like Rust into a Safety Critical domain for writing software for automotive, industrial, medical, or avionics purposes requires a high level of confidence, and a lot of regulatory hurdles.

This panel will discuss what makes developing software for the safety critical industry so different from other development areas, how Rust could be an improvement to the Status Quo of safety critical software development, and potential roadblocks Rust could experience on the way to a safety critical qualification. Join engineers with experience in a number of safety critical industries including compiler design, the automotive industry, and the testing and verification industry to discuss!
Captions: 
	00:00:03,010 --> 00:00:34,399
[Music]

00:00:32,800 --> 00:00:35,680
all right we've got everyone welcome

00:00:34,399 --> 00:00:38,079
everyone

00:00:35,680 --> 00:00:38,079
hello

00:00:38,719 --> 00:00:43,600
good morning good morning good afternoon

00:00:41,760 --> 00:00:45,360
depends on where in the world you are

00:00:43,600 --> 00:00:47,440
um but yeah i'm joined by three

00:00:45,360 --> 00:00:49,520
panelists today so this is our rust in

00:00:47,440 --> 00:00:51,280
safety critical systems panel

00:00:49,520 --> 00:00:52,559
and i'm joined by three folks and i'm

00:00:51,280 --> 00:00:54,559
gonna go down the list here

00:00:52,559 --> 00:00:56,480
so first we have jack greenbaum who's

00:00:54,559 --> 00:00:58,079
the senior director of engineering at

00:00:56,480 --> 00:01:00,559
green hill software jack do you want to

00:00:58,079 --> 00:01:03,920
give yourself a short intro

00:01:00,559 --> 00:01:04,479
sure um i'm involved in the development

00:01:03,920 --> 00:01:07,439
of both

00:01:04,479 --> 00:01:10,159
embedded systems software products and

00:01:07,439 --> 00:01:12,479
embedded systems tools at green hills

00:01:10,159 --> 00:01:13,600
i'm part of the advanced products team

00:01:12,479 --> 00:01:16,240
and we do

00:01:13,600 --> 00:01:18,240
engineering services and customizations

00:01:16,240 --> 00:01:20,320
of green hills products

00:01:18,240 --> 00:01:21,840
so i spend a lot of time sitting with

00:01:20,320 --> 00:01:23,680
our customers listening to their

00:01:21,840 --> 00:01:25,439
requirements and

00:01:23,680 --> 00:01:26,799
shepherding solutions to them all the

00:01:25,439 --> 00:01:29,119
way through including

00:01:26,799 --> 00:01:31,759
certification of uh you know functional

00:01:29,119 --> 00:01:34,240
safety certification of software

00:01:31,759 --> 00:01:36,560
all right great thanks so much next up

00:01:34,240 --> 00:01:38,320
we have nathan ashbacher who is the ceo

00:01:36,560 --> 00:01:40,159
of oxon corporation nathan do you want

00:01:38,320 --> 00:01:41,520
to introduce yourself real quick yeah

00:01:40,159 --> 00:01:43,600
sure so as james mentioned

00:01:41,520 --> 00:01:45,200
i'm the ceo of oxen um we're the

00:01:43,600 --> 00:01:46,240
smallest of the three companies that are

00:01:45,200 --> 00:01:48,479
represented here

00:01:46,240 --> 00:01:50,079
uh we're a startup that actually uses

00:01:48,479 --> 00:01:51,680
rust for active development in fact

00:01:50,079 --> 00:01:53,200
almost entirely rus

00:01:51,680 --> 00:01:54,880
save for some closure that we write some

00:01:53,200 --> 00:01:56,719
parsers in because of one particular

00:01:54,880 --> 00:01:59,360
closure fanatic on the team

00:01:56,719 --> 00:02:01,520
um our the company's sort of goal is to

00:01:59,360 --> 00:02:03,040
build engineering tools that are

00:02:01,520 --> 00:02:05,280
if anybody's familiar with sort of like

00:02:03,040 --> 00:02:07,200
the cad cam and finite element analysis

00:02:05,280 --> 00:02:08,800
tools things like that that

00:02:07,200 --> 00:02:10,239
uh that mechanical and electrical

00:02:08,800 --> 00:02:12,640
engineers have had access to

00:02:10,239 --> 00:02:13,920
for many many decades is to try to

00:02:12,640 --> 00:02:15,599
modernize the sort of software

00:02:13,920 --> 00:02:17,920
development tool chain to include things

00:02:15,599 --> 00:02:19,200
for analyzing system behavior

00:02:17,920 --> 00:02:21,280
kind of at the software hardware

00:02:19,200 --> 00:02:22,959
boundary level so a lot of embedded

00:02:21,280 --> 00:02:24,959
systems things like that

00:02:22,959 --> 00:02:26,080
i've been using and following rust

00:02:24,959 --> 00:02:29,200
personally since

00:02:26,080 --> 00:02:30,959
for i think 2011 like a long time back

00:02:29,200 --> 00:02:32,800
when it was systems erlang to me

00:02:30,959 --> 00:02:34,000
before it became like better c plus plus

00:02:32,800 --> 00:02:36,640
in some dimension

00:02:34,000 --> 00:02:37,760
um and so we're i've been following it

00:02:36,640 --> 00:02:39,440
along the entire time

00:02:37,760 --> 00:02:40,560
and i've been trying to get it in use at

00:02:39,440 --> 00:02:42,160
different places that i've worked and

00:02:40,560 --> 00:02:45,760
then finally just had to start a company

00:02:42,160 --> 00:02:45,760
so that we can use it for real

00:02:46,000 --> 00:02:50,319
all right thank you so much and our

00:02:47,840 --> 00:02:52,800
third guest today is nicholas corcockas

00:02:50,319 --> 00:02:53,760
from who is a software architect at

00:02:52,800 --> 00:02:55,680
volvo cars

00:02:53,760 --> 00:02:57,120
nico do you want to introduce yourself

00:02:55,680 --> 00:02:59,360
yeah thanks james

00:02:57,120 --> 00:03:01,040
my name is nico i'm working at volvo as

00:02:59,360 --> 00:03:03,280
assistant architect

00:03:01,040 --> 00:03:04,560
i'm very happy to be here with you it

00:03:03,280 --> 00:03:08,159
was a great uh

00:03:04,560 --> 00:03:10,800
a great day my role at volvo is

00:03:08,159 --> 00:03:13,280
system architect designing our next

00:03:10,800 --> 00:03:16,239
generation platforms

00:03:13,280 --> 00:03:19,280
one of the things we are really into is

00:03:16,239 --> 00:03:21,760
creating safe products volvo has a huge

00:03:19,280 --> 00:03:23,280
history in that since the first signal

00:03:21,760 --> 00:03:25,200
um

00:03:23,280 --> 00:03:27,280
yeah and i need to give a shout out to

00:03:25,200 --> 00:03:29,840
our project eva

00:03:27,280 --> 00:03:31,519
which is an open source of all our

00:03:29,840 --> 00:03:35,680
safety research for the last

00:03:31,519 --> 00:03:37,519
50 years yep yeah back to you james

00:03:35,680 --> 00:03:39,280
yeah thank you very much and for those

00:03:37,519 --> 00:03:41,200
who are just joining us for the first uh

00:03:39,280 --> 00:03:43,440
segment today i'm james muns

00:03:41,200 --> 00:03:44,400
i'm a managing director at ferris

00:03:43,440 --> 00:03:46,400
systems

00:03:44,400 --> 00:03:48,000
i'll be acting as the moderator today

00:03:46,400 --> 00:03:49,760
and my background is in

00:03:48,000 --> 00:03:51,840
a variety of safety critical software

00:03:49,760 --> 00:03:53,760
development including avionics

00:03:51,840 --> 00:03:56,159
gas detection robotics as well as some

00:03:53,760 --> 00:03:58,959
non-safety critical fields like iot

00:03:56,159 --> 00:04:01,599
um so we're coming together today to

00:03:58,959 --> 00:04:02,000
discuss rust in safety critical systems

00:04:01,599 --> 00:04:04,000
so

00:04:02,000 --> 00:04:06,080
as of today it's not generally possible

00:04:04,000 --> 00:04:08,720
to use the rust programming language

00:04:06,080 --> 00:04:10,239
uh for safety critical software

00:04:08,720 --> 00:04:11,760
development at least in regulated

00:04:10,239 --> 00:04:13,680
industries and things like that

00:04:11,760 --> 00:04:15,040
however rust is really getting to a

00:04:13,680 --> 00:04:17,199
changing point on that

00:04:15,040 --> 00:04:19,040
in terms of making the moves towards

00:04:17,199 --> 00:04:20,079
being ready for safety critical systems

00:04:19,040 --> 00:04:22,000
and we feel that

00:04:20,079 --> 00:04:23,680
uh rust has a lot to offer safety

00:04:22,000 --> 00:04:25,520
critical systems so we're going to be

00:04:23,680 --> 00:04:28,160
talking as a panel for the next

00:04:25,520 --> 00:04:29,199
uh little less than 60 minutes or so so

00:04:28,160 --> 00:04:31,360
if you're watching this

00:04:29,199 --> 00:04:32,320
on the stream we would love to have you

00:04:31,360 --> 00:04:34,000
ask questions

00:04:32,320 --> 00:04:35,600
the last 30 minutes so we're going to be

00:04:34,000 --> 00:04:37,840
talking for 60 minutes

00:04:35,600 --> 00:04:40,240
and then 30 minutes of q a so if you

00:04:37,840 --> 00:04:42,080
have any questions throughout the

00:04:40,240 --> 00:04:44,160
panel please feel free to throw that in

00:04:42,080 --> 00:04:46,000
the matrix room for the panel we'll have

00:04:44,160 --> 00:04:48,400
people collecting those questions and

00:04:46,000 --> 00:04:50,160
i'll pull those up uh for the last 30

00:04:48,400 --> 00:04:51,440
minutes of this 90 minute panel

00:04:50,160 --> 00:04:53,600
and we'll have a little bit of back and

00:04:51,440 --> 00:04:56,800
forth so without

00:04:53,600 --> 00:04:57,919
uh any further ado uh i'd love to start

00:04:56,800 --> 00:05:00,320
off with

00:04:57,919 --> 00:05:02,000
just the broad question of what makes

00:05:00,320 --> 00:05:03,759
safety critical systems different from

00:05:02,000 --> 00:05:05,039
other software or electrical systems

00:05:03,759 --> 00:05:06,639
what really makes the difference when

00:05:05,039 --> 00:05:11,280
you're designing software

00:05:06,639 --> 00:05:12,720
that's designed to be safe for humans

00:05:11,280 --> 00:05:13,919
so i'll kick this off to jack because i

00:05:12,720 --> 00:05:16,240
know you've been talking about safety

00:05:13,919 --> 00:05:17,919
critical already a little bit today

00:05:16,240 --> 00:05:19,280
you know i think designing for

00:05:17,919 --> 00:05:21,440
testability

00:05:19,280 --> 00:05:22,639
is one of the things that's that's

00:05:21,440 --> 00:05:25,199
different

00:05:22,639 --> 00:05:27,440
uh the level of rigor in terms of

00:05:25,199 --> 00:05:29,759
requirements coverage

00:05:27,440 --> 00:05:33,919
uh and test coverage really makes you

00:05:29,759 --> 00:05:33,919
think especially about error handling

00:05:34,000 --> 00:05:37,199
who's gonna who's gonna respond to this

00:05:36,960 --> 00:05:39,680
is

00:05:37,199 --> 00:05:40,960
anyone am i just going to punt

00:05:39,680 --> 00:05:42,320
completely

00:05:40,960 --> 00:05:44,720
you know i mentioned in my talk

00:05:42,320 --> 00:05:46,240
yesterday that a blank screen is a safe

00:05:44,720 --> 00:05:49,280
state

00:05:46,240 --> 00:05:51,199
in an instrument cluster so

00:05:49,280 --> 00:05:52,880
given all the assurance activities you

00:05:51,199 --> 00:05:55,440
have to do

00:05:52,880 --> 00:05:57,600
you know you might just punt to that

00:05:55,440 --> 00:06:00,319
more frequently

00:05:57,600 --> 00:06:01,039
or uh you know just design your code to

00:06:00,319 --> 00:06:04,479
handles it

00:06:01,039 --> 00:06:06,160
handle errors more easily because you

00:06:04,479 --> 00:06:08,479
know you're going to get a big one

00:06:06,160 --> 00:06:09,600
so don't worry about the little ones i i

00:06:08,479 --> 00:06:12,880
hope that was a

00:06:09,600 --> 00:06:14,319
connected thought yeah definitely uh

00:06:12,880 --> 00:06:15,039
nico or nathan do you have any thoughts

00:06:14,319 --> 00:06:16,479
about

00:06:15,039 --> 00:06:17,840
what really makes when you're designing

00:06:16,479 --> 00:06:19,600
software that's not meant to be safety

00:06:17,840 --> 00:06:21,520
critical versus safety critical what

00:06:19,600 --> 00:06:24,560
switches in your brain when you when you

00:06:21,520 --> 00:06:25,680
drop into a safety critical project

00:06:24,560 --> 00:06:27,440
well i mean there's certain things that

00:06:25,680 --> 00:06:29,039
we run into with our customers in this

00:06:27,440 --> 00:06:30,400
sort of changing world as

00:06:29,039 --> 00:06:31,919
especially for us we're at sort of

00:06:30,400 --> 00:06:32,720
systems of systems you know so you're

00:06:31,919 --> 00:06:34,400
getting some

00:06:32,720 --> 00:06:35,919
composition of big behavior like in a

00:06:34,400 --> 00:06:38,160
chemical refinery or something like that

00:06:35,919 --> 00:06:40,720
relative to a single component where

00:06:38,160 --> 00:06:41,199
um you know folks have to it's sort of

00:06:40,720 --> 00:06:43,039
like

00:06:41,199 --> 00:06:45,039
just kind of like what jack was saying

00:06:43,039 --> 00:06:45,759
where you're you're spending your time

00:06:45,039 --> 00:06:48,000
thinking about

00:06:45,759 --> 00:06:49,599
how is this going to go wrong right

00:06:48,000 --> 00:06:51,120
you're spending a lot more time doing

00:06:49,599 --> 00:06:52,880
that because it may be

00:06:51,120 --> 00:06:54,400
near impossible for field deployment

00:06:52,880 --> 00:06:55,919
reasons to actually update the thing

00:06:54,400 --> 00:06:58,160
so you get one shot at getting this

00:06:55,919 --> 00:06:59,440
thing to be you know working

00:06:58,160 --> 00:07:01,199
whether it's you know launching it into

00:06:59,440 --> 00:07:01,520
space or it's buried in the bowels of

00:07:01,199 --> 00:07:03,199
you know

00:07:01,520 --> 00:07:05,680
it's 20 miles underground something like

00:07:03,199 --> 00:07:08,080
that there's another part of it which is

00:07:05,680 --> 00:07:09,599
uh it may just be difficult to update it

00:07:08,080 --> 00:07:11,360
and sort of discover changes and push

00:07:09,599 --> 00:07:13,039
something out there

00:07:11,360 --> 00:07:14,639
because of regulatory requirements right

00:07:13,039 --> 00:07:16,319
it's a lot of work to make up to make a

00:07:14,639 --> 00:07:17,840
one-line code change maybe like a 15

00:07:16,319 --> 00:07:19,039
million dollar cost to do all the other

00:07:17,840 --> 00:07:20,479
stuff that you need to do

00:07:19,039 --> 00:07:22,479
uh to get that you know deployed out

00:07:20,479 --> 00:07:23,520
there into the system and so this puts a

00:07:22,479 --> 00:07:25,199
lot of

00:07:23,520 --> 00:07:26,639
much more onus and i think this is some

00:07:25,199 --> 00:07:28,240
of the tension between sort of

00:07:26,639 --> 00:07:29,840
traditional software development and

00:07:28,240 --> 00:07:32,240
safety critical development is it puts

00:07:29,840 --> 00:07:35,280
so much more onus on the ahead of time

00:07:32,240 --> 00:07:37,039
like move slow to go fast is very

00:07:35,280 --> 00:07:38,319
uh is like the way you have to do it in

00:07:37,039 --> 00:07:40,800
the safety critical world

00:07:38,319 --> 00:07:42,080
uh in the more sort of i.t and consumer

00:07:40,800 --> 00:07:43,280
world it's a lot more

00:07:42,080 --> 00:07:44,479
you know it's a little bit more like

00:07:43,280 --> 00:07:46,080
that you know the colloquial like break

00:07:44,479 --> 00:07:47,360
faster move faster break things kind of

00:07:46,080 --> 00:07:49,039
thing because you just you can patch it

00:07:47,360 --> 00:07:50,560
get it out there change it right

00:07:49,039 --> 00:07:52,160
um so that's a that's a pretty big

00:07:50,560 --> 00:07:54,160
difference um

00:07:52,160 --> 00:07:55,840
you know i've been on both sides of this

00:07:54,160 --> 00:07:58,240
both in the mechanical engineering side

00:07:55,840 --> 00:07:59,680
through my uh the unsatisfying part of

00:07:58,240 --> 00:08:00,400
my career working on things that weren't

00:07:59,680 --> 00:08:01,680
critical

00:08:00,400 --> 00:08:03,520
now to the part that i like on the

00:08:01,680 --> 00:08:05,440
critical things um and it's

00:08:03,520 --> 00:08:06,879
it is a it's a very much like failure

00:08:05,440 --> 00:08:07,680
first mindset like that's where you have

00:08:06,879 --> 00:08:09,840
to be

00:08:07,680 --> 00:08:11,599
um and it's it's much less about future

00:08:09,840 --> 00:08:12,000
development and much more about like how

00:08:11,599 --> 00:08:15,039
is this

00:08:12,000 --> 00:08:16,879
going to you know harm me the physical

00:08:15,039 --> 00:08:18,000
environment the end user the other

00:08:16,879 --> 00:08:20,000
people that are adjacently

00:08:18,000 --> 00:08:21,199
you know around this system so it's

00:08:20,000 --> 00:08:21,919
quite a different like mindsets you have

00:08:21,199 --> 00:08:25,520
to put yourself

00:08:21,919 --> 00:08:28,400
in yeah

00:08:25,520 --> 00:08:29,759
oh i think you're muted nico right and i

00:08:28,400 --> 00:08:31,199
would like to follow up on

00:08:29,759 --> 00:08:33,360
this morning's early morning

00:08:31,199 --> 00:08:34,080
presentation for us in europe uh from

00:08:33,360 --> 00:08:37,360
zach and you

00:08:34,080 --> 00:08:38,959
uh james um you you give a great

00:08:37,360 --> 00:08:42,080
introduction for this lot and

00:08:38,959 --> 00:08:44,240
what the safe system is and but it's not

00:08:42,080 --> 00:08:46,560
practically and i would like to add a

00:08:44,240 --> 00:08:47,600
few things on zach's presentation i was

00:08:46,560 --> 00:08:50,720
saving it for this

00:08:47,600 --> 00:08:53,279
session actually yeah

00:08:50,720 --> 00:08:55,120
one of the things is that um one of very

00:08:53,279 --> 00:08:55,440
interesting things this is a trivia by

00:08:55,120 --> 00:08:58,480
the way

00:08:55,440 --> 00:09:00,240
um of iso 26262 is that

00:08:58,480 --> 00:09:02,000
it does not address the nominal

00:09:00,240 --> 00:09:03,920
performance of an electrical or

00:09:02,000 --> 00:09:06,240
electronic system which is

00:09:03,920 --> 00:09:07,760
it's it's amazing what it means is that

00:09:06,240 --> 00:09:08,720
if you design a braking system for

00:09:07,760 --> 00:09:13,440
example

00:09:08,720 --> 00:09:16,640
um to be 500 newton meters of torque and

00:09:13,440 --> 00:09:18,640
this is uh not enough if your

00:09:16,640 --> 00:09:22,080
requirement says that this uh this

00:09:18,640 --> 00:09:23,279
braking power is not enough um it's fine

00:09:22,080 --> 00:09:25,360
from a safety perspective

00:09:23,279 --> 00:09:27,120
however if you design it to be 500

00:09:25,360 --> 00:09:29,120
newton meters of torque or whatever

00:09:27,120 --> 00:09:30,800
um and then the system doesn't deliver

00:09:29,120 --> 00:09:32,959
that this is considered

00:09:30,800 --> 00:09:34,320
a fault and eventually leads or a

00:09:32,959 --> 00:09:37,600
failure um

00:09:34,320 --> 00:09:38,240
so of course uh from as an automotive

00:09:37,600 --> 00:09:41,519
industry

00:09:38,240 --> 00:09:41,839
we this this theoretical uh barrier is

00:09:41,519 --> 00:09:45,600
not

00:09:41,839 --> 00:09:48,720
it's not there in practice because um um

00:09:45,600 --> 00:09:52,080
we we always want to save product we

00:09:48,720 --> 00:09:55,040
really want to have a product that

00:09:52,080 --> 00:09:55,440
will never harm a person or um or affect

00:09:55,040 --> 00:09:58,560
the

00:09:55,440 --> 00:10:00,080
property or life or whatever whether you

00:09:58,560 --> 00:10:02,000
are

00:10:00,080 --> 00:10:03,600
an occupant of the physical or outside

00:10:02,000 --> 00:10:04,000
and of course everything i'm going to

00:10:03,600 --> 00:10:06,399
say here

00:10:04,000 --> 00:10:07,200
is around revolves around automotive

00:10:06,399 --> 00:10:10,320
because

00:10:07,200 --> 00:10:13,600
that's my proverbial hammer um right

00:10:10,320 --> 00:10:18,720
um in addition to that uh as

00:10:13,600 --> 00:10:22,399
another speaks to um jack's points

00:10:18,720 --> 00:10:28,000
but maybe yeah we have

00:10:22,399 --> 00:10:30,000
a lot of systems that depend on

00:10:28,000 --> 00:10:32,240
that protect our lives in a modern car

00:10:30,000 --> 00:10:33,279
and all those systems we hope and we

00:10:32,240 --> 00:10:35,600
trust that they

00:10:33,279 --> 00:10:36,640
will be there uh when we need them like

00:10:35,600 --> 00:10:39,920
break or

00:10:36,640 --> 00:10:43,279
acceleration when you we're depressed

00:10:39,920 --> 00:10:46,800
um so in general

00:10:43,279 --> 00:10:47,600
rust comes as a system to develop all

00:10:46,800 --> 00:10:50,160
those functions

00:10:47,600 --> 00:10:51,360
because for for an oem we only see

00:10:50,160 --> 00:10:53,120
functions we don't care

00:10:51,360 --> 00:10:54,880
what compiler is going to be used we

00:10:53,120 --> 00:10:58,399
want our function which is

00:10:54,880 --> 00:11:00,079
a high level use case for example um

00:10:58,399 --> 00:11:01,760
will be served correctly and

00:11:00,079 --> 00:11:05,680
inaccurately yeah

00:11:01,760 --> 00:11:07,680
and yeah it's really interesting i mean

00:11:05,680 --> 00:11:09,040
when i go around the room and ask jack

00:11:07,680 --> 00:11:11,519
what it means to

00:11:09,040 --> 00:11:13,519
uh to have safety critical systems he

00:11:11,519 --> 00:11:15,839
talks about handling errors which really

00:11:13,519 --> 00:11:17,600
comes down to a lot of planning on what

00:11:15,839 --> 00:11:19,360
is acceptable to handle and what it

00:11:17,600 --> 00:11:21,839
isn't acceptable to handle and

00:11:19,360 --> 00:11:24,320
nathan mentioned a lot about uh planning

00:11:21,839 --> 00:11:26,079
ahead because you may not be able to

00:11:24,320 --> 00:11:27,600
just change things at last minute you

00:11:26,079 --> 00:11:28,880
really need to put thought into your

00:11:27,600 --> 00:11:30,720
design and you really need to think

00:11:28,880 --> 00:11:32,880
about what your system is doing

00:11:30,720 --> 00:11:35,200
and then going to nico mentioning iso

00:11:32,880 --> 00:11:37,680
26262 as as was mentioned in

00:11:35,200 --> 00:11:39,279
jack's presentation earlier today all of

00:11:37,680 --> 00:11:41,200
these safety critical industries have a

00:11:39,279 --> 00:11:43,120
lot of stringent requirements that

00:11:41,200 --> 00:11:45,120
are really just processes to help the

00:11:43,120 --> 00:11:45,600
engineers think through what they're

00:11:45,120 --> 00:11:47,120
building

00:11:45,600 --> 00:11:48,800
and how they're building it and making

00:11:47,120 --> 00:11:50,399
sure that they're applying some level of

00:11:48,800 --> 00:11:51,680
rigor and process to that

00:11:50,399 --> 00:11:54,480
and i think that's one of those things

00:11:51,680 --> 00:11:56,320
that that is really different

00:11:54,480 --> 00:11:57,760
versus other systems where you say oh

00:11:56,320 --> 00:11:59,440
we'll figure it out as we go

00:11:57,760 --> 00:12:01,120
because we're always adapting kind of to

00:11:59,440 --> 00:12:03,120
the last-minute information but for

00:12:01,120 --> 00:12:04,959
safety critical systems it requires

00:12:03,120 --> 00:12:06,320
a lot of forethought in planning because

00:12:04,959 --> 00:12:07,920
you really do need to kind of

00:12:06,320 --> 00:12:10,000
write down what you're going to do do it

00:12:07,920 --> 00:12:11,200
and then say that you did it correctly

00:12:10,000 --> 00:12:13,200
and that's one of those things that's

00:12:11,200 --> 00:12:13,839
that's really different for people not

00:12:13,200 --> 00:12:15,519
coming from

00:12:13,839 --> 00:12:17,600
cp critical industries who might not

00:12:15,519 --> 00:12:18,720
understand why we can't just throw the

00:12:17,600 --> 00:12:21,839
rust compiler

00:12:18,720 --> 00:12:23,040
into a safety critical system because

00:12:21,839 --> 00:12:24,880
we know that there's some level of

00:12:23,040 --> 00:12:26,480
regulation and things around that but

00:12:24,880 --> 00:12:28,399
it really does come as a surprise to

00:12:26,480 --> 00:12:29,360
some people that there's such stringent

00:12:28,399 --> 00:12:31,360
checks that say

00:12:29,360 --> 00:12:32,720
you really need to be using specific

00:12:31,360 --> 00:12:34,079
tools

00:12:32,720 --> 00:12:36,399
i'm interested if anyone has any

00:12:34,079 --> 00:12:38,000
comments on on what it really means in

00:12:36,399 --> 00:12:40,639
that delta of of having

00:12:38,000 --> 00:12:42,399
to think about what you're going to do

00:12:40,639 --> 00:12:43,839
not only because you need to

00:12:42,399 --> 00:12:45,519
make sure you get it right but also

00:12:43,839 --> 00:12:48,480
because you need to document all of the

00:12:45,519 --> 00:12:50,480
things that you're doing to get it right

00:12:48,480 --> 00:12:52,000
and perhaps the compiler is not the most

00:12:50,480 --> 00:12:54,320
expensive part of that process

00:12:52,000 --> 00:12:55,680
i mean if you think that we are building

00:12:54,320 --> 00:12:57,839
a rust component

00:12:55,680 --> 00:13:00,240
based on konzak's presentation using a

00:12:57,839 --> 00:13:03,200
statically a static clip approach where

00:13:00,240 --> 00:13:03,680
your rust component is is not done to an

00:13:03,200 --> 00:13:06,320
integra

00:13:03,680 --> 00:13:06,800
the integer platform let's say um then

00:13:06,320 --> 00:13:09,680
in that

00:13:06,800 --> 00:13:10,800
in that process um whatever we build it

00:13:09,680 --> 00:13:14,240
needs

00:13:10,800 --> 00:13:15,200
whatever crate we put this also needs to

00:13:14,240 --> 00:13:18,000
be

00:13:15,200 --> 00:13:19,279
a safe a safe crate it needs to have

00:13:18,000 --> 00:13:21,920
followed

00:13:19,279 --> 00:13:23,440
the full qualifi it means at least to

00:13:21,920 --> 00:13:24,480
have to have been qualified at some

00:13:23,440 --> 00:13:26,760
point in time

00:13:24,480 --> 00:13:28,160
or to have been developed as an iso

00:13:26,760 --> 00:13:30,720
00:13:28,160 --> 00:13:31,760
component a software component element

00:13:30,720 --> 00:13:33,839
um

00:13:31,760 --> 00:13:35,200
which means that the compiler is

00:13:33,839 --> 00:13:36,639
something that you need to qualify but

00:13:35,200 --> 00:13:38,480
your environment is also another thing

00:13:36,639 --> 00:13:40,639
you need to qualify and

00:13:38,480 --> 00:13:42,560
that's one thing that was missing from

00:13:40,639 --> 00:13:45,440
your presentations i think

00:13:42,560 --> 00:13:47,199
that and perhaps you can help us with

00:13:45,440 --> 00:13:49,519
the effort how much effort do you need

00:13:47,199 --> 00:13:51,199
to qualify the compiler versus how much

00:13:49,519 --> 00:13:54,160
effort is to qualify the integral

00:13:51,199 --> 00:13:54,160
platform for example

00:13:55,199 --> 00:13:59,199
yeah that's you know that's interesting

00:13:57,199 --> 00:14:02,800
the um

00:13:59,199 --> 00:14:06,880
the tools qualification problem is

00:14:02,800 --> 00:14:06,880
uh is really there

00:14:07,040 --> 00:14:12,160
in some industries they just skip it and

00:14:10,000 --> 00:14:14,000
qualify at the binary level they don't

00:14:12,160 --> 00:14:15,199
qualify the tool they don't trust the

00:14:14,000 --> 00:14:18,560
tool

00:14:15,199 --> 00:14:21,199
so they provide assurance uh

00:14:18,560 --> 00:14:22,480
at the code level on a binary it's

00:14:21,199 --> 00:14:25,680
they're not talking about

00:14:22,480 --> 00:14:29,120
line coverage they talk about uh

00:14:25,680 --> 00:14:33,360
binary block coverage so

00:14:29,120 --> 00:14:37,519
you can avoid qualification if you

00:14:33,360 --> 00:14:41,680
substitute other assurance methods

00:14:37,519 --> 00:14:43,920
um but that you know but 26262 says

00:14:41,680 --> 00:14:45,440
you're gonna you're going to qualify

00:14:43,920 --> 00:14:48,480
your tools

00:14:45,440 --> 00:14:50,480
i i was hoping that we would i was

00:14:48,480 --> 00:14:51,920
hoping for something like

00:14:50,480 --> 00:14:54,320
the tools are developed as a nice

00:14:51,920 --> 00:14:57,120
opportunity to standard which means that

00:14:54,320 --> 00:14:58,639
they don't need qualification and

00:14:57,120 --> 00:15:02,240
because they are developed as a

00:14:58,639 --> 00:15:04,320
another out of context element

00:15:02,240 --> 00:15:06,480
well the integrity kernel is developed

00:15:04,320 --> 00:15:09,839
as a safety element out of context

00:15:06,480 --> 00:15:13,120
but the compiler and even the runtime

00:15:09,839 --> 00:15:15,279
um these are these aren't um

00:15:13,120 --> 00:15:16,720
safety elements they're qualified

00:15:15,279 --> 00:15:20,160
components

00:15:16,720 --> 00:15:21,920
and 26262 has a separate process for

00:15:20,160 --> 00:15:24,480
doing that

00:15:21,920 --> 00:15:26,320
so it's a different level of rigor that

00:15:24,480 --> 00:15:29,519
recognizes that

00:15:26,320 --> 00:15:32,639
even though the product can

00:15:29,519 --> 00:15:35,040
inject a fault into the system

00:15:32,639 --> 00:15:36,800
that the compiler is not present on the

00:15:35,040 --> 00:15:40,160
on the item

00:15:36,800 --> 00:15:41,519
so the compiler is not part of the item

00:15:40,160 --> 00:15:44,800
so there's less rigor on the

00:15:41,519 --> 00:15:47,920
qualification with the recognition that

00:15:44,800 --> 00:15:51,360
all the supporting processes will

00:15:47,920 --> 00:15:52,800
catch anything so to zoom out a little

00:15:51,360 --> 00:15:53,680
bit i know during the uh the

00:15:52,800 --> 00:15:56,480
introductions

00:15:53,680 --> 00:15:59,440
nathan we were talking about being uh

00:15:56,480 --> 00:16:00,800
sort of new to iso 26262 and i know a

00:15:59,440 --> 00:16:01,360
couple years back you said you kind of

00:16:00,800 --> 00:16:03,680
got

00:16:01,360 --> 00:16:04,880
the crash course of of what it meant to

00:16:03,680 --> 00:16:06,720
develop a uh

00:16:04,880 --> 00:16:08,240
a safety and that's a poor word for

00:16:06,720 --> 00:16:10,800
automotive certainly but

00:16:08,240 --> 00:16:12,240
uh you you got kind of the the the

00:16:10,800 --> 00:16:13,680
learning experience of what it really

00:16:12,240 --> 00:16:16,240
means to develop a component that's

00:16:13,680 --> 00:16:18,800
designed for iso 26262. so for the folks

00:16:16,240 --> 00:16:20,959
at home who haven't necessarily been

00:16:18,800 --> 00:16:22,160
through an iso 26262 process or don't

00:16:20,959 --> 00:16:24,079
know what qualified or

00:16:22,160 --> 00:16:26,480
what safety in context or safety out of

00:16:24,079 --> 00:16:28,079
context means uh do you have kind of a

00:16:26,480 --> 00:16:28,720
bridge of the gap there for someone who

00:16:28,079 --> 00:16:30,959
learned

00:16:28,720 --> 00:16:33,360
um decently recently what what all this

00:16:30,959 --> 00:16:36,959
vocabulary and things like that means

00:16:33,360 --> 00:16:38,480
yeah so oh my god so i i'll give you a

00:16:36,959 --> 00:16:41,120
little brief story which was

00:16:38,480 --> 00:16:42,320
so i i came out of fintech um there's

00:16:41,120 --> 00:16:44,160
something about that i want to like kind

00:16:42,320 --> 00:16:45,680
of latch on to this in a little bit but

00:16:44,160 --> 00:16:48,480
um came out of fintech and i ended up

00:16:45,680 --> 00:16:50,480
going to work at become the cto of a

00:16:48,480 --> 00:16:52,399
company startup working on autonomous

00:16:50,480 --> 00:16:53,199
vehicle sort of infrastructure tools

00:16:52,399 --> 00:16:54,800
like not the

00:16:53,199 --> 00:16:56,399
not the brains the autonomous vehicle

00:16:54,800 --> 00:16:59,759
like the skeleton and muscle tissue

00:16:56,399 --> 00:17:01,759
right and um on the software side and

00:16:59,759 --> 00:17:03,040
i i had to sort of get myself

00:17:01,759 --> 00:17:04,319
indoctrinated into the automotive

00:17:03,040 --> 00:17:05,360
industry and kind of it was all the

00:17:04,319 --> 00:17:06,720
frontier stuff

00:17:05,360 --> 00:17:08,559
you know there was not programs underway

00:17:06,720 --> 00:17:10,319
but programs that were gonna happen uh

00:17:08,559 --> 00:17:12,400
there was all kinds of uncertainty

00:17:10,319 --> 00:17:13,439
i would ask folks at different oems well

00:17:12,400 --> 00:17:15,360
how are you gonna make this

00:17:13,439 --> 00:17:16,640
ai safe like you know i assume that

00:17:15,360 --> 00:17:18,000
that's a thing you have to do

00:17:16,640 --> 00:17:20,319
and they would say to me they would say

00:17:18,000 --> 00:17:22,079
well we'll follow iso 26262 and i just

00:17:20,319 --> 00:17:23,360
would believe that at first i'm going i

00:17:22,079 --> 00:17:26,079
guess they have an answer

00:17:23,360 --> 00:17:27,360
you know and so uh this happened enough

00:17:26,079 --> 00:17:29,440
times though i should probably know more

00:17:27,360 --> 00:17:32,160
about this iso 26262 thing

00:17:29,440 --> 00:17:33,280
so then uh in april i remember the month

00:17:32,160 --> 00:17:36,000
because it was the whole month

00:17:33,280 --> 00:17:38,000
a few years back uh i just sat through i

00:17:36,000 --> 00:17:39,600
got myself a draft of the second edition

00:17:38,000 --> 00:17:42,559
that hadn't come out yet

00:17:39,600 --> 00:17:44,320
and i read it from end to end twice and

00:17:42,559 --> 00:17:47,679
it was the most depressing

00:17:44,320 --> 00:17:49,919
time of my life did you understand it

00:17:47,679 --> 00:17:51,280
after only two readings though no

00:17:49,919 --> 00:17:54,320
because it's circular

00:17:51,280 --> 00:17:54,640
like the thing it doesn't actually tell

00:17:54,320 --> 00:17:57,120
you

00:17:54,640 --> 00:17:58,720
really what to do that's like that's the

00:17:57,120 --> 00:18:02,080
biggest

00:17:58,720 --> 00:18:04,960
almost once you know the secret words

00:18:02,080 --> 00:18:06,640
yeah sure like that it tells you yeah it

00:18:04,960 --> 00:18:09,200
tells you certain things like

00:18:06,640 --> 00:18:10,960
to do but but it doesn't necessarily

00:18:09,200 --> 00:18:12,160
it's not entirely prescriptive about how

00:18:10,960 --> 00:18:14,000
to go about

00:18:12,160 --> 00:18:15,360
like you know like what is the like uh

00:18:14,000 --> 00:18:16,799
what is the set of technologies and

00:18:15,360 --> 00:18:18,640
things like that that you should use or

00:18:16,799 --> 00:18:20,080
you know certain uh they they kind of

00:18:18,640 --> 00:18:21,520
call out there's like a weird hybrid

00:18:20,080 --> 00:18:22,320
between like certain types of testing

00:18:21,520 --> 00:18:24,320
practices

00:18:22,320 --> 00:18:25,679
and yeah type of verification but

00:18:24,320 --> 00:18:28,080
nothing that just goes like this is how

00:18:25,679 --> 00:18:29,600
you do it right and you follow

00:18:28,080 --> 00:18:32,080
they might say you need this work

00:18:29,600 --> 00:18:34,640
product but not what the sections are

00:18:32,080 --> 00:18:36,160
supposed to be in there right and how do

00:18:34,640 --> 00:18:37,520
i generate this thing and what's how is

00:18:36,160 --> 00:18:40,000
it okay to generate it

00:18:37,520 --> 00:18:42,000
um that was really frustrating but what

00:18:40,000 --> 00:18:45,520
mostly stuck out to me was how

00:18:42,000 --> 00:18:48,000
uh at least from my perspective was how

00:18:45,520 --> 00:18:49,280
ill-fit uh the standard was for the

00:18:48,000 --> 00:18:50,400
types of software that were going to

00:18:49,280 --> 00:18:52,559
need to be built

00:18:50,400 --> 00:18:54,240
um because it was very clearly designed

00:18:52,559 --> 00:18:56,320
for designing electrical systems

00:18:54,240 --> 00:18:57,679
and software was kind of like a like

00:18:56,320 --> 00:18:59,840
where software is going to be

00:18:57,679 --> 00:19:01,039
maybe 500 lines of a control a control

00:18:59,840 --> 00:19:01,760
loop like implementation or something

00:19:01,039 --> 00:19:03,360
like that

00:19:01,760 --> 00:19:05,600
not a pile of like massively

00:19:03,360 --> 00:19:07,200
interconnected you know data flow

00:19:05,600 --> 00:19:09,280
crunching you know camera images like

00:19:07,200 --> 00:19:10,000
all this stuff um and so that was a like

00:19:09,280 --> 00:19:11,600
a very

00:19:10,000 --> 00:19:13,039
and so then i would go back to all those

00:19:11,600 --> 00:19:13,520
people that i spoke to a lot of industry

00:19:13,039 --> 00:19:15,679
and go like

00:19:13,520 --> 00:19:17,600
this doesn't make any sense don't tell

00:19:15,679 --> 00:19:18,559
me iso 26262 because that's not gonna

00:19:17,600 --> 00:19:21,679
work for this

00:19:18,559 --> 00:19:23,200
um and so i i that was i think how i got

00:19:21,679 --> 00:19:24,640
any kind of notoriety was being like

00:19:23,200 --> 00:19:25,760
incredulous about the premise of the

00:19:24,640 --> 00:19:28,480
entire thing

00:19:25,760 --> 00:19:30,000
um but but we ended up putting the whole

00:19:28,480 --> 00:19:32,240
company through training so we had about

00:19:30,000 --> 00:19:32,799
24 25 employees at the time and we put

00:19:32,240 --> 00:19:34,400
everybody

00:19:32,799 --> 00:19:36,160
front desk people product people

00:19:34,400 --> 00:19:37,760
business development people through iso

00:19:36,160 --> 00:19:39,679
26262 training

00:19:37,760 --> 00:19:41,919
and being like a company full of like

00:19:39,679 --> 00:19:45,200
largely curmudgeonly people like myself

00:19:41,919 --> 00:19:46,799
um we were just indicting the thing the

00:19:45,200 --> 00:19:50,080
whole time so you know the the

00:19:46,799 --> 00:19:50,880
uh the fine folks at kba jody kva was so

00:19:50,080 --> 00:19:52,320
gracious

00:19:50,880 --> 00:19:53,919
uh he was the one who conducted our

00:19:52,320 --> 00:19:55,840
training and

00:19:53,919 --> 00:19:57,679
the whole time i'm going like so is

00:19:55,840 --> 00:19:59,200
there any scientific evidence that this

00:19:57,679 --> 00:20:00,000
actually produces a safer system on the

00:19:59,200 --> 00:20:01,840
other side

00:20:00,000 --> 00:20:03,760
and he's like well i mean like i haven't

00:20:01,840 --> 00:20:04,400
read a study about it so i don't know i

00:20:03,760 --> 00:20:06,559
was like oh

00:20:04,400 --> 00:20:07,600
okay we just kept like marching through

00:20:06,559 --> 00:20:09,520
these things

00:20:07,600 --> 00:20:10,799
um but then sort of to jack's point it

00:20:09,520 --> 00:20:11,679
was like at the end of the day we went

00:20:10,799 --> 00:20:14,159
through the training

00:20:11,679 --> 00:20:15,840
we all took the exam like we all passed

00:20:14,159 --> 00:20:17,360
um and then

00:20:15,840 --> 00:20:18,960
then we were still left going like all

00:20:17,360 --> 00:20:21,840
right well we went through the training

00:20:18,960 --> 00:20:23,919
uh we know what the words mean now but i

00:20:21,840 --> 00:20:25,360
still have really no idea how to start

00:20:23,919 --> 00:20:26,799
doing this

00:20:25,360 --> 00:20:28,400
and that was like a very kind of like

00:20:26,799 --> 00:20:30,640
frustrating uh

00:20:28,400 --> 00:20:31,919
bridge to get like we had to i just had

00:20:30,640 --> 00:20:33,520
to go find assessors

00:20:31,919 --> 00:20:35,520
i became friends with people who were

00:20:33,520 --> 00:20:37,600
assessors like two and went like and

00:20:35,520 --> 00:20:38,960
asked questions or asked kva questions

00:20:37,600 --> 00:20:41,120
so when you work with other companies

00:20:38,960 --> 00:20:42,559
like what do they have to do here right

00:20:41,120 --> 00:20:44,480
and we're sort of like groping our way

00:20:42,559 --> 00:20:47,360
through all the things we had to do

00:20:44,480 --> 00:20:49,039
and the most painful part of it is when

00:20:47,360 --> 00:20:51,200
you realize

00:20:49,039 --> 00:20:52,240
despite your best efforts and or you did

00:20:51,200 --> 00:20:53,360
something that you know

00:20:52,240 --> 00:20:55,440
is kind of like better than what the

00:20:53,360 --> 00:20:56,960
standard says and

00:20:55,440 --> 00:20:58,480
nobody's gonna understand it and you

00:20:56,960 --> 00:20:59,679
have to roll back and figure out a way

00:20:58,480 --> 00:21:02,720
to do something else so like

00:20:59,679 --> 00:21:03,919
a specific example of that was

00:21:02,720 --> 00:21:05,440
not everybody was familiar with

00:21:03,919 --> 00:21:06,799
property-based testing that i would talk

00:21:05,440 --> 00:21:09,039
to that i know volvo did a

00:21:06,799 --> 00:21:10,080
did a case study quite some time back

00:21:09,039 --> 00:21:11,360
with cubic

00:21:10,080 --> 00:21:13,520
and i've been a property-based testing

00:21:11,360 --> 00:21:17,280
guy for forever just because of my

00:21:13,520 --> 00:21:18,720
roots in erlang and um and

00:21:17,280 --> 00:21:20,000
nobody knew what to do with this these

00:21:18,720 --> 00:21:21,360
results we would show we go here's the

00:21:20,000 --> 00:21:22,240
test results and there you go i don't

00:21:21,360 --> 00:21:23,679
what is this

00:21:22,240 --> 00:21:25,520
where are the unit tests i go we don't

00:21:23,679 --> 00:21:26,640
have those are that useful here like we

00:21:25,520 --> 00:21:28,960
we have these

00:21:26,640 --> 00:21:30,880
um and so instead of presenting the

00:21:28,960 --> 00:21:32,000
property-based testing results we just

00:21:30,880 --> 00:21:35,039
made it so that we

00:21:32,000 --> 00:21:37,120
we captured the seed like the generator

00:21:35,039 --> 00:21:38,159
basically we gave them like readings of

00:21:37,120 --> 00:21:39,840
thousands of

00:21:38,159 --> 00:21:41,440
unit tests that were just the

00:21:39,840 --> 00:21:41,919
intermediate state of the property based

00:21:41,440 --> 00:21:44,559
tests

00:21:41,919 --> 00:21:45,840
to like satisfy this regime um and

00:21:44,559 --> 00:21:47,200
that's that's something i wanted to just

00:21:45,840 --> 00:21:48,159
like touch on really quick was that one

00:21:47,200 --> 00:21:50,080
of the things that's been

00:21:48,159 --> 00:21:51,840
kind of interesting to interact with in

00:21:50,080 --> 00:21:54,799
this transition between these industries

00:21:51,840 --> 00:21:55,840
or these domains is that like when i

00:21:54,799 --> 00:21:57,919
came from visa

00:21:55,840 --> 00:21:59,440
and i had to do things like figure out

00:21:57,919 --> 00:22:01,600
how we were going to

00:21:59,440 --> 00:22:03,600
um you know provide like both physical

00:22:01,600 --> 00:22:05,039
and virtual security of systems that

00:22:03,600 --> 00:22:06,000
were going to be deployed in remote

00:22:05,039 --> 00:22:07,520
environments that were

00:22:06,000 --> 00:22:09,440
you know relatively low trust compared

00:22:07,520 --> 00:22:12,799
to like the central mainframe stuff

00:22:09,440 --> 00:22:14,080
right um we have a lot of rigor around

00:22:12,799 --> 00:22:16,320
you know the build process

00:22:14,080 --> 00:22:18,880
and how the deployment was going to

00:22:16,320 --> 00:22:21,200
happen chain of custody of things

00:22:18,880 --> 00:22:24,000
and i kind of assumed that because the

00:22:21,200 --> 00:22:26,480
like in say auto because of iso 26262

00:22:24,000 --> 00:22:28,240
that it would be somehow better than

00:22:26,480 --> 00:22:30,559
that like that i would like learn

00:22:28,240 --> 00:22:31,679
how to do that stuff even better only to

00:22:30,559 --> 00:22:33,520
discover that

00:22:31,679 --> 00:22:36,559
a lot of the folks in some of these

00:22:33,520 --> 00:22:38,799
industries are way behind the curve

00:22:36,559 --> 00:22:40,000
like they actually don't have modern

00:22:38,799 --> 00:22:42,480
adopted ways of doing

00:22:40,000 --> 00:22:44,080
these things and so and from my opinion

00:22:42,480 --> 00:22:46,000
is that it actually impedes

00:22:44,080 --> 00:22:47,840
uh both like the progress of innovation

00:22:46,000 --> 00:22:49,039
but also the ability to produce like an

00:22:47,840 --> 00:22:51,360
actually safe thing

00:22:49,039 --> 00:22:52,559
right not that like we did like the the

00:22:51,360 --> 00:22:54,400
ceremony of safety

00:22:52,559 --> 00:22:55,840
right yeah so i definitely want to cut

00:22:54,400 --> 00:22:57,120
in there because i think you touched on

00:22:55,840 --> 00:23:00,640
a couple of really great things

00:22:57,120 --> 00:23:02,720
so in particular you mentioned that uh

00:23:00,640 --> 00:23:04,559
these kind of standards evolved when

00:23:02,720 --> 00:23:07,039
when software was still very young

00:23:04,559 --> 00:23:08,799
so when software really was 500 or 1000

00:23:07,039 --> 00:23:11,039
or 5 000 lines of code

00:23:08,799 --> 00:23:12,640
and uh i definitely think the the safety

00:23:11,039 --> 00:23:17,280
standard so the iso 262

00:23:12,640 --> 00:23:18,000
the uh do 178 c's the 61 508s and things

00:23:17,280 --> 00:23:20,000
like that

00:23:18,000 --> 00:23:22,799
they definitely take a a very

00:23:20,000 --> 00:23:24,799
statistical risk risk-based analysis

00:23:22,799 --> 00:23:26,480
on what it means to develop a safe

00:23:24,799 --> 00:23:28,640
system mostly through

00:23:26,480 --> 00:23:30,080
kind of asking you to to think through

00:23:28,640 --> 00:23:32,159
certain problems and provide

00:23:30,080 --> 00:23:33,600
evidence of those kind of problems um

00:23:32,159 --> 00:23:34,960
but it's been really industry

00:23:33,600 --> 00:23:37,120
interesting over the last couple years

00:23:34,960 --> 00:23:38,159
because the the complexity of software

00:23:37,120 --> 00:23:41,440
over the last

00:23:38,159 --> 00:23:44,000
five ten fifteen years has really really

00:23:41,440 --> 00:23:45,679
gone up exponentially um from even the

00:23:44,000 --> 00:23:47,120
last five or ten years

00:23:45,679 --> 00:23:48,960
designing a piece of software that was

00:23:47,120 --> 00:23:50,880
really just you know it's measuring an

00:23:48,960 --> 00:23:52,400
adc and then it reacts based on that and

00:23:50,880 --> 00:23:54,559
now we have systems that are

00:23:52,400 --> 00:23:56,080
providing telemetry live to the internet

00:23:54,559 --> 00:23:58,240
continuously and you have

00:23:56,080 --> 00:24:00,000
dash cluster systems that are connecting

00:23:58,240 --> 00:24:01,840
to um

00:24:00,000 --> 00:24:03,520
all kinds of components in your system

00:24:01,840 --> 00:24:04,159
either for software update reasons or

00:24:03,520 --> 00:24:06,240
telemetry

00:24:04,159 --> 00:24:08,000
reasons or or things like that so it is

00:24:06,240 --> 00:24:08,799
definitely something that this industry

00:24:08,000 --> 00:24:12,240
has

00:24:08,799 --> 00:24:13,840
gone through uh a lot of need to change

00:24:12,240 --> 00:24:14,559
for the last five or ten or fifteen

00:24:13,840 --> 00:24:17,440
years

00:24:14,559 --> 00:24:18,000
and hasn't done a lot of change in the

00:24:17,440 --> 00:24:20,960
last five

00:24:18,000 --> 00:24:22,559
or 10 or 15 years so i mean based in our

00:24:20,960 --> 00:24:23,840
investigation from ferris systems when

00:24:22,559 --> 00:24:25,200
we were looking

00:24:23,840 --> 00:24:27,120
for what was the last programming

00:24:25,200 --> 00:24:28,320
language they got qualified for safety

00:24:27,120 --> 00:24:30,159
critical usage

00:24:28,320 --> 00:24:32,000
and we haven't found a new one that's

00:24:30,159 --> 00:24:33,440
been qualified in about 20 years

00:24:32,000 --> 00:24:36,400
so there's been iterative updates to

00:24:33,440 --> 00:24:38,000
language like c c plus plus and ada

00:24:36,400 --> 00:24:39,440
and there's been some model generation

00:24:38,000 --> 00:24:40,159
tools and things like that that either

00:24:39,440 --> 00:24:42,000
generate c

00:24:40,159 --> 00:24:44,000
code or ada code or other things like

00:24:42,000 --> 00:24:44,880
that but it's an industry that is very

00:24:44,000 --> 00:24:47,200
much

00:24:44,880 --> 00:24:48,799
resistant to change for some good

00:24:47,200 --> 00:24:49,520
reasons and some bad reasons so the good

00:24:48,799 --> 00:24:50,960
reasons are

00:24:49,520 --> 00:24:52,640
you know the properties of the system

00:24:50,960 --> 00:24:53,440
that you work with which means you can

00:24:52,640 --> 00:24:55,840
make

00:24:53,440 --> 00:24:57,039
really good uh guesses about those

00:24:55,840 --> 00:24:58,400
because you know how they work and you

00:24:57,039 --> 00:25:00,240
can predict how they work and

00:24:58,400 --> 00:25:01,919
safety critical a lot of the time is not

00:25:00,240 --> 00:25:03,679
about performance or anything like that

00:25:01,919 --> 00:25:04,400
but it's about designing predictable

00:25:03,679 --> 00:25:06,080
systems

00:25:04,400 --> 00:25:08,000
so they work in the way that you design

00:25:06,080 --> 00:25:09,520
them but we're starting really to get a

00:25:08,000 --> 00:25:11,279
kind of into an elbow curve of

00:25:09,520 --> 00:25:13,360
complexity of software where

00:25:11,279 --> 00:25:14,559
we're really seeing all industries so i

00:25:13,360 --> 00:25:17,679
mentioned that 70

00:25:14,559 --> 00:25:19,360
of of memory safety issues seen by

00:25:17,679 --> 00:25:19,760
microsoft and google and things like

00:25:19,360 --> 00:25:21,440
that

00:25:19,760 --> 00:25:23,360
i've really started seeing those kind of

00:25:21,440 --> 00:25:24,320
things in the safety critical industries

00:25:23,360 --> 00:25:25,840
as well

00:25:24,320 --> 00:25:27,520
and those are something that we hope

00:25:25,840 --> 00:25:28,960
that russ can help with but

00:25:27,520 --> 00:25:30,720
uh we've seen a lot of resistance

00:25:28,960 --> 00:25:31,679
despite there still being these problems

00:25:30,720 --> 00:25:33,600
have you

00:25:31,679 --> 00:25:35,919
jack or nathan or or nico have you

00:25:33,600 --> 00:25:37,679
really seen those problems not just in

00:25:35,919 --> 00:25:39,760
a web browser or an operating system

00:25:37,679 --> 00:25:41,520
have you been seeing these same kind of

00:25:39,760 --> 00:25:43,120
issues in safety critical systems as

00:25:41,520 --> 00:25:46,080
well

00:25:43,120 --> 00:25:46,720
yeah you know i think a lot of its cost

00:25:46,080 --> 00:25:50,080
code

00:25:46,720 --> 00:25:51,760
lives so much longer than you would ever

00:25:50,080 --> 00:25:55,679
expect

00:25:51,760 --> 00:25:59,200
so a lot of the uh um

00:25:55,679 --> 00:26:02,720
inertia is technical debt

00:25:59,200 --> 00:26:04,559
old code old standards

00:26:02,720 --> 00:26:06,799
people think it costs too much to

00:26:04,559 --> 00:26:09,200
recertify

00:26:06,799 --> 00:26:10,000
so you know i think that's one of the

00:26:09,200 --> 00:26:12,400
boat anchors

00:26:10,000 --> 00:26:14,400
here and that and so when i look at rust

00:26:12,400 --> 00:26:16,080
and the emphasis on a strong foreign

00:26:14,400 --> 00:26:19,120
function interface

00:26:16,080 --> 00:26:22,840
that you know gives me hope

00:26:19,120 --> 00:26:26,640
that we can bring rust in and

00:26:22,840 --> 00:26:30,559
eventually um that old code will

00:26:26,640 --> 00:26:32,559
age out and die

00:26:30,559 --> 00:26:34,799
and we've got a really good system that

00:26:32,559 --> 00:26:37,120
realizes the benefits that we all see

00:26:34,799 --> 00:26:38,720
from rust yeah so this is probably a

00:26:37,120 --> 00:26:40,960
good time to to

00:26:38,720 --> 00:26:42,320
uh to zoom out so we're definitely all

00:26:40,960 --> 00:26:43,919
here as as people who are

00:26:42,320 --> 00:26:45,919
at least fairly interested in rust and

00:26:43,919 --> 00:26:47,440
fairly interested in seeing rust in the

00:26:45,919 --> 00:26:49,039
safety critical space so

00:26:47,440 --> 00:26:50,880
this is probably a good time to expand

00:26:49,039 --> 00:26:52,960
about what what kind of ambitions do we

00:26:50,880 --> 00:26:53,440
have for rust in safety critical systems

00:26:52,960 --> 00:26:54,640
so

00:26:53,440 --> 00:26:56,559
nico you mentioned you've been doing a

00:26:54,640 --> 00:26:57,840
lot of investigation of russ lately

00:26:56,559 --> 00:26:59,679
do you want to share a little bit about

00:26:57,840 --> 00:27:00,720
what your what your ambitions are for

00:26:59,679 --> 00:27:03,679
seeing rust in

00:27:00,720 --> 00:27:04,880
in a safety critical industry so at the

00:27:03,679 --> 00:27:07,279
moment

00:27:04,880 --> 00:27:09,279
we do believe that in the presentation

00:27:07,279 --> 00:27:11,360
you gave earlier this morning james is

00:27:09,279 --> 00:27:12,480
it's quite accurate if not optimistic

00:27:11,360 --> 00:27:15,760
about having

00:27:12,480 --> 00:27:19,120
a safety certified system in 2023

00:27:15,760 --> 00:27:21,520
and i'm saying that with all honesty

00:27:19,120 --> 00:27:22,240
today every kind of embedded system you

00:27:21,520 --> 00:27:25,120
want to have

00:27:22,240 --> 00:27:26,720
uh will include necessarily the hebrews

00:27:25,120 --> 00:27:28,799
crate for example right

00:27:26,720 --> 00:27:29,760
and if you want to have a safety a

00:27:28,799 --> 00:27:32,480
safety

00:27:29,760 --> 00:27:35,120
qualified system you need to qualify the

00:27:32,480 --> 00:27:37,279
the hitler's great

00:27:35,120 --> 00:27:39,360
regardless if you limited to the using

00:27:37,279 --> 00:27:42,480
an ffi to the integra platform or not

00:27:39,360 --> 00:27:42,720
um and that goes for other other crates

00:27:42,480 --> 00:27:46,960
that

00:27:42,720 --> 00:27:50,080
are also equally equally oftenly used

00:27:46,960 --> 00:27:52,000
on your system so

00:27:50,080 --> 00:27:55,919
at the moment we are not expect we we

00:27:52,000 --> 00:27:55,919
have a project running with rust

00:27:56,720 --> 00:28:02,080
but it's not safely relevant because

00:27:59,840 --> 00:28:03,919
we cannot we cannot have a safety

00:28:02,080 --> 00:28:05,120
relevant system today that's that's our

00:28:03,919 --> 00:28:08,720
assessment then i think

00:28:05,120 --> 00:28:10,640
you everybody would agree with us um

00:28:08,720 --> 00:28:12,799
yeah the future is not that little i

00:28:10,640 --> 00:28:12,799
mean

00:28:13,039 --> 00:28:18,320
but the cost to enter that system given

00:28:16,399 --> 00:28:19,919
given that today you have a model based

00:28:18,320 --> 00:28:21,760
design system um

00:28:19,919 --> 00:28:23,360
where you have your integra for example

00:28:21,760 --> 00:28:26,159
in in zach's example

00:28:23,360 --> 00:28:27,039
and on top of that integra you have your

00:28:26,159 --> 00:28:29,600
math works

00:28:27,039 --> 00:28:31,919
environment which will generate sql that

00:28:29,600 --> 00:28:34,159
will be automatically compiled

00:28:31,919 --> 00:28:36,000
we think that the the cost of transition

00:28:34,159 --> 00:28:39,279
is very high

00:28:36,000 --> 00:28:39,760
in order to um and the benefit it gives

00:28:39,279 --> 00:28:42,000
you is

00:28:39,760 --> 00:28:43,919
is small because your model based

00:28:42,000 --> 00:28:45,679
environment design environment gives you

00:28:43,919 --> 00:28:48,559
similar guarantees to rust

00:28:45,679 --> 00:28:50,480
so in my in my humble opinion and that's

00:28:48,559 --> 00:28:53,200
absolutely not volvo's

00:28:50,480 --> 00:28:54,159
understanding the greatest point of rust

00:28:53,200 --> 00:28:56,320
is ergonomics

00:28:54,159 --> 00:28:58,399
it's fast iteration it's it's the things

00:28:56,320 --> 00:28:58,799
that come from the tool chain and if we

00:28:58,399 --> 00:29:01,840
tie

00:28:58,799 --> 00:29:04,399
if we try to follow this example um

00:29:01,840 --> 00:29:06,320
with a stat eclipse it will be like

00:29:04,399 --> 00:29:09,679
running with weights on our on our feet

00:29:06,320 --> 00:29:11,919
um yeah

00:29:09,679 --> 00:29:14,159
yeah it's it's it's a it's a real thing

00:29:11,919 --> 00:29:17,360
i mean if if we could uh

00:29:14,159 --> 00:29:19,200
yeah also also such approach will lead

00:29:17,360 --> 00:29:22,399
to an equally

00:29:19,200 --> 00:29:24,399
to a vendor look look looking i mean

00:29:22,399 --> 00:29:26,559
say that i want to have implement some

00:29:24,399 --> 00:29:27,039
some safety function using some security

00:29:26,559 --> 00:29:30,559
right

00:29:27,039 --> 00:29:34,000
i need i want to use um uh

00:29:30,559 --> 00:29:35,200
the the rust crypto right but i won't be

00:29:34,000 --> 00:29:37,200
able to do because

00:29:35,200 --> 00:29:38,240
the integra will take precedence will

00:29:37,200 --> 00:29:40,799
control all my

00:29:38,240 --> 00:29:41,279
cryptographic credentials so i need to

00:29:40,799 --> 00:29:44,720
access

00:29:41,279 --> 00:29:48,640
all those crypto hardware via the my

00:29:44,720 --> 00:29:50,720
via nffi which is not portable also so

00:29:48,640 --> 00:29:52,840
but that's that's my mind view i mean

00:29:50,720 --> 00:29:57,679
yeah but

00:29:52,840 --> 00:30:00,960
yeah yeah i mean like i

00:29:57,679 --> 00:30:01,520
so that that's what i want to start with

00:30:00,960 --> 00:30:03,600
this

00:30:01,520 --> 00:30:04,880
so something james that you said about

00:30:03,600 --> 00:30:06,559
you know what the goal is to try to

00:30:04,880 --> 00:30:08,320
build predictable systems i think that

00:30:06,559 --> 00:30:09,679
that's actually it right so every single

00:30:08,320 --> 00:30:11,200
safety critical

00:30:09,679 --> 00:30:12,640
uh or safety element out of context

00:30:11,200 --> 00:30:14,399
comes with a developer interface

00:30:12,640 --> 00:30:15,919
agreement which is like we did all the

00:30:14,399 --> 00:30:17,520
things that we think we did to make this

00:30:15,919 --> 00:30:19,039
thing safe and behave a certain way

00:30:17,520 --> 00:30:20,399
you're gonna now take this and integrate

00:30:19,039 --> 00:30:21,840
it and you better follow all the rules

00:30:20,399 --> 00:30:23,919
that we say in this developer interface

00:30:21,840 --> 00:30:25,360
agreement otherwise no assurances

00:30:23,919 --> 00:30:27,120
right on like how what this what's going

00:30:25,360 --> 00:30:29,279
to happen here right and so

00:30:27,120 --> 00:30:31,600
and this when i when i encountered that

00:30:29,279 --> 00:30:33,279
what it reminded me of or the challenge

00:30:31,600 --> 00:30:35,120
of doing that reminding me of a problem

00:30:33,279 --> 00:30:36,399
that has been forever the case in sort

00:30:35,120 --> 00:30:39,679
of formal verification

00:30:36,399 --> 00:30:42,080
and formal methods like ecosystem is the

00:30:39,679 --> 00:30:43,600
chaining together of assurances right

00:30:42,080 --> 00:30:44,159
that i can actually like say something

00:30:43,600 --> 00:30:45,919
meaningful

00:30:44,159 --> 00:30:47,600
going from say like model checking to my

00:30:45,919 --> 00:30:49,120
implementation like if you were

00:30:47,600 --> 00:30:51,279
it just happened it strangely one of my

00:30:49,120 --> 00:30:53,120
engineers was giving a talk about tla

00:30:51,279 --> 00:30:54,880
plus or at uh not a strange loop but uh

00:30:53,120 --> 00:30:58,159
or maybe it was strangely for the i

00:30:54,880 --> 00:30:59,279
i see i forget um but you know

00:30:58,159 --> 00:31:00,799
he was talking about this thing that we

00:30:59,279 --> 00:31:02,320
did with tla plus and then somebody

00:31:00,799 --> 00:31:03,919
asked the question like you know well

00:31:02,320 --> 00:31:05,440
you know how do i connect this to my

00:31:03,919 --> 00:31:07,440
implementation and then like there was

00:31:05,440 --> 00:31:09,279
just like general scoffing from the

00:31:07,440 --> 00:31:10,799
normal like tla plus like you know

00:31:09,279 --> 00:31:12,480
ecosystem like that's silly it's a

00:31:10,799 --> 00:31:14,399
design tool not for programming

00:31:12,480 --> 00:31:16,080
and you know which is true technically

00:31:14,399 --> 00:31:17,279
speaking but if you really want to try

00:31:16,080 --> 00:31:19,279
to

00:31:17,279 --> 00:31:20,880
build predictability going all the way

00:31:19,279 --> 00:31:22,880
from the requirements down to the

00:31:20,880 --> 00:31:24,559
implementation of the binary level maybe

00:31:22,880 --> 00:31:26,559
crossing the boundary into the hardware

00:31:24,559 --> 00:31:28,640
level um

00:31:26,559 --> 00:31:29,919
there's it's very hard to like compose

00:31:28,640 --> 00:31:31,120
these assurances and make sure they

00:31:29,919 --> 00:31:33,360
actually like link together and

00:31:31,120 --> 00:31:34,640
they're meaningfully a refinement of one

00:31:33,360 --> 00:31:35,440
another right like all the way down the

00:31:34,640 --> 00:31:38,000
chain

00:31:35,440 --> 00:31:38,480
um and that's one of the things that

00:31:38,000 --> 00:31:39,919
like that

00:31:38,480 --> 00:31:41,919
where we started to leverage russ

00:31:39,919 --> 00:31:42,399
originally so before uh before we raise

00:31:41,919 --> 00:31:43,840
money and

00:31:42,399 --> 00:31:44,960
we're a product company and we were

00:31:43,840 --> 00:31:47,120
trying to figure out what we were gonna

00:31:44,960 --> 00:31:48,880
do um

00:31:47,120 --> 00:31:50,799
we were working on a project for an

00:31:48,880 --> 00:31:51,519
autonomous vehicle platform that needed

00:31:50,799 --> 00:31:55,679
some

00:31:51,519 --> 00:31:59,039
communications related stuff and our

00:31:55,679 --> 00:32:01,760
job was basically to help them

00:31:59,039 --> 00:32:04,799
understand like how this system

00:32:01,760 --> 00:32:06,399
was going to tip over um you know like

00:32:04,799 --> 00:32:07,919
they were given some silicon from a

00:32:06,399 --> 00:32:09,600
vendor and they were trying to get some

00:32:07,919 --> 00:32:10,960
sort of like safety and redundancy

00:32:09,600 --> 00:32:12,720
guarantees in place

00:32:10,960 --> 00:32:14,880
um it was a lot of the system

00:32:12,720 --> 00:32:16,159
architecture was built on the premise of

00:32:14,880 --> 00:32:17,919
time-sensitive networking

00:32:16,159 --> 00:32:19,519
stuff which is a draft protocol and it's

00:32:17,919 --> 00:32:22,640
implemented weird and has all kinds of

00:32:19,519 --> 00:32:23,120
edge cases and so you know while there

00:32:22,640 --> 00:32:26,159
was

00:32:23,120 --> 00:32:27,840
a lot of like predictability

00:32:26,159 --> 00:32:29,919
in like a single component that we would

00:32:27,840 --> 00:32:30,960
interact with it was the composition of

00:32:29,919 --> 00:32:32,559
a bunch of components

00:32:30,960 --> 00:32:34,000
that suddenly now interact with each

00:32:32,559 --> 00:32:35,279
other and you get what and sometimes

00:32:34,000 --> 00:32:37,120
in resilience engineering world is

00:32:35,279 --> 00:32:37,519
called resonant failures where every

00:32:37,120 --> 00:32:40,159
single

00:32:37,519 --> 00:32:40,720
modular thing is fine you can you can

00:32:40,159 --> 00:32:42,559
build it

00:32:40,720 --> 00:32:44,480
get that developer interface agreement

00:32:42,559 --> 00:32:45,840
right and then stick it with a bunch of

00:32:44,480 --> 00:32:47,440
other stuff and everybody followed the

00:32:45,840 --> 00:32:48,240
rules and it still doesn't work

00:32:47,440 --> 00:32:50,799
right and there's some kind of

00:32:48,240 --> 00:32:52,720
catastrophic failure what a surprise

00:32:50,799 --> 00:32:54,480
yeah and so one of the things that like

00:32:52,720 --> 00:32:55,679
that i think russ is a building block

00:32:54,480 --> 00:32:58,960
for or was

00:32:55,679 --> 00:33:01,200
for us at least was

00:32:58,960 --> 00:33:02,559
we started to do things like and there's

00:33:01,200 --> 00:33:03,600
a we have like a little open source

00:33:02,559 --> 00:33:05,200
thing that you can go look at which is

00:33:03,600 --> 00:33:05,840
like a little assured like bit field

00:33:05,200 --> 00:33:08,720
register

00:33:05,840 --> 00:33:10,720
like library for embedded development um

00:33:08,720 --> 00:33:11,679
but the idea was well let's lean into

00:33:10,720 --> 00:33:13,919
the facilities that

00:33:11,679 --> 00:33:15,600
russ provides us let's not start at sea

00:33:13,919 --> 00:33:17,760
let's start at rust and

00:33:15,600 --> 00:33:19,600
leverage some of the uh you know what

00:33:17,760 --> 00:33:20,559
would in many ecosystems be idiosync

00:33:19,600 --> 00:33:22,799
idiosyncrasies

00:33:20,559 --> 00:33:24,000
of the way the type system works and the

00:33:22,799 --> 00:33:27,039
substructural types through

00:33:24,000 --> 00:33:28,320
the through the bar checker and make it

00:33:27,039 --> 00:33:30,799
so that it's basically

00:33:28,320 --> 00:33:32,640
either impossible for this thing to fail

00:33:30,799 --> 00:33:35,039
you know in these like sets of ways

00:33:32,640 --> 00:33:36,080
uh at compile we'll notice that compile

00:33:35,039 --> 00:33:37,600
time or

00:33:36,080 --> 00:33:39,440
in sort of going back into the sort of

00:33:37,600 --> 00:33:40,880
predictability land that it will fail at

00:33:39,440 --> 00:33:42,320
exactly this place

00:33:40,880 --> 00:33:44,080
this is the only way that this can go

00:33:42,320 --> 00:33:45,840
wrong and i know exactly in the chain

00:33:44,080 --> 00:33:47,120
of composition where some where i'm

00:33:45,840 --> 00:33:49,840
going to notice this issue

00:33:47,120 --> 00:33:51,600
right and that's i think a really sort

00:33:49,840 --> 00:33:53,039
of useful building block because it

00:33:51,600 --> 00:33:55,120
starts to

00:33:53,039 --> 00:33:56,320
give us ways to connect the dots between

00:33:55,120 --> 00:33:58,000
like all these different things that we

00:33:56,320 --> 00:34:00,799
have to do to make a safe system

00:33:58,000 --> 00:34:01,919
um and build on the abstractions in a

00:34:00,799 --> 00:34:02,720
way instead of just going like well i

00:34:01,919 --> 00:34:04,960
wrote it on c

00:34:02,720 --> 00:34:06,159
is that connected to my design who knows

00:34:04,960 --> 00:34:07,519
right like i did i did

00:34:06,159 --> 00:34:09,359
i wrote down a model is that connected

00:34:07,519 --> 00:34:11,599
by implementation maybe right

00:34:09,359 --> 00:34:13,359
um and rust gives provides like a nice

00:34:11,599 --> 00:34:16,480
uh set of um

00:34:13,359 --> 00:34:18,000
facilities like through mir and uh sort

00:34:16,480 --> 00:34:19,679
of the way that its type system works

00:34:18,000 --> 00:34:22,240
um to sort of like link these worlds

00:34:19,679 --> 00:34:24,960
together uh and i'm hoping that

00:34:22,240 --> 00:34:26,240
my what i think like can be enabled out

00:34:24,960 --> 00:34:27,520
of that is that we can accelerate

00:34:26,240 --> 00:34:29,119
certain types of development so that

00:34:27,520 --> 00:34:30,159
we're not

00:34:29,119 --> 00:34:32,159
you know like there are there are

00:34:30,159 --> 00:34:34,159
probably 20 there's probably a graveyard

00:34:32,159 --> 00:34:35,919
full of products that like in companies

00:34:34,159 --> 00:34:38,399
that have existed to try to

00:34:35,919 --> 00:34:39,760
uh analyze c and make it be you know

00:34:38,399 --> 00:34:41,200
like as assured as anything that you

00:34:39,760 --> 00:34:43,200
could possibly be so you only write the

00:34:41,200 --> 00:34:45,440
thing one time you know all these things

00:34:43,200 --> 00:34:46,560
um and they they everybody ends up

00:34:45,440 --> 00:34:47,760
solving the first 40

00:34:46,560 --> 00:34:50,000
of the problem over and over and over

00:34:47,760 --> 00:34:50,960
again right um because each one is kind

00:34:50,000 --> 00:34:52,879
of a niche thing

00:34:50,960 --> 00:34:54,079
and it it it doesn't get like what broad

00:34:52,879 --> 00:34:56,720
scale adoption

00:34:54,079 --> 00:34:58,400
um rust incorporates a lot of those

00:34:56,720 --> 00:35:00,240
interesting facilities in a way they're

00:34:58,400 --> 00:35:01,520
not quite all the way there but are

00:35:00,240 --> 00:35:03,040
you can say you can kind of see the

00:35:01,520 --> 00:35:04,560
light at the end of the tunnel in terms

00:35:03,040 --> 00:35:05,599
of language features and tooling and

00:35:04,560 --> 00:35:07,680
kind of where the

00:35:05,599 --> 00:35:09,200
the community is taking the language um

00:35:07,680 --> 00:35:10,720
that i think can make it so that

00:35:09,200 --> 00:35:12,000
there's like a new step function where

00:35:10,720 --> 00:35:13,359
you're like well we're not gonna we

00:35:12,000 --> 00:35:15,040
don't have to worry about making weird

00:35:13,359 --> 00:35:16,880
annotations for linear types to do

00:35:15,040 --> 00:35:18,160
things in c because we can just model

00:35:16,880 --> 00:35:18,880
them directly and rust in the type

00:35:18,160 --> 00:35:21,040
system

00:35:18,880 --> 00:35:22,720
uh you know things like this yeah you

00:35:21,040 --> 00:35:26,640
know nico talked about

00:35:22,720 --> 00:35:28,240
ergonomics and uh

00:35:26,640 --> 00:35:30,079
you know we're feeling like we've got

00:35:28,240 --> 00:35:32,079
weight on our feet

00:35:30,079 --> 00:35:33,440
and nathan talk is talking about

00:35:32,079 --> 00:35:36,960
accelerating the

00:35:33,440 --> 00:35:38,079
the pace of development and uh

00:35:36,960 --> 00:35:40,160
you know being able to think

00:35:38,079 --> 00:35:41,839
compositionally instead of down in the

00:35:40,160 --> 00:35:44,640
details

00:35:41,839 --> 00:35:47,760
and you know i think that that's our

00:35:44,640 --> 00:35:50,720
aspiration as well and my aspiration

00:35:47,760 --> 00:35:52,240
um you know the first things in my head

00:35:50,720 --> 00:35:55,280
when you pose that question

00:35:52,240 --> 00:35:57,520
james were actually things i never want

00:35:55,280 --> 00:36:01,119
to do again

00:35:57,520 --> 00:36:03,920
um i never want my team

00:36:01,119 --> 00:36:06,079
to ship code with a memory leak ever

00:36:03,920 --> 00:36:10,640
again

00:36:06,079 --> 00:36:14,160
um i don't want to have to

00:36:10,640 --> 00:36:15,680
worry about uh

00:36:14,160 --> 00:36:18,480
well i'll just say i don't ever want to

00:36:15,680 --> 00:36:23,040
program and see plus plus again

00:36:18,480 --> 00:36:25,760
you know the abstractions there oh snap

00:36:23,040 --> 00:36:27,520
well i'm a guy who started pro list was

00:36:25,760 --> 00:36:30,560
the first language that i wrote a

00:36:27,520 --> 00:36:32,240
program more than 100 lines in

00:36:30,560 --> 00:36:34,320
i've actually been paid to write

00:36:32,240 --> 00:36:37,680
prologue professionally

00:36:34,320 --> 00:36:40,720
oh you're lucky so you know i cut my

00:36:37,680 --> 00:36:42,160
teeth on ill-structured loosely typed

00:36:40,720 --> 00:36:45,440
languages

00:36:42,160 --> 00:36:48,079
they really aren't fun and then c

00:36:45,440 --> 00:36:48,800
plus plus with abstractions that they

00:36:48,079 --> 00:36:51,200
overload

00:36:48,800 --> 00:36:54,400
things there i like rust it's clean it

00:36:51,200 --> 00:36:57,200
doesn't overload concepts like pointers

00:36:54,400 --> 00:36:59,200
and this is what makes you gives you the

00:36:57,200 --> 00:37:01,680
ability to think at those high levels

00:36:59,200 --> 00:37:04,480
because it breaks us from the old

00:37:01,680 --> 00:37:06,320
abstractions tied to memory that are

00:37:04,480 --> 00:37:08,400
really assembly language and

00:37:06,320 --> 00:37:09,839
original old computer architecture

00:37:08,400 --> 00:37:12,079
concepts

00:37:09,839 --> 00:37:15,200
russ lets us think about them in

00:37:12,079 --> 00:37:17,599
powerful ways where we don't worry about

00:37:15,200 --> 00:37:19,920
aliasing and multiple access because you

00:37:17,599 --> 00:37:21,839
just don't do that and once you stop

00:37:19,920 --> 00:37:24,800
doing that then you can really think

00:37:21,839 --> 00:37:26,079
about the problem you're trying to solve

00:37:24,800 --> 00:37:27,280
so i definitely want to zoom out a

00:37:26,079 --> 00:37:29,200
little bit i think i think we're

00:37:27,280 --> 00:37:30,000
probably all on the same page in terms

00:37:29,200 --> 00:37:32,400
of

00:37:30,000 --> 00:37:34,560
we think that the ideal outcome in 20

00:37:32,400 --> 00:37:37,760
years is that at some point

00:37:34,560 --> 00:37:38,079
legacy systems do get replaced by rust

00:37:37,760 --> 00:37:40,720
that

00:37:38,079 --> 00:37:42,400
in some way in 20 years that hopefully

00:37:40,720 --> 00:37:43,680
all safety critical systems could be

00:37:42,400 --> 00:37:44,400
written in rust because we think that

00:37:43,680 --> 00:37:46,720
generally

00:37:44,400 --> 00:37:48,560
rust as a language provides better

00:37:46,720 --> 00:37:50,079
developer ergonomics or it provides

00:37:48,560 --> 00:37:51,839
better safety guarantees

00:37:50,079 --> 00:37:53,520
or as nathan was mentioning gives you

00:37:51,839 --> 00:37:54,960
more powerful tools to encode your

00:37:53,520 --> 00:37:57,040
invariants the ways

00:37:54,960 --> 00:37:59,520
that you can let the compiler enforce

00:37:57,040 --> 00:38:00,880
the things that you want it to enforce

00:37:59,520 --> 00:38:02,320
and it's really interesting to hear this

00:38:00,880 --> 00:38:03,440
conversation of how we think we're going

00:38:02,320 --> 00:38:04,079
to get there because that's really the

00:38:03,440 --> 00:38:05,520
conversation

00:38:04,079 --> 00:38:07,680
that we're having right now is what are

00:38:05,520 --> 00:38:11,200
the next 5

00:38:07,680 --> 00:38:12,640
10 15 years look like when it comes to

00:38:11,200 --> 00:38:14,000
that transition time

00:38:12,640 --> 00:38:15,520
and it's been really interesting to see

00:38:14,000 --> 00:38:16,800
this pattern repeat through a couple

00:38:15,520 --> 00:38:18,640
different industries so

00:38:16,800 --> 00:38:20,000
definitely when you talk to someone like

00:38:18,640 --> 00:38:23,440
the servo team

00:38:20,000 --> 00:38:26,480
at firefox they had a huge system

00:38:23,440 --> 00:38:28,560
where the reason that they developed uh

00:38:26,480 --> 00:38:31,040
servo was as a test project so server

00:38:28,560 --> 00:38:33,440
was an intel alternative browser for

00:38:31,040 --> 00:38:34,240
or is it alternative browser for uh

00:38:33,440 --> 00:38:36,720
firefox

00:38:34,240 --> 00:38:39,119
but when it came to integrating rust

00:38:36,720 --> 00:38:41,119
into firefox they didn't say

00:38:39,119 --> 00:38:43,440
we'll just re-integrate or we'll just

00:38:41,119 --> 00:38:44,640
start by rewriting firefox from scratch

00:38:43,440 --> 00:38:47,200
because they realize that if they did

00:38:44,640 --> 00:38:48,720
that they'd be at a point where

00:38:47,200 --> 00:38:50,400
by the time they were done mozilla

00:38:48,720 --> 00:38:51,680
wouldn't exist as a company anymore

00:38:50,400 --> 00:38:53,520
because it would take so much effort

00:38:51,680 --> 00:38:55,280
because a browser such a large

00:38:53,520 --> 00:38:57,119
complex system that has so many parts

00:38:55,280 --> 00:38:58,400
from a layout engine to a javascript

00:38:57,119 --> 00:38:59,040
engine to things like that where they

00:38:58,400 --> 00:39:01,920
realized

00:38:59,040 --> 00:39:03,920
the only pragmatic way for them was to

00:39:01,920 --> 00:39:05,040
start dissecting these things by parts

00:39:03,920 --> 00:39:06,320
and making sure that they had the

00:39:05,040 --> 00:39:08,079
tooling to integrate it

00:39:06,320 --> 00:39:10,240
whereas we've seen other people in the

00:39:08,079 --> 00:39:11,520
in the industry realize that

00:39:10,240 --> 00:39:13,040
they started doing that and they

00:39:11,520 --> 00:39:14,880
realized there was such an impedance

00:39:13,040 --> 00:39:15,920
mismatch between what they wanted to be

00:39:14,880 --> 00:39:17,599
doing in rust

00:39:15,920 --> 00:39:18,960
and what they were already doing in crc

00:39:17,599 --> 00:39:21,119
plus plus that at some point

00:39:18,960 --> 00:39:22,880
it made sense to do some kind of a

00:39:21,119 --> 00:39:23,760
switch over or an incremental switch

00:39:22,880 --> 00:39:25,119
over so i think

00:39:23,760 --> 00:39:26,480
this is going to be one of those things

00:39:25,119 --> 00:39:28,640
that it really is going to depend

00:39:26,480 --> 00:39:29,920
industry by industry and safety critical

00:39:28,640 --> 00:39:31,599
is interesting because

00:39:29,920 --> 00:39:33,359
as we mentioned before you can't just

00:39:31,599 --> 00:39:35,119
bring a compiler you have to bring an

00:39:33,359 --> 00:39:38,079
ecosystem whether that's the

00:39:35,119 --> 00:39:39,599
um the standard or core libraries of the

00:39:38,079 --> 00:39:41,680
language or whether it's

00:39:39,599 --> 00:39:43,119
infrastructural crates like the cortex-m

00:39:41,680 --> 00:39:47,200
crate or heapless or

00:39:43,119 --> 00:39:48,480
or even arctic um where it really

00:39:47,200 --> 00:39:49,839
it really is interesting because you've

00:39:48,480 --> 00:39:51,599
got to bring that ecosystem so there's

00:39:49,839 --> 00:39:53,599
really two approaches to that there's

00:39:51,599 --> 00:39:55,520
bringing the entire ecosystem with you

00:39:53,599 --> 00:39:57,119
and switching over to a new ecosystem

00:39:55,520 --> 00:40:00,079
or it's trying to reassemble that

00:39:57,119 --> 00:40:03,200
ecosystem by parts

00:40:00,079 --> 00:40:04,800
so there's a i had this like shower

00:40:03,200 --> 00:40:06,560
thought about this like when

00:40:04,800 --> 00:40:07,839
after one of our our sort of meet and

00:40:06,560 --> 00:40:09,440
greets and

00:40:07,839 --> 00:40:11,440
i was thinking about like i said

00:40:09,440 --> 00:40:12,800
something uh on a call that was like you

00:40:11,440 --> 00:40:13,920
know it's russ isn't a weird place

00:40:12,800 --> 00:40:14,720
because nearly everything else has been

00:40:13,920 --> 00:40:17,119
grandfathered in

00:40:14,720 --> 00:40:18,240
right so it's not entirely clear how

00:40:17,119 --> 00:40:20,160
this even happens

00:40:18,240 --> 00:40:21,520
because everything else but everything

00:40:20,160 --> 00:40:22,160
else existed in the standards would have

00:40:21,520 --> 00:40:25,520
been written

00:40:22,160 --> 00:40:27,599
right um and at least several of them

00:40:25,520 --> 00:40:28,560
and and so i but i had this i was like

00:40:27,599 --> 00:40:29,839
well

00:40:28,560 --> 00:40:31,839
to your point we have to bring this

00:40:29,839 --> 00:40:35,040
ecosystem with us

00:40:31,839 --> 00:40:38,240
uh what it calls out

00:40:35,040 --> 00:40:39,839
in the uh in the standards is

00:40:38,240 --> 00:40:41,760
languages you have like you know there's

00:40:39,839 --> 00:40:43,280
depending on uh

00:40:41,760 --> 00:40:45,119
on the like aerospace standards they

00:40:43,280 --> 00:40:47,040
even call it specific languages and the

00:40:45,119 --> 00:40:48,880
in the automotive standards they're

00:40:47,040 --> 00:40:49,200
suggestions of these languages basically

00:40:48,880 --> 00:40:50,720
but

00:40:49,200 --> 00:40:53,200
you know they're very strong suggestions

00:40:50,720 --> 00:40:54,720
due to inertia um

00:40:53,200 --> 00:40:56,880
there's a distinction between like the

00:40:54,720 --> 00:40:59,119
ecosystem and the language like so

00:40:56,880 --> 00:41:00,000
i wonder if there's a first step which

00:40:59,119 --> 00:41:03,119
is just like

00:41:00,000 --> 00:41:05,280
get the moniker of rust as allowable

00:41:03,119 --> 00:41:07,520
right as like a thing ahead of the

00:41:05,280 --> 00:41:10,319
entire ecosystem existing behind it

00:41:07,520 --> 00:41:11,040
uh in one of those standards documents

00:41:10,319 --> 00:41:13,440
right because

00:41:11,040 --> 00:41:14,960
there's nothing necessarily safe about

00:41:13,440 --> 00:41:16,400
java like it's in there you can do

00:41:14,960 --> 00:41:17,200
certain stuff in java according to the

00:41:16,400 --> 00:41:20,319
standards

00:41:17,200 --> 00:41:21,440
um but it has a whole bevy of like

00:41:20,319 --> 00:41:23,359
issues right

00:41:21,440 --> 00:41:24,640
just like c or c plus plus or any of the

00:41:23,359 --> 00:41:26,560
other things that are in there

00:41:24,640 --> 00:41:28,480
um and so to see if i'm wondering if

00:41:26,560 --> 00:41:30,079
there's a way for that to be decoupled

00:41:28,480 --> 00:41:31,599
somehow because bringing

00:41:30,079 --> 00:41:32,800
you have this like heart horse chicken

00:41:31,599 --> 00:41:34,640
egg problem with like well there needs

00:41:32,800 --> 00:41:36,079
to be an entire ecosystem to support

00:41:34,640 --> 00:41:37,839
you know like the only who's going to do

00:41:36,079 --> 00:41:38,560
that research exercise like the

00:41:37,839 --> 00:41:39,839
government

00:41:38,560 --> 00:41:41,119
you know to bring like i don't think

00:41:39,839 --> 00:41:42,079
they don't think they're that interested

00:41:41,119 --> 00:41:43,760
in like a

00:41:42,079 --> 00:41:44,880
in a you know moon landing project for

00:41:43,760 --> 00:41:45,839
getting rust into safety critical

00:41:44,880 --> 00:41:47,839
systems

00:41:45,839 --> 00:41:49,520
um but it would be something of that

00:41:47,839 --> 00:41:51,599
scale to have to get there to be like a

00:41:49,520 --> 00:41:52,960
green hills already and like an infineon

00:41:51,599 --> 00:41:54,079
already and like all these you know

00:41:52,960 --> 00:41:56,960
companies in place

00:41:54,079 --> 00:41:57,599
to just get rust like on the page right

00:41:56,960 --> 00:42:00,560
um

00:41:57,599 --> 00:42:02,800
anyway so there's so many opportunities

00:42:00,560 --> 00:42:05,760
now to just do rust

00:42:02,800 --> 00:42:06,240
um and and i really urge people to just

00:42:05,760 --> 00:42:09,359
just

00:42:06,240 --> 00:42:11,839
do it because you won't want to go back

00:42:09,359 --> 00:42:13,839
so you know james you you asked what you

00:42:11,839 --> 00:42:16,079
know what are we doing to make

00:42:13,839 --> 00:42:17,119
things better in the in the long run and

00:42:16,079 --> 00:42:19,920
i think

00:42:17,119 --> 00:42:22,160
people just need to code it's it's such

00:42:19,920 --> 00:42:24,480
a different experience once you get over

00:42:22,160 --> 00:42:26,319
fighting with the borrow checker and

00:42:24,480 --> 00:42:27,520
realize that you're dancing with the

00:42:26,319 --> 00:42:31,119
borrow checker

00:42:27,520 --> 00:42:34,400
oh boy and you know look at it that way

00:42:31,119 --> 00:42:36,000
once you get over that hump um it just

00:42:34,400 --> 00:42:38,800
feels good

00:42:36,000 --> 00:42:41,359
and if you're a leader listening to this

00:42:38,800 --> 00:42:43,280
panel conversation

00:42:41,359 --> 00:42:44,720
give some of your team some

00:42:43,280 --> 00:42:46,880
encouragement to go

00:42:44,720 --> 00:42:49,680
do something in rust with some of their

00:42:46,880 --> 00:42:52,800
time they're going to be happy

00:42:49,680 --> 00:42:54,319
they're going to like it and you know

00:42:52,800 --> 00:42:57,200
that's part of the benefit

00:42:54,319 --> 00:42:58,079
is you know it's satisfying to build

00:42:57,200 --> 00:43:00,319
good code

00:42:58,079 --> 00:43:02,000
and it's so much easier to build good

00:43:00,319 --> 00:43:05,040
code and rust

00:43:02,000 --> 00:43:06,720
so that's a you know a second order

00:43:05,040 --> 00:43:10,640
effect of rust that

00:43:06,720 --> 00:43:13,359
i haven't heard people talk about much

00:43:10,640 --> 00:43:14,560
yeah it's the most loved language we get

00:43:13,359 --> 00:43:15,520
this like we talk about this like

00:43:14,560 --> 00:43:16,960
there's a

00:43:15,520 --> 00:43:18,160
all of us or got involved in this

00:43:16,960 --> 00:43:18,800
because we're like there's got to be a

00:43:18,160 --> 00:43:21,440
better way

00:43:18,800 --> 00:43:22,000
this is awful right and that there is a

00:43:21,440 --> 00:43:26,000
better way

00:43:22,000 --> 00:43:27,760
so i think as as like a leader who hires

00:43:26,000 --> 00:43:29,680
those sorts of people i will say that

00:43:27,760 --> 00:43:30,640
he's right you give them an opportunity

00:43:29,680 --> 00:43:31,839
to write rust

00:43:30,640 --> 00:43:33,440
you better make sure that you're ready

00:43:31,839 --> 00:43:34,960
to hear about it though for the rest of

00:43:33,440 --> 00:43:37,119
your life after that

00:43:34,960 --> 00:43:38,560
because this is the better way stop

00:43:37,119 --> 00:43:40,480
doing whatever it is you're doing do it

00:43:38,560 --> 00:43:42,160
this way

00:43:40,480 --> 00:43:44,160
so nathan you mentioned getting the word

00:43:42,160 --> 00:43:45,760
rust into the standards and i think that

00:43:44,160 --> 00:43:47,280
leads into a really good thing about

00:43:45,760 --> 00:43:49,119
expectation management

00:43:47,280 --> 00:43:50,240
is that a lot of these organizations

00:43:49,119 --> 00:43:52,079
whether they're safety critical

00:43:50,240 --> 00:43:54,000
organizations or they're the regulatory

00:43:52,079 --> 00:43:56,960
bodies whether they're the faa or the

00:43:54,000 --> 00:43:58,000
tuv or any of these uh organizations

00:43:56,960 --> 00:44:00,079
that are generally

00:43:58,000 --> 00:44:01,440
in charge of checking your paperwork and

00:44:00,079 --> 00:44:03,040
making sure that you're delivering the

00:44:01,440 --> 00:44:05,200
way that they're supposed to

00:44:03,040 --> 00:44:07,119
um i think that's actually one of those

00:44:05,200 --> 00:44:08,880
really big perception things that rust

00:44:07,119 --> 00:44:11,280
is going to have to overcome is

00:44:08,880 --> 00:44:13,599
how do you avoid the surprise for an

00:44:11,280 --> 00:44:15,200
engineering organization when you're a

00:44:13,599 --> 00:44:17,520
second or third tier supplier and you

00:44:15,200 --> 00:44:19,359
say we've built this software

00:44:17,520 --> 00:44:20,640
package in rust and we expect you to

00:44:19,359 --> 00:44:23,599
include it in your car

00:44:20,640 --> 00:44:24,880
or as an oem or a vehicle integrator or

00:44:23,599 --> 00:44:28,079
something like that where you say

00:44:24,880 --> 00:44:29,680
we developed our braking system in rust

00:44:28,079 --> 00:44:30,640
and you take it to that regulator for

00:44:29,680 --> 00:44:31,680
the first time

00:44:30,640 --> 00:44:33,040
i think that's going to be a really

00:44:31,680 --> 00:44:34,640
interesting experience whether it's

00:44:33,040 --> 00:44:35,359
coming from sealed rust or it's coming

00:44:34,640 --> 00:44:38,240
from another

00:44:35,359 --> 00:44:39,599
organization um but in in particular

00:44:38,240 --> 00:44:40,800
nico i'd be interested in hearing a

00:44:39,599 --> 00:44:42,079
little bit of your thoughts around

00:44:40,800 --> 00:44:44,079
what do you think russ could do or

00:44:42,079 --> 00:44:47,680
sealed russ could do or just this whole

00:44:44,079 --> 00:44:50,960
ecosystem push could do to help avoid

00:44:47,680 --> 00:44:52,560
that surprise and what is this even kind

00:44:50,960 --> 00:44:53,520
of approach from either an engineering

00:44:52,560 --> 00:44:58,560
organization

00:44:53,520 --> 00:45:00,400
or a regulatory organization right um

00:44:58,560 --> 00:45:02,240
the first thing i need to mention is

00:45:00,400 --> 00:45:03,200
that perhaps we don't need to replace

00:45:02,240 --> 00:45:05,680
the braking system

00:45:03,200 --> 00:45:07,440
perhaps we don't need to replace the

00:45:05,680 --> 00:45:08,400
autonomous driving system or all the

00:45:07,440 --> 00:45:11,599
safety systems

00:45:08,400 --> 00:45:13,599
maybe maybe rust is good enough doing

00:45:11,599 --> 00:45:15,520
dealing with non-critical functions

00:45:13,599 --> 00:45:17,280
because for example your

00:45:15,520 --> 00:45:18,880
the air bug deployment why should we

00:45:17,280 --> 00:45:21,599
replace it if it works correctly

00:45:18,880 --> 00:45:22,240
i mean with the exception of toyota or

00:45:21,599 --> 00:45:25,760
whatever

00:45:22,240 --> 00:45:27,839
that company was a year ago but um

00:45:25,760 --> 00:45:29,839
why do we need to replace that if it's

00:45:27,839 --> 00:45:31,599
there if it's working correctly

00:45:29,839 --> 00:45:33,440
our point of view should be how do we

00:45:31,599 --> 00:45:34,720
develop the next cool thing in rust

00:45:33,440 --> 00:45:37,040
because

00:45:34,720 --> 00:45:37,920
my point about ergonomics is it's fast

00:45:37,040 --> 00:45:39,920
to prototype

00:45:37,920 --> 00:45:42,000
it's it should be quick to develop

00:45:39,920 --> 00:45:42,480
something it doesn't cost much to prove

00:45:42,000 --> 00:45:45,760
that

00:45:42,480 --> 00:45:47,359
hey look if i go and do this auto search

00:45:45,760 --> 00:45:49,040
stack this will take me a year just to

00:45:47,359 --> 00:45:51,920
procure the bloody thing

00:45:49,040 --> 00:45:53,200
well if i go in and prototype my my

00:45:51,920 --> 00:45:55,599
stack this will be

00:45:53,200 --> 00:45:57,359
i don't know a month just setting up my

00:45:55,599 --> 00:46:00,960
stuff compile it put it into

00:45:57,359 --> 00:46:02,240
and do an sdk and then showcase it then

00:46:00,960 --> 00:46:04,400
wait people

00:46:02,240 --> 00:46:06,240
yeah these you can they get traction

00:46:04,400 --> 00:46:08,319
quickly your boss would be

00:46:06,240 --> 00:46:10,000
more likely to say yeah this is fine

00:46:08,319 --> 00:46:12,720
let's let's spend a month in that

00:46:10,000 --> 00:46:14,560
instead of 20 years just procuring

00:46:12,720 --> 00:46:16,079
something um

00:46:14,560 --> 00:46:17,839
and that's that's my point of view i

00:46:16,079 --> 00:46:19,520
mean um

00:46:17,839 --> 00:46:21,280
that's how we should approach it but

00:46:19,520 --> 00:46:22,720
maybe we don't need to replace

00:46:21,280 --> 00:46:24,640
all the branding system all the engine

00:46:22,720 --> 00:46:27,760
control software but and

00:46:24,640 --> 00:46:29,920
we need to do the next cool thing

00:46:27,760 --> 00:46:31,440
would like i will open a parenthesis to

00:46:29,920 --> 00:46:32,720
something that was implied during this

00:46:31,440 --> 00:46:34,480
session that it's better

00:46:32,720 --> 00:46:36,800
to approach the requirements from the

00:46:34,480 --> 00:46:39,920
bottoms up instead of a top down

00:46:36,800 --> 00:46:41,440
and and i understand that many in many

00:46:39,920 --> 00:46:44,240
cases is frustrating

00:46:41,440 --> 00:46:44,640
dealing with requirements and maybe if

00:46:44,240 --> 00:46:48,319
you

00:46:44,640 --> 00:46:49,200
kind of imply nathan um my point of view

00:46:48,319 --> 00:46:51,280
is that

00:46:49,200 --> 00:46:52,800
at some point the engineers that are

00:46:51,280 --> 00:46:53,599
building a system need to take a step

00:46:52,800 --> 00:46:56,160
back

00:46:53,599 --> 00:46:57,359
look their system a little bit away from

00:46:56,160 --> 00:46:59,920
it from the distance and

00:46:57,359 --> 00:47:00,880
understand whether it not only if it

00:46:59,920 --> 00:47:02,960
fulfills

00:47:00,880 --> 00:47:04,079
if it if it works correctly but if it

00:47:02,960 --> 00:47:07,200
fulfills its purpose

00:47:04,079 --> 00:47:10,160
this and that ties with my entry

00:47:07,200 --> 00:47:10,640
entry trivia point about that we need to

00:47:10,160 --> 00:47:12,640
address

00:47:10,640 --> 00:47:15,280
uh phenomenal performance as well on the

00:47:12,640 --> 00:47:15,280
system yeah

00:47:15,920 --> 00:47:19,040
yeah that's a really interesting point

00:47:17,119 --> 00:47:20,240
both from a business and a safety

00:47:19,040 --> 00:47:22,720
perspective so

00:47:20,240 --> 00:47:23,359
the there's no especially in safety

00:47:22,720 --> 00:47:25,440
critical

00:47:23,359 --> 00:47:27,839
people are not going to change just to

00:47:25,440 --> 00:47:30,720
change businesses are going to look

00:47:27,839 --> 00:47:31,599
at what does this choice of a new

00:47:30,720 --> 00:47:33,920
language get me

00:47:31,599 --> 00:47:35,200
is it as as nico said the ability to

00:47:33,920 --> 00:47:38,160
prototype and

00:47:35,200 --> 00:47:40,000
design something faster or more reliable

00:47:38,160 --> 00:47:41,520
from day one because you build it once

00:47:40,000 --> 00:47:42,800
and you're done rather than building it

00:47:41,520 --> 00:47:44,640
and you sit at 90

00:47:42,800 --> 00:47:46,319
done until you've knocked out all of

00:47:44,640 --> 00:47:47,359
those bugs that take you just as long as

00:47:46,319 --> 00:47:49,680
the first 90

00:47:47,359 --> 00:47:51,359
took or really from a safety critical

00:47:49,680 --> 00:47:52,960
perspective the job

00:47:51,359 --> 00:47:55,280
the the aim of sealed rust and the aim

00:47:52,960 --> 00:47:57,359
of rust is not ah we can complete the

00:47:55,280 --> 00:48:00,559
safety critical paperwork faster

00:47:57,359 --> 00:48:02,559
like that's really not the aim of rust

00:48:00,559 --> 00:48:05,200
the goal is that we think that we can

00:48:02,559 --> 00:48:06,880
build safer systems in rust or more

00:48:05,200 --> 00:48:08,640
reliable systems in rust

00:48:06,880 --> 00:48:10,000
than we can in a language like c and c

00:48:08,640 --> 00:48:11,680
plus plus and not just

00:48:10,000 --> 00:48:13,680
okay we have to do all the paperwork so

00:48:11,680 --> 00:48:15,839
we can say yes rust is here

00:48:13,680 --> 00:48:18,079
we've checked the box we've we've

00:48:15,839 --> 00:48:21,280
limbo'd under the very low bar or

00:48:18,079 --> 00:48:24,559
surprisingly high bar but um and

00:48:21,280 --> 00:48:26,480
gotten the all the paperwork we need uh

00:48:24,559 --> 00:48:27,920
oh and it's just the same as see today

00:48:26,480 --> 00:48:29,920
our goal really is to

00:48:27,920 --> 00:48:31,920
to really take a step back because i

00:48:29,920 --> 00:48:32,480
think i think at least the consensus in

00:48:31,920 --> 00:48:34,319
the room is

00:48:32,480 --> 00:48:36,559
we think we can build better more

00:48:34,319 --> 00:48:38,480
reliable and safer systems in a language

00:48:36,559 --> 00:48:39,359
like rust than in a language like c or c

00:48:38,480 --> 00:48:42,079
plus plus

00:48:39,359 --> 00:48:43,359
i do want to play a little devil's

00:48:42,079 --> 00:48:44,640
advocate though and make sure that we

00:48:43,359 --> 00:48:48,400
don't lose the good

00:48:44,640 --> 00:48:52,880
parts of c so you know mr c

00:48:48,400 --> 00:48:56,160
gets a lot of a lot of funny looks

00:48:52,880 --> 00:48:58,800
but when you thumb through miss for c

00:48:56,160 --> 00:48:59,359
i'd say maybe 30 of it actually applies

00:48:58,800 --> 00:49:02,800
to

00:48:59,359 --> 00:49:05,839
you know isn't c based but

00:49:02,800 --> 00:49:08,319
could apply to rust as well so

00:49:05,839 --> 00:49:09,680
yeah we think we can do things in rust

00:49:08,319 --> 00:49:13,040
better

00:49:09,680 --> 00:49:15,599
but we shouldn't um ignore

00:49:13,040 --> 00:49:16,160
what we do have from the past yeah we

00:49:15,599 --> 00:49:18,079
did uh

00:49:16,160 --> 00:49:19,280
so yeah nathan i definitely wanted to

00:49:18,079 --> 00:49:22,400
throw it over you to your

00:49:19,280 --> 00:49:24,960
investigation from polysync yeah so my

00:49:22,400 --> 00:49:26,319
prior position when i was at polysync um

00:49:24,960 --> 00:49:28,720
there's a you can probably find the

00:49:26,319 --> 00:49:31,599
little white paper on my linkedin um

00:49:28,720 --> 00:49:32,000
i think it's anyway uh where we did this

00:49:31,599 --> 00:49:34,240
sort of

00:49:32,000 --> 00:49:35,839
like review basically of all the c

00:49:34,240 --> 00:49:36,160
static analysis tools we get our hands

00:49:35,839 --> 00:49:38,160
on

00:49:36,160 --> 00:49:39,599
um most of them are open source we had a

00:49:38,160 --> 00:49:41,760
couple of commercial ones like the

00:49:39,599 --> 00:49:42,880
the most popular commercial mizracy

00:49:41,760 --> 00:49:44,720
thing i can't say the name because

00:49:42,880 --> 00:49:47,359
they'll get mad um

00:49:44,720 --> 00:49:48,880
but it was really interesting to see

00:49:47,359 --> 00:49:49,440
number one it was a little disappointing

00:49:48,880 --> 00:49:51,680
it's like oh

00:49:49,440 --> 00:49:53,119
miseras c checkers are like kind of like

00:49:51,680 --> 00:49:54,960
glorified style guides

00:49:53,119 --> 00:49:56,640
in a lot of ways now they're those

00:49:54,960 --> 00:49:58,319
things are in there because they were

00:49:56,640 --> 00:49:59,839
motivated by something right they're

00:49:58,319 --> 00:50:01,440
motivated by trying to make certain

00:49:59,839 --> 00:50:02,960
coding patterns and things be more

00:50:01,440 --> 00:50:04,400
transparent to a reviewer

00:50:02,960 --> 00:50:06,240
who's going to go through line by line

00:50:04,400 --> 00:50:07,440
and go i guess this all makes sense or i

00:50:06,240 --> 00:50:10,480
can tell what this is doing

00:50:07,440 --> 00:50:13,200
right because most of the of the

00:50:10,480 --> 00:50:14,960
safety process is a lot of manual humans

00:50:13,200 --> 00:50:16,480
doing things and like checking stuff and

00:50:14,960 --> 00:50:18,800
signing off on it at various levels of

00:50:16,480 --> 00:50:20,000
independence um

00:50:18,800 --> 00:50:21,280
when we went through it and looked at it

00:50:20,000 --> 00:50:22,720
we're like oh you know what's funny is i

00:50:21,280 --> 00:50:24,800
think we can make a rust format

00:50:22,720 --> 00:50:26,480
uh plugin like configuration that

00:50:24,800 --> 00:50:27,280
basically does like what jack is talking

00:50:26,480 --> 00:50:28,640
about which we go

00:50:27,280 --> 00:50:29,920
there are some patterns here actually

00:50:28,640 --> 00:50:31,920
pretty good like we want these things to

00:50:29,920 --> 00:50:34,240
be easy to understand you still want

00:50:31,920 --> 00:50:35,520
the the uh you know it's great to have

00:50:34,240 --> 00:50:36,079
all the machine checkability in the

00:50:35,520 --> 00:50:37,520
world

00:50:36,079 --> 00:50:39,440
and that's like a fantastic sort of like

00:50:37,520 --> 00:50:41,760
verification activity but

00:50:39,440 --> 00:50:42,720
a human it's very hard to do automated

00:50:41,760 --> 00:50:44,319
validation

00:50:42,720 --> 00:50:45,839
uh about like what is the semantic

00:50:44,319 --> 00:50:47,119
meaning of the system like what is it

00:50:45,839 --> 00:50:48,960
trying to accomplish

00:50:47,119 --> 00:50:50,480
as it interacts with the world around it

00:50:48,960 --> 00:50:52,240
right that's if you're doing that in

00:50:50,480 --> 00:50:54,240
robotics it takes like maybe like a

00:50:52,240 --> 00:50:55,599
whole bunch of crazy sensors and cameras

00:50:54,240 --> 00:50:56,800
watching an arm swinging around and

00:50:55,599 --> 00:50:57,040
making sure it's doing something you

00:50:56,800 --> 00:50:59,359
know

00:50:57,040 --> 00:51:00,800
saying um it's a very different kind of

00:50:59,359 --> 00:51:02,240
uh of task and so

00:51:00,800 --> 00:51:03,680
that like validation of going through

00:51:02,240 --> 00:51:05,359
and going yeah this looks like it's

00:51:03,680 --> 00:51:07,440
doing what i think it's supposed to do

00:51:05,359 --> 00:51:09,040
um or what we expect how it's like tied

00:51:07,440 --> 00:51:09,920
to our upstream requirements of a sort

00:51:09,040 --> 00:51:12,400
of like higher level

00:51:09,920 --> 00:51:14,160
expectations of system behavior um you

00:51:12,400 --> 00:51:15,599
know still requires humans at least at

00:51:14,160 --> 00:51:16,160
this point largely to be involved in

00:51:15,599 --> 00:51:18,800
that

00:51:16,160 --> 00:51:19,440
and getting some of those nice things

00:51:18,800 --> 00:51:21,680
that

00:51:19,440 --> 00:51:23,440
are procedurally nice or kind of like

00:51:21,680 --> 00:51:26,160
decoration nice from what we do

00:51:23,440 --> 00:51:26,559
already to to better facilitate that i

00:51:26,160 --> 00:51:28,160
think

00:51:26,559 --> 00:51:29,839
is still valuable you know that we

00:51:28,160 --> 00:51:33,040
shouldn't lose that along the way

00:51:29,839 --> 00:51:34,559
um to nico's point like uh i

00:51:33,040 --> 00:51:36,559
i think he's absolutely right like part

00:51:34,559 --> 00:51:38,240
of my um not so much like you know

00:51:36,559 --> 00:51:39,280
worrying about things about

00:51:38,240 --> 00:51:41,280
the requirements from the bottom up

00:51:39,280 --> 00:51:42,960
rather than the top down but rather that

00:51:41,280 --> 00:51:45,440
the

00:51:42,960 --> 00:51:47,040
the ability to compose these

00:51:45,440 --> 00:51:48,079
abstractions and know what's going to

00:51:47,040 --> 00:51:49,599
happen

00:51:48,079 --> 00:51:50,880
if you think of like how i don't know

00:51:49,599 --> 00:51:52,079
how the audience is probably not

00:51:50,880 --> 00:51:53,920
necessarily that familiar with this but

00:51:52,079 --> 00:51:55,040
say like mathworks simulink where

00:51:53,920 --> 00:51:56,559
you're going through and drawing your

00:51:55,040 --> 00:51:58,079
block diagrams of how you want your

00:51:56,559 --> 00:51:59,359
system to work and it's sort of like

00:51:58,079 --> 00:51:59,839
you're writing software by drawing a

00:51:59,359 --> 00:52:01,760
circuit

00:51:59,839 --> 00:52:03,359
kind of like node-based programming it's

00:52:01,760 --> 00:52:05,680
like a weird blend between

00:52:03,359 --> 00:52:07,200
using an audio patchbay program and like

00:52:05,680 --> 00:52:08,880
a circuit design program

00:52:07,200 --> 00:52:10,720
um and then it generates something out

00:52:08,880 --> 00:52:12,880
the other side right that is c which is

00:52:10,720 --> 00:52:14,880
a which is a representation of what that

00:52:12,880 --> 00:52:16,319
model you wrote down is and that's great

00:52:14,880 --> 00:52:17,440
like it covers a certain part of the

00:52:16,319 --> 00:52:19,680
domain to go well

00:52:17,440 --> 00:52:21,280
i i codified in a higher level

00:52:19,680 --> 00:52:22,160
abstraction way this like thing i want

00:52:21,280 --> 00:52:23,680
to accomplish

00:52:22,160 --> 00:52:24,880
turn it into low-level implementation

00:52:23,680 --> 00:52:25,280
run it on a piece of hardware that i

00:52:24,880 --> 00:52:29,680
trust

00:52:25,280 --> 00:52:31,200
right um but to be able to go

00:52:29,680 --> 00:52:33,119
further and further outside of that to

00:52:31,200 --> 00:52:34,400
expand that composition to something

00:52:33,119 --> 00:52:35,599
a chain all the way from the

00:52:34,400 --> 00:52:36,160
requirements to the way that they're

00:52:35,599 --> 00:52:38,160
written

00:52:36,160 --> 00:52:39,280
to be able to like generate test cases

00:52:38,160 --> 00:52:41,040
to be able to

00:52:39,280 --> 00:52:42,480
uh you know generate a checkable model

00:52:41,040 --> 00:52:43,599
to be able to then turn that into

00:52:42,480 --> 00:52:45,520
something that can go

00:52:43,599 --> 00:52:46,880
uh into annotating the or you know

00:52:45,520 --> 00:52:47,520
marking the code in different places

00:52:46,880 --> 00:52:50,480
like uh

00:52:47,520 --> 00:52:51,359
like you can imagine if like um you were

00:52:50,480 --> 00:52:52,640
doing

00:52:51,359 --> 00:52:54,559
you needed to validate your system

00:52:52,640 --> 00:52:56,640
behavior and if i don't know folks

00:52:54,559 --> 00:52:57,760
are familiar with covmark the like the

00:52:56,640 --> 00:53:00,960
coverage marker

00:52:57,760 --> 00:53:02,640
crate for uh for rust where you

00:53:00,960 --> 00:53:04,640
put coverage markers in there about what

00:53:02,640 --> 00:53:06,240
the meaning of a piece of behavior is

00:53:04,640 --> 00:53:07,920
you go like this is a this is a spot

00:53:06,240 --> 00:53:09,200
like this is a chunk of my code that

00:53:07,920 --> 00:53:10,079
relates to this feature that i

00:53:09,200 --> 00:53:12,079
implemented

00:53:10,079 --> 00:53:13,520
and i can see that i must have done

00:53:12,079 --> 00:53:15,440
something that related to this feature

00:53:13,520 --> 00:53:16,800
to create some like semantic connection

00:53:15,440 --> 00:53:19,440
or uh

00:53:16,800 --> 00:53:21,119
you know uh thread you know between

00:53:19,440 --> 00:53:22,240
there was an intent to produce a feature

00:53:21,119 --> 00:53:24,000
that did a thing

00:53:22,240 --> 00:53:25,599
mechanically visible in the

00:53:24,000 --> 00:53:26,319
implementation because the coverage mark

00:53:25,599 --> 00:53:27,520
got in there

00:53:26,319 --> 00:53:29,200
and that's not going to be like ever a

00:53:27,520 --> 00:53:30,400
fully automated thing because an end

00:53:29,200 --> 00:53:32,240
user has to go in

00:53:30,400 --> 00:53:33,680
and you know put the coverage mark in

00:53:32,240 --> 00:53:36,000
the right place right

00:53:33,680 --> 00:53:37,760
um but at least gives you like a much

00:53:36,000 --> 00:53:38,880
faster lens it's not a software

00:53:37,760 --> 00:53:40,720
archaeology project

00:53:38,880 --> 00:53:42,960
to make sure that uh you know that

00:53:40,720 --> 00:53:44,319
you're what you've created to somehow

00:53:42,960 --> 00:53:46,160
ties with what you're doing

00:53:44,319 --> 00:53:47,680
um in quite the same way that it is you

00:53:46,160 --> 00:53:49,359
know often today

00:53:47,680 --> 00:53:51,200
um and by being able to do these

00:53:49,359 --> 00:53:53,200
compositions and have more

00:53:51,200 --> 00:53:54,800
uh more automated checks but not even

00:53:53,200 --> 00:53:56,640
necessarily entirely automated checks

00:53:54,800 --> 00:53:58,240
down the path um we can build more

00:53:56,640 --> 00:53:59,440
sophisticated things like to nico's

00:53:58,240 --> 00:54:00,319
point like what's the why are we going

00:53:59,440 --> 00:54:02,160
to replace

00:54:00,319 --> 00:54:03,440
you know the abs controller like it does

00:54:02,160 --> 00:54:05,119
its job pretty well

00:54:03,440 --> 00:54:07,359
but we can build all new interesting

00:54:05,119 --> 00:54:08,960
things faster because we have

00:54:07,359 --> 00:54:12,400
a way to sort of connect these some of

00:54:08,960 --> 00:54:12,400
these dots more automatically

00:54:14,000 --> 00:54:17,280
if you build the interfaces right yeah

00:54:16,720 --> 00:54:20,559
yeah

00:54:17,280 --> 00:54:22,319
yes you can write bad code in any

00:54:20,559 --> 00:54:24,720
language and that's you know

00:54:22,319 --> 00:54:26,960
we do all have to be real about that

00:54:24,720 --> 00:54:28,720
yeah that's definitely true

00:54:26,960 --> 00:54:30,319
yeah so that's one of those interesting

00:54:28,720 --> 00:54:32,160
things is is i think there's definitely

00:54:30,319 --> 00:54:34,640
room for a lot of learning here as

00:54:32,160 --> 00:54:36,480
russ starts to enter these or the first

00:54:34,640 --> 00:54:37,760
trials start happening for this

00:54:36,480 --> 00:54:39,119
is i think one of the things that we're

00:54:37,760 --> 00:54:40,640
going to really learn especially in

00:54:39,119 --> 00:54:42,240
safety critical systems is

00:54:40,640 --> 00:54:44,079
how does embedded rust work from a

00:54:42,240 --> 00:54:47,839
systems perspective because

00:54:44,079 --> 00:54:49,520
uh really understanding how a tool

00:54:47,839 --> 00:54:50,720
interacts with the rest of the ecosystem

00:54:49,520 --> 00:54:52,799
is is i think going to be a really

00:54:50,720 --> 00:54:55,760
interesting learning perspective in that

00:54:52,799 --> 00:54:57,520
you know trying to build systems that

00:54:55,760 --> 00:54:58,400
have a certain amount of availability or

00:54:57,520 --> 00:55:01,440
a certain

00:54:58,400 --> 00:55:02,480
uh performance over the entire life

00:55:01,440 --> 00:55:04,640
cycle where that means

00:55:02,480 --> 00:55:06,400
what is it like to maintain rust systems

00:55:04,640 --> 00:55:08,880
10 years after you wrote them

00:55:06,400 --> 00:55:09,920
um do you have any thoughts on what you

00:55:08,880 --> 00:55:11,680
see in the future of

00:55:09,920 --> 00:55:13,760
what what do you think we could learn or

00:55:11,680 --> 00:55:15,760
we should definitely keep an eye on for

00:55:13,760 --> 00:55:17,040
for how we see rust interacting from a

00:55:15,760 --> 00:55:19,280
systems perspective

00:55:17,040 --> 00:55:20,400
over the life cycle of uh these devices

00:55:19,280 --> 00:55:22,960
and these these

00:55:20,400 --> 00:55:22,960
processes

00:55:29,280 --> 00:55:33,359
you know james one thing coming to mind

00:55:31,119 --> 00:55:35,599
is is the conversation that

00:55:33,359 --> 00:55:37,599
you and i and jonas have had about sink

00:55:35,599 --> 00:55:40,799
and send you know this whole

00:55:37,599 --> 00:55:41,839
bare metal thing can send and how sink

00:55:40,799 --> 00:55:43,760
and send aren't

00:55:41,839 --> 00:55:45,599
strong enough abstractions on a bare

00:55:43,760 --> 00:55:46,720
metal system

00:55:45,599 --> 00:55:50,160
you know that's what an operating

00:55:46,720 --> 00:55:52,240
system's for so the boundary between

00:55:50,160 --> 00:55:55,119
language and standard library and

00:55:52,240 --> 00:55:56,799
operating system

00:55:55,119 --> 00:55:58,400
you know you can't take it too far

00:55:56,799 --> 00:56:00,240
that's one thing that comes to mind with

00:55:58,400 --> 00:56:01,920
a question you just posed i'm not sure

00:56:00,240 --> 00:56:03,040
that's quite what you had in mind but

00:56:01,920 --> 00:56:06,000
that's

00:56:03,040 --> 00:56:06,000
what springs to me

00:56:06,640 --> 00:56:10,720
yeah i think definitely as as we push

00:56:08,799 --> 00:56:12,000
languages into newer areas we start to

00:56:10,720 --> 00:56:13,920
figure out where

00:56:12,000 --> 00:56:15,520
you know current abstractions do work or

00:56:13,920 --> 00:56:17,119
current abstractions don't work and i

00:56:15,520 --> 00:56:19,119
think those are definitely areas where

00:56:17,119 --> 00:56:20,319
there's there's a lot of unknowns with

00:56:19,119 --> 00:56:21,359
choosing a new language but

00:56:20,319 --> 00:56:23,040
it's one of those things that's

00:56:21,359 --> 00:56:26,319
definitely going to have to be a

00:56:23,040 --> 00:56:27,839
learning experience as we go

00:56:26,319 --> 00:56:31,200
yeah just caution about veering into

00:56:27,839 --> 00:56:33,760
operating system territory too far i

00:56:31,200 --> 00:56:35,440
seen examples with c plus plus threads

00:56:33,760 --> 00:56:37,680
for example

00:56:35,440 --> 00:56:39,520
where it turned out the customer didn't

00:56:37,680 --> 00:56:41,839
want the standard behavior

00:56:39,520 --> 00:56:44,559
yet he purchased a third party system

00:56:41,839 --> 00:56:46,960
that used the standard and the standard

00:56:44,559 --> 00:56:51,040
wasn't flexible enough

00:56:46,960 --> 00:56:54,960
so you know language concepts should

00:56:51,040 --> 00:56:58,559
deal with the right abstractions and not

00:56:54,960 --> 00:57:01,200
veer too far into system land that's

00:56:58,559 --> 00:57:01,599
that was actually so i agree with you

00:57:01,200 --> 00:57:04,880
now

00:57:01,599 --> 00:57:05,520
i i would this decade old me would hate

00:57:04,880 --> 00:57:08,480
you for that

00:57:05,520 --> 00:57:10,000
statement i i so desperately wanted

00:57:08,480 --> 00:57:10,559
because at the time russ had lightweight

00:57:10,000 --> 00:57:12,160
tasks

00:57:10,559 --> 00:57:14,079
and it had super ways like doing

00:57:12,160 --> 00:57:17,359
supervision hierarchies and i went

00:57:14,079 --> 00:57:19,359
early but fast like i want that

00:57:17,359 --> 00:57:20,640
um you know and the way erlang comes is

00:57:19,359 --> 00:57:22,079
it's like a bundle of stuff right it's

00:57:20,640 --> 00:57:23,520
not just a programming language it comes

00:57:22,079 --> 00:57:25,119
like it's got its own vm with special

00:57:23,520 --> 00:57:26,079
properties it's got a big like library

00:57:25,119 --> 00:57:27,440
of stuff you have to do

00:57:26,079 --> 00:57:28,400
it'd be basically pointless to do

00:57:27,440 --> 00:57:29,599
anything with like erlang just a

00:57:28,400 --> 00:57:31,920
programming language

00:57:29,599 --> 00:57:32,799
um and so i really wanted that but now

00:57:31,920 --> 00:57:34,559
though especially

00:57:32,799 --> 00:57:36,000
like sort of to your point and maybe

00:57:34,559 --> 00:57:36,720
this is what part of your perspective

00:57:36,000 --> 00:57:39,599
comes from

00:57:36,720 --> 00:57:40,960
as we've veered into bare metal we're

00:57:39,599 --> 00:57:41,359
like we're literally trying to get like

00:57:40,960 --> 00:57:42,720
a

00:57:41,359 --> 00:57:44,720
you know like a really like a crazy

00:57:42,720 --> 00:57:45,200
high-end eso like you know network soc

00:57:44,720 --> 00:57:48,240
just to

00:57:45,200 --> 00:57:49,599
boot itself basically um and where and

00:57:48,240 --> 00:57:50,960
nobody at that company knows how to do

00:57:49,599 --> 00:57:52,839
it without their big binary blog which

00:57:50,960 --> 00:57:55,359
was super fun

00:57:52,839 --> 00:57:58,799
um and yeah yeah it's

00:57:55,359 --> 00:58:00,640
awful anyway um that uh

00:57:58,799 --> 00:58:02,240
yeah that we ran into some stuff a lot

00:58:00,640 --> 00:58:03,680
of stuff actually in roswell was like oh

00:58:02,240 --> 00:58:05,520
well they really

00:58:03,680 --> 00:58:08,240
uh they've picked a way to do this that

00:58:05,520 --> 00:58:09,920
is like if you were running on linux

00:58:08,240 --> 00:58:11,839
and you kind of expect to have something

00:58:09,920 --> 00:58:13,520
that is operating system shaped here

00:58:11,839 --> 00:58:14,960
or it's a very particular way of solving

00:58:13,520 --> 00:58:17,200
the problem um

00:58:14,960 --> 00:58:18,720
and then we would have to build a lot of

00:58:17,200 --> 00:58:19,680
stuff on our own we'd just be building

00:58:18,720 --> 00:58:20,960
from scratch it was like we were

00:58:19,680 --> 00:58:22,000
building our own little weird standard

00:58:20,960 --> 00:58:24,240
library for

00:58:22,000 --> 00:58:25,520
um for these things and that was kind of

00:58:24,240 --> 00:58:27,520
tricky because it

00:58:25,520 --> 00:58:29,280
i what i took from your like don't veer

00:58:27,520 --> 00:58:30,960
too far down this is

00:58:29,280 --> 00:58:32,720
it's very easy to get excited about

00:58:30,960 --> 00:58:34,480
pulling on a thread that looks like it's

00:58:32,720 --> 00:58:34,880
really interesting and spending a lot of

00:58:34,480 --> 00:58:37,119
time

00:58:34,880 --> 00:58:38,000
and community resources kind of going

00:58:37,119 --> 00:58:40,160
down that channel

00:58:38,000 --> 00:58:41,440
without getting like breadth first on

00:58:40,160 --> 00:58:43,040
like the ways in which and the right

00:58:41,440 --> 00:58:44,319
abstractions like what you can

00:58:43,040 --> 00:58:46,079
what you can build and how you should go

00:58:44,319 --> 00:58:48,559
about it well

00:58:46,079 --> 00:58:50,079
standards are good in that they get

00:58:48,559 --> 00:58:53,599
everybody doing the same

00:58:50,079 --> 00:58:57,200
thing but they also lock you in yeah

00:58:53,599 --> 00:58:59,280
and yeah yeah so you know the closer you

00:58:57,200 --> 00:59:02,000
get to hardware the more you appreciate

00:58:59,280 --> 00:59:03,920
the os you know the os is there to

00:59:02,000 --> 00:59:04,240
insulate you from worrying about things

00:59:03,920 --> 00:59:07,359
like

00:59:04,240 --> 00:59:10,880
memory coherence cross-court complexes

00:59:07,359 --> 00:59:14,319
and silicon errata unfortunately

00:59:10,880 --> 00:59:15,920
you know it it green hills were often

00:59:14,319 --> 00:59:17,440
the one that everybody points at green

00:59:15,920 --> 00:59:19,200
hills you're supposed to protect me from

00:59:17,440 --> 00:59:21,119
this chip bug it's like well shoot we

00:59:19,200 --> 00:59:24,240
didn't know it was there

00:59:21,119 --> 00:59:26,880
um so

00:59:24,240 --> 00:59:28,000
you know getting an operating system

00:59:26,880 --> 00:59:31,280
getting ipc

00:59:28,000 --> 00:59:34,880
across a memory hierarchy is hard

00:59:31,280 --> 00:59:37,040
yeah we did that with sel4 for with

00:59:34,880 --> 00:59:38,480
our at some point we'll open source it

00:59:37,040 --> 00:59:39,839
um it's just we trying to get our

00:59:38,480 --> 00:59:41,520
product out but we have this little

00:59:39,839 --> 00:59:43,520
operating system that we wrote

00:59:41,520 --> 00:59:44,880
in rust on top of seo for and it was

00:59:43,520 --> 00:59:46,000
dealing with the memory models between

00:59:44,880 --> 00:59:48,799
like x86 the different

00:59:46,000 --> 00:59:49,440
flavors of arm 32 with hype or without

00:59:48,799 --> 00:59:52,559
hype and

00:59:49,440 --> 00:59:54,799
arm 66 god awful but yeah

00:59:52,559 --> 00:59:56,640
yeah it's ugly so real quick we're

00:59:54,799 --> 00:59:58,720
getting to the end of the hour

00:59:56,640 --> 01:00:00,640
actually already so i wanted to i wanted

00:59:58,720 --> 01:00:01,760
to leave with one quick question because

01:00:00,640 --> 01:00:03,040
you started touching on

01:00:01,760 --> 01:00:04,559
on the difference between different

01:00:03,040 --> 01:00:05,760
languages standards and what they did

01:00:04,559 --> 01:00:07,520
and what they didn't do

01:00:05,760 --> 01:00:09,760
so i talked this morning a little bit

01:00:07,520 --> 01:00:13,200
about sealed rust which aims to have

01:00:09,760 --> 01:00:15,119
a formalized subset of the rust language

01:00:13,200 --> 01:00:16,640
so as kind of a closing thought before

01:00:15,119 --> 01:00:17,680
we take a short break and come back to

01:00:16,640 --> 01:00:20,000
answer questions

01:00:17,680 --> 01:00:21,359
uh i'd be interested in hearing what

01:00:20,000 --> 01:00:23,440
each of you think about

01:00:21,359 --> 01:00:25,760
what could rust learn from these other

01:00:23,440 --> 01:00:27,680
language standardization or even a

01:00:25,760 --> 01:00:28,960
tool qualification or formalization

01:00:27,680 --> 01:00:30,799
process that you think

01:00:28,960 --> 01:00:34,319
now with the the benefit of hindsight

01:00:30,799 --> 01:00:34,319
that rust could really learn from

01:00:35,839 --> 01:00:39,040
so jack's already talked a little bit

01:00:37,200 --> 01:00:39,680
about not veering too deep and trying to

01:00:39,040 --> 01:00:41,280
cover

01:00:39,680 --> 01:00:42,480
everything with a language standard

01:00:41,280 --> 01:00:44,319
because you'll find out that certain

01:00:42,480 --> 01:00:47,520
things like an operating environment

01:00:44,319 --> 01:00:51,200
uh don't do a great job of of hiding

01:00:47,520 --> 01:00:51,200
that all within the language itself

01:00:54,160 --> 01:00:57,599
i'm curious like nico's thoughts on this

01:00:57,119 --> 01:00:59,280
yeah

01:00:57,599 --> 01:01:01,839
the last two questions are really hard i

01:00:59,280 --> 01:01:05,760
think yeah

01:01:01,839 --> 01:01:07,920
so yeah in general the first

01:01:05,760 --> 01:01:09,280
and i will rely again to the standards i

01:01:07,920 --> 01:01:11,119
won't i don't want to be

01:01:09,280 --> 01:01:13,280
overly seen as a standards person

01:01:11,119 --> 01:01:15,200
because i'm not um

01:01:13,280 --> 01:01:16,799
it's important on every on any kind of

01:01:15,200 --> 01:01:18,799
system that you want to build that it's

01:01:16,799 --> 01:01:22,000
safety related to have

01:01:18,799 --> 01:01:23,440
a clear safety culture and perhaps this

01:01:22,000 --> 01:01:25,760
is something we could

01:01:23,440 --> 01:01:26,720
build in the the ecosystem is super

01:01:25,760 --> 01:01:30,799
young it's

01:01:26,720 --> 01:01:33,200
it's easier to revert changes or or

01:01:30,799 --> 01:01:34,319
direct our efforts towards certain

01:01:33,200 --> 01:01:36,799
direction today

01:01:34,319 --> 01:01:39,200
than in 10 years from now it's super

01:01:36,799 --> 01:01:41,520
hard to change what the c plus plus 14

01:01:39,200 --> 01:01:44,799
has done or the c99 has done today

01:01:41,520 --> 01:01:46,880
than when it was actually developed this

01:01:44,799 --> 01:01:49,200
standard of course that being said the

01:01:46,880 --> 01:01:51,200
rust rfc processes

01:01:49,200 --> 01:01:53,280
the the working group processes are

01:01:51,200 --> 01:01:57,440
excellent and i think

01:01:53,280 --> 01:02:00,640
perhaps you got that hassle and

01:01:57,440 --> 01:02:03,359
um another thing i would really like to

01:02:00,640 --> 01:02:06,240
investigate eventually is

01:02:03,359 --> 01:02:07,440
how do we qualify the compiler the rust

01:02:06,240 --> 01:02:09,520
compiler has

01:02:07,440 --> 01:02:11,280
a humongous amount of testing i mean if

01:02:09,520 --> 01:02:12,240
you look at it you will say this is an

01:02:11,280 --> 01:02:15,680
excellent piece

01:02:12,240 --> 01:02:18,559
a piece of engineering work and

01:02:15,680 --> 01:02:20,000
we don't appraise them too much i'm not

01:02:18,559 --> 01:02:21,680
i've never met with people but

01:02:20,000 --> 01:02:24,880
if i meet them i would buy them here for

01:02:21,680 --> 01:02:24,880
sure and um

01:02:25,599 --> 01:02:29,520
many commercial compilers today don't

01:02:27,839 --> 01:02:31,280
have this level of quality

01:02:29,520 --> 01:02:33,200
even though they are not even if they

01:02:31,280 --> 01:02:34,000
are qualified compilers perhaps in many

01:02:33,200 --> 01:02:37,680
cases

01:02:34,000 --> 01:02:40,480
um so perhaps rust is doing already

01:02:37,680 --> 01:02:42,160
many great it has many it has performed

01:02:40,480 --> 01:02:44,720
many of the base practices that

01:02:42,160 --> 01:02:45,680
safe software is doing and the thing is

01:02:44,720 --> 01:02:47,599
that we need to put

01:02:45,680 --> 01:02:49,680
out that word and that's why i really

01:02:47,599 --> 01:02:52,480
appreciate your work james

01:02:49,680 --> 01:02:53,200
with his uh sealed trust initiative um

01:02:52,480 --> 01:02:56,160
and

01:02:53,200 --> 01:02:56,720
perhaps i came back i received a message

01:02:56,160 --> 01:02:59,440
that i'm

01:02:56,720 --> 01:03:00,960
i'm coming out as a very negative person

01:02:59,440 --> 01:03:04,799
towards this

01:03:00,960 --> 01:03:08,319
this rust uh system i'm absolutely not

01:03:04,799 --> 01:03:11,760
uh i'm absolutely not um i'm only in

01:03:08,319 --> 01:03:13,280
favor and we started a lot we put a lot

01:03:11,760 --> 01:03:15,599
of thinking trying to push rust

01:03:13,280 --> 01:03:17,119
in the organizational volvo today and

01:03:15,599 --> 01:03:20,319
yeah thankfully we found some

01:03:17,119 --> 01:03:22,319
some hearing people um yeah and but to

01:03:20,319 --> 01:03:25,280
wrap up my previous comment is that

01:03:22,319 --> 01:03:25,920
at the end of the day perhaps uh to just

01:03:25,280 --> 01:03:27,760
archive

01:03:25,920 --> 01:03:29,280
all the efforts we have done to show how

01:03:27,760 --> 01:03:30,960
great the compiler is i mean

01:03:29,280 --> 01:03:33,359
this is already a selling point compared

01:03:30,960 --> 01:03:35,599
to an unknown compiler you might buy for

01:03:33,359 --> 01:03:37,280
synopsis for it for example or

01:03:35,599 --> 01:03:39,119
that is in unknown quality you need to

01:03:37,280 --> 01:03:42,079
sign i don't know 30

01:03:39,119 --> 01:03:44,720
30 toms of ndas just to get a peak on

01:03:42,079 --> 01:03:46,400
their test suite for example

01:03:44,720 --> 01:03:48,000
yeah so i definitely want to i

01:03:46,400 --> 01:03:49,280
definitely want to mention so i come

01:03:48,000 --> 01:03:50,960
from an avionics background and i

01:03:49,280 --> 01:03:53,280
actually do have a very positive view

01:03:50,960 --> 01:03:54,720
especially about the spirit of of these

01:03:53,280 --> 01:03:57,039
safety critical regulations

01:03:54,720 --> 01:03:58,000
is that most of these regulations the

01:03:57,039 --> 01:03:59,440
the comment in

01:03:58,000 --> 01:04:01,119
in avionics is typically every

01:03:59,440 --> 01:04:02,799
regulation is written in blood

01:04:01,119 --> 01:04:04,559
in that every single one of these

01:04:02,799 --> 01:04:06,720
processes are there because

01:04:04,559 --> 01:04:08,559
they're responsive to some accident or

01:04:06,720 --> 01:04:11,280
some something that happened and

01:04:08,559 --> 01:04:12,079
um i i'll be very honest the we're being

01:04:11,280 --> 01:04:13,680
so aggressive

01:04:12,079 --> 01:04:15,280
our fair systems is being so aggressive

01:04:13,680 --> 01:04:17,039
with sealed rust because we've

01:04:15,280 --> 01:04:19,280
been a part of the compiler development

01:04:17,039 --> 01:04:20,880
process and we've seen the huge amount

01:04:19,280 --> 01:04:23,039
of engineering care and

01:04:20,880 --> 01:04:25,039
coming straight out of avionics that was

01:04:23,039 --> 01:04:26,000
i was still just leaving avionics when i

01:04:25,039 --> 01:04:27,839
saw russ for the first

01:04:26,000 --> 01:04:30,240
time and when i saw things like the test

01:04:27,839 --> 01:04:32,559
suite things like the rfc process i went

01:04:30,240 --> 01:04:34,319
yeah they get it like that's that's

01:04:32,559 --> 01:04:35,119
exactly what an organization needs to be

01:04:34,319 --> 01:04:37,119
doing and i've

01:04:35,119 --> 01:04:38,319
i've definitely seen through some

01:04:37,119 --> 01:04:40,640
consulting work and things like that

01:04:38,319 --> 01:04:41,920
some organizations that were in safety

01:04:40,640 --> 01:04:44,000
critical industries and didn't have

01:04:41,920 --> 01:04:45,839
their process as well together as

01:04:44,000 --> 01:04:47,119
the rust organization just as an open

01:04:45,839 --> 01:04:48,559
source organization so

01:04:47,119 --> 01:04:50,000
i'll tell you very sneaky the reason

01:04:48,559 --> 01:04:50,720
that we're pushing so hard on sealed

01:04:50,000 --> 01:04:53,440
rust is because

01:04:50,720 --> 01:04:54,000
at least i have a lot of faith that

01:04:53,440 --> 01:04:55,920
people are going

01:04:54,000 --> 01:04:58,079
to be really surprised by what's already

01:04:55,920 --> 01:04:59,440
there and a lot of what i mentioned in

01:04:58,079 --> 01:05:00,480
terms of the work that needs to be done

01:04:59,440 --> 01:05:02,160
is the paperwork

01:05:00,480 --> 01:05:04,559
to show these regulators and to show

01:05:02,160 --> 01:05:05,680
these uh companies that are interested

01:05:04,559 --> 01:05:07,520
in using rust that

01:05:05,680 --> 01:05:09,680
the quality is there and yes there's

01:05:07,520 --> 01:05:11,280
probably some you know last ten percent

01:05:09,680 --> 01:05:13,039
of rounding corners and things like that

01:05:11,280 --> 01:05:14,000
to make sure that that due diligence is

01:05:13,039 --> 01:05:15,839
really done

01:05:14,000 --> 01:05:17,359
all the way to the level that's needed

01:05:15,839 --> 01:05:18,960
for safety critical but we're here

01:05:17,359 --> 01:05:21,520
because we think that generally the

01:05:18,960 --> 01:05:23,440
quality is there and that it's a very

01:05:21,520 --> 01:05:25,280
achievable goal the date might be you

01:05:23,440 --> 01:05:26,640
know something to argue about but that

01:05:25,280 --> 01:05:28,960
it is something that we believe that the

01:05:26,640 --> 01:05:30,799
rust language can do

01:05:28,960 --> 01:05:32,799
yeah i wanted to say i can't i want to

01:05:30,799 --> 01:05:34,160
say it was bmw car it but i can't i

01:05:32,799 --> 01:05:34,799
can't remember off the top of my head at

01:05:34,160 --> 01:05:36,599
one point

01:05:34,799 --> 01:05:38,160
somebody i think the paper was from like

01:05:36,599 --> 01:05:40,319
01:05:38,160 --> 01:05:42,000
and the onus of it was to try to figure

01:05:40,319 --> 01:05:44,319
out like what could they adopt from the

01:05:42,000 --> 01:05:45,920
linux ecosystem in terms of

01:05:44,319 --> 01:05:47,359
qualifying something that kind of trying

01:05:45,920 --> 01:05:49,119
to figure out like

01:05:47,359 --> 01:05:50,480
you know if they could qualify something

01:05:49,119 --> 01:05:52,319
that kind of already existed

01:05:50,480 --> 01:05:54,079
and they most of the effort was looking

01:05:52,319 --> 01:05:54,559
at the processes for development and

01:05:54,079 --> 01:05:56,640
kind of

01:05:54,559 --> 01:05:58,480
part of what they landed on was that the

01:05:56,640 --> 01:05:59,599
mailing list you know had all this

01:05:58,480 --> 01:06:02,400
context in it

01:05:59,599 --> 01:06:04,160
that was way more rational and thought

01:06:02,400 --> 01:06:05,839
that went into that was visible

01:06:04,160 --> 01:06:08,079
right that went into every decision that

01:06:05,839 --> 01:06:09,280
was made um which is a really important

01:06:08,079 --> 01:06:10,559
thing in safety critical systems

01:06:09,280 --> 01:06:12,720
development you want the

01:06:10,559 --> 01:06:14,400
the connective tissue between like why

01:06:12,720 --> 01:06:14,799
you did a thing too that you did it

01:06:14,400 --> 01:06:16,799
right

01:06:14,799 --> 01:06:18,240
and be able to connect one to the other

01:06:16,799 --> 01:06:20,960
and the rfc process

01:06:18,240 --> 01:06:22,400
in rust is fantastic for that like you

01:06:20,960 --> 01:06:23,680
get to see

01:06:22,400 --> 01:06:25,039
you don't there aren't very many other

01:06:23,680 --> 01:06:26,000
places where you get to like go and look

01:06:25,039 --> 01:06:27,520
at the people who are putting it

01:06:26,000 --> 01:06:29,599
together who are like

01:06:27,520 --> 01:06:30,640
vehemently and like and vigorously

01:06:29,599 --> 01:06:32,720
considering

01:06:30,640 --> 01:06:34,400
all the edge cases they can think of and

01:06:32,720 --> 01:06:35,359
documenting it and going back and forth

01:06:34,400 --> 01:06:36,880
with one another

01:06:35,359 --> 01:06:38,480
and then getting that into something

01:06:36,880 --> 01:06:40,799
that eventually becomes a feature

01:06:38,480 --> 01:06:42,000
right or some uh you know new capability

01:06:40,799 --> 01:06:44,640
in the in the system

01:06:42,000 --> 01:06:45,760
and sort of to nico's point like on like

01:06:44,640 --> 01:06:46,720
the compiler quality

01:06:45,760 --> 01:06:49,119
it's a similar thing where you're like

01:06:46,720 --> 01:06:50,559
well this is much more than you would

01:06:49,119 --> 01:06:51,680
you know maybe get in any other

01:06:50,559 --> 01:06:52,960
organization that's sort of like

01:06:51,680 --> 01:06:54,720
following the standard

01:06:52,960 --> 01:06:56,000
but it's not it's like it's all

01:06:54,720 --> 01:06:57,599
happening in parallel

01:06:56,000 --> 01:06:59,280
with no knowledge of the fact that it

01:06:57,599 --> 01:07:00,400
could be totally applicable to this like

01:06:59,280 --> 01:07:02,720
other domain

01:07:00,400 --> 01:07:04,160
um and there's got to be some maybe some

01:07:02,720 --> 01:07:05,440
effort which i think sealed rust is you

01:07:04,160 --> 01:07:06,799
know going to be a part of which is like

01:07:05,440 --> 01:07:07,520
trying to go like okay what can we pull

01:07:06,799 --> 01:07:10,160
from that

01:07:07,520 --> 01:07:12,240
and uh and and then figure out how to

01:07:10,160 --> 01:07:13,520
align that with what people expect like

01:07:12,240 --> 01:07:15,440
uh you know jack mentioned like in the

01:07:13,520 --> 01:07:16,880
in the private chat like i had surprised

01:07:15,440 --> 01:07:20,319
the assessor which is true

01:07:16,880 --> 01:07:20,319
um and that um

01:07:20,799 --> 01:07:25,680
while yes it's like can be annoying to

01:07:23,920 --> 01:07:27,359
be doing something you know developing a

01:07:25,680 --> 01:07:29,039
compiler in a better way right you know

01:07:27,359 --> 01:07:30,559
going through and doing the

01:07:29,039 --> 01:07:32,319
requirements like process in a better

01:07:30,559 --> 01:07:34,240
way than these other uh

01:07:32,319 --> 01:07:35,359
sort of ecosystems or companies or

01:07:34,240 --> 01:07:36,799
enterprises do

01:07:35,359 --> 01:07:38,160
um you still have to do it there's an

01:07:36,799 --> 01:07:39,280
amount of the game you have to play

01:07:38,160 --> 01:07:40,799
right it's like you just you don't get

01:07:39,280 --> 01:07:42,160
to go like i'm a cool kid and i don't

01:07:40,799 --> 01:07:43,920
have to do any of these things

01:07:42,160 --> 01:07:46,799
um i tried doing that with fundraising

01:07:43,920 --> 01:07:48,799
and it was a colossal failure so i

01:07:46,799 --> 01:07:50,160
figured out how to play the game uh and

01:07:48,799 --> 01:07:51,760
go out and you know change how i wanted

01:07:50,160 --> 01:07:52,559
to go about it so how they wanted me to

01:07:51,760 --> 01:07:55,200
go about it

01:07:52,559 --> 01:07:57,039
um but it is i it is one of the things

01:07:55,200 --> 01:07:59,760
that has been like most impressive to me

01:07:57,039 --> 01:08:01,119
about the way like how fastidious and

01:07:59,760 --> 01:08:02,000
considerate of the decisions that

01:08:01,119 --> 01:08:04,319
they're making

01:08:02,000 --> 01:08:05,280
um the rust community is about you know

01:08:04,319 --> 01:08:07,119
what's going on now

01:08:05,280 --> 01:08:08,480
they end up sometimes disagreeing and we

01:08:07,119 --> 01:08:10,160
just and there's lots of features that

01:08:08,480 --> 01:08:11,280
don't make it in that i wish were there

01:08:10,160 --> 01:08:14,240
you know that i've been like on the

01:08:11,280 --> 01:08:14,640
table for 10 years um but nonetheless

01:08:14,240 --> 01:08:16,239
like i

01:08:14,640 --> 01:08:18,000
it's i can i get to go back and look at

01:08:16,239 --> 01:08:18,799
the rationale right and that's often

01:08:18,000 --> 01:08:21,279
what

01:08:18,799 --> 01:08:22,319
is is going back to your very first

01:08:21,279 --> 01:08:23,600
question james

01:08:22,319 --> 01:08:24,799
about like what's different between

01:08:23,600 --> 01:08:25,520
safety critical software and other

01:08:24,799 --> 01:08:26,719
software

01:08:25,520 --> 01:08:27,920
that's another big component that i

01:08:26,719 --> 01:08:29,839
haven't thought of which is the safety

01:08:27,920 --> 01:08:32,960
critical software requires you to retain

01:08:29,839 --> 01:08:35,120
why uh and and regular software

01:08:32,960 --> 01:08:36,640
only really gives a crap about how right

01:08:35,120 --> 01:08:38,400
and so like you just you have your test

01:08:36,640 --> 01:08:40,319
you see that it works like why is always

01:08:38,400 --> 01:08:40,880
lost to the like the archives of slack

01:08:40,319 --> 01:08:43,359
or something

01:08:40,880 --> 01:08:44,480
right um and safety critical software

01:08:43,359 --> 01:08:45,120
doesn't you know you don't get it to

01:08:44,480 --> 01:08:47,600
have that

01:08:45,120 --> 01:08:48,319
being able to maintain a process for why

01:08:47,600 --> 01:08:51,520
uh is

01:08:48,319 --> 01:08:54,080
like an essential component of that

01:08:51,520 --> 01:08:55,199
one of the most upvoted questions in the

01:08:54,080 --> 01:08:57,359
chat was from

01:08:55,199 --> 01:08:59,279
um adam greg which is with russ

01:08:57,359 --> 01:09:01,199
dependencies it's very common to have

01:08:59,279 --> 01:09:02,799
hundreds of transitive dependencies

01:09:01,199 --> 01:09:04,719
which is much less common in traditional

01:09:02,799 --> 01:09:06,640
c development is that likely to make

01:09:04,719 --> 01:09:08,400
certification harder and do you think

01:09:06,640 --> 01:09:10,319
certified safety critical projects will

01:09:08,400 --> 01:09:12,239
have much smaller dependency trees

01:09:10,319 --> 01:09:14,880
and therefore lose what might be seen as

01:09:12,239 --> 01:09:16,000
one advantage of cargo

01:09:14,880 --> 01:09:18,400
so i'll throw it up whoever wants to

01:09:16,000 --> 01:09:19,679
take that one first i ask my engineers

01:09:18,400 --> 01:09:21,040
like what they

01:09:19,679 --> 01:09:23,279
cargo was the source of much

01:09:21,040 --> 01:09:26,719
consternation so

01:09:23,279 --> 01:09:30,080
um it's a great it's a great tool

01:09:26,719 --> 01:09:31,839
so long as you can do all the things

01:09:30,080 --> 01:09:32,799
that it expects you to do it's very

01:09:31,839 --> 01:09:34,719
opinionated

01:09:32,799 --> 01:09:36,000
um the suggestion from my from my

01:09:34,719 --> 01:09:38,719
engineers was that

01:09:36,000 --> 01:09:40,000
uh maybe there's a world where you

01:09:38,719 --> 01:09:41,359
decouple the building from the

01:09:40,000 --> 01:09:43,359
dependency management

01:09:41,359 --> 01:09:44,960
um and that way you have like a slightly

01:09:43,359 --> 01:09:46,080
more flexible way to interact with this

01:09:44,960 --> 01:09:47,759
thing because

01:09:46,080 --> 01:09:48,960
there was one point for instance this

01:09:47,759 --> 01:09:50,640
was where we got to the pathological

01:09:48,960 --> 01:09:52,640
case where we were trying to work around

01:09:50,640 --> 01:09:53,279
a cargo bug where it was unifying all

01:09:52,640 --> 01:09:55,199
the

01:09:53,279 --> 01:09:57,440
dependencies in one name space and we

01:09:55,199 --> 01:09:58,159
made a crate called like cargo 1576 or

01:09:57,440 --> 01:09:59,920
whatever

01:09:58,159 --> 01:10:02,640
um i think it's since been fixed maybe

01:09:59,920 --> 01:10:04,000
in the most recent cargo but uh

01:10:02,640 --> 01:10:05,679
i think the big sports at nightly or

01:10:04,000 --> 01:10:08,640
maybe now yeah

01:10:05,679 --> 01:10:10,239
thank god so uh but what we ended up

01:10:08,640 --> 01:10:12,480
doing their first pass at it was like

01:10:10,239 --> 01:10:14,400
okay well let's just try to use cargo's

01:10:12,480 --> 01:10:16,719
uh let's see if we can sort of make a

01:10:14,400 --> 01:10:18,080
thing that as a build tool that uses

01:10:16,719 --> 01:10:19,760
cargo to fix cargo

01:10:18,080 --> 01:10:21,600
um and so we tried to use cargo as a

01:10:19,760 --> 01:10:23,440
library and it was

01:10:21,600 --> 01:10:24,640
i think it imports the entirety of

01:10:23,440 --> 01:10:26,719
crates on io

01:10:24,640 --> 01:10:27,760
um in order to uh in order to sort of

01:10:26,719 --> 01:10:29,840
build itself

01:10:27,760 --> 01:10:31,760
um and it's it's it's tricky because

01:10:29,840 --> 01:10:32,080
like i you know jack brought this up is

01:10:31,760 --> 01:10:32,960
that

01:10:32,080 --> 01:10:34,400
you when you're dealing with these

01:10:32,960 --> 01:10:35,440
legacy systems like you need to be able

01:10:34,400 --> 01:10:39,840
to ship a shared

01:10:35,440 --> 01:10:41,840
library um there are certain things that

01:10:39,840 --> 01:10:43,120
the cargo tool chain like really makes

01:10:41,840 --> 01:10:45,040
hard to do

01:10:43,120 --> 01:10:46,640
unless you're just gonna go i'm all in

01:10:45,040 --> 01:10:48,239
on cargo which is what we did we now

01:10:46,640 --> 01:10:49,199
have taught cargo to do a bunch of other

01:10:48,239 --> 01:10:51,040
stuff

01:10:49,199 --> 01:10:52,400
rather than using um you know we have a

01:10:51,040 --> 01:10:53,600
bunch of tooling for like how to get it

01:10:52,400 --> 01:10:54,080
to interact with cmake for these

01:10:53,600 --> 01:10:57,679
underlying

01:10:54,080 --> 01:10:58,480
dependencies um yeah yeah

01:10:57,679 --> 01:11:00,320
because what are you going to do like

01:10:58,480 --> 01:11:00,960
yeah it's just what we were stuck with

01:11:00,320 --> 01:11:03,120
yeah

01:11:00,960 --> 01:11:04,480
do you build up cargo or do you build

01:11:03,120 --> 01:11:06,239
around cargo

01:11:04,480 --> 01:11:08,719
and you know so far i've taken the

01:11:06,239 --> 01:11:10,880
approach of building around cargo

01:11:08,719 --> 01:11:12,640
and you know to the question about the

01:11:10,880 --> 01:11:15,760
deep depths you know

01:11:12,640 --> 01:11:17,840
um c programmers and c

01:11:15,760 --> 01:11:20,000
plus plus programmers they've never

01:11:17,840 --> 01:11:22,719
dealt with a repo before so

01:11:20,000 --> 01:11:23,920
cargo is just you know an amazing light

01:11:22,719 --> 01:11:27,520
to them

01:11:23,920 --> 01:11:28,480
um i've dealt with repos both good and

01:11:27,520 --> 01:11:31,120
bad you know

01:11:28,480 --> 01:11:32,719
i i'm sorry java people i don't know how

01:11:31,120 --> 01:11:34,640
you work with maven it's uh

01:11:32,719 --> 01:11:36,239
every time i try to build a maven

01:11:34,640 --> 01:11:39,520
project the

01:11:36,239 --> 01:11:40,000
the dependencies are broken but cargo

01:11:39,520 --> 01:11:42,560
seems to

01:11:40,000 --> 01:11:44,640
always work as long as you're dealing

01:11:42,560 --> 01:11:46,480
with crates.io

01:11:44,640 --> 01:11:47,679
so you know when it comes to safety

01:11:46,480 --> 01:11:52,000
critical

01:11:47,679 --> 01:11:55,040
um i think that it's not necessarily

01:11:52,000 --> 01:11:57,120
cargo that's the issue but maybe it's

01:11:55,040 --> 01:11:58,960
the ecosystem

01:11:57,120 --> 01:12:00,480
you know people build on everything

01:11:58,960 --> 01:12:02,320
because it's easy and that's where you

01:12:00,480 --> 01:12:04,000
get so much leverage especially from

01:12:02,320 --> 01:12:06,800
open source

01:12:04,000 --> 01:12:08,800
and in safety critical boy you really

01:12:06,800 --> 01:12:11,920
have to curate

01:12:08,800 --> 01:12:15,040
the crates that you're going to use they

01:12:11,920 --> 01:12:17,040
have to be either certified as safety

01:12:15,040 --> 01:12:18,880
elements out of context

01:12:17,040 --> 01:12:20,400
they either have to provide evidence so

01:12:18,880 --> 01:12:23,679
you can certify them

01:12:20,400 --> 01:12:25,520
in your component so i don't think that

01:12:23,679 --> 01:12:28,560
you're going to get these you know

01:12:25,520 --> 01:12:29,760
depth depth chains 100 deep and safety

01:12:28,560 --> 01:12:32,320
systems because

01:12:29,760 --> 01:12:33,520
you just can't have that that hands-off

01:12:32,320 --> 01:12:36,400
approach to code

01:12:33,520 --> 01:12:37,280
more of it has to be yours in order for

01:12:36,400 --> 01:12:40,640
you to

01:12:37,280 --> 01:12:43,679
attest to its safety

01:12:40,640 --> 01:12:45,199
go ahead nico yeah this is not only a

01:12:43,679 --> 01:12:45,840
problem for a safety system if you have

01:12:45,199 --> 01:12:47,920
an event

01:12:45,840 --> 01:12:50,640
in any kind of embedded system you need

01:12:47,920 --> 01:12:54,000
to curate your your dependencies

01:12:50,640 --> 01:12:55,440
there is no way around it um and our our

01:12:54,000 --> 01:12:57,840
little know that we are building that

01:12:55,440 --> 01:13:00,159
has no safety requirements one of

01:12:57,840 --> 01:13:00,960
a lot of work or thinking we are putting

01:13:00,159 --> 01:13:03,360
on is

01:13:00,960 --> 01:13:04,960
how to properly deploy with cargo vendor

01:13:03,360 --> 01:13:07,360
how to properly store

01:13:04,960 --> 01:13:08,719
our crates how to review the crates that

01:13:07,360 --> 01:13:10,560
are incoming because

01:13:08,719 --> 01:13:12,880
there might be not safety problems but

01:13:10,560 --> 01:13:15,040
security problems for example or

01:13:12,880 --> 01:13:16,719
license problems license problems as

01:13:15,040 --> 01:13:18,480
well it's the same it's a set of

01:13:16,719 --> 01:13:20,400
problems that we

01:13:18,480 --> 01:13:21,760
it's not the same as safety but it's the

01:13:20,400 --> 01:13:24,000
same cluster of problem

01:13:21,760 --> 01:13:25,679
um and you definitely need to curate

01:13:24,000 --> 01:13:27,840
your embedded world anyway

01:13:25,679 --> 01:13:29,280
um perhaps somebody doesn't have a meet

01:13:27,840 --> 01:13:31,199
license for example something from the

01:13:29,280 --> 01:13:34,239
things you are putting yeah license

01:13:31,199 --> 01:13:36,320
so i i think it's it's not only this is

01:13:34,239 --> 01:13:36,880
not a safety problem only it's it's a

01:13:36,320 --> 01:13:38,640
it's

01:13:36,880 --> 01:13:41,360
all over the place if you're deploying

01:13:38,640 --> 01:13:44,560
your code not only on a web server but

01:13:41,360 --> 01:13:47,600
also on your on on your on your

01:13:44,560 --> 01:13:48,880
little uh silicon i definitely

01:13:47,600 --> 01:13:50,480
i definitely want to call out a couple

01:13:48,880 --> 01:13:51,440
things where there there's definitely

01:13:50,480 --> 01:13:52,640
some building blocks here

01:13:51,440 --> 01:13:54,159
it's part of fair systems and the

01:13:52,640 --> 01:13:56,080
exercises we've been doing to figure out

01:13:54,159 --> 01:13:57,520
what is needed for a field rust

01:13:56,080 --> 01:13:59,280
ecosystem this is definitely one of the

01:13:57,520 --> 01:14:00,640
things that we've highlighted because

01:13:59,280 --> 01:14:02,000
there's a reason people like reaching

01:14:00,640 --> 01:14:03,840
for dependencies and that's because

01:14:02,000 --> 01:14:05,840
often it solves a problem for them when

01:14:03,840 --> 01:14:07,360
we talk about faster iteration

01:14:05,840 --> 01:14:08,719
that's one of those things where you can

01:14:07,360 --> 01:14:10,239
pull something off the shelf and

01:14:08,719 --> 01:14:11,760
especially with rust you you tend to

01:14:10,239 --> 01:14:13,199
have a high

01:14:11,760 --> 01:14:14,719
chance that when you pull something off

01:14:13,199 --> 01:14:15,360
the shelf it's generally going to work

01:14:14,719 --> 01:14:17,679
it's

01:14:15,360 --> 01:14:19,679
you know maybe not totally matched for

01:14:17,679 --> 01:14:21,199
what you're trying to do but generally

01:14:19,679 --> 01:14:23,120
things tend to do what they say on the

01:14:21,199 --> 01:14:25,840
label but there's there's definitely

01:14:23,120 --> 01:14:27,440
two projects or components that i want

01:14:25,840 --> 01:14:29,199
or three things that i want to

01:14:27,440 --> 01:14:30,560
point out that i think are some really

01:14:29,199 --> 01:14:32,320
interesting building blocks and i'll at

01:14:30,560 --> 01:14:33,679
least mention that i'll tell you ferris

01:14:32,320 --> 01:14:34,960
has been looking at them as possible

01:14:33,679 --> 01:14:35,760
building blocks towards a safety

01:14:34,960 --> 01:14:37,600
critical

01:14:35,760 --> 01:14:38,960
sealed rust ecosystem or even a mission

01:14:37,600 --> 01:14:39,679
critical like you said security

01:14:38,960 --> 01:14:42,560
dependent

01:14:39,679 --> 01:14:44,159
libraries um and one is that cargo has a

01:14:42,560 --> 01:14:45,280
concept of lock files and things like

01:14:44,159 --> 01:14:47,040
that and you can have

01:14:45,280 --> 01:14:48,719
general guarantees that you can specify

01:14:47,040 --> 01:14:50,800
very specific versions

01:14:48,719 --> 01:14:53,120
and be assured that the version that you

01:14:50,800 --> 01:14:55,120
chose is the version that you chose

01:14:53,120 --> 01:14:57,040
not everyone uses it as stringently in

01:14:55,120 --> 01:14:58,159
rust and that we tend to like the newest

01:14:57,040 --> 01:14:59,920
version of things

01:14:58,159 --> 01:15:02,000
um but it's certainly possible to lock

01:14:59,920 --> 01:15:04,080
that down the second thing that i wanted

01:15:02,000 --> 01:15:05,679
to mention is it is possible to build an

01:15:04,080 --> 01:15:07,840
alternative registry today

01:15:05,679 --> 01:15:09,600
uh crate start i o is used because

01:15:07,840 --> 01:15:10,080
everyone uses it and that's a lovely

01:15:09,600 --> 01:15:11,920
thing

01:15:10,080 --> 01:15:13,440
but there is infrastructure and the

01:15:11,920 --> 01:15:14,400
possibility and there are already proof

01:15:13,440 --> 01:15:17,120
of concept

01:15:14,400 --> 01:15:18,000
um package repositories that are not

01:15:17,120 --> 01:15:19,199
crates io

01:15:18,000 --> 01:15:21,199
and that's something that we've we've

01:15:19,199 --> 01:15:21,600
had customers ask us of what it would

01:15:21,199 --> 01:15:23,280
take

01:15:21,600 --> 01:15:25,280
to set up an internal version of a

01:15:23,280 --> 01:15:27,520
crates.i o which could use

01:15:25,280 --> 01:15:29,679
packages that internally companies had

01:15:27,520 --> 01:15:31,280
approved to some level or another

01:15:29,679 --> 01:15:33,360
and the third project that i wanted to

01:15:31,280 --> 01:15:35,679
point out is something like cargo crev

01:15:33,360 --> 01:15:37,920
which is a code review tool which is

01:15:35,679 --> 01:15:38,800
meant to distribute code review and

01:15:37,920 --> 01:15:40,400
things like that

01:15:38,800 --> 01:15:41,840
what it aims to be is essentially an

01:15:40,400 --> 01:15:44,320
allow list of

01:15:41,840 --> 01:15:45,840
um i've gone and done a security review

01:15:44,320 --> 01:15:47,600
or people i know and trust have gone and

01:15:45,840 --> 01:15:48,080
done a security review on something like

01:15:47,600 --> 01:15:51,520
this

01:15:48,080 --> 01:15:53,280
and then i could very much see um either

01:15:51,520 --> 01:15:54,880
uh a company that is large enough

01:15:53,280 --> 01:15:55,440
building one of these internal repos

01:15:54,880 --> 01:15:57,600
that have

01:15:55,440 --> 01:15:59,600
an allow list of crates they've said

01:15:57,600 --> 01:16:01,280
look we think that being able to bolt

01:15:59,600 --> 01:16:02,880
these parts together is still valuable

01:16:01,280 --> 01:16:04,800
i've worked at safety critical companies

01:16:02,880 --> 01:16:05,199
that had internal software libraries we

01:16:04,800 --> 01:16:07,840
say

01:16:05,199 --> 01:16:10,239
this is the math library this is the uh

01:16:07,840 --> 01:16:12,560
real-time kernel this is the gps

01:16:10,239 --> 01:16:13,520
location processing library and we've

01:16:12,560 --> 01:16:15,120
qualified those

01:16:13,520 --> 01:16:16,719
and codified all of the integration

01:16:15,120 --> 01:16:17,440
requirements for that and that was a

01:16:16,719 --> 01:16:19,040
huge

01:16:17,440 --> 01:16:20,480
accelerator for development of these

01:16:19,040 --> 01:16:23,040
companies that i've worked with

01:16:20,480 --> 01:16:24,480
and i think cargo and the tools that

01:16:23,040 --> 01:16:25,840
come with rust can only serve to

01:16:24,480 --> 01:16:27,440
accelerate that but i think

01:16:25,840 --> 01:16:29,199
someone needs to write the operational

01:16:27,440 --> 01:16:30,560
playbook for that but it's definitely

01:16:29,199 --> 01:16:31,760
something where i think a lot of those

01:16:30,560 --> 01:16:34,400
baseline

01:16:31,760 --> 01:16:35,920
um uh building blocks are there or at

01:16:34,400 --> 01:16:38,320
least the concepts are there

01:16:35,920 --> 01:16:39,360
um and the ecosystem has thought of them

01:16:38,320 --> 01:16:40,960
and certainly it's something we're

01:16:39,360 --> 01:16:42,880
looking at at ferris systems of

01:16:40,960 --> 01:16:44,960
what would make sense whether that's a

01:16:42,880 --> 01:16:46,080
subscription review service or providing

01:16:44,960 --> 01:16:48,239
these libraries as

01:16:46,080 --> 01:16:49,840
safety out of context elements that are

01:16:48,239 --> 01:16:51,120
reviewed to different standards and

01:16:49,840 --> 01:16:51,840
things like that where you can say i

01:16:51,120 --> 01:16:55,360
want

01:16:51,840 --> 01:16:56,000
acyl b or i want acyld or i want d178

01:16:55,360 --> 01:16:58,159
level

01:16:56,000 --> 01:16:59,679
c or something like that and you get a

01:16:58,159 --> 01:17:01,360
mapping of crates that are

01:16:59,679 --> 01:17:02,320
acceptable for use for your application

01:17:01,360 --> 01:17:03,679
because i don't think people are going

01:17:02,320 --> 01:17:06,080
to give up on that

01:17:03,679 --> 01:17:07,679
ability to use building blocks and have

01:17:06,080 --> 01:17:09,040
packages but it has to be

01:17:07,679 --> 01:17:11,440
in a way that makes sense for the

01:17:09,040 --> 01:17:13,520
context yeah nathan you know i

01:17:11,440 --> 01:17:14,960
i've talked to people who when we you

01:17:13,520 --> 01:17:16,000
know when we talk to them about embedded

01:17:14,960 --> 01:17:19,440
rust the very first thing

01:17:16,000 --> 01:17:21,360
they say is make sure cargo's there

01:17:19,440 --> 01:17:22,480
yeah totally no cargo is fantastic right

01:17:21,360 --> 01:17:23,840
and that's that's the thing it's it's

01:17:22,480 --> 01:17:24,800
like but it's uh it's sort of like what

01:17:23,840 --> 01:17:26,000
you were saying with the operating

01:17:24,800 --> 01:17:28,560
system stuff where it's

01:17:26,000 --> 01:17:29,360
it ends up being um it's a complete

01:17:28,560 --> 01:17:30,800
solution

01:17:29,360 --> 01:17:32,560
and as a result of being a complete

01:17:30,800 --> 01:17:33,040
solution it's very opinionated and then

01:17:32,560 --> 01:17:34,880
has

01:17:33,040 --> 01:17:36,880
degrees of calcification and

01:17:34,880 --> 01:17:39,120
inflexibility and if you are

01:17:36,880 --> 01:17:40,159
yeah if you're starting from nothing

01:17:39,120 --> 01:17:42,159
then it's like easy

01:17:40,159 --> 01:17:43,520
it's very easy to adopt if you are

01:17:42,159 --> 01:17:47,040
starting from

01:17:43,520 --> 01:17:47,679
daimler's build system right it's like a

01:17:47,040 --> 01:17:49,679
whole different

01:17:47,679 --> 01:17:51,600
you know can of worms right and i think

01:17:49,679 --> 01:17:52,560
and that that ends up being a challenge

01:17:51,600 --> 01:17:53,920
because then you end up in this

01:17:52,560 --> 01:17:56,960
situation of

01:17:53,920 --> 01:17:58,800
um constantly relegating

01:17:56,960 --> 01:18:00,320
so people may not be like aware of this

01:17:58,800 --> 01:18:01,520
but in like the automotive industry and

01:18:00,320 --> 01:18:03,760
other similar industries

01:18:01,520 --> 01:18:05,360
they're like three-ish like basically

01:18:03,760 --> 01:18:08,560
like primary phases of development

01:18:05,360 --> 01:18:10,000
where you have r d it just it's mostly

01:18:08,560 --> 01:18:11,199
the artifacts that come out of r d are

01:18:10,000 --> 01:18:13,040
white papers that go to advanced

01:18:11,199 --> 01:18:14,080
engineering advanced engineering figures

01:18:13,040 --> 01:18:15,199
out how to make the thing and the

01:18:14,080 --> 01:18:17,040
production engineering figures how to

01:18:15,199 --> 01:18:17,760
make it cheaper and reliable and get it

01:18:17,040 --> 01:18:21,520
out there

01:18:17,760 --> 01:18:22,640
and and so if we can't figure out a way

01:18:21,520 --> 01:18:24,400
to

01:18:22,640 --> 01:18:26,000
provide the necessary flexibility to

01:18:24,400 --> 01:18:28,239
onboard this thing into

01:18:26,000 --> 01:18:30,320
existing ecosystems not just as a

01:18:28,239 --> 01:18:31,120
language like with an ffi but with the

01:18:30,320 --> 01:18:32,880
tooling

01:18:31,120 --> 01:18:34,719
um it will just be constantly relegated

01:18:32,880 --> 01:18:37,760
to the bin of r d

01:18:34,719 --> 01:18:39,440
um and that's not great

01:18:37,760 --> 01:18:41,440
it's cool like you get to like it gets

01:18:39,440 --> 01:18:42,800
it gets to inform what happens

01:18:41,440 --> 01:18:44,000
in like advanced engineering production

01:18:42,800 --> 01:18:45,840
engineering but it doesn't get to be

01:18:44,000 --> 01:18:47,920
like the central thesis of how

01:18:45,840 --> 01:18:49,760
you know things are developed well maybe

01:18:47,920 --> 01:18:51,440
i want to cargo well

01:18:49,760 --> 01:18:53,360
i was going to call harken back to

01:18:51,440 --> 01:18:54,880
nathan's comment about maybe uh

01:18:53,360 --> 01:18:56,480
fetching should be separate from

01:18:54,880 --> 01:18:58,400
building but uh

01:18:56,480 --> 01:18:59,600
back to you james you're the moderator

01:18:58,400 --> 01:19:00,800
yeah definitely so we have a lot of

01:18:59,600 --> 01:19:02,320
great questions and i want to at least

01:19:00,800 --> 01:19:03,280
hit some of them while we're while we're

01:19:02,320 --> 01:19:05,679
on video so

01:19:03,280 --> 01:19:06,640
the next question that i really liked is

01:19:05,679 --> 01:19:08,560
what is the most

01:19:06,640 --> 01:19:10,159
impactful thing software engineering in

01:19:08,560 --> 01:19:12,640
safety critical systems could

01:19:10,159 --> 01:19:13,600
improve on independent of certification

01:19:12,640 --> 01:19:15,360
from outside

01:19:13,600 --> 01:19:23,760
which is frequently sometimes just a

01:19:15,360 --> 01:19:26,320
paper trail

01:19:23,760 --> 01:19:27,120
so understanding the use cases of your

01:19:26,320 --> 01:19:29,440
library or

01:19:27,120 --> 01:19:31,520
how somebody else would would use your

01:19:29,440 --> 01:19:34,239
your your library or create or

01:19:31,520 --> 01:19:35,120
whatever regardless of the language or

01:19:34,239 --> 01:19:37,280
environment is

01:19:35,120 --> 01:19:38,960
is the number one thing that most

01:19:37,280 --> 01:19:40,400
certification or qualifications will

01:19:38,960 --> 01:19:42,560
look at

01:19:40,400 --> 01:19:44,800
so have you documented your assumptions

01:19:42,560 --> 01:19:45,920
do you have some sort of safety manual

01:19:44,800 --> 01:19:49,840
for what you are

01:19:45,920 --> 01:19:50,239
deploying um so from that perspective

01:19:49,840 --> 01:19:52,480
and

01:19:50,239 --> 01:19:55,440
that's exactly my point about this uh

01:19:52,480 --> 01:19:58,239
this rust

01:19:55,440 --> 01:19:58,480
this rust uh community processes um is

01:19:58,239 --> 01:20:00,400
that

01:19:58,480 --> 01:20:02,400
we document that the community itself

01:20:00,400 --> 01:20:04,080
documents all these decisions so nicely

01:20:02,400 --> 01:20:05,840
why can't we do the same for our crates

01:20:04,080 --> 01:20:08,719
why can't we do the same for

01:20:05,840 --> 01:20:09,280
uh having a great rationale for what

01:20:08,719 --> 01:20:11,280
we're doing

01:20:09,280 --> 01:20:12,560
inside our crate um i think that would

01:20:11,280 --> 01:20:15,600
benefit not only

01:20:12,560 --> 01:20:17,280
um not only for for the certification

01:20:15,600 --> 01:20:18,000
process but also somebody that is a

01:20:17,280 --> 01:20:19,920
newcomer to

01:20:18,000 --> 01:20:21,199
your and wants to contribute to your

01:20:19,920 --> 01:20:22,000
library you have documented your

01:20:21,199 --> 01:20:23,440
assumptions

01:20:22,000 --> 01:20:25,360
it's easier for them to understand your

01:20:23,440 --> 01:20:29,040
thinking or the purpose of

01:20:25,360 --> 01:20:30,320
your crate so we shouldn't see it as

01:20:29,040 --> 01:20:32,960
only a paper trail

01:20:30,320 --> 01:20:35,120
i do believe that there there there are

01:20:32,960 --> 01:20:36,639
benefits to be ripped out of this of

01:20:35,120 --> 01:20:40,239
such a mentality i mean

01:20:36,639 --> 01:20:40,239
as long as we don't overdo it

01:20:41,360 --> 01:20:46,320
definitely i i do a fair amount of

01:20:44,320 --> 01:20:47,920
safety critical consulting uh and

01:20:46,320 --> 01:20:50,800
particularly i find myself

01:20:47,920 --> 01:20:52,639
talking to a lot of companies that are

01:20:50,800 --> 01:20:54,239
new to safety critical in that they

01:20:52,639 --> 01:20:56,159
typically come from a more

01:20:54,239 --> 01:20:57,520
consumer background or they come from a

01:20:56,159 --> 01:20:58,639
more startup culture

01:20:57,520 --> 01:21:01,520
and that's one of those things that i

01:20:58,639 --> 01:21:03,840
feel like a lot of people take advan

01:21:01,520 --> 01:21:05,360
take for granted if you work in an

01:21:03,840 --> 01:21:07,600
organization that has a 20

01:21:05,360 --> 01:21:09,120
or 30 year safety culture in that

01:21:07,600 --> 01:21:12,159
introducing a safety culture is

01:21:09,120 --> 01:21:13,600
is a huge thing and i don't have it with

01:21:12,159 --> 01:21:14,000
me one of my favorite books is better

01:21:13,600 --> 01:21:17,040
embedded

01:21:14,000 --> 01:21:19,120
system software by uh koopman and he has

01:21:17,040 --> 01:21:20,000
this wonderful concept of just enough

01:21:19,120 --> 01:21:22,480
paper

01:21:20,000 --> 01:21:24,239
which is talking about you should do the

01:21:22,480 --> 01:21:25,440
things that bring you benefit because if

01:21:24,239 --> 01:21:26,400
you're just doing the paperwork to do

01:21:25,440 --> 01:21:28,080
the paperwork

01:21:26,400 --> 01:21:30,000
you're paying the cost twice because

01:21:28,080 --> 01:21:31,360
you're going to develop something bad

01:21:30,000 --> 01:21:33,679
and you'll spend a lot of time doing

01:21:31,360 --> 01:21:36,080
paperwork but the concept of

01:21:33,679 --> 01:21:36,880
do the the paperwork actions that bring

01:21:36,080 --> 01:21:38,960
you value

01:21:36,880 --> 01:21:40,400
and when i sit down with a a an

01:21:38,960 --> 01:21:41,840
engineering organization they're like

01:21:40,400 --> 01:21:43,440
what tools should we use for safety

01:21:41,840 --> 01:21:45,360
critical what what uh

01:21:43,440 --> 01:21:47,199
mizrah checklist do we need for safety

01:21:45,360 --> 01:21:49,600
critical and honestly the first thing

01:21:47,199 --> 01:21:52,400
that i go to them the first time is

01:21:49,600 --> 01:21:54,080
if you only have one week two weeks five

01:21:52,400 --> 01:21:55,840
weeks to improve your process

01:21:54,080 --> 01:21:57,520
sit down and have good requirements

01:21:55,840 --> 01:21:58,639
because that's honestly by far

01:21:57,520 --> 01:22:00,560
one of the things that the safety

01:21:58,639 --> 01:22:03,440
critical standards enforce the most

01:22:00,560 --> 01:22:04,880
and the number one thing that provides

01:22:03,440 --> 01:22:05,840
the most value is sitting down and

01:22:04,880 --> 01:22:08,080
writing down

01:22:05,840 --> 01:22:09,520
what is my system supposed to do what is

01:22:08,080 --> 01:22:11,360
it not supposed to do

01:22:09,520 --> 01:22:12,560
and what are the edge cases around those

01:22:11,360 --> 01:22:14,000
two things and those are one of those

01:22:12,560 --> 01:22:16,000
things i'm not sure how rust

01:22:14,000 --> 01:22:17,840
can always help that i think rust has

01:22:16,000 --> 01:22:19,520
better ways of encoding that into the

01:22:17,840 --> 01:22:20,639
type system and into the programming

01:22:19,520 --> 01:22:23,679
language itself

01:22:20,639 --> 01:22:26,000
but i know i would love to have a better

01:22:23,679 --> 01:22:28,080
traceability tool the ability to say

01:22:26,000 --> 01:22:29,600
these will be requirements for my crate

01:22:28,080 --> 01:22:30,000
and these are the tests that fulfill

01:22:29,600 --> 01:22:31,520
that

01:22:30,000 --> 01:22:32,880
and this is where i implement this

01:22:31,520 --> 01:22:34,560
requirement and things like that i'd

01:22:32,880 --> 01:22:36,639
love to have an open source

01:22:34,560 --> 01:22:38,960
traceability tool that let me write

01:22:36,639 --> 01:22:41,520
software requirements and map them to

01:22:38,960 --> 01:22:42,320
to code because that honestly is one of

01:22:41,520 --> 01:22:44,560
the

01:22:42,320 --> 01:22:46,480
lowest cost and highest that's like the

01:22:44,560 --> 01:22:47,520
first 80 10 thing that i do with every

01:22:46,480 --> 01:22:50,080
engineering team is

01:22:47,520 --> 01:22:51,760
get them to sit down and actually think

01:22:50,080 --> 01:22:54,639
about their design for the first time

01:22:51,760 --> 01:22:56,960
because that makes all the difference

01:22:54,639 --> 01:22:58,560
yeah good requirements is a prerequisite

01:22:56,960 --> 01:23:01,600
for good testing

01:22:58,560 --> 01:23:03,920
and anything that

01:23:01,600 --> 01:23:06,400
makes requirements easier to write and

01:23:03,920 --> 01:23:09,280
in particular tie to code

01:23:06,400 --> 01:23:10,480
you know it's one thing to mark code but

01:23:09,280 --> 01:23:13,040
if we could

01:23:10,480 --> 01:23:14,560
as a safety community develop a more

01:23:13,040 --> 01:23:17,120
structured

01:23:14,560 --> 01:23:19,440
language for requirements you know

01:23:17,120 --> 01:23:21,679
english is a terrible terrible

01:23:19,440 --> 01:23:22,880
spoken language any written human

01:23:21,679 --> 01:23:24,320
language

01:23:22,880 --> 01:23:27,040
that's used for interpersonal

01:23:24,320 --> 01:23:28,000
communication is is generally not a good

01:23:27,040 --> 01:23:31,679
language for

01:23:28,000 --> 01:23:35,600
specification but yet we have to

01:23:31,679 --> 01:23:37,840
tie thoughts written thoughts to code

01:23:35,600 --> 01:23:40,239
and and anything that we can do as a

01:23:37,840 --> 01:23:41,280
community to develop a more structured

01:23:40,239 --> 01:23:42,960
language that's

01:23:41,280 --> 01:23:44,480
still a human language because it's

01:23:42,960 --> 01:23:46,320
human thoughts and things we're building

01:23:44,480 --> 01:23:49,920
for people to use

01:23:46,320 --> 01:23:50,960
uh to code that's something that i think

01:23:49,920 --> 01:23:54,880
would

01:23:50,960 --> 01:23:56,880
you know help help that testing problem

01:23:54,880 --> 01:23:58,480
um you know i've dealt with traceability

01:23:56,880 --> 01:24:01,840
where we marked things

01:23:58,480 --> 01:24:03,360
and looked through uh dependency trees

01:24:01,840 --> 01:24:05,040
of requirements

01:24:03,360 --> 01:24:06,560
and you get some weird side effects when

01:24:05,040 --> 01:24:09,520
all you do is label you're like well

01:24:06,560 --> 01:24:11,040
why does this test here cover that

01:24:09,520 --> 01:24:13,440
requirement there

01:24:11,040 --> 01:24:15,280
oh because it only covers five percent

01:24:13,440 --> 01:24:18,719
of it

01:24:15,280 --> 01:24:21,360
so without having uh some knowledge

01:24:18,719 --> 01:24:24,320
encoded in those labels

01:24:21,360 --> 01:24:24,320
about the function

01:24:24,480 --> 01:24:28,000
that's that's something that that's an

01:24:26,400 --> 01:24:29,120
improvement that we need as a community

01:24:28,000 --> 01:24:30,880
above and beyond

01:24:29,120 --> 01:24:32,639
the actual language that we passed a

01:24:30,880 --> 01:24:34,080
compiler that produces code

01:24:32,639 --> 01:24:36,960
yeah that's like one of the things that

01:24:34,080 --> 01:24:36,960
we did early

01:24:38,880 --> 01:24:41,920
aim higher kids because this dream right

01:24:41,280 --> 01:24:43,920
not that high

01:24:41,920 --> 01:24:45,360
but i'm about to say out loud um but

01:24:43,920 --> 01:24:47,760
what i uh

01:24:45,360 --> 01:24:48,480
it's not like becoming an nba player uh

01:24:47,760 --> 01:24:50,560
we uh

01:24:48,480 --> 01:24:52,000
we created this little library or sort

01:24:50,560 --> 01:24:53,520
of framework internally that we called

01:24:52,000 --> 01:24:54,480
kosher because and you'll make sense in

01:24:53,520 --> 01:24:57,199
a minute why

01:24:54,480 --> 01:24:59,440
um which was uh the ability to create

01:24:57,199 --> 01:25:00,800
custom dialects of gherkin which is like

01:24:59,440 --> 01:25:02,880
the cucumber programming

01:25:00,800 --> 01:25:04,400
not programming like uh feature

01:25:02,880 --> 01:25:07,199
specifications sort of like

01:25:04,400 --> 01:25:08,080
uh some scenario label given some

01:25:07,199 --> 01:25:10,639
precondition

01:25:08,080 --> 01:25:12,719
then something happens or when something

01:25:10,639 --> 01:25:15,360
happens then some result occurs

01:25:12,719 --> 01:25:17,040
and in the in the typical use of

01:25:15,360 --> 01:25:18,960
cucumber and gherkin

01:25:17,040 --> 01:25:20,560
i don't think that they took the concept

01:25:18,960 --> 01:25:22,159
as far as they could have mostly it's

01:25:20,560 --> 01:25:23,440
used as like a

01:25:22,159 --> 01:25:24,880
test runner just to like you know

01:25:23,440 --> 01:25:26,080
pattern match against the string and go

01:25:24,880 --> 01:25:27,760
it's just step through these these

01:25:26,080 --> 01:25:29,360
scenarios and run whatever the test is

01:25:27,760 --> 01:25:32,560
that it matches to

01:25:29,360 --> 01:25:34,000
but that uh you know given when then is

01:25:32,560 --> 01:25:35,840
a very propositional

01:25:34,000 --> 01:25:37,040
like sort of structure of how to

01:25:35,840 --> 01:25:39,440
describe something

01:25:37,040 --> 01:25:40,320
in a way that you can get uh some

01:25:39,440 --> 01:25:43,280
english

01:25:40,320 --> 01:25:44,719
in there alongside of some specific like

01:25:43,280 --> 01:25:45,760
keywords and tokens that have maybe a

01:25:44,719 --> 01:25:47,199
particular meaning

01:25:45,760 --> 01:25:48,800
of course then like what the meaning is

01:25:47,199 --> 01:25:50,480
is a whole separate like corpus of

01:25:48,800 --> 01:25:53,679
challenge to deal with

01:25:50,480 --> 01:25:56,800
um but uh but then we so

01:25:53,679 --> 01:25:58,719
we did things like um making it so that

01:25:56,800 --> 01:26:01,199
we could generate property-based tests

01:25:58,719 --> 01:26:02,560
for and models like from the things that

01:26:01,199 --> 01:26:03,920
we wrote down in the requirements so

01:26:02,560 --> 01:26:05,760
when we were first started

01:26:03,920 --> 01:26:07,199
as a company at oxen we had this big you

01:26:05,760 --> 01:26:09,360
know engagement with a customer

01:26:07,199 --> 01:26:11,280
and we wanted to be able to do what you

01:26:09,360 --> 01:26:12,880
were suggesting is like let's get from

01:26:11,280 --> 01:26:14,159
what they expect because they did not

01:26:12,880 --> 01:26:15,679
have a lot of requirements which was

01:26:14,159 --> 01:26:17,199
kind of a problem for us

01:26:15,679 --> 01:26:18,960
because then we were developed we were

01:26:17,199 --> 01:26:21,120
discovering what their requirements were

01:26:18,960 --> 01:26:22,080
and so um but we would write them all

01:26:21,120 --> 01:26:24,080
down in this sort of

01:26:22,080 --> 01:26:26,000
quasi-machine checkable way we would

01:26:24,080 --> 01:26:27,600
generate the the basis for what the

01:26:26,000 --> 01:26:28,080
property-based test should be like from

01:26:27,600 --> 01:26:30,239
this

01:26:28,080 --> 01:26:31,360
uh specification and then we still had

01:26:30,239 --> 01:26:32,159
to go in and like fill in the

01:26:31,360 --> 01:26:33,679
property-based

01:26:32,159 --> 01:26:36,159
tests and maybe write the generators and

01:26:33,679 --> 01:26:37,679
things like this um but it did give us

01:26:36,159 --> 01:26:39,679
this way to start to

01:26:37,679 --> 01:26:41,679
expand a little further right like how

01:26:39,679 --> 01:26:43,360
far from high level like very loose

01:26:41,679 --> 01:26:46,560
requirements down to

01:26:43,360 --> 01:26:47,679
uh the the evaluation you know you know

01:26:46,560 --> 01:26:49,679
domain in a

01:26:47,679 --> 01:26:51,520
domain exhaustive right property-based

01:26:49,679 --> 01:26:53,120
testing exhaustive like way of this like

01:26:51,520 --> 01:26:54,880
feature that we had to implement

01:26:53,120 --> 01:26:56,239
uh or or even integration level

01:26:54,880 --> 01:26:58,719
capability i mean that

01:26:56,239 --> 01:27:00,320
that's i think that's one of the things

01:26:58,719 --> 01:27:02,560
that's really hard about doing

01:27:00,320 --> 01:27:04,239
what this sort of like requirements down

01:27:02,560 --> 01:27:05,679
i'm going to pause

01:27:04,239 --> 01:27:07,520
real quick nathan because we've got uh

01:27:05,679 --> 01:27:09,600
about seven minutes left and there's two

01:27:07,520 --> 01:27:12,639
questions i definitely want to hit

01:27:09,600 --> 01:27:15,360
um so the next one is uh

01:27:12,639 --> 01:27:15,360
where is it

01:27:16,080 --> 01:27:22,080
i got a i got too excited

01:27:20,080 --> 01:27:23,760
and lost it there it is since rust

01:27:22,080 --> 01:27:25,199
handles seventy percent of the bugs that

01:27:23,760 --> 01:27:26,560
are memory safety related

01:27:25,199 --> 01:27:28,159
how do you imagine safety critical

01:27:26,560 --> 01:27:29,920
systems designers and testers will

01:27:28,159 --> 01:27:31,840
squash the remaining thirty percent of

01:27:29,920 --> 01:27:33,120
bugs that are inherently more domain

01:27:31,840 --> 01:27:36,719
specific

01:27:33,120 --> 01:27:36,719
well look how much time they have now

01:27:38,000 --> 01:27:41,600
you know they've got more time because

01:27:40,239 --> 01:27:42,960
they don't have all these other bugs

01:27:41,600 --> 01:27:44,800
they have to go chase

01:27:42,960 --> 01:27:47,280
shoot we just eliminated 70 percent of

01:27:44,800 --> 01:27:49,360
your bugs now you can spend time writing

01:27:47,280 --> 01:27:51,120
tests that look for other types of

01:27:49,360 --> 01:27:53,880
defects

01:27:51,120 --> 01:27:55,840
or something more time to write new bugs

01:27:53,880 --> 01:27:56,960
[Laughter]

01:27:55,840 --> 01:27:59,120
you mentioned that but that's one of

01:27:56,960 --> 01:28:01,280
those things that really like those

01:27:59,120 --> 01:28:02,400
deep and hard to find integration bugs

01:28:01,280 --> 01:28:04,080
which is usually where those memory

01:28:02,400 --> 01:28:05,679
safety bugs shake out

01:28:04,080 --> 01:28:07,920
those are the worst because they're

01:28:05,679 --> 01:28:10,400
usually not super reproducible

01:28:07,920 --> 01:28:13,199
they're not like oh i found it it's like

01:28:10,400 --> 01:28:16,159
i had to wrangle a debugger for six

01:28:13,199 --> 01:28:18,000
days until i found the trail and then it

01:28:16,159 --> 01:28:19,280
took me six more days to hunt down the

01:28:18,000 --> 01:28:21,280
trail to find

01:28:19,280 --> 01:28:22,480
the one place where someone was one bite

01:28:21,280 --> 01:28:25,679
off and corrupted my

01:28:22,480 --> 01:28:29,120
allocator or corrupted a a look-up table

01:28:25,679 --> 01:28:31,679
some and it really is even if it's 70

01:28:29,120 --> 01:28:32,480
of bugs it probably takes up a huge

01:28:31,679 --> 01:28:35,440
amount of the

01:28:32,480 --> 01:28:35,840
the debugging time that you spend where

01:28:35,440 --> 01:28:37,120
you helped

01:28:35,840 --> 01:28:38,480
the rest of them or your requirements

01:28:37,120 --> 01:28:39,040
were wrong and you just have to go up

01:28:38,480 --> 01:28:40,480
and

01:28:39,040 --> 01:28:42,400
update your state machine or something

01:28:40,480 --> 01:28:43,840
like that and think of all the code

01:28:42,400 --> 01:28:44,639
reviews where you're looking for the

01:28:43,840 --> 01:28:47,040
freeze

01:28:44,639 --> 01:28:47,040
you know

01:28:48,080 --> 01:28:52,320
so that's that's what we'll do that's

01:28:50,239 --> 01:28:52,880
how they'll squash those remaining 30

01:28:52,320 --> 01:28:54,639
percent

01:28:52,880 --> 01:28:56,960
with all the time they're not spending

01:28:54,639 --> 01:29:00,159
debugging all the others

01:28:56,960 --> 01:29:00,960
yeah so i want to end on this question

01:29:00,159 --> 01:29:02,560
because i think it's

01:29:00,960 --> 01:29:04,159
a really good question and i'd love to

01:29:02,560 --> 01:29:05,520
go around the room and hear

01:29:04,159 --> 01:29:07,440
a little bit or a couple of thoughts

01:29:05,520 --> 01:29:10,080
from everyone here uh

01:29:07,440 --> 01:29:10,880
so the last question i want to ask is

01:29:10,080 --> 01:29:13,360
what would

01:29:10,880 --> 01:29:15,520
and can you do now to create the distant

01:29:13,360 --> 01:29:18,560
future we're envisioning right now

01:29:15,520 --> 01:29:21,920
so i want to start with niko on that one

01:29:18,560 --> 01:29:25,760
so if i would start today i would go to

01:29:21,920 --> 01:29:29,040
a couple of my favorite crates heapless

01:29:25,760 --> 01:29:32,320
it's my really favorite crate and

01:29:29,040 --> 01:29:34,239
cortex mrt also and all the dependencies

01:29:32,320 --> 01:29:37,440
they funnel in

01:29:34,239 --> 01:29:40,080
and start having this safety and

01:29:37,440 --> 01:29:40,800
perhaps security because cyber security

01:29:40,080 --> 01:29:44,159
requirements are

01:29:40,800 --> 01:29:45,840
also coming perhaps they are not under a

01:29:44,159 --> 01:29:46,239
safety standard but they will eventually

01:29:45,840 --> 01:29:48,639
become

01:29:46,239 --> 01:29:49,280
the more autonomous cars become this

01:29:48,639 --> 01:29:51,600
will also

01:29:49,280 --> 01:29:52,719
boil down to another similar kind of

01:29:51,600 --> 01:29:55,199
standard eventually

01:29:52,719 --> 01:29:55,840
and um i will apply this safety culture

01:29:55,199 --> 01:29:58,320
i will

01:29:55,840 --> 01:29:59,199
have similar processes like the rust um

01:29:58,320 --> 01:30:02,239
would have

01:29:59,199 --> 01:30:06,080
um there there is research that um

01:30:02,239 --> 01:30:09,199
the extra effort to apply just um

01:30:06,080 --> 01:30:12,400
just this base base practices for

01:30:09,199 --> 01:30:15,199
for safety development it's between

01:30:12,400 --> 01:30:16,320
30 and 70 extra effort i know that it's

01:30:15,199 --> 01:30:19,199
kind of a lot but

01:30:16,320 --> 01:30:19,520
for those crates i would love to have um

01:30:19,199 --> 01:30:21,600
this

01:30:19,520 --> 01:30:23,679
mentality towards safety documenting

01:30:21,600 --> 01:30:26,719
documenting the assumptions

01:30:23,679 --> 01:30:29,760
moving forward and

01:30:26,719 --> 01:30:30,480
eventually we will do it one way or

01:30:29,760 --> 01:30:33,280
another

01:30:30,480 --> 01:30:35,040
volvo or not this will happen because

01:30:33,280 --> 01:30:36,080
rust is a great language and we want to

01:30:35,040 --> 01:30:38,800
move forward with it

01:30:36,080 --> 01:30:39,679
we don't want forever to be tied in a

01:30:38,800 --> 01:30:43,199
sea

01:30:39,679 --> 01:30:44,560
in a sea ecosystem i think

01:30:43,199 --> 01:30:45,920
yeah and i think that's something i know

01:30:44,560 --> 01:30:47,520
the rust embedded working group is

01:30:45,920 --> 01:30:48,000
pushing a lot of those infrastructural

01:30:47,520 --> 01:30:50,320
crates

01:30:48,000 --> 01:30:51,760
towards 1.0 now and i think having

01:30:50,320 --> 01:30:53,440
engineers who are interested in using

01:30:51,760 --> 01:30:54,400
safety critical systems being able to

01:30:53,440 --> 01:30:56,239
weigh in on that

01:30:54,400 --> 01:30:58,000
and help to improve the documentation

01:30:56,239 --> 01:30:59,120
and even the the statement of what the

01:30:58,000 --> 01:31:00,320
expectations are is

01:30:59,120 --> 01:31:02,480
is definitely something that's very

01:31:00,320 --> 01:31:04,239
interesting to get that kind of mindset

01:31:02,480 --> 01:31:05,679
going and trained and start spreading

01:31:04,239 --> 01:31:06,639
that knowledge throughout the embedded

01:31:05,679 --> 01:31:08,960
ecosystem

01:31:06,639 --> 01:31:10,080
before you're taking it to task if you

01:31:08,960 --> 01:31:13,120
know what i mean

01:31:10,080 --> 01:31:15,280
yeah you know and 10 years from now

01:31:13,120 --> 01:31:18,320
the kids that are in high school doing

01:31:15,280 --> 01:31:19,920
first robotics and doing hackathons

01:31:18,320 --> 01:31:22,880
they're going to be the engineers coming

01:31:19,920 --> 01:31:26,560
in using python

01:31:22,880 --> 01:31:29,600
not if we intercede so

01:31:26,560 --> 01:31:32,880
this is uh an nxp or excuse me an st

01:31:29,600 --> 01:31:33,920
nucleo board you can get an arduino load

01:31:32,880 --> 01:31:36,239
for this

01:31:33,920 --> 01:31:37,520
but this is what you plug into the the

01:31:36,239 --> 01:31:41,120
current embedded rust

01:31:37,520 --> 01:31:44,320
project it just works if

01:31:41,120 --> 01:31:46,239
you're an educator or no educators start

01:31:44,320 --> 01:31:47,520
running hackathons in high schools with

01:31:46,239 --> 01:31:50,239
these

01:31:47,520 --> 01:31:52,159
build your first robotics on top of this

01:31:50,239 --> 01:31:54,320
it's ready to use

01:31:52,159 --> 01:31:55,600
write code that's what i think we all

01:31:54,320 --> 01:31:59,120
can do

01:31:55,600 --> 01:31:59,760
to help uh the world use rust more in

01:31:59,120 --> 01:32:03,360
the future

01:31:59,760 --> 01:32:06,159
write code and spread the word also

01:32:03,360 --> 01:32:08,239
yeah i will say last year ferris systems

01:32:06,159 --> 01:32:10,159
sponsored a first robotics team in

01:32:08,239 --> 01:32:10,800
california that used rust for their

01:32:10,159 --> 01:32:12,639
robot

01:32:10,800 --> 01:32:14,639
so there has been at least one first

01:32:12,639 --> 01:32:15,120
robotics robot that is already using

01:32:14,639 --> 01:32:16,960
rust

01:32:15,120 --> 01:32:18,400
so definitely check that out and if

01:32:16,960 --> 01:32:19,360
anyone's watching this that is doing

01:32:18,400 --> 01:32:20,800
first robotics

01:32:19,360 --> 01:32:22,159
this year might be a good year to use

01:32:20,800 --> 01:32:23,920
rust for your robot because i know they

01:32:22,159 --> 01:32:24,560
blazed a lot of trails and they started

01:32:23,920 --> 01:32:26,159
putting

01:32:24,560 --> 01:32:27,760
all of their work on crates i o so

01:32:26,159 --> 01:32:29,360
there's already crates on crates io that

01:32:27,760 --> 01:32:30,239
will help you build first robotics

01:32:29,360 --> 01:32:33,199
robots

01:32:30,239 --> 01:32:34,800
and the hardware is cheap and available

01:32:33,199 --> 01:32:36,800
yeah

01:32:34,800 --> 01:32:37,840
all right jack anything else oh sorry go

01:32:36,800 --> 01:32:41,040
ahead nathan yeah

01:32:37,840 --> 01:32:43,600
pass it to nathan so the so i

01:32:41,040 --> 01:32:44,960
because of my try because i had to move

01:32:43,600 --> 01:32:46,239
mountains of visa

01:32:44,960 --> 01:32:47,360
like i always think about what am i

01:32:46,239 --> 01:32:49,520
going to get how am i going to get an

01:32:47,360 --> 01:32:52,880
institution that is very resistant

01:32:49,520 --> 01:32:54,719
to at multiple levels to do a thing

01:32:52,880 --> 01:32:56,320
that it doesn't necessarily that is

01:32:54,719 --> 01:32:57,520
inoculated against basically

01:32:56,320 --> 01:32:59,040
right like every single one of these

01:32:57,520 --> 01:32:59,920
institutions is like basically has an

01:32:59,040 --> 01:33:01,679
immune system

01:32:59,920 --> 01:33:03,040
to keep stuff like rust from actually

01:33:01,679 --> 01:33:05,840
gaining traction anywhere

01:33:03,040 --> 01:33:06,480
uh social you know political whatever um

01:33:05,840 --> 01:33:08,239
and my

01:33:06,480 --> 01:33:10,480
in addition to going out you know and i

01:33:08,239 --> 01:33:12,960
just getting your oneself familiar with

01:33:10,480 --> 01:33:14,480
um like the the real time for the masses

01:33:12,960 --> 01:33:15,920
project and things like this where you

01:33:14,480 --> 01:33:19,280
kind of get to

01:33:15,920 --> 01:33:21,280
you get to see how you can leverage the

01:33:19,280 --> 01:33:23,679
features of rust to just like

01:33:21,280 --> 01:33:24,560
never arm yourself with the foot guns

01:33:23,679 --> 01:33:26,719
that you would normally

01:33:24,560 --> 01:33:28,320
like lose toes to when you're developing

01:33:26,719 --> 01:33:28,800
uh you know sort of complex embedded

01:33:28,320 --> 01:33:30,880
things

01:33:28,800 --> 01:33:32,239
i think that you know both jack and nico

01:33:30,880 --> 01:33:33,679
are right there um

01:33:32,239 --> 01:33:35,760
in terms of trying to bring it into an

01:33:33,679 --> 01:33:36,080
organization and i'm actually curious

01:33:35,760 --> 01:33:38,320
like

01:33:36,080 --> 01:33:39,280
to hear more specifically from from jack

01:33:38,320 --> 01:33:41,840
and from nico on this

01:33:39,280 --> 01:33:44,719
but my advice and experience has been

01:33:41,840 --> 01:33:48,239
find something stupid nobody cares about

01:33:44,719 --> 01:33:50,159
and trus start there and even if it's in

01:33:48,239 --> 01:33:52,880
you know your like your free time and

01:33:50,159 --> 01:33:54,560
being able to sort of uh as an example

01:33:52,880 --> 01:33:56,400
of showing like what like

01:33:54,560 --> 01:33:58,000
you have to find just find a way where

01:33:56,400 --> 01:33:59,440
there's fewer eyeballs to show them what

01:33:58,000 --> 01:34:02,000
the future can look like

01:33:59,440 --> 01:34:03,440
um and but i mean that's just that's how

01:34:02,000 --> 01:34:04,000
it's worked for me in the past but i'm

01:34:03,440 --> 01:34:06,560
curious like

01:34:04,000 --> 01:34:08,159
you know volvo or green hills having to

01:34:06,560 --> 01:34:09,520
beat a version of that like constantly

01:34:08,159 --> 01:34:11,440
across multiple customers like what that

01:34:09,520 --> 01:34:14,000
looks like for them

01:34:11,440 --> 01:34:14,719
well certainly it it with my green hills

01:34:14,000 --> 01:34:18,159
hat on

01:34:14,719 --> 01:34:22,320
it's incremental it's crawl

01:34:18,159 --> 01:34:24,880
walk run yeah but you know personally

01:34:22,320 --> 01:34:26,080
i'm you know i'm a geek i do hobby

01:34:24,880 --> 01:34:29,120
projects

01:34:26,080 --> 01:34:29,520
i do i long ago stopped doing them in c

01:34:29,120 --> 01:34:31,199
and c

01:34:29,520 --> 01:34:32,719
plus plus because it just wasn't

01:34:31,199 --> 01:34:34,719
efficient

01:34:32,719 --> 01:34:36,000
i've got java code that i play with it's

01:34:34,719 --> 01:34:38,719
15 years old and

01:34:36,000 --> 01:34:40,000
just keeps running and i keep adding to

01:34:38,719 --> 01:34:41,920
it when i want to

01:34:40,000 --> 01:34:43,600
but most of my hobby work over the last

01:34:41,920 --> 01:34:45,280
i'd say three years has been done in

01:34:43,600 --> 01:34:48,480
typescript

01:34:45,280 --> 01:34:49,520
because with node i had a great package

01:34:48,480 --> 01:34:52,480
manager

01:34:49,520 --> 01:34:53,600
typescript is a great language unlike

01:34:52,480 --> 01:34:56,320
python and

01:34:53,600 --> 01:34:58,080
and javascript with without type

01:34:56,320 --> 01:34:58,719
checking where you don't find out you

01:34:58,080 --> 01:35:01,440
have

01:34:58,719 --> 01:35:01,920
a typo until you run the line of code

01:35:01,440 --> 01:35:04,080
which

01:35:01,920 --> 01:35:05,600
maybe 15 or 20 minutes into your machine

01:35:04,080 --> 01:35:09,040
learning run

01:35:05,600 --> 01:35:11,840
you know but now with rust

01:35:09,040 --> 01:35:13,440
you know i've got a great language i've

01:35:11,840 --> 01:35:14,480
got great tools just like with

01:35:13,440 --> 01:35:16,800
typescript

01:35:14,480 --> 01:35:18,800
i've got a great package manager a

01:35:16,800 --> 01:35:21,280
wonderful community

01:35:18,800 --> 01:35:22,560
so it doesn't have to be commercial work

01:35:21,280 --> 01:35:25,199
that you do

01:35:22,560 --> 01:35:26,400
write code all right well i think we're

01:35:25,199 --> 01:35:28,000
going to wrap it up there because we're

01:35:26,400 --> 01:35:28,719
we're getting close to our next talk so

01:35:28,000 --> 01:35:31,040
i want to thank

01:35:28,719 --> 01:35:32,239
all of our panelists today for coming

01:35:31,040 --> 01:35:34,080
out i know it was uh

01:35:32,239 --> 01:35:36,159
we've spread a lot of time zones here

01:35:34,080 --> 01:35:37,920
but i really appreciate all three of you

01:35:36,159 --> 01:35:39,600
um being here today and helping to

01:35:37,920 --> 01:35:42,000
address some of the items moving forward

01:35:39,600 --> 01:35:43,920
for rust for safety critical systems so

01:35:42,000 --> 01:35:45,840
thank you all very much for for being

01:35:43,920 --> 01:35:47,840
here i i can't thank you enough

01:35:45,840 --> 01:35:49,199
yeah all right thanks very much thank

01:35:47,840 --> 01:35:50,960
you james and thanks to my

01:35:49,199 --> 01:35:52,719
my co-panelists it's it's been good

01:35:50,960 --> 01:35:54,000
chatting with uh with you folk

01:35:52,719 --> 01:35:55,920
yeah likewise i want to take this

01:35:54,000 --> 01:35:57,360
offline and keep complaining and

01:35:55,920 --> 01:35:59,119
dreaming

01:35:57,360 --> 01:36:00,400
yeah we i have to get together and have

01:35:59,119 --> 01:36:03,840
a beer sometime

01:36:00,400 --> 01:36:05,920
there you go come on out to berlin okay

01:36:03,840 --> 01:36:08,080
well we have uh luckily the thankfully

01:36:05,920 --> 01:36:10,239
the ferris folks put together a

01:36:08,080 --> 01:36:11,679
hackmd document with all of the or at

01:36:10,239 --> 01:36:13,360
least the first questions that we

01:36:11,679 --> 01:36:14,960
curated i'm going to drop a link to that

01:36:13,360 --> 01:36:17,040
in the chat so that we can kind of

01:36:14,960 --> 01:36:18,880
refresh ourselves on the questions that

01:36:17,040 --> 01:36:20,480
are out there um and i'm going to drop

01:36:18,880 --> 01:36:25,840
off and let us go to break before we

01:36:20,480 --> 01:36:25,840
come back to the next talk

01:36:30,880 --> 01:36:32,960

YouTube URL: https://www.youtube.com/watch?v=g7VVM_t72NE


