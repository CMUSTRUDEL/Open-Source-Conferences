Title: How Embedded Rust can be the next Arduino in 5 easy steps
Publication date: 2020-11-06
Playlist: Oxidize Global 2020
Description: 
	For the past 15 years, Arduino has been the gold standard for introducing people to Embedded Systems and programming. This talk outlines 5 steps that Rust can do to increase “market share” in the hobbyist sector.

Some of these steps are already in progress and will require little extra effort. Others are not obvious and will require resources to be allocated to them. These are not traditionally core to the Rust project and would require alternative processes to be set up.

By doing this work, however, we can increase the visibility of Rust in the Embedded space and have more Rustaceans trying to increase software quality in a fast growing sector.
Captions: 
	00:00:01,770 --> 00:00:30,839
[Music]

00:00:32,320 --> 00:00:37,200
hi tristan

00:00:33,760 --> 00:00:39,640
hello tristan is a repeat speaker at

00:00:37,200 --> 00:00:43,280
oxidize he's been speaking at oxidized

00:00:39,640 --> 00:00:46,559
2019 i think it's been easier

00:00:43,280 --> 00:00:48,640
getting here this time and i'm

00:00:46,559 --> 00:00:50,000
very happy to see you what tristan has

00:00:48,640 --> 00:00:52,879
to say about rust

00:00:50,000 --> 00:00:52,879
and arduinos

00:00:54,719 --> 00:00:58,000
hellos yes so today i'm going to be

00:00:57,280 --> 00:01:01,039
talking about

00:00:58,000 --> 00:01:03,680
how i think rust can be the next arduino

00:01:01,039 --> 00:01:04,799
in approximately five easy steps uh

00:01:03,680 --> 00:01:06,240
although

00:01:04,799 --> 00:01:12,240
counting these steps hasn't been done

00:01:06,240 --> 00:01:14,320
yet so keep your own count

00:01:12,240 --> 00:01:17,119
uh so i've been a software engineer for

00:01:14,320 --> 00:01:19,759
eight years i have a number of hobby

00:01:17,119 --> 00:01:21,840
uh electronics projects on the go i got

00:01:19,759 --> 00:01:25,119
my first arduino as a birthday present

00:01:21,840 --> 00:01:28,159
uh back in 2009 it's an original

00:01:25,119 --> 00:01:30,720
arduino mega and

00:01:28,159 --> 00:01:32,000
i'm looking to move into rust full time

00:01:30,720 --> 00:01:35,520
specializing in

00:01:32,000 --> 00:01:39,200
embedded iot prototyping

00:01:35,520 --> 00:01:40,720
so why do i think why should rust become

00:01:39,200 --> 00:01:43,920
the next arduino

00:01:40,720 --> 00:01:45,840
uh so the first thing is to

00:01:43,920 --> 00:01:47,200
expand the influence of rust in

00:01:45,840 --> 00:01:49,280
programming generally

00:01:47,200 --> 00:01:50,640
a couple of the questions already have

00:01:49,280 --> 00:01:52,640
outlined how

00:01:50,640 --> 00:01:53,680
getting students in it sort of at the

00:01:52,640 --> 00:01:56,479
ground level

00:01:53,680 --> 00:01:58,000
will increase throughput uh increase the

00:01:56,479 --> 00:02:01,119
usage of rust in

00:01:58,000 --> 00:02:03,200
industrial sort of applications uh

00:02:01,119 --> 00:02:06,079
also increase the chances that newcomers

00:02:03,200 --> 00:02:09,200
to embedded systems do things correctly

00:02:06,079 --> 00:02:11,440
uh everyone knows the pitfalls of

00:02:09,200 --> 00:02:12,560
trying to have a register do two things

00:02:11,440 --> 00:02:14,480
at once

00:02:12,560 --> 00:02:16,800
uh but that's only something you can

00:02:14,480 --> 00:02:18,959
sort of get with experience

00:02:16,800 --> 00:02:20,480
uh also decrease the frustration with

00:02:18,959 --> 00:02:23,599
embedded systems

00:02:20,480 --> 00:02:27,520
um so florian tweeted yesterday

00:02:23,599 --> 00:02:28,959
um how all their uh all their workshops

00:02:27,520 --> 00:02:30,959
just worked

00:02:28,959 --> 00:02:32,800
um and that is that is definitely a

00:02:30,959 --> 00:02:34,640
great feature of rust i experienced it

00:02:32,800 --> 00:02:35,360
last year when i was doing the workshop

00:02:34,640 --> 00:02:38,640
it's like

00:02:35,360 --> 00:02:41,120
wow this is really simple uh so

00:02:38,640 --> 00:02:41,920
bugs are caught early uh which is always

00:02:41,120 --> 00:02:43,519
good um

00:02:41,920 --> 00:02:45,200
any bug that doesn't make it onto the

00:02:43,519 --> 00:02:47,760
board uh

00:02:45,200 --> 00:02:50,239
reduces the chance of going what the

00:02:47,760 --> 00:02:54,560
hell is going on here

00:02:50,239 --> 00:02:55,680
a lot of things just work so

00:02:54,560 --> 00:02:58,159
particularly when you're looking at

00:02:55,680 --> 00:03:02,400
abstractions and different peripherals

00:02:58,159 --> 00:03:02,400
making sure that all those work together

00:03:02,560 --> 00:03:07,280
is very important and the perennial

00:03:05,519 --> 00:03:08,400
example that i come across when i'm

00:03:07,280 --> 00:03:11,120
using arduino is

00:03:08,400 --> 00:03:12,800
ethernet like there's a lot of ethernet

00:03:11,120 --> 00:03:14,319
libraries and who knows which one

00:03:12,800 --> 00:03:17,440
actually works for

00:03:14,319 --> 00:03:19,280
your particular board and better testing

00:03:17,440 --> 00:03:21,760
regimes so

00:03:19,280 --> 00:03:23,040
um we do have cargo test there were some

00:03:21,760 --> 00:03:25,760
limitations brought up

00:03:23,040 --> 00:03:27,599
earlier today about how that might not

00:03:25,760 --> 00:03:30,959
be ideal but i'm

00:03:27,599 --> 00:03:33,519
certain we can sort those out

00:03:30,959 --> 00:03:34,239
uh it's easier to sort of just hack

00:03:33,519 --> 00:03:37,360
together

00:03:34,239 --> 00:03:38,879
um you don't really need to know what

00:03:37,360 --> 00:03:39,440
you're going to be producing before you

00:03:38,879 --> 00:03:42,720
start

00:03:39,440 --> 00:03:43,920
um in in reddit there was a sort of a

00:03:42,720 --> 00:03:45,040
thread about

00:03:43,920 --> 00:03:47,599
talking about compiler driven

00:03:45,040 --> 00:03:50,720
development and that's very

00:03:47,599 --> 00:03:52,879
very true um

00:03:50,720 --> 00:03:54,400
i use i've started using booleans as my

00:03:52,879 --> 00:03:55,439
type when i don't know what the type is

00:03:54,400 --> 00:03:59,040
and the compiler

00:03:55,439 --> 00:04:03,360
will tell me and finally

00:03:59,040 --> 00:04:06,080
it's a lot easier um or a lot

00:04:03,360 --> 00:04:07,280
a lot better to go from proof of concept

00:04:06,080 --> 00:04:10,400
to production

00:04:07,280 --> 00:04:13,360
using rust um again they're

00:04:10,400 --> 00:04:14,959
moving to an a and moving to a

00:04:13,360 --> 00:04:16,239
professional board is perhaps a little

00:04:14,959 --> 00:04:17,919
bit harder but

00:04:16,239 --> 00:04:21,280
from the software point of view there's

00:04:17,919 --> 00:04:21,280
actually not that much different

00:04:21,519 --> 00:04:25,680
mainly around error handling and dealing

00:04:23,360 --> 00:04:28,320
with edge cases

00:04:25,680 --> 00:04:29,280
so there are three important projects in

00:04:28,320 --> 00:04:31,440
the

00:04:29,280 --> 00:04:32,400
hobby firmware sort of sector that i

00:04:31,440 --> 00:04:35,759
want to talk about

00:04:32,400 --> 00:04:36,479
obviously the first is arduino it's very

00:04:35,759 --> 00:04:39,040
popular

00:04:36,479 --> 00:04:40,960
it's used by a lot of beginners there's

00:04:39,040 --> 00:04:44,479
a lot of educational resources

00:04:40,960 --> 00:04:47,759
courses uh trainings all that jazz

00:04:44,479 --> 00:04:49,520
uh and they do hardware firmware they

00:04:47,759 --> 00:04:52,720
have their own firmware libraries

00:04:49,520 --> 00:04:53,280
they have they have their own ide uh

00:04:52,720 --> 00:04:56,639
second

00:04:53,280 --> 00:04:58,960
is embed by arm so it's developed by um

00:04:56,639 --> 00:05:00,720
it has more educa it has educational

00:04:58,960 --> 00:05:02,639
resources that are more tailored towards

00:05:00,720 --> 00:05:04,639
the professional sport aside

00:05:02,639 --> 00:05:06,400
uh they too also have their own firmware

00:05:04,639 --> 00:05:10,639
library and they have an online

00:05:06,400 --> 00:05:12,960
id and it is in fact compatible with gcc

00:05:10,639 --> 00:05:14,320
so that helps avoid vendor locking and

00:05:12,960 --> 00:05:17,440
their hardware

00:05:14,320 --> 00:05:20,160
is uh done by other companies

00:05:17,440 --> 00:05:22,479
so they those other companies have the

00:05:20,160 --> 00:05:25,039
embed logo on their board

00:05:22,479 --> 00:05:26,080
finally we have raspberry pi it's

00:05:25,039 --> 00:05:29,039
primarily a

00:05:26,080 --> 00:05:29,840
single computer running uh linux on it

00:05:29,039 --> 00:05:32,400
and they're

00:05:29,840 --> 00:05:34,240
more focused on the os development they

00:05:32,400 --> 00:05:34,639
have a lot of educational resources

00:05:34,240 --> 00:05:38,160
that's

00:05:34,639 --> 00:05:41,199
devoted a lot to uh children and

00:05:38,160 --> 00:05:42,240
younger people but i included them

00:05:41,199 --> 00:05:42,960
because they actually have a very

00:05:42,240 --> 00:05:44,880
interesting

00:05:42,960 --> 00:05:47,680
company structure which i'll get to

00:05:44,880 --> 00:05:52,240
towards the end

00:05:47,680 --> 00:05:55,039
so the story of embedded uh so far um

00:05:52,240 --> 00:05:57,199
in in the hobby sort of area i'm making

00:05:55,039 --> 00:05:58,880
a very sweeping assumption that embedded

00:05:57,199 --> 00:06:01,520
rust is more of an ecosystem

00:05:58,880 --> 00:06:02,160
rather than just a programming language

00:06:01,520 --> 00:06:03,840
uh i

00:06:02,160 --> 00:06:06,560
there's a lot of evidence to support

00:06:03,840 --> 00:06:09,520
this um in my experience at least

00:06:06,560 --> 00:06:11,759
at the moment the uh microcontrollers is

00:06:09,520 --> 00:06:13,360
generally limited to arm and risk five

00:06:11,759 --> 00:06:17,199
although avr support

00:06:13,360 --> 00:06:19,280
has is actually now uh in stable

00:06:17,199 --> 00:06:21,440
uh current guides are good enough for an

00:06:19,280 --> 00:06:23,520
intermediate user to get going

00:06:21,440 --> 00:06:25,199
but would probably struggle for someone

00:06:23,520 --> 00:06:28,240
completely new to embedded

00:06:25,199 --> 00:06:31,039
systems board support is

00:06:28,240 --> 00:06:31,919
a bit mixed and a good experience is

00:06:31,039 --> 00:06:34,000
chosen by

00:06:31,919 --> 00:06:35,759
the a good experience is defined by

00:06:34,000 --> 00:06:39,759
which board is chosen

00:06:35,759 --> 00:06:43,039
uh so the uh dwm

00:06:39,759 --> 00:06:45,280
1001 uh which was used last year has a

00:06:43,039 --> 00:06:48,560
pretty good board support crate

00:06:45,280 --> 00:06:51,599
uh something more like the um

00:06:48,560 --> 00:06:52,560
the atmel's sam d's uh are a little bit

00:06:51,599 --> 00:06:55,199
more limited

00:06:52,560 --> 00:06:56,479
in their board support uh and you sort

00:06:55,199 --> 00:06:58,319
of need to have a

00:06:56,479 --> 00:06:59,680
general understanding of what a

00:06:58,319 --> 00:07:03,199
peripheral is

00:06:59,680 --> 00:07:06,560
um in order to really have a good go at

00:07:03,199 --> 00:07:09,840
at embedded rust so

00:07:06,560 --> 00:07:10,880
first first cab off the rank uh is ide

00:07:09,840 --> 00:07:15,440
support

00:07:10,880 --> 00:07:18,240
so the preferred ide for developing rust

00:07:15,440 --> 00:07:19,599
probably does need to be free i know

00:07:18,240 --> 00:07:21,759
there are some good stuff with the

00:07:19,599 --> 00:07:24,000
jetbrains ides

00:07:21,759 --> 00:07:25,120
um but when we're talking embedded when

00:07:24,000 --> 00:07:28,479
we're talking hobby

00:07:25,120 --> 00:07:30,800
it's all about price so no cost is

00:07:28,479 --> 00:07:34,000
always going to win out over some

00:07:30,800 --> 00:07:34,880
a via visual studio code is is very good

00:07:34,000 --> 00:07:36,560
but the gui

00:07:34,880 --> 00:07:38,080
can be a little bit tricky to use you

00:07:36,560 --> 00:07:39,039
sort of need to understand the command

00:07:38,080 --> 00:07:42,240
palette

00:07:39,039 --> 00:07:45,039
and look up terminal support

00:07:42,240 --> 00:07:45,599
the arduino ide is not actually that

00:07:45,039 --> 00:07:49,120
very good

00:07:45,599 --> 00:07:51,039
it's written in java um

00:07:49,120 --> 00:07:52,960
and that has sort of led to some

00:07:51,039 --> 00:07:54,080
anachronisms particularly in the error

00:07:52,960 --> 00:07:57,759
handling

00:07:54,080 --> 00:08:00,080
the messages are cryptic at best

00:07:57,759 --> 00:08:01,199
nothing like programming in something c

00:08:00,080 --> 00:08:04,479
like and getting a

00:08:01,199 --> 00:08:06,720
java error however it does have a good

00:08:04,479 --> 00:08:07,440
uh library manager for a c or c plus

00:08:06,720 --> 00:08:10,479
plus based

00:08:07,440 --> 00:08:12,319
uh system and it does in fact have a

00:08:10,479 --> 00:08:13,120
good board manager so you just drop down

00:08:12,319 --> 00:08:15,599
the menu

00:08:13,120 --> 00:08:17,440
and you can select what board is what

00:08:15,599 --> 00:08:19,919
board you're programming

00:08:17,440 --> 00:08:21,759
so the required improvements on the rust

00:08:19,919 --> 00:08:23,759
side so

00:08:21,759 --> 00:08:25,039
we need to sort of have board selection

00:08:23,759 --> 00:08:27,440
support

00:08:25,039 --> 00:08:30,319
or automatic detection and from what

00:08:27,440 --> 00:08:32,800
i've understand probe irs

00:08:30,319 --> 00:08:35,120
developing some of the developing data

00:08:32,800 --> 00:08:38,240
to sort of fit this niche application is

00:08:35,120 --> 00:08:41,200
is probably a good idea adding clear

00:08:38,240 --> 00:08:43,279
build and program buttons uh

00:08:41,200 --> 00:08:44,480
i haven't written an add-on for visual

00:08:43,279 --> 00:08:47,120
studio code but

00:08:44,480 --> 00:08:48,560
i'm sure with microsoft support we can

00:08:47,120 --> 00:08:53,360
add that in

00:08:48,560 --> 00:08:55,600
uh a crate management gui a nice to have

00:08:53,360 --> 00:08:57,279
many many other users of rust probably

00:08:55,600 --> 00:08:59,760
want that as well

00:08:57,279 --> 00:09:00,560
uh a good thing i found with the arduino

00:08:59,760 --> 00:09:02,080
ide

00:09:00,560 --> 00:09:04,160
serial monitor particularly when you're

00:09:02,080 --> 00:09:06,240
using a serial port to program it

00:09:04,160 --> 00:09:08,000
uh having them the serial monitor able

00:09:06,240 --> 00:09:12,480
to automatically switch between the two

00:09:08,000 --> 00:09:16,000
is very handy so memory management

00:09:12,480 --> 00:09:19,680
so many base projects

00:09:16,000 --> 00:09:19,920
include a memory.x file having some sort

00:09:19,680 --> 00:09:22,160
of

00:09:19,920 --> 00:09:23,200
standardization or automation or gui for

00:09:22,160 --> 00:09:26,480
that

00:09:23,200 --> 00:09:27,360
is pretty important and also being able

00:09:26,480 --> 00:09:30,240
to burn on

00:09:27,360 --> 00:09:32,080
particular boot loaders so there aren't

00:09:30,240 --> 00:09:35,279
that many bootloaders

00:09:32,080 --> 00:09:38,000
in the embedded rust space yet but

00:09:35,279 --> 00:09:39,839
hopefully there will be soon um and

00:09:38,000 --> 00:09:41,279
being able to

00:09:39,839 --> 00:09:44,480
build and put that onto the board

00:09:41,279 --> 00:09:44,480
automatically is a good thing

00:09:45,760 --> 00:09:50,720
so on crate support uh

00:09:48,800 --> 00:09:51,839
basically we need more board support

00:09:50,720 --> 00:09:54,959
crates um

00:09:51,839 --> 00:09:56,000
up to a fairly high level uh so a lot of

00:09:54,959 --> 00:09:58,160
processors have

00:09:56,000 --> 00:10:00,399
uh pack and howl crates getting them

00:09:58,160 --> 00:10:02,880
that extra step to board support is

00:10:00,399 --> 00:10:04,160
is a good thing uh there needs to be

00:10:02,880 --> 00:10:06,880
more higher level

00:10:04,160 --> 00:10:08,399
traits like the accelerometer crate uh

00:10:06,880 --> 00:10:11,600
there's the storage

00:10:08,399 --> 00:10:13,200
things like storage uh communications uh

00:10:11,600 --> 00:10:16,079
and other sensors like pressure

00:10:13,200 --> 00:10:18,240
or humidity or temperature i'm path

00:10:16,079 --> 00:10:20,959
thinking of working on storage

00:10:18,240 --> 00:10:22,640
the storage um crate uh during the impul

00:10:20,959 --> 00:10:25,680
day so hit me up if you want to

00:10:22,640 --> 00:10:28,720
talk about that uh a method

00:10:25,680 --> 00:10:30,240
to transfer arduino libraries into rust

00:10:28,720 --> 00:10:32,240
crates i've done this

00:10:30,240 --> 00:10:34,640
a couple times now for my own projects

00:10:32,240 --> 00:10:37,680
and well it's not necessarily

00:10:34,640 --> 00:10:39,440
hard it's also not that much fun it

00:10:37,680 --> 00:10:42,160
involves switching between looking at

00:10:39,440 --> 00:10:45,040
code and looking at data sheets

00:10:42,160 --> 00:10:46,079
which takes a bit of time and probably

00:10:45,040 --> 00:10:49,440
one of the bigger things

00:10:46,079 --> 00:10:52,000
is more examples of using

00:10:49,440 --> 00:10:54,320
crates and peripherals to build a actual

00:10:52,000 --> 00:10:56,880
project

00:10:54,320 --> 00:10:59,120
so there's a lot of way a lot of

00:10:56,880 --> 00:11:01,279
peripherals come with

00:10:59,120 --> 00:11:03,440
arduino libraries and have example

00:11:01,279 --> 00:11:05,839
projects so we need to be able to

00:11:03,440 --> 00:11:07,440
expand on that for the embedded rust

00:11:05,839 --> 00:11:10,800
side

00:11:07,440 --> 00:11:13,200
and it all comes up every now and again

00:11:10,800 --> 00:11:15,279
but a mechanism for showing that one

00:11:13,200 --> 00:11:18,640
particular crate is better than

00:11:15,279 --> 00:11:20,640
another at the moment embedded hal is

00:11:18,640 --> 00:11:22,399
is the one that everyone goes to but at

00:11:20,640 --> 00:11:24,800
some point in time

00:11:22,399 --> 00:11:26,160
it may get deprecated or it may become

00:11:24,800 --> 00:11:28,399
unmaintained

00:11:26,160 --> 00:11:30,160
we need there needs to be a mechanism of

00:11:28,399 --> 00:11:32,800
some sort to indicate

00:11:30,160 --> 00:11:35,040
don't use embedded tail anymore you use

00:11:32,800 --> 00:11:38,240
embedded health 2.0

00:11:35,040 --> 00:11:38,640
um so i don't have a solution for it i'm

00:11:38,240 --> 00:11:40,959
just

00:11:38,640 --> 00:11:43,040
saying there probably does need to be

00:11:40,959 --> 00:11:46,480
one

00:11:43,040 --> 00:11:47,760
so edgy there are a lot of material

00:11:46,480 --> 00:11:49,600
education and training

00:11:47,760 --> 00:11:50,959
around for arduino there's online

00:11:49,600 --> 00:11:53,120
tutorials

00:11:50,959 --> 00:11:54,800
uh there's youtube channels there's

00:11:53,120 --> 00:11:57,360
books there's courses

00:11:54,800 --> 00:11:58,240
uh they're made by a wide variety of

00:11:57,360 --> 00:12:00,880
people

00:11:58,240 --> 00:12:02,399
for a wide variety of audiences so from

00:12:00,880 --> 00:12:05,120
kids to

00:12:02,399 --> 00:12:07,519
javascript developers to people not just

00:12:05,120 --> 00:12:09,600
wanting to try new things

00:12:07,519 --> 00:12:11,680
and they're made by a wide variety of

00:12:09,600 --> 00:12:13,440
and their the difference in quality is

00:12:11,680 --> 00:12:16,639
actually a pretty good thing

00:12:13,440 --> 00:12:18,959
um that's it means that there's lots of

00:12:16,639 --> 00:12:22,079
variety for everyone to use and if

00:12:18,959 --> 00:12:23,839
one particular one one particular guide

00:12:22,079 --> 00:12:25,279
goes into too much detail for one

00:12:23,839 --> 00:12:27,120
particular person well then there's

00:12:25,279 --> 00:12:29,040
probably a number guide

00:12:27,120 --> 00:12:30,639
that's a little bit higher up and a lot

00:12:29,040 --> 00:12:32,079
bit less detailed but a lot easier to

00:12:30,639 --> 00:12:33,760
follow

00:12:32,079 --> 00:12:35,600
and again a lot of peripherals have

00:12:33,760 --> 00:12:38,800
examples

00:12:35,600 --> 00:12:42,000
and guides about them so we need to

00:12:38,800 --> 00:12:44,800
be making these our own guides for this

00:12:42,000 --> 00:12:46,639
and trying to replicate this in embedded

00:12:44,800 --> 00:12:49,600
rust

00:12:46,639 --> 00:12:51,519
so we also need to be able to market

00:12:49,600 --> 00:12:53,680
embedded rust

00:12:51,519 --> 00:12:55,040
so arduino has a very catchy and

00:12:53,680 --> 00:12:57,839
versatile name

00:12:55,040 --> 00:13:00,000
i suspect any italian speakers uh

00:12:57,839 --> 00:13:03,600
probably hate the arduino

00:13:00,000 --> 00:13:05,040
suffix that is used everywhere so a full

00:13:03,600 --> 00:13:07,760
set of marketing collateral is going to

00:13:05,040 --> 00:13:09,200
be needed including logos style guides

00:13:07,760 --> 00:13:10,720
all that stuff

00:13:09,200 --> 00:13:12,240
uh and we also need to do a bit of

00:13:10,720 --> 00:13:13,600
research about what target

00:13:12,240 --> 00:13:15,519
what markets we want to target

00:13:13,600 --> 00:13:18,800
specifically within

00:13:15,519 --> 00:13:21,360
um within the hobby area are we looking

00:13:18,800 --> 00:13:24,240
more at the the established ones or are

00:13:21,360 --> 00:13:27,040
we looking at complete newcomers

00:13:24,240 --> 00:13:27,680
and we also when it comes time we also

00:13:27,040 --> 00:13:30,000
need to

00:13:27,680 --> 00:13:32,560
launch basically launch the brands to

00:13:30,000 --> 00:13:33,360
various blogs and other content creators

00:13:32,560 --> 00:13:35,440
so

00:13:33,360 --> 00:13:36,560
basically making getting it out there

00:13:35,440 --> 00:13:40,399
that yep

00:13:36,560 --> 00:13:42,480
embedded rust is now very very much

00:13:40,399 --> 00:13:43,440
should be used uh in the in the hobby

00:13:42,480 --> 00:13:45,040
area

00:13:43,440 --> 00:13:47,040
uh so i have a little bit of a

00:13:45,040 --> 00:13:50,720
suggestion for a name

00:13:47,040 --> 00:13:52,720
uh oxidize

00:13:50,720 --> 00:13:55,839
there are a couple reasons for this it's

00:13:52,720 --> 00:13:57,360
already associated with embedded rust

00:13:55,839 --> 00:13:59,839
it's actually a pretty good name in and

00:13:57,360 --> 00:14:02,160
of itself and it's workable as a

00:13:59,839 --> 00:14:04,000
as a product family name a lot of the

00:14:02,160 --> 00:14:05,839
collateral that would need to be created

00:14:04,000 --> 00:14:08,560
actually already exists

00:14:05,839 --> 00:14:09,279
uh but if for some re if we don't want

00:14:08,560 --> 00:14:11,040
to choose that

00:14:09,279 --> 00:14:13,279
something else i've certainly not wedded

00:14:11,040 --> 00:14:14,959
to this idea it's um

00:14:13,279 --> 00:14:17,440
and you know we do obviously need to

00:14:14,959 --> 00:14:21,279
talk to fairer systems about that

00:14:17,440 --> 00:14:24,160
since they have all that detail so

00:14:21,279 --> 00:14:24,959
next up uh is hardware because obviously

00:14:24,160 --> 00:14:26,720
arduino

00:14:24,959 --> 00:14:28,399
is as much a hardware company as a

00:14:26,720 --> 00:14:31,040
software one

00:14:28,399 --> 00:14:32,720
so if we do decide to develop hardware

00:14:31,040 --> 00:14:33,839
then it needs to become tier one

00:14:32,720 --> 00:14:36,240
supported

00:14:33,839 --> 00:14:37,680
uh we can't se you can't really sell

00:14:36,240 --> 00:14:40,880
something without having

00:14:37,680 --> 00:14:42,839
the full support of the compiler uh it

00:14:40,880 --> 00:14:44,320
will need a comprehensive board support

00:14:42,839 --> 00:14:47,839
crate

00:14:44,320 --> 00:14:51,199
with examples and training resources

00:14:47,839 --> 00:14:54,320
uh and it price is probably around

00:14:51,199 --> 00:14:56,880
25 to 45 us dollars depending on what

00:14:54,320 --> 00:14:58,800
peripherals are included

00:14:56,880 --> 00:15:00,639
things like wireless communications it's

00:14:58,800 --> 00:15:04,639
a nice to have but it's not

00:15:00,639 --> 00:15:06,000
critical yet uh and if we do decide to

00:15:04,639 --> 00:15:09,120
include communications

00:15:06,000 --> 00:15:10,880
then a fairly complete and comprehensive

00:15:09,120 --> 00:15:13,519
wireless tax going to be needed that

00:15:10,880 --> 00:15:16,959
actually implements that

00:15:13,519 --> 00:15:18,480
so if we we can it is perfectly

00:15:16,959 --> 00:15:21,680
reasonable to outsource this

00:15:18,480 --> 00:15:23,839
um with to an existing supplier uh like

00:15:21,680 --> 00:15:25,680
sparkfun or adafruit

00:15:23,839 --> 00:15:28,160
but the branding does need to be clear

00:15:25,680 --> 00:15:30,800
so it needs to be like um

00:15:28,160 --> 00:15:32,240
embedded rust on spark fun artemis or

00:15:30,800 --> 00:15:34,320
something like that

00:15:32,240 --> 00:15:35,600
uh so obviously the artemis the feather

00:15:34,320 --> 00:15:37,680
and the tinses they all have

00:15:35,600 --> 00:15:39,360
different ideas about what makes a good

00:15:37,680 --> 00:15:41,920
development board

00:15:39,360 --> 00:15:43,199
tinsey is definitely raw processing

00:15:41,920 --> 00:15:44,800
power

00:15:43,199 --> 00:15:47,680
whereas feather is perhaps a little bit

00:15:44,800 --> 00:15:51,360
more on the prototyping side

00:15:47,680 --> 00:15:53,519
um and i guess the in any sort of

00:15:51,360 --> 00:15:56,000
hardware will need

00:15:53,519 --> 00:15:58,079
a strong strong backing to deal with

00:15:56,000 --> 00:16:00,399
that

00:15:58,079 --> 00:16:03,120
so the big elephant in the room of

00:16:00,399 --> 00:16:06,320
course is avr support

00:16:03,120 --> 00:16:06,560
so arduino started out with avr but they

00:16:06,320 --> 00:16:09,680
are

00:16:06,560 --> 00:16:13,759
transitioning to r uh the last avr was

00:16:09,680 --> 00:16:16,800
board that they've made is about 2013

00:16:13,759 --> 00:16:18,800
uh which is actually seven years ago a

00:16:16,800 --> 00:16:22,000
lot of the cheap clones use avr

00:16:18,800 --> 00:16:26,399
so going back to the board price of 25

00:16:22,000 --> 00:16:28,880
us dollars an avr clone can be had for

00:16:26,399 --> 00:16:29,600
less than two so that's a very big price

00:16:28,880 --> 00:16:33,519
difference

00:16:29,600 --> 00:16:37,120
to be made up uh so avr

00:16:33,519 --> 00:16:40,320
now has tier three rust support

00:16:37,120 --> 00:16:43,759
um so that may

00:16:40,320 --> 00:16:46,639
that may be enough uh having our own

00:16:43,759 --> 00:16:48,000
board for embedded rust would mitigate

00:16:46,639 --> 00:16:50,560
that issue

00:16:48,000 --> 00:16:52,480
um a fair fair amount it's like we can

00:16:50,560 --> 00:16:54,639
say this is the best board to use

00:16:52,480 --> 00:16:56,079
you can use an avr board but it's not

00:16:54,639 --> 00:16:58,079
going to be as good

00:16:56,079 --> 00:17:00,000
i guess my main takeaway is that we need

00:16:58,079 --> 00:17:03,040
to manage expectations

00:17:00,000 --> 00:17:06,160
uh in this respect um we can't

00:17:03,040 --> 00:17:08,480
if if we're not going to boost up

00:17:06,160 --> 00:17:10,400
um avr to tier 2 then we need to say

00:17:08,480 --> 00:17:14,079
yeah you can use it you can try it but

00:17:10,400 --> 00:17:14,079
it's definitely not guaranteed to work

00:17:14,559 --> 00:17:18,959
so everything together a lot of these

00:17:17,199 --> 00:17:22,640
things will actually probably happen

00:17:18,959 --> 00:17:26,079
independently um of any push from

00:17:22,640 --> 00:17:28,960
the embedded side of rust uh so the id

00:17:26,079 --> 00:17:32,080
and tooling stuff is a lot of that will

00:17:28,960 --> 00:17:35,120
probably happen naturally um

00:17:32,080 --> 00:17:36,640
without too much effort uh the guides

00:17:35,120 --> 00:17:38,160
and tutorials might require a bit of

00:17:36,640 --> 00:17:39,520
encouragement get people out there

00:17:38,160 --> 00:17:42,960
writing guides

00:17:39,520 --> 00:17:44,880
um making their own courses

00:17:42,960 --> 00:17:46,480
uh using proof rules and writing up

00:17:44,880 --> 00:17:48,080
their own blog

00:17:46,480 --> 00:17:49,520
the marketing and branding can sort of

00:17:48,080 --> 00:17:52,799
start out

00:17:49,520 --> 00:17:55,679
simple and ramp up sort of once um

00:17:52,799 --> 00:17:56,720
once that path is decided upon so we

00:17:55,679 --> 00:17:59,679
don't need to go

00:17:56,720 --> 00:18:01,520
everything all at once hardware

00:17:59,679 --> 00:18:02,400
development is obviously a lot harder to

00:18:01,520 --> 00:18:05,919
do

00:18:02,400 --> 00:18:08,320
and needs a formal structure to succeed

00:18:05,919 --> 00:18:09,120
so there's design manufacturer

00:18:08,320 --> 00:18:12,320
distribution

00:18:09,120 --> 00:18:15,200
specific software support and lots of

00:18:12,320 --> 00:18:17,679
guides and examples to deal with that

00:18:15,200 --> 00:18:19,039
so making sure that training exists for

00:18:17,679 --> 00:18:21,520
all that stuff

00:18:19,039 --> 00:18:22,880
which obviously means that there needs

00:18:21,520 --> 00:18:26,320
to be some formal

00:18:22,880 --> 00:18:28,720
company running this so

00:18:26,320 --> 00:18:31,039
which brings me to the rust foundation

00:18:28,720 --> 00:18:33,120
so the raspberry pi foundation exists to

00:18:31,039 --> 00:18:34,640
promote the usage of computing around

00:18:33,120 --> 00:18:37,919
the world

00:18:34,640 --> 00:18:40,400
um and and training up people in that

00:18:37,919 --> 00:18:42,000
and raspberry pi inc basically develops

00:18:40,400 --> 00:18:44,799
and sells raspberry pi boards

00:18:42,000 --> 00:18:46,400
to both enable and fund the foundation's

00:18:44,799 --> 00:18:49,919
goals

00:18:46,400 --> 00:18:52,720
there is currently talk i'm not privy to

00:18:49,919 --> 00:18:56,000
how advanced that is

00:18:52,720 --> 00:18:57,600
but i rust the talk that i've seen

00:18:56,000 --> 00:18:59,520
is that a rust foundation is probably

00:18:57,600 --> 00:19:02,400
going to be

00:18:59,520 --> 00:19:03,919
sort of similar in that it's going to be

00:19:02,400 --> 00:19:07,440
fairly lightweight at the top and more

00:19:03,919 --> 00:19:10,480
of an organizational tool

00:19:07,440 --> 00:19:12,880
so having a embedded rust board

00:19:10,480 --> 00:19:14,240
ink company under that and owned by the

00:19:12,880 --> 00:19:15,679
foundation

00:19:14,240 --> 00:19:17,840
gives the foundation a bit of

00:19:15,679 --> 00:19:19,520
flexibility and importantly gives it a

00:19:17,840 --> 00:19:20,960
small income stream so having that

00:19:19,520 --> 00:19:24,400
passive income

00:19:20,960 --> 00:19:24,720
and ensuring that rust can continue to

00:19:24,400 --> 00:19:27,679
be

00:19:24,720 --> 00:19:29,120
developed um and supported uh well into

00:19:27,679 --> 00:19:31,600
the future

00:19:29,120 --> 00:19:32,799
uh obviously this is gonna take a a lot

00:19:31,600 --> 00:19:35,919
more discussion

00:19:32,799 --> 00:19:36,400
to to sort out and certainly willing to

00:19:35,919 --> 00:19:40,559
help

00:19:36,400 --> 00:19:43,280
where i can so in conclusion

00:19:40,559 --> 00:19:44,000
uh implementing all these ideas gives

00:19:43,280 --> 00:19:45,919
rust

00:19:44,000 --> 00:19:47,440
sort of the best chance of becoming the

00:19:45,919 --> 00:19:52,400
next arduino

00:19:47,440 --> 00:19:54,480
but even then it's still hard uh arduino

00:19:52,400 --> 00:19:56,320
is spending a lot of resources at

00:19:54,480 --> 00:19:58,720
becoming more professional

00:19:56,320 --> 00:20:00,480
uh they're building a new idea they have

00:19:58,720 --> 00:20:02,799
new professional boards

00:20:00,480 --> 00:20:03,919
uh they're developing their own iot

00:20:02,799 --> 00:20:06,960
systems

00:20:03,919 --> 00:20:07,600
so bringing rust up to that level is is

00:20:06,960 --> 00:20:09,600
hard

00:20:07,600 --> 00:20:10,720
and um particularly when you have a

00:20:09,600 --> 00:20:13,840
brand name such

00:20:10,720 --> 00:20:15,520
as strong as arduino um perhaps

00:20:13,840 --> 00:20:16,240
something more like the embed level

00:20:15,520 --> 00:20:19,280
where

00:20:16,240 --> 00:20:21,840
we're just organizing everything

00:20:19,280 --> 00:20:23,440
making everything making a one-stop shop

00:20:21,840 --> 00:20:24,640
saying you want to learn embedded rust

00:20:23,440 --> 00:20:26,799
here's where you go

00:20:24,640 --> 00:20:29,840
these these are the boards you want so

00:20:26,799 --> 00:20:31,790
there's you don't we don't need a board

00:20:29,840 --> 00:20:33,440
made to fulfill that level

00:20:31,790 --> 00:20:37,120
[Music]

00:20:33,440 --> 00:20:38,880
um as we can just use the existing

00:20:37,120 --> 00:20:41,200
boards or

00:20:38,880 --> 00:20:42,720
further develop the existing boards um

00:20:41,200 --> 00:20:46,000
as required

00:20:42,720 --> 00:20:48,240
so which path to take i can't

00:20:46,000 --> 00:20:49,520
can't answer that question it's like

00:20:48,240 --> 00:20:51,840
everything in rust it's going to be

00:20:49,520 --> 00:20:54,320
decided upon by the community

00:20:51,840 --> 00:20:56,080
uh hopefully i can help facilitate

00:20:54,320 --> 00:20:58,159
discussion or

00:20:56,080 --> 00:21:00,880
give my opinions about what i what i

00:20:58,159 --> 00:21:00,880
think is best

00:21:01,600 --> 00:21:05,280
so i'm starting my own company lost

00:21:04,320 --> 00:21:08,320
consulting

00:21:05,280 --> 00:21:10,159
uh that's working on embedded iot

00:21:08,320 --> 00:21:11,679
solutions so i do have will have a

00:21:10,159 --> 00:21:14,480
little bit of capacity

00:21:11,679 --> 00:21:15,919
uh to help assist any any development

00:21:14,480 --> 00:21:18,080
required

00:21:15,919 --> 00:21:19,919
and you can contact me either on twitter

00:21:18,080 --> 00:21:21,919
or on website and i'm going to be

00:21:19,919 --> 00:21:23,520
in the chat for a couple more hours

00:21:21,919 --> 00:21:27,120
today and

00:21:23,520 --> 00:21:31,360
early tomorrow my time

00:21:27,120 --> 00:21:34,400
and that's it

00:21:31,360 --> 00:21:35,760
yeah thanks for this talk i can report

00:21:34,400 --> 00:21:38,960
from the chat that there's

00:21:35,760 --> 00:21:40,480
no questions only already engaged

00:21:38,960 --> 00:21:43,600
conversation

00:21:40,480 --> 00:21:44,799
so i can highly recommend you to hop

00:21:43,600 --> 00:21:46,559
over there

00:21:44,799 --> 00:21:48,559
um i've been running conference for

00:21:46,559 --> 00:21:49,200
quite uh quite long and this has been

00:21:48,559 --> 00:21:51,360
the first time

00:21:49,200 --> 00:21:52,320
someone applied for the conference brand

00:21:51,360 --> 00:21:56,159
on stream

00:21:52,320 --> 00:21:57,840
this was quite happy um

00:21:56,159 --> 00:21:59,760
yeah thank you for your talk i think it

00:21:57,840 --> 00:22:02,320
was laid out a good vision

00:21:59,760 --> 00:22:04,159
and it's always pleasing to see people

00:22:02,320 --> 00:22:05,200
talk about especially about foundations

00:22:04,159 --> 00:22:08,240
in

00:22:05,200 --> 00:22:13,840
such a good manner with a lot of insight

00:22:08,240 --> 00:22:13,840
thank you thank you

00:22:18,159 --> 00:22:20,240

YouTube URL: https://www.youtube.com/watch?v=V4u-h2N4-Bs


