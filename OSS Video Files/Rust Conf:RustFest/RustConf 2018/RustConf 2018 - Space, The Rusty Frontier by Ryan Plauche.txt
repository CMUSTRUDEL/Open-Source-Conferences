Title: RustConf 2018 - Space, The Rusty Frontier by Ryan Plauche
Publication date: 2018-09-06
Playlist: RustConf 2018
Description: 
	RustConf 2018 - Space, The Rusty Frontier by Ryan Plauche

Space. It is often thought of as the final frontier for humans. Why not also for Rust?

In the fall of 2017 we began using Rust on an upcoming CubeSat mission. Writing safe, performant software is a high priority for us, one shared by the aerospace industry. Our software framework was originally written in C but we wanted to explore other options which could give us more confidence in our code and allow us to leverage newer technologies. For us Rust fits the bill with its emphasis on safety, growing community, and high level software patterns.

This presentation will cover the finer points of why we settled on Rust, how we integrated Rust into our existing C environment, how Rust has affected our developer productivity, pictures of the (first?) spacecraft running Rust in low Earth orbit and thoughts on the future of Rust in Space.
Captions: 
	00:00:00,410 --> 00:00:17,970
[Music]

00:00:14,330 --> 00:00:21,689
so my talk it's called space the rusty

00:00:17,970 --> 00:00:25,560
frontier or as the program committee

00:00:21,689 --> 00:00:27,080
like to call it rust in space which

00:00:25,560 --> 00:00:31,080
actually liked that name a little better

00:00:27,080 --> 00:00:35,340
so this is not going to be a super

00:00:31,080 --> 00:00:39,390
technical talk this is more of the story

00:00:35,340 --> 00:00:41,970
of the company that I work for and how

00:00:39,390 --> 00:00:43,890
we have come to use rust and why we like

00:00:41,970 --> 00:00:47,250
using rust in the different places that

00:00:43,890 --> 00:00:50,100
we use it so don't expect any deep

00:00:47,250 --> 00:00:52,500
technical dives which honestly is a

00:00:50,100 --> 00:00:55,019
kudos I think to the rust team and that

00:00:52,500 --> 00:00:57,809
we didn't have to do any deep technical

00:00:55,019 --> 00:01:00,750
work with rust to make it fit into our

00:00:57,809 --> 00:01:04,830
product as is it was good and it worked

00:01:00,750 --> 00:01:08,520
so this is more of a high level how we

00:01:04,830 --> 00:01:10,500
got there and what we do with it so just

00:01:08,520 --> 00:01:13,830
a little background on me I've spent

00:01:10,500 --> 00:01:17,159
most of my career working on embedded

00:01:13,830 --> 00:01:20,640
Linux systems writing some form of C and

00:01:17,159 --> 00:01:23,880
C++ so I feel like I spent a lot of time

00:01:20,640 --> 00:01:25,950
in the wilderness of C trying to find my

00:01:23,880 --> 00:01:27,750
way out and trying to figure out is

00:01:25,950 --> 00:01:30,450
there a better way to do this you know

00:01:27,750 --> 00:01:32,790
wrestling with tooling and really weird

00:01:30,450 --> 00:01:34,440
bugs and all the things that come with

00:01:32,790 --> 00:01:38,880
that environment

00:01:34,440 --> 00:01:43,200
so using rust is a is a breath of fresh

00:01:38,880 --> 00:01:46,560
air for me but I spent a lot of time not

00:01:43,200 --> 00:01:48,660
using rust and I understand the issues

00:01:46,560 --> 00:01:52,260
that come up with other languages and

00:01:48,660 --> 00:01:56,430
other environments the company that I

00:01:52,260 --> 00:01:59,120
work for we are called Kubis and we

00:01:56,430 --> 00:02:01,800
build software solutions for satellites

00:01:59,120 --> 00:02:04,770
so we we operate in what you would call

00:02:01,800 --> 00:02:07,380
the the new space sector which is I

00:02:04,770 --> 00:02:09,929
think kind of started by SpaceX in this

00:02:07,380 --> 00:02:11,819
commercialization of space and now you

00:02:09,929 --> 00:02:14,580
have all of these these different

00:02:11,819 --> 00:02:17,220
startups appearing and we want to

00:02:14,580 --> 00:02:20,159
position ourselves to really help those

00:02:17,220 --> 00:02:22,439
companies operate their satellites or

00:02:20,159 --> 00:02:25,379
their spacecraft really well by

00:02:22,439 --> 00:02:26,460
providing quality software products that

00:02:25,379 --> 00:02:28,860
they can use and

00:02:26,460 --> 00:02:30,870
of them having to reinvent all this

00:02:28,860 --> 00:02:34,410
software every time they go about doing

00:02:30,870 --> 00:02:36,800
a mission so our goal is to make space

00:02:34,410 --> 00:02:39,380
more accessible and we do that by

00:02:36,800 --> 00:02:42,780
lowering the barriers of entry

00:02:39,380 --> 00:02:44,610
associated with software in space now

00:02:42,780 --> 00:02:47,610
what we found is that with a lot of

00:02:44,610 --> 00:02:50,070
these companies you know they're made up

00:02:47,610 --> 00:02:52,710
mostly by electrical engineers and

00:02:50,070 --> 00:02:55,860
aerospace engineers which makes a lot of

00:02:52,710 --> 00:02:57,900
sense right a spacecraft is this complex

00:02:55,860 --> 00:03:00,360
piece of hardware that you have to be

00:02:57,900 --> 00:03:02,310
very careful about and it operates in

00:03:00,360 --> 00:03:04,920
space so clearly you want a lot of

00:03:02,310 --> 00:03:08,310
knowledge around those two things but

00:03:04,920 --> 00:03:11,460
often the software is kind of left til

00:03:08,310 --> 00:03:13,050
the end or maybe it's like a poor ee who

00:03:11,460 --> 00:03:15,090
doesn't really write a lot of software

00:03:13,050 --> 00:03:16,800
is now in charge of writing all the

00:03:15,090 --> 00:03:18,900
software to run their satellite and

00:03:16,800 --> 00:03:21,000
that's not a really fun position to be

00:03:18,900 --> 00:03:22,830
in when let's say your satellite

00:03:21,000 --> 00:03:26,550
launches in two months so it's like go

00:03:22,830 --> 00:03:29,850
go go get it all done so we want to

00:03:26,550 --> 00:03:32,700
provide tools to empower these people

00:03:29,850 --> 00:03:35,670
and increase their chances of success

00:03:32,700 --> 00:03:39,150
with their missions we have two products

00:03:35,670 --> 00:03:42,150
that we we work on to do that the first

00:03:39,150 --> 00:03:44,730
one is called Major Tom and this is just

00:03:42,150 --> 00:03:46,560
our mission control software I'll talk

00:03:44,730 --> 00:03:49,160
about this one too much today because

00:03:46,560 --> 00:03:52,380
it's not really the focus of this talk

00:03:49,160 --> 00:03:54,510
it's a it's a Ruby on Rails back in with

00:03:52,380 --> 00:03:57,480
react front-end pretty standard web app

00:03:54,510 --> 00:03:59,370
it's what you'd use on the ground to

00:03:57,480 --> 00:04:02,460
receive data from your satellite and

00:03:59,370 --> 00:04:04,890
send commands up to your satellite I

00:04:02,460 --> 00:04:07,680
understand there's a pretty big overlap

00:04:04,890 --> 00:04:09,720
in this community and the Ruby community

00:04:07,680 --> 00:04:11,940
so I thought it'd be neat to highlight

00:04:09,720 --> 00:04:15,390
that we do use Ruby on our other product

00:04:11,940 --> 00:04:18,390
and we are also looking for engineers to

00:04:15,390 --> 00:04:20,370
help with this product so if this seems

00:04:18,390 --> 00:04:23,520
interesting to you please come talk to

00:04:20,370 --> 00:04:27,840
me after this and we'd be glad to talk

00:04:23,520 --> 00:04:30,030
to you so the main product that I work

00:04:27,840 --> 00:04:33,510
on and the thing that will be the focus

00:04:30,030 --> 00:04:34,919
of this talk is what we call cube OS now

00:04:33,510 --> 00:04:37,110
it's a little confusing because the name

00:04:34,919 --> 00:04:39,650
of our company is cubis the name of this

00:04:37,110 --> 00:04:42,110
product is cube OS

00:04:39,650 --> 00:04:44,030
and you know part of why we name it that

00:04:42,110 --> 00:04:46,190
way is because it is the complete flight

00:04:44,030 --> 00:04:48,650
software system and it's a flight

00:04:46,190 --> 00:04:51,500
software framework as well so for the

00:04:48,650 --> 00:04:54,139
systems that we support we package a

00:04:51,500 --> 00:04:57,770
custom Linux distribution that supports

00:04:54,139 --> 00:05:01,449
the hardware and then various pieces of

00:04:57,770 --> 00:05:05,389
middleware that are custom tailored to

00:05:01,449 --> 00:05:07,270
satellite specific needs drivers that

00:05:05,389 --> 00:05:10,250
are pre-built for peripherals that

00:05:07,270 --> 00:05:12,289
satellites will use and then a framework

00:05:10,250 --> 00:05:15,229
for our customers that build on top of

00:05:12,289 --> 00:05:18,530
as they implement the logic for their

00:05:15,229 --> 00:05:20,449
missions so we try to provide as much of

00:05:18,530 --> 00:05:23,120
the software as possible to make it as

00:05:20,449 --> 00:05:26,030
easy as possible for our customers to

00:05:23,120 --> 00:05:30,139
get up and going and this product is

00:05:26,030 --> 00:05:31,910
also I would say like 95% open-source

00:05:30,139 --> 00:05:34,070
there are a few bits that are

00:05:31,910 --> 00:05:36,440
proprietary that hardware vendors don't

00:05:34,070 --> 00:05:38,000
want us to release because they're you

00:05:36,440 --> 00:05:40,100
know reveals some details about their

00:05:38,000 --> 00:05:42,710
hardware but for the most part all of

00:05:40,100 --> 00:05:44,240
this can be found on github which I love

00:05:42,710 --> 00:05:47,780
getting to work in an open-source

00:05:44,240 --> 00:05:49,849
product and getting to be here as part

00:05:47,780 --> 00:05:52,010
of an open-source community with this

00:05:49,849 --> 00:05:53,690
awesome language and using it in an

00:05:52,010 --> 00:05:56,710
open-source product I think it's a

00:05:53,690 --> 00:06:01,210
really cool synergy of those two things

00:05:56,710 --> 00:06:03,470
so let's talk about how we got to rust I

00:06:01,210 --> 00:06:06,979
think we have to step back a little bit

00:06:03,470 --> 00:06:09,349
first and recognize that at the base

00:06:06,979 --> 00:06:12,169
satellites are all just really fancy

00:06:09,349 --> 00:06:14,780
embedded systems they usually have some

00:06:12,169 --> 00:06:17,780
form of constraint now maybe they

00:06:14,780 --> 00:06:20,000
operate in a pretty exotic environment

00:06:17,780 --> 00:06:22,460
like a little different than most of our

00:06:20,000 --> 00:06:24,560
embedded systems here on earth it's just

00:06:22,460 --> 00:06:27,169
a little and you know some of the

00:06:24,560 --> 00:06:30,289
hardware that's connected to them is a

00:06:27,169 --> 00:06:32,419
little different but in the end when it

00:06:30,289 --> 00:06:34,280
comes to writing the software you're

00:06:32,419 --> 00:06:37,940
essentially working on an embedded

00:06:34,280 --> 00:06:39,889
device so in the beginning when I first

00:06:37,940 --> 00:06:41,960
started working on this project about

00:06:39,889 --> 00:06:44,930
two and a half years ago we were

00:06:41,960 --> 00:06:47,060
targeting just free artists and building

00:06:44,930 --> 00:06:49,789
an abstraction layer around free artists

00:06:47,060 --> 00:06:52,280
and what this meant is that everything

00:06:49,789 --> 00:06:53,240
was written in C because that's what you

00:06:52,280 --> 00:06:55,580
do if you're writing

00:06:53,240 --> 00:06:57,110
systems and that's certainly what you do

00:06:55,580 --> 00:07:00,110
if you're building on top of free

00:06:57,110 --> 00:07:04,039
artists so writing see abstraction

00:07:00,110 --> 00:07:06,560
layers and then trying to figure out

00:07:04,039 --> 00:07:08,720
what is the tooling that we need to deal

00:07:06,560 --> 00:07:12,099
with our module dependencies for doing

00:07:08,720 --> 00:07:14,569
testing for building all these things

00:07:12,099 --> 00:07:17,150
trying to pull this all together and put

00:07:14,569 --> 00:07:19,460
it under you know one unified front for

00:07:17,150 --> 00:07:21,199
our customers to work with because

00:07:19,460 --> 00:07:23,030
that's not really something that exists

00:07:21,199 --> 00:07:24,410
in the C world there are a lot of

00:07:23,030 --> 00:07:27,440
different tools that do a lot of

00:07:24,410 --> 00:07:29,569
different things but not always a lot of

00:07:27,440 --> 00:07:32,449
unity among those tools and a lot of

00:07:29,569 --> 00:07:35,870
continuity between those we did build a

00:07:32,449 --> 00:07:37,699
lot of that but being a start-up trying

00:07:35,870 --> 00:07:40,360
to figure out our identity and what our

00:07:37,699 --> 00:07:43,250
product was and what to do with it

00:07:40,360 --> 00:07:46,520
eventually over time you find that

00:07:43,250 --> 00:07:49,340
things change and Along Came Linux and

00:07:46,520 --> 00:07:51,259
really changed things for us so we found

00:07:49,340 --> 00:07:54,470
that as we talked to more hardware

00:07:51,259 --> 00:07:55,849
vendors we realized that the the flight

00:07:54,470 --> 00:07:58,729
boards they were offering they were

00:07:55,849 --> 00:08:01,039
pretty powerful they could run Linux and

00:07:58,729 --> 00:08:05,030
a lot of the customers that we were

00:08:01,039 --> 00:08:08,419
talking to they did not have the needs

00:08:05,030 --> 00:08:11,180
of a real-time operating system they

00:08:08,419 --> 00:08:13,849
didn't need those type of constraints or

00:08:11,180 --> 00:08:16,430
that type of timing so we started

00:08:13,849 --> 00:08:19,099
thinking like well if we don't need to

00:08:16,430 --> 00:08:21,139
be doing that and we can run Linux why

00:08:19,099 --> 00:08:23,900
wouldn't we just run Linux and have all

00:08:21,139 --> 00:08:26,539
of our applications running Linux it's

00:08:23,900 --> 00:08:28,520
so much easier to program in Linux it's

00:08:26,539 --> 00:08:31,159
so much easier for us to find developers

00:08:28,520 --> 00:08:34,130
and our customers to find developers to

00:08:31,159 --> 00:08:36,050
work in a Linux environment and it opens

00:08:34,130 --> 00:08:38,899
the door for all sorts of other

00:08:36,050 --> 00:08:41,120
languages to be used when we're building

00:08:38,899 --> 00:08:42,010
on free artists see was basically the

00:08:41,120 --> 00:08:45,740
only choice

00:08:42,010 --> 00:08:48,470
I've seen some work and building for our

00:08:45,740 --> 00:08:51,890
toast modules in rust which is really

00:08:48,470 --> 00:08:53,390
cool but it's pretty rare for the most

00:08:51,890 --> 00:08:55,910
part you're going to be writing in just

00:08:53,390 --> 00:08:57,890
C but if you move to Linux in a more

00:08:55,910 --> 00:09:01,190
Linux based architecture you really open

00:08:57,890 --> 00:09:03,380
the door to other languages and this

00:09:01,190 --> 00:09:05,360
move for us which happened started

00:09:03,380 --> 00:09:06,610
happening early last year it's really

00:09:05,360 --> 00:09:11,890
what started

00:09:06,610 --> 00:09:14,380
the door to even consider using rust the

00:09:11,890 --> 00:09:18,490
other thing was just thinking about si

00:09:14,380 --> 00:09:22,180
and its place in our product and in the

00:09:18,490 --> 00:09:24,519
industry at different conferences where

00:09:22,180 --> 00:09:26,380
we would talk about our software we

00:09:24,519 --> 00:09:28,450
would often get very pointed questions

00:09:26,380 --> 00:09:31,209
about how do you deal with the error

00:09:28,450 --> 00:09:33,040
rates of see how do you deal with the

00:09:31,209 --> 00:09:36,970
dangerous side of see you know how do

00:09:33,040 --> 00:09:38,529
you make this safe for people and there

00:09:36,970 --> 00:09:40,959
was one person who asked me a lot of

00:09:38,529 --> 00:09:44,440
questions and his answer was always well

00:09:40,959 --> 00:09:47,620
you should use ADA and well it's not

00:09:44,440 --> 00:09:50,019
exactly that simple to just use ADA but

00:09:47,620 --> 00:09:51,700
him asking these questions really got

00:09:50,019 --> 00:09:54,130
them bouncing around on our head

00:09:51,700 --> 00:09:57,790
thinking okay you know is this really

00:09:54,130 --> 00:10:00,970
the best thing for us and then starting

00:09:57,790 --> 00:10:02,769
to consider who our customers were and

00:10:00,970 --> 00:10:05,350
you know what is the best thing for them

00:10:02,769 --> 00:10:07,839
what can deliver the best product for

00:10:05,350 --> 00:10:10,899
them when your customers are a bunch of

00:10:07,839 --> 00:10:12,370
people that yeah they can write software

00:10:10,899 --> 00:10:14,980
but they are not necessarily

00:10:12,370 --> 00:10:17,680
professional software developers so sure

00:10:14,980 --> 00:10:19,959
si is easy for them to pick up but is it

00:10:17,680 --> 00:10:21,399
really safe for them to pick up is it

00:10:19,959 --> 00:10:23,170
really the right thing for them to be

00:10:21,399 --> 00:10:26,019
running with can they make the best

00:10:23,170 --> 00:10:28,510
choices with Si not having a lot of

00:10:26,019 --> 00:10:31,600
training and a lot of practice writing

00:10:28,510 --> 00:10:35,470
software and we started to realize that

00:10:31,600 --> 00:10:40,420
maybe the answer is no maybe C was not

00:10:35,470 --> 00:10:42,699
the best choice for us so I think it's

00:10:40,420 --> 00:10:45,550
good to answer this question why not ADA

00:10:42,699 --> 00:10:48,579
at this point because in the aerospace

00:10:45,550 --> 00:10:52,390
industry ADA is a really popular choice

00:10:48,579 --> 00:10:55,240
and I think as a language it actually

00:10:52,390 --> 00:10:58,089
has a lot of good to it I spent some

00:10:55,240 --> 00:10:59,860
time tinkering with ADA as as we're

00:10:58,089 --> 00:11:01,720
wrestling with this question of should

00:10:59,860 --> 00:11:05,620
we use C or you know what's better

00:11:01,720 --> 00:11:08,740
what's worse and as a language it's cool

00:11:05,620 --> 00:11:10,959
the community I found is mainly hidden

00:11:08,740 --> 00:11:13,449
behind closed source barriers we could

00:11:10,959 --> 00:11:15,670
not find a big thriving open-source

00:11:13,449 --> 00:11:18,069
community which is something that we

00:11:15,670 --> 00:11:18,720
wanted to be able to align with but

00:11:18,069 --> 00:11:20,639
really the

00:11:18,720 --> 00:11:23,879
tiller for us is the licensing situation

00:11:20,639 --> 00:11:26,009
with Ada as far as I can tell there's

00:11:23,879 --> 00:11:28,829
one company that kind of supports the

00:11:26,009 --> 00:11:30,269
ADA compiler and the main libraries so

00:11:28,829 --> 00:11:34,079
you have two options you can either

00:11:30,269 --> 00:11:36,050
purchase their commercial license or use

00:11:34,079 --> 00:11:38,579
their open-source license and that

00:11:36,050 --> 00:11:41,040
compiler and all the standard libraries

00:11:38,579 --> 00:11:45,029
are under the GPL so then everything you

00:11:41,040 --> 00:11:47,160
write is then GPL which neither is those

00:11:45,029 --> 00:11:49,319
options really work that well for us as

00:11:47,160 --> 00:11:53,069
a company trying to produce a commercial

00:11:49,319 --> 00:11:57,810
but also open-source product so that

00:11:53,069 --> 00:12:01,800
really nixed ADA for us so the the thing

00:11:57,810 --> 00:12:05,310
that really made us jump into rust was

00:12:01,800 --> 00:12:07,470
graph QL this is probably last fall

00:12:05,310 --> 00:12:10,410
last summer we are really wrestling with

00:12:07,470 --> 00:12:13,110
this idea of what do we use as an

00:12:10,410 --> 00:12:15,870
application protocol between the

00:12:13,110 --> 00:12:17,490
different services on our system and we

00:12:15,870 --> 00:12:19,490
really like this idea of graph QL

00:12:17,490 --> 00:12:22,800
there's strongly-typed

00:12:19,490 --> 00:12:25,319
alternative to rest which would let us

00:12:22,800 --> 00:12:27,149
expose a schema of commands and queries

00:12:25,319 --> 00:12:29,720
but then really be really selective

00:12:27,149 --> 00:12:33,540
about what we actually did with it and

00:12:29,720 --> 00:12:37,019
we found that in the C world there was

00:12:33,540 --> 00:12:38,730
like one or two craft qo libraries but

00:12:37,019 --> 00:12:41,160
there wasn't a graph QL engine that

00:12:38,730 --> 00:12:42,930
really worked with the HTTP server and I

00:12:41,160 --> 00:12:45,269
really didn't want to write that myself

00:12:42,930 --> 00:12:47,730
that just sounded awful when there were

00:12:45,269 --> 00:12:51,839
so many implementations already in other

00:12:47,730 --> 00:12:54,629
languages and we saw that rust had great

00:12:51,839 --> 00:12:57,180
support for graph QL fit in with the

00:12:54,629 --> 00:13:00,300
type system that rust had I worked well

00:12:57,180 --> 00:13:03,689
with the HTTP server so did some

00:13:00,300 --> 00:13:05,459
tinkering with that it seemed good we

00:13:03,689 --> 00:13:09,149
did kind of a bake-off internally

00:13:05,459 --> 00:13:10,740
between C rust and Python to see what

00:13:09,149 --> 00:13:14,250
direction we wanted to go in with our

00:13:10,740 --> 00:13:17,180
core fight software and in the end for a

00:13:14,250 --> 00:13:20,069
variety of reasons rust won out

00:13:17,180 --> 00:13:21,899
so at this point I can say pretty

00:13:20,069 --> 00:13:24,959
confidently that it Q Bose we don't

00:13:21,899 --> 00:13:27,959
write a new C there there are C products

00:13:24,959 --> 00:13:29,819
that we still maintain you boot is the

00:13:27,959 --> 00:13:31,010
main bootloader we use which is written

00:13:29,819 --> 00:13:33,770
in C and we will not

00:13:31,010 --> 00:13:36,050
be rewriting u-boot and rust is that

00:13:33,770 --> 00:13:38,240
it's not a good idea to try to do that

00:13:36,050 --> 00:13:40,190
but when it comes to new software that

00:13:38,240 --> 00:13:42,320
we're writing it's all written in rust

00:13:40,190 --> 00:13:44,450
and I am basically a full time rust

00:13:42,320 --> 00:13:48,830
developer now which I think it's just

00:13:44,450 --> 00:13:49,760
the coolest thing in the world so now

00:13:48,830 --> 00:13:51,950
I'm going to talk a little bit about

00:13:49,760 --> 00:13:54,080
what I call the joy of rust they're just

00:13:51,950 --> 00:13:56,180
different things that we've come to

00:13:54,080 --> 00:13:58,880
appreciate about rust you know some of

00:13:56,180 --> 00:14:02,270
these things were ideas that won us over

00:13:58,880 --> 00:14:03,860
before we started using rust and others

00:14:02,270 --> 00:14:06,520
were things that we have just discovered

00:14:03,860 --> 00:14:09,230
as we've gone and now really appreciate

00:14:06,520 --> 00:14:12,580
so to start with high level tools low

00:14:09,230 --> 00:14:16,850
level performance I find that with rust

00:14:12,580 --> 00:14:19,370
between things like traits modules the

00:14:16,850 --> 00:14:22,210
whole enum system options results the

00:14:19,370 --> 00:14:25,100
whole standard library rust helps me

00:14:22,210 --> 00:14:28,030
think about software when I write it in

00:14:25,100 --> 00:14:32,990
a much more natural way than sita's I

00:14:28,030 --> 00:14:34,640
often found that with C as I tried to

00:14:32,990 --> 00:14:36,980
take my thoughts about software and

00:14:34,640 --> 00:14:39,520
translate them into the language it's

00:14:36,980 --> 00:14:41,960
going from you know high level design to

00:14:39,520 --> 00:14:44,570
okay how do I organize this around the

00:14:41,960 --> 00:14:46,990
how the computer organizes memory

00:14:44,570 --> 00:14:48,890
because that's kind of what C does

00:14:46,990 --> 00:14:51,680
that's kind of hard to make that

00:14:48,890 --> 00:14:54,350
translation but with rust it was always

00:14:51,680 --> 00:14:58,400
and has been much easier for me to I

00:14:54,350 --> 00:15:00,920
guess more naturally express myself in

00:14:58,400 --> 00:15:02,900
the software which is so cool to be able

00:15:00,920 --> 00:15:05,780
to do I think it helps with design so

00:15:02,900 --> 00:15:08,210
much but we don't lose on performance

00:15:05,780 --> 00:15:10,100
which is even better so you kind of get

00:15:08,210 --> 00:15:12,740
get the best of both worlds right then

00:15:10,100 --> 00:15:14,810
that's that's the point of this now

00:15:12,740 --> 00:15:17,630
I do want to say real quick that I'm not

00:15:14,810 --> 00:15:20,060
here to bash C that's just the context

00:15:17,630 --> 00:15:23,090
that I come from that is my history in

00:15:20,060 --> 00:15:25,040
my background I'm not boo-hooing C I

00:15:23,090 --> 00:15:27,290
think there are places still where it's

00:15:25,040 --> 00:15:29,570
useful but I think there are a lot of

00:15:27,290 --> 00:15:32,030
places where we tend to default to it

00:15:29,570 --> 00:15:36,140
and maybe we should question that in the

00:15:32,030 --> 00:15:38,450
future so the next great thing about

00:15:36,140 --> 00:15:40,520
rust the compiler protections that we

00:15:38,450 --> 00:15:43,840
get and I won't go into this too much

00:15:40,520 --> 00:15:46,810
but just that you know the strong

00:15:43,840 --> 00:15:49,480
ding and the memory management and the

00:15:46,810 --> 00:15:51,850
way the compiler will protect you and

00:15:49,480 --> 00:15:54,580
just really yell at you and get on to

00:15:51,850 --> 00:15:56,170
you if you're doing bad things and just

00:15:54,580 --> 00:15:58,779
knowing that if I can please the

00:15:56,170 --> 00:16:00,040
compiler that my code probably isn't

00:15:58,779 --> 00:16:02,350
going to seg fault it's probably not

00:16:00,040 --> 00:16:04,990
going to have some weird pointer errors

00:16:02,350 --> 00:16:07,390
that is like such a huge load off of our

00:16:04,990 --> 00:16:10,270
shoulders knowing that you know if our

00:16:07,390 --> 00:16:13,330
CI system passes our code is probably

00:16:10,270 --> 00:16:17,260
mostly good it will mostly work it may

00:16:13,330 --> 00:16:21,130
not do what we want it to do but it's

00:16:17,260 --> 00:16:25,029
not going to do the wrong things in a

00:16:21,130 --> 00:16:26,980
bad way and that's just great ok error

00:16:25,029 --> 00:16:30,700
handling this is one of our favorite

00:16:26,980 --> 00:16:32,940
things about rust gosh we love that we

00:16:30,700 --> 00:16:35,500
can actually handle errors using rust

00:16:32,940 --> 00:16:39,190
the idea that there is a result type

00:16:35,500 --> 00:16:42,370
that can return either my data or an

00:16:39,190 --> 00:16:45,040
error type is so cool that I can

00:16:42,370 --> 00:16:47,950
propagate those errors back up to the

00:16:45,040 --> 00:16:50,140
top level through all my call stack it's

00:16:47,950 --> 00:16:51,820
even better and the fact that that can

00:16:50,140 --> 00:16:54,730
be done with like the lowly question

00:16:51,820 --> 00:16:59,190
mark which is genius it's so great that

00:16:54,730 --> 00:17:02,140
we can do this we are patiently watching

00:16:59,190 --> 00:17:03,910
the error handling story you know

00:17:02,140 --> 00:17:06,790
following failure trying to figure out

00:17:03,910 --> 00:17:10,630
ok where is this going to go using the

00:17:06,790 --> 00:17:12,100
latest versions but yeah we just love

00:17:10,630 --> 00:17:14,770
that this is a thing that gets so much

00:17:12,100 --> 00:17:18,040
attention and it's a core part of the

00:17:14,770 --> 00:17:19,510
rust story and for us it is a core part

00:17:18,040 --> 00:17:22,179
of how we write software is to be able

00:17:19,510 --> 00:17:27,370
to handle errors gracefully and report

00:17:22,179 --> 00:17:29,890
them well documentation documentation is

00:17:27,370 --> 00:17:32,830
something we take pretty seriously at

00:17:29,890 --> 00:17:36,370
Kubo's we write a lot of it and we love

00:17:32,830 --> 00:17:39,460
that cargo has built-in support for rust

00:17:36,370 --> 00:17:42,040
dock and building those docks but even

00:17:39,460 --> 00:17:44,530
more so we love that we can embed rust

00:17:42,040 --> 00:17:46,540
in our docks and the compiler will tell

00:17:44,530 --> 00:17:49,510
us if those examples are still relevant

00:17:46,540 --> 00:17:52,630
if they still work so it helps us keep

00:17:49,510 --> 00:17:55,030
our documentation to be a living

00:17:52,630 --> 00:17:55,840
artifact you know living part of the

00:17:55,030 --> 00:17:57,940
code

00:17:55,840 --> 00:18:00,940
and that's super valuable especially as

00:17:57,940 --> 00:18:03,849
a company that is building a product

00:18:00,940 --> 00:18:05,619
intended for use by other people the

00:18:03,849 --> 00:18:07,029
whole point of the product I work on is

00:18:05,619 --> 00:18:09,279
that I shouldn't have to write code for

00:18:07,029 --> 00:18:11,109
other people they should be able to use

00:18:09,279 --> 00:18:14,859
my code and then go off and do their own

00:18:11,109 --> 00:18:17,019
things so documentation working examples

00:18:14,859 --> 00:18:19,809
this is all super important for

00:18:17,019 --> 00:18:23,830
achieving this goal of empowering other

00:18:19,809 --> 00:18:26,320
people and just this ability to compile

00:18:23,830 --> 00:18:29,200
the examples in our Docs seem so small

00:18:26,320 --> 00:18:32,009
but really is a big deal for us that

00:18:29,200 --> 00:18:37,299
that we can keep this stuff all in check

00:18:32,009 --> 00:18:40,509
okay and lastly at least for now though

00:18:37,299 --> 00:18:44,469
the whole tooling story of rust has been

00:18:40,509 --> 00:18:47,589
huge for us the fact that within the

00:18:44,469 --> 00:18:50,349
cargo tool through different plugins and

00:18:47,589 --> 00:18:56,349
through its existing capabilities you

00:18:50,349 --> 00:19:00,460
can build test cross compile build your

00:18:56,349 --> 00:19:00,700
Docs format your code gosh how cool was

00:19:00,460 --> 00:19:03,219
that

00:19:00,700 --> 00:19:05,619
that it's it's all in one tool and it's

00:19:03,219 --> 00:19:08,080
all built by the same community I'm not

00:19:05,619 --> 00:19:09,909
like going across you know the nether

00:19:08,080 --> 00:19:13,179
regions of the internet looking for some

00:19:09,909 --> 00:19:15,129
Rando GCC toolchain to do my cross

00:19:13,179 --> 00:19:17,559
compiling right it's all hidden behind

00:19:15,129 --> 00:19:19,629
one tool and like we didn't even have to

00:19:17,559 --> 00:19:21,669
write that that is something that the

00:19:19,629 --> 00:19:25,330
rust community is doing and building and

00:19:21,669 --> 00:19:27,700
maintaining so thank you for that we

00:19:25,330 --> 00:19:30,129
love it it's so great it makes our lives

00:19:27,700 --> 00:19:32,710
so much easier and honestly it's a lot

00:19:30,129 --> 00:19:36,489
of what we are trying to do previously

00:19:32,710 --> 00:19:38,799
with our C API or C SDK so seeing it

00:19:36,489 --> 00:19:40,989
done and rust in a way that exists

00:19:38,799 --> 00:19:43,690
already really well and that we can

00:19:40,989 --> 00:19:48,700
easily extend it through the cargo

00:19:43,690 --> 00:19:50,700
plugins system is just great all right

00:19:48,700 --> 00:19:54,909
so let's talk a little bit about where

00:19:50,700 --> 00:19:57,999
we use rust call this Huber s corrosion

00:19:54,909 --> 00:20:01,839
so we are slowly you know corroding or

00:19:57,999 --> 00:20:04,550
rusta fiying our system so in this this

00:20:01,839 --> 00:20:06,410
kind of a high level systems diagram

00:20:04,550 --> 00:20:09,560
of what I look like with a satellite

00:20:06,410 --> 00:20:11,300
talking to our ground service so on the

00:20:09,560 --> 00:20:13,130
top we have Major Tom and the Gateway

00:20:11,300 --> 00:20:14,480
and both of those would sit on the

00:20:13,130 --> 00:20:16,520
ground

00:20:14,480 --> 00:20:19,460
you know below your radio receiving data

00:20:16,520 --> 00:20:21,980
and in this very large gray box that

00:20:19,460 --> 00:20:26,830
says flight software those are all the

00:20:21,980 --> 00:20:29,720
things that run on the satellite and I

00:20:26,830 --> 00:20:32,660
think I can say pretty good confidence

00:20:29,720 --> 00:20:35,150
that most of these are written in rust

00:20:32,660 --> 00:20:37,550
at this point there are a few pieces

00:20:35,150 --> 00:20:40,370
that aren't written in rust we use some

00:20:37,550 --> 00:20:44,090
Lua footing around in there and some

00:20:40,370 --> 00:20:47,840
legacy C and a little bit of Python but

00:20:44,090 --> 00:20:50,630
the goal is that everything we write

00:20:47,840 --> 00:20:53,270
within this diagram will be in rust and

00:20:50,630 --> 00:20:55,970
the goal is that when we deliver this

00:20:53,270 --> 00:20:57,680
software to our customers that we know

00:20:55,970 --> 00:20:59,870
we've written it in rust we've done our

00:20:57,680 --> 00:21:01,790
testing we've looked at it very

00:20:59,870 --> 00:21:04,370
thoroughly and we're delivering a solid

00:21:01,790 --> 00:21:06,860
product for them to build on top of now

00:21:04,370 --> 00:21:09,440
maybe our customers right and rust maybe

00:21:06,860 --> 00:21:11,060
they don't but the pieces of our

00:21:09,440 --> 00:21:13,640
software that we had built that they

00:21:11,060 --> 00:21:15,890
rely on they were gonna be rock-solid

00:21:13,640 --> 00:21:21,530
and part of that is because we've chosen

00:21:15,890 --> 00:21:24,740
to use rust to write them so speaking of

00:21:21,530 --> 00:21:27,110
customers does rust mix well with our

00:21:24,740 --> 00:21:29,690
customers this is an ongoing question I

00:21:27,110 --> 00:21:32,090
think one that we will find the answers

00:21:29,690 --> 00:21:34,460
to over the next few years as we we

00:21:32,090 --> 00:21:37,850
slowly explore this but what we've

00:21:34,460 --> 00:21:40,220
decided to do is give our customers the

00:21:37,850 --> 00:21:42,260
ability to either write and rust if they

00:21:40,220 --> 00:21:44,300
want to and some of them do and they're

00:21:42,260 --> 00:21:47,600
very excited about using rust which is

00:21:44,300 --> 00:21:50,150
really encouraging and affirming for our

00:21:47,600 --> 00:21:53,180
decision to go that way but for those

00:21:50,150 --> 00:21:55,490
that are you know less familiar we do

00:21:53,180 --> 00:21:59,060
let them use Python it runs alongside

00:21:55,490 --> 00:22:03,650
rust and part of how we make that

00:21:59,060 --> 00:22:05,270
interoperate is in our architecture all

00:22:03,650 --> 00:22:07,640
those different boxes are actually

00:22:05,270 --> 00:22:11,090
different processes so we create Network

00:22:07,640 --> 00:22:12,410
boundaries between each process and that

00:22:11,090 --> 00:22:14,750
means we don't really have to worry

00:22:12,410 --> 00:22:16,750
about mixing languages as long as

00:22:14,750 --> 00:22:19,930
everything speaks the same

00:22:16,750 --> 00:22:21,250
DP graph QL mixture that we have we

00:22:19,930 --> 00:22:23,860
don't care what's talking to our rust

00:22:21,250 --> 00:22:26,920
services we just said everything bounded

00:22:23,860 --> 00:22:29,380
at the network layer and then the rust

00:22:26,920 --> 00:22:32,050
services are responsible for you know

00:22:29,380 --> 00:22:35,590
sanitizing whatever comes in and making

00:22:32,050 --> 00:22:36,130
sure it's safe so whatever our customers

00:22:35,590 --> 00:22:37,720
right

00:22:36,130 --> 00:22:40,180
they can't take down they're on

00:22:37,720 --> 00:22:42,460
satellite we make sure of that they can

00:22:40,180 --> 00:22:44,110
screw up their own stuff but the things

00:22:42,460 --> 00:22:46,390
that we write that let them control the

00:22:44,110 --> 00:22:51,070
satellite they cannot harm which is

00:22:46,390 --> 00:22:54,970
great all right so kind of the last part

00:22:51,070 --> 00:22:59,710
of this is some challenges that we have

00:22:54,970 --> 00:23:01,390
faced as we use rust and I think some of

00:22:59,710 --> 00:23:03,940
these challenges also are pretty

00:23:01,390 --> 00:23:08,020
relevant to you know the aerospace

00:23:03,940 --> 00:23:10,030
industry in general and maybe some of

00:23:08,020 --> 00:23:12,360
the more fringe industries that we want

00:23:10,030 --> 00:23:14,800
to see rust get pushed out into

00:23:12,360 --> 00:23:17,140
industries where maybe trust is a little

00:23:14,800 --> 00:23:20,890
harder to gain or environments are a

00:23:17,140 --> 00:23:23,650
little weird so the first one and this

00:23:20,890 --> 00:23:27,880
kind of hits us pretty hard is the

00:23:23,650 --> 00:23:30,100
compiled binary sizes it's a debug rust

00:23:27,880 --> 00:23:32,710
binary it's gonna be pretty large a

00:23:30,100 --> 00:23:34,630
release rust binary it's going to be

00:23:32,710 --> 00:23:37,600
smaller and you can strip it down to be

00:23:34,630 --> 00:23:40,900
even smaller but still we found they

00:23:37,600 --> 00:23:44,230
tend to be a little bigger than the SI

00:23:40,900 --> 00:23:46,810
binaries and that's something that we

00:23:44,230 --> 00:23:48,850
have to kind of reckon with on a daily

00:23:46,810 --> 00:23:52,600
basis as we do development on these

00:23:48,850 --> 00:23:54,400
satellites so imagine you have a

00:23:52,600 --> 00:23:57,070
satellite on your desk and you're

00:23:54,400 --> 00:23:59,590
working with it but the only way you can

00:23:57,070 --> 00:24:03,730
talk to it is over a serial link and

00:23:59,590 --> 00:24:05,530
it's operating like 1 1 5 200 bps and

00:24:03,730 --> 00:24:07,570
you have a one-and-a-half megabyte

00:24:05,530 --> 00:24:09,630
binary you have to transfer over and

00:24:07,570 --> 00:24:11,890
that's your only way of doing it so

00:24:09,630 --> 00:24:14,320
that's kind of slow it's gonna take a

00:24:11,890 --> 00:24:17,440
little while to send that over now

00:24:14,320 --> 00:24:20,350
that's like best-case scenario now

00:24:17,440 --> 00:24:23,020
imagine we take that satellite and we

00:24:20,350 --> 00:24:25,720
put it up in space and now it's talking

00:24:23,020 --> 00:24:28,000
to a radio over that serial link but the

00:24:25,720 --> 00:24:30,280
radio is actually even slower than the

00:24:28,000 --> 00:24:33,100
serial link let's say half the speed

00:24:30,280 --> 00:24:35,110
and let's say like you can only talk to

00:24:33,100 --> 00:24:38,170
it for like three or four minutes every

00:24:35,110 --> 00:24:40,060
10 minutes so you've lost a lot of

00:24:38,170 --> 00:24:42,330
bandwidth this at this point and this

00:24:40,060 --> 00:24:45,130
this one-and-a-half megabyte binary

00:24:42,330 --> 00:24:48,060
suddenly is taking a really long time to

00:24:45,130 --> 00:24:51,940
transfer over so we don't have a good

00:24:48,060 --> 00:24:54,580
solution for this one yet we're still

00:24:51,940 --> 00:24:56,620
reckoning with this we may look into the

00:24:54,580 --> 00:24:59,020
idea of binary discs or something like

00:24:56,620 --> 00:25:00,940
that when it comes to updates but this

00:24:59,020 --> 00:25:03,850
is just a thing for us that that we all

00:25:00,940 --> 00:25:06,930
have to deal with as updating software

00:25:03,850 --> 00:25:09,370
and satellites is a real need and

00:25:06,930 --> 00:25:14,050
something that we really want to offer

00:25:09,370 --> 00:25:16,840
to our customers user learning curve

00:25:14,050 --> 00:25:19,180
this comes back to the whole idea of for

00:25:16,840 --> 00:25:21,070
us as the customer but really it's it's

00:25:19,180 --> 00:25:23,620
any new user of rust

00:25:21,070 --> 00:25:25,810
there is certainly a learning curve to

00:25:23,620 --> 00:25:28,840
getting into the language and I think

00:25:25,810 --> 00:25:31,360
it'd be easy for someone to argue that C

00:25:28,840 --> 00:25:34,690
is much easier to learn but is C safer

00:25:31,360 --> 00:25:37,300
to on I don't know about that I think we

00:25:34,690 --> 00:25:39,150
pay a lot upfront when we learn rust for

00:25:37,300 --> 00:25:41,290
the safety that it gives us but

00:25:39,150 --> 00:25:44,710
sometimes we have to convince people

00:25:41,290 --> 00:25:47,650
that's worth doing but I will say we

00:25:44,710 --> 00:25:49,360
really appreciate the rust community and

00:25:47,650 --> 00:25:52,270
the work they've done on the docks

00:25:49,360 --> 00:25:54,070
the rust book has been great all the

00:25:52,270 --> 00:25:56,500
different resources for a learning rust

00:25:54,070 --> 00:25:59,470
are just excellent and have been so

00:25:56,500 --> 00:26:02,940
helpful for us as a team to get there

00:25:59,470 --> 00:26:06,280
and I think you know the more we can do

00:26:02,940 --> 00:26:09,510
to give people those stepping stones to

00:26:06,280 --> 00:26:15,840
learning rust the easier it will be to

00:26:09,510 --> 00:26:19,600
bring in these people language maturity

00:26:15,840 --> 00:26:22,410
so I haven't run into this as much but I

00:26:19,600 --> 00:26:25,630
have a feeling that as rush tries to

00:26:22,410 --> 00:26:28,210
push more and let's say the traditional

00:26:25,630 --> 00:26:30,540
aerospace industry or maybe just

00:26:28,210 --> 00:26:33,310
traditional embedded wherever that lies

00:26:30,540 --> 00:26:36,610
what you find is that there's a lot of

00:26:33,310 --> 00:26:39,690
institutional inertia and institutional

00:26:36,610 --> 00:26:42,320
trust in old things and old tools and

00:26:39,690 --> 00:26:43,820
new things are not good because

00:26:42,320 --> 00:26:46,009
they're new but old things are good

00:26:43,820 --> 00:26:48,830
because we know they work and they're

00:26:46,009 --> 00:26:51,639
old and figuring out how to overcome

00:26:48,830 --> 00:26:53,960
this is pretty challenging and it can be

00:26:51,639 --> 00:26:55,610
could be a hard sell when you're like

00:26:53,960 --> 00:26:58,909
yeah my language has been around for

00:26:55,610 --> 00:27:01,669
like half a decade a little more than

00:26:58,909 --> 00:27:03,529
that you should use it you should trust

00:27:01,669 --> 00:27:06,139
it I know your codebase has been around

00:27:03,529 --> 00:27:07,610
for like 15 years but trust me this is

00:27:06,139 --> 00:27:09,649
okay

00:27:07,610 --> 00:27:12,169
it's not a good quick solution to this

00:27:09,649 --> 00:27:15,200
one I think the best solution though is

00:27:12,169 --> 00:27:16,940
that we have to stick with rust and keep

00:27:15,200 --> 00:27:19,519
working on it and keep pushing it

00:27:16,940 --> 00:27:23,059
forward we can't abandon it we have to

00:27:19,519 --> 00:27:26,840
see the long game of rust and not in the

00:27:23,059 --> 00:27:29,659
long term I think it can and will become

00:27:26,840 --> 00:27:31,879
a very acceptable default for systems

00:27:29,659 --> 00:27:35,179
languages but we just have to give it

00:27:31,879 --> 00:27:39,639
that time to aged and mature and to gain

00:27:35,179 --> 00:27:43,340
the trust of different industries

00:27:39,639 --> 00:27:45,139
toolchain maturity this is one that hits

00:27:43,340 --> 00:27:47,570
a little closer to home when it comes to

00:27:45,139 --> 00:27:49,879
embedded systems so if you go the rust

00:27:47,570 --> 00:27:52,340
forage website they have the list of

00:27:49,879 --> 00:27:54,620
supported platforms it's actually really

00:27:52,340 --> 00:27:57,919
cool to see all the different platforms

00:27:54,620 --> 00:28:00,860
that are supported by rust in the

00:27:57,919 --> 00:28:03,139
different tiers but what you'll notice

00:28:00,860 --> 00:28:05,240
is that the tier one guaranteed to work

00:28:03,139 --> 00:28:08,269
does not have most of those platforms

00:28:05,240 --> 00:28:12,730
most of them are in tier 2 or tier 3 and

00:28:08,269 --> 00:28:15,230
I think as we push more into different

00:28:12,730 --> 00:28:17,899
exotic pieces of hardware and I say

00:28:15,230 --> 00:28:20,299
exotic exotic could mean like a PowerPC

00:28:17,899 --> 00:28:22,490
which to most of us is pretty antiquated

00:28:20,299 --> 00:28:24,980
but in the aerospace industry is

00:28:22,490 --> 00:28:27,139
honestly like pretty standard when you

00:28:24,980 --> 00:28:30,470
get to a bigger mission that needs like

00:28:27,139 --> 00:28:34,460
a rat hard CPU PowerPC is pretty common

00:28:30,470 --> 00:28:36,740
so to say right now like ok yeah you

00:28:34,460 --> 00:28:38,600
should use rust it's guaranteed to build

00:28:36,740 --> 00:28:40,970
like all that stuff is guaranteed to

00:28:38,600 --> 00:28:43,850
build it's not guaranteed to work for

00:28:40,970 --> 00:28:45,919
some people that won't be good enough so

00:28:43,850 --> 00:28:48,500
we need to continue to push these tool

00:28:45,919 --> 00:28:50,870
chains in these platforms to have better

00:28:48,500 --> 00:28:52,330
and better support and the more that we

00:28:50,870 --> 00:28:54,640
can say our guaranteed

00:28:52,330 --> 00:28:57,340
work the better buy-in I think we will

00:28:54,640 --> 00:29:01,649
get as people try to use rust on these

00:28:57,340 --> 00:29:01,649
more exotic or antiquated platforms

00:29:02,250 --> 00:29:09,039
lastly ecosystem maturity I think this

00:29:06,940 --> 00:29:12,190
and the torch a maturity language

00:29:09,039 --> 00:29:14,350
maturity all of these are just things

00:29:12,190 --> 00:29:17,350
that happen with time but I think this

00:29:14,350 --> 00:29:19,840
one in particular is the one that's most

00:29:17,350 --> 00:29:23,080
in the hands of everyone in this

00:29:19,840 --> 00:29:25,510
community the one thing that we do a lot

00:29:23,080 --> 00:29:28,419
at Q boss is testing and when looking

00:29:25,510 --> 00:29:30,880
for a testing framework in rust it's

00:29:28,419 --> 00:29:33,519
like okay mock testing and crates that I

00:29:30,880 --> 00:29:37,179
owe what do we get maybe we get like

00:29:33,519 --> 00:29:39,039
five or six different libraries you know

00:29:37,179 --> 00:29:43,029
some of them aren't stable some of them

00:29:39,039 --> 00:29:45,970
are nightly so like which one do I pick

00:29:43,029 --> 00:29:48,419
out of all of these and you know maybe

00:29:45,970 --> 00:29:51,010
some appear to be supported really well

00:29:48,419 --> 00:29:53,260
maybe some startup got off to a great

00:29:51,010 --> 00:29:56,529
start but now it's like just someone

00:29:53,260 --> 00:29:58,299
maintain it I'm not really sure trying

00:29:56,529 --> 00:30:01,889
to figure out what is the best choice

00:29:58,299 --> 00:30:07,200
sometimes it's tough I think as a

00:30:01,889 --> 00:30:10,330
community we need to take steps to be

00:30:07,200 --> 00:30:11,860
better better contributors not just your

00:30:10,330 --> 00:30:14,230
users I think the more that we can

00:30:11,860 --> 00:30:15,970
contribute back to the crates that we

00:30:14,230 --> 00:30:18,610
want to use and I think a lot of people

00:30:15,970 --> 00:30:20,110
do this it's not really something I

00:30:18,610 --> 00:30:22,240
started doing but it's something I

00:30:20,110 --> 00:30:24,669
really feel like I should do I can't

00:30:22,240 --> 00:30:27,429
just be up here saying these critical

00:30:24,669 --> 00:30:31,120
things and not taking steps to fix them

00:30:27,429 --> 00:30:33,429
I'm part of this community too so the

00:30:31,120 --> 00:30:35,380
more that we together can contribute and

00:30:33,429 --> 00:30:37,659
hold up and support these crates I think

00:30:35,380 --> 00:30:40,210
the quicker the ecosystem as a whole

00:30:37,659 --> 00:30:42,580
will mature and better and better

00:30:40,210 --> 00:30:47,590
options will appear for people to use as

00:30:42,580 --> 00:30:48,730
they build on top of rust okay so

00:30:47,590 --> 00:30:52,870
closing thoughts

00:30:48,730 --> 00:30:55,330
we akibo Sui really like rust I don't

00:30:52,870 --> 00:30:58,960
think it's too much to say that we have

00:30:55,330 --> 00:31:01,809
taken a decently large gamble on the

00:30:58,960 --> 00:31:04,659
language and the ecosystem not our

00:31:01,809 --> 00:31:05,290
product is a framework we are chosen Rus

00:31:04,659 --> 00:31:07,450
is the

00:31:05,290 --> 00:31:09,670
primary language for that framework so I

00:31:07,450 --> 00:31:11,680
think that's a pretty strong statement

00:31:09,670 --> 00:31:13,960
that we believe in rust and we believe

00:31:11,680 --> 00:31:16,930
in its future and we are thankful for

00:31:13,960 --> 00:31:19,150
rust and all the different libraries and

00:31:16,930 --> 00:31:21,160
the people that support it and want to

00:31:19,150 --> 00:31:23,830
continue working with this community and

00:31:21,160 --> 00:31:26,530
you know hopefully growing together so

00:31:23,830 --> 00:31:28,870
thank you for you know the great gift of

00:31:26,530 --> 00:31:32,740
rust that you have given us and given to

00:31:28,870 --> 00:31:34,060
so many people and now lastly if you

00:31:32,740 --> 00:31:37,480
want to check out our flight software

00:31:34,060 --> 00:31:38,590
you just up here on github so please go

00:31:37,480 --> 00:31:41,050
out of my rust

00:31:38,590 --> 00:31:43,960
tell me I'm a terrible programmer please

00:31:41,050 --> 00:31:46,840
help me get better or you know give us

00:31:43,960 --> 00:31:59,089
suggestions so that's all thank you

00:31:46,840 --> 00:31:59,089
[Applause]

00:31:59,760 --> 00:32:03,390
[Music]

00:32:01,890 --> 00:32:08,359
you

00:32:03,390 --> 00:32:08,359

YouTube URL: https://www.youtube.com/watch?v=y5Yd3FC-kh8


