Title: RustConf 2018 - The Dark Secrets Lurking Inside cargo doc by Quiet Misdreavus
Publication date: 2018-09-06
Playlist: RustConf 2018
Description: 
	RustConf 2018 - The Dark Secrets Lurking Inside cargo doc by Quiet Misdreavus

Every Rustacean reads the standard library docs (or some other library docs) sooner or later. Many Rustaceans have run cargo doc to generate some documentation for their own library or their dependencies. But how many have looked at the tool behind cargo doc? In this talk, I'll divulge some hidden secrets of rustdoc, the tool used by cargo doc to generate documentation.
Captions: 
	00:00:00,410 --> 00:01:06,500
[Music]

00:00:15,820 --> 00:01:17,900
so this is in being able to say I like

00:01:06,500 --> 00:01:22,369
dogs like like me too much just doing

00:01:17,900 --> 00:01:38,390
tales in depth about things so it means

00:01:22,369 --> 00:01:41,780
a lot to me that we have this about some

00:01:38,390 --> 00:01:43,990
of the like obscure things about the

00:01:41,780 --> 00:01:43,990
docks

00:01:52,400 --> 00:02:01,780
so how many people in this room

00:01:56,590 --> 00:02:01,780
recognize like this like pros

00:02:01,810 --> 00:02:04,810
near-universal

00:02:06,420 --> 00:02:15,210
so this is basically the output of a dog

00:02:12,540 --> 00:02:18,030
it's consistent on like every library

00:02:15,210 --> 00:02:20,010
that you're gonna look at unless they do

00:02:18,030 --> 00:02:23,190
like have their own little guys I'll

00:02:20,010 --> 00:02:26,490
have to decide so like it's gonna look

00:02:23,190 --> 00:02:31,050
very much the same for a lot of places

00:02:26,490 --> 00:02:32,820
and so like kind of getting into a few

00:02:31,050 --> 00:02:36,780
place special things you can do with it

00:02:32,820 --> 00:02:38,459
a lot of the like handwritten box this

00:02:36,780 --> 00:02:40,650
you have in there

00:02:38,459 --> 00:02:43,470
Russ dog has the ability to fold those

00:02:40,650 --> 00:02:45,930
up it in case like you just see the

00:02:43,470 --> 00:02:53,810
listing of things and there is this

00:02:45,930 --> 00:02:56,400
button off in the corner and there is

00:02:53,810 --> 00:02:58,320
not only just like the hand written

00:02:56,400 --> 00:03:00,000
prose but also awake the type

00:02:58,320 --> 00:03:02,580
declaration is everything that goes into

00:03:00,000 --> 00:03:05,250
a training bowl will just like really

00:03:02,580 --> 00:03:09,060
condense these methods there are these

00:03:05,250 --> 00:03:13,769
traits to chase another really powerful

00:03:09,060 --> 00:03:24,630
thing that Russ talk does that is really

00:03:13,769 --> 00:03:27,680
cool is that it packages the source so

00:03:24,630 --> 00:03:32,300
that a lot of these things if you have

00:03:27,680 --> 00:03:32,300
this item that you're looking at there's

00:04:36,400 --> 00:04:39,460
[Music]

00:04:45,139 --> 00:04:50,820
good is this button for that on the

00:04:48,510 --> 00:04:54,630
crate root you can say see olive here's

00:04:50,820 --> 00:04:56,910
y'all studs items and you click it and

00:04:54,630 --> 00:05:00,840
it's just this big ol list the page is

00:04:56,910 --> 00:05:02,789
actually really huge where you have

00:05:00,840 --> 00:05:03,900
absolutely everything by name you can

00:05:02,789 --> 00:05:08,490
say well I remembered this thing was

00:05:03,900 --> 00:05:09,750
called split or something and you can

00:05:08,490 --> 00:05:12,780
control that for it if you don't want to

00:05:09,750 --> 00:05:16,440
use the JavaScript search in there

00:05:12,780 --> 00:05:18,090
speaking of if you look for a type in

00:05:16,440 --> 00:05:19,199
the JavaScript search in the little

00:05:18,090 --> 00:05:21,720
search bar at the top of the docs

00:05:19,199 --> 00:05:24,780
there's actually these these links and

00:05:21,720 --> 00:05:27,240
parameters and return types are tabs

00:05:24,780 --> 00:05:29,099
that you can use to say if like

00:05:27,240 --> 00:05:31,080
I search for back here and you can say

00:05:29,099 --> 00:05:34,260
will show me all the functions that take

00:05:31,080 --> 00:05:36,870
Veck as a parameter or show me all the

00:05:34,260 --> 00:05:38,160
functions that return back and so it's

00:05:36,870 --> 00:05:40,199
really nice to be able to say well

00:05:38,160 --> 00:05:42,060
here's kind of a way that you can see

00:05:40,199 --> 00:05:45,690
how the type is used how you can get one

00:05:42,060 --> 00:05:48,139
of these types and so I'd like nice fun

00:05:45,690 --> 00:05:48,139
thing to do

00:05:48,150 --> 00:05:53,669
and there's like a bunch of little

00:05:50,400 --> 00:05:56,460
things that the docs has I have a hard

00:05:53,669 --> 00:05:57,780
time keeps track of it all sometimes but

00:05:56,460 --> 00:06:00,870
here's like just like a handful of

00:05:57,780 --> 00:06:02,880
things there's keyboard shortcuts that

00:06:00,870 --> 00:06:04,919
you can use there's like settings to

00:06:02,880 --> 00:06:08,060
automatically fold or unfold things and

00:06:04,919 --> 00:06:12,120
like there you can search for the

00:06:08,060 --> 00:06:13,740
operator symbols of traits that

00:06:12,120 --> 00:06:15,240
correspond to those operators and you

00:06:13,740 --> 00:06:16,830
can go straight to those traits without

00:06:15,240 --> 00:06:18,690
having to remember what was the thing

00:06:16,830 --> 00:06:20,370
what's the name of the trait that you

00:06:18,690 --> 00:06:29,729
use with star

00:06:20,370 --> 00:06:33,570
well they here its mole and DRF so I've

00:06:29,729 --> 00:06:37,639
tried to be cagey with it but when you

00:06:33,570 --> 00:06:39,870
run cargo dock much like when it

00:06:37,639 --> 00:06:42,419
compiles your code with cargo build or

00:06:39,870 --> 00:06:44,520
cargo run cargo just kind of like shells

00:06:42,419 --> 00:06:46,229
out - another tool that comes with the

00:06:44,520 --> 00:06:48,810
rest distribution that tool is called

00:06:46,229 --> 00:06:50,550
Russ stock so much like when you run

00:06:48,810 --> 00:06:53,010
cover bill that actually like builds up

00:06:50,550 --> 00:06:55,289
command to rust see the compiler when

00:06:53,010 --> 00:06:56,850
you run cargo dock it builds up a

00:06:55,289 --> 00:07:01,950
command to Russ dock so that it can

00:06:56,850 --> 00:07:04,169
create your documentation out and so to

00:07:01,950 --> 00:07:07,740
kind of introduce the next feature one

00:07:04,169 --> 00:07:10,830
of the really powerful features I think

00:07:07,740 --> 00:07:12,750
this hardly counts as obscure the really

00:07:10,830 --> 00:07:16,050
powerful features that Russ stock has is

00:07:12,750 --> 00:07:17,520
that you can if you write a code sample

00:07:16,050 --> 00:07:22,050
in your dogs

00:07:17,520 --> 00:07:24,570
it's it will treat that as a test so if

00:07:22,050 --> 00:07:28,620
you're on cargo test or if you limit it

00:07:24,570 --> 00:07:31,500
with cargo tests - - doc it Russ stock

00:07:28,620 --> 00:07:35,070
will scan your documentation peel out

00:07:31,500 --> 00:07:37,200
all of the all of the code samples that

00:07:35,070 --> 00:07:39,000
you've written in and try to compile it

00:07:37,200 --> 00:07:41,280
with your crate to make sure that you

00:07:39,000 --> 00:07:44,880
don't have code in your docks that goes

00:07:41,280 --> 00:07:46,560
stale and so it's really really helpful

00:07:44,880 --> 00:07:50,220
to have like these examples actually

00:07:46,560 --> 00:07:52,050
work and if you're running tests then

00:07:50,220 --> 00:07:55,349
you know you can actually verify that

00:07:52,050 --> 00:07:58,919
yes my Doc's actually show you code that

00:07:55,349 --> 00:08:01,860
works so it's worth kind of digging into

00:07:58,919 --> 00:08:04,170
what Russ doc does

00:08:01,860 --> 00:08:05,880
when it has your dog test so in the

00:08:04,170 --> 00:08:08,250
sample there I had this two line thing

00:08:05,880 --> 00:08:10,460
that just instantiated this empty struct

00:08:08,250 --> 00:08:14,820
some struct and then had a print line

00:08:10,460 --> 00:08:18,000
and so what once what Rostock wants to

00:08:14,820 --> 00:08:19,650
do is that it wants to take that code

00:08:18,000 --> 00:08:21,210
snippet that you gave it and turn it

00:08:19,650 --> 00:08:23,810
into an executable file that it can

00:08:21,210 --> 00:08:25,890
build and run and so that to that end it

00:08:23,810 --> 00:08:28,380
wraps it in the main function if there's

00:08:25,890 --> 00:08:29,610
not one already and then as an actual

00:08:28,380 --> 00:08:33,390
reference to your crate if it's not

00:08:29,610 --> 00:08:35,640
there already and the basically like the

00:08:33,390 --> 00:08:38,250
in short that's basically what it does

00:08:35,640 --> 00:08:43,310
there's kind of more things that I get

00:08:38,250 --> 00:08:45,930
into like if you have if you have the

00:08:43,310 --> 00:08:48,150
tests that depend on a certain unstable

00:08:45,930 --> 00:08:50,460
feature you don't have to write the main

00:08:48,150 --> 00:08:54,380
function yourself so if you have this

00:08:50,460 --> 00:08:56,880
sick rad feature here that will

00:08:54,380 --> 00:08:59,130
automatically get placed outside of your

00:08:56,880 --> 00:09:02,640
the main function that Russ stock puts

00:08:59,130 --> 00:09:05,190
in and same with when you have to

00:09:02,640 --> 00:09:07,140
reference multiple crates at once you

00:09:05,190 --> 00:09:09,600
can just write that in line with the

00:09:07,140 --> 00:09:11,280
expectation that no you're not gonna

00:09:09,600 --> 00:09:15,000
write them all in one place but it's

00:09:11,280 --> 00:09:16,860
kind of assumed that you put those in

00:09:15,000 --> 00:09:19,020
the Scopes where you want them or I

00:09:16,860 --> 00:09:22,980
guess in Russ 2018 you don't have extra

00:09:19,020 --> 00:09:24,840
great statements at all then like Russ

00:09:22,980 --> 00:09:26,490
talk will know to put those outside of

00:09:24,840 --> 00:09:30,210
the main function that runs so that the

00:09:26,490 --> 00:09:33,780
Scopes work out properly there's one

00:09:30,210 --> 00:09:37,080
last thing that it does because doc

00:09:33,780 --> 00:09:40,320
tests can kind of hit a few style

00:09:37,080 --> 00:09:44,880
lengths that are pretty common it adds

00:09:40,320 --> 00:09:47,490
this allow unused lint to any used

00:09:44,880 --> 00:09:50,010
attribute to kind of ignore a handful of

00:09:47,490 --> 00:09:52,140
Lintz that are common to hit and doc

00:09:50,010 --> 00:09:55,080
tests like in the one that i got i

00:09:52,140 --> 00:09:56,760
assigned this my struct variable and i

00:09:55,080 --> 00:10:00,330
don't use it so that's an unused

00:09:56,760 --> 00:10:02,490
variable wind but say we don't want that

00:10:00,330 --> 00:10:04,020
say we want to make sure see we have

00:10:02,490 --> 00:10:05,370
denial warnings on our crate and we want

00:10:04,020 --> 00:10:07,950
to make sure our doc tests are held to

00:10:05,370 --> 00:10:09,840
the same standard there's a way to do

00:10:07,950 --> 00:10:13,980
that with this mouthful of an attribute

00:10:09,840 --> 00:10:15,750
here this doc test adder can basically

00:10:13,980 --> 00:10:18,509
it takes the insides of that

00:10:15,750 --> 00:10:21,779
and replaces that crate attribute to

00:10:18,509 --> 00:10:23,519
allow unused with whatever you put there

00:10:21,779 --> 00:10:27,180
so here I've replaced it with deny

00:10:23,519 --> 00:10:30,050
warnings and to kind of show it off like

00:10:27,180 --> 00:10:32,370
this is kind of what comes out of it and

00:10:30,050 --> 00:10:35,009
to kind of prove that it happened I had

00:10:32,370 --> 00:10:36,839
that same code snippet and tried to run

00:10:35,009 --> 00:10:39,449
cargo tests on it and naturally it

00:10:36,839 --> 00:10:44,160
complains with that unused variables

00:10:39,449 --> 00:10:48,689
lint so like the standard library does

00:10:44,160 --> 00:10:50,790
this a lot I think it does it does deny

00:10:48,689 --> 00:10:53,790
warnings and but allows a handful of

00:10:50,790 --> 00:10:58,199
like deprecated so that it can document

00:10:53,790 --> 00:11:00,209
deprecated things and so it uses this to

00:10:58,199 --> 00:11:02,370
kind of control to make sure that it's

00:11:00,209 --> 00:11:07,110
doc tests or halls are the same standard

00:11:02,370 --> 00:11:10,819
as its code so to kind of lead into the

00:11:07,110 --> 00:11:14,750
next section it's worth noting that

00:11:10,819 --> 00:11:18,750
rustic liens on the compiler a lot to

00:11:14,750 --> 00:11:21,569
run through your crate and get all of

00:11:18,750 --> 00:11:23,339
the information out of it so it's these

00:11:21,569 --> 00:11:25,589
dot comments that you may or may not

00:11:23,339 --> 00:11:26,879
have seen those are actually specially

00:11:25,589 --> 00:11:31,050
recognized by the compiler they're

00:11:26,879 --> 00:11:36,120
effectively aliases for these doc

00:11:31,050 --> 00:11:38,309
attributes here so the the compiler

00:11:36,120 --> 00:11:40,529
itself will look at these doc comments

00:11:38,309 --> 00:11:42,839
and say okay well this is just a doc

00:11:40,529 --> 00:11:47,009
attribute I'm going to convert it into

00:11:42,839 --> 00:11:48,480
this form here and so that bottom

00:11:47,009 --> 00:11:53,939
section is basically what Russ doc sees

00:11:48,480 --> 00:11:56,939
when it runs on your crate and leaning

00:11:53,939 --> 00:11:58,589
on that the doc attribute itself has a

00:11:56,939 --> 00:12:00,870
few kind of overloaded things I

00:11:58,589 --> 00:12:04,110
mentioned one earlier with that doc test

00:12:00,870 --> 00:12:08,399
attribute one but there's several others

00:12:04,110 --> 00:12:10,680
that it uses the just kind of like lists

00:12:08,399 --> 00:12:12,750
these off HTML root URL is something you

00:12:10,680 --> 00:12:15,149
can use to control how other crates link

00:12:12,750 --> 00:12:17,790
to yours when they use your crate as a

00:12:15,149 --> 00:12:19,649
dependency so like the standard library

00:12:17,790 --> 00:12:22,170
does this to make links go to night the

00:12:19,649 --> 00:12:25,430
nightly Doc's several crates use this to

00:12:22,170 --> 00:12:28,010
link to doc star s instead of

00:12:25,430 --> 00:12:31,790
just noting if their docks aren't made

00:12:28,010 --> 00:12:34,610
locally dock in line and dock no in line

00:12:31,790 --> 00:12:37,510
are ways to handle re-export statements

00:12:34,610 --> 00:12:40,760
so if you've used or seen a pub use

00:12:37,510 --> 00:12:43,040
statement to sort of publicly relocate

00:12:40,760 --> 00:12:46,370
something from one portion of your crate

00:12:43,040 --> 00:12:50,060
to another rustic can handle those based

00:12:46,370 --> 00:12:53,420
on how the original is visible to either

00:12:50,060 --> 00:12:55,490
copy in the that other things docks or

00:12:53,420 --> 00:12:58,339
not but you can use these dock and line

00:12:55,490 --> 00:13:00,380
dock no in line attributes to tell

00:12:58,339 --> 00:13:01,850
Rostock one way or the other I want this

00:13:00,380 --> 00:13:05,140
to print a pub use statement or I want

00:13:01,850 --> 00:13:05,140
this to actually print the type stocks

00:13:05,589 --> 00:13:12,110
dock hidden is kind of a way to control

00:13:10,029 --> 00:13:16,040
what things are actually visible in your

00:13:12,110 --> 00:13:17,899
docks so if you have your code base

00:13:16,040 --> 00:13:19,430
split up into multiple crates and you

00:13:17,899 --> 00:13:21,410
have something that's technically an

00:13:19,430 --> 00:13:23,230
implementation detail and you don't

00:13:21,410 --> 00:13:26,120
actually want to expose it as public API

00:13:23,230 --> 00:13:28,640
you can slap duck hidden on it so that

00:13:26,120 --> 00:13:30,529
it's still exported and other crates can

00:13:28,640 --> 00:13:32,779
use it but it won't appear in your

00:13:30,529 --> 00:13:36,160
documentation so you have this sort of

00:13:32,779 --> 00:13:40,610
unwritten expectation that okay this is

00:13:36,160 --> 00:13:42,620
not meant to be used in that way so it's

00:13:40,610 --> 00:13:45,980
just meant for people who work with the

00:13:42,620 --> 00:13:48,620
code directly I know I think the

00:13:45,980 --> 00:13:52,300
standard library does this on the i/o or

00:13:48,620 --> 00:13:57,200
enum it has this like non-exhaustive

00:13:52,300 --> 00:14:00,560
variant of it that it slap stock hidden

00:13:57,200 --> 00:14:01,940
on to make it appear that you can't

00:14:00,560 --> 00:14:04,790
match on the i/o error you know I'm

00:14:01,940 --> 00:14:06,050
exhaustively things like that and you

00:14:04,790 --> 00:14:10,820
can say this is an implementation detail

00:14:06,050 --> 00:14:12,410
don't depend on this dock include is a

00:14:10,820 --> 00:14:15,020
relatively relatively recent addition

00:14:12,410 --> 00:14:18,500
it's still unstable to use needs a

00:14:15,020 --> 00:14:20,839
future attribute and what this does is

00:14:18,500 --> 00:14:22,760
it makes it so that say if you have like

00:14:20,839 --> 00:14:25,940
the standard library a whole lot of

00:14:22,760 --> 00:14:28,970
docks on one thing it kind of blows up

00:14:25,940 --> 00:14:34,160
your source files and it has a lot of

00:14:28,970 --> 00:14:36,650
this empty text that has it's not

00:14:34,160 --> 00:14:39,120
relevant to the compilation of your code

00:14:36,650 --> 00:14:43,310
but it prevents you from seeing a

00:14:39,120 --> 00:14:46,050
on one page with Doc include you can say

00:14:43,310 --> 00:14:47,520
I'm not gonna write this as doc comments

00:14:46,050 --> 00:14:50,190
I'm gonna write this in a separate file

00:14:47,520 --> 00:14:53,250
hey Russ talk copy paste that in

00:14:50,190 --> 00:14:56,250
whenever you run and you can have your

00:14:53,250 --> 00:14:57,750
documentation in separate files so that

00:14:56,250 --> 00:15:00,420
you can track it separately and they

00:14:57,750 --> 00:15:04,589
don't get in the way of the code of your

00:15:00,420 --> 00:15:08,190
library in doc CFG is content as the

00:15:04,589 --> 00:15:10,710
subject of the next few slides so if

00:15:08,190 --> 00:15:12,690
you've rummaged around the standard

00:15:10,710 --> 00:15:17,850
library for a while you may have noticed

00:15:12,690 --> 00:15:20,810
this os module in it and on the

00:15:17,850 --> 00:15:24,330
officially hosted docs it has these

00:15:20,810 --> 00:15:25,710
Linux raw UNIX and Windows sub modules

00:15:24,330 --> 00:15:30,330
on it some of which are only available

00:15:25,710 --> 00:15:33,630
on those respective platforms this is

00:15:30,330 --> 00:15:35,730
that there's actually a lot more module

00:15:33,630 --> 00:15:37,950
is in there which kind of gets at the

00:15:35,730 --> 00:15:39,870
the problem that behind some of this

00:15:37,950 --> 00:15:44,730
conditional this platform specific

00:15:39,870 --> 00:15:49,610
documentation in that because Russ doc

00:15:44,730 --> 00:15:51,870
leans on the compiler to process code

00:15:49,610 --> 00:15:53,520
conditional compilation happens way

00:15:51,870 --> 00:15:56,670
before Russ doc can get to it and this

00:15:53,520 --> 00:16:00,959
is a big problem in an open question is

00:15:56,670 --> 00:16:04,970
how to really deal with it so I have

00:16:00,959 --> 00:16:09,120
this another demo project up here that

00:16:04,970 --> 00:16:10,980
uses these traits in staros to get the

00:16:09,120 --> 00:16:13,500
size of the file I think the actual

00:16:10,980 --> 00:16:16,050
metadata straps these but for the

00:16:13,500 --> 00:16:18,870
purposes of this demo I just have these

00:16:16,050 --> 00:16:20,640
platform specific things in here and I

00:16:18,870 --> 00:16:23,279
ran the docs on Linux and I ran the docs

00:16:20,640 --> 00:16:25,950
on Windows and as you can see it's

00:16:23,279 --> 00:16:29,910
different depending on what system you

00:16:25,950 --> 00:16:32,640
actually ran the rusick executable on so

00:16:29,910 --> 00:16:35,190
to get around this you might first think

00:16:32,640 --> 00:16:37,560
well Rostock doesn't need to actually

00:16:35,190 --> 00:16:39,990
fully compile the code it doesn't need

00:16:37,560 --> 00:16:42,360
to link against platform libraries it

00:16:39,990 --> 00:16:44,640
doesn't need to like translate any of

00:16:42,360 --> 00:16:47,150
the code to do to machine code or

00:16:44,640 --> 00:16:50,010
whatever so let's just make it available

00:16:47,150 --> 00:16:51,580
to Russ talk whenever Russ talk is

00:16:50,010 --> 00:16:53,529
running

00:16:51,580 --> 00:16:56,890
there's a caveat about the the codes

00:16:53,529 --> 00:16:59,320
featured here that CFG Rostock is

00:16:56,890 --> 00:17:01,029
supposed to be there's an open PR to

00:16:59,320 --> 00:17:04,079
make this so that when our stock is

00:17:01,029 --> 00:17:06,250
running that's set right now the

00:17:04,079 --> 00:17:08,319
suggested way to do this is by using a

00:17:06,250 --> 00:17:11,920
carpet feature so you would type cargo -

00:17:08,319 --> 00:17:16,750
feature docks or whatever and use that

00:17:11,920 --> 00:17:21,160
as your conditional compilation but and

00:17:16,750 --> 00:17:22,870
in any case you tell Russ doc hey this

00:17:21,160 --> 00:17:24,490
thing is available on our utility

00:17:22,870 --> 00:17:27,040
compiler this thing is available both on

00:17:24,490 --> 00:17:28,720
UNIX and whenever I'm building docks or

00:17:27,040 --> 00:17:31,330
on Windows and whenever I'm building

00:17:28,720 --> 00:17:34,300
dogs and if you're just building your

00:17:31,330 --> 00:17:38,170
docks you get both things there cool

00:17:34,300 --> 00:17:41,320
problem solve right kind of say you have

00:17:38,170 --> 00:17:43,350
dog tests on these that use these items

00:17:41,320 --> 00:17:47,679
well now you need to build and execute

00:17:43,350 --> 00:17:49,330
those tests as executables which means

00:17:47,679 --> 00:17:51,309
they need to link against the platform

00:17:49,330 --> 00:17:52,990
libraries which may not be available on

00:17:51,309 --> 00:17:57,850
the platform where you're running Russ

00:17:52,990 --> 00:18:00,669
doc so here I made a couple empty doc

00:17:57,850 --> 00:18:02,830
tests that just called the thing and I

00:18:00,669 --> 00:18:04,890
ran around the living system and the

00:18:02,830 --> 00:18:09,220
windows size function is not available

00:18:04,890 --> 00:18:12,040
because I'm not running on Windows so to

00:18:09,220 --> 00:18:14,440
get around this that's where the doc CFG

00:18:12,040 --> 00:18:18,850
attribute comes in so this was

00:18:14,440 --> 00:18:22,450
introduced to get the stud OS module

00:18:18,850 --> 00:18:25,150
that I showed earlier to make all these

00:18:22,450 --> 00:18:27,610
things come together and so this is the

00:18:25,150 --> 00:18:28,990
problem it really solves is that yes you

00:18:27,610 --> 00:18:30,520
can tell Russ talk about all of the

00:18:28,990 --> 00:18:32,890
things all at once but then you can't

00:18:30,520 --> 00:18:34,720
have dog tests on it and but this tells

00:18:32,890 --> 00:18:38,020
Russ doc hey this thing is actually only

00:18:34,720 --> 00:18:40,450
supposed to run on UNIX or on Windows or

00:18:38,020 --> 00:18:42,730
on little endian systems or on x86 64

00:18:40,450 --> 00:18:48,610
whatever anything you can slap the CFG

00:18:42,730 --> 00:18:51,330
on and I put so in the in that dummy

00:18:48,610 --> 00:18:55,120
project I put doc CFG attributes on and

00:18:51,330 --> 00:18:57,100
ran tests again and it only ran the UNIX

00:18:55,120 --> 00:18:58,419
size test because now it knows I'm not

00:18:57,100 --> 00:19:01,110
supposed to run the Windows one I'm not

00:18:58,419 --> 00:19:01,110
running on Windows

00:19:01,510 --> 00:19:05,409
and the other thing that it does is it

00:19:04,059 --> 00:19:07,779
creates those little banners so that

00:19:05,409 --> 00:19:09,730
units that square brackets units square

00:19:07,779 --> 00:19:13,419
brackets windows and the blue this is

00:19:09,730 --> 00:19:15,190
supported on windows only banner the

00:19:13,419 --> 00:19:18,100
dock CFG attribute actually puts those

00:19:15,190 --> 00:19:20,889
in so this is a way you can say outside

00:19:18,100 --> 00:19:24,039
of the text that you write that this is

00:19:20,889 --> 00:19:26,799
meant for this specific platform this

00:19:24,039 --> 00:19:29,830
specific configuration and so that's

00:19:26,799 --> 00:19:31,840
like it's something really cool that it

00:19:29,830 --> 00:19:34,419
can do and but like I said like true

00:19:31,840 --> 00:19:36,630
handling a conditional compilation is a

00:19:34,419 --> 00:19:38,440
bit of as I've described it a holy grail

00:19:36,630 --> 00:19:40,600
because of how much it leans on the

00:19:38,440 --> 00:19:44,799
compiler but this is a good compromise

00:19:40,600 --> 00:19:48,450
if you can be conscious of I'm running

00:19:44,799 --> 00:19:51,610
of when you're running dogs so moving on

00:19:48,450 --> 00:19:54,130
in addition to attributes that it uses

00:19:51,610 --> 00:19:57,039
they're also a handful of CLI flags that

00:19:54,130 --> 00:20:01,480
you can use so I've just listed a bunch

00:19:57,039 --> 00:20:03,429
here of note is the the document private

00:20:01,480 --> 00:20:05,380
items attribute which is really nice if

00:20:03,429 --> 00:20:07,899
you want to have a separate set of docs

00:20:05,380 --> 00:20:10,809
for when you're writing on the crate in

00:20:07,899 --> 00:20:12,519
question what that will do is it usually

00:20:10,809 --> 00:20:15,399
when Russ doc runs it actually will

00:20:12,519 --> 00:20:18,250
remove and not show items that are

00:20:15,399 --> 00:20:19,419
internal to your great this is great if

00:20:18,250 --> 00:20:21,940
you just want to have if you have a

00:20:19,419 --> 00:20:23,740
library and you want to say tell users

00:20:21,940 --> 00:20:26,380
of that library what you can do with it

00:20:23,740 --> 00:20:30,220
but it's less useful when you're working

00:20:26,380 --> 00:20:32,529
on the library itself so you can hand

00:20:30,220 --> 00:20:36,639
Rostock this flag document private items

00:20:32,529 --> 00:20:41,070
and say okay well I'm actually going to

00:20:36,639 --> 00:20:41,070
look at the internal things of this now

00:20:41,100 --> 00:20:45,789
but this over to the next hint of the

00:20:43,720 --> 00:20:47,830
next few slides is actually the HTML and

00:20:45,789 --> 00:20:49,570
header HTML before content HTML after

00:20:47,830 --> 00:20:51,460
content because they do kind of silly

00:20:49,570 --> 00:20:55,029
things depending on what you're doing

00:20:51,460 --> 00:20:57,669
with them so I have this another demo

00:20:55,029 --> 00:20:59,860
project here and I have just this

00:20:57,669 --> 00:21:03,309
regular page here regular stock output

00:20:59,860 --> 00:21:05,230
cool but say you want to add something

00:21:03,309 --> 00:21:07,269
to your page so you have like a top bar

00:21:05,230 --> 00:21:09,490
or you want to add like a little

00:21:07,269 --> 00:21:10,809
signature to the bottom of each page or

00:21:09,490 --> 00:21:13,080
you have like a JavaScript library you

00:21:10,809 --> 00:21:16,930
want to pull in

00:21:13,080 --> 00:21:19,270
you can do that so two hand flags to

00:21:16,930 --> 00:21:22,720
Rostock via cargo there's this cargo

00:21:19,270 --> 00:21:24,400
rest command and you can you can use

00:21:22,720 --> 00:21:27,550
that and it will run docks on just your

00:21:24,400 --> 00:21:30,310
crate and hand these extra attributes

00:21:27,550 --> 00:21:33,940
that you give it to Rostock whenever it

00:21:30,310 --> 00:21:37,870
calls it so I added this extra file here

00:21:33,940 --> 00:21:39,220
that's just a tiny HTML snippet and it

00:21:37,870 --> 00:21:43,840
adds a little positive affirmation to

00:21:39,220 --> 00:21:47,530
your docks as far as practical

00:21:43,840 --> 00:21:50,980
applications the the curve two five five

00:21:47,530 --> 00:21:53,800
one nine Dalek library and its internals

00:21:50,980 --> 00:21:55,720
docks it actually fully writes out like

00:21:53,800 --> 00:21:59,170
the mathematical formulas and symbols

00:21:55,720 --> 00:22:01,570
for like the like theory behind what

00:21:59,170 --> 00:22:05,590
it's doing and it uses this Cossack

00:22:01,570 --> 00:22:08,200
library to lay that out and it uses HTML

00:22:05,590 --> 00:22:11,080
and header to pull that library in so

00:22:08,200 --> 00:22:12,580
that all its Doc's can use it and

00:22:11,080 --> 00:22:15,490
there's also an impractical application

00:22:12,580 --> 00:22:19,450
you can do in case you want to plus your

00:22:15,490 --> 00:22:21,160
Doc's with ponies this is a real URL if

00:22:19,450 --> 00:22:22,420
you have a laptop with Wi-Fi you can

00:22:21,160 --> 00:22:26,110
actually go to this and see this in

00:22:22,420 --> 00:22:28,830
action it's animated it's fun so this is

00:22:26,110 --> 00:22:33,250
kind of what popularized this I guess

00:22:28,830 --> 00:22:35,680
Henry valence and Isis Lovecraft's kind

00:22:33,250 --> 00:22:37,000
of put this together and you're gonna

00:22:35,680 --> 00:22:39,790
talk to me first when they were putting

00:22:37,000 --> 00:22:41,080
it together and it's a shame that

00:22:39,790 --> 00:22:45,310
they're in the next room talking right

00:22:41,080 --> 00:22:48,070
now and basically said well this is

00:22:45,310 --> 00:22:50,260
something that we can use to render

00:22:48,070 --> 00:22:52,600
contact and then they looked at it and

00:22:50,260 --> 00:22:55,810
said well Doc's RS you can hand that

00:22:52,600 --> 00:22:57,700
arbitrary arguments in the configuration

00:22:55,810 --> 00:23:02,050
there and the crate docks of ponies you

00:22:57,700 --> 00:23:04,930
can see and well how about if we just

00:23:02,050 --> 00:23:07,390
add in the thing that plasters ponies

00:23:04,930 --> 00:23:09,640
all over your web page and do it to your

00:23:07,390 --> 00:23:10,930
Doc's and they give you like the ponies

00:23:09,640 --> 00:23:13,540
crate if you go to that URL they give

00:23:10,930 --> 00:23:15,910
you instructions as to how to do it and

00:23:13,540 --> 00:23:17,680
so like it kind of started a

00:23:15,910 --> 00:23:19,600
conversation as to what counts as what

00:23:17,680 --> 00:23:22,840
they call XSS cross-site ships

00:23:19,600 --> 00:23:24,790
cross-site scripting but in my mind is

00:23:22,840 --> 00:23:25,809
just kind of a novel use of features

00:23:24,790 --> 00:23:29,259
that are already there

00:23:25,809 --> 00:23:31,719
so I think it's kind of funny so I do

00:23:29,259 --> 00:23:34,149
have a little bit of time so let's take

00:23:31,719 --> 00:23:39,190
a second to kind of look at what goes on

00:23:34,149 --> 00:23:42,219
under the hood so Russ doc has been a

00:23:39,190 --> 00:23:44,649
rap has been around for a while I kind

00:23:42,219 --> 00:23:46,869
of mentioned that in a minute but it

00:23:44,649 --> 00:23:48,759
lives it's code lives in the compilers

00:23:46,869 --> 00:23:51,159
repo right alongside the compiler and

00:23:48,759 --> 00:23:55,149
the standard library so if you look in

00:23:51,159 --> 00:23:56,769
the the rust repos source directory in

00:23:55,149 --> 00:23:58,989
the middle of the massive list of

00:23:56,769 --> 00:24:01,119
subfolders there there's a little one

00:23:58,989 --> 00:24:04,059
called Lib Russ doc and that's where all

00:24:01,119 --> 00:24:05,950
of Russ talks code lives and so like all

00:24:04,059 --> 00:24:09,999
of the all of the stuff that it adds on

00:24:05,950 --> 00:24:13,929
top of the compiler lives there I as a

00:24:09,999 --> 00:24:16,509
side note Russ talk is kind of old like

00:24:13,929 --> 00:24:20,320
this is the PR I dug it out that first

00:24:16,509 --> 00:24:22,450
added the very small bare-bones things

00:24:20,320 --> 00:24:24,249
that scraped out doc attributes this was

00:24:22,450 --> 00:24:25,359
before I was talking with someone else

00:24:24,249 --> 00:24:30,489
this morning apparently this was before

00:24:25,359 --> 00:24:32,710
doc comments were a thing so I just have

00:24:30,489 --> 00:24:34,809
like the timeline there July 2009 graden

00:24:32,710 --> 00:24:37,119
started like writing on rust as a

00:24:34,809 --> 00:24:39,639
private project shortly after it was

00:24:37,119 --> 00:24:41,080
made public and then in April 2011 it

00:24:39,639 --> 00:24:43,149
switched from being written in oh camel

00:24:41,080 --> 00:24:45,149
to written in rust itself so I started

00:24:43,149 --> 00:24:47,349
self hosting just a few months later

00:24:45,149 --> 00:24:49,719
Russ stock was added so Russ talk is

00:24:47,349 --> 00:24:51,570
almost as old as the compiler this means

00:24:49,719 --> 00:24:54,729
a lot of hands have been placed on it

00:24:51,570 --> 00:24:57,820
and it's a little it's a little curse in

00:24:54,729 --> 00:25:01,169
a sense I have this joke and a handful

00:24:57,820 --> 00:25:02,919
of friends that rustic kind of

00:25:01,169 --> 00:25:06,669
occasionally kind of gets its

00:25:02,919 --> 00:25:09,159
information by not kosher methods so

00:25:06,669 --> 00:25:10,960
first we asked nicely there's the actual

00:25:09,159 --> 00:25:14,080
compiler things that the compiler does

00:25:10,960 --> 00:25:17,529
for what it does and sometimes we have

00:25:14,080 --> 00:25:19,200
to go to around that somehow so I

00:25:17,529 --> 00:25:21,519
mentioned the talk--i attribute earlier

00:25:19,200 --> 00:25:22,989
that doc attribute is actually fully

00:25:21,519 --> 00:25:24,729
white listed about the compiler the

00:25:22,989 --> 00:25:26,919
compiler just ignores the doc attribute

00:25:24,729 --> 00:25:29,979
it passes it through but it doesn't do

00:25:26,919 --> 00:25:31,599
anything with it so Russ doc I know I've

00:25:29,979 --> 00:25:33,639
used that personally whenever I've added

00:25:31,599 --> 00:25:36,330
an extension attribute or us dog to just

00:25:33,639 --> 00:25:38,169
hack on it and deal with it later

00:25:36,330 --> 00:25:38,800
occasionally we have to break the

00:25:38,169 --> 00:25:43,930
compiler to

00:25:38,800 --> 00:25:45,730
we want so I have notes here the there's

00:25:43,930 --> 00:25:48,880
a feature called introduc links where

00:25:45,730 --> 00:25:50,890
you can write your link target to point

00:25:48,880 --> 00:25:52,960
at a type instead of the actual HTML

00:25:50,890 --> 00:25:56,050
page to do that we had to break the

00:25:52,960 --> 00:25:58,990
compiled hello because name resolution

00:25:56,050 --> 00:26:01,300
happens before the part that Rostock

00:25:58,990 --> 00:26:03,700
usually runs at so we had to reorder

00:26:01,300 --> 00:26:06,790
TechEd part of the compiler to be able

00:26:03,700 --> 00:26:09,160
to help lotta that information and if

00:26:06,790 --> 00:26:12,130
things get drastic enough we threatened

00:26:09,160 --> 00:26:14,290
to break the compilers friends so a

00:26:12,130 --> 00:26:18,000
couple years ago maybe a year and a half

00:26:14,290 --> 00:26:20,230
ago the way that the compiler was built

00:26:18,000 --> 00:26:23,530
changed and Russ talk really benefited

00:26:20,230 --> 00:26:25,180
from that so it was this complete

00:26:23,530 --> 00:26:27,490
upheaval in the compiler repo and the

00:26:25,180 --> 00:26:29,860
net effect of it all was that Russ doc

00:26:27,490 --> 00:26:31,450
used to be built as part of the full

00:26:29,860 --> 00:26:34,720
compiler process which takes like an

00:26:31,450 --> 00:26:36,430
hour and a half on my system and now it

00:26:34,720 --> 00:26:40,480
builds on its own which takes like three

00:26:36,430 --> 00:26:45,130
minutes on my system it's great and then

00:26:40,480 --> 00:26:46,540
also there is this way you can there's

00:26:45,130 --> 00:26:48,100
this function and they're called pretty

00:26:46,540 --> 00:26:50,320
printing that has a handful of like

00:26:48,100 --> 00:26:52,390
transformations on the code and one of

00:26:50,320 --> 00:26:55,750
the things that it does is there's this

00:26:52,390 --> 00:26:58,390
version called everybody loops that

00:26:55,750 --> 00:27:00,490
replaces yes there are places all

00:26:58,390 --> 00:27:02,500
function bodies with a empty loop

00:27:00,490 --> 00:27:04,090
statement because empty loop statements

00:27:02,500 --> 00:27:07,330
type check to everything because

00:27:04,090 --> 00:27:10,390
nothing's coming out of that so this was

00:27:07,330 --> 00:27:14,020
done actually when the stud OS Doc's

00:27:10,390 --> 00:27:15,550
were put in because if you're not

00:27:14,020 --> 00:27:17,440
referencing anything inside your

00:27:15,550 --> 00:27:19,690
functions now you no longer have to

00:27:17,440 --> 00:27:21,250
worry about what's in there now you no

00:27:19,690 --> 00:27:25,060
longer have to worry about accidentally

00:27:21,250 --> 00:27:26,650
referencing platform stuff so because of

00:27:25,060 --> 00:27:28,870
the way I've laid this out the inside

00:27:26,650 --> 00:27:31,200
joke is that Russ talk is kind of like

00:27:28,870 --> 00:27:31,200
the Mafia

00:27:31,800 --> 00:27:36,790
but it provides a central community

00:27:34,300 --> 00:27:43,900
service so no one's really tried to stop

00:27:36,790 --> 00:27:45,820
it I have a couple slides here that I'm

00:27:43,900 --> 00:27:48,790
gonna actually gloss over if you read

00:27:45,820 --> 00:27:51,650
the full slides I have them online that

00:27:48,790 --> 00:27:54,050
like here's the full compiler process

00:27:51,650 --> 00:27:55,730
of what it does like I mentioned it's

00:27:54,050 --> 00:27:58,000
the jargon filled versions I'm kind of

00:27:55,730 --> 00:28:02,210
glossing cuz we're getting close to time

00:27:58,000 --> 00:28:04,100
but here's a few highlights so if you've

00:28:02,210 --> 00:28:07,610
looked around these this is kind of like

00:28:04,100 --> 00:28:10,370
I circling back to fun things that are

00:28:07,610 --> 00:28:12,740
in the display of documentation if

00:28:10,370 --> 00:28:14,270
you've noticed for a couple versions now

00:28:12,740 --> 00:28:19,390
there's been these auto trade

00:28:14,270 --> 00:28:22,809
implementations so this is novel because

00:28:19,390 --> 00:28:26,150
that sin dimple doesn't exist anywhere

00:28:22,809 --> 00:28:29,270
right because rest docks crates scrapes

00:28:26,150 --> 00:28:32,230
the text of your crate effectively it

00:28:29,270 --> 00:28:35,420
used to not even say that vac

00:28:32,230 --> 00:28:37,070
implemented sends or sync at all you

00:28:35,420 --> 00:28:39,440
just kind of had to assume that well if

00:28:37,070 --> 00:28:41,929
the items and the vac are sinkers and

00:28:39,440 --> 00:28:44,300
then that transfers to the vac now

00:28:41,929 --> 00:28:48,140
that's made obvious but to do that we

00:28:44,300 --> 00:28:49,550
had to break the compiler so that

00:28:48,140 --> 00:28:53,630
because we had to basically make up

00:28:49,550 --> 00:28:56,540
these dimples on the spot another fun

00:28:53,630 --> 00:28:59,210
highlight is that Russ lock outputs HTML

00:28:56,540 --> 00:29:06,320
but it's templating engine is a gigantic

00:28:59,210 --> 00:29:10,340
right macro call this is this is this is

00:29:06,320 --> 00:29:12,380
literally like in the in the Russ talk

00:29:10,340 --> 00:29:14,179
source there is this file that it's just

00:29:12,380 --> 00:29:15,800
like a massive skeleton of the HTML page

00:29:14,179 --> 00:29:17,420
and everything gets written in there and

00:29:15,800 --> 00:29:19,970
so everything that needs to be printed

00:29:17,420 --> 00:29:24,260
implements display and it's just slots

00:29:19,970 --> 00:29:26,990
in there internals wise Russell Arc has

00:29:24,260 --> 00:29:29,660
its own test suite has its own like form

00:29:26,990 --> 00:29:32,120
of tests to make sure that like we don't

00:29:29,660 --> 00:29:34,580
skip outputting anything that we are

00:29:32,120 --> 00:29:36,890
supposed to output so here it's just

00:29:34,580 --> 00:29:38,240
saying like we output fields that are

00:29:36,890 --> 00:29:39,620
public and instruct and we don't help

00:29:38,240 --> 00:29:42,410
put fields that are not public or are

00:29:39,620 --> 00:29:45,350
hidden and there are a couple hundred

00:29:42,410 --> 00:29:46,970
tests like this I think there's there's

00:29:45,350 --> 00:29:48,410
quite a few and it's kind of fun to be

00:29:46,970 --> 00:29:50,480
able to say like yeah we're actually

00:29:48,410 --> 00:29:53,840
like scanning the output of the HTML

00:29:50,480 --> 00:29:55,640
there so to wrap up I just kind of

00:29:53,840 --> 00:29:57,170
wanted to really mention the rest dog

00:29:55,640 --> 00:29:58,880
team there's actually an official Russ

00:29:57,170 --> 00:30:01,370
team to deal with the maintenance of

00:29:58,880 --> 00:30:02,480
Rostock and so it's it's us five Steve's

00:30:01,370 --> 00:30:04,620
on it I'm on it

00:30:02,480 --> 00:30:08,309
and they're a handful of others

00:30:04,620 --> 00:30:09,809
and we just kind of hang out and talk

00:30:08,309 --> 00:30:14,190
about compiler internals and how we

00:30:09,809 --> 00:30:15,840
should display Docs but it's you know

00:30:14,190 --> 00:30:17,880
it's just kind of fun if you're

00:30:15,840 --> 00:30:22,230
interested in kind of the gory internals

00:30:17,880 --> 00:30:25,620
of how a stock documentation goes from

00:30:22,230 --> 00:30:27,690
crate to Docs it's pretty fun but as

00:30:25,620 --> 00:30:29,400
they close you may or may not want to

00:30:27,690 --> 00:30:30,690
actually follow me on Twitter but if

00:30:29,400 --> 00:30:34,500
you'd like to verify that claim that's

00:30:30,690 --> 00:30:46,319
my handle otherwise that's all I've got

00:30:34,500 --> 00:30:46,319
[Applause]

00:30:46,980 --> 00:30:54,690
[Music]

00:30:52,630 --> 00:30:54,690

YouTube URL: https://www.youtube.com/watch?v=3wcXj67N6eE


