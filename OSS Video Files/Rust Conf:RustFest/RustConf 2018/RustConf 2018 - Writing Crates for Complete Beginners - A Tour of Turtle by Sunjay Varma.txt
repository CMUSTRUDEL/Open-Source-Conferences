Title: RustConf 2018 - Writing Crates for Complete Beginners - A Tour of Turtle by Sunjay Varma
Publication date: 2018-09-06
Playlist: RustConf 2018
Description: 
	RustConf 2018 - Writing Crates for Complete Beginners - A Tour of Turtle by Sunjay Varma

Turtle is a Rust graphics crate for creating animated drawings. It is designed to be used to teach programming to complete beginners using Rust. In this talk, you'll learn the inner workings of turtle. We'll show you how we managed to create a library that is both full of features and very easy to learn. We'll go deep into how turtle works and tell you the key aspects of creating a crate that is accessible for anyone of any skill level. You'll leave with new ideas for your own crates and a good understanding of what went into making turtle so beginner friendly.
Captions: 
	00:00:00,410 --> 00:00:18,140
[Music]

00:00:14,710 --> 00:00:20,690
okay hi everyone my name is Sanjay Varma

00:00:18,140 --> 00:00:23,900
I've been writing rust for just over two

00:00:20,690 --> 00:00:26,960
years now and I'm the author of a rest

00:00:23,900 --> 00:00:28,910
library or crate called turtle the

00:00:26,960 --> 00:00:31,010
turtle crate is unique in that it's

00:00:28,910 --> 00:00:33,230
designed to be usable by people who

00:00:31,010 --> 00:00:36,350
haven't learned programming before and

00:00:33,230 --> 00:00:38,210
it's actually a teaching tool that's for

00:00:36,350 --> 00:00:41,120
anybody who wants to teach Russ to other

00:00:38,210 --> 00:00:43,340
people today so today I'm going to talk

00:00:41,120 --> 00:00:45,380
to you about my experience creating

00:00:43,340 --> 00:00:48,320
turtle and tell you what the specific

00:00:45,380 --> 00:00:51,200
things that I did to make the crate as

00:00:48,320 --> 00:00:53,540
easy to use as possible there's a lot of

00:00:51,200 --> 00:00:55,370
thought and care that went into creating

00:00:53,540 --> 00:00:58,070
turtle and I'm really excited about

00:00:55,370 --> 00:01:00,680
sharing that with you today I'm gonna

00:00:58,070 --> 00:01:04,009
start by giving you an overview of

00:01:00,680 --> 00:01:06,140
turtle what it is and how to use it then

00:01:04,009 --> 00:01:08,539
I'm gonna give you a high-level tour of

00:01:06,140 --> 00:01:10,580
how turtle works and talk about some of

00:01:08,539 --> 00:01:13,910
the specific design decisions that I

00:01:10,580 --> 00:01:15,830
made to make turtle as usable as

00:01:13,910 --> 00:01:17,900
possible and to make sure that we can

00:01:15,830 --> 00:01:20,780
grow the turtle project as it matures

00:01:17,900 --> 00:01:23,750
I'll talk about some of the lessons I

00:01:20,780 --> 00:01:25,850
learned as I was creating turtle and

00:01:23,750 --> 00:01:28,640
give you some tips too on how to make

00:01:25,850 --> 00:01:31,580
your own projects accessible to a wider

00:01:28,640 --> 00:01:33,590
audience finally I'll finish off with

00:01:31,580 --> 00:01:36,049
some thoughts and a summary of what I've

00:01:33,590 --> 00:01:38,930
told you about so there are a lot of

00:01:36,049 --> 00:01:41,390
resources online for learning about rest

00:01:38,930 --> 00:01:43,970
there are full books online tutorials

00:01:41,390 --> 00:01:46,729
websites podcasts and YouTube channels

00:01:43,970 --> 00:01:47,299
and so where does turtle fit into all of

00:01:46,729 --> 00:01:49,400
this

00:01:47,299 --> 00:01:51,740
well the vast majority of these

00:01:49,400 --> 00:01:54,409
resources if not every single one of

00:01:51,740 --> 00:01:56,180
them is and at about the level of

00:01:54,409 --> 00:01:58,610
somebody who's learned at least one

00:01:56,180 --> 00:02:00,079
programming language in the past so

00:01:58,610 --> 00:02:02,540
while these resources give you a good

00:02:00,079 --> 00:02:04,520
introduction to rust not a lot of these

00:02:02,540 --> 00:02:07,579
resources give you a really good

00:02:04,520 --> 00:02:10,009
introduction to programming so just over

00:02:07,579 --> 00:02:11,989
a year ago Steve Crabb Nick who's the

00:02:10,009 --> 00:02:14,540
author of the rust book and the leader

00:02:11,989 --> 00:02:16,670
of the rust documentation team made this

00:02:14,540 --> 00:02:18,620
comment on reddit he said that rust

00:02:16,670 --> 00:02:20,630
could be somebody's first programming

00:02:18,620 --> 00:02:22,640
language but the resources and learning

00:02:20,630 --> 00:02:25,459
materials that are needed for that just

00:02:22,640 --> 00:02:25,730
don't exist yet so I thought about that

00:02:25,459 --> 00:02:27,530
call

00:02:25,730 --> 00:02:29,599
a lot because you know rust has

00:02:27,530 --> 00:02:32,920
incredibly good error messages it has a

00:02:29,599 --> 00:02:35,840
friendly kind and helpful community and

00:02:32,920 --> 00:02:37,459
really nice features that make you

00:02:35,840 --> 00:02:40,250
productive and allow you to have a lot

00:02:37,459 --> 00:02:43,519
of fun when you're programming my

00:02:40,250 --> 00:02:47,299
hypothesis is that rust is going to make

00:02:43,519 --> 00:02:49,580
a really great first language for anyone

00:02:47,299 --> 00:02:52,010
wanting to get into programming and so

00:02:49,580 --> 00:02:54,590
my goal with turtle is to create the

00:02:52,010 --> 00:02:57,049
resources and community that we need in

00:02:54,590 --> 00:02:58,670
order to make the rust in order to make

00:02:57,049 --> 00:03:02,390
the rust language a language that

00:02:58,670 --> 00:03:03,650
anybody can learn so now that you know

00:03:02,390 --> 00:03:05,900
what I'm actually out to accomplish

00:03:03,650 --> 00:03:08,750
let's talk a bit about what turtle

00:03:05,900 --> 00:03:11,030
actually is the concept of the turtle

00:03:08,750 --> 00:03:13,190
crate is actually pretty simple you have

00:03:11,030 --> 00:03:15,019
this window and in the middle of this

00:03:13,190 --> 00:03:17,660
window is this little triangle and that

00:03:15,019 --> 00:03:20,060
triangle is actually a turtle it's the

00:03:17,660 --> 00:03:22,519
turtles show so this turtle is pretty

00:03:20,060 --> 00:03:25,849
special if we enhance this image a bit

00:03:22,519 --> 00:03:28,700
you'll see that you'll see that this

00:03:25,849 --> 00:03:31,700
turtle actually has a pen attached to it

00:03:28,700 --> 00:03:33,560
still that's a real drawing that took me

00:03:31,700 --> 00:03:34,700
a lot of time to do despite what it

00:03:33,560 --> 00:03:37,519
looks like

00:03:34,700 --> 00:03:40,519
so this bat is pretty awesome because we

00:03:37,519 --> 00:03:44,209
can use it to draw pictures if you look

00:03:40,519 --> 00:03:47,180
here as the turtle moves it drags its

00:03:44,209 --> 00:03:49,639
tail and the pen actually draws the path

00:03:47,180 --> 00:03:52,579
that the turtle takes and so this is the

00:03:49,639 --> 00:03:55,250
central concept of the turtles right and

00:03:52,579 --> 00:03:57,019
you can draw all kinds of amazing things

00:03:55,250 --> 00:03:59,480
just by telling the turtle where to go

00:03:57,019 --> 00:04:00,829
all of these were drawn in turtle and

00:03:59,480 --> 00:04:03,500
some of them were actually contributed

00:04:00,829 --> 00:04:05,269
by people in the rest community you can

00:04:03,500 --> 00:04:07,760
find the source code for all these

00:04:05,269 --> 00:04:10,819
drawings in the examples directory of

00:04:07,760 --> 00:04:13,010
the turtle github repository the reason

00:04:10,819 --> 00:04:15,440
this is great for teaching is that the

00:04:13,010 --> 00:04:17,959
interface provided by turtle is fairly

00:04:15,440 --> 00:04:18,680
simple without being limited in

00:04:17,959 --> 00:04:21,470
functionality

00:04:18,680 --> 00:04:23,210
there are movement and rotation methods

00:04:21,470 --> 00:04:25,070
methods for controlling the turtles

00:04:23,210 --> 00:04:27,440
walking speed methods for manipulating

00:04:25,070 --> 00:04:29,410
the pen and even some commands for

00:04:27,440 --> 00:04:31,250
fillings - the shapes that you draw or

00:04:29,410 --> 00:04:33,470
controlling whether the turtle is

00:04:31,250 --> 00:04:35,990
visible or not you get all of these

00:04:33,470 --> 00:04:38,240
different ways to draw but

00:04:35,990 --> 00:04:41,080
very simple mental model to teach it's

00:04:38,240 --> 00:04:43,400
just a turtle moving around the screen

00:04:41,080 --> 00:04:46,310
so this type of teaching tool goes

00:04:43,400 --> 00:04:48,470
beyond the typical text manipulation of

00:04:46,310 --> 00:04:50,930
most introductions to programming you

00:04:48,470 --> 00:04:52,880
can write lessons that produce really

00:04:50,930 --> 00:04:54,560
cool drawings without necessarily

00:04:52,880 --> 00:04:57,680
needing to dive into the more

00:04:54,560 --> 00:04:59,450
complicated features of rust the idea

00:04:57,680 --> 00:05:01,640
for this actually isn't even mine if you

00:04:59,450 --> 00:05:03,980
look up turtle graphics on the internet

00:05:01,640 --> 00:05:05,360
there's a pretty rich history of people

00:05:03,980 --> 00:05:07,640
using this to teach other people

00:05:05,360 --> 00:05:09,740
programming in fact one of the first

00:05:07,640 --> 00:05:12,260
incarnations of turtle was a real

00:05:09,740 --> 00:05:13,910
physical robot the robot would move

00:05:12,260 --> 00:05:17,090
around a piece of paper and draw

00:05:13,910 --> 00:05:19,550
pictures a software version of logo was

00:05:17,090 --> 00:05:22,400
created to be used with the programming

00:05:19,550 --> 00:05:24,110
language called logo logo is a simple

00:05:22,400 --> 00:05:27,890
command base language that allows you to

00:05:24,110 --> 00:05:30,620
draw pictures using a turtle lots of

00:05:27,890 --> 00:05:33,260
languages have built-in implementations

00:05:30,620 --> 00:05:36,290
of turtle graphics for example Python

00:05:33,260 --> 00:05:38,480
has a module a turtle module that allows

00:05:36,290 --> 00:05:40,850
you to draw pictures just as easily as

00:05:38,480 --> 00:05:43,730
if you were using logo so in this code

00:05:40,850 --> 00:05:47,030
Turtle dot forward instructs the turtle

00:05:43,730 --> 00:05:49,430
to walk forward by 200 steps by calling

00:05:47,030 --> 00:05:53,720
turtle dot right you tell the turtle to

00:05:49,430 --> 00:05:55,700
turn to the right 90 degrees the idea

00:05:53,720 --> 00:05:58,070
with the turtle crate is that we can now

00:05:55,700 --> 00:06:00,200
do the same thing in rest notice how

00:05:58,070 --> 00:06:03,590
both the Python version and the rest

00:06:00,200 --> 00:06:05,480
version look almost identical it was

00:06:03,590 --> 00:06:07,280
really important for me to make sure

00:06:05,480 --> 00:06:10,370
that this was a useful tool for teaching

00:06:07,280 --> 00:06:12,680
rust not just an identical copy of the

00:06:10,370 --> 00:06:14,780
Python implementation and so the turtle

00:06:12,680 --> 00:06:17,510
crate is written in idiomatic rust and

00:06:14,780 --> 00:06:19,280
follows rust best practices one thing

00:06:17,510 --> 00:06:22,100
you'll notice in the Python code on the

00:06:19,280 --> 00:06:25,940
left is that we directly call methods on

00:06:22,100 --> 00:06:28,550
the turtle module that we imported we

00:06:25,940 --> 00:06:32,180
didn't create any turtle explicitly it's

00:06:28,550 --> 00:06:34,880
just there in the module itself and so

00:06:32,180 --> 00:06:37,610
the Python implementation uses some

00:06:34,880 --> 00:06:39,820
global mutable state inside of the

00:06:37,610 --> 00:06:42,560
module itself in order to implement that

00:06:39,820 --> 00:06:44,510
global mutable state is this pattern

00:06:42,560 --> 00:06:46,820
that can lead to a lot of subtle bugs

00:06:44,510 --> 00:06:49,640
and cause problems in your code so

00:06:46,820 --> 00:06:51,560
that's why in the Rustom

00:06:49,640 --> 00:06:54,140
you actually have to create the turtle

00:06:51,560 --> 00:06:56,060
explicitly as a local variable and you

00:06:54,140 --> 00:06:59,390
even have to mark it with the mute

00:06:56,060 --> 00:07:01,550
keyword in order to modify it rust won't

00:06:59,390 --> 00:07:03,590
even let you use the forward and right

00:07:01,550 --> 00:07:05,990
methods if you don't declare your

00:07:03,590 --> 00:07:09,230
variable with mute because both forward

00:07:05,990 --> 00:07:11,240
and right modify the turtle itself so

00:07:09,230 --> 00:07:13,250
this is a tiny bit more friction than

00:07:11,240 --> 00:07:14,900
you had to experience with the Python

00:07:13,250 --> 00:07:16,970
implementation but I think it's

00:07:14,900 --> 00:07:19,160
worthwhile because it teaches people

00:07:16,970 --> 00:07:21,230
good habits that'll help them in the

00:07:19,160 --> 00:07:23,960
future as they continue programming and

00:07:21,230 --> 00:07:26,480
the wonderful thing about rust and this

00:07:23,960 --> 00:07:28,460
is particularly for rust is that even if

00:07:26,480 --> 00:07:30,860
they do for example forget the mute

00:07:28,460 --> 00:07:33,020
keyword there's this really nice error

00:07:30,860 --> 00:07:35,210
message that'll tell them exactly how to

00:07:33,020 --> 00:07:38,150
fix the problem and tell them what went

00:07:35,210 --> 00:07:40,550
wrong that means that even if you're new

00:07:38,150 --> 00:07:42,920
and you're still not used to things it's

00:07:40,550 --> 00:07:46,340
very hard to get stuck if you just read

00:07:42,920 --> 00:07:47,570
the error message I'm very proud of the

00:07:46,340 --> 00:07:50,660
fact that although there are a few

00:07:47,570 --> 00:07:52,390
differences the rust code is basically

00:07:50,660 --> 00:07:54,470
the same as the Python version and

00:07:52,390 --> 00:07:56,980
accomplishing that took quite a bit of

00:07:54,470 --> 00:07:59,360
effort so let's talk about how I did it

00:07:56,980 --> 00:08:01,370
the turtle crate has quite a bit of

00:07:59,360 --> 00:08:03,980
stuff going on behind the scenes the

00:08:01,370 --> 00:08:05,780
crate creates a window manages events

00:08:03,980 --> 00:08:07,790
like the close button being pressed the

00:08:05,780 --> 00:08:10,100
window being resized or someone clicking

00:08:07,790 --> 00:08:12,050
on the canvas and still has to respond

00:08:10,100 --> 00:08:14,480
to all of your drawing commands with the

00:08:12,050 --> 00:08:17,480
appropriate actions behind the scenes

00:08:14,480 --> 00:08:20,210
turtle has to run a complete event loop

00:08:17,480 --> 00:08:22,220
while still allowing you to write normal

00:08:20,210 --> 00:08:25,060
looking code that is reasonably simple

00:08:22,220 --> 00:08:29,630
to understand well what's an event loop

00:08:25,060 --> 00:08:32,270
well basically the idea is that both the

00:08:29,630 --> 00:08:35,320
program and the user are continuously

00:08:32,270 --> 00:08:38,870
trying to do things at the same time a

00:08:35,320 --> 00:08:40,580
program written using only the turtle

00:08:38,870 --> 00:08:43,340
crate might be trying to draw a picture

00:08:40,580 --> 00:08:45,650
or do some calculations whereas the user

00:08:43,340 --> 00:08:48,500
might be minimizing or maximizing their

00:08:45,650 --> 00:08:50,720
screen clicking on something or pressing

00:08:48,500 --> 00:08:53,300
a key on their keyboard an event loop

00:08:50,720 --> 00:08:55,580
simply manages all this continuously in

00:08:53,300 --> 00:08:57,560
the loop inside of an event loop you

00:08:55,580 --> 00:08:59,570
take turns quickly switching back and

00:08:57,560 --> 00:09:01,950
forth between handling the events from

00:08:59,570 --> 00:09:04,110
the user and performing the intern

00:09:01,950 --> 00:09:06,360
singing of the program this isn't

00:09:04,110 --> 00:09:08,279
actually too hard to grasp once you get

00:09:06,360 --> 00:09:10,170
the hang of it and if I were writing a

00:09:08,279 --> 00:09:12,870
general purpose graphics crate

00:09:10,170 --> 00:09:14,430
I would definitely allow the user of

00:09:12,870 --> 00:09:16,320
that crate to write their event loop

00:09:14,430 --> 00:09:19,350
themselves so that they could have full

00:09:16,320 --> 00:09:21,180
control over their application but that

00:09:19,350 --> 00:09:23,130
really doesn't work the same way for

00:09:21,180 --> 00:09:25,230
turtle it's not that important here

00:09:23,130 --> 00:09:28,800
because we're really only trying to be a

00:09:25,230 --> 00:09:30,630
good tool for teaching rest these kinds

00:09:28,800 --> 00:09:32,579
of details don't really help us and

00:09:30,630 --> 00:09:35,570
that's why we hide all of that behind

00:09:32,579 --> 00:09:38,339
the simple interface that you saw before

00:09:35,570 --> 00:09:40,380
so this is how the architecture of the

00:09:38,339 --> 00:09:43,170
first incarnation of the turtle crate

00:09:40,380 --> 00:09:45,720
looked when you create a turtle in your

00:09:43,170 --> 00:09:48,570
code using turtle knew the turtle crate

00:09:45,720 --> 00:09:50,790
spawns and you thread that thread is

00:09:48,570 --> 00:09:52,889
where we create the window run the event

00:09:50,790 --> 00:09:54,899
loop and do all of the rendering and

00:09:52,889 --> 00:09:57,389
event handling that I described on the

00:09:54,899 --> 00:09:59,190
previous slide since all that is going

00:09:57,389 --> 00:10:01,380
on in a separate thread the user's

00:09:59,190 --> 00:10:04,019
program is able to run normally on the

00:10:01,380 --> 00:10:06,269
main thread when you call methods like

00:10:04,019 --> 00:10:08,970
turtle dot forward or turtle dot right

00:10:06,269 --> 00:10:10,920
the main thread sends a message to the

00:10:08,970 --> 00:10:13,290
event loop thread to let it know what

00:10:10,920 --> 00:10:15,060
happened the threads can communicate

00:10:13,290 --> 00:10:17,250
back and forth to do drawing and

00:10:15,060 --> 00:10:19,620
handling events as they as needed and

00:10:17,250 --> 00:10:22,110
this is a great and relatively

00:10:19,620 --> 00:10:24,240
straightforward way to accomplish our

00:10:22,110 --> 00:10:26,250
goal of having an easy-to-use interface

00:10:24,240 --> 00:10:28,459
that hides all of the complicated

00:10:26,250 --> 00:10:30,449
details of the event loop and rendering

00:10:28,459 --> 00:10:32,459
the event loop runs in the background

00:10:30,449 --> 00:10:34,170
and the main thread goes on normally

00:10:32,459 --> 00:10:36,750
telling the turtle what to do in each

00:10:34,170 --> 00:10:38,880
step now there are a couple of things to

00:10:36,750 --> 00:10:41,339
consider about this though normally the

00:10:38,880 --> 00:10:43,290
program ends when the main thread ends

00:10:41,339 --> 00:10:44,760
now we don't want that here because that

00:10:43,290 --> 00:10:47,100
would mean that the window would

00:10:44,760 --> 00:10:48,569
immediately close after it finished

00:10:47,100 --> 00:10:51,240
drawing whatever the users program

00:10:48,569 --> 00:10:53,190
specified to prevent that when the

00:10:51,240 --> 00:10:55,980
turtle goes out of scope we actually

00:10:53,190 --> 00:10:58,980
wait for the window to be closed and

00:10:55,980 --> 00:11:01,199
then we end the main thread in addition

00:10:58,980 --> 00:11:03,240
to that we need to make sure that any

00:11:01,199 --> 00:11:04,829
memory that's shared between these

00:11:03,240 --> 00:11:06,569
threads any information we have about

00:11:04,829 --> 00:11:09,060
the turtle or the drawing or anything

00:11:06,569 --> 00:11:11,699
like that is available to both of them

00:11:09,060 --> 00:11:13,660
as much as possible we wouldn't want the

00:11:11,699 --> 00:11:17,200
main thread to wait for the

00:11:13,660 --> 00:11:18,760
crowd or vice-versa so this approach

00:11:17,200 --> 00:11:20,380
actually worked really well and it

00:11:18,760 --> 00:11:22,510
allowed me to get turtle off the ground

00:11:20,380 --> 00:11:23,860
I had a working crate and I even

00:11:22,510 --> 00:11:26,320
published it for the world to see

00:11:23,860 --> 00:11:28,750
however given that the last slide was

00:11:26,320 --> 00:11:30,250
titled attempt number one you probably

00:11:28,750 --> 00:11:35,440
already guessed that this didn't last

00:11:30,250 --> 00:11:37,660
long yes unfortunately the day after the

00:11:35,440 --> 00:11:39,370
crate got a lot of attention someone

00:11:37,660 --> 00:11:42,880
came and found out that it didn't work

00:11:39,370 --> 00:11:45,220
on Macs at all see I developed turtle on

00:11:42,880 --> 00:11:46,540
Linux which is apparently totally fine

00:11:45,220 --> 00:11:48,490
with you creating and managing

00:11:46,540 --> 00:11:51,790
application windows in any threat at all

00:11:48,490 --> 00:11:54,670
but on Macs the implementation of window

00:11:51,790 --> 00:11:56,950
management isn't thread safe that means

00:11:54,670 --> 00:11:58,900
that in order to manage a window you

00:11:56,950 --> 00:12:02,230
need to create it and handle the event

00:11:58,900 --> 00:12:05,050
loop on the main thread this is a huge

00:12:02,230 --> 00:12:07,390
deal because the whole magic of turtle

00:12:05,050 --> 00:12:09,280
is that you could write simple normal

00:12:07,390 --> 00:12:11,770
looking code on the main thread without

00:12:09,280 --> 00:12:15,130
doing anything special in order to

00:12:11,770 --> 00:12:16,930
create the window like it would not be

00:12:15,130 --> 00:12:19,150
good to have to force somebody to

00:12:16,930 --> 00:12:21,010
squeeze an entire event loop in the

00:12:19,150 --> 00:12:24,460
middle of the turtle code we saw before

00:12:21,010 --> 00:12:26,470
the code on the right here is completely

00:12:24,460 --> 00:12:29,020
different from the left and will more

00:12:26,470 --> 00:12:31,480
complex for a beginner so it was

00:12:29,020 --> 00:12:33,460
unacceptable for me to have to add this

00:12:31,480 --> 00:12:35,500
extra burden of complexity to turtle

00:12:33,460 --> 00:12:37,870
turtle just couldn't be an effective

00:12:35,500 --> 00:12:39,700
teaching or learning tool if you had to

00:12:37,870 --> 00:12:43,000
learn about all of this just to write

00:12:39,700 --> 00:12:45,340
simple programs so after a lot of

00:12:43,000 --> 00:12:47,800
thought and consideration I came up with

00:12:45,340 --> 00:12:49,840
the second architecture I I needed some

00:12:47,800 --> 00:12:51,880
way to continue to allow the user to

00:12:49,840 --> 00:12:54,760
write their program on the main thread

00:12:51,880 --> 00:12:56,710
and also create and manage the window on

00:12:54,760 --> 00:12:58,720
the main thread as well we can't

00:12:56,710 --> 00:13:00,550
actually do both of these together at

00:12:58,720 --> 00:13:02,590
the same time because the event loop has

00:13:00,550 --> 00:13:04,660
to be able to quickly switch back and

00:13:02,590 --> 00:13:07,540
forth between rendering the drawing and

00:13:04,660 --> 00:13:09,340
processing events it wouldn't be good to

00:13:07,540 --> 00:13:12,460
have the users program and the event

00:13:09,340 --> 00:13:15,160
loop compete for time now if only there

00:13:12,460 --> 00:13:18,790
is a way to have two main threads that

00:13:15,160 --> 00:13:21,640
would solve all of our problems well it

00:13:18,790 --> 00:13:23,980
turns out there is actually a way to do

00:13:21,640 --> 00:13:24,780
this well you can't have two main

00:13:23,980 --> 00:13:28,680
threads and

00:13:24,780 --> 00:13:33,030
process you can have two processes with

00:13:28,680 --> 00:13:35,130
one main thread each and so the solution

00:13:33,030 --> 00:13:38,280
I came up with to give me everything

00:13:35,130 --> 00:13:41,640
that I wanted was to spawn a new process

00:13:38,280 --> 00:13:44,220
to run the event loop instead of relying

00:13:41,640 --> 00:13:46,020
on a separate thread now processes are a

00:13:44,220 --> 00:13:47,760
little bit more complicated to handle

00:13:46,020 --> 00:13:51,240
than threads but if you do it correctly

00:13:47,760 --> 00:13:53,370
it turns out to not be that bad we're

00:13:51,240 --> 00:13:54,870
still sending drawing command messages

00:13:53,370 --> 00:13:56,880
it's just that now we're doing it

00:13:54,870 --> 00:13:59,070
between processes instead of between

00:13:56,880 --> 00:14:01,260
threads and we're still waiting for the

00:13:59,070 --> 00:14:03,720
window to be closed before we exit main

00:14:01,260 --> 00:14:05,580
thread number one instead of sharing

00:14:03,720 --> 00:14:07,490
state between threads like we were

00:14:05,580 --> 00:14:09,600
before we now have to deal with

00:14:07,490 --> 00:14:11,850
synchronizing that state between two

00:14:09,600 --> 00:14:14,220
processes the way we handled this today

00:14:11,850 --> 00:14:16,230
in turtle is pretty simple we just keep

00:14:14,220 --> 00:14:17,700
all the state and one of the processes

00:14:16,230 --> 00:14:19,530
and then we make the other process

00:14:17,700 --> 00:14:22,530
request it whatever it wants to look at

00:14:19,530 --> 00:14:24,690
it so this attempt actually ended up

00:14:22,530 --> 00:14:27,210
working great it took me about two weeks

00:14:24,690 --> 00:14:29,790
and 59 commits to convert the old

00:14:27,210 --> 00:14:31,770
architecture to the new one but that's

00:14:29,790 --> 00:14:33,240
mostly just because I was busy during

00:14:31,770 --> 00:14:35,450
those two weeks and I'm not afraid of

00:14:33,240 --> 00:14:35,450
commitment

00:14:36,200 --> 00:14:41,610
you probably only talked about a day or

00:14:38,790 --> 00:14:43,530
two of work to convert the old thread

00:14:41,610 --> 00:14:45,720
based architecture to the new process

00:14:43,530 --> 00:14:47,730
based one and this has actually been so

00:14:45,720 --> 00:14:50,280
successful so far that this is still how

00:14:47,730 --> 00:14:52,170
turtle works today now one of the

00:14:50,280 --> 00:14:54,450
greatest things about this is that it

00:14:52,170 --> 00:14:57,300
actually didn't require any changes to

00:14:54,450 --> 00:14:59,460
the public API at all the entire turtle

00:14:57,300 --> 00:15:01,560
crate stayed the same but the internals

00:14:59,460 --> 00:15:04,650
of how it worked got completely switched

00:15:01,560 --> 00:15:08,460
out the turtle crate you see online

00:15:04,650 --> 00:15:10,680
today is in no way complete it's fairly

00:15:08,460 --> 00:15:13,010
stable now but there are still a ton of

00:15:10,680 --> 00:15:16,020
features that we could potentially add

00:15:13,010 --> 00:15:17,670
I've taken a lot of time to carefully

00:15:16,020 --> 00:15:20,220
plan things so that we can reach a

00:15:17,670 --> 00:15:21,720
minimal Viable Product and and then

00:15:20,220 --> 00:15:25,080
build all kinds of really cool features

00:15:21,720 --> 00:15:27,540
on top of it turtle has a really good

00:15:25,080 --> 00:15:29,340
really well-organized issue tracker with

00:15:27,540 --> 00:15:30,930
lots of good first issues and Help

00:15:29,340 --> 00:15:33,870
Wanted issues if you're looking to get

00:15:30,930 --> 00:15:36,180
involved we're really open to anybody of

00:15:33,870 --> 00:15:37,800
any experience level with programming or

00:15:36,180 --> 00:15:39,149
with rust and we'll help you

00:15:37,800 --> 00:15:42,029
figure things out as long as you're

00:15:39,149 --> 00:15:44,220
willing to work with us to do so we

00:15:42,029 --> 00:15:46,170
especially love it when people come and

00:15:44,220 --> 00:15:49,050
contribute examples to turtle and

00:15:46,170 --> 00:15:50,810
there's this great example idea label on

00:15:49,050 --> 00:15:53,670
github if you're looking for inspiration

00:15:50,810 --> 00:15:55,740
we really want to see it if you use

00:15:53,670 --> 00:15:58,019
turtle to create something cool and

00:15:55,740 --> 00:16:00,990
these example ideas are just there to

00:15:58,019 --> 00:16:02,820
spark your imagination if you're

00:16:00,990 --> 00:16:05,010
interested in contributing to turtle but

00:16:02,820 --> 00:16:07,560
you're not sure how to get started we

00:16:05,010 --> 00:16:09,320
have a detailed contributing guide that

00:16:07,560 --> 00:16:12,510
walks you through the process of

00:16:09,320 --> 00:16:14,160
contributing step-by-step a great way to

00:16:12,510 --> 00:16:15,420
contribute if you're looking for

00:16:14,160 --> 00:16:17,130
something to do is to read this

00:16:15,420 --> 00:16:18,750
contributing guide and tell me where you

00:16:17,130 --> 00:16:23,100
get stuck so I can fix it

00:16:18,750 --> 00:16:25,290
opening issues is fantastic the future

00:16:23,100 --> 00:16:27,660
of turtle has a lot of really cool

00:16:25,290 --> 00:16:31,050
features I want to add things like

00:16:27,660 --> 00:16:33,390
multiple turtles 3d drawing text

00:16:31,050 --> 00:16:36,029
rendering support we want more widgets

00:16:33,390 --> 00:16:39,899
like buttons and text fields for user

00:16:36,029 --> 00:16:42,089
input we even want to add asynchronous

00:16:39,899 --> 00:16:44,850
turtles using async await and the

00:16:42,089 --> 00:16:46,950
futures crave and add web assembly

00:16:44,850 --> 00:16:48,660
support so that you can write turtle

00:16:46,950 --> 00:16:51,600
code from your browser without

00:16:48,660 --> 00:16:53,430
downloading anything at all these are

00:16:51,600 --> 00:16:55,020
all really exciting ideas and I'm

00:16:53,430 --> 00:16:56,910
definitely going to need all of your

00:16:55,020 --> 00:16:59,579
help in order to accomplish them in

00:16:56,910 --> 00:17:02,610
particular I need people to go and try

00:16:59,579 --> 00:17:05,189
out and see what you run into if

00:17:02,610 --> 00:17:07,410
something in the API needs work it's

00:17:05,189 --> 00:17:09,839
better to know now before we commit to a

00:17:07,410 --> 00:17:12,059
stable release trying out the crate

00:17:09,839 --> 00:17:17,579
today and drawing something non-trivial

00:17:12,059 --> 00:17:20,280
is a great way to help out today so as I

00:17:17,579 --> 00:17:22,800
was designing turtle I put a lot of

00:17:20,280 --> 00:17:25,199
thought into what kinds of things that

00:17:22,800 --> 00:17:27,360
create needs in order to be accessible

00:17:25,199 --> 00:17:30,390
to people who don't know programming at

00:17:27,360 --> 00:17:32,280
all I don't know of any other case that

00:17:30,390 --> 00:17:34,110
try to do this so it was particularly

00:17:32,280 --> 00:17:36,809
important that I think about it a lot

00:17:34,110 --> 00:17:38,490
and get it right I'm now going to share

00:17:36,809 --> 00:17:41,070
with you some of the things I learned

00:17:38,490 --> 00:17:43,020
along the way and give you some tips to

00:17:41,070 --> 00:17:46,500
help make your own crates more

00:17:43,020 --> 00:17:49,320
accessible to a wider audience so it's

00:17:46,500 --> 00:17:50,630
true that not every crate is aiming for

00:17:49,320 --> 00:17:53,690
as large of a group

00:17:50,630 --> 00:17:56,419
most crates probably don't need to or

00:17:53,690 --> 00:17:58,490
even shouldn't try to cater to people

00:17:56,419 --> 00:18:01,130
who don't know programming it would be

00:17:58,490 --> 00:18:03,440
way too much to ask if every crate

00:18:01,130 --> 00:18:05,780
author to teach basic programming to

00:18:03,440 --> 00:18:07,669
every user of their crate that being

00:18:05,780 --> 00:18:09,799
said the nice thing about at least

00:18:07,669 --> 00:18:11,840
thinking about it is that you have the

00:18:09,799 --> 00:18:13,370
opportunity to increase the number of

00:18:11,840 --> 00:18:16,039
people who can use your crates

00:18:13,370 --> 00:18:17,720
successfully I've sat down and taught

00:18:16,039 --> 00:18:19,850
Russ to people who don't know

00:18:17,720 --> 00:18:22,090
programming but well and managed to

00:18:19,850 --> 00:18:24,860
explain some pretty complicated crates

00:18:22,090 --> 00:18:27,200
sometimes you just need somebody to put

00:18:24,860 --> 00:18:30,230
in the time to write something that will

00:18:27,200 --> 00:18:31,520
teach you what you need to learn when

00:18:30,230 --> 00:18:33,049
you put in some effort to make your

00:18:31,520 --> 00:18:34,700
create accessible to an audience that

00:18:33,049 --> 00:18:36,590
might not be familiar with what your

00:18:34,700 --> 00:18:38,600
crate does it benefits everyone

00:18:36,590 --> 00:18:40,789
including the people who are experts in

00:18:38,600 --> 00:18:42,770
it like you I'll give you a small

00:18:40,789 --> 00:18:45,500
example of something that I did to make

00:18:42,770 --> 00:18:46,760
turtle accessible that actually ends up

00:18:45,500 --> 00:18:48,890
helping me a lot

00:18:46,760 --> 00:18:50,270
turtle isn't just meant to be a good

00:18:48,890 --> 00:18:52,850
teaching tool it's meant to be a very

00:18:50,270 --> 00:18:55,429
accessible project for people who want

00:18:52,850 --> 00:18:57,350
to contribute to a Russ project that's

00:18:55,429 --> 00:18:59,000
why if there are any quirks that might

00:18:57,350 --> 00:19:01,370
trip someone up when they're trying to

00:18:59,000 --> 00:19:03,020
contribute to turtle I take extra care

00:19:01,370 --> 00:19:05,780
to make sure that people get the

00:19:03,020 --> 00:19:08,780
information they need in most crates you

00:19:05,780 --> 00:19:11,179
can go in and run cargo tests to run the

00:19:08,780 --> 00:19:13,940
tests for that crate but since turtle

00:19:11,179 --> 00:19:16,429
has a graphical user interface just

00:19:13,940 --> 00:19:18,110
running cargo tests alone would make a

00:19:16,429 --> 00:19:20,929
whole bunch of windows pop up

00:19:18,110 --> 00:19:23,270
unnecessarily this is undesirable and

00:19:20,929 --> 00:19:25,730
closer all of these windows is really

00:19:23,270 --> 00:19:28,220
hard so I added a special test feature

00:19:25,730 --> 00:19:30,950
to the crate that disables any window

00:19:28,220 --> 00:19:33,169
creation during tests the problem is

00:19:30,950 --> 00:19:34,190
that you can't just run the regular test

00:19:33,169 --> 00:19:36,559
command anymore

00:19:34,190 --> 00:19:39,200
you have to run cargo tests with the

00:19:36,559 --> 00:19:41,360
features flag and then add the word test

00:19:39,200 --> 00:19:43,940
I didn't want people to get tripped up

00:19:41,360 --> 00:19:46,190
on this so I used a special macro that

00:19:43,940 --> 00:19:48,770
rust recently added called the compile

00:19:46,190 --> 00:19:50,539
error macro and so with these two lines

00:19:48,770 --> 00:19:52,039
of code if anybody tries to compile

00:19:50,539 --> 00:19:54,590
tests without the appropriate features

00:19:52,039 --> 00:19:56,360
flag they get this really nice error

00:19:54,590 --> 00:19:59,630
message that tells them exactly what to

00:19:56,360 --> 00:20:02,150
do this is this was supposed to be a

00:19:59,630 --> 00:20:02,919
small quality of life improvement but I

00:20:02,150 --> 00:20:04,869
only really

00:20:02,919 --> 00:20:06,820
intended to help new programmers but

00:20:04,869 --> 00:20:08,710
it's something that helped me a whole

00:20:06,820 --> 00:20:10,659
bunch of times as well there have been

00:20:08,710 --> 00:20:12,730
plenty of moments where out of habit

00:20:10,659 --> 00:20:14,679
I've run cargo tests and instead of

00:20:12,730 --> 00:20:16,059
getting a whole bunch of windows popping

00:20:14,679 --> 00:20:18,489
up and having to close all of them

00:20:16,059 --> 00:20:20,549
manually I've gotten this nice error

00:20:18,489 --> 00:20:23,200
message that reminds me what to do

00:20:20,549 --> 00:20:26,379
thinking about less experienced people

00:20:23,200 --> 00:20:30,309
using your code can really help you as

00:20:26,379 --> 00:20:32,200
well so some of the things I talked

00:20:30,309 --> 00:20:34,210
about today are probably going to seem a

00:20:32,200 --> 00:20:36,519
little bit obvious at first this first

00:20:34,210 --> 00:20:39,100
one good documentation is probably

00:20:36,519 --> 00:20:41,710
something you know to do already right

00:20:39,100 --> 00:20:44,049
like want to make your crate more easier

00:20:41,710 --> 00:20:47,350
to use write some docs so that people

00:20:44,049 --> 00:20:50,200
know how to do it the thing is to make

00:20:47,350 --> 00:20:52,960
your documentation actually good you

00:20:50,200 --> 00:20:55,059
need to put some thought into it I find

00:20:52,960 --> 00:20:57,549
personally that the first time I write

00:20:55,059 --> 00:21:00,039
documentation I only really end up

00:20:57,549 --> 00:21:02,080
writing it for myself there are some

00:21:00,039 --> 00:21:04,179
Doc's but really I'm just writing notes

00:21:02,080 --> 00:21:05,710
to myself so that I don't forget a

00:21:04,179 --> 00:21:09,279
couple of things that I want to remember

00:21:05,710 --> 00:21:11,619
to write documentation for a wider

00:21:09,279 --> 00:21:13,419
audience you need to actually think

00:21:11,619 --> 00:21:16,119
about the people who are going to be

00:21:13,419 --> 00:21:17,710
using your documentation you need to

00:21:16,119 --> 00:21:19,929
think about what they know what they

00:21:17,710 --> 00:21:22,330
don't know and what you're going to need

00:21:19,929 --> 00:21:25,359
to explain to them in order to make your

00:21:22,330 --> 00:21:26,649
documentation as useful as possible you

00:21:25,359 --> 00:21:28,239
don't want to bog them down with

00:21:26,649 --> 00:21:30,070
information and you want to structure

00:21:28,239 --> 00:21:33,070
your Doc's so that they get the most

00:21:30,070 --> 00:21:35,350
important information first it's also a

00:21:33,070 --> 00:21:37,389
really bad idea to try and write your

00:21:35,350 --> 00:21:38,919
documentation after having written all

00:21:37,389 --> 00:21:41,499
of your code because you'll probably

00:21:38,919 --> 00:21:43,480
forget most of the important things that

00:21:41,499 --> 00:21:46,840
you want to write down by the time you

00:21:43,480 --> 00:21:49,210
get to your documentation in the turtle

00:21:46,840 --> 00:21:52,570
crate we take documentation really

00:21:49,210 --> 00:21:54,580
seriously we aren't perfect yet but we

00:21:52,570 --> 00:21:56,649
really make an effort to have detailed

00:21:54,580 --> 00:21:59,230
documentation that covers the

00:21:56,649 --> 00:22:03,190
information you need in order to use the

00:21:59,230 --> 00:22:04,600
item being documented one example of a

00:22:03,190 --> 00:22:06,999
method that has some pretty good

00:22:04,600 --> 00:22:09,429
documentation is the set speed method

00:22:06,999 --> 00:22:11,169
here we take the time to explain the

00:22:09,429 --> 00:22:14,590
most important information about the

00:22:11,169 --> 00:22:15,760
method what it does how to call it when

00:22:14,590 --> 00:22:17,590
it might panic

00:22:15,760 --> 00:22:20,380
and we talked about how to achieve

00:22:17,590 --> 00:22:22,300
specific effects using the method using

00:22:20,380 --> 00:22:25,120
some special values that it can take

00:22:22,300 --> 00:22:26,890
since turtle is targeting new people who

00:22:25,120 --> 00:22:28,990
aren't familiar with programming aren't

00:22:26,890 --> 00:22:31,210
familiar with rust we also take the time

00:22:28,990 --> 00:22:33,790
to explain some rust concepts that the

00:22:31,210 --> 00:22:35,770
user might not be familiar with now one

00:22:33,790 --> 00:22:38,770
way you can avoid such long-winded

00:22:35,770 --> 00:22:41,550
explanations is by linking to the many

00:22:38,770 --> 00:22:44,010
rust resources that are available online

00:22:41,550 --> 00:22:46,330
we do that a lot in the turtle

00:22:44,010 --> 00:22:48,250
documentation and if you're a little

00:22:46,330 --> 00:22:51,340
apprehensive about writing Docs yourself

00:22:48,250 --> 00:22:52,990
this is a great way to cut down on the

00:22:51,340 --> 00:22:55,510
total number of things that you need to

00:22:52,990 --> 00:22:57,430
write so don't hesitate to take

00:22:55,510 --> 00:22:59,470
advantage of the resources that other

00:22:57,430 --> 00:23:03,130
people have created to make your life

00:22:59,470 --> 00:23:04,240
easier one of the final things that I'll

00:23:03,130 --> 00:23:06,370
point out about writing good

00:23:04,240 --> 00:23:08,260
documentation is that you need to think

00:23:06,370 --> 00:23:10,600
about how people will find the

00:23:08,260 --> 00:23:12,940
information that they need the users of

00:23:10,600 --> 00:23:15,070
your crate will not always be experts in

00:23:12,940 --> 00:23:17,350
it so they need to know which types

00:23:15,070 --> 00:23:18,970
functions or methods they should look at

00:23:17,350 --> 00:23:21,700
if they're trying to accomplish a

00:23:18,970 --> 00:23:23,890
certain task one way you can help them

00:23:21,700 --> 00:23:26,230
is by putting something at the root of

00:23:23,890 --> 00:23:28,720
your documentation that directs them to

00:23:26,230 --> 00:23:29,980
the places they might want to go you'll

00:23:28,720 --> 00:23:32,080
find that this is convenient for

00:23:29,980 --> 00:23:33,790
yourself as well because you can reach

00:23:32,080 --> 00:23:38,800
the documentation that you want to see

00:23:33,790 --> 00:23:41,470
faster examples examples are really

00:23:38,800 --> 00:23:44,920
important and it's really easy to write

00:23:41,470 --> 00:23:47,410
bad examples there are quite a few

00:23:44,920 --> 00:23:49,150
methods in the turtle crate that need to

00:23:47,410 --> 00:23:51,940
have their documentation improved a lot

00:23:49,150 --> 00:23:53,920
in fact sometimes in my own haste to

00:23:51,940 --> 00:23:57,700
finish something I've written examples

00:23:53,920 --> 00:23:59,410
like this this example is more of a unit

00:23:57,700 --> 00:24:02,950
test than a real example it doesn't

00:23:59,410 --> 00:24:05,710
explain anything for an example to be

00:24:02,950 --> 00:24:09,370
useful you actually need to motivate it

00:24:05,710 --> 00:24:11,080
and and talk about why people should use

00:24:09,370 --> 00:24:13,390
it and what ended and what situations

00:24:11,080 --> 00:24:14,890
that comes in handy if you find this

00:24:13,390 --> 00:24:16,270
really difficult to describe for a

00:24:14,890 --> 00:24:18,430
particular item you should really think

00:24:16,270 --> 00:24:20,350
about why it's in your public API in the

00:24:18,430 --> 00:24:23,430
first place if you can't even explain

00:24:20,350 --> 00:24:26,140
what it's supposed to be used for a

00:24:23,430 --> 00:24:28,900
method with much better documentation is

00:24:26,140 --> 00:24:29,270
the set pen size method not only does it

00:24:28,900 --> 00:24:31,400
have

00:24:29,270 --> 00:24:33,140
complete example that motivates the use

00:24:31,400 --> 00:24:35,630
for that method it also gives you a

00:24:33,140 --> 00:24:38,090
picture of exactly what result is

00:24:35,630 --> 00:24:39,830
produced by running that example now you

00:24:38,090 --> 00:24:42,350
may not be able to put pictures in your

00:24:39,830 --> 00:24:44,900
documentation but you should strive to

00:24:42,350 --> 00:24:47,420
at least provide examples that show why

00:24:44,900 --> 00:24:49,970
an item should be used and then show

00:24:47,420 --> 00:24:53,510
what happens as a result of that item

00:24:49,970 --> 00:24:55,670
being used examples for individual

00:24:53,510 --> 00:24:57,920
methods are meant to show how a specific

00:24:55,670 --> 00:25:00,080
method is to be used but what about

00:24:57,920 --> 00:25:02,300
complete examples that take advantage of

00:25:00,080 --> 00:25:04,400
more of your crate well rest has great

00:25:02,300 --> 00:25:06,290
tooling that allows you to create to

00:25:04,400 --> 00:25:09,740
create these kinds of examples easily

00:25:06,290 --> 00:25:11,630
cargo can run any rest file placed in

00:25:09,740 --> 00:25:13,910
the examples directory of your project

00:25:11,630 --> 00:25:16,340
and you can use these to provide more

00:25:13,910 --> 00:25:19,190
comprehensive examples of the major use

00:25:16,340 --> 00:25:21,080
cases of your crate turtle has a lot of

00:25:19,190 --> 00:25:23,120
examples in its examples directory and

00:25:21,080 --> 00:25:25,960
we're always looking for more people to

00:25:23,120 --> 00:25:28,310
add examples of the things they've drawn

00:25:25,960 --> 00:25:31,250
so far we've talked about good

00:25:28,310 --> 00:25:33,110
documentation and examples but our

00:25:31,250 --> 00:25:35,210
discussion wouldn't be complete if we

00:25:33,110 --> 00:25:38,540
didn't also touch on writing a guide a

00:25:35,210 --> 00:25:40,700
guide is a tutorial that goes through

00:25:38,540 --> 00:25:43,460
the key pieces of functionality in your

00:25:40,700 --> 00:25:46,550
crate your guide needs to at minimum

00:25:43,460 --> 00:25:48,950
walk people through the first time using

00:25:46,550 --> 00:25:50,510
your crate now once you've done that you

00:25:48,950 --> 00:25:53,090
should aim to show them detailed

00:25:50,510 --> 00:25:56,030
examples of each of the major features

00:25:53,090 --> 00:25:58,040
and use cases for your crate the

00:25:56,030 --> 00:26:00,080
difference between a guide and the

00:25:58,040 --> 00:26:02,510
examples in your examples directory is

00:26:00,080 --> 00:26:04,940
that in a guide you're able to explain

00:26:02,510 --> 00:26:07,460
your crate and how it works in detail

00:26:04,940 --> 00:26:09,380
this is essential for somebody to have a

00:26:07,460 --> 00:26:11,630
complete understanding of how to use

00:26:09,380 --> 00:26:13,880
your code and a guide is actually one of

00:26:11,630 --> 00:26:14,510
the major pieces that turtle is still

00:26:13,880 --> 00:26:16,910
missing

00:26:14,510 --> 00:26:18,950
I want the turtle guide to be an

00:26:16,910 --> 00:26:21,080
introduction to programming that

00:26:18,950 --> 00:26:24,830
incrementally teaches people programming

00:26:21,080 --> 00:26:26,510
in rust by having them draw pictures the

00:26:24,830 --> 00:26:30,110
final thing that I want to mention is

00:26:26,510 --> 00:26:32,150
that is the rust api guidelines these

00:26:30,110 --> 00:26:34,280
guidelines go through a lot of the

00:26:32,150 --> 00:26:36,650
different aspects of creating a rust

00:26:34,280 --> 00:26:38,050
crate and tell you exactly how your

00:26:36,650 --> 00:26:40,970
crate should work in each category

00:26:38,050 --> 00:26:41,770
there's a checklist that you can use to

00:26:40,970 --> 00:26:44,170
make sure that

00:26:41,770 --> 00:26:46,960
code is idiomatic and follows rust best

00:26:44,170 --> 00:26:48,550
practices I highly recommend these

00:26:46,960 --> 00:26:51,520
guidelines for making sure you're

00:26:48,550 --> 00:26:53,410
writing the best rust code possible so

00:26:51,520 --> 00:26:56,380
thank you for listening to my talk we

00:26:53,410 --> 00:26:58,210
covered a lot today including how to you

00:26:56,380 --> 00:26:59,890
how the turtle create works and how you

00:26:58,210 --> 00:27:00,970
can make your crates accessible to a

00:26:59,890 --> 00:27:03,850
wider audience

00:27:00,970 --> 00:27:05,980
please come and try total out we really

00:27:03,850 --> 00:27:08,200
need people to try and draw non-trivial

00:27:05,980 --> 00:27:10,240
things in turtle so that we can see what

00:27:08,200 --> 00:27:11,740
breaks if you'd like to come contribute

00:27:10,240 --> 00:27:14,500
we have plenty of things to work on

00:27:11,740 --> 00:27:16,690
regardless of your skill level I also

00:27:14,500 --> 00:27:18,580
want to take a moment and thank all the

00:27:16,690 --> 00:27:21,660
wonderful people who have contributed to

00:27:18,580 --> 00:27:23,800
turtle already many people come in and

00:27:21,660 --> 00:27:25,480
they've picked up the slack when I

00:27:23,800 --> 00:27:27,670
haven't been able to work on turtle very

00:27:25,480 --> 00:27:30,040
much and I really appreciate everybody

00:27:27,670 --> 00:27:33,010
who contributes code and everybody who

00:27:30,040 --> 00:27:35,620
files issues the turtle crate has a

00:27:33,010 --> 00:27:38,290
Twitter account so if you blog about

00:27:35,620 --> 00:27:40,780
turtle or draw something and post it

00:27:38,290 --> 00:27:43,150
I'll retweet you if you tag this account

00:27:40,780 --> 00:27:43,570
you can also follow me on Twitter as

00:27:43,150 --> 00:27:46,060
well

00:27:43,570 --> 00:27:48,490
I'll be around today and online if you

00:27:46,060 --> 00:27:49,390
have any questions that's my time thank

00:27:48,490 --> 00:28:01,249
you very much

00:27:49,390 --> 00:28:01,249
[Applause]

00:28:01,930 --> 00:28:09,590
[Music]

00:28:07,530 --> 00:28:09,590

YouTube URL: https://www.youtube.com/watch?v=ZtER1Wllbeo


