Title: RustConf 2018 - How (not) to introduce Rust at your workplace - Douglas Campos
Publication date: 2018-09-14
Playlist: RustConf 2018
Description: 
	So I've tried to introduce Rust at my $DAYJOB, and failed miserably.

Failure can be a great catalyst for reflection, and indeed, there was a lot of valuable lessons to be learned!

At this brief talk, I'll not only share the pitfalls to avoid, but the insights I've gained while trying to make Rust work for us (and maybe for you?).
Captions: 
	00:00:00,410 --> 00:00:21,220
[Music]

00:00:14,640 --> 00:00:23,350
hello good morning everyone I am qmx as

00:00:21,220 --> 00:00:25,029
he said as she said no one knows me by

00:00:23,350 --> 00:00:27,160
Dallas I work at digitalocean

00:00:25,029 --> 00:00:30,550
and yeah thanks for them to actually

00:00:27,160 --> 00:00:32,529
bring me here I have a very important

00:00:30,550 --> 00:00:34,330
disclaimer to make at this very

00:00:32,529 --> 00:00:37,030
beginning so this talk

00:00:34,330 --> 00:00:39,070
tell it tells a story about how things

00:00:37,030 --> 00:00:41,980
went badly badly wrong

00:00:39,070 --> 00:00:45,220
and sometimes when you have to explain

00:00:41,980 --> 00:00:48,490
the reasons why you came there you have

00:00:45,220 --> 00:00:52,240
to use examples and this disclaimer

00:00:48,490 --> 00:00:55,360
essentially begs you a favor please be

00:00:52,240 --> 00:00:57,250
nice and why am i and why I'm asking

00:00:55,360 --> 00:01:00,850
this question and asking you to be nice

00:00:57,250 --> 00:01:04,119
is that you know this is a very cute

00:01:00,850 --> 00:01:06,100
animal I mean I really love the golfer

00:01:04,119 --> 00:01:08,920
and I have to talk about calling

00:01:06,100 --> 00:01:12,009
problems because that's what like

00:01:08,920 --> 00:01:13,869
motivated us I'm trying to look for us

00:01:12,009 --> 00:01:16,600
but I really like calling

00:01:13,869 --> 00:01:18,280
I mean don't take it personally it could

00:01:16,600 --> 00:01:22,679
be any other language that's just

00:01:18,280 --> 00:01:26,020
example do you so let's get moving

00:01:22,679 --> 00:01:29,649
please leave the Gopher alone this is

00:01:26,020 --> 00:01:33,280
story time I was working at my company

00:01:29,649 --> 00:01:38,560
and I joined a team for tackling a very

00:01:33,280 --> 00:01:40,929
interesting thank problem we needed to

00:01:38,560 --> 00:01:43,569
process a bunch of data and do

00:01:40,929 --> 00:01:46,179
essentially some stream processing it

00:01:43,569 --> 00:01:49,119
had like high performance requirements

00:01:46,179 --> 00:01:50,799
it was a distributed system and we're

00:01:49,119 --> 00:01:53,100
going to build micro services and you

00:01:50,799 --> 00:01:55,509
can imagine like this is like the

00:01:53,100 --> 00:01:57,899
buzzword bingo I was going to use other

00:01:55,509 --> 00:02:00,069
words with me but whatever so

00:01:57,899 --> 00:02:02,590
essentially this is like a classic

00:02:00,069 --> 00:02:05,229
problem when people say yes yes this is

00:02:02,590 --> 00:02:08,110
perfect everyone's kind of handles the

00:02:05,229 --> 00:02:10,899
same stuff and this is Unix with no G's

00:02:08,110 --> 00:02:13,240
no actually this is : we notice like

00:02:10,899 --> 00:02:16,090
that's the standard answer to that

00:02:13,240 --> 00:02:19,720
question in general and we fast forward

00:02:16,090 --> 00:02:23,260
a few months there and the project

00:02:19,720 --> 00:02:25,330
actually was a success I mean we did a

00:02:23,260 --> 00:02:27,160
micro service using going and all the

00:02:25,330 --> 00:02:29,290
technology that is there

00:02:27,160 --> 00:02:31,000
all the tools and everything is happy it

00:02:29,290 --> 00:02:33,160
was running in production it was

00:02:31,000 --> 00:02:35,650
happening in jesting over 4k

00:02:33,160 --> 00:02:39,190
very complex messages over a car cables

00:02:35,650 --> 00:02:42,010
and that was it like the project was

00:02:39,190 --> 00:02:45,010
running everything was happy and I read

00:02:42,010 --> 00:02:47,260
on the realities that software is never

00:02:45,010 --> 00:02:50,890
ever done I mean when you release it

00:02:47,260 --> 00:02:53,470
then the party starts right and then is

00:02:50,890 --> 00:02:56,920
when you find out that not everything is

00:02:53,470 --> 00:02:58,900
roses so we were running when production

00:02:56,920 --> 00:02:59,620
customers were using this software

00:02:58,900 --> 00:03:03,310
indirectly

00:02:59,620 --> 00:03:07,360
and my process question and I have no

00:03:03,310 --> 00:03:09,040
idea why then that's kind of like where

00:03:07,360 --> 00:03:12,180
you start learning more about the

00:03:09,040 --> 00:03:14,710
language that you are working with and I

00:03:12,180 --> 00:03:19,330
started looking at going with different

00:03:14,710 --> 00:03:22,150
eyes essentially I have two strokes

00:03:19,330 --> 00:03:23,470
there nothing special about them they're

00:03:22,150 --> 00:03:26,580
kind of like the same as the see the

00:03:23,470 --> 00:03:30,610
same as burst with a huge difference I

00:03:26,580 --> 00:03:33,820
didn't know at the time that the default

00:03:30,610 --> 00:03:38,890
value for structs and for things inside

00:03:33,820 --> 00:03:41,020
stress was new and it's it manifests

00:03:38,890 --> 00:03:44,620
itself in subtle ways because when I

00:03:41,020 --> 00:03:47,350
kind of try to call methods on a pointer

00:03:44,620 --> 00:03:49,480
to a structure this pointer can be nil

00:03:47,350 --> 00:03:51,250
and the compiler is not going to

00:03:49,480 --> 00:03:54,070
complain and of course I did a big

00:03:51,250 --> 00:03:56,380
mistake I had a new reference there and

00:03:54,070 --> 00:04:00,040
then when I called it is actually prints

00:03:56,380 --> 00:04:01,989
wave on a new reference if you are not

00:04:00,040 --> 00:04:03,700
accessing anything on inside this truck

00:04:01,989 --> 00:04:05,650
this is fine but as soon as you have

00:04:03,700 --> 00:04:08,980
data there boom you're going to have a

00:04:05,650 --> 00:04:11,410
crash in a sec fault and it's a terrible

00:04:08,980 --> 00:04:13,000
to debug until you you grow older and

00:04:11,410 --> 00:04:14,410
can you learn more about the language

00:04:13,000 --> 00:04:16,090
and then okay fine I'm not going to do

00:04:14,410 --> 00:04:19,330
this mistake again but it will be really

00:04:16,090 --> 00:04:21,340
nice if the compiler will bug me that

00:04:19,330 --> 00:04:23,980
this was like a new reference like don't

00:04:21,340 --> 00:04:24,430
do that please okay this was a real

00:04:23,980 --> 00:04:26,650
problem

00:04:24,430 --> 00:04:29,620
this causes an outage and it was my

00:04:26,650 --> 00:04:31,450
fault but whatever it was annoying but

00:04:29,620 --> 00:04:35,620
there are some things that are more

00:04:31,450 --> 00:04:38,650
subtle and I would say annoying but not

00:04:35,620 --> 00:04:41,720
like life and death but it's

00:04:38,650 --> 00:04:44,540
so when we are trying to process a lot

00:04:41,720 --> 00:04:47,690
of network metrics and things going from

00:04:44,540 --> 00:04:49,580
a firehose of events like we're a cloud

00:04:47,690 --> 00:04:52,790
provider after all there's a bunch of

00:04:49,580 --> 00:04:55,790
machines there and suddenly you have to

00:04:52,790 --> 00:04:58,340
deal with a lot of counters and those

00:04:55,790 --> 00:05:00,050
counters usually when it's positive

00:04:58,340 --> 00:05:04,160
you're going to go for an unsigned

00:05:00,050 --> 00:05:06,730
integer 64 that's fine but what is the

00:05:04,160 --> 00:05:09,530
difference from the first to the second

00:05:06,730 --> 00:05:10,370
one might be megabits another might be

00:05:09,530 --> 00:05:13,669
megabytes

00:05:10,370 --> 00:05:16,960
and this sounds like a very nice mistake

00:05:13,669 --> 00:05:19,820
right if you get the unit's wrong

00:05:16,960 --> 00:05:21,950
everything is going to be wrong and the

00:05:19,820 --> 00:05:24,800
only way that we found out that we were

00:05:21,950 --> 00:05:27,710
getting things wrong was because some

00:05:24,800 --> 00:05:30,710
customer was looking at the charts and

00:05:27,710 --> 00:05:32,810
like wait a minute it's impossible for

00:05:30,710 --> 00:05:35,180
me to have all this bandwidth it's kind

00:05:32,810 --> 00:05:36,889
of like yeah we were doing things wrong

00:05:35,180 --> 00:05:39,530
but this was like on the very early days

00:05:36,889 --> 00:05:41,440
on the beta axis Oh happily and we got

00:05:39,530 --> 00:05:45,860
the bug before it went to generate this

00:05:41,440 --> 00:05:48,650
but there's another fun one as we have a

00:05:45,860 --> 00:05:51,110
lot of networking gear we have a lot of

00:05:48,650 --> 00:05:52,910
CPUs and when you start doing processing

00:05:51,110 --> 00:05:54,740
on Scipio metrics sometimes you have to

00:05:52,910 --> 00:05:56,900
do like the linear interpolation for

00:05:54,740 --> 00:05:59,390
getting the points and suddenly you have

00:05:56,900 --> 00:06:02,930
a bunch of slopes on a bunch of counters

00:05:59,390 --> 00:06:05,479
that it's a pain because you probably

00:06:02,930 --> 00:06:08,960
need to do some functional programming

00:06:05,479 --> 00:06:11,960
style folding over several values and oh

00:06:08,960 --> 00:06:13,760
boy that's rest functional support will

00:06:11,960 --> 00:06:15,229
be so nice so much better than my

00:06:13,760 --> 00:06:18,260
function that was returning a function

00:06:15,229 --> 00:06:20,780
that was the point in SLO yeah it was

00:06:18,260 --> 00:06:22,460
not cool so I have very one thing

00:06:20,780 --> 00:06:24,530
there's only one thing that I really

00:06:22,460 --> 00:06:25,639
disagree with go that's kind of like you

00:06:24,530 --> 00:06:28,190
know I'm not going to talk about it

00:06:25,639 --> 00:06:30,560
because generics I think it's it's like

00:06:28,190 --> 00:06:32,600
even they're wrong okay I love them soon

00:06:30,560 --> 00:06:37,789
but let's talk about West bits which is

00:06:32,600 --> 00:06:40,789
why we are here right so it's there are

00:06:37,789 --> 00:06:45,350
several ways of you introducing a deck

00:06:40,789 --> 00:06:48,380
to your company and my approach was to

00:06:45,350 --> 00:06:51,700
try and make sure that these we did

00:06:48,380 --> 00:06:54,220
things on as grassroots as possible and

00:06:51,700 --> 00:06:56,260
like not trying to make a big boom not

00:06:54,220 --> 00:06:58,090
trying to force this choice over anyone

00:06:56,260 --> 00:07:01,480
after all we're a go Lang shop people

00:06:58,090 --> 00:07:03,640
love go there that's fine so the first

00:07:01,480 --> 00:07:07,030
thing I did was to create a highlight

00:07:03,640 --> 00:07:08,140
for rust in slack and then another one

00:07:07,030 --> 00:07:11,350
that was kind of like a little bit more

00:07:08,140 --> 00:07:14,050
evil it's kind of like all the problems

00:07:11,350 --> 00:07:16,360
that I know on goldlink and on Ruby we

00:07:14,050 --> 00:07:18,940
have Ruby and I kind of like I have a

00:07:16,360 --> 00:07:20,380
very special set of highlights so when

00:07:18,940 --> 00:07:21,370
people talk about those problems I'm

00:07:20,380 --> 00:07:24,700
aware of that

00:07:21,370 --> 00:07:26,890
and then I'm not going to go like rest

00:07:24,700 --> 00:07:28,570
evangelism strike force please know like

00:07:26,890 --> 00:07:30,610
I'm not going to ask people to here

00:07:28,570 --> 00:07:33,670
writings in rest please

00:07:30,610 --> 00:07:36,190
no I'm going to just be out work because

00:07:33,670 --> 00:07:38,770
my end goal is that we get better softer

00:07:36,190 --> 00:07:42,220
and we notice those shortcomings can be

00:07:38,770 --> 00:07:45,040
addressed in a better way so we start

00:07:42,220 --> 00:07:47,500
with a side project a very is more side

00:07:45,040 --> 00:07:50,980
project kind of like a toy project but

00:07:47,500 --> 00:07:53,620
the main difference here is that I try

00:07:50,980 --> 00:07:55,540
to make it production really like what

00:07:53,620 --> 00:07:58,060
would I do if I had to ship this to

00:07:55,540 --> 00:07:59,950
production so it's not only like it

00:07:58,060 --> 00:08:02,430
compiles it works we know that this kind

00:07:59,950 --> 00:08:07,540
of very true on rest like it's amazing

00:08:02,430 --> 00:08:09,940
but yeah let's do more so it might sound

00:08:07,540 --> 00:08:12,070
like overkill but if you keep practicing

00:08:09,940 --> 00:08:13,630
and trying to make things better and

00:08:12,070 --> 00:08:16,450
better and better they're going to be

00:08:13,630 --> 00:08:19,510
really better so the first project was

00:08:16,450 --> 00:08:22,420
actually Agrafena notations data source

00:08:19,510 --> 00:08:27,160
API who ever ever use it we're gonna

00:08:22,420 --> 00:08:30,790
hear the definition is is a dashboard in

00:08:27,160 --> 00:08:32,650
ping it's a very like something over

00:08:30,790 --> 00:08:35,110
simplifying it that shows amazing

00:08:32,650 --> 00:08:37,120
dashboards and gets parameters metrics

00:08:35,110 --> 00:08:38,979
and things from other sources and next

00:08:37,120 --> 00:08:41,050
I'll show you nice charts that helps you

00:08:38,979 --> 00:08:43,780
when you're a page at 2 a.m. and try to

00:08:41,050 --> 00:08:45,760
debug something it's great but those

00:08:43,780 --> 00:08:48,310
charts actually don't have some context

00:08:45,760 --> 00:08:52,900
like I didn't did a deploy but I added

00:08:48,310 --> 00:08:55,300
an index to my database and then what is

00:08:52,900 --> 00:08:58,420
the effect of changing another part of

00:08:55,300 --> 00:09:00,310
the system that's going to impact my

00:08:58,420 --> 00:09:02,650
application is going to reduce CPU usage

00:09:00,310 --> 00:09:03,880
the database database queries are going

00:09:02,650 --> 00:09:06,009
to return faster

00:09:03,880 --> 00:09:07,690
so we kind of like put a marker there

00:09:06,009 --> 00:09:09,279
like it's a bad line by the way you're

00:09:07,690 --> 00:09:11,560
running through those diseases on native

00:09:09,279 --> 00:09:14,019
feature in Griffin of five but there was

00:09:11,560 --> 00:09:17,319
not there yet so we created like a very

00:09:14,019 --> 00:09:20,110
simple API where I just go into a is

00:09:17,319 --> 00:09:21,639
lakh Bahts and say just added an index

00:09:20,110 --> 00:09:23,199
to the database and then we would see

00:09:21,639 --> 00:09:25,360
like a line this is the time where to

00:09:23,199 --> 00:09:28,120
change it happened and then you could

00:09:25,360 --> 00:09:29,560
correlate what was the complete behavior

00:09:28,120 --> 00:09:31,779
of the application and it's a very

00:09:29,560 --> 00:09:35,740
simple REST API like this could be like

00:09:31,779 --> 00:09:38,860
drawn in 20 lines of JavaScript whatever

00:09:35,740 --> 00:09:41,139
so we added parameters metrics this

00:09:38,860 --> 00:09:43,930
endpoint in this application made sure

00:09:41,139 --> 00:09:45,850
that we had all the data that were a big

00:09:43,930 --> 00:09:47,920
application would have like how long are

00:09:45,850 --> 00:09:49,690
we taking to write to the database how

00:09:47,920 --> 00:09:51,880
long are we yeah we're just doing the

00:09:49,690 --> 00:09:54,310
metrics the right way and for things

00:09:51,880 --> 00:09:56,980
that are exceptional that should not

00:09:54,310 --> 00:09:59,560
happen on the normal course we have

00:09:56,980 --> 00:10:01,540
structure logs and we're writing to the

00:09:59,560 --> 00:10:04,240
centralized logging infrastructure that

00:10:01,540 --> 00:10:06,370
we have at the company and not only that

00:10:04,240 --> 00:10:09,699
I made make sure to have a CI CD

00:10:06,370 --> 00:10:11,439
pipeline so we could actually have the

00:10:09,699 --> 00:10:13,420
same practices we have for our

00:10:11,439 --> 00:10:17,019
production software but it's on this toy

00:10:13,420 --> 00:10:18,759
project of course after our CI CD

00:10:17,019 --> 00:10:20,620
pipeline you're going to package it and

00:10:18,759 --> 00:10:22,839
we made sure that it worked well with

00:10:20,620 --> 00:10:26,259
docker make sure that we are caching the

00:10:22,839 --> 00:10:27,759
artifacts with a different set of hell

00:10:26,259 --> 00:10:30,519
when you're trying to deal with rust

00:10:27,759 --> 00:10:33,490
because depending on how you do it every

00:10:30,519 --> 00:10:35,589
build is going to take forever even if

00:10:33,490 --> 00:10:37,509
you're just doing like a hello world you

00:10:35,589 --> 00:10:39,459
are bringing like several crates and

00:10:37,509 --> 00:10:41,259
suddenly you takes ten minutes it's not

00:10:39,459 --> 00:10:44,980
good and finally we deployed it to

00:10:41,259 --> 00:10:46,630
communities it's kind of like almost the

00:10:44,980 --> 00:10:49,420
standard nowadays we still have a lot of

00:10:46,630 --> 00:10:52,500
mazes but yeah I think Cabrini's one and

00:10:49,420 --> 00:10:55,689
after you do you have done all this

00:10:52,500 --> 00:10:57,579
after this thing is running its own

00:10:55,689 --> 00:11:00,130
production you are like seeing how it

00:10:57,579 --> 00:11:03,279
works then you need to start asking the

00:11:00,130 --> 00:11:06,339
right questions and what is annoying to

00:11:03,279 --> 00:11:07,389
develop on rest like how hard was to

00:11:06,339 --> 00:11:12,399
actually build to the simple application

00:11:07,389 --> 00:11:14,589
interest how do you bug this thing it's

00:11:12,399 --> 00:11:16,600
kind of like what are the failure modes

00:11:14,589 --> 00:11:17,200
like what happens if the database dies

00:11:16,600 --> 00:11:18,460
is

00:11:17,200 --> 00:11:20,470
application I'm going to seg faults and

00:11:18,460 --> 00:11:23,590
crash are you going to just exit are

00:11:20,470 --> 00:11:25,450
going to try to recover so there's a lot

00:11:23,590 --> 00:11:28,030
of questions around this like how to UM

00:11:25,450 --> 00:11:31,360
board muting members like is learning

00:11:28,030 --> 00:11:32,710
rust really hard are people going to

00:11:31,360 --> 00:11:35,440
feel comfortable

00:11:32,710 --> 00:11:40,840
how about ID support people everyone

00:11:35,440 --> 00:11:43,240
loves their predator like we know that

00:11:40,840 --> 00:11:45,040
there's more than Vinnie max right so

00:11:43,240 --> 00:11:47,080
essentially everyone has their

00:11:45,040 --> 00:11:48,820
preferences you kind of have to try to

00:11:47,080 --> 00:11:51,220
find a compromise where you can make

00:11:48,820 --> 00:11:51,700
everyone happy as possible as happy as

00:11:51,220 --> 00:11:53,560
possible

00:11:51,700 --> 00:11:55,180
and this was a success mostly the

00:11:53,560 --> 00:11:57,100
project was running it was fine everyone

00:11:55,180 --> 00:11:58,870
was happy and that's it and then we move

00:11:57,100 --> 00:12:01,270
it to the second project now we're going

00:11:58,870 --> 00:12:03,040
getting more ambitious we had an

00:12:01,270 --> 00:12:04,870
internal hackathon on that put on the

00:12:03,040 --> 00:12:08,410
company and again I have the opportunity

00:12:04,870 --> 00:12:10,240
of replicating the first system the

00:12:08,410 --> 00:12:12,430
bigger one that was written going which

00:12:10,240 --> 00:12:15,550
was like it stream processing again

00:12:12,430 --> 00:12:17,980
reading data from Kafka and then I found

00:12:15,550 --> 00:12:21,010
the Holy Grail there's a very nice

00:12:17,980 --> 00:12:23,470
library called me Bartok Africa which

00:12:21,010 --> 00:12:26,020
which is extremely performance you can

00:12:23,470 --> 00:12:28,840
get a lot of performance by using this

00:12:26,020 --> 00:12:32,470
thing and I didn't have to write it it's

00:12:28,840 --> 00:12:34,570
amazing awesome we use it that and we

00:12:32,470 --> 00:12:36,090
start parsing a binary protocol with

00:12:34,570 --> 00:12:40,360
like some proprietary stuff yeah

00:12:36,090 --> 00:12:42,340
whatever did this parsing then do some

00:12:40,360 --> 00:12:44,670
real-time analysis over the stream of

00:12:42,340 --> 00:12:46,930
day it's kind of like it's pumping from

00:12:44,670 --> 00:12:49,240
literally like all the machines that we

00:12:46,930 --> 00:12:51,310
have and getting this data in regard

00:12:49,240 --> 00:12:53,350
impressive performance performance

00:12:51,310 --> 00:12:55,150
results by just trying to do the same

00:12:53,350 --> 00:12:57,760
thing that we're doing go but doing

00:12:55,150 --> 00:12:59,410
using the rest machinery and it was a

00:12:57,760 --> 00:13:01,210
success like a side project that went

00:12:59,410 --> 00:13:03,790
really well we had basically zero

00:13:01,210 --> 00:13:06,190
problems awesome and then we go to the

00:13:03,790 --> 00:13:09,760
third project and we get like amazing

00:13:06,190 --> 00:13:12,460
even bigger scope even more chances to

00:13:09,760 --> 00:13:13,690
fail right okay let's do a micro service

00:13:12,460 --> 00:13:18,010
in Reverse this time like with the

00:13:13,690 --> 00:13:20,440
full-blown structure the idea was to

00:13:18,010 --> 00:13:24,040
fold over a coffee stream again with a

00:13:20,440 --> 00:13:25,750
lot of machine data process it and do

00:13:24,040 --> 00:13:29,200
like the normal operations that we

00:13:25,750 --> 00:13:29,769
needed persist the results so dissing

00:13:29,200 --> 00:13:33,100
Ovid

00:13:29,769 --> 00:13:36,129
Remz databases and all those things

00:13:33,100 --> 00:13:38,350
and finally there's another beat that

00:13:36,129 --> 00:13:41,529
was really painful which is actually

00:13:38,350 --> 00:13:44,050
exposing it via a RPC API with something

00:13:41,529 --> 00:13:45,639
that it's so easy to do in going and

00:13:44,050 --> 00:13:47,980
then when you come to us and all

00:13:45,639 --> 00:13:50,220
now I have to use build steps and

00:13:47,980 --> 00:13:54,549
compile the proto and generate some

00:13:50,220 --> 00:13:57,970
things to help yeah okay it went well it

00:13:54,549 --> 00:14:00,970
was a success right I mean one two three

00:13:57,970 --> 00:14:05,769
the tree needs to be a success please

00:14:00,970 --> 00:14:10,049
okay mistakes were made a lot and what

00:14:05,769 --> 00:14:10,049
happens is a combination of failures

00:14:10,079 --> 00:14:16,779
this combination of failures is starts

00:14:12,759 --> 00:14:21,699
with a very interesting problem we

00:14:16,779 --> 00:14:23,499
suffered from the zero syndrome and I

00:14:21,699 --> 00:14:26,739
just realized that my slides are not

00:14:23,499 --> 00:14:30,160
synchronized with the older ones okay so

00:14:26,739 --> 00:14:33,939
sharks tornados diesel-powered rockets

00:14:30,160 --> 00:14:36,339
pineapple and pizza what those things

00:14:33,939 --> 00:14:39,160
have in common a bunch of those things

00:14:36,339 --> 00:14:41,740
happen on the last rascon where we had

00:14:39,160 --> 00:14:47,170
surgery showing amazing things on

00:14:41,740 --> 00:14:49,179
rockets yes amazing and we have seen

00:14:47,170 --> 00:14:51,189
same Griffin also saying like great

00:14:49,179 --> 00:14:53,139
things about diesel and like an how zero

00:14:51,189 --> 00:14:56,829
cost abstractions are awesome and all

00:14:53,139 --> 00:14:58,809
those things sure but when you add

00:14:56,829 --> 00:15:01,869
sharks and tornados you get sharknado

00:14:58,809 --> 00:15:04,240
and you don't want that so essentially

00:15:01,869 --> 00:15:05,759
the problem is when you jump the shark

00:15:04,240 --> 00:15:08,439
pun intended

00:15:05,759 --> 00:15:11,350
everything gets complicated and so when

00:15:08,439 --> 00:15:13,389
you have zero allocations like I wanted

00:15:11,350 --> 00:15:16,299
to get the data straight from Liberty

00:15:13,389 --> 00:15:19,360
Kafka and without allocating it again I

00:15:16,299 --> 00:15:21,069
Pro i parse it in memory I have the

00:15:19,360 --> 00:15:23,319
references going there and then I

00:15:21,069 --> 00:15:24,999
finally use this thing and make it work

00:15:23,319 --> 00:15:28,059
and everything is awesome and rainbows

00:15:24,999 --> 00:15:30,429
and unicorns and then you have like I

00:15:28,059 --> 00:15:35,199
try to make my type zero size it and I

00:15:30,429 --> 00:15:37,089
go diligently making this work I push

00:15:35,199 --> 00:15:38,649
really hard my zero called abstractions

00:15:37,089 --> 00:15:40,990
and point went with zero working

00:15:38,649 --> 00:15:46,130
software because I'm waiting

00:15:40,990 --> 00:15:47,720
so yes you sum this with the fact that I

00:15:46,130 --> 00:15:51,949
was the only experienced addressed

00:15:47,720 --> 00:15:54,009
developer on this team like noob also a

00:15:51,949 --> 00:15:57,430
little bit more than the other guy

00:15:54,009 --> 00:16:00,949
essentially my takeaway is clone away

00:15:57,430 --> 00:16:03,199
this might sound awkward and even

00:16:00,949 --> 00:16:04,639
counter production like wait a minute

00:16:03,199 --> 00:16:07,519
we wanted to use rust because of the

00:16:04,639 --> 00:16:10,370
ownership you know learning things is

00:16:07,519 --> 00:16:12,019
complicated and if you just clone away

00:16:10,370 --> 00:16:14,180
while you're getting started you are

00:16:12,019 --> 00:16:16,279
still going to be miles ahead on memory

00:16:14,180 --> 00:16:19,430
safe it's a safety if you were doing my

00:16:16,279 --> 00:16:21,110
walking free it's a trade off it's a

00:16:19,430 --> 00:16:23,930
it's kind of like training wheels for

00:16:21,110 --> 00:16:26,300
your bicycle you're still learning how

00:16:23,930 --> 00:16:27,889
to deal with the language and this helps

00:16:26,300 --> 00:16:31,100
a lot for you to get speed up and get

00:16:27,889 --> 00:16:35,089
productive and fun story even cloning it

00:16:31,100 --> 00:16:39,680
was faster can go learning ownership is

00:16:35,089 --> 00:16:42,230
not easy that's my takeaway I've been

00:16:39,680 --> 00:16:44,149
doing risk for several years now and I

00:16:42,230 --> 00:16:46,089
still don't get it properly I think it's

00:16:44,149 --> 00:16:48,589
always something new that surprises me

00:16:46,089 --> 00:16:50,839
usually I'm wrong that's why I get

00:16:48,589 --> 00:16:52,339
surprised like oh yeah I wasn't I wasn't

00:16:50,839 --> 00:16:54,740
paying that much attention but it's

00:16:52,339 --> 00:16:56,990
really he worthy I had the pleasure of

00:16:54,740 --> 00:17:00,350
having an intern for this summer doing a

00:16:56,990 --> 00:17:03,470
roast project and he was like oh wait a

00:17:00,350 --> 00:17:06,079
minute I have to think before I build

00:17:03,470 --> 00:17:08,689
stuff I don't I just cannot like go

00:17:06,079 --> 00:17:09,919
bashing and like think about the types

00:17:08,689 --> 00:17:12,199
thinking about the things that I'm

00:17:09,919 --> 00:17:14,209
trying to do so essentially when you

00:17:12,199 --> 00:17:15,589
spend some time trying to learn the

00:17:14,209 --> 00:17:18,110
language better you become a better

00:17:15,589 --> 00:17:20,179
software engineer which is amazing it's

00:17:18,110 --> 00:17:24,110
really cool and talking about cool stuff

00:17:20,179 --> 00:17:26,839
and terminators of sharks RIS Knightley

00:17:24,110 --> 00:17:28,760
is super cool and this was one of the

00:17:26,839 --> 00:17:31,610
main consequences of we trying to use

00:17:28,760 --> 00:17:33,679
rocket and this is not two rockets the

00:17:31,610 --> 00:17:36,470
merit it's like I I still want to use

00:17:33,679 --> 00:17:39,260
rocket but suddenly we found out that

00:17:36,470 --> 00:17:40,309
nightly it's awesome but it's a

00:17:39,260 --> 00:17:44,870
nightmare

00:17:40,309 --> 00:17:46,909
because suddenly we had a problem that

00:17:44,870 --> 00:17:48,890
rocket was having because of the plugins

00:17:46,909 --> 00:17:51,950
on the compiler and then we had to

00:17:48,890 --> 00:17:52,930
upgrade to a new nightly snapshot and

00:17:51,950 --> 00:17:55,030
then

00:17:52,930 --> 00:17:56,980
suddenly we broke diesel and then oh

00:17:55,030 --> 00:17:59,380
 and we went into that very

00:17:56,980 --> 00:18:01,990
inconsistent state where we couldn't go

00:17:59,380 --> 00:18:04,480
back because then other things will

00:18:01,990 --> 00:18:07,330
start failing in very unpredictable ways

00:18:04,480 --> 00:18:09,520
and inside that was a very stupid idea

00:18:07,330 --> 00:18:11,410
but yeah it's kind of like everyone

00:18:09,520 --> 00:18:14,220
these mistakes and that's it we're fine

00:18:11,410 --> 00:18:16,270
is fine so the takeaway for this is like

00:18:14,220 --> 00:18:18,580
fewer moving parts

00:18:16,270 --> 00:18:20,320
please it's kind of like if you can

00:18:18,580 --> 00:18:24,160
stick to a stable version you're going

00:18:20,320 --> 00:18:26,170
to be a way way happier person even if

00:18:24,160 --> 00:18:29,680
you miss those cool features that

00:18:26,170 --> 00:18:31,390
Knightley has so a high rate of change

00:18:29,680 --> 00:18:33,670
which is actually what happens in

00:18:31,390 --> 00:18:36,460
Knightley leads to an even higher quad

00:18:33,670 --> 00:18:38,320
cognitive load and when you think for a

00:18:36,460 --> 00:18:40,510
bit wait a minute we were already kind

00:18:38,320 --> 00:18:43,270
of learning in onboarding people on rest

00:18:40,510 --> 00:18:45,490
and the reality is that with this

00:18:43,270 --> 00:18:49,060
context stable can be bleeding-edge

00:18:45,490 --> 00:18:52,270
enough really so yeah first is school

00:18:49,060 --> 00:18:54,070
and it has its price to pay when you're

00:18:52,270 --> 00:18:56,530
learning something new it could be any

00:18:54,070 --> 00:18:57,970
other language and which brings me to

00:18:56,530 --> 00:19:00,820
the other points that I wanted to

00:18:57,970 --> 00:19:07,120
address today which is the shiny object

00:19:00,820 --> 00:19:09,310
syndrome let's be honest shiny objects

00:19:07,120 --> 00:19:13,210
are cool it's kind of like playing with

00:19:09,310 --> 00:19:16,060
new tech new hardware new approaches new

00:19:13,210 --> 00:19:17,920
language like rest it's not that new if

00:19:16,060 --> 00:19:19,000
it I'm understanding correctly but

00:19:17,920 --> 00:19:21,580
whatever

00:19:19,000 --> 00:19:23,350
so sometimes you get really smart

00:19:21,580 --> 00:19:26,850
abstractions you really want to make

00:19:23,350 --> 00:19:32,440
things shine and be really efficient and

00:19:26,850 --> 00:19:34,600
sometimes it feels like magic like so

00:19:32,440 --> 00:19:37,210
I'm having this pipe that is being

00:19:34,600 --> 00:19:40,180
automatically dereferences into

00:19:37,210 --> 00:19:42,430
something else and then the compiler is

00:19:40,180 --> 00:19:44,770
able to inline this thing and make a

00:19:42,430 --> 00:19:46,720
zero cost abstraction or whatever like

00:19:44,770 --> 00:19:49,030
it's amazing but sometimes you end up

00:19:46,720 --> 00:19:50,320
with types that I have like these where

00:19:49,030 --> 00:19:52,210
trate trate trate trate trate trate

00:19:50,320 --> 00:19:55,060
several traits it's kinda like it gets

00:19:52,210 --> 00:19:59,050
really complex I think that the good

00:19:55,060 --> 00:20:02,730
example is that I have ever have it has

00:19:59,050 --> 00:20:04,300
anyone heard about scours

00:20:02,730 --> 00:20:06,220
turing-complete

00:20:04,300 --> 00:20:08,740
type system where you can do like how

00:20:06,220 --> 00:20:11,440
my powers compile-time just by using

00:20:08,740 --> 00:20:13,179
types it's kind of insane and super cool

00:20:11,440 --> 00:20:14,980
check it out but yeah it's kind of you

00:20:13,179 --> 00:20:17,500
do you want to play with those things

00:20:14,980 --> 00:20:19,870
and have fun but a reality check is that

00:20:17,500 --> 00:20:21,730
this is not Hogwarts if you're keeping

00:20:19,870 --> 00:20:23,669
doing magic you're going to have a lot

00:20:21,730 --> 00:20:26,860
of pain to deal with this thing later

00:20:23,669 --> 00:20:28,720
the fact that you can do it like the

00:20:26,860 --> 00:20:30,880
Hanoi towers doesn't mean that you

00:20:28,720 --> 00:20:35,500
should do it on production or a like on

00:20:30,880 --> 00:20:37,539
on a real serious project and then I

00:20:35,500 --> 00:20:40,390
have like something that's always

00:20:37,539 --> 00:20:43,450
bugging me my background is Java

00:20:40,390 --> 00:20:46,450
programming and like very big and boring

00:20:43,450 --> 00:20:49,840
enterprise systems and I I ask you oh

00:20:46,450 --> 00:20:53,740
yeah I jump what is idiomatic code

00:20:49,840 --> 00:20:56,289
I kind of like gave it away that when

00:20:53,740 --> 00:20:58,360
you are like on a Java or something more

00:20:56,289 --> 00:21:02,140
like traditional you have a lot of

00:20:58,360 --> 00:21:03,700
literature like people have the the

00:21:02,140 --> 00:21:05,980
information like people already went

00:21:03,700 --> 00:21:09,580
from any problems in the the path the

00:21:05,980 --> 00:21:11,530
patterns emerged from the needs and then

00:21:09,580 --> 00:21:13,809
you kind of like have good solutions not

00:21:11,530 --> 00:21:16,630
only for code issues like object

00:21:13,809 --> 00:21:18,880
orientation or whatever or some function

00:21:16,630 --> 00:21:22,179
of paradise and that you can use but you

00:21:18,880 --> 00:21:24,340
also have patterns for things like

00:21:22,179 --> 00:21:26,620
enterprise applications which is going

00:21:24,340 --> 00:21:28,179
to have a talk today that pouts kind of

00:21:26,620 --> 00:21:30,970
like how to restructure most application

00:21:28,179 --> 00:21:33,190
routes check it out so the takeaway here

00:21:30,970 --> 00:21:34,990
is that there is this pretty young and

00:21:33,190 --> 00:21:36,429
it's really cute so by the way I love

00:21:34,990 --> 00:21:38,320
this I wish that this was like the

00:21:36,429 --> 00:21:41,530
official mascot not the unofficial one

00:21:38,320 --> 00:21:44,140
but the thing is we don't have an

00:21:41,530 --> 00:21:47,289
established patterns yet we have a bunch

00:21:44,140 --> 00:21:48,610
of things that are happening and yet we

00:21:47,289 --> 00:21:50,559
don't have them yet because the

00:21:48,610 --> 00:21:53,799
community is actively working on trying

00:21:50,559 --> 00:21:58,809
to find those patterns which is great so

00:21:53,799 --> 00:22:02,980
it's really easy to end up writing X in

00:21:58,809 --> 00:22:05,559
Y like language a in language

00:22:02,980 --> 00:22:07,990
and this is like a great example of the

00:22:05,559 --> 00:22:10,809
things that you should not do it's kind

00:22:07,990 --> 00:22:14,500
of like try to make abstract proxy

00:22:10,809 --> 00:22:18,659
factory factory from having to go into

00:22:14,500 --> 00:22:21,820
interest or you go for the if or new

00:22:18,659 --> 00:22:24,370
style of early returns and you can make

00:22:21,820 --> 00:22:27,460
like very long functions which is pretty

00:22:24,370 --> 00:22:28,960
ok go in general because you're kind of

00:22:27,460 --> 00:22:30,010
like that's the style and you get used

00:22:28,960 --> 00:22:32,470
to it and it's really like

00:22:30,010 --> 00:22:34,649
easy for you to reason about it but this

00:22:32,470 --> 00:22:37,480
doesn't mean that it's ideal meta crust

00:22:34,649 --> 00:22:39,340
also if you end up doing a lot of match

00:22:37,480 --> 00:22:41,679
match match matching two nested things

00:22:39,340 --> 00:22:44,080
and then you go with pyro means of doom

00:22:41,679 --> 00:22:46,059
like JavaScript I mean this is not

00:22:44,080 --> 00:22:49,960
JavaScript this is rest we need to try

00:22:46,059 --> 00:22:52,330
to play different and actually

00:22:49,960 --> 00:22:54,520
experimenting with those things is

00:22:52,330 --> 00:22:57,159
really important but you really need to

00:22:54,520 --> 00:22:59,020
be mindful of your own business we all

00:22:57,159 --> 00:23:02,500
have pieces we all have experiences of

00:22:59,020 --> 00:23:04,600
our lives so this brings me to the most

00:23:02,500 --> 00:23:07,330
important points which is the human

00:23:04,600 --> 00:23:09,700
factor when we go over all this

00:23:07,330 --> 00:23:13,270
experimentation seeing all the mistakes

00:23:09,700 --> 00:23:15,250
and ask the right questions again and by

00:23:13,270 --> 00:23:17,440
the way asking the wrong ones is fine as

00:23:15,250 --> 00:23:19,840
long as you're asking so the first

00:23:17,440 --> 00:23:22,029
question that I have is am I too excited

00:23:19,840 --> 00:23:24,220
about rust I mean we all love the

00:23:22,029 --> 00:23:27,490
language this guy like is really cool I

00:23:24,220 --> 00:23:31,980
would easily like oh do you want to

00:23:27,490 --> 00:23:34,450
write rust full-time sure why not school

00:23:31,980 --> 00:23:37,360
but when we get too excited

00:23:34,450 --> 00:23:38,890
in hindsight in insight it's kind of

00:23:37,360 --> 00:23:42,100
like hard for you to pay attention

00:23:38,890 --> 00:23:45,190
because you're so excited and sometimes

00:23:42,100 --> 00:23:47,890
people were talking to you and saying

00:23:45,190 --> 00:23:50,649
like hey this is not cool this is kind

00:23:47,890 --> 00:23:54,250
of like Strobel song RLS is crashing

00:23:50,649 --> 00:23:56,529
every hour I mean I don't I cannot jump

00:23:54,250 --> 00:24:00,549
from a function to an order it's I have

00:23:56,529 --> 00:24:02,320
to use ctags really I mean yeah am i

00:24:00,549 --> 00:24:03,760
listening to what people are saying me

00:24:02,320 --> 00:24:07,450
and like this I knows that they are

00:24:03,760 --> 00:24:09,190
giving me or I just I'm just listening

00:24:07,450 --> 00:24:11,559
to what I want to hear like I love first

00:24:09,190 --> 00:24:12,630
and I want to make successful yo let's

00:24:11,559 --> 00:24:16,920
go on up

00:24:12,630 --> 00:24:19,440
like we really need to be mindful and

00:24:16,920 --> 00:24:22,230
this is an interesting one

00:24:19,440 --> 00:24:25,340
make sure you have explicit by him not

00:24:22,230 --> 00:24:27,510
only from your direct manager but beyond

00:24:25,340 --> 00:24:31,290
today infinity and beyond

00:24:27,510 --> 00:24:34,170
why what happens if you're a manager

00:24:31,290 --> 00:24:36,180
move moves on and he was cool with a

00:24:34,170 --> 00:24:39,060
rest project and suddenly the director

00:24:36,180 --> 00:24:41,940
wakes up and we have I didn't know that

00:24:39,060 --> 00:24:45,360
and suddenly you have a very big ball of

00:24:41,940 --> 00:24:47,660
mud to deal with it's kind of like it's

00:24:45,360 --> 00:24:49,830
nice to have like the

00:24:47,660 --> 00:24:51,120
experimenting in a corner but make sure

00:24:49,830 --> 00:24:53,640
that this is being communicated

00:24:51,120 --> 00:24:56,250
somewhere else coming with a surprise

00:24:53,640 --> 00:24:58,560
can be really bad and essentially can

00:24:56,250 --> 00:25:02,700
mean that even a so sex successful

00:24:58,560 --> 00:25:05,280
project can be killed so and I think

00:25:02,700 --> 00:25:07,800
this is the most interesting one like

00:25:05,280 --> 00:25:09,360
people have opinions some people were

00:25:07,800 --> 00:25:12,720
like oh you don't need a package me a

00:25:09,360 --> 00:25:15,360
package manager no no it's fine just

00:25:12,720 --> 00:25:18,150
vendor everything you don't even need

00:25:15,360 --> 00:25:20,220
the gold link tools that the vendor

00:25:18,150 --> 00:25:24,020
things you just copy stuff there I heard

00:25:20,220 --> 00:25:27,060
this people have opinions surprisingly

00:25:24,020 --> 00:25:29,970
yeah and you need to be mindful that not

00:25:27,060 --> 00:25:31,860
everyone has to think like you and you

00:25:29,970 --> 00:25:33,240
don't have to agree with them you have

00:25:31,860 --> 00:25:35,730
the keynotes saying that we have a

00:25:33,240 --> 00:25:37,710
continuous tension between different

00:25:35,730 --> 00:25:39,720
ways of seeing things and we need to be

00:25:37,710 --> 00:25:42,950
mindful of them because at the end of

00:25:39,720 --> 00:25:45,930
the day carbecue ting is totally a thing

00:25:42,950 --> 00:25:48,690
and that's fine because at the end of

00:25:45,930 --> 00:25:50,640
the day we are humans and people in

00:25:48,690 --> 00:25:53,730
interactions should matter

00:25:50,640 --> 00:25:57,270
way way more than the technology that we

00:25:53,730 --> 00:26:00,390
are using so on the closing notes

00:25:57,270 --> 00:26:06,120
there's a secret sauce for making all of

00:26:00,390 --> 00:26:10,020
this be a little bit easier the secret

00:26:06,120 --> 00:26:13,620
sauce is empathy empathy is a powerful

00:26:10,020 --> 00:26:16,320
feature to actually make you go out of

00:26:13,620 --> 00:26:18,870
your perfect rose roles and understand

00:26:16,320 --> 00:26:22,530
that sometimes golang is the better

00:26:18,870 --> 00:26:23,210
solution even if it hurts to say that

00:26:22,530 --> 00:26:26,419
but

00:26:23,210 --> 00:26:28,220
you know we can have we there are some

00:26:26,419 --> 00:26:31,429
situations where it doesn't make sense

00:26:28,220 --> 00:26:34,399
to try to force things and honestly this

00:26:31,429 --> 00:26:35,870
is really hard to do I would say that by

00:26:34,399 --> 00:26:37,970
far is the hardest thing like to ecology

00:26:35,870 --> 00:26:41,570
meets that admit defeat okay this is not

00:26:37,970 --> 00:26:44,450
the time yet to use rest but yeah if I

00:26:41,570 --> 00:26:46,850
have to give just one advice that kind

00:26:44,450 --> 00:26:48,649
of like applies to me and I failed on

00:26:46,850 --> 00:26:49,070
this and please don't do what I have

00:26:48,649 --> 00:26:52,190
done

00:26:49,070 --> 00:26:54,950
please use empathy thank you

00:26:52,190 --> 00:26:58,049
[Applause]

00:26:54,950 --> 00:26:58,049
[Music]

00:26:58,920 --> 00:27:02,049
[Applause]

00:27:02,740 --> 00:27:06,330
[Music]

00:27:04,750 --> 00:27:11,299
you

00:27:06,330 --> 00:27:11,299

YouTube URL: https://www.youtube.com/watch?v=0IMe7C5y3PU


