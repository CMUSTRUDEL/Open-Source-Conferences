Title: Rust support for KDevelop — Emma Gospodinova
Publication date: 2018-01-06
Playlist: Rust Belt Rust 2017
Description: 
	Rust was voted “most loved” language by developers for the second year in a row in the Stack Overflow developer survey. There have been projects made using Rust on everything from operating systems to game engines for Minecraft-like games. Despite this, IDE support is still very limited.

As my Google Summer of Code project, I worked on a Rust plug-in for the KDevelop IDE which aimed to support most standard IDE features such as semantic highlighting, code completion, project management and debugging. I will go through the challenges of integrating language support in an existing IDE and talk about how adding semantic highlighting was one line of code and getting debugging to work took less than 10 minutes.
Captions: 
	00:00:03,620 --> 00:00:13,369
hi everyone I'm happier here to see see

00:00:09,500 --> 00:00:16,340
the talk so let's let's let's dive

00:00:13,369 --> 00:00:19,400
straight in so a few words about me so I

00:00:16,340 --> 00:00:23,560
am a third-year undergraduate student at

00:00:19,400 --> 00:00:26,960
Imperial College London I got into rust

00:00:23,560 --> 00:00:28,339
well I I initially found out about rust

00:00:26,960 --> 00:00:32,150
a couple of years ago but I got more

00:00:28,339 --> 00:00:37,160
into it earlier this year and I decided

00:00:32,150 --> 00:00:41,170
to do a G sock project working on adding

00:00:37,160 --> 00:00:47,680
language support in K develop for rust

00:00:41,170 --> 00:00:50,300
so yeah so a bit about the project so

00:00:47,680 --> 00:00:55,150
the main the main sort of part of the

00:00:50,300 --> 00:00:59,150
project is a library that I that I did

00:00:55,150 --> 00:01:01,460
which is essentially kind of takes

00:00:59,150 --> 00:01:05,020
information from from the russ compiler

00:01:01,460 --> 00:01:07,640
from lip syntax and then presents it to

00:01:05,020 --> 00:01:10,969
presents it to k develop work where I

00:01:07,640 --> 00:01:12,649
hooked up things and yeah basically

00:01:10,969 --> 00:01:17,030
you'll you'll see a bit later

00:01:12,649 --> 00:01:21,289
like the a few demos from from k develop

00:01:17,030 --> 00:01:23,329
so why not use the rust language server

00:01:21,289 --> 00:01:28,670
so the rest language server is is pretty

00:01:23,329 --> 00:01:32,319
cool like it essentially summarizes all

00:01:28,670 --> 00:01:36,889
all the important information from from

00:01:32,319 --> 00:01:38,659
the rust compiler and it presented to it

00:01:36,889 --> 00:01:42,380
presents it through the language server

00:01:38,659 --> 00:01:45,289
protocol and this is great for editors

00:01:42,380 --> 00:01:49,939
like Visual Studio code and Kate for

00:01:45,289 --> 00:01:52,340
example but specifically for K develop I

00:01:49,939 --> 00:01:57,619
found that it might not be the best

00:01:52,340 --> 00:02:01,159
approach because essentially K develop

00:01:57,619 --> 00:02:07,249
expects a lot of internal structures to

00:02:01,159 --> 00:02:10,610
be to be built and the K develop core

00:02:07,249 --> 00:02:13,730
code as a not not the language plug-in

00:02:10,610 --> 00:02:16,220
but the core of K develop does a lot a

00:02:13,730 --> 00:02:19,900
lot of things for you

00:02:16,220 --> 00:02:23,150
so things like semantic highlighting

00:02:19,900 --> 00:02:25,040
renaming declarations finding usages

00:02:23,150 --> 00:02:28,520
that kind of thing like that's all done

00:02:25,040 --> 00:02:31,690
for that's all done for you by K develop

00:02:28,520 --> 00:02:37,280
as long as the language plug-in builds

00:02:31,690 --> 00:02:41,060
these internal data structures so what

00:02:37,280 --> 00:02:43,010
is what is ASD Redux so it's it's a

00:02:41,060 --> 00:02:46,070
self-contained library it's somewhat

00:02:43,010 --> 00:02:51,110
similar to Lipsy lying if you've seen

00:02:46,070 --> 00:02:55,310
that or see pythons ast library it's

00:02:51,110 --> 00:02:58,340
it's a bit lower level than RLS so with

00:02:55,310 --> 00:03:01,460
our LS you would ask ask the language

00:02:58,340 --> 00:03:04,910
server something like Oh tell me all the

00:03:01,460 --> 00:03:07,280
declarations for this particular symbol

00:03:04,910 --> 00:03:09,860
or tell me all the usages for this

00:03:07,280 --> 00:03:12,050
particular symbol and RLS would give all

00:03:09,860 --> 00:03:14,870
those to you here it's more like oh

00:03:12,050 --> 00:03:19,580
here's a bunch of symbols you figure out

00:03:14,870 --> 00:03:24,320
what to do it provides a view of the

00:03:19,580 --> 00:03:29,060
abstract syntax tree of the of the code

00:03:24,320 --> 00:03:32,150
and it sort of it exposes this as a C

00:03:29,060 --> 00:03:36,530
API and it hides the details of working

00:03:32,150 --> 00:03:41,240
with Lipstein syntax so yeah at the

00:03:36,530 --> 00:03:44,990
moment it's using lip syntax as a sort

00:03:41,240 --> 00:03:48,350
of platform to build on in the future I

00:03:44,990 --> 00:03:53,170
might I'm looking into getting more

00:03:48,350 --> 00:03:55,730
information from the rest compiler and

00:03:53,170 --> 00:04:01,850
exposing that in a meaningful way as

00:03:55,730 --> 00:04:06,440
well so how does this interact with Kay

00:04:01,850 --> 00:04:10,160
develop so Kay develop essentially

00:04:06,440 --> 00:04:12,560
expects these internal data structures

00:04:10,160 --> 00:04:17,030
to be built the these these are called

00:04:12,560 --> 00:04:21,500
the declaration use chain essentially

00:04:17,030 --> 00:04:26,390
what what happens is from Kay develop I

00:04:21,500 --> 00:04:30,640
passed to ast redux the source code that

00:04:26,390 --> 00:04:30,640
it should parse and produce an ast for

00:04:30,670 --> 00:04:38,420
it does its thing and then k develop

00:04:34,310 --> 00:04:44,540
goes through the AST and populates its

00:04:38,420 --> 00:04:47,000
internal data structures so yeah let's

00:04:44,540 --> 00:04:50,060
let's go on and see some of the things

00:04:47,000 --> 00:04:54,050
that you can do in kata valve so like I

00:04:50,060 --> 00:04:57,260
said essentially what what happens is

00:04:54,050 --> 00:04:59,960
you go through the ast for each node you

00:04:57,260 --> 00:05:06,740
figure out like if it's something like a

00:04:59,960 --> 00:05:08,570
function a struct an ample or anything

00:05:06,740 --> 00:05:12,380
else you build the corresponding data

00:05:08,570 --> 00:05:14,450
structure in kata bell and you're done

00:05:12,380 --> 00:05:16,670
you get a lot of things for free at that

00:05:14,450 --> 00:05:19,340
point so stuff like semantics

00:05:16,670 --> 00:05:22,910
highlighting that's basically a single

00:05:19,340 --> 00:05:26,300
function call and voila Kay develop

00:05:22,910 --> 00:05:33,280
figures out the rest for you so let

00:05:26,300 --> 00:05:38,080
there be color so yeah renaming

00:05:33,280 --> 00:05:39,680
declarations or finding finding usages

00:05:38,080 --> 00:05:42,260
whatever you want

00:05:39,680 --> 00:05:44,240
same thing like everything is basically

00:05:42,260 --> 00:05:49,780
done for you

00:05:44,240 --> 00:05:57,080
so let's see if this'll work yeah so

00:05:49,780 --> 00:06:04,040
renaming a declaration that's also it

00:05:57,080 --> 00:06:06,050
sort of just works out of the box with

00:06:04,040 --> 00:06:09,350
regards to building and debugging

00:06:06,050 --> 00:06:14,800
straight from the ID again Kay develop

00:06:09,350 --> 00:06:19,640
has support for gdb and ll DB so it was

00:06:14,800 --> 00:06:23,150
essentially a matter of getting those

00:06:19,640 --> 00:06:26,360
hooked up to work with rust executables

00:06:23,150 --> 00:06:28,130
and this as well works straight out of

00:06:26,360 --> 00:06:34,610
the box you can you can run your code

00:06:28,130 --> 00:06:39,430
directly from from Kay develop so same

00:06:34,610 --> 00:06:42,340
thing you can you can add breakpoints

00:06:39,430 --> 00:06:44,620
you can see all of the

00:06:42,340 --> 00:06:49,150
all of the variables all their current

00:06:44,620 --> 00:06:51,790
values step through the program etc etc

00:06:49,150 --> 00:06:54,870
all the regular things you you would

00:06:51,790 --> 00:06:54,870
want to do when debugging

00:07:13,620 --> 00:07:21,300
so yeah code completion so code

00:07:19,170 --> 00:07:24,540
completion currently works for local

00:07:21,300 --> 00:07:29,160
declarations I'm currently working on

00:07:24,540 --> 00:07:35,340
getting it set up for the standard the

00:07:29,160 --> 00:07:37,890
rest standard library so this is proving

00:07:35,340 --> 00:07:40,920
to be a bit more interesting because a

00:07:37,890 --> 00:07:45,150
lot of like in in the standard library a

00:07:40,920 --> 00:07:48,590
lot of things are implemented with the

00:07:45,150 --> 00:07:58,590
help of macros and expanding macros is

00:07:48,590 --> 00:08:02,780
an interesting process so yeah but I am

00:07:58,590 --> 00:08:06,570
trying to work around that by sort of

00:08:02,780 --> 00:08:10,290
doing what a lot of other language

00:08:06,570 --> 00:08:16,140
plugins do which is exposing like

00:08:10,290 --> 00:08:19,170
building essentially a the full or

00:08:16,140 --> 00:08:22,290
expanding the full source code of the

00:08:19,170 --> 00:08:27,290
standard library and then Kay develop

00:08:22,290 --> 00:08:31,260
can just parse that directly or yeah and

00:08:27,290 --> 00:08:34,920
in the future I'm looking to do the same

00:08:31,260 --> 00:08:39,900
thing for other libraries so cargo has

00:08:34,920 --> 00:08:41,700
this great thing which is it downloads

00:08:39,900 --> 00:08:45,600
the libraries it checks them out from

00:08:41,700 --> 00:08:49,970
get and you can essentially find all the

00:08:45,600 --> 00:08:49,970
metadata all the information you need to

00:08:51,200 --> 00:09:00,840
where where those libraries are checked

00:08:54,510 --> 00:09:02,400
out and how you can like be where you

00:09:00,840 --> 00:09:05,910
can find the source code so you can go

00:09:02,400 --> 00:09:08,070
through that parse parse that and yeah

00:09:05,910 --> 00:09:11,490
I'm looking I'm looking to do that in

00:09:08,070 --> 00:09:15,570
the future and similarly for project

00:09:11,490 --> 00:09:20,670
management at the moment you can you can

00:09:15,570 --> 00:09:24,530
create projects straight from K develop

00:09:20,670 --> 00:09:27,150
I'm looking in the future to expand

00:09:24,530 --> 00:09:30,900
expand more support like expand the

00:09:27,150 --> 00:09:35,250
support for in a cargo integration so

00:09:30,900 --> 00:09:39,950
the metadata that's provided by by cargo

00:09:35,250 --> 00:09:44,220
for dependencies for example that can be

00:09:39,950 --> 00:09:50,790
that can be parsed and the ID can then

00:09:44,220 --> 00:09:53,190
figure out how to think how to do code

00:09:50,790 --> 00:09:57,800
completion and stuff like that for any

00:09:53,190 --> 00:10:00,300
libraries you're using so yeah I

00:09:57,800 --> 00:10:03,720
slightly rushed through through this

00:10:00,300 --> 00:10:09,420
presentation because yeah I figured that

00:10:03,720 --> 00:10:14,010
I had a bit less time but yeah so for

00:10:09,420 --> 00:10:16,830
the future like I mentioned there's

00:10:14,010 --> 00:10:22,020
stuff like there there's a lot of stuff

00:10:16,830 --> 00:10:26,010
left to be done hopefully I've tried to

00:10:22,020 --> 00:10:32,460
make the library part of this project

00:10:26,010 --> 00:10:37,710
which is ast redux a bit more a bit more

00:10:32,460 --> 00:10:42,180
agnostic so it's not that tightly that

00:10:37,710 --> 00:10:44,730
it's not that sort of tightly integrated

00:10:42,180 --> 00:10:49,110
with K develop it can be used in other

00:10:44,730 --> 00:10:52,080
projects as well so there's a lot of

00:10:49,110 --> 00:10:57,290
work that can be done there so things

00:10:52,080 --> 00:11:00,410
like building straight it straight like

00:10:57,290 --> 00:11:03,290
essentially using the russ compiler to

00:11:00,410 --> 00:11:08,340
build and extract any errors that are

00:11:03,290 --> 00:11:11,880
that are found in the code and expose

00:11:08,340 --> 00:11:15,600
those there can be integration with RLS

00:11:11,880 --> 00:11:19,140
in the future so yeah stuff like that

00:11:15,600 --> 00:11:23,640
there's there's a lot a lot that can be

00:11:19,140 --> 00:11:26,760
done in this in this regard so yeah I'd

00:11:23,640 --> 00:11:29,850
like to say thank you to the organizers

00:11:26,760 --> 00:11:32,720
of this conference Carol especially for

00:11:29,850 --> 00:11:36,290
inviting me to give a talk

00:11:32,720 --> 00:11:39,259
and everyone in the Ross community that

00:11:36,290 --> 00:11:41,990
was so helpful throughout my ji-suk

00:11:39,259 --> 00:11:46,670
project and was giving me lots of

00:11:41,990 --> 00:11:49,819
feedback and my mentors at Katie as well

00:11:46,670 --> 00:11:52,879
so thing Thank You thing thanks to

00:11:49,819 --> 00:11:54,259
everyone and thank you all for for

00:11:52,879 --> 00:11:58,490
listening

00:11:54,259 --> 00:12:01,970
so with that I I just want to say if you

00:11:58,490 --> 00:12:06,019
want to try out k develop come and see

00:12:01,970 --> 00:12:08,120
me at some point today and I can explain

00:12:06,019 --> 00:12:10,939
how you can do that because at the

00:12:08,120 --> 00:12:12,829
moment it's based on the current masters

00:12:10,939 --> 00:12:15,860
so building everything from scratch

00:12:12,829 --> 00:12:17,749
might be a bit not straightforward so

00:12:15,860 --> 00:12:20,420
yeah come and see me at any point I'm

00:12:17,749 --> 00:12:24,279
happy to help ya

00:12:20,420 --> 00:12:24,279
so with that are there any questions

00:12:27,249 --> 00:13:02,959
yeah it's on github I can give you the

00:12:30,920 --> 00:13:05,300
link so yeah so at the moment I am

00:13:02,959 --> 00:13:08,300
trying to keep it up to date and the way

00:13:05,300 --> 00:13:10,790
I've set it up so that I can figure out

00:13:08,300 --> 00:13:14,779
when something breaks is I have a daily

00:13:10,790 --> 00:13:17,929
build on Travis setup so if anything

00:13:14,779 --> 00:13:20,990
breaks overnight like I get an email

00:13:17,929 --> 00:13:22,730
instantly so I've been trying to keep up

00:13:20,990 --> 00:13:33,230
with those there haven't been that many

00:13:22,730 --> 00:13:36,589
of those so far so yeah so that's one

00:13:33,230 --> 00:13:39,050
thing that I'm trying to decide on how

00:13:36,589 --> 00:13:43,360
to do exactly because K develop does

00:13:39,050 --> 00:13:47,929
name resolution for you but obviously if

00:13:43,360 --> 00:13:49,790
like if I want it to be sort of this

00:13:47,929 --> 00:13:53,569
agnostic library that can be used in

00:13:49,790 --> 00:13:55,779
other projects then I would have to do

00:13:53,569 --> 00:14:01,120
name resolution within the rest library

00:13:55,779 --> 00:14:04,790
so at the moment I'm using K develops

00:14:01,120 --> 00:14:07,939
features to do name resolution but I'm

00:14:04,790 --> 00:14:21,980
looking into moving that over into into

00:14:07,939 --> 00:14:24,049
ASU Redux oh yeah

00:14:21,980 --> 00:14:28,220
lips syntax I'm guessing because it was

00:14:24,049 --> 00:14:31,459
sort of built at a point where Russ

00:14:28,220 --> 00:14:35,089
didn't really have the error handling

00:14:31,459 --> 00:14:39,189
features it does today so lip syntax

00:14:35,089 --> 00:14:42,259
panics on quite a few things like

00:14:39,189 --> 00:14:44,660
unexpected tokens so for example if

00:14:42,259 --> 00:14:49,480
there is a backslash somewhere then it

00:14:44,660 --> 00:14:53,029
just panics so stuff like that I had to

00:14:49,480 --> 00:14:56,329
try to work around that so I do at the

00:14:53,029 --> 00:15:00,889
moment I do the same thing as the rest

00:14:56,329 --> 00:15:03,910
compiler which is I spin it up in a new

00:15:00,889 --> 00:15:05,150
thread and wait to see what happens

00:15:03,910 --> 00:15:27,290
[Music]

00:15:05,150 --> 00:15:29,030
I think that I quite appreciated the K

00:15:27,290 --> 00:15:31,130
develop does a lot of these things for

00:15:29,030 --> 00:15:34,300
you so I've worked with K develop in the

00:15:31,130 --> 00:15:38,350
past so I sort of knew about this and

00:15:34,300 --> 00:15:40,700
that's one of my main motivations of

00:15:38,350 --> 00:15:47,660
choosing to do it this way rather than

00:15:40,700 --> 00:15:49,130
using our last because the way that the

00:15:47,660 --> 00:15:51,340
way that K develops sort of handles

00:15:49,130 --> 00:15:56,750
these these things behind the scenes

00:15:51,340 --> 00:16:00,650
like if if I had decided to do with RLS

00:15:56,750 --> 00:16:01,850
then if I decided to work with her LS I

00:16:00,650 --> 00:16:12,350
would essentially have had to

00:16:01,850 --> 00:16:15,310
reimplemented on like its kind of it

00:16:12,350 --> 00:16:19,280
works with its own data structures and

00:16:15,310 --> 00:16:21,200
at the same time it's based on Kate so

00:16:19,280 --> 00:16:23,480
things like the syntax highlighting is

00:16:21,200 --> 00:16:25,460
actually implemented in Kate and Kate

00:16:23,480 --> 00:16:29,420
develop only says okay well for these

00:16:25,460 --> 00:16:33,350
ranges like do like do this sort of

00:16:29,420 --> 00:16:36,740
colouring or whatever and yeah like

00:16:33,350 --> 00:16:39,490
basically if if I decided to use our

00:16:36,740 --> 00:16:41,810
less all that code would become obsolete

00:16:39,490 --> 00:16:44,450
so everything would have to be

00:16:41,810 --> 00:16:47,450
reimplemented on top of the language

00:16:44,450 --> 00:16:53,620
server protocol so I think that would

00:16:47,450 --> 00:16:53,620
have been quite a bit more work yeah

00:16:55,600 --> 00:16:58,720
[Music]

00:16:58,940 --> 00:17:04,250
so the google Summer of Code program

00:17:02,120 --> 00:17:07,880
basically works like you submit a

00:17:04,250 --> 00:17:10,910
proposal and if there's interest from

00:17:07,880 --> 00:17:14,230
the organization to do that to do that

00:17:10,910 --> 00:17:19,670
project then they find mentors for you

00:17:14,230 --> 00:17:22,960
so I was working with Kevin funk who who

00:17:19,670 --> 00:17:26,930
works on the C++ plugin inkay develop

00:17:22,960 --> 00:17:31,370
and yeah like he he basically helped me

00:17:26,930 --> 00:17:46,510
a bit through like getting this like set

00:17:31,370 --> 00:17:46,510
up and that kind of thing yeah sorry I

00:17:48,460 --> 00:17:56,150
guess stability because RLS is sort of

00:17:53,560 --> 00:17:58,220
actively developed by the rest community

00:17:56,150 --> 00:18:01,820
it has a lot of support from the core

00:17:58,220 --> 00:18:03,590
rust developers as well so essentially

00:18:01,820 --> 00:18:07,960
if anything changes at any point I

00:18:03,590 --> 00:18:14,240
expect that that change would also be

00:18:07,960 --> 00:18:16,130
reflected in RLS so what I'm trying to

00:18:14,240 --> 00:18:22,370
do with with the library is sort of to

00:18:16,130 --> 00:18:26,180
expose it to expose the ast at the

00:18:22,370 --> 00:18:28,160
moment as through a C API which is

00:18:26,180 --> 00:18:30,590
useful for something like Kay develop

00:18:28,160 --> 00:18:33,740
but in the future it might also be

00:18:30,590 --> 00:18:37,220
useful to get like further information

00:18:33,740 --> 00:18:39,190
like analysis from the compiler and that

00:18:37,220 --> 00:18:44,990
kind of thing

00:18:39,190 --> 00:18:48,770
exposed as well so like with RLS I I

00:18:44,990 --> 00:18:50,480
think it would be it would make it more

00:18:48,770 --> 00:18:56,620
stable basically like I wouldn't have to

00:18:50,480 --> 00:18:56,620
keep track of all these changes yeah

00:19:10,260 --> 00:19:18,430
um I don't think it will be impossible I

00:19:15,670 --> 00:19:25,510
think that would make the RLS a lot more

00:19:18,430 --> 00:19:28,330
useful for K develop for example so yeah

00:19:25,510 --> 00:19:31,150
like at the moment

00:19:28,330 --> 00:19:33,450
RLS sort of implements the language

00:19:31,150 --> 00:19:37,150
server protocol which doesn't really

00:19:33,450 --> 00:19:40,150
have any options for exposing the

00:19:37,150 --> 00:19:45,760
abstract syntax tree for example there

00:19:40,150 --> 00:19:49,200
are other similar protocols I I was

00:19:45,760 --> 00:19:51,250
pointed to one over the summer but I I I

00:19:49,200 --> 00:19:54,730
don't have it off the top of my head

00:19:51,250 --> 00:19:57,280
which like which language had that but

00:19:54,730 --> 00:20:02,740
there was a sort of similar language

00:19:57,280 --> 00:20:05,050
server type software which exposed more

00:20:02,740 --> 00:20:09,580
more information about the structure of

00:20:05,050 --> 00:20:12,940
the code to the ID so if RLS had a

00:20:09,580 --> 00:20:59,830
feature features like then it would be

00:20:12,940 --> 00:21:02,410
very useful for integrating with I I

00:20:59,830 --> 00:21:12,130
think I think it should be possible to

00:21:02,410 --> 00:21:14,530
do that so my guess is at the moment yes

00:21:12,130 --> 00:21:42,060
it's possible but I'm not a hundred

00:21:14,530 --> 00:21:42,060
percent sure on that so sorry can you

00:21:42,800 --> 00:21:46,380
[Music]

00:21:51,300 --> 00:21:59,380
[Music]

00:21:55,890 --> 00:22:03,760
I'm not sure I imagine IntelliJ would

00:21:59,380 --> 00:22:09,880
have that I haven't tried it recently so

00:22:03,760 --> 00:22:12,870
I'm not sure but yeah like don't know

00:22:09,880 --> 00:22:12,870
sorry

00:22:33,170 --> 00:22:36,209
[Music]

00:22:40,120 --> 00:22:43,300

YouTube URL: https://www.youtube.com/watch?v=2_cOkRXhveY


