Title: Building on an unsafe foundation — Jason Orendorff
Publication date: 2018-01-06
Playlist: Rust Belt Rust 2017
Description: 
	Beneath every safe programming language, library, or virtual machine is a whole lot of unsafe code. Rust is no exception. This talk will explain why “unsafe” code is allowed at all in a safe language, show the unsafe code at work inside safe features like Vec, and teach how to write a safe library that uses unsafe code.
Captions: 
	00:00:04,130 --> 00:00:09,510
it's a great speaker great to be in

00:00:06,779 --> 00:00:11,340
Columbus so quick show hands like how

00:00:09,510 --> 00:00:14,519
many of you are from are from out of

00:00:11,340 --> 00:00:19,650
town okay almost everybody that is great

00:00:14,519 --> 00:00:21,660
so so am i and but I but I love Columbus

00:00:19,650 --> 00:00:24,990
because and this is like I made these

00:00:21,660 --> 00:00:27,060
slides weeks ago I like it because this

00:00:24,990 --> 00:00:29,460
is where Ginny's ice creams got started

00:00:27,060 --> 00:00:32,820
they're here and they're in my hometown

00:00:29,460 --> 00:00:35,190
of Nashville and if you haven't so did

00:00:32,820 --> 00:00:38,010
anybody go there for lunch so what do

00:00:35,190 --> 00:00:39,770
you think yeah so try the bramble berry

00:00:38,010 --> 00:00:42,030
crisp it's the real thing

00:00:39,770 --> 00:00:44,640
the Columbus has a lot going on it's

00:00:42,030 --> 00:00:46,739
like there's a giant University here so

00:00:44,640 --> 00:00:49,050
it's like got the arts and and nightlife

00:00:46,739 --> 00:00:51,930
you expect it has a killer indie

00:00:49,050 --> 00:00:54,899
bookstore but like what I like is the

00:00:51,930 --> 00:00:55,920
weird stuff it's got topiary park you

00:00:54,899 --> 00:00:57,090
should check it out it's like right

00:00:55,920 --> 00:00:59,160
around the corner walking distance from

00:00:57,090 --> 00:01:01,489
here 10 minutes and it's like free

00:00:59,160 --> 00:01:10,110
Instagram likes just like sitting there

00:01:01,489 --> 00:01:13,110
so why would you not the drainage Hall

00:01:10,110 --> 00:01:16,439
of Fame is here that's a big tourist

00:01:13,110 --> 00:01:18,030
attraction if you have time for a little

00:01:16,439 --> 00:01:19,979
bit of a drive you can a little bit

00:01:18,030 --> 00:01:22,590
outside the town there's a wolf

00:01:19,979 --> 00:01:25,590
sanctuary where you can meet actual like

00:01:22,590 --> 00:01:29,720
live they call an ambassador wolves

00:01:25,590 --> 00:01:29,720
because wolves are nature's diplomats

00:01:30,230 --> 00:01:33,750
[Laughter]

00:01:32,090 --> 00:01:36,930
corne hinges here

00:01:33,750 --> 00:01:38,760
I feel like Jimmy Fallon we have a great

00:01:36,930 --> 00:01:43,290
show for you tonight folks Korn hinge is

00:01:38,760 --> 00:01:46,520
here and I play a little football I

00:01:43,290 --> 00:01:46,520
guess I don't really know

00:01:46,610 --> 00:01:51,870
don't try and drive tomorrow is the

00:01:49,260 --> 00:01:54,630
advice that I got so I bring up football

00:01:51,870 --> 00:01:56,850
because football is my excuse for not

00:01:54,630 --> 00:01:59,970
knowing anything about Columbus who

00:01:56,850 --> 00:02:02,730
knows at the impressionable age where I

00:01:59,970 --> 00:02:04,260
could like actually learn the names of

00:02:02,730 --> 00:02:06,510
cities I only learned the ones that had

00:02:04,260 --> 00:02:08,880
pro sports teams because I grew up in

00:02:06,510 --> 00:02:11,640
the suburbia in the 1980s was a weird

00:02:08,880 --> 00:02:13,740
time anyway so I knew that Cleveland was

00:02:11,640 --> 00:02:15,420
a great American city like right up

00:02:13,740 --> 00:02:19,590
there with New York and Chicago I'm like

00:02:15,420 --> 00:02:21,450
Green Bay and I knew about Cincinnati

00:02:19,590 --> 00:02:23,970
and I could even like I knew what these

00:02:21,450 --> 00:02:29,460
cities look like on a Monday night from

00:02:23,970 --> 00:02:33,210
a blimp but but not Columbus even though

00:02:29,460 --> 00:02:34,770
they're like the same size city and I

00:02:33,210 --> 00:02:36,870
just like this week found out what the

00:02:34,770 --> 00:02:39,030
deal is it's it's that Columbus has Ohio

00:02:36,870 --> 00:02:40,920
State and so they never had any use for

00:02:39,030 --> 00:02:46,080
the NFL and in fact to this day most

00:02:40,920 --> 00:02:49,950
people here don't know what that is the

00:02:46,080 --> 00:02:51,480
NFL has like an even more serious

00:02:49,950 --> 00:02:55,620
problem than that so did you see this

00:02:51,480 --> 00:02:58,110
this is a report that came out in July

00:02:55,620 --> 00:03:01,050
of this year researchers study the

00:02:58,110 --> 00:03:03,630
brains of like 111 former NFL players

00:03:01,050 --> 00:03:09,000
and found evidence of brain damage and

00:03:03,630 --> 00:03:11,459
110 and if I had to guess based on the

00:03:09,000 --> 00:03:13,680
league's response to this stuff I would

00:03:11,459 --> 00:03:17,010
guess that they don't think that better

00:03:13,680 --> 00:03:20,540
equipment or schedule changes or rules

00:03:17,010 --> 00:03:24,750
changes are gonna make this go away I

00:03:20,540 --> 00:03:29,640
think they're acting like nothing's

00:03:24,750 --> 00:03:31,050
gonna help and they could be right and

00:03:29,640 --> 00:03:33,870
so there's a question like where does

00:03:31,050 --> 00:03:37,980
that leave us like as a you know as a

00:03:33,870 --> 00:03:39,840
fan I mean I always knew that like a

00:03:37,980 --> 00:03:40,200
career in the NFL is not a walk in the

00:03:39,840 --> 00:03:42,450
park

00:03:40,200 --> 00:03:43,390
it's risky right it's hard on the body

00:03:42,450 --> 00:03:45,040
even if you say

00:03:43,390 --> 00:03:48,640
healthy and injuries happen serious

00:03:45,040 --> 00:03:49,330
injuries all the time but this is

00:03:48,640 --> 00:03:51,310
different

00:03:49,330 --> 00:03:54,640
it's beginning to look like a career in

00:03:51,310 --> 00:04:00,400
the NFL is just a bad idea if you value

00:03:54,640 --> 00:04:02,500
your brain and as a fan like on the one

00:04:00,400 --> 00:04:04,350
hand football but on the other hand like

00:04:02,500 --> 00:04:12,220
I don't want people like burning up

00:04:04,350 --> 00:04:15,790
their brains for my entertainment so you

00:04:12,220 --> 00:04:17,440
probably won't hear about rust but I

00:04:15,790 --> 00:04:19,690
like to start every talk with a lengthy

00:04:17,440 --> 00:04:28,060
non sequitur that gets really heavy at

00:04:19,690 --> 00:04:29,110
the end Thanks no it really it's like I

00:04:28,060 --> 00:04:33,280
don't know how to give it talk longer

00:04:29,110 --> 00:04:34,870
than five minutes so enough about enough

00:04:33,280 --> 00:04:36,060
about serious dangerous being ignored

00:04:34,870 --> 00:04:40,880
let's talk about C++

00:04:36,060 --> 00:04:43,110
[Laughter]

00:04:40,880 --> 00:04:46,860
actually I'm gonna take a moment here a

00:04:43,110 --> 00:04:52,200
nun mirror my display so I can see the

00:04:46,860 --> 00:04:55,580
words I'm supposed to be saying yeah did

00:04:52,200 --> 00:04:55,580
not do it give me a second

00:05:04,260 --> 00:05:15,850
all right so thank you for laughing I

00:05:13,260 --> 00:05:16,870
got the impression that that there might

00:05:15,850 --> 00:05:18,700
be some people in this room who have you

00:05:16,870 --> 00:05:20,290
C++ so if you've used C or C++

00:05:18,700 --> 00:05:23,590
professional you could you just raise

00:05:20,290 --> 00:05:24,910
your hand all right cool so the rest of

00:05:23,590 --> 00:05:26,290
you just look around like the people

00:05:24,910 --> 00:05:31,480
that raised their hands they're like

00:05:26,290 --> 00:05:34,900
these people have seen some stuff they

00:05:31,480 --> 00:05:37,420
know how the sausage gets made they know

00:05:34,900 --> 00:05:41,020
that all of software is built on this

00:05:37,420 --> 00:05:45,100
giant pile of sausages and that

00:05:41,020 --> 00:05:46,870
knowledge haunts them so for the rest of

00:05:45,100 --> 00:05:50,500
you I just want to give like a quick

00:05:46,870 --> 00:05:55,830
impression of like you know what C++ has

00:05:50,500 --> 00:05:55,830
done to these poor people thread

00:05:58,510 --> 00:06:04,370
so like say you're writing some C++ you

00:06:01,220 --> 00:06:05,930
have a very well nice integer here and

00:06:04,370 --> 00:06:08,540
you want to print the value of that

00:06:05,930 --> 00:06:13,010
integer which for some reason and C++

00:06:08,540 --> 00:06:16,700
looks like this well this is terrible

00:06:13,010 --> 00:06:20,690
this is a calamity you forgot to

00:06:16,700 --> 00:06:23,620
initialize the variable so so you're

00:06:20,690 --> 00:06:23,620
probably thinking like

00:06:25,240 --> 00:06:30,270
[Laughter]

00:06:27,860 --> 00:06:31,620
you're probably thinking like well C++

00:06:30,270 --> 00:06:35,039
is going to like throw an exception

00:06:31,620 --> 00:06:36,720
that's very sad or maybe it'll print 0

00:06:35,039 --> 00:06:37,680
or something or maybe we'll print like

00:06:36,720 --> 00:06:39,479
Eve you really thinking you're thinking

00:06:37,680 --> 00:06:40,979
like okay so it's putting the value of a

00:06:39,479 --> 00:06:42,990
variable we never assigned anything to

00:06:40,979 --> 00:06:44,840
that variable so maybe we'll just print

00:06:42,990 --> 00:06:53,070
whatever random bits it finds in memory

00:06:44,840 --> 00:06:57,630
well it might C++ might do any of those

00:06:53,070 --> 00:06:59,430
things or all of them because this is

00:06:57,630 --> 00:07:03,419
what's called undefined behavior using

00:06:59,430 --> 00:07:06,120
an initialized value undefined behavior

00:07:03,419 --> 00:07:08,940
is something that is talked about a lot

00:07:06,120 --> 00:07:12,199
in the C++ standard and what it means is

00:07:08,940 --> 00:07:17,070
basically your program might do whatever

00:07:12,199 --> 00:07:18,690
all right but this isn't the only way to

00:07:17,070 --> 00:07:20,070
get undefined behavior it's actually the

00:07:18,690 --> 00:07:21,360
several things that can happen there's a

00:07:20,070 --> 00:07:24,090
couple more I'm just going to talk about

00:07:21,360 --> 00:07:27,300
like one or two so say you've got a nice

00:07:24,090 --> 00:07:29,190
variable an integer here I initialize it

00:07:27,300 --> 00:07:32,310
this time right but I'm about to do

00:07:29,190 --> 00:07:35,669
something very stupid about to add up

00:07:32,310 --> 00:07:37,919
some numbers right this is what a loop

00:07:35,669 --> 00:07:39,090
looks like and in C++ and I'm like

00:07:37,919 --> 00:07:42,470
adding up numbers and this will work

00:07:39,090 --> 00:07:45,510
fine until the total gets too big to fit

00:07:42,470 --> 00:07:51,120
in like 32 or 64 bits whatever an

00:07:45,510 --> 00:07:55,310
integer is and then guess what I'm

00:07:51,120 --> 00:07:55,310
defined behave so don't do that

00:07:56,849 --> 00:08:05,739
one more real quick since I've got 30

00:08:00,699 --> 00:08:07,179
minutes to fill so math is tough let's

00:08:05,739 --> 00:08:09,789
do something really simple this time

00:08:07,179 --> 00:08:15,129
let's just like pass an argument to a

00:08:09,789 --> 00:08:19,089
function so this code right here this is

00:08:15,129 --> 00:08:23,349
fine this is this is this is safe like

00:08:19,089 --> 00:08:25,539
because this is clearly crazy right but

00:08:23,349 --> 00:08:31,509
this is totally fine and will always

00:08:25,539 --> 00:08:33,579
work unless unless you're passing this

00:08:31,509 --> 00:08:36,009
unless this function takes its argument

00:08:33,579 --> 00:08:38,050
by reference because then what could

00:08:36,009 --> 00:08:39,250
happen is it could be like storing the

00:08:38,050 --> 00:08:41,589
reference somewhere to use it later

00:08:39,250 --> 00:08:43,120
right now in a language with garbage

00:08:41,589 --> 00:08:44,740
collection that would be fine because

00:08:43,120 --> 00:08:46,660
you know you have reference to something

00:08:44,740 --> 00:08:49,000
and the system basically just keeps it

00:08:46,660 --> 00:08:51,850
alive as long as you need it and C++

00:08:49,000 --> 00:08:54,990
once this code is done running this and

00:08:51,850 --> 00:08:58,120
the the string leaf scope that string is

00:08:54,990 --> 00:09:01,569
dismantled and the parts are taken away

00:08:58,120 --> 00:09:03,129
so it's like it's for real gone so what

00:09:01,569 --> 00:09:07,300
happens the next time your program tries

00:09:03,129 --> 00:09:11,350
to print a prompt undefined behavior so

00:09:07,300 --> 00:09:12,910
don't do this there's a couple more

00:09:11,350 --> 00:09:14,829
things haha

00:09:12,910 --> 00:09:18,850
I'm just gonna go through them quickly

00:09:14,829 --> 00:09:22,959
because life is short I had to make the

00:09:18,850 --> 00:09:24,720
font size smaller accessing off the end

00:09:22,959 --> 00:09:27,839
of an array nobody ever does that right

00:09:24,720 --> 00:09:30,550
undefined behavior don't assign

00:09:27,839 --> 00:09:35,139
assigning things just some of these

00:09:30,550 --> 00:09:36,730
things there's like yeah don't don't

00:09:35,139 --> 00:09:38,079
modify a container while you're

00:09:36,730 --> 00:09:41,829
iterating over it you'll get undefined

00:09:38,079 --> 00:09:43,329
behavior oh and if you try and use

00:09:41,829 --> 00:09:44,620
threads in C++ that comes with his own

00:09:43,329 --> 00:09:46,750
whole set of rules and there it's

00:09:44,620 --> 00:09:50,250
actually like really kind of the hardest

00:09:46,750 --> 00:09:50,250
thing to get right in C++ so

00:09:50,450 --> 00:10:02,430
so don't do undefined behavior kids but

00:09:59,610 --> 00:10:04,620
how bad is it really well I had two pins

00:10:02,430 --> 00:10:06,000
there they're like several things that

00:10:04,620 --> 00:10:09,030
could help me well anything could happen

00:10:06,000 --> 00:10:10,170
right but in practice usually one of

00:10:09,030 --> 00:10:12,030
three things either your program just

00:10:10,170 --> 00:10:17,940
crashes and dies and this is the good

00:10:12,030 --> 00:10:19,940
case because if you like it's kind of

00:10:17,940 --> 00:10:22,890
like an exception you notice it right

00:10:19,940 --> 00:10:26,070
and there's actually tools a good tools

00:10:22,890 --> 00:10:29,130
to help you like debug that the slightly

00:10:26,070 --> 00:10:30,690
worse thing is like your program read

00:10:29,130 --> 00:10:33,600
some uninitialized memory and treats it

00:10:30,690 --> 00:10:35,070
as data right or it like writes some

00:10:33,600 --> 00:10:36,270
information and then we in club or

00:10:35,070 --> 00:10:38,310
something

00:10:36,270 --> 00:10:43,530
and then your programs just gonna be

00:10:38,310 --> 00:10:45,600
flaky from then on or it you know maybe

00:10:43,530 --> 00:10:47,460
right maybe maybe nothing bad will

00:10:45,600 --> 00:10:52,320
happen if a book if it doesn't bite is

00:10:47,460 --> 00:10:54,240
it really a bug so then there's the

00:10:52,320 --> 00:10:56,490
other case like the other bad thing that

00:10:54,240 --> 00:10:59,580
can happen is that your program could

00:10:56,490 --> 00:11:02,040
turn against you this really happens

00:10:59,580 --> 00:11:03,420
because the thing is like the reason

00:11:02,040 --> 00:11:07,110
there's such a thing as undefined

00:11:03,420 --> 00:11:09,420
behaviors what's going on is the

00:11:07,110 --> 00:11:11,520
compiler takes your program you know it

00:11:09,420 --> 00:11:15,330
looks at this like integer addition or

00:11:11,520 --> 00:11:18,150
whatever and it's job is to think real

00:11:15,330 --> 00:11:19,800
hard and like work on that code and then

00:11:18,150 --> 00:11:21,570
spit out a sequence of machine

00:11:19,800 --> 00:11:24,630
instructions that carries out what you

00:11:21,570 --> 00:11:28,590
want it to do right so with undefined

00:11:24,630 --> 00:11:31,050
behavior the deal is the compiler sees

00:11:28,590 --> 00:11:33,120
your code I think it works really hard

00:11:31,050 --> 00:11:34,710
on that code and it just assumes that

00:11:33,120 --> 00:11:37,410
you would never do something so stupid

00:11:34,710 --> 00:11:39,060
as to leave a variable initialized right

00:11:37,410 --> 00:11:41,630
because the compiler thinks very highly

00:11:39,060 --> 00:11:41,630
of you

00:11:43,230 --> 00:11:50,050
but then when you run the program what's

00:11:47,440 --> 00:11:53,950
gonna happen is like obviously the

00:11:50,050 --> 00:11:55,540
behavior of compiled code that assumes

00:11:53,950 --> 00:11:58,810
something false is going to be

00:11:55,540 --> 00:12:00,670
unpredictable not predict not useful in

00:11:58,810 --> 00:12:03,790
practice right not good for us as

00:12:00,670 --> 00:12:06,940
programmers but it's still a program

00:12:03,790 --> 00:12:08,860
right and unscrupulous persons could

00:12:06,940 --> 00:12:10,270
like look at that sequence of machine

00:12:08,860 --> 00:12:12,040
instructions and figure out what your

00:12:10,270 --> 00:12:18,570
program is going to do after it goes off

00:12:12,040 --> 00:12:18,570
the rails and this happens in practice

00:12:23,100 --> 00:12:36,630
so so rust right this concludes our

00:12:32,050 --> 00:12:36,630
crash course in C++ see what I did there

00:12:37,740 --> 00:12:44,500
so we know rust this is a safe language

00:12:42,090 --> 00:12:53,650
because it says so on the label right

00:12:44,500 --> 00:12:55,330
here I thank you for the slide you know

00:12:53,650 --> 00:12:57,640
it's funny like in other contexts the

00:12:55,330 --> 00:13:00,250
word safe like the meaning is pretty

00:12:57,640 --> 00:13:02,470
obvious like if you're a young hero and

00:13:00,250 --> 00:13:04,240
there's an old guy and he says to you

00:13:02,470 --> 00:13:06,640
it's dangerous to go alone I want you to

00:13:04,240 --> 00:13:08,220
take this you don't ask like what

00:13:06,640 --> 00:13:10,390
dangerous what do you mean interest

00:13:08,220 --> 00:13:12,310
because the fact that he's giving you a

00:13:10,390 --> 00:13:16,930
sword kind of answers that question

00:13:12,310 --> 00:13:19,590
right like it's not the roads the

00:13:16,930 --> 00:13:19,590
monsters

00:13:24,939 --> 00:13:29,929
but if someone says like it's dangerous

00:13:27,409 --> 00:13:32,779
to go low and take this and gives you

00:13:29,929 --> 00:13:35,749
like moves and ownership and references

00:13:32,779 --> 00:13:38,149
and a borrow checker and really long

00:13:35,749 --> 00:13:42,169
error messages you might be a little

00:13:38,149 --> 00:13:46,579
perplexed so so the first thing I want

00:13:42,169 --> 00:13:49,069
to tell you here is to like resolve that

00:13:46,579 --> 00:13:51,019
in history for you

00:13:49,069 --> 00:13:54,829
Rus notion of safety is best understood

00:13:51,019 --> 00:13:56,720
I think as a response to C++ and I

00:13:54,829 --> 00:13:59,089
define behavior right so what it's

00:13:56,720 --> 00:14:00,589
protecting you from is undefined

00:13:59,089 --> 00:14:05,720
behavior and some other stuff but mainly

00:14:00,589 --> 00:14:07,879
it's the monster right we've always

00:14:05,720 --> 00:14:09,859
known that writing a bunch of C++ is

00:14:07,879 --> 00:14:13,069
risky right

00:14:09,859 --> 00:14:15,769
it's the consequences are bad you screw

00:14:13,069 --> 00:14:17,269
up and programmers make mistakes but

00:14:15,769 --> 00:14:18,470
it's starting to look like now that

00:14:17,269 --> 00:14:20,749
we're a couple decades into this

00:14:18,470 --> 00:14:23,299
internet thing now that we're seeing the

00:14:20,749 --> 00:14:25,849
consequences it's starting to look like

00:14:23,299 --> 00:14:30,279
we're writing a bunch of C++ code is

00:14:25,849 --> 00:14:33,679
just a bad idea and we need a better way

00:14:30,279 --> 00:14:36,129
right we need a language that's as fast

00:14:33,679 --> 00:14:36,129
as C++

00:14:36,819 --> 00:14:45,649
without the monsters would that be great

00:14:40,479 --> 00:14:49,819
without undefined behavior well funny

00:14:45,649 --> 00:14:51,349
story so has anybody used unsafe code

00:14:49,819 --> 00:14:52,759
and Russ I know at least one person who

00:14:51,349 --> 00:14:57,139
gave a lightning talk right okay okay

00:14:52,759 --> 00:14:59,569
good cool so for the rest of you what is

00:14:57,139 --> 00:15:03,259
unsafe code and rust well unsafe code is

00:14:59,569 --> 00:15:07,759
code where you screw up and then mmm

00:15:03,259 --> 00:15:10,220
thank you you get undefined behavior and

00:15:07,759 --> 00:15:15,079
like the saving grace is well we put a

00:15:10,220 --> 00:15:17,659
label on it and as it's unsafe but this

00:15:15,079 --> 00:15:20,169
you know this brings up a question which

00:15:17,659 --> 00:15:24,229
I'm sure a lot of you have which is like

00:15:20,169 --> 00:15:26,629
why do we even have that lever hike you

00:15:24,229 --> 00:15:29,600
know language designed from scratch for

00:15:26,629 --> 00:15:31,650
reliability like why why would you ever

00:15:29,600 --> 00:15:33,480
include undefined behavior

00:15:31,650 --> 00:15:37,560
for that matter why does C++ allow it

00:15:33,480 --> 00:15:38,580
like what what what is the purpose so

00:15:37,560 --> 00:15:40,980
then I say I want to talk about is like

00:15:38,580 --> 00:15:42,180
is why we do that and it's gonna it's

00:15:40,980 --> 00:15:46,170
gonna take a while and I get around to

00:15:42,180 --> 00:15:48,839
it first I want to show you some code so

00:15:46,170 --> 00:15:50,940
this is actual real live code from the

00:15:48,839 --> 00:15:53,880
standard library except with the

00:15:50,940 --> 00:15:56,850
comments removed so it found a slide and

00:15:53,880 --> 00:15:59,010
this is from the VEX I this is the

00:15:56,850 --> 00:16:01,500
generic type it's a vector that holds

00:15:59,010 --> 00:16:03,630
values you call this push method to push

00:16:01,500 --> 00:16:05,490
a value of type T my to the end of the

00:16:03,630 --> 00:16:08,310
array right so what does this actually

00:16:05,490 --> 00:16:10,140
do how does this work well the way the

00:16:08,310 --> 00:16:12,900
way of vector works is you've got some

00:16:10,140 --> 00:16:14,640
memory set-aside and you've got some

00:16:12,900 --> 00:16:17,040
existing elements in there and then

00:16:14,640 --> 00:16:18,420
you've got some extra room right and

00:16:17,040 --> 00:16:22,200
push is going to use that extra room to

00:16:18,420 --> 00:16:24,330
store the next element but the first

00:16:22,200 --> 00:16:26,490
thing this function does is check to see

00:16:24,330 --> 00:16:29,010
if actually your memory is full because

00:16:26,490 --> 00:16:32,430
then it has to allocate some more memory

00:16:29,010 --> 00:16:35,130
right and it needs to basically it works

00:16:32,430 --> 00:16:45,600
by doubling the size of the buffer okay

00:16:35,130 --> 00:16:47,400
and then every time every time you put

00:16:45,600 --> 00:16:50,700
you push a value into array this code

00:16:47,400 --> 00:16:53,820
runs and it gets a raw pointer into the

00:16:50,700 --> 00:16:58,290
like to the vector and then it does some

00:16:53,820 --> 00:17:01,290
pointer arithmetic like C++ style uses

00:16:58,290 --> 00:17:03,540
an unsafe method right to like write

00:17:01,290 --> 00:17:06,270
data to an arbitrary address in memory

00:17:03,540 --> 00:17:08,280
and then just for good measure it bumps

00:17:06,270 --> 00:17:11,459
this private field like the correctness

00:17:08,280 --> 00:17:16,170
of which is absolutely critical to Beck

00:17:11,459 --> 00:17:18,059
not crashing so is this way is this sort

00:17:16,170 --> 00:17:20,780
of thing going on anywhere else in the

00:17:18,059 --> 00:17:20,780
standard library

00:17:21,720 --> 00:17:31,399
what do you think that's not going oh

00:17:35,870 --> 00:17:40,679
well wrist is in good company think

00:17:39,120 --> 00:17:44,250
about it like what's a safe programming

00:17:40,679 --> 00:17:48,720
language Java what language do you think

00:17:44,250 --> 00:17:54,360
the JVM is written in quarter million

00:17:48,720 --> 00:17:58,289
lines of C++ Python half a million lines

00:17:54,360 --> 00:18:01,740
of C right here's here's the Ruby

00:17:58,289 --> 00:18:04,649
documentation for the their their push

00:18:01,740 --> 00:18:06,269
method was something I love that Ruby is

00:18:04,649 --> 00:18:07,860
you can you can view the source of

00:18:06,269 --> 00:18:11,059
anything and their documentation is

00:18:07,860 --> 00:18:16,139
pretty neat oh wait rust has that too

00:18:11,059 --> 00:18:17,940
so let's look oh it's see ya so what

00:18:16,139 --> 00:18:19,769
about like what about a language

00:18:17,940 --> 00:18:24,389
designed by smart people right like what

00:18:19,769 --> 00:18:26,340
about Haskell right has yeah yeah so

00:18:24,389 --> 00:18:30,379
Haskell yeah it's a little special it

00:18:26,340 --> 00:18:34,529
has like a the Haskell runtime is

00:18:30,379 --> 00:18:36,450
actually written in Haskell all psychic

00:18:34,529 --> 00:18:39,090
it's fifty thousand eighty thousand

00:18:36,450 --> 00:18:42,450
lines of C it's a cartridge collector

00:18:39,090 --> 00:18:43,769
you can write that in Haskell and that's

00:18:42,450 --> 00:18:45,450
not even all of it right just like all

00:18:43,769 --> 00:18:47,129
these languages all these programs right

00:18:45,450 --> 00:18:49,980
they run on top of an operating system

00:18:47,129 --> 00:18:52,830
it's Linux Mac OS right it's millions of

00:18:49,980 --> 00:18:54,840
lines we'll see when we think of like a

00:18:52,830 --> 00:18:57,960
safe language as being like this cozy

00:18:54,840 --> 00:18:59,700
secure experience we're like ignoring

00:18:57,960 --> 00:19:01,110
all of the supporting code that has to

00:18:59,700 --> 00:19:03,419
go underneath that right it's a little

00:19:01,110 --> 00:19:07,590
bit of a fairy tale the truth is more

00:19:03,419 --> 00:19:09,090
like like Saruman tower and Lord of the

00:19:07,590 --> 00:19:12,629
Rings where you like okay that's a nice

00:19:09,090 --> 00:19:15,840
tower like that's clearly designed to be

00:19:12,629 --> 00:19:18,090
robust but then like underneath it you

00:19:15,840 --> 00:19:19,919
got like this maze of goblin Warren's

00:19:18,090 --> 00:19:23,090
and like there's building code

00:19:19,919 --> 00:19:23,090
violations everywhere

00:19:25,370 --> 00:19:35,070
oops so so what like why is it like this

00:19:32,370 --> 00:19:38,190
is unsafe code under every rock like and

00:19:35,070 --> 00:19:40,950
if there is like how safe are we really

00:19:38,190 --> 00:19:44,039
is there any point in using a so-called

00:19:40,950 --> 00:19:45,929
safe language should we all give up and

00:19:44,039 --> 00:19:50,039
go be goatherds that's the real question

00:19:45,929 --> 00:19:52,770
here and if not then how do we engineer

00:19:50,039 --> 00:19:55,590
safety in unsafe environments and unsafe

00:19:52,770 --> 00:19:56,659
code that's what it talks about you you

00:19:55,590 --> 00:20:01,649
made it to the title slide

00:19:56,659 --> 00:20:03,899
congratulations okay so that's a lot of

00:20:01,649 --> 00:20:06,029
questions that you just asked I'll try

00:20:03,899 --> 00:20:09,990
and answer them

00:20:06,029 --> 00:20:14,940
first I'll start with like why unsafe

00:20:09,990 --> 00:20:17,279
good sipping so there's like two basic

00:20:14,940 --> 00:20:19,110
reasons one of them is you know speed

00:20:17,279 --> 00:20:21,210
it's like just kind of the fact that

00:20:19,110 --> 00:20:22,919
that sometimes the safe thing to do

00:20:21,210 --> 00:20:25,110
sometimes the safest thing is you check

00:20:22,919 --> 00:20:27,419
again right like you check the array

00:20:25,110 --> 00:20:29,429
access you make sure it's in balance you

00:20:27,419 --> 00:20:32,580
redo the lookup to make sure the table

00:20:29,429 --> 00:20:34,049
hasn't changed right and in cases where

00:20:32,580 --> 00:20:35,610
you the programmer know that that's

00:20:34,049 --> 00:20:37,409
extra work that's not necessary it's

00:20:35,610 --> 00:20:39,059
just gonna make things slow you use a

00:20:37,409 --> 00:20:41,940
little bit unsafe code and it goes

00:20:39,059 --> 00:20:43,110
faster so that's one reason but then

00:20:41,940 --> 00:20:44,549
there's another reason is that there's a

00:20:43,110 --> 00:20:47,010
lot of code that like there's a whole

00:20:44,549 --> 00:20:49,559
kind of code that you may need to write

00:20:47,010 --> 00:20:54,090
that isn't a very good fit for rust

00:20:49,559 --> 00:20:55,620
safety system because that safety system

00:20:54,090 --> 00:20:56,850
the like the moves in ownership and the

00:20:55,620 --> 00:20:59,100
borrows and all that it makes some

00:20:56,850 --> 00:21:02,130
assumptions right and the assumptions

00:20:59,100 --> 00:21:05,279
are things like well all your code is

00:21:02,130 --> 00:21:07,649
rust and then we're okay right because

00:21:05,279 --> 00:21:09,450
obviously rust can't verify anything

00:21:07,649 --> 00:21:11,760
that's going on once you call in to see

00:21:09,450 --> 00:21:13,679
and there's a whole bunch of C code

00:21:11,760 --> 00:21:17,520
that's loaded into every rust program as

00:21:13,679 --> 00:21:19,260
soon as it starts to run right so so so

00:21:17,520 --> 00:21:20,580
that's why the interface between rust

00:21:19,260 --> 00:21:23,970
and other languages is always going to

00:21:20,580 --> 00:21:25,440
be on safe functions the other big

00:21:23,970 --> 00:21:27,149
assumption is that there's no such thing

00:21:25,440 --> 00:21:29,460
as uninitialized memory like this is

00:21:27,149 --> 00:21:31,559
actually a really great thing about the

00:21:29,460 --> 00:21:34,080
rust programming language it protects

00:21:31,559 --> 00:21:37,990
you from having that right

00:21:34,080 --> 00:21:40,330
but remember the vector remember how the

00:21:37,990 --> 00:21:42,940
vectors work is by having a little bit

00:21:40,330 --> 00:21:45,760
of extra memory a little extra room to

00:21:42,940 --> 00:21:49,500
use to put in more elements that's

00:21:45,760 --> 00:21:52,150
uninitialized memory how do we implement

00:21:49,500 --> 00:21:56,980
vectors in a language where you're

00:21:52,150 --> 00:21:59,020
forbidden from seeing that see there's a

00:21:56,980 --> 00:22:01,480
like there's a comfort zone of like

00:21:59,020 --> 00:22:03,370
normal code that's the bulk of what we

00:22:01,480 --> 00:22:06,040
do

00:22:03,370 --> 00:22:10,630
we're Russ safety system is a perfect

00:22:06,040 --> 00:22:12,340
fit right and then there are these there

00:22:10,630 --> 00:22:14,830
are these parts sometimes you just have

00:22:12,340 --> 00:22:17,460
to say like what I need to write code

00:22:14,830 --> 00:22:22,120
that's gonna cross some lines here right

00:22:17,460 --> 00:22:23,650
and I just need you compiler to trust me

00:22:22,120 --> 00:22:28,420
I'm going to use some unsafe code to do

00:22:23,650 --> 00:22:30,810
that when you run the Russ compiler on

00:22:28,420 --> 00:22:33,670
your program what that what all that

00:22:30,810 --> 00:22:34,810
what all the safety checking is doing

00:22:33,670 --> 00:22:36,910
well the type system is doing it with

00:22:34,810 --> 00:22:38,140
the with the borrow checker is doing the

00:22:36,910 --> 00:22:40,600
reason you have arguments with the

00:22:38,140 --> 00:22:42,580
borrow checker is that rust is building

00:22:40,600 --> 00:22:45,340
a proof of the soundness of your code

00:22:42,580 --> 00:22:47,610
right and all those all those elements

00:22:45,340 --> 00:22:53,080
the language they're parts of that proof

00:22:47,610 --> 00:22:55,470
and you're convincing rust that your

00:22:53,080 --> 00:22:58,360
code really is safe that's what it is

00:22:55,470 --> 00:23:00,580
unsafe code makes a gap in the proof as

00:22:58,360 --> 00:23:02,350
a as a part where like the russ compiler

00:23:00,580 --> 00:23:03,970
just can't be sure it's right it doesn't

00:23:02,350 --> 00:23:06,690
know right you were responsible for the

00:23:03,970 --> 00:23:06,690
correctness of that

00:23:10,010 --> 00:23:14,120
this unsafe block and rust it really

00:23:12,200 --> 00:23:15,290
should be called trust me right because

00:23:14,120 --> 00:23:17,930
like that's what you're saying you're

00:23:15,290 --> 00:23:20,030
saying like here you know I've I have

00:23:17,930 --> 00:23:21,680
looked at this code and I've looked at

00:23:20,030 --> 00:23:25,390
this pointer right and I've thought

00:23:21,680 --> 00:23:29,090
about it and it's correct trust me

00:23:25,390 --> 00:23:35,960
now I know what you're thinking I don't

00:23:29,090 --> 00:23:41,980
trust that guy which is fair a little

00:23:35,960 --> 00:23:44,420
hurtful but I mean it's it's it's

00:23:41,980 --> 00:23:45,650
telling that it's in rust that we have

00:23:44,420 --> 00:23:47,840
this conversation right I've been

00:23:45,650 --> 00:23:50,930
writing C++ for years I never had to

00:23:47,840 --> 00:23:52,460
type trust me okay I'm just gonna XOR

00:23:50,930 --> 00:23:59,630
these pointers together the compiler

00:23:52,460 --> 00:24:02,200
trusts me it's crazy and rust is not

00:23:59,630 --> 00:24:05,240
quite so trusting right rusts checks

00:24:02,200 --> 00:24:07,070
even in an unsafe block the type system

00:24:05,240 --> 00:24:09,020
is still there right like types are

00:24:07,070 --> 00:24:11,270
still checked lifetimes are still

00:24:09,020 --> 00:24:13,640
checked the only thing that's unlocked

00:24:11,270 --> 00:24:16,430
for you in this mode is you can call

00:24:13,640 --> 00:24:19,610
unsafe methods and you can dereference

00:24:16,430 --> 00:24:24,560
raw pointers so now you know how to

00:24:19,610 --> 00:24:26,420
shoot yourself in the foot and rust my

00:24:24,560 --> 00:24:28,400
last few slides here are about how not

00:24:26,420 --> 00:24:35,600
to shoot yourself in the foot with

00:24:28,400 --> 00:24:37,340
unsafe good these techniques by the way

00:24:35,600 --> 00:24:39,800
they're all classics so evil there's

00:24:37,340 --> 00:24:41,570
nothing new from here on out in in like

00:24:39,800 --> 00:24:45,140
in good rust tradition this is like

00:24:41,570 --> 00:24:51,350
well-established stuff so the first

00:24:45,140 --> 00:24:52,820
thing to keep in mind is don't do it but

00:24:51,350 --> 00:24:55,670
you know we already talked about reasons

00:24:52,820 --> 00:24:57,380
you might have to and the things you

00:24:55,670 --> 00:24:58,850
need are you like you need to know what

00:24:57,380 --> 00:25:00,080
contracts are and you know what like

00:24:58,850 --> 00:25:02,120
what the contract is just the

00:25:00,080 --> 00:25:04,100
requirements on a function that you have

00:25:02,120 --> 00:25:07,220
to fulfill as the caller to use it

00:25:04,100 --> 00:25:10,880
correctly you need to know how to use

00:25:07,220 --> 00:25:13,970
invariants in the types that you create

00:25:10,880 --> 00:25:18,310
to make sure that what needs to be true

00:25:13,970 --> 00:25:21,500
for that unsafe code to work stays true

00:25:18,310 --> 00:25:23,510
and you need right you need this thing

00:25:21,500 --> 00:25:24,860
that comes from smoke

00:25:23,510 --> 00:25:28,550
functional programming languages called

00:25:24,860 --> 00:25:30,700
vo like make invalid states

00:25:28,550 --> 00:25:33,440
unrepresentable

00:25:30,700 --> 00:25:35,060
these are like the common thread here is

00:25:33,440 --> 00:25:37,250
simply like you've got to be able to

00:25:35,060 --> 00:25:38,390
reason about your code because you know

00:25:37,250 --> 00:25:40,820
you're playing in territory but the

00:25:38,390 --> 00:25:42,530
compiler is not doing that for you now

00:25:40,820 --> 00:25:45,940
these four techniques I think contracts

00:25:42,530 --> 00:25:48,860
could could use a little more

00:25:45,940 --> 00:25:51,950
explanation so let's go into detail

00:25:48,860 --> 00:25:57,500
about that when I was getting started in

00:25:51,950 --> 00:25:59,660
rust I like one of the things I couldn't

00:25:57,500 --> 00:26:02,210
I didn't couldn't figure out immediately

00:25:59,660 --> 00:26:05,180
was whether or not a function I'm

00:26:02,210 --> 00:26:06,650
writing ought to be unsafe because like

00:26:05,180 --> 00:26:09,140
here's the here's the push method here's

00:26:06,650 --> 00:26:10,880
two versions of it one of the right is

00:26:09,140 --> 00:26:13,940
the one I showed you earlier the real

00:26:10,880 --> 00:26:15,590
one but another way to write that is the

00:26:13,940 --> 00:26:17,570
one on the Left where you just like put

00:26:15,590 --> 00:26:19,100
the unsafe keyword at the top there and

00:26:17,570 --> 00:26:22,010
then the whole body of the function is

00:26:19,100 --> 00:26:23,240
covered and this like this the language

00:26:22,010 --> 00:26:25,070
is basically just letting me choose

00:26:23,240 --> 00:26:29,510
whether my functions safe or unsafe

00:26:25,070 --> 00:26:31,700
right which is kind of surprising for us

00:26:29,510 --> 00:26:34,580
it lets you just pick like I'm gonna be

00:26:31,700 --> 00:26:37,160
safe today like and and the rest the

00:26:34,580 --> 00:26:38,480
language then trusts you right so this

00:26:37,160 --> 00:26:39,920
is this is how this is why that matters

00:26:38,480 --> 00:26:42,130
right because the function signatures

00:26:39,920 --> 00:26:44,360
are different right the one on the Left

00:26:42,130 --> 00:26:46,880
everybody who uses it would have to know

00:26:44,360 --> 00:26:49,460
whoa that's unsafe now I need to decide

00:26:46,880 --> 00:26:52,220
like how you know am I do I really want

00:26:49,460 --> 00:26:55,640
to call this and if so I've got a stick

00:26:52,220 --> 00:26:57,410
of trust me block in my code so what's

00:26:55,640 --> 00:26:59,080
the right choice here and like how much

00:26:57,410 --> 00:27:05,450
does it really matter

00:26:59,080 --> 00:27:07,940
so again when I started out my thinking

00:27:05,450 --> 00:27:09,440
was well if this code on the left is

00:27:07,940 --> 00:27:12,380
dangerous we're calling this a dangerous

00:27:09,440 --> 00:27:13,540
pointer right then obviously calling

00:27:12,380 --> 00:27:16,640
this function is going to be dangerous

00:27:13,540 --> 00:27:20,540
so the answer is you use the one on the

00:27:16,640 --> 00:27:22,310
left right but of course the one on the

00:27:20,540 --> 00:27:27,230
right is the one that's actually in a

00:27:22,310 --> 00:27:29,120
standard library so what gives now what

00:27:27,230 --> 00:27:33,020
I think is that like the one on the

00:27:29,120 --> 00:27:36,450
right is kind of like a key thing and

00:27:33,020 --> 00:27:40,440
rust like rust is a toolkit for making

00:27:36,450 --> 00:27:43,350
stuff safe right rapping carefully

00:27:40,440 --> 00:27:48,109
written unsafe code and a safe API is

00:27:43,350 --> 00:27:48,109
the underappreciated cornerstone of rust

00:27:50,269 --> 00:27:57,539
the contract of a function is simply the

00:27:55,950 --> 00:27:58,830
set of requirements you have to use in

00:27:57,539 --> 00:28:00,419
order to in order to use that function

00:27:58,830 --> 00:28:02,059
correctly and every function has this in

00:28:00,419 --> 00:28:04,080
every way it's not just for us to write

00:28:02,059 --> 00:28:05,850
you call a function you're supposed to

00:28:04,080 --> 00:28:08,220
pass a certain number of arguments of

00:28:05,850 --> 00:28:10,049
particular types right and sometimes

00:28:08,220 --> 00:28:11,279
there's extra things that you have to

00:28:10,049 --> 00:28:15,899
keep in mind in order to use it

00:28:11,279 --> 00:28:17,850
correctly right and if you don't do that

00:28:15,899 --> 00:28:22,529
if you misuse the function then what

00:28:17,850 --> 00:28:24,179
well and on a good day like you're using

00:28:22,529 --> 00:28:26,509
push and you pass the wrong number of

00:28:24,179 --> 00:28:29,970
arguments right the compiler stops you

00:28:26,509 --> 00:28:31,470
and in fact that's enough for push the

00:28:29,970 --> 00:28:34,139
the set of rules that the compiler

00:28:31,470 --> 00:28:36,600
actually enforces based on the types and

00:28:34,139 --> 00:28:37,919
the borrow checker and this the type

00:28:36,600 --> 00:28:39,509
signature to the function signatures

00:28:37,919 --> 00:28:40,830
that's enough like that's those are the

00:28:39,509 --> 00:28:44,519
only requirements to use this function

00:28:40,830 --> 00:28:46,830
correctly but then there are other

00:28:44,519 --> 00:28:50,700
functions like pointer right that are

00:28:46,830 --> 00:28:53,970
dangerous and they have a contract

00:28:50,700 --> 00:28:55,739
that's pretty complicated actually if

00:28:53,970 --> 00:28:59,309
you look at the at the documentation for

00:28:55,739 --> 00:29:01,049
this function right sure enough it's got

00:28:59,309 --> 00:29:03,330
five paragraphs of stuff that you need

00:29:01,049 --> 00:29:05,249
to read in order to operate this thing

00:29:03,330 --> 00:29:07,169
successfully right the fine print of the

00:29:05,249 --> 00:29:08,970
contract and talks about things like the

00:29:07,169 --> 00:29:12,690
last paragraph is the pointer must be

00:29:08,970 --> 00:29:13,649
aligned which is like like a thesis like

00:29:12,690 --> 00:29:16,700
you have to you have to go and look up

00:29:13,649 --> 00:29:19,109
what that word means pointers are tough

00:29:16,700 --> 00:29:23,639
but then if you look at if you look at

00:29:19,109 --> 00:29:26,519
vector push no safety rules in the

00:29:23,639 --> 00:29:28,830
contract right there's this rule about

00:29:26,519 --> 00:29:30,179
panicking it like this is some bizarre

00:29:28,830 --> 00:29:33,929
corner case that happens when you have

00:29:30,179 --> 00:29:36,059
zero size types but panic is safe

00:29:33,929 --> 00:29:39,289
panic is actually kind of a bad name for

00:29:36,059 --> 00:29:42,110
it it should be called like orderly

00:29:39,289 --> 00:29:44,890
emergency procedure

00:29:42,110 --> 00:29:44,890
that's catchy

00:29:46,210 --> 00:29:50,240
yeah but panic is safe and it leaves the

00:29:48,620 --> 00:29:52,309
elisha program in a good state

00:29:50,240 --> 00:29:54,769
afterwards even if one thread panics

00:29:52,309 --> 00:29:57,890
others keep going and you can even catch

00:29:54,769 --> 00:29:59,419
it if you really need to but there's

00:29:57,890 --> 00:30:01,720
nothing you can do with this function

00:29:59,419 --> 00:30:06,799
that's gonna cause undefined behavior

00:30:01,720 --> 00:30:14,360
therefore it should be safe what that

00:30:06,799 --> 00:30:17,210
means though is dangerous safe it's on

00:30:14,360 --> 00:30:18,889
the implementer of this method then to

00:30:17,210 --> 00:30:23,929
make sure that they're using that

00:30:18,889 --> 00:30:28,250
dangerous piece in a safe way right and

00:30:23,929 --> 00:30:29,690
you can do it what you need to do as the

00:30:28,250 --> 00:30:31,850
implementer of this method is you need

00:30:29,690 --> 00:30:35,450
to make sure that like when you get to

00:30:31,850 --> 00:30:37,490
the pointer right on this line that the

00:30:35,450 --> 00:30:40,399
data you're passing to it is correct and

00:30:37,490 --> 00:30:42,590
that your color no matter what they do

00:30:40,399 --> 00:30:44,510
cannot cause you to violate the contract

00:30:42,590 --> 00:30:47,570
on that function right so this is this

00:30:44,510 --> 00:30:49,570
is the basic idea right so how do you do

00:30:47,570 --> 00:30:53,149
it well you're passing this pointer end

00:30:49,570 --> 00:30:55,039
it comes from here and that comes from

00:30:53,149 --> 00:30:56,419
this offset and that's computation right

00:30:55,039 --> 00:30:57,889
where you'd like to take the pointer to

00:30:56,419 --> 00:31:00,380
the beginning of the array and then you

00:30:57,889 --> 00:31:04,789
add some number of elements and get to

00:31:00,380 --> 00:31:07,610
the end that in turn is valid if the

00:31:04,789 --> 00:31:10,909
length argument you pass it is actually

00:31:07,610 --> 00:31:13,700
less than the capacity of the buffer and

00:31:10,909 --> 00:31:15,860
there's an invariant in the vector class

00:31:13,700 --> 00:31:17,840
that the length is always less than the

00:31:15,860 --> 00:31:21,380
capacity or less than or equal to the

00:31:17,840 --> 00:31:23,299
capacity of the buffer less than or

00:31:21,380 --> 00:31:24,769
equal to equal to would actually be a

00:31:23,299 --> 00:31:26,179
problem here and therefore we have this

00:31:24,769 --> 00:31:28,130
other code to make sure that if they're

00:31:26,179 --> 00:31:31,519
equal then we double the capacity to

00:31:28,130 --> 00:31:33,080
make it to make room all the parts of

00:31:31,519 --> 00:31:35,090
this function are working together to

00:31:33,080 --> 00:31:40,399
make sure that one line of unsafe code

00:31:35,090 --> 00:31:41,990
goes smoothly that's basically what we

00:31:40,399 --> 00:31:44,210
what I wanted to say there that so what

00:31:41,990 --> 00:31:45,590
have we learned we've learned that while

00:31:44,210 --> 00:31:47,960
you're in Columbus you need to make a

00:31:45,590 --> 00:31:49,039
stop at Jennie's ice-creams get the

00:31:47,960 --> 00:31:52,429
Brambleberry crisps

00:31:49,039 --> 00:31:54,890
we learned what can cause undefined

00:31:52,429 --> 00:31:59,020
behavior in C++ we learn what that means

00:31:54,890 --> 00:32:02,660
we all know what safe means in rust and

00:31:59,020 --> 00:32:05,380
why we have unsafe code and we learned a

00:32:02,660 --> 00:32:12,110
little bit about how to use it wisely

00:32:05,380 --> 00:32:16,670
so what well notice that in certain

00:32:12,110 --> 00:32:18,200
times and in certain places engineers

00:32:16,670 --> 00:32:22,420
get this idea in their heads that they

00:32:18,200 --> 00:32:24,940
can like build a safer world it's funny

00:32:22,420 --> 00:32:27,200
it's happened in lots of different

00:32:24,940 --> 00:32:30,429
fields at different times it's happened

00:32:27,200 --> 00:32:34,070
in you know medical equipment airplanes

00:32:30,429 --> 00:32:38,270
space travel industrial machines used to

00:32:34,070 --> 00:32:43,130
be incredibly dangerous highways and

00:32:38,270 --> 00:32:47,360
when when that happens we do safety

00:32:43,130 --> 00:32:49,370
engineering we study failures right like

00:32:47,360 --> 00:32:50,600
we get inside then we figure out why we

00:32:49,370 --> 00:32:57,650
have these failures and we design

00:32:50,600 --> 00:32:58,340
systems to prevent them so where are we

00:32:57,650 --> 00:33:02,480
right now

00:32:58,340 --> 00:33:04,640
with software are we safe enough like as

00:33:02,480 --> 00:33:09,919
is the code we write is that safe not as

00:33:04,640 --> 00:33:13,790
a good enough and if not do we think we

00:33:09,919 --> 00:33:16,120
can fix it but what do we think nothing

00:33:13,790 --> 00:33:16,120
will help

00:33:18,720 --> 00:33:25,710
I think we can do better right and if

00:33:24,330 --> 00:33:27,450
you go away with one thing out of this

00:33:25,710 --> 00:33:29,880
talk once you understand kind of at a

00:33:27,450 --> 00:33:31,679
technical level like how rust fits into

00:33:29,880 --> 00:33:33,240
that effort right sure

00:33:31,679 --> 00:33:34,919
rust prevents some bugs out right and

00:33:33,240 --> 00:33:37,740
that is great right but is there's

00:33:34,919 --> 00:33:40,860
actually more to it than that rust will

00:33:37,740 --> 00:33:42,990
help you understand the rules that good

00:33:40,860 --> 00:33:47,940
C++ programmers have in their heads that

00:33:42,990 --> 00:33:51,150
they got the hard way right Russ gives

00:33:47,940 --> 00:33:53,130
you the ability to put a safe API on top

00:33:51,150 --> 00:33:54,960
of unsafe code and have reason to

00:33:53,130 --> 00:33:57,480
believe that it's actually correct

00:33:54,960 --> 00:33:59,460
that's a great like that's a software

00:33:57,480 --> 00:34:02,490
engineering tool right a safety

00:33:59,460 --> 00:34:06,000
engineering tool russ has expressive

00:34:02,490 --> 00:34:08,520
types so like the types can cover more

00:34:06,000 --> 00:34:12,389
of the contract so that human brains

00:34:08,520 --> 00:34:15,149
don't have to and maybe best of all like

00:34:12,389 --> 00:34:18,840
rust is economically viable so you can

00:34:15,149 --> 00:34:23,220
actually choose it and use it and it can

00:34:18,840 --> 00:34:26,609
be your competitive advantage unsafe

00:34:23,220 --> 00:34:28,290
code isn't going away all right if you

00:34:26,609 --> 00:34:30,000
were using unsafe code if you have to

00:34:28,290 --> 00:34:35,159
write unsafe code for your job you

00:34:30,000 --> 00:34:37,859
should be using rust it's ready today

00:34:35,159 --> 00:34:38,179
it's the right tool for the job let's do

00:34:37,859 --> 00:34:41,300
it

00:34:38,179 --> 00:34:41,300
thank you

00:34:43,670 --> 00:34:50,420
[Applause]

00:34:48,639 --> 00:34:52,460
[Music]

00:34:50,420 --> 00:34:54,950
I got one more thing so when I finish in

00:34:52,460 --> 00:34:56,360
bladdy and I we wrote a book it's you

00:34:54,950 --> 00:34:58,670
can it's in early access right now you

00:34:56,360 --> 00:35:02,570
can buy it and it will be in print

00:34:58,670 --> 00:35:04,310
probably in January you can you can you

00:35:02,570 --> 00:35:06,530
can get you can absolutely get a PDF

00:35:04,310 --> 00:35:11,780
with like almost the entire book in it

00:35:06,530 --> 00:35:18,260
ah it's out it really handsome so sorry

00:35:11,780 --> 00:35:26,020
okay oh you're wrong okay I'm sorry to

00:35:18,260 --> 00:35:29,590
hear it okay well you can pre-order it

00:35:26,020 --> 00:35:33,349
okay well thank you anyway

00:35:29,590 --> 00:35:33,349

YouTube URL: https://www.youtube.com/watch?v=rTo2u13lVcQ


