Title: Avatar CLI — Andrés Casablanca
Publication date: 2020-02-05
Playlist: Rust and Tell Berlin
Description: 
	From the Berlin Rust's November "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)

An outline of the reasons for the creation of a new tool, Avatar CLI, made to manage containerized CLI tools and written in Rust, and its internal design.

Andrés Casablanca: https://twitter.com/castarco

Hosted at Prisma: https://www.prisma.io/

🎥 Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:03,770 --> 00:00:11,040
hello everybody thank you for coming and

00:00:08,660 --> 00:00:11,910
this is my first time here at the

00:00:11,040 --> 00:00:13,590
restaurant Dell

00:00:11,910 --> 00:00:15,929
this is also the first time in two years

00:00:13,590 --> 00:00:19,650
that I speak publicly so I don't know

00:00:15,929 --> 00:00:22,020
how we will do it so today I'm going to

00:00:19,650 --> 00:00:25,560
talk about pet project I have on my

00:00:22,020 --> 00:00:27,420
hands I apologize in advance because I

00:00:25,560 --> 00:00:30,240
won't show code

00:00:27,420 --> 00:00:32,460
I had this call form for two weeks I was

00:00:30,240 --> 00:00:34,340
super low in energy so I was working on

00:00:32,460 --> 00:00:37,739
the algorithms and I was working on

00:00:34,340 --> 00:00:44,309
testing some ideas to see if it was

00:00:37,739 --> 00:00:44,879
possible so I will show you what what's

00:00:44,309 --> 00:00:47,520
this about

00:00:44,879 --> 00:00:52,640
so I'm working on this tool it's called

00:00:47,520 --> 00:00:56,340
avatar CLI the idea is to help people to

00:00:52,640 --> 00:00:58,590
just wrap content docker eyes commands

00:00:56,340 --> 00:01:00,210
without all these issues that usually

00:00:58,590 --> 00:01:02,430
people have like having problems with

00:01:00,210 --> 00:01:05,400
permissions having problem with keys

00:01:02,430 --> 00:01:09,330
management and other stuff that you

00:01:05,400 --> 00:01:15,450
could face so yeah this is the logo that

00:01:09,330 --> 00:01:18,229
I did some weeks ago so what happened

00:01:15,450 --> 00:01:21,299
here so this is me and from Barcelona

00:01:18,229 --> 00:01:22,950
I'm support developer I'm mostly on

00:01:21,299 --> 00:01:26,869
back-end a machine learning the

00:01:22,950 --> 00:01:29,549
engineering this is my blog and yeah

00:01:26,869 --> 00:01:31,560
from time to time I work on some

00:01:29,549 --> 00:01:34,490
projects these are my last two

00:01:31,560 --> 00:01:37,409
open-source perfect I was working on

00:01:34,490 --> 00:01:40,850
basically I was working at third cache

00:01:37,409 --> 00:01:44,130
on a crypto currency code you need e and

00:01:40,850 --> 00:01:46,380
another project that it's surprisingly

00:01:44,130 --> 00:01:48,840
being used for force by some people it's

00:01:46,380 --> 00:01:52,040
Jupiter PageSpeed kernel for the Jupiter

00:01:48,840 --> 00:01:55,049
notebook so people could use PHP on it

00:01:52,040 --> 00:01:59,040
but I'm not paying too much attention to

00:01:55,049 --> 00:02:01,500
it so yes if someone wants to pick it to

00:01:59,040 --> 00:02:05,460
maintain it or something feel free

00:02:01,500 --> 00:02:10,080
so about owatta CLI this started with

00:02:05,460 --> 00:02:12,060
some small thing some with some

00:02:10,080 --> 00:02:14,010
experience at the heart in Barcelona but

00:02:12,060 --> 00:02:17,790
then I started to work in a company

00:02:14,010 --> 00:02:20,730
and they were kinda messy when they had

00:02:17,790 --> 00:02:23,700
to deal with other software so they they

00:02:20,730 --> 00:02:25,140
had this kind of mixed environment some

00:02:23,700 --> 00:02:26,819
of the naree where they were working

00:02:25,140 --> 00:02:30,420
with a beggar and some of them they were

00:02:26,819 --> 00:02:32,190
working with docker also they were

00:02:30,420 --> 00:02:33,930
working with docker in a very strange

00:02:32,190 --> 00:02:37,440
way so they were using it as if they

00:02:33,930 --> 00:02:39,450
were virtual machines and that was in

00:02:37,440 --> 00:02:42,120
part because the guys that introduced

00:02:39,450 --> 00:02:45,329
docker they were they did it in a way

00:02:42,120 --> 00:02:47,670
that it was only being useful for the

00:02:45,329 --> 00:02:50,910
Linux guys so the people that was using

00:02:47,670 --> 00:02:53,069
with working with Mac OS because they

00:02:50,910 --> 00:02:54,569
were using different user IDs all the

00:02:53,069 --> 00:02:59,819
skips they were just failing miserably

00:02:54,569 --> 00:03:03,780
so obvious drawbacks of this kind of

00:02:59,819 --> 00:03:06,060
split environment so typical it works on

00:03:03,780 --> 00:03:06,500
my machine but it does not work on the

00:03:06,060 --> 00:03:09,060
other

00:03:06,500 --> 00:03:11,760
the tests were just terrible

00:03:09,060 --> 00:03:14,280
because you know like they were filling

00:03:11,760 --> 00:03:16,799
up the databases and they rerun the

00:03:14,280 --> 00:03:19,169
tests and oh it was working before now

00:03:16,799 --> 00:03:22,470
no and now it's work it's working but

00:03:19,169 --> 00:03:24,540
why it was not working before also for

00:03:22,470 --> 00:03:27,569
example when I when I arrived it took me

00:03:24,540 --> 00:03:29,160
like the complete day to set up the

00:03:27,569 --> 00:03:31,260
environment because every time that I

00:03:29,160 --> 00:03:33,840
followed a step you know there was a guy

00:03:31,260 --> 00:03:35,940
on my back saying oh sorry I forgot this

00:03:33,840 --> 00:03:37,470
point you have also to follow this step

00:03:35,940 --> 00:03:41,310
or this other step or this other step

00:03:37,470 --> 00:03:44,910
right also when they wanted to you know

00:03:41,310 --> 00:03:47,040
connect to github to download some

00:03:44,910 --> 00:03:50,160
package or whatever if it was a private

00:03:47,040 --> 00:03:53,010
package they had problems with the SSH

00:03:50,160 --> 00:03:57,060
keys so it was it was a nightmare

00:03:53,010 --> 00:04:01,799
right so I started to work on that I

00:03:57,060 --> 00:04:02,370
took some some time and I created a set

00:04:01,799 --> 00:04:06,959
of scripts

00:04:02,370 --> 00:04:09,269
it was just bash but it was not without

00:04:06,959 --> 00:04:13,019
pain so we had some problems with that

00:04:09,269 --> 00:04:15,480
first of all one of the things that I

00:04:13,019 --> 00:04:18,239
faced it is that the default watch in

00:04:15,480 --> 00:04:20,459
Mac OS is completely updated because of

00:04:18,239 --> 00:04:23,760
this license problem that they don't

00:04:20,459 --> 00:04:26,100
want to deal with the GPL 3

00:04:23,760 --> 00:04:28,830
also I didn't want to rely on basic

00:04:26,100 --> 00:04:32,700
POSIX shell because it's like too

00:04:28,830 --> 00:04:34,320
constraining so it the code would be too

00:04:32,700 --> 00:04:37,710
complicated

00:04:34,320 --> 00:04:39,570
there are also minor differences on how

00:04:37,710 --> 00:04:43,530
to pass some parameters to tools like

00:04:39,570 --> 00:04:46,380
grep and we also have we haven't had a

00:04:43,530 --> 00:04:49,560
guy that was you know he was obsessed on

00:04:46,380 --> 00:04:51,930
working on his Windows machine and I had

00:04:49,560 --> 00:04:54,180
to try to let all those skips for him

00:04:51,930 --> 00:04:59,190
but it was impossible so at some point I

00:04:54,180 --> 00:05:02,460
just this is a desisted okay so at some

00:04:59,190 --> 00:05:05,310
point it started to work and people seem

00:05:02,460 --> 00:05:07,350
to be happy but you know in some

00:05:05,310 --> 00:05:09,450
companies they decide to work for their

00:05:07,350 --> 00:05:12,420
mono repo approach will it completely

00:05:09,450 --> 00:05:14,820
the opposite so for every small project

00:05:12,420 --> 00:05:17,520
we had a small repository which was nice

00:05:14,820 --> 00:05:19,050
because we had a lot of autonomy but at

00:05:17,520 --> 00:05:24,620
the time of integrating all that stuff

00:05:19,050 --> 00:05:26,790
it was complicated and because of that

00:05:24,620 --> 00:05:30,300
we increase the complexity of those

00:05:26,790 --> 00:05:34,170
scripts so they allowed us to execute

00:05:30,300 --> 00:05:38,130
test that exec that took code from many

00:05:34,170 --> 00:05:40,980
repositories that executed this code you

00:05:38,130 --> 00:05:43,950
know simultaneously like okay first step

00:05:40,980 --> 00:05:46,410
first set up the data bases and on the

00:05:43,950 --> 00:05:48,900
docker containers then run the

00:05:46,410 --> 00:05:50,880
migrations then start these micro

00:05:48,900 --> 00:05:55,560
service and this other micro service and

00:05:50,880 --> 00:05:59,340
then run the tests also for each test we

00:05:55,560 --> 00:06:02,790
created a random dr. network so we could

00:05:59,340 --> 00:06:06,270
run a lot of tests in parallel so I was

00:06:02,790 --> 00:06:08,940
kind of proud of that but actually it it

00:06:06,270 --> 00:06:14,490
was just too complex because at some

00:06:08,940 --> 00:06:18,150
point it what it was what I did so prom

00:06:14,490 --> 00:06:21,090
is that because of the way I made this

00:06:18,150 --> 00:06:23,400
code bash scripts this is difficult to

00:06:21,090 --> 00:06:26,540
make it modern this is difficult it's

00:06:23,400 --> 00:06:28,830
it's very difficult to share this code

00:06:26,540 --> 00:06:31,200
some point we started to have a lot of

00:06:28,830 --> 00:06:33,600
duplicated code at some points and in

00:06:31,200 --> 00:06:36,090
some repositories we had this completely

00:06:33,600 --> 00:06:37,110
updated code of a guy if I remember that

00:06:36,090 --> 00:06:39,390
I fix that

00:06:37,110 --> 00:06:43,230
why two months later this is still here

00:06:39,390 --> 00:06:46,590
you know so okay so we had a lot of

00:06:43,230 --> 00:06:49,260
duplicated code and it was becoming a

00:06:46,590 --> 00:06:51,870
problem so at some point I decided okay

00:06:49,260 --> 00:06:54,600
let's let's try to centralize this in

00:06:51,870 --> 00:06:56,220
some way but this is a problem because

00:06:54,600 --> 00:06:57,990
this is the the chicken egg an egg

00:06:56,220 --> 00:07:00,570
problem you know I wanted to keep some

00:06:57,990 --> 00:07:05,340
properties of this of this thing

00:07:00,570 --> 00:07:07,050
so we achieved this this stage where it

00:07:05,340 --> 00:07:09,360
was there was no need to install any

00:07:07,050 --> 00:07:13,560
single development tool on the computer

00:07:09,360 --> 00:07:15,660
besides the IDE dokyun get and we had

00:07:13,560 --> 00:07:18,300
this chicken and egg problem if these

00:07:15,660 --> 00:07:22,530
tools had to be installed somehow from

00:07:18,300 --> 00:07:27,990
the repositories you know then I needed

00:07:22,530 --> 00:07:31,260
more scripting and so on right so okay

00:07:27,990 --> 00:07:33,750
this led this led me to sing at some

00:07:31,260 --> 00:07:36,810
point okay let's make a single binary

00:07:33,750 --> 00:07:38,720
without no extendin sees that that's all

00:07:36,810 --> 00:07:43,380
that's all this stuff and we'll try to

00:07:38,720 --> 00:07:46,950
get rid of the complex stuff let's let's

00:07:43,380 --> 00:07:49,050
make something rapidly simple that that

00:07:46,950 --> 00:07:54,030
at least allows to to centralize that

00:07:49,050 --> 00:07:58,500
the more difficult stuff so yeah while I

00:07:54,030 --> 00:08:01,200
was doing that I I was checking if if I

00:07:58,500 --> 00:08:02,910
would do that in Python in JavaScript

00:08:01,200 --> 00:08:06,420
type scape

00:08:02,910 --> 00:08:06,810
well the the project was called back

00:08:06,420 --> 00:08:09,900
then

00:08:06,810 --> 00:08:13,920
Murai because of the name of the company

00:08:09,900 --> 00:08:17,040
where I was working so having a single

00:08:13,920 --> 00:08:19,020
binary was quite easy it was it was a

00:08:17,040 --> 00:08:21,420
very easy thing to do because you know

00:08:19,020 --> 00:08:23,460
there are a lot of tools to to pack a

00:08:21,420 --> 00:08:26,550
lot of scripts in one single binary or

00:08:23,460 --> 00:08:28,740
even you could like if even if you are

00:08:26,550 --> 00:08:30,360
working with a bash or shell scripting

00:08:28,740 --> 00:08:33,750
you could pack everything together and

00:08:30,360 --> 00:08:36,720
and and then unpack that there are some

00:08:33,750 --> 00:08:40,260
like weave tricks like what dr. Campos

00:08:36,720 --> 00:08:42,240
does for example or even up image it's

00:08:40,260 --> 00:08:44,340
doing something like that it unpacks

00:08:42,240 --> 00:08:46,620
everything in a temporary directory and

00:08:44,340 --> 00:08:47,999
then it runs an exact command on top of

00:08:46,620 --> 00:08:52,689
that

00:08:47,999 --> 00:08:56,800
but you know the problem with the

00:08:52,689 --> 00:08:59,829
dependencies was not so easy to solve

00:08:56,800 --> 00:09:03,519
because you know for example the default

00:08:59,829 --> 00:09:07,179
Python in Mac at the time I think it was

00:09:03,519 --> 00:09:10,589
Python 2 7 other default Python in other

00:09:07,179 --> 00:09:14,160
system was another another version and

00:09:10,589 --> 00:09:17,559
yes I could stick to the older libraries

00:09:14,160 --> 00:09:20,860
but I want to tell a little bit more of

00:09:17,559 --> 00:09:25,809
freedom so yeah I made some experiments

00:09:20,860 --> 00:09:29,379
I could compile these statically linked

00:09:25,809 --> 00:09:33,040
Python binary and embed a teenth into an

00:09:29,379 --> 00:09:36,009
app image format binary or something but

00:09:33,040 --> 00:09:38,709
this would only work on Linux I should

00:09:36,009 --> 00:09:39,699
give support also to Mac OS so at some

00:09:38,709 --> 00:09:42,910
point I just stopped

00:09:39,699 --> 00:09:46,119
I just devoted more time to other more

00:09:42,910 --> 00:09:49,809
important stuff for the company and here

00:09:46,119 --> 00:09:56,980
is where the the parent of about our

00:09:49,809 --> 00:09:58,779
dice ok so the thing is that you know

00:09:56,980 --> 00:10:01,149
it's stupid project it's not important

00:09:58,779 --> 00:10:05,319
but I wanted to finish it and I wanted

00:10:01,149 --> 00:10:08,379
to do it correctly this time so I just

00:10:05,319 --> 00:10:10,509
said ok I would do this but I will just

00:10:08,379 --> 00:10:13,449
stick to one very simple feature which

00:10:10,509 --> 00:10:16,240
is wrapping the da Christ commands I

00:10:13,449 --> 00:10:20,110
will use rest and I will tell you why I

00:10:16,240 --> 00:10:21,519
decided to pick rest and it will be up

00:10:20,110 --> 00:10:23,529
in shortest time because before it was

00:10:21,519 --> 00:10:26,949
just you know something for the company

00:10:23,529 --> 00:10:28,600
and in part because of that I was the

00:10:26,949 --> 00:10:31,959
only one at the voting time to eat and

00:10:28,600 --> 00:10:34,089
also my colleagues had overconfidence on

00:10:31,959 --> 00:10:36,429
me too much confidence so I you know

00:10:34,089 --> 00:10:39,490
like they didn't even pay attention to

00:10:36,429 --> 00:10:42,249
learn how it worked so I was the you

00:10:39,490 --> 00:10:46,449
know the fixers I wrote in in previous

00:10:42,249 --> 00:10:48,730
lights and you know it I wanted to share

00:10:46,449 --> 00:10:54,420
something and that's why I wanted to

00:10:48,730 --> 00:10:57,009
make it open stores and and so why rice

00:10:54,420 --> 00:11:00,070
of course I wanted to learn more about

00:10:57,009 --> 00:11:01,390
rest and experiments

00:11:00,070 --> 00:11:03,790
there's something that I really love

00:11:01,390 --> 00:11:06,730
about some languages which is a strong

00:11:03,790 --> 00:11:09,700
type stone typing memory safety I really

00:11:06,730 --> 00:11:12,460
like to have some functional features in

00:11:09,700 --> 00:11:15,850
inside rest not only that some type of

00:11:12,460 --> 00:11:18,220
memory safety but you know other other

00:11:15,850 --> 00:11:22,209
stuff that it's there and it's really

00:11:18,220 --> 00:11:28,660
nice like pattern matching sorry I'm a

00:11:22,209 --> 00:11:35,740
little bit so yeah that would be nice

00:11:28,660 --> 00:11:39,190
thank you very much so also it was I was

00:11:35,740 --> 00:11:41,230
not I was not really surprised by that

00:11:39,190 --> 00:11:44,470
because rust is a very modern language

00:11:41,230 --> 00:11:47,070
but I was really pleased that the the

00:11:44,470 --> 00:11:50,860
its standard library is very complete

00:11:47,070 --> 00:11:55,060
and I would say that for example for the

00:11:50,860 --> 00:11:56,860
cases that I'm working on here it's way

00:11:55,060 --> 00:12:00,100
nicer than for example what you could

00:11:56,860 --> 00:12:01,540
find on Python it's better designed for

00:12:00,100 --> 00:12:04,900
example if I if I have to work with

00:12:01,540 --> 00:12:08,830
processes or if I if I have to work with

00:12:04,900 --> 00:12:11,380
paths or this kind of stuff it's better

00:12:08,830 --> 00:12:15,850
designed and then pythons library and

00:12:11,380 --> 00:12:17,800
this was one of the reasons as well of

00:12:15,850 --> 00:12:22,500
course it targets many platforms like

00:12:17,800 --> 00:12:22,500
Linux Mac OS Windows thank you very much

00:12:27,670 --> 00:12:33,110
and yeah this is not really important

00:12:31,820 --> 00:12:34,850
because you know most of the stuff is

00:12:33,110 --> 00:12:37,070
being done with scripting languages and

00:12:34,850 --> 00:12:39,800
no one complains about that but you know

00:12:37,070 --> 00:12:41,300
is from time to time people like to brag

00:12:39,800 --> 00:12:45,410
about the performance of their stuff so

00:12:41,300 --> 00:12:47,060
yes Rusty's is a very performant

00:12:45,410 --> 00:12:51,470
language and this is something that

00:12:47,060 --> 00:12:53,720
attracted me also as I said before it's

00:12:51,470 --> 00:12:56,330
step forward to create a signal

00:12:53,720 --> 00:13:00,290
statically linked binary without having

00:12:56,330 --> 00:13:02,840
to rely on clever tricks and also it

00:13:00,290 --> 00:13:04,640
interfaces nicely with C and this is not

00:13:02,840 --> 00:13:06,890
the guy's the case right now for me I

00:13:04,640 --> 00:13:09,730
don't need it but could be the case

00:13:06,890 --> 00:13:12,950
because this is like a very systems

00:13:09,730 --> 00:13:14,990
oriented tool and this is something that

00:13:12,950 --> 00:13:20,930
okay maybe at some point in the future I

00:13:14,990 --> 00:13:23,660
would need it so why not you know so as

00:13:20,930 --> 00:13:25,730
I said to you I don't have like much to

00:13:23,660 --> 00:13:32,240
show you and that's why I say promise

00:13:25,730 --> 00:13:35,750
here but just go with me please

00:13:32,240 --> 00:13:38,210
so first point general proposed version

00:13:35,750 --> 00:13:40,820
pinning for the tools not for the

00:13:38,210 --> 00:13:43,550
libraries not for ever for anything else

00:13:40,820 --> 00:13:46,660
so just for the tools and for example

00:13:43,550 --> 00:13:50,270
for no GS there's people using NPM or

00:13:46,660 --> 00:13:52,190
there's this new tool fnm which is made

00:13:50,270 --> 00:13:54,680
in recent ml which is kind of cool it's

00:13:52,190 --> 00:14:02,960
way faster than mbm but it's kind of the

00:13:54,680 --> 00:14:04,700
same thing no no no it's not it's in

00:14:02,960 --> 00:14:07,220
this case it's so it allows you to

00:14:04,700 --> 00:14:11,120
switch from one version of node to other

00:14:07,220 --> 00:14:12,530
you know so it's like doing the same

00:14:11,120 --> 00:14:19,760
that the people that's with reveries but

00:14:12,530 --> 00:14:21,800
just with the tools right and so what I

00:14:19,760 --> 00:14:23,330
wanted to provide and this is like very

00:14:21,800 --> 00:14:26,990
stupid thing because actually it's multi

00:14:23,330 --> 00:14:29,510
for newbies and but I consider myself

00:14:26,990 --> 00:14:31,880
most of the times like that I want to do

00:14:29,510 --> 00:14:34,610
easy stuff and what I want to do is okay

00:14:31,880 --> 00:14:37,550
I arrived to a company and I don't know

00:14:34,610 --> 00:14:39,800
what which tools they are using so I

00:14:37,550 --> 00:14:40,310
don't know the the the repository and

00:14:39,800 --> 00:14:42,410
without in

00:14:40,310 --> 00:14:45,640
starting any tool I just could start

00:14:42,410 --> 00:14:48,440
doing things so that's what I wanted to

00:14:45,640 --> 00:14:51,500
so this is the point where I want to

00:14:48,440 --> 00:14:54,650
arrive so I just clone the project I go

00:14:51,500 --> 00:14:56,180
into the project and given the given the

00:14:54,650 --> 00:14:57,890
point that the project has been

00:14:56,180 --> 00:14:59,180
configured in a way that it can be used

00:14:57,890 --> 00:15:02,300
like that because of course it requires

00:14:59,180 --> 00:15:05,540
previous work I just type avatar install

00:15:02,300 --> 00:15:11,029
this that's some stuff that I will

00:15:05,540 --> 00:15:14,930
explain later and this allows me to to

00:15:11,029 --> 00:15:18,800
enter into a sub shell that gives me

00:15:14,930 --> 00:15:20,630
access to all these tools that are are

00:15:18,800 --> 00:15:21,710
being required to work on this specific

00:15:20,630 --> 00:15:25,779
project

00:15:21,710 --> 00:15:28,730
this could be an PM nodejs python HP

00:15:25,779 --> 00:15:31,190
whatever we need okay and these tools

00:15:28,730 --> 00:15:34,700
that are being accessed in reality are

00:15:31,190 --> 00:15:37,580
working as docker processes of docker

00:15:34,700 --> 00:15:41,450
containers in a way that allows us to

00:15:37,580 --> 00:15:43,130
you know not having problems with docker

00:15:41,450 --> 00:15:45,710
permit with file permissions you know

00:15:43,130 --> 00:15:49,430
when by default docker containers are

00:15:45,710 --> 00:15:53,120
running into in root mode and as are you

00:15:49,430 --> 00:15:55,520
as a root user sorry also of course you

00:15:53,120 --> 00:15:58,730
have to mount specifically all the

00:15:55,520 --> 00:16:00,230
volumes if you are working for example

00:15:58,730 --> 00:16:04,580
let's say that you're installing a

00:16:00,230 --> 00:16:06,830
package with NPM in the first place you

00:16:04,580 --> 00:16:07,850
won't have any problem but okay let's

00:16:06,830 --> 00:16:10,339
say that you are working and you are

00:16:07,850 --> 00:16:12,080
trying to install a private project at

00:16:10,339 --> 00:16:15,950
that point you will need your SSH keys

00:16:12,080 --> 00:16:18,589
and what people would do without

00:16:15,950 --> 00:16:21,410
thinking much is okay I'll mount my SSH

00:16:18,589 --> 00:16:23,570
keys what happens if your SSH keys have

00:16:21,410 --> 00:16:28,100
a passphrase okay you have to type the

00:16:23,570 --> 00:16:30,620
password every every single time it is

00:16:28,100 --> 00:16:34,880
solution you instead of mounting the the

00:16:30,620 --> 00:16:38,270
SSH keys you mount the unique socket

00:16:34,880 --> 00:16:40,760
that connects with the SSH agent that

00:16:38,270 --> 00:16:42,950
allows you to avoid having to type the

00:16:40,760 --> 00:16:46,490
password the passphrase every single

00:16:42,950 --> 00:16:48,650
time another problem that you could face

00:16:46,490 --> 00:16:51,260
with a package a package manager in this

00:16:48,650 --> 00:16:53,440
case which is probably the the most

00:16:51,260 --> 00:16:55,570
common usage that I'm devising

00:16:53,440 --> 00:17:00,519
is what happens with their cut and

00:16:55,570 --> 00:17:03,670
catching so NPM has this super big catch

00:17:00,519 --> 00:17:06,370
peep em a peep all these tools have a

00:17:03,670 --> 00:17:08,199
lot of catching mechanisms and if you

00:17:06,370 --> 00:17:09,760
are just running the containers they

00:17:08,199 --> 00:17:12,040
will create the ket and they will create

00:17:09,760 --> 00:17:14,439
the catch inside the container and then

00:17:12,040 --> 00:17:16,870
they will they will wipe the catch on

00:17:14,439 --> 00:17:18,970
you discard a container because another

00:17:16,870 --> 00:17:22,929
thing that I wanted to ensure is all the

00:17:18,970 --> 00:17:25,299
containers were stateless so not to

00:17:22,929 --> 00:17:27,040
avoid polluting the space with just

00:17:25,299 --> 00:17:30,190
random containers that are being created

00:17:27,040 --> 00:17:33,580
one after another so I I wanted to be

00:17:30,190 --> 00:17:37,299
sure that all the catch the the volumes

00:17:33,580 --> 00:17:40,419
that map to the proper caches are being

00:17:37,299 --> 00:17:45,120
you know properly mapped and that's what

00:17:40,419 --> 00:17:48,130
I want to provide with this tool of

00:17:45,120 --> 00:17:49,990
course a multi-platform Linux and Mac OS

00:17:48,130 --> 00:17:51,700
for now I don't know if it's really

00:17:49,990 --> 00:17:54,850
possible to go beyond that I know that

00:17:51,700 --> 00:17:56,799
on Windows with this Linux of system

00:17:54,850 --> 00:18:00,309
version 2 because with the version one

00:17:56,799 --> 00:18:02,230
is impossible with version 2 it seems

00:18:00,309 --> 00:18:05,230
that it opens the door to do something

00:18:02,230 --> 00:18:07,990
but it still would be Linux so that's

00:18:05,230 --> 00:18:11,500
why it will be possible and I don't know

00:18:07,990 --> 00:18:13,090
about BSD or other systems I should do

00:18:11,500 --> 00:18:15,429
some research on the topic because I

00:18:13,090 --> 00:18:19,840
don't know how compatible our day with

00:18:15,429 --> 00:18:21,190
this container technologies mostly

00:18:19,840 --> 00:18:23,980
docker maybe they have had their own

00:18:21,190 --> 00:18:26,890
stuff I don't I didn't ever I didn't

00:18:23,980 --> 00:18:29,830
check I'm being honest with that so but

00:18:26,890 --> 00:18:34,929
if someone knows and I would be glad to

00:18:29,830 --> 00:18:37,510
know and as I told you geo problems with

00:18:34,929 --> 00:18:41,260
file permissions SSH keys and package

00:18:37,510 --> 00:18:44,140
manager caches sorry there was this

00:18:41,260 --> 00:18:46,929
point this I almost forgot to write this

00:18:44,140 --> 00:18:51,309
and I was like I had this kind of okay I

00:18:46,929 --> 00:18:54,220
have to write this also so we think

00:18:51,309 --> 00:18:56,770
mostly about these tools like working

00:18:54,220 --> 00:19:00,159
interactively and this is nice but from

00:18:56,770 --> 00:19:02,040
time to time we also do scripts and it's

00:19:00,159 --> 00:19:03,760
good that the tools are being able to

00:19:02,040 --> 00:19:04,920
distinguish when they are in an

00:19:03,760 --> 00:19:07,830
interactive environment

00:19:04,920 --> 00:19:11,250
not this is not very complicated but it

00:19:07,830 --> 00:19:13,800
has to be done like on purpose otherwise

00:19:11,250 --> 00:19:16,830
the tool that will we will be just damp

00:19:13,800 --> 00:19:18,600
and it won't be able to distinguish so

00:19:16,830 --> 00:19:23,280
this is also something that I want to

00:19:18,600 --> 00:19:26,850
provide yeah what I don't promise

00:19:23,280 --> 00:19:28,100
because it's it's just impossible so

00:19:26,850 --> 00:19:30,990
[Music]

00:19:28,100 --> 00:19:34,650
it's not possible to wrap everything

00:19:30,990 --> 00:19:37,260
just magically some work has to be done

00:19:34,650 --> 00:19:42,780
for every specific tool or for most

00:19:37,260 --> 00:19:46,440
specific tools so my idea was okay for

00:19:42,780 --> 00:19:47,610
some very popular tools like MPM Python

00:19:46,440 --> 00:19:49,710
PHP blah blah blah

00:19:47,610 --> 00:19:51,600
I will cut code just the code the code

00:19:49,710 --> 00:19:55,410
will be just hard coded into a tool but

00:19:51,600 --> 00:19:57,860
for other other tools the users will

00:19:55,410 --> 00:20:00,240
have to provide some extra configuration

00:19:57,860 --> 00:20:02,850
the that configuration could be placed

00:20:00,240 --> 00:20:06,180
inside the docker images as metadata

00:20:02,850 --> 00:20:08,190
that would be the ideal solution because

00:20:06,180 --> 00:20:10,920
then you could create a lot of projects

00:20:08,190 --> 00:20:13,740
and this confusion is just based in one

00:20:10,920 --> 00:20:15,990
single place or if for whatever reason

00:20:13,740 --> 00:20:17,370
you are in a hurry you could place this

00:20:15,990 --> 00:20:22,470
computation in the configuration file

00:20:17,370 --> 00:20:24,900
but this is not as portable and of

00:20:22,470 --> 00:20:28,440
course the second point this I can't

00:20:24,900 --> 00:20:30,450
promise this if you want to try to make

00:20:28,440 --> 00:20:32,130
something really complex that one tool

00:20:30,450 --> 00:20:34,790
calls another and another and another

00:20:32,130 --> 00:20:39,180
and each tool belongs to a different

00:20:34,790 --> 00:20:41,190
docker image this won't be possible

00:20:39,180 --> 00:20:43,380
because first of all I'm not trying to

00:20:41,190 --> 00:20:46,190
implement any dhoka dhoka it's possible

00:20:43,380 --> 00:20:48,210
but that that would be a nightmare I

00:20:46,190 --> 00:20:52,290
don't know if something is really

00:20:48,210 --> 00:20:55,350
creative and wants to contribute to do

00:20:52,290 --> 00:21:01,380
that okay but I won't do that I don't

00:20:55,350 --> 00:21:03,150
see the point okay so let's let's see

00:21:01,380 --> 00:21:05,190
how it should work okay because I've

00:21:03,150 --> 00:21:12,090
talked about what I want to provide but

00:21:05,190 --> 00:21:14,520
how it should work okay this is just a

00:21:12,090 --> 00:21:17,460
preparation this is what people really

00:21:14,520 --> 00:21:19,200
enjoys okay because the III will enter

00:21:17,460 --> 00:21:25,170
into this box

00:21:19,200 --> 00:21:26,610
okay so it's not really needed to pay

00:21:25,170 --> 00:21:28,890
much attention to this but basically

00:21:26,610 --> 00:21:33,690
what's important here is that we have

00:21:28,890 --> 00:21:35,340
this settings file we also have to take

00:21:33,690 --> 00:21:38,130
care of the environment because when we

00:21:35,340 --> 00:21:41,340
enter into a subshell we have to set

00:21:38,130 --> 00:21:42,930
some and Bioman variables to tell all

00:21:41,340 --> 00:21:45,210
the processes that interact with this

00:21:42,930 --> 00:21:48,960
environment that the the environment is

00:21:45,210 --> 00:21:52,260
active and we also have some log files

00:21:48,960 --> 00:21:54,690
that are kind of catch this relation

00:21:52,260 --> 00:21:58,110
between some binary names and some

00:21:54,690 --> 00:22:01,680
docker image names and also by some

00:21:58,110 --> 00:22:07,590
pinning if we are relying on semantic

00:22:01,680 --> 00:22:11,280
versioning so this kind of describes the

00:22:07,590 --> 00:22:14,040
flow it's it's kinda provisional I mean

00:22:11,280 --> 00:22:16,500
you could see here a very ugly panic you

00:22:14,040 --> 00:22:23,660
know like okay if there's an error yeah

00:22:16,500 --> 00:22:27,360
I could show up but yeah so in the end

00:22:23,660 --> 00:22:31,200
there are two possible ending points

00:22:27,360 --> 00:22:32,430
this big box and these green points this

00:22:31,200 --> 00:22:35,600
is where the magic happens

00:22:32,430 --> 00:22:40,410
this is actually this is the simple step

00:22:35,600 --> 00:22:43,350
basically how it will work I just copied

00:22:40,410 --> 00:22:45,480
copied something I will go into this

00:22:43,350 --> 00:22:48,660
later but I want to explain it now

00:22:45,480 --> 00:22:53,070
because so I don't know if any of you

00:22:48,660 --> 00:22:58,530
knows how snap works I want to snap if

00:22:53,070 --> 00:23:02,820
if you if you see the how the binaries

00:22:58,530 --> 00:23:04,830
are designed they are not they are just

00:23:02,820 --> 00:23:08,790
seem links with the name of the binary

00:23:04,830 --> 00:23:10,920
and all of these binaries point to the

00:23:08,790 --> 00:23:13,380
sync to the snap binary all of them

00:23:10,920 --> 00:23:15,990
there's no metadata the only metadata

00:23:13,380 --> 00:23:18,450
that they use to decide what has to be

00:23:15,990 --> 00:23:22,760
executed is the name of the same link

00:23:18,450 --> 00:23:26,490
it's there's there's where all the magic

00:23:22,760 --> 00:23:30,300
relies so basically that's what I want

00:23:26,490 --> 00:23:32,450
to do when I set up the environments I

00:23:30,300 --> 00:23:35,780
modify the past

00:23:32,450 --> 00:23:38,090
this path adds subject sub-directory

00:23:35,780 --> 00:23:39,980
where i have like a ton of assim links

00:23:38,090 --> 00:23:43,700
where all these tools that i installed

00:23:39,980 --> 00:23:46,820
belong all the ceilings points to avatar

00:23:43,700 --> 00:23:49,400
and avatar when it detects that it has

00:23:46,820 --> 00:23:51,590
been executed to this name it matches

00:23:49,400 --> 00:23:55,550
the name with through these catched

00:23:51,590 --> 00:23:59,960
files that i mentioned before and owns

00:23:55,550 --> 00:24:02,330
so name much as the image and it gathers

00:23:59,960 --> 00:24:04,580
all the configurations that it requires

00:24:02,330 --> 00:24:07,820
to know how to call this command because

00:24:04,580 --> 00:24:10,820
ok which volumes i have to mount is it

00:24:07,820 --> 00:24:14,900
interactive or not or you know so this

00:24:10,820 --> 00:24:17,390
is how it would work and this is just

00:24:14,900 --> 00:24:20,030
like basic commands like in it a shell

00:24:17,390 --> 00:24:22,640
for the sub shell deactivate like go out

00:24:20,030 --> 00:24:25,520
of the shell this is this actually this

00:24:22,640 --> 00:24:28,790
wouldn't be a sub command of avatar it

00:24:25,520 --> 00:24:31,130
would be a small shell script inside the

00:24:28,790 --> 00:24:36,620
binary directory that does this kind of

00:24:31,130 --> 00:24:38,840
an source that you know and clean and

00:24:36,620 --> 00:24:43,460
help clean is just remove whatever you

00:24:38,840 --> 00:24:46,430
created in this space so commands this

00:24:43,460 --> 00:24:48,620
init it would create a channel file it

00:24:46,430 --> 00:24:50,180
would ask like ok give me the names of

00:24:48,620 --> 00:24:51,620
the images that you want and if you're

00:24:50,180 --> 00:24:53,900
lucky enough and you give the names of

00:24:51,620 --> 00:24:55,610
images that are already supported it

00:24:53,900 --> 00:24:59,150
will create a file and you would do

00:24:55,610 --> 00:25:02,540
anything else ok I want whatever it's ok

00:24:59,150 --> 00:25:04,490
you have it installed this is more this

00:25:02,540 --> 00:25:06,650
is funnier and this is kinda doing what

00:25:04,490 --> 00:25:10,250
I told you before it has to read the

00:25:06,650 --> 00:25:12,740
configuration file of quarter

00:25:10,250 --> 00:25:15,110
configuration defines which images are

00:25:12,740 --> 00:25:18,500
going to be used we pull these images

00:25:15,110 --> 00:25:21,200
why why we do that before anything else

00:25:18,500 --> 00:25:24,770
because we could gather meta information

00:25:21,200 --> 00:25:30,170
from these images that could be needed

00:25:24,770 --> 00:25:32,300
for these next steps so each step could

00:25:30,170 --> 00:25:35,180
overwrite the compression that has been

00:25:32,300 --> 00:25:39,500
is defined on the previous step

00:25:35,180 --> 00:25:41,690
of course we check the hard-coded

00:25:39,500 --> 00:25:46,810
settings that are in the image if

00:25:41,690 --> 00:25:46,810
there's some I wrote it

00:25:46,960 --> 00:25:52,940
of course yeah I call it inside the

00:25:49,790 --> 00:25:55,010
Avatar binary if there's some embedded

00:25:52,940 --> 00:25:56,860
information in the image it will

00:25:55,010 --> 00:25:59,480
overwrite what whatever I had called it

00:25:56,860 --> 00:26:00,890
if there's something in the computation

00:25:59,480 --> 00:26:02,660
file of course it will overwrite

00:26:00,890 --> 00:26:08,059
whatever was in the metadata of the

00:26:02,660 --> 00:26:12,700
image and after that we'll create just

00:26:08,059 --> 00:26:15,620
these symlink that I mentioned okay and

00:26:12,700 --> 00:26:17,660
this has to be catched because otherwise

00:26:15,620 --> 00:26:19,730
it would be too slow to all do all these

00:26:17,660 --> 00:26:23,630
solution process every time that we call

00:26:19,730 --> 00:26:27,740
a binary okay shell this is when we

00:26:23,630 --> 00:26:30,140
activate the sub shell the idea is that

00:26:27,740 --> 00:26:32,020
right to mechanisms it's not I think

00:26:30,140 --> 00:26:34,730
that there was some mention before but

00:26:32,020 --> 00:26:35,960
there's this sub shell but there's a

00:26:34,730 --> 00:26:37,850
better way to do it

00:26:35,960 --> 00:26:39,890
also it's not so nice when you are

00:26:37,850 --> 00:26:42,620
typing which is that just doing a source

00:26:39,890 --> 00:26:45,140
of a small shell script and then you do

00:26:42,620 --> 00:26:47,960
do don't create a sub shell so this is

00:26:45,140 --> 00:26:49,550
better for for example for scripting but

00:26:47,960 --> 00:26:50,809
in case that you are just working on

00:26:49,550 --> 00:26:52,940
your command line it's not a real

00:26:50,809 --> 00:26:55,040
problem well I mentioned a problem that

00:26:52,940 --> 00:26:56,750
I faced and it took me some time to just

00:26:55,040 --> 00:27:00,470
understand why what was happening but

00:26:56,750 --> 00:27:03,440
it's just a minor stuff so okay the

00:27:00,470 --> 00:27:04,880
shell will create a sub sub shell how it

00:27:03,440 --> 00:27:08,630
will set some environment variables

00:27:04,880 --> 00:27:11,330
first of all it will define where the

00:27:08,630 --> 00:27:13,580
project is which is the directory it

00:27:11,330 --> 00:27:17,210
will also point to the specific avatar

00:27:13,580 --> 00:27:19,340
binary that it's using because although

00:27:17,210 --> 00:27:22,100
I'm not I'm not providing support for it

00:27:19,340 --> 00:27:25,390
now yet I want to do it in the future

00:27:22,100 --> 00:27:28,550
like to allow to work with different

00:27:25,390 --> 00:27:31,490
binaries binary versions so it would be

00:27:28,550 --> 00:27:34,130
possible to just make a copy of a

00:27:31,490 --> 00:27:37,190
specific version of Avatar in inside

00:27:34,130 --> 00:27:40,730
this binary and and then whenever you go

00:27:37,190 --> 00:27:42,380
out so what so if you're for whatever

00:27:40,730 --> 00:27:44,570
reason you're using a different avatar

00:27:42,380 --> 00:27:47,320
with a different version it will just

00:27:44,570 --> 00:27:50,360
replace the binary with an exact be

00:27:47,320 --> 00:27:52,010
Cisco so it would be like if you just

00:27:50,360 --> 00:27:55,280
call the correct one that's why I wanted

00:27:52,010 --> 00:27:56,289
to have this avatars Eli path variable

00:27:55,280 --> 00:27:58,210
here

00:27:56,289 --> 00:28:01,899
of course we modify the path environment

00:27:58,210 --> 00:28:04,419
variable as I mentioned and this is the

00:28:01,899 --> 00:28:06,159
point okay how do we create a subshell

00:28:04,419 --> 00:28:10,779
there's people working with setters age

00:28:06,159 --> 00:28:12,970
people with CC CSH with wash with fish

00:28:10,779 --> 00:28:15,820
with you know we have plenty of shells

00:28:12,970 --> 00:28:18,759
and I don't want to prefer one over the

00:28:15,820 --> 00:28:22,059
over another so it's possible to detect

00:28:18,759 --> 00:28:24,129
what was the outer shell and given that

00:28:22,059 --> 00:28:28,059
information we can we can replace the

00:28:24,129 --> 00:28:30,190
Avatar process by by this shell that we

00:28:28,059 --> 00:28:33,249
had before it's just it just will be

00:28:30,190 --> 00:28:37,239
nested and we do that with this

00:28:33,249 --> 00:28:40,269
marvelous exact we call that POSIX

00:28:37,239 --> 00:28:44,470
systems provides it's not available in

00:28:40,269 --> 00:28:47,169
Windows that's a pity yeah something

00:28:44,470 --> 00:28:50,169
that I found that I dislike it very much

00:28:47,169 --> 00:28:52,899
was that some variables like ps1 and ps2

00:28:50,169 --> 00:28:57,039
that are used to define the prompt are

00:28:52,899 --> 00:29:00,489
not passed when yeah so there are some

00:28:57,039 --> 00:29:03,279
ways but I think that it's kinda strange

00:29:00,489 --> 00:29:06,159
so the only way is the only clean way is

00:29:03,279 --> 00:29:08,710
to reload all the configurations but

00:29:06,159 --> 00:29:10,720
this is quite nasty and be something

00:29:08,710 --> 00:29:12,759
that maybe in the future I will do just

00:29:10,720 --> 00:29:17,200
to recover all the problem that you had

00:29:12,759 --> 00:29:20,049
before but if you know in a few days

00:29:17,200 --> 00:29:23,109
when when my feel my first demo is on

00:29:20,049 --> 00:29:25,119
the air available for the people when

00:29:23,109 --> 00:29:27,190
they do the sub shell they will just see

00:29:25,119 --> 00:29:29,320
that the prompt changes and I don't like

00:29:27,190 --> 00:29:31,480
it but you know I spent two days dig

00:29:29,320 --> 00:29:33,629
into that and I it was just a loss of

00:29:31,480 --> 00:29:33,629
time

00:29:34,330 --> 00:29:41,730
okay this is the run step as I mentioned

00:29:38,980 --> 00:29:45,940
this is the what I've mentioned before

00:29:41,730 --> 00:29:49,679
we identify which is an image through

00:29:45,940 --> 00:29:53,830
the sibling name then we do this mapping

00:29:49,679 --> 00:29:56,320
and of course also we have identified

00:29:53,830 --> 00:29:58,690
the image and all that stuff we have to

00:29:56,320 --> 00:30:01,629
take into account our user ID if the

00:29:58,690 --> 00:30:07,059
process is interactive and all this

00:30:01,629 --> 00:30:09,410
stuff okay there are other commands that

00:30:07,059 --> 00:30:10,880
I didn't describe because actually

00:30:09,410 --> 00:30:13,070
I have to think a little bit more but I

00:30:10,880 --> 00:30:14,840
know that I want to implement them like

00:30:13,070 --> 00:30:16,670
an update this is important if we are

00:30:14,840 --> 00:30:19,520
dealing with a semantic versioning like

00:30:16,670 --> 00:30:21,440
if we don't want to specify the exact

00:30:19,520 --> 00:30:26,440
version but just the first mine

00:30:21,440 --> 00:30:31,580
operation then we could we should lock

00:30:26,440 --> 00:30:33,110
this build version of the images to

00:30:31,580 --> 00:30:36,370
avoid that some people have different

00:30:33,110 --> 00:30:38,870
versions on the development team so

00:30:36,370 --> 00:30:41,260
update has to be an explicit step it can

00:30:38,870 --> 00:30:44,270
be accidental or it has to be explicit

00:30:41,260 --> 00:30:47,660
this add would be just a simple way to

00:30:44,270 --> 00:30:50,750
add new images without having to go to

00:30:47,660 --> 00:30:53,060
the yamen file and is how it it's this

00:30:50,750 --> 00:30:54,680
is just I was inspired by these nice

00:30:53,060 --> 00:30:56,750
messages that I am receiving this past

00:30:54,680 --> 00:30:59,750
days from NPM you know that it's telling

00:30:56,750 --> 00:31:05,330
me that my code is full of security

00:30:59,750 --> 00:31:07,550
holes and actually I think that it's a

00:31:05,330 --> 00:31:10,070
very nice idea and I want to implement

00:31:07,550 --> 00:31:13,250
it I don't know how I would do that

00:31:10,070 --> 00:31:15,500
because this in this implies having

00:31:13,250 --> 00:31:17,900
security access to security databases

00:31:15,500 --> 00:31:21,670
and all that stuff but this is something

00:31:17,900 --> 00:31:24,050
that would be really really really nice

00:31:21,670 --> 00:31:27,740
yeah there's not much about rest as I

00:31:24,050 --> 00:31:31,370
told you I'm using a very subset of rest

00:31:27,740 --> 00:31:34,340
and using just pattern matching a very

00:31:31,370 --> 00:31:37,160
small set of cargo packages just Serta

00:31:34,340 --> 00:31:39,860
for the ML staff these deals because it

00:31:37,160 --> 00:31:43,100
gives me the small database of director

00:31:39,860 --> 00:31:45,440
is given a specific operating system and

00:31:43,100 --> 00:31:48,640
actually you know it's it's as simple as

00:31:45,440 --> 00:31:51,470
dealing with environment variables with

00:31:48,640 --> 00:31:53,660
process arguments I have to deal with

00:31:51,470 --> 00:31:55,460
the commands and I also use this

00:31:53,660 --> 00:31:57,410
straight command next because it gives

00:31:55,460 --> 00:32:02,020
me access to this POSIX

00:31:57,410 --> 00:32:02,020
call otherwise it's not available and

00:32:03,280 --> 00:32:09,080
yeah I have to say that something that

00:32:06,260 --> 00:32:12,650
it's kind of pragmatic for me and it's

00:32:09,080 --> 00:32:16,430
also error handling and you know I'm

00:32:12,650 --> 00:32:20,600
used to just bubble up things like in a

00:32:16,430 --> 00:32:22,080
like and also I I was more used to web

00:32:20,600 --> 00:32:25,080
development not like

00:32:22,080 --> 00:32:28,740
like command-line tools so I'm not

00:32:25,080 --> 00:32:30,900
really sure how to make this

00:32:28,740 --> 00:32:33,300
architecture in a clean way you know

00:32:30,900 --> 00:32:35,070
like usually in web arc in in what

00:32:33,300 --> 00:32:37,680
element you have like this layered

00:32:35,070 --> 00:32:39,960
architecture your onion architecture or

00:32:37,680 --> 00:32:45,810
external architecture if you go like

00:32:39,960 --> 00:32:48,840
really serious but here yeah something

00:32:45,810 --> 00:32:52,260
similar could be done but I'm not really

00:32:48,840 --> 00:32:54,540
sure because as you saw before this flow

00:32:52,260 --> 00:32:58,290
path flow diagram that I showed it was

00:32:54,540 --> 00:33:01,440
kinda messy and I don't know how to so

00:32:58,290 --> 00:33:02,880
now it's it's a mess it's a set of

00:33:01,440 --> 00:33:05,370
experiments here and there okay I

00:33:02,880 --> 00:33:07,980
checked that I could do this XA Kai

00:33:05,370 --> 00:33:10,200
check that I could do this calls to

00:33:07,980 --> 00:33:12,810
doctor I checked and I have to put all

00:33:10,200 --> 00:33:16,250
these pieces together and I guess that

00:33:12,810 --> 00:33:18,420
in a few days it will be available and

00:33:16,250 --> 00:33:20,810
yeah that's all thank you very much for

00:33:18,420 --> 00:33:20,810
your attention

00:33:23,600 --> 00:33:30,360
sorry yeah I know that you won't win

00:33:27,240 --> 00:33:32,670
this but I think things that I want to

00:33:30,360 --> 00:33:36,540
do as I told you there's everything to

00:33:32,670 --> 00:33:39,780
do yet but of course I want to document

00:33:36,540 --> 00:33:42,090
and all that stuff but something that I

00:33:39,780 --> 00:33:43,260
wanted to do and I wanted to mention it

00:33:42,090 --> 00:33:46,820
it's bootstrapping

00:33:43,260 --> 00:33:50,040
I want to run the rest compiler like

00:33:46,820 --> 00:33:53,430
through a docker container with these

00:33:50,040 --> 00:33:55,020
tools so that would be that just for fun

00:33:53,430 --> 00:33:57,690
I want to do that and I wanted to

00:33:55,020 --> 00:33:59,640
mention it before leaving that would be

00:33:57,690 --> 00:34:02,880
really nice to do both bootstrapping and

00:33:59,640 --> 00:34:06,290
running the rest compiler throughout and

00:34:02,880 --> 00:34:06,290
yeah that's all thank you

00:34:07,180 --> 00:34:21,800
[Applause]

00:34:10,620 --> 00:34:21,800

YouTube URL: https://www.youtube.com/watch?v=zHuXnmmATHM


