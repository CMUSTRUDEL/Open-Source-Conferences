Title: Crash Course with Bastionâ€” Mahmut Bulut
Publication date: 2020-02-05
Playlist: Rust and Tell Berlin
Description: 
	From the Berlin Rust's November "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)

Mahmut talks about current asynchronous execution patterns, fault-tolerance, and error handling in Rust and how they interconnected in modern systems. He explains how Bastion(https://bastion.rs) runtime's different approaches help to solve problems arisen from current implementations.

Mahmut Bulut: https://twitter.com/vertexclique

Hosted at Prisma: https://www.prisma.io/

ðŸŽ¥ Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:03,830 --> 00:00:09,809
so normally this talk is called crash

00:00:07,890 --> 00:00:11,580
course with bastion but I want to call

00:00:09,809 --> 00:00:14,490
it let it crash course with Bastion and

00:00:11,580 --> 00:00:16,830
you might have known this what is this

00:00:14,490 --> 00:00:19,050
wording coming from and we are going to

00:00:16,830 --> 00:00:24,810
talk about this voting and ongoing

00:00:19,050 --> 00:00:27,480
slides so let's talk about what I am Who

00:00:24,810 --> 00:00:31,619
I am let me introduce myself so I'm

00:00:27,480 --> 00:00:36,780
doing data processing by day I'm writing

00:00:31,619 --> 00:00:40,620
rust since 0.4 and I wrote a couple of

00:00:36,780 --> 00:00:42,629
the compiler stuff inside and currently

00:00:40,620 --> 00:00:46,200
I have a couple of open to requests to

00:00:42,629 --> 00:00:50,250
the miry and we are unleashing the miry

00:00:46,200 --> 00:00:54,000
right now and some other rough projects

00:00:50,250 --> 00:00:58,969
I'm working on I'm member of the

00:00:54,000 --> 00:01:05,850
community and that is all I can say I

00:00:58,969 --> 00:01:07,500
think and let's start and by the way

00:01:05,850 --> 00:01:11,010
with this you can see that my drawings

00:01:07,500 --> 00:01:14,159
are really not good and let's talk about

00:01:11,010 --> 00:01:16,650
how people communicate so we communicate

00:01:14,159 --> 00:01:21,479
or synchronously so what we are doing is

00:01:16,650 --> 00:01:25,500
basically exchanging messages and saying

00:01:21,479 --> 00:01:28,380
things to each other and then there is

00:01:25,500 --> 00:01:32,070
no actually something that is blocking

00:01:28,380 --> 00:01:35,880
us right I mean this is how our life and

00:01:32,070 --> 00:01:37,380
communication works and I think I

00:01:35,880 --> 00:01:39,450
believe that the software system should

00:01:37,380 --> 00:01:45,200
be like the how the nature in nature is

00:01:39,450 --> 00:01:49,049
so if you have it if you don't see any

00:01:45,200 --> 00:01:51,450
blocking in the nature and everything is

00:01:49,049 --> 00:01:53,670
basically kind of working like a message

00:01:51,450 --> 00:01:55,470
passing and there's a vein blowing

00:01:53,670 --> 00:01:59,280
there's everything is working like that

00:01:55,470 --> 00:02:01,530
and when it comes to come communication

00:01:59,280 --> 00:02:05,850
of shared memory I think it is not

00:02:01,530 --> 00:02:08,399
nature and so let's think about a case

00:02:05,850 --> 00:02:10,200
that is like we don't write a paper on

00:02:08,399 --> 00:02:11,910
the desk and then we just don't read

00:02:10,200 --> 00:02:12,960
from there right to communicate with

00:02:11,910 --> 00:02:16,080
each other with you

00:02:12,960 --> 00:02:17,460
example and I'm telling some words

00:02:16,080 --> 00:02:20,400
you're hearing and you can reply back

00:02:17,460 --> 00:02:23,160
and this is how it is working and like

00:02:20,400 --> 00:02:25,950
every single time faders and Falls are

00:02:23,160 --> 00:02:29,220
natural so we can we can get sick and

00:02:25,950 --> 00:02:31,710
then basically we need to recover from

00:02:29,220 --> 00:02:33,900
that right to continue our lives so this

00:02:31,710 --> 00:02:39,180
is how people are communicating and how

00:02:33,900 --> 00:02:43,500
the nature works but let's talk about

00:02:39,180 --> 00:02:47,790
the rust right now how rust does this

00:02:43,500 --> 00:02:50,970
error handling we just I think and it's

00:02:47,790 --> 00:02:53,280
purely subjective we don't do much when

00:02:50,970 --> 00:02:58,440
we say error handling we have some error

00:02:53,280 --> 00:03:00,030
typing but not purely error handling we

00:02:58,440 --> 00:03:03,080
write a lot of code to determine the

00:03:00,030 --> 00:03:07,590
control flow in case of errors and

00:03:03,080 --> 00:03:10,050
basically this is like if this error

00:03:07,590 --> 00:03:12,330
kind happens do that and this if this

00:03:10,050 --> 00:03:15,240
one happens do yet another thing like a

00:03:12,330 --> 00:03:18,630
B and what you see in here is basically

00:03:15,240 --> 00:03:23,460
that this is like from trade like how

00:03:18,630 --> 00:03:25,920
other errors trucks actually assembled

00:03:23,460 --> 00:03:28,710
and based on the error kinds but we are

00:03:25,920 --> 00:03:30,780
defining what are we going to do and we

00:03:28,710 --> 00:03:33,350
have some as you can see in the yellow

00:03:30,780 --> 00:03:36,210
parts that we don't have actually things

00:03:33,350 --> 00:03:38,070
defined or maybe we are ignoring these

00:03:36,210 --> 00:03:40,880
or maybe we don't want to handle these

00:03:38,070 --> 00:03:43,920
and this is just a one use case and

00:03:40,880 --> 00:03:46,110
inside you can see that you are

00:03:43,920 --> 00:03:48,300
basically propagating everything one by

00:03:46,110 --> 00:03:50,190
one and your handling and you need to

00:03:48,300 --> 00:03:52,620
write these things to actually recover

00:03:50,190 --> 00:03:54,780
from the her errors okay so this is

00:03:52,620 --> 00:03:56,370
basically in this example this is

00:03:54,780 --> 00:03:58,520
basically a response error coming from

00:03:56,370 --> 00:04:02,340
the radius client and it's basically

00:03:58,520 --> 00:04:04,560
propagated to your error type with let's

00:04:02,340 --> 00:04:07,470
say with the error chain create and this

00:04:04,560 --> 00:04:12,000
is basically how you are doing the error

00:04:07,470 --> 00:04:14,520
handling when we are doing this error

00:04:12,000 --> 00:04:17,250
handling let's say we are sacrificing

00:04:14,520 --> 00:04:19,650
the availability and we we also

00:04:17,250 --> 00:04:24,150
sacrifice the synchrony and we don't

00:04:19,650 --> 00:04:26,440
take take action on errors we always use

00:04:24,150 --> 00:04:30,610
try or question mark you know

00:04:26,440 --> 00:04:36,130
and these crates does long arrow chains

00:04:30,610 --> 00:04:39,340
and beaches also creating long recovery

00:04:36,130 --> 00:04:42,640
codes in my opinion and it's hard to

00:04:39,340 --> 00:04:45,580
maintain it when the project gets bigger

00:04:42,640 --> 00:04:48,840
it's hard to maintain I would say so

00:04:45,580 --> 00:04:51,490
this is the things that we need to fix

00:04:48,840 --> 00:04:54,160
actually this year so you can if you are

00:04:51,490 --> 00:04:56,500
actually inside the res community and if

00:04:54,160 --> 00:04:58,780
you are watching which kind of things

00:04:56,500 --> 00:05:04,270
are happening probably you so the talks

00:04:58,780 --> 00:05:06,580
about error handling so but today I'm

00:05:04,270 --> 00:05:08,020
going to talk about the nut error

00:05:06,580 --> 00:05:12,430
handling that we are going to talk about

00:05:08,020 --> 00:05:17,140
it's going to be more like how Ireland

00:05:12,430 --> 00:05:21,160
dance does so it's kind of different

00:05:17,140 --> 00:05:23,410
than the rust rust zone error handling

00:05:21,160 --> 00:05:26,170
code so let's enter to the dependable

00:05:23,410 --> 00:05:29,110
systems so obviously we need to talk

00:05:26,170 --> 00:05:31,540
about the dependable systems because if

00:05:29,110 --> 00:05:33,250
you are familiar with the electronics

00:05:31,540 --> 00:05:34,540
and stuff and embedded systems it

00:05:33,250 --> 00:05:37,920
depends on the systems probably you

00:05:34,540 --> 00:05:41,710
heard and we need to know first

00:05:37,920 --> 00:05:44,169
how errors and faults and failures are

00:05:41,710 --> 00:05:46,810
propagating so we need to talk about the

00:05:44,169 --> 00:05:49,120
dependable systems and this is like how

00:05:46,810 --> 00:05:52,840
it is inside the embedded system so we

00:05:49,120 --> 00:05:56,580
should also know about a dependable

00:05:52,840 --> 00:05:59,380
systems to reflect this to normal

00:05:56,580 --> 00:06:00,850
services that we are writing like for

00:05:59,380 --> 00:06:04,300
serving to the customers and stuff like

00:06:00,850 --> 00:06:07,360
that so let's come to the point first

00:06:04,300 --> 00:06:09,850
error handling is not fault recovery so

00:06:07,360 --> 00:06:11,950
we have this which kind of problem that

00:06:09,850 --> 00:06:15,640
everybody is actually thinking about and

00:06:11,950 --> 00:06:17,890
actually this is completely wrong and

00:06:15,640 --> 00:06:21,340
it's actually the first thing is

00:06:17,890 --> 00:06:24,669
actually told in the classes and also in

00:06:21,340 --> 00:06:29,530
the books of the dependable systems this

00:06:24,669 --> 00:06:32,380
is the thing and we need to know about

00:06:29,530 --> 00:06:34,600
the failures then if error handling is

00:06:32,380 --> 00:06:37,539
not a fault recovery we need to know how

00:06:34,600 --> 00:06:39,910
folds and how what is error and what is

00:06:37,539 --> 00:06:44,130
failure so this is how

00:06:39,910 --> 00:06:46,270
fault error failure is actually

00:06:44,130 --> 00:06:50,530
propagated inside the all software

00:06:46,270 --> 00:06:52,720
systems normally what we the software

00:06:50,530 --> 00:06:54,460
engineering part an upper layer of the

00:06:52,720 --> 00:06:56,620
abstraction you don't see it like this

00:06:54,460 --> 00:06:58,630
this is coming from the embedded systems

00:06:56,620 --> 00:07:01,000
let's take a look so in the lower level

00:06:58,630 --> 00:07:02,770
of the system you'll see a fault there's

00:07:01,000 --> 00:07:04,990
a fault happening it's dormant it's

00:07:02,770 --> 00:07:07,270
staying in there and then it transforms

00:07:04,990 --> 00:07:09,730
in transforms in theory an error when

00:07:07,270 --> 00:07:13,450
you detect an error the first thing that

00:07:09,730 --> 00:07:16,690
what error handling is that gathering

00:07:13,450 --> 00:07:19,300
information about error okay so that is

00:07:16,690 --> 00:07:20,890
error handling detecting and gathering

00:07:19,300 --> 00:07:23,170
information that is the older part of

00:07:20,890 --> 00:07:24,520
the error handling rest of the part is

00:07:23,170 --> 00:07:27,730
that what you're doing is a fault

00:07:24,520 --> 00:07:29,440
recovery so then you have a failure and

00:07:27,730 --> 00:07:31,570
then failure propagates to the upper

00:07:29,440 --> 00:07:34,360
layer as a fault and then fall through

00:07:31,570 --> 00:07:36,940
it does the recursive thing unto the

00:07:34,360 --> 00:07:37,960
layers are actually at the surface of

00:07:36,940 --> 00:07:39,370
the program okay

00:07:37,960 --> 00:07:42,850
when you are at the service of the

00:07:39,370 --> 00:07:45,280
program that failure the last failure

00:07:42,850 --> 00:07:47,590
that you see in that is basically become

00:07:45,280 --> 00:07:50,650
an hazard and then but you are what

00:07:47,590 --> 00:07:54,720
happens is that your program crashes so

00:07:50,650 --> 00:07:57,430
what is basically all these

00:07:54,720 --> 00:07:59,680
orchestration tools are there just

00:07:57,430 --> 00:08:02,760
because to prevent you from the hazards

00:07:59,680 --> 00:08:06,790
so the old Azar's are basically the

00:08:02,760 --> 00:08:08,950
happening from this kind of chaining so

00:08:06,790 --> 00:08:10,780
so we know right now what what is the

00:08:08,950 --> 00:08:14,590
fault was the failure and the how is

00:08:10,780 --> 00:08:17,530
propagated so what we need to do in the

00:08:14,590 --> 00:08:20,470
rust environment and maybe in the most

00:08:17,530 --> 00:08:22,810
of our software engineering but so we we

00:08:20,470 --> 00:08:26,050
have we need to separate the business

00:08:22,810 --> 00:08:28,300
logic and this error recovery when I say

00:08:26,050 --> 00:08:31,360
error recovery is false recovery my my

00:08:28,300 --> 00:08:35,469
words so if you need to clearly separate

00:08:31,360 --> 00:08:37,539
to these two the things unfortunately my

00:08:35,469 --> 00:08:40,150
subjective opinion we don't do this

00:08:37,539 --> 00:08:41,830
inside the rust so what we have is that

00:08:40,150 --> 00:08:44,290
every single time you have some kind of

00:08:41,830 --> 00:08:46,270
result and you need to actually wrap

00:08:44,290 --> 00:08:48,820
these results error kind and errors

00:08:46,270 --> 00:08:51,230
inside the results and the results are

00:08:48,820 --> 00:08:52,760
up inside the results again and then

00:08:51,230 --> 00:08:54,320
the armored up in the correct place or

00:08:52,760 --> 00:08:56,510
expect something right this is the

00:08:54,320 --> 00:08:58,340
problematic part of it and it's going to

00:08:56,510 --> 00:09:00,650
be programming problematic part of it

00:08:58,340 --> 00:09:02,450
because you are writing these things

00:09:00,650 --> 00:09:04,010
inside of the i/o operations or the

00:09:02,450 --> 00:09:06,590
things that has the side effects and

00:09:04,010 --> 00:09:10,100
these side effects is are actually

00:09:06,590 --> 00:09:12,770
having some problems you are writing

00:09:10,100 --> 00:09:15,620
this around the code that your business

00:09:12,770 --> 00:09:17,780
logic is where your business logic is so

00:09:15,620 --> 00:09:20,450
we need to first clearly separate the

00:09:17,780 --> 00:09:22,240
business logic and error recovery this

00:09:20,450 --> 00:09:26,690
is the first part that we need to do

00:09:22,240 --> 00:09:29,060
second yes so when everybody comes here

00:09:26,690 --> 00:09:31,400
this talk and these meet up and stuff

00:09:29,060 --> 00:09:33,890
like that probably and every single time

00:09:31,400 --> 00:09:36,070
we are talking about a synchrony there

00:09:33,890 --> 00:09:39,170
is a synchrony nowadays the systems are

00:09:36,070 --> 00:09:41,570
completely concurrent and they should be

00:09:39,170 --> 00:09:43,250
concurrent right so this is the part

00:09:41,570 --> 00:09:45,200
that should be also separate in a mind

00:09:43,250 --> 00:09:48,500
that how the design it the design of

00:09:45,200 --> 00:09:50,540
them so design of the synchrony should

00:09:48,500 --> 00:09:55,550
be in parallel to business logic but

00:09:50,540 --> 00:09:58,190
also be logical and be separate and now

00:09:55,550 --> 00:10:00,830
let's separate the error handling and

00:09:58,190 --> 00:10:03,670
fault recovery here error handling

00:10:00,830 --> 00:10:06,110
like I've said gathering information and

00:10:03,670 --> 00:10:07,520
are creating this information to the

00:10:06,110 --> 00:10:10,130
place that is going to do the fault

00:10:07,520 --> 00:10:14,690
recovery so we have this four stages

00:10:10,130 --> 00:10:18,170
right so right now that is what we have

00:10:14,690 --> 00:10:20,630
done for last seven months to create

00:10:18,170 --> 00:10:24,290
this project so the bastion is basically

00:10:20,630 --> 00:10:28,690
what it is to handle all these things

00:10:24,290 --> 00:10:32,360
for you to help you to actually create a

00:10:28,690 --> 00:10:34,720
synchronous ever had getting information

00:10:32,360 --> 00:10:36,860
about the errors kind of a runtime and

00:10:34,720 --> 00:10:38,780
separate your business logic from that

00:10:36,860 --> 00:10:43,150
and the fault recovery is built in

00:10:38,780 --> 00:10:46,700
inside so this is what of Bastion is so

00:10:43,150 --> 00:10:49,220
right now this is what I can say about

00:10:46,700 --> 00:10:51,500
the bastion and first thing that I

00:10:49,220 --> 00:10:53,270
really want to talk about is that it's

00:10:51,500 --> 00:10:55,040
not an actor framework everybody's

00:10:53,270 --> 00:10:59,440
asking you on the reddit it's not an

00:10:55,040 --> 00:11:02,540
actor framework no no damn No and

00:10:59,440 --> 00:11:05,220
basically what it is that how I can say

00:11:02,540 --> 00:11:07,860
that you heard airlin probably

00:11:05,220 --> 00:11:10,140
along is has some kind of lightweight

00:11:07,860 --> 00:11:11,400
processes right so we have replicating

00:11:10,140 --> 00:11:14,130
inside the back bastion is the

00:11:11,400 --> 00:11:17,640
lightweight processes and then on top of

00:11:14,130 --> 00:11:19,380
it we built this executor so the

00:11:17,640 --> 00:11:22,500
executor is basically taking this

00:11:19,380 --> 00:11:24,750
lightweight processes and applying their

00:11:22,500 --> 00:11:26,580
lifecycles at that level and the upper

00:11:24,750 --> 00:11:30,150
layers I am going to show you about the

00:11:26,580 --> 00:11:34,760
callbacks and how these kind of helpful

00:11:30,150 --> 00:11:38,460
things in the bastion will help you so

00:11:34,760 --> 00:11:39,930
everything is good right right I mean

00:11:38,460 --> 00:11:41,790
you want to have it all

00:11:39,930 --> 00:11:46,650
yes everybody wants to have it all I

00:11:41,790 --> 00:11:48,750
think and I'm saying use Bastion so how

00:11:46,650 --> 00:11:52,080
Bastian recovers errors through the

00:11:48,750 --> 00:11:54,000
supervisors so I don't know how many

00:11:52,080 --> 00:11:56,100
people heard the supervisors did you

00:11:54,000 --> 00:11:59,730
hear supervisors well what are

00:11:56,100 --> 00:12:01,950
supervisors cool to people okay so but

00:11:59,730 --> 00:12:02,550
no problem no problem I'm going to talk

00:12:01,950 --> 00:12:05,130
about this

00:12:02,550 --> 00:12:09,380
so supervisors are the things that that

00:12:05,130 --> 00:12:12,240
are actually income slating your actual

00:12:09,380 --> 00:12:16,190
how can I managing that actual code that

00:12:12,240 --> 00:12:19,800
you are writing with the thing with

00:12:16,190 --> 00:12:22,310
rules that you are defining so let's say

00:12:19,800 --> 00:12:25,830
you have a new heavy web server

00:12:22,310 --> 00:12:28,650
let's say tons of web servers opened up

00:12:25,830 --> 00:12:34,020
to ten ports and you have one supervisor

00:12:28,650 --> 00:12:36,660
that is actually saying that restart one

00:12:34,020 --> 00:12:40,500
by one so if one of the server's failed

00:12:36,660 --> 00:12:44,250
in that case that supervisor is the

00:12:40,500 --> 00:12:47,280
managing manager of these worker

00:12:44,250 --> 00:12:49,890
processes and what it does is that yeah

00:12:47,280 --> 00:12:53,520
I'm going to restart that one server

00:12:49,890 --> 00:12:57,140
that isn't important something and lead

00:12:53,520 --> 00:13:00,150
let's say and then it just restarts that

00:12:57,140 --> 00:13:02,760
burglar process this is for example one

00:13:00,150 --> 00:13:04,770
for run supervision strategy and there

00:13:02,760 --> 00:13:06,060
are some other supervision strategies

00:13:04,770 --> 00:13:07,560
that will help you that you can

00:13:06,060 --> 00:13:09,810
completely restart your application

00:13:07,560 --> 00:13:11,730
while your application is running when

00:13:09,810 --> 00:13:15,210
an error occurred and that causes your

00:13:11,730 --> 00:13:18,200
application will continue working there

00:13:15,210 --> 00:13:20,590
will be no problems so this very

00:13:18,200 --> 00:13:23,900
basic syntax of half the bastion is and

00:13:20,590 --> 00:13:26,450
as you can see that you just need to

00:13:23,900 --> 00:13:27,710
initialize give a supervisor and you

00:13:26,450 --> 00:13:29,390
don't need to give a supervisor to

00:13:27,710 --> 00:13:31,190
there's a built-in supervisor that will

00:13:29,390 --> 00:13:32,780
do all the things for you to you if you

00:13:31,190 --> 00:13:34,790
don't know you can learn what I mean

00:13:32,780 --> 00:13:38,450
what is the supervisors what are the

00:13:34,790 --> 00:13:40,370
things called children and what are you

00:13:38,450 --> 00:13:43,370
what are they used for

00:13:40,370 --> 00:13:47,960
we have written very extensive

00:13:43,370 --> 00:13:52,790
documentation about this and this part

00:13:47,960 --> 00:13:57,140
Shapira is prizes and the restarting

00:13:52,790 --> 00:13:59,840
strategies are helping you to contain

00:13:57,140 --> 00:14:04,910
the business logic also do the fault a

00:13:59,840 --> 00:14:10,250
fault recovery for you so one more thing

00:14:04,910 --> 00:14:12,440
that will help you do in case of faults

00:14:10,250 --> 00:14:15,050
for example this is a simple function

00:14:12,440 --> 00:14:16,970
that is called the SP but it's basically

00:14:15,050 --> 00:14:19,940
creating a supervisor so inside the

00:14:16,970 --> 00:14:21,590
supervisor you can have callbacks so

00:14:19,940 --> 00:14:24,110
through the callbacks you can define the

00:14:21,590 --> 00:14:31,310
life cycles of the lightweight processes

00:14:24,110 --> 00:14:35,180
so who used akka qu you know in akka

00:14:31,310 --> 00:14:38,270
there are trace start / stop and things

00:14:35,180 --> 00:14:41,330
like post op post start and old things

00:14:38,270 --> 00:14:44,840
like the octo life cycle right so it is

00:14:41,330 --> 00:14:47,750
in here exactly the same these callbacks

00:14:44,840 --> 00:14:50,420
are the life cycles but in for all the

00:14:47,750 --> 00:14:53,090
individual children but in addition to

00:14:50,420 --> 00:14:54,980
the archive order any actor frameworks

00:14:53,090 --> 00:14:58,570
architecture these life cycles are

00:14:54,980 --> 00:15:01,970
basically also be replicated across a

00:14:58,570 --> 00:15:04,720
span of children so we have a children

00:15:01,970 --> 00:15:07,370
group that can go up to thousand

00:15:04,720 --> 00:15:10,040
processes and you can still have these

00:15:07,370 --> 00:15:13,010
callbacks inside all these processes so

00:15:10,040 --> 00:15:15,830
you can gracefully shut down after the

00:15:13,010 --> 00:15:18,650
stop and gracefully connect back to do

00:15:15,830 --> 00:15:22,010
some other database and stuff like that

00:15:18,650 --> 00:15:26,180
back again and you can generate children

00:15:22,010 --> 00:15:28,940
you can give the strategy again and you

00:15:26,180 --> 00:15:31,850
can give the callbacks and you can

00:15:28,940 --> 00:15:34,360
create a supervision tree under it

00:15:31,850 --> 00:15:37,430
so basically you are creating a tree of

00:15:34,360 --> 00:15:40,910
things that can be managed themselves

00:15:37,430 --> 00:15:45,470
which has built-in fault tolerance and

00:15:40,910 --> 00:15:49,970
error handling boom that is what I can

00:15:45,470 --> 00:15:51,560
say so I mean some some esteban wrote

00:15:49,970 --> 00:15:55,100
this I will not do your I'm grabbing the

00:15:51,560 --> 00:15:57,230
production oh no no I mean and then

00:15:55,100 --> 00:16:00,290
pascai wrote something like yeah I added

00:15:57,230 --> 00:16:02,600
restart always yes systemd oh come on

00:16:00,290 --> 00:16:04,819
don't mean don't need to do that we are

00:16:02,600 --> 00:16:07,730
saying that dance on production with us

00:16:04,819 --> 00:16:10,160
so just restart I mean it is going to

00:16:07,730 --> 00:16:12,019
restart anyway the only the process that

00:16:10,160 --> 00:16:13,970
you need it is going to be restarted

00:16:12,019 --> 00:16:16,610
your database if your database

00:16:13,970 --> 00:16:18,139
connection didn't fail it is not going

00:16:16,610 --> 00:16:21,800
to restart the database connection you

00:16:18,139 --> 00:16:24,500
have inside the synchronous code so if

00:16:21,800 --> 00:16:29,149
there is no problem in here so you can

00:16:24,500 --> 00:16:31,160
just use this and basically it so what

00:16:29,149 --> 00:16:34,399
Bastian brings is this super version

00:16:31,160 --> 00:16:37,550
hierarchy that I told you and this

00:16:34,399 --> 00:16:38,839
complete system of it and this natural a

00:16:37,550 --> 00:16:41,389
synchronous communication and I will

00:16:38,839 --> 00:16:44,420
come to this natural part that will also

00:16:41,389 --> 00:16:47,449
might hurt the minds like because it's

00:16:44,420 --> 00:16:50,959
like subjective opinion again so and it

00:16:47,449 --> 00:16:53,750
comes with the resiliency so this this

00:16:50,959 --> 00:16:57,819
is like the part that is the faltering

00:16:53,750 --> 00:17:00,410
spring so the it should be resilient and

00:16:57,819 --> 00:17:01,459
they might your workers or the things

00:17:00,410 --> 00:17:03,560
that is their working in the background

00:17:01,459 --> 00:17:05,750
should can fail but it should be it

00:17:03,560 --> 00:17:07,339
should recover that so this is the one

00:17:05,750 --> 00:17:09,140
of the things that I think that is

00:17:07,339 --> 00:17:11,419
important because everything is failing

00:17:09,140 --> 00:17:13,610
and we don't need to write some extra

00:17:11,419 --> 00:17:17,839
things if we can handle things by

00:17:13,610 --> 00:17:19,669
ourselves okay and the thing that I show

00:17:17,839 --> 00:17:20,929
you with this cross of things that a

00:17:19,669 --> 00:17:22,520
synchronous called business logic the

00:17:20,929 --> 00:17:24,110
separation of concerns you already know

00:17:22,520 --> 00:17:24,799
that so we need to separate these

00:17:24,110 --> 00:17:27,049
concerns

00:17:24,799 --> 00:17:30,080
so this bastion allows you to separate

00:17:27,049 --> 00:17:31,580
all these concerns and it eliminates the

00:17:30,080 --> 00:17:33,049
need of the wrapping your result type so

00:17:31,580 --> 00:17:35,210
everybody is right now this error

00:17:33,049 --> 00:17:36,799
handling talks are happening in the Ross

00:17:35,210 --> 00:17:39,590
community and then everybody is talking

00:17:36,799 --> 00:17:40,880
about wrapping the result types and we

00:17:39,590 --> 00:17:42,770
need to eliminate this and this actually

00:17:40,880 --> 00:17:45,380
animal is illuminators in a sense

00:17:42,770 --> 00:17:47,980
because you can just unwrap in that

00:17:45,380 --> 00:17:51,799
place if you have enough cold enough

00:17:47,980 --> 00:17:54,559
data to unwrap the information to unwrap

00:17:51,799 --> 00:17:56,299
so you don't need to do this you don't

00:17:54,559 --> 00:17:57,650
need to write the chains and stuff like

00:17:56,299 --> 00:18:00,559
that if you don't want to alter the

00:17:57,650 --> 00:18:03,760
error that is coming up to you and you

00:18:00,559 --> 00:18:06,230
don't need to carry these tiny Glaros

00:18:03,760 --> 00:18:08,780
this you know if you if you're in the

00:18:06,230 --> 00:18:13,159
rascal media quite at the boil this is a

00:18:08,780 --> 00:18:16,520
pain in the PETA moment of everything

00:18:13,159 --> 00:18:18,530
eliminate the need of carrying these so

00:18:16,520 --> 00:18:20,840
it's like dynamic dispatch and all these

00:18:18,530 --> 00:18:22,220
things so if there are errors that can

00:18:20,840 --> 00:18:24,110
be shared between the threads and sand

00:18:22,220 --> 00:18:27,710
between among the threads and stuff like

00:18:24,110 --> 00:18:31,610
that so this is the problematic part

00:18:27,710 --> 00:18:34,970
that we are having right now and I think

00:18:31,610 --> 00:18:37,429
the this also allows us to fix this

00:18:34,970 --> 00:18:38,600
thing and as you can see this is

00:18:37,429 --> 00:18:40,940
completely different approach to the

00:18:38,600 --> 00:18:42,710
error handling because I we didn't

00:18:40,940 --> 00:18:44,960
actually use anything like the error

00:18:42,710 --> 00:18:49,909
chain kray-kray - we don't use anything

00:18:44,960 --> 00:18:50,390
- that is actually doing these kind of

00:18:49,909 --> 00:18:53,240
things

00:18:50,390 --> 00:18:56,540
you just write expect and if it fails

00:18:53,240 --> 00:18:59,740
the the information that you are

00:18:56,540 --> 00:19:05,899
expecting is it going to be inside so

00:18:59,740 --> 00:19:11,030
and we are working right now to improve

00:19:05,899 --> 00:19:13,190
the information gathering part and and

00:19:11,030 --> 00:19:16,640
we also think that the writing resilient

00:19:13,190 --> 00:19:19,669
systems shouldn't be hard so that is the

00:19:16,640 --> 00:19:22,250
thing and let's talk a little bit about

00:19:19,669 --> 00:19:25,850
the supervised supervision here are key

00:19:22,250 --> 00:19:31,309
so we have a system at the top of

00:19:25,850 --> 00:19:36,080
everything this is a process that is

00:19:31,309 --> 00:19:39,470
actually running and let's let's call it

00:19:36,080 --> 00:19:41,330
process and it's not a process in the

00:19:39,470 --> 00:19:44,919
STD or something like that

00:19:41,330 --> 00:19:47,330
it's just a process it's like the

00:19:44,919 --> 00:19:49,280
replication of status quo routines like

00:19:47,330 --> 00:19:54,559
that we have this in our second weight

00:19:49,280 --> 00:19:57,610
and we have two separate things inside

00:19:54,559 --> 00:20:00,830
the system at the supervision hierarchy

00:19:57,610 --> 00:20:03,559
left side is a user so what you are

00:20:00,830 --> 00:20:05,870
creating what using the Bastion is that

00:20:03,559 --> 00:20:10,010
the left side is purple area that your

00:20:05,870 --> 00:20:11,600
is you and right side is like when you

00:20:10,010 --> 00:20:15,169
include the library or something like

00:20:11,600 --> 00:20:17,480
the system is going to do something

00:20:15,169 --> 00:20:18,559
about it so in the next stages of the

00:20:17,480 --> 00:20:20,330
development we are going to write

00:20:18,559 --> 00:20:21,860
something very close to the ln2

00:20:20,330 --> 00:20:25,130
observer that you can observe the

00:20:21,860 --> 00:20:28,190
processes so the observer will be placed

00:20:25,130 --> 00:20:31,399
under the system so it's basically the

00:20:28,190 --> 00:20:35,120
system's that user shouldn't see and

00:20:31,399 --> 00:20:38,360
also makes things continue to operate is

00:20:35,120 --> 00:20:40,220
falling under the system and all the

00:20:38,360 --> 00:20:43,460
user code is falling under the left-hand

00:20:40,220 --> 00:20:46,340
side so this is how it is and we have

00:20:43,460 --> 00:20:49,520
order of signalization

00:20:46,340 --> 00:20:52,880
so every signal that is randy's a signal

00:20:49,520 --> 00:20:54,889
like the shot no messages and broadcasts

00:20:52,880 --> 00:20:55,700
so the batching also broadcast to the

00:20:54,889 --> 00:20:59,510
whole tree

00:20:55,700 --> 00:21:01,970
so if you give the three node it is

00:20:59,510 --> 00:21:04,040
going to broadcast all the messages to

00:21:01,970 --> 00:21:05,600
all the children under that children all

00:21:04,040 --> 00:21:07,250
the supervisors all the children

00:21:05,600 --> 00:21:10,210
supervisors and stuff like that under

00:21:07,250 --> 00:21:14,149
that you can have a full communication

00:21:10,210 --> 00:21:17,510
but there there's the order of shutdown

00:21:14,149 --> 00:21:19,580
and broadcast goes over there goes over

00:21:17,510 --> 00:21:21,860
the system so actually system is kind of

00:21:19,580 --> 00:21:25,399
the manager of everything and then

00:21:21,860 --> 00:21:28,130
basically does most of the lifecycle

00:21:25,399 --> 00:21:29,840
stuff and you care you are writing the

00:21:28,130 --> 00:21:31,880
callbacks and stuff like that but life

00:21:29,840 --> 00:21:34,010
cycle is managed by the system you are

00:21:31,880 --> 00:21:38,590
we are just parsing these things using

00:21:34,010 --> 00:21:42,200
these lifecycle methods as a dynamic

00:21:38,590 --> 00:21:44,720
functions and then we are just executing

00:21:42,200 --> 00:21:46,880
them in a correct place the callbacks

00:21:44,720 --> 00:21:52,159
are how projects are executed is exactly

00:21:46,880 --> 00:21:54,669
like this so let's come to the unnatural

00:21:52,159 --> 00:21:59,690
a synchrony the natural and unnatural

00:21:54,669 --> 00:22:02,090
synchrony difference so we have a

00:21:59,690 --> 00:22:03,980
problem in the rust we shouldn't need

00:22:02,090 --> 00:22:05,309
the same return type for all features

00:22:03,980 --> 00:22:07,259
for example if you are going to

00:22:05,309 --> 00:22:09,539
we call it race and I think that it is

00:22:07,259 --> 00:22:13,620
wrong but it's not racing in a sense

00:22:09,539 --> 00:22:16,139
it's just come yeah it is racing but it

00:22:13,620 --> 00:22:19,769
is like working in a different way I

00:22:16,139 --> 00:22:22,679
would say and we shouldn't need the same

00:22:19,769 --> 00:22:24,450
intern time for all the features and we

00:22:22,679 --> 00:22:26,100
shouldn't need to fuse this at all to

00:22:24,450 --> 00:22:28,110
actually say that the signal back to the

00:22:26,100 --> 00:22:29,970
completion so we are all day signaling

00:22:28,110 --> 00:22:32,279
back to the completion and hey are you

00:22:29,970 --> 00:22:34,499
done yes I am done because I am none

00:22:32,279 --> 00:22:38,309
this is not how things should be working

00:22:34,499 --> 00:22:42,450
with fuse and it shouldn't be like that

00:22:38,309 --> 00:22:44,220
and to be honest streams API should have

00:22:42,450 --> 00:22:46,409
handed out elements and we should have

00:22:44,220 --> 00:22:48,629
asked for the elements so we are pushing

00:22:46,409 --> 00:22:50,940
down the demand so this is how we are

00:22:48,629 --> 00:22:54,029
doing like pushing down the demand when

00:22:50,940 --> 00:22:55,980
we initialize something in rust and

00:22:54,029 --> 00:22:57,899
basically in streams and the futures can

00:22:55,980 --> 00:23:01,049
nowadays we are pushing down the demand

00:22:57,899 --> 00:23:04,679
from up to down but it's how how it

00:23:01,049 --> 00:23:08,369
shouldn't be and and obviously this

00:23:04,679 --> 00:23:12,419
makes the back pressure if you know the

00:23:08,369 --> 00:23:15,299
burden is not natural so it is like very

00:23:12,419 --> 00:23:19,679
unnatural and there are problems like

00:23:15,299 --> 00:23:23,549
this that is actually from my point

00:23:19,679 --> 00:23:25,879
makes life a little bit harder so this

00:23:23,549 --> 00:23:30,720
is just a stale copy of the futures

00:23:25,879 --> 00:23:33,899
documentation and I think that this is a

00:23:30,720 --> 00:23:35,070
kind of wrong and it shouldn't be like

00:23:33,899 --> 00:23:38,100
that because in most of the other

00:23:35,070 --> 00:23:40,080
languages not like that so we need to

00:23:38,100 --> 00:23:44,100
learn about a lot of things from the

00:23:40,080 --> 00:23:45,529
other languages maybe and let's come to

00:23:44,100 --> 00:23:48,269
the naturalist synchrony yeah this girl

00:23:45,529 --> 00:23:50,490
call it so much indented my friend told

00:23:48,269 --> 00:23:53,480
me that please I mean that this thing

00:23:50,490 --> 00:23:55,529
and I'm too lazy to do that sorry and

00:23:53,480 --> 00:23:57,860
but I need to show a couple of things

00:23:55,529 --> 00:23:59,940
here so this is just a worker

00:23:57,860 --> 00:24:02,549
instantiation we can put everything

00:23:59,940 --> 00:24:06,720
inside for functions and you don't need

00:24:02,549 --> 00:24:10,559
to do these things inside and it can be

00:24:06,720 --> 00:24:13,049
flat not nested like this and it's

00:24:10,559 --> 00:24:16,350
basically we create a redundancy so I

00:24:13,049 --> 00:24:19,030
said that the we replicate the children

00:24:16,350 --> 00:24:21,010
and then we create a redundancy

00:24:19,030 --> 00:24:23,620
so what you are passing inside the

00:24:21,010 --> 00:24:26,860
closure is going to be redundant and it

00:24:23,620 --> 00:24:31,470
will all the rules of the work submitted

00:24:26,860 --> 00:24:34,420
workers are going to be replicated so

00:24:31,470 --> 00:24:36,460
what does that mean so it's like if you

00:24:34,420 --> 00:24:38,980
have some callbacks for and if you

00:24:36,460 --> 00:24:41,740
execute a bit exact function if you

00:24:38,980 --> 00:24:43,050
define a callback inside and I'm sorry

00:24:41,740 --> 00:24:45,160
with it

00:24:43,050 --> 00:24:47,290
callbacks you define a callback since

00:24:45,160 --> 00:24:49,420
I'd had all the redundant children or

00:24:47,290 --> 00:24:53,970
children groups are going to have the

00:24:49,420 --> 00:24:57,760
same thing same kind of callbacks so

00:24:53,970 --> 00:25:01,060
basically we have here we are

00:24:57,760 --> 00:25:04,990
instantiating 10 workers that can that

00:25:01,060 --> 00:25:07,660
they can take TCP streams from a simple

00:25:04,990 --> 00:25:10,390
TCP server compress down with the snappy

00:25:07,660 --> 00:25:13,120
are synchronously there is no for loop

00:25:10,390 --> 00:25:15,940
inside there is nothing inside this loop

00:25:13,120 --> 00:25:18,130
is just for the message polling from the

00:25:15,940 --> 00:25:20,530
mailbox this message back a message

00:25:18,130 --> 00:25:22,990
macro is basically pulling the message

00:25:20,530 --> 00:25:24,760
from them a mailbox and in the outer

00:25:22,990 --> 00:25:27,730
systems you might have heard that

00:25:24,760 --> 00:25:29,650
there's a mailbox this kind of a mailbox

00:25:27,730 --> 00:25:31,660
and we are going to I think have a

00:25:29,650 --> 00:25:34,920
different macro that will help to put a

00:25:31,660 --> 00:25:38,950
loop inside of in it and then basically

00:25:34,920 --> 00:25:43,290
have all these TCP streams compressed

00:25:38,950 --> 00:25:46,060
and right back are synchronously and

00:25:43,290 --> 00:25:48,010
that is all and if you don't know the

00:25:46,060 --> 00:25:49,540
message type if you don't expect

00:25:48,010 --> 00:25:51,310
something you just right yeah I don't

00:25:49,540 --> 00:25:53,980
expect something or I want to pee

00:25:51,310 --> 00:25:57,520
fail immediately in here or just write

00:25:53,980 --> 00:25:59,500
unreachable so it's like and then then

00:25:57,520 --> 00:26:02,260
there's a panic occurs in any place do

00:25:59,500 --> 00:26:03,610
you see my arm reps I'm too lazy so for

00:26:02,260 --> 00:26:05,860
every single day is a person in this

00:26:03,610 --> 00:26:11,050
room this is chipper boot I just right

00:26:05,860 --> 00:26:14,110
arm wrap I don't care this is going to

00:26:11,050 --> 00:26:15,790
restart this is going to restart so when

00:26:14,110 --> 00:26:18,220
you unwrap and there's an error over

00:26:15,790 --> 00:26:19,780
there it's going to restart it's not

00:26:18,220 --> 00:26:21,820
going to be like oh yeah you know I

00:26:19,780 --> 00:26:24,310
crashed there's a panic over that no

00:26:21,820 --> 00:26:26,350
it's going to restart for every single

00:26:24,310 --> 00:26:30,970
day if it's it can't compress the thing

00:26:26,350 --> 00:26:33,160
if it can't write back to the port is

00:26:30,970 --> 00:26:36,190
going to unwrap

00:26:33,160 --> 00:26:38,140
that's how it is so this is how the

00:26:36,190 --> 00:26:40,240
nature of the synchronous should be but

00:26:38,140 --> 00:26:43,330
the current implementations I will say

00:26:40,240 --> 00:26:45,940
one more thing to visualize how things

00:26:43,330 --> 00:26:48,310
are working stream porn X direction of

00:26:45,940 --> 00:26:50,770
demand is upside down then stream app

00:26:48,310 --> 00:26:57,010
then we mapped this thing then returned

00:26:50,770 --> 00:27:00,310
and is exhausted so why should I return

00:26:57,010 --> 00:27:02,560
none when it is exhausted should I say I

00:27:00,310 --> 00:27:05,530
shouldn't I say something like yeah I am

00:27:02,560 --> 00:27:06,970
done and just cancel the upstream this

00:27:05,530 --> 00:27:11,560
is how it should be right these are the

00:27:06,970 --> 00:27:14,470
nature is like if there's a stream of

00:27:11,560 --> 00:27:16,300
things that is a stream of water that is

00:27:14,470 --> 00:27:21,340
coming down from the mountains let's say

00:27:16,300 --> 00:27:23,440
if we cut this water from there isn't

00:27:21,340 --> 00:27:26,260
going to come late over there so this

00:27:23,440 --> 00:27:28,960
how it should be come later with the

00:27:26,260 --> 00:27:32,580
bottom side of the mountain for example

00:27:28,960 --> 00:27:35,590
so this is how it should be this is a

00:27:32,580 --> 00:27:38,020
problem in here that we don't ask for

00:27:35,590 --> 00:27:40,740
the demand we just put it demand

00:27:38,020 --> 00:27:43,210
actually drives us in these

00:27:40,740 --> 00:27:45,580
implementations or outside right now in

00:27:43,210 --> 00:27:47,110
the rest so what we are suggesting and

00:27:45,580 --> 00:27:49,980
what we are doing in the bastion and

00:27:47,110 --> 00:27:53,170
what we are currently working on is this

00:27:49,980 --> 00:27:55,540
we have source sink that might remind

00:27:53,170 --> 00:28:00,040
you the reaction streams exactly that is

00:27:55,540 --> 00:28:02,710
reactive streams and the sink is going

00:28:00,040 --> 00:28:04,720
to demand the line back so a sink is

00:28:02,710 --> 00:28:09,160
going to ask for 10 elements if there

00:28:04,720 --> 00:28:11,470
are 10 element capability to process and

00:28:09,160 --> 00:28:15,400
then transform is going to transform

00:28:11,470 --> 00:28:17,350
these and as if there are things inside

00:28:15,400 --> 00:28:19,840
and then ask back if there are no

00:28:17,350 --> 00:28:24,010
nothing to transform to the map and the

00:28:19,840 --> 00:28:26,080
map back to the source and basically you

00:28:24,010 --> 00:28:29,530
don't need to continuously pour from the

00:28:26,080 --> 00:28:31,780
source and/or the push any single push

00:28:29,530 --> 00:28:34,600
is going to make you make your system

00:28:31,780 --> 00:28:36,820
harder to cope with the in memory

00:28:34,600 --> 00:28:38,350
problems so this is how the stream

00:28:36,820 --> 00:28:42,400
processing and the whole that future

00:28:38,350 --> 00:28:45,310
person should work and you can see these

00:28:42,400 --> 00:28:46,429
kind of example inside the bastion the

00:28:45,310 --> 00:28:48,350
example

00:28:46,429 --> 00:28:49,970
we're example is exactly like that and

00:28:48,350 --> 00:28:51,350
there's also parallel computation

00:28:49,970 --> 00:28:54,710
example this is also doing the same

00:28:51,350 --> 00:28:56,929
thing basically and these are very how

00:28:54,710 --> 00:28:59,480
can I say that very basic you can do

00:28:56,929 --> 00:29:01,940
much more things like many more things

00:28:59,480 --> 00:29:04,129
that I mean meanwhile I'm writing the

00:29:01,940 --> 00:29:05,269
examples I'm also too lazy I was a yeah

00:29:04,129 --> 00:29:08,899
let's write something that's actually

00:29:05,269 --> 00:29:11,509
quite a bit easy and I wrote that like

00:29:08,899 --> 00:29:16,330
that but you can do some magical things

00:29:11,509 --> 00:29:20,110
with this improving over the existing

00:29:16,330 --> 00:29:22,549
examples we have also showcase a

00:29:20,110 --> 00:29:24,830
repository that we can talk about we

00:29:22,549 --> 00:29:28,610
will talk about so when it comes to the

00:29:24,830 --> 00:29:30,559
interoperability so this is a runtime so

00:29:28,610 --> 00:29:32,509
it all these are synchronous operations

00:29:30,559 --> 00:29:36,129
are basically running on executors like

00:29:32,509 --> 00:29:41,029
icing a CD or the talkee itself ok so

00:29:36,129 --> 00:29:43,549
how what we are basically what we can do

00:29:41,029 --> 00:29:45,350
what we are doing in the Showcase

00:29:43,549 --> 00:29:48,110
reporter there is only one example what

00:29:45,350 --> 00:29:53,119
we can add more so you can see a usage

00:29:48,110 --> 00:29:55,490
of Bastion with a sink a CD so for

00:29:53,119 --> 00:29:58,159
example in here we are writing to a log

00:29:55,490 --> 00:30:00,679
file in a very simple way that every

00:29:58,159 --> 00:30:02,299
single request and we are just unloading

00:30:00,679 --> 00:30:04,429
all the i/o operations without a single

00:30:02,299 --> 00:30:05,539
city because we are not made so the

00:30:04,429 --> 00:30:07,909
bastion is not made for the i/o

00:30:05,539 --> 00:30:09,559
operations I didn't write a blocking

00:30:07,909 --> 00:30:11,210
pool or something like that and I

00:30:09,559 --> 00:30:13,340
actually step on is actually very good

00:30:11,210 --> 00:30:14,929
at that he just wrote it and everybody

00:30:13,340 --> 00:30:15,350
is using it what should i why should I

00:30:14,929 --> 00:30:17,210
write it

00:30:15,350 --> 00:30:19,070
I just want to need to write the

00:30:17,210 --> 00:30:21,169
management part so this is the

00:30:19,070 --> 00:30:23,419
management part on top of the thing that

00:30:21,169 --> 00:30:26,570
is actually doing the i/o operation and

00:30:23,419 --> 00:30:28,999
then we are running side by side but I

00:30:26,570 --> 00:30:31,610
think I see these executors and Bastion

00:30:28,999 --> 00:30:38,899
they are running perfect there is no

00:30:31,610 --> 00:30:41,749
problem and all basic examples examples

00:30:38,899 --> 00:30:43,789
inside are like I said out there all

00:30:41,749 --> 00:30:46,749
basic but you can see these

00:30:43,789 --> 00:30:50,600
interoperation examples inside the

00:30:46,749 --> 00:30:52,480
Showcase repository and this usage and

00:30:50,600 --> 00:30:57,649
the management are complete up to you

00:30:52,480 --> 00:30:59,779
so I'm finalizing it a little bit and if

00:30:57,649 --> 00:31:00,020
you want to how how if you are asking

00:30:59,779 --> 00:31:02,360
for

00:31:00,020 --> 00:31:05,810
you can learn about these and getting

00:31:02,360 --> 00:31:08,570
mold check out our code you can check

00:31:05,810 --> 00:31:11,060
joint or discord server and we have a

00:31:08,570 --> 00:31:12,920
discourse server you can join as for

00:31:11,060 --> 00:31:14,870
questions there are many things that

00:31:12,920 --> 00:31:17,660
needs to be worked on but we are very

00:31:14,870 --> 00:31:21,830
less of people and we have a very good

00:31:17,660 --> 00:31:26,060
aim to do this thing in a very how can I

00:31:21,830 --> 00:31:29,810
say concrete way of doing it and we are

00:31:26,060 --> 00:31:32,780
really willing to hurt here from the

00:31:29,810 --> 00:31:36,410
people that are using this and check out

00:31:32,780 --> 00:31:37,970
our examples check out or showcase repo

00:31:36,410 --> 00:31:42,410
if you are interested in what other

00:31:37,970 --> 00:31:46,190
things are what other integrations are

00:31:42,410 --> 00:31:49,700
and one more thing that I want to add

00:31:46,190 --> 00:31:55,400
this project I started in June 10 I

00:31:49,700 --> 00:32:00,320
think and I report this to digitalocean

00:31:55,400 --> 00:32:05,090
and and basically what happened is that

00:32:00,320 --> 00:32:07,310
this thing was a discord server it sorry

00:32:05,090 --> 00:32:10,550
it was a discord boat and it was

00:32:07,310 --> 00:32:12,530
actually serving to the 250 people which

00:32:10,550 --> 00:32:14,360
are all young teenagers that they are

00:32:12,530 --> 00:32:16,400
continuously removing their messages and

00:32:14,360 --> 00:32:17,510
this is a test case and we were just

00:32:16,400 --> 00:32:19,730
highlighting them because they are just

00:32:17,510 --> 00:32:21,020
removing their messages and not sending

00:32:19,730 --> 00:32:23,450
back and they were I think sometimes

00:32:21,020 --> 00:32:26,620
very bad things so we just deploy

00:32:23,450 --> 00:32:32,570
testing as it is running since then

00:32:26,620 --> 00:32:34,970
until today and in there and there were

00:32:32,570 --> 00:32:38,360
a lot of panics were happening in there

00:32:34,970 --> 00:32:41,320
but it was Ronnie no single crash and I

00:32:38,360 --> 00:32:44,180
didn't actually I just wrote no hop and

00:32:41,320 --> 00:32:47,120
project name is running under the in it

00:32:44,180 --> 00:32:49,790
and it's just working and I didn't write

00:32:47,120 --> 00:32:52,040
anything like the systemd stuff and this

00:32:49,790 --> 00:32:55,750
is basically how it is thank you for

00:32:52,040 --> 00:33:05,069
listening me yeah

00:32:55,750 --> 00:33:05,069
[Applause]

00:33:05,210 --> 00:33:20,730
any questions yeah yes the dermis is

00:33:16,080 --> 00:33:25,470
pressing meeting huh he is asking for

00:33:20,730 --> 00:33:29,520
the mess are there any messages passing

00:33:25,470 --> 00:33:31,350
between the workers right yeah and yeah

00:33:29,520 --> 00:33:34,910
there are message passing between the

00:33:31,350 --> 00:33:39,150
workers and we are using channels and

00:33:34,910 --> 00:33:42,660
these workers can also communicate with

00:33:39,150 --> 00:33:45,680
each other we can push messages

00:33:42,660 --> 00:33:48,990
broadcast many messages to all workers

00:33:45,680 --> 00:33:52,550
under a specific node in the supervision

00:33:48,990 --> 00:34:03,120
hierarchy that I showed just so sure

00:33:52,550 --> 00:34:04,770
basically yeah yeah I mean in the this

00:34:03,120 --> 00:34:07,500
is a good part so this took a lot of

00:34:04,770 --> 00:34:11,159
time to make it like that so we had put

00:34:07,500 --> 00:34:12,870
a small aesthetics in github in

00:34:11,159 --> 00:34:14,909
distributed part and everybody else

00:34:12,870 --> 00:34:16,250
asking this is not distributed right now

00:34:14,909 --> 00:34:20,010
we are working on something called

00:34:16,250 --> 00:34:24,240
artery artillery that is actually going

00:34:20,010 --> 00:34:27,899
to do this distributed part so you know

00:34:24,240 --> 00:34:29,820
maybe the Byzantine generals I imagine

00:34:27,899 --> 00:34:31,800
the Byzantine generals can use the

00:34:29,820 --> 00:34:33,750
artillery toast message pass so it is

00:34:31,800 --> 00:34:36,149
going to use we are going to write all

00:34:33,750 --> 00:34:38,580
these distributed features inside of is

00:34:36,149 --> 00:34:41,159
yet another package that is going to do

00:34:38,580 --> 00:34:44,220
this for Bastion so is right now is not

00:34:41,159 --> 00:34:46,530
to doing that but just Aslam and RG our

00:34:44,220 --> 00:34:49,970
PC client over there that is going to

00:34:46,530 --> 00:34:49,970
work I think

00:34:50,620 --> 00:35:36,130
yeah yeah that is true you might say

00:35:32,260 --> 00:35:38,590
that there will be information lost but

00:35:36,130 --> 00:35:40,480
all the errors are causing from a point

00:35:38,590 --> 00:35:43,300
that is actually your what you are using

00:35:40,480 --> 00:35:45,370
from the create ecosystem or from the

00:35:43,300 --> 00:35:49,420
rust itself so all these features are

00:35:45,370 --> 00:35:52,210
all these flood functions and all these

00:35:49,420 --> 00:35:53,980
elements are basically containing some

00:35:52,210 --> 00:35:55,930
kind of information about it if you want

00:35:53,980 --> 00:35:58,110
to add more like in the first slide

00:35:55,930 --> 00:36:11,110
let's go to go back to this again

00:35:58,110 --> 00:36:13,630
so here oh yeah so like in the my create

00:36:11,110 --> 00:36:16,510
DB error for example you can add more

00:36:13,630 --> 00:36:17,770
things inside so it's up to you I mean

00:36:16,510 --> 00:36:21,960
if you want to add more things inside

00:36:17,770 --> 00:36:25,840
your error handling code is okay

00:36:21,960 --> 00:36:27,370
but I don't think that you need more

00:36:25,840 --> 00:36:28,600
because all the panic information and

00:36:27,370 --> 00:36:30,760
all the panic hooks that is actually

00:36:28,600 --> 00:36:32,890
triggering is actually the venom panic

00:36:30,760 --> 00:36:34,990
hook triggers is already gathering

00:36:32,890 --> 00:36:39,010
information about it actually at least

00:36:34,990 --> 00:36:40,810
in the normal city environment it's like

00:36:39,010 --> 00:36:44,130
that in the quarry environment is just

00:36:40,810 --> 00:36:48,130
doing the irq calls and then actually

00:36:44,130 --> 00:36:51,100
trapping and this is not for the

00:36:48,130 --> 00:36:52,660
embedded to be honest so if it is going

00:36:51,100 --> 00:36:55,090
to be embedded somebody you need to help

00:36:52,660 --> 00:37:02,550
me to make it no ACD and I'm okay with

00:36:55,090 --> 00:37:02,550
that yeah I hope I answered the question

00:37:16,180 --> 00:37:27,049
cool everything I want to rewrite

00:37:24,349 --> 00:37:29,690
everything in Bastian I really want to

00:37:27,049 --> 00:37:32,359
do that but the most thing most things

00:37:29,690 --> 00:37:35,000
if you are if you're if you heard things

00:37:32,359 --> 00:37:36,470
about the air long and you probably all

00:37:35,000 --> 00:37:38,150
the Alexa developers out there actually

00:37:36,470 --> 00:37:40,220
writing the first game servers and stuff

00:37:38,150 --> 00:37:41,750
like that you can somebody wants to get

00:37:40,220 --> 00:37:44,000
into the action they can write the game

00:37:41,750 --> 00:37:49,190
service this camera one of our

00:37:44,000 --> 00:37:50,750
developers in the Bastion site one two

00:37:49,190 --> 00:37:52,549
core developers are actually using

00:37:50,750 --> 00:37:54,829
Bastion to write a streaming engine and

00:37:52,549 --> 00:37:56,780
we are also writing some kind of things

00:37:54,829 --> 00:37:58,819
like that to actually use this what I've

00:37:56,780 --> 00:38:03,530
told you the nature or synchrony stuff

00:37:58,819 --> 00:38:05,450
so basically we are doing these kind of

00:38:03,530 --> 00:38:09,069
things and that for data processing it's

00:38:05,450 --> 00:38:13,599
going to be cool I think and there are

00:38:09,069 --> 00:38:16,670
plenty of things that can be done and

00:38:13,599 --> 00:38:18,650
it's up to your imagination but I think

00:38:16,670 --> 00:38:21,910
if you want to have a ground-up stuff

00:38:18,650 --> 00:38:25,220
you can write a completely asynchronous

00:38:21,910 --> 00:38:28,190
web server that is opening a mapping to

00:38:25,220 --> 00:38:30,109
the old port like the island does so I

00:38:28,190 --> 00:38:31,460
mean it is going to really cool that is

00:38:30,109 --> 00:38:33,440
showing that how many things that you

00:38:31,460 --> 00:38:35,089
can spawn and actually the all the

00:38:33,440 --> 00:38:37,970
scheduler inside of this thing is

00:38:35,089 --> 00:38:40,599
actually the Ralph replication of the

00:38:37,970 --> 00:38:44,059
islands scheduler so it is using this

00:38:40,599 --> 00:38:46,579
kind of high-level things that the

00:38:44,059 --> 00:38:48,349
airline has done so it's going to be

00:38:46,579 --> 00:38:49,069
nice to see something like this for my

00:38:48,349 --> 00:38:53,529
point of view

00:38:49,069 --> 00:38:53,529
buddy is up to you know

00:38:54,960 --> 00:39:00,809
[Applause]

00:39:02,400 --> 00:39:09,599

YouTube URL: https://www.youtube.com/watch?v=YaOM2rDO-gs


