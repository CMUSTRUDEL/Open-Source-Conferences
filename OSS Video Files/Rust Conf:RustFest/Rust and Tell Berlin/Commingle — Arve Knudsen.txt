Title: Commingle â€” Arve Knudsen
Publication date: 2020-02-05
Playlist: Rust and Tell Berlin
Description: 
	From the Rust Berlin's January "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)

Arve Knudsen: https://twitter.com/hochgenuss

Hosted at Prisma: https://www.prisma.io/

ðŸŽ¥ Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:03,830 --> 00:00:11,400
well hello Marva I work for Griffin the

00:00:08,490 --> 00:00:13,530
labs we make the graph on a

00:00:11,400 --> 00:00:17,760
visualization system in case anyone over

00:00:13,530 --> 00:00:20,670
you are familiar with that but today I'm

00:00:17,760 --> 00:00:23,789
here to talk about a project I've been

00:00:20,670 --> 00:00:26,939
doing on my spare time since maybe half

00:00:23,789 --> 00:00:29,070
a year more or less directly Boston and

00:00:26,939 --> 00:00:31,800
I who had the idea together and that we

00:00:29,070 --> 00:00:34,770
kind of thought there should be an

00:00:31,800 --> 00:00:38,129
open-source community driven alternative

00:00:34,770 --> 00:00:40,670
to Tomita and this was like before the

00:00:38,129 --> 00:00:46,170
whole debacle where they would start

00:00:40,670 --> 00:00:48,739
charging charging from attendees we just

00:00:46,170 --> 00:00:52,379
thought there should be something more

00:00:48,739 --> 00:00:55,440
more aligned with the needs of the of

00:00:52,379 --> 00:01:00,239
the community and we also thought it'd

00:00:55,440 --> 00:01:05,129
make sense to make it open source and so

00:01:00,239 --> 00:01:07,710
here we are I have basically I have a

00:01:05,129 --> 00:01:11,580
prototype it's not it's not MVP level

00:01:07,710 --> 00:01:14,130
yet there's at least enough to this at

00:01:11,580 --> 00:01:17,540
least something to show and so this is

00:01:14,130 --> 00:01:21,140
like basically this is basically my

00:01:17,540 --> 00:01:26,759
spare time Brust project as I'm doing go

00:01:21,140 --> 00:01:29,759
professionally these days and it's only

00:01:26,759 --> 00:01:31,759
about like it's like 50/50 rust is on

00:01:29,759 --> 00:01:37,310
fifth and the rest JavaScript because

00:01:31,759 --> 00:01:44,759
there's like a big from 10 component

00:01:37,310 --> 00:01:49,890
it's a single page application and it's

00:01:44,759 --> 00:01:54,600
basically it's basically using Postgres

00:01:49,890 --> 00:01:59,130
on the US the database server and then

00:01:54,600 --> 00:02:02,880
on the back end we we use a rest web

00:01:59,130 --> 00:02:05,820
server framework called bore which is

00:02:02,880 --> 00:02:09,840
based on this is on top of hyper which

00:02:05,820 --> 00:02:11,790
is again on top of Tokyo I guess how

00:02:09,840 --> 00:02:13,110
many of you are familiar with the Tokyo

00:02:11,790 --> 00:02:16,050
async

00:02:13,110 --> 00:02:18,630
framework yeah a few of you so to talk

00:02:16,050 --> 00:02:22,950
is basically like it's like a it's

00:02:18,630 --> 00:02:27,740
unknown standard runtime for foreign

00:02:22,950 --> 00:02:32,040
doing async programming on in rust and

00:02:27,740 --> 00:02:35,400
the war is basically kind of the

00:02:32,040 --> 00:02:37,980
framework I ended up liking the most of

00:02:35,400 --> 00:02:42,720
the all the web frameworks which are

00:02:37,980 --> 00:02:44,820
available to rust programmers so

00:02:42,720 --> 00:02:47,400
basically to say something about coming

00:02:44,820 --> 00:02:50,220
to itself it's the ideas to make an

00:02:47,400 --> 00:02:53,910
open-source community focused platform

00:02:50,220 --> 00:02:57,530
for arranging developer let's say

00:02:53,910 --> 00:03:01,110
gatherings I thought it'd be a good idea

00:02:57,530 --> 00:03:05,450
personally to kind of narrow the scope

00:03:01,110 --> 00:03:07,910
and focus on meeting the needs of

00:03:05,450 --> 00:03:11,220
developers instead of having the wide

00:03:07,910 --> 00:03:14,970
scope of meetup very kind of like you're

00:03:11,220 --> 00:03:17,640
serving like all kinds of meetups

00:03:14,970 --> 00:03:23,130
I've also to make something which is

00:03:17,640 --> 00:03:26,130
more tailored to to the youth to the

00:03:23,130 --> 00:03:31,200
needs of others or Mike let's say my

00:03:26,130 --> 00:03:39,870
community and our social or social

00:03:31,200 --> 00:03:49,280
gatherings so basically the basically

00:03:39,870 --> 00:03:49,280
the the app is let's see

00:03:50,270 --> 00:04:06,530
I can show you that it's so so base

00:04:02,870 --> 00:04:12,620
basically that kind of works as as a

00:04:06,530 --> 00:04:20,000
feed of all so-called meats as I call

00:04:12,620 --> 00:04:25,900
them which are old or arranged by by

00:04:20,000 --> 00:04:25,900
groups which are like organizations and

00:04:27,190 --> 00:04:37,180
basically those who are those who are

00:04:32,390 --> 00:04:37,180
members of meats can arrange them and

00:04:38,560 --> 00:04:52,700
anyone can basically sign up and asked

00:04:45,740 --> 00:04:57,010
you to also join our meats loss the spin

00:04:52,700 --> 00:04:57,010
of the day it's still compiling actually

00:04:57,550 --> 00:05:02,290
you know how to reactivate the screen

00:05:07,210 --> 00:05:10,870
eight thousand

00:05:23,320 --> 00:05:30,350
so the back end is entirely addressed

00:05:25,820 --> 00:05:38,350
and it is entirely yes yes that's that

00:05:30,350 --> 00:05:41,210
is correct let's see I think maybe I

00:05:38,350 --> 00:05:45,080
think I might like I'll log in on this

00:05:41,210 --> 00:06:00,470
computer because I'm a living working on

00:05:45,080 --> 00:06:04,550
my desktop lately see ok so the home

00:06:00,470 --> 00:06:09,169
page is empty so far and so this I've

00:06:04,550 --> 00:06:12,080
made a profile page as you see where you

00:06:09,169 --> 00:06:16,850
can so you can see the the activity of

00:06:12,080 --> 00:06:19,070
the of the user and you can see the you

00:06:16,850 --> 00:06:23,720
can see the groups the user is part of

00:06:19,070 --> 00:06:31,430
and I've added myself to this coming go

00:06:23,720 --> 00:06:40,360
group which let's see oh yeah probably

00:06:31,430 --> 00:06:40,360
need to run migrations see ok

00:06:46,950 --> 00:07:11,110
here we go okay hmm

00:06:57,510 --> 00:07:17,380
fingers costs the fronton basically

00:07:11,110 --> 00:07:18,850
talks to the backend over rests yeah

00:07:17,380 --> 00:07:21,640
exactly there's no server side rendering

00:07:18,850 --> 00:07:23,670
like I haven't sounded the time to do

00:07:21,640 --> 00:07:23,670
that

00:07:24,540 --> 00:07:30,100
server-side rendering I that's actually

00:07:29,410 --> 00:07:32,380
a good question

00:07:30,100 --> 00:07:34,450
having the riffle because I've done that

00:07:32,380 --> 00:07:37,750
we'd know before I never thought about

00:07:34,450 --> 00:07:40,900
like I haven't even done that we know

00:07:37,750 --> 00:07:45,310
for some time because it it's like time

00:07:40,900 --> 00:07:49,210
consuming and I I don't have much time

00:07:45,310 --> 00:07:51,510
to work on this project so okay let's

00:07:49,210 --> 00:07:51,510
try again

00:08:04,590 --> 00:08:12,120
okay so this is the the profile page of

00:08:08,080 --> 00:08:19,300
the of the group which is able to make

00:08:12,120 --> 00:08:23,700
great meats and here we have a four four

00:08:19,300 --> 00:08:29,350
at the for registering a meat and I use

00:08:23,700 --> 00:08:36,550
Google Maps to define the locations so

00:08:29,350 --> 00:08:39,910
it that works the same as as meetup and

00:08:36,550 --> 00:08:50,320
you see it's it's it's added the its

00:08:39,910 --> 00:09:08,140
embedded a Google map and and we'll just

00:08:50,320 --> 00:09:13,000
add today's Meetup and basically this is

00:09:08,140 --> 00:09:25,570
like this is like a markdown editor with

00:09:13,000 --> 00:09:27,670
live preview you might recognize it as

00:09:25,570 --> 00:09:29,130
actually actually the same editor us is

00:09:27,670 --> 00:09:32,260
in stack overflow

00:09:29,130 --> 00:09:37,150
because the the stack overflow editor is

00:09:32,260 --> 00:09:39,340
his open source is called purgatory code

00:09:37,150 --> 00:09:42,880
page down and his gold like I forked

00:09:39,340 --> 00:09:45,570
that years ago and made my own I made my

00:09:42,880 --> 00:09:45,570
own version of it

00:09:58,120 --> 00:10:04,040
and basically you can say who's his

00:10:02,269 --> 00:10:07,129
whole sting a meet-up and currently

00:10:04,040 --> 00:10:11,509
there's just me as the sole member of

00:10:07,129 --> 00:10:17,360
the other group and you can set you guys

00:10:11,509 --> 00:10:24,620
at the limits and there we there we add

00:10:17,360 --> 00:10:26,509
did we add the meat and is a very simple

00:10:24,620 --> 00:10:28,670
the you guys to proceed also farm

00:10:26,509 --> 00:10:31,519
basically it's it's what I've had the

00:10:28,670 --> 00:10:36,019
time to do but as you see there's at

00:10:31,519 --> 00:10:41,990
least support for for Google Maps in

00:10:36,019 --> 00:10:48,160
there so you can as you can go to go to

00:10:41,990 --> 00:10:48,160
location in Google Maps and the site

00:10:48,610 --> 00:10:54,829
shall see there's a sunfish not a

00:10:52,519 --> 00:10:59,829
missing here like there might be some

00:10:54,829 --> 00:11:04,389
stuff I didn't push like but not much

00:10:59,829 --> 00:11:07,339
and if you go back to the group profile

00:11:04,389 --> 00:11:10,399
you can see that it's it's listed in

00:11:07,339 --> 00:11:15,230
like the feed of our meats which the

00:11:10,399 --> 00:11:18,500
group is is having I can also see me as

00:11:15,230 --> 00:11:21,620
as a member of all the groups this is

00:11:18,500 --> 00:11:24,439
kind of thinking I'm kind of kind of

00:11:21,620 --> 00:11:26,920
drawing inspiration from for example get

00:11:24,439 --> 00:11:30,529
to a bangy Club how all those work and

00:11:26,920 --> 00:11:33,589
also drawing some most of drawing some

00:11:30,529 --> 00:11:37,689
in inspiration from a previous project

00:11:33,589 --> 00:11:44,209
of my own which is like a feed of events

00:11:37,689 --> 00:11:48,639
I thought you could have you have a look

00:11:44,209 --> 00:11:48,639
at some cold gets no mines

00:11:55,949 --> 00:12:03,279
so this is this is reading the bone

00:11:58,569 --> 00:12:09,600
right to to the people in back so

00:12:03,279 --> 00:12:14,470
basically this is this is like the the

00:12:09,600 --> 00:12:16,839
may this is the main this is the main

00:12:14,470 --> 00:12:20,860
routine of the of the application so

00:12:16,839 --> 00:12:24,480
this is what this is what getting walked

00:12:20,860 --> 00:12:31,480
the new when you run the application and

00:12:24,480 --> 00:12:33,930
so we basically we basically let's say

00:12:31,480 --> 00:12:37,839
initialize the the web server here and

00:12:33,930 --> 00:12:41,920
they also we also read register the

00:12:37,839 --> 00:12:44,819
routes of the old web server how many of

00:12:41,920 --> 00:12:48,910
you have written our web server before

00:12:44,819 --> 00:12:51,610
okay like maybe not hafta win

00:12:48,910 --> 00:12:58,689
how many have written web servers in in

00:12:51,610 --> 00:13:03,180
rust okay not so many warp is actually

00:12:58,689 --> 00:13:06,250
quite particular even for for web

00:13:03,180 --> 00:13:10,870
frameworks like it is quite different

00:13:06,250 --> 00:13:14,850
from what I'm used to it seems to be

00:13:10,870 --> 00:13:19,930
designed around the concept of filters

00:13:14,850 --> 00:13:24,250
like actually every every round is

00:13:19,930 --> 00:13:28,779
programmed through a composition of all

00:13:24,250 --> 00:13:31,959
filters so for example you see the the

00:13:28,779 --> 00:13:34,269
block I've highlighted that's the that's

00:13:31,959 --> 00:13:36,880
the route for getting the the JavaScript

00:13:34,269 --> 00:13:42,759
so the JavaScript is served as a bundle

00:13:36,880 --> 00:13:46,689
and this this route it it defines the

00:13:42,759 --> 00:13:49,600
route forgetting or forgetting the the

00:13:46,689 --> 00:13:53,800
bundle from the server so it's basically

00:13:49,600 --> 00:13:56,680
it's like a succession of filters the

00:13:53,800 --> 00:14:00,880
first filters work yet it basically says

00:13:56,680 --> 00:14:04,240
it's it has to be a get requests and the

00:14:00,880 --> 00:14:05,829
second the filter says it has to be the

00:14:04,240 --> 00:14:11,139
request has to have the path

00:14:05,829 --> 00:14:13,600
/ burnwell Jas and that the third filter

00:14:11,139 --> 00:14:20,230
says that's the end of the path there's

00:14:13,600 --> 00:14:24,639
only one component and the the fourth

00:14:20,230 --> 00:14:33,999
and last filter says to serve the file

00:14:24,639 --> 00:14:40,839
this /ban will taste and so it continues

00:14:33,999 --> 00:14:43,949
with all the different routes and this

00:14:40,839 --> 00:14:48,480
this route is maybe more interesting

00:14:43,949 --> 00:14:53,230
this basically this basically says that

00:14:48,480 --> 00:14:58,449
it it will match a post request a post

00:14:53,230 --> 00:15:03,040
HTTP request to start a pris - login on

00:14:58,449 --> 00:15:09,730
the server and it will accept a Jason

00:15:03,040 --> 00:15:11,949
Bob a J's requests and it will take it

00:15:09,730 --> 00:15:15,790
will also take an instance of the

00:15:11,949 --> 00:15:19,449
database client or the database objects

00:15:15,790 --> 00:15:23,920
let's say and when that when that route

00:15:19,449 --> 00:15:29,889
is invoked it will execute a an API

00:15:23,920 --> 00:15:31,089
function called a post API login and I

00:15:29,889 --> 00:15:34,389
thought we could have a look at that so

00:15:31,089 --> 00:15:37,899
basically this route it implements the

00:15:34,389 --> 00:15:42,999
login to the log into the web

00:15:37,899 --> 00:15:47,939
application by the user and if I user

00:15:42,999 --> 00:15:50,499
logs in successfully the server will

00:15:47,939 --> 00:15:53,230
respond with a with an authentication

00:15:50,499 --> 00:15:55,299
cookie and that's also economy

00:15:53,230 --> 00:15:57,939
interesting because wart does not have

00:15:55,299 --> 00:16:01,269
support for for authentication cookies

00:15:57,939 --> 00:16:03,179
actually had to do that myself so then

00:16:01,269 --> 00:16:06,639
like I don't I learned how to make

00:16:03,179 --> 00:16:09,309
authentic authentic Asian cookies myself

00:16:06,639 --> 00:16:13,059
like in past projects I've just used

00:16:09,309 --> 00:16:15,819
frameworks to make oh like cookies the

00:16:13,059 --> 00:16:19,960
tire I could see how to do it and I also

00:16:15,819 --> 00:16:22,360
also used I used like

00:16:19,960 --> 00:16:24,130
fairly new technology called Pacita

00:16:22,360 --> 00:16:30,190
which is like an alternative alternative

00:16:24,130 --> 00:16:33,370
to JSON web tokens for a for ensure inch

00:16:30,190 --> 00:16:35,970
for basically how do you say for

00:16:33,370 --> 00:16:38,890
ensuring it often tastes authenticity of

00:16:35,970 --> 00:16:43,390
cookies to verify that they are sent by

00:16:38,890 --> 00:16:45,190
by the server so I think I think the I

00:16:43,390 --> 00:16:48,160
think the kooky implementation is pretty

00:16:45,190 --> 00:16:54,520
good but I could probably use some more

00:16:48,160 --> 00:16:59,170
ice so this this function post API sign

00:16:54,520 --> 00:17:01,090
up now we're actually looking for post

00:16:59,170 --> 00:17:05,440
API in login so this is this version

00:17:01,090 --> 00:17:15,100
post APR login it's it's a good example

00:17:05,440 --> 00:17:18,400
of overboard route handler the the first

00:17:15,100 --> 00:17:20,740
object it takes is actually the JSON

00:17:18,400 --> 00:17:25,240
payload I mean it's like it's like the

00:17:20,740 --> 00:17:28,890
login form sent via Jason it gets that

00:17:25,240 --> 00:17:31,570
gets decoded into a so called login

00:17:28,890 --> 00:17:34,480
objectives along guinness it's a type i

00:17:31,570 --> 00:17:38,100
defined and in rust

00:17:34,480 --> 00:17:41,500
so that basically matches the the

00:17:38,100 --> 00:17:46,480
payload the serve the Defiant's will

00:17:41,500 --> 00:17:49,060
send with a login and the second the

00:17:46,480 --> 00:17:51,310
second parameter is the database object

00:17:49,060 --> 00:17:59,830
which I'll define myself and you can see

00:17:51,310 --> 00:18:07,150
I couldn't make that work here but I can

00:17:59,830 --> 00:18:15,280
is yeah I'm using vim is like this look

00:18:07,150 --> 00:18:17,860
I'm using vim masked editor yeah I

00:18:15,280 --> 00:18:19,540
actually use rust am i serious like I

00:18:17,860 --> 00:18:22,450
used to think all the physical do you

00:18:19,540 --> 00:18:24,580
plea it or something and I'm not sure

00:18:22,450 --> 00:18:27,470
why I'm not sure why it's failing when

00:18:24,580 --> 00:18:30,710
it's when it I'm not sure yeah

00:18:27,470 --> 00:18:35,629
oh yeah it's like if it fails it's very

00:18:30,710 --> 00:18:40,269
difficult to say you know why oh yeah

00:18:35,629 --> 00:18:44,120
but this is also very cool this is the

00:18:40,269 --> 00:18:50,059
this is the return signature of the

00:18:44,120 --> 00:18:53,629
function and so basically the the

00:18:50,059 --> 00:18:57,080
function is rough this enforcing that

00:18:53,629 --> 00:18:59,990
the function either has to succeed in

00:18:57,080 --> 00:19:01,909
which case it will return a reply or or

00:18:59,990 --> 00:19:05,659
it has to fail in which case it returns

00:19:01,909 --> 00:19:08,860
a rejection so this is like something

00:19:05,659 --> 00:19:13,970
which is super cool in in rust that

00:19:08,860 --> 00:19:16,629
basically the compiler for forces you to

00:19:13,970 --> 00:19:18,679
have a success pot or an error path and

00:19:16,629 --> 00:19:20,419
it's not like you might throw an

00:19:18,679 --> 00:19:24,830
exception like in Java so yet for

00:19:20,419 --> 00:19:28,519
example it's like errors are returned

00:19:24,830 --> 00:19:32,659
variants you could say like yeah it's

00:19:28,519 --> 00:19:34,039
like so either you you follow the

00:19:32,659 --> 00:19:44,059
success path or your folder with the

00:19:34,039 --> 00:19:47,509
error path and so a cask how many of you

00:19:44,059 --> 00:19:50,450
are actively writing Red Storm and they

00:19:47,509 --> 00:19:52,309
have actually written rest they okay

00:19:50,450 --> 00:19:58,549
maybe have to yeah bit more than half

00:19:52,309 --> 00:20:00,980
written at the real so for those of you

00:19:58,549 --> 00:20:08,320
not so familiar with rust there

00:20:00,980 --> 00:20:11,179
basically this line is getting the user

00:20:08,320 --> 00:20:13,659
corresponding to the logins username or

00:20:11,179 --> 00:20:16,070
email as the login will either be by

00:20:13,659 --> 00:20:18,250
username or email so we look in the

00:20:16,070 --> 00:20:21,019
database for a user which is either

00:20:18,250 --> 00:20:25,250
either has this username or that that

00:20:21,019 --> 00:20:29,710
email address and then it's possible the

00:20:25,250 --> 00:20:34,879
user is not found so basically this much

00:20:29,710 --> 00:20:36,889
this much expression will basically do

00:20:34,879 --> 00:20:40,039
one thing if it finds the user and

00:20:36,889 --> 00:20:40,440
another if it does not find user so so

00:20:40,039 --> 00:20:43,500
this is

00:20:40,440 --> 00:20:49,260
this is the case where the branch where

00:20:43,500 --> 00:20:53,220
the the user is found in that case we

00:20:49,260 --> 00:20:56,360
are verifying the the password that it's

00:20:53,220 --> 00:21:01,890
the same as what is stored with the user

00:20:56,360 --> 00:21:03,870
and what I'm doing here is a bit nasty

00:21:01,890 --> 00:21:06,960
like I'm basically I'm basically

00:21:03,870 --> 00:21:10,560
crushing if if the verification fails

00:21:06,960 --> 00:21:13,950
but the reason is that I not yet figure

00:21:10,560 --> 00:21:16,920
out how to return errors properly with

00:21:13,950 --> 00:21:19,440
good work it's like it's like I'm kind

00:21:16,920 --> 00:21:21,570
of working a time pressure and work is

00:21:19,440 --> 00:21:23,810
very new so it's a bit difficult to

00:21:21,570 --> 00:21:26,700
figure out how to do things properly so

00:21:23,810 --> 00:21:29,270
my thing is that this is just a

00:21:26,700 --> 00:21:32,730
prototype so I don't care if it crashes

00:21:29,270 --> 00:21:34,110
on theirs it's okay if it's better than

00:21:32,730 --> 00:21:44,160
spending a lot of time doing it

00:21:34,110 --> 00:21:47,160
perfectly it well actually the server

00:21:44,160 --> 00:21:50,610
continues I think I think I think the

00:21:47,160 --> 00:21:53,070
server is okay like it gives some

00:21:50,610 --> 00:22:01,620
nasties like praises but it looks like

00:21:53,070 --> 00:22:05,670
it can continue this is also interesting

00:22:01,620 --> 00:22:10,470
that basically this function it has to

00:22:05,670 --> 00:22:12,870
return either the ok variants a or the

00:22:10,470 --> 00:22:19,860
or the error variance and here it

00:22:12,870 --> 00:22:21,480
returns some ok because the password

00:22:19,860 --> 00:22:26,400
matched and you log we're logging the is

00:22:21,480 --> 00:22:32,850
rain and in the case where the user is

00:22:26,400 --> 00:22:34,680
not authenticated the here we actually

00:22:32,850 --> 00:22:37,590
here actually figured out how to return

00:22:34,680 --> 00:22:39,030
an error like an age to be errors like

00:22:37,590 --> 00:22:41,270
this is like the rare case that I

00:22:39,030 --> 00:22:44,190
figured out how to do it

00:22:41,270 --> 00:22:48,810
so we're basically returning an HTTP

00:22:44,190 --> 00:22:52,290
response unauthorized because the user

00:22:48,810 --> 00:22:53,860
was not properly authenticated and here

00:22:52,290 --> 00:22:56,830
we see the case where

00:22:53,860 --> 00:22:58,870
we could not find the user and in that

00:22:56,830 --> 00:23:01,090
case we do the same thing you really

00:22:58,870 --> 00:23:10,000
returned HTTP response which says that

00:23:01,090 --> 00:23:12,720
it's unauthorized requests and do I have

00:23:10,000 --> 00:23:12,720
much time left

00:23:13,380 --> 00:23:22,990
yeah yeah do you okay the kid also

00:23:20,559 --> 00:23:27,309
becomes a look at the database code is

00:23:22,990 --> 00:23:31,299
that is that interesting the database

00:23:27,309 --> 00:23:36,100
code so it's just basically it's

00:23:31,299 --> 00:23:39,600
basically accessing Postgres via an / M

00:23:36,100 --> 00:23:39,600
called DISA

00:23:42,780 --> 00:23:47,919
personally I would actually prefer not

00:23:45,610 --> 00:23:52,330
using on / M like I would prefer to use

00:23:47,919 --> 00:23:54,070
just write sequel directly but I could

00:23:52,330 --> 00:23:56,350
not I kind of want to do you have

00:23:54,070 --> 00:23:58,030
migrations like sequel migrations and I

00:23:56,350 --> 00:24:01,900
could not find like a separate

00:23:58,030 --> 00:24:04,990
migrations library so as I end up using

00:24:01,900 --> 00:24:07,510
these basic the mostly because it has

00:24:04,990 --> 00:24:10,090
migrations but I'm already having I'm

00:24:07,510 --> 00:24:13,929
already having some trouble defining the

00:24:10,090 --> 00:24:18,280
queries via decent so I kind of want to

00:24:13,929 --> 00:24:20,710
I want to kind of switch soon but but I

00:24:18,280 --> 00:24:25,590
have to find the time so this is

00:24:20,710 --> 00:24:32,770
basically this is basically the database

00:24:25,590 --> 00:24:35,140
abstraction I'm using so it is it is a

00:24:32,770 --> 00:24:37,630
user defined type and for it to do to

00:24:35,140 --> 00:24:42,790
make that in rust you used struct

00:24:37,630 --> 00:24:49,000
keyword and this is like an interesting

00:24:42,790 --> 00:24:51,400
feature of a breasts that basically in

00:24:49,000 --> 00:24:55,660
order to access the the database

00:24:51,400 --> 00:24:58,840
connection from several threads you you

00:24:55,660 --> 00:25:04,200
have to use a mutex which is like

00:24:58,840 --> 00:25:04,200
threads in synchronization primitive and

00:25:04,679 --> 00:25:11,080
it also have

00:25:07,320 --> 00:25:14,160
and also to be think I think in order to

00:25:11,080 --> 00:25:18,640
pass the mutex arounds you have to use

00:25:14,160 --> 00:25:22,600
what is called an a RC which is like I

00:25:18,640 --> 00:25:26,920
think it's like atomic ray reference

00:25:22,600 --> 00:25:28,900
counts yeah so it's basically like it's

00:25:26,920 --> 00:25:30,880
kind of like a garbage collected object

00:25:28,900 --> 00:25:34,540
it's like basically you can you can make

00:25:30,880 --> 00:25:37,240
copies of it so you can pass it around

00:25:34,540 --> 00:25:39,790
as much as you like and then it keeps a

00:25:37,240 --> 00:25:41,830
reference count and then when the count

00:25:39,790 --> 00:25:44,020
drops to zero it gets deleted so it's

00:25:41,830 --> 00:25:48,370
kind of like like a simple garbage

00:25:44,020 --> 00:25:51,010
collection and and here is the

00:25:48,370 --> 00:25:55,870
implementation of the of the database

00:25:51,010 --> 00:25:57,370
type that is done differently from Java

00:25:55,870 --> 00:26:00,850
for example that you you have the

00:25:57,370 --> 00:26:03,460
implementation block outside the outside

00:26:00,850 --> 00:26:12,550
of the type definition or the type

00:26:03,460 --> 00:26:17,320
decoration so here here we have a very

00:26:12,550 --> 00:26:25,990
simple method for looking up a user by

00:26:17,320 --> 00:26:29,170
the users ID and here we take we here we

00:26:25,990 --> 00:26:37,870
get the connection by taking the taking

00:26:29,170 --> 00:26:45,060
the lock and then we make a query via

00:26:37,870 --> 00:26:48,640
the the DSL API so you're basically like

00:26:45,060 --> 00:26:53,710
filtering records in the table having

00:26:48,640 --> 00:26:55,930
the same having the same ID and this is

00:26:53,710 --> 00:27:00,160
like an interesting syntax like generic

00:26:55,930 --> 00:27:04,390
syntax where you very call the load

00:27:00,160 --> 00:27:06,940
method with the user as type parameters

00:27:04,390 --> 00:27:15,400
you say that you want you want a user

00:27:06,940 --> 00:27:18,040
object so back oh yeah that's beautiful

00:27:15,400 --> 00:27:21,070
syntax it's like

00:27:18,040 --> 00:27:27,130
basically the star means you dereference

00:27:21,070 --> 00:27:29,320
the mutex because I'm pretty sure the

00:27:27,130 --> 00:27:32,920
comb variables is actually a mutex type

00:27:29,320 --> 00:27:35,790
here so you have to dereference it to

00:27:32,920 --> 00:27:39,160
get to get like the the connection

00:27:35,790 --> 00:27:41,500
contained by the me or look guarded by

00:27:39,160 --> 00:27:44,190
the mutex and and they are presented is

00:27:41,500 --> 00:27:47,260
for making it into a reference so

00:27:44,190 --> 00:27:52,270
references are like key to memory

00:27:47,260 --> 00:27:56,830
management in in interest like if if I

00:27:52,270 --> 00:28:00,670
did not pass con as a reference it would

00:27:56,830 --> 00:28:02,790
mean that the the receiving the

00:28:00,670 --> 00:28:05,410
receiving method would actually consume

00:28:02,790 --> 00:28:07,540
the common object so that would mean

00:28:05,410 --> 00:28:09,430
that I could not use condoms like the

00:28:07,540 --> 00:28:12,070
common object again because now it would

00:28:09,430 --> 00:28:14,050
belong it belong to someone else like I

00:28:12,070 --> 00:28:15,850
would have given so like by sending a

00:28:14,050 --> 00:28:17,800
reference I retain ownership it means

00:28:15,850 --> 00:28:28,060
I'm not giving it away I can use it

00:28:17,800 --> 00:28:32,760
again yeah and you see here this is this

00:28:28,060 --> 00:28:37,690
is basically an example of of the

00:28:32,760 --> 00:28:41,380
function being able to return either sum

00:28:37,690 --> 00:28:44,050
or non so sum means that you if that's

00:28:41,380 --> 00:28:46,270
like it means you found means that you

00:28:44,050 --> 00:28:48,700
return something and the non needs your

00:28:46,270 --> 00:28:51,790
yeah you're not returning anything that

00:28:48,700 --> 00:28:53,620
basically corresponds to having null or

00:28:51,790 --> 00:28:57,760
undefined in JavaScript for example or a

00:28:53,620 --> 00:29:01,630
null in C++ but in in rusty avoid that

00:28:57,760 --> 00:29:09,190
by instead having the option the option

00:29:01,630 --> 00:29:12,910
in like wherever you can return like a

00:29:09,190 --> 00:29:15,430
null value you'll return option so then

00:29:12,910 --> 00:29:18,400
the the client or the day the caller has

00:29:15,430 --> 00:29:25,060
to deal with both the the some variants

00:29:18,400 --> 00:29:27,190
and then the non variants so maybe you

00:29:25,060 --> 00:29:32,860
can closer

00:29:27,190 --> 00:29:34,990
yeah sure so first of all thank you for

00:29:32,860 --> 00:29:37,720
the interesting talk I saw you use the

00:29:34,990 --> 00:29:39,790
Google Maps great above and this is the

00:29:37,720 --> 00:29:41,920
back end right so I'm not familiar with

00:29:39,790 --> 00:29:43,450
that development well why what we need

00:29:41,920 --> 00:29:45,640
what is Google Maps are used on the back

00:29:43,450 --> 00:29:49,150
end it's actually my oh it's not a crate

00:29:45,640 --> 00:29:52,090
it's it's a model I'm written myself I

00:29:49,150 --> 00:29:56,560
think it's just for it's just for

00:29:52,090 --> 00:30:00,490
generating URLs because I'm using the so

00:29:56,560 --> 00:30:03,430
called static map API of Google Maps so

00:30:00,490 --> 00:30:05,950
it just like gives find URLs to the

00:30:03,430 --> 00:30:08,370
clients so it's just like a utility

00:30:05,950 --> 00:30:08,370
model

00:30:15,300 --> 00:30:25,480
how does mixing futures and sync

00:30:21,100 --> 00:30:27,040
connections through an artwork like for

00:30:25,480 --> 00:30:28,840
example diesel as far as I know doesn't

00:30:27,040 --> 00:30:31,660
for doesn't support a circuit when

00:30:28,840 --> 00:30:33,490
you've wrapped the connection in a mutex

00:30:31,660 --> 00:30:36,850
in an arc mm-hm

00:30:33,490 --> 00:30:38,410
so the doesn't spin off a threat when

00:30:36,850 --> 00:30:40,630
you make a connection and then resolve

00:30:38,410 --> 00:30:45,610
to a future as a future finally around

00:30:40,630 --> 00:30:50,710
the world no I actually have actually

00:30:45,610 --> 00:30:52,150
looked into that not relays like I don't

00:30:50,710 --> 00:30:54,610
think I can give a good answer to it

00:30:52,150 --> 00:30:57,040
because it's like beyond the whole time

00:30:54,610 --> 00:31:00,430
I've only concentrated on making it work

00:30:57,040 --> 00:31:02,850
and missing like good documentation how

00:31:00,430 --> 00:31:05,710
long does a thing stuff works because I

00:31:02,850 --> 00:31:22,980
haven't looked closely enough into it's

00:31:05,710 --> 00:31:26,050
like when you resource a request request

00:31:22,980 --> 00:31:29,400
yeah so the request handler is

00:31:26,050 --> 00:31:29,400
asynchronous that's correct

00:31:31,360 --> 00:31:36,980
yeah so I that's actually something I

00:31:34,220 --> 00:31:38,750
don't know like how they interact like I

00:31:36,980 --> 00:31:42,549
mean you know before I reach production

00:31:38,750 --> 00:31:42,549
I have to be more serious about Isthmus

00:31:49,059 --> 00:31:55,400
that Tokyo gives you as many threats as

00:31:52,460 --> 00:31:58,190
you have cores available by default and

00:31:55,400 --> 00:32:00,380
that database color but there will block

00:31:58,190 --> 00:32:02,929
one of those threats that nobody else

00:32:00,380 --> 00:32:05,030
can go and do a request over that right

00:32:02,929 --> 00:32:07,280
the performance will be definitely great

00:32:05,030 --> 00:32:09,559
for the app of this caliber if you want

00:32:07,280 --> 00:32:11,480
to scale up you go to a synchronous data

00:32:09,559 --> 00:32:14,030
place case I wouldn't be so scared about

00:32:11,480 --> 00:32:16,880
seeing an Asian combination when you're

00:32:14,030 --> 00:32:19,940
still in the level of having couple of

00:32:16,880 --> 00:32:22,940
frequently and the the time obviously

00:32:19,940 --> 00:32:24,890
from other database client in any case

00:32:22,940 --> 00:32:28,240
like I think we also have your

00:32:24,890 --> 00:32:28,240
imprisonment one you can try it

00:32:31,039 --> 00:32:40,070
I think someone behind you so I can do

00:32:38,059 --> 00:32:43,520
different different answer also but this

00:32:40,070 --> 00:32:46,429
is not going to be Tokyo right now so I

00:32:43,520 --> 00:32:51,320
would say that I'm maintainer of the

00:32:46,429 --> 00:32:54,350
bastion again and basically we have

00:32:51,320 --> 00:32:57,020
right now in that project adopted thread

00:32:54,350 --> 00:33:00,320
pool and which basically in that

00:32:57,020 --> 00:33:03,679
scenarios it can automatically grow the

00:33:00,320 --> 00:33:06,169
threads and scale back to the point

00:33:03,679 --> 00:33:10,190
afterwards and groving is basically

00:33:06,169 --> 00:33:13,820
basically based on the pressure of the

00:33:10,190 --> 00:33:16,370
blocking calls and based on that it's

00:33:13,820 --> 00:33:18,559
exponentially grows and after that after

00:33:16,370 --> 00:33:21,080
some time if there is no blocking calls

00:33:18,559 --> 00:33:22,850
operating on it it the case and who

00:33:21,080 --> 00:33:25,400
joins all the threads back so you can

00:33:22,850 --> 00:33:28,190
use something like that to a couple of

00:33:25,400 --> 00:33:30,500
things in addition to your code style

00:33:28,190 --> 00:33:33,490
and maybe it would be really good input

00:33:30,500 --> 00:33:36,169
I don't know there are people basically

00:33:33,490 --> 00:33:38,000
didn't work on that maybe there are just

00:33:36,169 --> 00:33:41,990
new ways that they're just going to get

00:33:38,000 --> 00:33:44,179
in the rest so first it's going to be

00:33:41,990 --> 00:33:47,749
nice that if everybody X

00:33:44,179 --> 00:33:50,570
how still a match the blocks so all the

00:33:47,749 --> 00:33:53,419
matches should at the end if there is no

00:33:50,570 --> 00:33:56,240
other cases use the exhaustive match so

00:33:53,419 --> 00:33:58,999
do you see the none in there that should

00:33:56,240 --> 00:34:03,110
be underscore in most of the cases this

00:33:58,999 --> 00:34:05,509
is a good how can I say approach oh yeah

00:34:03,110 --> 00:34:11,540
and the second thing if you are going to

00:34:05,509 --> 00:34:14,300
cast I 64-bit to a 32 for business use

00:34:11,540 --> 00:34:17,419
from because why because you are going

00:34:14,300 --> 00:34:20,389
you might get a most significant bit of

00:34:17,419 --> 00:34:23,659
32 might be garbage because you are

00:34:20,389 --> 00:34:27,349
doing a direct cast so I use front rate

00:34:23,659 --> 00:34:30,889
which first 0 eyes and then do the

00:34:27,349 --> 00:34:36,260
converse a commercial which is the case

00:34:30,889 --> 00:34:37,550
that is in this connection the reference

00:34:36,260 --> 00:34:40,190
that you showed us

00:34:37,550 --> 00:34:46,240
mm-hm in there you are casting the you

00:34:40,190 --> 00:34:49,790
user ID from i-64 yes there are

00:34:46,240 --> 00:34:54,349
whenever should use a from method yeah I

00:34:49,790 --> 00:34:56,690
64 Colin Colin from and basically

00:34:54,349 --> 00:34:58,099
convert it from there ohright 32

00:34:56,690 --> 00:35:02,270
whatever you are going to convert in

00:34:58,099 --> 00:35:05,299
basically like a 32 from yeah yeah so

00:35:02,270 --> 00:35:08,180
this is basically how it's going to be

00:35:05,299 --> 00:35:10,520
really nice because otherwise if the the

00:35:08,180 --> 00:35:14,359
most significant pics are basically

00:35:10,520 --> 00:35:17,150
wrong and then it's going to be crash at

00:35:14,359 --> 00:35:20,150
that point yeah and then basically whole

00:35:17,150 --> 00:35:22,520
database going to stall at that point

00:35:20,150 --> 00:35:26,089
probably connections are also going to

00:35:22,520 --> 00:35:28,640
leak because probably arc is not going

00:35:26,089 --> 00:35:30,079
to drop I also think so I don't want to

00:35:28,640 --> 00:35:32,450
scare anyone anymore

00:35:30,079 --> 00:35:36,500
but yeah this might happen in some

00:35:32,450 --> 00:35:37,369
scenarios that is what I can say so far

00:35:36,500 --> 00:35:40,280
just what I saw

00:35:37,369 --> 00:35:41,599
not judging no I really nice for people

00:35:40,280 --> 00:35:48,349
that actually going to start right

00:35:41,599 --> 00:35:51,950
skills good input yeah it does find that

00:35:48,349 --> 00:35:52,460
ok also for the creepy let me tell you

00:35:51,950 --> 00:35:54,530
something

00:35:52,460 --> 00:35:57,270
use pedantic at me as much as possible

00:35:54,530 --> 00:35:59,609
the pedantic forces you to do

00:35:57,270 --> 00:36:01,440
forces you to remove most of the tint

00:35:59,609 --> 00:36:04,109
that's the good part of it

00:36:01,440 --> 00:36:06,420
so most of the times I mean I'm writing

00:36:04,109 --> 00:36:07,890
Roscoe I wrote a share screen does the

00:36:06,420 --> 00:36:09,750
formatting does the creepy with the

00:36:07,890 --> 00:36:12,780
pedantic checks and then formatting back

00:36:09,750 --> 00:36:15,000
again so I haven't class going haven't

00:36:12,780 --> 00:36:17,609
got around to using clip a yet but

00:36:15,000 --> 00:36:23,390
that's like something I'm going to do

00:36:17,609 --> 00:36:23,390
for sure thanks

00:36:23,430 --> 00:36:37,400
[Applause]

00:36:26,120 --> 00:36:37,400

YouTube URL: https://www.youtube.com/watch?v=UZzQyQicsr0


