Title: Debugging WebAssembly - Irina Shestak
Publication date: 2019-11-15
Playlist: Rust and Tell Berlin
Description: 
	From the Berlin Rust's October "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)

"Rust and Tell“ is a monthly event to share ideas, and learn about new things in and about Rust. Meet fellow Rustaceans, share your learnings, get motivated and inspired. We’re open to any and all kinds of talks about any subjects that you think will be interesting to an audience interested in Rust. Whether you're an experienced Rust developer or just getting started, we strongly encourage you to share your learnings.

Irina Shestak: https://twitter.com/_lrlna

Hosted at Prisma: prisma.io

🎥 Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:03,589 --> 00:00:08,309
I'm gonna talk about debugging was um

00:00:06,150 --> 00:00:09,990
I'm sorry I'm supposed to go first but I

00:00:08,309 --> 00:00:13,200
forgot my bike lights at home and I

00:00:09,990 --> 00:00:14,969
couldn't bike on pencil away without

00:00:13,200 --> 00:00:15,560
bike lights cuz I think that's a suicide

00:00:14,969 --> 00:00:18,060
mission

00:00:15,560 --> 00:00:20,070
so I had to like take a cab and that

00:00:18,060 --> 00:00:21,900
took such a long time anyway I'm here

00:00:20,070 --> 00:00:23,029
and I'm gonna do the last talk I have a

00:00:21,900 --> 00:00:27,630
debugging wisdom

00:00:23,029 --> 00:00:30,390
my name is Irina spelled with ours on

00:00:27,630 --> 00:00:33,210
ELLs and set of eyes on Twitter because

00:00:30,390 --> 00:00:37,500
I didn't have the other name was not

00:00:33,210 --> 00:00:40,110
available you might have seen some of my

00:00:37,500 --> 00:00:43,829
scenes but I magazines it's kind of my

00:00:40,110 --> 00:00:47,700
hobby made one on traits in rest I also

00:00:43,829 --> 00:00:50,820
made one on async rest I also have two

00:00:47,700 --> 00:00:53,100
cats at home ones Cheshire and one is

00:00:50,820 --> 00:00:57,109
nori annuities like seaweed and Cheshire

00:00:53,100 --> 00:01:01,890
is like porkchop in Japanese or like in

00:00:57,109 --> 00:01:04,939
tonkotsu broth and because I'm missing

00:01:01,890 --> 00:01:11,939
German class I wrote the slide in German

00:01:04,939 --> 00:01:15,060
I think my genitive is wrong sorry so

00:01:11,939 --> 00:01:17,009
yeah I'm from Canada and but I live here

00:01:15,060 --> 00:01:21,270
for the past two years my German is

00:01:17,009 --> 00:01:23,659
still really bad sorry that's the Canada

00:01:21,270 --> 00:01:23,659
partner

00:01:24,960 --> 00:01:32,670
I write JavaScript in rust at MongoDB

00:01:29,960 --> 00:01:34,770
mostly javascript by the past couple of

00:01:32,670 --> 00:01:38,700
months or the past year or so I've

00:01:34,770 --> 00:01:41,070
played around with rust this talk is a

00:01:38,700 --> 00:01:42,869
little bit of rest but mostly about azam

00:01:41,070 --> 00:01:45,299
and how to work with wasone when you

00:01:42,869 --> 00:01:48,060
compile that down to rest I'm just kind

00:01:45,299 --> 00:01:49,560
of like a brief probably 15-minute talk

00:01:48,060 --> 00:01:51,990
we'll see how it goes I kind of hacked

00:01:49,560 --> 00:01:55,680
this together from a previous talk in

00:01:51,990 --> 00:01:57,770
like the last 30 minutes so let's see so

00:01:55,680 --> 00:02:00,450
I wrote a MongoDB schema parser that

00:01:57,770 --> 00:02:03,149
used to work in JavaScript and now works

00:02:00,450 --> 00:02:05,460
in rust and what I wanted to do is I

00:02:03,149 --> 00:02:08,340
wanted it to work in rust and I wanted

00:02:05,460 --> 00:02:09,720
it also to work in wasum which I think a

00:02:08,340 --> 00:02:11,220
lot of people don't do they either make

00:02:09,720 --> 00:02:12,230
something in rust or make something in

00:02:11,220 --> 00:02:14,270
wasum or make some

00:02:12,230 --> 00:02:17,989
and rust to work in Azzam but never like

00:02:14,270 --> 00:02:20,660
to or never not shouldn't say never but

00:02:17,989 --> 00:02:22,730
more likely not a tube saying API but I

00:02:20,660 --> 00:02:26,060
wanted to do in both and so it's

00:02:22,730 --> 00:02:27,860
available the rest version is not on

00:02:26,060 --> 00:02:32,750
Christ il because I have an issue with

00:02:27,860 --> 00:02:34,250
decimal 128 in Abby's on crate but I can

00:02:32,750 --> 00:02:36,140
compile it down to Azam and use it in

00:02:34,250 --> 00:02:37,880
the JavaScript side of things so there

00:02:36,140 --> 00:02:40,519
is the rest version you can find them

00:02:37,880 --> 00:02:42,290
github but the bazan version of the

00:02:40,519 --> 00:02:44,959
JavaScript version you can npm installed

00:02:42,290 --> 00:02:48,080
which is nice so i'm going to talk about

00:02:44,959 --> 00:02:50,989
there was a side of things but before i

00:02:48,080 --> 00:02:54,049
do that the entire parser just takes in

00:02:50,989 --> 00:02:55,760
a bunch of documents and outputs a bunch

00:02:54,049 --> 00:02:57,530
of information about the documents you

00:02:55,760 --> 00:03:00,260
have in a particular collection in

00:02:57,530 --> 00:03:01,970
MongoDB so this one was looking at some

00:03:00,260 --> 00:03:03,590
of the bars in Berlin and then it

00:03:01,970 --> 00:03:06,410
compiled all that information together

00:03:03,590 --> 00:03:08,180
and that's what the entire barsa does

00:03:06,410 --> 00:03:10,430
just kind of like a parser but on

00:03:08,180 --> 00:03:13,430
documents in MongoDB so you got things

00:03:10,430 --> 00:03:16,310
that count of how many fields there are

00:03:13,430 --> 00:03:18,109
it given like X number of documents and

00:03:16,310 --> 00:03:19,850
you can get like the different field

00:03:18,109 --> 00:03:23,090
types all together so it groups

00:03:19,850 --> 00:03:26,060
everything by string or by doubles or by

00:03:23,090 --> 00:03:28,280
decimal 128 and things like that so lots

00:03:26,060 --> 00:03:31,690
of aggregate information basically and

00:03:28,280 --> 00:03:34,250
what happens with the entire kind of

00:03:31,690 --> 00:03:36,380
situation is that there's a bunch of

00:03:34,250 --> 00:03:38,480
moving parts and I'm just gonna talk

00:03:36,380 --> 00:03:39,920
about the wasn't part but I think it's

00:03:38,480 --> 00:03:41,569
important to kind of know how the whole

00:03:39,920 --> 00:03:44,150
thing works together so we have a

00:03:41,569 --> 00:03:46,310
database that talks to that little sack

00:03:44,150 --> 00:03:48,170
which is a collection sample that

00:03:46,310 --> 00:03:50,660
samples all the documents coming from a

00:03:48,170 --> 00:03:53,329
database and then it passes it to my

00:03:50,660 --> 00:03:55,819
browser or my electron app in this case

00:03:53,329 --> 00:03:57,829
which is compass and compass does the

00:03:55,819 --> 00:04:00,349
talking to the rasam side of things and

00:03:57,829 --> 00:04:03,230
rasam does a talking to rust and that

00:04:00,349 --> 00:04:05,930
goes all the way back and if we wanted

00:04:03,230 --> 00:04:09,139
to go all the way back but today is kind

00:04:05,930 --> 00:04:10,970
of like it was important of things so I

00:04:09,139 --> 00:04:15,109
wanted to make sure that it works in

00:04:10,970 --> 00:04:16,639
wasum but how does it work in wasum and

00:04:15,109 --> 00:04:19,370
how to get the warm side of things to

00:04:16,639 --> 00:04:21,409
work kind of at a rest meet up but kind

00:04:19,370 --> 00:04:24,200
of know that your old best developers in

00:04:21,409 --> 00:04:26,000
you can figure out how to work a parson

00:04:24,200 --> 00:04:28,550
rust but putting it down to vows

00:04:26,000 --> 00:04:31,280
kind of gets really interesting and I

00:04:28,550 --> 00:04:35,090
think debugging side of things also gets

00:04:31,280 --> 00:04:36,950
really interesting so getting it to

00:04:35,090 --> 00:04:40,430
compile from Rustom is actually rather

00:04:36,950 --> 00:04:43,760
easy you just install a zombie engine as

00:04:40,430 --> 00:04:45,260
one of your dependencies this is an

00:04:43,760 --> 00:04:48,080
outdated version there's a newer version

00:04:45,260 --> 00:04:49,580
out but that kind of does all the

00:04:48,080 --> 00:04:52,040
compilation for you so you don't have to

00:04:49,580 --> 00:04:54,260
do a lot of that what it does is it

00:04:52,040 --> 00:04:57,080
generates two files one is a JavaScript

00:04:54,260 --> 00:04:59,990
file that points out to all the Y's M

00:04:57,080 --> 00:05:01,550
things comes up with all the pointers

00:04:59,990 --> 00:05:03,230
and stuff like that and then you can use

00:05:01,550 --> 00:05:05,690
that JavaScript in your JavaScript

00:05:03,230 --> 00:05:08,060
application so all of that is generated

00:05:05,690 --> 00:05:10,160
for you and what you do is you annotate

00:05:08,060 --> 00:05:12,169
a bunch of your coat so this is one of

00:05:10,160 --> 00:05:15,740
the points of my API it's just a schema

00:05:12,169 --> 00:05:18,320
parser new and all I do is I Mateos woz

00:05:15,740 --> 00:05:20,240
and bind gen I can also do like things

00:05:18,320 --> 00:05:23,090
that are more familiar in JavaScript

00:05:20,240 --> 00:05:26,350
land which is give it a javascript name

00:05:23,090 --> 00:05:28,940
and make it a constructor so I can go

00:05:26,350 --> 00:05:32,360
scheme a parser new new schema parser

00:05:28,940 --> 00:05:35,930
things like that and I can also give

00:05:32,360 --> 00:05:38,390
like names that are more familiar in

00:05:35,930 --> 00:05:40,430
JavaScript fried JSON with J capitalized

00:05:38,390 --> 00:05:42,710
since we don't do underscores usually in

00:05:40,430 --> 00:05:47,530
JavaScript so all of that kind of comes

00:05:42,710 --> 00:05:51,320
with the API coincidentally this is also

00:05:47,530 --> 00:05:53,960
my entire packages API and what the

00:05:51,320 --> 00:05:55,940
package does is that it is meant to

00:05:53,960 --> 00:05:58,370
receive a bunch of documents that have

00:05:55,940 --> 00:06:01,010
come all the way down the chain from the

00:05:58,370 --> 00:06:03,680
MongoDB driver and it's meant to return

00:06:01,010 --> 00:06:06,530
all that information together so the API

00:06:03,680 --> 00:06:08,990
all it does is you instantiate it with

00:06:06,530 --> 00:06:11,120
new and then you write JSON to it from

00:06:08,990 --> 00:06:13,850
this JavaScript side of things and then

00:06:11,120 --> 00:06:16,250
when you're done streaming all those

00:06:13,850 --> 00:06:20,050
documents you just go into JSON and then

00:06:16,250 --> 00:06:22,430
puts it all together for you cool so

00:06:20,050 --> 00:06:24,650
when you work with wasn't barn Jen you

00:06:22,430 --> 00:06:27,440
start off with just being able to do to

00:06:24,650 --> 00:06:30,650
work with three different values one is

00:06:27,440 --> 00:06:33,470
J's error Tuesday s value and one of

00:06:30,650 --> 00:06:37,640
them is just a string so they're rather

00:06:33,470 --> 00:06:39,260
simple paradigms you work with but

00:06:37,640 --> 00:06:39,770
luckily when I started off working with

00:06:39,260 --> 00:06:42,800
us it started

00:06:39,770 --> 00:06:44,750
working with only strings because being

00:06:42,800 --> 00:06:47,900
a JavaScript developer coming into rust

00:06:44,750 --> 00:06:51,410
it's a bit hard to understand all the

00:06:47,900 --> 00:06:53,660
types that rust has for you so I kind of

00:06:51,410 --> 00:06:58,250
ended off with having a result that

00:06:53,660 --> 00:07:01,250
accept a string and then I returned a

00:06:58,250 --> 00:07:04,370
sturdy JSON string as well and kind of

00:07:01,250 --> 00:07:07,910
tacked on fairly rare up the stream from

00:07:04,370 --> 00:07:09,380
here and so the first time I put it

00:07:07,910 --> 00:07:11,630
together I was like this seems really

00:07:09,380 --> 00:07:13,940
easy the docks are very straightforward

00:07:11,630 --> 00:07:16,220
and so I wanted to build up this project

00:07:13,940 --> 00:07:19,130
and see how it goes so to build you just

00:07:16,220 --> 00:07:21,800
do cargo build and you target to was him

00:07:19,130 --> 00:07:25,759
32 to make sure that there's no errors

00:07:21,800 --> 00:07:29,240
and obviously there was errors and they

00:07:25,759 --> 00:07:31,520
come from very unexpected places so one

00:07:29,240 --> 00:07:34,849
of these was the fact that I was not

00:07:31,520 --> 00:07:37,009
able to use air in the way that I wanted

00:07:34,849 --> 00:07:41,690
to use air and in fact all of that came

00:07:37,009 --> 00:07:44,539
from this module I used failure how many

00:07:41,690 --> 00:07:48,080
of you are familiar with failure cool I

00:07:44,539 --> 00:07:49,580
used it because I didn't really want to

00:07:48,080 --> 00:07:52,490
deal with all the different arrow types

00:07:49,580 --> 00:07:54,740
and this seemed really easy for me and I

00:07:52,490 --> 00:07:57,050
still use it but what ended up happening

00:07:54,740 --> 00:07:59,690
is that you are not able to compile this

00:07:57,050 --> 00:08:02,090
down to a zoom and so you have to work

00:07:59,690 --> 00:08:04,250
do a workaround and the workaround I did

00:08:02,090 --> 00:08:08,690
is that I had my rust API do the rust

00:08:04,250 --> 00:08:11,509
API things and I rubbed up the rust API

00:08:08,690 --> 00:08:13,400
into a wasn't API so I still had the

00:08:11,509 --> 00:08:16,849
rest and then I wanted the wasum and

00:08:13,400 --> 00:08:18,919
would the was um did or there was I'm

00:08:16,849 --> 00:08:21,020
facing API or the JavaScript facing API

00:08:18,919 --> 00:08:24,560
did is it took that error and it

00:08:21,020 --> 00:08:26,900
formatted it into a jlu and so I was

00:08:24,560 --> 00:08:29,780
just matching on the result and making

00:08:26,900 --> 00:08:31,849
sure there is no error and then just put

00:08:29,780 --> 00:08:34,099
it outputted the string which is a bit

00:08:31,849 --> 00:08:36,709
of a hack and I realize it's a bit of a

00:08:34,099 --> 00:08:38,870
hack but it works really well in and I'm

00:08:36,709 --> 00:08:41,750
still able to have the two things that I

00:08:38,870 --> 00:08:46,399
wanted to have so that's like one of the

00:08:41,750 --> 00:08:48,350
the two ways that I've handled it and so

00:08:46,399 --> 00:08:50,600
I started off this whole project with

00:08:48,350 --> 00:08:52,519
just kind of working with the string

00:08:50,600 --> 00:08:54,529
side of things

00:08:52,519 --> 00:08:56,839
and it worked out really well I think

00:08:54,529 --> 00:08:59,060
and up until a certain point where I

00:08:56,839 --> 00:09:02,209
realized that I needed to be dealing

00:08:59,060 --> 00:09:04,910
with more data types than just a string

00:09:02,209 --> 00:09:07,010
so the MongoDB driver what it returns to

00:09:04,910 --> 00:09:09,620
us is a bunch of different types like

00:09:07,010 --> 00:09:13,790
doubles and decimal 128 and I would be

00:09:09,620 --> 00:09:15,380
losing data integrity along the way as I

00:09:13,790 --> 00:09:17,180
process this data because I keep

00:09:15,380 --> 00:09:19,430
serializing and deserializing and it's

00:09:17,180 --> 00:09:21,769
all just a string so it's never ever a

00:09:19,430 --> 00:09:26,120
decimal 128 which is what I wanted to do

00:09:21,769 --> 00:09:30,440
and what happens is that I realized that

00:09:26,120 --> 00:09:32,899
the no driver can return raw beefs on

00:09:30,440 --> 00:09:35,750
data and no driver is the MongoDB driver

00:09:32,899 --> 00:09:38,209
that I use in my electron app or in my

00:09:35,750 --> 00:09:39,920
JavaScript app and so what I'd have to

00:09:38,209 --> 00:09:43,820
do is then work with that raw piece on

00:09:39,920 --> 00:09:45,230
data and then kind of the other thing I

00:09:43,820 --> 00:09:47,329
realize is that I'm doing a lot of

00:09:45,230 --> 00:09:50,480
serializing and deserializing under the

00:09:47,329 --> 00:09:52,220
hood not necessarily myself but just in

00:09:50,480 --> 00:09:54,889
general there's lots of things happening

00:09:52,220 --> 00:09:57,860
and so if I just can take in the raw

00:09:54,889 --> 00:09:59,600
Beeson and have a Rabi Sun up until the

00:09:57,860 --> 00:10:02,589
very end until ajith the JavaScript

00:09:59,600 --> 00:10:05,029
needs to parse the JavaScript object I

00:10:02,589 --> 00:10:08,420
saved myself a lot of serializing and

00:10:05,029 --> 00:10:10,610
deserializing which is quite nice so I

00:10:08,420 --> 00:10:14,389
have this Rabi Sun which essentially

00:10:10,610 --> 00:10:16,610
turns out to be an array in a buffer or

00:10:14,389 --> 00:10:19,550
an array or buffer in JavaScript but

00:10:16,610 --> 00:10:22,670
what that transfers in rest is is just a

00:10:19,550 --> 00:10:24,740
vector which is really nice and seems

00:10:22,670 --> 00:10:26,329
like a straightforward data type but

00:10:24,740 --> 00:10:28,940
what I just told you earlier is that

00:10:26,329 --> 00:10:32,750
you're only able to work with an error

00:10:28,940 --> 00:10:35,600
of value in a string so how do we make

00:10:32,750 --> 00:10:37,819
the two of those work with Waze and bind

00:10:35,600 --> 00:10:40,550
Jen and I found out about this great

00:10:37,819 --> 00:10:45,529
called J Isis has anybody heard of it

00:10:40,550 --> 00:10:48,319
before yeah so J says does a bunch of

00:10:45,529 --> 00:10:52,100
this stuff for you so I'm able to

00:10:48,319 --> 00:10:54,519
actually use a vector and along amongst

00:10:52,100 --> 00:10:58,610
other things so what it is is a bunch of

00:10:54,519 --> 00:11:00,380
bindings - Raghava script api's and the

00:10:58,610 --> 00:11:02,540
JavaScript API is are available are

00:11:00,380 --> 00:11:04,610
things like being able to work with an

00:11:02,540 --> 00:11:05,660
actual object being able to work with a

00:11:04,610 --> 00:11:06,980
function the

00:11:05,660 --> 00:11:09,980
able to work with the u n-- date re

00:11:06,980 --> 00:11:12,410
which is frankly exactly what i need it

00:11:09,980 --> 00:11:14,690
in that particular case because a un

00:11:12,410 --> 00:11:18,010
Turay you and eight array could be

00:11:14,690 --> 00:11:21,010
hacked into a vector pretty easily so

00:11:18,010 --> 00:11:24,230
how that ended up working is that i

00:11:21,010 --> 00:11:27,680
instead of taking a string I accepted a

00:11:24,230 --> 00:11:31,730
un8 array and I did some magic in

00:11:27,680 --> 00:11:33,980
between and then I was able to just be

00:11:31,730 --> 00:11:37,070
able to decode a document based on that

00:11:33,980 --> 00:11:39,110
particular slice that I have taken the

00:11:37,070 --> 00:11:41,300
magic in between is actually kind of

00:11:39,110 --> 00:11:42,680
interesting and this is exactly what

00:11:41,300 --> 00:11:46,880
you'd have to be doing if you're

00:11:42,680 --> 00:11:49,580
accepting any kind of array like thing

00:11:46,880 --> 00:11:52,160
in JavaScript in rest Lam so you would

00:11:49,580 --> 00:11:53,930
have to create a vector based on the

00:11:52,160 --> 00:11:56,930
size of U and eight you're taking and

00:11:53,930 --> 00:12:00,530
then you copy that and to copy that in

00:11:56,930 --> 00:12:02,870
to copy that in you and eight array into

00:12:00,530 --> 00:12:06,800
that vector you just created and then

00:12:02,870 --> 00:12:08,720
you do the sum slice magic basically is

00:12:06,800 --> 00:12:10,280
the way I would describe it and that

00:12:08,720 --> 00:12:13,640
kind of happens with all the other kind

00:12:10,280 --> 00:12:17,770
of array like structures which is kind

00:12:13,640 --> 00:12:19,430
of neat but what it resulted in is a

00:12:17,770 --> 00:12:22,910
much faster

00:12:19,430 --> 00:12:27,350
API but also in an API that allows me to

00:12:22,910 --> 00:12:29,620
keep all the data integrity intact which

00:12:27,350 --> 00:12:33,650
is good

00:12:29,620 --> 00:12:36,530
given that now I am able to have access

00:12:33,650 --> 00:12:39,170
to all these JavaScript API eyes I can

00:12:36,530 --> 00:12:41,060
also now work with better errors so

00:12:39,170 --> 00:12:44,780
instead of having like a string to fide

00:12:41,060 --> 00:12:47,420
error that I ended up with I can

00:12:44,780 --> 00:12:49,070
actually use a properly formatted

00:12:47,420 --> 00:12:52,550
JavaScript errors which is like for

00:12:49,070 --> 00:12:54,410
example typer or eval error arranger and

00:12:52,550 --> 00:12:57,470
things like that so I can format it as I

00:12:54,410 --> 00:13:00,350
go at the end of the whole API being

00:12:57,470 --> 00:13:02,030
worked on but they're more interesting

00:13:00,350 --> 00:13:04,790
side of things if you worked was but

00:13:02,030 --> 00:13:07,900
with wasn't before is being able to

00:13:04,790 --> 00:13:12,380
debug it when you get to JavaScript

00:13:07,900 --> 00:13:15,650
stuff and so guess this is like speaking

00:13:12,380 --> 00:13:17,720
of errors there's a bunch of different

00:13:15,650 --> 00:13:21,380
things that will come through as you

00:13:17,720 --> 00:13:24,890
as you develop your azzam project and a

00:13:21,380 --> 00:13:27,800
lot of them is just runtime exceptions

00:13:24,890 --> 00:13:31,370
and unexpected errors and so a runtime

00:13:27,800 --> 00:13:34,520
error if you get it is looking like this

00:13:31,370 --> 00:13:37,490
it's if I just log it out in JavaScript

00:13:34,520 --> 00:13:39,860
it comes up as an unreachable runtime

00:13:37,490 --> 00:13:42,410
error and it shows you kind of the

00:13:39,860 --> 00:13:45,980
pointers with the wasn't functions that

00:13:42,410 --> 00:13:49,000
come through and you can kind of go

00:13:45,980 --> 00:13:51,740
through various things that come through

00:13:49,000 --> 00:13:54,290
so this one was happening in my API

00:13:51,740 --> 00:13:56,570
called write raw and then I can click

00:13:54,290 --> 00:14:00,170
through it and see where it points me to

00:13:56,570 --> 00:14:06,440
but it kind of points me to this more or

00:14:00,170 --> 00:14:09,530
less undo bugaboo code and so it's not

00:14:06,440 --> 00:14:11,390
particularly useful and in that sense

00:14:09,530 --> 00:14:14,780
but at least it points you to the fact

00:14:11,390 --> 00:14:18,920
that it's one of your API points that is

00:14:14,780 --> 00:14:22,190
causing this particular error number two

00:14:18,920 --> 00:14:24,170
error that comes through is the one you

00:14:22,190 --> 00:14:27,970
would as an exception you would throw

00:14:24,170 --> 00:14:30,230
this one's a little bit more I guess

00:14:27,970 --> 00:14:31,880
readable in the sense that DD you do

00:14:30,230 --> 00:14:34,610
have a wasn't bind and throwing and he

00:14:31,880 --> 00:14:36,440
do have a particular method that's

00:14:34,610 --> 00:14:38,750
getting thrown so in this particular

00:14:36,440 --> 00:14:42,650
case it was a two object method that was

00:14:38,750 --> 00:14:44,450
getting thrown and it would come from

00:14:42,650 --> 00:14:47,780
something like this not particular type

00:14:44,450 --> 00:14:50,120
error but a jss error I created to get

00:14:47,780 --> 00:14:51,740
this error to be thrown and then you can

00:14:50,120 --> 00:14:54,040
also click through a little bit so some

00:14:51,740 --> 00:14:59,720
of the stuff is not very readable so I

00:14:54,040 --> 00:15:01,700
should click on the particular

00:14:59,720 --> 00:15:05,000
JavaScript pointer and then if I go to

00:15:01,700 --> 00:15:08,360
the wasum unnamed portion of things I

00:15:05,000 --> 00:15:10,540
get to this which is not as readable as

00:15:08,360 --> 00:15:13,730
that JavaScript error you get through

00:15:10,540 --> 00:15:17,150
and to object is that particular method

00:15:13,730 --> 00:15:19,820
that's throwing this error so this is

00:15:17,150 --> 00:15:21,800
what an exception looks like there's

00:15:19,820 --> 00:15:24,830
also errors that are just kind of

00:15:21,800 --> 00:15:28,940
difficult to get through and I like to

00:15:24,830 --> 00:15:30,720
call them this is a particular one I've

00:15:28,940 --> 00:15:34,199
been getting quite often for very

00:15:30,720 --> 00:15:36,089
different things that has caused me a

00:15:34,199 --> 00:15:37,649
lot of headaches but there's a few

00:15:36,089 --> 00:15:40,470
things that I figured out how to be able

00:15:37,649 --> 00:15:42,149
to get through it so what this reads is

00:15:40,470 --> 00:15:43,980
that it's an uncaught error and there's

00:15:42,149 --> 00:15:46,170
your cursive use of an object detected

00:15:43,980 --> 00:15:49,079
which would leave to unsay it aligns al

00:15:46,170 --> 00:15:52,019
icing in rust and so when I first got

00:15:49,079 --> 00:15:53,639
this I wanted to get through like which

00:15:52,019 --> 00:15:56,790
part I wasn't buying Jen this comes

00:15:53,639 --> 00:15:58,319
through or which part of my code it

00:15:56,790 --> 00:15:59,759
comes through so the first thing I

00:15:58,319 --> 00:16:02,389
notice is that it's coming from two

00:15:59,759 --> 00:16:05,550
object which is one of my API methods

00:16:02,389 --> 00:16:08,399
and in particular and this part of my

00:16:05,550 --> 00:16:10,980
code which is the JavaScript compiled of

00:16:08,399 --> 00:16:12,779
wasn't bind Jen by it wasn't mine Jen so

00:16:10,980 --> 00:16:14,370
that's not particularly useful so I

00:16:12,779 --> 00:16:18,839
wanted to dig into there was and bind

00:16:14,370 --> 00:16:22,019
Jen side of things so I kind of went in

00:16:18,839 --> 00:16:24,389
and just googled this exact error and

00:16:22,019 --> 00:16:26,220
what did resulted is that wasn't binder

00:16:24,389 --> 00:16:28,230
and had a Bora fail somewhere so

00:16:26,220 --> 00:16:32,120
somewhere in my code I was not handling

00:16:28,230 --> 00:16:34,709
boring properly perhaps perhaps I wasn't

00:16:32,120 --> 00:16:37,290
so this bora fail comes from a different

00:16:34,709 --> 00:16:39,930
part of an in Poland this is a lozen ref

00:16:37,290 --> 00:16:41,970
cell which at some point in time I

00:16:39,930 --> 00:16:43,079
figured out that I was not in fact using

00:16:41,970 --> 00:16:46,430
I don't think my code is that

00:16:43,079 --> 00:16:51,420
complicated to be using was in ref sil

00:16:46,430 --> 00:16:53,250
and so what I realized is that actually

00:16:51,420 --> 00:16:56,430
this particular time and there's

00:16:53,250 --> 00:16:58,290
multiple other times this particular one

00:16:56,430 --> 00:17:00,629
was coming from an implemented called I

00:16:58,290 --> 00:17:03,959
was throwing which I put in while I was

00:17:00,629 --> 00:17:07,740
just kind of hacking on a thing which

00:17:03,959 --> 00:17:11,120
sucks yeah so this was an implemented

00:17:07,740 --> 00:17:13,679
call that was stirring the whole air

00:17:11,120 --> 00:17:17,010
this is obviously fixed now and I'm

00:17:13,679 --> 00:17:18,809
itching on all the possible values and

00:17:17,010 --> 00:17:20,939
you know when you're starting to just

00:17:18,809 --> 00:17:22,650
put things together you kind of do

00:17:20,939 --> 00:17:24,449
unimplemented and then you forget about

00:17:22,650 --> 00:17:26,789
them and obviously the compiler will not

00:17:24,449 --> 00:17:29,130
complain and you will reach this error

00:17:26,789 --> 00:17:31,530
at some point in run time and so that's

00:17:29,130 --> 00:17:34,860
the error you'll get so if you get

00:17:31,530 --> 00:17:36,600
implemented that's what it is but

00:17:34,860 --> 00:17:39,120
there's a bunch of other things that

00:17:36,600 --> 00:17:40,750
kind of get to you that return other

00:17:39,120 --> 00:17:43,800
errors and I was gonna

00:17:40,750 --> 00:17:54,430
to show you another one that I run into

00:17:43,800 --> 00:17:58,090
maybe a couple of weeks ago right so

00:17:54,430 --> 00:17:59,890
this is my an instance of this

00:17:58,090 --> 00:18:05,370
particular plugin that does this schema

00:17:59,890 --> 00:18:05,370
analysis and I'll open up the terminal

00:18:07,440 --> 00:18:12,130
so it's meant to analyze the whole

00:18:09,970 --> 00:18:14,950
schema and output this little beautiful

00:18:12,130 --> 00:18:17,140
graph of the different fuel types but

00:18:14,950 --> 00:18:20,610
instead of what I get is that I get a

00:18:17,140 --> 00:18:23,830
memory access out of bounds from wasum

00:18:20,610 --> 00:18:27,190
and actually this particular error does

00:18:23,830 --> 00:18:29,590
not give me any sort of wasum things to

00:18:27,190 --> 00:18:34,200
debug it just gives me mostly like

00:18:29,590 --> 00:18:34,200
JavaScript side of code to debug but

00:18:34,500 --> 00:18:39,820
what I can tell is that it's coming

00:18:36,610 --> 00:18:45,250
somewhere from here which is exactly

00:18:39,820 --> 00:18:46,990
where I'm throwing it which is here but

00:18:45,250 --> 00:18:50,500
basically what it's happening is that my

00:18:46,990 --> 00:18:52,360
write raw API is storing somewhere

00:18:50,500 --> 00:18:54,970
this particular error was really fun to

00:18:52,360 --> 00:19:01,210
debug and what happened is that in my

00:18:54,970 --> 00:19:04,180
code at some point in time I was kind of

00:19:01,210 --> 00:19:07,480
doing a little bit of a for Val in array

00:19:04,180 --> 00:19:09,130
and what I wanted to do is that I wanted

00:19:07,480 --> 00:19:12,760
to be able to create a particular value

00:19:09,130 --> 00:19:14,710
and I was using this value and of what I

00:19:12,760 --> 00:19:17,470
realized is that because I'm doing a for

00:19:14,710 --> 00:19:21,850
Val what I should be using is better

00:19:17,470 --> 00:19:23,680
names first of all but second of all I

00:19:21,850 --> 00:19:28,480
should actually be using the value that

00:19:23,680 --> 00:19:31,570
I am for in each so that memory out of

00:19:28,480 --> 00:19:34,810
bounds came from a few instances of that

00:19:31,570 --> 00:19:37,390
and caused a little bit of a headache

00:19:34,810 --> 00:19:38,800
and a little bit of commenting out a

00:19:37,390 --> 00:19:42,220
bunch of code and running it and

00:19:38,800 --> 00:19:43,750
compiling it again so I'm gonna compile

00:19:42,220 --> 00:19:46,080
it and show you what the actual code

00:19:43,750 --> 00:19:46,080
looks like

00:19:54,759 --> 00:20:00,139
just gonna build it with Waze and pack

00:19:57,559 --> 00:20:23,179
I'm people have heard it was impact

00:20:00,139 --> 00:20:29,570
before cool to an extent yeah but a lot

00:20:23,179 --> 00:20:32,440
of it is run time as well or that did

00:20:29,570 --> 00:20:32,440
not compile did it

00:20:40,850 --> 00:20:46,940
I kind of been open I wanted to show you

00:20:43,940 --> 00:20:48,130
the actual thing sorry I'm gonna skip

00:20:46,940 --> 00:20:52,040
over it

00:20:48,130 --> 00:20:54,350
maybe sure you'd get fun Twitter right

00:20:52,040 --> 00:20:57,470
so another so at that point in time I

00:20:54,350 --> 00:20:59,390
was kind of panicking because there's a

00:20:57,470 --> 00:21:01,070
lot of different things that kind of

00:20:59,390 --> 00:21:04,490
were not working out the way I wanted it

00:21:01,070 --> 00:21:06,590
to be and so I found out about this

00:21:04,490 --> 00:21:08,960
great console era panic hook which has

00:21:06,590 --> 00:21:11,750
helped out quite a bit and what it does

00:21:08,960 --> 00:21:14,000
is it gives you the rest suck trace when

00:21:11,750 --> 00:21:17,240
you do end up panicking which is a

00:21:14,000 --> 00:21:19,610
little bit more helpful at some point I

00:21:17,240 --> 00:21:24,200
was indexing into something that had a

00:21:19,610 --> 00:21:27,050
length of 0 and this in fact can be

00:21:24,200 --> 00:21:28,430
covered by a test and rust I think at

00:21:27,050 --> 00:21:29,810
this point of time but at least it gives

00:21:28,430 --> 00:21:31,700
you like a little bit of a stock trace

00:21:29,810 --> 00:21:33,050
which is nice so that was a really

00:21:31,700 --> 00:21:35,600
useful crate for me to use when

00:21:33,050 --> 00:21:37,280
debugging the other thing is this was

00:21:35,600 --> 00:21:39,530
kind of like a side project that I did

00:21:37,280 --> 00:21:43,490
for logging which pretty prints your

00:21:39,530 --> 00:21:45,200
logs for you but there was a PR to make

00:21:43,490 --> 00:21:48,350
it also work in azzam and what that

00:21:45,200 --> 00:21:50,630
allowed me to do is be able to have Russ

00:21:48,350 --> 00:21:53,510
numbers when I'm console.log so I can

00:21:50,630 --> 00:21:57,560
kind of eliminate the eliminate where

00:21:53,510 --> 00:21:59,690
exactly stuff is coming from so lots of

00:21:57,560 --> 00:22:01,070
rest numbers were coming through and I

00:21:59,690 --> 00:22:03,500
was able to kind of figure out which

00:22:01,070 --> 00:22:05,630
parts of the code at least were kind of

00:22:03,500 --> 00:22:10,640
passing by and which ones are not

00:22:05,630 --> 00:22:12,710
we're not so at that point in time I

00:22:10,640 --> 00:22:15,800
wanted to build again and another error

00:22:12,710 --> 00:22:18,100
you can get is coming from some of the

00:22:15,800 --> 00:22:21,530
libraries your could be using internally

00:22:18,100 --> 00:22:24,980
or internally internally internally so

00:22:21,530 --> 00:22:27,290
in this case what happened was that one

00:22:24,980 --> 00:22:32,900
of my dependencies which was Abby's on

00:22:27,290 --> 00:22:36,620
crate was using a Lipsy dependency or

00:22:32,900 --> 00:22:40,160
was having a Lipsy dependency and their

00:22:36,620 --> 00:22:43,220
way to solve that is watch out for

00:22:40,160 --> 00:22:46,610
plates that have Lipsy and work out for

00:22:43,220 --> 00:22:49,520
a workaround but also kind of have two

00:22:46,610 --> 00:22:53,540
builds that this be some crate ended up

00:22:49,520 --> 00:22:54,730
having for a little while until it got

00:22:53,540 --> 00:22:57,010
completely

00:22:54,730 --> 00:22:59,049
eliminated so you can have two different

00:22:57,010 --> 00:23:03,429
targets that you're building for one is

00:22:59,049 --> 00:23:08,919
132 that does not have to use Lipsey and

00:23:03,429 --> 00:23:11,169
one is not for wasn't 32 that can use

00:23:08,919 --> 00:23:15,429
Lipsy and then when you compile it down

00:23:11,169 --> 00:23:18,850
you're then not using wise I'm 32 so

00:23:15,429 --> 00:23:22,630
it's kind of a way to be able to compile

00:23:18,850 --> 00:23:25,330
down still without having to use it and

00:23:22,630 --> 00:23:27,700
kind of the thing here is beware of

00:23:25,330 --> 00:23:29,049
anything that uses anything from the

00:23:27,700 --> 00:23:31,690
system because that's not what I'm

00:23:29,049 --> 00:23:33,520
compatible including Lipsy so I wanted

00:23:31,690 --> 00:23:35,559
to show you how this actually worked but

00:23:33,520 --> 00:23:38,950
clearing the live demos don't work

00:23:35,559 --> 00:23:40,360
I specifically fixed my code to have an

00:23:38,950 --> 00:23:43,150
error so I can show you an error and now

00:23:40,360 --> 00:23:47,860
it doesn't compile but anyway I hope you

00:23:43,150 --> 00:24:00,190
enjoyed this mess of a wizened cake and

00:23:47,860 --> 00:24:08,650
thanks for listening yeah we can do

00:24:00,190 --> 00:24:11,860
questions yeah no I haven't tried that

00:24:08,650 --> 00:24:14,440
the way I wanted to do it was to have

00:24:11,860 --> 00:24:18,070
both waz M tests and Russ tests in my

00:24:14,440 --> 00:24:20,530
crate but that is not possible if you

00:24:18,070 --> 00:24:24,010
have both rust and wasum compilation you

00:24:20,530 --> 00:24:26,230
can only do was um I don't exactly

00:24:24,010 --> 00:24:28,330
remember what it is but when I was

00:24:26,230 --> 00:24:30,870
trying to run it you can do both at the

00:24:28,330 --> 00:24:30,870
same time

00:24:41,310 --> 00:24:47,560
yeah so if you have a if you have a like

00:24:45,670 --> 00:24:49,540
a lip secret you will not be able to

00:24:47,560 --> 00:24:52,090
even compile it down so that's kind of

00:24:49,540 --> 00:24:54,070
when you build to wasum you'll get that

00:24:52,090 --> 00:25:09,550
error before you before you get to

00:24:54,070 --> 00:25:11,380
runtime No

00:25:09,550 --> 00:25:13,060
so console air panic hook is the one

00:25:11,380 --> 00:25:16,570
that gives you a little bit of a stack

00:25:13,060 --> 00:25:18,520
trace from arrest but not necessarily

00:25:16,570 --> 00:25:20,950
always so with the index out of bounds

00:25:18,520 --> 00:25:22,840
it was not able to give me a stack trace

00:25:20,950 --> 00:25:25,240
but sometimes it'll give you back the

00:25:22,840 --> 00:25:28,350
rest error so at least that will point

00:25:25,240 --> 00:25:32,220
you out to where you actually have to go

00:25:28,350 --> 00:25:32,220
but that's only for panics

00:25:39,080 --> 00:25:46,109
[Applause]

00:25:47,640 --> 00:25:54,839

YouTube URL: https://www.youtube.com/watch?v=RKATJmsCyI8


