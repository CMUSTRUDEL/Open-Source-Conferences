Title: My first program for the MXCHIP IoT DevKit â€” Olivier Goffart
Publication date: 2020-02-05
Playlist: Rust and Tell Berlin
Description: 
	From the Rust Berlin's January "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/) 

Olivier Goffart: https://github.com/ogoffart

Hosted at Prisma: https://www.prisma.io/

ðŸŽ¥ Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:05,250 --> 00:00:10,889
so here I'm gonna talk about some

00:00:08,820 --> 00:00:15,809
embedded program I did for some

00:00:10,889 --> 00:00:18,600
microcontrollers I received so let's

00:00:15,809 --> 00:00:20,730
talk first about myself so I walk

00:00:18,600 --> 00:00:23,660
forward books so basically I'm a C++

00:00:20,730 --> 00:00:27,769
developer and I earn my money by

00:00:23,660 --> 00:00:30,929
basically consulting and contracting for

00:00:27,769 --> 00:00:33,600
consumer working with C++ and mostly on

00:00:30,929 --> 00:00:37,530
the Qt framework because I've been

00:00:33,600 --> 00:00:39,300
working with a kid-free mode before for

00:00:37,530 --> 00:00:40,800
example recently I was working actually

00:00:39,300 --> 00:00:42,570
as a contractor for the kid company to

00:00:40,800 --> 00:00:45,239
work on the cute for microcontroller

00:00:42,570 --> 00:00:47,309
project so this this is relevant for

00:00:45,239 --> 00:00:49,230
this talk in a way but I mean this

00:00:47,309 --> 00:00:54,539
different kind of medical controller and

00:00:49,230 --> 00:00:57,329
it's in C++ so but so the point is that

00:00:54,539 --> 00:00:59,100
in my free time so I'm not paid yet to

00:00:57,329 --> 00:01:01,680
do some work but I'm a free time I like

00:00:59,100 --> 00:01:04,019
to to develop an arrest so I've learned

00:01:01,680 --> 00:01:07,140
myself first because I think it's a cool

00:01:04,019 --> 00:01:09,299
language act that has good potential as

00:01:07,140 --> 00:01:13,650
other sleepers particular has see some

00:01:09,299 --> 00:01:15,900
some potential there so I'm basically

00:01:13,650 --> 00:01:24,509
like you know must have been doing a few

00:01:15,900 --> 00:01:27,689
create like an old thing but so I'm kind

00:01:24,509 --> 00:01:31,189
of maintaining the the CPP trait which

00:01:27,689 --> 00:01:34,829
allowed to use super specialists and

00:01:31,189 --> 00:01:37,759
give me to object and there was also the

00:01:34,829 --> 00:01:44,310
schema object Clayton I made that a

00:01:37,759 --> 00:01:46,890
lottery is cute and KML from Amherst so

00:01:44,310 --> 00:01:49,409
what's what's there on this program

00:01:46,890 --> 00:01:52,710
yeah so I came to this meetup quayle

00:01:49,409 --> 00:01:54,149
quite a fan already and there so today

00:01:52,710 --> 00:01:55,740
there was no quiz in fortunately but

00:01:54,149 --> 00:01:58,649
most of the time there has a quiz and

00:01:55,740 --> 00:02:03,479
one of the prize is this little thing

00:01:58,649 --> 00:02:07,460
this little micro controller so III

00:02:03,479 --> 00:02:07,460
wonder quiz the know-how

00:02:07,709 --> 00:02:14,739
so I got this I got this this this

00:02:11,410 --> 00:02:16,840
little thing and I thought you guys

00:02:14,739 --> 00:02:20,739
might as well do something with it

00:02:16,840 --> 00:02:22,660
so there was a real explanation cab with

00:02:20,739 --> 00:02:25,780
what what it is I lost the cab but I

00:02:22,660 --> 00:02:28,330
kind of took some notes and so it's

00:02:25,780 --> 00:02:30,810
basically it says it has a an ARM

00:02:28,330 --> 00:02:34,530
processor so it's a cortex m4 and for

00:02:30,810 --> 00:02:40,209
with one hundred megahertz and it has

00:02:34,530 --> 00:02:41,799
200 256 kilo kilobyte of harm so this is

00:02:40,209 --> 00:02:43,630
less than the microcontroller had been

00:02:41,799 --> 00:02:46,989
working for kid because they had like a

00:02:43,630 --> 00:02:50,200
big screen it had up to even ten

00:02:46,989 --> 00:02:52,299
megabytes of hands but so anyway I

00:02:50,200 --> 00:02:54,370
thought okay let's let's try to do some

00:02:52,299 --> 00:02:57,010
hast there I got this thing at the

00:02:54,370 --> 00:03:02,590
hospital I do it so there's a there is a

00:02:57,010 --> 00:03:09,220
UI Highlander on the box so I I hope

00:03:02,590 --> 00:03:11,500
this would work yes so there ya go so

00:03:09,220 --> 00:03:14,590
that's the that's the chip so get a kid

00:03:11,500 --> 00:03:24,069
now what do you have one let's let's get

00:03:14,590 --> 00:03:28,200
started so okay what do I need

00:03:24,069 --> 00:03:31,750
I mean chip okay done

00:03:28,200 --> 00:03:33,220
computer running one of the system well

00:03:31,750 --> 00:03:33,870
I have a Phoenix I hope that's gonna be

00:03:33,220 --> 00:03:39,040
okay

00:03:33,870 --> 00:03:40,959
wait as your subscription yeah I forgot

00:03:39,040 --> 00:03:47,769
to mention that those thing are kind of

00:03:40,959 --> 00:03:49,720
sponsored by Microsoft but okay so I we

00:03:47,769 --> 00:03:54,340
need to subscribe to a zero and then do

00:03:49,720 --> 00:04:01,140
something and I mean that's kind of okay

00:03:54,340 --> 00:04:10,090
I can play this thing cable here

00:04:01,140 --> 00:04:15,700
so how is it like this first ah to be

00:04:10,090 --> 00:04:20,709
here yeah so it shows some self okay

00:04:15,700 --> 00:04:25,380
good but then I mean I don't really want

00:04:20,709 --> 00:04:33,580
to use the ICO account and this is all

00:04:25,380 --> 00:04:35,560
online so yeah I thought okay know how

00:04:33,580 --> 00:04:46,540
to let's let's uh forget how to do

00:04:35,560 --> 00:04:50,050
custom embedded hello yeah okay so there

00:04:46,540 --> 00:04:54,820
has apparently a some some book so first

00:04:50,050 --> 00:04:57,070
link how to do custom embedded and so

00:04:54,820 --> 00:05:00,760
they're basically have some tutorial

00:04:57,070 --> 00:05:05,590
with some other microcontroller so the

00:05:00,760 --> 00:05:08,380
datasheet says I have a stm32f4 12 and

00:05:05,590 --> 00:05:12,000
they're using some kind of other ones

00:05:08,380 --> 00:05:14,070
but okay doesn't matter

00:05:12,000 --> 00:05:17,590
[Music]

00:05:14,070 --> 00:05:22,140
so I basically need to have a rest up

00:05:17,590 --> 00:05:24,520
and I'm having a cortex m4 so I'm just

00:05:22,140 --> 00:05:26,980
using this comment I mean you need to

00:05:24,520 --> 00:05:31,560
increase the font yes so if you have any

00:05:26,980 --> 00:05:33,790
questions or comments just please speak

00:05:31,560 --> 00:05:35,440
so yes so that's the thing we need to

00:05:33,790 --> 00:05:37,990
install host for the target so because

00:05:35,440 --> 00:05:39,520
it's a ARM chip so we need to have the

00:05:37,990 --> 00:05:43,570
signal library and everything compiled

00:05:39,520 --> 00:05:51,070
for this target so we just crossed up to

00:05:43,570 --> 00:05:53,410
this target I'm on Linux I'm an option

00:05:51,070 --> 00:05:57,250
next so I'm gonna answer this so we need

00:05:53,410 --> 00:06:01,180
we need basically gdb for arm and we

00:05:57,250 --> 00:06:03,880
need opener CD which is basically to

00:06:01,180 --> 00:06:08,229
connect some it connects to some

00:06:03,880 --> 00:06:11,120
debugger in here anything we need to set

00:06:08,229 --> 00:06:18,260
some new dev holes we just have to read

00:06:11,120 --> 00:06:20,889
this is tutorial there but didn't let's

00:06:18,260 --> 00:06:20,889
get started

00:06:22,910 --> 00:06:36,710
check if if this is walking so we can

00:06:27,100 --> 00:06:41,030
let's see if I have it so we can use so

00:06:36,710 --> 00:06:43,550
I don't have F so here I have a

00:06:41,030 --> 00:06:47,240
different one so thankfully this is kind

00:06:43,550 --> 00:06:49,400
of odd to completing so it kind of

00:06:47,240 --> 00:06:58,010
connects and so we can check that we are

00:06:49,400 --> 00:07:07,220
connected by opening gdb and you can

00:06:58,010 --> 00:07:10,370
just go gdb and then so this is

00:07:07,220 --> 00:07:14,449
basically I'm using this gdb server so

00:07:10,370 --> 00:07:16,010
this this program open OCD started a

00:07:14,449 --> 00:07:18,590
server on localhost on which I can

00:07:16,010 --> 00:07:22,310
connect and then I connected in gdb and

00:07:18,590 --> 00:07:24,680
then then well there are some

00:07:22,310 --> 00:07:27,200
programming there that's running but we

00:07:24,680 --> 00:07:36,470
know nothing about it so let's let's

00:07:27,200 --> 00:07:37,700
build some program for it the next okay

00:07:36,470 --> 00:07:41,440
I will skip this

00:07:37,700 --> 00:07:48,289
let's go directly to hardware because

00:07:41,440 --> 00:07:49,970
cumin is not so they recommend to use

00:07:48,289 --> 00:07:52,099
some quick stack

00:07:49,970 --> 00:07:54,320
quick quick stack stuff the other day

00:07:52,099 --> 00:07:57,530
with Iago generates so calcio generator

00:07:54,320 --> 00:08:01,639
I didn't know but we need to first

00:07:57,530 --> 00:08:10,310
install install it normally it's ahead

00:08:01,639 --> 00:08:12,860
install yes so go generate I didn't know

00:08:10,310 --> 00:08:15,979
it but it's basically a tool which fetch

00:08:12,860 --> 00:08:17,810
a project from github and just create

00:08:15,979 --> 00:08:20,320
new stuff so it's cool for so for this

00:08:17,810 --> 00:08:20,320
kind of tutorial

00:08:20,660 --> 00:08:29,070
exactly so so this so you give it you

00:08:25,380 --> 00:08:44,790
give it a github address this is the one

00:08:29,070 --> 00:08:46,950
from there right okay so let's I thought

00:08:44,790 --> 00:08:49,020
what what will I do with this so I have

00:08:46,950 --> 00:08:52,520
a little screen to two little buttons I

00:08:49,020 --> 00:08:56,970
thought I'd make a little snake game so

00:08:52,520 --> 00:08:58,290
let's call it embedded snake so we

00:08:56,970 --> 00:09:10,350
didn't like down the scroll but that's

00:08:58,290 --> 00:09:12,450
fine right I'm sorry has some similar in

00:09:10,350 --> 00:09:14,340
me that's kind of useful but there's

00:09:12,450 --> 00:09:18,230
also old information there so it tells

00:09:14,340 --> 00:09:18,230
us okay first we need to edit this file

00:09:18,980 --> 00:09:26,550
config we need to set the white target

00:09:21,660 --> 00:09:29,010
so I'm having a cortex m4 so I'm

00:09:26,550 --> 00:09:33,750
probably with floating-point units so

00:09:29,010 --> 00:09:36,420
I'll just use this target this is a bit

00:09:33,750 --> 00:09:39,360
tricky so we also need to change we need

00:09:36,420 --> 00:09:44,000
to tell the linker which memory has is

00:09:39,360 --> 00:09:47,880
it going to use and so here it's so

00:09:44,000 --> 00:09:49,530
there I kind of find out the hard way by

00:09:47,880 --> 00:09:58,200
trying different address eventually I

00:09:49,530 --> 00:10:01,230
thought like the default so the default

00:09:58,200 --> 00:10:03,750
was zero but it's the same as the one in

00:10:01,230 --> 00:10:05,340
the tutorial and you can you can find

00:10:03,750 --> 00:10:07,770
this in the that datasheet from the

00:10:05,340 --> 00:10:11,640
micro for the CPU so the the arm thing

00:10:07,770 --> 00:10:20,720
but so okay so okay and then we can we

00:10:11,640 --> 00:10:20,720
can try to go build this thing actually

00:10:24,690 --> 00:10:31,180
so this is this is basically the code

00:10:27,250 --> 00:10:33,400
which was which came with this tutorial

00:10:31,180 --> 00:10:36,880
so it's basically no it does nothing why

00:10:33,400 --> 00:10:37,330
to just do a loop so the bill is

00:10:36,880 --> 00:10:47,560
finished

00:10:37,330 --> 00:10:50,050
good so we will use this gdb with with

00:10:47,560 --> 00:10:57,940
the file that was generated so that's

00:10:50,050 --> 00:11:01,180
this one okay so the same the locale

00:10:57,940 --> 00:11:05,110
host so all our thing is still running

00:11:01,180 --> 00:11:07,150
here and this audit order tab this this

00:11:05,110 --> 00:11:13,330
openness OCD so we can still connect to

00:11:07,150 --> 00:11:16,180
this we can load a program and we can

00:11:13,330 --> 00:11:22,330
run it so before running it I'm going to

00:11:16,180 --> 00:11:26,080
put a breakpoint break at main and now

00:11:22,330 --> 00:11:30,400
we can we can run it continue and there

00:11:26,080 --> 00:11:33,910
will I so the breakpoints was reached we

00:11:30,400 --> 00:11:38,080
can continue a bit nothing really

00:11:33,910 --> 00:11:40,330
happens but I had apparently there was

00:11:38,080 --> 00:11:42,400
an infinity infinite loop there but

00:11:40,330 --> 00:11:46,390
that's fine that's basically what the

00:11:42,400 --> 00:11:50,800
program was doing okay first step done

00:11:46,390 --> 00:11:53,950
so it doesn't do much what can we do

00:11:50,800 --> 00:11:56,530
with this so we have a few a few bad

00:11:53,950 --> 00:11:59,200
terms there's a few LEDs there others

00:11:56,530 --> 00:12:01,000
claim first whatever and by the

00:11:59,200 --> 00:12:06,720
developer does is to make a blinking

00:12:01,000 --> 00:12:18,000
LEDs so what how can we do that that's a

00:12:06,720 --> 00:12:21,610
bit let's we do that well there are some

00:12:18,000 --> 00:12:24,600
and we did that already okay and so I'm

00:12:21,610 --> 00:12:24,600
gonna use those creds

00:12:40,650 --> 00:12:46,690
again so I'm going I'm going to use

00:12:43,600 --> 00:12:48,100
those credits so those are some credits

00:12:46,690 --> 00:12:49,750
which are alone which will allow me to

00:12:48,100 --> 00:12:56,770
use this microcontroller without any

00:12:49,750 --> 00:12:58,750
unsafe code we have here stm32f4 credit

00:12:56,770 --> 00:13:03,820
and those are critter actually kind of

00:12:58,750 --> 00:13:07,500
auto-generated from description file so

00:13:03,820 --> 00:13:07,500
we can look at the documentation of its

00:13:10,020 --> 00:13:26,500
links so those those credits have kind

00:13:23,590 --> 00:13:31,300
of auto-generated from some description

00:13:26,500 --> 00:13:37,240
files provided by the manufacturer of

00:13:31,300 --> 00:13:39,970
the CPU and it has all the it in expose

00:13:37,240 --> 00:13:42,400
all this those addresses instead of like

00:13:39,970 --> 00:13:44,470
in know in embedded software you will

00:13:42,400 --> 00:13:47,200
just unsafe and then cast some numbers

00:13:44,470 --> 00:13:56,020
to some address but it it gives names to

00:13:47,200 --> 00:13:57,480
them and there's one one important so

00:13:56,020 --> 00:14:01,060
there's different modules for different

00:13:57,480 --> 00:14:03,370
models and basically the entry point is

00:14:01,060 --> 00:14:05,410
this peripherals data structure which

00:14:03,370 --> 00:14:09,700
contains all of all of the peripherals

00:14:05,410 --> 00:14:12,190
and the only the only safe way to get

00:14:09,700 --> 00:14:17,200
this peripheral is to call the the tech

00:14:12,190 --> 00:14:22,570
function which returns an optional so

00:14:17,200 --> 00:14:30,480
let's go back to the program and it's

00:14:22,570 --> 00:14:33,930
less than is this let's verify an equal

00:14:30,480 --> 00:14:33,930
we need to

00:14:36,359 --> 00:14:52,719
yeah actually I just copy this is you're

00:14:49,269 --> 00:14:55,419
interacting everything but the so we're

00:14:52,719 --> 00:14:58,299
just going to take take this peripheral

00:14:55,419 --> 00:15:00,159
so it's gonna return and an option

00:14:58,299 --> 00:15:03,039
because only the first call to it will

00:15:00,159 --> 00:15:05,499
return something and the second call we

00:15:03,039 --> 00:15:07,569
had to enormous so here's the first call

00:15:05,499 --> 00:15:09,039
on man we can under what but what what

00:15:07,569 --> 00:15:12,039
this means is that there would be only

00:15:09,039 --> 00:15:14,229
one very various for the whole on the

00:15:12,039 --> 00:15:15,999
whole project and if you need to pass a

00:15:14,229 --> 00:15:19,029
few failures to some sub function you

00:15:15,999 --> 00:15:20,199
can move them out home but so usually

00:15:19,029 --> 00:15:22,389
you would do that in your main function

00:15:20,199 --> 00:15:27,209
and then all your sub components they

00:15:22,389 --> 00:15:30,129
would acquire some of the peripherals

00:15:27,209 --> 00:15:36,760
but what what peripherals do we need so

00:15:30,129 --> 00:15:39,950
then there is more so this

00:15:36,760 --> 00:15:39,950
[Music]

00:15:55,230 --> 00:16:03,610
so this is so I googled a bit more about

00:15:59,290 --> 00:16:06,550
this this device and I found the data

00:16:03,610 --> 00:16:19,000
sheet which is kind of is full for for

00:16:06,550 --> 00:16:21,430
doing a development and ho behold and so

00:16:19,000 --> 00:16:22,990
we have we have a few buttons and so we

00:16:21,430 --> 00:16:27,360
see how those buttons are connected so

00:16:22,990 --> 00:16:30,310
here for example we have one one big LED

00:16:27,360 --> 00:16:34,480
which has it's a multi-column LED but

00:16:30,310 --> 00:16:37,180
it's actually three LED which like blue

00:16:34,480 --> 00:16:39,310
red and blue and then there is a few

00:16:37,180 --> 00:16:41,590
more LEDs on the sides which have been

00:16:39,310 --> 00:16:43,780
one by one and what this data sheet is

00:16:41,590 --> 00:16:46,780
telling us is well where the thing is

00:16:43,780 --> 00:16:49,650
connected so if we zoom in we see that

00:16:46,780 --> 00:16:55,660
the red LED for example is connected to

00:16:49,650 --> 00:16:59,830
B pb4 so what does PB for means it's

00:16:55,660 --> 00:17:03,940
basically the the port before and this

00:16:59,830 --> 00:17:07,600
corresponds to some GPIO and so GP a-- i

00:17:03,940 --> 00:17:08,860
also didn't know that i just i just try

00:17:07,600 --> 00:17:11,949
to try to find that out and then by

00:17:08,860 --> 00:17:15,010
searching I found that so GP I do i oh

00:17:11,949 --> 00:17:18,490
stands for general purpose input output

00:17:15,010 --> 00:17:20,920
and in all in our data structure here

00:17:18,490 --> 00:17:26,530
and peripherals we have we have some

00:17:20,920 --> 00:17:32,380
some of those GPIO yeah so for example

00:17:26,530 --> 00:17:39,040
the DPI I will be strange destiny stuff

00:17:32,380 --> 00:17:41,680
in it and what can we do does so the

00:17:39,040 --> 00:17:44,290
this GPIO be basically the structure

00:17:41,680 --> 00:17:50,140
which what's a pointer but you don't

00:17:44,290 --> 00:17:53,160
need to use that there is strange I

00:17:50,140 --> 00:17:53,160
don't see it in the documentation

00:17:57,830 --> 00:18:04,380
yeah yes I'm the it's the it's the white

00:18:02,070 --> 00:18:08,480
one I'm not the lightest which is due

00:18:04,380 --> 00:18:12,960
because the other one is invisible but

00:18:08,480 --> 00:18:19,650
let's go back to our main program and so

00:18:12,960 --> 00:18:23,790
this GPIO is then can we split into each

00:18:19,650 --> 00:18:24,180
individual components so the write the

00:18:23,790 --> 00:18:27,720
letter

00:18:24,180 --> 00:18:30,360
the red LED was connected to B before so

00:18:27,720 --> 00:18:33,450
we just ask for the bit before thing and

00:18:30,360 --> 00:18:36,350
I would only like to have the

00:18:33,450 --> 00:18:36,350
documentation of this

00:19:01,830 --> 00:19:20,850
it is kind of big so let's try to see

00:19:08,710 --> 00:19:26,610
you on all the same anyway thing right

00:19:20,850 --> 00:19:30,820
okay but basically with a when you have

00:19:26,610 --> 00:19:33,610
microcontrollers basically a lot of

00:19:30,820 --> 00:19:35,230
things connected to those pins and the

00:19:33,610 --> 00:19:38,490
pins they can either be input or output

00:19:35,230 --> 00:19:41,500
or and even when the inputs they can be

00:19:38,490 --> 00:19:43,210
analog or digital and you need to

00:19:41,500 --> 00:19:45,960
configure by setting some other values

00:19:43,210 --> 00:19:49,090
to some other registers to tell no this

00:19:45,960 --> 00:19:51,040
this pin is going to be it's me is

00:19:49,090 --> 00:19:53,560
meaning that and the way to do that

00:19:51,040 --> 00:19:55,930
usually in C is that you just write some

00:19:53,560 --> 00:19:57,130
value to some register you have to make

00:19:55,930 --> 00:20:00,580
sure it's the right value and then you

00:19:57,130 --> 00:20:02,650
can use the pin as a you can either read

00:20:00,580 --> 00:20:06,550
from it or quite to it to this register

00:20:02,650 --> 00:20:08,620
but what where does the heart model of

00:20:06,550 --> 00:20:12,460
course is being safe and you it's in the

00:20:08,620 --> 00:20:15,390
type system so I'm I unfortunately this

00:20:12,460 --> 00:20:24,520
documentation is kind of them not there

00:20:15,390 --> 00:20:29,160
but but it's in the type system so you

00:20:24,520 --> 00:20:34,690
say okay I want to configure this as a

00:20:29,160 --> 00:20:39,490
output pin in Medel push pull and then

00:20:34,690 --> 00:20:45,070
you and then it returns and pin which

00:20:39,490 --> 00:20:46,630
then you can set high or low and for

00:20:45,070 --> 00:20:50,380
example if you have a button the button

00:20:46,630 --> 00:20:52,870
which is connected to P f4 and t8 n then

00:20:50,380 --> 00:20:58,000
I'm configure them into input pin

00:20:52,870 --> 00:20:59,770
because the buttons and so again the the

00:20:58,000 --> 00:21:02,770
type system make sure that you cannot

00:20:59,770 --> 00:21:05,350
misuse this because the pain is

00:21:02,770 --> 00:21:08,260
configured as input or output and then

00:21:05,350 --> 00:21:10,750
and then you have the right thing so no

00:21:08,260 --> 00:21:12,730
you don't have weird stuff what happens

00:21:10,750 --> 00:21:14,810
why I'm setting value in this register

00:21:12,730 --> 00:21:17,540
that doesn't do anything

00:21:14,810 --> 00:21:35,120
so here we have this program so let's

00:21:17,540 --> 00:21:37,850
let's actually Hornets go build so yeah

00:21:35,120 --> 00:21:40,190
so this program basically just I just

00:21:37,850 --> 00:21:42,170
assigned some value to all the all the

00:21:40,190 --> 00:21:44,360
pins and then I'm going to set the blue

00:21:42,170 --> 00:21:52,930
the blue LEDs to high so I'm going to

00:21:44,360 --> 00:21:52,930
turn it on and off so it's building I

00:21:56,140 --> 00:22:02,030
have seen that going faster that's

00:21:59,270 --> 00:22:06,550
that's the demo sector I hope they

00:22:02,030 --> 00:22:06,550
didn't not just updated a crazy form

00:22:12,460 --> 00:22:32,510
let's try again did I not copy paste

00:22:26,690 --> 00:22:35,870
quickly maybe I didn't say ok I didn't

00:22:32,510 --> 00:22:39,980
save the only thing ok no it's it's it's

00:22:35,870 --> 00:22:41,210
been so I can run again I will just type

00:22:39,980 --> 00:22:45,250
this comment here on the command line so

00:22:41,210 --> 00:22:45,250
I don't have to tell tap them every time

00:22:58,210 --> 00:23:19,340
and yep that's it it's blinking we can

00:23:08,360 --> 00:23:22,960
do okay so what else do we have on this

00:23:19,340 --> 00:23:22,960
thing we have like a little screen so

00:23:33,760 --> 00:23:38,420
[Music]

00:23:35,560 --> 00:23:40,430
the type system actually prevent you

00:23:38,420 --> 00:23:45,620
from making thanks for instance what

00:23:40,430 --> 00:23:47,420
happens if you make let the LED be an

00:23:45,620 --> 00:23:49,610
input and then try to set it too high

00:23:47,420 --> 00:24:01,310
all right good good questions so if I

00:23:49,610 --> 00:24:04,880
try to put energy LED be an input then

00:24:01,310 --> 00:24:07,010
let's try to compile no so so because

00:24:04,880 --> 00:24:10,070
the pin know is configured as inputs so

00:24:07,010 --> 00:24:13,520
it doesn't have it doesn't have you

00:24:10,070 --> 00:24:15,950
cannot set it you can only hit commit so

00:24:13,520 --> 00:24:21,110
that's I personally I think this is the

00:24:15,950 --> 00:24:23,060
this is this makes it quite safe it's

00:24:21,110 --> 00:24:25,510
it's well it's a nice nice thing about

00:24:23,060 --> 00:24:25,510
trust

00:24:25,690 --> 00:24:28,690
yes

00:24:30,090 --> 00:24:34,890
can you can you change the type of pin

00:24:32,600 --> 00:24:36,690
at some point in your program like

00:24:34,890 --> 00:24:39,180
turning into it into an output yes you

00:24:36,690 --> 00:24:42,630
can do that so you because it so this

00:24:39,180 --> 00:24:45,300
into into pin basically move the pin to

00:24:42,630 --> 00:24:49,620
the to these things so you could say you

00:24:45,300 --> 00:24:52,670
could first say it first you could have

00:24:49,620 --> 00:25:00,360
it as an input do something with it and

00:24:52,670 --> 00:25:01,200
then and then well it would be an

00:25:00,360 --> 00:25:09,030
another name

00:25:01,200 --> 00:25:17,700
well it's I cannot use the name but then

00:25:09,030 --> 00:25:19,500
I can put it back too so I can I can

00:25:17,700 --> 00:25:21,570
first set it as an input do something

00:25:19,500 --> 00:25:24,540
with it and then I can turn it back as

00:25:21,570 --> 00:25:32,910
an as an output and it's a different

00:25:24,540 --> 00:25:38,100
type so it's but it's it's fine so let's

00:25:32,910 --> 00:25:40,350
try to use this this screen no so

00:25:38,100 --> 00:25:43,620
there's so I looked for the the screen

00:25:40,350 --> 00:25:45,900
what what drives what screen is this it

00:25:43,620 --> 00:25:48,450
turns out that it's this component and

00:25:45,900 --> 00:25:55,650
there's a crate for it so let's just use

00:25:48,450 --> 00:25:59,750
this that's the careful and that's again

00:25:55,650 --> 00:25:59,750
cookie or this or this sample code

00:26:15,120 --> 00:26:22,419
okay so this this the screen is

00:26:19,330 --> 00:26:24,820
connected with I to see and I to see is

00:26:22,419 --> 00:26:27,070
a protocol to communicate between the

00:26:24,820 --> 00:26:32,230
CPU and the screen and it basically just

00:26:27,070 --> 00:26:36,899
need two pins we can see that under on

00:26:32,230 --> 00:26:39,970
this component where is it the screen

00:26:36,899 --> 00:26:42,870
that's this so and the screen basically

00:26:39,970 --> 00:26:51,220
is connected with the pin pb8 and pb9

00:26:42,870 --> 00:26:55,360
and yeah i - i - c so again as who are

00:26:51,220 --> 00:26:57,909
creates here we can create an ice I - C

00:26:55,360 --> 00:26:59,409
device because it's kind common kind of

00:26:57,909 --> 00:27:02,529
comments so they have abstraction for

00:26:59,409 --> 00:27:07,149
that and we get we give them the the p

00:27:02,529 --> 00:27:09,250
p8 and p9 and a few other configuration

00:27:07,149 --> 00:27:12,340
that just took the default stuff from

00:27:09,250 --> 00:27:16,480
the example from the the screen driver

00:27:12,340 --> 00:27:18,549
and then we can connect with i2c and we

00:27:16,480 --> 00:27:22,929
get a graphics mode and that comes from

00:27:18,549 --> 00:27:25,690
the embedded graphics credit and this

00:27:22,929 --> 00:27:30,580
basically a lot to do a few field

00:27:25,690 --> 00:27:52,480
holding I'll keep my loop here so let's

00:27:30,580 --> 00:27:59,860
try okay so a few warnings the end yeah

00:27:52,480 --> 00:28:16,929
so we have so thankfully I have a webcam

00:27:59,860 --> 00:28:19,659
so yeah so here we have like a little so

00:28:16,929 --> 00:28:27,970
first we have latest a blinking and we

00:28:19,659 --> 00:28:29,919
have like Al a triangle so we have so

00:28:27,970 --> 00:28:34,380
that's what we do basically we do three

00:28:29,919 --> 00:28:37,480
lines three lines to make a triangle we

00:28:34,380 --> 00:28:40,779
rectangular in with all a circle so we

00:28:37,480 --> 00:28:43,870
have that and horses thing so that's

00:28:40,779 --> 00:28:46,450
basically what I need - so that's

00:28:43,870 --> 00:28:49,230
basically what we need to get to get

00:28:46,450 --> 00:28:53,039
some more complex little game working

00:28:49,230 --> 00:29:01,720
then again I'm gonna just copy paste for

00:28:53,039 --> 00:29:06,059
this thing so and you have to think my

00:29:01,720 --> 00:29:06,059
time is how much time do I still have

00:29:08,460 --> 00:29:16,169
yes right I can just copy paste and this

00:29:28,899 --> 00:29:31,899
okay

00:29:35,350 --> 00:29:39,850
so we build yep

00:29:42,790 --> 00:29:52,340
and so now we have those two buttons so

00:29:50,150 --> 00:29:55,220
I'm hitting the input of this button and

00:29:52,340 --> 00:29:58,730
I can pilot it's really hard to do that

00:29:55,220 --> 00:30:10,580
to know I really I would try to make it

00:29:58,730 --> 00:30:14,120
a bit bigger first it's just and when it

00:30:10,580 --> 00:30:15,710
takes a thing and the screen is

00:30:14,120 --> 00:30:18,290
basically it's a monochrome screen but

00:30:15,710 --> 00:30:19,940
it has to color to color but it's like

00:30:18,290 --> 00:30:27,230
hard-coded in the screen what other

00:30:19,940 --> 00:30:30,340
color so anyway I will can play with

00:30:27,230 --> 00:30:30,340
that we can play with that later

00:30:30,620 --> 00:30:43,640
[Applause]

00:30:38,380 --> 00:30:46,070
so yeah and so basically what what is

00:30:43,640 --> 00:30:48,500
this is basically just a loop we look at

00:30:46,070 --> 00:30:51,620
the value of this button and this pin if

00:30:48,500 --> 00:30:53,360
it's a high or low we check that we

00:30:51,620 --> 00:30:55,429
don't press two keys at the same time

00:30:53,360 --> 00:30:58,909
and we kind of do that in a loop because

00:30:55,429 --> 00:31:01,960
we want to I mean a frame is a bit short

00:30:58,909 --> 00:31:05,809
to just press at the right moment so I I

00:31:01,960 --> 00:31:08,360
let I make it I'll type two hundred

00:31:05,809 --> 00:31:11,210
times and I checked two hundred times

00:31:08,360 --> 00:31:17,360
whether one has press on it and then I

00:31:11,210 --> 00:31:19,010
can just it's just some basic so the

00:31:17,360 --> 00:31:22,429
snake is basically just some data

00:31:19,010 --> 00:31:24,080
structure which has like so it's it

00:31:22,429 --> 00:31:26,929
doesn't really use malloc or anything it

00:31:24,080 --> 00:31:30,440
it pre allocates a list of points and

00:31:26,929 --> 00:31:32,630
then it's going to hold em one by one so

00:31:30,440 --> 00:31:35,529
that's basically I just need to know

00:31:32,630 --> 00:31:40,120
where where is malleable and and and

00:31:35,529 --> 00:31:44,779
whereas what where is my snake yep so

00:31:40,120 --> 00:31:49,840
there are any questions yeah yeah then

00:31:44,779 --> 00:31:49,840
using the work the world size for

00:32:05,150 --> 00:32:12,510
my question is related to real-time

00:32:08,640 --> 00:32:16,890
operating systems do you know if there

00:32:12,510 --> 00:32:19,680
is anyone writing in rust for for

00:32:16,890 --> 00:32:22,140
running this in embedded so I don't I

00:32:19,680 --> 00:32:24,600
don't actually did myself that I will

00:32:22,140 --> 00:32:28,350
assume there is so so this is this is

00:32:24,600 --> 00:32:31,110
using as I don't remember if I'm if I

00:32:28,350 --> 00:32:32,820
mention this but this is using no

00:32:31,110 --> 00:32:35,460
operating system whatsoever so it's just

00:32:32,820 --> 00:32:37,020
running so this is the operating system

00:32:35,460 --> 00:33:00,680
so I have this new snake is the

00:32:37,020 --> 00:33:03,900
operating system so they are so so I'm

00:33:00,680 --> 00:33:05,970
so getting the operating system so there

00:33:03,900 --> 00:33:08,670
are some operating system in a host and

00:33:05,970 --> 00:33:10,620
you can also of course use any operating

00:33:08,670 --> 00:33:13,160
system and use the host code with it but

00:33:10,620 --> 00:33:13,160
that's

00:33:31,730 --> 00:33:38,090
so I feel if you just want to download

00:33:34,960 --> 00:33:41,980
yeah III put it on github this little

00:33:38,090 --> 00:33:41,980
program just if you just want to do not

00:33:45,680 --> 00:33:52,880

YouTube URL: https://www.youtube.com/watch?v=EHMdD0dTgNA


