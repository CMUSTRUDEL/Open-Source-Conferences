Title: Rust and Tell Berlin - April 2020
Publication date: 2020-04-28
Playlist: Rust and Tell Berlin
Description: 
	https://berline.rs/2020/04/28/rust-and-tell.html

Rust & Tell Berlin, the monthly event to share ideas, and learn about new things in and about Rust, went fully online for the first time.

#1 00:05:44 - Dev Diary: Writing a Clipboard Manager with Rust by Tymoteusz Jankowski
#2 00:22:27 - Project Spotlight: Maelstrom Matrix Server in Rust by Chris Bruce
#3 00:47:46 - Artillery: Fire-forged Cluster Management & Distributed Data Protocol by Mahmut Bulut

Bonus: 01:22:58 - Ryan explains `ManualDrop`
Code example: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=8004f1ac04b47c6db4ad12af74782a06
Captions: 
	00:00:00,000 --> 00:00:16,890
a few seconds here alright let me share

00:00:09,150 --> 00:00:18,840
my screen real quick and I'm going to

00:00:16,890 --> 00:00:20,880
assume that zoom is working right now if

00:00:18,840 --> 00:00:23,279
anybody can give me a thumbs up so

00:00:20,880 --> 00:00:25,410
that's that it's working yes

00:00:23,279 --> 00:00:27,930
thumbs we have some thumbs so we're

00:00:25,410 --> 00:00:30,570
gonna get started welcome everybody to

00:00:27,930 --> 00:00:34,050
another edition of rust and tell the

00:00:30,570 --> 00:00:36,090
second one that we've done online and we

00:00:34,050 --> 00:00:38,969
are enjoying this format

00:00:36,090 --> 00:00:41,370
despite the reason why we have to do

00:00:38,969 --> 00:00:43,440
this it was a lot of fun last time and

00:00:41,370 --> 00:00:46,770
we expect it to be a lot of fun today as

00:00:43,440 --> 00:00:48,780
well I assume we have people in Berlin

00:00:46,770 --> 00:00:51,719
and also may be joining from outside of

00:00:48,780 --> 00:00:54,360
Berlin so if you are joining us for the

00:00:51,719 --> 00:00:56,699
first time at Rustin tell Berlin because

00:00:54,360 --> 00:00:59,190
you're not normally here then welcome

00:00:56,699 --> 00:01:02,449
it's great to have you and of course to

00:00:59,190 --> 00:01:05,040
all of our regular visitors welcome back

00:01:02,449 --> 00:01:07,409
real quick about ourselves

00:01:05,040 --> 00:01:09,270
I'm Ryan Levesque you can't see it

00:01:07,409 --> 00:01:11,820
behind Faris because somehow that cut

00:01:09,270 --> 00:01:14,159
moves but I'm at Ryan underscore

00:01:11,820 --> 00:01:18,570
Levesque on Twitter so follow me there

00:01:14,159 --> 00:01:21,330
and I tweet about rust basically only so

00:01:18,570 --> 00:01:24,450
if that's what you're into then maybe

00:01:21,330 --> 00:01:26,460
you'll like it and Mike my co-host yeah

00:01:24,450 --> 00:01:29,700
and I'm the co-host I'm a pastor groomer

00:01:26,460 --> 00:01:31,290
and I'm a software engineer doing a rust

00:01:29,700 --> 00:01:34,500
for a year now and like I'm

00:01:31,290 --> 00:01:36,720
self-employed so we go and yeah I am

00:01:34,500 --> 00:01:39,540
always happy to talk about rusts maybe

00:01:36,720 --> 00:01:42,240
like approached me on LinkedIn or on

00:01:39,540 --> 00:01:46,700
other boring social media sites

00:01:42,240 --> 00:01:46,700
yeah and happy to have you here welcome

00:01:47,390 --> 00:01:52,920
and so for a little bit for those who

00:01:50,970 --> 00:01:55,290
have not joined us before about what

00:01:52,920 --> 00:01:58,920
rusts Intel is all abouts this is a

00:01:55,290 --> 00:02:01,439
meet-up mainly about rust but really we

00:01:58,920 --> 00:02:03,869
want anybody from beginner experts to

00:02:01,439 --> 00:02:07,020
come and share struggles ideas hacks

00:02:03,869 --> 00:02:09,209
projects funny stories anything and

00:02:07,020 --> 00:02:11,129
everything related to rust no matter how

00:02:09,209 --> 00:02:12,180
big inner or advanced you are it doesn't

00:02:11,129 --> 00:02:15,659
matter

00:02:12,180 --> 00:02:17,999
we want to hear from me oh really we are

00:02:15,659 --> 00:02:21,299
trying to build a space for a community

00:02:17,999 --> 00:02:22,769
to learn and grow together everybody

00:02:21,299 --> 00:02:27,450
should feel welcome if you don't feel

00:02:22,769 --> 00:02:29,549
welcome please let us know and we will

00:02:27,450 --> 00:02:33,659
try our best to make sure that we

00:02:29,549 --> 00:02:35,400
improve in the future and really what

00:02:33,659 --> 00:02:38,639
that means at the end of the day is that

00:02:35,400 --> 00:02:40,349
we want you to come speak here a trust

00:02:38,639 --> 00:02:43,169
and tell and of course now with us being

00:02:40,349 --> 00:02:46,709
online for the foreseeable future it

00:02:43,169 --> 00:02:49,709
might be even easier than before we

00:02:46,709 --> 00:02:51,389
really say we want you because we want

00:02:49,709 --> 00:02:53,489
each and every one of you to feel

00:02:51,389 --> 00:02:55,260
comfortable enough to speak here it

00:02:53,489 --> 00:02:57,480
doesn't matter how often you use rest

00:02:55,260 --> 00:02:58,980
how long you've been using it for you

00:02:57,480 --> 00:03:01,590
might think that you're a total newb

00:02:58,980 --> 00:03:03,629
well we all are so that's totally fine

00:03:01,590 --> 00:03:07,919
come tell us about your experiences we

00:03:03,629 --> 00:03:10,310
really want to hear from you and we

00:03:07,919 --> 00:03:13,049
follow the polling code of contract

00:03:10,310 --> 00:03:15,989
contact and which might not be the

00:03:13,049 --> 00:03:18,120
worldwide code of contact what it

00:03:15,989 --> 00:03:21,840
basically means is we want to have a

00:03:18,120 --> 00:03:24,449
nice time here there is no reason to be

00:03:21,840 --> 00:03:27,930
or to get harassed to complain about

00:03:24,449 --> 00:03:30,150
unsafe code or new code or whatever you

00:03:27,930 --> 00:03:33,120
think it is this is just a space to have

00:03:30,150 --> 00:03:35,849
fun to exchange we all use our and free

00:03:33,120 --> 00:03:38,370
time here too the best to hang out and

00:03:35,849 --> 00:03:42,689
chat and to be like a better version of

00:03:38,370 --> 00:03:45,629
us after this like group meeting so if

00:03:42,689 --> 00:03:48,030
you don't feel like you fit in here

00:03:45,629 --> 00:03:51,689
because it's not advanced like enough

00:03:48,030 --> 00:03:54,930
maybe don't be here and if you feel like

00:03:51,689 --> 00:03:57,000
you're getting harassed or I'm something

00:03:54,930 --> 00:03:59,879
please contact us we take this very

00:03:57,000 --> 00:04:02,370
seriously so anything you don't like

00:03:59,879 --> 00:04:07,829
about this Meetup please approach us and

00:04:02,370 --> 00:04:10,019
we will deal with it alright we want to

00:04:07,829 --> 00:04:11,969
give a special shout-out to Jana havoc

00:04:10,019 --> 00:04:15,479
who is helping us out tonight with the

00:04:11,969 --> 00:04:18,329
zoom and with the matrix as he usually

00:04:15,479 --> 00:04:23,170
has been so thank you very much it's

00:04:18,329 --> 00:04:25,630
always appreciated and we have

00:04:23,170 --> 00:04:32,740
you have oh it seems we have somebody

00:04:25,630 --> 00:04:36,870
speaking we have three talks to the

00:04:32,740 --> 00:04:39,070
night that we will be going through this

00:04:36,870 --> 00:04:43,570
reminds me as well we are recording

00:04:39,070 --> 00:04:46,420
these talks and so it might happen if

00:04:43,570 --> 00:04:49,600
you're in the zoom tonight if you put on

00:04:46,420 --> 00:04:51,240
your camera that you might be recorded

00:04:49,600 --> 00:04:53,740
so if you don't want that make sure to

00:04:51,240 --> 00:04:55,950
not turn on your camera or you can watch

00:04:53,740 --> 00:05:00,640
from YouTube or whatever you want to do

00:04:55,950 --> 00:05:02,350
just so everybody is aware so the three

00:05:00,640 --> 00:05:04,480
talks at night that we have the first

00:05:02,350 --> 00:05:06,790
one will be from Tim who will be talking

00:05:04,480 --> 00:05:10,120
about writing a clipboard manager and

00:05:06,790 --> 00:05:12,910
Russ that we have Kris talking about a

00:05:10,120 --> 00:05:16,690
matrix server and then Mahmood's

00:05:12,910 --> 00:05:18,550
will be back again talking about

00:05:16,690 --> 00:05:21,580
cluster management distributed data

00:05:18,550 --> 00:05:25,660
protocol called artillery written and

00:05:21,580 --> 00:05:27,010
rust so we should have a good night and

00:05:25,660 --> 00:05:29,170
if you have any questions feel free to

00:05:27,010 --> 00:05:31,900
write us some chat and we will make sure

00:05:29,170 --> 00:05:34,570
to help you out so thank you everyone

00:05:31,900 --> 00:05:37,020
and let's get started with with the

00:05:34,570 --> 00:05:37,020
first talk

00:05:42,970 --> 00:05:47,370
okay so let me share my screen no

00:05:55,860 --> 00:06:07,950
okay can you see it okay okay so hello

00:06:06,870 --> 00:06:10,230
everyone

00:06:07,950 --> 00:06:14,610
first I'd like to thank you for making

00:06:10,230 --> 00:06:17,280
this this event online and I've really

00:06:14,610 --> 00:06:22,350
think we need more of it in future so

00:06:17,280 --> 00:06:25,860
thanks okay now to the talk my today's

00:06:22,350 --> 00:06:30,900
talk is diarrhea writing clipboard

00:06:25,860 --> 00:06:34,470
manager in Russ and here's the agenda so

00:06:30,900 --> 00:06:38,130
I first I talk about calls for a

00:06:34,470 --> 00:06:41,070
clipboard manager and then I go with a

00:06:38,130 --> 00:06:45,960
process of picking a GUI crate for us

00:06:41,070 --> 00:06:50,360
and then I described a few encountered

00:06:45,960 --> 00:06:53,880
issues and lastly a few random slides

00:06:50,360 --> 00:06:57,050
okay so my up goals for a clipboard

00:06:53,880 --> 00:07:01,980
manager was that it runs in background

00:06:57,050 --> 00:07:06,480
it's a story of course and you can pick

00:07:01,980 --> 00:07:10,050
an item from the history so very basic

00:07:06,480 --> 00:07:13,880
feature set and actually minimal would

00:07:10,050 --> 00:07:13,880
you expect from the clipboard manager

00:07:14,300 --> 00:07:25,980
okay so this is my first time when I

00:07:18,350 --> 00:07:28,910
wrote rust a GUI program so I am two

00:07:25,980 --> 00:07:32,250
tiny note and I started by looking into

00:07:28,910 --> 00:07:38,580
req yet page and I found that you can

00:07:32,250 --> 00:07:41,100
write rest you can have three approaches

00:07:38,580 --> 00:07:43,080
to that one is native approach one is

00:07:41,100 --> 00:07:46,920
the second one could be cross-platform

00:07:43,080 --> 00:07:49,230
toolkits and last one is rest rest

00:07:46,920 --> 00:07:52,170
centric approach i briefed briefly

00:07:49,230 --> 00:07:55,230
described all of them so I picked the

00:07:52,170 --> 00:08:03,840
res centric approach because because I

00:07:55,230 --> 00:08:05,490
could many hmm so what is all about in

00:08:03,840 --> 00:08:08,919
restaurant drink approach oh right

00:08:05,490 --> 00:08:11,439
rest code but outcome

00:08:08,919 --> 00:08:15,039
application it looks a bit different

00:08:11,439 --> 00:08:20,169
than the rest of the platform the

00:08:15,039 --> 00:08:23,110
platform I'm okay with it since since

00:08:20,169 --> 00:08:25,210
this is a simple manager no client

00:08:23,110 --> 00:08:28,810
involved and things like that so that's

00:08:25,210 --> 00:08:32,079
okay and at the opposite end there is a

00:08:28,810 --> 00:08:35,709
native approach where you write a

00:08:32,079 --> 00:08:38,979
separate code for each platform so for

00:08:35,709 --> 00:08:43,649
example in mark you would write cocoa

00:08:38,979 --> 00:08:48,240
and for Windows it would be Microsoft

00:08:43,649 --> 00:08:53,290
win API and then you call that from

00:08:48,240 --> 00:08:54,910
through a IPC or f5 and in the somewhere

00:08:53,290 --> 00:08:58,470
in the middle is the cross-platform

00:08:54,910 --> 00:09:01,420
approach where you don't have to write

00:08:58,470 --> 00:09:05,440
separate codes for each platform since

00:09:01,420 --> 00:09:11,079
you use cross-platform toolkit of course

00:09:05,440 --> 00:09:14,730
but you still have to call fi or IPC

00:09:11,079 --> 00:09:21,100
from rest to those toolkit

00:09:14,730 --> 00:09:24,850
okay so once I had once I picked the

00:09:21,100 --> 00:09:27,070
approach I had to pick crates

00:09:24,850 --> 00:09:32,410
quick rates for rust and I found this

00:09:27,070 --> 00:09:36,370
ones and after a brief brief review of

00:09:32,410 --> 00:09:39,430
all of them I found that I can I can

00:09:36,370 --> 00:09:43,329
well I'd like to work only with treat or

00:09:39,430 --> 00:09:48,850
iced mostly because of the activity in

00:09:43,329 --> 00:09:51,880
the in Windows project so so I checked

00:09:48,850 --> 00:09:57,010
github activity which looks like this

00:09:51,880 --> 00:10:01,890
for Conrad and rest of the project note

00:09:57,010 --> 00:10:04,600
that this these graphs came from

00:10:01,890 --> 00:10:08,440
beginning of the March so it might

00:10:04,600 --> 00:10:13,120
change so far and this is how I stuck

00:10:08,440 --> 00:10:17,260
and drew it so druid and ice looks the

00:10:13,120 --> 00:10:19,700
best in terms of activity project

00:10:17,260 --> 00:10:23,220
activity

00:10:19,700 --> 00:10:27,210
so at this stage I played around with

00:10:23,220 --> 00:10:35,550
druid and iced appear both IDI looks

00:10:27,210 --> 00:10:38,070
looks very convenient and and I had a

00:10:35,550 --> 00:10:42,210
really good time working with them they

00:10:38,070 --> 00:10:46,050
are also quite similar but I finally

00:10:42,210 --> 00:10:47,880
decided to destroy it because it seems

00:10:46,050 --> 00:10:52,890
to me more like a team project instead

00:10:47,880 --> 00:10:56,390
of one man project like iced ok so no

00:10:52,890 --> 00:10:59,430
matter what I told you so far I

00:10:56,390 --> 00:11:04,080
recommend you to do your own evaluation

00:10:59,430 --> 00:11:07,650
and in case you want to write program

00:11:04,080 --> 00:11:14,310
because I'm a bit biased so my choice

00:11:07,650 --> 00:11:16,710
was mine was druid but your may not okay

00:11:14,310 --> 00:11:19,460
so let's let's let's talk about

00:11:16,710 --> 00:11:21,839
encountered issues

00:11:19,460 --> 00:11:23,640
shortly after I picked through it it

00:11:21,839 --> 00:11:28,140
turns out that it doesn't support a

00:11:23,640 --> 00:11:31,670
power application which is usually what

00:11:28,140 --> 00:11:35,400
you do when you write clipboard manager

00:11:31,670 --> 00:11:40,260
but it's not a big deal because I

00:11:35,400 --> 00:11:43,710
thought that I could make it my own in

00:11:40,260 --> 00:11:49,860
my in the program because because bar

00:11:43,710 --> 00:11:51,750
program consists of you know runs in

00:11:49,860 --> 00:11:56,460
background it allows you to register a

00:11:51,750 --> 00:12:00,830
hotkey and it supports tray icon so I

00:11:56,460 --> 00:12:03,270
don't care about tray tray icon and for

00:12:00,830 --> 00:12:07,610
registration there are also great so

00:12:03,270 --> 00:12:10,709
this should be ok so my concept for the

00:12:07,610 --> 00:12:13,100
for the program it would be something

00:12:10,709 --> 00:12:15,600
like this first you register a

00:12:13,100 --> 00:12:21,000
registration with which is responsible

00:12:15,600 --> 00:12:25,660
for GUI for showing GUI and in the loop

00:12:21,000 --> 00:12:30,000
you record clipboard content

00:12:25,660 --> 00:12:33,580
okay so so let's start developing and

00:12:30,000 --> 00:12:35,740
we've got road block block number two so

00:12:33,580 --> 00:12:38,110
yeah it turns out that uh plancha which

00:12:35,740 --> 00:12:44,800
is a thing of Troy it couldn't be

00:12:38,110 --> 00:12:48,070
couldn't couldn't be run twice or more

00:12:44,800 --> 00:12:51,160
and this is actually you you ran it when

00:12:48,070 --> 00:12:57,220
you initiate you need to initialize your

00:12:51,160 --> 00:13:00,730
window so it's quite often yeah so it's

00:12:57,220 --> 00:13:03,730
kind of its kind of problem but let's

00:13:00,730 --> 00:13:05,790
see what else we have and then it

00:13:03,730 --> 00:13:10,450
quickly turns out that one of the

00:13:05,790 --> 00:13:13,210
registration rate doesn't support key

00:13:10,450 --> 00:13:17,440
combinations and also it doesn't support

00:13:13,210 --> 00:13:19,840
weight lunch which was my assumption at

00:13:17,440 --> 00:13:21,550
the beginning okay but it's not a

00:13:19,840 --> 00:13:28,690
problem again since there is another

00:13:21,550 --> 00:13:31,540
great input bot and and hopefully it it

00:13:28,690 --> 00:13:36,880
works pretty well I mean it solves

00:13:31,540 --> 00:13:39,880
problems of the previous but it requires

00:13:36,880 --> 00:13:42,820
sudo to execution actually Weiland

00:13:39,880 --> 00:13:43,900
requires sudo to execute that but yeah

00:13:42,820 --> 00:13:46,270
mmm

00:13:43,900 --> 00:13:52,260
okay but it's not a problem we can live

00:13:46,270 --> 00:13:58,570
with and probably maybe fix that night I

00:13:52,260 --> 00:14:02,110
I found this one it was a bit tough

00:13:58,570 --> 00:14:07,200
because it turns out that x11 clears the

00:14:02,110 --> 00:14:10,660
clipboard when and when the program is

00:14:07,200 --> 00:14:15,280
closed I mean let's say you have I don't

00:14:10,660 --> 00:14:18,700
know firefox window you select a text

00:14:15,280 --> 00:14:23,710
there you copy a copy to clipboard and

00:14:18,700 --> 00:14:27,420
then you close the Firefox window the

00:14:23,710 --> 00:14:31,480
clipboard item is cleared and yeah so

00:14:27,420 --> 00:14:33,910
this is another problem and it occurs

00:14:31,480 --> 00:14:37,699
when you add a user to select an item

00:14:33,910 --> 00:14:40,229
from the historic okay

00:14:37,699 --> 00:14:45,359
unfortunately this wasn't the last

00:14:40,229 --> 00:14:49,229
problem I also found that true it can't

00:14:45,359 --> 00:14:55,019
be programmatically can be program

00:14:49,229 --> 00:14:58,109
programmatic misery quit you can't

00:14:55,019 --> 00:15:05,189
program as you quit from from the Droid

00:14:58,109 --> 00:15:08,819
application because of this and at the

00:15:05,189 --> 00:15:11,309
end I found that there is some kind of

00:15:08,819 --> 00:15:15,269
inconvenience when you try to use it in

00:15:11,309 --> 00:15:20,659
gnome environment because because the

00:15:15,269 --> 00:15:23,309
window yeah because no improvement from

00:15:20,659 --> 00:15:25,619
popping windows but it's minor you can

00:15:23,309 --> 00:15:28,919
walk around it with I don't know still

00:15:25,619 --> 00:15:32,129
my focus for example extension okay so

00:15:28,919 --> 00:15:35,189
at this stage I started to get a

00:15:32,129 --> 00:15:38,369
depression a little because yeah my I

00:15:35,189 --> 00:15:42,919
thought that would be a weekend project

00:15:38,369 --> 00:15:45,899
for example and everything around me

00:15:42,919 --> 00:15:50,449
told me that I will I didn't know I

00:15:45,899 --> 00:15:57,539
would have to I would have to fix

00:15:50,449 --> 00:15:59,819
ecosystem around yeah so that was that

00:15:57,539 --> 00:16:05,519
could be fun also but my initial plan

00:15:59,819 --> 00:16:09,929
was must was a bit different so and

00:16:05,519 --> 00:16:13,079
before I started to fix the craze

00:16:09,929 --> 00:16:18,299
I mean ecosystem I found that maybe I

00:16:13,079 --> 00:16:20,939
could change the concept my initial

00:16:18,299 --> 00:16:25,859
concept so instead of putting everything

00:16:20,939 --> 00:16:27,959
into a single process like like before I

00:16:25,859 --> 00:16:32,009
thought that maybe I could split it into

00:16:27,959 --> 00:16:34,649
two processes one process would be be

00:16:32,009 --> 00:16:38,459
responsible for recording clipboard

00:16:34,649 --> 00:16:41,099
content and second process would be

00:16:38,459 --> 00:16:46,019
responsible for showing GUI and how does

00:16:41,099 --> 00:16:50,490
it work yeah it works pretty well

00:16:46,019 --> 00:16:55,720
because we don't need all mentioned

00:16:50,490 --> 00:16:59,950
yeah we skipping all encountered

00:16:55,720 --> 00:17:03,100
problems so this is this is great

00:16:59,950 --> 00:17:05,589
for example why why do we why why don't

00:17:03,100 --> 00:17:08,500
we need for example huts a hotkey

00:17:05,589 --> 00:17:11,430
registration we can delegate that for

00:17:08,500 --> 00:17:16,360
example we which has building

00:17:11,430 --> 00:17:20,949
registration registration so why not use

00:17:16,360 --> 00:17:25,540
that ok so quick recap and so I was able

00:17:20,949 --> 00:17:29,410
to deliver MVP I published the code on

00:17:25,540 --> 00:17:33,250
my github and learned a lot for example

00:17:29,410 --> 00:17:38,430
that it's always good to reuse existing

00:17:33,250 --> 00:17:41,530
software like set nominees registration

00:17:38,430 --> 00:17:45,100
yeah I learned a lot about x11

00:17:41,530 --> 00:17:50,560
and Wayland about the differences and

00:17:45,100 --> 00:17:54,820
how x11 is insecure and how Waylon

00:17:50,560 --> 00:17:58,480
sticks is that ok yeah also I was told

00:17:54,820 --> 00:18:00,420
that I shouldn't write clipboard manager

00:17:58,480 --> 00:18:03,850
in the user space as I did

00:18:00,420 --> 00:18:08,650
especially for Weyland but not exactly

00:18:03,850 --> 00:18:11,650
you can write a a clipboard manager but

00:18:08,650 --> 00:18:15,460
maybe you should consider using data

00:18:11,650 --> 00:18:20,650
protocol data control protocol and also

00:18:15,460 --> 00:18:23,590
I learned a lot about maybe not a lot

00:18:20,650 --> 00:18:26,560
but some stuff about encryption using

00:18:23,590 --> 00:18:29,710
pink benchmarking but unfortunately I

00:18:26,560 --> 00:18:34,260
had to remove that from the from the

00:18:29,710 --> 00:18:37,360
slides yeah and I found that res

00:18:34,260 --> 00:18:40,000
straight-arrow trade is got way better

00:18:37,360 --> 00:18:48,940
than it was before then I when I use

00:18:40,000 --> 00:18:52,720
that use it at least two of the mention

00:18:48,940 --> 00:18:57,440
at issues got resolved so it's great

00:18:52,720 --> 00:19:03,800
great news and I think that's it

00:18:57,440 --> 00:19:06,350
so we have time for patience maybe we

00:19:03,800 --> 00:19:10,190
have time so far I didn't see any

00:19:06,350 --> 00:19:12,140
questions yet feel free to write them

00:19:10,190 --> 00:19:15,670
now in the zoom chat or in the matrix

00:19:12,140 --> 00:19:22,420
chat so we can pick them up okay so I'm

00:19:15,670 --> 00:19:25,420
stopping show my screen right now any

00:19:22,420 --> 00:19:25,420
questions

00:19:30,880 --> 00:19:42,570
no seems someone is texting so we wait a

00:19:38,320 --> 00:19:42,570
bit premise typing I see

00:19:51,570 --> 00:19:57,000
and since since we don't normally have

00:19:54,300 --> 00:19:59,100
the opportunity online to give our

00:19:57,000 --> 00:20:01,470
speakers around with applause on behalf

00:19:59,100 --> 00:20:03,030
of all listening out there thank you

00:20:01,470 --> 00:20:06,660
very much for the talk it was really

00:20:03,030 --> 00:20:09,510
great and there was a question now from

00:20:06,660 --> 00:20:20,310
over and he asks and what do you think

00:20:09,510 --> 00:20:24,230
about gtk RS so so I haven't worked with

00:20:20,310 --> 00:20:31,250
gtk RS but I know if I'm correct it

00:20:24,230 --> 00:20:32,490
Android RS uses underlying the GTRs so

00:20:31,250 --> 00:20:35,610
yeah

00:20:32,490 --> 00:20:39,140
that would be my guess so yeah I think

00:20:35,610 --> 00:20:42,090
it's it works I don't have much

00:20:39,140 --> 00:20:49,380
knowledge about that because yeah but I

00:20:42,090 --> 00:20:52,950
think that 3d thank you and we have two

00:20:49,380 --> 00:20:55,980
more questions one person asked about M

00:20:52,950 --> 00:21:00,000
screenshots and the other and Bram asks

00:20:55,980 --> 00:21:07,770
about if you have specific features in

00:21:00,000 --> 00:21:12,360
mind for the future yeah so I get lab in

00:21:07,770 --> 00:21:16,890
the projector is a tourist so I'm not

00:21:12,360 --> 00:21:19,800
sure export managers are pretty pretty

00:21:16,890 --> 00:21:23,130
well I don't know explored anything

00:21:19,800 --> 00:21:25,350
because there is plenty of them on the

00:21:23,130 --> 00:21:29,610
market so I don't know

00:21:25,350 --> 00:21:36,080
I'm not sure I'm open to to any features

00:21:29,610 --> 00:21:40,200
so MVP works I use it and and about

00:21:36,080 --> 00:21:42,480
screenshots right I could I could found

00:21:40,200 --> 00:21:44,910
actually I'm using on mice on my

00:21:42,480 --> 00:21:49,770
computer this clipboard manager right

00:21:44,910 --> 00:21:53,910
now so I so I could even show it yeah

00:21:49,770 --> 00:21:57,180
but of course I can I will I will send

00:21:53,910 --> 00:22:03,530
screenshot on the on the imagery matrix

00:21:57,180 --> 00:22:03,530
is it possible okay so I

00:22:04,050 --> 00:22:07,980
thank you and I think this was all of

00:22:05,580 --> 00:22:11,010
the questions with cool tons of angles

00:22:07,980 --> 00:22:12,780
and to talk thank you yeah

00:22:11,010 --> 00:22:20,250
thank you for talking and sharing your

00:22:12,780 --> 00:22:28,590
project was fun okay are we ready for

00:22:20,250 --> 00:22:32,700
the next speaker yep cool take over hey

00:22:28,590 --> 00:22:35,100
everybody great to be here finally today

00:22:32,700 --> 00:22:37,440
I'm gonna talk about a project I started

00:22:35,100 --> 00:22:49,350
called Mills from so let me share my

00:22:37,440 --> 00:22:51,950
screen real quick alright hopefully you

00:22:49,350 --> 00:22:51,950
can see this

00:22:53,270 --> 00:22:58,160
alright so males from Maelstrom is a

00:22:58,220 --> 00:23:02,760
high-performance matric home server

00:23:00,000 --> 00:23:06,030
written in rust it's really designed to

00:23:02,760 --> 00:23:13,050
be storage agnostic scalable and light

00:23:06,030 --> 00:23:15,480
on resources you may ask what is matrix

00:23:13,050 --> 00:23:18,690
we have a have it going today here which

00:23:15,480 --> 00:23:22,710
is cool but matrix actually is is a

00:23:18,690 --> 00:23:26,550
messaging platform it's decentralized so

00:23:22,710 --> 00:23:28,170
right now it uses Federation to share

00:23:26,550 --> 00:23:31,470
messages between what they call home

00:23:28,170 --> 00:23:34,530
servers they are doing a lot of work on

00:23:31,470 --> 00:23:37,500
p2p so you actually can run a home

00:23:34,530 --> 00:23:40,620
server in webassembly and be a complete

00:23:37,500 --> 00:23:42,020
note to yourself and so there is no even

00:23:40,620 --> 00:23:44,250
federated server that you need to

00:23:42,020 --> 00:23:47,330
connect to eat in that case you connect

00:23:44,250 --> 00:23:49,820
to other PDP peers and exchange messages

00:23:47,330 --> 00:23:51,990
it just enabled end-to-end encryption

00:23:49,820 --> 00:23:54,420
one of the coolest things that really

00:23:51,990 --> 00:23:56,550
attracted me to matrix was bridging it

00:23:54,420 --> 00:23:57,510
has a lot of support for and I think

00:23:56,550 --> 00:24:00,480
maybe this is what it was originally

00:23:57,510 --> 00:24:02,460
designed for it was to take a lot of

00:24:00,480 --> 00:24:04,860
different disparate networks of

00:24:02,460 --> 00:24:05,400
messaging platforms and combine them all

00:24:04,860 --> 00:24:08,700
into one

00:24:05,400 --> 00:24:11,970
so there's bridges for WeChat there's

00:24:08,700 --> 00:24:13,260
bridges for discord slack you name it

00:24:11,970 --> 00:24:14,960
and so that's a it's a pretty

00:24:13,260 --> 00:24:17,040
interesting concept and then when you

00:24:14,960 --> 00:24:18,700
really start to look at some of the PDP

00:24:17,040 --> 00:24:20,590
features down the

00:24:18,700 --> 00:24:24,490
it really really amounts to something

00:24:20,590 --> 00:24:26,940
pretty neat also it's open so I don't

00:24:24,490 --> 00:24:29,500
know about you but I have SMS I have

00:24:26,940 --> 00:24:32,170
iMessage I have discord

00:24:29,500 --> 00:24:34,720
I have slack multiple slacks I have

00:24:32,170 --> 00:24:37,510
email I have so many streams of messages

00:24:34,720 --> 00:24:39,730
coming in and most of those platforms

00:24:37,510 --> 00:24:41,290
are all closed and it really sucks that

00:24:39,730 --> 00:24:43,780
I have people on whatsapp which I hate

00:24:41,290 --> 00:24:45,400
what's up and I want to give them over

00:24:43,780 --> 00:24:47,920
the signal but it's like a platform

00:24:45,400 --> 00:24:50,140
switch for everybody and so I'm really

00:24:47,920 --> 00:24:52,690
hoping that the future you know maybe

00:24:50,140 --> 00:24:57,370
something like matrix where it is open

00:24:52,690 --> 00:24:58,780
standard it is not centralized and the

00:24:57,370 --> 00:25:01,480
open protocol enables a bunch of

00:24:58,780 --> 00:25:03,100
bridging to work and so I think this is

00:25:01,480 --> 00:25:05,620
one of the things if you think about the

00:25:03,100 --> 00:25:07,450
internet the email is very federated

00:25:05,620 --> 00:25:09,850
which is it's a pretty good system but

00:25:07,450 --> 00:25:11,680
you see the centralization of it and so

00:25:09,850 --> 00:25:14,950
a lot of the things about matrix is

00:25:11,680 --> 00:25:15,850
really this kind of web 3.0 if you will

00:25:14,950 --> 00:25:19,840
which is more of a peer-to-peer

00:25:15,850 --> 00:25:21,700
decentralized web and so I really think

00:25:19,840 --> 00:25:24,960
that we need to get back to that I think

00:25:21,700 --> 00:25:28,420
a lot of companies as you know sort of

00:25:24,960 --> 00:25:30,940
is a bad steward of our private data and

00:25:28,420 --> 00:25:33,820
I think most of their business models

00:25:30,940 --> 00:25:38,860
are really vested on locking you in to

00:25:33,820 --> 00:25:41,410
their platform so if you look at matrix

00:25:38,860 --> 00:25:43,390
stats there's a bit of an old slide that

00:25:41,410 --> 00:25:45,160
I picked up somewhere but right now they

00:25:43,390 --> 00:25:47,770
have about fourteen point seven million

00:25:45,160 --> 00:25:49,510
global accounts they do five million

00:25:47,770 --> 00:25:51,880
messages a day they have four point

00:25:49,510 --> 00:25:54,490
three million chat rooms there's forty

00:25:51,880 --> 00:25:57,730
thousand federated servers which is yeah

00:25:54,490 --> 00:26:01,810
kind of mind-blowing they do about 3.5

00:25:57,730 --> 00:26:04,210
thousand messages out per second and 500

00:26:01,810 --> 00:26:05,740
projects are developing with matrix now

00:26:04,210 --> 00:26:07,900
there's a hundred companies using it and

00:26:05,740 --> 00:26:10,900
there's four countries using in fact I

00:26:07,900 --> 00:26:13,870
think country maybe France or somebody

00:26:10,900 --> 00:26:17,170
just or maybe Netherlands I forget but

00:26:13,870 --> 00:26:22,750
one of those just also settled on using

00:26:17,170 --> 00:26:23,830
matrix as the core messaging platform so

00:26:22,750 --> 00:26:26,320
if we look at the landscape there are

00:26:23,830 --> 00:26:27,810
quite a few home servers and so in the

00:26:26,320 --> 00:26:29,890
matrix land the home server is

00:26:27,810 --> 00:26:30,500
essentially kind of where your account

00:26:29,890 --> 00:26:33,980
home

00:26:30,500 --> 00:26:36,889
and you create an account there and then

00:26:33,980 --> 00:26:38,960
it federates that so if somebody if I'm

00:26:36,889 --> 00:26:40,759
on one home server called matrix org and

00:26:38,960 --> 00:26:44,090
you're on a home server called you know

00:26:40,759 --> 00:26:47,210
rest and tell org and we want exchange

00:26:44,090 --> 00:26:48,799
messages or share a st. chat being the

00:26:47,210 --> 00:26:51,019
same chatroom all those messages are

00:26:48,799 --> 00:26:54,679
destined for that chatroom and to me

00:26:51,019 --> 00:26:58,340
would live on my home server and so the

00:26:54,679 --> 00:27:00,259
data is federated between the two the

00:26:58,340 --> 00:27:02,629
current sort of reference implementation

00:27:00,259 --> 00:27:05,269
is what's called synapse home server

00:27:02,629 --> 00:27:07,340
it's written in Python it uses Postgres

00:27:05,269 --> 00:27:11,029
they also have sequel light that's built

00:27:07,340 --> 00:27:12,320
on the twisted framework and you know

00:27:11,029 --> 00:27:13,820
lately I think they've had a lot of

00:27:12,320 --> 00:27:16,279
scaling issues especially with the co

00:27:13,820 --> 00:27:19,100
vid stuff going on they've seen just a

00:27:16,279 --> 00:27:21,679
huge increase in usage and you know when

00:27:19,100 --> 00:27:25,009
you're on a matrix home server you could

00:27:21,679 --> 00:27:26,629
actually feel the slowness you know the

00:27:25,009 --> 00:27:28,549
Python as a reference in little

00:27:26,629 --> 00:27:32,450
implementations been built from day one

00:27:28,549 --> 00:27:34,909
so it's a pretty large code base and you

00:27:32,450 --> 00:27:36,710
know it's evolved over time so I think

00:27:34,909 --> 00:27:38,419
you know as a developer you always know

00:27:36,710 --> 00:27:40,460
you build at once the first time it's

00:27:38,419 --> 00:27:41,690
kind of packed together but you always

00:27:40,460 --> 00:27:45,320
know that you can do it so much better

00:27:41,690 --> 00:27:46,370
if you build it a second time and so

00:27:45,320 --> 00:27:47,929
that's what they started to do they

00:27:46,370 --> 00:27:50,539
started to build a more scalable server

00:27:47,929 --> 00:27:52,399
called dendrite which is I think you're

00:27:50,539 --> 00:27:54,590
also seeing a theme here with dendrite

00:27:52,399 --> 00:27:58,090
synapse those types of things but a

00:27:54,590 --> 00:28:01,580
dendrite is a go server or threatenin go

00:27:58,090 --> 00:28:04,309
it uses Postgres in sequel it's a very

00:28:01,580 --> 00:28:08,690
heavy microservices architecture in fact

00:28:04,309 --> 00:28:10,909
you know all the major services like a

00:28:08,690 --> 00:28:12,590
chat room like room management user mean

00:28:10,909 --> 00:28:15,740
they're all separate post crushed

00:28:12,590 --> 00:28:17,120
databases all together and so you know

00:28:15,740 --> 00:28:18,830
it's been kind of designed from the

00:28:17,120 --> 00:28:20,659
ground up as a very sort of

00:28:18,830 --> 00:28:21,830
microservices architectures it's a bit

00:28:20,659 --> 00:28:23,750
complex it's still under heavy

00:28:21,830 --> 00:28:26,149
development it's not ready for any kind

00:28:23,750 --> 00:28:28,970
of use yet and they've actually been

00:28:26,149 --> 00:28:32,360
using it a lot more for the playground

00:28:28,970 --> 00:28:35,179
aspect of hacking on things so a lot of

00:28:32,360 --> 00:28:38,539
the end stuff kind of hacked on there

00:28:35,179 --> 00:28:40,399
the p2p stuff actually was built with

00:28:38,539 --> 00:28:41,929
dendrite and in fact what they did is

00:28:40,399 --> 00:28:43,910
they compiled it to a web assembly and

00:28:41,929 --> 00:28:46,190
so you basically run your own

00:28:43,910 --> 00:28:48,700
home server in a browser and you're able

00:28:46,190 --> 00:28:51,620
to have a like a fully end and p2p

00:28:48,700 --> 00:28:53,530
connected home server which is really

00:28:51,620 --> 00:28:56,600
neat and that's I think the future is

00:28:53,530 --> 00:29:00,410
p2p so I think there's a lot of cool

00:28:56,600 --> 00:29:04,430
cool stuff that can that can be actually

00:29:00,410 --> 00:29:06,440
evolved from that there is in fact there

00:29:04,430 --> 00:29:08,240
is there's two different Russ servers

00:29:06,440 --> 00:29:09,320
out there in the market so there is one

00:29:08,240 --> 00:29:11,570
that's been around for quite some time

00:29:09,320 --> 00:29:15,830
called Roma it's been around since I

00:29:11,570 --> 00:29:17,750
want to say 2015 I'm not sure but it's

00:29:15,830 --> 00:29:20,330
kind of been abandoned

00:29:17,750 --> 00:29:22,760
you know it's built on iron it's not

00:29:20,330 --> 00:29:25,100
asynchronous obviously a relatively new

00:29:22,760 --> 00:29:28,640
feature you know it's just dated a

00:29:25,100 --> 00:29:31,520
little bit and they also built a lot of

00:29:28,640 --> 00:29:32,690
heavy modules that sort of abstract a

00:29:31,520 --> 00:29:35,780
lot of stuff away so they have this

00:29:32,690 --> 00:29:39,380
whole complex kind of micro or macro

00:29:35,780 --> 00:29:41,810
language to build API endpoints and

00:29:39,380 --> 00:29:43,550
things like that which is probably good

00:29:41,810 --> 00:29:47,450
in some case but it's also a little bit

00:29:43,550 --> 00:29:49,010
hard to in my opinion hard to sort of

00:29:47,450 --> 00:29:52,700
reason about what's going on there and

00:29:49,010 --> 00:29:54,860
so somebody recently started a condo at

00:29:52,700 --> 00:29:56,900
home server it's written in rust it's

00:29:54,860 --> 00:30:00,220
using sled which is it's pretty neat

00:29:56,900 --> 00:30:02,450
it's built on rocket the async branch

00:30:00,220 --> 00:30:03,560
again it's brand-new just a couple weeks

00:30:02,450 --> 00:30:05,330
old

00:30:03,560 --> 00:30:07,030
it's very hawkish approach so it's very

00:30:05,330 --> 00:30:09,440
about kind of just making things work

00:30:07,030 --> 00:30:12,220
not not a whole lot of structure yet

00:30:09,440 --> 00:30:15,290
it's evolving it's pretty cool to see

00:30:12,220 --> 00:30:19,250
it's kind of a one guy show that's

00:30:15,290 --> 00:30:21,380
gotten a lot of traction recently but

00:30:19,250 --> 00:30:23,780
again I think I think just a heavy use

00:30:21,380 --> 00:30:25,270
of the existing rumah modules it's kind

00:30:23,780 --> 00:30:27,350
of what this whole thing's built on so

00:30:25,270 --> 00:30:32,060
there's a little bit of legacy there

00:30:27,350 --> 00:30:35,300
maybe a lot but a little bit and so

00:30:32,060 --> 00:30:38,390
Maelstrom so obviously building my own

00:30:35,300 --> 00:30:40,250
rest server in-home server and rust and

00:30:38,390 --> 00:30:43,250
I just started project a couple weeks

00:30:40,250 --> 00:30:44,840
ago it's written and rushed trying to be

00:30:43,250 --> 00:30:47,330
storage agnostic so we actually have a

00:30:44,840 --> 00:30:50,450
storage trade want to be able to plug in

00:30:47,330 --> 00:30:52,460
anything Postgres equal lights LED a lot

00:30:50,450 --> 00:30:54,290
of the sort of trade we really are

00:30:52,460 --> 00:30:56,030
thinking about you know you don't

00:30:54,290 --> 00:30:57,240
necessarily need a micro service if if

00:30:56,030 --> 00:31:00,720
you really wanted to

00:30:57,240 --> 00:31:02,580
abstract away certain services into

00:31:00,720 --> 00:31:05,220
different storage structures like maybe

00:31:02,580 --> 00:31:06,720
Kafka or something like that you could

00:31:05,220 --> 00:31:08,550
just create a new storage tray because

00:31:06,720 --> 00:31:10,520
our thinking again we're right at the

00:31:08,550 --> 00:31:12,780
beginning of this so a lot of

00:31:10,520 --> 00:31:14,640
architectures has kind of been thought

00:31:12,780 --> 00:31:16,350
about but you know I think a lot of

00:31:14,640 --> 00:31:20,160
stuff alone covers would go it's built

00:31:16,350 --> 00:31:22,140
around acting sweb you know I'm glad the

00:31:20,160 --> 00:31:25,110
project came back from what looked like

00:31:22,140 --> 00:31:27,360
certain death it's it is still fast

00:31:25,110 --> 00:31:30,510
super fast and I when I did some

00:31:27,360 --> 00:31:32,220
benchmarking against rocket and warp

00:31:30,510 --> 00:31:34,050
it's still like two to three times

00:31:32,220 --> 00:31:36,030
faster and I know it's you know

00:31:34,050 --> 00:31:39,330
benchmarks this is probably not going to

00:31:36,030 --> 00:31:41,010
be the you know the hot path in this

00:31:39,330 --> 00:31:41,970
thing but I think as you'll see

00:31:41,010 --> 00:31:44,550
everything that we're trying to do is

00:31:41,970 --> 00:31:47,100
really performance focused again this

00:31:44,550 --> 00:31:49,730
project was just a couple weeks old you

00:31:47,100 --> 00:31:52,320
know it's a lot of emphasis on code

00:31:49,730 --> 00:31:55,140
architecture and just a good structure

00:31:52,320 --> 00:31:56,700
around power laying this code out and a

00:31:55,140 --> 00:31:59,910
lot of heavy performance considerations

00:31:56,700 --> 00:32:02,640
so you'll see that our project goals are

00:31:59,910 --> 00:32:04,470
really about fast and scalable solution

00:32:02,640 --> 00:32:06,030
for a large user base what I really like

00:32:04,470 --> 00:32:08,550
to see is I like to see Russ replace

00:32:06,030 --> 00:32:10,680
some of these you know performance

00:32:08,550 --> 00:32:13,470
critical areas and so I've used Russ

00:32:10,680 --> 00:32:15,330
servers for a lot of things you know in

00:32:13,470 --> 00:32:18,720
sort of a performance critical area and

00:32:15,330 --> 00:32:21,720
I'm just blown away by how scalable it

00:32:18,720 --> 00:32:25,290
can be without any effort and how

00:32:21,720 --> 00:32:28,260
minimal of resources it uses you know so

00:32:25,290 --> 00:32:30,890
things like doing you know 6,000

00:32:28,260 --> 00:32:33,690
requests a second on a $15.00

00:32:30,890 --> 00:32:36,690
digitalocean box and it only uses you

00:32:33,690 --> 00:32:38,940
know maybe 10 Meg's of RAM it's it just

00:32:36,690 --> 00:32:41,490
blows my mind who you know me personally

00:32:38,940 --> 00:32:43,320
have done back in development for a long

00:32:41,490 --> 00:32:47,190
time and so I think it's really super

00:32:43,320 --> 00:32:49,230
cool that with little effort you can you

00:32:47,190 --> 00:32:54,450
can build some very highly scalable you

00:32:49,230 --> 00:32:56,070
know low overhead systems so the project

00:32:54,450 --> 00:32:58,830
goals obviously are fast I think it's a

00:32:56,070 --> 00:33:00,210
big big thing storage agnostic again I

00:32:58,830 --> 00:33:02,430
think we should be able to plug in

00:33:00,210 --> 00:33:06,630
sequel Lite sled so one of the other

00:33:02,430 --> 00:33:08,730
contributors is they have a self-hosted

00:33:06,630 --> 00:33:09,840
server basically it's a box that you

00:33:08,730 --> 00:33:12,150
plug in

00:33:09,840 --> 00:33:14,940
and encrypts everything it runs like

00:33:12,150 --> 00:33:16,320
blockchain if you want and so their goal

00:33:14,940 --> 00:33:18,659
is to run this on kind of a Raspberry Pi

00:33:16,320 --> 00:33:20,970
equivalent hardware so really looking at

00:33:18,659 --> 00:33:22,950
you know sled or sequel light on

00:33:20,970 --> 00:33:24,900
embedded platform or Postgres or other

00:33:22,950 --> 00:33:28,049
things when you want to scale us up on

00:33:24,900 --> 00:33:31,230
say a kubernetes cluster efficient again

00:33:28,049 --> 00:33:33,150
I think you know I think we we get when

00:33:31,230 --> 00:33:34,529
you develop for cloud you gotta get into

00:33:33,150 --> 00:33:36,090
this mindset that you know you don't

00:33:34,529 --> 00:33:40,200
have to be that efficient but those

00:33:36,090 --> 00:33:41,880
costs add up and so it may be a bit of a

00:33:40,200 --> 00:33:43,590
hindrance but you know everything that

00:33:41,880 --> 00:33:46,070
were really focused on is efficiency so

00:33:43,590 --> 00:33:47,370
you'll see a lot in code that we use cow

00:33:46,070 --> 00:33:51,929
copy-on-write

00:33:47,370 --> 00:33:54,380
semantics we do a lot of you know

00:33:51,929 --> 00:33:56,909
borrows when we pass things around so

00:33:54,380 --> 00:33:58,919
you know for me is who's not I haven't

00:33:56,909 --> 00:34:01,470
done a whole lot of high-performance

00:33:58,919 --> 00:34:02,640
rust it's great project because you know

00:34:01,470 --> 00:34:05,309
one or two other folks that are working

00:34:02,640 --> 00:34:06,450
on it are very performance why they've

00:34:05,309 --> 00:34:07,679
done a lot stuff so I'm learning a lot

00:34:06,450 --> 00:34:09,810
and I think this is one of the things

00:34:07,679 --> 00:34:11,250
that tracked with me is really what is

00:34:09,810 --> 00:34:14,210
high-performance for us to look like on

00:34:11,250 --> 00:34:17,070
a back-end service so it's pretty cool

00:34:14,210 --> 00:34:18,540
again clean non legacy code

00:34:17,070 --> 00:34:21,899
architectures really what we're looking

00:34:18,540 --> 00:34:24,300
for so trying to not just take what's

00:34:21,899 --> 00:34:26,159
out there and and implement it but try

00:34:24,300 --> 00:34:27,330
and you know really look at making this

00:34:26,159 --> 00:34:30,869
something that's easy to maintain and

00:34:27,330 --> 00:34:32,820
hopefully welcome new users and then you

00:34:30,869 --> 00:34:35,909
know call me crazy but I've done a lot

00:34:32,820 --> 00:34:37,800
with IOT in the past and I think that

00:34:35,909 --> 00:34:39,780
there's something here so matrix had

00:34:37,800 --> 00:34:42,960
this concept of kind of being something

00:34:39,780 --> 00:34:44,280
for matrix or for for IOT you see it you

00:34:42,960 --> 00:34:45,990
see I Oh tea literally and some of the

00:34:44,280 --> 00:34:47,879
documentation really hasn't panned out

00:34:45,990 --> 00:34:50,369
but but when you start to look at kind

00:34:47,879 --> 00:34:52,710
of this p2p aspect of it I think there

00:34:50,369 --> 00:34:54,510
is some benefit there to the way that

00:34:52,710 --> 00:34:58,170
the message passing works and the way

00:34:54,510 --> 00:34:59,790
that they build a dag to sort of to

00:34:58,170 --> 00:35:01,650
merge different messages on different

00:34:59,790 --> 00:35:02,820
home server so it's partially an

00:35:01,650 --> 00:35:04,650
interest here I don't know if it'll ever

00:35:02,820 --> 00:35:07,160
pan out but kind of one of the things

00:35:04,650 --> 00:35:09,839
I'm thinking towards this you know

00:35:07,160 --> 00:35:15,109
something that may be a good and like a

00:35:09,839 --> 00:35:17,520
distributed p2p mqtt type replacement so

00:35:15,109 --> 00:35:23,260
let's just have a quick look at the code

00:35:17,520 --> 00:35:26,770
I'm going to let me share my screen here

00:35:23,260 --> 00:35:29,170
with code and I'll just give you a quick

00:35:26,770 --> 00:35:33,099
just overview of the project I won't go

00:35:29,170 --> 00:35:34,599
too deep but I think you know I think

00:35:33,099 --> 00:35:37,839
you can see that you know what we're

00:35:34,599 --> 00:35:41,859
really starting out to do here I hope

00:35:37,839 --> 00:35:45,520
everybody can see this so again this is

00:35:41,859 --> 00:35:48,190
obviously the github I'll just give you

00:35:45,520 --> 00:35:50,560
a high level thing so this storage

00:35:48,190 --> 00:35:52,390
structure here is under DB module so

00:35:50,560 --> 00:35:54,040
we're I don't know if I don't see a lot

00:35:52,390 --> 00:35:56,109
of rest projects use heavy modules but

00:35:54,040 --> 00:35:58,630
you know coming back from the Ruby on

00:35:56,109 --> 00:35:59,800
Rails days I'm a big fan of sort of that

00:35:58,630 --> 00:36:02,740
model-view-controller

00:35:59,800 --> 00:36:04,570
you know philosophy so you know call me

00:36:02,740 --> 00:36:06,849
old-fashioned but this is kind of how

00:36:04,570 --> 00:36:09,099
started model it so you know the server

00:36:06,849 --> 00:36:11,140
concept the server has handlers the

00:36:09,099 --> 00:36:12,880
ideas that these handlers which are the

00:36:11,140 --> 00:36:17,020
things actually respond to the web

00:36:12,880 --> 00:36:20,619
requests come in and from there you

00:36:17,020 --> 00:36:25,560
might you would basically just call

00:36:20,619 --> 00:36:28,000
models if you will and render the output

00:36:25,560 --> 00:36:29,500
models here are just you know again this

00:36:28,000 --> 00:36:31,569
is a new product so we're still pretty

00:36:29,500 --> 00:36:34,060
early but models here are you know

00:36:31,569 --> 00:36:36,819
obviously represent sort of the data

00:36:34,060 --> 00:36:38,650
structures in here in the system there's

00:36:36,819 --> 00:36:41,619
a lot of data structures there's a lot

00:36:38,650 --> 00:36:44,680
of endpoints you know the rest interface

00:36:41,619 --> 00:36:47,829
for matrix server is huge so it's a lot

00:36:44,680 --> 00:36:49,210
of work to do and the DB what I think is

00:36:47,829 --> 00:36:50,530
kind of cool is just the storage trade

00:36:49,210 --> 00:36:57,040
that we've done you know we've basically

00:36:50,530 --> 00:36:58,359
created a very simple store you know we

00:36:57,040 --> 00:37:02,470
basically wrap

00:36:58,359 --> 00:37:04,540
PGs or SQL X for the Postgres you can

00:37:02,470 --> 00:37:06,849
pretty much do anything with a storage

00:37:04,540 --> 00:37:10,210
tray what's nice is the store trait

00:37:06,849 --> 00:37:11,560
because we have these you know these

00:37:10,210 --> 00:37:14,290
sort of simple things like you know got

00:37:11,560 --> 00:37:16,750
a device a device things like that the

00:37:14,290 --> 00:37:18,520
mock thing makes it really easy because

00:37:16,750 --> 00:37:20,560
I don't know if you've ever had to write

00:37:18,520 --> 00:37:22,300
unit tests but whenever the database

00:37:20,560 --> 00:37:23,560
involved it really kind of stinks

00:37:22,300 --> 00:37:25,990
because you're bringing up a database

00:37:23,560 --> 00:37:28,150
server to test and so this mock object

00:37:25,990 --> 00:37:31,780
really makes it neat where we actually

00:37:28,150 --> 00:37:33,910
just create you know create a structure

00:37:31,780 --> 00:37:35,859
and then right before your unit test you

00:37:33,910 --> 00:37:36,590
just you just set the value that you

00:37:35,859 --> 00:37:38,810
want return

00:37:36,590 --> 00:37:40,700
you know your expected return value from

00:37:38,810 --> 00:37:42,320
the handler and it makes it really nice

00:37:40,700 --> 00:37:43,550
to be able to mock this out and so from

00:37:42,320 --> 00:37:46,160
the get-go since we're doing the store

00:37:43,550 --> 00:37:49,820
tray it makes it pretty easy what else

00:37:46,160 --> 00:37:52,160
can I say here yeah not too much here

00:37:49,820 --> 00:37:54,980
yet so again you know I think we focused

00:37:52,160 --> 00:37:56,840
a lot on structure if you look at sort

00:37:54,980 --> 00:38:00,500
of the main module it's pretty simple

00:37:56,840 --> 00:38:02,300
just in its - config you know basically

00:38:00,500 --> 00:38:04,100
starts the server and that's it and so

00:38:02,300 --> 00:38:09,800
you know we've done a lot to try and

00:38:04,100 --> 00:38:24,200
keep this clean and modular all right

00:38:09,800 --> 00:38:25,850
let me go back all right so let's see um

00:38:24,200 --> 00:38:28,940
so yeah help I mean part of my whole

00:38:25,850 --> 00:38:30,140
thing is uh I think is a great time if

00:38:28,940 --> 00:38:32,480
you ever want to get an open source

00:38:30,140 --> 00:38:35,150
project you want to get into you know

00:38:32,480 --> 00:38:37,160
API or server-side development it's a

00:38:35,150 --> 00:38:40,190
great project it has a great spec

00:38:37,160 --> 00:38:44,000
already written have complete open epi

00:38:40,190 --> 00:38:46,580
Docs it's a well well-documented spec so

00:38:44,000 --> 00:38:48,590
it's pretty easy to implement trying to

00:38:46,580 --> 00:38:50,690
be as beginner friendly so we have a

00:38:48,590 --> 00:38:52,670
matrix channel we spent I spent a lot of

00:38:50,690 --> 00:38:55,370
time just helping people try and get

00:38:52,670 --> 00:38:56,840
through their first commit there's ton

00:38:55,370 --> 00:38:59,780
of work again there's a lot of endpoints

00:38:56,840 --> 00:39:02,720
so there's lots of things to take off I

00:38:59,780 --> 00:39:05,060
think I copied all the red endpoints

00:39:02,720 --> 00:39:07,520
over to issues in github and it's like a

00:39:05,060 --> 00:39:09,650
hundred endpoints so lots of easy things

00:39:07,520 --> 00:39:11,300
to pick off and it's brand-new so I

00:39:09,650 --> 00:39:13,720
think it's kind of cool to be you know

00:39:11,300 --> 00:39:16,790
it's hard to come into a project that

00:39:13,720 --> 00:39:18,770
has been established and make it you

00:39:16,790 --> 00:39:20,480
know meaningful dent

00:39:18,770 --> 00:39:21,860
you know the barrier is a little bit

00:39:20,480 --> 00:39:24,620
higher but I think with a brand-new

00:39:21,860 --> 00:39:26,180
project it's it's great because so much

00:39:24,620 --> 00:39:28,340
stuff to do you get to be involved in

00:39:26,180 --> 00:39:30,320
the architecture so I'm hoping that some

00:39:28,340 --> 00:39:33,650
of you will be interested in checking

00:39:30,320 --> 00:39:38,270
this out and you can check it out it's

00:39:33,650 --> 00:39:39,920
at github Maelstrom IRS Maelstrom and

00:39:38,270 --> 00:39:42,620
then you can reach me here my company is

00:39:39,920 --> 00:39:44,330
hiring if you're in Germany and you want

00:39:42,620 --> 00:39:48,190
a rush job feel free to reach out to me

00:39:44,330 --> 00:39:51,190
and as my email and Twitter handle

00:39:48,190 --> 00:39:51,190
questions

00:39:51,860 --> 00:40:00,650
thank you so much Chris this was an

00:39:55,050 --> 00:40:04,140
amazing took we have a few questions yes

00:40:00,650 --> 00:40:07,200
if I scroll up and someone was asking

00:40:04,140 --> 00:40:09,750
and database agnostic instead of

00:40:07,200 --> 00:40:12,120
progress which creates might be or I

00:40:09,750 --> 00:40:16,410
think the person might ask how are you

00:40:12,120 --> 00:40:19,290
accomplishing a data agnostic stack yes

00:40:16,410 --> 00:40:21,660
so we basically use a storage trait so

00:40:19,290 --> 00:40:25,440
we create a trait that has sort of the

00:40:21,660 --> 00:40:27,000
high level functions if you will about

00:40:25,440 --> 00:40:29,880
what needs to be stored so for instance

00:40:27,000 --> 00:40:32,940
if I want to get an account there would

00:40:29,880 --> 00:40:35,490
be like an account you know that you

00:40:32,940 --> 00:40:38,340
need to implement and the models are

00:40:35,490 --> 00:40:39,900
returned from the storage trait or that

00:40:38,340 --> 00:40:43,410
are sent to the storage trait are there

00:40:39,900 --> 00:40:46,950
and so because we define all of the sort

00:40:43,410 --> 00:40:49,110
of you know the interface between what

00:40:46,950 --> 00:40:51,660
the storage layer needs to get and set

00:40:49,110 --> 00:40:54,900
and the rest application it becomes

00:40:51,660 --> 00:40:56,880
becomes pretty simple and then what we

00:40:54,900 --> 00:40:58,920
do is in the beginning we look at the

00:40:56,880 --> 00:41:02,040
connection string and then we initialize

00:40:58,920 --> 00:41:04,440
the correct storage so in your

00:41:02,040 --> 00:41:06,600
initialization function you you know

00:41:04,440 --> 00:41:09,660
whatever struct or whatever structure

00:41:06,600 --> 00:41:12,120
you create for this so for instance we

00:41:09,660 --> 00:41:15,870
use SQL X which is pretty cool up and

00:41:12,120 --> 00:41:18,240
coming project and we basically create a

00:41:15,870 --> 00:41:21,260
structure that has a database pool in it

00:41:18,240 --> 00:41:27,750
already configured and we implement the

00:41:21,260 --> 00:41:29,790
data storage interfaces okay cool and we

00:41:27,750 --> 00:41:32,640
have a few more questions I will grab

00:41:29,790 --> 00:41:36,180
them first from the right chat so and

00:41:32,640 --> 00:41:37,680
someone asked for the project URL maybe

00:41:36,180 --> 00:41:42,030
you can post it afterwards again in

00:41:37,680 --> 00:41:45,510
matrix or in the zoom chat or and then

00:41:42,030 --> 00:41:49,650
the next question is is metrics protocol

00:41:45,510 --> 00:41:52,050
all all rest or is there some WebSocket

00:41:49,650 --> 00:41:55,400
front-end no all rest surprisingly very

00:41:52,050 --> 00:41:57,630
simple and for some of the p2p stuff

00:41:55,400 --> 00:42:00,060
they're looking at doing it over co-op

00:41:57,630 --> 00:42:02,550
which is would be something new very

00:42:00,060 --> 00:42:03,480
lightweight rats but it's all rest the

00:42:02,550 --> 00:42:08,280
hard

00:42:03,480 --> 00:42:10,590
part really is in the guest the version

00:42:08,280 --> 00:42:13,410
control if you will so most the systems

00:42:10,590 --> 00:42:16,560
use a you know directed a cyclical graph

00:42:13,410 --> 00:42:18,119
to sort of use very much like it but all

00:42:16,560 --> 00:42:20,670
these home servers are keeping track of

00:42:18,119 --> 00:42:22,500
local their local copy of the chatroom

00:42:20,670 --> 00:42:25,050
and so that's all merged so that is

00:42:22,500 --> 00:42:27,840
really the hard part they do quite well

00:42:25,050 --> 00:42:29,550
they do a long pole process so still

00:42:27,840 --> 00:42:33,180
let's still get requests it's not

00:42:29,550 --> 00:42:35,550
WebSocket and you know it's pretty

00:42:33,180 --> 00:42:37,320
responsive it looks good so it's very

00:42:35,550 --> 00:42:39,570
simple that's the beauty of the rest

00:42:37,320 --> 00:42:41,010
interface it's super simple this is why

00:42:39,570 --> 00:42:42,030
I think it's a good project for anybody

00:42:41,010 --> 00:42:44,609
that wants to get involved in something

00:42:42,030 --> 00:42:47,460
it's not complex you know it's pretty

00:42:44,609 --> 00:42:50,340
simple and straightforward okay thank

00:42:47,460 --> 00:42:52,980
you maybe three more questions quick

00:42:50,340 --> 00:42:57,660
questions and do you know why can't you

00:42:52,980 --> 00:43:00,840
it went with am slit and I might have

00:42:57,660 --> 00:43:05,550
missed it but do you use some stuff from

00:43:00,840 --> 00:43:06,990
a rumor so okay so the first question so

00:43:05,550 --> 00:43:08,430
condiment one was slide because I think

00:43:06,990 --> 00:43:10,740
they kind of wanted batteries included

00:43:08,430 --> 00:43:14,040
sort of turnkey thing that somebody can

00:43:10,740 --> 00:43:16,710
just wants her own home server and again

00:43:14,040 --> 00:43:19,650
you know the guy that does it is super

00:43:16,710 --> 00:43:22,200
cool him and I you know chat a lot and

00:43:19,650 --> 00:43:25,230
you know he's just looking for kind of a

00:43:22,200 --> 00:43:26,609
hack together system he realized heavily

00:43:25,230 --> 00:43:28,770
on rumah which i think is good there's

00:43:26,609 --> 00:43:32,700
all it's been a lot of work evolving

00:43:28,770 --> 00:43:34,440
those libraries and we're more of a you

00:43:32,700 --> 00:43:35,760
know we're trying to we're trying to

00:43:34,440 --> 00:43:37,619
appeal to both sort of a large-scale

00:43:35,760 --> 00:43:39,930
implementation as well as an embedded

00:43:37,619 --> 00:43:41,670
solution so again I think we wanted to

00:43:39,930 --> 00:43:46,050
be agnostic slide look super cool but

00:43:41,670 --> 00:43:48,090
it's not 1.0 yet and you know I think I

00:43:46,050 --> 00:43:49,560
think we'll implement a storage tray for

00:43:48,090 --> 00:43:51,869
sled kind of when we get a little bit

00:43:49,560 --> 00:43:54,300
more solidified on the data structure

00:43:51,869 --> 00:43:55,859
now in terms of room and yeah we are

00:43:54,300 --> 00:43:58,770
trying to use a limited part of the

00:43:55,859 --> 00:44:02,070
romaso Roma and we've been working with

00:43:58,770 --> 00:44:05,850
the maintainer of Roma which is this guy

00:44:02,070 --> 00:44:07,440
Jonas super super super cool guy that's

00:44:05,850 --> 00:44:09,390
doing a lot of work to maintain that and

00:44:07,440 --> 00:44:11,010
try and give it back and so because

00:44:09,390 --> 00:44:13,710
we're performance minded we've been

00:44:11,010 --> 00:44:17,369
trying to push back some sort of things

00:44:13,710 --> 00:44:19,979
like you know using cow or copying right

00:44:17,369 --> 00:44:21,299
for some of those things I'm trying to

00:44:19,979 --> 00:44:22,979
stay away from some of the macro stuff

00:44:21,299 --> 00:44:24,269
the macro stuff is really neat it'll

00:44:22,979 --> 00:44:26,910
save you a lot of code when you're

00:44:24,269 --> 00:44:29,609
implementing API endpoints but it's also

00:44:26,910 --> 00:44:30,839
kind of a it's black magic in a way the

00:44:29,609 --> 00:44:32,819
way it's structured it's kind of a lot

00:44:30,839 --> 00:44:34,229
of stuff that's hidden from you and not

00:44:32,819 --> 00:44:37,109
that that's a bad thing but what we're

00:44:34,229 --> 00:44:39,450
trying to do is make our even our API

00:44:37,109 --> 00:44:42,089
layer or the server side to be able to

00:44:39,450 --> 00:44:44,069
easy easily be replaced if we want and

00:44:42,089 --> 00:44:47,940
so you know we're just rying to make it

00:44:44,069 --> 00:44:49,650
more accessible amazing this was really

00:44:47,940 --> 00:44:53,279
really interesting there are a few more

00:44:49,650 --> 00:44:55,049
questions and zoom but I think yeah

00:44:53,279 --> 00:44:57,450
there are three more maybe you have time

00:44:55,049 --> 00:44:59,969
to answer them in soon like there's

00:44:57,450 --> 00:45:03,989
somebody asking about know a city and no

00:44:59,969 --> 00:45:06,239
I'll look for embedded maybe you can

00:45:03,989 --> 00:45:08,400
give a quick answer there and then you

00:45:06,239 --> 00:45:09,690
can answer if you want to the rest in

00:45:08,400 --> 00:45:12,269
soon okay great

00:45:09,690 --> 00:45:13,799
well thanks everybody appreciate let me

00:45:12,269 --> 00:45:18,569
speak here and for those that listen

00:45:13,799 --> 00:45:21,210
thanks okay people we have a little

00:45:18,569 --> 00:45:25,049
break now and we have the tradition that

00:45:21,210 --> 00:45:27,509
we break out in breakout rooms so we

00:45:25,049 --> 00:45:31,049
will have em six rooms with em ten

00:45:27,509 --> 00:45:34,859
people each so you will get assigned to

00:45:31,049 --> 00:45:36,839
a random room in case you wanna talk and

00:45:34,859 --> 00:45:39,569
chat with people feel free to activate

00:45:36,839 --> 00:45:42,599
your phone or your or your Emma camera

00:45:39,569 --> 00:45:46,589
if not just don't join the room or if

00:45:42,599 --> 00:45:50,130
the room don't talk feel free but I

00:45:46,589 --> 00:45:52,499
think young eric is gonna create the

00:45:50,130 --> 00:45:55,049
rooms now and will assign you to a

00:45:52,499 --> 00:45:56,700
random one we have around five ten

00:45:55,049 --> 00:45:59,549
minutes and then we will be back with

00:45:56,700 --> 00:46:03,680
our third and last talk so thanks for

00:45:59,549 --> 00:46:03,680
attending so far thanks

00:46:09,319 --> 00:46:11,380
you

00:46:52,850 --> 00:47:02,900
okay people we are back thank you for

00:46:57,950 --> 00:47:06,530
sticking around based on the amount of

00:47:02,900 --> 00:47:12,130
participants we are all all back maybe

00:47:06,530 --> 00:47:17,570
we lost two people that's a good ratio I

00:47:12,130 --> 00:47:18,020
think we are ready right run I think so

00:47:17,570 --> 00:47:20,750
yes

00:47:18,020 --> 00:47:23,660
cool and someone said the breakout rooms

00:47:20,750 --> 00:47:26,390
were too short that's a good good sign I

00:47:23,660 --> 00:47:27,970
guess we can try the next time to make

00:47:26,390 --> 00:47:32,740
them a bit longer

00:47:27,970 --> 00:47:35,120
also to film feel free to exchange zoom

00:47:32,740 --> 00:47:40,100
credentials I think you don't even need

00:47:35,120 --> 00:47:43,160
to hang out afterwards in zoom rooms and

00:47:40,100 --> 00:47:46,060
we try to make them a bit longer the

00:47:43,160 --> 00:47:49,460
next time thanks for the feedback and

00:47:46,060 --> 00:47:53,090
here we go we have our last speaker with

00:47:49,460 --> 00:47:57,320
Mahmoud and he presented already I think

00:47:53,090 --> 00:48:01,100
twice at arrest burden but never on soon

00:47:57,320 --> 00:48:05,530
so he has his first time give it up for

00:48:01,100 --> 00:48:18,860
Mahmoud and take over thanks miss young

00:48:05,530 --> 00:48:29,900
and let me share my screen so I hope you

00:48:18,860 --> 00:48:36,860
see it I don't know right now okay

00:48:29,900 --> 00:48:40,070
thanks cool so today I'm going to talk

00:48:36,860 --> 00:48:42,160
about our today umm first everyone

00:48:40,070 --> 00:48:45,620
should be okay and everyone I hope

00:48:42,160 --> 00:48:48,340
feeling good and safe and healthy at

00:48:45,620 --> 00:48:51,920
home and today I'm going to present

00:48:48,340 --> 00:48:54,050
artillery it's like this fancy name is

00:48:51,920 --> 00:48:58,640
just a description of the repto story

00:48:54,050 --> 00:49:01,730
but it's basically for the things that I

00:48:58,640 --> 00:49:07,270
need at work and also things that I need

00:49:01,730 --> 00:49:07,270
to use for

00:49:08,140 --> 00:49:24,380
all sorry for the they storage systems

00:49:19,550 --> 00:49:25,370
distributed storage systems so um who I

00:49:24,380 --> 00:49:28,220
am Who I am

00:49:25,370 --> 00:49:31,370
I'm vertex click on Internet I'm doing

00:49:28,220 --> 00:49:33,260
data processing engineer by day I'm

00:49:31,370 --> 00:49:34,010
currently working on the experimental

00:49:33,260 --> 00:49:37,520
software

00:49:34,010 --> 00:49:41,750
I am currently lead of the localization

00:49:37,520 --> 00:49:45,770
team in rust and named community by that

00:49:41,750 --> 00:49:48,470
and it's my rear side and let's start

00:49:45,770 --> 00:49:53,360
so this any other systems yes this is

00:49:48,470 --> 00:49:55,280
the topic of today and so everybody

00:49:53,360 --> 00:49:58,130
talks about the city meter systems this

00:49:55,280 --> 00:50:03,310
is very important everyone to give you

00:49:58,130 --> 00:50:07,550
some ideas about it and everybody has

00:50:03,310 --> 00:50:10,340
some knowledge about it but is it easy

00:50:07,550 --> 00:50:13,910
so making distributed systems are not

00:50:10,340 --> 00:50:18,110
semi hard from my point of view it is

00:50:13,910 --> 00:50:22,010
hard so this is by definition it is like

00:50:18,110 --> 00:50:25,220
that everybody talks about it so what I

00:50:22,010 --> 00:50:29,690
can say is that we are going to go

00:50:25,220 --> 00:50:32,360
through from ground up how we do that

00:50:29,690 --> 00:50:34,640
how can you do the service discovery how

00:50:32,360 --> 00:50:37,520
can it form the clusters after that and

00:50:34,640 --> 00:50:39,110
then do the data replication are you

00:50:37,520 --> 00:50:44,930
rotate or application which is basically

00:50:39,110 --> 00:50:45,890
distributed data replication so from

00:50:44,930 --> 00:50:49,730
zero to hero

00:50:45,890 --> 00:50:55,430
all things is inside artillery right now

00:50:49,730 --> 00:50:59,030
and I would say everything is basically

00:50:55,430 --> 00:51:01,570
compartmentalized and in I think in the

00:50:59,030 --> 00:51:04,760
rust environment everything should be

00:51:01,570 --> 00:51:08,120
compartmentalized component-based and

00:51:04,760 --> 00:51:14,750
neat and this is how we are going to do

00:51:08,120 --> 00:51:16,280
this and how artillery is architected so

00:51:14,750 --> 00:51:19,860
this is the first need I need to give

00:51:16,280 --> 00:51:22,110
and diving into the service discovery so

00:51:19,860 --> 00:51:25,680
let's talk about this a little bit how

00:51:22,110 --> 00:51:27,330
can I share the configuration when we

00:51:25,680 --> 00:51:29,940
talk about the configuration of

00:51:27,330 --> 00:51:32,490
instances how do we share how do we

00:51:29,940 --> 00:51:35,430
discover discover the network topology

00:51:32,490 --> 00:51:39,540
in most of the times what we do is that

00:51:35,430 --> 00:51:42,120
we have a central shared state store we

00:51:39,540 --> 00:51:44,160
build up some kind of a central shared

00:51:42,120 --> 00:51:46,800
state store you call it comes to do you

00:51:44,160 --> 00:51:50,820
call it something else you call it etcd

00:51:46,800 --> 00:51:53,820
and you basically deploy it as with all

00:51:50,820 --> 00:51:59,720
other services together in the same

00:51:53,820 --> 00:52:03,810
network and you actually register these

00:51:59,720 --> 00:52:06,600
instances or the service descriptions to

00:52:03,810 --> 00:52:09,410
this key value store this central

00:52:06,600 --> 00:52:12,120
service change the configuration or

00:52:09,410 --> 00:52:18,540
network topology in the local link at

00:52:12,120 --> 00:52:21,240
the same local network and be writing a

00:52:18,540 --> 00:52:23,880
web api with hash table lookup so it is

00:52:21,240 --> 00:52:26,460
basically right all these centralized

00:52:23,880 --> 00:52:29,370
services like I mean the previous slide

00:52:26,460 --> 00:52:31,590
I think Reese said that the future is as

00:52:29,370 --> 00:52:35,100
decentralized I totally agree this is

00:52:31,590 --> 00:52:36,750
correct we are what we are doing in most

00:52:35,100 --> 00:52:38,490
of the times in the production whirlpool

00:52:36,750 --> 00:52:42,420
was basically deploying some kind of a

00:52:38,490 --> 00:52:45,840
small service that is actually doing

00:52:42,420 --> 00:52:50,640
some kind of a configuration

00:52:45,840 --> 00:52:53,310
distribution this is wrong again in my

00:52:50,640 --> 00:52:53,940
opinion I always be subjective opinions

00:52:53,310 --> 00:52:55,770
in my toes

00:52:53,940 --> 00:52:57,720
this isn't this is my opinion and this

00:52:55,770 --> 00:52:59,820
is it feels like every single ni sunde

00:52:57,720 --> 00:53:05,990
pull something like this it feels like

00:52:59,820 --> 00:53:05,990
they just deploy the hash table and then

00:53:06,110 --> 00:53:10,590
are you thinking that bringing the

00:53:08,700 --> 00:53:12,540
ancient tech back in the foreground is

00:53:10,590 --> 00:53:14,630
the good thing so all the distributed

00:53:12,540 --> 00:53:17,640
system engineers best at that so they

00:53:14,630 --> 00:53:20,640
change a little bit put some mesh up and

00:53:17,640 --> 00:53:23,010
they is serving to your face so this is

00:53:20,640 --> 00:53:26,300
how it is going to work so zeroconf is

00:53:23,010 --> 00:53:28,740
the thing and 20 years old stuff yes

00:53:26,300 --> 00:53:33,390
nearly two and you make more than that

00:53:28,740 --> 00:53:34,980
yet network is unreliable plains planet

00:53:33,390 --> 00:53:38,280
scale systems are not for Network

00:53:34,980 --> 00:53:40,820
they're based on rendezvous so and I

00:53:38,280 --> 00:53:48,030
think random who is a good thing on the

00:53:40,820 --> 00:53:49,920
local network and configure in

00:53:48,030 --> 00:53:52,590
combination with networks are the good

00:53:49,920 --> 00:53:55,110
thing also and services curve should be

00:53:52,590 --> 00:53:57,960
conformed to rendezvous style the

00:53:55,110 --> 00:54:01,020
rendezvous mentality that form is the

00:53:57,960 --> 00:54:03,150
good form I will say so how does it'll

00:54:01,020 --> 00:54:05,550
convert there is something called

00:54:03,150 --> 00:54:08,910
bonkers protocol let's say does the

00:54:05,550 --> 00:54:10,920
instance is serving at 13:37 and there's

00:54:08,910 --> 00:54:13,710
also creates a protocol that some other

00:54:10,920 --> 00:54:16,980
server serves also in addition to the

00:54:13,710 --> 00:54:18,420
bonkers protocol they are actually in

00:54:16,980 --> 00:54:21,390
the local area network they are saying

00:54:18,420 --> 00:54:23,430
that yeah I mean I'm serving this I'm

00:54:21,390 --> 00:54:27,090
showing these services and stuff like

00:54:23,430 --> 00:54:28,920
that I mean this is my IP you already

00:54:27,090 --> 00:54:33,000
know it from the destination yeah and

00:54:28,920 --> 00:54:36,410
source and stuff so let's if you it's ok

00:54:33,000 --> 00:54:41,160
did that and if your software is

00:54:36,410 --> 00:54:45,270
aligning with this let's talk on that

00:54:41,160 --> 00:54:49,620
protocol this can be from broadcast from

00:54:45,270 --> 00:54:51,540
one server to all the servers or in UDP

00:54:49,620 --> 00:54:55,260
style any casts of one server the one

00:54:51,540 --> 00:55:00,720
server directed or hopped hop paste this

00:54:55,260 --> 00:55:02,580
can work quite good in the without any

00:55:00,720 --> 00:55:06,990
configuration server that is running

00:55:02,580 --> 00:55:09,300
around so what this thing is used used

00:55:06,990 --> 00:55:12,000
from - was computing to the wireless

00:55:09,300 --> 00:55:14,370
sensor networks we are not using that

00:55:12,000 --> 00:55:16,400
much in clouds why because we are using

00:55:14,370 --> 00:55:19,520
something called cuban areas and the

00:55:16,400 --> 00:55:24,270
star I put asterisks in there because

00:55:19,520 --> 00:55:25,140
cordon is two DNA's servation meshes and

00:55:24,270 --> 00:55:28,530
stuff like that

00:55:25,140 --> 00:55:30,840
handling these kind of things - I mean

00:55:28,530 --> 00:55:31,410
you might not need that but let me tell

00:55:30,840 --> 00:55:35,190
me again

00:55:31,410 --> 00:55:38,760
DNS also kind of centralized even nobody

00:55:35,190 --> 00:55:41,880
wants to admit that this is the thing

00:55:38,760 --> 00:55:44,250
but if you say still want full-blown

00:55:41,880 --> 00:55:45,489
zero Kong

00:55:44,250 --> 00:55:47,869
[Music]

00:55:45,489 --> 00:55:49,789
then use few minutes with the host

00:55:47,869 --> 00:55:53,390
network this is just a one single line

00:55:49,789 --> 00:55:56,630
just hold it work - the blood is in the

00:55:53,390 --> 00:55:59,089
Amazon in AWS there is something called

00:55:56,630 --> 00:56:05,029
the CNI driver so you can deploy the CNI

00:55:59,089 --> 00:56:11,329
driver with computing the cni you can

00:56:05,029 --> 00:56:14,239
deploy that zeroconf network inside eks

00:56:11,329 --> 00:56:17,469
and stuff like that on hosts you can use

00:56:14,239 --> 00:56:20,059
hosts network to send broadcast messages

00:56:17,469 --> 00:56:23,359
this host network is basically that for

00:56:20,059 --> 00:56:25,099
that and you can share network topology

00:56:23,359 --> 00:56:28,999
you know intermediate third party server

00:56:25,099 --> 00:56:30,709
or funky demonized web applications yeah

00:56:28,999 --> 00:56:32,900
like I've said before I call it funky

00:56:30,709 --> 00:56:34,549
denies my obligations I don't think that

00:56:32,900 --> 00:56:39,499
this is needed and it shouldn't be

00:56:34,549 --> 00:56:41,779
needed at all so at this point when we

00:56:39,499 --> 00:56:43,549
come to that point and when we know how

00:56:41,779 --> 00:56:46,999
this thing works and how the

00:56:43,549 --> 00:56:49,339
configuration is distributed we can say

00:56:46,999 --> 00:56:52,400
that we established a network at the

00:56:49,339 --> 00:56:59,689
link local level so in one single data

00:56:52,400 --> 00:57:07,150
center in the once in an amount of nodes

00:56:59,689 --> 00:57:13,249
is already in the already established

00:57:07,150 --> 00:57:19,069
kind of mesh mesh they call it nowadays

00:57:13,249 --> 00:57:21,650
so this is the good part of it we know

00:57:19,069 --> 00:57:25,179
that this is one single data center if

00:57:21,650 --> 00:57:27,859
you want to go across data centers so

00:57:25,179 --> 00:57:29,869
data centers data center discovery if

00:57:27,859 --> 00:57:35,689
you don't care about the broadcasts and

00:57:29,869 --> 00:57:39,319
or if you want to do some kind of some

00:57:35,689 --> 00:57:42,919
kind of optimization to do lookups you

00:57:39,319 --> 00:57:46,419
can use DHT so this is one of the papers

00:57:42,919 --> 00:57:46,419
one of the most prominent papers about

00:57:46,959 --> 00:57:53,869
using DHT in the packet bodies to

00:57:50,689 --> 00:57:56,509
discover the other data centers and

00:57:53,869 --> 00:57:57,830
their topology and this is actually a

00:57:56,509 --> 00:58:01,560
good thing because

00:57:57,830 --> 00:58:03,780
th-th-the servers level I mean data

00:58:01,560 --> 00:58:10,550
center that would cloud level it's nice

00:58:03,780 --> 00:58:10,550
it's not privacy doubting I would say

00:58:11,450 --> 00:58:16,140
either zeroconf or another way you will

00:58:14,700 --> 00:58:20,910
find discovering the services I think

00:58:16,140 --> 00:58:21,980
and I started with zero count it was the

00:58:20,910 --> 00:58:24,630
easiest for me

00:58:21,980 --> 00:58:27,270
an artillery console it built a zero

00:58:24,630 --> 00:58:31,590
conflict but pure broadcast like I said

00:58:27,270 --> 00:58:34,500
and you to be any gas based methods this

00:58:31,590 --> 00:58:41,100
is actually makes everything get tested

00:58:34,500 --> 00:58:43,680
and also kind of helping me to find out

00:58:41,100 --> 00:58:47,040
IPS in the community hardware

00:58:43,680 --> 00:58:49,920
deployments and stuff like that so at

00:58:47,040 --> 00:58:54,470
that point we have the in IP information

00:58:49,920 --> 00:58:58,170
I would say and I enter form a cluster

00:58:54,470 --> 00:59:00,590
so I need to form something something

00:58:58,170 --> 00:59:03,960
that makes notes communicate so the

00:59:00,590 --> 00:59:07,710
upper level protocol that are going to

00:59:03,960 --> 00:59:13,050
the application level kind of in

00:59:07,710 --> 00:59:15,150
necessity so forming clusters I need

00:59:13,050 --> 00:59:18,570
something I have some requirements in my

00:59:15,150 --> 00:59:20,310
mind when I'm doing this and it should

00:59:18,570 --> 00:59:22,680
be very flexible at every single user

00:59:20,310 --> 00:59:25,230
also who also develop some kind of the

00:59:22,680 --> 00:59:29,160
queries you know them database system

00:59:25,230 --> 00:59:31,290
should also lose this and or some kind

00:59:29,160 --> 00:59:33,330
of like peer to peer application or

00:59:31,290 --> 00:59:37,070
whatever you want to call it that is

00:59:33,330 --> 00:59:39,270
also a good thing that can use I think

00:59:37,070 --> 00:59:41,160
forming a colossal and receiving

00:59:39,270 --> 00:59:43,200
membership events is needed to make the

00:59:41,160 --> 00:59:45,440
communication medium for nodes so

00:59:43,200 --> 00:59:47,790
members can go down members can join

00:59:45,440 --> 00:59:52,200
we must can actually talk about these

00:59:47,790 --> 00:59:56,850
kind of things like their state and this

00:59:52,200 --> 00:59:58,200
is how we need to communicate about this

00:59:56,850 --> 01:00:02,190
these are the things that we need to

00:59:58,200 --> 01:00:04,080
communicate about also it is for it's

01:00:02,190 --> 01:00:06,210
needed for the database system so look

01:00:04,080 --> 01:00:07,530
up for replicas or they actually taste

01:00:06,210 --> 01:00:10,950
that is not for the dead look

01:00:07,530 --> 01:00:12,870
based studies conclusive a kind of

01:00:10,950 --> 01:00:15,630
heartbeat messages and between the

01:00:12,870 --> 01:00:17,820
instances and stuff like that is nice or

01:00:15,630 --> 01:00:22,710
any other service actually not only data

01:00:17,820 --> 01:00:25,860
services or data systems to be honest so

01:00:22,710 --> 01:00:29,850
the protocol should be flexible so I

01:00:25,860 --> 01:00:32,580
mean in paper it says that there are

01:00:29,850 --> 01:00:34,970
four states and the replication the

01:00:32,580 --> 01:00:39,000
replicated state machine has four states

01:00:34,970 --> 01:00:41,310
to actually distribute the work but it's

01:00:39,000 --> 01:00:43,530
not like that on reality every

01:00:41,310 --> 01:00:46,590
everything in the Academy Academy is

01:00:43,530 --> 01:00:48,990
like pink glasses everything is

01:00:46,590 --> 01:00:51,720
beautiful but when in reality it's not

01:00:48,990 --> 01:00:55,140
like that so you need to alter the

01:00:51,720 --> 01:00:58,800
existing paper implementation to conform

01:00:55,140 --> 01:01:00,540
to the actual use cases so probably some

01:00:58,800 --> 01:01:02,220
one of the users and come and say that

01:01:00,540 --> 01:01:05,640
they want to send some kind of custom

01:01:02,220 --> 01:01:08,070
packages custom messages this will allow

01:01:05,640 --> 01:01:11,700
that and it allowed that this was the

01:01:08,070 --> 01:01:15,330
requirement and the network should be

01:01:11,700 --> 01:01:17,190
congested of packets this is broadcast

01:01:15,330 --> 01:01:18,840
on parish in congestion and all other

01:01:17,190 --> 01:01:23,490
things should be considered during the

01:01:18,840 --> 01:01:26,970
design and I need less packets and more

01:01:23,490 --> 01:01:30,000
work so the this is related to

01:01:26,970 --> 01:01:32,640
congestion bound uppercase traffic so it

01:01:30,000 --> 01:01:35,910
should actually slow itself down at some

01:01:32,640 --> 01:01:38,850
point so I am thinking about what can be

01:01:35,910 --> 01:01:40,770
algorithm so what can the protocol what

01:01:38,850 --> 01:01:41,250
can the algorithm how I can implement

01:01:40,770 --> 01:01:45,600
this

01:01:41,250 --> 01:01:48,330
I said epidemic so it's a very well

01:01:45,600 --> 01:01:51,650
known everybody knows that actually

01:01:48,330 --> 01:01:54,570
cause it let's call it goes it because

01:01:51,650 --> 01:01:59,660
rumor mongering protocol you can say

01:01:54,570 --> 01:02:02,880
this is think that actually helps you to

01:01:59,660 --> 01:02:05,040
form the cluster and get modified by the

01:02:02,880 --> 01:02:07,500
membership changes in their necks and

01:02:05,040 --> 01:02:09,660
stuff like that so I implement this even

01:02:07,500 --> 01:02:13,290
like falling fully customized agility

01:02:09,660 --> 01:02:15,750
based membership and I also implemented

01:02:13,290 --> 01:02:19,800
the user-defined events that you can

01:02:15,750 --> 01:02:21,180
send any payload up to the your outers

01:02:19,800 --> 01:02:23,730
fragmentation scheme

01:02:21,180 --> 01:02:29,760
or that orchestration systems virtual

01:02:23,730 --> 01:02:32,190
networking scheme allows you you can

01:02:29,760 --> 01:02:35,309
serialize anything to Bing quote I mean

01:02:32,190 --> 01:02:38,250
anything from being code to the JSON or

01:02:35,309 --> 01:02:40,710
whatever and you can sell your eyes to

01:02:38,250 --> 01:02:45,329
anything and just send it because it's

01:02:40,710 --> 01:02:47,550
just vice so maybe you know that I am

01:02:45,329 --> 01:02:51,720
also working on it's a bunch of cool

01:02:47,550 --> 01:02:53,460
people on Bastion and you can pick it up

01:02:51,720 --> 01:02:56,160
with Bastion so you can just put inside

01:02:53,460 --> 01:03:00,780
the bastion and you have undying fully

01:02:56,160 --> 01:03:02,460
reliable ap available and partially

01:03:00,780 --> 01:03:04,309
party torrents this is you know the

01:03:02,460 --> 01:03:07,920
cluster bit custom message send events

01:03:04,309 --> 01:03:10,910
so and you don't need to call someone

01:03:07,920 --> 01:03:14,339
when it fails because you wrote the code

01:03:10,910 --> 01:03:19,920
there is it and it's not going to crash

01:03:14,339 --> 01:03:20,970
down that is the good part of it so when

01:03:19,920 --> 01:03:23,369
I rewrite it

01:03:20,970 --> 01:03:25,440
I think that I should make it well

01:03:23,369 --> 01:03:31,109
tested because I not use it in the

01:03:25,440 --> 01:03:32,549
actual workload and I need to do more

01:03:31,109 --> 01:03:34,470
checking there to model checkers and

01:03:32,549 --> 01:03:38,369
possible worst-case scenarios and one of

01:03:34,470 --> 01:03:40,619
the best thing that I'm looking for is

01:03:38,369 --> 01:03:43,369
that Monte Carlo elevated methods and

01:03:40,619 --> 01:03:48,619
stuff like that will check the system

01:03:43,369 --> 01:03:52,530
and I'm working on that

01:03:48,619 --> 01:03:57,960
I checked the worst case scenarios not

01:03:52,530 --> 01:04:02,210
best case scenarios I mean this is the

01:03:57,960 --> 01:04:02,210
stock stochastic metals are shiny and

01:04:02,390 --> 01:04:09,030
meanwhile I release the cows testing

01:04:05,970 --> 01:04:10,260
harness called chaos he's like in my

01:04:09,030 --> 01:04:12,569
language is called Karl's

01:04:10,260 --> 01:04:14,579
and I was in somebody took the cows

01:04:12,569 --> 01:04:19,619
crate so I think that was the reason

01:04:14,579 --> 01:04:21,569
that I put this in my language so this

01:04:19,619 --> 01:04:24,089
enabled our tiller to be tested so it

01:04:21,569 --> 01:04:26,369
just randomly in France in points but

01:04:24,089 --> 01:04:29,849
you define different points and these

01:04:26,369 --> 01:04:32,370
are the very important points that might

01:04:29,849 --> 01:04:34,010
actually crash the system

01:04:32,370 --> 01:04:38,770
[Music]

01:04:34,010 --> 01:04:41,520
so um this thing is also open sourced

01:04:38,770 --> 01:04:42,970
meanwhile I worked on that and then

01:04:41,520 --> 01:04:53,570
[Music]

01:04:42,970 --> 01:04:57,109
publish this crate so in reality how it

01:04:53,570 --> 01:05:04,070
works is like this so this is just for

01:04:57,109 --> 01:05:06,160
now the local AP cluster and don't mind

01:05:04,070 --> 01:05:10,250
the eyepiece because I didn't enable the

01:05:06,160 --> 01:05:12,080
discovery part because I mean yeah

01:05:10,250 --> 01:05:15,040
[Music]

01:05:12,080 --> 01:05:18,950
the broadcasting is not working on some

01:05:15,040 --> 01:05:23,930
stacks to be honest that was one of the

01:05:18,950 --> 01:05:29,420
reasons I think especially on dueling in

01:05:23,930 --> 01:05:32,930
the local level but yeah I mean and then

01:05:29,420 --> 01:05:35,420
I overcome with any cast method so this

01:05:32,930 --> 01:05:38,450
was from one of the old ones old videos

01:05:35,420 --> 01:05:40,100
so this is as you can see that our

01:05:38,450 --> 01:05:42,670
membership events are sending to each

01:05:40,100 --> 01:05:48,400
other it sent to each other and then

01:05:42,670 --> 01:05:55,930
sometimes random increment of the

01:05:48,400 --> 01:05:59,480
membership states are pushed down and

01:05:55,930 --> 01:06:01,100
forming the clusters like like it was

01:05:59,480 --> 01:06:04,910
like that ultimately comes at the

01:06:01,100 --> 01:06:07,940
mentioned membership level and in the

01:06:04,910 --> 01:06:11,450
future for distributed actors became

01:06:07,940 --> 01:06:15,200
this just this exchange messages and one

01:06:11,450 --> 01:06:19,030
of our members in the bastion actually I

01:06:15,200 --> 01:06:19,030
just learned that he wrote some kind of

01:06:19,840 --> 01:06:25,610
in an uncommitted or in a lung language

01:06:23,150 --> 01:06:30,460
something called the time to binary

01:06:25,610 --> 01:06:32,320
serialization so I mean if he wrote this

01:06:30,460 --> 01:06:35,960
[Music]

01:06:32,320 --> 01:06:37,580
serialization create so if we can make

01:06:35,960 --> 01:06:42,280
this happen so you can communicate the

01:06:37,580 --> 01:06:48,730
Elven clusters from trust their own

01:06:42,280 --> 01:06:48,730
protocol scheme I think and we can also

01:06:50,500 --> 01:06:55,460
so next up was the data replication I

01:06:53,480 --> 01:06:57,770
just passed but this is the part that is

01:06:55,460 --> 01:07:01,160
actually got funky and I implemented

01:06:57,770 --> 01:07:06,860
this in two weeks and yet another one

01:07:01,160 --> 01:07:08,540
the fresh protocol is coming up for data

01:07:06,860 --> 01:07:10,730
replication - I'm just going to present

01:07:08,540 --> 01:07:15,440
two protocols at the same time in here

01:07:10,730 --> 01:07:18,080
that is going to do data replication so

01:07:15,440 --> 01:07:21,020
we formed the cluster so right now

01:07:18,080 --> 01:07:24,320
everybody knows everyone in this local

01:07:21,020 --> 01:07:26,109
eat local network now we come to the

01:07:24,320 --> 01:07:29,559
point that we need to share

01:07:26,109 --> 01:07:35,739
like huge data or objects big blob

01:07:29,559 --> 01:07:40,589
objects big object blobs and we need to

01:07:35,739 --> 01:07:45,339
work on these they work on these things

01:07:40,589 --> 01:07:49,869
read and write so we start again some

01:07:45,339 --> 01:07:53,049
requirements no not loads are aware of

01:07:49,869 --> 01:07:55,959
each other they are doing room or one

01:07:53,049 --> 01:07:58,899
mungry network is in place topology is

01:07:55,959 --> 01:08:01,259
in place like I told you before need to

01:07:58,899 --> 01:08:04,329
replicate data between the nodes

01:08:01,259 --> 01:08:07,749
let's have strong consistency please

01:08:04,329 --> 01:08:10,869
because people are tend to do the strong

01:08:07,749 --> 01:08:13,269
consistency and they are using rubber to

01:08:10,869 --> 01:08:15,009
the strong consensus they consistency

01:08:13,269 --> 01:08:17,170
for the data replication that is yet

01:08:15,009 --> 01:08:20,230
another topic I'm going to come and go

01:08:17,170 --> 01:08:22,690
I'm going to come baton and don't use

01:08:20,230 --> 01:08:24,730
causes consoles that doesn't mean meant

01:08:22,690 --> 01:08:27,689
for data replication but just for

01:08:24,730 --> 01:08:29,309
agreement that is all set another thing

01:08:27,689 --> 01:08:32,019
[Music]

01:08:29,309 --> 01:08:34,420
to learn strategies should be one or all

01:08:32,019 --> 01:08:38,019
style may be one downside is that

01:08:34,420 --> 01:08:43,359
against the other consensus based

01:08:38,019 --> 01:08:49,900
approaches but this actually amortizes

01:08:43,359 --> 01:08:51,730
that what it is - I think the protocol

01:08:49,900 --> 01:08:53,049
I'm going to mention soon likely to

01:08:51,730 --> 01:08:54,549
replicate the state machines the

01:08:53,049 --> 01:08:57,489
protocol should have lightweight

01:08:54,549 --> 01:09:02,049
replicated state machines logs should be

01:08:57,489 --> 01:09:05,400
ordered this was the water what I wanted

01:09:02,049 --> 01:09:11,309
to have don't need to old-style orders

01:09:05,400 --> 01:09:14,710
probably and yeah

01:09:11,309 --> 01:09:15,429
so everybody's doing say yeah I mean

01:09:14,710 --> 01:09:17,369
yeah raft

01:09:15,429 --> 01:09:20,529
yeah but it's not for data replication

01:09:17,369 --> 01:09:23,259
are you sayin taxes but I always not for

01:09:20,529 --> 01:09:25,839
data replication no not for that it's

01:09:23,259 --> 01:09:32,339
just for consensus like you want to have

01:09:25,839 --> 01:09:36,159
a agreement on a volume it's not for

01:09:32,339 --> 01:09:38,029
replicating about it it is you are just

01:09:36,159 --> 01:09:40,519
replicating me the third

01:09:38,029 --> 01:09:46,400
channel you are just doing something

01:09:40,519 --> 01:09:49,429
else over it so it's not actually both

01:09:46,400 --> 01:09:53,210
of them not actually meant for actual

01:09:49,429 --> 01:09:56,179
data replication and when I think about

01:09:53,210 --> 01:09:58,940
what is the workload that probably I'm

01:09:56,179 --> 01:10:03,469
going to get at work is that and I

01:09:58,940 --> 01:10:07,210
research it a little bit more and most

01:10:03,469 --> 01:10:12,289
of the workloads are mixed workflows

01:10:07,210 --> 01:10:16,789
it's 60% rate 25% updates 10% insert and

01:10:12,289 --> 01:10:20,599
5% scan um this form the yahoos

01:10:16,789 --> 01:10:27,550
benchmark and it's definition for

01:10:20,599 --> 01:10:31,130
Cassandra and Cassandra like so this was

01:10:27,550 --> 01:10:32,809
the mixed workloads are and I am reading

01:10:31,130 --> 01:10:39,050
a bunch of papers in this between these

01:10:32,809 --> 01:10:43,460
two slides and I'm just like reading

01:10:39,050 --> 01:10:46,039
this that you seeing this graph saying

01:10:43,460 --> 01:10:51,739
that the update operations are not

01:10:46,039 --> 01:10:54,650
actually for even for a ten times more

01:10:51,739 --> 01:10:57,980
update operation trudeau doesn't change

01:10:54,650 --> 01:10:59,170
that much in a sense that was actually

01:10:57,980 --> 01:11:03,050
[Music]

01:10:59,170 --> 01:11:07,429
expected and the percentage below so I

01:11:03,050 --> 01:11:11,749
am like okay so most of the work laws

01:11:07,429 --> 01:11:13,880
are read only read mostly sorry and it's

01:11:11,749 --> 01:11:17,059
hard to make things like the read mostly

01:11:13,880 --> 01:11:19,539
workloads available with low latency

01:11:17,059 --> 01:11:24,130
latency in these circumstances

01:11:19,539 --> 01:11:28,039
especially in the like Tenenbaums

01:11:24,130 --> 01:11:33,650
asymmetrical geological geological

01:11:28,039 --> 01:11:36,699
distribution this is what I discover and

01:11:33,650 --> 01:11:40,030
then I am like oh yeah

01:11:36,699 --> 01:11:43,639
chain replication best thing ever and

01:11:40,030 --> 01:11:44,119
yeah it's like probably in there for a

01:11:43,639 --> 01:11:49,190
long time

01:11:44,119 --> 01:11:51,389
oh god I mean it's like somebody is

01:11:49,190 --> 01:11:56,639
going to

01:11:51,389 --> 01:11:58,679
probably implemented this no yeah no I'm

01:11:56,639 --> 01:12:06,629
just looking how changing replication

01:11:58,679 --> 01:12:08,339
works again and it's basically what you

01:12:06,629 --> 01:12:13,079
see in here in the left hand side is

01:12:08,339 --> 01:12:17,030
normal ordinary chain replication carry

01:12:13,079 --> 01:12:21,419
is run with the tail and the updates are

01:12:17,030 --> 01:12:25,139
it from the head of this link links list

01:12:21,419 --> 01:12:29,429
of a node chain at last mode apportioned

01:12:25,139 --> 01:12:32,129
keyrings mode so the crack mode yeah I

01:12:29,429 --> 01:12:39,349
mean I'm not supporting anything

01:12:32,129 --> 01:12:42,329
his name is crack it says that if a

01:12:39,349 --> 01:12:44,550
queue part is a portion carry so all the

01:12:42,329 --> 01:12:49,019
read requests are distributed over all

01:12:44,550 --> 01:12:53,639
the nodes with the strong consistency

01:12:49,019 --> 01:12:56,219
guarantees there's also a magic

01:12:53,639 --> 01:12:58,499
consistency maximum version bounded

01:12:56,219 --> 01:13:03,809
eventual consistency and stuff like that

01:12:58,499 --> 01:13:08,939
with a lock consistency version

01:13:03,809 --> 01:13:13,649
consistency related stuff but strong

01:13:08,939 --> 01:13:16,289
consistency can be enabled by that so

01:13:13,649 --> 01:13:22,260
I'm implementing this in two weeks I've

01:13:16,289 --> 01:13:23,879
implanted that done and that is that has

01:13:22,260 --> 01:13:26,219
a very booting reach throughput in the

01:13:23,879 --> 01:13:30,719
single threaded synchronized workload

01:13:26,219 --> 01:13:32,280
synchronous whirl all right now block

01:13:30,719 --> 01:13:36,449
three except the one that I need to

01:13:32,280 --> 01:13:38,760
remove that I actually forgot see your

01:13:36,449 --> 01:13:42,749
implementation so it is a chip doing

01:13:38,760 --> 01:13:46,139
what it's supposed to do and it has

01:13:42,749 --> 01:13:49,109
rusts safety concurrency and speed is

01:13:46,139 --> 01:13:50,809
the best combo that I realized one more

01:13:49,109 --> 01:13:55,889
time again because it was neat

01:13:50,809 --> 01:14:00,749
implementation and I just wrote wire

01:13:55,889 --> 01:14:02,360
format and then just slammed things that

01:14:00,749 --> 01:14:06,510
I need to do

01:14:02,360 --> 01:14:09,560
yeah okay lockrey was not fancy at all

01:14:06,510 --> 01:14:09,560
sometimes with you

01:14:09,830 --> 01:14:23,850
tested but not on the cloud deployment

01:14:13,590 --> 01:14:27,810
yet I will do it and what is what needs

01:14:23,850 --> 01:14:32,670
to be done is garbage collection for the

01:14:27,810 --> 01:14:35,910
replicated look realized that I actually

01:14:32,670 --> 01:14:45,420
should add some kind of a small garbage

01:14:35,910 --> 01:14:49,650
collection for the log parts and and

01:14:45,420 --> 01:14:52,440
right right I made backup when it is

01:14:49,650 --> 01:14:55,140
needed for the state machine for the

01:14:52,440 --> 01:14:59,730
checkpointing and these were these are

01:14:55,140 --> 01:15:02,420
the things that I need to do I think

01:14:59,730 --> 01:15:03,600
when I have time I will do that and

01:15:02,420 --> 01:15:05,340
benchmarks

01:15:03,600 --> 01:15:07,680
this is synchronous one I mean I hate

01:15:05,340 --> 01:15:10,380
benchmarks every single time this is the

01:15:07,680 --> 01:15:14,280
thing that rust comes up there are

01:15:10,380 --> 01:15:17,400
benchmarks and you can see a bunch of

01:15:14,280 --> 01:15:22,140
other graphs about the benchmarks

01:15:17,400 --> 01:15:28,640
of this replication algorithm and my

01:15:22,140 --> 01:15:31,770
blog this is for single thread

01:15:28,640 --> 01:15:35,400
sequential reads this is the sequential

01:15:31,770 --> 01:15:42,360
read operations per second in single

01:15:35,400 --> 01:15:45,420
thread for three node chain and for both

01:15:42,360 --> 01:15:48,740
of the algorithms orange one is the

01:15:45,420 --> 01:15:50,750
ordinary one the other one is basically

01:15:48,740 --> 01:15:57,810
[Music]

01:15:50,750 --> 01:16:03,360
apportioned one so these are the read of

01:15:57,810 --> 01:16:06,770
it I think that I think code probably is

01:16:03,360 --> 01:16:07,980
going to make this like liftoff -

01:16:06,770 --> 01:16:11,210
excellent

01:16:07,980 --> 01:16:14,750
but I don't have time to do that and

01:16:11,210 --> 01:16:17,010
there is no I think all in the

01:16:14,750 --> 01:16:19,680
library and I'm not going to do that

01:16:17,010 --> 01:16:25,140
because threads are the best just

01:16:19,680 --> 01:16:27,000
realized again so to sum up artillery is

01:16:25,140 --> 01:16:29,580
a state of the art I think going to be

01:16:27,000 --> 01:16:31,590
distributed data library and it is

01:16:29,580 --> 01:16:34,500
becoming they're not a blockchain

01:16:31,590 --> 01:16:38,600
library or networking library less

01:16:34,500 --> 01:16:38,600
dependencies and then you can imagine

01:16:38,930 --> 01:16:43,380
exploits latest research techniques and

01:16:41,400 --> 01:16:45,240
other modern approaches designed for

01:16:43,380 --> 01:16:48,960
database systems and pure angels and

01:16:45,240 --> 01:16:50,910
stuff like this mostly the data systems

01:16:48,960 --> 01:16:53,100
to be honest you can say you cannot make

01:16:50,910 --> 01:16:56,340
pure distributed databases with the

01:16:53,100 --> 01:16:58,560
tooling out there in rust its

01:16:56,340 --> 01:17:02,910
planet-scale because this is the

01:16:58,560 --> 01:17:05,640
algorithm that Google uses also react

01:17:02,910 --> 01:17:08,820
users also Heroku uses and stuff like

01:17:05,640 --> 01:17:13,280
this so this is the one of the hard core

01:17:08,820 --> 01:17:16,350
Albertans out and protocols are saying

01:17:13,280 --> 01:17:19,200
blazing the fast if you're interested

01:17:16,350 --> 01:17:22,590
read artillery in pro based on

01:17:19,200 --> 01:17:24,960
documentation whenever I have time I'm

01:17:22,590 --> 01:17:26,510
trying to write that you can contribute

01:17:24,960 --> 01:17:32,280
to the development that there are

01:17:26,510 --> 01:17:35,700
identify issues but as soon as I have

01:17:32,280 --> 01:17:38,880
time I can open some issues organize my

01:17:35,700 --> 01:17:42,870
mind and open it you can also sponsor me

01:17:38,880 --> 01:17:48,960
and please sustain the source of page

01:17:42,870 --> 01:17:51,920
and thanks for listening me you go the

01:17:48,960 --> 01:17:51,920
twenty eight parts

01:17:53,840 --> 01:18:02,780
okay thank you so much mama this was an

01:17:57,590 --> 01:18:09,860
amazing talk we got a few questions over

01:18:02,780 --> 01:18:12,620
here in soon the first one is is your

01:18:09,860 --> 01:18:14,780
swim based membership available as a

01:18:12,620 --> 01:18:16,940
separate grade yes

01:18:14,780 --> 01:18:19,130
artillery - core I didn't upload the

01:18:16,940 --> 01:18:21,770
version I'm going to upload the version

01:18:19,130 --> 01:18:24,590
as soon as I have time just pull it up

01:18:21,770 --> 01:18:27,740
it pull to get to app oh it's in there

01:18:24,590 --> 01:18:29,600
it's separate everything is even service

01:18:27,740 --> 01:18:31,610
discovery you don't need to use for

01:18:29,600 --> 01:18:37,040
example the parts service discovery

01:18:31,610 --> 01:18:40,160
separate all these for cluster forming

01:18:37,040 --> 01:18:42,170
protocols are separate modules so they

01:18:40,160 --> 01:18:44,990
are not dependent on each other there's

01:18:42,170 --> 01:18:47,530
nothing being coming up as a dependency

01:18:44,990 --> 01:18:52,820
to your system

01:18:47,530 --> 01:18:57,950
there's cross being threads nothing more

01:18:52,820 --> 01:19:03,170
obviously couple of places chaos and

01:18:57,950 --> 01:19:05,960
Bastion okay yeah thanks we have two

01:19:03,170 --> 01:19:09,560
more questions and the first one is how

01:19:05,960 --> 01:19:12,140
our nodes in the cluster verified to be

01:19:09,560 --> 01:19:13,900
trustworthy or is this assumed to be

01:19:12,140 --> 01:19:17,570
given by a lower level implementation

01:19:13,900 --> 01:19:19,940
that handles joining the subnet I didn't

01:19:17,570 --> 01:19:21,980
do that I mean yeah it is one of the

01:19:19,940 --> 01:19:24,230
best questions yes I didn't do that it

01:19:21,980 --> 01:19:29,750
also in the paper that I mention here

01:19:24,230 --> 01:19:36,770
also the PI mention field it's also a

01:19:29,750 --> 01:19:39,470
problem here so for this also it is a

01:19:36,770 --> 01:19:45,320
problem because DHT and you know as the

01:19:39,470 --> 01:19:50,060
privacy related things it is not very

01:19:45,320 --> 01:19:52,870
good thing so a Mallory or for the

01:19:50,060 --> 01:19:55,910
security engineers out there some Eve

01:19:52,870 --> 01:19:58,310
like us broker can actually listen the

01:19:55,910 --> 01:20:00,890
network and join as a fake note and do

01:19:58,310 --> 01:20:05,200
those some bad shenanigans yes that is

01:20:00,890 --> 01:20:05,200
possible you can check with some kind of

01:20:05,670 --> 01:20:16,800
fake entries to the zeroconf packets

01:20:12,800 --> 01:20:21,570
signed in tourism that might work but

01:20:16,800 --> 01:20:22,940
yeah I didn't do that okay thanks last

01:20:21,570 --> 01:20:25,520
question

01:20:22,940 --> 01:20:29,790
wondering does your slip failure

01:20:25,520 --> 01:20:32,909
detectors uses UTP multicast or

01:20:29,790 --> 01:20:38,429
piggyback on membership information like

01:20:32,909 --> 01:20:48,330
mentioned on the paper should I repeat

01:20:38,429 --> 01:20:55,320
it no I just know I'm not using my UDP

01:20:48,330 --> 01:20:59,250
multicast I'm using the random increment

01:20:55,320 --> 01:21:02,100
like in the paper but actually it's a

01:20:59,250 --> 01:21:05,929
good idea whomever wrote this thank you

01:21:02,100 --> 01:21:05,929
I mean I should open any shoe pad

01:21:06,530 --> 01:21:13,170
okay and let's do the last question and

01:21:11,010 --> 01:21:16,830
then we have a little code snippet from

01:21:13,170 --> 01:21:19,170
Ryan which we do a little egg and learn

01:21:16,830 --> 01:21:22,980
two minutes max I think

01:21:19,170 --> 01:21:26,880
but first the last question how does it

01:21:22,980 --> 01:21:34,440
compare DNS service discovering using

01:21:26,880 --> 01:21:36,150
SRV and txt records a hundred percent

01:21:34,440 --> 01:21:40,139
sure that DNS service discovery is going

01:21:36,150 --> 01:21:41,850
to be something like and the production

01:21:40,139 --> 01:21:45,900
employment is much more reliable than

01:21:41,850 --> 01:21:48,330
anything else but data systems and most

01:21:45,900 --> 01:21:49,530
of the fans are if you know some

01:21:48,330 --> 01:21:52,710
companies

01:21:49,530 --> 01:21:54,900
or this orchestration schemes are

01:21:52,710 --> 01:22:00,060
behaving like most of the times stateful

01:21:54,900 --> 01:22:06,960
set or German set so I mean they are

01:22:00,060 --> 01:22:12,300
mostly a fine to denote so zeroconf can

01:22:06,960 --> 01:22:14,250
work in that environment but he is not

01:22:12,300 --> 01:22:18,530
too reliable as the normal DNS

01:22:14,250 --> 01:22:18,530
propagation as you can imagine

01:22:19,610 --> 01:22:31,620
okay thank you so much for your talk so

01:22:23,489 --> 01:22:38,160
so great talk Ryan do you want to start

01:22:31,620 --> 01:22:39,960
your little coach exercise sure yes let

01:22:38,160 --> 01:22:42,150
me share my screen will critique and

01:22:39,960 --> 01:22:46,199
copy the links so I'm sure we cover it

01:22:42,150 --> 01:22:56,420
now yes yes please I will send the link

01:22:46,199 --> 01:22:56,420
to what Ryan shows in riot and in okay

01:22:56,989 --> 01:23:02,610
share real quick just just for posterity

01:23:00,750 --> 01:23:04,500
sake here it's the very long link sorry

01:23:02,610 --> 01:23:06,300
for that but hopefully those that are in

01:23:04,500 --> 01:23:07,530
the chat and stuff can can just

01:23:06,300 --> 01:23:10,620
copy-paste it but if you're watching

01:23:07,530 --> 01:23:12,870
this later on then you'll have to well

01:23:10,620 --> 01:23:17,040
hopefully paste it in the description of

01:23:12,870 --> 01:23:22,620
the video wherever we posted okay let me

01:23:17,040 --> 01:23:35,699
stop sharing that and move on over to

01:23:22,620 --> 01:23:39,090
here to find all right can everybody see

01:23:35,699 --> 01:23:43,170
my screen hopefully everyone's he's a

01:23:39,090 --> 01:23:45,390
playground awesome so I've been playing

01:23:43,170 --> 01:23:48,540
around with a bunch of unsafe codes

01:23:45,390 --> 01:23:53,790
lately and I learned an interesting

01:23:48,540 --> 01:23:56,100
thing about dropping that I thought I

01:23:53,790 --> 01:23:57,800
would talk about briefly with everybody

01:23:56,100 --> 01:24:01,770
and this is a super contrived example

01:23:57,800 --> 01:24:04,230
and the first thing we should talk about

01:24:01,770 --> 01:24:07,320
is that if you don't need to use unsafe

01:24:04,230 --> 01:24:08,489
codes and don't use it so hopefully you

01:24:07,320 --> 01:24:10,590
should come away with this example

01:24:08,489 --> 01:24:13,620
learning a little bit more about drop

01:24:10,590 --> 01:24:15,120
but at the end of the day this

01:24:13,620 --> 01:24:16,800
particular example you would never

01:24:15,120 --> 01:24:19,710
actually do it this way in real life

01:24:16,800 --> 01:24:22,140
because there's no need to to do it this

01:24:19,710 --> 01:24:24,989
way but I couldn't come up with a better

01:24:22,140 --> 01:24:27,810
example that didn't require ten minutes

01:24:24,989 --> 01:24:30,440
of explanation and so what we're going

01:24:27,810 --> 01:24:34,790
to be doing today is looking

01:24:30,440 --> 01:24:39,350
to strux foo and bar here and foo and

01:24:34,790 --> 01:24:41,150
bar are both structurally equivalent to

01:24:39,350 --> 01:24:44,600
each other so foo is just composed of

01:24:41,150 --> 01:24:46,880
these two pointers are these two numbers

01:24:44,600 --> 01:24:49,820
here you ate didn't you wait and bar as

01:24:46,880 --> 01:24:53,540
the u16 and in memory at 2 you ate at au

01:24:49,820 --> 01:24:56,090
16 are laid out exactly the same and so

01:24:53,540 --> 01:24:58,490
with what we should be able to do is as

01:24:56,090 --> 01:25:00,530
effectively transmute between the two we

01:24:58,490 --> 01:25:02,840
should look at the bytes in memory of

01:25:00,530 --> 01:25:04,730
foo and treat it as if it were bar and

01:25:02,840 --> 01:25:06,580
it should just work because in memory

01:25:04,730 --> 01:25:09,680
they're effectively the exact same thing

01:25:06,580 --> 01:25:13,370
and the fact that one is called foo and

01:25:09,680 --> 01:25:17,630
bar is for all intents and purposes just

01:25:13,370 --> 01:25:21,890
completely a compile-time figment of our

01:25:17,630 --> 01:25:24,860
imagination and what we're going to be

01:25:21,890 --> 01:25:27,350
doing is we implemented drop for foo and

01:25:24,860 --> 01:25:30,740
for bar here and all they do for foo and

01:25:27,350 --> 01:25:32,510
bar is just print out dropping foo and

01:25:30,740 --> 01:25:35,210
dropping bar so when these when these

01:25:32,510 --> 01:25:36,950
things are are destroyed when they're

01:25:35,210 --> 01:25:39,620
dropped they're going to print out that

01:25:36,950 --> 01:25:42,410
they're being dropped and the first one

01:25:39,620 --> 01:25:45,200
that we're going to be looking at real

01:25:42,410 --> 01:25:47,810
quick is this normal function and we're

01:25:45,200 --> 01:25:49,610
just gonna look at we create a foo we

01:25:47,810 --> 01:25:52,700
create a bar and then we're going to see

01:25:49,610 --> 01:25:56,390
in what order they they get dropped so

01:25:52,700 --> 01:25:59,840
if we execute that real quick then you

01:25:56,390 --> 01:26:02,420
can see down here at the bottom we're

01:25:59,840 --> 01:26:04,640
calling normal and it drops bar and it

01:26:02,420 --> 01:26:06,170
drops foo and if we look at at normal

01:26:04,640 --> 01:26:09,230
there you can see they get revert they

01:26:06,170 --> 01:26:11,600
get dropped in reverse order so first

01:26:09,230 --> 01:26:13,730
lesson for today is that depending on

01:26:11,600 --> 01:26:15,890
the order and that things are

01:26:13,730 --> 01:26:18,050
instantiated and a function they will be

01:26:15,890 --> 01:26:20,330
dropped in that reverse order so we

01:26:18,050 --> 01:26:22,850
created two first and then we created

01:26:20,330 --> 01:26:24,680
bar and the bars drop first and foolish

01:26:22,850 --> 01:26:26,420
drop second so they get dropped in

01:26:24,680 --> 01:26:29,810
reverse order so that's awesome we've

01:26:26,420 --> 01:26:32,620
learned that today so now we're going to

01:26:29,810 --> 01:26:35,240
be looking at something else here and

01:26:32,620 --> 01:26:37,940
we're going to be looking at this

01:26:35,240 --> 01:26:40,360
forget function here and what would

01:26:37,940 --> 01:26:43,820
forget does is it creates a foo and then

01:26:40,360 --> 01:26:45,980
it transmutes foo

01:26:43,820 --> 01:26:48,530
Jabar and what if you're not familiar

01:26:45,980 --> 01:26:50,780
with stewed mem transmit copy basically

01:26:48,530 --> 01:26:52,699
what it does is you pass in a reference

01:26:50,780 --> 01:26:54,260
to something and it just says hey that

01:26:52,699 --> 01:26:56,090
thing you passed me I'm just gonna treat

01:26:54,260 --> 01:27:00,020
it as this other thing and so it's

01:26:56,090 --> 01:27:03,280
effectively and it basically men copies

01:27:00,020 --> 01:27:05,449
the bytes onto the stack and so

01:27:03,280 --> 01:27:08,060
effectively what it does is it takes all

01:27:05,449 --> 01:27:10,790
the bytes that in memory that compose

01:27:08,060 --> 01:27:12,500
that that foo and it just says those

01:27:10,790 --> 01:27:14,900
bytes I'm gonna copy them over and I'm

01:27:12,500 --> 01:27:18,409
gonna treat it as if it were bar instead

01:27:14,900 --> 01:27:21,619
and because foo is just two bytes and

01:27:18,409 --> 01:27:23,750
bar as au 16 they're the same they're

01:27:21,619 --> 01:27:28,010
the same thing so this this should work

01:27:23,750 --> 01:27:32,480
right but there might be a situation

01:27:28,010 --> 01:27:36,079
where we want to transmute foo into bar

01:27:32,480 --> 01:27:38,389
but we don't want to actually drop our

01:27:36,079 --> 01:27:40,510
we just wish that like foo would become

01:27:38,389 --> 01:27:42,380
a bar and we'll just forget about foo

01:27:40,510 --> 01:27:44,780
we'll just forget that it ever existed

01:27:42,380 --> 01:27:46,429
we don't want it to drop and some

01:27:44,780 --> 01:27:48,619
situations where you might run into this

01:27:46,429 --> 01:27:50,239
is let's say you're implementing your

01:27:48,619 --> 01:27:52,849
own smart pointer or something and you

01:27:50,239 --> 01:27:54,170
want that smart pointer to move from

01:27:52,849 --> 01:27:56,150
being a smart pointer to one thing to

01:27:54,170 --> 01:27:58,550
another thing so you need to transmit it

01:27:56,150 --> 01:27:59,960
but if you let's say you're doing

01:27:58,550 --> 01:28:01,400
reference counting or something like

01:27:59,960 --> 01:28:04,340
that something that runs every time this

01:28:01,400 --> 01:28:06,440
thing drops you're effectively saying

01:28:04,340 --> 01:28:08,659
I'm not I'm not moving this thing as

01:28:06,440 --> 01:28:10,520
something destroyed I'm effectively stop

01:28:08,659 --> 01:28:12,770
treating it as a foo and I'm treating it

01:28:10,520 --> 01:28:15,469
as a bar instead and so running the

01:28:12,770 --> 01:28:17,599
destructor would be the wrong thing in

01:28:15,469 --> 01:28:20,270
this particular example it's not the

01:28:17,599 --> 01:28:22,310
wrong thing because all we're doing is

01:28:20,270 --> 01:28:24,380
printing out something but you can

01:28:22,310 --> 01:28:26,719
imagine having complex logic in your job

01:28:24,380 --> 01:28:28,460
function that you really only want to

01:28:26,719 --> 01:28:33,800
drop that you only want to call the drop

01:28:28,460 --> 01:28:36,110
thing once per logical value here and so

01:28:33,800 --> 01:28:38,030
if we go what we're going to do here is

01:28:36,110 --> 01:28:40,190
call foo then we're gonna call bar and

01:28:38,030 --> 01:28:43,400
after we call bar we call stood men

01:28:40,190 --> 01:28:46,340
forget and that says hey you know drop

01:28:43,400 --> 01:28:48,139
thing don't call the drop implementation

01:28:46,340 --> 01:28:51,260
on foo just forget about it forget that

01:28:48,139 --> 01:28:53,389
it ever existed we we change foo into a

01:28:51,260 --> 01:28:55,820
bar and we just forget that foo ever

01:28:53,389 --> 01:28:57,260
existed so when we run this it's not

01:28:55,820 --> 01:28:59,960
going to

01:28:57,260 --> 01:29:02,090
it's not actually going to print out the

01:28:59,960 --> 01:29:03,740
it's not going to drop through and so

01:29:02,090 --> 01:29:05,960
when we you could see here calling

01:29:03,740 --> 01:29:08,570
forget we only drop bar foo is just

01:29:05,960 --> 01:29:12,920
forgot about it never gets dropped right

01:29:08,570 --> 01:29:14,840
and that's really great you might see

01:29:12,920 --> 01:29:17,480
this commented out thing here where we

01:29:14,840 --> 01:29:19,400
panic just keep that in mind there's

01:29:17,480 --> 01:29:22,760
another way to implement this so instead

01:29:19,400 --> 01:29:24,830
of using Steadman forget you can do the

01:29:22,760 --> 01:29:27,440
same thing using this student and

01:29:24,830 --> 01:29:29,600
manually drop and what that does is it's

01:29:27,440 --> 01:29:32,720
just a simple wrapper around things and

01:29:29,600 --> 01:29:34,400
it says don't automatically drop this

01:29:32,720 --> 01:29:36,140
thing when it goes out of scope like I

01:29:34,400 --> 01:29:37,840
will I will tell you exactly when to

01:29:36,140 --> 01:29:41,060
drop it or maybe I won't tell you at all

01:29:37,840 --> 01:29:43,130
until we wrap foo here and a manually

01:29:41,060 --> 01:29:45,140
drop and we never drop it and so

01:29:43,130 --> 01:29:47,630
effectively these two things are

01:29:45,140 --> 01:29:50,180
equivalent to each other and so if I go

01:29:47,630 --> 01:29:53,570
up here and I run manual drop instead of

01:29:50,180 --> 01:29:56,570
forget here we should see the same thing

01:29:53,570 --> 01:29:58,520
then we're only calling drop on on bar

01:29:56,570 --> 01:30:01,280
so we've done the same thing we've

01:29:58,520 --> 01:30:03,560
forgotten about too and we've and we've

01:30:01,280 --> 01:30:07,760
changed it into a bar and we only drop

01:30:03,560 --> 01:30:08,930
bar so okay why do I care like what's

01:30:07,760 --> 01:30:11,660
the difference between these two they

01:30:08,930 --> 01:30:13,520
can be used interchangeably right if I

01:30:11,660 --> 01:30:16,220
just want to not run the destructor for

01:30:13,520 --> 01:30:19,430
one thing I can use steadman forget Oh

01:30:16,220 --> 01:30:21,320
or I could use manually drop well there

01:30:19,430 --> 01:30:22,850
there's subtly different in different

01:30:21,320 --> 01:30:25,220
ways and it turns out that most of the

01:30:22,850 --> 01:30:27,770
time you probably want to prefer using

01:30:25,220 --> 01:30:31,520
manually drop and the reason for that is

01:30:27,770 --> 01:30:37,430
panics so we're going to go back up here

01:30:31,520 --> 01:30:40,550
and run forget again and this time we're

01:30:37,430 --> 01:30:43,280
going to panic right after we transmit

01:30:40,550 --> 01:30:45,590
Tabar and one thing that you need to

01:30:43,280 --> 01:30:47,390
know about what panics do is when

01:30:45,590 --> 01:30:49,310
something panics it unwinds the stack

01:30:47,390 --> 01:30:51,530
and what that means is it calls the

01:30:49,310 --> 01:30:54,860
destructor for all the local variables

01:30:51,530 --> 01:30:56,900
in your stack frame and so when we panic

01:30:54,860 --> 01:30:59,990
here we never reach this forget thing

01:30:56,900 --> 01:31:03,490
we're gonna run the destructor for foo

01:30:59,990 --> 01:31:07,130
and bar and so let's let's run this

01:31:03,490 --> 01:31:10,100
calling forget again and you can see bar

01:31:07,130 --> 01:31:11,100
and foo both get get destroyed so you

01:31:10,100 --> 01:31:13,170
know if there was some kind

01:31:11,100 --> 01:31:16,110
likes logic in there that required that

01:31:13,170 --> 01:31:19,470
we only want to run the destructor for

01:31:16,110 --> 01:31:21,720
foo we're out of luck here unfortunately

01:31:19,470 --> 01:31:23,790
we're going to call the drop

01:31:21,720 --> 01:31:25,890
implementation for both through Anbar

01:31:23,790 --> 01:31:27,450
because we you know obviously we're not

01:31:25,890 --> 01:31:29,160
going to panic like this explicitly in

01:31:27,450 --> 01:31:30,990
our code but there you know maybe you

01:31:29,160 --> 01:31:34,260
have something else that that causes a

01:31:30,990 --> 01:31:36,360
panic at some point and so it's variant

01:31:34,260 --> 01:31:37,830
that what we're doing here is we're

01:31:36,360 --> 01:31:39,720
we're not reaching this student and

01:31:37,830 --> 01:31:41,100
forget and we're going to call the

01:31:39,720 --> 01:31:43,790
destructor twice and this might have

01:31:41,100 --> 01:31:47,460
safety implementation implement

01:31:43,790 --> 01:31:50,100
implications that might cause some

01:31:47,460 --> 01:31:53,400
trouble later on so that's that's not

01:31:50,100 --> 01:31:56,670
good but if we come back up here and run

01:31:53,400 --> 01:31:59,270
this manual drop instead and this time

01:31:56,670 --> 01:32:01,740
we're using the manual manually drop

01:31:59,270 --> 01:32:04,320
implementation here instead and we're

01:32:01,740 --> 01:32:07,410
gonna just like before panic right after

01:32:04,320 --> 01:32:13,950
calling this transmute but the good news

01:32:07,410 --> 01:32:16,560
is that when we do that like this we're

01:32:13,950 --> 01:32:20,400
only going to drop bar and why is that

01:32:16,560 --> 01:32:23,010
because we basically effectively said up

01:32:20,400 --> 01:32:25,170
here that we just want to forget about

01:32:23,010 --> 01:32:27,150
food so we've done it even before we've

01:32:25,170 --> 01:32:29,910
gone ahead to do the transmute step and

01:32:27,150 --> 01:32:32,850
so it doesn't matter now

01:32:29,910 --> 01:32:36,750
what's the downside of this of this way

01:32:32,850 --> 01:32:39,870
well we might leak memory so we've only

01:32:36,750 --> 01:32:42,830
called we've only called foo the

01:32:39,870 --> 01:32:46,230
destructor for fur bar here we haven't

01:32:42,830 --> 01:32:47,630
called the destructor for foo maybe

01:32:46,230 --> 01:32:51,330
that's what we want in this situation

01:32:47,630 --> 01:32:55,500
but if instead we panicked right here

01:32:51,330 --> 01:32:58,110
instead then we would then we would

01:32:55,500 --> 01:33:00,840
potentially leak memory for foo because

01:32:58,110 --> 01:33:03,060
we would panic right here foo is wrapped

01:33:00,840 --> 01:33:05,130
in this manually drop we unwind the

01:33:03,060 --> 01:33:06,930
stack but the the destructor of the the

01:33:05,130 --> 01:33:08,460
drop implementation food won't bake

01:33:06,930 --> 01:33:10,080
won't get called an if that's

01:33:08,460 --> 01:33:11,700
responsible for cleaning up memory or

01:33:10,080 --> 01:33:15,120
something like that we're out of luck

01:33:11,700 --> 01:33:17,310
and who will never be cleaned up and for

01:33:15,120 --> 01:33:19,170
some things that's that's not what we

01:33:17,310 --> 01:33:21,630
want but at the end of the day leaking

01:33:19,170 --> 01:33:24,540
memory or you know consuming more memory

01:33:21,630 --> 01:33:27,750
than we need to

01:33:24,540 --> 01:33:31,770
is unfortunate but it's safe whereas

01:33:27,750 --> 01:33:35,820
running destructors twice potentially is

01:33:31,770 --> 01:33:39,030
unsafe and so that's why you most likely

01:33:35,820 --> 01:33:40,680
want to prefer manually drop here and

01:33:39,030 --> 01:33:43,470
I'll just end with the fact that if none

01:33:40,680 --> 01:33:46,140
of that made sense to you or if you if

01:33:43,470 --> 01:33:48,690
this seems horribly confusing that's

01:33:46,140 --> 01:33:51,990
fine this is unsafe code and unsafe code

01:33:48,690 --> 01:33:54,690
is supposed to be hard so just don't use

01:33:51,990 --> 01:33:54,960
an unsafe code so that's the lesson for

01:33:54,690 --> 01:33:58,410
today

01:33:54,960 --> 01:34:04,700
don't use unsafe code and thank you very

01:33:58,410 --> 01:34:05,840
much so

01:34:04,700 --> 01:34:08,790
[Music]

01:34:05,840 --> 01:34:10,160
by the way I'm happy to answer questions

01:34:08,790 --> 01:34:16,740
on that I don't think we'll take

01:34:10,160 --> 01:34:19,670
questions on the chats but it was really

01:34:16,740 --> 01:34:22,110
great having the the three speakers

01:34:19,670 --> 01:34:25,890
today so thank you to all of our

01:34:22,110 --> 01:34:29,280
speakers thanks again to John davic for

01:34:25,890 --> 01:34:31,470
helping out with with everything thank

01:34:29,280 --> 01:34:33,630
you to my co organizer bastion for all

01:34:31,470 --> 01:34:36,810
of his hard work as well

01:34:33,630 --> 01:34:38,130
and we really appreciate everybody

01:34:36,810 --> 01:34:41,220
showing up today

01:34:38,130 --> 01:34:44,400
any last words busting yeah I'm happy

01:34:41,220 --> 01:34:47,310
how all this goes I'm really looking

01:34:44,400 --> 01:34:50,340
forward to now each month for the next

01:34:47,310 --> 01:34:52,800
while to host it here and it's also fun

01:34:50,340 --> 01:34:55,860
to have more people not just from Berlin

01:34:52,800 --> 01:34:58,470
but from all all over the place so I

01:34:55,860 --> 01:35:00,720
thank you all for Amma joining and if

01:34:58,470 --> 01:35:03,450
you have any suggestions how we can make

01:35:00,720 --> 01:35:10,820
this even more fun and interesting

01:35:03,450 --> 01:35:12,880
please feel free to reach out thank you

01:35:10,820 --> 01:35:12,880

YouTube URL: https://www.youtube.com/watch?v=yGuxtodWYDs


