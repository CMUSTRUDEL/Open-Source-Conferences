Title: Rust and WASM in less then 20 minutes - Antonio De La Cruz
Publication date: 2020-02-05
Playlist: Rust and Tell Berlin
Description: 
	From the Berlin Rust's November "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)
"Rust and Tellâ€œ is a monthly event to share ideas, and learn about new things in and about Rust. Meet fellow Rustaceans, share your learnings, get motivated and inspired. Weâ€™re open to any and all kinds of talks about any subjects that you think will be interesting to an audience interested in Rust. Whether you're an experienced Rust developer or just getting started, we strongly encourage you to share your learnings.

Antonio De La Cruz: https://twitter.com/AntonioVdlC

Hosted at Prisma: https://www.prisma.io/

ðŸŽ¥ Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:03,710 --> 00:00:08,340
all right so I'm hello everyone tonight

00:00:06,540 --> 00:00:11,370
I'll be talking about implementing life

00:00:08,340 --> 00:00:13,200
by leveraging roasting webassembly it

00:00:11,370 --> 00:00:15,450
probably won't be as cool as last

00:00:13,200 --> 00:00:16,890
month's talk about the co2 measuring

00:00:15,450 --> 00:00:20,580
device by thanks that was pretty cool

00:00:16,890 --> 00:00:22,439
but hopefully we cool enough so let's do

00:00:20,580 --> 00:00:24,869
Braden so really quickly

00:00:22,439 --> 00:00:27,869
my name is Antonio do happen to have a

00:00:24,869 --> 00:00:31,769
very long last name in the Spanish

00:00:27,869 --> 00:00:33,540
tradition of first names I moved to Bari

00:00:31,769 --> 00:00:35,309
in a couple months ago I'm not working

00:00:33,540 --> 00:00:36,899
as a first second engineer at least some

00:00:35,309 --> 00:00:38,910
we actually just like a couple of blocks

00:00:36,899 --> 00:00:41,730
from here so it's pretty short walk walk

00:00:38,910 --> 00:00:43,110
to come here and we didn't talk with up

00:00:41,730 --> 00:00:46,230
a tip some but we're not doing any rust

00:00:43,110 --> 00:00:48,390
yet so I'm here mostly as a hobbyist

00:00:46,230 --> 00:00:50,399
I've started learning rust this year

00:00:48,390 --> 00:00:53,430
mostly interested in webassembly as a

00:00:50,399 --> 00:00:55,320
web developer myself and to give you

00:00:53,430 --> 00:00:55,680
kind of a idea of how good am I trust

00:00:55,320 --> 00:00:59,070
right now

00:00:55,680 --> 00:01:00,780
this is my third meetup and in the two

00:00:59,070 --> 00:01:05,220
previous quiz I was able to score zero

00:01:00,780 --> 00:01:08,030
points in both of them so I hope I can

00:01:05,220 --> 00:01:10,439
make it three out of three this time

00:01:08,030 --> 00:01:11,520
well yeah so just like I may actually be

00:01:10,439 --> 00:01:17,100
the one has new questions as you know go

00:01:11,520 --> 00:01:18,509
talk all right so basically the what I'm

00:01:17,100 --> 00:01:22,049
going to be talking about is the

00:01:18,509 --> 00:01:23,640
official rust wisdom tutorial I'm not

00:01:22,049 --> 00:01:26,450
gonna be going too much into details I

00:01:23,640 --> 00:01:29,700
just want to give kind of an overview of

00:01:26,450 --> 00:01:31,650
the state of the art of rusting wasn't

00:01:29,700 --> 00:01:33,000
currently we're just kind of looking at

00:01:31,650 --> 00:01:34,829
the tools and seen like how like things

00:01:33,000 --> 00:01:36,900
fit together if you interested like

00:01:34,829 --> 00:01:38,310
definitely do look it up it's pretty

00:01:36,900 --> 00:01:39,570
nice

00:01:38,310 --> 00:01:41,490
and for those who of you who are not

00:01:39,570 --> 00:01:44,340
from you with the game of life redact

00:01:41,490 --> 00:01:46,110
the ldr is that it's a zero player

00:01:44,340 --> 00:01:49,380
summation game where you have a universe

00:01:46,110 --> 00:01:52,770
that evolves with time and we're like

00:01:49,380 --> 00:01:54,149
cells a better alive and then they the

00:01:52,770 --> 00:01:55,590
inverse like evolves by like calculating

00:01:54,149 --> 00:01:56,520
the next set of the stairs based on the

00:01:55,590 --> 00:02:00,570
previous set of the cells

00:01:56,520 --> 00:02:03,270
so pretty simple set of rules here so it

00:02:00,570 --> 00:02:06,990
looks like this I don't know why sex so

00:02:03,270 --> 00:02:09,660
laggy on this gif but hopefully won't be

00:02:06,990 --> 00:02:12,270
that lucky on the actual game of life

00:02:09,660 --> 00:02:13,920
and so the the roads are pretty

00:02:12,270 --> 00:02:17,790
basically like only like four rows

00:02:13,920 --> 00:02:22,920
to the game so here a dead cell is white

00:02:17,790 --> 00:02:24,780
a live set is gray so if a cell is alive

00:02:22,920 --> 00:02:28,590
and has less than two neighbors that are

00:02:24,780 --> 00:02:31,140
life that dies in the next generation if

00:02:28,590 --> 00:02:35,400
it has two or three that are alive that

00:02:31,140 --> 00:02:39,360
sets chips stays alive if there's more

00:02:35,400 --> 00:02:40,410
than three cells that cell dies and if

00:02:39,360 --> 00:02:42,390
that cell is dead and there's like

00:02:40,410 --> 00:02:46,050
exactly three a neighbors are alive that

00:02:42,390 --> 00:02:51,060
becomes alive in every other case the

00:02:46,050 --> 00:02:52,739
cell keeps the same state okay so what

00:02:51,060 --> 00:02:56,459
is webassembly why should we care about

00:02:52,739 --> 00:02:58,290
web sembly in the first place so here's

00:02:56,459 --> 00:03:00,510
the Wikipedia definition of webassembly

00:02:58,290 --> 00:03:03,150
so it's a binary instruction format for

00:03:00,510 --> 00:03:05,130
psych based VM it's quite interesting to

00:03:03,150 --> 00:03:08,550
see that there's nothing really web

00:03:05,130 --> 00:03:10,170
specific about web assembly for now like

00:03:08,550 --> 00:03:12,500
it's only shipped in major web browsers

00:03:10,170 --> 00:03:14,580
but in the future like we can think of

00:03:12,500 --> 00:03:18,540
having that be I mean other places as

00:03:14,580 --> 00:03:20,430
well so it's designed to be like a

00:03:18,540 --> 00:03:23,489
target for high-level languages like C

00:03:20,430 --> 00:03:25,470
C++ and rust as a JavaScript engineer

00:03:23,489 --> 00:03:27,450
myself like it's kind of fun when I see

00:03:25,470 --> 00:03:32,580
the word high level and C C++ in the

00:03:27,450 --> 00:03:33,750
same sentence but sure and weighting

00:03:32,580 --> 00:03:36,209
principles was that it was first

00:03:33,750 --> 00:03:38,790
announced like four years ago but now

00:03:36,209 --> 00:03:41,280
all major browsers support it so unless

00:03:38,790 --> 00:03:44,370
you still work with ie in some way or

00:03:41,280 --> 00:03:45,600
another you can ship well assembly to

00:03:44,370 --> 00:03:47,489
production and there's actually a few

00:03:45,600 --> 00:03:51,900
companies who like already next ship

00:03:47,489 --> 00:03:54,840
enough of assembly to production and so

00:03:51,900 --> 00:03:57,870
why rust so I took this screen from the

00:03:54,840 --> 00:04:00,660
official process of assembly website but

00:03:57,870 --> 00:04:02,970
as a web developer like I've said like

00:04:00,660 --> 00:04:04,500
the trim three main reasons why Rustom

00:04:02,970 --> 00:04:08,700
webassembly makes sense to me is that

00:04:04,500 --> 00:04:10,290
first of all it's memory safe language I

00:04:08,700 --> 00:04:12,720
don't trust my steps right every safe

00:04:10,290 --> 00:04:16,049
language in like C or C++

00:04:12,720 --> 00:04:17,489
second of all the zero subtraction is

00:04:16,049 --> 00:04:20,549
pretty cool like you have really nice

00:04:17,489 --> 00:04:22,349
ergonomics to the language and then I

00:04:20,549 --> 00:04:25,560
think like third of all is the community

00:04:22,349 --> 00:04:27,060
so it's basically all of you here it's a

00:04:25,560 --> 00:04:28,680
very friendly welcoming community

00:04:27,060 --> 00:04:31,020
that we have in rust and it's quite

00:04:28,680 --> 00:04:33,360
impressive to see how Russ is able to

00:04:31,020 --> 00:04:34,710
fit the racially diverse crowd like you

00:04:33,360 --> 00:04:35,910
have people like coming from like why I

00:04:34,710 --> 00:04:38,190
mean webassembly you have people doing

00:04:35,910 --> 00:04:41,010
like embedded programming people doing

00:04:38,190 --> 00:04:44,910
existing programming you have like

00:04:41,010 --> 00:04:49,290
blockchain stuff as well some reason so

00:04:44,910 --> 00:04:55,310
that's that's pretty cool okay so enough

00:04:49,290 --> 00:04:55,310
talking it's kind of dive into some code

00:04:56,270 --> 00:05:02,880
this is when like everything breaks

00:04:58,230 --> 00:05:09,980
usually so oh yeah so welcome to obvious

00:05:02,880 --> 00:05:13,470
code so basically here we have basic

00:05:09,980 --> 00:05:15,360
setup for resume assembly so what I'm

00:05:13,470 --> 00:05:17,810
mostly using here is going to be a wesen

00:05:15,360 --> 00:05:19,919
pack which is a wrapper around web pack

00:05:17,810 --> 00:05:21,240
which allowed to do a bunch of stuff but

00:05:19,919 --> 00:05:23,760
what we're going to be using it for is

00:05:21,240 --> 00:05:26,280
basically just to build brass into of

00:05:23,760 --> 00:05:27,630
assembly I think we have like the

00:05:26,280 --> 00:05:30,360
observer here running which will just

00:05:27,630 --> 00:05:33,720
like serve whichever we like fitting

00:05:30,360 --> 00:05:37,500
into a to to a browser okay so if you

00:05:33,720 --> 00:05:38,970
basically just take the the sample code

00:05:37,500 --> 00:05:40,680
from the tutorial like this is what you

00:05:38,970 --> 00:05:44,880
get pretty much in Russ just like a

00:05:40,680 --> 00:05:47,310
simple public greet function that's

00:05:44,880 --> 00:05:50,880
gonna be like surface into a web

00:05:47,310 --> 00:05:53,610
assembly webassembly wasn't back then

00:05:50,880 --> 00:05:55,650
that compels it and that creates kind of

00:05:53,610 --> 00:05:58,680
this wrapper in JavaScript that allows

00:05:55,650 --> 00:06:00,660
us to like imported into our JavaScript

00:05:58,680 --> 00:06:04,890
code and then it does also gave us a

00:06:00,660 --> 00:06:06,660
nice web assembly file so it's a binary

00:06:04,890 --> 00:06:10,140
file like this is the text format of

00:06:06,660 --> 00:06:13,250
webassembly it uses s expressions so

00:06:10,140 --> 00:06:13,250
that's pretty cool looks like Lisp

00:06:13,490 --> 00:06:19,800
but we're not going to be like looking

00:06:15,330 --> 00:06:21,990
too much into this and so what we're

00:06:19,800 --> 00:06:24,510
gonna do here in our index is is that

00:06:21,990 --> 00:06:26,580
we're going to import wisdom from was in

00:06:24,510 --> 00:06:28,500
game of life so this is just like doing

00:06:26,580 --> 00:06:30,060
like any input into a strip nowadays and

00:06:28,500 --> 00:06:32,970
then we just gonna call like the grid

00:06:30,060 --> 00:06:38,180
function with a game of life which would

00:06:32,970 --> 00:06:38,180
then alert hello game of life hopefully

00:06:38,319 --> 00:06:45,430
here yay hello game of life thank you

00:06:43,899 --> 00:06:50,460
that's all that's all for tonight

00:06:45,430 --> 00:06:52,330
goodbye oh yeah cool so and it's

00:06:50,460 --> 00:06:55,089
actually like start like looking at

00:06:52,330 --> 00:06:56,860
implementation so I'm gonna do a pretty

00:06:55,089 --> 00:06:58,899
nice mix of let coding and time

00:06:56,860 --> 00:07:00,460
traveling it's called get tags so I'm

00:06:58,899 --> 00:07:05,069
gonna be like checking up tags along the

00:07:00,460 --> 00:07:10,990
way so let's start with this one

00:07:05,069 --> 00:07:12,879
what we're gonna this so basically what

00:07:10,990 --> 00:07:15,399
I what I've done here is that I just

00:07:12,879 --> 00:07:17,139
implemented the game of life using rust

00:07:15,399 --> 00:07:20,619
so I don't want to like go too much into

00:07:17,139 --> 00:07:23,349
details into this it's just like pretty

00:07:20,619 --> 00:07:24,669
straight for us so rust you have like an

00:07:23,349 --> 00:07:26,949
enum for the cell that can be the dead

00:07:24,669 --> 00:07:29,139
or alive then you have a struct for the

00:07:26,949 --> 00:07:32,499
universe wizard with the hive and then a

00:07:29,139 --> 00:07:34,059
vector of cells then there's a few

00:07:32,499 --> 00:07:37,300
functions the pokey matters on the

00:07:34,059 --> 00:07:39,580
universe to count the number of life

00:07:37,300 --> 00:07:41,409
neighbors and to get indexed so this is

00:07:39,580 --> 00:07:43,360
useful because we are storing the

00:07:41,409 --> 00:07:45,999
universe in linear memory so it's just

00:07:43,360 --> 00:07:47,379
like oh I want the mission array and we

00:07:45,999 --> 00:07:48,789
have like a two dimension universe so

00:07:47,379 --> 00:07:51,580
basically what we're doing is that we

00:07:48,789 --> 00:07:54,610
storing everything together and they get

00:07:51,580 --> 00:07:56,439
index will just like flatten that up for

00:07:54,610 --> 00:07:58,719
us so we pass a row and a column and any

00:07:56,439 --> 00:08:01,949
guesses like row of times with plus

00:07:58,719 --> 00:08:04,209
column to get the actual index in memory

00:08:01,949 --> 00:08:07,330
and then we like on a surface a few

00:08:04,209 --> 00:08:09,369
methods to add assembly so a tick method

00:08:07,330 --> 00:08:11,949
to generate the next generation of the

00:08:09,369 --> 00:08:13,959
universe which we can see here with like

00:08:11,949 --> 00:08:18,309
other rules that I explained previously

00:08:13,959 --> 00:08:20,439
here a new function to create a new

00:08:18,309 --> 00:08:22,330
universe and in this case we can have a

00:08:20,439 --> 00:08:26,769
render function which will generate a

00:08:22,330 --> 00:08:27,939
string out of that universe and we're

00:08:26,769 --> 00:08:30,099
going to do in the JavaScript side we're

00:08:27,939 --> 00:08:33,699
gonna have like a loop that would like

00:08:30,099 --> 00:08:35,500
run on every like animation frame we're

00:08:33,699 --> 00:08:37,209
gonna call the tick function on universe

00:08:35,500 --> 00:08:38,349
and then we're gonna like plug in all of

00:08:37,209 --> 00:08:41,949
the string that comes out of the

00:08:38,349 --> 00:08:43,419
University into a pre HTML tag sounds

00:08:41,949 --> 00:08:48,980
pretty efficient it is pretty efficient

00:08:43,419 --> 00:08:53,520
but this uh block anyway yay

00:08:48,980 --> 00:08:54,510
so now we have cells here cool so yeah

00:08:53,520 --> 00:08:56,400
you might be thinking like this pretty

00:08:54,510 --> 00:08:57,270
like better ways to communicate between

00:08:56,400 --> 00:08:59,279
webassembly

00:08:57,270 --> 00:09:01,080
and JavaScript then like just passing

00:08:59,279 --> 00:09:04,529
strings around and you're probably right

00:09:01,080 --> 00:09:06,150
here the good thing is that JavaScript

00:09:04,529 --> 00:09:08,610
has access to the same exact memory as

00:09:06,150 --> 00:09:11,460
webassembly so we can from the directive

00:09:08,610 --> 00:09:14,820
read all of those cells directly instead

00:09:11,460 --> 00:09:18,930
of relying on the universe passing up a

00:09:14,820 --> 00:09:23,640
string or not so let's again do the

00:09:18,930 --> 00:09:26,100
magic of get tags to implement that so

00:09:23,640 --> 00:09:29,790
here on the on the universe we haven't

00:09:26,100 --> 00:09:32,220
changed much the main change that we

00:09:29,790 --> 00:09:34,020
have are those like three setters getter

00:09:32,220 --> 00:09:36,890
sorry so we can get the width the height

00:09:34,020 --> 00:09:40,140
and then a pointer to the cells vector

00:09:36,890 --> 00:09:41,520
from rust and then on the JavaScript we

00:09:40,140 --> 00:09:43,350
also like change a bit implementation

00:09:41,520 --> 00:09:47,610
here we're now using a canvas instead of

00:09:43,350 --> 00:09:51,390
a pre HTML tag so I mean this is just

00:09:47,610 --> 00:09:53,970
like very canvas kind of API thing so

00:09:51,390 --> 00:09:57,270
this just chose to create and then this

00:09:53,970 --> 00:09:58,890
would just draw the cells then the

00:09:57,270 --> 00:10:00,029
important thing here is that are we

00:09:58,890 --> 00:10:03,450
getting the sales pointer from the

00:10:00,029 --> 00:10:06,990
universe and then we like creating array

00:10:03,450 --> 00:10:09,110
buffer here that would then point to

00:10:06,990 --> 00:10:12,510
that times a responder and then read

00:10:09,110 --> 00:10:16,050
every single cell here for the whole

00:10:12,510 --> 00:10:18,330
universe then just will loop through it

00:10:16,050 --> 00:10:22,740
and then you just like show all the

00:10:18,330 --> 00:10:25,529
cells here so if we look at the result

00:10:22,740 --> 00:10:30,959
now okay you two probably compiled

00:10:25,529 --> 00:10:33,060
webassembly first up okay so that's

00:10:30,959 --> 00:10:37,040
that's what we get now our universe 64

00:10:33,060 --> 00:10:39,720
by 64 with like cells moving around

00:10:37,040 --> 00:10:45,720
dying and living a few letters here and

00:10:39,720 --> 00:10:49,350
there yeah so as you can notice as well

00:10:45,720 --> 00:10:51,510
like the universe is infinite so that

00:10:49,350 --> 00:10:54,350
means that like whenever it goes to the

00:10:51,510 --> 00:10:56,250
body like it wraps around the universe

00:10:54,350 --> 00:10:59,280
okay cool

00:10:56,250 --> 00:11:01,050
so I guess so far so good the most

00:10:59,280 --> 00:11:02,490
important interesting part here oh I

00:11:01,050 --> 00:11:05,220
guess I can quickly show some

00:11:02,490 --> 00:11:07,680
thing else we can also like add

00:11:05,220 --> 00:11:09,690
interactivity meaning that we can not

00:11:07,680 --> 00:11:13,320
only read from that memory but also a

00:11:09,690 --> 00:11:15,420
kind of back talk back to the webOS m12

00:11:13,320 --> 00:11:18,029
assembly so here whatever it is a pause

00:11:15,420 --> 00:11:21,060
button and you can now actually draw on

00:11:18,029 --> 00:11:22,160
the canvas as well so I can make a nice

00:11:21,060 --> 00:11:29,190
glass over here

00:11:22,160 --> 00:11:31,320
yay okay cool so I guess you can't do a

00:11:29,190 --> 00:11:32,640
lot of things involve assembly does it

00:11:31,320 --> 00:11:35,070
make sense to rewrite everything with

00:11:32,640 --> 00:11:36,720
assembly probably not and if you

00:11:35,070 --> 00:11:38,700
actually are looking into whether

00:11:36,720 --> 00:11:39,930
someplace probably because of some like

00:11:38,700 --> 00:11:42,180
heavily computational stuff that you

00:11:39,930 --> 00:11:44,190
want to be more performant with so let's

00:11:42,180 --> 00:11:45,750
have a look now at how we can measure

00:11:44,190 --> 00:11:47,130
performance and see if this is the most

00:11:45,750 --> 00:11:49,770
efficient way of doing it and how we can

00:11:47,130 --> 00:11:52,589
improve on its implementation because

00:11:49,770 --> 00:11:58,080
it's not it's also efficient as as it is

00:11:52,589 --> 00:11:59,790
now okay so what we're going to do very

00:11:58,080 --> 00:12:01,620
quick is that we're just gonna add like

00:11:59,790 --> 00:12:04,230
an FPS counter so again this is just

00:12:01,620 --> 00:12:05,399
like JavaScript we measured the number

00:12:04,230 --> 00:12:07,770
of frame per seconds and we just like

00:12:05,399 --> 00:12:10,529
display it on the counter so if you come

00:12:07,770 --> 00:12:13,140
here we can see that okay and I quit I

00:12:10,529 --> 00:12:16,529
got around like 60 frames per second

00:12:13,140 --> 00:12:20,279
which is quite nice okay let's see what

00:12:16,529 --> 00:12:24,060
happens if for example we double the

00:12:20,279 --> 00:12:29,180
size of the universe if I can find the

00:12:24,060 --> 00:12:35,490
code here can I stop all the size

00:12:29,180 --> 00:12:37,980
rebuild and now okay it's not still not

00:12:35,490 --> 00:12:40,470
too bad but we like at 40 40 frames per

00:12:37,980 --> 00:12:43,170
second so it's quite quite a deep here

00:12:40,470 --> 00:12:47,250
so try let's see like what happened here

00:12:43,170 --> 00:12:48,899
I guess the the intuition is probably

00:12:47,250 --> 00:12:50,100
that like somewhere like in the right

00:12:48,899 --> 00:12:52,260
implementation where they're doing some

00:12:50,100 --> 00:12:54,810
things are not so efficient but it's

00:12:52,260 --> 00:13:03,000
always good to look at actual numbers to

00:12:54,810 --> 00:13:04,709
drive performance so let's check out the

00:13:03,000 --> 00:13:08,070
next part so to do that what we gonna do

00:13:04,709 --> 00:13:10,800
is we're gonna add back a timer so here

00:13:08,070 --> 00:13:15,420
we can now create a new timer here a new

00:13:10,800 --> 00:13:16,390
stroud which just calls a console that

00:13:15,420 --> 00:13:19,330
time big

00:13:16,390 --> 00:13:20,650
you claim and we can attain a very

00:13:19,330 --> 00:13:23,320
specific part of the code we're gonna

00:13:20,650 --> 00:13:24,970
time the tick because our intuition like

00:13:23,320 --> 00:13:27,780
previous tells us that like the tick is

00:13:24,970 --> 00:13:32,520
the slow part of our implementation here

00:13:27,780 --> 00:13:36,040
okay so let's build this thing and then

00:13:32,520 --> 00:13:45,580
start our performance debugging and also

00:13:36,040 --> 00:13:48,690
let me crow the universe again okay so

00:13:45,580 --> 00:13:52,900
let's open the browser here let's run

00:13:48,690 --> 00:13:55,920
performance recording and so what we're

00:13:52,900 --> 00:13:58,270
going to be looking at here is

00:13:55,920 --> 00:14:00,250
requestanimationframe so like every one

00:13:58,270 --> 00:14:04,840
of those things of those yellow things

00:14:00,250 --> 00:14:08,380
is one one update on the universe

00:14:04,840 --> 00:14:10,960
basically and so if you look into here

00:14:08,380 --> 00:14:13,540
we see that here's our universe stick so

00:14:10,960 --> 00:14:15,820
here's our timer we see that it's

00:14:13,540 --> 00:14:17,730
actually quite negligible compared to

00:14:15,820 --> 00:14:22,390
like the whole time that we're spending

00:14:17,730 --> 00:14:24,730
we rendering the universe so let's dig

00:14:22,390 --> 00:14:26,650
it up a bit so if you open the GS flame

00:14:24,730 --> 00:14:29,560
chart you can see that most of the time

00:14:26,650 --> 00:14:32,920
is actually spent in the draw sales

00:14:29,560 --> 00:14:38,080
function and in particular in the field

00:14:32,920 --> 00:14:39,160
style setter on the campus we can again

00:14:38,080 --> 00:14:40,960
like have a look here and see that

00:14:39,160 --> 00:14:43,390
actually actually spending 57 percent of

00:14:40,960 --> 00:14:46,300
our time in the field style set around

00:14:43,390 --> 00:14:52,450
the canvas so surprise surprise is not

00:14:46,300 --> 00:14:53,650
right the problem is JavaScript okay so

00:14:52,450 --> 00:15:01,440
let's look actually at implementation

00:14:53,650 --> 00:15:01,440
see where where is that fear style here

00:15:12,100 --> 00:15:16,730
you can actually use some of your the

00:15:15,050 --> 00:15:19,820
native tools to look at the performance

00:15:16,730 --> 00:15:21,290
of awesome I'm not gonna be showing it

00:15:19,820 --> 00:15:22,820
now because I haven't figured how to do

00:15:21,290 --> 00:15:26,810
it yet but like it's definitely possible

00:15:22,820 --> 00:15:29,510
and yet there's not really like a source

00:15:26,810 --> 00:15:31,640
map for for wisdom so you whenever like

00:15:29,510 --> 00:15:33,800
you build was immune up with like two

00:15:31,640 --> 00:15:35,540
types of file you do not dot was in

00:15:33,800 --> 00:15:38,240
place which are binary files and then

00:15:35,540 --> 00:15:39,170
dot what files which are text-based by

00:15:38,240 --> 00:15:45,350
which is what I kind of showed

00:15:39,170 --> 00:15:46,760
previously yeah oh thanks oh yeah so

00:15:45,350 --> 00:15:48,850
like this is literally like where we

00:15:46,760 --> 00:15:51,230
spending fifty seven percent of our time

00:15:48,850 --> 00:15:53,000
like in the whole like application like

00:15:51,230 --> 00:15:56,360
this is the place were like we are

00:15:53,000 --> 00:15:57,620
really like getting neck stuck and good

00:15:56,360 --> 00:15:59,300
thing is that this cotton easy solution

00:15:57,620 --> 00:16:02,150
to this so basically instead of

00:15:59,300 --> 00:16:05,780
assigning a color on every single cell

00:16:02,150 --> 00:16:08,290
iteration I think he agrees with me that

00:16:05,780 --> 00:16:08,290
like he doesn't

00:16:13,260 --> 00:16:18,410
[Laughter]

00:16:18,570 --> 00:16:22,380
yes instead of doing that like on every

00:16:20,670 --> 00:16:25,560
single like cell iteration what we can

00:16:22,380 --> 00:16:27,600
do is move this outside of the loop and

00:16:25,560 --> 00:16:28,700
so that's what we're gonna be doing

00:16:27,600 --> 00:16:36,180
right away

00:16:28,700 --> 00:16:37,410
it's things up and yeah I mean the then

00:16:36,180 --> 00:16:40,410
change we've done here is that we move

00:16:37,410 --> 00:16:42,000
the style field side outside of the

00:16:40,410 --> 00:16:43,500
loops so we like setting it to like a

00:16:42,000 --> 00:16:45,829
light color first and we like looping

00:16:43,500 --> 00:16:49,290
over the whole universe and only setting

00:16:45,829 --> 00:16:51,779
the live cells and then we're doing the

00:16:49,290 --> 00:16:53,250
same thing with the dead cells here so

00:16:51,779 --> 00:17:00,560
let's see if this actually solve our

00:16:53,250 --> 00:17:03,600
issue let's review this come back here

00:17:00,560 --> 00:17:08,480
to defy do again like yeah we back at

00:17:03,600 --> 00:17:10,380
like 60 around 60 frames per second cool

00:17:08,480 --> 00:17:14,600
okay let's try to back stretch this a

00:17:10,380 --> 00:17:17,429
bit more instead of doing like one tick

00:17:14,600 --> 00:17:21,089
per render loop let's try to do a lot

00:17:17,429 --> 00:17:24,780
more than that let's see let's try to do

00:17:21,089 --> 00:17:27,230
nine ticks per per loop and see what

00:17:24,780 --> 00:17:27,230
happens next

00:17:27,900 --> 00:17:35,970
so it goes a lot faster and we back

00:17:31,650 --> 00:17:38,070
again to like 45 frames per second and

00:17:35,970 --> 00:17:39,990
so in this case I think like the

00:17:38,070 --> 00:17:42,210
intuition that like something or in the

00:17:39,990 --> 00:17:43,230
university implementation is probably

00:17:42,210 --> 00:17:48,929
like a bottleneck is probably good

00:17:43,230 --> 00:17:50,429
intuition so let's add a few more timers

00:17:48,929 --> 00:17:51,750
around so like this is the timer we had

00:17:50,429 --> 00:17:53,190
previously for the universe stick but

00:17:51,750 --> 00:17:56,669
now we add in a timer for the allocation

00:17:53,190 --> 00:17:58,919
of new cells a timer for the generation

00:17:56,669 --> 00:18:02,580
of the next cell and then a timer for

00:17:58,919 --> 00:18:05,460
the the allocation of cells I guess like

00:18:02,580 --> 00:18:08,730
if you're a seasoned rust developer this

00:18:05,460 --> 00:18:10,950
is a bit of a smell so you're like okay

00:18:08,730 --> 00:18:12,870
maybe like we can do it in the better

00:18:10,950 --> 00:18:14,820
way without using clone here but let's

00:18:12,870 --> 00:18:21,750
see like where is the extra bottleneck

00:18:14,820 --> 00:18:23,130
here so let me build again then we're

00:18:21,750 --> 00:18:24,940
going to do the same performance

00:18:23,130 --> 00:18:28,840
recording tool here

00:18:24,940 --> 00:18:30,070
up a few generations so let's look so

00:18:28,840 --> 00:18:32,080
you can see that now like in the single

00:18:30,070 --> 00:18:33,309
frame we have like a bunch of things

00:18:32,080 --> 00:18:36,460
because we like doing like before look

00:18:33,309 --> 00:18:40,419
here and if you look closer let's zoom

00:18:36,460 --> 00:18:42,129
in closer a bit oh yeah

00:18:40,419 --> 00:18:44,349
so you can see that surprisingly

00:18:42,129 --> 00:18:45,840
allocating new cells and free new old

00:18:44,349 --> 00:18:49,779
cells it's actually not that expensive

00:18:45,840 --> 00:18:53,559
still and that most of the time is spent

00:18:49,779 --> 00:18:55,570
in the new generation implementation and

00:18:53,559 --> 00:18:57,309
to answer your question that's actually

00:18:55,570 --> 00:18:59,379
where you would be using magnetic tools

00:18:57,309 --> 00:19:01,720
to kind of try to see exactly what's

00:18:59,379 --> 00:19:05,470
happening at the bottom level and see

00:19:01,720 --> 00:19:07,779
like where the bottleneck is I'll do a

00:19:05,470 --> 00:19:10,779
chilled er here so the bottleneck is

00:19:07,779 --> 00:19:14,229
actually in our implementation of the

00:19:10,779 --> 00:19:15,940
live cell counter in particular using

00:19:14,229 --> 00:19:18,039
the modulo operator here it's actually

00:19:15,940 --> 00:19:21,009
very expensive when we like wrapping

00:19:18,039 --> 00:19:22,419
around the edges of the universe again

00:19:21,009 --> 00:19:26,080
luckily for us there's actually a very

00:19:22,419 --> 00:19:27,369
very simple solution so instead of using

00:19:26,080 --> 00:19:32,919
like the module of where we can we just

00:19:27,369 --> 00:19:35,320
like use a wall of ifs and just like

00:19:32,919 --> 00:19:36,820
take every single like possibility to

00:19:35,320 --> 00:19:38,229
account like if you're like on the top

00:19:36,820 --> 00:19:40,059
row like we look at the bottom row if

00:19:38,229 --> 00:19:45,299
you look at the top row and I same on

00:19:40,059 --> 00:19:56,349
the sides as well and this pretty much

00:19:45,299 --> 00:20:00,849
fixes it so if you go back here okay go

00:19:56,349 --> 00:20:02,289
back here we can see that we are okay

00:20:00,849 --> 00:20:08,080
kind of around 60 frames per second

00:20:02,289 --> 00:20:09,879
again and some of the good some of the

00:20:08,080 --> 00:20:11,379
tuning run like rust allows us where to

00:20:09,879 --> 00:20:13,979
electron benchmarks so I'm not gonna

00:20:11,379 --> 00:20:19,659
show that now but I did run benchmarks

00:20:13,979 --> 00:20:22,239
at home before and after here and what

00:20:19,659 --> 00:20:24,279
we can do is we can just use bench

00:20:22,239 --> 00:20:30,369
compare and then we just compare before

00:20:24,279 --> 00:20:32,409
and after and we can see here that like

00:20:30,369 --> 00:20:35,669
the new implementation is eight times

00:20:32,409 --> 00:20:35,669
faster than the old implementation

00:20:37,279 --> 00:20:41,610
okay so that's that's pretty much what I

00:20:39,480 --> 00:20:43,799
have I also want to like kind of give a

00:20:41,610 --> 00:20:46,860
shout out to the tooling around Wiseman

00:20:43,799 --> 00:20:48,360
grassed I don't know how mature it is

00:20:46,860 --> 00:20:50,220
considering the in diverse community but

00:20:48,360 --> 00:20:52,049
again as a JavaScript developer it takes

00:20:50,220 --> 00:20:55,110
me like one week to choose a front-end

00:20:52,049 --> 00:20:56,909
framework and configure web pack so

00:20:55,110 --> 00:21:00,360
anything less than that is very much it

00:20:56,909 --> 00:21:03,600
for me so yeah definitely if you're like

00:21:00,360 --> 00:21:07,500
interesting in this definitely have a

00:21:03,600 --> 00:21:09,899
look at the official official tutorial

00:21:07,500 --> 00:21:12,539
it's pretty free goes like into more

00:21:09,899 --> 00:21:14,820
details to what I put in here okay

00:21:12,539 --> 00:21:17,190
that's what I have hopefully you've

00:21:14,820 --> 00:21:21,330
learned at least one thing out of this

00:21:17,190 --> 00:21:23,580
maybe yeah thank you very much if you

00:21:21,330 --> 00:21:26,789
want to dive more into this like to hear

00:21:23,580 --> 00:21:29,269
a few links that you can check and I'm

00:21:26,789 --> 00:21:29,269
open for questions

00:21:29,910 --> 00:21:38,249
[Applause]

00:21:39,700 --> 00:21:44,710
not too hard please go hey go ahead

00:21:50,080 --> 00:21:52,880
happy

00:21:51,380 --> 00:21:54,889
I mean I've mostly been playing around

00:21:52,880 --> 00:21:56,870
with rust on my weekends and stuff so I

00:21:54,889 --> 00:22:34,370
haven't really like looked at it in

00:21:56,870 --> 00:22:37,370
professional way I always like so so

00:22:34,370 --> 00:22:43,100
presently we're not using react but like

00:22:37,370 --> 00:22:46,490
any yeah we're kind of Supriya

00:22:43,100 --> 00:22:48,559
old-school code base we Salaam angularjs

00:22:46,490 --> 00:22:52,490
but moving into view yeah that's what we

00:22:48,559 --> 00:22:55,279
like playing to do I don't think that

00:22:52,490 --> 00:22:57,049
like wisdom makes sense in most cases I

00:22:55,279 --> 00:22:58,340
think like it doesn't make sense when

00:22:57,049 --> 00:23:01,370
you have like a really like heavily

00:22:58,340 --> 00:23:03,500
computational part of the application

00:23:01,370 --> 00:23:05,450
running on the browser which for like

00:23:03,500 --> 00:23:07,669
most applications in a way is not really

00:23:05,450 --> 00:23:09,470
the case I think the best example I can

00:23:07,669 --> 00:23:11,779
give here is a sigma which is

00:23:09,470 --> 00:23:13,940
collaborative design tool so I know it's

00:23:11,779 --> 00:23:17,029
not the crowd here to talk about design

00:23:13,940 --> 00:23:19,220
tools but what they've done like a

00:23:17,029 --> 00:23:21,289
couple of years ago is basically ship

00:23:19,220 --> 00:23:24,260
wisdom and so they have like the whole

00:23:21,289 --> 00:23:26,090
that design tool on the browser and it's

00:23:24,260 --> 00:23:31,549
super efficient and it's pretty well

00:23:26,090 --> 00:23:33,350
done so I'm guessing from my perspective

00:23:31,549 --> 00:23:35,809
like this is something I may not use

00:23:33,350 --> 00:23:38,000
every day at work but like it's a nice

00:23:35,809 --> 00:23:40,070
tool to have in my tool set like if at

00:23:38,000 --> 00:23:41,690
some point that we reach any performance

00:23:40,070 --> 00:23:44,149
issues I can be like okay like this part

00:23:41,690 --> 00:23:46,190
can be really bringing in awesome and

00:23:44,149 --> 00:23:48,890
then easily plugged into whichever needs

00:23:46,190 --> 00:23:50,810
to be plugged into it too

00:23:48,890 --> 00:23:52,310
to jump on the react part of your

00:23:50,810 --> 00:23:56,000
question it's go interesting because

00:23:52,310 --> 00:23:58,820
someone took the time to kind of rewrite

00:23:56,000 --> 00:24:02,480
the virtual Dom using Muslim and it's

00:23:58,820 --> 00:24:04,430
surprisingly not so much faster it's it

00:24:02,480 --> 00:24:07,190
is definite faster but not at the point

00:24:04,430 --> 00:24:10,360
where it makes sense to rewrite

00:24:07,190 --> 00:24:10,360
everything in a webassembly

00:24:11,170 --> 00:24:18,470
any any more questions

00:24:13,310 --> 00:24:47,930
oh good all convinced that was music

00:24:18,470 --> 00:24:54,440
future okay yeah it's all based on the

00:24:47,930 --> 00:24:57,530
same like brass to chain yeah what were

00:24:54,440 --> 00:24:59,990
the pain points it was surprisingly very

00:24:57,530 --> 00:25:01,490
easy not to be honest I mean except for

00:24:59,990 --> 00:25:03,290
the fact that I'm not like a well versed

00:25:01,490 --> 00:25:04,790
like rust programmer so like sometimes

00:25:03,290 --> 00:25:07,790
like looking at syntax and accessing

00:25:04,790 --> 00:25:10,340
like how how things are plugged together

00:25:07,790 --> 00:25:11,690
but again like the tuning I was able to

00:25:10,340 --> 00:25:12,290
like get everything in Sun in like five

00:25:11,690 --> 00:25:14,720
minutes

00:25:12,290 --> 00:25:18,320
it works out of the box I had to like

00:25:14,720 --> 00:25:20,420
really like debug anything the tutorials

00:25:18,320 --> 00:25:22,960
pretty nicely like set as well so just

00:25:20,420 --> 00:25:26,380
for in the tour was like very very easy

00:25:22,960 --> 00:25:31,460
so I mean happily surprised again as a

00:25:26,380 --> 00:25:33,670
developer that like sorry I won't see

00:25:31,460 --> 00:25:37,670
Joe stripped anymore I think like that

00:25:33,670 --> 00:25:41,260
like did but yeah I'm happily surprised

00:25:37,670 --> 00:25:41,260
that it was actually very painless

00:25:55,490 --> 00:26:04,020
would would it make sense move that to

00:25:58,140 --> 00:26:05,610
rust that's a good question I think like

00:26:04,020 --> 00:26:08,310
there's a breeding effort to like

00:26:05,610 --> 00:26:09,810
rewrite most of the Dom API is using

00:26:08,310 --> 00:26:10,350
rust and like shipping adding

00:26:09,810 --> 00:26:15,060
webassembly

00:26:10,350 --> 00:26:17,010
I'm not sure yet if the benchmarks

00:26:15,060 --> 00:26:18,270
aren't really like favorable to that in

00:26:17,010 --> 00:26:21,360
the sense that does it make sense to

00:26:18,270 --> 00:26:24,330
rewrite like a bunch of code like to

00:26:21,360 --> 00:26:27,390
rust if it's still like allowing you to

00:26:24,330 --> 00:26:28,860
have like 60 frames per second and I

00:26:27,390 --> 00:26:30,690
think the point here is that you don't

00:26:28,860 --> 00:26:32,010
have to rush to like the most performant

00:26:30,690 --> 00:26:35,220
solution as long as the current solution

00:26:32,010 --> 00:26:36,540
that works for you use case I think it's

00:26:35,220 --> 00:26:45,720
good enough but I mean it's definitely

00:26:36,540 --> 00:26:48,030
something that is possible I think you I

00:26:45,720 --> 00:26:49,410
mean it's just like a dumb API so if you

00:26:48,030 --> 00:26:53,660
were ready with whether something you

00:26:49,410 --> 00:26:53,660
should be able to access it as well yeah

00:26:58,530 --> 00:27:12,679
[Applause]

00:27:00,950 --> 00:27:12,679

YouTube URL: https://www.youtube.com/watch?v=ltP-8PXRqrw


