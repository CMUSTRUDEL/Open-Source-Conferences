Title: Rust and Tell Berlin - May 2020
Publication date: 2020-05-26
Playlist: Rust and Tell Berlin
Description: 
	Rust & Tell Berlin, the monthly event to share ideas, and learn about new things in and about Rust, went fully online for the first time.

https://berline.rs/2020/05/26/rust-and-tell.html

#1: 00:07:00 - Interactions with a Diving Computer by Florian Gilcher
#2: 00:33:25 - Rust in the Browser? by Maximilian Ehlers
#3: 00:57:51 - Embedding Rust in NodeJS Applications by Kiffin Gish
#4: 01:28:49 - GitUI by Stephan Dilly
Captions: 
	00:00:00,000 --> 00:00:19,920
Jenkins okay I'm gonna share my screen

00:00:05,970 --> 00:00:30,539
now and here we go I hope everyone can

00:00:19,920 --> 00:00:34,680
see my screen okay so welcome to the

00:00:30,539 --> 00:00:37,710
third on line rust and tell we usually

00:00:34,680 --> 00:00:40,829
hold this meetup in person at some

00:00:37,710 --> 00:00:44,250
random startup co-working space in

00:00:40,829 --> 00:00:47,579
Berlin but since the pandemic we moved

00:00:44,250 --> 00:00:50,070
to assume this has the advantage that we

00:00:47,579 --> 00:00:52,500
have a few more speakers which can't be

00:00:50,070 --> 00:00:55,050
in Berlin I think this is quite nice and

00:00:52,500 --> 00:00:57,329
also people can watch shows all over the

00:00:55,050 --> 00:01:01,530
internet and right now also by a live

00:00:57,329 --> 00:01:05,369
stream on YouTube my name is passing

00:01:01,530 --> 00:01:12,540
Gruber I'm a rust developer for the past

00:01:05,369 --> 00:01:17,700
year working on exchanges finance

00:01:12,540 --> 00:01:20,970
institutions in rust and my co-host is

00:01:17,700 --> 00:01:23,130
Ryan Levesque he has bad internet

00:01:20,970 --> 00:01:30,420
connections or not sure if he's on the

00:01:23,130 --> 00:01:33,479
meter right now but Ryan is yeah a huge

00:01:30,420 --> 00:01:37,829
rust advocate at Microsoft you can find

00:01:33,479 --> 00:01:40,470
him at Ryan Levesque Ryan underscore

00:01:37,829 --> 00:01:42,899
Levesque on Twitter so if you have any

00:01:40,470 --> 00:01:47,909
rust related to question feel free to

00:01:42,899 --> 00:01:51,299
get in touch with him so the meetup is

00:01:47,909 --> 00:01:55,799
all about sharing our struggles with the

00:01:51,299 --> 00:01:59,009
language is not so new anymore but the

00:01:55,799 --> 00:02:01,770
idea of the meetup is to show behind the

00:01:59,009 --> 00:02:04,500
developer or the software engineer or

00:02:01,770 --> 00:02:07,970
dam or other product it always helps to

00:02:04,500 --> 00:02:11,489
not judge and not to just see a polished

00:02:07,970 --> 00:02:13,800
github um project with five thousand

00:02:11,489 --> 00:02:17,910
five thousand stars it helps to see

00:02:13,800 --> 00:02:20,460
developer struggle it helps to blow some

00:02:17,910 --> 00:02:23,040
steam off at the meter complain about

00:02:20,460 --> 00:02:27,500
the language but all have a friendly

00:02:23,040 --> 00:02:29,820
get-together once a month to share our

00:02:27,500 --> 00:02:33,630
experiences with the language so and

00:02:29,820 --> 00:02:36,870
this being said it's we welcome every

00:02:33,630 --> 00:02:39,630
super beginner and like into the

00:02:36,870 --> 00:02:42,090
language even if you haven't program too

00:02:39,630 --> 00:02:44,250
much rust yet it can be two lines feel

00:02:42,090 --> 00:02:46,230
free to talk about it and your

00:02:44,250 --> 00:02:48,900
experiences and how you moved from a

00:02:46,230 --> 00:02:53,280
different language to rest and what do

00:02:48,900 --> 00:02:57,090
you think about it now even if we are

00:02:53,280 --> 00:03:01,890
online we follow the Berlin code of

00:02:57,090 --> 00:03:05,340
contact so please you can have have a

00:03:01,890 --> 00:03:08,220
look at Berlin code of conduct org if

00:03:05,340 --> 00:03:10,650
you find anything which is not to your

00:03:08,220 --> 00:03:12,890
liking feel free to contact us privately

00:03:10,650 --> 00:03:17,970
you can send us a meet-up

00:03:12,890 --> 00:03:19,800
message if you yeah if like if something

00:03:17,970 --> 00:03:22,160
bad is happening please let us know and

00:03:19,800 --> 00:03:27,330
we will take care of it

00:03:22,160 --> 00:03:29,540
um since we are online we have a bit of

00:03:27,330 --> 00:03:33,390
a different set up for the rest until

00:03:29,540 --> 00:03:38,010
meetup we are using am soon and assume

00:03:33,390 --> 00:03:41,520
chat so if you have any questions to the

00:03:38,010 --> 00:03:45,030
speaker you can type it during the talk

00:03:41,520 --> 00:03:48,180
and I will go over the questions in the

00:03:45,030 --> 00:03:50,130
chats and I'm asked the speaker in the

00:03:48,180 --> 00:03:54,239
end of his talk or her talk about the

00:03:50,130 --> 00:03:56,790
air talk or we will have soon breakout

00:03:54,239 --> 00:04:01,140
rooms today we have four talks four

00:03:56,790 --> 00:04:03,060
speakers so I guess we will have a

00:04:01,140 --> 00:04:06,360
breakout room after the second talk we

00:04:03,060 --> 00:04:08,700
will have a 5-10 minute chat maybe 15

00:04:06,360 --> 00:04:11,670
minutes chat and then we will go on to

00:04:08,700 --> 00:04:13,980
them to the last two speakers we had in

00:04:11,670 --> 00:04:15,390
the past that people have wanted more

00:04:13,980 --> 00:04:17,850
time in their breakout rooms

00:04:15,390 --> 00:04:21,000
it's kind of hard since everyone is on

00:04:17,850 --> 00:04:24,630
their own schedule so please feel free

00:04:21,000 --> 00:04:27,810
to create your own swim rooms or matrix

00:04:24,630 --> 00:04:30,960
Jets at the end of the Meetup and then

00:04:27,810 --> 00:04:34,110
hang out and chat there this meetup is

00:04:30,960 --> 00:04:36,960
also streamed live on YouTube so if you

00:04:34,110 --> 00:04:41,130
have any questions or if you show your

00:04:36,960 --> 00:04:45,630
face during the talks be aware that it

00:04:41,130 --> 00:04:49,139
will be live streamed and since we are

00:04:45,630 --> 00:04:52,350
not just in Berlin for wherever you're

00:04:49,139 --> 00:04:55,139
currently sitting we warned you and if

00:04:52,350 --> 00:04:57,630
we say you we really mean you this

00:04:55,139 --> 00:05:02,160
meetup just exists because every month

00:04:57,630 --> 00:05:04,979
we can present three or four speakers so

00:05:02,160 --> 00:05:08,910
the hard work is just on you and not on

00:05:04,979 --> 00:05:11,580
us we just provide the setup and you do

00:05:08,910 --> 00:05:14,070
the talk so we are happy to help you out

00:05:11,580 --> 00:05:15,810
in the shape of your talk if you have

00:05:14,070 --> 00:05:18,330
any questions if you have any concerns

00:05:15,810 --> 00:05:19,710
if you never talked if you want to talk

00:05:18,330 --> 00:05:22,560
more just meet up is a perfect

00:05:19,710 --> 00:05:25,050
environment it's free people can drop in

00:05:22,560 --> 00:05:27,750
and out there no expectations so feel

00:05:25,050 --> 00:05:29,669
free to make this your first meetup

00:05:27,750 --> 00:05:36,510
where you give a presentation and the

00:05:29,669 --> 00:05:39,660
talk and warm thank you to young Eric he

00:05:36,510 --> 00:05:41,880
is providing the set up is handling all

00:05:39,660 --> 00:05:44,160
the technicalities we wouldn't have been

00:05:41,880 --> 00:05:50,050
able to pull this up so quickly in such

00:05:44,160 --> 00:05:53,889
in a professional way so thank you with

00:05:50,050 --> 00:05:56,500
brings us to our four speakers we have I

00:05:53,889 --> 00:05:58,270
won't save on names because I might

00:05:56,500 --> 00:06:02,349
pronounce it wrong they don't look so

00:05:58,270 --> 00:06:05,759
hard but I won't do it so I'll just tell

00:06:02,349 --> 00:06:10,750
you the talk topics the first one is

00:06:05,759 --> 00:06:14,440
interactions with a diving computer we

00:06:10,750 --> 00:06:15,300
have a talk about can you run rust in

00:06:14,440 --> 00:06:18,430
the browser

00:06:15,300 --> 00:06:22,030
the third talk will be after the zoom

00:06:18,430 --> 00:06:25,389
breakout room break is embedding rust in

00:06:22,030 --> 00:06:30,479
noches applications and the last talk of

00:06:25,389 --> 00:06:30,479
the day will be get UI written in rust

00:06:30,630 --> 00:06:37,030
okay um thank you for attending this

00:06:34,090 --> 00:06:41,199
meetup I hope you will have a great one

00:06:37,030 --> 00:06:43,360
and a half hours or two hours time feel

00:06:41,199 --> 00:06:46,449
free to ask any questions during the

00:06:43,360 --> 00:06:48,789
talk feel free to text me or Ryan

00:06:46,449 --> 00:06:51,340
privately if we can answer any questions

00:06:48,789 --> 00:06:53,800
also feel free if you get motivated

00:06:51,340 --> 00:06:56,469
during the meetup to give a talk feel

00:06:53,800 --> 00:07:00,539
free just to approach us directly tell

00:06:56,469 --> 00:07:03,280
your name and we will sort it out and

00:07:00,539 --> 00:07:06,340
yeah the first time speaker can now take

00:07:03,280 --> 00:07:11,069
over and share the screen and we are

00:07:06,340 --> 00:07:14,169
ready for diving computers with rust

00:07:11,069 --> 00:07:18,009
Thank You Bastian always happy to be

00:07:14,169 --> 00:07:19,810
here I'm not sharing my screen just yet

00:07:18,009 --> 00:07:20,860
I just wanted to show you quickly what

00:07:19,810 --> 00:07:23,650
we're talking about

00:07:20,860 --> 00:07:28,750
this is a diving computer it's quite

00:07:23,650 --> 00:07:31,900
sizable and it goes on your wrist and

00:07:28,750 --> 00:07:33,819
this is the data cable you use for it

00:07:31,900 --> 00:07:35,889
which I'm going to address in a second

00:07:33,819 --> 00:07:46,300
so that you know how much of a

00:07:35,889 --> 00:07:50,199
experience this cable is and so that's

00:07:46,300 --> 00:07:52,569
good doesn't remember my settings so

00:07:50,199 --> 00:07:54,819
let's get started so change the title of

00:07:52,569 --> 00:07:57,940
this talk a little using rest to talk to

00:07:54,819 --> 00:07:59,800
and about my diving computer because

00:07:57,940 --> 00:08:02,390
when I pitched this talk to you Ryan

00:07:59,800 --> 00:08:04,460
it was like what's that so

00:08:02,390 --> 00:08:07,400
like I need a little bit to explain what

00:08:04,460 --> 00:08:09,280
this thing does I'm throwing geisha I

00:08:07,400 --> 00:08:11,900
run a company called furnace systems

00:08:09,280 --> 00:08:13,990
which is world's largest most

00:08:11,900 --> 00:08:17,450
consultancy and we do run our own

00:08:13,990 --> 00:08:20,950
conference the oxidized conf which is

00:08:17,450 --> 00:08:23,390
focused on rust on embedded and

00:08:20,950 --> 00:08:25,430
their CFP for this conference is

00:08:23,390 --> 00:08:27,200
currently open for the next edition the

00:08:25,430 --> 00:08:30,650
next edition is going to be online and

00:08:27,200 --> 00:08:33,500
it's going to be in July but not to bore

00:08:30,650 --> 00:08:35,300
you with that what is this thing that I

00:08:33,500 --> 00:08:36,860
showed you what is a dive computer and

00:08:35,300 --> 00:08:38,660
that computers are actually even

00:08:36,860 --> 00:08:40,910
currently most crucial security

00:08:38,660 --> 00:08:43,370
equipment that you can have what I think

00:08:40,910 --> 00:08:45,920
what it does it constantly tracks your

00:08:43,370 --> 00:08:48,680
death and your calculated absorption of

00:08:45,920 --> 00:08:50,510
nitrogen because if you put the human

00:08:48,680 --> 00:08:54,350
body under pressure it will start

00:08:50,510 --> 00:08:57,740
absorbing nitrogen and nitrogen this

00:08:54,350 --> 00:08:59,930
nitrogen in the body is actually the

00:08:57,740 --> 00:09:03,800
cause of driver sickness because if you

00:08:59,930 --> 00:09:07,160
depressurize your body too quickly it

00:09:03,800 --> 00:09:09,050
will start to form air bubbles again and

00:09:07,160 --> 00:09:13,010
you don't really want that

00:09:09,050 --> 00:09:34,430
Oh generic just noticed but I should

00:09:13,010 --> 00:09:35,960
share my slides ok and so you better

00:09:34,430 --> 00:09:37,970
hope you two tracks that using a

00:09:35,960 --> 00:09:41,060
mathematical model just calculating your

00:09:37,970 --> 00:09:43,340
current death and your your probable

00:09:41,060 --> 00:09:45,260
absorption of nitrogen and also tracks

00:09:43,340 --> 00:09:47,770
the release of nitrogen doing surface

00:09:45,260 --> 00:09:50,570
times so if you dive multiple times

00:09:47,770 --> 00:09:52,490
after each other it also tracks how much

00:09:50,570 --> 00:09:54,800
of that nitrogen has naturally released

00:09:52,490 --> 00:09:58,250
while you've been at the surface so that

00:09:54,800 --> 00:10:01,070
your second dive actually tracks where

00:09:58,250 --> 00:10:03,320
the tracks your current body state and

00:10:01,070 --> 00:10:05,600
so it calculates the die at the time you

00:10:03,320 --> 00:10:08,690
can spend it death and it checks for a

00:10:05,600 --> 00:10:11,090
safe essence speed so if you have too

00:10:08,690 --> 00:10:13,310
much nitrogen in your body it checks how

00:10:11,090 --> 00:10:14,720
fast you can ascend if there's any kind

00:10:13,310 --> 00:10:16,670
of pauses you need to make

00:10:14,720 --> 00:10:18,470
so depressurizing you might have heard

00:10:16,670 --> 00:10:21,079
the term of a depressurizing chamber and

00:10:18,470 --> 00:10:28,339
it provides a tracking function for

00:10:21,079 --> 00:10:29,899
later pretty often so before that you

00:10:28,339 --> 00:10:32,269
would actually use these kinds of tables

00:10:29,899 --> 00:10:35,870
where you would go for example on the

00:10:32,269 --> 00:10:38,449
top left you see you stir it and you go

00:10:35,870 --> 00:10:43,430
to a depth of like 70 feet and then

00:10:38,449 --> 00:10:46,149
there's there's a time that you can that

00:10:43,430 --> 00:10:51,370
you can spend at that depth for example

00:10:46,149 --> 00:10:55,160
so previously you had to use a pretty

00:10:51,370 --> 00:10:57,290
pretty pessimistic model so for example

00:10:55,160 --> 00:11:01,189
you would say okay we're diving to 25

00:10:57,290 --> 00:11:03,519
meters so let's say we're taking like 30

00:11:01,189 --> 00:11:06,259
and we're assuming that we're spending

00:11:03,519 --> 00:11:07,939
five minutes at 30 meters or something

00:11:06,259 --> 00:11:09,889
like that so you would write curves like

00:11:07,939 --> 00:11:11,449
this and obviously your computer can do

00:11:09,889 --> 00:11:13,759
a much missive tracking with that

00:11:11,449 --> 00:11:18,579
they're tracking of a computer it's

00:11:13,759 --> 00:11:22,389
still very conservative because

00:11:18,579 --> 00:11:22,389
something I want to show you quickly

00:11:23,470 --> 00:11:26,680
there we go

00:11:27,189 --> 00:11:33,560
this is the manual of my life computer

00:11:29,740 --> 00:11:35,899
these are the security notification

00:11:33,560 --> 00:11:39,319
notices throughout the manual and they

00:11:35,899 --> 00:11:43,730
come in three categories red deadly or

00:11:39,319 --> 00:11:45,829
orange likely deadly and yellow can have

00:11:43,730 --> 00:11:48,259
grave harm and then it starts with one

00:11:45,829 --> 00:11:50,689
page of these are all the warnings that

00:11:48,259 --> 00:11:54,319
might lead to death which are not and

00:11:50,689 --> 00:11:56,870
all that bad it's just being underwater

00:11:54,319 --> 00:12:01,130
being pressurized and being and

00:11:56,870 --> 00:12:04,220
breathing her is a a thing that you

00:12:01,130 --> 00:12:07,220
should take care about and so a diving

00:12:04,220 --> 00:12:09,170
computer is still still uses a very

00:12:07,220 --> 00:12:12,889
conservative model for those reasonings

00:12:09,170 --> 00:12:15,470
but saying I heard is no you bound

00:12:12,889 --> 00:12:22,129
reasons then stay very clear away from

00:12:15,470 --> 00:12:24,380
them okay so this is the data I can get

00:12:22,129 --> 00:12:26,889
on the day this for example is one of my

00:12:24,380 --> 00:12:26,889
early dives

00:12:27,699 --> 00:12:32,139
and you can see to the left I had some

00:12:30,189 --> 00:12:34,989
problems coming down the Purple Line is

00:12:32,139 --> 00:12:36,160
my height in the water and that's one of

00:12:34,989 --> 00:12:38,739
the reasons why I started extracting

00:12:36,160 --> 00:12:41,259
data from my dad's computer just for

00:12:38,739 --> 00:12:44,470
checking like how where my dogs and all

00:12:41,259 --> 00:12:46,419
of this and especially you can see that

00:12:44,470 --> 00:12:48,730
I had some problems actually keeping

00:12:46,419 --> 00:12:51,100
height for example in the middle of it

00:12:48,730 --> 00:12:53,769
and all of this is quite interesting to

00:12:51,100 --> 00:12:56,319
see in retrospect this is one of my

00:12:53,769 --> 00:12:57,850
later dives where we actually went down

00:12:56,319 --> 00:13:01,359
to the 30 meters and what you can see

00:12:57,850 --> 00:13:03,879
here is that we stayed smooth on the

00:13:01,359 --> 00:13:07,359
profile of the sea and then slowly went

00:13:03,879 --> 00:13:09,129
up and you can see at like 848 something

00:13:07,359 --> 00:13:12,249
like that we started making a stop in

00:13:09,129 --> 00:13:14,109
the middle to depressurize right so this

00:13:12,249 --> 00:13:20,489
is what you use a dive computer for

00:13:14,109 --> 00:13:22,779
general so in the operational mode of

00:13:20,489 --> 00:13:25,600
those computers is also very very

00:13:22,779 --> 00:13:27,779
interesting so on the surface a dive

00:13:25,600 --> 00:13:30,069
computer is always in waiting mode and

00:13:27,779 --> 00:13:32,499
it provides you a simple configuration

00:13:30,069 --> 00:13:34,959
interface so it can change a couple of

00:13:32,499 --> 00:13:37,660
things for example some divers use

00:13:34,959 --> 00:13:39,639
different gas mixtures especially with

00:13:37,660 --> 00:13:42,069
last night nitrogen so this is

00:13:39,639 --> 00:13:44,350
interesting for that calculation and it

00:13:42,069 --> 00:13:46,419
gives you some time and warning settings

00:13:44,350 --> 00:13:48,939
so for example it can set a warning for

00:13:46,419 --> 00:13:51,669
I don't want to go below 15 meters and

00:13:48,939 --> 00:13:55,660
then the computer will go off at that

00:13:51,669 --> 00:13:58,029
moment it's not actually beeping because

00:13:55,660 --> 00:13:59,589
sound travels quite nice underwater it

00:13:58,029 --> 00:14:02,139
does not allow you to switch off any

00:13:59,589 --> 00:14:03,819
kind of safety features it is again

00:14:02,139 --> 00:14:06,549
really really conservative for example

00:14:03,819 --> 00:14:08,619
after a dive it you cannot switch it off

00:14:06,549 --> 00:14:10,779
for 24 hours and the only thing at this

00:14:08,619 --> 00:14:12,249
place is you're not allowed to fly in

00:14:10,779 --> 00:14:13,660
that time why

00:14:12,249 --> 00:14:16,389
same thing you put yourself on a

00:14:13,660 --> 00:14:19,209
pressure and you should make sure that

00:14:16,389 --> 00:14:20,769
all the nitrogen can release and one one

00:14:19,209 --> 00:14:23,589
of the most common ways to actually get

00:14:20,769 --> 00:14:25,359
divers sickness is diving and then get

00:14:23,589 --> 00:14:28,269
going on a plane because a plane is very

00:14:25,359 --> 00:14:30,850
very depressurized that's a pretty

00:14:28,269 --> 00:14:31,869
pretty common cause of accidents much

00:14:30,850 --> 00:14:33,910
more common than actually having

00:14:31,869 --> 00:14:36,789
accidents on the water and this cannot

00:14:33,910 --> 00:14:38,679
cannot solutely not be switched off so

00:14:36,789 --> 00:14:40,030
the operation of the whole thing is

00:14:38,679 --> 00:14:41,980
pretty pretty automatic

00:14:40,030 --> 00:14:43,990
yeah and provides me with all the dye of

00:14:41,980 --> 00:14:45,310
history that you had and for example it

00:14:43,990 --> 00:14:46,900
marks all the dykes were referring

00:14:45,310 --> 00:14:48,640
something you send it more quickly than

00:14:46,900 --> 00:14:50,380
that I've computer recommended to you

00:14:48,640 --> 00:14:52,330
and the dive model recommended you which

00:14:50,380 --> 00:14:54,250
can be useful for later on just for

00:14:52,330 --> 00:14:56,110
checking usually it's for checking oh

00:14:54,250 --> 00:15:01,660
hey I did something wrong on this day I

00:14:56,110 --> 00:15:03,730
wish the next time and at death a dive

00:15:01,660 --> 00:15:05,950
computer switches itself on exactly the

00:15:03,730 --> 00:15:08,740
moment it touches water so the whole

00:15:05,950 --> 00:15:11,140
process is automatic and then it ticks

00:15:08,740 --> 00:15:12,820
and my logs every five seconds or

00:15:11,140 --> 00:15:15,580
something like that and then it tracks

00:15:12,820 --> 00:15:17,950
the death the temperature the remaining

00:15:15,580 --> 00:15:20,350
time where theoretically you could go

00:15:17,950 --> 00:15:21,670
you could send without any kind of

00:15:20,350 --> 00:15:24,820
decompression because you don't have

00:15:21,670 --> 00:15:27,550
enough nitrogen in your body at all yeah

00:15:24,820 --> 00:15:31,000
not enough nitrogen in your body

00:15:27,550 --> 00:15:32,860
absorbed yet this is called zero time

00:15:31,000 --> 00:15:37,000
diving zero decompression time and this

00:15:32,860 --> 00:15:38,530
is what you usually do and it saves all

00:15:37,000 --> 00:15:41,200
those points like you look at regularly

00:15:38,530 --> 00:15:43,540
on the computer and on every of those

00:15:41,200 --> 00:15:45,610
ticks it will calculate the mole of

00:15:43,540 --> 00:15:47,230
nitrogen absorption and presents you

00:15:45,610 --> 00:15:50,770
with the remaining time that you have at

00:15:47,230 --> 00:15:52,480
the career depth and the essent decent

00:15:50,770 --> 00:15:54,070
speed that you currently have because

00:15:52,480 --> 00:15:56,050
underwater is pretty hard to actually

00:15:54,070 --> 00:15:59,080
track where you are and how high though

00:15:56,050 --> 00:16:02,230
you are except when you have four below

00:15:59,080 --> 00:16:05,200
you so having a computer check that is

00:16:02,230 --> 00:16:06,760
pretty pretty interesting yeah and it

00:16:05,200 --> 00:16:09,060
has a separate stop mode at the moment

00:16:06,760 --> 00:16:11,410
you should actually start stopping and

00:16:09,060 --> 00:16:13,300
we'll say okay please remain at this

00:16:11,410 --> 00:16:16,150
death here's a countdown for you three

00:16:13,300 --> 00:16:18,460
minutes something like that it's pretty

00:16:16,150 --> 00:16:21,670
interesting so here's a data sample that

00:16:18,460 --> 00:16:25,540
you could get out get off of this in

00:16:21,670 --> 00:16:28,540
there's a common XML format that is it's

00:16:25,540 --> 00:16:30,430
always curse but really easy readable so

00:16:28,540 --> 00:16:32,290
what it tracks is actually quite simple

00:16:30,430 --> 00:16:35,700
it just tracks the temperature the depth

00:16:32,290 --> 00:16:41,470
it actually locks with each of these

00:16:35,700 --> 00:16:43,480
what which kind of device has produced

00:16:41,470 --> 00:16:47,530
this data sample and the most important

00:16:43,480 --> 00:16:49,570
time part for the dive computer to

00:16:47,530 --> 00:16:53,020
operate is this decode time that means

00:16:49,570 --> 00:16:54,010
at this def i can still spend this is a

00:16:53,020 --> 00:16:58,800
28 meter

00:16:54,010 --> 00:17:02,680
I can still still spend 1020 seconds

00:16:58,800 --> 00:17:03,750
before I have to to decompress on the

00:17:02,680 --> 00:17:06,670
way out

00:17:03,750 --> 00:17:08,260
so interfacing with the deaf computer is

00:17:06,670 --> 00:17:09,850
also very conservative it's purely for

00:17:08,260 --> 00:17:11,140
reading live computers or security

00:17:09,850 --> 00:17:11,860
equipment they're not intended to be

00:17:11,140 --> 00:17:14,199
messed with it

00:17:11,860 --> 00:17:16,870
you need to buy a cable for it and this

00:17:14,199 --> 00:17:19,209
cable cost six euros first um the euro

00:17:16,870 --> 00:17:21,190
computer and then at some point you

00:17:19,209 --> 00:17:23,020
figure out that it that one of your

00:17:21,190 --> 00:17:25,180
biggest connection problems is that it

00:17:23,020 --> 00:17:26,589
actually doesn't connect properly and

00:17:25,180 --> 00:17:28,510
you need to wiggle it around which is

00:17:26,589 --> 00:17:31,690
really really annoying if you want to

00:17:28,510 --> 00:17:33,640
debug something because you pretty often

00:17:31,690 --> 00:17:36,430
lose connection because the cable is

00:17:33,640 --> 00:17:37,450
properly there and then trying to figure

00:17:36,430 --> 00:17:39,880
out what the dive computer actually

00:17:37,450 --> 00:17:43,030
supposes and the problem is that's

00:17:39,880 --> 00:17:46,750
rarely documented and but there is a

00:17:43,030 --> 00:17:48,280
library called the dive computer which

00:17:46,750 --> 00:17:51,760
I've been using as a reference which is

00:17:48,280 --> 00:17:53,890
a sea library which is actually pretty

00:17:51,760 --> 00:17:56,380
good a pretty structured and gave me the

00:17:53,890 --> 00:17:58,690
hint and implements like two hundred

00:17:56,380 --> 00:18:01,690
devices or something like that that's

00:17:58,690 --> 00:18:03,100
machine one and live data computer is

00:18:01,690 --> 00:18:05,980
pretty interesting it has a natural

00:18:03,100 --> 00:18:10,450
layering on the hardware type but you

00:18:05,980 --> 00:18:13,150
actually have so this device is built by

00:18:10,450 --> 00:18:14,950
an vendor called a column that's the

00:18:13,150 --> 00:18:18,310
maker but the hardware type is actually

00:18:14,950 --> 00:18:21,700
Oceanic which a number of other vendors

00:18:18,310 --> 00:18:25,120
use and the exact memory layout type

00:18:21,700 --> 00:18:29,170
that I'm going to find here and that

00:18:25,120 --> 00:18:31,930
works mostly like all this works mostly

00:18:29,170 --> 00:18:34,480
by listing how big is a memory page on

00:18:31,930 --> 00:18:36,760
this computer how can this memory on

00:18:34,480 --> 00:18:40,530
this computer be addressed is it a USB

00:18:36,760 --> 00:18:44,380
computer or does it use serial for

00:18:40,530 --> 00:18:45,910
contact this one is you serial but it

00:18:44,380 --> 00:18:48,070
what's interesting about it it's fully

00:18:45,910 --> 00:18:51,130
iterator based and it's fully dynamic

00:18:48,070 --> 00:18:53,860
dispatch base so anything it does for

00:18:51,130 --> 00:18:56,230
all these implementations is write out

00:18:53,860 --> 00:18:57,670
buckets of functions that are like okay

00:18:56,230 --> 00:19:00,970
so how do I read a page from this

00:18:57,670 --> 00:19:02,680
specific model of computer and then put

00:19:00,970 --> 00:19:05,460
those in the V table and use an abstract

00:19:02,680 --> 00:19:07,050
interface to interface with that

00:19:05,460 --> 00:19:08,430
connecting to the computer is pretty

00:19:07,050 --> 00:19:12,690
simple it's a little bit verbose but

00:19:08,430 --> 00:19:14,460
there's a serial port library in in rust

00:19:12,690 --> 00:19:15,930
that you can use and you just sort of

00:19:14,460 --> 00:19:17,820
all your serial ports of your computer

00:19:15,930 --> 00:19:20,190
the only thing that you need to know is

00:19:17,820 --> 00:19:24,750
the so-called V ID which is the vendor

00:19:20,190 --> 00:19:27,750
ID and the PID off your USB device so

00:19:24,750 --> 00:19:32,700
how long is 1027 they've registered for

00:19:27,750 --> 00:19:38,250
that and it is there is the actual

00:19:32,700 --> 00:19:40,050
diversity so and if you want to send a

00:19:38,250 --> 00:19:44,160
message to it the first message to send

00:19:40,050 --> 00:19:47,700
is to take that computer handle then you

00:19:44,160 --> 00:19:49,650
open this port using the serial port

00:19:47,700 --> 00:19:53,550
library and the only thing is you Center

00:19:49,650 --> 00:19:56,130
it is 0 X a 4 and 0 so all of those

00:19:53,550 --> 00:20:05,179
messages end in 0 you do port right to

00:19:56,130 --> 00:20:05,179
it and it will respond with its name and

00:20:05,240 --> 00:20:09,780
we want to get a little bit more out of

00:20:07,860 --> 00:20:11,250
this machine than just its name and it's

00:20:09,780 --> 00:20:13,950
pretty interesting to see how the memory

00:20:11,250 --> 00:20:15,690
model works what it gives you it gives

00:20:13,950 --> 00:20:17,550
you direct memory access to actually

00:20:15,690 --> 00:20:20,970
everything that's on this device or

00:20:17,550 --> 00:20:24,720
that's in D in the memory that's

00:20:20,970 --> 00:20:28,980
intended to be read by me and this is

00:20:24,720 --> 00:20:37,280
actually pages numbered from 1 to 512

00:20:28,980 --> 00:20:37,280
and there was a 1 kilobyte pages and

00:20:38,510 --> 00:20:48,480
correct and the and each of these has

00:20:46,160 --> 00:20:52,559
special data in it the most interesting

00:20:48,480 --> 00:20:56,040
one being the page 64 which has the dive

00:20:52,559 --> 00:20:59,550
page pointers I go to what the die page

00:20:56,040 --> 00:21:04,200
point is around a second that's a typo

00:20:59,550 --> 00:21:06,120
there so the memory layout of this

00:21:04,200 --> 00:21:09,480
device is extremely simple

00:21:06,120 --> 00:21:11,179
it has a block for all device info so

00:21:09,480 --> 00:21:13,710
everything current settings and whatever

00:21:11,179 --> 00:21:15,420
it has this one page of vocation

00:21:13,710 --> 00:21:17,490
pointers and where do those location for

00:21:15,420 --> 00:21:19,440
this point there's two ring buffers

00:21:17,490 --> 00:21:21,240
one is full of logbook and one is for

00:21:19,440 --> 00:21:24,450
the Dave profile and that's a different

00:21:21,240 --> 00:21:28,350
thing the logbook holds data like this

00:21:24,450 --> 00:21:35,429
person has dived for 10 minutes maximum

00:21:28,350 --> 00:21:38,280
death 25 meters at 9:30 came back up and

00:21:35,429 --> 00:21:40,380
maybe a flag descent was too far too

00:21:38,280 --> 00:21:42,360
fast or not that's that's what we call a

00:21:40,380 --> 00:21:45,030
logbook and then there's the dive

00:21:42,360 --> 00:21:47,160
profile and the dive profile is the

00:21:45,030 --> 00:21:49,100
thing that gives you all those small

00:21:47,160 --> 00:21:51,840
data points that actually collect this

00:21:49,100 --> 00:21:54,210
I'm only going to care about the logbook

00:21:51,840 --> 00:21:56,220
ring buffer I'm for the sake of this

00:21:54,210 --> 00:22:00,179
talk everything else is pretty much the

00:21:56,220 --> 00:22:03,300
same with you and the dive computer

00:22:00,179 --> 00:22:06,330
actually gives me this information in an

00:22:03,300 --> 00:22:08,010
easy portable way so this is my part of

00:22:06,330 --> 00:22:11,940
their layout structure gives you the

00:22:08,010 --> 00:22:13,830
memory size it gives you information if

00:22:11,940 --> 00:22:16,020
there's high memory in the computer so

00:22:13,830 --> 00:22:18,570
for everyone because computers in the

00:22:16,020 --> 00:22:22,080
90s in the early 90s these small things

00:22:18,570 --> 00:22:24,750
still have high memory and it gives you

00:22:22,080 --> 00:22:26,640
the location of the CF pointers page

00:22:24,750 --> 00:22:29,100
where all these pointers are and those

00:22:26,640 --> 00:22:32,309
pointers pointers one page that is

00:22:29,100 --> 00:22:35,040
somewhere in this logbook in this log

00:22:32,309 --> 00:22:37,980
book written buffer or some of these

00:22:35,040 --> 00:22:40,260
pointers these pointers point to

00:22:37,980 --> 00:22:42,900
everything in this memory space all of

00:22:40,260 --> 00:22:47,059
the important information is is in this

00:22:42,900 --> 00:22:50,970
one page and you can just read that so

00:22:47,059 --> 00:22:56,010
create a vector that is as big as the

00:22:50,970 --> 00:22:59,280
page size of this of this computer then

00:22:56,010 --> 00:23:01,410
we say device read from the sport the

00:22:59,280 --> 00:23:06,540
pointers and read that into the vector

00:23:01,410 --> 00:23:10,200
device read being a function that reads

00:23:06,540 --> 00:23:12,750
that page of the serial port and then we

00:23:10,200 --> 00:23:13,530
need to interpret this and that's why it

00:23:12,750 --> 00:23:19,940
gets interesting

00:23:13,530 --> 00:23:22,980
all of these pointers are 16 16 bits and

00:23:19,940 --> 00:23:26,730
these is why I found to actually decode

00:23:22,980 --> 00:23:28,860
that is using the byte or library and

00:23:26,730 --> 00:23:30,960
the cursor library

00:23:28,860 --> 00:23:32,490
so the courser library having having the

00:23:30,960 --> 00:23:34,890
advantage that I don't have to do any

00:23:32,490 --> 00:23:38,240
kind of pounder calculation to advance

00:23:34,890 --> 00:23:41,010
my position in this and despite field

00:23:38,240 --> 00:23:43,289
instead I can say I know that the two

00:23:41,010 --> 00:23:45,630
pointers that I'm interested in are at

00:23:43,289 --> 00:23:47,640
index 4 and following and then I can

00:23:45,630 --> 00:23:51,000
reach two pointers using the cursor and

00:23:47,640 --> 00:23:54,590
the cursor Rees holds my current state

00:23:51,000 --> 00:23:54,590
in the original dip dive computer

00:23:54,950 --> 00:23:59,940
library this would be a lot of pointer

00:23:57,690 --> 00:24:05,399
mangling and keeping basically the read

00:23:59,940 --> 00:24:07,289
state in separate pointer variable so

00:24:05,399 --> 00:24:09,480
this is how we find out the places of

00:24:07,289 --> 00:24:12,659
the of the pages that we interested in

00:24:09,480 --> 00:24:15,299
reading so this is in this in this ring

00:24:12,659 --> 00:24:18,210
buffer where is the last written log and

00:24:15,299 --> 00:24:21,240
where's the and where is the first

00:24:18,210 --> 00:24:23,299
written log if the computer has been in

00:24:21,240 --> 00:24:25,590
use it for a while these will be at

00:24:23,299 --> 00:24:28,799
pretty much the same location because

00:24:25,590 --> 00:24:31,919
then you go around the ring and if you

00:24:28,799 --> 00:24:34,889
want to read a page live dive computer

00:24:31,919 --> 00:24:39,120
for example does it so what you need to

00:24:34,889 --> 00:24:40,860
send is you need to send 0 xb1 just

00:24:39,120 --> 00:24:46,139
that's the command for with me a page

00:24:40,860 --> 00:24:52,289
the page number as a you 16 16 pointers

00:24:46,139 --> 00:24:54,690
and then 0 and in C you would actually

00:24:52,289 --> 00:24:57,269
do that by just creating an in-memory

00:24:54,690 --> 00:25:00,929
array and doing a little bit of bit

00:24:57,269 --> 00:25:03,179
shifting this looks very unlucky in rust

00:25:00,929 --> 00:25:13,669
the best version I found was also again

00:25:03,179 --> 00:25:17,519
using using the cursor and the microwave

00:25:13,669 --> 00:25:19,860
so the one thing that you need to care

00:25:17,519 --> 00:25:22,019
about is that in every Rosco miss that

00:25:19,860 --> 00:25:23,070
interface with these protocols do you

00:25:22,019 --> 00:25:25,590
need to make sure that you actually

00:25:23,070 --> 00:25:30,149
write the 0 by yourself

00:25:25,590 --> 00:25:35,880
to this corner to this to this degree

00:25:30,149 --> 00:25:39,260
and I don't want to go much further to

00:25:35,880 --> 00:25:41,549
go I had a couple of interesting

00:25:39,260 --> 00:25:42,290
experiences with this code base but

00:25:41,549 --> 00:25:48,530
while holding the

00:25:42,290 --> 00:25:51,110
a base and I found that I found the lib

00:25:48,530 --> 00:25:54,650
dive computer code base very easy to

00:25:51,110 --> 00:25:58,400
read and Vevey idiomatic and easy to

00:25:54,650 --> 00:26:00,320
follow but the structure was definitely

00:25:58,400 --> 00:26:03,800
not something that I was used to as a

00:26:00,320 --> 00:26:05,990
West programmer especially in the sense

00:26:03,800 --> 00:26:09,550
that it included far more things as

00:26:05,990 --> 00:26:11,660
pointers while rust heavily relies on

00:26:09,550 --> 00:26:13,520
having special datatypes

00:26:11,660 --> 00:26:16,040
abstracted as values for example the

00:26:13,520 --> 00:26:19,160
cursor type to to implement the same

00:26:16,040 --> 00:26:21,110
kind of functionality so there's a huge

00:26:19,160 --> 00:26:22,790
difference in algorithm abstraction were

00:26:21,110 --> 00:26:24,530
in Alberta growth and implementations

00:26:22,790 --> 00:26:28,100
for example through using this cursor

00:26:24,530 --> 00:26:30,290
type rust have any favours indexing and

00:26:28,100 --> 00:26:32,690
si favors pointer calculations so my

00:26:30,290 --> 00:26:37,580
Rusco base is much index heavier than

00:26:32,690 --> 00:26:39,800
than the speaker base and I found it

00:26:37,580 --> 00:26:41,510
quite interesting that this Co base was

00:26:39,800 --> 00:26:43,930
much more on the side of using dynamic

00:26:41,510 --> 00:26:48,560
dispatch on the sea side well rust

00:26:43,930 --> 00:26:52,280
favours using generics and ending up

00:26:48,560 --> 00:26:54,490
with non dynamic dispatch a lot of

00:26:52,280 --> 00:26:54,490
places

00:26:54,800 --> 00:27:00,610
I also found a number of interesting

00:26:56,810 --> 00:27:03,980
problems while porting the library and

00:27:00,610 --> 00:27:06,290
the dive computer goes back to 2005 and

00:27:03,980 --> 00:27:08,690
has a number of optimizations so for

00:27:06,290 --> 00:27:10,970
example I find it very very hard to find

00:27:08,690 --> 00:27:12,860
out how would they actually read the log

00:27:10,970 --> 00:27:16,430
books until I figure that that they

00:27:12,860 --> 00:27:18,140
actually read the backwards and for my

00:27:16,430 --> 00:27:19,520
first implementation I would have just

00:27:18,140 --> 00:27:20,930
read them forwards the reason why

00:27:19,520 --> 00:27:23,750
they're reading it backwards is because

00:27:20,930 --> 00:27:27,530
this is used in in applications that

00:27:23,750 --> 00:27:29,390
read from these slow devices and reading

00:27:27,530 --> 00:27:31,400
backwards means you will pretty quickly

00:27:29,390 --> 00:27:33,290
find out if there is a dive that you

00:27:31,400 --> 00:27:35,750
have already sent with and then you can

00:27:33,290 --> 00:27:38,390
just stop the operation so all the

00:27:35,750 --> 00:27:40,490
iteration works backwards in time but

00:27:38,390 --> 00:27:42,680
that's really unintuitive if you

00:27:40,490 --> 00:27:44,810
actually just want to find out how the

00:27:42,680 --> 00:27:47,080
device works and want to make it build a

00:27:44,810 --> 00:27:52,480
bug the bug free implementation first

00:27:47,080 --> 00:27:52,480
and the

00:27:54,480 --> 00:28:02,460
so they and the library itself is very

00:27:58,350 --> 00:28:04,530
vast so for example just for this make

00:28:02,460 --> 00:28:07,200
of computer they support three different

00:28:04,530 --> 00:28:09,750
kinds of page models so different kinds

00:28:07,200 --> 00:28:13,470
of page sizes arrangements and whatever

00:28:09,750 --> 00:28:18,420
I'm pretty often if that's just a single

00:28:13,470 --> 00:28:20,910
just a small difference with with huge

00:28:18,420 --> 00:28:23,460
if-else conditions like if this is a

00:28:20,910 --> 00:28:24,810
computer of that kind do it like this if

00:28:23,460 --> 00:28:29,130
it's a computer of that can't do it like

00:28:24,810 --> 00:28:31,500
that I have a couple takeaways from this

00:28:29,130 --> 00:28:33,960
experience life computers really are

00:28:31,500 --> 00:28:37,530
stupid in the implementation if they

00:28:33,960 --> 00:28:39,060
kiss applied very thoroughly and focus

00:28:37,530 --> 00:28:39,450
on the right parts but some of what I

00:28:39,060 --> 00:28:42,480
found

00:28:39,450 --> 00:28:44,430
awesome was the users documentation of

00:28:42,480 --> 00:28:49,860
the whole thing that even documents that

00:28:44,430 --> 00:28:51,990
if this number only has two digits if

00:28:49,860 --> 00:28:56,940
it's 99 it might be higher and that's

00:28:51,990 --> 00:28:58,800
okay lingo is still the hardest thing

00:28:56,940 --> 00:29:00,960
that you need to learn before porting so

00:28:58,800 --> 00:29:02,730
for example knowing what a log book what

00:29:00,960 --> 00:29:05,400
the log book actually means and what

00:29:02,730 --> 00:29:08,910
that room is in the diverse term was

00:29:05,400 --> 00:29:14,940
what I learned by doing this or what a

00:29:08,910 --> 00:29:16,760
log entry is a good code base is cool to

00:29:14,940 --> 00:29:20,070
read upon but it's a mediocre

00:29:16,760 --> 00:29:23,700
architectural reference you can it's

00:29:20,070 --> 00:29:26,040
basically archaeology trying to figure

00:29:23,700 --> 00:29:28,320
out what kind of architecture this

00:29:26,040 --> 00:29:30,780
secret base is targeted to and I'm not

00:29:28,320 --> 00:29:32,580
talking about machine architecture but

00:29:30,780 --> 00:29:35,010
actually the memory architecture of this

00:29:32,580 --> 00:29:36,780
device the whole thing would have been

00:29:35,010 --> 00:29:38,190
much easier if there was just the data

00:29:36,780 --> 00:29:43,890
sheet available that I could implement

00:29:38,190 --> 00:29:45,630
off and the page based model is actually

00:29:43,890 --> 00:29:49,850
at least alert on on a computer that

00:29:45,630 --> 00:29:54,810
maybe has literally has pages from 0 to

00:29:49,850 --> 00:29:58,860
512 and you can start moving through

00:29:54,810 --> 00:30:00,600
these and yeah them also if you had a

00:29:58,860 --> 00:30:04,050
look at the name of my life computer

00:30:00,600 --> 00:30:06,420
that it reports whoever at this vendor

00:30:04,050 --> 00:30:07,020
had the idea that null byte Lullaby it

00:30:06,420 --> 00:30:09,350
is

00:30:07,020 --> 00:30:11,280
an appropriate separator I don't know

00:30:09,350 --> 00:30:14,940
like to buy you a beer

00:30:11,280 --> 00:30:17,310
and yeah and I actually start working on

00:30:14,940 --> 00:30:19,800
the project because I got everything out

00:30:17,310 --> 00:30:23,310
of it that I was able to earn and enough

00:30:19,800 --> 00:30:26,400
inside there's no way I can see a port

00:30:23,310 --> 00:30:29,040
of the dive computer to rust as useful

00:30:26,400 --> 00:30:32,340
it's not in any way securely critical it

00:30:29,040 --> 00:30:35,910
has support for hundreds of computer

00:30:32,340 --> 00:30:36,930
models and I just have existed testing

00:30:35,910 --> 00:30:40,410
them and I don't want to have that

00:30:36,930 --> 00:30:41,880
access but having a look at it the

00:30:40,410 --> 00:30:44,280
iterative model is very easy to

00:30:41,880 --> 00:30:46,110
interface with using rust and then I

00:30:44,280 --> 00:30:47,760
make the dynamic dispatch model that it

00:30:46,110 --> 00:30:51,270
uses is very easy to interface with

00:30:47,760 --> 00:30:53,130
using rust and yeah I got my fun out of

00:30:51,270 --> 00:30:53,700
that part and so I'm going to scrap this

00:30:53,130 --> 00:30:55,830
codebase

00:30:53,700 --> 00:30:59,130
that's also why you can't find it online

00:30:55,830 --> 00:31:01,080
and next up I actually want to write a

00:30:59,130 --> 00:31:03,660
binding to the blog computer and then

00:31:01,080 --> 00:31:07,260
have a look at how these calculation

00:31:03,660 --> 00:31:09,150
algorithms actually work like how how

00:31:07,260 --> 00:31:11,640
much is the projected net and that you

00:31:09,150 --> 00:31:13,140
can saturation that you had like after

00:31:11,640 --> 00:31:15,420
five minutes of this divert something

00:31:13,140 --> 00:31:17,220
like that I don't know how to check this

00:31:15,420 --> 00:31:20,220
but just for fun and understanding how

00:31:17,220 --> 00:31:22,680
this works and as my final conclusion

00:31:20,220 --> 00:31:24,390
it's quite nice to actually understand

00:31:22,680 --> 00:31:27,030
how the thing works that makes sure that

00:31:24,390 --> 00:31:38,700
you did you're going coming back up

00:31:27,030 --> 00:31:43,980
safely thank you thank you so much

00:31:38,700 --> 00:31:47,430
Florian it was interesting just very

00:31:43,980 --> 00:31:55,140
interesting questions I couldn't find

00:31:47,430 --> 00:31:58,260
any questions on metrics Orin soon one

00:31:55,140 --> 00:32:07,350
person where where do you go diving at

00:31:58,260 --> 00:32:10,080
in Berlin so I would not call it diving

00:32:07,350 --> 00:32:14,010
but basically any lake around the Lynn

00:32:10,080 --> 00:32:20,130
has dive site and they go down to up to

00:32:14,010 --> 00:32:22,890
10 meters but they say is a very good

00:32:20,130 --> 00:32:25,890
type server 1210 salat which I can

00:32:22,890 --> 00:32:28,830
highly recommend which regularly drive

00:32:25,890 --> 00:32:29,450
out of town and and can help you with

00:32:28,830 --> 00:32:34,110
that

00:32:29,450 --> 00:32:35,610
yeah also forgot to mention generic who

00:32:34,110 --> 00:32:36,720
is running the meetup here is my dining

00:32:35,610 --> 00:32:39,780
buddy whom I learned

00:32:36,720 --> 00:32:45,840
diving with so if anyone wants to go raw

00:32:39,780 --> 00:32:48,210
station diving please let us know we can

00:32:45,840 --> 00:32:51,420
have fun underwater get up maybe at some

00:32:48,210 --> 00:32:53,340
point or an underwater talk the nice the

00:32:51,420 --> 00:32:57,030
next thing about diving is that people

00:32:53,340 --> 00:32:59,010
don't talk and this is actually a huge

00:32:57,030 --> 00:33:00,600
diver so if you want to go diving with

00:32:59,010 --> 00:33:07,140
little toe boots but don't want to be

00:33:00,600 --> 00:33:11,100
insulted you can do that good and we got

00:33:07,140 --> 00:33:13,650
ya great excellent presentation nice

00:33:11,100 --> 00:33:20,400
presentation very informative good

00:33:13,650 --> 00:33:28,920
feedback no questions left nice okay

00:33:20,400 --> 00:33:33,360
thank you for your talk next up is rust

00:33:28,920 --> 00:33:37,050
in the browser from Maximilian yeah I'm

00:33:33,360 --> 00:33:39,150
not going to save lives today working a

00:33:37,050 --> 00:33:49,800
project that made my life a lot easier

00:33:39,150 --> 00:33:51,090
and that's what I want to share I don't

00:33:49,800 --> 00:33:53,970
know if you see this weird bubble here

00:33:51,090 --> 00:33:56,850
from zoom but I'm just gonna start all

00:33:53,970 --> 00:33:59,370
right rest in the browser and a few

00:33:56,850 --> 00:34:03,150
years ago this would probably be the

00:33:59,370 --> 00:34:05,100
headline if I can get it to work no you

00:34:03,150 --> 00:34:06,960
mad bro it's in there because it was

00:34:05,100 --> 00:34:10,200
really tough to get rest working in the

00:34:06,960 --> 00:34:10,500
browser but I was keen on trying it

00:34:10,200 --> 00:34:14,040
again

00:34:10,500 --> 00:34:16,020
because I had to use case so Who am I

00:34:14,040 --> 00:34:19,800
I've been a web developer for around

00:34:16,020 --> 00:34:21,240
seven years now working a few company is

00:34:19,800 --> 00:34:24,360
the lot of JavaScript

00:34:21,240 --> 00:34:27,389
I go by BNF on the internet you can see

00:34:24,360 --> 00:34:29,669
my website right there it's Alaska

00:34:27,389 --> 00:34:31,889
Berlin yeah and I got them to rest a few

00:34:29,669 --> 00:34:33,750
years back when there was a soul go over

00:34:31,889 --> 00:34:36,870
this rust thing for Lou Levitz

00:34:33,750 --> 00:34:39,510
going on because I found it intriguing

00:34:36,870 --> 00:34:46,770
to get the power of C without all the

00:34:39,510 --> 00:34:48,600
headache on this pointer magic the

00:34:46,770 --> 00:34:50,100
outline of this talk first why do I need

00:34:48,600 --> 00:34:52,110
rest in the browser is that really

00:34:50,100 --> 00:34:55,260
necessary a lot of people might say no

00:34:52,110 --> 00:34:59,460
no how did I do it what was good about

00:34:55,260 --> 00:35:03,540
it and what was not so good about it so

00:34:59,460 --> 00:35:07,200
yeah why do I need it I have a lot of

00:35:03,540 --> 00:35:10,730
stuff at home photos some movies music

00:35:07,200 --> 00:35:13,020
books documents papers YouTube stuff um

00:35:10,730 --> 00:35:15,420
and I have friends and family around the

00:35:13,020 --> 00:35:18,300
world that I want to share this with at

00:35:15,420 --> 00:35:20,640
the same time I have calendars have love

00:35:18,300 --> 00:35:22,860
meetings that I want to coordinate with

00:35:20,640 --> 00:35:27,840
people and I would like to not use

00:35:22,860 --> 00:35:29,760
Google Apple etc for storing them to not

00:35:27,840 --> 00:35:34,820
have them parse them for advertising or

00:35:29,760 --> 00:35:38,160
whatever basically because yeah I can so

00:35:34,820 --> 00:35:40,740
this is the setup alright I have my

00:35:38,160 --> 00:35:44,220
network attached storage here in my home

00:35:40,740 --> 00:35:46,230
I have a laptop and in phone that are in

00:35:44,220 --> 00:35:47,730
Germany and then at the other side of

00:35:46,230 --> 00:35:51,120
the world having a girlfriend

00:35:47,730 --> 00:35:53,550
where as a phone and a laptop in

00:35:51,120 --> 00:35:56,520
Singapore and she also wants to access

00:35:53,550 --> 00:35:58,770
the same a movie so my photos you can

00:35:56,520 --> 00:35:59,970
see this red line here there the idea is

00:35:58,770 --> 00:36:02,730
to connect them somehow

00:35:59,970 --> 00:36:07,680
to get her into my home in an easy way

00:36:02,730 --> 00:36:09,750
are there multiple ways to do this why a

00:36:07,680 --> 00:36:11,670
guard is the one that I chose so if

00:36:09,750 --> 00:36:17,610
you've not heard about why I got before

00:36:11,670 --> 00:36:20,460
this VPN technology so you could see a

00:36:17,610 --> 00:36:22,410
fast motor and secure VPN tunnel I got

00:36:20,460 --> 00:36:25,260
really fascinated by it because of rants

00:36:22,410 --> 00:36:27,360
inside the kernel it's only three to

00:36:25,260 --> 00:36:29,430
four thousand lines of code it's way way

00:36:27,360 --> 00:36:31,950
smaller than alternatives such as Open

00:36:29,430 --> 00:36:34,050
VPN it's very opinionated and it's very

00:36:31,950 --> 00:36:36,020
fast it's just it's really really nice

00:36:34,050 --> 00:36:39,570
go check it out it has rust userspace

00:36:36,020 --> 00:36:41,970
implementation as well loads of apps for

00:36:39,570 --> 00:36:43,650
other devices can highly recommend it

00:36:41,970 --> 00:36:46,940
and Jason Dolan for the guy who wrote it

00:36:43,650 --> 00:36:46,940
is he's really nice

00:36:47,220 --> 00:36:50,340
yeah so how do you use wire guard right

00:36:49,170 --> 00:36:53,130
if you want to connect all your devices

00:36:50,340 --> 00:36:55,170
each of these devices needs a key pair

00:36:53,130 --> 00:36:58,830
so you need to generate key pairs on the

00:36:55,170 --> 00:37:00,750
command line then if you have a server

00:36:58,830 --> 00:37:03,030
right everything runs through a single

00:37:00,750 --> 00:37:04,740
server and my setup you can have

00:37:03,030 --> 00:37:07,260
multiple servers but you need some place

00:37:04,740 --> 00:37:08,670
where these devices can go to and ask ok

00:37:07,260 --> 00:37:11,280
how do I get to the other device and

00:37:08,670 --> 00:37:12,960
this server needs to be updated with the

00:37:11,280 --> 00:37:15,810
keys so that it can coordinate the

00:37:12,960 --> 00:37:17,760
communication between all the devices so

00:37:15,810 --> 00:37:19,710
every time you want to add a device you

00:37:17,760 --> 00:37:21,420
need to update it on the server if you

00:37:19,710 --> 00:37:23,070
want to remove a device you need to know

00:37:21,420 --> 00:37:25,250
its public key then you need to go to

00:37:23,070 --> 00:37:28,980
the server and remove the public key

00:37:25,250 --> 00:37:31,650
yeah all in all it's quite difficult if

00:37:28,980 --> 00:37:34,800
you don't have tooling so how do I want

00:37:31,650 --> 00:37:36,840
it I want it to be easy to add new

00:37:34,800 --> 00:37:37,410
devices without copy and pasting keys

00:37:36,840 --> 00:37:39,390
around

00:37:37,410 --> 00:37:42,000
I want to immediately have to device

00:37:39,390 --> 00:37:43,470
active if I add it to the network and I

00:37:42,000 --> 00:37:45,420
want to easily maintain the network

00:37:43,470 --> 00:37:46,770
right if I do if I remove a device I

00:37:45,420 --> 00:37:50,520
want it to be offline immediately I

00:37:46,770 --> 00:37:52,230
don't want to SSH into my server go and

00:37:50,520 --> 00:37:55,560
look at some notes on how to do it

00:37:52,230 --> 00:37:58,760
properly I just want it to be done so I

00:37:55,560 --> 00:38:01,619
set out to do it during the quarantine

00:37:58,760 --> 00:38:03,930
I'm gonna give you a quick demo you can

00:38:01,619 --> 00:38:05,280
find it online if I'm going through it

00:38:03,930 --> 00:38:10,190
too fast so you just want to play around

00:38:05,280 --> 00:38:12,869
with it it's at HTTPS that dot network

00:38:10,190 --> 00:38:14,940
this is how it looks like alright

00:38:12,869 --> 00:38:17,880
there's documentation can check out the

00:38:14,940 --> 00:38:21,450
guitar but I basically have a server

00:38:17,880 --> 00:38:25,470
which I called the bot I find a pretty

00:38:21,450 --> 00:38:29,339
cool - a robot in the cloud and I can go

00:38:25,470 --> 00:38:32,700
here and you can add a new laptop laptop

00:38:29,339 --> 00:38:34,700
- all right let's give it an IP and

00:38:32,700 --> 00:38:38,099
select the network it's running Linux

00:38:34,700 --> 00:38:42,570
save that it's up here I can click

00:38:38,099 --> 00:38:47,250
downloads alright and I got the

00:38:42,570 --> 00:38:50,070
configuration so you got a public key

00:38:47,250 --> 00:38:51,930
some private key bunch of stuff that you

00:38:50,070 --> 00:38:54,780
don't really need to care about right

00:38:51,930 --> 00:38:56,760
now unless you want to use wagger but

00:38:54,780 --> 00:39:00,380
that's the whole idea so you get this

00:38:56,760 --> 00:39:00,380
configuration from the website

00:39:00,500 --> 00:39:04,940
and everything is applied automatically

00:39:02,000 --> 00:39:08,270
to this server and now I'm going to show

00:39:04,940 --> 00:39:11,540
you how I did that and yeah that's where

00:39:08,270 --> 00:39:15,470
rust comes into play so when he just

00:39:11,540 --> 00:39:18,380
sauced the interface here at the top

00:39:15,470 --> 00:39:20,450
left right I have a server I have a few

00:39:18,380 --> 00:39:23,570
devices in that interface then I have a

00:39:20,450 --> 00:39:25,130
store which is if you have familiar with

00:39:23,570 --> 00:39:28,340
front-end development that's where all

00:39:25,130 --> 00:39:29,750
the data gets stored right so you can

00:39:28,340 --> 00:39:35,750
have reactive components throughout your

00:39:29,750 --> 00:39:38,330
website and an API service talks the VIP

00:39:35,750 --> 00:39:40,550
word here and that this down here is on

00:39:38,330 --> 00:39:42,740
the bottom right it's my internal

00:39:40,550 --> 00:39:44,900
network where I now want to add a new

00:39:42,740 --> 00:39:48,530
letter so what I just did is I touched

00:39:44,900 --> 00:39:50,030
this devices form on the website and I

00:39:48,530 --> 00:39:51,650
added the new laptop so keep that in

00:39:50,030 --> 00:39:54,770
mind that at the bottom left is the new

00:39:51,650 --> 00:39:59,210
left net palpable the new laptop that

00:39:54,770 --> 00:40:03,160
I'm adding to the network once I add

00:39:59,210 --> 00:40:05,810
device it goes into the store the store

00:40:03,160 --> 00:40:08,810
knows that something changed it's

00:40:05,810 --> 00:40:12,320
calling the API service the API then

00:40:08,810 --> 00:40:19,400
talks this vid bot alright a port 3000

00:40:12,320 --> 00:40:24,230
which is a REST API written in wort once

00:40:19,400 --> 00:40:29,870
it receives the payload it has to update

00:40:24,230 --> 00:40:34,250
the configuration on the server when the

00:40:29,870 --> 00:40:35,960
configuration gets updated systemd if

00:40:34,250 --> 00:40:40,520
you're familiar with Linux the standards

00:40:35,960 --> 00:40:43,550
or the processes needs to restart the

00:40:40,520 --> 00:40:46,460
wire guard interface how does it do that

00:40:43,550 --> 00:40:48,680
so what I used is I notified it looks at

00:40:46,460 --> 00:40:50,810
the file system and says ok this fire

00:40:48,680 --> 00:40:54,740
changed please do something

00:40:50,810 --> 00:40:56,990
so in this case the WG 0 configuration

00:40:54,740 --> 00:41:00,080
which is the wire got configuration set

00:40:56,990 --> 00:41:04,430
change system the restarts the wire got

00:41:00,080 --> 00:41:08,120
process why a guard picks up the change

00:41:04,430 --> 00:41:08,720
at the W g0 interface and the new laptop

00:41:08,120 --> 00:41:11,780
is added

00:41:08,720 --> 00:41:13,400
so there's a lot of stuff right it's a

00:41:11,780 --> 00:41:14,080
if you're not familiar if this is

00:41:13,400 --> 00:41:17,290
probably

00:41:14,080 --> 00:41:19,900
what is going on the WG zero thing at

00:41:17,290 --> 00:41:22,750
the bottom next the ithi h zero it's an

00:41:19,900 --> 00:41:24,550
interface so your computer things it's

00:41:22,750 --> 00:41:27,640
just another network interface it

00:41:24,550 --> 00:41:29,440
doesn't know that anything VPN e is

00:41:27,640 --> 00:41:31,810
running it just things okay so network

00:41:29,440 --> 00:41:40,120
interface and it's the nice thing about

00:41:31,810 --> 00:41:42,250
wire guard also this allows you to use

00:41:40,120 --> 00:41:44,080
all the existing tooling that is inside

00:41:42,250 --> 00:41:46,150
of Linux that's why I'm able to use I

00:41:44,080 --> 00:41:47,770
notify system de and I don't have to

00:41:46,150 --> 00:41:49,960
build all of this stuff all I have to

00:41:47,770 --> 00:41:51,550
really build is the API service and a

00:41:49,960 --> 00:41:53,290
connection between the interface and the

00:41:51,550 --> 00:41:55,690
web board and this is where stuff gets

00:41:53,290 --> 00:41:57,400
tricky I there are a few problems so the

00:41:55,690 --> 00:42:00,340
first problem is that all the

00:41:57,400 --> 00:42:01,930
configurations need curve 255 f19

00:42:00,340 --> 00:42:03,760
cryptographic keys it's a specific

00:42:01,930 --> 00:42:06,430
mathematical curve for generating

00:42:03,760 --> 00:42:08,020
cryptographic keys and I need those

00:42:06,430 --> 00:42:10,420
Hawaiian guard so I need to create them

00:42:08,020 --> 00:42:12,190
in the browser second of all the app

00:42:10,420 --> 00:42:14,140
needs to be unique to the browser I

00:42:12,190 --> 00:42:18,070
don't want someone to go in and change

00:42:14,140 --> 00:42:20,230
my server configuration I need to update

00:42:18,070 --> 00:42:22,330
the server when and reload the interface

00:42:20,230 --> 00:42:24,070
whenever anything changes which is what

00:42:22,330 --> 00:42:26,590
you just saw with the system D and I

00:42:24,070 --> 00:42:28,270
notify and to be honest I don't want to

00:42:26,590 --> 00:42:30,820
do security in JavaScript I'm not having

00:42:28,270 --> 00:42:32,650
types even Luis type squared it's just I

00:42:30,820 --> 00:42:34,030
didn't want to do it I didn't even start

00:42:32,650 --> 00:42:35,650
I was like ok this is not going to

00:42:34,030 --> 00:42:37,330
happen I'm going to look into rest and

00:42:35,650 --> 00:42:42,610
if rest can't do it then I'm not gonna

00:42:37,330 --> 00:42:45,000
fit this project so how did I do it my

00:42:42,610 --> 00:42:51,340
solution is to use rest on both sides I

00:42:45,000 --> 00:42:53,140
can rely on existing libraries I have

00:42:51,340 --> 00:42:55,450
the same libraries in the front end and

00:42:53,140 --> 00:42:57,550
the back end which is nice because I

00:42:55,450 --> 00:42:59,670
only have to read documentation once and

00:42:57,550 --> 00:43:03,160
I can ensure that they stay up to date

00:42:59,670 --> 00:43:06,670
and are compatible with each other and I

00:43:03,160 --> 00:43:08,680
encrypt all communication between the

00:43:06,670 --> 00:43:12,850
browser and the bot with a browser

00:43:08,680 --> 00:43:15,250
unique key pair so libraries that are

00:43:12,850 --> 00:43:17,470
used system-wide libraries so that means

00:43:15,250 --> 00:43:21,550
they run on the front end and on the

00:43:17,470 --> 00:43:23,560
back end are the cryptography libraries

00:43:21,550 --> 00:43:26,350
from dalek we can find them here which

00:43:23,560 --> 00:43:27,460
is 255 f19 which is generating that

00:43:26,350 --> 00:43:29,860
curve

00:43:27,460 --> 00:43:33,310
and then I use another one called edy

00:43:29,860 --> 00:43:38,200
255 1 9 which is helping me to generate

00:43:33,310 --> 00:43:41,800
signatures which are then used to sign

00:43:38,200 --> 00:43:43,510
the payload for the backend but I go

00:43:41,800 --> 00:43:45,640
into that a little bit and then I use 30

00:43:43,510 --> 00:43:47,590
which is awesome it's serialization done

00:43:45,640 --> 00:43:48,990
right and I guess that's how I can

00:43:47,590 --> 00:43:51,130
describe it

00:43:48,990 --> 00:43:53,860
here's the third part which is the

00:43:51,130 --> 00:43:54,370
backends only going gonna go into it

00:43:53,860 --> 00:43:57,220
shortly

00:43:54,370 --> 00:44:00,520
it's instantiated with the browsers like

00:43:57,220 --> 00:44:04,480
the public key that is running in the

00:44:00,520 --> 00:44:07,360
applications in the browser so that

00:44:04,480 --> 00:44:09,370
means that you have to set up the

00:44:07,360 --> 00:44:10,840
interface first how do you set it up you

00:44:09,370 --> 00:44:12,430
basically visit the web site it's done

00:44:10,840 --> 00:44:14,620
in the background but then you get a

00:44:12,430 --> 00:44:16,450
public key you start your server with

00:44:14,620 --> 00:44:18,460
this public key and then the robot is

00:44:16,450 --> 00:44:20,470
able to verify that your browser is the

00:44:18,460 --> 00:44:22,000
one sending the payload right there's

00:44:20,470 --> 00:44:24,400
signature it can verify it with the

00:44:22,000 --> 00:44:26,650
public key and we don't need user

00:44:24,400 --> 00:44:29,620
accounts and all that stuff I'm using

00:44:26,650 --> 00:44:32,580
warp for the API I mentioned this it's

00:44:29,620 --> 00:44:36,700
awesome if you've read the Twitter paper

00:44:32,580 --> 00:44:39,310
servers function this is pretty much an

00:44:36,700 --> 00:44:41,230
implementation of that I feel like if

00:44:39,310 --> 00:44:43,060
you haven't read it go read it I can

00:44:41,230 --> 00:44:44,710
highly recommend it and check out work

00:44:43,060 --> 00:44:45,940
once you wrap your head around it it

00:44:44,710 --> 00:44:48,700
will make a lot of things easier

00:44:45,940 --> 00:44:52,030
especially course so cross-origin

00:44:48,700 --> 00:44:54,940
requests stuff gets a lot easier you can

00:44:52,030 --> 00:44:57,300
just plug a filter in there then systemd

00:44:54,940 --> 00:44:59,650
for the process management and

00:44:57,300 --> 00:45:01,360
restarting the interface and I notified

00:44:59,650 --> 00:45:04,840
towards to pick up any changes on the

00:45:01,360 --> 00:45:07,000
file system and here's what I actually

00:45:04,840 --> 00:45:09,820
want to talk about now the interface

00:45:07,000 --> 00:45:12,670
libraries so how do you get rest in the

00:45:09,820 --> 00:45:14,170
browser it sounds like a nice language

00:45:12,670 --> 00:45:15,130
to have from the browser because of the

00:45:14,170 --> 00:45:19,600
types the

00:45:15,130 --> 00:45:21,310
compiler the libraries but yeah the

00:45:19,600 --> 00:45:23,230
browser usually runs JavaScript so how

00:45:21,310 --> 00:45:25,840
do you do it

00:45:23,230 --> 00:45:29,590
there is webassembly as a lot of people

00:45:25,840 --> 00:45:32,980
probably aware and there's a lot of

00:45:29,590 --> 00:45:36,220
really nice tool in available and the

00:45:32,980 --> 00:45:38,110
first of those is wasn't bind gen all

00:45:36,220 --> 00:45:40,590
right all of these by the way are in

00:45:38,110 --> 00:45:41,910
github the constellation rust wasn't

00:45:40,590 --> 00:45:43,170
you can find all these libraries in

00:45:41,910 --> 00:45:46,560
there and there's a pretty good

00:45:43,170 --> 00:45:49,590
documentation and so what this wasn't

00:45:46,560 --> 00:45:51,780
Byington do it automatically generates

00:45:49,590 --> 00:45:53,490
the bindings between rest and JavaScript

00:45:51,780 --> 00:45:55,260
for you so if you look at these two

00:45:53,490 --> 00:45:56,880
examples I have this generate key pair

00:45:55,260 --> 00:45:59,340
function and rest that takes no

00:45:56,880 --> 00:46:00,690
arguments but returns a string and then

00:45:59,340 --> 00:46:04,740
I entertain ated with this wasn't

00:46:00,690 --> 00:46:06,570
binding and this helps me to talk

00:46:04,740 --> 00:46:08,010
between rest and JavaScript and I don't

00:46:06,570 --> 00:46:10,320
have to do anything so write in

00:46:08,010 --> 00:46:13,140
JavaScript you just pass in nothing you

00:46:10,320 --> 00:46:15,270
just call the function and then rest

00:46:13,140 --> 00:46:16,770
return something and the bindings say

00:46:15,270 --> 00:46:18,540
okay we're on the heap

00:46:16,770 --> 00:46:20,280
all right this stuff gets saved on heap

00:46:18,540 --> 00:46:22,080
and we're on the heap can I find this

00:46:20,280 --> 00:46:23,520
where in memory do I get the string and

00:46:22,080 --> 00:46:25,800
then JavaScript can use that to read it

00:46:23,520 --> 00:46:26,850
back out and all of that done is done in

00:46:25,800 --> 00:46:28,290
the background so you don't have to

00:46:26,850 --> 00:46:30,360
worry about it the same works if you

00:46:28,290 --> 00:46:33,180
passed in strings so at the bottom you

00:46:30,360 --> 00:46:34,950
have sign message right which signs the

00:46:33,180 --> 00:46:36,360
payload it has a key pair and the

00:46:34,950 --> 00:46:42,120
message and then returns to the

00:46:36,360 --> 00:46:43,290
signature but you also have to get it

00:46:42,120 --> 00:46:45,000
running in the browser right just

00:46:43,290 --> 00:46:47,010
generating the bindings will help you

00:46:45,000 --> 00:46:49,020
you still have just wasn't module and

00:46:47,010 --> 00:46:53,280
some JavaScript how do you get in the

00:46:49,020 --> 00:46:56,160
browser so wasn't pack it can generate

00:46:53,280 --> 00:46:57,840
publishable webassembly packages for you

00:46:56,160 --> 00:46:59,700
automatically and I'm just going to show

00:46:57,840 --> 00:47:02,820
you a small video I hope this works

00:46:59,700 --> 00:47:05,700
so you're on wasn't pack it builds a

00:47:02,820 --> 00:47:10,980
that's it I mean it's all there head

00:47:05,700 --> 00:47:12,660
it's just awesome so what that also

00:47:10,980 --> 00:47:14,940
means is that it since it's NPM

00:47:12,660 --> 00:47:16,770
publishable you can just hook it into

00:47:14,940 --> 00:47:19,830
your existing bill type lines so if you

00:47:16,770 --> 00:47:26,130
know how to use webpack this becomes a

00:47:19,830 --> 00:47:30,330
breeze lastly there is console error

00:47:26,130 --> 00:47:32,040
Penacook okay tooling is great you got a

00:47:30,330 --> 00:47:35,490
running in the browser but you're still

00:47:32,040 --> 00:47:37,320
gonna make mistakes right the compiler

00:47:35,490 --> 00:47:41,370
is gonna catch a lot of them but not all

00:47:37,320 --> 00:47:45,060
of them and errors do happen and if they

00:47:41,370 --> 00:47:46,710
happen if you don't use this library you

00:47:45,060 --> 00:47:48,390
gotta pull your hair out all right so

00:47:46,710 --> 00:47:50,820
this really really really helps with

00:47:48,390 --> 00:47:52,590
debugging or even figuring out what's

00:47:50,820 --> 00:47:53,550
wrong in the first place or where

00:47:52,590 --> 00:47:56,640
something is going

00:47:53,550 --> 00:47:59,220
so let's say I have an error in my code

00:47:56,640 --> 00:48:01,800
I got a panic and I don't use console

00:47:59,220 --> 00:48:04,040
era of panic oh great name by the way I

00:48:01,800 --> 00:48:07,350
just get runtime error unreachable

00:48:04,040 --> 00:48:08,970
executed I catch this error I'm a

00:48:07,350 --> 00:48:10,590
JavaScript so at the bottom I get what

00:48:08,970 --> 00:48:14,010
assembly key generation is going wrong

00:48:10,590 --> 00:48:18,300
but I don't really know where the error

00:48:14,010 --> 00:48:21,320
happens so I googled this happened to me

00:48:18,300 --> 00:48:23,490
right so then I started googling

00:48:21,320 --> 00:48:25,200
should've read the documentation better

00:48:23,490 --> 00:48:28,650
in the first place but anyway I came

00:48:25,200 --> 00:48:32,870
across library initialized it and there

00:48:28,650 --> 00:48:37,200
we go now I get panicked a test in

00:48:32,870 --> 00:48:38,550
sourced little RS on line 40 I can go in

00:48:37,200 --> 00:48:39,960
there I can check it out what's wrong

00:48:38,550 --> 00:48:45,030
fix the error

00:48:39,960 --> 00:48:46,860
and life is easy again so those were the

00:48:45,030 --> 00:48:48,390
most important interface library so it

00:48:46,860 --> 00:48:50,250
wasn't binded and to generate the

00:48:48,390 --> 00:48:51,630
bindings between Ross and JavaScript so

00:48:50,250 --> 00:48:54,600
you don't have to know about the memory

00:48:51,630 --> 00:48:57,240
layout wasn't packed to get everything

00:48:54,600 --> 00:49:00,380
into the browser console era panic hook

00:48:57,240 --> 00:49:02,760
to make development nice and easy and

00:49:00,380 --> 00:49:04,530
help out whatever's to occur and

00:49:02,760 --> 00:49:09,570
everything can be found in the rust

00:49:04,530 --> 00:49:13,170
wasn't organizational guitar so pros and

00:49:09,570 --> 00:49:16,050
cons I already mentioned this but if you

00:49:13,170 --> 00:49:17,640
know your way around web pack wasn't

00:49:16,050 --> 00:49:21,000
picked makes integration a breeze it

00:49:17,640 --> 00:49:24,300
takes what 5 to 10 minutes to get the

00:49:21,000 --> 00:49:26,760
surrounding it's I was blown away I did

00:49:24,300 --> 00:49:29,940
nothing would be that easy testing is

00:49:26,760 --> 00:49:33,900
included as well so you can write unit

00:49:29,940 --> 00:49:36,780
tests for your weapon sembly stuff cargo

00:49:33,900 --> 00:49:38,280
feature flags are just amazing I mean I

00:49:36,780 --> 00:49:43,740
didn't know about that I didn't have any

00:49:38,280 --> 00:49:45,510
use case I wrote a few small things for

00:49:43,740 --> 00:49:48,780
the command line and rest but I never

00:49:45,510 --> 00:49:50,160
really used feature flags but here I'm

00:49:48,780 --> 00:49:52,230
going to come there in a second they

00:49:50,160 --> 00:49:54,480
were really really really helpful nd the

00:49:52,230 --> 00:49:56,250
documentation and rust is just I mean

00:49:54,480 --> 00:49:57,540
doc start RS and clicking your way

00:49:56,250 --> 00:50:00,750
around when you have to read about

00:49:57,540 --> 00:50:01,580
cryptographic signatures I mean that was

00:50:00,750 --> 00:50:05,820
awesome

00:50:01,580 --> 00:50:06,960
yeah pecans they are still some cons it

00:50:05,820 --> 00:50:10,440
is the the abundance

00:50:06,960 --> 00:50:15,150
why Pig so I think it's 600 kilobyte in

00:50:10,440 --> 00:50:16,770
my case which doesn't matter because I

00:50:15,150 --> 00:50:18,240
only download the application once and

00:50:16,770 --> 00:50:20,910
it runs my browser it's a single page

00:50:18,240 --> 00:50:21,750
app the the rest of the application is I

00:50:20,910 --> 00:50:23,819
don't know three and a kilobyte

00:50:21,750 --> 00:50:26,910
solenoids still less than a megabyte

00:50:23,819 --> 00:50:30,839
but the bundle size really like takes a

00:50:26,910 --> 00:50:32,579
lot of that there are ways around this

00:50:30,839 --> 00:50:36,000
you can use different memory memory

00:50:32,579 --> 00:50:38,900
allocators but they don't work with all

00:50:36,000 --> 00:50:41,579
libraries so in my case with this

00:50:38,900 --> 00:50:45,109
cryptographic stuff going on I was not

00:50:41,579 --> 00:50:47,130
able to use the the reallocator easily I

00:50:45,109 --> 00:50:48,930
also haven't figured out how to

00:50:47,130 --> 00:50:50,730
conditionally load the console error

00:50:48,930 --> 00:50:52,470
Penacook so what I have to do right now

00:50:50,730 --> 00:50:54,869
is while I'm in development I call this

00:50:52,470 --> 00:50:56,280
function globally so it's enabled and

00:50:54,869 --> 00:51:00,200
when a panic occurs

00:50:56,280 --> 00:51:03,119
I get the nice message in the console

00:51:00,200 --> 00:51:05,569
but when I want to push it out into

00:51:03,119 --> 00:51:07,650
production I have to move this manually

00:51:05,569 --> 00:51:09,270
there's probably a way around this if

00:51:07,650 --> 00:51:13,410
anybody knows so really appreciate some

00:51:09,270 --> 00:51:16,290
help on the repository otherwise I keep

00:51:13,410 --> 00:51:17,760
reading until I find it other cons if

00:51:16,290 --> 00:51:21,059
you use wrestling browser you don't have

00:51:17,760 --> 00:51:22,710
frets and this is where the feature flex

00:51:21,059 --> 00:51:25,020
really come in handy so a lot of

00:51:22,710 --> 00:51:27,630
libraries I don't know how not a lot I

00:51:25,020 --> 00:51:29,970
don't know this but the ones that I used

00:51:27,630 --> 00:51:32,099
have feature flex with disabling Fred

00:51:29,970 --> 00:51:35,790
support as you can run everything on the

00:51:32,099 --> 00:51:37,530
singer Fred it's really helpful you just

00:51:35,790 --> 00:51:39,839
have to be aware of it that if your

00:51:37,530 --> 00:51:41,130
library only works multi-threaded you

00:51:39,839 --> 00:51:44,849
will not be able to use it in the

00:51:41,130 --> 00:51:46,890
browser besides that there's only 32-bit

00:51:44,849 --> 00:51:48,900
support at the moment if you check out

00:51:46,890 --> 00:51:51,420
this link here webassembly future

00:51:48,900 --> 00:51:54,809
features there will be linear memory

00:51:51,420 --> 00:52:02,880
bigger than 4 gigabytes in the future

00:51:54,809 --> 00:52:05,549
but it isn't there yet there is one more

00:52:02,880 --> 00:52:07,500
thing that I checked so let's go to

00:52:05,549 --> 00:52:11,190
wasn't binding I just checked this

00:52:07,500 --> 00:52:13,200
earlier and I'm sure people might be

00:52:11,190 --> 00:52:14,640
interested in this you can't only do

00:52:13,200 --> 00:52:16,380
strings right there are other things you

00:52:14,640 --> 00:52:19,140
can put an array which are going to be

00:52:16,380 --> 00:52:20,760
boxes all right so they're going to go

00:52:19,140 --> 00:52:24,120
onto the heap and then you

00:52:20,760 --> 00:52:28,520
can store integers for example of floats

00:52:24,120 --> 00:52:31,170
I saw that it's possible to get 64-bit

00:52:28,520 --> 00:52:33,770
integers there and I'm not sure how this

00:52:31,170 --> 00:52:37,920
relates to my last point here about the

00:52:33,770 --> 00:52:41,310
32-bit only somebody knows and I'd be

00:52:37,920 --> 00:52:47,070
happy to learn all in all I can say it

00:52:41,310 --> 00:52:49,380
was really amazing to use rust here and

00:52:47,070 --> 00:52:51,360
I was blown away by it took me two days

00:52:49,380 --> 00:52:52,710
to get rest completely set up and

00:52:51,360 --> 00:52:55,920
understand how everything works and

00:52:52,710 --> 00:52:57,360
write the encryption which was I mean

00:52:55,920 --> 00:53:00,570
it's a very short time for me and one

00:52:57,360 --> 00:53:01,830
expert on this in any way so I can

00:53:00,570 --> 00:53:04,230
highly recommend it if you have any

00:53:01,830 --> 00:53:04,650
project where let's go to the process

00:53:04,230 --> 00:53:07,050
better

00:53:04,650 --> 00:53:09,750
I have any project where you want to use

00:53:07,050 --> 00:53:11,640
western browser I think it's there now

00:53:09,750 --> 00:53:13,620
you can start doing it even if it's

00:53:11,640 --> 00:53:17,460
image manipulation or video manipulation

00:53:13,620 --> 00:53:20,370
audio manipulation by using the boxes

00:53:17,460 --> 00:53:22,710
and might still be a bit slow I don't

00:53:20,370 --> 00:53:24,900
know how fast this is and benchmarked it

00:53:22,710 --> 00:53:27,600
but it's definitely possible now and

00:53:24,900 --> 00:53:28,590
it's surely faster than JavaScript if

00:53:27,600 --> 00:53:30,930
you would like to find out more

00:53:28,590 --> 00:53:34,280
everything I did this open source is a

00:53:30,930 --> 00:53:38,090
GPL 3.0 there's a whole front end code

00:53:34,280 --> 00:53:40,430
third part all the tooling around it

00:53:38,090 --> 00:53:43,050
documentation for users and developers

00:53:40,430 --> 00:53:45,420
you can use the thing advert the network

00:53:43,050 --> 00:53:47,310
with your own VPN have wire guard

00:53:45,420 --> 00:53:52,260
running and get your own super high

00:53:47,310 --> 00:53:54,660
speed VPN if you just want to use rust

00:53:52,260 --> 00:53:56,430
in webassembly check our bus was and

00:53:54,660 --> 00:53:59,910
read the documentation use it it's

00:53:56,430 --> 00:54:01,410
amazing yeah if you have questions that

00:53:59,910 --> 00:54:04,230
we can't answer now you can reach me at

00:54:01,410 --> 00:54:10,820
max at a list of Berlin or on Twitter at

00:54:04,230 --> 00:54:10,820
PMF underscore Max and that's it

00:54:15,700 --> 00:54:26,420
hey thank you so much for this amazing

00:54:18,500 --> 00:54:29,210
talk very very insightful so we have one

00:54:26,420 --> 00:54:34,220
or two questions I start with a matrix

00:54:29,210 --> 00:54:36,460
chat and one person asks can you use web

00:54:34,220 --> 00:54:41,070
workers

00:54:36,460 --> 00:54:45,370
I have no idea didn't come across it

00:54:41,070 --> 00:54:48,550
okay next question is what happens to

00:54:45,370 --> 00:54:51,880
ongoing ongoing media streaming while

00:54:48,550 --> 00:54:53,920
the bot server is restarting it's a

00:54:51,880 --> 00:54:55,600
bioenergy device edit yeah that's a good

00:54:53,920 --> 00:54:58,480
question this came up already on reddit

00:54:55,600 --> 00:55:00,190
I think it interrupts right there is

00:54:58,480 --> 00:55:04,330
this persistent keep your life in wire

00:55:00,190 --> 00:55:07,810
guard that's going to send packets to

00:55:04,330 --> 00:55:11,290
keep the connection alive this might

00:55:07,810 --> 00:55:12,790
kick in if your device is trying to

00:55:11,290 --> 00:55:14,530
reach the network again and might just

00:55:12,790 --> 00:55:16,210
pick up the connection all right it's

00:55:14,530 --> 00:55:18,820
going to buffer it's going to draw up a

00:55:16,210 --> 00:55:20,380
damage to reinitialize I haven't seen

00:55:18,820 --> 00:55:21,820
any problems with it but people on

00:55:20,380 --> 00:55:23,620
reddit already said there's probably

00:55:21,820 --> 00:55:25,510
better to not restart the interface but

00:55:23,620 --> 00:55:25,900
you know keep all the collections alive

00:55:25,510 --> 00:55:28,450
somehow

00:55:25,900 --> 00:55:30,820
it's what's beyond me and it was beyond

00:55:28,450 --> 00:55:32,680
what I built this for anybody has a

00:55:30,820 --> 00:55:36,960
technical capabilities I'd love some

00:55:32,680 --> 00:55:39,610
help thank you

00:55:36,960 --> 00:55:45,210
two more questions why did it take so

00:55:39,610 --> 00:55:49,980
long to set up in the beginning this was

00:55:45,210 --> 00:55:53,020
mostly reading and about the libraries I

00:55:49,980 --> 00:55:55,900
had the the set up getting it I use a

00:55:53,020 --> 00:55:58,950
very specific front and build which is

00:55:55,900 --> 00:56:01,510
the view CRI so I had to figure that out

00:55:58,950 --> 00:56:03,400
and I don't work eight hours a day on

00:56:01,510 --> 00:56:05,470
this right so it took two days off I

00:56:03,400 --> 00:56:07,180
don't know however long I worked on it I

00:56:05,470 --> 00:56:09,400
had to integrate it with my existing

00:56:07,180 --> 00:56:11,290
tools and then I had to read both the

00:56:09,400 --> 00:56:14,680
libraries had to figure out feature

00:56:11,290 --> 00:56:19,110
flags and that there are no frets 32-bit

00:56:14,680 --> 00:56:22,270
support so that was the biggest issue

00:56:19,110 --> 00:56:25,960
okay let's combine the last two

00:56:22,270 --> 00:56:27,580
questions can you say yes can you say

00:56:25,960 --> 00:56:29,460
something more about LARP

00:56:27,580 --> 00:56:33,250
and did you have the chance to work with

00:56:29,460 --> 00:56:37,690
with with futures and how was the

00:56:33,250 --> 00:56:42,880
experience yeah you should only with

00:56:37,690 --> 00:56:46,000
wait a single wait so warp I think

00:56:42,880 --> 00:56:47,710
Bastion also used it I think you wrote a

00:56:46,000 --> 00:56:49,720
blog article about it maybe it's better

00:56:47,710 --> 00:56:50,170
to check it out it's it's really nice

00:56:49,720 --> 00:56:51,430
once

00:56:50,170 --> 00:56:56,860
wrap your head around it but that can

00:56:51,430 --> 00:56:59,140
take a while right so it took me I can't

00:56:56,860 --> 00:57:00,910
give you a time frame to me maybe a day

00:56:59,140 --> 00:57:02,850
to really understand what the filters

00:57:00,910 --> 00:57:05,050
and the services do but once you get

00:57:02,850 --> 00:57:07,030
once you get it in your head you can

00:57:05,050 --> 00:57:09,310
like combine all these features together

00:57:07,030 --> 00:57:11,470
and it becomes really easy to extend

00:57:09,310 --> 00:57:13,570
your existing API endpoints or group

00:57:11,470 --> 00:57:16,270
them together and for example like

00:57:13,570 --> 00:57:20,140
cross-origin request stuff just put it

00:57:16,270 --> 00:57:23,140
on all your endpoints in one line there

00:57:20,140 --> 00:57:24,670
were some issues I had with the types so

00:57:23,140 --> 00:57:27,540
I wanted to extract a filter at one

00:57:24,670 --> 00:57:30,730
point and it became a bit complicated

00:57:27,540 --> 00:57:32,350
but once you get there you know what I'm

00:57:30,730 --> 00:57:36,670
talking about it's it's too difficult to

00:57:32,350 --> 00:57:40,120
just say from head right now yeah but it

00:57:36,670 --> 00:57:41,950
was definitely on my experience to like

00:57:40,120 --> 00:57:44,740
the filters were really really weird in

00:57:41,950 --> 00:57:47,700
the beginning but then once it might

00:57:44,740 --> 00:57:52,900
click it just actually super helpful

00:57:47,700 --> 00:57:54,640
okay I think now or kiffin I don't know

00:57:52,900 --> 00:57:57,120
if I pronounce it right can take over

00:57:54,640 --> 00:57:57,120
the screen

00:58:03,099 --> 00:58:05,160
you

00:58:06,550 --> 00:58:08,610
you

00:58:10,910 --> 00:58:21,300
think you're muted now it should be okay

00:58:18,210 --> 00:58:24,540
yeah that mode works alright I'll try

00:58:21,300 --> 00:58:27,090
again rewind yeah hello my name is Kevin

00:58:24,540 --> 00:58:29,550
Gish and I'm currently giving this

00:58:27,090 --> 00:58:33,180
presentation from gluten and headlands

00:58:29,550 --> 00:58:36,150
which is near rotterdam and for small my

00:58:33,180 --> 00:58:39,090
appreciation for being allowed to give

00:58:36,150 --> 00:58:41,250
this presentation I've always found

00:58:39,090 --> 00:58:43,950
these meetups very interesting and I

00:58:41,250 --> 00:58:45,540
figured it was high time for me to to

00:58:43,950 --> 00:58:50,280
contribute back to the community

00:58:45,540 --> 00:58:52,920
community I was planning on giving a

00:58:50,280 --> 00:58:55,440
live coding session at first but I

00:58:52,920 --> 00:58:58,380
figured the slot of twenty minutes was a

00:58:55,440 --> 00:59:01,080
bit too limited for such complex and

00:58:58,380 --> 00:59:05,250
time-consuming material so I chose

00:59:01,080 --> 00:59:08,370
instead to give mostly sheets and I'll

00:59:05,250 --> 00:59:12,210
throw in a couple demos in there if time

00:59:08,370 --> 00:59:15,240
allows the yeah the title of my

00:59:12,210 --> 00:59:20,880
presentation is embedding rest in nodejs

00:59:15,240 --> 00:59:23,370
applications the agenda will be that

00:59:20,880 --> 00:59:27,450
I'll give you an introduction into rust

00:59:23,370 --> 00:59:31,980
and nodejs I'll move into telling you a

00:59:27,450 --> 00:59:35,600
bit about building a c.a.p in rust

00:59:31,980 --> 00:59:40,680
moving on to know chess which provides

00:59:35,600 --> 00:59:43,140
an API called mappy and API and then

00:59:40,680 --> 00:59:46,200
finally embedding rust and note using

00:59:43,140 --> 00:59:51,210
two libraries that I played around with

00:59:46,200 --> 00:59:54,960
one is a low-level unsafe library called

00:59:51,210 --> 00:59:58,200
no J assists and there's another fancier

00:59:54,960 --> 01:00:02,970
more popular one called neon which is a

00:59:58,200 --> 01:00:06,150
high level safe library the goal of this

01:00:02,970 --> 01:00:08,820
presentation I guess is tickle your

01:00:06,150 --> 01:00:15,030
fancy and hopefully encourage others to

01:00:08,820 --> 01:00:17,790
get more involved with rust the start so

01:00:15,030 --> 01:00:19,500
who am i introduce myself I was born and

01:00:17,790 --> 01:00:23,520
raised in sunny California

01:00:19,500 --> 01:00:26,340
I survived up to now nearly 40 years

01:00:23,520 --> 01:00:30,240
of hacking through my life I started way

01:00:26,340 --> 01:00:33,090
back with assembler a UNIX and C I was

01:00:30,240 --> 01:00:36,150
actually one of the rebels who decided

01:00:33,090 --> 01:00:38,550
that assembler didn't you didn't give me

01:00:36,150 --> 01:00:41,280
the stuff I need and I'm moving to C so

01:00:38,550 --> 01:00:46,050
I was considered a rebel and cast aside

01:00:41,280 --> 01:00:49,310
but I held in there eventually became I

01:00:46,050 --> 01:00:53,160
guess you call a full stack developer

01:00:49,310 --> 01:00:55,920
later on I got the rust itch and can't

01:00:53,160 --> 01:01:00,720
get enough and as you can see I'm also

01:00:55,920 --> 01:01:02,460
an avid golfer so everything I'm going

01:01:00,720 --> 01:01:05,910
to tell you on this presentation is

01:01:02,460 --> 01:01:08,700
available on my github I've created a

01:01:05,910 --> 01:01:11,040
repository called rust node add-on

01:01:08,700 --> 01:01:12,900
template and that's where you can find

01:01:11,040 --> 01:01:16,050
all the code samples all the

01:01:12,900 --> 01:01:20,540
nitty-gritty details and you can look

01:01:16,050 --> 01:01:24,810
through there and heart's delight so

01:01:20,540 --> 01:01:27,000
yeah why are we using rust well for the

01:01:24,810 --> 01:01:29,580
people that are not yet quite familiar

01:01:27,000 --> 01:01:31,890
rust I can explain the main

01:01:29,580 --> 01:01:36,720
characteristics which have appealed to

01:01:31,890 --> 01:01:39,720
me it's safe it's fast its concurrent

01:01:36,720 --> 01:01:45,900
and also very important is that there is

01:01:39,720 --> 01:01:51,030
no garbage collection why use it with

01:01:45,900 --> 01:01:53,730
with node the reason I chose the doing

01:01:51,030 --> 01:01:55,650
rust with node as I have a background in

01:01:53,730 --> 01:01:58,950
web development so one of the first

01:01:55,650 --> 01:02:04,530
things I really wanted to explore was

01:01:58,950 --> 01:02:08,100
how it interacts with nodejs and one of

01:02:04,530 --> 01:02:13,140
the benefits of using rust as far as I

01:02:08,100 --> 01:02:17,100
see is beyond the speed obviously it has

01:02:13,140 --> 01:02:20,780
a very strong interoperability with

01:02:17,100 --> 01:02:24,720
external libraries what they call FFI a

01:02:20,780 --> 01:02:28,950
little bit about that shortly

01:02:24,720 --> 01:02:31,740
there is no runtime overhead and it

01:02:28,950 --> 01:02:34,140
gives you a fairly predictable

01:02:31,740 --> 01:02:36,330
performance if you look at nodejs

01:02:34,140 --> 01:02:40,080
it has

01:02:36,330 --> 01:02:42,750
garbage collection so if you have like

01:02:40,080 --> 01:02:46,980
them in an embedded device running

01:02:42,750 --> 01:02:48,840
nodejs that has to do measurements every

01:02:46,980 --> 01:02:52,800
millisecond and send it out you

01:02:48,840 --> 01:02:55,290
definitely don't want to you know lose

01:02:52,800 --> 01:02:58,640
that if it's critical information and I

01:02:55,290 --> 01:03:05,250
think rust provides an interesting

01:02:58,640 --> 01:03:08,490
opportunity to improve that also yeah

01:03:05,250 --> 01:03:11,790
I'm really into these things is a

01:03:08,490 --> 01:03:13,470
Raspberry Pi but I really I'm interested

01:03:11,790 --> 01:03:16,290
in the low level access that it provides

01:03:13,470 --> 01:03:19,770
to hardware in terms of device drivers

01:03:16,290 --> 01:03:22,320
we've got a bit of case of that in the

01:03:19,770 --> 01:03:27,390
first presentation which got me all

01:03:22,320 --> 01:03:30,450
excited so FFI foreign function

01:03:27,390 --> 01:03:35,610
interface will cover that shortly as I

01:03:30,450 --> 01:03:40,940
said and the idea that I want to propose

01:03:35,610 --> 01:03:43,860
is that if you have an existing node.js

01:03:40,940 --> 01:03:47,880
application running somewhere either in

01:03:43,860 --> 01:03:50,520
a server environment or on a on a device

01:03:47,880 --> 01:03:52,680
you might want to look at the

01:03:50,520 --> 01:03:57,920
performance of the critical modules

01:03:52,680 --> 01:04:00,540
areas there causing problems and after I

01:03:57,920 --> 01:04:03,990
finish this presentation hopefully you

01:04:00,540 --> 01:04:07,020
understand a bit better of how you might

01:04:03,990 --> 01:04:09,600
take those critical modules and rewrite

01:04:07,020 --> 01:04:16,580
them and rust and provide that

01:04:09,600 --> 01:04:19,890
functionality as an add-on in nodejs ok

01:04:16,580 --> 01:04:22,310
let's start with FF I first I'm gonna

01:04:19,890 --> 01:04:22,310
get some water

01:04:22,760 --> 01:04:36,150
so FF I is a way for rust to be able to

01:04:31,200 --> 01:04:37,860
use external C modules as you can see on

01:04:36,150 --> 01:04:41,660
the top I'm not sure if you can see my

01:04:37,860 --> 01:04:45,780
mouse but extern C provides a

01:04:41,660 --> 01:04:48,210
declaration of an external function for

01:04:45,780 --> 01:04:48,410
simplicity here I realize this is a bit

01:04:48,210 --> 01:04:50,750
of

01:04:48,410 --> 01:04:52,640
contrived example but is purely for

01:04:50,750 --> 01:04:55,190
illustration purposes just to give you a

01:04:52,640 --> 01:04:57,380
bit of hint of what I'm trying to

01:04:55,190 --> 01:04:59,120
explain so we have an external see

01:04:57,380 --> 01:05:01,610
function it could be anything but in

01:04:59,120 --> 01:05:05,630
this in this we will using the square

01:05:01,610 --> 01:05:09,200
root function and we use this compiler

01:05:05,630 --> 01:05:12,230
directive in front of main called link

01:05:09,200 --> 01:05:14,600
and what it tells you is that when you

01:05:12,230 --> 01:05:19,130
do hot cargo run you want to link it

01:05:14,600 --> 01:05:22,370
with the EM directory which contains a

01:05:19,130 --> 01:05:25,670
square root function and then in main I

01:05:22,370 --> 01:05:30,980
have I define X as a floating floating

01:05:25,670 --> 01:05:33,610
points 64 and the results I call that

01:05:30,980 --> 01:05:37,780
function and I print out the result here

01:05:33,610 --> 01:05:42,050
now you always have to use unsafe

01:05:37,780 --> 01:05:46,970
because the rest compiler is unable to

01:05:42,050 --> 01:05:50,720
check calls to external languages so you

01:05:46,970 --> 01:05:57,830
are required to bracket them using the

01:05:50,720 --> 01:06:01,310
unsafe alright let's go one bit higher

01:05:57,830 --> 01:06:06,200
is let's assume that we want to use the

01:06:01,310 --> 01:06:09,800
lid and crate and we grab the square

01:06:06,200 --> 01:06:11,870
root there and we can use that crate and

01:06:09,800 --> 01:06:15,290
make a direct call to the square root

01:06:11,870 --> 01:06:19,220
function and as you see here there's no

01:06:15,290 --> 01:06:23,900
need to call safe in front of it which

01:06:19,220 --> 01:06:27,830
makes it a bit nicer and of course I

01:06:23,900 --> 01:06:31,670
know all you rust fans out there realize

01:06:27,830 --> 01:06:33,890
it's the best way to do it is just to

01:06:31,670 --> 01:06:36,710
use the primitive type F 64 which

01:06:33,890 --> 01:06:42,800
includes by definition a square root

01:06:36,710 --> 01:06:45,140
function which you can call directly if

01:06:42,800 --> 01:06:49,010
you're more interested in safe and

01:06:45,140 --> 01:06:53,300
unsafe I have to admit that I found that

01:06:49,010 --> 01:06:56,330
very difficult to understand I think

01:06:53,300 --> 01:06:59,120
next two lifetimes and borrowing it was

01:06:56,330 --> 01:07:01,540
the hardest thing for me to get my head

01:06:59,120 --> 01:07:05,200
around but you can

01:07:01,540 --> 01:07:08,980
look in reston eMCON which provides a

01:07:05,200 --> 01:07:11,800
nice explanation about it and you can

01:07:08,980 --> 01:07:16,390
also look in the log in the rest of book

01:07:11,800 --> 01:07:20,740
this just shows you the entry in here to

01:07:16,390 --> 01:07:24,310
see the safe and unsafe functions or in

01:07:20,740 --> 01:07:26,410
the book of course beautiful beautiful

01:07:24,310 --> 01:07:33,760
documentation I mean this is stuff you

01:07:26,410 --> 01:07:36,580
can really appreciate okay

01:07:33,760 --> 01:07:41,970
let's talk about now about rest inside

01:07:36,580 --> 01:07:46,180
of a seed project yes C C++ and

01:07:41,970 --> 01:07:49,650
basically I've taken this from the

01:07:46,180 --> 01:07:54,280
interoperability guide rust with C and

01:07:49,650 --> 01:07:56,650
you want to basically do two things you

01:07:54,280 --> 01:08:00,970
want to create a see friendly API and

01:07:56,650 --> 01:08:03,490
rust and then you have to embed the

01:08:00,970 --> 01:08:05,890
project in some kind of external build

01:08:03,490 --> 01:08:13,120
system the binding which will bind you

01:08:05,890 --> 01:08:16,049
to the sea and at the moment C is the

01:08:13,120 --> 01:08:20,140
only possibility so that's why you use

01:08:16,049 --> 01:08:22,600
extern see in your rest code to tell it

01:08:20,140 --> 01:08:29,350
that it's going to have to use an

01:08:22,600 --> 01:08:32,650
external c function and more information

01:08:29,350 --> 01:08:36,480
here again all these links that I'm

01:08:32,650 --> 01:08:39,010
showing you are provided in the github

01:08:36,480 --> 01:08:43,299
that I showed the beginning of this

01:08:39,010 --> 01:08:46,420
presentation okay so there are a couple

01:08:43,299 --> 01:08:49,750
things that you have to keep in mind

01:08:46,420 --> 01:08:53,950
when you're writing a C API one is the

01:08:49,750 --> 01:08:58,560
compiler directive no mango which

01:08:53,950 --> 01:09:01,240
prevents the rest compiler from mingling

01:08:58,560 --> 01:09:05,230
changing the name because if you want

01:09:01,240 --> 01:09:08,650
extern texture to make it interoperable

01:09:05,230 --> 01:09:12,120
and available externally it has to keep

01:09:08,650 --> 01:09:12,120
the same same name

01:09:13,290 --> 01:09:21,870
and of course extern see so as I showed

01:09:17,850 --> 01:09:25,170
in a previous contract example you use

01:09:21,870 --> 01:09:27,960
externally in your function declaration

01:09:25,170 --> 01:09:32,790
there's an example here so here you will

01:09:27,960 --> 01:09:40,800
see the gnome angle and you see an

01:09:32,790 --> 01:09:43,890
external C for the function okay now a

01:09:40,800 --> 01:09:49,050
bit of the nitty-gritty the notes AS

01:09:43,890 --> 01:09:51,660
provides an API called M happy

01:09:49,050 --> 01:09:55,350
pronounced and as in the letter followed

01:09:51,660 --> 01:10:00,180
by API Nabi and a P I'm still not sure

01:09:55,350 --> 01:10:05,520
what that means and what this API does

01:10:00,180 --> 01:10:10,200
is it allows you to bind directly into

01:10:05,520 --> 01:10:13,350
nodes yes which is a pretty neat I won't

01:10:10,200 --> 01:10:20,040
read all the text but you can go there

01:10:13,350 --> 01:10:23,940
and you see in the nodejs here a whole

01:10:20,040 --> 01:10:30,360
description of the API and what it does

01:10:23,940 --> 01:10:32,430
and yeah it's pretty complicated there's

01:10:30,360 --> 01:10:35,490
so much information that it's really

01:10:32,430 --> 01:10:38,550
hard to figure out what's really

01:10:35,490 --> 01:10:40,410
important what's not so hopefully the

01:10:38,550 --> 01:10:42,480
struggles that I went through will help

01:10:40,410 --> 01:10:45,350
someone in the future to be able to

01:10:42,480 --> 01:10:48,750
focus and dive into the important parts

01:10:45,350 --> 01:10:50,700
when you look at the entry into this

01:10:48,750 --> 01:11:00,530
documentation you see they're just

01:10:50,700 --> 01:11:00,530
zillions and zillions available hooks

01:11:02,920 --> 01:11:10,930
okay so then I started looking around

01:11:07,030 --> 01:11:13,570
the available crates I read actually a

01:11:10,930 --> 01:11:17,050
couple articles or videos where someone

01:11:13,570 --> 01:11:19,870
had used notes a DSS and thought it was

01:11:17,050 --> 01:11:23,350
great wonderful awesome

01:11:19,870 --> 01:11:28,900
I said now they so it provides a native

01:11:23,350 --> 01:11:32,050
binding to the nodejs and API I thought

01:11:28,900 --> 01:11:34,960
I would give that a go and look in here

01:11:32,050 --> 01:11:37,660
if you look in the documentation you can

01:11:34,960 --> 01:11:45,210
see a whole list of stuff that's pretty

01:11:37,660 --> 01:11:49,060
much a one-to-one mapping to the node

01:11:45,210 --> 01:11:52,480
happy so nothing exciting

01:11:49,060 --> 01:11:55,810
provides you an unsafe external see into

01:11:52,480 --> 01:12:01,960
the various functions that are required

01:11:55,810 --> 01:12:04,690
in order to create an API how do you

01:12:01,960 --> 01:12:08,500
create this thing okay so let's create a

01:12:04,690 --> 01:12:12,010
package and you do the good old Cardinal

01:12:08,500 --> 01:12:16,200
in it live and you pass an extra option

01:12:12,010 --> 01:12:24,790
called the desk desk create a Skype and

01:12:16,200 --> 01:12:28,330
this is a flag which tells the tells car

01:12:24,790 --> 01:12:31,300
go run to build a dynamical library and

01:12:28,330 --> 01:12:35,080
depending upon the operating system of

01:12:31,300 --> 01:12:37,590
the year using and as usual you'll get a

01:12:35,080 --> 01:12:42,310
project directory that looks like this

01:12:37,590 --> 01:12:45,820
nothing surprising if we look at the

01:12:42,310 --> 01:12:50,800
cargo duct tamil file we'll see that he

01:12:45,820 --> 01:12:52,480
has added a Lib crate type here what I

01:12:50,800 --> 01:12:55,680
just told you to create a dynamic

01:12:52,480 --> 01:12:59,230
library and of course we have to add

01:12:55,680 --> 01:13:04,450
noce assists ourselves to be able to use

01:12:59,230 --> 01:13:06,840
that crate the main way to hook into an

01:13:04,450 --> 01:13:11,250
odious

01:13:06,840 --> 01:13:14,500
application is with module registration

01:13:11,250 --> 01:13:16,480
it's a whole story I won't go into

01:13:14,500 --> 01:13:19,449
details but I'm just gonna say it's

01:13:16,480 --> 01:13:23,290
described here if you need to understand

01:13:19,449 --> 01:13:26,980
the real details but basically what it

01:13:23,290 --> 01:13:31,869
means is in your code in your library

01:13:26,980 --> 01:13:34,780
you have to provide a registrate extern

01:13:31,869 --> 01:13:36,760
C function called nappy underscore

01:13:34,780 --> 01:13:39,929
register of the score module underscore

01:13:36,760 --> 01:13:46,179
bi and that will be your entry point

01:13:39,929 --> 01:13:56,170
when that is is loaded in your no J's

01:13:46,179 --> 01:13:59,560
application via a require now once you

01:13:56,170 --> 01:14:04,270
have that you have to figure out a way

01:13:59,560 --> 01:14:07,619
to create your functions and in order to

01:14:04,270 --> 01:14:08,980
do that you have to go through a lot of

01:14:07,619 --> 01:14:11,199
newfangled

01:14:08,980 --> 01:14:14,770
jumping through hoops type of stuff and

01:14:11,199 --> 01:14:19,210
you use two functions called nappy

01:14:14,770 --> 01:14:21,070
create function and you use the name of

01:14:19,210 --> 01:14:24,670
the function which you put into a C

01:14:21,070 --> 01:14:28,480
string it only understands C strings and

01:14:24,670 --> 01:14:33,250
the results you have to first create a 0

01:14:28,480 --> 01:14:38,170
mm 0 place for the result and it will

01:14:33,250 --> 01:14:42,360
create a result which you can return in

01:14:38,170 --> 01:14:42,360
the set name property which basically

01:14:42,659 --> 01:14:57,159
includes this function in the exports

01:14:47,260 --> 01:15:00,699
exports here create function let's do a

01:14:57,159 --> 01:15:04,510
simple simple an example using nodejs

01:15:00,699 --> 01:15:10,690
sis so we want to create a function

01:15:04,510 --> 01:15:13,150
called hello say hello sir and in using

01:15:10,690 --> 01:15:17,130
the notes this system we have a create

01:15:13,150 --> 01:15:19,480
function and we have to create the name

01:15:17,130 --> 01:15:21,220
of it

01:15:19,480 --> 01:15:26,290
and we have to create a function and

01:15:21,220 --> 01:15:32,940
then we return the name property into

01:15:26,290 --> 01:15:38,890
the exports obviously this is unsafe and

01:15:32,940 --> 01:15:43,480
the reason that you use unsafe here okay

01:15:38,890 --> 01:15:46,060
so let's look at say hello

01:15:43,480 --> 01:15:48,730
what does it actually look like well

01:15:46,060 --> 01:15:52,390
it's a bit unsafe experiencee say hello

01:15:48,730 --> 01:15:55,150
and you have to create a result you have

01:15:52,390 --> 01:15:57,580
to create a string and you have to make

01:15:55,150 --> 01:16:02,230
a call to the nappy create string utf-8

01:15:57,580 --> 01:16:05,170
and it had you pass it as a pointer and

01:16:02,230 --> 01:16:11,230
the length and it returns to the result

01:16:05,170 --> 01:16:17,700
that you can pass back build and run not

01:16:11,230 --> 01:16:20,170
cargill build it will create a library

01:16:17,700 --> 01:16:25,120
with a dot SL which you have to copy

01:16:20,170 --> 01:16:28,720
into the index dot node which in your

01:16:25,120 --> 01:16:31,450
index dot yes file that's the entry

01:16:28,720 --> 01:16:36,190
point of your node app you will it would

01:16:31,450 --> 01:16:40,360
require it with index node and you can

01:16:36,190 --> 01:16:46,890
call it to call it into your node app

01:16:40,360 --> 01:16:49,570
and you run that like no dot index J s

01:16:46,890 --> 01:16:52,480
I'm now going to give you a demo don't

01:16:49,570 --> 01:16:57,060
get nervous but I'm going to do a bit on

01:16:52,480 --> 01:16:57,060
that demo of how do we add two numbers

01:16:58,080 --> 01:17:01,620
the CL works

01:17:04,140 --> 01:17:12,400
there it is

01:17:06,989 --> 01:17:18,360
add numbers is called unsaved externa

01:17:12,400 --> 01:17:18,360
see add numbers I first create a buffer

01:17:19,230 --> 01:17:28,719
in order to put the values in there and

01:17:24,790 --> 01:17:33,100
I also create a result to pass back the

01:17:28,719 --> 01:17:41,800
results I use something called CB info

01:17:33,100 --> 01:17:44,760
I get the values through the buffer get

01:17:41,800 --> 01:17:51,120
the X and the y parameters it's our past

01:17:44,760 --> 01:17:58,120
here I calculate the value I create a

01:17:51,120 --> 01:18:01,210
double and I pass back the result now if

01:17:58,120 --> 01:18:08,730
I have a demo here I'll show you how

01:18:01,210 --> 01:18:12,010
this works and I have an index here and

01:18:08,730 --> 01:18:17,080
basically what I'm gonna do is I'm gonna

01:18:12,010 --> 01:18:22,120
run this I'm going to call it so I have

01:18:17,080 --> 01:18:27,250
an add on index node here and I'm gonna

01:18:22,120 --> 01:18:31,690
call it like this and I have a nice

01:18:27,250 --> 01:18:40,210
little script that will do this for me

01:18:31,690 --> 01:18:43,720
and hopefully you can see this and you

01:18:40,210 --> 01:18:47,170
will see register module has been called

01:18:43,720 --> 01:18:50,110
it's registered the functions the number

01:18:47,170 --> 01:18:54,700
of functions one of which is add number

01:18:50,110 --> 01:18:59,770
and I run it and I get a number back 7.4

01:18:54,700 --> 01:19:03,570
so this is a node code calling into rust

01:18:59,770 --> 01:19:08,140
and as you can see here I've just

01:19:03,570 --> 01:19:13,560
printed to add on add numbers and it's a

01:19:08,140 --> 01:19:13,560
native code function called add numbers

01:19:14,700 --> 01:19:25,690
all right that's the boring stuff good

01:19:22,240 --> 01:19:29,650
so you can imagine after doing all that

01:19:25,690 --> 01:19:32,740
stuff I got kind of crazy

01:19:29,650 --> 01:19:38,770
I discovered another critic called neon

01:19:32,740 --> 01:19:43,720
which provides neon neon by teens but in

01:19:38,770 --> 01:19:46,970
a more high-level way than what you just

01:19:43,720 --> 01:19:48,980
saw and it's done by providing

01:19:46,970 --> 01:19:51,890
akley and the uncle' which you have to

01:19:48,980 --> 01:19:55,310
install install and use it to create a

01:19:51,890 --> 01:19:58,340
new project and you get a project tree

01:19:55,310 --> 01:20:01,280
that looks something like this so you

01:19:58,340 --> 01:20:07,400
have your index J s here and under

01:20:01,280 --> 01:20:10,430
native you have the library and the bill

01:20:07,400 --> 01:20:13,580
will automatically create a index dot

01:20:10,430 --> 01:20:16,330
node in so that you can use to load in

01:20:13,580 --> 01:20:20,300
the index J yes

01:20:16,330 --> 01:20:23,360
oops this is what the cargo looks like

01:20:20,300 --> 01:20:29,180
again the crate type CD Lib neon build

01:20:23,360 --> 01:20:32,060
neon module registration is a lot easier

01:20:29,180 --> 01:20:35,090
than the previous example and all you

01:20:32,060 --> 01:20:42,440
have to do is this m dot export function

01:20:35,090 --> 01:20:44,750
say hello say hello nice and the

01:20:42,440 --> 01:20:46,850
function that we're gonna call say hello

01:20:44,750 --> 01:20:49,700
is also very simple

01:20:46,850 --> 01:20:52,760
you don't have to worry about mem zeros

01:20:49,700 --> 01:20:58,760
and unsafe stuff you can just return

01:20:52,760 --> 01:21:02,030
directly a string and it'll work now the

01:20:58,760 --> 01:21:08,230
demo I'm going to show you is add

01:21:02,030 --> 01:21:08,230
numbers similar to the one that we had

01:21:08,920 --> 01:21:20,420
before but now using the neon so I'm

01:21:16,630 --> 01:21:22,580
pretty straightforward you have an

01:21:20,420 --> 01:21:25,700
argument which is the x value you'll

01:21:22,580 --> 01:21:30,260
argument which is the Y value you add

01:21:25,700 --> 01:21:36,580
the result and you return the result as

01:21:30,260 --> 01:21:36,580
a CX number and let's see if that works

01:21:46,590 --> 01:22:01,630
yeah so you see it also works but in a

01:21:52,540 --> 01:22:03,940
much more elegant and fun way now

01:22:01,630 --> 01:22:06,340
I also provide a number of other

01:22:03,940 --> 01:22:09,880
examples to pretty much cover the amat

01:22:06,340 --> 01:22:12,790
the gamut of returning objects and

01:22:09,880 --> 01:22:14,980
sending messages and that kind of stuff

01:22:12,790 --> 01:22:20,800
but I also an example of an async

01:22:14,980 --> 01:22:24,489
function the Fibonacci which is this one

01:22:20,800 --> 01:22:28,270
I won't show you the example that I made

01:22:24,489 --> 01:22:33,190
in no js' because it's awful to look at

01:22:28,270 --> 01:22:45,940
but this is a bit nicer and if I try to

01:22:33,190 --> 01:22:52,060
run it yeah so I'm gonna run it like

01:22:45,940 --> 01:22:55,690
this I'm gonna call it

01:22:52,060 --> 01:22:58,330
it's an async function and it will come

01:22:55,690 --> 01:23:01,659
back to me with the results and he's a

01:22:58,330 --> 01:23:03,909
pretty large value of x I don't know if

01:23:01,659 --> 01:23:05,760
any of you know off the top of your head

01:23:03,909 --> 01:23:09,610
what the answer is

01:23:05,760 --> 01:23:13,870
Tiffan if I may briefly interrupt you

01:23:09,610 --> 01:23:16,000
we actually don't see your demo we let

01:23:13,870 --> 01:23:19,330
me see the slides I assume you shared

01:23:16,000 --> 01:23:22,290
only the slights oh okay sorry about

01:23:19,330 --> 01:23:24,310
that already for me mentioning it now

01:23:22,290 --> 01:23:28,949
okay should have told me earlier

01:23:24,310 --> 01:23:30,940
well sorry Nana smile okay all right

01:23:28,949 --> 01:23:32,620
well I'll leave that up to the people

01:23:30,940 --> 01:23:36,880
interested they can look at it on their

01:23:32,620 --> 01:23:39,010
own so what are the advantages of using

01:23:36,880 --> 01:23:42,340
rust with no chance

01:23:39,010 --> 01:23:47,260
well yeah computational demands the

01:23:42,340 --> 01:23:50,739
performance is predictable and if you

01:23:47,260 --> 01:23:52,900
look at i/o T's you internet of things

01:23:50,739 --> 01:23:58,099
you have low level access to GPU and

01:23:52,900 --> 01:24:00,440
GPIO and which

01:23:58,099 --> 01:24:03,860
for example if you have a lot of these

01:24:00,440 --> 01:24:08,000
devices all over the place either a

01:24:03,860 --> 01:24:10,639
fleet of vehicles or measuring sites

01:24:08,000 --> 01:24:13,460
throughout the countryside and you can

01:24:10,639 --> 01:24:16,429
use cheaper hardware you can actually

01:24:13,460 --> 01:24:19,699
save a lot of money so those there

01:24:16,429 --> 01:24:24,199
budget-minded will be interested in

01:24:19,699 --> 01:24:26,630
exploring this more as usually there are

01:24:24,199 --> 01:24:30,309
some disadvantages yeah you have to

01:24:26,630 --> 01:24:32,780
support another programming language

01:24:30,309 --> 01:24:35,420
might be a pain might not be a pain

01:24:32,780 --> 01:24:36,650
might be fun to attract people that are

01:24:35,420 --> 01:24:41,179
interested in learning a new programming

01:24:36,650 --> 01:24:43,730
language the tool chain is slightly

01:24:41,179 --> 01:24:45,679
different and the deploy pipeline might

01:24:43,730 --> 01:24:48,290
have implications on the current one

01:24:45,679 --> 01:24:52,699
that you're using and yeah steep

01:24:48,290 --> 01:24:55,369
learning curve look at my github and

01:24:52,699 --> 01:24:57,800
you'll get everything you need to know I

01:24:55,369 --> 01:25:00,380
provided it there for the people that

01:24:57,800 --> 01:25:02,510
were unfortunately eager to see my code

01:25:00,380 --> 01:25:07,780
but couldn't because of a goof up I mean

01:25:02,510 --> 01:25:11,510
sorry about that hope you liked it if

01:25:07,780 --> 01:25:14,230
you so with all the corona thing and

01:25:11,510 --> 01:25:17,480
losing my job I've been looking around

01:25:14,230 --> 01:25:19,940
for work so if you are looking for

01:25:17,480 --> 01:25:23,619
someone to help you out I hope you can

01:25:19,940 --> 01:25:35,559
look me up and these are my details

01:25:23,619 --> 01:25:38,750
thank you very much okay thank you Kevin

01:25:35,559 --> 01:25:41,770
yeah there was some hiccups I'm sorry

01:25:38,750 --> 01:25:45,920
for not jumping in earlier Thanks

01:25:41,770 --> 01:25:54,710
helping out questions let me browse

01:25:45,920 --> 01:25:56,659
through so yeah on metrics a common

01:25:54,710 --> 01:25:58,489
trickiness with ffs is holding on to

01:25:56,659 --> 01:26:00,500
data from the other side with the

01:25:58,489 --> 01:26:02,869
library that you are using Kandra safely

01:26:00,500 --> 01:26:05,869
hold on to node values after the

01:26:02,869 --> 01:26:09,070
function exists and cannot hold on to

01:26:05,869 --> 01:26:09,070
rest value somehow

01:26:10,370 --> 01:26:13,180
yeah sorry

01:26:14,870 --> 01:26:20,750
one common trickiness with FF I is

01:26:18,410 --> 01:26:23,540
holding on to data from the other side

01:26:20,750 --> 01:26:26,600
with the library that you are using and

01:26:23,540 --> 01:26:30,890
rust cell flee safely hold on to note

01:26:26,600 --> 01:26:40,880
values and can note hold on to rust run

01:26:30,890 --> 01:26:43,970
you somehow by hold you mean us this may

01:26:40,880 --> 01:26:47,120
be really keen on mutant talk or

01:26:43,970 --> 01:26:52,760
answered a question yeah right exactly

01:26:47,120 --> 01:26:55,790
yeah I don't know I don't think so I

01:26:52,760 --> 01:27:00,020
don't know if that's useful or not how

01:26:55,790 --> 01:27:04,550
because it's kind of anti rust we have

01:27:00,020 --> 01:27:08,080
two two sides of the fence where the

01:27:04,550 --> 01:27:12,980
node can access and change values

01:27:08,080 --> 01:27:24,130
unawares of the of the node side or

01:27:12,980 --> 01:27:24,130
maybe I'm not seeing it clearly okay

01:27:25,630 --> 01:27:35,960
typing yeah let's do that offline in so

01:27:30,460 --> 01:27:39,920
yeah let's move to another question

01:27:35,960 --> 01:27:43,040
until kind of important things I'm feel

01:27:39,920 --> 01:27:46,970
free to contact each other privately and

01:27:43,040 --> 01:27:49,190
like in matrix or in soon we have

01:27:46,970 --> 01:27:52,340
another question is there a way to share

01:27:49,190 --> 01:28:01,840
code bases between neon and worse

01:27:52,340 --> 01:28:01,840
invention neon in white and awesome fine

01:28:18,290 --> 01:28:28,950
sounds like an interesting weekend

01:28:20,310 --> 01:28:34,620
project okay if there are no more

01:28:28,950 --> 01:28:38,340
questions and thank you for your talk

01:28:34,620 --> 01:28:42,410
we're super interesting and we can look

01:28:38,340 --> 01:28:46,800
at the code at the github repository

01:28:42,410 --> 01:28:53,910
cool and then we have the last talk for

01:28:46,800 --> 01:28:57,450
today which is about agate UI yeah feel

01:28:53,910 --> 01:28:59,880
free to another one let me quickly share

01:28:57,450 --> 01:29:03,120
the screen can you give me a thumbs up

01:28:59,880 --> 01:29:06,540
when it works that works

01:29:03,120 --> 01:29:09,720
I assume it does so thanks for hanging

01:29:06,540 --> 01:29:12,960
in here I know it's late and I try to be

01:29:09,720 --> 01:29:16,110
quick and I want to talk about git UI

01:29:12,960 --> 01:29:18,300
today and all the terminal awesomeness

01:29:16,110 --> 01:29:24,300
in rusts that I experienced developing

01:29:18,300 --> 01:29:26,370
it and because terminal applications or

01:29:24,300 --> 01:29:30,750
CLI applications and rusts are such a

01:29:26,370 --> 01:29:33,570
match made in heaven basically I decided

01:29:30,750 --> 01:29:36,000
to torture you with my poor PowerPoint

01:29:33,570 --> 01:29:39,500
squirrels skills with explaining your

01:29:36,000 --> 01:29:43,380
all the things that I experienced here

01:29:39,500 --> 01:29:45,480
just kidding of course so let's get into

01:29:43,380 --> 01:29:49,110
the terminal we're going to talk about

01:29:45,480 --> 01:29:51,630
git UI today and Who am I

01:29:49,110 --> 01:29:54,720
I'm Stefan nice to meet you you find me

01:29:51,630 --> 01:29:57,930
on github and twitter under my handle

01:29:54,720 --> 01:30:01,710
extra west I'm a game developer by trade

01:29:57,930 --> 01:30:04,830
and I recently founded a company game

01:30:01,710 --> 01:30:08,520
rosters and why am I telling you this

01:30:04,830 --> 01:30:10,110
anyways so for this particular company

01:30:08,520 --> 01:30:12,720
and the projects we were working on I

01:30:10,110 --> 01:30:16,380
started to use rust two years ago

01:30:12,720 --> 01:30:19,920
basically and since then we shipped

01:30:16,380 --> 01:30:22,110
almost two titles with that and let me

01:30:19,920 --> 01:30:25,440
show you quickly what kind of kind of

01:30:22,110 --> 01:30:28,800
games that are beautiful picture this is

01:30:25,440 --> 01:30:30,950
stack four okay maybe not everything is

01:30:28,800 --> 01:30:34,580
fine on command line but

01:30:30,950 --> 01:30:39,650
let's open the actual picture so this is

01:30:34,580 --> 01:30:42,410
a Kinect for game in 3d with real-time

01:30:39,650 --> 01:30:45,530
PvP player versus player on mobile

01:30:42,410 --> 01:30:48,170
devices and this is built on Rus

01:30:45,530 --> 01:30:50,990
technology and the current project is

01:30:48,170 --> 01:30:54,890
actually a little bit more complex it's

01:30:50,990 --> 01:30:57,980
a third offense PvP a real-time game on

01:30:54,890 --> 01:31:02,360
mobile as well and it's called tall

01:30:57,980 --> 01:31:06,860
Rangers but we are here today to talk

01:31:02,360 --> 01:31:09,770
about terminal you is right so what is

01:31:06,860 --> 01:31:11,930
get you I get you I looks like that and

01:31:09,770 --> 01:31:13,820
I hope I didn't bother to many of you

01:31:11,930 --> 01:31:17,060
guys already on Twitter with my spam

01:31:13,820 --> 01:31:18,980
about the project and so some might

01:31:17,060 --> 01:31:21,920
already come across screenshots on the

01:31:18,980 --> 01:31:27,980
screenshots of get you I I will show it

01:31:21,920 --> 01:31:29,690
to you in action in just a sec so what

01:31:27,980 --> 01:31:32,750
is get you I anyway it's a terminal UI

01:31:29,690 --> 01:31:36,620
for forget my main focus was to make it

01:31:32,750 --> 01:31:38,960
fast and lightweight and to the second

01:31:36,620 --> 01:31:42,050
primary focus was to make it super easy

01:31:38,960 --> 01:31:44,630
to use for noobs like me in the terminal

01:31:42,050 --> 01:31:48,230
because I'm definitely not someone who

01:31:44,630 --> 01:31:50,390
is who grew up using them and like

01:31:48,230 --> 01:31:52,520
remembering tons of shortcuts is

01:31:50,390 --> 01:31:57,590
definitely not my thing I'm used to use

01:31:52,520 --> 01:32:00,700
gooeys but due to circumstances I was

01:31:57,590 --> 01:32:03,230
looking around for a new key tool and I

01:32:00,700 --> 01:32:06,500
came up with the idea that hey maybe

01:32:03,230 --> 01:32:10,400
maybe I just look for something in the

01:32:06,500 --> 01:32:14,320
terminal right and let me quickly show

01:32:10,400 --> 01:32:19,070
you how get your looks action so it's

01:32:14,320 --> 01:32:21,140
like typical like its interface you can

01:32:19,070 --> 01:32:23,570
look at the log you can stash stuff you

01:32:21,140 --> 01:32:27,200
can look at your stashes you can like

01:32:23,570 --> 01:32:34,280
stage stuff look at your diff and so on

01:32:27,200 --> 01:32:37,070
so pretty like standard I guess so a

01:32:34,280 --> 01:32:40,010
couple of you might now say wait what

01:32:37,070 --> 01:32:41,930
why isn't there stuff like that already

01:32:40,010 --> 01:32:43,880
right of course

01:32:41,930 --> 01:32:44,419
I looked into the like two most

01:32:43,880 --> 01:32:48,229
prominent

01:32:44,419 --> 01:32:52,760
projects that I could find take and lazy

01:32:48,229 --> 01:32:55,429
get and let me quickly open up tick here

01:32:52,760 --> 01:32:57,590
in my repository and you will see hey

01:32:55,429 --> 01:32:59,030
nice it's a it's a terminal application

01:32:57,590 --> 01:33:03,679
right it's exactly what I was looking

01:32:59,030 --> 01:33:05,840
for well yeah kind of but it's my form

01:33:03,679 --> 01:33:07,550
for my definition of this centricity

01:33:05,840 --> 01:33:09,469
that I was looking for it definitely

01:33:07,550 --> 01:33:10,969
didn't hold up because no one's telling

01:33:09,469 --> 01:33:14,030
me now what I can do here right what

01:33:10,969 --> 01:33:15,559
kind of keys I can hook into now and and

01:33:14,030 --> 01:33:19,010
do stuff with and of course there's a

01:33:15,559 --> 01:33:22,669
help but to be honest this isn't the

01:33:19,010 --> 01:33:27,800
kind of help I was looking for so way

01:33:22,669 --> 01:33:30,949
too complex the second tool is lazy git

01:33:27,800 --> 01:33:33,439
that's written in go and it definitely

01:33:30,949 --> 01:33:37,780
comes much closer to what I was looking

01:33:33,439 --> 01:33:41,179
for in terms of a nice UI and usability

01:33:37,780 --> 01:33:43,699
if you open up the help here you see

01:33:41,179 --> 01:33:47,719
it's definitely not as much but still

01:33:43,699 --> 01:33:50,809
quite some key shortcuts but it at least

01:33:47,719 --> 01:33:52,699
gives you some sort of commands down at

01:33:50,809 --> 01:33:55,070
the bottom to tell you what's possible

01:33:52,699 --> 01:33:56,739
right now in this situation and that's

01:33:55,070 --> 01:34:00,679
definitely something I was inspired by

01:33:56,739 --> 01:34:03,050
but then I was coming across this list

01:34:00,679 --> 01:34:04,849
here of commits and I was wondering like

01:34:03,050 --> 01:34:07,820
hey wait I have I have more than three

01:34:04,849 --> 01:34:09,949
hundred commits in my what's going on in

01:34:07,820 --> 01:34:12,919
here and I really had I realized that

01:34:09,949 --> 01:34:16,130
they are kind of cheating with loading

01:34:12,919 --> 01:34:17,869
lazy loading the entire revision history

01:34:16,130 --> 01:34:20,780
once you're going beyond those first

01:34:17,869 --> 01:34:22,789
three hundreds so I was intrigued to to

01:34:20,780 --> 01:34:25,149
look deeper into those performance

01:34:22,789 --> 01:34:28,159
differences between the applications and

01:34:25,149 --> 01:34:30,499
so the kind of comparison that I wanted

01:34:28,159 --> 01:34:33,079
to do was okay let's throw a like worst

01:34:30,499 --> 01:34:36,199
case scenario at it let's open the Linux

01:34:33,079 --> 01:34:39,289
official Linux gets repository in it

01:34:36,199 --> 01:34:40,969
which attire at the time of my checkout

01:34:39,289 --> 01:34:44,209
was around two hundred nine hundred

01:34:40,969 --> 01:34:45,829
thousand commits I wanted to see like

01:34:44,209 --> 01:34:47,809
how long does it take to open the whole

01:34:45,829 --> 01:34:50,630
revision history how much memory does

01:34:47,809 --> 01:34:54,939
the application take at the end and like

01:34:50,630 --> 01:34:58,130
how big is the binary anyways is the UI

01:34:54,939 --> 01:35:03,440
freezing like while loading

01:34:58,130 --> 01:35:05,870
or does it be crash maybe so I can

01:35:03,440 --> 01:35:10,550
actually start looking into lazy get

01:35:05,870 --> 01:35:12,170
first to show you for your own eyes it

01:35:10,550 --> 01:35:14,990
takes a little longer to load the stuff

01:35:12,170 --> 01:35:17,690
there are some files changing changed

01:35:14,990 --> 01:35:19,340
here and you see the ref log and the

01:35:17,690 --> 01:35:21,560
chance it's it's pretty decent

01:35:19,340 --> 01:35:23,450
reasonably quick but of course I'm

01:35:21,560 --> 01:35:25,340
interested in more than just the 300

01:35:23,450 --> 01:35:28,420
commits here right so let's scroll at

01:35:25,340 --> 01:35:33,080
the bottom mmm

01:35:28,420 --> 01:35:36,230
nothing's happening okay so we can

01:35:33,080 --> 01:35:38,360
actually scroll forward here because I

01:35:36,230 --> 01:35:41,810
did the test already before it will take

01:35:38,360 --> 01:35:44,960
lazy git actually 57 seconds roughly to

01:35:41,810 --> 01:35:47,720
load the entire history and it will then

01:35:44,960 --> 01:35:51,020
grow and blow up to about 2.6 gigabytes

01:35:47,720 --> 01:35:55,450
of RAM and the binary size in itself is

01:35:51,020 --> 01:35:58,580
already 60 megabytes and as you will see

01:35:55,450 --> 01:36:00,890
as you would have seen is that the whole

01:35:58,580 --> 01:36:03,140
UI starts freezing once once it actually

01:36:00,890 --> 01:36:06,140
gets into into loading the remaining

01:36:03,140 --> 01:36:08,510
history and sometimes I even experience

01:36:06,140 --> 01:36:10,850
crashes in there so it didn't really

01:36:08,510 --> 01:36:14,690
hold up to the kind of standard that I

01:36:10,850 --> 01:36:17,840
was looking for pretty similar picture

01:36:14,690 --> 01:36:21,370
when you open TIG it basically shows you

01:36:17,840 --> 01:36:23,720
nothing for the first 10 seconds or so

01:36:21,370 --> 01:36:25,120
it looks like something is broken here

01:36:23,720 --> 01:36:29,050
but at least it tells you it's loading

01:36:25,120 --> 01:36:32,510
so let's give it a couple of seconds oh

01:36:29,050 --> 01:36:35,060
yeah here we go so now at least we can

01:36:32,510 --> 01:36:39,290
scroll through this first 10,000 entries

01:36:35,060 --> 01:36:40,700
or so which I mean it's it's a problem

01:36:39,290 --> 01:36:42,620
if you are just interested in the latest

01:36:40,700 --> 01:36:44,780
stuff if you have to wait every time

01:36:42,620 --> 01:36:47,450
like 10 seconds for stuff to load and

01:36:44,780 --> 01:36:49,310
you can see it's not even loading 30 so

01:36:47,450 --> 01:36:51,890
30 thousand entries yet and we are

01:36:49,310 --> 01:36:55,070
already at the 30-second mark so let's

01:36:51,890 --> 01:36:57,200
stop that here what TIG actually will

01:36:55,070 --> 01:37:00,500
take is around four minutes to load the

01:36:57,200 --> 01:37:03,350
entire history it's also going to grow

01:37:00,500 --> 01:37:05,690
up significantly to 1.3 gigabytes of RAM

01:37:03,350 --> 01:37:07,070
I'm not gonna free it up anymore I don't

01:37:05,690 --> 01:37:08,360
know what they keep on holding there I

01:37:07,070 --> 01:37:10,639
mean they don't have a garbage collector

01:37:08,360 --> 01:37:13,070
to excuse themselves

01:37:10,639 --> 01:37:15,110
it's the C application so they are

01:37:13,070 --> 01:37:15,590
definitely the winner in binary size

01:37:15,110 --> 01:37:19,610
here

01:37:15,590 --> 01:37:23,840
six hundred kilobytes and the UI keeps

01:37:19,610 --> 01:37:25,880
pretty stable and responsive but a

01:37:23,840 --> 01:37:27,469
couple of hiccups here and there but

01:37:25,880 --> 01:37:30,679
definitely no crash so that's definitely

01:37:27,469 --> 01:37:34,489
an outside now let's open up the

01:37:30,679 --> 01:37:36,590
repository with get UI let's go into the

01:37:34,489 --> 01:37:38,989
log and you can see it's also not

01:37:36,590 --> 01:37:41,480
possible of course to load it right away

01:37:38,989 --> 01:37:45,409
but as you can see we're already at the

01:37:41,480 --> 01:37:47,659
two hundred thousand commits mark and we

01:37:45,409 --> 01:37:50,300
can basically smoothly scroll through

01:37:47,659 --> 01:37:54,800
the entire history here absolutely no

01:37:50,300 --> 01:37:57,020
problem we can jump up again and yeah I

01:37:54,800 --> 01:37:59,119
mean of course we don't have as many

01:37:57,020 --> 01:38:02,300
features yet as some of the competitors

01:37:59,119 --> 01:38:04,369
but I also didn't see a diff right away

01:38:02,300 --> 01:38:06,409
in intake that's definitely something

01:38:04,369 --> 01:38:10,309
I'm also going to implement eventually

01:38:06,409 --> 01:38:13,489
but yeah we are now at like eight

01:38:10,309 --> 01:38:16,840
hundred thousand and it's it's done now

01:38:13,489 --> 01:38:19,340
so here we can scroll through everything

01:38:16,840 --> 01:38:21,170
so it turns out it takes like around

01:38:19,340 --> 01:38:23,960
twenty four seconds for get UI to load

01:38:21,170 --> 01:38:25,969
the entire history and the application

01:38:23,960 --> 01:38:31,070
the the memory footprint will be around

01:38:25,969 --> 01:38:33,170
170 megabytes and unfortunately I

01:38:31,070 --> 01:38:35,929
couldn't crunch the binary size lower

01:38:33,170 --> 01:38:38,420
two than the 1.4 megabytes but that's

01:38:35,929 --> 01:38:41,360
okay I guess and there's definitely no

01:38:38,420 --> 01:38:45,559
freezing or crashing in the experience

01:38:41,360 --> 01:38:54,889
while loading this history here so I

01:38:45,559 --> 01:38:56,750
guess that's a success whoops so why did

01:38:54,889 --> 01:38:59,599
I choose to do it in rust right so a

01:38:56,750 --> 01:39:02,500
little bit of history my past is C++ C

01:38:59,599 --> 01:39:05,630
sharp in in a professional capacity and

01:39:02,500 --> 01:39:08,900
actually for all my side projects are

01:39:05,630 --> 01:39:11,300
use D for ten years or so before I

01:39:08,900 --> 01:39:12,619
started to look into rust that was my

01:39:11,300 --> 01:39:16,250
way to go

01:39:12,619 --> 01:39:17,869
nowadays it's professionally and for

01:39:16,250 --> 01:39:20,599
side projects the same picture I'm using

01:39:17,869 --> 01:39:23,210
go wherever I need a sink but we come to

01:39:20,599 --> 01:39:24,050
that later and I'm using basically rust

01:39:23,210 --> 01:39:26,989
for everything else

01:39:24,050 --> 01:39:29,809
it's for for all the things that are

01:39:26,989 --> 01:39:32,179
that me to interface to the CFI as we

01:39:29,809 --> 01:39:33,800
saw on the previous talk for CLI

01:39:32,179 --> 01:39:35,750
applications for performance critical

01:39:33,800 --> 01:39:39,230
applications and expand and especially

01:39:35,750 --> 01:39:41,630
for portability reasons because for our

01:39:39,230 --> 01:39:44,510
games we need to target like iOS and

01:39:41,630 --> 01:39:50,840
Android and good luck building go or D

01:39:44,510 --> 01:39:52,309
for that that's that stuff so three

01:39:50,840 --> 01:39:54,969
things that I want to highlight that I

01:39:52,309 --> 01:39:58,480
experienced while building get UI and

01:39:54,969 --> 01:40:02,300
using Russ for it and those are

01:39:58,480 --> 01:40:06,139
Diagnostics concurrency no surprise here

01:40:02,300 --> 01:40:09,320
and community so what do I mean by

01:40:06,139 --> 01:40:11,150
Diagnostics so I think I read that

01:40:09,320 --> 01:40:13,880
somewhere before but it's definitely

01:40:11,150 --> 01:40:16,070
true to me the compiler really feels

01:40:13,880 --> 01:40:17,840
like a peer programmer that you're that

01:40:16,070 --> 01:40:19,520
sitting like sitting next to you and

01:40:17,840 --> 01:40:22,969
bothering you with the uncomfortable

01:40:19,520 --> 01:40:25,190
questions like why are you not handling

01:40:22,969 --> 01:40:28,040
this error you know unwrapping is not a

01:40:25,190 --> 01:40:28,699
good way to go here and that sort of

01:40:28,040 --> 01:40:31,340
stuff

01:40:28,699 --> 01:40:33,980
and Clippy for me goes even further and

01:40:31,340 --> 01:40:35,780
is kind of a teacher because to be

01:40:33,980 --> 01:40:37,040
honest after I read the book and I

01:40:35,780 --> 01:40:38,659
played around with a couple of

01:40:37,040 --> 01:40:41,059
applications

01:40:38,659 --> 01:40:43,190
Clippy really told me lie it taught me

01:40:41,059 --> 01:40:45,679
basically like the remaining 50 percent

01:40:43,190 --> 01:40:51,440
of my rusts best practices that I'm

01:40:45,679 --> 01:40:53,030
using now so it gives me hints like it

01:40:51,440 --> 01:40:57,230
would actually be more performant here

01:40:53,030 --> 01:40:59,360
to use to not clone or maybe you want to

01:40:57,230 --> 01:41:01,579
pass this by a reference and not just

01:40:59,360 --> 01:41:03,199
copy it that sort of stuff it's it's

01:41:01,579 --> 01:41:07,130
really convenient and I will show you

01:41:03,199 --> 01:41:09,260
some examples so I really religious

01:41:07,130 --> 01:41:12,860
about those Diagnostics because I'm

01:41:09,260 --> 01:41:14,239
totally convinced to to try to tackle as

01:41:12,860 --> 01:41:16,489
much stuff as possible

01:41:14,239 --> 01:41:18,460
already at compile time and everything

01:41:16,489 --> 01:41:21,020
every problem that's sorted out there is

01:41:18,460 --> 01:41:23,630
something I don't need to debug later

01:41:21,020 --> 01:41:26,840
and especially when you ship stuff on

01:41:23,630 --> 01:41:29,989
devices you don't want to try to debug

01:41:26,840 --> 01:41:33,199
that stuff when it's already so I'm

01:41:29,989 --> 01:41:35,960
actually using those annotations here I

01:41:33,199 --> 01:41:37,520
put it I put Clippy too pedantic I

01:41:35,960 --> 01:41:39,640
really wanted to tell me every

01:41:37,520 --> 01:41:43,880
everything every nitty-gritty detail

01:41:39,640 --> 01:41:46,670
that I could be bothered with I forbid

01:41:43,880 --> 01:41:48,350
completely forbid unsafe code just to

01:41:46,670 --> 01:41:54,560
make sure that also nothing that I pull

01:41:48,350 --> 01:41:57,950
in is using it and no unwrapping no

01:41:54,560 --> 01:42:00,050
panic I would have force myself to to

01:41:57,950 --> 01:42:07,310
handle every error that that's there and

01:42:00,050 --> 01:42:09,110
to not get lazy at some point right one

01:42:07,310 --> 01:42:12,950
example of those errors that I want to

01:42:09,110 --> 01:42:16,160
show you or Clippy like teaching more

01:42:12,950 --> 01:42:18,050
better for a better word exactly

01:42:16,160 --> 01:42:20,330
something stupid of course that I did I

01:42:18,050 --> 01:42:22,850
was I was using a filter map on an

01:42:20,330 --> 01:42:26,450
iterator basically just to filter out

01:42:22,850 --> 01:42:28,880
one particular item and then going to

01:42:26,450 --> 01:42:30,590
this one only and of course there is a

01:42:28,880 --> 01:42:32,570
link for that and Clippy told me like

01:42:30,590 --> 01:42:33,980
hey you can just do fine map here

01:42:32,570 --> 01:42:36,020
because you're obviously just looking

01:42:33,980 --> 01:42:39,640
for this one entry I have no idea how

01:42:36,020 --> 01:42:39,640
they do that but it's it's just amazing

01:42:41,770 --> 01:42:47,900
so second point concurrency I mean of

01:42:45,590 --> 01:42:50,870
course for what you saw and get you I

01:42:47,900 --> 01:42:53,360
it's very important to to to run stuff

01:42:50,870 --> 01:42:55,430
multi-threaded because we have to do a

01:42:53,360 --> 01:42:58,370
certain expensive gate operations in the

01:42:55,430 --> 01:43:00,650
background to not block the UI and to

01:42:58,370 --> 01:43:03,200
actually not get this this hiccup

01:43:00,650 --> 01:43:06,800
experience so concurrency is super

01:43:03,200 --> 01:43:09,920
important and I don't want to go into

01:43:06,800 --> 01:43:12,010
detail like how this is so awesome

01:43:09,920 --> 01:43:14,390
interests there is definitely long

01:43:12,010 --> 01:43:16,310
articles to read about it but they

01:43:14,390 --> 01:43:19,790
really keep up on the promise of this

01:43:16,310 --> 01:43:23,660
fearless concurrency where you thanks to

01:43:19,790 --> 01:43:26,360
this strong typing system the the

01:43:23,660 --> 01:43:29,660
guarantees to not have data races or

01:43:26,360 --> 01:43:32,750
stuff like that are actually like poured

01:43:29,660 --> 01:43:34,040
into the type system and makes it super

01:43:32,750 --> 01:43:36,470
easy to make sure that you're not

01:43:34,040 --> 01:43:38,630
 up somewhere yourself where you

01:43:36,470 --> 01:43:41,630
didn't want to and there's actually one

01:43:38,630 --> 01:43:43,700
super tiny example of this in the corpus

01:43:41,630 --> 01:43:48,140
of kqi where it's basically using all

01:43:43,700 --> 01:43:51,140
those strategies so you see there's a

01:43:48,140 --> 01:43:52,430
mutex around shared data

01:43:51,140 --> 01:43:54,500
to make sure that the type system

01:43:52,430 --> 01:43:57,980
guarantees that are not accessing it

01:43:54,500 --> 01:44:01,220
through from multiple threats and this

01:43:57,980 --> 01:44:04,580
is actually the log component so the the

01:44:01,220 --> 01:44:06,560
gates process or the yeah the process

01:44:04,580 --> 01:44:09,950
that crunchers through the entire commit

01:44:06,560 --> 01:44:11,810
history basically keeps on adding commit

01:44:09,950 --> 01:44:15,620
IDs to this vector and grows it and

01:44:11,810 --> 01:44:18,910
grows it and the the UI definitely looks

01:44:15,620 --> 01:44:22,670
into this vector every once in a while

01:44:18,910 --> 01:44:25,670
what's visible and that's communicated

01:44:22,670 --> 01:44:28,520
back to the UI using this channels so

01:44:25,670 --> 01:44:30,370
there is message passing going on so

01:44:28,520 --> 01:44:33,380
that it doesn't have to pole or whatever

01:44:30,370 --> 01:44:36,470
and of course we can also do like lock

01:44:33,380 --> 01:44:38,120
three data types there's a lot of stuff

01:44:36,470 --> 01:44:39,800
already built in into the standard

01:44:38,120 --> 01:44:43,490
library that's that's pretty awesome and

01:44:39,800 --> 01:44:48,290
simple to use so I'm really a fan of

01:44:43,490 --> 01:44:50,870
that feature of rust and then last but

01:44:48,290 --> 01:44:53,300
not least the the entire community is

01:44:50,870 --> 01:44:56,960
really what what sold it to me

01:44:53,300 --> 01:45:00,920
personally so this is amazingly friendly

01:44:56,960 --> 01:45:02,840
atmosphere those meetups everything is

01:45:00,920 --> 01:45:05,210
recorded that's definitely something I

01:45:02,840 --> 01:45:07,520
didn't expect before when I was starting

01:45:05,210 --> 01:45:10,370
to look into rust I started to look for

01:45:07,520 --> 01:45:12,350
resources to learn about it and there

01:45:10,370 --> 01:45:14,810
was so many videos and so many

01:45:12,350 --> 01:45:16,580
recordings every conference it's like so

01:45:14,810 --> 01:45:18,050
easy to catch up on stuff that happened

01:45:16,580 --> 01:45:20,750
over the last couple of years and

01:45:18,050 --> 01:45:23,210
actually see also some of the faces

01:45:20,750 --> 01:45:25,670
behind the language and it's all free

01:45:23,210 --> 01:45:28,850
and it's it's it's really cool to see

01:45:25,670 --> 01:45:31,310
also like that even the smallest meetups

01:45:28,850 --> 01:45:34,270
will have their code of conducts making

01:45:31,310 --> 01:45:36,980
sure everyone is aware of those like

01:45:34,270 --> 01:45:39,890
community guidelines that Russ wants to

01:45:36,980 --> 01:45:42,320
see and I really experienced that myself

01:45:39,890 --> 01:45:44,330
when you have any sort of new question

01:45:42,320 --> 01:45:46,430
once once you start out and go into the

01:45:44,330 --> 01:45:48,260
discord channels everyone's super

01:45:46,430 --> 01:45:50,090
friendly and there's always someone who

01:45:48,260 --> 01:45:53,840
wants to help out that's really really

01:45:50,090 --> 01:45:56,390
cool and of course thanks to cargo and

01:45:53,840 --> 01:45:59,600
crates i/o there's a ton of libraries

01:45:56,390 --> 01:46:00,950
that you can rely on and some I mean

01:45:59,600 --> 01:46:03,050
most of them are really actively

01:46:00,950 --> 01:46:04,469
maintained I never really had huge

01:46:03,050 --> 01:46:06,630
issues

01:46:04,469 --> 01:46:09,210
finding contact to talk to the people

01:46:06,630 --> 01:46:12,510
working on it or even like contributing

01:46:09,210 --> 01:46:14,280
and everyone was super friendly and

01:46:12,510 --> 01:46:18,900
forward on this and that was really

01:46:14,280 --> 01:46:20,880
really awesome and of course I'm using a

01:46:18,900 --> 01:46:23,580
ton of those libraries and that's why

01:46:20,880 --> 01:46:27,360
that's some of the details I want to

01:46:23,580 --> 01:46:31,590
tell you about this is the five major

01:46:27,360 --> 01:46:34,770
parts I would say i'm using is urs which

01:46:31,590 --> 01:46:36,810
is like like a wrapper around AC library

01:46:34,770 --> 01:46:40,770
that actually does all the accessing to

01:46:36,810 --> 01:46:44,070
the git repository and makes this some

01:46:40,770 --> 01:46:45,239
like at least safe and at least more

01:46:44,070 --> 01:46:47,070
rust idiomatic

01:46:45,239 --> 01:46:49,770
but i had to write my own wrapper around

01:46:47,070 --> 01:46:52,440
it again to make it to actually be able

01:46:49,770 --> 01:46:55,500
to put stuff of stuff like requests to

01:46:52,440 --> 01:47:00,570
it into into motif credits like into

01:46:55,500 --> 01:47:02,250
threats for the UI there is on the

01:47:00,570 --> 01:47:03,780
bottom there's cross term which is an

01:47:02,250 --> 01:47:05,580
amazing library which allows you to

01:47:03,780 --> 01:47:07,530
write the terminal like writing into the

01:47:05,580 --> 01:47:08,880
terminal in a cross-platform manner you

01:47:07,530 --> 01:47:11,100
don't have to worry about the different

01:47:08,880 --> 01:47:13,890
platforms and intricacies with the

01:47:11,100 --> 01:47:15,480
terminals on each but it's very low

01:47:13,890 --> 01:47:18,540
level so basically you just get a buffer

01:47:15,480 --> 01:47:21,360
and you write like text and styles like

01:47:18,540 --> 01:47:24,210
annotated with styles into it and on top

01:47:21,360 --> 01:47:26,250
of that I'm using tu IRS which gives you

01:47:24,210 --> 01:47:28,530
a little bit more sophisticated feeling

01:47:26,250 --> 01:47:32,820
of an actual visit library where you can

01:47:28,530 --> 01:47:34,800
draw like trains and get a lot of

01:47:32,820 --> 01:47:35,810
tooling that they're gonna show you in a

01:47:34,800 --> 01:47:38,520
bit

01:47:35,810 --> 01:47:41,910
on the concurrency side there's two

01:47:38,520 --> 01:47:44,940
major libraries with rayon supplying me

01:47:41,910 --> 01:47:47,820
with a thread pool and crossbeam where

01:47:44,940 --> 01:47:53,010
I'm using the selects functionality and

01:47:47,820 --> 01:47:56,460
also the channels from so let's look at

01:47:53,010 --> 01:47:58,050
one of those concentrates to actually

01:47:56,460 --> 01:48:01,560
visualize how easy it is to make a

01:47:58,050 --> 01:48:06,570
decent UI in the terminal using two GUI

01:48:01,560 --> 01:48:09,330
and as you can see here we just fetch a

01:48:06,570 --> 01:48:10,920
center direct and we want to have it

01:48:09,330 --> 01:48:13,679
like taking a percentage of the screen

01:48:10,920 --> 01:48:17,370
so it's actually like responsive to

01:48:13,679 --> 01:48:18,210
screen to size changes and also and all

01:48:17,370 --> 01:48:21,000
sort of stuff

01:48:18,210 --> 01:48:22,440
and this is handled for me and I want to

01:48:21,000 --> 01:48:24,719
render a budget which is actually a

01:48:22,440 --> 01:48:28,260
paragraph which takes a iterator of

01:48:24,719 --> 01:48:32,489
strip of text and a block in this

01:48:28,260 --> 01:48:34,500
terminology is basically the the borders

01:48:32,489 --> 01:48:37,950
that you see around the individual

01:48:34,500 --> 01:48:39,480
chunks of the UI here and that's

01:48:37,950 --> 01:48:41,430
basically it you can give it a title it

01:48:39,480 --> 01:48:44,160
makes sure that text is wrapped

01:48:41,430 --> 01:48:46,710
correctly and that really lifts a lot of

01:48:44,160 --> 01:48:51,000
work from from me and there in this

01:48:46,710 --> 01:48:52,950
application rayon as I said is the

01:48:51,000 --> 01:48:56,040
thread pool it's super convenient to

01:48:52,950 --> 01:49:00,630
just shoot a synchronous operation into

01:48:56,040 --> 01:49:02,489
the thread pool and and be done with it

01:49:00,630 --> 01:49:05,100
but one major feature that I'm actually

01:49:02,489 --> 01:49:08,070
also using from rayon is the global

01:49:05,100 --> 01:49:10,290
panic handler which turned out to be a

01:49:08,070 --> 01:49:12,840
tougher thing with using the standard

01:49:10,290 --> 01:49:15,360
library threads because they they don't

01:49:12,840 --> 01:49:17,010
provide a functionality like that so to

01:49:15,360 --> 01:49:19,980
get something similar I would have to

01:49:17,010 --> 01:49:22,080
wrap my my code in that I'm running in

01:49:19,980 --> 01:49:25,140
threads actually myself to to catch

01:49:22,080 --> 01:49:27,030
panics like for diagnostic reasons I

01:49:25,140 --> 01:49:29,969
definitely while developing wanted this

01:49:27,030 --> 01:49:32,910
because of course stuff breaks and I

01:49:29,969 --> 01:49:36,270
want to know where and why so that's

01:49:32,910 --> 01:49:38,880
that's pretty pretty helpful and this is

01:49:36,270 --> 01:49:41,280
the most convoluted example here but

01:49:38,880 --> 01:49:42,930
it's showing you that we are using tons

01:49:41,280 --> 01:49:46,469
of channels as I said for the

01:49:42,930 --> 01:49:48,540
asynchronous operation stuff and the UI

01:49:46,469 --> 01:49:51,390
thread really doesn't have to do

01:49:48,540 --> 01:49:53,520
anything when nothing is sent to it like

01:49:51,390 --> 01:49:55,680
when no channel is doing anything or

01:49:53,520 --> 01:49:57,060
sending anything the terminal

01:49:55,680 --> 01:50:01,500
application doesn't have to be redrawn

01:49:57,060 --> 01:50:03,810
so I'm having this huge select giving it

01:50:01,500 --> 01:50:06,930
all the receivers that the application

01:50:03,810 --> 01:50:08,880
uses and basically putting that into a

01:50:06,930 --> 01:50:10,680
select statement and block here until

01:50:08,880 --> 01:50:14,070
anything happens because otherwise we

01:50:10,680 --> 01:50:17,700
don't have to worry and why am I not

01:50:14,070 --> 01:50:20,400
using this fancy select macro because if

01:50:17,700 --> 01:50:22,530
you remember I forbid using unsafe code

01:50:20,400 --> 01:50:27,060
and unfortunately the Select macro

01:50:22,530 --> 01:50:29,400
actually injects a like allow unsafe the

01:50:27,060 --> 01:50:31,530
operations that you are using here so

01:50:29,400 --> 01:50:34,020
that's unfortunate but this

01:50:31,530 --> 01:50:35,670
code snippet it's actually never changed

01:50:34,020 --> 01:50:38,820
since I set up the application and so

01:50:35,670 --> 01:50:43,679
it's it's okay that it's not that short

01:50:38,820 --> 01:50:46,110
and simple but still there's stuff that

01:50:43,679 --> 01:50:48,719
I wish I would see in rest as well of

01:50:46,110 --> 01:50:51,869
course this nothing's ever perfect and I

01:50:48,719 --> 01:50:57,900
definitely wanted to put some things to

01:50:51,869 --> 01:51:00,210
think about in here as well so make sure

01:50:57,900 --> 01:51:01,920
async this is a holy like a totally

01:51:00,210 --> 01:51:05,340
different discussion but it's definitely

01:51:01,920 --> 01:51:07,619
the reason why I'm still using for some

01:51:05,340 --> 01:51:10,380
applications like go components because

01:51:07,619 --> 01:51:13,110
I find it super confusing this whole

01:51:10,380 --> 01:51:16,559
async situation in the ecosystem like

01:51:13,110 --> 01:51:19,260
having multiple executors don't know how

01:51:16,559 --> 01:51:24,179
to combine them don't know how to write

01:51:19,260 --> 01:51:26,610
a executor a agnostic library and all

01:51:24,179 --> 01:51:28,530
these things are I think are very like

01:51:26,610 --> 01:51:30,599
frightening for nooks like me so

01:51:28,530 --> 01:51:35,010
definitely something I hope will

01:51:30,599 --> 01:51:38,039
eventually weed out and like standardize

01:51:35,010 --> 01:51:42,000
in some sort of way since I love

01:51:38,039 --> 01:51:44,099
clipping so much I really really hope to

01:51:42,000 --> 01:51:45,659
be able to write custom mints eventually

01:51:44,099 --> 01:51:47,940
and like dropping them in my repository

01:51:45,659 --> 01:51:51,030
making them like a standard check that's

01:51:47,940 --> 01:51:56,099
going to be run when my CI is running

01:51:51,030 --> 01:51:57,449
the the linting and definitely something

01:51:56,099 --> 01:52:00,900
I think would be super useful for

01:51:57,449 --> 01:52:04,070
companies also to define certain

01:52:00,900 --> 01:52:07,320
standards on their code bases and

01:52:04,070 --> 01:52:09,719
something that that was like freaking me

01:52:07,320 --> 01:52:12,090
out a lot is the local non published

01:52:09,719 --> 01:52:14,250
rates kind of problem because initially

01:52:12,090 --> 01:52:16,230
the the application was supposed to be

01:52:14,250 --> 01:52:19,039
published on Craig's i/o to be able to

01:52:16,230 --> 01:52:21,860
just install using cargo install and

01:52:19,039 --> 01:52:25,920
that's all super nice but the problem is

01:52:21,860 --> 01:52:28,409
you cannot depend on like like like

01:52:25,920 --> 01:52:30,179
crates they are not on crates i/o which

01:52:28,409 --> 01:52:32,309
means I couldn't even split up my

01:52:30,179 --> 01:52:34,500
project in my own repository into

01:52:32,309 --> 01:52:36,150
certain like into sub crates which of

01:52:34,500 --> 01:52:39,929
course I did already when I found that

01:52:36,150 --> 01:52:42,570
out so it turns out that's that you

01:52:39,929 --> 01:52:44,760
that's also a reason why crates I always

01:52:42,570 --> 01:52:45,300
flooded with those tiny libraries

01:52:44,760 --> 01:52:46,950
sometimes

01:52:45,300 --> 01:52:49,230
because you are forced to do that right

01:52:46,950 --> 01:52:51,480
and a different problem that it's

01:52:49,230 --> 01:52:53,850
connected to that is if if I had a

01:52:51,480 --> 01:52:56,160
situation where I had to fork a like

01:52:53,850 --> 01:52:58,380
like a little crate that I'm relying on

01:52:56,160 --> 01:53:00,780
same problem right I cannot temporarily

01:52:58,380 --> 01:53:04,220
embed it or something and use it

01:53:00,780 --> 01:53:06,300
I really have to I would have to

01:53:04,220 --> 01:53:09,780
republish it actually under a different

01:53:06,300 --> 01:53:12,510
name or try to get to the to the

01:53:09,780 --> 01:53:15,720
maintainer to take accept my patch or

01:53:12,510 --> 01:53:18,450
whatnot but last but not least the the

01:53:15,720 --> 01:53:21,630
biggest thing for me is I guess a legacy

01:53:18,450 --> 01:53:24,750
from id time which is meta programming

01:53:21,630 --> 01:53:28,650
and that's something that I that I

01:53:24,750 --> 01:53:31,530
really found lacking like I feel the

01:53:28,650 --> 01:53:33,330
lack of option and that sort of stuff

01:53:31,530 --> 01:53:35,940
now that I know it from rust everywhere

01:53:33,330 --> 01:53:38,580
else this is something I'm missing in

01:53:35,940 --> 01:53:42,900
rusts from the D times so what I mean by

01:53:38,580 --> 01:53:45,330
that is for example implicit compile

01:53:42,900 --> 01:53:47,610
time function execution I really I'm

01:53:45,330 --> 01:53:49,500
worried that this approach that rust is

01:53:47,610 --> 01:53:51,570
taking now to have that you have to

01:53:49,500 --> 01:53:53,520
annotate your function with Const to be

01:53:51,570 --> 01:53:55,980
able to run it at compile time is this

01:53:53,520 --> 01:53:58,800
C++ approach with accordance expert

01:53:55,980 --> 01:54:00,840
which i think is the wrong way to go

01:53:58,800 --> 01:54:03,420
because in the end the compiler is the

01:54:00,840 --> 01:54:05,940
guy who is possible who is capable of

01:54:03,420 --> 01:54:08,820
checking that for me right so why can't

01:54:05,940 --> 01:54:12,090
I rely on that instead of annotating

01:54:08,820 --> 01:54:14,270
everything and generic duck typing is

01:54:12,090 --> 01:54:17,340
something I'm really missing I have two

01:54:14,270 --> 01:54:19,500
generic functions I have to define what

01:54:17,340 --> 01:54:22,440
kind of T it is that I'm accepting here

01:54:19,500 --> 01:54:24,840
I cannot just you know use a t dot foo

01:54:22,440 --> 01:54:26,520
because I want the compiler to make sure

01:54:24,840 --> 01:54:28,950
T has a foo function

01:54:26,520 --> 01:54:33,030
I really have to come up with an import

01:54:28,950 --> 01:54:35,670
rate with the trait and that's something

01:54:33,030 --> 01:54:37,410
I think is limiting especially when

01:54:35,670 --> 01:54:39,390
working with external libraries where

01:54:37,410 --> 01:54:41,010
you have external trades there's

01:54:39,390 --> 01:54:43,500
situations where you cannot implement a

01:54:41,010 --> 01:54:45,360
trait for something or where you just

01:54:43,500 --> 01:54:49,670
want to be able to accept also types

01:54:45,360 --> 01:54:51,810
from external libraries like that and

01:54:49,670 --> 01:54:53,130
compile time reflection is something

01:54:51,810 --> 01:54:56,970
that's that's I think the biggest

01:54:53,130 --> 01:54:59,100
strength D ever has had and I really

01:54:56,970 --> 01:55:01,350
encourage people to look into it because

01:54:59,100 --> 01:55:03,720
I think it's something that I didn't see

01:55:01,350 --> 01:55:07,080
in any other language so far and one

01:55:03,720 --> 01:55:11,730
example that I just try to like like

01:55:07,080 --> 01:55:14,970
pseudocode style once a to translate to

01:55:11,730 --> 01:55:16,470
rust is this int function where in D you

01:55:14,970 --> 01:55:18,960
have this static F where you actually

01:55:16,470 --> 01:55:21,870
can introspect in two types at compile

01:55:18,960 --> 01:55:24,180
time and make sure that this is

01:55:21,870 --> 01:55:27,000
evaluated like only if the T can be

01:55:24,180 --> 01:55:29,820
reduced to an i-32 for example but of

01:55:27,000 --> 01:55:31,260
course it gets it goes way more complex

01:55:29,820 --> 01:55:33,540
and you can do way more things like

01:55:31,260 --> 01:55:36,090
looking into it something that would

01:55:33,540 --> 01:55:38,070
would be a parallel and rusts could be

01:55:36,090 --> 01:55:40,410
that you could say okay steady if this

01:55:38,070 --> 01:55:41,910
is implementing a certain trait or

01:55:40,410 --> 01:55:44,700
something like that and then have

01:55:41,910 --> 01:55:47,760
different code actually injected in in

01:55:44,700 --> 01:55:49,800
this generic function where I was

01:55:47,760 --> 01:55:52,050
missing this the most was when I wrote

01:55:49,800 --> 01:55:54,900
my first macro where I wanted to have

01:55:52,050 --> 01:55:58,800
these components like accessories to

01:55:54,900 --> 01:56:00,480
these components for my UI layer where I

01:55:58,800 --> 01:56:02,400
wanted to only maintain one list of

01:56:00,480 --> 01:56:04,740
components instead of having the risk

01:56:02,400 --> 01:56:06,900
that I forget to extend it in one end of

01:56:04,740 --> 01:56:09,660
the code base so I wrote this accessor

01:56:06,900 --> 01:56:14,010
macro that then actually generates those

01:56:09,660 --> 01:56:16,380
two accessor functions and while doing

01:56:14,010 --> 01:56:18,510
that I was thinking okay it would be

01:56:16,380 --> 01:56:20,340
super nice now if I could why are going

01:56:18,510 --> 01:56:23,100
through this list and implementing those

01:56:20,340 --> 01:56:26,010
accessories actually like check on the

01:56:23,100 --> 01:56:27,840
on the on the types and see okay this is

01:56:26,010 --> 01:56:30,570
implementing a certain trait so I do

01:56:27,840 --> 01:56:33,600
some additional work for that and that

01:56:30,570 --> 01:56:37,950
would be super like like nice in my

01:56:33,600 --> 01:56:40,460
opinion hmm I really try to reign

01:56:37,950 --> 01:56:40,460
through here

01:56:42,590 --> 01:56:50,710
so yeah thank you actually this was it

01:56:52,980 --> 01:57:01,120
okay thank you oh yeah this was so super

01:56:59,590 --> 01:57:02,730
super interesting thank you for your

01:57:01,120 --> 01:57:06,310
talk

01:57:02,730 --> 01:57:09,100
we have maybe a few comments not accrue

01:57:06,310 --> 01:57:10,960
like a real question and one in the

01:57:09,100 --> 01:57:13,720
assumed chat is are you talking about

01:57:10,960 --> 01:57:16,390
using local non publish crates while

01:57:13,720 --> 01:57:19,030
doing development or are you talking

01:57:16,390 --> 01:57:21,460
about publishing binaries that they're

01:57:19,030 --> 01:57:24,190
that depend on unpublished crates

01:57:21,460 --> 01:57:30,730
because you can do the former easily

01:57:24,190 --> 01:57:33,070
with cargo purge sections okay so I was

01:57:30,730 --> 01:57:35,170
actually talking about having a sub

01:57:33,070 --> 01:57:37,420
crate in my repository directly and

01:57:35,170 --> 01:57:39,550
relying on that and that's I couldn't

01:57:37,420 --> 01:57:41,320
figure out how to do that catch sections

01:57:39,550 --> 01:57:44,170
okay that's something I need to look

01:57:41,320 --> 01:57:48,070
like I'm you can basically overwrite the

01:57:44,170 --> 01:57:52,480
path which like in your dependency and

01:57:48,070 --> 01:57:55,150
can use like a like a local path or like

01:57:52,480 --> 01:57:59,250
your own kid path even progress ranch

01:57:55,150 --> 01:58:04,950
like an even like an unpublished branch

01:57:59,250 --> 01:58:11,050
okay good point I need to look into that

01:58:04,950 --> 01:58:14,710
path section oh yeah okay I think there

01:58:11,050 --> 01:58:17,310
are no more questions like that over

01:58:14,710 --> 01:58:17,310
some very detailed

01:58:17,820 --> 01:58:27,340
what's good yeah thank you for your talk

01:58:24,510 --> 01:58:30,970
if you have other questions for the

01:58:27,340 --> 01:58:35,250
speaker feel free to chat why metrics or

01:58:30,970 --> 01:58:39,100
soon contact we have a few more

01:58:35,250 --> 01:58:42,460
announcements and this wasn't the last

01:58:39,100 --> 01:58:44,920
rusty thing this week there is like a

01:58:42,460 --> 01:58:49,390
London rust meetup happening tomorrow

01:58:44,920 --> 01:58:53,110
and on Thursday is our famous hack and

01:58:49,390 --> 01:59:00,630
learn which would be happen in Berlin

01:58:53,110 --> 01:59:03,550
but I assume this is also online yeah

01:59:00,630 --> 01:59:05,580
great thank you for joining if anyone

01:59:03,550 --> 01:59:08,010
has any comments

01:59:05,580 --> 01:59:11,280
thank you for the technical help thank

01:59:08,010 --> 01:59:14,520
you all the speakers everyone who's

01:59:11,280 --> 01:59:23,760
joined if anyone wants to comment or

01:59:14,520 --> 01:59:26,660
give a note I had a great time nice -

01:59:23,760 --> 01:59:26,660
thanks so much

01:59:32,270 --> 01:59:42,420
cool okay then we then I see you

01:59:38,540 --> 01:59:45,810
tomorrow at the rest London Meetup and

01:59:42,420 --> 01:59:47,180
on first day at the Berlin or online I

01:59:45,810 --> 01:59:50,040
can learn

01:59:47,180 --> 01:59:54,140
thank you very much and see you next

01:59:50,040 --> 01:59:54,140

YouTube URL: https://www.youtube.com/watch?v=rpilJV-eIVw


