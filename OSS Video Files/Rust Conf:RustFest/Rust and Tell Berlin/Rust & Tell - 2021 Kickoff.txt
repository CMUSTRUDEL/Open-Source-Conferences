Title: Rust & Tell - 2021 Kickoff
Publication date: 2021-03-24
Playlist: Rust and Tell Berlin
Description: 
	Details: https://berline.rs/2021/03/23/rust-and-tell.html

00:00 Introduction
04:40 Ashley Williams: Rust Foundation
30:32 Paul Butler: Building a multiplayer WebAssembly game with Aper
55:16 Mario GarcÃ­a: Introduction to CI/CD for Rust with GitLab
Captions: 
	00:00:00,160 --> 00:00:06,000
yes and go to rost

00:00:03,280 --> 00:00:06,799
he will just like i said he will be the

00:00:06,000 --> 00:00:08,400
co-host

00:00:06,799 --> 00:00:10,480
for this meet-up and he will be

00:00:08,400 --> 00:00:14,559
monitoring the the matrix chat

00:00:10,480 --> 00:00:17,440
as well so

00:00:14,559 --> 00:00:19,119
we volunteered lately to keep running

00:00:17,440 --> 00:00:22,160
the meet up scott and me

00:00:19,119 --> 00:00:25,039
but we have a huge support from brian

00:00:22,160 --> 00:00:27,039
jan eric and ryan levick who kind of are

00:00:25,039 --> 00:00:29,439
currently busy on other

00:00:27,039 --> 00:00:30,960
other things so we kind of volunteered

00:00:29,439 --> 00:00:34,320
to take

00:00:30,960 --> 00:00:35,920
to keep running this meetup and the ros

00:00:34,320 --> 00:00:39,920
meetup is

00:00:35,920 --> 00:00:42,239
basically a place for everyone to share

00:00:39,920 --> 00:00:43,280
we don't expect necessarily an expert

00:00:42,239 --> 00:00:46,800
level from

00:00:43,280 --> 00:00:48,079
all angles we we take we are ready to

00:00:46,800 --> 00:00:50,480
consume content

00:00:48,079 --> 00:00:51,440
because we also want to know the

00:00:50,480 --> 00:00:53,680
struggles

00:00:51,440 --> 00:00:54,480
and these are the things that can help

00:00:53,680 --> 00:00:57,600
russ

00:00:54,480 --> 00:00:58,800
grow as a community also improve things

00:00:57,600 --> 00:01:02,879
that are lacking

00:00:58,800 --> 00:01:06,640
although rust has had a fragrant uh

00:01:02,879 --> 00:01:09,760
affiliate needs in terms of

00:01:06,640 --> 00:01:12,080
how how the the language has grown

00:01:09,760 --> 00:01:13,840
into mainstream for in a short in so

00:01:12,080 --> 00:01:15,840
much short amount of time

00:01:13,840 --> 00:01:17,920
but we still have feel like there are a

00:01:15,840 --> 00:01:19,840
lot of areas we need to improve and this

00:01:17,920 --> 00:01:20,479
is kind of a space where we kind of

00:01:19,840 --> 00:01:23,280
share

00:01:20,479 --> 00:01:24,320
have fun share our knowledge and also

00:01:23,280 --> 00:01:26,080
get to detect

00:01:24,320 --> 00:01:29,680
what are the things we are lacking in

00:01:26,080 --> 00:01:32,079
the community and try to fix that

00:01:29,680 --> 00:01:32,960
so it's really your community for

00:01:32,079 --> 00:01:37,040
everyone to

00:01:32,960 --> 00:01:37,040
come learn and grow together

00:01:37,840 --> 00:01:42,560
and for we follow the berlin code of

00:01:41,920 --> 00:01:44,560
conduct

00:01:42,560 --> 00:01:46,079
and which is accessible at berlin code

00:01:44,560 --> 00:01:49,200
of conduct.org

00:01:46,079 --> 00:01:49,920
if you notice anything inappropriate or

00:01:49,200 --> 00:01:52,320
things that

00:01:49,920 --> 00:01:54,799
you might not like please report

00:01:52,320 --> 00:01:58,000
privately or directly to us

00:01:54,799 --> 00:02:01,200
we will make sure to to fix that and

00:01:58,000 --> 00:02:02,880
improve things so it's such that we can

00:02:01,200 --> 00:02:06,159
create a community that is

00:02:02,880 --> 00:02:06,159
enjoyable for everyone

00:02:07,280 --> 00:02:12,160
and ros intel meetup is available online

00:02:11,200 --> 00:02:15,360
here on this

00:02:12,160 --> 00:02:18,879
zoom and we also have breakout rooms

00:02:15,360 --> 00:02:20,800
uh regarding the breakout rooms uh

00:02:18,879 --> 00:02:22,640
when you feel like you are alone on a

00:02:20,800 --> 00:02:25,840
breakout room you can always

00:02:22,640 --> 00:02:28,000
uh move out from that room and then we

00:02:25,840 --> 00:02:29,840
as the admin especially and eric will us

00:02:28,000 --> 00:02:31,360
make sure to assign you to another room

00:02:29,840 --> 00:02:33,920
where there are people because

00:02:31,360 --> 00:02:36,160
sometimes people might leave your

00:02:33,920 --> 00:02:39,599
breakout room and you

00:02:36,160 --> 00:02:41,120
you find yourself alone there so there

00:02:39,599 --> 00:02:43,519
is always an option to come back

00:02:41,120 --> 00:02:45,599
on the main one and then we can reassign

00:02:43,519 --> 00:02:46,959
and we also have matrix charts available

00:02:45,599 --> 00:02:48,080
where you will be able to post your

00:02:46,959 --> 00:02:50,400
questions

00:02:48,080 --> 00:02:51,120
we have the live stream currently on

00:02:50,400 --> 00:02:55,680
youtube

00:02:51,120 --> 00:02:57,599
so you also can type your questions any

00:02:55,680 --> 00:03:00,400
time in the chat here on zoom or

00:02:57,599 --> 00:03:02,840
on the matrix chat will make sure to

00:03:00,400 --> 00:03:05,840
forward your question to the speaker

00:03:02,840 --> 00:03:05,840
afterwards

00:03:06,239 --> 00:03:10,879
another word is like we want you because

00:03:08,560 --> 00:03:13,519
this community is

00:03:10,879 --> 00:03:15,040
by us and for us so we are always

00:03:13,519 --> 00:03:18,159
looking for speakers

00:03:15,040 --> 00:03:19,280
on any level to to make sure we keep

00:03:18,159 --> 00:03:22,080
running the

00:03:19,280 --> 00:03:23,840
the meet up and also just like the first

00:03:22,080 --> 00:03:25,519
goal i highlighted that we want to

00:03:23,840 --> 00:03:27,680
create a space for everyone

00:03:25,519 --> 00:03:28,640
to be comfortable with in the ros

00:03:27,680 --> 00:03:31,680
community

00:03:28,640 --> 00:03:33,519
so we are always looking for speakers if

00:03:31,680 --> 00:03:34,879
you want to speak even if it is your

00:03:33,519 --> 00:03:37,440
first time we

00:03:34,879 --> 00:03:38,640
will support you guide you through this

00:03:37,440 --> 00:03:41,360
process so you can

00:03:38,640 --> 00:03:42,480
give us your talk because we always have

00:03:41,360 --> 00:03:46,720
something to share

00:03:42,480 --> 00:03:49,920
and to learn from everyone

00:03:46,720 --> 00:03:52,720
uh today we will have uh

00:03:49,920 --> 00:03:54,959
three talks the first talk is by ashley

00:03:52,720 --> 00:03:56,400
williams and she will be talking about

00:03:54,959 --> 00:03:59,280
ross foundation

00:03:56,400 --> 00:04:00,319
and the second talk will be from paul

00:03:59,280 --> 00:04:02,560
butler she

00:04:00,319 --> 00:04:05,360
he will be talking about building a

00:04:02,560 --> 00:04:07,360
multiplayer web assembly game with upper

00:04:05,360 --> 00:04:08,560
and then the last talk we have

00:04:07,360 --> 00:04:11,200
introduction to

00:04:08,560 --> 00:04:12,560
ci cd for ross with jitlab and that talk

00:04:11,200 --> 00:04:15,760
will be given by

00:04:12,560 --> 00:04:18,799
mario garcia so

00:04:15,760 --> 00:04:21,759
thank you everyone for attending i

00:04:18,799 --> 00:04:22,880
think they it's been highlighted that if

00:04:21,759 --> 00:04:26,400
we run more than

00:04:22,880 --> 00:04:29,520
100 attendees into the

00:04:26,400 --> 00:04:30,720
zoom zoom some people will have to go

00:04:29,520 --> 00:04:33,280
directly onto the

00:04:30,720 --> 00:04:34,560
live stream because zoom has this kind

00:04:33,280 --> 00:04:37,199
of restriction

00:04:34,560 --> 00:04:39,120
so yes and we also hope that will be the

00:04:37,199 --> 00:04:40,080
case because we want to break the record

00:04:39,120 --> 00:04:43,120
why not

00:04:40,080 --> 00:04:43,759
so without further ado i think i will

00:04:43,120 --> 00:04:48,000
let

00:04:43,759 --> 00:04:48,000
ashley uh kick off this

00:04:55,440 --> 00:04:59,120
all right can everybody hear me

00:04:59,440 --> 00:05:05,919
i forget that no one can unmute so

00:05:02,800 --> 00:05:06,400
um hi my name is ashley williams i'm a

00:05:05,919 --> 00:05:09,199
member

00:05:06,400 --> 00:05:10,960
of the rust core team and have been

00:05:09,199 --> 00:05:13,759
variously

00:05:10,960 --> 00:05:15,759
a member or leader of many of the teams

00:05:13,759 --> 00:05:17,840
in the russ governance structure

00:05:15,759 --> 00:05:19,680
but i'm speaking to you today as the

00:05:17,840 --> 00:05:22,560
interim executive director

00:05:19,680 --> 00:05:24,479
of a fantastic new organization that you

00:05:22,560 --> 00:05:25,840
may have heard of called the rust

00:05:24,479 --> 00:05:28,720
foundation

00:05:25,840 --> 00:05:31,120
um what i'd like to do in the talk today

00:05:28,720 --> 00:05:32,160
and i only have 20 minutes so it is

00:05:31,120 --> 00:05:34,639
going to be a

00:05:32,160 --> 00:05:35,360
wild ride i always make way too many

00:05:34,639 --> 00:05:37,600
slides

00:05:35,360 --> 00:05:39,840
uh is i'd really like to talk to you

00:05:37,600 --> 00:05:42,880
about the philosophical kind of

00:05:39,840 --> 00:05:45,600
background behind the foundation what's

00:05:42,880 --> 00:05:46,479
motivating it and help you try to

00:05:45,600 --> 00:05:50,000
understand

00:05:46,479 --> 00:05:53,120
why we are so excited about it

00:05:50,000 --> 00:05:55,199
um there's probably eight talks worth of

00:05:53,120 --> 00:05:56,400
content about how this organization is

00:05:55,199 --> 00:05:58,880
set up and maybe

00:05:56,400 --> 00:06:00,479
i can come back and talk about those so

00:05:58,880 --> 00:06:02,000
if you have a particular question and i

00:06:00,479 --> 00:06:04,240
don't end up answering in

00:06:02,000 --> 00:06:05,039
in this talk please don't hesitate to

00:06:04,240 --> 00:06:08,960
reach out

00:06:05,039 --> 00:06:12,160
um infamously i am a g underscore dubs

00:06:08,960 --> 00:06:14,479
on twitter if you follow me i'm sorry

00:06:12,160 --> 00:06:17,440
um but also if you follow me on twitter

00:06:14,479 --> 00:06:22,400
some of these ideas might be

00:06:17,440 --> 00:06:24,479
uh familiar all right so let's go

00:06:22,400 --> 00:06:26,479
all right so first off if you are

00:06:24,479 --> 00:06:27,199
unaware uh the russ foundation has a

00:06:26,479 --> 00:06:31,039
website

00:06:27,199 --> 00:06:32,800
at foundation.rusdashlang.org and

00:06:31,039 --> 00:06:34,080
you can see a ton of stuff here but what

00:06:32,800 --> 00:06:35,919
i'd like to draw your attention

00:06:34,080 --> 00:06:37,280
to is the tagline that we've written

00:06:35,919 --> 00:06:39,520
here which says

00:06:37,280 --> 00:06:41,199
a new approach to sustaining and growing

00:06:39,520 --> 00:06:43,919
a large participatory

00:06:41,199 --> 00:06:45,759
open source ecosystem and so if you

00:06:43,919 --> 00:06:47,440
haven't attended a talk of mine before

00:06:45,759 --> 00:06:49,759
you know i like to kind of dig

00:06:47,440 --> 00:06:51,520
into really simple kind of tactical

00:06:49,759 --> 00:06:54,639
questions early on

00:06:51,520 --> 00:06:55,120
so uh i'm gonna ask the question why

00:06:54,639 --> 00:06:58,240
does

00:06:55,120 --> 00:07:01,599
open source matter keep it simple

00:06:58,240 --> 00:07:04,080
right why does open source matter at all

00:07:01,599 --> 00:07:05,280
and i might even grow that just a little

00:07:04,080 --> 00:07:07,840
bit because of the

00:07:05,280 --> 00:07:09,360
kind of current zeitgeist in the open

00:07:07,840 --> 00:07:13,520
source ecosystem

00:07:09,360 --> 00:07:16,000
which is what does software freedom

00:07:13,520 --> 00:07:17,680
mean now there's a lot of different

00:07:16,000 --> 00:07:19,759
answers to this question but

00:07:17,680 --> 00:07:21,120
kind of canonically what we've seen is

00:07:19,759 --> 00:07:24,560
people tend towards

00:07:21,120 --> 00:07:27,919
tend to talk about licenses and

00:07:24,560 --> 00:07:30,319
they will talk often about these four

00:07:27,919 --> 00:07:31,440
essential freedoms of software which

00:07:30,319 --> 00:07:34,000
were established by the

00:07:31,440 --> 00:07:35,919
new project which is stewarded by the

00:07:34,000 --> 00:07:38,000
free software foundation which you may

00:07:35,919 --> 00:07:38,960
or may not be aware of and is currently

00:07:38,000 --> 00:07:40,479
in the news

00:07:38,960 --> 00:07:42,800
we're not going to talk about that

00:07:40,479 --> 00:07:45,280
specific situation exactly

00:07:42,800 --> 00:07:47,039
but what i do want to talk about is

00:07:45,280 --> 00:07:49,360
these four essential freedoms

00:07:47,039 --> 00:07:51,039
and why to a certain extent i think

00:07:49,360 --> 00:07:53,120
we're missing the forest

00:07:51,039 --> 00:07:54,319
for the trees when we talk about

00:07:53,120 --> 00:07:56,560
software freedom

00:07:54,319 --> 00:07:58,160
so these four essential freedoms set

00:07:56,560 --> 00:08:00,000
aside the idea that you should be able

00:07:58,160 --> 00:08:00,720
to have freedom to run the program as

00:08:00,000 --> 00:08:03,039
you wish

00:08:00,720 --> 00:08:03,840
to study how it works to redistribute

00:08:03,039 --> 00:08:07,759
copies

00:08:03,840 --> 00:08:09,440
if you've ever read a a software license

00:08:07,759 --> 00:08:11,039
these are kind of the aspects that a

00:08:09,440 --> 00:08:13,199
license will talk about

00:08:11,039 --> 00:08:14,800
but what i'd like to point out today and

00:08:13,199 --> 00:08:16,800
what i think is some of the motivation

00:08:14,800 --> 00:08:20,240
behind the rust foundation

00:08:16,800 --> 00:08:24,240
is that the really killer awesome

00:08:20,240 --> 00:08:27,759
aspect of open source is not actually

00:08:24,240 --> 00:08:29,759
this type of freedom it doesn't really

00:08:27,759 --> 00:08:33,200
have to do with licenses

00:08:29,759 --> 00:08:34,399
but instead it's this idea of

00:08:33,200 --> 00:08:36,159
collaboration

00:08:34,399 --> 00:08:38,000
and the reason i bring this up is

00:08:36,159 --> 00:08:40,159
because when i think about using

00:08:38,000 --> 00:08:41,599
open source but i think about the work i

00:08:40,159 --> 00:08:44,080
do in open source i'm

00:08:41,599 --> 00:08:45,440
overwhelmed by the idea that i don't

00:08:44,080 --> 00:08:47,200
feel free

00:08:45,440 --> 00:08:49,040
if we were in person this would be the

00:08:47,200 --> 00:08:50,399
moment where i'd ask how many open

00:08:49,040 --> 00:08:52,399
source maintainers are

00:08:50,399 --> 00:08:54,640
in the audience and then i would say

00:08:52,399 --> 00:08:58,080
keep your hand up if you're feeling

00:08:54,640 --> 00:09:00,480
you know okay not completely underwater

00:08:58,080 --> 00:09:01,519
right and we'd probably take a look over

00:09:00,480 --> 00:09:03,680
that landscape

00:09:01,519 --> 00:09:05,360
and what we'd see is a lot of folks who

00:09:03,680 --> 00:09:07,440
might be open source maintainers that

00:09:05,360 --> 00:09:10,160
are feeling really overwhelmed

00:09:07,440 --> 00:09:11,120
i think the promise of open source and

00:09:10,160 --> 00:09:12,880
software freedom

00:09:11,120 --> 00:09:14,320
still exists today but i think we

00:09:12,880 --> 00:09:16,080
haven't achieved it yet

00:09:14,320 --> 00:09:18,560
and i think part of that is because of

00:09:16,080 --> 00:09:21,279
how we focused on licensing

00:09:18,560 --> 00:09:22,560
when i think what we need to focus on is

00:09:21,279 --> 00:09:25,600
this element

00:09:22,560 --> 00:09:28,560
of participation and in particular

00:09:25,600 --> 00:09:29,760
what i like to call the freedom to

00:09:28,560 --> 00:09:32,320
collaborate

00:09:29,760 --> 00:09:33,920
so this is my original pitch and so

00:09:32,320 --> 00:09:36,320
we'll talk a little bit

00:09:33,920 --> 00:09:38,560
about what the freedom to collaborate

00:09:36,320 --> 00:09:42,480
means and what it means for organizing

00:09:38,560 --> 00:09:44,800
open source projects today so

00:09:42,480 --> 00:09:47,040
when we kicked off the rust foundation

00:09:44,800 --> 00:09:49,360
we had our very first board meeting on

00:09:47,040 --> 00:09:52,399
february 9th and this was the third

00:09:49,360 --> 00:09:54,399
slide in my deck to the board uh this is

00:09:52,399 --> 00:09:56,080
a composite image that i created of the

00:09:54,399 --> 00:09:58,480
github avatars of

00:09:56,080 --> 00:10:01,680
all of the folks on the rust teams in

00:09:58,480 --> 00:10:05,839
2018 when i gave my core team keynote

00:10:01,680 --> 00:10:07,839
um at rustkoff and

00:10:05,839 --> 00:10:09,040
the reason i shared this slide is that

00:10:07,839 --> 00:10:11,120
with everything that

00:10:09,040 --> 00:10:13,360
the board of the rust foundation does

00:10:11,120 --> 00:10:14,800
every decision we make i want us to be

00:10:13,360 --> 00:10:18,000
asking the question

00:10:14,800 --> 00:10:21,360
how does this help the maintainers

00:10:18,000 --> 00:10:25,279
of rust and this is the driving

00:10:21,360 --> 00:10:27,680
force behind the foundation

00:10:25,279 --> 00:10:29,519
and this is an interesting thing and a

00:10:27,680 --> 00:10:31,920
lot of people might not realize this but

00:10:29,519 --> 00:10:32,480
the key word in that previous slide is

00:10:31,920 --> 00:10:36,000
the word

00:10:32,480 --> 00:10:37,839
maintainer and somewhat artificially

00:10:36,000 --> 00:10:39,839
i have created this distinction in my

00:10:37,839 --> 00:10:42,320
head and i'm eager to evangelize it

00:10:39,839 --> 00:10:44,959
which is the concept of a maintainer

00:10:42,320 --> 00:10:45,600
versus the concept of a contributor and

00:10:44,959 --> 00:10:48,240
how they

00:10:45,600 --> 00:10:49,680
operate inside a large open source

00:10:48,240 --> 00:10:52,000
ecosystem

00:10:49,680 --> 00:10:53,920
so it's crushing me that i can't be like

00:10:52,000 --> 00:10:55,440
do people think that these are synonyms

00:10:53,920 --> 00:10:56,000
and like see how many people raise their

00:10:55,440 --> 00:10:58,000
hand because

00:10:56,000 --> 00:11:00,800
oftentimes you hear people use this word

00:10:58,000 --> 00:11:03,040
maintainer and contributor

00:11:00,800 --> 00:11:05,040
similarly and yet what i hope to do by

00:11:03,040 --> 00:11:06,959
the end of this talk is to make them be

00:11:05,040 --> 00:11:08,720
actually a very clear distinction

00:11:06,959 --> 00:11:10,959
and that the health of both of these

00:11:08,720 --> 00:11:14,959
classes of participants in open source

00:11:10,959 --> 00:11:18,720
is critical to that project survival

00:11:14,959 --> 00:11:19,519
all right so as a basic definition what

00:11:18,720 --> 00:11:22,480
i would say

00:11:19,519 --> 00:11:23,519
is a maintainer is a person that makes

00:11:22,480 --> 00:11:26,959
contributors

00:11:23,519 --> 00:11:28,720
to a project possible so

00:11:26,959 --> 00:11:30,720
fundamentally you could imagine this as

00:11:28,720 --> 00:11:32,000
a contributor is the type of person who

00:11:30,720 --> 00:11:35,279
makes a pr

00:11:32,000 --> 00:11:37,279
and a maintainer reviews and merges a pr

00:11:35,279 --> 00:11:38,320
now at the very beginning of an open

00:11:37,279 --> 00:11:41,279
source project

00:11:38,320 --> 00:11:43,120
this is usually the same person in fact

00:11:41,279 --> 00:11:44,720
an open source project usually starts

00:11:43,120 --> 00:11:47,360
with just one person

00:11:44,720 --> 00:11:48,079
and they put on this single hat of

00:11:47,360 --> 00:11:51,959
contributor

00:11:48,079 --> 00:11:55,360
and maintainer but as that project grows

00:11:51,959 --> 00:11:56,000
overwhelmingly we find that people need

00:11:55,360 --> 00:11:57,920
to have

00:11:56,000 --> 00:12:00,320
slightly different hats and that the

00:11:57,920 --> 00:12:01,440
original person kind of holds on to this

00:12:00,320 --> 00:12:03,440
maintainer role

00:12:01,440 --> 00:12:06,079
whereas there's a large influx of

00:12:03,440 --> 00:12:09,600
contributors that come in

00:12:06,079 --> 00:12:12,160
so when we talk about rust now

00:12:09,600 --> 00:12:13,440
with rust being so huge i would say in

00:12:12,160 --> 00:12:16,399
general that rust

00:12:13,440 --> 00:12:17,120
team members are part of this maintainer

00:12:16,399 --> 00:12:19,760
class

00:12:17,120 --> 00:12:21,360
and then there's a huge set of folks who

00:12:19,760 --> 00:12:23,760
contribute to rust

00:12:21,360 --> 00:12:24,480
underneath so just to run a couple of

00:12:23,760 --> 00:12:27,360
numbers

00:12:24,480 --> 00:12:29,440
russ governance is really uniquely

00:12:27,360 --> 00:12:29,839
distributed and delegated which is to

00:12:29,440 --> 00:12:31,360
say

00:12:29,839 --> 00:12:33,120
we have a lot of people who are

00:12:31,360 --> 00:12:34,240
participating in rust and they're also

00:12:33,120 --> 00:12:37,760
participating in a

00:12:34,240 --> 00:12:38,639
leadership role so russ has 10 top level

00:12:37,760 --> 00:12:41,279
teams

00:12:38,639 --> 00:12:43,279
54 project groups which could either be

00:12:41,279 --> 00:12:45,440
top level or within a team

00:12:43,279 --> 00:12:46,959
and amongst the people who are members

00:12:45,440 --> 00:12:47,320
of those teams and project groups we

00:12:46,959 --> 00:12:50,320
have

00:12:47,320 --> 00:12:52,240
260 folks now that is not

00:12:50,320 --> 00:12:53,440
solely contributors those are people who

00:12:52,240 --> 00:12:57,120
are leading

00:12:53,440 --> 00:12:59,519
contributors it's a large number

00:12:57,120 --> 00:13:01,760
all right and then as of october and

00:12:59,519 --> 00:13:02,480
2020 when i last ran these numbers on

00:13:01,760 --> 00:13:06,000
github

00:13:02,480 --> 00:13:07,560
we had 5503 all-time contributors and

00:13:06,000 --> 00:13:10,880
that was averaging around

00:13:07,560 --> 00:13:14,000
350 contributors per release

00:13:10,880 --> 00:13:15,680
and growing now to to note this is just

00:13:14,000 --> 00:13:18,320
for rustling slash

00:13:15,680 --> 00:13:19,519
rust which does not include all of the

00:13:18,320 --> 00:13:22,560
other projects that are

00:13:19,519 --> 00:13:24,320
in the rust ecosystem which is many even

00:13:22,560 --> 00:13:26,240
under the official umbrella of rust

00:13:24,320 --> 00:13:28,800
there's significantly more to

00:13:26,240 --> 00:13:29,680
rust than just the compiler or the

00:13:28,800 --> 00:13:32,720
language

00:13:29,680 --> 00:13:35,200
you can include crates io and cargo

00:13:32,720 --> 00:13:36,160
rust dock there's several things so this

00:13:35,200 --> 00:13:38,240
is contributors

00:13:36,160 --> 00:13:41,600
just to wrestling rust the number is

00:13:38,240 --> 00:13:44,920
actually significantly higher

00:13:41,600 --> 00:13:46,399
all right and then in addition we've had

00:13:44,920 --> 00:13:49,680
00:13:46,399 --> 00:13:52,959
new people as of this year contribute to

00:13:49,680 --> 00:13:57,120
the github.com wrestling github org

00:13:52,959 --> 00:14:00,560
and we've had 1467 new people

00:13:57,120 --> 00:14:03,519
uh contribute to erlo which is our

00:14:00,560 --> 00:14:04,480
user uh forums and if you're not

00:14:03,519 --> 00:14:05,920
familiar with that

00:14:04,480 --> 00:14:08,160
you should definitely check those out we

00:14:05,920 --> 00:14:10,800
have both internals and users

00:14:08,160 --> 00:14:11,760
um to be able to discuss uh things of

00:14:10,800 --> 00:14:14,160
rust nature

00:14:11,760 --> 00:14:16,240
so there's a lot of new people showing

00:14:14,160 --> 00:14:19,760
up and they are showing up in this

00:14:16,240 --> 00:14:19,760
contributor role

00:14:19,839 --> 00:14:23,680
all right and then finally these are

00:14:21,839 --> 00:14:27,920
some of my most favorite numbers

00:14:23,680 --> 00:14:31,360
but rust has 471 merged rfcs

00:14:27,920 --> 00:14:33,199
if you're new to rust rfcs are documents

00:14:31,360 --> 00:14:36,000
that we create in a process to make

00:14:33,199 --> 00:14:38,079
large decisions in the rust project

00:14:36,000 --> 00:14:39,680
um all of the large decisions happen

00:14:38,079 --> 00:14:40,480
there and it's a very transparent

00:14:39,680 --> 00:14:46,199
process

00:14:40,480 --> 00:14:49,519
um for those 471 merged rfcs we've had

00:14:46,199 --> 00:14:50,480
1128 unique individuals participating in

00:14:49,519 --> 00:14:52,720
rfcs

00:14:50,480 --> 00:14:54,560
that is an incredibly large number of

00:14:52,720 --> 00:14:56,880
people to be making

00:14:54,560 --> 00:14:58,000
these high level decisions in the rust

00:14:56,880 --> 00:15:00,240
project and i think it

00:14:58,000 --> 00:15:02,240
is a huge testament to what we've built

00:15:00,240 --> 00:15:02,800
that we've been able to include those

00:15:02,240 --> 00:15:04,959
people

00:15:02,800 --> 00:15:06,959
but the fun thing to think about is rust

00:15:04,959 --> 00:15:09,839
is just at this moment

00:15:06,959 --> 00:15:11,360
of this inflection curve of adoption and

00:15:09,839 --> 00:15:14,399
while these big numbers

00:15:11,360 --> 00:15:15,120
are big these big numbers are going to

00:15:14,399 --> 00:15:18,079
get

00:15:15,120 --> 00:15:20,560
bigger and that's when i get a little

00:15:18,079 --> 00:15:20,560
nervous

00:15:20,880 --> 00:15:27,440
so uh some of you may have joined

00:15:24,240 --> 00:15:29,440
because you saw me tweet out this image

00:15:27,440 --> 00:15:31,600
and this is an image that has kind of

00:15:29,440 --> 00:15:32,000
been stuck in my head for a very long

00:15:31,600 --> 00:15:35,120
time

00:15:32,000 --> 00:15:37,040
probably the last five years or so

00:15:35,120 --> 00:15:38,720
and it is what keeps me up at night and

00:15:37,040 --> 00:15:41,199
is what motivates the work that i'm

00:15:38,720 --> 00:15:44,480
currently doing at the rust foundation

00:15:41,199 --> 00:15:45,120
so first off i want to make it very

00:15:44,480 --> 00:15:48,079
clear

00:15:45,120 --> 00:15:48,560
that this is a sketch that i made about

00:15:48,079 --> 00:15:51,600
three

00:15:48,560 --> 00:15:54,720
hours ago and it is not scientific

00:15:51,600 --> 00:15:57,440
and it is almost certainly inaccurate

00:15:54,720 --> 00:15:58,800
but because it is likely inaccurate and

00:15:57,440 --> 00:16:00,720
not scientific what i

00:15:58,800 --> 00:16:03,440
want you to get the sense of from this

00:16:00,720 --> 00:16:06,560
sketch is the idea of thinking about

00:16:03,440 --> 00:16:08,240
how these constituencies grow and react

00:16:06,560 --> 00:16:10,160
to each other over time

00:16:08,240 --> 00:16:11,839
because i think understanding this

00:16:10,160 --> 00:16:13,279
system is the route to finding

00:16:11,839 --> 00:16:16,079
sustainability in an

00:16:13,279 --> 00:16:17,199
open source project so if you have

00:16:16,079 --> 00:16:20,160
criticisms of

00:16:17,199 --> 00:16:20,639
this document i am super excited for

00:16:20,160 --> 00:16:22,959
that

00:16:20,639 --> 00:16:24,480
it is sketchy so that it starts a

00:16:22,959 --> 00:16:26,959
conversation

00:16:24,480 --> 00:16:28,240
so with that let's take a look at this

00:16:26,959 --> 00:16:31,360
in particular

00:16:28,240 --> 00:16:32,160
so there's a project here this kind of

00:16:31,360 --> 00:16:34,240
represents an

00:16:32,160 --> 00:16:36,240
open source project the y-axis

00:16:34,240 --> 00:16:39,440
represents number of humans

00:16:36,240 --> 00:16:41,680
and the x-axis is overtime

00:16:39,440 --> 00:16:42,639
so you can see if you look right at the

00:16:41,680 --> 00:16:44,560
beginning of time

00:16:42,639 --> 00:16:46,000
clearly this is already inaccurate

00:16:44,560 --> 00:16:48,320
because every project

00:16:46,000 --> 00:16:50,880
starts with basically no users no

00:16:48,320 --> 00:16:52,959
commenters and probably one maintainer

00:16:50,880 --> 00:16:56,079
so we're starting our timeline a little

00:16:52,959 --> 00:16:59,040
bit a little bit later on in the process

00:16:56,079 --> 00:17:00,560
but looking at this what we can see is

00:16:59,040 --> 00:17:02,639
we start with

00:17:00,560 --> 00:17:04,240
we have more people working on the

00:17:02,639 --> 00:17:05,760
project maintaining the project

00:17:04,240 --> 00:17:08,000
contributing to the project

00:17:05,760 --> 00:17:09,360
then we have using it and also quite

00:17:08,000 --> 00:17:11,280
classically we have more people

00:17:09,360 --> 00:17:12,240
commenting on it than people who are

00:17:11,280 --> 00:17:14,959
using it

00:17:12,240 --> 00:17:15,520
and then we can take a look at how these

00:17:14,959 --> 00:17:20,240
grow

00:17:15,520 --> 00:17:21,199
over time so as the project progresses

00:17:20,240 --> 00:17:23,839
what we see

00:17:21,199 --> 00:17:25,039
is that we see a growth in contributors

00:17:23,839 --> 00:17:27,679
alongside the growth

00:17:25,039 --> 00:17:28,960
of users as well as the growth of

00:17:27,679 --> 00:17:31,360
commenters whereas

00:17:28,960 --> 00:17:32,000
the maintainer level tends to stay

00:17:31,360 --> 00:17:34,240
around the

00:17:32,000 --> 00:17:36,160
same number and if we take a look at

00:17:34,240 --> 00:17:37,600
some of these ratios thinking about the

00:17:36,160 --> 00:17:39,600
number of maintainers

00:17:37,600 --> 00:17:41,679
who have to be helping those number of

00:17:39,600 --> 00:17:42,720
contributors responding to those number

00:17:41,679 --> 00:17:44,960
of commenters

00:17:42,720 --> 00:17:46,640
that ratio is starting to grow quite

00:17:44,960 --> 00:17:48,799
dramatically

00:17:46,640 --> 00:17:51,120
as time moves on i think we hit a

00:17:48,799 --> 00:17:53,919
critical spot where the number of users

00:17:51,120 --> 00:17:54,880
is actually surpassing the number of

00:17:53,919 --> 00:17:56,640
contributors

00:17:54,880 --> 00:17:58,799
and that you have a lot of folks who are

00:17:56,640 --> 00:17:59,120
able to use and comment on your software

00:17:58,799 --> 00:18:02,400
but

00:17:59,120 --> 00:18:04,400
not able to contribute back and what you

00:18:02,400 --> 00:18:07,760
should also note is on that maintainer

00:18:04,400 --> 00:18:12,000
line that number is starting to slide

00:18:07,760 --> 00:18:12,000
down and then finally

00:18:12,240 --> 00:18:18,640
at the end of time in this scenario

00:18:16,080 --> 00:18:19,280
what we see is we have both commenters

00:18:18,640 --> 00:18:21,919
and users

00:18:19,280 --> 00:18:22,320
growing exponentially and we start to

00:18:21,919 --> 00:18:24,960
see

00:18:22,320 --> 00:18:27,120
a dip in maintainers and contributors

00:18:24,960 --> 00:18:29,039
are staying flat

00:18:27,120 --> 00:18:30,240
now i've drawn this in this way because

00:18:29,039 --> 00:18:33,120
this is how i've seen

00:18:30,240 --> 00:18:35,280
a lot of a lot of open source projects

00:18:33,120 --> 00:18:37,520
play out and this starts to be around

00:18:35,280 --> 00:18:38,400
the time where you feel the velocity of

00:18:37,520 --> 00:18:40,799
the project

00:18:38,400 --> 00:18:43,039
slowing down a lot of people talk about

00:18:40,799 --> 00:18:44,960
the hype cycle of projects where oh

00:18:43,039 --> 00:18:46,559
everyone's so excited at the beginning

00:18:44,960 --> 00:18:48,880
but then eventually

00:18:46,559 --> 00:18:50,880
you know they kind of go to the next new

00:18:48,880 --> 00:18:53,679
thing and people often blame

00:18:50,880 --> 00:18:55,360
uh you know the people chasing those

00:18:53,679 --> 00:18:57,679
things for this reaction but i think

00:18:55,360 --> 00:19:00,400
that's an inversion of the problem

00:18:57,679 --> 00:19:02,000
whereas what happens is these projects

00:19:00,400 --> 00:19:04,880
tend to slow down

00:19:02,000 --> 00:19:05,840
because they haven't found a way to

00:19:04,880 --> 00:19:07,520
increase

00:19:05,840 --> 00:19:10,000
the number of contributors and

00:19:07,520 --> 00:19:12,880
maintainers to be able to support their

00:19:10,000 --> 00:19:13,440
growth and so their growth to a certain

00:19:12,880 --> 00:19:15,840
extent

00:19:13,440 --> 00:19:16,720
stalls the project and then the project

00:19:15,840 --> 00:19:19,280
stalls out

00:19:16,720 --> 00:19:20,000
we move on to something new this is the

00:19:19,280 --> 00:19:22,559
future

00:19:20,000 --> 00:19:23,280
that i don't want and what i'm trying to

00:19:22,559 --> 00:19:26,640
focus on

00:19:23,280 --> 00:19:29,039
is how can we change these lines

00:19:26,640 --> 00:19:29,679
in order to build a healthier and more

00:19:29,039 --> 00:19:32,880
exciting

00:19:29,679 --> 00:19:34,960
future for rust so

00:19:32,880 --> 00:19:36,559
we're talking about maintainers what is

00:19:34,960 --> 00:19:38,480
this plight of maintainers i think

00:19:36,559 --> 00:19:40,559
there's a lot about this role

00:19:38,480 --> 00:19:41,919
because we haven't given it a name that

00:19:40,559 --> 00:19:44,080
we don't pay attention to

00:19:41,919 --> 00:19:46,160
and if we do we'll be able to figure out

00:19:44,080 --> 00:19:48,720
some ways to help focus on it

00:19:46,160 --> 00:19:51,600
so in particular i would say maintainer

00:19:48,720 --> 00:19:54,400
work requires incredibly high context

00:19:51,600 --> 00:19:55,679
and very high consistency you need to

00:19:54,400 --> 00:19:57,600
really have a sense of

00:19:55,679 --> 00:19:58,960
everything that's kind of going on

00:19:57,600 --> 00:20:02,080
inside of your project

00:19:58,960 --> 00:20:03,840
and you need to be available at many

00:20:02,080 --> 00:20:05,600
many different times to be able to field

00:20:03,840 --> 00:20:06,400
questions to be able to respond to

00:20:05,600 --> 00:20:08,559
events

00:20:06,400 --> 00:20:11,039
and so if you're hearing these aspects

00:20:08,559 --> 00:20:13,600
of high context and high consistency

00:20:11,039 --> 00:20:15,440
you'll realize that as a volunteer it's

00:20:13,600 --> 00:20:18,240
very difficult to meet those

00:20:15,440 --> 00:20:20,480
aspects right and what i'd want to call

00:20:18,240 --> 00:20:24,240
out is as we think about maintainership

00:20:20,480 --> 00:20:24,240
being something from a volunteer

00:20:24,320 --> 00:20:28,240
if you have the misfortune to succeed in

00:20:27,120 --> 00:20:30,559
open source

00:20:28,240 --> 00:20:31,440
maintainership is going to become a

00:20:30,559 --> 00:20:35,039
full-time

00:20:31,440 --> 00:20:37,600
job however it's really rarely the case

00:20:35,039 --> 00:20:39,919
that we see that open source maintainers

00:20:37,600 --> 00:20:41,919
actually get compensated for their work

00:20:39,919 --> 00:20:43,840
the way a full-time job might

00:20:41,919 --> 00:20:45,919
i think we're at a moment right now in

00:20:43,840 --> 00:20:49,360
open source where we're seeing a lot of

00:20:45,919 --> 00:20:52,159
interesting um different attempts

00:20:49,360 --> 00:20:53,200
at solutions uh the rust foundation is

00:20:52,159 --> 00:20:55,280
throwing its hat

00:20:53,200 --> 00:20:56,720
into that but there's all sorts of ones

00:20:55,280 --> 00:20:58,799
like the open collective

00:20:56,720 --> 00:21:00,000
there's github sponsors kind of the

00:20:58,799 --> 00:21:03,039
whole micro

00:21:00,000 --> 00:21:05,039
finance area

00:21:03,039 --> 00:21:06,240
we're taking a different path from that

00:21:05,039 --> 00:21:07,840
but there's a lot of

00:21:06,240 --> 00:21:09,600
efforts right now that you would call

00:21:07,840 --> 00:21:13,039
under this open source

00:21:09,600 --> 00:21:15,120
sustainability hat and it's because

00:21:13,039 --> 00:21:17,280
this idea of maintainership being a

00:21:15,120 --> 00:21:21,039
full-time job is such a

00:21:17,280 --> 00:21:21,039
a present thing at the moment

00:21:21,280 --> 00:21:26,799
so uh to kind of throw this home

00:21:24,480 --> 00:21:28,720
i thought hey why don't i just search

00:21:26,799 --> 00:21:30,000
search my twitter for how many times

00:21:28,720 --> 00:21:32,240
i've talked about

00:21:30,000 --> 00:21:34,159
burnout and this would be the moment

00:21:32,240 --> 00:21:35,679
where i look out on the room and say

00:21:34,159 --> 00:21:37,679
how many people here are open source

00:21:35,679 --> 00:21:38,799
maintainers and feeling burnt out

00:21:37,679 --> 00:21:40,799
how many people here just are

00:21:38,799 --> 00:21:43,840
maintaining any piece of software

00:21:40,799 --> 00:21:44,640
and feel burnt out and so we'd see all

00:21:43,840 --> 00:21:46,240
these hands

00:21:44,640 --> 00:21:48,880
i know everyone doesn't have their video

00:21:46,240 --> 00:21:50,799
open but i ran this search and i took a

00:21:48,880 --> 00:21:54,080
look at some of the things i said

00:21:50,799 --> 00:21:54,480
and one of the things that i was struck

00:21:54,080 --> 00:21:57,200
by

00:21:54,480 --> 00:21:59,280
is that not only had i talked about

00:21:57,200 --> 00:22:02,000
burnout a lot

00:21:59,280 --> 00:22:02,640
but i also had talked about it for a

00:22:02,000 --> 00:22:04,799
really

00:22:02,640 --> 00:22:06,480
long time i don't know if you're seeing

00:22:04,799 --> 00:22:09,039
the time stamps on these

00:22:06,480 --> 00:22:10,559
but i'm looking at this and i'm like wow

00:22:09,039 --> 00:22:14,960
i was tweeting about burnout

00:22:10,559 --> 00:22:17,440
five years ago that's that's a signal

00:22:14,960 --> 00:22:19,520
and so one of the ones that i thought

00:22:17,440 --> 00:22:23,120
was particularly interesting is

00:22:19,520 --> 00:22:26,640
literally five years ago i was like huh

00:22:23,120 --> 00:22:28,159
i wonder if you know these bubbles we

00:22:26,640 --> 00:22:30,159
see in startups you know

00:22:28,159 --> 00:22:32,240
has something to do with systems hitting

00:22:30,159 --> 00:22:34,320
this limit of maintainability and

00:22:32,240 --> 00:22:35,520
i wasn't really fully in open source

00:22:34,320 --> 00:22:38,159
around this time though

00:22:35,520 --> 00:22:39,039
arguably i was maybe never not in open

00:22:38,159 --> 00:22:42,480
source

00:22:39,039 --> 00:22:42,960
but it was striking to me that this idea

00:22:42,480 --> 00:22:45,440
of

00:22:42,960 --> 00:22:47,360
maintenance was something that stuck

00:22:45,440 --> 00:22:50,320
with me and pointed me out in tech and

00:22:47,360 --> 00:22:50,960
felt like it was this source of burnout

00:22:50,320 --> 00:22:53,039
and so

00:22:50,960 --> 00:22:54,480
thinking about this role of maintainer

00:22:53,039 --> 00:22:57,679
its relationship

00:22:54,480 --> 00:23:00,559
to keeping software uh you know

00:22:57,679 --> 00:23:01,840
fresh and healthy um as well as its

00:23:00,559 --> 00:23:03,840
relationship to burnout

00:23:01,840 --> 00:23:04,960
seemed really interesting to me as you

00:23:03,840 --> 00:23:08,799
can see

00:23:04,960 --> 00:23:10,880
2016 saying i see a lot of startups burn

00:23:08,799 --> 00:23:11,280
out because building a thing requires

00:23:10,880 --> 00:23:13,440
five

00:23:11,280 --> 00:23:14,640
people but maintaining and changing it

00:23:13,440 --> 00:23:17,760
over time

00:23:14,640 --> 00:23:20,320
takes exponentially more and

00:23:17,760 --> 00:23:22,960
i don't think this is unique to startups

00:23:20,320 --> 00:23:23,919
uh what is a large open source project

00:23:22,960 --> 00:23:27,200
except a less

00:23:23,919 --> 00:23:29,200
well organized giant or like company

00:23:27,200 --> 00:23:30,960
um i think that a lot of these things

00:23:29,200 --> 00:23:33,280
are the same and we think about

00:23:30,960 --> 00:23:35,360
the cost it takes to build something but

00:23:33,280 --> 00:23:37,760
then the cost to make that thing

00:23:35,360 --> 00:23:38,960
stay awesome over time not just

00:23:37,760 --> 00:23:42,480
sustaining it

00:23:38,960 --> 00:23:44,640
but keeping it thriving it grows

00:23:42,480 --> 00:23:46,159
in people and so coming up with ways to

00:23:44,640 --> 00:23:48,640
support those people is something that

00:23:46,159 --> 00:23:51,360
i'm deeply motivated by

00:23:48,640 --> 00:23:52,320
so this idea of software maintenance is

00:23:51,360 --> 00:23:55,919
an incredibly

00:23:52,320 --> 00:23:59,360
old problem uh how

00:23:55,919 --> 00:24:01,679
are we gonna fix it right so the more

00:23:59,360 --> 00:24:03,440
participatory a project is

00:24:01,679 --> 00:24:05,039
the more maintenance work it's going to

00:24:03,440 --> 00:24:07,600
take to enable it

00:24:05,039 --> 00:24:09,279
the more empowering a project is the

00:24:07,600 --> 00:24:11,919
more maintenance work it will take

00:24:09,279 --> 00:24:13,200
to enable it and the higher quality of a

00:24:11,919 --> 00:24:15,200
contributor experience

00:24:13,200 --> 00:24:17,120
the more maintenance work it will take

00:24:15,200 --> 00:24:19,520
to enable it and so this

00:24:17,120 --> 00:24:20,640
underscores the fact that rust is

00:24:19,520 --> 00:24:23,200
playing on

00:24:20,640 --> 00:24:23,919
hard mode not only is this an old

00:24:23,200 --> 00:24:26,080
problem

00:24:23,919 --> 00:24:27,279
that a lot of people have to face but

00:24:26,080 --> 00:24:29,679
rust

00:24:27,279 --> 00:24:31,279
russ has set the bar extremely high and

00:24:29,679 --> 00:24:32,000
i think that this is one of the reasons

00:24:31,279 --> 00:24:34,240
that we're in a

00:24:32,000 --> 00:24:36,520
best position to tackle it because we

00:24:34,240 --> 00:24:40,240
can feel these pains

00:24:36,520 --> 00:24:43,200
extremely carefully and

00:24:40,240 --> 00:24:45,120
because our values are so associated

00:24:43,200 --> 00:24:45,760
with making that contributor experience

00:24:45,120 --> 00:24:47,919
high

00:24:45,760 --> 00:24:50,320
we really are motivated to figure out

00:24:47,919 --> 00:24:53,600
how we can continue to enable that

00:24:50,320 --> 00:24:55,360
over time so what do we do you just

00:24:53,600 --> 00:24:57,360
talked about a whole bunch of problems

00:24:55,360 --> 00:24:59,600
everyone's like yeah open source it has

00:24:57,360 --> 00:25:02,240
a sustainability problem what do we do

00:24:59,600 --> 00:25:04,159
all right enter rust foundation this is

00:25:02,240 --> 00:25:07,760
something that we're really zeroed in

00:25:04,159 --> 00:25:08,480
on trying to fix so classic open source

00:25:07,760 --> 00:25:11,039
foundations

00:25:08,480 --> 00:25:11,919
generally focus on growing adoption

00:25:11,039 --> 00:25:15,520
particularly

00:25:11,919 --> 00:25:17,120
in corporations um and so what i would

00:25:15,520 --> 00:25:17,840
like to propose is like the rust

00:25:17,120 --> 00:25:20,480
foundation

00:25:17,840 --> 00:25:21,120
is actually not concerned about growing

00:25:20,480 --> 00:25:24,159
adoption

00:25:21,120 --> 00:25:26,400
whatsoever in fact i think we can assume

00:25:24,159 --> 00:25:27,279
adoption we are seeing people pick up

00:25:26,400 --> 00:25:30,400
rust in

00:25:27,279 --> 00:25:32,799
so many different places instead

00:25:30,400 --> 00:25:33,440
i think our focus needs to be surviving

00:25:32,799 --> 00:25:35,360
adoption

00:25:33,440 --> 00:25:36,960
and when i ran this by some of my folks

00:25:35,360 --> 00:25:38,240
on the board and on the core team

00:25:36,960 --> 00:25:39,360
they're like we don't want to just

00:25:38,240 --> 00:25:42,320
survive

00:25:39,360 --> 00:25:43,679
we want to capture adoption and so what

00:25:42,320 --> 00:25:46,960
does that mean

00:25:43,679 --> 00:25:50,480
so we got this picture right so

00:25:46,960 --> 00:25:51,600
um the picture is very similar to the

00:25:50,480 --> 00:25:53,679
one that we had before

00:25:51,600 --> 00:25:55,120
but it's particularly focused on growth

00:25:53,679 --> 00:25:57,440
of corporate use so again

00:25:55,120 --> 00:25:59,440
our axes are the same y is number of

00:25:57,440 --> 00:26:01,760
people x is time

00:25:59,440 --> 00:26:02,640
and what we see here is the one up at

00:26:01,760 --> 00:26:05,279
the top is

00:26:02,640 --> 00:26:06,720
people with ideas about your thing

00:26:05,279 --> 00:26:09,279
generally high and just

00:26:06,720 --> 00:26:11,520
grows even higher and then we have

00:26:09,279 --> 00:26:12,000
corporate users which starts very low

00:26:11,520 --> 00:26:14,640
and then

00:26:12,000 --> 00:26:15,279
starts growing exponentially and then in

00:26:14,640 --> 00:26:18,080
the middle

00:26:15,279 --> 00:26:18,960
we have maintainers now this line is

00:26:18,080 --> 00:26:22,000
very interesting

00:26:18,960 --> 00:26:23,279
because you often see once you have this

00:26:22,000 --> 00:26:25,600
kind of hockey stick

00:26:23,279 --> 00:26:26,880
growth of corporate users that your

00:26:25,600 --> 00:26:29,919
number of maintainers

00:26:26,880 --> 00:26:31,200
actually starts to decrease and part of

00:26:29,919 --> 00:26:33,679
this is because

00:26:31,200 --> 00:26:35,679
corporate users go oh my gosh rust is

00:26:33,679 --> 00:26:36,799
awesome i want to build the rest of my

00:26:35,679 --> 00:26:39,679
products future

00:26:36,799 --> 00:26:40,480
on rust i need to hire the best rust

00:26:39,679 --> 00:26:42,640
developers

00:26:40,480 --> 00:26:44,400
who are the best rust developers oh my

00:26:42,640 --> 00:26:45,120
goodness they're the people who wrote

00:26:44,400 --> 00:26:47,120
rust

00:26:45,120 --> 00:26:48,799
and so inevitably what happens is these

00:26:47,120 --> 00:26:51,360
corporations scoop

00:26:48,799 --> 00:26:53,200
up a bunch of the folks who are working

00:26:51,360 --> 00:26:57,039
on the open source project

00:26:53,200 --> 00:26:59,520
to work with the language and not on it

00:26:57,039 --> 00:27:00,640
and we get this kind of brain drain so

00:26:59,520 --> 00:27:04,720
my thought was

00:27:00,640 --> 00:27:06,640
okay what if we can leverage the desire

00:27:04,720 --> 00:27:08,720
for corporations to be able to hire

00:27:06,640 --> 00:27:11,440
these folks

00:27:08,720 --> 00:27:12,400
but instead of hiring them to work with

00:27:11,440 --> 00:27:15,039
it

00:27:12,400 --> 00:27:15,919
hire them to continue to work on it

00:27:15,039 --> 00:27:17,600
which is to say

00:27:15,919 --> 00:27:19,440
take this maintainer curve that's

00:27:17,600 --> 00:27:22,559
dipping like this and help

00:27:19,440 --> 00:27:25,600
align it with that corporate use

00:27:22,559 --> 00:27:28,240
line all right so

00:27:25,600 --> 00:27:29,120
as you can see here the goal that we're

00:27:28,240 --> 00:27:32,320
trying to do

00:27:29,120 --> 00:27:35,840
is to take this curve of maintainers

00:27:32,320 --> 00:27:39,039
and align it with the curve of users

00:27:35,840 --> 00:27:41,600
and if we're able to con to

00:27:39,039 --> 00:27:42,960
to grow our set of maintainers and

00:27:41,600 --> 00:27:44,960
stabilize that

00:27:42,960 --> 00:27:46,880
they're going to be able to support more

00:27:44,960 --> 00:27:50,640
contributors which will hopefully

00:27:46,880 --> 00:27:53,760
convert many of the commenters into

00:27:50,640 --> 00:27:56,159
contributors so at this point

00:27:53,760 --> 00:27:57,360
like oh i thought i had another slide

00:27:56,159 --> 00:28:00,840
well anyways

00:27:57,360 --> 00:28:03,840
so what we're trying to propose here

00:28:00,840 --> 00:28:07,360
yeah i think we are

00:28:03,840 --> 00:28:10,559
now over time so yes i'm sorry all right

00:28:07,360 --> 00:28:13,120
i can quickly speed it up which is

00:28:10,559 --> 00:28:13,760
the final point is being a maintainer

00:28:13,120 --> 00:28:16,640
should be

00:28:13,760 --> 00:28:18,799
a career opportunity and we've been

00:28:16,640 --> 00:28:19,919
designing the rust foundation to help

00:28:18,799 --> 00:28:22,799
support that

00:28:19,919 --> 00:28:23,520
so in particular for our membership fees

00:28:22,799 --> 00:28:26,480
we have

00:28:23,520 --> 00:28:27,039
what we call this team member discount

00:28:26,480 --> 00:28:30,320
where

00:28:27,039 --> 00:28:31,120
four organizations that employ rust team

00:28:30,320 --> 00:28:33,360
members

00:28:31,120 --> 00:28:34,240
for a hundred percent of their time

00:28:33,360 --> 00:28:37,360
we're giving them

00:28:34,240 --> 00:28:40,480
a 15 discount on their fees

00:28:37,360 --> 00:28:42,559
which can go up to a 45

00:28:40,480 --> 00:28:45,360
total discount so we are trying to

00:28:42,559 --> 00:28:48,000
incentivize organizations to hire folks

00:28:45,360 --> 00:28:48,799
full time to work on rust in their

00:28:48,000 --> 00:28:52,640
capacity

00:28:48,799 --> 00:28:54,559
as a maintainer and so this is all stuff

00:28:52,640 --> 00:28:55,200
about our board and we can talk about

00:28:54,559 --> 00:28:57,200
that

00:28:55,200 --> 00:28:58,880
obviously i've been doing all this crazy

00:28:57,200 --> 00:29:00,000
stuff with lines and you probably think

00:28:58,880 --> 00:29:02,640
this is wild

00:29:00,000 --> 00:29:03,440
but if you hear anything what i want you

00:29:02,640 --> 00:29:05,360
to hear

00:29:03,440 --> 00:29:07,279
is that i feel an optimism that i

00:29:05,360 --> 00:29:09,600
haven't felt in a long time

00:29:07,279 --> 00:29:11,679
about open source sustainability and i

00:29:09,600 --> 00:29:13,919
want you all to feel it too

00:29:11,679 --> 00:29:15,760
all right this freedom to collaborate is

00:29:13,919 --> 00:29:18,320
something that rust is really stewarding

00:29:15,760 --> 00:29:21,679
and i think is really really incredible

00:29:18,320 --> 00:29:23,039
uh rust is the only thing that rust is

00:29:21,679 --> 00:29:25,840
is the emergent product

00:29:23,039 --> 00:29:26,640
of the people who are building rust and

00:29:25,840 --> 00:29:28,880
so

00:29:26,640 --> 00:29:29,760
while people and collaboration are both

00:29:28,880 --> 00:29:32,000
expensive

00:29:29,760 --> 00:29:33,039
they are the only thing worth investing

00:29:32,000 --> 00:29:35,440
in and so

00:29:33,039 --> 00:29:37,120
investing in rust and investing in the

00:29:35,440 --> 00:29:39,760
rust foundation is really about

00:29:37,120 --> 00:29:41,360
investing in its people with that i will

00:29:39,760 --> 00:29:44,159
stop taking up all the time

00:29:41,360 --> 00:29:44,159
thank you very much

00:29:49,440 --> 00:29:55,360
all right thank you very much

00:29:52,960 --> 00:29:59,200
let's we usually kind of do a virtual

00:29:55,360 --> 00:29:59,200
round those are close thank you actually

00:30:04,320 --> 00:30:11,279
um so far we haven't got

00:30:07,520 --> 00:30:14,960
any questions on the chat

00:30:11,279 --> 00:30:18,240
i don't know if scott you were able to

00:30:14,960 --> 00:30:22,080
capture some questions so we can

00:30:18,240 --> 00:30:24,799
redirect but yes we have really virtual

00:30:22,080 --> 00:30:25,440
uploads going all around thank you

00:30:24,799 --> 00:30:29,200
ashley

00:30:25,440 --> 00:30:33,120
for this beautiful presentation

00:30:29,200 --> 00:30:36,559
and yeah no questions yet okay

00:30:33,120 --> 00:30:41,440
so with that i think we'll just

00:30:36,559 --> 00:30:41,440
move on to the next talk

00:30:41,840 --> 00:30:51,840
that is building web assembly

00:30:45,600 --> 00:30:51,840
with paul

00:30:54,000 --> 00:30:58,159
hi everyone i'm paul i'm excited to talk

00:30:57,519 --> 00:31:00,399
to you today

00:30:58,159 --> 00:31:02,399
about building a multiplayer webassembly

00:31:00,399 --> 00:31:03,600
game in full stack rust

00:31:02,399 --> 00:31:06,080
which is something i started playing

00:31:03,600 --> 00:31:08,559
around with at the beginning of the year

00:31:06,080 --> 00:31:09,360
and have since then been thinking a lot

00:31:08,559 --> 00:31:11,919
about

00:31:09,360 --> 00:31:13,760
sharing state in rust across running

00:31:11,919 --> 00:31:16,799
instances of an application

00:31:13,760 --> 00:31:18,559
um even more generally than games so the

00:31:16,799 --> 00:31:20,240
way that i've kind of structured this is

00:31:18,559 --> 00:31:23,120
i'll talk about

00:31:20,240 --> 00:31:24,080
um that problem of sharing state between

00:31:23,120 --> 00:31:25,600
instances

00:31:24,080 --> 00:31:28,320
uh regardless of whether they're games

00:31:25,600 --> 00:31:30,799
or not and then show how i use that to

00:31:28,320 --> 00:31:33,360
actually implement a very simple game

00:31:30,799 --> 00:31:33,840
to kind of start at the end and this may

00:31:33,360 --> 00:31:35,519
be

00:31:33,840 --> 00:31:37,120
playing too fast to actually keep track

00:31:35,519 --> 00:31:38,000
of on zoom but you'll at least get the

00:31:37,120 --> 00:31:40,159
idea

00:31:38,000 --> 00:31:41,360
um there's two instances of firefox side

00:31:40,159 --> 00:31:43,919
by side here

00:31:41,360 --> 00:31:45,279
running what will eventually be the game

00:31:43,919 --> 00:31:47,600
that i built up

00:31:45,279 --> 00:31:49,440
through these slides just to kind of

00:31:47,600 --> 00:31:52,480
give you a high level view of what i'm

00:31:49,440 --> 00:31:55,120
actually trying to achieve here

00:31:52,480 --> 00:31:56,640
the outline here is as i mentioned i'm

00:31:55,120 --> 00:31:57,600
going to start just sort of generally

00:31:56,640 --> 00:31:59,840
taking a step back

00:31:57,600 --> 00:32:02,080
talking about this problem of sharing

00:31:59,840 --> 00:32:05,840
state

00:32:02,080 --> 00:32:07,519
um and so the the general problem is

00:32:05,840 --> 00:32:09,840
basically you have multiple instances

00:32:07,519 --> 00:32:10,880
of a rust program in this case it's

00:32:09,840 --> 00:32:12,799
going to be program running in

00:32:10,880 --> 00:32:14,640
webassembly but we can think even more

00:32:12,799 --> 00:32:16,799
generally than that

00:32:14,640 --> 00:32:18,480
about you know you you just have some

00:32:16,799 --> 00:32:19,440
some rust code it may be native it may

00:32:18,480 --> 00:32:20,880
be

00:32:19,440 --> 00:32:23,039
a web assembly you don't really it's

00:32:20,880 --> 00:32:24,799
this architecture independent

00:32:23,039 --> 00:32:27,279
but we want to be sharing this state in

00:32:24,799 --> 00:32:27,279
real time

00:32:27,440 --> 00:32:30,880
um the these use cases of this have

00:32:29,440 --> 00:32:32,480
actually kind of exploded

00:32:30,880 --> 00:32:34,559
in the last few years kind of

00:32:32,480 --> 00:32:35,600
pre-covered but even especially during

00:32:34,559 --> 00:32:38,320
covid where

00:32:35,600 --> 00:32:40,880
we have a lot of these use cases for um

00:32:38,320 --> 00:32:42,640
things like figma or multiplayer games

00:32:40,880 --> 00:32:44,240
uh where we're doing things online that

00:32:42,640 --> 00:32:46,799
we used to do kind of

00:32:44,240 --> 00:32:47,360
standing around a whiteboard or um you

00:32:46,799 --> 00:32:50,399
know

00:32:47,360 --> 00:32:51,840
editing code pairs side by side um now

00:32:50,399 --> 00:32:53,039
is happening in the browser so i think

00:32:51,840 --> 00:32:57,840
it's a great time

00:32:53,039 --> 00:32:57,840
to be uh interested in stage sharing

00:32:58,960 --> 00:33:02,000
um so the initially when i started

00:33:00,720 --> 00:33:03,600
looking into this i kind of thought of

00:33:02,000 --> 00:33:05,279
this naive approach which is

00:33:03,600 --> 00:33:07,440
we have these data structures you know

00:33:05,279 --> 00:33:10,320
maybe we have a list that's on all my

00:33:07,440 --> 00:33:11,360
all my instances what if we just kind of

00:33:10,320 --> 00:33:13,760
intercept

00:33:11,360 --> 00:33:15,919
every time we want to mutate that list

00:33:13,760 --> 00:33:17,840
we want to push to the list or

00:33:15,919 --> 00:33:20,159
modify something in that list we just

00:33:17,840 --> 00:33:23,440
kind of find a representation of those

00:33:20,159 --> 00:33:25,600
mutations send those across the wire

00:33:23,440 --> 00:33:28,080
do it maintain order for all of these

00:33:25,600 --> 00:33:30,480
operations and then kind of uh

00:33:28,080 --> 00:33:33,440
you know maintain state that way across

00:33:30,480 --> 00:33:35,679
a number of instances

00:33:33,440 --> 00:33:37,840
so that actually works uh in the sense

00:33:35,679 --> 00:33:38,799
that all if you do it right all of the

00:33:37,840 --> 00:33:42,480
machines

00:33:38,799 --> 00:33:44,640
will eventually have a consistent state

00:33:42,480 --> 00:33:46,720
but the problem is kind of more

00:33:44,640 --> 00:33:49,760
fundamental than that

00:33:46,720 --> 00:33:51,519
here's here's a example to show what i

00:33:49,760 --> 00:33:54,159
mean

00:33:51,519 --> 00:33:55,120
this is a hypothetical packing list a

00:33:54,159 --> 00:33:57,120
shared packing list

00:33:55,120 --> 00:33:58,559
uh application you can imagine something

00:33:57,120 --> 00:34:01,120
like notion or

00:33:58,559 --> 00:34:02,559
uh or google keep where you have a

00:34:01,120 --> 00:34:05,600
multi-user

00:34:02,559 --> 00:34:06,960
checklist that's being synced in real

00:34:05,600 --> 00:34:08,960
time

00:34:06,960 --> 00:34:10,480
let's say at time zero we have three

00:34:08,960 --> 00:34:13,679
items on the list

00:34:10,480 --> 00:34:15,200
at time um and at time zero both bob and

00:34:13,679 --> 00:34:18,480
alice get a copy of

00:34:15,200 --> 00:34:20,879
that state uh simultaneously

00:34:18,480 --> 00:34:21,919
alice adds a camera stand to the list

00:34:20,879 --> 00:34:24,399
and puts it at

00:34:21,919 --> 00:34:26,960
position index 1 because it's associated

00:34:24,399 --> 00:34:29,200
with the camera

00:34:26,960 --> 00:34:31,359
at the very same time bob checks phone

00:34:29,200 --> 00:34:33,200
charger because he's packed that

00:34:31,359 --> 00:34:34,800
so we have these two operations that

00:34:33,200 --> 00:34:37,679
change the data structure one is

00:34:34,800 --> 00:34:39,040
an insert and one is this modifying the

00:34:37,679 --> 00:34:41,200
checked item

00:34:39,040 --> 00:34:43,200
the server gets both of those alice's

00:34:41,200 --> 00:34:46,639
connections a little bit faster so

00:34:43,200 --> 00:34:48,480
that change comes in first and by the

00:34:46,639 --> 00:34:50,639
time bob's change is applied

00:34:48,480 --> 00:34:52,000
the item at index one which he thinks is

00:34:50,639 --> 00:34:53,440
the phone charger or

00:34:52,000 --> 00:34:56,079
it was the phone charger when he checked

00:34:53,440 --> 00:34:59,119
that item um is now the camera stand

00:34:56,079 --> 00:35:01,040
so he's checked that he's um

00:34:59,119 --> 00:35:03,200
packed the camera stand even though he's

00:35:01,040 --> 00:35:05,760
packed the phone charger

00:35:03,200 --> 00:35:06,400
so this type of conflicts uh kind of

00:35:05,760 --> 00:35:08,480
arise

00:35:06,400 --> 00:35:11,599
when you just naively take this data

00:35:08,480 --> 00:35:11,599
structure based approach

00:35:12,160 --> 00:35:16,000
so my question was what if we can

00:35:14,960 --> 00:35:18,160
represent the

00:35:16,000 --> 00:35:19,920
actual user intent instead of the

00:35:18,160 --> 00:35:23,440
mutation and then pass

00:35:19,920 --> 00:35:23,440
that intent along the wire

00:35:23,839 --> 00:35:27,760
so an example of what that would look

00:35:25,200 --> 00:35:28,880
like is in this case what i've done is

00:35:27,760 --> 00:35:31,280
added

00:35:28,880 --> 00:35:33,599
ids to each of these items so these are

00:35:31,280 --> 00:35:36,640
unique identifiers generated

00:35:33,599 --> 00:35:38,240
using the uuid crate when these

00:35:36,640 --> 00:35:39,920
are created so in this case he's

00:35:38,240 --> 00:35:42,960
checking the item and instead of passing

00:35:39,920 --> 00:35:45,440
the index he's passing the id

00:35:42,960 --> 00:35:46,800
similarly alice when she adds the camera

00:35:45,440 --> 00:35:49,280
stand

00:35:46,800 --> 00:35:49,920
adds it in reference to another item or

00:35:49,280 --> 00:35:51,440
it's

00:35:49,920 --> 00:35:53,520
his position is in reference to another

00:35:51,440 --> 00:35:54,480
item and since it's a new item she also

00:35:53,520 --> 00:35:57,280
includes a new

00:35:54,480 --> 00:35:58,400
id and this gives enough information

00:35:57,280 --> 00:36:02,480
that the server

00:35:58,400 --> 00:36:05,680
can figure out what the correct state is

00:36:02,480 --> 00:36:05,680
based on those mutations

00:36:06,240 --> 00:36:09,520
so more generally my question was what

00:36:08,720 --> 00:36:11,599
if we have

00:36:09,520 --> 00:36:12,880
a data structure library that can

00:36:11,599 --> 00:36:15,520
actually represent

00:36:12,880 --> 00:36:16,720
these intents so it you know it's not a

00:36:15,520 --> 00:36:20,079
silver bullet you still

00:36:16,720 --> 00:36:21,920
need the application level code to

00:36:20,079 --> 00:36:24,320
kind of infer what the intent is based

00:36:21,920 --> 00:36:25,920
on the user's interaction

00:36:24,320 --> 00:36:27,359
so this is you know it's not magic you

00:36:25,920 --> 00:36:30,079
can just put on your data structure

00:36:27,359 --> 00:36:32,240
but once you have the application level

00:36:30,079 --> 00:36:34,079
understanding of the data mutation

00:36:32,240 --> 00:36:36,480
uh what if there's sort of a general way

00:36:34,079 --> 00:36:41,040
we can represent these data structures

00:36:36,480 --> 00:36:43,599
um such as a list in the last example

00:36:41,040 --> 00:36:45,040
and so i've been working on that and um

00:36:43,599 --> 00:36:48,480
it's called apr

00:36:45,040 --> 00:36:51,280
um it's a a rust crate it's in

00:36:48,480 --> 00:36:51,760
uh crates dot io now but it's a very

00:36:51,280 --> 00:36:53,680
early

00:36:51,760 --> 00:36:54,880
kind of work in progress thing so i

00:36:53,680 --> 00:36:56,880
wanted to kind of

00:36:54,880 --> 00:36:58,800
um get out early and show it to the

00:36:56,880 --> 00:36:59,359
world and and get some of your feedback

00:36:58,800 --> 00:37:01,680
and

00:36:59,359 --> 00:37:03,599
show what i'm working on so that's what

00:37:01,680 --> 00:37:05,760
i'd like to do today

00:37:03,599 --> 00:37:06,640
so there's kind of two main pieces to

00:37:05,760 --> 00:37:09,680
this crate

00:37:06,640 --> 00:37:11,520
or really multiple crates so two main

00:37:09,680 --> 00:37:13,680
pieces to this project

00:37:11,520 --> 00:37:15,119
the first is kind of the core data

00:37:13,680 --> 00:37:18,320
structures and state

00:37:15,119 --> 00:37:20,960
library and this is this part is

00:37:18,320 --> 00:37:23,440
completely agnostic to the transit layer

00:37:20,960 --> 00:37:24,160
so you could use this for synchronizing

00:37:23,440 --> 00:37:25,760
state

00:37:24,160 --> 00:37:28,000
within the on the same cpu just as

00:37:25,760 --> 00:37:29,680
easily as you could across the network

00:37:28,000 --> 00:37:31,040
then the second part is some client

00:37:29,680 --> 00:37:32,480
infrastructure client server

00:37:31,040 --> 00:37:34,000
infrastructure

00:37:32,480 --> 00:37:36,400
that's specifically built around the

00:37:34,000 --> 00:37:37,359
case of synchronizing the state over web

00:37:36,400 --> 00:37:39,920
sockets

00:37:37,359 --> 00:37:41,359
to instances running web assembly

00:37:39,920 --> 00:37:44,240
compiled

00:37:41,359 --> 00:37:46,960
versions of your state machine and the

00:37:44,240 --> 00:37:49,440
idea is that you can either use the aper

00:37:46,960 --> 00:37:51,040
included data structures like list which

00:37:49,440 --> 00:37:54,400
are built as state machines or

00:37:51,040 --> 00:37:56,000
implement your own state machine

00:37:54,400 --> 00:37:57,680
the state machine itself is very simple

00:37:56,000 --> 00:38:00,240
it looks like this i've removed a few

00:37:57,680 --> 00:38:02,400
type bounds but this is basically

00:38:00,240 --> 00:38:04,000
the core implementation of what a state

00:38:02,400 --> 00:38:05,920
machine is

00:38:04,000 --> 00:38:07,920
there's a transition type which is just

00:38:05,920 --> 00:38:10,240
the encoding of the user intent

00:38:07,920 --> 00:38:13,599
associated with your data structure

00:38:10,240 --> 00:38:15,280
and this apply method which takes

00:38:13,599 --> 00:38:16,720
your you know your data structure takes

00:38:15,280 --> 00:38:20,560
the transition and

00:38:16,720 --> 00:38:20,560
applies that change in place

00:38:21,119 --> 00:38:24,640
there's two conditions you need to

00:38:22,720 --> 00:38:25,839
satisfy if you do choose to implement

00:38:24,640 --> 00:38:28,800
your own state machine

00:38:25,839 --> 00:38:30,800
the first is that the only method the

00:38:28,800 --> 00:38:33,440
only public method that's allowed to

00:38:30,800 --> 00:38:34,320
modify state is apply and that also

00:38:33,440 --> 00:38:37,359
means you can't

00:38:34,320 --> 00:38:38,400
expose your members to the public in a

00:38:37,359 --> 00:38:41,119
way that

00:38:38,400 --> 00:38:41,920
they may mutate them and the second is

00:38:41,119 --> 00:38:45,520
that

00:38:41,920 --> 00:38:46,720
the call to apply must be deterministic

00:38:45,520 --> 00:38:49,200
and the reason for that is that we're

00:38:46,720 --> 00:38:50,640
running that apply multiple times we're

00:38:49,200 --> 00:38:53,760
running that on every instance

00:38:50,640 --> 00:38:56,560
that is synchronizing state so

00:38:53,760 --> 00:38:57,680
it needs to be to ensure that those

00:38:56,560 --> 00:38:59,839
copies of the state are

00:38:57,680 --> 00:39:01,839
in sync we need to make sure that the

00:38:59,839 --> 00:39:04,079
apply method does the same thing to each

00:39:01,839 --> 00:39:04,079
one

00:39:04,240 --> 00:39:07,599
so with that out of the way i can get to

00:39:05,760 --> 00:39:11,359
the actual implementation

00:39:07,599 --> 00:39:11,359
of this game as a state machine

00:39:13,599 --> 00:39:17,119
the a few kind of preliminaries i mean

00:39:16,640 --> 00:39:19,200
this is

00:39:17,119 --> 00:39:20,560
uh should be pretty standard stuff to

00:39:19,200 --> 00:39:22,880
rust programmers i'm

00:39:20,560 --> 00:39:24,640
representing if you remember the demo at

00:39:22,880 --> 00:39:26,400
the beginning there were two colors

00:39:24,640 --> 00:39:29,680
brown and teal so those are the player

00:39:26,400 --> 00:39:32,800
colors i just represent with an enum

00:39:29,680 --> 00:39:36,079
i have a board so the

00:39:32,800 --> 00:39:38,800
the grid that you see is basically just

00:39:36,079 --> 00:39:39,520
an array of arrays inside those arrays

00:39:38,800 --> 00:39:41,839
each slot

00:39:39,520 --> 00:39:43,839
has an optional player color so

00:39:41,839 --> 00:39:46,480
initially they'll start out as none

00:39:43,839 --> 00:39:48,160
meaning that there's no disk in in each

00:39:46,480 --> 00:39:50,720
of those

00:39:48,160 --> 00:39:53,040
rows and columns the disk is kind of the

00:39:50,720 --> 00:39:55,520
what i'm calling the player token

00:39:53,040 --> 00:39:56,880
and then as a player as players take

00:39:55,520 --> 00:39:59,280
turns playing

00:39:56,880 --> 00:40:00,720
their disc this board starts to get

00:39:59,280 --> 00:40:02,079
filled in

00:40:00,720 --> 00:40:04,079
and i've just wrapped it in a board

00:40:02,079 --> 00:40:05,200
struct so that i can implement some

00:40:04,079 --> 00:40:08,240
behavior on it but

00:40:05,200 --> 00:40:11,280
you could just as easily use a raw array

00:40:08,240 --> 00:40:12,720
of race here

00:40:11,280 --> 00:40:14,400
then kind of expanding what this looks

00:40:12,720 --> 00:40:16,480
like as a state machine

00:40:14,400 --> 00:40:19,040
one thing in the context of of april's

00:40:16,480 --> 00:40:22,720
serving architecture is that

00:40:19,040 --> 00:40:25,119
players or users when they join

00:40:22,720 --> 00:40:26,160
they are given a player id but there's

00:40:25,119 --> 00:40:28,400
no

00:40:26,160 --> 00:40:29,520
significance assigned to that at the

00:40:28,400 --> 00:40:32,240
time they join so

00:40:29,520 --> 00:40:33,760
we kind of have to manage the state

00:40:32,240 --> 00:40:36,960
changes as users join

00:40:33,760 --> 00:40:40,160
the app so initially we

00:40:36,960 --> 00:40:42,480
have no users in sort of in the game

00:40:40,160 --> 00:40:44,079
we have this waiting player none when

00:40:42,480 --> 00:40:47,440
the first player joins they get

00:40:44,079 --> 00:40:49,040
put into this waiting player slot

00:40:47,440 --> 00:40:50,400
if you want to think of it that way but

00:40:49,040 --> 00:40:52,079
they're still we're still missing one

00:40:50,400 --> 00:40:54,240
player to actually start the game the

00:40:52,079 --> 00:40:56,160
second player that joins

00:40:54,240 --> 00:40:57,440
is what causes the game to switch to the

00:40:56,160 --> 00:40:58,960
playing state

00:40:57,440 --> 00:41:01,200
when when it's in that state there's no

00:40:58,960 --> 00:41:03,599
winner initially

00:41:01,200 --> 00:41:05,040
players will then drop tiles which is

00:41:03,599 --> 00:41:07,920
the the way the game's played

00:41:05,040 --> 00:41:09,760
you take turns dropping these tiles

00:41:07,920 --> 00:41:11,520
eventually one of these drops will cause

00:41:09,760 --> 00:41:13,440
a player to win hopefully

00:41:11,520 --> 00:41:15,040
um at which place they are put in the

00:41:13,440 --> 00:41:17,040
winner slot here

00:41:15,040 --> 00:41:18,640
and then the reset transition becomes

00:41:17,040 --> 00:41:22,000
valid and the reset transition just

00:41:18,640 --> 00:41:23,839
clears the board swaps the next player

00:41:22,000 --> 00:41:26,079
clears the winner and that sort of state

00:41:23,839 --> 00:41:26,079
change

00:41:26,400 --> 00:41:29,760
so the way we're representing this in

00:41:27,760 --> 00:41:34,079
code is there's a playstate

00:41:29,760 --> 00:41:35,760
enum it has this waiting uh

00:41:34,079 --> 00:41:37,839
type i guess or waiting what do you call

00:41:35,760 --> 00:41:40,160
a thing of any enum um

00:41:37,839 --> 00:41:41,200
option and there's another option that

00:41:40,160 --> 00:41:42,480
is playing

00:41:41,200 --> 00:41:43,920
um that has a little bit more state

00:41:42,480 --> 00:41:45,359
attached to it because when the game is

00:41:43,920 --> 00:41:45,920
in play we need to know who's playing

00:41:45,359 --> 00:41:48,560
next

00:41:45,920 --> 00:41:49,599
what's on the board who's won the game

00:41:48,560 --> 00:41:50,880
and something called

00:41:49,599 --> 00:41:53,359
player map which we'll show on the next

00:41:50,880 --> 00:41:54,000
slide this is again wrapped in another

00:41:53,359 --> 00:41:56,400
state

00:41:54,000 --> 00:41:57,200
um kind of for ergonomics reasons um

00:41:56,400 --> 00:42:01,200
that i'll

00:41:57,200 --> 00:42:02,960
ignore for now there's this player map

00:42:01,200 --> 00:42:04,880
uh which i mentioned in the last slide

00:42:02,960 --> 00:42:05,280
this is kind of just storing this is

00:42:04,880 --> 00:42:08,160
what

00:42:05,280 --> 00:42:09,760
tells the game state um which of the

00:42:08,160 --> 00:42:13,119
connected users

00:42:09,760 --> 00:42:15,520
is which associated with which color

00:42:13,119 --> 00:42:18,720
so this is what prevents uh the brown

00:42:15,520 --> 00:42:22,079
player from playing for teal for example

00:42:18,720 --> 00:42:24,800
and this is um

00:42:22,079 --> 00:42:26,000
see player id here is a kind of an

00:42:24,800 --> 00:42:27,920
opaque

00:42:26,000 --> 00:42:29,359
type that comes from the serving

00:42:27,920 --> 00:42:32,160
architecture of apr

00:42:29,359 --> 00:42:32,560
but basically what it uh what it is is

00:42:32,160 --> 00:42:34,880
it's

00:42:32,560 --> 00:42:35,599
it's a unique identifier for each

00:42:34,880 --> 00:42:37,119
connection

00:42:35,599 --> 00:42:40,160
to the state machine once it's being

00:42:37,119 --> 00:42:41,920
served so if i open this in

00:42:40,160 --> 00:42:43,520
you know in two tabs like i did in the

00:42:41,920 --> 00:42:45,440
initial version

00:42:43,520 --> 00:42:48,560
each of those tabs has a unique player

00:42:45,440 --> 00:42:48,560
id associated with it

00:42:49,760 --> 00:42:53,280
so the applied actually the

00:42:51,920 --> 00:42:53,680
implementation of this as a state

00:42:53,280 --> 00:42:56,960
machine

00:42:53,680 --> 00:42:59,040
looks something like this where we have

00:42:56,960 --> 00:43:00,800
a transition type which is one of those

00:42:59,040 --> 00:43:01,599
three transitions i mentioned either

00:43:00,800 --> 00:43:04,800
join

00:43:01,599 --> 00:43:06,480
drop which is playing the disc or

00:43:04,800 --> 00:43:08,319
reset which happens when the game has

00:43:06,480 --> 00:43:09,839
ended

00:43:08,319 --> 00:43:12,079
those are wrapped here in this

00:43:09,839 --> 00:43:13,359
transition event which is a

00:43:12,079 --> 00:43:15,920
part again a part of the serving

00:43:13,359 --> 00:43:17,359
architecture or infrastructure that

00:43:15,920 --> 00:43:20,319
tells

00:43:17,359 --> 00:43:21,359
associates a player id and time and a

00:43:20,319 --> 00:43:25,520
bit more metadata

00:43:21,359 --> 00:43:26,000
with each event and then the apply here

00:43:25,520 --> 00:43:29,200
is just

00:43:26,000 --> 00:43:31,920
a branch looking at what transition type

00:43:29,200 --> 00:43:31,920
we've received

00:43:32,079 --> 00:43:37,119
in the join case we first check

00:43:35,760 --> 00:43:38,960
whether there's a waiting player so

00:43:37,119 --> 00:43:40,560
again this is you know we have two

00:43:38,960 --> 00:43:41,520
states associated with waiting one is

00:43:40,560 --> 00:43:43,280
when there's

00:43:41,520 --> 00:43:44,640
uh no players yet and one is when

00:43:43,280 --> 00:43:47,599
there's one player

00:43:44,640 --> 00:43:48,560
um so in the case where there's no

00:43:47,599 --> 00:43:50,480
player we simply put

00:43:48,560 --> 00:43:52,079
the first player or the player that

00:43:50,480 --> 00:43:54,880
joined into that slot

00:43:52,079 --> 00:43:55,520
in the other case we can actually start

00:43:54,880 --> 00:43:57,200
the game because

00:43:55,520 --> 00:43:59,599
it means this is the second join we have

00:43:57,200 --> 00:44:00,720
two players we construct that player map

00:43:59,599 --> 00:44:04,000
by pulling out of

00:44:00,720 --> 00:44:06,000
the waiting player um we we let the

00:44:04,000 --> 00:44:07,680
player teal player go first

00:44:06,000 --> 00:44:09,599
refresh the board or empty the board

00:44:07,680 --> 00:44:12,160
start with a initialized board

00:44:09,599 --> 00:44:12,880
we have no winner um and then we're

00:44:12,160 --> 00:44:15,920
ready to

00:44:12,880 --> 00:44:17,200
start playing the game um

00:44:15,920 --> 00:44:19,280
with drop it's a little bit more

00:44:17,200 --> 00:44:21,440
complicated we first check if

00:44:19,280 --> 00:44:22,480
um we check on the game state so we

00:44:21,440 --> 00:44:25,119
first check

00:44:22,480 --> 00:44:26,400
if the game has been won if it has we

00:44:25,119 --> 00:44:29,040
it's a no-op

00:44:26,400 --> 00:44:30,240
um april doesn't support conflicts yet

00:44:29,040 --> 00:44:31,839
but i think that would sort of raise a

00:44:30,240 --> 00:44:34,640
conflict once it says

00:44:31,839 --> 00:44:36,800
um if the we also check if this player

00:44:34,640 --> 00:44:39,760
who's playing is actually next so

00:44:36,800 --> 00:44:41,680
if the the computer that's connected or

00:44:39,760 --> 00:44:43,599
the machine that's connected for

00:44:41,680 --> 00:44:46,079
you know as the brown player can tries

00:44:43,599 --> 00:44:49,200
to go out of turn when its teals turn

00:44:46,079 --> 00:44:52,800
it falls into this if clause

00:44:49,200 --> 00:44:54,960
and um doesn't go through with it

00:44:52,800 --> 00:44:56,560
but if those if neither of those two

00:44:54,960 --> 00:44:57,280
things are true then we see if we can

00:44:56,560 --> 00:45:00,480
play

00:44:57,280 --> 00:45:02,800
in the next uh available

00:45:00,480 --> 00:45:04,480
the next available row so discs fall

00:45:02,800 --> 00:45:05,920
because of gravity so we this is kind of

00:45:04,480 --> 00:45:07,520
the implementation of gravity we look

00:45:05,920 --> 00:45:08,880
for the the row

00:45:07,520 --> 00:45:10,880
um that it would that the disc would

00:45:08,880 --> 00:45:14,160
fall into um

00:45:10,880 --> 00:45:15,359
we put it there we check if if that play

00:45:14,160 --> 00:45:17,599
has caused someone to win

00:45:15,359 --> 00:45:18,800
um we only have to check for a winner

00:45:17,599 --> 00:45:21,440
that goes through

00:45:18,800 --> 00:45:22,560
the disc that was just played because

00:45:21,440 --> 00:45:24,000
otherwise we would have found it in a

00:45:22,560 --> 00:45:25,760
previous pass

00:45:24,000 --> 00:45:28,400
and then we just swap so that the next

00:45:25,760 --> 00:45:28,400
player goes

00:45:28,640 --> 00:45:32,480
similarly when we reset we first check

00:45:30,720 --> 00:45:33,680
if the game has been won because we only

00:45:32,480 --> 00:45:36,240
allow the reset

00:45:33,680 --> 00:45:37,280
um once once the game has been won but

00:45:36,240 --> 00:45:40,960
if so

00:45:37,280 --> 00:45:44,240
we will set the next state so that the

00:45:40,960 --> 00:45:45,920
losing player goes next we reinitialize

00:45:44,240 --> 00:45:48,160
the board

00:45:45,920 --> 00:45:51,119
we just passed the player map as is and

00:45:48,160 --> 00:45:53,280
we say that there's no winner

00:45:51,119 --> 00:45:54,960
so you know i i obviously skipped over

00:45:53,280 --> 00:45:56,560
some implementations of

00:45:54,960 --> 00:45:58,240
a few of those methods i was trying to

00:45:56,560 --> 00:46:00,880
sort of speed run this but

00:45:58,240 --> 00:46:01,280
um i think you know at a high level at

00:46:00,880 --> 00:46:04,079
least

00:46:01,280 --> 00:46:06,480
that gives you the idea of what the

00:46:04,079 --> 00:46:08,480
state machine implementation looks like

00:46:06,480 --> 00:46:10,480
and from there it's actually really easy

00:46:08,480 --> 00:46:10,880
to kind of synchronize that state

00:46:10,480 --> 00:46:14,400
machine

00:46:10,880 --> 00:46:16,160
across a client server um the one

00:46:14,400 --> 00:46:18,240
extra step we have to do is wrap that in

00:46:16,160 --> 00:46:19,520
this uh state program so we implement

00:46:18,240 --> 00:46:22,160
state program

00:46:19,520 --> 00:46:23,040
um that just tells the april framework

00:46:22,160 --> 00:46:25,200
that

00:46:23,040 --> 00:46:26,240
the transition itself is wrapped in the

00:46:25,200 --> 00:46:28,480
transition event

00:46:26,240 --> 00:46:30,880
so that it this the type system allows

00:46:28,480 --> 00:46:33,760
it to populate that

00:46:30,880 --> 00:46:35,040
um but once we have that state program

00:46:33,760 --> 00:46:36,640
this is actually what the server looks

00:46:35,040 --> 00:46:39,359
like it's three lines of code

00:46:36,640 --> 00:46:40,240
um this is using the actix server

00:46:39,359 --> 00:46:41,920
framework

00:46:40,240 --> 00:46:43,520
and so if you want to you can write your

00:46:41,920 --> 00:46:45,680
own active server and kind of use the

00:46:43,520 --> 00:46:48,319
pieces of this to get a bit more control

00:46:45,680 --> 00:46:50,160
but as a dev server you basically just

00:46:48,319 --> 00:46:52,240
initialize this server builder

00:46:50,160 --> 00:46:53,760
pass up the state program and say dot

00:46:52,240 --> 00:46:57,599
serve and it runs

00:46:53,760 --> 00:47:01,359
a dev server on port 8080

00:46:57,599 --> 00:47:01,359
and kind of just works

00:47:01,520 --> 00:47:05,200
and that's serving web sockets then on

00:47:03,520 --> 00:47:06,880
the client so remember the client is

00:47:05,200 --> 00:47:08,000
compiled to webassembly i'm using a

00:47:06,880 --> 00:47:12,319
framework called you

00:47:08,000 --> 00:47:14,480
for that um and so the

00:47:12,319 --> 00:47:16,240
um the way that i do that is you

00:47:14,480 --> 00:47:20,240
implement this game view

00:47:16,240 --> 00:47:23,599
or sorry this view um trait of

00:47:20,240 --> 00:47:27,119
uh of the package apriu and

00:47:23,599 --> 00:47:29,839
so in that case i have this game view um

00:47:27,119 --> 00:47:31,440
the only real important thing here is

00:47:29,839 --> 00:47:34,000
that the

00:47:31,440 --> 00:47:35,520
it implements this view method which

00:47:34,000 --> 00:47:36,960
takes a

00:47:35,520 --> 00:47:38,400
reference to the state as well as a

00:47:36,960 --> 00:47:39,680
context object which has some other

00:47:38,400 --> 00:47:40,720
things like the callback you need to

00:47:39,680 --> 00:47:44,240
call

00:47:40,720 --> 00:47:47,920
and this renders this returns you html

00:47:44,240 --> 00:47:49,280
so it can do that using use html macro

00:47:47,920 --> 00:47:51,280
again i've kind of hidden away some of

00:47:49,280 --> 00:47:53,920
the implementation of view inner here

00:47:51,280 --> 00:47:54,319
but basically everything under this is

00:47:53,920 --> 00:47:57,359
just

00:47:54,319 --> 00:47:59,119
regular u code it doesn't really have to

00:47:57,359 --> 00:48:01,520
interact with the aper state

00:47:59,119 --> 00:48:01,520
framework

00:48:03,280 --> 00:48:06,319
and then the last bit that's important

00:48:04,640 --> 00:48:10,559
on the client is to call

00:48:06,319 --> 00:48:13,839
uh call this client builder so

00:48:10,559 --> 00:48:15,440
this wasn't by gen start um

00:48:13,839 --> 00:48:17,920
decorator kind of tells it to enter with

00:48:15,440 --> 00:48:21,280
this and client builder here

00:48:17,920 --> 00:48:24,800
is just a april u

00:48:21,280 --> 00:48:25,760
struct that will take that it connects

00:48:24,800 --> 00:48:27,440
to the server

00:48:25,760 --> 00:48:29,200
renders the initial state things like

00:48:27,440 --> 00:48:31,119
that

00:48:29,200 --> 00:48:32,720
there's also a build script i won't go

00:48:31,119 --> 00:48:35,440
too much into this but

00:48:32,720 --> 00:48:36,079
this allows you to compile the client

00:48:35,440 --> 00:48:38,640
code

00:48:36,079 --> 00:48:39,760
every time you compile the server um so

00:48:38,640 --> 00:48:41,520
with that i want to give a real quick

00:48:39,760 --> 00:48:43,520
demo

00:48:41,520 --> 00:48:44,960
of what this looks like and what's going

00:48:43,520 --> 00:48:47,040
on the wire

00:48:44,960 --> 00:48:48,079
so the idea is here there's two

00:48:47,040 --> 00:48:51,440
instances in the initial

00:48:48,079 --> 00:48:52,960
state i'm going to hit join on each

00:48:51,440 --> 00:48:54,480
you can actually see the messages that

00:48:52,960 --> 00:48:57,280
are going over the wire

00:48:54,480 --> 00:48:57,839
in production this is it uses bin code

00:48:57,280 --> 00:48:59,920
to

00:48:57,839 --> 00:49:00,880
to fairly concisely pack these messages

00:48:59,920 --> 00:49:02,800
as binary

00:49:00,880 --> 00:49:04,880
but in this dev environment i'm just

00:49:02,800 --> 00:49:06,400
outputting json

00:49:04,880 --> 00:49:08,800
so it's this player's turn so i'm going

00:49:06,400 --> 00:49:10,559
to play and you can see we've received a

00:49:08,800 --> 00:49:12,559
message from the server

00:49:10,559 --> 00:49:14,319
and it's just encoding that drop

00:49:12,559 --> 00:49:16,960
transition and it's just playing

00:49:14,319 --> 00:49:18,319
that drop transition when i do that now

00:49:16,960 --> 00:49:21,200
it's my turn

00:49:18,319 --> 00:49:21,839
as you can see too it's using the player

00:49:21,200 --> 00:49:25,040
id

00:49:21,839 --> 00:49:28,160
of the client that i'm running

00:49:25,040 --> 00:49:31,440
to um to actually change

00:49:28,160 --> 00:49:32,559
what it's how it how it displays the

00:49:31,440 --> 00:49:35,520
view itself

00:49:32,559 --> 00:49:36,960
um so each v each user can see a

00:49:35,520 --> 00:49:38,079
different view of the data even though

00:49:36,960 --> 00:49:42,240
their client

00:49:38,079 --> 00:49:42,240
does have an identical copy of the state

00:49:42,640 --> 00:49:46,240
i'll play it one more and you'll see

00:49:44,240 --> 00:49:48,079
that this is sent to the server

00:49:46,240 --> 00:49:50,160
this actually doesn't modify the estate

00:49:48,079 --> 00:49:52,720
internally until it's received

00:49:50,160 --> 00:49:54,240
uh the state update from the server and

00:49:52,720 --> 00:49:56,480
that's what allows it to keep

00:49:54,240 --> 00:49:57,920
doing these things in order although one

00:49:56,480 --> 00:49:58,400
of the next things i want to implement

00:49:57,920 --> 00:50:00,400
is

00:49:58,400 --> 00:50:01,920
uh an approach where it optimistically

00:50:00,400 --> 00:50:05,839
applies it locally

00:50:01,920 --> 00:50:07,839
and then ensures that the server um

00:50:05,839 --> 00:50:13,200
sends the same state update expects and

00:50:07,839 --> 00:50:16,240
rolls back if it doesn't

00:50:13,200 --> 00:50:17,440
um so that's that's my talk this is all

00:50:16,240 --> 00:50:21,200
online

00:50:17,440 --> 00:50:24,319
so apr is at apri.dev the github

00:50:21,200 --> 00:50:27,599
organization is apri-dev

00:50:24,319 --> 00:50:28,800
this example that i showed is uh right

00:50:27,599 --> 00:50:30,800
in the

00:50:28,800 --> 00:50:32,079
github you can just cargo run and it

00:50:30,800 --> 00:50:34,400
will actually compile

00:50:32,079 --> 00:50:35,119
both the client and the server assuming

00:50:34,400 --> 00:50:36,830
that you have

00:50:35,119 --> 00:50:38,160
the right bosom um

00:50:36,830 --> 00:50:40,559
[Music]

00:50:38,160 --> 00:50:42,400
tools installed like bind gen but it's

00:50:40,559 --> 00:50:45,359
it's again pretty standard

00:50:42,400 --> 00:50:46,880
tool ecosystem um or you use this this

00:50:45,359 --> 00:50:49,200
ecosystems tools

00:50:46,880 --> 00:50:51,839
um and these slides are also online on

00:50:49,200 --> 00:50:53,599
that website

00:50:51,839 --> 00:50:55,839
uh thank you i guess i have time for

00:50:53,599 --> 00:50:55,839
questions

00:50:56,240 --> 00:50:59,839
all right so again virtual club round

00:50:59,520 --> 00:51:02,400
off

00:50:59,839 --> 00:51:03,280
close thank you paul for this amazing

00:51:02,400 --> 00:51:06,640
talk

00:51:03,280 --> 00:51:07,680
and so far i think we have had one

00:51:06,640 --> 00:51:10,800
question

00:51:07,680 --> 00:51:14,000
uh coming to your way uh

00:51:10,800 --> 00:51:16,480
is april a crdt library

00:51:14,000 --> 00:51:18,319
if not in which way is it different from

00:51:16,480 --> 00:51:20,559
crdt

00:51:18,319 --> 00:51:22,400
this is an amazing question i actually

00:51:20,559 --> 00:51:24,960
predicted this question so i have a

00:51:22,400 --> 00:51:26,160
couple more slides on this um so it is

00:51:24,960 --> 00:51:28,079
not a crdt

00:51:26,160 --> 00:51:29,839
um one of the big differences the way i

00:51:28,079 --> 00:51:32,640
think of it is with the crdt

00:51:29,839 --> 00:51:33,599
you're dealing with a set of of these

00:51:32,640 --> 00:51:35,280
transitions

00:51:33,599 --> 00:51:36,960
um this is dealing with an ordered

00:51:35,280 --> 00:51:39,440
sequence of transitions

00:51:36,960 --> 00:51:41,359
and the nice the advantage of the set

00:51:39,440 --> 00:51:42,319
approach with crdts is you don't need a

00:51:41,359 --> 00:51:44,800
central server

00:51:42,319 --> 00:51:46,240
to manage that set peers can can kind of

00:51:44,800 --> 00:51:48,480
send peer-to-peer

00:51:46,240 --> 00:51:50,079
um what those transitions are there's

00:51:48,480 --> 00:51:52,720
also the downside though that

00:51:50,079 --> 00:51:53,119
that set will only ever grow over time

00:51:52,720 --> 00:51:55,599
um

00:51:53,119 --> 00:51:56,319
with apr you kind of you you step into

00:51:55,599 --> 00:51:58,640
the stream

00:51:56,319 --> 00:52:00,079
um and get a complete copy of the state

00:51:58,640 --> 00:52:03,359
and then you just get

00:52:00,079 --> 00:52:06,480
um versions of the stream from there

00:52:03,359 --> 00:52:09,119
so um this you know the big thing for me

00:52:06,480 --> 00:52:12,000
was this monotonic

00:52:09,119 --> 00:52:14,559
memory footprint growth or or state size

00:52:12,000 --> 00:52:16,800
footprint growth with crdts

00:52:14,559 --> 00:52:17,839
what i found was looking in the wild is

00:52:16,800 --> 00:52:19,119
that

00:52:17,839 --> 00:52:21,520
a lot of people who you think might be

00:52:19,119 --> 00:52:24,559
using crdts are

00:52:21,520 --> 00:52:25,119
using crdts as inspiration but actually

00:52:24,559 --> 00:52:29,280
aren't

00:52:25,119 --> 00:52:30,880
using crdts themselves

00:52:29,280 --> 00:52:33,119
especially if they have a central server

00:52:30,880 --> 00:52:35,680
that it just seems the cost uh

00:52:33,119 --> 00:52:36,480
the cost that you pay with the crdt

00:52:35,680 --> 00:52:38,319
doesn't

00:52:36,480 --> 00:52:39,599
uh always pay off if you don't need that

00:52:38,319 --> 00:52:42,720
peer-to-peer aspect

00:52:39,599 --> 00:52:42,720
so thanks that's a great question

00:52:43,839 --> 00:52:47,920
all right so the second question is from

00:52:46,800 --> 00:52:50,960
basically no

00:52:47,920 --> 00:52:54,480
i remember watching a google developer

00:52:50,960 --> 00:52:54,960
talk on how to overwatch developers to

00:52:54,480 --> 00:52:57,520
do

00:52:54,960 --> 00:52:58,480
a network replication for their game is

00:52:57,520 --> 00:53:00,559
this library

00:52:58,480 --> 00:53:02,640
inspired by any particular way of

00:53:00,559 --> 00:53:05,680
replication

00:53:02,640 --> 00:53:07,680
um i took i definitely took uh i looked

00:53:05,680 --> 00:53:09,839
a lot at what figma has done

00:53:07,680 --> 00:53:11,280
the excalibur developers as well have

00:53:09,839 --> 00:53:14,640
been pretty open

00:53:11,280 --> 00:53:15,520
um with how they kind of architected

00:53:14,640 --> 00:53:17,760
things so there's some

00:53:15,520 --> 00:53:19,359
good resources out there now um and i

00:53:17,760 --> 00:53:22,079
definitely did look at um

00:53:19,359 --> 00:53:24,160
at crdt approaches there's also a ton of

00:53:22,079 --> 00:53:27,200
great material on crdt and

00:53:24,160 --> 00:53:29,359
operational transform as well but um

00:53:27,200 --> 00:53:30,880
games are really interesting i um i'm

00:53:29,359 --> 00:53:32,720
not a game developer myself so this is

00:53:30,880 --> 00:53:35,599
kind of the first time i've tried to do

00:53:32,720 --> 00:53:36,160
a game but when i looked into it i did

00:53:35,599 --> 00:53:38,240
find

00:53:36,160 --> 00:53:39,920
things like um like towards the end i

00:53:38,240 --> 00:53:41,359
mentioned the idea of kind of

00:53:39,920 --> 00:53:43,040
optimistically applying state and

00:53:41,359 --> 00:53:45,520
rolling it back

00:53:43,040 --> 00:53:46,960
that's definitely something that um that

00:53:45,520 --> 00:53:49,760
i've read about happening in

00:53:46,960 --> 00:53:50,240
game development as is the idea of kind

00:53:49,760 --> 00:53:52,559
of

00:53:50,240 --> 00:53:53,599
sharing the state code between the

00:53:52,559 --> 00:53:55,440
client and server

00:53:53,599 --> 00:53:57,440
which i think is is a really great idea

00:53:55,440 --> 00:53:58,800
even if you're not using apr like

00:53:57,440 --> 00:54:00,800
one of the coolest things to me about

00:53:58,800 --> 00:54:03,920
webassembly is that you can

00:54:00,800 --> 00:54:05,280
write the same code and share it between

00:54:03,920 --> 00:54:06,640
the client and the server

00:54:05,280 --> 00:54:08,559
without restricting yourself to

00:54:06,640 --> 00:54:10,880
javascript and node um

00:54:08,559 --> 00:54:11,599
you know you can use whatever language

00:54:10,880 --> 00:54:14,880
you want and

00:54:11,599 --> 00:54:16,480
and rust is a great choice for that um

00:54:14,880 --> 00:54:18,000
so yeah i think that that sort of

00:54:16,480 --> 00:54:21,200
general approach too of

00:54:18,000 --> 00:54:22,800
sharing code uh state update code client

00:54:21,200 --> 00:54:24,319
and server

00:54:22,800 --> 00:54:26,480
does come from the game development

00:54:24,319 --> 00:54:28,480
community

00:54:26,480 --> 00:54:30,079
all right one last question i'm going to

00:54:28,480 --> 00:54:32,960
send on your way is this

00:54:30,079 --> 00:54:34,000
one is from flaky does the web assembly

00:54:32,960 --> 00:54:37,119
render

00:54:34,000 --> 00:54:40,400
render the canvas or use this you

00:54:37,119 --> 00:54:43,599
and the door it uses you and the dom

00:54:40,400 --> 00:54:44,960
i use svg i actually learned a lot of

00:54:43,599 --> 00:54:48,160
svg while i was doing this

00:54:44,960 --> 00:54:50,880
um i didn't think it would be capable of

00:54:48,160 --> 00:54:52,160
doing the both the some of the

00:54:50,880 --> 00:54:54,880
transitions i used

00:54:52,160 --> 00:54:56,559
and also drawing a rectangle with holes

00:54:54,880 --> 00:54:56,880
in it um turns out to be really easy to

00:54:56,559 --> 00:54:58,880
do

00:54:56,880 --> 00:55:00,319
with svg i thought i would need to write

00:54:58,880 --> 00:55:02,079
some path commands or do

00:55:00,319 --> 00:55:03,440
something but it turns out you can just

00:55:02,079 --> 00:55:07,040
subtract

00:55:03,440 --> 00:55:11,440
using masks which is pretty cool

00:55:07,040 --> 00:55:13,680
yeah all right thank you paul

00:55:11,440 --> 00:55:14,480
thank you i think that's we can call

00:55:13,680 --> 00:55:18,799
that a rock

00:55:14,480 --> 00:55:22,160
thank you for this awesome talk and

00:55:18,799 --> 00:55:24,720
our next and last talk for today

00:55:22,160 --> 00:55:25,920
would be from mario garcia and we will

00:55:24,720 --> 00:55:29,040
be talking about

00:55:25,920 --> 00:55:31,040
continuous integration on gitlab with

00:55:29,040 --> 00:55:35,839
rust

00:55:31,040 --> 00:55:35,839
mario onto you

00:55:42,480 --> 00:55:46,880
thank you so much for having me i'm

00:55:44,799 --> 00:55:50,240
mario garcia i'm joining

00:55:46,880 --> 00:55:53,359
this event from mexico i've been an

00:55:50,240 --> 00:55:56,240
open source user and contributor for

00:55:53,359 --> 00:55:57,359
a little more than a decade i started

00:55:56,240 --> 00:56:01,280
with ross

00:55:57,359 --> 00:56:04,079
in 2016 and i

00:56:01,280 --> 00:56:04,799
got interested in web development with

00:56:04,079 --> 00:56:07,280
ross

00:56:04,799 --> 00:56:08,480
and that's what uh what i've been doing

00:56:07,280 --> 00:56:12,720
with the language

00:56:08,480 --> 00:56:16,319
over the last five years and

00:56:12,720 --> 00:56:19,040
two years ago i got interested in

00:56:16,319 --> 00:56:21,200
topic related with devops and i started

00:56:19,040 --> 00:56:21,200
to

00:56:21,280 --> 00:56:27,599
to try with some cicd tools

00:56:25,200 --> 00:56:28,319
but the one that i would like to talk

00:56:27,599 --> 00:56:32,000
about today

00:56:28,319 --> 00:56:34,960
is gitlab ci the cicd tool that

00:56:32,000 --> 00:56:35,520
gitlab provided when you register an

00:56:34,960 --> 00:56:38,720
account

00:56:35,520 --> 00:56:41,760
on the platform so this will be an

00:56:38,720 --> 00:56:44,400
introduction and i i've been writing

00:56:41,760 --> 00:56:45,520
about this topic so you can find some

00:56:44,400 --> 00:56:48,799
blog posts on

00:56:45,520 --> 00:56:52,400
my dev account and right

00:56:48,799 --> 00:56:53,680
after this talk there will be another

00:56:52,400 --> 00:56:58,000
blog post available

00:56:53,680 --> 00:57:00,000
that i wrote last weekend

00:56:58,000 --> 00:57:02,079
i'm also a member of the gitlab heroes

00:57:00,000 --> 00:57:04,960
program you can find me on twitter as

00:57:02,079 --> 00:57:04,960
mario gmg

00:57:08,160 --> 00:57:11,280
so these are these are the tools that

00:57:10,000 --> 00:57:15,520
i've tried i i

00:57:11,280 --> 00:57:15,520
started with tri-ci and

00:57:16,000 --> 00:57:19,520
gitlab ci was the second one that i

00:57:18,319 --> 00:57:23,359
tried uh

00:57:19,520 --> 00:57:26,480
gitlab ci i started with with

00:57:23,359 --> 00:57:30,079
this tool about two years ago

00:57:26,480 --> 00:57:34,000
uh github action wasn't available yet

00:57:30,079 --> 00:57:37,119
uh during that time uh it was released

00:57:34,000 --> 00:57:41,359
well the the beta access was

00:57:37,119 --> 00:57:44,880
open later that that year and

00:57:41,359 --> 00:57:47,599
why i choose gitlab over

00:57:44,880 --> 00:57:48,319
the other tools that i listed that other

00:57:47,599 --> 00:57:51,440
that are

00:57:48,319 --> 00:57:51,440
available out there

00:57:51,520 --> 00:57:56,480
well this and these are some of the

00:57:54,720 --> 00:58:00,160
resources why

00:57:56,480 --> 00:58:03,280
well gitlab ci is part of the of the

00:58:00,160 --> 00:58:05,440
whole platform i mean when you register

00:58:03,280 --> 00:58:08,400
an account on gitlab.com you would

00:58:05,440 --> 00:58:09,839
get access to gitlab ci and other

00:58:08,400 --> 00:58:12,720
features that you will

00:58:09,839 --> 00:58:15,520
find interesting but it's also part of

00:58:12,720 --> 00:58:15,520
the open source

00:58:15,760 --> 00:58:21,119
project of gitlab and it has docker

00:58:18,559 --> 00:58:24,559
support i will talk about

00:58:21,119 --> 00:58:27,200
about that later today and other

00:58:24,559 --> 00:58:27,760
features that i like about gitlab is

00:58:27,200 --> 00:58:30,720
that

00:58:27,760 --> 00:58:31,599
you have also gitlab pages it has

00:58:30,720 --> 00:58:36,319
support for

00:58:31,599 --> 00:58:36,960
any static site generator um i'm talking

00:58:36,319 --> 00:58:41,520
about that

00:58:36,960 --> 00:58:44,079
next week and another event and

00:58:41,520 --> 00:58:44,079
one of the

00:58:44,559 --> 00:58:49,359
the tools that gitlab gitlab pages have

00:58:48,400 --> 00:58:53,680
support for is

00:58:49,359 --> 00:58:55,760
md book but this talk is not about that

00:58:53,680 --> 00:58:57,760
it also have support for tls

00:58:55,760 --> 00:59:00,160
certificates with let's encrypt

00:58:57,760 --> 00:59:01,280
and has integration with other tools and

00:59:00,160 --> 00:59:04,480
platforms

00:59:01,280 --> 00:59:05,200
i've been trying some tools that you can

00:59:04,480 --> 00:59:08,799
use for

00:59:05,200 --> 00:59:12,079
security scanning or keeping your

00:59:08,799 --> 00:59:12,079
dependencies updated

00:59:16,799 --> 00:59:19,839
but let's talk about

00:59:19,920 --> 00:59:23,920
cicd for ros well something that that we

00:59:23,280 --> 00:59:27,119
have to do

00:59:23,920 --> 00:59:27,760
after we create a repository for our

00:59:27,119 --> 00:59:30,559
project

00:59:27,760 --> 00:59:31,359
these are three files that that we must

00:59:30,559 --> 00:59:35,119
create

00:59:31,359 --> 00:59:40,240
on a repository you can find an example

00:59:35,119 --> 00:59:40,240
in in this url this is a

00:59:40,720 --> 00:59:44,160
a project that i have configured for

00:59:43,520 --> 00:59:46,480
trying

00:59:44,160 --> 00:59:48,960
gitlab ci but you have to add these

00:59:46,480 --> 00:59:52,480
three files

00:59:48,960 --> 00:59:52,480
that will contain the following

00:59:52,559 --> 01:00:01,839
lines so this one that is the

00:59:57,599 --> 01:00:03,920
proc file google contained instructions

01:00:01,839 --> 01:00:06,000
this is for heroku i will talk about

01:00:03,920 --> 01:00:09,599
heroku and google app engine

01:00:06,000 --> 01:00:12,079
how you can use gitlab ci for deploying

01:00:09,599 --> 01:00:13,760
on any of those platforms but you can

01:00:12,079 --> 01:00:16,400
also use gitlab ci for

01:00:13,760 --> 01:00:17,359
amazon web services or any other

01:00:16,400 --> 01:00:20,799
platform like

01:00:17,359 --> 01:00:24,000
like network but uh this uh

01:00:20,799 --> 01:00:26,000
little um example here is for

01:00:24,000 --> 01:00:27,599
for heraku this is the instruction that

01:00:26,000 --> 01:00:30,720
heroku

01:00:27,599 --> 01:00:33,040
has to run so so your application

01:00:30,720 --> 01:00:34,480
start when you deploy on that platform

01:00:33,040 --> 01:00:37,520
you have to

01:00:34,480 --> 01:00:40,839
um assign the value of the

01:00:37,520 --> 01:00:43,520
the port that heroku assigned to your

01:00:40,839 --> 01:00:44,720
application in this variable and you

01:00:43,520 --> 01:00:48,160
have to specify

01:00:44,720 --> 01:00:50,720
the the environment where the

01:00:48,160 --> 01:00:51,200
where your application will be running

01:00:50,720 --> 01:00:54,720
and

01:00:51,200 --> 01:00:56,079
the the path for for the binary that is

01:00:54,720 --> 01:00:59,119
created after

01:00:56,079 --> 01:01:01,200
you build your your project

01:00:59,119 --> 01:01:03,359
and we have uh another one that is for

01:01:01,200 --> 01:01:06,160
us config we have to specify the

01:01:03,359 --> 01:01:07,680
version of rows that we are using for

01:01:06,160 --> 01:01:11,920
building our project

01:01:07,680 --> 01:01:15,040
and sorry

01:01:11,920 --> 01:01:17,119
rocket thomas that will have a

01:01:15,040 --> 01:01:18,160
basic configuration and we have to

01:01:17,119 --> 01:01:21,760
specify

01:01:18,160 --> 01:01:22,960
here the url uh if we talk about herraku

01:01:21,760 --> 01:01:25,280
the url that

01:01:22,960 --> 01:01:26,720
hero was assigned to the application

01:01:25,280 --> 01:01:30,720
that we created

01:01:26,720 --> 01:01:33,760
on the platform the one that will uh

01:01:30,720 --> 01:01:39,200
be used for deploying our project

01:01:33,760 --> 01:01:42,319
and the most important part here is

01:01:39,200 --> 01:01:46,319
what it is in the production section

01:01:42,319 --> 01:01:49,920
you have to specify the url and

01:01:46,319 --> 01:01:52,319
these files are so important

01:01:49,920 --> 01:01:53,520
we have to create those files of heroku

01:01:52,319 --> 01:01:57,920
know what version

01:01:53,520 --> 01:01:59,440
of of ros we have to use and what

01:01:57,920 --> 01:02:01,039
will be the instructions for running the

01:01:59,440 --> 01:02:04,480
application but

01:02:01,039 --> 01:02:04,480
these are um

01:02:05,200 --> 01:02:08,960
depending on the on the platform that

01:02:07,119 --> 01:02:12,240
you that you choose for

01:02:08,960 --> 01:02:15,599
deploying your application you probably

01:02:12,240 --> 01:02:17,760
don't need to create all of these files

01:02:15,599 --> 01:02:21,839
but the one that must be must be there

01:02:17,760 --> 01:02:21,839
always is rocket.domo

01:02:23,280 --> 01:02:27,200
and if we talk about google app engine

01:02:25,359 --> 01:02:28,720
we have to create a dockerfile with the

01:02:27,200 --> 01:02:29,760
instructions for building our

01:02:28,720 --> 01:02:31,680
application

01:02:29,760 --> 01:02:33,200
something that is recommended is that

01:02:31,680 --> 01:02:36,960
you use

01:02:33,200 --> 01:02:37,599
multi-stage builds for building the

01:02:36,960 --> 01:02:39,839
docker

01:02:37,599 --> 01:02:40,960
image that will be used for deploying on

01:02:39,839 --> 01:02:44,240
that platform

01:02:40,960 --> 01:02:47,440
and the file app

01:02:44,240 --> 01:02:50,799
the java file that we have here

01:02:47,440 --> 01:02:53,599
you can check an example in this

01:02:50,799 --> 01:02:53,599
repository

01:02:54,720 --> 01:02:59,280
and the docker file will look similar to

01:02:56,960 --> 01:02:59,280
this

01:02:59,920 --> 01:03:06,319
while using multi-stage built for

01:03:03,280 --> 01:03:06,640
creating this docker image the reason

01:03:06,319 --> 01:03:12,480
why

01:03:06,640 --> 01:03:14,559
is that when we run cargo build release

01:03:12,480 --> 01:03:16,880
we get so many files in the target

01:03:14,559 --> 01:03:20,720
directory but we only need

01:03:16,880 --> 01:03:22,640
the binary that we have to execute for

01:03:20,720 --> 01:03:24,559
running our application so we don't need

01:03:22,640 --> 01:03:27,839
the other files available there

01:03:24,559 --> 01:03:29,039
and that's why we use multi-stage build

01:03:27,839 --> 01:03:32,079
for that

01:03:29,039 --> 01:03:34,640
first we compile our project without

01:03:32,079 --> 01:03:36,720
we download the the dependencies of our

01:03:34,640 --> 01:03:41,039
project and compile the project uh

01:03:36,720 --> 01:03:44,240
in general and we get the

01:03:41,039 --> 01:03:47,039
binary from from that first stage

01:03:44,240 --> 01:03:48,000
and copy that binary to the to the last

01:03:47,039 --> 01:03:50,480
stage that

01:03:48,000 --> 01:03:52,480
were that would contain also the other

01:03:50,480 --> 01:03:52,799
files that we have in the repository

01:03:52,480 --> 01:03:56,480
that

01:03:52,799 --> 01:04:00,160
are important for um

01:03:56,480 --> 01:04:03,760
telling the platform how

01:04:00,160 --> 01:04:05,839
it has to how the the application has to

01:04:03,760 --> 01:04:08,400
be executed

01:04:05,839 --> 01:04:10,240
and this is the content for the the

01:04:08,400 --> 01:04:10,720
jammon file that we have here this is

01:04:10,240 --> 01:04:14,720
for

01:04:10,720 --> 01:04:14,720
configuring google app engine

01:04:19,359 --> 01:04:22,400
well talking about heroku there's a

01:04:21,680 --> 01:04:25,359
built

01:04:22,400 --> 01:04:26,319
there's not an official buildback for

01:04:25,359 --> 01:04:28,480
for ross

01:04:26,319 --> 01:04:30,319
but there's a buildback that i've been

01:04:28,480 --> 01:04:32,079
using for

01:04:30,319 --> 01:04:35,440
for deploying some applications to

01:04:32,079 --> 01:04:37,760
heroku this is a

01:04:35,440 --> 01:04:38,799
a build pack developed by the community

01:04:37,760 --> 01:04:42,000
you can check

01:04:38,799 --> 01:04:45,599
the repository here and

01:04:42,000 --> 01:04:48,240
but if you if we want to

01:04:45,599 --> 01:04:49,520
deploy an app to heroku we have to

01:04:48,240 --> 01:04:53,440
register an account

01:04:49,520 --> 01:04:56,160
we if we don't have one

01:04:53,440 --> 01:04:59,359
after that we have to create a new app

01:04:56,160 --> 01:05:01,520
heroku will assign a url that we would

01:04:59,359 --> 01:05:05,200
use for

01:05:01,520 --> 01:05:07,680
telling telling ros

01:05:05,200 --> 01:05:08,880
when where the application will be

01:05:07,680 --> 01:05:11,359
available

01:05:08,880 --> 01:05:12,640
we have to add the ros buildpath

01:05:11,359 --> 01:05:14,240
depending on the

01:05:12,640 --> 01:05:15,760
kind of application that you are

01:05:14,240 --> 01:05:19,440
building this

01:05:15,760 --> 01:05:22,960
is optional but if we are deploying

01:05:19,440 --> 01:05:23,760
an app built only with rust we have to

01:05:22,960 --> 01:05:26,240
specify

01:05:23,760 --> 01:05:27,839
the buildback that we are using then

01:05:26,240 --> 01:05:29,359
after that we have to go to the

01:05:27,839 --> 01:05:32,400
dashboard and copy the

01:05:29,359 --> 01:05:34,480
api key from our account this is so

01:05:32,400 --> 01:05:37,680
important that we

01:05:34,480 --> 01:05:38,799
require this information for telling

01:05:37,680 --> 01:05:42,480
gitlab

01:05:38,799 --> 01:05:45,200
gitlab ci how to access our account on

01:05:42,480 --> 01:05:49,440
heroku.com

01:05:45,200 --> 01:05:52,880
and for google engine we have to

01:05:49,440 --> 01:05:56,079
spend a little more time for configuring

01:05:52,880 --> 01:05:57,119
our application and configuring the the

01:05:56,079 --> 01:06:00,160
platform for

01:05:57,119 --> 01:06:01,520
deploying our project but what we have

01:06:00,160 --> 01:06:04,720
to do is

01:06:01,520 --> 01:06:08,240
first is create creating an account

01:06:04,720 --> 01:06:10,799
at cloud.google.com app engine

01:06:08,240 --> 01:06:11,440
we have to create a new project i won't

01:06:10,799 --> 01:06:14,640
explain

01:06:11,440 --> 01:06:18,079
won't explain the whole process

01:06:14,640 --> 01:06:22,400
as this um

01:06:18,079 --> 01:06:24,240
i already wrote uh

01:06:22,400 --> 01:06:26,640
an article about that that will be

01:06:24,240 --> 01:06:29,520
available right after this talk

01:06:26,640 --> 01:06:32,240
and well um we have to create an

01:06:29,520 --> 01:06:35,599
application select a region from that

01:06:32,240 --> 01:06:37,359
select the programming language ros is

01:06:35,599 --> 01:06:40,400
not listed so we have to

01:06:37,359 --> 01:06:43,599
to choose other but

01:06:40,400 --> 01:06:46,960
google app engine has a performance

01:06:43,599 --> 01:06:49,359
and set the environment to flex

01:06:46,960 --> 01:06:50,000
then we have to create an account that

01:06:49,359 --> 01:06:53,039
account

01:06:50,000 --> 01:06:56,799
will be the one that gitlab ci would use

01:06:53,039 --> 01:06:59,359
for getting access to our google app

01:06:56,799 --> 01:07:01,680
engine account and deploying our

01:06:59,359 --> 01:07:04,740
application

01:07:01,680 --> 01:07:06,480
we have to grant access to to the

01:07:04,740 --> 01:07:08,880
[Music]

01:07:06,480 --> 01:07:10,720
service account that we created before

01:07:08,880 --> 01:07:13,200
for the project we have to add

01:07:10,720 --> 01:07:14,960
the follow the the roles that are listed

01:07:13,200 --> 01:07:16,880
here

01:07:14,960 --> 01:07:19,039
and then we have to create a private key

01:07:16,880 --> 01:07:22,319
this will generate a json file

01:07:19,039 --> 01:07:26,400
that will be downloaded after

01:07:22,319 --> 01:07:26,880
we create that that key we require this

01:07:26,400 --> 01:07:31,119
file

01:07:26,880 --> 01:07:33,280
for configuring gitlab ci and

01:07:31,119 --> 01:07:36,240
after that we have to enable the app

01:07:33,280 --> 01:07:39,920
engine admin api

01:07:36,240 --> 01:07:42,880
and finally we have to add these storage

01:07:39,920 --> 01:07:43,680
storage permissions storage object

01:07:42,880 --> 01:07:47,280
creator and

01:07:43,680 --> 01:07:47,680
update viewer to for the for the pockets

01:07:47,280 --> 01:07:52,240
that

01:07:47,680 --> 01:07:57,839
um that are created the first time we

01:07:52,240 --> 01:07:57,839
create an application for our project

01:08:00,079 --> 01:08:04,720
well i'm talking about gitlab ci the

01:08:02,000 --> 01:08:08,839
configuration will change depending on

01:08:04,720 --> 01:08:11,119
the platform we choose for deploying our

01:08:08,839 --> 01:08:16,159
application

01:08:11,119 --> 01:08:18,400
we have to configure first by adding the

01:08:16,159 --> 01:08:21,120
the variables that are required for

01:08:18,400 --> 01:08:24,319
heroku we have to add

01:08:21,120 --> 01:08:27,040
the heroku api key variable and paste

01:08:24,319 --> 01:08:27,440
the api key the value of the api key

01:08:27,040 --> 01:08:31,359
that

01:08:27,440 --> 01:08:35,759
we copied before and then create

01:08:31,359 --> 01:08:35,759
the gitlab ci configuration file

01:08:36,640 --> 01:08:41,600
and for google engine the the steps will

01:08:40,319 --> 01:08:45,279
be the same

01:08:41,600 --> 01:08:48,080
but we have to add two variables

01:08:45,279 --> 01:08:48,560
one for the project id this is the id of

01:08:48,080 --> 01:08:51,679
the

01:08:48,560 --> 01:08:53,679
project that we created before and

01:08:51,679 --> 01:08:55,679
we have to add the the content of the

01:08:53,679 --> 01:08:59,199
json file that we downloaded

01:08:55,679 --> 01:09:01,199
in the service account variable

01:08:59,199 --> 01:09:07,679
and after that we have to create the

01:09:01,199 --> 01:09:11,040
gitlab ci demo file

01:09:07,679 --> 01:09:15,600
for the first scenario when we use

01:09:11,040 --> 01:09:18,960
heroku for deploying our application

01:09:15,600 --> 01:09:20,400
this is how the gitlab ci configuration

01:09:18,960 --> 01:09:23,600
file will look like

01:09:20,400 --> 01:09:26,080
we have two stages here we can add

01:09:23,600 --> 01:09:27,679
more stages depending on on the needs of

01:09:26,080 --> 01:09:30,960
our project

01:09:27,679 --> 01:09:34,159
we have here the build and deploy

01:09:30,960 --> 01:09:37,839
stages in the build

01:09:34,159 --> 01:09:38,400
stage we uh build our application and

01:09:37,839 --> 01:09:41,359
run

01:09:38,400 --> 01:09:41,359
the test that we

01:09:41,440 --> 01:09:46,080
that we wrote in

01:09:44,710 --> 01:09:50,319
[Music]

01:09:46,080 --> 01:09:54,000
in the in our in our code

01:09:50,319 --> 01:09:57,440
and uh we can change here

01:09:54,000 --> 01:09:58,239
this value to true if we uh don't care

01:09:57,440 --> 01:10:01,840
about

01:09:58,239 --> 01:10:04,800
the the test uh failing

01:10:01,840 --> 01:10:05,360
but if we don't want that the following

01:10:04,800 --> 01:10:09,199
stage

01:10:05,360 --> 01:10:12,080
started we have to

01:10:09,199 --> 01:10:13,360
to leave the the default value that is

01:10:12,080 --> 01:10:18,159
false

01:10:13,360 --> 01:10:18,159
and finally in the deploy stage

01:10:19,040 --> 01:10:22,719
we have to specify the platform that we

01:10:21,600 --> 01:10:25,440
are using

01:10:22,719 --> 01:10:26,640
the name of the ad that we created for

01:10:25,440 --> 01:10:30,000
in heroku

01:10:26,640 --> 01:10:33,280
and the variable that we added

01:10:30,000 --> 01:10:36,000
before after

01:10:33,280 --> 01:10:38,400
after we create this file the the

01:10:36,000 --> 01:10:43,040
pipelines

01:10:38,400 --> 01:10:47,040
of our repository will start so

01:10:43,040 --> 01:10:47,040
the first job will be executed

01:10:51,520 --> 01:11:01,280
and for google app engine um

01:10:58,239 --> 01:11:04,320
well um we have to

01:11:01,280 --> 01:11:09,199
um to configure

01:11:04,320 --> 01:11:09,199
here um specify the

01:11:10,400 --> 01:11:14,159
the information about the service

01:11:12,000 --> 01:11:17,440
account that we are using for accessing

01:11:14,159 --> 01:11:21,920
our our account on google app engine

01:11:17,440 --> 01:11:21,920
we have to specify um

01:11:22,000 --> 01:11:26,400
the information needed for for accessing

01:11:25,199 --> 01:11:29,040
our project

01:11:26,400 --> 01:11:30,000
and something that happened when i was

01:11:29,040 --> 01:11:33,199
building

01:11:30,000 --> 01:11:34,239
um the demo that is available in in this

01:11:33,199 --> 01:11:38,640
repository

01:11:34,239 --> 01:11:41,840
is that the

01:11:38,640 --> 01:11:45,600
the build the building process

01:11:41,840 --> 01:11:49,840
took so much time so i have to

01:11:45,600 --> 01:11:54,320
to what to set the time out to

01:11:49,840 --> 01:11:56,800
this this value is in seconds so

01:11:54,320 --> 01:11:57,760
the the building process never stopped

01:11:56,800 --> 01:12:00,640
before the

01:11:57,760 --> 01:12:01,520
before passing the time that that google

01:12:00,640 --> 01:12:04,640
app engine

01:12:01,520 --> 01:12:08,159
uh configured by default and

01:12:04,640 --> 01:12:11,040
then specify the the name of our project

01:12:08,159 --> 01:12:11,040
the project id

01:12:11,199 --> 01:12:15,920
for deploying our application

01:12:17,679 --> 01:12:21,550
well before before that i want to to

01:12:20,320 --> 01:12:24,719
show you

01:12:21,550 --> 01:12:29,280
[Music]

01:12:24,719 --> 01:12:29,280
let me go to my gitlab account

01:12:32,239 --> 01:12:37,840
just gives me a second

01:12:54,960 --> 01:12:58,760
okay um

01:12:55,690 --> 01:12:58,760
[Music]

01:12:59,679 --> 01:13:04,320
this is a demo for google app engine you

01:13:02,960 --> 01:13:06,159
can find here

01:13:04,320 --> 01:13:07,840
all the files that you require for

01:13:06,159 --> 01:13:08,880
configuring gitlab and especially

01:13:07,840 --> 01:13:13,520
configuring

01:13:08,880 --> 01:13:17,120
gitlab ci for the whole cicd process

01:13:13,520 --> 01:13:20,159
and if we go here to ci cd

01:13:17,120 --> 01:13:20,159
and pipelines

01:13:20,719 --> 01:13:24,159
this is something that i like about

01:13:22,640 --> 01:13:27,760
gitlab ci that we can

01:13:24,159 --> 01:13:31,120
we can see the pilot running

01:13:27,760 --> 01:13:34,719
in in real time we can we can

01:13:31,120 --> 01:13:37,920
see what is happening when

01:13:34,719 --> 01:13:37,920
when the jobs are running

01:13:38,239 --> 01:13:49,600
here i have only one job

01:13:46,320 --> 01:13:53,040
this is really helpful as there wasn't

01:13:49,600 --> 01:13:56,400
um enough documentation about

01:13:53,040 --> 01:13:59,440
what roles i have to add for

01:13:56,400 --> 01:14:00,320
to to the service account i created for

01:13:59,440 --> 01:14:03,920
google app

01:14:00,320 --> 01:14:07,840
engine but also uh

01:14:03,920 --> 01:14:07,840
the the blog post that i checked

01:14:08,320 --> 01:14:12,159
didn't mention that we have to enable

01:14:11,120 --> 01:14:16,480
the

01:14:12,159 --> 01:14:16,480
app engine admin api so

01:14:16,640 --> 01:14:22,239
the the log

01:14:19,679 --> 01:14:23,840
here shows you the the errors that you

01:14:22,239 --> 01:14:26,560
can get when

01:14:23,840 --> 01:14:28,080
when running your your pipelines and

01:14:26,560 --> 01:14:32,880
this has been really helpful

01:14:28,080 --> 01:14:35,280
for understanding how to configure

01:14:32,880 --> 01:14:36,000
gitlab ci for deploying on platforms

01:14:35,280 --> 01:14:39,040
like

01:14:36,000 --> 01:14:39,440
heroku or google app engine the other

01:14:39,040 --> 01:14:43,760
one

01:14:39,440 --> 01:14:45,550
another um project that i want to show

01:14:43,760 --> 01:14:48,080
you

01:14:45,550 --> 01:14:50,400
[Music]

01:14:48,080 --> 01:14:50,400
is

01:14:51,120 --> 01:14:57,840
this one

01:15:00,400 --> 01:15:03,920
the url is available in the slides i

01:15:02,640 --> 01:15:11,840
will share the slides

01:15:03,920 --> 01:15:11,840
after after the talk and

01:15:18,000 --> 01:15:21,600
so we can we can see here

01:15:22,239 --> 01:15:26,159
the pipelines the ones that that that

01:15:25,120 --> 01:15:31,280
failed

01:15:26,159 --> 01:15:31,280
there because

01:15:31,760 --> 01:15:35,840
i haven't i didn't know how to configure

01:15:34,080 --> 01:15:39,840
some part of the

01:15:35,840 --> 01:15:39,840
of gitlab ci but

01:15:40,800 --> 01:15:44,880
here you can see what is happening when

01:15:43,679 --> 01:15:47,120
you

01:15:44,880 --> 01:15:48,080
when you're running the the pipeline

01:15:47,120 --> 01:15:50,480
something that i

01:15:48,080 --> 01:15:51,280
didn't added in the slides but i have

01:15:50,480 --> 01:15:55,440
talked about

01:15:51,280 --> 01:15:58,000
before is is that um

01:15:55,440 --> 01:15:59,040
heroku well doesn't have an official

01:15:58,000 --> 01:16:01,600
buildback for

01:15:59,040 --> 01:16:01,600
for ross

01:16:02,480 --> 01:16:08,080
but have a community one available

01:16:05,600 --> 01:16:09,679
and you have to create those three files

01:16:08,080 --> 01:16:12,960
that i mentioned before

01:16:09,679 --> 01:16:15,440
but what happened if we decided to use

01:16:12,960 --> 01:16:19,520
another technology

01:16:15,440 --> 01:16:22,560
within ros for building a project

01:16:19,520 --> 01:16:23,120
i mean what if if we want to build an

01:16:22,560 --> 01:16:26,080
app

01:16:23,120 --> 01:16:28,159
with both ros and python something that

01:16:26,080 --> 01:16:30,400
happened here when we decided to use

01:16:28,159 --> 01:16:34,640
heroku is that

01:16:30,400 --> 01:16:38,320
sorry mario i think yes i think we just

01:16:34,640 --> 01:16:40,159
crossed the the time so yes if you can

01:16:38,320 --> 01:16:42,400
wrap it up and we can start taking

01:16:40,159 --> 01:16:46,000
questions

01:16:42,400 --> 01:16:47,679
yeah um well um i will share

01:16:46,000 --> 01:16:49,360
you can check the blog post that i

01:16:47,679 --> 01:16:52,800
already wrote about

01:16:49,360 --> 01:16:55,280
about browsing in gitlab ci by going

01:16:52,800 --> 01:16:56,400
to my dev account you can if you have

01:16:55,280 --> 01:16:59,440
any questions

01:16:56,400 --> 01:17:00,960
feel free to ask or you can send me a

01:16:59,440 --> 01:17:04,719
message

01:17:00,960 --> 01:17:07,440
on twitter you can find me as mario gmd

01:17:04,719 --> 01:17:07,440
thank you so much

01:17:09,199 --> 01:17:12,000
right thank you

01:17:13,360 --> 01:17:20,239
so yes so far we've got one question

01:17:16,880 --> 01:17:22,239
and it's from simon do you have any

01:17:20,239 --> 01:17:27,280
recommendation to reduce

01:17:22,239 --> 01:17:27,280
compile time for ros built in jetlag ci

01:17:28,000 --> 01:17:35,280
well something that i recently learned

01:17:31,280 --> 01:17:38,400
about about that is um how

01:17:35,280 --> 01:17:42,080
to use a multi-stage build

01:17:38,400 --> 01:17:45,280
for be for building your

01:17:42,080 --> 01:17:48,719
your whole project so you don't have to

01:17:45,280 --> 01:17:49,280
copy all the files that are generated

01:17:48,719 --> 01:17:52,800
after

01:17:49,280 --> 01:17:56,480
the building process what happens

01:17:52,800 --> 01:17:59,280
if we copy all the all the files

01:17:56,480 --> 01:18:01,280
we can have uh if we talk about google

01:17:59,280 --> 01:18:04,719
app engine we will have

01:18:01,280 --> 01:18:08,080
an a docker image of about uh

01:18:04,719 --> 01:18:11,120
one gigabyte of size but if we

01:18:08,080 --> 01:18:16,159
only copy the the binary

01:18:11,120 --> 01:18:16,159
we can reduce the size of the

01:18:16,960 --> 01:18:24,840
of the docker image by getting uh

01:18:20,560 --> 01:18:27,920
an image of about 100 megabytes

01:18:24,840 --> 01:18:31,600
um what is so important

01:18:27,920 --> 01:18:33,760
also is to to test your your apps before

01:18:31,600 --> 01:18:35,760
before deploying on any platform the

01:18:33,760 --> 01:18:40,159
platform that you choose this is so

01:18:35,760 --> 01:18:41,840
so important so we don't have to uh

01:18:40,159 --> 01:18:43,199
take care of the errors on the

01:18:41,840 --> 01:18:46,640
production side but

01:18:43,199 --> 01:18:55,840
before taking the code that will

01:18:46,640 --> 01:18:55,840
write to production

01:18:57,760 --> 01:19:01,120
the next and probably the last question

01:18:59,840 --> 01:19:04,480
we will take now for

01:19:01,120 --> 01:19:07,040
this one is from david richard

01:19:04,480 --> 01:19:08,000
as someone new to ross is there anything

01:19:07,040 --> 01:19:12,800
i could use

01:19:08,000 --> 01:19:12,800
the jitlab ci cd for as i learned

01:19:13,679 --> 01:19:20,960
yeah i was talking about uh

01:19:17,040 --> 01:19:24,000
some example of some web apps

01:19:20,960 --> 01:19:27,600
that i that i've been building

01:19:24,000 --> 01:19:31,040
but you can also use for for uh

01:19:27,600 --> 01:19:31,440
for for a project that that that will

01:19:31,040 --> 01:19:34,320
run

01:19:31,440 --> 01:19:35,600
on on the on the terminal that you don't

01:19:34,320 --> 01:19:39,600
you don't require to

01:19:35,600 --> 01:19:43,600
to run to deploy to any platform

01:19:39,600 --> 01:19:47,040
you you can run your application inside

01:19:43,600 --> 01:19:50,320
gitlab ci by running the

01:19:47,040 --> 01:19:53,360
the app after the building process so

01:19:50,320 --> 01:19:56,239
you can use uh gitlab ci for

01:19:53,360 --> 01:19:57,040
testing the apps that you that you are

01:19:56,239 --> 01:19:59,840
building while

01:19:57,040 --> 01:19:59,840
you're learning

01:20:00,640 --> 01:20:06,239
all right so thank you very much mario

01:20:04,000 --> 01:20:06,239

YouTube URL: https://www.youtube.com/watch?v=HNzeouj0eKc


