Title: R-Evolution: A Story of Rust Adoption - Ryan Levick
Publication date: 2019-11-15
Playlist: Rust and Tell Berlin
Description: 
	From the Berlin Rust's October "Rust and Tell" Meetup (https://www.meetup.com/Rust-Berlin/)
"Rust and Tellâ€œ is a monthly event to share ideas, and learn about new things in and about Rust. Meet fellow Rustaceans, share your learnings, get motivated and inspired. Weâ€™re open to any and all kinds of talks about any subjects that you think will be interesting to an audience interested in Rust. Whether you're an experienced Rust developer or just getting started, we strongly encourage you to share your learnings.

Ryan Levick: https://twitter.com/ryan_levick

Hosted at Prisma: prisma.io

ðŸŽ¥ Filmed by iStream: http://www.istream.pl/
Captions: 
	00:00:06,120 --> 00:00:13,080
all right so today I'm going to be

00:00:09,599 --> 00:00:16,130
talking about a revolution or an

00:00:13,080 --> 00:00:19,680
evolution at the company that I work for

00:00:16,130 --> 00:00:24,029
and this is a story of adopting rust at

00:00:19,680 --> 00:00:25,830
that company and so you all know me see

00:00:24,029 --> 00:00:29,070
me before I'm Ryan Levesque that's me

00:00:25,830 --> 00:00:31,470
right there and my co-presenter is

00:00:29,070 --> 00:00:32,940
Sebastian Fernandes he lives in London

00:00:31,470 --> 00:00:34,649
or actually doesn't live in London he

00:00:32,940 --> 00:00:36,290
lives outside of London and so he's not

00:00:34,649 --> 00:00:40,129
here tonight but he will be in Barcelona

00:00:36,290 --> 00:00:44,219
so if you're there say hello to him and

00:00:40,129 --> 00:00:45,480
basically we the story here today is

00:00:44,219 --> 00:00:50,850
about the company that we work at

00:00:45,480 --> 00:00:54,350
Microsoft and our slow and sometimes

00:00:50,850 --> 00:00:57,120
extremely painful journey into adopting

00:00:54,350 --> 00:00:58,800
the RUS programming language I mean

00:00:57,120 --> 00:01:00,660
hopefully after tonight you get an idea

00:00:58,800 --> 00:01:04,199
of what that journey has looked like so

00:01:00,660 --> 00:01:07,260
far maybe some idea of where it might be

00:01:04,199 --> 00:01:09,330
going in the future and then the

00:01:07,260 --> 00:01:11,280
interesting problems that adopting a

00:01:09,330 --> 00:01:13,860
programming language at any company let

00:01:11,280 --> 00:01:18,090
alone a huge engineering company like

00:01:13,860 --> 00:01:21,479
Microsoft and why adopting languages in

00:01:18,090 --> 00:01:24,210
general can be quite difficult but why

00:01:21,479 --> 00:01:29,220
adopting rust actually has made a lot of

00:01:24,210 --> 00:01:30,869
sense for us at Microsoft so to begin

00:01:29,220 --> 00:01:33,380
with that the first thing we can talk

00:01:30,869 --> 00:01:36,450
about is the problem the problem that

00:01:33,380 --> 00:01:39,720
Microsoft as a company was facing and

00:01:36,450 --> 00:01:46,729
ultimately where rust potentially could

00:01:39,720 --> 00:01:46,729
step in and help us with that problem so

00:01:47,240 --> 00:01:52,759
really what it comes down to is that

00:01:49,619 --> 00:01:54,869
there is a a problem in our industry

00:01:52,759 --> 00:01:57,020
some might say the billion dollar

00:01:54,869 --> 00:01:59,100
problem and no it's not no pointers

00:01:57,020 --> 00:02:01,170
although that has something to do with

00:01:59,100 --> 00:02:02,820
it actually

00:02:01,170 --> 00:02:06,320
and that billion dollar problem

00:02:02,820 --> 00:02:09,060
obviously affects Microsoft is a company

00:02:06,320 --> 00:02:10,679
quite largely because it's affecting

00:02:09,060 --> 00:02:11,700
everybody in the industry you can be

00:02:10,679 --> 00:02:12,990
sure that it's affecting

00:02:11,700 --> 00:02:14,760
one of the biggest companies in that

00:02:12,990 --> 00:02:18,450
industry

00:02:14,760 --> 00:02:24,599
and to be blunt about it the problem

00:02:18,450 --> 00:02:28,200
really is the language C++ and this well

00:02:24,599 --> 00:02:30,510
of course that's going to maybe shock

00:02:28,200 --> 00:02:33,330
some people in the room and we don't

00:02:30,510 --> 00:02:35,130
mean to say that if you use C++ you're

00:02:33,330 --> 00:02:37,020
stupid because that's certainly not the

00:02:35,130 --> 00:02:40,340
case C++ is an extremely powerful

00:02:37,020 --> 00:02:42,630
language it's also an extremely

00:02:40,340 --> 00:02:44,550
important language in the industry and

00:02:42,630 --> 00:02:46,560
has got us to the point that we're in

00:02:44,550 --> 00:02:49,680
for better or for worse

00:02:46,560 --> 00:02:53,580
and of course Microsoft is also has a

00:02:49,680 --> 00:02:57,330
huge hand in C++ we have a compiler so

00:02:53,580 --> 00:02:59,819
for for any troubles that C++ has

00:02:57,330 --> 00:03:01,980
introduced to the industry

00:02:59,819 --> 00:03:06,269
we're definitely partly to blame for

00:03:01,980 --> 00:03:11,130
that for sure and specifically what the

00:03:06,269 --> 00:03:14,069
the issue that C++ has is that it is not

00:03:11,130 --> 00:03:17,760
memory safe and what that means is that

00:03:14,069 --> 00:03:22,739
you can cause all kinds of issues quite

00:03:17,760 --> 00:03:25,380
easily in C++ by messing with memory in

00:03:22,739 --> 00:03:27,150
ways that are not sound and this might

00:03:25,380 --> 00:03:30,989
be common problems that you've heard of

00:03:27,150 --> 00:03:33,540
before like use after free or double

00:03:30,989 --> 00:03:36,959
free or something like that and

00:03:33,540 --> 00:03:38,970
ultimately what this leads to is not

00:03:36,959 --> 00:03:42,150
only buggy software that doesn't work

00:03:38,970 --> 00:03:44,670
right but also insecure software or

00:03:42,150 --> 00:03:47,130
software that others can exploit in

00:03:44,670 --> 00:03:48,329
order to take control over a computer

00:03:47,130 --> 00:03:52,799
that they shouldn't have control over

00:03:48,329 --> 00:03:56,069
and do nasty horrible things with it and

00:03:52,799 --> 00:03:57,840
here is a graph that we have produced

00:03:56,069 --> 00:04:00,510
and this is produced by a team at

00:03:57,840 --> 00:04:02,880
Microsoft called the the Microsoft

00:04:00,510 --> 00:04:04,470
Security Response Center and the

00:04:02,880 --> 00:04:06,750
Microsoft Security Response Center or

00:04:04,470 --> 00:04:09,829
nsrc which I'll probably refer to it

00:04:06,750 --> 00:04:13,650
from now on as is responsible for

00:04:09,829 --> 00:04:15,810
mitigating finding all the security

00:04:13,650 --> 00:04:18,570
related bugs in the software at

00:04:15,810 --> 00:04:19,919
Microsoft and going to the teams that

00:04:18,570 --> 00:04:23,599
are in charge of that code and getting

00:04:19,919 --> 00:04:25,200
them to fix it and that includes also

00:04:23,599 --> 00:04:27,870
spending a lot

00:04:25,200 --> 00:04:30,330
money to have people report the bugs to

00:04:27,870 --> 00:04:35,430
them instead of using those bugs for

00:04:30,330 --> 00:04:37,500
nasty nasty reasons and this graph with

00:04:35,430 --> 00:04:39,420
the show's over here is basically memory

00:04:37,500 --> 00:04:42,120
safety issues or many memory voter

00:04:39,420 --> 00:04:45,420
abilities security vulnerabilities by

00:04:42,120 --> 00:04:48,060
year and the good news is is that it's

00:04:45,420 --> 00:04:50,870
not going up the bad news is is that

00:04:48,060 --> 00:04:53,520
it's not going down so it's been at 70%

00:04:50,870 --> 00:04:56,790
basically since 2006 when this graph

00:04:53,520 --> 00:05:00,060
started and probably long before that as

00:04:56,790 --> 00:05:03,840
well and it has remained constant at 70%

00:05:00,060 --> 00:05:06,870
basically this entire time and we'll be

00:05:03,840 --> 00:05:09,240
talking later about ways that Microsoft

00:05:06,870 --> 00:05:12,390
has invested a ton of money in trying to

00:05:09,240 --> 00:05:14,370
get this number to go down and while

00:05:12,390 --> 00:05:17,640
that has been somewhat successful in

00:05:14,370 --> 00:05:19,470
some ways as you can see it has not been

00:05:17,640 --> 00:05:25,530
successful and actually reducing the

00:05:19,470 --> 00:05:29,790
number of CVEs or memory vulnerabilities

00:05:25,530 --> 00:05:32,610
that we see year-over-year and so of

00:05:29,790 --> 00:05:35,520
course you know Microsoft is a company

00:05:32,610 --> 00:05:37,470
and so we always ask ourselves well who

00:05:35,520 --> 00:05:39,590
cares this is actually costing us any

00:05:37,470 --> 00:05:44,370
money or costing our customers any money

00:05:39,590 --> 00:05:47,790
and the answer is absolutely it costs a

00:05:44,370 --> 00:05:50,820
lot of money in fact here is one figure

00:05:47,790 --> 00:05:55,500
a hundred thousand dollars but wait this

00:05:50,820 --> 00:05:57,570
figures from 2005 and at the time where

00:05:55,500 --> 00:06:00,930
when they reported this it was

00:05:57,570 --> 00:06:03,030
purposefully conservative so there are

00:06:00,930 --> 00:06:06,450
plenty of people who believe that this

00:06:03,030 --> 00:06:09,270
figure probably is now over a million

00:06:06,450 --> 00:06:11,750
and this is per issue found and there

00:06:09,270 --> 00:06:15,510
are several issues found per year

00:06:11,750 --> 00:06:19,800
certain issues can cost a lot upwards of

00:06:15,510 --> 00:06:21,840
a billion so we have in 2005 when this

00:06:19,800 --> 00:06:25,710
first report came out there was one

00:06:21,840 --> 00:06:27,720
issue that came out where the cost to

00:06:25,710 --> 00:06:29,850
Microsoft and to the customers where

00:06:27,720 --> 00:06:32,100
this where this vulnerability was being

00:06:29,850 --> 00:06:34,680
exploited was estimated to be over a

00:06:32,100 --> 00:06:37,380
billion u.s. dollars and this is one

00:06:34,680 --> 00:06:38,620
issue so if we have let's say it's a

00:06:37,380 --> 00:06:41,680
good year and have

00:06:38,620 --> 00:06:43,540
two or three that is a possibility of

00:06:41,680 --> 00:06:45,580
billions and billions of dollars being

00:06:43,540 --> 00:06:47,700
lost and of course this doesn't take

00:06:45,580 --> 00:06:49,960
into account like the pain and suffering

00:06:47,700 --> 00:06:53,380
that the engineers who had to fix this

00:06:49,960 --> 00:06:55,960
were or who knows maybe it was a bank

00:06:53,380 --> 00:06:59,500
system or something like that and people

00:06:55,960 --> 00:07:02,230
lost savings or something like that the

00:06:59,500 --> 00:07:04,510
these are cysts of critical systems that

00:07:02,230 --> 00:07:05,919
people are relying on and sometimes you

00:07:04,510 --> 00:07:09,280
can't even estimate what the actual

00:07:05,919 --> 00:07:11,800
damage is when they're exploited so this

00:07:09,280 --> 00:07:13,540
is not a trivial problem it's not a

00:07:11,800 --> 00:07:17,229
problem that we can just shrug off this

00:07:13,540 --> 00:07:20,919
is a problem that in some ways can be an

00:07:17,229 --> 00:07:23,380
existential threat to to us as a company

00:07:20,919 --> 00:07:25,120
and also to us as an industry everybody

00:07:23,380 --> 00:07:27,030
who works as a software engineer in the

00:07:25,120 --> 00:07:30,520
room

00:07:27,030 --> 00:07:32,830
so naturally we come to the like the

00:07:30,520 --> 00:07:37,210
easy question of how do we fix this this

00:07:32,830 --> 00:07:39,100
is not a good thing we should work on

00:07:37,210 --> 00:07:41,110
actually addressing this issue and

00:07:39,100 --> 00:07:42,760
there's been many many ideas of how to

00:07:41,110 --> 00:07:43,539
do this over the years and we'll go

00:07:42,760 --> 00:07:45,850
through some of them

00:07:43,539 --> 00:07:49,900
so the first bright idea that we've had

00:07:45,850 --> 00:07:51,910
was we need better programmers of course

00:07:49,900 --> 00:07:53,110
these dumb programmers keep on

00:07:51,910 --> 00:07:55,300
introducing these security

00:07:53,110 --> 00:07:58,000
vulnerabilities and this is what you see

00:07:55,300 --> 00:07:59,950
on hacker news all the time when when

00:07:58,000 --> 00:08:02,440
people talk about exploits they say oh I

00:07:59,950 --> 00:08:04,690
mean of course some junior engineer

00:08:02,440 --> 00:08:06,700
wrote this exploit if I were working in

00:08:04,690 --> 00:08:09,010
this company this would never happen

00:08:06,700 --> 00:08:12,100
I'm way too good of an engineer to

00:08:09,010 --> 00:08:14,410
introduce these issues and we as as

00:08:12,100 --> 00:08:16,240
Microsoft and as the Microsoft Security

00:08:14,410 --> 00:08:20,560
Response Center are here to say is that

00:08:16,240 --> 00:08:22,450
is not true there is literally not

00:08:20,560 --> 00:08:25,090
enough training that can be done to

00:08:22,450 --> 00:08:28,680
solve these issues even if you were able

00:08:25,090 --> 00:08:32,740
to hire very very skilled engineers only

00:08:28,680 --> 00:08:35,020
and give them enough time to write code

00:08:32,740 --> 00:08:37,450
as they expect to write code they will

00:08:35,020 --> 00:08:39,190
still make mistakes now let alone

00:08:37,450 --> 00:08:41,950
there's not enough engineers out there

00:08:39,190 --> 00:08:45,400
that are highly trained and C and C++

00:08:41,950 --> 00:08:48,130
and you have deadlines and things of

00:08:45,400 --> 00:08:51,280
that nature these mistakes will happen

00:08:48,130 --> 00:08:54,430
unless you make them not possible

00:08:51,280 --> 00:08:56,860
okay okay that's fine we can't have

00:08:54,430 --> 00:08:59,560
better programmers but how about another

00:08:56,860 --> 00:09:02,500
idea we need better static analysis

00:08:59,560 --> 00:09:05,010
tools we need more tools to say when a

00:09:02,500 --> 00:09:07,560
programmer who's writing C or C++

00:09:05,010 --> 00:09:11,470
actually makes a mistake and

00:09:07,560 --> 00:09:14,050
unfortunately while this does work to a

00:09:11,470 --> 00:09:17,290
certain extent and has actually reduced

00:09:14,050 --> 00:09:20,770
the the cost of a lot of mitigations

00:09:17,290 --> 00:09:22,990
that we've had before it still is not

00:09:20,770 --> 00:09:25,720
completely soundproof and as we saw

00:09:22,990 --> 00:09:27,490
before 70 percent vulnerabilities

00:09:25,720 --> 00:09:31,300
year-over-year this obviously does not

00:09:27,490 --> 00:09:33,070
fix the core of the problem and so you

00:09:31,300 --> 00:09:36,130
can throw a lot of static analysis tools

00:09:33,070 --> 00:09:38,770
at C and C++ it will find some issues

00:09:36,130 --> 00:09:42,460
but there are plenty of issues that

00:09:38,770 --> 00:09:44,620
cannot be found because basically if you

00:09:42,460 --> 00:09:46,090
had a static analysis tool good enough

00:09:44,620 --> 00:09:47,470
to find all these things it would be

00:09:46,090 --> 00:09:53,140
baked into the compiler in the first

00:09:47,470 --> 00:09:56,589
place so so then we come to our last and

00:09:53,140 --> 00:09:59,830
the probably the only good idea for

00:09:56,589 --> 00:10:02,440
actually addressing this and that is we

00:09:59,830 --> 00:10:04,780
need to make these issues impossible to

00:10:02,440 --> 00:10:06,280
actually produce we need to make it so

00:10:04,780 --> 00:10:10,350
that they just don't happen in the first

00:10:06,280 --> 00:10:12,430
place at all and there's one known

00:10:10,350 --> 00:10:15,060
solution for this that's been around for

00:10:12,430 --> 00:10:18,220
a very long time since the 1950s that

00:10:15,060 --> 00:10:19,600
addresses a large swath of these

00:10:18,220 --> 00:10:21,960
problems and just gets rid of them

00:10:19,600 --> 00:10:25,270
completely and that's garbage collection

00:10:21,960 --> 00:10:27,910
so thank you very much that was my talk

00:10:25,270 --> 00:10:28,540
we should all use garbage okay of course

00:10:27,910 --> 00:10:30,760
not

00:10:28,540 --> 00:10:32,980
obviously we've still got a few more

00:10:30,760 --> 00:10:33,550
minutes to go so and we're at a rust

00:10:32,980 --> 00:10:35,920
meetup here

00:10:33,550 --> 00:10:39,720
so garbage collection has its

00:10:35,920 --> 00:10:44,860
limitations right garbage collection is

00:10:39,720 --> 00:10:48,490
is slow at times garbage collection is

00:10:44,860 --> 00:10:51,120
hard to predict and if you're writing

00:10:48,490 --> 00:10:54,910
certain systems like operating systems

00:10:51,120 --> 00:10:58,330
databases browser engines things like

00:10:54,910 --> 00:10:59,560
that you can't afford this the the

00:10:58,330 --> 00:11:01,330
unknowns that come with the garbage

00:10:59,560 --> 00:11:03,990
collection you need a language that is

00:11:01,330 --> 00:11:06,630
more or less completely predictable

00:11:03,990 --> 00:11:10,200
ahead of time and this is why I C and

00:11:06,630 --> 00:11:12,870
C++ continue to exist today they

00:11:10,200 --> 00:11:15,270
continue to exist because the programmer

00:11:12,870 --> 00:11:17,280
can be more or less sure of what's

00:11:15,270 --> 00:11:20,070
happening with their program ahead of

00:11:17,280 --> 00:11:23,790
time modulo a whole bunch of things like

00:11:20,070 --> 00:11:25,770
caching and stuff like that but it makes

00:11:23,790 --> 00:11:27,500
the job of understanding the system a

00:11:25,770 --> 00:11:29,430
lot easier when you can get rid of

00:11:27,500 --> 00:11:32,010
automatic memory management through

00:11:29,430 --> 00:11:33,210
garbage collection but of course that

00:11:32,010 --> 00:11:35,070
comes with the issue that we've already

00:11:33,210 --> 00:11:38,040
been talking about where you have all

00:11:35,070 --> 00:11:41,220
these memory safety issues that get get

00:11:38,040 --> 00:11:42,800
introduced because of it and beyond this

00:11:41,220 --> 00:11:45,270
garbage collection doesn't solve all

00:11:42,800 --> 00:11:47,940
kinds of security issues there's still

00:11:45,270 --> 00:11:50,490
other issues that are possible even with

00:11:47,940 --> 00:11:53,570
garbage collection namely around data

00:11:50,490 --> 00:11:56,100
races and things like that and so

00:11:53,570 --> 00:11:57,600
Microsoft as a company long before I

00:11:56,100 --> 00:12:00,810
joined and long before my colleagues

00:11:57,600 --> 00:12:04,860
joined has been sitting around and

00:12:00,810 --> 00:12:07,080
wondering what can we do about this and

00:12:04,860 --> 00:12:08,790
there's been research on it there's been

00:12:07,080 --> 00:12:11,250
new programming languages developed

00:12:08,790 --> 00:12:13,680
internally but nothing has quite worked

00:12:11,250 --> 00:12:16,800
out but we think that we found a

00:12:13,680 --> 00:12:20,430
language that potentially could get us

00:12:16,800 --> 00:12:22,530
at least quite far into our journey of

00:12:20,430 --> 00:12:26,540
trying to get that 70% number

00:12:22,530 --> 00:12:31,680
reduced down and that language is rust

00:12:26,540 --> 00:12:33,450
and of course here what I'm preaching to

00:12:31,680 --> 00:12:35,670
the choir right you're at a rust meetup

00:12:33,450 --> 00:12:38,460
you've probably heard about a lot of

00:12:35,670 --> 00:12:41,220
these things before you understand

00:12:38,460 --> 00:12:43,110
probably that rust is a memory safe

00:12:41,220 --> 00:12:45,990
systems programming language it can do a

00:12:43,110 --> 00:12:48,780
lot of things if C++ can do but it can

00:12:45,990 --> 00:12:51,630
do it in a way that is memory safe so

00:12:48,780 --> 00:12:53,790
you can't have these exploits so that's

00:12:51,630 --> 00:12:55,770
great you're all more or less sold here

00:12:53,790 --> 00:12:58,230
right so we're gonna skip over that part

00:12:55,770 --> 00:13:00,660
and we're gonna get to the actual hard

00:12:58,230 --> 00:13:03,210
part of it which is not convincing

00:13:00,660 --> 00:13:05,520
people that that rust is a great

00:13:03,210 --> 00:13:09,390
language that should be at least looked

00:13:05,520 --> 00:13:13,020
at the real issue is the issue of

00:13:09,390 --> 00:13:15,450
adoption it's very different to go from

00:13:13,020 --> 00:13:17,090
rusts is a cool language that I like to

00:13:15,450 --> 00:13:20,150
use on the weekend too

00:13:17,090 --> 00:13:23,210
rust is a language that powers one of

00:13:20,150 --> 00:13:26,120
the most used operating systems in the

00:13:23,210 --> 00:13:29,510
entire world or rust is a language that

00:13:26,120 --> 00:13:33,620
powers our billion-dollar business these

00:13:29,510 --> 00:13:35,510
are questions that have to be answered

00:13:33,620 --> 00:13:39,620
over and over again with many different

00:13:35,510 --> 00:13:41,450
people so before we get into that we

00:13:39,620 --> 00:13:44,840
should talk a little bit about how

00:13:41,450 --> 00:13:46,520
languages get adopted and a problem that

00:13:44,840 --> 00:13:49,040
doesn't really get talked about when we

00:13:46,520 --> 00:13:50,870
talk about new languages and the way

00:13:49,040 --> 00:13:52,880
that you can think of it most clearly I

00:13:50,870 --> 00:13:56,960
think is this right here

00:13:52,880 --> 00:14:01,010
you have costs and can anybody read what

00:13:56,960 --> 00:14:03,170
it says down below yeah it's really hard

00:14:01,010 --> 00:14:04,970
right those are the benefits and you

00:14:03,170 --> 00:14:06,830
wouldn't notice but the benefits are

00:14:04,970 --> 00:14:08,750
much bigger than the costs but you can't

00:14:06,830 --> 00:14:10,790
read them you can't see them so what are

00:14:08,750 --> 00:14:12,890
you gonna do and that's really the

00:14:10,790 --> 00:14:14,720
fundamental issue that we have here you

00:14:12,890 --> 00:14:17,300
have cost-benefit analysis you can

00:14:14,720 --> 00:14:19,400
determine do the benefits of adopting

00:14:17,300 --> 00:14:22,130
this language exceed the costs that come

00:14:19,400 --> 00:14:23,780
with it but the problem is that the

00:14:22,130 --> 00:14:25,490
costs that come with adopting a new

00:14:23,780 --> 00:14:27,650
language are very easy to measure and

00:14:25,490 --> 00:14:30,260
very easy to understand you have to hire

00:14:27,650 --> 00:14:32,360
new people you have to bring that that

00:14:30,260 --> 00:14:34,730
language into your build system you have

00:14:32,360 --> 00:14:38,660
to interrupt that language with existing

00:14:34,730 --> 00:14:41,060
code you have to make sure that existing

00:14:38,660 --> 00:14:42,740
tooling works with that language these

00:14:41,060 --> 00:14:45,500
are very easy to say how long will it

00:14:42,740 --> 00:14:48,830
take us to get this language to to fill

00:14:45,500 --> 00:14:51,170
to to check off all those things but the

00:14:48,830 --> 00:14:53,990
benefits of adopting a language might

00:14:51,170 --> 00:14:57,290
not be so clear if you're adopting for

00:14:53,990 --> 00:14:59,690
instance let's say Elm which is a

00:14:57,290 --> 00:15:01,190
language that I really love to use

00:14:59,690 --> 00:15:04,220
inside of the browser and you want to

00:15:01,190 --> 00:15:05,930
use that over JavaScript now if you're

00:15:04,220 --> 00:15:08,840
an element easiest you might say that

00:15:05,930 --> 00:15:11,570
I'm much more productive than I am in

00:15:08,840 --> 00:15:14,900
JavaScript I write fewer bugs but these

00:15:11,570 --> 00:15:18,140
are really hard to actually quantify and

00:15:14,900 --> 00:15:21,110
so oftentimes what happens is you end up

00:15:18,140 --> 00:15:24,020
talking anecdotally talking about how

00:15:21,110 --> 00:15:26,030
you feel when you use the language which

00:15:24,020 --> 00:15:29,120
I know as a programmer these things

00:15:26,030 --> 00:15:30,730
really matter they're important but when

00:15:29,120 --> 00:15:33,310
you're talking to somebody who

00:15:30,730 --> 00:15:35,889
runs a business and who has to make kind

00:15:33,310 --> 00:15:38,680
of a reel at the end of the day dollar

00:15:35,889 --> 00:15:41,350
and cents actual decision about these

00:15:38,680 --> 00:15:43,449
things frankly and unfortunately they

00:15:41,350 --> 00:15:45,550
don't really care and you know what I

00:15:43,449 --> 00:15:47,680
can understand that right you can't

00:15:45,550 --> 00:15:49,899
really transport your feelings of how

00:15:47,680 --> 00:15:52,779
this language makes you feel when you

00:15:49,899 --> 00:15:54,579
write code to this business person who

00:15:52,779 --> 00:15:55,380
is making the decision and that's fair

00:15:54,579 --> 00:15:58,420
enough

00:15:55,380 --> 00:15:59,320
okay but this is what makes the rest

00:15:58,420 --> 00:16:02,949
more adoptable

00:15:59,320 --> 00:16:05,050
actually is that the problem that we saw

00:16:02,949 --> 00:16:07,060
before of memory memory vulnerabilities

00:16:05,050 --> 00:16:09,579
and things like that is a problem that

00:16:07,060 --> 00:16:12,870
rusts addresses we've already seen that

00:16:09,579 --> 00:16:16,300
we have kind of dollar and cents figures

00:16:12,870 --> 00:16:19,000
attached to this so if you can go into a

00:16:16,300 --> 00:16:21,940
company and say we're going to get rid

00:16:19,000 --> 00:16:24,670
of a thing that it's costing you and

00:16:21,940 --> 00:16:27,699
your customers billions and billions of

00:16:24,670 --> 00:16:32,199
dollars a year that's a pretty easy

00:16:27,699 --> 00:16:34,170
argument to make and because of that you

00:16:32,199 --> 00:16:37,089
end up with a picture more like that

00:16:34,170 --> 00:16:39,720
where the benefit is clear and it's much

00:16:37,089 --> 00:16:42,010
bigger than the costs are and that's

00:16:39,720 --> 00:16:44,949
roughly where we find ourselves today

00:16:42,010 --> 00:16:46,720
with rust at Microsoft although we're

00:16:44,949 --> 00:16:49,209
still at the very early parts of our

00:16:46,720 --> 00:16:52,060
journey so the conjecture we have is

00:16:49,209 --> 00:16:54,430
four security critical software C++ is

00:16:52,060 --> 00:16:56,230
no longer acceptable and the bet that we

00:16:54,430 --> 00:16:58,360
have is that rust allows us to write

00:16:56,230 --> 00:17:04,720
performance security critical components

00:16:58,360 --> 00:17:06,819
safely so then we're done right but of

00:17:04,720 --> 00:17:08,350
course what this means is not rewriting

00:17:06,819 --> 00:17:10,600
the world we have a whole bunch of

00:17:08,350 --> 00:17:14,049
things that we need to pay attention to

00:17:10,600 --> 00:17:16,030
as we go along if we started today

00:17:14,049 --> 00:17:18,179
trying to rewrite every single line of

00:17:16,030 --> 00:17:22,110
C++ that exists it inside of Microsoft

00:17:18,179 --> 00:17:25,360
we would probably be done in 20 years

00:17:22,110 --> 00:17:27,970
and of course in that time we're going

00:17:25,360 --> 00:17:29,230
to go out of business right so let's

00:17:27,970 --> 00:17:31,240
talk real quick about some of the

00:17:29,230 --> 00:17:33,070
challenges that that you're faced at

00:17:31,240 --> 00:17:35,380
this scale when you're when you want to

00:17:33,070 --> 00:17:39,250
adopt a new language the first one of

00:17:35,380 --> 00:17:41,260
them is build systems cargo for instance

00:17:39,250 --> 00:17:43,270
is a great tool that when you're using

00:17:41,260 --> 00:17:44,800
cargo when you're using rusts

00:17:43,270 --> 00:17:47,080
exclusively in a project

00:17:44,800 --> 00:17:49,180
or your you're a hobbyist who is writing

00:17:47,080 --> 00:17:51,490
their first project in rust cargo is

00:17:49,180 --> 00:17:53,410
amazing and actually is one of the best

00:17:51,490 --> 00:17:56,440
things about rust you get a built-in

00:17:53,410 --> 00:17:59,290
build system testing system right out of

00:17:56,440 --> 00:18:02,290
the box but if you have a build system

00:17:59,290 --> 00:18:05,740
that's thirty years old and is meant to

00:18:02,290 --> 00:18:08,710
build an entire swath of C++ code along

00:18:05,740 --> 00:18:10,660
with other languages bringing that

00:18:08,710 --> 00:18:13,030
bringing cargo into that system doesn't

00:18:10,660 --> 00:18:16,240
normally work and that's an issue that

00:18:13,030 --> 00:18:18,430
that we have to address the next one is

00:18:16,240 --> 00:18:20,560
tooling we have a whole bunch of tooling

00:18:18,430 --> 00:18:25,330
that is meant to address specific things

00:18:20,560 --> 00:18:29,290
inside of visual C++ code that might

00:18:25,330 --> 00:18:31,420
work with LLVM might work with rust but

00:18:29,290 --> 00:18:33,700
sometimes it doesn't and it costs time

00:18:31,420 --> 00:18:36,520
and money obviously to get those things

00:18:33,700 --> 00:18:38,770
to work and the next one is is

00:18:36,520 --> 00:18:40,830
interrupts you you have existing code

00:18:38,770 --> 00:18:43,030
you want to take that rest code and

00:18:40,830 --> 00:18:45,400
basically embed it inside of your

00:18:43,030 --> 00:18:47,560
existing code is your rest code able to

00:18:45,400 --> 00:18:50,350
even talk to your existing code what

00:18:47,560 --> 00:18:52,390
does that look like if it's a flat C API

00:18:50,350 --> 00:18:55,330
that you're talking to it's pretty

00:18:52,390 --> 00:18:57,250
straightforward pretty easy albeit it's

00:18:55,330 --> 00:18:59,350
unsafe and you have to worry about how

00:18:57,250 --> 00:19:00,850
are you going to mitigate your safety

00:18:59,350 --> 00:19:02,380
issues there you might end up in the

00:19:00,850 --> 00:19:05,320
same situation you're trying to get away

00:19:02,380 --> 00:19:07,570
from but if it's C++ it's much harder

00:19:05,320 --> 00:19:11,050
how do you in interact with a heavily

00:19:07,570 --> 00:19:12,070
templatized C++ class from rust these

00:19:11,050 --> 00:19:16,660
are questions that are not really

00:19:12,070 --> 00:19:19,420
answered and then of course there's

00:19:16,660 --> 00:19:21,370
they're just kind of weird and strange

00:19:19,420 --> 00:19:25,390
things that happen when you're working

00:19:21,370 --> 00:19:28,480
at a large company probably nobody in

00:19:25,390 --> 00:19:32,590
this room unless you work for Microsoft

00:19:28,480 --> 00:19:35,590
or Google have to worry about building

00:19:32,590 --> 00:19:37,060
the RUS compiler from scratch and when I

00:19:35,590 --> 00:19:39,880
mean from scratch I don't mean from

00:19:37,060 --> 00:19:42,400
source I mean literally proving from the

00:19:39,880 --> 00:19:44,680
beginning of computing that there is a

00:19:42,400 --> 00:19:48,040
safe and secure way to build up the rest

00:19:44,680 --> 00:19:50,680
compiler what does that look like that

00:19:48,040 --> 00:19:54,160
might mean trying to build rusts using

00:19:50,680 --> 00:19:57,040
C++ and there's the the Umrah c project

00:19:54,160 --> 00:19:58,390
that is a russ compiler built in C++ and

00:19:57,040 --> 00:20:01,060
if we have a trusted

00:19:58,390 --> 00:20:03,190
C++ toolchain you can build that that

00:20:01,060 --> 00:20:04,960
the Russ compiler with that trusted tool

00:20:03,190 --> 00:20:08,010
chain and then take it up to the latest

00:20:04,960 --> 00:20:10,390
version there have also been talks of

00:20:08,010 --> 00:20:12,400
building the original Russ compiler that

00:20:10,390 --> 00:20:15,580
was built in what was it

00:20:12,400 --> 00:20:18,340
Oh camel back in the day building that

00:20:15,580 --> 00:20:21,150
and then following all the way from 2009

00:20:18,340 --> 00:20:26,650
or whatever all the way up until today

00:20:21,150 --> 00:20:30,280
because you have to go to the EU or the

00:20:26,650 --> 00:20:31,600
US government and say hey we've we built

00:20:30,280 --> 00:20:33,790
this thing and we can promise you that

00:20:31,600 --> 00:20:36,910
nobody has injected malicious code into

00:20:33,790 --> 00:20:38,560
it and that's that's something that you

00:20:36,910 --> 00:20:40,210
don't normally need to worry about but

00:20:38,560 --> 00:20:44,710
when you're adopting a new language at

00:20:40,210 --> 00:20:46,660
the scale you have to and that brings me

00:20:44,710 --> 00:20:48,250
to the the next and final point and

00:20:46,660 --> 00:20:50,650
that's adoption from the other

00:20:48,250 --> 00:20:54,610
perspective so yes I work at Microsoft

00:20:50,650 --> 00:20:56,800
but I also am an avid rust user and an

00:20:54,610 --> 00:20:58,390
enthusiast and somebody who enjoys being

00:20:56,800 --> 00:21:01,840
a part of this community and I don't

00:20:58,390 --> 00:21:06,010
want the adoption of rust at Microsoft

00:21:01,840 --> 00:21:07,510
to ruin what makes rust great today and

00:21:06,010 --> 00:21:09,190
what makes rust great today is things

00:21:07,510 --> 00:21:12,220
that we've talked about before with

00:21:09,190 --> 00:21:14,410
cargo a language that is user friendly

00:21:12,220 --> 00:21:15,370
that even when you're bashing your head

00:21:14,410 --> 00:21:17,230
against the wall

00:21:15,370 --> 00:21:18,640
it's still holding your hand there and

00:21:17,230 --> 00:21:23,410
trying to give you friendly error

00:21:18,640 --> 00:21:27,340
messages right so what are some of the

00:21:23,410 --> 00:21:29,940
challenges that we face right we face a

00:21:27,340 --> 00:21:32,380
challenge for instance of governance

00:21:29,940 --> 00:21:34,060
there's a real challenge of governance

00:21:32,380 --> 00:21:36,850
if you have large companies getting

00:21:34,060 --> 00:21:40,590
involved in here they probably want some

00:21:36,850 --> 00:21:43,210
sibilance of stability in the language

00:21:40,590 --> 00:21:44,830
and what does that mean well the

00:21:43,210 --> 00:21:46,660
temptation for some large companies

00:21:44,830 --> 00:21:49,870
might be to grab on and try to take

00:21:46,660 --> 00:21:51,730
control but that would in some ways kind

00:21:49,870 --> 00:21:53,800
of ruin what we've built up as the rest

00:21:51,730 --> 00:21:56,830
community an open community community

00:21:53,800 --> 00:21:59,560
that collaborates together we don't want

00:21:56,830 --> 00:22:01,380
large companies to come in at the

00:21:59,560 --> 00:22:05,080
exclusion of everybody else

00:22:01,380 --> 00:22:07,330
and then you have language changes we

00:22:05,080 --> 00:22:09,190
just talked about how at Microsoft would

00:22:07,330 --> 00:22:11,600
probably need to build the rest compiler

00:22:09,190 --> 00:22:14,390
from C++ or oh camel

00:22:11,600 --> 00:22:16,309
to do that we have these strange and

00:22:14,390 --> 00:22:19,220
esoteric needs that other people other

00:22:16,309 --> 00:22:21,140
users of Russ don't have and there might

00:22:19,220 --> 00:22:23,570
be a temptation to add changes to the

00:22:21,140 --> 00:22:25,669
language that would make our lives as as

00:22:23,570 --> 00:22:28,390
users of rust and Microsoft easier at

00:22:25,669 --> 00:22:30,620
the expense of other users of language

00:22:28,390 --> 00:22:33,200
and while the language might become

00:22:30,620 --> 00:22:35,030
better for us as a large user it could

00:22:33,200 --> 00:22:37,010
potentially come become worse for other

00:22:35,030 --> 00:22:40,160
users of the language and that's

00:22:37,010 --> 00:22:42,500
something we don't want the language is

00:22:40,160 --> 00:22:44,900
useful now because the community has

00:22:42,500 --> 00:22:49,309
carefully put the language together that

00:22:44,900 --> 00:22:51,320
way and bringing in an outside influence

00:22:49,309 --> 00:22:55,010
that doesn't have that context can

00:22:51,320 --> 00:22:57,740
frankly be dangerous and one of the last

00:22:55,010 --> 00:22:59,809
ones is what happens to the community

00:22:57,740 --> 00:23:02,000
when you have a whole bunch of what I

00:22:59,809 --> 00:23:03,860
call reluctant row stations coming and

00:23:02,000 --> 00:23:05,510
people that are using the language not

00:23:03,860 --> 00:23:08,720
because they love it not because it's

00:23:05,510 --> 00:23:11,179
fun not because they do it as a hobby in

00:23:08,720 --> 00:23:13,280
their free time or they enjoy working on

00:23:11,179 --> 00:23:16,100
the compiler or an open source library

00:23:13,280 --> 00:23:18,740
but because their boss told them to and

00:23:16,100 --> 00:23:21,620
they'd much rather be using some other

00:23:18,740 --> 00:23:26,450
language and they have to use this

00:23:21,620 --> 00:23:28,340
stupid language with a crab why how does

00:23:26,450 --> 00:23:30,860
that change our community when we have

00:23:28,340 --> 00:23:32,630
people who are are less willing to play

00:23:30,860 --> 00:23:34,370
along with the rules of the community

00:23:32,630 --> 00:23:36,590
how do we make sure as the community

00:23:34,370 --> 00:23:39,950
that we can safeguard what we've built

00:23:36,590 --> 00:23:42,230
up over time and continue and make sure

00:23:39,950 --> 00:23:44,840
that it continues to be what it has been

00:23:42,230 --> 00:23:48,159
in the past so that so there are

00:23:44,840 --> 00:23:51,110
challenges on both sides challenges to

00:23:48,159 --> 00:23:52,789
Microsoft as a large company trying to

00:23:51,110 --> 00:23:56,210
adopt a new language that can really

00:23:52,789 --> 00:23:58,940
have clear benefit and also challenge to

00:23:56,210 --> 00:24:03,110
us as as the rest community how do we

00:23:58,940 --> 00:24:05,809
make sure that we build up and continue

00:24:03,110 --> 00:24:07,640
to foster a community that plays well

00:24:05,809 --> 00:24:09,799
with these these software giants because

00:24:07,640 --> 00:24:11,380
we want them to be able to use it we

00:24:09,799 --> 00:24:13,820
want them to be able to contribute back

00:24:11,380 --> 00:24:16,220
we want them to be able to to

00:24:13,820 --> 00:24:19,070
participate in the community but we also

00:24:16,220 --> 00:24:20,870
want to make sure that with that power

00:24:19,070 --> 00:24:24,530
they don't come through and just ruin

00:24:20,870 --> 00:24:25,380
everything for us and so that's the

00:24:24,530 --> 00:24:27,960
challenge that we have

00:24:25,380 --> 00:24:30,299
ahead of us today if you're interested

00:24:27,960 --> 00:24:32,340
in this kind of challenge and what

00:24:30,299 --> 00:24:34,620
adopting rusts and rust actually be

00:24:32,340 --> 00:24:37,380
being used in large companies actually

00:24:34,620 --> 00:24:40,220
looks like we'd be happy to talk to you

00:24:37,380 --> 00:24:44,690
about it so thank you very much

00:24:40,220 --> 00:24:56,439
[Applause]

00:24:44,690 --> 00:24:56,439

YouTube URL: https://www.youtube.com/watch?v=qCB19DRw_60


