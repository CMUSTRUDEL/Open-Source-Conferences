Title: RustConf 2020 - Error handling Isn't All About Errors by Jane Lusby
Publication date: 2020-08-21
Playlist: RustConf 2020
Description: 
	Error handling Isn't All About Errors by Jane Lusby

Error handling in rust is incredibly diverse and constantly evolving. As such it is often a source of confusion for new and experienced rustaceans alike. This talk aims to clarify what error handling in rust means, the patterns that exist, when to apply them, and what libraries currently exist to help with the task.
Captions: 
	00:00:16,160 --> 00:00:20,320
hello and welcome to my talk

00:00:17,760 --> 00:00:22,800
error handling isn't all about errors

00:00:20,320 --> 00:00:24,720
let me start by introducing myself

00:00:22,800 --> 00:00:26,000
my name is jane lesbie and my pronouns

00:00:24,720 --> 00:00:29,119
are she

00:00:26,000 --> 00:00:30,960
on the internet i go by yah or yasi

00:00:29,119 --> 00:00:32,239
and i've been writing rust for about two

00:00:30,960 --> 00:00:33,840
and a half years now

00:00:32,239 --> 00:00:35,360
though i was only recently hired to do

00:00:33,840 --> 00:00:36,880
so professionally by the zcash

00:00:35,360 --> 00:00:40,000
foundation

00:00:36,880 --> 00:00:41,680
now quick shameless plug i also maintain

00:00:40,000 --> 00:00:44,320
awesome rust mentors

00:00:41,680 --> 00:00:45,600
awesomers mentors is a list of projects

00:00:44,320 --> 00:00:47,680
and people who are willing to provide

00:00:45,600 --> 00:00:49,600
mentorship to anyone who asks

00:00:47,680 --> 00:00:51,360
if you're interested in finding a mentor

00:00:49,600 --> 00:00:53,039
finding a project to get involved in

00:00:51,360 --> 00:00:54,320
being a mentor or getting people

00:00:53,039 --> 00:00:55,120
involved in your project you should

00:00:54,320 --> 00:00:57,360
check it out

00:00:55,120 --> 00:00:58,559
also to be clear they're more than just

00:00:57,360 --> 00:01:01,280
these two mentors so

00:00:58,559 --> 00:01:01,840
please check out the website moving on

00:01:01,280 --> 00:01:05,119
so

00:01:01,840 --> 00:01:06,880
why error handling i actually got into

00:01:05,119 --> 00:01:08,720
error handling on accident

00:01:06,880 --> 00:01:10,400
it started as a yak shape when i wanted

00:01:08,720 --> 00:01:11,119
to open source a library that i wrote

00:01:10,400 --> 00:01:12,799
for work

00:01:11,119 --> 00:01:15,840
but i wasn't happy with the error

00:01:12,799 --> 00:01:18,880
handling so i decided to fix it up first

00:01:15,840 --> 00:01:21,040
that yak shave ended with me writing air

00:01:18,880 --> 00:01:22,640
air is a fork of anyhow with support for

00:01:21,040 --> 00:01:24,880
customized error reports

00:01:22,640 --> 00:01:25,840
via a global hook similar to a panic

00:01:24,880 --> 00:01:27,840
hook

00:01:25,840 --> 00:01:29,680
i also ended up writing color error

00:01:27,840 --> 00:01:31,280
color air is a library which provides a

00:01:29,680 --> 00:01:34,000
custom panic report hook

00:01:31,280 --> 00:01:35,520
and a custom error report hook for air

00:01:34,000 --> 00:01:37,520
with these libraries

00:01:35,520 --> 00:01:39,280
i'm now able to construct error reports

00:01:37,520 --> 00:01:42,159
that look like this

00:01:39,280 --> 00:01:42,560
here we can see the basic usage example

00:01:42,159 --> 00:01:45,200
in it

00:01:42,560 --> 00:01:46,799
we have an error section followed by a

00:01:45,200 --> 00:01:48,240
span tray section and if you're not

00:01:46,799 --> 00:01:50,240
familiar with tracing

00:01:48,240 --> 00:01:53,200
this is an extremely cool back trace

00:01:50,240 --> 00:01:55,600
like type of tracing spans

00:01:53,200 --> 00:01:57,520
then after that we have a suggestion

00:01:55,600 --> 00:02:00,560
section followed finally

00:01:57,520 --> 00:02:02,399
by an emitted back trace section i can

00:02:00,560 --> 00:02:04,159
also enable backtrace capture

00:02:02,399 --> 00:02:05,680
so here we now have a back trace section

00:02:04,159 --> 00:02:07,680
and we can control the formatting of

00:02:05,680 --> 00:02:09,679
this factory section

00:02:07,680 --> 00:02:11,280
here we've just pretty printed it in the

00:02:09,679 --> 00:02:13,680
style of color back trace

00:02:11,280 --> 00:02:16,000
which hides the relevant frames in this

00:02:13,680 --> 00:02:16,560
case it's hidden five frames before read

00:02:16,000 --> 00:02:19,360
file

00:02:16,560 --> 00:02:20,959
and 10 frames after main we can also

00:02:19,360 --> 00:02:22,239
take this further though by applying

00:02:20,959 --> 00:02:23,840
custom filters

00:02:22,239 --> 00:02:25,680
here you can see we've got 11 frames

00:02:23,840 --> 00:02:26,160
hidden after read config instead of 10

00:02:25,680 --> 00:02:28,319
frames

00:02:26,160 --> 00:02:31,120
hidden after main because i've

00:02:28,319 --> 00:02:32,720
configured it to hide the mainframe

00:02:31,120 --> 00:02:35,280
we can apply this custom filtering

00:02:32,720 --> 00:02:37,360
consistently to all of our error ports

00:02:35,280 --> 00:02:39,360
so here you can see we have the same

00:02:37,360 --> 00:02:42,000
report format for panics as we did

00:02:39,360 --> 00:02:44,319
for our errors and with our airport hook

00:02:42,000 --> 00:02:46,000
we can also bundle arbitrary data with

00:02:44,319 --> 00:02:47,599
our error reports

00:02:46,000 --> 00:02:49,840
we can use this to implement things like

00:02:47,599 --> 00:02:51,760
custom sections in our error reports

00:02:49,840 --> 00:02:53,680
here you can see that in addition to the

00:02:51,760 --> 00:02:54,400
error section we also have a command

00:02:53,680 --> 00:02:56,080
section

00:02:54,400 --> 00:02:57,599
showing which command we tried to run

00:02:56,080 --> 00:02:58,959
and a stood error section

00:02:57,599 --> 00:03:01,440
showing the output of the command when

00:02:58,959 --> 00:03:02,159
it failed we'll dig into this example

00:03:01,440 --> 00:03:04,640
more later

00:03:02,159 --> 00:03:05,200
so please look forward to that finally

00:03:04,640 --> 00:03:07,280
though

00:03:05,200 --> 00:03:09,040
you can also add errors as sections

00:03:07,280 --> 00:03:10,560
which we can use to aggregate multiple

00:03:09,040 --> 00:03:13,680
errors into a single report

00:03:10,560 --> 00:03:16,080
and format them all consistently now

00:03:13,680 --> 00:03:17,519
i'm not giving this talk to talk about

00:03:16,080 --> 00:03:19,120
error or color error

00:03:17,519 --> 00:03:20,879
i'm giving this talk to share what i

00:03:19,120 --> 00:03:22,640
learned in that yak shave to fix the

00:03:20,879 --> 00:03:24,879
error handling in my library

00:03:22,640 --> 00:03:26,400
and how the process has changed how i

00:03:24,879 --> 00:03:29,840
look at error handling

00:03:26,400 --> 00:03:31,120
and error reporting so what is error

00:03:29,840 --> 00:03:33,120
handling

00:03:31,120 --> 00:03:34,640
ear handling is a lot of things when you

00:03:33,120 --> 00:03:37,280
zoom in up close

00:03:34,640 --> 00:03:39,440
error handling is defining errors it's

00:03:37,280 --> 00:03:41,120
propagating errors and gathering context

00:03:39,440 --> 00:03:42,640
and by context that means stuff like the

00:03:41,120 --> 00:03:44,239
path you tried to open

00:03:42,640 --> 00:03:45,680
or back trace showing where your error

00:03:44,239 --> 00:03:48,480
came from

00:03:45,680 --> 00:03:48,799
it's also reacting to specific errors

00:03:48,480 --> 00:03:51,280
and

00:03:48,799 --> 00:03:52,480
discarding errors doing so intentionally

00:03:51,280 --> 00:03:55,200
and visibly

00:03:52,480 --> 00:03:57,200
finally it's also reporting errors in

00:03:55,200 --> 00:03:59,920
their gathered context

00:03:57,200 --> 00:04:00,879
now this breakdown gets to the goal of

00:03:59,920 --> 00:04:02,560
my talk

00:04:00,879 --> 00:04:04,400
i have a theory that error handling is

00:04:02,560 --> 00:04:05,280
made more confusing by people trying to

00:04:04,400 --> 00:04:06,959
simplify it

00:04:05,280 --> 00:04:09,200
because among other things error

00:04:06,959 --> 00:04:10,799
handling is kind of annoying

00:04:09,200 --> 00:04:12,319
i worry the fuzziness between the

00:04:10,799 --> 00:04:14,000
different responsibilities

00:04:12,319 --> 00:04:15,760
makes it hard for people to infer what

00:04:14,000 --> 00:04:16,639
tools they should be using when handling

00:04:15,760 --> 00:04:18,400
errors

00:04:16,639 --> 00:04:20,320
and my hope is that by breaking error

00:04:18,400 --> 00:04:22,160
handling into its component parts

00:04:20,320 --> 00:04:24,240
we can make it easier to understand and

00:04:22,160 --> 00:04:25,440
explain so let's start with the

00:04:24,240 --> 00:04:27,360
fundamentals

00:04:25,440 --> 00:04:29,120
note that this first bit was taken

00:04:27,360 --> 00:04:32,080
almost word for word from the rust

00:04:29,120 --> 00:04:34,320
spokes chapter on error handling

00:04:32,080 --> 00:04:35,280
the roast's model flares distinguishes

00:04:34,320 --> 00:04:38,000
between two

00:04:35,280 --> 00:04:39,840
classes of errors recoverable and

00:04:38,000 --> 00:04:41,440
non-recoverable errors

00:04:39,840 --> 00:04:42,880
recoverable errors are errors that can

00:04:41,440 --> 00:04:45,280
reasonably be reacted to

00:04:42,880 --> 00:04:46,479
or reported when encountered these are

00:04:45,280 --> 00:04:48,880
errors like file not

00:04:46,479 --> 00:04:50,160
found or connection closed

00:04:48,880 --> 00:04:52,000
non-recoverable errors

00:04:50,160 --> 00:04:54,800
are errors that cannot reasonably be

00:04:52,000 --> 00:04:57,040
reacted to only report it before exiting

00:04:54,800 --> 00:04:59,360
the thread or program

00:04:57,040 --> 00:05:01,440
these errors are usually caused by bugs

00:04:59,360 --> 00:05:02,880
such as index out of bounds or integer

00:05:01,440 --> 00:05:04,960
overflow

00:05:02,880 --> 00:05:06,560
now most languages don't distinguish

00:05:04,960 --> 00:05:08,720
between these kinds of errors

00:05:06,560 --> 00:05:10,720
for example c plus plus has historically

00:05:08,720 --> 00:05:13,360
used exceptions for both

00:05:10,720 --> 00:05:15,600
but rust doesn't have exceptions instead

00:05:13,360 --> 00:05:18,720
rust has panic for recoverable errors

00:05:15,600 --> 00:05:20,639
and result for panic for

00:05:18,720 --> 00:05:23,280
non-recoverable errors and results for

00:05:20,639 --> 00:05:26,080
recoverable errors sorry

00:05:23,280 --> 00:05:27,440
so panic non-recoverable errors in rust

00:05:26,080 --> 00:05:29,919
are created via the panic

00:05:27,440 --> 00:05:31,919
macro here we can see an example of an

00:05:29,919 --> 00:05:34,320
index out of bounds error

00:05:31,919 --> 00:05:35,120
the only input for the panic macro is an

00:05:34,320 --> 00:05:37,120
error message

00:05:35,120 --> 00:05:38,880
and optionally some context to include

00:05:37,120 --> 00:05:40,800
in that error message

00:05:38,880 --> 00:05:42,080
reporting and default context gathering

00:05:40,800 --> 00:05:44,400
is done by the panic

00:05:42,080 --> 00:05:46,560
hook and by default contours gathering i

00:05:44,400 --> 00:05:48,960
mean capturing the collar location

00:05:46,560 --> 00:05:50,320
or capturing the back trace if it's

00:05:48,960 --> 00:05:51,919
enabled

00:05:50,320 --> 00:05:53,919
and once that panic hook is done

00:05:51,919 --> 00:05:54,720
printing the report the panic handler

00:05:53,919 --> 00:05:56,639
takes over

00:05:54,720 --> 00:05:58,639
and cleans up either by unwinding the

00:05:56,639 --> 00:05:59,759
thread stack or boring the application

00:05:58,639 --> 00:06:03,440
altogether

00:05:59,759 --> 00:06:05,440
next we have result

00:06:03,440 --> 00:06:07,360
for recoverable errors in rest we

00:06:05,440 --> 00:06:10,479
modeled them with the enum result

00:06:07,360 --> 00:06:12,160
t e the c num has two variants

00:06:10,479 --> 00:06:14,319
okay which contains the value of an

00:06:12,160 --> 00:06:16,560
operation when it completes successfully

00:06:14,319 --> 00:06:18,160
and error which contains the error value

00:06:16,560 --> 00:06:20,240
of an operation when it could not be

00:06:18,160 --> 00:06:22,400
completed successfully

00:06:20,240 --> 00:06:23,600
we use results to combine two return

00:06:22,400 --> 00:06:26,880
types into one

00:06:23,600 --> 00:06:29,120
and assign meaning to each possibility

00:06:26,880 --> 00:06:30,160
in addition to this rust has marked the

00:06:29,120 --> 00:06:32,800
result enum as

00:06:30,160 --> 00:06:33,360
must use which makes the compiler emit a

00:06:32,800 --> 00:06:35,360
warning

00:06:33,360 --> 00:06:36,400
whenever the result is discarded

00:06:35,360 --> 00:06:38,800
implicitly

00:06:36,400 --> 00:06:40,400
prompting us to discard it explicitly or

00:06:38,800 --> 00:06:42,560
otherwise handle it

00:06:40,400 --> 00:06:43,440
this helps us avoid ignoring errors

00:06:42,560 --> 00:06:45,680
accidentally

00:06:43,440 --> 00:06:47,280
and makes discarded errors visible to

00:06:45,680 --> 00:06:49,360
later readers

00:06:47,280 --> 00:06:50,479
the big advantage of using enums for

00:06:49,360 --> 00:06:54,160
recoverable errors

00:06:50,479 --> 00:06:57,039
is that we must react to all errors

00:06:54,160 --> 00:06:58,720
here you can see we have to use match or

00:06:57,039 --> 00:07:01,280
anything equivalent to match

00:06:58,720 --> 00:07:02,479
to access the values inside of either

00:07:01,280 --> 00:07:05,039
variant

00:07:02,479 --> 00:07:06,639
with an enum we can't access the inner

00:07:05,039 --> 00:07:10,080
values without first accounting for all

00:07:06,639 --> 00:07:12,479
the variants that enum could possibly be

00:07:10,080 --> 00:07:13,520
next we have the tritrate and the tri

00:07:12,479 --> 00:07:15,440
operator

00:07:13,520 --> 00:07:18,080
the currently unstable tritrate is used

00:07:15,440 --> 00:07:20,400
to model fallible return types in rest

00:07:18,080 --> 00:07:21,759
indeed result is a type that implements

00:07:20,400 --> 00:07:23,520
the try trait

00:07:21,759 --> 00:07:26,319
as does option and some other

00:07:23,520 --> 00:07:28,080
combinations thereof

00:07:26,319 --> 00:07:30,160
with the tritrate rust is able to

00:07:28,080 --> 00:07:31,680
abstract the propagation of errors with

00:07:30,160 --> 00:07:33,440
the try operator

00:07:31,680 --> 00:07:34,960
here we can see two equivalent code

00:07:33,440 --> 00:07:36,720
snippets the first

00:07:34,960 --> 00:07:38,080
manually propagates the error using

00:07:36,720 --> 00:07:40,240
match and return

00:07:38,080 --> 00:07:43,039
the second does the same by simply using

00:07:40,240 --> 00:07:46,000
the try operator to propagate the error

00:07:43,039 --> 00:07:48,639
finally we have the error trait the

00:07:46,000 --> 00:07:50,879
error trait fills three roles in rest

00:07:48,639 --> 00:07:51,680
first it lets us represent an open set

00:07:50,879 --> 00:07:53,680
of errors

00:07:51,680 --> 00:07:54,720
by converting any type that implements

00:07:53,680 --> 00:07:57,680
the error trait

00:07:54,720 --> 00:07:59,520
into an error trait object this is

00:07:57,680 --> 00:08:00,400
important for composing errors and it is

00:07:59,520 --> 00:08:02,639
what lets us

00:08:00,400 --> 00:08:05,759
expose our source errors via the error

00:08:02,639 --> 00:08:08,080
trait regardless of their actual type

00:08:05,759 --> 00:08:09,680
second the error trait lets us react to

00:08:08,080 --> 00:08:11,599
these specific errors

00:08:09,680 --> 00:08:13,919
by trying to downcast them back to their

00:08:11,599 --> 00:08:15,680
original type safely

00:08:13,919 --> 00:08:17,520
rather than using match as we would with

00:08:15,680 --> 00:08:19,520
enubs

00:08:17,520 --> 00:08:21,039
finally the error tray provides an

00:08:19,520 --> 00:08:22,800
interface for reporters

00:08:21,039 --> 00:08:24,160
now i'll get to this last bit some more

00:08:22,800 --> 00:08:27,199
in a minute but first

00:08:24,160 --> 00:08:29,280
let's review so

00:08:27,199 --> 00:08:31,039
by now we've covered fundamentals and

00:08:29,280 --> 00:08:32,159
you know all the tools the language and

00:08:31,039 --> 00:08:33,599
the standard library

00:08:32,159 --> 00:08:36,320
gives you to work with the different

00:08:33,599 --> 00:08:38,240
kinds of errors so let's see how these

00:08:36,320 --> 00:08:39,519
fit into our original breakdown of the

00:08:38,240 --> 00:08:42,479
parts of error handling

00:08:39,519 --> 00:08:44,560
starting with recoverable errors so we

00:08:42,479 --> 00:08:45,920
define recoverable errors with types and

00:08:44,560 --> 00:08:49,279
traits

00:08:45,920 --> 00:08:51,600
propagate them with the try operator

00:08:49,279 --> 00:08:52,399
for matching and reacting we do that

00:08:51,600 --> 00:08:54,320
with match

00:08:52,399 --> 00:08:55,680
or downcast depending on how it's

00:08:54,320 --> 00:08:59,279
represented

00:08:55,680 --> 00:09:00,720
we discard them with drop or unwrap

00:08:59,279 --> 00:09:02,640
if we want to promote a recoverable

00:09:00,720 --> 00:09:06,320
error to an unrecoverable one

00:09:02,640 --> 00:09:08,320
and for reporting we use the error trait

00:09:06,320 --> 00:09:10,320
for non-recoverable errors we define

00:09:08,320 --> 00:09:13,040
them with panic macro

00:09:10,320 --> 00:09:14,560
we propagate them well we don't it's

00:09:13,040 --> 00:09:16,240
built into the language actually so you

00:09:14,560 --> 00:09:19,279
don't have to worry about it

00:09:16,240 --> 00:09:21,279
for matching reacting please don't

00:09:19,279 --> 00:09:22,880
this is the whole point of this split

00:09:21,279 --> 00:09:24,480
between recoverable and non-recoverable

00:09:22,880 --> 00:09:26,959
errors like you don't do this one thing

00:09:24,480 --> 00:09:29,279
for non-recoverable errors

00:09:26,959 --> 00:09:30,399
for discarding you can use catch unwind

00:09:29,279 --> 00:09:32,640
though i

00:09:30,399 --> 00:09:34,959
advise you to use caution before

00:09:32,640 --> 00:09:37,680
reaching for this

00:09:34,959 --> 00:09:39,680
finally for reporting we use the panic

00:09:37,680 --> 00:09:42,560
hook

00:09:39,680 --> 00:09:44,560
okay so now we know all the fundamental

00:09:42,560 --> 00:09:46,160
tools built into language and where they

00:09:44,560 --> 00:09:47,760
fit into error handling

00:09:46,160 --> 00:09:50,000
next i'd like to dig into the more

00:09:47,760 --> 00:09:52,399
complex ways you can compose these tools

00:09:50,000 --> 00:09:53,839
to write some fancy error reporting but

00:09:52,399 --> 00:09:55,839
first let's set straight some

00:09:53,839 --> 00:09:58,080
terminology

00:09:55,839 --> 00:09:59,839
in the context of error reporting an

00:09:58,080 --> 00:10:01,279
error is a description of why an

00:09:59,839 --> 00:10:04,000
operation failed

00:10:01,279 --> 00:10:06,079
whereas context is any information

00:10:04,000 --> 00:10:06,880
relevant to an error or an error report

00:10:06,079 --> 00:10:10,079
that is not

00:10:06,880 --> 00:10:11,839
itself an error and an airport is the

00:10:10,079 --> 00:10:14,079
printed representation of an error in

00:10:11,839 --> 00:10:16,480
all of its associated contexts

00:10:14,079 --> 00:10:17,519
now the concept of error ports and error

00:10:16,480 --> 00:10:19,279
reporters

00:10:17,519 --> 00:10:20,959
isn't a concept that is common in the

00:10:19,279 --> 00:10:22,640
rust ecosystem today

00:10:20,959 --> 00:10:24,880
or any language's error handling

00:10:22,640 --> 00:10:27,920
ecosystem as far as i know

00:10:24,880 --> 00:10:29,920
however it is a vocabulary that i find

00:10:27,920 --> 00:10:31,600
particularly compelling in the context

00:10:29,920 --> 00:10:33,680
of rust error reporting

00:10:31,600 --> 00:10:36,240
and this is largely because of how rust

00:10:33,680 --> 00:10:37,760
has defined its error trait

00:10:36,240 --> 00:10:39,839
here's a simplified version the error

00:10:37,760 --> 00:10:42,720
trade here you can see we've got two

00:10:39,839 --> 00:10:45,040
super traits debug and display which we

00:10:42,720 --> 00:10:47,440
must implement in the error trade

00:10:45,040 --> 00:10:48,399
then below that we have two functions

00:10:47,440 --> 00:10:50,560
source

00:10:48,399 --> 00:10:52,240
and backtrace both with default

00:10:50,560 --> 00:10:53,760
implementations that we can override

00:10:52,240 --> 00:10:56,480
when needed

00:10:53,760 --> 00:10:58,800
next let's look at a simple error here

00:10:56,480 --> 00:11:00,880
we've got a type with no members

00:10:58,800 --> 00:11:02,560
we derive debug on it and then we

00:11:00,880 --> 00:11:03,760
implement display where we just write

00:11:02,560 --> 00:11:05,920
our error message

00:11:03,760 --> 00:11:07,200
and finally we just implement the error

00:11:05,920 --> 00:11:09,360
trait

00:11:07,200 --> 00:11:11,200
now we don't have a source or a back

00:11:09,360 --> 00:11:12,079
trace so we don't need to override any

00:11:11,200 --> 00:11:13,680
functions here

00:11:12,079 --> 00:11:15,760
which is why the block on the trait

00:11:13,680 --> 00:11:17,519
implementation is empty

00:11:15,760 --> 00:11:19,680
if we did have a source though we would

00:11:17,519 --> 00:11:21,440
need to override source function

00:11:19,680 --> 00:11:24,800
in order to return a reference to our

00:11:21,440 --> 00:11:27,279
source as an error trait object

00:11:24,800 --> 00:11:28,959
finally let's take a look at a simple

00:11:27,279 --> 00:11:31,040
error reporter

00:11:28,959 --> 00:11:32,720
here we've implemented our reporter as a

00:11:31,040 --> 00:11:35,040
short free function

00:11:32,720 --> 00:11:36,160
this function takes an error and then

00:11:35,040 --> 00:11:38,320
prints that error

00:11:36,160 --> 00:11:41,040
and all of its sources followed by a

00:11:38,320 --> 00:11:43,600
back trace if our error captured one

00:11:41,040 --> 00:11:44,399
a more complex error reporter might also

00:11:43,600 --> 00:11:47,440
try to check

00:11:44,399 --> 00:11:49,040
all errors for a back trace or if it

00:11:47,440 --> 00:11:50,639
were a type and it was storing its own

00:11:49,040 --> 00:11:53,440
context in addition to the error

00:11:50,639 --> 00:11:54,480
it might print that as well now in other

00:11:53,440 --> 00:11:56,160
languages

00:11:54,480 --> 00:11:58,800
there is no distinction between errors

00:11:56,160 --> 00:12:00,399
and reporters and this is largely due to

00:11:58,800 --> 00:12:03,680
a lack of the equivalent

00:12:00,399 --> 00:12:04,959
of the error trait the error trait

00:12:03,680 --> 00:12:07,040
equivalent in other languages

00:12:04,959 --> 00:12:09,519
is often quite simple this is a single

00:12:07,040 --> 00:12:11,440
function to grab the error message

00:12:09,519 --> 00:12:13,120
these interfaces force you to either

00:12:11,440 --> 00:12:14,880
include your source error your back

00:12:13,120 --> 00:12:16,320
trace and any other information you care

00:12:14,880 --> 00:12:18,560
about in your error message

00:12:16,320 --> 00:12:20,000
or to avoid using the provided interface

00:12:18,560 --> 00:12:21,760
altogether

00:12:20,000 --> 00:12:23,120
in rust we don't have to combine our

00:12:21,760 --> 00:12:25,279
messages all into one

00:12:23,120 --> 00:12:27,200
in fact you're encouraged not to

00:12:25,279 --> 00:12:28,480
including a source's error message in

00:12:27,200 --> 00:12:30,320
your display implementation

00:12:28,480 --> 00:12:32,320
and returning it as your source via the

00:12:30,320 --> 00:12:34,240
error trait is essentially a bug

00:12:32,320 --> 00:12:35,680
as it forces reporters to duplicate

00:12:34,240 --> 00:12:38,399
information when they print out the

00:12:35,680 --> 00:12:40,160
chain of error messages

00:12:38,399 --> 00:12:42,160
by separating the source and the error

00:12:40,160 --> 00:12:43,040
message we move responsibility of

00:12:42,160 --> 00:12:45,040
formatting

00:12:43,040 --> 00:12:47,920
away from the errors themselves making

00:12:45,040 --> 00:12:50,160
it possible to get fancy

00:12:47,920 --> 00:12:52,800
in rust we can have the same error print

00:12:50,160 --> 00:12:54,079
to a log as one line but to the terminal

00:12:52,800 --> 00:12:55,680
as many

00:12:54,079 --> 00:12:57,680
this wouldn't be possible if the error

00:12:55,680 --> 00:13:00,000
trait didn't separate error message from

00:12:57,680 --> 00:13:02,000
other contexts such as the source error

00:13:00,000 --> 00:13:04,000
however despite the fact that the error

00:13:02,000 --> 00:13:04,959
trait in rust is more flexible than most

00:13:04,000 --> 00:13:08,160
other languages

00:13:04,959 --> 00:13:09,600
it is still restricted in some ways

00:13:08,160 --> 00:13:11,680
the error trade can only represent

00:13:09,600 --> 00:13:13,040
errors with a single source

00:13:11,680 --> 00:13:14,959
if you've ever written a parser you

00:13:13,040 --> 00:13:18,480
might have run into this one where you

00:13:14,959 --> 00:13:20,480
have multiple syntax errors at once

00:13:18,480 --> 00:13:22,959
the error trait can only represent a

00:13:20,480 --> 00:13:24,639
chain of errors as a singly linked list

00:13:22,959 --> 00:13:26,880
and so it doesn't work well for domains

00:13:24,639 --> 00:13:29,279
like parsers where error causes end up

00:13:26,880 --> 00:13:32,079
looking more like a tree

00:13:29,279 --> 00:13:34,240
in addition you can only access three

00:13:32,079 --> 00:13:36,639
forms of context via the error trait

00:13:34,240 --> 00:13:38,000
the error message the source and the

00:13:36,639 --> 00:13:40,079
back trace

00:13:38,000 --> 00:13:42,160
we can't return types like span trace or

00:13:40,079 --> 00:13:44,160
location without using hacks

00:13:42,160 --> 00:13:45,279
based on downcast to work around the

00:13:44,160 --> 00:13:47,120
error trade

00:13:45,279 --> 00:13:48,959
this prevents us from having things like

00:13:47,120 --> 00:13:50,800
error return traces

00:13:48,959 --> 00:13:52,560
now i dream of a rest where we can

00:13:50,800 --> 00:13:53,440
access things like the location an error

00:13:52,560 --> 00:13:56,560
was constructed

00:13:53,440 --> 00:13:57,600
http status codes custom report sections

00:13:56,560 --> 00:13:59,360
and more

00:13:57,600 --> 00:14:01,360
if we could access these generic forms

00:13:59,360 --> 00:14:02,240
of context in error reporters we could

00:14:01,360 --> 00:14:05,600
implement error

00:14:02,240 --> 00:14:09,040
turn traces generically and much more

00:14:05,600 --> 00:14:10,079
now i do have plans for how we can fix

00:14:09,040 --> 00:14:12,079
these problems though

00:14:10,079 --> 00:14:13,680
so in the future this may no longer be

00:14:12,079 --> 00:14:16,320
an issue

00:14:13,680 --> 00:14:18,320
okay so i think y'all have a vague idea

00:14:16,320 --> 00:14:20,480
of what an error reporter is now so

00:14:18,320 --> 00:14:22,560
let's dig into an example on how to use

00:14:20,480 --> 00:14:23,199
one by recreating the custom section

00:14:22,560 --> 00:14:25,839
example

00:14:23,199 --> 00:14:27,600
from the beginning of the talk so we're

00:14:25,839 --> 00:14:28,240
going to create a customized version of

00:14:27,600 --> 00:14:30,320
the command

00:14:28,240 --> 00:14:31,279
output function with a nicer to use

00:14:30,320 --> 00:14:33,120
interface

00:14:31,279 --> 00:14:34,560
instead of returning an output type with

00:14:33,120 --> 00:14:37,519
the stood error and stood out

00:14:34,560 --> 00:14:39,199
as effects of bytes and exit status

00:14:37,519 --> 00:14:40,959
let's just return a string for stood out

00:14:39,199 --> 00:14:41,680
if the command succeeds and return an

00:14:40,959 --> 00:14:44,800
error port

00:14:41,680 --> 00:14:46,720
if the command fails so

00:14:44,800 --> 00:14:48,320
we start by implementing a trait we have

00:14:46,720 --> 00:14:50,320
to do this because we can't implement

00:14:48,320 --> 00:14:51,920
methods and foreign types

00:14:50,320 --> 00:14:53,839
then we're going to implement this trait

00:14:51,920 --> 00:14:55,199
for stud process command

00:14:53,839 --> 00:14:57,040
and first thing we're going to do is

00:14:55,199 --> 00:14:58,959
call the original output function

00:14:57,040 --> 00:15:00,880
then we're going to convert the standard

00:14:58,959 --> 00:15:03,279
output to a string

00:15:00,880 --> 00:15:04,639
and if the output was a success we are

00:15:03,279 --> 00:15:06,160
going to return that string

00:15:04,639 --> 00:15:08,000
otherwise we're going to return an error

00:15:06,160 --> 00:15:11,600
indicating what went wrong

00:15:08,000 --> 00:15:14,480
so let's run this and see what happens

00:15:11,600 --> 00:15:15,680
error command exited successfully cool

00:15:14,480 --> 00:15:18,320
we got our error port

00:15:15,680 --> 00:15:18,880
but also not very helpful i didn't even

00:15:18,320 --> 00:15:20,399
show you

00:15:18,880 --> 00:15:22,000
the main function or tell you what

00:15:20,399 --> 00:15:23,920
command i was running so let's figure

00:15:22,000 --> 00:15:25,360
that out next

00:15:23,920 --> 00:15:27,040
so first we're going to format the

00:15:25,360 --> 00:15:27,760
command as a string and then we're going

00:15:27,040 --> 00:15:30,720
to shove

00:15:27,760 --> 00:15:32,160
that into the error report as a section

00:15:30,720 --> 00:15:34,800
with an added header

00:15:32,160 --> 00:15:36,720
now these functions section and header

00:15:34,800 --> 00:15:38,560
are provided by color error

00:15:36,720 --> 00:15:40,560
and they all just work with any types

00:15:38,560 --> 00:15:43,040
that implement display

00:15:40,560 --> 00:15:44,959
so let's see how this changes things

00:15:43,040 --> 00:15:45,759
error command exited unsuccessfully

00:15:44,959 --> 00:15:48,240
command

00:15:45,759 --> 00:15:49,120
get cat okay so we can see why the

00:15:48,240 --> 00:15:51,040
command failed

00:15:49,120 --> 00:15:52,639
hat isn't a real git command i wish it

00:15:51,040 --> 00:15:55,440
was but it's not

00:15:52,639 --> 00:15:55,839
now this error isn't very descriptive

00:15:55,440 --> 00:15:58,320
sure

00:15:55,839 --> 00:15:59,279
it describes what went wrong but is far

00:15:58,320 --> 00:16:00,959
too generic

00:15:59,279 --> 00:16:02,880
so let's go ahead and find a new error

00:16:00,959 --> 00:16:04,720
message with a more descriptive

00:16:02,880 --> 00:16:06,720
or let's go ahead and define a new error

00:16:04,720 --> 00:16:09,839
with a more descriptive error message

00:16:06,720 --> 00:16:11,519
to wrap our source error so here's our

00:16:09,839 --> 00:16:13,360
main function where we call color air

00:16:11,519 --> 00:16:15,360
install which just sets up our panic

00:16:13,360 --> 00:16:17,279
and our error hooks and then we create a

00:16:15,360 --> 00:16:19,279
command to run git cat and use our

00:16:17,279 --> 00:16:21,040
output to function to run it

00:16:19,279 --> 00:16:23,040
to wrap the error this returns we're

00:16:21,040 --> 00:16:26,079
going to call this rap error function

00:16:23,040 --> 00:16:28,560
which is provided by air this function

00:16:26,079 --> 00:16:30,399
takes a result and an argument that

00:16:28,560 --> 00:16:33,040
implements the display trait

00:16:30,399 --> 00:16:34,560
and if the result is the error variant

00:16:33,040 --> 00:16:37,120
it creates a new error

00:16:34,560 --> 00:16:39,279
using the arg as the error message and

00:16:37,120 --> 00:16:41,440
the old error as the source

00:16:39,279 --> 00:16:44,480
it then returns this new error instead

00:16:41,440 --> 00:16:47,199
of the original one as an error report

00:16:44,480 --> 00:16:49,440
so let's go ahead and run this and we

00:16:47,199 --> 00:16:50,800
can see error the cat could not be got

00:16:49,440 --> 00:16:52,800
because the command exited

00:16:50,800 --> 00:16:55,839
unsuccessfully and the command was get

00:16:52,800 --> 00:16:57,839
cat cool this is pretty helpful

00:16:55,839 --> 00:16:59,600
it's not quite there yet we're still

00:16:57,839 --> 00:17:01,519
missing the stood error output that the

00:16:59,600 --> 00:17:03,120
original example had so let's go ahead

00:17:01,519 --> 00:17:05,360
and add that finally

00:17:03,120 --> 00:17:07,679
so we're going to convert stood error to

00:17:05,360 --> 00:17:09,520
a string just like we did with stood out

00:17:07,679 --> 00:17:10,720
and here we're going to show both stood

00:17:09,520 --> 00:17:13,280
out and stood error

00:17:10,720 --> 00:17:15,600
as sections into the final error report

00:17:13,280 --> 00:17:17,760
let's go ahead and see what we get

00:17:15,600 --> 00:17:20,079
error cat cannot got command exit

00:17:17,760 --> 00:17:22,400
unsuccessfully commands get cat

00:17:20,079 --> 00:17:23,600
and cat isn't a git command here's the

00:17:22,400 --> 00:17:24,480
suggestions for what we could run

00:17:23,600 --> 00:17:26,799
instead

00:17:24,480 --> 00:17:29,039
perfect we finally have an error for

00:17:26,799 --> 00:17:31,440
including all the information we need

00:17:29,039 --> 00:17:33,440
with it we can pinpoint what went wrong

00:17:31,440 --> 00:17:35,919
why it went wrong and as an added bonus

00:17:33,440 --> 00:17:36,480
how we can fix it so hopefully this

00:17:35,919 --> 00:17:38,640
example

00:17:36,480 --> 00:17:40,559
makes it a bit more clear how beneficial

00:17:38,640 --> 00:17:41,360
just a little context can be for air

00:17:40,559 --> 00:17:43,120
reports

00:17:41,360 --> 00:17:45,919
and help you understand why i think air

00:17:43,120 --> 00:17:47,360
reporting is such an important concept

00:17:45,919 --> 00:17:50,559
this is just a small

00:17:47,360 --> 00:17:51,840
example of what error can do this is

00:17:50,559 --> 00:17:53,120
just what i've configured the hooks for

00:17:51,840 --> 00:17:54,720
color error to support

00:17:53,120 --> 00:17:56,320
you can do much more if you take the

00:17:54,720 --> 00:17:57,919
time to write your own hooks

00:17:56,320 --> 00:17:59,679
though i don't have the time to go into

00:17:57,919 --> 00:18:00,559
details on how to customize air as part

00:17:59,679 --> 00:18:02,080
of this talk

00:18:00,559 --> 00:18:04,080
so if you're interested in learning how

00:18:02,080 --> 00:18:05,600
to customize air please check out my

00:18:04,080 --> 00:18:08,000
blog

00:18:05,600 --> 00:18:09,440
okay so before we go on i've got some

00:18:08,000 --> 00:18:11,039
tips related to air reporters that i

00:18:09,440 --> 00:18:14,160
think are useful to know

00:18:11,039 --> 00:18:15,120
so first of all airport is almost always

00:18:14,160 --> 00:18:18,080
implement from e

00:18:15,120 --> 00:18:19,120
for all error types now this is because

00:18:18,080 --> 00:18:21,760
air reporters exist

00:18:19,120 --> 00:18:23,600
to generically format any error and

00:18:21,760 --> 00:18:25,200
they're built on the error trait so it

00:18:23,600 --> 00:18:26,720
makes sense that we'd want an interface

00:18:25,200 --> 00:18:28,400
to create one from any error that

00:18:26,720 --> 00:18:30,880
implements the error trait

00:18:28,400 --> 00:18:32,240
but as a consequence of this error

00:18:30,880 --> 00:18:34,799
reporters cannot

00:18:32,240 --> 00:18:36,400
implement the error trait themselves

00:18:34,799 --> 00:18:37,120
this is true for all types that

00:18:36,400 --> 00:18:40,160
implement from

00:18:37,120 --> 00:18:43,200
e for all errors including anyhow error

00:18:40,160 --> 00:18:46,240
a report and box dine error

00:18:43,200 --> 00:18:48,160
implementing both of these traits ends

00:18:46,240 --> 00:18:49,600
up violating the overlap rule

00:18:48,160 --> 00:18:51,440
and that there would be two from

00:18:49,600 --> 00:18:54,640
implements to choose from when

00:18:51,440 --> 00:18:56,320
converting a reporter to itself

00:18:54,640 --> 00:18:58,160
so thanks to the fact they can't

00:18:56,320 --> 00:18:59,679
implement the error trade they also

00:18:58,160 --> 00:19:01,919
don't compose very well with other

00:18:59,679 --> 00:19:02,960
errors this is just one of the many

00:19:01,919 --> 00:19:05,520
reasons reporters

00:19:02,960 --> 00:19:07,120
aren't great to use in library apis

00:19:05,520 --> 00:19:08,640
because your users will have to jump

00:19:07,120 --> 00:19:10,000
through extra hoops to use them as

00:19:08,640 --> 00:19:14,160
sources for other errors and they

00:19:10,000 --> 00:19:15,840
might not understand why so

00:19:14,160 --> 00:19:17,200
by now you should know all the tools

00:19:15,840 --> 00:19:19,120
built into the language

00:19:17,200 --> 00:19:20,720
how they fit into the various pieces of

00:19:19,120 --> 00:19:22,160
error handling and have an understanding

00:19:20,720 --> 00:19:23,200
of how they can be combined to write

00:19:22,160 --> 00:19:25,039
error reports

00:19:23,200 --> 00:19:26,640
so finally i'd like to take a look at

00:19:25,039 --> 00:19:28,320
the ecosystem at large

00:19:26,640 --> 00:19:30,080
to see what open source libraries we can

00:19:28,320 --> 00:19:31,919
use to help us with our five parts of

00:19:30,080 --> 00:19:33,840
error handling

00:19:31,919 --> 00:19:35,120
so quick reminder here's our breakdown

00:19:33,840 --> 00:19:36,000
now i'm going to introduce these

00:19:35,120 --> 00:19:37,520
libraries by

00:19:36,000 --> 00:19:39,679
how they fit into the error handling

00:19:37,520 --> 00:19:40,799
breakdown not every part will have a

00:19:39,679 --> 00:19:42,240
library to help

00:19:40,799 --> 00:19:44,320
and some will be disproportionately

00:19:42,240 --> 00:19:47,200
represented so i'd first like to start

00:19:44,320 --> 00:19:50,000
with this error for defining errors

00:19:47,200 --> 00:19:51,760
this error is an error derived macro and

00:19:50,000 --> 00:19:53,600
it exists to reduce boilerplate by

00:19:51,760 --> 00:19:54,080
implementing commonly used traits for

00:19:53,600 --> 00:19:57,280
you

00:19:54,080 --> 00:19:59,760
such as error and display and from

00:19:57,280 --> 00:20:02,240
to use it we start by adding the macros

00:19:59,760 --> 00:20:04,559
identifier to our drive attribute

00:20:02,240 --> 00:20:07,039
next we can implement display with this

00:20:04,559 --> 00:20:08,480
error via error attributes

00:20:07,039 --> 00:20:10,559
we can have a simple attribute which

00:20:08,480 --> 00:20:12,559
contains only a string literal

00:20:10,559 --> 00:20:14,240
we can also include variables in our

00:20:12,559 --> 00:20:15,760
error messages with this error's custom

00:20:14,240 --> 00:20:19,679
format syntax

00:20:15,760 --> 00:20:21,840
for both unnamed and named members

00:20:19,679 --> 00:20:23,520
this error can also handle implementing

00:20:21,840 --> 00:20:24,320
our source and backtrace functions for

00:20:23,520 --> 00:20:26,400
us

00:20:24,320 --> 00:20:28,320
any member with the name source or back

00:20:26,400 --> 00:20:29,919
trace will automatically be returned

00:20:28,320 --> 00:20:31,919
from the appropriate function

00:20:29,919 --> 00:20:34,559
or this can also be done explicitly

00:20:31,919 --> 00:20:36,559
using the source attribute

00:20:34,559 --> 00:20:38,000
this error can also implement from with

00:20:36,559 --> 00:20:39,679
from attribute and note

00:20:38,000 --> 00:20:42,000
that this also implies the source

00:20:39,679 --> 00:20:43,919
attribute when used

00:20:42,000 --> 00:20:45,840
this isn't all this error can do so

00:20:43,919 --> 00:20:46,960
please check out the documentation for

00:20:45,840 --> 00:20:48,480
more details

00:20:46,960 --> 00:20:51,280
next i'd like to introduce a display

00:20:48,480 --> 00:20:52,880
dock display dock is a fork of this

00:20:51,280 --> 00:20:54,799
error that provides only the display

00:20:52,880 --> 00:20:56,240
derived portion of this error but uses

00:20:54,799 --> 00:20:58,960
dot comments instead of custom

00:20:56,240 --> 00:21:00,559
attributes to input the format strings

00:20:58,960 --> 00:21:02,799
i find this is great for simple error

00:21:00,559 --> 00:21:05,520
types and that often error messages make

00:21:02,799 --> 00:21:08,720
for great documentation

00:21:05,520 --> 00:21:10,960
now i'd like to move on to snafu snafu

00:21:08,720 --> 00:21:12,159
is another error drive macro much like

00:21:10,960 --> 00:21:14,880
this error

00:21:12,159 --> 00:21:16,240
we use it the same way we add the macro

00:21:14,880 --> 00:21:17,600
to our drive attribute

00:21:16,240 --> 00:21:20,000
and we use some custom attributes to

00:21:17,600 --> 00:21:21,919
implement display the main difference is

00:21:20,000 --> 00:21:23,679
that snafu also has a special helper

00:21:21,919 --> 00:21:25,520
function called context to further

00:21:23,679 --> 00:21:27,760
reduce boilerplate when capturing

00:21:25,520 --> 00:21:30,080
context for error messages

00:21:27,760 --> 00:21:31,760
the context function takes a result and

00:21:30,080 --> 00:21:33,360
a context selector struct

00:21:31,760 --> 00:21:35,840
which is auto-generated by the derived

00:21:33,360 --> 00:21:37,360
macro you may notice that the source

00:21:35,840 --> 00:21:38,960
member is missing here

00:21:37,360 --> 00:21:41,120
this is because the context function

00:21:38,960 --> 00:21:42,960
function implicitly passes along

00:21:41,120 --> 00:21:43,600
contexts like the source and the back

00:21:42,960 --> 00:21:46,000
trace

00:21:43,600 --> 00:21:47,360
making so you only have to cut capture

00:21:46,000 --> 00:21:50,320
additional context

00:21:47,360 --> 00:21:51,840
that is unique to your error variant it

00:21:50,320 --> 00:21:54,159
then internally creates the correct

00:21:51,840 --> 00:21:56,080
wrapping error variant from your enum

00:21:54,159 --> 00:21:59,440
and you can you can think of this as

00:21:56,080 --> 00:22:01,679
syntax sugar for map error

00:21:59,440 --> 00:22:02,799
anyhow and air also have helpers for

00:22:01,679 --> 00:22:04,880
defining new errors

00:22:02,799 --> 00:22:06,799
however these functions don't actually

00:22:04,880 --> 00:22:08,880
help you to find new error types

00:22:06,799 --> 00:22:10,400
instead they help use their own private

00:22:08,880 --> 00:22:11,039
types to implement to create the new

00:22:10,400 --> 00:22:12,720
errors

00:22:11,039 --> 00:22:15,200
and then immediately convert those

00:22:12,720 --> 00:22:16,880
errors to their error reporting types

00:22:15,200 --> 00:22:18,880
this is useful when you want to create

00:22:16,880 --> 00:22:21,120
an error exclusively to report them

00:22:18,880 --> 00:22:22,320
common need when writing applications

00:22:21,120 --> 00:22:24,480
these crates do

00:22:22,320 --> 00:22:25,919
also provide some helpers for then later

00:22:24,480 --> 00:22:29,360
reacting to these ad-hoc

00:22:25,919 --> 00:22:31,039
error types now before we continue

00:22:29,360 --> 00:22:32,320
there are some things i'd like to share

00:22:31,039 --> 00:22:33,679
that i think are useful to know when

00:22:32,320 --> 00:22:36,480
defining errors

00:22:33,679 --> 00:22:39,280
first with api stability there's an easy

00:22:36,480 --> 00:22:41,280
pitfall to run into as a library author

00:22:39,280 --> 00:22:43,520
if you just create a public enum for

00:22:41,280 --> 00:22:45,760
your error type adding a new variant or

00:22:43,520 --> 00:22:48,320
even a new member to an existing variant

00:22:45,760 --> 00:22:49,840
is a breaking change and will make you

00:22:48,320 --> 00:22:53,120
implement your major

00:22:49,840 --> 00:22:55,120
version this can be avoided simply by

00:22:53,120 --> 00:22:56,480
adding non-exhaustive to error enums

00:22:55,120 --> 00:22:57,760
where you think you may wish to add new

00:22:56,480 --> 00:22:59,679
variants in the future

00:22:57,760 --> 00:23:01,360
or to specific variants where you think

00:22:59,679 --> 00:23:03,360
you may wish to add new members in the

00:23:01,360 --> 00:23:05,120
future

00:23:03,360 --> 00:23:07,360
i think it's also important to consider

00:23:05,120 --> 00:23:09,520
stack size when handling errors

00:23:07,360 --> 00:23:11,760
with result the size of your return type

00:23:09,520 --> 00:23:14,080
is the larger of the two variants

00:23:11,760 --> 00:23:15,840
if your error types are large all

00:23:14,080 --> 00:23:16,400
functions returning your errors will

00:23:15,840 --> 00:23:18,720
require

00:23:16,400 --> 00:23:20,799
more stack space and this can negatively

00:23:18,720 --> 00:23:23,520
impact your performance of your program

00:23:20,799 --> 00:23:25,440
even when no errors are encountered the

00:23:23,520 --> 00:23:26,240
solution here is to allocate your errors

00:23:25,440 --> 00:23:28,159
on the heap

00:23:26,240 --> 00:23:30,320
when they're too large either with a box

00:23:28,159 --> 00:23:32,080
or reporting type like air anyhow which

00:23:30,320 --> 00:23:33,840
is designed to occupy as little stack

00:23:32,080 --> 00:23:36,480
space as possible

00:23:33,840 --> 00:23:38,400
however when boxing your errors remember

00:23:36,480 --> 00:23:40,640
to use the original arrow type

00:23:38,400 --> 00:23:43,120
not dine error but the box still

00:23:40,640 --> 00:23:45,200
implements the error trait

00:23:43,120 --> 00:23:47,120
okay enough of the tips let's move on to

00:23:45,200 --> 00:23:50,320
propagation and gathering context

00:23:47,120 --> 00:23:53,200
starting with filler filler is

00:23:50,320 --> 00:23:54,799
a library that adds support for throwing

00:23:53,200 --> 00:23:55,840
functions to rest through procedural

00:23:54,799 --> 00:23:58,559
macros

00:23:55,840 --> 00:23:59,760
functions annotated with rows return a

00:23:58,559 --> 00:24:01,840
result where the ok

00:23:59,760 --> 00:24:04,080
type is the apparent return type of the

00:24:01,840 --> 00:24:05,679
function and the error type

00:24:04,080 --> 00:24:07,600
is the type listed in the throws

00:24:05,679 --> 00:24:09,760
attribute

00:24:07,600 --> 00:24:11,840
feller then does implicit ok wrapping

00:24:09,760 --> 00:24:14,880
for return types and provides a throws

00:24:11,840 --> 00:24:17,039
macro for returning errors

00:24:14,880 --> 00:24:18,000
if you're missing throw syntax in rust

00:24:17,039 --> 00:24:21,039
this is the library

00:24:18,000 --> 00:24:23,279
for you next for gathering context i'd

00:24:21,039 --> 00:24:25,279
like to introduce tracinger

00:24:23,279 --> 00:24:27,919
tracinger is a tracing instrumentation

00:24:25,279 --> 00:24:29,840
library that exposes the span trace type

00:24:27,919 --> 00:24:31,520
this library also has some cool helpers

00:24:29,840 --> 00:24:33,360
for wrapping errors with span traces and

00:24:31,520 --> 00:24:34,320
then later extracting them through dinar

00:24:33,360 --> 00:24:35,760
trade objects

00:24:34,320 --> 00:24:38,159
working around the restrictions of the

00:24:35,760 --> 00:24:40,320
error trade here we use

00:24:38,159 --> 00:24:41,760
in-current span to wrap an error with

00:24:40,320 --> 00:24:43,840
our instrumented error type

00:24:41,760 --> 00:24:45,520
then below that we convert that error

00:24:43,840 --> 00:24:46,080
immediately to a trade object and then

00:24:45,520 --> 00:24:48,559
extract

00:24:46,080 --> 00:24:50,960
the span trace from that error using

00:24:48,559 --> 00:24:52,720
some clever hacks

00:24:50,960 --> 00:24:54,480
another useful library for gathering

00:24:52,720 --> 00:24:58,000
context is extract

00:24:54,480 --> 00:24:59,840
error extract air is an abstraction of

00:24:58,000 --> 00:25:01,200
the helpers written in tracing air force

00:24:59,840 --> 00:25:03,600
fan traces

00:25:01,200 --> 00:25:04,480
instead extractor exposes a bundle type

00:25:03,600 --> 00:25:06,480
for bundling

00:25:04,480 --> 00:25:07,679
arbitrary types of errors which can then

00:25:06,480 --> 00:25:10,159
be extracted later

00:25:07,679 --> 00:25:12,159
through die and error trade objects here

00:25:10,159 --> 00:25:14,400
is an example of bundled being used to

00:25:12,159 --> 00:25:16,480
bundle a back trace-rs

00:25:14,400 --> 00:25:18,159
trace with an error instead of a stood

00:25:16,480 --> 00:25:19,600
back trace emulating the back trace

00:25:18,159 --> 00:25:22,720
function on the error trait

00:25:19,600 --> 00:25:26,240
in a way that works on stable today

00:25:22,720 --> 00:25:26,240
next for matching reacting

00:25:26,320 --> 00:25:30,720
i mentioned this earlier but anyhow and

00:25:28,400 --> 00:25:33,279
air also have some helpers for handling

00:25:30,720 --> 00:25:35,039
their own ad-hoc created errors

00:25:33,279 --> 00:25:37,200
errors created with the air macro or

00:25:35,039 --> 00:25:38,080
with wrap air meet downcast back to the

00:25:37,200 --> 00:25:40,880
original type

00:25:38,080 --> 00:25:42,559
used to create the error message here

00:25:40,880 --> 00:25:44,400
you can see a type that just implements

00:25:42,559 --> 00:25:46,960
display which we use to construct a

00:25:44,400 --> 00:25:48,880
wrapping error type as the error message

00:25:46,960 --> 00:25:50,400
then we can later downcast through the

00:25:48,880 --> 00:25:51,600
report and you specifically have to do

00:25:50,400 --> 00:25:53,200
it through the report you can't get a

00:25:51,600 --> 00:25:56,000
reference to the internal error

00:25:53,200 --> 00:25:57,120
but we can downcast that report back to

00:25:56,000 --> 00:25:58,480
the message type

00:25:57,120 --> 00:26:01,120
that was used when creating that

00:25:58,480 --> 00:26:01,120
wrapping error

00:26:01,840 --> 00:26:05,840
now for discarding errors i don't know

00:26:03,760 --> 00:26:07,840
of any open source libraries that help

00:26:05,840 --> 00:26:09,120
but if you do know of any please let me

00:26:07,840 --> 00:26:10,480
know

00:26:09,120 --> 00:26:12,240
for printing though you're already

00:26:10,480 --> 00:26:14,240
familiar with anyhow and air given that

00:26:12,240 --> 00:26:16,159
they are the stars of this talk

00:26:14,240 --> 00:26:17,600
these libraries expose air reporters

00:26:16,159 --> 00:26:19,679
that as far as i can tell

00:26:17,600 --> 00:26:21,200
are strictly superior versions of box

00:26:19,679 --> 00:26:22,880
diner

00:26:21,200 --> 00:26:24,159
for customizing these reports though

00:26:22,880 --> 00:26:25,360
there are a couple of quick libraries

00:26:24,159 --> 00:26:27,760
i've written

00:26:25,360 --> 00:26:28,559
color air you're already familiar with

00:26:27,760 --> 00:26:30,320
stable error

00:26:28,559 --> 00:26:32,400
provides identical features to the

00:26:30,320 --> 00:26:34,720
default error hook provided in air

00:26:32,400 --> 00:26:36,320
but using backtrace rs back trace

00:26:34,720 --> 00:26:38,559
instead of the standard library's back

00:26:36,320 --> 00:26:41,279
trace so it works on stable

00:26:38,559 --> 00:26:42,880
jane error is just a re-export of color

00:26:41,279 --> 00:26:44,480
air but i think it's worth mentioning

00:26:42,880 --> 00:26:46,720
just for the pun given that it's the

00:26:44,480 --> 00:26:48,960
reason i named my library air

00:26:46,720 --> 00:26:50,960
and color anyhow isn't usable yet but

00:26:48,960 --> 00:26:52,720
the pr to add the error reporting hopes

00:26:50,960 --> 00:26:54,320
to anyhow has already been written and

00:26:52,720 --> 00:26:55,760
looks likely to merge as soon as i've

00:26:54,320 --> 00:26:56,480
gathered enough evidence to prove the

00:26:55,760 --> 00:26:58,000
design

00:26:56,480 --> 00:26:59,360
so please look forward to using that in

00:26:58,000 --> 00:27:00,960
the future if you're already using

00:26:59,360 --> 00:27:03,679
anyhow

00:27:00,960 --> 00:27:04,320
so that's it that's everything i wanted

00:27:03,679 --> 00:27:06,159
to tell you

00:27:04,320 --> 00:27:07,600
but before we go i'd like to try

00:27:06,159 --> 00:27:09,440
applying this breakdown of error

00:27:07,600 --> 00:27:11,760
handling idea to a question i see

00:27:09,440 --> 00:27:14,799
all the time in the rust community what

00:27:11,760 --> 00:27:16,400
library do i use when writing errors

00:27:14,799 --> 00:27:17,919
the common answer to this question that

00:27:16,400 --> 00:27:19,679
you'll see time and again is

00:27:17,919 --> 00:27:21,440
used anyhow if you're writing an

00:27:19,679 --> 00:27:22,799
application and use this error for

00:27:21,440 --> 00:27:25,520
libraries

00:27:22,799 --> 00:27:26,320
now i agree that this is usually correct

00:27:25,520 --> 00:27:28,399
but it's not

00:27:26,320 --> 00:27:29,840
universally true and we can come up with

00:27:28,399 --> 00:27:30,320
a better rule of thumb if we ask

00:27:29,840 --> 00:27:32,799
ourselves

00:27:30,320 --> 00:27:33,760
what kinds of error handling do we need

00:27:32,799 --> 00:27:37,279
for libraries

00:27:33,760 --> 00:27:38,399
versus applications now for libraries we

00:27:37,279 --> 00:27:40,559
don't generally know

00:27:38,399 --> 00:27:41,679
how our users will handle our errors

00:27:40,559 --> 00:27:44,240
they could report

00:27:41,679 --> 00:27:44,720
react wrap and propagate them or discard

00:27:44,240 --> 00:27:46,320
them

00:27:44,720 --> 00:27:48,000
so we need error types that are

00:27:46,320 --> 00:27:49,520
maximally flexible

00:27:48,000 --> 00:27:51,120
this means we need to implement the

00:27:49,520 --> 00:27:52,960
error traits so they can compose with

00:27:51,120 --> 00:27:54,960
other errors and be reported

00:27:52,960 --> 00:27:57,279
and we want our errors to be an enum so

00:27:54,960 --> 00:27:59,440
they can be reacted too easily

00:27:57,279 --> 00:28:01,360
we also want our api to be stable so we

00:27:59,440 --> 00:28:03,360
should use non-exhaustive so we can add

00:28:01,360 --> 00:28:05,279
new variants in the future

00:28:03,360 --> 00:28:07,520
all of this pushes us to use error

00:28:05,279 --> 00:28:09,120
defining libraries like derived macros

00:28:07,520 --> 00:28:11,200
or to just implement the associated

00:28:09,120 --> 00:28:13,039
traits by hand

00:28:11,200 --> 00:28:14,480
for applications on the other hand we

00:28:13,039 --> 00:28:15,760
know which errors we're going to handle

00:28:14,480 --> 00:28:17,840
versus the report

00:28:15,760 --> 00:28:19,440
we usually handle errors close to where

00:28:17,840 --> 00:28:21,039
they return

00:28:19,440 --> 00:28:22,799
we will need to create new errors but

00:28:21,039 --> 00:28:24,240
usually this is only for errors that we

00:28:22,799 --> 00:28:26,320
wish to report

00:28:24,240 --> 00:28:28,320
and when we need to be able to report

00:28:26,320 --> 00:28:30,159
arbitrary errors because applications

00:28:28,320 --> 00:28:31,440
usually work with errors from many

00:28:30,159 --> 00:28:32,960
sources

00:28:31,440 --> 00:28:36,960
all this pushes us to use error

00:28:32,960 --> 00:28:36,960
reporting libraries like air and anyhow

00:28:37,279 --> 00:28:40,559
and that's it for real this time that's

00:28:39,360 --> 00:28:41,840
the entire talk

00:28:40,559 --> 00:28:45,840
thank you everyone for taking the time

00:28:41,840 --> 00:28:45,840

YouTube URL: https://www.youtube.com/watch?v=rAF8mLI0naQ


