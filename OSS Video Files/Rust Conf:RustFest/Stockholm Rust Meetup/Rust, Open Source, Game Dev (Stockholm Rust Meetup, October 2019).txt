Title: Rust, Open Source, Game Dev (Stockholm Rust Meetup, October 2019)
Publication date: 2019-11-10
Playlist: Stockholm Rust Meetup
Description: 
	Embark Studios software engineer Jake Shadle (@Ca1ne) explains how Rust, open source, and game development fit together in this talk from the Stockholm Rust meetup.

See all our open source projects and sign up for our newsletter at https://embark.dev
Captions: 
	                              so yeah                               it's about it's actually the Triforce of                               Russ gamedev an open-source but we'll                               get to that later so this is a bit of it                               over you going to go briefly through a                               high-level kind of thing of what game                               dev is for those who may not be familiar                               go a little bit more in depth about why                               we chose rust and from the open source                                protective and then talk about using                                open source hurdles with these English                                and source collaborating on open source                                and hurdles so this is a little bit me                                I've been working in gay dub for almost                                                                                                      middling sized companies of like under                                                                                                       in EA for many years and they're quite                                huge and then now I'm in embarks videos                                working in rust and we're small but                                fierce and so so kind of a disclaimer                                like a lot of things gonna say about                                game dev are like my opinions that I've                                formed over the course of my work                                experience and this is like I would say                                typical of game dev but it's not                                necessarily going to be true for all                                game depth there's a lot of differences                                because game dev is a huge industry so                                there's there's the things I say will                                not apply to everything so quickly we're                                gonna go through some stuff with this so                                so these are kind of the the typical                                pieces of that you'll find in games I'm                                not going to talk about server and                                services because they're kind of all the                                scope but the other pieces are quite                                relevant so so the main kind of piece is                                the the engine this is like where the                                platform abstractions are where this                                could be considered like the standard of                                game dev in the sense that it's where                                the platform distractions are so that's                                the games can be easily ported to                                multiple platforms and all that kind of                                stuff ins where middleware integrations                                happen and it is an occasional user of                                open source a typical example would be                                like compression tools so so when you're                                building a game there's a ton of                                contents in current games that you need                                to actually get into the game and so                                this takes GUI tools and importers and                                exporters from you know                                                audio software and there's just like a                                whole kind of range of things that users                                of games for players never see but that                                is part of the making of the games and                                this is typically a mixture of languages                                not just C++ and they're usually window                                specific but not always and then there's                                the actual game itself so this is like                                the very unique code that makes up a                                game it's an infrequent user of open                                source because it's typically like                                custom code that like only applies to                                one game so it's not really applicable                                to a lot of general use cases so yeah so                                so kind of in the summary like open                                source is used in game dev quite a bit                                especially in tools and then but like                                kind of all the things in game dev for                                the most part or closed source but like                                it gets said that's only typical there                                are a lot of good stuff out there as                                well sometime we get to why rust so our                                CTO is speaking again this from a blog                                post it basically calls out that's one                                of the reasons one of the main reasons                                why we chose rust is yeah the language                                is great and all that kind of stuff but                                actually part of the greatness of it is                                the open source nature of it both from                                the language and tooling perspective and                                then also the huge amount of open source                                code that people have published in rust                                and so the reason why rustling of the                                source is such a good compound is                                because and it makes open source easier                                to use easier to publish and easier to                                collaborate on and we'll get more on                                that later                                so so yeah a quick aside we're we're                                saying open source is good and                                everything but obviously people want to                                create their own stuff you wouldn't be a                                programmer otherwise so so given that                                you're not going to write everything                                though yourself you're typically gonna                                 use open source to do it but obviously                                 you're going to write a lot of your own                                 code so so now we're getting into using                                 open source so so the first thing you do                                 is see you in C++ when you use an open                                 source package is first you have to get                                 it and this is where the kind of the                                 first friction comes in because Russ so                                 C++ has a really hard time actually just                                 getting code for the most part there are                                 package managers out there but they're                                 not widely used and typically what game                                 games do is they will take an open                                 source package put into their own                                 private source control and then break                                 the connection with the actual source of                                 tooth that the code originally came from                                 and this immediately starts to getting                                 in the problems of ups changes not being                                 up streamed and then actual changes                                 happening to the code in their intro                                 repository that actually ends up making                                 it harder to bring in improvements in                                 the original from the original                                 repository in the future rust is a                                 little bit simpler you have one line to                                 a file and then you get the code and                                 that's about it but we also do have then                                 ring so so previously this is a separate                                 tool but actually it's now built in the                                 into cargo itself where you can just                                 vendor all of a package and all of its                                 transitive dependencies into a local                                 directory and then you can put in your                                 source control or or whatever you want                                 to do                                 there are use cases for it but this is                                 not the type of workflow it just does                                 support it as well                                 natively                                 so once you get the code you have to                                 build it and C++ makes this annoying so                                 the first thing you have to do is                                 actually get it to work in your build                                 system which is sometimes minutes                                 sometimes hours sometimes days of work                                 depending on how complex the the project                                 is and then the other problem is that a                                 lot of the open source code out there is                                 very Linux focused and if it supports                                 multiple platforms other than Linux it                                 may not support them well and so you                                 typically have to fix things like MS BC                                 warnings because no one has compiled it                                 on the MS BC in years or ever and then                                 you have to do something usually for                                 like if you're using this code on the                                 ps                                                             proprietary platform that doesn't have a                                 publicly available SDK that most                                 developers won't have access to then you                                 have to go in and fix this is calls and                                 the asterisk there is because the same                                 problem exists for us but it's actually                                 worse for rust because rust does have a                                 SDK for the ps                                                           has to be wrapped and then you can't                                 open source that part because sunnis                                 will see you so building and rust is                                 actually the same thing because once you                                 have it you can also build it so don't                                 want that and then and then actually you                                 know once you have the code once you've                                 actually built the code you actually                                 have to use the code in your code base                                 because presumably you've done all this                                 work to actually use it and that's                                 really really hard because C++ is like a                                 huge language with a ton of history and                                 because it's so big and there's so many                                 different revisions of it it's just                                 really really hard to to decide on how                                 to write an API for example and because                                 of this it's it's not trivial often to                                 actually just use a C++ library so                                 usually what happens is you have a C C                                 library which is way easier to use but                                 you still have to wrap it you have to                                 protect kind of the rest of your code                                 base from it because you don't know what                                 it's doing and you want                                 prevent improper usage so this is a bit                                 of a controversial opinion but in my                                 opinion Russ is a small language as it                                 like skews more towards C than C++ in                                 terms of cut size and complexity                                 obviously it's a lot more complicated                                 than the C but I think it's way less                                 complicated in C++ and one of the kind                                 of core concepts in it is traits and                                 traits are a way for libraries                                 communicate with each other with each                                 other without having to be tightly                                 integrated and coupled together and I                                 think this is a real strength of rust                                 that makes it really really easy to                                 consume other people's code or vice                                 versa it also has all kinds of great                                 code generation and a strong standard                                 library and a lot of other great things                                 that make it quite easy easier so this                                 is a simple example program that I wrote                                 for this talk so this is doing a command                                 line argument parsing and it's doing it                                 with a lot of complex code they don't                                 see that actually gets ball down to                                 basically two two lines and yeah so                                 hello                                 Stockholm must meet up                                 so so talked a little bit like technical                                 issues with with actually using open                                 source but there's a lot of problems                                 with using it that in game does                                 specifically and I think probably in                                 other industries that are not really                                 technically related and the big one is                                 licensing so so game dev has like a fear                                 of external code particularly because of                                 licenses and particularly because of                                 things like GPL and copyleft licenses                                 because GPL and how copyleft works is                                 like if that code ever gets into a game                                 that goes to users then the entire rest                                 of the code also has to be open sourced                                 so so companies are very very paranoid                                 about that happening and so so what                                 happens is companies will develop                                 processes around this where I'll do                                 things like have licensing portals or                                 approvals from your manager or all this                                 kind of manual process to go through to                                 actually be able to use open source in                                 the first place and it it's it's a                                 problem but it's actually not as big of                                 a problem for seeing c++ because as                                 we've gone through it's kind of annoying                                 to actually get it in the first place so                                 having a manual process to get approval                                 to do it anyway isn't really that big of                                 a deal because you're already spending a                                 ton of time on it so it's not really an                                 issue but for rust it is an issue                                 because it's so easy to do you kind of                                 have to have a not manual process and so                                 so Russ does have in cargo have metadata                                 associated with what licensing                                 requirements the crate has and so in                                 this example we just said MIT or BSD too                                 and so great we have the metadata but                                 that doesn't really help us because you                                 still have to look at it so this is                                 where one of our open source tools comes                                 in so this is cargo deny it's our                                 dependency gardening tool we use it to                                 kind of maintain our crate graph over                                 time and it's open source you can go and                                 get hub and look at it or install it and                                 basically                                 the top kind of goals of it is ensure                                 that all the crates that we use have                                 proper licensing and keep certain crates                                 of our dependency graph because we don't                                 like them and then also detects                                 duplicates which is important for build                                 times so in this case this is the the                                 config so if you remember I had it as                                 MIT or BSD - and then we're also using                                 some transitive dependencies so here                                 because we haven't allowed any licenses                                 every license is gonna be a problem and                                 this is saying like the I detected this                                 license and you didn't meet any other                                 requirements so I'm gonna actually fail                                 so another reason that you don't use                                 some of the source is financial reasons                                 and companies like to buy software                                 because if you buy software you tend to                                 have support agreements and contracts                                 and grievance and there's legal stuff                                 and people like paying for stuff and and                                 we do - but but it's a weird thing to                                 say that people would rather you pay for                                 something than get it for free but that                                 does happen and this is an open problem                                 open source there's a lot of options                                 there's so so this is a from our                                 embarked website so we have a patreon a                                 github                                 sponsorship and open collective we're                                 directly funding specific individuals we                                 were funding oh yeah today we sponsored                                 blender the blender foundation which is                                 a                                                                        lot of other stuff but it's a it's an                                 issue that we're working with a lot of                                 people to figure out what the best way                                 for it is here because open-source in                                 general is kind of having this problem I                                 think right now and it's something that                                 we're interested in helping helping with                                 so so we got past the the using                                 open-source how do you actually                                 collaborate on open-source so so c++                                 again we get to the problem of everyone                                 says like c and c++ is portable                                 particularly c like c runs everywhere                                 great                                 except if you aren't on the proper                                 platform and you don't have the proper                                 compiler and you don't have the proper                                 tool chain it kind of quickly gets                                 complicated and then again with the C++                                 there's so many versions of it people                                 disagree on which ones you should                                 support and then if you're on say one                                 particular compiler that always locks                                 behind on C++ standardization then you                                 can't use certain libraries because                                 they've upgraded and your compiler                                 doesn't support it yet and then again                                 with the countless built systems because                                 there's just there's so many build                                 systems it's ridiculous so so Russ is a                                 much much simpler story it has one                                 compiler several linkers and one kind of                                 build system and the reason there's an                                 ostrich all of these is because Russ                                 makes it really really easy to consume                                 see particularly C but also C++ code as                                 we'll get to later and but as soon as                                 you have seen C++ code all of a sudden                                 all these like nice guarantees that                                 rusts like you can just download                                 something and use it kind of start going                                 away because all of a sudden oh I have                                 to have a proper C++ compiler                                 oh I'm leaking against the system                                 dependency that may or may not be on the                                 the system and so all of a sudden you                                 get into more complicated scenarios                                 because they've seen C++ so hopefully in                                 the long term there will be less of that                                 code in the future so that will have                                 fewer problems and then we get to the                                 problem of just like code quality it's                                 really hard to collaborate when you have                                 to fight with people giving you PRS are                                 you sending PRS or someone else and you                                 have wildly varying opinions on how to                                 write good C n C++ code and if it's safe                                 or not and you know if you're on say                                 Windows and you don't have access to                                 things like cache grind or BA grind or                                 all the kind of nice tooling for finding                                 some of these issues but someone else                                 does and you don't know about it and                                 Allison you're having an argument                                 there's there's just so many problems                                 with keeping C and C++ in a                                 a nice way that you can actually push it                                 to people or get patches for them                                 I think Russ significantly reduces the                                 friction across all these areas the                                 biggest one would be the language                                 guarantees that you get from just the                                 safety aspect but then also there's just                                 like a massive amount of tooling that                                 that Russ is created both just for Russ                                 but also just wrapping things that C and                                 C++ already have such as fuzzers so the                                 first one so so this made a small change                                 to our program and just move the                                 printing to another thread to make it                                 faster                                 so yeah this you know really really good                                 code weight way faster but it's also                                 broken and Russ tells us that                                 immediately and this gets this is really                                 really hard in C++ because you don't                                 really have any kind of guarantees from                                 a language level that your code is third                                 safe and that it's going to stay thread                                 safe for the future and then there's                                 obviously tests like having a built-in                                 testing framework is it's very basic but                                 it gets the job done and just having it                                 it's just it's so nice to be able to                                 really easily say did they break the                                 test or did I break the test                                 it just makes yeah PRS and all this kind                                 of stuff just vastly easier when you                                 have something built in that you can                                 just trust or rely on and there's just                                 like so many other ways that rusts                                 reduce rust and the rust ecosystem                                 reduces friction there's too many things                                 to talk about but there's you know yeah                                 there's just so many good things                                 yeah like Docs RS like every single                                 publicly published crate has document                                 full documentation generated from the                                 source code that is also checked against                                 the compiler to make sure that your                                 example code actually compiles like it's                                 insane and then and then there's just                                 like the standard tooling that is kind                                 of pervasive in the Russ ecosystem which                                 is one of them is Russ format so I                                 really hate talking about code cell                                 because it's to me                                 very very boring and pointless but                                 people have really strong opinions about                                 it so we just removed the opinion from                                 it and say whatever russ format says is                                 how we accept PRS or not like if if                                 you've kept the same style then we don't                                 care                                 Clippy copy is just like a way to find                                 just a lot of just simple low-hanging                                 fruit that it's cleans up your codebase                                 reduces like simple performance issues                                 and just makes your code cleaner and                                 nicer and it's a great way for people to                                 learn rust because they can just run                                 clicky on a project and say oh you have                                 this little thing and I can fix it and                                 then another feature of car great and I                                 was yeah we really really dislike open                                 this ISO so we removed it from all make                                 sure it never comes into any of our                                 projects so yeah we we keep our code                                 clean from the open SSL so so as said                                 before we had the hurdles for using open                                 source now there's also the hurdles for                                 collaboration so the biggest one is                                 obviously just like collaboration is                                 hard also in your talking with people                                 from other companies that may have                                 differing opinions on priorities and                                 what they feel is important and and it's                                 really really hard it's both hard open                                 sourcing your own things because other                                 people get to see your code which is                                 maybe not good and then and then like                                 just talking with people that you don't                                 have a relationship with that may live                                 across the world it's very very                                 difficult and I think particularly in                                 game dev communities companies                                 [Music]                                 open-source is considered kind of a                                 zero-sum game or even a negative sum                                 game and like it's really hard to just                                 get something open-source or make a cait                                 like you often have to make a business                                 case for it so for example if a company                                 was to have their own internal version                                 of the                                 standard template library for for C++                                 and they wanted to open-source it they                                 may have to prove it as a worthy thing                                 to do by making a case that they could                                 influence the standard Committee for                                 example and then also a lot of people                                 just think that their code is the best                                 thing ever and I worked really hard on                                 it so why would I let other people see                                 it and use it which is a weird argument                                 if you're a programmer in my opinion and                                 and kind of we we disagree obviously                                 like it's a lot of hard work but it's                                 worth it                                 so for example this was a PR that we                                 gave that we got I think like two days                                 after we open source this texture                                 synthesis crate which if you haven't                                 seen yet I really recommend you check it                                 out it's like really really cool and                                 it's written by a one of our employees                                 that she's like kind of a rust newb and                                 she was able to make a awesome rust                                 crate that was really cool that's like                                 seven hundred stars but yeah we got this                                 like two days later and then proved the                                 poorest by                                                              so so right now we have our main Russ                                 project and hat uses about                                     open-source crates we like a like yoen                                 mentioned we've open sourced nine crates                                 now we've contributed issues poll                                 requests yeah all kinds of stuff to a                                 lot of crates most of them are just                                 bumping dependencies but some of them                                 are bug fixes and and so forth and we're                                 also yeah helping sponsor and fund                                 several people and projects like rust                                 analyzer for example because we really                                 want to invest more an open-source                                 whether that's collaborating just on                                 code or paying people so so yeah so so                                 Russ just for us simplifies contributing                                 using an open source like really before                                 this I don't think really any of us had                                 really been involved that much in the                                 open source community because it was                                 just hard and we worked at companies                                 that were kind of like antithetical to                                 to how the source works but but yeah the                                 the combination of rust and open source                                 and Gabe dev is just like a really great                                 combination and even without rust                                 that's a blog post by one of our DevOps                                 engineers talking about other ways we                                 use an open-source so yeah it's the                                 Triforce how am I on time                                 [Music]                                 I don't know is that a trick question                                 [Music]                                 what do I miss so I think like I said                                 like there's actually a lot of the good                                 parts of C++ and the C++ and C                                 ecosystems like really good fuzzers                                 really good stack analyzers and so for                                 that you can still use from rust so and                                 like same thing with debuggers and                                 they're like a lot of the tooling and                                 then like yeah LLVM is kind of the                                 reason why rust can target a lot of                                 things so it was like the improvements                                 that the clang team makes to LLVM to                                 improve their code improves for us as                                 well so you have another question                                 yeah                                 so the talk after mine will go way                                 further in depth anyone on that but yeah                                 like I I mean I would say our ultimate                                 goal is to read our entire code base of                                 all scenes C++ as much as possible like                                 one reason why we really dislike open                                 those cells because open SSL has system                                 dependencies that are fine on Linux and                                 Mac but our Paolo Matic on Windows so we                                 just use rust LS and yeah it it makes it                                 so that yeah so it's it's Adam and C but                                 it's fine because it's in a nice rust                                 package that's primarily used from rust                                 so we don't have way for your poems with                                 anomalous or so is a quick question                                 what kind of bad change okay yeah so so                                 we definitely gloss over some of the the                                 problems with rust because like so so                                 rust like makes getting dependencies                                 really really easy and there's a thing                                 called builder s which means it'll like                                 it can do anything at once so most                                 people use it for building C++ or                                 downloading a git repo to then compile                                 it or something like that but they call                                 so just like take your SSH keys and                                 upload them somewhere and nothing really                                 stops that and so that is a problem that                                 like everyone's aware of but no one has                                 a rear fix yet but there's like some                                 really promising things there's a really                                 cool thing that just got open-source                                 called wat which is web assembly                                 something-something but it's basically                                 procedural macros or way that you can                                 generate code and and do all kinds of                                 compile time transformations of code and                                 what they he actually did was put into                                 wasum so that all Son the the piece of                                 macros or sandbox and they can't                                 actually access the system because like                                 normally they can just like write files                                 or read files or do whatever they want                                 but now I can only act interact via                                 Wasson so it actually makes it safe                                 so if procedural macros can do that and                                 become official and then they can do the                                 same thing for build RS that would                                 actually be really great but there's no                                 point for that any time in your in term                                 as far as I'm aware awesome thanks yeah                                 great yeah let's a lot a round of                                 applause week                                 [Applause]
YouTube URL: https://www.youtube.com/watch?v=lpOg2nl3kr0


