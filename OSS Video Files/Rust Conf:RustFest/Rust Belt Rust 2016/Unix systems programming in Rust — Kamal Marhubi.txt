Title: Unix systems programming in Rust â€” Kamal Marhubi
Publication date: 2017-10-25
Playlist: Rust Belt Rust 2016
Description: 
	Materials for this talk are available at http://www.rust-belt-rust.com/kamal-marhubi-system-programming-16x9.pdf

Systems programming often seems scary. To start with, you need to know C. Debugging obscure pointer issues is hard, and nobody will tell you if you're passing the wrong type of flag to a function. I've been doing a bunch of systems programming in Rust recently, and I've found it a lot easier, more accessible, and more fun.

http://www.rust-belt-rust.com/
Captions: 
	00:00:04,640 --> 00:00:10,219
hi everyone so I'm gonna be talking

00:00:08,059 --> 00:00:14,170
about UNIX systems programming in rust

00:00:10,219 --> 00:00:17,660
and why I think it's really awesome so

00:00:14,170 --> 00:00:19,070
we all I assume agree that rust is

00:00:17,660 --> 00:00:20,630
awesome right we're all here we're at

00:00:19,070 --> 00:00:24,860
Rust Belt rust

00:00:20,630 --> 00:00:27,890
this is Rust Belt rust my analysis shows

00:00:24,860 --> 00:00:30,920
that this is the twice as rusty as any

00:00:27,890 --> 00:00:33,469
other rust conference which makes it the

00:00:30,920 --> 00:00:35,480
rustiest rust conference ever so we're

00:00:33,469 --> 00:00:38,600
all agreed right rust is awesome

00:00:35,480 --> 00:00:40,370
yeah and we are in the last session and

00:00:38,600 --> 00:00:41,750
you know I'm gonna direct attention away

00:00:40,370 --> 00:00:44,060
from me to the organizers for five

00:00:41,750 --> 00:00:45,260
seconds and just say thanks so much for

00:00:44,060 --> 00:00:48,290
organizing this this has been really

00:00:45,260 --> 00:00:51,380
great okay now back to me

00:00:48,290 --> 00:00:53,510
so the rescue truck comes from ever we

00:00:51,380 --> 00:00:55,399
agreed that rust is awesome but I want

00:00:53,510 --> 00:00:57,410
to convince you that systems programming

00:00:55,399 --> 00:00:59,120
and rust is awesome in fact I think

00:00:57,410 --> 00:01:01,160
systems programming is awesome

00:00:59,120 --> 00:01:05,059
even without rust but Rhett just makes

00:01:01,160 --> 00:01:06,649
it that much better but to get started

00:01:05,059 --> 00:01:09,040
we have to start with you know what do I

00:01:06,649 --> 00:01:11,690
mean by UNIX systems programming and

00:01:09,040 --> 00:01:12,950
I've got a tongue-in-cheek definition

00:01:11,690 --> 00:01:14,510
which is where you spend more time

00:01:12,950 --> 00:01:19,450
looking at man pages then it's Stack

00:01:14,510 --> 00:01:21,320
Overflow this is like extra useful

00:01:19,450 --> 00:01:22,940
because it also means that you don't

00:01:21,320 --> 00:01:26,840
need an internet connection to kind of

00:01:22,940 --> 00:01:30,320
make a good deal of progress but like

00:01:26,840 --> 00:01:31,640
more seriously systems programming

00:01:30,320 --> 00:01:35,110
especially UNIX systems program I think

00:01:31,640 --> 00:01:38,150
is a lot about making system calls and

00:01:35,110 --> 00:01:41,000
dealing with the interface that we have

00:01:38,150 --> 00:01:44,150
to the the kernel of the OS that we're

00:01:41,000 --> 00:01:45,409
running on so what our system calls I

00:01:44,150 --> 00:01:46,549
like to think of system calls as writing

00:01:45,409 --> 00:01:49,580
a letter to the kernel

00:01:46,549 --> 00:01:53,299
it's like dear Colonel please open this

00:01:49,580 --> 00:01:56,509
jiff for me thanks and then the kernel

00:01:53,299 --> 00:01:58,009
gets back to us with this jiff saw

00:01:56,509 --> 00:01:59,829
earlier today I'm not going to leave it

00:01:58,009 --> 00:02:04,280
up for too long because it's dangerous

00:01:59,829 --> 00:02:05,930
but the the the key thing here is that

00:02:04,280 --> 00:02:08,869
there are a lot of operations that is

00:02:05,930 --> 00:02:10,280
not safe or secure for our programs to

00:02:08,869 --> 00:02:12,439
do and we have to ask the kernel to do

00:02:10,280 --> 00:02:13,849
them for us opening files make sure that

00:02:12,439 --> 00:02:16,580
we have the right permissions and so on

00:02:13,849 --> 00:02:19,040
so we make a system call

00:02:16,580 --> 00:02:20,840
dear colonel and then it does all the

00:02:19,040 --> 00:02:23,180
checking and makes it that we have that

00:02:20,840 --> 00:02:26,900
file open there it is again for a couple

00:02:23,180 --> 00:02:29,030
seconds so here are a couple of example

00:02:26,900 --> 00:02:30,680
system calls like they're not that alien

00:02:29,030 --> 00:02:33,470
if you haven't done systems programming

00:02:30,680 --> 00:02:35,780
they should still be familiar when we're

00:02:33,470 --> 00:02:39,350
doing file operations we have an open

00:02:35,780 --> 00:02:40,550
system call which we just saw it doesn't

00:02:39,350 --> 00:02:41,960
actually give you a diff it would give

00:02:40,550 --> 00:02:43,310
you a file descriptor and you'd have to

00:02:41,960 --> 00:02:46,790
go and do a bunch of other stuff to get

00:02:43,310 --> 00:02:48,440
the jiff but you know I think it

00:02:46,790 --> 00:02:50,000
illustrates well enough but open

00:02:48,440 --> 00:02:53,090
readwrite these are you know all things

00:02:50,000 --> 00:02:55,280
we expect to do with files processes if

00:02:53,090 --> 00:02:57,380
we have a shell it's gonna fork it's

00:02:55,280 --> 00:02:59,030
gonna exec the new process it's going to

00:02:57,380 --> 00:03:01,190
you're probably gonna have to kill it at

00:02:59,030 --> 00:03:05,510
some point because it's broken

00:03:01,190 --> 00:03:07,340
in networking you know sockets and you

00:03:05,510 --> 00:03:09,440
create a socket with socket you connect

00:03:07,340 --> 00:03:11,330
you listen you accept a connection these

00:03:09,440 --> 00:03:15,440
are all system calls that should sound

00:03:11,330 --> 00:03:18,890
familiar if you've done programming that

00:03:15,440 --> 00:03:21,050
is involving networking or files but

00:03:18,890 --> 00:03:22,700
they you may not recognize them as being

00:03:21,050 --> 00:03:26,750
something that kernel knows especially

00:03:22,700 --> 00:03:28,370
about but they are so to give a few

00:03:26,750 --> 00:03:29,780
examples before going further into why I

00:03:28,370 --> 00:03:32,480
think rust is great here are a couple of

00:03:29,780 --> 00:03:35,660
examples of things I've done or worked

00:03:32,480 --> 00:03:37,880
on in rust in like the UNIX systems the

00:03:35,660 --> 00:03:39,620
kind of world I've just been describing

00:03:37,880 --> 00:03:42,140
so one is this thing called container

00:03:39,620 --> 00:03:45,470
thing because I'm great at names I'm

00:03:42,140 --> 00:03:47,300
just gonna very quickly do a demo but

00:03:45,470 --> 00:03:49,490
basically the idea is containers like

00:03:47,300 --> 00:03:58,490
docker require route and I don't like

00:03:49,490 --> 00:04:00,800
route so target containing thing this is

00:03:58,490 --> 00:04:04,540
running so the route FS directory there

00:04:00,800 --> 00:04:09,080
is an extracted Debian docker image and

00:04:04,540 --> 00:04:12,200
I'm now route inside a little well if I

00:04:09,080 --> 00:04:13,970
can type I'm now route inside a little

00:04:12,200 --> 00:04:16,790
container but I didn't need route to get

00:04:13,970 --> 00:04:19,250
into the container which is great I have

00:04:16,790 --> 00:04:21,230
like ideas for where I'm going to use

00:04:19,250 --> 00:04:23,630
this to allow using docker and Travis CI

00:04:21,230 --> 00:04:26,300
sometime soon hopefully without it being

00:04:23,630 --> 00:04:28,640
slow but this is a cool little thing

00:04:26,300 --> 00:04:30,470
like you end up

00:04:28,640 --> 00:04:33,140
learning a lot when you do something

00:04:30,470 --> 00:04:36,290
like this about how all of these weird

00:04:33,140 --> 00:04:37,700
systems are put together so that's my

00:04:36,290 --> 00:04:40,400
little project containing thing which

00:04:37,700 --> 00:04:43,670
I've just come back to after months of

00:04:40,400 --> 00:04:46,250
hiatus Ruby stacked rates this if anyone

00:04:43,670 --> 00:04:49,910
was at the rest conf this came up

00:04:46,250 --> 00:04:51,470
briefly in Julia Evans is closing

00:04:49,910 --> 00:04:55,190
keynote I wasn't able to be there but I

00:04:51,470 --> 00:04:57,950
did feature in one slide that's me

00:04:55,190 --> 00:05:04,040
I know rust Julia wrote her prototype in

00:04:57,950 --> 00:05:06,680
C and C is hard and she had reached a

00:05:04,040 --> 00:05:11,330
point where things were becoming more

00:05:06,680 --> 00:05:13,040
and more hairy and I keep talking about

00:05:11,330 --> 00:05:14,960
rust I guess so she asked me if I could

00:05:13,040 --> 00:05:16,370
help and so we translated it into rust

00:05:14,960 --> 00:05:19,130
and then it became much easier to work

00:05:16,370 --> 00:05:25,700
with and I can show you what that looks

00:05:19,130 --> 00:05:27,080
like too so here I've got some like

00:05:25,700 --> 00:05:28,460
silly I don't know Ruby so this is like

00:05:27,080 --> 00:05:31,970
the best I can do

00:05:28,460 --> 00:05:33,920
it's like just some recursive calls and

00:05:31,970 --> 00:05:36,650
they sleep and stuff and what the Ruby

00:05:33,920 --> 00:05:39,080
stacktrace program does is it goes and

00:05:36,650 --> 00:05:43,880
like routes around inside the memory of

00:05:39,080 --> 00:05:47,720
the Ruby process and reads out the Ruby

00:05:43,880 --> 00:05:50,060
stack and so it's able to like see where

00:05:47,720 --> 00:05:51,800
time is being spent in that Ruby process

00:05:50,060 --> 00:05:52,970
it also is able to do flame graphs but

00:05:51,800 --> 00:05:55,340
that's a bit more involved so I'm not

00:05:52,970 --> 00:05:56,930
gonna demo here but this is like kind of

00:05:55,340 --> 00:05:58,700
sampling I don't know every 100

00:05:56,930 --> 00:06:06,710
milliseconds of like what is that Ruby

00:05:58,700 --> 00:06:08,150
process doing that go away okay so silly

00:06:06,710 --> 00:06:09,470
things are okay too so those are like

00:06:08,150 --> 00:06:11,510
kind of serious projects right that

00:06:09,470 --> 00:06:15,050
could be useful for build systems or in

00:06:11,510 --> 00:06:16,400
production or something but at bang bang

00:06:15,050 --> 00:06:19,070
con which is this really awesome

00:06:16,400 --> 00:06:20,900
conference in New York which is like

00:06:19,070 --> 00:06:23,159
lots of 10-minute talks of people

00:06:20,900 --> 00:06:26,039
sharing something exciting about

00:06:23,159 --> 00:06:27,839
about computers I on stage broke my

00:06:26,039 --> 00:06:32,159
computer with pipes with a rest program

00:06:27,839 --> 00:06:34,019
by invoking the out of memory killer by

00:06:32,159 --> 00:06:35,789
exhausting the amount of memory my

00:06:34,019 --> 00:06:38,189
computer had I'm not going to demo that

00:06:35,789 --> 00:06:41,369
one because that actually like breaks my

00:06:38,189 --> 00:06:42,689
computer I'm using it I did break my

00:06:41,369 --> 00:06:43,739
computer onstage because it was the end

00:06:42,689 --> 00:06:47,580
of the talk here in the middle of the

00:06:43,739 --> 00:06:48,989
talk it's dangerous but silly things are

00:06:47,580 --> 00:06:52,429
also an excellent way to learn a lot

00:06:48,989 --> 00:06:52,429
more about how your computers work and

00:06:52,489 --> 00:06:57,240
the reason I think rust is really great

00:06:54,899 --> 00:06:59,209
for systems programming comes down to a

00:06:57,240 --> 00:07:01,649
few things

00:06:59,209 --> 00:07:02,849
we're like familiar with these slogans a

00:07:01,649 --> 00:07:06,569
little bit like rust lets you be

00:07:02,849 --> 00:07:08,490
fearless and a good analogy or not

00:07:06,569 --> 00:07:10,289
analogy example I think of this is when

00:07:08,490 --> 00:07:12,809
you know we were working on the Ruby

00:07:10,289 --> 00:07:15,349
stacktrace program and Julia had reached

00:07:12,809 --> 00:07:18,259
this point where she was getting hard

00:07:15,349 --> 00:07:22,709
also I think Russ is really convenient

00:07:18,259 --> 00:07:24,209
I'll go into a few ways that a few

00:07:22,709 --> 00:07:29,249
examples of what I mean by that in a bit

00:07:24,209 --> 00:07:30,419
but if you've ever written enough of a C

00:07:29,249 --> 00:07:33,769
program where you'd like a hash table

00:07:30,419 --> 00:07:37,860
like that's the opposite of convenient

00:07:33,769 --> 00:07:42,360
then also rust because of the like new

00:07:37,860 --> 00:07:44,969
runtime and having like direct access to

00:07:42,360 --> 00:07:46,949
what's going on in the C world we also

00:07:44,969 --> 00:07:50,069
get under transparent access to the

00:07:46,949 --> 00:07:53,039
underlying OS we we can kind of bypass

00:07:50,069 --> 00:07:54,959
the standard library so to go into a few

00:07:53,039 --> 00:07:58,379
examples of what I mean by rust letting

00:07:54,959 --> 00:08:00,749
us be fearless so systems programming is

00:07:58,379 --> 00:08:02,339
traditionally done in C you know there's

00:08:00,749 --> 00:08:04,769
millions and millions and millions of

00:08:02,339 --> 00:08:06,419
lines of C code and there are a bunch of

00:08:04,769 --> 00:08:08,369
things that are really scary about C if

00:08:06,419 --> 00:08:09,839
you don't actually know C like me so

00:08:08,369 --> 00:08:11,099
there was a person that on the first day

00:08:09,839 --> 00:08:14,129
who said they spent 20 years writing

00:08:11,099 --> 00:08:17,219
Harry C programs that's not me and

00:08:14,129 --> 00:08:21,209
that's not lots of people and getting

00:08:17,219 --> 00:08:23,729
like simple things like Eric well simple

00:08:21,209 --> 00:08:26,039
but error checking is hard but error

00:08:23,729 --> 00:08:28,849
checking is much easier and rust because

00:08:26,039 --> 00:08:31,229
of the result type then in C where its

00:08:28,849 --> 00:08:33,080
while it depends on the library and the

00:08:31,229 --> 00:08:35,330
program that you're using exactly how

00:08:33,080 --> 00:08:37,280
handle there's no standard memory

00:08:35,330 --> 00:08:39,980
management this is kind of the main

00:08:37,280 --> 00:08:44,150
reason we've translated the Ruby stack

00:08:39,980 --> 00:08:46,010
trace program to rest was because it has

00:08:44,150 --> 00:08:47,480
a lot of strings to do which are the

00:08:46,010 --> 00:08:49,670
names of functions and the names of

00:08:47,480 --> 00:08:53,090
files and it's easy to allocate memory

00:08:49,670 --> 00:08:54,770
in C malloc but safely deallocating that

00:08:53,090 --> 00:08:57,650
memory is another story and so if you

00:08:54,770 --> 00:09:01,490
want your program to kind of not explode

00:08:57,650 --> 00:09:03,740
you're like run out of memory not having

00:09:01,490 --> 00:09:05,390
to worry about that as much as great so

00:09:03,740 --> 00:09:07,280
Russ lets us allocate and free memory

00:09:05,390 --> 00:09:09,650
and also not have these dangling

00:09:07,280 --> 00:09:11,630
pointers because you know calling free

00:09:09,650 --> 00:09:14,240
at the wrong time and then D referencing

00:09:11,630 --> 00:09:15,830
a pointer and then lucky if you're lucky

00:09:14,240 --> 00:09:23,420
you get a seg fault if you're unlucky

00:09:15,830 --> 00:09:25,520
I don't even just don't so in addition

00:09:23,420 --> 00:09:27,910
to being - allowing us to be fearless

00:09:25,520 --> 00:09:30,200
like rest is really convenient and

00:09:27,910 --> 00:09:32,090
here's a really great example as

00:09:30,200 --> 00:09:34,460
compared to C Russ Russ makes working

00:09:32,090 --> 00:09:35,540
with strings like not painful like you

00:09:34,460 --> 00:09:37,520
don't have to remember if you're

00:09:35,540 --> 00:09:40,970
supposed to stir a copy or stir and copy

00:09:37,520 --> 00:09:43,400
or stir mm-hmm or whatever all of those

00:09:40,970 --> 00:09:45,260
other stair things are stir talk to

00:09:43,400 --> 00:09:46,430
split by spaces and like some of them

00:09:45,260 --> 00:09:47,570
are safe and some of them are thread

00:09:46,430 --> 00:09:49,010
safe and some of them are just really

00:09:47,570 --> 00:09:52,040
really don't do that because you're

00:09:49,010 --> 00:09:56,990
going to like have buffer overflows and

00:09:52,040 --> 00:10:00,380
it's just hard in Russell and we have

00:09:56,990 --> 00:10:02,300
strings and stirs we can split we can up

00:10:00,380 --> 00:10:04,310
case low case you know all of these

00:10:02,300 --> 00:10:07,790
wonderful things that you want to do

00:10:04,310 --> 00:10:09,260
with strings they're easy hash tables I

00:10:07,790 --> 00:10:14,600
already mentioned this but but really

00:10:09,260 --> 00:10:19,220
hash tables like just having hash tables

00:10:14,600 --> 00:10:21,050
or maps available to you is you know

00:10:19,220 --> 00:10:22,610
there's a point in when I've written

00:10:21,050 --> 00:10:24,260
like little bits of C there's a point

00:10:22,610 --> 00:10:25,040
where I kind of am inventing my own

00:10:24,260 --> 00:10:28,190
Assos

00:10:25,040 --> 00:10:30,220
a sock kind of list of key value pairs

00:10:28,190 --> 00:10:32,810
and going through it and then it's

00:10:30,220 --> 00:10:34,100
annoying and I wish I had hash tables

00:10:32,810 --> 00:10:37,250
but I don't know how to put hash tables

00:10:34,100 --> 00:10:39,639
in C because I don't know C rust just

00:10:37,250 --> 00:10:41,079
obviates all of

00:10:39,639 --> 00:10:43,509
and then of course this is like where

00:10:41,079 --> 00:10:47,040
everyone like can in the room can come

00:10:43,509 --> 00:10:48,670
in is like crates aw do you want some

00:10:47,040 --> 00:10:50,740
functionality that's not in the standard

00:10:48,670 --> 00:10:52,990
library there's probably a crate that

00:10:50,740 --> 00:10:54,999
will handle it in a you know best

00:10:52,990 --> 00:10:57,749
practices kind of way there's like a map

00:10:54,999 --> 00:11:00,790
crates and signal handling crates and

00:10:57,749 --> 00:11:03,639
crates for all kinds of things and this

00:11:00,790 --> 00:11:05,679
I think that the ability to use somebody

00:11:03,639 --> 00:11:08,499
else's library by adding one line to a

00:11:05,679 --> 00:11:13,869
config file that's also really really

00:11:08,499 --> 00:11:15,249
convenient so moving on to the next

00:11:13,869 --> 00:11:17,589
thing I think is great which is that

00:11:15,249 --> 00:11:21,790
rust allows transparent access to the

00:11:17,589 --> 00:11:26,230
underlying OS and in the standard

00:11:21,790 --> 00:11:30,249
library we do have STD OS UNIX this is a

00:11:26,230 --> 00:11:34,050
kind of grab bag of ways to add UNIX

00:11:30,249 --> 00:11:36,819
extensions to various types that get

00:11:34,050 --> 00:11:41,339
file descriptors from files and sockets

00:11:36,819 --> 00:11:44,529
it lets us do some extra things with

00:11:41,339 --> 00:11:46,629
processes to like set up the environment

00:11:44,529 --> 00:11:52,779
a bit more specifically before we run a

00:11:46,629 --> 00:11:53,860
command oh yeah strings in UNIX are byte

00:11:52,779 --> 00:11:55,660
strings and so there's like

00:11:53,860 --> 00:11:57,730
interoperability interoperability

00:11:55,660 --> 00:12:00,819
between Oster and stir that isn't

00:11:57,730 --> 00:12:02,290
available or or between OS string and

00:12:00,819 --> 00:12:04,329
bytes that's not available on Windows

00:12:02,290 --> 00:12:07,689
because of the WTF thing that I still

00:12:04,329 --> 00:12:10,929
don't understand so that's great but we

00:12:07,689 --> 00:12:12,160
can actually go we can get around the

00:12:10,929 --> 00:12:14,110
standard library and get even you know

00:12:12,160 --> 00:12:17,550
closer access to what's going on below

00:12:14,110 --> 00:12:17,550
because we have this fantastic

00:12:18,360 --> 00:12:22,809
compatibility like we can have C

00:12:21,339 --> 00:12:26,860
functions that are called transparently

00:12:22,809 --> 00:12:30,100
from our stuff we can have structs that

00:12:26,860 --> 00:12:32,470
mirror the C struct exactly and just

00:12:30,100 --> 00:12:33,910
call directly into Lipsy or into

00:12:32,470 --> 00:12:36,429
whatever other c libraries that are

00:12:33,910 --> 00:12:39,129
helping us do what we need to do so this

00:12:36,429 --> 00:12:41,860
lets us drop down below the lip standard

00:12:39,129 --> 00:12:44,699
and I'd be completely remiss here if I

00:12:41,860 --> 00:12:44,699
didn't bring up

00:12:45,570 --> 00:12:54,550
miss ordering my slides sorry so

00:12:51,300 --> 00:12:56,230
examples of where the dropping down

00:12:54,550 --> 00:12:58,300
below Lib standard come in is where we

00:12:56,230 --> 00:13:01,089
want to go more specific than just UNIX

00:12:58,300 --> 00:13:02,560
versus not UNIX but into specific things

00:13:01,089 --> 00:13:05,110
about which flavor of Unix

00:13:02,560 --> 00:13:09,390
so the examples that I gave with

00:13:05,110 --> 00:13:12,520
containing thing is using these kind of

00:13:09,390 --> 00:13:17,370
container or oriented system calls like

00:13:12,520 --> 00:13:20,230
unshare which does very weird things I

00:13:17,370 --> 00:13:22,990
highly recommend reading the I think

00:13:20,230 --> 00:13:25,089
there's a series on the Linux weekly

00:13:22,990 --> 00:13:27,520
news about what all this namespace stuff

00:13:25,089 --> 00:13:29,770
is it's kind of mind-blowing

00:13:27,520 --> 00:13:31,690
there's mount which was how I was able

00:13:29,770 --> 00:13:34,120
to change the view of the file system

00:13:31,690 --> 00:13:36,150
inside the container in the Ruby stack

00:13:34,120 --> 00:13:38,350
trace we're using this really like I

00:13:36,150 --> 00:13:40,510
don't know how I feel about this system

00:13:38,350 --> 00:13:43,839
call it lets you just read another

00:13:40,510 --> 00:13:46,930
processes memory it's just like hey I

00:13:43,839 --> 00:13:50,290
want to read like 10 kilobytes out of

00:13:46,930 --> 00:13:52,570
that part of that person's memory and

00:13:50,290 --> 00:13:53,770
then you can just read it and then you

00:13:52,570 --> 00:13:56,040
can do whatever you want so that's what

00:13:53,770 --> 00:13:58,990
that stack program is doing it's like

00:13:56,040 --> 00:14:01,089
let's just copy that Ruby memory over

00:13:58,990 --> 00:14:02,320
here and then now we can do what

00:14:01,089 --> 00:14:05,080
everyone we can figure out what was

00:14:02,320 --> 00:14:07,150
going on but this is where I was about

00:14:05,080 --> 00:14:09,010
to go which is I'd be remiss if I didn't

00:14:07,150 --> 00:14:09,550
mention Nix which is a library I helped

00:14:09,010 --> 00:14:12,490
maintain

00:14:09,550 --> 00:14:18,910
among others one of whom is in this room

00:14:12,490 --> 00:14:20,980
and missing but anyway this is a library

00:14:18,910 --> 00:14:25,450
that rusta Phi's Lipsy if you've written

00:14:20,980 --> 00:14:30,880
C systems programs there's like some

00:14:25,450 --> 00:14:33,130
slightly annoying parts where error

00:14:30,880 --> 00:14:34,920
handling is not as nice as you would

00:14:33,130 --> 00:14:37,360
like especially from the rough side

00:14:34,920 --> 00:14:40,120
that's a question for the room actually

00:14:37,360 --> 00:14:43,810
what is the right word for this turning

00:14:40,120 --> 00:14:46,450
something more rusty like rusty 5x it

00:14:43,810 --> 00:14:49,720
dies anyway like making lip see nicer to

00:14:46,450 --> 00:14:53,160
use from rust right so the example I

00:14:49,720 --> 00:14:55,370
mentioned there result instead of like

00:14:53,160 --> 00:14:57,890
returning minus 1 and look

00:14:55,370 --> 00:15:01,490
err no and you know maybe you forget do

00:14:57,890 --> 00:15:03,140
that and things go wrong in some sense

00:15:01,490 --> 00:15:05,360
like we kind of read the man pages so

00:15:03,140 --> 00:15:07,880
you don't have to because there are some

00:15:05,360 --> 00:15:09,560
cases where like the exact return value

00:15:07,880 --> 00:15:12,940
that ignites an error is like naught

00:15:09,560 --> 00:15:15,920
minus one maybe maybe it's like you know

00:15:12,940 --> 00:15:18,440
plus one I don't know but they exist and

00:15:15,920 --> 00:15:21,050
it's like it's Harry we translate it to

00:15:18,440 --> 00:15:21,980
a result having read the man pages you

00:15:21,050 --> 00:15:25,610
probably should read the man pages

00:15:21,980 --> 00:15:28,280
though like really if you don't want to

00:15:25,610 --> 00:15:29,840
break your stuff and we use Rus types

00:15:28,280 --> 00:15:32,510
where they make sense so just a couple

00:15:29,840 --> 00:15:34,970
of examples of this is tuples instead of

00:15:32,510 --> 00:15:36,830
into two for pipe as an example so and

00:15:34,970 --> 00:15:39,260
see if you want to create a pipe where

00:15:36,830 --> 00:15:41,240
you get to file the scripters you've

00:15:39,260 --> 00:15:42,500
liked you know pipe and then you have to

00:15:41,240 --> 00:15:44,960
create an array on the stack and then

00:15:42,500 --> 00:15:47,270
check that it's minus one and check

00:15:44,960 --> 00:15:49,400
check if it failed and then return minus

00:15:47,270 --> 00:15:54,160
one all of that in rust is just like try

00:15:49,400 --> 00:15:57,160
pipe or in rust soon try it's a pipe

00:15:54,160 --> 00:16:00,200
with an upwards intonation at the end

00:15:57,160 --> 00:16:01,550
and this is like you know you just get

00:16:00,200 --> 00:16:03,110
your read write pointers you don't have

00:16:01,550 --> 00:16:05,030
to remember that the zero well you have

00:16:03,110 --> 00:16:07,460
to remember which one is the read and

00:16:05,030 --> 00:16:11,240
the write I hope I got those right yeah

00:16:07,460 --> 00:16:14,140
I did but you know the referring to like

00:16:11,240 --> 00:16:18,320
pipe FD 0 and pipe FD 1 kind of gets old

00:16:14,140 --> 00:16:19,820
so I typically end up renaming them as

00:16:18,320 --> 00:16:22,820
read and write anyway it's great to do

00:16:19,820 --> 00:16:24,560
that in one line instead of six this is

00:16:22,820 --> 00:16:26,900
one of my favorites is using slices

00:16:24,560 --> 00:16:31,010
instead of void star and size pairs so

00:16:26,900 --> 00:16:32,510
this is like in system calls like read

00:16:31,010 --> 00:16:34,430
and write where you're passing a bunch

00:16:32,510 --> 00:16:38,480
of memory over and something supposed to

00:16:34,430 --> 00:16:40,400
happen to it or in like that process VM

00:16:38,480 --> 00:16:41,870
read v1 I gave as an example where

00:16:40,400 --> 00:16:43,280
you're saying please get me that much

00:16:41,870 --> 00:16:46,220
memory from that other process it's all

00:16:43,280 --> 00:16:48,380
like void star size pairs and actually

00:16:46,220 --> 00:16:52,130
I'm just gonna go on a little aside here

00:16:48,380 --> 00:16:54,110
because like I love slices like I think

00:16:52,130 --> 00:16:57,470
that slices are one of the best things

00:16:54,110 --> 00:17:00,740
in rust they're a standard way to pass

00:16:57,470 --> 00:17:03,899
pieces of buffers

00:17:00,740 --> 00:17:07,079
that aren't necessarily yours to someone

00:17:03,899 --> 00:17:08,850
else and everything just works out like

00:17:07,079 --> 00:17:10,980
standard means it's ecosystem wide this

00:17:08,850 --> 00:17:13,530
is so so so important I've like done

00:17:10,980 --> 00:17:17,760
some C++ programming and there's no

00:17:13,530 --> 00:17:21,169
standard there are just you know in

00:17:17,760 --> 00:17:23,370
Google code there's string piece in I

00:17:21,169 --> 00:17:25,380
don't know what's in Mozilla code by I

00:17:23,370 --> 00:17:26,339
did a little bit of captain proto code

00:17:25,380 --> 00:17:28,679
and there's like an array pointer

00:17:26,339 --> 00:17:30,120
they're all Stan's start length or start

00:17:28,679 --> 00:17:31,169
end pairs but they're not standard

00:17:30,120 --> 00:17:32,760
you're gonna have to write all these

00:17:31,169 --> 00:17:34,770
inter conversions if you ever want to

00:17:32,760 --> 00:17:37,230
reach across into a different part of

00:17:34,770 --> 00:17:42,960
the ecosystem and that's just really

00:17:37,230 --> 00:17:44,520
annoying C++ 17 will hopefully have a

00:17:42,960 --> 00:17:49,049
string view which will be kind of like a

00:17:44,520 --> 00:17:50,929
stare slice that's 2017 it still won't

00:17:49,049 --> 00:17:54,330
protect you from lifetime mishaps and

00:17:50,929 --> 00:17:59,190
the fact that is 2017 and C++ is gonna

00:17:54,330 --> 00:18:00,750
be by then 34 years old or something you

00:17:59,190 --> 00:18:02,640
won't actually be able to use it if

00:18:00,750 --> 00:18:05,520
you're interpreting with any other code

00:18:02,640 --> 00:18:08,210
Russ had slices from the beginning this

00:18:05,520 --> 00:18:10,470
means that this idea of slices of

00:18:08,210 --> 00:18:14,820
transparently being able to pass memory

00:18:10,470 --> 00:18:16,350
across library boundaries across into

00:18:14,820 --> 00:18:19,500
you know some crate you just got out of

00:18:16,350 --> 00:18:21,570
crates IO being able to use a part of a

00:18:19,500 --> 00:18:22,679
memory mapped file and just pass it to

00:18:21,570 --> 00:18:24,600
some crate that knows nothing about

00:18:22,679 --> 00:18:27,179
memory map files that just works because

00:18:24,600 --> 00:18:29,909
we had slices from the very start and I

00:18:27,179 --> 00:18:31,770
this like a bit extreme but I think if

00:18:29,909 --> 00:18:33,840
all ownership like the whole like borrow

00:18:31,770 --> 00:18:39,030
check stuff got us was a safe way to

00:18:33,840 --> 00:18:41,130
pass bytes to other functions without

00:18:39,030 --> 00:18:44,130
needing to allocate and copy and without

00:18:41,130 --> 00:18:45,600
needing to worry that we're gonna shoot

00:18:44,130 --> 00:18:47,760
ourselves in the foot by having some

00:18:45,600 --> 00:18:48,929
kind of dangling pointer thing I think

00:18:47,760 --> 00:18:51,539
it would have been worth it all of that

00:18:48,929 --> 00:18:53,340
borrow checking pain of course it gets

00:18:51,539 --> 00:18:57,600
us so much more so that's like pretty

00:18:53,340 --> 00:18:59,730
great end of a side so Nix is great and

00:18:57,600 --> 00:19:01,210
I think you should check it out it's on

00:18:59,730 --> 00:19:05,340
crates

00:19:01,210 --> 00:19:07,990
and now that like I've hopefully

00:19:05,340 --> 00:19:11,350
convinced you a little bit that you

00:19:07,990 --> 00:19:12,280
would like to explore this systems

00:19:11,350 --> 00:19:13,900
programming world

00:19:12,280 --> 00:19:18,790
I want to give you a couple of ideas of

00:19:13,900 --> 00:19:22,020
how you might get started so this is not

00:19:18,790 --> 00:19:24,790
a rust thing but I wrote a workshop for

00:19:22,020 --> 00:19:27,430
some conference strangely maybe a couple

00:19:24,790 --> 00:19:29,110
of years ago yes which is building a

00:19:27,430 --> 00:19:33,280
shell from scratch and so you know you

00:19:29,110 --> 00:19:36,340
go from zero to having the ability to do

00:19:33,280 --> 00:19:38,740
like LS pipe to uglies WCHL or other

00:19:36,340 --> 00:19:41,140
such things like that the materials are

00:19:38,740 --> 00:19:43,000
in C but if you ignore all the C stuff

00:19:41,140 --> 00:19:47,470
and just use rust and nicks it'll be

00:19:43,000 --> 00:19:49,030
easier because yeah I have to supply a

00:19:47,470 --> 00:19:50,230
bunch of code to work with strings cuz I

00:19:49,030 --> 00:19:53,770
didn't want people in my two-hour

00:19:50,230 --> 00:19:57,340
workshop to be like I can't parse like

00:19:53,770 --> 00:19:59,830
come hence but with rust you'd be able

00:19:57,340 --> 00:20:04,300
to you know split and all kinds of nice

00:19:59,830 --> 00:20:05,950
stuff going beyond that just try some

00:20:04,300 --> 00:20:07,450
other systems programming in yeah in

00:20:05,950 --> 00:20:08,860
rust with NYX I think Nick's does make

00:20:07,450 --> 00:20:12,610
it quite a bit nicer so that's why I'm

00:20:08,860 --> 00:20:14,230
keep kind of keep pitching it and you

00:20:12,610 --> 00:20:15,670
can learn a lot by being silly the pipes

00:20:14,230 --> 00:20:20,260
thing I mentioned where I broke my

00:20:15,670 --> 00:20:24,400
computer on stage by exhausting the

00:20:20,260 --> 00:20:27,010
memory of the system via pipes like I

00:20:24,400 --> 00:20:29,080
learned an incredible amount of weird

00:20:27,010 --> 00:20:32,800
but stuff that's actually coming useful

00:20:29,080 --> 00:20:34,060
about process memory limits and how

00:20:32,800 --> 00:20:39,850
memory is accounted two different

00:20:34,060 --> 00:20:41,050
processes and how you can ask for pipes

00:20:39,850 --> 00:20:42,940
that are bigger than the normal pipe

00:20:41,050 --> 00:20:44,440
this is like part of how you go you can

00:20:42,940 --> 00:20:46,060
go in this direction of breaking things

00:20:44,440 --> 00:20:49,840
you can say give me bigger pipes please

00:20:46,060 --> 00:20:51,250
colonel and just I think that systems

00:20:49,840 --> 00:20:54,390
programming is often viewed as this like

00:20:51,250 --> 00:20:56,770
really kind of serious

00:20:54,390 --> 00:20:58,240
you know I trimmed my beard because I

00:20:56,770 --> 00:21:01,170
was going through u.s. customs and they

00:20:58,240 --> 00:21:05,280
hate me sorry that's

00:21:01,170 --> 00:21:07,740
remind Middle Eastern names are

00:21:05,280 --> 00:21:09,410
difficult so but you know it's it's

00:21:07,740 --> 00:21:13,800
viewed as like you know serious like

00:21:09,410 --> 00:21:15,330
neckbeard kind of like gray beard really

00:21:13,800 --> 00:21:16,680
we're gonna do some like hard

00:21:15,330 --> 00:21:18,510
programming here you can just be silly

00:21:16,680 --> 00:21:19,770
you can do all this really really silly

00:21:18,510 --> 00:21:21,540
stuff with your systems programming

00:21:19,770 --> 00:21:22,800
you'll learn a lot it doesn't matter if

00:21:21,540 --> 00:21:25,200
you make something that's gonna be like

00:21:22,800 --> 00:21:28,380
super useful and like docker or it's

00:21:25,200 --> 00:21:30,240
gonna be you know if you're building

00:21:28,380 --> 00:21:32,910
some of the awesome things that people

00:21:30,240 --> 00:21:34,050
in this room I'm sure have built you can

00:21:32,910 --> 00:21:37,170
just go off and do something silly and

00:21:34,050 --> 00:21:40,530
you'll still learn a lot and how you can

00:21:37,170 --> 00:21:41,970
help with this kind of thing I'm just

00:21:40,530 --> 00:21:45,090
gonna kind of have a little country

00:21:41,970 --> 00:21:49,260
tunics wink but more importantly I think

00:21:45,090 --> 00:21:53,490
is do cool things and tell other people

00:21:49,260 --> 00:21:56,310
about them so this could be writing blog

00:21:53,490 --> 00:21:57,780
posts this could be giving talks and I

00:21:56,310 --> 00:21:59,970
think that that's like super super

00:21:57,780 --> 00:22:02,790
useful to this community because we're

00:21:59,970 --> 00:22:06,300
you know rust is starting to get a lot

00:22:02,790 --> 00:22:07,770
of exposure across the interwebs and the

00:22:06,300 --> 00:22:09,990
fact that we're able to have this really

00:22:07,770 --> 00:22:14,040
cool transparent access to all of these

00:22:09,990 --> 00:22:16,350
low-level parts of systems programming I

00:22:14,040 --> 00:22:19,710
think is really great and deserves to be

00:22:16,350 --> 00:22:22,430
out there more because UNIX systems

00:22:19,710 --> 00:22:25,250
programming in rust really is awesome

00:22:22,430 --> 00:22:30,430
thank you

00:22:25,250 --> 00:22:30,430
[Applause]

00:22:30,690 --> 00:22:36,390
I very much come out I'm sorry I

00:22:34,380 --> 00:22:38,160
interrupted I was just gonna say I ran

00:22:36,390 --> 00:22:40,500
well under time I hope so there's time

00:22:38,160 --> 00:22:43,550
for questions if you have questions I

00:22:40,500 --> 00:22:43,550
will bring this microphone to you

00:22:51,830 --> 00:22:56,290
not really a question but I was looking

00:22:53,990 --> 00:22:59,360
at your examples with Nick's OS and and

00:22:56,290 --> 00:23:01,240
having painful flashbacks to my cs4

00:22:59,360 --> 00:23:03,470
hundred operating systems class and

00:23:01,240 --> 00:23:05,750
everything you said that this is awesome

00:23:03,470 --> 00:23:08,480
this is beautiful this is amazing it's

00:23:05,750 --> 00:23:10,250
all true Thanks

00:23:08,480 --> 00:23:11,540
I never did an operating systems class

00:23:10,250 --> 00:23:13,430
so I kind of learned all of this stuff

00:23:11,540 --> 00:23:14,990
via rest so I got to maybe avoid all of

00:23:13,430 --> 00:23:17,800
these painful things you you're having

00:23:14,990 --> 00:23:17,800
flashbacks off

00:23:30,120 --> 00:23:34,620
so a question maybe for you or maybe

00:23:32,580 --> 00:23:36,000
just fort the rest of the room I'm

00:23:34,620 --> 00:23:42,590
wondering if there are other good

00:23:36,000 --> 00:23:46,470
examples of silly systems programs so I

00:23:42,590 --> 00:23:48,179
I've only done silly things with pipes

00:23:46,470 --> 00:23:52,799
so far but I've done many silly things

00:23:48,179 --> 00:23:54,330
with pipes so an extension of the thing

00:23:52,799 --> 00:23:56,400
that I talked about where I kind of blow

00:23:54,330 --> 00:23:59,190
up my computer I I think I found a

00:23:56,400 --> 00:24:02,580
denial of service attack in Linux where

00:23:59,190 --> 00:24:05,460
you can exhaust memory for a program and

00:24:02,580 --> 00:24:07,529
invoke the room killer without any

00:24:05,460 --> 00:24:11,880
privileges whatsoever

00:24:07,529 --> 00:24:14,940
I consider that silly because it's not

00:24:11,880 --> 00:24:16,380
really a useful attack somebody would

00:24:14,940 --> 00:24:18,390
have to run your program on their system

00:24:16,380 --> 00:24:23,070
and then their system will stop working

00:24:18,390 --> 00:24:26,909
but that's like not super useful non

00:24:23,070 --> 00:24:30,029
pipe silly things since fork bombing

00:24:26,909 --> 00:24:33,649
yeah I guess you could you could find

00:24:30,029 --> 00:24:33,649
other ways to exhaust system resources

00:24:34,460 --> 00:24:38,850
let me think I don't so yeah I'd love to

00:24:37,380 --> 00:24:40,110
hear it from other people in the room

00:24:38,850 --> 00:24:43,309
I've only tried to exhaust system

00:24:40,110 --> 00:24:43,309
resources and mostly with pipes

00:24:45,920 --> 00:24:48,970
what is that I

00:24:52,440 --> 00:24:58,870
so port port knocking okay which is the

00:24:56,500 --> 00:25:00,460
idea of having a service instead of

00:24:58,870 --> 00:25:03,550
having it just listening on a port all

00:25:00,460 --> 00:25:05,530
the time you send a sequence of

00:25:03,550 --> 00:25:09,370
connections to different port numbers

00:25:05,530 --> 00:25:10,540
all over the space of the u16 and if you

00:25:09,370 --> 00:25:12,460
send them in the right order like a

00:25:10,540 --> 00:25:14,470
combination code you knock on the right

00:25:12,460 --> 00:25:15,990
doors it'll open up a port somewhere

00:25:14,470 --> 00:25:19,450
else that you can connect to the service

00:25:15,990 --> 00:25:22,540
just like some kind of super-secret like

00:25:19,450 --> 00:25:28,650
backdoor II kind of thing yeah kind of

00:25:22,540 --> 00:25:28,650
silly like but somewhat useful too nice

00:25:29,190 --> 00:25:33,100
yeah that's my I don't know I'm out of

00:25:32,200 --> 00:25:36,040
ideas

00:25:33,100 --> 00:25:38,320
for silly things but that's mostly

00:25:36,040 --> 00:25:39,940
because I'm up here kind of on the spot

00:25:38,320 --> 00:25:41,410
I bet that I could come up with others

00:25:39,940 --> 00:25:44,100
and I bet that somebody else in this

00:25:41,410 --> 00:25:44,100
room could do

00:25:45,500 --> 00:25:50,470
all right if there are no more questions

00:25:47,260 --> 00:25:50,470
thanks again

00:25:50,670 --> 00:25:53,809

YouTube URL: https://www.youtube.com/watch?v=Fe6_LFGiqP0


