Title: Idris (Lightning Talk) â€” Caleb Jones
Publication date: 2017-10-25
Playlist: Rust Belt Rust 2016
Description: 
	
Captions: 
	00:00:05,280 --> 00:00:11,330
I'm talking about Idris here I've got

00:00:08,130 --> 00:00:13,200
some rough and injury site by site so

00:00:11,330 --> 00:00:18,060
there are a few things you'll notice

00:00:13,200 --> 00:00:19,890
immediately we don't use parentheses to

00:00:18,060 --> 00:00:23,430
call functions in a dress you'll have to

00:00:19,890 --> 00:00:25,200
be comfortable with that we define to

00:00:23,430 --> 00:00:27,360
pretty much all the types in interests

00:00:25,200 --> 00:00:31,950
are going to look sort of like enums in

00:00:27,360 --> 00:00:39,300
rust so we can define a generic type up

00:00:31,950 --> 00:00:42,239
here we write it we say like these are

00:00:39,300 --> 00:00:45,420
functions that make a value so this

00:00:42,239 --> 00:00:46,859
takes basically on the rough side that

00:00:45,420 --> 00:00:50,809
says this is a function that takes a tee

00:00:46,859 --> 00:00:50,809
and another list and makes a list and

00:00:51,289 --> 00:00:59,249
type declarations look the same and we

00:00:54,359 --> 00:01:03,719
can do the same kind of code here so

00:00:59,249 --> 00:01:05,460
this is a tweaks on map so we can find

00:01:03,719 --> 00:01:10,079
some types that we can't define and rust

00:01:05,460 --> 00:01:12,210
in Idris so this is a type which not

00:01:10,079 --> 00:01:16,439
only have is generic over some type it's

00:01:12,210 --> 00:01:19,290
generic over a number and here our nail

00:01:16,439 --> 00:01:23,280
here our empty list has 0 things in it

00:01:19,290 --> 00:01:26,789
and our constructor here that makes a

00:01:23,280 --> 00:01:28,799
bigger list takes something and a list

00:01:26,789 --> 00:01:31,890
of n things and makes a list of n plus 1

00:01:28,799 --> 00:01:34,680
things so with this we can say like this

00:01:31,890 --> 00:01:36,479
is a list of three integers and if we

00:01:34,680 --> 00:01:39,649
try to put four integers in there we'll

00:01:36,479 --> 00:01:42,689
get a type error down at the bottom here

00:01:39,649 --> 00:01:44,460
same if we put to its saying zero is not

00:01:42,689 --> 00:01:49,380
equal to 1 because it counts down from

00:01:44,460 --> 00:01:53,789
there we can use this to help ourselves

00:01:49,380 --> 00:01:55,829
out here so over on the right there if

00:01:53,789 --> 00:02:00,090
we want to get the last item of a vector

00:01:55,829 --> 00:02:02,189
in rust we get an option because maybe

00:02:00,090 --> 00:02:03,479
we have an empty list sometimes we know

00:02:02,189 --> 00:02:06,299
we have a list with stuff in it so we

00:02:03,479 --> 00:02:09,179
unwrap it but it's not able to check

00:02:06,299 --> 00:02:12,750
that we're sure they're here we can

00:02:09,179 --> 00:02:14,849
define our list to only take lists that

00:02:12,750 --> 00:02:16,560
have n plus 1 things in them so the

00:02:14,849 --> 00:02:21,870
smallest number they can have is one

00:02:16,560 --> 00:02:29,760
I'll split the possibilities here and we

00:02:21,870 --> 00:02:32,340
say that our function takes let me go

00:02:29,760 --> 00:02:34,380
back a moan um up here the way we define

00:02:32,340 --> 00:02:39,090
functions is basically every function

00:02:34,380 --> 00:02:40,860
starts with a match so we say the sum of

00:02:39,090 --> 00:02:43,709
an empty list is zero the sum of

00:02:40,860 --> 00:02:45,690
something a list with at least one thing

00:02:43,709 --> 00:02:47,250
is that first thing plus other stuff so

00:02:45,690 --> 00:02:50,130
it's like the match block inside our

00:02:47,250 --> 00:02:51,420
function here so here because we know

00:02:50,130 --> 00:02:53,760
that we have at least one thing in our

00:02:51,420 --> 00:02:55,290
list we only have to put one arm in the

00:02:53,760 --> 00:02:56,850
match block the other one doesn't exist

00:02:55,290 --> 00:03:04,940
because there's no empty list with one

00:02:56,850 --> 00:03:11,239
thing in it and so if we try here our

00:03:04,940 --> 00:03:11,239
sample huh that would be first right

00:03:13,700 --> 00:03:24,560
let's do the other possibilities so if

00:03:18,769 --> 00:03:30,319
we have X and then an empty list its X

00:03:24,560 --> 00:03:33,610
if we have anything else it's the last

00:03:30,319 --> 00:03:33,610
of the rest there

00:03:48,420 --> 00:03:53,959
I might have to convince this that this

00:03:52,349 --> 00:03:57,180
has at least one thing in it right now

00:03:53,959 --> 00:03:59,150
I'm going to skip over that because i

00:03:57,180 --> 00:04:01,500
didn't i didn't prepare that part there

00:03:59,150 --> 00:04:02,880
because the compiler knows a lot of

00:04:01,500 --> 00:04:06,000
stuff about our code it can write a lot

00:04:02,880 --> 00:04:08,010
of code for us so if you know zip in r

00:04:06,000 --> 00:04:10,770
us to combine two iterators into pairs

00:04:08,010 --> 00:04:12,390
we can write a similar function here

00:04:10,770 --> 00:04:14,489
that lets us apply functions over the

00:04:12,390 --> 00:04:16,019
pairs but in rust you have to know what

00:04:14,489 --> 00:04:17,579
happens when those two iterators are

00:04:16,019 --> 00:04:20,639
different lengths I think it probably

00:04:17,579 --> 00:04:24,090
just stops sooner here since we have the

00:04:20,639 --> 00:04:25,950
same n in all these we it knows that you

00:04:24,090 --> 00:04:27,930
have to have two lengths of the same to

00:04:25,950 --> 00:04:29,990
list of the same length so I asked it to

00:04:27,930 --> 00:04:35,850
split our cases here it knows that

00:04:29,990 --> 00:04:37,830
they're the same empty list and here it

00:04:35,850 --> 00:04:39,180
knows that if one list has something in

00:04:37,830 --> 00:04:41,729
it they both have to have something in

00:04:39,180 --> 00:04:43,380
it so we ask it to try and figure out a

00:04:41,729 --> 00:04:50,580
definition and that one actually works

00:04:43,380 --> 00:04:55,020
there see if with plus one and two three

00:04:50,580 --> 00:04:57,380
and three and four it's a list of four

00:04:55,020 --> 00:04:57,380
and six

00:04:58,750 --> 00:05:04,820
and the last thing I really like is that

00:05:01,970 --> 00:05:08,450
you can write functions in the type so

00:05:04,820 --> 00:05:14,300
here we have printf

00:05:08,450 --> 00:05:14,300

YouTube URL: https://www.youtube.com/watch?v=tGI5jRkp8x8


