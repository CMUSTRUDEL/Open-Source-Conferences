Title: TIS 100 Superoptimization (Lightning Talk) â€” Daan van Berkel
Publication date: 2017-10-25
Playlist: Rust Belt Rust 2016
Description: 
	
Captions: 
	00:00:05,250 --> 00:00:12,700
so my five minutes are up so who are

00:00:09,010 --> 00:00:15,520
here heard of T is 100 well I've played

00:00:12,700 --> 00:00:17,410
an already some of you so for those who

00:00:15,520 --> 00:00:19,720
don't know it I'm gonna explain to you

00:00:17,410 --> 00:00:21,550
what it is and why you should play it so

00:00:19,720 --> 00:00:23,619
tis 100 is this game you see on the

00:00:21,550 --> 00:00:25,840
background there's a number of cells or

00:00:23,619 --> 00:00:27,369
nodes you can programming them you can

00:00:25,840 --> 00:00:29,920
program in a semi if you have never

00:00:27,369 --> 00:00:31,300
assembly programmed before this if you

00:00:29,920 --> 00:00:33,850
like programming and like games and

00:00:31,300 --> 00:00:35,920
puzzles this is a real game so go a

00:00:33,850 --> 00:00:39,309
little bit in detail what you can do so

00:00:35,920 --> 00:00:41,620
there are fewer registers & poor's make

00:00:39,309 --> 00:00:43,000
you sign numbers too so there's the

00:00:41,620 --> 00:00:45,309
accumulator and the backup accumulator

00:00:43,000 --> 00:00:47,110
there's nil where you can write to end

00:00:45,309 --> 00:00:48,219
up in the downpours also there are left

00:00:47,110 --> 00:00:50,230
and rice but I'm not going to talk about

00:00:48,219 --> 00:00:51,430
them there's now what you can do are

00:00:50,230 --> 00:00:53,170
some instructions so the first

00:00:51,430 --> 00:00:54,940
instruction is no operation so do

00:00:53,170 --> 00:00:57,280
nothing a lot of things are you can move

00:00:54,940 --> 00:00:58,329
things around or you can swap the value

00:00:57,280 --> 00:01:00,039
of the accumulator and a backup

00:00:58,329 --> 00:01:02,920
cumulative accumulator or you can add

00:01:00,039 --> 00:01:05,410
things from sort of some sort em against

00:01:02,920 --> 00:01:07,030
so so that's the computer you can play

00:01:05,410 --> 00:01:08,290
with it which is very nice and it's

00:01:07,030 --> 00:01:10,930
actually game I played and very

00:01:08,290 --> 00:01:12,460
passionate about and then I ran an art

00:01:10,930 --> 00:01:14,290
world super optimization which is

00:01:12,460 --> 00:01:16,299
extremely cool it's an informative

00:01:14,290 --> 00:01:19,330
optimization where you take piece of

00:01:16,299 --> 00:01:20,680
code and try to find the best in the

00:01:19,330 --> 00:01:23,110
sense of the least amount of

00:01:20,680 --> 00:01:25,060
instructions for the same thing to do

00:01:23,110 --> 00:01:27,189
the same thing so I could curious about

00:01:25,060 --> 00:01:29,350
it and I wanted to try to write a super

00:01:27,189 --> 00:01:32,159
optimizer for this game only from one

00:01:29,350 --> 00:01:35,520
cell so so I did that interest obviously

00:01:32,159 --> 00:01:37,689
so i took this node I I modeled it and

00:01:35,520 --> 00:01:40,060
this is what I got out so there's no

00:01:37,689 --> 00:01:41,619
akuma accumulator there's a port and

00:01:40,060 --> 00:01:44,710
down port and some things that you are

00:01:41,619 --> 00:01:46,930
not publicly available and then there

00:01:44,710 --> 00:01:48,969
was a program and the program is nothing

00:01:46,930 --> 00:01:50,259
more than a vector of instructions and

00:01:48,969 --> 00:01:52,960
each instructions is one of the things

00:01:50,259 --> 00:01:56,170
you can do to to do to this to this node

00:01:52,960 --> 00:01:58,360
so that got the diesels down now we need

00:01:56,170 --> 00:02:00,159
to execute the program on this node

00:01:58,360 --> 00:02:02,860
which is this little line so basically

00:02:00,159 --> 00:02:05,020
it's just fetch an instruction from your

00:02:02,860 --> 00:02:07,060
program if it's available executed on

00:02:05,020 --> 00:02:08,979
the on the node so that the program

00:02:07,060 --> 00:02:10,300
counter gets incremented if it's not

00:02:08,979 --> 00:02:12,490
available then check if there's some

00:02:10,300 --> 00:02:15,160
work to do so you can loop otherwise

00:02:12,490 --> 00:02:16,900
just and continue so this is actually a

00:02:15,160 --> 00:02:18,670
simulator for this little computer

00:02:16,900 --> 00:02:21,659
which is awesome but now we're going to

00:02:18,670 --> 00:02:25,959
create the best program for for a

00:02:21,659 --> 00:02:27,370
certain puzzle so you will how do you do

00:02:25,959 --> 00:02:29,650
that well there's a program it's raynor

00:02:27,370 --> 00:02:32,049
and it's actually nothing more than a

00:02:29,650 --> 00:02:34,269
number because if you can count from 0 1

00:02:32,049 --> 00:02:36,400
2 3 you can also iterate through all

00:02:34,269 --> 00:02:38,680
those programs and I'm going to tell you

00:02:36,400 --> 00:02:41,970
how you can do that but basically

00:02:38,680 --> 00:02:44,439
already know so if you say no more like

00:02:41,970 --> 00:02:46,390
3435 what you're actually doing is

00:02:44,439 --> 00:02:48,099
you're assigning different kind of

00:02:46,390 --> 00:02:49,750
digits through different compositions

00:02:48,099 --> 00:02:52,989
and you can do it with different numbers

00:02:49,750 --> 00:02:58,690
so if you know binary you can count 0 1

00:02:52,989 --> 00:03:01,689
1 will mean five yeah 5 so but you can

00:02:58,690 --> 00:03:03,010
also assign is to program instruction so

00:03:01,689 --> 00:03:06,340
what i'm doing here is i'm calculating

00:03:03,010 --> 00:03:08,680
the digits of the current number that is

00:03:06,340 --> 00:03:11,379
some string and what i'm looking at that

00:03:08,680 --> 00:03:13,840
is i will assign each digit to assert an

00:03:11,379 --> 00:03:15,730
instruction and that's the program so

00:03:13,840 --> 00:03:16,810
how do I get from a certain digits with

00:03:15,730 --> 00:03:19,569
certain structural there some mapping

00:03:16,810 --> 00:03:22,120
which is displayed here and what it does

00:03:19,569 --> 00:03:24,069
is you will start out with 0 which will

00:03:22,120 --> 00:03:25,780
do the no operation manual count one

00:03:24,069 --> 00:03:28,359
will be the swap and they will do to

00:03:25,780 --> 00:03:31,000
which is safe and then three what we add

00:03:28,359 --> 00:03:32,949
to the source port and in that sense you

00:03:31,000 --> 00:03:35,099
can just step through all kinds programs

00:03:32,949 --> 00:03:37,389
just by counting this is what I'm doing

00:03:35,099 --> 00:03:41,349
the only thing that's left to solve a

00:03:37,389 --> 00:03:43,569
puzzle is create a source of input so

00:03:41,349 --> 00:03:46,750
these are the inputs 0 1 2 and 3 and

00:03:43,569 --> 00:03:48,940
create the intended output 2 or 3 1 and

00:03:46,750 --> 00:03:53,650
5 and if you think really hard about it

00:03:48,940 --> 00:03:56,919
you could do add the first two as the

00:03:53,650 --> 00:03:59,549
output and then the second two so if you

00:03:56,919 --> 00:04:02,790
would try this on the thing i wrote you

00:03:59,549 --> 00:04:05,669
will see this so this is the program i

00:04:02,790 --> 00:04:08,440
just highlighting it for convenience and

00:04:05,669 --> 00:04:09,980
then i will go over to the terminal and

00:04:08,440 --> 00:04:13,040
type in the car

00:04:09,980 --> 00:04:16,310
that will run my simulator and it will

00:04:13,040 --> 00:04:20,150
come up with a solution hopefully well

00:04:16,310 --> 00:04:24,889
this is a video so I know it's going to

00:04:20,150 --> 00:04:27,139
do and the solution is actually almost

00:04:24,889 --> 00:04:29,030
but not quite entirely an interesting

00:04:27,139 --> 00:04:31,370
because it's a solution that you would

00:04:29,030 --> 00:04:34,310
think of yourself if you would do play

00:04:31,370 --> 00:04:35,630
this game and the problem is that super

00:04:34,310 --> 00:04:37,340
organization is very interesting but

00:04:35,630 --> 00:04:39,650
only for machines that are real because

00:04:37,340 --> 00:04:42,500
then you can do also for fancy things

00:04:39,650 --> 00:04:44,630
with the addition and boolean operators

00:04:42,500 --> 00:04:49,510
of the Machine and the TAS doesn't have

00:04:44,630 --> 00:04:49,510

YouTube URL: https://www.youtube.com/watch?v=Co1X1a-n0hg


