Title: RustFest Rome 2018 -  Aaron Turon: Grappling with growth, and other good problems to have
Publication date: 2018-11-24
Playlist: RustFest Rome 2018
Description: 
	On the eve of Rust 2018, we have so much to celebrate! From the core language to tools to community outreach to adoption, the Rust project has made enormous strides. But with success comes new challenges. Looking ahead to the next Edition of Rust, this keynote will lay out some of these challenges along three dimensions: Stakeholders, Governance, and Product. I'll pitch some personal ideas for how to grapple with these challenges, taking a frank look at what's working well and what needs to change, and inviting community-wide discussion as we go into our planning for next year.

https://rome.rustfest.eu/sessions/keynote
https://media.ccc.de/v/rustfest-rome-1-keynote
Captions: 
	00:00:05,810 --> 00:00:13,219
yeah so I'm Erin Tehran and I'm really

00:00:10,460 --> 00:00:14,600
excited to be here at my very first

00:00:13,219 --> 00:00:16,730
thrust fest

00:00:14,600 --> 00:00:17,960
I have sadly had to miss out on the

00:00:16,730 --> 00:00:19,880
previous instances for various

00:00:17,960 --> 00:00:23,350
scheduling reasons I was curious how

00:00:19,880 --> 00:00:25,400
many of you is this your first rust fest

00:00:23,350 --> 00:00:27,350
Wow awesome

00:00:25,400 --> 00:00:32,090
well well welcome so we'll all sort of

00:00:27,350 --> 00:00:34,280
experience this together yes so I'm

00:00:32,090 --> 00:00:36,650
going to give a talk that starts

00:00:34,280 --> 00:00:38,270
somewhat optimistic and then gets kind

00:00:36,650 --> 00:00:42,860
of pessimistic and then gets optimistic

00:00:38,270 --> 00:00:46,640
again and but I want to start with some

00:00:42,860 --> 00:00:52,000
cartoons how many of you are familiar

00:00:46,640 --> 00:00:56,270
with the coyote and roadrunner cartoon

00:00:52,000 --> 00:00:59,090
okay most of you but not all of you so

00:00:56,270 --> 00:01:01,820
let me let me just fill you in because

00:00:59,090 --> 00:01:04,640
it's gonna be sort of running metaphor

00:01:01,820 --> 00:01:07,369
for the talk so in this cartoon you have

00:01:04,640 --> 00:01:10,340
two characters the coyote and the

00:01:07,369 --> 00:01:15,499
roadrunner and the principle is very

00:01:10,340 --> 00:01:17,240
simple the coyote is very hungry and is

00:01:15,499 --> 00:01:20,450
chasing the roadrunner trying to catch

00:01:17,240 --> 00:01:23,630
it and eat it okay but in a metaphor for

00:01:20,450 --> 00:01:25,759
life the coyote basically is never able

00:01:23,630 --> 00:01:30,859
to actually catch the roadrunner and all

00:01:25,759 --> 00:01:33,889
kinds of hijinks ensue so I'm gonna use

00:01:30,859 --> 00:01:35,240
this as an extended metaphor for what

00:01:33,889 --> 00:01:39,109
we're trying to do in the rest community

00:01:35,240 --> 00:01:42,049
and what we're sort of seeking after

00:01:39,109 --> 00:01:44,959
what it means to catch it or not and

00:01:42,049 --> 00:01:48,409
sorry I'm gonna start with reflecting

00:01:44,959 --> 00:01:50,569
back a couple years ago on one of the

00:01:48,409 --> 00:01:52,490
the first road maps that we put out when

00:01:50,569 --> 00:01:55,639
we started sort of the road map process

00:01:52,490 --> 00:01:58,939
and and trying to lay out our goals for

00:01:55,639 --> 00:02:00,849
rust each year and we talked about you

00:01:58,939 --> 00:02:03,259
know we tried to frame the road map as

00:02:00,849 --> 00:02:05,659
what is it that we're actually trying to

00:02:03,259 --> 00:02:07,849
achieve with rust right I think people

00:02:05,659 --> 00:02:09,380
come to rust from a lot of different

00:02:07,849 --> 00:02:12,410
places with a lot of different goals I

00:02:09,380 --> 00:02:14,970
think for many people rust is something

00:02:12,410 --> 00:02:17,820
deeply aesthetic you know it's

00:02:14,970 --> 00:02:18,930
beautiful they wanted to be perfect for

00:02:17,820 --> 00:02:22,410
other people there are particular

00:02:18,930 --> 00:02:26,160
features but for the core team we tried

00:02:22,410 --> 00:02:28,020
to have a vision of success that wasn't

00:02:26,160 --> 00:02:30,960
tied to any particular aesthetics or

00:02:28,020 --> 00:02:33,450
features but was more in terms of

00:02:30,960 --> 00:02:36,510
adoption rust actually being used and

00:02:33,450 --> 00:02:39,120
surviving as a language and we've wanted

00:02:36,510 --> 00:02:40,620
to seek that goal while staying true to

00:02:39,120 --> 00:02:43,020
our core values and I'll be talking

00:02:40,620 --> 00:02:44,310
about that throughout the talk so in

00:02:43,020 --> 00:02:47,010
particular the way that we want to

00:02:44,310 --> 00:02:49,020
measure our success is we want to see

00:02:47,010 --> 00:02:51,959
people not only using rust in production

00:02:49,020 --> 00:02:53,540
but getting genuine value out of it in a

00:02:51,959 --> 00:02:58,800
way that that is really unique to rust

00:02:53,540 --> 00:03:01,050
so that's our road runner we as a

00:02:58,800 --> 00:03:03,930
community have been the coyote chasing

00:03:01,050 --> 00:03:06,330
the success and I want to start by

00:03:03,930 --> 00:03:10,110
talking about the last three years which

00:03:06,330 --> 00:03:12,720
I sort of see as the first era of rust

00:03:10,110 --> 00:03:16,260
development where we've been chasing

00:03:12,720 --> 00:03:20,280
this this road runner of adoption right

00:03:16,260 --> 00:03:22,650
and so rust in some sense really got its

00:03:20,280 --> 00:03:26,100
start back in 2015 with rust one point

00:03:22,650 --> 00:03:27,930
out and this was when I say it got its

00:03:26,100 --> 00:03:30,780
start what I mean is that was the point

00:03:27,930 --> 00:03:32,940
where adoption became a realistic thing

00:03:30,780 --> 00:03:35,550
because at one point no we stopped

00:03:32,940 --> 00:03:37,680
breaking the language every day and it

00:03:35,550 --> 00:03:40,380
became possible to actually build things

00:03:37,680 --> 00:03:42,930
on top of rust and so that that was a

00:03:40,380 --> 00:03:44,850
great starting point but to reach that

00:03:42,930 --> 00:03:47,090
point where we could make promises about

00:03:44,850 --> 00:03:51,989
the language and compatibility and so on

00:03:47,090 --> 00:03:54,269
we had to strip it down to its core so

00:03:51,989 --> 00:03:55,680
that we could be sort of confident in

00:03:54,269 --> 00:03:58,709
what we were shipping we could be

00:03:55,680 --> 00:04:00,000
prepared to make those promises and you

00:03:58,709 --> 00:04:02,850
know not actually have to go through

00:04:00,000 --> 00:04:07,170
much breaker so the process leading up

00:04:02,850 --> 00:04:10,799
to 1.0 was a lot of stripping down so

00:04:07,170 --> 00:04:13,440
that was a successful launch but after

00:04:10,799 --> 00:04:15,660
that we have felt the need to sort of

00:04:13,440 --> 00:04:17,729
build things back up right so when we

00:04:15,660 --> 00:04:20,070
strip things down to the core we had a

00:04:17,729 --> 00:04:22,400
language that we could make promises

00:04:20,070 --> 00:04:25,199
about but not one that was necessarily

00:04:22,400 --> 00:04:27,370
especially productive to start with

00:04:25,199 --> 00:04:30,550
because it had been so stripped down and

00:04:27,370 --> 00:04:32,710
so in in this first map one of the

00:04:30,550 --> 00:04:34,990
things that we highlighted as our major

00:04:32,710 --> 00:04:37,330
goal to drive toward adoption was

00:04:34,990 --> 00:04:40,630
improving the productivity of rust and

00:04:37,330 --> 00:04:42,639
in particular with 1.0 it was clear that

00:04:40,630 --> 00:04:44,470
rust was a language for writing fast

00:04:42,639 --> 00:04:46,389
programs and for writing reliable

00:04:44,470 --> 00:04:48,310
programs but we wanted to make

00:04:46,389 --> 00:04:51,490
productivity a sort of another key

00:04:48,310 --> 00:04:53,560
pillar now if you've been following the

00:04:51,490 --> 00:04:56,889
development closely you might know that

00:04:53,560 --> 00:05:01,720
this goal of 2017 was a little bit

00:04:56,889 --> 00:05:03,880
optimistic and in 2018 we set out

00:05:01,720 --> 00:05:06,010
another road map which is essentially

00:05:03,880 --> 00:05:07,870
said you know promising to ship all of

00:05:06,010 --> 00:05:10,630
the things that that we worked on in

00:05:07,870 --> 00:05:13,810
2017 and so that this is all coming

00:05:10,630 --> 00:05:14,979
together in a new version of rust which

00:05:13,810 --> 00:05:18,250
probably most of you have heard about

00:05:14,979 --> 00:05:19,840
rust 2018 which is trying to bring

00:05:18,250 --> 00:05:23,020
together basically all the work that

00:05:19,840 --> 00:05:26,020
we've done since 1.0 and and put it out

00:05:23,020 --> 00:05:28,539
into the world as a clear milestone in

00:05:26,020 --> 00:05:31,389
the development of rust so so this is

00:05:28,539 --> 00:05:33,750
great and I'll talk a little bit more

00:05:31,389 --> 00:05:36,430
detail about what all these pieces mean

00:05:33,750 --> 00:05:39,250
but suffice it to say that we have been

00:05:36,430 --> 00:05:42,430
working really hard since 1.0 to do

00:05:39,250 --> 00:05:44,500
everything we can to spur adoption of

00:05:42,430 --> 00:05:47,620
rust to make rust an appealing language

00:05:44,500 --> 00:05:49,840
a useful language for people to use so

00:05:47,620 --> 00:05:51,669
let's pause for a moment and actually

00:05:49,840 --> 00:05:55,570
look at what we've achieved because it

00:05:51,669 --> 00:05:58,449
is tremendous so Russ 2018 is going to

00:05:55,570 --> 00:06:02,380
be released in just a couple weeks on

00:05:58,449 --> 00:06:06,449
December 6th and it has a whole boatload

00:06:02,380 --> 00:06:08,470
of great stuff so on the language side

00:06:06,449 --> 00:06:12,910
how many of you have heard of non

00:06:08,470 --> 00:06:14,250
lexical lifetimes yes so that that will

00:06:12,910 --> 00:06:15,970
be shipping along with many other

00:06:14,250 --> 00:06:19,150
improvements to the core ownership

00:06:15,970 --> 00:06:21,010
system there is also the the module

00:06:19,150 --> 00:06:23,080
system revamp which i think was a great

00:06:21,010 --> 00:06:26,440
example of our community coming together

00:06:23,080 --> 00:06:28,150
and working through a huge design space

00:06:26,440 --> 00:06:29,949
working through contentious issues and

00:06:28,150 --> 00:06:32,470
winding up with something that pretty

00:06:29,949 --> 00:06:34,000
much everybody seems happy with their

00:06:32,470 --> 00:06:35,440
number of other language features but

00:06:34,000 --> 00:06:37,030
also a lot of great documentation

00:06:35,440 --> 00:06:41,350
changes of bran

00:06:37,030 --> 00:06:44,440
new primary book that's terpil is the

00:06:41,350 --> 00:06:46,060
rust programming language as well as a

00:06:44,440 --> 00:06:48,370
number of new books this year that are

00:06:46,060 --> 00:06:50,890
focused on particular application

00:06:48,370 --> 00:06:54,480
domains for us like embedded command

00:06:50,890 --> 00:06:57,820
line applications and web assembly and

00:06:54,480 --> 00:06:58,900
then in addition to that the tooling has

00:06:57,820 --> 00:07:02,230
gotten a lot better

00:06:58,900 --> 00:07:04,570
we have incremental compilation we have

00:07:02,230 --> 00:07:06,550
much improved IDE support Russ format is

00:07:04,570 --> 00:07:09,580
going to be reaching one point now the

00:07:06,550 --> 00:07:11,380
ecosystem has been growing and in the

00:07:09,580 --> 00:07:13,960
next week we'll be releasing our

00:07:11,380 --> 00:07:16,540
completely revamped website right so if

00:07:13,960 --> 00:07:18,220
you look at all of these things you can

00:07:16,540 --> 00:07:20,980
see that as a community we've been

00:07:18,220 --> 00:07:24,460
putting in a ton of work to to make rust

00:07:20,980 --> 00:07:27,640
an adoptable language and it's been

00:07:24,460 --> 00:07:30,850
paying off so I collected just a couple

00:07:27,640 --> 00:07:34,150
of posts from social media from the last

00:07:30,850 --> 00:07:36,340
month okay and this is just a selection

00:07:34,150 --> 00:07:39,520
and I see these kinds of posts fly by

00:07:36,340 --> 00:07:42,040
all the time so this one is a tweet from

00:07:39,520 --> 00:07:43,740
somebody on the Firefox team probably

00:07:42,040 --> 00:07:46,930
most of you know that Mozilla's Firefox

00:07:43,740 --> 00:07:49,570
now uses quite a bit of rust but perhaps

00:07:46,930 --> 00:07:53,050
even more interesting if you look at the

00:07:49,570 --> 00:07:57,010
last year of development most new code

00:07:53,050 --> 00:07:59,530
added to the code base is in rust a very

00:07:57,010 --> 00:08:01,950
very little C++ code was added over this

00:07:59,530 --> 00:08:04,360
last year so it hasn't been just

00:08:01,950 --> 00:08:06,220
particular modules getting ported over

00:08:04,360 --> 00:08:08,650
but actually a whole change in the

00:08:06,220 --> 00:08:11,380
mentality of adopting rust within

00:08:08,650 --> 00:08:13,180
Firefox which is very exciting but we're

00:08:11,380 --> 00:08:16,660
also seeing rust pop up in all kinds of

00:08:13,180 --> 00:08:18,820
other application areas so there you

00:08:16,660 --> 00:08:22,960
know our announcements of software like

00:08:18,820 --> 00:08:25,510
discord using rust to power some of

00:08:22,960 --> 00:08:29,040
their networking along with game SDKs

00:08:25,510 --> 00:08:31,060
and the suite on the bottom is about

00:08:29,040 --> 00:08:34,390
another new game studio there have been

00:08:31,060 --> 00:08:37,270
multiple going all-in on rust and then

00:08:34,390 --> 00:08:40,240
we even have hiring announcement from

00:08:37,270 --> 00:08:41,500
Zipcar the car sharing service saying

00:08:40,240 --> 00:08:45,070
that they're using rust in a pretty

00:08:41,500 --> 00:08:48,360
fundamental way so let's give ourselves

00:08:45,070 --> 00:08:48,360
a round of applause this is awesome

00:08:53,180 --> 00:08:58,490
so adoption is definitely happening it's

00:08:56,430 --> 00:09:01,680
picking up steam it's really exciting

00:08:58,490 --> 00:09:05,610
you know I can feel a shift especially

00:09:01,680 --> 00:09:08,130
this year and there's one other angle on

00:09:05,610 --> 00:09:10,740
adoption that we like to keep track of

00:09:08,130 --> 00:09:14,160
that's that's really important which has

00:09:10,740 --> 00:09:16,530
to do with the kraits IO ecosystem and

00:09:14,160 --> 00:09:19,320
basically the open source world of rust

00:09:16,530 --> 00:09:21,090
so there's a interesting paper called

00:09:19,320 --> 00:09:24,000
empirical analysis of programming

00:09:21,090 --> 00:09:26,100
language adoption and this paper did

00:09:24,000 --> 00:09:28,050
extensive surveys and other studies to

00:09:26,100 --> 00:09:30,960
figure out what makes organizations

00:09:28,050 --> 00:09:33,420
decide to use one language versus

00:09:30,960 --> 00:09:36,270
another and it turns out that the top

00:09:33,420 --> 00:09:39,000
factor is the strength of the open

00:09:36,270 --> 00:09:40,950
source ecosystem around language so this

00:09:39,000 --> 00:09:42,750
is I think a leading indicator of

00:09:40,950 --> 00:09:45,330
language adoption so it's something we

00:09:42,750 --> 00:09:48,600
need to pay a lot of attention to and we

00:09:45,330 --> 00:09:52,280
see lots of good news here too so here's

00:09:48,600 --> 00:09:55,140
the graph of the download count per day

00:09:52,280 --> 00:09:58,410
from crates I owe over the last few

00:09:55,140 --> 00:10:00,510
years since its inception things are

00:09:58,410 --> 00:10:03,540
trending in a positive direction this is

00:10:00,510 --> 00:10:07,950
very good another of my favorite stats

00:10:03,540 --> 00:10:10,680
is you can query github for PR account

00:10:07,950 --> 00:10:15,210
by language over time this is

00:10:10,680 --> 00:10:19,440
year-to-date in 2018 and these are the

00:10:15,210 --> 00:10:23,970
top 15 languages used in github rust is

00:10:19,440 --> 00:10:24,930
the 15th one so I mean it on the one

00:10:23,970 --> 00:10:26,430
hand it's kind of sad to be at the

00:10:24,930 --> 00:10:29,780
bottom of this chart but on the other

00:10:26,430 --> 00:10:32,640
hand we're in pretty amazing company

00:10:29,780 --> 00:10:34,920
everything else on this list is a major

00:10:32,640 --> 00:10:37,080
major language that you know everybody

00:10:34,920 --> 00:10:39,720
is aware of and notice in particular

00:10:37,080 --> 00:10:43,610
we're neck and neck with Scala and Swift

00:10:39,720 --> 00:10:46,710
and if you look at the trend lines we

00:10:43,610 --> 00:10:49,410
backed in 2019 we will surpass Scala

00:10:46,710 --> 00:10:51,810
and you know perhaps Swift as well and

00:10:49,410 --> 00:10:54,210
just to give you some sense below rough

00:10:51,810 --> 00:10:56,580
here are several other really major

00:10:54,210 --> 00:10:59,130
languages right so I think we have a lot

00:10:56,580 --> 00:11:01,530
of good indication that the open source

00:10:59,130 --> 00:11:03,690
ecosystem for rust is healthy and

00:11:01,530 --> 00:11:05,400
continuing to grow and if

00:11:03,690 --> 00:11:07,350
this paper I was mentioning is right

00:11:05,400 --> 00:11:09,630
then this should lead to even more

00:11:07,350 --> 00:11:11,890
adoption arrests in the future so again

00:11:09,630 --> 00:11:15,010
we ourselves a great round of applause

00:11:11,890 --> 00:11:15,010
[Music]

00:11:17,240 --> 00:11:24,090
okay so that was the optimistic part so

00:11:22,050 --> 00:11:27,840
the thing is one of my favorite episodes

00:11:24,090 --> 00:11:29,880
of the coyote and roadrunner show is the

00:11:27,840 --> 00:11:32,460
one in which the coyote actually catches

00:11:29,880 --> 00:11:34,470
the roadrunner the problem is the

00:11:32,460 --> 00:11:36,330
roadrunner through some magic has

00:11:34,470 --> 00:11:39,330
transformed into a giant bird

00:11:36,330 --> 00:11:41,940
so that's the Roadrunners leg and the

00:11:39,330 --> 00:11:44,850
coyote is sort of non-plus doesn't know

00:11:41,940 --> 00:11:47,280
what to do right and this is basically

00:11:44,850 --> 00:11:50,970
what my talk is about right I feel like

00:11:47,280 --> 00:11:52,500
as of 2018 you know we can really see

00:11:50,970 --> 00:11:54,690
the trajectory is clear with rust

00:11:52,500 --> 00:11:57,330
adoption is happening everything is

00:11:54,690 --> 00:11:59,250
trending in a good direction so it feels

00:11:57,330 --> 00:12:04,170
like we're about to catch the roadrunner

00:11:59,250 --> 00:12:05,700
and that's kind of a problem so what I

00:12:04,170 --> 00:12:10,050
want to talk about in the rest of this

00:12:05,700 --> 00:12:12,930
talk are some of the dark sides to

00:12:10,050 --> 00:12:15,090
success basically as we look out ahead

00:12:12,930 --> 00:12:18,330
now now that we've reached a certain

00:12:15,090 --> 00:12:20,730
level of adoption we're going to have a

00:12:18,330 --> 00:12:22,200
whole new set of problems the game is no

00:12:20,730 --> 00:12:23,850
longer going to be about getting rest

00:12:22,200 --> 00:12:25,890
adopted at all it's gonna be about

00:12:23,850 --> 00:12:27,960
coping with what adoption actually means

00:12:25,890 --> 00:12:31,020
and growing as a community to handle

00:12:27,960 --> 00:12:35,820
those changes so I'm going to go through

00:12:31,020 --> 00:12:37,440
three overall kinds of problems you know

00:12:35,820 --> 00:12:38,640
that I expect to arise this isn't

00:12:37,440 --> 00:12:40,860
comprehensive but these are some of the

00:12:38,640 --> 00:12:44,150
things that I and the core team have

00:12:40,860 --> 00:12:48,030
been thinking about so the first one

00:12:44,150 --> 00:12:50,850
perhaps the most obvious one is as we

00:12:48,030 --> 00:12:53,490
gain adoption we are bringing a whole

00:12:50,850 --> 00:12:55,620
new set of stakeholders into the

00:12:53,490 --> 00:12:58,890
rustboro into the rest community which

00:12:55,620 --> 00:13:01,080
sounds great and in fact it's sometimes

00:12:58,890 --> 00:13:03,630
sounds really great so I've had this

00:13:01,080 --> 00:13:05,550
conversation with multiple giant

00:13:03,630 --> 00:13:08,760
companies where these companies are

00:13:05,550 --> 00:13:11,460
already paying people to develop rust

00:13:08,760 --> 00:13:13,440
itself in some cases full time as well

00:13:11,460 --> 00:13:15,089
as contractors and they're still not

00:13:13,440 --> 00:13:16,220
satisfied they also want to just throw

00:13:15,089 --> 00:13:19,970
money

00:13:16,220 --> 00:13:24,710
at the rust community which seems like a

00:13:19,970 --> 00:13:27,620
great problem to have right so so the

00:13:24,710 --> 00:13:30,050
thing is while this this is an amazing

00:13:27,620 --> 00:13:33,200
development there's there are also a lot

00:13:30,050 --> 00:13:37,060
of pitfalls around the growth of money

00:13:33,200 --> 00:13:39,320
and value and in the Rust community and

00:13:37,060 --> 00:13:42,920
this spells a lot of change for how we

00:13:39,320 --> 00:13:46,490
operate so one of the challenges here is

00:13:42,920 --> 00:13:49,070
that it's very easy for money to become

00:13:46,490 --> 00:13:50,930
equated with power right so if all these

00:13:49,070 --> 00:13:54,650
companies are pouring megabucks

00:13:50,930 --> 00:13:56,330
into rust they might accept expect to

00:13:54,650 --> 00:13:58,040
get something out of that and what does

00:13:56,330 --> 00:14:00,290
that mean for us what does it mean for

00:13:58,040 --> 00:14:03,620
the RSC process and the way that we

00:14:00,290 --> 00:14:05,180
develop for us and even this idea of hey

00:14:03,620 --> 00:14:08,450
we just want to give like lots of money

00:14:05,180 --> 00:14:11,150
into some giant pool is not as simple as

00:14:08,450 --> 00:14:13,910
it might seem because if you look at the

00:14:11,150 --> 00:14:15,890
history of you know foundations and

00:14:13,910 --> 00:14:19,120
other you know centralized organizations

00:14:15,890 --> 00:14:21,770
like this with technology it's very

00:14:19,120 --> 00:14:23,810
typical for these foundations to run

00:14:21,770 --> 00:14:26,420
into political issues because now all of

00:14:23,810 --> 00:14:28,670
a sudden you've got this central

00:14:26,420 --> 00:14:31,010
organization that has all this cash and

00:14:28,670 --> 00:14:33,770
that organization has to decide where

00:14:31,010 --> 00:14:38,090
the cash goes right and that can get

00:14:33,770 --> 00:14:40,040
very nasty very quickly and you know one

00:14:38,090 --> 00:14:41,720
of the things that the core team has

00:14:40,040 --> 00:14:44,570
been a little bit hesitant about going

00:14:41,720 --> 00:14:46,280
down this road so we've tried you know

00:14:44,570 --> 00:14:47,870
setting up sort of more of a matchmaking

00:14:46,280 --> 00:14:49,610
thing like hey if you if you want to

00:14:47,870 --> 00:14:51,200
support rust we know some people who

00:14:49,610 --> 00:14:53,120
would love to be supported and you can

00:14:51,200 --> 00:14:55,460
choose we're not going to choose for you

00:14:53,120 --> 00:14:57,800
but even that is fraught because which

00:14:55,460 --> 00:15:00,860
people go on the list right I did a

00:14:57,800 --> 00:15:02,660
personal little attempt at this and you

00:15:00,860 --> 00:15:03,860
know had my set of people who I'd sort

00:15:02,660 --> 00:15:05,480
of personally vetted and I just try to

00:15:03,860 --> 00:15:07,400
try to be clear like hey this is just

00:15:05,480 --> 00:15:09,710
the thing I'm doing on the side and I

00:15:07,400 --> 00:15:11,990
got lots of email saying why why aren't

00:15:09,710 --> 00:15:14,540
I on the list can I be on the list so

00:15:11,990 --> 00:15:18,950
again what once money comes into the

00:15:14,540 --> 00:15:21,170
picture things can get dicey and then of

00:15:18,950 --> 00:15:23,240
course I think it might be a bit early

00:15:21,170 --> 00:15:24,860
to ask this question but eventually the

00:15:23,240 --> 00:15:26,480
question of Enterprise rust and what

00:15:24,860 --> 00:15:26,830
that means is going to be really

00:15:26,480 --> 00:15:28,960
important

00:15:26,830 --> 00:15:31,030
for the community to focus on so that's

00:15:28,960 --> 00:15:32,890
that's one new challenge a good problem

00:15:31,030 --> 00:15:37,240
to have there's a lot of money but money

00:15:32,890 --> 00:15:39,100
creates problems here's another set of

00:15:37,240 --> 00:15:42,730
problems again coming from some

00:15:39,100 --> 00:15:45,070
conversations I've had with folks so as

00:15:42,730 --> 00:15:47,500
people are using rust in production and

00:15:45,070 --> 00:15:48,760
we've got all this great stuff and

00:15:47,500 --> 00:15:51,490
development that I was talking about

00:15:48,760 --> 00:15:53,380
with rust 2018 and so on not all of it

00:15:51,490 --> 00:15:56,530
is shipping as students people would

00:15:53,380 --> 00:15:59,500
prefer and so sometimes people in these

00:15:56,530 --> 00:16:02,830
organizations end up using unstable rust

00:15:59,500 --> 00:16:05,440
and sometimes as their projects get

00:16:02,830 --> 00:16:07,720
higher profile management feels a little

00:16:05,440 --> 00:16:10,570
unhappy about that right and so then it

00:16:07,720 --> 00:16:12,280
comes back around to the core team and

00:16:10,570 --> 00:16:14,620
others and they're sort of asking what

00:16:12,280 --> 00:16:17,740
can we do how can we get this API

00:16:14,620 --> 00:16:20,500
stabilized right and again with with

00:16:17,740 --> 00:16:25,240
strong production usage the pressure to

00:16:20,500 --> 00:16:28,260
shift throws also people start doing

00:16:25,240 --> 00:16:33,070
things that we'd prefer that they didn't

00:16:28,260 --> 00:16:36,070
so as as you might know or perhaps I'll

00:16:33,070 --> 00:16:37,870
let you in on the secret it's possible

00:16:36,070 --> 00:16:40,210
on a stable rust compiler to use

00:16:37,870 --> 00:16:41,920
unstable features if you pass in a magic

00:16:40,210 --> 00:16:45,460
bootstrap key which is what we use to be

00:16:41,920 --> 00:16:46,540
its traffic compiler and in fact the

00:16:45,460 --> 00:16:47,890
initial version of this we made it

00:16:46,540 --> 00:16:49,930
really hard for people to do this we

00:16:47,890 --> 00:16:51,610
don't want people to do this but we have

00:16:49,930 --> 00:16:53,440
to have it for bootstrapping purposes

00:16:51,610 --> 00:16:55,930
and of course people found it and do it

00:16:53,440 --> 00:16:59,740
right there by sort of subverting the

00:16:55,930 --> 00:17:02,140
whole system so again when you go into

00:16:59,740 --> 00:17:04,510
production use there are all kinds of

00:17:02,140 --> 00:17:08,620
new pressures people have to slap things

00:17:04,510 --> 00:17:10,180
together and ship and that is a change

00:17:08,620 --> 00:17:11,589
in the rust community as we grow

00:17:10,180 --> 00:17:15,040
adoption these kinds of pressures are

00:17:11,589 --> 00:17:18,670
going to be more prominent so I'm a big

00:17:15,040 --> 00:17:20,320
fan of shipping I feel like in fact most

00:17:18,670 --> 00:17:22,330
of what I do in the rust communities try

00:17:20,320 --> 00:17:26,410
to help us ship things so that's

00:17:22,330 --> 00:17:28,600
definitely not inherently bad but if you

00:17:26,410 --> 00:17:31,120
look at what has made rust what it is so

00:17:28,600 --> 00:17:33,430
far you know we have a community that's

00:17:31,120 --> 00:17:36,940
been built largely of passionate

00:17:33,430 --> 00:17:39,160
enthusiasts and small companies there's

00:17:36,940 --> 00:17:39,929
a risk that those people are going to

00:17:39,160 --> 00:17:42,269
get drowned

00:17:39,929 --> 00:17:44,159
by the needs of bigger and bigger

00:17:42,269 --> 00:17:46,679
companies bigger and bigger money going

00:17:44,159 --> 00:17:48,960
into rust and so it's a question of

00:17:46,679 --> 00:17:51,899
balance how how do we make sure we

00:17:48,960 --> 00:17:54,119
continue to make rust the best it can be

00:17:51,899 --> 00:17:55,769
well supporting all of these new

00:17:54,119 --> 00:17:58,259
production users who are getting a lot

00:17:55,769 --> 00:18:00,419
of value out of it how does our

00:17:58,259 --> 00:18:02,869
consensus process from the RFC process

00:18:00,419 --> 00:18:04,980
withstand this increasing pressure

00:18:02,869 --> 00:18:06,929
alright these are these are really hard

00:18:04,980 --> 00:18:08,610
questions and they're good problems to

00:18:06,929 --> 00:18:13,139
have but they are problems and things we

00:18:08,610 --> 00:18:16,740
need to be thinking about so in another

00:18:13,139 --> 00:18:20,720
category of problems we want to think

00:18:16,740 --> 00:18:24,779
about is contributor growth right so as

00:18:20,720 --> 00:18:26,909
the production usage increases so does

00:18:24,779 --> 00:18:30,480
the open source contribution that's

00:18:26,909 --> 00:18:33,360
fantastic and in fact you can see a sort

00:18:30,480 --> 00:18:35,279
of pivot point at 2018 for various

00:18:33,360 --> 00:18:37,049
reasons the the growth of the formal

00:18:35,279 --> 00:18:38,970
rust team so this is all of the

00:18:37,049 --> 00:18:40,740
different rust teams like language and

00:18:38,970 --> 00:18:43,499
compiler and libraries documentation and

00:18:40,740 --> 00:18:45,690
so on it's really exploded and that's

00:18:43,499 --> 00:18:47,100
been very intentional we've been trying

00:18:45,690 --> 00:18:49,019
to empower more and more people to get

00:18:47,100 --> 00:18:53,369
involved in setting the direction of

00:18:49,019 --> 00:18:56,999
rust so this is great but again it

00:18:53,369 --> 00:19:00,509
brings some problems with it so here's a

00:18:56,999 --> 00:19:04,649
quote from Brian Anderson made I think

00:19:00,509 --> 00:19:05,970
maybe a year or two ago sort of talking

00:19:04,649 --> 00:19:07,679
about some of the problems that come

00:19:05,970 --> 00:19:12,029
about by this this growth in team size

00:19:07,679 --> 00:19:13,470
and basically the issue is when the

00:19:12,029 --> 00:19:15,570
community grows so big when the teams

00:19:13,470 --> 00:19:17,850
are growing so big it's not really

00:19:15,570 --> 00:19:19,919
enough for people to just show up and

00:19:17,850 --> 00:19:21,450
start hacking on stuff you really need

00:19:19,919 --> 00:19:23,610
management and you need a lot of

00:19:21,450 --> 00:19:25,350
management right so as we grow the

00:19:23,610 --> 00:19:28,169
number of teams we need to grow the

00:19:25,350 --> 00:19:30,720
number of middle managers who can help

00:19:28,169 --> 00:19:33,779
people find their way to make an impact

00:19:30,720 --> 00:19:38,220
on rust and it turns out that is really

00:19:33,779 --> 00:19:39,990
hard it from from where I sit the most

00:19:38,220 --> 00:19:42,480
precious commodity in the rust community

00:19:39,990 --> 00:19:43,710
is technical leadership like when it

00:19:42,480 --> 00:19:46,080
comes to engineering if we have a

00:19:43,710 --> 00:19:48,659
clearer engineering problem we'll just

00:19:46,080 --> 00:19:51,269
give it to Alex it'll be great I mean

00:19:48,659 --> 00:19:53,910
sorry the whole community you know is

00:19:51,269 --> 00:19:55,290
very capable of solving

00:19:53,910 --> 00:19:58,830
clear-cut technical problems

00:19:55,290 --> 00:20:00,930
implementing stuff it's amazing but we

00:19:58,830 --> 00:20:02,190
spend so much of our time sort of

00:20:00,930 --> 00:20:04,230
spinning our wheels trying to figure out

00:20:02,190 --> 00:20:06,420
what is it we actually want to implement

00:20:04,230 --> 00:20:08,340
and that's where technical vision

00:20:06,420 --> 00:20:10,980
technical leadership and management come

00:20:08,340 --> 00:20:13,290
into play and this is a really hard

00:20:10,980 --> 00:20:14,700
problem in part because I think for a

00:20:13,290 --> 00:20:18,240
lot of people who are doing this in

00:20:14,700 --> 00:20:20,520
their spare time it's not the most

00:20:18,240 --> 00:20:22,380
rewarding work necessarily or it's not

00:20:20,520 --> 00:20:24,600
what you think of first you know it's

00:20:22,380 --> 00:20:26,370
really fun to have a side project where

00:20:24,600 --> 00:20:29,430
you're writing code and making things

00:20:26,370 --> 00:20:31,500
happen in the compiler you know it takes

00:20:29,430 --> 00:20:34,350
kind of a special kind of person so you

00:20:31,500 --> 00:20:36,300
spend their volunteer time scheduling

00:20:34,350 --> 00:20:38,130
meetings and sending emails to people

00:20:36,300 --> 00:20:41,160
and just trying to help people work

00:20:38,130 --> 00:20:44,340
together if you're one of those special

00:20:41,160 --> 00:20:48,960
people please let me know we really we

00:20:44,340 --> 00:20:51,870
really need more of you and you know in

00:20:48,960 --> 00:20:54,020
the coming years I think the the core

00:20:51,870 --> 00:20:56,790
team wants to put a lot more work into

00:20:54,020 --> 00:20:59,070
supporting and guiding these growing

00:20:56,790 --> 00:21:01,050
sets of leaders making it more clear

00:20:59,070 --> 00:21:03,840
what's expected and and how to get

00:21:01,050 --> 00:21:05,810
involved and I think one one big change

00:21:03,840 --> 00:21:08,550
that we've been working toward and

00:21:05,810 --> 00:21:10,590
really want to go all the way on is not

00:21:08,550 --> 00:21:13,470
having any individual lead more than one

00:21:10,590 --> 00:21:16,170
team or working group at the beginning

00:21:13,470 --> 00:21:19,170
you know people sometimes relating two

00:21:16,170 --> 00:21:21,150
or three different groups and it it

00:21:19,170 --> 00:21:23,130
basically D values that role of

00:21:21,150 --> 00:21:26,070
leadership and makes it impossible to

00:21:23,130 --> 00:21:30,300
actually be effective right but to pull

00:21:26,070 --> 00:21:33,000
that off we need more leaders so along

00:21:30,300 --> 00:21:35,010
with the growth in the number of people

00:21:33,000 --> 00:21:37,140
on the teams if you've been paying

00:21:35,010 --> 00:21:39,030
attention to to rust in the last year

00:21:37,140 --> 00:21:41,220
you may have noticed that we've spun up

00:21:39,030 --> 00:21:43,950
a seemingly endless number of working

00:21:41,220 --> 00:21:46,740
groups and in fact the core team

00:21:43,950 --> 00:21:48,780
recently declared a moratorium on new

00:21:46,740 --> 00:21:51,150
working groups until we can sort of

00:21:48,780 --> 00:21:52,980
figure this situation out so the working

00:21:51,150 --> 00:21:55,050
group model I think has been really

00:21:52,980 --> 00:21:57,420
effective like the the distinction from

00:21:55,050 --> 00:22:00,720
the teams team versus working group is

00:21:57,420 --> 00:22:03,900
basically the teams are ultimately in

00:22:00,720 --> 00:22:06,420
charge of the technical decisions about

00:22:03,900 --> 00:22:07,440
what gets stabilized in rust what what

00:22:06,420 --> 00:22:10,289
are we making promises

00:22:07,440 --> 00:22:13,139
about the working groups just do stuff

00:22:10,289 --> 00:22:15,899
and doing stuff has been really great

00:22:13,139 --> 00:22:17,610
and so we've been we've had working the

00:22:15,899 --> 00:22:21,570
four really important working groups

00:22:17,610 --> 00:22:22,919
this year as part of Rus 2018 on domains

00:22:21,570 --> 00:22:25,919
of use some of which I mentioned earlier

00:22:22,919 --> 00:22:28,230
so we have embedded CLI networking and

00:22:25,919 --> 00:22:30,120
web assembly and they have been just

00:22:28,230 --> 00:22:32,129
knocking out of the part it's been

00:22:30,120 --> 00:22:33,929
incredible but there's a lot of interest

00:22:32,129 --> 00:22:36,690
in and making more and more of these and

00:22:33,929 --> 00:22:39,240
that's fantastic we want to empower

00:22:36,690 --> 00:22:41,190
people we want to find good leaders but

00:22:39,240 --> 00:22:44,850
as the structure of the organization

00:22:41,190 --> 00:22:46,860
grows that creates problems too because

00:22:44,850 --> 00:22:49,110
now as we get more and more of these

00:22:46,860 --> 00:22:53,639
teams we have to figure out how to

00:22:49,110 --> 00:22:56,639
coordinate in other words this growth in

00:22:53,639 --> 00:22:59,039
team count is part of an effort to

00:22:56,639 --> 00:23:02,580
decentralize and enable more people to

00:22:59,039 --> 00:23:04,559
to get things done you know without sort

00:23:02,580 --> 00:23:05,490
of blocking on central teams like the

00:23:04,559 --> 00:23:08,639
core team or whatnot

00:23:05,490 --> 00:23:10,740
and that's good but there are risks

00:23:08,639 --> 00:23:12,059
involved there are risks that teams will

00:23:10,740 --> 00:23:15,299
be pulling in different directions or

00:23:12,059 --> 00:23:18,120
doing contradictory things and I find

00:23:15,299 --> 00:23:20,009
often if you get a team of people who

00:23:18,120 --> 00:23:23,370
are all super enthusiastic about a

00:23:20,009 --> 00:23:26,490
certain technical area like collections

00:23:23,370 --> 00:23:28,620
for example it's very common for that

00:23:26,490 --> 00:23:30,330
team to start proposing very esoteric

00:23:28,620 --> 00:23:32,340
stuff because they're really into

00:23:30,330 --> 00:23:33,750
collections right and so they're they're

00:23:32,340 --> 00:23:35,519
just thinking about collections and not

00:23:33,750 --> 00:23:38,159
any other part of the picture so we have

00:23:35,519 --> 00:23:39,929
to figure out how to balance that kind

00:23:38,159 --> 00:23:41,460
of drive like we want those experts to

00:23:39,929 --> 00:23:43,529
be doing that work but we have to

00:23:41,460 --> 00:23:45,720
balance it with a sort of global

00:23:43,529 --> 00:23:47,909
coherence to make sure that the RUS

00:23:45,720 --> 00:23:49,500
project is fitting together well and

00:23:47,909 --> 00:23:52,590
that we're not getting too lopsided in

00:23:49,500 --> 00:23:54,929
one direction or another and part of

00:23:52,590 --> 00:23:58,080
this too is the core team has continued

00:23:54,929 --> 00:24:01,830
to grow and I think we're sort of

00:23:58,080 --> 00:24:03,299
straining to be effective and so in the

00:24:01,830 --> 00:24:05,070
coming years I think we want to

00:24:03,299 --> 00:24:08,070
restructure how the central leadership

00:24:05,070 --> 00:24:09,149
works to and I have ideas about that I'm

00:24:08,070 --> 00:24:11,039
not going to get into it and the talked

00:24:09,149 --> 00:24:14,610
on but if you have thoughts I'd love to

00:24:11,039 --> 00:24:17,490
chat with you after okay so those those

00:24:14,610 --> 00:24:21,270
are problems related to contributor and

00:24:17,490 --> 00:24:26,030
team growth and then there's one more

00:24:21,270 --> 00:24:30,180
set of problems and these relate to

00:24:26,030 --> 00:24:34,290
using rust in larger and larger scale

00:24:30,180 --> 00:24:36,450
programs so you know as rust initially

00:24:34,290 --> 00:24:38,460
gets adopted obviously people are

00:24:36,450 --> 00:24:40,770
writing brand new code that the code

00:24:38,460 --> 00:24:43,230
bases are not that big there's not

00:24:40,770 --> 00:24:46,220
initially such a thing as legacy rust

00:24:43,230 --> 00:24:51,480
code but that's changing over time

00:24:46,220 --> 00:24:54,150
so this graph excuse me um is from our

00:24:51,480 --> 00:24:56,400
2018 survey the blogpost on the survey

00:24:54,150 --> 00:24:59,040
results should go out next week but this

00:24:56,400 --> 00:25:02,010
is a little sneak peak so this is a

00:24:59,040 --> 00:25:04,530
breakdown that we give every year of the

00:25:02,010 --> 00:25:07,140
size of the code rust code bases that

00:25:04,530 --> 00:25:10,010
people are working on from the survey

00:25:07,140 --> 00:25:13,140
respondents and what we've seen

00:25:10,010 --> 00:25:15,750
unsurprisingly each year is that the

00:25:13,140 --> 00:25:19,170
proportion of larger code bases is

00:25:15,750 --> 00:25:21,150
growing right so 20% of the survey

00:25:19,170 --> 00:25:24,600
respondents and we had it run around I

00:25:21,150 --> 00:25:25,950
think five or six thousand twenty

00:25:24,600 --> 00:25:27,960
percent of them say they work on code

00:25:25,950 --> 00:25:30,840
bases between 10,000 and a hundred

00:25:27,960 --> 00:25:34,950
thousand lines of code that's pretty

00:25:30,840 --> 00:25:38,460
sizable and three percent work on code

00:25:34,950 --> 00:25:40,200
base is even bigger than that so this is

00:25:38,460 --> 00:25:42,870
great right this is a sign that not only

00:25:40,200 --> 00:25:44,550
is rust getting adopted but it has a

00:25:42,870 --> 00:25:46,800
sort of lasting place in these

00:25:44,550 --> 00:25:48,060
organizations that you know for the code

00:25:46,800 --> 00:25:50,720
bases to get this big people are

00:25:48,060 --> 00:25:54,210
continuing to use rusts that's awesome

00:25:50,720 --> 00:25:58,740
but as with all these other things it

00:25:54,210 --> 00:26:02,220
leads to problems as well so you know

00:25:58,740 --> 00:26:04,350
again going back to cases where features

00:26:02,220 --> 00:26:07,350
are unstable or things have only

00:26:04,350 --> 00:26:08,850
partially shipped etc sometimes we'll

00:26:07,350 --> 00:26:12,090
hear from these big production users

00:26:08,850 --> 00:26:14,640
saying that they're doing just insane

00:26:12,090 --> 00:26:16,350
things to make it work and they're under

00:26:14,640 --> 00:26:18,390
pressure to ship this is natural this is

00:26:16,350 --> 00:26:20,930
just what happens with software but it's

00:26:18,390 --> 00:26:23,790
going to exert some new pressures on

00:26:20,930 --> 00:26:25,140
language design and you know other

00:26:23,790 --> 00:26:27,480
aspects of the technical direction of

00:26:25,140 --> 00:26:29,490
the project right so just to make this a

00:26:27,480 --> 00:26:31,920
little more concrete you know this is

00:26:29,490 --> 00:26:36,900
something I I in the language team

00:26:31,920 --> 00:26:39,300
worried about a lot where partly because

00:26:36,900 --> 00:26:40,980
of our consensus process and partly

00:26:39,300 --> 00:26:43,920
because of just the nature of shipping

00:26:40,980 --> 00:26:46,290
software we often end up with these

00:26:43,920 --> 00:26:49,410
kinds of cliffs that you can fall off in

00:26:46,290 --> 00:26:52,440
the language so for example the

00:26:49,410 --> 00:26:55,440
infiltrate feature was has been hotly

00:26:52,440 --> 00:26:58,350
desired since well before rust 1.0 even

00:26:55,440 --> 00:27:00,780
and we eventually did ship a stable

00:26:58,350 --> 00:27:05,130
version of infiltrate but it only works

00:27:00,780 --> 00:27:07,020
in sort of inherent methods or free

00:27:05,130 --> 00:27:09,930
functions it you can't use it inside

00:27:07,020 --> 00:27:12,090
crates and so people get used to using

00:27:09,930 --> 00:27:13,710
this feature and it adds some

00:27:12,090 --> 00:27:15,810
expressiveness to the language but then

00:27:13,710 --> 00:27:18,030
when they start scaling up they hit this

00:27:15,810 --> 00:27:19,680
cliff and they can't use it in this one

00:27:18,030 --> 00:27:23,640
place they need it and so they start

00:27:19,680 --> 00:27:26,280
using crazy workarounds similarly we've

00:27:23,640 --> 00:27:27,720
had associated type since 1.0 but there

00:27:26,280 --> 00:27:30,330
are limitations are on them they can't

00:27:27,720 --> 00:27:32,070
be generic so this is also known as

00:27:30,330 --> 00:27:35,130
higher kind of types or generic

00:27:32,070 --> 00:27:38,280
associated types we have non lexical

00:27:35,130 --> 00:27:40,080
lifetimes which is amazing but if you've

00:27:38,280 --> 00:27:41,910
been following me COEs excellent blog

00:27:40,080 --> 00:27:43,380
series you'll know that there are still

00:27:41,910 --> 00:27:45,540
lots of limitations around borrowing

00:27:43,380 --> 00:27:47,670
especially across multiple functions

00:27:45,540 --> 00:27:50,880
right and so there's there's a huge list

00:27:47,670 --> 00:27:52,710
of things like this and you know I think

00:27:50,880 --> 00:27:55,290
part of the takeaway here like it's it's

00:27:52,710 --> 00:27:58,470
unsatisfying that we have these what

00:27:55,290 --> 00:28:01,530
feel like half-measures sometimes but in

00:27:58,470 --> 00:28:03,590
a recent ranking meeting boats i think

00:28:01,530 --> 00:28:06,300
made an excellent point which is that

00:28:03,590 --> 00:28:09,030
language design is fundamentally a

00:28:06,300 --> 00:28:11,100
fractal process meaning that there's

00:28:09,030 --> 00:28:13,170
always going to be these kinds of gaps

00:28:11,100 --> 00:28:15,510
in cliffs every time you add a new

00:28:13,170 --> 00:28:17,700
feature to fill out one gap you create

00:28:15,510 --> 00:28:18,960
more gaps right so to some degree this

00:28:17,700 --> 00:28:23,760
is just something that we all have to

00:28:18,960 --> 00:28:25,500
cope with but here's the thing we've

00:28:23,760 --> 00:28:29,270
been working really hard over the last

00:28:25,500 --> 00:28:31,950
three years to improve especially the

00:28:29,270 --> 00:28:33,570
newcomer experience to rust right

00:28:31,950 --> 00:28:35,400
reducing the learning curve making the

00:28:33,570 --> 00:28:37,020
language more approachable so that we

00:28:35,400 --> 00:28:39,120
can start generating this adoption and

00:28:37,020 --> 00:28:43,950
that's been a big part of what Russ 2018

00:28:39,120 --> 00:28:46,440
is about that's great the problem is

00:28:43,950 --> 00:28:48,750
now that we're successful with that and

00:28:46,440 --> 00:28:51,000
people are picking up rust they become

00:28:48,750 --> 00:28:55,620
intermediate users and then they start

00:28:51,000 --> 00:28:57,419
hitting these cliffs and it's it's easy

00:28:55,620 --> 00:29:00,299
to sort of see how to solve all these

00:28:57,419 --> 00:29:03,000
problems right like we can add generic

00:29:00,299 --> 00:29:05,370
associated types we can extend the

00:29:03,000 --> 00:29:07,440
borrowing system we can add infiltrate

00:29:05,370 --> 00:29:09,419
into traits all right we sort of know

00:29:07,440 --> 00:29:12,059
the story for all of these things but

00:29:09,419 --> 00:29:14,789
there's a risk that by filling in all

00:29:12,059 --> 00:29:16,440
those gaps we also increase the

00:29:14,789 --> 00:29:19,289
complexity and learning curve of the

00:29:16,440 --> 00:29:21,659
language overall and therefore sort of

00:29:19,289 --> 00:29:23,880
defeat our original goal of making it a

00:29:21,659 --> 00:29:26,490
newcomer friendly so one of the

00:29:23,880 --> 00:29:28,260
challenges you know in the next years is

00:29:26,490 --> 00:29:31,590
going to be how do we balance between

00:29:28,260 --> 00:29:33,899
filling out these gaps and you know

00:29:31,590 --> 00:29:35,669
staying friendly to two newcomers and

00:29:33,899 --> 00:29:38,240
you know staying a language that you can

00:29:35,669 --> 00:29:42,120
fit in your head

00:29:38,240 --> 00:29:45,840
here's another preview from the survey

00:29:42,120 --> 00:29:50,039
results where people were asked to rate

00:29:45,840 --> 00:29:51,960
their expertise in rust I really want to

00:29:50,039 --> 00:29:55,980
know the people who are on the ten I

00:29:51,960 --> 00:29:57,539
definitely don't count myself there but

00:29:55,980 --> 00:30:00,149
you know I think this is this is a

00:29:57,539 --> 00:30:01,980
really interesting curve and one that's

00:30:00,149 --> 00:30:05,250
maybe a little different from from past

00:30:01,980 --> 00:30:07,159
years where it's kind of clumping around

00:30:05,250 --> 00:30:10,039
the middle right um

00:30:07,159 --> 00:30:12,659
so people consider themselves

00:30:10,039 --> 00:30:17,279
intermediate row stations a lot right

00:30:12,659 --> 00:30:19,370
and this this is this is a shift and one

00:30:17,279 --> 00:30:23,159
of the interesting things about this

00:30:19,370 --> 00:30:25,830
which Florian's blog post this year I

00:30:23,159 --> 00:30:28,830
thought stated really really well and

00:30:25,830 --> 00:30:32,429
stuck with me is in a lot of ways we

00:30:28,830 --> 00:30:33,830
don't even understand as a community how

00:30:32,429 --> 00:30:38,789
to use rust yet

00:30:33,830 --> 00:30:40,169
so you know there are what florins post

00:30:38,789 --> 00:30:44,250
is really beautiful talking about this

00:30:40,169 --> 00:30:48,000
how there are patterns of using rust or

00:30:44,250 --> 00:30:49,620
any other language that you could do at

00:30:48,000 --> 00:30:51,779
the very beginning like all the features

00:30:49,620 --> 00:30:55,080
were there but nobody knew how to do

00:30:51,779 --> 00:30:56,700
that and it takes years of exploration

00:30:55,080 --> 00:30:59,310
and building software and curry

00:30:56,700 --> 00:31:01,200
the hacks to start to identify these

00:30:59,310 --> 00:31:04,620
patterns and make them part of the

00:31:01,200 --> 00:31:06,420
culture and community and so you know

00:31:04,620 --> 00:31:10,320
part of the premise of Florian's post is

00:31:06,420 --> 00:31:12,450
circa 2018 we are finally starting to

00:31:10,320 --> 00:31:14,430
understand what rust 2015 was about

00:31:12,450 --> 00:31:17,640
right we've collectively gotten enough

00:31:14,430 --> 00:31:20,280
experience so you know as I said it's

00:31:17,640 --> 00:31:21,750
it's tempting to think that we know what

00:31:20,280 --> 00:31:26,190
all the gaps are and how to fill them

00:31:21,750 --> 00:31:28,620
but there's risk there because we don't

00:31:26,190 --> 00:31:30,900
know rust as well as we think we do and

00:31:28,620 --> 00:31:34,350
if we rush to fill in all of these gaps

00:31:30,900 --> 00:31:35,970
not only do we risk alienating newcomers

00:31:34,350 --> 00:31:40,530
and you know raising the learning curve

00:31:35,970 --> 00:31:41,790
again but we may create deeper problems

00:31:40,530 --> 00:31:44,040
in the language that we can't anticipate

00:31:41,790 --> 00:31:46,440
or rule out patterns that we haven't

00:31:44,040 --> 00:31:48,660
discovered yet so again there's there's

00:31:46,440 --> 00:31:50,370
a tricky balance here the pressure is

00:31:48,660 --> 00:31:53,330
going to increase more and more over

00:31:50,370 --> 00:31:55,830
time to fill in these gaps as these big

00:31:53,330 --> 00:31:59,520
production users are are hitting these

00:31:55,830 --> 00:32:02,780
problems but we also need to take our

00:31:59,520 --> 00:32:04,980
time and make sure we fully understand

00:32:02,780 --> 00:32:10,410
how to use this language that we're all

00:32:04,980 --> 00:32:11,940
developing together so those are some of

00:32:10,410 --> 00:32:13,710
the challenges that I see ahead of us

00:32:11,940 --> 00:32:16,170
some some themes I'm sure that you can

00:32:13,710 --> 00:32:19,950
think of others and I think you know as

00:32:16,170 --> 00:32:21,870
we kick off the process of thinking

00:32:19,950 --> 00:32:24,240
ahead for the next three years to the

00:32:21,870 --> 00:32:29,100
next edition of rust let's call it rust

00:32:24,240 --> 00:32:31,860
2021 I'm not really so worried about

00:32:29,100 --> 00:32:34,200
just the pure technical pieces like we

00:32:31,860 --> 00:32:35,610
have a very very technically minded

00:32:34,200 --> 00:32:38,190
community we have a lot of excellent

00:32:35,610 --> 00:32:40,790
people the RFC process catches all kinds

00:32:38,190 --> 00:32:44,670
of mistakes my worries are almost all

00:32:40,790 --> 00:32:47,700
people worries how do we how do we

00:32:44,670 --> 00:32:48,900
grapple with this growth these are

00:32:47,700 --> 00:32:50,310
really hard challenges they're

00:32:48,900 --> 00:32:54,420
challenges that every successful

00:32:50,310 --> 00:32:56,610
language community has faced and you

00:32:54,420 --> 00:32:57,720
know I didn't want to go into examples

00:32:56,610 --> 00:33:00,300
here but you can look at language

00:32:57,720 --> 00:33:01,440
communities that have stumbled on some

00:33:00,300 --> 00:33:03,330
of these challenges and

00:33:01,440 --> 00:33:08,789
that has caused all kinds of damage

00:33:03,330 --> 00:33:09,539
right so my challenge to all of us to

00:33:08,789 --> 00:33:11,429
our community

00:33:09,539 --> 00:33:13,470
as we go into this planning process is

00:33:11,429 --> 00:33:16,409
to try to take a really clear I'd to

00:33:13,470 --> 00:33:19,169
look at these challenges focus not just

00:33:16,409 --> 00:33:20,940
on the technical evolution of Russ but

00:33:19,169 --> 00:33:25,080
also the people challenges that are

00:33:20,940 --> 00:33:29,429
coming with success and you know going

00:33:25,080 --> 00:33:32,220
back to that initial quote from the

00:33:29,429 --> 00:33:35,460
roadmap that the core team wants Russ to

00:33:32,220 --> 00:33:37,740
be successful but crucially in a way

00:33:35,460 --> 00:33:40,289
that doesn't violate our core values

00:33:37,740 --> 00:33:41,820
that stays true to to what we're what

00:33:40,289 --> 00:33:44,789
we're about right it's not success at

00:33:41,820 --> 00:33:48,049
all cost so I think a key in all of this

00:33:44,789 --> 00:33:50,940
as we grapple these problems is to have

00:33:48,049 --> 00:33:53,039
clarity and commitment to our core

00:33:50,940 --> 00:33:54,389
values and to me the most part value of

00:33:53,039 --> 00:33:57,450
rust is that it's an empowering

00:33:54,389 --> 00:33:59,940
technology it's a technology that can

00:33:57,450 --> 00:34:02,669
take a JavaScript developer and let them

00:33:59,940 --> 00:34:04,889
write systems code or take a grizzled

00:34:02,669 --> 00:34:06,269
C++ hacker and let them be far more

00:34:04,889 --> 00:34:08,329
ambitious with the kinds of things they

00:34:06,269 --> 00:34:11,099
do right it can let you face down

00:34:08,329 --> 00:34:13,950
concurrency without being terrified of

00:34:11,099 --> 00:34:15,690
bugs or program your first embedded

00:34:13,950 --> 00:34:17,550
device right rust is just full of

00:34:15,690 --> 00:34:19,859
possibilities and empowerment and I

00:34:17,550 --> 00:34:22,379
think if we can stay true to that spirit

00:34:19,859 --> 00:34:26,940
as we grow as money comes into the

00:34:22,379 --> 00:34:27,900
picture then we'll actually fly thank

00:34:26,940 --> 00:34:28,920
you

00:34:27,900 --> 00:34:31,600
[Applause]

00:34:28,920 --> 00:34:38,830
[Music]

00:34:31,600 --> 00:34:45,260
[Applause]

00:34:38,830 --> 00:34:46,700
well do you want questions so I wanted

00:34:45,260 --> 00:34:50,690
to question we have time for one or two

00:34:46,700 --> 00:35:07,430
questions anyone as any question sorry

00:34:50,690 --> 00:35:09,550
yeah how to keep track of the language

00:35:07,430 --> 00:35:12,080
and understand language as it grows and

00:35:09,550 --> 00:35:14,720
it seems to me like and maybe you've

00:35:12,080 --> 00:35:16,580
already considered this a more formal

00:35:14,720 --> 00:35:18,490
approach to the language could help in

00:35:16,580 --> 00:35:22,460
that direction so for example Rawls and

00:35:18,490 --> 00:35:24,230
Derek's work on Rust Belt some like may

00:35:22,460 --> 00:35:25,640
be helpful to keep track of

00:35:24,230 --> 00:35:27,170
understanding what the current language

00:35:25,640 --> 00:35:28,820
is and how it could evolve in a way

00:35:27,170 --> 00:35:30,410
that's safe do we have thoughts about

00:35:28,820 --> 00:35:32,090
this and something they're thinking

00:35:30,410 --> 00:35:35,540
about yeah absolutely

00:35:32,090 --> 00:35:39,740
so just for those who aren't aware of

00:35:35,540 --> 00:35:41,990
this work so this is there's something

00:35:39,740 --> 00:35:45,320
called the Rust Belt project and Ralph

00:35:41,990 --> 00:35:47,180
young who's here today is you know sort

00:35:45,320 --> 00:35:51,670
of I would say the lead of this project

00:35:47,180 --> 00:35:55,400
and so part of its goal is to

00:35:51,670 --> 00:35:58,220
mathematically prove both the sort of

00:35:55,400 --> 00:36:00,680
safety and soundness of core rust but

00:35:58,220 --> 00:36:03,740
also give you the tools to verify that

00:36:00,680 --> 00:36:06,680
unsafe code actually behaves safely

00:36:03,740 --> 00:36:08,420
right so this is critically important

00:36:06,680 --> 00:36:10,820
looking at things like the standard

00:36:08,420 --> 00:36:14,230
library where we're using unsafe code to

00:36:10,820 --> 00:36:17,240
build up the basic substrate of rust and

00:36:14,230 --> 00:36:20,240
you know Ralph's group has already

00:36:17,240 --> 00:36:22,820
verified a bunch of the core pieces in

00:36:20,240 --> 00:36:25,970
the standard library and also found some

00:36:22,820 --> 00:36:29,480
bugs so this is hugely important work

00:36:25,970 --> 00:36:32,180
and one of the things that I find really

00:36:29,480 --> 00:36:36,950
exciting about it is unlike many

00:36:32,180 --> 00:36:39,710
academics Ralph is on github and sort of

00:36:36,950 --> 00:36:43,070
is following the the RFC process and so

00:36:39,710 --> 00:36:44,330
you know even in this last year if

00:36:43,070 --> 00:36:46,570
you've been following the development of

00:36:44,330 --> 00:36:49,100
things like pinning for async/await

00:36:46,570 --> 00:36:49,760
Ralph has been there in the thick of it

00:36:49,100 --> 00:36:51,800
helping

00:36:49,760 --> 00:36:54,140
have confidence in the safety of what

00:36:51,800 --> 00:36:56,900
we're doing so I completely agree that's

00:36:54,140 --> 00:36:59,840
that's critical for especially these

00:36:56,900 --> 00:37:02,350
extensions to the language that are more

00:36:59,840 --> 00:37:06,980
fundamental that sort of risk soundness

00:37:02,350 --> 00:37:09,430
but at the same time a lot of the growth

00:37:06,980 --> 00:37:13,340
and features that I'm thinking about I

00:37:09,430 --> 00:37:16,670
don't feel like soundness is a primary

00:37:13,340 --> 00:37:19,490
worry it's you know like if you look at

00:37:16,670 --> 00:37:22,360
something like hire kind of types that's

00:37:19,490 --> 00:37:24,350
very well understood I think we know

00:37:22,360 --> 00:37:27,860
more or less how it should taste in

00:37:24,350 --> 00:37:30,260
language the fear is more that once you

00:37:27,860 --> 00:37:33,350
add that high-powered features you

00:37:30,260 --> 00:37:35,030
create more gaps more more places of

00:37:33,350 --> 00:37:40,340
interactions between those features and

00:37:35,030 --> 00:37:41,690
other ones so not not to pick on another

00:37:40,340 --> 00:37:45,980
language but I'm gonna pick on another

00:37:41,690 --> 00:37:48,830
language so I back in grad school I

00:37:45,980 --> 00:37:50,390
played around with Haskell a bit high

00:37:48,830 --> 00:37:53,150
schools of really cool language lots of

00:37:50,390 --> 00:37:54,680
good ideas and it has lots of extensions

00:37:53,150 --> 00:37:56,600
that you can turn on with all kinds of

00:37:54,680 --> 00:37:59,750
bells and whistles and new features and

00:37:56,600 --> 00:38:01,460
my experience using this is if I turn on

00:37:59,750 --> 00:38:04,190
one of those extensions and started

00:38:01,460 --> 00:38:05,810
using one of those new features after a

00:38:04,190 --> 00:38:07,700
while I'd find myself running into a

00:38:05,810 --> 00:38:09,800
wall and I need to turn on another

00:38:07,700 --> 00:38:11,060
feature and then I would you know

00:38:09,800 --> 00:38:12,320
continue developing with that and then

00:38:11,060 --> 00:38:14,060
I'd run into another wall and have to

00:38:12,320 --> 00:38:16,220
turn on another feature and that that

00:38:14,060 --> 00:38:19,670
has left me with this visceral fear and

00:38:16,220 --> 00:38:21,470
language design that you know if it's

00:38:19,670 --> 00:38:25,250
like the the little old lady who

00:38:21,470 --> 00:38:26,810
swallowed a fly like if you try to solve

00:38:25,250 --> 00:38:28,580
one problem by adding a feature you're

00:38:26,810 --> 00:38:30,860
going to create a cascade of problems so

00:38:28,580 --> 00:38:33,010
so that that's sort of my core were

00:38:30,860 --> 00:38:33,010
either

00:38:35,099 --> 00:38:45,420
do we have time for another question yes

00:38:37,460 --> 00:38:48,119
yeah short one hi thank you great talk

00:38:45,420 --> 00:38:50,549
are we actively reaching out to other

00:38:48,119 --> 00:38:53,460
language communities to figure out what

00:38:50,549 --> 00:38:55,890
lessons they have learned and trying to

00:38:53,460 --> 00:38:57,420
actively apply those lessons to rest

00:38:55,890 --> 00:39:01,259
that's a great question

00:38:57,420 --> 00:39:03,390
um so one of the things that I love

00:39:01,259 --> 00:39:06,390
about being part of the rest community

00:39:03,390 --> 00:39:10,140
is because it's it's gotten so big

00:39:06,390 --> 00:39:12,989
generally people come to us so we do

00:39:10,140 --> 00:39:14,420
have contacts with sort of

00:39:12,989 --> 00:39:16,769
representatives from lots of other

00:39:14,420 --> 00:39:19,920
language communities that participate on

00:39:16,769 --> 00:39:21,029
on RFC's so like we will frequently if

00:39:19,920 --> 00:39:24,509
we're talking about something in a trait

00:39:21,029 --> 00:39:26,489
system there are a couple of prominent

00:39:24,509 --> 00:39:28,140
Haskell people who will be on the thread

00:39:26,489 --> 00:39:29,789
and say well we had this in this

00:39:28,140 --> 00:39:31,289
experience with type classes in high

00:39:29,789 --> 00:39:34,440
school and you know here's the link in a

00:39:31,289 --> 00:39:38,039
paper and so on so yeah we we definitely

00:39:34,440 --> 00:39:40,319
try to be aware and delight within the

00:39:38,039 --> 00:39:43,440
language team also we've tried to have a

00:39:40,319 --> 00:39:46,200
diversity of language backgrounds to

00:39:43,440 --> 00:39:47,670
draw those things in so you know it's

00:39:46,200 --> 00:39:51,450
definitely something we do on the other

00:39:47,670 --> 00:39:54,869
hand you know language design is very

00:39:51,450 --> 00:39:57,299
particular so things that are you know

00:39:54,869 --> 00:40:00,079
even though Haskell's type classes and

00:39:57,299 --> 00:40:02,519
Russ traits look very similar

00:40:00,079 --> 00:40:03,690
superficially when you get down to the

00:40:02,519 --> 00:40:05,700
details there are a lot of important

00:40:03,690 --> 00:40:08,430
differences and so in my experience it's

00:40:05,700 --> 00:40:10,890
often been less useful than you might

00:40:08,430 --> 00:40:13,619
hope to try to port experiences from

00:40:10,890 --> 00:40:17,579
other languages does that also apply to

00:40:13,619 --> 00:40:19,680
people problems as well I say more so

00:40:17,579 --> 00:40:21,239
some of the most of the issues you

00:40:19,680 --> 00:40:24,420
talked about weren't language design

00:40:21,239 --> 00:40:25,799
issues at all presumably other language

00:40:24,420 --> 00:40:28,349
communities have dealt with these things

00:40:25,799 --> 00:40:31,440
as well that is a very interesting

00:40:28,349 --> 00:40:34,680
question and yeah I've definitely had

00:40:31,440 --> 00:40:36,569
conversations with leaders in other

00:40:34,680 --> 00:40:40,769
communities like Martin in Turkey first

00:40:36,569 --> 00:40:44,279
scala for example and to be honest I

00:40:40,769 --> 00:40:47,600
think in a lot of ways rust is blazing

00:40:44,279 --> 00:40:49,460
its own path with the RFC process and

00:40:47,600 --> 00:40:53,480
the way that we view governance and I

00:40:49,460 --> 00:40:55,430
don't I I feel like the direction of

00:40:53,480 --> 00:40:58,160
influence is largely flowing from Russ

00:40:55,430 --> 00:41:02,900
to other languages which is something

00:40:58,160 --> 00:41:06,250
I'm very proud of all right thank you

00:41:02,900 --> 00:41:06,250

YouTube URL: https://www.youtube.com/watch?v=0sIgVnRAcn0


