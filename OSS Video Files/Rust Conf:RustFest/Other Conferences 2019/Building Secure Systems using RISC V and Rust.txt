Title: Building Secure Systems using RISC V and Rust
Publication date: 2019-07-29
Playlist: Other Conferences 2019
Description: 
	Presentation by Arun Thomas at Draper Labs on June 12, 2019 at the RISC-V Workshop Zurich at ETH Zurich in Zurich, Switzerland. To view the slides from this session, please visit: https://content.riscv.org/wp-content/uploads/2019/06/14.05-building_secure_systems-1.pdf
Captions: 
	00:00:03,570 --> 00:00:08,550
next person you probably know is a room

00:00:06,450 --> 00:00:08,790
Thomas who's showing our software Task

00:00:08,550 --> 00:00:11,220
Group

00:00:08,790 --> 00:00:13,440
he's principal specialist of Draper labs

00:00:11,220 --> 00:00:15,630
and he's going to tell us a little bit

00:00:13,440 --> 00:00:19,369
about the building system with his rival

00:00:15,630 --> 00:00:19,369
rust also very exciting

00:00:33,760 --> 00:00:39,370
let's never here um hi I'm maroon Thomas

00:00:37,020 --> 00:00:43,960
my talk is titled building secure

00:00:39,370 --> 00:00:46,239
systems using risk five and rust so

00:00:43,960 --> 00:00:49,720
here's a roadmap for my talk I will talk

00:00:46,239 --> 00:00:51,790
about building secure systems my take is

00:00:49,720 --> 00:00:54,879
you might expect from the title of my

00:00:51,790 --> 00:00:57,910
talk is that risk five and rust are a

00:00:54,879 --> 00:01:03,040
good foundation for building secure

00:00:57,910 --> 00:01:04,960
computer systems so in particular I'm

00:01:03,040 --> 00:01:06,610
not necessarily saying that risk if you

00:01:04,960 --> 00:01:08,259
use risk five and rust that all your

00:01:06,610 --> 00:01:09,220
security problems will go away but I

00:01:08,259 --> 00:01:12,580
think it does provide a good foundation

00:01:09,220 --> 00:01:14,020
so in particular the the advantages of

00:01:12,580 --> 00:01:15,850
risk five hardware or the openness

00:01:14,020 --> 00:01:18,810
simplicity and flexibility provides a

00:01:15,850 --> 00:01:21,580
good platform for doing your hardware

00:01:18,810 --> 00:01:24,100
for building secure hardware and a rust

00:01:21,580 --> 00:01:26,200
software provides the state you have the

00:01:24,100 --> 00:01:29,050
safety performance and productivity of a

00:01:26,200 --> 00:01:33,610
safe systems language that makes your

00:01:29,050 --> 00:01:37,440
system software much more secure so how

00:01:33,610 --> 00:01:37,440
do you build a secure computer system

00:01:38,280 --> 00:01:44,229
antivirus I would say is not the answer

00:01:40,619 --> 00:01:46,149
so just putting endpoint protection or

00:01:44,229 --> 00:01:47,890
adding some sort of security product on

00:01:46,149 --> 00:01:50,440
top is not the right way to go

00:01:47,890 --> 00:01:51,880
you can ask project zero about this the

00:01:50,440 --> 00:01:53,530
Google folks have made a sort of a

00:01:51,880 --> 00:01:55,090
career out of breaking endpoint

00:01:53,530 --> 00:01:58,569
protection systems to like hilarious

00:01:55,090 --> 00:02:01,300
effect so instead you need to design

00:01:58,569 --> 00:02:03,280
security as you security needs to be a

00:02:01,300 --> 00:02:05,800
first-class design constraint it needs

00:02:03,280 --> 00:02:10,209
to pervade for me at your whole design

00:02:05,800 --> 00:02:12,160
process and in particular security

00:02:10,209 --> 00:02:14,590
securing computer systems is complicated

00:02:12,160 --> 00:02:16,300
because you security spans all the

00:02:14,590 --> 00:02:18,550
layers in your system so the hardware

00:02:16,300 --> 00:02:20,230
operating systems programming languages

00:02:18,550 --> 00:02:23,319
applications all of the layers in your

00:02:20,230 --> 00:02:24,910
system so a flaw in any layer can

00:02:23,319 --> 00:02:28,360
compromise your systems security

00:02:24,910 --> 00:02:32,770
requirements and in particular flaws and

00:02:28,360 --> 00:02:36,930
lower layers or even more serious so how

00:02:32,770 --> 00:02:39,160
are we doing it turns out as an industry

00:02:36,930 --> 00:02:40,989
security is hard right I mean there's a

00:02:39,160 --> 00:02:42,219
lot of things I mean we've seen a number

00:02:40,989 --> 00:02:44,230
of these new attacks on Hardware

00:02:42,219 --> 00:02:46,150
speculative execution attacks things

00:02:44,230 --> 00:02:47,580
like heartbleed it's very challenging to

00:02:46,150 --> 00:02:48,990
secure computer systems

00:02:47,580 --> 00:02:52,670
especially since we're building on

00:02:48,990 --> 00:02:57,390
legacy technologies so can we do better

00:02:52,670 --> 00:02:58,800
I believe we can I think in the 21st

00:02:57,390 --> 00:03:01,530
century we can start looking beyond

00:02:58,800 --> 00:03:04,500
these legacy technologies I think we can

00:03:01,530 --> 00:03:06,750
start looking at things like risk v and

00:03:04,500 --> 00:03:09,750
rust and use that to build a secure

00:03:06,750 --> 00:03:12,090
foundation for building Hardware secure

00:03:09,750 --> 00:03:13,290
systems in the 21st century and I'll

00:03:12,090 --> 00:03:16,920
talk more about what the advantages

00:03:13,290 --> 00:03:18,480
verse 5 and rust are so first I'll talk

00:03:16,920 --> 00:03:20,460
about verse 5 worth the risk 5 workshops

00:03:18,480 --> 00:03:23,880
of course I'm gonna plug risk 5 for

00:03:20,460 --> 00:03:25,500
doing secure systems so risk 5 as we've

00:03:23,880 --> 00:03:28,680
heard in the last couple days opening up

00:03:25,500 --> 00:03:31,020
the hardware ecosystem having a simple

00:03:28,680 --> 00:03:33,900
open customizable is a is a big deal so

00:03:31,020 --> 00:03:36,990
there's no more homegrown custom bespoke

00:03:33,900 --> 00:03:38,970
is aise everyone can have standardized

00:03:36,990 --> 00:03:40,920
and the one is a that's supposed to span

00:03:38,970 --> 00:03:43,440
everything you might remember Krista's

00:03:40,920 --> 00:03:45,959
goal to have this one I say it spans all

00:03:43,440 --> 00:03:48,330
computing devices and we'd all work

00:03:45,959 --> 00:03:51,330
together on standardizing interfaces for

00:03:48,330 --> 00:03:53,400
extensions that we need and we're seeing

00:03:51,330 --> 00:03:55,590
a lot of open hardware implementations

00:03:53,400 --> 00:03:57,510
now so we saw we heard about the low

00:03:55,590 --> 00:03:58,980
risk Pulp chips Alliance and the open

00:03:57,510 --> 00:04:01,950
hardware group so you're starting to see

00:03:58,980 --> 00:04:05,340
a number of open risk 5 implementations

00:04:01,950 --> 00:04:07,140
so it's great and so by having this open

00:04:05,340 --> 00:04:09,090
I say these open hardware limitations

00:04:07,140 --> 00:04:10,950
industry and academia can collaborate

00:04:09,090 --> 00:04:13,140
more effectively so you don't need any

00:04:10,950 --> 00:04:14,580
NDA's you just need to clone and get

00:04:13,140 --> 00:04:15,870
repo and we can all work together

00:04:14,580 --> 00:04:18,299
collectively in solving these problems

00:04:15,870 --> 00:04:19,739
and I think this is critical for making

00:04:18,299 --> 00:04:21,930
progress in solving hard security

00:04:19,739 --> 00:04:23,790
problems in particular things like

00:04:21,930 --> 00:04:25,169
spectrum meltdown won't just happen like

00:04:23,790 --> 00:04:26,760
one company is going to solve that we as

00:04:25,169 --> 00:04:28,560
an industry need to work together and

00:04:26,760 --> 00:04:31,169
having these open ISA and open

00:04:28,560 --> 00:04:35,430
hardware's important to solving this

00:04:31,169 --> 00:04:36,600
problem so this is a quote from a risk v

00:04:35,430 --> 00:04:38,460
foundation state now I think is really

00:04:36,600 --> 00:04:39,840
sort of after a specter meltdown I kind

00:04:38,460 --> 00:04:42,300
of like the quotes I've included and

00:04:39,840 --> 00:04:44,790
talked it says the risk v community has

00:04:42,300 --> 00:04:46,770
a historic opportunity to do security

00:04:44,790 --> 00:04:49,140
right from the get-go with the benefit

00:04:46,770 --> 00:04:50,610
of up-to-date knowledge so I think we we

00:04:49,140 --> 00:04:53,340
all work together we can solve some of

00:04:50,610 --> 00:04:54,960
these problems by leveraging these the

00:04:53,340 --> 00:04:56,039
open eyes say and the open implications

00:04:54,960 --> 00:04:57,479
but there's a lot of work to do and a

00:04:56,039 --> 00:04:59,100
require it will require all of us so

00:04:57,479 --> 00:05:00,830
that's sort of a call to action for all

00:04:59,100 --> 00:05:03,500
of us

00:05:00,830 --> 00:05:05,480
so risk five is sorting becoming the

00:05:03,500 --> 00:05:07,400
kind of de-facto platform for security

00:05:05,480 --> 00:05:08,510
research the center of mass is starting

00:05:07,400 --> 00:05:10,430
to shift

00:05:08,510 --> 00:05:12,620
there's several groups exploring new

00:05:10,430 --> 00:05:13,970
security ideas on verse five this folks

00:05:12,620 --> 00:05:15,800
working on tagged architectures much

00:05:13,970 --> 00:05:17,750
like my group a Hardware enforced

00:05:15,800 --> 00:05:19,310
capability is formally verified risk

00:05:17,750 --> 00:05:20,930
five implementations secure enclaves

00:05:19,310 --> 00:05:22,910
there's also a bunch of interesting work

00:05:20,930 --> 00:05:24,530
going on in the that you'll see in the

00:05:22,910 --> 00:05:26,090
security session that is right after the

00:05:24,530 --> 00:05:27,050
break my colleague Chris guess you know

00:05:26,090 --> 00:05:30,650
was talk about something work we're

00:05:27,050 --> 00:05:32,000
doing at my employer and so I think like

00:05:30,650 --> 00:05:34,220
there's a lot of pretty interesting

00:05:32,000 --> 00:05:37,160
stuff happening our risk five on rust

00:05:34,220 --> 00:05:39,020
and I think it'll sort of continue as

00:05:37,160 --> 00:05:42,020
people start doing more research on over

00:05:39,020 --> 00:05:45,470
Skype so why is rust interesting from a

00:05:42,020 --> 00:05:46,910
security perspective I'll first we'll

00:05:45,470 --> 00:05:49,610
start talking about systems programming

00:05:46,910 --> 00:05:52,490
so this is a quote from James Mickens

00:05:49,610 --> 00:05:54,650
he's a professor at Harvard now used to

00:05:52,490 --> 00:05:56,240
be a researcher at Microsoft and so I'll

00:05:54,650 --> 00:05:58,010
read out the quote it says a systems

00:05:56,240 --> 00:05:59,900
programmer has seen the terrors of the

00:05:58,010 --> 00:06:03,470
world and understood the intrinsic

00:05:59,900 --> 00:06:04,789
horror of existence so I think this is

00:06:03,470 --> 00:06:05,840
true you see some gnarly stuff when

00:06:04,789 --> 00:06:06,860
you're doing systems programming when

00:06:05,840 --> 00:06:08,570
you're when you're working in kernel

00:06:06,860 --> 00:06:10,520
code and like in low-level systems

00:06:08,570 --> 00:06:13,760
I recommend the whole article it's

00:06:10,520 --> 00:06:16,880
hilarious so why is system software

00:06:13,760 --> 00:06:18,229
challenging so a lot of the challenges

00:06:16,880 --> 00:06:19,910
have to do with you doing low-level

00:06:18,229 --> 00:06:23,330
system software you're programming

00:06:19,910 --> 00:06:25,430
without a net you the software has it's

00:06:23,330 --> 00:06:27,440
critical to enforcing security safety

00:06:25,430 --> 00:06:30,470
requirements there aren't particularly

00:06:27,440 --> 00:06:32,180
great debugging tools so and you're

00:06:30,470 --> 00:06:34,820
working on things like operating systems

00:06:32,180 --> 00:06:37,039
hypervisors runtimes drivers from where

00:06:34,820 --> 00:06:39,050
browsers and web servers so this is you

00:06:37,039 --> 00:06:41,750
know kind of like low-level system

00:06:39,050 --> 00:06:44,690
software and typically this code is

00:06:41,750 --> 00:06:46,550
written in c and c++ for performance the

00:06:44,690 --> 00:06:47,810
problem with that is that C and C++ are

00:06:46,550 --> 00:06:50,090
not memory safe so you see a lot of

00:06:47,810 --> 00:06:51,590
these memory of errors you see crazy

00:06:50,090 --> 00:06:53,120
kernel panics and things like that

00:06:51,590 --> 00:06:55,550
you see memory corruption

00:06:53,120 --> 00:06:58,160
vulnerabilities and these are often

00:06:55,550 --> 00:06:59,960
exploited our recent Microsoft study has

00:06:58,160 --> 00:07:02,030
estimated that 70% of their security

00:06:59,960 --> 00:07:06,229
bugs are due to memory safety issues so

00:07:02,030 --> 00:07:08,620
this is a real problem but we can do

00:07:06,229 --> 00:07:10,789
better I mean so systems typically

00:07:08,620 --> 00:07:14,490
system software is still mostly written

00:07:10,789 --> 00:07:15,990
see some c++ as well it turns out that

00:07:14,490 --> 00:07:17,819
languages have evolved in the last 50

00:07:15,990 --> 00:07:19,400
years programming li languages

00:07:17,819 --> 00:07:21,900
researchers have done a lot of work and

00:07:19,400 --> 00:07:23,190
rust is sort of a distillation of some

00:07:21,900 --> 00:07:25,770
promising ideas from programming

00:07:23,190 --> 00:07:29,160
language research into a production a

00:07:25,770 --> 00:07:31,470
productive production language um so

00:07:29,160 --> 00:07:32,639
rust is a safe performance systems

00:07:31,470 --> 00:07:34,530
programming language so the thing that's

00:07:32,639 --> 00:07:36,630
cool about it is its low-level enough to

00:07:34,530 --> 00:07:38,639
do systems programming but high-level

00:07:36,630 --> 00:07:40,110
enough it has a lot of the memory safety

00:07:38,639 --> 00:07:41,789
and productivity of a high level

00:07:40,110 --> 00:07:45,330
language so it's actually a nice

00:07:41,789 --> 00:07:47,550
platform for writing system software so

00:07:45,330 --> 00:07:48,960
Russ originates in Mozilla it was

00:07:47,550 --> 00:07:51,240
originally created by Mozilla research

00:07:48,960 --> 00:07:53,729
on the initial use case for rust was a

00:07:51,240 --> 00:07:56,940
developing experimental an experimental

00:07:53,729 --> 00:07:58,349
browser engine called servo and Brazil

00:07:56,940 --> 00:08:01,319
is actually using this if you're using

00:07:58,349 --> 00:08:03,690
Firefox today you're using rust code so

00:08:01,319 --> 00:08:07,409
Mozilla began shipping rust components

00:08:03,690 --> 00:08:09,419
in Firefox 48 in 2016 and Mozilla has

00:08:07,409 --> 00:08:11,340
this process they call oxidization were

00:08:09,419 --> 00:08:13,909
they are rusting out components

00:08:11,340 --> 00:08:16,440
I think that's clever I like the term

00:08:13,909 --> 00:08:18,330
and rust code has actually improved

00:08:16,440 --> 00:08:20,430
Firefox as security and performance so

00:08:18,330 --> 00:08:24,150
with respect to security they're looking

00:08:20,430 --> 00:08:25,949
at rewriting parsers and rust to prevent

00:08:24,150 --> 00:08:28,500
vulnerabilities for instance they have a

00:08:25,949 --> 00:08:29,490
new mp4 metadata parser that replaced

00:08:28,500 --> 00:08:30,900
live stage right

00:08:29,490 --> 00:08:32,279
you might recall the stage fright

00:08:30,900 --> 00:08:33,690
vulnerability from a couple years ago

00:08:32,279 --> 00:08:35,849
that was pretty serious

00:08:33,690 --> 00:08:37,829
so rust is actually improving the safety

00:08:35,849 --> 00:08:39,240
of Firefox it's also improving the

00:08:37,829 --> 00:08:41,820
performance so they were able to rewrite

00:08:39,240 --> 00:08:44,070
a new parallel cascading style sheet

00:08:41,820 --> 00:08:45,870
engine that speeds up page loads because

00:08:44,070 --> 00:08:48,180
rust has very nice support for

00:08:45,870 --> 00:08:50,820
concurrency and it protects you from

00:08:48,180 --> 00:08:54,810
doing for from data races and things

00:08:50,820 --> 00:08:56,610
like that so the nice thing about rust

00:08:54,810 --> 00:08:57,899
as I mentioned is that it's a systems

00:08:56,610 --> 00:09:00,000
programming language which gets some of

00:08:57,899 --> 00:09:01,260
the nice toys that the higher level

00:09:00,000 --> 00:09:04,290
programming is higher a little language

00:09:01,260 --> 00:09:07,740
programmers get so performance is on par

00:09:04,290 --> 00:09:09,089
with C++ you get memory safety without

00:09:07,740 --> 00:09:10,230
the overhead of garbage collection which

00:09:09,089 --> 00:09:12,149
is important in some applications

00:09:10,230 --> 00:09:14,490
particularly embedded and sub networking

00:09:12,149 --> 00:09:15,750
applications and kernel so the

00:09:14,490 --> 00:09:17,730
programmer still has fine-grained

00:09:15,750 --> 00:09:19,709
control over memory

00:09:17,730 --> 00:09:20,970
rust also provides thread safety this is

00:09:19,709 --> 00:09:22,370
what the rest people call a fearless

00:09:20,970 --> 00:09:24,060
concurrency so you don't have

00:09:22,370 --> 00:09:26,610
concurrency bugs and data races

00:09:24,060 --> 00:09:28,390
associated with multi-threaded code and

00:09:26,610 --> 00:09:30,490
the way this works is rust has a power

00:09:28,390 --> 00:09:31,899
type system that enforces memory and

00:09:30,490 --> 00:09:33,730
thread safety at compile time so if your

00:09:31,899 --> 00:09:34,720
code compiles you have a good confidence

00:09:33,730 --> 00:09:37,660
that's gonna work and not have any of

00:09:34,720 --> 00:09:39,100
these bugs it also really has a really

00:09:37,660 --> 00:09:41,019
good development environment so it is an

00:09:39,100 --> 00:09:43,930
excellent package manager and generally

00:09:41,019 --> 00:09:47,829
really good tools more so than much more

00:09:43,930 --> 00:09:49,240
so than legacy systems languages and so

00:09:47,829 --> 00:09:50,560
because of these advantages rust is

00:09:49,240 --> 00:09:52,329
gaining popularity in the systems

00:09:50,560 --> 00:09:54,040
community so you're seeing rust based

00:09:52,329 --> 00:09:55,300
operating systems the TOC

00:09:54,040 --> 00:09:58,269
microcontroller OS is particularly

00:09:55,300 --> 00:10:01,060
interesting sir redox Intermezzo s-- and

00:09:58,269 --> 00:10:02,709
some others Amazon and Google have

00:10:01,060 --> 00:10:06,250
developed rust based virtual machine

00:10:02,709 --> 00:10:07,690
monitors cross VM and fire cracker the

00:10:06,250 --> 00:10:09,459
coreboot developers I learned yesterday

00:10:07,690 --> 00:10:11,920
are exploring a rust rewrite they're

00:10:09,459 --> 00:10:13,660
calling it or boot so it's a fork of

00:10:11,920 --> 00:10:17,410
core boot with C removed so I thought

00:10:13,660 --> 00:10:19,390
that was amusing and then there are

00:10:17,410 --> 00:10:21,310
number of projects exploring rusty OS

00:10:19,390 --> 00:10:24,250
components for the Linux kernel the

00:10:21,310 --> 00:10:25,720
freebsd kernel SEL for and fuchsia OS so

00:10:24,250 --> 00:10:27,850
the nice thing about rust is that it has

00:10:25,720 --> 00:10:29,110
good interoperability with C and C++ so

00:10:27,850 --> 00:10:30,339
you don't have to rewrite your full

00:10:29,110 --> 00:10:32,170
system you can actually just rewrite

00:10:30,339 --> 00:10:36,579
parts of it so this is also something

00:10:32,170 --> 00:10:38,380
that we're exploring on my team so

00:10:36,579 --> 00:10:39,640
what's the status of rust on risk 5

00:10:38,380 --> 00:10:42,910
there's been a lot of progress in the

00:10:39,640 --> 00:10:45,910
last couple last year so there is now

00:10:42,910 --> 00:10:47,980
support for a 32-bit risc rust risk 5

00:10:45,910 --> 00:10:50,980
support for a bare metal this went in

00:10:47,980 --> 00:10:53,649
late last year and just one month ago

00:10:50,980 --> 00:10:56,350
there's now a bare metal support for RB

00:10:53,649 --> 00:10:58,500
64 so if you want to do bare metal

00:10:56,350 --> 00:11:01,779
hacking on rust you can do that now

00:10:58,500 --> 00:11:04,029
there's a handy QuickStart template for

00:11:01,779 --> 00:11:06,250
doing bare metal risk by development you

00:11:04,029 --> 00:11:07,420
can target the high five one I think you

00:11:06,250 --> 00:11:09,699
can target the Kendra borer and you can

00:11:07,420 --> 00:11:11,470
also target qmu you can grab this link

00:11:09,699 --> 00:11:13,660
and start playing with stuff and

00:11:11,470 --> 00:11:15,100
includes several example projects you

00:11:13,660 --> 00:11:16,860
can do you know hello world - you are

00:11:15,100 --> 00:11:19,449
and blinks melodies and things like that

00:11:16,860 --> 00:11:22,930
and if you want more details on this you

00:11:19,449 --> 00:11:24,670
can check out my oxidize 19 talk so what

00:11:22,930 --> 00:11:25,779
about OS targets what if you don't if

00:11:24,670 --> 00:11:29,620
you actually want to run an operating

00:11:25,779 --> 00:11:30,610
system so Linux RB 64 is up next we

00:11:29,620 --> 00:11:32,829
don't have support it sort of in

00:11:30,610 --> 00:11:34,390
progress this is as you've heard from

00:11:32,829 --> 00:11:36,550
other talks is important for Linux

00:11:34,390 --> 00:11:39,279
distributions and for the Firefox port

00:11:36,550 --> 00:11:41,139
since Firefox use this rust now so I'm

00:11:39,279 --> 00:11:42,579
hoping we kind of gather people

00:11:41,139 --> 00:11:46,449
from the community to work on this

00:11:42,579 --> 00:11:47,799
there's a softer meeting tomorrow during

00:11:46,449 --> 00:11:50,379
the foundation day I hope we can talk

00:11:47,799 --> 00:11:51,819
about Russ and other things coordinating

00:11:50,379 --> 00:11:53,019
on you know bring up Linux and stable

00:11:51,819 --> 00:11:54,730
distributions and LVM on all that stuff

00:11:53,019 --> 00:11:58,179
but I'm definitely interested talking

00:11:54,730 --> 00:11:59,739
more about Russ as well that there's a

00:11:58,179 --> 00:12:02,319
talk microcontroller iOS port in

00:11:59,739 --> 00:12:04,449
progress talk is this OS kernel that's

00:12:02,319 --> 00:12:06,189
written in rust and it provides a secure

00:12:04,449 --> 00:12:07,989
foundation for IOT devices I'm pretty

00:12:06,189 --> 00:12:11,410
enthusiastic about talk for building

00:12:07,989 --> 00:12:13,529
these kinds of systems so yeah I think

00:12:11,410 --> 00:12:16,089
overall like the rust risk five

00:12:13,529 --> 00:12:17,439
ecosystem is coming a long way there's

00:12:16,089 --> 00:12:20,470
more work to do I hope you'll kind of

00:12:17,439 --> 00:12:21,730
help flush that out and yeah I think

00:12:20,470 --> 00:12:23,379
risk I've and Russ provide a strong

00:12:21,730 --> 00:12:24,879
foundation for building secure systems

00:12:23,379 --> 00:12:26,709
you have the safety performance

00:12:24,879 --> 00:12:28,540
productivity of rust and the openness

00:12:26,709 --> 00:12:29,589
simplicity and flexibility verse five

00:12:28,540 --> 00:12:31,569
and together I think they provide a

00:12:29,589 --> 00:12:35,860
strong foundation for building secure

00:12:31,569 --> 00:12:41,669
systems yeah and that's it for me thanks

00:12:35,860 --> 00:12:41,669
[Applause]

00:12:45,329 --> 00:12:55,149
almost Hey so my question is what

00:12:51,759 --> 00:12:58,389
changes do you do to the core that use

00:12:55,149 --> 00:13:00,910
risk five or it is just you use reused

00:12:58,389 --> 00:13:04,749
rust to write the firmware because the

00:13:00,910 --> 00:13:07,059
way we discussed it in 2017 during the

00:13:04,749 --> 00:13:10,629
birth of feather room at FOSDEM

00:13:07,059 --> 00:13:13,600
forest and then at least my perception

00:13:10,629 --> 00:13:15,699
from like my idea was essentially make

00:13:13,600 --> 00:13:18,309
harder acceleration for the fact that

00:13:15,699 --> 00:13:20,769
rust allows you to have safe unsafe and

00:13:18,309 --> 00:13:23,730
so on that you can distinguish when you

00:13:20,769 --> 00:13:27,039
dereference row pointer to memory so

00:13:23,730 --> 00:13:28,660
just just you know my perception was the

00:13:27,039 --> 00:13:31,149
moment we have unsafe that actually

00:13:28,660 --> 00:13:33,309
let's say triggers a bit flip and you

00:13:31,149 --> 00:13:35,259
switch the mode of the CPU you know it

00:13:33,309 --> 00:13:38,160
sounds a bit crazy but still you know

00:13:35,259 --> 00:13:41,230
the fact that you can actually have a

00:13:38,160 --> 00:13:43,149
CPU the reason we use T it's not because

00:13:41,230 --> 00:13:45,730
it's the best it's because it's the most

00:13:43,149 --> 00:13:48,879
natural language to interface with

00:13:45,730 --> 00:13:50,739
harder nowadays and if we have risk 5

00:13:48,879 --> 00:13:55,030
which is openness and so on we can have

00:13:50,739 --> 00:13:57,790
a way to to to adjust the the the CPU

00:13:55,030 --> 00:14:00,250
to the language so it's native because

00:13:57,790 --> 00:14:03,790
because currently to me when we write

00:14:00,250 --> 00:14:07,660
former in rust for let's say STM which

00:14:03,790 --> 00:14:10,120
is done it's it's it's not natural it

00:14:07,660 --> 00:14:13,120
you just you just rewrite the form where

00:14:10,120 --> 00:14:15,400
but it's not actually it for the CPU

00:14:13,120 --> 00:14:18,130
it's it's it's like you have indirect

00:14:15,400 --> 00:14:21,490
read access you have peripherals which

00:14:18,130 --> 00:14:23,770
are concurrent naturally so you know all

00:14:21,490 --> 00:14:26,590
of this is this about actually making a

00:14:23,770 --> 00:14:28,810
new core that is essentially rust

00:14:26,590 --> 00:14:32,920
acceleration core that you actually take

00:14:28,810 --> 00:14:35,080
advantage of the rust as a design

00:14:32,920 --> 00:14:37,870
concept how you how you design your

00:14:35,080 --> 00:14:40,380
programs or is just use your right your

00:14:37,870 --> 00:14:43,030
former and rust and run it on the core

00:14:40,380 --> 00:14:44,830
so what my talk is just about rust in

00:14:43,030 --> 00:14:46,270
general but I think hardware software co

00:14:44,830 --> 00:14:47,440
design is definitely interesting so I

00:14:46,270 --> 00:14:49,030
think the idea is that you talked about

00:14:47,440 --> 00:14:50,380
would be we you have the freedom to do

00:14:49,030 --> 00:14:51,880
that obviously you have these open

00:14:50,380 --> 00:14:54,100
implementations and you could do things

00:14:51,880 --> 00:14:55,600
protect unsafe code so I think that's

00:14:54,100 --> 00:14:57,700
interesting it's not something I'm

00:14:55,600 --> 00:14:59,530
exploring right now the reason we could

00:14:57,700 --> 00:15:00,910
we keep using C it's not because it's

00:14:59,530 --> 00:15:02,890
the best it's because the best way to

00:15:00,910 --> 00:15:04,720
interact with the hardware and describe

00:15:02,890 --> 00:15:06,520
for the how do we want to do we need to

00:15:04,720 --> 00:15:08,710
write a register that doesn't take much

00:15:06,520 --> 00:15:11,110
right and then you have a peripheral

00:15:08,710 --> 00:15:14,589
that's doing something awesome so it's

00:15:11,110 --> 00:15:16,330
just native it's just easier so I would

00:15:14,589 --> 00:15:18,970
argue rust has the the primitives that

00:15:16,330 --> 00:15:21,400
you need to do that as well taking the

00:15:18,970 --> 00:15:23,230
next step what how do you make the

00:15:21,400 --> 00:15:26,230
incentive for people to learn something

00:15:23,230 --> 00:15:28,210
new to switch I don't know I think you

00:15:26,230 --> 00:15:29,530
make it fun I mean I think the rust

00:15:28,210 --> 00:15:30,790
language is pretty fun to work on you

00:15:29,530 --> 00:15:32,260
make it productive I mean I think that's

00:15:30,790 --> 00:15:33,970
partially why the corporate folks are

00:15:32,260 --> 00:15:36,640
looking at it they found that I think

00:15:33,970 --> 00:15:38,110
Ron said that they were able to get kind

00:15:36,640 --> 00:15:40,120
of like the basic functionality of

00:15:38,110 --> 00:15:42,970
coreboot written in like three hundred

00:15:40,120 --> 00:15:44,350
lines so I think you I think the reason

00:15:42,970 --> 00:15:47,130
why rust is taking off is people are

00:15:44,350 --> 00:15:50,410
seeing the the I mean the security

00:15:47,130 --> 00:15:52,540
improvements from having like safe code

00:15:50,410 --> 00:15:53,790
and also you're seeing the productivity

00:15:52,540 --> 00:15:56,380
improvements as well

00:15:53,790 --> 00:15:58,240
writing and rust is much easier than

00:15:56,380 --> 00:15:59,080
writing and I mean it's much nicer than

00:15:58,240 --> 00:16:00,550
writing to see right you have much

00:15:59,080 --> 00:16:03,180
better tooling you have a much better

00:16:00,550 --> 00:16:05,440
compiler you have lots of libraries

00:16:03,180 --> 00:16:06,550
Brian Cantrell talked about in this and

00:16:05,440 --> 00:16:08,620
some of his blog posts

00:16:06,550 --> 00:16:11,320
he's a Solaris developer and join

00:16:08,620 --> 00:16:12,520
so I think in general you like you can't

00:16:11,320 --> 00:16:15,780
force it down something throat but you

00:16:12,520 --> 00:16:15,780
make it a productive environment and

00:16:16,710 --> 00:16:22,000
sorry thanks Aaron we'll have to

00:16:18,970 --> 00:16:25,659
transition to the post talk offline

00:16:22,000 --> 00:16:25,659

YouTube URL: https://www.youtube.com/watch?v=i0TmZ2vuzbs


