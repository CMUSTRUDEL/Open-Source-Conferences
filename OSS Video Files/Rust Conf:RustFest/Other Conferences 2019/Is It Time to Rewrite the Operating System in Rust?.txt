Title: Is It Time to Rewrite the Operating System in Rust?
Publication date: 2019-10-02
Playlist: Other Conferences 2019
Description: 
	Ad: 
Discover emerging software trends and innovations. Attend QCon Plus (Nov 1-5, 2021): https://bit.ly/3dJxdwm
QCon Plus is a hybrid international software development conference for senior software engineers, software architects and team leaders. QCon Plus November will feature optional in-person add-on events in New York and San Francisco. Attend and find out what should be on your radar from world-class domain experts.
----------------------------------------------------------------------------------------------------------------
Video with transcript included: https://bit.ly/2Nq7RW5   

Bryan Cantrill explores Rust, explains why it has captured the imagination of so many systems software engineers, and outlines where it might best fit in the deep stack of operating system software.

This presentation was recorded at QCon San Francisco 2018: https://bit.ly/2uYyHLb 

For more awesome presentations on innovator and early adopter topics check InfoQâ€™s selection of talks from conferences worldwide https://bit.ly/2tm9loz

#Rust #OperatingSystems #SystemProgramming #InfoQ #QConSanFrancisco
Captions: 
	00:00:04,060 --> 00:00:09,220
all right so my question is is it time

00:00:06,850 --> 00:00:10,809
to rewrite the operating system in Rus

00:00:09,220 --> 00:00:13,809
now I will give you a little bit of a

00:00:10,809 --> 00:00:16,870
spoiler alert this is better jizz law of

00:00:13,809 --> 00:00:19,030
headlines that any article that that

00:00:16,870 --> 00:00:23,350
kind of asks a question you can

00:00:19,030 --> 00:00:25,630
reasonably say no to so on I but I I

00:00:23,350 --> 00:00:27,250
you're not gonna get a no out of me on

00:00:25,630 --> 00:00:29,050
this one you're gonna get a bunch of

00:00:27,250 --> 00:00:31,510
qualified yeses but just to give you a

00:00:29,050 --> 00:00:32,950
spoiler it is a question mark not

00:00:31,510 --> 00:00:36,039
necessarily an exclamation point for

00:00:32,950 --> 00:00:37,539
reasons I'll get into but first and I

00:00:36,039 --> 00:00:39,789
actually I think it's pretty great that

00:00:37,539 --> 00:00:41,949
I don't even think I'm the first maybe

00:00:39,789 --> 00:00:43,989
not even the second presentation to have

00:00:41,949 --> 00:00:46,149
a slide on what even is the operating

00:00:43,989 --> 00:00:47,800
system I mean we're we're in the OS

00:00:46,149 --> 00:00:49,749
track operating systems been around a

00:00:47,800 --> 00:00:52,629
long time and apparently we don't even

00:00:49,749 --> 00:00:55,089
know what they are and it's actually

00:00:52,629 --> 00:00:56,920
harder to define than you might think if

00:00:55,089 --> 00:00:58,870
you think this is easy by the way just

00:00:56,920 --> 00:01:02,409
say like what what is software give me a

00:00:58,870 --> 00:01:04,330
definition of what software is and I can

00:01:02,409 --> 00:01:07,030
wrap you around the axle on your

00:01:04,330 --> 00:01:08,950
definition of software so I guess I will

00:01:07,030 --> 00:01:12,040
pose you this follow-up question is

00:01:08,950 --> 00:01:14,829
Euclid's GCD algorithm software was you

00:01:12,040 --> 00:01:17,229
could writing software when he wrote the

00:01:14,829 --> 00:01:18,369
GCD algorithm and if your answer is like

00:01:17,229 --> 00:01:20,110
well no of course not because this

00:01:18,369 --> 00:01:21,700
predates hardware you're gonna it's

00:01:20,110 --> 00:01:24,310
gonna be very hard to come up with a

00:01:21,700 --> 00:01:26,740
self-consistent answer to what software

00:01:24,310 --> 00:01:28,600
is I actually made the mistake I know

00:01:26,740 --> 00:01:30,549
Mike Olson who was one of the founders

00:01:28,600 --> 00:01:32,079
of cloud era and I was up at Cloudera in

00:01:30,549 --> 00:01:33,729
very early days or like six people in

00:01:32,079 --> 00:01:36,250
the office I don't even know why he had

00:01:33,729 --> 00:01:37,840
me by but I was having a weird day and I

00:01:36,250 --> 00:01:40,060
was like really grappling with this like

00:01:37,840 --> 00:01:41,020
what is software question and they're

00:01:40,060 --> 00:01:42,189
like well software's the thing that runs

00:01:41,020 --> 00:01:43,539
on hardware it's like okay well what's

00:01:42,189 --> 00:01:45,909
hardware you kind of take that apart and

00:01:43,539 --> 00:01:48,549
all everything starts breaking down like

00:01:45,909 --> 00:01:51,490
you are t-minus 10 minutes away from an

00:01:48,549 --> 00:01:52,869
existential crisis and you realize that

00:01:51,490 --> 00:01:56,469
you know nothing that the ancient

00:01:52,869 --> 00:01:58,240
Sumerians were running software that

00:01:56,469 --> 00:01:59,200
software is merely knowledge that we run

00:01:58,240 --> 00:02:01,899
it doesn't have to be to already

00:01:59,200 --> 00:02:04,329
complete and at one point like mike can

00:02:01,899 --> 00:02:05,770
kind of see his team like you know Jeff

00:02:04,329 --> 00:02:07,509
hammer Bakker I think is beginning to

00:02:05,770 --> 00:02:09,580
like stare at his hands and wonder if

00:02:07,509 --> 00:02:11,080
anything means anything and mike takes

00:02:09,580 --> 00:02:13,209
me aside he's like what's going on

00:02:11,080 --> 00:02:15,519
are you are you on drugs I mean what's

00:02:13,209 --> 00:02:17,180
like are you are you high right now I'm

00:02:15,519 --> 00:02:18,500
like no Mike I'm just like what is

00:02:17,180 --> 00:02:20,000
like I can't just like talk about

00:02:18,500 --> 00:02:21,469
something else or whatever get out of

00:02:20,000 --> 00:02:23,329
here anyway

00:02:21,469 --> 00:02:24,349
so you have the same problem the

00:02:23,329 --> 00:02:25,730
operating system I go what is the

00:02:24,349 --> 00:02:26,810
operating system or a kind of any

00:02:25,730 --> 00:02:27,650
definition do we would say well the

00:02:26,810 --> 00:02:29,569
operating system is the thing that

00:02:27,650 --> 00:02:31,450
abstract hardware but like well how

00:02:29,569 --> 00:02:33,859
about virtual hardware I mean surely

00:02:31,450 --> 00:02:35,540
abstracting virtual hardware surely the

00:02:33,859 --> 00:02:38,239
guest operating system that you run on

00:02:35,540 --> 00:02:40,400
your AWS instance is surely an operating

00:02:38,239 --> 00:02:41,599
system that's not abstracting Hardware

00:02:40,400 --> 00:02:44,239
not physical Hardware it's abstracting

00:02:41,599 --> 00:02:46,430
virtual hardware so it's really easy to

00:02:44,239 --> 00:02:48,170
kind of migrate around or wander around

00:02:46,430 --> 00:02:49,939
and not have a record size since I

00:02:48,170 --> 00:02:51,829
Stefan ition but I think for our

00:02:49,939 --> 00:02:54,560
purposes let's say that an operating

00:02:51,829 --> 00:02:57,439
system is the program because it is a

00:02:54,560 --> 00:02:58,790
program that abstracts the hardware to

00:02:57,439 --> 00:03:01,159
allow for the execution of other

00:02:58,790 --> 00:03:02,840
programs so I think that the fact that

00:03:01,159 --> 00:03:04,819
the operating system is itself just a

00:03:02,840 --> 00:03:06,709
program it's just kind of a super

00:03:04,819 --> 00:03:08,450
program it's kind of an important

00:03:06,709 --> 00:03:11,209
observation my friend Mike Demuro is

00:03:08,450 --> 00:03:13,790
here was I went to work for a company

00:03:11,209 --> 00:03:16,219
called Tara that you haven't heard of

00:03:13,790 --> 00:03:18,019
Tara actually bought Cray and then took

00:03:16,219 --> 00:03:19,909
craze name which is always an

00:03:18,019 --> 00:03:22,669
interesting sign when you when the

00:03:19,909 --> 00:03:24,650
acquiring company takes the acquired

00:03:22,669 --> 00:03:27,739
company's name you know did not have

00:03:24,650 --> 00:03:28,849
real good brand recognition but Tara was

00:03:27,739 --> 00:03:29,720
a super interesting company doing a lot

00:03:28,849 --> 00:03:30,859
of interesting things and Michael is

00:03:29,720 --> 00:03:32,810
doing kernel development for them and

00:03:30,859 --> 00:03:34,729
had done that for maybe a year or two

00:03:32,810 --> 00:03:36,049
and he and I caught up and he's like you

00:03:34,729 --> 00:03:37,879
know what I really thought an operating

00:03:36,049 --> 00:03:39,290
system is right as a program it's a

00:03:37,879 --> 00:03:40,909
complicated program it's an asynchronous

00:03:39,290 --> 00:03:42,979
program it's an interrupt driven program

00:03:40,909 --> 00:03:44,329
but I was kind of offended by that cuz

00:03:42,979 --> 00:03:46,909
I'm like I'm not just a programmer I'm a

00:03:44,329 --> 00:03:48,199
curl programmer like don't rob me of my

00:03:46,909 --> 00:03:49,639
dignity but then you guys like actually

00:03:48,199 --> 00:03:52,310
it is just a program it's a complicated

00:03:49,639 --> 00:03:54,079
program but it is a it's a program that

00:03:52,310 --> 00:03:55,939
runs other programs I do think that if

00:03:54,079 --> 00:03:57,829
your program doesn't run other programs

00:03:55,939 --> 00:04:00,349
it's a lot of great things that's

00:03:57,829 --> 00:04:01,489
valuable to society and humanity but we

00:04:00,349 --> 00:04:03,349
probably shouldn't call it an operating

00:04:01,489 --> 00:04:04,729
system and I think that the operate

00:04:03,349 --> 00:04:06,889
system also should be abstracting

00:04:04,729 --> 00:04:11,000
Hardware in some way shape or form but

00:04:06,889 --> 00:04:12,829
even that is it is there shades of gray

00:04:11,000 --> 00:04:14,989
there and I think the operating system

00:04:12,829 --> 00:04:17,030
you have to say defines the liveness of

00:04:14,989 --> 00:04:19,009
the programs that it's running if the

00:04:17,030 --> 00:04:21,199
operating system dies everything that

00:04:19,009 --> 00:04:22,699
it's running dies can't live without the

00:04:21,199 --> 00:04:25,909
operating system so it's essentially not

00:04:22,699 --> 00:04:28,099
regard and we it's important not to

00:04:25,909 --> 00:04:29,750
conflate the actual the operating system

00:04:28,099 --> 00:04:30,830
with the operating system kernel the

00:04:29,750 --> 00:04:32,810
operating system kernel

00:04:30,830 --> 00:04:35,060
is the thing that runs in the privileged

00:04:32,810 --> 00:04:36,980
context of the microprocessor that's

00:04:35,060 --> 00:04:39,020
going to be ring zero if your x86

00:04:36,980 --> 00:04:40,400
although ring zero becomes complicated

00:04:39,020 --> 00:04:42,310
because if again if you're in virtual

00:04:40,400 --> 00:04:44,840
hardware you're at a virtual ring zero

00:04:42,310 --> 00:04:46,820
nested vert you could be in ring zeros

00:04:44,840 --> 00:04:48,650
that several rings away from the actual

00:04:46,820 --> 00:04:50,060
hardware but you are in whether it's

00:04:48,650 --> 00:04:52,640
virtual hardware or physical hardware

00:04:50,060 --> 00:04:53,960
you are seeing the entire machine or

00:04:52,640 --> 00:04:55,190
what you believe to be the Machine

00:04:53,960 --> 00:04:56,990
virtualization has made this so

00:04:55,190 --> 00:04:58,730
complicated like if everything has to

00:04:56,990 --> 00:05:02,840
have asterisks now is a lot easier when

00:04:58,730 --> 00:05:06,050
we weren't virtualizing hardware but the

00:05:02,840 --> 00:05:08,210
operating system kernel is only one part

00:05:06,050 --> 00:05:10,460
of the broader operating system the

00:05:08,210 --> 00:05:13,610
operating system also includes libraries

00:05:10,460 --> 00:05:16,250
it includes commands it includes daemons

00:05:13,610 --> 00:05:18,440
includes facilities and yes in yes you

00:05:16,250 --> 00:05:20,630
know Justin was in his earlier talk was

00:05:18,440 --> 00:05:22,310
describing how we want to strip all the

00:05:20,630 --> 00:05:24,140
stuff away he blamed it all on Sun

00:05:22,310 --> 00:05:27,260
somewhat strangely and then said that we

00:05:24,140 --> 00:05:28,790
needed to strip it all away and that is

00:05:27,260 --> 00:05:31,520
true to a point but there's still even

00:05:28,790 --> 00:05:33,410
in Justin's stripped-down world there

00:05:31,520 --> 00:05:35,420
are still a bunch of components that are

00:05:33,410 --> 00:05:37,070
running at that highest level of

00:05:35,420 --> 00:05:38,750
privilege on the microprocessor a

00:05:37,070 --> 00:05:40,160
virtual microprocessor but we would

00:05:38,750 --> 00:05:42,260
still consider the operating systems the

00:05:40,160 --> 00:05:43,520
operating system is bigger than just the

00:05:42,260 --> 00:05:46,610
kernel anything that that's that's

00:05:43,520 --> 00:05:49,520
really important now I mean if you see

00:05:46,610 --> 00:05:50,630
me talk before you know there's no way

00:05:49,520 --> 00:05:53,150
we're getting out of here without a

00:05:50,630 --> 00:05:55,400
history lesson and especially when we're

00:05:53,150 --> 00:05:57,170
talking about operating systems we've

00:05:55,400 --> 00:05:59,330
got to turn the wayback dial and we've

00:05:57,170 --> 00:06:01,190
got to talk about history so operating

00:05:59,330 --> 00:06:03,260
systems were actually they used to be

00:06:01,190 --> 00:06:05,530
called executives which is a very kind

00:06:03,260 --> 00:06:09,320
of like strange post-world War two

00:06:05,530 --> 00:06:10,670
hierarchical kind of like I'm not sure

00:06:09,320 --> 00:06:11,360
you know this is like a managerial

00:06:10,670 --> 00:06:13,640
structure

00:06:11,360 --> 00:06:14,930
I guess executives I mean other things

00:06:13,640 --> 00:06:16,280
that could have been worse but we had

00:06:14,930 --> 00:06:19,250
executives for a while and they changed

00:06:16,280 --> 00:06:21,590
it to operating systems and originally

00:06:19,250 --> 00:06:23,480
these things were all written in

00:06:21,590 --> 00:06:26,690
assembly of course they were all written

00:06:23,480 --> 00:06:28,430
in machine code and if there's you know

00:06:26,690 --> 00:06:31,880
one really interesting architecture to

00:06:28,430 --> 00:06:34,310
look at it's the Burroughs be 5000 1961

00:06:31,880 --> 00:06:36,770
was a super interesting machine and that

00:06:34,310 --> 00:06:39,680
was the first the first operating system

00:06:36,770 --> 00:06:42,830
which was called the mCP which is the

00:06:39,680 --> 00:06:44,160
master control program yes if you've

00:06:42,830 --> 00:06:46,530
seen Tron it's a map

00:06:44,160 --> 00:06:48,360
control program in Tron if you haven't

00:06:46,530 --> 00:06:51,270
seen Tron do not see Tron it is a

00:06:48,360 --> 00:06:53,100
terrible terrible movie I'm go see

00:06:51,270 --> 00:06:54,930
wargames instead so you've got you're

00:06:53,100 --> 00:06:56,370
trying to catch up on the movies you

00:06:54,930 --> 00:06:57,960
missed because they happen 20 years

00:06:56,370 --> 00:06:58,920
before you're born go watch war games

00:06:57,960 --> 00:07:01,880
not Tron please

00:06:58,920 --> 00:07:04,530
but mCP was the master control program

00:07:01,880 --> 00:07:08,220
master control executive just like all

00:07:04,530 --> 00:07:09,300
about dominating programs I guess but

00:07:08,220 --> 00:07:10,770
the thing it was really interesting is

00:07:09,300 --> 00:07:13,920
this thing was written in its own

00:07:10,770 --> 00:07:16,080
alcohol derivative called s ball and if

00:07:13,920 --> 00:07:18,120
s ball I just feel like I get Esperanto

00:07:16,080 --> 00:07:20,700
in my head immediately say s ball and s

00:07:18,120 --> 00:07:23,520
pause it turns out Islam a not to be

00:07:20,700 --> 00:07:26,640
confused with a university in Ecuador

00:07:23,520 --> 00:07:28,170
who's da is s ball so probably a

00:07:26,640 --> 00:07:31,710
much more famous s ball at this point

00:07:28,170 --> 00:07:34,710
but s ball was this alcohol derivative

00:07:31,710 --> 00:07:36,180
that they wrote the mCP in and this was

00:07:34,710 --> 00:07:39,150
a machine that was way ahead of its time

00:07:36,180 --> 00:07:41,070
in many different dimensions and I can

00:07:39,150 --> 00:07:42,210
tell you as a technologist who has had

00:07:41,070 --> 00:07:44,130
the misfortune of being ahead of my time

00:07:42,210 --> 00:07:47,130
several times over being ahead of your

00:07:44,130 --> 00:07:48,810
time is not commercially fruitful you

00:07:47,130 --> 00:07:49,560
know the basically the biggest upside to

00:07:48,810 --> 00:07:50,640
being ahead of your time is you

00:07:49,560 --> 00:07:53,400
apparently need no introduction of the

00:07:50,640 --> 00:07:56,910
OS track but other than that it's it's

00:07:53,400 --> 00:08:00,120
it's also burrows is a machine is is was

00:07:56,910 --> 00:08:01,260
a wildly inventive company incredible

00:08:00,120 --> 00:08:03,780
machine but you haven't heard of it

00:08:01,260 --> 00:08:07,130
because they went on business so but the

00:08:03,780 --> 00:08:11,669
mCP was really interesting and then in

00:08:07,130 --> 00:08:14,310
1964 project Mac at MIT was looking to

00:08:11,669 --> 00:08:17,550
build a follow-on for CTS s compatible

00:08:14,310 --> 00:08:20,100
time sharing system and they wanted to

00:08:17,550 --> 00:08:22,620
do everything right now this is

00:08:20,100 --> 00:08:25,500
something we call second system syndrome

00:08:22,620 --> 00:08:27,510
and second system syndrome every time I

00:08:25,500 --> 00:08:28,740
think second system is a bit invented

00:08:27,510 --> 00:08:29,940
and maybe it's a relic maybe it's kind

00:08:28,740 --> 00:08:32,280
of mythical man-month kind of hold over

00:08:29,940 --> 00:08:35,430
the 60s I get hit by another second

00:08:32,280 --> 00:08:37,440
system so I think it is a it is a truth

00:08:35,430 --> 00:08:40,169
a second system syndrome is hey as long

00:08:37,440 --> 00:08:42,360
as we're gonna rewrite this we should

00:08:40,169 --> 00:08:43,830
also rewrite that and revisit this and

00:08:42,360 --> 00:08:45,270
we do we should finally do this the

00:08:43,830 --> 00:08:46,620
right way and let's do that the right

00:08:45,270 --> 00:08:48,060
way and let's finally change the

00:08:46,620 --> 00:08:49,380
database to be something and next thing

00:08:48,060 --> 00:08:52,260
you know you have this massive system

00:08:49,380 --> 00:08:54,510
that ships later and later and later and

00:08:52,260 --> 00:08:58,180
later and finally never ships at all and

00:08:54,510 --> 00:09:01,029
that's the second system syndrome

00:08:58,180 --> 00:09:03,970
project Mac had maybe the case of second

00:09:01,029 --> 00:09:05,950
system syndrome with multics and multics

00:09:03,970 --> 00:09:07,000
and then this is also just a misfortune

00:09:05,950 --> 00:09:08,350
of history in terms of when they came on

00:09:07,000 --> 00:09:10,450
they knew they wanted to do it in a

00:09:08,350 --> 00:09:11,770
higher-level language but I guess they

00:09:10,450 --> 00:09:13,750
just didn't like the higher-level

00:09:11,770 --> 00:09:15,580
languages that were out at the time now

00:09:13,750 --> 00:09:16,690
on the one hand according to more things

00:09:15,580 --> 00:09:18,360
like well the only thing that picks with

00:09:16,690 --> 00:09:21,040
the only things to pick from were really

00:09:18,360 --> 00:09:21,880
Fortran and COBOL and that's actually

00:09:21,040 --> 00:09:23,800
not the case

00:09:21,880 --> 00:09:25,570
so um someone you probably ever heard of

00:09:23,800 --> 00:09:26,740
named Jean Sammet was an early computer

00:09:25,570 --> 00:09:30,339
scientist and she wrote an incredible

00:09:26,740 --> 00:09:32,950
book called programming languages which

00:09:30,339 --> 00:09:34,630
is a taxonomy of programming languages

00:09:32,950 --> 00:09:36,459
circa 1963 when that book was written

00:09:34,630 --> 00:09:38,140
and known tell you that book is more

00:09:36,459 --> 00:09:39,880
than two pages long okay like there were

00:09:38,140 --> 00:09:41,410
there were a lot of programming

00:09:39,880 --> 00:09:43,300
languages so maybe too many programming

00:09:41,410 --> 00:09:45,670
languages like you know like a Mesozoic

00:09:43,300 --> 00:09:46,899
era programming language is too much co2

00:09:45,670 --> 00:09:49,029
in the in the programming language

00:09:46,899 --> 00:09:51,279
atmosphere or something you know 80-foot

00:09:49,029 --> 00:09:52,690
tall ferns or whatever but the there

00:09:51,279 --> 00:09:54,279
were a lot of probably language to pick

00:09:52,690 --> 00:09:56,410
from but whatever they didn't like them

00:09:54,279 --> 00:09:58,089
all so fine so we're gonna do it in this

00:09:56,410 --> 00:09:59,950
programming language that hasn't yet

00:09:58,089 --> 00:10:03,459
been implemented but has this really

00:09:59,950 --> 00:10:05,770
amazing specification called pl/1 so

00:10:03,459 --> 00:10:08,440
they did this in in in pl/1 that is a

00:10:05,770 --> 00:10:10,240
Roman numeral one by the way if you want

00:10:08,440 --> 00:10:12,310
to put Pele one in your own slides do

00:10:10,240 --> 00:10:14,260
not call that a that that's on an Arabic

00:10:12,310 --> 00:10:18,190
one that is a Roman one very important

00:10:14,260 --> 00:10:20,920
point and so they adopted pl/1 and then

00:10:18,190 --> 00:10:23,529
they wrote the full specification for

00:10:20,920 --> 00:10:25,630
multix with not not only not a line of

00:10:23,529 --> 00:10:28,839
code not a compiler they didn't have a

00:10:25,630 --> 00:10:31,029
compiler in fact they had they they

00:10:28,839 --> 00:10:33,430
decided why do you do this they like

00:10:31,029 --> 00:10:34,870
let's outsource the compiler it's like

00:10:33,430 --> 00:10:37,360
okay that makes sense let's outsource

00:10:34,870 --> 00:10:38,920
they the first pl/1 compiler ever be

00:10:37,360 --> 00:10:41,110
written we're gonna outsource this to

00:10:38,920 --> 00:10:43,329
this like group in los angeles that no

00:10:41,110 --> 00:10:44,410
one had ever heard of who I mean shows

00:10:43,329 --> 00:10:46,360
you how some things never change they're

00:10:44,410 --> 00:10:48,550
like sure we could have 2001 compiler

00:10:46,360 --> 00:10:49,870
and then you know a year later they kind

00:10:48,550 --> 00:10:50,860
of fly out be like where's the PLO I

00:10:49,870 --> 00:10:53,380
think about it like we don't know what

00:10:50,860 --> 00:10:54,970
we're doing we cannot week away we we

00:10:53,380 --> 00:10:56,490
cannot implant a PLO on compilers all

00:10:54,970 --> 00:10:59,110
right well we have no PL one compiler so

00:10:56,490 --> 00:11:01,720
but we have an amazing operating system

00:10:59,110 --> 00:11:03,610
that has been very detailed be very

00:11:01,720 --> 00:11:04,630
specified but we can't actually write

00:11:03,610 --> 00:11:07,209
any of it because they're Nova de parar

00:11:04,630 --> 00:11:10,720
um so this is like ultimate waterfall

00:11:07,209 --> 00:11:11,550
like a nightmare waterfall and so they

00:11:10,720 --> 00:11:14,760
didn't have a puppy

00:11:11,550 --> 00:11:16,500
to power until 1966 and I mean that is

00:11:14,760 --> 00:11:18,720
that is a major problem now I think it

00:11:16,500 --> 00:11:19,709
is really funny about multics and multix

00:11:18,720 --> 00:11:22,560
is one of these things that's like a

00:11:19,709 --> 00:11:24,630
super divisive history in that depending

00:11:22,560 --> 00:11:26,310
on who you talk to both exercise of this

00:11:24,630 --> 00:11:28,589
amazing success that no one gives

00:11:26,310 --> 00:11:30,600
adequate credit to or this dismal

00:11:28,589 --> 00:11:34,860
failure and I'm sure the truth is in the

00:11:30,600 --> 00:11:37,529
middle but the even you and kobato wrote

00:11:34,860 --> 00:11:39,000
a hotel I guess they wrote a an

00:11:37,529 --> 00:11:42,209
interesting piece multics the first

00:11:39,000 --> 00:11:44,279
seven years in 1971 after multics is

00:11:42,209 --> 00:11:45,570
already kind of failed ish a bunch of

00:11:44,279 --> 00:11:49,110
companies had pulled out of multics

00:11:45,570 --> 00:11:52,260
and they viewed PL 1 as being this great

00:11:49,110 --> 00:11:53,519
aspect of both X and there's no real

00:11:52,260 --> 00:11:55,019
mention of the fact like well you know

00:11:53,519 --> 00:11:58,019
you didn't have a compiler for three

00:11:55,019 --> 00:12:01,050
years I'm not sure that it's it's an

00:11:58,019 --> 00:12:02,399
unabashed success because it to me and

00:12:01,050 --> 00:12:03,529
again it's hard because this is all

00:12:02,399 --> 00:12:06,209
before I was born

00:12:03,529 --> 00:12:08,310
it's it's hard to know for certain but

00:12:06,209 --> 00:12:09,600
to me looking back on it the fact the

00:12:08,310 --> 00:12:12,720
compiler was not available for so long

00:12:09,600 --> 00:12:14,820
had to have exacerbated the decline of

00:12:12,720 --> 00:12:17,100
the coalition and actually called in the

00:12:14,820 --> 00:12:19,200
triumvirate the triumvirate that ran

00:12:17,100 --> 00:12:22,320
multics and in particular Bell Labs

00:12:19,200 --> 00:12:24,200
pulled out of the multics project so

00:12:22,320 --> 00:12:26,940
Bell Labs is like alright we're done

00:12:24,200 --> 00:12:28,260
this is crazy like this is not going

00:12:26,940 --> 00:12:30,660
anywhere like the compiler hasn't shown

00:12:28,260 --> 00:12:32,850
up it doesn't work they actually done

00:12:30,660 --> 00:12:35,640
because PL 1 wasn't there they developed

00:12:32,850 --> 00:12:37,170
a different dialect of PL one called EPL

00:12:35,640 --> 00:12:38,970
and there's another things that you read

00:12:37,170 --> 00:12:40,410
like what the EPL people say they're

00:12:38,970 --> 00:12:41,459
like boy that we saved the day we came

00:12:40,410 --> 00:12:43,230
up with a style like them appeal one

00:12:41,459 --> 00:12:44,579
called EPL then you read Corbett oh he's

00:12:43,230 --> 00:12:45,990
like people gave up with the dialogue to

00:12:44,579 --> 00:12:47,040
PA one but we never used that it was

00:12:45,990 --> 00:12:48,570
completely insignificant so it's like

00:12:47,040 --> 00:12:49,950
alright I've got no idea what happened

00:12:48,570 --> 00:12:53,160
it's like watching Rashomon for

00:12:49,950 --> 00:12:56,070
operating systems um anyway Bell Labs

00:12:53,160 --> 00:12:57,449
pulls out of multix 1969 and there's a

00:12:56,070 --> 00:13:00,230
researcher that was formerly on the

00:12:57,449 --> 00:13:03,000
multics effort Kenny Thompson presumably

00:13:00,230 --> 00:13:05,670
implanted a one implement a new

00:13:03,000 --> 00:13:07,890
operating system and now didn't have

00:13:05,670 --> 00:13:11,100
multix so implanted this thing on the

00:13:07,890 --> 00:13:14,339
PDP 7 it was later ported to the PDP 11

00:13:11,100 --> 00:13:18,089
20 and it was named UNIX as a wordplay

00:13:14,339 --> 00:13:20,279
if kind of a somewhat peculiar one on on

00:13:18,089 --> 00:13:21,779
the complexity of multix and you know

00:13:20,279 --> 00:13:23,699
every time I gonna reread the UNIX

00:13:21,779 --> 00:13:24,990
history I get kind of something

00:13:23,699 --> 00:13:27,360
different out of it

00:13:24,990 --> 00:13:30,510
I mean there is it's unquestionable that

00:13:27,360 --> 00:13:33,000
eunuchs a lot came together at eunuchs

00:13:30,510 --> 00:13:35,160
in terms of the the late 60s especially

00:13:33,000 --> 00:13:36,600
the early 70s they were in the right

00:13:35,160 --> 00:13:38,040
place at the right time one of the

00:13:36,600 --> 00:13:40,230
things that I see especially reading it

00:13:38,040 --> 00:13:42,180
side by side of the multix history is it

00:13:40,230 --> 00:13:44,670
was really top-down software versus

00:13:42,180 --> 00:13:46,140
bottom-up software and multics was very

00:13:44,670 --> 00:13:47,160
top-down commanding control right

00:13:46,140 --> 00:13:48,660
specification

00:13:47,160 --> 00:13:51,270
maybe we'll get a compiler maybe we

00:13:48,660 --> 00:13:52,800
won't kind of software UNIX was like

00:13:51,270 --> 00:13:54,089
Alice just gets up and working and then

00:13:52,800 --> 00:13:55,470
I'll get something to work in and then

00:13:54,089 --> 00:13:57,149
we'll we'll write a man page for

00:13:55,470 --> 00:14:00,060
whatever we already got working and it

00:13:57,149 --> 00:14:02,399
was it was very organic and I think that

00:14:00,060 --> 00:14:04,740
the world was ready for that kind of

00:14:02,399 --> 00:14:05,970
software model and you begin to realize

00:14:04,740 --> 00:14:07,080
it kind of you know looking at it in the

00:14:05,970 --> 00:14:10,260
larger lens of what was going on

00:14:07,080 --> 00:14:11,700
socially and everything else the as my

00:14:10,260 --> 00:14:14,520
my mother is fond of reminding me that

00:14:11,700 --> 00:14:16,890
the because I did I wasn't alive in 1968

00:14:14,520 --> 00:14:18,570
I've got no idea what a society on the

00:14:16,890 --> 00:14:19,920
brink actually looks like every time I

00:14:18,570 --> 00:14:21,990
complained about the president has

00:14:19,920 --> 00:14:23,940
nothing compared to 1968 like all right

00:14:21,990 --> 00:14:25,380
all right mom fine you know mom you're

00:14:23,940 --> 00:14:26,520
kind of confirming the stereotype of

00:14:25,380 --> 00:14:29,850
baby boomers so let's move on

00:14:26,520 --> 00:14:32,850
um but he in particular UNIX was

00:14:29,850 --> 00:14:34,890
implemented entirely in assembly and I

00:14:32,850 --> 00:14:37,410
think it's it's a bit of a myth that

00:14:34,890 --> 00:14:39,510
that UNIX was implemented in C it wasn't

00:14:37,410 --> 00:14:40,860
it was important in a seminal uv7 it was

00:14:39,510 --> 00:14:44,310
ported to assembly on the P to be

00:14:40,860 --> 00:14:46,350
allowing and yes there was be there was

00:14:44,310 --> 00:14:46,980
a dis interpreted language that was B

00:14:46,350 --> 00:14:51,120
that was around

00:14:46,980 --> 00:14:53,520
it's a BCPL derivative B had a there's a

00:14:51,120 --> 00:14:57,270
very kind of like strange kind of

00:14:53,520 --> 00:14:59,910
connection to multix in that that b and

00:14:57,270 --> 00:15:03,510
e PL we're both implemented in this

00:14:59,910 --> 00:15:06,750
thing called TM g TM g i know that

00:15:03,510 --> 00:15:08,970
sounds like a teen web series that my

00:15:06,750 --> 00:15:10,350
kids would watch I feel like I would

00:15:08,970 --> 00:15:13,140
like my 14 year old we watching the

00:15:10,350 --> 00:15:16,770
latest episode of TMJ but no TMG was the

00:15:13,140 --> 00:15:20,370
transmogrifier that was a transpiler

00:15:16,770 --> 00:15:21,810
and b was actually interpreted and the

00:15:20,370 --> 00:15:23,839
actually TM g and another kind of sorry

00:15:21,810 --> 00:15:27,029
footnote on a footnote was implanted by

00:15:23,839 --> 00:15:29,190
robert morris bob morris the father of

00:15:27,029 --> 00:15:31,170
Robert Morris jr. who was the Morris

00:15:29,190 --> 00:15:32,459
worm even though I think Paul Graham

00:15:31,170 --> 00:15:34,350
begins like his eye twitch is what

00:15:32,459 --> 00:15:35,459
everyone says the Morris worm because he

00:15:34,350 --> 00:15:36,360
and Robert Morris patterned company

00:15:35,459 --> 00:15:38,149
together doesn't like anyone to talk

00:15:36,360 --> 00:15:42,199
about the Morris worm but it wasn't

00:15:38,149 --> 00:15:43,999
um Tan's attendance but so be actually

00:15:42,199 --> 00:15:47,959
was only used and he's like super

00:15:43,999 --> 00:15:50,149
auxilary capacities in in unix and the

00:15:47,959 --> 00:15:52,970
it was using the assembler it was using

00:15:50,149 --> 00:15:55,850
an early version of DC DC a command that

00:15:52,970 --> 00:15:57,949
you only may know from miss typing CD

00:15:55,850 --> 00:15:59,420
you're it and that's where it's like you

00:15:57,949 --> 00:16:00,740
want to like CD to your home directory

00:15:59,420 --> 00:16:02,870
or whatever you just like CD entering

00:16:00,740 --> 00:16:04,279
your a DC enter and you're like wait

00:16:02,870 --> 00:16:07,519
what just happened and you're like a

00:16:04,279 --> 00:16:08,959
captive prompt and you're like control c

00:16:07,519 --> 00:16:10,100
and it's like eats the control see

00:16:08,959 --> 00:16:12,139
you're like what is going on you're at

00:16:10,100 --> 00:16:13,579
control d like quit you're like I don't

00:16:12,139 --> 00:16:14,629
know how to quit or whatever it says I

00:16:13,579 --> 00:16:17,480
just say that it doesn't actually say

00:16:14,629 --> 00:16:20,059
anything DC is a it reflects its B

00:16:17,480 --> 00:16:21,529
heritage suffice it to say I'm but do

00:16:20,059 --> 00:16:23,149
they realize that B was not gonna do it

00:16:21,529 --> 00:16:26,360
didn't perform on they needed a much

00:16:23,149 --> 00:16:28,699
higher performing language than B in

00:16:26,360 --> 00:16:31,249
particular day Dennis Ritchie in Ken

00:16:28,699 --> 00:16:32,389
Thompson saw the power of implementing

00:16:31,249 --> 00:16:34,999
the operating system in higher-level

00:16:32,389 --> 00:16:36,529
language but they knew that B in

00:16:34,999 --> 00:16:37,970
particular had no byte address ability

00:16:36,529 --> 00:16:40,100
so the lack of byte address ability was

00:16:37,970 --> 00:16:41,889
gonna be a big problem so they came up

00:16:40,100 --> 00:16:44,779
with a new language that they called C

00:16:41,889 --> 00:16:46,699
and so C followed on for be kind of it

00:16:44,779 --> 00:16:49,459
made sense but again contrary to the

00:16:46,699 --> 00:16:51,139
myth these are they they are not twins

00:16:49,459 --> 00:16:54,800
they're not born at the same time UNIX

00:16:51,139 --> 00:16:57,620
is born UNIX begats C in a very

00:16:54,800 --> 00:16:59,149
important I guess biblical way their

00:16:57,620 --> 00:17:01,100
siblings are not they're not twins and

00:16:59,149 --> 00:17:04,339
UNIX is very much the older sibling and

00:17:01,100 --> 00:17:07,909
so C is is rightfully called portable

00:17:04,339 --> 00:17:10,339
assembly I like the people call portable

00:17:07,909 --> 00:17:13,220
and C portable assembly as a slur but I

00:17:10,339 --> 00:17:15,110
view it as praise I love I mean like why

00:17:13,220 --> 00:17:16,549
it's assembly and it's portable that

00:17:15,110 --> 00:17:20,360
sounds great

00:17:16,549 --> 00:17:22,939
i there's a lot that is great about C

00:17:20,360 --> 00:17:24,289
and C also was way ahead of its time and

00:17:22,939 --> 00:17:27,980
if you look at those other programming

00:17:24,289 --> 00:17:32,330
languages from that era and then you

00:17:27,980 --> 00:17:35,120
look at C they are mning into modernity

00:17:32,330 --> 00:17:37,370
suddenly first of all the caps lock key

00:17:35,120 --> 00:17:39,590
disappears it feels like every language

00:17:37,370 --> 00:17:42,590
prior to see was like screamed it's like

00:17:39,590 --> 00:17:47,090
I said was the caps lock key broken and

00:17:42,590 --> 00:17:50,390
you know I I like to to collect old

00:17:47,090 --> 00:17:51,650
programming manuals and I bought a kind

00:17:50,390 --> 00:17:54,140
of a weird lot from

00:17:51,650 --> 00:17:55,309
someone in the UK and this box shows up

00:17:54,140 --> 00:17:57,080
it's like a bunch of crap

00:17:55,309 --> 00:18:00,529
and then there's this manual for this

00:17:57,080 --> 00:18:02,900
language called language H and language

00:18:00,529 --> 00:18:05,169
H is a COBOL derivative that you've not

00:18:02,900 --> 00:18:07,640
heard of for a reason this is an NCR

00:18:05,169 --> 00:18:11,000
Elliott initiated language that had

00:18:07,640 --> 00:18:16,460
sterling as a key word every language H

00:18:11,000 --> 00:18:18,289
program begins with chapter 1 and you're

00:18:16,460 --> 00:18:20,390
like oh ok all right this is cool like

00:18:18,289 --> 00:18:21,980
it's a book like I get it like whatever

00:18:20,390 --> 00:18:23,600
it's like super new computing a super

00:18:21,980 --> 00:18:25,190
new and a book is the is the best they

00:18:23,600 --> 00:18:27,860
don't like and then you chapter one

00:18:25,190 --> 00:18:29,390
it'll be like you know sterling and you

00:18:27,860 --> 00:18:30,950
die today they're talking on tapes and

00:18:29,390 --> 00:18:33,320
all these kind of calculations and then

00:18:30,950 --> 00:18:34,789
every program there's no chapter 2 by

00:18:33,320 --> 00:18:40,429
the way it's only tap on the every

00:18:34,789 --> 00:18:43,580
program ends with the keyword obey it's

00:18:40,429 --> 00:18:45,679
like what like how about epilogue or end

00:18:43,580 --> 00:18:46,909
doesn't make any sense it's like now all

00:18:45,679 --> 00:18:47,990
of a sudden he's all like orders the

00:18:46,909 --> 00:18:50,029
Creator or whatever it doesn't make

00:18:47,990 --> 00:18:52,659
sense and so that's what we went from

00:18:50,029 --> 00:18:54,590
like obey and chapter 1 to modernity

00:18:52,659 --> 00:18:57,529
kind of in a very short period of time

00:18:54,590 --> 00:19:00,230
and the the C Revolution was it was real

00:18:57,529 --> 00:19:01,429
on and it was organic and I think one

00:19:00,230 --> 00:19:03,350
thing is interesting again if you look

00:19:01,429 --> 00:19:04,850
at this multics as this top-down

00:19:03,350 --> 00:19:07,340
approach this kind of command and

00:19:04,850 --> 00:19:09,169
control approach and UNIX as this more

00:19:07,340 --> 00:19:11,330
bottom-up approach one of the

00:19:09,169 --> 00:19:13,580
differences you see is that see kind of

00:19:11,330 --> 00:19:15,440
grew things as it needed them the first

00:19:13,580 --> 00:19:17,330
imitation of C didn't have structures

00:19:15,440 --> 00:19:19,340
they added trying to admittedly

00:19:17,330 --> 00:19:21,799
structures around in 1973 this came in

00:19:19,340 --> 00:19:23,480
early but they didn't actually implement

00:19:21,799 --> 00:19:24,679
the UNIX kernel in C until they had

00:19:23,480 --> 00:19:26,510
structures they employed instructors

00:19:24,679 --> 00:19:29,419
because they needed them for the UNIX

00:19:26,510 --> 00:19:31,010
kernel uhm they implemented bit fields

00:19:29,419 --> 00:19:33,140
because any of these were made simpler

00:19:31,010 --> 00:19:35,809
things as they needed them which had

00:19:33,140 --> 00:19:38,240
strengths and weaknesses one of the

00:19:35,809 --> 00:19:40,309
weaknesses from my perspective I there

00:19:38,240 --> 00:19:41,779
is no logical XOR in C this is one of

00:19:40,309 --> 00:19:43,130
the things that pisses me off about C I

00:19:41,779 --> 00:19:44,899
know ok I know this isn't this is an

00:19:43,130 --> 00:19:46,640
arcane thing to get kind of spun up

00:19:44,899 --> 00:19:48,320
about but there's no logical export

00:19:46,640 --> 00:19:50,840
you've got you've got large you've got

00:19:48,320 --> 00:19:53,090
you've got bitwise XOR but and you've

00:19:50,840 --> 00:19:54,799
got bitwise an bitwise or and you've got

00:19:53,090 --> 00:19:57,169
logical and logical or so wick where's

00:19:54,799 --> 00:19:59,090
logical XOR and there are actually times

00:19:57,169 --> 00:20:00,710
when you want logical XOR in C where you

00:19:59,090 --> 00:20:02,570
want to assert one of these conditions

00:20:00,710 --> 00:20:04,280
is true or the other tation is true but

00:20:02,570 --> 00:20:04,840
not both of them and at least one of

00:20:04,280 --> 00:20:06,850
them like that

00:20:04,840 --> 00:20:08,950
logical XOR and you'll know you're in my

00:20:06,850 --> 00:20:10,779
code because that code has that

00:20:08,950 --> 00:20:12,850
assertion yes done with bitwise exercise

00:20:10,779 --> 00:20:13,960
I know how to do it okay with an extra

00:20:12,850 --> 00:20:17,429
line of code and then a block comment

00:20:13,960 --> 00:20:19,779
like cursing the ghost of Dennis Ritchie

00:20:17,429 --> 00:20:21,460
for not having logical XOR even more

00:20:19,779 --> 00:20:22,659
galling actually was bi worked with a

00:20:21,460 --> 00:20:24,429
guy Roger Faulkner who worked with

00:20:22,659 --> 00:20:25,390
Dennis Ritchie and I was complaining

00:20:24,429 --> 00:20:26,559
about this he said you know there's no

00:20:25,390 --> 00:20:28,659
logic works for because law clerks or

00:20:26,559 --> 00:20:29,559
can't storm circuit I'm like ma I know

00:20:28,659 --> 00:20:32,140
that logic works one can short-circuit

00:20:29,559 --> 00:20:34,299
but like didn't these are it's some sort

00:20:32,140 --> 00:20:35,980
of biblical commandment that logical

00:20:34,299 --> 00:20:37,090
operations must be able to sort so he's

00:20:35,980 --> 00:20:38,860
like no I'm just telling you that that's

00:20:37,090 --> 00:20:40,149
the reason I'm like that's that's not

00:20:38,860 --> 00:20:43,510
the reason it's like well I'm gonna ask

00:20:40,149 --> 00:20:44,980
I'll ask Dennis but go ask Dennis do it

00:20:43,510 --> 00:20:46,120
and of course Dennis amelie replies I

00:20:44,980 --> 00:20:47,500
don't know we don't have a lock store

00:20:46,120 --> 00:20:48,630
because they can't short-circuit and you

00:20:47,500 --> 00:20:51,700
should just use bitwise I'm thinking

00:20:48,630 --> 00:20:53,110
anyway so I was wrong but so there was

00:20:51,700 --> 00:20:56,200
this kind of organic growth the organic

00:20:53,110 --> 00:20:58,899
growth was was important in particular

00:20:56,200 --> 00:21:01,149
see grew very important facilities like

00:20:58,899 --> 00:21:02,890
macro processing macro processing and

00:21:01,149 --> 00:21:05,830
rust has actually caused me to reflect

00:21:02,890 --> 00:21:06,850
back on my own use of macros because

00:21:05,830 --> 00:21:10,480
it's one of things I absolutely love

00:21:06,850 --> 00:21:13,809
about rust the the macro facilities NC

00:21:10,480 --> 00:21:15,700
are really really really important yes I

00:21:13,809 --> 00:21:17,320
know you've been told never to use the

00:21:15,700 --> 00:21:19,029
preprocessor and yeah I get it but like

00:21:17,320 --> 00:21:20,440
that's the same thing like we tell our

00:21:19,029 --> 00:21:21,640
kids about like you know that they

00:21:20,440 --> 00:21:23,649
shouldn't you know drink and they

00:21:21,640 --> 00:21:25,090
shouldn't do drugs and they shouldn't

00:21:23,649 --> 00:21:27,010
have sex noises but they're like fun

00:21:25,090 --> 00:21:28,330
stuff that like actually they should do

00:21:27,010 --> 00:21:32,770
when they get older and they can do so

00:21:28,330 --> 00:21:34,210
safely and be like I want grandkids like

00:21:32,770 --> 00:21:37,299
a meetings at some point like figure it

00:21:34,210 --> 00:21:40,870
out but they not now I'm the and and the

00:21:37,299 --> 00:21:42,610
the preprocessor is the same way the the

00:21:40,870 --> 00:21:43,779
preprocessor is really essential as a

00:21:42,610 --> 00:21:45,700
central person DTrace is essential in

00:21:43,779 --> 00:21:47,799
CFS was essential for a lot of the

00:21:45,700 --> 00:21:49,419
things we've done because but the

00:21:47,799 --> 00:21:49,750
preprocessor it leaves a lot to be

00:21:49,419 --> 00:21:51,610
desired

00:21:49,750 --> 00:21:52,720
there were standardization efforts but

00:21:51,610 --> 00:21:53,260
they came late they were content tests

00:21:52,720 --> 00:21:58,059
and so on

00:21:53,260 --> 00:22:00,730
um so through the 80s see just dominated

00:21:58,059 --> 00:22:02,950
and it was an excellent fit for

00:22:00,730 --> 00:22:04,750
operating systems essentially every OS

00:22:02,950 --> 00:22:06,610
with some exceptions I know the Mac was

00:22:04,750 --> 00:22:08,380
in pascal find it was gonna be one of

00:22:06,610 --> 00:22:09,340
those in every class and there were

00:22:08,380 --> 00:22:10,450
there were some research operating

00:22:09,340 --> 00:22:12,760
systems I don't imply this is the

00:22:10,450 --> 00:22:14,140
totality of operating systems but the

00:22:12,760 --> 00:22:15,280
vast majority of reduction systems were

00:22:14,140 --> 00:22:16,510
there and see or they were still in

00:22:15,280 --> 00:22:17,550
assembly because they were Dass

00:22:16,510 --> 00:22:21,460
but

00:22:17,550 --> 00:22:23,890
many of them were were in sea in the

00:22:21,460 --> 00:22:26,590
1990s a great darkness came across the

00:22:23,890 --> 00:22:27,820
land it was really a terrible time to be

00:22:26,590 --> 00:22:30,250
alive I'm convinced

00:22:27,820 --> 00:22:32,080
so the and now I can speak from personal

00:22:30,250 --> 00:22:35,230
experience I really would it really felt

00:22:32,080 --> 00:22:38,100
very because obviously my programming we

00:22:35,230 --> 00:22:40,270
felt like there was this kind of this

00:22:38,100 --> 00:22:41,950
mission this industrial complex

00:22:40,270 --> 00:22:43,120
object-oriented us triol complex that

00:22:41,950 --> 00:22:45,460
then insisted that everything be

00:22:43,120 --> 00:22:46,420
object-oriented and the sea based

00:22:45,460 --> 00:22:48,700
systems were thought to be relics

00:22:46,420 --> 00:22:50,950
everything was gonna be any sea based

00:22:48,700 --> 00:22:52,540
system was the walking dead and this is

00:22:50,950 --> 00:22:55,750
all gonna be replaced by these beautiful

00:22:52,540 --> 00:22:57,220
C++ systems or Java based systems that

00:22:55,750 --> 00:22:58,720
are going to replace all this so you can

00:22:57,220 --> 00:23:01,000
keep working on this legacy garbage if

00:22:58,720 --> 00:23:03,160
you want but all of us are going to go

00:23:01,000 --> 00:23:04,720
over here all the the flowery people are

00:23:03,160 --> 00:23:06,400
getting over here the architects are

00:23:04,720 --> 00:23:09,760
going to architect this great beauty and

00:23:06,400 --> 00:23:11,380
all of those systems failed and they

00:23:09,760 --> 00:23:13,870
failed I think for a bunch of reasons

00:23:11,380 --> 00:23:17,110
but one is they were all framed as

00:23:13,870 --> 00:23:18,460
second systems and they a lot of them

00:23:17,110 --> 00:23:21,400
suffered from the second system syndrome

00:23:18,460 --> 00:23:23,110
so apples Copeland I mean I do you know

00:23:21,400 --> 00:23:25,150
kids grew up today to think of Apple as

00:23:23,110 --> 00:23:26,860
the trillion dollar company I still

00:23:25,150 --> 00:23:28,630
remember when Gil Amelio was running

00:23:26,860 --> 00:23:30,160
Apple and every other Silicon Valley

00:23:28,630 --> 00:23:33,250
company was eyeing them for their real

00:23:30,160 --> 00:23:34,570
estate because they couldn't ship an

00:23:33,250 --> 00:23:36,070
operating system they had the second

00:23:34,570 --> 00:23:37,930
season called Copeland it was going

00:23:36,070 --> 00:23:40,630
nowhere son had spring there was written

00:23:37,930 --> 00:23:41,890
all in C++ um please I was an

00:23:40,630 --> 00:23:44,110
undergraduate at the time we got this

00:23:41,890 --> 00:23:45,220
like this hot release of spring he

00:23:44,110 --> 00:23:47,020
thought we would get we were getting

00:23:45,220 --> 00:23:48,850
like some sort of something that was

00:23:47,020 --> 00:23:50,050
like illegal I mean it was like okay I'm

00:23:48,850 --> 00:23:52,300
gonna give this to you on a CD but it's

00:23:50,050 --> 00:23:54,130
amazing and you run it it's like is this

00:23:52,300 --> 00:23:56,170
a hard drive stress test because all

00:23:54,130 --> 00:23:57,940
this thing is doing is rattling the

00:23:56,170 --> 00:23:59,740
spindle and it's just under I go how

00:23:57,940 --> 00:24:01,750
much DRAM do you have and now and at the

00:23:59,740 --> 00:24:03,790
time this is a this is a souped-up

00:24:01,750 --> 00:24:05,770
machine that had 32 megabytes of vram

00:24:03,790 --> 00:24:06,790
and they're like well oh no no no that's

00:24:05,770 --> 00:24:08,860
not nearly enough to UM

00:24:06,790 --> 00:24:10,630
you need to have 128 megabytes of DRAM

00:24:08,860 --> 00:24:12,970
which is like saying today oh you only

00:24:10,630 --> 00:24:16,450
have 512 gigs of DRAM yeah you're gonna

00:24:12,970 --> 00:24:18,490
need like 2 terabytes of diorama yeah

00:24:16,450 --> 00:24:20,290
who has that like well all the spring

00:24:18,490 --> 00:24:22,540
developers have that like that's a bad

00:24:20,290 --> 00:24:24,880
idea like I died do I need to tell you

00:24:22,540 --> 00:24:26,380
that that's a very bad idea to give you

00:24:24,880 --> 00:24:27,580
don't want to give your OS developers so

00:24:26,380 --> 00:24:28,870
much memory because they'll use it all

00:24:27,580 --> 00:24:29,870
and then it can't be used on a system

00:24:28,870 --> 00:24:31,880
that's got

00:24:29,870 --> 00:24:33,800
so there was some spring there was

00:24:31,880 --> 00:24:35,990
talent and we were heard of talents do

00:24:33,800 --> 00:24:38,270
you know yeah so you're so tower gent

00:24:35,990 --> 00:24:40,940
was talent was gonna rule us all so

00:24:38,270 --> 00:24:44,120
talent was going to it was IBM and Apple

00:24:40,940 --> 00:24:46,850
it was the best and the brightest were

00:24:44,120 --> 00:24:48,380
going to to go up to the ivory tower and

00:24:46,850 --> 00:24:50,270
hand us down the operating system that

00:24:48,380 --> 00:24:51,590
we would run couchant as it turns out I

00:24:50,270 --> 00:24:52,760
actually didn't thankfully didn't know

00:24:51,590 --> 00:24:54,620
this at the time I might have I might

00:24:52,760 --> 00:24:56,720
have really gone nominator Towser turns

00:24:54,620 --> 00:25:01,010
out it's a portmanteau of talented and

00:24:56,720 --> 00:25:04,000
intelligent like boy it's like how about

00:25:01,010 --> 00:25:07,370
arrow hole how about that like that's a

00:25:04,000 --> 00:25:10,670
call your company that and and as it

00:25:07,370 --> 00:25:13,520
turns out they like nailed the worst of

00:25:10,670 --> 00:25:17,330
IBM meeting the worst of Apple in an

00:25:13,520 --> 00:25:18,860
effort that was a total disaster and it

00:25:17,330 --> 00:25:20,120
and again in they were gonna do this

00:25:18,860 --> 00:25:22,310
this kind of sovereign system and they

00:25:20,120 --> 00:25:23,360
just and it wasn't this way their fault

00:25:22,310 --> 00:25:25,910
it was getting is like because they were

00:25:23,360 --> 00:25:28,550
taking this from scratch approach it's

00:25:25,910 --> 00:25:30,110
just that it attracts all sorts of

00:25:28,550 --> 00:25:33,320
abstraction garbage like some sort of

00:25:30,110 --> 00:25:34,580
terrible abstraction fly strips so and

00:25:33,320 --> 00:25:36,020
then the job of these hopping systems I

00:25:34,580 --> 00:25:38,720
mean I was at Sun so I'm you know I'm

00:25:36,020 --> 00:25:39,620
obligated to remind us all that Java OS

00:25:38,720 --> 00:25:41,330
actually went nowhere

00:25:39,620 --> 00:25:42,560
we did this we're gonna do job

00:25:41,330 --> 00:25:45,380
everywhere gives you job miss

00:25:42,560 --> 00:25:47,840
microprocessors would do a job OS Java

00:25:45,380 --> 00:25:49,430
had no unsigned type hard to talk to

00:25:47,840 --> 00:25:50,930
Harbor we have no unsigned type as it

00:25:49,430 --> 00:25:54,050
turns out so that did that didn't didn't

00:25:50,930 --> 00:25:57,110
work very well um but then Linux arrived

00:25:54,050 --> 00:25:59,030
and the nice thing about Linux enough

00:25:57,110 --> 00:26:01,310
excited six is that UNIX had a huge

00:25:59,030 --> 00:26:02,660
resurgence um and but with that see

00:26:01,310 --> 00:26:04,160
based systems became really deeply

00:26:02,660 --> 00:26:05,900
entrenched and there there were a bunch

00:26:04,160 --> 00:26:08,090
of C++ efforts they all kind of withered

00:26:05,900 --> 00:26:10,100
and there I mean there are exceptions to

00:26:08,090 --> 00:26:12,800
this you know haiku is an exception to

00:26:10,100 --> 00:26:14,450
this but you know when haiku is is

00:26:12,800 --> 00:26:16,100
listed as your example of a serious

00:26:14,450 --> 00:26:17,930
attempt I mean I love haiku first of all

00:26:16,100 --> 00:26:19,430
but haiku is was designed as like the

00:26:17,930 --> 00:26:22,880
hobbyist operating system to emulate be

00:26:19,430 --> 00:26:24,020
it's great I love it but it's the

00:26:22,880 --> 00:26:26,480
counter example I mean I'm sure there

00:26:24,020 --> 00:26:28,940
are others but basically C++ kernels

00:26:26,480 --> 00:26:31,550
whether or doesn't see and at the same

00:26:28,940 --> 00:26:33,220
time um we were there was kind of era

00:26:31,550 --> 00:26:36,350
that was very kind of hegemonic all

00:26:33,220 --> 00:26:38,660
around Java and C++ but especially Java

00:26:36,350 --> 00:26:40,570
Java Java and then appear to other

00:26:38,660 --> 00:26:42,620
languages first Ruby and then Python

00:26:40,570 --> 00:26:43,970
JavaScript JavaScript as

00:26:42,620 --> 00:26:45,500
you could popular new jobs but over time

00:26:43,970 --> 00:26:47,270
there's kind of this dip where

00:26:45,500 --> 00:26:49,400
JavaScript was used to like you know for

00:26:47,270 --> 00:26:52,010
blank tags or whatever and then in 2006

00:26:49,400 --> 00:26:53,390
I like a bunch of people we realized

00:26:52,010 --> 00:26:55,790
like wait a minute there's a language on

00:26:53,390 --> 00:26:57,410
the browser and okay I've got to use it

00:26:55,790 --> 00:26:58,970
because like I need to build something

00:26:57,410 --> 00:27:01,250
that's gonna be this kind of web app and

00:26:58,970 --> 00:27:02,450
I again like I think a lot of people

00:27:01,250 --> 00:27:03,890
waited in the JavaScript I mean I was

00:27:02,450 --> 00:27:06,710
like this is a real language actually

00:27:03,890 --> 00:27:08,809
this is like this actually is Lisp in

00:27:06,710 --> 00:27:10,070
disguise in the browser but with no

00:27:08,809 --> 00:27:12,320
parentheses and I kind of hate the

00:27:10,070 --> 00:27:14,180
parentheses so I'm not fun to that and

00:27:12,320 --> 00:27:15,260
to JavaScript was super interesting I

00:27:14,180 --> 00:27:16,730
mean there are a lot of things that were

00:27:15,260 --> 00:27:19,040
interesting about that but all those

00:27:16,730 --> 00:27:20,809
languages we focus on the developer in

00:27:19,040 --> 00:27:22,580
development and the speed of Dylan the

00:27:20,809 --> 00:27:24,410
pace of development I cannot bring

00:27:22,580 --> 00:27:25,610
myself to put developer velocity on a

00:27:24,410 --> 00:27:26,059
slide because it makes me want to throw

00:27:25,610 --> 00:27:27,440
up

00:27:26,059 --> 00:27:28,790
but that is what we were trying to do

00:27:27,440 --> 00:27:31,250
that is we're trying they were trying to

00:27:28,790 --> 00:27:33,650
make developers faster but there wasn't

00:27:31,250 --> 00:27:38,050
I don't think if there's a Ruby OS

00:27:33,650 --> 00:27:40,640
effort or a Python OS ever it's like if

00:27:38,050 --> 00:27:42,350
it's like Steve's like oh my god we

00:27:40,640 --> 00:27:46,250
promise never to speak of the Ruby OS

00:27:42,350 --> 00:27:49,340
effort exactly a lot of mistakes were

00:27:46,250 --> 00:27:52,490
made I know I was experimenting I wasn't

00:27:49,340 --> 00:27:55,160
it was age-appropriate I know that makes

00:27:52,490 --> 00:27:57,080
subtle sense but there would be a lot of

00:27:55,160 --> 00:27:57,950
problems making a ruby OS or python oh I

00:27:57,080 --> 00:27:59,630
said it wouldn't be it would be

00:27:57,950 --> 00:28:03,200
something you would do because you were

00:27:59,630 --> 00:28:06,290
in college which is fine but there were

00:28:03,200 --> 00:28:07,610
no real serious efforts um so we hit

00:28:06,290 --> 00:28:08,840
kind of I guess what we're gonna end up

00:28:07,610 --> 00:28:11,650
calling the teens which makes no sense

00:28:08,840 --> 00:28:13,520
to me but we hit the 20 to the 2010s and

00:28:11,650 --> 00:28:16,460
system programmers were looking for

00:28:13,520 --> 00:28:20,990
something different they they want the a

00:28:16,460 --> 00:28:23,000
we want the performance of C but they we

00:28:20,990 --> 00:28:25,040
had used these other languages and you

00:28:23,000 --> 00:28:27,620
know it's actually it's kind of nice to

00:28:25,040 --> 00:28:30,200
use a map or a hash or it it's kind of

00:28:27,620 --> 00:28:32,450
nice to be able to to use the you know

00:28:30,200 --> 00:28:33,830
to use split or write your expressions

00:28:32,450 --> 00:28:36,020
what-have-you the things that are

00:28:33,830 --> 00:28:39,980
powerful constructs but I want them in

00:28:36,020 --> 00:28:41,360
the in the system that I'm building and

00:28:39,980 --> 00:28:42,440
there were kinds of interesting things

00:28:41,360 --> 00:28:44,300
that came out of that I'm one of them

00:28:42,440 --> 00:28:45,890
I'm a giant and so one of the things

00:28:44,300 --> 00:28:47,630
that was an interesting artifact around

00:28:45,890 --> 00:28:50,480
that is that there there was a

00:28:47,630 --> 00:28:52,550
JavaScript war in the browser which led

00:28:50,480 --> 00:28:54,620
to some very powerful JavaScript

00:28:52,550 --> 00:28:56,480
runtimes v8 in particular that we could

00:28:54,620 --> 00:28:59,720
actually run on the server and

00:28:56,480 --> 00:29:01,730
we could run reasonable servers writing

00:28:59,720 --> 00:29:05,090
in JavaScript on the server side nodejs

00:29:01,730 --> 00:29:06,740
and that was really interesting now as

00:29:05,090 --> 00:29:08,810
it turns out that left a lot to be

00:29:06,740 --> 00:29:11,270
desired because it's still JavaScript

00:29:08,810 --> 00:29:12,740
but yeah I love JavaScript i but i

00:29:11,270 --> 00:29:16,010
javascript is the failed state of

00:29:12,740 --> 00:29:19,850
programming languages the in that

00:29:16,010 --> 00:29:21,950
javascript is wants anything to go wants

00:29:19,850 --> 00:29:23,060
to allow so much that it can become

00:29:21,950 --> 00:29:24,770
difficult and things like typescript

00:29:23,060 --> 00:29:27,200
kind of came into that gap and so on but

00:29:24,770 --> 00:29:28,580
in JavaScript wasn't necessarily yet for

00:29:27,200 --> 00:29:29,660
we used it a lot of joint but there are

00:29:28,580 --> 00:29:32,300
lots of challenges in the broader world

00:29:29,660 --> 00:29:36,170
first for system software the Bell Labs

00:29:32,300 --> 00:29:37,550
refugees at Google developer they'd like

00:29:36,170 --> 00:29:40,490
to be called that or not I mean that is

00:29:37,550 --> 00:29:42,530
praise not not damnation but on develop

00:29:40,490 --> 00:29:44,500
go of course maybe we'll use go go

00:29:42,530 --> 00:29:47,500
definitely solve some of these problems

00:29:44,500 --> 00:29:50,150
but there are some idiosyncrasies I'm

00:29:47,500 --> 00:29:51,440
trying to put that in the best possible

00:29:50,150 --> 00:29:53,900
way I could there are some

00:29:51,440 --> 00:29:56,450
idiosyncrasies if you didn't see it

00:29:53,900 --> 00:30:00,230
aaden's I had a great talk earlier on G

00:29:56,450 --> 00:30:03,530
Weiser and some of the the I would say

00:30:00,230 --> 00:30:05,390
both the promise and the peril of go for

00:30:03,530 --> 00:30:07,040
a very creative use case one of the

00:30:05,390 --> 00:30:08,720
problems with go from an operating

00:30:07,040 --> 00:30:10,700
system perspective is that go and jobs

00:30:08,720 --> 00:30:14,600
work and others are GC their garbage

00:30:10,700 --> 00:30:16,460
collected and they are very mean

00:30:14,600 --> 00:30:18,650
speaking for v8 because I know v8 better

00:30:16,460 --> 00:30:19,880
than Co it's very sophisticated GC I

00:30:18,650 --> 00:30:21,740
mean it's very sophisticated arbors

00:30:19,880 --> 00:30:24,080
collection but it's still garbage

00:30:21,740 --> 00:30:25,670
collection and garbage collection even

00:30:24,080 --> 00:30:27,380
when it's sophisticated it's not the

00:30:25,670 --> 00:30:29,330
garbage collect if you like to blame the

00:30:27,380 --> 00:30:30,800
garbage collector it's like the garbage

00:30:29,330 --> 00:30:32,510
collectors ruining my processes that you

00:30:30,800 --> 00:30:34,010
know the garbage is ruining your process

00:30:32,510 --> 00:30:35,990
like you're creating the garbage

00:30:34,010 --> 00:30:38,120
designed to GC hates you it just like

00:30:35,990 --> 00:30:38,510
stop creating crap and the GC won't have

00:30:38,120 --> 00:30:40,820
to do this

00:30:38,510 --> 00:30:43,640
or worse stop creating these huge mean

00:30:40,820 --> 00:30:46,550
when the GC is really exhausting itself

00:30:43,640 --> 00:30:47,720
it's because you have a memory leak it's

00:30:46,550 --> 00:30:49,250
like but I can't remember in legacy

00:30:47,720 --> 00:30:49,550
scene it's like us is exactly how we got

00:30:49,250 --> 00:30:52,040
here

00:30:49,550 --> 00:30:53,900
but you because what you have is a big

00:30:52,040 --> 00:30:55,760
object graph that's very connected and

00:30:53,900 --> 00:30:57,260
in JavaScript it's very easy to

00:30:55,760 --> 00:30:59,600
accidentally have a closure that has a

00:30:57,260 --> 00:31:02,360
reference into this big object graph and

00:30:59,600 --> 00:31:04,850
now none of this can go away because

00:31:02,360 --> 00:31:08,270
it's not garbage it's not a garbage

00:31:04,850 --> 00:31:09,800
collector it's a heap scanner and it's

00:31:08,270 --> 00:31:10,100
not binding it if they it's scanning

00:31:09,800 --> 00:31:12,919
your

00:31:10,100 --> 00:31:15,260
very well thank you very much um and

00:31:12,919 --> 00:31:19,400
this is tough this is just tough and it

00:31:15,260 --> 00:31:22,039
makes it like GC I I honor GC I uh I

00:31:19,400 --> 00:31:24,260
think it's great for a lot of software

00:31:22,039 --> 00:31:27,380
but there's a class of system software

00:31:24,260 --> 00:31:29,360
for which GC just doesn't work and it

00:31:27,380 --> 00:31:31,070
doesn't work because you don't have

00:31:29,360 --> 00:31:33,020
predictable performance because the

00:31:31,070 --> 00:31:35,179
Layton sees can be significant and

00:31:33,020 --> 00:31:37,850
because I think because it doesn't force

00:31:35,179 --> 00:31:40,100
the programmer to really think about

00:31:37,850 --> 00:31:46,340
this stuff and I think thinking is

00:31:40,100 --> 00:31:47,419
important for wait that sounds

00:31:46,340 --> 00:31:49,220
pejorative the way I'm gonna raise it by

00:31:47,419 --> 00:31:52,460
no means pejoratively I think there is a

00:31:49,220 --> 00:31:55,549
class of software for which I I don't

00:31:52,460 --> 00:31:57,049
mind requiring deeper thought upfront

00:31:55,549 --> 00:31:58,669
and then there's another class of

00:31:57,049 --> 00:32:00,320
software for like hey let's get

00:31:58,669 --> 00:32:02,570
something working and that's fine so

00:32:00,320 --> 00:32:04,280
it's did this is not like the entire

00:32:02,570 --> 00:32:05,600
world should be GC door none of the

00:32:04,280 --> 00:32:07,100
world should you be GC I actually do

00:32:05,600 --> 00:32:09,140
think there are right tools for the job

00:32:07,100 --> 00:32:10,520
but for system software for the

00:32:09,140 --> 00:32:14,299
operating system for that infrastructure

00:32:10,520 --> 00:32:16,760
I think GC is a real problem and at

00:32:14,299 --> 00:32:17,929
least for me like I I II am at the point

00:32:16,760 --> 00:32:20,059
where it's like I don't want to do

00:32:17,929 --> 00:32:22,340
performance critical software in in GC

00:32:20,059 --> 00:32:25,190
and then so I was actually at a bit of a

00:32:22,340 --> 00:32:26,539
quandary because like the node thing

00:32:25,190 --> 00:32:27,679
like wasn't working out I was kind of

00:32:26,539 --> 00:32:30,710
getting out of a bad relationship on

00:32:27,679 --> 00:32:34,580
that one and then it's like what what's

00:32:30,710 --> 00:32:35,539
next and like C++ I had done way too

00:32:34,580 --> 00:32:37,309
much Depot supposed to talk about

00:32:35,539 --> 00:32:39,110
college I done way too much T plus plus

00:32:37,309 --> 00:32:40,700
so Stephen and Ruby OS I had written a

00:32:39,110 --> 00:32:42,830
hundred thousand lines C++ they were

00:32:40,700 --> 00:32:45,260
both age appropriate mistakes I think we

00:32:42,830 --> 00:32:46,850
would say in retrospect um I didn't want

00:32:45,260 --> 00:32:48,770
to go back to C++ it was like no no but

00:32:46,850 --> 00:32:51,230
C Mo's Moses I totally change now like

00:32:48,770 --> 00:32:52,700
that's great for C++ and I want C++ to

00:32:51,230 --> 00:32:54,289
have a happy and productive life but

00:32:52,700 --> 00:32:55,909
steeple I suppose dragged all my

00:32:54,289 --> 00:32:59,120
into the street lit it on fire so like I

00:32:55,909 --> 00:33:00,770
am NOT going back to C++ ever and that's

00:32:59,120 --> 00:33:02,539
not a value judgment that's just like

00:33:00,770 --> 00:33:04,340
that's self-preservation why I'm not

00:33:02,539 --> 00:33:06,140
going back to C with less

00:33:04,340 --> 00:33:08,120
so forget C++ it's not going to see bus

00:33:06,140 --> 00:33:10,520
boss even though again I honor the

00:33:08,120 --> 00:33:12,950
change they made to it all right and it

00:33:10,520 --> 00:33:15,049
kind of like looking at this I was

00:33:12,950 --> 00:33:17,659
getting increasingly excited about Russ

00:33:15,049 --> 00:33:20,840
Russ was really interesting and I think

00:33:17,659 --> 00:33:23,900
how many people are aware of rust okay

00:33:20,840 --> 00:33:25,789
what hands how many people

00:33:23,900 --> 00:33:28,940
have kind of pined after rust but

00:33:25,789 --> 00:33:31,549
haven't written any okay how many VX you

00:33:28,940 --> 00:33:33,230
been rust that's a good number actually

00:33:31,549 --> 00:33:35,090
oh yeah it's a good number right yeah

00:33:33,230 --> 00:33:36,440
it's gonna but okay but a lot of you

00:33:35,090 --> 00:33:38,870
were in the category that I was in not

00:33:36,440 --> 00:33:42,950
that long ago which is kind of like I

00:33:38,870 --> 00:33:44,870
was seriously rust curious I you know I

00:33:42,950 --> 00:33:46,970
was like reading all the blog entries

00:33:44,870 --> 00:33:48,169
and kind of like you know like it's like

00:33:46,970 --> 00:33:51,440
go out like that looks interesting and

00:33:48,169 --> 00:33:53,059
this looks interesting and I'm like but

00:33:51,440 --> 00:33:54,409
what do you put whitespace you know cuz

00:33:53,059 --> 00:33:55,909
I got all you gotta find a reason to

00:33:54,409 --> 00:33:56,720
hate it which is wrong right you don't

00:33:55,909 --> 00:33:58,070
wanna do that like get over your

00:33:56,720 --> 00:34:01,700
whitespace this is why I've learned a

00:33:58,070 --> 00:34:03,490
tough lesson but like I I was really

00:34:01,700 --> 00:34:07,580
interested if I was intrigued by rust

00:34:03,490 --> 00:34:09,710
and in particular and the values of rust

00:34:07,580 --> 00:34:11,869
really represented the values that I

00:34:09,710 --> 00:34:13,909
have for my own software so values in

00:34:11,869 --> 00:34:15,470
the values of rust that said very

00:34:13,909 --> 00:34:16,849
upfront you go to any rust website it's

00:34:15,470 --> 00:34:19,879
gonna say that it is a system system

00:34:16,849 --> 00:34:22,399
software language that runs fast and is

00:34:19,879 --> 00:34:24,139
designed to be safe and that was really

00:34:22,399 --> 00:34:26,599
interesting because those are the things

00:34:24,139 --> 00:34:29,089
that I want to do and I want to build

00:34:26,599 --> 00:34:31,940
permanent software I want to build

00:34:29,089 --> 00:34:33,109
software that that outlives me I'm

00:34:31,940 --> 00:34:34,879
already written software that I know

00:34:33,109 --> 00:34:36,169
absolutely well live me and not because

00:34:34,879 --> 00:34:39,200
I plan to walk in the traffic tonight

00:34:36,169 --> 00:34:40,429
but because I I on the there is software

00:34:39,200 --> 00:34:42,679
that I've written that's simply going to

00:34:40,429 --> 00:34:44,629
be uh NECA nama chol to to rewrite

00:34:42,679 --> 00:34:47,060
because it works and the thing that is

00:34:44,629 --> 00:34:49,730
beautiful and amazing about software is

00:34:47,060 --> 00:34:52,429
like Euclid's GC D algorithm 2,000 years

00:34:49,730 --> 00:34:54,020
ago when software works we've always

00:34:52,429 --> 00:34:55,429
focus on how software's always broken in

00:34:54,020 --> 00:34:58,730
the world is terrible which is fine

00:34:55,429 --> 00:35:00,859
that's true but when software works it

00:34:58,730 --> 00:35:02,869
works forever for the problem that it's

00:35:00,859 --> 00:35:04,580
solving it is mathematical machine we

00:35:02,869 --> 00:35:05,839
are really lucky because I you most of

00:35:04,580 --> 00:35:08,690
us are software developers and we are

00:35:05,839 --> 00:35:11,240
lucky to be alive now we live in a

00:35:08,690 --> 00:35:12,859
golden age of this stuff the our

00:35:11,240 --> 00:35:15,890
descendants will look back at this time

00:35:12,859 --> 00:35:18,170
as this is like amazing time when all

00:35:15,890 --> 00:35:19,970
this offer was being written and now

00:35:18,170 --> 00:35:21,470
that said some of the software is not

00:35:19,970 --> 00:35:24,530
gonna last forever some of the software

00:35:21,470 --> 00:35:27,020
we are gonna have to to rewrite with

00:35:24,530 --> 00:35:29,480
software that can survive in perpetuity

00:35:27,020 --> 00:35:31,970
and what I see from rust is that

00:35:29,480 --> 00:35:34,190
aspiration for if in perpetuity and the

00:35:31,970 --> 00:35:36,740
the I know rust has like eight different

00:35:34,190 --> 00:35:37,619
origin stories all from grading I mean

00:35:36,740 --> 00:35:38,670
Graydon came up with an

00:35:37,619 --> 00:35:40,619
it has got like eight different reasons

00:35:38,670 --> 00:35:42,150
why call the trust but the one that I

00:35:40,619 --> 00:35:44,549
like is that I like kind of that

00:35:42,150 --> 00:35:46,769
industrial sense of building things that

00:35:44,549 --> 00:35:48,269
that survives such that the chemical

00:35:46,769 --> 00:35:50,609
reaction with oxygen is like their

00:35:48,269 --> 00:35:53,099
biggest problem on that's pretty neat um

00:35:50,609 --> 00:35:54,599
so Russ is really interesting the thing

00:35:53,099 --> 00:35:56,039
that is super interesting about Russ and

00:35:54,599 --> 00:35:59,220
to the best of my knowledge unique is

00:35:56,039 --> 00:36:02,460
the notion of ownership so Russ is able

00:35:59,220 --> 00:36:04,829
to statically figure out who owns what

00:36:02,460 --> 00:36:07,619
and when you you being like the threat

00:36:04,829 --> 00:36:09,839
of control own the memory that you're

00:36:07,619 --> 00:36:11,519
dealing with and when you don't and when

00:36:09,839 --> 00:36:13,259
you don't when you're done when it

00:36:11,519 --> 00:36:15,720
realizes like okay you're done with this

00:36:13,259 --> 00:36:18,420
I will take care of freeing this for you

00:36:15,720 --> 00:36:21,359
there is no free in rust per se in

00:36:18,420 --> 00:36:23,309
memory is allocated for you and then it

00:36:21,359 --> 00:36:25,319
is freed when you were done with it now

00:36:23,309 --> 00:36:27,150
that is it that the compiler makes this

00:36:25,319 --> 00:36:29,220
huge bargain with you it's like the

00:36:27,150 --> 00:36:31,589
compiler says to you I will do this for

00:36:29,220 --> 00:36:32,819
you I the russ compiler will do this I

00:36:31,589 --> 00:36:34,880
will give you this incredible superpower

00:36:32,819 --> 00:36:37,349
where you don't need to think about this

00:36:34,880 --> 00:36:39,930
but you're gonna need to help me out and

00:36:37,349 --> 00:36:42,180
you're gonna need to help me out when I

00:36:39,930 --> 00:36:44,519
don't know where this memory is going or

00:36:42,180 --> 00:36:46,529
who owns it so I'm gonna allow you to

00:36:44,519 --> 00:36:49,829
lend this memory out I'm gonna allow you

00:36:46,529 --> 00:36:53,069
a car to borrowing right but I need to

00:36:49,829 --> 00:36:54,809
know when it comes back and sometimes I

00:36:53,069 --> 00:36:56,759
get confused I the compiler get confused

00:36:54,809 --> 00:36:58,259
and sometimes it uses lexical lifetimes

00:36:56,759 --> 00:37:00,749
a lot to figure out like what owns what

00:36:58,259 --> 00:37:02,130
when and sometimes I will give you an

00:37:00,749 --> 00:37:04,109
incredibly cryptic error message because

00:37:02,130 --> 00:37:07,769
I am confused about what about who owns

00:37:04,109 --> 00:37:09,720
what when and you are gonna grind on

00:37:07,769 --> 00:37:10,950
this to get this working even though it

00:37:09,720 --> 00:37:11,999
feels painful and it feels like I'm

00:37:10,950 --> 00:37:15,599
giving you mixed messages and telling

00:37:11,999 --> 00:37:17,009
you to like fetch rocks because I'm

00:37:15,599 --> 00:37:20,220
gonna do this incredible thing for you

00:37:17,009 --> 00:37:22,980
where I'm gonna give you the power of a

00:37:20,220 --> 00:37:26,160
garbage collected language with the

00:37:22,980 --> 00:37:29,430
performance of manual memory management

00:37:26,160 --> 00:37:30,779
and that's amazing and it's really

00:37:29,430 --> 00:37:31,829
important and it's important for

00:37:30,779 --> 00:37:34,619
different people for different reasons

00:37:31,829 --> 00:37:35,849
so there is a demographic probably a big

00:37:34,619 --> 00:37:37,470
demographic done a lot of folks for whom

00:37:35,849 --> 00:37:40,559
it's like the great thing about that is

00:37:37,470 --> 00:37:43,230
memory safety that I can't overwrite

00:37:40,559 --> 00:37:45,779
anyone else's memory and that is really

00:37:43,230 --> 00:37:48,059
important i I'm not gonna I'm not going

00:37:45,779 --> 00:37:50,339
to have you know be zeroes that have got

00:37:48,059 --> 00:37:51,030
the wrong size on them mem copies that

00:37:50,339 --> 00:37:53,160
have the wrong

00:37:51,030 --> 00:37:55,380
I'm not going to more things I love

00:37:53,160 --> 00:37:57,030
about rust among other things is rust

00:37:55,380 --> 00:37:59,700
there's lots of kinds of data corruption

00:37:57,030 --> 00:38:00,750
that rust prevents one thing is when you

00:37:59,700 --> 00:38:02,850
initialize the structure you have to

00:38:00,750 --> 00:38:04,260
initialize all fields and on the one you

00:38:02,850 --> 00:38:05,520
okay it rust get out of my grill like

00:38:04,260 --> 00:38:07,380
why do I have to digitize all of these

00:38:05,520 --> 00:38:08,490
and the rest should be like what's your

00:38:07,380 --> 00:38:10,170
problem like why don't you want to

00:38:08,490 --> 00:38:11,910
initialize this like you're the one with

00:38:10,170 --> 00:38:13,710
a problem like you initialize this give

00:38:11,910 --> 00:38:15,660
me a value I give it to me zero put a

00:38:13,710 --> 00:38:16,890
zero there fortunately like the Russ

00:38:15,660 --> 00:38:19,590
compiler doesn't like get that

00:38:16,890 --> 00:38:21,690
belligerent with you but in fact

00:38:19,590 --> 00:38:23,640
actually what's really funny is like the

00:38:21,690 --> 00:38:25,770
Russ compiler has like such a fearsome

00:38:23,640 --> 00:38:27,420
reputation for somewhat legitimate

00:38:25,770 --> 00:38:30,030
reasons just because the when when the

00:38:27,420 --> 00:38:31,980
borrowed checkers angry with you it can

00:38:30,030 --> 00:38:34,290
feel like I don't know what to do

00:38:31,980 --> 00:38:36,990
so the as a result the Russ compiler

00:38:34,290 --> 00:38:38,670
totally overcompensates and is like the

00:38:36,990 --> 00:38:40,980
friendliest compiler I've ever

00:38:38,670 --> 00:38:42,060
encountered on because Russ is like oh I

00:38:40,980 --> 00:38:43,500
don't think you meant this I think you

00:38:42,060 --> 00:38:44,730
meant about this thing and like here's

00:38:43,500 --> 00:38:46,560
exactly what I'm like look I got all

00:38:44,730 --> 00:38:49,260
these ascii colors where i'm showing you

00:38:46,560 --> 00:38:50,610
exactly where it is and you're like why

00:38:49,260 --> 00:38:52,440
are you being so helpful this is great

00:38:50,610 --> 00:38:55,050
it's like just remember this later

00:38:52,440 --> 00:38:57,030
okay just like remember my helpfulness

00:38:55,050 --> 00:39:00,090
at your darkest hour because your

00:38:57,030 --> 00:39:03,060
darkest hour is probably coming so I

00:39:00,090 --> 00:39:04,830
actually do I love I love love love the

00:39:03,060 --> 00:39:07,980
Russ compiler and the reason this is

00:39:04,830 --> 00:39:10,860
important is for me memory safety isn't

00:39:07,980 --> 00:39:11,850
as big of an issue because and this is

00:39:10,860 --> 00:39:13,950
gonna sound I don't want to sound

00:39:11,850 --> 00:39:16,230
arrogant but this is like I can write

00:39:13,950 --> 00:39:18,150
correct see I and now I've got another

00:39:16,230 --> 00:39:20,190
hard way it's not something that I would

00:39:18,150 --> 00:39:22,680
recommend for everybody but like I can

00:39:20,190 --> 00:39:24,810
write correct see and I've written a lot

00:39:22,680 --> 00:39:27,240
of correct C I can write C that frees

00:39:24,810 --> 00:39:29,070
memory properly that that doesn't

00:39:27,240 --> 00:39:32,040
overwrite and that basically doesn't

00:39:29,070 --> 00:39:34,560
suffer from memory corruption the

00:39:32,040 --> 00:39:35,700
arithmetic overflows are a lot harder

00:39:34,560 --> 00:39:36,810
actually Russ actually helps do that

00:39:35,700 --> 00:39:38,670
that one I'm not going to make the claim

00:39:36,810 --> 00:39:42,060
because I've been there those are super

00:39:38,670 --> 00:39:45,060
hard but the on memory safety I can I

00:39:42,060 --> 00:39:48,690
can do that but Russ is still valuable

00:39:45,060 --> 00:39:50,850
for me because what it would I can do

00:39:48,690 --> 00:39:53,340
that because I'm controlling heaven and

00:39:50,850 --> 00:39:56,730
earth in my software it makes it very

00:39:53,340 --> 00:39:59,340
hard to compose software because even if

00:39:56,730 --> 00:40:01,680
you and I both know how to write memory

00:39:59,340 --> 00:40:03,630
safe see it's very hard for us to have

00:40:01,680 --> 00:40:04,830
an interface boundary where we can agree

00:40:03,630 --> 00:40:07,050
about who does what

00:40:04,830 --> 00:40:08,250
so you know had a free memory properly

00:40:07,050 --> 00:40:10,440
and I know how to free memory properly

00:40:08,250 --> 00:40:11,850
oh but I didn't realize that in that era

00:40:10,440 --> 00:40:14,100
condition I was supposed to free the

00:40:11,850 --> 00:40:16,880
handle that you had given me not you or

00:40:14,100 --> 00:40:19,500
I it's just it's a miscommunication and

00:40:16,880 --> 00:40:22,530
it's really easy to see is very very

00:40:19,500 --> 00:40:24,120
hard to compose properly and one of the

00:40:22,530 --> 00:40:25,350
things that we do a lot actually to

00:40:24,120 --> 00:40:26,880
compose see is we use something called

00:40:25,350 --> 00:40:29,220
intrusive data structures where you

00:40:26,880 --> 00:40:31,260
embed nodes of a data structure in your

00:40:29,220 --> 00:40:32,790
larger structure which is great for C

00:40:31,260 --> 00:40:33,210
it's terrible for Ross we'll talk about

00:40:32,790 --> 00:40:37,280
that in a bit

00:40:33,210 --> 00:40:40,590
um but rust it allows you to actually

00:40:37,280 --> 00:40:42,810
compose truly compose because you don't

00:40:40,590 --> 00:40:46,140
need to worry about the the borrowed

00:40:42,810 --> 00:40:48,060
checker has assured that you that the

00:40:46,140 --> 00:40:50,550
contracts for who owns what are

00:40:48,060 --> 00:40:54,150
implicitly abided by and that it's it's

00:40:50,550 --> 00:40:56,120
amazing it really is amazing because it

00:40:54,150 --> 00:40:58,800
you can build these really sophisticated

00:40:56,120 --> 00:40:59,970
primitives and in my experience and

00:40:58,800 --> 00:41:02,790
again you know everyone's mileage may

00:40:59,970 --> 00:41:05,220
vary and I'm not trying to you have this

00:41:02,790 --> 00:41:06,480
blog entry comparing the performance of

00:41:05,220 --> 00:41:08,400
Ross the performance of C for my

00:41:06,480 --> 00:41:11,040
application and I have like these like

00:41:08,400 --> 00:41:12,900
eight paragraphs trying to explain how

00:41:11,040 --> 00:41:14,730
this is not trying to draw broader

00:41:12,900 --> 00:41:16,050
conclusions about the performance of

00:41:14,730 --> 00:41:17,100
severs the performances but of course

00:41:16,050 --> 00:41:18,690
it's like it's the Internet's the first

00:41:17,100 --> 00:41:20,250
columns like I can't believe this jerk

00:41:18,690 --> 00:41:21,780
things that Russ is always faster than

00:41:20,250 --> 00:41:24,960
say it's like that's not what I'm saying

00:41:21,780 --> 00:41:27,750
for the software that I wrote the the I

00:41:24,960 --> 00:41:30,030
had a body of software that was in C it

00:41:27,750 --> 00:41:33,510
was to see an end node I rewrote it and

00:41:30,030 --> 00:41:35,100
rust and when I rewrote and rust my

00:41:33,510 --> 00:41:38,610
expectations were why should say when I

00:41:35,100 --> 00:41:40,500
was doing that I was almost inhibited by

00:41:38,610 --> 00:41:42,720
the fact that I was effectively porting

00:41:40,500 --> 00:41:44,700
my C because I tried to do some of the

00:41:42,720 --> 00:41:46,740
things the same way I had done them and

00:41:44,700 --> 00:41:49,050
C and in particular in C we have

00:41:46,740 --> 00:41:51,240
multiple ownership all the time so when

00:41:49,050 --> 00:41:53,400
you and doubly linked list is actually

00:41:51,240 --> 00:41:55,290
two linked lists right and a given

00:41:53,400 --> 00:41:58,530
object is actually owned by two things

00:41:55,290 --> 00:41:59,910
the thing your your next thing and your

00:41:58,530 --> 00:42:03,180
previous thing they both think they own

00:41:59,910 --> 00:42:04,400
you rust does not want to do that I mean

00:42:03,180 --> 00:42:07,170
you can't do it and there's a great blog

00:42:04,400 --> 00:42:08,730
entry but what series of blog entries on

00:42:07,170 --> 00:42:10,350
so you really want to write a doubly

00:42:08,730 --> 00:42:12,840
linked list and rust you really don't

00:42:10,350 --> 00:42:15,000
want to do it and what you want to do is

00:42:12,840 --> 00:42:16,020
with rust and I think at the end and the

00:42:15,000 --> 00:42:17,580
whole rust community has been very

00:42:16,020 --> 00:42:18,450
upfront about this bargain that you're

00:42:17,580 --> 00:42:20,780
buying into with rust

00:42:18,450 --> 00:42:23,490
is you want to rethink your problem and

00:42:20,780 --> 00:42:27,180
implement it in a way that makes your

00:42:23,490 --> 00:42:29,220
ownership clear so if you convey your

00:42:27,180 --> 00:42:30,750
ownership queerly rust will give you

00:42:29,220 --> 00:42:33,630
very high performing code as a result

00:42:30,750 --> 00:42:35,579
like okay I can buy that so I had done

00:42:33,630 --> 00:42:39,329
so many things I've got five minutes

00:42:35,579 --> 00:42:42,510
until we're done boy that went fast um

00:42:39,329 --> 00:42:44,730
all right we're gonna pick up base

00:42:42,510 --> 00:42:47,940
oh yeah that's four questions I'm not

00:42:44,730 --> 00:42:52,140
taking questions that's fine all right

00:42:47,940 --> 00:42:56,250
false alarm false sense of time um so

00:42:52,140 --> 00:42:57,540
the in but in my experience the so I

00:42:56,250 --> 00:42:59,250
would go in for the singing Ross I've

00:42:57,540 --> 00:43:00,329
made all these compromises because I

00:42:59,250 --> 00:43:03,510
just got to the point where I got so

00:43:00,329 --> 00:43:05,280
beaten down I mean - I wanna question

00:43:03,510 --> 00:43:06,540
but I I was bargaining I was in the

00:43:05,280 --> 00:43:07,440
bargaining phase I'm like I will do

00:43:06,540 --> 00:43:08,579
anything to get this working

00:43:07,440 --> 00:43:09,810
I got any did I get this work cuz I was

00:43:08,579 --> 00:43:11,220
trying to make it high-performing and do

00:43:09,810 --> 00:43:13,290
what I doesn't say I'm like I need to

00:43:11,220 --> 00:43:15,570
stop doing that I just need to get this

00:43:13,290 --> 00:43:17,520
damn thing working so I got it working

00:43:15,570 --> 00:43:18,990
and I'm like I don't think it's gonna

00:43:17,520 --> 00:43:21,930
have anywhere near the performance of C

00:43:18,990 --> 00:43:23,400
because I the way I did it was so dumb I

00:43:21,930 --> 00:43:25,619
mean it's like I just did it like the

00:43:23,400 --> 00:43:27,510
knuckleheaded way I implemented and in

00:43:25,619 --> 00:43:27,839
particular I implemented a doubly-linked

00:43:27,510 --> 00:43:30,119
list

00:43:27,839 --> 00:43:31,619
effectively by having hash tables of uu

00:43:30,119 --> 00:43:32,970
ideas where I'm like constantly like you

00:43:31,619 --> 00:43:34,530
you want to get your next one you like

00:43:32,970 --> 00:43:35,670
Anna look up the CEO idea effectively

00:43:34,530 --> 00:43:37,200
this time stamping it's the next thing

00:43:35,670 --> 00:43:38,940
and I'm like this is terrible

00:43:37,200 --> 00:43:41,210
this is gonna be this is gonna perform

00:43:38,940 --> 00:43:45,510
abysmally and it outperformed my safe

00:43:41,210 --> 00:43:47,040
it's like hell and so I'm like I gotta

00:43:45,510 --> 00:43:48,390
take that apart what actually happened

00:43:47,040 --> 00:43:51,510
what actually happened is and it gets

00:43:48,390 --> 00:43:53,400
right to the composability of rust what

00:43:51,510 --> 00:43:56,220
actually happened is this particular

00:43:53,400 --> 00:43:57,960
code spends all of its time searching in

00:43:56,220 --> 00:44:00,510
a data structure I in a sorted data

00:43:57,960 --> 00:44:02,069
structure which in my C implementation

00:44:00,510 --> 00:44:04,230
was an AVL tree for a lot of good

00:44:02,069 --> 00:44:05,700
reasons we use trees all over the

00:44:04,230 --> 00:44:07,079
place because they're super easy to use

00:44:05,700 --> 00:44:09,000
you can embed an AVL node and your

00:44:07,079 --> 00:44:10,980
broader C structure you can have a given

00:44:09,000 --> 00:44:12,480
C structure that's on 15 different AVL

00:44:10,980 --> 00:44:14,790
trees at the same time by embedding

00:44:12,480 --> 00:44:16,619
different AVL nodes we've got a library

00:44:14,790 --> 00:44:17,940
that gets it right and you know and so

00:44:16,619 --> 00:44:19,619
on and so forth so it's it there's a lot

00:44:17,940 --> 00:44:22,500
of good reasons do it but an AVO tree is

00:44:19,619 --> 00:44:24,510
actually not it's good but it's not the

00:44:22,500 --> 00:44:27,990
best data structure to use and in

00:44:24,510 --> 00:44:31,319
particular rust uses B trees and B trays

00:44:27,990 --> 00:44:32,310
yes from databases rust implants data

00:44:31,319 --> 00:44:34,590
structures you

00:44:32,310 --> 00:44:37,560
just a it's binary tree structure is a

00:44:34,590 --> 00:44:39,840
b-tree and it turns out it in this era

00:44:37,560 --> 00:44:42,270
in the memory hierarchy being what it is

00:44:39,840 --> 00:44:44,670
cache line sizes being what they are um

00:44:42,270 --> 00:44:46,050
a beech tree is actually a better

00:44:44,670 --> 00:44:49,170
implementation and the implementation

00:44:46,050 --> 00:44:50,610
for B trees and rust is total rocket

00:44:49,170 --> 00:44:53,850
science and there's some great blog

00:44:50,610 --> 00:44:56,490
entries describing the the kind of the

00:44:53,850 --> 00:44:58,950
iteration on that but it's amazing stuff

00:44:56,490 --> 00:45:00,450
so a lot of this is a lot of the

00:44:58,950 --> 00:45:03,170
performance Delta here and this is the

00:45:00,450 --> 00:45:07,230
this is run time on the on the y axis

00:45:03,170 --> 00:45:08,970
and the the rectangles kind of varies

00:45:07,230 --> 00:45:11,610
this data set saw has effectively for

00:45:08,970 --> 00:45:14,280
this particular application on a lot of

00:45:11,610 --> 00:45:16,230
the win on the one hand was beat race

00:45:14,280 --> 00:45:18,600
and easy music well that's just like

00:45:16,230 --> 00:45:21,660
that's be trees not trees it's like

00:45:18,600 --> 00:45:23,640
yeah but the reason I could use a be

00:45:21,660 --> 00:45:26,940
tree and not an AVL tree is because that

00:45:23,640 --> 00:45:29,360
composability of rust like a be tree and

00:45:26,940 --> 00:45:32,550
C is gnarly

00:45:29,360 --> 00:45:33,930
and because a be tree in like is just I

00:45:32,550 --> 00:45:35,070
can't talk about intrusive it's very

00:45:33,930 --> 00:45:37,440
intrusive it's very kind of up and

00:45:35,070 --> 00:45:38,580
everything's underwear and the and

00:45:37,440 --> 00:45:39,780
someone of course the inner is like why

00:45:38,580 --> 00:45:40,710
you're going to use this be tree

00:45:39,780 --> 00:45:43,440
implementation you look at the bee tree

00:45:40,710 --> 00:45:45,060
imitations like this is rocky and if

00:45:43,440 --> 00:45:46,140
this thing has if there's a memory

00:45:45,060 --> 00:45:48,450
corruption issue in here I do not want

00:45:46,140 --> 00:45:50,700
to have to go find it so it's the it I

00:45:48,450 --> 00:45:52,470
would still use an AVL tree and see even

00:45:50,700 --> 00:45:54,180
though I know I'm giving up some small

00:45:52,470 --> 00:45:55,200
amount of performance but in Rus I get

00:45:54,180 --> 00:45:57,180
to use a bee tree which is really

00:45:55,200 --> 00:45:59,120
amazing now beyond ownership there are

00:45:57,180 --> 00:46:03,240
tons of features in rust that I love

00:45:59,120 --> 00:46:06,210
algebraic types allow for amazing error

00:46:03,240 --> 00:46:08,370
handling so algebraic types say you know

00:46:06,210 --> 00:46:10,650
this is a thing that can be this or that

00:46:08,370 --> 00:46:12,540
or this other thing it's only one of

00:46:10,650 --> 00:46:14,910
these things it's a basically a union

00:46:12,540 --> 00:46:15,330
but a C Union but with really

00:46:14,910 --> 00:46:17,490
first-class

00:46:15,330 --> 00:46:19,920
support and the great thing about rust

00:46:17,490 --> 00:46:22,080
is if you return a result that if that

00:46:19,920 --> 00:46:23,700
that is one of these things you need to

00:46:22,080 --> 00:46:25,170
figure out which one of these things it

00:46:23,700 --> 00:46:26,520
is is this is an error is that it is

00:46:25,170 --> 00:46:28,950
this an actual thing that I can unwrap

00:46:26,520 --> 00:46:31,140
and it's beautiful ruin resulting in

00:46:28,950 --> 00:46:33,270
terrific error handling go into more

00:46:31,140 --> 00:46:35,670
details not now but you can find that

00:46:33,270 --> 00:46:37,850
online as a terrific chapter arm in in

00:46:35,670 --> 00:46:39,300
the book on on error handling on

00:46:37,850 --> 00:46:43,650
hygienic macros

00:46:39,300 --> 00:46:46,350
um I so didn't have hygienic macros in

00:46:43,650 --> 00:46:47,760
see that I I kid you not

00:46:46,350 --> 00:46:50,520
I did not know how to spell hygienic

00:46:47,760 --> 00:46:51,990
until I wrote a blog entry on this like

00:46:50,520 --> 00:46:53,190
two months ago like I literally did not

00:46:51,990 --> 00:46:54,960
know how to spell hygienic as a C

00:46:53,190 --> 00:46:58,110
programmer it's like that extra I what's

00:46:54,960 --> 00:46:59,280
that do it in there but the hygienic

00:46:58,110 --> 00:47:00,600
macros do they say macros that can

00:46:59,280 --> 00:47:03,090
actually get into the abstract syntax

00:47:00,600 --> 00:47:06,330
tree or a first-class primitive in rust

00:47:03,090 --> 00:47:10,020
and it's amazing you can do crazy

00:47:06,330 --> 00:47:13,080
powerful stuff in macros um crazy

00:47:10,020 --> 00:47:14,400
powerful safe stuff in macros the the

00:47:13,080 --> 00:47:16,080
foreign function interface which is so

00:47:14,400 --> 00:47:17,700
difficult with GC languages right with

00:47:16,080 --> 00:47:19,140
GC a point I made earlier we talked

00:47:17,700 --> 00:47:20,280
about GC languages part of the reason

00:47:19,140 --> 00:47:22,200
they are an ill fit for an operating

00:47:20,280 --> 00:47:25,380
system is because it's very hard to have

00:47:22,200 --> 00:47:27,090
C code that lives beside GC D code and

00:47:25,380 --> 00:47:29,160
can actually share objects across them

00:47:27,090 --> 00:47:31,860
um the foreign function interface in

00:47:29,160 --> 00:47:33,930
rust is very well thought out very full

00:47:31,860 --> 00:47:35,190
and supports I kind of invented this

00:47:33,930 --> 00:47:37,050
term I'm sure there's a better one out

00:47:35,190 --> 00:47:40,140
there full duplex integration and that

00:47:37,050 --> 00:47:42,930
you can take C and drop it into rust or

00:47:40,140 --> 00:47:44,850
rust and drop it into C and that is

00:47:42,930 --> 00:47:46,920
really interesting and there's a lot of

00:47:44,850 --> 00:47:48,690
I'd say community interest in that and

00:47:46,920 --> 00:47:50,520
one of the ulsan the neat thing for rust

00:47:48,690 --> 00:47:52,620
is that there's an unsafe keyword that

00:47:50,520 --> 00:47:54,120
you can use for unsafe operation it's

00:47:52,620 --> 00:47:56,220
not arbitrary operation you can't just

00:47:54,120 --> 00:47:58,770
like you know have the unsafe keyword

00:47:56,220 --> 00:48:00,540
and then just like go to town um but you

00:47:58,770 --> 00:48:03,240
so there are certain things that they

00:48:00,540 --> 00:48:05,700
get relaxed on when you unsafe keyword

00:48:03,240 --> 00:48:08,310
which allows you to overrule the safety

00:48:05,700 --> 00:48:09,810
guarantees just ever so slightly where

00:48:08,310 --> 00:48:11,580
you need to though with obvious peril

00:48:09,810 --> 00:48:12,960
but in particular that allows you to

00:48:11,580 --> 00:48:15,510
build a composable data structures that

00:48:12,960 --> 00:48:16,980
can be used by other things so um and

00:48:15,510 --> 00:48:22,290
there's a ton of other great features um

00:48:16,980 --> 00:48:24,540
but also and I with with actually Steve

00:48:22,290 --> 00:48:26,580
in the room it's a terrific community

00:48:24,540 --> 00:48:28,080
stiphu community view out the room and I

00:48:26,580 --> 00:48:31,110
didn't mean to imply that it's only to

00:48:28,080 --> 00:48:32,670
give you your other but the the Russ

00:48:31,110 --> 00:48:35,220
community is actually really amazing so

00:48:32,670 --> 00:48:36,450
if you are in and I go to the point

00:48:35,220 --> 00:48:37,530
where like open source communities just

00:48:36,450 --> 00:48:39,780
kind of give me a throbbing headache

00:48:37,530 --> 00:48:41,940
because it can be really difficult to

00:48:39,780 --> 00:48:44,810
accommodate you know such diverse

00:48:41,940 --> 00:48:47,310
opinions and everything else and I don't

00:48:44,810 --> 00:48:48,900
necessarily you know it's it that is

00:48:47,310 --> 00:48:51,300
saying less difficult in rust but I

00:48:48,900 --> 00:48:54,150
think that the the values of rust

00:48:51,300 --> 00:48:56,220
tend to drive conversations that there

00:48:54,150 --> 00:48:58,050
are is it feels like there's a keel in

00:48:56,220 --> 00:48:59,490
the water I mean it's still the Internet

00:48:58,050 --> 00:49:00,080
so of course like it's still like

00:48:59,490 --> 00:49:04,040
they're still bad

00:49:00,080 --> 00:49:05,720
everything else but the but but it just

00:49:04,040 --> 00:49:09,170
is it feels so much more constructive

00:49:05,720 --> 00:49:12,830
because the values for rust are so clear

00:49:09,170 --> 00:49:15,140
so I really know there's a lot of value

00:49:12,830 --> 00:49:17,690
to it so okay operating system in rust

00:49:15,140 --> 00:49:20,210
finally the main event so for I would

00:49:17,690 --> 00:49:22,640
say first of all if the history of OS

00:49:20,210 --> 00:49:25,940
development teaches us anything it's

00:49:22,640 --> 00:49:28,520
that the runtime characteristics of an

00:49:25,940 --> 00:49:32,000
operating system trump its development

00:49:28,520 --> 00:49:34,370
time nobody cares how long it took you

00:49:32,000 --> 00:49:36,710
to develop it and that it was easy to

00:49:34,370 --> 00:49:39,440
develop or hard to develop it's like no

00:49:36,710 --> 00:49:41,860
one cares they care if it works in a

00:49:39,440 --> 00:49:44,060
care of fastest that's the care back and

00:49:41,860 --> 00:49:45,500
when I say day I mean you that's what

00:49:44,060 --> 00:49:46,550
you care about you who do not develop

00:49:45,500 --> 00:49:47,960
hours kernels and so you should care

00:49:46,550 --> 00:49:49,790
about it's like that's what we want we

00:49:47,960 --> 00:49:52,190
wanted to be fast I want to be correct

00:49:49,790 --> 00:49:54,350
and if it was easy even n nimble man

00:49:52,190 --> 00:49:56,750
great if it was harder than the new one

00:49:54,350 --> 00:49:57,920
well okay is it fast and correct yes

00:49:56,750 --> 00:50:00,140
it's fast and direct like well okay

00:49:57,920 --> 00:50:02,150
that's someone else's problem and that's

00:50:00,140 --> 00:50:04,370
fine but we have to understand that

00:50:02,150 --> 00:50:06,230
those are the load stars so we can't

00:50:04,370 --> 00:50:08,420
actually throw those things out if we're

00:50:06,230 --> 00:50:09,620
gonna reemployment an LS and Rost and we

00:50:08,420 --> 00:50:11,720
have remember that structured languages

00:50:09,620 --> 00:50:12,920
replace assembly because they perform as

00:50:11,720 --> 00:50:15,080
well they hadn't performed as well they

00:50:12,920 --> 00:50:17,060
would not have replaced them and every

00:50:15,080 --> 00:50:19,130
operating system has assembly somewhere

00:50:17,060 --> 00:50:20,810
in it but with but with rust and I do

00:50:19,130 --> 00:50:23,570
think that it's important to realize

00:50:20,810 --> 00:50:27,260
that rust does represent a new

00:50:23,570 --> 00:50:29,330
opportunity that we have not had in 30

00:50:27,260 --> 00:50:31,070
years more which is a new programming

00:50:29,330 --> 00:50:34,220
language that actually is a candidate

00:50:31,070 --> 00:50:36,380
this stuff so a first - the first time

00:50:34,220 --> 00:50:38,600
that I'm aware of is Alex lights Redux

00:50:36,380 --> 00:50:41,750
this was a teaching operating system

00:50:38,600 --> 00:50:43,220
called winix that was reimplemented in

00:50:41,750 --> 00:50:44,950
rust as an undergrad thesis the

00:50:43,220 --> 00:50:47,240
under-bed thesis itself is a great read

00:50:44,950 --> 00:50:49,580
where Alex goes into a bunch of the

00:50:47,240 --> 00:50:51,500
challenges that he ran into as he

00:50:49,580 --> 00:50:54,560
implemented this the biggest challenge

00:50:51,500 --> 00:50:57,920
was that rust then did not allow for any

00:50:54,560 --> 00:51:03,440
allocation failure so if all allocations

00:50:57,920 --> 00:51:05,780
effectively block work or death like we

00:51:03,440 --> 00:51:07,850
all like why live lets us all blow or

00:51:05,780 --> 00:51:09,410
blow ourselves up which is fine I mean I

00:51:07,850 --> 00:51:12,170
get that's actually not necessarily a

00:51:09,410 --> 00:51:13,820
bad attitude especially musicland but in

00:51:12,170 --> 00:51:15,800
the operating system we can't do

00:51:13,820 --> 00:51:18,710
in the operating system we need to be

00:51:15,800 --> 00:51:21,620
able to know if this allocation is not

00:51:18,710 --> 00:51:23,330
gonna work and if we are out of memory I

00:51:21,620 --> 00:51:24,950
need to go do some work to free up

00:51:23,330 --> 00:51:26,210
memory it's like well how are you can

00:51:24,950 --> 00:51:27,410
you for like how can an application

00:51:26,210 --> 00:51:29,480
possibly for your memory it's like well

00:51:27,410 --> 00:51:32,000
this application is the operating system

00:51:29,480 --> 00:51:34,430
so we've got ways of free I'm every we I

00:51:32,000 --> 00:51:36,230
I will throw out dead processes until

00:51:34,430 --> 00:51:37,730
we've got memory freed up which we don't

00:51:36,230 --> 00:51:39,290
want to do I mean I'd be this is a

00:51:37,730 --> 00:51:41,060
definitely point of divergence between

00:51:39,290 --> 00:51:42,530
Linux in other kernels it's like we

00:51:41,060 --> 00:51:44,930
actually don't want to throw out dead

00:51:42,530 --> 00:51:47,210
processes but there are lots of things

00:51:44,930 --> 00:51:48,680
that we can go do to free up memory in

00:51:47,210 --> 00:51:51,080
the system because we control all the

00:51:48,680 --> 00:51:53,150
memory in the system so it's very hard

00:51:51,080 --> 00:51:54,590
to run a modern operating system we

00:51:53,150 --> 00:51:56,930
smart OS because it's very hard to run

00:51:54,590 --> 00:51:58,850
smart notes out of memory on we but we

00:51:56,930 --> 00:52:01,400
have to be able to still potentially

00:51:58,850 --> 00:52:02,870
fail allocations in some isolated cases

00:52:01,400 --> 00:52:04,160
so one things we did in the kernel a

00:52:02,870 --> 00:52:06,020
long time ago is we introduced the

00:52:04,160 --> 00:52:07,310
notion of sleeping allocations most

00:52:06,020 --> 00:52:09,020
allocations are sleeping allocations

00:52:07,310 --> 00:52:10,130
that can't fail some allocations are no

00:52:09,020 --> 00:52:11,570
sleeping allocations which means they

00:52:10,130 --> 00:52:14,420
don't have that they can accommodate

00:52:11,570 --> 00:52:16,880
failure and we need the ability to

00:52:14,420 --> 00:52:19,460
implement something like that this is an

00:52:16,880 --> 00:52:21,320
area that is was made much better with

00:52:19,460 --> 00:52:23,840
the addition of global allocators which

00:52:21,320 --> 00:52:27,440
was added I was like 127 something like

00:52:23,840 --> 00:52:28,760
that once a six month but the dealing

00:52:27,440 --> 00:52:30,080
with memory allocation failure is still

00:52:28,760 --> 00:52:32,810
a very much an active issue and

00:52:30,080 --> 00:52:35,090
unsettled the area for rust I would

00:52:32,810 --> 00:52:35,870
check out on the RV RFC number that you

00:52:35,090 --> 00:52:37,820
can check out there

00:52:35,870 --> 00:52:38,810
these RFC's if you do real rust

00:52:37,820 --> 00:52:40,070
development you're gonna end up in the

00:52:38,810 --> 00:52:42,230
RFC's pretty quickly as you go to

00:52:40,070 --> 00:52:43,790
understand because things are new enough

00:52:42,230 --> 00:52:45,140
that you're gonna be even if you're

00:52:43,790 --> 00:52:46,790
using things that are there

00:52:45,140 --> 00:52:49,070
you're gonna inevitably come back the

00:52:46,790 --> 00:52:50,180
design discussions on I and those design

00:52:49,070 --> 00:52:51,290
sessions can be really interesting and

00:52:50,180 --> 00:52:54,200
actually uplifting and one of the things

00:52:51,290 --> 00:52:56,630
that the the way rust does raw literals

00:52:54,200 --> 00:52:59,660
for example which is with are the

00:52:56,630 --> 00:53:01,040
character are a pound sign or an octave

00:52:59,660 --> 00:53:04,010
Thorpe or a hash tag depending what

00:53:01,040 --> 00:53:05,240
generation you are which I swear it's a

00:53:04,010 --> 00:53:06,500
hash tag but now like my kids always say

00:53:05,240 --> 00:53:07,340
hash tag of everything so it's like it's

00:53:06,500 --> 00:53:09,680
not a hash tag it's a pound sign

00:53:07,340 --> 00:53:12,500
whatever be our and then hash tag

00:53:09,680 --> 00:53:14,330
whatever I sum number of hash tags and

00:53:12,500 --> 00:53:17,600
then your literal and then the same

00:53:14,330 --> 00:53:19,010
number of hashtags as open little but

00:53:17,600 --> 00:53:20,390
just looking at that discussions a

00:53:19,010 --> 00:53:22,580
really interesting discussion because

00:53:20,390 --> 00:53:25,340
everyone's talking about how all these

00:53:22,580 --> 00:53:26,960
different systems do it and actually the

00:53:25,340 --> 00:53:29,450
absence of raw string literals

00:53:26,960 --> 00:53:32,930
problem for me in JavaScript and in situ

00:53:29,450 --> 00:53:34,310
as well and it's actually it's a many

00:53:32,930 --> 00:53:35,300
many things of a love and rust but that

00:53:34,310 --> 00:53:36,530
design discussions were interesting

00:53:35,300 --> 00:53:37,970
email it's a super small issue these

00:53:36,530 --> 00:53:40,010
RFC's will get you into those design

00:53:37,970 --> 00:53:41,390
discussions this particular area is an

00:53:40,010 --> 00:53:43,460
area that's still unsettled with respect

00:53:41,390 --> 00:53:44,990
to allocation failure but is settled

00:53:43,460 --> 00:53:48,170
with respect to global allocators which

00:53:44,990 --> 00:53:50,240
actually allow you a lot of it since

00:53:48,170 --> 00:53:51,770
2015 there have been a there's been this

00:53:50,240 --> 00:53:54,500
a kind of explosion of little operating

00:53:51,770 --> 00:53:56,840
systems in rust if I forgot yours I'm

00:53:54,500 --> 00:53:58,460
really sorry I tried to get them all I

00:53:56,840 --> 00:54:00,140
try to get the ones that still compile

00:53:58,460 --> 00:54:01,340
so you got redox just kind of the big

00:54:00,140 --> 00:54:03,170
one then TIFF 'ln and talk and

00:54:01,340 --> 00:54:06,230
Intermezzo sand rust OS and quilt OS

00:54:03,170 --> 00:54:08,030
rocks and then philip opens blog OS

00:54:06,230 --> 00:54:09,890
philip Oberman please give this thing a

00:54:08,030 --> 00:54:11,300
name call it whatever you want you get

00:54:09,890 --> 00:54:12,770
to name something it's like important

00:54:11,300 --> 00:54:13,430
enough to name it I don't want to have

00:54:12,770 --> 00:54:15,920
to call it philip

00:54:13,430 --> 00:54:17,540
opens blog OS so just give it an ever

00:54:15,920 --> 00:54:19,010
name it's a great thing you're doing

00:54:17,540 --> 00:54:20,390
right please give it a different name if

00:54:19,010 --> 00:54:22,670
blog OS I guess that's what it is

00:54:20,390 --> 00:54:24,740
so on some of them are teaching systems

00:54:22,670 --> 00:54:26,420
Intermezzo blog OS somewhere unit

00:54:24,740 --> 00:54:29,780
kernels like quilt OS that all that only

00:54:26,420 --> 00:54:31,940
are going to allow for rust programs the

00:54:29,780 --> 00:54:35,390
kind of limited in regard some targeted

00:54:31,940 --> 00:54:36,680
IOT like talk on the the attribute that

00:54:35,390 --> 00:54:37,250
all these systems have in common is they

00:54:36,680 --> 00:54:39,770
are all Denova

00:54:37,250 --> 00:54:42,500
they are all written from scratch which

00:54:39,770 --> 00:54:45,020
is great on the one hand because it's

00:54:42,500 --> 00:54:46,430
rust allows us to explore these new

00:54:45,020 --> 00:54:48,290
ideas and build these operating systems

00:54:46,430 --> 00:54:49,910
and all these efforts should be

00:54:48,290 --> 00:54:53,690
encouraged and especially the teaching

00:54:49,910 --> 00:54:55,040
ones all terrific it's great to butts on

00:54:53,690 --> 00:54:57,760
that one is it means that you're

00:54:55,040 --> 00:54:59,690
forsaking Linux binary compatibility and

00:54:57,760 --> 00:55:01,550
that just means that a lot of the world

00:54:59,690 --> 00:55:03,050
software's not going to work and which

00:55:01,550 --> 00:55:04,400
is fine I mean I honor that I've

00:55:03,050 --> 00:55:06,590
experimented with that approach for many

00:55:04,400 --> 00:55:08,150
years I for me it doesn't work but you

00:55:06,590 --> 00:55:10,250
know it's I like having the world

00:55:08,150 --> 00:55:11,420
software work and I say that as a UNIX

00:55:10,250 --> 00:55:13,100
operating system that's very very very

00:55:11,420 --> 00:55:14,690
very very close to Linux I'm serious

00:55:13,100 --> 00:55:17,330
but like no no so so we've done all

00:55:14,690 --> 00:55:18,380
sorts of things to allow for Linux final

00:55:17,330 --> 00:55:20,150
cut out ability just to talk about some

00:55:18,380 --> 00:55:21,740
of those in his talk that Linux binary

00:55:20,150 --> 00:55:23,900
compatibility is a really long tail it's

00:55:21,740 --> 00:55:25,820
really brutal it's very hard to do you

00:55:23,900 --> 00:55:30,620
end up in a lot of really ugly gray

00:55:25,820 --> 00:55:32,570
areas and the you know Friedan's talk

00:55:30,620 --> 00:55:35,360
for some of the gray areas that they ran

00:55:32,570 --> 00:55:37,070
into and we've run into a bunch so that

00:55:35,360 --> 00:55:38,060
you get all those problems which you

00:55:37,070 --> 00:55:39,410
don't want to have to go resolve you

00:55:38,060 --> 00:55:40,460
don't have to deal with v4 can sick

00:55:39,410 --> 00:55:42,410
child semantics cross

00:55:40,460 --> 00:55:44,599
like be Forex semantics terrible sick

00:55:42,410 --> 00:55:46,190
child semantics terrible v4 plus sake

00:55:44,599 --> 00:55:48,380
child semantics like unspeakable

00:55:46,190 --> 00:55:50,570
semantics Superfund site that no one

00:55:48,380 --> 00:55:52,250
should have to deal with on and they

00:55:50,570 --> 00:55:54,080
also means that they are all fighting

00:55:52,250 --> 00:55:57,020
second system syndrome they are all

00:55:54,080 --> 00:55:59,150
fighting like well as long as like the

00:55:57,020 --> 00:56:00,590
train is leaving let's get let's back up

00:55:59,150 --> 00:56:01,790
the truck and let's do a new file system

00:56:00,590 --> 00:56:03,980
let's do a new way of thinking about

00:56:01,790 --> 00:56:06,349
devices and let's and that can be really

00:56:03,980 --> 00:56:09,260
productive and interesting but that can

00:56:06,349 --> 00:56:12,500
also be paralyzing so that that's that's

00:56:09,260 --> 00:56:14,750
a challenge um the it's also a challenge

00:56:12,500 --> 00:56:16,400
like what is the advantage of rewriting

00:56:14,750 --> 00:56:17,960
things that are actually working code in

00:56:16,400 --> 00:56:21,109
rust and I you know I don't know um

00:56:17,960 --> 00:56:22,160
because the safety argument just doesn't

00:56:21,109 --> 00:56:23,270
carry as much weight for kernel

00:56:22,160 --> 00:56:24,740
developers not because the safety

00:56:23,270 --> 00:56:27,230
argument isn't really really important

00:56:24,740 --> 00:56:28,880
it's just because like it's safe because

00:56:27,230 --> 00:56:30,530
when it's not safe like it blows up and

00:56:28,880 --> 00:56:32,060
everyone gets really upset we figure out

00:56:30,530 --> 00:56:33,230
why and we fix it and we develop a lot

00:56:32,060 --> 00:56:36,530
of great tooling to not have these

00:56:33,230 --> 00:56:38,510
problems so it has to have more of a

00:56:36,530 --> 00:56:39,800
grab than just the safety the

00:56:38,510 --> 00:56:40,880
performance is great there are things

00:56:39,800 --> 00:56:42,109
that are bad that are great but this is

00:56:40,880 --> 00:56:43,010
working code that we want to replace

00:56:42,109 --> 00:56:44,660
like why don't one other place that's

00:56:43,010 --> 00:56:47,359
working code especially with respect to

00:56:44,660 --> 00:56:50,720
the kernel which has multiplied own data

00:56:47,359 --> 00:56:52,310
structures everywhere everything is on

00:56:50,720 --> 00:56:54,200
many lists I mean there are things that

00:56:52,310 --> 00:56:56,990
are where you've got these nice kind of

00:56:54,200 --> 00:56:59,300
like hierarchies of objects but most

00:56:56,990 --> 00:57:00,890
things don't actually have that and yes

00:56:59,300 --> 00:57:02,510
some of those are semantic sewers and

00:57:00,890 --> 00:57:03,920
should be re-implemented some of them

00:57:02,510 --> 00:57:05,330
there are some endemic problems and you

00:57:03,920 --> 00:57:06,589
look at like thread dispatch and so on

00:57:05,330 --> 00:57:07,640
there are some endemic problems and

00:57:06,589 --> 00:57:09,080
they're like okay well we're just gonna

00:57:07,640 --> 00:57:10,910
walk around this with unsafe like okay

00:57:09,080 --> 00:57:12,650
but like every time you use an unsafe

00:57:10,910 --> 00:57:14,030
and your rust operating system it's like

00:57:12,650 --> 00:57:16,190
you're losing a little bit of the

00:57:14,030 --> 00:57:19,430
advantage of rust but you know whatever

00:57:16,190 --> 00:57:21,740
um so I think an OS kernel despite you

00:57:19,430 --> 00:57:23,510
know the historic appeal and the

00:57:21,740 --> 00:57:24,710
superficial fit I don't know that that's

00:57:23,510 --> 00:57:27,020
worth it I don't know that's that's the

00:57:24,710 --> 00:57:28,880
good that's the right first approach I

00:57:27,020 --> 00:57:30,290
mean again these other operating system

00:57:28,880 --> 00:57:32,839
should be encouraged I think it's great

00:57:30,290 --> 00:57:34,640
but I think for the OS is that we're

00:57:32,839 --> 00:57:36,410
gonna use for the rest of our lives I'm

00:57:34,640 --> 00:57:37,280
not sure that that's a good right first

00:57:36,410 --> 00:57:38,750
approach maybe we'll get there

00:57:37,280 --> 00:57:40,460
eventually I don't want to rewrite CFS

00:57:38,750 --> 00:57:41,930
and rust that's opposed down to like I

00:57:40,460 --> 00:57:43,040
wake up in a cold sweat when I think

00:57:41,930 --> 00:57:44,960
what were you writing ZFS and rust and

00:57:43,040 --> 00:57:46,369
go to like well go look at the CIO

00:57:44,960 --> 00:57:47,750
pipeline and tell me you want to rewrite

00:57:46,369 --> 00:57:49,700
that thing in rust it's just like uh uh

00:57:47,750 --> 00:57:51,800
no thank you I mean the rust compiler

00:57:49,700 --> 00:57:54,290
the rest compiler would slay me ye

00:57:51,800 --> 00:57:55,850
and I and I would lose but let's look at

00:57:54,290 --> 00:57:57,110
hybrid approaches so we cuz I think a

00:57:55,850 --> 00:57:59,840
hybrid approach is really the right

00:57:57,110 --> 00:58:01,940
approach here one is to have rusty and

00:57:59,840 --> 00:58:04,250
Carl components so I love the fact that

00:58:01,940 --> 00:58:06,260
rust can interoperate with C so one

00:58:04,250 --> 00:58:08,810
hybrid approach is that you retain your

00:58:06,260 --> 00:58:11,000
existing C assembly based Carl the way

00:58:08,810 --> 00:58:14,270
we we have had for many years and then

00:58:11,000 --> 00:58:16,760
you allow for rust based things to be

00:58:14,270 --> 00:58:18,800
developed rust based drivers rust based

00:58:16,760 --> 00:58:20,660
file systems rust base in Carl software

00:58:18,800 --> 00:58:22,550
where the points that estimated in his

00:58:20,660 --> 00:58:24,110
talk was that we want to have more in

00:58:22,550 --> 00:58:26,750
colonel software well this is a safe way

00:58:24,110 --> 00:58:28,640
of doing it now maybe the safety

00:58:26,750 --> 00:58:30,350
argument is a big win because now it's

00:58:28,640 --> 00:58:32,480
like hey more people can safely develop

00:58:30,350 --> 00:58:33,470
the colonel towed yes fine existing

00:58:32,480 --> 00:58:35,360
kernel developers are not gonna write

00:58:33,470 --> 00:58:37,850
the kernel but having a safe rust

00:58:35,360 --> 00:58:39,410
sandbox inside the kernel that might be

00:58:37,850 --> 00:58:40,760
interesting um it would allow for an

00:58:39,410 --> 00:58:45,350
incremental approach which I think like

00:58:40,760 --> 00:58:46,520
let's take that UNIX BC approach and it

00:58:45,350 --> 00:58:48,020
allows for us to be used for new

00:58:46,520 --> 00:58:49,760
development where you're not trying to

00:58:48,020 --> 00:58:50,960
kind of port existing C structure and

00:58:49,760 --> 00:58:52,550
being burdened by the C implementation

00:58:50,960 --> 00:58:54,050
there's a prototype of that's a freebsd

00:58:52,550 --> 00:58:55,220
others are possible I think we

00:58:54,050 --> 00:58:58,100
definitely wonder this in smart of us at

00:58:55,220 --> 00:59:00,200
some point on a hybrid programmer to

00:58:58,100 --> 00:59:01,910
rust osq modes and operates ISM is not

00:59:00,200 --> 00:59:04,160
just the girl there's a lot of other

00:59:01,910 --> 00:59:06,290
stuff out there there is utilities

00:59:04,160 --> 00:59:08,960
daemons service management device Penta

00:59:06,290 --> 00:59:10,310
default management the debuggers etc yes

00:59:08,960 --> 00:59:11,570
system B is a part of your operating

00:59:10,310 --> 00:59:13,190
system whether you acknowledge it or not

00:59:11,570 --> 00:59:14,180
system B is you know you've got these

00:59:13,190 --> 00:59:17,240
things that are part of the operating

00:59:14,180 --> 00:59:20,750
system these things are great candidates

00:59:17,240 --> 00:59:21,950
frog if you were writing system D now no

00:59:20,750 --> 00:59:23,840
question that it's in rust you're

00:59:21,950 --> 00:59:25,820
speaking for us if we're writing SMF now

00:59:23,840 --> 00:59:28,160
no question in my mind that that's in

00:59:25,820 --> 00:59:30,140
rust that is like and in part because by

00:59:28,160 --> 00:59:31,730
the way like let me tell you something

00:59:30,140 --> 00:59:34,250
that most kernel developers won't tell

00:59:31,730 --> 00:59:36,500
you it's harder to write user level

00:59:34,250 --> 00:59:38,150
software it's hard to write use

00:59:36,500 --> 00:59:40,310
available software because more can go

00:59:38,150 --> 00:59:42,020
wrong like do a problem that I never

00:59:40,310 --> 00:59:44,510
have in the kernel a configuration file

00:59:42,020 --> 00:59:46,490
that someone deleted all right this is

00:59:44,510 --> 00:59:47,390
not the way we roll in the kernel like

00:59:46,490 --> 00:59:49,070
we don't have that like the

00:59:47,390 --> 00:59:50,810
configuration file is the girl like if

00:59:49,070 --> 00:59:52,250
you deleted me I'm not here it's not my

00:59:50,810 --> 00:59:54,110
problem like you can't boot anything I

00:59:52,250 --> 00:59:55,460
mean I got lots of other problems I got

00:59:54,110 --> 00:59:56,450
like I got a boot this thing and then I

00:59:55,460 --> 00:59:57,650
got like Intel interesting

00:59:56,450 --> 00:59:58,960
vulnerabilities left her and said odds

00:59:57,650 --> 01:00:02,420
on the problem I have plenty of problems

00:59:58,960 --> 01:00:03,860
but I don't have the problems I don't

01:00:02,420 --> 01:00:05,210
have distribute systems problems I don't

01:00:03,860 --> 01:00:06,440
have these kind of operation

01:00:05,210 --> 01:00:08,000
failures there were a lot of feelers

01:00:06,440 --> 01:00:10,490
that aren't have and that's the stuff

01:00:08,000 --> 01:00:12,170
that Russ is really good at so that

01:00:10,490 --> 01:00:14,200
might be a really good candidate for

01:00:12,170 --> 01:00:17,000
lost so I think a lot of those are

01:00:14,200 --> 01:00:18,680
especially the OS expands to beyond just

01:00:17,000 --> 01:00:20,600
an operating system and consists of

01:00:18,680 --> 01:00:23,990
entire crowd control plane and then the

01:00:20,600 --> 01:00:27,020
the third approach one that I'm excited

01:00:23,990 --> 01:00:28,460
about at the moment is you know there's

01:00:27,020 --> 01:00:30,290
there is another operating system out

01:00:28,460 --> 01:00:33,590
there an operating system that hasn't

01:00:30,290 --> 01:00:35,570
advanced technologically as much or at

01:00:33,590 --> 01:00:38,930
all that's basically still running

01:00:35,570 --> 01:00:41,930
glorified Dass but it's running all of

01:00:38,930 --> 01:00:44,180
humanity on top of it and that is that

01:00:41,930 --> 01:00:46,130
this absolute sewer of unobservable

01:00:44,180 --> 01:00:48,890
system critical mission critical

01:00:46,130 --> 01:00:52,250
software called firmware and firmware

01:00:48,890 --> 01:00:54,650
has lots of problems as I've been as I'm

01:00:52,250 --> 01:00:56,660
fond of saying like it is it is humanity

01:00:54,650 --> 01:01:01,340
versus firmware and everyone needs to

01:00:56,660 --> 01:01:02,270
pick a side um and I think that that you

01:01:01,340 --> 01:01:03,530
look at some of the challenges of

01:01:02,270 --> 01:01:06,080
firmware I was like oh man that is

01:01:03,530 --> 01:01:08,120
that's a good fit for rust yes some of

01:01:06,080 --> 01:01:10,100
the embedded challenges that we have but

01:01:08,120 --> 01:01:11,300
those seem much more sugar metal I don't

01:01:10,100 --> 01:01:13,820
think you have like that the multiple

01:01:11,300 --> 01:01:14,830
ownership disasters that you have in a

01:01:13,820 --> 01:01:16,760
kernel you don't have the same

01:01:14,830 --> 01:01:18,140
expectations or unbinding credibility

01:01:16,760 --> 01:01:19,910
you don't throw reimpose EFS it means

01:01:18,140 --> 01:01:22,310
like it's a smaller kind of a thing and

01:01:19,910 --> 01:01:25,190
so when I look at like open BMC I view

01:01:22,310 --> 01:01:27,410
open BMC as on its knees with tears

01:01:25,190 --> 01:01:28,970
streaming down its face begging for

01:01:27,410 --> 01:01:30,710
someone to please rewrite me and rust

01:01:28,970 --> 01:01:34,730
because if you're if we're going to have

01:01:30,710 --> 01:01:36,650
the the BMC that's gonna hang out a

01:01:34,730 --> 01:01:39,170
socket over the internet god forbid or

01:01:36,650 --> 01:01:40,760
even over the network I want that thing

01:01:39,170 --> 01:01:44,240
to be in Ross I don't want that to be in

01:01:40,760 --> 01:01:46,880
C++ um and there's a lot of stuff like

01:01:44,240 --> 01:01:48,260
that so I think that is where I want to

01:01:46,880 --> 01:01:49,460
see the world right now firmware is the

01:01:48,260 --> 01:01:51,440
proprietary software that we're all

01:01:49,460 --> 01:01:52,910
forced to run I want to see a world we

01:01:51,440 --> 01:01:54,350
get to open firmware and I want to see a

01:01:52,910 --> 01:01:56,000
lot of that written in rust because it's

01:01:54,350 --> 01:01:57,860
a much much much better foundation for

01:01:56,000 --> 01:01:59,660
Humanity move the humanity a huge favor

01:01:57,860 --> 01:02:01,760
so looking forward I mean I'm very

01:01:59,660 --> 01:02:04,070
bullish on rust I'm very excited about

01:02:01,760 --> 01:02:05,390
rust it's something we really haven't

01:02:04,070 --> 01:02:08,840
seen in a long time it's a true

01:02:05,390 --> 01:02:10,550
alternative we can use it deep in the

01:02:08,840 --> 01:02:12,170
stack I think it is I think we can use

01:02:10,550 --> 01:02:13,640
it in from where I think we can use an

01:02:12,170 --> 01:02:15,050
operating systems I just think that that

01:02:13,640 --> 01:02:16,340
practically it's going to be really

01:02:15,050 --> 01:02:17,760
really hard but I think we can

01:02:16,340 --> 01:02:20,130
definitely use it in the way we extend

01:02:17,760 --> 01:02:21,810
the colonel and the beauty of rust is

01:02:20,130 --> 01:02:24,540
that it allows these hybrid approaches

01:02:21,810 --> 01:02:28,200
that the beauty of rust is its ability

01:02:24,540 --> 01:02:30,020
to interoperate cooperate with native

01:02:28,200 --> 01:02:34,440
systems with C Bay systems allow for

01:02:30,020 --> 01:02:37,500
vistas to open up and for us in system

01:02:34,440 --> 01:02:46,380
software it is a very very exciting time

01:02:37,500 --> 01:02:52,490
with that thank you very much I have two

01:02:46,380 --> 01:02:52,490
minutes for questions any questions yes

01:02:54,080 --> 01:03:00,030
um the no no I don't hate I first off

01:02:57,600 --> 01:03:01,650
I've never felt III have only tried to

01:03:00,030 --> 01:03:04,130
bargain with a borrow checker I have

01:03:01,650 --> 01:03:06,570
never even when it is absolutely

01:03:04,130 --> 01:03:08,790
thrashing me I know it is out of its own

01:03:06,570 --> 01:03:09,990
love for what it's trying to do and and

01:03:08,790 --> 01:03:11,940
I think actually with with rust it's

01:03:09,990 --> 01:03:13,410
important to get over that hump like the

01:03:11,940 --> 01:03:16,470
one thing I would advise if you have not

01:03:13,410 --> 01:03:17,700
implanted rust please for the love of

01:03:16,470 --> 01:03:20,790
God don't start with a doubly-linked

01:03:17,700 --> 01:03:22,950
list in fact I wouldn't start like it's

01:03:20,790 --> 01:03:24,810
very often that you like I've got like

01:03:22,950 --> 01:03:27,330
oh I've got like the sodoku thing or

01:03:24,810 --> 01:03:28,620
I've got the you know the this solver or

01:03:27,330 --> 01:03:29,910
that thing that I've written plant in

01:03:28,620 --> 01:03:31,500
every language I'm gonna go implement it

01:03:29,910 --> 01:03:31,830
and Russ to try it on precise don't do

01:03:31,500 --> 01:03:35,310
that

01:03:31,830 --> 01:03:37,410
it's a bad idea it's a just because if

01:03:35,310 --> 01:03:40,260
you haven't seen what the borrowed

01:03:37,410 --> 01:03:44,520
checker can do for you the first time it

01:03:40,260 --> 01:03:45,840
begins to to fight with you for lack of

01:03:44,520 --> 01:03:47,520
a better word for something tells you in

01:03:45,840 --> 01:03:49,410
particular it will tell you like hey I

01:03:47,520 --> 01:03:50,730
think you want to make that mute okay

01:03:49,410 --> 01:03:51,630
I'll make that mute and I go you wanna

01:03:50,730 --> 01:03:52,620
make that a reference like we gotta make

01:03:51,630 --> 01:03:54,150
that around you know if you doing that

01:03:52,620 --> 01:03:55,380
every reference at all oh that doesn't

01:03:54,150 --> 01:03:56,970
work at all it's like I just didn't you

01:03:55,380 --> 01:03:59,130
told me to do it now I've got like so

01:03:56,970 --> 01:04:01,920
many more errors but and that's when the

01:03:59,130 --> 01:04:03,570
tears begin to wail up um don't do that

01:04:01,920 --> 01:04:06,030
and one of the things that I did that I

01:04:03,570 --> 01:04:08,040
would recommend is so they're the the

01:04:06,030 --> 01:04:10,770
two books on rust are terrific there's

01:04:08,040 --> 01:04:12,870
you guys call it triple I call triple or

01:04:10,770 --> 01:04:16,380
turbo turbo line the Russ programming

01:04:12,870 --> 01:04:18,030
language so steep ionic and Kelvin and

01:04:16,380 --> 01:04:19,050
the entire community wrote that which is

01:04:18,030 --> 01:04:20,840
great and you want to have that

01:04:19,050 --> 01:04:23,220
reference and then the other one is

01:04:20,840 --> 01:04:26,550
what's programming in rust but

01:04:23,220 --> 01:04:28,260
programming rust on and the O'Reilly

01:04:26,550 --> 01:04:29,910
book and I think that they I like having

01:04:28,260 --> 01:04:31,200
both those books side by side one of

01:04:29,910 --> 01:04:34,349
these I really like a program in rust

01:04:31,200 --> 01:04:36,450
there is a fully worked example and I

01:04:34,349 --> 01:04:37,380
just like type that in when I first got

01:04:36,450 --> 01:04:40,109
into Ross like I haven't done that

01:04:37,380 --> 01:04:41,490
literally since enter magazine from back

01:04:40,109 --> 01:04:43,349
in the day I got a feature as old as I

01:04:41,490 --> 01:04:44,849
am but like you're like opening up the

01:04:43,349 --> 01:04:47,970
back of inter magazine like typing in

01:04:44,849 --> 01:04:49,920
your basic on the c64 or whatever um it

01:04:47,970 --> 01:04:51,690
was really valuable to do that because

01:04:49,920 --> 01:04:53,430
you'd have typos and then you'd fix them

01:04:51,690 --> 01:04:54,450
but they'd all be very gentle typos and

01:04:53,430 --> 01:04:55,470
you know that you've got something

01:04:54,450 --> 01:04:57,420
that's correct

01:04:55,470 --> 01:04:58,829
and by the time even I gotten through

01:04:57,420 --> 01:05:00,510
that simple exercise I'm like okay I see

01:04:58,829 --> 01:05:02,220
the value so in the borrowed checker

01:05:00,510 --> 01:05:05,280
began to torment me I'm like I know this

01:05:02,220 --> 01:05:07,320
is out of love and not hate because it

01:05:05,280 --> 01:05:10,410
can feel confusing other systems don't

01:05:07,320 --> 01:05:11,190
have ownership and this is a novel thing

01:05:10,410 --> 01:05:12,180
about the system

01:05:11,190 --> 01:05:13,290
I think the community does a great job

01:05:12,180 --> 01:05:16,560
doing this but just to emphasize this

01:05:13,290 --> 01:05:18,450
with rust you need to learn it and if

01:05:16,560 --> 01:05:20,790
you are of the age where you're learning

01:05:18,450 --> 01:05:23,880
lots of stuff that's easy and if you're

01:05:20,790 --> 01:05:25,770
of my age where it's like I've been able

01:05:23,880 --> 01:05:28,140
to kind of like wing it by just like

01:05:25,770 --> 01:05:29,790
pounding stuff out for a while it's like

01:05:28,140 --> 01:05:32,760
I need to go back in time and actually

01:05:29,790 --> 01:05:35,190
buy the book sit down read the book in a

01:05:32,760 --> 01:05:38,490
quiet place really understand it read it

01:05:35,190 --> 01:05:40,770
again weed another source and but Russ

01:05:38,490 --> 01:05:46,040
rewards that it rewards that education a

01:05:40,770 --> 01:05:46,040
lot long answer the question yes

01:06:07,320 --> 01:06:14,490
so I'm a late comer so ie for me yes

01:06:12,080 --> 01:06:16,620
because I haven't lived in this kind of

01:06:14,490 --> 01:06:18,180
tortured past where I think there are

01:06:16,620 --> 01:06:20,070
people that use rusts two years ago

01:06:18,180 --> 01:06:22,170
we're like oh my god never again and

01:06:20,070 --> 01:06:24,210
because they you know we had the wearer

01:06:22,170 --> 01:06:26,400
because they'd it was early for me it's

01:06:24,210 --> 01:06:28,590
been great and it performs well it

01:06:26,400 --> 01:06:31,490
generates I think the incremental

01:06:28,590 --> 01:06:33,600
compilers incremental support added

01:06:31,490 --> 01:06:34,740
early this year so like that sound that

01:06:33,600 --> 01:06:36,330
long ago like to me that's always been

01:06:34,740 --> 01:06:37,560
there so it's like you know like why is

01:06:36,330 --> 01:06:39,060
everyone complain about the compile

01:06:37,560 --> 01:06:41,670
times of rust like this is great it's

01:06:39,060 --> 01:06:43,350
like because like just before you showed

01:06:41,670 --> 01:06:45,150
up it was a serious problem that's why I

01:06:43,350 --> 01:06:48,090
was so things like that like rust is

01:06:45,150 --> 01:06:49,440
really solidifying I think quickly to me

01:06:48,090 --> 01:06:50,730
I would not hesitate to use it for

01:06:49,440 --> 01:06:53,490
production software in the hills because

01:06:50,730 --> 01:06:54,240
I'm making a very recent past but you

01:06:53,490 --> 01:07:00,780
know whatever

01:06:54,240 --> 01:07:02,550
I think it's ready yes sure I mean I

01:07:00,780 --> 01:07:04,230
think that there is been and I'll tell

01:07:02,550 --> 01:07:07,980
you a couple of the benefits will be

01:07:04,230 --> 01:07:10,350
that the this is a I think Russ is a big

01:07:07,980 --> 01:07:12,090
deal for system software and I think

01:07:10,350 --> 01:07:13,620
waiting for another year is going to

01:07:12,090 --> 01:07:15,180
give you that many more resources to

01:07:13,620 --> 01:07:16,260
learn from it's gonna be the

01:07:15,180 --> 01:07:16,710
documentation is gonna be that much

01:07:16,260 --> 01:07:18,270
better

01:07:16,710 --> 01:07:20,130
the crates are gonna be that much better

01:07:18,270 --> 01:07:21,420
you're gonna be that much less likely to

01:07:20,130 --> 01:07:23,340
get it into the rfcs

01:07:21,420 --> 01:07:25,110
I mean you're gonna have non lexical

01:07:23,340 --> 01:07:28,290
lifetimes in a year right

01:07:25,110 --> 01:07:32,910
okay December 6th December 6th perhaps

01:07:28,290 --> 01:07:35,370
of 2025 but but you're gonna and if you

01:07:32,910 --> 01:07:37,920
use rust after non lexical lifetimes

01:07:35,370 --> 01:07:39,300
integrates you're not even gonna realize

01:07:37,920 --> 01:07:40,680
what the fuss was about borrowing Jackie

01:07:39,300 --> 01:07:41,730
look why does everyone like you my

01:07:40,680 --> 01:07:44,610
another project I've never had a

01:07:41,730 --> 01:07:46,950
problems like because you right now I'm

01:07:44,610 --> 01:07:48,630
rust really only uses lexical lifetimes

01:07:46,950 --> 01:07:51,270
and there are times they're like no

01:07:48,630 --> 01:07:53,100
seriously rust I swear I'm done with us

01:07:51,270 --> 01:07:54,570
like look like we'll get the code with

01:07:53,100 --> 01:07:55,620
me trust compile like we're done with it

01:07:54,570 --> 01:07:57,180
it's like well no no no I only use

01:07:55,620 --> 01:07:58,530
lexical items when you have no lexical

01:07:57,180 --> 01:08:00,510
items did you which is in nightly and

01:07:58,530 --> 01:08:02,450
you can you can enable it obviously

01:08:00,510 --> 01:08:07,380
December sake is getting rating subjects

01:08:02,450 --> 01:08:10,850
or 1576 I don't care how broken it is we

01:08:07,380 --> 01:08:10,850
are approaching it on December 6

01:08:18,630 --> 01:08:24,759
right if that can make a big difference

01:08:22,719 --> 01:08:26,469
they and because again that's gonna make

01:08:24,759 --> 01:08:28,630
a difference that you literally won't

01:08:26,469 --> 01:08:29,980
even be aware of you will just not

01:08:28,630 --> 01:08:32,230
understand what the fuss was about

01:08:29,980 --> 01:08:34,000
bought the bar checker I think I'm a

01:08:32,230 --> 01:08:35,560
nerd if you guys hear that but I think I

01:08:34,000 --> 01:08:40,600
think it's gonna make a big big big big

01:08:35,560 --> 01:08:42,130
difference right so and and but and

01:08:40,600 --> 01:08:43,330
gives you high quality high quality

01:08:42,130 --> 01:08:44,980
artifacts and everything else so yeah I

01:08:43,330 --> 01:08:46,719
think there's there's I mean this is not

01:08:44,980 --> 01:08:47,920
like hey hey do this I mean I honestly

01:08:46,719 --> 01:08:49,690
think Russ is gonna be around forever I

01:08:47,920 --> 01:08:51,819
really do I think this is like you the

01:08:49,690 --> 01:08:53,529
this is the formation of ancient Greek

01:08:51,819 --> 01:08:55,659
so I mean there's no rush you've got

01:08:53,529 --> 01:08:58,810
thousands of years I mean there's no

01:08:55,659 --> 01:09:00,790
like you know take your time and there

01:08:58,810 --> 01:09:02,679
anyway it is gonna get better but I also

01:09:00,790 --> 01:09:05,380
think if you've been waiting because

01:09:02,679 --> 01:09:06,819
things are too crazy you you don't need

01:09:05,380 --> 01:09:12,400
to wait that much longer or don't even

01:09:06,819 --> 01:09:13,760
wait at all all right with that I think

01:09:12,400 --> 01:09:18,299
we're done thank you very much Justin

01:09:13,760 --> 01:09:18,299

YouTube URL: https://www.youtube.com/watch?v=HgtRAbE1nBM


