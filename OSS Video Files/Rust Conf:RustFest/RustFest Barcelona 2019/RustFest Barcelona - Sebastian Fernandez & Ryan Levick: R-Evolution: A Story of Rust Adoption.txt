Title: RustFest Barcelona - Sebastian Fernandez & Ryan Levick: R-Evolution: A Story of Rust Adoption
Publication date: 2019-11-26
Playlist: RustFest Barcelona 2019
Description: 
	The software industry has a billion dollar problem. Our underlying systems are built on a mountain of insecure technologies that make it next to impossible to write secure software. There are an innumerable amount of cases where Rust could have prevented serious security issues that not only had a deep impact on companies but more importantly on people.

But the path to wider adoption of Rust across industry is filled with many challenges not only for companies but for the Rust community itself. What does this journey to industry-wide adoption look like? How can we all work together to make sure that as more companies start adopting Rust, the language gets even better?

https://barcelona.rustfest.eu/sessions/r-evolution
Captions: 
	00:00:06,319 --> 00:00:11,190
all right so we're we're both very happy

00:00:09,269 --> 00:00:13,080
to be here come on a little bit closer

00:00:11,190 --> 00:00:15,210
so you can see it all right

00:00:13,080 --> 00:00:19,500
we're both very happy to be here to talk

00:00:15,210 --> 00:00:22,500
to all of you today we are going to be

00:00:19,500 --> 00:00:26,970
talking about a story of rust adoption

00:00:22,500 --> 00:00:28,769
at the company that we work at and this

00:00:26,970 --> 00:00:31,619
has really been an evolutionary process

00:00:28,769 --> 00:00:33,239
and a revolutionary one evolutionary and

00:00:31,619 --> 00:00:36,950
the fact that it is taking a very very

00:00:33,239 --> 00:00:38,820
long time but that's to be expected and

00:00:36,950 --> 00:00:42,750
revolutionary and the fact that this

00:00:38,820 --> 00:00:44,730
represents for us really a new

00:00:42,750 --> 00:00:48,690
opportunity and one that does not come

00:00:44,730 --> 00:00:50,850
along very often we are a company that

00:00:48,690 --> 00:00:53,100
normally invents programming languages

00:00:50,850 --> 00:00:55,140
and if we do it's usually in the order

00:00:53,100 --> 00:00:58,109
of one per decade that sees the light of

00:00:55,140 --> 00:00:59,460
day and so bringing in a new programming

00:00:58,109 --> 00:01:03,780
language is something that doesn't

00:00:59,460 --> 00:01:06,360
happen every few months but really every

00:01:03,780 --> 00:01:09,000
ten years or so so this is a very

00:01:06,360 --> 00:01:10,710
exciting time for us but before we get

00:01:09,000 --> 00:01:14,130
started talking about that real quick a

00:01:10,710 --> 00:01:16,500
little bit about ourselves my name is

00:01:14,130 --> 00:01:20,670
Ryan you can find me on twitter at a

00:01:16,500 --> 00:01:22,680
Trion underscore Loic say hello I've

00:01:20,670 --> 00:01:25,530
been riding rust for quite some time now

00:01:22,680 --> 00:01:28,950
before I joined Microsoft before 1.0

00:01:25,530 --> 00:01:31,710
came out and I was the MC the very first

00:01:28,950 --> 00:01:33,810
press fest so it is extremely exciting

00:01:31,710 --> 00:01:37,110
to see so many people here we're excited

00:01:33,810 --> 00:01:38,729
about rust back in the day used to be I

00:01:37,110 --> 00:01:39,509
would mention that I like trust and

00:01:38,729 --> 00:01:42,659
people would go

00:01:39,509 --> 00:01:44,549
what's rust and that's happening a lot

00:01:42,659 --> 00:01:46,700
less often now which is really really

00:01:44,549 --> 00:01:50,210
cool

00:01:46,700 --> 00:01:53,880
hola Barcelona and my name is Sebastien

00:01:50,210 --> 00:01:55,530
I'm in security software engineer it

00:01:53,880 --> 00:01:57,450
means that I work with when it ability

00:01:55,530 --> 00:02:01,619
some patching software those kind of

00:01:57,450 --> 00:02:05,460
things and I'm we know so right in rut

00:02:01,619 --> 00:02:07,680
or six years now I actually checked

00:02:05,460 --> 00:02:09,660
yesterday or how long I've been writing

00:02:07,680 --> 00:02:11,610
rust and I I found that my first

00:02:09,660 --> 00:02:13,860
contribution to the ROK compiler was in

00:02:11,610 --> 00:02:15,630
2013 and it was a tiny

00:02:13,860 --> 00:02:20,220
but four lines but it was a best way of

00:02:15,630 --> 00:02:22,350
blaming rust for me so yeah yeah yeah we

00:02:20,220 --> 00:02:24,060
both work for Microsoft opposite sides

00:02:22,350 --> 00:02:25,700
of Microsoft to be honest we don't even

00:02:24,060 --> 00:02:29,790
work in the same country

00:02:25,700 --> 00:02:31,850
Ryan works from Germany in the US the

00:02:29,790 --> 00:02:34,640
developer advocate and I work in the

00:02:31,850 --> 00:02:39,150
Microsoft Security Response Center and

00:02:34,640 --> 00:02:42,900
yeah not yeah really in the same team

00:02:39,150 --> 00:02:48,360
but we teamed up for pushing for rust

00:02:42,900 --> 00:02:49,950
adoption in Microsoft and yeah so we are

00:02:48,360 --> 00:02:51,959
part of it but being that we like

00:02:49,950 --> 00:02:53,790
Pauline the safe system programming

00:02:51,959 --> 00:02:55,290
language that you might have seen in

00:02:53,790 --> 00:03:01,860
some of the blog posts that we have been

00:02:55,290 --> 00:03:04,020
publishing it for sure yeah so we're

00:03:01,860 --> 00:03:06,780
gonna be talking about adoption of Russ

00:03:04,020 --> 00:03:08,820
today at Microsoft but before we get big

00:03:06,780 --> 00:03:10,830
before we begin with that the first

00:03:08,820 --> 00:03:13,410
thing to talk about is the problem that

00:03:10,830 --> 00:03:15,420
we're actually trying to solve obviously

00:03:13,410 --> 00:03:17,190
when we don't want to adopt a

00:03:15,420 --> 00:03:19,709
programming language just because it's

00:03:17,190 --> 00:03:21,660
cool just because we too like to write

00:03:19,709 --> 00:03:24,000
it as much as I wish that were possible

00:03:21,660 --> 00:03:26,430
you don't get very far with that kind of

00:03:24,000 --> 00:03:29,430
reasoning and so we're really trying to

00:03:26,430 --> 00:03:31,320
address a problem here

00:03:29,430 --> 00:03:34,050
and this isn't really a problem that

00:03:31,320 --> 00:03:36,570
affects us as a company only it's also a

00:03:34,050 --> 00:03:38,100
problem that we believe it impacts the

00:03:36,570 --> 00:03:41,130
entire industry the entire software

00:03:38,100 --> 00:03:42,840
industry and because of this situation

00:03:41,130 --> 00:03:44,550
we've gotten ourselves into as the

00:03:42,840 --> 00:03:47,570
software industry that really impacts

00:03:44,550 --> 00:03:51,450
the entire world for better or for worse

00:03:47,570 --> 00:03:54,630
and this is we should say a billion

00:03:51,450 --> 00:03:58,890
dollar problem really impacts us in an

00:03:54,630 --> 00:04:00,840
extremely deep way and I know money is

00:03:58,890 --> 00:04:02,730
perhaps not the best way to measure this

00:04:00,840 --> 00:04:06,090
but you can think of it not only as a

00:04:02,730 --> 00:04:08,640
problem that causes us to lose money but

00:04:06,090 --> 00:04:11,700
also causes everybody in this room

00:04:08,640 --> 00:04:15,780
everybody in the world really a lot of

00:04:11,700 --> 00:04:18,299
headache and pain and at the core of

00:04:15,780 --> 00:04:20,250
this problem at the very very core of

00:04:18,299 --> 00:04:22,979
this problem is a technology that we've

00:04:20,250 --> 00:04:26,340
been using in the software industry that

00:04:22,979 --> 00:04:29,289
has gotten us very very far and been

00:04:26,340 --> 00:04:33,130
really really great at a lot of

00:04:29,289 --> 00:04:37,270
but is really starting to show for lack

00:04:33,130 --> 00:04:41,979
of a better word its age and that

00:04:37,270 --> 00:04:44,259
technology is C and C++ C and C++ are

00:04:41,979 --> 00:04:48,190
extremely great at writing low-level

00:04:44,259 --> 00:04:52,090
systems they use very little resources

00:04:48,190 --> 00:04:55,000
on the machine they are in fact really

00:04:52,090 --> 00:04:58,210
the basis on which we create our systems

00:04:55,000 --> 00:05:01,479
today but the issue with that of course

00:04:58,210 --> 00:05:03,550
is that they are very very unsafe and

00:05:01,479 --> 00:05:06,610
when they were developed did not really

00:05:03,550 --> 00:05:08,440
have safety in mind and when we say

00:05:06,610 --> 00:05:17,080
safety really we mean the ability to

00:05:08,440 --> 00:05:19,509
write secure and correct code with it so

00:05:17,080 --> 00:05:21,490
I'd like to introduce a little about and

00:05:19,509 --> 00:05:23,650
what the Security Response Center does

00:05:21,490 --> 00:05:27,750
and the Security Response Center is

00:05:23,650 --> 00:05:30,070
basically an organization in Microsoft

00:05:27,750 --> 00:05:32,139
centralizes the management of

00:05:30,070 --> 00:05:35,110
vulnerabilities it means that we work

00:05:32,139 --> 00:05:36,280
with external researchers internal

00:05:35,110 --> 00:05:39,720
researchers as well to find

00:05:36,280 --> 00:05:42,130
vulnerabilities in the Microsoft product

00:05:39,720 --> 00:05:45,070
we work with the product teams then to

00:05:42,130 --> 00:05:48,310
fix them and also try to avoid from

00:05:45,070 --> 00:05:51,490
developers from repeating this mistake

00:05:48,310 --> 00:05:53,349
we also work in different mitigations to

00:05:51,490 --> 00:05:55,030
prevent the exploitation of the owner

00:05:53,349 --> 00:06:00,460
abilities and we have all this data

00:05:55,030 --> 00:06:04,240
about the vulnerabilities for the sake

00:06:00,460 --> 00:06:06,880
of the argument today this is a binary

00:06:04,240 --> 00:06:10,810
classification of the ordinary table

00:06:06,880 --> 00:06:13,030
I've seen that Peter mentioned the is

00:06:10,810 --> 00:06:16,780
70% before so I don't think it requires

00:06:13,030 --> 00:06:19,030
much introduction but there are around

00:06:16,780 --> 00:06:21,039
70% of the vulnerability that we patch

00:06:19,030 --> 00:06:25,509
in our software are related to memory

00:06:21,039 --> 00:06:28,030
safety as you can see this has been

00:06:25,509 --> 00:06:30,570
maintaining time so the problem is not

00:06:28,030 --> 00:06:30,570
getting any better

00:06:31,740 --> 00:06:38,409
so naturally the question comes up then

00:06:35,949 --> 00:06:40,630
okay this seems to be a problem that you

00:06:38,409 --> 00:06:42,910
have vulnerabilities but how much does

00:06:40,630 --> 00:06:44,710
this actually

00:06:42,910 --> 00:06:50,020
and how much does this actually cost the

00:06:44,710 --> 00:06:54,430
industry as a whole well this is a very

00:06:50,020 --> 00:06:56,170
conservative estimate and this is one

00:06:54,430 --> 00:06:59,230
hundred and fifty thousand dollars per

00:06:56,170 --> 00:07:00,850
issue you can see this it's a lot of

00:06:59,230 --> 00:07:03,820
money and this is only for Microsoft

00:07:00,850 --> 00:07:05,440
it's not accounting for the work and

00:07:03,820 --> 00:07:07,150
time that our customers have to spend

00:07:05,440 --> 00:07:10,050
rebooting machines is telling the

00:07:07,150 --> 00:07:16,210
parties and doing everything else that

00:07:10,050 --> 00:07:18,970
every Tuesday okay so one hundred and

00:07:16,210 --> 00:07:21,130
fifty thousand dollars per issue but

00:07:18,970 --> 00:07:23,560
okay if there's only one issue per year

00:07:21,130 --> 00:07:26,260
then perhaps that's not too bad

00:07:23,560 --> 00:07:27,180
how many issues are we actually talking

00:07:26,260 --> 00:07:31,510
about

00:07:27,180 --> 00:07:34,240
and only in 2018 we had four hundred

00:07:31,510 --> 00:07:36,750
sixty-eight issues you can see that this

00:07:34,240 --> 00:07:39,730
is a lot of money if you made Emma

00:07:36,750 --> 00:07:41,680
if you made a if you made a Matthew and

00:07:39,730 --> 00:07:46,470
x times the amount of money with

00:07:41,680 --> 00:07:51,820
Perisher yeah this is this is a lot and

00:07:46,470 --> 00:07:53,620
we can see the the the issue is not

00:07:51,820 --> 00:07:58,630
getting any better it's actually getting

00:07:53,620 --> 00:08:03,070
worse year over year and only in 2019 we

00:07:58,630 --> 00:08:04,740
had over 170 issues and Annie there is

00:08:03,070 --> 00:08:09,730
not even over yet

00:08:04,740 --> 00:08:11,410
sorry about the meek all right so the

00:08:09,730 --> 00:08:15,040
the issue is getting worse over time

00:08:11,410 --> 00:08:17,530
that's that's not so good but is it

00:08:15,040 --> 00:08:18,820
possible that the cost could be even

00:08:17,530 --> 00:08:27,580
higher than what we're talking about

00:08:18,820 --> 00:08:29,470
here this this cost is only for for when

00:08:27,580 --> 00:08:31,660
the good people find the issues they

00:08:29,470 --> 00:08:36,520
reported to us then we patch them and

00:08:31,660 --> 00:08:39,250
then everyone is happy but what if my

00:08:36,520 --> 00:08:42,310
world also finds the bug and write an

00:08:39,250 --> 00:08:45,640
expiry for it this has happened like

00:08:42,310 --> 00:08:48,550
many many times in history but there are

00:08:45,640 --> 00:08:52,060
a few occasions that we've got out of

00:08:48,550 --> 00:08:55,830
hands I don't know if you remember a SQL

00:08:52,060 --> 00:08:58,530
slammer back in 2003 it was

00:08:55,830 --> 00:09:01,080
ah a worm that was exploiting a

00:08:58,530 --> 00:09:03,000
vulnerability and SQL Server then was

00:09:01,080 --> 00:09:06,960
infecting the Machine and using that

00:09:03,000 --> 00:09:09,270
machine to infecting other machines then

00:09:06,960 --> 00:09:13,200
we had configure that was exploiting

00:09:09,270 --> 00:09:17,280
also us to your surprise buffer overflow

00:09:13,200 --> 00:09:19,530
in one of the RPC servers of Windows in

00:09:17,280 --> 00:09:22,530
fact in the machine and then also using

00:09:19,530 --> 00:09:24,690
the machine to distribute the virus to

00:09:22,530 --> 00:09:27,720
the other machines and most most

00:09:24,690 --> 00:09:30,570
recently and when I cry I know if you

00:09:27,720 --> 00:09:32,880
were affected by it of your organization

00:09:30,570 --> 00:09:34,830
but you probably know more than one

00:09:32,880 --> 00:09:38,130
person that was affected by it

00:09:34,830 --> 00:09:42,840
what is one was doing was exploiting and

00:09:38,130 --> 00:09:44,430
the SMB server off of Windows then was

00:09:42,840 --> 00:09:47,000
infecting the machine and crypt in all

00:09:44,430 --> 00:09:49,800
the day all the fights in the disk and

00:09:47,000 --> 00:09:51,630
asking for I think was hundred dollars

00:09:49,800 --> 00:09:56,790
yeah three hundred dollars and to

00:09:51,630 --> 00:09:59,310
decrypt a device this worm distributed

00:09:56,790 --> 00:10:05,340
to over 200 countries only in the first

00:09:59,310 --> 00:10:08,370
week well and to give an example the

00:10:05,340 --> 00:10:11,490
national healthcare system and PCs of

00:10:08,370 --> 00:10:15,030
the of the UK where we're affected by

00:10:11,490 --> 00:10:18,480
this ransom release an estimation that

00:10:15,030 --> 00:10:23,010
it costed the organisation that on that

00:10:18,480 --> 00:10:27,380
organization only 96 million dollars the

00:10:23,010 --> 00:10:31,230
global estimate for for this ransom was

00:10:27,380 --> 00:10:35,310
around 4 billion dollars yes that's what

00:10:31,230 --> 00:10:37,170
you're seeing these nine zeros some

00:10:35,310 --> 00:10:40,470
people will be the estimate even over

00:10:37,170 --> 00:10:47,400
four eight million dollars so as you can

00:10:40,470 --> 00:10:48,660
see this is a lot a lot of money alright

00:10:47,400 --> 00:10:51,300
so we have these memory safety

00:10:48,660 --> 00:10:54,030
vulnerabilities that are causing lots of

00:10:51,300 --> 00:10:57,090
head ache and pain upwards of four

00:10:54,030 --> 00:10:59,550
billion dollars at a time that's really

00:10:57,090 --> 00:11:03,360
not a good thing but how could we

00:10:59,550 --> 00:11:06,510
actually fix this issue and there's been

00:11:03,360 --> 00:11:08,550
many ideas that have occurred over the

00:11:06,510 --> 00:11:08,830
years some better than others and we're

00:11:08,550 --> 00:11:11,290
going to

00:11:08,830 --> 00:11:13,810
talk about a few of them so the first

00:11:11,290 --> 00:11:15,550
bright idea that was had um and there's

00:11:13,810 --> 00:11:18,220
an idea that you often see on a

00:11:15,550 --> 00:11:21,430
particular orange website nowadays is

00:11:18,220 --> 00:11:23,970
that we need better programmers all

00:11:21,430 --> 00:11:28,480
right we're done thank you know this

00:11:23,970 --> 00:11:30,910
please stop this does not work we need

00:11:28,480 --> 00:11:35,080
better programmers is not an answer to

00:11:30,910 --> 00:11:37,000
this training does help you can try to

00:11:35,080 --> 00:11:40,360
mitigate some issues by making people

00:11:37,000 --> 00:11:41,500
better at writing secure software so

00:11:40,360 --> 00:11:44,800
we're not saying that you should not

00:11:41,500 --> 00:11:47,260
train people but this is absolutely by

00:11:44,800 --> 00:11:49,030
no means a way to address this issue you

00:11:47,260 --> 00:11:51,640
can have extremely highly talented

00:11:49,030 --> 00:11:56,910
highly trained individuals writing code

00:11:51,640 --> 00:11:59,650
and they will still make mistakes so no

00:11:56,910 --> 00:12:02,320
now that's that is out of the way that's

00:11:59,650 --> 00:12:05,830
good what about another great idea and

00:12:02,320 --> 00:12:08,110
this one does work a lot better that is

00:12:05,830 --> 00:12:09,450
the need for better analysis tools and

00:12:08,110 --> 00:12:11,980
is something that has been happening

00:12:09,450 --> 00:12:14,260
over the years quite often both static

00:12:11,980 --> 00:12:16,930
and dynamic analysis tools that allow

00:12:14,260 --> 00:12:18,730
you to look at a program and determine

00:12:16,930 --> 00:12:20,830
if it has vulnerabilities before it ever

00:12:18,730 --> 00:12:25,290
reaches anybody's machine to actually

00:12:20,830 --> 00:12:28,450
run and this works fairly well over time

00:12:25,290 --> 00:12:31,090
and is something that we still want to

00:12:28,450 --> 00:12:33,460
actively invest in because no matter

00:12:31,090 --> 00:12:35,590
what happens after we leave the room

00:12:33,460 --> 00:12:38,290
today the world will still continue to

00:12:35,590 --> 00:12:39,870
have plenty of unsecure code in it

00:12:38,290 --> 00:12:42,670
people will continue to write and

00:12:39,870 --> 00:12:44,410
insecure technologies and so we need the

00:12:42,670 --> 00:12:47,340
ability to take a look at that code and

00:12:44,410 --> 00:12:52,930
determine if it has a vulnerability

00:12:47,340 --> 00:12:55,390
inside but these tools are not perfect

00:12:52,930 --> 00:12:58,120
and we are convinced that they can never

00:12:55,390 --> 00:13:02,170
be perfect so there's really only one

00:12:58,120 --> 00:13:04,420
idea left that we can actually use and

00:13:02,170 --> 00:13:07,660
this is really the only way that we can

00:13:04,420 --> 00:13:09,370
address this issue fully and that's the

00:13:07,660 --> 00:13:11,230
idea that we need to make these issues

00:13:09,370 --> 00:13:13,020
impossible to introduce in the first

00:13:11,230 --> 00:13:16,030
place

00:13:13,020 --> 00:13:17,950
and over time there have been there's

00:13:16,030 --> 00:13:20,410
actually been a lot of active research

00:13:17,950 --> 00:13:22,600
into this area how to make these issues

00:13:20,410 --> 00:13:24,399
impossible and there's a few

00:13:22,600 --> 00:13:26,050
things that have been introduced in

00:13:24,399 --> 00:13:32,709
software that allowed them to not

00:13:26,050 --> 00:13:34,259
actually occur okay so I think to

00:13:32,709 --> 00:13:36,339
understand the issue we have to

00:13:34,259 --> 00:13:37,449
understand the role we have to

00:13:36,339 --> 00:13:40,630
understand the program to find a

00:13:37,449 --> 00:13:43,360
solution so we can classify the memory

00:13:40,630 --> 00:13:46,930
safety vulnerabilities in into big

00:13:43,360 --> 00:13:51,759
classes of vulnerabilities and one is

00:13:46,930 --> 00:13:52,930
related to spatial memory safety what

00:13:51,759 --> 00:13:56,800
does it mean that when you have a

00:13:52,930 --> 00:13:59,470
pointer or a buffer that that's some

00:13:56,800 --> 00:14:01,839
type of memory and it usually has a size

00:13:59,470 --> 00:14:05,579
it's not infinite so when you try to

00:14:01,839 --> 00:14:09,610
index out of that buffer or pointer and

00:14:05,579 --> 00:14:12,190
you go to C developers called undefined

00:14:09,610 --> 00:14:14,740
behavior so it means that everything is

00:14:12,190 --> 00:14:19,470
wrong and it's not doing what you are

00:14:14,740 --> 00:14:23,529
expecting it to do for fixing this issue

00:14:19,470 --> 00:14:27,579
there is a clear way that most languages

00:14:23,529 --> 00:14:29,680
are half now that runtime check when you

00:14:27,579 --> 00:14:32,620
allocate memory you subscribe you can

00:14:29,680 --> 00:14:36,279
embed that information is in the pointer

00:14:32,620 --> 00:14:44,680
in the buffer so now you have rich

00:14:36,279 --> 00:14:47,410
pointer or fat pointer so when you try

00:14:44,680 --> 00:14:50,439
to index that pointer now you have a

00:14:47,410 --> 00:14:54,370
random check that you don't have to do

00:14:50,439 --> 00:14:58,149
anything if is the indices outside the

00:14:54,370 --> 00:15:02,310
bounds it it will fail the the memory

00:14:58,149 --> 00:15:07,420
access and nothing bad will happen and

00:15:02,310 --> 00:15:09,910
the second type of say the memory safety

00:15:07,420 --> 00:15:14,079
we can talk about this and spatial

00:15:09,910 --> 00:15:15,550
memory safety this this means that when

00:15:14,079 --> 00:15:17,980
you claim memory or when you allocate

00:15:15,550 --> 00:15:22,240
memory that memory will be valid only

00:15:17,980 --> 00:15:23,649
for some time once it gets freed you

00:15:22,240 --> 00:15:26,230
shoot them you shouldn't be using that

00:15:23,649 --> 00:15:27,880
memory but sometimes in the languages

00:15:26,230 --> 00:15:31,230
you don't clear the references and then

00:15:27,880 --> 00:15:35,079
you can still access it and there is an

00:15:31,230 --> 00:15:36,310
easy way of solving des that a lot of

00:15:35,079 --> 00:15:38,740
languages use

00:15:36,310 --> 00:15:40,240
that's an using garbage collection what

00:15:38,740 --> 00:15:43,090
does it mean that you can clean memory

00:15:40,240 --> 00:15:46,690
but you cannot free memory manually you

00:15:43,090 --> 00:15:51,610
expect the runtime to frida memory and

00:15:46,690 --> 00:15:53,890
this is basically always leaving the

00:15:51,610 --> 00:15:57,850
memory they are and then you will have

00:15:53,890 --> 00:15:59,680
these program inside the runtime that

00:15:57,850 --> 00:16:04,470
will go and find the memory that's not

00:15:59,680 --> 00:16:06,700
used anymore and free but of course

00:16:04,470 --> 00:16:09,279
garbage collection does come with its

00:16:06,700 --> 00:16:12,040
downsides there are a whole class of

00:16:09,279 --> 00:16:13,930
programs out there where a runtime like

00:16:12,040 --> 00:16:16,000
a garbage collect at runtime is not

00:16:13,930 --> 00:16:18,400
really acceptable so if you're writing

00:16:16,000 --> 00:16:20,560
an operating system or perhaps a really

00:16:18,400 --> 00:16:22,029
low level system like the database or

00:16:20,560 --> 00:16:23,890
something like that

00:16:22,029 --> 00:16:25,779
more often than not you don't want to

00:16:23,890 --> 00:16:27,279
pay the penalty of having a garbage

00:16:25,779 --> 00:16:29,050
collection there collector which comes

00:16:27,279 --> 00:16:31,270
with performance penalties and also

00:16:29,050 --> 00:16:34,480
comes with penalties for not really

00:16:31,270 --> 00:16:37,380
knowing when certain things will run and

00:16:34,480 --> 00:16:40,180
that's just oftentimes unacceptable but

00:16:37,380 --> 00:16:42,220
we believe that there is a technology

00:16:40,180 --> 00:16:44,530
out there that allows us to kind of have

00:16:42,220 --> 00:16:49,500
our cake and eat it too and spoiler

00:16:44,530 --> 00:16:52,089
alert it's rust rust is not particularly

00:16:49,500 --> 00:16:53,290
exactly perfect in this regard and we're

00:16:52,089 --> 00:16:55,570
going to talk a little bit about the

00:16:53,290 --> 00:16:58,120
caveats to this but rust does allow us

00:16:55,570 --> 00:17:03,839
to write performant performant systems

00:16:58,120 --> 00:17:06,810
programs in a safe way and to look into

00:17:03,839 --> 00:17:10,500
what rust actually gets us and practice

00:17:06,810 --> 00:17:15,010
we'll take a look at this

00:17:10,500 --> 00:17:17,910
so I mean right I was talking before

00:17:15,010 --> 00:17:22,720
about making these issues impossible and

00:17:17,910 --> 00:17:27,690
that's kind of a hard thing and but what

00:17:22,720 --> 00:17:32,020
if we could isolate what unsafe from not

00:17:27,690 --> 00:17:35,470
unsafe what's unsafe from safe and when

00:17:32,020 --> 00:17:38,679
we are looking at the C++ code base we

00:17:35,470 --> 00:17:41,800
find that hundred percent of the code

00:17:38,679 --> 00:17:46,390
base is written in unsafe super bad you

00:17:41,800 --> 00:17:49,440
have no way of isolating what what's

00:17:46,390 --> 00:17:49,440
safe from and safe

00:17:49,750 --> 00:17:57,170
for example we are talking about

00:17:53,559 --> 00:17:59,030
software we have to pull to make thread

00:17:57,170 --> 00:18:02,240
models about the software what does it

00:17:59,030 --> 00:18:04,790
mean that you have to make an analysis

00:18:02,240 --> 00:18:06,410
of how the software can be attacked if

00:18:04,790 --> 00:18:08,720
we are talking about a browser for

00:18:06,410 --> 00:18:11,630
example a browser the thread model is

00:18:08,720 --> 00:18:14,240
that every website can be malicious if

00:18:11,630 --> 00:18:17,870
we are talking about the kernel we have

00:18:14,240 --> 00:18:20,480
to start from the ground that each

00:18:17,870 --> 00:18:23,179
program user running in user space will

00:18:20,480 --> 00:18:29,050
be also malicious so that has to protect

00:18:23,179 --> 00:18:32,059
it has to protect from every program and

00:18:29,050 --> 00:18:35,240
after you have this suite model for

00:18:32,059 --> 00:18:39,110
these two examples you come to the

00:18:35,240 --> 00:18:43,690
conclusion that almost all this all the

00:18:39,110 --> 00:18:50,179
code is exposed to the to their

00:18:43,690 --> 00:18:54,380
malicious symbols when we have and when

00:18:50,179 --> 00:18:57,620
we look at rust and there is a clear

00:18:54,380 --> 00:19:01,160
boundary of what safe and unsafe

00:18:57,620 --> 00:19:03,260
and this is a big advantage for software

00:19:01,160 --> 00:19:05,870
security software engineers like myself

00:19:03,260 --> 00:19:10,460
that we have showed it and these code

00:19:05,870 --> 00:19:12,590
bases and we made an analysis of the

00:19:10,460 --> 00:19:15,410
most-used great and came to the

00:19:12,590 --> 00:19:19,640
conclusion that the amount of lines that

00:19:15,410 --> 00:19:25,190
were unsafe in the top 200 great was

00:19:19,640 --> 00:19:28,370
only 1% and I remember I was wroth kampf

00:19:25,190 --> 00:19:30,559
watching and sharing means Jeremy's talk

00:19:28,370 --> 00:19:32,540
and he was talking about the rest

00:19:30,559 --> 00:19:35,270
adoption in Facebook and he was saying

00:19:32,540 --> 00:19:38,240
that the recessed ratio of data

00:19:35,270 --> 00:19:42,350
technology technology has to overcome to

00:19:38,240 --> 00:19:46,190
be 10 times better and done than the

00:19:42,350 --> 00:19:49,850
next technology available and we can see

00:19:46,190 --> 00:19:52,309
here Rusted not over that threshold but

00:19:49,850 --> 00:19:54,559
we can consider out in this aspect it's

00:19:52,309 --> 00:20:00,170
a hundred times better than the next

00:19:54,559 --> 00:20:01,700
technology available but of course

00:20:00,170 --> 00:20:05,960
we're a truss fests so we're kind of

00:20:01,700 --> 00:20:07,430
preaching to the choir here most mostly

00:20:05,960 --> 00:20:09,470
everybody in this room probably already

00:20:07,430 --> 00:20:12,380
understands this you may not have

00:20:09,470 --> 00:20:13,790
selected to use Russ or this property

00:20:12,380 --> 00:20:16,400
but you've probably heard about it

00:20:13,790 --> 00:20:19,190
before and so let's just say for the

00:20:16,400 --> 00:20:21,800
sake of argument that we're going to use

00:20:19,190 --> 00:20:23,570
rust we we have chosen it we've been

00:20:21,800 --> 00:20:26,090
able to convince ourselves that this is

00:20:23,570 --> 00:20:28,940
a good thing to adopt what does that

00:20:26,090 --> 00:20:32,170
actual adoption process look like and

00:20:28,940 --> 00:20:35,390
this is really where it actually begins

00:20:32,170 --> 00:20:37,130
because while Russ might present a very

00:20:35,390 --> 00:20:41,180
interesting opportunity for us as an

00:20:37,130 --> 00:20:43,640
industry we have a whole ton of C and

00:20:41,180 --> 00:20:45,350
C++ code written out there and we can't

00:20:43,640 --> 00:20:47,570
just snap our fingers and have it

00:20:45,350 --> 00:20:50,800
written and rust it's going to be a very

00:20:47,570 --> 00:20:53,750
very very very very long time until that

00:20:50,800 --> 00:20:55,760
goes away even if we were all 100%

00:20:53,750 --> 00:20:59,990
convinced that that's the right thing to

00:20:55,760 --> 00:21:01,460
do so when we talk about rust adoption

00:20:59,990 --> 00:21:04,190
the first thing that we should take a

00:21:01,460 --> 00:21:05,990
step back at and look at is actually how

00:21:04,190 --> 00:21:08,060
do languages get adopted and

00:21:05,990 --> 00:21:11,270
particularly how do they get adopted in

00:21:08,060 --> 00:21:13,490
existing large companies because if it's

00:21:11,270 --> 00:21:15,080
a start-up it's quite easy you can just

00:21:13,490 --> 00:21:17,240
choose to use a new technology because

00:21:15,080 --> 00:21:18,830
you haven't written any code before but

00:21:17,240 --> 00:21:21,770
if you haven't a huge code base that

00:21:18,830 --> 00:21:24,770
already has seen C++ in it what is the

00:21:21,770 --> 00:21:29,390
process actually like and the issue with

00:21:24,770 --> 00:21:31,250
this is the following you have costs and

00:21:29,390 --> 00:21:33,620
you have benefits and I don't know if

00:21:31,250 --> 00:21:35,870
you can see it but down there it says

00:21:33,620 --> 00:21:38,540
benefits but they're very hard to see

00:21:35,870 --> 00:21:40,310
the costs are quite clear you have the

00:21:38,540 --> 00:21:43,010
costs of actually introducing the code

00:21:40,310 --> 00:21:46,130
inside of your code base of introducing

00:21:43,010 --> 00:21:49,280
the compiler inside of of your build

00:21:46,130 --> 00:21:51,110
system these are all very clear costs

00:21:49,280 --> 00:21:52,940
and are actually very easy to reason

00:21:51,110 --> 00:21:54,800
about how much it will and end up

00:21:52,940 --> 00:21:57,800
costing your organization to actually

00:21:54,800 --> 00:21:59,960
adopt it but the benefits of introducing

00:21:57,800 --> 00:22:01,850
a new language may not be so clear if

00:21:59,960 --> 00:22:04,580
you're introducing a new language

00:22:01,850 --> 00:22:06,110
because it has a great type system and

00:22:04,580 --> 00:22:09,410
you think that that type system will not

00:22:06,110 --> 00:22:11,270
introduce as many bugs as the current

00:22:09,410 --> 00:22:13,210
language you're using well how do you

00:22:11,270 --> 00:22:15,730
actually prove that it's extremely

00:22:13,210 --> 00:22:18,399
difficult to actually measure the impact

00:22:15,730 --> 00:22:23,020
of something like a more advanced type

00:22:18,399 --> 00:22:26,049
system but at the end of the day this is

00:22:23,020 --> 00:22:28,510
what makes rusts more adoptable because

00:22:26,049 --> 00:22:30,580
for rust that picture looks more like

00:22:28,510 --> 00:22:33,130
this where the costs are still quite

00:22:30,580 --> 00:22:34,570
clear but at least this one benefit that

00:22:33,130 --> 00:22:37,299
we've been talking about of memory

00:22:34,570 --> 00:22:39,669
safety is extremely clear we know that

00:22:37,299 --> 00:22:42,190
rust will get us much further along to

00:22:39,669 --> 00:22:44,529
the writing memory safe code and we know

00:22:42,190 --> 00:22:46,390
that memory unsafe code leads to

00:22:44,529 --> 00:22:49,090
billions and billions and billions of

00:22:46,390 --> 00:22:51,669
dollars of damage so it's quite easy to

00:22:49,090 --> 00:22:53,440
go to people and say how about we stop

00:22:51,669 --> 00:22:56,799
spending billions of dollars on this

00:22:53,440 --> 00:22:58,510
stuff and they go sounds good

00:22:56,799 --> 00:23:01,179
and of course I've we've only written

00:22:58,510 --> 00:23:03,190
benefit here that's not to say that rust

00:23:01,179 --> 00:23:04,720
doesn't have other benefits it's just to

00:23:03,190 --> 00:23:07,179
say that those are harder to talk about

00:23:04,720 --> 00:23:10,149
and harder to convince others in a large

00:23:07,179 --> 00:23:13,240
organization to bet on rust because of

00:23:10,149 --> 00:23:15,970
them so really when it comes to adopting

00:23:13,240 --> 00:23:17,980
it in a large organization it really is

00:23:15,970 --> 00:23:21,279
enough to just talk about its memory

00:23:17,980 --> 00:23:27,789
safety properties in order to convince

00:23:21,279 --> 00:23:31,600
others that is worth adopting yes so

00:23:27,789 --> 00:23:34,570
maybe just maybe and we shouldn't be

00:23:31,600 --> 00:23:38,679
writing security critical software a in

00:23:34,570 --> 00:23:41,200
C++ because of the things we were

00:23:38,679 --> 00:23:44,080
mentioning before so now the debate is

00:23:41,200 --> 00:23:46,049
and what do we use for for writing the

00:23:44,080 --> 00:23:51,549
Security's critical software and this is

00:23:46,049 --> 00:23:57,909
very rough I mean rust you can write

00:23:51,549 --> 00:23:59,770
performance performant code and having

00:23:57,909 --> 00:24:03,039
all these extra things that are related

00:23:59,770 --> 00:24:05,980
to the memory safety of the language but

00:24:03,039 --> 00:24:12,120
we cannot just ditch everything that we

00:24:05,980 --> 00:24:12,120
did till now and start over with rust so

00:24:12,659 --> 00:24:20,260
what what we can do now and do we just

00:24:17,559 --> 00:24:21,370
keep using continue using what the

00:24:20,260 --> 00:24:25,059
technology that we were using before

00:24:21,370 --> 00:24:27,100
usually see LastPass or we can maybe try

00:24:25,059 --> 00:24:30,940
and decorate in rust with our exes

00:24:27,100 --> 00:24:35,140
cold bases and technologies this means

00:24:30,940 --> 00:24:37,419
that we have to integrate rust with with

00:24:35,140 --> 00:24:40,660
our infrastructure and that's not easy

00:24:37,419 --> 00:24:44,080
because rust is not just a language rust

00:24:40,660 --> 00:24:48,190
is a set of tools that you are bringing

00:24:44,080 --> 00:24:51,750
to your infrastructure and this

00:24:48,190 --> 00:24:55,840
especially for for Windows people and

00:24:51,750 --> 00:24:58,929
rust comes with this beast that the

00:24:55,840 --> 00:25:04,030
compiler back in that rust uses that is

00:24:58,929 --> 00:25:08,640
LLVM and VM has topped it with great

00:25:04,030 --> 00:25:11,970
support for much BSD than Linux but

00:25:08,640 --> 00:25:19,120
Windows support is not really there and

00:25:11,970 --> 00:25:22,150
we one example is for example IBM didn't

00:25:19,120 --> 00:25:27,010
have a linker for for Windows minor is

00:25:22,150 --> 00:25:29,350
still only a few months ago continuing

00:25:27,010 --> 00:25:32,020
on this line of bringing all the all

00:25:29,350 --> 00:25:37,570
these rust tools to your infrastructure

00:25:32,020 --> 00:25:40,570
is that we have a lot of tools that we

00:25:37,570 --> 00:25:42,070
have to run in our pipelines to generate

00:25:40,570 --> 00:25:45,210
the binaries and to check that the

00:25:42,070 --> 00:25:48,429
binaries are okay if an example is that

00:25:45,210 --> 00:25:51,039
we check all our all the binaries I will

00:25:48,429 --> 00:25:53,409
ship to our customers and for for

00:25:51,039 --> 00:25:57,159
performance that means analyzing all the

00:25:53,409 --> 00:25:59,470
binaries in at runtime checking that

00:25:57,159 --> 00:26:01,980
they are doing well and sometimes

00:25:59,470 --> 00:26:05,650
rewriting those minor is it means

00:26:01,980 --> 00:26:07,870
rearranging the basic blocks that are an

00:26:05,650 --> 00:26:11,500
inside so they are more performant and

00:26:07,870 --> 00:26:13,179
more friendly and the problem that we

00:26:11,500 --> 00:26:22,030
have with those tools is that those

00:26:13,179 --> 00:26:26,830
tools are used to to analyze binaries

00:26:22,030 --> 00:26:30,190
produced by ms PC and it obviously you

00:26:26,830 --> 00:26:32,890
cannot just expect that LLVM enemies you

00:26:30,190 --> 00:26:34,900
see are generating the same type of

00:26:32,890 --> 00:26:37,360
binaries they have different name

00:26:34,900 --> 00:26:39,730
mangling they have different types of

00:26:37,360 --> 00:26:40,330
symbols and the arranged information in

00:26:39,730 --> 00:26:42,070
the riff

00:26:40,330 --> 00:26:44,529
way and they have different heuristics

00:26:42,070 --> 00:26:48,580
for generating the code so this is a

00:26:44,529 --> 00:26:53,940
whole new set of tools that we have to

00:26:48,580 --> 00:26:56,710
adopt and continuing on this line of

00:26:53,940 --> 00:26:58,960
tooling we have also build system that

00:26:56,710 --> 00:27:03,789
have been optimized for many many years

00:26:58,960 --> 00:27:07,179
to perform well and to comply with a set

00:27:03,789 --> 00:27:09,330
of rules as we have our business and

00:27:07,179 --> 00:27:11,980
just shut for a second in machine and

00:27:09,330 --> 00:27:18,269
theoretically that you want to include a

00:27:11,980 --> 00:27:22,269
rot component inside Windows and these

00:27:18,269 --> 00:27:26,159
challenges are that when you when you

00:27:22,269 --> 00:27:29,799
want to use Roscoe there and you have

00:27:26,159 --> 00:27:33,399
obviously cargo which people used to

00:27:29,799 --> 00:27:36,880
build and to build rust binaries and

00:27:33,399 --> 00:27:38,950
cargo is a great tool I mean who can

00:27:36,880 --> 00:27:41,350
imagine using rust without using cargo

00:27:38,950 --> 00:27:46,210
you are losing half of the half of the

00:27:41,350 --> 00:27:48,220
features cargo is a great will build

00:27:46,210 --> 00:27:52,659
tool and a great package management tool

00:27:48,220 --> 00:27:55,080
but it has to be integrated in a in an

00:27:52,659 --> 00:27:57,669
existing the system we cannot just let

00:27:55,080 --> 00:28:01,210
cargo manage our whole bin system and

00:27:57,669 --> 00:28:03,549
obviously for cargo there is rust code

00:28:01,210 --> 00:28:09,220
and not rust code that is nothing else

00:28:03,549 --> 00:28:13,000
for for cargo and convene on this line

00:28:09,220 --> 00:28:15,399
we have a we must be able to

00:28:13,000 --> 00:28:18,610
interoperate with the existing software

00:28:15,399 --> 00:28:21,210
as as I was mentioning before and the

00:28:18,610 --> 00:28:25,360
software is usually written in C and C++

00:28:21,210 --> 00:28:28,480
and sometimes you have a clear boundary

00:28:25,360 --> 00:28:32,350
between and is this different

00:28:28,480 --> 00:28:33,970
DLS maybe one is written in in C and the

00:28:32,350 --> 00:28:39,970
other will be written in rust in the

00:28:33,970 --> 00:28:41,080
future rust fortunately it's very good

00:28:39,970 --> 00:28:43,809
at interoperating with other

00:28:41,080 --> 00:28:49,090
technologies because it supports most of

00:28:43,809 --> 00:28:51,460
the ABI is supported by C also another

00:28:49,090 --> 00:28:53,490
great tool that comes with rust it

00:28:51,460 --> 00:28:55,490
banshan mention

00:28:53,490 --> 00:29:00,390
lest you take a seat header and

00:28:55,490 --> 00:29:03,030
generated rot binding for it but the

00:29:00,390 --> 00:29:05,730
downside is you have now all these

00:29:03,030 --> 00:29:07,170
unsafe binding that you have to make a

00:29:05,730 --> 00:29:09,990
save wrapper around it

00:29:07,170 --> 00:29:16,050
so maybe the idea is that in the future

00:29:09,990 --> 00:29:18,960
we can kind of guess if we can if we can

00:29:16,050 --> 00:29:24,240
make a safe wrapper around these C

00:29:18,960 --> 00:29:26,910
headers and the last one is the it's

00:29:24,240 --> 00:29:28,410
crazy but and there have been like many

00:29:26,910 --> 00:29:31,790
technologies to make interoperability

00:29:28,410 --> 00:29:35,130
language agnostic this labor is like

00:29:31,790 --> 00:29:39,510
common and we have T these are well

00:29:35,130 --> 00:29:41,760
define an API standards because what

00:29:39,510 --> 00:29:45,570
severity then have a well-defined ABI e

00:29:41,760 --> 00:29:49,740
back then and these are things that the

00:29:45,570 --> 00:29:52,050
communicative working on we analyze most

00:29:49,740 --> 00:29:56,490
of these most of the things available

00:29:52,050 --> 00:29:58,470
for calm and we decided to to also write

00:29:56,490 --> 00:30:04,320
another an hour comradery that we

00:29:58,470 --> 00:30:05,670
released this month I think yeah so it

00:30:04,320 --> 00:30:11,309
we are getting there with

00:30:05,670 --> 00:30:14,370
interoperability then we have also we

00:30:11,309 --> 00:30:18,420
have problems that common people don't

00:30:14,370 --> 00:30:21,059
have and what sorry common people is

00:30:18,420 --> 00:30:24,120
about description body and individual

00:30:21,059 --> 00:30:26,309
developers maybe don't don't have or a

00:30:24,120 --> 00:30:28,320
small companies but the company's food

00:30:26,309 --> 00:30:31,380
processes in place to prevent errors

00:30:28,320 --> 00:30:33,030
from from happening it means that

00:30:31,380 --> 00:30:37,320
everything that you bring into the

00:30:33,030 --> 00:30:39,720
company have to must must comply with a

00:30:37,320 --> 00:30:41,220
set of rules and one of them is having a

00:30:39,720 --> 00:30:44,220
trusted tool chain when you are

00:30:41,220 --> 00:30:47,670
developing with rust you don't know the

00:30:44,220 --> 00:30:49,740
stop you executing in the PC and then

00:30:47,670 --> 00:30:51,540
after two minutes depending on your

00:30:49,740 --> 00:30:56,280
internet connection you have rust

00:30:51,540 --> 00:31:00,390
available to to be used but when you are

00:30:56,280 --> 00:31:04,110
bringing rot into an urban system and I

00:31:00,390 --> 00:31:05,880
like the windows one you just cannot

00:31:04,110 --> 00:31:07,309
pull a binary from the Internet and run

00:31:05,880 --> 00:31:10,800
it to there

00:31:07,309 --> 00:31:12,720
more even even more if these binary is

00:31:10,800 --> 00:31:15,900
connecting to the Internet at putting

00:31:12,720 --> 00:31:18,360
even more binaries from there so you

00:31:15,900 --> 00:31:20,160
seen rust up there or putting the rat

00:31:18,360 --> 00:31:21,930
compiler directly into the build system

00:31:20,160 --> 00:31:25,170
is not an option it means that we have

00:31:21,930 --> 00:31:26,790
to build our own tools and this is a big

00:31:25,170 --> 00:31:29,280
challenge because we have to start from

00:31:26,790 --> 00:31:31,559
a trusted source code and a trusted

00:31:29,280 --> 00:31:35,580
binary and then build the trusted binary

00:31:31,559 --> 00:31:38,640
that we can use in a wearable system the

00:31:35,580 --> 00:31:41,960
following one is about these are all

00:31:38,640 --> 00:31:44,520
examples and there are many more but

00:31:41,960 --> 00:31:46,620
having a we have binary security

00:31:44,520 --> 00:31:49,200
policies all the all the binaries that

00:31:46,620 --> 00:31:52,620
we ship to our customers comply with a

00:31:49,200 --> 00:31:57,150
set of rules to make to make them more

00:31:52,620 --> 00:32:00,900
secure so for example an only miner is

00:31:57,150 --> 00:32:03,090
that our sheep have the SLR and a few

00:32:00,900 --> 00:32:06,740
other and memorialization mitigations

00:32:03,090 --> 00:32:09,900
enable in them an example of it is a

00:32:06,740 --> 00:32:11,429
control flow gap and control flow here

00:32:09,900 --> 00:32:13,679
is something to protect a control flow

00:32:11,429 --> 00:32:15,630
of the program so malicious input cannot

00:32:13,679 --> 00:32:17,370
hijack it and then well do something

00:32:15,630 --> 00:32:19,950
that the program was not programmed to

00:32:17,370 --> 00:32:23,730
do and this was a mitigation I wasn't

00:32:19,950 --> 00:32:26,190
available in LLVM yeah now we can

00:32:23,730 --> 00:32:27,809
happily say that we in a madest

00:32:26,190 --> 00:32:31,679
mitigation and contributed it back to

00:32:27,809 --> 00:32:36,000
LLVM and it's been in master or I think

00:32:31,679 --> 00:32:39,630
since last week and we hope we can

00:32:36,000 --> 00:32:44,000
enable it in rust in in the following

00:32:39,630 --> 00:32:44,000
months as well so super happy about that

00:32:44,690 --> 00:32:50,880
then we have an also the humans

00:32:48,630 --> 00:32:52,620
challenge we we can call it like that

00:32:50,880 --> 00:32:55,710
and this is probably the most

00:32:52,620 --> 00:32:58,860
interesting to me that I used to deal

00:32:55,710 --> 00:33:04,710
with machines but not really with with

00:32:58,860 --> 00:33:06,540
people this is a first period you have

00:33:04,710 --> 00:33:08,970
is convincing people of using a new

00:33:06,540 --> 00:33:11,940
technology and fortunately for us and

00:33:08,970 --> 00:33:15,810
rot is a very adoptable technology and

00:33:11,940 --> 00:33:18,060
but when you try to tell someone hey

00:33:15,810 --> 00:33:19,440
maybe we should use rust and because

00:33:18,060 --> 00:33:20,230
it's memory safe the first thing that

00:33:19,440 --> 00:33:22,780
they think

00:33:20,230 --> 00:33:27,130
is okay we already have seizure for that

00:33:22,780 --> 00:33:28,750
why why are you suggesting this and then

00:33:27,130 --> 00:33:31,360
you have to start explaining that Roth

00:33:28,750 --> 00:33:34,330
doesn't have a garbage collector and it

00:33:31,360 --> 00:33:38,410
doesn't have a runtime and it's more

00:33:34,330 --> 00:33:44,770
similar to C++ than than actually

00:33:38,410 --> 00:33:46,990
seizure and the last point is you have

00:33:44,770 --> 00:33:51,640
to be able to train people who might be

00:33:46,990 --> 00:33:55,450
used to writing C and C++ for 5 10 30 40

00:33:51,640 --> 00:33:58,450
years and be able to get it to show them

00:33:55,450 --> 00:34:01,360
how to write rest code that they might

00:33:58,450 --> 00:34:03,640
not be able or used to writing and the

00:34:01,360 --> 00:34:06,520
good news about this is that when before

00:34:03,640 --> 00:34:09,070
when we've introduced rust to seasoned

00:34:06,520 --> 00:34:12,790
C++ programmers they generally are able

00:34:09,070 --> 00:34:14,740
to get it rather quickly because it kind

00:34:12,790 --> 00:34:16,960
of just or malaises things that they

00:34:14,740 --> 00:34:18,550
already have in their head when people

00:34:16,960 --> 00:34:21,220
are coming from other backgrounds it

00:34:18,550 --> 00:34:23,310
might be a little bit more difficult but

00:34:21,220 --> 00:34:25,659
while the learning curve is quite steep

00:34:23,310 --> 00:34:26,980
generally people get through it and once

00:34:25,659 --> 00:34:29,530
they're through that learning curve

00:34:26,980 --> 00:34:32,139
they're quite productive which is which

00:34:29,530 --> 00:34:33,850
is really nice to see but we've been

00:34:32,139 --> 00:34:35,350
talking for a while now about the

00:34:33,850 --> 00:34:38,050
challenges that we're facing as a

00:34:35,350 --> 00:34:39,970
company and okay that's great we're

00:34:38,050 --> 00:34:42,190
going to face these challenges but there

00:34:39,970 --> 00:34:45,310
are also challenges that we as an entire

00:34:42,190 --> 00:34:50,290
Russ community also have to face when

00:34:45,310 --> 00:34:51,970
Russ becomes more and more adopted and

00:34:50,290 --> 00:34:55,990
one of the first things to talk about is

00:34:51,970 --> 00:34:59,619
the idea of governance really we want to

00:34:55,990 --> 00:35:01,750
as a community ensure that rust is owned

00:34:59,619 --> 00:35:03,910
by the community and not by any one

00:35:01,750 --> 00:35:07,480
particular entity and as more and more

00:35:03,910 --> 00:35:09,640
companies come in and want to use rust

00:35:07,480 --> 00:35:11,800
there's always the temptation to start

00:35:09,640 --> 00:35:14,170
taking control and that's something that

00:35:11,800 --> 00:35:17,590
we do not want we want to ensure that

00:35:14,170 --> 00:35:19,390
that rust stays in as a community owned

00:35:17,590 --> 00:35:21,520
project and directed by the community

00:35:19,390 --> 00:35:23,440
because frankly it's gotten here because

00:35:21,520 --> 00:35:25,000
of the community and the community is

00:35:23,440 --> 00:35:29,950
the best one that we'll be able to take

00:35:25,000 --> 00:35:31,810
it forward from here on out and really

00:35:29,950 --> 00:35:34,180
what this means is that we want to take

00:35:31,810 --> 00:35:36,460
the community principles that

00:35:34,180 --> 00:35:39,819
we as a Russ community have established

00:35:36,460 --> 00:35:43,210
over time and really established them in

00:35:39,819 --> 00:35:45,339
more or less a formal way and of course

00:35:43,210 --> 00:35:47,799
there's great work going on already from

00:35:45,339 --> 00:35:49,059
the governments working group and a lot

00:35:47,799 --> 00:35:52,960
of talk happening in many directions

00:35:49,059 --> 00:35:58,329
around this and we're really excited to

00:35:52,960 --> 00:36:00,130
see this go even further and with that

00:35:58,329 --> 00:36:01,930
over time Russ will continue to change

00:36:00,130 --> 00:36:04,329
we just had a sink weight come out

00:36:01,930 --> 00:36:07,180
yesterday which is really exciting the

00:36:04,329 --> 00:36:09,880
language that as it looks today although

00:36:07,180 --> 00:36:14,170
it's still compiles looks different than

00:36:09,880 --> 00:36:18,640
it did and and 1.0 and the language will

00:36:14,170 --> 00:36:20,589
continue to change over time but we want

00:36:18,640 --> 00:36:23,799
these changes to continue to benefit the

00:36:20,589 --> 00:36:27,130
majority of people we've already shown

00:36:23,799 --> 00:36:31,569
that we have some rather interesting and

00:36:27,130 --> 00:36:33,490
perhaps esoteric needs that maybe the

00:36:31,569 --> 00:36:36,609
most people in this room won't ever need

00:36:33,490 --> 00:36:38,440
in their language and I'm sure that

00:36:36,609 --> 00:36:40,240
we'll be introducing or helping to

00:36:38,440 --> 00:36:43,180
introduce some changes to the language

00:36:40,240 --> 00:36:45,789
that make the job of creating Russ

00:36:43,180 --> 00:36:48,700
software at Microsoft easier but we want

00:36:45,789 --> 00:36:50,770
these changes to at the very least not

00:36:48,700 --> 00:36:54,309
disturb anybody else who doesn't need

00:36:50,770 --> 00:36:55,960
them and at the at best make sure that

00:36:54,309 --> 00:36:58,779
they are actually helpful for everybody

00:36:55,960 --> 00:37:02,200
else and so this is extremely important

00:36:58,779 --> 00:37:04,869
and going back to the idea of community

00:37:02,200 --> 00:37:07,720
we want this design to be again

00:37:04,869 --> 00:37:09,430
community driven so just like the RFC

00:37:07,720 --> 00:37:12,130
process has happened in the past with

00:37:09,430 --> 00:37:14,980
input from everybody in the community if

00:37:12,130 --> 00:37:17,230
they're able and willing to give it we

00:37:14,980 --> 00:37:19,630
don't want some backroom community

00:37:17,230 --> 00:37:21,339
design happening and then hope there's

00:37:19,630 --> 00:37:24,160
changes to the language all of a sudden

00:37:21,339 --> 00:37:28,029
we want these changes to be driven by

00:37:24,160 --> 00:37:29,619
the community as a whole and the last

00:37:28,029 --> 00:37:33,029
point that we want to talk about is this

00:37:29,619 --> 00:37:35,200
idea of reluctant Russ stations

00:37:33,029 --> 00:37:40,690
presumably everybody in this room is

00:37:35,200 --> 00:37:43,180
here voluntarily at least I hope so but

00:37:40,690 --> 00:37:45,849
in the future that might not be the case

00:37:43,180 --> 00:37:48,060
I started writing Russ because I wanted

00:37:45,849 --> 00:37:50,460
to not because I had to

00:37:48,060 --> 00:37:52,620
but in the future there probably will be

00:37:50,460 --> 00:37:55,950
people who have to write rust and they

00:37:52,620 --> 00:37:58,170
may not want to what does that do to our

00:37:55,950 --> 00:38:00,150
community as we introduce more people

00:37:58,170 --> 00:38:04,560
into it who are kind of reluctantly

00:38:00,150 --> 00:38:06,780
there and the real challenge with this

00:38:04,560 --> 00:38:09,300
is maintaining what I like to call the

00:38:06,780 --> 00:38:11,520
community spirit or the thing that we

00:38:09,300 --> 00:38:14,370
already collectively have as a community

00:38:11,520 --> 00:38:15,810
the thing that in my opinion makes rust

00:38:14,370 --> 00:38:18,390
awesome

00:38:15,810 --> 00:38:20,280
how do we continue to have that as more

00:38:18,390 --> 00:38:22,800
and more people who are not necessarily

00:38:20,280 --> 00:38:27,630
there by choice interact with us and

00:38:22,800 --> 00:38:29,760
come into our community okay so we're at

00:38:27,630 --> 00:38:31,800
the end now and this is really where we

00:38:29,760 --> 00:38:34,590
asked you to come talk with us

00:38:31,800 --> 00:38:36,180
come engage with us even if you work for

00:38:34,590 --> 00:38:37,800
a small startup or you're just a

00:38:36,180 --> 00:38:39,600
hobbyist programmer maybe you're not a

00:38:37,800 --> 00:38:41,940
software programmer at all you just like

00:38:39,600 --> 00:38:43,650
to use rust in your free time I'm all

00:38:41,940 --> 00:38:45,240
the way to up to you're working at a

00:38:43,650 --> 00:38:47,220
huge company and have some of the

00:38:45,240 --> 00:38:50,100
similar problems that we have we'd love

00:38:47,220 --> 00:38:53,070
to talk with you hear from you work with

00:38:50,100 --> 00:38:55,130
you and really what we want to be as

00:38:53,070 --> 00:38:57,660
Microsoft is a part of this community

00:38:55,130 --> 00:39:00,810
we're not here to take over we're here

00:38:57,660 --> 00:39:04,700
to be a part of it and work with all of

00:39:00,810 --> 00:39:07,950
you so thank you very much

00:39:04,700 --> 00:39:07,950
[Applause]

00:39:10,400 --> 00:39:16,749

YouTube URL: https://www.youtube.com/watch?v=o01QmYVluSw


