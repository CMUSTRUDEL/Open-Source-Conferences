Title: RustFest Barcelona - Claudia Saxer: 66 hours of Rust
Publication date: 2019-11-27
Playlist: RustFest Barcelona 2019
Description: 
	Is it possible to learn Rust from Zero in just 66 hours? In this experience report I will tell you about the good, the bad and the ugly that I experienced on my journey through the universe of Rust from the perspective of a C# and TypeScript developer.

https://barcelona.rustfest.eu/sessions/66-hours-of-rust
Captions: 
	00:00:12,429 --> 00:00:14,190
CLAUDIA: So hi, everyone.

00:00:14,190 --> 00:00:18,810
I'm thrilled to be here and a bit nervous as well.

00:00:18,810 --> 00:00:22,750
So can you please switch the slide?

00:00:22,750 --> 00:00:23,750
Awesome.

00:00:23,750 --> 00:00:28,649
So I am going to talk about the good, the bad and the ugly of Rust I experienced in

00:00:28,649 --> 00:00:30,560
the last months learning Rust.

00:00:30,560 --> 00:00:33,610
Does anyone actually know the movie?

00:00:33,610 --> 00:00:35,050
Hands up.

00:00:35,050 --> 00:00:36,480
Oh, awesome.

00:00:36,480 --> 00:00:41,600
Nice, a lot of people.

00:00:41,600 --> 00:00:43,080
So who am I?

00:00:43,080 --> 00:00:51,970
My name is Claudia, I'm a software engineer working with C# in Switzerland in a big engineering

00:00:51,970 --> 00:00:58,710
company, so why did I learn Rust?

00:00:58,710 --> 00:01:02,610
How come I learned Rust at all?

00:01:02,610 --> 00:01:04,210
It's kind of a funny story.

00:01:04,210 --> 00:01:12,020
A friend of mine asked me to write a proposal for the RustFest and I don't know any Rust

00:01:12,020 --> 00:01:13,810
at all.

00:01:13,810 --> 00:01:21,600
Never - actually, I heard about Rust just doing my studying, like five years ago, hearing

00:01:21,600 --> 00:01:28,140
about the memory safety of Rust but nothing more and not really looking into it.

00:01:28,140 --> 00:01:34,010
Also in the C# world you actually hear about Rust with WebAssembly.

00:01:34,010 --> 00:01:43,119
C# and WebAssembly are getting a thing and a lot of examples actually with Rust.

00:01:43,119 --> 00:01:51,369
So I thought to myself: it would be fun to talk at the RustFest and writing a proposal.

00:01:51,369 --> 00:01:58,689
Not a lot of pressure at all, but I mean they are not going to take me anyway, so let's

00:01:58,689 --> 00:02:00,820
just try it.

00:02:00,820 --> 00:02:03,960
And they did!

00:02:03,960 --> 00:02:09,340
So I felt like this guy, Angel Eyes from the movie.

00:02:09,340 --> 00:02:15,530
You know, the pity is, when I'm paid, I always follow my job through.

00:02:15,530 --> 00:02:23,079
So that was a month ago and I started to learn Rust.

00:02:23,079 --> 00:02:28,499
So I'm going to talk about my journey, The Good, The Bad and The Ugly.

00:02:28,499 --> 00:02:33,049
Here you can see some kind of motivational chart.

00:02:33,049 --> 00:02:38,769
In the beginning it's awesome, like I can learn a new language.

00:02:38,769 --> 00:02:40,659
I can learn Rust.

00:02:40,659 --> 00:02:42,420
So it's a really great time.

00:02:42,420 --> 00:02:45,609
Then you can see the first bump.

00:02:45,609 --> 00:02:47,019
That was an experience with tooling.

00:02:47,019 --> 00:02:50,279
I am going to tell you about it.

00:02:50,279 --> 00:03:05,830
The second bump here is WebAssembly and the last one where I hit rock bottom was JavaScript.

00:03:05,830 --> 00:03:14,549
So that's how it started, like Clint Eastwood said: the way back to town is only 70 miles.

00:03:14,549 --> 00:03:20,699
So if you save your breath I think a man like you can manage it.

00:03:20,699 --> 00:03:23,239
Adios.

00:03:23,239 --> 00:03:29,840
So Clint Eastwood, the handsome guy here, is the good guy in the movie and that was

00:03:29,840 --> 00:03:32,699
like Rust for me as well.

00:03:32,699 --> 00:03:38,829
I started learning Rust with the Rust link page and some YouTube tutorials just to get

00:03:38,829 --> 00:03:45,129
to know the types and the differences with C# as well.

00:03:45,129 --> 00:03:53,459
Some parts that I really enjoyed, I found it really easy to read Rust itself.

00:03:53,459 --> 00:04:00,989
If you know some programming languages, you can look at it and you can somehow read it.

00:04:00,989 --> 00:04:08,909
I haven't looked at all the macros yet so I heard some rumours there.

00:04:08,909 --> 00:04:16,549
Traits and structs is something I really enjoyed because I come from the object oriented world,

00:04:16,549 --> 00:04:23,430
so I could use a lot of the same series there.

00:04:23,430 --> 00:04:30,091
Also the syntax, you know the dot dot you can use, I really enjoy that syntax.

00:04:30,091 --> 00:04:39,590
C# I think brought that at the last update with the array index and I was happy to see

00:04:39,590 --> 00:04:42,620
TO.

00:04:42,620 --> 00:04:48,270
I think my favourite part of the language was the loop statement.

00:04:48,270 --> 00:04:55,169
So this is the first language ever that I saw you actually have a statement for loop

00:04:55,169 --> 00:05:02,360
and you don't have to write "while true" and it just saved some time and that anyone thought

00:05:02,360 --> 00:05:09,770
about it and did it, I think that's really awesome.

00:05:09,770 --> 00:05:18,130
So stuff that I found a bit weird was the snake_case.

00:05:18,130 --> 00:05:20,280
I am used to camel case and Pascal case.

00:05:20,280 --> 00:05:23,680
I will get used to it.

00:05:23,680 --> 00:05:34,750
And then the return statement, but at the first examples I just thought it was like

00:05:34,750 --> 00:05:42,360
any other language, and then I saw you can actually just write one and it does the same.

00:05:42,360 --> 00:05:49,560
It returns one so I was asking myself: why does Rust have that?

00:05:49,560 --> 00:05:51,340
Why does it do it?

00:05:51,340 --> 00:05:53,139
And I was confused at the start.

00:05:53,139 --> 00:06:03,759
Now I know actually that it just returns the last statement every time, and I like it.

00:06:03,759 --> 00:06:07,520
It's nice.

00:06:07,520 --> 00:06:14,639
Then the ownership and the powering, it's a new concept for me.

00:06:14,639 --> 00:06:18,270
So I somehow found it hard.

00:06:18,270 --> 00:06:23,979
It's a very steep learning curve but it's I think one of the most important parts of

00:06:23,979 --> 00:06:27,819
Rust because of the memory safety.

00:06:27,819 --> 00:06:34,409
But I still have a lot to learn here.

00:06:34,409 --> 00:06:36,569
So the tooling.

00:06:36,569 --> 00:06:44,190
Here you can see Lee Van Cleef, the bad guy, but not everything is bad, like with Lee Van

00:06:44,190 --> 00:06:49,639
Cleef as well, so I will start with the parts I enjoyed.

00:06:49,639 --> 00:06:53,189
For me that tooling is like a friend.

00:06:53,189 --> 00:06:54,490
So I will sleep better.

00:06:54,490 --> 00:06:58,090
My good friend is by my side to protect me.

00:06:58,090 --> 00:07:01,040
I used Visual Studio code.

00:07:01,040 --> 00:07:04,900
As you can see from the icon, it's IDE.

00:07:04,900 --> 00:07:11,689
Also something to mention, I work with Windows and not with Linux, so I think the Visual

00:07:11,689 --> 00:07:21,449
Studio code is one of the age preferred IDEs to use if you work with Rust and I used cargo

00:07:21,449 --> 00:07:31,919
as a package manager and also after some time I realised: how do I format my code?

00:07:31,919 --> 00:07:39,889
I am going to have some possibility to format, so I installed rustformat and I was confused

00:07:39,889 --> 00:07:44,740
that it doesn't come with RLS.

00:07:44,740 --> 00:07:55,440
So another part of the tooling are the error messages from the compiler, so everyone I

00:07:55,440 --> 00:08:05,210
talked with about, the compiler messages from Rust, my expectations were up there about

00:08:05,210 --> 00:08:11,949
seeing the error messages, and then I happened to encounter this.

00:08:11,949 --> 00:08:19,800
So as you can see the message is not on the correct line.

00:08:19,800 --> 00:08:22,210
It's on the start of my implementation.

00:08:22,210 --> 00:08:28,850
And also the expected and found wasn't that much helping.

00:08:28,850 --> 00:08:33,740
That was a bit of a letdown, maybe because my expectations were so high.

00:08:33,740 --> 00:08:39,469
But most of the time they were very helpful.

00:08:39,469 --> 00:08:43,680
So what was the bad part of my experience of the tooling?

00:08:43,680 --> 00:08:48,480
You remember from my motivational chart, the first bump?

00:08:48,480 --> 00:08:50,060
It was here.

00:08:50,060 --> 00:08:57,810
So, "God's not on our side because he hates idiots also", and the idiot was me.

00:08:57,810 --> 00:09:00,860
I don't know if you recognise the icon.

00:09:00,860 --> 00:09:03,360
It's Visual Studio.

00:09:03,360 --> 00:09:09,870
So I set out my tooling with Visual Studio code and it worked perfectly fine, and I was

00:09:09,870 --> 00:09:15,440
like: why shouldn't it work with Visual Studio as well?

00:09:15,440 --> 00:09:17,690
Let's try it.

00:09:17,690 --> 00:09:24,820
So some guy actually wrote an extension for Visual Studio to work across some years ago

00:09:24,820 --> 00:09:31,140
for an old Visual Studio version, and I tried it out.

00:09:31,140 --> 00:09:37,730
So I installed it and started Visual Studio and it didn't work.

00:09:37,730 --> 00:09:42,380
I Googled and some guys found: hey, let's deinstall the RLS.

00:09:42,380 --> 00:09:45,131
If you start Visual Studio, it will prompt you to install it.

00:09:45,131 --> 00:09:49,540
It didn't.

00:09:49,540 --> 00:09:55,690
So that was like the low point and I said to myself: yes, it won't work.

00:09:55,690 --> 00:10:01,350
I'm kind of an idiot trying it out with an earlier Visual Studio.

00:10:01,350 --> 00:10:11,199
So it was 2019 and I used '17, and I used 2019, so then I got back to Visual Studio

00:10:11,199 --> 00:10:14,950
code and everything was working.

00:10:14,950 --> 00:10:24,149
I had to install RLS and install it all again but in the end it worked and I'm happy with

00:10:24,149 --> 00:10:26,410
Visual Studio.

00:10:26,410 --> 00:10:32,250
Don't try it.

00:10:32,250 --> 00:10:34,120
So then I began my journey.

00:10:34,120 --> 00:10:42,649
I looked at the language, the types, structs and traits and wanted to start a new project

00:10:42,649 --> 00:10:45,589
with WebAssembly.

00:10:45,589 --> 00:10:53,509
So I saw this awesome GitHub page for Rust and WebAssembly with a tutorial called Game

00:10:53,509 --> 00:11:01,440
of Life, which I followed like for the first quarter.

00:11:01,440 --> 00:11:10,110
I used wasm-pack to generate my WebAssembly package from Rust, which is really awesome.

00:11:10,110 --> 00:11:18,560
It reloads your web page if you change your code and run wasm-pack and it worked great,

00:11:18,560 --> 00:11:23,000
and very fast as well.

00:11:23,000 --> 00:11:32,670
Then the favourite part of my Rust experience, the console error panic codes, it's just two

00:11:32,670 --> 00:11:42,720
lines and it tests an error panic hook so it can see errors directly in the web page

00:11:42,720 --> 00:11:51,350
console so if anything fails you can actually see a message: it failed on this line.

00:11:51,350 --> 00:11:54,889
A really good error message.

00:11:54,889 --> 00:12:00,190
That was like the first time I was really happy to see an error message.

00:12:00,190 --> 00:12:09,230
Also, I talked with some friends who used C# and WebAssembly and they don't have it.

00:12:09,230 --> 00:12:13,420
So if anything fails, they just see nothing.

00:12:13,420 --> 00:12:18,330
The debugging with WebAssembly isn't that great yet.

00:12:18,330 --> 00:12:23,720
They are going to improve it, but it's quite awful.

00:12:23,720 --> 00:12:27,800
So those things, a life saver.

00:12:27,800 --> 00:12:32,480
So the frontend.

00:12:32,480 --> 00:12:39,589
My two last hiccups are here.

00:12:39,589 --> 00:12:45,320
You can see here the Ugly guy from the movie.

00:12:45,320 --> 00:12:51,529
For me, my experience like with WebAssembly was: who the hell is that?

00:12:51,529 --> 00:12:56,040
One bastard goes in and another one comes out.

00:12:56,040 --> 00:13:02,260
I started to use multi-threading with WebAssembly and Rust.

00:13:02,260 --> 00:13:10,910
I tried it on a normal Rust application to run in the console and it worked fine.

00:13:10,910 --> 00:13:19,630
It was fairly easy, I would say, and then I used it in my WebAssembly project and it

00:13:19,630 --> 00:13:22,920
said: awesome, we build it, smiley face.

00:13:22,920 --> 00:13:24,740
Everything is great.

00:13:24,740 --> 00:13:30,600
Then I looked at my web page, refreshed it and there was this error message.

00:13:30,600 --> 00:13:36,660
It cannot actually find multi-threading because it's not actually packed to the WebAssembly

00:13:36,660 --> 00:13:37,660
package.

00:13:37,660 --> 00:13:40,800
It cannot find the module.

00:13:40,800 --> 00:13:43,130
So that didn't work.

00:13:43,130 --> 00:13:52,329
Then I had to use for my little project like the system called time.

00:13:52,329 --> 00:13:54,930
I thought that has to work.

00:13:54,930 --> 00:13:59,670
So I called the time from Rust, packed it.

00:13:59,670 --> 00:14:05,480
Everything was built perfectly with wasm-pack, and then it failed again.

00:14:05,480 --> 00:14:10,150
It also hasn't yet [inaudible].

00:14:10,150 --> 00:14:19,339
So these nice things with Rust that I just can't use with WebAssembly - one after another.

00:14:19,339 --> 00:14:26,160
So how can you still use the time that is obviously needed?

00:14:26,160 --> 00:14:30,050
You can actually define it in JavaScript.

00:14:30,050 --> 00:14:33,790
You can see here on the bottom.

00:14:33,790 --> 00:14:38,720
Just have a function like get current time in milliseconds.

00:14:38,720 --> 00:14:49,660
Then in the Rust part you can say: hey, in that JavaScript file this method exists, and

00:14:49,660 --> 00:14:54,029
then just call it in Rust like any other function.

00:14:54,029 --> 00:15:04,380
Beside this call and the manipulation, that's the only thing I had too it with JavaScript,

00:15:04,380 --> 00:15:05,660
which I really enjoyed.

00:15:05,660 --> 00:15:15,420
All the other functionality I could write in Rust and then call it from JavaScript.

00:15:15,420 --> 00:15:19,700
So that's like the first draft of my application.

00:15:19,700 --> 00:15:22,940
It worked but it wasn't pretty.

00:15:22,940 --> 00:15:27,130
I wanted to make it nice as well.

00:15:27,130 --> 00:15:34,560
So I had at the moment one huge Rust file, with all my functionality in it and I wanted

00:15:34,560 --> 00:15:44,420
to split it up, like have a folder universe with my whole universe from the application

00:15:44,420 --> 00:15:53,750
and the library and structs and traits, so I had to use mod and use and crate to split

00:15:53,750 --> 00:15:58,650
up my modules.

00:15:58,650 --> 00:15:59,889
That was quite hard.

00:15:59,889 --> 00:16:04,649
It was harder than I expected.

00:16:04,649 --> 00:16:12,790
Also I looked on Stack Overflow to see some examples of how it could be done.

00:16:12,790 --> 00:16:14,149
It didn't work.

00:16:14,149 --> 00:16:21,439
Later on I heard that in 2018 it actually changed, so there are still a lot of examples

00:16:21,439 --> 00:16:30,020
that will not work, so I used more hours than I wanted to say to make this happen.

00:16:30,020 --> 00:16:39,949
Then, as I said, I used structs and traits which I really enjoyed to have the inheritance

00:16:39,949 --> 00:16:41,250
that I'm used to.

00:16:41,250 --> 00:16:50,630
Also, I used a lot of generics, just to make it possible to have a functionality just written

00:16:50,630 --> 00:16:52,160
once.

00:16:52,160 --> 00:17:00,320
That was something I missed, something like nested structs.

00:17:00,320 --> 00:17:08,600
I wanted to make inherent runs struct into another, like you see in the example on the

00:17:08,600 --> 00:17:09,600
right.

00:17:09,600 --> 00:17:15,699
I hope to find something like that.

00:17:15,699 --> 00:17:20,720
But there's nothing possible to do it this way.

00:17:20,720 --> 00:17:25,940
Maybe it has something to do with the ownership that Rust isn't able to do it.

00:17:25,940 --> 00:17:27,080
I don't know.

00:17:27,080 --> 00:17:32,230
So I did it as you can see on the left example.

00:17:32,230 --> 00:17:44,460
I just have a struct, I call it here Part, that my other two structs use the fields from.

00:17:44,460 --> 00:17:48,700
Like count is used in Apartments and Roads.

00:17:48,700 --> 00:17:55,080
But I wanted to have it flat.

00:17:55,080 --> 00:18:03,150
But still in the end I could accomplish what I wanted.

00:18:03,150 --> 00:18:08,010
So then this happened.

00:18:08,010 --> 00:18:10,830
You remember my emotional chart?

00:18:10,830 --> 00:18:15,210
The last point, where I really hit rock bottom with the JavaScript?

00:18:15,210 --> 00:18:18,180
That was this.

00:18:18,180 --> 00:18:26,550
I was like suddenly seeing a lot of red lines, like: I'm your friend, please don't die, please

00:18:26,550 --> 00:18:27,730
don't die.

00:18:27,730 --> 00:18:29,780
And it did.

00:18:29,780 --> 00:18:32,410
So what happened?

00:18:32,410 --> 00:18:36,240
It couldn't find my WebAssembly module.

00:18:36,240 --> 00:18:49,550
It's like the one called city_inc_next and I tried to clean it, to do everything possible

00:18:49,550 --> 00:18:58,150
that I knew about, but I couldn't make it work again so I used git through my little

00:18:58,150 --> 00:19:05,460
project and just thought: let's just go back and see if it works there and what did I change

00:19:05,460 --> 00:19:09,770
to break it actually.

00:19:09,770 --> 00:19:12,580
Then I realised this one.

00:19:12,580 --> 00:19:20,090
When I started my WebAssembly project I used this comment to have wasm-pack-template which

00:19:20,090 --> 00:19:21,430
was pretty neat.

00:19:21,430 --> 00:19:31,130
It had a lot of things in it before but what it actually does, it clones this template

00:19:31,130 --> 00:19:40,960
into your www folder so now you have a git repository in there, and if you do not delete

00:19:40,960 --> 00:19:50,320
that .git folder, that git directory, and you just work on your route and naively just

00:19:50,320 --> 00:19:55,330
write git add all, git commit, and don't look at the files, you will not really realised

00:19:55,330 --> 00:20:03,490
that you haven't committed anything from your JavaScript part, so I had no history at all.

00:20:03,490 --> 00:20:07,310
I didn't know what went wrong.

00:20:07,310 --> 00:20:10,550
So I had to start again.

00:20:10,550 --> 00:20:18,770
I created a new project and copied one file after another to see where did I fail, what

00:20:18,770 --> 00:20:26,600
did I do wrong, and I actually copied everything and it worked.

00:20:26,600 --> 00:20:32,630
So if anyone knows what could happen here and what went wrong, or anyone had the same

00:20:32,630 --> 00:20:40,160
problem, please come afterwards to me and tell me what I did wrong.

00:20:40,160 --> 00:20:47,440
And delete the git directory.

00:20:47,440 --> 00:20:50,970
So that's almost to the end.

00:20:50,970 --> 00:20:54,960
What were my key takeaways?

00:20:54,960 --> 00:20:57,930
I actually do recommend Rust.

00:20:57,930 --> 00:21:04,350
I love to - like, the whole language part of Rust, I really loved it, and I prefer it

00:21:04,350 --> 00:21:08,440
to C++, like way a lot.

00:21:08,440 --> 00:21:18,160
I do want to learn more, learn more about the whole memory concept, the ownership and

00:21:18,160 --> 00:21:25,580
the borrowing, and I do think it's quite a steep learning curve.

00:21:25,580 --> 00:21:33,010
A month, 66 hours, I don't think it's enough.

00:21:33,010 --> 00:21:39,490
I can now write some code in Rust, but I wouldn't say I'm like a Rust programmer.

00:21:39,490 --> 00:21:40,570
Yes.

00:21:40,570 --> 00:21:42,730
Thank you.

00:21:42,730 --> 00:22:07,270
[Applause] I think we have time for questions.

00:22:07,270 --> 00:22:11,400
>> I'm going myself through a learning process.

00:22:11,400 --> 00:22:13,000
Here.

00:22:13,000 --> 00:22:18,730
Recently I have hit some points where the documentation was either confusing or could

00:22:18,730 --> 00:22:24,990
have been better, and in some places I just got stuck because I couldn't go any further,

00:22:24,990 --> 00:22:33,260
so what was in your case one or two places where the documentation and maybe something

00:22:33,260 --> 00:22:38,860
that could have been done better to get you over the hump of understanding some concept

00:22:38,860 --> 00:22:42,450
or issue, maybe some error or something?

00:22:42,450 --> 00:22:53,210
CLAUDIA: Hmm, I think more examples, just more coding examples, not just a hello world

00:22:53,210 --> 00:23:00,260
would help.

00:23:00,260 --> 00:23:01,810
Also in the Stack Overflow.

00:23:01,810 --> 00:23:06,600
Maybe some people can write a version for us.

00:23:06,600 --> 00:23:10,380
>> Just as an addition, you said you didn't look into macros.

00:23:10,380 --> 00:23:15,740
That was something that I hit recently, and just as a comment, if somebody is going to

00:23:15,740 --> 00:23:22,030
do this, give an example of a macro which doesn't have a variable number of parameters.

00:23:22,030 --> 00:23:24,730
That would be very good.

00:23:24,730 --> 00:23:28,570
CLAUDIA: [Laughing].

00:23:28,570 --> 00:23:29,960
>> Any other questions?

00:23:29,960 --> 00:23:31,090
Not?

00:23:31,090 --> 00:23:34,500
Okay, thanks, Claudia.

00:23:34,500 --> 00:23:36,990
CLAUDIA: Thank you very much.

00:23:36,990 --> 00:23:37,100

YouTube URL: https://www.youtube.com/watch?v=WeoND15c-RE


