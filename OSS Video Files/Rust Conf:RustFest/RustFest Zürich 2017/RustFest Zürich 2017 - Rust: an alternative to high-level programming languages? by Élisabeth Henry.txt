Title: RustFest Zürich 2017 - Rust: an alternative to high-level programming languages? by Élisabeth Henry
Publication date: 2017-10-21
Playlist: RustFest Zürich 2017
Description: 
	Rust is a systems programming language that runs blazingly fast. But what’s its place for writing applications that don’t particularly need to delve into systems programming, and only need to be “not too slow”? Can it be appealing to programmers who would rather not have to deal with memory management and don’t care about the performance cost?

Can Rust’s type safety and the guarantees it brings allow a high-level programmer to be more confident, empowering them to more easily build and maintain complex applications? Or is Rust’s complexity too much of a barrier for that?

About Élisabeth Henry:
I used to work as a programmer, but I eventually gave up because I couldn’t find a job, and ended I trying to make a living selling fantasy novels. Maybe this last fact shows that I’m not a great programmer (though there might be other factors in play). I love Rust because it makes me feel more confident about the code I write, and the strict compiler compensates for my lack of discipline.
Captions: 
	00:00:11,880 --> 00:00:22,410
okay so I'm Liz and I'm mainly I'm going

00:00:17,700 --> 00:00:26,360
to talk about the usage of rest for high

00:00:22,410 --> 00:00:31,830
level applications so first a bit of

00:00:26,360 --> 00:00:36,920
background on myself so I Lisa Bev only

00:00:31,830 --> 00:00:39,510
okay Lizzy could I get my name because I

00:00:36,920 --> 00:00:42,809
love the computer science background and

00:00:39,510 --> 00:00:45,360
I have a degree but for a few years I

00:00:42,809 --> 00:00:49,129
haven't been actually working in

00:00:45,360 --> 00:00:51,870
computer science and currently I am a

00:00:49,129 --> 00:00:54,360
semi-professional fantasy writer so I

00:00:51,870 --> 00:00:57,659
wet novels in French you might have just

00:00:54,360 --> 00:01:00,930
for my accent and I try to make some

00:00:57,659 --> 00:01:05,040
money from them and when I discovered

00:01:00,930 --> 00:01:08,549
rest I was like this is a really cool

00:01:05,040 --> 00:01:10,710
language I was quite excited by it but I

00:01:08,549 --> 00:01:14,820
did not have any project for like system

00:01:10,710 --> 00:01:16,890
sisters programming and instead I well I

00:01:14,820 --> 00:01:20,640
wanted to mix to do something that was

00:01:16,890 --> 00:01:23,130
useful for me and in my case it I ended

00:01:20,640 --> 00:01:26,750
up quite through implementing the wheel

00:01:23,130 --> 00:01:30,450
once again with yet another markdown to

00:01:26,750 --> 00:01:32,789
PDF HTML and epub converter called

00:01:30,450 --> 00:01:35,460
Chromebook and at the time I thought

00:01:32,789 --> 00:01:38,009
that it wasn't objectively a great idea

00:01:35,460 --> 00:01:39,570
to use verse for this under some high

00:01:38,009 --> 00:01:42,750
level language would have been better I

00:01:39,570 --> 00:01:44,850
mean it was obviously a good idea

00:01:42,750 --> 00:01:48,600
because I was not being paid to do it on

00:01:44,850 --> 00:01:50,219
it was fun so it was great but I felt

00:01:48,600 --> 00:01:52,710
like it would I would have been more

00:01:50,219 --> 00:01:56,310
productive using something like Python

00:01:52,710 --> 00:02:01,009
for example or Java or whatever and then

00:01:56,310 --> 00:02:04,140
you have quite revised my view now but

00:02:01,009 --> 00:02:06,600
yeah that's met me why I am going to

00:02:04,140 --> 00:02:09,780
talk about rest for Olivia applications

00:02:06,600 --> 00:02:14,069
just to be clear what I mean by I level

00:02:09,780 --> 00:02:17,220
I mean can be a many mean applications

00:02:14,069 --> 00:02:19,550
where performance is not really an issue

00:02:17,220 --> 00:02:22,790
so it can be commander interface

00:02:19,550 --> 00:02:24,880
graphical user interface games but

00:02:22,790 --> 00:02:28,780
probably not Firefox

00:02:24,880 --> 00:02:30,370
probably not like the latest embroider

00:02:28,780 --> 00:02:34,120
or anything because obviously

00:02:30,370 --> 00:02:36,370
performance are quite important memory

00:02:34,120 --> 00:02:38,440
safety typically that's not very an

00:02:36,370 --> 00:02:42,730
issue because you would use a garbage

00:02:38,440 --> 00:02:48,550
collection in a level language you would

00:02:42,730 --> 00:02:53,260
typically use 11 language Java C sharp

00:02:48,550 --> 00:02:55,420
Python Ruby or whatever and security

00:02:53,260 --> 00:02:57,460
isn't really an issue either because

00:02:55,420 --> 00:03:00,310
most of the time is an application that

00:02:57,460 --> 00:03:03,220
will be worse when an user a personal

00:03:00,310 --> 00:03:04,690
computer so if I can AG the application

00:03:03,220 --> 00:03:07,930
to get access to that computer that's

00:03:04,690 --> 00:03:09,520
not really a big problem so we're not

00:03:07,930 --> 00:03:11,590
talking about web server for example

00:03:09,520 --> 00:03:14,850
well security and safety can be and

00:03:11,590 --> 00:03:18,010
performance to a much more of an issue

00:03:14,850 --> 00:03:21,880
and when you look at the pitch from rest

00:03:18,010 --> 00:03:26,050
at the presentation it doesn't quite fit

00:03:21,880 --> 00:03:29,620
the description and my first experience

00:03:26,050 --> 00:03:32,110
with rest was something like this and

00:03:29,620 --> 00:03:35,980
probably use was a bit similar I mean I

00:03:32,110 --> 00:03:38,910
guess most of people in this room so

00:03:35,980 --> 00:03:41,980
basically were at least once

00:03:38,910 --> 00:03:44,680
so before I want to talk about trust I

00:03:41,980 --> 00:03:47,860
just wanted to talk a bit about my

00:03:44,680 --> 00:03:51,730
experience with over language and yep

00:03:47,860 --> 00:03:54,970
yeah because rest in space well but yeah

00:03:51,730 --> 00:03:56,950
so my experience with over language and

00:03:54,970 --> 00:03:59,590
as a disclaimer I don't pretend to be a

00:03:56,950 --> 00:04:02,770
great programmer I can be read as a lazy

00:03:59,590 --> 00:04:05,440
yeah I'm not a great designer I don't

00:04:02,770 --> 00:04:08,110
come with like the cleanest ideas at

00:04:05,440 --> 00:04:10,600
first and I come sometimes pick

00:04:08,110 --> 00:04:12,880
chocolate you know I do something that

00:04:10,600 --> 00:04:15,520
work at this time I'd put some commands

00:04:12,880 --> 00:04:21,600
like fix me you know and I'll never fix

00:04:15,520 --> 00:04:25,450
it and yeah I have quite a bit of

00:04:21,600 --> 00:04:27,600
Abaddon projects because I have ideas

00:04:25,450 --> 00:04:31,050
and start while working on them I

00:04:27,600 --> 00:04:36,450
actually have scientific data for this

00:04:31,050 --> 00:04:38,820
so yeah usually I have a great cool idea

00:04:36,450 --> 00:04:40,200
when I start working code that's

00:04:38,820 --> 00:04:42,390
exciting

00:04:40,200 --> 00:04:43,650
I mean it's a bit complicated but it's

00:04:42,390 --> 00:04:49,200
exciting and funny

00:04:43,650 --> 00:04:53,400
it's what so that's really cool but then

00:04:49,200 --> 00:04:58,350
you know is very bad and once you

00:04:53,400 --> 00:05:02,430
painfully fixed the most persistent

00:04:58,350 --> 00:05:04,050
birds you want to add a new feature and

00:05:02,430 --> 00:05:05,730
this is typically at this point where

00:05:04,050 --> 00:05:09,600
I'll realize that adding a new feature

00:05:05,730 --> 00:05:13,350
like breaks everything in my over part

00:05:09,600 --> 00:05:15,780
of my project and at this point I'm like

00:05:13,350 --> 00:05:18,660
maybe I should just rewrite it from

00:05:15,780 --> 00:05:19,800
scratch but it's not very exciting to

00:05:18,660 --> 00:05:21,690
rewrite a project

00:05:19,800 --> 00:05:24,180
I mean Zack seemed to start a new

00:05:21,690 --> 00:05:27,060
project but to start a new project once

00:05:24,180 --> 00:05:31,800
you have already written it before it's

00:05:27,060 --> 00:05:34,770
a bit not very interesting so yeah I

00:05:31,800 --> 00:05:36,660
think mal problems with many language

00:05:34,770 --> 00:05:39,240
and many imperative programming language

00:05:36,660 --> 00:05:41,340
is I thought that make it very easy to

00:05:39,240 --> 00:05:47,060
start coding but that I saw made very

00:05:41,340 --> 00:05:50,520
easy to do things the wrong way and yeah

00:05:47,060 --> 00:05:54,630
you can often end up if you're not very

00:05:50,520 --> 00:05:56,520
structural like me I mean if you like me

00:05:54,630 --> 00:06:00,990
you're not very structure to be clear

00:05:56,520 --> 00:06:04,440
and you can end up with very complex

00:06:00,990 --> 00:06:06,720
code because you have some variables

00:06:04,440 --> 00:06:09,870
that can be modified like every one new

00:06:06,720 --> 00:06:14,700
card and it's very like spaghetti coding

00:06:09,870 --> 00:06:17,580
and the thing is most of tips I read

00:06:14,700 --> 00:06:19,440
from vices like avoid this like good

00:06:17,580 --> 00:06:21,720
programmers should not do that they

00:06:19,440 --> 00:06:24,540
should have a clear design but I don't

00:06:21,720 --> 00:06:28,110
find very it full because yeah I mean

00:06:24,540 --> 00:06:30,720
but if a language makes it really easier

00:06:28,110 --> 00:06:33,540
to you to you to do something the wrong

00:06:30,720 --> 00:06:37,760
way and to just either comment will fix

00:06:33,540 --> 00:06:41,400
me later don't find it very useful and

00:06:37,760 --> 00:06:43,980
also I think that a lot of approach from

00:06:41,400 --> 00:06:46,290
high level language is to add a lot of

00:06:43,980 --> 00:06:48,530
complexity so that's great because it

00:06:46,290 --> 00:06:52,070
makes learning a new language

00:06:48,530 --> 00:06:54,350
easier but for me when you have a

00:06:52,070 --> 00:06:58,430
project that start to grow a bit I think

00:06:54,350 --> 00:07:00,710
that it coming it doesn't really make

00:06:58,430 --> 00:07:05,420
things simpler this is a Python example

00:07:00,710 --> 00:07:09,080
so you have a list you assignment to a

00:07:05,420 --> 00:07:13,700
the new seller B equals a you want to

00:07:09,080 --> 00:07:16,280
modify B but then you realize that a has

00:07:13,700 --> 00:07:18,470
also been modified so at this point the

00:07:16,280 --> 00:07:21,110
language deciding from you all things

00:07:18,470 --> 00:07:22,640
like references and all memory works but

00:07:21,110 --> 00:07:24,230
you actually have to understand it at

00:07:22,640 --> 00:07:26,540
this point and you have to understand

00:07:24,230 --> 00:07:28,730
that for example the equal operator

00:07:26,540 --> 00:07:33,230
doesn't work quite the same way for

00:07:28,730 --> 00:07:36,650
integers than for lists and and it can

00:07:33,230 --> 00:07:40,610
lead to errors that can be quite hard to

00:07:36,650 --> 00:07:43,190
detect because yeah I mean you you

00:07:40,610 --> 00:07:44,750
thought you were modifying be you want

00:07:43,190 --> 00:07:48,530
modifying some variable you are actually

00:07:44,750 --> 00:07:51,080
modifying it but so yeah I think it's a

00:07:48,530 --> 00:07:53,480
bit most of language they'll do a wedge

00:07:51,080 --> 00:07:55,370
rod to I'd pain but in my experience

00:07:53,480 --> 00:07:57,140
sometimes adding pain is not a great

00:07:55,370 --> 00:08:01,760
idea to go back to the dentist's

00:07:57,140 --> 00:08:03,800
metaphor some months ago yes and to

00:08:01,760 --> 00:08:05,450
fetch I did not want to go to the

00:08:03,800 --> 00:08:08,600
dentist because it's painful it's not

00:08:05,450 --> 00:08:12,979
pleasant so I took painkillers and I

00:08:08,600 --> 00:08:16,460
went on with my life but when pain came

00:08:12,979 --> 00:08:18,229
back and it was in kilos went enough and

00:08:16,460 --> 00:08:21,380
I had to go to a dentist in an emergency

00:08:18,229 --> 00:08:23,540
and find a dentist in emergency and well

00:08:21,380 --> 00:08:27,110
it ended it ended up being far more

00:08:23,540 --> 00:08:29,270
painful and far more expensive but if I

00:08:27,110 --> 00:08:32,870
had went to dentist is a very first

00:08:29,270 --> 00:08:36,130
place and let's really make sure that

00:08:32,870 --> 00:08:38,690
you brush your teeth properly and

00:08:36,130 --> 00:08:41,089
because there are a lot of I mean I

00:08:38,690 --> 00:08:43,430
won't go into details about olive oil

00:08:41,089 --> 00:08:45,670
filters inverse were a lot of checks at

00:08:43,430 --> 00:08:49,640
compile time there's a great time system

00:08:45,670 --> 00:08:53,060
and more importantly I think is that

00:08:49,640 --> 00:08:55,970
libraries I mean it can be difficult

00:08:53,060 --> 00:08:59,300
sometimes to use a study tie system but

00:08:55,970 --> 00:09:01,400
libraries that can I think most of the

00:08:59,300 --> 00:09:04,240
work relies on

00:09:01,400 --> 00:09:09,010
really notice of equator toss of us

00:09:04,240 --> 00:09:13,130
because yeah it's a bit hard to make a

00:09:09,010 --> 00:09:16,460
library that is easy to use but for the

00:09:13,130 --> 00:09:18,980
user you produce you at this point but

00:09:16,460 --> 00:09:22,550
when compiled you're using it for White

00:09:18,980 --> 00:09:26,570
Way so yeah it can make things actually

00:09:22,550 --> 00:09:28,280
pretty nice for the application

00:09:26,570 --> 00:09:31,580
developer because you're using the

00:09:28,280 --> 00:09:35,960
library and ideally not writing a lot of

00:09:31,580 --> 00:09:39,170
them so in West my very scientific data

00:09:35,960 --> 00:09:41,480
was the stat was called the same because

00:09:39,170 --> 00:09:45,500
it was before I coded I had a cool idea

00:09:41,480 --> 00:09:48,110
and then of course very super exciting

00:09:45,500 --> 00:09:52,190
and it's not present and it can be

00:09:48,110 --> 00:09:56,270
difficult under yellow stars called hard

00:09:52,190 --> 00:09:58,130
curve at the beginning and then finally

00:09:56,270 --> 00:10:02,150
getting code to compile can be a bit

00:09:58,130 --> 00:10:06,440
longer than in an oval language but the

00:10:02,150 --> 00:10:09,350
good thing is when it compiles in my

00:10:06,440 --> 00:10:11,960
experience we're really if a few bugs in

00:10:09,350 --> 00:10:15,770
worse than most of our language I was

00:10:11,960 --> 00:10:17,810
used to so at this point visas are all

00:10:15,770 --> 00:10:20,810
great I mean I had a really hard time

00:10:17,810 --> 00:10:23,540
getting to compile but at this point is

00:10:20,810 --> 00:10:25,640
good and when you want to add a new

00:10:23,540 --> 00:10:28,670
feature the compiler would make sure

00:10:25,640 --> 00:10:33,430
that you won't break everything in your

00:10:28,670 --> 00:10:36,350
password and of course when you project

00:10:33,430 --> 00:10:39,560
was a bit I it's not a new project

00:10:36,350 --> 00:10:41,570
anymore it's matter present the thrill

00:10:39,560 --> 00:10:45,200
of starting something new but when you

00:10:41,570 --> 00:10:47,360
want to blower in my stance we first if

00:10:45,200 --> 00:10:52,730
when I want to go back to a project that

00:10:47,360 --> 00:10:54,320
I haven't touched in a few months in

00:10:52,730 --> 00:10:57,560
many languages could be quite difficult

00:10:54,320 --> 00:11:00,860
because either things make sense when I

00:10:57,560 --> 00:11:04,400
would then but now it's like some kind

00:11:00,860 --> 00:11:06,440
of mess and we first I'm like okay I

00:11:04,400 --> 00:11:09,630
can't quite understand things so it

00:11:06,440 --> 00:11:12,690
works on I'll so

00:11:09,630 --> 00:11:13,910
I found out that personally that les

00:11:12,690 --> 00:11:21,510
matine's

00:11:13,910 --> 00:11:23,520
yeah design a bit less confusing but the

00:11:21,510 --> 00:11:27,140
thing is I thought a bit about the type

00:11:23,520 --> 00:11:32,430
system and things like trade there are

00:11:27,140 --> 00:11:35,160
options which avoid null pointers for

00:11:32,430 --> 00:11:36,900
example but we're not very specific to

00:11:35,160 --> 00:11:39,710
rest I mean you could have this in over

00:11:36,900 --> 00:11:43,070
for example garbage collected language

00:11:39,710 --> 00:11:46,100
and what's very specific to us I think

00:11:43,070 --> 00:11:49,050
is the Bravo checker because it's I

00:11:46,100 --> 00:11:51,480
don't think it's something you see in a

00:11:49,050 --> 00:11:52,890
lot of foreign language maybe I think

00:11:51,480 --> 00:11:55,020
there are some research language but

00:11:52,890 --> 00:12:00,030
using something similar but it's not

00:11:55,020 --> 00:12:03,420
mainstream feature you see often and the

00:12:00,030 --> 00:12:04,470
board Chico is really designed to make

00:12:03,420 --> 00:12:08,970
sure that you don't have low overhead

00:12:04,470 --> 00:12:10,500
for systems programming so you don't

00:12:08,970 --> 00:12:12,960
have to have a garbage collection

00:12:10,500 --> 00:12:14,670
because it has a cost but for a level

00:12:12,960 --> 00:12:19,200
application you would think that you

00:12:14,670 --> 00:12:23,100
don't really need these performances so

00:12:19,200 --> 00:12:25,320
maybe you know it's um it's not value a

00:12:23,100 --> 00:12:26,730
feature interesting feature and it's

00:12:25,320 --> 00:12:30,630
more painful because you have to worry

00:12:26,730 --> 00:12:33,540
about the power checker and when I saw

00:12:30,630 --> 00:12:36,120
some discussions about using the rest

00:12:33,540 --> 00:12:38,730
for level applications sometimes I saw

00:12:36,120 --> 00:12:42,090
people asking like maybe we should just

00:12:38,730 --> 00:12:43,860
put our core F style of T everywhere so

00:12:42,090 --> 00:12:48,150
we don't have to worry to worry about

00:12:43,860 --> 00:12:51,210
the Barrois checker and some some people

00:12:48,150 --> 00:12:54,510
may say yeah but maybe I mean you can

00:12:51,210 --> 00:12:56,310
just say that rest is a I mean if for

00:12:54,510 --> 00:12:57,720
you rest is just okay male with a

00:12:56,310 --> 00:13:01,490
difference and types maybe you should

00:12:57,720 --> 00:13:05,010
just learn a canal and I think that

00:13:01,490 --> 00:13:08,790
actually it's a familiar this question

00:13:05,010 --> 00:13:11,010
that is raised like okay is to use for

00:13:08,790 --> 00:13:15,260
eye level application because it has a

00:13:11,010 --> 00:13:17,970
great type system and you know you can

00:13:15,260 --> 00:13:22,740
basically it's okay despite verbal

00:13:17,970 --> 00:13:25,080
checker or this actually is it maybe

00:13:22,740 --> 00:13:32,010
because of a bow chicka but it I found

00:13:25,080 --> 00:13:35,610
it actually more interesting and when I

00:13:32,010 --> 00:13:41,460
first learn last if something like chia

00:13:35,610 --> 00:13:45,600
soda not ten years ago obviously I saw

00:13:41,460 --> 00:13:48,660
this conference by an explosion while he

00:13:45,600 --> 00:13:50,580
explained what was the interests of the

00:13:48,660 --> 00:13:53,100
board checker and it quite convinced me

00:13:50,580 --> 00:13:56,550
that you have a protocol it's it can be

00:13:53,100 --> 00:14:01,890
a bit obscure sometimes but yeah it

00:13:56,550 --> 00:14:05,700
doesn't interest and basically it it it

00:14:01,890 --> 00:14:08,460
has it NGOs but you can't have both

00:14:05,700 --> 00:14:11,130
aliasing and mutation at the same time

00:14:08,460 --> 00:14:13,230
so you can either have surveyed

00:14:11,130 --> 00:14:16,320
reference or mutual value friends but

00:14:13,230 --> 00:14:20,540
not both of at the same time and this is

00:14:16,320 --> 00:14:22,890
what ensures memory safety and also

00:14:20,540 --> 00:14:26,970
guarantees some kind of read safety at

00:14:22,890 --> 00:14:29,040
least that I eat avoid data races like

00:14:26,970 --> 00:14:33,500
for free because it's basically the same

00:14:29,040 --> 00:14:37,170
conditions and I wonder maybe this like

00:14:33,500 --> 00:14:39,870
yeah I mean it's basically mixing

00:14:37,170 --> 00:14:43,740
virtual it's a bit root of all evil

00:14:39,870 --> 00:14:48,290
so maybe it's also the root of having

00:14:43,740 --> 00:14:51,180
some obscure card and maybe not mixing

00:14:48,290 --> 00:14:53,490
aliasing and mutation I saw max for

00:14:51,180 --> 00:15:00,630
adding a more readable code and code

00:14:53,490 --> 00:15:04,890
that is easier to reason about so this

00:15:00,630 --> 00:15:08,040
is an example for example in Python well

00:15:04,890 --> 00:15:09,870
typically you have a variable a you can

00:15:08,040 --> 00:15:13,470
display it you can display its value and

00:15:09,870 --> 00:15:16,770
you have some value but then you can you

00:15:13,470 --> 00:15:20,280
call some unrelated function or some

00:15:16,770 --> 00:15:24,810
method on an unrelated valuable and the

00:15:20,280 --> 00:15:27,000
way thing is that the value of a might

00:15:24,810 --> 00:15:30,300
have been modified because it could be

00:15:27,000 --> 00:15:32,100
analogous to some global variable or it

00:15:30,300 --> 00:15:34,050
could be an address to some other object

00:15:32,100 --> 00:15:36,150
but you don't realize you were actually

00:15:34,050 --> 00:15:38,670
modifying it

00:15:36,150 --> 00:15:40,650
so it can make things quite a prison and

00:15:38,670 --> 00:15:43,860
you basically have to know the details

00:15:40,650 --> 00:15:47,430
the details about every function or

00:15:43,860 --> 00:15:49,380
method you're calling and in the rest if

00:15:47,430 --> 00:15:53,010
you have the same code you can be pretty

00:15:49,380 --> 00:15:54,840
sure that the variable hasn't been

00:15:53,010 --> 00:15:57,240
modified because if you really want to

00:15:54,840 --> 00:16:01,790
modify it you have to make things a bit

00:15:57,240 --> 00:16:05,670
more explicit like if ever having to

00:16:01,790 --> 00:16:09,650
pass and pass on Newt parameter so it

00:16:05,670 --> 00:16:14,310
makes quite clear vacuum modifying it or

00:16:09,650 --> 00:16:16,320
even addressing you have to Roberto

00:16:14,310 --> 00:16:21,360
checker will make sure that you can't

00:16:16,320 --> 00:16:24,450
have in this case you have this brackets

00:16:21,360 --> 00:16:27,000
curly brackets because it has to go out

00:16:24,450 --> 00:16:29,550
of scope because you can go back to

00:16:27,000 --> 00:16:35,030
using a again so you can't have

00:16:29,550 --> 00:16:40,230
something like or I did not rely 20

00:16:35,030 --> 00:16:44,430
lines up or in my code I got some laid

00:16:40,230 --> 00:16:46,770
by equals ampersand Newt a because it

00:16:44,430 --> 00:16:49,470
wouldn't have compiled and you can also

00:16:46,770 --> 00:16:52,440
have things like for example cell with

00:16:49,470 --> 00:16:54,900
cell or mutexes but again it is quite

00:16:52,440 --> 00:16:57,570
explicit when you use them so you know

00:16:54,900 --> 00:16:59,730
that you at this point here maybe your

00:16:57,570 --> 00:17:03,330
variable will be modified but somewhere

00:16:59,730 --> 00:17:05,100
else but in most of the case you can be

00:17:03,330 --> 00:17:08,580
pretty sure that you can reason about

00:17:05,100 --> 00:17:12,350
your code locally and you it's it is

00:17:08,580 --> 00:17:16,430
explicit when it it can be changed so

00:17:12,350 --> 00:17:21,180
yeah I think that the board checker it

00:17:16,430 --> 00:17:24,600
doesn't just guarantees memory safety

00:17:21,180 --> 00:17:27,870
and the data bases safety but also it

00:17:24,600 --> 00:17:31,110
makes sure that yeah when you you

00:17:27,870 --> 00:17:34,440
modifying a variable you quite sure that

00:17:31,110 --> 00:17:37,200
you're not like meddling well you

00:17:34,440 --> 00:17:39,390
shouldn't have been and you're not going

00:17:37,200 --> 00:17:44,760
to break everything because if you come

00:17:39,390 --> 00:17:48,330
over like if you can take for example a

00:17:44,760 --> 00:17:48,580
mutable reference in parameter it so it

00:17:48,330 --> 00:17:51,429
will

00:17:48,580 --> 00:17:53,590
be safe to call it and robotically make

00:17:51,429 --> 00:17:54,750
sure that you won't have something like

00:17:53,590 --> 00:17:57,309
[Music]

00:17:54,750 --> 00:18:00,880
everyone is meeting everyone's on or

00:17:57,309 --> 00:18:02,230
something like that and you can also be

00:18:00,880 --> 00:18:04,779
pretty sure when you're reading some

00:18:02,230 --> 00:18:08,890
code but if you were

00:18:04,779 --> 00:18:11,169
yeah but present some other part of your

00:18:08,890 --> 00:18:16,600
program which is modifying some variable

00:18:11,169 --> 00:18:20,799
behind your back and then I experience

00:18:16,600 --> 00:18:23,230
bullet checking is quite a big thing in

00:18:20,799 --> 00:18:26,649
rest but when you write a little

00:18:23,230 --> 00:18:28,600
application the good thing is most of

00:18:26,649 --> 00:18:28,929
the time were ever us are pretty easy to

00:18:28,600 --> 00:18:31,919
fix

00:18:28,929 --> 00:18:35,799
very bit annoying but a lot of them

00:18:31,919 --> 00:18:38,169
hopefully going to go away question I

00:18:35,799 --> 00:18:41,019
mean for example this vague path of

00:18:38,169 --> 00:18:42,669
Bagdad line this is annoying but it

00:18:41,019 --> 00:18:45,490
doesn't compile but I took this example

00:18:42,669 --> 00:18:49,929
phone from the error free to actually

00:18:45,490 --> 00:18:51,549
fix the problem and so hopefully soon

00:18:49,929 --> 00:18:53,740
Ashley

00:18:51,549 --> 00:18:55,019
it will compile and what you won't have

00:18:53,740 --> 00:18:58,450
this problem anymore

00:18:55,019 --> 00:19:01,500
and when you actually have real problem

00:18:58,450 --> 00:19:05,529
with a biological and when you have to

00:19:01,500 --> 00:19:08,250
redesign your code to refactor local it

00:19:05,529 --> 00:19:10,750
can be painful but in my experience

00:19:08,250 --> 00:19:14,049
again is writing application maybe in

00:19:10,750 --> 00:19:16,480
libraries it can be a bit different but

00:19:14,049 --> 00:19:18,370
most of the time it's a sign that there

00:19:16,480 --> 00:19:24,760
was something wrong actually with my

00:19:18,370 --> 00:19:27,850
design and if I hadn't fixed this at

00:19:24,760 --> 00:19:31,330
this point under taken the time to think

00:19:27,850 --> 00:19:34,500
about it a bit more yet to step away

00:19:31,330 --> 00:19:36,700
from the project and think about it and

00:19:34,500 --> 00:19:40,510
things would have been much more

00:19:36,700 --> 00:19:42,789
difficult to fill in in some later time

00:19:40,510 --> 00:19:46,269
because when you have to find wherever

00:19:42,789 --> 00:19:49,120
bugs come from and things like that and

00:19:46,269 --> 00:19:51,190
worry it is possible to go around the

00:19:49,120 --> 00:19:54,370
board checker there are as I said where

00:19:51,190 --> 00:19:56,740
things like cells and red cells mutexes

00:19:54,370 --> 00:19:58,360
varies even unsafe I don't think you

00:19:56,740 --> 00:20:00,429
should use and safe in some high-level

00:19:58,360 --> 00:20:02,549
application but for libraries of course

00:20:00,429 --> 00:20:07,090
it is different

00:20:02,549 --> 00:20:09,880
but the good thing is that when you use

00:20:07,090 --> 00:20:12,160
some types you know that you probably

00:20:09,880 --> 00:20:14,770
should know what you're doing at this

00:20:12,160 --> 00:20:17,440
point which is great for me because it

00:20:14,770 --> 00:20:19,600
means that so that most of the time I

00:20:17,440 --> 00:20:22,270
don't really have to know what I'm doing

00:20:19,600 --> 00:20:25,540
and the compiler will at my bike and

00:20:22,270 --> 00:20:29,980
make sure I'm not making things explode

00:20:25,540 --> 00:20:34,020
or whatever so yeah

00:20:29,980 --> 00:20:37,179
an attractive from to this I think is a

00:20:34,020 --> 00:20:39,760
functional programming of course and I

00:20:37,179 --> 00:20:42,280
think it's great it solve the problem of

00:20:39,760 --> 00:20:45,000
aliasing a mutation in a different way

00:20:42,280 --> 00:20:48,160
because there is like no magician at all

00:20:45,000 --> 00:20:50,679
and I think it's a great idea it can be

00:20:48,160 --> 00:20:53,910
great for a level application my only

00:20:50,679 --> 00:20:56,530
problem with functional programming is I

00:20:53,910 --> 00:21:00,360
found it quite hard to wrap my mind

00:20:56,530 --> 00:21:03,340
around it mainly because I'm used to

00:21:00,360 --> 00:21:10,870
imperative programming so yeah it wasn't

00:21:03,340 --> 00:21:13,870
very I don't know if I quite as I I feel

00:21:10,870 --> 00:21:17,260
like I really should be enlightened and

00:21:13,870 --> 00:21:22,600
understand better but yeah I mean it can

00:21:17,260 --> 00:21:25,120
be quite difficult sometimes this is a

00:21:22,600 --> 00:21:28,210
picture I took from the person I was

00:21:25,120 --> 00:21:32,380
actually trained to such Monday the

00:21:28,210 --> 00:21:34,059
example and they ended up rivet so yeah

00:21:32,380 --> 00:21:36,400
I think West has a very interesting

00:21:34,059 --> 00:21:37,559
position in the landscape of programming

00:21:36,400 --> 00:21:40,210
language because there is like

00:21:37,559 --> 00:21:42,160
imperative programming and white side

00:21:40,210 --> 00:21:45,130
and it's like open bar of mutation and

00:21:42,160 --> 00:21:47,260
erasing and the garbage collection it's

00:21:45,130 --> 00:21:50,770
mitigate the problem but it doesn't

00:21:47,260 --> 00:21:56,070
solve really all issues and you can

00:21:50,770 --> 00:21:58,090
still have very complex spaghetti code

00:21:56,070 --> 00:22:00,570
functional programming I think it's a

00:21:58,090 --> 00:22:03,330
great rail but it can be up to

00:22:00,570 --> 00:22:09,669
personally didn't work that well for me

00:22:03,330 --> 00:22:12,970
and I think rest is like in its own I

00:22:09,669 --> 00:22:14,470
mean I don't think there is really

00:22:12,970 --> 00:22:16,620
comparable language to rest

00:22:14,470 --> 00:22:19,290
actual current

00:22:16,620 --> 00:22:21,750
but it's great because you have you

00:22:19,290 --> 00:22:23,790
country of some aspect of imperative

00:22:21,750 --> 00:22:25,080
programming but you have some safeties

00:22:23,790 --> 00:22:26,460
of functional programming so I think

00:22:25,080 --> 00:22:29,070
it's really interesting

00:22:26,460 --> 00:22:33,600
not just for systems programming where

00:22:29,070 --> 00:22:36,360
obviously for system programming it's

00:22:33,600 --> 00:22:38,790
all interesting because you can't have

00:22:36,360 --> 00:22:41,310
garbage collection which mitigates some

00:22:38,790 --> 00:22:44,850
problems so it's like yeah if you don't

00:22:41,310 --> 00:22:50,190
want I mean we're two natives can be

00:22:44,850 --> 00:22:51,960
very difficult but yeah rest can be

00:22:50,190 --> 00:22:53,490
really interesting as well for non

00:22:51,960 --> 00:22:55,440
systems programming I live an

00:22:53,490 --> 00:22:58,950
application because it yeah it's an

00:22:55,440 --> 00:23:00,510
alternative to yeah I don't know if it's

00:22:58,950 --> 00:23:06,840
a new paradigm or something it's like

00:23:00,510 --> 00:23:11,490
you are very I don't know well it's not

00:23:06,840 --> 00:23:14,100
to say that but whatever and the problem

00:23:11,490 --> 00:23:17,460
with rest is it's like a short term

00:23:14,100 --> 00:23:20,160
versus long term compromise it's harder

00:23:17,460 --> 00:23:21,960
to learn that short term I think they're

00:23:20,160 --> 00:23:26,070
great benefits at long term but

00:23:21,960 --> 00:23:28,800
sometimes the problem is when you but

00:23:26,070 --> 00:23:30,600
when the compiler fits is a bug you take

00:23:28,800 --> 00:23:32,670
a few minutes to fix it you don't

00:23:30,600 --> 00:23:36,210
realize that maybe you could have spent

00:23:32,670 --> 00:23:38,640
a few days or a few weeks maybe fighting

00:23:36,210 --> 00:23:41,610
the bugs in other programs programming

00:23:38,640 --> 00:23:44,940
language and I guess you have to maybe

00:23:41,610 --> 00:23:48,060
either standard on this first in other

00:23:44,940 --> 00:23:52,470
language to really see the benefits when

00:23:48,060 --> 00:23:54,120
you use rest and yeah I think that it's

00:23:52,470 --> 00:23:55,830
quite because the compiler is grumpy for

00:23:54,120 --> 00:23:59,550
you so you don't have to be and it's

00:23:55,830 --> 00:24:01,560
pretty cool too I mean you've the

00:23:59,550 --> 00:24:05,670
compilers you back it you don't have to

00:24:01,560 --> 00:24:10,170
worry about things too much so to

00:24:05,670 --> 00:24:13,410
conclude I don't I think that rest is

00:24:10,170 --> 00:24:15,900
naturally probably not the best I get

00:24:13,410 --> 00:24:17,250
for total beginners because we're a lot

00:24:15,900 --> 00:24:20,970
of complex that can be hard to

00:24:17,250 --> 00:24:23,100
understand and I think if I was teaching

00:24:20,970 --> 00:24:24,750
programming to somebody completely new

00:24:23,100 --> 00:24:26,580
to programming I would probably go for

00:24:24,750 --> 00:24:28,679
Python for example but

00:24:26,580 --> 00:24:29,730
I quite album wrong and that people

00:24:28,679 --> 00:24:32,159
return me up

00:24:29,730 --> 00:24:35,250
they had great experiences learning West

00:24:32,159 --> 00:24:37,130
as a at a first language but I don't

00:24:35,250 --> 00:24:40,080
know it seems quite complicated still

00:24:37,130 --> 00:24:42,750
and I think that for great programmers

00:24:40,080 --> 00:24:45,419
last isn't really needed because great

00:24:42,750 --> 00:24:47,399
programmers they don't use after free if

00:24:45,419 --> 00:24:50,010
I don't make these levels there you have

00:24:47,399 --> 00:24:53,580
a great design so obviously that's right

00:24:50,010 --> 00:24:56,460
but for like me motors I think yeah

00:24:53,580 --> 00:24:58,740
grass can be a very interesting to make

00:24:56,460 --> 00:25:01,110
things easier in the long run and to

00:24:58,740 --> 00:25:05,850
have if a long term and to have the

00:25:01,110 --> 00:25:09,470
compiler of your back and yeah the fix

00:25:05,850 --> 00:25:12,960
your errors when you sometimes make some

00:25:09,470 --> 00:25:15,960
and you have don't know if I have time

00:25:12,960 --> 00:25:19,350
for my like Christmas lease I mean after

00:25:15,960 --> 00:25:23,940
Christmas Carol but yeah a lot of things

00:25:19,350 --> 00:25:25,710
they actually being discussed or F RFC's

00:25:23,940 --> 00:25:32,429
I've been accepted so that's pretty cool

00:25:25,710 --> 00:25:35,669
for tests for writing application I

00:25:32,429 --> 00:25:37,980
guess ecosystem is quite important

00:25:35,669 --> 00:25:40,500
because if there is a library it's very

00:25:37,980 --> 00:25:43,320
easier if there isn't it can be more

00:25:40,500 --> 00:25:45,289
complicated it really depends on which

00:25:43,320 --> 00:25:49,080
application you're trying to write so

00:25:45,289 --> 00:25:51,960
but in general obviously rest is a

00:25:49,080 --> 00:25:54,630
younger language than Java Python C

00:25:51,960 --> 00:25:56,159
sharp or you would be or whatever so

00:25:54,630 --> 00:25:59,330
there are less libraries and you

00:25:56,159 --> 00:26:02,720
sometimes have to write library

00:25:59,330 --> 00:26:05,720
personally that's my personal list

00:26:02,720 --> 00:26:08,159
iPhone I would love some more

00:26:05,720 --> 00:26:10,649
internationalization like writes on

00:26:08,159 --> 00:26:14,909
libraries I had to write some kind of

00:26:10,649 --> 00:26:17,220
Ikea right to get my program to be able

00:26:14,909 --> 00:26:20,909
to be translated at runtime

00:26:17,220 --> 00:26:25,950
between for example French and English I

00:26:20,909 --> 00:26:27,870
think that creates the quest at Iowa Co

00:26:25,950 --> 00:26:31,320
system is more focused on great

00:26:27,870 --> 00:26:33,840
obviously and there are some guidelines

00:26:31,320 --> 00:26:37,559
on auto write great grades and great

00:26:33,840 --> 00:26:39,779
libraries I think very less for the

00:26:37,559 --> 00:26:41,460
right application interest and

00:26:39,779 --> 00:26:43,919
sometimes I was like I don't know if

00:26:41,460 --> 00:26:45,960
it's a good idea I still do it and some

00:26:43,919 --> 00:26:47,999
people like none of it season I mean

00:26:45,960 --> 00:26:52,139
should you for example use goggle

00:26:47,999 --> 00:26:53,940
install to install should you tell

00:26:52,139 --> 00:26:56,789
people to use consult with salut

00:26:53,940 --> 00:26:58,830
application there was some debate debate

00:26:56,789 --> 00:27:02,190
on this and I think I'll use some more

00:26:58,830 --> 00:27:05,940
clear guidelines on for application will

00:27:02,190 --> 00:27:08,820
be nice and yeah my personal that

00:27:05,940 --> 00:27:11,549
Christmas wish list will be having some

00:27:08,820 --> 00:27:13,739
things where you can just push the code

00:27:11,549 --> 00:27:15,389
on some like quite sutaio and publish

00:27:13,739 --> 00:27:17,639
your apps and you don't have to worry

00:27:15,389 --> 00:27:23,339
about cross compiling packaging or

00:27:17,639 --> 00:27:26,580
anything which would be great but and

00:27:23,339 --> 00:27:28,950
yeah I also want to say I feel a bit

00:27:26,580 --> 00:27:31,019
awkward in this because everybody is

00:27:28,950 --> 00:27:33,359
like saying that saying that various

00:27:31,019 --> 00:27:36,839
community is great but I mean it's quite

00:27:33,359 --> 00:27:39,570
true so I will say it again I feel very

00:27:36,839 --> 00:27:42,839
honored to be able to speak in front of

00:27:39,570 --> 00:27:45,269
you today because as I said I'm not a

00:27:42,839 --> 00:27:48,269
professional programmer so it's a quite

00:27:45,269 --> 00:27:51,869
yeah thank you for being there

00:27:48,269 --> 00:27:55,619
thank you West face for Adam Miller for

00:27:51,869 --> 00:27:59,639
the West community yeah this is an

00:27:55,619 --> 00:28:01,320
emotional part and I think there are

00:27:59,639 --> 00:28:03,690
great things also to increase Wall

00:28:01,320 --> 00:28:06,659
Street to make our West more accessible

00:28:03,690 --> 00:28:09,809
to people who are not professional

00:28:06,659 --> 00:28:12,029
programmers who are not alight

00:28:09,809 --> 00:28:14,159
programmers but might be a bit newer

00:28:12,029 --> 00:28:15,809
programming or might be new at systems

00:28:14,159 --> 00:28:18,539
programming and that film is really

00:28:15,809 --> 00:28:22,499
great people who might be part of my

00:28:18,539 --> 00:28:23,249
marginalized groups of learned

00:28:22,499 --> 00:28:25,349
programming

00:28:23,249 --> 00:28:29,099
later in life for example so I think

00:28:25,349 --> 00:28:32,489
that's very cool and yeah so thank you

00:28:29,099 --> 00:28:35,399
and yeah thank you for listening this is

00:28:32,489 --> 00:28:37,889
my cut to reward you for listening to me

00:28:35,399 --> 00:28:40,820
so thank you very much I don't know if

00:28:37,889 --> 00:28:40,820
there is time for question

00:28:51,540 --> 00:28:58,540
we have time for one question so who is

00:28:55,360 --> 00:29:11,710
going to raise her hand first oh right

00:28:58,540 --> 00:29:14,650
over there such a question how long did

00:29:11,710 --> 00:29:19,660
it take for you to wrap around your head

00:29:14,650 --> 00:29:21,309
around borrowed shaker what I had

00:29:19,660 --> 00:29:25,179
learned three before so it wasn't but

00:29:21,309 --> 00:29:26,950
odd most of the time I knew things about

00:29:25,179 --> 00:29:31,600
memory was supposed to work

00:29:26,950 --> 00:29:36,220
so understood in understanding the

00:29:31,600 --> 00:29:39,580
principle was relatively easy but when

00:29:36,220 --> 00:29:41,500
it's more like it's one thing to

00:29:39,580 --> 00:29:44,679
understand the principle it's another to

00:29:41,500 --> 00:29:46,419
realize that what you think is right

00:29:44,679 --> 00:29:49,020
might actually be wrong or things like

00:29:46,419 --> 00:29:49,020
that so

00:30:05,600 --> 00:30:10,410
so the question is when you about you

00:30:08,520 --> 00:30:13,830
yes to the borough checker basically I

00:30:10,410 --> 00:30:19,880
guess if a few weeks or one month I

00:30:13,830 --> 00:30:19,880
guess I would say okay thanks everyone

00:30:20,540 --> 00:30:23,780
Thank You Liz

00:30:25,460 --> 00:30:28,369

YouTube URL: https://www.youtube.com/watch?v=Uocesohc6Z0


