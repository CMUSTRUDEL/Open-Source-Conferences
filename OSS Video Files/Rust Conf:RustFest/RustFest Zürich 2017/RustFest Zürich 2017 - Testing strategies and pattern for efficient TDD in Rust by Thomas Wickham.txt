Title: RustFest Zürich 2017 - Testing strategies and pattern for efficient TDD in Rust by Thomas Wickham
Publication date: 2017-10-21
Playlist: RustFest Zürich 2017
Description: 
	Test-Driven Development is a systematic method to develop robust and self-documented software by incremental steps. To TDD in Rust, there will be 2 great obstacles. First, testing infrastructure will be harder to build as Rust lacks reflection, introspection, and casting. Furthermore it is known for its compiler strictness, making incremental development harder. This talk is aimed at applying the TDD method successfully. We will see the methodology by the book, some pitfalls, and how to avoid them with some Rust patterns and strategies that will help you ship at all time with great confidence.

About Thomas Wickham:
Hey I’m Thomas, consultant by day, and open-source coder by night. I work at OCTO Technology, a consulting firm specialized in Agile development and Software Craftmanship. I am passionate about empowering people in their daily lives and helping them undertaking their Why.
Captions: 
	00:00:12,849 --> 00:00:20,470
thank you everyone today we're talking

00:00:15,759 --> 00:00:21,130
about didi who know what CD please raise

00:00:20,470 --> 00:00:23,770
your hands

00:00:21,130 --> 00:00:29,769
okay almost everyone's good keep your

00:00:23,770 --> 00:00:34,269
hand raised if you use TDD okay and

00:00:29,769 --> 00:00:42,040
would seriously TDD for his walk ratio

00:00:34,269 --> 00:00:43,839
okay thanks so I rock with worst for

00:00:42,040 --> 00:00:48,070
three years and half of that time

00:00:43,839 --> 00:00:50,800
without didi until it changed who are

00:00:48,070 --> 00:00:54,309
right first that's what I want to share

00:00:50,800 --> 00:00:55,899
I would be happy it's my goal if at the

00:00:54,309 --> 00:00:58,629
end of this talk you would like to try

00:00:55,899 --> 00:01:01,030
to didi or try again for the project I

00:00:58,629 --> 00:01:03,309
will show you a way that works for me

00:01:01,030 --> 00:01:08,440
and I think it's efficient

00:01:03,309 --> 00:01:11,200
so a bit about me by nighttime I do open

00:01:08,440 --> 00:01:14,110
source not like the big guys before me

00:01:11,200 --> 00:01:16,930
and after me just a little you can find

00:01:14,110 --> 00:01:19,000
me at Twitter on github at Mac week and

00:01:16,930 --> 00:01:21,460
shoot me a mail I take all feedbacks at

00:01:19,000 --> 00:01:24,610
sweat well and by day I'm a consultant I

00:01:21,460 --> 00:01:26,530
took to technology which is a sub

00:01:24,610 --> 00:01:30,040
concert on film specialize in so far

00:01:26,530 --> 00:01:33,270
craftsmanship we like two or three

00:01:30,040 --> 00:01:37,750
hundreds in Paris and like 14 rosanna so

00:01:33,270 --> 00:01:45,899
it's a little Chi Minh stress a good

00:01:37,750 --> 00:01:45,899
news books

00:01:51,329 --> 00:01:56,670
so we're really passionate about quality

00:01:55,079 --> 00:01:59,820
code on software craftsmanship I took

00:01:56,670 --> 00:02:02,039
two and we wrote wait paper about that

00:01:59,820 --> 00:02:05,939
so there is a part about Gd and my

00:02:02,039 --> 00:02:08,429
torque is I have to say inspired from

00:02:05,939 --> 00:02:12,299
this book so it was more like Tech

00:02:08,429 --> 00:02:15,950
leading maintaining quality and reducing

00:02:12,299 --> 00:02:19,140
burg in the long run this book have free

00:02:15,950 --> 00:02:21,390
and I will give them away or if you want

00:02:19,140 --> 00:02:24,079
at the end of its torque the things oh

00:02:21,390 --> 00:02:29,730
it's it's fresh

00:02:24,079 --> 00:02:33,209
yeah and you is a Google form when you

00:02:29,730 --> 00:02:35,849
can ask to a translation for translation

00:02:33,209 --> 00:02:38,220
translation will be not free but like

00:02:35,849 --> 00:02:40,950
2000 I don't think I think something

00:02:38,220 --> 00:02:44,130
like that so just click the link say

00:02:40,950 --> 00:02:49,489
yeah I want that I want one on we will

00:02:44,130 --> 00:02:53,370
notify you when it's not rated yeah

00:02:49,489 --> 00:02:55,530
online check them out for no speeches

00:02:53,370 --> 00:02:58,650
not approve rates but I will miss them

00:02:55,530 --> 00:03:03,030
public everything as they are written in

00:02:58,650 --> 00:03:07,220
the speakers not so it's self containing

00:03:03,030 --> 00:03:10,940
with reference link to what I'm saying

00:03:07,220 --> 00:03:10,940
yes I think so

00:03:15,079 --> 00:03:20,430
means test drive on developments

00:03:17,280 --> 00:03:21,690
everyone know that is good when we say

00:03:20,430 --> 00:03:24,260
tests

00:03:21,690 --> 00:03:27,450
there is free kinds of tests there is

00:03:24,260 --> 00:03:30,090
unit testing integration testing and

00:03:27,450 --> 00:03:31,829
functional testing I won't speak about

00:03:30,090 --> 00:03:34,680
the letter to I'm only speaking about

00:03:31,829 --> 00:03:38,690
unity thing here because when we do TDD

00:03:34,680 --> 00:03:39,989
it's more unit tests that we want a

00:03:38,690 --> 00:03:44,250
question

00:03:39,989 --> 00:03:47,250
I got asks a lot from my clients is why

00:03:44,250 --> 00:03:49,919
do you test first its range I tend to do

00:03:47,250 --> 00:03:52,190
my work first and check later and that's

00:03:49,919 --> 00:03:52,190
a good question

00:03:52,370 --> 00:03:57,299
personally I have five reason why yes

00:03:55,230 --> 00:04:00,840
test first the first set

00:03:57,299 --> 00:04:03,440
it's simply either when you write your

00:04:00,840 --> 00:04:06,140
code is then you write your tests it's

00:04:03,440 --> 00:04:08,600
kind of fuzzy you don't know how many

00:04:06,140 --> 00:04:10,970
tests do I do for this kind of God where

00:04:08,600 --> 00:04:13,790
where do I put seeds although I name

00:04:10,970 --> 00:04:16,250
them it's how to write it's really much

00:04:13,790 --> 00:04:18,620
easier to just do the test first that

00:04:16,250 --> 00:04:20,570
yes this is behavior I want to test this

00:04:18,620 --> 00:04:21,890
is what I want to do I write the test

00:04:20,570 --> 00:04:24,740
and I do the rest

00:04:21,890 --> 00:04:28,430
this is my opinion again another reason

00:04:24,740 --> 00:04:31,310
is you won't test the intent when I said

00:04:28,430 --> 00:04:33,290
I want to test this behavior you want to

00:04:31,310 --> 00:04:34,640
test the logic you don't want to taste

00:04:33,290 --> 00:04:38,620
the same tag so you don't want to take

00:04:34,640 --> 00:04:41,360
specific implementation you want to test

00:04:38,620 --> 00:04:43,310
construction of your of your code your

00:04:41,360 --> 00:04:47,630
code is here to to to add value to

00:04:43,310 --> 00:04:51,350
someone and this is intense you can also

00:04:47,630 --> 00:04:54,440
say that testing first helps in your

00:04:51,350 --> 00:04:57,950
design because you have not brought any

00:04:54,440 --> 00:05:01,820
code yet you are just calling your

00:04:57,950 --> 00:05:05,180
function you say what will be its name

00:05:01,820 --> 00:05:08,510
what parameters does it takes how does

00:05:05,180 --> 00:05:10,310
it fits in your whole system as we

00:05:08,510 --> 00:05:14,180
didn't float any code we can change it

00:05:10,310 --> 00:05:18,640
as we want so it's really easy to design

00:05:14,180 --> 00:05:18,640
things when we don't have code actually

00:05:18,760 --> 00:05:26,300
I'm not particularly good programmer

00:05:22,390 --> 00:05:29,210
usually I think yeah I understood that

00:05:26,300 --> 00:05:33,350
let's go let's do that and then it

00:05:29,210 --> 00:05:35,650
doesn't work this helped me to challenge

00:05:33,350 --> 00:05:38,030
my understanding of the system because

00:05:35,650 --> 00:05:40,790
when I have to write a test on use my

00:05:38,030 --> 00:05:43,669
function and use the other parts of the

00:05:40,790 --> 00:05:46,910
codes that use what I want to test I can

00:05:43,669 --> 00:05:51,220
see that any one thing is it's not

00:05:46,910 --> 00:05:54,290
credible I can do things like that so

00:05:51,220 --> 00:05:57,860
when I test first I better understand

00:05:54,290 --> 00:06:00,620
and as some better what I am doing

00:05:57,860 --> 00:06:02,360
final thing is my boss is happy because

00:06:00,620 --> 00:06:05,169
this is a specification we are written

00:06:02,360 --> 00:06:07,880
on you can go when you're later on CA

00:06:05,169 --> 00:06:11,810
this is this behavior of a specific bug

00:06:07,880 --> 00:06:14,960
this is whole it should be be taken care

00:06:11,810 --> 00:06:16,100
of by signification that's that's really

00:06:14,960 --> 00:06:17,690
uncool when

00:06:16,100 --> 00:06:20,090
Wendy when you have to come back later

00:06:17,690 --> 00:06:23,060
on the code so this first reason it's

00:06:20,090 --> 00:06:24,740
easier I want to tell the intent of what

00:06:23,060 --> 00:06:27,110
I'm doing and not the code it says in

00:06:24,740 --> 00:06:28,880
the implementation it has my design

00:06:27,110 --> 00:06:31,270
each Anna German does something on it's

00:06:28,880 --> 00:06:33,890
an executive specification very useful

00:06:31,270 --> 00:06:35,920
maybe you say yeah it's good but what's

00:06:33,890 --> 00:06:41,030
your return on the investment or on

00:06:35,920 --> 00:06:43,700
investment sorry it seems like people

00:06:41,030 --> 00:06:47,600
have written about that so I made links

00:06:43,700 --> 00:06:50,330
at the end of the talks that you can see

00:06:47,600 --> 00:06:59,150
later on maybe share if you need to

00:06:50,330 --> 00:07:02,870
argue and that's all about TDD know how

00:06:59,150 --> 00:07:05,900
does it work what I will show you know

00:07:02,870 --> 00:07:07,790
it's something that I do because it

00:07:05,900 --> 00:07:11,110
works for me there's many things that

00:07:07,790 --> 00:07:17,710
don't work and I won't speak about that

00:07:11,110 --> 00:07:20,810
you can miss a step mystic in a cycle so

00:07:17,710 --> 00:07:24,020
when I speak about cycles this is red

00:07:20,810 --> 00:07:26,000
green refactor the three steps of TD and

00:07:24,020 --> 00:07:26,600
we cycle between them in a tight

00:07:26,000 --> 00:07:31,430
feedback loop

00:07:26,600 --> 00:07:34,510
the idea is to make micro step so the

00:07:31,430 --> 00:07:36,950
grant is a red faz is you write a test

00:07:34,510 --> 00:07:39,560
so you have to ask yourself what do we

00:07:36,950 --> 00:07:42,860
want to test what do I do next

00:07:39,560 --> 00:07:45,290
that I want to go forward this is the

00:07:42,860 --> 00:07:47,120
first step of the cycle so this is the

00:07:45,290 --> 00:07:50,120
one Wade will drive your cycle

00:07:47,120 --> 00:07:54,680
we will see later about the next step

00:07:50,120 --> 00:07:57,530
the next test you so you watch your test

00:07:54,680 --> 00:08:01,040
it's a dumb test and Emily and you make

00:07:57,530 --> 00:08:05,300
it pass in a dumb way that's easy you

00:08:01,040 --> 00:08:08,180
just see what the assertion is you make

00:08:05,300 --> 00:08:10,610
it pass in the decibel way the addition

00:08:08,180 --> 00:08:15,470
of right tests make it less and less

00:08:10,610 --> 00:08:18,070
dams on more non-smart and then you take

00:08:15,470 --> 00:08:21,470
a step back you recommend College say oh

00:08:18,070 --> 00:08:23,810
what can i every factor in my god this

00:08:21,470 --> 00:08:26,120
is a refactoring step you don't have to

00:08:23,810 --> 00:08:29,150
overdo it because you'll do it again the

00:08:26,120 --> 00:08:32,060
next cycle that's very comforting

00:08:29,150 --> 00:08:36,610
so you cycle back again and again I'm

00:08:32,060 --> 00:08:41,180
again with either set visitor increments

00:08:36,610 --> 00:08:42,950
so when I said who in the red step

00:08:41,180 --> 00:08:46,310
you're driving your cycle and you have

00:08:42,950 --> 00:08:49,790
to choose your next step and how do you

00:08:46,310 --> 00:08:52,040
choose your next step you have to think

00:08:49,790 --> 00:08:56,180
about something small that you can do

00:08:52,040 --> 00:08:58,520
fast that you can quickly pass like Nick

00:08:56,180 --> 00:09:02,480
you go forward on most important at all

00:08:58,520 --> 00:09:05,420
that you don't already have code it's

00:09:02,480 --> 00:09:09,370
not so easy it's a muscle train so we

00:09:05,420 --> 00:09:13,820
will do a quick example very simple

00:09:09,370 --> 00:09:17,900
let's say I want to implement I know a

00:09:13,820 --> 00:09:20,210
divisor and I want to so I want to make

00:09:17,900 --> 00:09:24,080
the divide function it's very easy it's

00:09:20,210 --> 00:09:25,700
only to show the methodology so if you

00:09:24,080 --> 00:09:28,010
want to do a function and we want you to

00:09:25,700 --> 00:09:32,150
make function just call it in your test

00:09:28,010 --> 00:09:35,170
it doesn't exist that's not bad because

00:09:32,150 --> 00:09:38,060
when you do that you have to think about

00:09:35,170 --> 00:09:41,089
where do I put my function or do I name

00:09:38,060 --> 00:09:43,760
it that's good start

00:09:41,089 --> 00:09:46,250
so you have probably the zero innovation

00:09:43,760 --> 00:09:48,620
new function associated item MD right

00:09:46,250 --> 00:09:51,470
maybe it's divisor I don't know the

00:09:48,620 --> 00:09:54,290
tunnel sub-code the green step is very

00:09:51,470 --> 00:09:57,260
easy you just declare the function with

00:09:54,290 --> 00:09:59,660
a signature and maybe filling the Bronx

00:09:57,260 --> 00:10:04,339
so it passes great there's no sin to

00:09:59,660 --> 00:10:05,930
refactor you can moving on and then we

00:10:04,339 --> 00:10:08,570
want our function to do something so

00:10:05,930 --> 00:10:12,650
what's the is a thing we can do that we

00:10:08,570 --> 00:10:15,950
don't do we don't do anything we can put

00:10:12,650 --> 00:10:19,250
you know tests here I'm a division by

00:10:15,950 --> 00:10:22,820
zero because this is an error case zero

00:10:19,250 --> 00:10:25,750
case actually is quite simple I only

00:10:22,820 --> 00:10:31,700
love to put an arrow in the rectum but

00:10:25,750 --> 00:10:35,270
look what did we do just there we met a

00:10:31,700 --> 00:10:37,280
call where we choose parameters on what

00:10:35,270 --> 00:10:41,370
kind of return will be them here is a

00:10:37,280 --> 00:10:44,160
result and then I had

00:10:41,370 --> 00:10:47,460
adapt my signature choose my type so

00:10:44,160 --> 00:10:51,570
here it's you 42 could be your size and

00:10:47,460 --> 00:10:55,010
no depends on on your choice um it's a

00:10:51,570 --> 00:10:57,180
little advance but first time we say

00:10:55,010 --> 00:10:58,770
what would be in a function how do I

00:10:57,180 --> 00:11:01,230
name it wait wait wait it's a second

00:10:58,770 --> 00:11:03,780
time is what will be the signature its I

00:11:01,230 --> 00:11:06,180
pay I will I want to use and you can see

00:11:03,780 --> 00:11:09,000
I didn't complete with the types of the

00:11:06,180 --> 00:11:11,910
results as it's just unit types because

00:11:09,000 --> 00:11:15,540
yeah we can make tests later to assert

00:11:11,910 --> 00:11:19,530
that on specify that then to make the

00:11:15,540 --> 00:11:21,420
test pass I also have to change my first

00:11:19,530 --> 00:11:26,880
test that's not bad

00:11:21,420 --> 00:11:30,090
so many micro steps micro advance again

00:11:26,880 --> 00:11:33,810
there's no sin to refactor um you going

00:11:30,090 --> 00:11:36,420
on going on then you can divide by 1 and

00:11:33,810 --> 00:11:37,950
divide by truth and say okay I know whom

00:11:36,420 --> 00:11:40,110
to use my function

00:11:37,950 --> 00:11:42,390
what does it right maybe I can make nan

00:11:40,110 --> 00:11:42,960
plus infinity minus infinity plus zero

00:11:42,390 --> 00:11:45,900
means zero

00:11:42,960 --> 00:11:47,880
you made all the little steps and then

00:11:45,900 --> 00:11:50,190
you are key and then your code walks on

00:11:47,880 --> 00:11:57,350
it's fully specified let's vary needs I

00:11:50,190 --> 00:12:00,810
like to do it so next step the next test

00:11:57,350 --> 00:12:04,550
simply a muscle to train that's the odd

00:12:00,810 --> 00:12:08,310
thing about GED you can just enumerate

00:12:04,550 --> 00:12:11,070
behavior we use case which are just

00:12:08,310 --> 00:12:13,620
variants just simply the same and so it

00:12:11,070 --> 00:12:18,180
won't go forward or you can just go make

00:12:13,620 --> 00:12:21,030
a step up too big then your feedback

00:12:18,180 --> 00:12:23,160
loop is too large you are deep in your

00:12:21,030 --> 00:12:26,340
code to make your test pass but your

00:12:23,160 --> 00:12:30,720
test is too weak just cut it in little

00:12:26,340 --> 00:12:32,340
pieces so you have to slow down such an

00:12:30,720 --> 00:12:35,700
odd thing but when you slow down you

00:12:32,340 --> 00:12:37,440
just look at the details you take your

00:12:35,700 --> 00:12:40,370
time to do things right

00:12:37,440 --> 00:12:45,780
and so that you don't have to look back

00:12:40,370 --> 00:12:47,700
you can advance this CD way and what's

00:12:45,780 --> 00:12:49,920
nice with rest is that you already have

00:12:47,700 --> 00:12:52,910
cargo tests and you don't need anything

00:12:49,920 --> 00:12:55,220
to test your function so it asserts the

00:12:52,910 --> 00:13:02,540
is a good test for now you can start no

00:12:55,220 --> 00:13:05,950
it's pretty easy so let's say about

00:13:02,540 --> 00:13:08,960
general tips and remarks in TDD in rests

00:13:05,950 --> 00:13:10,970
there's a new it's obvious yeah

00:13:08,960 --> 00:13:15,920
rest doesn't like news is performing

00:13:10,970 --> 00:13:20,030
odds with optional results but also Russ

00:13:15,920 --> 00:13:21,920
is the hard to make it compile you have

00:13:20,030 --> 00:13:26,780
ready to to prove to your compiler

00:13:21,920 --> 00:13:29,210
that's it works only for the nominal

00:13:26,780 --> 00:13:32,090
case the right case for all the error

00:13:29,210 --> 00:13:36,350
branches you can just clone your sets

00:13:32,090 --> 00:13:38,990
you can just make hot coded error status

00:13:36,350 --> 00:13:42,650
it's very easy to under the error case

00:13:38,990 --> 00:13:46,310
so you don't add no we have ok on error

00:13:42,650 --> 00:13:50,120
we have some unknown and known are very

00:13:46,310 --> 00:13:51,920
easy to just handle so you just begin to

00:13:50,120 --> 00:13:54,890
under the error cases on your code

00:13:51,920 --> 00:13:57,230
it begins stronger because you just do

00:13:54,890 --> 00:14:00,410
all the error and then when you have

00:13:57,230 --> 00:14:05,030
done all 0 so no mean it is very easy to

00:14:00,410 --> 00:14:07,190
do code maybe you know a road chain

00:14:05,030 --> 00:14:11,360
which is like quicker or plus plus

00:14:07,190 --> 00:14:15,010
I like this quite a lot especially the

00:14:11,360 --> 00:14:18,800
Bailey micro so you can just deal with a

00:14:15,010 --> 00:14:23,060
quick string and later when you want to

00:14:18,800 --> 00:14:26,390
test zero later on you can put a test on

00:14:23,060 --> 00:14:32,930
put your error kinda con that's all very

00:14:26,390 --> 00:14:37,670
nice very easy yeah when you do TDD you

00:14:32,930 --> 00:14:40,460
don't have a lot lots of tests so when I

00:14:37,670 --> 00:14:43,280
have like hundreds line of code for two

00:14:40,460 --> 00:14:47,180
thousand lines of tests which is a lot

00:14:43,280 --> 00:14:50,570
but classic it's art navigates in the

00:14:47,180 --> 00:14:53,030
file so I tend to split the friendship

00:14:50,570 --> 00:14:56,750
or the module which is will be like

00:14:53,030 --> 00:14:59,330
tasks and task underscore test where all

00:14:56,750 --> 00:15:02,510
the tests will be in terms of visibility

00:14:59,330 --> 00:15:04,670
in the crates that's not tip-top but it

00:15:02,510 --> 00:15:06,120
works it's was fine and so you can have

00:15:04,670 --> 00:15:08,910
a split with

00:15:06,120 --> 00:15:12,750
two fives I like that integration

00:15:08,910 --> 00:15:16,980
testing is in the test directory as a

00:15:12,750 --> 00:15:19,560
advice in the cargo guide and the this

00:15:16,980 --> 00:15:22,130
functional testing ham which can put in

00:15:19,560 --> 00:15:25,290
your documentation on examples directory

00:15:22,130 --> 00:15:27,029
so when you go go test it will test with

00:15:25,290 --> 00:15:28,890
documentation examples it would test the

00:15:27,029 --> 00:15:31,020
examples directory you know that show

00:15:28,890 --> 00:15:36,140
the things that you won't show to user

00:15:31,020 --> 00:15:39,270
so thing or you want to design your API

00:15:36,140 --> 00:15:41,580
you can just put it in the test an

00:15:39,270 --> 00:15:45,810
examples that will be tested it's very

00:15:41,580 --> 00:15:51,900
handy if you know wgg you can do that

00:15:45,810 --> 00:15:53,970
with an example I like that a lot so if

00:15:51,900 --> 00:15:57,450
you have ever done

00:15:53,970 --> 00:16:04,050
Ruby you have a spec where we tend to

00:15:57,450 --> 00:16:06,810
use describe - for your type hierarchy

00:16:04,050 --> 00:16:09,690
you might describe your class then

00:16:06,810 --> 00:16:14,580
describe your function then specify your

00:16:09,690 --> 00:16:17,700
context with given cases I talk to

00:16:14,580 --> 00:16:20,400
repeat the same pattern in rest so when

00:16:17,700 --> 00:16:23,310
I do cargo tests the arrow is more

00:16:20,400 --> 00:16:26,130
readable and then you can collapse all

00:16:23,310 --> 00:16:28,980
parts of the code and directly go where

00:16:26,130 --> 00:16:32,160
you want to go so here you have I think

00:16:28,980 --> 00:16:35,160
help you have your module which is just

00:16:32,160 --> 00:16:38,120
a struct I want to test and resolve

00:16:35,160 --> 00:16:43,080
include as name on Eastern plaited

00:16:38,120 --> 00:16:45,240
functions of hystrix in the inside this

00:16:43,080 --> 00:16:47,790
module which which has the name of the

00:16:45,240 --> 00:16:51,060
function I just put the test which

00:16:47,790 --> 00:16:54,060
describes a function just a way to group

00:16:51,060 --> 00:16:55,650
your test so you don't you can easily

00:16:54,060 --> 00:16:59,940
navigate between them there's a lot of

00:16:55,650 --> 00:17:04,679
them maybe you have noticed this view

00:16:59,940 --> 00:17:07,620
super : : star I won't explain it in

00:17:04,679 --> 00:17:11,010
detail also this made it change in the

00:17:07,620 --> 00:17:14,790
future with economic initiative but it

00:17:11,010 --> 00:17:17,280
permits to use this in all the modules

00:17:14,790 --> 00:17:18,990
which are included and then publish them

00:17:17,280 --> 00:17:23,279
to the chain module so

00:17:18,990 --> 00:17:25,439
you just do your pub use as a route and

00:17:23,279 --> 00:17:29,450
all the inside module will have the same

00:17:25,439 --> 00:17:34,440
use it's like you're dry for imports

00:17:29,450 --> 00:17:37,770
picking up dry please do repeat yourself

00:17:34,440 --> 00:17:41,250
you know tests we just have seen some

00:17:37,770 --> 00:17:45,990
talks about macros there are not most

00:17:41,250 --> 00:17:46,760
readable things ever arose and even less

00:17:45,990 --> 00:17:50,039
with at all

00:17:46,760 --> 00:17:52,320
when you test fail you don't want to

00:17:50,039 --> 00:17:54,539
press time to decipher what you just

00:17:52,320 --> 00:17:57,149
rolled when you're latter we want to

00:17:54,539 --> 00:17:59,940
just see the test you want a good bug

00:17:57,149 --> 00:18:02,610
report where is there is a clear arrow a

00:17:59,940 --> 00:18:05,250
clear path to this arrow and actually

00:18:02,610 --> 00:18:08,370
what this is what I expected and this is

00:18:05,250 --> 00:18:12,779
what I got on this business match macros

00:18:08,370 --> 00:18:16,039
don't tend to give us that also set up

00:18:12,779 --> 00:18:21,630
functions and children functions usually

00:18:16,039 --> 00:18:23,640
don't give that also just do it simply

00:18:21,630 --> 00:18:26,340
you have a function your test function

00:18:23,640 --> 00:18:27,000
you have the orange part to act when you

00:18:26,340 --> 00:18:29,640
do the thing

00:18:27,000 --> 00:18:31,350
the assert when you take the thing you

00:18:29,640 --> 00:18:33,419
must not test too many thing you must

00:18:31,350 --> 00:18:35,730
not do too many things there are range

00:18:33,419 --> 00:18:38,279
this is a little test keep it simple is

00:18:35,730 --> 00:18:41,130
keep it readable on most important level

00:18:38,279 --> 00:18:43,649
a failing test should be a complete an

00:18:41,130 --> 00:18:45,539
explicit bug report think of that when

00:18:43,649 --> 00:18:49,909
you're white row test if the test fail

00:18:45,539 --> 00:18:49,909
is it enough for me to debug in my code

00:18:51,409 --> 00:19:03,779
so speaking of setup of cheerin function

00:18:59,630 --> 00:19:05,850
usually now in rusts we don't have max

00:19:03,779 --> 00:19:09,000
we don't have tabs we don't have

00:19:05,850 --> 00:19:12,870
introspection at one time we don't have

00:19:09,000 --> 00:19:15,720
kind of this kind of things so setup on

00:19:12,870 --> 00:19:18,600
children is strictly limited to putting

00:19:15,720 --> 00:19:22,919
similar turns filling the databases or

00:19:18,600 --> 00:19:24,720
creating files in the first system this

00:19:22,919 --> 00:19:28,230
is not unit test this is integration

00:19:24,720 --> 00:19:30,120
testing some time is fine but most

00:19:28,230 --> 00:19:31,520
probably you don't need it and most

00:19:30,120 --> 00:19:35,539
probably

00:19:31,520 --> 00:19:37,700
this is your unit tests don't need it

00:19:35,539 --> 00:19:39,679
and you can be reduced to the scope of

00:19:37,700 --> 00:19:46,460
what you're testing this is really the

00:19:39,679 --> 00:19:47,950
out part if you want God constructed his

00:19:46,460 --> 00:19:51,590
Google Form

00:19:47,950 --> 00:19:53,059
like I said I work at octo technology if

00:19:51,590 --> 00:19:55,070
you're interested in Suffolk admin ships

00:19:53,059 --> 00:19:59,630
you can shoot me a mail I'm Thomas we

00:19:55,070 --> 00:20:03,250
come walking Swiss with Ian for Joseph

00:19:59,630 --> 00:20:06,710
we'll be happy to answer a question I

00:20:03,250 --> 00:20:07,130
know that you want to eat so I make it

00:20:06,710 --> 00:20:09,620
quick

00:20:07,130 --> 00:20:11,240
and this is a return to the end of the

00:20:09,620 --> 00:20:14,240
talk

00:20:11,240 --> 00:20:15,620
tdd is about self-improvement you know

00:20:14,240 --> 00:20:17,919
that show design is not perfect you know

00:20:15,620 --> 00:20:20,510
that you do don't underlies the cases

00:20:17,919 --> 00:20:22,429
but you know where you didn't endure a

00:20:20,510 --> 00:20:24,049
killer disease and where design is not

00:20:22,429 --> 00:20:25,970
good and you know where is good on a

00:20:24,049 --> 00:20:30,020
weight on those cases this is why a like

00:20:25,970 --> 00:20:32,720
TDD which is why I tend to use TDD

00:20:30,020 --> 00:20:35,020
whenever I can every day may work thank

00:20:32,720 --> 00:20:35,020
you everyone

00:20:41,830 --> 00:20:56,780
Thank You Thomas we have a few more

00:20:44,390 --> 00:20:59,570
minutes for questions a short question

00:20:56,780 --> 00:21:04,040
how do you deal with code that does some

00:20:59,570 --> 00:21:07,340
kind of I are in a TDD fashion excuse me

00:21:04,040 --> 00:21:09,170
a much understood how do you deal with

00:21:07,340 --> 00:21:10,900
codes it does some I are like

00:21:09,170 --> 00:21:12,890
input/output like for example

00:21:10,900 --> 00:21:15,500
communicating with zookeeper or

00:21:12,890 --> 00:21:20,290
something like that how do you test code

00:21:15,500 --> 00:21:22,790
like that using test-driven development

00:21:20,290 --> 00:21:25,420
so let me reform let you question you

00:21:22,790 --> 00:21:29,720
are saying can my test call other

00:21:25,420 --> 00:21:33,260
external dependencies yes or in general

00:21:29,720 --> 00:21:38,270
doing any kind of i/o basically yeah i

00:21:33,260 --> 00:21:41,390
okay so I so sometimes you don't have

00:21:38,270 --> 00:21:44,810
any choice but I Oh usually is

00:21:41,390 --> 00:21:50,780
integration testing if you can abstract

00:21:44,810 --> 00:21:54,080
from i/o that's best there is a the back

00:21:50,780 --> 00:21:56,120
shade that FM podcasts which is very

00:21:54,080 --> 00:21:58,910
nice with Shannon Griffin we spoke

00:21:56,120 --> 00:22:02,090
sometimes about this problem with Astra

00:21:58,910 --> 00:22:05,330
as free API on stripe API where you

00:22:02,090 --> 00:22:10,460
can't cope them because it will create

00:22:05,330 --> 00:22:13,010
files or make payments you say yeah I

00:22:10,460 --> 00:22:16,970
don't have any choice I and I have to

00:22:13,010 --> 00:22:20,960
mock them but you can't mock universe so

00:22:16,970 --> 00:22:22,610
what you do is generosity on you you

00:22:20,960 --> 00:22:26,330
make it on plate of your of your

00:22:22,610 --> 00:22:27,940
function with a step thing inside that's

00:22:26,330 --> 00:22:31,280
not good

00:22:27,940 --> 00:22:33,380
there is a way of TD T which is named

00:22:31,280 --> 00:22:37,550
with a mock East Philly D which is that

00:22:33,380 --> 00:22:40,010
load but universe is harder to do so I

00:22:37,550 --> 00:22:42,980
won't recommend you to use mock for IO

00:22:40,010 --> 00:22:45,500
and I recommend you to give your stage

00:22:42,980 --> 00:22:48,410
to a function this function return

00:22:45,500 --> 00:22:52,600
another state and the IO kind is

00:22:48,410 --> 00:22:52,600
supported extracted unnoticed it

00:22:53,000 --> 00:22:57,140
okay we have another question over there

00:23:03,290 --> 00:23:14,730
so my keys off my keys off okay oh yeah

00:23:11,100 --> 00:23:18,030
now I sorry okay so my question is kind

00:23:14,730 --> 00:23:20,310
of swimming out I'm wondering if you've

00:23:18,030 --> 00:23:22,920
ever done any integration testing with

00:23:20,310 --> 00:23:25,830
Russ because for me that really was

00:23:22,920 --> 00:23:27,510
always kind of annoying because you have

00:23:25,830 --> 00:23:29,340
other types and so on and really what

00:23:27,510 --> 00:23:31,500
you just want to write especially for

00:23:29,340 --> 00:23:34,410
like a Web API is just like look at this

00:23:31,500 --> 00:23:38,040
status code but you end up having to

00:23:34,410 --> 00:23:41,040
build tracing objects and so on yeah

00:23:38,040 --> 00:23:42,750
maybe is there way to do that with other

00:23:41,040 --> 00:23:46,130
languages like maybe you could script it

00:23:42,750 --> 00:23:49,980
in Python have you ever considered that

00:23:46,130 --> 00:23:50,460
could you shot a new question a bit yeah

00:23:49,980 --> 00:23:53,040
okay

00:23:50,460 --> 00:23:55,410
can you integration test using other

00:23:53,040 --> 00:24:01,470
languages are there smart ways to do

00:23:55,410 --> 00:24:03,870
that with rust like you want to yeah by

00:24:01,470 --> 00:24:06,030
definition integration testing integrate

00:24:03,870 --> 00:24:07,590
without thing which can be Python which

00:24:06,030 --> 00:24:11,820
tend to be in node we can be another

00:24:07,590 --> 00:24:14,550
thing the risk there is that when you do

00:24:11,820 --> 00:24:18,600
coupling like that you have to be very

00:24:14,550 --> 00:24:22,590
clear of what our user assumption of the

00:24:18,600 --> 00:24:25,530
other system for example maybe the

00:24:22,590 --> 00:24:28,170
Python you are calling is not the same

00:24:25,530 --> 00:24:31,530
version or are the same sister system

00:24:28,170 --> 00:24:34,770
dependencies and so which can pass in a

00:24:31,530 --> 00:24:36,720
system won't this is the risk with

00:24:34,770 --> 00:24:39,630
integration testing usually it's quite

00:24:36,720 --> 00:24:41,760
fragile because it works here but not

00:24:39,630 --> 00:24:47,040
there does it really answer your

00:24:41,760 --> 00:24:50,010
question I was also asking like in a

00:24:47,040 --> 00:24:52,500
technical way catching you rust errors

00:24:50,010 --> 00:24:55,250
and so on actually displaying them other

00:24:52,500 --> 00:24:57,990
ways to have test Suites that don't work

00:24:55,250 --> 00:25:01,170
for example if you're using like web

00:24:57,990 --> 00:25:03,750
frameworks and so on I don't think they

00:25:01,170 --> 00:25:06,420
exists anything for that yet but I'm

00:25:03,750 --> 00:25:08,580
asking if you do know about anything

00:25:06,420 --> 00:25:14,370
if I have made integration testing with

00:25:08,580 --> 00:25:27,390
race your question sorry okay that's all

00:25:14,370 --> 00:25:29,100
right okay thank you hi I was wondering

00:25:27,390 --> 00:25:32,060
when you when you're doing test-driven

00:25:29,100 --> 00:25:34,590
development do you have to turn off any

00:25:32,060 --> 00:25:36,120
real-time linting because I know if I

00:25:34,590 --> 00:25:38,970
start mentioning functions that don't

00:25:36,120 --> 00:25:48,150
exist yet my editor just gets full of

00:25:38,970 --> 00:25:51,030
angry red text so yeah so do you do you

00:25:48,150 --> 00:25:52,710
use runtime linting do you get real-time

00:25:51,030 --> 00:25:57,930
linting in your editor or do you have to

00:25:52,710 --> 00:26:01,310
disable it but yes of course you should

00:25:57,930 --> 00:26:01,310
do anything everything is very good yeah

00:26:04,650 --> 00:26:10,470
[Music]

00:26:06,740 --> 00:26:14,850
yeah no I don't see the issue here

00:26:10,470 --> 00:26:18,530
actually it's right yeah you pass your

00:26:14,850 --> 00:26:22,170
tests the feedback group is quite short

00:26:18,530 --> 00:26:24,840
the lynching helps you by giving your

00:26:22,170 --> 00:26:26,910
arrows so you just okay this is the

00:26:24,840 --> 00:26:28,590
first hero then there is an X and there

00:26:26,910 --> 00:26:31,320
is a next and you go for one like that

00:26:28,590 --> 00:26:34,920
anything is not an issue here it's just

00:26:31,320 --> 00:26:37,980
a - when it's a to you it's not the

00:26:34,920 --> 00:26:39,780
right type you have to decide if the

00:26:37,980 --> 00:26:41,670
type you made is a signature is not so

00:26:39,780 --> 00:26:44,580
good if the type you made in your test

00:26:41,670 --> 00:26:50,010
is not good it's only yeah so it's a

00:26:44,580 --> 00:26:52,700
decision to take what we do okay okay

00:26:50,010 --> 00:26:52,700
okay

00:26:53,320 --> 00:26:59,700
okay well my question over there you

00:26:56,020 --> 00:26:59,700
just walk off the stairs

00:27:27,940 --> 00:27:31,970
okay

00:27:29,630 --> 00:27:35,210
yeah cutting corners by leaving at a

00:27:31,970 --> 00:27:38,360
parameter or you know mocking module

00:27:35,210 --> 00:27:40,850
imports or stuff like that your rusty is

00:27:38,360 --> 00:27:42,770
a lot more fussy and well let you do

00:27:40,850 --> 00:27:44,950
stuff like that do you find that more

00:27:42,770 --> 00:27:47,630
difficult to write unit tests in rust

00:27:44,950 --> 00:27:50,510
away from what well it's more difficult

00:27:47,630 --> 00:27:53,210
to write when difficult

00:27:50,510 --> 00:27:56,570
I come from the Ruby ball but I have

00:27:53,210 --> 00:27:59,090
also done a lot of gyroscope testing in

00:27:56,570 --> 00:28:02,540
Ruby and JavaScript both it's far more

00:27:59,090 --> 00:28:06,590
easier to go forward to what I want and

00:28:02,540 --> 00:28:09,650
then walk out the arils and you you

00:28:06,590 --> 00:28:12,470
really forget he rolls in roasts as the

00:28:09,650 --> 00:28:16,070
arrow is easier to to UM dull I just do

00:28:12,470 --> 00:28:19,870
all 0 ok I can think of and then I have

00:28:16,070 --> 00:28:23,780
references I have basic type system and

00:28:19,870 --> 00:28:27,530
the nominal cause far easier to analysis

00:28:23,780 --> 00:28:29,540
difficult it's you invest you do your

00:28:27,530 --> 00:28:34,490
flow of salt about that

00:28:29,540 --> 00:28:36,200
another thing difficulties like don't

00:28:34,490 --> 00:28:38,630
choose reference where you're not sure

00:28:36,200 --> 00:28:47,390
you want to reference across the

00:28:38,630 --> 00:28:49,870
refactoring can be quite Russell LOB's

00:28:47,390 --> 00:28:52,910
refactoring roasts can be very painful

00:28:49,870 --> 00:28:56,120
because you have to juggle between the

00:28:52,910 --> 00:28:59,000
fives and like this with module or

00:28:56,120 --> 00:29:02,480
directory or file so you switching

00:28:59,000 --> 00:29:05,210
between them until you're happy this is

00:29:02,480 --> 00:29:07,460
a lot of changes compared to JavaScript

00:29:05,210 --> 00:29:12,860
or Java where you can just extract

00:29:07,460 --> 00:29:13,820
method and play with that no ok well for

00:29:12,860 --> 00:29:17,990
more question over here

00:29:13,820 --> 00:29:21,480
so in production courage if I see

00:29:17,990 --> 00:29:23,280
repetition so I'm here thank you

00:29:21,480 --> 00:29:26,400
in my production code if I see

00:29:23,280 --> 00:29:27,870
repetition I refactor it away and don't

00:29:26,400 --> 00:29:29,880
repeat yourself it's really important

00:29:27,870 --> 00:29:31,800
what is it that's different about test

00:29:29,880 --> 00:29:36,570
code that means that you think that

00:29:31,800 --> 00:29:40,080
repetition is good excuse me could you

00:29:36,570 --> 00:29:42,510
tell me you you said that dry is not

00:29:40,080 --> 00:29:45,660
applicable for test code and that

00:29:42,510 --> 00:29:49,680
surprises me yeah can you explain some

00:29:45,660 --> 00:29:57,500
more explain Mary term oh okay when I

00:29:49,680 --> 00:29:59,790
first did TDD in rust I saw a lot of

00:29:57,500 --> 00:30:03,920
factorization opportunities in my test

00:29:59,790 --> 00:30:08,130
score actually kind of always the same

00:30:03,920 --> 00:30:10,080
music everywhere so you can make macro

00:30:08,130 --> 00:30:12,840
for that you can make a lot of lots of

00:30:10,080 --> 00:30:17,280
macro but there you introduced coupling

00:30:12,840 --> 00:30:20,730
between different parts of tests similar

00:30:17,280 --> 00:30:25,350
but don't do the same thing and this

00:30:20,730 --> 00:30:27,390
coupling also blew your arrows so it's

00:30:25,350 --> 00:30:29,460
not like you come to this you can do

00:30:27,390 --> 00:30:32,760
this and sometimes it's fine it's just

00:30:29,460 --> 00:30:35,820
that you don't want to spend half an

00:30:32,760 --> 00:30:38,730
hour just understand you test on what

00:30:35,820 --> 00:30:41,130
good but you just want to see your tests

00:30:38,730 --> 00:30:43,740
and read it and say okay this is zero

00:30:41,130 --> 00:30:46,470
this is what I want Fiske maybe you have

00:30:43,740 --> 00:30:50,970
macros in your code not your tests and

00:30:46,470 --> 00:30:55,950
the tests which are not don't use macro

00:30:50,970 --> 00:30:58,110
will be really easier to read understand

00:30:55,950 --> 00:31:02,010
what went wrong in the macro this is the

00:30:58,110 --> 00:31:06,390
difference for me so many macro instead

00:31:02,010 --> 00:31:10,290
of the problem yes I think macro as a

00:31:06,390 --> 00:31:12,900
main program but Stubbs with generosity

00:31:10,290 --> 00:31:15,900
so if you want to stop something in rust

00:31:12,900 --> 00:31:18,420
you have to put your function statement

00:31:15,900 --> 00:31:20,790
of tests you have to complete it so

00:31:18,420 --> 00:31:22,920
another common trait between what you

00:31:20,790 --> 00:31:26,010
want to use on your step and this

00:31:22,920 --> 00:31:28,230
introduces a lot of visual noise so

00:31:26,010 --> 00:31:30,060
maybe you are just reading the code and

00:31:28,230 --> 00:31:31,320
you have template everywhere and why do

00:31:30,060 --> 00:31:34,180
I have time plate I don't choose this

00:31:31,320 --> 00:31:37,000
time plate in my code it's an oval

00:31:34,180 --> 00:31:39,460
okay thanks thank you

00:31:37,000 --> 00:31:44,170
so sadly we're out of time for questions

00:31:39,460 --> 00:31:48,310
but we covered a lot of things and thank

00:31:44,170 --> 00:31:56,069
you for this amazing talk thank you

00:31:48,310 --> 00:31:56,069

YouTube URL: https://www.youtube.com/watch?v=U3F7uAOCjEo


