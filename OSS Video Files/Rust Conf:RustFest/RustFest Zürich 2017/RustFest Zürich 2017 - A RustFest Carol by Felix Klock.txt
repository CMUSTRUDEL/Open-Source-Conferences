Title: RustFest Zürich 2017 - A RustFest Carol by Felix Klock
Publication date: 2017-10-21
Playlist: RustFest Zürich 2017
Description: 
	Is Rust doomed to stagnate under the yoke of stability guarantees? Is change an inevitable force that will invalidate all your existing code? Is there a reasonable medium between these extremes? We explore these questions, under the guise of a modern day fable.

Felix “Scrooge” Klock remembers the early days when Rust development was fast and loose, an untamed beast. As a result, today he fears changes to the language definition.

Gather round as this “Scrooge” is visited by a series of spirits (manifesting themselves as Rust crates), including:

- The Ghost of Rust Epochs Past (code circa the 1.0 release),
- The Ghost of Rust Epochs Present (code today), and
- The Ghost of Rust Epochs Yet To Come (code as envisaged by the host of RFC’s as we head into the 2017 impl Period).

About Felix Klock:
Felix Klock is a research engineer at Mozilla, where he works on the Rust compiler, runtime libraries, and language design. He previously worked on the ActionScript Virtual Machine for the Adobe Flash runtime. Felix obtained his PhD in Computer Science from Northeastern University, and is also one of the developers of the Larceny Scheme language runtime.
Captions: 
	00:00:11,750 --> 00:00:16,939
okay can you hear me yeah okay I wanted

00:00:15,379 --> 00:00:18,949
to clear I did say Couture's Julie I

00:00:16,939 --> 00:00:20,840
first I didn't say that steel bestie day

00:00:18,949 --> 00:00:25,550
first but uh he definitely did not know

00:00:20,840 --> 00:00:27,529
what got towards Julie a meant so yeah

00:00:25,550 --> 00:00:29,509
it's great to be here um I had a quick

00:00:27,529 --> 00:00:31,009
question I kind of missed the earlier

00:00:29,509 --> 00:00:33,110
poll about how many people were at rust

00:00:31,009 --> 00:00:37,399
fest but it's okay how many people saw

00:00:33,110 --> 00:00:40,700
my the rust fest Berlin talk I gave okay

00:00:37,399 --> 00:00:42,950
this is gonna be a very different talk

00:00:40,700 --> 00:00:44,870
today just so if you should feel better

00:00:42,950 --> 00:00:49,760
I guess to you if you sat through that

00:00:44,870 --> 00:00:53,539
one okay um so I have a book this is the

00:00:49,760 --> 00:00:56,329
rust fest Carol it's a story by myself

00:00:53,539 --> 00:01:00,260
Felix o'clock otherwise notice punk pink

00:00:56,329 --> 00:01:02,659
Felix of course I'm making an allusion

00:01:00,260 --> 00:01:04,610
to Charles Dickens and also you might

00:01:02,659 --> 00:01:08,510
see a little David Foster Wallace or

00:01:04,610 --> 00:01:11,510
mark the loose Danielewski mark disease

00:01:08,510 --> 00:01:14,960
and Danielewski if you look closely

00:01:11,510 --> 00:01:17,660
maybe and of course this is a work of

00:01:14,960 --> 00:01:19,220
fiction there can't possibly be anything

00:01:17,660 --> 00:01:23,740
related to anything that's actually

00:01:19,220 --> 00:01:28,360
going on in the real world here okay so

00:01:23,740 --> 00:01:31,580
our story opens on an IRC conversation

00:01:28,360 --> 00:01:34,310
where Manish says reimplemented

00:01:31,580 --> 00:01:38,900
entrusts to which pink scrooge says bah

00:01:34,310 --> 00:01:41,270
humbug and why is it why does he have

00:01:38,900 --> 00:01:43,130
this attitude about about this simple

00:01:41,270 --> 00:01:45,590
phrase we implement and rust he says

00:01:43,130 --> 00:01:47,840
well Russ this thing it's just a

00:01:45,590 --> 00:01:49,070
language we're writing types you don't

00:01:47,840 --> 00:01:49,610
have to ever get actually get any code

00:01:49,070 --> 00:01:51,440
out of it

00:01:49,610 --> 00:01:53,570
you sit there you wait you become a

00:01:51,440 --> 00:01:56,510
compiler cycle older you don't have any

00:01:53,570 --> 00:01:58,760
object file to show for it if I could

00:01:56,510 --> 00:02:00,650
work my will every idiot who goes around

00:01:58,760 --> 00:02:02,540
saying re-emit it and rust on their lips

00:02:00,650 --> 00:02:04,790
they should be nailed up on their own

00:02:02,540 --> 00:02:07,280
crates and buried with a bicycle gear

00:02:04,790 --> 00:02:08,840
through their hearts for which he was he

00:02:07,280 --> 00:02:13,840
was promptly ejected from the chat room

00:02:08,840 --> 00:02:15,830
for such for such talk and Scrooge's

00:02:13,840 --> 00:02:17,510
behavior wasn't just you know

00:02:15,830 --> 00:02:20,560
constrained to that he was also kind of

00:02:17,510 --> 00:02:23,420
mean to his colleagues as well he yells

00:02:20,560 --> 00:02:26,069
crickets cargo is broken to which Alex

00:02:23,420 --> 00:02:29,999
said wait are you talking to me I'm

00:02:26,069 --> 00:02:32,549
crichton um so why is Scrooge acting

00:02:29,999 --> 00:02:34,170
this way well the basic problem as you

00:02:32,549 --> 00:02:36,180
can see from this IRC snippet is that

00:02:34,170 --> 00:02:38,099
his problem is that he's really

00:02:36,180 --> 00:02:39,650
depressed because he says why are we

00:02:38,099 --> 00:02:41,670
implementing feature after feature

00:02:39,650 --> 00:02:44,250
forcing people to learn whole new ways

00:02:41,670 --> 00:02:45,719
to program they'll just leave the

00:02:44,250 --> 00:02:47,909
language because we're always changing

00:02:45,719 --> 00:02:53,579
and they'll go to some stable like Java

00:02:47,909 --> 00:03:00,220
or C++ they never change yes and as we

00:02:53,579 --> 00:03:06,790
all know change is death and once again

00:03:00,220 --> 00:03:08,880
once again kicked by Manish okay so you

00:03:06,790 --> 00:03:11,530
know Alex eventually went home and

00:03:08,880 --> 00:03:12,960
Scrooge pondered over the error he saw

00:03:11,530 --> 00:03:16,810
on his screen from the borrowed checker

00:03:12,960 --> 00:03:18,730
he sees this error message Scrolls off

00:03:16,810 --> 00:03:20,530
the screen so he has to you know get a

00:03:18,730 --> 00:03:26,350
larger window to get some perspective on

00:03:20,530 --> 00:03:31,060
it but lo and behold he sees the ghost

00:03:26,350 --> 00:03:33,820
of Nico ah oh it's the ghost of Nico and

00:03:31,060 --> 00:03:35,290
Nico says oh the chains of stability and

00:03:33,820 --> 00:03:37,600
backwards-compatibility they are heavy

00:03:35,290 --> 00:03:40,930
you must change your way of thinking

00:03:37,600 --> 00:03:46,900
tonight you Scrooge will be visited by

00:03:40,930 --> 00:03:48,730
three spirits Nico's not dead at least

00:03:46,900 --> 00:03:49,840
he's not in the story or well he's not

00:03:48,730 --> 00:03:51,700
and definitely not dead in real life and

00:03:49,840 --> 00:03:51,910
he's not dead in the story or maybe he

00:03:51,700 --> 00:03:54,910
is

00:03:51,910 --> 00:03:56,800
or maybe he's just overwhelmed just a

00:03:54,910 --> 00:03:58,300
notes so at this point you might be

00:03:56,800 --> 00:03:59,620
wondering what is going on in this talk

00:03:58,300 --> 00:04:03,130
I thought I came to a technical

00:03:59,620 --> 00:04:04,450
conference and the answer is well

00:04:03,130 --> 00:04:05,950
tonight you are all going to be visited

00:04:04,450 --> 00:04:07,510
by three ghosts we're gonna you know do

00:04:05,950 --> 00:04:09,250
it through the Scrooge Scrooge is being

00:04:07,510 --> 00:04:14,170
visited there's me three ghosts the

00:04:09,250 --> 00:04:15,550
ghosts of epochs past ethics past which

00:04:14,170 --> 00:04:17,830
is actually going to be a summary of

00:04:15,550 --> 00:04:20,970
some of the changes going up to rust 1.0

00:04:17,830 --> 00:04:23,350
back two years ago and may 2015 the

00:04:20,970 --> 00:04:24,730
ghosts of epochs presidents are going to

00:04:23,350 --> 00:04:27,310
be talking about the changes we're gonna

00:04:24,730 --> 00:04:29,470
see the changes from 1.0 up until now

00:04:27,310 --> 00:04:31,990
and then will be visited by a third

00:04:29,470 --> 00:04:35,320
ghost and that will be talking about the

00:04:31,990 --> 00:04:37,350
changes for future releases so the first

00:04:35,320 --> 00:04:39,370
two the three spirits came upon Scrooge

00:04:37,350 --> 00:04:42,400
said I am the ghost the deep locks

00:04:39,370 --> 00:04:44,980
passed and Scrooge said long pass he

00:04:42,400 --> 00:04:46,750
said no no russets passed said oh

00:04:44,980 --> 00:04:48,430
because Russ is so young it doesn't have

00:04:46,750 --> 00:04:50,169
a long past hey

00:04:48,430 --> 00:04:53,560
and what business brought you here

00:04:50,169 --> 00:04:56,770
spirits Russ welfare so in case you're

00:04:53,560 --> 00:04:59,140
not aware we had the right up to 1.0

00:04:56,770 --> 00:05:01,750
itself and this actually was marked by a

00:04:59,140 --> 00:05:03,580
number of intermediate releases each one

00:05:01,750 --> 00:05:05,919
separated by six weeks we were trying

00:05:03,580 --> 00:05:07,870
out this six week six week rapid release

00:05:05,919 --> 00:05:10,690
cycle so we had the one point on one

00:05:07,870 --> 00:05:13,140
alpha then six weeks later we had the

00:05:10,690 --> 00:05:14,790
1.0 alpha two

00:05:13,140 --> 00:05:16,740
and then six weeks later we had the 1.0

00:05:14,790 --> 00:05:19,560
beta yeah so we sort of cheated there

00:05:16,740 --> 00:05:20,910
and didn't go from alpha to beta you can

00:05:19,560 --> 00:05:23,490
you know talk to the various team

00:05:20,910 --> 00:05:25,110
members to found the story there but we

00:05:23,490 --> 00:05:26,370
had these releases and the interesting

00:05:25,110 --> 00:05:27,720
question is at least for the purpose of

00:05:26,370 --> 00:05:29,220
this talk the interesting question is

00:05:27,720 --> 00:05:30,470
what were the big changes that were

00:05:29,220 --> 00:05:32,370
happening in that time period because

00:05:30,470 --> 00:05:35,730
Scrooge's problem is he doesn't believe

00:05:32,370 --> 00:05:36,810
change is possible and that you can keep

00:05:35,730 --> 00:05:41,310
your community together throughout

00:05:36,810 --> 00:05:45,180
change so we had the 1.0 alpha release

00:05:41,310 --> 00:05:47,520
we saw the in pocalypse indeed a scary

00:05:45,180 --> 00:05:50,430
thing scrooge says oh I remember those

00:05:47,520 --> 00:05:52,380
days we've once had this int and you

00:05:50,430 --> 00:05:54,300
went types and it was a big problem

00:05:52,380 --> 00:05:55,590
because people didn't know which one to

00:05:54,300 --> 00:05:56,970
use they didn't know not that they don't

00:05:55,590 --> 00:05:57,960
know which to use between you in if

00:05:56,970 --> 00:06:01,680
anything that might've been the simplest

00:05:57,960 --> 00:06:03,870
question but know is do I use i-32 or do

00:06:01,680 --> 00:06:06,210
I use int they didn't realize that it

00:06:03,870 --> 00:06:07,920
might be target specific or is target

00:06:06,210 --> 00:06:09,150
specific so you you know program using

00:06:07,920 --> 00:06:12,480
int and you end up with these

00:06:09,150 --> 00:06:14,790
portability hazards so there are many

00:06:12,480 --> 00:06:18,000
many proposals to rename these things

00:06:14,790 --> 00:06:21,060
starting I think with rust issue nine

00:06:18,000 --> 00:06:24,240
nine four zero and then there were some

00:06:21,060 --> 00:06:26,670
RFC's after that but we resisted change

00:06:24,240 --> 00:06:28,950
the core team resisted change and we

00:06:26,670 --> 00:06:31,080
almost launched 1.0 using int and you

00:06:28,950 --> 00:06:33,690
ins and in some ways it was because of

00:06:31,080 --> 00:06:35,640
community backlash to this decision on

00:06:33,690 --> 00:06:37,890
part and the manner in which the core

00:06:35,640 --> 00:06:40,290
team went to a decision that we learned

00:06:37,890 --> 00:06:41,910
a lot about community inputs and about

00:06:40,290 --> 00:06:43,980
how to interface with the community in

00:06:41,910 --> 00:06:45,840
particular the core team learned it

00:06:43,980 --> 00:06:49,320
can't just make it can't decide

00:06:45,840 --> 00:06:51,360
something based on an argument that they

00:06:49,320 --> 00:06:52,800
made in private and then deliver that is

00:06:51,360 --> 00:06:55,620
if they were gods coming down from on

00:06:52,800 --> 00:06:57,030
high they learned that no that's not a

00:06:55,620 --> 00:06:59,130
good way to engage with their community

00:06:57,030 --> 00:07:00,420
and in fact the right way to do it is to

00:06:59,130 --> 00:07:02,400
still interact with them you come up

00:07:00,420 --> 00:07:03,630
with a new argument presented don't

00:07:02,400 --> 00:07:05,700
present a decision present the new

00:07:03,630 --> 00:07:08,100
argument and then let the community and

00:07:05,700 --> 00:07:10,410
you figure out okay well where does that

00:07:08,100 --> 00:07:12,990
leave us and by the end of all of this

00:07:10,410 --> 00:07:15,150
we ended up with I sighs and you sighs

00:07:12,990 --> 00:07:16,890
oh but first we went through a bunch of

00:07:15,150 --> 00:07:21,720
different potential other options like

00:07:16,890 --> 00:07:24,600
I'm mu mem off set size in pu NP but we

00:07:21,720 --> 00:07:26,689
said on the I sighs you sighs okay six

00:07:24,600 --> 00:07:31,289
weeks later

00:07:26,689 --> 00:07:33,449
six weeks later we have rust 1.0 alpha 2

00:07:31,289 --> 00:07:34,889
and for me the big change that we had it

00:07:33,449 --> 00:07:38,999
is added in there was the drop check

00:07:34,889 --> 00:07:40,379
rules so before that point we had we

00:07:38,999 --> 00:07:42,090
used to not allow you to write a

00:07:40,379 --> 00:07:44,009
destructor that looked like this we

00:07:42,090 --> 00:07:46,349
didn't let you write a destructor that

00:07:44,009 --> 00:07:48,810
was parameterised over lifetimes or type

00:07:46,349 --> 00:07:50,610
parameters at least we didn't let you do

00:07:48,810 --> 00:07:52,830
it unless you added a little annotation

00:07:50,610 --> 00:07:54,330
saying basically this might be unsafe or

00:07:52,830 --> 00:07:56,999
rather this is an unsafe thing because

00:07:54,330 --> 00:07:58,860
we don't know how to check it and that

00:07:56,999 --> 00:08:02,400
was the status quo and rust for quite a

00:07:58,860 --> 00:08:05,969
long time but we managed to figure out

00:08:02,400 --> 00:08:09,330
something that we thought was sound for

00:08:05,969 --> 00:08:11,849
1.1 1.0 alpha 2 so we added the drop

00:08:09,330 --> 00:08:13,680
check rules and that in fact it changed

00:08:11,849 --> 00:08:16,020
things in particular it started it made

00:08:13,680 --> 00:08:17,729
code start getting rejected sometimes

00:08:16,020 --> 00:08:19,080
was code that was worth rejecting it

00:08:17,729 --> 00:08:20,849
actually had potential problems but a

00:08:19,080 --> 00:08:22,469
lot of time was code that we just

00:08:20,849 --> 00:08:25,589
weren't smart enough to check properly

00:08:22,469 --> 00:08:27,930
and so you know the Spirit says the

00:08:25,589 --> 00:08:29,159
screws look you were willing your one

00:08:27,930 --> 00:08:31,830
swing to accept breakage you were

00:08:29,159 --> 00:08:34,519
responsible for this and Scrooge said I

00:08:31,830 --> 00:08:39,300
was young I was a young man then and

00:08:34,519 --> 00:08:40,919
it's all different now now the true

00:08:39,300 --> 00:08:43,229
history of Job draw check is probably

00:08:40,919 --> 00:08:45,320
worth a 45-minute talk on its own not

00:08:43,229 --> 00:08:48,420
gonna make you suffer through that but

00:08:45,320 --> 00:08:49,740
suffice it to say there were its evolved

00:08:48,420 --> 00:08:51,899
a lot since then it's not like we had

00:08:49,740 --> 00:08:53,940
the right answer at that time we didn't

00:08:51,899 --> 00:08:56,190
we definitely didn't it wasn't sound the

00:08:53,940 --> 00:08:57,990
way we did at 10 and we fixed a lot

00:08:56,190 --> 00:08:59,370
ariel is here and he can tell you a lot

00:08:57,990 --> 00:09:02,540
because he was responsible for a number

00:08:59,370 --> 00:09:06,690
of the fixes that we had to drop check

00:09:02,540 --> 00:09:10,880
then we have 1.0 beta 6 weeks later Shh

00:09:06,690 --> 00:09:13,260
there catch panic was introduced and

00:09:10,880 --> 00:09:15,600
this was an interesting thing because it

00:09:13,260 --> 00:09:17,130
wasn't really for this points to recover

00:09:15,600 --> 00:09:18,360
from the panic on the same thread that

00:09:17,130 --> 00:09:20,459
issued the panic you had to have some

00:09:18,360 --> 00:09:22,949
sort of monitor thread to be the one to

00:09:20,459 --> 00:09:25,380
catch the panic or monitor the panic and

00:09:22,949 --> 00:09:30,930
say oh this thread and somehow reports

00:09:25,380 --> 00:09:33,329
the user that it died um so we ant we

00:09:30,930 --> 00:09:36,360
landed catch panic and then there was a

00:09:33,329 --> 00:09:38,850
lots of controversy over the manner in

00:09:36,360 --> 00:09:39,750
which cash panic was added and about the

00:09:38,850 --> 00:09:41,430
details about what

00:09:39,750 --> 00:09:43,350
catch panic means and what it means for

00:09:41,430 --> 00:09:46,320
rust and what the name it etc there were

00:09:43,350 --> 00:09:49,710
lots of RFC's and in fact we only

00:09:46,320 --> 00:09:50,970
stabilized it in the 1.9 release under a

00:09:49,710 --> 00:09:55,770
different name and with some other rules

00:09:50,970 --> 00:09:57,630
so we're talking about my year before

00:09:55,770 --> 00:10:00,390
this thing was actually stabilized so

00:09:57,630 --> 00:10:01,800
this represents how change in a way

00:10:00,390 --> 00:10:04,800
that's usable because can sometimes also

00:10:01,800 --> 00:10:07,980
take time to finally evolve to reach the

00:10:04,800 --> 00:10:10,560
final thing and then from 1.0 that the

00:10:07,980 --> 00:10:13,950
change that I noticed there we made them

00:10:10,560 --> 00:10:15,780
forget a safe function up until that

00:10:13,950 --> 00:10:18,360
point we had this attitude of forgetting

00:10:15,780 --> 00:10:19,680
to run your disruptors that sounds scary

00:10:18,360 --> 00:10:20,850
and therefore we're gonna make this

00:10:19,680 --> 00:10:21,810
unsafe you have to know what you're

00:10:20,850 --> 00:10:24,870
going to assert you know what you're

00:10:21,810 --> 00:10:27,120
doing to do that to run runs to function

00:10:24,870 --> 00:10:29,460
the problem with that reasoning was that

00:10:27,120 --> 00:10:31,650
you didn't need to call them forget to

00:10:29,460 --> 00:10:33,330
avoid running instructor we had there's

00:10:31,650 --> 00:10:36,690
a there is a little trick you can do

00:10:33,330 --> 00:10:39,180
involving involving basically reference

00:10:36,690 --> 00:10:41,310
counted cycles where you can put an

00:10:39,180 --> 00:10:44,190
object and forget it in entirely safe

00:10:41,310 --> 00:10:45,690
code even without men forget so that

00:10:44,190 --> 00:10:48,330
line of argument was basically to say

00:10:45,690 --> 00:10:50,190
look what's the point of making this

00:10:48,330 --> 00:10:52,140
unsafe what's the meaning behind it if I

00:10:50,190 --> 00:10:54,450
can already get the same effect via safe

00:10:52,140 --> 00:10:57,210
code and so we shifted our way of

00:10:54,450 --> 00:11:00,540
thinking about what unsafe meant that

00:10:57,210 --> 00:11:02,940
was another change so the spirit said to

00:11:00,540 --> 00:11:03,990
Scrooge you see Russ can change your

00:11:02,940 --> 00:11:07,830
thinking can change

00:11:03,990 --> 00:11:09,480
Scrooge says no no that was before 1.0

00:11:07,830 --> 00:11:11,400
that wasn't that mad time when we were

00:11:09,480 --> 00:11:14,940
all rushing to bring the 1.0 release

00:11:11,400 --> 00:11:16,500
this means nothing for now so we're now

00:11:14,940 --> 00:11:17,270
visited by the second of three the three

00:11:16,500 --> 00:11:20,940
spirits

00:11:17,270 --> 00:11:24,630
the at box the ghost of F Box presence

00:11:20,940 --> 00:11:26,310
and now Scrooge is sort of like saying

00:11:24,630 --> 00:11:28,620
okay I've had some thinking about this

00:11:26,310 --> 00:11:30,420
whole you know change thing and I'm not

00:11:28,620 --> 00:11:32,220
so big on this being visited by spirits

00:11:30,420 --> 00:11:34,680
so all right tell me what you have to

00:11:32,220 --> 00:11:38,970
say maybe maybe you have a point teach

00:11:34,680 --> 00:11:41,490
me so this spirit is all about what's

00:11:38,970 --> 00:11:43,860
happened in Russia since 1.0 and in

00:11:41,490 --> 00:11:45,900
particular I wanted for this part of the

00:11:43,860 --> 00:11:47,280
talk to give you a view that wasn't

00:11:45,900 --> 00:11:50,940
based on my experience you may have

00:11:47,280 --> 00:11:52,830
noticed the ghost the outbox past that

00:11:50,940 --> 00:11:53,610
was sort of bias towards things I really

00:11:52,830 --> 00:11:56,160
knew about deeply

00:11:53,610 --> 00:11:58,410
like drop check for this though I

00:11:56,160 --> 00:12:00,060
decided I have to ask Lear people I have

00:11:58,410 --> 00:12:01,019
to get the input of other people you

00:12:00,060 --> 00:12:02,610
know because we're gonna be like that

00:12:01,019 --> 00:12:04,980
spirit in the Christmas Carol who

00:12:02,610 --> 00:12:06,390
visited the other families that knew

00:12:04,980 --> 00:12:09,110
Scrooge and what their lives were like

00:12:06,390 --> 00:12:11,279
at that time so I did a poll and I asked

00:12:09,110 --> 00:12:14,130
what are the changes that matter to you

00:12:11,279 --> 00:12:16,079
since 1.0 it's a very small poll and

00:12:14,130 --> 00:12:17,910
there were some people it said what

00:12:16,079 --> 00:12:20,490
mattered to me the most was the IDE

00:12:17,910 --> 00:12:22,800
support we had we've added the trust up

00:12:20,490 --> 00:12:24,839
tool and a lot of people said our bet

00:12:22,800 --> 00:12:27,240
are improved air diagnostics was a huge

00:12:24,839 --> 00:12:29,040
huge win how many people are familiar

00:12:27,240 --> 00:12:32,190
with the change their Diagnostics that

00:12:29,040 --> 00:12:34,110
have happened since 1.0 okay now of you

00:12:32,190 --> 00:12:36,420
how many of you think it was a you know

00:12:34,110 --> 00:12:38,519
they made things worse in your life if

00:12:36,420 --> 00:12:40,380
you okay yeah no hands

00:12:38,519 --> 00:12:43,200
yeah everyone agrees everyone agrees

00:12:40,380 --> 00:12:44,190
this is so much better there are some

00:12:43,200 --> 00:12:46,410
features that have been added since

00:12:44,190 --> 00:12:48,660
pompano that are only available in the

00:12:46,410 --> 00:12:50,430
nightly channel of rust you can't use

00:12:48,660 --> 00:12:53,399
them stable rust for example there's

00:12:50,430 --> 00:12:55,829
this never type feature where if you

00:12:53,399 --> 00:12:57,600
match on something and if you match on

00:12:55,829 --> 00:12:59,070
something in one of the variants it can

00:12:57,600 --> 00:13:00,810
be proven via the type system to

00:12:59,070 --> 00:13:03,529
actually never have an instance a

00:13:00,810 --> 00:13:06,209
so-called empty type or you know like an

00:13:03,529 --> 00:13:08,640
enum with no variants in it is an

00:13:06,209 --> 00:13:09,990
example of a void type and the never

00:13:08,640 --> 00:13:11,730
type feature lets you do things where

00:13:09,990 --> 00:13:14,010
you say look if I have a result where

00:13:11,730 --> 00:13:15,839
the OK type is T and the error type is

00:13:14,010 --> 00:13:17,550
void where it cannot it cannot be

00:13:15,839 --> 00:13:19,440
instantiated you can actually write a

00:13:17,550 --> 00:13:20,760
match arm that doesn't include the error

00:13:19,440 --> 00:13:23,699
case because it's impossible that it

00:13:20,760 --> 00:13:25,050
could ever occur there are some features

00:13:23,699 --> 00:13:28,800
that are only available in or s beta

00:13:25,050 --> 00:13:31,050
channel we have our C of unsigned in the

00:13:28,800 --> 00:13:32,660
beta channel in particular we have our C

00:13:31,050 --> 00:13:37,170
of stirrer which is kind of interesting

00:13:32,660 --> 00:13:38,339
and there's some features most people

00:13:37,170 --> 00:13:40,470
point out features that are available in

00:13:38,339 --> 00:13:42,060
stable rusts so the most important

00:13:40,470 --> 00:13:43,769
features in terms of the rotor people

00:13:42,060 --> 00:13:45,990
responded about them are things that

00:13:43,769 --> 00:13:47,490
actually have made it to stable like

00:13:45,990 --> 00:13:48,720
that was by far the longest list of

00:13:47,490 --> 00:13:50,459
things that I saw was things that are

00:13:48,720 --> 00:13:53,579
available for the first stable use

00:13:50,459 --> 00:13:55,019
things like if let's the question mark

00:13:53,579 --> 00:13:56,519
syntax that's been the replacement for

00:13:55,019 --> 00:13:57,570
trough who remembers try bag and try

00:13:56,519 --> 00:13:59,970
exclamation point

00:13:57,570 --> 00:14:02,760
now who still uses try exclamation

00:13:59,970 --> 00:14:04,829
points ok a lot of people put your hands

00:14:02,760 --> 00:14:06,120
down but I you know I respect the people

00:14:04,829 --> 00:14:07,290
who still have their hands off I am one

00:14:06,120 --> 00:14:08,730
of you I still use tried

00:14:07,290 --> 00:14:09,930
because I have my finger's haven't quite

00:14:08,730 --> 00:14:12,300
remember I don't the muscle memory and

00:14:09,930 --> 00:14:15,540
my fingers yet things like pub crates

00:14:12,300 --> 00:14:17,389
for billing to expose visibility just

00:14:15,540 --> 00:14:20,399
here crate and not the outside world

00:14:17,389 --> 00:14:22,860
things like infiltrates but by far by

00:14:20,399 --> 00:14:24,509
far the thing that the most people

00:14:22,860 --> 00:14:27,690
respond saying this is the change that

00:14:24,509 --> 00:14:30,240
mattered was macros 1.1 the ability to

00:14:27,690 --> 00:14:33,089
have stable Dirac customized derive and

00:14:30,240 --> 00:14:35,639
in particular its use answered so this

00:14:33,089 --> 00:14:37,500
part of the talk I decide there's so

00:14:35,639 --> 00:14:40,920
many people responded that way I have to

00:14:37,500 --> 00:14:42,769
show you some code I'm obligated to

00:14:40,920 --> 00:14:45,029
actually work through an example so

00:14:42,769 --> 00:14:46,740
here's a hypothetical trait called

00:14:45,029 --> 00:14:49,050
weights this is nothing so far to do

00:14:46,740 --> 00:14:50,279
with custom derive not exactly the

00:14:49,050 --> 00:14:51,959
weight trait is meant to be something

00:14:50,279 --> 00:14:53,940
that all it does is counts the number of

00:14:51,959 --> 00:14:56,009
heap allocations that are owned by this

00:14:53,940 --> 00:14:56,970
type this is not something that exists

00:14:56,009 --> 00:15:00,019
in rust today we're gonna try to

00:14:56,970 --> 00:15:02,490
implement ourselves in a very stupid way

00:15:00,019 --> 00:15:04,290
not stupid like inefficient just stupid

00:15:02,490 --> 00:15:05,759
like it's not going to be able to handle

00:15:04,290 --> 00:15:09,569
certain cases that one might care about

00:15:05,759 --> 00:15:11,220
so by default most values aren't heap

00:15:09,569 --> 00:15:13,620
allocated as and they're allocated in

00:15:11,220 --> 00:15:15,329
line and someone else's thing it might

00:15:13,620 --> 00:15:17,279
exist on the heap but it itself doesn't

00:15:15,329 --> 00:15:18,660
own anything that's heap allocated for

00:15:17,279 --> 00:15:21,930
example an integer doesn't own anything

00:15:18,660 --> 00:15:23,670
it's heap allocated whether it's I 30

00:15:21,930 --> 00:15:25,470
through are I 64 both those things have

00:15:23,670 --> 00:15:28,350
a weight of zero and likewise a

00:15:25,470 --> 00:15:29,399
reference has weight zero because even

00:15:28,350 --> 00:15:31,649
though it might point to something on

00:15:29,399 --> 00:15:33,300
the heap it doesn't own anything that's

00:15:31,649 --> 00:15:35,940
on the heap it's just a reference to

00:15:33,300 --> 00:15:38,040
something that somebody else owns so all

00:15:35,940 --> 00:15:39,209
these cases of integers and of

00:15:38,040 --> 00:15:42,089
references are all things that should

00:15:39,209 --> 00:15:44,279
return zero for their weights the first

00:15:42,089 --> 00:15:47,370
interesting case are things like string

00:15:44,279 --> 00:15:48,959
and box a string is heap allocated so

00:15:47,370 --> 00:15:50,610
since some people allocated object we're

00:15:48,959 --> 00:15:52,319
gonna have its has a weight of 1 that's

00:15:50,610 --> 00:15:57,329
very simple it's a single heap allocated

00:15:52,319 --> 00:15:59,310
a character buffer array a box is more

00:15:57,329 --> 00:16:01,230
interesting it has Eve allocation but it

00:15:59,310 --> 00:16:03,029
also have owns contents that may have

00:16:01,230 --> 00:16:05,459
other heap allocations so the way you

00:16:03,029 --> 00:16:06,959
implement weight for box is you you have

00:16:05,459 --> 00:16:08,670
the heap allocation for the box itself

00:16:06,959 --> 00:16:11,850
that's the one and you have to

00:16:08,670 --> 00:16:14,130
recursively ask how much did my contents

00:16:11,850 --> 00:16:15,689
way and add them together and you can

00:16:14,130 --> 00:16:17,189
test this I have a this is all running

00:16:15,689 --> 00:16:19,110
code by the way the way I write my talks

00:16:17,189 --> 00:16:20,940
in case you're not familiar is I use

00:16:19,110 --> 00:16:23,190
this tool called tango to like

00:16:20,940 --> 00:16:25,050
make Russ code that is also a markdown

00:16:23,190 --> 00:16:28,290
file and then I can run all my code so

00:16:25,050 --> 00:16:31,410
here we have this construct that's a box

00:16:28,290 --> 00:16:32,700
of a box of a box and then the string hi

00:16:31,410 --> 00:16:36,240
and this has a weight of three because

00:16:32,700 --> 00:16:38,610
there's three boxes in it so here's

00:16:36,240 --> 00:16:39,840
another demo of this weight function so

00:16:38,610 --> 00:16:40,830
I can have it I might have a struct

00:16:39,840 --> 00:16:43,710
called French toast

00:16:40,830 --> 00:16:46,020
it's way it'll be zero because it has no

00:16:43,710 --> 00:16:47,220
it's just an empty struct so what if I

00:16:46,020 --> 00:16:49,200
had a struct called pancakes that had

00:16:47,220 --> 00:16:52,730
two fields in it what's the weight of

00:16:49,200 --> 00:16:52,730
that you just yell it out if you know

00:16:53,450 --> 00:16:59,940
zero yeah p1 got way to zero because it

00:16:57,330 --> 00:17:01,950
has no boxes inside of it okay how about

00:16:59,940 --> 00:17:04,890
this thing here this this period P 3

00:17:01,950 --> 00:17:07,530
it's a pancakes with butter and berries

00:17:04,890 --> 00:17:08,790
and syrup so three things I mean it's

00:17:07,530 --> 00:17:12,900
got a weight of three what's the weight

00:17:08,790 --> 00:17:15,590
of a P 3 here - that's right - just

00:17:12,900 --> 00:17:18,450
count the boxes very simple ok great

00:17:15,590 --> 00:17:21,570
except I just lied to you because this

00:17:18,450 --> 00:17:23,280
code doesn't actually run because why

00:17:21,570 --> 00:17:27,420
any any takers for why this code won't

00:17:23,280 --> 00:17:28,950
actually do anything yet that's right

00:17:27,420 --> 00:17:30,240
weights of traits and I haven't

00:17:28,950 --> 00:17:31,980
implemented yet you have to actually

00:17:30,240 --> 00:17:34,920
implement the trait for every type that

00:17:31,980 --> 00:17:36,690
you want to use the time so that also

00:17:34,920 --> 00:17:38,940
means for example that running weight on

00:17:36,690 --> 00:17:40,380
an option of box won't work you really

00:17:38,940 --> 00:17:41,970
want it to you want to be able to do

00:17:40,380 --> 00:17:44,370
things like ask what the weight of a bot

00:17:41,970 --> 00:17:46,860
of some box of one is and get back one

00:17:44,370 --> 00:17:48,420
and what the weight of none is getting

00:17:46,860 --> 00:17:50,160
zero you want to do that and have it

00:17:48,420 --> 00:17:51,030
just be just count the boxes but we

00:17:50,160 --> 00:17:54,600
don't have that yet we haven't

00:17:51,030 --> 00:17:57,030
implemented the shrinks so okay let's

00:17:54,600 --> 00:17:59,940
start inputting the traits oh yeah for

00:17:57,030 --> 00:18:02,550
this you for an option you you match

00:17:59,940 --> 00:18:05,520
you'd have a some case you recur for the

00:18:02,550 --> 00:18:07,140
none case you have zero ok oh we have to

00:18:05,520 --> 00:18:09,060
do it for result - I guess so we've

00:18:07,140 --> 00:18:14,160
matched you have the ok case you recur

00:18:09,060 --> 00:18:16,200
error case recur look so the problem

00:18:14,160 --> 00:18:18,570
here is that this is ridiculous those

00:18:16,200 --> 00:18:20,100
implementations there mechanically

00:18:18,570 --> 00:18:23,100
drivable you can really you don't have

00:18:20,100 --> 00:18:25,410
to think to make them in fact you might

00:18:23,100 --> 00:18:29,220
say to yourself why don't we make a

00:18:25,410 --> 00:18:32,190
program to make these for us and in fact

00:18:29,220 --> 00:18:34,740
you can do that through the magic of

00:18:32,190 --> 00:18:37,470
procedural macros you can write a macro

00:18:34,740 --> 00:18:39,750
that takes in a type definition like

00:18:37,470 --> 00:18:42,809
this enum of option with the sum case in

00:18:39,750 --> 00:18:44,340
the none case and it'll generate this

00:18:42,809 --> 00:18:45,990
code it will expand to this code down

00:18:44,340 --> 00:18:48,000
here which is basically the same thing

00:18:45,990 --> 00:18:50,460
as what I just showed you modulo some

00:18:48,000 --> 00:18:53,610
small details in terms of you know why

00:18:50,460 --> 00:18:55,380
it has certain kinds of patterns being

00:18:53,610 --> 00:18:57,900
in there and certain kinds of additions

00:18:55,380 --> 00:19:01,410
but it's basically the same thing okay

00:18:57,900 --> 00:19:02,730
so this was less readable but you know

00:19:01,410 --> 00:19:04,620
the point is it's a macro and this is a

00:19:02,730 --> 00:19:06,330
lot easier to write down and get right

00:19:04,620 --> 00:19:10,110
than all that code I showed you in the

00:19:06,330 --> 00:19:11,460
previous slide now you might ask what

00:19:10,110 --> 00:19:17,429
does the macro implementation look like

00:19:11,460 --> 00:19:19,230
how hard is that it's this I'm a schemer

00:19:17,429 --> 00:19:20,970
so I was a little horrified by this this

00:19:19,230 --> 00:19:23,370
page like I'm used to macros that are

00:19:20,970 --> 00:19:26,130
you know pretty compact but in reality

00:19:23,370 --> 00:19:27,330
this is actually pretty tight code it's

00:19:26,130 --> 00:19:28,920
like a hundred lines of code news and

00:19:27,330 --> 00:19:30,840
it's pretty complex because it has to

00:19:28,920 --> 00:19:32,760
actually you know D structure the input

00:19:30,840 --> 00:19:34,559
and do handle the type parameters of the

00:19:32,760 --> 00:19:36,450
struct declaration and whether it's a

00:19:34,559 --> 00:19:37,710
structure and you know there's there's

00:19:36,450 --> 00:19:42,960
interesting stuff in here but I'm not

00:19:37,710 --> 00:19:45,270
gonna show it to you here's the sad news

00:19:42,960 --> 00:19:47,160
procedural macros are not yet available

00:19:45,270 --> 00:19:48,570
in the rust stable Channel you can't

00:19:47,160 --> 00:19:50,880
actually use this in stable rust you

00:19:48,570 --> 00:19:54,590
have to use nightly but there's one

00:19:50,880 --> 00:19:56,760
special case the special case is derive

00:19:54,590 --> 00:19:58,230
derive is available in stable and it

00:19:56,760 --> 00:20:00,870
uses the same technology and the same

00:19:58,230 --> 00:20:02,730
isin I was usually as that same crate

00:20:00,870 --> 00:20:04,590
that had that macro definition and reuse

00:20:02,730 --> 00:20:06,870
basically the same functionality to make

00:20:04,590 --> 00:20:08,490
the derive so that now when i make

00:20:06,870 --> 00:20:10,800
french toast I can say derive weights

00:20:08,490 --> 00:20:14,630
and it'll create this implementation

00:20:10,800 --> 00:20:17,100
automatically where it just says it's 0

00:20:14,630 --> 00:20:19,679
it says in a long winded way it matches

00:20:17,100 --> 00:20:20,700
stupidly and then produces 0 but you

00:20:19,679 --> 00:20:23,730
know we're trusting the compiler

00:20:20,700 --> 00:20:26,309
optimize all that away and likewise for

00:20:23,730 --> 00:20:27,780
pancakes it'll do the right thing there

00:20:26,309 --> 00:20:30,600
it'll expand into something that matches

00:20:27,780 --> 00:20:34,260
in the pancakes binds the two parts and

00:20:30,600 --> 00:20:39,809
then recursively calls weight on the two

00:20:34,260 --> 00:20:42,840
parts so the lesson here if there is a

00:20:39,809 --> 00:20:44,640
lesson is that of these cases derive is

00:20:42,840 --> 00:20:45,780
actually the most important one to

00:20:44,640 --> 00:20:47,520
support so that's why it was so

00:20:45,780 --> 00:20:48,180
important that it become part of stable

00:20:47,520 --> 00:20:50,880
rust

00:20:48,180 --> 00:20:52,860
because the reason why it's important is

00:20:50,880 --> 00:20:54,840
because while it is painful as a crate

00:20:52,860 --> 00:20:57,870
authoress if I'm the crate author of the

00:20:54,840 --> 00:20:59,280
weight trait yeah it's painful for me to

00:20:57,870 --> 00:21:01,020
go and write the implementations for

00:20:59,280 --> 00:21:03,330
option result and stuff but at least I

00:21:01,020 --> 00:21:05,550
can do that at least as the author of

00:21:03,330 --> 00:21:07,020
the weight trait and the weight crate

00:21:05,550 --> 00:21:08,130
I have the option of going to the

00:21:07,020 --> 00:21:09,450
standard library and adding

00:21:08,130 --> 00:21:10,350
implementations for all the types of

00:21:09,450 --> 00:21:13,230
center library

00:21:10,350 --> 00:21:16,070
I can't as the author of the weight

00:21:13,230 --> 00:21:19,530
crates do that for all of my clients I

00:21:16,070 --> 00:21:21,060
can't write all their implementations so

00:21:19,530 --> 00:21:22,500
the reason they derive is so important

00:21:21,060 --> 00:21:24,620
is because derive is what gives me the

00:21:22,500 --> 00:21:28,560
ability as the weight crate author a

00:21:24,620 --> 00:21:31,910
zero effort way for my clients to use my

00:21:28,560 --> 00:21:36,510
trait that's the crucial thing about it

00:21:31,910 --> 00:21:38,970
and a particular instance of this is

00:21:36,510 --> 00:21:41,640
surd so surd is this serialization

00:21:38,970 --> 00:21:43,320
deserialization library and the crucial

00:21:41,640 --> 00:21:45,870
thing is that it's available in stable

00:21:43,320 --> 00:21:48,510
rust and it uses this drive mechanism to

00:21:45,870 --> 00:21:51,000
provide automatic serialization and

00:21:48,510 --> 00:21:54,390
deserialization for a whole host of

00:21:51,000 --> 00:21:57,300
formats including JSON and pickle and

00:21:54,390 --> 00:21:59,910
lots of others and the crucial thing is

00:21:57,300 --> 00:22:01,530
that it does this automatically it's

00:21:59,910 --> 00:22:04,470
very easy as a user to get these

00:22:01,530 --> 00:22:06,720
automatic implementations and the code

00:22:04,470 --> 00:22:09,450
it creates is super efficient in that

00:22:06,720 --> 00:22:11,130
it's not using reflection or runtime

00:22:09,450 --> 00:22:12,840
type introspection the way that other

00:22:11,130 --> 00:22:14,790
languages might to accomplish this

00:22:12,840 --> 00:22:18,320
instead all the code is generate a

00:22:14,790 --> 00:22:21,090
compile time and specialize to the type

00:22:18,320 --> 00:22:23,610
okay and there's other crates too that

00:22:21,090 --> 00:22:28,200
use derive diesel is another one another

00:22:23,610 --> 00:22:29,580
example of note so the insight if

00:22:28,200 --> 00:22:31,590
there's any insights being taken from

00:22:29,580 --> 00:22:33,840
all this is that a really relatively

00:22:31,590 --> 00:22:36,060
small language ition procedural macros

00:22:33,840 --> 00:22:38,250
it's not that small but derive it's like

00:22:36,060 --> 00:22:40,050
this sort of nice use case you don't

00:22:38,250 --> 00:22:43,680
expect we don't expect many people to

00:22:40,050 --> 00:22:47,760
implement a macro but we do expect a ton

00:22:43,680 --> 00:22:50,040
to use derive and so these small changes

00:22:47,760 --> 00:22:51,690
to the language in terms of you know how

00:22:50,040 --> 00:22:54,030
many people expect to use them can have

00:22:51,690 --> 00:22:57,950
huge changes in your library in your

00:22:54,030 --> 00:23:01,050
language ecosystem of your community

00:22:57,950 --> 00:23:02,160
okay so Scrooge has been pretty

00:23:01,050 --> 00:23:05,850
convinced at this point that

00:23:02,160 --> 00:23:07,200
change is possible maybe but he still

00:23:05,850 --> 00:23:09,690
has the last the spirits so he's going

00:23:07,200 --> 00:23:12,630
to visit him and the ghost of f Fox you

00:23:09,690 --> 00:23:19,020
have two commenters the IRC channel but

00:23:12,630 --> 00:23:21,480
he says nothing and then he points any

00:23:19,020 --> 00:23:28,920
points again Oh spirit what is this

00:23:21,480 --> 00:23:31,190
you're showing me o spirits o spirits

00:23:28,920 --> 00:23:41,730
why why is what is what could this be

00:23:31,190 --> 00:23:43,770
and he points again o spirit no no I can

00:23:41,730 --> 00:23:46,260
change I can change spirit and rust can

00:23:43,770 --> 00:23:48,570
change too okay

00:23:46,260 --> 00:23:51,450
I personally am NOT actually concerned

00:23:48,570 --> 00:23:56,070
about rust tying this is all just you

00:23:51,450 --> 00:23:57,720
know narrative cetera and why am I not

00:23:56,070 --> 00:23:59,910
concern is because we have an awesome

00:23:57,720 --> 00:24:02,370
community of people that are super

00:23:59,910 --> 00:24:04,770
enthused to work on it and we have our

00:24:02,370 --> 00:24:06,810
friends the actual companies like our

00:24:04,770 --> 00:24:08,220
sponsors that are using rust in practice

00:24:06,810 --> 00:24:11,400
and are going to keep it alive

00:24:08,220 --> 00:24:15,660
regardless of what happens in the future

00:24:11,400 --> 00:24:17,480
so want to make that clear so end of the

00:24:15,660 --> 00:24:23,150
story

00:24:17,480 --> 00:24:25,980
Scrooge has come to accept change and

00:24:23,150 --> 00:24:27,770
he's a fundamentally different person

00:24:25,980 --> 00:24:31,340
than he was perhaps before this visits

00:24:27,770 --> 00:24:35,640
you might call him a Scrooge for 2018

00:24:31,340 --> 00:24:37,530
and Aaron Turin enters the room the IRC

00:24:35,640 --> 00:24:39,960
Channel and says what what is scrooge

00:24:37,530 --> 00:24:45,090
been going off about we aren't gonna do

00:24:39,960 --> 00:24:47,490
any breaking changes anyway so what

00:24:45,090 --> 00:24:49,170
Aaron's talking about is this we already

00:24:47,490 --> 00:24:50,610
have a number of things that enable

00:24:49,170 --> 00:24:53,850
change within rust we have the nightly

00:24:50,610 --> 00:24:55,020
stable splits we have a rapid release

00:24:53,850 --> 00:24:56,880
cycle and we have support for

00:24:55,020 --> 00:24:58,710
deprecation so we can evolve rust over

00:24:56,880 --> 00:25:00,510
time this we've known this this that's

00:24:58,710 --> 00:25:01,980
why this second spirit was able to show

00:25:00,510 --> 00:25:06,420
us changes that have happened since 1.0

00:25:01,980 --> 00:25:09,120
but but the thing that the mechanisms we

00:25:06,420 --> 00:25:13,170
have in place are insufficient they

00:25:09,120 --> 00:25:15,149
because in particular they don't allow

00:25:13,170 --> 00:25:19,549
us to make certain changes

00:25:15,149 --> 00:25:22,499
and also the mechanisms we have in place

00:25:19,549 --> 00:25:24,929
Russ kind of evolves in this weird way

00:25:22,499 --> 00:25:26,489
where you know a change comes at a sort

00:25:24,929 --> 00:25:28,889
of random time and another one comes at

00:25:26,489 --> 00:25:30,719
a random time and the docs aren't

00:25:28,889 --> 00:25:33,989
necessarily like updated to you know

00:25:30,719 --> 00:25:35,849
incorporate these new idioms and there

00:25:33,989 --> 00:25:36,989
aren't blog posts announcing oh look all

00:25:35,849 --> 00:25:38,759
these awesome new things that are

00:25:36,989 --> 00:25:39,869
available you see a blog post here a

00:25:38,759 --> 00:25:41,399
blog post here about one bit clear

00:25:39,869 --> 00:25:42,929
change or another if you don't see you

00:25:41,399 --> 00:25:44,849
know a really enthusiastic here's why

00:25:42,929 --> 00:25:49,830
you should look at Russ now instead of

00:25:44,849 --> 00:25:54,299
before and we want to change that so the

00:25:49,830 --> 00:25:57,869
EPOC system has been accepted as RFC 205

00:25:54,299 --> 00:25:59,429
- and the idea of the epoch system is

00:25:57,869 --> 00:26:02,639
that we're gonna declare an epoch every

00:25:59,429 --> 00:26:05,309
two or three years and it's gonna eat up

00:26:02,639 --> 00:26:06,210
Epoque is gonna I've heard this number

00:26:05,309 --> 00:26:09,539
different ways I've learned that some

00:26:06,210 --> 00:26:10,830
people pronounce it epic okay okay

00:26:09,539 --> 00:26:12,629
there's some of you raising your hands

00:26:10,830 --> 00:26:14,759
for that I always thought was like I

00:26:12,629 --> 00:26:17,369
always thought it was epoch or F Hawk at

00:26:14,759 --> 00:26:22,559
Pakistan almost always save and now

00:26:17,369 --> 00:26:25,649
because of UNIX I say epoch anyway each

00:26:22,559 --> 00:26:26,789
epoch provides a set of features that

00:26:25,649 --> 00:26:30,419
have been stabilized since the last

00:26:26,789 --> 00:26:31,589
epoch and the crucial thing is that we

00:26:30,419 --> 00:26:35,070
want everything to sort of move in

00:26:31,589 --> 00:26:36,539
tandem all the tooling the docs and our

00:26:35,070 --> 00:26:40,320
standard library should be updated to

00:26:36,539 --> 00:26:42,509
make use of the new features and the way

00:26:40,320 --> 00:26:45,089
it works is that you have to a crate has

00:26:42,509 --> 00:26:47,759
to opt into the given app Hawk by saying

00:26:45,089 --> 00:26:49,710
upfront here is the epoch that I expect

00:26:47,759 --> 00:26:51,929
to be expect to work with the features

00:26:49,710 --> 00:26:53,219
that I want to use and if you don't say

00:26:51,929 --> 00:26:57,179
it then you're assumed you're in the

00:26:53,219 --> 00:27:00,239
2015 epoch and the other crucial pieces

00:26:57,179 --> 00:27:01,679
of this puzzle are that one the russ

00:27:00,239 --> 00:27:03,960
compiler is going to support all of the

00:27:01,679 --> 00:27:04,559
epics going back to the original one in

00:27:03,960 --> 00:27:07,769
00:27:04,559 --> 00:27:09,599
- we're gonna support linking crates

00:27:07,769 --> 00:27:11,009
that come from different epochs so you

00:27:09,599 --> 00:27:12,359
can take a crate that has not been

00:27:11,009 --> 00:27:14,669
updated since 2015

00:27:12,359 --> 00:27:16,889
and had it interoperate with your crate

00:27:14,669 --> 00:27:18,659
from 2018 and then your crate that

00:27:16,889 --> 00:27:20,609
incorporates the one from 2015 and your

00:27:18,659 --> 00:27:23,039
crate for 2018 will be able to work with

00:27:20,609 --> 00:27:25,679
somebody else's crate from 2024 and they

00:27:23,039 --> 00:27:26,879
should all work together we ought to be

00:27:25,679 --> 00:27:28,860
able to link code together and preserve

00:27:26,879 --> 00:27:31,830
the semantics of the code that was old

00:27:28,860 --> 00:27:33,750
and finally in terms of evolution an

00:27:31,830 --> 00:27:36,840
epoch can only introduce a heart error

00:27:33,750 --> 00:27:38,850
if we actually warned you about it we

00:27:36,840 --> 00:27:40,830
can only issue and there's a hard error

00:27:38,850 --> 00:27:42,720
for a certain form if the previous epoch

00:27:40,830 --> 00:27:46,230
was telling you via deprecation warning

00:27:42,720 --> 00:27:48,750
hey hey this is gonna break so this adds

00:27:46,230 --> 00:27:50,850
up to an assertion that the epochs

00:27:48,750 --> 00:27:52,470
do not split our ecosystem nor do they

00:27:50,850 --> 00:27:55,350
break existing code that is the claim

00:27:52,470 --> 00:27:57,510
that we are making so we get to consider

00:27:55,350 --> 00:27:59,540
new changes changes like the catch

00:27:57,510 --> 00:28:02,299
construct to go with the question mark

00:27:59,540 --> 00:28:05,580
changes like changing our module

00:28:02,299 --> 00:28:08,070
hierarchy system to be inferred instead

00:28:05,580 --> 00:28:11,100
of be explicit these are things were

00:28:08,070 --> 00:28:13,080
considering nothing set in stone deine

00:28:11,100 --> 00:28:15,360
trait instead of saying instead of

00:28:13,080 --> 00:28:17,040
saying bear traits so you might say

00:28:15,360 --> 00:28:19,140
ampersand dine trait instead of

00:28:17,040 --> 00:28:20,850
ampersand traits and changes to our

00:28:19,140 --> 00:28:22,890
visibility system we might change things

00:28:20,850 --> 00:28:27,929
so that it's a you say crate F n instead

00:28:22,890 --> 00:28:29,130
of saying pub crate FN will see the

00:28:27,929 --> 00:28:31,350
crucial thing to take away from these

00:28:29,130 --> 00:28:32,940
bullets is that for the most part the

00:28:31,350 --> 00:28:35,340
epic system will enable syntactic

00:28:32,940 --> 00:28:36,960
changes those are the things we mostly

00:28:35,340 --> 00:28:39,929
be focusing on she just saw like you

00:28:36,960 --> 00:28:42,960
know the way things look now syntax

00:28:39,929 --> 00:28:44,309
changes can enable semantic changes but

00:28:42,960 --> 00:28:46,080
keep in mind because you have to link

00:28:44,309 --> 00:28:48,360
old code and new code you I don't expect

00:28:46,080 --> 00:28:50,100
to see massive revisions to semantics

00:28:48,360 --> 00:28:53,240
because in the end we have to be able to

00:28:50,100 --> 00:28:53,240
things together in a sane way

00:28:53,570 --> 00:28:58,020
so none of these changes though they're

00:28:56,790 --> 00:29:01,080
talking about it can happen without our

00:28:58,020 --> 00:29:03,120
community and so it's very important

00:29:01,080 --> 00:29:05,460
that everyone you know get involved and

00:29:03,120 --> 00:29:07,500
and hack on rusts use rust but also give

00:29:05,460 --> 00:29:08,940
back and work on helped contribute to

00:29:07,500 --> 00:29:10,890
the standard library and contribute new

00:29:08,940 --> 00:29:12,660
crates to the ecosystem and in

00:29:10,890 --> 00:29:14,040
particular I want to advertise the info

00:29:12,660 --> 00:29:16,410
period that's going on for the remainder

00:29:14,040 --> 00:29:18,630
of 2017 we're encouraging everyone at

00:29:16,410 --> 00:29:21,570
every level of knowledge to contribute

00:29:18,630 --> 00:29:23,610
to rust itself to making rush better

00:29:21,570 --> 00:29:25,799
during the Imperial I getting mentorship

00:29:23,610 --> 00:29:27,419
so you can read the blog post the info

00:29:25,799 --> 00:29:31,350
future for rust blog post on the rust

00:29:27,419 --> 00:29:32,490
blog that talks about this basically

00:29:31,350 --> 00:29:33,690
there's something there is something for

00:29:32,490 --> 00:29:35,100
you if you want to come help there is

00:29:33,690 --> 00:29:35,840
something for you and we will help you

00:29:35,100 --> 00:29:39,580
find it

00:29:35,840 --> 00:29:43,570
so final message on change

00:29:39,580 --> 00:29:46,299
so don't be like the Scrooge who's that

00:29:43,570 --> 00:29:50,950
buck was 2015 be like the Scrooge from

00:29:46,299 --> 00:29:53,830
2018 because yes change is hard but it

00:29:50,950 --> 00:29:57,150
can be hard fun let's get out and get in

00:29:53,830 --> 00:30:08,419
playing all right thank you

00:29:57,150 --> 00:30:08,419

YouTube URL: https://www.youtube.com/watch?v=jywiVWKm1TI


