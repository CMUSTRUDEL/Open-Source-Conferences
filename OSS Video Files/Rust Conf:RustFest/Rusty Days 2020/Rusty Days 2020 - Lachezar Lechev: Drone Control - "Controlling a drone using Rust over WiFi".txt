Title: Rusty Days 2020 - Lachezar Lechev: Drone Control - "Controlling a drone using Rust over WiFi"
Publication date: 2020-08-02
Playlist: Rusty Days 2020
Description: 
	Agenda ► https://rusty-days.org/agenda
Slides ►https://rusty-days.org/assets/slides/04-drone-control.pdf
Playlist with all talks ► https://www.youtube.com/playlist?list=PLf3u8NhoEikhTC5radGrmmqdkOK-xMDoZ

Follow ►
Facebook: https://rusty-days.org/facebook
Twitch: https://rusty-days.org/twitch
Twitter: https://rusty-days.org/twitter


This video ►
Have you flown a drone? What about writing Rust? Let me tell you about our efforts to hack on a drone using Rust and build a demo project that will showcase some practical capabilities.

The drone we are using has a couple of ways you can communicate with. We are focusing our efforts on the WiFi (UDP) communication and decoding the Frames used by the drone using the open-source C SDK provided by the manufacturer.

We will share with you what were the hurdles we've encountered as well as what we are planning for the future of the project.
Captions: 
	00:00:02,960 --> 00:00:06,799
hello

00:00:03,919 --> 00:00:08,160
everyone and welcome to my talk about

00:00:06,799 --> 00:00:12,160
drone control

00:00:08,160 --> 00:00:12,160
or controlling a drone using rust

00:00:12,400 --> 00:00:16,800
my name is lachizad lechev i know it's

00:00:15,839 --> 00:00:19,600
hard to pronounce

00:00:16,800 --> 00:00:20,000
or remember so don't worry if you get it

00:00:19,600 --> 00:00:23,680
wrong

00:00:20,000 --> 00:00:26,160
or forget it i'm from bulgaria

00:00:23,680 --> 00:00:27,920
and i'm currently working at addicts

00:00:26,160 --> 00:00:30,720
during the day

00:00:27,920 --> 00:00:32,320
i'm using roast for the last one and a

00:00:30,720 --> 00:00:35,600
half years

00:00:32,320 --> 00:00:36,320
yay and it's full-time job so this was

00:00:35,600 --> 00:00:38,559
my dream

00:00:36,320 --> 00:00:40,320
only two years ago and i finally

00:00:38,559 --> 00:00:42,840
achieved it

00:00:40,320 --> 00:00:44,239
our work is centered around the ethereum

00:00:42,840 --> 00:00:46,640
network

00:00:44,239 --> 00:00:47,600
blockchain ethereum blockchain at the

00:00:46,640 --> 00:00:51,120
moment

00:00:47,600 --> 00:00:54,640
and we are building a display at network

00:00:51,120 --> 00:00:57,120
for reduced upfront and increased user

00:00:54,640 --> 00:00:59,920
privacy

00:00:57,120 --> 00:01:01,680
at night however i play around the ira

00:00:59,920 --> 00:01:04,320
rust working group

00:01:01,680 --> 00:01:05,439
that we have started at the beginning of

00:01:04,320 --> 00:01:08,240
this year

00:01:05,439 --> 00:01:10,880
and the goal is to help and push the

00:01:08,240 --> 00:01:13,200
open source community

00:01:10,880 --> 00:01:14,080
to the growing into the growing

00:01:13,200 --> 00:01:17,360
aerospace

00:01:14,080 --> 00:01:21,280
industry by providing information

00:01:17,360 --> 00:01:24,159
materials tools uh crates and etc

00:01:21,280 --> 00:01:25,680
to the industry itself and to hobbyists

00:01:24,159 --> 00:01:28,479
of course

00:01:25,680 --> 00:01:30,320
one of the main reasons that i wanted to

00:01:28,479 --> 00:01:33,600
start this working group

00:01:30,320 --> 00:01:34,640
was in fact that i couldn't find enough

00:01:33,600 --> 00:01:38,840
information

00:01:34,640 --> 00:01:40,079
at a reasonable level that i can

00:01:38,840 --> 00:01:42,960
understand

00:01:40,079 --> 00:01:43,520
at my job and at the working group i

00:01:42,960 --> 00:01:47,280
make

00:01:43,520 --> 00:01:47,280
and build open source projects

00:01:47,759 --> 00:01:52,799
i love to travel a lot and combine

00:01:50,799 --> 00:01:55,520
combined with the fact that i'm location

00:01:52,799 --> 00:01:58,880
independent it's awesome

00:01:55,520 --> 00:02:03,360
however due to the current outbreak

00:01:58,880 --> 00:02:03,360
traveling is not a certain thing anymore

00:02:05,439 --> 00:02:12,400
combined with traveling i love to go to

00:02:09,520 --> 00:02:14,000
festivals and parties i especially like

00:02:12,400 --> 00:02:16,959
trans music

00:02:14,000 --> 00:02:18,080
after after all we have to blow some

00:02:16,959 --> 00:02:21,280
steam somehow

00:02:18,080 --> 00:02:25,360
from time to time apart from being

00:02:21,280 --> 00:02:27,680
software engineers and developers

00:02:25,360 --> 00:02:29,200
as you can also see i'm a heavy user of

00:02:27,680 --> 00:02:33,840
emojis as well

00:02:29,200 --> 00:02:33,840
they're part of me and i just like it

00:02:35,440 --> 00:02:42,239
today we're going to take a look at

00:02:38,800 --> 00:02:44,640
the pirate anavi 4k drone

00:02:42,239 --> 00:02:45,680
the company parrot makes a bunch of

00:02:44,640 --> 00:02:49,760
drones

00:02:45,680 --> 00:02:52,640
some of them fly some of them don't

00:02:49,760 --> 00:02:53,440
initially when the whole project started

00:02:52,640 --> 00:02:57,360
ignition

00:02:53,440 --> 00:03:00,640
one of the other co-founders of ira rust

00:02:57,360 --> 00:03:03,280
started hacking on a different drone

00:03:00,640 --> 00:03:04,480
it is called the jumping zoom and it's a

00:03:03,280 --> 00:03:07,599
remote controlled

00:03:04,480 --> 00:03:11,040
two-wheeler that can also jump

00:03:07,599 --> 00:03:11,840
however we as in i thought it would be

00:03:11,040 --> 00:03:14,319
awesome

00:03:11,840 --> 00:03:18,560
if we make it work for the flying drones

00:03:14,319 --> 00:03:21,360
and try to control them

00:03:18,560 --> 00:03:22,480
the picture you see here is one of the

00:03:21,360 --> 00:03:25,519
packages

00:03:22,480 --> 00:03:28,879
that the pirate company has of

00:03:25,519 --> 00:03:31,120
the anavi 4k drone it includes the

00:03:28,879 --> 00:03:33,519
sky controller as well that you can use

00:03:31,120 --> 00:03:35,599
to control the drone

00:03:33,519 --> 00:03:37,200
it is good time to mention that none of

00:03:35,599 --> 00:03:42,080
this is sponsored by them

00:03:37,200 --> 00:03:42,080
in any means at least not for now

00:03:42,319 --> 00:03:48,720
it is an accessible small drone

00:03:45,519 --> 00:03:52,000
especially because of the price and

00:03:48,720 --> 00:03:56,560
it's easy to work with and why

00:03:52,000 --> 00:03:59,920
did we choose it in the first place

00:03:56,560 --> 00:04:00,640
well we chose it because it has a lot of

00:03:59,920 --> 00:04:03,840
features

00:04:00,640 --> 00:04:07,439
including wi-fi over which you

00:04:03,840 --> 00:04:11,040
control the drone the drone has its own

00:04:07,439 --> 00:04:14,159
network that you can connect to

00:04:11,040 --> 00:04:17,199
it has a 4k camera

00:04:14,159 --> 00:04:22,079
and the parrot company provides a c

00:04:17,199 --> 00:04:24,400
sdk to be used for the drones

00:04:22,079 --> 00:04:25,360
it's open sourced and it's the main way

00:04:24,400 --> 00:04:28,560
we find

00:04:25,360 --> 00:04:30,160
many of the things that we need in order

00:04:28,560 --> 00:04:33,680
to hack on the drone

00:04:30,160 --> 00:04:34,960
using rust the company provides other

00:04:33,680 --> 00:04:38,800
sdks as well

00:04:34,960 --> 00:04:42,240
for building android and ios apps

00:04:38,800 --> 00:04:46,240
they also include a python

00:04:42,240 --> 00:04:49,440
version but it's using the csdk

00:04:46,240 --> 00:04:52,720
and that's where the other sdk pi

00:04:49,440 --> 00:04:52,720
part comes into play

00:04:53,440 --> 00:04:57,360
pi part is a python sdk and it's very

00:04:56,880 --> 00:05:00,400
very

00:04:57,360 --> 00:05:03,520
helpful when things don't work

00:05:00,400 --> 00:05:03,520
and you wonder why

00:05:06,800 --> 00:05:11,759
there is a simulation tool called sphinx

00:05:09,600 --> 00:05:15,120
it has many features that

00:05:11,759 --> 00:05:18,320
i have haven't reviewed or used yet

00:05:15,120 --> 00:05:21,759
however since i don't actually own an

00:05:18,320 --> 00:05:22,639
enough 4k drone it's very useful to play

00:05:21,759 --> 00:05:27,120
around with it

00:05:22,639 --> 00:05:27,120
and built the rust sdk with it

00:05:29,199 --> 00:05:36,320
there is also the free flight app which

00:05:32,800 --> 00:05:38,320
is for ios and android that gives you

00:05:36,320 --> 00:05:41,680
the ability to connect

00:05:38,320 --> 00:05:43,759
to any parrot drone and you can use it

00:05:41,680 --> 00:05:46,960
even for the simulation

00:05:43,759 --> 00:05:49,360
i tried it one day but that's not where

00:05:46,960 --> 00:05:52,960
what we are here for we want to use rust

00:05:49,360 --> 00:05:56,479
to control it

00:05:52,960 --> 00:05:59,919
there is the skies controller that i

00:05:56,479 --> 00:06:00,800
already mentioned and the list of

00:05:59,919 --> 00:06:07,840
features

00:06:00,800 --> 00:06:07,840
goes on

00:06:09,280 --> 00:06:12,960
now that we know what we are working

00:06:11,520 --> 00:06:15,440
with

00:06:12,960 --> 00:06:17,759
it's time to take a look at how does it

00:06:15,440 --> 00:06:17,759
work

00:06:18,880 --> 00:06:25,039
the main point now that

00:06:23,680 --> 00:06:27,280
it all has to do actually with

00:06:25,039 --> 00:06:30,400
communication

00:06:27,280 --> 00:06:31,120
and the way we communicate with the

00:06:30,400 --> 00:06:34,720
drone

00:06:31,120 --> 00:06:36,960
is over wifi the same way

00:06:34,720 --> 00:06:38,479
as the apps and the skype skype

00:06:36,960 --> 00:06:42,160
controller

00:06:38,479 --> 00:06:44,880
the skype controller is a to your phone

00:06:42,160 --> 00:06:46,160
it has its own separate wi-fi antennas

00:06:44,880 --> 00:06:49,599
and stuff

00:06:46,160 --> 00:06:52,240
and i think that the phone is used for

00:06:49,599 --> 00:06:53,759
the video stream itself instead of on

00:06:52,240 --> 00:06:56,639
controlling the

00:06:53,759 --> 00:06:58,240
uh the drone and regarding the

00:06:56,639 --> 00:07:00,560
connection

00:06:58,240 --> 00:07:01,599
and the communication we need to talk

00:07:00,560 --> 00:07:04,880
about three

00:07:01,599 --> 00:07:08,720
main points the first one

00:07:04,880 --> 00:07:12,160
is the handshake after connecting

00:07:08,720 --> 00:07:13,360
to the wi-fi of the drone we need to

00:07:12,160 --> 00:07:16,639
establish

00:07:13,360 --> 00:07:21,360
communication between our controller

00:07:16,639 --> 00:07:21,360
that is our program and the drone

00:07:22,000 --> 00:07:27,280
the pirate drones use their own protocol

00:07:24,880 --> 00:07:29,919
that we are going to take a look at

00:07:27,280 --> 00:07:30,639
it includes different mechanisms and

00:07:29,919 --> 00:07:33,039
things

00:07:30,639 --> 00:07:35,520
that we are still finding out how to

00:07:33,039 --> 00:07:35,520
work with

00:07:36,080 --> 00:07:40,319
and the protocol uses what we call

00:07:38,720 --> 00:07:43,680
frames

00:07:40,319 --> 00:07:47,520
and we will see what they look like

00:07:43,680 --> 00:07:47,520
and represent in a bit

00:07:49,199 --> 00:07:54,639
this is all incorporated in the ar sdk

00:07:52,800 --> 00:07:56,560
eras crate

00:07:54,639 --> 00:07:58,479
which is in heavy development stage

00:07:56,560 --> 00:08:01,440
right now aka

00:07:58,479 --> 00:08:01,440
work in progress

00:08:02,000 --> 00:08:07,039
and now let's start with the handshake

00:08:07,919 --> 00:08:11,039
after we have connected to the drone

00:08:10,000 --> 00:08:14,000
over

00:08:11,039 --> 00:08:16,400
wi-fi we need to establish the

00:08:14,000 --> 00:08:20,560
connection between our program

00:08:16,400 --> 00:08:20,560
aka the controller and the drone

00:08:23,199 --> 00:08:30,560
each drone has its own initial port it's

00:08:26,720 --> 00:08:34,880
usually four four four four four

00:08:30,560 --> 00:08:37,519
and we use tcp

00:08:34,880 --> 00:08:39,279
and make sure that we handle the

00:08:37,519 --> 00:08:43,360
handshake correctly

00:08:39,279 --> 00:08:43,360
especially the response from the drone

00:08:44,399 --> 00:08:51,200
through the established gcp connection

00:08:47,680 --> 00:08:54,880
we send the request which is serialized

00:08:51,200 --> 00:08:57,920
with saturday and of json into

00:08:54,880 --> 00:09:01,519
a json string it

00:08:57,920 --> 00:09:05,200
includes the d2c port which means

00:09:01,519 --> 00:09:08,720
drone to controller port alongside

00:09:05,200 --> 00:09:12,880
the controller name and type which

00:09:08,720 --> 00:09:15,920
i'm not really sure how the drone uses

00:09:12,880 --> 00:09:18,080
and there are other ports

00:09:15,920 --> 00:09:20,959
for the video streams which i haven't

00:09:18,080 --> 00:09:24,240
bothered to check yet

00:09:20,959 --> 00:09:25,600
after sending the request we should we

00:09:24,240 --> 00:09:28,959
should get a response

00:09:25,600 --> 00:09:33,920
in json which we deserialize

00:09:28,959 --> 00:09:33,920
again with zelda and sadly jason

00:09:35,360 --> 00:09:39,200
we get a controller to drone port from

00:09:38,480 --> 00:09:43,200
the

00:09:39,200 --> 00:09:46,720
drone and its response

00:09:43,200 --> 00:09:51,360
which is basically how the

00:09:46,720 --> 00:09:54,720
controller will speak to the drone

00:09:51,360 --> 00:09:57,920
it also includes a status field and

00:09:54,720 --> 00:09:59,519
if the status field is zero then we have

00:09:57,920 --> 00:10:01,360
a connection

00:09:59,519 --> 00:10:03,600
otherwise we need to try the handshake

00:10:01,360 --> 00:10:06,000
again

00:10:03,600 --> 00:10:07,120
the response provides other fields as

00:10:06,000 --> 00:10:11,279
well uh

00:10:07,120 --> 00:10:14,320
regarding other options ports etc

00:10:11,279 --> 00:10:17,519
uh we're we currently don't use them and

00:10:14,320 --> 00:10:18,640
honestly at this point i don't know what

00:10:17,519 --> 00:10:22,000
they

00:10:18,640 --> 00:10:22,000
are for yet

00:10:23,040 --> 00:10:29,920
and by this we have a connection hooray

00:10:27,200 --> 00:10:30,560
and to get a visual representation of

00:10:29,920 --> 00:10:33,600
what i

00:10:30,560 --> 00:10:37,279
just explained i've included

00:10:33,600 --> 00:10:40,240
the request logs here that you can see

00:10:37,279 --> 00:10:41,440
and we use the same four four four four

00:10:40,240 --> 00:10:44,480
four port

00:10:41,440 --> 00:10:47,200
to connect the drone and send

00:10:44,480 --> 00:10:48,160
the request to the drone as well as the

00:10:47,200 --> 00:10:51,200
field

00:10:48,160 --> 00:10:51,200
we sent to it

00:10:54,160 --> 00:10:59,279
and finally we have the successful

00:10:57,120 --> 00:11:02,560
response from the drone

00:10:59,279 --> 00:11:03,600
again you can see the controller to

00:11:02,560 --> 00:11:06,720
drone port

00:11:03,600 --> 00:11:07,680
and the status fields as well as the

00:11:06,720 --> 00:11:11,839
other

00:11:07,680 --> 00:11:11,839
fields that the drone sends

00:11:12,079 --> 00:11:16,320
and now that we have this connection

00:11:14,240 --> 00:11:21,120
with the drone established

00:11:16,320 --> 00:11:25,920
it's time to talk about the protocol

00:11:21,120 --> 00:11:29,200
the protocol uses what we call frames

00:11:25,920 --> 00:11:34,880
and the first part of the protocol

00:11:29,200 --> 00:11:38,000
is the ping-pong frames slash mechanism

00:11:34,880 --> 00:11:40,839
then we have the listener that

00:11:38,000 --> 00:11:42,320
listens to the provided drone controller

00:11:40,839 --> 00:11:45,920
port

00:11:42,320 --> 00:11:51,600
for incoming from the drone

00:11:45,920 --> 00:11:55,920
messages and frames and serializes them

00:11:51,600 --> 00:11:56,560
then finally we have the command sender

00:11:55,920 --> 00:12:00,240
which

00:11:56,560 --> 00:12:02,800
we will use to send frames to control

00:12:00,240 --> 00:12:02,800
the drone

00:12:05,760 --> 00:12:10,560
the ping pong frames and mechanism in a

00:12:08,639 --> 00:12:13,839
nutshell means that

00:12:10,560 --> 00:12:17,200
the drone sends us a pink frame

00:12:13,839 --> 00:12:19,760
with some gibberish data which i

00:12:17,200 --> 00:12:22,800
actually found out a couple of days ago

00:12:19,760 --> 00:12:26,240
before that i thought it also combines

00:12:22,800 --> 00:12:26,800
an actual frame however this is not the

00:12:26,240 --> 00:12:29,839
case

00:12:26,800 --> 00:12:33,440
it's just gibberish and

00:12:29,839 --> 00:12:37,360
the drone expects a response

00:12:33,440 --> 00:12:39,760
of that pink frame called punk

00:12:37,360 --> 00:12:43,040
which we will see how it works when we

00:12:39,760 --> 00:12:46,160
talk about the frames themselves

00:12:43,040 --> 00:12:49,120
the punk frame should contain the same

00:12:46,160 --> 00:12:52,480
data the same gibberish data that was

00:12:49,120 --> 00:12:56,160
received from the pink

00:12:52,480 --> 00:12:59,600
and if we don't send any punk response

00:12:56,160 --> 00:13:01,200
in seven seconds the drone usually

00:12:59,600 --> 00:13:04,560
disconnects the controller

00:13:01,200 --> 00:13:08,160
as in our program and we need to

00:13:04,560 --> 00:13:08,160
do the whole handshake again

00:13:11,279 --> 00:13:18,240
the listener at this point does

00:13:14,800 --> 00:13:21,040
some basic stuff which are

00:13:18,240 --> 00:13:22,000
crucial to the communication the

00:13:21,040 --> 00:13:26,800
connection

00:13:22,000 --> 00:13:30,639
itself and debugging and so on

00:13:26,800 --> 00:13:31,920
it uses a udp socket with the controller

00:13:30,639 --> 00:13:34,800
to drone ports

00:13:31,920 --> 00:13:36,959
that was provided by the drone during

00:13:34,800 --> 00:13:40,560
the handshake

00:13:36,959 --> 00:13:42,480
and each received message can contain

00:13:40,560 --> 00:13:44,880
more than one frame

00:13:42,480 --> 00:13:49,839
and we will see how we cope with this

00:13:44,880 --> 00:13:49,839
and extract each frame from the message

00:13:50,480 --> 00:13:56,800
the listener also deserializes

00:13:53,760 --> 00:13:59,920
all known and unknown frames

00:13:56,800 --> 00:14:00,240
since it's still working progress not

00:13:59,920 --> 00:14:03,440
all

00:14:00,240 --> 00:14:05,120
frame deserialization is implemented and

00:14:03,440 --> 00:14:08,720
this gives us

00:14:05,120 --> 00:14:09,920
an easy way to gradually decode each

00:14:08,720 --> 00:14:13,360
frame

00:14:09,920 --> 00:14:14,880
either by using the c or the pi priority

00:14:13,360 --> 00:14:17,279
sdks

00:14:14,880 --> 00:14:18,079
and looking into them and trying to

00:14:17,279 --> 00:14:21,440
understand

00:14:18,079 --> 00:14:21,440
what each byte means

00:14:24,160 --> 00:14:28,480
at this point the listener is handling

00:14:26,800 --> 00:14:31,920
pink responses

00:14:28,480 --> 00:14:35,440
by sending a new punk frame to

00:14:31,920 --> 00:14:37,680
the command sender so that it can also

00:14:35,440 --> 00:14:40,560
be sent to the drone

00:14:37,680 --> 00:14:41,839
as well as the so-called acknowledge

00:14:40,560 --> 00:14:45,279
frames

00:14:41,839 --> 00:14:48,399
which will get to it between

00:14:45,279 --> 00:14:52,720
two in a bit which will get to it

00:14:48,399 --> 00:14:55,120
in a bit i've also included some logs

00:14:52,720 --> 00:14:59,279
from the listener to better understand

00:14:55,120 --> 00:15:02,240
what what's happening as we can see

00:14:59,279 --> 00:15:04,639
we receive some bytes from the drone and

00:15:02,240 --> 00:15:11,839
then we see the serialized version

00:15:04,639 --> 00:15:14,320
of the parse bytes

00:15:11,839 --> 00:15:17,760
yeah we are going to take a look at each

00:15:14,320 --> 00:15:17,760
individual element in a bit

00:15:18,079 --> 00:15:25,279
on the other hand the command

00:15:21,519 --> 00:15:28,800
sender handles the sending of frames

00:15:25,279 --> 00:15:32,000
from our program to the drone

00:15:28,800 --> 00:15:35,199
it uses udp socket as well

00:15:32,000 --> 00:15:38,399
and we expect it to send frames

00:15:35,199 --> 00:15:41,759
from the controller to the drone

00:15:38,399 --> 00:15:43,759
on the drone controller port

00:15:41,759 --> 00:15:46,160
this is the same port that we have

00:15:43,759 --> 00:15:49,519
provided on the request

00:15:46,160 --> 00:15:49,519
when making the handshake

00:15:53,519 --> 00:15:56,959
right now it sends the raw bites to the

00:15:56,160 --> 00:15:59,839
drone

00:15:56,959 --> 00:16:02,720
the actual serialization is happening on

00:15:59,839 --> 00:16:02,720
a different place

00:16:04,079 --> 00:16:10,800
and the logging again it's

00:16:07,680 --> 00:16:14,560
straightforward this example

00:16:10,800 --> 00:16:18,079
is for the takeoff frame which will

00:16:14,560 --> 00:16:20,000
tell the anatomy 4k drone to how to

00:16:18,079 --> 00:16:22,959
magically take off

00:16:20,000 --> 00:16:24,959
and hover above the ground waiting for

00:16:22,959 --> 00:16:27,680
further frames

00:16:24,959 --> 00:16:27,680
and commands

00:16:32,959 --> 00:16:37,040
the earlier logs that we saw from the

00:16:35,839 --> 00:16:40,000
listener

00:16:37,040 --> 00:16:42,240
were actually the acknowledge response

00:16:40,000 --> 00:16:45,279
from the drone

00:16:42,240 --> 00:16:47,920
for the take off frame

00:16:45,279 --> 00:16:48,639
that we saw in the previous slide

00:16:47,920 --> 00:16:51,920
basically

00:16:48,639 --> 00:16:55,360
it it is saying that it received

00:16:51,920 --> 00:16:59,759
the frame and executed it

00:16:55,360 --> 00:17:02,959
in order to fully understand and

00:16:59,759 --> 00:17:04,160
know what each thing means we need to

00:17:02,959 --> 00:17:09,520
take cut

00:17:04,160 --> 00:17:12,559
the frames and as we mentioned before

00:17:09,520 --> 00:17:15,120
we can receive more than one frame

00:17:12,559 --> 00:17:16,000
from the drone and the way we

00:17:15,120 --> 00:17:19,120
distinguish

00:17:16,000 --> 00:17:21,760
between every frame like shown here

00:17:19,120 --> 00:17:24,160
is the way the frame and its bytes are

00:17:21,760 --> 00:17:26,319
arranged

00:17:24,160 --> 00:17:28,160
i've personally found that it's easier

00:17:26,319 --> 00:17:31,679
to understand the frame

00:17:28,160 --> 00:17:35,919
by representing the bytes as a u8

00:17:31,679 --> 00:17:35,919
or unsigned 8-bit numbers

00:17:36,480 --> 00:17:40,640
and this message can roughly be

00:17:39,280 --> 00:17:44,640
translated

00:17:40,640 --> 00:17:48,000
to this the first frame

00:17:44,640 --> 00:17:50,320
we have we can decode uh has a type

00:17:48,000 --> 00:17:52,480
data which means that it's a frame

00:17:50,320 --> 00:17:55,919
containing some data

00:17:52,480 --> 00:17:59,200
the buffer id is pink and

00:17:55,919 --> 00:18:00,960
following the buffer id we have the

00:17:59,200 --> 00:18:04,160
sequence id

00:18:00,960 --> 00:18:07,679
this sequence id is based on each

00:18:04,160 --> 00:18:09,039
individual buffer id and it starts from

00:18:07,679 --> 00:18:12,000
zero

00:18:09,039 --> 00:18:12,400
when the count gets to the limit of u8

00:18:12,000 --> 00:18:16,559
it

00:18:12,400 --> 00:18:19,919
overflows and starts from zero again

00:18:16,559 --> 00:18:20,559
this way uh we can send an acknowledge

00:18:19,919 --> 00:18:23,840
frame

00:18:20,559 --> 00:18:27,120
to confirm to the drone uh that we've

00:18:23,840 --> 00:18:30,000
received a specific frame

00:18:27,120 --> 00:18:31,039
but we can also make sure that the drone

00:18:30,000 --> 00:18:34,320
returns an

00:18:31,039 --> 00:18:34,880
acknowledge frame that guarantees us

00:18:34,320 --> 00:18:38,960
that

00:18:34,880 --> 00:18:42,000
a command we sent is executed

00:18:38,960 --> 00:18:44,559
for example we might want to know

00:18:42,000 --> 00:18:46,400
if the drone has actually landed and

00:18:44,559 --> 00:18:48,559
executed the landing command

00:18:46,400 --> 00:18:50,880
otherwise it can still hover over the

00:18:48,559 --> 00:18:54,559
surface

00:18:50,880 --> 00:18:57,360
the next four bytes uh or u32

00:18:54,559 --> 00:18:58,640
in a nutshell is the length of the full

00:18:57,360 --> 00:19:01,520
frame

00:18:58,640 --> 00:19:02,720
it is serialized using a little engine

00:19:01,520 --> 00:19:06,240
or the less

00:19:02,720 --> 00:19:09,679
less significant byte first

00:19:06,240 --> 00:19:12,880
the length includes the headers

00:19:09,679 --> 00:19:16,720
type buffer sequence id

00:19:12,880 --> 00:19:20,080
each represented by one byte

00:19:16,720 --> 00:19:23,679
the u32 that the length represents

00:19:20,080 --> 00:19:24,799
this is four bytes and the feature

00:19:23,679 --> 00:19:29,280
length

00:19:24,799 --> 00:19:29,280
of the frame if there is one

00:19:29,520 --> 00:19:36,080
and by this length we can split

00:19:32,799 --> 00:19:39,840
each and every uh individual frame if we

00:19:36,080 --> 00:19:39,840
have received more than one

00:19:40,160 --> 00:19:46,640
in similar matter we can

00:19:43,360 --> 00:19:49,679
decode the second frame

00:19:46,640 --> 00:19:53,360
and as in the first one

00:19:49,679 --> 00:19:54,799
and the type here is data with

00:19:53,360 --> 00:19:57,840
acknowledge

00:19:54,799 --> 00:19:59,679
which means that the drone requires us

00:19:57,840 --> 00:20:02,480
to send and acknowledge

00:19:59,679 --> 00:20:02,480
for this frame

00:20:03,520 --> 00:20:09,200
meaning that we need to confirm that we

00:20:06,559 --> 00:20:12,480
have received it

00:20:09,200 --> 00:20:16,320
then we have the buffer id

00:20:12,480 --> 00:20:17,760
dc event which means drawn to controller

00:20:16,320 --> 00:20:21,039
event

00:20:17,760 --> 00:20:24,320
and this is an an event that

00:20:21,039 --> 00:20:27,039
the drone sends us to notify us about

00:20:24,320 --> 00:20:27,760
something happening in this case uh it's

00:20:27,039 --> 00:20:31,120
sending us

00:20:27,760 --> 00:20:33,120
a calibration state that the drone is

00:20:31,120 --> 00:20:36,960
into

00:20:33,120 --> 00:20:40,400
and as we saw in the previous slides

00:20:36,960 --> 00:20:44,080
uh the message uh had 35

00:20:40,400 --> 00:20:45,039
bytes and we can see that the length of

00:20:44,080 --> 00:20:48,720
the first frame

00:20:45,039 --> 00:20:54,320
is 23 and the length of the second one

00:20:48,720 --> 00:20:54,320
is 12 which is a total of 35 bytes

00:21:01,440 --> 00:21:04,960
and with the current implementation

00:21:03,840 --> 00:21:09,200
implemented

00:21:04,960 --> 00:21:09,200
types this looks like so

00:21:12,240 --> 00:21:19,039
to elaborate a bit on the

00:21:16,000 --> 00:21:22,320
call buffer id and sequence id

00:21:19,039 --> 00:21:24,159
you can see that the pink frame has a

00:21:22,320 --> 00:21:27,120
sequence id1

00:21:24,159 --> 00:21:28,880
and the dc event also has a sequence id

00:21:27,120 --> 00:21:31,919
of one

00:21:28,880 --> 00:21:33,039
each buffer id has its own counter the

00:21:31,919 --> 00:21:36,080
next time we

00:21:33,039 --> 00:21:39,600
receive a pink frame it should be

00:21:36,080 --> 00:21:44,320
with a sequence of two the same goes for

00:21:39,600 --> 00:21:46,559
the frames that we are sending

00:21:44,320 --> 00:21:48,080
as you can also see not all types are

00:21:46,559 --> 00:21:51,600
currently implemented

00:21:48,080 --> 00:21:54,960
and defined and although the pink

00:21:51,600 --> 00:21:58,480
uh in the pink frame we see

00:21:54,960 --> 00:22:02,080
that the feature is unknown

00:21:58,480 --> 00:22:04,960
and with the value of 3 this is not

00:22:02,080 --> 00:22:06,559
used since it's part of the gibberish

00:22:04,960 --> 00:22:13,679
date of ping

00:22:06,559 --> 00:22:16,799
and not an actual feature value now

00:22:13,679 --> 00:22:19,520
let's take a look at the type and the

00:22:16,799 --> 00:22:19,520
buffer id

00:22:20,080 --> 00:22:27,440
the type basically means that

00:22:24,080 --> 00:22:30,320
what type of frame we have what kind

00:22:27,440 --> 00:22:32,640
as you can see we have acknowledged data

00:22:30,320 --> 00:22:35,840
most of them are easy to

00:22:32,640 --> 00:22:38,960
uh yeah to to understand

00:22:35,840 --> 00:22:41,039
but some of them we still don't know how

00:22:38,960 --> 00:22:44,240
to use or

00:22:41,039 --> 00:22:45,600
yeah we haven't looked at them on the

00:22:44,240 --> 00:22:48,640
other side

00:22:45,600 --> 00:22:50,640
we see the buffer id

00:22:48,640 --> 00:22:52,880
they are usually separated in two

00:22:50,640 --> 00:22:56,159
distinct categories

00:22:52,880 --> 00:22:58,159
from the drone to the controller they

00:22:56,159 --> 00:23:01,600
are usually prefixed with dc

00:22:58,159 --> 00:23:04,080
uh not all uh the ping

00:23:01,600 --> 00:23:05,039
and the acknowledge from sent with

00:23:04,080 --> 00:23:07,919
technology

00:23:05,039 --> 00:23:09,600
the last one uh they are not prefixed

00:23:07,919 --> 00:23:13,360
yet

00:23:09,600 --> 00:23:16,559
and uh we can see that

00:23:13,360 --> 00:23:18,640
the punk is not also not prefixed and

00:23:16,559 --> 00:23:20,720
it's part of the controller to draw

00:23:18,640 --> 00:23:23,600
buffer ids

00:23:20,720 --> 00:23:25,039
these are the buffer ids that we're

00:23:23,600 --> 00:23:28,240
going to use to send

00:23:25,039 --> 00:23:32,480
frames to the uh

00:23:28,240 --> 00:23:33,039
drone and we already saw the dc event in

00:23:32,480 --> 00:23:34,880
action

00:23:33,039 --> 00:23:36,080
uh when we took a look at the

00:23:34,880 --> 00:23:40,480
calibration state

00:23:36,080 --> 00:23:40,480
example from the previous slide

00:23:45,120 --> 00:23:48,840
now that we know at least what the

00:23:46,960 --> 00:23:52,240
headers do and

00:23:48,840 --> 00:23:56,000
how what the the frame looks like

00:23:52,240 --> 00:23:57,840
and represents it's now time to

00:23:56,000 --> 00:23:59,919
take a look at the frame itself and

00:23:57,840 --> 00:24:03,520
build a whole frame

00:23:59,919 --> 00:24:07,200
which we can use to send to the drone

00:24:03,520 --> 00:24:08,960
the frame struct is pretty simple and

00:24:07,200 --> 00:24:11,360
straightforward

00:24:08,960 --> 00:24:13,120
the bulk of the work however is in the

00:24:11,360 --> 00:24:16,559
features

00:24:13,120 --> 00:24:20,559
those features represent each and every

00:24:16,559 --> 00:24:24,400
command event setting state

00:24:20,559 --> 00:24:28,080
etc that the drone understands

00:24:24,400 --> 00:24:31,520
some features include only simple values

00:24:28,080 --> 00:24:34,799
that we saw in the previous example

00:24:31,520 --> 00:24:38,960
some of the features include strings

00:24:34,799 --> 00:24:41,440
and special parsing like for example the

00:24:38,960 --> 00:24:43,440
setting the date and type time of the

00:24:41,440 --> 00:24:45,760
drone

00:24:43,440 --> 00:24:47,039
even the frame for sending piloting

00:24:45,760 --> 00:24:50,880
commands to the drone

00:24:47,039 --> 00:24:51,760
includes a timestamp that is specially

00:24:50,880 --> 00:24:56,559
encoded

00:24:51,760 --> 00:24:59,200
that is in a specific format let's say

00:24:56,559 --> 00:25:00,320
and we need to parse it for both

00:24:59,200 --> 00:25:03,520
serialization

00:25:00,320 --> 00:25:07,039
and the serialization it is

00:25:03,520 --> 00:25:10,000
important to mention though that

00:25:07,039 --> 00:25:12,320
when we are serializing the frame we

00:25:10,000 --> 00:25:16,320
serialize the feature first

00:25:12,320 --> 00:25:17,600
of the frame and then we can calculate

00:25:16,320 --> 00:25:20,799
the total length

00:25:17,600 --> 00:25:20,799
of the frame in bytes

00:25:21,200 --> 00:25:25,360
when we have the total length we can

00:25:23,440 --> 00:25:28,080
encode it

00:25:25,360 --> 00:25:28,880
at the right bytes in order for the

00:25:28,080 --> 00:25:32,799
frame to be

00:25:28,880 --> 00:25:36,480
fully ready to be sent to the drone

00:25:32,799 --> 00:25:40,240
as we saw in the messages example

00:25:36,480 --> 00:25:43,840
uh it's usually like the third byte to

00:25:40,240 --> 00:25:43,840
the seven or something like that

00:25:47,039 --> 00:25:50,880
for the actual serialization and the

00:25:49,840 --> 00:25:53,919
serialization

00:25:50,880 --> 00:25:57,279
of the frames we are using the

00:25:53,919 --> 00:26:00,400
crate scroll this means that

00:25:57,279 --> 00:26:04,320
for each struct or enum

00:26:00,400 --> 00:26:07,360
we have to implement try into context

00:26:04,320 --> 00:26:10,240
and try from context which

00:26:07,360 --> 00:26:12,400
gives us the ability to serialize and

00:26:10,240 --> 00:26:15,520
serialize the bytes

00:26:12,400 --> 00:26:17,840
as we saw earlier this does require a

00:26:15,520 --> 00:26:18,640
lot of research and boilerplate at this

00:26:17,840 --> 00:26:21,840
point

00:26:18,640 --> 00:26:24,000
in order to map every single feature

00:26:21,840 --> 00:26:27,039
that we can have

00:26:24,000 --> 00:26:30,080
and this is why yeah we still have a lot

00:26:27,039 --> 00:26:32,159
to implement and track down

00:26:30,080 --> 00:26:34,400
in order to finish the whole

00:26:32,159 --> 00:26:39,440
serialization and the serialization

00:26:34,400 --> 00:26:42,320
frames now

00:26:39,440 --> 00:26:44,080
i was going to show you a gif of a

00:26:42,320 --> 00:26:46,480
working example

00:26:44,080 --> 00:26:47,279
however let's see how the gods of life

00:26:46,480 --> 00:26:51,440
demo

00:26:47,279 --> 00:26:55,679
uh if they're yeah going to allow me to

00:26:51,440 --> 00:27:00,559
show it live to you instead of uh

00:26:55,679 --> 00:27:00,559
actual gif so

00:27:00,720 --> 00:27:07,760
first we need to start the sphinx 2

00:27:04,400 --> 00:27:10,960
it's uh it's pretty simple command

00:27:07,760 --> 00:27:14,720
uh they it does steal your

00:27:10,960 --> 00:27:15,679
wi-fi card uh because it needs to create

00:27:14,720 --> 00:27:18,880
the same

00:27:15,679 --> 00:27:22,399
wi-fi as in the drone it uses

00:27:18,880 --> 00:27:26,000
the same firmware as the drone

00:27:22,399 --> 00:27:28,320
and it also includes this dot drone

00:27:26,000 --> 00:27:29,360
file that has some settings you can

00:27:28,320 --> 00:27:34,720
tweak

00:27:29,360 --> 00:27:37,679
and the 3d model and stuff like that

00:27:34,720 --> 00:27:39,360
when we started uh when we started it's

00:27:37,679 --> 00:27:43,039
going to give us this

00:27:39,360 --> 00:27:46,000
gazebo ui and

00:27:43,039 --> 00:27:46,880
we can see the drone right here in the

00:27:46,000 --> 00:27:50,640
middle

00:27:46,880 --> 00:27:54,159
maybe i can yeah and

00:27:50,640 --> 00:27:56,960
if i rotate it

00:27:54,159 --> 00:27:58,720
we can see the camera here so it's

00:27:56,960 --> 00:28:03,520
pointing

00:27:58,720 --> 00:28:06,640
at the back right now for reference

00:28:03,520 --> 00:28:10,000
we can insert

00:28:06,640 --> 00:28:13,200
a 3d model of some building

00:28:10,000 --> 00:28:17,039
an apartment building and

00:28:13,200 --> 00:28:20,480
usually there is a video stream

00:28:17,039 --> 00:28:22,799
of the drone however because i don't

00:28:20,480 --> 00:28:26,640
have a dedicated gpu

00:28:22,799 --> 00:28:31,120
uh i'm not sure if it's going to work

00:28:26,640 --> 00:28:34,399
very well it usually doesn't

00:28:31,120 --> 00:28:37,760
it gets to the yeah

00:28:34,399 --> 00:28:41,440
to the initial view of the webcam

00:28:37,760 --> 00:28:44,480
of the camera actually and

00:28:41,440 --> 00:28:48,159
then it doesn't it doesn't update

00:28:44,480 --> 00:28:50,720
until the drone has landed

00:28:48,159 --> 00:28:52,240
however uh let's try it and see if it

00:28:50,720 --> 00:28:55,039
works

00:28:52,240 --> 00:28:56,000
so we have the drone here uh i have this

00:28:55,039 --> 00:28:59,039
example

00:28:56,000 --> 00:29:02,640
uh for taking off with the drone

00:28:59,039 --> 00:29:04,080
and i should take off hover for a couple

00:29:02,640 --> 00:29:07,279
of seconds

00:29:04,080 --> 00:29:10,240
then it should fly up and down

00:29:07,279 --> 00:29:10,240
and land

00:29:10,480 --> 00:29:15,440
as we can see here uh the logs

00:29:13,600 --> 00:29:17,200
that i showed earlier with all the

00:29:15,440 --> 00:29:20,799
frames

00:29:17,200 --> 00:29:24,000
and the actual drone now moving and

00:29:20,799 --> 00:29:27,200
accepting the commands we are sending

00:29:24,000 --> 00:29:30,320
let's try the video nope the video is

00:29:27,200 --> 00:29:32,559
broken so i'll just close it

00:29:30,320 --> 00:29:34,080
and we can see that we're currently

00:29:32,559 --> 00:29:37,120
sending the

00:29:34,080 --> 00:29:40,000
take down command and now

00:29:37,120 --> 00:29:41,120
we've just sent the landing command and

00:29:40,000 --> 00:29:44,320
the drone has landed

00:29:41,120 --> 00:29:46,159
successfully the drone

00:29:44,320 --> 00:29:47,760
is we're still keeping the connection

00:29:46,159 --> 00:29:51,520
with the drone

00:29:47,760 --> 00:29:55,600
and it's still sending some information

00:29:51,520 --> 00:29:58,159
although it has landed and we can still

00:29:55,600 --> 00:29:59,600
start it up again very easily if we send

00:29:58,159 --> 00:30:02,399
another

00:29:59,600 --> 00:30:02,399
takeoff command

00:30:03,200 --> 00:30:13,919
and thankfully this worked yay

00:30:08,559 --> 00:30:13,919
demo time yes oops

00:30:15,360 --> 00:30:23,039
this is uh still work in progress

00:30:19,679 --> 00:30:25,440
pretty much and we have a long long way

00:30:23,039 --> 00:30:25,440
to go

00:30:25,520 --> 00:30:29,440
however it was really fun to build this

00:30:28,480 --> 00:30:32,399
and

00:30:29,440 --> 00:30:35,120
we are exploring new things that we can

00:30:32,399 --> 00:30:38,159
make and do with the drone

00:30:35,120 --> 00:30:38,640
i've been in contact for example uh with

00:30:38,159 --> 00:30:41,919
the

00:30:38,640 --> 00:30:42,320
worst computer vision working group and

00:30:41,919 --> 00:30:45,679
i

00:30:42,320 --> 00:30:49,279
hope we can make some post processing

00:30:45,679 --> 00:30:49,279
of the video from the drone

00:30:49,520 --> 00:30:56,480
we still have a lot of line to do

00:30:53,520 --> 00:30:58,080
especially to figure out what is a good

00:30:56,480 --> 00:31:01,840
approach for the api

00:30:58,080 --> 00:31:05,600
uh to make it easier more idiomatic

00:31:01,840 --> 00:31:09,440
to use and to control the drone and each

00:31:05,600 --> 00:31:09,440
aspect of the flying itself

00:31:09,760 --> 00:31:15,200
there are of course much improvements

00:31:12,880 --> 00:31:16,080
it's just hacking at this point and

00:31:15,200 --> 00:31:18,240
trying to make

00:31:16,080 --> 00:31:20,000
things work there are definitely

00:31:18,240 --> 00:31:23,279
improvements to be made

00:31:20,000 --> 00:31:26,320
especially separating the frames

00:31:23,279 --> 00:31:29,519
by receiving frames and

00:31:26,320 --> 00:31:33,200
sending frames to make it

00:31:29,519 --> 00:31:35,840
more comfortable to work with them and

00:31:33,200 --> 00:31:37,279
built the correct frames instead of

00:31:35,840 --> 00:31:41,200
sending something that

00:31:37,279 --> 00:31:44,159
the drone won't understand and

00:31:41,200 --> 00:31:46,000
some of the other mechanisms that i

00:31:44,159 --> 00:31:49,679
haven't mentioned here

00:31:46,000 --> 00:31:52,880
especially around the flying and

00:31:49,679 --> 00:31:57,600
sending the commands and receiving

00:31:52,880 --> 00:31:57,600
outputs of them or confirmations

00:31:57,919 --> 00:32:02,159
we still have a lot of implementations

00:32:00,000 --> 00:32:05,279
to do all the features

00:32:02,159 --> 00:32:07,600
uh and um

00:32:05,279 --> 00:32:08,799
yeah we need to be able to distinguish

00:32:07,600 --> 00:32:12,320
between the receiving

00:32:08,799 --> 00:32:14,640
and the sending because uh

00:32:12,320 --> 00:32:15,440
yeah when we receive an unknown frame

00:32:14,640 --> 00:32:17,919
and

00:32:15,440 --> 00:32:19,679
we don't know how to handle it how this

00:32:17,919 --> 00:32:22,159
can crash the drone

00:32:19,679 --> 00:32:29,279
and we should know all the correct

00:32:22,159 --> 00:32:32,960
values for that i hope

00:32:29,279 --> 00:32:36,880
this whole experience is inspiring

00:32:32,960 --> 00:32:39,760
because we had a lot of fun building it

00:32:36,880 --> 00:32:40,720
especially thanks to ignition who

00:32:39,760 --> 00:32:43,840
started

00:32:40,720 --> 00:32:45,279
the whole journey starting with the the

00:32:43,840 --> 00:32:48,559
small jumping sumo

00:32:45,279 --> 00:32:51,440
and then i just hey let's try

00:32:48,559 --> 00:32:52,640
the flying drone we had a lot of

00:32:51,440 --> 00:32:55,679
frustration

00:32:52,640 --> 00:32:57,360
why does it work what's broken why does

00:32:55,679 --> 00:33:00,799
it disconnect

00:32:57,360 --> 00:33:04,320
however uh with enough time and

00:33:00,799 --> 00:33:08,720
uh how to say it with enough

00:33:04,320 --> 00:33:11,279
enough uh yeah

00:33:08,720 --> 00:33:12,559
when you when you want to do something

00:33:11,279 --> 00:33:15,200
and you want it really hard

00:33:12,559 --> 00:33:17,440
you can achieve it it's just a matter of

00:33:15,200 --> 00:33:17,440
time

00:33:17,519 --> 00:33:21,919
and this project is part of the aero

00:33:20,240 --> 00:33:24,960
rust working group

00:33:21,919 --> 00:33:28,080
you can find the sdk repository

00:33:24,960 --> 00:33:30,880
below as well as some other cool

00:33:28,080 --> 00:33:31,760
projects we are working on in our github

00:33:30,880 --> 00:33:34,960
repository

00:33:31,760 --> 00:33:35,519
and organization i've provided some

00:33:34,960 --> 00:33:39,360
links

00:33:35,519 --> 00:33:42,960
to some of the parrots tools

00:33:39,360 --> 00:33:46,320
as well as the rust computer vision

00:33:42,960 --> 00:33:53,840
organization if you're interested

00:33:46,320 --> 00:33:53,840
in that and thank you for your time

00:34:09,280 --> 00:34:21,839
okay perfect

00:34:22,960 --> 00:34:28,320
oh a couple of slides

00:34:32,839 --> 00:34:35,839
sorry

00:34:38,720 --> 00:34:44,879
i am i'm open for questions so please

00:34:41,919 --> 00:34:45,200
share them on whatever streaming portal

00:34:44,879 --> 00:34:49,839
you're

00:34:45,200 --> 00:34:49,839
looking this at

00:35:13,359 --> 00:35:19,680
question on twitch rp

00:35:16,640 --> 00:35:22,800
ruiz sorry if i missed this

00:35:19,680 --> 00:35:23,599
at the beginning but is this an os

00:35:22,800 --> 00:35:26,880
project

00:35:23,599 --> 00:35:30,640
anyway one can collaborate

00:35:26,880 --> 00:35:31,680
yes the software is free and open source

00:35:30,640 --> 00:35:35,040
right now

00:35:31,680 --> 00:35:36,400
and i have provided you in the last

00:35:35,040 --> 00:35:38,480
slide with the

00:35:36,400 --> 00:35:45,839
actual repository that you can get

00:35:38,480 --> 00:35:45,839
involved in

00:35:47,280 --> 00:35:51,359
just jumping into the discord server ask

00:35:49,760 --> 00:35:53,440
questions

00:35:51,359 --> 00:35:56,079
there are a lot of people there

00:35:53,440 --> 00:35:59,359
especially people with backgrounds in

00:35:56,079 --> 00:36:02,480
whatever are aerospace engineers and

00:35:59,359 --> 00:36:06,400
material engineers we have separate

00:36:02,480 --> 00:36:08,160
uh yeah separate groups of people

00:36:06,400 --> 00:36:09,839
working on different projects in

00:36:08,160 --> 00:36:14,400
different areas

00:36:09,839 --> 00:36:17,839
okay another question youtube as big new

00:36:14,400 --> 00:36:22,320
oh sorry it's big neo

00:36:17,839 --> 00:36:25,760
uh would it be possible to run

00:36:22,320 --> 00:36:27,040
rust flight controller software directly

00:36:25,760 --> 00:36:30,240
on the drone

00:36:27,040 --> 00:36:33,440
without the network round trip

00:36:30,240 --> 00:36:35,920
yeah i haven't checked that probably

00:36:33,440 --> 00:36:37,920
it might be possible to flash some

00:36:35,920 --> 00:36:41,040
custom firmware on it

00:36:37,920 --> 00:36:43,760
but at this point we're still playing

00:36:41,040 --> 00:36:47,599
with the wi-fi

00:36:43,760 --> 00:36:50,240
question on twitch x kage

00:36:47,599 --> 00:36:51,359
do you welcome contributors without much

00:36:50,240 --> 00:36:55,040
experience

00:36:51,359 --> 00:36:58,160
yes we do the whole point of the

00:36:55,040 --> 00:36:59,920
ira rust community not only a working

00:36:58,160 --> 00:37:03,839
group we are a whole community

00:36:59,920 --> 00:37:07,359
is to share knowledge and information

00:37:03,839 --> 00:37:11,119
on various topics about aero space

00:37:07,359 --> 00:37:15,520
and engineering and whatever space even

00:37:11,119 --> 00:37:18,720
so it's definitely encouraging to

00:37:15,520 --> 00:37:20,880
see new people coming in and trying to

00:37:18,720 --> 00:37:22,000
bring them up to speed or try to help

00:37:20,880 --> 00:37:37,839
them

00:37:22,000 --> 00:37:37,839
find their place

00:37:39,200 --> 00:37:51,839
well another questions maybe i can

00:37:42,240 --> 00:37:51,839
return the slides that we've missed

00:37:56,079 --> 00:38:02,160
youtube boris kiran

00:37:59,440 --> 00:38:04,079
is their interest in space industry to

00:38:02,160 --> 00:38:07,280
use rust uh

00:38:04,079 --> 00:38:07,680
yes yes there is uh there is uh quite a

00:38:07,280 --> 00:38:09,839
big

00:38:07,680 --> 00:38:11,119
interest right now especially in the

00:38:09,839 --> 00:38:14,640
rust community

00:38:11,119 --> 00:38:18,240
as far as i know on another conference

00:38:14,640 --> 00:38:21,520
on oxidize they were talking about

00:38:18,240 --> 00:38:25,520
uh how they want to bring uh the rust

00:38:21,520 --> 00:38:26,720
and to verify the compiler or of this

00:38:25,520 --> 00:38:30,160
part of it

00:38:26,720 --> 00:38:33,520
uh to be used in uh yeah

00:38:30,160 --> 00:38:36,880
in space because there are really tight

00:38:33,520 --> 00:38:37,920
uh things that have like verification of

00:38:36,880 --> 00:38:40,000
the tools

00:38:37,920 --> 00:38:41,760
each tool must be verified that it does

00:38:40,000 --> 00:38:46,240
what it uh it's meant to be

00:38:41,760 --> 00:38:46,960
and and it's defined somehow question

00:38:46,240 --> 00:38:50,000
youtube

00:38:46,960 --> 00:38:50,320
michael lazovsky have you tried to write

00:38:50,000 --> 00:38:53,440
it

00:38:50,320 --> 00:38:57,040
in other languages for example c

00:38:53,440 --> 00:39:00,240
or c plus plus ah no i'm

00:38:57,040 --> 00:39:03,440
mainly working with rust nowadays and

00:39:00,240 --> 00:39:05,839
i don't even know cnc plus plus

00:39:03,440 --> 00:39:05,839
a lot

00:39:11,680 --> 00:39:18,160
however the main sdk is actually

00:39:15,440 --> 00:39:29,839
in c so it might be interesting to take

00:39:18,160 --> 00:39:29,839
a look at it

00:39:30,640 --> 00:39:37,839
okay uh okay

00:39:35,040 --> 00:39:39,599
so i need to pick somebody with the most

00:39:37,839 --> 00:39:42,800
interesting question

00:39:39,599 --> 00:39:47,760
i definitely

00:39:42,800 --> 00:39:51,760
like questions about irrest because

00:39:47,760 --> 00:39:54,720
the main idea is to share information

00:39:51,760 --> 00:39:56,880
and although i don't know anything about

00:39:54,720 --> 00:40:00,160
drones or space

00:39:56,880 --> 00:40:03,520
i can actually go somewhere and

00:40:00,160 --> 00:40:08,480
ask somebody and start preparing myself

00:40:03,520 --> 00:40:12,400
even for a career there so

00:40:08,480 --> 00:40:12,400
in that case i would like to

00:40:15,760 --> 00:40:20,079
okay t twitch another question final

00:40:18,480 --> 00:40:24,000
question okay

00:40:20,079 --> 00:40:27,359
final spartan i want we need to have

00:40:24,000 --> 00:40:31,760
a compiler purely made from rust

00:40:27,359 --> 00:40:32,640
before we can verify it targeting llvm

00:40:31,760 --> 00:40:36,240
would be

00:40:32,640 --> 00:40:39,359
heartache to verify

00:40:36,240 --> 00:40:43,280
if i remember correctly uh we don't

00:40:39,359 --> 00:40:46,560
need pure uh rust compiler to do so

00:40:43,280 --> 00:40:49,119
uh there are subsets of the c

00:40:46,560 --> 00:40:50,160
or c plus plus compilers that are

00:40:49,119 --> 00:40:53,119
verified

00:40:50,160 --> 00:40:54,800
as far as i know and we can do the same

00:40:53,119 --> 00:40:58,000
thing for rust

00:40:54,800 --> 00:41:00,800
um especially um

00:40:58,000 --> 00:41:01,599
given that we now have two back ends or

00:41:00,800 --> 00:41:04,880
front ends

00:41:01,599 --> 00:41:07,280
uh keep forgetting with crane lift

00:41:04,880 --> 00:41:08,560
we can take a subset of rust and try to

00:41:07,280 --> 00:41:12,000
verify it

00:41:08,560 --> 00:41:12,480
bit by bit until we can start using it

00:41:12,000 --> 00:41:15,520
in

00:41:12,480 --> 00:41:19,200
space applications

00:41:15,520 --> 00:41:22,560
and as i said i do like

00:41:19,200 --> 00:41:27,119
questions uh regarding ir worst so

00:41:22,560 --> 00:41:27,119
i would say x say cage

00:41:28,880 --> 00:41:35,839
i'll choose you best question

00:41:36,079 --> 00:41:49,839
uh yeah from twitch

00:41:52,319 --> 00:41:55,520
so thank you everybody sorry i'm a bit

00:41:54,960 --> 00:41:58,240
nervous

00:41:55,520 --> 00:42:00,560
talking in front of people however it

00:41:58,240 --> 00:42:03,680
was really fun and i hope you

00:42:00,560 --> 00:42:06,560
had some inspirational things that you

00:42:03,680 --> 00:42:06,560
found in my talk

00:42:14,839 --> 00:42:17,839
bye

00:42:19,280 --> 00:42:21,359

YouTube URL: https://www.youtube.com/watch?v=e2mJq9qm_Io


