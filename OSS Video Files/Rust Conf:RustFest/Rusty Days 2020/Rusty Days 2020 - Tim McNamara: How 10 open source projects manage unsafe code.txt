Title: Rusty Days 2020 - Tim McNamara: How 10 open source projects manage unsafe code
Publication date: 2020-08-02
Playlist: Rusty Days 2020
Description: 
	Agenda ► https://rusty-days.org/agenda
Slides ►https://rusty-days.org/assets/slides/08-how-10-open-source-projects-manage-unsafe-code.pdf
Playlist with all talks ► https://www.youtube.com/playlist?list=PLf3u8NhoEikhTC5radGrmmqdkOK-xMDoZ

Follow ►
Facebook: https://rusty-days.org/facebook
Twitch: https://rusty-days.org/twitch
Twitter: https://rusty-days.org/twitter

This video ►
Is it safe to use unsafe? Learn why some projects need unsafe code and how projects manage its risks.

This talk will briefly discuss what the unsafe keyword enables and what its risks are. The bulk of time will be spent discussing how projects manage those risks. It finishes by providing recommendations based on that analysis.

Projects surveyed include:
* Servo (Mozilla)
* Fuchsia OS (Google)
* fast_rsync (Dropbox)
* winrt-rs (Microsoft)
* Firecracker (AWS)
* Linkerd2
Captions: 
	00:00:04,319 --> 00:00:09,280
hello good morning good evening

00:00:06,240 --> 00:00:09,760
uh good afternoon i'm speaking to you

00:00:09,280 --> 00:00:12,880
from

00:00:09,760 --> 00:00:14,160
uh before dawn in new zealand and i am

00:00:12,880 --> 00:00:16,640
absolutely delighted

00:00:14,160 --> 00:00:17,440
to be part of rusty days i think it's

00:00:16,640 --> 00:00:20,560
fantastic

00:00:17,440 --> 00:00:23,920
that we've been able to take all the the

00:00:20,560 --> 00:00:26,800
um roster warsaw team has been able to

00:00:23,920 --> 00:00:28,080
take what has been quite a negative

00:00:26,800 --> 00:00:29,920
pandemic

00:00:28,080 --> 00:00:31,359
and turn it into a global event which is

00:00:29,920 --> 00:00:34,480
which is perfect

00:00:31,359 --> 00:00:38,480
i uh i should begin

00:00:34,480 --> 00:00:39,760
so uh just to reiterate i'm sure this

00:00:38,480 --> 00:00:41,680
will come through on the stream

00:00:39,760 --> 00:00:45,360
i'm more than happy to take questions by

00:00:41,680 --> 00:00:48,719
either any channel via twitch or youtube

00:00:45,360 --> 00:00:51,039
or i think there's a third channel also

00:00:48,719 --> 00:00:52,719
and just ask questions online and i will

00:00:51,039 --> 00:00:54,879
try to

00:00:52,719 --> 00:00:56,960
answer them as we go the team is

00:00:54,879 --> 00:00:58,719
actually sitting behind me

00:00:56,960 --> 00:01:00,480
monitoring all of those streams so

00:00:58,719 --> 00:01:03,520
that's great

00:01:00,480 --> 00:01:05,600
okay where should we go we'll start with

00:01:03,520 --> 00:01:09,920
uh

00:01:05,600 --> 00:01:12,080
start with moving something

00:01:09,920 --> 00:01:14,080
why is my screen not there we are

00:01:12,080 --> 00:01:17,280
introduction

00:01:14,080 --> 00:01:19,680
who am i i tweet about rust um

00:01:17,280 --> 00:01:21,280
on tim clicks i spend a whole bunch of

00:01:19,680 --> 00:01:23,520
time wasting time

00:01:21,280 --> 00:01:24,640
about rust on reddit i do live coding on

00:01:23,520 --> 00:01:27,439
twitch i

00:01:24,640 --> 00:01:27,759
make videos on youtube um i write books

00:01:27,439 --> 00:01:29,040
so

00:01:27,759 --> 00:01:31,040
um i've actually written this thing

00:01:29,040 --> 00:01:32,159
called wrestling action uh one of the

00:01:31,040 --> 00:01:34,799
reasons why i do that

00:01:32,159 --> 00:01:36,640
is that i've kind of taken it upon

00:01:34,799 --> 00:01:41,040
myself to shorten everyone's learning

00:01:36,640 --> 00:01:44,159
journey by 100 hours um

00:01:41,040 --> 00:01:46,000
now if you have just decided to come

00:01:44,159 --> 00:01:49,680
to this talk because you want to know

00:01:46,000 --> 00:01:53,600
how to apply unsafe to your own project

00:01:49,680 --> 00:01:55,200
i've decided to just give you the answer

00:01:53,600 --> 00:01:57,280
we'll give you the answer straight away

00:01:55,200 --> 00:02:00,880
so you don't have to watch a whole hour

00:01:57,280 --> 00:02:02,159
of talking uh firstly at the top of your

00:02:00,880 --> 00:02:05,119
crate

00:02:02,159 --> 00:02:06,240
add an annotation which is deny unsafe

00:02:05,119 --> 00:02:08,319
code

00:02:06,240 --> 00:02:09,440
this will as we'll demonstrate in some

00:02:08,319 --> 00:02:13,440
other projects

00:02:09,440 --> 00:02:17,120
this will prevent the compiler from

00:02:13,440 --> 00:02:19,680
allowing you to use unsafe

00:02:17,120 --> 00:02:21,360
unless you have been very very explicit

00:02:19,680 --> 00:02:24,160
and told opted in

00:02:21,360 --> 00:02:24,640
the other one is that before or dur

00:02:24,160 --> 00:02:28,640
within

00:02:24,640 --> 00:02:30,879
an unsafe block you need to explain

00:02:28,640 --> 00:02:33,519
why it is that this code is safe the

00:02:30,879 --> 00:02:36,720
compiler is no longer working for you

00:02:33,519 --> 00:02:37,440
and so you need to do the work of the

00:02:36,720 --> 00:02:39,760
compiler

00:02:37,440 --> 00:02:41,920
for any future rust program including

00:02:39,760 --> 00:02:43,599
yourself

00:02:41,920 --> 00:02:46,480
who might come along and wonder why on

00:02:43,599 --> 00:02:46,480
earth is this safe

00:02:46,720 --> 00:02:51,120
and so one one way which uh i would

00:02:49,200 --> 00:02:54,239
recommend

00:02:51,120 --> 00:02:56,000
when you're doing the code review is to

00:02:54,239 --> 00:02:58,480
ask them do you understand can you

00:02:56,000 --> 00:03:02,000
explain to me why that is safe

00:02:58,480 --> 00:03:03,280
um and if they cannot then either the

00:03:02,000 --> 00:03:05,840
code needs to change or the comment

00:03:03,280 --> 00:03:05,840
needs to change

00:03:07,920 --> 00:03:12,800
our objective as rust programmers or

00:03:11,200 --> 00:03:15,680
one of the objectives let's say or the

00:03:12,800 --> 00:03:17,519
objective right now is safety

00:03:15,680 --> 00:03:20,080
and let's all remember while we're going

00:03:17,519 --> 00:03:22,720
through this process

00:03:20,080 --> 00:03:24,560
that other people make mistakes right we

00:03:22,720 --> 00:03:25,680
we never make mistakes but other people

00:03:24,560 --> 00:03:27,760
do

00:03:25,680 --> 00:03:29,519
so how do we prevent their mistakes from

00:03:27,760 --> 00:03:32,640
infecting our code

00:03:29,519 --> 00:03:35,040
we need to create a system

00:03:32,640 --> 00:03:36,319
of software engineering that makes it

00:03:35,040 --> 00:03:39,360
extremely hard

00:03:36,319 --> 00:03:42,319
for stressed overworked and maybe

00:03:39,360 --> 00:03:42,799
distracted individuals to do the wrong

00:03:42,319 --> 00:03:45,200
thing

00:03:42,799 --> 00:03:46,159
we need to create the system as team

00:03:45,200 --> 00:03:48,879
leads as

00:03:46,159 --> 00:03:49,920
uh as engineering managers as junior

00:03:48,879 --> 00:03:52,959
developers

00:03:49,920 --> 00:03:56,000
we need to participate uh

00:03:52,959 --> 00:03:58,000
in a way that that gets the it learns

00:03:56,000 --> 00:04:02,159
our objection so we want to learn about

00:03:58,000 --> 00:04:02,159
how other projects are managing risk

00:04:02,319 --> 00:04:05,920
but first i just i would really and like

00:04:04,640 --> 00:04:08,959
to take the time

00:04:05,920 --> 00:04:11,120
uh to talk about lemons and limes

00:04:08,959 --> 00:04:13,439
now if you speak english as a second

00:04:11,120 --> 00:04:18,000
language this may sound very strange

00:04:13,439 --> 00:04:19,519
um but um this is the story about how

00:04:18,000 --> 00:04:22,720
the british navy

00:04:19,519 --> 00:04:24,800
or britain in particular uh

00:04:22,720 --> 00:04:26,320
understood in the 18th century how to

00:04:24,800 --> 00:04:28,080
cure scurvy

00:04:26,320 --> 00:04:29,600
and by the 20th century they had

00:04:28,080 --> 00:04:31,440
completely forgot it in fact the

00:04:29,600 --> 00:04:32,800
scientific advice at the start of the

00:04:31,440 --> 00:04:36,000
20th century

00:04:32,800 --> 00:04:38,400
was so bad that it caused scurvy and

00:04:36,000 --> 00:04:39,280
the antarctic and expeditions quite

00:04:38,400 --> 00:04:43,040
famously

00:04:39,280 --> 00:04:46,160
um and led to some um uh

00:04:43,040 --> 00:04:48,080
horrendous tragedy and so there were

00:04:46,160 --> 00:04:50,240
many reasons why this occurred

00:04:48,080 --> 00:04:51,759
and one of the main reasons though is

00:04:50,240 --> 00:04:54,320
that the engl well

00:04:51,759 --> 00:04:57,520
a contributing factor was that the

00:04:54,320 --> 00:05:00,400
english word lime

00:04:57,520 --> 00:05:01,520
included lemons also at the time in

00:05:00,400 --> 00:05:04,080
which the scientific

00:05:01,520 --> 00:05:04,960
and at the time at which the cure was

00:05:04,080 --> 00:05:07,680
found which was

00:05:04,960 --> 00:05:09,199
use just drink lemon juice uh you know

00:05:07,680 --> 00:05:12,320
sprinkle some lemon juice

00:05:09,199 --> 00:05:15,680
into water and just drink that

00:05:12,320 --> 00:05:17,600
and so i want to reiterate that if your

00:05:15,680 --> 00:05:20,720
code comments cannot be

00:05:17,600 --> 00:05:23,120
understood by your audience that is

00:05:20,720 --> 00:05:24,880
then they need to change and it doesn't

00:05:23,120 --> 00:05:26,560
the surface it isn't the words

00:05:24,880 --> 00:05:28,000
themselves that are important it's the

00:05:26,560 --> 00:05:30,320
meaning behind that

00:05:28,000 --> 00:05:31,360
people who are reading your code need to

00:05:30,320 --> 00:05:35,199
understand

00:05:31,360 --> 00:05:38,560
why it is that uh

00:05:35,199 --> 00:05:40,320
the code that you have written is safe

00:05:38,560 --> 00:05:42,720
you need to do the work of the compiler

00:05:40,320 --> 00:05:42,720
for it

00:05:44,160 --> 00:05:50,080
first a warning this allowing

00:05:47,680 --> 00:05:51,199
unsafe is actually insufficient to

00:05:50,080 --> 00:05:54,000
guarantee safety

00:05:51,199 --> 00:05:55,440
unfortunately rust still has some

00:05:54,000 --> 00:05:57,199
problem well no it doesn't have problems

00:05:55,440 --> 00:06:01,360
it just has something to

00:05:57,199 --> 00:06:03,360
be aware of it is actually possible to

00:06:01,360 --> 00:06:06,720
generate code that is guaranteed to

00:06:03,360 --> 00:06:10,319
crash your program

00:06:06,720 --> 00:06:12,160
using only only safe code now this is a

00:06:10,319 --> 00:06:14,560
ridiculous code example

00:06:12,160 --> 00:06:16,000
no one is ever going to wrap a vector of

00:06:14,560 --> 00:06:19,280
type t

00:06:16,000 --> 00:06:22,319
with another container but maybe

00:06:19,280 --> 00:06:24,800
you're doing something stupid

00:06:22,319 --> 00:06:25,360
i say stupid um maybe you're doing

00:06:24,800 --> 00:06:27,440
something

00:06:25,360 --> 00:06:28,960
uh and you don't realize that you've

00:06:27,440 --> 00:06:31,120
created the situation

00:06:28,960 --> 00:06:32,639
where two of your primitive types maybe

00:06:31,120 --> 00:06:34,880
inside a struct

00:06:32,639 --> 00:06:36,080
actually are an invariant on the other

00:06:34,880 --> 00:06:40,960
one so that is

00:06:36,080 --> 00:06:42,880
the position this position variable here

00:06:40,960 --> 00:06:44,080
relies on the fact like there's an

00:06:42,880 --> 00:06:48,160
intimate relationship

00:06:44,080 --> 00:06:51,440
between storage and position that uh

00:06:48,160 --> 00:06:53,120
the compiler cannot guarantee and so

00:06:51,440 --> 00:06:54,560
by mistake let's in this case it's

00:06:53,120 --> 00:06:56,400
intentional but potential

00:06:54,560 --> 00:06:57,680
let's say by mistake i've written some

00:06:56,400 --> 00:07:01,520
code

00:06:57,680 --> 00:07:05,440
that uh breaks the the link between

00:07:01,520 --> 00:07:08,479
two of the primitive types in this case

00:07:05,440 --> 00:07:09,440
i can set position to something that is

00:07:08,479 --> 00:07:11,199
unreachable

00:07:09,440 --> 00:07:13,039
and then when the next court like if

00:07:11,199 --> 00:07:16,560
someone calls get

00:07:13,039 --> 00:07:17,759
this will break uh and it will crash the

00:07:16,560 --> 00:07:19,759
entire program

00:07:17,759 --> 00:07:21,280
now obviously i could have there there

00:07:19,759 --> 00:07:23,120
are ways to to get around this i could

00:07:21,280 --> 00:07:25,120
have replaced um

00:07:23,120 --> 00:07:27,520
this index notation with the get method

00:07:25,120 --> 00:07:30,080
and that would return an option

00:07:27,520 --> 00:07:32,560
but this is completely safe code and it

00:07:30,080 --> 00:07:36,560
is 100 guaranteed crash

00:07:32,560 --> 00:07:38,639
um so uh just before we get to the

00:07:36,560 --> 00:07:40,560
projects i also thought i should explain

00:07:38,639 --> 00:07:43,039
a little bit around my methodology if

00:07:40,560 --> 00:07:45,759
there if there was any methodology

00:07:43,039 --> 00:07:47,840
um i firstly wanted to talk a little bit

00:07:45,759 --> 00:07:49,840
about the rationale about why i

00:07:47,840 --> 00:07:51,039
did this i was really disappointed with

00:07:49,840 --> 00:07:55,360
the ross community's

00:07:51,039 --> 00:07:57,199
response to the ethics web um unsafe

00:07:55,360 --> 00:07:58,639
like basically driving if you've been

00:07:57,199 --> 00:07:59,919
around the rust community a little bit

00:07:58,639 --> 00:08:03,360
you'll be familiar with this

00:07:59,919 --> 00:08:04,560
but if you're very new um one very

00:08:03,360 --> 00:08:07,680
famous

00:08:04,560 --> 00:08:09,199
example of unsafe or the use of unsafe

00:08:07,680 --> 00:08:11,280
code or

00:08:09,199 --> 00:08:13,039
was this project called actics web where

00:08:11,280 --> 00:08:15,840
the developer happily used

00:08:13,039 --> 00:08:15,840
unsafe blocks

00:08:16,160 --> 00:08:19,599
uh and then when people said look you

00:08:18,560 --> 00:08:20,639
can't do this it's

00:08:19,599 --> 00:08:23,120
you know there's no there's no

00:08:20,639 --> 00:08:24,879
requirement um

00:08:23,120 --> 00:08:26,639
eventually that person was driven out of

00:08:24,879 --> 00:08:30,319
the of the rust community

00:08:26,639 --> 00:08:33,760
um now because of this kind of cultural

00:08:30,319 --> 00:08:36,000
difference and um

00:08:33,760 --> 00:08:37,839
and that made me think like well how

00:08:36,000 --> 00:08:38,159
like what what is the right way to do

00:08:37,839 --> 00:08:40,719
this

00:08:38,159 --> 00:08:42,800
if that is the wrong way i think i think

00:08:40,719 --> 00:08:46,000
it was unfair to drive that person away

00:08:42,800 --> 00:08:48,480
um and

00:08:46,000 --> 00:08:49,279
uh the two main aims i think are to

00:08:48,480 --> 00:08:53,200
understand

00:08:49,279 --> 00:08:54,959
what it is that professional companies

00:08:53,200 --> 00:08:56,800
people that are paid lots of money to

00:08:54,959 --> 00:08:58,080
write very good software and doing very

00:08:56,800 --> 00:09:00,720
hard things with rust

00:08:58,080 --> 00:09:01,120
like what do they do and i would also

00:09:00,720 --> 00:09:03,680
like

00:09:01,120 --> 00:09:04,480
to i just wanted to do some research to

00:09:03,680 --> 00:09:06,160
justify

00:09:04,480 --> 00:09:09,680
doing more research actually i've got

00:09:06,160 --> 00:09:13,440
several ideas about how to extend this

00:09:09,680 --> 00:09:14,320
so what did i do sorry just to pause

00:09:13,440 --> 00:09:16,320
slightly

00:09:14,320 --> 00:09:18,399
doing qualitative research not

00:09:16,320 --> 00:09:22,080
quantitative what that means is

00:09:18,399 --> 00:09:24,320
i'm i'm not looking for a

00:09:22,080 --> 00:09:26,160
i haven't hacked the compiler to be able

00:09:24,320 --> 00:09:30,560
to do an analysis

00:09:26,160 --> 00:09:32,320
uh and this is quite um

00:09:30,560 --> 00:09:33,680
i've used a lot of interpretation here

00:09:32,320 --> 00:09:36,240
so it's it's it's

00:09:33,680 --> 00:09:37,120
it's not an analysis of every rust crate

00:09:36,240 --> 00:09:40,720
it's kind of

00:09:37,120 --> 00:09:43,920
looking very closely at 10.

00:09:40,720 --> 00:09:46,080
and they were basically a sample of

00:09:43,920 --> 00:09:47,200
products or projects that i thought were

00:09:46,080 --> 00:09:49,200
interesting

00:09:47,200 --> 00:09:50,640
i tried to create a sample of open

00:09:49,200 --> 00:09:52,080
source

00:09:50,640 --> 00:09:54,399
from the gnome project all the way

00:09:52,080 --> 00:09:57,120
through to like amazon and microsoft

00:09:54,399 --> 00:10:00,000
these big big companies

00:09:57,120 --> 00:10:02,320
as well and i was looking primarily at

00:10:00,000 --> 00:10:04,000
their documentation for new contributors

00:10:02,320 --> 00:10:06,160
and then i would go in to look at their

00:10:04,000 --> 00:10:09,360
code snippets uh

00:10:06,160 --> 00:10:11,920
via like uh searching for

00:10:09,360 --> 00:10:13,839
unsafe inside their repository now i

00:10:11,920 --> 00:10:16,000
intentionally did not communicate with

00:10:13,839 --> 00:10:19,760
any of these projects

00:10:16,000 --> 00:10:22,079
um because um that i was doing this

00:10:19,760 --> 00:10:23,120
so none of these projects are aware that

00:10:22,079 --> 00:10:26,480
actually they have been

00:10:23,120 --> 00:10:29,600
part of this um this project

00:10:26,480 --> 00:10:29,600
so let's let's have a look

00:10:29,760 --> 00:10:34,959
uh server

00:10:32,880 --> 00:10:36,079
servo is rust's foundational project it

00:10:34,959 --> 00:10:39,440
was kind of the reason why it was

00:10:36,079 --> 00:10:41,440
created to create a parallel web browser

00:10:39,440 --> 00:10:43,040
it's fascinating looking through the

00:10:41,440 --> 00:10:44,240
github because a lot of the

00:10:43,040 --> 00:10:47,040
documentation

00:10:44,240 --> 00:10:48,640
around how to write code is written in

00:10:47,040 --> 00:10:50,320
about 2013.

00:10:48,640 --> 00:10:53,040
so it's quite old from russ's point of

00:10:50,320 --> 00:10:55,680
view one thing i found fascinating is

00:10:53,040 --> 00:10:58,320
that they include this annotation

00:10:55,680 --> 00:10:59,760
of their crates which is oh sorry the

00:10:58,320 --> 00:11:03,360
annotation that he uses

00:10:59,760 --> 00:11:06,560
deny uh but at the end the start of any

00:11:03,360 --> 00:11:09,120
um function that uses unsafe within it

00:11:06,560 --> 00:11:10,560
they uh or any module that requires

00:11:09,120 --> 00:11:12,800
unsafe

00:11:10,560 --> 00:11:14,079
they are required to allow it and opt

00:11:12,800 --> 00:11:16,640
opt-in so this

00:11:14,079 --> 00:11:19,200
i think is a really nice strategy for

00:11:16,640 --> 00:11:22,800
increasing the psychological barrier

00:11:19,200 --> 00:11:23,279
to including unsafe now just to provide

00:11:22,800 --> 00:11:25,360
a

00:11:23,279 --> 00:11:28,079
very this is a again another convoluted

00:11:25,360 --> 00:11:30,160
example but this is a demonstration of

00:11:28,079 --> 00:11:32,560
what happens inside servo so you can

00:11:30,160 --> 00:11:34,640
imagine that they have modules

00:11:32,560 --> 00:11:35,600
and the module itself has this

00:11:34,640 --> 00:11:38,880
annotation that

00:11:35,600 --> 00:11:38,880
we deny unsafe

00:11:39,440 --> 00:11:46,320
the deny attribute

00:11:42,720 --> 00:11:49,279
allows programmers to later on annotate

00:11:46,320 --> 00:11:50,079
internal things with allow so you can

00:11:49,279 --> 00:11:52,240
basically

00:11:50,079 --> 00:11:53,279
you're opting out of unsafe here but you

00:11:52,240 --> 00:11:55,279
can opt back in

00:11:53,279 --> 00:11:56,480
if you really need it the reason why i

00:11:55,279 --> 00:11:59,839
think this is quite a

00:11:56,480 --> 00:12:03,040
an interesting strategy is that

00:11:59,839 --> 00:12:04,560
i just feel like it's harder to and it's

00:12:03,040 --> 00:12:06,320
harder to do mentally

00:12:04,560 --> 00:12:09,200
and it would there's no way it would

00:12:06,320 --> 00:12:10,880
pass code review i think unsafe would

00:12:09,200 --> 00:12:13,279
it's unlikely to pass code review but

00:12:10,880 --> 00:12:17,680
this ugly annotation syntax

00:12:13,279 --> 00:12:20,959
there's no way that would get through um

00:12:17,680 --> 00:12:23,839
i was also curious as to what cargo giga

00:12:20,959 --> 00:12:24,399
does internally as well so cargo geiger

00:12:23,839 --> 00:12:26,880
is

00:12:24,399 --> 00:12:28,399
a cargo extension which actually

00:12:26,880 --> 00:12:30,240
inspects your own code

00:12:28,399 --> 00:12:31,440
and all of the code of your dependencies

00:12:30,240 --> 00:12:34,959
for usages of

00:12:31,440 --> 00:12:35,600
unsafe um but how do they do it

00:12:34,959 --> 00:12:38,079
themselves

00:12:35,600 --> 00:12:39,200
like this for me um was really really

00:12:38,079 --> 00:12:41,279
interesting

00:12:39,200 --> 00:12:42,959
they've gone further than deny unsafe

00:12:41,279 --> 00:12:45,519
they've actually said forbid

00:12:42,959 --> 00:12:46,320
now the forbid keyword or the forbid

00:12:45,519 --> 00:12:50,240
attribute

00:12:46,320 --> 00:12:53,760
does not allow you to annotate internal

00:12:50,240 --> 00:12:56,480
methods as allow unsafe

00:12:53,760 --> 00:13:00,399
so it just entails the entire the

00:12:56,480 --> 00:13:00,399
compiler that it's completely illegal

00:13:03,120 --> 00:13:07,040
future programmers in the project will

00:13:05,680 --> 00:13:10,399
only be able to include

00:13:07,040 --> 00:13:13,200
unsafe blocks if somehow

00:13:10,399 --> 00:13:14,079
the project decides to like remove this

00:13:13,200 --> 00:13:17,279
annotation from

00:13:14,079 --> 00:13:19,440
the root of their crate so

00:13:17,279 --> 00:13:22,399
effectively the way this looks in code

00:13:19,440 --> 00:13:24,240
is uh with we add for bid

00:13:22,399 --> 00:13:25,920
and then it's impossible to like the

00:13:24,240 --> 00:13:27,360
only way to compile this dangerous

00:13:25,920 --> 00:13:29,440
function

00:13:27,360 --> 00:13:31,839
is by commenting it out like there we

00:13:29,440 --> 00:13:34,720
cannot we cannot opt in to allow

00:13:31,839 --> 00:13:37,600
it will not the compiler will refuse to

00:13:34,720 --> 00:13:37,600
compile the code

00:13:39,839 --> 00:13:46,959
uh again kind of looking into some of

00:13:43,519 --> 00:13:48,720
rust's ecosystem well

00:13:46,959 --> 00:13:50,240
some of the long-standing utilities i

00:13:48,720 --> 00:13:53,040
wanted to

00:13:50,240 --> 00:13:55,360
kind of get a sense as to whether or not

00:13:53,040 --> 00:13:55,360
um

00:13:56,320 --> 00:14:01,360
the the the cultural i wonder if

00:13:59,680 --> 00:14:03,360
i wanted to know if the unsafe usage had

00:14:01,360 --> 00:14:06,639
changed so ixa is a replacement for the

00:14:03,360 --> 00:14:08,880
ls command which is a unix utility

00:14:06,639 --> 00:14:10,639
and it it's one of rus the rust

00:14:08,880 --> 00:14:12,800
community's oldest

00:14:10,639 --> 00:14:15,120
command line utilities that is in public

00:14:12,800 --> 00:14:15,120
use

00:14:15,680 --> 00:14:23,279
so and xa talks to a file system

00:14:19,360 --> 00:14:26,480
and it does that via system calls

00:14:23,279 --> 00:14:28,160
uh it doesn't need many it uses it does

00:14:26,480 --> 00:14:30,160
not use much

00:14:28,160 --> 00:14:31,519
unsafe at all but for extended

00:14:30,160 --> 00:14:34,880
attributes inside

00:14:31,519 --> 00:14:38,160
uh it requires this um the list

00:14:34,880 --> 00:14:40,399
extra attribute uh cycle family on linux

00:14:38,160 --> 00:14:42,720
and mac os

00:14:40,399 --> 00:14:44,720
so the strategy that they have developed

00:14:42,720 --> 00:14:47,920
is to employ

00:14:44,720 --> 00:14:50,720
to only wrap the minimum

00:14:47,920 --> 00:14:53,040
of what they need so basically every

00:14:50,720 --> 00:14:55,440
single function that they wish to call

00:14:53,040 --> 00:14:57,199
now i'll explain the syntax very quickly

00:14:55,440 --> 00:15:01,120
um in just a moment

00:14:57,199 --> 00:15:04,639
but effectively this is the rust code

00:15:01,120 --> 00:15:08,560
and all they are doing is wrapping

00:15:04,639 --> 00:15:12,160
the c like wrapping the c function

00:15:08,560 --> 00:15:14,880
and so the strategy there is to put

00:15:12,160 --> 00:15:15,760
unsafe around the smallest element

00:15:14,880 --> 00:15:18,639
possible

00:15:15,760 --> 00:15:20,079
and the idea is i assume to make it very

00:15:18,639 --> 00:15:23,440
very understandable

00:15:20,079 --> 00:15:28,399
about what is the purpose of unsafe

00:15:23,440 --> 00:15:30,240
and in this case we are uh

00:15:28,399 --> 00:15:31,920
the reason why we need unsafe is because

00:15:30,240 --> 00:15:34,079
the rust compiler cannot

00:15:31,920 --> 00:15:35,519
reason about what happens inside the

00:15:34,079 --> 00:15:39,120
operating system

00:15:35,519 --> 00:15:40,480
and so it just requires you it

00:15:39,120 --> 00:15:41,839
we just need to expect that the

00:15:40,480 --> 00:15:42,560
operating system is going to be well

00:15:41,839 --> 00:15:47,040
behaved

00:15:42,560 --> 00:15:48,959
now going back to the

00:15:47,040 --> 00:15:52,320
uh to that comment around we need to

00:15:48,959 --> 00:15:52,320
understand why this is safe

00:15:52,839 --> 00:15:59,600
um if you haven't used pointer syntax

00:15:56,240 --> 00:16:02,399
this is probably confusing uh

00:15:59,600 --> 00:16:02,399
i want to

00:16:02,639 --> 00:16:06,560
um so first of all we have a whole bunch

00:16:04,800 --> 00:16:08,399
of types that are not you really

00:16:06,560 --> 00:16:10,160
used in traditional rust code but if

00:16:08,399 --> 00:16:13,360
you're using libc if you're using any

00:16:10,160 --> 00:16:15,920
ffr you've probably seen that before

00:16:13,360 --> 00:16:19,120
and if you've programmed in c this

00:16:15,920 --> 00:16:19,120
probably makes some sense

00:16:19,839 --> 00:16:26,560
we take a path so we

00:16:23,040 --> 00:16:29,120
the the uh a pointer to effectively

00:16:26,560 --> 00:16:31,440
and in rust syntax this would be a

00:16:29,120 --> 00:16:32,320
vehicle u8 we've got a reference to c

00:16:31,440 --> 00:16:35,440
string

00:16:32,320 --> 00:16:38,880
a c string is like a vec of u8

00:16:35,440 --> 00:16:40,639
with a null uh byte at the end

00:16:38,880 --> 00:16:42,320
and then we're creating a null pointer

00:16:40,639 --> 00:16:44,399
which in the convention of c

00:16:42,320 --> 00:16:47,120
programmers is to spend in null pointer

00:16:44,399 --> 00:16:49,839
kind of how a rust programmer would use

00:16:47,120 --> 00:16:50,160
an option zero i'm not sure what that

00:16:49,839 --> 00:16:54,320
does

00:16:50,160 --> 00:16:54,320
so that is i think size

00:16:55,120 --> 00:16:59,440
and uh and we have a an integer being

00:16:58,880 --> 00:17:02,959
used

00:16:59,440 --> 00:17:04,720
as flags and the way that that works is

00:17:02,959 --> 00:17:07,280
that nc

00:17:04,720 --> 00:17:09,439
uh a convention is that each bit

00:17:07,280 --> 00:17:11,039
represents an on off switch

00:17:09,439 --> 00:17:12,559
and um and so that's what that's going

00:17:11,039 --> 00:17:15,199
to be used so

00:17:12,559 --> 00:17:16,640
bear in mind it's important to think

00:17:15,199 --> 00:17:19,760
about

00:17:16,640 --> 00:17:21,520
whether or not your team is familiar

00:17:19,760 --> 00:17:23,280
with this kind of code if it is maybe it

00:17:21,520 --> 00:17:24,640
doesn't need comments but if it is

00:17:23,280 --> 00:17:25,760
like if you have team members or you

00:17:24,640 --> 00:17:28,720
might have new team members that are

00:17:25,760 --> 00:17:32,480
less familiar with this type of syntax

00:17:28,720 --> 00:17:33,360
be verbose oh so that this is where it

00:17:32,480 --> 00:17:36,640
came from

00:17:33,360 --> 00:17:38,480
um another example that uh

00:17:36,640 --> 00:17:40,480
i think is quite interesting is black

00:17:38,480 --> 00:17:42,799
three so black three is this

00:17:40,480 --> 00:17:43,760
new cryptographic hash function that's

00:17:42,799 --> 00:17:47,600
supposed to be

00:17:43,760 --> 00:17:50,480
um really fast and also very good

00:17:47,600 --> 00:17:51,760
oh i think i've just received a i don't

00:17:50,480 --> 00:17:54,400
know i haven't received a comment

00:17:51,760 --> 00:17:55,679
oh by the way if you're watching this

00:17:54,400 --> 00:17:58,720
live

00:17:55,679 --> 00:17:59,360
do ask questions uh more than happy to

00:17:58,720 --> 00:18:02,240
receive them

00:17:59,360 --> 00:18:02,240
as we're going through

00:18:05,120 --> 00:18:08,160
you have stopped using md5 just just

00:18:07,679 --> 00:18:10,960
just

00:18:08,160 --> 00:18:13,360
just just asking that question right

00:18:10,960 --> 00:18:14,960
it's no longer

00:18:13,360 --> 00:18:16,640
it's no longer best practice so why is

00:18:14,960 --> 00:18:19,200
unsafe needed in this project

00:18:16,640 --> 00:18:20,799
well blank three wants to make use of

00:18:19,200 --> 00:18:23,360
very high performance uh

00:18:20,799 --> 00:18:25,520
functionality within the cpu and that

00:18:23,360 --> 00:18:28,880
requires intrinsics

00:18:25,520 --> 00:18:30,559
access to intrinsics we have vector

00:18:28,880 --> 00:18:30,960
instructions we can operate on more than

00:18:30,559 --> 00:18:34,480
one

00:18:30,960 --> 00:18:38,160
um element at a time so they have used

00:18:34,480 --> 00:18:38,160
their minimal rapid strategy as well

00:18:38,240 --> 00:18:43,840
now this is a

00:18:41,360 --> 00:18:45,679
kind of a like a s like a vector well

00:18:43,840 --> 00:18:49,280
actually it's closer to an array

00:18:45,679 --> 00:18:51,919
um that has a width of 256 bits

00:18:49,280 --> 00:18:52,640
of integers and we call this kind of

00:18:51,919 --> 00:18:55,600
crazy thing

00:18:52,640 --> 00:18:56,480
in the middle this is what the unsafe um

00:18:55,600 --> 00:18:59,520
this is

00:18:56,480 --> 00:19:03,919
the function that's provided by um

00:18:59,520 --> 00:19:07,120
and if you've used making no sense

00:19:03,919 --> 00:19:08,880
this is a function that is provided by

00:19:07,120 --> 00:19:11,280
the compiler when you opt into

00:19:08,880 --> 00:19:15,280
intrinsics

00:19:11,280 --> 00:19:20,320
your and

00:19:15,280 --> 00:19:20,320
from the rust code

00:19:21,679 --> 00:19:25,919
we only see ed a lot of the complexity

00:19:24,480 --> 00:19:27,679
is hidden from us

00:19:25,919 --> 00:19:30,160
and i think this is a really really

00:19:27,679 --> 00:19:33,280
interesting strategy

00:19:30,160 --> 00:19:33,760
now one thing that the authors of the

00:19:33,280 --> 00:19:37,200
crate

00:19:33,760 --> 00:19:39,280
have decided to spend

00:19:37,200 --> 00:19:41,200
extra attention on is that when we use

00:19:39,280 --> 00:19:44,880
pointers

00:19:41,200 --> 00:19:46,799
in unsafe blocks that's especially

00:19:44,880 --> 00:19:48,559
dangerous and we need to be especially

00:19:46,799 --> 00:19:52,240
careful

00:19:48,559 --> 00:19:55,919
and so um they've made

00:19:52,240 --> 00:20:00,160
extra effort to annotate

00:19:55,919 --> 00:20:00,160
those sections with code comments

00:20:00,480 --> 00:20:07,520
now uh i get into a project

00:20:03,520 --> 00:20:10,400
from amazon and this is the

00:20:07,520 --> 00:20:12,320
foundation for the aws lambda and the

00:20:10,400 --> 00:20:15,679
aws fargate projects

00:20:12,320 --> 00:20:17,520
and um it's a so first we'll start with

00:20:15,679 --> 00:20:18,559
a question like why do they need unsafe

00:20:17,520 --> 00:20:20,799
well they're interacting with a

00:20:18,559 --> 00:20:22,480
hypervisor they're basically building an

00:20:20,799 --> 00:20:26,480
operating system manager

00:20:22,480 --> 00:20:28,480
um and they also use a lot of chrome os

00:20:26,480 --> 00:20:32,480
inside their own project and so they've

00:20:28,480 --> 00:20:34,960
actually got a lot of code generation

00:20:32,480 --> 00:20:37,120
and so their strategy and i i don't mean

00:20:34,960 --> 00:20:39,919
to blame them it was just i thought

00:20:37,120 --> 00:20:41,760
you know they've just got like it's co

00:20:39,919 --> 00:20:42,240
automatic code that includes them safe

00:20:41,760 --> 00:20:43,600
and so

00:20:42,240 --> 00:20:45,280
there's just this comment there saying

00:20:43,600 --> 00:20:48,880
this is automatically generated

00:20:45,280 --> 00:20:51,120
and so that's their strategy

00:20:48,880 --> 00:20:52,720
for a lot of for a lot of their uses um

00:20:51,120 --> 00:20:56,000
just as a comment saying

00:20:52,720 --> 00:20:59,280
um i don't know why this is safe

00:20:56,000 --> 00:21:01,600
sorry um oh

00:20:59,280 --> 00:21:03,360
the um i wanted to call out their

00:21:01,600 --> 00:21:04,720
contributing markdown files sorry it

00:21:03,360 --> 00:21:07,520
hasn't rendered very nicely

00:21:04,720 --> 00:21:07,520
on the screen

00:21:08,000 --> 00:21:11,440
the point i want to make here is that

00:21:09,440 --> 00:21:13,760
they have a big document

00:21:11,440 --> 00:21:14,880
which explains why you should or how to

00:21:13,760 --> 00:21:18,640
contribute

00:21:14,880 --> 00:21:21,440
but it doesn't address unsafe at all

00:21:18,640 --> 00:21:22,480
it talks about code comments and and and

00:21:21,440 --> 00:21:24,640
so forth and

00:21:22,480 --> 00:21:25,679
pull requests and unit tests and and

00:21:24,640 --> 00:21:28,159
that's all great

00:21:25,679 --> 00:21:29,360
but this is an operating system project

00:21:28,159 --> 00:21:32,799
and they don't mention

00:21:29,360 --> 00:21:32,799
unsafe in any of their guidelines

00:21:32,960 --> 00:21:37,120
um windows oh sorry microsoft is

00:21:36,400 --> 00:21:40,240
developing

00:21:37,120 --> 00:21:41,679
a language prediction um otherwise known

00:21:40,240 --> 00:21:43,440
as a rust interface for the windows

00:21:41,679 --> 00:21:44,000
runtime which i think is ridiculously

00:21:43,440 --> 00:21:47,760
exciting

00:21:44,000 --> 00:21:50,559
like it's amazing to see that rust's uh

00:21:47,760 --> 00:21:51,120
usage across operating systems is first

00:21:50,559 --> 00:21:53,919
class

00:21:51,120 --> 00:21:55,679
so thanks to microsoft um obviously they

00:21:53,919 --> 00:21:57,200
speak to windows apis whether or not

00:21:55,679 --> 00:22:00,000
there is um

00:21:57,200 --> 00:22:01,360
like kernel 32 dll or whichever

00:22:00,000 --> 00:22:04,080
interface that they use

00:22:01,360 --> 00:22:05,200
um they need to trust the operating

00:22:04,080 --> 00:22:06,960
system and so

00:22:05,200 --> 00:22:08,320
they have to use unsafe so their

00:22:06,960 --> 00:22:09,679
strategy again are these minimal

00:22:08,320 --> 00:22:13,200
wrappers

00:22:09,679 --> 00:22:16,480
um slightly differently

00:22:13,200 --> 00:22:19,840
so previously so this is a bit of a

00:22:16,480 --> 00:22:22,000
confusing method to see um

00:22:19,840 --> 00:22:24,080
what we're dealing with here is an array

00:22:22,000 --> 00:22:26,400
of type t

00:22:24,080 --> 00:22:28,159
which happens to be generated by the

00:22:26,400 --> 00:22:32,000
windows runtime

00:22:28,159 --> 00:22:33,520
so it um it allows you to create

00:22:32,000 --> 00:22:35,280
so what we're trying to do in this

00:22:33,520 --> 00:22:38,880
simple block is

00:22:35,280 --> 00:22:42,240
create methods that allow you to create

00:22:38,880 --> 00:22:46,400
uh objects that the windows

00:22:42,240 --> 00:22:49,760
runtime understands now

00:22:46,400 --> 00:22:51,360
um there are several other methods as

00:22:49,760 --> 00:22:52,880
well but i want to call out with len

00:22:51,360 --> 00:22:55,120
because i thought it was this is where

00:22:52,880 --> 00:22:58,350
we have unsafe and so

00:22:55,120 --> 00:22:59,840
um the

00:22:58,350 --> 00:23:03,200
[Music]

00:22:59,840 --> 00:23:04,400
uh so this is a career we're creating a

00:23:03,200 --> 00:23:05,760
new object here

00:23:04,400 --> 00:23:08,000
so this is kind of like the width

00:23:05,760 --> 00:23:09,440
capacity only it's uh

00:23:08,000 --> 00:23:11,120
vic with capacity but here we're

00:23:09,440 --> 00:23:13,840
creating an array with with the length

00:23:11,120 --> 00:23:17,360
of guaranteed to be let's say

00:23:13,840 --> 00:23:17,840
10 24 or something um we want to make

00:23:17,360 --> 00:23:19,440
sure

00:23:17,840 --> 00:23:22,159
first there's this assertion which is

00:23:19,440 --> 00:23:25,200
good practice and then

00:23:22,159 --> 00:23:28,559
um we're saying that this is this code

00:23:25,200 --> 00:23:33,039
task memo is the call that

00:23:28,559 --> 00:23:37,520
we need to use which is fine um

00:23:33,039 --> 00:23:39,360
but i am personally

00:23:37,520 --> 00:23:41,440
i mean if you are a windows like a

00:23:39,360 --> 00:23:43,200
microsoft programmer

00:23:41,440 --> 00:23:45,360
you probably understand what this means

00:23:43,200 --> 00:23:47,279
like innately but it feels like to me as

00:23:45,360 --> 00:23:49,919
someone who's looking at the code fresh

00:23:47,279 --> 00:23:52,000
that this unsafe block is doing quite a

00:23:49,919 --> 00:23:55,520
lot of work

00:23:52,000 --> 00:23:58,559
inside it and so what we're doing is we

00:23:55,520 --> 00:24:03,360
are calling this

00:23:58,559 --> 00:24:04,720
part of the windows api

00:24:03,360 --> 00:24:06,559
and we've got our length so that's the

00:24:04,720 --> 00:24:07,679
number of elements in our array and then

00:24:06,559 --> 00:24:11,039
we multiply that

00:24:07,679 --> 00:24:12,880
by the size of memory of of our type

00:24:11,039 --> 00:24:14,640
and so you know you can kind of see

00:24:12,880 --> 00:24:17,279
where that's one function

00:24:14,640 --> 00:24:17,760
and then this returns something and then

00:24:17,279 --> 00:24:21,919
we

00:24:17,760 --> 00:24:24,159
coerce it to a pointer to t

00:24:21,919 --> 00:24:25,760
so maybe if you are familiar with

00:24:24,159 --> 00:24:26,880
systems programming this comes very

00:24:25,760 --> 00:24:30,159
naturally to you

00:24:26,880 --> 00:24:32,240
but um i think that

00:24:30,159 --> 00:24:33,919
if something were to happen inside one

00:24:32,240 --> 00:24:34,240
of my projects i would have expected

00:24:33,919 --> 00:24:35,760
that

00:24:34,240 --> 00:24:37,919
i would have provided some explanation

00:24:35,760 --> 00:24:39,679
about what is happening but again maybe

00:24:37,919 --> 00:24:41,840
if you're developing systems um

00:24:39,679 --> 00:24:43,200
programming like if you're developing

00:24:41,840 --> 00:24:44,159
operating systems this stuff is so

00:24:43,200 --> 00:24:47,760
natural

00:24:44,159 --> 00:24:51,120
that you don't need to i'm not sure um

00:24:47,760 --> 00:24:53,520
i do know as well that they provide

00:24:51,120 --> 00:24:55,440
annotations as to describe why it is

00:24:53,520 --> 00:24:59,360
that uh

00:24:55,440 --> 00:25:01,120
the um operation is safe and so we're

00:24:59,360 --> 00:25:05,039
actually writing to the pointer

00:25:01,120 --> 00:25:07,120
um to um starting at zero i assume so

00:25:05,039 --> 00:25:08,559
this is a point data is a as a pointer

00:25:07,120 --> 00:25:10,559
so we just created it there

00:25:08,559 --> 00:25:11,919
we i assume it's we start at zero and we

00:25:10,559 --> 00:25:15,279
write length

00:25:11,919 --> 00:25:19,200
i'm wondering and i don't know enough

00:25:15,279 --> 00:25:20,880
about um about this but i assume

00:25:19,200 --> 00:25:22,240
the difference interestingly we've got

00:25:20,880 --> 00:25:24,400
length multiplied by cis

00:25:22,240 --> 00:25:26,240
meme like this the but here i'm using

00:25:24,400 --> 00:25:28,480
ling and i i wonder whether or not

00:25:26,240 --> 00:25:29,919
that's a bug i'm not sure um i'd be

00:25:28,480 --> 00:25:33,600
interested to hear from anyone

00:25:29,919 --> 00:25:36,480
um can i enlarge the code

00:25:33,600 --> 00:25:36,480
yes yes okay

00:25:39,679 --> 00:25:44,480
hi read me mark down so what i really

00:25:41,600 --> 00:25:47,840
like is um

00:25:44,480 --> 00:25:50,159
uh the windows the windows

00:25:47,840 --> 00:25:52,080
sorry the microsoft team believes that

00:25:50,159 --> 00:25:52,720
they want to create this runtime within

00:25:52,080 --> 00:25:55,039
00:25:52,720 --> 00:25:56,000
pure safe rust but they make this um

00:25:55,039 --> 00:25:57,840
call out that sometimes

00:25:56,000 --> 00:25:59,279
that they have to go and talk to their

00:25:57,840 --> 00:26:01,600
um to the

00:25:59,279 --> 00:26:03,200
to the apis and they are implemented in

00:26:01,600 --> 00:26:06,960
c plus plus

00:26:03,200 --> 00:26:08,559
and they make safety as like a first

00:26:06,960 --> 00:26:09,360
class citizen in their readme which i

00:26:08,559 --> 00:26:12,159
think is a really

00:26:09,360 --> 00:26:12,159
positive sign

00:26:13,120 --> 00:26:21,760
now a project from the gnome

00:26:17,919 --> 00:26:24,880
project sub from a project within gnome

00:26:21,760 --> 00:26:28,640
is there uh they're rewriting libby's uh

00:26:24,880 --> 00:26:29,200
i think lib um a c library in rust so

00:26:28,640 --> 00:26:32,080
this is

00:26:29,200 --> 00:26:34,400
uh a csv renderer and the question

00:26:32,080 --> 00:26:38,320
becomes why do they need unsafe

00:26:34,400 --> 00:26:41,440
well this crate uh lube rust

00:26:38,320 --> 00:26:44,559
rsv g esp

00:26:41,440 --> 00:26:48,159
talks to gleb glib is a kind of a core

00:26:44,559 --> 00:26:50,400
of um of gnome in some sense

00:26:48,159 --> 00:26:52,320
and it is like another c library so

00:26:50,400 --> 00:26:53,919
again you can see this pattern of

00:26:52,320 --> 00:26:55,679
requiring we're building out new

00:26:53,919 --> 00:26:56,240
functionality in rust and we need to

00:26:55,679 --> 00:26:59,279
rely

00:26:56,240 --> 00:27:02,320
on older implementations

00:26:59,279 --> 00:27:05,600
or not older but pre-existing code

00:27:02,320 --> 00:27:07,760
that is written in unsafe languages

00:27:05,600 --> 00:27:10,400
and also rust itself sorry the rust code

00:27:07,760 --> 00:27:14,000
itself exposes the same c api

00:27:10,400 --> 00:27:15,679
as the library that preceded it

00:27:14,000 --> 00:27:19,760
one thing i think is really positive in

00:27:15,679 --> 00:27:22,320
this project is that the entire culture

00:27:19,760 --> 00:27:23,039
focused on questioning whether or not

00:27:22,320 --> 00:27:26,240
unsafe

00:27:23,039 --> 00:27:30,399
is a valid thing to do

00:27:26,240 --> 00:27:32,799
now this is a code comment um from

00:27:30,399 --> 00:27:34,559
one of their code reviews inside a mood

00:27:32,799 --> 00:27:37,679
request which is get lab's

00:27:34,559 --> 00:27:40,720
version of pull requests and you know

00:27:37,679 --> 00:27:43,600
the project lead there makes this

00:27:40,720 --> 00:27:45,760
really good point which is why are you

00:27:43,600 --> 00:27:47,279
using an unsafe construct

00:27:45,760 --> 00:27:50,159
because i think that we could use a

00:27:47,279 --> 00:27:53,279
safer option instead

00:27:50,159 --> 00:27:56,880
now i found this inside their code after

00:27:53,279 --> 00:27:59,520
like looking through their commits and

00:27:56,880 --> 00:28:00,480
i think it's really positive to see that

00:27:59,520 --> 00:28:04,000
people

00:28:00,480 --> 00:28:06,320
have got in their heads this idea that

00:28:04,000 --> 00:28:08,240
if we when we can avoid unsafe we should

00:28:06,320 --> 00:28:11,200
do so

00:28:08,240 --> 00:28:12,799
because the compiler is the compiler

00:28:11,200 --> 00:28:15,600
does not get tired

00:28:12,799 --> 00:28:16,880
the compiler does not get distracted and

00:28:15,600 --> 00:28:19,360
the compiler

00:28:16,880 --> 00:28:20,320
um can have bugs i'm sure that they can

00:28:19,360 --> 00:28:23,679
find the bugs

00:28:20,320 --> 00:28:26,960
um but rust's uh safe rust is

00:28:23,679 --> 00:28:28,320
is good rust uh we've seen the minimal

00:28:26,960 --> 00:28:30,320
rapid strategy before

00:28:28,320 --> 00:28:31,679
so we'll just pass on that one i also

00:28:30,320 --> 00:28:34,799
wanted to look at

00:28:31,679 --> 00:28:34,799
the rust standard library

00:28:37,279 --> 00:28:45,840
they have provided explicit

00:28:40,480 --> 00:28:45,840
advice for code reviews

00:28:46,720 --> 00:28:52,880
they require comments around

00:28:49,919 --> 00:28:53,600
each use of unsafe and they have some

00:28:52,880 --> 00:28:56,320
tooling

00:28:53,600 --> 00:28:57,360
a lint in their continuous integration

00:28:56,320 --> 00:29:00,559
bills

00:28:57,360 --> 00:29:03,360
that checks that there is a comment

00:29:00,559 --> 00:29:04,799
obviously the lint probably can't read

00:29:03,360 --> 00:29:06,960
the code comments

00:29:04,799 --> 00:29:08,000
to check that they relate to the code

00:29:06,960 --> 00:29:11,520
block but at least

00:29:08,000 --> 00:29:12,960
they're there and there are humans

00:29:11,520 --> 00:29:16,480
checking these things as well

00:29:12,960 --> 00:29:18,799
so i like this i like the last sentence

00:29:16,480 --> 00:29:20,159
here unsafe code actually needs to be

00:29:18,799 --> 00:29:22,640
okay like it

00:29:20,159 --> 00:29:24,399
don't put unsafe code in there that is

00:29:22,640 --> 00:29:25,279
actually unsafe like that is not a good

00:29:24,399 --> 00:29:28,480
thing to put

00:29:25,279 --> 00:29:28,480
inside the standard library

00:29:29,679 --> 00:29:33,279
another thing that they call out inside

00:29:31,600 --> 00:29:36,559
their

00:29:33,279 --> 00:29:40,159
their guidelines is that

00:29:36,559 --> 00:29:43,120
it's okay to ask for help so

00:29:40,159 --> 00:29:43,919
if you so we we mentioned we see a

00:29:43,120 --> 00:29:46,480
mention here

00:29:43,919 --> 00:29:47,679
of the unsafe code guidelines working

00:29:46,480 --> 00:29:51,039
group and i'll mention

00:29:47,679 --> 00:29:54,640
uh what they what that is very very soon

00:29:51,039 --> 00:29:58,240
properly uh but there are

00:29:54,640 --> 00:30:01,520
experts with inside the rust

00:29:58,240 --> 00:30:05,279
language that know a lot about rust

00:30:01,520 --> 00:30:06,559
and so if you are unsure it's okay to

00:30:05,279 --> 00:30:10,399
ask them for help

00:30:06,559 --> 00:30:14,080
in fact they've made this point that

00:30:10,399 --> 00:30:16,559
everyone loves debating whether or not

00:30:14,080 --> 00:30:17,360
there is an unsound problem here like

00:30:16,559 --> 00:30:21,279
whether or not

00:30:17,360 --> 00:30:22,399
so you know don't be worried

00:30:21,279 --> 00:30:24,320
you know you're actually making

00:30:22,399 --> 00:30:26,640
someone's day by

00:30:24,320 --> 00:30:28,559
by being able to get some some reasoning

00:30:26,640 --> 00:30:31,760
here and some expertise

00:30:28,559 --> 00:30:33,200
uh now if you are a tiny project this

00:30:31,760 --> 00:30:36,559
obviously does not apply

00:30:33,200 --> 00:30:38,799
as equally to you so

00:30:36,559 --> 00:30:40,159
you know we don't have a large team of

00:30:38,799 --> 00:30:43,039
of

00:30:40,159 --> 00:30:43,679
uh collaborators and colleagues to call

00:30:43,039 --> 00:30:46,720
upon

00:30:43,679 --> 00:30:49,760
and so um

00:30:46,720 --> 00:30:53,360
my advice there would be to

00:30:49,760 --> 00:30:54,320
be cautious and to kind of build

00:30:53,360 --> 00:30:57,840
yourself up

00:30:54,320 --> 00:31:00,240
into things that you know rather than

00:30:57,840 --> 00:31:01,840
things that you don't and don't try to

00:31:00,240 --> 00:31:02,720
use constructs that you don't understand

00:31:01,840 --> 00:31:05,840
as

00:31:02,720 --> 00:31:08,240
that's what i'm saying there

00:31:05,840 --> 00:31:09,440
one thing i think is really really

00:31:08,240 --> 00:31:11,919
really good

00:31:09,440 --> 00:31:11,919
is that

00:31:13,600 --> 00:31:18,000
the public documentation explains why

00:31:16,320 --> 00:31:20,399
things may panic and if you

00:31:18,000 --> 00:31:22,640
read the code comments of standard

00:31:20,399 --> 00:31:25,840
pointer read

00:31:22,640 --> 00:31:27,279
you'll see that there is invariants that

00:31:25,840 --> 00:31:30,000
are described

00:31:27,279 --> 00:31:30,880
which is that the source of where you're

00:31:30,000 --> 00:31:34,240
reading from

00:31:30,880 --> 00:31:36,080
must be valid for reads and so and

00:31:34,240 --> 00:31:38,000
by the way you must initialize their

00:31:36,080 --> 00:31:38,640
value before you actually try and read

00:31:38,000 --> 00:31:43,440
from

00:31:38,640 --> 00:31:48,480
a pointer and so without those

00:31:43,440 --> 00:31:52,159
um the the method is unsafe

00:31:48,480 --> 00:31:52,559
and so even if size t has psi zero the

00:31:52,159 --> 00:31:54,799
poi

00:31:52,559 --> 00:31:57,600
pointer must be non now that which is

00:31:54,799 --> 00:32:00,080
interesting but um

00:31:57,600 --> 00:32:01,760
so i think that including if you have an

00:32:00,080 --> 00:32:04,240
unsafe method or unsafe function

00:32:01,760 --> 00:32:08,240
including a safety

00:32:04,240 --> 00:32:08,240
section is a very sound strategy

00:32:10,320 --> 00:32:13,840
a further project which is less less

00:32:12,320 --> 00:32:14,640
well known as um this thing called

00:32:13,840 --> 00:32:19,200
toolshed

00:32:14,640 --> 00:32:21,440
toolshed is a a memory allocator

00:32:19,200 --> 00:32:22,960
it uses an arena strategy or provides an

00:32:21,440 --> 00:32:24,640
arena for you which is

00:32:22,960 --> 00:32:26,559
basically to the operating system it

00:32:24,640 --> 00:32:28,960
looks like you've just asked for a large

00:32:26,559 --> 00:32:30,720
chunk of memory

00:32:28,960 --> 00:32:34,320
and inside your program you can divide

00:32:30,720 --> 00:32:37,039
that up internally however you want

00:32:34,320 --> 00:32:38,640
it's typically faster but can be

00:32:37,039 --> 00:32:41,200
slightly less efficient you might get

00:32:38,640 --> 00:32:44,080
some wasted space

00:32:41,200 --> 00:32:45,600
now why do they need unsafe well if

00:32:44,080 --> 00:32:47,200
you're dealing with memory blocks you

00:32:45,600 --> 00:32:48,720
probably need to deal with pointers and

00:32:47,200 --> 00:32:51,760
that means that you

00:32:48,720 --> 00:32:54,159
uh need unsafe and so

00:32:51,760 --> 00:32:55,120
their strategy has been to push every

00:32:54,159 --> 00:32:58,159
usage

00:32:55,120 --> 00:33:01,200
of unsafe into one specific module which

00:32:58,159 --> 00:33:04,960
happens to be arena.rs

00:33:01,200 --> 00:33:08,000
even though the api is completely

00:33:04,960 --> 00:33:11,279
safe all of the unsafety

00:33:08,000 --> 00:33:13,919
is is uh isolated with inside

00:33:11,279 --> 00:33:15,120
one module and so people know if they're

00:33:13,919 --> 00:33:18,640
touching that module

00:33:15,120 --> 00:33:20,399
like it's dangerous and uh again like

00:33:18,640 --> 00:33:23,039
we're trying to

00:33:20,399 --> 00:33:24,159
create a situation where as a team we

00:33:23,039 --> 00:33:27,039
are

00:33:24,159 --> 00:33:28,480
building safe software and mentally

00:33:27,039 --> 00:33:31,519
we're switched on when we go and

00:33:28,480 --> 00:33:31,519
interact with that module

00:33:32,159 --> 00:33:35,360
so again here is a another project which

00:33:34,720 --> 00:33:37,440
is

00:33:35,360 --> 00:33:38,799
far less well known which i think is

00:33:37,440 --> 00:33:40,880
really interesting

00:33:38,799 --> 00:33:41,840
is a new database that a new graph

00:33:40,880 --> 00:33:44,640
database actually

00:33:41,840 --> 00:33:45,679
being developed out of ireland and

00:33:44,640 --> 00:33:47,600
inside it

00:33:45,679 --> 00:33:49,679
it's the storage engine is written in

00:33:47,600 --> 00:33:52,799
rust but the reasoning engine is written

00:33:49,679 --> 00:33:54,320
in prologue

00:33:52,799 --> 00:33:56,480
now they need unsafe because they're

00:33:54,320 --> 00:33:59,200
interfacing with this prologue

00:33:56,480 --> 00:33:59,919
implementation and now have they done

00:33:59,200 --> 00:34:01,760
that

00:33:59,919 --> 00:34:02,960
they have gone further than isolating at

00:34:01,760 --> 00:34:05,120
the module boundary

00:34:02,960 --> 00:34:06,320
in some sense they've actually created a

00:34:05,120 --> 00:34:09,760
third crate

00:34:06,320 --> 00:34:13,919
so they have uh which provides the

00:34:09,760 --> 00:34:16,480
sort of a wrapper and interface as a

00:34:13,919 --> 00:34:18,000
completely outside of their project or

00:34:16,480 --> 00:34:20,720
their core storage project

00:34:18,000 --> 00:34:21,359
so the storage engine the written and

00:34:20,720 --> 00:34:24,000
rust

00:34:21,359 --> 00:34:25,760
that deals with keeping data and

00:34:24,000 --> 00:34:29,679
persisting it to disk

00:34:25,760 --> 00:34:34,079
has no has no knowledge

00:34:29,679 --> 00:34:34,800
of the the prologue implementation it's

00:34:34,079 --> 00:34:36,960
completely

00:34:34,800 --> 00:34:39,200
independent and so if there was a

00:34:36,960 --> 00:34:42,480
problem with inside

00:34:39,200 --> 00:34:48,000
that kind of wrapper crate

00:34:42,480 --> 00:34:50,560
it wouldn't infect the storage engine

00:34:48,000 --> 00:34:52,079
uh they also have a very strong straight

00:34:50,560 --> 00:34:54,399
like a very strong

00:34:52,079 --> 00:34:55,919
uh co-commenting practice within say the

00:34:54,399 --> 00:34:59,359
team

00:34:55,919 --> 00:35:00,880
and so um almost

00:34:59,359 --> 00:35:03,839
you know seen on the slide it's a bit

00:35:00,880 --> 00:35:03,839
difficult so

00:35:04,320 --> 00:35:07,440
allow me to explain what's happening

00:35:05,680 --> 00:35:11,359
here so

00:35:07,440 --> 00:35:15,200
um inside so

00:35:11,359 --> 00:35:18,000
inside their code when they store

00:35:15,200 --> 00:35:18,720
data to disk or unsigned integers to

00:35:18,000 --> 00:35:20,960
disk

00:35:18,720 --> 00:35:23,760
they compress it using a variable length

00:35:20,960 --> 00:35:23,760
encoding scheme

00:35:23,839 --> 00:35:27,680
uh there's a public method in kodiak

00:35:26,720 --> 00:35:31,280
that

00:35:27,680 --> 00:35:31,760
allocates a memory so we create a vector

00:35:31,280 --> 00:35:35,599
of

00:35:31,760 --> 00:35:38,720
size of size length

00:35:35,599 --> 00:35:40,640
and uh and this

00:35:38,720 --> 00:35:41,839
and then we call an internal method

00:35:40,640 --> 00:35:45,359
really which is

00:35:41,839 --> 00:35:49,920
encode inject even

00:35:45,359 --> 00:35:49,920
at this wrapper um

00:35:50,079 --> 00:35:53,520
like even at the this isn't really

00:35:52,960 --> 00:35:55,599
unsafe

00:35:53,520 --> 00:35:56,640
we're just calling an unsafe function or

00:35:55,599 --> 00:35:59,280
an unsafe method

00:35:56,640 --> 00:36:00,560
there's already a safety block saying we

00:35:59,280 --> 00:36:04,000
know that we have created

00:36:00,560 --> 00:36:07,359
our vehicle with the required length

00:36:04,000 --> 00:36:07,359
and so therefore it is safe

00:36:09,680 --> 00:36:13,839
and inside the that

00:36:14,240 --> 00:36:19,280
that unchecked method the encode

00:36:15,920 --> 00:36:22,560
unchecked there's even more commenting

00:36:19,280 --> 00:36:24,400
so this is the internal method

00:36:22,560 --> 00:36:25,599
basically everything that happens inside

00:36:24,400 --> 00:36:28,800
this method

00:36:25,599 --> 00:36:28,800
is well indexed

00:36:29,119 --> 00:36:32,320
possibly you know we don't necessarily

00:36:31,200 --> 00:36:35,520
need to say that

00:36:32,320 --> 00:36:37,520
about incrementing um but what i think

00:36:35,520 --> 00:36:41,760
that this project gets right

00:36:37,520 --> 00:36:44,640
is that they want to assume

00:36:41,760 --> 00:36:47,680
that people are looking at this code

00:36:44,640 --> 00:36:52,079
with very very blurry tired eyes

00:36:47,680 --> 00:36:53,040
and uh they're even specifying why we're

00:36:52,079 --> 00:36:57,040
using an

00:36:53,040 --> 00:36:58,160
integer sorry an index integer which i

00:36:57,040 --> 00:37:02,240
think

00:36:58,160 --> 00:37:02,240
i've never seen before and

00:37:02,640 --> 00:37:09,440
this makes it very very difficult to

00:37:07,359 --> 00:37:11,040
not be a it makes it very difficult it

00:37:09,440 --> 00:37:12,480
makes it very easy to understand what

00:37:11,040 --> 00:37:15,520
the code is doing

00:37:12,480 --> 00:37:18,160
and very hard to to get it wrong

00:37:15,520 --> 00:37:18,160
in my opinion

00:37:19,200 --> 00:37:23,839
okay we're coming up to

00:37:22,480 --> 00:37:26,160
one of the final projects that i want to

00:37:23,839 --> 00:37:28,880
touch on and uh this is fuchsia

00:37:26,160 --> 00:37:28,880
from google

00:37:30,320 --> 00:37:33,680
so the fuchsia kernel is actually

00:37:32,720 --> 00:37:36,000
written

00:37:33,680 --> 00:37:36,720
uh it's not written in rust rust is

00:37:36,000 --> 00:37:39,839
using

00:37:36,720 --> 00:37:41,839
as used in kind of systems components um

00:37:39,839 --> 00:37:43,520
but the kernel i believe is written in c

00:37:41,839 --> 00:37:46,320
plus plus but might be

00:37:43,520 --> 00:37:46,320
um pure c

00:37:47,200 --> 00:37:54,400
their team they they have got

00:37:50,640 --> 00:37:55,760
code documentation that uh

00:37:54,400 --> 00:37:57,839
makes it very clear that if you're

00:37:55,760 --> 00:38:01,040
writing adding unsafe to the code

00:37:57,839 --> 00:38:04,640
you need to resp uh

00:38:01,040 --> 00:38:07,200
you need to ensure that it's safe it's

00:38:04,640 --> 00:38:10,480
your responsibility

00:38:07,200 --> 00:38:12,240
and it's essential that you

00:38:10,480 --> 00:38:15,839
identify any assumptions that are

00:38:12,240 --> 00:38:16,960
required by every unsafe block

00:38:15,839 --> 00:38:18,640
you need to ensure that those

00:38:16,960 --> 00:38:20,160
assumptions are actually met not just

00:38:18,640 --> 00:38:21,040
that you've identified them but actually

00:38:20,160 --> 00:38:23,920
with that

00:38:21,040 --> 00:38:25,920
in this case that they've been met and

00:38:23,920 --> 00:38:27,520
over time

00:38:25,920 --> 00:38:28,960
it's possible for those assumptions to

00:38:27,520 --> 00:38:32,400
continue to be

00:38:28,960 --> 00:38:35,040
met now this is a really interesting

00:38:32,400 --> 00:38:35,599
and a really interesting bullet point to

00:38:35,040 --> 00:38:37,760
add

00:38:35,599 --> 00:38:39,119
because it means that the programmer

00:38:37,760 --> 00:38:42,240
today

00:38:39,119 --> 00:38:45,680
is responsible for thinking about

00:38:42,240 --> 00:38:48,000
how people might use this in the future

00:38:45,680 --> 00:38:48,000
um

00:38:49,280 --> 00:38:52,400
and this becomes even more explicit uh

00:38:51,760 --> 00:38:55,119
soon

00:38:52,400 --> 00:38:56,640
um further oh right sorry i just added

00:38:55,119 --> 00:39:00,480
the twice

00:38:56,640 --> 00:39:03,839
uh oh well

00:39:00,480 --> 00:39:06,320
um i just uh i yeah we'll

00:39:03,839 --> 00:39:06,320
carry on

00:39:09,920 --> 00:39:14,960
so one of the things that is um very

00:39:12,720 --> 00:39:16,960
clear by now is that

00:39:14,960 --> 00:39:19,359
projects that do this well use unsafe

00:39:16,960 --> 00:39:22,960
properly i said properly

00:39:19,359 --> 00:39:23,520
add comments to the unsafe blocks to

00:39:22,960 --> 00:39:27,280
explain

00:39:23,520 --> 00:39:29,440
why it is safe and

00:39:27,280 --> 00:39:31,040
if you're inside the future project you

00:39:29,440 --> 00:39:33,040
also require a comment explaining

00:39:31,040 --> 00:39:35,520
you know what assumptions are being made

00:39:33,040 --> 00:39:36,880
like previously we saw that we made an

00:39:35,520 --> 00:39:37,839
assumption that the length being

00:39:36,880 --> 00:39:40,960
provided to a

00:39:37,839 --> 00:39:44,640
a pointer read or pointer right was

00:39:40,960 --> 00:39:49,599
of sufficient length and so um

00:39:44,640 --> 00:39:49,599
that seems relatively clear but

00:39:50,000 --> 00:39:56,320
this documentation is actually available

00:39:53,520 --> 00:39:57,599
in public for every contributor to the

00:39:56,320 --> 00:40:02,079
project

00:39:57,599 --> 00:40:02,079
um oh

00:40:02,880 --> 00:40:05,720
sorry about the rendering of this um

00:40:04,560 --> 00:40:07,359
slide

00:40:05,720 --> 00:40:11,119
[Music]

00:40:07,359 --> 00:40:12,079
where possible so this is a very good

00:40:11,119 --> 00:40:15,680
explanation

00:40:12,079 --> 00:40:19,200
for the minimal wrappers strategy so

00:40:15,680 --> 00:40:22,480
where possible package any unsafety into

00:40:19,200 --> 00:40:25,599
a single functional module

00:40:22,480 --> 00:40:27,119
and then document

00:40:25,599 --> 00:40:28,880
what it is that needs to be the case

00:40:27,119 --> 00:40:32,160
before it becomes safe

00:40:28,880 --> 00:40:34,720
how things fail and uh how

00:40:32,160 --> 00:40:37,280
things uh what happens if everything

00:40:34,720 --> 00:40:40,240
succeeds

00:40:37,280 --> 00:40:41,440
now this um seems like a very very sound

00:40:40,240 --> 00:40:43,599
strategy to me

00:40:41,440 --> 00:40:44,800
um the google this the future oes

00:40:43,599 --> 00:40:46,960
project um

00:40:44,800 --> 00:40:48,560
has the most robust guidelines in my

00:40:46,960 --> 00:40:53,839
opinion for writing

00:40:48,560 --> 00:40:53,839
unsafe blocks of code safely

00:40:56,400 --> 00:40:59,599
partially for this reason

00:41:01,599 --> 00:41:05,599
you know i apologize for how this is

00:41:03,760 --> 00:41:09,680
rendered on the screen

00:41:05,599 --> 00:41:13,200
so there's a couple of sections here so

00:41:09,680 --> 00:41:15,319
there are three particular types that

00:41:13,200 --> 00:41:16,480
the documentation calls out as being

00:41:15,319 --> 00:41:20,240
particularly

00:41:16,480 --> 00:41:22,240
dangerous start const star nut

00:41:20,240 --> 00:41:24,560
or unsafe cell so these are pointer

00:41:22,240 --> 00:41:24,560
types

00:41:25,760 --> 00:41:32,480
they are does they are um

00:41:30,800 --> 00:41:34,000
specifically called out as things that

00:41:32,480 --> 00:41:37,200
need to be very heavily

00:41:34,000 --> 00:41:40,240
documented and the uh

00:41:37,200 --> 00:41:43,359
coming down the bottom

00:41:40,240 --> 00:41:48,960
is talking about memory aliasing

00:41:43,359 --> 00:41:52,079
and that um you can either

00:41:48,960 --> 00:41:53,839
in rust you can you can either alias so

00:41:52,079 --> 00:41:56,319
that means you can have two shared

00:41:53,839 --> 00:41:57,680
two references uh it's got read only

00:41:56,319 --> 00:41:58,960
references so this is the ampersand

00:41:57,680 --> 00:42:00,400
syntax

00:41:58,960 --> 00:42:01,760
you can have multiple of those you can

00:42:00,400 --> 00:42:03,680
have multiple readers but you can only

00:42:01,760 --> 00:42:07,520
have a single writer

00:42:03,680 --> 00:42:09,280
and you need to explain that if you

00:42:07,520 --> 00:42:10,560
have been able to if you've used one of

00:42:09,280 --> 00:42:12,880
these unsafe types

00:42:10,560 --> 00:42:17,839
that you have uphold that guarantee that

00:42:12,880 --> 00:42:17,839
is provided by the rust compiler

00:42:19,280 --> 00:42:24,560
obviously so now these resources you

00:42:22,800 --> 00:42:26,800
can't click on the links

00:42:24,560 --> 00:42:28,400
sadly but you can definitely look them

00:42:26,800 --> 00:42:31,680
up and i will

00:42:28,400 --> 00:42:35,599
ensure that links are provided um

00:42:31,680 --> 00:42:38,800
for anyone that would like them and uh

00:42:35,599 --> 00:42:41,920
um just thinking about the way

00:42:38,800 --> 00:42:45,359
to get them there um

00:42:41,920 --> 00:42:46,400
but uh i'd like to call out the future

00:42:45,359 --> 00:42:49,440
os team

00:42:46,400 --> 00:42:52,079
brian anderson ralph young has provided

00:42:49,440 --> 00:42:54,720
two fantastic articles in particular was

00:42:52,079 --> 00:42:57,839
the person who created

00:42:54,720 --> 00:42:59,520
that example of having two types that

00:42:57,839 --> 00:43:00,960
are both safe and of themselves but when

00:42:59,520 --> 00:43:02,160
they relate to each other and you break

00:43:00,960 --> 00:43:06,800
that connection

00:43:02,160 --> 00:43:09,440
you can create unsafety inside safe rust

00:43:06,800 --> 00:43:11,280
there's a really nice guide of rust

00:43:09,440 --> 00:43:13,200
patterns within so the rust unofficial

00:43:11,280 --> 00:43:16,560
repository

00:43:13,200 --> 00:43:18,720
that talks about condensing

00:43:16,560 --> 00:43:20,000
or containing or isolating unsafety

00:43:18,720 --> 00:43:23,520
within small modules

00:43:20,000 --> 00:43:25,520
or and lastly the

00:43:23,520 --> 00:43:27,599
unsafe working groups unsafe code

00:43:25,520 --> 00:43:31,760
guidelines for reference

00:43:27,599 --> 00:43:35,119
which i want oh which i would like to

00:43:31,760 --> 00:43:38,480
see if i can bring up now

00:43:35,119 --> 00:43:41,839
um so uh

00:43:38,480 --> 00:43:41,839
where are we

00:43:43,040 --> 00:43:50,079
so inside the rustling um org

00:43:46,319 --> 00:43:52,319
is a uh unsafe

00:43:50,079 --> 00:43:56,240
code guidelines repository and you may

00:43:52,319 --> 00:43:56,240
notice this um

00:43:56,319 --> 00:43:59,599
this author ralph young is the same

00:43:58,000 --> 00:44:01,359
person who wrote those two

00:43:59,599 --> 00:44:03,680
fantastic articles about unsafety and

00:44:01,359 --> 00:44:05,920
rust

00:44:03,680 --> 00:44:05,920
now

00:44:07,280 --> 00:44:14,640
this is a very good

00:44:10,800 --> 00:44:15,839
description of the things that you need

00:44:14,640 --> 00:44:18,960
to be aware of

00:44:15,839 --> 00:44:21,839
if you are writing unsafe code and

00:44:18,960 --> 00:44:24,000
you want to be able to it isn't quite as

00:44:21,839 --> 00:44:26,079
mature as i expected it to be

00:44:24,000 --> 00:44:27,680
um but i think it is developing and if

00:44:26,079 --> 00:44:27,920
this is an area that you're interested

00:44:27,680 --> 00:44:31,119
in

00:44:27,920 --> 00:44:34,160
i believe that you should continue to um

00:44:31,119 --> 00:44:34,160
i think you should participate

00:44:34,319 --> 00:44:42,319
so it's the main output of the group

00:44:37,839 --> 00:44:44,640
is a is a reference document

00:44:42,319 --> 00:44:46,880
and i'm sure that this i'm sure that

00:44:44,640 --> 00:44:51,280
there are many patches welcome

00:44:46,880 --> 00:44:54,640
from anyone inside the community and so

00:44:51,280 --> 00:44:55,839
that is uh i think that is the talk

00:44:54,640 --> 00:44:58,480
actually

00:44:55,839 --> 00:44:58,480
we'll um

00:44:59,040 --> 00:45:02,160
i'm more than happy to

00:45:02,319 --> 00:45:08,560
answer any questions that people have um

00:45:05,359 --> 00:45:10,240
but just a a moment again to say thank

00:45:08,560 --> 00:45:11,119
you very much for the organizers of the

00:45:10,240 --> 00:45:14,640
conference i

00:45:11,119 --> 00:45:17,359
am uh very privileged to be

00:45:14,640 --> 00:45:18,160
part of it uh even from the other side

00:45:17,359 --> 00:45:19,920
of the world

00:45:18,160 --> 00:45:21,440
and so i am more than happy to stay

00:45:19,920 --> 00:45:22,960
online and

00:45:21,440 --> 00:45:24,720
uh again answering any questions that

00:45:22,960 --> 00:45:28,480
come through

00:45:24,720 --> 00:45:30,960
i'll try to get a um i'll get a link

00:45:28,480 --> 00:45:32,800
try i'll try to post um that in the

00:45:30,960 --> 00:45:34,720
youtube uh

00:45:32,800 --> 00:45:37,040
comments to where i have the slides and

00:45:34,720 --> 00:45:39,200
so forth um

00:45:37,040 --> 00:45:39,200
and

00:45:40,160 --> 00:45:44,319
uh yeah ask away ask away and any of the

00:45:43,119 --> 00:45:47,520
in any of the channels that you're

00:45:44,319 --> 00:45:50,720
um if you're watching the stream

00:45:47,520 --> 00:46:01,839
ask the in the comments and um and

00:45:50,720 --> 00:46:01,839
those comments are being being monitored

00:46:03,920 --> 00:46:09,280
i'm just assuming that organizes a link

00:46:06,960 --> 00:46:09,280
and

00:46:10,560 --> 00:46:14,640
of the slides that i have as well as the

00:46:13,119 --> 00:46:15,359
research that i've done on all the

00:46:14,640 --> 00:46:17,520
projects

00:46:15,359 --> 00:46:18,800
because there's a little bit of of more

00:46:17,520 --> 00:46:19,520
material there that you might be

00:46:18,800 --> 00:46:20,800
interested in

00:46:19,520 --> 00:46:22,319
so we've received our first question

00:46:20,800 --> 00:46:22,800
which i think is a really fascinating

00:46:22,319 --> 00:46:25,280
one

00:46:22,800 --> 00:46:26,960
and it's from youtube and i believe it's

00:46:25,280 --> 00:46:29,520
uh

00:46:26,960 --> 00:46:31,040
um i'm going to get my english

00:46:29,520 --> 00:46:32,000
pronunciation is going to be terrible of

00:46:31,040 --> 00:46:34,319
this name

00:46:32,000 --> 00:46:34,319
um

00:46:36,240 --> 00:46:40,720
sicaris what would be your advice to new

00:46:39,040 --> 00:46:43,839
ross programmers who are too happy to

00:46:40,720 --> 00:46:43,839
use unsafe

00:46:44,480 --> 00:46:50,720
so if i re if i

00:46:48,079 --> 00:46:52,319
re so the question there is you have

00:46:50,720 --> 00:46:53,520
someone who is new to rust maybe they

00:46:52,319 --> 00:46:55,440
have a lot of experience

00:46:53,520 --> 00:46:56,560
or they have just graduated from

00:46:55,440 --> 00:47:00,640
university

00:46:56,560 --> 00:47:00,640
and they look at unsafe and they say oh

00:47:02,160 --> 00:47:06,640
using unsafe just means i can apply the

00:47:04,560 --> 00:47:11,040
same idioms that i am used to in c

00:47:06,640 --> 00:47:14,960
plus or in some other language

00:47:11,040 --> 00:47:18,319
and uh my advice would be that

00:47:14,960 --> 00:47:18,720
the reason is is to ask them to step

00:47:18,319 --> 00:47:22,400
back

00:47:18,720 --> 00:47:22,400
and say well why are you learning rust

00:47:23,119 --> 00:47:26,240
you know you can write you can use

00:47:25,119 --> 00:47:29,040
pointers

00:47:26,240 --> 00:47:31,359
manually in other languages in in fact

00:47:29,040 --> 00:47:34,880
in a way that is much more ergonomic

00:47:31,359 --> 00:47:38,000
rust makes it very fussy

00:47:34,880 --> 00:47:41,119
uh it's it's it's not nice

00:47:38,000 --> 00:47:43,040
to use unsafe like

00:47:41,119 --> 00:47:44,559
use pointers in rust like i think it's

00:47:43,040 --> 00:47:47,040
done intentionally

00:47:44,559 --> 00:47:49,040
it's intentionally clumsy in some sense

00:47:47,040 --> 00:47:50,960
and

00:47:49,040 --> 00:47:53,200
if you have come to rust because you

00:47:50,960 --> 00:47:54,559
want to write in a safe programming

00:47:53,200 --> 00:47:57,680
language

00:47:54,559 --> 00:48:02,559
without a garbage collector then

00:47:57,680 --> 00:48:02,559
use the compiler to your advantage so

00:48:02,800 --> 00:48:10,960
there is a second question from um

00:48:06,559 --> 00:48:12,480
from youtube again i apologize for my um

00:48:10,960 --> 00:48:14,079
my english pronunciation especially the

00:48:12,480 --> 00:48:17,920
stress on the wrong part of the word

00:48:14,079 --> 00:48:19,520
but um michelle uh lazovsky

00:48:17,920 --> 00:48:22,559
great lecture thank you which strategy

00:48:19,520 --> 00:48:22,559
is the best in your opinion

00:48:22,960 --> 00:48:29,440
yeah uh

00:48:26,240 --> 00:48:33,119
i am not an expert in this i would defer

00:48:29,440 --> 00:48:36,319
to uh the unsafe working group

00:48:33,119 --> 00:48:40,000
but if you were going to

00:48:36,319 --> 00:48:40,960
ask me for my advice it would be to add

00:48:40,000 --> 00:48:44,319
a comment

00:48:40,960 --> 00:48:47,599
to each use of unsafe

00:48:44,319 --> 00:48:49,280
and that will force you to mentally

00:48:47,599 --> 00:48:52,240
check

00:48:49,280 --> 00:48:53,040
it will just slow you down and cause you

00:48:52,240 --> 00:48:56,640
to pause

00:48:53,040 --> 00:48:59,760
to double check that what you are doing

00:48:56,640 --> 00:49:03,520
is sensible that would be

00:48:59,760 --> 00:49:06,880
my one takeaway

00:49:03,520 --> 00:49:08,720
from twitch um hashidong you've covered

00:49:06,880 --> 00:49:10,240
calling unsafe code inside functions but

00:49:08,720 --> 00:49:11,680
what about creating functions which are

00:49:10,240 --> 00:49:15,200
themselves safe

00:49:11,680 --> 00:49:18,559
do i have any thoughts on that i do

00:49:15,200 --> 00:49:20,079
and that is we uh i don't i could try

00:49:18,559 --> 00:49:20,960
and potentially try and scroll all the

00:49:20,079 --> 00:49:24,720
way through

00:49:20,960 --> 00:49:28,720
uh so where was i i was over here

00:49:24,720 --> 00:49:28,720
oh um

00:49:28,800 --> 00:49:34,880
so i think it was ixa has created

00:49:31,839 --> 00:49:38,000
a function like a rust function

00:49:34,880 --> 00:49:39,440
around a c function

00:49:38,000 --> 00:49:41,280
oh actually it's a say function around

00:49:39,440 --> 00:49:42,720
an unsafe function um

00:49:41,280 --> 00:49:44,319
actually that wasn't quite what i want

00:49:42,720 --> 00:49:49,280
to do

00:49:44,319 --> 00:49:49,280
i believe oh no that's not right either

00:49:49,359 --> 00:49:53,280
so my strategy for this is to write

00:49:52,480 --> 00:49:58,319
minimal

00:49:53,280 --> 00:50:01,599
wrappers around uh

00:49:58,319 --> 00:50:02,240
around and create functions that are

00:50:01,599 --> 00:50:05,599
very

00:50:02,240 --> 00:50:05,599
very easy to understand

00:50:06,880 --> 00:50:10,079
okay another question from twitch dot

00:50:09,200 --> 00:50:11,839
chris please

00:50:10,079 --> 00:50:13,119
thanks for the talk you mentioned some

00:50:11,839 --> 00:50:14,240
links that we can use to assist

00:50:13,119 --> 00:50:15,599
developers and maintaining code with

00:50:14,240 --> 00:50:17,760
unsafe

00:50:15,599 --> 00:50:18,960
are there any changes to the language or

00:50:17,760 --> 00:50:20,800
any

00:50:18,960 --> 00:50:22,400
unexisting ones that you would like to

00:50:20,800 --> 00:50:25,520
see introduced to make this easier and

00:50:22,400 --> 00:50:25,520
more a lot more reliable

00:50:25,599 --> 00:50:27,839
hmm

00:50:29,040 --> 00:50:33,839
i would say to that use clippy right so

00:50:33,880 --> 00:50:36,530
[Laughter]

00:50:36,000 --> 00:50:39,440
um

00:50:36,530 --> 00:50:42,720
[Music]

00:50:39,440 --> 00:50:42,720
see if we can find it rust clipping

00:50:44,720 --> 00:50:48,000
not in there repository come on github

00:50:46,480 --> 00:50:49,839
let's let's do this properly

00:50:48,000 --> 00:50:51,520
okay there we go there's rust slippery

00:50:49,839 --> 00:50:54,319
now rust clippy

00:50:51,520 --> 00:50:55,119
is a community repository of good

00:50:54,319 --> 00:50:58,480
practices

00:50:55,119 --> 00:50:58,480
hundreds and hundreds of these things

00:50:58,800 --> 00:51:02,960
and i love this code that is just wrong

00:51:01,200 --> 00:51:06,720
do not use this in your own thing

00:51:02,960 --> 00:51:10,480
uh so now you

00:51:06,720 --> 00:51:10,880
i wouldn't i don't i i i expect that the

00:51:10,480 --> 00:51:13,359
lint

00:51:10,880 --> 00:51:14,000
that this code comment linting that is

00:51:13,359 --> 00:51:18,160
applied

00:51:14,000 --> 00:51:20,000
by i think it was the uh

00:51:18,160 --> 00:51:21,280
one of the projects anyway i think it

00:51:20,000 --> 00:51:24,640
was a standard library

00:51:21,280 --> 00:51:28,079
i'm i assume that they have upstreamed

00:51:24,640 --> 00:51:29,440
uh their lent into clippy this is where

00:51:28,079 --> 00:51:33,760
i would go and if they haven't

00:51:29,440 --> 00:51:33,760
well you know there's a job for this

00:51:34,839 --> 00:51:39,599
weekend

00:51:36,559 --> 00:51:43,760
now oh this is great again from twitch

00:51:39,599 --> 00:51:46,000
um mro wqa why do you laugh so much i

00:51:43,760 --> 00:51:46,000
love it

00:51:46,640 --> 00:51:54,079
i laugh because i'm nervous partially i

00:51:50,000 --> 00:51:57,280
i laugh because uh

00:51:54,079 --> 00:52:02,079
i try to remember that programming is

00:51:57,280 --> 00:52:02,079
primarily creative and different and

00:52:03,200 --> 00:52:06,319
it's okay to learn it's okay to make

00:52:05,680 --> 00:52:10,240
mistakes

00:52:06,319 --> 00:52:13,599
it's okay to um

00:52:10,240 --> 00:52:17,599
it's okay to grow and

00:52:13,599 --> 00:52:20,240
that means that we need to do

00:52:17,599 --> 00:52:21,520
the we need we we need to learn in a way

00:52:20,240 --> 00:52:26,160
that is supportive

00:52:21,520 --> 00:52:26,160
and so there's no sense and

00:52:26,319 --> 00:52:31,599
i i i don't want to

00:52:29,520 --> 00:52:32,960
start telling people or dictate exactly

00:52:31,599 --> 00:52:35,119
how people should code in their

00:52:32,960 --> 00:52:38,240
and i don't want people to feel as if

00:52:35,119 --> 00:52:39,200
they are inadequate in any way

00:52:38,240 --> 00:52:41,520
one of the things that one of the

00:52:39,200 --> 00:52:43,280
reasons that i wrote program and rust

00:52:41,520 --> 00:52:44,720
or and learned and took the time to

00:52:43,280 --> 00:52:46,480
learn rust and one of the reason why i

00:52:44,720 --> 00:52:48,960
teach rust is that

00:52:46,480 --> 00:52:50,640
it empowers everyone to write strong

00:52:48,960 --> 00:52:53,760
safe software

00:52:50,640 --> 00:52:55,520
even me like i am an i'm a mediocre

00:52:53,760 --> 00:52:58,319
programmer in many senses

00:52:55,520 --> 00:52:58,800
uh yes i've and you know i developed in

00:52:58,319 --> 00:53:02,160
python

00:52:58,800 --> 00:53:03,760
for a long long time and probably over a

00:53:02,160 --> 00:53:06,079
decade and spent a long time in data

00:53:03,760 --> 00:53:06,079
science

00:53:06,559 --> 00:53:10,079
everyone every every piece of

00:53:08,400 --> 00:53:12,559
documentation that i wrote

00:53:10,079 --> 00:53:13,119
that i read around writing c extensions

00:53:12,559 --> 00:53:16,079
to make

00:53:13,119 --> 00:53:18,000
python go faster was the first paragraph

00:53:16,079 --> 00:53:21,119
almost said

00:53:18,000 --> 00:53:22,240
only expert should do this or you know

00:53:21,119 --> 00:53:25,040
this is dangerous

00:53:22,240 --> 00:53:25,760
you know or what some sort of language

00:53:25,040 --> 00:53:28,000
like that

00:53:25,760 --> 00:53:28,960
and i was always intimidated rust was

00:53:28,000 --> 00:53:31,920
the very

00:53:28,960 --> 00:53:33,520
that was the first systems programming

00:53:31,920 --> 00:53:36,240
language community

00:53:33,520 --> 00:53:38,400
that made me feel welcome and i want

00:53:36,240 --> 00:53:39,599
other people to feel welcome as well

00:53:38,400 --> 00:53:41,200
it doesn't matter where you come from

00:53:39,599 --> 00:53:42,640
does it matter whether or not you're

00:53:41,200 --> 00:53:45,040
from the san francisco

00:53:42,640 --> 00:53:46,079
you know from the bay area or whether

00:53:45,040 --> 00:53:48,800
you are from

00:53:46,079 --> 00:53:49,599
south asia you should feel like a

00:53:48,800 --> 00:53:53,599
participant

00:53:49,599 --> 00:53:55,920
and and and you are you have a place

00:53:53,599 --> 00:53:58,480
at this table and i want everyone to

00:53:55,920 --> 00:53:58,480
feel welcome

00:53:58,800 --> 00:54:02,240
okay a question from youtube from

00:54:01,119 --> 00:54:06,079
android bogus

00:54:02,240 --> 00:54:08,880
if my unsafe code is unsell but works

00:54:06,079 --> 00:54:09,520
for example it might be faster should i

00:54:08,880 --> 00:54:12,640
change it

00:54:09,520 --> 00:54:14,400
for uh a slower

00:54:12,640 --> 00:54:16,480
but something that is guaranteed a

00:54:14,400 --> 00:54:18,800
slower version that is guaranteed to be

00:54:16,480 --> 00:54:18,800
sound

00:54:20,079 --> 00:54:23,200
we have an example of this in the

00:54:21,520 --> 00:54:27,040
standard library or not

00:54:23,200 --> 00:54:28,480
so much so it probably is the case that

00:54:27,040 --> 00:54:30,319
if you have something that is fast but

00:54:28,480 --> 00:54:33,680
dangerous

00:54:30,319 --> 00:54:36,640
then it is it works for

00:54:33,680 --> 00:54:38,079
non-good cases like if you set

00:54:36,640 --> 00:54:40,720
everything up correctly

00:54:38,079 --> 00:54:41,920
it will go fine but if things are set up

00:54:40,720 --> 00:54:43,520
badly

00:54:41,920 --> 00:54:45,680
then they might blow up and explode on

00:54:43,520 --> 00:54:45,680
you

00:54:45,760 --> 00:54:50,160
i do not recommend anything that is like

00:54:48,640 --> 00:54:51,520
that takes user input

00:54:50,160 --> 00:54:53,520
or anything you're going to install in

00:54:51,520 --> 00:54:55,680
someone else's computer

00:54:53,520 --> 00:54:57,359
i do not recommend that you expose them

00:54:55,680 --> 00:54:59,760
to security vulnerabilities caused by

00:54:57,359 --> 00:55:01,920
buffer overruns

00:54:59,760 --> 00:55:03,520
but if you're the kind of person that

00:55:01,920 --> 00:55:05,760
likes to play dangerous

00:55:03,520 --> 00:55:07,440
um here's my advice to you create two

00:55:05,760 --> 00:55:08,799
methods

00:55:07,440 --> 00:55:11,119
the first one and the one that you

00:55:08,799 --> 00:55:12,160
should use primarily is safe code it is

00:55:11,119 --> 00:55:15,280
pure rust

00:55:12,160 --> 00:55:16,960
that is pure safe rust secondly

00:55:15,280 --> 00:55:18,480
have another method that has the same

00:55:16,960 --> 00:55:20,880
signature but has

00:55:18,480 --> 00:55:22,880
underscore unchecked or underscore

00:55:20,880 --> 00:55:25,760
unsafe

00:55:22,880 --> 00:55:27,040
and describe why it is that when you

00:55:25,760 --> 00:55:29,680
call this

00:55:27,040 --> 00:55:30,880
that like what are what you've done to

00:55:29,680 --> 00:55:32,559
ensure that it's safe

00:55:30,880 --> 00:55:34,160
when you call it if you know that

00:55:32,559 --> 00:55:37,760
certain edge cases

00:55:34,160 --> 00:55:37,760
will cause it to explode

00:55:37,839 --> 00:55:41,440
call the safe method like if you might

00:55:39,599 --> 00:55:43,599
be in a situation where they might occur

00:55:41,440 --> 00:55:44,880
but if you know if you have initialized

00:55:43,599 --> 00:55:45,599
if you're doing psycho scientific

00:55:44,880 --> 00:55:47,280
community

00:55:45,599 --> 00:55:49,760
scientific computing for example you

00:55:47,280 --> 00:55:51,520
know all of your data

00:55:49,760 --> 00:55:53,280
uh pretty intimately you know exactly

00:55:51,520 --> 00:55:55,440
how it's laid out in memory and so forth

00:55:53,280 --> 00:55:57,680
you can probably guarantee that the edge

00:55:55,440 --> 00:56:00,480
cases will never occur

00:55:57,680 --> 00:56:02,079
i am not smart enough for that so i i

00:56:00,480 --> 00:56:04,079
would urge you to

00:56:02,079 --> 00:56:05,440
i would urge you to stick with safe but

00:56:04,079 --> 00:56:09,200
if you want to

00:56:05,440 --> 00:56:12,319
you know like

00:56:09,200 --> 00:56:15,680
yeah then that's over to you

00:56:12,319 --> 00:56:17,839
uh okay

00:56:15,680 --> 00:56:20,160
uh another question from youtube zoran

00:56:17,839 --> 00:56:22,079
uh lazarevkich

00:56:20,160 --> 00:56:24,160
have you ever had situations where your

00:56:22,079 --> 00:56:27,680
unsafe code has broken

00:56:24,160 --> 00:56:28,559
broke the safety and rust and can and if

00:56:27,680 --> 00:56:31,119
so can you

00:56:28,559 --> 00:56:32,000
give an example of how that has manifest

00:56:31,119 --> 00:56:33,680
no i have not

00:56:32,000 --> 00:56:35,760
i haven't broken the ross compiler i

00:56:33,680 --> 00:56:36,960
know that some other people have

00:56:35,760 --> 00:56:40,079
for example i believe there was a

00:56:36,960 --> 00:56:44,799
regression in 145

00:56:40,079 --> 00:56:48,400
relating to uh

00:56:44,799 --> 00:56:51,599
the use of um

00:56:48,400 --> 00:56:52,640
there was a a strange edge case relating

00:56:51,599 --> 00:56:55,680
to

00:56:52,640 --> 00:56:56,640
propagation of constants like an uh like

00:56:55,680 --> 00:57:00,319
toy code

00:56:56,640 --> 00:57:04,880
with references and um

00:57:00,319 --> 00:57:04,880
uh i haven't experienced that myself

00:57:04,960 --> 00:57:12,000
okay so um youtube michelle

00:57:09,200 --> 00:57:12,559
lazovsky is it possible to have in your

00:57:12,000 --> 00:57:15,119
project

00:57:12,559 --> 00:57:15,920
too many comments that slide with

00:57:15,119 --> 00:57:18,960
terminus tv

00:57:15,920 --> 00:57:23,200
had quite a lot in my opinion i agree

00:57:18,960 --> 00:57:27,280
i mean it's very very difficult

00:57:23,200 --> 00:57:30,799
to know where the balance is

00:57:27,280 --> 00:57:32,799
perhaps the balance exists it depends on

00:57:30,799 --> 00:57:34,400
the maturity of the project

00:57:32,799 --> 00:57:36,079
i can imagine that if you know that

00:57:34,400 --> 00:57:37,200
there are very competent developers and

00:57:36,079 --> 00:57:40,319
people who are

00:57:37,200 --> 00:57:44,640
very familiar with the domain

00:57:40,319 --> 00:57:48,720
that you don't need many comments

00:57:44,640 --> 00:57:50,480
but if unsafe is a warning to you

00:57:48,720 --> 00:57:52,079
like if it there are some people they

00:57:50,480 --> 00:57:55,119
see unsafe they're like wow

00:57:52,079 --> 00:57:55,760
hey like this is this is my play area

00:57:55,119 --> 00:57:58,400
like

00:57:55,760 --> 00:57:58,960
i love this stuff um i love pointers i

00:57:58,400 --> 00:58:02,160
love

00:57:58,960 --> 00:58:03,200
it so it's all fine to me then um maybe

00:58:02,160 --> 00:58:04,720
they don't need comments

00:58:03,200 --> 00:58:06,559
but if you're the kind of project that

00:58:04,720 --> 00:58:08,960
uses unsafe and

00:58:06,559 --> 00:58:10,400
less than one percent of their code base

00:58:08,960 --> 00:58:13,839
like probably

00:58:10,400 --> 00:58:15,440
uh most projects and whenever someone

00:58:13,839 --> 00:58:16,880
sees unsafe they kind of tense up

00:58:15,440 --> 00:58:18,319
slightly

00:58:16,880 --> 00:58:20,640
because they're worried that they're

00:58:18,319 --> 00:58:22,319
going to crash their own system

00:58:20,640 --> 00:58:26,000
or potentially introduce security

00:58:22,319 --> 00:58:26,000
vulnerabilities for their users

00:58:26,240 --> 00:58:29,839
add more comments i don't know if every

00:58:28,160 --> 00:58:32,480
single line needs to be commented

00:58:29,839 --> 00:58:33,599
i thought it was interesting to find a a

00:58:32,480 --> 00:58:37,839
code in production

00:58:33,599 --> 00:58:37,839
at least it provides more robustness

00:58:42,400 --> 00:58:48,240
oh okay from twitch

00:58:45,599 --> 00:58:49,839
soulless waffle is that like somehow

00:58:48,240 --> 00:58:51,760
reflective back on me the user name is

00:58:49,839 --> 00:58:52,160
solace ruffle i really enjoyed your talk

00:58:51,760 --> 00:58:55,040
thanks

00:58:52,160 --> 00:58:56,640
but i have one question what would be

00:58:55,040 --> 00:58:56,960
some good starting points for developers

00:58:56,640 --> 00:58:59,280
who

00:58:56,960 --> 00:59:01,119
are new to lower level programming

00:58:59,280 --> 00:59:03,280
language who want to learn how to safely

00:59:01,119 --> 00:59:05,680
write unsafe rust

00:59:03,280 --> 00:59:09,440
do you know of any resources that teach

00:59:05,680 --> 00:59:09,440
these skills from a rust perspective

00:59:09,920 --> 00:59:13,599
solas waffle do i have a book for you

00:59:14,559 --> 00:59:22,079
i will i i feel very uh

00:59:19,040 --> 00:59:22,799
i i don't do this because it's an ad i

00:59:22,079 --> 00:59:26,559
apologize

00:59:22,799 --> 00:59:30,480
uh if this offends anybody um

00:59:26,559 --> 00:59:33,119
but i do think that my book

00:59:30,480 --> 00:59:34,799
is designed to do that exactly and so i

00:59:33,119 --> 00:59:38,559
think it's appropriate here

00:59:34,799 --> 00:59:41,359
the uh rust in action book teaches you

00:59:38,559 --> 00:59:42,720
both rust and systems programming at the

00:59:41,359 --> 00:59:45,040
same time

00:59:42,720 --> 00:59:46,880
it does that it will introduce you to

00:59:45,040 --> 00:59:48,559
unsafe it doesn't go through all of

00:59:46,880 --> 00:59:49,359
those explanations but it does make you

00:59:48,559 --> 00:59:52,640
familiar

00:59:49,359 --> 00:59:54,160
with um with uh some of the reasons why

00:59:52,640 --> 00:59:57,200
you might use unsafe

00:59:54,160 --> 00:59:58,640
and so um hopefully

00:59:57,200 --> 01:00:00,960
hopefully that's true not too much of an

00:59:58,640 --> 01:00:03,760
advert but i would recommend

01:00:00,960 --> 01:00:05,440
uh in taking a look and checking the

01:00:03,760 --> 01:00:06,720
reviews and checking whether or not this

01:00:05,440 --> 01:00:09,359
seems like something that might be

01:00:06,720 --> 01:00:12,839
sensible for you

01:00:09,359 --> 01:00:16,640
uh youtube from andrew burgess by the

01:00:12,839 --> 01:00:18,160
way ask me if you want alert and clippy

01:00:16,640 --> 01:00:20,400
i think i want a lint in clippy i think

01:00:18,160 --> 01:00:22,000
the community would love more robustness

01:00:20,400 --> 01:00:25,119
around unsafe code

01:00:22,000 --> 01:00:27,520
and so uh i

01:00:25,119 --> 01:00:29,040
spent a little bit of time and probably

01:00:27,520 --> 01:00:30,000
too much time should have been preparing

01:00:29,040 --> 01:00:33,760
for the talk

01:00:30,000 --> 01:00:36,880
um inspecting clippy and i originally

01:00:33,760 --> 01:00:39,280
well i originally wanted to run

01:00:36,880 --> 01:00:41,040
linters over every public crate in

01:00:39,280 --> 01:00:44,160
crates io and maybe

01:00:41,040 --> 01:00:45,200
some uh and try and find out whether or

01:00:44,160 --> 01:00:47,920
not

01:00:45,200 --> 01:00:49,520
i wanted to go and inspect the uses of

01:00:47,920 --> 01:00:51,040
unsafe to say like what are people doing

01:00:49,520 --> 01:00:51,440
are they manipulating pointers are they

01:00:51,040 --> 01:00:54,079
doing

01:00:51,440 --> 01:00:54,839
um some weird things like transmutation

01:00:54,079 --> 01:00:58,640
like

01:00:54,839 --> 01:01:02,319
in interpreting the bit patterns of

01:00:58,640 --> 01:01:06,079
uh of like various you know like an

01:01:02,319 --> 01:01:09,440
uh an array as as integers and so forth

01:01:06,079 --> 01:01:11,040
um but um

01:01:09,440 --> 01:01:12,880
but no oh we've actually got quite a few

01:01:11,040 --> 01:01:16,079
oh two more comments i would

01:01:12,880 --> 01:01:17,280
um and so you say yeah sorry to answer

01:01:16,079 --> 01:01:21,359
that question

01:01:17,280 --> 01:01:23,760
yes add the lint

01:01:21,359 --> 01:01:25,280
i'm sure that logic um the the

01:01:23,760 --> 01:01:25,920
maintainer of that project will be happy

01:01:25,280 --> 01:01:30,160
to

01:01:25,920 --> 01:01:31,280
accept it um uh twitch louis code does

01:01:30,160 --> 01:01:33,680
rust have a way of

01:01:31,280 --> 01:01:34,400
marking unsafe code and working smoothly

01:01:33,680 --> 01:01:37,599
with it like

01:01:34,400 --> 01:01:38,640
on haskell's i o monad maybe an unsafe

01:01:37,599 --> 01:01:40,480
trade marker

01:01:38,640 --> 01:01:42,640
that is the unsafe trade sorry that's

01:01:40,480 --> 01:01:45,839
the unsafe keyword itself i would say

01:01:42,640 --> 01:01:47,520
um you're not going i

01:01:45,839 --> 01:01:50,400
there are people who probably are type

01:01:47,520 --> 01:01:51,910
theorists and who understand

01:01:50,400 --> 01:01:53,599
rust type system very

01:01:51,910 --> 01:01:56,799
[Music]

01:01:53,599 --> 01:01:58,640
uh innately and

01:01:56,799 --> 01:02:00,480
i but i'm gonna i'm just gonna admit

01:01:58,640 --> 01:02:02,799
some ignorance there i think that there

01:02:00,480 --> 01:02:04,240
are you could possibly have market

01:02:02,799 --> 01:02:05,280
traits you could definitely create

01:02:04,240 --> 01:02:08,319
something was like

01:02:05,280 --> 01:02:10,240
you know um you could create a market

01:02:08,319 --> 01:02:13,200
rate which implies unsafe i believe

01:02:10,240 --> 01:02:14,799
uh yes and i and just thinking of the

01:02:13,200 --> 01:02:15,200
top of my head i'm i've never done it

01:02:14,799 --> 01:02:19,119
but i

01:02:15,200 --> 01:02:22,960
think that there are unsafe traits

01:02:19,119 --> 01:02:26,000
and so as soon as you implement that

01:02:22,960 --> 01:02:28,799
you mark your own type as unsafe but

01:02:26,000 --> 01:02:28,799
i um

01:02:29,280 --> 01:02:31,520
uh

01:02:33,359 --> 01:02:39,200
um yeah i i'm going to express a little

01:02:37,680 --> 01:02:39,599
bit of ignorance there and just and just

01:02:39,200 --> 01:02:41,520
allow

01:02:39,599 --> 01:02:42,960
the uh the type theorists and the back

01:02:41,520 --> 01:02:46,559
channel ask

01:02:42,960 --> 01:02:49,839
ask on reddit ask on users.ruslan.org

01:02:46,559 --> 01:02:51,599
and uh and find out because again

01:02:49,839 --> 01:02:56,559
participating in the russ community

01:02:51,599 --> 01:02:59,280
is exactly why uh rust is great

01:02:56,559 --> 01:02:59,920
these technical these technical reasons

01:02:59,280 --> 01:03:02,640
are fine

01:02:59,920 --> 01:03:04,480
and perfect um you can see that other

01:03:02,640 --> 01:03:07,680
language communities are adopting

01:03:04,480 --> 01:03:09,039
a lot of the uh you know d is

01:03:07,680 --> 01:03:12,400
investigating

01:03:09,039 --> 01:03:15,920
very uh as investigating lifetimes and

01:03:12,400 --> 01:03:17,760
um and c plus plus have lots of

01:03:15,920 --> 01:03:19,520
have changed their practices to be able

01:03:17,760 --> 01:03:21,119
to use

01:03:19,520 --> 01:03:22,720
smart pointers rather than raw pointers

01:03:21,119 --> 01:03:25,359
for example

01:03:22,720 --> 01:03:27,039
and so the technical parts of the rust

01:03:25,359 --> 01:03:28,880
community i think will be adopted by

01:03:27,039 --> 01:03:31,920
other languages

01:03:28,880 --> 01:03:34,160
what we have that's special is the

01:03:31,920 --> 01:03:35,520
participation in the community aspect

01:03:34,160 --> 01:03:36,640
and so if there's something that's

01:03:35,520 --> 01:03:40,559
unfamiliar to you

01:03:36,640 --> 01:03:44,799
i would strongly encourage you to ask

01:03:40,559 --> 01:03:46,880
we um now michael ward on youtube asks

01:03:44,799 --> 01:03:48,319
a question why do you feel like bad

01:03:46,880 --> 01:03:50,799
about promoting my book

01:03:48,319 --> 01:03:52,559
uh i'm eighteen percent and it's great

01:03:50,799 --> 01:03:54,319
okay

01:03:52,559 --> 01:03:56,079
i feel bad about promoting my book

01:03:54,319 --> 01:03:58,480
because people have to pay money for my

01:03:56,079 --> 01:04:02,079
book um

01:03:58,480 --> 01:04:03,520
i uh i've been

01:04:02,079 --> 01:04:05,039
working on open i mean i've been

01:04:03,520 --> 01:04:06,960
contributing open source code for like

01:04:05,039 --> 01:04:10,400
15 years

01:04:06,960 --> 01:04:12,079
something like this and i just find it

01:04:10,400 --> 01:04:12,720
very difficult to ask for money from

01:04:12,079 --> 01:04:15,200
people

01:04:12,720 --> 01:04:16,400
um and i think especially from people

01:04:15,200 --> 01:04:18,559
who are learning

01:04:16,400 --> 01:04:20,000
and who don't know what is good and what

01:04:18,559 --> 01:04:23,200
is not i don't like

01:04:20,000 --> 01:04:23,920
uh you know about 90 of people that read

01:04:23,200 --> 01:04:26,079
my book

01:04:23,920 --> 01:04:27,520
think it's excellent no about eighty

01:04:26,079 --> 01:04:29,680
percent think it's excellent

01:04:27,520 --> 01:04:32,079
about ten percent 10 to 15 is very good

01:04:29,680 --> 01:04:33,200
and about five

01:04:32,079 --> 01:04:36,480
five percent want to throw it in the

01:04:33,200 --> 01:04:39,359
boot and like throw it in the fire

01:04:36,480 --> 01:04:40,319
so uh now i don't want to recommend that

01:04:39,359 --> 01:04:41,920
you should buy

01:04:40,319 --> 01:04:43,760
it if you're going to throw it in the

01:04:41,920 --> 01:04:48,640
fire and so

01:04:43,760 --> 01:04:48,640
um yeah i i don't

01:04:52,839 --> 01:04:57,680
um

01:04:54,559 --> 01:04:59,680
uh i don't know i

01:04:57,680 --> 01:05:02,799
it's just a personal thing i i should

01:04:59,680 --> 01:05:02,799
get better at asking for money

01:05:02,880 --> 01:05:06,480
i'm going to give like an extra 10 to 15

01:05:05,520 --> 01:05:08,960
seconds

01:05:06,480 --> 01:05:10,240
uh for me to make a decision on the most

01:05:08,960 --> 01:05:11,680
interesting question

01:05:10,240 --> 01:05:13,599
the most interesting question actually

01:05:11,680 --> 01:05:15,440
receives a uh

01:05:13,599 --> 01:05:17,280
i think we i think manning my publisher

01:05:15,440 --> 01:05:21,440
has provided some codes to

01:05:17,280 --> 01:05:23,440
the organizers um if you are selected

01:05:21,440 --> 01:05:25,119
so if you think of anything ask a

01:05:23,440 --> 01:05:26,400
question away like ask a question i'll

01:05:25,119 --> 01:05:28,240
try and include it

01:05:26,400 --> 01:05:30,480
but i'll try and pick a winner if you

01:05:28,240 --> 01:05:33,920
are the winner please stay

01:05:30,480 --> 01:05:35,839
on whichever channel you have uh

01:05:33,920 --> 01:05:37,520
asked your question on such that the

01:05:35,839 --> 01:05:42,000
organizers can contact you

01:05:37,520 --> 01:05:42,000
to send you the code

01:05:42,480 --> 01:05:45,680
uh if you are interested you're talking

01:05:44,400 --> 01:05:46,799
about if you are interested

01:05:45,680 --> 01:05:49,039
in buying the book if you go to

01:05:46,799 --> 01:05:50,079
rustanaction.com there's a 40 discount

01:05:49,039 --> 01:05:53,520
code

01:05:50,079 --> 01:05:58,400
on that page now i

01:05:53,520 --> 01:06:00,000
actually really liked the first question

01:05:58,400 --> 01:06:01,920
what would be my advice to russ

01:06:00,000 --> 01:06:04,960
programmers who are too happy to use

01:06:01,920 --> 01:06:06,720
unsafe i think that this is very

01:06:04,960 --> 01:06:08,079
interesting from like a psychological

01:06:06,720 --> 01:06:10,160
point of view

01:06:08,079 --> 01:06:11,920
because it talks to the culture of

01:06:10,160 --> 01:06:14,880
people that are new to rust

01:06:11,920 --> 01:06:15,920
and try and you know there's a lot to

01:06:14,880 --> 01:06:19,440
this idea

01:06:15,920 --> 01:06:22,640
that bringing people

01:06:19,440 --> 01:06:24,319
to a new power like it

01:06:22,640 --> 01:06:26,319
there's a there are multiple mental

01:06:24,319 --> 01:06:27,760
shifts that happen when you learn the

01:06:26,319 --> 01:06:30,880
rust programming

01:06:27,760 --> 01:06:32,640
language and uh one of them

01:06:30,880 --> 01:06:34,000
is this idea that you need to trust the

01:06:32,640 --> 01:06:35,599
compiler

01:06:34,000 --> 01:06:39,119
you know the compiler is not your enemy

01:06:35,599 --> 01:06:42,799
your compiler is actually your ally

01:06:39,119 --> 01:06:45,039
uh you you the compile the rust compiler

01:06:42,799 --> 01:06:48,559
actually is on your team

01:06:45,039 --> 01:06:50,880
and so um

01:06:48,559 --> 01:06:53,200
yeah i i i find that you know it's not

01:06:50,880 --> 01:06:55,680
um so i i definitely think that that one

01:06:53,200 --> 01:06:57,119
um that for me is the most interesting

01:06:55,680 --> 01:06:58,079
or kind of the most compelling question

01:06:57,119 --> 01:07:00,079
i think it's the one that

01:06:58,079 --> 01:07:03,039
if i were to have a beer with with you

01:07:00,079 --> 01:07:04,400
all after the cop

01:07:03,039 --> 01:07:06,160
because you know we're going to the pub

01:07:04,400 --> 01:07:08,400
afterwards right uh

01:07:06,160 --> 01:07:10,000
the um that's the question i think i

01:07:08,400 --> 01:07:11,599
would spend a lot of time

01:07:10,000 --> 01:07:13,280
trying to flesh out and explain and

01:07:11,599 --> 01:07:15,920
understand so um

01:07:13,280 --> 01:07:16,559
that is um the winning question for me

01:07:15,920 --> 01:07:20,079
um

01:07:16,559 --> 01:07:22,799
again if um

01:07:20,079 --> 01:07:23,680
uh i i would just like to to thank the

01:07:22,799 --> 01:07:26,720
organizers

01:07:23,680 --> 01:07:27,359
based in uh poland um for organizing

01:07:26,720 --> 01:07:29,680
this

01:07:27,359 --> 01:07:30,960
worldwide event i think it was fantastic

01:07:29,680 --> 01:07:34,400
and i have

01:07:30,960 --> 01:07:36,880
been uh i've been

01:07:34,400 --> 01:07:38,640
you know delighted with um well it's

01:07:36,880 --> 01:07:43,839
been it's been fantastic presenting to

01:07:38,640 --> 01:07:43,839
you all so thank you so much

01:07:51,599 --> 01:07:55,119
but first i've just got one more

01:07:54,160 --> 01:07:58,480
announcement

01:07:55,119 --> 01:07:58,480
and that is uh

01:07:59,280 --> 01:08:02,319
i think the that is that there is a

01:08:01,280 --> 01:08:06,160
hackathon

01:08:02,319 --> 01:08:06,160
if i go to rustydays.org

01:08:08,240 --> 01:08:14,880
and i look for a hackathon link

01:08:12,799 --> 01:08:16,960
sorry my internet has decided that it

01:08:14,880 --> 01:08:20,159
wants to go very slowly

01:08:16,960 --> 01:08:20,159
um here we are

01:08:20,880 --> 01:08:24,480
the topic for this year's hackathon is

01:08:23,279 --> 01:08:27,520
emergent phenomena

01:08:24,480 --> 01:08:30,319
or perhaps if you prefer can you amaze

01:08:27,520 --> 01:08:32,400
us with simple rules

01:08:30,319 --> 01:08:33,359
let's create an amazing result with a

01:08:32,400 --> 01:08:34,880
simple ruleset

01:08:33,359 --> 01:08:38,239
if you've ever heard about cellular

01:08:34,880 --> 01:08:40,159
automata fractals or similar constructs

01:08:38,239 --> 01:08:42,319
this is what we're kind of talking about

01:08:40,159 --> 01:08:42,319
so

01:08:43,040 --> 01:08:46,319
allow me to do one more plug

01:08:46,719 --> 01:08:49,839
actually if you would like to learn

01:08:49,040 --> 01:08:52,560
about

01:08:49,839 --> 01:08:54,080
writing a freckle in rust go to my

01:08:52,560 --> 01:08:58,640
youtube channel

01:08:54,080 --> 01:09:02,640
i have a video which is describes

01:08:58,640 --> 01:09:04,799
how to uh generate the mandelbrot set

01:09:02,640 --> 01:09:06,880
in rust and that can be possibly a good

01:09:04,799 --> 01:09:10,319
and i've got some other generative art

01:09:06,880 --> 01:09:13,839
tutorials in there as well and so

01:09:10,319 --> 01:09:17,920
in particular this one is

01:09:13,839 --> 01:09:20,159
about creating

01:09:17,920 --> 01:09:21,679
some generative art in rust and we kind

01:09:20,159 --> 01:09:25,120
of work through a tutorial

01:09:21,679 --> 01:09:27,120
so i uh i would encourage you

01:09:25,120 --> 01:09:28,480
again yeah to look at my youtube channel

01:09:27,120 --> 01:09:31,759
so that is

01:09:28,480 --> 01:09:35,279
um youtube.com

01:09:31,759 --> 01:09:38,640
timflix and uh

01:09:35,279 --> 01:09:41,279
great i encourage you to participate in

01:09:38,640 --> 01:09:44,080
the hackathon it's going to be fantastic

01:09:41,279 --> 01:09:45,520
and um and have a lovely week oh a

01:09:44,080 --> 01:09:46,719
lovely weekend and a lovely evening and

01:09:45,520 --> 01:09:47,839
i'll see you at the pub

01:09:46,719 --> 01:09:50,560
because this it's the last talk of the

01:09:47,839 --> 01:09:50,560
conference right

01:09:51,520 --> 01:09:56,560

YouTube URL: https://www.youtube.com/watch?v=9M0NQI5Cp2c


