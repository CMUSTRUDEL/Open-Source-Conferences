Title: RustConf 2019 - Messing Around with fn main() and Getting Away with it by Yoshua Wuyts
Publication date: 2019-09-16
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Messing Around with FN Main() and Getting Away with it by Yoshua Wuyts

The introduction of return types in main has made writing binaries a lot nicer. But why stop there? What if we could make main an async fn to support top-level await? Or perhaps allow main to take command line arguments as parameters?

In this talk Iâ€™ll show how to make fn main perform party tricks, make boilerplate disappear, and saw code size in half. And by the end of the show youâ€™ll have a good picture to take home of what Rust might look like in the future.
Captions: 
	00:00:08,770 --> 00:00:15,680
[Music]

00:00:16,900 --> 00:00:21,800
hello I'm Yosh this is my talk

00:00:20,480 --> 00:00:24,380
it's called messing around with Maine

00:00:21,800 --> 00:00:27,050
and getting away with it now Who am I I

00:00:24,380 --> 00:00:30,890
am Yosh like I said like Suns already

00:00:27,050 --> 00:00:33,170
said so it's three times I guess I'm a

00:00:30,890 --> 00:00:38,270
research engineer which means I guess I

00:00:33,170 --> 00:00:40,340
do open source anyway oh yeah background

00:00:38,270 --> 00:00:41,960
I used to do like loads of JavaScript I

00:00:40,340 --> 00:00:45,379
did I look for like five years published

00:00:41,960 --> 00:00:47,960
like things on NPM a lot and then I

00:00:45,379 --> 00:00:50,809
moved to rust like two years ago

00:00:47,960 --> 00:00:51,920
I like economics I guess it's the is the

00:00:50,809 --> 00:00:54,199
main thing that I want to share there

00:00:51,920 --> 00:00:57,229
anyway introducing the main characters

00:00:54,199 --> 00:00:59,750
of today's talk because it's not me it's

00:00:57,229 --> 00:01:04,519
not function man it's actually this guy

00:00:59,750 --> 00:01:07,520
over here name's Joshua another cat it's

00:01:04,519 --> 00:01:08,750
naughty and because this is a rest talk

00:01:07,520 --> 00:01:10,940
you know we need to introduce some

00:01:08,750 --> 00:01:15,770
concurrency some parallelism so here

00:01:10,940 --> 00:01:18,740
they are together all right okay cool so

00:01:15,770 --> 00:01:21,800
why are we giving this talk well first

00:01:18,740 --> 00:01:24,410
off my refseq of my proposal got

00:01:21,800 --> 00:01:25,820
accepted which means that no organisers

00:01:24,410 --> 00:01:30,350
were like okay we think you can give a

00:01:25,820 --> 00:01:35,120
talk but I was surprised though it's

00:01:30,350 --> 00:01:36,320
like I like function main and in

00:01:35,120 --> 00:01:38,810
JavaScript you don't really have

00:01:36,320 --> 00:01:40,400
function man you just add a pragmatic to

00:01:38,810 --> 00:01:41,810
the top of a file and you execute that

00:01:40,400 --> 00:01:44,150
file and it's like oh cool that works

00:01:41,810 --> 00:01:46,100
but you know a roast wavefunction man

00:01:44,150 --> 00:01:47,510
it's like a clear defined entry point

00:01:46,100 --> 00:01:50,210
into your program I think that's very

00:01:47,510 --> 00:01:53,120
cool I think when we added the result to

00:01:50,210 --> 00:01:54,680
it that was a nice addition um I was

00:01:53,120 --> 00:01:59,210
like thinking hey what other things can

00:01:54,680 --> 00:02:01,370
we like - I like your wax I like it you

00:01:59,210 --> 00:02:04,460
know people also call this urban onyx or

00:02:01,370 --> 00:02:06,980
like developer experience I think that's

00:02:04,460 --> 00:02:08,509
nice I think if if we provide a nice way

00:02:06,980 --> 00:02:10,280
for people to use things then they'll

00:02:08,509 --> 00:02:12,260
tend to use it and fewer mistakes are

00:02:10,280 --> 00:02:15,800
made and we all have a little bit more

00:02:12,260 --> 00:02:17,750
fun oh yeah third one is sharing ideas I

00:02:15,800 --> 00:02:19,610
have a bunch of ideas I've got a stage

00:02:17,750 --> 00:02:23,959
so sharing ideas that's what I'm getting

00:02:19,610 --> 00:02:25,579
this stuff cool so let's pretend we're

00:02:23,959 --> 00:02:29,150
all like time travelers I'm gonna fast

00:02:25,579 --> 00:02:32,120
forward to the year 2021 we have a new

00:02:29,150 --> 00:02:34,640
addition out and we're gonna write

00:02:32,120 --> 00:02:39,200
function main for a little HTTP server

00:02:34,640 --> 00:02:41,840
that we're building so well we started

00:02:39,200 --> 00:02:43,849
off with a function main you know you

00:02:41,840 --> 00:02:45,650
know this one because we're building an

00:02:43,849 --> 00:02:47,690
HTTP server and with some concurrency

00:02:45,650 --> 00:02:49,310
it's gonna be a async function main you

00:02:47,690 --> 00:02:51,739
can't call a wait without a sync so you

00:02:49,310 --> 00:02:53,120
know it's a sing function man also we

00:02:51,739 --> 00:02:55,370
need to handle errors we're not sure

00:02:53,120 --> 00:02:57,290
quite what kind of errors so we just say

00:02:55,370 --> 00:02:58,069
hey this thing throws if you're familiar

00:02:57,290 --> 00:03:00,310
with Java

00:02:58,069 --> 00:03:02,780
it's like checked up session exceptions

00:03:00,310 --> 00:03:04,850
sweet a little common because we're like

00:03:02,780 --> 00:03:07,760
good citizens we say started HTTP server

00:03:04,850 --> 00:03:09,830
then you know we need input to our

00:03:07,760 --> 00:03:12,590
applications or going to find some input

00:03:09,830 --> 00:03:15,709
arguments args of type args which we're

00:03:12,590 --> 00:03:17,390
defining out there you know well it's HP

00:03:15,709 --> 00:03:20,420
server so we need a port we need an

00:03:17,390 --> 00:03:22,519
address and I always say cool let's turn

00:03:20,420 --> 00:03:24,860
this into CLI so we derive something

00:03:22,519 --> 00:03:25,489
from crates i/o which implements CLI so

00:03:24,860 --> 00:03:27,049
wait it's cool

00:03:25,489 --> 00:03:32,239
then we're like hopefully tied still

00:03:27,049 --> 00:03:34,459
around I know but yeah we're gonna build

00:03:32,239 --> 00:03:37,880
a low HP server say I create a new tied

00:03:34,459 --> 00:03:39,980
app and I'm on the on the route slash

00:03:37,880 --> 00:03:42,799
for the methods it just be method get

00:03:39,980 --> 00:03:43,400
we're gonna say hello world man that's

00:03:42,799 --> 00:03:45,920
pretty nice

00:03:43,400 --> 00:03:47,780
and then we say start this thing on the

00:03:45,920 --> 00:03:49,730
address and the port and we await it

00:03:47,780 --> 00:03:50,090
which is fallible and then this thing

00:03:49,730 --> 00:03:53,690
goes

00:03:50,090 --> 00:03:56,630
that's a HTTP server in ten lines it's

00:03:53,690 --> 00:04:00,260
pretty good for a scene competitor might

00:03:56,630 --> 00:04:01,790
say oh I forgot about this one but you

00:04:00,260 --> 00:04:03,319
know we need to start logging so you

00:04:01,790 --> 00:04:05,389
know let's let's add some logging to

00:04:03,319 --> 00:04:08,359
this thing wait okay cool let's run this

00:04:05,389 --> 00:04:10,700
with a little help output and we'll

00:04:08,359 --> 00:04:12,680
probably look something like this pretty

00:04:10,700 --> 00:04:14,420
basic but pretty good it's kind of what

00:04:12,680 --> 00:04:17,769
you want I don't feel like run a itself

00:04:14,420 --> 00:04:20,660
we say listen on port 8080 localhost

00:04:17,769 --> 00:04:24,440
you get listening on localhost 8080 and

00:04:20,660 --> 00:04:26,030
the things now running sweet alright so

00:04:24,440 --> 00:04:28,250
for today what we're gonna do is we're

00:04:26,030 --> 00:04:30,740
gonna go over how do you get to async

00:04:28,250 --> 00:04:31,610
function main how do you get main arcs

00:04:30,740 --> 00:04:34,910
like args amen

00:04:31,610 --> 00:04:36,440
and finally improving errors in main or

00:04:34,910 --> 00:04:38,240
as I like to say we have three main

00:04:36,440 --> 00:04:43,800
courses

00:04:38,240 --> 00:04:45,660
no joke they're happy Oh laughs all

00:04:43,800 --> 00:04:53,100
right let's write function man likes

00:04:45,660 --> 00:04:56,610
2021 in 2019 sorta and also we're using

00:04:53,100 --> 00:04:58,710
proc macros procedural macros if you're

00:04:56,610 --> 00:05:01,350
familiar with the word you might be like

00:04:58,710 --> 00:05:04,290
oh yeah so I'm sorry I'm sorry through

00:05:01,350 --> 00:05:04,980
everyone who knows what this means all

00:05:04,290 --> 00:05:08,790
right

00:05:04,980 --> 00:05:11,010
act 1 async all right so how do you do

00:05:08,790 --> 00:05:13,260
this today the async function main well

00:05:11,010 --> 00:05:15,330
you don't but you define a function main

00:05:13,260 --> 00:05:19,070
Oh under server I should preface this on

00:05:15,330 --> 00:05:22,440
this server which is native or whatever

00:05:19,070 --> 00:05:24,030
you get a little executor in this case

00:05:22,440 --> 00:05:27,420
we're using async stood which came out

00:05:24,030 --> 00:05:29,460
last week let me say block on and inside

00:05:27,420 --> 00:05:32,220
of it would put a sink closure so what

00:05:29,460 --> 00:05:35,100
happens here is you need something to

00:05:32,220 --> 00:05:37,560
execute the async code all the futures

00:05:35,100 --> 00:05:39,210
and stuff and at the top level you know

00:05:37,560 --> 00:05:40,530
you mess it all the way down but top

00:05:39,210 --> 00:05:43,080
levels something needs to be running

00:05:40,530 --> 00:05:45,990
this in this case block on it runs all

00:05:43,080 --> 00:05:48,510
that async code until it's done at

00:05:45,990 --> 00:05:50,310
blocks until it's done inside of it

00:05:48,510 --> 00:05:52,290
we're gonna say hello Joshua

00:05:50,310 --> 00:05:55,200
which we met a bit earlier we're gonna

00:05:52,290 --> 00:05:58,320
sleep the sleep to task for one second

00:05:55,200 --> 00:06:00,780
we'll wait it and under it I'm gonna say

00:05:58,320 --> 00:06:02,910
hello naughty now I want you to just

00:06:00,780 --> 00:06:04,350
take a split second here to be like okay

00:06:02,910 --> 00:06:07,020
what's what's the ordering in which

00:06:04,350 --> 00:06:09,960
these things get printed cool let's

00:06:07,020 --> 00:06:12,150
write C so we run this thing we say

00:06:09,960 --> 00:06:14,040
first comes hello Joshua then comes

00:06:12,150 --> 00:06:17,400
hello naughty so this one came first

00:06:14,040 --> 00:06:19,020
this one came second cool all right now

00:06:17,400 --> 00:06:20,130
let's let's do the same thing for the

00:06:19,020 --> 00:06:23,280
browser all right

00:06:20,130 --> 00:06:25,410
so we have a function main we can't use

00:06:23,280 --> 00:06:27,060
a 6th ed quite yet so we use a wise and

00:06:25,410 --> 00:06:29,490
bunch and futures and their spawn local

00:06:27,060 --> 00:06:31,410
I would say spawn local we give it a

00:06:29,490 --> 00:06:34,380
sync closure we say hello Joshua

00:06:31,410 --> 00:06:37,170
we sleep the task for like one second

00:06:34,380 --> 00:06:39,980
again and then we say hello naughty now

00:06:37,170 --> 00:06:43,740
again like what's the ordering here

00:06:39,980 --> 00:06:45,330
that's C well hey oh hey I forgot about

00:06:43,740 --> 00:06:46,710
this alright in order to like make this

00:06:45,330 --> 00:06:47,730
make this work you actually need to do a

00:06:46,710 --> 00:06:49,650
pub function main

00:06:47,730 --> 00:06:50,920
and likewise invitin start there's an

00:06:49,650 --> 00:06:54,640
actual code that will

00:06:50,920 --> 00:06:57,040
actually work if you use this I hope so

00:06:54,640 --> 00:07:00,670
to run this you know awesome example

00:06:57,040 --> 00:07:02,290
hello naughty hello Joshua yeah that's

00:07:00,670 --> 00:07:03,790
not super because it means that this

00:07:02,290 --> 00:07:04,600
one's running first and this one's

00:07:03,790 --> 00:07:06,730
running second

00:07:04,600 --> 00:07:08,830
and the reason for that is because we're

00:07:06,730 --> 00:07:10,240
not in control of the executor in the

00:07:08,830 --> 00:07:13,030
browser because we're hooking into

00:07:10,240 --> 00:07:14,980
JavaScript promises and promises are

00:07:13,030 --> 00:07:16,570
invocate immediately which means that

00:07:14,980 --> 00:07:18,670
spawn local essentially kicks off a

00:07:16,570 --> 00:07:20,740
background task as queued for a next

00:07:18,670 --> 00:07:23,560
take on the event loop and print line

00:07:20,740 --> 00:07:25,660
nor or hello naughty is printed

00:07:23,560 --> 00:07:27,370
immediately right sirs differences

00:07:25,660 --> 00:07:29,830
between how it works in the browser and

00:07:27,370 --> 00:07:31,420
how it works on servers were difference

00:07:29,830 --> 00:07:32,620
in control and there's like more

00:07:31,420 --> 00:07:37,140
environments where these differences

00:07:32,620 --> 00:07:40,180
exist so a solution to this would be

00:07:37,140 --> 00:07:42,010
where you can't get it wrong is if we

00:07:40,180 --> 00:07:44,440
had something like async function main

00:07:42,010 --> 00:07:46,870
in which we can just say hey sleep for

00:07:44,440 --> 00:07:49,720
one sec then we say hello Joshua hello

00:07:46,870 --> 00:07:53,020
naughty there's no more a question of

00:07:49,720 --> 00:07:56,110
ordering and a way we can make this

00:07:53,020 --> 00:07:58,470
happen today is using runtime which is

00:07:56,110 --> 00:08:02,080
I'm not sure if you should be using this

00:07:58,470 --> 00:08:03,460
but it works you can add a little

00:08:02,080 --> 00:08:05,650
attribute to the top which just says

00:08:03,460 --> 00:08:07,360
like it is async function main and we

00:08:05,650 --> 00:08:09,490
have a PR out we're not smart to forget

00:08:07,360 --> 00:08:11,140
that actually makes this work on both

00:08:09,490 --> 00:08:12,880
the server and in the browser

00:08:11,140 --> 00:08:15,250
removing the differences which is kind

00:08:12,880 --> 00:08:18,160
of cool so yeah that's that's the first

00:08:15,250 --> 00:08:20,380
one I was second one right go chapter

00:08:18,160 --> 00:08:23,260
two arguments how do we get arguments in

00:08:20,380 --> 00:08:25,630
main well um little primer on what

00:08:23,260 --> 00:08:28,090
arguments are I like to think of them as

00:08:25,630 --> 00:08:30,250
input to your application right so you

00:08:28,090 --> 00:08:32,530
boot up your app and like it gets

00:08:30,250 --> 00:08:34,420
arguments it gets input from somewhere

00:08:32,530 --> 00:08:35,860
so a classic one is for command line

00:08:34,420 --> 00:08:38,110
apps you have your command line

00:08:35,860 --> 00:08:40,060
arguments but also if you're running

00:08:38,110 --> 00:08:41,740
stuff again in a browser what you might

00:08:40,060 --> 00:08:44,320
actually have is URLs like query

00:08:41,740 --> 00:08:46,810
parameter like stuff on window navigator

00:08:44,320 --> 00:08:48,550
that is like initial state but you need

00:08:46,810 --> 00:08:50,920
to read out before you can boot up your

00:08:48,550 --> 00:08:54,210
application or someone's inlining JSON

00:08:50,920 --> 00:08:56,980
and your HTML header and like whatever

00:08:54,210 --> 00:08:59,730
but you know there's an initial status

00:08:56,980 --> 00:09:01,720
thing another one's like serverless apps

00:08:59,730 --> 00:09:04,180
which might have an incoming request

00:09:01,720 --> 00:09:04,710
that's the thing that's like given to it

00:09:04,180 --> 00:09:07,140
my boot

00:09:04,710 --> 00:09:10,290
up and has like some form of output at

00:09:07,140 --> 00:09:12,060
the end again so arguments today how

00:09:10,290 --> 00:09:13,590
would you go about writing a little

00:09:12,060 --> 00:09:16,410
command line app probably something like

00:09:13,590 --> 00:09:18,720
this little function man let me say stay

00:09:16,410 --> 00:09:21,600
down you know the N marks so we get the

00:09:18,720 --> 00:09:25,740
arguments and I only say for Argan args

00:09:21,600 --> 00:09:26,910
let's print the Arg cool sweet well not

00:09:25,740 --> 00:09:28,920
really that's not really how you do

00:09:26,910 --> 00:09:31,290
things that's that's the the pretty

00:09:28,920 --> 00:09:34,260
example the actual example with probably

00:09:31,290 --> 00:09:36,330
you know look a bit more like this you

00:09:34,260 --> 00:09:38,520
know it's a function man we got sedan

00:09:36,330 --> 00:09:40,650
mugs again you know and instead of like

00:09:38,520 --> 00:09:42,360
iterating over it nicely oops it needs

00:09:40,650 --> 00:09:43,830
to be mutable also we need to skip the

00:09:42,360 --> 00:09:46,560
first one because those are self you

00:09:43,830 --> 00:09:48,960
know then we get the next one oh we're

00:09:46,560 --> 00:09:51,660
building HTP server again by the way we

00:09:48,960 --> 00:09:53,940
get the address out Oh unwrapped or

00:09:51,660 --> 00:09:56,490
Hanalei or somehow cool let's get the

00:09:53,940 --> 00:09:59,150
port that is next on the wrap parse

00:09:56,490 --> 00:10:01,440
unwrapped alright that's not that great

00:09:59,150 --> 00:10:03,630
so in practice people don't really do

00:10:01,440 --> 00:10:06,960
that they tend to use struct opt more

00:10:03,630 --> 00:10:08,280
likely or clap which is similar sorry

00:10:06,960 --> 00:10:10,590
you know you define a little struct you

00:10:08,280 --> 00:10:12,660
say like hey I want to port you 16 I

00:10:10,590 --> 00:10:15,540
want to address which is string then we

00:10:12,660 --> 00:10:18,810
derive struct opt on it and then we say

00:10:15,540 --> 00:10:21,390
4 - P or - - port is that one instead of

00:10:18,810 --> 00:10:25,830
like positional - a or - - address is

00:10:21,390 --> 00:10:27,060
the other one you know I really like

00:10:25,830 --> 00:10:32,430
that can just like click to the next

00:10:27,060 --> 00:10:34,680
line yeah and then like the way we

00:10:32,430 --> 00:10:36,840
instantiate this and we say like we get

00:10:34,680 --> 00:10:38,820
the struct which now implements a from

00:10:36,840 --> 00:10:41,520
args argument that you need to know

00:10:38,820 --> 00:10:43,860
about there's a few others which I've

00:10:41,520 --> 00:10:46,410
never used then you say Argos remarks

00:10:43,860 --> 00:10:49,070
and then we get that which means in

00:10:46,410 --> 00:10:51,840
either instantiates or panics you know

00:10:49,070 --> 00:10:54,170
is they like the questionnaire is like

00:10:51,840 --> 00:10:56,880
is it clear that we are instantiating

00:10:54,170 --> 00:11:00,390
application input I don't think so

00:10:56,880 --> 00:11:02,430
so arguments of tomorrow a better way of

00:11:00,390 --> 00:11:04,440
doing this I think would be if we

00:11:02,430 --> 00:11:07,590
followed what oh I have a double slider

00:11:04,440 --> 00:11:10,050
if we follow what C does with Arg C and

00:11:07,590 --> 00:11:11,550
argue but instead of like doing those

00:11:10,050 --> 00:11:13,740
which is only for iterating we could

00:11:11,550 --> 00:11:14,910
just put arbitrary like structs in it as

00:11:13,740 --> 00:11:17,620
long as they implement some sort of

00:11:14,910 --> 00:11:19,330
trait into the main position

00:11:17,620 --> 00:11:21,970
can do the parsing for us so in this

00:11:19,330 --> 00:11:27,010
case we would be able to define args and

00:11:21,970 --> 00:11:29,350
args like and it if as long as it parses

00:11:27,010 --> 00:11:30,850
we get the actual instantiation so it's

00:11:29,350 --> 00:11:32,230
cool from from there on out we can look

00:11:30,850 --> 00:11:34,630
assume that the states correctly be

00:11:32,230 --> 00:11:37,960
initialized wait so how can we make this

00:11:34,630 --> 00:11:41,500
happen today is using a little attribute

00:11:37,960 --> 00:11:43,330
called pas main from a critical path I

00:11:41,500 --> 00:11:46,870
would not recommend you use this in

00:11:43,330 --> 00:11:48,970
production but definitely try it out so

00:11:46,870 --> 00:11:52,270
you have like parrot-like async code

00:11:48,970 --> 00:11:54,790
things go horribly wrong tried to fix

00:11:52,270 --> 00:11:56,860
they can fix it anyway yeah this is

00:11:54,790 --> 00:11:59,160
pretty fun like try it out it actually

00:11:56,860 --> 00:12:03,250
works works like this you able to see it

00:11:59,160 --> 00:12:10,750
which I think's putting this yeah so

00:12:03,250 --> 00:12:12,430
arguments of tomorrow is for service you

00:12:10,750 --> 00:12:14,620
know we were talking about like a server

00:12:12,430 --> 00:12:15,640
list how would this work so it is a

00:12:14,620 --> 00:12:19,810
function main

00:12:15,640 --> 00:12:22,120
let's async we get an incoming event so

00:12:19,810 --> 00:12:24,040
this this app is like boot like

00:12:22,120 --> 00:12:26,290
triggered started whenever there's an

00:12:24,040 --> 00:12:28,870
event incoming in this case its type

00:12:26,290 --> 00:12:30,820
string then we say cool we're gonna

00:12:28,870 --> 00:12:33,010
print it out and like return it it's

00:12:30,820 --> 00:12:36,100
like a little fallible signature there

00:12:33,010 --> 00:12:40,480
we say okay event then we add a lambda

00:12:36,100 --> 00:12:42,120
lambda in the case of AWS so this is not

00:12:40,480 --> 00:12:46,000
even too far out because actually

00:12:42,120 --> 00:12:47,560
there's OPR under arrest lens at runtime

00:12:46,000 --> 00:12:49,240
and they were like oh paw is pretty

00:12:47,560 --> 00:12:51,850
sweet like we want this for our thing

00:12:49,240 --> 00:12:54,420
and you know it's pretty cool so yeah

00:12:51,850 --> 00:12:54,420
it's definitely possible

00:12:54,520 --> 00:13:04,030
yes great okay cool let's ignore that

00:12:56,590 --> 00:13:06,730
let's get to earth all right Eris cool

00:13:04,030 --> 00:13:12,670
so a quick little primer again for what

00:13:06,730 --> 00:13:14,260
are errors there's a there's two kinds

00:13:12,670 --> 00:13:17,620
of errors I like to think about

00:13:14,260 --> 00:13:19,570
there's the errors you can handle which

00:13:17,620 --> 00:13:21,190
I like to refer to as exceptions they're

00:13:19,570 --> 00:13:23,230
the result or type

00:13:21,190 --> 00:13:25,360
and there's the errors you can't really

00:13:23,230 --> 00:13:28,210
handle which are the panic types which

00:13:25,360 --> 00:13:30,820
are invoked through panic and they they

00:13:28,210 --> 00:13:32,860
tend to crash your app there's some edge

00:13:30,820 --> 00:13:34,090
cases around threads and whether or not

00:13:32,860 --> 00:13:35,830
that should like crush your app but

00:13:34,090 --> 00:13:37,870
let's just assume it crashes your app

00:13:35,830 --> 00:13:41,610
right cool

00:13:37,870 --> 00:13:44,800
so today there's a little thing about oh

00:13:41,610 --> 00:13:48,190
is this okay mess up my slides I'm not

00:13:44,800 --> 00:13:53,050
sure I think I messed up my slides here

00:13:48,190 --> 00:13:55,500
alright so okay rapping I think this is

00:13:53,050 --> 00:13:58,150
supposed to be catch-all but whatever

00:13:55,500 --> 00:14:00,580
alright so we start off with async

00:13:58,150 --> 00:14:03,430
function main which returns a results

00:14:00,580 --> 00:14:05,020
and it's gonna return some form of some

00:14:03,430 --> 00:14:06,910
form of error which we're going to find

00:14:05,020 --> 00:14:08,800
it a bit we just say is type exception

00:14:06,910 --> 00:14:11,200
all right the inside of it we're gonna

00:14:08,800 --> 00:14:13,750
do two things we have a get cat method

00:14:11,200 --> 00:14:17,200
which queries an API somewhere to get a

00:14:13,750 --> 00:14:19,960
cat we wrapped it in debug before I

00:14:17,200 --> 00:14:21,760
forget why and we have another method

00:14:19,960 --> 00:14:24,130
called process cat which may or may not

00:14:21,760 --> 00:14:26,500
do some sort of like I owe my do

00:14:24,130 --> 00:14:28,390
Sabretooth database I'm not sure right

00:14:26,500 --> 00:14:30,190
we we don't really know we're just

00:14:28,390 --> 00:14:32,110
looking at this at this method we have

00:14:30,190 --> 00:14:35,470
these two these two methods that were

00:14:32,110 --> 00:14:38,200
like trying to do something with they're

00:14:35,470 --> 00:14:39,640
both async they're both fallible and we

00:14:38,200 --> 00:14:41,590
don't really know what the what the

00:14:39,640 --> 00:14:44,110
error type here is right we just see

00:14:41,590 --> 00:14:46,000
like oh it returns a result of something

00:14:44,110 --> 00:14:47,440
and the other one probably returns a

00:14:46,000 --> 00:14:49,180
different result so what we actually

00:14:47,440 --> 00:14:51,970
want to have is we're going to have an

00:14:49,180 --> 00:14:54,340
error type in our top level that can

00:14:51,970 --> 00:14:56,050
like abstract over both of them where we

00:14:54,340 --> 00:14:58,240
don't need to choose one but we just you

00:14:56,050 --> 00:15:01,150
know like it's an error sweet let's

00:14:58,240 --> 00:15:05,620
propagate it so the way we would define

00:15:01,150 --> 00:15:07,250
this today is by oh and we're missing a

00:15:05,620 --> 00:15:10,329
little little okay of

00:15:07,250 --> 00:15:13,129
unit at the end which is very common so

00:15:10,329 --> 00:15:15,610
the way we would define us today is we

00:15:13,129 --> 00:15:20,269
would define a little arrow type up top

00:15:15,610 --> 00:15:21,529
with which is din error then stood error

00:15:20,269 --> 00:15:22,759
error I didn't want to type it out it

00:15:21,529 --> 00:15:24,769
didn't fail in the slide so just in

00:15:22,759 --> 00:15:27,680
there we need to box it so I'm going to

00:15:24,769 --> 00:15:30,529
turn into a pointer because it's async

00:15:27,680 --> 00:15:32,720
code we need to add a send bound we also

00:15:30,529 --> 00:15:35,629
need to add a sync bound unfortunately

00:15:32,720 --> 00:15:37,579
and we need to make sure it doesn't

00:15:35,629 --> 00:15:40,160
borrow so it needs to be a static

00:15:37,579 --> 00:15:41,750
lifetime all right that's pretty verbose

00:15:40,160 --> 00:15:43,279
and if you're new to rust or need to

00:15:41,750 --> 00:15:44,629
async rest you're like whoa I need to

00:15:43,279 --> 00:15:47,720
type that out every single time it's

00:15:44,629 --> 00:15:50,899
like yeah or reuse it somehow but it's

00:15:47,720 --> 00:15:54,259
not built-in so that's not great so

00:15:50,899 --> 00:15:55,910
challenges yes okay fix the slide catch

00:15:54,259 --> 00:15:57,529
all exceptions that's that's that's one

00:15:55,910 --> 00:16:03,230
challenge right next challenge

00:15:57,529 --> 00:16:05,180
okay wrapping alright so yeah like I

00:16:03,230 --> 00:16:06,819
said earlier as we need we need this

00:16:05,180 --> 00:16:10,579
little this little thing here at the end

00:16:06,819 --> 00:16:15,649
okay of type unit and that's not great

00:16:10,579 --> 00:16:17,769
when we're like writing like infallible

00:16:15,649 --> 00:16:21,139
code code that doesn't return results

00:16:17,769 --> 00:16:22,819
the the return type is always unit and I

00:16:21,139 --> 00:16:23,990
was like assume that is unit so we don't

00:16:22,819 --> 00:16:25,519
need to write it out we don't need to

00:16:23,990 --> 00:16:27,079
write it out signature we don't need to

00:16:25,519 --> 00:16:29,420
add to the end of the line it's just

00:16:27,079 --> 00:16:31,519
like a it's unit whatever but if it

00:16:29,420 --> 00:16:34,309
becomes fallible right then we need to

00:16:31,519 --> 00:16:36,980
write a result type like you can see up

00:16:34,309 --> 00:16:39,920
there and also like write it into into

00:16:36,980 --> 00:16:41,870
our return type so you know a one-liner

00:16:39,920 --> 00:16:44,360
might become like a two liner for sure

00:16:41,870 --> 00:16:45,769
and like in this case we have a method

00:16:44,360 --> 00:16:48,230
that's actually supposed to be like two

00:16:45,769 --> 00:16:51,949
lines but we need to add that okay of

00:16:48,230 --> 00:16:54,079
that thing at the end it's not super and

00:16:51,949 --> 00:16:55,279
so another one is okay wrapping that's

00:16:54,079 --> 00:16:58,100
that's a bit of a challenge these days

00:16:55,279 --> 00:17:04,730
it's it's a little work there so finally

00:16:58,100 --> 00:17:07,220
is exception contacts so in this case if

00:17:04,730 --> 00:17:08,689
we have a panic Kotick and panic you

00:17:07,220 --> 00:17:10,280
know for example a function man just

00:17:08,689 --> 00:17:13,429
panics with oops and when you run this

00:17:10,280 --> 00:17:17,110
it will look something like this you

00:17:13,429 --> 00:17:19,539
know it says thread man panic that oops

00:17:17,110 --> 00:17:23,350
source may in our ass

00:17:19,539 --> 00:17:25,329
line six in there or whatever the sides

00:17:23,350 --> 00:17:27,100
I don't know what it's called and then

00:17:25,329 --> 00:17:29,260
then we get a back-trace a list of

00:17:27,100 --> 00:17:31,179
reasons how we got there it's not so

00:17:29,260 --> 00:17:33,760
it's not always like the nicest to look

00:17:31,179 --> 00:17:35,679
at but definitely if you're like digging

00:17:33,760 --> 00:17:37,690
in you're like okay I can find what

00:17:35,679 --> 00:17:39,730
actually went wrong here so you got

00:17:37,690 --> 00:17:42,909
location which is important and you get

00:17:39,730 --> 00:17:45,690
a list of reasons now if we were to like

00:17:42,909 --> 00:17:46,899
run a previous code an error occurred

00:17:45,690 --> 00:17:48,760
right

00:17:46,899 --> 00:17:53,159
it doesn't panic it might look something

00:17:48,760 --> 00:17:55,960
like this it's like oh we got an error

00:17:53,159 --> 00:17:58,149
socket hang out cool did this happen

00:17:55,960 --> 00:17:59,740
when we had like an incoming request did

00:17:58,149 --> 00:18:02,289
this happen when we had like an outgoing

00:17:59,740 --> 00:18:07,450
requests where is this happening right

00:18:02,289 --> 00:18:10,389
so yeah it's not super so that's not a

00:18:07,450 --> 00:18:13,539
challenge era context so in the errors

00:18:10,389 --> 00:18:16,510
of tomorrow what would be nice is if we

00:18:13,539 --> 00:18:19,899
could get rid of this if we can also

00:18:16,510 --> 00:18:22,720
like get rid of this a way to do this

00:18:19,899 --> 00:18:25,059
might be to have a type of stood error

00:18:22,720 --> 00:18:28,840
exception but we don't instead what

00:18:25,059 --> 00:18:30,669
we're proposing is throws right so we

00:18:28,840 --> 00:18:32,169
add a little keyword which removes the

00:18:30,669 --> 00:18:34,240
need for okay wrapping which allows you

00:18:32,169 --> 00:18:35,980
to use throw which we're not showing

00:18:34,240 --> 00:18:37,809
here inside the function body to

00:18:35,980 --> 00:18:39,700
propagate errors question mark keeps on

00:18:37,809 --> 00:18:43,059
working but we get rid of the okay

00:18:39,700 --> 00:18:46,419
wrapping also after throws you could do

00:18:43,059 --> 00:18:48,309
an error type to specify like a it

00:18:46,419 --> 00:18:49,929
throws this error but if you omit it it

00:18:48,309 --> 00:18:54,580
just says like cool it's a boxed in

00:18:49,929 --> 00:18:56,440
error send saying static you know that's

00:18:54,580 --> 00:18:58,990
kind of nice also what we would want

00:18:56,440 --> 00:19:01,480
probably is if instead of like that

00:18:58,990 --> 00:19:03,220
little error socket hang-up we could get

00:19:01,480 --> 00:19:06,090
something a little bit closer like this

00:19:03,220 --> 00:19:08,230
it says like hey the socket hung up

00:19:06,090 --> 00:19:11,110
because while we were performing a get

00:19:08,230 --> 00:19:13,870
request while we were getting a cat from

00:19:11,110 --> 00:19:16,179
the API and starting our HTTP server so

00:19:13,870 --> 00:19:18,130
you're like oh sweet I kind of get where

00:19:16,179 --> 00:19:19,870
this arrow came from and like you can

00:19:18,130 --> 00:19:21,370
also see a location there's a little

00:19:19,870 --> 00:19:23,080
macro in the standard lit to just

00:19:21,370 --> 00:19:26,500
statically inject the location of where

00:19:23,080 --> 00:19:28,690
something is so surf one-off cool we're

00:19:26,500 --> 00:19:30,399
using surf fair and then like I went

00:19:28,690 --> 00:19:31,870
into Maine alright sweet I know I know

00:19:30,399 --> 00:19:33,580
where this error came from and like I

00:19:31,870 --> 00:19:36,430
can start figuring out

00:19:33,580 --> 00:19:39,220
why it is this happening so you get

00:19:36,430 --> 00:19:41,560
location and you lists the reasons right

00:19:39,220 --> 00:19:44,860
so how can we make this this happened

00:19:41,560 --> 00:19:48,940
today whoops

00:19:44,860 --> 00:19:51,610
you can't well you really would want is

00:19:48,940 --> 00:19:52,450
if this was possible and we have a

00:19:51,610 --> 00:19:54,190
little gist

00:19:52,450 --> 00:19:56,650
somewhere I hacked something together

00:19:54,190 --> 00:19:58,390
with like try functions in the block and

00:19:56,650 --> 00:20:01,960
like proc macros to make this work

00:19:58,390 --> 00:20:06,220
it's not usable this really someone

00:20:01,960 --> 00:20:08,050
someone should just like build that so

00:20:06,220 --> 00:20:11,050
yeah if you're looking for side projects

00:20:08,050 --> 00:20:13,000
please do anyway

00:20:11,050 --> 00:20:15,520
what we can do so we come to the throws

00:20:13,000 --> 00:20:18,520
thing what we can do today is using

00:20:15,520 --> 00:20:20,410
arrow contacts so the in failure there's

00:20:18,520 --> 00:20:22,720
a thing called result X which allows you

00:20:20,410 --> 00:20:25,630
to add context to an error which looks

00:20:22,720 --> 00:20:28,870
kind of like this so say our error dot

00:20:25,630 --> 00:20:31,420
context whew wait did that mess around a

00:20:28,870 --> 00:20:33,310
wait and question mark no turfy

00:20:31,420 --> 00:20:35,020
orderings exactly right here but the

00:20:33,310 --> 00:20:38,410
idea is you say doc context on your

00:20:35,020 --> 00:20:39,820
result type and I new add a little

00:20:38,410 --> 00:20:42,490
message like hey we're trying to get a

00:20:39,820 --> 00:20:46,030
cat from the API but what we're doing

00:20:42,490 --> 00:20:49,060
here is we're using it at the time of

00:20:46,030 --> 00:20:50,740
our what do we call it but but but at

00:20:49,060 --> 00:20:52,720
the time that we're calling it what we

00:20:50,740 --> 00:20:54,400
really want is like sorta inside of the

00:20:52,720 --> 00:20:58,330
function definition inside the function

00:20:54,400 --> 00:20:59,950
body so yeah it should actually part of

00:20:58,330 --> 00:21:02,410
Kali it'd be nicer if that was like

00:20:59,950 --> 00:21:05,260
there yeah anyway

00:21:02,410 --> 00:21:08,770
Eric context tomorrow what can we do

00:21:05,260 --> 00:21:11,350
here is now imagine the little get cat

00:21:08,770 --> 00:21:12,700
function we would probably define it

00:21:11,350 --> 00:21:14,800
something like this where you say hey it

00:21:12,700 --> 00:21:17,200
returns a string it's called get cat

00:21:14,800 --> 00:21:19,330
it's an async function inside of it

00:21:17,200 --> 00:21:21,190
we're gonna call an HTTP client this

00:21:19,330 --> 00:21:24,540
case we're using Cerf give it a little

00:21:21,190 --> 00:21:26,890
URL we say get something from the API

00:21:24,540 --> 00:21:28,930
gives us back a cat's truck that we're

00:21:26,890 --> 00:21:30,790
like destructuring into just the name

00:21:28,930 --> 00:21:33,100
value because that's the only thing we

00:21:30,790 --> 00:21:34,870
care about and we await it now look at

00:21:33,100 --> 00:21:37,150
this function it's like if we're

00:21:34,870 --> 00:21:39,400
wondering like what does this do then

00:21:37,150 --> 00:21:41,590
actually it's pretty easy to see because

00:21:39,400 --> 00:21:43,360
we have a little comment up there that

00:21:41,590 --> 00:21:45,670
says hey this thing gets a cat from the

00:21:43,360 --> 00:21:46,620
API so it would be really nice if we

00:21:45,670 --> 00:21:48,870
could do

00:21:46,620 --> 00:21:51,150
would be if we could just define it like

00:21:48,870 --> 00:21:53,400
this where you say like hey what's the

00:21:51,150 --> 00:21:54,990
context for dysfunction it's just the DA

00:21:53,400 --> 00:22:00,179
comment up there which says get a cat

00:21:54,990 --> 00:22:02,220
from the API this works today so instead

00:22:00,179 --> 00:22:05,100
of like writing all that all that dot

00:22:02,220 --> 00:22:07,169
context code with failure and whatnot

00:22:05,100 --> 00:22:08,190
you can use this thing which will have

00:22:07,169 --> 00:22:11,520
that for you

00:22:08,190 --> 00:22:12,870
using just comments yeah it's called

00:22:11,520 --> 00:22:15,270
context attribute you can get from

00:22:12,870 --> 00:22:20,120
Crites io I think this one's reasonably

00:22:15,270 --> 00:22:20,120
solid it will not break your code I hope

00:22:20,870 --> 00:22:28,980
anyway in conclusion rounding out this

00:22:25,230 --> 00:22:32,820
talk is you can write this function main

00:22:28,980 --> 00:22:35,659
that we saw here easily just by doing

00:22:32,820 --> 00:22:38,100
this today

00:22:35,659 --> 00:22:41,460
please don't also tries doesn't work but

00:22:38,100 --> 00:22:43,950
I know please like something to look

00:22:41,460 --> 00:22:45,539
forward to if you're interested in how

00:22:43,950 --> 00:22:47,100
we made all these things work they're

00:22:45,539 --> 00:22:48,450
all like available and crates i/o and

00:22:47,100 --> 00:22:50,490
the codes open so you can like look

00:22:48,450 --> 00:22:52,470
through them but most importantly if you

00:22:50,490 --> 00:22:54,179
want to define your own proc macros and

00:22:52,470 --> 00:22:56,970
play around with stuff check out the

00:22:54,179 --> 00:23:00,120
sink rate the quote crate that work

00:22:56,970 --> 00:23:05,010
together and ace the Explorer done that

00:23:00,120 --> 00:23:07,950
which has a wasm version of the parser

00:23:05,010 --> 00:23:09,690
and a ste Walker for Russ which is super

00:23:07,950 --> 00:23:11,070
nice because you just put your rest code

00:23:09,690 --> 00:23:12,990
in there like shows you the AC

00:23:11,070 --> 00:23:14,370
definition for your rest code which is

00:23:12,990 --> 00:23:16,500
super useful if you're like getting into

00:23:14,370 --> 00:23:18,330
this so yeah all right

00:23:16,500 --> 00:23:19,649
final note from Cheshire naughty we said

00:23:18,330 --> 00:23:21,659
they were two main characters they kind

00:23:19,649 --> 00:23:24,570
of took a backseat sorry but they're

00:23:21,659 --> 00:23:27,059
back here so you know just just got a

00:23:24,570 --> 00:23:29,630
gonna have them say hi was Joshua

00:23:27,059 --> 00:23:29,630
skateboard

00:23:29,720 --> 00:23:42,049
and here's a here's a here's an OT going

00:23:34,679 --> 00:23:45,870
down the slide alright thanks so much

00:23:42,049 --> 00:23:46,280
you can find me here on Twitter get up

00:23:45,870 --> 00:23:47,040
whatever

00:23:46,280 --> 00:24:00,339
[Applause]

00:23:47,040 --> 00:24:00,339

YouTube URL: https://www.youtube.com/watch?v=9MkZa70pfC4


