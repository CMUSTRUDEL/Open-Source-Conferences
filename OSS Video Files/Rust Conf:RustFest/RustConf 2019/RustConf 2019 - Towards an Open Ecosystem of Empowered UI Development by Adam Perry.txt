Title: RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry
Publication date: 2019-09-16
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry

Rustaceans want to write GUI apps in their "native language" and to do it with declarative syntax, type safety, great tooling, and minimal runtime overhead. Moxie is a platform-agnostic component library to provide just that, currently targeting the DOM, win32, and WebRender, with more targets to come. We're on a path to building Rust apps that instantly reflect user intent, correctly handle inputs, and save battery and CPU cycles. We discuss what makes UI hard, how others handled that in the past, and what we can do today in Rust to clear those hurdles and unlock new powers.
Captions: 
	00:00:08,770 --> 00:00:15,680
[Music]

00:00:17,140 --> 00:00:23,270
all right my I'm miked I can hear myself

00:00:20,450 --> 00:00:27,310
am I on the screen I am on the screen we

00:00:23,270 --> 00:00:27,310
are all here it is Russ conf

00:00:28,420 --> 00:00:32,450
thank you by the way for being here

00:00:30,650 --> 00:00:34,400
sharing your lovely presence with me

00:00:32,450 --> 00:00:36,710
here and thank you to the staff and

00:00:34,400 --> 00:00:38,540
organizers as well it's I mean having

00:00:36,710 --> 00:00:42,230
been on the other side of some events

00:00:38,540 --> 00:00:43,309
it's monumental and I am not jealous of

00:00:42,230 --> 00:00:44,180
the job they do and I'm extremely

00:00:43,309 --> 00:00:46,580
grateful for it

00:00:44,180 --> 00:00:51,500
if you see me organizer around to thank

00:00:46,580 --> 00:00:53,420
them so Who am I I have an origin story

00:00:51,500 --> 00:00:55,010
much longer than any of our births of

00:00:53,420 --> 00:00:56,210
course you all do too if you aren't

00:00:55,010 --> 00:00:58,970
thinking about that a lot these days you

00:00:56,210 --> 00:01:00,979
might want to like it's a fun story - a

00:00:58,970 --> 00:01:02,960
fun line to draw into the past but I've

00:01:00,979 --> 00:01:04,909
been using Russ for about four years now

00:01:02,960 --> 00:01:06,710
I learned it right around the time I got

00:01:04,909 --> 00:01:09,260
my first full-time programming job as

00:01:06,710 --> 00:01:12,080
like a professional software person so

00:01:09,260 --> 00:01:13,220
my enthusiasm for rust has had me

00:01:12,080 --> 00:01:14,990
involved in this community for that

00:01:13,220 --> 00:01:17,330
whole time and it's been a pretty

00:01:14,990 --> 00:01:19,460
central element of my like personal and

00:01:17,330 --> 00:01:20,630
professional growth lots of friends I

00:01:19,460 --> 00:01:21,980
see in the audience here you've all been

00:01:20,630 --> 00:01:23,570
a part of that and people that I would

00:01:21,980 --> 00:01:25,930
like to meet afterwards hopefully you

00:01:23,570 --> 00:01:29,090
can be a part of that in the future and

00:01:25,930 --> 00:01:31,280
so aside from the rusted story before my

00:01:29,090 --> 00:01:32,660
current my current work I was at the

00:01:31,280 --> 00:01:35,510
startup building like react native

00:01:32,660 --> 00:01:39,020
developer tools and I got pretty nerd

00:01:35,510 --> 00:01:41,360
sniped by you know the challenges of GUI

00:01:39,020 --> 00:01:44,060
application frameworks and being able to

00:01:41,360 --> 00:01:46,040
iterate on them over time trying to ship

00:01:44,060 --> 00:01:48,680
products on multiple you know multiple

00:01:46,040 --> 00:01:51,620
platforms don't even begin to think

00:01:48,680 --> 00:01:52,910
about like desktop and mobile and so you

00:01:51,620 --> 00:01:53,870
know I kind of been thinking about it a

00:01:52,910 --> 00:01:56,420
lot and we were working on this project

00:01:53,870 --> 00:01:58,310
for a while and then of course the the

00:01:56,420 --> 00:02:00,470
requisite disclaimer I do work at a tech

00:01:58,310 --> 00:02:02,090
company who has a very effective and

00:02:00,470 --> 00:02:05,150
professional PR and marketing department

00:02:02,090 --> 00:02:06,710
I am NOT here as a representative and

00:02:05,150 --> 00:02:08,179
further disclaimer I'm actually not

00:02:06,710 --> 00:02:09,769
working on this with my day job at all I

00:02:08,179 --> 00:02:11,780
do you know I'm very privileged to write

00:02:09,769 --> 00:02:14,629
rust for a pay but this isn't what I'm

00:02:11,780 --> 00:02:16,340
doing and then another point to keep in

00:02:14,629 --> 00:02:19,129
mind I'm like almost definitely wrong

00:02:16,340 --> 00:02:20,720
about really important things I started

00:02:19,129 --> 00:02:23,330
this project in part because I wanted to

00:02:20,720 --> 00:02:24,859
build apps and I was too picky so I'm

00:02:23,330 --> 00:02:26,450
not really a person who builds apps I

00:02:24,859 --> 00:02:28,430
see a lot of interesting technical

00:02:26,450 --> 00:02:29,900
problems here but I want to learn more

00:02:28,430 --> 00:02:32,030
from people who do I want people

00:02:29,900 --> 00:02:34,400
to have things to use and I you know I

00:02:32,030 --> 00:02:37,099
think that that feedback process and

00:02:34,400 --> 00:02:39,590
even you know experimentation outside of

00:02:37,099 --> 00:02:42,769
my work is absolutely necessary for us

00:02:39,590 --> 00:02:46,340
as a community to do this thing which

00:02:42,769 --> 00:02:47,780
kind of brings us to this thing I want

00:02:46,340 --> 00:02:49,640
to write apps and rust as I mentioned I

00:02:47,780 --> 00:02:51,140
want to give back technology that I

00:02:49,640 --> 00:02:52,730
build doing that to this community

00:02:51,140 --> 00:02:54,980
that's been you know real support for me

00:02:52,730 --> 00:02:56,689
and I have some specific technical

00:02:54,980 --> 00:02:58,220
desires of like how that should work

00:02:56,689 --> 00:03:00,079
those should be structured what should

00:02:58,220 --> 00:03:02,120
feel like the requisite levels of

00:03:00,079 --> 00:03:03,769
dopamine I think that dopamine is an

00:03:02,120 --> 00:03:07,480
element of application development that

00:03:03,769 --> 00:03:13,970
is is really important to optimize for

00:03:07,480 --> 00:03:17,659
and you know rust is not constrained to

00:03:13,970 --> 00:03:19,129
a single environment so if we are

00:03:17,659 --> 00:03:21,230
sitting here asking ourselves what do

00:03:19,129 --> 00:03:23,260
you want from us GUI I think almost

00:03:21,230 --> 00:03:25,700
every person I've spoken to has had

00:03:23,260 --> 00:03:27,079
implicitly in their mind it's gonna be

00:03:25,700 --> 00:03:28,670
awesome and it's gonna be cross-platform

00:03:27,079 --> 00:03:30,019
and I'm just gonna like I'm gonna go

00:03:28,670 --> 00:03:31,790
rust all day and then I'm gonna like

00:03:30,019 --> 00:03:35,150
click deploy on github and it's gonna be

00:03:31,790 --> 00:03:39,230
on like eight targets oh right I mean

00:03:35,150 --> 00:03:40,519
that's what I want right but I want to

00:03:39,230 --> 00:03:43,060
reuse my knowledge I want to reuse my

00:03:40,519 --> 00:03:47,209
tools when I'm in different environments

00:03:43,060 --> 00:03:49,430
this is a brief aside just I found that

00:03:47,209 --> 00:03:50,359
a o-l image this is like our world is

00:03:49,430 --> 00:03:51,980
beautiful isn't it

00:03:50,359 --> 00:03:54,079
let's just let this soak for a second

00:03:51,980 --> 00:03:56,180
this says discover ideas about

00:03:54,079 --> 00:03:57,799
blockchain technology email marketing

00:03:56,180 --> 00:03:59,690
today's email inbox looks significantly

00:03:57,799 --> 00:04:01,459
different from the AOL inbox of your

00:03:59,690 --> 00:04:03,470
make sure your email marketing has grown

00:04:01,459 --> 00:04:05,569
with the times tagged with blockchain

00:04:03,470 --> 00:04:11,959
technology business innovation and

00:04:05,569 --> 00:04:13,669
Thought Catalog so that's totally

00:04:11,959 --> 00:04:16,430
relevant my point about the

00:04:13,669 --> 00:04:18,470
cross-platform thing though is it's like

00:04:16,430 --> 00:04:19,909
these engineering efforts to build

00:04:18,470 --> 00:04:21,470
something that you can actually use to

00:04:19,909 --> 00:04:23,690
do that I click a button and I hit eight

00:04:21,470 --> 00:04:26,060
targets with my deploy they're massive

00:04:23,690 --> 00:04:28,130
engineering artifacts coordinated over

00:04:26,060 --> 00:04:30,440
huge groups of people like the program

00:04:28,130 --> 00:04:32,810
expertise experienced in this room if it

00:04:30,440 --> 00:04:34,010
was all UI developers I like we could

00:04:32,810 --> 00:04:35,930
spend a year or two it might crank since

00:04:34,010 --> 00:04:37,639
I'm really good at right like it you

00:04:35,930 --> 00:04:39,860
have on dolls law scaling with the

00:04:37,639 --> 00:04:41,140
organization like people are more effort

00:04:39,860 --> 00:04:42,250
to coordinate

00:04:41,140 --> 00:04:44,410
and there's just there's a lot of

00:04:42,250 --> 00:04:46,030
technology that you have to cover to

00:04:44,410 --> 00:04:47,860
talk about applications that are

00:04:46,030 --> 00:04:49,120
visually interactive right so this is an

00:04:47,860 --> 00:04:50,830
architecture diagram if I can't see any

00:04:49,120 --> 00:04:52,510
of the details that's fine this is Coco

00:04:50,830 --> 00:04:54,280
Mac OS is application framework

00:04:52,510 --> 00:04:56,590
they've got 2d animations in 3d

00:04:54,280 --> 00:04:58,480
transforms they've got opengl and their

00:04:56,590 --> 00:05:00,010
own windowing and drawing tools they've

00:04:58,480 --> 00:05:02,500
got data persistence they've got text

00:05:00,010 --> 00:05:04,360
layout rendering glyph transformations

00:05:02,500 --> 00:05:07,360
they've got image processing rendering

00:05:04,360 --> 00:05:10,000
etc got notifications you know network

00:05:07,360 --> 00:05:12,340
access via asynchronous i/o etc here's

00:05:10,000 --> 00:05:13,630
some bit from a newer Android jetpack

00:05:12,340 --> 00:05:15,250
framework listing

00:05:13,630 --> 00:05:17,110
they've got data binding lifecycle

00:05:15,250 --> 00:05:18,490
navigation pagination etc etc etc etc

00:05:17,110 --> 00:05:20,020
and a lot of these things actually

00:05:18,490 --> 00:05:22,300
nothing to do with what's on screen

00:05:20,020 --> 00:05:24,940
right there's another interesting

00:05:22,300 --> 00:05:26,680
example and obviously in this orbit so

00:05:24,940 --> 00:05:28,570
it's like it's on my mind but flutter is

00:05:26,680 --> 00:05:30,700
a really cool set of technologies built

00:05:28,570 --> 00:05:32,440
for you know basically the like I want

00:05:30,700 --> 00:05:37,090
to write a GUI that hits a targets at

00:05:32,440 --> 00:05:39,430
once kind of tasks and one of the ways

00:05:37,090 --> 00:05:41,260
they do that of course is by like hiding

00:05:39,430 --> 00:05:42,640
many details from the platform from you

00:05:41,260 --> 00:05:44,320
and I don't think that's very rustic but

00:05:42,640 --> 00:05:45,640
it's a really cool project and it's this

00:05:44,320 --> 00:05:47,290
is a good nice thing to look at to just

00:05:45,640 --> 00:05:49,120
say like ah yeah you really do need all

00:05:47,290 --> 00:05:51,640
of those things if you think about each

00:05:49,120 --> 00:05:55,540
of those lines that's like three crates

00:05:51,640 --> 00:05:57,910
per box at least so you know you might

00:05:55,540 --> 00:05:59,800
want to to temper expectations if you

00:05:57,910 --> 00:06:01,900
think that we're gonna have like these

00:05:59,800 --> 00:06:03,760
in rust covering everything ferment in

00:06:01,900 --> 00:06:05,410
the future there is one caveat to this

00:06:03,760 --> 00:06:07,870
of course which is like human

00:06:05,410 --> 00:06:10,360
civilization has this really big project

00:06:07,870 --> 00:06:12,460
for making UI and it has really cool

00:06:10,360 --> 00:06:13,690
properties like it exposes stable public

00:06:12,460 --> 00:06:15,340
API this lower level than most

00:06:13,690 --> 00:06:16,840
applications want to speak it's been a

00:06:15,340 --> 00:06:19,570
place for experimenting with you know

00:06:16,840 --> 00:06:23,740
different paradigms but it has you know

00:06:19,570 --> 00:06:28,780
limitations and I think those

00:06:23,740 --> 00:06:31,510
limitations are fine right it's the web

00:06:28,780 --> 00:06:34,060
is good but it's not going to provide

00:06:31,510 --> 00:06:36,760
like a rich you know local data oriented

00:06:34,060 --> 00:06:38,560
consumer thing for managing your life

00:06:36,760 --> 00:06:40,690
for someone on a future phone you know

00:06:38,560 --> 00:06:42,100
on a cheap device and the world is made

00:06:40,690 --> 00:06:44,380
up of a lot of these people in the web

00:06:42,100 --> 00:06:46,540
has a difficult time addressing their

00:06:44,380 --> 00:06:47,800
needs right now and I think the other

00:06:46,540 --> 00:06:49,300
unfortunate thing about that is because

00:06:47,800 --> 00:06:50,260
you can actually like really cool rust

00:06:49,300 --> 00:06:52,390
web stuff and I've been prototyping

00:06:50,260 --> 00:06:54,090
initially on the web is I'm actually I'm

00:06:52,390 --> 00:06:56,220
pretty sure that having our own

00:06:54,090 --> 00:06:57,270
equivalent is pretty far off to the

00:06:56,220 --> 00:07:01,139
point where I'm satisfied with the

00:06:57,270 --> 00:07:02,580
personality at least I think I should I

00:07:01,139 --> 00:07:03,600
should you know call out some really

00:07:02,580 --> 00:07:05,610
cool efforts that I've been happening I

00:07:03,600 --> 00:07:07,320
think druid and orb DK and Azul are

00:07:05,610 --> 00:07:08,610
really interesting exciting I was a

00:07:07,320 --> 00:07:10,710
little sad to see as well wasn't getting

00:07:08,610 --> 00:07:13,470
as much maintenance effort but I think

00:07:10,710 --> 00:07:17,250
these experiments and like efforts and

00:07:13,470 --> 00:07:18,600
projects have to continue but I like

00:07:17,250 --> 00:07:22,440
when I think what do I want to build

00:07:18,600 --> 00:07:25,530
tomorrow when can I start doing that you

00:07:22,440 --> 00:07:27,680
know they're they're pretty far off and

00:07:25,530 --> 00:07:30,840
I think that there's a different way but

00:07:27,680 --> 00:07:34,520
you know so this is like the hype tribe

00:07:30,840 --> 00:07:34,520
that we all gathered here for right

00:07:34,639 --> 00:07:39,450
it is aspirational right it's a long

00:07:37,590 --> 00:07:41,250
road but I don't think we need to have

00:07:39,450 --> 00:07:43,320
our own big projects necessarily I think

00:07:41,250 --> 00:07:45,539
we can eventually but I think that we

00:07:43,320 --> 00:07:48,810
can start by focusing on how do we make

00:07:45,539 --> 00:07:51,990
like a rust native UI but using someone

00:07:48,810 --> 00:07:53,699
else's tool kit right you know like can

00:07:51,990 --> 00:07:55,169
we make this feel idiomatic in the

00:07:53,699 --> 00:07:57,300
language can we make it so that we can

00:07:55,169 --> 00:08:00,720
collaborate on this together and I think

00:07:57,300 --> 00:08:04,470
that you know we have some ingredients

00:08:00,720 --> 00:08:06,450
for pursuing this direction that past

00:08:04,470 --> 00:08:10,200
communities or past technologies haven't

00:08:06,450 --> 00:08:12,150
had you know we have these things well

00:08:10,200 --> 00:08:15,419
we also have a really minimal runtime

00:08:12,150 --> 00:08:18,419
and incredibly cheap FFI so you know if

00:08:15,419 --> 00:08:20,400
you look at like the you know libraries

00:08:18,419 --> 00:08:21,690
not frameworks methodology I think many

00:08:20,400 --> 00:08:23,460
of the important ingredients for being

00:08:21,690 --> 00:08:25,849
able to pull that kind of trick off are

00:08:23,460 --> 00:08:30,300
here in Rus right now so my proposal is

00:08:25,849 --> 00:08:31,919
that you know starting well whenever you

00:08:30,300 --> 00:08:34,440
know yesterday or something that we

00:08:31,919 --> 00:08:38,969
tried to build an authentic you know

00:08:34,440 --> 00:08:42,270
actually rustic UI ecosystem and that we

00:08:38,969 --> 00:08:44,820
begin iterating on you know that that

00:08:42,270 --> 00:08:46,290
notion without having to build our own

00:08:44,820 --> 00:08:48,089
rendering stacks and input stack

00:08:46,290 --> 00:08:49,770
sentiment stacks and we also are in

00:08:48,089 --> 00:08:51,240
really cool position with futures and a

00:08:49,770 --> 00:08:53,310
bunch of other language features allow

00:08:51,240 --> 00:08:54,630
us to kind of natively Express UI

00:08:53,310 --> 00:08:56,160
concepts that other frameworks have to

00:08:54,630 --> 00:08:57,900
bring their own special implementation

00:08:56,160 --> 00:08:59,760
for right so I think there's there's a

00:08:57,900 --> 00:09:01,560
lot of a lot of room here I think if

00:08:59,760 --> 00:09:04,680
that's going to work if we can pull this

00:09:01,560 --> 00:09:05,970
off we have to have code reuse right

00:09:04,680 --> 00:09:07,770
like that's like the basic trick is

00:09:05,970 --> 00:09:09,240
crates that IO lets us reuse code

00:09:07,770 --> 00:09:11,220
we have nice API as we iterate on them

00:09:09,240 --> 00:09:13,470
separately and you know groups of people

00:09:11,220 --> 00:09:17,100
can build technology without like

00:09:13,470 --> 00:09:20,360
central coordination right UI is hard

00:09:17,100 --> 00:09:22,590
because you have so many domain-specific

00:09:20,360 --> 00:09:25,280
and when I see de Mannion really like

00:09:22,590 --> 00:09:27,780
platform specific paradigms to navigate

00:09:25,280 --> 00:09:29,280
and also just like historically we've

00:09:27,780 --> 00:09:31,650
not tried to do it this way we don't

00:09:29,280 --> 00:09:32,640
have like UI protocols as I mean there

00:09:31,650 --> 00:09:34,560
have been attempts but they tend to get

00:09:32,640 --> 00:09:35,700
hidden underneath frameworks anyways so

00:09:34,560 --> 00:09:39,090
the thing that I'm building

00:09:35,700 --> 00:09:41,880
it's called moxie and Moxie is at its

00:09:39,090 --> 00:09:44,610
core a platform agnostic lightweight

00:09:41,880 --> 00:09:52,380
declarative UI runtime in other words

00:09:44,610 --> 00:09:54,390
buzzwords soup so there's a lot of

00:09:52,380 --> 00:09:55,590
analogies I could draw like I think

00:09:54,390 --> 00:09:57,990
react is really interesting thing to

00:09:55,590 --> 00:10:00,210
think out in contrast to this both Swift

00:09:57,990 --> 00:10:03,180
UI and jetpack compose have really

00:10:00,210 --> 00:10:04,350
interesting kind of parallels and I'm

00:10:03,180 --> 00:10:06,900
friends with one of people working on

00:10:04,350 --> 00:10:10,140
compose I'm happy to say that you know

00:10:06,900 --> 00:10:11,400
we're not just copying impose but I was

00:10:10,140 --> 00:10:12,660
really surprised actually to find out

00:10:11,400 --> 00:10:14,520
after I've been working on this for

00:10:12,660 --> 00:10:15,870
months when I talked to him and I so you

00:10:14,520 --> 00:10:16,920
know once I joined to Google and I got

00:10:15,870 --> 00:10:19,860
to talk to him about it after they'd

00:10:16,920 --> 00:10:21,930
open source to etcetera I was really

00:10:19,860 --> 00:10:23,610
impressed to find out like oh actually

00:10:21,930 --> 00:10:26,310
if you want to describe UI in this

00:10:23,610 --> 00:10:28,920
declarative style there's you know

00:10:26,310 --> 00:10:32,210
there's a lot of commonality in the

00:10:28,920 --> 00:10:34,280
problem set for the language anyways

00:10:32,210 --> 00:10:37,350
that's all that's neither here nor there

00:10:34,280 --> 00:10:38,790
on top of Moxie I'm working on this

00:10:37,350 --> 00:10:40,790
library right now called Moxie Dom I

00:10:38,790 --> 00:10:43,230
have a couple of other like binding

00:10:40,790 --> 00:10:44,790
bindings in progress that I'm tinkering

00:10:43,230 --> 00:10:46,980
with but this is the most mature it's

00:10:44,790 --> 00:10:49,230
what I can demonstrate so let's look at

00:10:46,980 --> 00:10:52,830
an example of a counter implemented for

00:10:49,230 --> 00:10:56,550
the web in Moxie Dom right we have a

00:10:52,830 --> 00:10:59,010
struct structs fields are like their

00:10:56,550 --> 00:11:01,050
arguments right so the campus doesn't

00:10:59,010 --> 00:11:02,820
ache any arguments and we have some

00:11:01,050 --> 00:11:04,020
content so we're going to show and the

00:11:02,820 --> 00:11:05,940
first interesting thing here is that

00:11:04,020 --> 00:11:08,610
this is going to this describes our UI

00:11:05,940 --> 00:11:11,400
right now right the function needs to be

00:11:08,610 --> 00:11:14,370
able to run at anytime and fully fully

00:11:11,400 --> 00:11:16,560
explain to the underlying system what

00:11:14,370 --> 00:11:18,360
should be on the screen so first is we

00:11:16,560 --> 00:11:19,320
need some persistent state to stick

00:11:18,360 --> 00:11:21,930
around in between

00:11:19,320 --> 00:11:24,089
these iterations of our render loop

00:11:21,930 --> 00:11:25,709
right we're gonna initialize that with a

00:11:24,089 --> 00:11:27,300
default 0 and the type that's returned

00:11:25,709 --> 00:11:29,880
here is actually like a handle to that

00:11:27,300 --> 00:11:31,860
state variable and you can update it you

00:11:29,880 --> 00:11:33,209
can read from it the updates are

00:11:31,860 --> 00:11:34,170
mediated by the runtime though to make

00:11:33,209 --> 00:11:36,449
sure that we have the scheduling

00:11:34,170 --> 00:11:37,920
properties we need and then you know we

00:11:36,449 --> 00:11:40,079
have some child components that we show

00:11:37,920 --> 00:11:41,490
so first we create a text node with the

00:11:40,079 --> 00:11:43,319
counts of the current state variable and

00:11:41,490 --> 00:11:46,290
that state variable by the way you know

00:11:43,319 --> 00:11:49,050
in future iterations that have occupied

00:11:46,290 --> 00:11:53,160
that'll have the new value and and then

00:11:49,050 --> 00:11:54,720
we make a HTML element type this you

00:11:53,160 --> 00:11:56,759
know you if you had JSX this would be

00:11:54,720 --> 00:11:58,639
much nicer we don't have that yet and

00:11:56,759 --> 00:12:01,709
then we have an event handler right so

00:11:58,639 --> 00:12:03,870
when we take an event we call some

00:12:01,709 --> 00:12:06,360
closure and we call that closure passing

00:12:03,870 --> 00:12:09,449
in this handle to the state variable the

00:12:06,360 --> 00:12:11,610
key to the state variable and so that

00:12:09,449 --> 00:12:13,019
way we can kind of knit everything

00:12:11,610 --> 00:12:15,959
together and of course we put some text

00:12:13,019 --> 00:12:20,190
and then Google slides transitions make

00:12:15,959 --> 00:12:24,630
me skip ahead so that's like a little

00:12:20,190 --> 00:12:26,250
code example the first half of the

00:12:24,630 --> 00:12:28,470
buzzword soup is worth talking about

00:12:26,250 --> 00:12:31,050
right so like rust is platform agnostic

00:12:28,470 --> 00:12:34,230
we aren't adding platform into the core

00:12:31,050 --> 00:12:35,670
runtime take minimal dependencies and I

00:12:34,230 --> 00:12:38,699
think the focus on latency is the other

00:12:35,670 --> 00:12:42,029
thing here and because rust is you know

00:12:38,699 --> 00:12:44,519
like we're fast right but we can can in

00:12:42,029 --> 00:12:46,019
our software aggressively optimize for

00:12:44,519 --> 00:12:47,610
the user experience and have more

00:12:46,019 --> 00:12:49,829
empathy for people interacting with the

00:12:47,610 --> 00:12:51,360
software if we have a first-class notion

00:12:49,829 --> 00:12:52,260
of latency and the last thing is that I

00:12:51,360 --> 00:12:57,000
really want this to work

00:12:52,260 --> 00:12:58,380
understood and it almost does and then

00:12:57,000 --> 00:13:01,769
the second half of buzzword soup

00:12:58,380 --> 00:13:05,670
declarative UI runtime let's just talk

00:13:01,769 --> 00:13:07,740
about you at runtime right so a UI

00:13:05,670 --> 00:13:13,410
runtime does some you know basic stuff

00:13:07,740 --> 00:13:15,509
it presents a tree a visual items input

00:13:13,410 --> 00:13:18,750
is accepted from some actor user

00:13:15,509 --> 00:13:21,600
whatever the items are updated this is

00:13:18,750 --> 00:13:24,029
done frame by frame as like a unit of

00:13:21,600 --> 00:13:25,680
discrete scheduling and done in a loop

00:13:24,029 --> 00:13:28,589
so you've got kind of an implicit while

00:13:25,680 --> 00:13:29,850
true loop outside wrap right some some

00:13:28,589 --> 00:13:30,690
frameworks obviously make you write that

00:13:29,850 --> 00:13:32,459
yourself

00:13:30,690 --> 00:13:34,829
so if you have like a traditional UI

00:13:32,459 --> 00:13:37,949
system that has like Model View model

00:13:34,829 --> 00:13:40,079
new controller architecture you know you

00:13:37,949 --> 00:13:41,670
might find that you have this tree that

00:13:40,079 --> 00:13:44,129
you create and then you write some code

00:13:41,670 --> 00:13:49,680
so that when events occur you manually

00:13:44,129 --> 00:13:52,170
poke at that tree right and the the tree

00:13:49,680 --> 00:13:54,750
carries over of course you know this

00:13:52,170 --> 00:13:56,790
crowd I think is probably well versed in

00:13:54,750 --> 00:14:00,660
the evils of persistent shared mutable

00:13:56,790 --> 00:14:01,829
state this tends the mutability tends

00:14:00,660 --> 00:14:04,019
not to be too shared although you can

00:14:01,829 --> 00:14:05,579
have fun things when it is but still

00:14:04,019 --> 00:14:07,470
it's cumbersome and it doesn't let you

00:14:05,579 --> 00:14:10,199
do what we really want which is to

00:14:07,470 --> 00:14:12,779
describe UI right now this moment I'm

00:14:10,199 --> 00:14:14,160
what does user see and I think this is a

00:14:12,779 --> 00:14:16,500
really interesting framing because it's

00:14:14,160 --> 00:14:17,610
human focused as opposed technology

00:14:16,500 --> 00:14:19,769
focused right you actually have to do a

00:14:17,610 --> 00:14:22,470
very sophisticated dance to show the

00:14:19,769 --> 00:14:24,589
program like this but one of the nice

00:14:22,470 --> 00:14:27,480
things about it is that it you know each

00:14:24,589 --> 00:14:28,740
item on the screen corresponds to

00:14:27,480 --> 00:14:31,889
something that you're looking at in your

00:14:28,740 --> 00:14:33,930
code right so one of the first attempts

00:14:31,889 --> 00:14:36,389
to do the like describe UI right now in

00:14:33,930 --> 00:14:38,430
completion was the like the in GUI type

00:14:36,389 --> 00:14:40,230
of library right so these fully describe

00:14:38,430 --> 00:14:42,959
the scene on every frame they run 60

00:14:40,230 --> 00:14:44,310
times a second they take your input you

00:14:42,959 --> 00:14:45,509
know you write very nice concise code

00:14:44,310 --> 00:14:47,939
especially if you're coming from like

00:14:45,509 --> 00:14:51,360
C++ model-view-controller land render

00:14:47,939 --> 00:14:54,569
some stuff they can only work if you

00:14:51,360 --> 00:14:56,220
have a target that takes a GPU vertex

00:14:54,569 --> 00:14:58,709
buffer basically right like you have to

00:14:56,220 --> 00:15:00,720
actually draw every triangle yourself

00:14:58,709 --> 00:15:02,790
and so some really really smart people

00:15:00,720 --> 00:15:03,990
came along and we're like we want to do

00:15:02,790 --> 00:15:05,430
that I don't know if this is actually

00:15:03,990 --> 00:15:06,569
the history but like we're gonna pretend

00:15:05,430 --> 00:15:09,029
this is like I had like a galleon

00:15:06,569 --> 00:15:12,449
dialectic these these people came along

00:15:09,029 --> 00:15:15,750
and we're like oh I just I learn to

00:15:12,449 --> 00:15:18,540
write UI code this way but but it's the

00:15:15,750 --> 00:15:19,920
web and the web has the Dom and if I

00:15:18,540 --> 00:15:22,199
throw away the whole Dom tree every time

00:15:19,920 --> 00:15:23,819
I won't get any debugging and I'll have

00:15:22,199 --> 00:15:25,920
really jank user experiences if things

00:15:23,819 --> 00:15:28,740
you know miss the frames etc and so they

00:15:25,920 --> 00:15:31,740
said I want to describe this UI like

00:15:28,740 --> 00:15:33,839
this but backed by stateful elements

00:15:31,740 --> 00:15:37,170
right these persistent things and that's

00:15:33,839 --> 00:15:39,089
where react comes in so there's tilde

00:15:37,170 --> 00:15:40,920
here because react is actually very very

00:15:39,089 --> 00:15:43,069
interesting in many of its own ways and

00:15:40,920 --> 00:15:44,629
this is a horrible abusive

00:15:43,069 --> 00:15:46,910
like architecture and terminology but

00:15:44,629 --> 00:15:48,800
basically you have a state store you

00:15:46,910 --> 00:15:51,309
accept some event you get state prime

00:15:48,800 --> 00:15:54,319
because some event you know some

00:15:51,309 --> 00:15:56,420
transition is caused by that event that

00:15:54,319 --> 00:15:58,610
gets committed the renderer there the

00:15:56,420 --> 00:16:00,980
runtime schedules a new render call and

00:15:58,610 --> 00:16:02,540
that generates a tree of virtual Dom

00:16:00,980 --> 00:16:03,470
objects if you're familiar with this

00:16:02,540 --> 00:16:06,290
basically it's like lightweight

00:16:03,470 --> 00:16:08,449
descriptions it's it's a hash map of

00:16:06,290 --> 00:16:09,980
hash maps of hashmat hash maps of the

00:16:08,449 --> 00:16:11,989
strings to write to the Dom basically

00:16:09,980 --> 00:16:13,629
right that's all allocated by the way if

00:16:11,989 --> 00:16:16,639
you want to think about the the GC

00:16:13,629 --> 00:16:19,970
performance on that and and then what it

00:16:16,639 --> 00:16:21,949
does is extremely cleverly goes and

00:16:19,970 --> 00:16:24,170
figures out the difference between your

00:16:21,949 --> 00:16:25,579
your description and what's actually out

00:16:24,170 --> 00:16:26,869
there right this persistent state that

00:16:25,579 --> 00:16:29,449
it's storing for you and so it's kind of

00:16:26,869 --> 00:16:32,329
it owns the state it owns the backing

00:16:29,449 --> 00:16:34,459
dom tree and your kind of your code is

00:16:32,329 --> 00:16:36,230
running in between them and the runtime

00:16:34,459 --> 00:16:38,329
keeps them updated right so that's kind

00:16:36,230 --> 00:16:40,910
of like a declarative UI runtime is it's

00:16:38,329 --> 00:16:42,559
managing these updates it lets you do

00:16:40,910 --> 00:16:45,410
fun things like you can see here we have

00:16:42,559 --> 00:16:47,929
you know chrome dev tools like these are

00:16:45,410 --> 00:16:49,459
divs they're just they're from the

00:16:47,929 --> 00:16:50,839
browser's perspective they're like any

00:16:49,459 --> 00:16:52,970
other but you know you're writing codes

00:16:50,839 --> 00:16:54,470
it's like haha it's fake XML in

00:16:52,970 --> 00:16:58,459
JavaScript and I'm flying a million

00:16:54,470 --> 00:17:00,350
miles a minute and I mean if you haven't

00:16:58,459 --> 00:17:02,179
written JSX it actually is like it's

00:17:00,350 --> 00:17:06,289
surprisingly productive I was going

00:17:02,179 --> 00:17:09,079
outside and so if this is kind of the

00:17:06,289 --> 00:17:10,789
the status quo like this is the bleeding

00:17:09,079 --> 00:17:14,179
edge of here's how you program UI

00:17:10,789 --> 00:17:16,819
effectively we can we can identify our

00:17:14,179 --> 00:17:20,329
own goals on top of this right so rust

00:17:16,819 --> 00:17:22,819
is harder to write in JavaScript or C

00:17:20,329 --> 00:17:24,380
sharp or other languages right maybe not

00:17:22,819 --> 00:17:25,909
for me now with you know haven't been it

00:17:24,380 --> 00:17:29,059
for a while and I think like over time

00:17:25,909 --> 00:17:33,020
we will continue to iterate on this on

00:17:29,059 --> 00:17:34,820
the rust tax so to speak but right now

00:17:33,020 --> 00:17:36,649
we need to find ways to invest that

00:17:34,820 --> 00:17:38,600
right like if we want to write UI today

00:17:36,649 --> 00:17:41,230
we can't wait for next year's language

00:17:38,600 --> 00:17:44,149
changes and I think that we have a few

00:17:41,230 --> 00:17:45,950
areas of strength for rust and for that

00:17:44,149 --> 00:17:47,870
one were incredibly latency sensitive

00:17:45,950 --> 00:17:49,700
all of our resource allocation and

00:17:47,870 --> 00:17:51,679
destruction happens in bandwidth logic

00:17:49,700 --> 00:17:54,320
it executes unless we explicitly shove

00:17:51,679 --> 00:17:56,420
it out of band we

00:17:54,320 --> 00:17:59,540
you know have extreme control over the

00:17:56,420 --> 00:18:03,410
amount of interaction we we implant and

00:17:59,540 --> 00:18:06,140
you know we're pretty portable so this

00:18:03,410 --> 00:18:08,600
is where kind of this the direction

00:18:06,140 --> 00:18:11,030
takes us right we want to work directly

00:18:08,600 --> 00:18:13,550
with these dom nodes right we can have

00:18:11,030 --> 00:18:17,150
we can roll broad pointers were rust and

00:18:13,550 --> 00:18:19,250
we want to you know allocate only the

00:18:17,150 --> 00:18:22,250
data that needs to be you know inserted

00:18:19,250 --> 00:18:24,200
into them and we want to do this using

00:18:22,250 --> 00:18:29,000
some kind of uniform storage so there's

00:18:24,200 --> 00:18:31,910
not like a you know a uncanny valley or

00:18:29,000 --> 00:18:33,380
no cognitive cliff between you know user

00:18:31,910 --> 00:18:36,470
controlled state and then the runtime

00:18:33,380 --> 00:18:38,600
controlled state of the host tree and so

00:18:36,470 --> 00:18:40,790
ideally you know we can just have this

00:18:38,600 --> 00:18:43,429
happen in a loop right and these

00:18:40,790 --> 00:18:46,880
memorized updates are minimal and

00:18:43,429 --> 00:18:55,660
perfect etc how do we do that

00:18:46,880 --> 00:18:59,510
well we need to describe trees functions

00:18:55,660 --> 00:19:03,230
if you squint execute over time as a

00:18:59,510 --> 00:19:04,760
tree maybe maybe I mean you know you

00:19:03,230 --> 00:19:06,830
know where I'm going so we're gonna I'll

00:19:04,760 --> 00:19:09,050
show you what we do we have these

00:19:06,830 --> 00:19:11,480
functions and we're gonna pretend that

00:19:09,050 --> 00:19:14,059
when you push the stack frame for that

00:19:11,480 --> 00:19:18,770
function onto the stack that allocates a

00:19:14,059 --> 00:19:19,940
node in the tree weird I know and then

00:19:18,770 --> 00:19:23,150
the other thing we're going to pretend

00:19:19,940 --> 00:19:25,130
is that indent finds our depth in this

00:19:23,150 --> 00:19:25,880
tree and indents the print line

00:19:25,130 --> 00:19:28,460
accordingly

00:19:25,880 --> 00:19:31,820
pretty simple assumptions I think anyone

00:19:28,460 --> 00:19:33,920
confused awesome and here we go so we

00:19:31,820 --> 00:19:35,390
enter route we created a root node stack

00:19:33,920 --> 00:19:38,240
frame where we create a node for the

00:19:35,390 --> 00:19:39,559
root stack frame and then we go to the

00:19:38,240 --> 00:19:40,880
first line and we have a side-effect

00:19:39,559 --> 00:19:43,309
function this all looks like normal

00:19:40,880 --> 00:19:44,630
programming right and then a you know

00:19:43,309 --> 00:19:48,740
it's called by root so it becomes a

00:19:44,630 --> 00:19:52,340
child root and we enter its stack frame

00:19:48,740 --> 00:19:53,630
and then we call side-effect because

00:19:52,340 --> 00:19:55,340
this is now a child of root it has a

00:19:53,630 --> 00:19:57,710
depth of one in the tree so it's been

00:19:55,340 --> 00:19:59,780
invented by a couple of spaces and we

00:19:57,710 --> 00:20:02,370
pop back out to root right this is this

00:19:59,780 --> 00:20:05,850
is this is control flow 101

00:20:02,370 --> 00:20:07,980
do the same for be great stack frame has

00:20:05,850 --> 00:20:09,779
a node of corresponding has a side

00:20:07,980 --> 00:20:13,520
effect to a function inside and then we

00:20:09,779 --> 00:20:15,110
enter loop the first one is a child here

00:20:13,520 --> 00:20:17,279
same thing

00:20:15,110 --> 00:20:18,809
second call becomes a child of the same

00:20:17,279 --> 00:20:23,370
type but you know specialized for that

00:20:18,809 --> 00:20:24,929
that index in that loop and you know

00:20:23,370 --> 00:20:27,630
then the same thing right so what we end

00:20:24,929 --> 00:20:31,230
up with is you know we call a few

00:20:27,630 --> 00:20:33,659
functions and if we had some magical

00:20:31,230 --> 00:20:35,340
system for observing the creation of the

00:20:33,659 --> 00:20:35,970
stack frames and recording that data at

00:20:35,340 --> 00:20:37,740
runtime

00:20:35,970 --> 00:20:39,000
we correlate them together to actually

00:20:37,740 --> 00:20:40,799
construct this tree and that's what the

00:20:39,000 --> 00:20:43,529
topo crate does so the toe pose like the

00:20:40,799 --> 00:20:46,350
you know scary low-level dependency for

00:20:43,529 --> 00:20:49,049
moxie it assigns you know runtime

00:20:46,350 --> 00:20:51,390
identifiers to kind of logical scopes or

00:20:49,049 --> 00:20:54,149
stack frames of topologically bound

00:20:51,390 --> 00:20:57,990
functions that's it let's you do what I

00:20:54,149 --> 00:20:59,669
just showed you and these IDs are unique

00:20:57,990 --> 00:21:01,200
so if you're like in a conditional or

00:20:59,669 --> 00:21:03,029
you're in a for loop you know we're

00:21:01,200 --> 00:21:04,710
tracking the runtime state so you can

00:21:03,029 --> 00:21:08,190
kind of just put the calls to these

00:21:04,710 --> 00:21:09,090
functions wherever and you know the if

00:21:08,190 --> 00:21:11,580
you want to get a little more technical

00:21:09,090 --> 00:21:14,399
you know we trace the path through the

00:21:11,580 --> 00:21:16,350
the the function topology to the current

00:21:14,399 --> 00:21:17,700
point and do some hashing along the way

00:21:16,350 --> 00:21:19,289
and that gives us this unique ID and

00:21:17,700 --> 00:21:21,929
because it's derived from this

00:21:19,289 --> 00:21:25,830
structural path right on each iteration

00:21:21,929 --> 00:21:28,950
of this loop that idea is stable right

00:21:25,830 --> 00:21:32,520
so if I were to query the ID for C sub

00:21:28,950 --> 00:21:35,640
one on revision 0 it would be the same

00:21:32,520 --> 00:21:38,159
as revision 1 etc etc etc because C sub

00:21:35,640 --> 00:21:39,779
1 only like I can only talk about it

00:21:38,159 --> 00:21:41,520
from within that function while it's

00:21:39,779 --> 00:21:43,080
executing and it has this stable

00:21:41,520 --> 00:21:45,630
identifier right so you can do fun

00:21:43,080 --> 00:21:47,610
things like have a hash map of toko ID

00:21:45,630 --> 00:21:53,039
to blah and then that's call site

00:21:47,610 --> 00:21:56,520
specific storage right and then this

00:21:53,039 --> 00:22:00,090
tree has to get managed right like we

00:21:56,520 --> 00:22:02,640
have to do this in a loop repeatedly so

00:22:00,090 --> 00:22:04,320
there's this moxy runtime struct it

00:22:02,640 --> 00:22:06,419
takes a root function that it calls on

00:22:04,320 --> 00:22:09,200
each iteration and it can be woken up by

00:22:06,419 --> 00:22:11,480
state changes that's basically it

00:22:09,200 --> 00:22:13,669
it provides a memoization store for the

00:22:11,480 --> 00:22:17,120
for this like you know incremental

00:22:13,669 --> 00:22:19,159
updates of the Dom stuff and you know

00:22:17,120 --> 00:22:21,200
really what happens is everything is in

00:22:19,159 --> 00:22:23,960
there all the stuff you care about and

00:22:21,200 --> 00:22:25,850
frankly you in this context is not like

00:22:23,960 --> 00:22:27,770
an end user the runtime shouldn't really

00:22:25,850 --> 00:22:29,409
be exposed by bindings like moxie Dom

00:22:27,770 --> 00:22:31,730
has a mount call that's totally separate

00:22:29,409 --> 00:22:33,350
but this is necessary for being able to

00:22:31,730 --> 00:22:35,480
speak in terms of someone else's event

00:22:33,350 --> 00:22:38,419
loop right so we can you know like I

00:22:35,480 --> 00:22:39,950
have a very very hacky initial attempts

00:22:38,419 --> 00:22:42,590
at like running this in bandwidth

00:22:39,950 --> 00:22:46,220
windows event so you can have like react

00:22:42,590 --> 00:22:48,890
but not on a simple thread I mean not

00:22:46,220 --> 00:22:50,419
literally react so anyways we we create

00:22:48,890 --> 00:22:54,590
this environment that's scoped to this

00:22:50,419 --> 00:22:56,299
this topology we run functions within it

00:22:54,590 --> 00:22:57,500
that have side effects some of those

00:22:56,299 --> 00:22:58,909
side effects might register event

00:22:57,500 --> 00:23:00,559
handlers that can update our state that

00:22:58,909 --> 00:23:07,549
will call when that's updated it will

00:23:00,559 --> 00:23:08,720
get scheduled again there's an analogy

00:23:07,549 --> 00:23:11,000
here that's worth thinking about if

00:23:08,720 --> 00:23:13,309
you're familiar with react this is

00:23:11,000 --> 00:23:15,710
basically like what if you made react

00:23:13,309 --> 00:23:20,809
and rust but only use context and hooks

00:23:15,710 --> 00:23:23,419
as the primitives I think I it's fun I

00:23:20,809 --> 00:23:26,000
think but also this means that you know

00:23:23,419 --> 00:23:28,789
you can I haven't done this yet but you

00:23:26,000 --> 00:23:30,710
can like react hooks imagine an

00:23:28,789 --> 00:23:33,799
ecosystem of you know kind of drop-in

00:23:30,710 --> 00:23:35,120
functions that will navigate this state

00:23:33,799 --> 00:23:37,510
updating with your runtime for you

00:23:35,120 --> 00:23:41,330
without needing to explicitly past those

00:23:37,510 --> 00:23:44,179
now one trick here is as I've described

00:23:41,330 --> 00:23:47,029
it this happens on every frame fully

00:23:44,179 --> 00:23:51,710
allocates the Dom like in GUI so it's

00:23:47,029 --> 00:23:55,279
like reactive less efficient and we want

00:23:51,710 --> 00:23:59,090
to not do that right so we need some

00:23:55,279 --> 00:24:00,500
strategy for mammal ization we already

00:23:59,090 --> 00:24:03,049
have you know this like call site

00:24:00,500 --> 00:24:05,330
sensitive tracking of where and the

00:24:03,049 --> 00:24:08,179
component tree we are that gives us IDs

00:24:05,330 --> 00:24:09,500
we can have global scope storage that

00:24:08,179 --> 00:24:11,059
can be read from anywhere but where you

00:24:09,500 --> 00:24:13,520
can only look at things that are

00:24:11,059 --> 00:24:16,340
corresponding to our area so you can do

00:24:13,520 --> 00:24:18,440
things like run a function as long as

00:24:16,340 --> 00:24:19,970
the inputs haven't changed and that will

00:24:18,440 --> 00:24:21,260
be kept around for the next iteration of

00:24:19,970 --> 00:24:21,790
loop so you kind of rendezvous with

00:24:21,260 --> 00:24:24,550
yourself

00:24:21,790 --> 00:24:26,350
with your own code the next time and and

00:24:24,550 --> 00:24:28,920
you can combine these of course Rex it's

00:24:26,350 --> 00:24:31,540
just less code so you can have a memo

00:24:28,920 --> 00:24:33,220
call that captures some variable and

00:24:31,540 --> 00:24:35,320
will rerun the provided closure whenever

00:24:33,220 --> 00:24:37,180
that variable changes you can say as

00:24:35,320 --> 00:24:39,070
long as this component is mounted I want

00:24:37,180 --> 00:24:42,700
this content to be identical right like

00:24:39,070 --> 00:24:44,350
never rerun this and the fun corollary

00:24:42,700 --> 00:24:45,640
here is that if you implement drop on

00:24:44,350 --> 00:24:47,080
these types when there's no longer

00:24:45,640 --> 00:24:48,850
referenced we G see them from the

00:24:47,080 --> 00:24:52,030
memoization store so you have like a

00:24:48,850 --> 00:24:55,690
frame resource collection process that

00:24:52,030 --> 00:24:56,950
happens after each root and this means

00:24:55,690 --> 00:25:00,010
you can have essentially avoid like a

00:24:56,950 --> 00:25:01,900
whole class of I implement a custom will

00:25:00,010 --> 00:25:04,510
unmount method or did unmount or

00:25:01,900 --> 00:25:07,690
whatever right lots of lots of lifecycle

00:25:04,510 --> 00:25:08,950
methods on traits can just evaporate the

00:25:07,690 --> 00:25:11,710
state that I pointed out in that really

00:25:08,950 --> 00:25:14,160
counter example this is a ste cell that

00:25:11,710 --> 00:25:17,140
is initialized once at that call site

00:25:14,160 --> 00:25:19,120
and then it shows back up on subsequent

00:25:17,140 --> 00:25:21,070
calls so you can take the handle and

00:25:19,120 --> 00:25:23,530
send it off to you know an event

00:25:21,070 --> 00:25:24,010
callback and that's some kind of

00:25:23,530 --> 00:25:27,550
primitives

00:25:24,010 --> 00:25:29,800
let's pop out of the like brain dump and

00:25:27,550 --> 00:25:31,480
look at a little bit of code for

00:25:29,800 --> 00:25:35,800
something that actually might be

00:25:31,480 --> 00:25:40,120
familiar right Shrove hands who knows to

00:25:35,800 --> 00:25:44,620
do MVC okay that's herd immunity I'm

00:25:40,120 --> 00:25:45,730
going it's a clone it's a it's an app

00:25:44,620 --> 00:25:47,080
that's very very simple that people

00:25:45,730 --> 00:25:48,310
clone a lot in order to demonstrate

00:25:47,080 --> 00:25:51,220
their framework so of course if you're

00:25:48,310 --> 00:25:52,480
making a new weird UI runtime it would

00:25:51,220 --> 00:25:55,600
be a straightforward thing to copy and

00:25:52,480 --> 00:25:57,280
it has CSS available that's like one of

00:25:55,600 --> 00:25:58,630
the big things so here we have a

00:25:57,280 --> 00:26:02,260
top-level struct this is our root

00:25:58,630 --> 00:26:05,260
component that to-do app and like the

00:26:02,260 --> 00:26:07,390
few app has too many jobs right it has a

00:26:05,260 --> 00:26:10,930
list of to-do items and it has a filter

00:26:07,390 --> 00:26:14,590
that applies to those to render them so

00:26:10,930 --> 00:26:17,710
we allocate this at the top and then we

00:26:14,590 --> 00:26:20,050
enter a topological call you can have

00:26:17,710 --> 00:26:25,260
like this is like a topological closure

00:26:20,050 --> 00:26:29,350
maybe sort of we can show an element and

00:26:25,260 --> 00:26:31,000
CSS class and run child component that's

00:26:29,350 --> 00:26:32,410
a custom struct same with the main

00:26:31,000 --> 00:26:34,660
section this is code I copy

00:26:32,410 --> 00:26:36,430
from github and then we exit and

00:26:34,660 --> 00:26:38,830
crucially we pass to this topological

00:26:36,430 --> 00:26:40,270
closure a scoped environment so it can

00:26:38,830 --> 00:26:42,730
look up these types in its environment

00:26:40,270 --> 00:26:45,100
when it's called right and so we pass

00:26:42,730 --> 00:26:47,740
this key to the to do's like hey

00:26:45,100 --> 00:26:49,480
everybody in this subtree is going to

00:26:47,740 --> 00:26:51,490
care about the state of - dues in this

00:26:49,480 --> 00:26:53,740
application so now it's provided to all

00:26:51,490 --> 00:26:56,650
of them and the same with the visibility

00:26:53,740 --> 00:26:59,050
filter and Google slides gonna make me

00:26:56,650 --> 00:27:00,610
click like twelve more times but so this

00:26:59,050 --> 00:27:01,870
is basically this is the top-level entry

00:27:00,610 --> 00:27:03,310
point of the app it's like we assign we

00:27:01,870 --> 00:27:07,060
create some state and then we make it

00:27:03,310 --> 00:27:08,560
available to our code underneath next

00:27:07,060 --> 00:27:10,450
I'm not gonna go into like header or

00:27:08,560 --> 00:27:14,020
main section all of those that would be

00:27:10,450 --> 00:27:16,800
hilarious searched in smart at a time so

00:27:14,020 --> 00:27:19,570
let's look at it to do list example here

00:27:16,800 --> 00:27:24,370
we get our two dues get our visibility

00:27:19,570 --> 00:27:26,620
we create an unordered list we filter

00:27:24,370 --> 00:27:29,740
which to do is we want to show and we

00:27:26,620 --> 00:27:32,200
loop over them so if you've if you've

00:27:29,740 --> 00:27:35,170
written collections and other like

00:27:32,200 --> 00:27:39,540
declarative systems it can be quite

00:27:35,170 --> 00:27:42,370
baroque I think it's pretty cool also a

00:27:39,540 --> 00:27:46,720
filter list is usually something big to

00:27:42,370 --> 00:27:49,810
build in any in any system and we can do

00:27:46,720 --> 00:27:55,420
you know quick demo of how this works in

00:27:49,810 --> 00:27:56,650
this gonna play for us it will I was

00:27:55,420 --> 00:27:59,560
going I haven't lied to him up on a tab

00:27:56,650 --> 00:28:03,400
but he has lower risk so this is really

00:27:59,560 --> 00:28:10,240
boring an incredibly simple app it does

00:28:03,400 --> 00:28:11,860
effectively nothing I'm extremely

00:28:10,240 --> 00:28:13,000
overjoyed to have this be the result of

00:28:11,860 --> 00:28:16,460
last year of work

00:28:13,000 --> 00:28:16,460
[Laughter]

00:28:21,200 --> 00:28:29,610
thank you thank you that was gratifying

00:28:26,900 --> 00:28:31,980
so there's caveat which is I've been

00:28:29,610 --> 00:28:35,250
working on this a while but it's very

00:28:31,980 --> 00:28:39,000
very very very very very very very very

00:28:35,250 --> 00:28:40,440
very very very immature if you want to

00:28:39,000 --> 00:28:42,980
be a part of this and you want to use it

00:28:40,440 --> 00:28:46,260
then send PRS so like right now the

00:28:42,980 --> 00:28:48,540
domnode memoization is working progress

00:28:46,260 --> 00:28:50,070
it's like I can keep the whole tree

00:28:48,540 --> 00:28:51,960
static but I lose that one thing and I

00:28:50,070 --> 00:28:54,870
don't know why and so there's a little

00:28:51,960 --> 00:28:56,310
bit work there and once that's in place

00:28:54,870 --> 00:28:57,960
it'll be easier to extend that to other

00:28:56,310 --> 00:28:59,250
backing UI systems right cuz this

00:28:57,960 --> 00:29:01,080
minimization is very generic doesn't

00:28:59,250 --> 00:29:02,160
know anything but the phone I'm not

00:29:01,080 --> 00:29:04,980
measuring performance in any meaningful

00:29:02,160 --> 00:29:06,540
way I do know on my old system a

00:29:04,980 --> 00:29:07,830
topological function call like reading

00:29:06,540 --> 00:29:10,140
this ID the thing you're going to do

00:29:07,830 --> 00:29:11,790
thousands of times a frame it's like 150

00:29:10,140 --> 00:29:13,920
nanoseconds so it's like a Python

00:29:11,790 --> 00:29:15,410
function call it's not too bad with

00:29:13,920 --> 00:29:19,650
language support wink-wink nudge-nudge

00:29:15,410 --> 00:29:21,710
get really really fast dachshund testing

00:29:19,650 --> 00:29:26,220
very much working progress

00:29:21,710 --> 00:29:28,080
there's no JSX or equivalent if Bodil

00:29:26,220 --> 00:29:29,310
wants to make type HTML at this i'd be

00:29:28,080 --> 00:29:30,840
super happy

00:29:29,310 --> 00:29:31,680
there's no cross-platform elements and

00:29:30,840 --> 00:29:33,510
I'm not going to attempt them anytime

00:29:31,680 --> 00:29:35,520
soon because I think that if you have a

00:29:33,510 --> 00:29:37,620
rest system that can describe native UI

00:29:35,520 --> 00:29:40,710
components with the same runtime life

00:29:37,620 --> 00:29:42,750
cycle you can abstract over those to get

00:29:40,710 --> 00:29:44,520
cross-platform components as opposed to

00:29:42,750 --> 00:29:47,340
like existing cross-platform systems

00:29:44,520 --> 00:29:49,530
that tend to you know manage the things

00:29:47,340 --> 00:29:53,070
directly and of course there's nothing

00:29:49,530 --> 00:29:54,780
that's not shown in the talk so you know

00:29:53,070 --> 00:29:59,310
we've got some we've got some stuff to

00:29:54,780 --> 00:30:02,610
build what's next lots of stuff I'm

00:29:59,310 --> 00:30:05,280
gonna build if anything an incredibly

00:30:02,610 --> 00:30:06,150
infinitesimally of it which is where

00:30:05,280 --> 00:30:09,190
this comes in

00:30:06,150 --> 00:30:11,659
[Music]

00:30:09,190 --> 00:30:13,279
we need one of these to build your wine

00:30:11,659 --> 00:30:15,139
run like you want to build apps we want

00:30:13,279 --> 00:30:16,700
to do together and not be fragmented

00:30:15,139 --> 00:30:19,639
into a million different little projects

00:30:16,700 --> 00:30:21,499
this is what happens happen so the repo

00:30:19,639 --> 00:30:24,049
I have a website that I'm working on

00:30:21,499 --> 00:30:25,489
publishing will be up soon QR code takes

00:30:24,049 --> 00:30:26,149
you to the discord if you want to come

00:30:25,489 --> 00:30:28,599
chat with me

00:30:26,149 --> 00:30:35,960
I get pinged on every message right now

00:30:28,599 --> 00:30:39,169
yeah I I'd really love to get on them

00:30:35,960 --> 00:30:40,669
and also remember while you're watching

00:30:39,169 --> 00:30:42,799
these crab rave this is my

00:30:40,669 --> 00:30:46,399
representation of the unique historical

00:30:42,799 --> 00:30:48,710
point we occupy right this is this is us

00:30:46,399 --> 00:30:52,570
this can be us we have the types we have

00:30:48,710 --> 00:30:54,100
the crates we have cargo we have

00:30:52,570 --> 00:30:56,140
whatever this is

00:30:54,100 --> 00:30:58,300
[Music]

00:30:56,140 --> 00:31:03,840
let's do it thanks for coming

00:30:58,300 --> 00:31:17,140
[Applause]

00:31:03,840 --> 00:31:17,140

YouTube URL: https://www.youtube.com/watch?v=tmM756XZt20


