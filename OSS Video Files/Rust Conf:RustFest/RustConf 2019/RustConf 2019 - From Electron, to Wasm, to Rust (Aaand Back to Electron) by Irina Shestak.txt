Title: RustConf 2019 - From Electron, to Wasm, to Rust (Aaand Back to Electron) by Irina Shestak
Publication date: 2019-09-16
Playlist: RustConf 2019
Description: 
	RustConf 2019 - From Electron, to Wasm, to Rust (Aaand Back to Electron) by Irina Shestak

So you heard you can run WebAssembly in the browser, but what does this look like IRL? Seeking the much talked about performance benefits of running WASM in the browser, Compass (GUI for MongoDB) took the great leap forward and rewrote part of the application – a schema parser responsible for document analysis – in Rust. As it turns out, the rumours are true, I repeat the rumours are true: offloading parts of your application to Rust makes it fast, and in some of our cases, heaps fast.

In this talk I will cover converting a part of an codebase from JavaScript to Rust, bringing it to Electron, adding WASM to an existing React app, and deploying this whole lot to production. As Compass still talks to MongoDB via Node.js, I will also cover how we used Rust to improve performance without losing data integrity. This talk is about a success story, but also about a bunch of smol mishaps, fun woopses and lil' dead ends we encountered and how we managed to overcome along the way.
Captions: 
	00:00:08,770 --> 00:00:15,680
[Music]

00:00:16,870 --> 00:00:25,160
hello how's it going as seen by this

00:00:23,000 --> 00:00:27,050
title I'm gonna talk to you about a

00:00:25,160 --> 00:00:29,300
little bit of electron a little bit of

00:00:27,050 --> 00:00:33,710
rest and like a lot of highlighted

00:00:29,300 --> 00:00:35,870
awasum so I hope you were inferred

00:00:33,710 --> 00:00:39,530
this talk is about something I've built

00:00:35,870 --> 00:00:42,470
and I was able to put into an electron

00:00:39,530 --> 00:00:44,600
aka the browser application and I've

00:00:42,470 --> 00:00:46,760
been able to put it to production and

00:00:44,600 --> 00:00:48,470
the stories about how I did it and all

00:00:46,760 --> 00:00:51,110
the things that did not go so well and

00:00:48,470 --> 00:00:53,780
all the things that went really well and

00:00:51,110 --> 00:00:58,339
all the things in between so I hope

00:00:53,780 --> 00:01:00,260
you're gonna enjoy this little story all

00:00:58,339 --> 00:01:03,129
right so this is the application I work

00:01:00,260 --> 00:01:06,650
on it's called compass it's a GUI for

00:01:03,129 --> 00:01:08,690
MongoDB it lets you kind of look into

00:01:06,650 --> 00:01:11,270
your collections into your documents and

00:01:08,690 --> 00:01:12,740
aggregate a few things and do everything

00:01:11,270 --> 00:01:16,790
in between so you don't have to use the

00:01:12,740 --> 00:01:20,000
shell this particular tab is the tab

00:01:16,790 --> 00:01:22,850
that has a back-end that analyzes a

00:01:20,000 --> 00:01:26,800
schema and that's the tab that Ivy wrote

00:01:22,850 --> 00:01:29,180
in rest and compiled down to azimuth and

00:01:26,800 --> 00:01:30,680
the performance improvements that I got

00:01:29,180 --> 00:01:33,140
out of it were actually really really

00:01:30,680 --> 00:01:34,790
big which so I am giving this talk

00:01:33,140 --> 00:01:37,160
because I'm really proud of the work

00:01:34,790 --> 00:01:40,130
I've done and I didn't come very easy

00:01:37,160 --> 00:01:41,630
but it wasn't very hard and I wanted to

00:01:40,130 --> 00:01:43,730
maybe make it a little bit easier for

00:01:41,630 --> 00:01:47,510
everybody else

00:01:43,730 --> 00:01:50,690
hi I'm marina I write JavaScript and the

00:01:47,510 --> 00:01:53,440
rest I guess now at MongoDB I started

00:01:50,690 --> 00:01:56,620
writing rest about eight months ago and

00:01:53,440 --> 00:02:00,800
I've been writing JavaScript before then

00:01:56,620 --> 00:02:06,500
yeah so you might also know me from my

00:02:00,800 --> 00:02:08,840
jeans my works include my works include

00:02:06,500 --> 00:02:10,459
the the JavaScript event boobs scene

00:02:08,840 --> 00:02:14,030
that I've recently done for queer

00:02:10,459 --> 00:02:17,959
jeaious in Berlin I've also done a treat

00:02:14,030 --> 00:02:20,599
scene for Russ fest in Rome I've also

00:02:17,959 --> 00:02:23,120
made a rest acing zine for this

00:02:20,599 --> 00:02:26,560
conference if you got a chance to snatch

00:02:23,120 --> 00:02:29,390
one great if you didn't I think I'm out

00:02:26,560 --> 00:02:32,840
cool I'm

00:02:29,390 --> 00:02:35,000
I grew up in Vancouver in Canada not too

00:02:32,840 --> 00:02:40,910
far away from here and I write behavior

00:02:35,000 --> 00:02:43,430
with you sometimes I say eh I I don't do

00:02:40,910 --> 00:02:45,470
like the about that the east coast of

00:02:43,430 --> 00:02:52,190
Canada does but maybe sometimes and

00:02:45,470 --> 00:02:55,340
comes out sorry it didn't come out I

00:02:52,190 --> 00:02:57,860
currently live in Berlin though a little

00:02:55,340 --> 00:02:59,450
bit further away so I'm I've been here

00:02:57,860 --> 00:03:02,090
I've been in Portland for about six days

00:02:59,450 --> 00:03:05,180
and I'm still very jet-lagged but that's

00:03:02,090 --> 00:03:06,740
another story I also have two cats this

00:03:05,180 --> 00:03:09,290
one's - oh you might have seen her

00:03:06,740 --> 00:03:10,340
already she's very good she's a really

00:03:09,290 --> 00:03:12,410
good cat

00:03:10,340 --> 00:03:15,110
that's jeshu and the other cats naughty

00:03:12,410 --> 00:03:17,870
and she's also like a really good cat

00:03:15,110 --> 00:03:20,030
that goes for walks that's naughty the

00:03:17,870 --> 00:03:21,470
two of them together yeah so that was a

00:03:20,030 --> 00:03:25,130
brief interlude and now we're back to

00:03:21,470 --> 00:03:28,640
rest and awesome if that was a good

00:03:25,130 --> 00:03:30,770
interlude so it kind of like another

00:03:28,640 --> 00:03:32,930
brief thing before the stock this stuff

00:03:30,770 --> 00:03:35,540
comes from a point of view of a

00:03:32,930 --> 00:03:37,459
JavaScript developer writing rest I will

00:03:35,540 --> 00:03:40,370
focus mostly on wasum I'll do like a

00:03:37,459 --> 00:03:44,090
little bit of a rest thing but you're a

00:03:40,370 --> 00:03:47,420
bus developer so I I I'm not gonna like

00:03:44,090 --> 00:03:50,390
teach you but for us cuz I be talking

00:03:47,420 --> 00:03:52,820
down so yeah so this is kind of the

00:03:50,390 --> 00:03:56,540
thing of a taco we've got a bit of an

00:03:52,820 --> 00:03:58,549
agenda that we'll go through so this not

00:03:56,540 --> 00:03:59,959
a class but a little bit of a class so

00:03:58,549 --> 00:04:02,390
we'll talk a little bit about how scheme

00:03:59,959 --> 00:04:04,549
analysis happens and compass aka the

00:04:02,390 --> 00:04:05,570
application I work on I will go through

00:04:04,549 --> 00:04:07,160
a little bit of that and how that

00:04:05,570 --> 00:04:10,400
happens and kind of what are the

00:04:07,160 --> 00:04:12,739
requirements of how the rest portion of

00:04:10,400 --> 00:04:14,989
things will progress we'll talk about

00:04:12,739 --> 00:04:17,269
why we kind of went with the rest

00:04:14,989 --> 00:04:19,100
solution and awasum solution or the

00:04:17,269 --> 00:04:20,540
watham solution and then a rest solution

00:04:19,100 --> 00:04:24,380
depending on which way you're looking at

00:04:20,540 --> 00:04:26,180
it and then there's gonna be a story of

00:04:24,380 --> 00:04:28,370
the rust and the wazoo and the

00:04:26,180 --> 00:04:30,050
JavaScript which almost sounds like a

00:04:28,370 --> 00:04:31,460
little story that stars so the rest in

00:04:30,050 --> 00:04:33,470
there was and when the JavaScript went

00:04:31,460 --> 00:04:35,950
to a ramen shop and it got three bowls

00:04:33,470 --> 00:04:39,580
of Tim katsu

00:04:35,950 --> 00:04:42,880
but I don't know maybe they didn't maybe

00:04:39,580 --> 00:04:44,290
they did we'll talk about all the three

00:04:42,880 --> 00:04:46,690
whether or not they got the bull of

00:04:44,290 --> 00:04:50,620
tonkatsu or not so we'll start with this

00:04:46,690 --> 00:04:52,930
schema analysis in compass as I showed

00:04:50,620 --> 00:04:56,400
you the tap kind of looks like this and

00:04:52,930 --> 00:04:59,620
what it does is it helps us look into a

00:04:56,400 --> 00:05:01,420
collection it queries some documents

00:04:59,620 --> 00:05:03,060
from the collection it doesn't do the

00:05:01,420 --> 00:05:05,980
whole thing but it queries some of them

00:05:03,060 --> 00:05:08,320
and analyzes them to basically help

00:05:05,980 --> 00:05:11,410
users to detect outliers in their

00:05:08,320 --> 00:05:13,780
applications it doesn't do the whole

00:05:11,410 --> 00:05:16,720
thing but kind of just a brief overview

00:05:13,780 --> 00:05:18,700
of what happens but I think the best way

00:05:16,720 --> 00:05:21,640
to kind of see what it does is to

00:05:18,700 --> 00:05:26,170
actually go and look at it so we'll do

00:05:21,640 --> 00:05:34,900
that as a little brief demo it's kind of

00:05:26,170 --> 00:05:38,710
cool the log is ridiculous all right so

00:05:34,900 --> 00:05:41,050
I have a little collection of Berlin

00:05:38,710 --> 00:05:44,550
cocktail bars the stock also functions

00:05:41,050 --> 00:05:49,420
is like come to Berlin explore really

00:05:44,550 --> 00:05:51,340
weave weave the team and I have curated

00:05:49,420 --> 00:05:52,990
a list of like really good bars in

00:05:51,340 --> 00:06:00,400
Berlin there like hand-picked and have

00:05:52,990 --> 00:06:03,130
ingested there's a bunch of it's only

00:06:00,400 --> 00:06:07,570
about 21 of them so as you can tell from

00:06:03,130 --> 00:06:09,370
here so it's not too many so pretty

00:06:07,570 --> 00:06:11,740
small schema but what the schema tab

00:06:09,370 --> 00:06:15,370
does is it looks into it and then

00:06:11,740 --> 00:06:17,830
analyzes it there's a bunch of different

00:06:15,370 --> 00:06:19,630
information that you can get because the

00:06:17,830 --> 00:06:20,890
sample is so small we don't we don't we

00:06:19,630 --> 00:06:22,540
just go through the entire collection

00:06:20,890 --> 00:06:26,350
that's under a thousand documents and

00:06:22,540 --> 00:06:31,480
then we can tell what the data kind of

00:06:26,350 --> 00:06:34,570
looks like so in this particular field

00:06:31,480 --> 00:06:37,900
house No Mas so the house number it

00:06:34,570 --> 00:06:40,030
comes in two different kind of types so

00:06:37,900 --> 00:06:42,610
there is an integer 32 type and a double

00:06:40,030 --> 00:06:44,560
type which probably shouldn't be there

00:06:42,610 --> 00:06:47,920
but I don't know who inserted it for the

00:06:44,560 --> 00:06:49,060
purpose of a demo but they did you can

00:06:47,920 --> 00:06:51,010
kind of look into

00:06:49,060 --> 00:06:53,500
and see what the data looks like there's

00:06:51,010 --> 00:06:55,600
also map you can work with but again

00:06:53,500 --> 00:06:57,730
kind of gives you an overview of what

00:06:55,600 --> 00:06:59,920
your data is like and then you can work

00:06:57,730 --> 00:07:01,600
with it pretty well and kind of give you

00:06:59,920 --> 00:07:05,820
some insights as to what to do with it

00:07:01,600 --> 00:07:09,670
later you can also analyze based on

00:07:05,820 --> 00:07:15,400
particular aspects of that so we kind of

00:07:09,670 --> 00:07:19,000
just selected a document that's in this

00:07:15,400 --> 00:07:21,130
postal code range code size postal code

00:07:19,000 --> 00:07:23,650
there's only one and it's mr. Susan

00:07:21,130 --> 00:07:27,000
that's a good one actually that's a good

00:07:23,650 --> 00:07:27,000
that was not intentional

00:07:27,270 --> 00:07:38,320
yeah so that's what the tab does and

00:07:32,620 --> 00:07:40,240
I'll go back to the slides and so the

00:07:38,320 --> 00:07:41,980
whole applications built it's a

00:07:40,240 --> 00:07:44,200
JavaScript application it's run an

00:07:41,980 --> 00:07:46,960
electron which is basically a

00:07:44,200 --> 00:07:49,000
cross-platform browser you can install

00:07:46,960 --> 00:07:52,350
them like like good bilam application

00:07:49,000 --> 00:07:57,580
and install it on Windows or Linux or

00:07:52,350 --> 00:08:00,010
what's this computer OSX and and work on

00:07:57,580 --> 00:08:01,390
a bunch of different cross platforms but

00:08:00,010 --> 00:08:04,270
you write it in JavaScript which is

00:08:01,390 --> 00:08:06,130
really nice and we compile the downloads

00:08:04,270 --> 00:08:08,260
web pack and we usually write three-act

00:08:06,130 --> 00:08:10,720
so basically like what everybody does we

00:08:08,260 --> 00:08:14,410
also do and for some of the village

00:08:10,720 --> 00:08:17,740
visualizations we write D 3 so all of

00:08:14,410 --> 00:08:22,690
its like JavaScript stack it's built on

00:08:17,740 --> 00:08:25,480
MongoDB because it's a MongoDB GUI so it

00:08:22,690 --> 00:08:28,330
kind of works like that but the portion

00:08:25,480 --> 00:08:28,990
that does the schema looks into two

00:08:28,330 --> 00:08:30,820
different things

00:08:28,990 --> 00:08:32,860
it works with a collection sample that

00:08:30,820 --> 00:08:35,800
samples the collection and looks for a

00:08:32,860 --> 00:08:37,780
bit thousand documents and then there is

00:08:35,800 --> 00:08:39,670
a schema parser and MongoDB schema is

00:08:37,780 --> 00:08:43,090
that parser and what it does is it

00:08:39,670 --> 00:08:45,190
analyzes the database kind of works like

00:08:43,090 --> 00:08:46,990
that so first you sample and then you

00:08:45,190 --> 00:08:51,040
pass it on to the parser and get all

00:08:46,990 --> 00:08:54,010
that accumulated data about the thing in

00:08:51,040 --> 00:08:58,510
JavaScript first we get a connect to the

00:08:54,010 --> 00:09:01,630
MongoDB client then we sample and then

00:08:58,510 --> 00:09:04,180
we pipe it's a stream in JavaScript and

00:09:01,630 --> 00:09:07,390
parse it and we get it a little bit of

00:09:04,180 --> 00:09:09,580
accumulated data back that we'll have to

00:09:07,390 --> 00:09:12,150
then replicate it in rust and what this

00:09:09,580 --> 00:09:14,440
data looks like is that it's a

00:09:12,150 --> 00:09:16,840
accumulation of all the fields and the

00:09:14,440 --> 00:09:19,390
information about them so for example we

00:09:16,840 --> 00:09:22,240
get like a little count saying how many

00:09:19,390 --> 00:09:24,880
fields we got in that particular field

00:09:22,240 --> 00:09:27,190
type which is website and then we can

00:09:24,880 --> 00:09:29,170
get like a total count so not all the

00:09:27,190 --> 00:09:31,060
documents have a website based on the

00:09:29,170 --> 00:09:34,120
fact that total count is 21 and the

00:09:31,060 --> 00:09:37,900
website field is 17 and that's kind of

00:09:34,120 --> 00:09:39,760
what we can infer afterwards and the

00:09:37,900 --> 00:09:42,090
visual aspect of it and then we get like

00:09:39,760 --> 00:09:44,170
field types so in this particular case

00:09:42,090 --> 00:09:46,600
we can see that some of them are

00:09:44,170 --> 00:09:50,740
undefined because three of them do not

00:09:46,600 --> 00:09:53,800
or four of them do not have a website at

00:09:50,740 --> 00:09:56,170
all and the rest of them do so kind of

00:09:53,800 --> 00:09:58,710
all that information works in JavaScript

00:09:56,170 --> 00:10:02,440
and then it'll have to be put back into

00:09:58,710 --> 00:10:03,610
wasum or arrests so and then kind of

00:10:02,440 --> 00:10:06,790
showed it to you and it works really

00:10:03,610 --> 00:10:08,980
well and I've gave you all the good

00:10:06,790 --> 00:10:13,030
stuff but so then why are we rewriting

00:10:08,980 --> 00:10:14,770
it and rust the thing the reason why

00:10:13,030 --> 00:10:16,390
we're writing it in rust is because we

00:10:14,770 --> 00:10:19,720
can only function with about a thousand

00:10:16,390 --> 00:10:21,610
documents at a time and as soon as we

00:10:19,720 --> 00:10:24,040
want to increase or we want to give a

00:10:21,610 --> 00:10:26,830
better view of the collections to people

00:10:24,040 --> 00:10:29,770
who use this thing it gets further slow

00:10:26,830 --> 00:10:31,390
so if we're looking for something a

00:10:29,770 --> 00:10:33,310
little bit more and we want to do like a

00:10:31,390 --> 00:10:34,960
progressive collection scan or we want

00:10:33,310 --> 00:10:36,940
to again just sample more than a

00:10:34,960 --> 00:10:39,970
thousand documents it gets really really

00:10:36,940 --> 00:10:43,690
slow so the example for this is if you

00:10:39,970 --> 00:10:45,270
want to parse a pretty nested set of

00:10:43,690 --> 00:10:47,560
documents a pretty nest collection

00:10:45,270 --> 00:10:51,160
10,000 documents takes a really long

00:10:47,560 --> 00:10:53,770
period of time and so we want to

00:10:51,160 --> 00:10:55,630
optimize somehow and we want to not like

00:10:53,770 --> 00:10:57,910
get a bunch of JIRA tickets saying the

00:10:55,630 --> 00:10:59,730
thing is slow so there's a bunch of

00:10:57,910 --> 00:11:03,730
different ways that like we can go about

00:10:59,730 --> 00:11:05,500
optimizing it one of them is you know

00:11:03,730 --> 00:11:08,590
putting this in a web worker and maybe

00:11:05,500 --> 00:11:10,570
offloading some of the computation okay

00:11:08,590 --> 00:11:12,100
maybe some of our types are not wrong

00:11:10,570 --> 00:11:14,300
and we can be a little bit better about

00:11:12,100 --> 00:11:17,410
the way we've actually written

00:11:14,300 --> 00:11:21,710
there's like something about typescript

00:11:17,410 --> 00:11:23,060
maybe that could do that for you but I

00:11:21,710 --> 00:11:26,960
guess at that point would just rather be

00:11:23,060 --> 00:11:29,720
writing rust and I mean there's a bunch

00:11:26,960 --> 00:11:32,960
of like Dark Arts with the v8 one can

00:11:29,720 --> 00:11:37,580
perform and also get a bunch of speed up

00:11:32,960 --> 00:11:39,530
but again you don't particularly need to

00:11:37,580 --> 00:11:40,760
do the Dark Arts and a bunch of really

00:11:39,530 --> 00:11:42,650
smart people actually we're at this

00:11:40,760 --> 00:11:47,720
parser and it's already very well

00:11:42,650 --> 00:11:50,690
written so what else can we do and you

00:11:47,720 --> 00:11:53,050
know a good mother there's a metal more

00:11:50,690 --> 00:11:55,640
attractive the webassembly

00:11:53,050 --> 00:11:57,560
and so we kind of thought about this and

00:11:55,640 --> 00:12:00,680
a lot of different you know there's

00:11:57,560 --> 00:12:03,350
blogs about how good it is and what

00:12:00,680 --> 00:12:04,820
there's blogs about how fast it is and

00:12:03,350 --> 00:12:06,980
all these things that are kind of

00:12:04,820 --> 00:12:11,960
interesting about it so we thought that

00:12:06,980 --> 00:12:14,060
maybe we can also do the wazoo and write

00:12:11,960 --> 00:12:17,030
the parser in wasum and actually speed

00:12:14,060 --> 00:12:20,890
it up that way it gets us an opportunity

00:12:17,030 --> 00:12:23,270
to be able to kind of explore a new

00:12:20,890 --> 00:12:25,310
domain it gets as an opportunity to

00:12:23,270 --> 00:12:28,850
speed something up that without does

00:12:25,310 --> 00:12:32,480
about performing the dark arts and just

00:12:28,850 --> 00:12:35,510
trying something else out so what's

00:12:32,480 --> 00:12:37,250
wazza-wazoo is a low-level assembly

00:12:35,510 --> 00:12:39,380
language that compiles down to something

00:12:37,250 --> 00:12:42,710
else it compiles down from something

00:12:39,380 --> 00:12:47,930
else in the case that we've chosen

00:12:42,710 --> 00:12:51,400
it's rest it looks if you look into the

00:12:47,930 --> 00:12:56,780
network tab it looks like this

00:12:51,400 --> 00:12:58,910
rather actually pretty good art so again

00:12:56,780 --> 00:13:00,830
compiles down from something else and it

00:12:58,910 --> 00:13:03,140
says the performance boost that we kind

00:13:00,830 --> 00:13:06,020
of liked so this these are the numbers

00:13:03,140 --> 00:13:08,360
were pretty nested set of documents and

00:13:06,020 --> 00:13:12,080
there's about a thousand of them but if

00:13:08,360 --> 00:13:15,380
we look down into like even a larger

00:13:12,080 --> 00:13:19,330
sample it speeds up even more which is

00:13:15,380 --> 00:13:22,790
pretty darn fast and so we like to delay

00:13:19,330 --> 00:13:24,620
and the essential thing that it lets us

00:13:22,790 --> 00:13:25,010
do is be able to have native code in the

00:13:24,620 --> 00:13:27,380
browser

00:13:25,010 --> 00:13:30,920
and obviously does the job that it's

00:13:27,380 --> 00:13:33,800
meant to do and we did not have to kind

00:13:30,920 --> 00:13:35,810
of go out of our way to make it fast it

00:13:33,800 --> 00:13:40,459
just kind of came with the rust thing

00:13:35,810 --> 00:13:42,589
which is cool right so the way it works

00:13:40,459 --> 00:13:44,209
is that we've got the rest and a compass

00:13:42,589 --> 00:13:46,519
which is our browser and it just

00:13:44,209 --> 00:13:50,510
communicates through the Waze inside of

00:13:46,519 --> 00:13:53,660
things and voila all right so now we're

00:13:50,510 --> 00:13:55,610
gonna talk a little bit about the rust

00:13:53,660 --> 00:14:04,190
I'm doing it again aren't I it's a bad

00:13:55,610 --> 00:14:06,500
thing now that I've mentioned it so I'm

00:14:04,190 --> 00:14:09,769
not gonna go too much into about the

00:14:06,500 --> 00:14:12,920
rest but we'll talk about a little bit

00:14:09,769 --> 00:14:14,060
how we made this application work so we

00:14:12,920 --> 00:14:16,250
started off with a compass and the

00:14:14,060 --> 00:14:19,970
compass will still do the whole talking

00:14:16,250 --> 00:14:21,709
and the collection sampling however many

00:14:19,970 --> 00:14:23,240
documents it needs it'll talk to the

00:14:21,709 --> 00:14:24,800
database the database will return a

00:14:23,240 --> 00:14:28,220
bunch of documents that we've sampled

00:14:24,800 --> 00:14:31,610
and then we'll want to talk to the rest

00:14:28,220 --> 00:14:33,470
and the rest will then compile them to

00:14:31,610 --> 00:14:35,899
the wisdom and the wisdom will then talk

00:14:33,470 --> 00:14:37,699
to compass and then compass will talk to

00:14:35,899 --> 00:14:39,410
the wasum and there was and will talk to

00:14:37,699 --> 00:14:41,589
us it's a lot of communication going on

00:14:39,410 --> 00:14:44,000
it's a very like very chemi

00:14:41,589 --> 00:14:47,440
communicative set of tools that we've

00:14:44,000 --> 00:14:50,980
ended up here and so the rest TL DR is

00:14:47,440 --> 00:14:54,709
actually just here as a little brief

00:14:50,980 --> 00:14:56,899
story of the number of things that did

00:14:54,709 --> 00:15:00,829
not work out as a person who's never

00:14:56,899 --> 00:15:02,810
written a rest like language it's a

00:15:00,829 --> 00:15:07,690
story of quite a few errors and there's

00:15:02,810 --> 00:15:10,190
like a lot of them like so many of them

00:15:07,690 --> 00:15:14,199
and there was a lot of existential

00:15:10,190 --> 00:15:14,199
googling along the way as well

00:15:19,740 --> 00:15:25,320
but it turned out well it's a happy

00:15:23,010 --> 00:15:27,900
story and I think one of the reasons why

00:15:25,320 --> 00:15:29,940
it's a happy story is because rust came

00:15:27,900 --> 00:15:33,170
with a bunch of help that you don't

00:15:29,940 --> 00:15:35,430
usually just come built-in in in

00:15:33,170 --> 00:15:37,140
JavaScript and there's quite a few

00:15:35,430 --> 00:15:40,220
characters that are just there and

00:15:37,140 --> 00:15:43,470
they're there and happy to help you

00:15:40,220 --> 00:15:46,680
alright so how this works we'll skip the

00:15:43,470 --> 00:15:48,210
bottom part for a moment combis wants to

00:15:46,680 --> 00:15:50,940
talk to rest Russ wants to talk to

00:15:48,210 --> 00:15:52,770
compass and all we wanted to do is Russ

00:15:50,940 --> 00:15:55,620
needs to accept a bunch of documents

00:15:52,770 --> 00:15:57,870
that come through needs to parse the

00:15:55,620 --> 00:16:02,700
documents accumulate the information and

00:15:57,870 --> 00:16:04,770
send the camila cumulative info back and

00:16:02,700 --> 00:16:06,810
to kind of get this to work the first

00:16:04,770 --> 00:16:08,940
thing that I thought I would do is just

00:16:06,810 --> 00:16:10,620
start with a string because string is

00:16:08,940 --> 00:16:13,890
the easiest thing to understand and

00:16:10,620 --> 00:16:17,700
that's the type that's so easy to work

00:16:13,890 --> 00:16:21,000
with so we started off with just writing

00:16:17,700 --> 00:16:22,260
a string and returning a string and I

00:16:21,000 --> 00:16:24,480
think that worked rather well the

00:16:22,260 --> 00:16:28,560
compiler was really happy I liked it a

00:16:24,480 --> 00:16:31,710
lot there is some art in between that I

00:16:28,560 --> 00:16:35,460
received BAM but overall good good good

00:16:31,710 --> 00:16:37,140
story so we were accepting a string but

00:16:35,460 --> 00:16:38,970
the one thing we then kind of thought of

00:16:37,140 --> 00:16:42,810
is that well we're working with a

00:16:38,970 --> 00:16:44,490
MongoDB set of documents which means we

00:16:42,810 --> 00:16:47,670
were working was something called beefs

00:16:44,490 --> 00:16:50,910
on my name you know beasts on oh good

00:16:47,670 --> 00:16:53,490
okay I wasn't sure I just in case but if

00:16:50,910 --> 00:16:54,930
in case you don't know we want to do the

00:16:53,490 --> 00:16:58,470
same thing it just has to be in beasts

00:16:54,930 --> 00:17:01,800
on and I like this definition in case

00:16:58,470 --> 00:17:04,950
you've lots of you know basically same

00:17:01,800 --> 00:17:07,650
thing as JSON comes with the way to

00:17:04,950 --> 00:17:09,839
pronounce it this definition but it

00:17:07,650 --> 00:17:11,640
comes with same as JSON just has a few

00:17:09,839 --> 00:17:14,520
different types that would have to

00:17:11,640 --> 00:17:17,370
handle differently like decimal 128 or

00:17:14,520 --> 00:17:19,680
minimax keys or bin data and things like

00:17:17,370 --> 00:17:23,930
that so just have to work with that but

00:17:19,680 --> 00:17:28,500
fortunately there's already a crate that

00:17:23,930 --> 00:17:30,929
Zoey II to have written

00:17:28,500 --> 00:17:33,090
for us that we just used and it worked

00:17:30,929 --> 00:17:37,010
really nicely the only thing you have to

00:17:33,090 --> 00:17:39,240
do is we still accept a string for now

00:17:37,010 --> 00:17:40,919
but just convert it into a piece on

00:17:39,240 --> 00:17:42,870
document and then able to extract all

00:17:40,919 --> 00:17:45,270
the appropriate information that's not

00:17:42,870 --> 00:17:48,299
just a string out of that and then work

00:17:45,270 --> 00:17:49,980
with it which is really cool so then

00:17:48,299 --> 00:17:53,039
that gets us to like the number

00:17:49,980 --> 00:17:55,980
situation is like another struggle of a

00:17:53,039 --> 00:17:58,110
JavaScript developer in rust this is the

00:17:55,980 --> 00:18:01,380
only number type available in JavaScript

00:17:58,110 --> 00:18:04,740
it's very good this is the number types

00:18:01,380 --> 00:18:06,510
available in rustic so as a JavaScript

00:18:04,740 --> 00:18:09,179
developer when you get into this it's

00:18:06,510 --> 00:18:10,919
influenced a bit confusing so picking a

00:18:09,179 --> 00:18:13,830
number type was a bit of a challenge for

00:18:10,919 --> 00:18:15,419
a JavaScript developer invest I only

00:18:13,830 --> 00:18:17,370
have we needed like two fields but I

00:18:15,419 --> 00:18:19,650
spend like a lot of time debating on

00:18:17,370 --> 00:18:23,730
what numbers to choose and to the point

00:18:19,650 --> 00:18:25,799
where like I made a flow chart what

00:18:23,730 --> 00:18:28,110
number should I choose to be able to do

00:18:25,799 --> 00:18:30,330
this properly and so I have all these

00:18:28,110 --> 00:18:32,250
numbers that you know I had to choose

00:18:30,330 --> 00:18:38,909
from I actually just went with Hugh

00:18:32,250 --> 00:18:41,909
sighs cool and then the next set of

00:18:38,909 --> 00:18:44,250
things that was like errors how do you

00:18:41,909 --> 00:18:47,280
date errors can I just do a type errand

00:18:44,250 --> 00:18:50,070
and be okay with it and then I I was

00:18:47,280 --> 00:18:52,260
reading a bunch of stuff and everybody

00:18:50,070 --> 00:18:56,429
said you have to do this and it seems

00:18:52,260 --> 00:18:58,620
like a lot and so I was kind of thought

00:18:56,429 --> 00:19:00,210
about this and then I found a crate and

00:18:58,620 --> 00:19:01,770
the crate was really good so instead of

00:19:00,210 --> 00:19:04,650
having to write all of that I just did

00:19:01,770 --> 00:19:06,390
this and that was great

00:19:04,650 --> 00:19:08,690
I kind of liked this part of rest that

00:19:06,390 --> 00:19:08,690
was good

00:19:09,030 --> 00:19:13,320
so yeah it just converted everything

00:19:10,530 --> 00:19:15,419
from family error I could use the

00:19:13,320 --> 00:19:17,789
question mark operator and Rob has to be

00:19:15,419 --> 00:19:19,590
there I don't ask questions it's just in

00:19:17,789 --> 00:19:21,440
that particular way it has to be I don't

00:19:19,590 --> 00:19:24,360
know it just wouldn't compile otherwise

00:19:21,440 --> 00:19:27,110
and obviously like I don't have to tell

00:19:24,360 --> 00:19:29,970
you the data ownership and rust is is

00:19:27,110 --> 00:19:31,440
good and bad at the same time and

00:19:29,970 --> 00:19:35,940
sometimes you've got a fight with the

00:19:31,440 --> 00:19:38,159
Boro checker quite a bit like here or

00:19:35,940 --> 00:19:39,690
for some reason this is the only strange

00:19:38,159 --> 00:19:40,920
shot I had but I had so many problems

00:19:39,690 --> 00:19:42,990
with this

00:19:40,920 --> 00:19:45,390
and the one conclusion I kind of came up

00:19:42,990 --> 00:19:49,790
with at the end of this all is that it's

00:19:45,390 --> 00:19:49,790
just always right don't fight with it

00:19:50,210 --> 00:19:56,490
but the TL TL DR that I've kind of got

00:19:54,030 --> 00:19:59,280
to at this point and at the stage of

00:19:56,490 --> 00:20:01,110
kind of writing this code is that it

00:19:59,280 --> 00:20:03,180
helps rust helps you write performant

00:20:01,110 --> 00:20:05,130
code and you don't have to kind of do

00:20:03,180 --> 00:20:07,710
anything special you don't have to do

00:20:05,130 --> 00:20:09,420
anything out of the ordinary you don't

00:20:07,710 --> 00:20:12,450
have to do any magic and you kind of

00:20:09,420 --> 00:20:15,270
just end up with clean code right off

00:20:12,450 --> 00:20:18,960
the bat cool so this particular portion

00:20:15,270 --> 00:20:21,150
of my work is available at MongoDB rest

00:20:18,960 --> 00:20:23,000
among the DB schema parser and this is

00:20:21,150 --> 00:20:25,890
chemo for so that lets you do this stuff

00:20:23,000 --> 00:20:27,450
but that's the rest set of things let's

00:20:25,890 --> 00:20:35,550
talk about the allows them a little bit

00:20:27,450 --> 00:20:39,510
I can't either juicy part all right

00:20:35,550 --> 00:20:42,000
hello there is a bunch of different

00:20:39,510 --> 00:20:44,220
definitions for awesome that I got on

00:20:42,000 --> 00:20:46,290
the internet one of them is from me it's

00:20:44,220 --> 00:20:53,480
faster than JavaScript is the way I've

00:20:46,290 --> 00:20:56,580
defined it but to kind of like the nice

00:20:53,480 --> 00:20:59,130
conglomerated definition I liked is it's

00:20:56,580 --> 00:21:01,470
a low-level assembly like language with

00:20:59,130 --> 00:21:03,540
a compact binary format that provides

00:21:01,470 --> 00:21:05,190
languages with the compilation target so

00:21:03,540 --> 00:21:06,810
they can run on the web and kind of the

00:21:05,190 --> 00:21:11,730
main part of that is that it's a

00:21:06,810 --> 00:21:13,800
compilation target and that's the cool

00:21:11,730 --> 00:21:16,440
thing so you can kind of get waz them

00:21:13,800 --> 00:21:19,170
from other different languages you don't

00:21:16,440 --> 00:21:22,200
have to write the rest I just chose to

00:21:19,170 --> 00:21:23,640
write rust I know the go logo is no

00:21:22,200 --> 00:21:27,630
longer that I just really like the go

00:21:23,640 --> 00:21:30,000
first so I kept it go through right so

00:21:27,630 --> 00:21:33,480
we wrote rust can compile from it from

00:21:30,000 --> 00:21:37,080
anything else just compiled on tourism

00:21:33,480 --> 00:21:39,780
and wasum is what we talk to we don't

00:21:37,080 --> 00:21:41,970
talk to us directly right so a

00:21:39,780 --> 00:21:43,290
compilation targets so how do we get to

00:21:41,970 --> 00:21:45,660
the compilation target

00:21:43,290 --> 00:21:47,370
well there's luckily our really

00:21:45,660 --> 00:21:48,900
convenient tools it lets you do that

00:21:47,370 --> 00:21:50,970
it's called the Y's and bindin and

00:21:48,900 --> 00:21:52,170
that's what we did as well so I've

00:21:50,970 --> 00:21:54,240
written kind of like the rest

00:21:52,170 --> 00:21:55,800
and the rest code had the API and then

00:21:54,240 --> 00:21:59,820
we wanted to be able to use it in

00:21:55,800 --> 00:22:01,260
JavaScript so wasn't bind gen kind of

00:21:59,820 --> 00:22:02,700
generated the things that we could use

00:22:01,260 --> 00:22:04,590
in JavaScript and one of them is the

00:22:02,700 --> 00:22:06,930
wasone file which is you know the art

00:22:04,590 --> 00:22:08,520
that we saw previously and then the

00:22:06,930 --> 00:22:10,560
bindings a Jas file which is the

00:22:08,520 --> 00:22:12,660
JavaScript that we can use inside our

00:22:10,560 --> 00:22:14,970
code and to be able to kind of get all

00:22:12,660 --> 00:22:19,290
of this all we have to do is just unate

00:22:14,970 --> 00:22:21,690
ate with wasn't binding and because we

00:22:19,290 --> 00:22:24,660
want you know the JavaScript co-workers

00:22:21,690 --> 00:22:27,360
to be happy we just kind of use the GS a

00:22:24,660 --> 00:22:29,370
custom names so the new or the right

00:22:27,360 --> 00:22:31,160
JSON without the underscore because it's

00:22:29,370 --> 00:22:34,620
confusing when you're in JavaScript land

00:22:31,160 --> 00:22:37,140
so it's good when you start off writing

00:22:34,620 --> 00:22:38,250
wasum you kind of just end up with three

00:22:37,140 --> 00:22:40,380
different things you can use you can use

00:22:38,250 --> 00:22:44,850
the error you can use the value and you

00:22:40,380 --> 00:22:46,860
can use like a borrowed string so that

00:22:44,850 --> 00:22:48,570
those are the kind of things that ended

00:22:46,860 --> 00:22:49,830
up in the beginning and it's really good

00:22:48,570 --> 00:22:52,800
thing because i started off with a

00:22:49,830 --> 00:22:54,630
string to make the compiler happy which

00:22:52,800 --> 00:22:58,470
is really good so although i had to do

00:22:54,630 --> 00:23:00,750
is just keep what I had and return a.j s

00:22:58,470 --> 00:23:03,870
value or return a string and that worked

00:23:00,750 --> 00:23:05,420
sort of let's compile and see what

00:23:03,870 --> 00:23:10,050
happens

00:23:05,420 --> 00:23:12,720
spoiler alert I guess a little bit um it

00:23:10,050 --> 00:23:14,430
didn't compile right away and is kind of

00:23:12,720 --> 00:23:18,150
interesting this error that came through

00:23:14,430 --> 00:23:21,630
and what it was telling me is the error

00:23:18,150 --> 00:23:24,090
that I was using was not working which

00:23:21,630 --> 00:23:26,760
means the faily error solution I have

00:23:24,090 --> 00:23:29,010
tried to use because I thought I was

00:23:26,760 --> 00:23:30,600
being really clever did not actually

00:23:29,010 --> 00:23:33,990
work and before you tell me you should

00:23:30,600 --> 00:23:39,300
have used the box the box also doesn't

00:23:33,990 --> 00:23:41,580
work so an interesting way of actually

00:23:39,300 --> 00:23:44,340
handling this is that I had a specific

00:23:41,580 --> 00:23:45,870
wrapper that worked in rust and a

00:23:44,340 --> 00:23:48,030
specific wrapper that worked in

00:23:45,870 --> 00:23:50,490
JavaScript so all I did was I rubbed my

00:23:48,030 --> 00:23:53,670
rust methods in Maya 'sm exported

00:23:50,490 --> 00:23:55,050
methods and matched on the result type

00:23:53,670 --> 00:23:57,630
and whenever I got an error

00:23:55,050 --> 00:24:00,830
I just stringify it into J's FAL you and

00:23:57,630 --> 00:24:04,140
that worked and that works really well

00:24:00,830 --> 00:24:04,990
can do the same here thankfully we're

00:24:04,140 --> 00:24:06,610
also not the only

00:24:04,990 --> 00:24:11,440
people who were struggling with this

00:24:06,610 --> 00:24:13,120
there's an open PR on this issue as well

00:24:11,440 --> 00:24:14,920
so you can check it out and follow it

00:24:13,120 --> 00:24:18,370
there as well

00:24:14,920 --> 00:24:23,370
cool so start off with a string kind of

00:24:18,370 --> 00:24:26,830
worked for us it's good we've got a

00:24:23,370 --> 00:24:29,110
compass talking to the database

00:24:26,830 --> 00:24:32,559
receiving documents talking to Oz and

00:24:29,110 --> 00:24:34,330
wasn't talking to rust but what we're

00:24:32,559 --> 00:24:36,250
kind of need to think about is the fact

00:24:34,330 --> 00:24:38,800
that we're getting beasts on documents

00:24:36,250 --> 00:24:40,870
coming through from the database we're

00:24:38,800 --> 00:24:42,580
strong of fiying them and then sending

00:24:40,870 --> 00:24:44,500
them to us um and then what happens when

00:24:42,580 --> 00:24:47,559
the new stringify is you actually lose a

00:24:44,500 --> 00:24:49,390
bunch of data integrity because what be

00:24:47,559 --> 00:24:51,640
son does is that specifies when

00:24:49,390 --> 00:24:53,740
something is decimal 128 it specifies

00:24:51,640 --> 00:24:55,630
when something is bin data so whenever

00:24:53,740 --> 00:24:58,720
you stringify all of that you actually

00:24:55,630 --> 00:25:03,120
lose it so something we had to think

00:24:58,720 --> 00:25:07,240
about is that how do we make this work

00:25:03,120 --> 00:25:08,950
otherwise so what the idea came is that

00:25:07,240 --> 00:25:12,640
okay so we have the node driver

00:25:08,950 --> 00:25:14,110
returning raw beasts on what if we just

00:25:12,640 --> 00:25:16,410
send that Rob instead of like

00:25:14,110 --> 00:25:18,700
serializing on JavaScript side of things

00:25:16,410 --> 00:25:20,530
deserializing on the rest set of things

00:25:18,700 --> 00:25:22,570
so we can skip all that serializing and

00:25:20,530 --> 00:25:26,380
deserializing steps and just pass around

00:25:22,570 --> 00:25:28,120
robbie so that was cool idea and but

00:25:26,380 --> 00:25:30,490
that requires us to send the Veck

00:25:28,120 --> 00:25:32,380
basically like you need a vac of sorts

00:25:30,490 --> 00:25:34,179
and how do you do that when I just told

00:25:32,380 --> 00:25:37,510
you that the only thing we can use is

00:25:34,179 --> 00:25:38,080
error value and string are we stuck

00:25:37,510 --> 00:25:41,260
again

00:25:38,080 --> 00:25:43,390
we're not and why we're not stuck is

00:25:41,260 --> 00:25:45,940
because there's a crate that's kind of

00:25:43,390 --> 00:25:49,090
attached to as App Engine called J Isis

00:25:45,940 --> 00:25:51,190
and what that does is it lets you have a

00:25:49,090 --> 00:25:53,800
bunch of ROM bindings to JavaScript API

00:25:51,190 --> 00:25:55,950
that you can use and rest and a bunch of

00:25:53,800 --> 00:25:59,200
them are there's like a very long list

00:25:55,950 --> 00:26:02,309
but some of them were include object and

00:25:59,200 --> 00:26:05,470
function and you and 8ra and date and

00:26:02,309 --> 00:26:06,730
iterators and things like that but what

00:26:05,470 --> 00:26:08,500
we're interested in because we're

00:26:06,730 --> 00:26:09,850
starting off with a raw buffer which is

00:26:08,500 --> 00:26:12,370
technically a vector which is

00:26:09,850 --> 00:26:15,880
technically a U and eight array what can

00:26:12,370 --> 00:26:17,040
you use a u nth iterate for that so what

00:26:15,880 --> 00:26:19,820
we do is

00:26:17,040 --> 00:26:22,620
we accepted you and eight array and then

00:26:19,820 --> 00:26:24,960
we do some magic in between and then we

00:26:22,620 --> 00:26:27,030
just basically decode Abbyson document

00:26:24,960 --> 00:26:30,150
that comes up with the correct type of

00:26:27,030 --> 00:26:33,990
data information a.k.a decimal 128 comes

00:26:30,150 --> 00:26:38,130
in as a decimal 128 in its proper glory

00:26:33,990 --> 00:26:41,940
of decimal 128 in precision and we don't

00:26:38,130 --> 00:26:51,380
lose any data and basically what it does

00:26:41,940 --> 00:26:51,380
is how much toilet humor

00:26:52,130 --> 00:26:57,600
basically what you're able to do is and

00:26:54,450 --> 00:26:59,820
you just take the data that comes in

00:26:57,600 --> 00:27:01,710
from JavaScript heap and then converted

00:26:59,820 --> 00:27:04,350
to the Oise ohm linear memory and then

00:27:01,710 --> 00:27:08,190
just use it as part of la's in linear

00:27:04,350 --> 00:27:09,419
memory inside your rest code and the man

00:27:08,190 --> 00:27:11,100
took it between is actually kind of

00:27:09,419 --> 00:27:14,160
interesting so i'm gonna go back to the

00:27:11,100 --> 00:27:15,600
magic in-between i i said before these

00:27:14,160 --> 00:27:17,010
are the things if you ever pass in

00:27:15,600 --> 00:27:18,419
anything it doesn't have to be just to

00:27:17,010 --> 00:27:20,820
you and eight array just like any kind

00:27:18,419 --> 00:27:22,830
of array buffer or anything that's in a

00:27:20,820 --> 00:27:27,299
vector in javascript and has to be like

00:27:22,830 --> 00:27:30,870
sort of a vector in rust you got to

00:27:27,299 --> 00:27:33,210
force it to be a mutable slice to be

00:27:30,870 --> 00:27:35,250
able to get it through to whatever code

00:27:33,210 --> 00:27:36,480
you're trying to do a little bit of

00:27:35,250 --> 00:27:40,500
magic cool

00:27:36,480 --> 00:27:42,809
so error handling i kind of said that we

00:27:40,500 --> 00:27:45,630
would work would like a string and we

00:27:42,809 --> 00:27:46,770
just return a string that's a j s value

00:27:45,630 --> 00:27:49,049
but you can be a little bit more

00:27:46,770 --> 00:27:51,000
granular with it also with a j s is

00:27:49,049 --> 00:27:53,669
great and what we can do is we can

00:27:51,000 --> 00:27:55,350
specify the types of errors so we can do

00:27:53,669 --> 00:27:57,360
a type error and we can create it and

00:27:55,350 --> 00:28:00,120
format it and get it to that particular

00:27:57,360 --> 00:28:01,679
state and there's like a bunch of

00:28:00,120 --> 00:28:04,740
different ones you could do a type eval

00:28:01,679 --> 00:28:06,690
range syntax reference all the types of

00:28:04,740 --> 00:28:10,200
javascript things you want you can get

00:28:06,690 --> 00:28:12,630
them so then like the next thing is like

00:28:10,200 --> 00:28:15,240
how do you debug wisdom in your rest or

00:28:12,630 --> 00:28:19,620
in your javascript and that's kind of

00:28:15,240 --> 00:28:25,679
word gets interesting it's a it's again

00:28:19,620 --> 00:28:27,419
a story of a lot of lewis's so the

00:28:25,679 --> 00:28:28,950
number one thing is like a runtime error

00:28:27,419 --> 00:28:31,680
that you get

00:28:28,950 --> 00:28:34,710
and then what that comes to is let's

00:28:31,680 --> 00:28:37,200
hope this just works yes it does so what

00:28:34,710 --> 00:28:39,810
you get is you get this kind of error

00:28:37,200 --> 00:28:42,270
but you could point to the part of your

00:28:39,810 --> 00:28:44,160
J's bindings and what that does is it

00:28:42,270 --> 00:28:47,490
takes you to where that J has binding is

00:28:44,160 --> 00:28:49,470
causing the error and you can get it

00:28:47,490 --> 00:28:52,740
through that so it gets a little bit of

00:28:49,470 --> 00:28:55,950
tracking that you can follow through you

00:28:52,740 --> 00:28:57,690
can also get another whoops and this one

00:28:55,950 --> 00:28:59,880
will come through as an error that you

00:28:57,690 --> 00:29:01,470
would throw this one through because I

00:28:59,880 --> 00:29:02,790
threw it on the JavaScript side of

00:29:01,470 --> 00:29:06,060
things because I wanted to throw it and

00:29:02,790 --> 00:29:07,680
you have scrip side of things and again

00:29:06,060 --> 00:29:11,880
you can kind of follow that through as

00:29:07,680 --> 00:29:16,170
well it starts off with a wasn't bind

00:29:11,880 --> 00:29:17,610
generator and you can follow that as

00:29:16,170 --> 00:29:21,560
well which does not give you a very

00:29:17,610 --> 00:29:23,700
useful information there was um unnamed

00:29:21,560 --> 00:29:27,720
also does not give you a very useful

00:29:23,700 --> 00:29:29,370
information but the next one which is

00:29:27,720 --> 00:29:32,280
the two object call which is one of my

00:29:29,370 --> 00:29:34,350
API calls kind of gets you to that and

00:29:32,280 --> 00:29:38,240
you can kind of figure out that it's one

00:29:34,350 --> 00:29:40,560
of these API methods that throws for you

00:29:38,240 --> 00:29:43,500
but sometimes you get errors that like

00:29:40,560 --> 00:29:44,940
make no sense and this one is the one I

00:29:43,500 --> 00:29:46,950
didn't prepare for this is like an

00:29:44,940 --> 00:29:51,870
actual error that I got and four people

00:29:46,950 --> 00:29:55,710
in the back of the room it said this so

00:29:51,870 --> 00:30:01,350
it through in my to object method on

00:29:55,710 --> 00:30:03,870
line 210 which I kind of sort of knew

00:30:01,350 --> 00:30:06,140
about but I only have three API methods

00:30:03,870 --> 00:30:08,760
and they're like all rappers because

00:30:06,140 --> 00:30:11,340
guests are coming over and I just shoved

00:30:08,760 --> 00:30:13,920
everything else and like the drawers and

00:30:11,340 --> 00:30:16,140
I only expose three API methods to

00:30:13,920 --> 00:30:17,820
follow through and so this error was not

00:30:16,140 --> 00:30:20,250
very useful for me because there's like

00:30:17,820 --> 00:30:23,280
a bunch of code that's hidden under the

00:30:20,250 --> 00:30:25,320
to object and what it said is that there

00:30:23,280 --> 00:30:27,000
is like an in recursive use of an object

00:30:25,320 --> 00:30:30,690
detected which would lead to and say

00:30:27,000 --> 00:30:32,670
while I sing in rust what it was rather

00:30:30,690 --> 00:30:34,820
confusing and so I went and searched for

00:30:32,670 --> 00:30:39,720
this error and I got a bora fail

00:30:34,820 --> 00:30:42,190
somewhere and wasn't bindin but i did

00:30:39,720 --> 00:30:43,840
not get this anywhere throughout my code

00:30:42,190 --> 00:30:45,580
compiled fine and the rest side of

00:30:43,840 --> 00:30:49,450
things and so I went a little bit deeper

00:30:45,580 --> 00:30:52,120
and it turns out it's happens on a ref

00:30:49,450 --> 00:30:54,490
cell side of things and I kind of went

00:30:52,120 --> 00:30:57,129
into this code a little bit later on

00:30:54,490 --> 00:30:58,690
I took a brief break from this and I was

00:30:57,129 --> 00:31:01,240
like where was I using ref cell that

00:30:58,690 --> 00:31:06,340
seems like very advanced magic that I

00:31:01,240 --> 00:31:07,899
should not have been touching and so it

00:31:06,340 --> 00:31:14,500
was a little bit confused that was not

00:31:07,899 --> 00:31:16,840
intentional so it was not like the kinds

00:31:14,500 --> 00:31:18,879
of things I wanted and in what it turned

00:31:16,840 --> 00:31:22,990
out to be is that I had an unemployment

00:31:18,879 --> 00:31:24,549
'add call of for something that I was

00:31:22,990 --> 00:31:26,649
not meant to use and I was hitting that

00:31:24,549 --> 00:31:28,389
case which is you know you should

00:31:26,649 --> 00:31:29,889
probably leave unimplemented code in

00:31:28,389 --> 00:31:32,559
your code like you should probably

00:31:29,889 --> 00:31:35,049
implemented but it took a little bit of

00:31:32,559 --> 00:31:37,240
time to get through to that and

00:31:35,049 --> 00:31:39,220
obviously like only having three API

00:31:37,240 --> 00:31:43,450
methods exposed it's kind of hard to

00:31:39,220 --> 00:31:45,940
debug and so this is entirely a little

00:31:43,450 --> 00:31:47,799
bit unrelated I wrote this pretty

00:31:45,940 --> 00:31:51,309
printer called FEM it's for the lock

00:31:47,799 --> 00:31:51,850
rate and it pretty prints your log stuff

00:31:51,309 --> 00:31:55,149
for you

00:31:51,850 --> 00:31:58,440
and unrelated to Azzam I got a was in PR

00:31:55,149 --> 00:32:01,179
that makes it work in wasum and so I

00:31:58,440 --> 00:32:04,029
kind of put it into my code to see what

00:32:01,179 --> 00:32:06,039
it would do once I got that plasm PR in

00:32:04,029 --> 00:32:08,700
and I actually got of line numbers and

00:32:06,039 --> 00:32:11,740
there was like line numbers everywhere

00:32:08,700 --> 00:32:13,330
so I can see who are like a bunch of my

00:32:11,740 --> 00:32:14,980
code that I was logging was coming

00:32:13,330 --> 00:32:17,409
through in a particular verse side of

00:32:14,980 --> 00:32:18,940
things and I was really cool I was very

00:32:17,409 --> 00:32:21,250
happy with that so every time I'll do

00:32:18,940 --> 00:32:22,809
and implement it and my like I'm hacking

00:32:21,250 --> 00:32:26,740
on this code I'm just gonna use like

00:32:22,809 --> 00:32:28,059
them and just log it like that so then I

00:32:26,740 --> 00:32:31,269
get a little bit of line numbers and

00:32:28,059 --> 00:32:35,529
don't have to like I think about the API

00:32:31,269 --> 00:32:37,990
objects I've exposed cool so then we

00:32:35,529 --> 00:32:40,480
build again and then we get a whoops

00:32:37,990 --> 00:32:43,419
again and I wonder what it would be now

00:32:40,480 --> 00:32:45,490
and it turns out something I was using

00:32:43,419 --> 00:32:47,740
was using Lipsy and that's the

00:32:45,490 --> 00:32:49,539
interesting thing because I'm not using

00:32:47,740 --> 00:32:53,139
Lipsy I know that I shouldn't be using

00:32:49,539 --> 00:32:55,410
Lipsy but one of my dependencies further

00:32:53,139 --> 00:32:57,690
down was using Lipsy

00:32:55,410 --> 00:32:59,700
and it was a be sunk rate but the nice

00:32:57,690 --> 00:33:03,240
thing about that is that you can do a

00:32:59,700 --> 00:33:05,460
little bit of config tags that would

00:33:03,240 --> 00:33:08,790
compile a certain way for Azzam and

00:33:05,460 --> 00:33:12,570
compile another way for rust that I was

00:33:08,790 --> 00:33:13,860
able to use like that fortunately this

00:33:12,570 --> 00:33:16,110
actually got written down entirely

00:33:13,860 --> 00:33:19,110
because this was making

00:33:16,110 --> 00:33:20,730
objectid the way that objectid is no

00:33:19,110 --> 00:33:25,860
longer specified so I didn't even have

00:33:20,730 --> 00:33:27,600
to do that but just so you know lots of

00:33:25,860 --> 00:33:30,000
your dependencies could be using Lipsy

00:33:27,600 --> 00:33:33,000
and we got to be like beware of Lipsy

00:33:30,000 --> 00:33:37,110
when you we compile down to azam cool so

00:33:33,000 --> 00:33:39,150
we kind of got to this was um generated

00:33:37,110 --> 00:33:42,150
by some bind gen generated code that we

00:33:39,150 --> 00:33:45,420
can use in our JavaScript application so

00:33:42,150 --> 00:33:47,910
let's look at the JavaScript this one's

00:33:45,420 --> 00:33:49,170
a really short section so we'll just

00:33:47,910 --> 00:33:54,000
quickly go through it because it's once

00:33:49,170 --> 00:33:55,710
we get to JavaScript it's nice so we get

00:33:54,000 --> 00:33:57,630
to JavaScript and we use something

00:33:55,710 --> 00:34:01,020
called web and pack how many of you have

00:33:57,630 --> 00:34:03,540
heard of wasn't pack cool sweet so it

00:34:01,020 --> 00:34:05,040
makes it really easy so you can just npm

00:34:03,540 --> 00:34:08,460
install the whole thing and it just

00:34:05,040 --> 00:34:11,280
works the one caveat with it is it got

00:34:08,460 --> 00:34:13,010
it load async and it has to come from

00:34:11,280 --> 00:34:15,300
like a little bit of a process but

00:34:13,010 --> 00:34:19,410
thankfully if you load a sync it sort of

00:34:15,300 --> 00:34:22,830
works except the one whoops and it's the

00:34:19,410 --> 00:34:26,070
web pack and after a bunch of like

00:34:22,830 --> 00:34:28,470
research and struggling with it like a

00:34:26,070 --> 00:34:29,940
lot of struggling with it you get to the

00:34:28,470 --> 00:34:32,429
point where you just have to install a

00:34:29,940 --> 00:34:36,810
very specific version of web pack and

00:34:32,429 --> 00:34:38,760
then it just works and then to load it

00:34:36,810 --> 00:34:43,200
async you just need like a dynamic

00:34:38,760 --> 00:34:44,880
import and Babel and but I'm cool so we

00:34:43,200 --> 00:34:46,710
had to adjust kind of leave this flow a

00:34:44,880 --> 00:34:49,110
little bit for electron we skip the

00:34:46,710 --> 00:34:52,980
middle step and we just require it async

00:34:49,110 --> 00:34:54,900
and it looks like this you import and

00:34:52,980 --> 00:34:59,640
then you do a promise on the wads of

00:34:54,900 --> 00:35:02,160
module and then you use it as is and the

00:34:59,640 --> 00:35:06,270
last part of thing is yeah actually

00:35:02,160 --> 00:35:07,190
using it so the API is has three points

00:35:06,270 --> 00:35:09,079
one is

00:35:07,190 --> 00:35:11,180
just for using the new kind of

00:35:09,079 --> 00:35:12,920
instantiating the module and then every

00:35:11,180 --> 00:35:15,980
time there is data that comes through we

00:35:12,920 --> 00:35:18,109
write it to the parser and obviously the

00:35:15,980 --> 00:35:20,030
rest side of things stores it inside the

00:35:18,109 --> 00:35:23,540
schema parser and then once we're done

00:35:20,030 --> 00:35:24,950
we call either a to JSON or to object to

00:35:23,540 --> 00:35:27,619
be able to get all of that data

00:35:24,950 --> 00:35:28,130
accumulated and then words really darn

00:35:27,619 --> 00:35:32,480
fast

00:35:28,130 --> 00:35:34,369
cool so the TLDR the TLDR is that I did

00:35:32,480 --> 00:35:36,349
not have to do anything fancy to be able

00:35:34,369 --> 00:35:39,980
to get really fast code running in the

00:35:36,349 --> 00:35:41,930
browser I just kind of came with it it

00:35:39,980 --> 00:35:44,180
came with the rough side of things

00:35:41,930 --> 00:35:48,319
rust compiles down to of assembly and

00:35:44,180 --> 00:35:51,079
web assembly is really cool you don't

00:35:48,319 --> 00:35:52,540
have to as Nick has stated you don't

00:35:51,079 --> 00:35:56,540
have to get a bunch of speed without

00:35:52,540 --> 00:35:59,089
doing the dark arts and thrustin wasum

00:35:56,540 --> 00:36:03,200
are there to be able to do that for you

00:35:59,089 --> 00:36:05,869
I I wanted I didn't want to say that it

00:36:03,200 --> 00:36:07,310
was hard it was a hard like six months

00:36:05,869 --> 00:36:10,640
and it took me to like build out the

00:36:07,310 --> 00:36:14,000
whole thing but it was actually like a

00:36:10,640 --> 00:36:16,579
lot of fun to be able to do it

00:36:14,000 --> 00:36:19,760
right so our compass now talks to rest

00:36:16,579 --> 00:36:21,470
and that's how we got it to do it thanks

00:36:19,760 --> 00:36:26,300
so much for this thing

00:36:21,470 --> 00:36:39,599
[Applause]

00:36:26,300 --> 00:36:39,599

YouTube URL: https://www.youtube.com/watch?v=lLzFJenzBng


