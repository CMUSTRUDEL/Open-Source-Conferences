Title: RustConf 2019 - Flatulence, Crystals, and Happy Little Accidents by Nick Fitzgerald
Publication date: 2019-09-16
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Flatulence, Crystlas, and Happy Little Accidents by Nick Fitzgerald

Sometimes programming Rust can feel like serious business. Let's reject the absurdity of the real world and slip into solipsism with generative art. How does Rust hold up as a paint brush? And what can we learn when our fantasy worlds bleed back into reality?
Captions: 
	00:00:08,770 --> 00:00:15,680
[Music]

00:00:16,790 --> 00:00:23,150
oh hi everybody yeah I'm Nick thanks for

00:00:20,600 --> 00:00:26,450
coming to my talk about algorithmic art

00:00:23,150 --> 00:00:28,460
and rust before we get into the art and

00:00:26,450 --> 00:00:31,330
we get into the rust I'd like to share

00:00:28,460 --> 00:00:34,340
kind of my journey about how I got here

00:00:31,330 --> 00:00:41,930
so I do rust things for work these days

00:00:34,340 --> 00:00:46,489
I work on ah yeah hey are you gonna see

00:00:41,930 --> 00:00:49,010
the title slide alright yeah so I do

00:00:46,489 --> 00:00:51,379
rust things for work these days I do the

00:00:49,010 --> 00:00:54,080
intersection of rust and webassembly and

00:00:51,379 --> 00:00:57,110
I like to make fast things I like to

00:00:54,080 --> 00:00:59,089
make robust and reliable things I like

00:00:57,110 --> 00:01:01,580
to create tools that have good developer

00:00:59,089 --> 00:01:04,280
experiences and support many different

00:01:01,580 --> 00:01:07,610
use cases and help other people build

00:01:04,280 --> 00:01:09,920
fast robust and reliable things and I

00:01:07,610 --> 00:01:13,640
love my job but you know it's a lot of

00:01:09,920 --> 00:01:15,820
serious business right so what am i

00:01:13,640 --> 00:01:18,680
doing in my spare time outside of work

00:01:15,820 --> 00:01:21,620
well you know flashback to you know a

00:01:18,680 --> 00:01:24,770
year ago or so I'm mostly writing side

00:01:21,620 --> 00:01:26,180
projects in rust for fun but these side

00:01:24,770 --> 00:01:28,460
projects tend to be you know kind of

00:01:26,180 --> 00:01:30,950
like semi related to things I'm doing at

00:01:28,460 --> 00:01:34,790
work and then they had this tendency to

00:01:30,950 --> 00:01:36,350
actually just become part of work and I

00:01:34,790 --> 00:01:39,950
had this realization that I was just

00:01:36,350 --> 00:01:42,140
working the whole time and you know this

00:01:39,950 --> 00:01:45,350
isn't a recipe for a well-rounded life

00:01:42,140 --> 00:01:48,530
right so I took up pottery as a hobby

00:01:45,350 --> 00:01:50,420
and you know the physicality of getting

00:01:48,530 --> 00:01:52,910
my hands dirty and you know getting the

00:01:50,420 --> 00:01:54,920
clay in between my fingers really

00:01:52,910 --> 00:01:57,070
appealed to me but I wanted something

00:01:54,920 --> 00:01:59,360
you know that couldn't turn into work

00:01:57,070 --> 00:02:01,700
something that didn't have stakeholders

00:01:59,360 --> 00:02:03,920
or users reporting bugs or requesting

00:02:01,700 --> 00:02:07,340
features something that was just for me

00:02:03,920 --> 00:02:09,379
where I could relax and have fun and

00:02:07,340 --> 00:02:11,599
what I liked about the pottery process

00:02:09,379 --> 00:02:13,760
was that like every step along the way

00:02:11,599 --> 00:02:16,400
from like lump of clay to finished piece

00:02:13,760 --> 00:02:17,569
has so much depth and so many facets to

00:02:16,400 --> 00:02:20,450
it that you could spend a lifetime

00:02:17,569 --> 00:02:22,190
really digging into it you know if you

00:02:20,450 --> 00:02:24,409
love throwing on the wheel you can make

00:02:22,190 --> 00:02:26,959
these like long skinny vases and play

00:02:24,409 --> 00:02:29,910
with shape and form or you can even make

00:02:26,959 --> 00:02:34,080
your own glaze from scratch like matte

00:02:29,910 --> 00:02:36,060
with this piece here and in particular

00:02:34,080 --> 00:02:37,890
with glaze what I liked was it often

00:02:36,060 --> 00:02:39,000
felt like the hole was greater than the

00:02:37,890 --> 00:02:40,620
parts

00:02:39,000 --> 00:02:43,680
there's this sort of element of surprise

00:02:40,620 --> 00:02:45,660
because before you fire the piece the

00:02:43,680 --> 00:02:47,880
glaze is kind of chalky and it's dull

00:02:45,660 --> 00:02:50,460
and then after it comes out of the kiln

00:02:47,880 --> 00:02:53,730
it's like glassy and and shiny and

00:02:50,460 --> 00:02:56,250
colorful and you can combine glazes you

00:02:53,730 --> 00:02:58,350
know by mixing them together or you can

00:02:56,250 --> 00:03:01,200
layer one glaze on top of another glaze

00:02:58,350 --> 00:03:03,360
and at some point I discovered that if I

00:03:01,200 --> 00:03:06,180
put you know a thin layer of black glaze

00:03:03,360 --> 00:03:07,770
on top of my green glaze I got something

00:03:06,180 --> 00:03:10,260
that was kind of metallic and shimmery

00:03:07,770 --> 00:03:12,960
almost like an oil slick and neither

00:03:10,260 --> 00:03:15,030
glaze alone had this property but you

00:03:12,960 --> 00:03:19,380
combine them together and like something

00:03:15,030 --> 00:03:20,970
new emerges I liked this effect so much

00:03:19,380 --> 00:03:23,940
that I tried to recreate it with a

00:03:20,970 --> 00:03:26,340
series of five different bowls but only

00:03:23,940 --> 00:03:29,310
one actually survived the whole process

00:03:26,340 --> 00:03:31,560
into a finished piece and it's because

00:03:29,310 --> 00:03:33,510
it turns out that pottery is quite

00:03:31,560 --> 00:03:36,270
difficult and it requires a lot of

00:03:33,510 --> 00:03:37,980
patience you know things can break at

00:03:36,270 --> 00:03:40,290
every step of the way and when they

00:03:37,980 --> 00:03:42,150
break it tends to be irreparable because

00:03:40,290 --> 00:03:46,070
unlike software you don't have these

00:03:42,150 --> 00:03:48,360
niceties like undo and version control

00:03:46,070 --> 00:03:50,250
you know this difficulty is really part

00:03:48,360 --> 00:03:51,480
of the craft and it's what makes you

00:03:50,250 --> 00:03:53,550
know these really beautiful pieces that

00:03:51,480 --> 00:03:56,070
get finished so impressive because all

00:03:53,550 --> 00:03:57,690
the work it took to get there but I had

00:03:56,070 --> 00:03:59,400
this personal realization which is that

00:03:57,690 --> 00:04:01,739
despite all of these things that I

00:03:59,400 --> 00:04:04,170
really loved about pottery I was getting

00:04:01,739 --> 00:04:06,090
more frustrated by the difficulty than I

00:04:04,170 --> 00:04:09,840
was relaxing and having fun which were

00:04:06,090 --> 00:04:12,150
my original goals so I kind of heard of

00:04:09,840 --> 00:04:13,770
generative art or algorithmic art where

00:04:12,150 --> 00:04:16,530
people would write programs to generate

00:04:13,770 --> 00:04:19,320
images or little animation loops or

00:04:16,530 --> 00:04:21,060
maybe music and I recognized that there

00:04:19,320 --> 00:04:22,980
was kind of a similarity with pottery

00:04:21,060 --> 00:04:25,980
and kind of that surprise of combining

00:04:22,980 --> 00:04:27,990
glazes because generative art artists

00:04:25,980 --> 00:04:29,970
are often searching for like a set of

00:04:27,990 --> 00:04:32,550
very simple rules that when you combine

00:04:29,970 --> 00:04:34,560
them they kind of create emergent

00:04:32,550 --> 00:04:37,190
behavior that's bigger than any of those

00:04:34,560 --> 00:04:39,990
single individual rules by themselves I

00:04:37,190 --> 00:04:43,010
think a really good example of this is

00:04:39,990 --> 00:04:45,080
process 13 by K series and

00:04:43,010 --> 00:04:46,430
the way that this image is generated is

00:04:45,080 --> 00:04:48,440
kind of behind the scenes there's

00:04:46,430 --> 00:04:50,840
actually a simulation of a bunch of

00:04:48,440 --> 00:04:52,820
circles moving around and whenever the

00:04:50,840 --> 00:04:55,040
circles overlap or kind of touch each

00:04:52,820 --> 00:04:59,240
other a line is drawn from the center of

00:04:55,040 --> 00:05:03,110
one circle to the other circle and you

00:04:59,240 --> 00:05:05,210
know these the sorry no code says you

00:05:03,110 --> 00:05:08,030
know draw these trellises or create this

00:05:05,210 --> 00:05:10,040
like echoing spiderweb effect this is

00:05:08,030 --> 00:05:13,760
something that emerges from the process

00:05:10,040 --> 00:05:14,960
to delight us and to surprise us and you

00:05:13,760 --> 00:05:16,460
know I could look at pieces like this

00:05:14,960 --> 00:05:18,080
and really appreciate their beauty

00:05:16,460 --> 00:05:20,690
you know both on an artistic and

00:05:18,080 --> 00:05:22,670
technical level but I wasn't quite

00:05:20,690 --> 00:05:24,170
overcome by the urge to make this stuff

00:05:22,670 --> 00:05:26,180
myself yet because there's still

00:05:24,170 --> 00:05:28,220
something missing for me there's nothing

00:05:26,180 --> 00:05:31,040
physical that I could hold in my hands

00:05:28,220 --> 00:05:34,490
and that's when I discovered pen

00:05:31,040 --> 00:05:36,980
plotters so a pen plotter is a robot it

00:05:34,490 --> 00:05:39,170
has an arm and a hand and you take a pen

00:05:36,980 --> 00:05:41,690
and you put your pen in the robots hand

00:05:39,170 --> 00:05:44,120
and you say please draw something for me

00:05:41,690 --> 00:05:45,800
and then kind of crucially important you

00:05:44,120 --> 00:05:49,430
know it actually draws what you ask it

00:05:45,800 --> 00:05:51,980
to and so now you can actually have a

00:05:49,430 --> 00:05:55,130
physical pen and paper artifact of your

00:05:51,980 --> 00:05:56,900
generative algorithm and I think that

00:05:55,130 --> 00:05:59,240
this physical pen plotter medium

00:05:56,900 --> 00:06:01,910
actually allows for even more emergence

00:05:59,240 --> 00:06:03,470
than then software does because there

00:06:01,910 --> 00:06:06,380
are more variables that you don't have

00:06:03,470 --> 00:06:08,240
complete control over for example a pen

00:06:06,380 --> 00:06:10,670
doesn't draw a perfect euclidean lines

00:06:08,240 --> 00:06:12,200
with zero area different pens have

00:06:10,670 --> 00:06:14,570
different widths they have different

00:06:12,200 --> 00:06:16,280
colors a ballpoint pen is going to draw

00:06:14,570 --> 00:06:17,780
a different line from a fountain pen is

00:06:16,280 --> 00:06:19,370
gonna draw a different line from a

00:06:17,780 --> 00:06:22,400
marker it's gonna be different from a

00:06:19,370 --> 00:06:24,470
gel pen and ink bleeds and so you have

00:06:22,400 --> 00:06:26,330
to kind of grapple with that or maybe

00:06:24,470 --> 00:06:28,520
you can purposely move your pen even

00:06:26,330 --> 00:06:32,450
slower to get more bleeding and kind of

00:06:28,520 --> 00:06:34,130
use that as an artistic effect colors

00:06:32,450 --> 00:06:36,440
combine just like the ways you can

00:06:34,130 --> 00:06:38,630
combine glazes and maybe you draw a blue

00:06:36,440 --> 00:06:40,520
line on a yellow line and now you have a

00:06:38,630 --> 00:06:42,380
unique green that you don't have any

00:06:40,520 --> 00:06:46,010
marker to draw the only way to get that

00:06:42,380 --> 00:06:47,660
is through combination I think that this

00:06:46,010 --> 00:06:50,270
piece by Paul Records really takes

00:06:47,660 --> 00:06:52,040
advantage of the medium superbly the way

00:06:50,270 --> 00:06:53,870
that the rectangles overlap and the

00:06:52,040 --> 00:06:56,330
colors combine kind of suggests a

00:06:53,870 --> 00:06:58,250
transparency and a depth kind of

00:06:56,330 --> 00:07:00,020
like a third dimension that doesn't

00:06:58,250 --> 00:07:03,409
really exist in the code that only comes

00:07:00,020 --> 00:07:05,689
out once you put it on paper and this

00:07:03,409 --> 00:07:07,460
physicality of the pen of the pen

00:07:05,689 --> 00:07:09,259
plotter medium this is what I was

00:07:07,460 --> 00:07:11,930
missing from generative art in general

00:07:09,259 --> 00:07:13,280
and so at this point I'm hooked and I

00:07:11,930 --> 00:07:15,469
make my decision

00:07:13,280 --> 00:07:17,090
I want to make algorithmic art and I

00:07:15,469 --> 00:07:19,909
want to bring it into the physical world

00:07:17,090 --> 00:07:21,590
with a pen plotter so I bought an ACCI

00:07:19,909 --> 00:07:25,129
draw which is a popular pen plotter

00:07:21,590 --> 00:07:27,080
these days but at this point I have a

00:07:25,129 --> 00:07:29,810
whole lot more excitement than I have

00:07:27,080 --> 00:07:31,430
knowledge I don't actually know how to

00:07:29,810 --> 00:07:34,580
get the pen plotter to draw something

00:07:31,430 --> 00:07:38,120
and what I learned was that the easiest

00:07:34,580 --> 00:07:39,949
way is to use SVG SVG stands for

00:07:38,120 --> 00:07:42,830
scalable vector graphics and it's an

00:07:39,949 --> 00:07:44,449
image format but unlike most image

00:07:42,830 --> 00:07:47,270
formats that you might know like JPEGs

00:07:44,449 --> 00:07:47,569
or gifts it doesn't talk about pixels at

00:07:47,270 --> 00:07:50,479
all

00:07:47,569 --> 00:07:52,400
SVG talks about shapes and paths and

00:07:50,479 --> 00:07:54,560
these shapes and paths are described

00:07:52,400 --> 00:07:56,539
within an abstract coordinate space and

00:07:54,560 --> 00:07:58,699
what the pen plotter can actually do is

00:07:56,539 --> 00:08:00,889
it can scale that coordinate space up

00:07:58,699 --> 00:08:02,210
and down to the size of the paper that

00:08:00,889 --> 00:08:03,919
it's drawing on or the size of the

00:08:02,210 --> 00:08:06,430
drawing that you're making and then it

00:08:03,919 --> 00:08:11,440
will draw those scaled shapes and paths

00:08:06,430 --> 00:08:14,479
so how many people here know HTML or XML

00:08:11,440 --> 00:08:17,539
all right everybody that's awesome so as

00:08:14,479 --> 00:08:21,469
you can see SVG is also a text format

00:08:17,539 --> 00:08:23,029
that features many pointy brackets so

00:08:21,469 --> 00:08:24,650
basically everyone who raised your hand

00:08:23,029 --> 00:08:27,580
like you're you've taken your first step

00:08:24,650 --> 00:08:30,289
towards being a generative artist and

00:08:27,580 --> 00:08:32,959
this is actually the russ code generated

00:08:30,289 --> 00:08:35,029
that previous SVG snippet because I

00:08:32,959 --> 00:08:36,620
don't want to take any old SVG off the

00:08:35,029 --> 00:08:38,779
internet and plot that what I want to do

00:08:36,620 --> 00:08:41,659
is I want to generate my own SVG's and I

00:08:38,779 --> 00:08:43,909
want to do that with russ so if you

00:08:41,659 --> 00:08:46,040
search crates i/o for SVG the first hit

00:08:43,909 --> 00:08:48,079
is the SVG crate and that's what's used

00:08:46,040 --> 00:08:51,019
here it gives you this really nice

00:08:48,079 --> 00:08:53,899
builder style API for kind of describing

00:08:51,019 --> 00:08:56,029
and composing SVG elements and you can

00:08:53,899 --> 00:08:58,490
get surprisingly far using just the SVG

00:08:56,029 --> 00:09:00,350
crate so what this is doing is it's

00:08:58,490 --> 00:09:02,600
actually drawing a triangle and the data

00:09:00,350 --> 00:09:04,640
is a sequence of strokes in the

00:09:02,600 --> 00:09:06,470
coordinate space and this is ultimately

00:09:04,640 --> 00:09:08,160
what controls the pen so it says you

00:09:06,470 --> 00:09:12,269
know move to this point and then

00:09:08,160 --> 00:09:14,220
draw a line to that point etc the path

00:09:12,269 --> 00:09:16,290
element is sort of like the styles for

00:09:14,220 --> 00:09:18,089
the strokes so what this is saying is

00:09:16,290 --> 00:09:20,639
that these strokes should be thick and

00:09:18,089 --> 00:09:22,910
they should be blue and then the area

00:09:20,639 --> 00:09:25,829
that's inside should be filled in pink

00:09:22,910 --> 00:09:28,050
and then finally the document is sort of

00:09:25,829 --> 00:09:29,939
the whole SVG image and describes what

00:09:28,050 --> 00:09:33,600
kind of box in that coordinate space is

00:09:29,939 --> 00:09:35,879
ultimately rendered as the image now to

00:09:33,600 --> 00:09:39,360
get the SVG from you know your computer

00:09:35,879 --> 00:09:41,399
to the EXCI draw I use this tool called

00:09:39,360 --> 00:09:42,990
saxy and it gives you this really nice

00:09:41,399 --> 00:09:43,620
web front-end for kind of controlling

00:09:42,990 --> 00:09:45,750
the Pens

00:09:43,620 --> 00:09:47,819
up and down height and kind of centering

00:09:45,750 --> 00:09:49,290
on the page and I can't recommend it

00:09:47,819 --> 00:09:53,189
highly enough if you're using an

00:09:49,290 --> 00:09:55,889
actually draw use saxy and so here's the

00:09:53,189 --> 00:09:58,050
results of of rendering it on the left

00:09:55,889 --> 00:10:00,689
that's a software rendering of triangle

00:09:58,050 --> 00:10:03,269
SVG and on the right this is a

00:10:00,689 --> 00:10:05,639
photograph of triangle SVG as drawn by

00:10:03,269 --> 00:10:07,740
the pen plotter with gel pen on black

00:10:05,639 --> 00:10:09,269
paper and so we said that these lines

00:10:07,740 --> 00:10:10,829
should be thick and they should be blue

00:10:09,269 --> 00:10:13,110
and that the inside should be filled

00:10:10,829 --> 00:10:15,269
pink and yes the software renderer did

00:10:13,110 --> 00:10:17,069
that but the pen plotter can't because

00:10:15,269 --> 00:10:18,959
it can only draw with the color of the

00:10:17,069 --> 00:10:24,089
pen that you gave it and it basically

00:10:18,959 --> 00:10:26,610
ignores any sort of fill so now that I

00:10:24,089 --> 00:10:29,519
can generate SVG's and I can plot SVG's

00:10:26,610 --> 00:10:30,930
I kind of set an exercise for myself how

00:10:29,519 --> 00:10:32,880
many different ways could I fill a

00:10:30,930 --> 00:10:35,880
rectangle with interesting pattern of

00:10:32,880 --> 00:10:39,300
strokes where I parameter i parameterize

00:10:35,880 --> 00:10:41,519
this fill by like a darkness value where

00:10:39,300 --> 00:10:43,980
a zero darkness value means basically

00:10:41,519 --> 00:10:45,930
empty there's no strokes in there and a

00:10:43,980 --> 00:10:47,610
one darkness value means it's completely

00:10:45,930 --> 00:10:49,829
full and there's just strokes covering

00:10:47,610 --> 00:10:51,269
the whole thing so basically how many

00:10:49,829 --> 00:10:54,420
implementations of this trait could I

00:10:51,269 --> 00:10:56,759
make here are a few of the results so

00:10:54,420 --> 00:11:01,980
this is rectangle eight with darkness

00:10:56,759 --> 00:11:04,050
values 0.1 0.5 and 0.9 and the algorithm

00:11:01,980 --> 00:11:06,389
to generate rectangle eight is to move

00:11:04,050 --> 00:11:08,430
some distance D along each of those

00:11:06,389 --> 00:11:10,019
outer edges of the rectangle and so now

00:11:08,430 --> 00:11:12,779
you have four points and you connect

00:11:10,019 --> 00:11:14,850
those points by into a new quadrilateral

00:11:12,779 --> 00:11:16,709
and then you continue recursively on

00:11:14,850 --> 00:11:20,610
that new quadrilateral until basically

00:11:16,709 --> 00:11:21,459
everything meets up in the center this

00:11:20,610 --> 00:11:23,980
is rectangle

00:11:21,459 --> 00:11:25,749
- and the algorithm for rectangle - is

00:11:23,980 --> 00:11:27,670
to choose a random point within the

00:11:25,749 --> 00:11:29,829
rectangle and then start generating

00:11:27,670 --> 00:11:32,350
boxes outwards until it meets the

00:11:29,829 --> 00:11:33,819
corners of the outer rectangle and so if

00:11:32,350 --> 00:11:35,470
you have like a lower darkness value

00:11:33,819 --> 00:11:37,600
you'll get fewer boxes that are kind of

00:11:35,470 --> 00:11:39,160
spaced a little bit further apart and

00:11:37,600 --> 00:11:41,230
you do a higher darkness value well

00:11:39,160 --> 00:11:45,009
there will be more rectangles that are

00:11:41,230 --> 00:11:46,779
packed really closely together and now

00:11:45,009 --> 00:11:48,790
that I had a bunch of ways to create

00:11:46,779 --> 00:11:50,740
rectangles I want to see how can I

00:11:48,790 --> 00:11:52,869
combine them together and you can do

00:11:50,740 --> 00:11:56,019
that by tiling them and then I could

00:11:52,869 --> 00:11:57,550
vary that darkness value in how many

00:11:56,019 --> 00:12:00,910
different interesting ways could I vary

00:11:57,550 --> 00:12:04,089
the darkness value for a tiling this is

00:12:00,910 --> 00:12:05,439
a tiling zero of rectangle ten and the

00:12:04,089 --> 00:12:07,179
darkness value for a particular

00:12:05,439 --> 00:12:09,100
rectangle within the tiling is

00:12:07,179 --> 00:12:11,889
determined by which row it appears in

00:12:09,100 --> 00:12:14,259
and so the very top row has a darkness

00:12:11,889 --> 00:12:16,600
value of zero and the very bottom row

00:12:14,259 --> 00:12:18,819
has a darkness value of one and then it

00:12:16,600 --> 00:12:20,829
kind of interpolates as you go down the

00:12:18,819 --> 00:12:23,459
rows between zero and one and you get

00:12:20,829 --> 00:12:26,379
this vertical gradient effect

00:12:23,459 --> 00:12:28,509
this is tiling three of rectangle two

00:12:26,379 --> 00:12:30,100
and the darkness for a particular

00:12:28,509 --> 00:12:32,319
rectangle within this tiling is

00:12:30,100 --> 00:12:34,509
determined by how close is it to the

00:12:32,319 --> 00:12:36,279
center of the tiling and then a little

00:12:34,509 --> 00:12:37,839
bit of random noise is introduced to

00:12:36,279 --> 00:12:40,749
kind of perturb the results and make it

00:12:37,839 --> 00:12:42,160
appear more organic and what I really

00:12:40,749 --> 00:12:43,990
like about this one is that it kind of

00:12:42,160 --> 00:12:47,350
has this kaleidoscope effect that maybe

00:12:43,990 --> 00:12:50,139
looks like stained glass or even ripples

00:12:47,350 --> 00:12:52,179
of on some geometric water right and I

00:12:50,139 --> 00:12:54,220
like this because I wasn't intending to

00:12:52,179 --> 00:12:57,369
get that it just kind of emerged from

00:12:54,220 --> 00:12:59,139
the tiling and you know I liked that so

00:12:57,369 --> 00:13:02,589
this was my favorite of the tiling

00:12:59,139 --> 00:13:04,299
exercise and I decided to plot it so

00:13:02,589 --> 00:13:06,160
here's a photo of that same image as

00:13:04,299 --> 00:13:10,179
drawn by the pen plotter with black

00:13:06,160 --> 00:13:11,860
ballpoint pen on white paper after

00:13:10,179 --> 00:13:13,959
plotting I was kind of hit with another

00:13:11,860 --> 00:13:16,540
surprise which is that the lines drawn

00:13:13,959 --> 00:13:18,639
by the pen were much thicker and darker

00:13:16,540 --> 00:13:21,100
than the lines drawn by the software

00:13:18,639 --> 00:13:23,049
renderer and so it doesn't really look

00:13:21,100 --> 00:13:24,670
you know like stained glass so much

00:13:23,049 --> 00:13:26,160
anymore it's almost like there's a ghost

00:13:24,670 --> 00:13:28,449
type Pokemon that's kind of

00:13:26,160 --> 00:13:31,740
materializing from another dimension or

00:13:28,449 --> 00:13:33,730
something right but it's cool either way

00:13:31,740 --> 00:13:34,960
and so I think you know when you're

00:13:33,730 --> 00:13:37,180
starting something new

00:13:34,960 --> 00:13:39,339
often the hardest part is exterior at a

00:13:37,180 --> 00:13:41,410
blank canvas and simultaneously having

00:13:39,339 --> 00:13:44,860
an infinite number of options of things

00:13:41,410 --> 00:13:46,839
that you could do but also not even

00:13:44,860 --> 00:13:49,180
knowing what those infinite things are

00:13:46,839 --> 00:13:51,190
and I think the best thing to do in this

00:13:49,180 --> 00:13:54,279
situation is to completely sidestep the

00:13:51,190 --> 00:13:56,470
problem by defining some set of

00:13:54,279 --> 00:13:58,540
constraints and then as an exercise

00:13:56,470 --> 00:14:00,700
fulfilling that those constraints in as

00:13:58,540 --> 00:14:02,950
many ways as you possibly can so how

00:14:00,700 --> 00:14:05,050
many ways can you fill a rectangle how

00:14:02,950 --> 00:14:07,740
many ways can you create a custom

00:14:05,050 --> 00:14:10,390
brushstroke that follows a given path

00:14:07,740 --> 00:14:11,980
how many ways can you visualize Perlin

00:14:10,390 --> 00:14:13,990
noise which is a noise that gives you

00:14:11,980 --> 00:14:16,480
smooth gradients of values instead of

00:14:13,990 --> 00:14:18,520
just random values how many different

00:14:16,480 --> 00:14:20,230
kinds of random Walker's can you create

00:14:18,520 --> 00:14:22,390
that move through your coordinate space

00:14:20,230 --> 00:14:24,250
and interesting ways maybe one is a

00:14:22,390 --> 00:14:26,230
particle with random force applied to it

00:14:24,250 --> 00:14:28,540
maybe another is a pendulum that swings

00:14:26,230 --> 00:14:31,270
but then randomly chooses to swing from

00:14:28,540 --> 00:14:33,399
the other side and it moves around and

00:14:31,270 --> 00:14:33,940
then once you have these kind of base

00:14:33,399 --> 00:14:35,770
things

00:14:33,940 --> 00:14:37,990
how can you combine them in interesting

00:14:35,770 --> 00:14:39,430
ways can you tile the rectangles and

00:14:37,990 --> 00:14:40,170
then vary the darkness value in

00:14:39,430 --> 00:14:43,360
interesting ways

00:14:40,170 --> 00:14:45,310
can you take the path drawn by one of

00:14:43,360 --> 00:14:48,600
your random walkers and feed that into

00:14:45,310 --> 00:14:51,190
one of your custom brushstrokes the

00:14:48,600 --> 00:14:53,200
other thing that I think I really took

00:14:51,190 --> 00:14:56,110
away from this is that you don't need

00:14:53,200 --> 00:14:58,150
much to start making plotter art you

00:14:56,110 --> 00:15:01,839
don't need to learn a big framework like

00:14:58,150 --> 00:15:03,880
processing or p5.js or nanou or open

00:15:01,839 --> 00:15:05,920
frameworks you can just start doing this

00:15:03,880 --> 00:15:09,100
stuff now and so these first pieces were

00:15:05,920 --> 00:15:10,870
made with just the SVG crate and SVG is

00:15:09,100 --> 00:15:13,240
already a pretty rich language for

00:15:10,870 --> 00:15:14,980
making drawings and I mentioned this

00:15:13,240 --> 00:15:17,680
because learning new frameworks can be

00:15:14,980 --> 00:15:20,290
intimidating they tend to have wide API

00:15:17,680 --> 00:15:21,940
surfaces and many concepts to learn and

00:15:20,290 --> 00:15:23,380
sometimes the best way to start

00:15:21,940 --> 00:15:25,930
something is to just hit the ground

00:15:23,380 --> 00:15:27,550
running and then later once you have a

00:15:25,930 --> 00:15:29,620
problem that a framework can solve for

00:15:27,550 --> 00:15:32,260
you maybe that's the time to reach for

00:15:29,620 --> 00:15:34,600
the framework right so for example as we

00:15:32,260 --> 00:15:36,100
saw with triangle that SVG you know

00:15:34,600 --> 00:15:38,320
plotters don't support all of the

00:15:36,100 --> 00:15:41,350
features that software renderers do for

00:15:38,320 --> 00:15:43,959
SVG and so software renderers will fill

00:15:41,350 --> 00:15:45,870
in shapes with colors or gradients but

00:15:43,959 --> 00:15:47,520
applaud or will only draw that

00:15:45,870 --> 00:15:50,310
and it can only do that in the pens

00:15:47,520 --> 00:15:52,650
color that you give it and if you want

00:15:50,310 --> 00:15:54,300
kind of a fill well you have to do that

00:15:52,650 --> 00:15:55,920
yourself and you need to describe that

00:15:54,300 --> 00:15:57,930
in actual lines that the pen plotters

00:15:55,920 --> 00:16:01,680
going to draw such as like a crosshatch

00:15:57,930 --> 00:16:04,380
pattern and software and/or software

00:16:01,680 --> 00:16:06,780
renderers will draw elements in order so

00:16:04,380 --> 00:16:08,550
a later element that's drawn on top of

00:16:06,780 --> 00:16:11,460
an earlier element can actually cover it

00:16:08,550 --> 00:16:13,530
up and it can include it and with a

00:16:11,460 --> 00:16:16,200
plotter it will also draw those elements

00:16:13,530 --> 00:16:17,670
in order and the result is that you'll

00:16:16,200 --> 00:16:19,710
draw the first element and then the

00:16:17,670 --> 00:16:21,870
second element and you have two elements

00:16:19,710 --> 00:16:24,240
drawn on top of each other and so if you

00:16:21,870 --> 00:16:25,800
want occlusion with the pen plotter you

00:16:24,240 --> 00:16:27,510
have to actually do that in software

00:16:25,800 --> 00:16:29,730
before you even give it to the plotter

00:16:27,510 --> 00:16:31,650
and you need to only generate pads that

00:16:29,730 --> 00:16:34,290
are not covered up by anything else and

00:16:31,650 --> 00:16:36,630
so when you start running into these

00:16:34,290 --> 00:16:38,340
sorts of problems like now is the time

00:16:36,630 --> 00:16:40,350
to reach for a library that helps you

00:16:38,340 --> 00:16:43,710
out or to find a framework that that

00:16:40,350 --> 00:16:45,720
will do this stuff for you or you can

00:16:43,710 --> 00:16:47,820
create your own personal framework like

00:16:45,720 --> 00:16:50,400
I did I started digging into the rabbit

00:16:47,820 --> 00:16:52,320
hole of computational geometry and kind

00:16:50,400 --> 00:16:55,200
of collecting my utilities together and

00:16:52,320 --> 00:16:58,170
I named this set of crates fits Jen's

00:16:55,200 --> 00:17:01,200
art but you know as a name fit shins are

00:16:58,170 --> 00:17:03,560
it was really just too bloated and so to

00:17:01,200 --> 00:17:12,930
release some of that pressure

00:17:03,560 --> 00:17:15,660
it became part hence the the flatulence

00:17:12,930 --> 00:17:17,820
in the talks title but I promise this is

00:17:15,660 --> 00:17:21,620
the only fart joke in this talk and

00:17:17,820 --> 00:17:21,620
nothing else is going to slip out

00:17:22,990 --> 00:17:29,780
so I follow a few people on Twitter who

00:17:26,360 --> 00:17:31,880
do microscope photography art this photo

00:17:29,780 --> 00:17:34,280
is actually an extreme close-up of

00:17:31,880 --> 00:17:36,679
aspirin crystals like aspirin like you'd

00:17:34,280 --> 00:17:38,900
take for a headache and it was taken by

00:17:36,679 --> 00:17:40,490
Carroll real Arden what I really like

00:17:38,900 --> 00:17:42,590
about this photo is the way that there's

00:17:40,490 --> 00:17:44,570
these kind of zones of crystals that fit

00:17:42,590 --> 00:17:46,669
together and there's these kind of lines

00:17:44,570 --> 00:17:48,559
radiating out from their centers that

00:17:46,669 --> 00:17:50,720
almost look like exploding fireworks and

00:17:48,559 --> 00:17:54,559
they have this kind of colorful pinwheel

00:17:50,720 --> 00:17:57,110
effect going on I think this is really

00:17:54,559 --> 00:17:59,000
quite cool and very inspiring and so I

00:17:57,110 --> 00:18:00,710
would like to make you know some plotter

00:17:59,000 --> 00:18:04,220
art that's inspired by crystal

00:18:00,710 --> 00:18:06,890
microscopy like this and these zones

00:18:04,220 --> 00:18:09,740
really remind me of Voronoi diagrams a

00:18:06,890 --> 00:18:11,750
Voronoi diagram is a partition of the

00:18:09,740 --> 00:18:14,090
two-dimensional plane where you have a

00:18:11,750 --> 00:18:15,740
set of seed points and those seed points

00:18:14,090 --> 00:18:18,650
are the black dots in this image and

00:18:15,740 --> 00:18:21,049
then for every infinite point on the

00:18:18,650 --> 00:18:23,900
plane you color that point by which seed

00:18:21,049 --> 00:18:27,230
it's closest to and the result are these

00:18:23,900 --> 00:18:29,480
zones similar to our crystal photo and

00:18:27,230 --> 00:18:31,820
this makes sense because you can create

00:18:29,480 --> 00:18:34,159
a Voronoi diagram by doing kind of like

00:18:31,820 --> 00:18:36,559
a parallel flood-fill outwards from each

00:18:34,159 --> 00:18:38,900
of those seed points at the same time at

00:18:36,559 --> 00:18:41,000
the same rate and until they run into

00:18:38,900 --> 00:18:43,039
something else from another seed and

00:18:41,000 --> 00:18:44,840
this is kind of intuitively similar

00:18:43,039 --> 00:18:47,059
maybe to the way that a crystal is

00:18:44,840 --> 00:18:50,450
growing outwards until it hits another

00:18:47,059 --> 00:18:52,250
crystal and it can't grow anymore so we

00:18:50,450 --> 00:18:54,559
can use this understanding of Voronoi

00:18:52,250 --> 00:18:56,870
diagrams to actually design an algorithm

00:18:54,559 --> 00:19:00,220
for generating crystal inspired art and

00:18:56,870 --> 00:19:03,590
so what I came up with is this choose

00:19:00,220 --> 00:19:06,740
endpoints to be your seeds and then for

00:19:03,590 --> 00:19:09,260
many more n random points for each of

00:19:06,740 --> 00:19:12,440
those find which seed is closest to it

00:19:09,260 --> 00:19:13,820
and then draw a line to it and the hope

00:19:12,440 --> 00:19:15,440
is that these lines are going to create

00:19:13,820 --> 00:19:19,010
that sort of exploding fireworks

00:19:15,440 --> 00:19:21,169
aesthetic and so this simple algorithm

00:19:19,010 --> 00:19:23,419
actually works pretty well here it is

00:19:21,169 --> 00:19:26,090
plotted on black paper with white gel

00:19:23,419 --> 00:19:27,860
pen and already I can see the

00:19:26,090 --> 00:19:28,909
resemblance right I can see the zones I

00:19:27,860 --> 00:19:30,980
can see the fireworks

00:19:28,909 --> 00:19:32,570
the only difference from the algorithm

00:19:30,980 --> 00:19:33,120
that was just presented is that these

00:19:32,570 --> 00:19:35,010
lines

00:19:33,120 --> 00:19:36,660
going all the way to the seed there kind

00:19:35,010 --> 00:19:38,340
of stopping partway just to give it a

00:19:36,660 --> 00:19:42,570
little bit more breathing room and be a

00:19:38,340 --> 00:19:44,760
little less crowded and next I wanted to

00:19:42,570 --> 00:19:46,950
get more crystals of varying sizes you

00:19:44,760 --> 00:19:48,600
know smaller and big ones and so my idea

00:19:46,950 --> 00:19:50,700
for that was like what if I assigned

00:19:48,600 --> 00:19:54,330
each of these crystals or each of the

00:19:50,700 --> 00:19:56,480
seeds a gravity level and well it didn't

00:19:54,330 --> 00:19:58,890
really come out at all how I intended

00:19:56,480 --> 00:20:00,840
but you know I think it looks kind of

00:19:58,890 --> 00:20:04,200
cool it really doubled down on maybe the

00:20:00,840 --> 00:20:06,750
explosion style so you know ultimately

00:20:04,200 --> 00:20:09,120
it's a happy little accident

00:20:06,750 --> 00:20:11,460
at the other thing to note is that I

00:20:09,120 --> 00:20:13,740
introduced an attempt to copy the

00:20:11,460 --> 00:20:16,230
pinwheel effect and so what this is

00:20:13,740 --> 00:20:18,630
doing is it's not just drawing a line to

00:20:16,230 --> 00:20:21,390
the center regardless it looks at what

00:20:18,630 --> 00:20:23,670
is the angle from this point to the seed

00:20:21,390 --> 00:20:25,320
and then based on that angle it varies

00:20:23,670 --> 00:20:31,290
the length of the line to kind of create

00:20:25,320 --> 00:20:33,000
that two-tone pinwheel effect this is

00:20:31,290 --> 00:20:35,610
another variation where now we're only

00:20:33,000 --> 00:20:37,650
choosing points from within a circle and

00:20:35,610 --> 00:20:40,740
maybe it looks like a contaminated petri

00:20:37,650 --> 00:20:42,840
dish but I think maybe this is my

00:20:40,740 --> 00:20:46,470
favorite of the series so it's kind of

00:20:42,840 --> 00:20:48,660
cool and this final variation is using

00:20:46,470 --> 00:20:52,110
colors for that pinwheel effect directly

00:20:48,660 --> 00:20:54,630
and and so the AXI draw can only hold a

00:20:52,110 --> 00:20:56,610
single pen with a single color right and

00:20:54,630 --> 00:20:58,680
so to plot this I had to actually split

00:20:56,610 --> 00:21:01,620
out each of those colors into different

00:20:58,680 --> 00:21:04,050
SVG layers and then in between plotting

00:21:01,620 --> 00:21:06,270
each of those layers I manually switched

00:21:04,050 --> 00:21:09,090
out the Pens to switch the color and so

00:21:06,270 --> 00:21:13,380
this is I think three or four layers

00:21:09,090 --> 00:21:16,230
right here so is this kind of famous

00:21:13,380 --> 00:21:18,750
saying that good artists copy but great

00:21:16,230 --> 00:21:21,680
artists steal and since I'm really new

00:21:18,750 --> 00:21:24,960
at this I'm happy to aim for just good

00:21:21,680 --> 00:21:26,970
but I think the lesson here is to find

00:21:24,960 --> 00:21:29,220
inspiration in something and then copy

00:21:26,970 --> 00:21:31,320
it and you know maybe that something is

00:21:29,220 --> 00:21:33,450
somebody else's plot or art that you

00:21:31,320 --> 00:21:36,150
want to learn how it works or maybe it's

00:21:33,450 --> 00:21:38,430
some vintage 1960s plotter art that you

00:21:36,150 --> 00:21:40,260
want to bring into the modern era or

00:21:38,430 --> 00:21:42,630
maybe it's translating something that's

00:21:40,260 --> 00:21:45,960
completely unrelated to computers and to

00:21:42,630 --> 00:21:46,800
plotters into the plotter medium for

00:21:45,960 --> 00:21:49,260
example maybe

00:21:46,800 --> 00:21:50,820
the patterns of cracks on the glaze of

00:21:49,260 --> 00:21:53,400
some pottery piece that you really like

00:21:50,820 --> 00:21:55,470
or maybe it's the way that plants and

00:21:53,400 --> 00:22:00,540
flowers and leaves kind of grow at this

00:21:55,470 --> 00:22:02,280
in this mathematical way but I would be

00:22:00,540 --> 00:22:05,160
lying to you if I said that I only had a

00:22:02,280 --> 00:22:08,130
string of easy successes and it was

00:22:05,160 --> 00:22:10,260
smooth sailing the whole time so earlier

00:22:08,130 --> 00:22:12,120
I kind of presented the process as right

00:22:10,260 --> 00:22:14,610
arrest program and then you use that

00:22:12,120 --> 00:22:16,500
Russ program to generate an SVG and then

00:22:14,610 --> 00:22:20,250
you plot that SVG with the pen plotter

00:22:16,500 --> 00:22:22,530
and everything goes right every time the

00:22:20,250 --> 00:22:24,780
first time and of course that's grossly

00:22:22,530 --> 00:22:26,460
simplified I don't write perfect

00:22:24,780 --> 00:22:28,650
programs on the first try

00:22:26,460 --> 00:22:30,510
sometimes people say have rust or

00:22:28,650 --> 00:22:33,720
Haskell or languages with interesting

00:22:30,510 --> 00:22:36,060
type systems that if it compiles then it

00:22:33,720 --> 00:22:38,130
works unfortunately I haven't found that

00:22:36,060 --> 00:22:39,960
to be the case because I haven't figured

00:22:38,130 --> 00:22:41,340
out a way to encode my aesthetic taste

00:22:39,960 --> 00:22:43,440
into something that the borrow checker

00:22:41,340 --> 00:22:44,940
can encode can check a compile time

00:22:43,440 --> 00:22:46,740
right

00:22:44,940 --> 00:22:48,690
but like kind of more fundamentally

00:22:46,740 --> 00:22:50,640
often what I'm doing is I'm searching

00:22:48,690 --> 00:22:52,800
for emergence I'm looking for the

00:22:50,640 --> 00:22:55,350
unexpected I'm trying to be surprised

00:22:52,800 --> 00:22:57,000
and so I don't actually know what it is

00:22:55,350 --> 00:22:58,680
that I should be encoding into the type

00:22:57,000 --> 00:22:59,360
system yet because I haven't found it

00:22:58,680 --> 00:23:01,560
yet

00:22:59,360 --> 00:23:03,390
and so what's really happening is that

00:23:01,560 --> 00:23:05,610
there's this feedback loop where I

00:23:03,390 --> 00:23:07,710
generate some SPG's and then I look at

00:23:05,610 --> 00:23:09,990
the SVG's and I say oh this is cool oh

00:23:07,710 --> 00:23:11,820
that's not cool I go back and I tweak

00:23:09,990 --> 00:23:14,370
the program and I look at the new SVG's

00:23:11,820 --> 00:23:16,380
and I go oh yeah even more of that and

00:23:14,370 --> 00:23:20,370
you know back and forth right until I'm

00:23:16,380 --> 00:23:22,530
happy and then I plot it but the problem

00:23:20,370 --> 00:23:24,480
is that this feedback loop is really too

00:23:22,530 --> 00:23:26,310
slow and it involves a lot of manual

00:23:24,480 --> 00:23:28,320
work on my part right I'm editing

00:23:26,310 --> 00:23:30,210
sources and I say hey cargo please

00:23:28,320 --> 00:23:32,340
compile this program please run this

00:23:30,210 --> 00:23:35,070
program and then if there are no errors

00:23:32,340 --> 00:23:36,900
and it generated an SVG okay I have to

00:23:35,070 --> 00:23:38,940
alt-tab the Firefox and then I have to

00:23:36,900 --> 00:23:40,800
refresh that I actually see the new SVG

00:23:38,940 --> 00:23:42,390
and then I alt tab back to Emacs when

00:23:40,800 --> 00:23:44,460
I'm ready to make changes and I don't

00:23:42,390 --> 00:23:46,650
have timing data for how long like one

00:23:44,460 --> 00:23:48,270
iteration of this loop took but if I

00:23:46,650 --> 00:23:50,100
were to estimate I'd say I'd probably be

00:23:48,270 --> 00:23:51,810
at least like three or four whole

00:23:50,100 --> 00:23:53,520
seconds before I was ready to kind of

00:23:51,810 --> 00:23:57,059
like respond to anything and

00:23:53,520 --> 00:23:58,860
and kind of do the next loop so luckily

00:23:57,059 --> 00:24:00,900
this nice person Benjamin wrote an

00:23:58,860 --> 00:24:02,280
article about what kind of tooling and

00:24:00,900 --> 00:24:04,559
infrastructure you might want when

00:24:02,280 --> 00:24:05,850
you're doing generative art and lays out

00:24:04,559 --> 00:24:07,860
you know how to solve a bunch of

00:24:05,850 --> 00:24:11,490
problems including this kind of instant

00:24:07,860 --> 00:24:14,040
feedback problem and his advice is use a

00:24:11,490 --> 00:24:15,890
file watcher and whenever you change any

00:24:14,040 --> 00:24:18,570
source file in your project

00:24:15,890 --> 00:24:20,429
automatically recompile the project

00:24:18,570 --> 00:24:23,130
automatically rerun it and generate a

00:24:20,429 --> 00:24:25,740
new image and if it compiled okay and it

00:24:23,130 --> 00:24:27,240
generated a new SVG image okay then

00:24:25,740 --> 00:24:29,340
actually save that image in your

00:24:27,240 --> 00:24:31,770
repository and make a git commit like

00:24:29,340 --> 00:24:33,540
just automatically and so this way you

00:24:31,770 --> 00:24:36,030
never lose any image that you will ever

00:24:33,540 --> 00:24:38,100
generate and you have exactly the code

00:24:36,030 --> 00:24:40,380
that generated that image so maybe

00:24:38,100 --> 00:24:42,330
you're riffing on one idea right now you

00:24:40,380 --> 00:24:43,950
can always go back at a later time and

00:24:42,330 --> 00:24:45,900
riff on a completely different idea and

00:24:43,950 --> 00:24:51,500
this is like exactly the kind of thing

00:24:45,900 --> 00:24:53,880
that you cannot do with pottery so I

00:24:51,500 --> 00:24:56,880
implemented a command line tool for the

00:24:53,880 --> 00:24:58,260
farc framework and I really enjoy you

00:24:56,880 --> 00:25:00,600
know saving all of these images and

00:24:58,260 --> 00:25:03,720
stuff and it did speed up my feedback

00:25:00,600 --> 00:25:05,610
loop a little bit but it really didn't

00:25:03,720 --> 00:25:07,500
solve the problem this doesn't look that

00:25:05,610 --> 00:25:09,780
different from the last version with a

00:25:07,500 --> 00:25:11,820
feedback loop and so it's like yeah I'm

00:25:09,780 --> 00:25:14,010
not manually kicking off compiles and

00:25:11,820 --> 00:25:15,780
I'm not manually running the program but

00:25:14,010 --> 00:25:17,520
I am still waiting on those compiles to

00:25:15,780 --> 00:25:19,470
finish in this language that's kind of

00:25:17,520 --> 00:25:21,900
infamous for not having great compiled

00:25:19,470 --> 00:25:23,550
time straight and I'm still doing all

00:25:21,900 --> 00:25:24,990
this context switching with this alt

00:25:23,550 --> 00:25:29,130
tabbing back and forth and I'm still

00:25:24,990 --> 00:25:31,260
refreshing manually so I actually wanted

00:25:29,130 --> 00:25:33,690
to dig into like what kinds of commits

00:25:31,260 --> 00:25:35,850
am I actually making and so I looked at

00:25:33,690 --> 00:25:37,260
a random sample of commits from one of

00:25:35,850 --> 00:25:39,240
my projects that was using the file

00:25:37,260 --> 00:25:41,190
watcher tool I went through each of

00:25:39,240 --> 00:25:43,320
those commits and I categorized what

00:25:41,190 --> 00:25:46,470
kind of change was that making and it

00:25:43,320 --> 00:25:48,510
fell into just three buckets algorithmic

00:25:46,470 --> 00:25:50,730
changes are you know sort of the beefier

00:25:48,510 --> 00:25:53,520
changes things that are changing loops

00:25:50,730 --> 00:25:56,790
or introducing if else's and these sorts

00:25:53,520 --> 00:25:58,740
of things constant changes are me saying

00:25:56,790 --> 00:26:00,809
I'm using this normal distribution that

00:25:58,740 --> 00:26:03,240
I'm sampling random numbers from what if

00:26:00,809 --> 00:26:05,530
the standard deviation was 0.5 instead

00:26:03,240 --> 00:26:08,470
of 0.6 how would that affect the

00:26:05,530 --> 00:26:12,070
image and formatting changes are me

00:26:08,470 --> 00:26:14,260
running rust format essentially and you

00:26:12,070 --> 00:26:15,610
know I kind of knew deep down but to to

00:26:14,260 --> 00:26:17,260
have empirical evidence that I'm

00:26:15,610 --> 00:26:19,300
spending the majority of my time like

00:26:17,260 --> 00:26:22,210
sixty percent of my time waiting on

00:26:19,300 --> 00:26:25,390
compiles to change five into seven like

00:26:22,210 --> 00:26:27,340
it kind of blows my mind so what I

00:26:25,390 --> 00:26:29,860
really wanted was some way to have

00:26:27,340 --> 00:26:32,140
constant values in my program that I

00:26:29,860 --> 00:26:34,240
could actually change in between runs of

00:26:32,140 --> 00:26:37,660
the program without recompiling the

00:26:34,240 --> 00:26:40,360
program so I invented this brand new

00:26:37,660 --> 00:26:42,550
thing which I call user constants you

00:26:40,360 --> 00:26:49,150
might know them by the name environment

00:26:42,550 --> 00:26:50,590
variables but user constants aren't just

00:26:49,150 --> 00:26:51,940
environment variables there's kind of

00:26:50,590 --> 00:26:53,410
some infrastructure that goes along with

00:26:51,940 --> 00:26:55,480
it to kind of make the whole process

00:26:53,410 --> 00:26:59,140
really smooth and fast and so that

00:26:55,480 --> 00:27:02,410
starts with a local server and the local

00:26:59,140 --> 00:27:04,930
server serves up a web UI and every time

00:27:02,410 --> 00:27:08,380
the generative program uses a new user

00:27:04,930 --> 00:27:10,570
constant it creates a form input

00:27:08,380 --> 00:27:13,870
dynamically in the web UI which is kind

00:27:10,570 --> 00:27:15,400
of what's on the left here and you can

00:27:13,870 --> 00:27:17,260
actually go into that form input and

00:27:15,400 --> 00:27:19,180
tweak the constant value and this is

00:27:17,260 --> 00:27:21,730
gonna create a post request from the web

00:27:19,180 --> 00:27:23,170
UI to the local server the local server

00:27:21,730 --> 00:27:24,490
is going to update the environment

00:27:23,170 --> 00:27:27,370
variable it's going to rerun the program

00:27:24,490 --> 00:27:28,810
to generate a new SVG and then the local

00:27:27,370 --> 00:27:31,480
server is going to send that new SVG

00:27:28,810 --> 00:27:35,200
back to the web UI where the preview is

00:27:31,480 --> 00:27:37,510
refreshed automatically additionally I

00:27:35,200 --> 00:27:40,990
discovered this simple effective thing

00:27:37,510 --> 00:27:43,720
that some people call window management

00:27:40,990 --> 00:27:46,240
yeah so now I'm actually running a split

00:27:43,720 --> 00:27:48,970
screen with Emacs on one side and the

00:27:46,240 --> 00:27:50,529
web UI on the other side and so I don't

00:27:48,970 --> 00:27:51,909
need to do all this context switching

00:27:50,529 --> 00:27:55,600
anymore because I just kind of have

00:27:51,909 --> 00:27:58,000
everything at my fingertips now and and

00:27:55,600 --> 00:28:00,130
so for constant tweaking which were 60%

00:27:58,000 --> 00:28:02,320
of my changes right the critical path

00:28:00,130 --> 00:28:04,480
for my feedback loop is now just edit

00:28:02,320 --> 00:28:06,340
the constant and then essentially look

00:28:04,480 --> 00:28:08,470
at what the images that's updated and

00:28:06,340 --> 00:28:10,539
like technically yes I do need to rerun

00:28:08,470 --> 00:28:13,120
the program but it happens automatically

00:28:10,539 --> 00:28:14,559
for me and I'm not waiting around for

00:28:13,120 --> 00:28:16,000
the program to finish running all right

00:28:14,559 --> 00:28:17,409
this is rust unless we were doing

00:28:16,000 --> 00:28:19,750
something you know pretty bad it should

00:28:17,409 --> 00:28:21,850
be pretty quick and so the previous

00:28:19,750 --> 00:28:23,559
screenshot it says it took less than 10

00:28:21,850 --> 00:28:25,360
milliseconds to generate that image

00:28:23,559 --> 00:28:28,330
which is really just barely human

00:28:25,360 --> 00:28:32,260
perceptible so finally my feedback loop

00:28:28,330 --> 00:28:35,049
is near instantaneous and as a results

00:28:32,260 --> 00:28:37,240
I'm able to explore more ideas faster

00:28:35,049 --> 00:28:39,220
than I previously could and that's

00:28:37,240 --> 00:28:41,620
helping me make new pieces that I'm

00:28:39,220 --> 00:28:45,220
increasingly happy with such as this one

00:28:41,620 --> 00:28:47,919
and at the end of the day I have a hobby

00:28:45,220 --> 00:28:49,600
that is not work something that's just

00:28:47,919 --> 00:28:52,059
for me and I'm having fun making

00:28:49,600 --> 00:28:53,740
algorithmic art with rust and bringing

00:28:52,059 --> 00:28:54,159
it into the physical world with a pin

00:28:53,740 --> 00:28:58,120
plotter

00:28:54,159 --> 00:29:00,130
I hope my story has inspired some of you

00:28:58,120 --> 00:29:02,590
to try your hand at plotter art or

00:29:00,130 --> 00:29:05,919
generative art in general or maybe even

00:29:02,590 --> 00:29:07,179
pick up pottery but I think a lot of

00:29:05,919 --> 00:29:08,890
these takeaways are kind of generally

00:29:07,179 --> 00:29:10,690
applicable not just to artistic

00:29:08,890 --> 00:29:13,630
programming but professional programming

00:29:10,690 --> 00:29:15,039
and maybe even other domains as well you

00:29:13,630 --> 00:29:17,230
know can you define constraints for

00:29:15,039 --> 00:29:19,480
yourself to make a problem smaller or

00:29:17,230 --> 00:29:22,000
easier to solve can you break something

00:29:19,480 --> 00:29:24,190
down into pieces if you want to learn

00:29:22,000 --> 00:29:26,049
something try copying it if you want to

00:29:24,190 --> 00:29:29,559
bring fresh new ideas into your domain

00:29:26,049 --> 00:29:32,110
copy something from another domain and

00:29:29,559 --> 00:29:33,370
if you want to boost your efficiency you

00:29:32,110 --> 00:29:35,559
should treat your iteration time

00:29:33,370 --> 00:29:37,539
actually as an optimization problem and

00:29:35,559 --> 00:29:39,010
you should profile and gather empirical

00:29:37,539 --> 00:29:40,450
evidence about what you're doing and

00:29:39,010 --> 00:29:41,710
what you're waiting on and then you

00:29:40,450 --> 00:29:43,840
should customize your tools or even

00:29:41,710 --> 00:29:46,929
build your own custom tooling to make

00:29:43,840 --> 00:29:49,090
that faster here are a few resources

00:29:46,929 --> 00:29:50,770
that I found helpful that you can peruse

00:29:49,090 --> 00:29:53,090
on your own time if you want to get more

00:29:50,770 --> 00:29:55,040
into generative art and plotter art

00:29:53,090 --> 00:29:57,430
and that's everything I have thank you

00:29:55,040 --> 00:29:57,430
very much

00:30:00,080 --> 00:30:13,380

YouTube URL: https://www.youtube.com/watch?v=Ho3xr4b60Zg


