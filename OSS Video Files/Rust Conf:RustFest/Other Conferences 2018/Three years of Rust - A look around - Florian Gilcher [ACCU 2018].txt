Title: Three years of Rust - A look around - Florian Gilcher [ACCU 2018]
Publication date: 2018-04-24
Playlist: Other Conferences 2018
Description: 
	APOLOGIES FOR THE POOR AUDIO ON THIS TALK - SADLY A CABLE WAS LEFT UNTERMINATED AND THIS CAUSED A LOT OF DISTORTION AND FUZZ IN THE AUDIO RECORDING. WE HAVE TRIED TO CLEAN IT UP AS BEST WE CAN. 

In only three years, Rust came from a long way from being an interesting new research language to a productive language used by industry players such as Dropbox, Facebook and others.

Shortly before its third birthday, I’d like to take the chance to give an overview of the language. What do we have, what’s missing, what’s coming and what changed in the last three years?

A short introduction into the hallmark features of the language is included.

This talk will give a useful overview both to curious non-practitioners as well as seasoned Rustaceans.
Captions: 
	00:00:01,340 --> 00:00:09,480
[Music]

00:00:10,470 --> 00:00:20,770
so hello everyone thank you for being in

00:00:15,760 --> 00:00:22,029
this talk and visiting it just shortly

00:00:20,770 --> 00:00:25,900
before I come to the talk a little bit

00:00:22,029 --> 00:00:31,710
about me I'm Fran hi

00:00:25,900 --> 00:00:33,910
I used to be very active in the Ruby and

00:00:31,710 --> 00:00:36,600
elasticsearch seen a couple of years ago

00:00:33,910 --> 00:00:39,730
maybe someone has my name from that I'm

00:00:36,600 --> 00:00:41,800
mainly known as doing event organization

00:00:39,730 --> 00:00:47,379
and community work less than actual

00:00:41,800 --> 00:00:48,760
programming project work I spent my time

00:00:47,379 --> 00:00:50,980
professionally as a rust and

00:00:48,760 --> 00:00:55,329
elasticsearch trainer running my own

00:00:50,980 --> 00:00:59,140
little company I organized a conference

00:00:55,329 --> 00:01:01,210
called West fest and I'm part of the

00:00:59,140 --> 00:01:03,429
Ross project I'm going to talk about in

00:01:01,210 --> 00:01:06,430
the community team and since recently a

00:01:03,429 --> 00:01:07,659
month ago or so in the leadership of the

00:01:06,430 --> 00:01:09,490
events team the best programming

00:01:07,659 --> 00:01:12,670
language has an events team and I'm

00:01:09,490 --> 00:01:17,040
going to come into that as hobby I shoot

00:01:12,670 --> 00:01:19,720
arrows at stuff mind during the QA so

00:01:17,040 --> 00:01:26,410
I'm in management of a programming

00:01:19,720 --> 00:01:28,500
language whatever that meets the time of

00:01:26,410 --> 00:01:31,600
the talk is three years of rust which

00:01:28,500 --> 00:01:33,070
kind of indicates that I'd like to talk

00:01:31,600 --> 00:01:36,460
about the project a little more than

00:01:33,070 --> 00:01:39,840
about the actual language and about the

00:01:36,460 --> 00:01:43,270
our experience over the last few years

00:01:39,840 --> 00:01:45,580
the reason for that is that I found that

00:01:43,270 --> 00:01:48,970
the impression of such projects for

00:01:45,580 --> 00:01:50,680
people is extremely localized to the

00:01:48,970 --> 00:01:52,510
angle they are approaching the project

00:01:50,680 --> 00:01:54,580
and often doesn't tell the whole story

00:01:52,510 --> 00:01:56,830
to the point where I was for example

00:01:54,580 --> 00:02:01,750
recently at a conference as an exhibitor

00:01:56,830 --> 00:02:03,250
so we were there with a with a small

00:02:01,750 --> 00:02:07,060
booth and someone approaches and was

00:02:03,250 --> 00:02:11,080
like oh wait this language is an actual

00:02:07,060 --> 00:02:12,760
production use like yes since like three

00:02:11,080 --> 00:02:17,140
and a half years or something like this

00:02:12,760 --> 00:02:18,850
and these kinds of experience I have

00:02:17,140 --> 00:02:20,830
quite regularly that people don't

00:02:18,850 --> 00:02:22,440
actually have a model of the products

00:02:20,830 --> 00:02:29,220
they're interacting with and that's

00:02:22,440 --> 00:02:31,110
I said yep you are using keynote no but

00:02:29,220 --> 00:02:33,620
as long as it registers as a mouse

00:02:31,110 --> 00:02:33,620
that's fine

00:02:48,220 --> 00:02:54,230
it was okay but before I'm talking about

00:02:52,220 --> 00:02:55,490
the project for those people that have

00:02:54,230 --> 00:02:57,200
never heard about the language I would

00:02:55,490 --> 00:02:59,800
actually like to introduce a language

00:02:57,200 --> 00:03:02,690
who here has ever had a look at rust

00:02:59,800 --> 00:03:05,090
okay quite a couple of people but still

00:03:02,690 --> 00:03:06,530
quite some that I wear any to give a

00:03:05,090 --> 00:03:08,450
little bit of an introduction so what is

00:03:06,530 --> 00:03:10,190
rust rust isn't used to since

00:03:08,450 --> 00:03:13,250
programming language that powers and was

00:03:10,190 --> 00:03:16,370
developed along with several a new

00:03:13,250 --> 00:03:18,860
browser engine by Mozilla research servo

00:03:16,370 --> 00:03:21,470
is explicitly a research engine so some

00:03:18,860 --> 00:03:23,990
people believe servo is the next Firefox

00:03:21,470 --> 00:03:26,840
it is not it is not intended to be and

00:03:23,990 --> 00:03:27,950
it will never built be its developers

00:03:26,840 --> 00:03:31,700
around the community and the first

00:03:27,950 --> 00:03:35,959
release was in on the 15th of May 2015

00:03:31,700 --> 00:03:36,740
so roughly three years from now next

00:03:35,959 --> 00:03:38,540
month's third birthday

00:03:36,740 --> 00:03:41,000
it is therefore providing an alternative

00:03:38,540 --> 00:03:45,220
to seem to C++ but also to higher-level

00:03:41,000 --> 00:03:49,519
languages and its credo is safe

00:03:45,220 --> 00:03:52,519
concurrent fast it's generally perceived

00:03:49,519 --> 00:03:56,570
that safety especially memory safety

00:03:52,519 --> 00:03:59,239
comes at a longtime cost that's why the

00:03:56,570 --> 00:04:05,390
credo for us is actually safe concurrent

00:03:59,239 --> 00:04:08,120
fast big three the core features of the

00:04:05,390 --> 00:04:11,120
language are it has a static type system

00:04:08,120 --> 00:04:13,940
with local type interference it has an

00:04:11,120 --> 00:04:15,590
explicit notion of mutability so if to

00:04:13,940 --> 00:04:17,150
select if something is mutable or not

00:04:15,590 --> 00:04:19,820
and the language knows about this and

00:04:17,150 --> 00:04:21,019
makes conclusions using that this same

00:04:19,820 --> 00:04:23,060
thing that we call zero costs

00:04:21,019 --> 00:04:24,919
abstractions which means it has higher

00:04:23,060 --> 00:04:26,870
level extractions that may seem like a

00:04:24,919 --> 00:04:29,120
higher level language but when we have

00:04:26,870 --> 00:04:32,180
these we make sure that they compile

00:04:29,120 --> 00:04:35,320
down to something which is basically

00:04:32,180 --> 00:04:37,910
equivalent to your best handwritten code

00:04:35,320 --> 00:04:39,890
it has run them at one time independent

00:04:37,910 --> 00:04:44,060
concurrency safety I'll talk about that

00:04:39,890 --> 00:04:45,860
for very short while in a second hours

00:04:44,060 --> 00:04:47,690
of values so there's no exception

00:04:45,860 --> 00:04:51,229
handling you pass around any kind of

00:04:47,690 --> 00:04:52,090
error as a normal value there's no no to

00:04:51,229 --> 00:04:55,060
avoid any kind

00:04:52,090 --> 00:04:56,980
problems was known as it has something

00:04:55,060 --> 00:04:59,410
that would usually refer to a static

00:04:56,980 --> 00:05:01,150
automatic memory management so it feels

00:04:59,410 --> 00:05:02,710
like the memory management is automatic

00:05:01,150 --> 00:05:04,210
but it's actually all happening at

00:05:02,710 --> 00:05:08,169
compile time which brings me back to

00:05:04,210 --> 00:05:10,810
this a that the perception of memory

00:05:08,169 --> 00:05:12,250
safety is that it has a one-time cost we

00:05:10,810 --> 00:05:14,220
don't use a garbage collector or

00:05:12,250 --> 00:05:16,750
anything like that for that it's

00:05:14,220 --> 00:05:20,560
completely completely through static

00:05:16,750 --> 00:05:24,010
analysis so what does it look like this

00:05:20,560 --> 00:05:26,740
is a piece of rust that opens the

00:05:24,010 --> 00:05:31,360
temporary directory opens a file within

00:05:26,740 --> 00:05:33,310
it and if it can't open it it actually

00:05:31,360 --> 00:05:37,030
crashes in a safe fashion it just aborts

00:05:33,310 --> 00:05:39,340
the program in a controlled fashion so

00:05:37,030 --> 00:05:42,490
the language feels a little bit like C

00:05:39,340 --> 00:05:47,889
from the general syntax so it has curly

00:05:42,490 --> 00:05:50,620
braces and all of that it also has a

00:05:47,889 --> 00:05:52,990
notion of aggravate at the break data

00:05:50,620 --> 00:05:55,030
types like for example functional

00:05:52,990 --> 00:05:58,360
languages have so for example if you

00:05:55,030 --> 00:06:01,180
open this temp tear this is a folio

00:05:58,360 --> 00:06:04,510
operation so after that you would have

00:06:01,180 --> 00:06:06,400
to check has it worked or not using this

00:06:04,510 --> 00:06:09,190
match syntax matching between the

00:06:06,400 --> 00:06:11,289
options okay and error when there was

00:06:09,190 --> 00:06:14,560
okay you would get the actual directory

00:06:11,289 --> 00:06:19,090
handle the same goes for creating that

00:06:14,560 --> 00:06:21,250
file which might fail or not what I mean

00:06:19,090 --> 00:06:24,280
by this static automatic memory

00:06:21,250 --> 00:06:27,340
management once all of these values drop

00:06:24,280 --> 00:06:29,830
out of scope they will be removed for

00:06:27,340 --> 00:06:31,870
memory automatically for you so the

00:06:29,830 --> 00:06:34,539
scope is the time that some some of your

00:06:31,870 --> 00:06:39,340
data is alive and it's fundamental to

00:06:34,539 --> 00:06:42,610
how the language works the first place

00:06:39,340 --> 00:06:44,919
concept that language is based on is any

00:06:42,610 --> 00:06:48,580
kind of mutability so here's a small

00:06:44,919 --> 00:06:50,620
example I have a data structure that

00:06:48,580 --> 00:06:53,470
it's in itself holds a data structure

00:06:50,620 --> 00:06:56,830
again in a data which in in it has a

00:06:53,470 --> 00:07:00,669
number I can construct that this is the

00:06:56,830 --> 00:07:01,610
construction syntax assigned to it the

00:07:00,669 --> 00:07:03,560
compiler will complain

00:07:01,610 --> 00:07:06,349
because it says cannot assign two

00:07:03,560 --> 00:07:08,300
immutable fealty d dot another 12 the

00:07:06,349 --> 00:07:11,539
interesting thing here is it's the

00:07:08,300 --> 00:07:13,580
binding that's immutable so D because D

00:07:11,539 --> 00:07:15,199
is not mutable I cannot mutate anything

00:07:13,580 --> 00:07:17,509
that's inside so it's not a property of

00:07:15,199 --> 00:07:20,060
the structures it's a property of the

00:07:17,509 --> 00:07:21,800
location where I use it here I'm saying

00:07:20,060 --> 00:07:25,879
I want to have immutable data I could

00:07:21,800 --> 00:07:28,310
have immutable data somewhere else and I

00:07:25,879 --> 00:07:31,909
introduced that by acts accident by

00:07:28,310 --> 00:07:36,020
actually telling the compiler this is

00:07:31,909 --> 00:07:38,060
mutable and now I can change it the

00:07:36,020 --> 00:07:40,279
memory representation of this for anyone

00:07:38,060 --> 00:07:42,289
who has ever used C is kind of like

00:07:40,279 --> 00:07:44,360
natural structures and structures just

00:07:42,289 --> 00:07:46,879
lead to a packed memory representation

00:07:44,360 --> 00:07:48,710
so this ends up being an integer in

00:07:46,879 --> 00:07:50,590
memory through a bit of semantic

00:07:48,710 --> 00:07:54,860
indirection

00:07:50,590 --> 00:07:56,539
on top of that it has two other base

00:07:54,860 --> 00:07:57,800
concepts and this is ownership and

00:07:56,539 --> 00:08:01,729
borrowing and these are the most

00:07:57,800 --> 00:08:03,500
important parts of it just sometimes at

00:08:01,729 --> 00:08:06,949
the beginning people have said rust is

00:08:03,500 --> 00:08:10,370
hard to learn and one of the problems of

00:08:06,949 --> 00:08:12,529
it is ownership like talking about

00:08:10,370 --> 00:08:14,659
ownership of data is something that

00:08:12,529 --> 00:08:16,009
people are informally used to but not

00:08:14,659 --> 00:08:17,449
formally used to because there's no

00:08:16,009 --> 00:08:20,629
other programming language that we D

00:08:17,449 --> 00:08:25,879
does it that way so the very first basic

00:08:20,629 --> 00:08:27,979
concept you hit in rust is new so it

00:08:25,879 --> 00:08:30,889
takes a while to finally click and how

00:08:27,979 --> 00:08:32,810
it's important and the way that works is

00:08:30,889 --> 00:08:35,060
every piece of data and rust is uniquely

00:08:32,810 --> 00:08:36,860
owned and this for example makes that

00:08:35,060 --> 00:08:38,599
memory management work because you know

00:08:36,860 --> 00:08:41,300
when you know that it's only uniquely

00:08:38,599 --> 00:08:43,329
owned when it drops out of scope it's

00:08:41,300 --> 00:08:45,500
gone it's basically reference counting

00:08:43,329 --> 00:08:48,500
but you can only count to one

00:08:45,500 --> 00:08:50,180
and that statically solvable

00:08:48,500 --> 00:08:53,209
that's the compiler can do that for you

00:08:50,180 --> 00:08:55,190
ownership can be passed and when owned

00:08:53,209 --> 00:08:58,370
data reaches the end of a scope it is

00:08:55,190 --> 00:09:01,190
destructed so here for example again I'm

00:08:58,370 --> 00:09:03,440
opening a file and I'm taking it and I'm

00:09:01,190 --> 00:09:06,500
writing to that file passing it over to

00:09:03,440 --> 00:09:08,510
take and write to file by value to

00:09:06,500 --> 00:09:11,150
another function and a write to the file

00:09:08,510 --> 00:09:15,980
hello aku conf

00:09:11,150 --> 00:09:19,820
the researchers explained say at the end

00:09:15,980 --> 00:09:22,400
of taken right to file the file is

00:09:19,820 --> 00:09:23,779
destructor the file handle is closed the

00:09:22,400 --> 00:09:26,000
interesting thing is the compiler knows

00:09:23,779 --> 00:09:28,779
about this so if you try to call take

00:09:26,000 --> 00:09:34,720
and write file again on the same file

00:09:28,779 --> 00:09:38,210
this will be a compilation error now

00:09:34,720 --> 00:09:40,700
this is is a solid base but it isn't

00:09:38,210 --> 00:09:42,440
very like sometimes you'd like to pass

00:09:40,700 --> 00:09:44,180
things around and actually not give up

00:09:42,440 --> 00:09:49,010
ownership you would like to call a

00:09:44,180 --> 00:09:51,260
function twice on file and this gives

00:09:49,010 --> 00:09:54,560
you an additional piece here which is

00:09:51,260 --> 00:09:57,380
borrowing you can borrow a way to add

00:09:54,560 --> 00:10:01,700
the access to one of these pieces of

00:09:57,380 --> 00:10:06,290
data mutable or immutable and you can do

00:10:01,700 --> 00:10:09,260
that mutable once or multiple times

00:10:06,290 --> 00:10:11,270
immutably this is exclusive so whenever

00:10:09,260 --> 00:10:12,830
you borrow something away buta bleah

00:10:11,270 --> 00:10:15,320
you're not allowed to get a mutable

00:10:12,830 --> 00:10:20,089
access to it at the same time and the

00:10:15,320 --> 00:10:21,620
other way around so speaking more on a

00:10:20,089 --> 00:10:25,120
systems programming language language

00:10:21,620 --> 00:10:33,560
rust forbids aliasing mutable pointers

00:10:25,120 --> 00:10:35,330
strictly so the same here I'm opening a

00:10:33,560 --> 00:10:39,860
file I'm writing through the file twice

00:10:35,330 --> 00:10:42,650
and the only difference is that I'm

00:10:39,860 --> 00:10:46,010
actually using different syntax here I'm

00:10:42,650 --> 00:10:48,860
using an ampersand to indicate a borrow

00:10:46,010 --> 00:10:51,230
or if you're coming from the C++ world

00:10:48,860 --> 00:10:53,709
this is basically a reference and the

00:10:51,230 --> 00:10:56,990
moot again describes this is immutable

00:10:53,709 --> 00:10:58,970
one and not an immutable one following

00:10:56,990 --> 00:11:03,740
different rules the compiler takes that

00:10:58,970 --> 00:11:05,990
into account basically the problem we're

00:11:03,740 --> 00:11:07,760
dealing here with is shared mutable

00:11:05,990 --> 00:11:09,500
state the problem with the state is not

00:11:07,760 --> 00:11:13,010
that mutable state is evil shared

00:11:09,500 --> 00:11:18,110
mutable state as a problem and rust

00:11:13,010 --> 00:11:20,490
source shared mutable state in its base

00:11:18,110 --> 00:11:23,520
memory model

00:11:20,490 --> 00:11:25,850
and this goes transitively so for

00:11:23,520 --> 00:11:29,190
example if I have a I have a vector

00:11:25,850 --> 00:11:33,300
containing three elements and I access

00:11:29,190 --> 00:11:36,030
one of the elements immutably and then

00:11:33,300 --> 00:11:39,000
while this is active I'm trying to write

00:11:36,030 --> 00:11:42,000
to it the compiler will actually error

00:11:39,000 --> 00:11:44,790
and say you cannot borrow this vector is

00:11:42,000 --> 00:11:47,390
mutable to actually mutate it while

00:11:44,790 --> 00:11:50,310
there's still an immutable borrow active

00:11:47,390 --> 00:11:52,320
classic problem if I mutate a vector it

00:11:50,310 --> 00:11:54,690
could actually be moved in memory and

00:11:52,320 --> 00:11:59,760
the first pointer might end up being

00:11:54,690 --> 00:12:02,040
invalid during that time so rest checks

00:11:59,760 --> 00:12:07,140
validity of all references at compile

00:12:02,040 --> 00:12:08,880
time it even goes as far as checking in

00:12:07,140 --> 00:12:11,100
a references for example if I have a

00:12:08,880 --> 00:12:14,510
structure which holds an inner reference

00:12:11,100 --> 00:12:20,580
to an integer and I try to return it and

00:12:14,510 --> 00:12:22,980
in this case ownership says because it's

00:12:20,580 --> 00:12:26,430
introduced within because number is

00:12:22,980 --> 00:12:28,710
introduced within returned reference but

00:12:26,430 --> 00:12:32,310
you're trying to give away a reference

00:12:28,710 --> 00:12:33,480
to it through that data wrapper it will

00:12:32,310 --> 00:12:35,400
actually know about the binding

00:12:33,480 --> 00:12:37,470
relationship between the two and will

00:12:35,400 --> 00:12:40,890
know that the inner reference will end

00:12:37,470 --> 00:12:43,530
up being a dangling one this is

00:12:40,890 --> 00:12:45,720
obviously a trivial example but in

00:12:43,530 --> 00:12:49,920
largest in larger systems this proof is

00:12:45,720 --> 00:12:55,260
total so our references in safe rust are

00:12:49,920 --> 00:12:57,270
always valid the compiler a message here

00:12:55,260 --> 00:13:00,240
will be the number doesn't live long

00:12:57,270 --> 00:13:02,940
enough and will actually tell me the

00:13:00,240 --> 00:13:04,260
barrel value only lives until here the

00:13:02,940 --> 00:13:06,780
most compiler is quite known for giving

00:13:04,260 --> 00:13:09,830
good error messages we have two

00:13:06,780 --> 00:13:12,390
engineers that regulated welcome that

00:13:09,830 --> 00:13:14,700
almost function is not only signal data

00:13:12,390 --> 00:13:16,140
types but also mutability ownership and

00:13:14,700 --> 00:13:18,720
interconnections between input and

00:13:16,140 --> 00:13:20,370
output types this is quite rich if you

00:13:18,720 --> 00:13:22,350
like working with functions but would

00:13:20,370 --> 00:13:23,970
like to have a little more information

00:13:22,350 --> 00:13:27,540
in your function signatures rust is

00:13:23,970 --> 00:13:30,090
probably in the language we for you and

00:13:27,540 --> 00:13:31,590
the interesting thing here is these

00:13:30,090 --> 00:13:34,800
properties hold

00:13:31,590 --> 00:13:38,250
and can be checked on large code bases

00:13:34,800 --> 00:13:39,600
of basically any size this is one of the

00:13:38,250 --> 00:13:42,150
parts where it shows that the language

00:13:39,600 --> 00:13:44,430
comes out of an engineering culture that

00:13:42,150 --> 00:13:48,600
owns one of the largest C++ code bases

00:13:44,430 --> 00:13:50,280
in the world so Mozilla because

00:13:48,600 --> 00:13:53,640
sometimes the language feels a bit oh

00:13:50,280 --> 00:13:58,290
this is pretty pedantic for a 2/3 a line

00:13:53,640 --> 00:14:00,000
line piece of code it becomes very nice

00:13:58,290 --> 00:14:01,650
when you're working on a larger codebase

00:14:00,000 --> 00:14:04,440
that all of these guarantees hold

00:14:01,650 --> 00:14:06,660
anywhere in your code so you can throw

00:14:04,440 --> 00:14:09,270
in a mutable pointer to a huge library

00:14:06,660 --> 00:14:16,320
and you can be sure that the data at the

00:14:09,270 --> 00:14:18,870
end is not mutated at all this provides

00:14:16,320 --> 00:14:20,220
a set of abstractions on top of that it

00:14:18,870 --> 00:14:22,740
has high-level abstractions through

00:14:20,220 --> 00:14:24,600
generics and traits similar to C++

00:14:22,740 --> 00:14:28,050
templates or Java generics which I don't

00:14:24,600 --> 00:14:31,080
want to go into detail here the syntax

00:14:28,050 --> 00:14:32,820
is pretty usual so you have angle

00:14:31,080 --> 00:14:35,160
brackets for introducing generics and

00:14:32,820 --> 00:14:40,100
colons for introducing bounds on these

00:14:35,160 --> 00:14:40,100
generics it's all rather standard

00:14:41,060 --> 00:14:47,420
there's another feature in the language

00:14:43,620 --> 00:14:50,040
that is pretty often not mentioned or

00:14:47,420 --> 00:14:52,860
more mentioned as a side show but it's

00:14:50,040 --> 00:14:57,660
actually essential it's what we call

00:14:52,860 --> 00:15:01,580
concurrency without fear and what's

00:14:57,660 --> 00:15:05,370
behind it is the language has an idea of

00:15:01,580 --> 00:15:08,460
values traveling between concurrent

00:15:05,370 --> 00:15:10,350
primitives so for example I have a

00:15:08,460 --> 00:15:11,990
counter here and the counter is

00:15:10,350 --> 00:15:16,290
initialized with a field and an integer

00:15:11,990 --> 00:15:18,030
that it's just set to zero and then I'm

00:15:16,290 --> 00:15:20,730
trying to increment that counter but in

00:15:18,030 --> 00:15:23,910
a threaded fashion and I'm trying to

00:15:20,730 --> 00:15:27,180
pass a mutable reference over to to

00:15:23,910 --> 00:15:30,030
these spawn threads and the compiler

00:15:27,180 --> 00:15:32,310
will actually say you're capturing a

00:15:30,030 --> 00:15:34,410
moved value you're trying to get hold of

00:15:32,310 --> 00:15:36,480
a value from the outside and you're

00:15:34,410 --> 00:15:38,550
trying to increment it the program is

00:15:36,480 --> 00:15:40,170
because I'm capturing a value of the

00:15:38,550 --> 00:15:43,680
moment I stopped the thread I'm passing

00:15:40,170 --> 00:15:45,420
on ownership I can only do that once I'm

00:15:43,680 --> 00:15:48,960
trying to start three threads

00:15:45,420 --> 00:15:51,690
how's that going to work so this moving

00:15:48,960 --> 00:15:55,500
passing on ownership off the counter to

00:15:51,690 --> 00:15:59,940
threats doesn't work the people and

00:15:55,500 --> 00:16:01,890
their solutions for that let's use some

00:15:59,940 --> 00:16:05,580
kind of data sharing for example a menu

00:16:01,890 --> 00:16:08,520
or F counter to do this less provides

00:16:05,580 --> 00:16:10,580
that we just start having her we've

00:16:08,520 --> 00:16:15,110
wrapped our stuff in a rev counter er

00:16:10,580 --> 00:16:17,820
the rev counter API works through that

00:16:15,110 --> 00:16:21,450
works by actually cloning all those

00:16:17,820 --> 00:16:25,170
handles but that's a detail the

00:16:21,450 --> 00:16:27,240
interesting thing is suddenly the

00:16:25,170 --> 00:16:29,420
compiler states who complain our F

00:16:27,240 --> 00:16:32,700
counters cannot be sent between threads

00:16:29,420 --> 00:16:37,080
why the standard ref counter in rust

00:16:32,700 --> 00:16:39,900
does not synchronize the internal

00:16:37,080 --> 00:16:43,020
reference count and the compiler knows

00:16:39,900 --> 00:16:45,750
about this it expects you to use

00:16:43,020 --> 00:16:47,610
something that is concurrency safe and

00:16:45,750 --> 00:16:48,930
that for example uses an internal mutex

00:16:47,610 --> 00:16:51,570
or anything else which provides

00:16:48,930 --> 00:16:53,700
synchronization in this case and atomic

00:16:51,570 --> 00:16:56,430
integer or whatever but the compiler

00:16:53,700 --> 00:17:03,600
knows about this and gives you a usable

00:16:56,430 --> 00:17:05,280
error message so next thing we do we're

00:17:03,600 --> 00:17:08,550
trying to use another kind of reference

00:17:05,280 --> 00:17:11,490
counter and the other thing that the

00:17:08,550 --> 00:17:12,960
language knows about is even if I were

00:17:11,490 --> 00:17:15,090
using another reference counter I would

00:17:12,960 --> 00:17:20,880
still not sutras I can synchronize on

00:17:15,090 --> 00:17:22,350
the value which will bring rust to the

00:17:20,880 --> 00:17:24,990
point where it will ask me to actually

00:17:22,350 --> 00:17:28,080
provide synchronization so the compiler

00:17:24,990 --> 00:17:31,650
has an abstract idea of what it is of

00:17:28,080 --> 00:17:34,530
sending values to different to different

00:17:31,650 --> 00:17:38,570
threats which is the sending of the rev

00:17:34,530 --> 00:17:41,550
counter it also has an abstract idea of

00:17:38,570 --> 00:17:43,710
what it means to share data between

00:17:41,550 --> 00:17:46,760
threads which would be synchronization

00:17:43,710 --> 00:17:50,090
it has these two turns interestingly

00:17:46,760 --> 00:17:54,480
while the sending and syncing part is

00:17:50,090 --> 00:17:56,970
part of the language this idea the

00:17:54,480 --> 00:17:57,750
threading API for example is part of our

00:17:56,970 --> 00:17:59,760
standard library

00:17:57,750 --> 00:18:01,260
if you want to use your own sweating

00:17:59,760 --> 00:18:02,760
implementation you can totally supply

00:18:01,260 --> 00:18:06,870
that and you will get the same support

00:18:02,760 --> 00:18:09,180
so it's not like the language itself has

00:18:06,870 --> 00:18:11,850
primitives like thread primitives that

00:18:09,180 --> 00:18:14,070
ensure this the language itself has that

00:18:11,850 --> 00:18:20,970
abstract idea of sending and sharing

00:18:14,070 --> 00:18:23,550
data it does but you can apply this to

00:18:20,970 --> 00:18:24,330
whenever you implement a thread pool or

00:18:23,550 --> 00:18:26,580
whatever

00:18:24,330 --> 00:18:28,980
for example our standard library threads

00:18:26,580 --> 00:18:31,560
they're an abstraction over P threads

00:18:28,980 --> 00:18:34,470
but we're not sure if you want to use if

00:18:31,560 --> 00:18:36,390
you actually want to use P threads or on

00:18:34,470 --> 00:18:39,240
Windows they're not there they are

00:18:36,390 --> 00:18:47,310
abstractions over the equivalent Windows

00:18:39,240 --> 00:18:50,150
primitives so I was asked to make this

00:18:47,310 --> 00:18:52,950
session interactive in the sea of P so

00:18:50,150 --> 00:18:54,720
this covers my short introduction into

00:18:52,950 --> 00:19:10,110
the language does anyone have any

00:18:54,720 --> 00:19:11,580
questions on this yes so the swatches

00:19:10,110 --> 00:19:14,330
are introduced they're looking a lot

00:19:11,580 --> 00:19:17,430
like sea structures and the structure

00:19:14,330 --> 00:19:18,990
like the standard structure layout in

00:19:17,430 --> 00:19:20,760
rust is not defined just because the

00:19:18,990 --> 00:19:22,200
compiler might optimize on that but

00:19:20,760 --> 00:19:24,840
there's for example an annotation where

00:19:22,200 --> 00:19:26,940
you can say leprosy which would make

00:19:24,840 --> 00:19:29,940
that structure be laid out like sea wood

00:19:26,940 --> 00:19:31,110
I'm using reusing LLVM so it's using the

00:19:29,940 --> 00:19:35,610
back end to actually find out the

00:19:31,110 --> 00:19:37,530
structure of this and then giving you

00:19:35,610 --> 00:19:39,420
the ability to just directly call it to

00:19:37,530 --> 00:19:43,020
sea and back we've supported the sea ABI

00:19:39,420 --> 00:19:43,350
for functions so you have really zero

00:19:43,020 --> 00:19:47,940
casa

00:19:43,350 --> 00:19:49,890
inter or interoperability there also we

00:19:47,940 --> 00:19:50,970
can compile to dynamic libraries if you

00:19:49,890 --> 00:19:53,730
want to go the other way around

00:19:50,970 --> 00:19:55,880
dynamic and Static and whatever so we

00:19:53,730 --> 00:19:58,880
compile to your standard set of

00:19:55,880 --> 00:19:58,880
artifacts

00:20:08,790 --> 00:20:15,970
because it knows that IRC is not send

00:20:11,920 --> 00:20:19,630
able between threads it knows that by

00:20:15,970 --> 00:20:21,790
the type definition so the rule in the

00:20:19,630 --> 00:20:23,470
compiler is a there's a couple of types

00:20:21,790 --> 00:20:25,030
a couple of primitive types that are

00:20:23,470 --> 00:20:27,040
sent and a couple of primitive types

00:20:25,030 --> 00:20:32,190
that are sync and some even that are

00:20:27,040 --> 00:20:32,190
both and it's automatically derived and

00:20:32,220 --> 00:20:37,390
so if structural holds send herbal types

00:20:35,500 --> 00:20:39,970
it will actually that will actually

00:20:37,390 --> 00:20:43,330
bubble up our sees in themselves have

00:20:39,970 --> 00:20:46,300
this mutable counter which is in itself

00:20:43,330 --> 00:20:47,560
not in neither sin nor sink and the

00:20:46,300 --> 00:20:49,300
compiler knows about this so the

00:20:47,560 --> 00:20:53,770
compiler does this analysis and notice

00:20:49,300 --> 00:20:55,930
it cannot cross this boundary and the

00:20:53,770 --> 00:20:57,880
error message like the error message in

00:20:55,930 --> 00:20:59,320
the end is custom it knows when send and

00:20:57,880 --> 00:21:01,270
sink are involved it gives another error

00:20:59,320 --> 00:21:10,720
message but this is basically how it

00:21:01,270 --> 00:21:14,460
works yes yes so you would have you

00:21:10,720 --> 00:21:14,460
would implement send it soon for a RC

00:21:15,480 --> 00:21:19,530
[Music]

00:21:17,820 --> 00:21:22,450
that's a closure

00:21:19,530 --> 00:21:24,190
that's a closure it's the closure with

00:21:22,450 --> 00:21:27,310
no arguments because it's the threading

00:21:24,190 --> 00:21:30,010
API doesn't pass you any arguments what

00:21:27,310 --> 00:21:31,150
it does it is it closes over we have it

00:21:30,010 --> 00:21:33,010
be using the feature that they actually

00:21:31,150 --> 00:21:35,710
closed over to move data into the

00:21:33,010 --> 00:21:38,620
closure so the moment that I refer to

00:21:35,710 --> 00:21:42,640
handle I will actually move ownership

00:21:38,620 --> 00:21:46,420
from handle to the thread we have agree

00:21:42,640 --> 00:21:49,440
using this move moving ownership idea in

00:21:46,420 --> 00:21:53,190
the threading ap is not so much in the

00:21:49,440 --> 00:21:53,190
in async api's

00:22:00,280 --> 00:22:06,420
[Music]

00:22:03,330 --> 00:22:09,830
yes right so only when you pulse that

00:22:06,420 --> 00:22:20,220
into the phone

00:22:09,830 --> 00:22:21,840
right so the thing that happens here is

00:22:20,220 --> 00:22:23,550
actually doing every iteration of the

00:22:21,840 --> 00:22:24,540
loop I do one move in a freshly

00:22:23,550 --> 00:22:39,480
constructed closure

00:22:24,540 --> 00:22:40,770
yes yeah so it's see that's the sending

00:22:39,480 --> 00:22:42,720
and syncing that has nothing to do with

00:22:40,770 --> 00:22:50,480
that has nothing to do with a move

00:22:42,720 --> 00:22:53,190
that's ascending in so pink part it

00:22:50,480 --> 00:22:55,410
divides with by knowing what use pass

00:22:53,190 --> 00:22:57,510
into the closure but the whole movement

00:22:55,410 --> 00:23:00,270
parts like the moving part is happening

00:22:57,510 --> 00:23:02,220
at the moment where the loop is run yeah

00:23:00,270 --> 00:23:05,730
so they're sending in some quick

00:23:02,220 --> 00:23:07,890
analyzes what is moved the part wave

00:23:05,730 --> 00:23:38,910
says you cannot move that twice that's a

00:23:07,890 --> 00:23:42,320
looping concern trying to avoid anything

00:23:38,910 --> 00:23:42,320
that sounds like a language war

00:23:52,690 --> 00:23:57,410
this multiple problems in off there and

00:23:55,610 --> 00:23:59,540
because we're based on the LLVM the LLVM

00:23:57,410 --> 00:24:01,340
for example for a long time had an

00:23:59,540 --> 00:24:03,860
annotation which you could tell it by

00:24:01,340 --> 00:24:05,150
the way this point it doesn't a yes then

00:24:03,860 --> 00:24:08,330
it would miss compile because no one

00:24:05,150 --> 00:24:10,670
else was using that so we had strictly

00:24:08,330 --> 00:24:13,370
more information and yes it is an

00:24:10,670 --> 00:24:16,309
advantage that we have that currently

00:24:13,370 --> 00:24:20,650
there's mainly because they get language

00:24:16,309 --> 00:24:23,510
is young um there's no rust specific

00:24:20,650 --> 00:24:25,850
optimizations being applied at a larger

00:24:23,510 --> 00:24:29,440
level because of that so yes maybe

00:24:25,850 --> 00:24:32,090
that's an option so I wouldn't be

00:24:29,440 --> 00:24:33,950
hopefully so they when we're talking

00:24:32,090 --> 00:24:37,460
about performance for us especially

00:24:33,950 --> 00:24:39,110
we're in the C C++ area depending on

00:24:37,460 --> 00:24:41,870
benchmark you'll be faster depending on

00:24:39,110 --> 00:24:45,559
the benchmark we're slower sometimes

00:24:41,870 --> 00:24:48,620
it's C with GCC is faster than comes

00:24:45,559 --> 00:24:51,740
rust then come C was clang it's that

00:24:48,620 --> 00:24:55,490
kind of area it's the same ballpark so

00:24:51,740 --> 00:25:01,070
probably about that's the thing that I

00:24:55,490 --> 00:25:03,260
will currently think about also getting

00:25:01,070 --> 00:25:04,790
rid of existing code is a much bigger

00:25:03,260 --> 00:25:08,230
problem than just having an alternative

00:25:04,790 --> 00:25:11,360
language around that's the reason why

00:25:08,230 --> 00:25:14,150
servo is not built for replacing Firefox

00:25:11,360 --> 00:25:15,890
it's the testbed where you don't have to

00:25:14,150 --> 00:25:17,630
build on a production system to actually

00:25:15,890 --> 00:25:26,210
figure out stuff before you port it to a

00:25:17,630 --> 00:25:27,650
production system which leads me to the

00:25:26,210 --> 00:25:29,440
main part of the talk with three years

00:25:27,650 --> 00:25:31,820
of rest because we are young language

00:25:29,440 --> 00:25:34,670
but we already got a couple of things

00:25:31,820 --> 00:25:36,080
figured out and the reason why I do

00:25:34,670 --> 00:25:38,330
these kind of talks is anyone here

00:25:36,080 --> 00:25:41,270
involved in an open source project in a

00:25:38,330 --> 00:25:44,960
larger one that's great I'd love to hear

00:25:41,270 --> 00:25:47,210
from your experiences because one of the

00:25:44,960 --> 00:25:49,990
experiences I have is that actually not

00:25:47,210 --> 00:25:52,490
a lot of people have a lot of

00:25:49,990 --> 00:25:54,880
interaction about that of what works for

00:25:52,490 --> 00:26:00,680
them and what not

00:25:54,880 --> 00:26:02,780
so when I prepared this talk I was kind

00:26:00,680 --> 00:26:06,380
of thinking on how to structure it and I

00:26:02,780 --> 00:26:09,860
ended up with a lot of small snapshots

00:26:06,380 --> 00:26:12,020
from the last three years and I try to

00:26:09,860 --> 00:26:14,510
find a structure and in the end I figure

00:26:12,020 --> 00:26:17,390
that I can't because I'm also just one

00:26:14,510 --> 00:26:20,660
person somewhere and the project is

00:26:17,390 --> 00:26:23,180
global so maybe someone else would have

00:26:20,660 --> 00:26:24,650
their number of snapshots over the last

00:26:23,180 --> 00:26:27,440
three years it could be something

00:26:24,650 --> 00:26:29,330
completely different maybe someone would

00:26:27,440 --> 00:26:33,950
come up with all the compiler changes we

00:26:29,330 --> 00:26:34,370
had in between so let's start at the

00:26:33,950 --> 00:26:41,350
beginning

00:26:34,370 --> 00:26:43,850
when we were finally done 2050 2050 was

00:26:41,350 --> 00:26:46,490
West is a 10 year old programming

00:26:43,850 --> 00:26:48,260
language it is as old as go and before

00:26:46,490 --> 00:26:51,320
that it was a research language at

00:26:48,260 --> 00:26:54,520
Missoula research and around 2014

00:26:51,320 --> 00:26:57,050
someone at Mozilla decided ok people

00:26:54,520 --> 00:26:59,540
maybe it's a good time to finally come

00:26:57,050 --> 00:27:02,810
up with something done Mozilla is an

00:26:59,540 --> 00:27:07,280
organization that is very very focused

00:27:02,810 --> 00:27:09,080
on actually building final products so

00:27:07,280 --> 00:27:11,210
even when you are in Mozilla research

00:27:09,080 --> 00:27:13,070
everything your research has to be

00:27:11,210 --> 00:27:14,510
released every two month like a

00:27:13,070 --> 00:27:17,210
clockwork because they consider

00:27:14,510 --> 00:27:19,340
releasing part of having software if

00:27:17,210 --> 00:27:23,630
it's not releasable it's not software by

00:27:19,340 --> 00:27:25,880
their definition and that was also

00:27:23,630 --> 00:27:27,530
something that attracted a lot of people

00:27:25,880 --> 00:27:29,030
all it definitely has attracted me

00:27:27,530 --> 00:27:31,550
because it meant like even though you

00:27:29,030 --> 00:27:34,880
had the chance to have a look at how a

00:27:31,550 --> 00:27:36,680
programming language is produced Mozilla

00:27:34,880 --> 00:27:38,660
did it in the open that was first of all

00:27:36,680 --> 00:27:42,800
the chance to see it before it came up

00:27:38,660 --> 00:27:44,390
with one oh and then also getting like

00:27:42,800 --> 00:27:45,920
kind of the feeling they're on to

00:27:44,390 --> 00:27:47,660
something and they actually want to use

00:27:45,920 --> 00:27:49,490
that for something so it's not going to

00:27:47,660 --> 00:27:51,530
be the next language that you learned

00:27:49,490 --> 00:27:54,590
that never ends up being in production

00:27:51,530 --> 00:27:56,930
and that was the air around the project

00:27:54,590 --> 00:27:58,610
even back then obviously because of also

00:27:56,930 --> 00:28:01,720
a large sponsor that had a vested

00:27:58,610 --> 00:28:03,560
interest in actually using it and that

00:28:01,720 --> 00:28:06,080
actually meant removing a lot of

00:28:03,560 --> 00:28:06,480
features rust had a garbage collectors

00:28:06,080 --> 00:28:08,970
on

00:28:06,480 --> 00:28:12,330
rust had a very complex error handling

00:28:08,970 --> 00:28:15,470
system that did work through a system

00:28:12,330 --> 00:28:18,150
that were similar to exceptions which

00:28:15,470 --> 00:28:20,100
sounded quite nice but ended up not

00:28:18,150 --> 00:28:23,240
being something that we actually trusted

00:28:20,100 --> 00:28:25,530
the standard lip was trimmed

00:28:23,240 --> 00:28:27,390
tremendously when everything will that

00:28:25,530 --> 00:28:29,880
wasn't portable everything that would

00:28:27,390 --> 00:28:31,680
fit like the new goal of building a

00:28:29,880 --> 00:28:34,770
systems programming language that would

00:28:31,680 --> 00:28:37,730
be that he could end up putting on

00:28:34,770 --> 00:28:40,410
embedded devices but wouldn't fit that

00:28:37,730 --> 00:28:43,080
everything that was a trace of a runtime

00:28:40,410 --> 00:28:45,090
system reflection or whatever anything

00:28:43,080 --> 00:28:47,580
that would have been kept or needed to

00:28:45,090 --> 00:28:51,750
be kept around in the binary to enable

00:28:47,580 --> 00:28:54,810
that was killed off and that was only in

00:28:51,750 --> 00:28:57,420
the last couple of month so this certain

00:28:54,810 --> 00:28:59,940
push towards oh we have a date now and

00:28:57,420 --> 00:29:02,460
we're going to release and we're going

00:28:59,940 --> 00:29:03,960
to release on that date and it's

00:29:02,460 --> 00:29:06,090
something that was already a good at and

00:29:03,960 --> 00:29:07,710
that was very interesting to see it

00:29:06,090 --> 00:29:09,630
gives you a nice respect also a lot of

00:29:07,710 --> 00:29:10,920
things where you can actually read up

00:29:09,630 --> 00:29:13,140
the old male sincere

00:29:10,920 --> 00:29:15,210
why isn't rust using a garbage collector

00:29:13,140 --> 00:29:19,410
anymore what doesn't rust have classes

00:29:15,210 --> 00:29:23,400
we had classes at that point there were

00:29:19,410 --> 00:29:26,630
just not good and also coming up with

00:29:23,400 --> 00:29:29,760
economics and tooling around everything

00:29:26,630 --> 00:29:33,240
the first thing was we established an

00:29:29,760 --> 00:29:34,710
RFC process even before the language was

00:29:33,240 --> 00:29:38,880
released you can find it under a rust

00:29:34,710 --> 00:29:41,340
Lang /r C's we now have over 2000 of

00:29:38,880 --> 00:29:43,050
those documents that are trying trying

00:29:41,340 --> 00:29:45,600
out language changes just as a

00:29:43,050 --> 00:29:48,570
discussion all language changes have to

00:29:45,600 --> 00:29:50,850
go through that obviously a lot of them

00:29:48,570 --> 00:29:53,870
must be tried multiple times in the

00:29:50,850 --> 00:29:56,640
discussion and some of them will fail or

00:29:53,870 --> 00:29:58,050
someone will just give up on them

00:29:56,640 --> 00:30:01,050
because they don't find them interesting

00:29:58,050 --> 00:30:03,600
anymore and the final release worth as I

00:30:01,050 --> 00:30:06,720
said in May 15 2015 and the package that

00:30:03,600 --> 00:30:09,450
we released was the rest compiler based

00:30:06,720 --> 00:30:11,280
on the LLVM cargo a built-in dependency

00:30:09,450 --> 00:30:14,520
management tool along with a registry

00:30:11,280 --> 00:30:17,850
and that which is rubygems like the

00:30:14,520 --> 00:30:22,450
author themselves actually wrote bundle

00:30:17,850 --> 00:30:24,700
before the problem in this kind of space

00:30:22,450 --> 00:30:26,230
is finding someone who wrote a package

00:30:24,700 --> 00:30:30,550
manager before and wants to do it again

00:30:26,230 --> 00:30:34,270
again it's pretty hard this problem is

00:30:30,550 --> 00:30:38,290
solvable by money and this is what we

00:30:34,270 --> 00:30:40,840
have to have in Mozilla yester a torch a

00:30:38,290 --> 00:30:42,790
magic covering the the ability to run

00:30:40,840 --> 00:30:45,250
things by side by side so similar to our

00:30:42,790 --> 00:30:48,160
VM or in VM but it also managed this the

00:30:45,250 --> 00:30:50,920
whole tool chain so the rest compiler is

00:30:48,160 --> 00:30:54,940
by itself across compiler so it also

00:30:50,920 --> 00:30:56,860
manages being managing targets Sue's

00:30:54,940 --> 00:30:58,300
roots and build routes so all of these

00:30:56,860 --> 00:31:01,720
kind of things so it's strictly more

00:30:58,300 --> 00:31:04,360
than what Ruby or or node have a

00:31:01,720 --> 00:31:05,680
documentation tool complete with API

00:31:04,360 --> 00:31:07,540
searching functionality and

00:31:05,680 --> 00:31:09,460
documentation testing it has a testing

00:31:07,540 --> 00:31:10,810
mode in which you can test all the

00:31:09,460 --> 00:31:13,740
examples that you wrote in your Docs

00:31:10,810 --> 00:31:16,150
which is quite neat and a complete book

00:31:13,740 --> 00:31:19,870
the best programming language first

00:31:16,150 --> 00:31:22,800
edition a couple a bit of compatibility

00:31:19,870 --> 00:31:26,950
tooling rust gdb which just ensures that

00:31:22,800 --> 00:31:29,710
the symbols read nicer in gdb the actual

00:31:26,950 --> 00:31:32,170
features were committed to gdb of them

00:31:29,710 --> 00:31:36,040
plug-in and at that time of es code

00:31:32,170 --> 00:31:38,140
plug-in they just said the rest come

00:31:36,040 --> 00:31:40,780
holla to train is completely cross

00:31:38,140 --> 00:31:42,340
compiler aware and this is this is a

00:31:40,780 --> 00:31:44,770
good decision to do that early because

00:31:42,340 --> 00:31:48,880
that is hard to retrofit into an

00:31:44,770 --> 00:31:52,320
ecosystem the whole rust ecosystem at

00:31:48,880 --> 00:31:55,330
least has awareness of cross compilation

00:31:52,320 --> 00:31:57,850
the release circle of the language is

00:31:55,330 --> 00:32:00,880
nightly releases or six weeks nightly is

00:31:57,850 --> 00:32:03,460
promoted to beta after six weeks betas

00:32:00,880 --> 00:32:05,410
promoted to stable so the thing that we

00:32:03,460 --> 00:32:08,260
released was actually the compiler

00:32:05,410 --> 00:32:12,180
version from March and we're currently

00:32:08,260 --> 00:32:15,070
at version 125 it has worked instead

00:32:12,180 --> 00:32:18,460
this the idea of that is that it ensures

00:32:15,070 --> 00:32:20,740
that you can actually go from version to

00:32:18,460 --> 00:32:24,280
version without having a change lock

00:32:20,740 --> 00:32:27,100
that I don't know one's a small highway

00:32:24,280 --> 00:32:29,770
or something like this it also ensures

00:32:27,100 --> 00:32:31,420
that if people have new features coming

00:32:29,770 --> 00:32:33,490
up for example new cross compilation

00:32:31,420 --> 00:32:35,530
targets there's a reasonable time frame

00:32:33,490 --> 00:32:38,220
in which they will actually be they can

00:32:35,530 --> 00:32:40,810
actually be moved into stable

00:32:38,220 --> 00:32:42,400
there's the Bochy going to since 100 you

00:32:40,810 --> 00:32:44,710
could there's an RFC for that and you

00:32:42,400 --> 00:32:46,690
can read up what it is it rust is

00:32:44,710 --> 00:32:50,110
backwards-compatible the stable compiler

00:32:46,690 --> 00:32:54,580
only exposes the stable interface so if

00:32:50,110 --> 00:32:56,650
you are downloading rust 125 and you're

00:32:54,580 --> 00:32:58,060
trying to use any kind of experimental

00:32:56,650 --> 00:33:00,160
feature it will tell you I know about

00:32:58,060 --> 00:33:05,320
this feature but I'm the stable compiler

00:33:00,160 --> 00:33:07,330
you're not allowed to use it and cui

00:33:05,320 --> 00:33:09,010
interfaces are considered interface so

00:33:07,330 --> 00:33:11,380
if you build any kind of tooling on top

00:33:09,010 --> 00:33:13,930
of cargo like on top of all of these

00:33:11,380 --> 00:33:17,560
tools that I mentioned you can rely on

00:33:13,930 --> 00:33:19,360
their interface staying stable the

00:33:17,560 --> 00:33:21,790
project management was also set up that

00:33:19,360 --> 00:33:26,200
back then and it is explicitly anti

00:33:21,790 --> 00:33:29,440
benevolent dictator for life we are a

00:33:26,200 --> 00:33:32,770
large group of people and we have no

00:33:29,440 --> 00:33:35,830
explicit leadership in the sense of one

00:33:32,770 --> 00:33:38,200
person there's a couple of reasons for

00:33:35,830 --> 00:33:40,270
that one for the example is that the

00:33:38,200 --> 00:33:47,980
inventor of the language is currently a

00:33:40,270 --> 00:33:50,170
product measured Swift adapter so the we

00:33:47,980 --> 00:33:52,480
already really have contributors coming

00:33:50,170 --> 00:33:57,420
and going and leaving their mark and in

00:33:52,480 --> 00:34:00,580
the language the project looks

00:33:57,420 --> 00:34:04,240
fundamentally different than from rust a

00:34:00,580 --> 00:34:05,890
couple of years ago so this was kind of

00:34:04,240 --> 00:34:08,050
like coming out of the history but also

00:34:05,890 --> 00:34:11,230
we're quite happy with it the core team

00:34:08,050 --> 00:34:13,630
is a tiebreaker so if there's any kinds

00:34:11,230 --> 00:34:14,910
of issues that we have a tie on we have

00:34:13,630 --> 00:34:17,800
a tiebreaker

00:34:14,910 --> 00:34:19,450
most contributions and this is something

00:34:17,800 --> 00:34:23,340
that people frequently get from wrong

00:34:19,450 --> 00:34:26,919
are from non Mazzoni ins the project is

00:34:23,340 --> 00:34:30,280
hosted at mozilla but mozilla has the

00:34:26,919 --> 00:34:31,780
tendency to have projects that factor in

00:34:30,280 --> 00:34:33,540
a lot of contribution and people are

00:34:31,780 --> 00:34:35,919
quite good at that

00:34:33,540 --> 00:34:38,230
programmers at mozilla pretty good at

00:34:35,919 --> 00:34:41,429
reading at actually code doing code

00:34:38,230 --> 00:34:43,100
review they're much better at that and

00:34:41,429 --> 00:34:45,080
we already had

00:34:43,100 --> 00:34:47,000
- a thousand contributors in 2015 so

00:34:45,080 --> 00:34:52,700
that was definitely necessary all of

00:34:47,000 --> 00:34:54,770
this was closed teams are needs and the

00:34:52,700 --> 00:34:56,720
initial team was caught in for our

00:34:54,770 --> 00:35:01,960
language library compiler documentation

00:34:56,720 --> 00:35:04,460
community and moderation which is also I

00:35:01,960 --> 00:35:06,290
know of not many programming languages

00:35:04,460 --> 00:35:07,940
that actually have an explicit community

00:35:06,290 --> 00:35:09,710
team or an explicit moderation team or

00:35:07,940 --> 00:35:13,430
even explicit teams for their

00:35:09,710 --> 00:35:15,380
documentation we found that actually

00:35:13,430 --> 00:35:16,640
just put in your label on those people

00:35:15,380 --> 00:35:18,160
and making sure that they have an email

00:35:16,640 --> 00:35:21,590
address where they can be addressed and

00:35:18,160 --> 00:35:24,770
and an IC channel where they meet or we

00:35:21,590 --> 00:35:27,170
can actually approach them it has helped

00:35:24,770 --> 00:35:29,420
us a lot so come basically these teams

00:35:27,170 --> 00:35:32,060
are mostly for communicating who is

00:35:29,420 --> 00:35:34,910
actually working on this if you want to

00:35:32,060 --> 00:35:39,050
talk to people that are doing this talk

00:35:34,910 --> 00:35:40,370
to us yeah but it raises awareness of

00:35:39,050 --> 00:35:45,100
people's work and makes them addressable

00:35:40,370 --> 00:35:47,990
and Batman because we were small project

00:35:45,100 --> 00:35:50,990
we try to figure out a couple of things

00:35:47,990 --> 00:35:52,910
to do low-friction community interaction

00:35:50,990 --> 00:35:54,830
for example we have a communicator tree

00:35:52,910 --> 00:35:58,130
calendar it's mostly for meetups or

00:35:54,830 --> 00:35:59,930
whatever it's run on Google Calendar the

00:35:58,130 --> 00:36:01,940
rule around the calendar is send us an

00:35:59,930 --> 00:36:03,710
email with the gmail address we'll give

00:36:01,940 --> 00:36:05,810
you access to that and from that on you

00:36:03,710 --> 00:36:08,630
can put your meetup in there and that's

00:36:05,810 --> 00:36:10,910
what it's been like for quite a while

00:36:08,630 --> 00:36:13,190
until someone came up with oh by the way

00:36:10,910 --> 00:36:15,050
I could write a weekly newsletter where

00:36:13,190 --> 00:36:16,490
just write about the most important

00:36:15,050 --> 00:36:19,700
issues and what's coming out with a

00:36:16,490 --> 00:36:22,670
project the newsletter now is up to 250

00:36:19,700 --> 00:36:24,680
editions it's running since 3 years but

00:36:22,670 --> 00:36:26,750
for example this one consumes the

00:36:24,680 --> 00:36:28,310
community calendar and says well every

00:36:26,750 --> 00:36:29,990
week I'm just gonna see what's coming up

00:36:28,310 --> 00:36:33,650
in the next two weeks has a little

00:36:29,990 --> 00:36:36,260
script puts it in the newsletter so the

00:36:33,650 --> 00:36:38,450
meetup organizes just put stuff in the

00:36:36,260 --> 00:36:40,670
newsletter and we're running a little

00:36:38,450 --> 00:36:42,710
script sending the newsletter away and

00:36:40,670 --> 00:36:44,060
suddenly everyone who subscribes to a

00:36:42,710 --> 00:36:47,000
newsletter knows if something's

00:36:44,060 --> 00:36:48,350
happening in the area we have an email

00:36:47,000 --> 00:36:51,470
address that's called community at West

00:36:48,350 --> 00:36:53,030
London org which explicitly is for if

00:36:51,470 --> 00:36:56,030
you have any kind of question ask us

00:36:53,030 --> 00:36:57,730
because probably community people doing

00:36:56,030 --> 00:37:00,740
you work for programming languages for

00:36:57,730 --> 00:37:03,110
programming language no the community a

00:37:00,740 --> 00:37:05,960
lot better than any any other individual

00:37:03,110 --> 00:37:07,850
in the group which happens to lead to

00:37:05,960 --> 00:37:09,560
situations like oh I'm the meetup

00:37:07,850 --> 00:37:11,390
organizer of Moria

00:37:09,560 --> 00:37:14,360
do you know anyone I don't know anyone

00:37:11,390 --> 00:37:15,950
in the city who could give a talk yes a

00:37:14,360 --> 00:37:18,860
keynote speaker of our conference is

00:37:15,950 --> 00:37:19,460
living like two roads down it's as

00:37:18,860 --> 00:37:21,110
simple as that

00:37:19,460 --> 00:37:23,240
most of these interactions don't get

00:37:21,110 --> 00:37:25,850
much further than that send a question

00:37:23,240 --> 00:37:29,200
we send you off someone calling the term

00:37:25,850 --> 00:37:31,970
of we're the Rost languages switchboard

00:37:29,200 --> 00:37:33,230
and obviously we have forums IRC

00:37:31,970 --> 00:37:35,680
channels and all of these kind of things

00:37:33,230 --> 00:37:38,090
you should totally have them also

00:37:35,680 --> 00:37:39,980
nowadays there so may provide us for

00:37:38,090 --> 00:37:41,870
that that this is pretty easy to set up

00:37:39,980 --> 00:37:45,020
for any kind of project that has more

00:37:41,870 --> 00:37:46,490
than a couple of people and you usually

00:37:45,020 --> 00:37:49,700
find someone who wants to do the

00:37:46,490 --> 00:37:52,820
moderation work and make sure that the

00:37:49,700 --> 00:37:54,260
IRC channel stays friendly the other

00:37:52,820 --> 00:37:56,210
thing is lower friction contribution

00:37:54,260 --> 00:37:58,520
people want to contribute and a thing

00:37:56,210 --> 00:38:01,310
that a lot of projects fumble on and I

00:37:58,520 --> 00:38:03,110
don't quite understand why is most

00:38:01,310 --> 00:38:05,240
projects have no tasks for people that

00:38:03,110 --> 00:38:06,710
just have five minutes at a time the

00:38:05,240 --> 00:38:09,410
reason why I'm doing the switchboard

00:38:06,710 --> 00:38:12,620
work is I've got a company I've got a

00:38:09,410 --> 00:38:16,520
job I've got clients but I'm on the

00:38:12,620 --> 00:38:18,290
training lot so when I'm on the train

00:38:16,520 --> 00:38:19,700
half an hour I can totally write some

00:38:18,290 --> 00:38:23,600
emails for the project that I want to

00:38:19,700 --> 00:38:28,040
support building a compiler future not

00:38:23,600 --> 00:38:33,170
so much so caring about that has helped

00:38:28,040 --> 00:38:35,060
us a lot and totally also avoid any kind

00:38:33,170 --> 00:38:37,100
of lingering tasks so people that want

00:38:35,060 --> 00:38:39,260
to contribute don't really appreciate if

00:38:37,100 --> 00:38:42,980
it takes four weeks to just get a reply

00:38:39,260 --> 00:38:44,990
so goes as far as that we have a bot

00:38:42,980 --> 00:38:46,660
that checks if someone is a first-time

00:38:44,990 --> 00:38:50,240
contributor and we make sure that we're

00:38:46,660 --> 00:38:53,060
really on site just to make sure because

00:38:50,240 --> 00:38:54,740
they probably have far bigger question

00:38:53,060 --> 00:38:57,650
that someone who is a repeat contributor

00:38:54,740 --> 00:38:59,060
and often also far easier to answer

00:38:57,650 --> 00:39:01,760
questions like this goes here this goes

00:38:59,060 --> 00:39:03,650
there and maybe should you should talk

00:39:01,760 --> 00:39:08,150
to that person

00:39:03,650 --> 00:39:09,800
we do actually have expectations on tone

00:39:08,150 --> 00:39:11,540
our conversational tone is friendly and

00:39:09,800 --> 00:39:16,580
focused not very bad Shetty and non

00:39:11,540 --> 00:39:18,110
insulting stating issues is great just

00:39:16,580 --> 00:39:20,360
as long as people are realistic about

00:39:18,110 --> 00:39:23,330
fixes something you just can't fix next

00:39:20,360 --> 00:39:25,730
week but we're working on and we're also

00:39:23,330 --> 00:39:27,850
completely fine if people call us out

00:39:25,730 --> 00:39:30,860
and not working on them

00:39:27,850 --> 00:39:32,600
people often fear that this is kind of a

00:39:30,860 --> 00:39:34,850
taut with people that are sometimes a

00:39:32,600 --> 00:39:38,000
little grumpy Stern or something like

00:39:34,850 --> 00:39:39,740
that that's fine grumpiness is not

00:39:38,000 --> 00:39:41,480
overstepping or something like this

00:39:39,740 --> 00:39:45,350
we're very happy we have a lot of grumpy

00:39:41,480 --> 00:39:47,840
people around this is perfect it's a

00:39:45,350 --> 00:39:49,250
technical project okay we're very happy

00:39:47,840 --> 00:39:52,400
with the still in discussion on a

00:39:49,250 --> 00:39:56,210
technical subject great it's just that

00:39:52,400 --> 00:39:59,290
we found that whenever it goes into the

00:39:56,210 --> 00:40:01,010
area area of being actively insulting

00:39:59,290 --> 00:40:02,660
you've got a problem because people

00:40:01,010 --> 00:40:03,800
start engaging in discussions and

00:40:02,660 --> 00:40:08,780
especially people that he would like to

00:40:03,800 --> 00:40:10,310
have in the discussion still it's a

00:40:08,780 --> 00:40:12,560
young language so the usability of the

00:40:10,310 --> 00:40:14,390
language was more like rust was a usable

00:40:12,560 --> 00:40:17,390
container condena in the programming

00:40:14,390 --> 00:40:18,800
language space back then but a lot of

00:40:17,390 --> 00:40:21,260
things were missing most notably

00:40:18,800 --> 00:40:23,630
libraries so it was basically a language

00:40:21,260 --> 00:40:26,120
for people that would in their free time

00:40:23,630 --> 00:40:30,620
write stuff based on lip see and nothing

00:40:26,120 --> 00:40:31,640
else so a couple of these things were

00:40:30,620 --> 00:40:33,950
coming up pretty often

00:40:31,640 --> 00:40:36,290
we were pretty early a serialization

00:40:33,950 --> 00:40:38,660
deserialization framework but for

00:40:36,290 --> 00:40:42,500
example a lot of notable networking

00:40:38,660 --> 00:40:44,930
stuff was not yet written so the

00:40:42,500 --> 00:40:48,340
conclusions from the first year are good

00:40:44,930 --> 00:40:50,450
too many having good tooling early helps

00:40:48,340 --> 00:40:53,380
establishing a productive environment is

00:40:50,450 --> 00:40:56,660
work and non programming work is a

00:40:53,380 --> 00:40:58,880
substantial amount of running such a

00:40:56,660 --> 00:41:00,770
kind of project and has been incredibly

00:40:58,880 --> 00:41:03,520
beneficial for that fast to be very

00:41:00,770 --> 00:41:07,190
early and crediting that because people

00:41:03,520 --> 00:41:09,170
are surprisingly willing to give free

00:41:07,190 --> 00:41:12,200
work to project especially to Mozilla

00:41:09,170 --> 00:41:16,170
projects but they would really like to

00:41:12,200 --> 00:41:18,630
get their little bit of Fame for that

00:41:16,170 --> 00:41:44,160
so any questions up to here I'm gonna

00:41:18,630 --> 00:41:51,990
stop after it changes from time to time

00:41:44,160 --> 00:41:53,640
so it's it's a bit of in the

00:41:51,990 --> 00:41:55,410
organization that we're in it's a bit of

00:41:53,640 --> 00:41:58,380
a fuzzy question for example if you work

00:41:55,410 --> 00:42:00,480
on infrastructure team you're probably

00:41:58,380 --> 00:42:01,920
mostly talking to whether I get my

00:42:00,480 --> 00:42:03,870
service from where can I put that stuff

00:42:01,920 --> 00:42:05,310
on we're running one of the largest now

00:42:03,870 --> 00:42:07,890
running one of the largest build forms

00:42:05,310 --> 00:42:10,470
for an open source project because

00:42:07,890 --> 00:42:12,000
compiled the LLVM does compile very long

00:42:10,470 --> 00:42:15,470
so this is kind of like an in-between

00:42:12,000 --> 00:42:19,470
between managing and that kind of work

00:42:15,470 --> 00:42:20,850
the community team tends to be pretty

00:42:19,470 --> 00:42:22,380
big because there's actually a lot of

00:42:20,850 --> 00:42:24,120
people that run a meet-up and would be

00:42:22,380 --> 00:42:27,450
interested in doing something else for

00:42:24,120 --> 00:42:30,480
the project on top of that so the ratio

00:42:27,450 --> 00:42:34,560
is probably one third to three it's

00:42:30,480 --> 00:42:37,110
something like this and also pretty

00:42:34,560 --> 00:42:40,200
often the team's mean the teams in the

00:42:37,110 --> 00:42:41,520
it's self-managed work so there might be

00:42:40,200 --> 00:42:43,320
people that build a piece of

00:42:41,520 --> 00:42:44,760
infrastructure they're not necessarily

00:42:43,320 --> 00:42:48,230
in the infrastructure team if they have

00:42:44,760 --> 00:42:50,670
no interest beyond their piece because

00:42:48,230 --> 00:42:52,710
of that we have quite a lot of

00:42:50,670 --> 00:42:56,100
contributors and so kind of the rule of

00:42:52,710 --> 00:42:58,140
thumb for a team is for being in a team

00:42:56,100 --> 00:43:00,420
or being involved in team is you'd like

00:42:58,140 --> 00:43:02,970
to represent one of your topics actually

00:43:00,420 --> 00:43:04,290
to the other project to the other parts

00:43:02,970 --> 00:43:10,310
of the project which is mainly a

00:43:04,290 --> 00:43:10,310
management task I would consider it yeah

00:43:12,259 --> 00:43:16,890
one third being the people that do

00:43:14,700 --> 00:43:21,660
absolutely no development for the

00:43:16,890 --> 00:43:24,450
project like for example I'm actually

00:43:21,660 --> 00:43:27,299
programming a lot for a lot of rust on

00:43:24,450 --> 00:43:31,499
the job but I actually don't like

00:43:27,299 --> 00:43:33,029
programming after my day so my my

00:43:31,499 --> 00:43:38,640
involvement in the project in itself

00:43:33,029 --> 00:43:42,839
Israeli lines of code I'm also a bad

00:43:38,640 --> 00:43:51,599
compiler engineer okay any more

00:43:42,839 --> 00:43:54,749
questions which means between the second

00:43:51,599 --> 00:43:56,819
year finding adoption and this is also I

00:43:54,749 --> 00:43:58,650
used to do community management for the

00:43:56,819 --> 00:44:00,299
Ruby world before and the one thing I

00:43:58,650 --> 00:44:02,099
missed in Ruby was the time when it

00:44:00,299 --> 00:44:04,529
found adoption of being actually

00:44:02,099 --> 00:44:07,619
involved I was more involved later so

00:44:04,529 --> 00:44:08,880
the interesting part here was for me to

00:44:07,619 --> 00:44:10,529
actually be in that and I think it's

00:44:08,880 --> 00:44:12,859
very interesting to see how programming

00:44:10,529 --> 00:44:18,089
languages grow because it's often hidden

00:44:12,859 --> 00:44:23,880
and often the a very complex thing the

00:44:18,089 --> 00:44:26,099
biggest problem is gathering data and so

00:44:23,880 --> 00:44:28,109
we run a survey in the right in the

00:44:26,099 --> 00:44:30,479
second year which had three thousand

00:44:28,109 --> 00:44:32,369
respondents it turns out 20% of those

00:44:30,479 --> 00:44:35,069
responds we're already using the

00:44:32,369 --> 00:44:38,759
language at work which everyone in the

00:44:35,069 --> 00:44:39,390
project was like wait a second I'm not

00:44:38,759 --> 00:44:41,279
doing it

00:44:39,390 --> 00:44:42,869
I missed melon on the project desert but

00:44:41,279 --> 00:44:47,460
there seems to be a lot of people that

00:44:42,869 --> 00:44:50,460
do that and half of them in projects

00:44:47,460 --> 00:44:52,170
over 10-k lines of code of rust like we

00:44:50,460 --> 00:44:54,690
explicitly asked for what's the amount

00:44:52,170 --> 00:44:57,059
of rust code in your project which is

00:44:54,690 --> 00:44:58,469
also quite interesting before that we

00:44:57,059 --> 00:44:59,940
were expecting that most of the people

00:44:58,469 --> 00:45:03,499
that worked on larger code bases were

00:44:59,940 --> 00:45:07,619
basically working on solar or rust C

00:45:03,499 --> 00:45:10,109
proved us wrong also the Democrat the

00:45:07,619 --> 00:45:12,019
demographics frustations actually come

00:45:10,109 --> 00:45:16,319
in equal parts from dynamic languages

00:45:12,019 --> 00:45:20,069
Java Python and Ruby and classic systems

00:45:16,319 --> 00:45:22,739
programming C C++ sometimes D or

00:45:20,069 --> 00:45:23,930
functional programming like an Haskell

00:45:22,739 --> 00:45:26,960
Scala

00:45:23,930 --> 00:45:30,770
ever that was also pretty interesting so

00:45:26,960 --> 00:45:32,930
worst tends to become an entry point of

00:45:30,770 --> 00:45:35,410
people for people that would like to go

00:45:32,930 --> 00:45:37,520
back into systems program pretty often

00:45:35,410 --> 00:45:40,040
when we interview these people they are

00:45:37,520 --> 00:45:41,840
like oh yeah I did it a new University

00:45:40,040 --> 00:45:43,570
then I ended up having a table and some

00:45:41,840 --> 00:45:45,920
kind of rails agency did a lot of rails

00:45:43,570 --> 00:45:49,130
later figured out that maybe I should

00:45:45,920 --> 00:45:50,960
rephrase part of the system in maybe if

00:45:49,130 --> 00:45:53,120
has a programming language but C is

00:45:50,960 --> 00:45:55,730
memory safe which one crashed my whole

00:45:53,120 --> 00:45:56,870
rel server and suddenly there's

00:45:55,730 --> 00:46:01,010
assistance for gaming language to this

00:45:56,870 --> 00:46:02,810
memory safe interesting so pretty often

00:46:01,010 --> 00:46:05,030
in these kind of contacts rust is

00:46:02,810 --> 00:46:06,740
actually not used as did you don't go

00:46:05,030 --> 00:46:08,360
the whole project in rust you're

00:46:06,740 --> 00:46:10,520
actually building dynamic libraries and

00:46:08,360 --> 00:46:13,580
then calling into them just as you would

00:46:10,520 --> 00:46:15,770
with C and the community is based in

00:46:13,580 --> 00:46:17,840
Europe it was also something you like

00:46:15,770 --> 00:46:20,240
most of the marketing obviously comes

00:46:17,840 --> 00:46:23,180
from Mozilla at some places so it's

00:46:20,240 --> 00:46:25,400
pretty often kind of biased towards us

00:46:23,180 --> 00:46:28,280
style of marketing especially this is

00:46:25,400 --> 00:46:31,760
one of the things and we have other huge

00:46:28,280 --> 00:46:34,490
groups in China Russia and India this

00:46:31,760 --> 00:46:36,410
was also something very new to us and we

00:46:34,490 --> 00:46:38,270
also conducted a production user survey

00:46:36,410 --> 00:46:40,790
shortly thereafter after we found out we

00:46:38,270 --> 00:46:43,400
have production users in that size and

00:46:40,790 --> 00:46:45,770
feedback was good especially for low

00:46:43,400 --> 00:46:49,340
reliability and pain points whereas is

00:46:45,770 --> 00:46:52,040
expected so the production uses we're

00:46:49,340 --> 00:46:54,230
mostly really using it as an alternative

00:46:52,040 --> 00:46:56,660
language to see a language to write

00:46:54,230 --> 00:46:58,880
shared libraries in well finally

00:46:56,660 --> 00:47:01,250
concurrent codes such as servers which

00:46:58,880 --> 00:47:06,170
was a good thing for us because that

00:47:01,250 --> 00:47:08,720
kind of gave us that finally the feeling

00:47:06,170 --> 00:47:11,180
that the concurrency same features that

00:47:08,720 --> 00:47:16,730
we have are actually useful in proper in

00:47:11,180 --> 00:47:19,040
production and projects tend to be

00:47:16,730 --> 00:47:20,990
really fully rust but important parts

00:47:19,040 --> 00:47:23,510
are that was the time when Dropbox for

00:47:20,990 --> 00:47:25,790
example decided to rewrite large parts

00:47:23,510 --> 00:47:29,720
of their back-end code base using the

00:47:25,790 --> 00:47:32,740
language but that was only more writing

00:47:29,720 --> 00:47:32,740
one aspect of it

00:47:34,540 --> 00:47:40,510
user problems where library maturity and

00:47:36,940 --> 00:47:42,820
to a majority because they needed a

00:47:40,510 --> 00:47:45,820
certain piece of tooling for example for

00:47:42,820 --> 00:47:47,350
certain that we didn't provide yet or a

00:47:45,820 --> 00:47:51,340
certain library for a problem that they

00:47:47,350 --> 00:47:53,770
had that just wasn't written yet but in

00:47:51,340 --> 00:47:55,390
general it ended up being problems or

00:47:53,770 --> 00:48:01,030
the kind of it's not there instead of

00:47:55,390 --> 00:48:03,850
what's there is problematic and so which

00:48:01,030 --> 00:48:05,860
ended up us adopting the practice of

00:48:03,850 --> 00:48:09,160
being more conservative was actually

00:48:05,860 --> 00:48:11,230
putting stuff like out finally and

00:48:09,160 --> 00:48:14,680
actually making sure that what we put

00:48:11,230 --> 00:48:16,360
out is really working the nice thing is

00:48:14,680 --> 00:48:19,630
that businesses tend to be a very

00:48:16,360 --> 00:48:24,280
different crowd of users they are very

00:48:19,630 --> 00:48:26,350
aware of context so if you can plainly

00:48:24,280 --> 00:48:27,940
stay to them what's not there and

00:48:26,350 --> 00:48:29,710
plainly state to them what's there and

00:48:27,940 --> 00:48:31,900
what's actually solving a problem that

00:48:29,710 --> 00:48:35,560
gives them that gives them a kind of a

00:48:31,900 --> 00:48:37,060
feeling of kind of trying to figure out

00:48:35,560 --> 00:48:38,770
what it would give them to actually

00:48:37,060 --> 00:48:40,600
adopt a new programming language giving

00:48:38,770 --> 00:48:43,000
them a bit of a feeling might end up

00:48:40,600 --> 00:48:43,630
being either something where they say

00:48:43,000 --> 00:48:45,550
okay

00:48:43,630 --> 00:48:48,910
this is a manageable risk and we might

00:48:45,550 --> 00:48:50,920
write one or two libraries ourselves mmm

00:48:48,910 --> 00:48:53,890
this is interesting we wait for a year

00:48:50,920 --> 00:48:56,980
that's also fine so these kind of

00:48:53,890 --> 00:48:59,320
discussions were extremely useful and we

00:48:56,980 --> 00:49:03,480
also have some kind of production user

00:48:59,320 --> 00:49:07,780
layer song so production users can get

00:49:03,480 --> 00:49:09,310
access to compiler rated things or hints

00:49:07,780 --> 00:49:11,110
from the team without going through

00:49:09,310 --> 00:49:13,930
public channels a lot of companies are

00:49:11,110 --> 00:49:16,810
the bit closed like they're open to talk

00:49:13,930 --> 00:49:20,710
about what they're doing in if you're

00:49:16,810 --> 00:49:21,970
doing that in a personal chat for those

00:49:20,710 --> 00:49:25,810
who are interested we've got the friends

00:49:21,970 --> 00:49:28,300
page this lists all the companies that

00:49:25,810 --> 00:49:30,780
are using rust in production that we

00:49:28,300 --> 00:49:34,290
know of and that disappeared us their

00:49:30,780 --> 00:49:37,300
their logos and a short description

00:49:34,290 --> 00:49:39,340
users are for example Mozilla Dropbox I

00:49:37,300 --> 00:49:42,220
just mentioned chuckle fish produces

00:49:39,340 --> 00:49:45,670
computer games chef

00:49:42,220 --> 00:49:48,039
they are deploying Facebook NP

00:49:45,670 --> 00:49:50,200
so if you download any kind of

00:49:48,039 --> 00:49:53,829
JavaScript nowadays you are using rust

00:49:50,200 --> 00:49:59,410
and my favorite one the opera house of

00:49:53,829 --> 00:50:03,279
dogwood we use enough reproduction and

00:49:59,410 --> 00:50:05,769
over 100 others so a lot of variety

00:50:03,279 --> 00:50:07,869
there so believe me and how do we

00:50:05,769 --> 00:50:10,390
compare to others and this is a huge

00:50:07,869 --> 00:50:12,069
problem that we have we don't know we

00:50:10,390 --> 00:50:15,279
don't know if that's good because

00:50:12,069 --> 00:50:16,809
there's no data on where was go but I

00:50:15,279 --> 00:50:19,059
think this is talking about where one

00:50:16,809 --> 00:50:21,039
and a half years in where was go when we

00:50:19,059 --> 00:50:23,440
were half a year one and a half years in

00:50:21,039 --> 00:50:27,819
where was javis but no js' one and a

00:50:23,440 --> 00:50:32,079
half years in you ever see where was no

00:50:27,819 --> 00:50:34,630
but even even if he runs surveys other

00:50:32,079 --> 00:50:38,049
projects have started to run surveys

00:50:34,630 --> 00:50:39,519
like last year or something like this we

00:50:38,049 --> 00:50:41,500
have no comparison so most of the

00:50:39,519 --> 00:50:43,809
comparison we have is our own service

00:50:41,500 --> 00:50:47,109
that we had it's a really big problem

00:50:43,809 --> 00:50:49,690
like I I can get all these numbers we

00:50:47,109 --> 00:50:51,190
can get all these numbers one of the

00:50:49,690 --> 00:50:52,480
ideas that we just had two weeks ago

00:50:51,190 --> 00:50:54,910
where we had an All Hands meeting was

00:50:52,480 --> 00:50:57,099
that we need a crystal ball meeting it

00:50:54,910 --> 00:50:59,920
is called like that because there's a

00:50:57,099 --> 00:51:01,869
facts where we have no idea where

00:50:59,920 --> 00:51:03,819
they're coming from because no one else

00:51:01,869 --> 00:51:09,130
has talked about previous experiences

00:51:03,819 --> 00:51:11,289
with that so yeah I can give numbers but

00:51:09,130 --> 00:51:12,309
I don't know if it's good or bad I

00:51:11,289 --> 00:51:13,900
didn't know if it could be better I

00:51:12,309 --> 00:51:14,829
don't know if it's if you're actually

00:51:13,900 --> 00:51:19,569
frying quite good and we should

00:51:14,829 --> 00:51:21,519
concentrate on other things okay when

00:51:19,569 --> 00:51:24,029
this helped Emma community side is still

00:51:21,519 --> 00:51:26,200
working integrating beer people were

00:51:24,029 --> 00:51:27,609
telling people that want to run a

00:51:26,200 --> 00:51:29,740
meet-up to actually default or not

00:51:27,609 --> 00:51:32,799
having talked meetups but on having kind

00:51:29,740 --> 00:51:35,230
of hacking learned style get people in a

00:51:32,799 --> 00:51:36,789
room start working on projects have

00:51:35,230 --> 00:51:38,740
people help each other that's vastly

00:51:36,789 --> 00:51:41,619
easier to set up that's vastly easier to

00:51:38,740 --> 00:51:43,630
run regularly and you don't need

00:51:41,619 --> 00:51:45,849
extremely experienced people for that

00:51:43,630 --> 00:51:47,559
most people are not yet on the state

00:51:45,849 --> 00:51:49,900
where they would actually like to give a

00:51:47,559 --> 00:51:52,329
talk or they didn't feel like they could

00:51:49,900 --> 00:51:54,039
actually follow a talk which also means

00:51:52,329 --> 00:51:56,180
they don't show up but having something

00:51:54,039 --> 00:51:58,490
where they can just then the network

00:51:56,180 --> 00:52:00,109
have a plug do whatever they like and

00:51:58,490 --> 00:52:01,400
get any questions answered but someone

00:52:00,109 --> 00:52:03,079
who is more experienced with them or

00:52:01,400 --> 00:52:07,099
even just have someone else working on

00:52:03,079 --> 00:52:08,720
the same problem with them that helps we

00:52:07,099 --> 00:52:11,510
still have very quick review times for

00:52:08,720 --> 00:52:13,010
patches and we're helping out wherever

00:52:11,510 --> 00:52:15,349
if you can this is something you can

00:52:13,010 --> 00:52:16,880
measure very well there's services for

00:52:15,349 --> 00:52:18,319
that I can highly recommend using them

00:52:16,880 --> 00:52:21,319
if you're a larger project that has a

00:52:18,319 --> 00:52:23,869
little bit of money for doing this their

00:52:21,319 --> 00:52:25,609
services that we basically throw in any

00:52:23,869 --> 00:52:27,349
number of repairs or repositories and

00:52:25,609 --> 00:52:30,920
they tell you the medium time of merge

00:52:27,349 --> 00:52:32,599
of merging discussions or how long

00:52:30,920 --> 00:52:32,930
issues linger until there's the next

00:52:32,599 --> 00:52:36,680
comment

00:52:32,930 --> 00:52:38,210
it's recommendable and we also integrate

00:52:36,680 --> 00:52:40,130
people into the project quickly so the

00:52:38,210 --> 00:52:42,140
bear of actually being involved into one

00:52:40,130 --> 00:52:43,730
of those teams is basically as I said

00:52:42,140 --> 00:52:48,920
you want to do something beyond your

00:52:43,730 --> 00:52:51,500
very personal aspect so in 60 members of

00:52:48,920 --> 00:52:53,890
the year where we start conferences the

00:52:51,500 --> 00:52:58,099
European one is West fest which I

00:52:53,890 --> 00:52:59,779
started it's in Europe every half a year

00:52:58,099 --> 00:53:01,130
next one is being is going to be in

00:52:59,779 --> 00:53:03,230
Paris in one a half month

00:53:01,130 --> 00:53:04,839
what's conf in the US every year and

00:53:03,230 --> 00:53:07,730
respect rest also in the US

00:53:04,839 --> 00:53:11,089
interestingly all these are organized by

00:53:07,730 --> 00:53:12,950
o qo rubyists there's a basically all

00:53:11,089 --> 00:53:14,779
the rest community is run by old-school

00:53:12,950 --> 00:53:16,520
rubyists it must be the first two

00:53:14,779 --> 00:53:18,619
characters in the name I don't know and

00:53:16,520 --> 00:53:20,900
interestingly here they are community

00:53:18,619 --> 00:53:23,059
run on community sponsored West fest

00:53:20,900 --> 00:53:24,890
does not run on Mozilla money rustbelt

00:53:23,059 --> 00:53:28,640
lost also not lost comes a little bit

00:53:24,890 --> 00:53:30,859
more but we're kind of making a point

00:53:28,640 --> 00:53:34,250
that if you want to have a community

00:53:30,859 --> 00:53:37,819
that holds up on itself without having

00:53:34,250 --> 00:53:40,369
the large sponsor around we also need to

00:53:37,819 --> 00:53:45,200
do that within the community and outside

00:53:40,369 --> 00:53:48,680
of Missoula and everything is we

00:53:45,200 --> 00:53:54,300
searched for ways for supporting people

00:53:48,680 --> 00:53:55,980
online we're on YouTube I that was

00:53:54,300 --> 00:53:58,920
sometimes during the night someone was

00:53:55,980 --> 00:54:00,570
like oh we could why not start a YouTube

00:53:58,920 --> 00:54:03,270
account and just get all the videos that

00:54:00,570 --> 00:54:05,970
someone has about rust and use the

00:54:03,270 --> 00:54:07,860
republish feature of YouTube so we've

00:54:05,970 --> 00:54:09,770
got like basically only have playlists

00:54:07,860 --> 00:54:12,480
that say this was at a conference in

00:54:09,770 --> 00:54:14,130
2015-2016 something like that it's now

00:54:12,480 --> 00:54:15,890
our biggest social media outlet and

00:54:14,130 --> 00:54:21,619
speaker than the Mozilla YouTube channel

00:54:15,890 --> 00:54:25,350
it is around 10 hours of work per year

00:54:21,619 --> 00:54:26,520
so if you're running a larger project

00:54:25,350 --> 00:54:28,619
and you're struggling with social media

00:54:26,520 --> 00:54:30,660
YouTube is extremely good at social

00:54:28,619 --> 00:54:32,369
media and they're extremely good at

00:54:30,660 --> 00:54:36,119
promoting videos not always in a good

00:54:32,369 --> 00:54:37,980
way but in this case hopefully yes we've

00:54:36,119 --> 00:54:41,430
got a Twitter account Twitter still

00:54:37,980 --> 00:54:44,760
works very well in IT communities also

00:54:41,430 --> 00:54:46,590
especially if the account has a name for

00:54:44,760 --> 00:54:48,930
actually being useful so you can post a

00:54:46,590 --> 00:54:51,360
question to the account and it will

00:54:48,930 --> 00:54:52,800
either retreat it or maybe answer it the

00:54:51,360 --> 00:54:56,460
person on the other side is actually the

00:54:52,800 --> 00:54:57,990
head of our documentation team I don't

00:54:56,460 --> 00:54:59,940
know how many arms they have when they

00:54:57,990 --> 00:55:04,350
reach home or something they must be

00:54:59,940 --> 00:55:07,080
alien but um the account is active and

00:55:04,350 --> 00:55:09,630
that helps a lot it's as big as the

00:55:07,080 --> 00:55:11,790
Swift account we tried running a global

00:55:09,630 --> 00:55:13,920
hackfest without getting Meetup

00:55:11,790 --> 00:55:17,490
organizers run something on the same

00:55:13,920 --> 00:55:19,980
weekend where people could chat doesn't

00:55:17,490 --> 00:55:22,920
really work it ends up with a lot of

00:55:19,980 --> 00:55:25,590
people randomly at the same time being

00:55:22,920 --> 00:55:27,359
somewhere in an office hacking but not

00:55:25,590 --> 00:55:29,250
really interacting so there's no point

00:55:27,359 --> 00:55:31,260
making that on the same weekend or

00:55:29,250 --> 00:55:34,290
something like this it's a huge piece of

00:55:31,260 --> 00:55:35,820
effort for not much value so that was

00:55:34,290 --> 00:55:37,170
definitely more effort than actually

00:55:35,820 --> 00:55:39,900
running the YouTube account for a year

00:55:37,170 --> 00:55:41,880
and the best community and this is not

00:55:39,900 --> 00:55:43,740
something a quite got a handle on is

00:55:41,880 --> 00:55:47,970
there's a lot of people that will like

00:55:43,740 --> 00:55:50,369
writing and so there's always like tiny

00:55:47,970 --> 00:55:52,500
tutorials on everything around which is

00:55:50,369 --> 00:55:54,960
also something that if you find out that

00:55:52,500 --> 00:55:56,550
people are doing this put them on your

00:55:54,960 --> 00:55:58,050
website or something have someone who

00:55:56,550 --> 00:56:01,160
actually goes through all of these and

00:55:58,050 --> 00:56:05,320
kind of arranges these content editing

00:56:01,160 --> 00:56:07,270
is a helpful thing on that scope

00:56:05,320 --> 00:56:09,760
so the conclusions for that year social

00:56:07,270 --> 00:56:11,170
media isn't a bad word absolutely do

00:56:09,760 --> 00:56:12,430
that find someone who actually likes

00:56:11,170 --> 00:56:14,280
doing that if you have someone in your

00:56:12,430 --> 00:56:18,490
project who likes doing social media

00:56:14,280 --> 00:56:20,020
it's nice actively speaking is way

00:56:18,490 --> 00:56:22,060
better than waiting if you've got a

00:56:20,020 --> 00:56:23,560
question and if you if you want to know

00:56:22,060 --> 00:56:25,900
how people are using your project or

00:56:23,560 --> 00:56:28,060
what you want to go where you want the

00:56:25,900 --> 00:56:30,070
project to go and actively ask them and

00:56:28,060 --> 00:56:31,840
the pop factor is only half of the story

00:56:30,070 --> 00:56:35,130
because especially on the back tracker

00:56:31,840 --> 00:56:39,780
there is rarely any kind of people that

00:56:35,130 --> 00:56:42,460
do like the bug tracker is mainly

00:56:39,780 --> 00:56:45,550
hobbyists for us it's pretty rarely

00:56:42,460 --> 00:56:48,850
production users so asking production

00:56:45,550 --> 00:56:50,800
users is very useful again so the base

00:56:48,850 --> 00:56:53,950
is better than aha and then a lot of

00:56:50,800 --> 00:56:54,940
half solutions this has been very good

00:56:53,950 --> 00:56:57,970
for us and this is something that

00:56:54,940 --> 00:57:00,940
production users appreciate not there or

00:56:57,970 --> 00:57:06,130
working is vastly better than maybe

00:57:00,940 --> 00:57:08,940
there and maybe working okay any kind of

00:57:06,130 --> 00:57:08,940
questions up till now

00:57:19,400 --> 00:57:26,480
in that case let's come to the growing

00:57:23,420 --> 00:57:29,360
pains because it's not like we got that

00:57:26,480 --> 00:57:29,630
all settled and we're just chugging

00:57:29,360 --> 00:57:32,540
along

00:57:29,630 --> 00:57:36,050
it's just 2016 was kind of the year

00:57:32,540 --> 00:57:39,230
where we could watch things growing and

00:57:36,050 --> 00:57:39,980
like at the beginning growing isn't much

00:57:39,230 --> 00:57:41,960
of a problem

00:57:39,980 --> 00:57:44,870
hey cool people are adopting our thing

00:57:41,960 --> 00:57:46,220
we got a fool like one gap here one gap

00:57:44,870 --> 00:57:52,340
there someone starts running a

00:57:46,220 --> 00:57:55,670
conference but that's also ok so yeah so

00:57:52,340 --> 00:57:58,520
Lane nearly doubled in 2017 we asked for

00:57:55,670 --> 00:58:02,210
stability that year only 90 percent

00:57:58,520 --> 00:58:04,400
never had an upgrade problem from the

00:58:02,210 --> 00:58:07,400
other one we know about 8% that they hit

00:58:04,400 --> 00:58:11,090
type system bug which needed to be fixed

00:58:07,400 --> 00:58:12,890
absolutely so that's painful but in

00:58:11,090 --> 00:58:16,910
general the whole thing with the upgrade

00:58:12,890 --> 00:58:19,820
story worked almost everyone uses our

00:58:16,910 --> 00:58:23,750
tuning so it must be ok

00:58:19,820 --> 00:58:25,340
at least and from a couple of people we

00:58:23,750 --> 00:58:26,990
know that are not using our tooling

00:58:25,340 --> 00:58:28,940
there are in organizations that have a

00:58:26,990 --> 00:58:30,890
global build system where you must use

00:58:28,940 --> 00:58:33,370
that build system instead of whatever

00:58:30,890 --> 00:58:36,950
the language providers it provides

00:58:33,370 --> 00:58:39,920
Google Facebook Dropbox all do this and

00:58:36,950 --> 00:58:44,020
people rate the tooling favorably it's

00:58:39,920 --> 00:58:51,290
usually a 4 out of 5 or a 5 out of 5

00:58:44,020 --> 00:58:52,520
biasing towards 5 out of 5 community 99%

00:58:51,290 --> 00:58:54,770
of people have no issue with the

00:58:52,520 --> 00:58:59,840
community and 75% of these theater

00:58:54,770 --> 00:59:01,640
community favorably I'm was also

00:58:59,840 --> 00:59:04,220
surprised of the numbers but that was

00:59:01,640 --> 00:59:06,350
what the answer was still all these

00:59:04,220 --> 00:59:08,240
numbers good we don't know there's no

00:59:06,350 --> 00:59:09,680
comparisons maybe anyone who had an

00:59:08,240 --> 00:59:12,470
issue with the community community just

00:59:09,680 --> 00:59:14,360
didn't reply to the survey and didn't

00:59:12,470 --> 00:59:19,160
want him invest 10 minutes in going

00:59:14,360 --> 00:59:21,410
through all the questions so again it

00:59:19,160 --> 00:59:23,210
could be that these are just perfectly

00:59:21,410 --> 00:59:25,220
normal numbers for programming language

00:59:23,210 --> 00:59:27,350
that people are invested in maybe the

00:59:25,220 --> 00:59:30,680
numbers are the same for go or high

00:59:27,350 --> 00:59:32,490
school or whatever in this case well

00:59:30,680 --> 00:59:34,950
cool I got the same at

00:59:32,490 --> 00:59:40,530
I didn't like at least we're not broken

00:59:34,950 --> 00:59:41,970
but I I have no I haven't I'm happy

00:59:40,530 --> 00:59:45,210
about those numbers but I have no good

00:59:41,970 --> 00:59:47,010
feeling on is this a success or is this

00:59:45,210 --> 00:59:50,220
just like the normal state in our

00:59:47,010 --> 00:59:51,540
community I don't know but the other

00:59:50,220 --> 00:59:55,849
thing that we figured out is we don't

00:59:51,540 --> 00:59:57,960
know rust as a project um

00:59:55,849 --> 00:59:59,580
producing and this is not the first time

00:59:57,960 --> 01:00:01,470
I encountered producing the language

00:59:59,580 --> 01:00:04,560
doesn't mean you won't discover yourself

01:00:01,470 --> 01:00:08,460
things for yourself one of my most

01:00:04,560 --> 01:00:10,619
beloved nails from one of the from the

01:00:08,460 --> 01:00:12,390
really very list is one where the

01:00:10,619 --> 01:00:15,950
inventor of the language himself says oh

01:00:12,390 --> 01:00:18,180
wait that's possible I didn't know and

01:00:15,950 --> 01:00:21,900
last year we had quite a lot of these

01:00:18,180 --> 01:00:23,430
things I was at a talk at address for

01:00:21,900 --> 01:00:25,980
Zurich where I was sitting behind the

01:00:23,430 --> 01:00:28,680
language designer and he was furiously

01:00:25,980 --> 01:00:33,060
taking notes during one of the talks of

01:00:28,680 --> 01:00:36,930
what the speaker was presenting as an

01:00:33,060 --> 01:00:38,550
abstraction so you will definitely if

01:00:36,930 --> 01:00:40,080
you if you are working with something as

01:00:38,550 --> 01:00:43,589
complex as a programming language do you

01:00:40,080 --> 01:00:47,070
both figure out that some things you

01:00:43,589 --> 01:00:48,230
won't they that you won't discover all

01:00:47,070 --> 01:00:50,520
those things yourself for you and

01:00:48,230 --> 01:00:52,020
understand everything even the people

01:00:50,520 --> 01:00:55,640
that design the language the rest of the

01:00:52,020 --> 01:00:59,280
project even more there are new api's

01:00:55,640 --> 01:01:00,630
practices forming themselves new ways of

01:00:59,280 --> 01:01:02,160
interacting with the language making

01:01:00,630 --> 01:01:03,660
things new there are more economics

01:01:02,160 --> 01:01:06,630
without actually changing the language

01:01:03,660 --> 01:01:08,490
which is also a good argument for not

01:01:06,630 --> 01:01:10,770
changing programming languages too

01:01:08,490 --> 01:01:12,869
quickly because some of the issues might

01:01:10,770 --> 01:01:16,200
resolve themselves because someone fine

01:01:12,869 --> 01:01:19,160
actually finds out how to make this to

01:01:16,200 --> 01:01:23,130
use this feature in a genome again why

01:01:19,160 --> 01:01:25,290
and also how do we include that should

01:01:23,130 --> 01:01:26,849
be how to how to include rust into other

01:01:25,290 --> 01:01:28,380
projects is actually becoming the main

01:01:26,849 --> 01:01:30,270
question we get a lot of questions of

01:01:28,380 --> 01:01:31,859
I've got this project I would like to

01:01:30,270 --> 01:01:34,140
use rust but I obviously can't put the

01:01:31,859 --> 01:01:36,570
project so how can I include it which

01:01:34,140 --> 01:01:38,430
means that a lot of touring around this

01:01:36,570 --> 01:01:41,190
will be written binding generators and

01:01:38,430 --> 01:01:43,260
all these things so we'll get new

01:01:41,190 --> 01:01:45,240
patterns coming up and especially it

01:01:43,260 --> 01:01:47,220
turns out that

01:01:45,240 --> 01:01:50,280
a feature that I just described in the

01:01:47,220 --> 01:01:51,540
beginning so at the beginning a lot of

01:01:50,280 --> 01:01:52,680
people were like here ownership is

01:01:51,540 --> 01:01:55,680
interesting but then there's this

01:01:52,680 --> 01:01:58,320
borrowing thing two years later it turns

01:01:55,680 --> 01:02:00,980
out Boehm isn't that interesting and I

01:01:58,320 --> 01:02:05,400
just gave a workshop yesterday whereas

01:02:00,980 --> 01:02:06,690
that the final part of the the workshop

01:02:05,400 --> 01:02:09,270
I talked for half now and how you

01:02:06,690 --> 01:02:10,530
shouldn't overuse boring because complex

01:02:09,270 --> 01:02:12,270
pointer situations aren't that

01:02:10,530 --> 01:02:13,800
interesting because usually you would

01:02:12,270 --> 01:02:15,840
actually like to copy which means your

01:02:13,800 --> 01:02:18,000
own memory and you talking about

01:02:15,840 --> 01:02:19,680
ownership but ownership is it's probably

01:02:18,000 --> 01:02:22,110
starting to become used for a lot of

01:02:19,680 --> 01:02:24,090
things there are state statically

01:02:22,110 --> 01:02:27,660
enforceable state machines written using

01:02:24,090 --> 01:02:29,910
the ownership system it's used to model

01:02:27,660 --> 01:02:32,190
device drivers in memory to make sure

01:02:29,910 --> 01:02:34,800
that people don't get like secondary

01:02:32,190 --> 01:02:37,320
handles on these kind of things it's

01:02:34,800 --> 01:02:39,270
extremely useful in concurrency because

01:02:37,320 --> 01:02:40,920
most of what concurrency most

01:02:39,270 --> 01:02:43,650
concurrency problems kind of boil down

01:02:40,920 --> 01:02:45,300
to oh we didn't properly figure out

01:02:43,650 --> 01:02:47,640
who's actually responsible for this

01:02:45,300 --> 01:02:49,110
memory location and ownership says you

01:02:47,640 --> 01:02:50,910
must always figure out who is

01:02:49,110 --> 01:02:53,850
responsible for this memory situation

01:02:50,910 --> 01:02:56,340
this memory location this is the mostly

01:02:53,850 --> 01:02:59,400
more useful thing and that wasn't this

01:02:56,340 --> 01:03:02,790
is still coming up in the community as

01:02:59,400 --> 01:03:04,710
as more becoming a practice that this is

01:03:02,790 --> 01:03:06,780
the interesting thing how can i model

01:03:04,710 --> 01:03:12,960
things the ownership not how can i model

01:03:06,780 --> 01:03:16,290
things those pointers that also meant

01:03:12,960 --> 01:03:17,760
that we needed to rewrite the book we

01:03:16,290 --> 01:03:20,580
have a second edition now and this is a

01:03:17,760 --> 01:03:22,770
this was a huge effort and we're gonna

01:03:20,580 --> 01:03:30,840
have a third edition by the end of this

01:03:22,770 --> 01:03:34,619
year so this is a vast amount of this

01:03:30,840 --> 01:03:36,900
project just writing how people should

01:03:34,619 --> 01:03:39,330
deal with that implementing the

01:03:36,900 --> 01:03:45,240
programming language is suddenly

01:03:39,330 --> 01:03:47,369
becoming a fringe task it's like all

01:03:45,240 --> 01:03:51,210
respect to those people that actually do

01:03:47,369 --> 01:03:52,770
it but on the scope of the project the

01:03:51,210 --> 01:03:55,770
people that are involved in actually

01:03:52,770 --> 01:03:57,930
driving language features becomes

01:03:55,770 --> 01:04:00,569
smaller and smaller

01:03:57,930 --> 01:04:02,099
driving library features that's a

01:04:00,569 --> 01:04:04,650
different thing people thinking about

01:04:02,099 --> 01:04:08,640
the API is but actually starting still

01:04:04,650 --> 01:04:10,800
working on language features and

01:04:08,640 --> 01:04:12,540
everything is still now that we got all

01:04:10,800 --> 01:04:14,280
the bases covered which areas should we

01:04:12,540 --> 01:04:15,540
focus on are we even solving useful

01:04:14,280 --> 01:04:16,800
problems like there's some people that

01:04:15,540 --> 01:04:19,380
totally want to use the rust and game

01:04:16,800 --> 01:04:20,819
development or prior to them you can

01:04:19,380 --> 01:04:23,760
totally use it in game development but

01:04:20,819 --> 01:04:26,040
is this this is an area we should focus

01:04:23,760 --> 01:04:28,319
on like should all next economics

01:04:26,040 --> 01:04:31,020
pushers be making the thing for game

01:04:28,319 --> 01:04:32,550
developers easier should it be making

01:04:31,020 --> 01:04:35,609
things for embedded developers easier

01:04:32,550 --> 01:04:37,829
making server development easier making

01:04:35,609 --> 01:04:40,109
that what programming is easier this

01:04:37,829 --> 01:04:43,470
suddenly became a problem which also led

01:04:40,109 --> 01:04:44,910
to us going like kind of in all

01:04:43,470 --> 01:04:47,369
directions trying to figure things out

01:04:44,910 --> 01:04:49,319
and the thing is hobbyist problems

01:04:47,369 --> 01:04:50,700
aren't necessary production user problem

01:04:49,319 --> 01:04:52,230
so I recently spoke to someone on

01:04:50,700 --> 01:04:55,770
conference and he was like yeah I got

01:04:52,230 --> 01:04:57,630
like an embedded an embedded development

01:04:55,770 --> 01:05:01,200
environment set up and that took me the

01:04:57,630 --> 01:05:04,170
better part of an evening okay so how

01:05:01,200 --> 01:05:05,520
long we have one and a half hours okay

01:05:04,170 --> 01:05:07,200
is it working Malik do you have any

01:05:05,520 --> 01:05:08,880
issues of that no it's like it's already

01:05:07,200 --> 01:05:11,700
fine it's very great it just took me one

01:05:08,880 --> 01:05:13,200
and a half hours to set up this is not a

01:05:11,700 --> 01:05:15,299
production user problem because if

01:05:13,200 --> 01:05:17,430
you're in a company then someone tells

01:05:15,299 --> 01:05:21,260
you take some one hour and a half hours

01:05:17,430 --> 01:05:25,470
to set that up managers like good

01:05:21,260 --> 01:05:27,059
because these obviously for hobbyists

01:05:25,470 --> 01:05:30,240
where you only have like two evenings

01:05:27,059 --> 01:05:34,890
suspended or even less each week this is

01:05:30,240 --> 01:05:37,260
an issue still the question is this an

01:05:34,890 --> 01:05:41,430
issue that you on a larger scale as a

01:05:37,260 --> 01:05:44,609
project need to cover or is there a way

01:05:41,430 --> 01:05:47,069
to basically work for both sides or is

01:05:44,609 --> 01:05:48,660
this an immediate issue this will

01:05:47,069 --> 01:05:50,220
probably become less than the next one

01:05:48,660 --> 01:05:51,450
or two yes but is this an immediate

01:05:50,220 --> 01:05:57,440
issue as something else an immediate

01:05:51,450 --> 01:05:57,440
issue that was a huge problem 2017 still

01:05:58,549 --> 01:06:05,309
talking about things that worked

01:06:00,720 --> 01:06:07,349
I recently cycle worked so after two

01:06:05,309 --> 01:06:09,480
years that's time to look back we only

01:06:07,349 --> 01:06:11,510
watched one release which was 114 what

01:06:09,480 --> 01:06:14,960
we accidentally made

01:06:11,510 --> 01:06:18,559
made an API mistake otherwise we had no

01:06:14,960 --> 01:06:20,660
larger issues and also turned out the

01:06:18,559 --> 01:06:22,849
benefit of actually being consumable

01:06:20,660 --> 01:06:24,559
like having consumable changes leads to

01:06:22,849 --> 01:06:27,109
people updating that compiler regularly

01:06:24,559 --> 01:06:29,990
if it's like every six weeks and if it

01:06:27,109 --> 01:06:31,670
says if there's changes we do

01:06:29,990 --> 01:06:33,260
duplications we do no breakage but for

01:06:31,670 --> 01:06:34,910
example we do deprecations in the sense

01:06:33,260 --> 01:06:36,920
of now this is an API you shouldn't use

01:06:34,910 --> 01:06:38,809
anymore there's something else people

01:06:36,920 --> 01:06:40,670
follow that pretty quickly if that's the

01:06:38,809 --> 01:06:45,109
thing of ten minutes to follow people do

01:06:40,670 --> 01:06:47,599
that and interesting me we are practices

01:06:45,109 --> 01:06:49,849
leader people often don't see that but

01:06:47,599 --> 01:06:52,180
the Community Action interaction that

01:06:49,849 --> 01:06:55,760
model that we have was adopted by OGS

01:06:52,180 --> 01:07:00,890
swift and ember projects now have an RFC

01:06:55,760 --> 01:07:03,230
process and they copied ours and our

01:07:00,890 --> 01:07:08,869
management model in general has taken

01:07:03,230 --> 01:07:10,940
interest in so this is having management

01:07:08,869 --> 01:07:16,039
as part of the open source project very

01:07:10,940 --> 01:07:19,880
very early even before release and not

01:07:16,039 --> 01:07:22,160
calling it in any way like we say

01:07:19,880 --> 01:07:27,289
management like it should be said it

01:07:22,160 --> 01:07:33,559
isn't it isn't the bad word was rave an

01:07:27,289 --> 01:07:35,059
official to the project still because

01:07:33,559 --> 01:07:36,619
we're running that for a while we are

01:07:35,059 --> 01:07:40,849
actually running into issues that other

01:07:36,619 --> 01:07:42,710
projects will run into the RC process is

01:07:40,849 --> 01:07:46,339
highly successful and a lot of people

01:07:42,710 --> 01:07:49,220
are proposing things that brings issues

01:07:46,339 --> 01:07:52,190
first of all on these kinds of forms

01:07:49,220 --> 01:07:55,400
there's always people with too much time

01:07:52,190 --> 01:07:57,410
that swamped the process there are FCS

01:07:55,400 --> 01:08:01,490
that obviously have no practicality but

01:07:57,410 --> 01:08:03,920
they are like written in a staggering

01:08:01,490 --> 01:08:05,570
amount of words into how we basically

01:08:03,920 --> 01:08:07,070
should throw it all away

01:08:05,570 --> 01:08:11,030
and rust should be a completely

01:08:07,070 --> 01:08:13,490
different language this is this is

01:08:11,030 --> 01:08:15,620
rather rare but also there's there's

01:08:13,490 --> 01:08:17,870
people that on any kind of RC they have

01:08:15,620 --> 01:08:19,549
their opinions to put in which is okay

01:08:17,870 --> 01:08:21,830
it's just a volume that you need to

01:08:19,549 --> 01:08:24,109
handle obviously people are allowed to

01:08:21,830 --> 01:08:28,130
have their opinions and we want them

01:08:24,109 --> 01:08:29,780
it's just sometimes like the amount of

01:08:28,130 --> 01:08:34,880
volume that you need to handle gets

01:08:29,780 --> 01:08:37,370
staggering but there's also people

01:08:34,880 --> 01:08:41,510
because of that volume that have note

01:08:37,370 --> 01:08:44,180
with no time to follow and then they

01:08:41,510 --> 01:08:46,430
feel excluded so if you like I don't

01:08:44,180 --> 01:08:49,700
know which part of C I should put my

01:08:46,430 --> 01:08:52,370
opinions on to actually just like give

01:08:49,700 --> 01:08:54,710
people a glance on what I would like the

01:08:52,370 --> 01:08:58,490
language should be and this tends to be

01:08:54,710 --> 01:09:01,160
a much bigger problem like the ones

01:08:58,490 --> 01:09:04,430
above if it's really bad you can just

01:09:01,160 --> 01:09:06,140
ignore them where do you just have

01:09:04,430 --> 01:09:07,190
someone who goes through that and is

01:09:06,140 --> 01:09:09,549
like oh that's interesting that's

01:09:07,190 --> 01:09:13,220
interesting that's interesting and that

01:09:09,549 --> 01:09:16,670
not these kind of things but people that

01:09:13,220 --> 01:09:18,680
don't interact well it costs you direct

01:09:16,670 --> 01:09:21,980
with them and they're still frustrated

01:09:18,680 --> 01:09:23,290
and the other thing is when you're

01:09:21,980 --> 01:09:26,270
talking about an international project

01:09:23,290 --> 01:09:28,220
non English speakers have an issue to

01:09:26,270 --> 01:09:30,589
follow these kinds of discussions first

01:09:28,220 --> 01:09:33,640
of all native English speakers write

01:09:30,589 --> 01:09:36,230
much faster they write much clearer and

01:09:33,640 --> 01:09:39,109
when you're doing these interactions

01:09:36,230 --> 01:09:43,130
regularly please check if that other

01:09:39,109 --> 01:09:47,660
person is a non-native speaker because

01:09:43,130 --> 01:09:49,580
that might be that their arguments have

01:09:47,660 --> 01:09:52,190
holds just because they can't express

01:09:49,580 --> 01:09:54,290
them better and it's a real problem if

01:09:52,190 --> 01:09:57,140
you have various people that are very

01:09:54,290 --> 01:09:59,180
strong in discussion that jump on all of

01:09:57,140 --> 01:10:00,860
these and have the habit of destroying

01:09:59,180 --> 01:10:03,620
other people's arguments for the sake of

01:10:00,860 --> 01:10:05,420
destroying other people's arguments this

01:10:03,620 --> 01:10:07,010
is even if speaker that people are

01:10:05,420 --> 01:10:09,230
speaking English fluently something

01:10:07,010 --> 01:10:11,360
where they tend to struggle and that

01:10:09,230 --> 01:10:13,400
leads to a lot of problems and that was

01:10:11,360 --> 01:10:15,140
the ones that we run into the that year

01:10:13,400 --> 01:10:17,650
and they are not fully solved I have to

01:10:15,140 --> 01:10:22,450
say and

01:10:17,650 --> 01:10:27,310
you finally got adopted by Mozilla the

01:10:22,450 --> 01:10:31,060
end of 2017 we finally got into Firefox

01:10:27,310 --> 01:10:32,860
the CSS styling engine is now powered by

01:10:31,060 --> 01:10:34,840
rust using a lot of the concurrency

01:10:32,860 --> 01:10:36,580
features but before that it was

01:10:34,840 --> 01:10:39,070
basically they're like small tests that

01:10:36,580 --> 01:10:41,260
like having one of the UL passes we've

01:10:39,070 --> 01:10:42,730
written in rust like some small things

01:10:41,260 --> 01:10:44,290
some of the media parsing to see if

01:10:42,730 --> 01:10:47,080
basically to see if the build system

01:10:44,290 --> 01:10:50,850
worked and if the integration work but

01:10:47,080 --> 01:10:53,110
this was the first time we were actually

01:10:50,850 --> 01:10:54,900
powering a piece of Firefox and this is

01:10:53,110 --> 01:11:02,200
a piece that was ported over from servo

01:10:54,900 --> 01:11:03,850
so finally like a fox coming up so the

01:11:02,200 --> 01:11:05,470
conclusion here have a sense of

01:11:03,850 --> 01:11:08,440
accomplishment sometime so that was

01:11:05,470 --> 01:11:11,860
really great for the project and it's

01:11:08,440 --> 01:11:13,720
okay to well bake cakes and everything

01:11:11,860 --> 01:11:17,110
and have a Firefox release party and so

01:11:13,720 --> 01:11:18,970
on so forth but the other thing is

01:11:17,110 --> 01:11:20,800
programming languages are extremely

01:11:18,970 --> 01:11:26,800
complex also to the people producing

01:11:20,800 --> 01:11:28,780
them and that either may lead to a

01:11:26,800 --> 01:11:29,860
moment where you're completely blocked

01:11:28,780 --> 01:11:31,540
because you don't know if you can

01:11:29,860 --> 01:11:35,620
actually move things you get a lot of

01:11:31,540 --> 01:11:38,410
very conservative or you just have to

01:11:35,620 --> 01:11:42,850
well have the guts to do all the changes

01:11:38,410 --> 01:11:44,380
and have things in place to check if

01:11:42,850 --> 01:11:46,150
you're not breaking the law this is one

01:11:44,380 --> 01:11:47,500
of the big problems if you change have a

01:11:46,150 --> 01:11:50,800
bug in a programming language you're

01:11:47,500 --> 01:11:54,340
breaking the world and also have some

01:11:50,800 --> 01:11:56,500
ways to identify issues early so having

01:11:54,340 --> 01:11:59,290
these large management groups actually

01:11:56,500 --> 01:12:01,420
helps people that like management are

01:11:59,290 --> 01:12:04,060
actually good at catching these kinds of

01:12:01,420 --> 01:12:06,100
issues because some people might talk to

01:12:04,060 --> 01:12:09,340
them about that and like express their

01:12:06,100 --> 01:12:12,250
feelings and all of these are valid and

01:12:09,340 --> 01:12:15,910
making sure to find ways in how to deal

01:12:12,250 --> 01:12:18,210
with them is important any questions up

01:12:15,910 --> 01:12:18,210
to now

01:12:22,949 --> 01:12:30,849
okay then I just go on and we just have

01:12:27,099 --> 01:12:34,239
Q&A afterwards so this year the future

01:12:30,849 --> 01:12:37,599
is unwritten one of our solutions for

01:12:34,239 --> 01:12:42,760
the safety problem yes we ran a blogging

01:12:37,599 --> 01:12:44,260
campaign so instead of having people

01:12:42,760 --> 01:12:46,030
search for a venue where they could

01:12:44,260 --> 01:12:48,400
their feedback could put their feedback

01:12:46,030 --> 01:12:51,429
and we call that a called over Christmas

01:12:48,400 --> 01:12:55,239
for people to use January to write a

01:12:51,429 --> 01:12:57,130
blog post about how they would imagine

01:12:55,239 --> 01:12:59,530
the language to be like what would be

01:12:57,130 --> 01:13:01,869
your favorite things so that was kind of

01:12:59,530 --> 01:13:04,119
focusing all these kind of small

01:13:01,869 --> 01:13:05,559
feelings towards this is the place where

01:13:04,119 --> 01:13:07,630
you can put them and we're going to read

01:13:05,559 --> 01:13:10,380
them all we kind of do a write-up of

01:13:07,630 --> 01:13:14,199
them all we're going to decide on these

01:13:10,380 --> 01:13:16,449
on this input so they were encouraged to

01:13:14,199 --> 01:13:18,219
write down their wishes so that could be

01:13:16,449 --> 01:13:20,139
oh here's a feature list I want to have

01:13:18,219 --> 01:13:21,550
and one these are c merged or just

01:13:20,139 --> 01:13:23,590
something i would like to have a push in

01:13:21,550 --> 01:13:25,780
that direction and that would also allow

01:13:23,590 --> 01:13:28,179
people to express things that are

01:13:25,780 --> 01:13:30,039
outside of the scope of the RFC process

01:13:28,179 --> 01:13:34,110
for example i would like someone to

01:13:30,039 --> 01:13:38,139
start a tutorial block class a blog

01:13:34,110 --> 01:13:39,760
podcast for intermediate users who

01:13:38,139 --> 01:13:41,559
totally turned out that people were like

01:13:39,760 --> 01:13:43,900
oh beginner's documentation that's quite

01:13:41,559 --> 01:13:46,900
good but what if i'm already experienced

01:13:43,900 --> 01:13:48,460
with c++ and know my way around systems

01:13:46,900 --> 01:13:50,019
programming and i would actually like to

01:13:48,460 --> 01:13:52,480
skip all of this this is the structure

01:13:50,019 --> 01:13:56,889
this is a memory representation give me

01:13:52,480 --> 01:13:59,980
what's giving you what's new so these

01:13:56,889 --> 01:14:02,110
kind of things and we got a hundred of

01:13:59,980 --> 01:14:05,559
blog posts or essays you can find them

01:14:02,110 --> 01:14:07,659
all and that led to a community member

01:14:05,559 --> 01:14:09,460
coming up and say oh it would be cool if

01:14:07,659 --> 01:14:11,769
someone would actually do a build a

01:14:09,460 --> 01:14:14,889
website where these are all archived so

01:14:11,769 --> 01:14:19,719
we dressed up net is a project of a

01:14:14,889 --> 01:14:21,159
previously unknown community member and

01:14:19,719 --> 01:14:23,920
we ended up being a stack overflow is

01:14:21,159 --> 01:14:28,449
most loved language third time in a row

01:14:23,920 --> 01:14:31,110
why i have a rank fear where we generate

01:14:28,449 --> 01:14:33,090
and manage both plus and Buzz

01:14:31,110 --> 01:14:35,160
a great thing if you can pack it with

01:14:33,090 --> 01:14:37,470
actual technology I have absolutely no

01:14:35,160 --> 01:14:40,140
problem of saying I do marketing as long

01:14:37,470 --> 01:14:42,240
as I feel good with what I market

01:14:40,140 --> 01:14:46,170
I know marketing in the tech community

01:14:42,240 --> 01:14:52,410
is sometimes considered a bad word it

01:14:46,170 --> 01:14:55,110
actually works and I would actually like

01:14:52,410 --> 01:14:57,030
other projects to be better at that if

01:14:55,110 --> 01:14:58,470
someone has any kinds of questions or

01:14:57,030 --> 01:15:00,690
know someone who has questions about

01:14:58,470 --> 01:15:03,840
that community a trust language org is

01:15:00,690 --> 01:15:05,310
also open for other open-source projects

01:15:03,840 --> 01:15:08,250
this is where we go to conferences and

01:15:05,310 --> 01:15:10,590
talk about these kind of things because

01:15:08,250 --> 01:15:13,560
we would actually not like to

01:15:10,590 --> 01:15:15,540
participate in a language war I think

01:15:13,560 --> 01:15:20,070
the resurgence of systems programming is

01:15:15,540 --> 01:15:24,900
an incredibly interesting thing and we

01:15:20,070 --> 01:15:28,650
are currently at a place where or at a

01:15:24,900 --> 01:15:32,100
phase where any kind of growth in that

01:15:28,650 --> 01:15:34,170
area benefits all these languages like a

01:15:32,100 --> 01:15:35,940
lot of the C++ features that we

01:15:34,170 --> 01:15:38,100
currently have or that are currently

01:15:35,940 --> 01:15:42,060
coming up are coming up because this

01:15:38,100 --> 01:15:43,910
with trusts D name whatever it's it's

01:15:42,060 --> 01:15:46,800
not just us it's because this

01:15:43,910 --> 01:15:49,740
interesting new ideas coming in but

01:15:46,800 --> 01:15:51,810
obviously we're not here to kill all C++

01:15:49,740 --> 01:15:53,070
code bases in the world it's absolutely

01:15:51,810 --> 01:15:56,010
not the goal we're here to giving

01:15:53,070 --> 01:15:58,830
another option and if someone in the C++

01:15:56,010 --> 01:16:00,030
committees feels like oh cool this is

01:15:58,830 --> 01:16:04,430
something interesting we're going to put

01:16:00,030 --> 01:16:04,430
that onto C++ yeah I think everyone wins

01:16:05,090 --> 01:16:11,400
and people follow that buzz and if they

01:16:08,670 --> 01:16:14,790
find something they're happy it's the

01:16:11,400 --> 01:16:17,340
thing we have more teams now we have 17

01:16:14,790 --> 01:16:20,010
teams with over 100 people two of them

01:16:17,340 --> 01:16:23,040
just spontaneously formed two weeks ago

01:16:20,010 --> 01:16:24,660
at the audience one group of people that

01:16:23,040 --> 01:16:26,640
wants to do formal verification and

01:16:24,660 --> 01:16:28,260
another group that just wants to work on

01:16:26,640 --> 01:16:29,970
code generation so this is like the

01:16:28,260 --> 01:16:34,110
granularity we have now we have a code

01:16:29,970 --> 01:16:35,490
generation working group and the

01:16:34,110 --> 01:16:36,810
community teams split for example we

01:16:35,490 --> 01:16:39,750
have Russ bridge which cares about

01:16:36,810 --> 01:16:41,580
outreach and workshops we have the event

01:16:39,750 --> 01:16:42,059
team because we have so many events that

01:16:41,580 --> 01:16:44,389
it makes

01:16:42,059 --> 01:16:46,169
to actually have a central group

01:16:44,389 --> 01:16:47,669
managing all the interaction with

01:16:46,169 --> 01:16:49,889
Mozilla for example we have a Content

01:16:47,669 --> 01:16:51,749
team that does these like this directly

01:16:49,889 --> 01:16:53,219
comes out of that repress project why

01:16:51,749 --> 01:16:54,569
not have a team that actually it cares

01:16:53,219 --> 01:16:58,949
about all the stuff that people write

01:16:54,569 --> 01:17:00,989
and write and film and speak into the

01:16:58,949 --> 01:17:02,579
microphone and the switchboard team

01:17:00,989 --> 01:17:04,499
because that task has become so big is

01:17:02,579 --> 01:17:07,010
now its own team we're more than twenty

01:17:04,499 --> 01:17:09,329
people in the community management alone

01:17:07,010 --> 01:17:12,739
pretty often they are also part of other

01:17:09,329 --> 01:17:15,719
teams but they're taking that on

01:17:12,739 --> 01:17:21,689
teaching us interestingly remains a

01:17:15,719 --> 01:17:24,510
problem the problem there is teaching

01:17:21,689 --> 01:17:26,010
programming remains a problem this also

01:17:24,510 --> 01:17:27,989
no one who can give you any kind of

01:17:26,010 --> 01:17:31,219
conclusive answer on what what works

01:17:27,989 --> 01:17:33,749
it's all good Felix some people say oh

01:17:31,219 --> 01:17:37,139
programming mark works much better when

01:17:33,749 --> 01:17:38,789
it's visual why is there paper for that

01:17:37,139 --> 01:17:41,639
is there study is there something no I

01:17:38,789 --> 01:17:44,789
do that all the time great so it's all

01:17:41,639 --> 01:17:47,280
like an Ag data every as they say that's

01:17:44,789 --> 01:17:48,659
a huge problem any kind of new

01:17:47,280 --> 01:17:50,819
programming language that is a little

01:17:48,659 --> 01:17:52,979
more complex than JavaScript is always

01:17:50,819 --> 01:17:54,659
like oh don't use that as a first

01:17:52,979 --> 01:17:56,789
programming language because suddenly

01:17:54,659 --> 01:17:57,989
you have to handle memory on the other

01:17:56,789 --> 01:17:59,819
hand we have people that come to me I

01:17:57,989 --> 01:18:01,739
can learn are like I would really like

01:17:59,819 --> 01:18:04,979
to know how my processor and how my

01:18:01,739 --> 01:18:09,659
memory works but I'll teach them

01:18:04,979 --> 01:18:11,369
JavaScript so we have no very good model

01:18:09,659 --> 01:18:14,639
of that and that's also a huge problem

01:18:11,369 --> 01:18:17,219
for us I'm training the language and I

01:18:14,639 --> 01:18:22,139
have to say I'm doing the best that I

01:18:17,219 --> 01:18:24,030
can but yeah so really be very

01:18:22,139 --> 01:18:28,379
interested in talking to people about

01:18:24,030 --> 01:18:30,749
that and we are within research group so

01:18:28,379 --> 01:18:33,359
if someone is researching these kinds of

01:18:30,749 --> 01:18:35,579
issues we can maybe even get to contact

01:18:33,359 --> 01:18:38,639
there so the goals for this year ended

01:18:35,579 --> 01:18:40,469
up more tangible though we want to have

01:18:38,639 --> 01:18:42,719
a stable story for bare metal embedded

01:18:40,469 --> 01:18:46,949
and this is probably going to be by

01:18:42,719 --> 01:18:49,909
August which means you can develop using

01:18:46,949 --> 01:18:53,650
the stable compiler on a number of

01:18:49,909 --> 01:18:57,159
common devices cortex-m

01:18:53,650 --> 01:19:00,010
STM all of these kinds of of common

01:18:57,159 --> 01:19:01,690
processes we want to promote our

01:19:00,010 --> 01:19:04,330
rock-solid networking story that's what

01:19:01,690 --> 01:19:05,830
that's we get out of our production

01:19:04,330 --> 01:19:07,750
users they use it because it's

01:19:05,830 --> 01:19:11,320
rock-solid so we want to promote that

01:19:07,750 --> 01:19:13,290
more and the other thing is wasn't the

01:19:11,320 --> 01:19:15,760
taking the chance that we're actually

01:19:13,290 --> 01:19:17,500
sitting next to the people that

01:19:15,760 --> 01:19:20,260
standardized wasn't and wasn't

01:19:17,500 --> 01:19:24,250
generating a lot of interest especially

01:19:20,260 --> 01:19:27,940
around now we finally got a target that

01:19:24,250 --> 01:19:29,770
we can port between browser Android iOS

01:19:27,940 --> 01:19:32,199
and our back-end

01:19:29,770 --> 01:19:35,949
at using as a target in the

01:19:32,199 --> 01:19:39,429
browser is very very useful oh sorry

01:19:35,949 --> 01:19:41,380
well zoom is webassembly which is a kind

01:19:39,429 --> 01:19:46,480
of an assembly language that runs within

01:19:41,380 --> 01:19:50,620
be in the JavaScript an interpreter off

01:19:46,480 --> 01:19:53,830
your browser and is a compiled target

01:19:50,620 --> 01:19:56,590
that you can compile to you can also

01:19:53,830 --> 01:20:01,630
compile C++ or C it clang has support

01:19:56,590 --> 01:20:03,969
for that we went to ship language

01:20:01,630 --> 01:20:06,130
ergonomics around and async/await like

01:20:03,969 --> 01:20:08,590
concurrency syntax currently rust has no

01:20:06,130 --> 01:20:11,800
concurrency support in the sense of

01:20:08,590 --> 01:20:14,159
having syntax we have this kind of type

01:20:11,800 --> 01:20:16,780
level feature but that's not syntax and

01:20:14,159 --> 01:20:20,500
around all applied the code name for

01:20:16,780 --> 01:20:23,080
that is rust 2018

01:20:20,500 --> 01:20:24,940
that might involve opt-in language

01:20:23,080 --> 01:20:27,850
breaking changes so you would need to

01:20:24,940 --> 01:20:30,850
pour the rust 2015 codebase over but you

01:20:27,850 --> 01:20:33,460
can mix 2015 and 2018 so you can build a

01:20:30,850 --> 01:20:37,270
library with just 15 and then consume it

01:20:33,460 --> 01:20:40,140
in 2018 code we want to have a

01:20:37,270 --> 01:20:45,610
conference on every continent by 2019

01:20:40,140 --> 01:20:47,620
that's a stated goal and we want to make

01:20:45,610 --> 01:20:49,750
people aware that the language is

01:20:47,620 --> 01:20:51,940
actually adopted because that tended to

01:20:49,750 --> 01:20:54,489
be the biggest problem that was coming

01:20:51,940 --> 01:20:57,310
up around winter something that actually

01:20:54,489 --> 01:20:59,350
the language has seen far more adoption

01:20:57,310 --> 01:21:04,920
and far more use and far more productive

01:20:59,350 --> 01:21:04,920
use then a lot of people are aware of

01:21:05,200 --> 01:21:10,070
the conclusion for the beginning of this

01:21:08,330 --> 01:21:11,510
year is actually big work your

01:21:10,070 --> 01:21:12,920
organization regularly having a lean

01:21:11,510 --> 01:21:15,230
process also means you can regularly

01:21:12,920 --> 01:21:17,690
rework it and change your approaches

01:21:15,230 --> 01:21:20,960
along with it don't like it don't change

01:21:17,690 --> 01:21:22,370
that just because you feel like it would

01:21:20,960 --> 01:21:24,350
be better if you had these kinds of

01:21:22,370 --> 01:21:26,030
teams the reason why the community team

01:21:24,350 --> 01:21:28,010
split is actually because people said

01:21:26,030 --> 01:21:29,810
I'm not coming to the meetings because

01:21:28,010 --> 01:21:32,960
most of the subjects are not interesting

01:21:29,810 --> 01:21:34,550
for me that's why the split is there so

01:21:32,960 --> 01:21:35,780
we have individual meetings for all

01:21:34,550 --> 01:21:38,810
these kind of teams and then we have a

01:21:35,780 --> 01:21:40,580
regular meeting where we just say what

01:21:38,810 --> 01:21:44,210
the teams were doing and see what it

01:21:40,580 --> 01:21:46,970
unlocks it really helps if you don't

01:21:44,210 --> 01:21:49,070
have a too strong hierarchical group in

01:21:46,970 --> 01:21:52,670
an open source project hierarchy doesn't

01:21:49,070 --> 01:21:54,890
work because of the timezone shift for

01:21:52,670 --> 01:21:56,990
example like if you got a hierarchy and

01:21:54,890 --> 01:22:00,350
the person in San Francisco is calling

01:21:56,990 --> 01:22:01,970
the shots maybe somewhere in Europe can

01:22:00,350 --> 01:22:11,240
answer but definitely in Australia are

01:22:01,970 --> 01:22:14,050
they out so that really helps okay any

01:22:11,240 --> 01:22:14,050
questions too now

01:22:18,060 --> 01:22:28,540
yeah we actually called for them we we

01:22:26,260 --> 01:22:30,910
had a call we had a call for blog posts

01:22:28,540 --> 01:22:32,110
on our project blog and promoted that

01:22:30,910 --> 01:22:35,530
through our channels of telling people

01:22:32,110 --> 01:22:37,900
please please send us an email and we

01:22:35,530 --> 01:22:39,280
had we also please send us an email or a

01:22:37,900 --> 01:22:40,870
tweet or something and our teams

01:22:39,280 --> 01:22:43,750
actually went and everything that we got

01:22:40,870 --> 01:22:45,490
noted we just Google that we just had a

01:22:43,750 --> 01:22:49,650
Google Talk where everyone who called a

01:22:45,490 --> 01:22:52,030
link somewhere put it in so this is

01:22:49,650 --> 01:22:54,670
there's a lot of manual process involved

01:22:52,030 --> 01:22:58,360
we're working with a lot of marked down

01:22:54,670 --> 01:23:00,730
note services where if where people just

01:22:58,360 --> 01:23:22,540
put stuff in there's not not much

01:23:00,730 --> 01:23:24,310
technology we'll put that in yeah um so

01:23:22,540 --> 01:23:28,000
the range that we encouraged people was

01:23:24,310 --> 01:23:30,210
at least a paragraph but that's that's

01:23:28,000 --> 01:23:30,210
fine

01:23:39,240 --> 01:23:44,740
that is finally a decision of the

01:23:42,010 --> 01:23:46,960
relevant teams so if you if it's a

01:23:44,740 --> 01:23:51,040
tooling change its the tool Qi a team if

01:23:46,960 --> 01:23:52,900
it's so there's a couple of people that

01:23:51,040 --> 01:23:56,350
are allowed to vote on this so there's a

01:23:52,900 --> 01:24:00,970
voting but like the group that can vote

01:23:56,350 --> 01:24:02,740
on this is not open the thing so this

01:24:00,970 --> 01:24:05,350
comes out out of a lot of the radio

01:24:02,740 --> 01:24:07,060
processes that Mosler has um the reason

01:24:05,350 --> 01:24:09,100
why we have this is actually to make

01:24:07,060 --> 01:24:12,100
sure that there's some vote at some

01:24:09,100 --> 01:24:14,110
point so the way it works is someone

01:24:12,100 --> 01:24:15,610
from that voting group calls the time

01:24:14,110 --> 01:24:20,530
when the voting happens and then you've

01:24:15,610 --> 01:24:24,790
got six weeks of final commenting and

01:24:20,530 --> 01:24:26,050
then this group votes votes on it people

01:24:24,790 --> 01:24:28,840
make sure that there's ample discussion

01:24:26,050 --> 01:24:32,260
before and for example what people do is

01:24:28,840 --> 01:24:34,450
right by the end of it a conclusion of

01:24:32,260 --> 01:24:36,580
what they felt like the discussion

01:24:34,450 --> 01:24:39,340
arrived so that people can reply and say

01:24:36,580 --> 01:24:41,890
well no I did I did not mean that I

01:24:39,340 --> 01:24:45,270
could I it was actually meant the other

01:24:41,890 --> 01:24:49,180
way or something this so this is a

01:24:45,270 --> 01:24:51,100
pretty tricky process to to set up

01:24:49,180 --> 01:24:54,030
there's a whole rule set that you can

01:24:51,100 --> 01:24:54,030
read in the repository

01:25:02,209 --> 01:25:07,019
they're pretty Latin often denied so for

01:25:04,860 --> 01:25:09,570
example I'm talking about this language

01:25:07,019 --> 01:25:12,179
ergonomics there was a knife see to

01:25:09,570 --> 01:25:13,649
rebuild the the module system which a

01:25:12,179 --> 01:25:16,139
lot of people felt like it was going too

01:25:13,649 --> 01:25:18,389
far and that had to be tried four times

01:25:16,139 --> 01:25:21,749
and it's a much thinner and much better

01:25:18,389 --> 01:25:24,629
RFC now so the first three ones

01:25:21,749 --> 01:25:26,579
basically okay this is not like this is

01:25:24,629 --> 01:25:28,349
not going to need to make a lot of

01:25:26,579 --> 01:25:30,360
people happy or this is now this is

01:25:28,349 --> 01:25:33,539
going to lead to a community split is a

01:25:30,360 --> 01:25:35,519
good reason to deny an RFC even if some

01:25:33,539 --> 01:25:37,919
of the this was even an RC that came

01:25:35,519 --> 01:25:43,169
from the court for from core team

01:25:37,919 --> 01:25:45,209
members so this this means that anything

01:25:43,169 --> 01:25:47,879
that comes from inside of the paid

01:25:45,209 --> 01:25:57,860
people at Mozilla does not get

01:25:47,879 --> 01:25:57,860
preference okay

01:26:07,269 --> 01:26:12,610
so the worst ABI in itself is not stable

01:26:12,729 --> 01:26:17,809
reasons are that it contains a lot of

01:26:15,229 --> 01:26:19,789
things it similar to C++ it contains a

01:26:17,809 --> 01:26:21,139
lot of metadata about ABI templates and

01:26:19,789 --> 01:26:24,139
all these kind of things the language is

01:26:21,139 --> 01:26:27,409
generic and you can for a library you

01:26:24,139 --> 01:26:28,789
can opt in to using the C ABI so if you

01:26:27,409 --> 01:26:32,030
would ride the library with the Dinah

01:26:28,789 --> 01:26:34,550
that generates a dialogue you would get

01:26:32,030 --> 01:26:36,409
like a normal dynamic library or a

01:26:34,550 --> 01:26:50,659
normal static library and this one is

01:26:36,409 --> 01:26:53,090
stable for what so rust has an unsafe

01:26:50,659 --> 01:26:54,559
sub language and for interactions with

01:26:53,090 --> 01:26:57,409
with things that cannot hold the

01:26:54,559 --> 01:26:59,539
guarantees of rust having a library that

01:26:57,409 --> 01:27:02,300
exposes an interfaces in itself not

01:26:59,539 --> 01:27:05,300
unsafe the unsafety lead is on the

01:27:02,300 --> 01:27:09,199
consumer if you want to call into C

01:27:05,300 --> 01:27:10,909
libraries this is inherently unsafe just

01:27:09,199 --> 01:27:12,499
because the C language doesn't give any

01:27:10,909 --> 01:27:14,479
kind of guarantees so you have to in D

01:27:12,499 --> 01:27:16,729
so the compiler knows about okay this

01:27:14,479 --> 01:27:18,650
there's something beyond here that I

01:27:16,729 --> 01:27:27,920
cannot expect to hold the guarantees

01:27:18,650 --> 01:27:29,360
that I no no no you would have an you

01:27:27,920 --> 01:27:30,739
could write a header file for that

01:27:29,360 --> 01:27:32,150
that's header file generators and then

01:27:30,739 --> 01:27:34,760
you would document like just as you

01:27:32,150 --> 01:27:35,900
normal sea API would document this is a

01:27:34,760 --> 01:27:39,050
pointer at this point it needs to be

01:27:35,900 --> 01:27:40,760
unique or whatever or this this will be

01:27:39,050 --> 01:27:43,159
dropped this we will do allocate this

01:27:40,760 --> 01:27:50,110
not these kind of things but this is for

01:27:43,159 --> 01:27:53,959
the rest language not a concern okay

01:27:50,110 --> 01:27:55,579
then yeah finally lot quality projects

01:27:53,959 --> 01:27:58,670
without a benevolent dictator are there

01:27:55,579 --> 01:28:03,650
and work there are just the silent in

01:27:58,670 --> 01:28:06,530
that sense we really have loud emails

01:28:03,650 --> 01:28:08,269
sent around which tends to be which

01:28:06,530 --> 01:28:09,979
tends to be a problem like there's so

01:28:08,269 --> 01:28:12,499
many projects there now Ruby the same

01:28:09,979 --> 01:28:14,329
mots is nice so we are nice is a saying

01:28:12,499 --> 01:28:17,749
in the Ruby

01:28:14,329 --> 01:28:21,710
so it's really that you hear about any

01:28:17,749 --> 01:28:23,630
kind of outbursts of maths he's still

01:28:21,710 --> 01:28:29,599
running a global programming language

01:28:23,630 --> 01:28:31,550
community so yeah and finally thanks to

01:28:29,599 --> 01:28:32,059
Xavier ovm project we would live without

01:28:31,550 --> 01:28:33,530
them

01:28:32,059 --> 01:28:35,659
the Ruby Python in Mozilla and

01:28:33,530 --> 01:28:38,059
JavaScript communities because we apply

01:28:35,659 --> 01:28:39,650
a lot of their work so a lot of this is

01:28:38,059 --> 01:28:41,900
basically people that came from other

01:28:39,650 --> 01:28:44,479
projects and they're like new project

01:28:41,900 --> 01:28:47,179
for me I can build it like we can build

01:28:44,479 --> 01:28:49,639
it without like rearranging the tables

01:28:47,179 --> 01:28:52,159
we can finally just paint the room fresh

01:28:49,639 --> 01:28:57,340
how we like it and then put our

01:28:52,159 --> 01:28:57,340
furniture in so thank you

01:28:58,850 --> 01:29:04,689
[Applause]

01:29:09,590 --> 01:29:11,650

YouTube URL: https://www.youtube.com/watch?v=S6vIekisOJA


