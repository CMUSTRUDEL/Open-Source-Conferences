Title: Should you rewrite in Rust?
Publication date: 2018-01-25
Playlist: Other Conferences 2018
Description: 
	E. Dunham

http://lca2018.linux.org.au/schedule/presentation/98/

When coders hear about a promising programming language, they often think "I'd like to write something in that!" While rewriting an existing utility or codebase in a new language can sometimes be a good idea, there are many situations in which it's not -- and to make it even more difficult, the benefits and drawbacks of a rewrite vary greatly based on which languages you're using! 

Come to this talk to learn about the various techniques you can use to integrate Rust with existing code in other languages, their pros and cons, and who's using them in the industry. Even if you haven't tried Rust yet, you'll get a crash course in its strengths, its weaknesses, and the many ways you can make it do cool stuff.

This talk was given at Linux.conf.au 2018 (LCA2018) which was held on 22-26 January 2018 in Sydney Australia.

linux.conf.au is a conference about the Linux operating system, and all aspects of the thriving ecosystem of Free and Open Source Software that has grown up around it. Run since 1999, in a different Australian or New Zealand city each year, by a team of local volunteers, LCA invites more than 500 people to learn from the people who shape the future of Open Source. For more information on the conference see https://linux.conf.au/

#linux.conf.au #linux #foss #opensource
Captions: 
	00:00:00,030 --> 00:00:05,430
so I hope that you are here because you

00:00:03,060 --> 00:00:08,220
would like to know about whether you

00:00:05,430 --> 00:00:10,080
should rewrite in rust as my own room

00:00:08,220 --> 00:00:15,000
monitor I'm going to double check with

00:00:10,080 --> 00:00:15,389
our AV folks am i recording maybe I see

00:00:15,000 --> 00:00:17,760
I see

00:00:15,389 --> 00:00:19,740
a yes gesture hooray so we are probably

00:00:17,760 --> 00:00:21,000
live not only to the people here in the

00:00:19,740 --> 00:00:26,070
room but to everyone on the livestream

00:00:21,000 --> 00:00:27,539
and to posterity later on so before we

00:00:26,070 --> 00:00:30,029
get going I just like to know a bit more

00:00:27,539 --> 00:00:33,180
about who's here in the room who here by

00:00:30,029 --> 00:00:35,399
a show of hands thinks that you know the

00:00:33,180 --> 00:00:36,809
answer that I'm here to tell you for

00:00:35,399 --> 00:00:40,350
this question should you rewrite and

00:00:36,809 --> 00:00:42,690
rest yeah hardly anyone you don't make

00:00:40,350 --> 00:00:44,700
any assumptions that's great so who here

00:00:42,690 --> 00:00:46,890
thinks that I will tell you yes rewrite

00:00:44,700 --> 00:00:49,379
your code and rest by a show of hands

00:00:46,890 --> 00:00:51,600
surprisingly few maybe maybe a dozen and

00:00:49,379 --> 00:00:54,090
who here thinks I'll tell you no no no

00:00:51,600 --> 00:00:59,100
don't rewrite your code about the same

00:00:54,090 --> 00:01:02,039
will congratulations you're right so I

00:00:59,100 --> 00:01:04,949
am Emily Dunham I'm from the middle of

00:01:02,039 --> 00:01:07,049
nowhere in Oregon and I work as the

00:01:04,949 --> 00:01:09,210
DevOps engineer for Mozilla Research

00:01:07,049 --> 00:01:12,360
which means that I wear quite a few hats

00:01:09,210 --> 00:01:14,250
at the same time I work on a bit on

00:01:12,360 --> 00:01:16,710
rusts infrastructure quite a bit on

00:01:14,250 --> 00:01:18,720
servos infrastructure and now on the

00:01:16,710 --> 00:01:21,659
virtual reality teams infrastructure

00:01:18,720 --> 00:01:23,970
that's part of research as well so while

00:01:21,659 --> 00:01:26,009
I'm involvement and engaged with the

00:01:23,970 --> 00:01:28,170
rest community I'm a member of the rest

00:01:26,009 --> 00:01:31,439
community team I do a bit of rest

00:01:28,170 --> 00:01:33,689
programming but I'm more of a compiler

00:01:31,439 --> 00:01:35,909
groupie than a compiler hacker but

00:01:33,689 --> 00:01:40,079
that's okay because I know a bunch of

00:01:35,909 --> 00:01:43,560
very smart people and I have combined my

00:01:40,079 --> 00:01:46,350
own experiences and asking them a whole

00:01:43,560 --> 00:01:47,820
lot of hard questions about what do you

00:01:46,350 --> 00:01:49,890
ask when someone says they want to

00:01:47,820 --> 00:01:52,560
rewrite how can you tell when you should

00:01:49,890 --> 00:01:53,880
rewrite something to come to the

00:01:52,560 --> 00:01:58,680
conclusions that I'm going to share with

00:01:53,880 --> 00:02:00,119
you in this talk so I'm going to talk

00:01:58,680 --> 00:02:02,909
about whether you should rewrite your

00:02:00,119 --> 00:02:07,229
code at all whether you should rewrite

00:02:02,909 --> 00:02:09,530
in rust and how to do that if it turns

00:02:07,229 --> 00:02:12,700
out to be the right thing for you

00:02:09,530 --> 00:02:16,209
so should you rewrite

00:02:12,700 --> 00:02:18,250
should is a value judgment and all value

00:02:16,209 --> 00:02:20,650
judgments are based on certain

00:02:18,250 --> 00:02:22,660
assumptions the assumptions that I'm

00:02:20,650 --> 00:02:25,000
going to make here for us to even be

00:02:22,660 --> 00:02:26,410
remotely on the same page are that I'm

00:02:25,000 --> 00:02:28,750
assuming that you're working on some

00:02:26,410 --> 00:02:30,790
code I'm assuming that you're working

00:02:28,750 --> 00:02:32,350
with some other people on that project

00:02:30,790 --> 00:02:34,120
probably some of them help you with the

00:02:32,350 --> 00:02:36,550
code some of them help you with non code

00:02:34,120 --> 00:02:38,680
aspects of that project but you're not

00:02:36,550 --> 00:02:41,050
just going it alone and you probably

00:02:38,680 --> 00:02:44,430
have someone who uses that code that

00:02:41,050 --> 00:02:48,069
you're writing who isn't just yourself

00:02:44,430 --> 00:02:49,900
so the other basic assumption that I'm

00:02:48,069 --> 00:02:53,380
going to have to make in order to call

00:02:49,900 --> 00:02:55,150
things good or bad is that people's time

00:02:53,380 --> 00:02:56,950
and Happiness are ultimately what you're

00:02:55,150 --> 00:02:59,799
optimizing for you're going to basically

00:02:56,950 --> 00:03:02,350
try to do the things that make your code

00:02:59,799 --> 00:03:05,890
save people's time and make the people

00:03:02,350 --> 00:03:07,540
happy so those people is not only yours

00:03:05,890 --> 00:03:08,799
it's also the colleagues that you're

00:03:07,540 --> 00:03:10,690
working with both technical and

00:03:08,799 --> 00:03:13,209
non-technical and the people who use

00:03:10,690 --> 00:03:15,250
your product so anytime we're going to

00:03:13,209 --> 00:03:17,200
call something good or bad it's striking

00:03:15,250 --> 00:03:20,829
a balance between what it does for all

00:03:17,200 --> 00:03:22,120
of these different groups so now that

00:03:20,829 --> 00:03:26,560
I've got that out of the way let's talk

00:03:22,120 --> 00:03:27,910
about rewriting code rewriting has a

00:03:26,560 --> 00:03:29,950
bunch of different definitions some

00:03:27,910 --> 00:03:32,170
people are like rewriting is when you

00:03:29,950 --> 00:03:34,510
don't look at the old source but now I'm

00:03:32,170 --> 00:03:35,950
just gonna say that rewriting is when

00:03:34,510 --> 00:03:37,959
you had some code that tried to solve

00:03:35,950 --> 00:03:39,280
the problem but you're gonna say no I'm

00:03:37,959 --> 00:03:40,870
gonna I'm not going to use that code I'm

00:03:39,280 --> 00:03:42,850
going to start with start new and do

00:03:40,870 --> 00:03:44,410
something different for that portion of

00:03:42,850 --> 00:03:46,900
the code I'll also talk about

00:03:44,410 --> 00:03:50,530
refactoring differentiated from

00:03:46,900 --> 00:03:53,620
rewriting as trying to modify what you

00:03:50,530 --> 00:03:56,739
already had in order to get to where you

00:03:53,620 --> 00:04:00,160
want to be so you can categorize

00:03:56,739 --> 00:04:02,350
rewrites by how big they are how much of

00:04:00,160 --> 00:04:05,230
your codebase are you tossing out and

00:04:02,350 --> 00:04:06,730
starting over on a smaller rewrite like

00:04:05,230 --> 00:04:09,100
I'm just going to rewrite the body of

00:04:06,730 --> 00:04:10,630
this function for some reason is highly

00:04:09,100 --> 00:04:13,420
constrained but it gives you less

00:04:10,630 --> 00:04:15,940
opportunity to introduce new bugs and it

00:04:13,420 --> 00:04:18,989
can get done quite a lot faster whereas

00:04:15,940 --> 00:04:21,970
the extremely large rewrite that some

00:04:18,989 --> 00:04:25,210
people online will often suggest in a

00:04:21,970 --> 00:04:26,139
debatably satirical manner just get rid

00:04:25,210 --> 00:04:28,180
of it just rewrite the

00:04:26,139 --> 00:04:31,479
whole thing and rest is can be enormous

00:04:28,180 --> 00:04:35,050
has a much more greenfield start a new

00:04:31,479 --> 00:04:37,419
fewer constraints implication to it but

00:04:35,050 --> 00:04:40,719
you also get to reintroduce every bug

00:04:37,419 --> 00:04:43,719
that the old code intrinsically encoded

00:04:40,719 --> 00:04:46,029
a solution for and the larger a rewrite

00:04:43,719 --> 00:04:47,860
is pretty obviously the more time it's

00:04:46,029 --> 00:04:50,979
going to be take it's going to be taking

00:04:47,860 --> 00:04:55,300
that you could have spent doing anything

00:04:50,979 --> 00:04:58,629
else on your project so you can also

00:04:55,300 --> 00:05:01,050
categorize desires to rewrite code by

00:04:58,629 --> 00:05:06,069
what someone hopes to get out of it so

00:05:01,050 --> 00:05:08,710
the main motivations to do to try to

00:05:06,069 --> 00:05:10,689
start tackle a project again tackle a

00:05:08,710 --> 00:05:13,120
problem again from scratch that I've

00:05:10,689 --> 00:05:14,889
identified our first you want to learn

00:05:13,120 --> 00:05:16,900
the tool that you're tackling it in

00:05:14,889 --> 00:05:18,520
you're like I want to learn this new

00:05:16,900 --> 00:05:20,469
language so I'm going to write fizzbuzz

00:05:18,520 --> 00:05:22,870
in that language so I know how it works

00:05:20,469 --> 00:05:23,469
then there's the motor of understanding

00:05:22,870 --> 00:05:25,930
a task

00:05:23,469 --> 00:05:28,659
there's Wow managing this memory is

00:05:25,930 --> 00:05:31,120
really hard maybe I should try writing a

00:05:28,659 --> 00:05:33,099
similar piece of code in a language that

00:05:31,120 --> 00:05:34,740
helps me with memory to see how it works

00:05:33,099 --> 00:05:37,449
when it's working correctly and finally

00:05:34,740 --> 00:05:40,360
the one that's the only really hear

00:05:37,449 --> 00:05:42,520
about in popular conversations about

00:05:40,360 --> 00:05:44,349
rewriting is rewriting because you want

00:05:42,520 --> 00:05:45,789
to ship different production code to

00:05:44,349 --> 00:05:49,750
your users than you're shipping right

00:05:45,789 --> 00:05:52,029
now so a rewrite in order to understand

00:05:49,750 --> 00:05:53,979
either the tool or the task is going to

00:05:52,029 --> 00:05:56,289
be somewhat costly you're going to spend

00:05:53,979 --> 00:05:58,899
a bunch of time researching how to do it

00:05:56,289 --> 00:06:00,069
writing that code and debugging the code

00:05:58,899 --> 00:06:03,399
until it works in the way that you

00:06:00,069 --> 00:06:05,699
expected but rewriting with the motive

00:06:03,399 --> 00:06:09,310
of deploying that rewritten code is

00:06:05,699 --> 00:06:11,529
immensely more expensive more people

00:06:09,310 --> 00:06:13,750
have to do research coding and debugging

00:06:11,529 --> 00:06:15,849
and you have the communication overhead

00:06:13,750 --> 00:06:18,099
of explaining it to everyone else who

00:06:15,849 --> 00:06:20,560
interacts with that code you have an

00:06:18,099 --> 00:06:22,180
obligation of backwards compatibility if

00:06:20,560 --> 00:06:24,250
you're writing a thing that you claim

00:06:22,180 --> 00:06:27,939
will fit in and replace something that's

00:06:24,250 --> 00:06:30,009
kind of sort of working already and you

00:06:27,939 --> 00:06:32,229
have whatever tooling was previously

00:06:30,009 --> 00:06:34,899
deploying the code is probably going to

00:06:32,229 --> 00:06:37,180
need some minor or major changes for the

00:06:34,899 --> 00:06:38,860
rewritten code to work with it plus you

00:06:37,180 --> 00:06:39,940
get the opportunity to introduce a lot

00:06:38,860 --> 00:06:41,440
of new bugs

00:06:39,940 --> 00:06:45,310
and you're going to have to fix them and

00:06:41,440 --> 00:06:47,140
again everyone involved not just you but

00:06:45,310 --> 00:06:49,120
your colleagues both technical and

00:06:47,140 --> 00:06:50,650
non-technical and the users of the

00:06:49,120 --> 00:06:53,470
product are going to have to learn about

00:06:50,650 --> 00:06:55,780
the new system that's starting to sound

00:06:53,470 --> 00:06:59,110
like we should never rewrite anything so

00:06:55,780 --> 00:07:00,670
why does anyone because in addition to

00:06:59,110 --> 00:07:02,980
those major drawbacks you can get some

00:07:00,670 --> 00:07:04,690
huge benefits you can get improved

00:07:02,980 --> 00:07:06,850
performance especially a few had

00:07:04,690 --> 00:07:08,470
previously been using a language or tool

00:07:06,850 --> 00:07:10,810
where performance is not really its

00:07:08,470 --> 00:07:12,940
first priority or if you're using

00:07:10,810 --> 00:07:16,090
tooling where performance is the first

00:07:12,940 --> 00:07:18,010
priority you can get radically improved

00:07:16,090 --> 00:07:20,620
maintainability by switching to a tool

00:07:18,010 --> 00:07:23,530
that prioritizes the ease of reading and

00:07:20,620 --> 00:07:25,090
writing the code in it and sometimes you

00:07:23,530 --> 00:07:26,860
just need to increase your contributor

00:07:25,090 --> 00:07:29,860
base it can be really hard to find

00:07:26,860 --> 00:07:32,740
people who know and want to use some

00:07:29,860 --> 00:07:35,800
languages or some tools so in some

00:07:32,740 --> 00:07:38,620
circumstances switching can actually get

00:07:35,800 --> 00:07:43,870
you those people that you needed to keep

00:07:38,620 --> 00:07:46,000
the project alive at all so when you're

00:07:43,870 --> 00:07:48,910
thinking oh yeah okay it looks like I

00:07:46,000 --> 00:07:50,530
might want to rewrite this start by

00:07:48,910 --> 00:07:52,180
thinking about how you'll communicate

00:07:50,530 --> 00:07:54,040
about it this is true not just of

00:07:52,180 --> 00:07:56,590
rewrites but of any major code change

00:07:54,040 --> 00:07:58,390
and the first step to communicating what

00:07:56,590 --> 00:08:01,660
the problem is is figuring out what it

00:07:58,390 --> 00:08:03,790
is you have to answer as they probably

00:08:01,660 --> 00:08:05,560
taught you in a software engineering 101

00:08:03,790 --> 00:08:07,330
if you happen to find yourself in a

00:08:05,560 --> 00:08:09,880
class like that at some point you got to

00:08:07,330 --> 00:08:11,980
ask what does the code do what is the

00:08:09,880 --> 00:08:13,930
code supposed to be doing what will be

00:08:11,980 --> 00:08:17,530
the consequences if I just leave it be

00:08:13,930 --> 00:08:19,060
and if I'm going to change it how will I

00:08:17,530 --> 00:08:20,800
know when I've changed it enough how

00:08:19,060 --> 00:08:23,470
will I know when the problem is solved

00:08:20,800 --> 00:08:25,210
and so once you've pinned down that

00:08:23,470 --> 00:08:26,590
difference between what you think is

00:08:25,210 --> 00:08:29,020
happening and what you think should be

00:08:26,590 --> 00:08:32,860
happening you then need to track down

00:08:29,020 --> 00:08:37,000
its source so sometimes that disparity

00:08:32,860 --> 00:08:37,630
can come from you misunderstanding one

00:08:37,000 --> 00:08:40,630
or the other

00:08:37,630 --> 00:08:43,260
maybe you misread a document maybe you

00:08:40,630 --> 00:08:46,420
misunderstood someone's explanation and

00:08:43,260 --> 00:08:48,010
you're defining it in a way that means

00:08:46,420 --> 00:08:49,420
there's obviously going to be a bug like

00:08:48,010 --> 00:08:52,030
you're asking it to do something it

00:08:49,420 --> 00:08:52,640
can't or maybe there is a problem this

00:08:52,030 --> 00:08:53,930
it

00:08:52,640 --> 00:08:55,700
transit to a system not to your

00:08:53,930 --> 00:08:57,410
assumptions about it and it's just the

00:08:55,700 --> 00:08:59,540
systems architecture or the problem it's

00:08:57,410 --> 00:09:02,360
trying to solve is just not the problem

00:08:59,540 --> 00:09:04,130
that you have anymore maybe lower level

00:09:02,360 --> 00:09:05,660
you've got a tools problem one of your

00:09:04,130 --> 00:09:07,490
dependencies is doing the wrong thing

00:09:05,660 --> 00:09:11,600
you're gonna have to go upstream and fix

00:09:07,490 --> 00:09:13,060
that in order to bring what it does into

00:09:11,600 --> 00:09:15,740
line with what you want

00:09:13,060 --> 00:09:18,500
maybe it's the business logic this is

00:09:15,740 --> 00:09:21,170
where everyone tends to assume that a

00:09:18,500 --> 00:09:23,450
bug is coming from but there are many

00:09:21,170 --> 00:09:25,820
other options because you can have your

00:09:23,450 --> 00:09:27,320
logic right and a tools problem and get

00:09:25,820 --> 00:09:29,810
a bug you can have your logic right and

00:09:27,320 --> 00:09:32,810
just have the wrong architecture and get

00:09:29,810 --> 00:09:34,760
bad behaviors and you can have your

00:09:32,810 --> 00:09:37,190
logic right and you can be getting an

00:09:34,760 --> 00:09:39,830
unintended side effect just based on

00:09:37,190 --> 00:09:42,980
some bug or flaw in your program or the

00:09:39,830 --> 00:09:45,410
ecosystem and that could be introducing

00:09:42,980 --> 00:09:47,480
an unexpected behavior so once you have

00:09:45,410 --> 00:09:49,400
pinned down exactly where the problem is

00:09:47,480 --> 00:09:51,530
that you're trying to solve and where

00:09:49,400 --> 00:09:54,130
that problem is coming from start

00:09:51,530 --> 00:09:56,840
thinking about who will fixing it affect

00:09:54,130 --> 00:09:58,760
it'll affect you because you're gonna

00:09:56,840 --> 00:10:00,110
spend a bunch of time on this it'll

00:09:58,760 --> 00:10:01,910
affect the other coders because they'll

00:10:00,110 --> 00:10:03,500
have to learn what you changed it'll

00:10:01,910 --> 00:10:05,690
affect whoever writes the docs

00:10:03,500 --> 00:10:09,440
whoever advertises your product and

00:10:05,690 --> 00:10:12,440
whoever uses the product so in the theme

00:10:09,440 --> 00:10:14,120
of history repeating it's super

00:10:12,440 --> 00:10:16,880
important to talk about what you're

00:10:14,120 --> 00:10:19,100
planning to do in order that people

00:10:16,880 --> 00:10:21,770
who've seen others attempt similar

00:10:19,100 --> 00:10:23,660
things and fail for various reasons can

00:10:21,770 --> 00:10:26,420
volunteer you that information and keep

00:10:23,660 --> 00:10:28,520
you from making the same mistakes so ask

00:10:26,420 --> 00:10:31,730
people about the solution that you're

00:10:28,520 --> 00:10:33,530
trying to do research what others on

00:10:31,730 --> 00:10:35,720
your particular project have done and

00:10:33,530 --> 00:10:37,070
research what others on other projects

00:10:35,720 --> 00:10:39,650
have done and how it's worked what's

00:10:37,070 --> 00:10:41,420
worked well what's work poorly and see

00:10:39,650 --> 00:10:44,300
whether you can get buy-in from that

00:10:41,420 --> 00:10:47,090
project when you say hey I would like to

00:10:44,300 --> 00:10:48,620
make this major refactor I would like to

00:10:47,090 --> 00:10:51,020
rewrite this section of the code in that

00:10:48,620 --> 00:10:54,980
language if people just reflexively go

00:10:51,020 --> 00:10:57,140
oh no no don't do that ask why or if

00:10:54,980 --> 00:10:58,610
people go oh yeah I don't even know what

00:10:57,140 --> 00:11:02,690
you're proposing but that sounds great

00:10:58,610 --> 00:11:04,190
ask why and one thing that stood out

00:11:02,690 --> 00:11:06,180
time and time again when I've talked

00:11:04,190 --> 00:11:08,040
with people about the refactor

00:11:06,180 --> 00:11:09,960
they've succeeded at compared to the

00:11:08,040 --> 00:11:13,410
ones that they've failed at has been

00:11:09,960 --> 00:11:16,649
that the the rewrites and reef actors

00:11:13,410 --> 00:11:19,350
that prefer small changes are the most

00:11:16,649 --> 00:11:21,360
successful so that can mean if you're

00:11:19,350 --> 00:11:23,550
doing a very big change to break the big

00:11:21,360 --> 00:11:26,880
change up into small incremental

00:11:23,550 --> 00:11:29,190
measurable ones a small change it could

00:11:26,880 --> 00:11:31,380
define it as the cheapest or quickest

00:11:29,190 --> 00:11:34,770
solution to get the impact that you need

00:11:31,380 --> 00:11:36,600
it's the least effort that you can put

00:11:34,770 --> 00:11:39,420
in and still get what you wanted which

00:11:36,600 --> 00:11:41,279
if what you want is a major speed-up

00:11:39,420 --> 00:11:43,980
let's say then that could be a whole lot

00:11:41,279 --> 00:11:47,490
of effort but still don't do more than

00:11:43,980 --> 00:11:49,080
you have to and introducing extra

00:11:47,490 --> 00:11:51,980
complexity just for the fun of it or

00:11:49,080 --> 00:11:54,630
just for the fun of using some cool tool

00:11:51,980 --> 00:11:56,550
will cause you a lot of grief on down

00:11:54,630 --> 00:12:03,000
the line as you have to live with that

00:11:56,550 --> 00:12:05,970
so basically risks multiply if you it

00:12:03,000 --> 00:12:07,709
was described as innovation tokens in

00:12:05,970 --> 00:12:10,680
the previous rewriting and Russ talk

00:12:07,709 --> 00:12:12,510
today where you have a certain amount of

00:12:10,680 --> 00:12:15,209
risk you can take if you take more than

00:12:12,510 --> 00:12:17,700
that if you take a bunch of Gamble's at

00:12:15,209 --> 00:12:19,740
once and any one of them failing will

00:12:17,700 --> 00:12:22,020
keep your project from succeeding then

00:12:19,740 --> 00:12:23,300
the more Gamble's you add on the less

00:12:22,020 --> 00:12:26,580
likely you are to succeed

00:12:23,300 --> 00:12:29,100
so since risks compound make the

00:12:26,580 --> 00:12:32,660
smallest change with the least risk that

00:12:29,100 --> 00:12:36,360
you can for the best odds of success and

00:12:32,660 --> 00:12:39,330
I would like to stand on a small soapbox

00:12:36,360 --> 00:12:41,190
here to talk about what happens when

00:12:39,330 --> 00:12:42,660
somebody comes into some other project

00:12:41,190 --> 00:12:45,000
some other community that they might not

00:12:42,660 --> 00:12:47,310
be super involved with and just says I

00:12:45,000 --> 00:12:48,990
think you should rewrite your code I

00:12:47,310 --> 00:12:50,820
think you should go rewrite that and

00:12:48,990 --> 00:12:53,579
rust I think you should rewrite that and

00:12:50,820 --> 00:12:57,690
go whatever it might be what is this

00:12:53,579 --> 00:12:59,040
actually saying it's saying I think all

00:12:57,690 --> 00:13:00,480
those hours you put in I think you

00:12:59,040 --> 00:13:03,510
should just throw them out there regard

00:13:00,480 --> 00:13:04,560
it's saying well I think that the work

00:13:03,510 --> 00:13:05,970
that you've been doing would be super

00:13:04,560 --> 00:13:08,520
easy to replace it can't be that hard

00:13:05,970 --> 00:13:11,250
right it why why do you even spend so

00:13:08,520 --> 00:13:12,990
much time on it it's saying you don't

00:13:11,250 --> 00:13:14,400
understand the engineering decisions

00:13:12,990 --> 00:13:14,899
that you're making because I know them

00:13:14,400 --> 00:13:16,999
so much

00:13:14,899 --> 00:13:18,619
than you and fundamentally to somebody

00:13:16,999 --> 00:13:21,410
knowledgeable you're seeing something

00:13:18,619 --> 00:13:22,699
about yourself you're saying I have no

00:13:21,410 --> 00:13:24,800
idea what you're trying to solve

00:13:22,699 --> 00:13:27,949
I just I'm wandering in and saying this

00:13:24,800 --> 00:13:31,069
one tool will fix everything so please

00:13:27,949 --> 00:13:34,339
don't do that rest kind of has a problem

00:13:31,069 --> 00:13:35,990
with this kind of people I'm not sure I

00:13:34,339 --> 00:13:37,850
hope none of you are in the none of them

00:13:35,990 --> 00:13:39,350
are in the room or watching if you have

00:13:37,850 --> 00:13:41,509
done that in the past and you're hearing

00:13:39,350 --> 00:13:43,129
this please think about what it's saying

00:13:41,509 --> 00:13:45,309
both about you and the language and

00:13:43,129 --> 00:13:47,480
consider not doing it in the future so

00:13:45,309 --> 00:13:51,490
what did you do instead if you're like

00:13:47,480 --> 00:13:54,019
wow these people need a different tool

00:13:51,490 --> 00:13:57,110
take it look at things from their

00:13:54,019 --> 00:13:59,809
perspective start by figuring out where

00:13:57,110 --> 00:14:02,749
their problems are and how you're going

00:13:59,809 --> 00:14:04,160
to bring them more good stuff than the

00:14:02,749 --> 00:14:06,470
inconvenience that you're you'd be

00:14:04,160 --> 00:14:08,800
introducing by suggesting a change look

00:14:06,470 --> 00:14:11,119
at where their actual pain points are

00:14:08,800 --> 00:14:13,939
respect the amount of time that people

00:14:11,119 --> 00:14:16,999
have put into their project and the

00:14:13,939 --> 00:14:18,769
amount of understanding the complicated

00:14:16,999 --> 00:14:21,230
problem that their code is trying to

00:14:18,769 --> 00:14:22,759
solve that is encoded by every bug fix

00:14:21,230 --> 00:14:27,740
that makes their code look a bit messy

00:14:22,759 --> 00:14:30,249
and ask whether they would be interested

00:14:27,740 --> 00:14:32,839
in a solution if you offered it to them

00:14:30,249 --> 00:14:34,309
ask what they've done before whether

00:14:32,839 --> 00:14:37,610
it's succeeded and what you can learn

00:14:34,309 --> 00:14:40,519
from that and basically try not to write

00:14:37,610 --> 00:14:43,660
code that a product project just doesn't

00:14:40,519 --> 00:14:46,040
want because that's a huge waste of time

00:14:43,660 --> 00:14:50,120
unless you're writing it for your own

00:14:46,040 --> 00:14:52,819
enjoyment so let's talk in a bit more

00:14:50,120 --> 00:14:56,089
detail about rewriting for the sake of

00:14:52,819 --> 00:14:58,579
understanding the code because I feel

00:14:56,089 --> 00:15:00,799
like in my upbringing as an engineer it

00:14:58,579 --> 00:15:04,160
wasn't explained to me nearly as well as

00:15:00,799 --> 00:15:05,720
I would have liked that you don't always

00:15:04,160 --> 00:15:08,529
have to push the code you've rewritten

00:15:05,720 --> 00:15:12,019
to get benefits from having rewritten it

00:15:08,529 --> 00:15:13,850
so a couple of cases are the I'm going

00:15:12,019 --> 00:15:16,220
to show you a couple of case studies but

00:15:13,850 --> 00:15:17,990
from them I'd like you to see what these

00:15:16,220 --> 00:15:20,240
people are doing right they're picking

00:15:17,990 --> 00:15:22,999
either a familiar task or a familiar

00:15:20,240 --> 00:15:25,009
tool they're not introducing a bunch of

00:15:22,999 --> 00:15:25,790
new risks like both an unfamiliar task

00:15:25,009 --> 00:15:27,950
and a nun from

00:15:25,790 --> 00:15:29,530
at once and it sets them up for success

00:15:27,950 --> 00:15:31,910
to change a small thing at a time

00:15:29,530 --> 00:15:33,440
they've documented what they've learned

00:15:31,910 --> 00:15:35,720
which is what makes them so good for

00:15:33,440 --> 00:15:37,340
citing in a talk and makes it easier for

00:15:35,720 --> 00:15:40,250
them to look back on their own

00:15:37,340 --> 00:15:42,800
experiences and continue leveraging the

00:15:40,250 --> 00:15:44,030
knowledge that they gained and they

00:15:42,800 --> 00:15:45,910
really take the lessons that they

00:15:44,030 --> 00:15:49,520
learned back into their other projects

00:15:45,910 --> 00:15:53,450
so one instance of rewriting in order to

00:15:49,520 --> 00:15:57,140
understand the codebase is Carol nickels

00:15:53,450 --> 00:15:59,360
is a pretty expert rust programmer and

00:15:57,140 --> 00:16:00,530
she was encountered this compression

00:15:59,360 --> 00:16:02,270
algorithm that she thought wow that's

00:16:00,530 --> 00:16:06,170
kind of slow I wonder if thrust could

00:16:02,270 --> 00:16:10,490
make it faster so she assessed it took

00:16:06,170 --> 00:16:12,470
it away on her own just wrote a rest

00:16:10,490 --> 00:16:16,520
implementation by studying the C code

00:16:12,470 --> 00:16:17,990
and then has offered that as something

00:16:16,520 --> 00:16:21,740
that people can choose to use doesn't

00:16:17,990 --> 00:16:24,200
try to force anyone else to use it but

00:16:21,740 --> 00:16:27,230
basically picked the the smallest

00:16:24,200 --> 00:16:30,260
component which in her case was the the

00:16:27,230 --> 00:16:33,020
library for compression and then just

00:16:30,260 --> 00:16:34,750
rewrote that learning from the knowledge

00:16:33,020 --> 00:16:36,980
that was encoded in the old version

00:16:34,750 --> 00:16:39,590
another instance of rewriting to

00:16:36,980 --> 00:16:41,720
understand code is a project the BART

00:16:39,590 --> 00:16:45,920
gave a talk about at the Portland rest

00:16:41,720 --> 00:16:47,750
meet up which was advent of code and he

00:16:45,920 --> 00:16:48,860
had some familiar problems problems that

00:16:47,750 --> 00:16:51,290
were algorithmically pretty

00:16:48,860 --> 00:16:53,360
straightforward to him but one did the

00:16:51,290 --> 00:16:55,940
practices rest and so he resolved the

00:16:53,360 --> 00:16:56,840
problems in rust and published them and

00:16:55,940 --> 00:16:58,820
that's fine

00:16:56,840 --> 00:16:59,870
he's not going to anyone and telling

00:16:58,820 --> 00:17:01,880
them hey you should you should ship

00:16:59,870 --> 00:17:03,440
these rust solutions he's just rewriting

00:17:01,880 --> 00:17:05,960
to understand and can take that

00:17:03,440 --> 00:17:07,220
knowledge about how to handle memory and

00:17:05,960 --> 00:17:10,300
how to handle safety that he learned

00:17:07,220 --> 00:17:13,160
from rust back to his other project so

00:17:10,300 --> 00:17:15,020
with that out of the way a lot of the

00:17:13,160 --> 00:17:18,140
time when you talk about a rewrite you

00:17:15,020 --> 00:17:20,090
are talking about the problem where

00:17:18,140 --> 00:17:22,730
production code isn't where you want it

00:17:20,090 --> 00:17:25,820
and you need new production code for

00:17:22,730 --> 00:17:28,130
some reason so the first thing to ask is

00:17:25,820 --> 00:17:31,430
always can we solve the problem in the

00:17:28,130 --> 00:17:34,610
current language the purpose of your

00:17:31,430 --> 00:17:36,320
current language you already know it you

00:17:34,610 --> 00:17:39,200
don't need to drag in a lot of new

00:17:36,320 --> 00:17:41,659
dependencies and new tooling and

00:17:39,200 --> 00:17:43,730
you can potentially go off rewrite for

00:17:41,659 --> 00:17:45,470
understanding in a language whose

00:17:43,730 --> 00:17:47,330
strengths match up with your present

00:17:45,470 --> 00:17:49,190
languages weaknesses and bring that

00:17:47,330 --> 00:17:51,260
understanding back to write the

00:17:49,190 --> 00:17:54,409
algorithm in the way that you've learned

00:17:51,260 --> 00:17:57,350
is good without dragging in a bunch of

00:17:54,409 --> 00:18:00,200
new tools to your build process and a

00:17:57,350 --> 00:18:02,480
huge perk is that the existing code

00:18:00,200 --> 00:18:03,620
describes a lot of bugs that have been

00:18:02,480 --> 00:18:05,600
fixed over the years

00:18:03,620 --> 00:18:08,090
it pretty much encodes your project

00:18:05,600 --> 00:18:10,389
knowledge about the problem so the

00:18:08,090 --> 00:18:12,850
better you can leverage that the fewer

00:18:10,389 --> 00:18:16,700
reintroductions of bugs that you'll have

00:18:12,850 --> 00:18:18,230
so there are times when you think no

00:18:16,700 --> 00:18:21,019
we've just got to toss it and rewrite it

00:18:18,230 --> 00:18:22,789
when you could actually refactor it in

00:18:21,019 --> 00:18:25,970
your current language and be fine

00:18:22,789 --> 00:18:28,460
here's a few common excuses like oh but

00:18:25,970 --> 00:18:30,529
it's slow my language is slow and I want

00:18:28,460 --> 00:18:32,929
my code to go fast can you find and

00:18:30,529 --> 00:18:35,630
refactor the hot code so that it doesn't

00:18:32,929 --> 00:18:37,539
trip on those problematic edge cases of

00:18:35,630 --> 00:18:40,460
your current language and tooling and

00:18:37,539 --> 00:18:42,230
can you find a faster implementation of

00:18:40,460 --> 00:18:44,269
your current language or your current

00:18:42,230 --> 00:18:47,299
runtime or whatever bit is slowing it

00:18:44,269 --> 00:18:50,240
down if your current code is confusing

00:18:47,299 --> 00:18:52,429
then writing the say a similar thing

00:18:50,240 --> 00:18:53,659
with similar processes in a different

00:18:52,429 --> 00:18:55,639
language is just going to end up

00:18:53,659 --> 00:18:58,309
confusing again unless you figure out

00:18:55,639 --> 00:19:01,250
how it got that way and fix it so

00:18:58,309 --> 00:19:03,289
learning how to document better pruning

00:19:01,250 --> 00:19:07,130
out dead code simplifying and

00:19:03,289 --> 00:19:09,169
refactoring are essential first steps

00:19:07,130 --> 00:19:12,200
when your code is confusing and then if

00:19:09,169 --> 00:19:14,389
you think you're going to have to change

00:19:12,200 --> 00:19:17,480
change languages eventually you can

00:19:14,389 --> 00:19:19,039
start by documenting that boundary where

00:19:17,480 --> 00:19:22,639
you're going to interface with the new

00:19:19,039 --> 00:19:24,440
language and often by singling out for

00:19:22,639 --> 00:19:25,720
the problem pieces of code that you wish

00:19:24,440 --> 00:19:28,250
were in a different language and

00:19:25,720 --> 00:19:31,279
documenting extremely clearly everything

00:19:28,250 --> 00:19:32,899
around them you can reduce a lot of the

00:19:31,279 --> 00:19:36,950
ambiguity that was causing you problems

00:19:32,899 --> 00:19:39,200
to begin with and another unfortunately

00:19:36,950 --> 00:19:41,029
common reason that some projects will

00:19:39,200 --> 00:19:43,610
consider just rewriting in some other

00:19:41,029 --> 00:19:46,130
language is that people are bored of the

00:19:43,610 --> 00:19:47,299
existing one if you have a group of

00:19:46,130 --> 00:19:48,529
people who are going to get bored with

00:19:47,299 --> 00:19:50,389
one language what's to say they're not

00:19:48,529 --> 00:19:52,280
going to get bored with the next one so

00:19:50,389 --> 00:19:55,130
a rewrite is not going to solve

00:19:52,280 --> 00:19:57,010
problems there some ways that can

00:19:55,130 --> 00:20:00,710
sometimes make people get less bored or

00:19:57,010 --> 00:20:02,920
give more recognition and kudos for the

00:20:00,710 --> 00:20:05,540
contributions that people are making

00:20:02,920 --> 00:20:07,790
communicate better about the costs of

00:20:05,540 --> 00:20:11,600
making changes you don't need have

00:20:07,790 --> 00:20:15,350
people speculate or research what those

00:20:11,600 --> 00:20:17,090
costs would be and potentially make it

00:20:15,350 --> 00:20:18,620
more fun to fix the things that you wish

00:20:17,090 --> 00:20:20,420
they'd be spending time on instead

00:20:18,620 --> 00:20:24,170
through whatever means that might take

00:20:20,420 --> 00:20:26,150
so sometimes though a refactor won't

00:20:24,170 --> 00:20:28,070
suffice sometimes you have just hit the

00:20:26,150 --> 00:20:30,830
wall on what your tooling can do or

00:20:28,070 --> 00:20:33,050
you're looking forward and you're seeing

00:20:30,830 --> 00:20:34,430
well I can get up to this local maximum

00:20:33,050 --> 00:20:36,440
but that's that's the best we're gonna

00:20:34,430 --> 00:20:38,600
be able to do and I need a long-term

00:20:36,440 --> 00:20:40,790
plan to set me up to get even further

00:20:38,600 --> 00:20:44,530
than that with potentially different

00:20:40,790 --> 00:20:48,140
tooling so can rust solve your problem

00:20:44,530 --> 00:20:50,930
who here knows a little bit about rest

00:20:48,140 --> 00:20:54,890
by a show of hands so about half the

00:20:50,930 --> 00:20:59,630
room who here has light worked on rust

00:20:54,890 --> 00:21:03,020
code in some capacity so about maybe 10

00:20:59,630 --> 00:21:05,330
or 20 people so I will go through the

00:21:03,020 --> 00:21:07,340
what rust is and when you'd want to use

00:21:05,330 --> 00:21:08,930
it for both the benefit of those who

00:21:07,340 --> 00:21:11,000
haven't had the chance to work with it

00:21:08,930 --> 00:21:13,640
yet and anybody on the stream and the

00:21:11,000 --> 00:21:14,420
future recording who will be a little

00:21:13,640 --> 00:21:18,410
bit curious

00:21:14,420 --> 00:21:21,830
so rust goals include memory safety

00:21:18,410 --> 00:21:23,690
basically in any language that lets you

00:21:21,830 --> 00:21:25,250
manage memory there's a bunch of rules

00:21:23,690 --> 00:21:26,390
that the program is suppose or that

00:21:25,250 --> 00:21:28,790
you're supposed to follow as a

00:21:26,390 --> 00:21:32,420
programmer in order to avoid making

00:21:28,790 --> 00:21:34,820
mistakes and with rest you have the

00:21:32,420 --> 00:21:37,040
option of having the computer check that

00:21:34,820 --> 00:21:38,800
you followed those rules instead of just

00:21:37,040 --> 00:21:42,710
hoping you did it right

00:21:38,800 --> 00:21:45,050
rust shoots to be as performant as C and

00:21:42,710 --> 00:21:47,420
we do this with what's called zero cost

00:21:45,050 --> 00:21:48,980
abstraction which means basically you

00:21:47,420 --> 00:21:51,920
can get the same code to run on the

00:21:48,980 --> 00:21:53,840
machine regardless of a few write it in

00:21:51,920 --> 00:21:55,520
the way that makes the most sense to a

00:21:53,840 --> 00:21:57,680
machine or in the way that makes more

00:21:55,520 --> 00:21:59,960
sense to a person so the higher level

00:21:57,680 --> 00:22:03,800
abstractions won't slow your code down

00:21:59,960 --> 00:22:05,190
and it has a minimal runtime it has no

00:22:03,800 --> 00:22:09,600
interpreter no virtual

00:22:05,190 --> 00:22:12,600
you rely on no garbage collection or any

00:22:09,600 --> 00:22:14,280
of that you get similar guarantees to

00:22:12,600 --> 00:22:16,650
what you would from garbage collection

00:22:14,280 --> 00:22:19,020
about memory use but those are

00:22:16,650 --> 00:22:22,350
calculated at compile time instead of at

00:22:19,020 --> 00:22:24,600
run time so you trade a slightly slower

00:22:22,350 --> 00:22:28,350
compiled in rust where you might have a

00:22:24,600 --> 00:22:30,660
faster compile but in the occasional

00:22:28,350 --> 00:22:34,050
garbage collection hiccup in a G seed

00:22:30,660 --> 00:22:36,090
language and rust prioritizes making it

00:22:34,050 --> 00:22:38,130
easy to integrate with other languages

00:22:36,090 --> 00:22:40,680
through the tooling that those languages

00:22:38,130 --> 00:22:43,050
already have meant for integrating with

00:22:40,680 --> 00:22:46,080
C and C++ which have traditionally been

00:22:43,050 --> 00:22:49,770
the systems languages to connect with

00:22:46,080 --> 00:22:50,880
when you need finer grained control than

00:22:49,770 --> 00:22:54,690
your present than a higher-level

00:22:50,880 --> 00:22:57,120
language is giving you so when you get

00:22:54,690 --> 00:22:59,760
started with rust you'll hear things

00:22:57,120 --> 00:23:02,550
that sound kind of contradictory they'll

00:22:59,760 --> 00:23:04,500
be like oh yeah you have guaranteed

00:23:02,550 --> 00:23:06,900
memory safety except sometimes you don't

00:23:04,500 --> 00:23:09,030
and this kind of thing and that's

00:23:06,900 --> 00:23:10,680
because rest covers a lot of space by

00:23:09,030 --> 00:23:13,050
offering you a lot of different choices

00:23:10,680 --> 00:23:15,420
the first choice you'll get is do you

00:23:13,050 --> 00:23:17,190
want stable rest or nightly rest the

00:23:15,420 --> 00:23:19,020
stable rest is always backwards

00:23:17,190 --> 00:23:22,710
compatible with the other stable rests

00:23:19,020 --> 00:23:25,590
and so it moves more slowly it's not

00:23:22,710 --> 00:23:29,310
exactly a long-term support which if you

00:23:25,590 --> 00:23:31,590
need a language that will remain

00:23:29,310 --> 00:23:33,900
identical for five or ten years at a

00:23:31,590 --> 00:23:36,720
time for your application rest is

00:23:33,900 --> 00:23:38,880
probably not going to be the best choice

00:23:36,720 --> 00:23:42,120
for you yet unless you don't mind being

00:23:38,880 --> 00:23:44,670
on a pretty old stable nightly rest on

00:23:42,120 --> 00:23:46,110
the other hand is all of the bleeding

00:23:44,670 --> 00:23:47,460
edge features that we're trying out

00:23:46,110 --> 00:23:49,020
we're not sure if these are going to

00:23:47,460 --> 00:23:51,870
work we're not sure if the nightly is

00:23:49,020 --> 00:23:54,780
gonna work but Yolo let's go try things

00:23:51,870 --> 00:23:56,160
so all stable code should run on nightly

00:23:54,780 --> 00:23:57,600
if it doesn't if it's a nightly but it's

00:23:56,160 --> 00:23:58,740
a nightly bug but there's a lot of

00:23:57,600 --> 00:24:00,900
features in nightly that won't

00:23:58,740 --> 00:24:02,820
necessarily run on stable basically

00:24:00,900 --> 00:24:04,860
right and stable rest for as long as you

00:24:02,820 --> 00:24:06,780
can but you may find a dependency that

00:24:04,860 --> 00:24:09,450
requires you to use nightly and it's

00:24:06,780 --> 00:24:11,340
very easy to use both of them at the

00:24:09,450 --> 00:24:13,100
same time on your computer with some

00:24:11,340 --> 00:24:15,510
tooling I'll tell you about in a minute

00:24:13,100 --> 00:24:17,809
Russ will give the you the option of

00:24:15,510 --> 00:24:21,229
safe or unsafe code

00:24:17,809 --> 00:24:25,339
most wrest code is safe as in we check

00:24:21,229 --> 00:24:29,059
all of the memory usage to prove that

00:24:25,339 --> 00:24:31,729
there is no there's no errors being made

00:24:29,059 --> 00:24:33,019
that you're not let's say letting to

00:24:31,729 --> 00:24:34,820
different parts of the code read the

00:24:33,019 --> 00:24:40,070
same memory when they shouldn't that

00:24:34,820 --> 00:24:42,200
kind of thing whereas unsafe says this

00:24:40,070 --> 00:24:44,599
is a circumstance that we can't prove

00:24:42,200 --> 00:24:47,690
that I'll prove it myself instead

00:24:44,599 --> 00:24:49,999
so if you see Russ code with some unsafe

00:24:47,690 --> 00:24:52,070
blocks that unsafe is a hint that you

00:24:49,999 --> 00:24:55,279
should stare harder at that to make sure

00:24:52,070 --> 00:24:58,609
it doesn't have if not doing anything

00:24:55,279 --> 00:25:00,529
you wouldn't want it to when you're

00:24:58,609 --> 00:25:02,179
starting to make your own crate when

00:25:00,529 --> 00:25:04,729
you're starting a new project you'll

00:25:02,179 --> 00:25:07,849
have the choice of making a library or a

00:25:04,729 --> 00:25:09,440
binary if you're going to be integrating

00:25:07,849 --> 00:25:11,359
your rest code with some other language

00:25:09,440 --> 00:25:13,509
you probably want to make a library

00:25:11,359 --> 00:25:16,849
because it can just be called into

00:25:13,509 --> 00:25:17,779
through that languages FFI which I'll

00:25:16,849 --> 00:25:21,440
talk about in a minute

00:25:17,779 --> 00:25:24,049
so you also have a choice between

00:25:21,440 --> 00:25:26,690
dynamic and static linking for the code

00:25:24,049 --> 00:25:29,809
that you produce which dynamic linking

00:25:26,690 --> 00:25:32,149
says so with either your depending on

00:25:29,809 --> 00:25:34,099
some libraries that other people have

00:25:32,149 --> 00:25:35,719
written with dynamic linking you say

00:25:34,099 --> 00:25:37,759
I'll just point at the libraries

00:25:35,719 --> 00:25:39,859
elsewhere on my system and with static

00:25:37,759 --> 00:25:41,659
linking you say please bring in a copy

00:25:39,859 --> 00:25:44,329
of the bits of the library I need to my

00:25:41,659 --> 00:25:46,190
program so dynamic linking will give you

00:25:44,329 --> 00:25:47,899
a smaller program that's a bit less

00:25:46,190 --> 00:25:50,479
portable across machines and cross

00:25:47,899 --> 00:25:52,309
systems static linking will give you a

00:25:50,479 --> 00:25:55,309
bigger program that's a lot more

00:25:52,309 --> 00:25:57,229
portable and Resta also gives you the

00:25:55,309 --> 00:26:00,559
option to cross compile to quite a few

00:25:57,229 --> 00:26:03,109
different target platforms so if loops

00:26:00,559 --> 00:26:05,419
we added a new platform and our current

00:26:03,109 --> 00:26:07,999
language just can't target it but rest

00:26:05,419 --> 00:26:10,209
can is your problem statement then a

00:26:07,999 --> 00:26:15,079
rewrite and rest might be a great idea

00:26:10,209 --> 00:26:17,959
so rust will also offer you a really

00:26:15,079 --> 00:26:21,349
good tooling ecosystem or a tooling

00:26:17,959 --> 00:26:23,059
ecosystem whose quality really surprises

00:26:21,349 --> 00:26:26,509
people coming from a systems programming

00:26:23,059 --> 00:26:28,669
background and feels very familiar to

00:26:26,509 --> 00:26:30,650
people coming from a an application

00:26:28,669 --> 00:26:33,380
programming background

00:26:30,650 --> 00:26:35,930
where the languages can to have a higher

00:26:33,380 --> 00:26:37,790
priority on user experience so when

00:26:35,930 --> 00:26:39,830
you're first getting rest currently

00:26:37,790 --> 00:26:42,050
you'll get rest through and choose which

00:26:39,830 --> 00:26:44,090
version of rest you want to use at any

00:26:42,050 --> 00:26:46,820
point in time through a tool called rest

00:26:44,090 --> 00:26:50,570
up bear in mind if you're listening to

00:26:46,820 --> 00:26:51,860
this later on that rest up is nearer to

00:26:50,570 --> 00:26:53,630
the end than the beginning of its

00:26:51,860 --> 00:26:55,490
lifecycle at this point so it's worth

00:26:53,630 --> 00:26:58,420
doing a quick search to see whether the

00:26:55,490 --> 00:27:01,700
features have been integrated into cargo

00:26:58,420 --> 00:27:04,040
which brings us to cargo rests package

00:27:01,700 --> 00:27:06,980
manager and buy package manager I mean

00:27:04,040 --> 00:27:08,000
it's the thing that builds your project

00:27:06,980 --> 00:27:10,100
makes sure you have all your

00:27:08,000 --> 00:27:12,110
dependencies builds all your

00:27:10,100 --> 00:27:13,910
dependencies if you need it to and will

00:27:12,110 --> 00:27:15,740
let you publish your project to a public

00:27:13,910 --> 00:27:21,200
registry if you'd like to share it with

00:27:15,740 --> 00:27:22,880
others karu can handle multiple versions

00:27:21,200 --> 00:27:27,350
of various dependencies when you want it

00:27:22,880 --> 00:27:30,410
to as well and then in terms of actually

00:27:27,350 --> 00:27:34,040
writing your code you've got rust format

00:27:30,410 --> 00:27:36,050
which basically codifies a lot of

00:27:34,040 --> 00:27:38,240
recommended style guidelines for rust

00:27:36,050 --> 00:27:40,010
code and will rewrite your code to

00:27:38,240 --> 00:27:42,680
conform to those style guidelines if you

00:27:40,010 --> 00:27:45,140
want it to and we have the linter Clippy

00:27:42,680 --> 00:27:46,670
who just like the Microsoft paper clip

00:27:45,140 --> 00:27:48,710
will make all kinds of helpful

00:27:46,670 --> 00:27:51,950
suggestions except clippies are actually

00:27:48,710 --> 00:27:54,800
usually pretty helpful to make your rest

00:27:51,950 --> 00:27:55,910
look good so if you're writing some rest

00:27:54,800 --> 00:27:57,650
you're a little bit worried about

00:27:55,910 --> 00:27:59,210
sharing it with more expert people

00:27:57,650 --> 00:28:01,070
you're like oh no I wonder if it looks

00:27:59,210 --> 00:28:03,230
bad run it through rest format and

00:28:01,070 --> 00:28:05,660
Clippy and they'll tell you how it looks

00:28:03,230 --> 00:28:09,170
and help you fix it before anyone has to

00:28:05,660 --> 00:28:10,970
look so if you're learning rest check

00:28:09,170 --> 00:28:14,240
out the docs docked at rest line org

00:28:10,970 --> 00:28:18,050
there's more resources on community RS

00:28:14,240 --> 00:28:20,390
slash resources and tomorrow go to NICs

00:28:18,050 --> 00:28:26,210
talk on rest programming techniques hein

00:28:20,390 --> 00:28:29,150
mmm so with that that's the super

00:28:26,210 --> 00:28:31,910
high-level view of what rest is and I'd

00:28:29,150 --> 00:28:35,060
like to dive into some places in the

00:28:31,910 --> 00:28:36,890
industry that have rewritten pieces of

00:28:35,060 --> 00:28:39,020
their code in rust and what they've

00:28:36,890 --> 00:28:41,690
learned from it and I'm going to show

00:28:39,020 --> 00:28:44,030
you two case studies and they have a lot

00:28:41,690 --> 00:28:47,450
in common first

00:28:44,030 --> 00:28:50,060
isolated a very specific problem that

00:28:47,450 --> 00:28:52,310
they wanted to solve and they avoided

00:28:50,060 --> 00:28:55,900
rewriting code that they didn't have to

00:28:52,310 --> 00:28:58,010
to basically minimize risk they

00:28:55,900 --> 00:28:59,810
identified that problem based on the

00:28:58,010 --> 00:29:02,030
risk that it was posing them essentially

00:28:59,810 --> 00:29:03,410
and they made sure that at the end of

00:29:02,030 --> 00:29:06,230
the rewrite they would be exposed to

00:29:03,410 --> 00:29:10,220
less risk first the first thing they did

00:29:06,230 --> 00:29:12,500
was establish a workflow for having rest

00:29:10,220 --> 00:29:15,110
as part of the project for testing the

00:29:12,500 --> 00:29:17,660
rest code as well as the other code and

00:29:15,110 --> 00:29:19,430
for shipping that rest code that went

00:29:17,660 --> 00:29:22,910
with the other code that they were

00:29:19,430 --> 00:29:25,040
working on so that that workflow has to

00:29:22,910 --> 00:29:27,410
come first because without it you can't

00:29:25,040 --> 00:29:29,780
really iterate on rest code that does

00:29:27,410 --> 00:29:32,900
complex things and remember the goal is

00:29:29,780 --> 00:29:36,440
to make the small changes one at a time

00:29:32,900 --> 00:29:39,200
to get where you want to be they had a

00:29:36,440 --> 00:29:41,480
small expert team of people doing the

00:29:39,200 --> 00:29:43,730
rest part at first because the

00:29:41,480 --> 00:29:45,860
communication overhead when you're

00:29:43,730 --> 00:29:47,900
iterating and trying new things and

00:29:45,860 --> 00:29:49,370
trying to explain well we tried that and

00:29:47,900 --> 00:29:51,830
it didn't quite work so we modified it

00:29:49,370 --> 00:29:56,030
to try that to a particularly large

00:29:51,830 --> 00:29:57,860
group can really slow you down and they

00:29:56,030 --> 00:30:00,980
performed their rewrites incremental e

00:29:57,860 --> 00:30:03,020
they made the first small changes to

00:30:00,980 --> 00:30:05,840
make sure they could ship rest and then

00:30:03,020 --> 00:30:07,520
a slightly larger change to make sure

00:30:05,840 --> 00:30:10,190
that all worked and see how rest really

00:30:07,520 --> 00:30:12,800
performs in the wild and then once they

00:30:10,190 --> 00:30:14,780
have that pipeline for adding rest to

00:30:12,800 --> 00:30:17,180
pain points in their code they can

00:30:14,780 --> 00:30:19,820
proceed to add it wherever they think

00:30:17,180 --> 00:30:24,290
that it's the right solution with pretty

00:30:19,820 --> 00:30:26,630
little additional overhead so and they

00:30:24,290 --> 00:30:28,700
left they do educate the larger teams

00:30:26,630 --> 00:30:30,890
working on the product about the rest

00:30:28,700 --> 00:30:34,070
work that they've done but they put that

00:30:30,890 --> 00:30:36,650
off until the rest is succeeding they

00:30:34,070 --> 00:30:39,410
don't try to keep them up to date or

00:30:36,650 --> 00:30:42,050
with every little detail unless they

00:30:39,410 --> 00:30:44,270
want to opt in and watch because again

00:30:42,050 --> 00:30:47,120
that communication overhead can be huge

00:30:44,270 --> 00:30:51,470
so the first case study I'd like to look

00:30:47,120 --> 00:30:54,950
at is NPM the node package manager so

00:30:51,470 --> 00:30:55,980
you can see those several talks that

00:30:54,950 --> 00:30:57,929
I'll link because I

00:30:55,980 --> 00:30:59,370
we have about 45 minutes here and I'd

00:30:57,929 --> 00:31:02,790
like to give you guys some time for

00:30:59,370 --> 00:31:06,150
stories at the end there first rest

00:31:02,790 --> 00:31:07,950
service was a load balancer that would

00:31:06,150 --> 00:31:09,690
let them send some requests to arrest

00:31:07,950 --> 00:31:13,110
micro service and others to the existing

00:31:09,690 --> 00:31:16,260
microservice you can watch Ashley's talk

00:31:13,110 --> 00:31:18,059
there at that youtube link of how they

00:31:16,260 --> 00:31:19,950
once they had that load balancer in

00:31:18,059 --> 00:31:22,520
place and they could send some of their

00:31:19,950 --> 00:31:26,669
requests off to the rest

00:31:22,520 --> 00:31:29,070
they then rewrote some of their

00:31:26,669 --> 00:31:34,950
performance bottleneck code as a rust

00:31:29,070 --> 00:31:36,720
micro service and so they wrote their

00:31:34,950 --> 00:31:40,140
proxy which is figuring out how to get

00:31:36,720 --> 00:31:42,299
rest into their ecosystem they ran the

00:31:40,140 --> 00:31:44,850
rest in parallel more or less as I

00:31:42,299 --> 00:31:46,590
understand it with their existing micro

00:31:44,850 --> 00:31:48,480
service for that for a while to make

00:31:46,590 --> 00:31:50,910
sure it was okay and then they switched

00:31:48,480 --> 00:31:53,340
over to the rest one which really

00:31:50,910 --> 00:31:56,880
mirrors what Mozilla did shipping rust

00:31:53,340 --> 00:31:59,280
in Firefox through project quantum the

00:31:56,880 --> 00:32:01,530
several excellent blog posts about the

00:31:59,280 --> 00:32:04,440
scope which is a huge scope of

00:32:01,530 --> 00:32:06,720
engineering work that went into this but

00:32:04,440 --> 00:32:09,090
I like the summary that Lynn Clark gave

00:32:06,720 --> 00:32:11,730
of it they were rebuilding a jet engine

00:32:09,090 --> 00:32:14,610
while the plane is flying because the

00:32:11,730 --> 00:32:18,799
top priority was don't break Firefox

00:32:14,610 --> 00:32:18,799
don't break Firefox for the users so

00:32:20,960 --> 00:32:27,150
there's that's the huge difference I

00:32:24,179 --> 00:32:29,340
think between rewriting anything versus

00:32:27,150 --> 00:32:33,780
just building something new and that's

00:32:29,340 --> 00:32:36,660
why a lot of of the companies who have

00:32:33,780 --> 00:32:39,750
adopted rest have chosen to start new on

00:32:36,660 --> 00:32:42,210
something instead of rewriting something

00:32:39,750 --> 00:32:44,190
existing you can check out the Friends

00:32:42,210 --> 00:32:47,160
page and if you look at the way that the

00:32:44,190 --> 00:32:49,830
various companies use rust relatively

00:32:47,160 --> 00:32:51,960
few of them are rewriting existing code

00:32:49,830 --> 00:32:54,450
compared to building the new things as

00:32:51,960 --> 00:32:56,640
they need them Dropbox habitat and

00:32:54,450 --> 00:33:00,330
Coursera are instances of companies that

00:32:56,640 --> 00:33:01,980
are building a fresh instead because the

00:33:00,330 --> 00:33:06,860
rewriting requires a huge amount of

00:33:01,980 --> 00:33:09,230
backwards compatibility so

00:33:06,860 --> 00:33:13,640
to talk a bit more about about quantum

00:33:09,230 --> 00:33:16,190
though they they first had to figure out

00:33:13,640 --> 00:33:18,740
how the heck are we going to ship any

00:33:16,190 --> 00:33:21,610
rest code in the Firefox build process

00:33:18,740 --> 00:33:26,660
and that question was answered by

00:33:21,610 --> 00:33:29,870
attempting to ship a tinyurl parser in

00:33:26,660 --> 00:33:32,059
rust to run alongside the C++ one just

00:33:29,870 --> 00:33:34,160
behind a feature flag turned off the

00:33:32,059 --> 00:33:37,580
users will never see that there's any

00:33:34,160 --> 00:33:39,799
rest code in their browser but we can

00:33:37,580 --> 00:33:43,100
test our build system changes to make

00:33:39,799 --> 00:33:45,410
sure that it will build and then once

00:33:43,100 --> 00:33:48,049
they've made that tiny first change to

00:33:45,410 --> 00:33:51,320
verify that they could ship rest they

00:33:48,049 --> 00:33:53,929
proceeded to port components of an

00:33:51,320 --> 00:33:57,010
experimental browser engine servo that's

00:33:53,929 --> 00:33:59,809
written and rust to they're analogous

00:33:57,010 --> 00:34:05,120
portions of the gecko engine and

00:33:59,809 --> 00:34:07,220
basically wire it all together so they

00:34:05,120 --> 00:34:09,080
they made small changes a little at a

00:34:07,220 --> 00:34:11,990
time and only once they were really

00:34:09,080 --> 00:34:15,290
succeeding did they bring in the rest of

00:34:11,990 --> 00:34:17,540
the engineering team and say okay now

00:34:15,290 --> 00:34:19,060
you need to start learning some rest if

00:34:17,540 --> 00:34:21,260
you'd like to hack on these components

00:34:19,060 --> 00:34:22,990
now we'd really encourage you to start

00:34:21,260 --> 00:34:26,470
learning rest as opposed to trying to

00:34:22,990 --> 00:34:29,149
work together on it the whole time so

00:34:26,470 --> 00:34:32,300
what's the techniques for rewriting your

00:34:29,149 --> 00:34:34,220
rest code basically if you're rewriting

00:34:32,300 --> 00:34:35,330
you're not throwing the whole thing out

00:34:34,220 --> 00:34:38,389
and starting over which I would

00:34:35,330 --> 00:34:40,970
sincerely recommend not to do in almost

00:34:38,389 --> 00:34:45,649
all cases you're rewriting a function or

00:34:40,970 --> 00:34:46,850
a micro service you probably are going

00:34:45,649 --> 00:34:49,820
to need to use foreign function

00:34:46,850 --> 00:34:51,590
interface which is a tool that's been

00:34:49,820 --> 00:34:54,379
around for just about as long as C has

00:34:51,590 --> 00:34:55,850
for calling some language which we call

00:34:54,379 --> 00:34:58,220
the guest in your case that would

00:34:55,850 --> 00:34:59,869
probably be rest from the language we

00:34:58,220 --> 00:35:02,990
call the host that's the language that

00:34:59,869 --> 00:35:05,660
your projects written in and there's a

00:35:02,990 --> 00:35:08,540
bunch of examples of FFI from rust out

00:35:05,660 --> 00:35:10,250
there and it's also you can check the

00:35:08,540 --> 00:35:13,700
first edition and second edition of the

00:35:10,250 --> 00:35:16,940
rest book for more on this so I'm going

00:35:13,700 --> 00:35:20,830
to show you a super tiny example of FF I

00:35:16,940 --> 00:35:23,420
to do some math from Perl to rust

00:35:20,830 --> 00:35:25,550
there's gonna be four files the kogo

00:35:23,420 --> 00:35:27,530
tamil configures how the rests gets

00:35:25,550 --> 00:35:30,440
built and what metadata the rest has

00:35:27,530 --> 00:35:32,270
main dot RS contains your rest code main

00:35:30,440 --> 00:35:34,250
duck PL contains your Perl code that

00:35:32,270 --> 00:35:36,940
will call the rests function and the

00:35:34,250 --> 00:35:41,390
make file builds the Perl code and runs

00:35:36,940 --> 00:35:42,740
runs cargo to compile the rest so your

00:35:41,390 --> 00:35:45,260
cargo duck tamil you say what your

00:35:42,740 --> 00:35:47,060
package is and you give it a library

00:35:45,260 --> 00:35:48,440
name this is going to be a dynamically

00:35:47,060 --> 00:35:50,360
linked library because we don't really

00:35:48,440 --> 00:35:54,350
care about portability across platforms

00:35:50,360 --> 00:35:56,720
for a small example you're gonna have a

00:35:54,350 --> 00:35:59,480
main function you need the Nome angle

00:35:56,720 --> 00:36:01,460
directive here because you need to make

00:35:59,480 --> 00:36:04,310
sure your function has the same name as

00:36:01,460 --> 00:36:05,420
it has here to make sure that it can be

00:36:04,310 --> 00:36:07,940
called from your other code and you're

00:36:05,420 --> 00:36:10,910
just gonna take an integer and return

00:36:07,940 --> 00:36:14,990
twice that integer so in your Perl code

00:36:10,910 --> 00:36:16,460
you will use pearls FFI mechanism which

00:36:14,990 --> 00:36:21,230
there will be something similar in

00:36:16,460 --> 00:36:23,540
pretty much any language to bring in

00:36:21,230 --> 00:36:25,370
that function and make it available to

00:36:23,540 --> 00:36:28,370
your code and then you will call that

00:36:25,370 --> 00:36:29,870
fo5 function with your input and when

00:36:28,370 --> 00:36:33,170
you call that function with your input

00:36:29,870 --> 00:36:35,210
it will run the rest function that you

00:36:33,170 --> 00:36:37,760
called in the rest function will double

00:36:35,210 --> 00:36:40,490
it and then you can do whatever you want

00:36:37,760 --> 00:36:42,410
with it in this case output it so it's

00:36:40,490 --> 00:36:45,080
really not as much boilerplate as you

00:36:42,410 --> 00:36:47,990
might be afraid of to just call a little

00:36:45,080 --> 00:36:52,460
bit of rest when you want to the make

00:36:47,990 --> 00:36:55,370
file works on Apple and Linux and will

00:36:52,460 --> 00:36:59,450
just run cargo build to create the rest

00:36:55,370 --> 00:37:03,500
and then run the curl when you need to

00:36:59,450 --> 00:37:05,690
so that's F Fi and a tiny nutshell and

00:37:03,500 --> 00:37:07,820
the other thing you might need if you're

00:37:05,690 --> 00:37:10,910
building portable code is static linking

00:37:07,820 --> 00:37:13,940
and to statically linked breasts you can

00:37:10,910 --> 00:37:17,150
check the docs you can make a crate of

00:37:13,940 --> 00:37:20,240
the type static Lib and you can use the

00:37:17,150 --> 00:37:23,120
muscle library in lieu of Lib C because

00:37:20,240 --> 00:37:24,950
muscle is designed for for static

00:37:23,120 --> 00:37:26,750
linking so it's easier for the compiler

00:37:24,950 --> 00:37:29,180
to stick whatever function it was you

00:37:26,750 --> 00:37:31,970
needed into your into your code that

00:37:29,180 --> 00:37:33,210
you're emitting and you may need if you

00:37:31,970 --> 00:37:34,950
have a bunch of dependents

00:37:33,210 --> 00:37:37,490
to also recompile them with muscle

00:37:34,950 --> 00:37:40,830
because your dependencies will be

00:37:37,490 --> 00:37:43,920
included when you compile as well so if

00:37:40,830 --> 00:37:47,760
you can FFI from your host language to

00:37:43,920 --> 00:37:49,350
your to your target language and if you

00:37:47,760 --> 00:37:51,300
can statically link that rust that your

00:37:49,350 --> 00:37:53,460
FF Iying into so it doesn't drag any

00:37:51,300 --> 00:37:56,640
extra dependencies along you've pretty

00:37:53,460 --> 00:37:58,770
much got it made for basic rewriting

00:37:56,640 --> 00:38:01,440
sections of your code and rust however a

00:37:58,770 --> 00:38:03,720
bunch of other people have done partial

00:38:01,440 --> 00:38:05,310
rewrites and have produced tools that

00:38:03,720 --> 00:38:07,140
you might find fun and interesting if

00:38:05,310 --> 00:38:09,390
you're using these languages if you're

00:38:07,140 --> 00:38:11,430
working with Ruby check out helix which

00:38:09,390 --> 00:38:12,810
lets you write Ruby and your rest rest

00:38:11,430 --> 00:38:16,140
in your Ruby and various combinations

00:38:12,810 --> 00:38:20,640
thereof if you're working with node.js

00:38:16,140 --> 00:38:22,860
check out neon and if you need to if

00:38:20,640 --> 00:38:24,930
your basically if you are Mozilla and

00:38:22,860 --> 00:38:27,630
you need to procedurally generate a lot

00:38:24,930 --> 00:38:33,690
of C bindings to work with rest code

00:38:27,630 --> 00:38:36,510
bime jen exists so that's rewriting and

00:38:33,690 --> 00:38:39,630
rust in a very small 45 minute nutshell

00:38:36,510 --> 00:38:42,720
if you have questions about rewriting in

00:38:39,630 --> 00:38:43,980
rust first about rewriting parts of your

00:38:42,720 --> 00:38:45,780
code rewriting in rust

00:38:43,980 --> 00:38:47,970
check with your project in your mentors

00:38:45,780 --> 00:38:49,650
first because it's often as much a

00:38:47,970 --> 00:38:51,780
cultural decision as a technical one

00:38:49,650 --> 00:38:53,820
whether you're going to rewrite check in

00:38:51,780 --> 00:38:55,200
your host languages documentation for

00:38:53,820 --> 00:38:57,660
how you can integrate with other

00:38:55,200 --> 00:39:00,810
languages and when you get to your rest

00:38:57,660 --> 00:39:03,600
questions ask on IRC or ask on the rest

00:39:00,810 --> 00:39:05,340
users forum or contact the particular

00:39:03,600 --> 00:39:07,320
rust team that you have a very

00:39:05,340 --> 00:39:09,990
high-level question for directly if you

00:39:07,320 --> 00:39:10,860
need to if you'd like to talk to me if

00:39:09,990 --> 00:39:13,890
you'd like to ask me questions

00:39:10,860 --> 00:39:17,220
personally I'd recommend LCA at Edina

00:39:13,890 --> 00:39:20,520
met and I would like to take the last

00:39:17,220 --> 00:39:21,300
five minutes to be a little unusual for

00:39:20,520 --> 00:39:23,040
this conference

00:39:21,300 --> 00:39:24,600
I'm not going to encourage questions

00:39:23,040 --> 00:39:26,910
though if you have something you'd like

00:39:24,600 --> 00:39:29,460
for the recording you may ask but I

00:39:26,910 --> 00:39:33,930
would like to hear your short stories of

00:39:29,460 --> 00:39:35,670
rewrites and of rewriting code or the

00:39:33,930 --> 00:39:37,410
impact that other's rewrites have had on

00:39:35,670 --> 00:39:41,070
you or fun that you've had with rust

00:39:37,410 --> 00:39:42,810
just as a bit of a chance to share so it

00:39:41,070 --> 00:39:44,670
looks like we've got about five more

00:39:42,810 --> 00:39:48,660
minutes till the cutoff time so would

00:39:44,670 --> 00:39:49,920
anyone like to share anything first of

00:39:48,660 --> 00:39:50,530
all me

00:39:49,920 --> 00:39:51,250
[Music]

00:39:50,530 --> 00:39:54,460
[Applause]

00:39:51,250 --> 00:39:54,460
[Music]

00:39:59,700 --> 00:40:08,530
stories that be shy Wow must be the

00:40:07,000 --> 00:40:12,940
after lunch that we've got one up here

00:40:08,530 --> 00:40:15,280
and one over there I didn't rewrite it

00:40:12,940 --> 00:40:21,090
in another language but I just there was

00:40:15,280 --> 00:40:25,660
some code for implementing sort of LDAP

00:40:21,090 --> 00:40:27,880
authentication for for people and but it

00:40:25,660 --> 00:40:30,610
used non-standard schemas and

00:40:27,880 --> 00:40:35,410
non-standard lots of things and a very

00:40:30,610 --> 00:40:38,950
old version of LDAP so it I rewrote it

00:40:35,410 --> 00:40:42,370
as middleware and using standard open

00:40:38,950 --> 00:40:47,470
LDAP well standard schemas like group

00:40:42,370 --> 00:40:51,520
names instead of some made-up attribute

00:40:47,470 --> 00:40:55,300
so that could work to support other so

00:40:51,520 --> 00:40:57,430
it could work to support would fit into

00:40:55,300 --> 00:41:00,330
things like Jenkins and other systems

00:40:57,430 --> 00:41:03,700
that expected particular schemas and

00:41:00,330 --> 00:41:06,310
well it worked it was successful but it

00:41:03,700 --> 00:41:09,430
took more effort than I expected yeah

00:41:06,310 --> 00:41:10,720
still being used now years later mm-hmm

00:41:09,430 --> 00:41:12,040
sounds like that might have made it a

00:41:10,720 --> 00:41:13,450
lot easier to test but might have

00:41:12,040 --> 00:41:15,220
introduced a lot of new bugs we've got a

00:41:13,450 --> 00:41:20,320
story or a question over there as well

00:41:15,220 --> 00:41:23,260
okay sorry um so I'm rewriting an

00:41:20,320 --> 00:41:24,910
embroidery library in rust and there are

00:41:23,260 --> 00:41:27,220
a couple of projects that you didn't

00:41:24,910 --> 00:41:30,760
don't work that poorly in slipped under

00:41:27,220 --> 00:41:34,270
the radar one of them is corrode which

00:41:30,760 --> 00:41:38,310
basically looks at the C syntax tree and

00:41:34,270 --> 00:41:40,300
converts it into rust and the other one

00:41:38,310 --> 00:41:42,880
whose names escape me

00:41:40,300 --> 00:41:46,600
but basically is able to generate C

00:41:42,880 --> 00:41:49,840
headers for rust code and I found that

00:41:46,600 --> 00:41:51,870
really useful when trying to use some

00:41:49,840 --> 00:41:56,230
rust code and some C codes together

00:41:51,870 --> 00:41:58,720
absolutely yes corrode is less actively

00:41:56,230 --> 00:42:00,670
maintained than it was when it was under

00:41:58,720 --> 00:42:02,890
active development as I understand and

00:42:00,670 --> 00:42:05,110
but if you have a big chunk of C that

00:42:02,890 --> 00:42:07,109
you would like automatically translated

00:42:05,110 --> 00:42:12,299
into unsafe rust corrode is your

00:42:07,109 --> 00:42:15,239
and so that's almost mine I've got three

00:42:12,299 --> 00:42:17,269
large chunks of C code where can I find

00:42:15,239 --> 00:42:21,930
somebody who wants to rewrite it in rust

00:42:17,269 --> 00:42:23,460
that is a fantastic question there are a

00:42:21,930 --> 00:42:28,920
few things you could do if the code is

00:42:23,460 --> 00:42:31,529
public I would recommend searching for

00:42:28,920 --> 00:42:33,930
people who are being sort of rewrite

00:42:31,529 --> 00:42:35,489
trolls on github who say you should go

00:42:33,930 --> 00:42:37,349
rewrite that thing and then hop into

00:42:35,489 --> 00:42:39,390
their issues and say if this project

00:42:37,349 --> 00:42:41,249
doesn't want you to rewrite it I would

00:42:39,390 --> 00:42:44,970
love to have your help if you want to

00:42:41,249 --> 00:42:50,220
troll the trolls back in in a list in a

00:42:44,970 --> 00:42:53,369
less snarky answer I would say find your

00:42:50,220 --> 00:42:58,049
local rest meetup post on the rest users

00:42:53,369 --> 00:43:02,099
forum frankly attempt to do it do it

00:42:58,049 --> 00:43:04,769
however poorly and show your attempt at

00:43:02,099 --> 00:43:07,950
the work far and wide because often a

00:43:04,769 --> 00:43:11,130
poorly done thing will go to people into

00:43:07,950 --> 00:43:16,440
offering fix ups in a way that a request

00:43:11,130 --> 00:43:19,140
for advice just doesn't so some of my

00:43:16,440 --> 00:43:21,239
greatest success with writing things in

00:43:19,140 --> 00:43:24,390
languages I'm not familiar with has been

00:43:21,239 --> 00:43:26,220
from writing at very poorly and showing

00:43:24,390 --> 00:43:28,920
it to some people who are experts in the

00:43:26,220 --> 00:43:31,200
language and saying I tried pull

00:43:28,920 --> 00:43:35,640
requests welcome and they'll go oh that

00:43:31,200 --> 00:43:37,140
hurts my eyes here so those are my

00:43:35,640 --> 00:43:39,480
suggestions for you you might also find

00:43:37,140 --> 00:43:42,900
someone in the room afterwards as well

00:43:39,480 --> 00:43:46,200
so any other stories or questions looks

00:43:42,900 --> 00:43:48,619
like we've got about one minute left one

00:43:46,200 --> 00:43:48,619
back there

00:43:56,119 --> 00:44:03,440
I had a I have a very large perl script

00:43:59,210 --> 00:44:06,200
of about 17,000 lines and I had someone

00:44:03,440 --> 00:44:08,000
come to me and say hey I wouldn't mind

00:44:06,200 --> 00:44:10,130
making these changes so I would work

00:44:08,000 --> 00:44:12,680
with our system and I said well I'm not

00:44:10,130 --> 00:44:15,020
going to do it because it's not it's not

00:44:12,680 --> 00:44:16,369
what I support and they came back and

00:44:15,020 --> 00:44:19,030
they said well here you go

00:44:16,369 --> 00:44:21,650
and actually improved performance by

00:44:19,030 --> 00:44:24,829
something that took 30 seconds to run

00:44:21,650 --> 00:44:26,839
now takes five seconds to run so you

00:44:24,829 --> 00:44:29,540
just let people do things and it helps

00:44:26,839 --> 00:44:31,730
and everyone benefits that it's

00:44:29,540 --> 00:44:33,920
absolutely the perk of public code so

00:44:31,730 --> 00:44:35,780
with that I'd like to wrap it up and say

00:44:33,920 --> 00:44:38,810
thank you all very much for being here I

00:44:35,780 --> 00:44:41,180
would strongly recommend attending nicks

00:44:38,810 --> 00:44:43,400
talk tomorrow if you it's a tutorial

00:44:41,180 --> 00:44:48,200
session if you'd like to learn some more

00:44:43,400 --> 00:44:50,060
rest and we have a little conference and

00:44:48,200 --> 00:44:52,810
we have the speaker guest thank you very

00:44:50,060 --> 00:44:55,190
much Emily I can tell that by your

00:44:52,810 --> 00:44:57,079
clarity and your diligence that you must

00:44:55,190 --> 00:45:01,819
be an excellent engineer and if you ever

00:44:57,079 --> 00:45:03,410
want to come to work on the projects we

00:45:01,819 --> 00:45:04,730
were doing a section that we're both

00:45:03,410 --> 00:45:07,430
Mazzilli ins but in totally different

00:45:04,730 --> 00:45:10,099
branches of the organization so yeah

00:45:07,430 --> 00:45:12,030
thank you very much and thank you LCA

00:45:10,099 --> 00:45:15,709
for having me once again

00:45:12,030 --> 00:45:15,709

YouTube URL: https://www.youtube.com/watch?v=6jqy-Dizd0I


