Title: Zen and the Art of Convincing Your Company to Use Rust • Ashley Williams • GOTO 2018
Publication date: 2018-11-15
Playlist: Other Conferences 2018
Description: 
	This presentation was recorded at GOTO Berlin 2018. #gotocon #gotober
http://gotober.com

Ashley Williams - Rust Core Team Member and Rust Community Team Lead

ABSTRACT
I made one of my favorite pull requests ever on December 17, 2016: rust-www/pulls/634: add npm to friends page.
On any given day, the npm registry, a repository of packages primarily for JavaScript and Node.js, serves around ~650,000,000 package downloads. The npm services team is small and this once little Node.js service, the lifeblood of the modern web development workflow, is now a huge set of microservices- and starting in late 2016, it’s no longer just Node.js- it’s running production Rust. In this talk, I’ll tell the story of how I convinced my manager and team to give Rust a chance. Along the way, I’ll talk about the critical challenges that the npm registry services encounter on a daily basis, the patterns we’ve adopted to cope with the heavy operational load, and how they are well suited to be solved with Rust. I’ll also highlight the unique aspects of Rust that [...]

Read the full abstract here:
https://gotober.com/2018/sessions/528

https://twitter.com/gotober
https://www.facebook.com/GOTOConference
http://gotocon.com
#Rust #Rustlang #JavaScript #NodeJS #JS

Looking for a unique learning experience?
Attend the next GOTO Conference near you! Get your ticket at http://gotocon.com

SUBSCRIBE TO OUR CHANNEL - new videos posted almost daily.
https://www.youtube.com/user/GotoConferences/?sub_confirmation=1
Captions: 
	00:00:03,510 --> 00:00:07,530
[Music]

00:00:13,330 --> 00:00:18,470
so my talk today is called zen and the

00:00:16,309 --> 00:00:20,810
art of convincing your company to use

00:00:18,470 --> 00:00:23,210
rust there are some hand-drawn

00:00:20,810 --> 00:00:25,460
illustrations as you can see right here

00:00:23,210 --> 00:00:27,890
I'm gonna talk a little bit about NPM

00:00:25,460 --> 00:00:30,949
and if you don't know that NPM mascot is

00:00:27,890 --> 00:00:33,500
a wombat so that is the wombat here on a

00:00:30,949 --> 00:00:35,840
motorcycle and then the rust mascot is a

00:00:33,500 --> 00:00:37,550
crab named Ferris if you want to know

00:00:35,840 --> 00:00:38,180
the puns behind that I'll explain them

00:00:37,550 --> 00:00:43,010
to you later

00:00:38,180 --> 00:00:44,989
they are extensive so yeah my name is

00:00:43,010 --> 00:00:47,449
Ashley Williams you may know me from the

00:00:44,989 --> 00:00:50,839
internet as a g-dubs if you follow me on

00:00:47,449 --> 00:00:55,400
Twitter I'm sorry if you don't follow at

00:00:50,839 --> 00:00:59,330
your own risk so I currently work as a

00:00:55,400 --> 00:01:01,610
contractor for Mozilla and I work on the

00:00:59,330 --> 00:01:03,710
rust programming language so this is a

00:01:01,610 --> 00:01:05,840
small set of the titles that I hold

00:01:03,710 --> 00:01:07,580
because it turns out that an open-source

00:01:05,840 --> 00:01:09,619
project is very similar to a small

00:01:07,580 --> 00:01:14,090
startup and trying to do just one thing

00:01:09,619 --> 00:01:15,800
is incredibly difficult so at the

00:01:14,090 --> 00:01:17,420
speakers dinner I realized that I don't

00:01:15,800 --> 00:01:19,400
really know the makeup of the audience

00:01:17,420 --> 00:01:21,320
so I kind of wanted to pull to get a

00:01:19,400 --> 00:01:25,340
sense of what people do so how many

00:01:21,320 --> 00:01:28,370
people here write rust how many people

00:01:25,340 --> 00:01:29,840
here want to write rust alright

00:01:28,370 --> 00:01:32,060
hopefully by the end I may have

00:01:29,840 --> 00:01:33,920
convinced a couple more of you if you

00:01:32,060 --> 00:01:36,350
don't want to write it I'm very curious

00:01:33,920 --> 00:01:39,590
while you're here this will be fun how

00:01:36,350 --> 00:01:41,720
many people here write JavaScript all

00:01:39,590 --> 00:01:44,360
right cool there's a small bit at the

00:01:41,720 --> 00:01:46,700
end about using rusts to make your

00:01:44,360 --> 00:01:49,670
JavaScript awesome so I'm really excited

00:01:46,700 --> 00:01:52,670
to talk about that as well all right

00:01:49,670 --> 00:01:55,340
so this talk today is a my story about

00:01:52,670 --> 00:01:57,050
getting the company NPM you may have

00:01:55,340 --> 00:01:59,990
heard of it

00:01:57,050 --> 00:02:03,110
to use rust and so NPM as we all know

00:01:59,990 --> 00:02:04,490
stands for nearly perfect machine it

00:02:03,110 --> 00:02:06,680
definitely doesn't go down or have

00:02:04,490 --> 00:02:09,349
problems right we'll talk about some of

00:02:06,680 --> 00:02:11,360
those problems later today but I worked

00:02:09,349 --> 00:02:14,450
at NPM up until January of this year

00:02:11,360 --> 00:02:16,160
when I got to leave that company so that

00:02:14,450 --> 00:02:19,850
I could do my dream job which is work

00:02:16,160 --> 00:02:21,200
full-time and open source so when I was

00:02:19,850 --> 00:02:23,510
doing that I also had

00:02:21,200 --> 00:02:25,370
a bunch of different titles and so I

00:02:23,510 --> 00:02:28,610
still hold some of these today's some of

00:02:25,370 --> 00:02:30,440
them not but when you get involved in an

00:02:28,610 --> 00:02:32,480
open source everyone wants you to do

00:02:30,440 --> 00:02:36,140
everything and I'm incredibly bad at

00:02:32,480 --> 00:02:38,480
saying no so this is just a set of the

00:02:36,140 --> 00:02:40,489
things that I've also done but what you

00:02:38,480 --> 00:02:42,860
might notice is that in my list of rust

00:02:40,489 --> 00:02:46,040
activities I also happen to manage the

00:02:42,860 --> 00:02:48,530
package manager for rust the CLI tool is

00:02:46,040 --> 00:02:50,480
called cargo and it's awesome and the

00:02:48,530 --> 00:02:52,670
registry is called crates i/o and so I

00:02:50,480 --> 00:02:54,890
am just you know part of this team of

00:02:52,670 --> 00:02:58,069
really cute animals moving packages of

00:02:54,890 --> 00:03:00,230
code around I a joke that when I retire

00:02:58,069 --> 00:03:01,630
I'm gonna work at UPS which is the

00:03:00,230 --> 00:03:05,230
parcel system for the United States

00:03:01,630 --> 00:03:08,870
because it's simply my only skill set

00:03:05,230 --> 00:03:10,910
but yeah so if you don't know about MPM

00:03:08,870 --> 00:03:12,980
NPM always likes to talk about how large

00:03:10,910 --> 00:03:15,890
their numbers are so this was taken

00:03:12,980 --> 00:03:17,390
earlier today it's funny because when I

00:03:15,890 --> 00:03:18,980
gave this talk a version of this talk

00:03:17,390 --> 00:03:24,260
about a year ago the numbers were about

00:03:18,980 --> 00:03:26,690
50% of these so big numbers are big NPM

00:03:24,260 --> 00:03:28,220
is a huge ecosystem and so this is

00:03:26,690 --> 00:03:30,350
module counts if you don't know about

00:03:28,220 --> 00:03:32,780
this this is a site that aggregates all

00:03:30,350 --> 00:03:34,670
of the packages in all of the different

00:03:32,780 --> 00:03:37,130
package registries and I like this

00:03:34,670 --> 00:03:39,350
because as you can see NPM has this

00:03:37,130 --> 00:03:41,510
thing in startup terms called a hockey

00:03:39,350 --> 00:03:43,489
stick curve I don't know why they call

00:03:41,510 --> 00:03:46,010
it that it's just an exponential curve

00:03:43,489 --> 00:03:48,769
but clearly you can see it's quite large

00:03:46,010 --> 00:03:51,500
and hilariously if you take a look the

00:03:48,769 --> 00:03:56,239
yellow line is crates i/o so we're not

00:03:51,500 --> 00:03:58,340
quite at the same scale yet but I show

00:03:56,239 --> 00:04:00,260
these to say that NPM is the largest

00:03:58,340 --> 00:04:02,299
package registry in the world and

00:04:00,260 --> 00:04:03,889
immediately upon saying this all of the

00:04:02,299 --> 00:04:06,680
YouTube comments I get are like actually

00:04:03,889 --> 00:04:09,620
no and so if you want to fight about

00:04:06,680 --> 00:04:11,720
this YouTube comments exists I guess um

00:04:09,620 --> 00:04:13,609
that's probably the best place to do it

00:04:11,720 --> 00:04:16,130
mostly what I want to say is this is an

00:04:13,609 --> 00:04:18,380
incredibly large service that has to

00:04:16,130 --> 00:04:20,239
deal with a lot of requests and so

00:04:18,380 --> 00:04:24,889
that's gonna be a big reason that we end

00:04:20,239 --> 00:04:27,050
up talking about rust so in 2016 so

00:04:24,889 --> 00:04:29,210
almost two years ago I got to make this

00:04:27,050 --> 00:04:31,220
amazing pull request that said add NPM

00:04:29,210 --> 00:04:33,670
to the friends page for those of you who

00:04:31,220 --> 00:04:35,440
don't know on the wrestling website

00:04:33,670 --> 00:04:37,660
all of the companies that use rust in

00:04:35,440 --> 00:04:38,410
production it's a lot of blockchain

00:04:37,660 --> 00:04:40,240
companies

00:04:38,410 --> 00:04:43,360
what's the small ones but there's also

00:04:40,240 --> 00:04:46,510
some big ones and in December of 2016 I

00:04:43,360 --> 00:04:49,300
got to add NPM to that list and that was

00:04:46,510 --> 00:04:52,630
amazing how many people here have tried

00:04:49,300 --> 00:04:56,770
to get their company to take a bet on a

00:04:52,630 --> 00:04:59,560
brand new kind of edgy technology how

00:04:56,770 --> 00:05:01,390
many people succeeded all right so

00:04:59,560 --> 00:05:02,980
that's good but if you want to succeed

00:05:01,390 --> 00:05:06,340
that's really the goal of the talk today

00:05:02,980 --> 00:05:08,530
so NPM uses rust and this was like my

00:05:06,340 --> 00:05:11,860
most exciting thing I was incredibly

00:05:08,530 --> 00:05:13,990
happy about this but I realized that

00:05:11,860 --> 00:05:16,540
many people in this room may not know

00:05:13,990 --> 00:05:18,730
what rust is so I'm not gonna go into

00:05:16,540 --> 00:05:20,500
too many like technical details about

00:05:18,730 --> 00:05:22,360
rust if you want to ask those in the

00:05:20,500 --> 00:05:24,820
questions I'm super happy to answer them

00:05:22,360 --> 00:05:27,460
but to start we can talk with how rust

00:05:24,820 --> 00:05:29,650
describes itself on its website rust

00:05:27,460 --> 00:05:31,590
says that it is a systems programming

00:05:29,650 --> 00:05:34,270
language that runs blazingly fast

00:05:31,590 --> 00:05:37,300
prevents seg faults and guarantees

00:05:34,270 --> 00:05:39,220
thread safety now that sounds I guess

00:05:37,300 --> 00:05:42,190
kind of good but most people who hear

00:05:39,220 --> 00:05:45,070
this kind of hear this it's like okay

00:05:42,190 --> 00:05:46,810
what like what is systems programming

00:05:45,070 --> 00:05:50,260
every time I ask someone they have a

00:05:46,810 --> 00:05:51,970
different answer and so I like to kind

00:05:50,260 --> 00:05:53,110
of tell the story of rust so many people

00:05:51,970 --> 00:05:54,940
don't realize that rust was a

00:05:53,110 --> 00:05:58,150
programming language that was originally

00:05:54,940 --> 00:06:00,760
designed to replace C++ in the Firefox

00:05:58,150 --> 00:06:02,530
codebase the Firefox codebase needed to

00:06:00,760 --> 00:06:05,050
move very quickly at the speed of the

00:06:02,530 --> 00:06:07,630
web perhaps and it turned out that the

00:06:05,050 --> 00:06:09,760
C++ they had was just incredibly hard to

00:06:07,630 --> 00:06:12,100
maintain particularly because of the

00:06:09,760 --> 00:06:13,780
lack of safety guarantees trying to

00:06:12,100 --> 00:06:15,760
refactor or change something in the

00:06:13,780 --> 00:06:17,800
codebase could cause really huge

00:06:15,760 --> 00:06:20,350
problems in another spot how many people

00:06:17,800 --> 00:06:22,930
here have ever written some C++ how many

00:06:20,350 --> 00:06:26,410
people here have written unsafe C++ all

00:06:22,930 --> 00:06:27,850
the hands should still be up okay but

00:06:26,410 --> 00:06:30,640
that's not to say that C++ is a bad

00:06:27,850 --> 00:06:32,770
language is incredibly powerful but rust

00:06:30,640 --> 00:06:34,930
was conceived to be like okay we need to

00:06:32,770 --> 00:06:36,490
have a C++ code base that's gonna be old

00:06:34,930 --> 00:06:38,350
and we need to be able to move quickly

00:06:36,490 --> 00:06:40,300
on it and that was the original

00:06:38,350 --> 00:06:41,950
inspiration for rust so if many people

00:06:40,300 --> 00:06:44,470
here have heard of kind of the battle

00:06:41,950 --> 00:06:46,030
between rust and go that's kind of an

00:06:44,470 --> 00:06:46,920
artificial one that's kind of developed

00:06:46,030 --> 00:06:48,630
and emerged of the

00:06:46,920 --> 00:06:52,140
community like originally we were really

00:06:48,630 --> 00:06:53,940
looking to replace C++ so a couple of

00:06:52,140 --> 00:06:55,950
the characteristics of the language are

00:06:53,940 --> 00:06:58,520
we are statically typed it's a compiled

00:06:55,950 --> 00:07:00,840
language we don't have any runtime

00:06:58,520 --> 00:07:03,090
there's a lot of different ways to talk

00:07:00,840 --> 00:07:04,650
about types of garbage collection some

00:07:03,090 --> 00:07:07,380
people like to say you have to manually

00:07:04,650 --> 00:07:09,360
manage memory and rest it is not

00:07:07,380 --> 00:07:11,550
entirely accurate but there's certainly

00:07:09,360 --> 00:07:14,490
nothing happening at runtime with that

00:07:11,550 --> 00:07:15,810
memory management as a result the rest

00:07:14,490 --> 00:07:17,880
programs that you write are gonna have

00:07:15,810 --> 00:07:20,490
an incredibly small memory footprint and

00:07:17,880 --> 00:07:23,010
more importantly we have memory safety

00:07:20,490 --> 00:07:26,010
guarantees and I'll talk about that in a

00:07:23,010 --> 00:07:27,510
little while so my favorite way to

00:07:26,010 --> 00:07:28,830
define rust is that rust is a

00:07:27,510 --> 00:07:31,860
programming language that wants to

00:07:28,830 --> 00:07:34,890
empower all developers to be systems

00:07:31,860 --> 00:07:36,420
developers which is to say maybe you're

00:07:34,890 --> 00:07:38,040
like writing JavaScript maybe you're

00:07:36,420 --> 00:07:39,630
writing PHP and you're like I just do

00:07:38,040 --> 00:07:42,390
stuff on the web I don't want to get

00:07:39,630 --> 00:07:45,390
close to the metal and rust is here to

00:07:42,390 --> 00:07:47,280
say not only can you but you should and

00:07:45,390 --> 00:07:51,120
this is the type of language that you

00:07:47,280 --> 00:07:52,590
can do that with so rust has always been

00:07:51,120 --> 00:07:54,210
kind of looking at these ideas of

00:07:52,590 --> 00:07:55,740
trade-offs and whenever we talk about

00:07:54,210 --> 00:07:57,840
programming tools we often talk about

00:07:55,740 --> 00:07:59,520
trade-offs but what rust wants to do is

00:07:57,840 --> 00:08:01,410
say some of these original kind of like

00:07:59,520 --> 00:08:04,740
baked and trade-off so we kind of take

00:08:01,410 --> 00:08:06,900
for granted what if we didn't what if we

00:08:04,740 --> 00:08:08,850
could say oh you know there's often a

00:08:06,900 --> 00:08:11,340
you know a separation between the idea

00:08:08,850 --> 00:08:13,080
of speed or safety and then productivity

00:08:11,340 --> 00:08:16,200
and ergonomics and we're like what if

00:08:13,080 --> 00:08:18,390
with the magic of compilers compilers

00:08:16,200 --> 00:08:21,150
are so cool with the magic of compilers

00:08:18,390 --> 00:08:23,640
we can not have to make this a trade-off

00:08:21,150 --> 00:08:25,320
what if we can have all three now Russ

00:08:23,640 --> 00:08:27,120
is a very new language to a certain

00:08:25,320 --> 00:08:29,150
extent especially compared to a lot of

00:08:27,120 --> 00:08:32,250
the languages people are writing here

00:08:29,150 --> 00:08:34,020
but we are working very hard towards

00:08:32,250 --> 00:08:38,430
this goal and we've seen a lot of

00:08:34,020 --> 00:08:40,200
success so today I am want to more

00:08:38,430 --> 00:08:43,170
particularly talk to you about the idea

00:08:40,200 --> 00:08:45,480
of how to convince your company to use

00:08:43,170 --> 00:08:47,220
rust so we're going to step a little bit

00:08:45,480 --> 00:08:49,620
away from the technical definition of

00:08:47,220 --> 00:08:51,150
rust is what rust is and talk about how

00:08:49,620 --> 00:08:53,220
you can convince your company to do this

00:08:51,150 --> 00:08:55,320
that being said if you are already

00:08:53,220 --> 00:08:56,970
decided after my little spiel about rust

00:08:55,320 --> 00:09:00,720
that rust doesn't seem like the thing

00:08:56,970 --> 00:09:02,100
for you one that's cool but two at

00:09:00,720 --> 00:09:05,480
think a lot of the tips here are gonna

00:09:02,100 --> 00:09:09,240
help you like advocate for any type of

00:09:05,480 --> 00:09:10,680
technologies like at your company so you

00:09:09,240 --> 00:09:12,329
may or may not have recognized that my

00:09:10,680 --> 00:09:13,199
title is a reference to a book called

00:09:12,329 --> 00:09:15,240
zen and the art of motorcycle

00:09:13,199 --> 00:09:17,069
maintenance hence that weird

00:09:15,240 --> 00:09:19,319
illustration of a motorcycle at the

00:09:17,069 --> 00:09:20,699
beginning but in that book there's a

00:09:19,319 --> 00:09:22,920
statement that says the number of

00:09:20,699 --> 00:09:26,189
rational hypotheses that can explain any

00:09:22,920 --> 00:09:27,540
given phenomena is infinite so the real

00:09:26,189 --> 00:09:29,459
answer is how can you convince your

00:09:27,540 --> 00:09:31,610
company to use rust like there's

00:09:29,459 --> 00:09:34,980
probably an infinite number of answers

00:09:31,610 --> 00:09:37,350
but today I'm gonna represent ten of

00:09:34,980 --> 00:09:38,970
them and you may or may not notice that

00:09:37,350 --> 00:09:41,009
a lot of them have contradictions

00:09:38,970 --> 00:09:44,370
because it turns out that things are

00:09:41,009 --> 00:09:46,410
difficult so yeah let's get started so

00:09:44,370 --> 00:09:48,569
the very first tip for getting your

00:09:46,410 --> 00:09:52,319
company to write rust is to not rewrite

00:09:48,569 --> 00:09:53,339
your software it rust right you're like

00:09:52,319 --> 00:09:54,930
what No

00:09:53,339 --> 00:09:57,779
so what I mean to say is that you should

00:09:54,930 --> 00:10:00,240
not completely rewrite your software in

00:09:57,779 --> 00:10:02,339
rust and this is incredibly important so

00:10:00,240 --> 00:10:04,500
it turns out that complete rewrites are

00:10:02,339 --> 00:10:06,480
often very unsuccessful how many people

00:10:04,500 --> 00:10:09,350
here have tried to endeavor on a

00:10:06,480 --> 00:10:14,550
complete rewrite that didn't work out

00:10:09,350 --> 00:10:15,899
yeah same so one of the neat ways to

00:10:14,550 --> 00:10:17,639
talk about this is actually from

00:10:15,899 --> 00:10:20,399
somebody who does systems engineering

00:10:17,639 --> 00:10:22,800
but also is a pediatrician he wrote a

00:10:20,399 --> 00:10:24,600
book called system antics about how

00:10:22,800 --> 00:10:27,149
systems succeed but particularly how

00:10:24,600 --> 00:10:28,860
systems fail and here's what he says

00:10:27,149 --> 00:10:31,019
about systems he says a complex system

00:10:28,860 --> 00:10:32,850
that works is invariably found to have

00:10:31,019 --> 00:10:34,980
evolved from a simple system that worked

00:10:32,850 --> 00:10:38,610
a complex system designed from scratch

00:10:34,980 --> 00:10:40,769
never works and cannot be patched up to

00:10:38,610 --> 00:10:44,250
make it work you have to start over with

00:10:40,769 --> 00:10:46,860
a simple system and so with this quote

00:10:44,250 --> 00:10:48,629
you might ask oh gosh all efforts will

00:10:46,860 --> 00:10:52,319
fail how can I possibly introduce a new

00:10:48,629 --> 00:10:54,360
technology at my company and so when I

00:10:52,319 --> 00:10:56,220
was working at MPI our CTO is named CJ

00:10:54,360 --> 00:10:58,589
Silverio and she gives a talk called

00:10:56,220 --> 00:11:00,269
cheating calls law how can we cheat this

00:10:58,589 --> 00:11:03,509
idea that we always have to start with a

00:11:00,269 --> 00:11:05,399
simple system and this is kind of how we

00:11:03,509 --> 00:11:07,500
do it so this is exactly how we do it at

00:11:05,399 --> 00:11:09,870
MPM which is to say NPM originally

00:11:07,500 --> 00:11:11,040
started as a monolith even worse it was

00:11:09,870 --> 00:11:14,190
a mono lift that was basically all

00:11:11,040 --> 00:11:17,490
inside a database recommendation don't

00:11:14,190 --> 00:11:19,080
do that but it turns out that to get MPM

00:11:17,490 --> 00:11:22,110
started it was a pretty good idea

00:11:19,080 --> 00:11:23,910
so as NPM grew and had tons of scaling

00:11:22,110 --> 00:11:29,220
problems if anyone was trying to do

00:11:23,910 --> 00:11:31,170
JavaScript in like 2000 hit 1011 NPM was

00:11:29,220 --> 00:11:32,850
kind of on fire and so the way we

00:11:31,170 --> 00:11:34,230
started dealing with this was instead of

00:11:32,850 --> 00:11:35,550
trying to completely rewrite it from

00:11:34,230 --> 00:11:37,620
scratch which I think we can all agree

00:11:35,550 --> 00:11:39,660
was probably going to be a bad idea we

00:11:37,620 --> 00:11:41,820
started introducing a proxy and then

00:11:39,660 --> 00:11:45,210
splitting off tiny little services and

00:11:41,820 --> 00:11:47,310
so these are well known as micro

00:11:45,210 --> 00:11:48,780
services and so this is like a hot term

00:11:47,310 --> 00:11:50,160
and I probably do not have to explain it

00:11:48,780 --> 00:11:51,780
to you but it turns out that if you want

00:11:50,160 --> 00:11:54,120
to introduce a new technology at your

00:11:51,780 --> 00:11:58,230
company a micro services architecture is

00:11:54,120 --> 00:12:01,380
a great way to do it so to follow up

00:11:58,230 --> 00:12:03,840
with this tip 2 is to show up with code

00:12:01,380 --> 00:12:05,850
so inevitably this means that you might

00:12:03,840 --> 00:12:08,040
be working kind of like off hours late

00:12:05,850 --> 00:12:10,860
at night sneaking in some work to do and

00:12:08,040 --> 00:12:13,440
so the very first rest code that I ever

00:12:10,860 --> 00:12:15,600
wrote was using this framework called

00:12:13,440 --> 00:12:18,150
Tokyo which if anybody here is familiar

00:12:15,600 --> 00:12:21,150
with rust this is our async solution and

00:12:18,150 --> 00:12:22,740
when I was doing this in 2015 it turns

00:12:21,150 --> 00:12:25,290
out that this was really an immature

00:12:22,740 --> 00:12:26,730
library and so the story today around

00:12:25,290 --> 00:12:28,530
async and rust is still pretty

00:12:26,730 --> 00:12:31,260
complicated but back in the day it was

00:12:28,530 --> 00:12:31,800
even worse but I don't know I like a

00:12:31,260 --> 00:12:33,690
challenge

00:12:31,800 --> 00:12:36,570
and so I was like I now that we have

00:12:33,690 --> 00:12:38,670
async in rust that sounds like a great

00:12:36,570 --> 00:12:40,380
replacement for node so we've got a

00:12:38,670 --> 00:12:43,920
bunch of node the nodes not working so

00:12:40,380 --> 00:12:45,690
great let me try this out in rust so how

00:12:43,920 --> 00:12:48,690
many people here have heard of a

00:12:45,690 --> 00:12:51,450
registry follower all right

00:12:48,690 --> 00:12:54,360
so the NPM registry takes in all of

00:12:51,450 --> 00:12:55,890
these events and sends them out and you

00:12:54,360 --> 00:12:57,960
can write a follower to follow these

00:12:55,890 --> 00:13:00,450
events and do activities and I'll talk a

00:12:57,960 --> 00:13:01,800
little bit about that more later but

00:13:00,450 --> 00:13:04,200
this was what I decided to do because

00:13:01,800 --> 00:13:07,320
fundamentally this is how all of the NPM

00:13:04,200 --> 00:13:09,360
registry architecture works so when I

00:13:07,320 --> 00:13:12,600
talked about that database our database

00:13:09,360 --> 00:13:15,210
application was all inside CouchDB which

00:13:12,600 --> 00:13:16,950
is a red couch that's their logo and so

00:13:15,210 --> 00:13:19,440
you can see that all of these types of

00:13:16,950 --> 00:13:21,089
events come into the CouchDB and then

00:13:19,440 --> 00:13:23,400
what we're able to do in the NPM

00:13:21,089 --> 00:13:25,500
registry is have followers that can

00:13:23,400 --> 00:13:27,510
follow those events and

00:13:25,500 --> 00:13:29,370
so in a little bit less illustrative

00:13:27,510 --> 00:13:31,500
terms this is kind of what that looks

00:13:29,370 --> 00:13:34,230
like which is to say changes go into the

00:13:31,500 --> 00:13:36,120
registry the registry emits events and

00:13:34,230 --> 00:13:37,590
those followers subscribe to those

00:13:36,120 --> 00:13:39,900
events and based on particularly

00:13:37,590 --> 00:13:42,720
particular data in those events we're

00:13:39,900 --> 00:13:44,670
able to do a wider range of things this

00:13:42,720 --> 00:13:46,530
is literally how everything in the NPM

00:13:44,670 --> 00:13:48,930
registry works and if you ever want to

00:13:46,530 --> 00:13:50,730
do fun stuff with registry data this is

00:13:48,930 --> 00:13:52,710
how you do it it's much better than

00:13:50,730 --> 00:13:54,000
actually downloading the entire NPM

00:13:52,710 --> 00:13:57,720
registry which at this point is

00:13:54,000 --> 00:13:59,790
incredibly large so what I decide to do

00:13:57,720 --> 00:14:01,470
was write one of these followers and so

00:13:59,790 --> 00:14:04,680
this is what my code looked like it's

00:14:01,470 --> 00:14:07,440
kind of amazing how pithy it is but this

00:14:04,680 --> 00:14:10,110
is leveraging that's the end point the

00:14:07,440 --> 00:14:12,810
replicate NPM J Escom slash underscore

00:14:10,110 --> 00:14:14,580
changes and all this code does right

00:14:12,810 --> 00:14:16,530
here is pull in the changes and then

00:14:14,580 --> 00:14:18,000
print them out to the screen but that's

00:14:16,530 --> 00:14:19,920
all I needed to really be able to

00:14:18,000 --> 00:14:21,660
demonstrate to say that rust is ready to

00:14:19,920 --> 00:14:26,820
be able to part to be part of our

00:14:21,660 --> 00:14:29,670
architecture and so here this adds a

00:14:26,820 --> 00:14:32,160
little bit more this is the j/s that you

00:14:29,670 --> 00:14:35,070
write to do the same thing so this is

00:14:32,160 --> 00:14:37,050
the node and that's the rust it turns

00:14:35,070 --> 00:14:39,810
out that the rust is shorter which blew

00:14:37,050 --> 00:14:42,060
my mind all right

00:14:39,810 --> 00:14:43,650
so showing up what that code was really

00:14:42,060 --> 00:14:45,000
really good but one of the more key

00:14:43,650 --> 00:14:51,330
things about being a developer advocate

00:14:45,000 --> 00:14:53,610
is to not sell what right so what I

00:14:51,330 --> 00:14:55,530
originally came into NPM our CTO had

00:14:53,610 --> 00:14:57,270
been looking at go she was really

00:14:55,530 --> 00:14:59,339
excited about Go Go is an incredibly

00:14:57,270 --> 00:15:01,980
exciting language and so if I had walked

00:14:59,339 --> 00:15:04,589
in and been like CJ go they don't even

00:15:01,980 --> 00:15:08,400
have generics it's terrible

00:15:04,589 --> 00:15:10,710
that's a really niche go joke sorry but

00:15:08,400 --> 00:15:14,070
as you can see bashing other languages

00:15:10,710 --> 00:15:15,750
makes everyone look bad so unfortunately

00:15:14,070 --> 00:15:17,190
oftentimes when you're working in

00:15:15,750 --> 00:15:19,620
programming languages a lot of people

00:15:17,190 --> 00:15:22,230
see it as a zero-sum game which is to

00:15:19,620 --> 00:15:24,270
say if this language is good that must

00:15:22,230 --> 00:15:26,790
mean that all other languages are bad

00:15:24,270 --> 00:15:28,320
now potentially you can believe that in

00:15:26,790 --> 00:15:29,760
your heart of hearts but it turns out

00:15:28,320 --> 00:15:32,040
that if you want to actually change

00:15:29,760 --> 00:15:34,890
someone's mind that is a terrible

00:15:32,040 --> 00:15:37,110
terrible route to go and so I see a lot

00:15:34,890 --> 00:15:38,880
of people being a bit quiet here I guess

00:15:37,110 --> 00:15:39,089
that's because I am giving a talk but

00:15:38,880 --> 00:15:40,470
this

00:15:39,089 --> 00:15:42,180
is a huge thing that I see in the

00:15:40,470 --> 00:15:44,129
community and it's incredibly difficult

00:15:42,180 --> 00:15:48,180
to actually convince people not to do

00:15:44,129 --> 00:15:49,259
this but beyond that one of the other

00:15:48,180 --> 00:15:51,269
things that I think is very interesting

00:15:49,259 --> 00:15:53,999
about introducing a new technology to

00:15:51,269 --> 00:15:56,819
people is that you don't have to control

00:15:53,999 --> 00:15:58,709
someone else's first experience of rust

00:15:56,819 --> 00:16:01,259
and that means you as someone who is

00:15:58,709 --> 00:16:04,079
selling it but also the rust language

00:16:01,259 --> 00:16:07,709
and its tools in general so I have a

00:16:04,079 --> 00:16:09,930
small story about telling CJ and going

00:16:07,709 --> 00:16:11,519
through this project with her so what I

00:16:09,930 --> 00:16:15,470
learned is that not everyone is gonna

00:16:11,519 --> 00:16:19,860
love everything about rust right away

00:16:15,470 --> 00:16:22,079
they'll warm up to it and so this is

00:16:19,860 --> 00:16:23,339
some fun punctuation incantation if you

00:16:22,079 --> 00:16:26,069
don't know rust you don't have to worry

00:16:23,339 --> 00:16:28,889
too much but this is something that you

00:16:26,069 --> 00:16:31,379
can put at the top of your code which is

00:16:28,889 --> 00:16:33,720
to say I don't want the compiler to warn

00:16:31,379 --> 00:16:36,540
me about how I'm naming my functions and

00:16:33,720 --> 00:16:38,730
variables and so it turned out that CJ

00:16:36,540 --> 00:16:41,999
is somebody who has a very particular

00:16:38,730 --> 00:16:44,279
style and to get her to enjoy rust I

00:16:41,999 --> 00:16:46,769
needed to make sure that she could just

00:16:44,279 --> 00:16:48,480
use that style for now she really just

00:16:46,769 --> 00:16:49,499
wanted to use that style and she was

00:16:48,480 --> 00:16:50,910
like Ashley how do I turn off these

00:16:49,499 --> 00:16:52,139
compiler warnings how do I do it and I

00:16:50,910 --> 00:16:54,449
was like oh I'm sure there's a way let

00:16:52,139 --> 00:16:57,509
me find out and so I was looking through

00:16:54,449 --> 00:16:59,490
the docs and I was like oh no the way

00:16:57,509 --> 00:17:02,069
you turn off the compiler warnings is I

00:16:59,490 --> 00:17:06,120
have to tell my CTO that she has to

00:17:02,069 --> 00:17:08,220
write allow bad style in her code and

00:17:06,120 --> 00:17:10,980
I'm like oh dang this is not gonna work

00:17:08,220 --> 00:17:12,809
so that's that's pretty mean and so I

00:17:10,980 --> 00:17:16,380
did and she was like are you serious

00:17:12,809 --> 00:17:18,179
I was like I am serious and that was a

00:17:16,380 --> 00:17:20,610
bummer and so when I gave this talk

00:17:18,179 --> 00:17:23,220
about two years ago somebody saw it and

00:17:20,610 --> 00:17:25,649
they actually opened up a PR on Russ art

00:17:23,220 --> 00:17:28,110
this is an issue but in our RFC's repo

00:17:25,649 --> 00:17:30,210
to say hey maybe we could be like a

00:17:28,110 --> 00:17:32,340
little less Shamy about having this like

00:17:30,210 --> 00:17:34,110
it having good style if you're just

00:17:32,340 --> 00:17:36,330
starting out like we want people to use

00:17:34,110 --> 00:17:38,429
rust so telling them that they have to

00:17:36,330 --> 00:17:41,370
be shamed constantly is probably not a

00:17:38,429 --> 00:17:44,010
great way to convince them to use it now

00:17:41,370 --> 00:17:47,909
you might note those github reactions

00:17:44,010 --> 00:17:49,649
huh how about that so in the rest

00:17:47,909 --> 00:17:52,800
community we worked very hard to be

00:17:49,649 --> 00:17:55,140
welcoming but old habits die

00:17:52,800 --> 00:17:58,800
hard with a lot of people and so this

00:17:55,140 --> 00:17:59,910
thread became very contentious extremely

00:17:58,800 --> 00:18:02,370
contentious you can see a lot of

00:17:59,910 --> 00:18:03,930
moderation actions here I show this just

00:18:02,370 --> 00:18:06,030
to point out that despite the fact that

00:18:03,930 --> 00:18:08,310
it was incredibly contentious rust

00:18:06,030 --> 00:18:10,470
values being inclusive and welcoming to

00:18:08,310 --> 00:18:12,330
new people we won't succeed if people

00:18:10,470 --> 00:18:14,340
don't use rust and so we have a strong

00:18:12,330 --> 00:18:17,010
moderation team that kind of shut that

00:18:14,340 --> 00:18:19,500
all down and so you can see so many

00:18:17,010 --> 00:18:20,880
comments happened but fundamentally we

00:18:19,500 --> 00:18:23,250
ended up getting this into the language

00:18:20,880 --> 00:18:25,380
so if you want to try rust you can name

00:18:23,250 --> 00:18:27,900
your functions whatever you want you can

00:18:25,380 --> 00:18:30,650
say allow non-standard style and still

00:18:27,900 --> 00:18:34,140
feel good about yourself

00:18:30,650 --> 00:18:36,690
so in complete contrast to tip number

00:18:34,140 --> 00:18:37,200
three tip number four is to sell sell

00:18:36,690 --> 00:18:39,120
sell

00:18:37,200 --> 00:18:41,700
so in rust because we're a new language

00:18:39,120 --> 00:18:43,770
we have so many enthusiastic beginners

00:18:41,700 --> 00:18:46,290
you may or may not have seen on orange

00:18:43,770 --> 00:18:50,640
websites the idea of the rust evangelism

00:18:46,290 --> 00:18:51,780
strike force we're upset about that we

00:18:50,640 --> 00:18:53,970
don't love that it's a little bit

00:18:51,780 --> 00:18:56,370
aggressive that being said there are

00:18:53,970 --> 00:18:59,040
really awesome ways to sell stuff inside

00:18:56,370 --> 00:19:01,170
of your company that are not aggressive

00:18:59,040 --> 00:19:03,300
it's like going around and filing an

00:19:01,170 --> 00:19:05,010
issue on every repo of every open-source

00:19:03,300 --> 00:19:07,980
ship project you use and say please

00:19:05,010 --> 00:19:10,470
rewrite this in rust don't do that

00:19:07,980 --> 00:19:12,180
please and I'm not exaggerating there

00:19:10,470 --> 00:19:13,680
are people who do it and it's incredibly

00:19:12,180 --> 00:19:17,340
frustrating to everybody in leadership

00:19:13,680 --> 00:19:20,010
in trust but one thing that I did at MPM

00:19:17,340 --> 00:19:22,380
to make this work out was we created a

00:19:20,010 --> 00:19:25,020
react G channeler which is something we

00:19:22,380 --> 00:19:26,790
use slack at NPM and so every time

00:19:25,020 --> 00:19:28,560
somebody shared something depending on

00:19:26,790 --> 00:19:32,030
whatever channel it was in you could

00:19:28,560 --> 00:19:35,070
react with a crab emoji right here and

00:19:32,030 --> 00:19:36,540
it would pull everything into a single

00:19:35,070 --> 00:19:38,220
channel so if you wanted to know all of

00:19:36,540 --> 00:19:40,470
the interesting weird bits that people

00:19:38,220 --> 00:19:42,390
were sharing about rust at NPM you could

00:19:40,470 --> 00:19:44,220
hit that crab emoji and then it would

00:19:42,390 --> 00:19:47,010
pull up all of the stuff that did that

00:19:44,220 --> 00:19:50,220
and just simply sharing things that were

00:19:47,010 --> 00:19:52,170
cool like you can see here and this like

00:19:50,220 --> 00:19:53,670
CJ was just doing some research and she

00:19:52,170 --> 00:19:55,200
was like whoa there's Lib sodium

00:19:53,670 --> 00:19:56,910
bindings for rust and it's super fast

00:19:55,200 --> 00:19:58,950
that's amazing

00:19:56,910 --> 00:20:00,570
and so she was able to share that and

00:19:58,950 --> 00:20:02,220
then we could index that also that

00:20:00,570 --> 00:20:04,020
everybody who's working the company no

00:20:02,220 --> 00:20:05,580
matter what their role was could check

00:20:04,020 --> 00:20:06,610
out what those things were and kind of

00:20:05,580 --> 00:20:12,250
slowly get

00:20:06,610 --> 00:20:14,350
on their own so on to tip number five so

00:20:12,250 --> 00:20:18,970
the hard part of programming isn't

00:20:14,350 --> 00:20:21,340
programming all right maybe we all agree

00:20:18,970 --> 00:20:23,200
on this but this is a thing that rust

00:20:21,340 --> 00:20:27,010
really cares about and it turns out that

00:20:23,200 --> 00:20:30,220
in selling rust to CJ the thing that

00:20:27,010 --> 00:20:33,039
really convinced her over go was all of

00:20:30,220 --> 00:20:34,779
the support elements that rust had so we

00:20:33,039 --> 00:20:36,669
have a really large documentation

00:20:34,779 --> 00:20:39,519
culture we have tons of books this is

00:20:36,669 --> 00:20:41,260
not even all of them one of the things

00:20:39,519 --> 00:20:43,000
that we've done this year is work to

00:20:41,260 --> 00:20:45,010
create what we call the domain working

00:20:43,000 --> 00:20:46,779
group books the rest book that we have

00:20:45,010 --> 00:20:47,889
is very much focused on beginners and

00:20:46,779 --> 00:20:50,049
then we have something called the

00:20:47,889 --> 00:20:53,409
nomicon which is literally like the dark

00:20:50,049 --> 00:20:55,929
arts of rust which use lots of unsafe

00:20:53,409 --> 00:20:57,460
and very funky things but we kind of

00:20:55,929 --> 00:20:59,889
noticed that the intermediate level kind

00:20:57,460 --> 00:21:01,510
of was missing and so what we did this

00:20:59,889 --> 00:21:03,190
year was create domain working groups

00:21:01,510 --> 00:21:04,809
focused on specific elements of

00:21:03,190 --> 00:21:07,000
programming that an intermediate develop

00:21:04,809 --> 00:21:09,549
developer would be interested in so we

00:21:07,000 --> 00:21:12,100
focused on CLI tools embedded web

00:21:09,549 --> 00:21:14,230
assembly and networking and each one of

00:21:12,100 --> 00:21:15,789
those groups produced its own book so

00:21:14,230 --> 00:21:17,620
we're setting you up to be able to read

00:21:15,789 --> 00:21:19,480
the rest book first then we've got

00:21:17,620 --> 00:21:21,130
another book right lined up for you and

00:21:19,480 --> 00:21:23,200
then we also have you know when you

00:21:21,130 --> 00:21:24,909
really want to go deep the really

00:21:23,200 --> 00:21:27,070
advanced one and we think that

00:21:24,909 --> 00:21:29,860
documentation strategy is really really

00:21:27,070 --> 00:21:32,799
important in addition to documentation

00:21:29,860 --> 00:21:35,110
we care a lot about tooling so

00:21:32,799 --> 00:21:37,360
especially is coming in as a C++

00:21:35,110 --> 00:21:39,100
replacement a 21st century C++

00:21:37,360 --> 00:21:41,289
replacement one of the things that we

00:21:39,100 --> 00:21:43,779
really wanted to have was a top-tier

00:21:41,289 --> 00:21:45,549
package management system and so as you

00:21:43,779 --> 00:21:47,529
can see here we have cargo and crates

00:21:45,549 --> 00:21:49,809
i/o but we have so much more than that

00:21:47,529 --> 00:21:51,970
so if you you happen to use node or

00:21:49,809 --> 00:21:53,110
maybe something like Ruby you've

00:21:51,970 --> 00:21:55,090
probably had to deal with version

00:21:53,110 --> 00:21:57,130
manager tools before and those version

00:21:55,090 --> 00:21:59,019
manager tools kind of like our weird

00:21:57,130 --> 00:22:00,519
community side projects and it's kind of

00:21:59,019 --> 00:22:02,710
hard to tell which one is the right one

00:22:00,519 --> 00:22:05,019
to use a given time in rust you're like

00:22:02,710 --> 00:22:06,610
we're just gonna do this out the back so

00:22:05,019 --> 00:22:08,639
we have rust up and that's how you

00:22:06,610 --> 00:22:10,630
manage all of your tool chain versioning

00:22:08,639 --> 00:22:12,460
additionally a lot of people don't know

00:22:10,630 --> 00:22:15,100
that rust actually has documentation

00:22:12,460 --> 00:22:16,809
tools out of the bag so you can use a

00:22:15,100 --> 00:22:18,880
documentation comment which is three

00:22:16,809 --> 00:22:19,910
slashes and then run rust doc on your

00:22:18,880 --> 00:22:22,070
project and it

00:22:19,910 --> 00:22:24,800
completely generate HTML documentation

00:22:22,070 --> 00:22:27,050
for you so no need to add a separate

00:22:24,800 --> 00:22:28,700
library that's just baked in and this is

00:22:27,050 --> 00:22:31,390
because we generally want to make the

00:22:28,700 --> 00:22:33,560
things that are good to do easy

00:22:31,390 --> 00:22:35,420
additionally if you come from JavaScript

00:22:33,560 --> 00:22:37,250
you're probably used to code for matters

00:22:35,420 --> 00:22:40,340
you're also used to people fighting

00:22:37,250 --> 00:22:41,870
viciously about code for matters Russ

00:22:40,340 --> 00:22:44,090
combs was one out of the box it's called

00:22:41,870 --> 00:22:46,280
rust format if you want to you can

00:22:44,090 --> 00:22:49,550
configure it but the defaults are pretty

00:22:46,280 --> 00:22:51,710
good and then lastly if you happen to

00:22:49,550 --> 00:22:54,560
ever use Microsoft Word you might get

00:22:51,710 --> 00:22:57,650
the reference of this idea of Clippy

00:22:54,560 --> 00:23:00,170
Clippy is a way to lint your project not

00:22:57,650 --> 00:23:01,490
for style or for safety which our

00:23:00,170 --> 00:23:03,320
compiler just already does

00:23:01,490 --> 00:23:05,630
Clippy will help you write idiomatic

00:23:03,320 --> 00:23:07,490
rust so it does static analysis on your

00:23:05,630 --> 00:23:09,170
project and is able to say hey you're

00:23:07,490 --> 00:23:11,840
doing this but did you know that the

00:23:09,170 --> 00:23:14,360
better way to do it is this seems like

00:23:11,840 --> 00:23:17,090
you're writing an if statement it would

00:23:14,360 --> 00:23:18,710
be really great if I don't know people

00:23:17,090 --> 00:23:20,600
were joking when github got acquired by

00:23:18,710 --> 00:23:22,270
Microsoft that oh my god github is gonna

00:23:20,600 --> 00:23:25,520
have Clippy now and I kind of was like

00:23:22,270 --> 00:23:27,290
rust does have Clippy is that bad

00:23:25,520 --> 00:23:28,910
but Clippy is one of the most awesome

00:23:27,290 --> 00:23:31,160
tools ever and especially if you're

00:23:28,910 --> 00:23:32,960
getting started again it's like having

00:23:31,160 --> 00:23:35,120
somebody else programming with you to

00:23:32,960 --> 00:23:38,360
check those things out

00:23:35,120 --> 00:23:41,240
lastly rust cares a ton about community

00:23:38,360 --> 00:23:43,670
so if you're new we have an IRC channel

00:23:41,240 --> 00:23:45,980
which is not an evil terrible IRC

00:23:43,670 --> 00:23:47,960
channel called rust beginners that is

00:23:45,980 --> 00:23:49,970
extremely well staffed by both core team

00:23:47,960 --> 00:23:51,890
members and community members to answer

00:23:49,970 --> 00:23:53,300
any of your questions we are excited

00:23:51,890 --> 00:23:53,810
when people come with questions about

00:23:53,300 --> 00:23:56,450
rust

00:23:53,810 --> 00:23:58,310
there's no RTFM there we really care

00:23:56,450 --> 00:23:59,470
about it and will happily just sit and

00:23:58,310 --> 00:24:01,910
work with you through your issues

00:23:59,470 --> 00:24:03,890
additionally we have started to have a

00:24:01,910 --> 00:24:06,200
whole bunch of conferences this is just

00:24:03,890 --> 00:24:08,240
a small set but if you are interested in

00:24:06,200 --> 00:24:11,060
attending a rust conference rust Fest

00:24:08,240 --> 00:24:13,280
travels all over Europe and they're

00:24:11,060 --> 00:24:16,100
really awesome events additionally we

00:24:13,280 --> 00:24:18,230
care about inclusivity as well it turns

00:24:16,100 --> 00:24:19,850
out that systems programming is not the

00:24:18,230 --> 00:24:22,730
most diverse part of programming which

00:24:19,850 --> 00:24:24,830
is not the most diverse anything at the

00:24:22,730 --> 00:24:26,600
moment and so we have two programs

00:24:24,830 --> 00:24:29,150
increasing breast reach which is

00:24:26,600 --> 00:24:30,380
basically our google Summer of Code and

00:24:29,150 --> 00:24:31,940
additionally we have programs called

00:24:30,380 --> 00:24:33,440
Russ bridge which are educational

00:24:31,940 --> 00:24:36,610
workshops focused on under

00:24:33,440 --> 00:24:39,019
people to get them into rust lastly if

00:24:36,610 --> 00:24:40,549
doing kind of problems on your own is

00:24:39,019 --> 00:24:43,100
your thing we have a pretty vibrant

00:24:40,549 --> 00:24:45,200
community over at exorcism IO which is a

00:24:43,100 --> 00:24:47,000
set of code Coty's that you can do in a

00:24:45,200 --> 00:24:49,600
ton of different languages but the rest

00:24:47,000 --> 00:24:52,399
one is also there and super great

00:24:49,600 --> 00:24:54,230
so I mentioned all of this and I know

00:24:52,399 --> 00:24:55,610
that it kind of seems obvious you're

00:24:54,230 --> 00:24:58,669
like of course these are good things

00:24:55,610 --> 00:25:01,309
right but you know despite the fact that

00:24:58,669 --> 00:25:04,429
they seem so easy in common they really

00:25:01,309 --> 00:25:06,529
are neither it's incredibly difficult to

00:25:04,429 --> 00:25:08,509
set these types of things up and I'm

00:25:06,529 --> 00:25:10,909
really happy that rust is decided to

00:25:08,509 --> 00:25:12,860
invest in these things early because if

00:25:10,909 --> 00:25:14,750
you don't get these things early and you

00:25:12,860 --> 00:25:16,789
try and add them on after you're gonna

00:25:14,750 --> 00:25:18,620
have a really bad time and I know this

00:25:16,789 --> 00:25:21,320
because I participated in node for a

00:25:18,620 --> 00:25:23,779
very long time so getting this stuff out

00:25:21,320 --> 00:25:25,519
the bet is awesome a cool kind of fact

00:25:23,779 --> 00:25:28,250
that many people don't know the very

00:25:25,519 --> 00:25:31,399
first commit to rust was a code of

00:25:28,250 --> 00:25:33,980
conduct and a lot of people say oh those

00:25:31,399 --> 00:25:36,200
rust SJW is the code of conduct it's so

00:25:33,980 --> 00:25:38,690
bad and they say I'll never use rust

00:25:36,200 --> 00:25:41,470
because of this and to be honest we say

00:25:38,690 --> 00:25:44,659
good we think it's awesome

00:25:41,470 --> 00:25:47,269
all right so tip 6 the hardest part of

00:25:44,659 --> 00:25:48,649
programming actually is programming so

00:25:47,269 --> 00:25:50,929
of course when you're trying to sell

00:25:48,649 --> 00:25:52,220
some sort of tech to your company you're

00:25:50,929 --> 00:25:54,259
gonna want to sell it on technical

00:25:52,220 --> 00:25:55,970
merits but I'm not gonna spend too much

00:25:54,259 --> 00:25:57,470
time here because it turns out that

00:25:55,970 --> 00:25:59,960
actually selling something on technical

00:25:57,470 --> 00:26:02,389
merit is very easy people get very

00:25:59,960 --> 00:26:03,889
focused on that part and very distracted

00:26:02,389 --> 00:26:06,080
and don't focus on the other parts that

00:26:03,889 --> 00:26:07,700
I personally think are most important so

00:26:06,080 --> 00:26:10,129
the only date a bit I'll give you here

00:26:07,700 --> 00:26:12,139
is for reasons that still kind of baffle

00:26:10,129 --> 00:26:13,789
me rust has been the most loved

00:26:12,139 --> 00:26:17,470
programming language on the Stack

00:26:13,789 --> 00:26:20,269
Overflow survey for the last three years

00:26:17,470 --> 00:26:22,850
say what you will about surveys say what

00:26:20,269 --> 00:26:24,200
you will about Stack Overflow there is a

00:26:22,850 --> 00:26:26,139
community of people that really love

00:26:24,200 --> 00:26:29,840
this language and that's pretty awesome

00:26:26,139 --> 00:26:31,370
all right so on to tip number seven so

00:26:29,840 --> 00:26:34,159
this is gonna be a little bit of a

00:26:31,370 --> 00:26:35,360
vignette but this is to say be prepared

00:26:34,159 --> 00:26:38,029
for things to change

00:26:35,360 --> 00:26:40,309
so at M p.m. we have a problem that

00:26:38,029 --> 00:26:42,559
might be familiar to you we have node

00:26:40,309 --> 00:26:44,960
and all over almost all of our services

00:26:42,559 --> 00:26:47,690
and our service logs are not only

00:26:44,960 --> 00:26:49,190
incredibly huge imagine as

00:26:47,690 --> 00:26:51,649
logging all of the events that happen on

00:26:49,190 --> 00:26:53,059
the registry but they also have runtime

00:26:51,649 --> 00:26:56,509
errors because it turns out that

00:26:53,059 --> 00:26:57,769
JavaScript has runtime errors and if you

00:26:56,509 --> 00:26:58,940
want to be able to go clean those up

00:26:57,769 --> 00:27:00,710
you're gonna want to look through your

00:26:58,940 --> 00:27:03,379
logs and parse them but it turns out

00:27:00,710 --> 00:27:05,750
that parsing them is incredibly slow

00:27:03,379 --> 00:27:07,460
like even if you sign up for one of the

00:27:05,750 --> 00:27:10,610
big fancy services that's incredibly

00:27:07,460 --> 00:27:13,519
expensive even then they're giving you

00:27:10,610 --> 00:27:15,320
like a service option of like hours like

00:27:13,519 --> 00:27:17,720
measuring it in hours and that's it's

00:27:15,320 --> 00:27:18,950
not really going to work for us and so I

00:27:17,720 --> 00:27:22,730
was working with one of my colleagues

00:27:18,950 --> 00:27:26,389
Ryan Dave and we were really upset about

00:27:22,730 --> 00:27:28,909
this has anyone had a day like this a

00:27:26,389 --> 00:27:31,700
week like this this is Pedro Duty going

00:27:28,909 --> 00:27:33,309
off about every ten minutes for me on a

00:27:31,700 --> 00:27:35,870
day while I was working in EM p.m.

00:27:33,309 --> 00:27:37,639
pretty brutal always seem to happen the

00:27:35,870 --> 00:27:39,049
second I went on duty like they missed

00:27:37,639 --> 00:27:42,019
me or something they're like pay

00:27:39,049 --> 00:27:43,700
attention I'm like okay here I am but

00:27:42,019 --> 00:27:46,490
this is kind of a huge bummer and we

00:27:43,700 --> 00:27:48,740
want to do stuff to change this so Ryan

00:27:46,490 --> 00:27:50,360
decided to kind of he was like I'm gonna

00:27:48,740 --> 00:27:52,159
write a log parser I'm just gonna do it

00:27:50,360 --> 00:27:54,860
and so he didn't really know much for us

00:27:52,159 --> 00:27:57,320
to use their documentation and just kind

00:27:54,860 --> 00:27:59,929
of scripted something up and he ran into

00:27:57,320 --> 00:28:03,470
this he was like isn't Russ supposed to

00:27:59,929 --> 00:28:05,330
be super fast like how is my Russ parser

00:28:03,470 --> 00:28:07,610
two times slower than my JavaScript

00:28:05,330 --> 00:28:10,250
version like this this is not what you

00:28:07,610 --> 00:28:12,620
sold me on um how is this even possible

00:28:10,250 --> 00:28:15,769
and so there are several different

00:28:12,620 --> 00:28:17,450
things including this there's a lot of

00:28:15,769 --> 00:28:21,350
memory management that's happening in

00:28:17,450 --> 00:28:23,690
rust and so how you write rust fast is

00:28:21,350 --> 00:28:25,669
actually just a little bit more

00:28:23,690 --> 00:28:27,049
complicated and so if you write a naive

00:28:25,669 --> 00:28:28,850
thing there's a chance that the thing

00:28:27,049 --> 00:28:32,179
that you write in rust is going to be

00:28:28,850 --> 00:28:34,070
slow it turned out in this situation

00:28:32,179 --> 00:28:36,500
which is a default that we've finally

00:28:34,070 --> 00:28:38,179
changed thankfully was that when we were

00:28:36,500 --> 00:28:39,529
reading in a buffer the default size of

00:28:38,179 --> 00:28:41,179
that buffer was different than what the

00:28:39,529 --> 00:28:43,399
default size of the buffer was a node

00:28:41,179 --> 00:28:45,230
and it turns out that our size was

00:28:43,399 --> 00:28:47,690
making the buffer read incredibly slow

00:28:45,230 --> 00:28:49,940
so when we manually set that to be what

00:28:47,690 --> 00:28:52,789
was unknown it sped up to around three

00:28:49,940 --> 00:28:54,230
times faster than the JavaScript so I

00:28:52,789 --> 00:28:55,610
think this is a really interesting quote

00:28:54,230 --> 00:28:58,340
from my colleague where he said I just

00:28:55,610 --> 00:29:00,889
fully expected to rest my way into 50% /

00:28:58,340 --> 00:29:01,309
/ jeaious but sometimes I forget that v8

00:29:00,889 --> 00:29:04,610
is

00:29:01,309 --> 00:29:06,289
pretty darn fast so while trying to sell

00:29:04,610 --> 00:29:07,519
rust over note it's again really

00:29:06,289 --> 00:29:08,960
important to remember bashing through

00:29:07,519 --> 00:29:11,899
the languages doesn't work like other

00:29:08,960 --> 00:29:14,870
languages are really good node is really

00:29:11,899 --> 00:29:16,879
fast and so trying to get that speed is

00:29:14,870 --> 00:29:19,789
always not always exactly what you're

00:29:16,879 --> 00:29:21,139
looking for so this is another quote

00:29:19,789 --> 00:29:22,580
from that art of the motorcycle

00:29:21,139 --> 00:29:24,529
maintenance and it says you're never

00:29:22,580 --> 00:29:26,779
dedicated to something you have complete

00:29:24,529 --> 00:29:28,279
confidence in no one is fanatically

00:29:26,779 --> 00:29:30,409
shouting that the Sun is going to rise

00:29:28,279 --> 00:29:32,840
tomorrow they know it's gonna rise

00:29:30,409 --> 00:29:34,999
tomorrow when people are fanatically

00:29:32,840 --> 00:29:39,409
dedicated to political or religious

00:29:34,999 --> 00:29:43,399
faiths or tech maybe it's always because

00:29:39,409 --> 00:29:45,769
these dogmas or goals are in doubt so

00:29:43,399 --> 00:29:47,539
what to say is that when we are kind of

00:29:45,769 --> 00:29:49,909
promoting these types of things like

00:29:47,539 --> 00:29:51,409
it's because there's a question there

00:29:49,909 --> 00:29:53,480
there's an interesting trade-off there's

00:29:51,409 --> 00:29:56,690
a potential that's maybe yet unfulfilled

00:29:53,480 --> 00:29:58,399
and so something that I found was really

00:29:56,690 --> 00:30:00,230
interesting is that originally I thought

00:29:58,399 --> 00:30:03,740
I would be selling rust because of its

00:30:00,230 --> 00:30:06,019
speed but in the end I really ended up

00:30:03,740 --> 00:30:08,629
selling rust because of its safety and

00:30:06,019 --> 00:30:10,610
so when you go to promote technologies

00:30:08,629 --> 00:30:13,279
inside your company you may go in with

00:30:10,610 --> 00:30:15,379
particular reasons but be prepared to

00:30:13,279 --> 00:30:18,019
react to the other reactions you get and

00:30:15,379 --> 00:30:20,119
to potentially change those reasons so

00:30:18,019 --> 00:30:22,399
even though the learning curve in order

00:30:20,119 --> 00:30:24,619
to make rust a bit faster than node was

00:30:22,399 --> 00:30:27,799
higher than people initially wanted the

00:30:24,619 --> 00:30:29,450
safety guarantees made it worth that but

00:30:27,799 --> 00:30:31,279
you have to be prepared if I had just

00:30:29,450 --> 00:30:33,289
suddenly seen oh it's really hard to

00:30:31,279 --> 00:30:34,820
make rust faster than node I may have

00:30:33,289 --> 00:30:35,269
just stopped and been like maybe this is

00:30:34,820 --> 00:30:37,159
bad

00:30:35,269 --> 00:30:40,249
but paying attention to how people are

00:30:37,159 --> 00:30:41,809
reacting and being able to say ok be

00:30:40,249 --> 00:30:44,809
ready to change your mind it can make it

00:30:41,809 --> 00:30:46,970
a lot easier and a lot more effective so

00:30:44,809 --> 00:30:49,460
as I said there's a learning curve to

00:30:46,970 --> 00:30:51,919
making rust go fast so I told you kind

00:30:49,460 --> 00:30:53,509
of a sad story about log parsing but now

00:30:51,919 --> 00:30:56,509
I'm gonna tell you an amazing story

00:30:53,509 --> 00:30:58,700
about log parsing so this is Andre Arco

00:30:56,509 --> 00:31:00,580
Andre Arco helps maintain bundler which

00:30:58,700 --> 00:31:03,499
is a package manager for ruby and

00:31:00,580 --> 00:31:07,909
similar to our situation in node he has

00:31:03,499 --> 00:31:09,769
a lot of logs and so he was like shoot

00:31:07,909 --> 00:31:11,000
you know I really gotta figure out how

00:31:09,769 --> 00:31:13,180
to parse all these logs and so

00:31:11,000 --> 00:31:17,710
originally he kind of started out you

00:31:13,180 --> 00:31:20,160
using AWS lambda and Python in his first

00:31:17,710 --> 00:31:22,570
attempt ended up costing him around

00:31:20,160 --> 00:31:26,680
$4,000 in server bills and he was like

00:31:22,570 --> 00:31:28,570
whoops this is not gonna work and so he

00:31:26,680 --> 00:31:30,610
started being like huh why don't I try

00:31:28,570 --> 00:31:32,500
out rust and so what's really

00:31:30,610 --> 00:31:34,870
interesting is that when he did end up

00:31:32,500 --> 00:31:37,450
trying it out with rust he got it fast

00:31:34,870 --> 00:31:39,400
and then because he was reading the docs

00:31:37,450 --> 00:31:41,170
for the library he used surday he was

00:31:39,400 --> 00:31:43,480
like oh here's another library maybe I

00:31:41,170 --> 00:31:45,550
should use num and so he did it in Nam

00:31:43,480 --> 00:31:47,890
and it ended up speeding up just a

00:31:45,550 --> 00:31:50,860
little bit longer or just a little bit

00:31:47,890 --> 00:31:52,810
shorter and then he said he showed it to

00:31:50,860 --> 00:31:56,230
a friend and the friend looked at it and

00:31:52,810 --> 00:31:59,290
went like he had gone from about these

00:31:56,230 --> 00:32:02,350
are the numbers from about 525 records

00:31:59,290 --> 00:32:04,480
per second to 50k and he was like I'm

00:32:02,350 --> 00:32:06,580
doing great this is awesome he showed it

00:32:04,480 --> 00:32:09,700
to a buddy and the buddy was like how is

00:32:06,580 --> 00:32:11,020
that so slow we're gonna have to profile

00:32:09,700 --> 00:32:12,430
this what is going on why is this

00:32:11,020 --> 00:32:14,740
incredibly slow and harder it was like I

00:32:12,430 --> 00:32:17,230
already sped it up like 200% like what

00:32:14,740 --> 00:32:19,000
what do you mean it's slow and kind of

00:32:17,230 --> 00:32:20,320
hilariously depending on how you're used

00:32:19,000 --> 00:32:22,510
to things so Andrei comes from something

00:32:20,320 --> 00:32:24,430
like Ruby where compiler optimizations

00:32:22,510 --> 00:32:26,020
aren't a thing he realized that one of

00:32:24,430 --> 00:32:30,130
the things that he could do was just run

00:32:26,020 --> 00:32:31,630
cargo build - - release and that was

00:32:30,130 --> 00:32:33,880
able to turn on all the compiler

00:32:31,630 --> 00:32:35,530
optimizations so he had gotten something

00:32:33,880 --> 00:32:37,090
that he thought was incredibly fast and

00:32:35,530 --> 00:32:39,940
there were still little things to learn

00:32:37,090 --> 00:32:42,250
about how to make it go even faster

00:32:39,940 --> 00:32:45,970
so his current implementation that's in

00:32:42,250 --> 00:32:48,040
rust now goes so fast that it fits in

00:32:45,970 --> 00:32:49,420
the free tier for a dubious lambda so we

00:32:48,040 --> 00:32:52,570
went from paying about five thousand

00:32:49,420 --> 00:32:56,500
dollars to none which is incredibly

00:32:52,570 --> 00:32:59,440
awesome yeah so making risk correct is

00:32:56,500 --> 00:33:01,330
the default right making it fast can

00:32:59,440 --> 00:33:03,100
take a little bit learning but the best

00:33:01,330 --> 00:33:05,590
thing about rust is making it correct is

00:33:03,100 --> 00:33:07,660
the default so we like to say unrest

00:33:05,590 --> 00:33:10,120
that the safest problem is safest

00:33:07,660 --> 00:33:12,580
program is one that doesn't compile at

00:33:10,120 --> 00:33:13,990
all and that's because we have a

00:33:12,580 --> 00:33:16,030
compiler that's gonna do a bunch of

00:33:13,990 --> 00:33:19,260
static analysis on your program and it's

00:33:16,030 --> 00:33:21,610
going to tell you a lot of this no

00:33:19,260 --> 00:33:23,920
that's bad don't do it you must change

00:33:21,610 --> 00:33:25,390
it and while a lot of people can kind of

00:33:23,920 --> 00:33:26,650
see working through compiler errors is

00:33:25,390 --> 00:33:27,159
something that's really tough for a

00:33:26,650 --> 00:33:28,929
begin

00:33:27,159 --> 00:33:30,929
one of my favorite ways is to kind of

00:33:28,929 --> 00:33:33,399
switch that perspective and say hey

00:33:30,929 --> 00:33:35,980
wouldn't it be awesome to just always

00:33:33,399 --> 00:33:37,480
have a pair that's incredibly smart and

00:33:35,980 --> 00:33:39,340
knows how to analyze like race

00:33:37,480 --> 00:33:42,519
conditions in your program and they're

00:33:39,340 --> 00:33:44,529
just there all the time so Russ compiler

00:33:42,519 --> 00:33:46,870
has some really amazing error messages

00:33:44,529 --> 00:33:48,880
now we have the elm community to thank

00:33:46,870 --> 00:33:52,000
for that if you have ever used elm they

00:33:48,880 --> 00:33:53,380
have absurdly good error messages and I

00:33:52,000 --> 00:33:55,059
don't think we're quite there yet but we

00:33:53,380 --> 00:33:57,130
were very inspired by what they're doing

00:33:55,059 --> 00:33:59,289
but a lot of the time our compiler can

00:33:57,130 --> 00:34:01,360
just take a look at your code and just

00:33:59,289 --> 00:34:03,399
be like hey this isn't gonna work also

00:34:01,360 --> 00:34:05,590
here's the exact code you should write

00:34:03,399 --> 00:34:08,050
to make it work it's really amazing the

00:34:05,590 --> 00:34:09,490
amount of cognitive effort I have to do

00:34:08,050 --> 00:34:12,399
in writing a program when I write it in

00:34:09,490 --> 00:34:14,530
rust is so much lower than the cognitive

00:34:12,399 --> 00:34:16,030
effort of writing a language writing in

00:34:14,530 --> 00:34:17,649
a language that doesn't have these types

00:34:16,030 --> 00:34:21,339
of guarantees it turns out that

00:34:17,649 --> 00:34:23,260
compilers are really amazing so whenever

00:34:21,339 --> 00:34:24,940
you're designing a language hopefully

00:34:23,260 --> 00:34:27,550
one of your goals is to at least make

00:34:24,940 --> 00:34:29,349
the right thing easy we want to

00:34:27,550 --> 00:34:31,300
encourage people to do the right thing

00:34:29,349 --> 00:34:33,700
so we want to make that a happy path and

00:34:31,300 --> 00:34:35,470
Russ believes in this too but rest also

00:34:33,700 --> 00:34:40,899
believes that we should make the wrong

00:34:35,470 --> 00:34:42,639
thing hard nay impossible so again we

00:34:40,899 --> 00:34:44,710
will just not compile your program if

00:34:42,639 --> 00:34:47,139
it's going to have errors and so to that

00:34:44,710 --> 00:34:50,050
extent we're like dopes just can't do

00:34:47,139 --> 00:34:51,190
the wrong thing and as a result we're

00:34:50,050 --> 00:34:55,060
able to have programs that are

00:34:51,190 --> 00:34:57,280
incredibly reliable so on the tip number

00:34:55,060 --> 00:34:58,119
eight so we were being prepared for

00:34:57,280 --> 00:34:59,890
things to change

00:34:58,119 --> 00:35:03,280
but now we need to be prepared for

00:34:59,890 --> 00:35:05,290
things to stay the same so boring code

00:35:03,280 --> 00:35:09,160
is my absolute favorite code how many

00:35:05,290 --> 00:35:12,460
people here like boring code not enough

00:35:09,160 --> 00:35:12,940
Oh boring code is is so great I really

00:35:12,460 --> 00:35:14,319
love it

00:35:12,940 --> 00:35:16,420
but I understand that lots of people

00:35:14,319 --> 00:35:17,859
write love writing clever code and

00:35:16,420 --> 00:35:19,900
particularly when you're excited about a

00:35:17,859 --> 00:35:21,460
technology you really just want to start

00:35:19,900 --> 00:35:23,050
leveraging all of its awesome

00:35:21,460 --> 00:35:25,150
superpowers you're like this is what I

00:35:23,050 --> 00:35:26,680
want to do it's kind of funny when I

00:35:25,150 --> 00:35:28,270
started writing a lot of my first rest

00:35:26,680 --> 00:35:29,619
code I was like worried that it was not

00:35:28,270 --> 00:35:31,119
very good so I talked to some of my

00:35:29,619 --> 00:35:33,099
friends and like the core team and I'm

00:35:31,119 --> 00:35:34,690
like is this this is like horrible Russ

00:35:33,099 --> 00:35:36,339
code and they wouldn't even look at it

00:35:34,690 --> 00:35:38,109
and they're like are using like a box or

00:35:36,339 --> 00:35:39,790
an arc or any of that stuff and I was

00:35:38,109 --> 00:35:40,780
like no and they're like great you're

00:35:39,790 --> 00:35:42,910
probably fine

00:35:40,780 --> 00:35:44,260
so reaching for those awesome

00:35:42,910 --> 00:35:46,090
superpowers of a language can be

00:35:44,260 --> 00:35:47,170
something that's really attractive but

00:35:46,090 --> 00:35:48,760
again when you're trying to get a

00:35:47,170 --> 00:35:51,730
company to use it wouldn't like their

00:35:48,760 --> 00:35:54,580
money is at stake they're writing boring

00:35:51,730 --> 00:35:56,770
code can be super good so just because

00:35:54,580 --> 00:35:58,900
you started using rust doesn't mean that

00:35:56,770 --> 00:36:01,270
everything will change in your company

00:35:58,900 --> 00:36:03,910
in particular you know it's probably a

00:36:01,270 --> 00:36:05,530
lot better if it doesn't when you're

00:36:03,910 --> 00:36:07,000
adding company like when you're adding

00:36:05,530 --> 00:36:08,800
technologies to a company having

00:36:07,000 --> 00:36:11,950
something be boring and not a large

00:36:08,800 --> 00:36:13,450
change is really really important so I

00:36:11,950 --> 00:36:16,870
like to talk about the scientific method

00:36:13,450 --> 00:36:19,420
here a lot of people think that ferrous

00:36:16,870 --> 00:36:21,120
is it's a thing that I missed the spark

00:36:19,420 --> 00:36:23,980
thing I don't know I don't know science

00:36:21,120 --> 00:36:25,960
but what you want to do is only change

00:36:23,980 --> 00:36:28,840
one thing at a time so you can actually

00:36:25,960 --> 00:36:31,510
measure rusts impact using data you know

00:36:28,840 --> 00:36:33,130
data-driven change it's kind of a saying

00:36:31,510 --> 00:36:36,460
that everyone says but it's actually

00:36:33,130 --> 00:36:39,250
super important so this is one of my

00:36:36,460 --> 00:36:40,960
favorite sets of benchmarks so this is

00:36:39,250 --> 00:36:41,890
actually benchmarking Russ generated

00:36:40,960 --> 00:36:45,040
webassembly

00:36:41,890 --> 00:36:47,350
but it is a bunch mark for rust and so

00:36:45,040 --> 00:36:50,200
this is when the source map

00:36:47,350 --> 00:36:52,480
implementation for fire from what for

00:36:50,200 --> 00:36:55,090
thus college is source map a source map

00:36:52,480 --> 00:36:56,440
implementation and that was generated

00:36:55,090 --> 00:36:58,450
and what assembly stir could be run in

00:36:56,440 --> 00:37:00,190
the browser and one of the things that

00:36:58,450 --> 00:37:02,440
you can see here is like we change just

00:37:00,190 --> 00:37:04,240
one thing so it was easy to measure but

00:37:02,440 --> 00:37:06,760
I also want to point out here is that

00:37:04,240 --> 00:37:09,190
while the Russ generated web assembly is

00:37:06,760 --> 00:37:11,740
faster I don't think that's what's the

00:37:09,190 --> 00:37:13,330
most awesome thing about this graph the

00:37:11,740 --> 00:37:15,940
most awesome thing about this graph is

00:37:13,330 --> 00:37:18,310
how reliable the memory profile is as

00:37:15,940 --> 00:37:21,220
somebody who does ops any ops people in

00:37:18,310 --> 00:37:23,140
the house all right well as somebody who

00:37:21,220 --> 00:37:26,020
does ops the idea like look at the

00:37:23,140 --> 00:37:28,990
spread on web assembly and Firefox I

00:37:26,020 --> 00:37:31,690
think that's that oh my goodness that's

00:37:28,990 --> 00:37:33,550
terrifying to me like I cannot predict

00:37:31,690 --> 00:37:35,440
how much that is going to actually take

00:37:33,550 --> 00:37:37,210
whereas if you take a little bit of a

00:37:35,440 --> 00:37:39,370
look at how that's working in the web

00:37:37,210 --> 00:37:41,770
assembly it's incredibly small and that

00:37:39,370 --> 00:37:43,600
reliability is more important to me and

00:37:41,770 --> 00:37:46,030
probably more important to a company

00:37:43,600 --> 00:37:48,190
than the actual speed difference and so

00:37:46,030 --> 00:37:50,200
again being ready to change your mind

00:37:48,190 --> 00:37:51,610
being able to measure and be able to

00:37:50,200 --> 00:37:54,000
show some of the most awesome things

00:37:51,610 --> 00:37:56,790
about that is incredibly important

00:37:54,000 --> 00:37:58,890
so the other great thing about only

00:37:56,790 --> 00:38:00,330
changing one thing at a time is that if

00:37:58,890 --> 00:38:02,280
you change more than one thing at a time

00:38:00,330 --> 00:38:05,099
you're probably going to burn a bunch of

00:38:02,280 --> 00:38:06,900
people out having lots of things up in

00:38:05,099 --> 00:38:08,849
the air can be incredibly stressful and

00:38:06,900 --> 00:38:10,710
so even though you are particularly

00:38:08,849 --> 00:38:12,720
excited about technology doesn't mean

00:38:10,710 --> 00:38:13,740
that your entire team wants everything

00:38:12,720 --> 00:38:15,660
to change at once

00:38:13,740 --> 00:38:17,070
sometimes if you're on a deadline do you

00:38:15,660 --> 00:38:19,470
want to reach for the tool that you're

00:38:17,070 --> 00:38:21,869
super comfortable with and so trying to

00:38:19,470 --> 00:38:24,570
change everything at once is a recipe

00:38:21,869 --> 00:38:26,760
for failure so one of these things that

00:38:24,570 --> 00:38:28,290
we saw at NPM is that so Russ is a

00:38:26,760 --> 00:38:30,390
compiled language we're able to compile

00:38:28,290 --> 00:38:32,460
into binaries which is super great as an

00:38:30,390 --> 00:38:36,060
ops person I'm like perfect binary just

00:38:32,460 --> 00:38:37,530
stick it up there boring I love it but

00:38:36,060 --> 00:38:39,720
the team really wasn't ready to set that

00:38:37,530 --> 00:38:42,330
up yet we have an incredibly extensive

00:38:39,720 --> 00:38:43,890
set of Yambol files again not many ops

00:38:42,330 --> 00:38:46,530
people in the house but if you do ops

00:38:43,890 --> 00:38:48,540
all the ammo files oh my goodness but we

00:38:46,530 --> 00:38:50,430
have tons of gamal and it was kind of a

00:38:48,540 --> 00:38:51,960
big pain in the butt and what we've

00:38:50,430 --> 00:38:54,390
realized is that even though Russ is

00:38:51,960 --> 00:38:56,910
able to generate a binary for us at that

00:38:54,390 --> 00:38:58,680
moment we just needed to deploy the rest

00:38:56,910 --> 00:39:01,890
the same way we were deploying the node

00:38:58,680 --> 00:39:05,099
so this is how we do it again here's

00:39:01,890 --> 00:39:06,570
some some gamal it's delightful but we

00:39:05,099 --> 00:39:08,400
decided to do the same thing we just say

00:39:06,570 --> 00:39:10,380
we pushed up the source code using a git

00:39:08,400 --> 00:39:12,480
hook and we actually compiled on the

00:39:10,380 --> 00:39:14,520
server was it slow yes

00:39:12,480 --> 00:39:19,010
did it not set the whole team on fire

00:39:14,520 --> 00:39:21,900
and make them enjoy rust absolutely so

00:39:19,010 --> 00:39:24,869
moving on the next tip is to have a

00:39:21,900 --> 00:39:27,570
problem to solve again there's a lot of

00:39:24,869 --> 00:39:29,400
solution Earring and technology and that

00:39:27,570 --> 00:39:31,920
can be great but we have so many

00:39:29,400 --> 00:39:34,020
solutions and we tend to kind of lose

00:39:31,920 --> 00:39:37,500
sight of the problems I saw a tweet that

00:39:34,020 --> 00:39:40,710
said like solve the problem you have not

00:39:37,500 --> 00:39:42,240
the one you want to have and yet I see

00:39:40,710 --> 00:39:43,619
so many people constantly solving the

00:39:42,240 --> 00:39:45,930
problems that they think are super cool

00:39:43,619 --> 00:39:48,150
but not actually the ones that they have

00:39:45,930 --> 00:39:50,160
now I like to say that finding a problem

00:39:48,150 --> 00:39:52,830
should be easy because all software is

00:39:50,160 --> 00:39:54,740
terrible it really is I don't know if

00:39:52,830 --> 00:39:57,690
you're here and you think computers work

00:39:54,740 --> 00:39:59,430
please bring me hope because my

00:39:57,690 --> 00:40:02,400
experience throughout software is like

00:39:59,430 --> 00:40:04,290
if it works that's that's great but like

00:40:02,400 --> 00:40:07,440
it probably won't work for long

00:40:04,290 --> 00:40:09,300
so as I told you at MPM big

00:40:07,440 --> 00:40:11,460
numbers are big when I was writing this

00:40:09,300 --> 00:40:15,210
service that I'm gonna talk to you about

00:40:11,460 --> 00:40:17,700
we had about 70 billion downloads occur

00:40:15,210 --> 00:40:20,520
on the service so that is a lot of

00:40:17,700 --> 00:40:22,950
traffic and these are her rolling weekly

00:40:20,520 --> 00:40:24,119
downloads they're going straight up just

00:40:22,950 --> 00:40:27,510
for fun though you might notice that

00:40:24,119 --> 00:40:30,089
huge crevasse there people actually do

00:40:27,510 --> 00:40:31,950
take vacation on Christmas it's cool we

00:40:30,089 --> 00:40:33,630
literally see it we like all of our

00:40:31,950 --> 00:40:35,579
metrics alerts that are like your stuff

00:40:33,630 --> 00:40:37,260
is broken always ring off during

00:40:35,579 --> 00:40:40,170
Christmas because people actually stop

00:40:37,260 --> 00:40:42,450
writing JavaScript yay that's positive

00:40:40,170 --> 00:40:43,800
and then they start again clearly they

00:40:42,450 --> 00:40:47,339
don't they really just pick right back

00:40:43,800 --> 00:40:49,170
up where they left off so we have

00:40:47,339 --> 00:40:51,480
something in MPM called Store file

00:40:49,170 --> 00:40:53,099
transforms which is to say when we're

00:40:51,480 --> 00:40:54,300
building when you have a package you

00:40:53,099 --> 00:40:55,619
also have a bunch of other stuff

00:40:54,300 --> 00:40:58,230
associated with the package like a

00:40:55,619 --> 00:41:00,210
readme and also some metadata and we

00:40:58,230 --> 00:41:01,380
need to do processing on this and so if

00:41:00,210 --> 00:41:03,390
you're curious about something that rust

00:41:01,380 --> 00:41:06,420
is particularly good at rust is super

00:41:03,390 --> 00:41:09,000
good at just processing files markdown

00:41:06,420 --> 00:41:11,339
all of this it's super excellent at that

00:41:09,000 --> 00:41:13,530
and so we had this kind of similar

00:41:11,339 --> 00:41:14,579
situation where we'd get changes in and

00:41:13,530 --> 00:41:16,650
those changes particularly were

00:41:14,579 --> 00:41:18,540
publishes and then what we needed to do

00:41:16,650 --> 00:41:20,460
was to take a bunch of the metadata and

00:41:18,540 --> 00:41:23,010
associated files with that publish and

00:41:20,460 --> 00:41:25,079
then run a bunch of transforms on those

00:41:23,010 --> 00:41:27,359
files and so we were doing this in node

00:41:25,079 --> 00:41:29,250
and it was falling over the memory

00:41:27,359 --> 00:41:31,050
problems were terrible and so you might

00:41:29,250 --> 00:41:33,150
be like you're a bad developer and like

00:41:31,050 --> 00:41:37,109
I mean probably aren't we all bad

00:41:33,150 --> 00:41:39,060
developers but we're pretty like much of

00:41:37,109 --> 00:41:41,250
the engineering resources at MPM are

00:41:39,060 --> 00:41:43,079
people who are like on the node TSC and

00:41:41,250 --> 00:41:45,480
like working literally on nodes so we're

00:41:43,079 --> 00:41:48,510
pretty good but it turns out that memory

00:41:45,480 --> 00:41:50,490
is always still a problem and so what we

00:41:48,510 --> 00:41:53,579
were able to do is we were able to take

00:41:50,490 --> 00:41:55,170
that bit just that one tiny bit and so

00:41:53,579 --> 00:41:57,119
if you're wondering where is the rust in

00:41:55,170 --> 00:41:58,619
NPM the rust is in the store file

00:41:57,119 --> 00:42:00,810
transforms there's actually a couple

00:41:58,619 --> 00:42:03,630
other auth services mostly associated

00:42:00,810 --> 00:42:05,310
with our enterprise product but the

00:42:03,630 --> 00:42:06,630
store file transforms are all done in

00:42:05,310 --> 00:42:09,690
rust and that's because they were able

00:42:06,630 --> 00:42:11,760
to do it not in necessarily a fancy way

00:42:09,690 --> 00:42:12,359
it's faster but it's not that much

00:42:11,760 --> 00:42:14,790
faster

00:42:12,359 --> 00:42:17,250
what was awesome about it and what CJ

00:42:14,790 --> 00:42:21,090
always says is I like rust because rust

00:42:17,250 --> 00:42:24,050
is boring we deployed that service

00:42:21,090 --> 00:42:27,120
two years ago and it has never alerted

00:42:24,050 --> 00:42:30,030
it just it just does what it needs to do

00:42:27,120 --> 00:42:32,670
and that's awesome again not super

00:42:30,030 --> 00:42:35,070
flashy not the most fancy part of NPM

00:42:32,670 --> 00:42:37,980
but it was a solid choice for this one

00:42:35,070 --> 00:42:39,780
particular problem and so as you seek to

00:42:37,980 --> 00:42:41,850
add technologies to your companies find

00:42:39,780 --> 00:42:44,760
a problematic part of your product and

00:42:41,850 --> 00:42:47,040
then just try rewriting it and rust it's

00:42:44,760 --> 00:42:49,110
kind of a cool experiment but make sure

00:42:47,040 --> 00:42:50,820
that it's actually a problem because

00:42:49,110 --> 00:42:52,320
solving something that's not a problem

00:42:50,820 --> 00:42:53,640
again is adding a bunch of churn that

00:42:52,320 --> 00:42:56,430
most people in a company are not

00:42:53,640 --> 00:42:58,470
interested don't make people take on

00:42:56,430 --> 00:43:00,420
risk they don't need to find the parts

00:42:58,470 --> 00:43:04,290
where you're already having risk and try

00:43:00,420 --> 00:43:06,000
and alleviate them so the final tip tip

00:43:04,290 --> 00:43:07,170
number 10 is learning curves are a

00:43:06,000 --> 00:43:08,550
blessing in disguise

00:43:07,170 --> 00:43:11,580
how many people have heard that it's

00:43:08,550 --> 00:43:14,040
hard to learn rust alright I'm here to

00:43:11,580 --> 00:43:16,260
tell you that many people report that is

00:43:14,040 --> 00:43:17,340
incredibly hard to learn rust however

00:43:16,260 --> 00:43:18,780
one of the things that you have to

00:43:17,340 --> 00:43:20,730
manage at a company is employee

00:43:18,780 --> 00:43:22,320
motivation and so this is my colleague

00:43:20,730 --> 00:43:24,300
Ryan who was working through that you

00:43:22,320 --> 00:43:26,070
know kind of weird log parser he was

00:43:24,300 --> 00:43:27,360
writing and what he said is this is the

00:43:26,070 --> 00:43:29,070
really fun part about learning new

00:43:27,360 --> 00:43:31,740
things I still have the patience to do

00:43:29,070 --> 00:43:33,870
any number of silly things and so that's

00:43:31,740 --> 00:43:35,850
like kind of adding a joy and so we all

00:43:33,870 --> 00:43:38,250
kind of slave away writing the code for

00:43:35,850 --> 00:43:40,350
the money and the opportunity to learn

00:43:38,250 --> 00:43:42,630
something particularly something hard

00:43:40,350 --> 00:43:45,570
can be really great like it's energizing

00:43:42,630 --> 00:43:47,460
and it often can be energizing if it

00:43:45,570 --> 00:43:49,140
seems particularly challenging in a way

00:43:47,460 --> 00:43:51,300
that's gonna expand what you understand

00:43:49,140 --> 00:43:54,120
if we go back to the idea that what rust

00:43:51,300 --> 00:43:56,820
wants to do is to make everyone a

00:43:54,120 --> 00:43:58,860
systems developer bringing rust to a

00:43:56,820 --> 00:44:01,080
company where people are not known to be

00:43:58,860 --> 00:44:03,450
systems developers can not only you know

00:44:01,080 --> 00:44:05,880
help them learn a new technology but

00:44:03,450 --> 00:44:07,760
open up a whole new area of technology

00:44:05,880 --> 00:44:10,740
for them to become excited about

00:44:07,760 --> 00:44:13,110
so in summary these are all your lovely

00:44:10,740 --> 00:44:15,290
tips apply them all at once

00:44:13,110 --> 00:44:18,210
and enjoy the pleasure of contradictions

00:44:15,290 --> 00:44:20,250
so to end I'll say if you're gonna

00:44:18,210 --> 00:44:22,140
repair a motorcycle an adequate supply

00:44:20,250 --> 00:44:24,210
of gumption is the first and most

00:44:22,140 --> 00:44:26,370
important tool if you haven't got that

00:44:24,210 --> 00:44:28,230
you might as well gather up all the

00:44:26,370 --> 00:44:30,200
other tools and put them away because

00:44:28,230 --> 00:44:33,270
they won't do you any good

00:44:30,200 --> 00:44:34,980
so gumption here is you know the

00:44:33,270 --> 00:44:38,640
definition is a spirited initiative

00:44:34,980 --> 00:44:40,170
but also resourcefulness being really

00:44:38,640 --> 00:44:41,910
enthusiastic and shouting from the

00:44:40,170 --> 00:44:45,180
rooftops that you love a technology is

00:44:41,910 --> 00:44:47,579
great but it is not enough you have to

00:44:45,180 --> 00:44:49,560
add an understanding of context and an

00:44:47,579 --> 00:44:51,990
openness to understanding other people's

00:44:49,560 --> 00:44:55,530
experiences in order to be able to do it

00:44:51,990 --> 00:44:57,630
well so what I'll say is please go forth

00:44:55,530 --> 00:44:59,820
and try rest I hope I encourage some of

00:44:57,630 --> 00:45:01,650
you to be excited about it but my final

00:44:59,820 --> 00:45:03,599
thing is a plug for the project that I'm

00:45:01,650 --> 00:45:06,089
currently working on and this is because

00:45:03,599 --> 00:45:07,349
if you have any client-side component of

00:45:06,089 --> 00:45:09,119
your application which means you're

00:45:07,349 --> 00:45:11,910
running it in the browser this whole

00:45:09,119 --> 00:45:13,710
idea of taking a tiny part and trying to

00:45:11,910 --> 00:45:15,599
use rust to make it faster or more

00:45:13,710 --> 00:45:17,339
liable is something that we are working

00:45:15,599 --> 00:45:20,640
on in the rust community to make

00:45:17,339 --> 00:45:22,560
webassembly do so you can take rust and

00:45:20,640 --> 00:45:24,900
compile it to web assembly and be able

00:45:22,560 --> 00:45:27,180
to plug it just directly into some

00:45:24,900 --> 00:45:28,680
browser code or some node code if you're

00:45:27,180 --> 00:45:30,420
interested in that tool this is the tool

00:45:28,680 --> 00:45:32,369
I work on right now it's called Waze

00:45:30,420 --> 00:45:35,430
impac if you like the crab

00:45:32,369 --> 00:45:39,680
I have stickers so go forth and try new

00:45:35,430 --> 00:45:39,680

YouTube URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg


