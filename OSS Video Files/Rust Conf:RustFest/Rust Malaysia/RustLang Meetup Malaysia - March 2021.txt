Title: RustLang Meetup Malaysia - March 2021
Publication date: 2021-03-29
Playlist: Rust Malaysia
Description: 
	Ivan Tham talked about diesel and experience with it with some examples of how the strongly type ORM looks like. On some additional time, he talked about a side project using rust to do parsing with nom and using inline_python to run some pandas code directly.
Captions: 
	00:09:55,279 --> 00:09:57,600
okay

00:09:58,160 --> 00:10:06,079
hey hello welcome to

00:10:02,000 --> 00:10:10,480
rust meetup match 2021

00:10:06,079 --> 00:10:13,920
today we will have ivan presenting

00:10:10,480 --> 00:10:17,040
on diesel

00:10:13,920 --> 00:10:20,320
so without further ado let's

00:10:17,040 --> 00:10:22,320
start the presentation so if you are

00:10:20,320 --> 00:10:24,720
uh by the way uh if you are interested

00:10:22,320 --> 00:10:28,160
in the

00:10:24,720 --> 00:10:30,560
meetup you can go to uh

00:10:28,160 --> 00:10:32,880
you can you can come join our call on

00:10:30,560 --> 00:10:37,360
google meet

00:10:32,880 --> 00:10:41,519
the this is the

00:10:37,360 --> 00:10:45,920
meet google me code nz e and rje

00:10:41,519 --> 00:10:48,240
dvd uh without further ado evan are you

00:10:45,920 --> 00:10:48,240
ready

00:10:52,800 --> 00:10:57,200
okay let's let's start already i'll be

00:10:55,600 --> 00:11:00,320
represented for today

00:10:57,200 --> 00:11:00,959
so since news since last time we have

00:11:00,320 --> 00:11:03,120
our meetup

00:11:00,959 --> 00:11:04,160
one year ago which is uh before the

00:11:03,120 --> 00:11:06,880
quarter nineteen

00:11:04,160 --> 00:11:06,880
like january

00:11:07,360 --> 00:11:10,880
night called echo

00:11:18,560 --> 00:11:24,320
okay okay since last time we have our

00:11:21,519 --> 00:11:28,000
last meet up during last january

00:11:24,320 --> 00:11:30,720
we have uh 1.40

00:11:28,000 --> 00:11:31,839
plus and now we have 1.49 release so

00:11:30,720 --> 00:11:33,279
it's like a year

00:11:31,839 --> 00:11:35,760
more than a year already we have quite a

00:11:33,279 --> 00:11:38,079
lot we have like uh

00:11:35,760 --> 00:11:39,279
we have a lot of improvement in a const

00:11:38,079 --> 00:11:41,440
area

00:11:39,279 --> 00:11:44,240
like there's a cons function and stuff a

00:11:41,440 --> 00:11:44,240
lot of them

00:11:54,839 --> 00:11:57,839
by

00:11:58,240 --> 00:12:01,760
okay and and then today i'll talk about

00:11:59,839 --> 00:12:03,600
diesel

00:12:01,760 --> 00:12:05,680
learn about diesel is that last time

00:12:03,600 --> 00:12:09,600
when i was working right

00:12:05,680 --> 00:12:14,480
i was uh when i was working i was

00:12:09,600 --> 00:12:17,519
reading doing like goa m which is a

00:12:14,480 --> 00:12:19,040
gold length library for om

00:12:17,519 --> 00:12:21,040
i was working in this i noticed that

00:12:19,040 --> 00:12:23,519
there's a lot of food guns where you can

00:12:21,040 --> 00:12:26,720
easily fall into

00:12:23,519 --> 00:12:29,600
so russ have uh

00:12:26,720 --> 00:12:30,959
russet a library called diesel which is

00:12:29,600 --> 00:12:32,959
popular it's an om

00:12:30,959 --> 00:12:34,800
although some someone doesn't doesn't

00:12:32,959 --> 00:12:38,240
call it om right

00:12:34,800 --> 00:12:41,920
uh we can consider it itself

00:12:38,240 --> 00:12:44,399
uh it markets itself as an om

00:12:41,920 --> 00:12:46,959
and query builder yeah but the something

00:12:44,399 --> 00:12:49,760
someone might argue that it's more

00:12:46,959 --> 00:12:50,399
it's a more uh more towards queer

00:12:49,760 --> 00:12:53,839
builder

00:12:50,399 --> 00:12:56,320
they could consider it so

00:12:53,839 --> 00:12:57,920
uh i tried golem such that it has issues

00:12:56,320 --> 00:12:59,600
with joints

00:12:57,920 --> 00:13:01,120
and if you do something out of normal

00:12:59,600 --> 00:13:02,160
because it uses a lot of reflection

00:13:01,120 --> 00:13:05,279
magic

00:13:02,160 --> 00:13:06,000
and it uses a lot of reflection magic

00:13:05,279 --> 00:13:09,200
for gram

00:13:06,000 --> 00:13:10,320
so it have a lot of uh sometimes in some

00:13:09,200 --> 00:13:13,680
parts it doesn't work

00:13:10,320 --> 00:13:14,639
even though it compiles but design is

00:13:13,680 --> 00:13:17,760
different

00:13:14,639 --> 00:13:19,440
lisa is a type safe extensible om

00:13:17,760 --> 00:13:20,959
and today i'll share my experience on

00:13:19,440 --> 00:13:24,240
using diesel

00:13:20,959 --> 00:13:26,320
and how how much typesafe is that

00:13:24,240 --> 00:13:28,800
so we first when we come into diesel

00:13:26,320 --> 00:13:30,639
right we need to know that it is not

00:13:28,800 --> 00:13:32,079
you you can't you can't think of it as

00:13:30,639 --> 00:13:35,279
the other om that you might

00:13:32,079 --> 00:13:37,760
have seen because

00:13:35,279 --> 00:13:39,040
later i'll explain that so reset is fast

00:13:37,760 --> 00:13:42,959
it's built for

00:13:39,040 --> 00:13:46,160
performance okay before performance as

00:13:42,959 --> 00:13:48,480
in they have a benchmark as because

00:13:46,160 --> 00:13:51,279
there is a alternative to diesel

00:13:48,480 --> 00:13:51,279
includes sql

00:13:52,480 --> 00:13:57,920
in in rust as well so

00:13:55,519 --> 00:13:59,199
this one is uh this is type safe so

00:13:57,920 --> 00:14:01,600
that's why they can say

00:13:59,199 --> 00:14:03,279
preventing runtime errors but it's type

00:14:01,600 --> 00:14:06,880
safe to a certain level

00:14:03,279 --> 00:14:11,040
so i have experienced some food guns in

00:14:06,880 --> 00:14:14,320
for it such that it doesn't have like uh

00:14:11,040 --> 00:14:16,079
in some parts very specific parts and

00:14:14,320 --> 00:14:17,360
it gets runtime error instead of compile

00:14:16,079 --> 00:14:18,880
time error but there's like some

00:14:17,360 --> 00:14:21,600
limitation in perhaps

00:14:18,880 --> 00:14:23,120
some limitation in the type type system

00:14:21,600 --> 00:14:24,800
such that it didn't implement those

00:14:23,120 --> 00:14:27,279
parts it can be done but uh

00:14:24,800 --> 00:14:28,880
it wasn't there because it's something

00:14:27,279 --> 00:14:30,480
new for that part

00:14:28,880 --> 00:14:33,360
so they haven't fully explored that yet

00:14:30,480 --> 00:14:35,920
so sqr x is an alternative to diesel

00:14:33,360 --> 00:14:36,880
whereas sql x takes a takes a different

00:14:35,920 --> 00:14:40,079
approach

00:14:36,880 --> 00:14:43,440
where you write pure sql and then

00:14:40,079 --> 00:14:46,240
the sql and then the sql will be

00:14:43,440 --> 00:14:47,279
checked during compile time when you

00:14:46,240 --> 00:14:49,199
compile the sql

00:14:47,279 --> 00:14:50,320
when you compile the stuff with sql x

00:14:49,199 --> 00:14:53,199
right

00:14:50,320 --> 00:14:54,399
you can use their macro called query and

00:14:53,199 --> 00:14:56,560
they also have a function

00:14:54,399 --> 00:14:59,279
but you can use the macro and the macro

00:14:56,560 --> 00:15:01,040
will connect to the database

00:14:59,279 --> 00:15:02,959
and then you check whether that query is

00:15:01,040 --> 00:15:06,079
correct or not

00:15:02,959 --> 00:15:07,040
so it does it in another way but this

00:15:06,079 --> 00:15:09,920
doesn't do it that way

00:15:07,040 --> 00:15:11,600
listen put all of those sql information

00:15:09,920 --> 00:15:13,760
into the types itself

00:15:11,600 --> 00:15:15,920
so that the provides like built in the

00:15:13,760 --> 00:15:19,279
build dsl

00:15:15,920 --> 00:15:22,720
for uh doing dealing with types

00:15:19,279 --> 00:15:23,120
so that's how they do it so you need to

00:15:22,720 --> 00:15:24,959
know

00:15:23,120 --> 00:15:27,519
sql access is an automate but it's very

00:15:24,959 --> 00:15:29,839
different and some some others may not

00:15:27,519 --> 00:15:31,040
prefer the both of these they may want

00:15:29,839 --> 00:15:32,800
to write like tokyo

00:15:31,040 --> 00:15:35,120
postgres which use the lower level

00:15:32,800 --> 00:15:40,240
directly

00:15:35,120 --> 00:15:42,000
but yeah diesel so uh

00:15:40,240 --> 00:15:44,160
when when you get started you look we

00:15:42,000 --> 00:15:46,000
will see some examples here

00:15:44,160 --> 00:15:47,440
this is like roughly what diesel looks

00:15:46,000 --> 00:15:51,120
like so

00:15:47,440 --> 00:15:51,120
these are the generator code and

00:15:51,279 --> 00:15:54,480
and then they they won't have a

00:15:52,839 --> 00:15:57,680
relationship

00:15:54,480 --> 00:16:00,079
and these are like roughly how diesel

00:15:57,680 --> 00:16:00,079
looks like

00:16:00,720 --> 00:16:07,360
and they also users derive to derive

00:16:04,079 --> 00:16:08,959
like the stuff to be queried

00:16:07,360 --> 00:16:11,440
and for inserting data usually they have

00:16:08,959 --> 00:16:13,680
in this right they have a pattern where

00:16:11,440 --> 00:16:16,480
you you create a struct for like

00:16:13,680 --> 00:16:19,199
different items that you are doing

00:16:16,480 --> 00:16:21,600
for example because uh usually you see

00:16:19,199 --> 00:16:25,600
people like if you have a struct for

00:16:21,600 --> 00:16:30,399
user people have a strap for a

00:16:25,600 --> 00:16:33,920
new user user is for creating

00:16:30,399 --> 00:16:36,720
user is for creating a new

00:16:33,920 --> 00:16:38,160
listing users where the users have id

00:16:36,720 --> 00:16:40,079
and if you notice the

00:16:38,160 --> 00:16:42,320
if you use user right it will be draft

00:16:40,079 --> 00:16:46,000
queryable

00:16:42,320 --> 00:16:47,279
and then if you use like a new user

00:16:46,000 --> 00:16:49,199
it will be derived in suitable the

00:16:47,279 --> 00:16:51,360
difference is that

00:16:49,199 --> 00:16:53,040
new user usually don't include the id

00:16:51,360 --> 00:16:54,560
you only include what you want to insert

00:16:53,040 --> 00:16:57,199
and other values being like auto

00:16:54,560 --> 00:17:00,399
generated or default values

00:16:57,199 --> 00:17:02,399
so you may need some extra boilerplates

00:17:00,399 --> 00:17:05,520
where for different queries with a

00:17:02,399 --> 00:17:08,079
different amount of

00:17:05,520 --> 00:17:09,120
fuels you you may need to use a

00:17:08,079 --> 00:17:12,880
different struct

00:17:09,120 --> 00:17:15,600
for that this also helps to prevent some

00:17:12,880 --> 00:17:17,039
like some issues like let's say uh it

00:17:15,600 --> 00:17:18,079
doesn't do like default values or

00:17:17,039 --> 00:17:20,640
special

00:17:18,079 --> 00:17:21,760
case in some stuff so all the fields

00:17:20,640 --> 00:17:24,559
have to be there

00:17:21,760 --> 00:17:24,559
and must be used

00:17:25,039 --> 00:17:28,720
and later i'll talk about this how they

00:17:27,120 --> 00:17:30,640
work it's not you don't you don't think

00:17:28,720 --> 00:17:31,039
of them as models you think of them as

00:17:30,640 --> 00:17:33,520
like

00:17:31,039 --> 00:17:34,480
queries to be called stuff to be correct

00:17:33,520 --> 00:17:37,200
because

00:17:34,480 --> 00:17:38,799
it it doesn't work like a model in other

00:17:37,200 --> 00:17:40,240
languages

00:17:38,799 --> 00:17:43,120
it can't be considered model it can it

00:17:40,240 --> 00:17:47,039
can be considered something like a

00:17:43,120 --> 00:17:50,240
query so for updating data

00:17:47,039 --> 00:17:53,919
is a bit similar

00:17:50,240 --> 00:18:01,840
so this how roughly how it looks like

00:17:53,919 --> 00:18:01,840
then we can get started to do so so this

00:18:26,840 --> 00:18:29,840
level

00:19:04,400 --> 00:19:12,400
oops looks like ivan is having some

00:19:07,679 --> 00:19:25,600
connection problem wait

00:19:12,400 --> 00:19:29,360
come back

00:19:25,600 --> 00:19:29,360
one let me check

00:19:32,000 --> 00:19:39,840
i haven't are you that

00:19:43,600 --> 00:19:46,080
ivan

00:19:49,280 --> 00:19:53,840
is gone

00:20:17,280 --> 00:20:21,840
let me check if oven is still

00:20:32,480 --> 00:20:35,840
iron is not responding to

00:20:36,880 --> 00:20:44,320
to my telegram messages

00:20:40,559 --> 00:20:47,760
or him to see

00:20:44,320 --> 00:20:52,960
what's happening over his i side

00:20:47,760 --> 00:20:52,960
hit my foot gun right

00:20:56,320 --> 00:21:07,039
let me give him a call

00:21:02,640 --> 00:21:11,520
oh he's having some connection problem

00:21:07,039 --> 00:21:11,520
oh he should be back in a minute

00:21:14,960 --> 00:21:19,600
meanwhile if you are interested in

00:21:16,799 --> 00:21:19,600
joining the

00:21:20,880 --> 00:21:23,120
uh

00:21:24,720 --> 00:21:27,280
the meeting

00:21:27,840 --> 00:21:35,200
you can come

00:21:31,840 --> 00:21:35,200
by visiting this link

00:21:43,120 --> 00:21:45,840
dash meet.google.com

00:21:48,159 --> 00:21:53,280
let's see if iron is coming back

00:21:53,760 --> 00:21:59,840
or even

00:22:24,840 --> 00:22:27,840
hmm

00:22:38,880 --> 00:22:42,240
i ivan is gone

00:22:46,960 --> 00:22:55,840
however needs to reboot his network

00:23:03,120 --> 00:23:09,840
everyone is asking where ivan is

00:23:10,400 --> 00:23:14,000
iowan is restarting his network so he

00:23:12,880 --> 00:23:18,320
should be back

00:23:14,000 --> 00:23:18,320
in about a minute or two

00:23:21,039 --> 00:23:24,960
so meanwhile if i'm interested in

00:23:22,799 --> 00:23:29,520
participating in the call

00:23:24,960 --> 00:23:29,520
you can join us by visiting this link

00:23:29,760 --> 00:23:37,840
we might need to get ivan

00:23:32,799 --> 00:23:37,840
to start over

00:23:38,559 --> 00:23:41,280
considering

00:23:43,760 --> 00:23:48,159
the slides are not updated properly on

00:23:48,840 --> 00:23:51,840
youtube

00:23:57,919 --> 00:24:03,279
an iron is taking forever to restart his

00:24:00,960 --> 00:24:19,840
network

00:24:03,279 --> 00:24:19,840
i'm very sorry about that

00:24:31,760 --> 00:24:39,840
all right i haven't just restarted hello

00:24:36,320 --> 00:24:42,960
all right can you i have camera

00:24:39,840 --> 00:24:45,840
no oh can you

00:24:42,960 --> 00:24:47,039
generally start the the top because uh

00:24:45,840 --> 00:24:50,400
youtube was having

00:24:47,039 --> 00:24:50,400
problem refreshing the

00:24:50,799 --> 00:24:55,840
the slides

00:24:56,880 --> 00:25:06,640
refreshing refreshing website

00:25:01,200 --> 00:25:06,640
your slide were not shown in the video

00:25:09,600 --> 00:25:18,320
and then ivan is gone again

00:25:14,480 --> 00:25:18,320
why why are you doing this for me evan

00:25:19,520 --> 00:25:29,840
i won't please come back

00:26:09,120 --> 00:26:12,000
hello okay

00:26:14,480 --> 00:26:22,080
all right new start over

00:26:18,320 --> 00:26:26,799
do i have sound yes

00:26:22,080 --> 00:26:29,919
okay okay start work yep

00:26:26,799 --> 00:26:32,960
uh okay start from

00:26:29,919 --> 00:26:34,320
what everything yeah from diesel second

00:26:32,960 --> 00:26:39,440
slide i think

00:26:34,320 --> 00:26:42,080
after the 1.499 rush

00:26:39,440 --> 00:26:43,840
ah there's no slice i didn't show

00:26:42,080 --> 00:26:46,480
anything uh

00:26:43,840 --> 00:26:50,799
i i yeah there's no side the last slide

00:26:46,480 --> 00:26:50,799
is about the grass 1.40

00:27:01,919 --> 00:27:09,200
now can see you can see ready

00:27:06,799 --> 00:27:09,200
screen

00:27:12,640 --> 00:27:19,120
okay so oh i talked a lot

00:27:16,080 --> 00:27:21,840
but never let me start again so diesel

00:27:19,120 --> 00:27:22,320
i thought uh just early i say talk about

00:27:21,840 --> 00:27:25,039
this

00:27:22,320 --> 00:27:25,039
this already

00:27:28,960 --> 00:27:33,440
yeah but to be safe i guess you you

00:27:31,120 --> 00:27:36,320
should start to talk about itself

00:27:33,440 --> 00:27:39,760
okay so it's a type safe form although

00:27:36,320 --> 00:27:39,760
some people don't consider essence

00:27:42,799 --> 00:27:46,080
in rust is a popular one most popular

00:27:44,880 --> 00:27:51,679
one the alternative

00:27:46,080 --> 00:27:51,679
includes sqlc the excel sqlx

00:27:51,840 --> 00:27:56,799
which does thing which does things quite

00:27:54,480 --> 00:28:00,559
differently compared to diesel

00:27:56,799 --> 00:28:03,840
well it does is it allows you to scale

00:28:00,559 --> 00:28:08,000
sqlx have bought async support

00:28:03,840 --> 00:28:11,679
diesel doesn't have and i can explain a

00:28:08,000 --> 00:28:14,559
reason next time and uh so

00:28:11,679 --> 00:28:15,679
it supports uh sqlx supports like a few

00:28:14,559 --> 00:28:17,520
more

00:28:15,679 --> 00:28:19,039
a few more drivers other than no these

00:28:17,520 --> 00:28:21,679
are only support postgres

00:28:19,039 --> 00:28:22,799
mysql and sqlite but sqlx support a few

00:28:21,679 --> 00:28:26,159
more drivers some more

00:28:22,799 --> 00:28:28,399
srx support like uh the pura

00:28:26,159 --> 00:28:30,720
drywall unlike diesel this doesn't

00:28:28,399 --> 00:28:34,159
support the purest driver

00:28:30,720 --> 00:28:35,919
yet no one wants to do that but

00:28:34,159 --> 00:28:37,360
the reason the reason why diesel didn't

00:28:35,919 --> 00:28:37,760
support the purest driver is that

00:28:37,360 --> 00:28:42,640
because

00:28:37,760 --> 00:28:45,120
the poorest drivers for like the bicycle

00:28:42,640 --> 00:28:47,520
cannot be compared to the c driver is

00:28:45,120 --> 00:28:50,000
that a lot slower compared to the

00:28:47,520 --> 00:28:53,120
c binding so this is to use the c by

00:28:50,000 --> 00:28:56,799
index the original c bindings

00:28:53,120 --> 00:28:57,279
and why why uh do we want to use these

00:28:56,799 --> 00:28:59,120
like

00:28:57,279 --> 00:29:00,559
one of the things because it's type save

00:28:59,120 --> 00:29:04,240
it prevent runtime error

00:29:00,559 --> 00:29:06,159
this is safe to us for a certain level

00:29:04,240 --> 00:29:07,440
where like sometimes new features are

00:29:06,159 --> 00:29:11,600
faced uh

00:29:07,440 --> 00:29:14,480
certain scenario where there is error on

00:29:11,600 --> 00:29:15,760
runtime instead of compile time but most

00:29:14,480 --> 00:29:17,520
of the stuff is like when

00:29:15,760 --> 00:29:19,679
usually when it comes it will work in

00:29:17,520 --> 00:29:22,720
diesel but sometimes the compiler

00:29:19,679 --> 00:29:24,840
compile error for this is quite hard to

00:29:22,720 --> 00:29:27,760
understand

00:29:24,840 --> 00:29:28,559
because like because diesel uses a lot

00:29:27,760 --> 00:29:30,640
of

00:29:28,559 --> 00:29:32,080
different type type magic you can call

00:29:30,640 --> 00:29:34,320
it

00:29:32,080 --> 00:29:37,120
so and then it's also a bit of a

00:29:34,320 --> 00:29:40,000
performance it's quite fast

00:29:37,120 --> 00:29:41,200
and of course i think raw sql should be

00:29:40,000 --> 00:29:44,559
faster but diesel

00:29:41,200 --> 00:29:44,559
it should is quite fast

00:29:45,120 --> 00:29:48,720
and productive uh i don't know how how

00:29:47,679 --> 00:29:50,960
good is that

00:29:48,720 --> 00:29:52,720
so they still have like a built-in dsl

00:29:50,960 --> 00:29:54,799
where you can

00:29:52,720 --> 00:29:56,240
have multiple dsl where you can use the

00:29:54,799 --> 00:29:58,559
domain specified language to

00:29:56,240 --> 00:29:59,440
do the querying you can see like these

00:29:58,559 --> 00:30:02,080
are all like

00:29:59,440 --> 00:30:03,120
piezo code and it will generate the it's

00:30:02,080 --> 00:30:05,360
like a

00:30:03,120 --> 00:30:06,960
builder or sort but it's the

00:30:05,360 --> 00:30:10,480
corresponding types of

00:30:06,960 --> 00:30:13,360
rust sorry sorry i haven't

00:30:10,480 --> 00:30:13,840
can you enlarge the screen for a bit

00:30:13,360 --> 00:30:16,880
because

00:30:13,840 --> 00:30:23,039
it's too small to see on the screen

00:30:16,880 --> 00:30:26,720
like this yep

00:30:23,039 --> 00:30:27,840
uh it says like uh you can do something

00:30:26,720 --> 00:30:30,559
like this

00:30:27,840 --> 00:30:32,399
and then it will do like this so these

00:30:30,559 --> 00:30:34,320
are generated by diesel you don't

00:30:32,399 --> 00:30:35,440
this is like diesel schema it's

00:30:34,320 --> 00:30:38,960
generated

00:30:35,440 --> 00:30:41,120
and they generate dsl for you and then

00:30:38,960 --> 00:30:42,559
well it does it generates this so these

00:30:41,120 --> 00:30:45,360
are

00:30:42,559 --> 00:30:46,880
diesel code it's a more complex one of

00:30:45,360 --> 00:30:49,279
course later i'll show

00:30:46,880 --> 00:30:51,200
even more complex even more complex one

00:30:49,279 --> 00:30:53,760
which doesn't even work

00:30:51,200 --> 00:30:54,799
i mean i'm stuck so i need to do raw sql

00:30:53,760 --> 00:30:56,640
for that

00:30:54,799 --> 00:30:58,399
but this already supports quite a lot of

00:30:56,640 --> 00:31:00,720
different stuff like uh this

00:30:58,399 --> 00:31:01,519
utilizes the derive for code gen there's

00:31:00,720 --> 00:31:04,559
a queryable

00:31:01,519 --> 00:31:05,760
the ef variable is to query you'll

00:31:04,559 --> 00:31:07,440
notice that there's a

00:31:05,760 --> 00:31:10,000
there's a queryable and there's an

00:31:07,440 --> 00:31:10,000
insertable

00:31:10,399 --> 00:31:13,919
in these so these are different you

00:31:11,519 --> 00:31:16,399
can't think of them as models

00:31:13,919 --> 00:31:18,159
it doesn't work the way similar to other

00:31:16,399 --> 00:31:19,120
database where we have something called

00:31:18,159 --> 00:31:22,000
model

00:31:19,120 --> 00:31:22,480
digital these are you can think of it as

00:31:22,000 --> 00:31:25,120
what

00:31:22,480 --> 00:31:25,840
is being correct in the sql so this side

00:31:25,120 --> 00:31:29,360
the select

00:31:25,840 --> 00:31:32,960
id version id downloads counter

00:31:29,360 --> 00:31:34,159
that actually is not by name it's a

00:31:32,960 --> 00:31:36,960
this one you can't think of it at this

00:31:34,159 --> 00:31:41,919
because this one works using

00:31:36,960 --> 00:31:43,519
the order so uh

00:31:41,919 --> 00:31:46,399
it's a it's a bit different such that

00:31:43,519 --> 00:31:47,760
the queryable it looks at the id the i32

00:31:46,399 --> 00:31:50,240
i32

00:31:47,760 --> 00:31:50,799
this but it doesn't look like this why

00:31:50,240 --> 00:31:54,480
because

00:31:50,799 --> 00:31:57,679
what if you want to use like uh sql

00:31:54,480 --> 00:31:59,120
like aggregation like count or you want

00:31:57,679 --> 00:32:02,399
to do something like uh

00:31:59,120 --> 00:32:04,799
average so that's why they don't look

00:32:02,399 --> 00:32:04,799
like this

00:32:05,279 --> 00:32:13,039
and then this without diesel

00:32:10,480 --> 00:32:13,679
and for inserting we have insertable

00:32:13,039 --> 00:32:17,120
usually

00:32:13,679 --> 00:32:17,380
we don't do the same we don't use the

00:32:17,120 --> 00:32:20,559
same

00:32:17,380 --> 00:32:22,559
[Music]

00:32:20,559 --> 00:32:25,360
okay we don't we don't use the same

00:32:22,559 --> 00:32:26,720
struct as uh

00:32:25,360 --> 00:32:28,320
i wouldn't say let's boil plate because

00:32:26,720 --> 00:32:28,880
it's quite it's quite still some by the

00:32:28,320 --> 00:32:31,600
way because

00:32:28,880 --> 00:32:33,120
for different queries you need to do

00:32:31,600 --> 00:32:36,000
different struct

00:32:33,120 --> 00:32:37,039
and this one this time you have to like

00:32:36,000 --> 00:32:39,679
uh

00:32:37,039 --> 00:32:41,600
you'll see that if you have user struct

00:32:39,679 --> 00:32:43,840
usually you have you also have a

00:32:41,600 --> 00:32:45,679
new user strap new user struct usually

00:32:43,840 --> 00:32:46,640
you will have like derived insertable

00:32:45,679 --> 00:32:50,720
and user

00:32:46,640 --> 00:32:51,919
derived queryable because why

00:32:50,720 --> 00:32:54,640
because when inserting you don't know

00:32:51,919 --> 00:32:57,360
the id so you don't put id in

00:32:54,640 --> 00:32:59,600
and this you need to fill in all the all

00:32:57,360 --> 00:33:01,120
the fuels here so it's not optional

00:32:59,600 --> 00:33:03,360
so for all the fish you need to put in

00:33:01,120 --> 00:33:05,679
something so that's why

00:33:03,360 --> 00:33:07,039
uh this also although it's a bit more

00:33:05,679 --> 00:33:08,960
boilerplate but you

00:33:07,039 --> 00:33:10,080
you can make sure things don't go wrong

00:33:08,960 --> 00:33:13,039
like you don't insert

00:33:10,080 --> 00:33:14,640
id right so that's why id is not there

00:33:13,039 --> 00:33:16,320
when it's inserting

00:33:14,640 --> 00:33:18,480
and when querying id is there because

00:33:16,320 --> 00:33:20,000
you want to get the id

00:33:18,480 --> 00:33:22,799
so that's why you can think of it as

00:33:20,000 --> 00:33:24,640
like like this

00:33:22,799 --> 00:33:26,559
so you can think of like name as the

00:33:24,640 --> 00:33:28,000
first one and the hair color as the

00:33:26,559 --> 00:33:30,720
second one

00:33:28,000 --> 00:33:33,440
except this i i think insertable also is

00:33:30,720 --> 00:33:35,600
ordered by uh

00:33:33,440 --> 00:33:37,279
order by the type and there's also

00:33:35,600 --> 00:33:41,679
queryable by name

00:33:37,279 --> 00:33:44,880
derive if you want to look into the

00:33:41,679 --> 00:33:44,880
if you want to use raw sql

00:33:45,360 --> 00:33:50,480
and these are like batches and

00:33:51,039 --> 00:33:54,240
and this is quite economic in some cases

00:33:52,880 --> 00:33:56,399
because

00:33:54,240 --> 00:33:57,840
it it can like you can use different

00:33:56,399 --> 00:34:02,000
types

00:33:57,840 --> 00:34:06,559
for example if you want to use

00:34:02,000 --> 00:34:10,480
if you want to use load right you can

00:34:06,559 --> 00:34:12,079
the decent documentation is quite good

00:34:10,480 --> 00:34:13,280
i mean on the normal ones it's quite

00:34:12,079 --> 00:34:14,800
good because it includes a lot of stuff

00:34:13,280 --> 00:34:16,320
but the guy is not

00:34:14,800 --> 00:34:18,000
the guy is not very comprehensive but

00:34:16,320 --> 00:34:19,440
the normal documentation is

00:34:18,000 --> 00:34:21,040
still still quite good when they have a

00:34:19,440 --> 00:34:24,320
lot of things recommended and a lot of

00:34:21,040 --> 00:34:24,320
stuff have the examples

00:34:24,399 --> 00:34:27,679
you can use the same load function to

00:34:26,000 --> 00:34:29,359
return

00:34:27,679 --> 00:34:32,159
uh you have written a single field so

00:34:29,359 --> 00:34:34,240
you can you want to return like a tuple

00:34:32,159 --> 00:34:35,919
also can and you want to return the

00:34:34,240 --> 00:34:40,879
struct okay and that's why this struct

00:34:35,919 --> 00:34:40,879
works like looks sort of like a tuple

00:34:41,200 --> 00:34:46,320
this is how you think of the queryable

00:34:42,879 --> 00:34:46,320
you can't think of it as a model

00:34:46,720 --> 00:34:50,960
and when you get started with diesel am

00:34:49,760 --> 00:34:54,240
i too fast or do i do

00:34:50,960 --> 00:34:57,280
you all have any questions up to now

00:34:54,240 --> 00:34:57,280
about the diesel

00:35:01,119 --> 00:35:08,720
uh so far is so fun

00:35:04,320 --> 00:35:11,760
so sofiane asked whether this is

00:35:08,720 --> 00:35:17,839
similar to tto

00:35:11,760 --> 00:35:17,839
video

00:35:24,240 --> 00:35:27,760
well i i guess we should just move on

00:35:27,119 --> 00:35:29,599
then

00:35:27,760 --> 00:35:31,280
we shall collect all the questions at

00:35:29,599 --> 00:35:33,520
the end

00:35:31,280 --> 00:35:34,960
we can answer all in one shot when you

00:35:33,520 --> 00:35:38,320
get started

00:35:34,960 --> 00:35:40,400
right lisa uses like a feature

00:35:38,320 --> 00:35:41,839
feature gate say if you want to use

00:35:40,400 --> 00:35:44,320
postgres you'll just specify the

00:35:41,839 --> 00:35:45,920
postgres in this feature and you want to

00:35:44,320 --> 00:35:47,760
support if you want to use sqlite you

00:35:45,920 --> 00:35:50,720
just use sqlite here

00:35:47,760 --> 00:35:52,079
and mysql as well you put my sql here so

00:35:50,720 --> 00:35:55,119
this is usually how you

00:35:52,079 --> 00:35:58,000
use diesel it also comes with a cli

00:35:55,119 --> 00:36:00,240
the ci you can do migration and you can

00:35:58,000 --> 00:36:00,240
do

00:36:00,960 --> 00:36:05,520
mainly i use it for migration and you

00:36:02,320 --> 00:36:05,520
can do code generation

00:36:08,560 --> 00:36:15,359
oh too big

00:36:12,480 --> 00:36:18,160
yeah you can do migration and code

00:36:15,359 --> 00:36:22,800
generation basically that's what it does

00:36:18,160 --> 00:36:26,000
can you print schema like this

00:36:22,800 --> 00:36:29,040
okay this is the so this is what

00:36:26,000 --> 00:36:32,160
the desert code generation so it

00:36:29,040 --> 00:36:35,200
what it does is in these two right

00:36:32,160 --> 00:36:37,200
you you write the you first

00:36:35,200 --> 00:36:39,200
how it works in decision is like you

00:36:37,200 --> 00:36:42,320
when you want to do migration

00:36:39,200 --> 00:36:45,760
you will need to write raw sql

00:36:42,320 --> 00:36:48,560
to do migration so in sql first

00:36:45,760 --> 00:36:48,880
you will do the thesis setup then you

00:36:48,560 --> 00:36:51,040
you

00:36:48,880 --> 00:36:52,640
create a migration and in the migration

00:36:51,040 --> 00:36:55,839
you need to write raw sql

00:36:52,640 --> 00:36:55,839
you need to write something like this

00:36:57,599 --> 00:37:00,960
so unlike other language uh disa doesn't

00:36:59,680 --> 00:37:02,800
provide like auto migrate

00:37:00,960 --> 00:37:04,640
as in like because they don't have the

00:37:02,800 --> 00:37:06,880
concept the it they say

00:37:04,640 --> 00:37:08,000
like models and it will automatically

00:37:06,880 --> 00:37:10,960
create the

00:37:08,000 --> 00:37:12,079
database models for you so what you need

00:37:10,960 --> 00:37:14,320
to do is you need to create the

00:37:12,079 --> 00:37:17,359
structures yourself

00:37:14,320 --> 00:37:18,640
like you need to run write the raw

00:37:17,359 --> 00:37:20,800
raw queries yourself to make sure the

00:37:18,640 --> 00:37:23,920
types is correct and others

00:37:20,800 --> 00:37:25,520
is correct after you write this so

00:37:23,920 --> 00:37:27,040
uh you just run the you can run the

00:37:25,520 --> 00:37:30,320
migration this

00:37:27,040 --> 00:37:33,520
will run the migration and then

00:37:30,320 --> 00:37:36,960
like ah it's already run

00:37:33,520 --> 00:37:38,640
your real redo yeah so

00:37:36,960 --> 00:37:41,200
this will run the migration and then you

00:37:38,640 --> 00:37:41,200
can do like

00:37:41,839 --> 00:37:51,839
and then what you can do is generate

00:37:44,240 --> 00:37:51,839
let's generate

00:37:54,640 --> 00:37:59,040
okay never mind don't follow this

00:37:57,760 --> 00:38:00,800
of course you can if you are interested

00:37:59,040 --> 00:38:01,520
you can read the guide getting started

00:38:00,800 --> 00:38:06,320
guide

00:38:01,520 --> 00:38:06,320
it's quite simple and

00:38:09,280 --> 00:38:13,040
so what it does is usually you print a

00:38:11,680 --> 00:38:15,200
schema

00:38:13,040 --> 00:38:18,000
and then you have you can see in my

00:38:15,200 --> 00:38:19,680
schema it's generated

00:38:18,000 --> 00:38:21,280
this isn't the normal practice in russ

00:38:19,680 --> 00:38:22,079
where you generate ras code usually you

00:38:21,280 --> 00:38:25,760
just write

00:38:22,079 --> 00:38:28,079
macro yourself but this does it this way

00:38:25,760 --> 00:38:30,560
where they generate this these are the

00:38:28,079 --> 00:38:32,079
table is like a diesel

00:38:30,560 --> 00:38:34,480
dsl you don't usually write this

00:38:32,079 --> 00:38:36,160
yourself

00:38:34,480 --> 00:38:38,079
so why does it these are all generated

00:38:36,160 --> 00:38:39,680
by diesel

00:38:38,079 --> 00:38:42,880
they're running by this as well oh no

00:38:39,680 --> 00:38:42,880
yeah it's generated by diesel

00:38:44,400 --> 00:38:50,960
just a request can you have it

00:38:48,400 --> 00:38:52,160
can you enlarge the text size a bit

00:38:50,960 --> 00:39:01,839
because

00:38:52,160 --> 00:39:01,839
it's very hard to read from the screen

00:39:02,000 --> 00:39:14,400
okay just a fair bit

00:39:06,720 --> 00:39:17,599
this time

00:39:14,400 --> 00:39:20,000
okay so uh

00:39:17,599 --> 00:39:21,599
why so maybe you can look into what is

00:39:20,000 --> 00:39:25,920
the generator structures

00:39:21,599 --> 00:39:25,920
in diesel is the local documentation

00:39:26,839 --> 00:39:29,839
hey

00:39:31,520 --> 00:39:33,760
uh

00:39:36,960 --> 00:39:43,839
hello okay this is

00:39:58,640 --> 00:40:02,480
okay so these are the generator

00:40:00,800 --> 00:40:05,520
structures that i have

00:40:02,480 --> 00:40:08,000
no schema so

00:40:05,520 --> 00:40:11,119
it it will generate some dsl like this

00:40:08,000 --> 00:40:14,319
so you can use it like uh

00:40:11,119 --> 00:40:17,920
you okay you can use it like

00:40:14,319 --> 00:40:21,680
like this like the one show

00:40:17,920 --> 00:40:25,839
so i have written like uh a few series

00:40:21,680 --> 00:40:27,359
of this i have some experiments

00:40:25,839 --> 00:40:29,440
so maybe i'll share a bit on the

00:40:27,359 --> 00:40:31,520
experimentation so

00:40:29,440 --> 00:40:33,680
uh when i get into diesel the hard thing

00:40:31,520 --> 00:40:35,710
is like

00:40:33,680 --> 00:40:37,359
the learning learning the different

00:40:35,710 --> 00:40:39,440
[Music]

00:40:37,359 --> 00:40:40,480
you need to the few things you need to

00:40:39,440 --> 00:40:42,880
know at first is like you need to

00:40:40,480 --> 00:40:42,880
understand

00:40:44,400 --> 00:40:47,040
your font size

00:40:47,920 --> 00:40:51,839
okay so i have a just now the example

00:40:50,800 --> 00:40:53,839
that i showed you have a structure like

00:40:51,839 --> 00:40:57,200
this

00:40:53,839 --> 00:41:00,240
and then i want to do a join so i i have

00:40:57,200 --> 00:41:02,160
to do some drawing like this

00:41:00,240 --> 00:41:04,560
so these will have like by default you

00:41:02,160 --> 00:41:07,839
you can don't do select

00:41:04,560 --> 00:41:09,520
and then you can uh you can have that

00:41:07,839 --> 00:41:12,160
explicit select or empty select and you

00:41:09,520 --> 00:41:13,599
can do something like this

00:41:12,160 --> 00:41:16,000
and then it will generate some queries

00:41:13,599 --> 00:41:16,000
like this

00:41:18,400 --> 00:41:25,119
hey so long okay

00:41:21,599 --> 00:41:25,119
so uh

00:41:25,520 --> 00:41:29,119
what what i want to do here is i want to

00:41:28,400 --> 00:41:32,880
like

00:41:29,119 --> 00:41:36,400
create the table i want to find

00:41:32,880 --> 00:41:40,240
based on the users that have name

00:41:36,400 --> 00:41:42,720
john then

00:41:40,240 --> 00:41:44,720
i want to select the related commands or

00:41:42,720 --> 00:41:46,640
post

00:41:44,720 --> 00:41:48,640
and the users i'm going to select the

00:41:46,640 --> 00:41:50,319
comments body what what this user

00:41:48,640 --> 00:41:52,880
commented and

00:41:50,319 --> 00:41:54,720
what on what post this user commented

00:41:52,880 --> 00:41:58,079
and on

00:41:54,720 --> 00:42:00,079
the username because yeah it's john

00:41:58,079 --> 00:42:01,760
so all you can see here is this is the

00:42:00,079 --> 00:42:06,880
generator dsl yeah

00:42:01,760 --> 00:42:06,880
user's name as in like here

00:42:07,040 --> 00:42:10,000
hello schema

00:42:10,560 --> 00:42:13,040
users

00:42:14,560 --> 00:42:19,040
so these are the generated one and then

00:42:17,599 --> 00:42:21,280
at first you might be confused here

00:42:19,040 --> 00:42:24,400
because here if you

00:42:21,280 --> 00:42:25,280
if you import star here hello schema

00:42:24,400 --> 00:42:28,079
uses dsl

00:42:25,280 --> 00:42:29,520
star if you import here then you'll be a

00:42:28,079 --> 00:42:32,480
bit confusing such that

00:42:29,520 --> 00:42:34,880
because you have this is re-exported as

00:42:32,480 --> 00:42:38,480
users

00:42:34,880 --> 00:42:40,560
so your user table is now called

00:42:38,480 --> 00:42:42,800
like for example users table is now

00:42:40,560 --> 00:42:42,800
called

00:42:42,839 --> 00:42:48,000
users

00:42:44,960 --> 00:42:49,520
is a bit confusing at first such that

00:42:48,000 --> 00:42:52,000
if you have multiple tables then you

00:42:49,520 --> 00:42:53,680
wouldn't want to do this

00:42:52,000 --> 00:42:56,720
because the examples in digital

00:42:53,680 --> 00:42:59,839
documentation shows both

00:42:56,720 --> 00:43:03,680
way is to use like

00:42:59,839 --> 00:43:06,880
import hello schema users

00:43:03,680 --> 00:43:06,880
and then use users table

00:43:11,280 --> 00:43:13,839
and the other

00:43:28,800 --> 00:43:41,839
are you there

00:43:44,240 --> 00:43:55,839
ivan i can't hear you from here

00:44:04,500 --> 00:44:08,720
[Laughter]

00:44:06,839 --> 00:44:12,079
ah

00:44:08,720 --> 00:44:12,079
someone is gone again

00:44:12,960 --> 00:44:15,599
i'm on

00:44:16,880 --> 00:44:24,560
i guess ivan is still having

00:44:20,839 --> 00:44:24,560
his never problem

00:44:26,480 --> 00:44:33,440
we shall wait for him to come back

00:44:31,760 --> 00:44:35,760
meanwhile if you are interested in

00:44:33,440 --> 00:44:38,560
joining the call

00:44:35,760 --> 00:44:38,560
link is here

00:44:40,800 --> 00:44:44,480
let's wait for about two minutes for him

00:44:43,200 --> 00:44:46,400
to come back

00:44:44,480 --> 00:44:51,839
i probably should start a countdown

00:44:46,400 --> 00:44:51,839
timer some somewhere

00:45:00,240 --> 00:45:06,480
i mean you should start paying your

00:45:03,280 --> 00:45:19,839
your bandwidth bills

00:45:06,480 --> 00:45:19,839
and your your broadband bills

00:45:45,920 --> 00:46:01,839
evan where are you

00:46:16,480 --> 00:46:21,040
hello hello okay maybe i i i don't turn

00:46:19,440 --> 00:46:23,920
on video

00:46:21,040 --> 00:46:26,480
i just skip lazy to get my phone back

00:46:23,920 --> 00:46:26,480
for review

00:46:27,520 --> 00:46:31,280
and i'm okay already right i have sound

00:46:30,400 --> 00:46:33,520
yep

00:46:31,280 --> 00:46:33,520
yes

00:46:34,800 --> 00:46:45,139
so uh present now

00:46:42,000 --> 00:46:45,139
[Music]

00:46:46,319 --> 00:46:52,400
i think just now i talk until the

00:46:49,680 --> 00:46:52,400
i believe here

00:46:53,119 --> 00:46:58,319
so this is a dsl to do inner join so

00:46:55,920 --> 00:47:01,359
they have dsl for a lot of things

00:46:58,319 --> 00:47:02,319
like uh you can do inner join and you

00:47:01,359 --> 00:47:05,280
can even do count

00:47:02,319 --> 00:47:05,280
recently i do count

00:47:05,440 --> 00:47:10,880
and and then there's also a function to

00:47:07,920 --> 00:47:13,280
do count

00:47:10,880 --> 00:47:15,200
so you can do like select count dot

00:47:13,280 --> 00:47:17,520
first so that has support for something

00:47:15,200 --> 00:47:17,520
like this

00:47:20,079 --> 00:47:25,839
hello okay and you can even do like uh

00:47:32,559 --> 00:47:36,839
so this is like update from this is that

00:47:34,640 --> 00:47:39,599
i'm trying to do like an update from

00:47:36,839 --> 00:47:43,440
experimentation

00:47:39,599 --> 00:47:43,440
and then next i wanted to try like a

00:47:45,680 --> 00:47:53,599
multiple drawing experiment no wrong

00:47:50,160 --> 00:47:55,680
and and then and then i want to do like

00:47:53,599 --> 00:47:58,880
um

00:47:55,680 --> 00:48:01,839
update from so

00:47:58,880 --> 00:48:03,119
i want to update from like let's say

00:48:01,839 --> 00:48:05,680
update post

00:48:03,119 --> 00:48:06,480
set something wear something this is a

00:48:05,680 --> 00:48:09,520
simple

00:48:06,480 --> 00:48:11,040
in diesel they considered they

00:48:09,520 --> 00:48:13,440
considered this as a simple

00:48:11,040 --> 00:48:13,440
version

00:48:14,720 --> 00:48:18,800
okay and and then

00:48:19,040 --> 00:48:21,839
see your sound

00:48:23,839 --> 00:48:29,040
hello yes

00:48:27,200 --> 00:48:30,720
why are you showing the youtube so they

00:48:29,040 --> 00:48:32,480
consider this as a simple example you

00:48:30,720 --> 00:48:34,240
can see the binds here

00:48:32,480 --> 00:48:36,800
like in this one is just now the debug

00:48:34,240 --> 00:48:39,359
query that you will see

00:48:36,800 --> 00:48:40,079
so what you do here is in the user table

00:48:39,359 --> 00:48:44,400
you select

00:48:40,079 --> 00:48:47,520
the user id and then you do a filter

00:48:44,400 --> 00:48:52,319
and then uh you

00:48:47,520 --> 00:48:55,520
you can filter it correctly like using

00:48:52,319 --> 00:48:57,920
and then this is doing like a sub query

00:48:55,520 --> 00:49:01,520
already this

00:48:57,920 --> 00:49:04,960
yeah equal to any sub query

00:49:01,520 --> 00:49:08,160
so what it does is uh this part right

00:49:04,960 --> 00:49:12,000
is like a post user id equal to any

00:49:08,160 --> 00:49:12,400
it's post user id and then equal to any

00:49:12,000 --> 00:49:15,520
is

00:49:12,400 --> 00:49:18,720
within this part this is a sub query so

00:49:15,520 --> 00:49:18,720
this can also do sub query

00:49:19,200 --> 00:49:24,640
and then and then it works

00:49:24,800 --> 00:49:28,160
and here yeah here i noticed that what i

00:49:27,520 --> 00:49:31,040
learned is

00:49:28,160 --> 00:49:33,200
the dsl part is a bit confusing at first

00:49:31,040 --> 00:49:35,440
but after you get to know the docs

00:49:33,200 --> 00:49:37,520
like you get to know oh there's a you

00:49:35,440 --> 00:49:41,440
need to differentiate between

00:49:37,520 --> 00:49:45,440
users dsl and

00:49:41,440 --> 00:49:48,800
like the hello schema users and

00:49:45,440 --> 00:49:50,160
hello schema users dsl that part so

00:49:48,800 --> 00:49:52,000
at first you might be a bit confused on

00:49:50,160 --> 00:49:55,119
that but uh there's not an

00:49:52,000 --> 00:49:57,119
issue there so the error will be a bit

00:49:55,119 --> 00:49:59,440
confusing

00:49:57,119 --> 00:50:00,720
there at first but once you get to know

00:49:59,440 --> 00:50:03,760
it you know that

00:50:00,720 --> 00:50:06,400
you use this when you are dealing with

00:50:03,760 --> 00:50:07,200
multiple tables and you use this when

00:50:06,400 --> 00:50:09,280
you

00:50:07,200 --> 00:50:12,000
use a halo schema use this when you're

00:50:09,280 --> 00:50:15,119
dealing with like a single

00:50:12,000 --> 00:50:15,119
single table

00:50:16,800 --> 00:50:19,440
it's online

00:50:20,720 --> 00:50:26,559
and then also the other experiments like

00:50:24,839 --> 00:50:29,359
join

00:50:26,559 --> 00:50:29,359
drawing not exist

00:50:29,599 --> 00:50:35,440
wrong am i wrong so what i want to do

00:50:32,960 --> 00:50:40,800
here is uh

00:50:35,440 --> 00:50:43,040
i want to do like undefined in one table

00:50:40,800 --> 00:50:44,800
and i i want to find that so there's two

00:50:43,040 --> 00:50:47,680
tables i want to find in one table that

00:50:44,800 --> 00:50:47,680
doesn't exist

00:50:47,760 --> 00:50:51,440
find stuff from two tables and

00:50:52,160 --> 00:50:55,839
how to reword this

00:50:58,640 --> 00:51:05,040
okay so i have like post

00:51:02,400 --> 00:51:06,960
and i have comments so i want to find

00:51:05,040 --> 00:51:10,400
all the comments that doesn't have

00:51:06,960 --> 00:51:11,599
any post oh

00:51:10,400 --> 00:51:14,079
oh the post that doesn't have any

00:51:11,599 --> 00:51:18,480
comments

00:51:14,079 --> 00:51:20,880
so it does select from the post

00:51:18,480 --> 00:51:23,520
and then we will find that all those

00:51:20,880 --> 00:51:25,760
that doesn't have uh

00:51:23,520 --> 00:51:28,480
you'll find all those that doesn't have

00:51:25,760 --> 00:51:32,480
any id so you see that it generates

00:51:28,480 --> 00:51:34,720
the generated correspond okay

00:51:32,480 --> 00:51:36,000
the post table you can do a left join

00:51:34,720 --> 00:51:39,280
here these are two

00:51:36,000 --> 00:51:41,520
left joint correctly but diesel doesn't

00:51:39,280 --> 00:51:43,280
support the composite join

00:51:41,520 --> 00:51:46,800
composite joint is like if you don't

00:51:43,280 --> 00:51:51,839
know composite composite joint is like

00:51:46,800 --> 00:51:51,839
something like this

00:52:03,440 --> 00:52:05,839
users

00:52:06,800 --> 00:52:09,200
and then

00:52:09,839 --> 00:52:12,720
uh comments

00:52:12,880 --> 00:52:16,960
this is like uh composite join but this

00:52:15,520 --> 00:52:18,480
doesn't support this yet

00:52:16,960 --> 00:52:20,960
they also say it's for performance

00:52:18,480 --> 00:52:24,240
reason so these are only support

00:52:20,960 --> 00:52:26,720
left join and inner join

00:52:24,240 --> 00:52:29,119
like left join inner join but there's no

00:52:26,720 --> 00:52:31,440
right join

00:52:29,119 --> 00:52:32,720
i think maybe it's not required so they

00:52:31,440 --> 00:52:35,200
didn't support

00:52:32,720 --> 00:52:35,200
right join

00:52:36,720 --> 00:52:41,040
and then yeah so basically you do

00:52:38,880 --> 00:52:44,480
something like this

00:52:41,040 --> 00:52:47,200
post tables so uh

00:52:44,480 --> 00:52:50,800
you can do like the tape you can this is

00:52:47,200 --> 00:52:50,800
the original dslr way i use the

00:52:53,280 --> 00:52:57,599
it's like use schema post and then you

00:52:55,760 --> 00:52:59,839
just use this post table

00:52:57,599 --> 00:53:01,680
and you can do post title you can do

00:52:59,839 --> 00:53:03,599
post id

00:53:01,680 --> 00:53:06,240
and then like within the dsl right

00:53:03,599 --> 00:53:07,920
because it implements some trade so

00:53:06,240 --> 00:53:09,520
in detail you need to learn how to write

00:53:07,920 --> 00:53:12,480
the trades

00:53:09,520 --> 00:53:12,480
like comments

00:53:12,640 --> 00:53:16,640
this is comments right and then it will

00:53:14,640 --> 00:53:19,839
have all the columns

00:53:16,640 --> 00:53:21,280
because you can see that it re-exports

00:53:19,839 --> 00:53:25,119
all the columns right so you can use

00:53:21,280 --> 00:53:26,640
this all these columns directly id

00:53:25,119 --> 00:53:28,640
so you need to write the sum of the

00:53:26,640 --> 00:53:31,200
trades is useful here

00:53:28,640 --> 00:53:32,559
like for example you can see that

00:53:31,200 --> 00:53:35,119
there's quite a lot of trade being

00:53:32,559 --> 00:53:35,119
implemented

00:53:39,119 --> 00:53:42,960
for example i

00:53:45,920 --> 00:53:57,839
yeah you can see expression methods

00:54:08,000 --> 00:54:12,400
so you'll see based on documentation

00:54:10,160 --> 00:54:14,720
just search for something like this

00:54:12,400 --> 00:54:17,359
and then this is for the field and then

00:54:14,720 --> 00:54:21,599
you can search for is now

00:54:17,359 --> 00:54:25,839
and these have like all the like equal

00:54:21,599 --> 00:54:25,839
rather than doing like uh string

00:54:26,000 --> 00:54:29,280
rather than doing string equal you'll

00:54:27,359 --> 00:54:30,400
see like uh equal using the function

00:54:29,280 --> 00:54:32,079
methods

00:54:30,400 --> 00:54:34,000
on expression methods so you can call it

00:54:32,079 --> 00:54:37,760
like name equal

00:54:34,000 --> 00:54:41,440
and e something like this

00:54:37,760 --> 00:54:41,440
also support like excluded like

00:54:41,680 --> 00:54:45,040
even with i tried doing upstairs it also

00:54:43,760 --> 00:54:46,720
support absurd

00:54:45,040 --> 00:54:48,799
and there's a one that excluded thing

00:54:46,720 --> 00:54:50,400
here

00:54:48,799 --> 00:54:53,200
so this is like how we want to do

00:54:50,400 --> 00:54:54,640
something like this

00:54:53,200 --> 00:54:57,920
and then this is something harder

00:54:54,640 --> 00:54:59,839
already i tried doing offset

00:54:57,920 --> 00:55:01,520
so what this one do what in this what i

00:54:59,839 --> 00:55:04,559
want to do is

00:55:01,520 --> 00:55:05,200
like uh so up till this point when i get

00:55:04,559 --> 00:55:07,359
into upset

00:55:05,200 --> 00:55:09,599
so i learn like diesel oh it's a lot

00:55:07,359 --> 00:55:12,079
easier

00:55:09,599 --> 00:55:13,359
a lot easier compared to the past where

00:55:12,079 --> 00:55:15,440
i had to

00:55:13,359 --> 00:55:17,200
figure out a lot of stuff so right now

00:55:15,440 --> 00:55:17,839
this time it is a lot easier to do stuff

00:55:17,200 --> 00:55:21,760
already

00:55:17,839 --> 00:55:24,799
when especially when

00:55:21,760 --> 00:55:27,520
it follows the default values so for

00:55:24,799 --> 00:55:27,520
inserting right

00:55:27,599 --> 00:55:31,359
so for inserting usually you do

00:55:33,520 --> 00:55:36,240
insert into

00:55:37,920 --> 00:55:41,680
so actually you do this for inserting

00:55:39,760 --> 00:55:43,040
insert into but for select right you

00:55:41,680 --> 00:55:46,079
don't do like select

00:55:43,040 --> 00:55:48,079
from no you don't you don't usually

00:55:46,079 --> 00:55:49,599
don't do this

00:55:48,079 --> 00:55:51,839
there are some functions that you don't

00:55:49,599 --> 00:55:53,520
use it in diesel such that

00:55:51,839 --> 00:55:55,359
some in some cases you may need to use

00:55:53,520 --> 00:55:58,720
it

00:55:55,359 --> 00:56:00,839
so this like insert into you can

00:55:58,720 --> 00:56:02,480
you can see like you can insert into the

00:56:00,839 --> 00:56:06,079
table but

00:56:02,480 --> 00:56:07,599
i i don't want to just insert into oh so

00:56:06,079 --> 00:56:09,680
okay so here's also one thing where i

00:56:07,599 --> 00:56:12,720
like is in values right

00:56:09,680 --> 00:56:16,480
you can see these values you can use

00:56:12,720 --> 00:56:18,160
to post you can use like name equals to

00:56:16,480 --> 00:56:19,920
this

00:56:18,160 --> 00:56:21,920
which means that you can you are only

00:56:19,920 --> 00:56:24,319
inserting name

00:56:21,920 --> 00:56:25,280
so if users tables only contain name you

00:56:24,319 --> 00:56:29,040
can do like this

00:56:25,280 --> 00:56:30,880
name equal tools this is the original

00:56:29,040 --> 00:56:33,440
developer of diesel

00:56:30,880 --> 00:56:34,160
one of the main developer there or you

00:56:33,440 --> 00:56:38,880
can also use

00:56:34,160 --> 00:56:41,839
tuples where you can do like a new user

00:56:38,880 --> 00:56:44,240
id equals to one of course this is not

00:56:41,839 --> 00:56:44,559
like the normal equal you see this is

00:56:44,240 --> 00:56:47,680
not

00:56:44,559 --> 00:56:48,400
the in the where course not the not not

00:56:47,680 --> 00:56:52,000
the

00:56:48,400 --> 00:56:56,839
id equals to in a way but this is the id

00:56:52,000 --> 00:56:58,720
means one and name is

00:56:56,839 --> 00:57:02,000
john and then

00:56:58,720 --> 00:57:04,480
values and you can also use a

00:57:02,000 --> 00:57:05,680
you can even use a vector you know if

00:57:04,480 --> 00:57:09,440
you want to insert

00:57:05,680 --> 00:57:13,119
like batch users right

00:57:09,440 --> 00:57:15,520
and i can insert it the same way

00:57:13,119 --> 00:57:18,160
and you just use the same thing and

00:57:15,520 --> 00:57:19,520
that's quite interesting i believe

00:57:18,160 --> 00:57:21,280
and then you can also insert with

00:57:19,520 --> 00:57:21,760
structures but the structures need to

00:57:21,280 --> 00:57:24,240
derive

00:57:21,760 --> 00:57:25,119
insertable and you need to have code

00:57:24,240 --> 00:57:26,720
table name

00:57:25,119 --> 00:57:28,240
but like if you miss something like this

00:57:26,720 --> 00:57:30,480
then error will be quite confusing at

00:57:28,240 --> 00:57:30,480
first

00:57:30,559 --> 00:57:33,599
because the error doesn't sometimes

00:57:31,760 --> 00:57:36,960
doesn't point to the correct place

00:57:33,599 --> 00:57:41,839
but if you miss this and

00:57:36,960 --> 00:57:41,839
yeah this is how roughly how it's done

00:57:42,960 --> 00:57:48,400
okay and one thing to note is uh diesel

00:57:46,880 --> 00:57:50,400
because this and code stuff in the type

00:57:48,400 --> 00:57:54,000
right it even has like different

00:57:50,400 --> 00:57:56,240
scripts for different back ends for

00:57:54,000 --> 00:57:59,599
example

00:57:56,240 --> 00:58:03,280
returning they even have a trade

00:57:59,599 --> 00:58:05,200
call support returning cost

00:58:03,280 --> 00:58:07,119
which means that the back end supports

00:58:05,200 --> 00:58:09,280
returning like for example

00:58:07,119 --> 00:58:10,319
uh sqlite doesn't supports returning

00:58:09,280 --> 00:58:11,920
right

00:58:10,319 --> 00:58:14,799
returning is something like when you

00:58:11,920 --> 00:58:17,680
query right you can get back the

00:58:14,799 --> 00:58:20,559
like when you insert you can get back

00:58:17,680 --> 00:58:23,680
the original data

00:58:20,559 --> 00:58:26,240
like uh like you can give it original id

00:58:23,680 --> 00:58:27,920
what you have in what you inserted and

00:58:26,240 --> 00:58:31,119
you can get back the original

00:58:27,920 --> 00:58:34,400
fields that you insert

00:58:31,119 --> 00:58:36,079
for example when you do execute when you

00:58:34,400 --> 00:58:38,799
want to insert your i think you do

00:58:36,079 --> 00:58:38,799
execute right

00:58:42,400 --> 00:59:04,079
now in examples yeah you do execute

00:58:50,319 --> 00:59:07,359
yeah so it'll execute and

00:59:04,079 --> 00:59:07,359
i think some of these have

00:59:08,720 --> 00:59:15,680
yeah like some some of this part right

00:59:12,160 --> 00:59:17,440
because sql sqlite doesn't have doesn't

00:59:15,680 --> 00:59:18,319
support returning so you can't do a

00:59:17,440 --> 00:59:19,760
return

00:59:18,319 --> 00:59:21,440
like you can't you can't get the

00:59:19,760 --> 00:59:24,640
inserted row in this case

00:59:21,440 --> 00:59:26,640
for sqlite that's why i remember

00:59:24,640 --> 00:59:29,760
that's why that's why there's no

00:59:26,640 --> 00:59:29,760
implementers for this

00:59:30,559 --> 00:59:35,520
that's why there's no implementers but

00:59:32,000 --> 00:59:35,520
uh for like something like

00:59:35,760 --> 00:59:39,599
something like the postgres supports

00:59:38,559 --> 00:59:41,520
this

00:59:39,599 --> 00:59:43,200
so like in different if you use

00:59:41,520 --> 00:59:44,559
different backends right

00:59:43,200 --> 00:59:46,400
some of the features might not be there

00:59:44,559 --> 00:59:48,480
so some of the parts

00:59:46,400 --> 00:59:49,680
you can't use the same you can use the

00:59:48,480 --> 00:59:52,480
same rasco for everything

00:59:49,680 --> 00:59:53,839
because they even support like diff even

00:59:52,480 --> 00:59:54,559
for different features they even

00:59:53,839 --> 00:59:57,520
implement it

00:59:54,559 --> 00:59:57,520
in using types

00:59:57,599 --> 01:00:01,280
so there's something quite mind-blowing

00:59:59,599 --> 01:00:04,160
to me when i first saw

01:00:01,280 --> 01:00:05,599
they even have other supports like a

01:00:04,160 --> 01:00:08,319
support default keyword

01:00:05,599 --> 01:00:09,119
example on complete yeah this support on

01:00:08,319 --> 01:00:11,760
conflict

01:00:09,119 --> 01:00:13,200
so right now uh on config is only

01:00:11,760 --> 01:00:16,880
implemented for

01:00:13,200 --> 01:00:18,480
mysql no postgres and sqlite

01:00:16,880 --> 01:00:19,920
although my sql have it last time but

01:00:18,480 --> 01:00:22,079
they haven't implemented it yet

01:00:19,920 --> 01:00:22,960
so it means that they don't have this

01:00:22,079 --> 01:00:26,160
for mysql

01:00:22,960 --> 01:00:28,799
until someone implements it so this is

01:00:26,160 --> 01:00:29,839
upset so you can do on conflict and they

01:00:28,799 --> 01:00:33,520
can do update

01:00:29,839 --> 01:00:36,960
but i find that there is a food gun here

01:00:33,520 --> 01:00:40,799
uh what chilean want to hear is it

01:00:36,960 --> 01:00:44,720
is it still there okay so because

01:00:40,799 --> 01:00:46,640
uh absurd is new so on conflict

01:00:44,720 --> 01:00:47,839
what you can do is you can put anything

01:00:46,640 --> 01:00:51,599
here

01:00:47,839 --> 01:00:54,799
uh you you might you can put that even

01:00:51,599 --> 01:00:56,000
because the id is absurd right on

01:00:54,799 --> 01:00:59,040
conflict supposed to be

01:00:56,000 --> 01:01:01,359
something that is either a primary key

01:00:59,040 --> 01:01:02,079
or it's a unique value but because right

01:01:01,359 --> 01:01:04,559
now they don't have

01:01:02,079 --> 01:01:05,920
meta data information on the type

01:01:04,559 --> 01:01:09,119
whether that type is

01:01:05,920 --> 01:01:11,680
a primary key or a unique value

01:01:09,119 --> 01:01:12,240
so basically they accept all the columns

01:01:11,680 --> 01:01:15,200
here

01:01:12,240 --> 01:01:16,079
and i i tried putting name here and then

01:01:15,200 --> 01:01:19,200
you

01:01:16,079 --> 01:01:21,839
you'll get a runtime error for this

01:01:19,200 --> 01:01:21,839
like uh

01:01:22,640 --> 01:01:26,559
this project is this

01:01:31,839 --> 01:01:35,839
for these experimentations right

01:01:37,599 --> 01:01:40,960
for for this experimentation i have like

01:01:39,280 --> 01:01:44,720
two binaries

01:01:40,960 --> 01:01:47,119
uh created because i have a bin that

01:01:44,720 --> 01:01:48,319
call another variable called iit to

01:01:47,119 --> 01:01:51,119
initialize the data

01:01:48,319 --> 01:01:52,400
so i want to attach insertion so this is

01:01:51,119 --> 01:01:56,079
like how i

01:01:52,400 --> 01:01:59,599
insert the data into that so there's a

01:01:56,079 --> 01:02:02,400
i just create like vectors

01:01:59,599 --> 01:02:03,440
and then just insert execute wrap and

01:02:02,400 --> 01:02:06,960
insert

01:02:03,440 --> 01:02:11,200
and then just insert another and then

01:02:06,960 --> 01:02:14,720
just insert again so this is how

01:02:11,200 --> 01:02:17,359
i test it and then

01:02:14,720 --> 01:02:18,400
i have another main to try out the

01:02:17,359 --> 01:02:20,319
queries that i want to do

01:02:18,400 --> 01:02:21,359
experimentation on of course i just keep

01:02:20,319 --> 01:02:25,359
printing out the

01:02:21,359 --> 01:02:31,119
queries every time i run it

01:02:25,359 --> 01:02:31,119
excuse me so no such tables

01:02:33,520 --> 01:02:36,640
so i didn't run my vision

01:02:37,119 --> 01:02:43,359
i run the iip and i run the hello so you

01:02:41,119 --> 01:02:48,240
can see i am inserting this

01:02:43,359 --> 01:02:52,559
into uh so this is upset so if

01:02:48,240 --> 01:02:55,359
if the id is already there

01:02:52,559 --> 01:02:55,359
right because i'm

01:02:56,559 --> 01:03:00,000
because i'm inserting the id2 right

01:02:58,160 --> 01:03:03,839
because i id2 is already there so

01:03:00,000 --> 01:03:03,839
it will change the value to john

01:03:04,480 --> 01:03:07,520
so i'm selecting

01:03:08,000 --> 01:03:14,000
so roughly like this and if i

01:03:11,119 --> 01:03:14,000
change this to

01:03:15,440 --> 01:03:21,599
like i said name it it will run

01:03:18,480 --> 01:03:23,039
but then you get a runtime error instead

01:03:21,599 --> 01:03:24,079
of compile time error like i mentioned

01:03:23,039 --> 01:03:26,720
before

01:03:24,079 --> 01:03:27,599
but uh i think it only happens for this

01:03:26,720 --> 01:03:31,839
part

01:03:27,599 --> 01:03:31,839
because i didn't get to see

01:03:34,880 --> 01:03:39,680
okay you you can see it's a full gun but

01:03:39,839 --> 01:03:46,240
i don't think this guy is so serious

01:03:44,400 --> 01:03:48,079
okay right now mine so you'll see that

01:03:46,240 --> 01:03:50,799
you get runtime error

01:03:48,079 --> 01:03:51,119
rather than a compound time error so you

01:03:50,799 --> 01:03:53,200
get

01:03:51,119 --> 01:03:54,240
inserts because uh but i think adding

01:03:53,200 --> 01:03:56,960
support

01:03:54,240 --> 01:03:58,480
for this to move this runtime error to a

01:03:56,960 --> 01:04:01,599
compiler time error is

01:03:58,480 --> 01:04:03,119
not that hard i don't know i didn't try

01:04:01,599 --> 01:04:06,000
maybe i'll try doing it because this

01:04:03,119 --> 01:04:06,000
auto is not doing that

01:04:06,799 --> 01:04:10,880
so this is the program that i mentioned

01:04:09,280 --> 01:04:13,599
and then

01:04:10,880 --> 01:04:16,559
okay then we have another okay last

01:04:13,599 --> 01:04:16,559
project that i work on

01:04:16,960 --> 01:04:20,559
okay so this last project i start facing

01:04:19,039 --> 01:04:24,000
some issues

01:04:20,559 --> 01:04:24,960
i what i wanted to do i want to do group

01:04:24,000 --> 01:04:27,599
by

01:04:24,960 --> 01:04:29,359
okay group buy is new in diesel so i

01:04:27,599 --> 01:04:30,640
need to use nightly for that or same as

01:04:29,359 --> 01:04:32,079
the last project i also need to use

01:04:30,640 --> 01:04:34,720
lightning for that

01:04:32,079 --> 01:04:36,400
nightly diesel because the last release

01:04:34,720 --> 01:04:38,319
is 1.4 release

01:04:36,400 --> 01:04:39,520
which doesn't have a group buy and other

01:04:38,319 --> 01:04:40,000
stuff so they are still open for

01:04:39,520 --> 01:04:43,520
feedback

01:04:40,000 --> 01:04:47,200
right now so i'm trying to do is

01:04:43,520 --> 01:04:48,960
i wanted to do a group buy and count

01:04:47,200 --> 01:04:51,119
so i want to find that based on this

01:04:48,960 --> 01:04:54,160
user for

01:04:51,119 --> 01:04:58,160
based on the user for this for

01:04:54,160 --> 01:04:58,160
grouped by the

01:04:58,319 --> 01:05:02,799
user and post how many based on okay

01:05:03,200 --> 01:05:09,839
let me let me think okay based on this

01:05:06,160 --> 01:05:09,839
tree right

01:05:12,240 --> 01:05:17,680
so based on comments no group so i'm

01:05:15,520 --> 01:05:19,039
grouping by this group by post id and

01:05:17,680 --> 01:05:22,720
user id so

01:05:19,039 --> 01:05:26,000
for each post and user how many

01:05:22,720 --> 01:05:28,799
uh how many comments are there for that

01:05:26,000 --> 01:05:29,280
post end user based on the post end user

01:05:28,799 --> 01:05:31,440
so

01:05:29,280 --> 01:05:33,599
like for example in one post a user may

01:05:31,440 --> 01:05:35,920
have commented multiple times

01:05:33,599 --> 01:05:36,880
so i want to count in total how much how

01:05:35,920 --> 01:05:38,640
many is that

01:05:36,880 --> 01:05:41,599
so at first i i want to try something

01:05:38,640 --> 01:05:41,599
like uh

01:05:41,920 --> 01:05:46,799
i even tried something like this

01:05:44,960 --> 01:05:48,640
which is not already as not a balance

01:05:46,799 --> 01:05:50,319
equal but this doesn't compound so

01:05:48,640 --> 01:05:54,880
that's expected

01:05:50,319 --> 01:05:54,880
then i do i want to do something like uh

01:05:55,680 --> 01:06:00,559
so i want to try this indeed in diesel

01:05:57,760 --> 01:06:00,559
but it didn't work

01:06:01,039 --> 01:06:05,839
so it's something like uh this

01:06:10,400 --> 01:06:13,920
so i have to do something like this in

01:06:12,160 --> 01:06:16,319
comments table

01:06:13,920 --> 01:06:18,160
i want to group by this and select and

01:06:16,319 --> 01:06:20,400
it didn't work

01:06:18,160 --> 01:06:20,400
and

01:06:28,000 --> 01:06:34,960
it didn't compile

01:06:32,319 --> 01:06:34,960
they say it

01:06:35,680 --> 01:06:40,559
because they say desert doesn't support

01:06:36,960 --> 01:06:43,920
like this so you see like a bunch of

01:06:40,559 --> 01:06:43,920
type errors there's a lot

01:06:44,880 --> 01:06:50,480
because this is not supported why

01:06:48,160 --> 01:06:53,280
because i want to i get the account in

01:06:50,480 --> 01:06:54,960
the sub query already

01:06:53,280 --> 01:06:57,039
but because this doesn't yet support

01:06:54,960 --> 01:07:00,799
elias thing so

01:06:57,039 --> 01:07:04,880
i mean a license as in count like

01:07:00,799 --> 01:07:07,119
like this id as

01:07:04,880 --> 01:07:08,240
i count because this doesn't support

01:07:07,119 --> 01:07:11,760
this yet there's an

01:07:08,240 --> 01:07:14,720
active pr on that but nobody continue

01:07:11,760 --> 01:07:15,680
the original author wrote way in

01:07:14,720 --> 01:07:20,160
progress

01:07:15,680 --> 01:07:20,160
go in progress pr but he didn't finish

01:07:21,119 --> 01:07:24,079
so i want to do the same i don't know

01:07:22,799 --> 01:07:25,760
how to reference i don't know how to use

01:07:24,079 --> 01:07:29,039
this to reference this

01:07:25,760 --> 01:07:32,079
so basically this is like and what

01:07:29,039 --> 01:07:33,440
something that did the level of support

01:07:32,079 --> 01:07:35,760
it's quite it's quite interesting

01:07:33,440 --> 01:07:38,079
already because there's a lot

01:07:35,760 --> 01:07:38,960
that based on this aggregation right

01:07:38,079 --> 01:07:40,559
listen even

01:07:38,960 --> 01:07:42,640
take into account like what you grow by

01:07:40,559 --> 01:07:44,799
and what you select

01:07:42,640 --> 01:07:46,400
say if you grouped by something but you

01:07:44,799 --> 01:07:47,440
didn't select that this will give an

01:07:46,400 --> 01:07:49,200
error

01:07:47,440 --> 01:07:50,799
so that's already quite impressive i

01:07:49,200 --> 01:07:52,960
believe

01:07:50,799 --> 01:07:56,880
like if you go by this but you didn't

01:07:52,960 --> 01:08:00,480
select this

01:07:56,880 --> 01:08:01,200
they will get error i mean you get arrow

01:08:00,480 --> 01:08:04,400
here because

01:08:01,200 --> 01:08:07,520
the types is incorrect like

01:08:04,400 --> 01:08:07,520
the type here is incorrect

01:08:08,400 --> 01:08:12,559
but never mind i'll continue

01:08:12,799 --> 01:08:16,799
but this is something like up to the

01:08:14,799 --> 01:08:20,000
limits of roughly

01:08:16,799 --> 01:08:23,679
what diesel dsl currently supports

01:08:20,000 --> 01:08:27,779
worst case i went and try out

01:08:23,679 --> 01:08:30,880
raw sequel so i need to write

01:08:27,779 --> 01:08:33,839
[Music]

01:08:30,880 --> 01:08:34,560
so i need to write my own struct like a

01:08:33,839 --> 01:08:37,199
comment count

01:08:34,560 --> 01:08:38,000
so this query query by name what i need

01:08:37,199 --> 01:08:41,440
to do is i need

01:08:38,000 --> 01:08:46,640
to specify the types myself

01:08:41,440 --> 01:08:48,880
and it's not right

01:08:46,640 --> 01:08:52,719
and oh y'all know it's kakun can you

01:08:48,880 --> 01:08:54,799
mind if and if this is like uh

01:08:52,719 --> 01:08:56,239
and if the type is correct it's wrong

01:08:54,799 --> 01:08:59,600
right

01:08:56,239 --> 01:09:01,600
you'll i also get an error like this

01:08:59,600 --> 01:09:03,040
and it's very weird right i see this

01:09:01,600 --> 01:09:06,159
error but i don't understand why

01:09:03,040 --> 01:09:07,759
i get this error but i asked in a guitar

01:09:06,159 --> 01:09:11,759
channel and they mentioned that

01:09:07,759 --> 01:09:15,359
oh because big int is not for

01:09:11,759 --> 01:09:17,279
this so i need to use thumb i-64

01:09:15,359 --> 01:09:19,600
but yeah this this part right if i

01:09:17,279 --> 01:09:21,600
didn't the first part if i didn't do the

01:09:19,600 --> 01:09:23,920
second query it works but you can only

01:09:21,600 --> 01:09:25,440
get the user id and post id

01:09:23,920 --> 01:09:27,279
but because i don't want to do another

01:09:25,440 --> 01:09:28,080
query again i want to do like a sub

01:09:27,279 --> 01:09:31,679
query thing

01:09:28,080 --> 01:09:34,480
so i can't do that so what does i need i

01:09:31,679 --> 01:09:35,199
need to write raw sql and then i write

01:09:34,480 --> 01:09:38,719
the

01:09:35,199 --> 01:09:41,040
this and then this will be up to you

01:09:38,719 --> 01:09:42,400
whether you write this correct or not

01:09:41,040 --> 01:09:43,759
whether right is correct you can do a

01:09:42,400 --> 01:09:45,600
bind

01:09:43,759 --> 01:09:48,480
you need to if you want to bind stuff in

01:09:45,600 --> 01:09:53,279
you need to do like a bind here

01:09:48,480 --> 01:09:53,279
by using the type inside here like

01:09:54,800 --> 01:09:57,120
bind

01:09:59,360 --> 01:10:05,120
yeah something like this so this this is

01:10:02,640 --> 01:10:06,159
another layer of diesel where you you

01:10:05,120 --> 01:10:07,760
don't want like right

01:10:06,159 --> 01:10:10,320
full raw sequel but you want to write

01:10:07,760 --> 01:10:13,040
like some way halfway in between

01:10:10,320 --> 01:10:14,640
so you can do something like this so is

01:10:13,040 --> 01:10:15,040
that you you have the choice to write

01:10:14,640 --> 01:10:18,159
use

01:10:15,040 --> 01:10:19,600
the full quality the full dsl that these

01:10:18,159 --> 01:10:21,679
are provides

01:10:19,600 --> 01:10:22,640
that just i showed a lot or you can use

01:10:21,679 --> 01:10:26,400
this halfway

01:10:22,640 --> 01:10:29,600
half bit dsl or you can use the ros

01:10:26,400 --> 01:10:33,040
raw query but sometimes i find

01:10:29,600 --> 01:10:34,719
valkyrie very good in good enough

01:10:33,040 --> 01:10:36,320
for cases like this i'll maybe fall back

01:10:34,719 --> 01:10:38,080
to queries

01:10:36,320 --> 01:10:39,760
and this also provides like say if you

01:10:38,080 --> 01:10:40,400
want to use some special functions in

01:10:39,760 --> 01:10:44,320
postgres

01:10:40,400 --> 01:10:45,440
right you can still use it i don't know

01:10:44,320 --> 01:10:47,520
what is that called but

01:10:45,440 --> 01:10:50,080
i think you can you can even provide a

01:10:47,520 --> 01:10:53,120
macro to generate

01:10:50,080 --> 01:10:55,440
sql function say the function

01:10:53,120 --> 01:10:56,960
is not in d so it's not supported in

01:10:55,440 --> 01:10:58,800
descent but you can just write like this

01:10:56,960 --> 01:11:03,440
and then it can generate

01:10:58,800 --> 01:11:06,159
the thing it can generate the

01:11:03,440 --> 01:11:09,120
function for you in let's say postgres

01:11:06,159 --> 01:11:13,120
have a certain special function

01:11:09,120 --> 01:11:15,679
so you can use those functions

01:11:13,120 --> 01:11:15,679
for example

01:11:16,719 --> 01:11:20,560
yeah so roughly this there you provide

01:11:19,600 --> 01:11:22,719
the level two

01:11:20,560 --> 01:11:24,320
to something like this so a lot of

01:11:22,719 --> 01:11:28,159
things are covered

01:11:24,320 --> 01:11:28,159
so i discussed

01:11:28,480 --> 01:11:32,159
a lot of things like towers is like they

01:11:30,640 --> 01:11:36,080
have a lot of

01:11:32,159 --> 01:11:39,199
dsl supported you can see that they

01:11:36,080 --> 01:11:41,679
there's even relationship association

01:11:39,199 --> 01:11:44,080
and but there's also a bunch of uh

01:11:41,679 --> 01:11:47,199
across here

01:11:44,080 --> 01:11:47,600
and yeah this is like what i learned

01:11:47,199 --> 01:11:50,480
from

01:11:47,600 --> 01:11:52,320
diesel is like they can they do put

01:11:50,480 --> 01:11:53,920
stuff in type

01:11:52,320 --> 01:11:56,159
like if you want to look at their group

01:11:53,920 --> 01:11:56,159
by

01:11:56,400 --> 01:12:00,880
you'll see that they even have like a

01:11:58,159 --> 01:12:00,880
very grouping

01:12:01,280 --> 01:12:04,960
where a lot of these are encoding type

01:12:02,880 --> 01:12:08,159
and aggregate and then this

01:12:04,960 --> 01:12:10,480
oh look so these are all done by diesel

01:12:08,159 --> 01:12:11,440
to make it tight safe so they put in a

01:12:10,480 --> 01:12:13,920
lot of effort for this and the

01:12:11,440 --> 01:12:17,679
documentation as well

01:12:13,920 --> 01:12:20,800
yeah so these are very interesting and

01:12:17,679 --> 01:12:23,679
i find it quite good i feel up to you

01:12:20,800 --> 01:12:26,560
now it's quite good from what i see

01:12:23,679 --> 01:12:27,600
let's see that they really make it type

01:12:26,560 --> 01:12:30,480
safe to prevent

01:12:27,600 --> 01:12:30,480
any food guns

01:12:31,280 --> 01:12:35,280
okay i thought about this is there any

01:12:33,120 --> 01:12:36,719
questions

01:12:35,280 --> 01:12:38,400
okay i can talk about later i can talk

01:12:36,719 --> 01:12:41,280
about bonus

01:12:38,400 --> 01:12:41,280
type bonus section

01:12:45,920 --> 01:12:51,840
and any questions

01:12:53,420 --> 01:12:59,919
[Music]

01:13:03,120 --> 01:13:08,480
any questions to be asked to our speaker

01:13:09,120 --> 01:13:13,040
okay i can unback my video now

01:13:14,400 --> 01:13:19,760
[Music]

01:13:16,719 --> 01:13:22,239
i need to open my phone first questions

01:13:19,760 --> 01:13:22,239
questions

01:13:26,480 --> 01:13:33,840
if no questions

01:13:44,840 --> 01:13:50,320
okay

01:13:46,239 --> 01:14:01,840
yeah so this is so how what do i think

01:13:50,320 --> 01:14:01,840
how is it see okay

01:14:26,840 --> 01:14:29,440
okay so no question maybe i'll share

01:14:29,040 --> 01:14:35,199
about

01:14:29,440 --> 01:14:35,199
a bit of experiment i've done

01:14:36,400 --> 01:14:44,719
lately what i was trying to do

01:14:40,840 --> 01:14:49,760
okay this is what stock

01:14:44,719 --> 01:14:53,280
stock so what there is like a stock

01:14:49,760 --> 01:14:56,400
there's like a stock uh data

01:14:53,280 --> 01:15:01,280
and then i want to get the price

01:14:56,400 --> 01:15:01,280
and this is what i i did

01:15:01,920 --> 01:15:05,679
so i what what it involves is i have

01:15:04,560 --> 01:15:08,400
like uh

01:15:05,679 --> 01:15:11,600
it will download the data so this users

01:15:08,400 --> 01:15:11,600
request blocking request

01:15:12,320 --> 01:15:16,000
usually i'll just uh to our trouble i

01:15:14,480 --> 01:15:17,199
will just use the blocking api of

01:15:16,000 --> 01:15:19,760
request

01:15:17,199 --> 01:15:20,719
and i happen to need gzip so i also need

01:15:19,760 --> 01:15:25,120
to rgc because

01:15:20,719 --> 01:15:28,719
if i did add this i'll see scramble data

01:15:25,120 --> 01:15:32,000
and i use norm for passing

01:15:28,719 --> 01:15:35,120
because i was doing it with my father my

01:15:32,000 --> 01:15:38,159
father was doing it on

01:15:35,120 --> 01:15:40,080
pandas and then i say i don't want to

01:15:38,159 --> 01:15:44,080
use pandas i want to write in grass

01:15:40,080 --> 01:15:46,560
so i was using a rust already

01:15:44,080 --> 01:15:47,760
and i finished it first and then you

01:15:46,560 --> 01:15:49,760
have one

01:15:47,760 --> 01:15:51,199
so i was writing writing a custom parser

01:15:49,760 --> 01:15:55,120
using norm

01:15:51,199 --> 01:15:57,920
and maybe i'll share a bit on

01:15:55,120 --> 01:15:58,640
what i don't like about now so you see

01:15:57,920 --> 01:16:02,159
this right

01:15:58,640 --> 01:16:02,159
in norm you see a bunch of this

01:16:03,520 --> 01:16:07,520
like you see a bunch of this

01:16:07,600 --> 01:16:14,480
bunch i don't like this uh

01:16:11,360 --> 01:16:18,560
why we need this is i just added

01:16:14,480 --> 01:16:22,239
a lifetime in here yeah i just added

01:16:18,560 --> 01:16:22,239
originally i put this as string

01:16:23,280 --> 01:16:26,560
and then i just added this and i need to

01:16:25,440 --> 01:16:30,400
all add all this

01:16:26,560 --> 01:16:33,199
lifetime you know how many of these

01:16:30,400 --> 01:16:35,440
all these if without the lifetime you

01:16:33,199 --> 01:16:38,560
can just write it like this

01:16:35,440 --> 01:16:42,080
you can write it like this

01:16:38,560 --> 01:16:42,080
yeah a lot easier right

01:16:42,940 --> 01:16:48,000
[Music]

01:16:44,239 --> 01:16:48,560
a lot can you write like this without

01:16:48,000 --> 01:16:52,080
the lifetime

01:16:48,560 --> 01:16:52,080
a lot easier but then

01:16:52,159 --> 01:16:57,120
uh because if this is like str right

01:16:57,199 --> 01:17:04,560
because this is like a static sdr

01:17:01,280 --> 01:17:08,239
and then when i change it to string

01:17:04,560 --> 01:17:10,159
which which became like uh sdr

01:17:08,239 --> 01:17:12,239
and then it suddenly became so

01:17:10,159 --> 01:17:13,440
unergonomic where everything i need to

01:17:12,239 --> 01:17:17,199
add all this bunch

01:17:13,440 --> 01:17:19,679
of stuff and then

01:17:17,199 --> 01:17:20,880
i also need to add all to other

01:17:19,679 --> 01:17:23,040
functions but otherwise

01:17:20,880 --> 01:17:25,199
it will be very nice to use i will say

01:17:23,040 --> 01:17:26,640
norm because uh

01:17:25,199 --> 01:17:28,000
but i've spent some time troubleshooting

01:17:26,640 --> 01:17:29,120
attack yeah i don't even know which tech

01:17:28,000 --> 01:17:33,040
you have errors

01:17:29,120 --> 01:17:33,040
the errors is a bit hard to understand

01:17:33,120 --> 01:17:38,960
so what this does i don't even know what

01:17:36,159 --> 01:17:44,080
it does now so it uses pr3

01:17:38,960 --> 01:17:44,080
so i do the passing and in

01:17:54,300 --> 01:17:59,520
[Music]

01:17:56,480 --> 01:18:00,400
so norm you need to know like you you

01:17:59,520 --> 01:18:02,640
can write

01:18:00,400 --> 01:18:04,239
you can write past right no no it's a

01:18:02,640 --> 01:18:06,640
password combinator for us

01:18:04,239 --> 01:18:08,080
where you can write some functions merge

01:18:06,640 --> 01:18:09,679
the functions together and then do the

01:18:08,080 --> 01:18:11,440
passing

01:18:09,679 --> 01:18:12,719
but i just find this only this part now

01:18:11,440 --> 01:18:13,280
i'm going to make but other part is

01:18:12,719 --> 01:18:15,360
quite

01:18:13,280 --> 01:18:16,719
quite nice too right where i just write

01:18:15,360 --> 01:18:18,239
one part and then i just copy paste copy

01:18:16,719 --> 01:18:19,360
paste everything else just copy paste

01:18:18,239 --> 01:18:20,960
although i can write a function for you

01:18:19,360 --> 01:18:23,199
i detent

01:18:20,960 --> 01:18:24,080
lazy so lazy to write functions for that

01:18:23,199 --> 01:18:26,719
so i just

01:18:24,080 --> 01:18:30,640
paste everything and all the passing

01:18:26,719 --> 01:18:34,880
similar or just pass plus plus plus

01:18:30,640 --> 01:18:37,679
yeah and then i pass all the data

01:18:34,880 --> 01:18:40,560
and then i even do a python i tried

01:18:37,679 --> 01:18:43,600
writing some python here which i uses

01:18:40,560 --> 01:18:43,600
inline python for that

01:18:45,520 --> 01:18:48,560
yeah so you see that you can inline

01:18:47,440 --> 01:18:54,719
python

01:18:48,560 --> 01:19:09,840
maybe i should run it

01:18:54,719 --> 01:19:09,840
not to excel or print

01:19:34,000 --> 01:19:42,400
so these are like uh you've seen norm

01:19:39,360 --> 01:19:46,239
i have quite a lot of functions

01:19:42,400 --> 01:19:50,560
so a lot you have like uh

01:19:46,239 --> 01:19:52,000
to branching to combinator

01:19:50,560 --> 01:19:54,080
to mount you can choose multiple

01:19:52,000 --> 01:19:59,199
functions okay i won't talk about long

01:19:54,080 --> 01:19:59,199
so much here yeah so it works

01:19:59,920 --> 01:20:04,000
and it's not hard the only only part i

01:20:03,679 --> 01:20:06,159
find

01:20:04,000 --> 01:20:08,800
oh i find it quite easy in fact except

01:20:06,159 --> 01:20:11,840
this part because uh

01:20:08,800 --> 01:20:12,800
the chrono what is that chrono right

01:20:11,840 --> 01:20:17,920
doesn't work

01:20:12,800 --> 01:20:21,199
with uh chronos doesn't integrate with

01:20:17,920 --> 01:20:25,679
tai o3 pyro3 is a python library for

01:20:21,199 --> 01:20:27,280
no it's a python integration for rus

01:20:25,679 --> 01:20:29,760
or ffa or something like that but it's

01:20:27,280 --> 01:20:32,159
more than ffi because you can

01:20:29,760 --> 01:20:35,600
write like you can write like a titan

01:20:32,159 --> 01:20:38,800
rust pattern class in rust

01:20:35,600 --> 01:20:40,480
so uh what it does is i i just lazy to

01:20:38,800 --> 01:20:43,199
change the this type

01:20:40,480 --> 01:20:44,159
this type is this is the date chrono

01:20:43,199 --> 01:20:45,600
date type

01:20:44,159 --> 01:20:48,719
because chrono doesn't have integration

01:20:45,600 --> 01:20:49,920
with uh pi o3 yet i'm writing a pr for

01:20:48,719 --> 01:20:51,760
that but

01:20:49,920 --> 01:20:53,920
they don't have integration yet so i

01:20:51,760 --> 01:20:56,320
just convert it to string which is

01:20:53,920 --> 01:20:58,880
uh python date and then and that's why

01:20:56,320 --> 01:21:02,800
it came out like this

01:20:58,880 --> 01:21:06,080
yeah temporary i just put it at

01:21:02,800 --> 01:21:09,040
so this this is run in uh

01:21:06,080 --> 01:21:12,320
python pandas this part is running

01:21:09,040 --> 01:21:14,080
python but this is compound to bite code

01:21:12,320 --> 01:21:15,760
the only part i find troublesome is

01:21:14,080 --> 01:21:17,520
because you you can you can put this

01:21:15,760 --> 01:21:19,199
it's a rust variable

01:21:17,520 --> 01:21:21,280
stock request is the brass variable and

01:21:19,199 --> 01:21:22,880
this will be converted into the python

01:21:21,280 --> 01:21:24,320
code

01:21:22,880 --> 01:21:26,080
and then you have a python object for

01:21:24,320 --> 01:21:29,280
this

01:21:26,080 --> 01:21:29,840
because uh that there isn't a derived

01:21:29,280 --> 01:21:31,199
for this

01:21:29,840 --> 01:21:33,040
automatically because they don't know

01:21:31,199 --> 01:21:34,800
what you want to derive what type of

01:21:33,040 --> 01:21:35,679
object you want to derive so that's why

01:21:34,800 --> 01:21:38,719
they have

01:21:35,679 --> 01:21:41,840
this and then

01:21:38,719 --> 01:21:43,920
all these two pi object then

01:21:41,840 --> 01:21:45,840
works and you can even convert the title

01:21:43,920 --> 01:21:47,600
objects to rust using the from pi object

01:21:45,840 --> 01:21:50,800
but they have a derived for that

01:21:47,600 --> 01:21:53,920
so this is roughly how it looks like

01:21:50,800 --> 01:21:56,880
using python so the the

01:21:53,920 --> 01:21:58,239
it's quite it's quite straightforward to

01:21:56,880 --> 01:22:00,560
do this

01:21:58,239 --> 01:22:02,960
so let's say if you are missing

01:22:00,560 --> 01:22:02,960
something

01:22:03,440 --> 01:22:09,040
then if you're missing something you you

01:22:05,920 --> 01:22:12,320
are lazy then you can just

01:22:09,040 --> 01:22:13,840
comma to python and then

01:22:12,320 --> 01:22:17,120
make that i'll choose a python and then

01:22:13,840 --> 01:22:19,520
just run it here there's also inline

01:22:17,120 --> 01:22:20,960
there's also inline javascript i i think

01:22:19,520 --> 01:22:22,719
there's enough javascript as well but i

01:22:20,960 --> 01:22:24,639
didn't haven't tried that

01:22:22,719 --> 01:22:26,880
but i tried this so far it's working

01:22:24,639 --> 01:22:26,880
fine

01:22:27,840 --> 01:22:30,320
how is it

01:22:31,760 --> 01:22:34,080
hello

01:22:35,199 --> 01:22:41,600
feel good

01:22:38,960 --> 01:22:41,600
any questions

01:22:47,040 --> 01:22:53,840
no should be fine

01:22:56,080 --> 01:23:00,000
no no

01:23:01,440 --> 01:23:11,360
i guess this case that's all for today

01:23:07,679 --> 01:23:15,520
so if you guys want to join the

01:23:11,360 --> 01:23:15,520
call you can join through the

01:23:15,600 --> 01:23:21,440
the link show here and we will end the

01:23:17,679 --> 01:23:26,080
stream now

01:23:21,440 --> 01:23:26,080
and see you guys soon in the next meetup

01:23:26,840 --> 01:23:29,840

YouTube URL: https://www.youtube.com/watch?v=pH1JVMAh7Yw


