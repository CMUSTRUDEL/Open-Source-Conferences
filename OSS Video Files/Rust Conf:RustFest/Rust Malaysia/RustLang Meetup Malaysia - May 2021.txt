Title: RustLang Meetup Malaysia - May 2021
Publication date: 2021-05-13
Playlist: Rust Malaysia
Description: 
	Ivan Tham gave a talk about pyoxidizer and another talk about implementing 3rd party trait for 3rd party type.
Captions: 
	00:00:07,120 --> 00:00:12,000
okay

00:00:08,320 --> 00:00:17,199
so welcome to rust meetup malaysia

00:00:12,000 --> 00:00:19,520
may maybe and there are two talks

00:00:17,199 --> 00:00:21,359
today i'll be talking first on pi

00:00:19,520 --> 00:00:23,519
oxidizer and later on

00:00:21,359 --> 00:00:24,480
how to implement third-party trades for

00:00:23,519 --> 00:00:27,680
the body types

00:00:24,480 --> 00:00:29,760
and sitting up around there and first pi

00:00:27,680 --> 00:00:31,359
oxidizer right peroxidizer is a tool for

00:00:29,760 --> 00:00:32,160
packaging and distributing python

00:00:31,359 --> 00:00:36,800
application

00:00:32,160 --> 00:00:39,120
it's a bit similar to like the cx freeze

00:00:36,800 --> 00:00:41,600
but uh pi oxidizer works for more

00:00:39,120 --> 00:00:43,840
platform

00:00:41,600 --> 00:00:45,360
due to like the how the how their

00:00:43,840 --> 00:00:49,520
mechanism work

00:00:45,360 --> 00:00:51,280
implementation here so for use cases

00:00:49,520 --> 00:00:53,840
right

00:00:51,280 --> 00:00:56,079
one of them first of them is deploy

00:00:53,840 --> 00:00:59,280
single binary item projects

00:00:56,079 --> 00:01:01,520
so one can just like run a command and

00:00:59,280 --> 00:01:04,479
it would create a single python single

00:01:01,520 --> 00:01:06,960
binary for the python project

00:01:04,479 --> 00:01:07,520
and others include you can package

00:01:06,960 --> 00:01:10,080
python

00:01:07,520 --> 00:01:13,119
project together with the dependencies

00:01:10,080 --> 00:01:14,880
into a single binary as well

00:01:13,119 --> 00:01:17,119
and do some rust integration stuff like

00:01:14,880 --> 00:01:19,439
you can you can run some brass code

00:01:17,119 --> 00:01:21,040
i believe that's what they say i'm not

00:01:19,439 --> 00:01:24,720
sure like

00:01:21,040 --> 00:01:25,680
how much is that and first the

00:01:24,720 --> 00:01:27,439
installation

00:01:25,680 --> 00:01:29,280
the there are two ways to install these

00:01:27,439 --> 00:01:32,320
one is through pip

00:01:29,280 --> 00:01:34,320
a python pip install pipe oxidizer and

00:01:32,320 --> 00:01:36,159
another is true python a cargo installed

00:01:34,320 --> 00:01:39,280
peroxidizer

00:01:36,159 --> 00:01:40,960
and another or can also install through

00:01:39,280 --> 00:01:44,640
package manager

00:01:40,960 --> 00:01:47,439
so i install through cargo and

00:01:44,640 --> 00:01:48,159
first impression is the docks is a bit

00:01:47,439 --> 00:01:51,119
confusing

00:01:48,159 --> 00:01:51,759
and regarding the usage is like missing

00:01:51,119 --> 00:01:54,479
quite a

00:01:51,759 --> 00:01:54,880
huge part how to get started with a if

00:01:54,479 --> 00:01:57,200
uh

00:01:54,880 --> 00:01:58,640
like hello world python project they

00:01:57,200 --> 00:02:01,360
just get you

00:01:58,640 --> 00:02:03,119
the docs you hello is just to get you to

00:02:01,360 --> 00:02:05,280
the interpreter level

00:02:03,119 --> 00:02:06,560
like when you run you'll get you to

00:02:05,280 --> 00:02:08,640
interpreter

00:02:06,560 --> 00:02:10,479
and it's a bit confusing that there is

00:02:08,640 --> 00:02:13,760
there are two entry points

00:02:10,479 --> 00:02:16,239
the first being an id conflict file and

00:02:13,760 --> 00:02:16,800
there's also another one a nike rush

00:02:16,239 --> 00:02:20,080
project

00:02:16,800 --> 00:02:23,120
so i'm so confused when i first said

00:02:20,080 --> 00:02:24,800
and there are two parts so i need config

00:02:23,120 --> 00:02:26,400
file creates a blank project with a

00:02:24,800 --> 00:02:27,840
config file just like a single file

00:02:26,400 --> 00:02:30,640
there

00:02:27,840 --> 00:02:31,760
and by default when you build or run it

00:02:30,640 --> 00:02:34,000
will run the

00:02:31,760 --> 00:02:36,800
you default it to the python interpreter

00:02:34,000 --> 00:02:40,239
so it will run the python interpreter

00:02:36,800 --> 00:02:42,480
like in a in a single binary and the

00:02:40,239 --> 00:02:44,800
progress project on the other hand right

00:02:42,480 --> 00:02:47,200
you can it will generate some browse

00:02:44,800 --> 00:02:50,080
code with also with the same config file

00:02:47,200 --> 00:02:50,640
and with some rascal src main and inside

00:02:50,080 --> 00:02:53,599
the rasco

00:02:50,640 --> 00:02:55,280
is calling the python interpreter using

00:02:53,599 --> 00:02:57,360
their own api

00:02:55,280 --> 00:02:59,360
but i don't even know i don't know why

00:02:57,360 --> 00:03:02,239
why do they need to do it this way

00:02:59,360 --> 00:03:03,680
not sure why it just it also does the

00:03:02,239 --> 00:03:04,800
same thing it also involves the pilot

00:03:03,680 --> 00:03:06,800
interpreter

00:03:04,800 --> 00:03:09,599
but rather than doing it through the

00:03:06,800 --> 00:03:09,599
config it

00:03:09,760 --> 00:03:15,360
some parts of it it does it in the

00:03:12,879 --> 00:03:17,599
within the rascal so compared to others

00:03:15,360 --> 00:03:19,519
that i tried previously for packaging

00:03:17,599 --> 00:03:21,040
python binaries right this is a bit

00:03:19,519 --> 00:03:23,760
harder

00:03:21,040 --> 00:03:24,959
or way harder but there are more

00:03:23,760 --> 00:03:26,879
features

00:03:24,959 --> 00:03:29,680
from what they say around python and

00:03:26,879 --> 00:03:29,680
rust integration

00:03:31,519 --> 00:03:36,000
also get something

00:03:36,480 --> 00:03:43,680
first slow

00:03:39,760 --> 00:03:46,640
so the project is slow like a snail

00:03:43,680 --> 00:03:47,760
and yeah just side tips maybe i'll just

00:03:46,640 --> 00:03:50,560
do a demo and

00:03:47,760 --> 00:03:50,560
to see how you work

00:03:51,760 --> 00:03:57,280
yeah you can see like pipe pipe oxidizer

00:03:54,799 --> 00:03:58,840
the usage is just a hello world that you

00:03:57,280 --> 00:04:01,920
just show like this

00:03:58,840 --> 00:04:05,040
and and it will be

00:04:01,920 --> 00:04:07,599
just like uh you just it just runs the

00:04:05,040 --> 00:04:07,599
interpreter

00:04:11,120 --> 00:04:17,599
so now we will see like

00:04:14,959 --> 00:04:17,599
how it works

00:04:25,600 --> 00:04:30,400
so there is a bjl file you can see what

00:04:28,720 --> 00:04:33,520
is the pcl file

00:04:30,400 --> 00:04:35,759
so it's like some some python python

00:04:33,520 --> 00:04:39,680
code

00:04:35,759 --> 00:04:42,320
and run

00:04:39,680 --> 00:04:43,600
and by default it's quite it's quite a

00:04:42,320 --> 00:04:45,440
lot of comments like

00:04:43,600 --> 00:04:46,639
you you you might want to go through a

00:04:45,440 --> 00:04:46,960
lot of stuff you want if you want to

00:04:46,639 --> 00:04:50,080
rate

00:04:46,960 --> 00:04:50,080
through this quite long

00:04:50,639 --> 00:04:58,400
and then run right here's pi oxidizer

00:04:54,840 --> 00:05:00,560
run for some time

00:04:58,400 --> 00:05:01,840
so in the meantime you just see that

00:05:00,560 --> 00:05:03,520
accumulation

00:05:01,840 --> 00:05:06,080
as you can see like the other commercial

00:05:03,520 --> 00:05:06,080
is quite long

00:05:06,720 --> 00:05:10,240
and they have like uh it's quite long

00:05:09,520 --> 00:05:12,880
but

00:05:10,240 --> 00:05:13,840
a lot of it is like api documentation

00:05:12,880 --> 00:05:16,000
and like

00:05:13,840 --> 00:05:18,080
how to use it whether they're having

00:05:16,000 --> 00:05:20,560
like getting started guide on

00:05:18,080 --> 00:05:22,080
how to build like a python project with

00:05:20,560 --> 00:05:23,759
pyoxidizer

00:05:22,080 --> 00:05:26,479
and they also have some comparison with

00:05:23,759 --> 00:05:26,479
other projects

00:05:28,479 --> 00:05:34,000
but from what i see it's not easy to use

00:05:31,360 --> 00:05:36,840
that's what i see

00:05:34,000 --> 00:05:39,840
let me let's go back and oh it's still

00:05:36,840 --> 00:05:39,840
compiling

00:05:52,880 --> 00:05:56,880
so like in one of the comparisons they

00:05:54,639 --> 00:06:01,199
say that oxidizer is not

00:05:56,880 --> 00:06:04,319
like uh preferred when there are lots of

00:06:01,199 --> 00:06:07,120
dependencies but not lots of

00:06:04,319 --> 00:06:10,479
native dependencies and like they

00:06:07,120 --> 00:06:13,360
compared to pi installer and summer

00:06:10,479 --> 00:06:14,560
so what are the diff dependencies is it

00:06:13,360 --> 00:06:17,520
something like numpy

00:06:14,560 --> 00:06:20,560
dependency like they say like p iq t or

00:06:17,520 --> 00:06:20,560
maybe something like pen does

00:06:22,479 --> 00:06:26,160
so by default it invokes the python

00:06:25,360 --> 00:06:35,840
interpreter

00:06:26,160 --> 00:06:35,840
you can just print hell over here

00:06:45,039 --> 00:06:50,319
yeah he builds like a single mirror

00:06:47,840 --> 00:06:50,319
let's see

00:06:50,560 --> 00:06:53,599
let's check yeah it doesn't point to a

00:06:52,960 --> 00:06:58,720
python

00:06:53,599 --> 00:07:03,520
or something but it points to lipsy

00:06:58,720 --> 00:07:07,120
and at the most i got it to like

00:07:03,520 --> 00:07:10,319
the point of just running

00:07:07,120 --> 00:07:11,440
how i didn't check how to run with the

00:07:10,319 --> 00:07:14,160
module-m

00:07:11,440 --> 00:07:17,840
or like the file i tried i tried but it

00:07:14,160 --> 00:07:17,840
didn't work

00:07:18,479 --> 00:07:22,880
so let's let's see here

00:07:25,199 --> 00:07:33,919
i'll print hello and

00:07:31,280 --> 00:07:33,919
run the game

00:07:34,560 --> 00:07:38,880
so it needs to build like almost a lot

00:07:36,400 --> 00:07:38,880
of thing

00:07:38,960 --> 00:07:45,520
and by default if you use the

00:07:42,400 --> 00:07:47,280
if you use the ac cache as just rusty

00:07:45,520 --> 00:07:50,319
wrapper it will be faster

00:07:47,280 --> 00:07:50,879
like from 40 seconds to 30 seconds i

00:07:50,319 --> 00:07:53,120
mean

00:07:50,879 --> 00:07:54,160
only if you are doing incremental

00:07:53,120 --> 00:07:55,840
changes

00:07:54,160 --> 00:07:58,080
so when you are experimenting

00:07:55,840 --> 00:07:59,440
experimenting with pi oxidizer you you

00:07:58,080 --> 00:08:00,400
may not want to like always run

00:07:59,440 --> 00:08:01,680
pyroxenizer

00:08:00,400 --> 00:08:04,479
you probably want to just run the

00:08:01,680 --> 00:08:04,479
project directly

00:08:04,560 --> 00:08:08,800
and that's what i see slower than

00:08:06,720 --> 00:08:13,840
typical rust compilation

00:08:08,800 --> 00:08:13,840
weighs a lot lower

00:08:13,919 --> 00:08:17,199
usually russell publisher is just like a

00:08:15,360 --> 00:08:19,120
few seconds for incremental changes

00:08:17,199 --> 00:08:20,720
but this is a lot slower maybe he's not

00:08:19,120 --> 00:08:23,680
using cash or something

00:08:20,720 --> 00:08:27,680
let's see it was lower but they improve

00:08:23,680 --> 00:08:29,840
a bit

00:08:27,680 --> 00:08:31,039
so this at the end this will print like

00:08:29,840 --> 00:08:32,800
a

00:08:31,039 --> 00:08:35,839
and it will create a binary to do that

00:08:32,800 --> 00:08:38,080
like print hello world

00:08:35,839 --> 00:08:39,599
can you do something more complex with

00:08:38,080 --> 00:08:41,760
it like

00:08:39,599 --> 00:08:43,200
perhaps i i don't get to do like

00:08:41,760 --> 00:08:45,519
importing the

00:08:43,200 --> 00:08:46,800
modules and stuff but probably that

00:08:45,519 --> 00:08:49,920
could be done

00:08:46,800 --> 00:08:49,920
right through this

00:08:50,800 --> 00:08:54,560
can you do like a flash or a bottle side

00:08:53,680 --> 00:08:56,959
with

00:08:54,560 --> 00:08:58,880
this i didn't try because because i

00:08:56,959 --> 00:09:01,920
didn't even

00:08:58,880 --> 00:09:02,880
get importing this module i didn't get

00:09:01,920 --> 00:09:05,920
to a point of

00:09:02,880 --> 00:09:10,080
having this working usually like

00:09:05,920 --> 00:09:14,320
you just have uh hello dot py right

00:09:10,080 --> 00:09:16,000
print hello whoa

00:09:14,320 --> 00:09:17,839
and then you can just do python dash and

00:09:16,000 --> 00:09:21,680
like this right but i do find that

00:09:17,839 --> 00:09:24,800
hello didn't work no i do do like

00:09:21,680 --> 00:09:26,240
hello here didn't work yeah but i i

00:09:24,800 --> 00:09:28,320
stopped

00:09:26,240 --> 00:09:30,720
i didn't check and the error is not very

00:09:28,320 --> 00:09:33,680
good like the typical rust errors

00:09:30,720 --> 00:09:34,560
some conclusions not easy to use but if

00:09:33,680 --> 00:09:38,399
you want

00:09:34,560 --> 00:09:40,160
a very feature full thing

00:09:38,399 --> 00:09:41,600
like a very feature full packaging this

00:09:40,160 --> 00:09:44,640
might be one of the

00:09:41,600 --> 00:09:47,120
things you can see if you if you can get

00:09:44,640 --> 00:09:49,600
as much to the combination

00:09:47,120 --> 00:09:51,200
but mainly it's just api documentation

00:09:49,600 --> 00:09:53,440
on how to use it

00:09:51,200 --> 00:09:54,320
so the sources you can break from pi

00:09:53,440 --> 00:09:59,279
oxidizer

00:09:54,320 --> 00:09:59,279
play the docs so this is pi oxidizer

00:09:59,760 --> 00:10:07,920
pi oc data a lot

00:10:04,720 --> 00:10:07,920
just playing around with it

00:10:13,040 --> 00:10:18,880
oh by the way uh we have more

00:10:15,760 --> 00:10:22,399
participants in the chat room now so

00:10:18,880 --> 00:10:26,079
hello everyone who joins us on discord

00:10:22,399 --> 00:10:27,440
youtube and perhaps some guys from

00:10:26,079 --> 00:10:30,560
telegram

00:10:27,440 --> 00:10:36,000
hello and welcome to

00:10:30,560 --> 00:10:36,000
rust meetup malaysia may 2021

00:10:37,200 --> 00:10:40,880
okay now should we get on to this it

00:10:39,360 --> 00:10:42,800
should be a longer talk compared to the

00:10:40,880 --> 00:10:47,839
first one

00:10:42,800 --> 00:10:49,920
any question from the audience

00:10:47,839 --> 00:10:52,399
any questions want to talk you can

00:10:49,920 --> 00:10:55,760
actually type out the question on

00:10:52,399 --> 00:10:59,760
the uh rus talk

00:10:55,760 --> 00:11:02,240
chat room or just directly in the

00:10:59,760 --> 00:11:02,240
streaming

00:11:06,800 --> 00:11:10,320
i guess we can proceed then

00:11:11,600 --> 00:11:15,519
maybe yeah we can we can just proceed to

00:11:13,519 --> 00:11:17,120
the second talk second talk the title

00:11:15,519 --> 00:11:19,200
will be implementing third party trade

00:11:17,120 --> 00:11:21,519
for third party type

00:11:19,200 --> 00:11:23,760
for those that are new to rust a trade

00:11:21,519 --> 00:11:25,600
is like an interface you can say but it

00:11:23,760 --> 00:11:29,279
doesn't contain

00:11:25,600 --> 00:11:32,560
but it doesn't contain like the

00:11:29,279 --> 00:11:36,079
data it only contains like

00:11:32,560 --> 00:11:36,800
what is the only context yeah similar to

00:11:36,079 --> 00:11:40,839
interface

00:11:36,800 --> 00:11:42,000
but they look like it can have super

00:11:40,839 --> 00:11:45,680
trades

00:11:42,000 --> 00:11:49,279
yeah which is similar it's like abstract

00:11:45,680 --> 00:11:52,800
accelerate interface so it's similar

00:11:49,279 --> 00:11:57,839
so third party trade means that

00:11:52,800 --> 00:12:01,040
uh quick the trade is on a third party

00:11:57,839 --> 00:12:04,880
the trade is on another crack

00:12:01,040 --> 00:12:08,839
the credit is like a library in russ and

00:12:04,880 --> 00:12:10,800
the the type is also on a third party

00:12:08,839 --> 00:12:12,959
type so

00:12:10,800 --> 00:12:14,480
on our last talk we talked about at the

00:12:12,959 --> 00:12:16,399
end of the last talk right we talked

00:12:14,480 --> 00:12:18,800
about using inline python

00:12:16,399 --> 00:12:20,560
writing some python code within ras code

00:12:18,800 --> 00:12:25,120
and passing variables

00:12:20,560 --> 00:12:27,440
from russ code into python code right

00:12:25,120 --> 00:12:27,440
and then

00:12:28,560 --> 00:12:35,920
cut for converting for converting the

00:12:32,480 --> 00:12:39,200
ras code into python code so

00:12:35,920 --> 00:12:41,519
what this does is there's a bunch of

00:12:39,200 --> 00:12:44,160
stuff which i

00:12:41,519 --> 00:12:44,959
and and yeah you'll notice this part

00:12:44,160 --> 00:12:48,560
right there's a

00:12:44,959 --> 00:12:51,600
hack you see that

00:12:48,560 --> 00:12:52,000
there is uh you see that there's a

00:12:51,600 --> 00:12:56,560
string

00:12:52,000 --> 00:12:56,560
here the date the day

00:12:57,519 --> 00:13:04,160
which is the date the date chrono maybe

00:13:00,720 --> 00:13:06,240
naive date which is like a

00:13:04,160 --> 00:13:07,680
date type rather than a string rather

00:13:06,240 --> 00:13:10,720
than string type

00:13:07,680 --> 00:13:13,360
but we are going to convert this in into

00:13:10,720 --> 00:13:16,639
something to be read by pandas

00:13:13,360 --> 00:13:17,279
to be used by pandas but here i put each

00:13:16,639 --> 00:13:19,680
string

00:13:17,279 --> 00:13:21,440
we can process it but it wouldn't it be

00:13:19,680 --> 00:13:23,680
good if we can

00:13:21,440 --> 00:13:24,880
wouldn't it be good if you can directly

00:13:23,680 --> 00:13:27,040
to

00:13:24,880 --> 00:13:28,399
the py without converting it to string

00:13:27,040 --> 00:13:31,120
first because like

00:13:28,399 --> 00:13:31,839
why not just keep the original item date

00:13:31,120 --> 00:13:34,560
time type

00:13:31,839 --> 00:13:35,839
rather than making it feel like a hack

00:13:34,560 --> 00:13:40,079
to convert the

00:13:35,839 --> 00:13:44,560
day into uh like string

00:13:40,079 --> 00:13:48,560
like the year year year dash the rfc 339

00:13:44,560 --> 00:13:51,680
date which is like the year dash

00:13:48,560 --> 00:13:54,639
day day so it feels like a hack

00:13:51,680 --> 00:13:55,360
so a better case will be redirectly

00:13:54,639 --> 00:13:58,560
convert

00:13:55,360 --> 00:14:01,600
from the rust date into

00:13:58,560 --> 00:14:03,199
the date time date which is a better

00:14:01,600 --> 00:14:07,680
choice

00:14:03,199 --> 00:14:11,440
but we can't do that here so

00:14:07,680 --> 00:14:15,680
chronology cannot be converted into a pi

00:14:11,440 --> 00:14:18,959
iot power tree is a title or integration

00:14:15,680 --> 00:14:20,720
it's a python integration for like rust

00:14:18,959 --> 00:14:24,480
and it's applied object pipeline is like

00:14:20,720 --> 00:14:24,480
a project is a python object

00:14:24,880 --> 00:14:31,519
and why because chronology

00:14:28,160 --> 00:14:32,560
chronology does not implement the two pi

00:14:31,519 --> 00:14:36,000
object

00:14:32,560 --> 00:14:44,399
which is in the demo okay i'll show it

00:14:36,000 --> 00:14:47,680
i'll show them

00:14:44,399 --> 00:14:47,680
search for naive date

00:14:52,480 --> 00:14:56,160
okay how to check whether implement

00:14:54,880 --> 00:14:59,839
implementation for that you can just

00:14:56,160 --> 00:14:59,839
search for the left side

00:15:04,880 --> 00:15:08,399
mainly around this part you see that

00:15:06,880 --> 00:15:10,160
there's a trade implementation right

00:15:08,399 --> 00:15:13,600
these are like implementation

00:15:10,160 --> 00:15:15,040
for knighted i see oh how come they're

00:15:13,600 --> 00:15:17,680
serialized this irs is from

00:15:15,040 --> 00:15:18,560
cert which is the serialized serialized

00:15:17,680 --> 00:15:21,519
library

00:15:18,560 --> 00:15:22,880
eras serialization library rust like

00:15:21,519 --> 00:15:25,440
forwarding

00:15:22,880 --> 00:15:26,480
like uh marshalling or converting

00:15:25,440 --> 00:15:30,399
between different

00:15:26,480 --> 00:15:31,040
types in different formats like to json

00:15:30,399 --> 00:15:33,920
and stuff

00:15:31,040 --> 00:15:34,399
but this is like a generic one but how

00:15:33,920 --> 00:15:37,600
come

00:15:34,399 --> 00:15:40,959
ninth day supports the serialized

00:15:37,600 --> 00:15:44,320
serialization but it doesn't support

00:15:40,959 --> 00:15:48,480
for the python python like

00:15:44,320 --> 00:15:54,399
pyo3 object and or maybe you can search

00:15:48,480 --> 00:15:58,000
type poetry and path

00:15:54,399 --> 00:15:59,519
like empire 3 conversion with less c

00:15:58,000 --> 00:16:03,440
conversion

00:15:59,519 --> 00:16:06,399
and then they are like from from

00:16:03,440 --> 00:16:07,680
now into into pi should be into pi in

00:16:06,399 --> 00:16:10,079
terms

00:16:07,680 --> 00:16:10,959
object so this is the one that is like

00:16:10,079 --> 00:16:15,440
converting

00:16:10,959 --> 00:16:18,560
it to title object and we check here

00:16:15,440 --> 00:16:20,160
do we see to pi object no

00:16:18,560 --> 00:16:21,759
or we didn't see two paragraph but we

00:16:20,160 --> 00:16:23,360
only see

00:16:21,759 --> 00:16:26,399
which is like it will implement the

00:16:23,360 --> 00:16:29,199
cigarette so the serialized

00:16:26,399 --> 00:16:29,680
track is implemented for naive date but

00:16:29,199 --> 00:16:33,360
the

00:16:29,680 --> 00:16:35,120
two pi object the topology is not

00:16:33,360 --> 00:16:40,560
implemented for

00:16:35,120 --> 00:16:40,560
marriage day and how

00:16:45,440 --> 00:16:51,839
and and then let's let's try

00:16:48,399 --> 00:16:51,839
implementing that for ourselves

00:16:52,320 --> 00:16:56,800
and so we write the information for

00:16:56,160 --> 00:17:00,240
ourselves

00:16:56,800 --> 00:17:04,799
in impl to fight object

00:17:00,240 --> 00:17:08,640
for chronology

00:17:04,799 --> 00:17:11,760
yeah okay this is wrong this is wrong

00:17:08,640 --> 00:17:14,400
but this is just an example

00:17:11,760 --> 00:17:16,160
let's see how let's see if it works we

00:17:14,400 --> 00:17:18,959
do it inside our

00:17:16,160 --> 00:17:18,959
trade our

00:17:30,840 --> 00:17:33,840
very

00:17:40,000 --> 00:17:42,320
boom

00:17:44,840 --> 00:17:47,840
boom

00:17:48,320 --> 00:17:52,640
okay sorry sorry too fast okay the joke

00:17:51,679 --> 00:17:55,840
didn't

00:17:52,640 --> 00:17:55,840
he didn't get a joke

00:17:55,919 --> 00:18:03,520
but now why so

00:18:00,320 --> 00:18:03,520
there's there's an error

00:18:04,720 --> 00:18:08,000
then like okay i tried replicating this

00:18:07,440 --> 00:18:11,280
error

00:18:08,000 --> 00:18:15,039
i mean the this is like

00:18:11,280 --> 00:18:15,039
red but

00:18:15,679 --> 00:18:20,000
so only defined in the current trade can

00:18:17,600 --> 00:18:24,960
be implemented for arbitrary type

00:18:20,000 --> 00:18:24,960
what does it mean and you see like

00:18:25,039 --> 00:18:31,840
trade and to pi object is from

00:18:28,720 --> 00:18:34,880
object is from is is from pi

00:18:31,840 --> 00:18:36,960
type o three crate both

00:18:34,880 --> 00:18:38,880
both is wrong different grid but why why

00:18:36,960 --> 00:18:41,919
doesn't this work

00:18:38,880 --> 00:18:42,720
maybe you can try rusty explain this it

00:18:41,919 --> 00:18:44,400
says

00:18:42,720 --> 00:18:46,160
only any create detail in the current

00:18:44,400 --> 00:18:46,640
trade can be implemented for arbitrary

00:18:46,160 --> 00:18:49,840
types

00:18:46,640 --> 00:18:53,840
like this so it doesn't work

00:18:49,840 --> 00:18:57,840
or before because rule and

00:18:53,840 --> 00:18:57,840
this is why we'll be talking

00:18:58,080 --> 00:19:02,960
okay open rule

00:19:04,160 --> 00:19:10,080
uh okay okay i repeat offering rule

00:19:07,679 --> 00:19:11,840
but for those that don't know what's up

00:19:10,080 --> 00:19:12,640
now let's explain but before we go into

00:19:11,840 --> 00:19:14,080
that

00:19:12,640 --> 00:19:16,160
the explanation is based on this

00:19:14,080 --> 00:19:18,080
original ripple

00:19:16,160 --> 00:19:19,919
therefore is that there's a very good

00:19:18,080 --> 00:19:22,480
explanation there

00:19:19,919 --> 00:19:25,840
and before we go into talk about orphan

00:19:22,480 --> 00:19:25,840
rule let's talk about coherence

00:19:26,320 --> 00:19:30,720
exactly it's quite coherent but you can

00:19:28,240 --> 00:19:34,559
just call it coherence

00:19:30,720 --> 00:19:36,840
is like at least one

00:19:34,559 --> 00:19:38,080
chorus at least one implementation of a

00:19:36,840 --> 00:19:42,000
trait

00:19:38,080 --> 00:19:44,320
and at most that can be mentioned of a

00:19:42,000 --> 00:19:46,559
trade for any given time

00:19:44,320 --> 00:19:47,760
for example you have serialized right

00:19:46,559 --> 00:19:51,360
you can only have

00:19:47,760 --> 00:19:54,480
one serialized trade being implemented

00:19:51,360 --> 00:19:56,799
for the any any type

00:19:54,480 --> 00:19:58,640
for example the type just now we want to

00:19:56,799 --> 00:20:02,880
do is nice date

00:19:58,640 --> 00:20:02,880
if you have two if you have two

00:20:03,280 --> 00:20:11,039
if you have two like if you have

00:20:07,360 --> 00:20:13,360
good serialize right then you choose

00:20:11,039 --> 00:20:15,200
and there's like that they will likely

00:20:13,360 --> 00:20:17,280
cause incoherence

00:20:15,200 --> 00:20:18,480
so any programming interface any

00:20:17,280 --> 00:20:19,280
programming language they have like the

00:20:18,480 --> 00:20:22,559
features like

00:20:19,280 --> 00:20:26,159
crazy so they'll either do

00:20:22,559 --> 00:20:28,400
and force coherence by reducing by

00:20:26,159 --> 00:20:30,960
by refusing to compile programs that

00:20:28,400 --> 00:20:34,080
contains complications like

00:20:30,960 --> 00:20:37,120
you implement the serialized here

00:20:34,080 --> 00:20:38,080
once and if you implement serialize for

00:20:37,120 --> 00:20:40,960
the same type

00:20:38,080 --> 00:20:41,919
in another place again so which one when

00:20:40,960 --> 00:20:43,600
the when the

00:20:41,919 --> 00:20:45,840
trade is being called right when the

00:20:43,600 --> 00:20:45,840
function

00:20:46,000 --> 00:20:49,919
will it run so it'll be confusing for

00:20:48,880 --> 00:20:52,400
you

00:20:49,919 --> 00:20:53,760
be done but it will be confusing that

00:20:52,400 --> 00:20:56,159
you you need to

00:20:53,760 --> 00:20:57,280
you need to like specify which original

00:20:56,159 --> 00:21:00,240
trade to use

00:20:57,280 --> 00:21:00,240
so you'll be confusing

00:21:01,039 --> 00:21:04,960
and another way is embrace coherence

00:21:05,760 --> 00:21:09,919
which implementation like which trade to

00:21:07,919 --> 00:21:12,720
use for that

00:21:09,919 --> 00:21:15,600
although rust have the like you can

00:21:12,720 --> 00:21:18,080
specify the origin

00:21:15,600 --> 00:21:19,919
which trade from by the disambiguation

00:21:18,080 --> 00:21:21,840
of

00:21:19,919 --> 00:21:24,159
original function to use but in this

00:21:21,840 --> 00:21:24,559
case russ chooses to enforce coherence

00:21:24,159 --> 00:21:26,880
which

00:21:24,559 --> 00:21:28,840
makes a lot of things easier when

00:21:26,880 --> 00:21:31,840
especially when it

00:21:28,840 --> 00:21:31,840
involves

00:21:33,039 --> 00:21:38,000
so we can talk about offer rule let that

00:21:35,919 --> 00:21:40,720
we know

00:21:38,000 --> 00:21:41,360
that you're that grass right sometimes

00:21:40,720 --> 00:21:43,520
you all

00:21:41,360 --> 00:21:44,400
have written some traits and you might

00:21:43,520 --> 00:21:46,480
notice

00:21:44,400 --> 00:21:47,919
so there are two rules in orphan rule so

00:21:46,480 --> 00:21:51,120
the first rule is you cannot have

00:21:47,919 --> 00:21:52,799
two implement if i'm pl blocks that

00:21:51,120 --> 00:21:54,799
overlap

00:21:52,799 --> 00:21:55,919
you you may probably some of y'all may

00:21:54,799 --> 00:21:58,960
notice this

00:21:55,919 --> 00:22:02,640
where for example trade

00:21:58,960 --> 00:22:05,679
for t and another trade for t

00:22:02,640 --> 00:22:09,039
but in russia do create bounds right

00:22:05,679 --> 00:22:09,919
like debug and display this might this

00:22:09,039 --> 00:22:13,919
might work but

00:22:09,919 --> 00:22:18,559
in in some cases in in many cases right

00:22:13,919 --> 00:22:21,600
the the type can overlap like some types

00:22:18,559 --> 00:22:24,799
implement debug and some types implement

00:22:21,600 --> 00:22:25,440
display and sometimes implement both of

00:22:24,799 --> 00:22:27,120
them

00:22:25,440 --> 00:22:28,799
so what will happen for those that

00:22:27,120 --> 00:22:31,280
implement both of them

00:22:28,799 --> 00:22:32,880
that they both have the same trait then

00:22:31,280 --> 00:22:35,360
which one

00:22:32,880 --> 00:22:36,720
we call like which one which one should

00:22:35,360 --> 00:22:38,240
you follow should we follow the

00:22:36,720 --> 00:22:40,480
should we follow display so it will be

00:22:38,240 --> 00:22:41,039
confusing so you can't you can't do

00:22:40,480 --> 00:22:44,480
overlap

00:22:41,039 --> 00:22:47,760
overlapping mpl

00:22:44,480 --> 00:22:51,200
or types the current will arrive

00:22:47,760 --> 00:22:53,919
is unstable you need to use 90 eras

00:22:51,200 --> 00:22:55,919
and the second rule for offering rule is

00:22:53,919 --> 00:22:59,960
that it consists of is

00:22:55,919 --> 00:23:02,960
often rule and so the

00:22:59,960 --> 00:23:03,280
simplified simplified way of saying this

00:23:02,960 --> 00:23:06,720
is

00:23:03,280 --> 00:23:09,200
both of the trade the both either

00:23:06,720 --> 00:23:10,960
either one of the type or trade must be

00:23:09,200 --> 00:23:12,480
from the same crate like the same crate

00:23:10,960 --> 00:23:14,960
you

00:23:12,480 --> 00:23:16,080
you define must be there why is to

00:23:14,960 --> 00:23:19,679
prevent like

00:23:16,080 --> 00:23:20,960
dependency how so what if both crates

00:23:19,679 --> 00:23:24,159
have the same

00:23:20,960 --> 00:23:27,200
in mpl or even security like

00:23:24,159 --> 00:23:29,200
for example you you have a secret

00:23:27,200 --> 00:23:30,480
you have a secret type secret there's a

00:23:29,200 --> 00:23:33,840
secret crate

00:23:30,480 --> 00:23:37,600
but in another crate right in

00:23:33,840 --> 00:23:38,559
impl the display or secret which you

00:23:37,600 --> 00:23:40,640
don't want

00:23:38,559 --> 00:23:42,720
you purposely you purposely don't want

00:23:40,640 --> 00:23:45,600
the secret type

00:23:42,720 --> 00:23:48,640
to be to have the display trade so

00:23:45,600 --> 00:23:52,000
people can't view the

00:23:48,640 --> 00:23:56,159
but then if like say third-party trade

00:23:52,000 --> 00:23:59,039
implemented and then a user a user

00:23:56,159 --> 00:23:59,600
takes in both the crate one from the

00:23:59,039 --> 00:24:02,880
secret

00:23:59,600 --> 00:24:06,880
type the secret crate another

00:24:02,880 --> 00:24:06,880
and another one from another crate

00:24:07,120 --> 00:24:13,919
for the secret means means that the

00:24:11,760 --> 00:24:16,080
display you can you can print the secret

00:24:13,919 --> 00:24:19,440
now which which will be

00:24:16,080 --> 00:24:22,320
which will be weird like uh

00:24:19,440 --> 00:24:25,440
besides it breaks some of the stuff

00:24:22,320 --> 00:24:28,559
there which it doesn't want to do

00:24:25,440 --> 00:24:32,480
and other than this right it also allows

00:24:28,559 --> 00:24:33,520
impl to be added so new stuff can just

00:24:32,480 --> 00:24:36,720
be added like

00:24:33,520 --> 00:24:37,679
what is like a already have the same ipl

00:24:36,720 --> 00:24:39,360
and then

00:24:37,679 --> 00:24:41,279
and then you'll click edit again and

00:24:39,360 --> 00:24:44,080
then it will breaks the

00:24:41,279 --> 00:24:45,279
old lab rules so in our case right you

00:24:44,080 --> 00:24:48,559
can see

00:24:45,279 --> 00:24:52,159
all comes from both different grid so

00:24:48,559 --> 00:24:52,159
how how of it

00:24:52,640 --> 00:24:55,600
okay note that i

00:24:55,760 --> 00:25:00,480
i show i'll show some solutions that was

00:24:58,080 --> 00:25:02,080
done for

00:25:00,480 --> 00:25:04,159
there are also other solutions like

00:25:02,080 --> 00:25:07,120
using specialization but there is

00:25:04,159 --> 00:25:08,400
in nightly only so both of these like

00:25:07,120 --> 00:25:10,960
viable solutions that we

00:25:08,400 --> 00:25:12,080
see the easiest solution is true new

00:25:10,960 --> 00:25:15,679
type

00:25:12,080 --> 00:25:18,799
you can see for uh

00:25:15,679 --> 00:25:18,799
piotr chrono crate

00:25:19,600 --> 00:25:23,039
so what it does is it just wraps around

00:25:21,840 --> 00:25:26,080
the

00:25:23,039 --> 00:25:29,760
knife in a new type

00:25:26,080 --> 00:25:30,159
and it adds you have all the original

00:25:29,760 --> 00:25:32,240
stuff

00:25:30,159 --> 00:25:34,640
it delegates all the original stuff to

00:25:32,240 --> 00:25:36,960
the original implementation

00:25:34,640 --> 00:25:38,400
and basically okay here they do a lot of

00:25:36,960 --> 00:25:40,400
macro so

00:25:38,400 --> 00:25:41,600
uh so basically what it does is like

00:25:40,400 --> 00:25:44,720
this you can see like

00:25:41,600 --> 00:25:48,159
a struck naive that is

00:25:44,720 --> 00:25:50,440
basically this is the original so the

00:25:48,159 --> 00:25:52,000
inner magnetic is the original

00:25:50,440 --> 00:25:55,279
chronology

00:25:52,000 --> 00:25:57,120
and this is pi o3 chrono like that

00:25:55,279 --> 00:25:58,400
so you can just use the priority

00:25:57,120 --> 00:26:02,640
chronology

00:25:58,400 --> 00:26:06,320
and the conversion

00:26:02,640 --> 00:26:09,039
between between to the

00:26:06,320 --> 00:26:09,039
python date

00:26:09,760 --> 00:26:15,120
for better pi 03 integration uh this

00:26:13,039 --> 00:26:18,320
approach

00:26:15,120 --> 00:26:21,360
upstream you can just write the separate

00:26:18,320 --> 00:26:23,679
and you can just keep your own msrv

00:26:21,360 --> 00:26:26,240
like your own last version you can

00:26:23,679 --> 00:26:28,640
delegate everything and you have control

00:26:26,240 --> 00:26:29,919
but uh it's not that agronomic when you

00:26:28,640 --> 00:26:32,159
look at it because

00:26:29,919 --> 00:26:33,679
you you'll need to improve click from

00:26:32,159 --> 00:26:39,840
another create which

00:26:33,679 --> 00:26:39,840
like there's like 10 integration like

00:26:41,039 --> 00:26:45,279
that would be weird right but we see

00:26:43,120 --> 00:26:45,919
that hey how come chronolog already

00:26:45,279 --> 00:26:49,279
supports

00:26:45,919 --> 00:26:52,320
cert but chronos and support pyotr

00:26:49,279 --> 00:26:53,600
so means that can you can directly just

00:26:52,320 --> 00:26:57,440
put

00:26:53,600 --> 00:26:57,440
iota integration into chrono right

00:26:57,520 --> 00:27:02,960
and so this approach may not be good if

00:27:00,559 --> 00:27:04,799
you want to do it for pro like the

00:27:02,960 --> 00:27:05,200
proper integration between popular

00:27:04,799 --> 00:27:07,840
crates

00:27:05,200 --> 00:27:09,760
uh called crates like pile tree or party

00:27:07,840 --> 00:27:13,679
is not a caucus but like cert

00:27:09,760 --> 00:27:13,679
ideally you want to have

00:27:14,480 --> 00:27:18,399
let's say if you have a telegram or

00:27:17,600 --> 00:27:21,200
discord

00:27:18,399 --> 00:27:23,039
api crate you might want to directly add

00:27:21,200 --> 00:27:26,080
a feature to allow

00:27:23,039 --> 00:27:27,840
to implement uh search for your own for

00:27:26,080 --> 00:27:28,880
your library so other people can use or

00:27:27,840 --> 00:27:32,640
even pyrotree

00:27:28,880 --> 00:27:33,200
and stuff and today we'll be talking

00:27:32,640 --> 00:27:35,200
about

00:27:33,200 --> 00:27:36,720
how to integrate it directly with the

00:27:35,200 --> 00:27:38,799
library

00:27:36,720 --> 00:27:41,360
i i did a pull request which is like

00:27:38,799 --> 00:27:41,360
halfway

00:27:44,720 --> 00:27:51,840
so i'll discuss how we did it

00:27:48,720 --> 00:27:52,640
and one of the main benefits we we have

00:27:51,840 --> 00:27:55,039
here is we

00:27:52,640 --> 00:27:56,480
it can you detect utilize the underlying

00:27:55,039 --> 00:27:59,600
data directly

00:27:56,480 --> 00:28:00,159
like the chrono chrono right in some

00:27:59,600 --> 00:28:02,559
parts

00:28:00,159 --> 00:28:04,159
that the way their story is are in a

00:28:02,559 --> 00:28:06,320
very compact form

00:28:04,159 --> 00:28:08,640
for the date they store they store it in

00:28:06,320 --> 00:28:10,799
like two use size and then they store

00:28:08,640 --> 00:28:13,679
everything there

00:28:10,799 --> 00:28:14,320
but uh if we if you use the high level

00:28:13,679 --> 00:28:15,760
api

00:28:14,320 --> 00:28:17,520
we may need to do some additional

00:28:15,760 --> 00:28:19,679
instruction

00:28:17,520 --> 00:28:20,960
in some cases maybe russ didn't get to

00:28:19,679 --> 00:28:24,080
optimize it

00:28:20,960 --> 00:28:26,080
but if we if we use the email like the

00:28:24,080 --> 00:28:28,880
inner functions already right

00:28:26,080 --> 00:28:31,200
it can probably reduce like the function

00:28:28,880 --> 00:28:34,080
calls

00:28:31,200 --> 00:28:34,799
but in our case just for this case just

00:28:34,080 --> 00:28:37,840
for this

00:28:34,799 --> 00:28:40,320
the chrono is a bit troublesome because

00:28:37,840 --> 00:28:42,840
the the minimum supported rust version

00:28:40,320 --> 00:28:46,080
is low

00:28:42,840 --> 00:28:48,559
even uh rust edition 2018 so it's the

00:28:46,080 --> 00:28:51,679
2015 edition

00:28:48,559 --> 00:28:53,279
and we think like so we decided to

00:28:51,679 --> 00:28:56,080
change chronolog upstream

00:28:53,279 --> 00:28:57,679
but why not change 503 but the

00:28:56,080 --> 00:29:00,799
developers in python three say

00:28:57,679 --> 00:29:04,240
okay so you can you can add one of

00:29:00,799 --> 00:29:07,039
the trade to and what it either

00:29:04,240 --> 00:29:08,640
you can add it to either chrono or pi 03

00:29:07,039 --> 00:29:10,799
both works

00:29:08,640 --> 00:29:12,320
so for up you can if you want to

00:29:10,799 --> 00:29:15,520
contribute upstream

00:29:12,320 --> 00:29:18,720
so you can up sma to both

00:29:15,520 --> 00:29:20,880
both sides your priority developers say

00:29:18,720 --> 00:29:23,120
they can edit to their site that also

00:29:20,880 --> 00:29:23,120
works

00:29:23,840 --> 00:29:30,559
and how it how it works is

00:29:27,360 --> 00:29:32,240
cargo cargo features like

00:29:30,559 --> 00:29:34,399
in when you use chrono right you can

00:29:32,240 --> 00:29:36,880
just specify like 503

00:29:34,399 --> 00:29:38,799
if you want the pi 03 feature then it

00:29:36,880 --> 00:29:42,159
will compile that pyro3 part

00:29:38,799 --> 00:29:44,240
so for those that doesn't need the

00:29:42,159 --> 00:29:45,600
for those that doesn't need this pylori

00:29:44,240 --> 00:29:48,159
integration right

00:29:45,600 --> 00:29:48,159
this will be

00:29:48,720 --> 00:29:53,039
so it makes use of the car you go

00:29:50,640 --> 00:29:55,279
feature flat

00:29:53,039 --> 00:29:56,480
as in it can it can it can only compile

00:29:55,279 --> 00:29:58,799
when needed

00:29:56,480 --> 00:29:59,919
you just need to specify that you want

00:29:58,799 --> 00:30:02,799
this

00:29:59,919 --> 00:30:03,760
but it's uh it's there by default i

00:30:02,799 --> 00:30:06,480
think it's therefore

00:30:03,760 --> 00:30:06,480
by default

00:30:07,600 --> 00:30:14,080
it's optional so i just

00:30:10,960 --> 00:30:15,760
added this line to their cargo cargo

00:30:14,080 --> 00:30:19,279
team

00:30:15,760 --> 00:30:21,600
and and how to use the new feature

00:30:19,279 --> 00:30:22,320
if it was added to the mpc feature

00:30:21,600 --> 00:30:25,039
usually you

00:30:22,320 --> 00:30:26,240
you want to have like a feature python

00:30:25,039 --> 00:30:28,880
transaction

00:30:26,240 --> 00:30:30,240
to add this new feature and this is the

00:30:28,880 --> 00:30:32,559
just a dependency part

00:30:30,240 --> 00:30:34,960
so implicitly this will create a new

00:30:32,559 --> 00:30:34,960
feature

00:30:35,279 --> 00:30:38,480
you do it

00:30:38,559 --> 00:30:43,360
this is the feature flag we usually i

00:30:41,760 --> 00:30:44,799
see that the existing code that put it

00:30:43,360 --> 00:30:48,559
inside a module

00:30:44,799 --> 00:30:51,679
let's put a new module there and

00:30:48,559 --> 00:30:53,679
the cfg the cfp is for conditional

00:30:51,679 --> 00:30:55,039
this is the macro for conditional

00:30:53,679 --> 00:30:58,720
compilation

00:30:55,039 --> 00:31:03,039
reflect so if so in this part like i say

00:30:58,720 --> 00:31:05,279
if it's enabled this part will compile

00:31:03,039 --> 00:31:06,559
so this part will be if this will

00:31:05,279 --> 00:31:09,760
compile right means that

00:31:06,559 --> 00:31:10,559
now we'll quote support now naive state

00:31:09,760 --> 00:31:13,039
supports

00:31:10,559 --> 00:31:15,679
required object so you can see that we

00:31:13,039 --> 00:31:18,559
can we can make use of the internal

00:31:15,679 --> 00:31:19,919
methods that mdf is the and this is one

00:31:18,559 --> 00:31:24,399
of the internal

00:31:19,919 --> 00:31:24,399
like a private function within knife

00:31:25,039 --> 00:31:30,799
and you can directly use the nmda

00:31:28,399 --> 00:31:33,200
month and mdf day directly and we can

00:31:30,799 --> 00:31:36,399
construct a pi date

00:31:33,200 --> 00:31:38,640
and we can and then we also skip the

00:31:36,399 --> 00:31:39,600
parts because it's the same we just do

00:31:38,640 --> 00:31:41,600
some processing

00:31:39,600 --> 00:31:43,120
it's just convert converting to python

00:31:41,600 --> 00:31:46,240
object and otherwise just converting

00:31:43,120 --> 00:31:49,360
from python object

00:31:46,240 --> 00:31:51,919
yeah so this now

00:31:49,360 --> 00:31:52,960
you all should understand like why why

00:31:51,919 --> 00:31:55,919
can't you in just

00:31:52,960 --> 00:31:57,279
implement the party third party trade

00:31:55,919 --> 00:32:01,519
for third party tech because

00:31:57,279 --> 00:32:05,360
there's a something called orphan rule

00:32:01,519 --> 00:32:07,519
and yeah it's not done yet

00:32:05,360 --> 00:32:08,880
even the even the new type one they just

00:32:07,519 --> 00:32:12,080
do like uh

00:32:08,880 --> 00:32:14,320
you just do some simple thing there

00:32:12,080 --> 00:32:14,320
to

00:32:23,440 --> 00:32:26,559
yeah yes we just like put into the

00:32:25,519 --> 00:32:29,600
original like

00:32:26,559 --> 00:32:30,080
file we just add so like the date is

00:32:29,600 --> 00:32:32,799
here

00:32:30,080 --> 00:32:34,559
we just add the implementation here and

00:32:32,799 --> 00:32:38,240
the test is also here

00:32:34,559 --> 00:32:40,240
so this is how it works is there any

00:32:38,240 --> 00:32:43,440
question

00:32:40,240 --> 00:32:44,080
we have another example code that shows

00:32:43,440 --> 00:32:47,840
us how

00:32:44,080 --> 00:32:48,559
this works how this works what do you

00:32:47,840 --> 00:32:53,440
mean

00:32:48,559 --> 00:32:53,440
like after enter right is it

00:32:58,080 --> 00:33:03,200
okay uh ryan i don't have sample

00:33:03,679 --> 00:33:11,840
i have but i i probably can't show that

00:33:13,200 --> 00:33:16,880
so you see right right once we

00:33:15,039 --> 00:33:17,519
implemented that we don't need to do

00:33:16,880 --> 00:33:20,880
this

00:33:17,519 --> 00:33:23,919
we can just throw this away so

00:33:20,880 --> 00:33:24,880
when when we do a pi object right so

00:33:23,919 --> 00:33:26,880
previously we can't

00:33:24,880 --> 00:33:28,399
we can't do to pi object directly is

00:33:26,880 --> 00:33:31,519
because

00:33:28,399 --> 00:33:32,480
date is not implemented implemented for

00:33:31,519 --> 00:33:35,039
like the

00:33:32,480 --> 00:33:36,960
from pi like to pi object but after we

00:33:35,039 --> 00:33:38,240
do this right we can just already we can

00:33:36,960 --> 00:33:42,000
throw this away

00:33:38,240 --> 00:33:45,840
so we can just have self dot day

00:33:42,000 --> 00:33:45,840
object then it will directly

00:33:46,000 --> 00:33:53,840
convert the knife date into the

00:33:49,200 --> 00:33:53,840
titan date time

00:33:55,519 --> 00:33:58,880
will be it will be like this

00:34:02,799 --> 00:34:06,159
so rather than this you can you can just

00:34:05,039 --> 00:34:07,760
do like

00:34:06,159 --> 00:34:12,399
you can just do like this and then the

00:34:07,760 --> 00:34:12,399
type the the type will be like uh

00:34:13,440 --> 00:34:18,960
the type will be like don't need to

00:34:16,960 --> 00:34:20,000
do the type yeah every time the type

00:34:18,960 --> 00:34:23,679
will be inferred

00:34:20,000 --> 00:34:27,200
but the type here will be

00:34:23,679 --> 00:34:29,200
it should be type any something

00:34:27,200 --> 00:34:30,960
so it's this is similar to the original

00:34:29,200 --> 00:34:34,560
chrono implementation because the

00:34:30,960 --> 00:34:37,200
if you see the third is just here

00:34:34,560 --> 00:34:37,200
it's nearby

00:34:38,960 --> 00:34:42,159
so it's like it's like you can just use

00:34:40,879 --> 00:34:45,440
the third

00:34:42,159 --> 00:34:46,879
function directly from chrono like in

00:34:45,440 --> 00:34:50,560
chrono you can just

00:34:46,879 --> 00:34:53,200
do okay for example in chrono you can

00:34:50,560 --> 00:34:53,200
just do this

00:35:00,839 --> 00:35:03,839
just

00:35:22,160 --> 00:35:26,240
i added free dependency here

00:35:26,480 --> 00:35:31,839
okay for example i want to add like

00:35:35,440 --> 00:35:40,320
all right i want to serialize the

00:35:38,160 --> 00:35:43,599
chronology into

00:35:40,320 --> 00:35:43,599
into json

00:35:43,680 --> 00:35:47,599
this is not this not the original like

00:35:46,400 --> 00:35:49,200
the conversion into

00:35:47,599 --> 00:35:51,040
pi object but i just show serialized

00:35:49,200 --> 00:35:54,400
because serialize is the same thing

00:35:51,040 --> 00:35:59,839
it's the third party trait

00:35:54,400 --> 00:35:59,839
so i'll just do a derived series

00:36:08,880 --> 00:36:13,839
okay just like bomb

00:36:22,960 --> 00:36:29,839
okay if you want to write to

00:36:27,520 --> 00:36:29,839
case

00:36:30,880 --> 00:36:36,290
what okay

00:36:33,180 --> 00:36:36,290
[Applause]

00:36:36,880 --> 00:36:40,560
i probably is that call

00:36:42,560 --> 00:36:55,839
the tonic time will be like uh

00:36:46,320 --> 00:36:55,839
next time

00:36:58,880 --> 00:37:05,760
oh the bomb will be

00:37:02,880 --> 00:37:05,760
bomb equals to

00:37:05,920 --> 00:37:23,839
the bomb will be detonating in

00:37:10,320 --> 00:37:23,839
like okay

00:37:34,839 --> 00:37:37,839
um

00:37:39,760 --> 00:37:51,839
so just use now

00:38:03,359 --> 00:38:08,800
import from everything from chrono i

00:38:06,320 --> 00:38:08,800
just decided

00:38:09,440 --> 00:38:15,280
and this will be

00:38:12,560 --> 00:38:15,280
the time

00:38:16,000 --> 00:38:20,640
okay chrono regarding coronal they have

00:38:18,320 --> 00:38:21,280
like a knife you see why it is nice date

00:38:20,640 --> 00:38:23,520
and night

00:38:21,280 --> 00:38:25,119
time right nice date time is the the

00:38:23,520 --> 00:38:28,480
daytime without time zone

00:38:25,119 --> 00:38:32,400
and the time have time zone oh we want

00:38:28,480 --> 00:38:35,760
to put local here

00:38:32,400 --> 00:38:47,839
so we just do circle now

00:38:35,760 --> 00:38:47,839
and add can we add

00:38:50,480 --> 00:38:54,480
okay we can add duration and the

00:38:52,880 --> 00:39:00,560
duration

00:38:54,480 --> 00:39:03,619
so local now at situation

00:39:00,560 --> 00:39:03,619
[Music]

00:39:03,680 --> 00:39:15,839
duration like in five minutes

00:39:17,599 --> 00:39:21,599
foreign duration i need to import it

00:39:23,520 --> 00:39:26,960
and the bomb will detonate in five five

00:39:25,520 --> 00:39:30,160
minutes

00:39:26,960 --> 00:39:30,160
insert json

00:39:32,800 --> 00:39:43,839
i just do two string how to use

00:39:46,160 --> 00:39:50,640
i'll just print it out and bring the

00:39:48,560 --> 00:39:52,960
json out

00:39:50,640 --> 00:39:56,720
and out of convert is lowercase how to

00:39:52,960 --> 00:40:00,079
do that

00:39:56,720 --> 00:40:03,680
forward i rename all

00:40:00,079 --> 00:40:03,680
so rename all

00:40:04,079 --> 00:40:07,920
my case monkeys

00:40:08,720 --> 00:40:12,240
if you want jason if you want jason we

00:40:10,480 --> 00:40:14,880
want to rename all to

00:40:12,240 --> 00:40:14,880
camel case

00:40:15,599 --> 00:40:18,319
we do a check

00:40:18,960 --> 00:40:25,839
string oh is a result

00:40:26,720 --> 00:40:29,440
okay run

00:40:33,440 --> 00:40:39,839
so you see like the tornado time and

00:40:36,640 --> 00:40:42,960
is is so

00:40:39,839 --> 00:40:44,960
you see that uh chrono this is

00:40:42,960 --> 00:40:47,760
realized what this does is it will

00:40:44,960 --> 00:40:51,520
generate a serialized trait for

00:40:47,760 --> 00:40:54,640
bomb and yeah it's a bit hard to

00:40:51,520 --> 00:40:57,760
explain how they have serializer and

00:40:54,640 --> 00:40:59,760
and serialize this this is a serializer

00:40:57,760 --> 00:41:02,400
this is this requires the stuff to be

00:40:59,760 --> 00:41:05,599
receivable

00:41:02,400 --> 00:41:07,920
and this part and

00:41:05,599 --> 00:41:08,640
it won't work right if if daytime

00:41:07,920 --> 00:41:11,920
doesn't

00:41:08,640 --> 00:41:15,680
doesn't support uh cert

00:41:11,920 --> 00:41:19,200
this will work if they have the support

00:41:15,680 --> 00:41:22,640
use case so let's say if

00:41:19,200 --> 00:41:23,760
if i remove the feature right i save

00:41:22,640 --> 00:41:26,800
chrono

00:41:23,760 --> 00:41:26,800
i remove the feature

00:41:29,599 --> 00:41:34,880
and then you see that it won't work like

00:41:31,839 --> 00:41:37,040
serialize is not implemented for this

00:41:34,880 --> 00:41:38,880
so so now you see like the use case is

00:41:37,040 --> 00:41:41,119
like the the integration is like

00:41:38,880 --> 00:41:43,200
smoother you can directly

00:41:41,119 --> 00:41:44,960
you can directly just use the serialized

00:41:43,200 --> 00:41:47,680
clip the series that

00:41:44,960 --> 00:41:49,040
serialize for the original stuff so this

00:41:47,680 --> 00:41:52,560
is the

00:41:49,040 --> 00:41:53,680
third chrono and then and then you need

00:41:52,560 --> 00:41:56,400
to imp

00:41:53,680 --> 00:41:58,160
uh rather than chrono you use third

00:41:56,400 --> 00:42:00,960
chrono right

00:41:58,160 --> 00:42:01,440
and then you can you can just do like

00:42:00,960 --> 00:42:04,480
just

00:42:01,440 --> 00:42:07,040
add a feature here and then

00:42:04,480 --> 00:42:07,040
this will work

00:42:07,760 --> 00:42:10,880
so it will just give you the

00:42:09,920 --> 00:42:14,160
determination

00:42:10,880 --> 00:42:17,200
time e minis

00:42:14,160 --> 00:42:22,400
yeah it's always correct

00:42:17,200 --> 00:42:22,400
any question yeah this is quite you

00:42:22,560 --> 00:42:26,240
through this i like this quite useful

00:42:25,520 --> 00:42:30,800
here we name

00:42:26,240 --> 00:42:31,760
every the what is called snake case to

00:42:30,800 --> 00:42:34,480
camera case

00:42:31,760 --> 00:42:34,960
everything inside here you can do it on

00:42:34,480 --> 00:42:38,400
here

00:42:34,960 --> 00:42:38,400
but yeah i just leave

00:42:40,160 --> 00:42:46,319
any question what's the use case

00:42:44,000 --> 00:42:48,240
of this so it's just it just provides a

00:42:46,319 --> 00:42:51,200
click it just implement the trade

00:42:48,240 --> 00:42:52,720
that's that's it but uh it gives a

00:42:51,200 --> 00:42:59,839
better integration

00:42:52,720 --> 00:42:59,839
when you're using different stuff

00:43:06,640 --> 00:43:09,520
i am frozen

00:43:09,680 --> 00:43:16,240
you are not frozen

00:43:13,119 --> 00:43:17,200
hello i see some new faces in the chat

00:43:16,240 --> 00:43:21,280
room

00:43:17,200 --> 00:43:21,280
hello everyone who joined us today

00:43:25,119 --> 00:43:31,280
okay uh any questions

00:43:28,319 --> 00:43:31,280
to ask

00:43:31,440 --> 00:43:35,599
from the live audience live participants

00:43:34,880 --> 00:43:37,200
and

00:43:35,599 --> 00:43:38,960
any questions can you just can just talk

00:43:37,200 --> 00:43:39,280
also can you can type in the chat i

00:43:38,960 --> 00:43:42,480
can't

00:43:39,280 --> 00:43:44,960
see only you can just if not

00:43:42,480 --> 00:43:47,680
we will stop the stream then we will do

00:43:44,960 --> 00:43:47,680
some more chat

00:43:48,240 --> 00:43:51,440
i also do this you want to see this okay

00:43:50,880 --> 00:43:53,280
maybe

00:43:51,440 --> 00:43:54,480
in the middle i can explain that there's

00:43:53,280 --> 00:43:58,400
local c

00:43:54,480 --> 00:44:01,920
and there's fixed time offset here

00:43:58,400 --> 00:44:03,680
is the library the time chrono if

00:44:01,920 --> 00:44:05,440
it's a most popular time library not

00:44:03,680 --> 00:44:08,160
very feature

00:44:05,440 --> 00:44:10,160
feature full because it doesn't support

00:44:08,160 --> 00:44:11,920
doesn't support iana

00:44:10,160 --> 00:44:15,200
and chrono only support fixed time

00:44:11,920 --> 00:44:18,319
offset which the people say is bad

00:44:15,200 --> 00:44:21,520
but it's good enough for utc stuff

00:44:18,319 --> 00:44:25,680
like the cleaner for like the rfc they

00:44:21,520 --> 00:44:29,119
the iso 8601 date

00:44:25,680 --> 00:44:31,440
or the rp3 8339 date

00:44:29,119 --> 00:44:33,359
it's good enough for that but it doesn't

00:44:31,440 --> 00:44:36,079
support local

00:44:33,359 --> 00:44:37,280
it doesn't support like different

00:44:36,079 --> 00:44:39,680
calendar system

00:44:37,280 --> 00:44:40,800
it doesn't support that like it is

00:44:39,680 --> 00:44:44,000
already built with

00:44:40,800 --> 00:44:47,040
gargoyle calendar in mind like

00:44:44,000 --> 00:44:51,280
the day is just a good

00:44:47,040 --> 00:44:54,079
girl day i'm pronouncing correctly

00:44:51,280 --> 00:44:55,359
so the this is like a generic the local

00:44:54,079 --> 00:44:58,800
is the local time

00:44:55,359 --> 00:45:01,440
and utc is the time the differentiate

00:44:58,800 --> 00:45:04,400
between that but it's not it's not like

00:45:01,440 --> 00:45:08,240
all features is there

00:45:04,400 --> 00:45:10,560
0.4 yeah 0.4

00:45:08,240 --> 00:45:19,520
but it's more feature proof so almost

00:45:10,560 --> 00:45:23,520
everything is there

00:45:19,520 --> 00:45:23,520
see any questions from

00:45:23,839 --> 00:45:29,359
rome and youtube i guess we can stop the

00:45:27,359 --> 00:45:31,520
stream now then we can talk

00:45:29,359 --> 00:45:33,280
a little bit more if you're interested

00:45:31,520 --> 00:45:35,760
in joining in this court chat room

00:45:33,280 --> 00:45:38,079
please go to

00:45:35,760 --> 00:45:40,800
our telegram chat room to get the link

00:45:38,079 --> 00:45:40,800
to discord

00:45:41,200 --> 00:45:47,520
we'll see you again in july

00:45:45,520 --> 00:45:48,880
and hopefully everything gets better

00:45:47,520 --> 00:45:52,880
then stay

00:45:48,880 --> 00:45:52,880
strong and stay safe everyone

00:45:56,680 --> 00:45:59,680

YouTube URL: https://www.youtube.com/watch?v=L3X-KJcGNg4


