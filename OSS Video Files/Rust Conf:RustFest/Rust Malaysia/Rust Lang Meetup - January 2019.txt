Title: Rust Lang Meetup - January 2019
Publication date: 2019-01-10
Playlist: Rust Malaysia
Description: 
	
Captions: 
	00:01:14,299 --> 00:01:20,820
just keep your party I'm basically I'm

00:01:18,930 --> 00:01:21,540
just gonna be talking right Georgia and

00:01:20,820 --> 00:01:26,850
how it works

00:01:21,540 --> 00:01:30,240
I mean internally how how it works so I

00:01:26,850 --> 00:01:32,250
said oh what is a closure so it's a

00:01:30,240 --> 00:01:34,799
function that can directly use variable

00:01:32,250 --> 00:01:39,229
from the scope in which it is defined so

00:01:34,799 --> 00:01:42,150
usually in most programming language

00:01:39,229 --> 00:01:45,659
closure is associated with like lambda

00:01:42,150 --> 00:01:49,649
as in Python or like an anonymous

00:01:45,659 --> 00:01:53,040
function but those two are not really

00:01:49,649 --> 00:01:55,079
exactly the same so closure is like an

00:01:53,040 --> 00:01:59,640
environment that basically captures all

00:01:55,079 --> 00:02:04,049
the variable from the scope which is

00:01:59,640 --> 00:02:08,600
just define love basically so this is an

00:02:04,049 --> 00:02:08,600
example from Russ

00:02:08,670 --> 00:02:23,230
can I assume okay cool

00:02:17,250 --> 00:02:26,530
okay so some some some terms so here we

00:02:23,230 --> 00:02:31,120
have I mean this is how we define

00:02:26,530 --> 00:02:32,650
closure in reps so we have like my

00:02:31,120 --> 00:02:37,630
closure and then you get like like a

00:02:32,650 --> 00:02:41,260
double pipe double pipe here because

00:02:37,630 --> 00:02:44,170
there's no input basically and then we

00:02:41,260 --> 00:02:47,340
call a function like do something and we

00:02:44,170 --> 00:02:52,480
pass a reference of text here and then

00:02:47,340 --> 00:02:55,540
seeing this variable is not since this

00:02:52,480 --> 00:02:57,700
variable basically the the scope of the

00:02:55,540 --> 00:03:00,850
variable is from from the outside of the

00:02:57,700 --> 00:03:04,330
culture so we call this text variable a

00:03:00,850 --> 00:03:06,190
captured variable so and then then we

00:03:04,330 --> 00:03:14,560
just like call my closure here just to

00:03:06,190 --> 00:03:20,579
run the anonymous function so here we

00:03:14,560 --> 00:03:24,400
have a closure that is written with with

00:03:20,579 --> 00:03:26,380
with a language with GC garbage

00:03:24,400 --> 00:03:34,720
collector language basically so we have

00:03:26,380 --> 00:03:38,890
a function main that basically create a

00:03:34,720 --> 00:03:41,290
function that at one to a given number

00:03:38,890 --> 00:03:45,090
so we give it a five and then it returns

00:03:41,290 --> 00:03:48,790
a function that basically at one to the

00:03:45,090 --> 00:03:52,750
to the to the number that we pass in and

00:03:48,790 --> 00:03:55,900
that we get back the result here and I

00:03:52,750 --> 00:03:59,530
will print it so this was fine in any

00:03:55,900 --> 00:04:02,829
language with GC but what if we were to

00:03:59,530 --> 00:04:06,700
rewrite this in Rus so we have this

00:04:02,829 --> 00:04:10,470
function written in Rush and you see my

00:04:06,700 --> 00:04:17,470
first is like the there's no no really a

00:04:10,470 --> 00:04:21,729
problem so if we try to compile it then

00:04:17,470 --> 00:04:23,370
we have that it says I mean like it

00:04:21,729 --> 00:04:25,479
cannot compare then it gives you like a

00:04:23,370 --> 00:04:27,430
like a cryptic error if you're not

00:04:25,479 --> 00:04:30,130
familiar with rush that closure may out

00:04:27,430 --> 00:04:31,199
leaf Deacon function equals 1 what does

00:04:30,130 --> 00:04:38,710
it mean

00:04:31,199 --> 00:04:43,300
so yes that's correct

00:04:38,710 --> 00:04:45,940
so but we the solution is pretty simple

00:04:43,300 --> 00:04:48,340
but we do want to understand why this

00:04:45,940 --> 00:04:51,100
actually doesn't doesn't really work in

00:04:48,340 --> 00:05:49,600
rice because rice has no GC so in order

00:04:51,100 --> 00:05:54,759
to understand that okay I think so here

00:05:49,600 --> 00:05:56,080
we have a function that we have to

00:05:54,759 --> 00:05:59,949
function basically the main function and

00:05:56,080 --> 00:06:01,479
the add one function but this is just no

00:05:59,949 --> 00:06:03,669
more function ordinary function nothing

00:06:01,479 --> 00:06:08,460
nothing unusual so I just want to show

00:06:03,669 --> 00:06:10,900
how how the memory location works so we

00:06:08,460 --> 00:06:12,970
once we run the program we go in to me

00:06:10,900 --> 00:06:16,419
and then we initialize like step frame

00:06:12,970 --> 00:06:18,340
or or in CS people usually call it like

00:06:16,419 --> 00:06:19,919
activation record or something like that

00:06:18,340 --> 00:06:27,490
you know

00:06:19,919 --> 00:06:32,169
No okay so we run the first line which

00:06:27,490 --> 00:06:34,539
is 5 and then we elope we allocate 5

00:06:32,169 --> 00:06:37,750
basically like a object representation

00:06:34,539 --> 00:06:40,419
for example piping basically present 5

00:06:37,750 --> 00:06:42,669
as an object in the internship and then

00:06:40,419 --> 00:06:46,380
in the stack frame we have 0.25 that

00:06:42,669 --> 00:06:49,750
basically point to the to the heap and

00:06:46,380 --> 00:06:51,990
then we go to the next line and then we

00:06:49,750 --> 00:06:55,240
run the add one function which basically

00:06:51,990 --> 00:06:58,090
do the same thing allocate one to the

00:06:55,240 --> 00:07:01,810
heap and then a pointer from one to the

00:06:58,090 --> 00:07:03,610
hip and then when we return the when we

00:07:01,810 --> 00:07:08,289
return from the function we get a result

00:07:03,610 --> 00:07:11,320
and since soon we since the substrate is

00:07:08,289 --> 00:07:12,970
no longer needed because there's no

00:07:11,320 --> 00:07:16,900
other variable that reference to be

00:07:12,970 --> 00:07:19,300
anything that from the stack frame the

00:07:16,900 --> 00:07:26,220
this one get pull off from this type and

00:07:19,300 --> 00:07:28,840
then we print the result now let's see

00:07:26,220 --> 00:07:32,530
from the we have a function that

00:07:28,840 --> 00:07:34,539
basically create a closure that do the

00:07:32,530 --> 00:07:36,880
same thing but instead of doing it

00:07:34,539 --> 00:07:38,620
directly we written a function so it's a

00:07:36,880 --> 00:07:41,080
non is written and anonymous function

00:07:38,620 --> 00:07:44,469
which also closure because it reference

00:07:41,080 --> 00:07:49,349
1 here inside the written anonymous

00:07:44,469 --> 00:07:56,199
function so we run it again we had five

00:07:49,349 --> 00:08:00,639
we have five are like usual and then we

00:07:56,199 --> 00:08:04,180
are back in the one stack frame again he

00:08:00,639 --> 00:08:06,639
likes one and then what happens that

00:08:04,180 --> 00:08:12,090
when we return back from the add one

00:08:06,639 --> 00:08:15,699
function this couplet basically calls a

00:08:12,090 --> 00:08:16,360
strap or some sort of representation of

00:08:15,699 --> 00:08:22,509
a closure

00:08:16,360 --> 00:08:23,940
I give it like a friend here yeah it's

00:08:22,509 --> 00:08:27,210
not really a function is just like a

00:08:23,940 --> 00:08:31,190
representation this is just a high level

00:08:27,210 --> 00:08:34,400
how just how language with GC works

00:08:31,190 --> 00:08:38,450
so here it'd be closure basically has to

00:08:34,400 --> 00:08:41,919
reference to one because we have one

00:08:38,450 --> 00:08:46,430
here that still need to be reference

00:08:41,919 --> 00:08:49,400
here okay here what happens is that it

00:08:46,430 --> 00:08:51,440
depends on the programming language

00:08:49,400 --> 00:08:53,450
yourself so for example like Python do

00:08:51,440 --> 00:08:57,730
like a reference code so like one

00:08:53,450 --> 00:09:00,550
so the garbage collector will watch the

00:08:57,730 --> 00:09:04,670
the heap basically and then it will

00:09:00,550 --> 00:09:06,860
collect all the audio reference count

00:09:04,670 --> 00:09:08,540
that hit zero basically but one

00:09:06,860 --> 00:09:11,450
reference count is not 0 because

00:09:08,540 --> 00:09:13,010
Catholic basically still pointing to one

00:09:11,450 --> 00:09:15,770
so basically there's still a reference

00:09:13,010 --> 00:09:18,590
that using 1 and for example like

00:09:15,770 --> 00:09:20,990
language like JavaScript instead of like

00:09:18,590 --> 00:09:25,820
deleting the stack frame this type frame

00:09:20,990 --> 00:09:28,430
basically get Undine we get it gets

00:09:25,820 --> 00:09:30,140
unlink and but it doesn't get drifted

00:09:28,430 --> 00:09:34,250
from the memory somewhere in the memory

00:09:30,140 --> 00:09:37,510
so when we need to run the catholic

00:09:34,250 --> 00:09:40,520
closure it still can refer to this frame

00:09:37,510 --> 00:09:43,100
that what happens so now the problem

00:09:40,520 --> 00:09:47,210
with russ is that Russ doesn't have a GC

00:09:43,100 --> 00:09:52,610
so there is no way for us to actually

00:09:47,210 --> 00:09:54,650
knows that one is still needed so if we

00:09:52,610 --> 00:09:57,560
were to like delete the stack frame here

00:09:54,650 --> 00:09:59,300
and we probably would also be deleting

00:09:57,560 --> 00:10:01,720
the heap and then the closure is

00:09:59,300 --> 00:10:06,560
pointing to the cabbage movie you know

00:10:01,720 --> 00:10:11,870
here because one is no longer there so

00:10:06,560 --> 00:10:13,820
how do Russ actually solve this so Russ

00:10:11,870 --> 00:10:17,060
is the concept of board checkers or the

00:10:13,820 --> 00:10:19,130
ownership system of the rush so what

00:10:17,060 --> 00:10:24,350
Russ does by default is that when you

00:10:19,130 --> 00:10:28,090
create a closure whatever captured

00:10:24,350 --> 00:10:30,410
variables they are born into the

00:10:28,090 --> 00:10:35,240
colleges aren't being the closest

00:10:30,410 --> 00:10:37,340
environment so so for example we have

00:10:35,240 --> 00:10:41,540
the symptom platform on the stack frame

00:10:37,340 --> 00:10:43,310
and hip and okay I have a star here so

00:10:41,540 --> 00:10:44,060
that depends on where you're initialized

00:10:43,310 --> 00:10:49,490
it

00:10:44,060 --> 00:10:51,560
because in Rus we explicitly tells the

00:10:49,490 --> 00:10:53,990
compiler that we either allocate

00:10:51,560 --> 00:10:55,940
something on the stack or we allocated

00:10:53,990 --> 00:11:02,510
on the heap and then generally for

00:10:55,940 --> 00:11:05,990
primitive types like so first we have

00:11:02,510 --> 00:11:08,570
the depends on the tray so let's say for

00:11:05,990 --> 00:11:11,030
example don't know relate to it I mean

00:11:08,570 --> 00:11:14,000
like a primitive type basically that

00:11:11,030 --> 00:11:17,780
yeah the ins the pool and everything

00:11:14,000 --> 00:11:21,770
that can be I mean I all the really

00:11:17,780 --> 00:11:23,870
small types yeah so and then let's say

00:11:21,770 --> 00:11:25,430
if you wanna if you wanna look at

00:11:23,870 --> 00:11:28,160
something to the heap we can actually do

00:11:25,430 --> 00:11:31,040
like box it using like box or we can

00:11:28,160 --> 00:11:32,840
create like a like a pointer to the the

00:11:31,040 --> 00:11:35,810
object we can use a lot of things like

00:11:32,840 --> 00:11:38,330
things like our see things like mostly

00:11:35,810 --> 00:11:41,630
people use like blocks to basically like

00:11:38,330 --> 00:11:44,270
put into the heap and then we get we get

00:11:41,630 --> 00:11:49,760
a pointer to the to the heat from the

00:11:44,270 --> 00:11:53,450
stack so for example here we have by

00:11:49,760 --> 00:11:56,510
default is ball roll and then this of

00:11:53,450 --> 00:12:00,590
course doesn't work because when this

00:11:56,510 --> 00:12:04,550
one goes out of school when we this

00:12:00,590 --> 00:12:07,460
closure basically burrows a reference to

00:12:04,550 --> 00:12:12,740
one and then the compiler is smart

00:12:07,460 --> 00:12:15,530
enough to know that one lifetimes is bit

00:12:12,740 --> 00:12:19,280
obvious cool of the ones is basically

00:12:15,530 --> 00:12:24,470
shorter than the scope of the then the

00:12:19,280 --> 00:12:26,570
closure itself that's why you get as

00:12:24,470 --> 00:12:28,670
well you get this error saying that the

00:12:26,570 --> 00:12:31,910
closure may elliptical function but it

00:12:28,670 --> 00:12:34,640
borrows one so that's how you represent

00:12:31,910 --> 00:12:38,690
because disclosure basically Boris one

00:12:34,640 --> 00:12:40,280
and then you were saying that closure

00:12:38,690 --> 00:12:44,030
may outlive the current function because

00:12:40,280 --> 00:12:49,730
one doesn't live long enough compared to

00:12:44,030 --> 00:12:53,950
the one no you can compile this is

00:12:49,730 --> 00:12:53,950
compile error basically so

00:12:54,190 --> 00:13:00,710
because we cannot borrow then we can

00:12:56,840 --> 00:13:04,340
actually move the developer basically

00:13:00,710 --> 00:13:09,170
the ownership of the variable so once we

00:13:04,340 --> 00:13:12,050
do that so one here we basically you can

00:13:09,170 --> 00:13:13,640
call it like live inside the is being

00:13:12,050 --> 00:13:16,640
owned by the coach itself because we

00:13:13,640 --> 00:13:18,740
move the ownership of the of the

00:13:16,640 --> 00:13:22,810
variable into the closure itself so this

00:13:18,740 --> 00:13:25,400
one compile so how we do this in Rus so

00:13:22,810 --> 00:13:29,030
what was a nice thing for us is that

00:13:25,400 --> 00:13:31,550
sometimes the help here is that really

00:13:29,030 --> 00:13:33,740
helpful so here you see like the post

00:13:31,550 --> 00:13:40,130
closure to take ownership of one use the

00:13:33,740 --> 00:13:42,670
move keyword so so we say move that it

00:13:40,130 --> 00:13:49,450
means that it moved the ownership of one

00:13:42,670 --> 00:13:55,250
to here to the closure now we compile

00:13:49,450 --> 00:13:57,170
done so everything is I mean this is so

00:13:55,250 --> 00:14:03,310
completely separate and we are pretty

00:13:57,170 --> 00:14:05,480
much done now how do closures

00:14:03,310 --> 00:14:08,420
implementation I mean how it really

00:14:05,480 --> 00:14:15,620
works out how closures are implemented

00:14:08,420 --> 00:14:18,500
in your ethnicity so we go back here to

00:14:15,620 --> 00:14:21,980
the code the same point and then closure

00:14:18,500 --> 00:14:25,910
basically is represented as anonymous

00:14:21,980 --> 00:14:30,620
and unique strut in red so basically

00:14:25,910 --> 00:14:35,140
what is being done or what's being the

00:14:30,620 --> 00:14:41,270
sugar is as you have like a struck

00:14:35,140 --> 00:14:43,010
anonymous closure I mean this truck

00:14:41,270 --> 00:14:44,630
doesn't really have a name I mean the

00:14:43,010 --> 00:14:48,860
nib is internal to the compiler this is

00:14:44,630 --> 00:14:53,510
just how we understand it and then we

00:14:48,860 --> 00:15:00,170
have like one which is the which is of

00:14:53,510 --> 00:15:02,630
type reference because by default the

00:15:00,170 --> 00:15:04,370
closure borrows the whatever the capture

00:15:02,630 --> 00:15:08,320
variable so the capture verbal here has

00:15:04,370 --> 00:15:08,320
one and has type of

00:15:08,560 --> 00:15:55,880
and then what happens and we have is

00:15:45,980 --> 00:15:59,180
correct oh no stay on this primitive

00:15:55,880 --> 00:16:01,220
yeah because actually this is on push it

00:15:59,180 --> 00:16:03,530
you string so because string can be

00:16:01,220 --> 00:16:06,410
elected in the hip but I just want to

00:16:03,530 --> 00:16:09,770
make it simple so so you can just let

00:16:06,410 --> 00:16:18,770
imagine is being look at the indicate

00:16:09,770 --> 00:16:39,470
mister we will see we will see after

00:16:18,770 --> 00:16:54,200
this I think it's always a being unwind

00:16:39,470 --> 00:16:56,600
yes obviously so so the structure and so

00:16:54,200 --> 00:16:59,800
we are not done yet actually because

00:16:56,600 --> 00:17:04,130
this chart basically implement the

00:16:59,800 --> 00:17:08,740
closures tree so there are three traits

00:17:04,130 --> 00:17:13,659
to this so so we have

00:17:08,740 --> 00:17:18,059
f n1 which and then we have FN mute and

00:17:13,659 --> 00:17:23,169
then we have F n so the res compiler

00:17:18,059 --> 00:17:26,589
will implement at least one of this so

00:17:23,169 --> 00:17:30,850
I'll closure basically implement must

00:17:26,589 --> 00:17:35,770
implement and once and depending on the

00:17:30,850 --> 00:17:40,630
situation it will also implement a trade

00:17:35,770 --> 00:17:43,559
FN mute and F and so depending on the

00:17:40,630 --> 00:17:46,809
situation I will explain the situation

00:17:43,559 --> 00:17:51,220
so so basically what happens that we

00:17:46,809 --> 00:18:04,350
have to implement FN once for an

00:17:51,220 --> 00:18:04,350
enclosure and then we have call once so

00:18:05,640 --> 00:18:15,130
so I hope in itself is refers to one

00:18:10,270 --> 00:18:26,529
which is here so basically it's like X

00:18:15,130 --> 00:18:27,580
plus so on so X being from here so so if

00:18:26,529 --> 00:18:29,919
you notice this one

00:18:27,580 --> 00:18:34,360
this mine is actually the same one as

00:18:29,919 --> 00:18:37,000
this one so when we call the when we

00:18:34,360 --> 00:18:40,929
call the closure the closure is being

00:18:37,000 --> 00:18:51,760
called here then it's actually calling

00:18:40,929 --> 00:18:54,850
call once so I have like a dipole I just

00:18:51,760 --> 00:18:56,620
crack so that's why I see it depends on

00:18:54,850 --> 00:19:00,820
the situation so basically the rest

00:18:56,620 --> 00:19:10,169
compiler will we'll see how the body of

00:19:00,820 --> 00:19:10,169
the closures so

00:19:12,169 --> 00:19:21,929
so you also implement FN mute which

00:19:16,679 --> 00:19:27,360
takes basically the understanding

00:19:21,929 --> 00:19:32,059
furnace that is correct calm you and

00:19:27,360 --> 00:19:32,059
then sister skal

00:19:33,890 --> 00:19:42,450
so in so the diagram here shows that we

00:19:40,590 --> 00:19:44,730
have like all these circles right so

00:19:42,450 --> 00:19:48,870
this circle is basically the constrain

00:19:44,730 --> 00:19:49,289
so if you were to implement the trade FM

00:19:48,870 --> 00:19:52,200
you

00:19:49,289 --> 00:19:55,279
you must also implement the trade FN one

00:19:52,200 --> 00:19:57,899
if you were to implement the trade FN

00:19:55,279 --> 00:20:00,929
then you have to also implement FM u

00:19:57,899 --> 00:20:05,429
which in turn you must also implement at

00:20:00,929 --> 00:20:07,649
anyone's right so how much determines

00:20:05,429 --> 00:20:10,470
the trick to implement so first of all

00:20:07,649 --> 00:20:15,419
it checks whether the weather if we move

00:20:10,470 --> 00:20:19,620
the captured variable if you ask that

00:20:15,419 --> 00:20:23,370
it only implement F and once only the

00:20:19,620 --> 00:20:26,179
keywords here is only because if you

00:20:23,370 --> 00:20:29,970
implement FN once you cannot call the

00:20:26,179 --> 00:20:31,919
closure multiple time you can only call

00:20:29,970 --> 00:20:33,809
it once because of because the capture

00:20:31,919 --> 00:20:37,529
variable has already been more if you

00:20:33,809 --> 00:20:41,340
call it for the second time then we are

00:20:37,529 --> 00:20:43,679
basically referencing yeah something

00:20:41,340 --> 00:20:46,529
that doesn't exist anymore so that to

00:20:43,679 --> 00:20:52,710
the compile it doesn't allow that so if

00:20:46,529 --> 00:20:55,740
no yeah so if it doesn't move then we

00:20:52,710 --> 00:20:58,529
implement F mu which else because of the

00:20:55,740 --> 00:21:01,980
constraint we also need to implement FN

00:20:58,529 --> 00:21:05,070
once and if it doesn't muted is captured

00:21:01,980 --> 00:21:07,309
variable then we also implement the FN

00:21:05,070 --> 00:21:07,309
tree

00:21:08,550 --> 00:21:49,030
just because when we when we want to

00:21:46,540 --> 00:21:51,090
implement fmu there's a constraint that

00:21:49,030 --> 00:21:54,190
you must also implement FN once

00:21:51,090 --> 00:21:56,020
so basically FN every collision must

00:21:54,190 --> 00:21:59,290
implement happen once so basically

00:21:56,020 --> 00:22:02,380
that's it but if the capture variable Y

00:21:59,290 --> 00:22:07,830
at mass so if if we move the captured

00:22:02,380 --> 00:22:11,110
variable it can only implement FN once

00:22:07,830 --> 00:22:34,320
and okay so we are basically at this

00:22:11,110 --> 00:22:34,320
branch just now yes correct

00:22:52,140 --> 00:22:59,950
I'll get into that because I have that

00:22:55,090 --> 00:23:04,930
slide for that for example okay cool if

00:22:59,950 --> 00:23:06,000
I don't just in my immunity yeah

00:23:04,930 --> 00:23:11,460
basically

00:23:06,000 --> 00:23:11,460
so oh before that

00:23:11,530 --> 00:23:19,490
so now if you see here now you can

00:23:16,010 --> 00:23:21,740
actually see why this is this doesn't

00:23:19,490 --> 00:23:24,800
compile because you see that here we

00:23:21,740 --> 00:23:28,850
have like a Stratton enclosure and then

00:23:24,800 --> 00:23:32,330
we are referencing one a variable one

00:23:28,850 --> 00:23:37,340
from the from the top line here and when

00:23:32,330 --> 00:23:40,040
we give back the ID when we return back

00:23:37,340 --> 00:23:41,660
the closure and enclosure here we

00:23:40,040 --> 00:23:43,040
actually referencing a local variable

00:23:41,660 --> 00:23:46,370
one because that's why it doesn't

00:23:43,040 --> 00:23:47,870
compile because by the time this

00:23:46,370 --> 00:23:50,000
function returned this one is already

00:23:47,870 --> 00:23:53,960
going because you had written in

00:23:50,000 --> 00:23:58,280
reference but what if what if we return

00:23:53,960 --> 00:24:02,950
what if we do move here when we do move

00:23:58,280 --> 00:24:09,530
here what happened is that the strap

00:24:02,950 --> 00:24:19,580
becomes something like this and then if

00:24:09,530 --> 00:24:25,070
we go to here so this that's why it is

00:24:19,580 --> 00:24:29,330
fine because the closure here takes the

00:24:25,070 --> 00:24:33,560
ownership of one we we see the strap it

00:24:29,330 --> 00:24:43,600
takes the ownership of one instead of

00:24:33,560 --> 00:24:43,600
taking reference when we do the move yes

00:24:44,050 --> 00:24:49,160
well not really I mean here it becomes

00:24:47,060 --> 00:24:50,600
copy because it's primitive type but if

00:24:49,160 --> 00:24:57,710
it's not a primitive type less it is a

00:24:50,600 --> 00:25:00,160
complex type then it get more so yeah so

00:24:57,710 --> 00:25:06,320
how rez determine the trick to implement

00:25:00,160 --> 00:25:13,010
back to la basically so here we have a

00:25:06,320 --> 00:25:16,210
stream and then when we move the when we

00:25:13,010 --> 00:25:20,960
moved it so basically when we move the

00:25:16,210 --> 00:25:25,070
string s into here into this closure s

00:25:20,960 --> 00:25:31,310
gets dropped because s is returning s

00:25:25,070 --> 00:25:35,210
back you got it sorry it's returning

00:25:31,310 --> 00:25:38,360
aspect into the into here when we run it

00:25:35,210 --> 00:25:44,420
basically as get dropped from or let's

00:25:38,360 --> 00:25:49,070
get move up from the closure so so if we

00:25:44,420 --> 00:25:51,680
look back at the diagram here so it

00:25:49,070 --> 00:25:53,710
moves the captured variable yes then it

00:25:51,680 --> 00:25:57,470
only becomes fn1

00:25:53,710 --> 00:26:00,680
because you cannot do a fan new because

00:25:57,470 --> 00:26:03,730
in order to do a fami you also need to

00:26:00,680 --> 00:26:07,460
be able to call it multiple times too so

00:26:03,730 --> 00:26:09,950
let's see how the captured variable

00:26:07,460 --> 00:26:13,040
being used how it being used inside the

00:26:09,950 --> 00:26:19,190
body to determine which trip it needs to

00:26:13,040 --> 00:26:22,460
implement so here we have another

00:26:19,190 --> 00:26:25,340
example we have like this is this is not

00:26:22,460 --> 00:26:28,970
this is a string and then this is a

00:26:25,340 --> 00:26:30,890
reference this is a reference to string

00:26:28,970 --> 00:26:34,550
stir yester

00:26:30,890 --> 00:26:39,710
and then we since

00:26:34,550 --> 00:26:43,340
inside the body it doesn't do any it

00:26:39,710 --> 00:26:47,150
doesn't mutate or it doesn't move the

00:26:43,340 --> 00:26:49,850
captured variable so it basically

00:26:47,150 --> 00:26:54,560
implements although straight all those

00:26:49,850 --> 00:27:04,510
two traits F and a commute F and once so

00:26:54,560 --> 00:27:04,510
it gets get rich here I'm sorry

00:27:08,509 --> 00:27:21,079
let me see if I'm missing anything right

00:27:13,859 --> 00:27:21,079
I took it to assist afore like they'd

00:27:30,559 --> 00:27:43,159
okay so we have another some another

00:27:36,749 --> 00:27:48,329
example here and then I want to show the

00:27:43,159 --> 00:28:01,529
mir I put basically slide and check

00:27:48,329 --> 00:28:05,339
click on so basically it's the Russ Russ

00:28:01,529 --> 00:28:10,039
intermediate representation so this was

00:28:05,339 --> 00:28:13,739
developed because in order to support

00:28:10,039 --> 00:28:17,099
incremental compilation who knows so the

00:28:13,739 --> 00:28:20,519
bill Emma are to basically support D if

00:28:17,099 --> 00:28:27,289
I if I recall correctly so here what I

00:28:20,519 --> 00:28:31,009
have so we have some closure here and

00:28:27,289 --> 00:28:34,499
then we have some numb and then when we

00:28:31,009 --> 00:28:40,039
when we compile we can actually just

00:28:34,499 --> 00:28:40,039
confined playground to human but

00:29:32,279 --> 00:29:41,169
so as you can see here the underscore

00:29:37,840 --> 00:29:46,450
one is actually wrap refers to the

00:29:41,169 --> 00:29:50,919
closure this is the closure strut being

00:29:46,450 --> 00:29:58,149
implemented by Russ and it has some num

00:29:50,919 --> 00:30:16,570
variable and of type reference ITT to

00:29:58,149 --> 00:30:29,649
right okay yes yes because yeah you know

00:30:16,570 --> 00:30:32,740
4.2 I mean in your life you shouldn't be

00:30:29,649 --> 00:30:34,330
doing this lot because because is a

00:30:32,740 --> 00:30:36,399
primitive type and then it will

00:30:34,330 --> 00:30:39,480
implement copy so it basically just like

00:30:36,399 --> 00:30:47,730
copy so Russ know how to we'll do it

00:30:39,480 --> 00:30:52,520
efficiently so now that we know this we

00:30:47,730 --> 00:30:56,450
this is the same code as before steel

00:30:52,520 --> 00:31:05,900
but I just want to ask what is the type

00:30:56,450 --> 00:31:10,000
of X is it this is the same play

00:31:05,900 --> 00:31:10,000
oh I mean you want to see the output

00:31:19,390 --> 00:31:35,210
Krishna yeah I already explained that

00:31:22,250 --> 00:31:56,530
you mister yeah this is the new and not

00:31:35,210 --> 00:31:56,530
nearly new laminate slice calm Thanks

00:31:56,830 --> 00:32:06,380
they have seen that highlight so okay

00:32:02,200 --> 00:32:09,320
okay let's go back here now since we

00:32:06,380 --> 00:32:12,920
know that since we know that Khloe J

00:32:09,320 --> 00:32:15,380
basically burrows he kept Boris Diaw two

00:32:12,920 --> 00:32:15,770
variables obviously so I just want to

00:32:15,380 --> 00:32:17,810
know

00:32:15,770 --> 00:32:20,060
actually it's basically the captured

00:32:17,810 --> 00:32:25,090
variable so what what is the type of X

00:32:20,060 --> 00:32:30,740
is it no yes

00:32:25,090 --> 00:32:35,620
the answer is I did I do reference I do

00:32:30,740 --> 00:32:40,750
or I theta to you so if you look at the

00:32:35,620 --> 00:32:45,350
if you look here it says some num is

00:32:40,750 --> 00:32:49,480
reference of altitude to but what is

00:32:45,350 --> 00:32:49,480
actually because some num is

00:32:51,480 --> 00:33:02,740
yeah I do people let's let's let's let's

00:32:56,380 --> 00:33:26,820
try to compare my friend let first I did

00:33:02,740 --> 00:33:28,720
to do such thing so we can say that

00:33:26,820 --> 00:33:31,030
mismatch type

00:33:28,720 --> 00:33:35,350
I expected that unit because I put Union

00:33:31,030 --> 00:33:37,150
I I put it I put it intentionally so we

00:33:35,350 --> 00:33:42,580
can throw this error and then you say

00:33:37,150 --> 00:33:47,260
found I 32 but what's going on here

00:33:42,580 --> 00:33:51,340
right because because some num to be a

00:33:47,260 --> 00:33:54,580
reference and then even in the MRI put

00:33:51,340 --> 00:34:00,670
is actually a reference but why but why

00:33:54,580 --> 00:34:04,750
is it ITP 2 so this is plus doing its

00:34:00,670 --> 00:34:12,220
magic lab recipe so if you look back at

00:34:04,750 --> 00:34:16,330
the MIR output here so here we have some

00:34:12,220 --> 00:34:21,580
num which is basically have a so legging

00:34:16,330 --> 00:34:23,800
also no reference to ITT 2 and then if

00:34:21,580 --> 00:34:26,310
we see here under Scott to basically

00:34:23,800 --> 00:34:32,169
refers to X how do I know that because

00:34:26,310 --> 00:34:35,740
this line mean rs5 so underscore one

00:34:32,169 --> 00:34:37,450
basically refers to be closure right so

00:34:35,740 --> 00:34:40,179
this closure is basically reference

00:34:37,450 --> 00:34:43,570
reference to the closure so we do you

00:34:40,179 --> 00:34:47,100
wrap the closure and then we get by the

00:34:43,570 --> 00:34:50,290
closure right and then we do like dot 0

00:34:47,100 --> 00:34:55,770
to get the first variable which is some

00:34:50,290 --> 00:34:58,510
num and then some num has type of

00:34:55,770 --> 00:35:01,600
reference ITT to

00:34:58,510 --> 00:35:03,790
and Russ helped us I mean grass

00:35:01,600 --> 00:35:10,900
basically de Graaff that automatically

00:35:03,790 --> 00:35:13,960
so that's why Axia is ITT to so it's

00:35:10,900 --> 00:35:16,210
kind of confusing because you expect it

00:35:13,960 --> 00:35:18,490
to be because you say like being born

00:35:16,210 --> 00:35:23,920
right into the in particular but then

00:35:18,490 --> 00:35:26,200
when we do it as if as if like yes yes

00:35:23,920 --> 00:35:27,850
so that was confusing for me like it

00:35:26,200 --> 00:35:36,940
took it took me a while to understand

00:35:27,850 --> 00:35:41,109
this I think I think it just make it

00:35:36,940 --> 00:35:44,320
just missed me consistently basically I

00:35:41,109 --> 00:35:49,359
think so it so because if you have here

00:35:44,320 --> 00:35:53,740
some type on the solitary so let's see

00:35:49,359 --> 00:35:56,020
if you have the type here s si 32 then

00:35:53,740 --> 00:35:59,380
suddenly if you assign it to

00:35:56,020 --> 00:36:02,140
accidentally become ref then is kind of

00:35:59,380 --> 00:36:04,660
inconsistent in how you want to how you

00:36:02,140 --> 00:36:06,310
want to think about how do you want a

00:36:04,660 --> 00:36:08,470
reason about your coin right so I think

00:36:06,310 --> 00:36:12,900
probably this decision of it I don't

00:36:08,470 --> 00:36:12,900
want is that that's just my speculation

00:36:18,090 --> 00:36:25,630
yes very sugary yes correct know that I

00:36:24,280 --> 00:36:27,369
have to do a copy if you change it into

00:36:25,630 --> 00:36:41,470
a strap is going to be the same thing

00:36:27,369 --> 00:36:46,000
yeah so now what if we do the same thing

00:36:41,470 --> 00:36:51,090
but we move the we move the captured

00:36:46,000 --> 00:36:54,130
variable what we get here as expected

00:36:51,090 --> 00:36:59,530
itit it to like this track that we built

00:36:54,130 --> 00:37:01,840
and if you look here there's no Europe

00:36:59,530 --> 00:37:07,810
being done automatically because the

00:37:01,840 --> 00:37:11,070
type is already isolated too so it

00:37:07,810 --> 00:37:11,070
matches basically

00:37:22,980 --> 00:37:45,730
what a different give me so a lot of

00:37:31,150 --> 00:37:47,980
things so so because when you when you

00:37:45,730 --> 00:37:51,880
create a closure basically it creates

00:37:47,980 --> 00:37:54,370
truck for you and not anonymous struck

00:37:51,880 --> 00:37:58,510
that is unique so even if you write the

00:37:54,370 --> 00:38:01,240
same closure a closure like X plus one

00:37:58,510 --> 00:38:03,340
you do like X is equal to some closure X

00:38:01,240 --> 00:38:05,920
plus one and then you do like Y is equal

00:38:03,340 --> 00:38:07,630
to some closure X plus one in the body

00:38:05,920 --> 00:38:09,550
is the same thing right but if you try

00:38:07,630 --> 00:38:35,110
to compare x and y it's actually a two

00:38:09,550 --> 00:38:48,510
different closure yeah pointed toe

00:38:35,110 --> 00:38:48,510
function the ownership of the value yeah

00:39:07,290 --> 00:39:16,500
this is me when I was talking about to

00:39:10,780 --> 00:39:16,500
you but just now but this is Oh

00:39:34,030 --> 00:40:58,760
so this is another I think so I have so

00:40:56,120 --> 00:41:05,830
if you need more information you can go

00:40:58,760 --> 00:41:05,830
here I think that so I have

00:41:16,730 --> 00:41:22,110
well I think this I think you

00:41:19,910 --> 00:41:23,880
understanding this in Russia is actually

00:41:22,110 --> 00:41:26,130
quite important because sometimes you

00:41:23,880 --> 00:41:29,610
have especially when you want to

00:41:26,130 --> 00:41:36,390
understand the three types of trade

00:41:29,610 --> 00:41:38,850
because some function expect when some

00:41:36,390 --> 00:41:41,040
function basically picks closure as a

00:41:38,850 --> 00:41:45,690
human and then some time they take it be

00:41:41,040 --> 00:41:48,990
constrained it into like FN once so if

00:41:45,690 --> 00:41:51,150
you I mean everyone walks lot because

00:41:48,990 --> 00:41:53,510
everything every culture implementation

00:41:51,150 --> 00:41:58,170
ones so I say for example your closure I

00:41:53,510 --> 00:42:00,960
said I fan and then we have then you are

00:41:58,170 --> 00:42:03,450
sending my FN then probably doesn't

00:42:00,960 --> 00:42:07,980
doesn't mismatch they're usually like a

00:42:03,450 --> 00:42:11,280
commute something like that I think

00:42:07,980 --> 00:42:13,380
should use FN and then we usually see

00:42:11,280 --> 00:43:01,140
what's the compiler complaining and then

00:42:13,380 --> 00:43:03,620
you should the rest the rest basic from

00:43:01,140 --> 00:43:03,620
the beginning

00:43:12,869 --> 00:43:22,960
you can continue okay candy so some of

00:43:20,589 --> 00:43:26,700
the thing I say maybe not accurate

00:43:22,960 --> 00:43:28,839
totally because some of it are probably

00:43:26,700 --> 00:44:13,569
disclaimer I have to put this claim at

00:43:28,839 --> 00:44:17,349
the end because I'm know because yeah

00:44:13,569 --> 00:44:20,740
because I was gone but in GC language

00:44:17,349 --> 00:44:27,339
you have a GC that basically have an

00:44:20,740 --> 00:44:29,740
eyes like watching the yeah as long as

00:44:27,339 --> 00:44:32,079
some things to reference the object in

00:44:29,740 --> 00:44:35,140
the heap you won't remove it so if you

00:44:32,079 --> 00:44:38,069
have like a circular reference then you

00:44:35,140 --> 00:44:38,069
will be forever stopped

00:45:31,910 --> 00:45:35,630
like like you

00:45:42,500 --> 00:46:10,380
collection is not good enough for you in

00:45:57,960 --> 00:46:22,020
Iran in the rough is I put I like it if

00:46:10,380 --> 00:46:26,240
you stopped eating connected Wi-Fi oh

00:46:22,020 --> 00:46:26,240
I'm doing yes I clinic sorry

00:46:35,840 --> 00:46:37,900
you

00:47:15,760 --> 00:47:22,040
which I say you usually don't buy your

00:47:18,740 --> 00:48:08,740
fasting pair once you buy one but we

00:47:22,040 --> 00:48:08,740
like stuff like me or even three okay

00:48:21,820 --> 00:48:37,040
okay today's topic to NPM name it's just

00:48:33,080 --> 00:48:47,960
a name we can even then why do you call

00:48:37,040 --> 00:48:49,810
what you call no not just like them

00:48:47,960 --> 00:48:53,500
today

00:48:49,810 --> 00:48:53,500
okay roster NPM

00:48:54,040 --> 00:49:09,700
but then no not mine Ruska no I mean and

00:49:06,050 --> 00:49:11,440
yeah Canada explain

00:49:09,700 --> 00:49:15,880
that's the arrested me for Christmas I

00:49:11,440 --> 00:49:20,710
wrapped it in front if not MPM from Russ

00:49:15,880 --> 00:49:23,280
okay why rust okay here try explain why

00:49:20,710 --> 00:49:29,319
Russ from a not jet developer standpoint

00:49:23,280 --> 00:49:31,720
yeah okay here you have zero cost

00:49:29,319 --> 00:49:33,270
extraction the rest where most of the

00:49:31,720 --> 00:49:37,450
things are done at compile time

00:49:33,270 --> 00:49:41,829
so like the crates when you do size of

00:49:37,450 --> 00:49:46,660
like a strap yeah no you have no cost

00:49:41,829 --> 00:49:50,260
when you try in a coat you do size of

00:49:46,660 --> 00:49:52,690
the mem that's a something to do REM

00:49:50,260 --> 00:49:55,690
cycle like your strap there's no value

00:49:52,690 --> 00:50:00,359
unless it's a boxer then yeah some cost

00:49:55,690 --> 00:50:02,339
or crits and then no garbage collector

00:50:00,359 --> 00:50:05,530
so I think he's fake

00:50:02,339 --> 00:50:06,420
okay and the last one say you don't get

00:50:05,530 --> 00:50:09,220
this thing anymore

00:50:06,420 --> 00:50:21,250
anytime and um p.m. sometimes when you

00:50:09,220 --> 00:50:23,829
run something so DC yeah but this I

00:50:21,250 --> 00:50:26,140
really get a runtime of you you type

00:50:23,829 --> 00:50:28,089
everything Oh anything retired oh it

00:50:26,140 --> 00:50:29,859
works and then when you when you use

00:50:28,089 --> 00:50:36,099
even if you use touch grade without

00:50:29,859 --> 00:50:37,890
using the NPM I'm finding you know ISO

00:50:36,099 --> 00:50:41,049
transfollow but then helps you the check

00:50:37,890 --> 00:50:44,400
he doesn't check for undefined Barassi

00:50:41,049 --> 00:50:47,500
says there's no now you only have none I

00:50:44,400 --> 00:50:48,780
am I mean if nobody's actually in a safe

00:50:47,500 --> 00:50:51,340
fat

00:50:48,780 --> 00:51:31,130
[Music]

00:50:51,340 --> 00:51:34,460
okay so I think if you want every

00:51:31,130 --> 00:51:38,870
propagating my libraries like the area

00:51:34,460 --> 00:51:41,780
library is called failure yeah those bad

00:51:38,870 --> 00:51:46,970
really did something not that good I

00:51:41,780 --> 00:51:49,160
heard I heard okay here's a quote in

00:51:46,970 --> 00:51:51,500
theory it would be entirely reasonable

00:51:49,160 --> 00:51:54,020
to guess that most respect would need a

00:51:51,500 --> 00:51:56,360
no need to use a significant amount of

00:51:54,020 --> 00:51:58,430
unsafe code to escape the limitations of

00:51:56,360 --> 00:52:01,990
the protocol however in practice it

00:51:58,430 --> 00:52:04,610
turns out okay that the overwhelming

00:52:01,990 --> 00:52:17,570
majority of programs can be implemented

00:52:04,610 --> 00:52:21,890
but Nero using only safer my visa okay

00:52:17,570 --> 00:52:23,270
okay so yeah that means that most of the

00:52:21,890 --> 00:52:24,260
time you don't even in a library you

00:52:23,270 --> 00:52:26,990
don't stay home safe

00:52:24,260 --> 00:52:30,430
this doesn't help oh I'm sure tonight I

00:52:26,990 --> 00:52:37,960
think the thing is called car gold

00:52:30,430 --> 00:52:37,960
digger oh yeah I go to that path

00:52:39,970 --> 00:52:54,520
I can see you know okay so this one who

00:52:51,130 --> 00:52:58,270
basically checks all the libraries that

00:52:54,520 --> 00:53:01,030
they use above we copy smooth I heard he

00:52:58,270 --> 00:53:06,040
copied on from the cargo tree a command

00:53:01,030 --> 00:53:09,160
to lease out the tree stuff design is to

00:53:06,040 --> 00:53:20,560
this is something to check for and safe

00:53:09,160 --> 00:53:26,140
in your libraries okay okay yes no no

00:53:20,560 --> 00:53:32,830
the nuclear is nuclear yeah okay Steve

00:53:26,140 --> 00:53:41,170
say 99 the nuclear and hmm so it means

00:53:32,830 --> 00:53:44,849
that that's like two unsafety how many

00:53:41,170 --> 00:53:52,359
I'll take you there you see like two or

00:53:44,849 --> 00:53:54,970
2099 a 92 and safe expression it's bad

00:53:52,359 --> 00:53:56,680
for that bridge but then like some some

00:53:54,970 --> 00:53:58,839
interesting I'd be like stood the

00:53:56,680 --> 00:54:01,180
simulation and the serum of a very

00:53:58,839 --> 00:54:02,349
popular one in rust that's right laughs

00:54:01,180 --> 00:54:04,420
I have a long unsafe aiyla

00:54:02,349 --> 00:54:06,849
that reduce I'm sure like many more but

00:54:04,420 --> 00:54:08,740
then still using the second open there's

00:54:06,849 --> 00:54:10,300
like no performance in fact they're just

00:54:08,740 --> 00:54:12,599
writing in a different a bit different

00:54:10,300 --> 00:54:12,599
way okay

00:54:23,050 --> 00:54:38,410
okay but it's not limping this is

00:54:35,869 --> 00:54:41,210
helping helping the other libraries

00:54:38,410 --> 00:54:46,720
helping you to check how this is just

00:54:41,210 --> 00:54:50,210
showing no this is a cargo extension

00:54:46,720 --> 00:54:52,579
lady color a black cargo so she's very

00:54:50,210 --> 00:54:54,410
very bad right now so you can owe such

00:54:52,579 --> 00:55:14,599
anything that they have only called

00:54:54,410 --> 00:55:20,119
cargo as such another component okay

00:55:14,599 --> 00:55:23,839
then okay continue a video you don't get

00:55:20,119 --> 00:55:27,609
the safe Patty's when you come back it

00:55:23,839 --> 00:55:27,609
works unless it's your logic error

00:55:28,599 --> 00:55:36,829
you don't get no like see if you get

00:55:34,099 --> 00:55:40,579
like now point to area double floor like

00:55:36,829 --> 00:56:15,470
don't mirror but rest also say you don't

00:55:40,579 --> 00:56:18,920
you don't get double free yeah mostly

00:56:15,470 --> 00:56:20,900
use in like libraries with see but

00:56:18,920 --> 00:56:23,569
bindings to see their use and safe or

00:56:20,900 --> 00:56:29,720
may also used to interact the hardware

00:56:23,569 --> 00:56:32,530
is on see just the main point continue

00:56:29,720 --> 00:56:32,530
the first way

00:56:33,730 --> 00:56:38,870
no no not just like that I say not just

00:56:36,620 --> 00:56:40,670
about them this is the most popular way

00:56:38,870 --> 00:56:44,750
that you're such a nice Russ NPM

00:56:40,670 --> 00:56:49,040
definitely this usual I've seen other

00:56:44,750 --> 00:56:56,770
ways or so but then later please number

00:56:49,040 --> 00:57:01,280
one you see yes I know I mean NPM is the

00:56:56,770 --> 00:57:20,350
Turkish packager the making manager for

00:57:01,280 --> 00:57:20,350
the know how to write right okay just

00:57:24,970 --> 00:57:38,900
okay this is not no this not this not I

00:57:32,060 --> 00:57:43,700
don't think the rust yeah so the first

00:57:38,900 --> 00:57:54,770
way there wasn't me then

00:57:43,700 --> 00:57:58,730
yeah and p.m. can be really rough okay

00:57:54,770 --> 00:58:02,060
so we're assembly the introduction it's

00:57:58,730 --> 00:58:05,360
a binary format and it's compact use for

00:58:02,060 --> 00:58:08,150
the web he just the one of the aim is

00:58:05,360 --> 00:58:11,750
like it's faster and I brought us can

00:58:08,150 --> 00:58:15,350
use it because you can do the

00:58:11,750 --> 00:58:17,900
optimization before you're running

00:58:15,350 --> 00:58:19,220
before running so the browser have the I

00:58:17,900 --> 00:58:23,300
think Moe did I have a good right upper

00:58:19,220 --> 00:58:24,830
body on yeah why we assembly and then

00:58:23,300 --> 00:58:31,510
how the passing works and then

00:58:24,830 --> 00:58:31,510
optimization how it can be shown output

00:59:00,590 --> 00:59:03,590
No

01:02:12,460 --> 01:02:28,330
and descended on the web my my about

01:02:25,100 --> 01:02:28,330
mainstream browser is a poly

01:02:34,850 --> 01:03:44,250
- bet dinosaur so into a string -

01:03:12,180 --> 01:03:46,800
bling okay continue

01:03:44,250 --> 01:03:57,360
okay why rush it were suitable for Wells

01:03:46,800 --> 01:04:01,080
and we know because their Scottish

01:03:57,360 --> 01:04:04,920
writer then they say hey Nico okay

01:04:01,080 --> 01:04:09,330
Mother Russia Cadiz where's Andy there's

01:04:04,920 --> 01:04:12,680
a wasn't mine Jen Jess this is something

01:04:09,330 --> 01:04:14,880
you but I remember one of J this J

01:04:12,680 --> 01:04:17,880
emerges I remember one of them right is

01:04:14,880 --> 01:04:21,990
generated I do remember which one

01:04:17,880 --> 01:04:26,190
one is Henry Turner Whitted this is like

01:04:21,990 --> 01:04:28,410
something the generator from the

01:04:26,190 --> 01:04:31,020
standard I remember something like

01:04:28,410 --> 01:04:36,650
generator from something by thing is to

01:04:31,020 --> 01:04:36,650
send it somehow so us this these are the

01:04:37,190 --> 01:04:48,480
Bentonville you've done is done so in

01:04:40,049 --> 01:05:05,390
order for wisdom only support sending

01:04:48,480 --> 01:05:05,390
room number yes so what we define gender

01:05:05,990 --> 01:05:33,539
for example you have you know a peculiar

01:05:17,999 --> 01:05:36,269
strap and Genesis and web based on the

01:05:33,539 --> 01:05:41,880
one that exports the JavaScript stuff to

01:05:36,269 --> 01:05:43,529
the rough okay here I just just like I'm

01:05:41,880 --> 01:05:46,519
ten times here so I need put a warning

01:05:43,529 --> 01:05:50,329
so this is basically how you look like

01:05:46,519 --> 01:05:57,289
for what imagine okay okay I missed the

01:05:50,329 --> 01:05:57,289
me something let me add in a bit Oh

01:06:21,460 --> 01:06:28,550
okay so recipe is something idea you

01:06:26,090 --> 01:06:33,170
just need to put our bottom again on the

01:06:28,550 --> 01:06:36,620
top the these are on the top if you take

01:06:33,170 --> 01:06:45,110
the JavaScript functions and put it into

01:06:36,620 --> 01:06:48,350
the locker locals namespace yeah it's

01:06:45,110 --> 01:06:52,250
like generator so basically this we you

01:06:48,350 --> 01:06:57,740
let your ass exposed a lot to your ass

01:06:52,250 --> 01:07:02,780
code and then for the rest give you

01:06:57,740 --> 01:07:05,300
string anyway okay so for the rest you

01:07:02,780 --> 01:07:10,190
have a function message this string SP

01:07:05,300 --> 01:07:13,250
and % SP are not wall and then you you

01:07:10,190 --> 01:07:16,760
can use the alert directly here and then

01:07:13,250 --> 01:07:19,340
you can format you cannot just use like

01:07:16,760 --> 01:07:20,960
JavaScript you need to format it me

01:07:19,340 --> 01:07:25,010
frost this is one of the downside law

01:07:20,960 --> 01:07:27,920
right now you need for many transfers as

01:07:25,010 --> 01:07:29,720
a whole string and then by the binder we

01:07:27,920 --> 01:07:31,100
do all the magic behind and make it

01:07:29,720 --> 01:07:34,430
quite uncomfortable

01:07:31,100 --> 01:07:36,790
so this some this hello world in what am

01:07:34,430 --> 01:07:38,780
i doing using using my don't mind you

01:07:36,790 --> 01:07:45,350
okay they're ready showing them anyway

01:07:38,780 --> 01:07:48,140
how they do we know know how you do it

01:07:45,350 --> 01:07:50,720
with it either the ways is I you need to

01:07:48,140 --> 01:07:55,790
add the Russell target you add the

01:07:50,720 --> 01:08:00,260
wasn't to our moon the target and then

01:07:55,790 --> 01:08:10,750
you need beautify get oh okay sorry

01:08:00,260 --> 01:08:10,750
sorry professor we're gonna see

01:08:56,920 --> 01:09:25,040
yeah is a ready compound okay okay but

01:09:22,549 --> 01:09:28,759
this way architecture is almond I said

01:09:25,040 --> 01:09:33,259
architecture the Triplett cure sounds

01:09:28,759 --> 01:09:35,710
this way can run anywhere okay so

01:09:33,259 --> 01:09:39,890
basically what after what you do with

01:09:35,710 --> 01:09:41,240
binary is somewhere around here and then

01:09:39,890 --> 01:09:44,029
you need to write the JavaScript

01:09:41,240 --> 01:09:47,890
manually and then you will need to write

01:09:44,029 --> 01:09:49,850
the initiate streaming the versa meeting

01:09:47,890 --> 01:10:04,370
initializer module and then you can only

01:09:49,850 --> 01:10:06,050
use a person be okay i remember adam by

01:10:04,370 --> 01:10:10,240
deep voice very big left like some

01:10:06,050 --> 01:10:13,420
opting either to Vickie smaller sorry

01:10:10,240 --> 01:10:13,420
not sure

01:10:18,530 --> 01:10:23,730
things quite big but you need to

01:10:21,870 --> 01:10:29,480
manually trick something to optimize it

01:10:23,730 --> 01:10:32,700
for now and then okay what makes it easy

01:10:29,480 --> 01:10:36,270
then they introduced was impact is

01:10:32,700 --> 01:10:39,720
really helpful around the atom that was

01:10:36,270 --> 01:10:42,090
away so it's helper to that's what they

01:10:39,720 --> 01:10:45,510
say pack and publisher with them so

01:10:42,090 --> 01:10:49,170
their support for Bowser and nodejs

01:10:45,510 --> 01:10:53,130
model book yeah I found this very weird

01:10:49,170 --> 01:10:57,390
like this year that this their target is

01:10:53,130 --> 01:11:12,360
an open issue they already know they're

01:10:57,390 --> 01:11:16,080
planning to practice but they can they

01:11:12,360 --> 01:11:18,930
can build to book Monica not again we're

01:11:16,080 --> 01:11:21,660
one of them right now right now so if

01:11:18,930 --> 01:11:23,460
you want where browser library and you

01:11:21,660 --> 01:11:25,770
need any - no jailbreak you did Beauty

01:11:23,460 --> 01:11:29,310
separately but the question is the same

01:11:25,770 --> 01:11:32,460
but just the command to view it's a bit

01:11:29,310 --> 01:11:34,920
different if they want to quickly show

01:11:32,460 --> 01:11:40,500
that the library that you generate can

01:11:34,920 --> 01:11:43,110
support both browser and not just so and

01:11:40,500 --> 01:11:46,050
then with this you have less in empower

01:11:43,110 --> 01:11:48,780
like ever handling for bay you can I

01:11:46,050 --> 01:11:51,450
don't think you can use a result you

01:11:48,780 --> 01:11:53,820
return a result string and then we

01:11:51,450 --> 01:11:56,640
aerial shot before structure for error

01:11:53,820 --> 01:12:01,200
so you can do that you have like less

01:11:56,640 --> 01:12:04,020
use of the rust rust way to do error

01:12:01,200 --> 01:12:07,500
handling like the callbacks propagating

01:12:04,020 --> 01:12:10,620
areas you know azuma for javascript

01:12:07,500 --> 01:12:13,170
plans and one of the nice thing is

01:12:10,620 --> 01:12:18,150
therefore very simple API food using

01:12:13,170 --> 01:12:19,950
prop macro like just now you see this

01:12:18,150 --> 01:12:24,909
wasn't binding right this is a prop

01:12:19,950 --> 01:12:28,000
macro in wisdom

01:12:24,909 --> 01:12:28,739
one point five I think oh my gosh the

01:12:28,000 --> 01:12:35,650
introduced

01:12:28,739 --> 01:12:48,550
bumper 1/5 but for prop microlight it's

01:12:35,650 --> 01:13:28,120
not implemented for 2018 right you need

01:12:48,550 --> 01:13:30,370
to use yes we sure need to replace the

01:13:28,120 --> 01:13:32,290
performance and stick part but you can

01:13:30,370 --> 01:13:34,360
really invariably like you want some

01:13:32,290 --> 01:13:35,440
parts to butane run somehow story thing

01:13:34,360 --> 01:13:37,659
about them they want to make it very

01:13:35,440 --> 01:13:39,880
very easy for you to do that so they

01:13:37,659 --> 01:13:41,830
Friday this was in pack you just rights

01:13:39,880 --> 01:13:48,330
on Rosco and then you just publish to a

01:13:41,830 --> 01:13:48,330
DM so let's see oh

01:14:00,630 --> 01:14:10,260
how can you sir

01:14:07,290 --> 01:14:20,360
I think can you sir into yourself or

01:14:10,260 --> 01:14:20,360
those I'll export the patented station

01:14:30,500 --> 01:14:34,580
not sure why so many changes

01:14:36,050 --> 01:15:03,870
yeah but you don't need strength you

01:14:39,060 --> 01:15:05,790
mean nothing yeah yes best yeah but

01:15:03,870 --> 01:15:14,120
there's also some costs calling them

01:15:05,790 --> 01:15:16,800
here and there but ok so this is a basic

01:15:14,120 --> 01:15:19,409
method to use by the time you just

01:15:16,800 --> 01:15:25,969
wasn't a boot I get no yes relief and

01:15:19,409 --> 01:15:33,199
just publish together okay so until here

01:15:25,969 --> 01:15:33,199
let's continue with some Michael

01:15:34,429 --> 01:15:42,210
hands-on okay no no no okay I should

01:15:38,100 --> 01:15:51,889
example how how to how to ID already won

01:15:42,210 --> 01:15:51,889
by then I'd be ready a little bit okay

01:16:10,300 --> 01:16:17,050
it is from is I'll do a demo with Paris

01:16:22,270 --> 01:16:30,290
is a top the jig templates we

01:16:28,250 --> 01:16:33,020
implemented irrational performances but

01:16:30,290 --> 01:16:35,030
I don't know why the chest pad is slow

01:16:33,020 --> 01:16:38,120
no I heard slow but then they say they

01:16:35,030 --> 01:16:40,699
are passed by yeah that's what I say yes

01:16:38,120 --> 01:16:44,050
there's another company library condom

01:16:40,699 --> 01:16:50,000
to help to do the know where I discover

01:16:44,050 --> 01:17:04,699
body norm test think they are passed the

01:16:50,000 --> 01:17:12,440
libraries or pass a parser community

01:17:04,699 --> 01:17:15,140
curse yeah something in it so basically

01:17:12,440 --> 01:17:21,429
they we intermediate patent rust and it

01:17:15,140 --> 01:17:21,429
became this far this anti factor yeah

01:17:23,170 --> 01:17:33,230
this is for rust only not no chestnut

01:17:29,630 --> 01:17:46,670
brother if I I need to show them off for

01:17:33,230 --> 01:17:51,679
this okay so this is basically you will

01:17:46,670 --> 01:17:56,050
be something like body lot hope her

01:17:51,679 --> 01:17:56,050
Google all data

01:17:56,820 --> 01:18:13,710
careful Sonny sometimes I use Elsa know

01:18:09,460 --> 01:18:13,710
some companies that I work also your

01:18:18,180 --> 01:18:38,470
brother yeah look ask about this okay no

01:18:27,310 --> 01:18:47,650
no this is my example something like

01:18:38,470 --> 01:18:57,970
this now here first page nadie

01:18:47,650 --> 01:19:08,530
somebody's it lets your HTML looks

01:18:57,970 --> 01:19:14,220
better it is yeah so you can do with

01:19:08,530 --> 01:19:14,220
time this and I did mix it like this

01:19:18,720 --> 01:19:26,050
then we didn't to put like enter an

01:19:21,700 --> 01:19:28,060
opening time you just need to put know

01:19:26,050 --> 01:19:30,700
by this no idea this is based on

01:19:28,060 --> 01:19:33,150
indentation this simulator stylus you

01:19:30,700 --> 01:19:33,150
don't know why

01:19:49,430 --> 01:19:57,990
it looks like a person if I hold the

01:19:52,680 --> 01:20:05,750
deep okay so is something in something

01:19:57,990 --> 01:20:05,750
IDs but then Pat is HTML this is CSS

01:20:06,230 --> 01:20:12,860
anyway this is not asking without okay

01:20:10,880 --> 01:20:20,460
[Music]

01:20:12,860 --> 01:20:55,410
okay back to bake yeah okay first of all

01:20:20,460 --> 01:21:08,070
I need to do now they put everything

01:20:55,410 --> 01:21:34,760
here I just change it to I just change

01:21:08,070 --> 01:21:34,760
eighteen to be writing all this stuff

01:21:36,980 --> 01:21:42,530
let me see all the paper or

01:22:02,210 --> 01:22:10,670
okay so I change it to 2018 the foul was

01:22:06,930 --> 01:22:13,200
originally just it made this pal

01:22:10,670 --> 01:22:17,430
originally just this and I split it into

01:22:13,200 --> 01:22:21,240
a library as well so the three and the

01:22:17,430 --> 01:22:25,290
main power so this is library this is a

01:22:21,240 --> 01:22:27,600
binary file the iran's and four and to

01:22:25,290 --> 01:22:34,670
make it into water I need in binary so

01:22:27,600 --> 01:22:36,840
I'm I put it binary okay now that's that

01:22:34,670 --> 01:22:37,920
so first thing I need to add well then

01:22:36,840 --> 01:22:45,000
what do I do

01:22:37,920 --> 01:22:51,660
I need to add in cargo the first thing I

01:22:45,000 --> 01:22:53,340
need to add is a wrong thing we people

01:22:51,660 --> 01:22:57,150
know just because I want to use it in

01:22:53,340 --> 01:23:01,040
the food a lot this library right so I

01:22:57,150 --> 01:23:01,040
need to use a crucible Jess

01:23:11,880 --> 01:23:24,010
okay so first thing you need to add the

01:23:14,620 --> 01:23:29,380
Creek type in a quick time for this one

01:23:24,010 --> 01:23:31,780
and this is for the to specify that you

01:23:29,380 --> 01:23:34,540
type let's say CD while it is too

01:23:31,780 --> 01:23:39,870
beautiful dynamic library and Alec is

01:23:34,540 --> 01:23:39,870
beautiful the others one other ones like

01:25:00,210 --> 01:25:07,290
oh okay okay okay now

01:26:03,090 --> 01:26:22,560
I'm a greedy okay I guess I just should

01:26:41,820 --> 01:26:54,719
know actually okay okay this is the

01:26:52,420 --> 01:26:54,719
result

01:27:01,650 --> 01:27:09,150
okay like this let's say I passed random

01:27:05,110 --> 01:27:12,310
hollow world so you become me

01:27:09,150 --> 01:27:53,230
and I see you goes to okay let me use

01:27:12,310 --> 01:27:56,140
the does not example the design so after

01:27:53,230 --> 01:27:58,360
I change to me after I change it you see

01:27:56,140 --> 01:28:04,810
I can just use this is bottom I can just

01:27:58,360 --> 01:28:38,830
straight use from the know the output

01:28:04,810 --> 01:28:41,200
will be something like this generated by

01:28:38,830 --> 01:28:44,200
was impact so you just try margin you

01:28:41,200 --> 01:28:47,410
take images then you prove this pkg and

01:28:44,200 --> 01:28:55,420
then in a notepad you just require that

01:28:47,410 --> 01:29:01,960
package just IDs yeah yeah so browse

01:28:55,420 --> 01:29:04,450
those okay so there's a game call okay

01:29:01,960 --> 01:29:09,180
show this game for the team those

01:29:04,450 --> 01:29:09,180
response this game works in a browser

01:29:10,110 --> 01:29:58,840
this is aa yeah no no this is not really

01:29:44,099 --> 01:30:03,489
this is just I think madam they using

01:29:58,840 --> 01:30:05,320
infinitely I remember maybe they

01:30:03,489 --> 01:30:07,269
mentioned something like minimizer in

01:30:05,320 --> 01:30:13,059
the bottom there by the weather wasn't

01:30:07,269 --> 01:30:15,219
that it for you so after after you do

01:30:13,059 --> 01:30:16,780
that you can just yeah in each other

01:30:15,219 --> 01:30:19,479
Cooper you can just require like this

01:30:16,780 --> 01:30:22,709
and then and then you can just straight

01:30:19,479 --> 01:30:29,229
use the function this is what the back

01:30:22,709 --> 01:30:32,550
okay so the what integrity so but this

01:30:29,229 --> 01:30:32,550
is a general library right

01:32:23,010 --> 01:32:30,220
no no even one thing is performance you

01:32:26,650 --> 01:32:33,040
can use it for no but you can use it for

01:32:30,220 --> 01:32:39,460
performance you can use it for

01:32:33,040 --> 01:32:42,130
performance so okay for this library it

01:32:39,460 --> 01:32:43,450
was really is a general library so we

01:32:42,130 --> 01:32:49,810
don't want to include wasn't binding

01:32:43,450 --> 01:32:53,890
here so instead we have there's a good

01:32:49,810 --> 01:32:58,440
time dependency for just wasn't you if

01:32:53,890 --> 01:32:58,440
is not madam bill it won't include this

01:33:59,290 --> 01:34:02,439
[Music]

01:34:09,510 --> 01:34:30,340
I just random okay okay okay okay so

01:34:19,960 --> 01:34:32,849
yeah so basically what y-you do is

01:34:30,340 --> 01:34:35,769
there's a architecture-specific

01:34:32,849 --> 01:34:42,400
like let's say for this lecture

01:34:35,769 --> 01:34:48,760
do you see I BRE and for all this wisdom

01:34:42,400 --> 01:34:52,000
you include the other mine and same for

01:34:48,760 --> 01:34:56,550
the functions your expose as well for

01:34:52,000 --> 01:35:02,079
wisdom for non-muslim you use this call

01:34:56,550 --> 01:35:04,130
but then for wisdom you can use what the

01:35:02,079 --> 01:35:07,670
mind gem for this

01:35:04,130 --> 01:35:11,360
why do I need so great because I wasn't

01:35:07,670 --> 01:35:15,020
mine Jen doesn't have like we don't like

01:35:11,360 --> 01:35:18,410
rust have like without and then return

01:35:15,020 --> 01:35:23,180
some special areas but in madam is not

01:35:18,410 --> 01:35:27,050
supported so instead right now are going

01:35:23,180 --> 01:35:31,940
to hear is I notice that I need to

01:35:27,050 --> 01:35:33,770
return an option of spring to tell the

01:35:31,940 --> 01:35:35,960
because you cannot propagate grass error

01:35:33,770 --> 01:35:39,140
into a screw errors so you need to

01:35:35,960 --> 01:35:42,350
either return some or not here in this

01:35:39,140 --> 01:35:53,960
case so this is a be different and if is

01:35:42,350 --> 01:35:55,820
generated to export as well them so

01:35:53,960 --> 01:36:12,230
digital separate the general library and

01:35:55,820 --> 01:36:13,760
the bottom marbrey function dysfunction

01:36:12,230 --> 01:36:20,530
just now the one that you see in a note

01:36:13,760 --> 01:36:36,220
yes that this function he passed that

01:36:20,530 --> 01:36:36,220
section yes and if there's our area like

01:36:47,680 --> 01:36:54,220
we find the

01:36:58,960 --> 01:37:08,020
which configuration this one you mean

01:37:04,510 --> 01:37:10,390
this TFG you need to edit this one if

01:37:08,020 --> 01:37:12,460
you do need to Eddie's actually but then

01:37:10,390 --> 01:37:15,460
the thing is we need to have we need to

01:37:12,460 --> 01:37:25,750
what we run the same function name for

01:37:15,460 --> 01:37:47,940
both this is real but this is to export

01:37:25,750 --> 01:37:51,280
this function to the some most of them

01:37:47,940 --> 01:38:13,989
but because this part they don't have

01:37:51,280 --> 01:38:18,370
they do not but then okay so this is an

01:38:13,989 --> 01:38:19,750
jr. and then the issues I found is why

01:38:18,370 --> 01:38:23,469
do we even need to get to a zone in the

01:38:19,750 --> 01:38:41,170
first place then there's also not just

01:38:23,469 --> 01:38:45,750
bindings like plasm for language they're

01:38:41,170 --> 01:38:45,750
comfortable for coming

01:38:47,880 --> 01:38:56,770
yeah I noticed that because just now all

01:38:52,960 --> 01:39:00,330
we do is just not just then why do you

01:38:56,770 --> 01:39:03,880
will need to use like what's the matter

01:39:00,330 --> 01:39:07,270
then we can just use the binding you see

01:39:03,880 --> 01:39:11,050
there's something called neon okay this

01:39:07,270 --> 01:39:13,150
is another examples this is on is more

01:39:11,050 --> 01:39:15,610
powerful but then a lot more complicated

01:39:13,150 --> 01:39:17,980
you didn't get like similar Rosco you

01:39:15,610 --> 01:39:26,260
need to write like a function context

01:39:17,980 --> 01:39:36,070
okay but as neon is like rust a lot

01:39:26,260 --> 01:39:44,700
there's bindings for us this one is just

01:39:36,070 --> 01:39:49,500
for not yes and exploit the muscle mean

01:39:44,700 --> 01:39:52,180
this is using biding the otherwise madam

01:39:49,500 --> 01:39:55,450
now they one is compatible whereas MD

01:39:52,180 --> 01:40:00,340
this one is compelled to the library

01:39:55,450 --> 01:40:02,920
no this combo to dynamic library this

01:40:00,340 --> 01:40:08,739
different this is compared to the

01:40:02,920 --> 01:40:41,489
dynamic library the way is compiled to

01:40:08,739 --> 01:40:41,489
was like you're using something yeah

01:40:42,640 --> 01:41:16,430
my device laughs about deciding just not

01:40:46,520 --> 01:41:18,260
yet these either like oh my

01:41:16,430 --> 01:41:27,020
they went to use e-commerce so they use

01:41:18,260 --> 01:42:17,239
these correct no Regis I like rush to

01:41:27,020 --> 01:42:21,680
find unbinding just beside the hello so

01:42:17,239 --> 01:42:26,989
before right you write the rust library

01:42:21,680 --> 01:42:45,310
and then you write another binding using

01:42:26,989 --> 01:42:45,310
this exercise you can do but this house

01:42:45,710 --> 01:42:49,880
these are composite anime every

01:42:57,770 --> 01:43:21,719
component like the SFO in the Linux

01:43:03,810 --> 01:43:24,659
where you can important this table is

01:43:21,719 --> 01:43:29,520
not oh I saw that something else I need

01:43:24,659 --> 01:43:31,260
to that new girl every I saw what was

01:43:29,520 --> 01:43:33,150
the main thing we explore some garbage

01:43:31,260 --> 01:43:35,670
collectors are like you see here it's a

01:43:33,150 --> 01:43:38,580
bit different you can use gesturing you

01:43:35,670 --> 01:43:43,199
can use tear to object here so it's not

01:43:38,580 --> 01:43:45,179
really me the normal rascal everything

01:43:43,199 --> 01:43:55,710
you need to sushi like JSON ideas all

01:43:45,179 --> 01:43:58,860
day colleges and then basically expose

01:43:55,710 --> 01:44:00,239
on the garbage collector cell device

01:43:58,860 --> 01:44:04,679
like more complicated to guess that that

01:44:00,239 --> 01:44:07,860
is just like getting the one value from

01:44:04,679 --> 01:44:10,349
the function context which is capping at

01:44:07,860 --> 01:44:14,599
one value and someone you need to use

01:44:10,349 --> 01:44:18,830
another weird thing to the weather this

01:44:14,599 --> 01:44:21,449
argument is string or integer or stuff

01:44:18,830 --> 01:44:23,639
so it is more complicated by then you

01:44:21,449 --> 01:44:26,790
need to trick your laboratory my ability

01:44:23,639 --> 01:44:31,230
is pasta maybe is not compatible bottom

01:44:26,790 --> 01:44:33,739
and like didn't even write some mini yes

01:44:31,230 --> 01:44:33,739
cool

01:44:34,250 --> 01:44:41,270
no it's no kamala just maybe I should

01:44:36,750 --> 01:44:44,489
opera so we see the how if you serve is

01:44:41,270 --> 01:44:51,260
neon good and young but you can't happy

01:44:44,489 --> 01:44:51,260
they don't have okay

01:45:27,350 --> 01:45:33,659
but this is a lot better because when

01:45:30,360 --> 01:45:36,780
you see but this one you get the rust

01:45:33,659 --> 01:45:40,770
arrow here so this a lot

01:45:36,780 --> 01:45:43,440
it has a besides the error in these and

01:45:40,770 --> 01:45:58,860
further down cut to string is the nyan

01:45:43,440 --> 01:46:01,400
error and this one if the grass area we

01:45:58,860 --> 01:46:05,969
have least having at least oh okay ah

01:46:01,400 --> 01:46:25,170
the tree GG ratio okay

01:46:05,969 --> 01:46:28,909
I mean I think you know try to compile

01:46:25,170 --> 01:46:32,060
it to George with except what you need

01:46:28,909 --> 01:46:36,560
look we're familiar with other even like

01:46:32,060 --> 01:46:40,820
propagate or other stuff the compound

01:46:36,560 --> 01:46:40,820
when you compile to yes then you need

01:46:44,300 --> 01:46:50,570
yeah but other than other babies it's

01:46:47,699 --> 01:46:50,570
all I need for that

01:47:08,710 --> 01:48:32,620
and one of the advantages of using one

01:48:29,929 --> 01:48:38,870
is the use to complete the rest type and

01:48:32,620 --> 01:48:41,830
you can use of your anything errors as

01:48:38,870 --> 01:48:41,830
one of the menus

01:48:42,350 --> 01:50:05,040
No can I get this ready a just misses

01:49:59,040 --> 01:50:09,420
differently that is not quite cool I'll

01:50:05,040 --> 01:50:11,640
give this business we use in unit one to

01:50:09,420 --> 01:50:19,710
fight the Jordan in deep the mini

01:50:11,640 --> 01:50:22,350
English Oh procedure is when a healthy

01:50:19,710 --> 01:50:27,930
help can get it so there's no test

01:50:22,350 --> 01:50:38,730
module shelf object format a front end

01:50:27,930 --> 01:50:44,989
for you but not whatever opportunities

01:50:38,730 --> 01:50:49,580
and squeeze out a biggie

01:50:44,989 --> 01:50:49,580
can you hear the killer get over here

01:51:16,040 --> 01:51:22,920
no design can you can put the NPA right

01:51:19,940 --> 01:51:35,060
yeah only runs on either the runs on the

01:51:22,920 --> 01:51:43,910
browser IPA not useful browser yes no

01:51:35,060 --> 01:52:06,450
and here we can put we have because we

01:51:43,910 --> 01:52:15,030
won okay then we cannot be used on

01:52:06,450 --> 01:52:17,600
browser right so basically this project

01:52:15,030 --> 01:52:21,900
is a JavaScript library on outer side

01:52:17,600 --> 01:52:37,490
and then inside a is rust library you

01:52:21,900 --> 01:52:41,940
see okay inside alpha anymore it becomes

01:52:37,490 --> 01:52:45,380
OS you see that the node yes

01:52:41,940 --> 01:52:48,660
runtime understand second second use

01:52:45,380 --> 01:52:52,550
Department the water equals whether the

01:52:48,660 --> 01:52:52,550
frankly if you limited by example

01:53:03,739 --> 01:53:28,290
has explained sorry sorry sorry

01:53:21,050 --> 01:53:32,640
Kashima Kashima so basically here is a

01:53:28,290 --> 01:54:07,370
rust project in the inside so you still

01:53:32,640 --> 01:54:07,370
get to use the previous one is the but

01:54:17,540 --> 01:54:26,719
we should then

01:54:59,390 --> 01:55:09,050
but in

01:55:43,380 --> 01:55:46,449
[Music]

01:56:00,060 --> 01:56:06,480
you make the worst which they do they

01:56:06,719 --> 01:56:17,730
only sing on the epic you for any Philip

01:56:10,960 --> 01:56:17,730

YouTube URL: https://www.youtube.com/watch?v=yfQB2O5X6tQ


