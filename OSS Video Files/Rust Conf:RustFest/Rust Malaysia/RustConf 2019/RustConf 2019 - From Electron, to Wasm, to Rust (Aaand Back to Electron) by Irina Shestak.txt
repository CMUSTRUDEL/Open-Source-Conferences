Title: RustConf 2019 - From Electron, to Wasm, to Rust (Aaand Back to Electron) by Irina Shestak
Publication date: 2019-09-19
Playlist: RustConf 2019
Description: 
	RustConf 2019 - From Electron, to Wasm, to Rust (Aaand Back to Electron) by Irina Shestak

So you heard you can run WebAssembly in the browser, but what does this look like IRL? Seeking the much talked about performance benefits of running WASM in the browser, Compass (GUI for MongoDB) took the great leap forward and rewrote part of the application – a schema parser responsible for document analysis – in Rust. As it turns out, the rumours are true, I repeat the rumours are true: offloading parts of your application to Rust makes it fast, and in some of our cases, heaps fast.

In this talk I will cover converting a part of an codebase from JavaScript to Rust, bringing it to Electron, adding WASM to an existing React app, and deploying this whole lot to production. As Compass still talks to MongoDB via Node.js, I will also cover how we used Rust to improve performance without losing data integrity. This talk is about a success story, but also about a bunch of smol mishaps, fun woopses and lil' dead ends we encountered and how we managed to overcome along the way.
Captions: 
	                              [Music]                               hello how's it going as seen by this                               title I'm gonna talk to you about a                               little bit of electron a little bit of                               rest and like a lot of highlighted                               awasum so I hope you were inferred                               this talk is about something I've built                               and I was able to put into an electron                               aka the browser application and I've                                been able to put it to production and                                the stories about how I did it and all                                the things that did not go so well and                                all the things that went really well and                                all the things in between so I hope                                you're gonna enjoy this little story all                                right so this is the application I work                                on it's called compass it's a GUI for                                MongoDB it lets you kind of look into                                your collections into your documents and                                aggregate a few things and do everything                                in between so you don't have to use the                                shell this particular tab is the tab                                that has a back-end that analyzes a                                schema and that's the tab that Ivy wrote                                in rest and compiled down to azimuth and                                the performance improvements that I got                                out of it were actually really really                                big which so I am giving this talk                                because I'm really proud of the work                                I've done and I didn't come very easy                                but it wasn't very hard and I wanted to                                maybe make it a little bit easier for                                everybody else                                hi I'm marina I write JavaScript and the                                rest I guess now at MongoDB I started                                writing rest about eight months ago and                                I've been writing JavaScript before then                                yeah so you might also know me from my                                jeans my works include my works include                                the the JavaScript event boobs scene                                that I've recently done for queer                                jeaious in Berlin I've also done a treat                                scene for Russ fest in Rome I've also                                made a rest acing zine for this                                conference if you got a chance to snatch                                one great if you didn't I think I'm out                                cool I'm                                I grew up in Vancouver in Canada not too                                far away from here and I write behavior                                with you sometimes I say eh I I don't do                                like the about that the east coast of                                Canada does but maybe sometimes and                                comes out sorry it did come I currently                                live in Berlin though a little bit                                further away so I'm I've been here I've                                been in Portland for about six days and                                I'm still very jet-lagged but that's                                another story I also have two cats this                                one's - oh you might have seen her                                already she's very good                                she's a really good cat that's Joshua                                and the other cats naughty and she's                                also like a really good cat                                that goes for walks that's naughty the                                two of them yeah so that was a brief                                interlude and now we're back to Ruston                                awesome if that was a good interlude so                                it kind of like another brief thing                                before the stock the stock comes from a                                point of view of a JavaScript developer                                writing rest I will focus mostly on                                wasum I'll do like a little bit of a                                rest thing but you're of us developers                                so I know I'm gonna like teach you but                                for us cuz I understand they'll be                                talking down so yeah so this is kind of                                the thing of a talk we've got a bit of                                an agenda that we'll go through so this                                not a class but a little bit of a class                                so we'll talk a little bit about how                                schema analysis happens and compass aka                                the application I work on will go                                through a little bit of that and how                                that happens and kind of what are the                                requirements of how the rest portion of                                things will progress we'll talk about                                why we kind of went with the rest                                solution and awasum solution or the atom                                solution and then a rest solution                                depending on which way you're looking at                                it and then there's gonna be a story of                                the rust and the wazoo and the                                JavaScript which almost sounds like a                                little story that stars so the rest in                                the woz and the JavaScript went to a                                ramen shop and got three bowls of Tim                                katsu                                but I don't know maybe they didn't maybe                                they did we'll talk about all the three                                 whether or not they got the bull of                                 tonkatsu or not so we'll start with this                                 schema analysis in compass as I showed                                 you the tap kind of looks like this and                                 what it does is it helps us look into a                                 collection it queries some documents                                 from the collection it doesn't do the                                 whole thing but it queries some of them                                 and analyzes them to basically help                                 users to detect outliers in their                                 applications it doesn't do the whole                                 thing but kind of just a brief overview                                 of what happens but I think the best way                                 to kind of see what it does is to                                 actually go and look at it so we'll do                                 that as a little brief demo it's kind of                                 cool the log is ridiculous all right so                                 I have a little collection of Berlin                                 cocktail bars the stock also functions                                 is like come to Berlin mix floral we've                                 leave the team and I have curated a list                                 of like really good bars in Berlin there                                 like hand-picked and have ingested                                 [Music]                                 there's a bunch of it's only about                                       them so as you can tell from here so                                 it's not too many so pretty small schema                                 but what the schema tab does is it looks                                 into it and then analyzes it there's a                                 bunch of different information that you                                 can get because the sample is so small                                 we don't we don't we just go through the                                 entire collection that's under a                                 thousand documents and then we can tell                                 what the data kind of looks like so in                                 this particular field house No Mas so                                 the house number it comes in two                                 different kind of types so there is an                                 integer                                                                 probably shouldn't be there but I don't                                 know who inserted it for the purpose of                                 a demo but                                 did you can kind of look into and see                                 what the data looks like there's also                                 map you can work with but again kind of                                 gives you an overview of what your data                                 is like and then you can work with it                                 pretty well and kind of give you some                                 insights as to what to do with it later                                 you can also analyze based on particular                                 aspects of that so we kind of just                                 selected a document that's in this                                 postal code range code size postal code                                 there's only one and it's mr. Susan                                 that's a good one actually that's a good                                 that was not intentional yeah so that's                                 what the tab does and I'll go back to                                 the slides and so the whole applications                                 build it's a JavaScript application it's                                 run an electron which is basically a                                 cross-platform browser you can install                                 them like like good bilam application                                 and install it on Windows or Linux or                                 what's this computer OSX and and work on                                 a bunch of different cross platforms but                                 you write it in JavaScript which is                                 really nice and we compile the downloads                                 web pack and we usually write react so                                 basically like what everybody does we                                 also do and for some of the village                                 visualizations we write D                                             its like JavaScript stack it's built on                                 MongoDB because it's a MongoDB GUI so it                                 kind of works like that but the portion                                 that does the schema looks into two                                 different things                                 it works with a collection sample that                                 samples the collection and looks for a                                 bit thousand documents and then there is                                 a schema parser and MongoDB schema is                                 that parser and what it does is it                                 analyzes the database kind of works like                                 that so first you sample and then you                                 pass it on to the parser and get all                                 that accumulated data about the thing in                                 JavaScript first we go to connect to the                                 MongoDB client then we sample and then                                 we pipe                                 it's a stream in JavaScript then we                                 parse it and we get it a little bit of                                 accumulated data back that we'll have to                                 then replicate it in rust and what this                                 data looks like is that it's a                                 accumulation of all the fields and the                                 information about them so for example we                                 get like a little count saying how many                                 fields we got in that particular field                                 type which is website and then we can                                 get like a total count so not all the                                 documents have a website based on the                                 fact that total count is                                            website field is                                                       what we can infer afterwards and the                                 visual aspect of it and then we get like                                 field types so in this particular case                                 we can see that some of them are                                 undefined because three of them do not                                 or four of them do not have a website at                                 all and the rest of them do so kind of                                 all that information works in JavaScript                                 and then it'll have to be put back in to                                 Wasson                                 or arrests so and then kind of showed it                                 to you and it works really well and I've                                 gave you all the good stuff but so then                                 why are we rewriting it and rest the                                 thing the reason why we're writing it in                                 rest is because we can only function                                 with about a thousand documents at a                                 time                                 and as soon as we want to increase or we                                 want to give a better view of the                                 collections to people who use this thing                                 it gets further slow so if we're looking                                 for something a little bit more and we                                 want to do like a progressive collection                                 scan or we want to again just sample                                 more than a thousand documents it gets                                 really really slow so the example for                                 this is if you want to parse a pretty                                 nested set of documents a pretty nest                                 collection                                                          really long period of time and so we                                 want to optimize somehow and we want to                                 not like get a bunch of JIRA tickets                                 saying the thing is slow so there's a                                 bunch of different ways that like we can                                 go about optimizing it one of them is                                 you know putting this in a web worker                                 and maybe offloading some of the                                 computation okay maybe some of our types                                 are not wrong and we can be                                 little bit better about the way we've                                 actually written there's like something                                 about typescript maybe that could do                                 that for you but I guess at that point                                 would just rather be writing rust and I                                 mean there's a bunch of like Dark Arts                                 with the v                                                               a bunch of speed up but again be you                                 don't particularly need to do the Dark                                 Arts and a bunch of really smart people                                 actually wrote this parser and it's                                 already very well written so what else                                 can we do and you know a good mother                                 there's a metal more attractive the                                 webassembly                                 and so we kind of thought about this and                                 a lot of different you know there's                                 blogs about how good it is and what                                 there's blogs about how fast it is and                                 all these things that are kind of                                 interesting about it so we thought that                                 maybe we can also do the wazoo and write                                 the parser in wasum and actually speed                                 it up that way it gets us an opportunity                                 to be able to kind of explore a new                                 domain it gets us an opportunity to                                 speed something up that without does                                 about performing the dark arts and just                                 trying something else out                                 so what's wazza-wazoo is a low-level                                 assembly language that compiles down to                                 something else it compiles down from                                 something else in the case that we've                                 chosen its rest it looks if you look                                 into the network tab it looks like this                                 rather actually a pretty good art so                                 again compiles down from something else                                 and gets as the performance boost that                                 we kind of liked so this these are the                                 numbers were pretty nested set of                                 documents and there's about a thousand                                 of them but if we look down into like                                 even a larger sample it speeds up even                                 more which is pretty darn fast                                 and so we liked it a lot and the                                 essential thing that it lets us do is be                                 able to have native                                 in the browser and obviously does the                                 job that it's meant to do and we did not                                 have to kind of go out of our way to                                 make it fast it just kind of came with                                 the rust thing which is cool right so                                 the way it works is that we've got the                                 rest in the compass which is our browser                                 and it just communicates through the                                 wise inside of things and voila alright                                 so now we're gonna talk a little bit                                 about the rust I'm doing it again aren't                                 I it's a bad thing now that I've                                 mentioned it so I'm not gonna go in too                                 much into about the rest but we'll talk                                 about a little bit how we made this                                 application work so we start off with a                                 compass and the compass will still do                                 the whole talking and the collection                                 sampling however many documents it needs                                 it'll talk to the database the database                                 will return a bunch of documents that                                 we've sampled and then we'll want to                                 talk to the rest and the rest will then                                 compile them to the wisdom and the                                 wisdom will then talk to compass and                                 then compass will talk to the wasum and                                 the wise and will talk to us it's a lot                                 of communication going on it's very like                                 very communicative set of tools that                                 we've ended up here and so the rest TL                                 DR is actually just here as a little                                 brief story of the number of things that                                 did not work out as a person who's never                                 written rust like language it's a story                                 of quite a few errors and there was like                                 a lot of them like so many of them and                                 there was a lot of existential googling                                 along the way as well                                 but it turned out well it's a happy                                 story and I think one of the reasons why                                 it's a happy story is because rust came                                 with a bunch of help that you don't                                 usually just come built-in in in                                 JavaScript and there's quite a few                                 characters that are just there and                                 they're there and happy to help you                                 alright so how this works we'll skip the                                 bottom part for a moment combis wants to                                 talk to rest Russ wants to talk to                                 compass and all we wanted to do is Russ                                 needs to accept a bunch of documents                                 that come through needs to parse the                                 documents accumulate the information and                                 send the camila cumulative info back and                                 to kind of get this to work the first                                 thing that I thought I would do is just                                 start with a string because string is                                 the easiest thing to understand and                                 that's the type that's so easy to work                                 with so we started off with just writing                                 a string and returning a string and I                                 think that worked rather well the                                 compiler was really happy I liked it a                                 lot there is some art in between that I                                 received BAM but overall good good good                                 story so we were accepting a string but                                 the one thing we then kind of thought of                                 is that well we're working with a                                 MongoDB set of documents which means we                                 were working was something called beefs                                 on my name you know beasts on oh good                                 okay I wasn't sure I just in case but if                                 in case you don't know we want to do the                                 same thing it just has to be in beasts                                 on and I like this definition in case                                 you've lots of you know basically same                                 thing as JSON comes with the way to                                 pronounce it this definition but it                                 comes with same as JSON just has a few                                 different types that would have to                                 handle differently like decimal                                        minimax keys or bin data and things like                                 that so just have to work with that but                                 fortunately there's already a crate that                                 Zoey II to have written                                 for us that we just used and it worked                                 really nicely the only thing you have to                                 do is we still accept a string for now                                 but just convert it into a piece on                                 document and then able to extract all                                 the appropriate information that's not                                 just a string out of that and then work                                 with it which is really cool so then                                 that gets us to like the number                                 situation is like another struggle of a                                 JavaScript developer in rust this is the                                 only number type available in JavaScript                                 it's very good this is the number types                                 available in rustic so as a JavaScript                                 developer when you get into this it's                                 influenced a bit confusing so picking a                                 number type was a bit of a challenge for                                 a JavaScript developer invest I only                                 have we needed like two fields but I                                 spend like a lot of time debating on                                 what numbers to choose and to the point                                 where like I made a flow chart what                                 number should I choose to be able to do                                 this properly and so I have all these                                 numbers that you know I had to choose                                 from I actually just went with Hugh                                 sighs cool and then the next set of                                 things that was like errors how do you                                 date errors can I just do a type errand                                 and be okay with it and then I I was                                 reading a bunch of stuff and everybody                                 said you have to do this and it seems                                 like a lot and so I was kind of thought                                 about this and then I found a crate and                                 the crate was really good so instead of                                 having to write all of that I just did                                 this and that was great I kind of liked                                 this part of rest that was good so yeah                                 it just converted everything from family                                 error I could use the question mark                                 operator and Rob has to be there I don't                                 ask questions it's just in that                                 particular way it has to be I don't know                                 it just wouldn't compile otherwise and                                 obviously like I don't have to tell you                                 the data ownership and rust is is good                                 and bad at the same time and sometimes                                 you've got a fight with the Boro checker                                 quite a bit like here or for some reason                                 this is the only strange shot I had but                                 I had so many problems with this                                 and the one conclusion I kind of came up                                 with at the end of this all is that it's                                 just always right don't fight with it                                 but the TL TL DR that I've kind of got                                 to at this point and at the stage of                                 kind of writing this code is that it                                 helps rust helps you write performant                                 code and you don't have to kind of do                                 anything special you don't have to do                                 anything out of the ordinary you don't                                 have to do any magic and you kind of                                 just end up with clean code right off                                 the bat cool so this particular portion                                 of my work is available at MongoDB rest                                 among the DB schema parser and this is                                 chemo for so that lets you do this stuff                                 but that's the rest set of things let's                                 talk about the allows them a little bit                                 I can't either juicy part all right                                 hello there is a bunch of different                                 definitions for awesome that I got on                                 the internet one of them is from me it's                                 faster than JavaScript is the way I've                                 defined it but to kind of like the nice                                 conglomerated definition I liked is it's                                 a low-level assembly like language with                                 a compact binary format that provides                                 languages with the compilation target so                                 they can run on the web and kind of the                                 main part of that is that it's a                                 compilation target and that's the cool                                 thing so you can kind of get waz them                                 from other different languages you don't                                 have to write the rest I just chose to                                 write rust I know the go logo is no                                 longer that I just really like the go                                 first so I kept it go through right so                                 we wrote rust can compile from it from                                 anything else just compiled on tourism                                 and wasum is what we talk to we don't                                 talk to us directly right so a                                 compilation targets so how do we get to                                 the compilation target                                 well there's luckily our really                                 convenient tool that lets you do that                                 it's called the Y's and bindin and                                 that's what we did as well so I've                                 written kind of like the rest                                 and the rest code had the API and then                                 we wanted to be able to use it in                                 JavaScript so wasn't bind gen kind of                                 generated the things that we could use                                 in JavaScript and one of them is the                                 wasone file which is you know the art                                 that we saw previously and then the                                 bindings a Jas file which is the                                 JavaScript that we can use inside our                                 code and to be able to kind of get all                                 of this all we have to do is just unate                                 ate with Waze and bind Jen and because                                 we want you know the JavaScript                                 co-workers to be happy we just kind of                                 use the GS a custom names so the new or                                 the write JSON without the underscore                                 because that gets confusing when you're                                 in JavaScript land so it's good when you                                 start off writing Waze um you kind of                                 just end up with three different things                                 you can use you can use the error you                                 can use the value and you can use like a                                 borrowed string so that those are the                                 kind of things that ended up in the                                 beginning and it's really good thing                                 because I started off with a string to                                 make the compiler happy which is really                                 good so although I had to do is just                                 keep what I had and return a.j s value                                 or return a string and that worked sort                                 of let's compile and see what happens                                 spoiler alert I guess a little bit um it                                 didn't compile right away and is kind of                                 interesting this error that came through                                 and what it was telling me is the error                                 that I was using was not working which                                 means the faily error solution I have                                 tried to use because I thought I was                                 being really clever did not actually                                 work and before you tell me you should                                 have used the box the Box also doesn't                                 work so an interesting way of actually                                 handling this is that I had a specific                                 wrapper that worked in rust and a                                 specific wrapper that worked in                                 JavaScript so all I did was I rubbed my                                 rust methods in Maya zhim exported                                 methods and matched on the result type                                 and whenever I got an error                                 I just stringify it into J's FAL you and                                 that worked and that works really well                                 can do the same here thankfully we're                                 also not the only                                 people who were struggling with this                                 there's an open PR on this issue as well                                 so you can check it out and follow it                                 there as well                                 cool so start off with a string kind of                                 worked for us it's good we've got a                                 compass talking to the database                                 receiving documents talking to Oz and                                 wasn't talking to rust but what we're                                 kind of need to think about is the fact                                 that we're getting beasts on documents                                 coming through from the database we're                                 strong of fiying them and then sending                                 them to us um and then what happens when                                 the new stringify is you actually lose a                                 bunch of data integrity because what be                                 some does is that specifies when                                 something is decimal                                                  when something is bin data so whenever                                 you stringify all of that you actually                                 lose it so something we had to think                                 about is that how do we make this work                                 otherwise so what the idea came is that                                 okay so we have the node driver                                 returning raw beasts on what if we just                                 send that Rob instead of like                                 serializing on JavaScript side of things                                 deserializing on the rest set of things                                 so we can skip all that serializing and                                 deserializing steps and just pass around                                 robbie so that was cool idea and but                                 that requires us to send the Veck                                 basically like you need a vac of sorts                                 and how do you do that when I just told                                 you that the only thing we can use is                                 error value and string are we stuck                                 again we're not and why we're not stuck                                 is because there's a crate that's kind                                 of attached to as App Engine called JSS                                 and what that does is it lets you have a                                 bunch of ROM bindings to JavaScript API                                 so that you can use and rust and a bunch                                 of them are there's like a very long                                 list but some of them were include                                 object and function and you and                                         date and iterators and things like that                                 but what we're interested in because                                 we're starting off with a raw buffer                                 which is technically a vector which is                                 technically a U and eight array what can                                 you use a u nth iterate for that so what                                 we do is                                 we accepted you and eight array and then                                 we do some magic in between and then we                                 just basically decode Abbyson document                                 that comes up with the correct type of                                 data information a.k.a decimal                                           in as a decimal                                                         of decimal                                                               lose any data and basically what it does                                 is how much toilet humor                                 basically what you're able to do is and                                 you just take the data that comes in                                 from JavaScript heap and then converted                                 to the Oise ohm linear memory and then                                 just use it as part of la's in linear                                 memory inside your rest code and the man                                 took it between is actually kind of                                 interesting so i'm gonna go back to the                                 magic in-between i i said before these                                 are the things if you ever pass in                                 anything it doesn't have to be just a                                 you and eight array just like any kind                                 of array buffer or anything that's in a                                 vector in javascript and has to be like                                 sort of a vector in rust you got to                                 force it to be a mutable slice to be                                 able to get it through to whatever code                                 you're trying to do                                 a little bit of magic cool so error                                 handling i kind of said that we would                                 work with like a string and we just                                 return a string that's a j s value but                                 you can be a little bit more granular                                 with it also with a j s is great and                                 what we can do is we can specify the                                 types of errors so we can do a type                                 error and we can create it and format it                                 and get it to that particular state and                                 there's like a bunch of different ones                                 you could do a type eval range syntax                                 reference all the types of javascript                                 things you want you can get them so then                                 like the next thing is like how do you                                 debug wisdom in your rest or in your                                 javascript and that's kind of word gets                                 interesting it's a it's again a story of                                 a lot of looses so the number one thing                                 is like a runtime error that you get                                 and then what that comes to is let's                                 hope this just works yes it does so what                                 you get is you get this kind of error                                 but you could point to the part of your                                 J's bindings and what that does is it                                 takes you to where that J has binding is                                 causing the error and you can get it                                 through that so it gets a little bit of                                 tracking that you can follow through you                                 can also get another whoops and this one                                 will come through as an error that you                                 would throw this one through because I                                 threw it on the JavaScript side of                                 things because I wanted to throw it and                                 you have scrip side of things and again                                 you can kind of follow that through as                                 well it starts off with a wasn't bind                                 generator and you can follow that as                                 well which does not give you a very                                 useful information there was um unnamed                                 also does not give you a very useful                                 information but the next one which is                                 the two object call which is one of my                                 API calls kind of gets you to that and                                 you can kind of figure out that it's one                                 of these API methods that throws for you                                 but sometimes you get errors that like                                 make no sense and this one is the one I                                 didn't prepare for this is like an                                 actual error that I got and four people                                 in the back of the room it said this so                                 it through in my to object method on                                 line                                                                  about but I only have three API methods                                 and they're like all rappers because                                 guests are coming over and I just shoved                                 everything else and like the drawers and                                 I only expose three API methods to                                 follow through and so this error was not                                 very useful for me because there's like                                 a bunch of code that's hidden under the                                 to object and what it said is that there                                 is like an in recursive use of an object                                 detected which would lead to and say                                 while I sing in rust what it was rather                                 confusing and so I went and searched for                                 this error and I got a bora fail                                 somewhere and wasn't bindin but I did                                 not get this anywhere throughout my code                                 compiled fine and the rest side of                                 things and so I went a little bit deeper                                 and it turns out it's happens on a ref                                 cell side of things and I kind of went                                 into this code a little bit later on                                 I took a brief break from this and I was                                 like where was I using ref cell that                                 seems like very advanced magic that I                                 should not have been touching and so it                                 was a little bit confused that was not                                 intentional so it was not like the kinds                                 of things I wanted and in what it turned                                 out to be is that I had an unemployment                                 'add call of for something that I was                                 not meant to use and I was hitting that                                 case which is you know you should                                 probably leave unimplemented code in                                 your code like you should probably                                 implemented but it took a little bit of                                 time to get through to that and                                 obviously like only having three API                                 methods exposed it's kind of hard to                                 debug and so this is entirely a little                                 bit unrelated I wrote this pretty                                 printer called FEM it's for the lock                                 rate and it pretty prints your log stuff                                 for you                                 and unrelated to Azzam I got a was in PR                                 that makes it work in wasum and so I                                 kind of put it into my code to see what                                 it would do once I got that plasm PR in                                 and I actually got of line numbers and                                 there was like line numbers everywhere                                 so I can see who are like a bunch of my                                 code that I was logging was coming                                 through in a particular verse side of                                 things and I was really cool I was very                                 happy with that so every time I'll do                                 and implement it and my like I'm hacking                                 on this code I'm just gonna use like                                 them and just log it like that so then I                                 get a little bit of line numbers and                                 don't have to like think about the API                                 objects I've exposed cool so then we                                 build again and then we get a whoops                                 again and I wonder what it would be now                                 and it turns out something I was using                                 was using Lipsy and that's the                                 interesting thing because I'm not using                                 Lipsy I know that I shouldn't be using                                 Lipsy but one of my dependencies further                                 down was using lips                                 and it was a B sound great but the nice                                 thing about that is that you can do a                                 little bit of config tags that would                                 compile a certain way for Azzam and                                 compile another way for rust that I was                                 able to use like that fortunately this                                 actually got written down entirely                                 because this was making object ID the                                 way that object ID is no longer                                 specified so I didn't even have to do                                 that but just so you know lots of your                                 dependencies could be using Lipsy and                                 we've got to be like beware of Lipsy                                 when you would compile down to Azzam                                 cool so we kind of got to this was um                                 generated by some bind gen generated                                 code that we can use in our JavaScript                                 application so let's look at the                                 JavaScript this one's a really short                                 section so we'll just quickly go through                                 it because it's once we get to                                 JavaScript it's nice so if we get to                                 JavaScript and we use something called                                 web and pack how many of you have heard                                 of wasn't pack cool sweet so it makes it                                 really easy so you can just npm install                                 the whole thing and it just works then                                 one caveat with it is it got it load                                 async and it has to come from like a                                 little bit of a process but thankfully                                 if you load a sync it sort of works                                 except the one whoops and it's the web                                 pack and after a bunch of like research                                 and struggling with it like a lot of                                 struggling with it you get to the point                                 where you just have to install a very                                 specific version of web pack and then it                                 just works and then to load it async you                                 just need like a dynamic import and                                 Babel and but um cool so we had to                                 adjust kind of like this flow a little                                 bit for electron we skip the middle step                                 and we just require it async and it                                 looks like this you import and then you                                 do a promise on the wives of module and                                 then you use it as is and the last part                                 of thing is yeah actually using it                                 the API is has three points one is just                                 using the new kind of instantiating the                                 module and then every time there is data                                 that comes through we write it to the                                 parser and obviously the rest side of                                 things stores it inside the schema                                 parser and then once we're done we call                                 either a to jason or to object to be                                 able to get all of that data accumulated                                 and it works really darn fast                                 cool so the TLDR the TLDR is that i did                                 not have to do anything fancy to be able                                 to get really fast code running in the                                 browser i just kind of came with it it                                 came with the rest side of things                                 Russ compiles down to assembly and web                                 assembly is really cool you don't have                                 to as Nick has stated you don't have to                                 get a bunch of speed without doing the                                 dark arts and frost and wasum are there                                 to be able to do that for you I I wanted                                 I didn't want to say that it was hard it                                 was a hard like six months and it took                                 me to like build out the whole thing but                                 it was actually like a lot of fun to be                                 able to do it right so our compass now                                 talks to rest and that's how we got it                                 to do it thanks so much for listening                                 [Applause]                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=Yo83yhRN_Ss


