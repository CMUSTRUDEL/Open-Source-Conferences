Title: RustConf 2019 - Messing Around with fn main() and Getting Away with it by Yoshua Wuyts
Publication date: 2019-09-19
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Messing Around with FN Main() and Getting Away with it by Yoshua Wuyts

The introduction of return types in main has made writing binaries a lot nicer. But why stop there? What if we could make main an async fn to support top-level await? Or perhaps allow main to take command line arguments as parameters?

In this talk I’ll show how to make fn main perform party tricks, make boilerplate disappear, and saw code size in half. And by the end of the show you’ll have a good picture to take home of what Rust might look like in the future.
Captions: 
	                              [Music]                               hello I'm Yosh this is my talk                               it's called messing around with Maine                               and getting away with it now Who am I I                               am Yosh like I said like Suns already                               said so it's three times I guess I'm a                               research engineer which means I guess I                               do open source anyway oh yeah background                               I used to do like loads of JavaScript I                                did I look for like five years published                                like things on NPM a lot and then I                                moved to rust like two years ago                                I like Argan ah makes I guess it's the                                is the main thing that I want to share                                there anyway introducing the main                                characters of today's talk because it's                                not me it's not function man it's                                actually this guy over here                                names Joshua another cat it's naughty                                and because this is a rest talk you know                                we need to introduce some concurrency                                some parallelism so here they are                                together all right                                okay cool so why are we giving this talk                                well first off my refseq of my proposal                                got accepted which means that no                                organisers were like okay we think you                                can give a talk but I was surprised oh                                so it's like sweet I like function main                                and in JavaScript you don't really have                                function man you just add a pragmatic to                                the top of a file and you execute that                                file and it's like oh cool that works                                but you know a roast wavefunction man                                it's like a clear defined entry point                                into your program I think that's very                                cool I think when we added the result to                                it that was a nice addition I was like                                thinking hey what other things can we                                like do I like your wax I like it you                                know people also call this urban onyx or                                like developer experience I think that's                                nice I think if if we provide a nice way                                for people to use things then they'll                                tend to use it and fewer mistakes are                                made and we all have a little bit more                                fun oh yeah third one is sharing ideas I                                have a bunch of ideas I've got a stage                                so sharing ideas that's what I'm getting                                this stuff cool so let's pretend we're                                all like time travelers I'm gonna fast                                forward to the year                                                   addition out and we're gonna write                                function main for a little HTTP server                                that we're building so mm-hmm well we                                started off with a function main you                                know you know this one because we're                                building an HTTP server and with some                                concurrency it's gonna be a async                                function main you can't call a wait                                without a sync so you know it's a sing                                function main also we need to handle                                errors we're not sure quite what kind of                                errors so we just say hey this thing                                throws if you're familiar with Java                                it's like checked up session exceptions                                sweet a little common because we're like                                good citizens we say started HTTP server                                then you know we need input to our                                applications or going to find some input                                arguments args of type args which we're                                defining out there you know                                well it's HP server so we need a port we                                need an address and I always say cool                                let's turn this into CLI so we derive                                something from crates i/o which                                implements CLI so wait it's cool then                                we're like hopefully tied still around I                                know but yeah we're gonna build a low HP                                server say I created a new tied app and                                I'm on the on the route slash for the                                methods it just be method get' we're                                gonna say hello world man                                that's pretty nice and then we say start                                this thing on the address and the port                                and we await it which is fallible and                                then this thing goes that's a HTTP                                server in ten lines it's pretty good for                                a scene competitor might say oh hope                                forgot about this one but you know we                                need to start logging so you know let's                                let's add some logging to this thing                                wait okay cool let's run this with a                                little help output and we'll probably                                look something like this pretty basic                                but pretty good it's kind of what you                                want I don't feel like run a itself we                                say listen on port                                                   get listening on localhost                                              things now running sweet alright so for                                 today what we're gonna do is we're gonna                                 go over how do you get to async function                                 main how do you get main arcs like args                                 amen and finally improving errors in                                 main or as I like to say we have three                                 main courses                                 no joke they're happy Oh laughs all                                 right good let's write function man                                 likes                                                                  we're using proc macros procedural                                 macros if you're familiar with the word                                 you might be like oh yeah so I'm sorry                                 I'm sorry through everyone who knows                                 what this means all right                                 act                                                                    this today the async function main well                                 you don't but you define a function main                                 Oh under server I should preface this on                                 this server which is native or whatever                                 you get a little executor in this case                                 we're using async stood which came out                                 last week let me say block on and inside                                 of it would put a sink closure                                 so what happens here is you need                                 something to execute the async code all                                 the futures and stuff and at the top                                 level you know you mess it all the way                                 down but top levels something needs to                                 be running this in this case block on it                                 runs all that async code until it's done                                 at blocks until it's done inside of it                                 we're gonna say hello Joshua                                 which we met a bit earlier we're gonna                                 sleep the sleep to task for one second                                 we'll wait it and under it I'm gonna say                                 hello naughty now I want you to just                                 take a split second here to be like okay                                 what's what's the ordering in which                                 these things get printed cool let's                                 write C so we run this thing we say                                 first comes hello Joshua then comes                                 hello no D so this one came first this                                 one came second cool all right now let's                                 let's do the same thing for the browser                                 all right so we have a function main we                                 can't use a                                                              wizened bunch and futures and their                                 spawn local I would say spawn local we                                 give it a sync closure we say hello                                 Joshua                                 we sleep the task for like one second                                 again and then we say hello naughty now                                 again like what's the ordering here                                 that's C well hey oh hey I forgot about                                 this alright in order to like make this                                 make this work you actually need to do a                                 pub function main and likewise invitin                                 start there's an actual code that will                                 actually work if you use this I hope so                                 to run this you know awesome example                                 hello naughty                                 hello ChaCha yeah that's not super                                 because it means that this one's running                                 first and this one's running second and                                 the reason for that is because we're not                                 in control of the executor in the                                 browser because we're hooking into                                 JavaScript promises and promises are                                 indicated immediately which means that                                 spawn local essentially kicks off a                                 background task as queued for a next                                 take on the event loop and print line                                 nor or hello naughty is printed                                 immediately right sirs differences                                 between how it works in the browser and                                 how it works on servers were difference                                 in control and there's like more                                 environments where these differences                                 exist so a solution to this would be                                 where you can't get it wrong is if we                                 had something like async function main                                 in which we can just say hey sleep for                                 one sec then we say hello Joshua hello                                 naughty there's no more a question of                                 ordering and a way we can make this                                 happen today is using runtime which is                                 I'm not sure if you should be using this                                 but it works you can add a little                                 attribute to the top which just says                                 like it is async function main and we                                 have a PR out we're not smart to forget                                 that actually makes this work on both                                 the server and in the browser                                 removing the differences which is kind                                 of cool so yeah that's that's the first                                 one that's a second one right go chapter                                 two arguments how do we get arguments in                                 main                                 well um little primer on what arguments                                 are I like to think of them as input to                                 your application right so you boot up                                 your app and like it gets arguments it                                 gets input from somewhere so a classic                                 one is for command-line apps you have                                 your command-line arguments but also if                                 you're running stuff again in a browser                                 what you might actually have is URLs                                 like query parameter like stuff on                                 window navigator that is like initial                                 state but you need to read out before                                 you can boot up your application or                                 someone's in lining JSON and your HTML                                 header and like whatever but you know                                 there's initial state this thing another                                 one's like server loose apps which might                                 have an incoming request that's the                                 thing that's like given to it my boot                                 up and has like some form of output at                                 the end again so arguments today how                                 would you go about writing a little                                 command line app probably something like                                 this little function man let me say                                 students you know the n marks so we get                                 the arguments and I only say for Argan                                 args let's print the Arg cool sweet well                                 not really that's not really how you do                                 things that that's that's the the pretty                                 example the actual example would                                 probably you know look a bit more like                                 this you know it's a function man we got                                 sedan mugs again you know and instead of                                 like iterating over it nicely oops it                                 needs to be mutable also we need to skip                                 the first one because those are self you                                 know then we get the next one oh we're                                 building HTP server again by the way we                                 get the address out Oh unwrapped or                                 Hanalei or somehow cool let's get the                                 port that is next on the wrap parse                                 unwrapped all right that's not that                                 great so in practice people don't really                                 do that they tend to use struct opt more                                 likely or clap which is similar sorry                                 you know you define a little struct you                                 say like hey I want to port you                                      want to address which is string then we                                 derive struct opt on it and then we say                                 for - P or - - port is that one instead                                 of like positional - a or - - address is                                 the other one you know I really like                                 that can just like click to the next                                 line yeah and then like the way we                                 instantiate this and we say like we get                                 the struct which now implements a from                                 args argument that you need to know                                 about there's a few others which I've                                 never used then you say Argos remarks                                 and then we get that which means in                                 either instantiates or panics you know                                 is they like the questionnaire is like                                 is it clear that we are instantiating                                 application input I don't think so so                                 arguments of tomorrow a better way of                                 doing this I think would be if we                                 followed what oh I have a double slider                                 if we follow what C does with argh C and                                 argh the but instead of like doing those                                 which is only for iterating we could                                 just put arbitrary like structs in it as                                 long as they implement some sort of                                 trait                                 into the main position                                 can do the parsing for us so in this                                 case we would be able to define args and                                 args like and it if as long as it parses                                 we get the actual instantiation so it's                                 cool from from there on out we can look                                 assume that the states correctly be                                 initialized wait so how can we make this                                 happen today is using a little attribute                                 called pas main from a critical path I                                 would not recommend you use this in                                 production but definitely try it out so                                 you have like parrot-like async code                                 things go horribly wrong tried to fix                                 they can fix it anyway yeah this is                                 pretty fun like try it out it actually                                 works works like this you able to see it                                 which I think's putting this yeah so                                 arguments of tomorrow is for service you                                 know we were talking about like a server                                 list how would this work so it is a                                 function main                                 let's async we get an incoming event so                                 this this app is like boot like                                 triggered started whenever there's an                                 event incoming in this case its type                                 string then we say cool we're gonna                                 print it out and like return it it's                                 like a little fallible signature there                                 we say okay event then we add a lambda                                 lambda in the case of AWS so this is not                                 even too far out because actually                                 there's OPR under arrest lens at runtime                                 and they were like oh paw is pretty                                 sweet like we want this for our thing                                 and you know it's pretty cool so yeah                                 it's definitely possible                                 yes great okay cool let's ignore that                                 let's get to earth all right Eris cool                                 so a quick little primer again for what                                 our errors there's a there's two kinds                                 of errors I like to think about                                 there's the errors you can handle                                 which I like to refer to as exceptions                                 they're the result or type                                 and there's the errors you can't really                                 handle which are the panic types which                                 are invoked through panic and they they                                 tend to crash your app there's some edge                                 cases around threads and whether or not                                 that should like crush your app but                                 let's just assume it crashes your app                                 right cool so today there's a little                                 thing about oh is this okay mess up my                                 slides I'm not sure I think I messed up                                 my slides here all right so okay                                 wrapping I think this is supposed to be                                 catch-all but whatever all right so we                                 start off with async function main which                                 returns a results and it's gonna return                                 some form of some form of error which                                 we're going to find it a bit we just say                                 is type exception all right                                 then inside of it we're gonna do two                                 things we have a get cat method which                                 queries an API somewhere to get a cat we                                 wrapped it in debug before I forget why                                 and we have another method called                                 process cat which may or may not do some                                 sort of like IO might do                                 say for tooth database I'm not sure                                 right we we don't really know we're just                                 looking at this at this method we have                                 these two these two methods that were                                 like trying to do something with they're                                 both async they're both fallible and we                                 don't really know what the what the                                 error type here is right we just see                                 like oh it turns a result of something                                 and the other one probably returns a                                 different result so what we actually                                 want to have is we're going to have an                                 error type and our top level that can                                 like abstract over both of them where we                                 don't need to choose one but we just you                                 know like it's an error sweet let's                                 propagate it so the way we would define                                 this today is by oh and we're missing a                                 little little okay of                                 unit at the end which is very common so                                 the way we would define us today is we                                 would define a little arrow type up top                                 with which is din error then stood error                                 error I didn't want to type it out it                                 didn't feel in slide so just in there                                 we need to box it so when you turn into                                 a pointer because it's async code we                                 need to add a send bound we also need to                                 add a sync bound unfortunately and we                                 need to make sure it doesn't borrow so                                 it needs to be a static lifetime all                                 right that's pretty verbose and if                                 you're new to rust or need to async rest                                 you're like whoa I need to type that out                                 every single time it's like yeah or                                 reuse it somehow but it's not built-in                                 so that's not great so challenges yes                                 okay fix this slide catch all exceptions                                 that's that's that's one challenge right                                 next challenge                                 okay wrapping alright so yeah like I                                 said earlier as we need we need this                                 little this little thing here at the end                                 okay of type unit and that's not great                                 we're like writing like infallible code                                 code that doesn't return results the the                                 return type is always unit I was like                                 assumed under this unit so we don't need                                 to write it out we don't need to write                                 it out a signature we don't need to add                                 to the end of the line it's just like                                 ATS unit whatever but if it becomes                                 fallible right then we need to write a                                 result type like you can see up there                                 and also like write it into into our                                 return type so you know a one-liner                                 might become like a two liner for sure                                 and like in this case we have a method                                 that's actually supposed to be like two                                 lines but we need to add that okay of                                 that thing at the end it's not super and                                 so another one is okay wrapping that's                                 that's a bit of a challenge these days                                 it's it's a little work there so finally                                 is exception context so in this case if                                 we have a panic Kotick and panic you                                 know for example a function man just                                 panics with oops you know you run this                                 it will look something like this you                                 know it says thread main panic that oops                                 source may in our ass                                 line six in there or whatever the sides                                 I don't know what it's called and then                                 then we get a back-trace a list of                                 reasons how we got there it's not it's                                 not always like the nicest to look at                                 but definitely if you're like digging in                                 you're like okay I can find what                                 actually went wrong here so you got                                 location which is important and you get                                 a list of reasons now if we were to like                                 run a previous code an error occurred                                 right                                 it doesn't panic it might look something                                 like this it's like oh we got an error                                 suck it hung up cool did this happen                                 when we had like an incoming request did                                 this happen when we had like an outgoing                                 request                                 where is this happening right so yeah                                 it's not super so that's not a challenge                                 era context so in the errors of tomorrow                                 what would be nice is if we could get                                 rid of this if we can also like get rid                                 of this a way to do this might be to                                 have a type of stud error exception but                                 we don't instead what we're proposing is                                 throws right so we added a little                                 keyword which removes the need for okay                                 wrapping which allows you to use throw                                 which we're not showing here inside the                                 function body to propagate errors                                 question mark keeps on working but we                                 get rid of the okay wrapping also after                                 throws you could do an error type to                                 specify like a it throws this error but                                 if you omit it it just says like cool                                 it's a boxed in error send saying static                                 you know that's kind of nice also what                                 we would want probably is if instead of                                 like that little error socket hang-up we                                 could get something a little bit closer                                 like this it says like hey the socket                                 hung up because while we were performing                                 a get request while we were getting a                                 cat from the API and starting our HTTP                                 server so you're like oh sweet I kind of                                 get where this arrow came from and like                                 you can also see a location there's a                                 little macro in the standard lit to just                                 statically inject the location of where                                 something is so Cerf one off                                 oh cool we're using surf fair and then                                 like I went into Maine all right sweet I                                 know I know where this error came from                                 and like I can start figuring out                                 why it is this happening so you get                                 location and you get a list of reasons                                 right so how can we make this this                                 happened today                                 whoops you can't what you really would                                 want is if this was possible and we have                                 a little gist somewhere I hacked                                 something together with like try                                 functions in the block and like proc                                 macros to make this work it's not usable                                 this really someone someone should just                                 like build that so yeah if you're                                 looking for side projects please see                                 anyway what we can do so we come to a                                 throws thing what we can do today is                                 using arrow contacts so the in failure                                 there's a thing called result text which                                 allows you to add context to an error                                 which looks kind of like this so say our                                 error dot context whew wait did I mess                                 around a wait and question mark no                                 turkey orderings exactly right here but                                 the idea is you say duck context on your                                 result type and then you add a little                                 message like hey we're trying to get a                                 cat from the API but what we're doing                                 here is we're using it at the time of                                 our what do we call it but but but at                                 the time that we're calling it what we                                 really want is like sorta inside of the                                 function definition inside the function                                 body so yeah it should actually part of                                 Kali it'd be nicer if that was like                                 there yeah anyway                                 Eric context tomorrow what can we do                                 here is now imagine the little get cat                                 function we would probably define it                                 something like this where to say hey it                                 returns a string it's called get cat                                 it's an async function inside of it                                 we're gonna call an HTTP client this                                 case we're using Cerf we give it a                                 little URL we say get something from the                                 API gives us back a cat struck that                                 we're like destructuring into just a                                 name value does that's the only thing we                                 care about and we await it now if we                                 look at this function it's like if we're                                 wondering like what does this do then                                 actually it's pretty easy to see because                                 we have a little comment up there that                                 says hey this thing gets a cat from the                                 API so it would be really nice if we                                 could do                                 would be if we could just define it like                                 this where you say like hey what's the                                 context for dysfunction it's just the                                 doc comment up there which says get a                                 cat from the API this works today so                                 instead of like writing all that all                                 that dot context code with failure and                                 whatnot you can use this thing which                                 will add that for you using just                                 comments yeah it's called context                                 attribute you can get from Crites io I                                 think this one's reasonably solid it                                 will not break your code I hope anyway                                 in conclusion rounding out this talk is                                 you can write this function main that we                                 saw here easily just by doing this today                                 please also throws doesn't work by                                 openly is like something to look forward                                 to if you're interested in how we made                                 all these things work they're all like                                 available and crates i/o and the codes                                 open so you can like look through them                                 but most importantly if you want to                                 define your own proc macros and play                                 around with stuff I check out the sink                                 rate the quote crate they work together                                 and ace the Explorer done that which has                                 a wasm version of the parser and a ste                                 walker for Russ which is super nice                                 because you just put your Rusco it in                                 there like shows you the AC definition                                 of your rest code which is super useful                                 if you're like getting into this so yeah                                 alright final note from Cheshire naughty                                 who said they were two main characters                                 they kind of took a backseat sorry but                                 they're they're back here so you know                                 just just got a good have them say hi it                                 was Joshua on the skateboard                                 and here's I here's a here's a naughty                                 going down the slide alright thanks so                                 much you can find me here on Twitter get                                 up whatever                                 [Applause]                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=kts3yTyoUYc


