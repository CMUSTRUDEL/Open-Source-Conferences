Title: RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry
Publication date: 2019-09-19
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry

Rustaceans want to write GUI apps in their "native language" and to do it with declarative syntax, type safety, great tooling, and minimal runtime overhead. Moxie is a platform-agnostic component library to provide just that, currently targeting the DOM, win32, and WebRender, with more targets to come. We're on a path to building Rust apps that instantly reflect user intent, correctly handle inputs, and save battery and CPU cycles. We discuss what makes UI hard, how others handled that in the past, and what we can do today in Rust to clear those hurdles and unlock new powers.s
Captions: 
	                              [Music]                               all right my I'm miked I can hear myself                               am I on the screen I am on the screen we                               are all here it is Russ conf                               thank you by the way for being here                               sharing your lovely presence with me                               here and thank you to the staff and                               organizers as well it's I mean having                               been on the other side of some events                                it's monumental and I am not jealous of                                the job they do and I'm extremely                                grateful for it                                if you see me organizer around to thank                                them so Who am I I have an origin story                                much longer than any of our births of                                course you all do too if you aren't                                thinking about that a lot these days you                                might want to like it's a fun story - a                                fun line to draw into the past but I've                                been using Russ for about four years now                                I learned it right around the time I got                                my first full-time programming job as                                like a professional software person so                                my enthusiasm for rust has had me                                involved in this community for that                                whole time and it's been a pretty                                central element of my like personal and                                professional growth lots of friends I                                see in the audience here you've all been                                a part of that and people that I would                                like to meet afterwards hopefully you                                can be a part of that in the future and                                so aside from the rusted story before my                                current my current work I was at the                                startup building like react native                                developer tools and I got pretty nerd                                sniped by you know the challenges of GUI                                application frameworks and being able to                                iterate on them over time trying to ship                                products on multiple you know multiple                                platforms don't even begin to think                                about like desktop and mobile and so you                                know I kind of been thinking about it a                                lot and I'm working on this project for                                a while and then of course the the                                requisite disclaimer I do work at a tech                                company who has a very effective and                                professional PR and marketing department                                I am NOT here as a representative and                                further disclaimer I'm actually not                                working on this with my day job at all I                                do you know I'm very privileged to write                                rust for a pay but this isn't what I'm                                doing and then another point to keep in                                mind I'm like almost definitely wrong                                about really important things I started                                this project in part because I wanted to                                build apps and I was too picky so I'm                                not really a person who builds apps I                                see a lot of interesting technical                                problems here but I want to learn more                                from people who do I want people                                to have things to use and I you know I                                think that that feedback process and                                even you know experimentation outside of                                my work is absolutely necessary for us                                as a community to do this thing which                                kind of brings us to this thing I want                                to write apps and rust as I mentioned I                                want to give back technology that I                                build doing that to this community                                that's been you know real support for me                                and I have some specific technical                                desires of like how that should work                                those should be structured what should                                feel like the requisite levels of                                dopamine                                I think the dopamine is an element of                                application development that is is                                really important to optimize for and you                                know rust is not constrained to a single                                environment so if we are sitting here                                asking ourselves what do you want from                                us GUI I think almost every person I've                                spoken to has had implicitly in their                                mind it's gonna be awesome and it's                                gonna be cross-platform and I'm just                                gonna like I'm gonna go rust all day and                                then I'm gonna like click deploy on                                github and it's gonna be on like eight                                targets oh right I mean that's what I                                want right but I want to reuse my                                knowledge I want to reuse my tools when                                I'm in different environments this is a                                brief aside just I found that a o-l                                image this is like our world is                                beautiful isn't it let's just let this                                soak for a second this says discover                                ideas about blockchain technology email                                 marketing today's email inbox looks                                 significantly different from the AOL                                 inbox of your make sure your email                                 marketing has grown with the times                                 tagged with blockchain technology                                 business innovation and Thought Catalog                                 so that's totally relevant my point                                 about the cross-platform thing though is                                 it's like these engineering efforts to                                 build something that you can actually                                 use to do that I click a button and I                                 hit eight targets with my deploy they're                                 massive engineering artifacts                                 coordinated over huge groups of people                                 like the program expertise experienced                                 in this room if it was all UI developers                                 I like we could spend a year or two it                                 might crank since I'm really good at                                 right like it you have on dolls law                                 scaling with the organization like                                 people are more effort to coordinate and                                 there's just there's a lot of                                 nology that you have to cover to talk                                 about applications that are visually                                 interactive right so this is an                                 architecture diagram if I can't see any                                 of the details that's fine                                 this is Coco Mac OS is application                                 framework they've got                                                                                                                       their own windowing and drawing tools                                 they've got data persistence they've got                                 text layout rendering lifts                                 transformations they've got image                                 processing rendering etc got                                 notifications you know network access                                 via asynchronous i/o etc here's some bit                                 from a newer Android jetpack framework                                 listing they've got data binding                                 lifecycle navigation pagination etc etc                                 etc etc and a lot of these things                                 actually nothing to do with what's on                                 screen right there's another interesting                                 example and obviously in this orbit so                                 it's like it's on my mind but flutter is                                 a really cool set of technologies built                                 for you know basically the like I want                                 to write a GUI that hits eight targets                                 at once kind of tasks and one of the                                 ways they do that of course is by like                                 hiding many details from the platform                                 from you and I don't think that's very                                 rustic but it's a really cool project                                 and it's this is a good nice thing to                                 look at just say like ah yeah you really                                 do need all of those things if you think                                 about each of those lines that's like                                 three crates per box at least so you                                 know you might want to temper                                 expectations if you think that we're                                 gonna have like these in rust covering                                 everything for it in the future there is                                 one caveat to this of course which is                                 like human civilization has this really                                 big project for making UI and it has                                 really cool properties like it exposes                                 stable public API that's lower level                                 than most applications want to speak                                 it's been a place for experimenting with                                 you know different paradigms but it has                                 you know limitations and I think those                                 limitations are fine right it's the web                                 is good but it's not going to provide                                 like a rich you know local data oriented                                 consumer thing for managing your life                                 for someone on a future phone you know                                 on a cheap device and the world is made                                 up of a lot of these people in the web                                 has a difficult time addressing their                                 needs right now and I think the other                                 unfortunate thing about that is because                                 you can actually make like really cool                                 Russ web stuff and I've been prototyping                                 initially on the web is that I'm                                 actually I'm pretty sure that having our                                 own flutter                                 equivalent is pretty far off to the                                 point where I'm satisfied with the                                 personality at least I think I should I                                 should you know call out some really                                 cool efforts that have been happening I                                 think druid and orb DK & Azul are really                                 interesting and exciting I was a little                                 sad to see it as well wasn't getting as                                 much maintenance effort but I think                                 these experiments and like efforts and                                 projects have to continue but I like                                 when I think what do I want to build                                 tomorrow when can I start doing that you                                 know they're they're pretty far off and                                 I think that there's a different way but                                 you know so this is like the hype tribe                                 that we all gathered here for right                                 it is aspirational right it's a long                                 road but I don't think we need to have                                 our own big projects necessarily I think                                 we can eventually but I think that we                                 can start by focusing on how do we make                                 like a rust native UI but using someone                                 else's toolkit right you know like can                                 we make this feel idiomatic in the                                 language can we make it so that we can                                 collaborate on this together and I think                                 that you know we have some ingredients                                 for pursuing this direction that past                                 communities or past technologies haven't                                 had you know we have these things well                                 we also have a really minimal runtime                                 and incredibly cheap ffiv so you know if                                 you look at like the you know libraries                                 not frameworks methodology I think many                                 of the important ingredients for being                                 able to pull that kind of trick off are                                 here in rust right now so my proposal is                                 that you know starting well whenever you                                 know yesterday or something that we                                 tried to build an authentic you know                                 actually rustic UI ecosystem and that we                                 begin iterating on you know that that                                 notion without having to build our own                                 rendering stacks and input stacks and                                 event stacks and we also are in really                                 cool position with futures and a bunch                                 of other language features allow us to                                 kind of natively Express UI concepts                                 that other frameworks have to bring                                 their own special implementation for                                 right and so I think there's there's a                                 lot of a lot of room here I think if                                 that's going to work if we can pull this                                 off we have to have code reuse right                                 like that's like the basic trick is                                 crates that I oh let's just reuse code                                 we have nice API as we iterate on them                                 separately and you know groups of people                                 can build technology without like                                 central coordination right UI is hard                                 because you have so many domain-specific                                 and when I say domain yin really like                                 platform specific paradigms to navigate                                 and also just like historically we've                                 not tried to do it this way we don't                                 have like UI protocols as I mean there                                 have been attempts but they tend to get                                 hidden underneath frameworks anyways so                                 the thing that I'm building                                 it's called moxie and Moxie is at its                                 core platform agnostic lightweight                                 declarative UI runtime in other words                                 buzzwords soup so there's a lot of                                 analogies I could draw like I think                                 react is really interesting thing to                                 think out in contrast to this both Swift                                 UI and jetpack compose have really                                 interesting kind of parallels and I'm                                 friends with one of people working on                                 compose I'm happy to say that you know                                 we're not just copying in those but I                                 was really surprised actually to find                                 out after I've been working on this for                                 months when I talked to him and I so you                                 know once I joined to Google I got to                                 talk him about it after they'd open                                 source                                                                  to find out like oh actually if you want                                 to describe UI in this declarative style                                 there's you know there's a lot of                                 commonality in the problem set and for                                 the language anyways that's all that's                                 neither here nor there on top of Moxie                                 I'm working on this library right now                                 called Moxie Dom I have a couple of                                 other like binding bindings in progress                                 that I'm tinkering with but this is the                                 most mature it's what I can demonstrate                                 so let's look at an example of a counter                                 implemented for the web in Moxie Dom                                 right we have a struct structs fields                                 are like their arguments right so the                                 counter doesn't take any arguments and                                 we have some content so we're going to                                 show and the first interesting thing                                 here is that this is going to this                                 describes our UI right now right the                                 function needs to be able to run at any                                 time and fully fully explain to the                                 underlying system what should be on the                                 screen so first is we need some                                 persistent state to stick around in                                 between                                 these iterations of our render loop                                 right we're gonna initialize that with a                                 default                                                                here is actually like a handle to that                                 state variable and you can update it you                                 can read from it the updates are                                 mediated by the runtime though to make                                 sure that we have the scheduling                                 properties we need and then you know we                                 have some child components that we show                                 so first we create a text node with the                                 counts of the current state variable and                                 that state variable by the way you know                                 in future iterations that'll have that                                 occupied the that'll have the new value                                 and and then we make a HTML element type                                 this you know you if you had JSX this                                 would be much nicer we don't have that                                 yet and then we have an event handler                                 right so when we take an event we call                                 some closure and we call that closure                                 passing in this handle to the state                                 variable the key to the state variable                                 and so that way we can kind of knit                                 everything together and of course we put                                 some text to it and then Google slide                                 transitions make me skip ahead so that's                                 like a little code example the first                                 half of the buzz word soup is worth                                 talking about right so like rust is                                 platform agnostic                                 we aren't adding platform into the core                                 runtime take minimal dependencies and I                                 think the focus on latency is the other                                 thing here and because rust is you know                                 like we're fast right but we can can in                                 our software aggressively optimize for                                 the user experience and have more                                 empathy for people interacting with the                                 software if we have a first-class notion                                 of latency and the last thing is that I                                 really want this to work and no stood                                 and it almost does and then the second                                 half of buzzword soup declarative UI                                 runtime let's just talk about UI right                                 time right so a UI runtime does some you                                 know basic stuff it presents a tree a                                 visual items input is accepted from some                                 actor user whatever the items are                                 updated this is done frame by frame as                                 like a unit of discrete scheduling and                                 done in a loop so you've got kind of an                                 implicit while true loop outside wrap                                 right some some frameworks obviously                                 make you write that yourself                                 so if you have like a traditional UI                                 system that has like model view model                                 new controller architecture you you                                 might find that you have this tree that                                 you create and then you write some code                                 so that when events occur you manually                                 poke at that tree right and the the tree                                 carries over of course you know this                                 crowd I think is probably well versed in                                 the evils of persistent shared mutable                                 state this tends the mutability tends                                 not to be too shared although you can                                 have fun things when it is but still                                 it's cumbersome and it doesn't let you                                 do what we really want which is to                                 describe UI right now this moment I'm                                 what does the user see and I think this                                 is a real interesting framing because                                 it's human focused as opposed technology                                 focused right you actually have to do a                                 very sophisticated dance to show the                                 program like this but one of the nice                                 things about it is that it you know each                                 item on the screen corresponds to                                 something that you're looking at in your                                 code right so one of the first attempts                                 to do the like describes UI right now in                                 completion was the like the in GUI type                                 of library right so these fully describe                                 the scene on every frame they're run                                    times a second they take your input you                                 know you write very nice concise code                                 especially if you're coming from like                                 C++ model-view-controller land render                                 some stuff they can only work if you                                 have a target that takes a GPU vertex                                 buffer basically right like you have to                                 actually draw every triangle yourself                                 and so some really really smart people                                 came along and we're like we want to do                                 that I don't know if this is actually                                 the history but like we're gonna pretend                                 this is like Hegelian dialectic these                                 these people came along and we're like                                 oh I just I yearn to write UI code this                                 way but but it's the web and the web has                                 the Dom and if I throw away the whole                                 Dom tree every time I won't get any                                 debugging and I'll have really Jake user                                 experiences if things you know mister                                 frames etc and so they said I want to                                 describe this UI like this but backed by                                 stateful elements right these persistent                                 things and that's where react comes in                                 so there's until to hear because react                                 is actually very very interesting in                                 many of its own ways and this is a                                 horrible abusive                                 like architecture and terminology but                                 basically you have a state store you                                 accept some event you get state prime                                 because some event you know some                                 transition is caused by that event that                                 gets committed the renderer there the                                 runtime schedules a new render call and                                 that generates a tree of virtual Dom                                 objects if you're familiar with this                                 basically it's like lightweight                                 descriptions it's it's a hash map of                                 hash maps of hashmat hash maps of the                                 strings to write to the Dom basically                                 right that's all allocated by the way if                                 you want to think about the the GC                                 performance on that and and then what it                                 does is extremely cleverly goes and                                 figures out the difference between your                                 your description and what's actually out                                 there right this persistence data is                                 storing for you and so it's kind of it                                 owns the state it owns the backing dom                                 tree and your kind of your code is                                 running in between them and the runtime                                 keeps them updated right so that's kind                                 of like a declarative UI runtime is it's                                 managing these updates it lets you do                                 fun things like you can see here we have                                 you know chrome dev tools like these are                                 divs they're just there from the                                 browser's perspective they're like any                                 other but you know you're writing codes                                 it's like haha it's fake XML in                                 JavaScript and I'm flying a million                                 miles a minute and I mean if you haven't                                 written JSX it actually is like it's                                 surprisingly productive I was going                                 outside and so if this is kind of the                                 the status quo like this is the bleeding                                 edge of here's how you program UI                                 effectively we can we can identify our                                 own goals on top of this right so rust                                 is harder to write in JavaScript or C                                 sharp or other languages right maybe not                                 for me now with you know haven't been it                                 for a while and I think like over time                                 we will continue to iterate on this on                                 the rust tax so to speak but right now                                 we need to find ways to invest that                                 right like if we want to write UI today                                 we can't wait for next year's language                                 changes and I think that we have a few                                 areas of strength for rust and for that                                 one were incredibly latency sensitive                                 all of our resource allocation and                                 destruction happens in bandwidth logic                                 it executes unless we explicitly shove                                 it out of band we                                 you know have extreme control over the                                 amount of interaction we we implant and                                 you know we're pretty portable so this                                 is where kind of this the direction                                 takes us right we want to work directly                                 with these dom nodes right we can have                                 we can roll broad pointers were rust and                                 we want to you know allocate only the                                 data that needs to be you know inserted                                 into them and we want to do this using                                 some kind of uniform storage so there's                                 not like a you know a uncanny valley or                                 no cognitive cliff between you know user                                 controlled state and then the runtime                                 controlled state of the host tree and so                                 ideally you know we can just have this                                 happen in a loop right and these                                 memorized updates are minimal and                                 perfect etc how do we do that well we                                 need to describe trees functions if you                                 squint execute over time as a tree maybe                                 maybe I mean you know you know where I'm                                 going so we're gonna I'll show you what                                 we do we have these functions and we're                                 gonna pretend that when you push the                                 stack frame for that function onto the                                 stack that allocates a node in the tree                                 weird I know and then the other thing                                 we're going to pretend is that indent                                 finds our depth in this tree and indents                                 the print line accordingly                                 pretty simple assumptions I think anyone                                 confused awesome and here we go so we                                 enter route we created a root node stack                                 frame where we create a node for the                                 root stack frame and then we go to the                                 first line and we have a side-effect                                 function this all looks like normal                                 programming right and then a you know                                 it's called by root so it becomes a                                 child of root and we enter its stack                                 frame and then we call side-effect                                 because this is now a child of root it                                 has a depth of                                                       been invented by a couple of spaces and                                 we pop back out to root right this is                                 this is this is control flow                                     do the same for be great stack frame has                                 a node of corresponding has a side                                 effect to a function inside and then we                                 enter loop the first one is a child here                                 same thing                                 second call becomes a child of the same                                 type but you know specialized for that                                 that index in that loop and you know                                 then the same thing right so what we end                                 up with is you know we call a few                                 functions and if we had some magical                                 system for observing the creation of the                                 stack frames and recording that data at                                 runtime we correlate them together to                                 actually construct this tree and that's                                 what the topo crate does so the toe pose                                 like the you know scary low-level                                 dependency for moxie it assigns you know                                 runtime identifiers to kind of logical                                 scopes or stack frames of topologically                                 bound functions that's it let's you do                                 what I just showed you and these IDs are                                 unique so if you're like in a                                 conditional or you're in a for loop you                                 know we're tracking the runtime state so                                 you can kind of just put the calls to                                 these functions wherever and you know                                 the if you want to get a little more                                 technical you know we trace the path                                 through the the the function topology to                                 the current point and do some hashing                                 along the way and that gives us this                                 unique ID and because it's derived from                                 this structural path right on each                                 iteration of this loop that idea is                                 stable right so if I were to query the                                 ID for C sub one on revision                                            be the same as revision                                               because C sub                                                        talk about it from within that function                                 while it's executing and it has this                                 stable identifier right so you can do                                 fun things like have a hash map of toko                                 ID to blah and then that's call site                                 specific storage right and then this                                 tree has to get managed right like we                                 have to do this in a loop repeatedly so                                 there's this moxy runtime struct it                                 takes a root function that it calls on                                 each iteration and it can be woken up by                                 state changes that's basically it                                 it provides a memoization store for the                                 for this like you know incremental                                 updates of the Dom stuff and you know                                 really what happens is everything is in                                 there all the stuff you care about and                                 frankly you in this context is not like                                 an end user the runtime shouldn't really                                 be exposed by bindings like Moxie Dom                                 has a mount call that's totally separate                                 but this is necessary for being able to                                 speak in terms of someone else's event                                 loop right so we can you know like I                                 have a very very hacky initial attempts                                 at like running this in bandwidth                                 windows event so you can have like react                                 but not on a simple thread I mean not                                 literally react so anyways we we create                                 this environment that's scoped to this                                 this topology we run functions within it                                 that have side effects some of those                                 side effects might register event                                 handlers that can update our state that                                 will call when that's updated it will                                 get scheduled again there's an analogy                                 here that's worth thinking about if                                 you're familiar with react this is                                 basically like what if you made react                                 and rust but only use context and hooks                                 as the primitives I think I it's fun I                                 think but also this means that you know                                 you can I haven't done this yet but you                                 can like react hooks imagine an                                 ecosystem of you know kind of drop in                                 functions that will navigate this state                                 updating with your runtime for you                                 without needing to explicitly pass those                                 now one trick here is as I've described                                 it this happens on every frame fully                                 allocates the Dom like in GUI so it's                                 like reactive less efficient and we want                                 to not do that right so we need some                                 strategy for mammal ization we already                                 have you know this like call site                                 sensitive tracking of where and                                 component tree we are that gives us IDs                                 we can have global scope storage that                                 can be read from anywhere but where you                                 can only look at things that are                                 corresponding to our area so you can do                                 things like run a function as long as                                 the inputs haven't changed and that will                                 be kept around for the next iteration of                                 loop so you kind of rendezvous with                                 yourself                                 with your own code the next time and and                                 you can combine these of course Rex it's                                 just best code so you can have a memo                                 call that captures some variable and                                 we'll rerun the provided closure                                 whenever that variable changes you can                                 say as long as this component is mounted                                 I want this content to be identical                                 right like never rerun this and the fun                                 corollary here is that if you implement                                 drop on these types when there's no                                 longer referenced ouija see them from                                 the memoization store so you have like a                                 frame resource collection process that                                 happens after each root and this means                                 you can have essentially avoid like a                                 whole class of I implement a custom                                 we'll unmount method or did unmount or                                 whatever right lots of lots of lifecycle                                 methods on traits can just evaporate the                                 state that I pointed out in that really                                 counter example this is a ste cell that                                 is initialized once at that call site                                 and then it shows back up on subsequent                                 calls so you can take the handle and                                 send it off to you know an event                                 callback and that's some kind of                                 primitives                                 let's pop out of the like brain dump and                                 look at a little bit of code for                                 something that actually might be                                 familiar right show of hands who knows                                 to do MVC okay that's herd immunity I'm                                 going it's a clone it's a it's an app                                 that's very very simple that people                                 clone a lot in order to demonstrate                                 their framework so of course if you're                                 making a new weird UI runtime it would                                 be a straightforward thing to copy and                                 it has CSS available that's like one of                                 the big things so here we have a                                 top-level struct this is our root                                 component that to-do app and like the                                 few app has too many jobs right it has a                                 list of to-do items and it has a filter                                 that applies to those to render them so                                 we allocate this at the top and then we                                 enter a topological call you can have                                 like this is like a topological closure                                 maybe sort of we can show an element and                                 CSS class and run a child component                                 that's a custom struct same with the                                 main section this is code I copy                                 from github and then we exit and                                 crucially we pass to this topological                                 closure a scoped environment so it can                                 look up these types in its environment                                 when it's called right so we pass this                                 key to the two dudes like hey everybody                                 in this subtree is going to care about                                 the state of two dudes in this                                 application so now it's provided to all                                 of them and the same with visibility                                 filter Google slides gonna make me quick                                 like twelve more times but so this is                                 basically this is the top-level entry                                 point of the app it's like we assign we                                 create some state and then we make it                                 available to our code underneath next                                 I'm not going to go into like header                                 remains section all of those that would                                 be hilarious searched in smart at a time                                 so let's look at it to do list example                                 here                                 we get our two dues get our visibility                                 we create an unordered list                                 we filter which to do is we want to show                                 and we loop over them so if you've if                                 you've written collections and other                                 like declarative systems it can be quite                                 baroque I think is pretty cool also a                                 filter list is usually something big to                                 build in any in any system and we can do                                 you know quick demo of how this works                                 it's going to play for us it will I was                                 going I haven't lied to him up on a tab                                 but he has low risk so this is really                                 boring incredibly simple app it does                                 effectively nothing I'm extremely                                 overjoyed to have this be the result of                                 last year of work                                 [Laughter]                                 thank you thank you that was gratifying                                 so there's caveat which is I've been                                 working on this a while but it's very                                 very very very very very very very very                                 very very very immature if you want to                                 be a part of this and you want to use it                                 then send PRS so like right now the                                 domnode memoization is working progress                                 it's like I can keep the whole tree                                 static but I lose that one thing and I                                 don't know why and so there's a little                                 bit of work there and once that's in                                 place it'll be easier to extend that to                                 other backing UI systems right cuz this                                 memoization is very generic doesn't know                                 anything about the phone I'm not                                 measuring performance in any meaningful                                 way I do know on my old system a                                 topological function call like creating                                 this ID the thing you're gonna do                                 thousands of times a frame it's like                                     nanoseconds so it's like a Python                                 function call it's not too bad with                                 language support wink-wink nudge-nudge                                 get really really fast Docs and testing                                 very much work in progress                                 there's no JSX or equivalent if Bodil                                 wants to make type HTML I'm at this I'd                                 be super happy                                 there's no cross-platform elements and                                 I'm not going to attempt them anytime                                 soon because I think that if you have a                                 rest system that can describe native UI                                 components with the same runtime life                                 cycle you can abstract over those to get                                 cross-platform components as opposed to                                 like existing cross-platform systems                                 that tend to you know manage the the                                 things directly and of course there's                                 nothing that's not shown in the talk so                                 you know we've got some we've got some                                 stuff to build what's next lots of stuff                                 I'm gonna build if anything an                                 incredibly infinitesimally action of it                                 which is where this comes in                                 [Music]                                 we need one of these to build UI in rust                                 like you want to build apps we want to                                 get together and not be fragmented into                                 a million different building projects                                 this is what happened so the repo I have                                 a website that I'm working on publishing                                 will be up soon QR code takes you to the                                 discord if you want to come chat with me                                 I get pinged on every message right now                                 yeah I was I'd really love to be                                 everyone also remember while you're                                 watching this crab rail this is my                                 representation of the unique historical                                 point we occupy right this is this is us                                 this can be us we have the types we have                                 the crates we have cargo we have                                 whatever this is                                 [Music]                                 let's do it thanks for coming                                 [Applause]                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=1JhEeTW08HU


Title: RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry
Publication date: 2019-09-19
Playlist: RustConf 2019
Description: 
	RustConf 2019 - Towards an Open Ecosystem of Empowered UI Development by Adam Perry

Rustaceans want to write GUI apps in their "native language" and to do it with declarative syntax, type safety, great tooling, and minimal runtime overhead. Moxie is a platform-agnostic component library to provide just that, currently targeting the DOM, win32, and WebRender, with more targets to come. We're on a path to building Rust apps that instantly reflect user intent, correctly handle inputs, and save battery and CPU cycles. We discuss what makes UI hard, how others handled that in the past, and what we can do today in Rust to clear those hurdles and unlock new powers.s
Captions: 
	                              [Music]                               all right my I'm miked I can hear myself                               am I on the screen I am on the screen we                               are all here it is Russ conf                               thank you by the way for being here                               sharing your lovely presence with me                               here and thank you to the staff and                               organizers as well it's I mean having                               been on the other side of some events                                it's monumental and I am not jealous of                                the job they do and I'm extremely                                grateful for it                                if you see me organizer around to thank                                them so Who am I I have an origin story                                much longer than any of our births of                                course you all do too if you aren't                                thinking about that a lot these days you                                might want to like it's a fun story - a                                fun line to draw into the past but I've                                been using Russ for about four years now                                I learned it right around the time I got                                my first full-time programming job as                                like a professional software person so                                my enthusiasm for rust has had me                                involved in this community for that                                whole time and it's been a pretty                                central element of my like personal and                                professional growth lots of friends I                                see in the audience here you've all been                                a part of that and people that I would                                like to meet afterwards hopefully you                                can be a part of that in the future and                                so aside from the rusted story before my                                current my current work I was at the                                startup building like react native                                developer tools and I got pretty nerd                                sniped by you know the challenges of GUI                                application frameworks and being able to                                iterate on them over time trying to ship                                products on multiple you know multiple                                platforms don't even begin to think                                about like desktop and mobile and so you                                know I kind of been thinking about it a                                lot and I'm working on this project for                                a while and then of course the the                                requisite disclaimer I do work at a tech                                company who has a very effective and                                professional PR and marketing department                                I am NOT here as a representative and                                further disclaimer I'm actually not                                working on this with my day job at all I                                do you know I'm very privileged to write                                rust for a pay but this isn't what I'm                                doing and then another point to keep in                                mind I'm like almost definitely wrong                                about really important things I started                                this project in part because I wanted to                                build apps and I was too picky so I'm                                not really a person who builds apps I                                see a lot of interesting technical                                problems here but I want to learn more                                from people who do I want people                                to have things to use and I you know I                                think that that feedback process and                                even you know experimentation outside of                                my work is absolutely necessary for us                                as a community to do this thing which                                kind of brings us to this thing I want                                to write apps and rust as I mentioned I                                want to give back technology that I                                build doing that to this community                                that's been you know real support for me                                and I have some specific technical                                desires of like how that should work                                those should be structured what should                                feel like the requisite levels of                                dopamine                                I think the dopamine is an element of                                application development that is is                                really important to optimize for and you                                know rust is not constrained to a single                                environment so if we are sitting here                                asking ourselves what do you want from                                us GUI I think almost every person I've                                spoken to has had implicitly in their                                mind it's gonna be awesome and it's                                gonna be cross-platform and I'm just                                gonna like I'm gonna go rust all day and                                then I'm gonna like click deploy on                                github and it's gonna be on like eight                                targets oh right I mean that's what I                                want right but I want to reuse my                                knowledge I want to reuse my tools when                                I'm in different environments this is a                                brief aside just I found that a o-l                                image this is like our world is                                beautiful isn't it let's just let this                                soak for a second this says discover                                ideas about blockchain technology email                                 marketing today's email inbox looks                                 significantly different from the AOL                                 inbox of your make sure your email                                 marketing has grown with the times                                 tagged with blockchain technology                                 business innovation and Thought Catalog                                 so that's totally relevant my point                                 about the cross-platform thing though is                                 it's like these engineering efforts to                                 build something that you can actually                                 use to do that I click a button and I                                 hit eight targets with my deploy they're                                 massive engineering artifacts                                 coordinated over huge groups of people                                 like the program expertise experienced                                 in this room if it was all UI developers                                 I like we could spend a year or two it                                 might crank since I'm really good at                                 right like it you have on dolls law                                 scaling with the organization like                                 people are more effort to coordinate and                                 there's just there's a lot of                                 nology that you have to cover to talk                                 about applications that are visually                                 interactive right so this is an                                 architecture diagram if I can't see any                                 of the details that's fine                                 this is Coco Mac OS is application                                 framework they've got                                                                                                                       their own windowing and drawing tools                                 they've got data persistence they've got                                 text layout rendering lifts                                 transformations they've got image                                 processing rendering etc got                                 notifications you know network access                                 via asynchronous i/o etc here's some bit                                 from a newer Android jetpack framework                                 listing they've got data binding                                 lifecycle navigation pagination etc etc                                 etc etc and a lot of these things                                 actually nothing to do with what's on                                 screen right there's another interesting                                 example and obviously in this orbit so                                 it's like it's on my mind but flutter is                                 a really cool set of technologies built                                 for you know basically the like I want                                 to write a GUI that hits eight targets                                 at once kind of tasks and one of the                                 ways they do that of course is by like                                 hiding many details from the platform                                 from you and I don't think that's very                                 rustic but it's a really cool project                                 and it's this is a good nice thing to                                 look at just say like ah yeah you really                                 do need all of those things if you think                                 about each of those lines that's like                                 three crates per box at least so you                                 know you might want to temper                                 expectations if you think that we're                                 gonna have like these in rust covering                                 everything for it in the future there is                                 one caveat to this of course which is                                 like human civilization has this really                                 big project for making UI and it has                                 really cool properties like it exposes                                 stable public API that's lower level                                 than most applications want to speak                                 it's been a place for experimenting with                                 you know different paradigms but it has                                 you know limitations and I think those                                 limitations are fine right it's the web                                 is good but it's not going to provide                                 like a rich you know local data oriented                                 consumer thing for managing your life                                 for someone on a future phone you know                                 on a cheap device and the world is made                                 up of a lot of these people in the web                                 has a difficult time addressing their                                 needs right now and I think the other                                 unfortunate thing about that is because                                 you can actually make like really cool                                 Russ web stuff and I've been prototyping                                 initially on the web is that I'm                                 actually I'm pretty sure that having our                                 own flutter                                 equivalent is pretty far off to the                                 point where I'm satisfied with the                                 personality at least I think I should I                                 should you know call out some really                                 cool efforts that have been happening I                                 think druid and orb DK & Azul are really                                 interesting and exciting I was a little                                 sad to see it as well wasn't getting as                                 much maintenance effort but I think                                 these experiments and like efforts and                                 projects have to continue but I like                                 when I think what do I want to build                                 tomorrow when can I start doing that you                                 know they're they're pretty far off and                                 I think that there's a different way but                                 you know so this is like the hype tribe                                 that we all gathered here for right                                 it is aspirational right it's a long                                 road but I don't think we need to have                                 our own big projects necessarily I think                                 we can eventually but I think that we                                 can start by focusing on how do we make                                 like a rust native UI but using someone                                 else's toolkit right you know like can                                 we make this feel idiomatic in the                                 language can we make it so that we can                                 collaborate on this together and I think                                 that you know we have some ingredients                                 for pursuing this direction that past                                 communities or past technologies haven't                                 had you know we have these things well                                 we also have a really minimal runtime                                 and incredibly cheap ffiv so you know if                                 you look at like the you know libraries                                 not frameworks methodology I think many                                 of the important ingredients for being                                 able to pull that kind of trick off are                                 here in rust right now so my proposal is                                 that you know starting well whenever you                                 know yesterday or something that we                                 tried to build an authentic you know                                 actually rustic UI ecosystem and that we                                 begin iterating on you know that that                                 notion without having to build our own                                 rendering stacks and input stacks and                                 event stacks and we also are in really                                 cool position with futures and a bunch                                 of other language features allow us to                                 kind of natively Express UI concepts                                 that other frameworks have to bring                                 their own special implementation for                                 right and so I think there's there's a                                 lot of a lot of room here I think if                                 that's going to work if we can pull this                                 off we have to have code reuse right                                 like that's like the basic trick is                                 crates that I oh let's just reuse code                                 we have nice API as we iterate on them                                 separately and you know groups of people                                 can build technology without like                                 central coordination right UI is hard                                 because you have so many domain-specific                                 and when I say domain yin really like                                 platform specific paradigms to navigate                                 and also just like historically we've                                 not tried to do it this way we don't                                 have like UI protocols as I mean there                                 have been attempts but they tend to get                                 hidden underneath frameworks anyways so                                 the thing that I'm building                                 it's called moxie and Moxie is at its                                 core platform agnostic lightweight                                 declarative UI runtime in other words                                 buzzwords soup so there's a lot of                                 analogies I could draw like I think                                 react is really interesting thing to                                 think out in contrast to this both Swift                                 UI and jetpack compose have really                                 interesting kind of parallels and I'm                                 friends with one of people working on                                 compose I'm happy to say that you know                                 we're not just copying in those but I                                 was really surprised actually to find                                 out after I've been working on this for                                 months when I talked to him and I so you                                 know once I joined to Google I got to                                 talk him about it after they'd open                                 source                                                                  to find out like oh actually if you want                                 to describe UI in this declarative style                                 there's you know there's a lot of                                 commonality in the problem set and for                                 the language anyways that's all that's                                 neither here nor there on top of Moxie                                 I'm working on this library right now                                 called Moxie Dom I have a couple of                                 other like binding bindings in progress                                 that I'm tinkering with but this is the                                 most mature it's what I can demonstrate                                 so let's look at an example of a counter                                 implemented for the web in Moxie Dom                                 right we have a struct structs fields                                 are like their arguments right so the                                 counter doesn't take any arguments and                                 we have some content so we're going to                                 show and the first interesting thing                                 here is that this is going to this                                 describes our UI right now right the                                 function needs to be able to run at any                                 time and fully fully explain to the                                 underlying system what should be on the                                 screen so first is we need some                                 persistent state to stick around in                                 between                                 these iterations of our render loop                                 right we're gonna initialize that with a                                 default                                                                here is actually like a handle to that                                 state variable and you can update it you                                 can read from it the updates are                                 mediated by the runtime though to make                                 sure that we have the scheduling                                 properties we need and then you know we                                 have some child components that we show                                 so first we create a text node with the                                 counts of the current state variable and                                 that state variable by the way you know                                 in future iterations that'll have that                                 occupied the that'll have the new value                                 and and then we make a HTML element type                                 this you know you if you had JSX this                                 would be much nicer we don't have that                                 yet and then we have an event handler                                 right so when we take an event we call                                 some closure and we call that closure                                 passing in this handle to the state                                 variable the key to the state variable                                 and so that way we can kind of knit                                 everything together and of course we put                                 some text to it and then Google slide                                 transitions make me skip ahead so that's                                 like a little code example the first                                 half of the buzz word soup is worth                                 talking about right so like rust is                                 platform agnostic                                 we aren't adding platform into the core                                 runtime take minimal dependencies and I                                 think the focus on latency is the other                                 thing here and because rust is you know                                 like we're fast right but we can can in                                 our software aggressively optimize for                                 the user experience and have more                                 empathy for people interacting with the                                 software if we have a first-class notion                                 of latency and the last thing is that I                                 really want this to work and no stood                                 and it almost does and then the second                                 half of buzzword soup declarative UI                                 runtime let's just talk about UI right                                 time right so a UI runtime does some you                                 know basic stuff it presents a tree a                                 visual items input is accepted from some                                 actor user whatever the items are                                 updated this is done frame by frame as                                 like a unit of discrete scheduling and                                 done in a loop so you've got kind of an                                 implicit while true loop outside wrap                                 right some some frameworks obviously                                 make you write that yourself                                 so if you have like a traditional UI                                 system that has like model view model                                 new controller architecture you you                                 might find that you have this tree that                                 you create and then you write some code                                 so that when events occur you manually                                 poke at that tree right and the the tree                                 carries over of course you know this                                 crowd I think is probably well versed in                                 the evils of persistent shared mutable                                 state this tends the mutability tends                                 not to be too shared although you can                                 have fun things when it is but still                                 it's cumbersome and it doesn't let you                                 do what we really want which is to                                 describe UI right now this moment I'm                                 what does the user see and I think this                                 is a real interesting framing because                                 it's human focused as opposed technology                                 focused right you actually have to do a                                 very sophisticated dance to show the                                 program like this but one of the nice                                 things about it is that it you know each                                 item on the screen corresponds to                                 something that you're looking at in your                                 code right so one of the first attempts                                 to do the like describes UI right now in                                 completion was the like the in GUI type                                 of library right so these fully describe                                 the scene on every frame they're run                                    times a second they take your input you                                 know you write very nice concise code                                 especially if you're coming from like                                 C++ model-view-controller land render                                 some stuff they can only work if you                                 have a target that takes a GPU vertex                                 buffer basically right like you have to                                 actually draw every triangle yourself                                 and so some really really smart people                                 came along and we're like we want to do                                 that I don't know if this is actually                                 the history but like we're gonna pretend                                 this is like Hegelian dialectic these                                 these people came along and we're like                                 oh I just I yearn to write UI code this                                 way but but it's the web and the web has                                 the Dom and if I throw away the whole                                 Dom tree every time I won't get any                                 debugging and I'll have really Jake user                                 experiences if things you know mister                                 frames etc and so they said I want to                                 describe this UI like this but backed by                                 stateful elements right these persistent                                 things and that's where react comes in                                 so there's until to hear because react                                 is actually very very interesting in                                 many of its own ways and this is a                                 horrible abusive                                 like architecture and terminology but                                 basically you have a state store you                                 accept some event you get state prime                                 because some event you know some                                 transition is caused by that event that                                 gets committed the renderer there the                                 runtime schedules a new render call and                                 that generates a tree of virtual Dom                                 objects if you're familiar with this                                 basically it's like lightweight                                 descriptions it's it's a hash map of                                 hash maps of hashmat hash maps of the                                 strings to write to the Dom basically                                 right that's all allocated by the way if                                 you want to think about the the GC                                 performance on that and and then what it                                 does is extremely cleverly goes and                                 figures out the difference between your                                 your description and what's actually out                                 there right this persistence data is                                 storing for you and so it's kind of it                                 owns the state it owns the backing dom                                 tree and your kind of your code is                                 running in between them and the runtime                                 keeps them updated right so that's kind                                 of like a declarative UI runtime is it's                                 managing these updates it lets you do                                 fun things like you can see here we have                                 you know chrome dev tools like these are                                 divs they're just there from the                                 browser's perspective they're like any                                 other but you know you're writing codes                                 it's like haha it's fake XML in                                 JavaScript and I'm flying a million                                 miles a minute and I mean if you haven't                                 written JSX it actually is like it's                                 surprisingly productive I was going                                 outside and so if this is kind of the                                 the status quo like this is the bleeding                                 edge of here's how you program UI                                 effectively we can we can identify our                                 own goals on top of this right so rust                                 is harder to write in JavaScript or C                                 sharp or other languages right maybe not                                 for me now with you know haven't been it                                 for a while and I think like over time                                 we will continue to iterate on this on                                 the rust tax so to speak but right now                                 we need to find ways to invest that                                 right like if we want to write UI today                                 we can't wait for next year's language                                 changes and I think that we have a few                                 areas of strength for rust and for that                                 one were incredibly latency sensitive                                 all of our resource allocation and                                 destruction happens in bandwidth logic                                 it executes unless we explicitly shove                                 it out of band we                                 you know have extreme control over the                                 amount of interaction we we implant and                                 you know we're pretty portable so this                                 is where kind of this the direction                                 takes us right we want to work directly                                 with these dom nodes right we can have                                 we can roll broad pointers were rust and                                 we want to you know allocate only the                                 data that needs to be you know inserted                                 into them and we want to do this using                                 some kind of uniform storage so there's                                 not like a you know a uncanny valley or                                 no cognitive cliff between you know user                                 controlled state and then the runtime                                 controlled state of the host tree and so                                 ideally you know we can just have this                                 happen in a loop right and these                                 memorized updates are minimal and                                 perfect etc how do we do that well we                                 need to describe trees functions if you                                 squint execute over time as a tree maybe                                 maybe I mean you know you know where I'm                                 going so we're gonna I'll show you what                                 we do we have these functions and we're                                 gonna pretend that when you push the                                 stack frame for that function onto the                                 stack that allocates a node in the tree                                 weird I know and then the other thing                                 we're going to pretend is that indent                                 finds our depth in this tree and indents                                 the print line accordingly                                 pretty simple assumptions I think anyone                                 confused awesome and here we go so we                                 enter route we created a root node stack                                 frame where we create a node for the                                 root stack frame and then we go to the                                 first line and we have a side-effect                                 function this all looks like normal                                 programming right and then a you know                                 it's called by root so it becomes a                                 child of root and we enter its stack                                 frame and then we call side-effect                                 because this is now a child of root it                                 has a depth of                                                       been invented by a couple of spaces and                                 we pop back out to root right this is                                 this is this is control flow                                     do the same for be great stack frame has                                 a node of corresponding has a side                                 effect to a function inside and then we                                 enter loop the first one is a child here                                 same thing                                 second call becomes a child of the same                                 type but you know specialized for that                                 that index in that loop and you know                                 then the same thing right so what we end                                 up with is you know we call a few                                 functions and if we had some magical                                 system for observing the creation of the                                 stack frames and recording that data at                                 runtime we correlate them together to                                 actually construct this tree and that's                                 what the topo crate does so the toe pose                                 like the you know scary low-level                                 dependency for moxie it assigns you know                                 runtime identifiers to kind of logical                                 scopes or stack frames of topologically                                 bound functions that's it let's you do                                 what I just showed you and these IDs are                                 unique so if you're like in a                                 conditional or you're in a for loop you                                 know we're tracking the runtime state so                                 you can kind of just put the calls to                                 these functions wherever and you know                                 the if you want to get a little more                                 technical you know we trace the path                                 through the the the function topology to                                 the current point and do some hashing                                 along the way and that gives us this                                 unique ID and because it's derived from                                 this structural path right on each                                 iteration of this loop that idea is                                 stable right so if I were to query the                                 ID for C sub one on revision                                            be the same as revision                                               because C sub                                                        talk about it from within that function                                 while it's executing and it has this                                 stable identifier right so you can do                                 fun things like have a hash map of toko                                 ID to blah and then that's call site                                 specific storage right and then this                                 tree has to get managed right like we                                 have to do this in a loop repeatedly so                                 there's this moxy runtime struct it                                 takes a root function that it calls on                                 each iteration and it can be woken up by                                 state changes that's basically it                                 it provides a memoization store for the                                 for this like you know incremental                                 updates of the Dom stuff and you know                                 really what happens is everything is in                                 there all the stuff you care about and                                 frankly you in this context is not like                                 an end user the runtime shouldn't really                                 be exposed by bindings like Moxie Dom                                 has a mount call that's totally separate                                 but this is necessary for being able to                                 speak in terms of someone else's event                                 loop right so we can you know like I                                 have a very very hacky initial attempts                                 at like running this in bandwidth                                 windows event so you can have like react                                 but not on a simple thread I mean not                                 literally react so anyways we we create                                 this environment that's scoped to this                                 this topology we run functions within it                                 that have side effects some of those                                 side effects might register event                                 handlers that can update our state that                                 will call when that's updated it will                                 get scheduled again there's an analogy                                 here that's worth thinking about if                                 you're familiar with react this is                                 basically like what if you made react                                 and rust but only use context and hooks                                 as the primitives I think I it's fun I                                 think but also this means that you know                                 you can I haven't done this yet but you                                 can like react hooks imagine an                                 ecosystem of you know kind of drop in                                 functions that will navigate this state                                 updating with your runtime for you                                 without needing to explicitly pass those                                 now one trick here is as I've described                                 it this happens on every frame fully                                 allocates the Dom like in GUI so it's                                 like reactive less efficient and we want                                 to not do that right so we need some                                 strategy for mammal ization we already                                 have you know this like call site                                 sensitive tracking of where and                                 component tree we are that gives us IDs                                 we can have global scope storage that                                 can be read from anywhere but where you                                 can only look at things that are                                 corresponding to our area so you can do                                 things like run a function as long as                                 the inputs haven't changed and that will                                 be kept around for the next iteration of                                 loop so you kind of rendezvous with                                 yourself                                 with your own code the next time and and                                 you can combine these of course Rex it's                                 just best code so you can have a memo                                 call that captures some variable and                                 we'll rerun the provided closure                                 whenever that variable changes you can                                 say as long as this component is mounted                                 I want this content to be identical                                 right like never rerun this and the fun                                 corollary here is that if you implement                                 drop on these types when there's no                                 longer referenced ouija see them from                                 the memoization store so you have like a                                 frame resource collection process that                                 happens after each root and this means                                 you can have essentially avoid like a                                 whole class of I implement a custom                                 we'll unmount method or did unmount or                                 whatever right lots of lots of lifecycle                                 methods on traits can just evaporate the                                 state that I pointed out in that really                                 counter example this is a ste cell that                                 is initialized once at that call site                                 and then it shows back up on subsequent                                 calls so you can take the handle and                                 send it off to you know an event                                 callback and that's some kind of                                 primitives                                 let's pop out of the like brain dump and                                 look at a little bit of code for                                 something that actually might be                                 familiar right show of hands who knows                                 to do MVC okay that's herd immunity I'm                                 going it's a clone it's a it's an app                                 that's very very simple that people                                 clone a lot in order to demonstrate                                 their framework so of course if you're                                 making a new weird UI runtime it would                                 be a straightforward thing to copy and                                 it has CSS available that's like one of                                 the big things so here we have a                                 top-level struct this is our root                                 component that to-do app and like the                                 few app has too many jobs right it has a                                 list of to-do items and it has a filter                                 that applies to those to render them so                                 we allocate this at the top and then we                                 enter a topological call you can have                                 like this is like a topological closure                                 maybe sort of we can show an element and                                 CSS class and run a child component                                 that's a custom struct same with the                                 main section this is code I copy                                 from github and then we exit and                                 crucially we pass to this topological                                 closure a scoped environment so it can                                 look up these types in its environment                                 when it's called right so we pass this                                 key to the two dudes like hey everybody                                 in this subtree is going to care about                                 the state of two dudes in this                                 application so now it's provided to all                                 of them and the same with visibility                                 filter Google slides gonna make me quick                                 like twelve more times but so this is                                 basically this is the top-level entry                                 point of the app it's like we assign we                                 create some state and then we make it                                 available to our code underneath next                                 I'm not going to go into like header                                 remains section all of those that would                                 be hilarious searched in smart at a time                                 so let's look at it to do list example                                 here                                 we get our two dues get our visibility                                 we create an unordered list                                 we filter which to do is we want to show                                 and we loop over them so if you've if                                 you've written collections and other                                 like declarative systems it can be quite                                 baroque I think is pretty cool also a                                 filter list is usually something big to                                 build in any in any system and we can do                                 you know quick demo of how this works                                 it's going to play for us it will I was                                 going I haven't lied to him up on a tab                                 but he has low risk so this is really                                 boring incredibly simple app it does                                 effectively nothing I'm extremely                                 overjoyed to have this be the result of                                 last year of work                                 [Laughter]                                 thank you thank you that was gratifying                                 so there's caveat which is I've been                                 working on this a while but it's very                                 very very very very very very very very                                 very very very immature if you want to                                 be a part of this and you want to use it                                 then send PRS so like right now the                                 domnode memoization is working progress                                 it's like I can keep the whole tree                                 static but I lose that one thing and I                                 don't know why and so there's a little                                 bit of work there and once that's in                                 place it'll be easier to extend that to                                 other backing UI systems right cuz this                                 memoization is very generic doesn't know                                 anything about the phone I'm not                                 measuring performance in any meaningful                                 way I do know on my old system a                                 topological function call like creating                                 this ID the thing you're gonna do                                 thousands of times a frame it's like                                     nanoseconds so it's like a Python                                 function call it's not too bad with                                 language support wink-wink nudge-nudge                                 get really really fast Docs and testing                                 very much work in progress                                 there's no JSX or equivalent if Bodil                                 wants to make type HTML I'm at this I'd                                 be super happy                                 there's no cross-platform elements and                                 I'm not going to attempt them anytime                                 soon because I think that if you have a                                 rest system that can describe native UI                                 components with the same runtime life                                 cycle you can abstract over those to get                                 cross-platform components as opposed to                                 like existing cross-platform systems                                 that tend to you know manage the the                                 things directly and of course there's                                 nothing that's not shown in the talk so                                 you know we've got some we've got some                                 stuff to build what's next lots of stuff                                 I'm gonna build if anything an                                 incredibly infinitesimally action of it                                 which is where this comes in                                 [Music]                                 we need one of these to build UI in rust                                 like you want to build apps we want to                                 get together and not be fragmented into                                 a million different building projects                                 this is what happened so the repo I have                                 a website that I'm working on publishing                                 will be up soon QR code takes you to the                                 discord if you want to come chat with me                                 I get pinged on every message right now                                 yeah I was I'd really love to be                                 everyone also remember while you're                                 watching this crab rail this is my                                 representation of the unique historical                                 point we occupy right this is this is us                                 this can be us we have the types we have                                 the crates we have cargo we have                                 whatever this is                                 [Music]                                 let's do it thanks for coming                                 [Applause]                                 [Music]
YouTube URL: https://www.youtube.com/watch?v=1JhEeTW08HU


