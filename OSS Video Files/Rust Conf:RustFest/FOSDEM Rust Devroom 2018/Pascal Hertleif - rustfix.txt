Title: Pascal Hertleif - rustfix
Publication date: 2018-02-06
Playlist: FOSDEM Rust Devroom 2018
Description: 
	â€¦and the journey to getting better code automatically

Rust programmers often seem happy to get compiler errors. Understandably so, the compiler is known to not just catch what would in other languages become a run time bug, but also to be quite helpful. On top of that, the clippy project adds more than 200 additional lints, to catch even more errors, but also help guide users towards writing more idiomatic code. This talk is about the dream of automatically fixing many of these errors (based on compiler-provided suggestions) with rustfix.

Pascal Hertleif has been writing code professionally for the last seven years and is active in the Rust community since 2014. He is the author of multiple open source libraries and co-organizer of Rust Cologne. Currently, he is studying computer science at the university of Bonn, Germany, as well as working as freelance software developer.

Rust devroom @ FOSDEM 2018
https://fosdem.org/2018/schedule/event/rust_rustfix_automatic_fixes/

These talks have been recorded at FOSDEM (https://fosdem.org/)
This work is licensed under the Creative Commons Attribution 2.0 Belgium Licence.
To view a copy of this licence, visit http://creativecommons.org/licenses/by/2.0/be/deed.en
Captions: 
	00:00:05,250 --> 00:00:10,290
what you're coming can you humans back

00:00:07,280 --> 00:00:13,110
all right let's get started with some

00:00:10,290 --> 00:00:16,260
quick questions who have you knows about

00:00:13,110 --> 00:00:19,110
the Clippy project who knew about the

00:00:16,260 --> 00:00:20,340
Clippy project yesterday all right all

00:00:19,110 --> 00:00:25,320
right it's still a very good numbers

00:00:20,340 --> 00:00:25,859
thank you so much okay so first things

00:00:25,320 --> 00:00:32,809
first

00:00:25,859 --> 00:00:35,730
hi I'm Pascal I do rust since 2014 and

00:00:32,809 --> 00:00:38,520
if you ever happen to be in Cologne

00:00:35,730 --> 00:00:41,430
please try to be there on a on the first

00:00:38,520 --> 00:00:43,649
once day of a month because we do great

00:00:41,430 --> 00:00:46,050
Rashmi labs you can also follow me on

00:00:43,649 --> 00:00:47,820
Twitter and I write some stuff in my

00:00:46,050 --> 00:00:52,260
blog about Russ as well so you might

00:00:47,820 --> 00:00:54,230
want to check that out soon but let's

00:00:52,260 --> 00:00:56,399
start with something as absolutely

00:00:54,230 --> 00:00:59,850
everyone can agree with that Russ

00:00:56,399 --> 00:01:02,100
programmers like compiler errors yeah

00:00:59,850 --> 00:01:04,229
I'm pretty sure that every one of you

00:01:02,100 --> 00:01:07,080
has seen a compiler error once in his or

00:01:04,229 --> 00:01:09,689
her lifetime and you set yourself wow

00:01:07,080 --> 00:01:13,740
this is this is really great I won't

00:01:09,689 --> 00:01:15,930
have more of those this page three words

00:01:13,740 --> 00:01:19,860
looks it looks like it might be a bit

00:01:15,930 --> 00:01:23,909
small but it's a very nice error format

00:01:19,860 --> 00:01:27,049
and this is something that delivers the

00:01:23,909 --> 00:01:30,030
promise of rust safety because the

00:01:27,049 --> 00:01:32,759
compiler is there to to help you check

00:01:30,030 --> 00:01:35,369
your stuff so you can be confident that

00:01:32,759 --> 00:01:39,240
your code actually works also the errors

00:01:35,369 --> 00:01:42,509
are pretty and it's not just errors or

00:01:39,240 --> 00:01:45,869
warnings to like we have a warning that

00:01:42,509 --> 00:01:48,360
you have not used the result of a

00:01:45,869 --> 00:01:50,280
function like if you have a result type

00:01:48,360 --> 00:01:53,340
and you did not check it was an error it

00:01:50,280 --> 00:01:55,020
was an error if it's of any use the

00:01:53,340 --> 00:01:56,700
compiler will tell you this is not

00:01:55,020 --> 00:01:58,799
something that breaks your code it's

00:01:56,700 --> 00:02:02,399
just something that finds in the

00:01:58,799 --> 00:02:06,210
direction of maybe a mistake you made so

00:02:02,399 --> 00:02:08,540
your code gets even better and a my

00:02:06,210 --> 00:02:11,280
absolutely favorite length of all is

00:02:08,540 --> 00:02:13,349
missing documentation if you're

00:02:11,280 --> 00:02:15,629
publishing your library and you activate

00:02:13,349 --> 00:02:18,600
this lint it tells you which public

00:02:15,629 --> 00:02:20,760
items have no documentation

00:02:18,600 --> 00:02:22,380
this not just so you can write

00:02:20,760 --> 00:02:24,840
documentation but it's also very very

00:02:22,380 --> 00:02:27,840
helpful to figure out which items are

00:02:24,840 --> 00:02:30,660
actually public and which items you did

00:02:27,840 --> 00:02:33,300
not want to be public and wanted to

00:02:30,660 --> 00:02:36,210
change later on and maybe he publish a

00:02:33,300 --> 00:02:40,830
breaking change so it's very very useful

00:02:36,210 --> 00:02:44,010
for that and about two-thirds of you

00:02:40,830 --> 00:02:44,720
said you knew about clipping just for

00:02:44,010 --> 00:02:46,710
the other ones

00:02:44,720 --> 00:02:48,720
Clippy is awesome you should totally

00:02:46,710 --> 00:02:50,850
look it up it's a collection of even

00:02:48,720 --> 00:02:53,120
more links so if you like the built in

00:02:50,850 --> 00:02:56,160
errors you can get even more errors like

00:02:53,120 --> 00:02:59,250
yesterday there were 208 additional lens

00:02:56,160 --> 00:03:01,470
I am pretty sure if you check in next

00:02:59,250 --> 00:03:04,260
week's there will be two hundred and ten

00:03:01,470 --> 00:03:07,410
or twelve or something like that and it

00:03:04,260 --> 00:03:10,710
goes more into the case of catching even

00:03:07,410 --> 00:03:12,900
more mace mistakes that you may have

00:03:10,710 --> 00:03:16,410
missed for example if you wrote the new

00:03:12,900 --> 00:03:18,930
Fidel's and both code blocks is the same

00:03:16,410 --> 00:03:21,930
it's probably mistake on your part and

00:03:18,930 --> 00:03:24,990
you just copy pasted it from the results

00:03:21,930 --> 00:03:25,320
and forgot to check it later on on fix

00:03:24,990 --> 00:03:27,090
it

00:03:25,320 --> 00:03:30,300
Clippy has a link for that as well it's

00:03:27,090 --> 00:03:31,610
it's very very impish aspra jecht and

00:03:30,300 --> 00:03:35,780
it's very very awesome

00:03:31,610 --> 00:03:38,970
okay a completely other aspect of

00:03:35,780 --> 00:03:40,710
Flint's and warnings is that you don't

00:03:38,970 --> 00:03:43,650
just want to catch warnings but you also

00:03:40,710 --> 00:03:47,940
want to learn about new things for

00:03:43,650 --> 00:03:50,370
example I hope you can read it otherwise

00:03:47,940 --> 00:03:52,230
I'll just read it out loud to you so you

00:03:50,370 --> 00:03:54,480
have an iterator and you call the filter

00:03:52,230 --> 00:03:57,780
method on it and you give it a closure

00:03:54,480 --> 00:04:01,050
where you compare the items that you are

00:03:57,780 --> 00:04:04,530
iterating over with zero and then the

00:04:01,050 --> 00:04:06,150
result of that you call next on so

00:04:04,530 --> 00:04:11,430
basically you have an iterator

00:04:06,150 --> 00:04:15,780
to get the next item that contains the

00:04:11,430 --> 00:04:18,660
number zero hmm it's an interesting way

00:04:15,780 --> 00:04:21,900
to write set what what did you actually

00:04:18,660 --> 00:04:23,610
mean when you wrote that it's it could

00:04:21,900 --> 00:04:27,780
be anything it could be just a check for

00:04:23,610 --> 00:04:31,689
it is there any item that is zero why

00:04:27,780 --> 00:04:34,239
not find the item

00:04:31,689 --> 00:04:36,129
and then you actually have explicitly

00:04:34,239 --> 00:04:41,769
stated in your code that you wanted to

00:04:36,129 --> 00:04:45,399
find an item that is 0 or it's a trivial

00:04:41,769 --> 00:04:50,049
example let's go for something more it's

00:04:45,399 --> 00:04:54,879
new statement that if the map M does not

00:04:50,049 --> 00:05:01,059
contain the key K you insert K with the

00:04:54,879 --> 00:05:03,639
value D into M okay it's all good it's

00:05:01,059 --> 00:05:06,849
like how you insert stuff into a hash

00:05:03,639 --> 00:05:08,529
map in basically every language but Russ

00:05:06,849 --> 00:05:11,589
can help you with that

00:05:08,529 --> 00:05:14,679
in a way that may be surprising but will

00:05:11,589 --> 00:05:18,399
lead to very good code have you heard

00:05:14,679 --> 00:05:20,649
the good news about the entry API if you

00:05:18,399 --> 00:05:22,839
use dot entry instead of contains key

00:05:20,649 --> 00:05:26,199
and then insert you will do the hashing

00:05:22,839 --> 00:05:29,379
only once you ask the map is the arm

00:05:26,199 --> 00:05:32,529
entry was that map's to K and if it's

00:05:29,379 --> 00:05:37,659
not there you can insert it this is very

00:05:32,529 --> 00:05:40,269
concise and very much not if-then do

00:05:37,659 --> 00:05:43,479
stuff so you might not have even noticed

00:05:40,269 --> 00:05:46,599
that there is such an API and there's a

00:05:43,479 --> 00:05:50,409
link to tell you about it and afterwards

00:05:46,599 --> 00:05:52,779
you'll be a bit more experienced in the

00:05:50,409 --> 00:05:58,479
crazy API is that raphson that library

00:05:52,779 --> 00:06:01,119
has to offer so this lens help you when

00:05:58,479 --> 00:06:05,649
you're basically almost using an API

00:06:01,119 --> 00:06:07,389
that you didn't know about and if you

00:06:05,649 --> 00:06:10,300
happen to be bored some lazy afternoon

00:06:07,389 --> 00:06:12,309
you can also just check the clip your

00:06:10,300 --> 00:06:15,219
documentation because it has examples

00:06:12,309 --> 00:06:17,139
for basically every length with ok this

00:06:15,219 --> 00:06:19,179
is what you wrote and this is what you

00:06:17,139 --> 00:06:22,899
maybe have meant and this is what you

00:06:19,179 --> 00:06:27,789
could also write so could read I can

00:06:22,899 --> 00:06:29,349
recommend it ok ok so I don't know how

00:06:27,789 --> 00:06:32,679
many of you was there from a TS talk

00:06:29,349 --> 00:06:36,279
earlier this morning he talked about I

00:06:32,679 --> 00:06:39,849
do mattock rust and man he told you all

00:06:36,279 --> 00:06:42,189
about how to do it yourself is it's a

00:06:39,849 --> 00:06:45,129
it's a nice idea to actually fix your

00:06:42,189 --> 00:06:45,710
code yourself but how about who makes us

00:06:45,129 --> 00:06:50,210
a bit more

00:06:45,710 --> 00:06:54,320
active okay so the compiler already

00:06:50,210 --> 00:07:00,740
gives you suggestions if you wrote for

00:06:54,320 --> 00:07:04,760
AI in 10.0 you iterating over something

00:07:00,740 --> 00:07:07,870
that's never happening because ranges

00:07:04,760 --> 00:07:11,720
only work in the one direction and not

00:07:07,870 --> 00:07:14,600
counting down words so you were looking

00:07:11,720 --> 00:07:18,800
for something that's called a reverse

00:07:14,600 --> 00:07:21,380
loop basically you wanted to say 0.10

00:07:18,800 --> 00:07:23,030
and then reverse it you didn't know

00:07:21,380 --> 00:07:26,330
about it okay it's totally fine I didn't

00:07:23,030 --> 00:07:28,310
know about it either but the link didn't

00:07:26,330 --> 00:07:31,010
just tell you okay here you can't do

00:07:28,310 --> 00:07:35,330
this no no the length actually brought

00:07:31,010 --> 00:07:40,780
the code you need to write to get good

00:07:35,330 --> 00:07:40,780
idea metric code so why fix it yourself

00:07:41,380 --> 00:07:45,340
this is from your perspective for hope

00:07:43,730 --> 00:07:47,690
is totally from mine but my perspective

00:07:45,340 --> 00:07:49,160
the quote on the slides if you can't

00:07:47,690 --> 00:07:52,130
read it says okay I'm sold

00:07:49,160 --> 00:07:55,370
these suggestions are great but I don't

00:07:52,130 --> 00:07:59,960
make me type don't make me wait and just

00:07:55,370 --> 00:08:06,410
fix my freaking code already enter Ross

00:07:59,960 --> 00:08:09,410
fix so there is no magic and it's

00:08:06,410 --> 00:08:12,050
already happening you've seen the errors

00:08:09,410 --> 00:08:14,690
you've seen the suggestions the error

00:08:12,050 --> 00:08:16,970
messages and the Diagnostics can also be

00:08:14,690 --> 00:08:20,660
outputted as JSON instead of human

00:08:16,970 --> 00:08:24,320
readable text so let's just take this

00:08:20,660 --> 00:08:26,750
raisin and pass the suggestions and to a

00:08:24,320 --> 00:08:29,980
bit of certain replace and you end up

00:08:26,750 --> 00:08:32,690
with better code at least I hope you do

00:08:29,980 --> 00:08:38,720
it's actually if you think about really

00:08:32,690 --> 00:08:40,610
trivial and so the rust fix there's a

00:08:38,720 --> 00:08:41,810
tool that's called rust fix and it's a

00:08:40,610 --> 00:08:43,670
simple Scylla tool

00:08:41,810 --> 00:08:46,760
you basically invoke it and it calls a

00:08:43,670 --> 00:08:49,720
compiler and asks hey what do you say

00:08:46,760 --> 00:08:52,130
what's a scout and for every single

00:08:49,720 --> 00:08:55,850
error message you would have gotten from

00:08:52,130 --> 00:08:58,540
the compiler rustics collects the arrows

00:08:55,850 --> 00:09:01,900
and shows you one by one hey

00:08:58,540 --> 00:09:04,150
so this is wrong or we can do better

00:09:01,900 --> 00:09:07,060
here would you like me to replace it

00:09:04,150 --> 00:09:11,230
with the red of the day and you say yeah

00:09:07,060 --> 00:09:12,070
sure or yeah I don't know or this is

00:09:11,230 --> 00:09:17,080
plain wrong

00:09:12,070 --> 00:09:18,790
it's it's all in there and after you ran

00:09:17,080 --> 00:09:22,150
through all these errors you say safe

00:09:18,790 --> 00:09:24,760
and it basically replaces the things

00:09:22,150 --> 00:09:27,010
you've thought totally to replace in

00:09:24,760 --> 00:09:30,840
your code and hopefully your code still

00:09:27,010 --> 00:09:30,840
compiles and it works better than before

00:09:31,590 --> 00:09:39,040
big promises I know but it's still not

00:09:36,550 --> 00:09:41,800
like if you care you can do better like

00:09:39,040 --> 00:09:46,680
you need to manually call this tool like

00:09:41,800 --> 00:09:46,680
it's one step too many okay okay

00:09:46,830 --> 00:09:54,700
what's better than like writing code and

00:09:51,510 --> 00:09:57,010
calling the compiler and making it tell

00:09:54,700 --> 00:09:57,580
us stuff and basically wrapping rustics

00:09:57,010 --> 00:10:00,910
around it

00:09:57,580 --> 00:10:02,290
well obviously let's do it in the editor

00:10:00,910 --> 00:10:05,880
while we are typing we want to have

00:10:02,290 --> 00:10:08,290
suggestions as well and luckily for us

00:10:05,880 --> 00:10:10,300
people have already been working on that

00:10:08,290 --> 00:10:13,570
as well it's called the Ross language

00:10:10,300 --> 00:10:17,800
server and it exposes warnings errors

00:10:13,570 --> 00:10:20,620
suggestions to navitor that can consume

00:10:17,800 --> 00:10:25,330
the language server the language server

00:10:20,620 --> 00:10:27,250
protocol the most complete plugin for

00:10:25,330 --> 00:10:31,300
editor is the one for a visual to decode

00:10:27,250 --> 00:10:34,210
and turns out it can already fix our

00:10:31,300 --> 00:10:38,520
suggestions so basically why did we

00:10:34,210 --> 00:10:43,120
write this Eli - it just uses plugin and

00:10:38,520 --> 00:10:45,400
so it turns out what clipping in this

00:10:43,120 --> 00:10:46,590
like the rough language server doesn't

00:10:45,400 --> 00:10:49,450
know what clipping

00:10:46,590 --> 00:10:52,900
why don't we make it know about clipping

00:10:49,450 --> 00:10:56,280
and I had a horrible horrible hack that

00:10:52,900 --> 00:11:00,640
basically imported links from Clippy

00:10:56,280 --> 00:11:03,820
into the compiler that gets called by LS

00:11:00,640 --> 00:11:06,580
and wasn't it wasn't pretty

00:11:03,820 --> 00:11:09,730
it really wasn't pretty so I was very

00:11:06,580 --> 00:11:12,040
glad to see minutes and it was just this

00:11:09,730 --> 00:11:15,160
morning about

00:11:12,040 --> 00:11:17,139
hmm why not add cliffie as an optional

00:11:15,160 --> 00:11:20,350
feature to the last language server so

00:11:17,139 --> 00:11:22,570
thanks to Oliver who's here with us and

00:11:20,350 --> 00:11:25,540
whose talk is the one after Milan you

00:11:22,570 --> 00:11:26,829
should totally stay for it well clip is

00:11:25,540 --> 00:11:30,430
now optional feature in the Ross

00:11:26,829 --> 00:11:34,959
language server and also five internet

00:11:30,430 --> 00:11:39,850
points for Nick Cameron this already

00:11:34,959 --> 00:11:41,589
merged not released but but much so if

00:11:39,850 --> 00:11:44,529
you are going to compile our ask

00:11:41,589 --> 00:11:47,500
yourself you'll get this awesome bunch

00:11:44,529 --> 00:11:50,139
of additional links so this is the time

00:11:47,500 --> 00:11:53,440
where I'll give you a demo well I don't

00:11:50,139 --> 00:11:55,690
I don't have my laptop but that's no

00:11:53,440 --> 00:12:00,130
problem I expected to not have my laptop

00:11:55,690 --> 00:12:02,110
because well mine was too easy so let's

00:12:00,130 --> 00:12:02,740
do a quick slideshow this is what it

00:12:02,110 --> 00:12:04,649
looks like

00:12:02,740 --> 00:12:07,959
Jochen visual studio code and basically

00:12:04,649 --> 00:12:10,350
writes these lines let's enable basic

00:12:07,959 --> 00:12:14,139
Clippy warnings right in main function

00:12:10,350 --> 00:12:16,449
define a vector with the element that's

00:12:14,139 --> 00:12:19,300
the number one and write an if statement

00:12:16,449 --> 00:12:22,500
assess hmm what's the length is this

00:12:19,300 --> 00:12:26,500
length of the vector greater than zero

00:12:22,500 --> 00:12:29,139
hmm what would you actually want to do

00:12:26,500 --> 00:12:31,660
here hmm

00:12:29,139 --> 00:12:35,199
length comparison to zero it's a nice

00:12:31,660 --> 00:12:39,190
that's a nice overlay but also see there

00:12:35,199 --> 00:12:41,410
was a light bulb okay yeah let's fix it

00:12:39,190 --> 00:12:43,720
and three places if lengths play a

00:12:41,410 --> 00:12:45,399
greater zero which it's not empty

00:12:43,720 --> 00:12:48,010
because that's what we actually wanted

00:12:45,399 --> 00:12:50,220
to express and also this is more

00:12:48,010 --> 00:12:53,139
performant because collections

00:12:50,220 --> 00:12:56,230
collections that are not as trivial as

00:12:53,139 --> 00:12:57,939
vector can basically implement is empty

00:12:56,230 --> 00:12:59,649
in a more efficient ways and counting

00:12:57,939 --> 00:13:01,870
their elements okay

00:12:59,649 --> 00:13:05,170
so we get a nice slap oh forget a nice

00:13:01,870 --> 00:13:07,800
context menu and we can apply it and bam

00:13:05,170 --> 00:13:07,800
it's done

00:13:13,850 --> 00:13:19,710
the plow surplus is absolutely not for

00:13:16,800 --> 00:13:22,830
me like I hope the people who actually

00:13:19,710 --> 00:13:25,620
made this work here are watching the

00:13:22,830 --> 00:13:29,760
stream sometime in the future and this

00:13:25,620 --> 00:13:34,350
applause was for you okay time for

00:13:29,760 --> 00:13:41,550
another demo you wrote a live statement

00:13:34,350 --> 00:13:43,800
with a small boolean expression just

00:13:41,550 --> 00:13:45,330
imagine it was like twice as long and

00:13:43,800 --> 00:13:50,550
not just something I came up with this

00:13:45,330 --> 00:13:53,460
morning it can be simplified to what oh

00:13:50,550 --> 00:13:56,540
yeah oh absolutely less than or equal

00:13:53,460 --> 00:14:03,150
sure we knew about that let's fix it

00:13:56,540 --> 00:14:05,330
damn another thing done but it's not all

00:14:03,150 --> 00:14:07,950
good like it's not all finished it's not

00:14:05,330 --> 00:14:12,390
is this not one not one not Oh or

00:14:07,950 --> 00:14:15,150
anything near it and I want what I want

00:14:12,390 --> 00:14:18,600
you to take away from this is you can

00:14:15,150 --> 00:14:21,240
contribute this is a very nice length

00:14:18,600 --> 00:14:25,860
that tells you that if you wanted to

00:14:21,240 --> 00:14:31,830
write 3.14 you may have actually wanted

00:14:25,860 --> 00:14:34,950
to write the constant for pi so why not

00:14:31,830 --> 00:14:38,360
use like the constant that actually

00:14:34,950 --> 00:14:41,520
defined okay wait where's our an ipod

00:14:38,360 --> 00:14:45,120
service there is no light bulb because

00:14:41,520 --> 00:14:50,340
this suggestion does not exist it's it's

00:14:45,120 --> 00:14:52,650
only their own message okay okay so this

00:14:50,340 --> 00:14:58,710
was a demo thank you so much I'm glad it

00:14:52,650 --> 00:15:00,900
works as well let's talk a bit about how

00:14:58,710 --> 00:15:03,090
this actually works like lots of zero

00:15:00,900 --> 00:15:08,550
lines of code I committed just how it

00:15:03,090 --> 00:15:12,030
actually is working and linds our

00:15:08,550 --> 00:15:14,090
compiler plugins basically and if you've

00:15:12,030 --> 00:15:17,310
been here for the talk before mine

00:15:14,090 --> 00:15:20,490
nikita talked about sts and linds

00:15:17,310 --> 00:15:23,790
basically are Naturals on particular ast

00:15:20,490 --> 00:15:24,360
structures you try to find

00:15:23,790 --> 00:15:27,029
node

00:15:24,360 --> 00:15:29,810
and items of interest and then you tell

00:15:27,029 --> 00:15:32,880
the compiler to basically annotate this

00:15:29,810 --> 00:15:35,399
piece of code with a suggestion or in

00:15:32,880 --> 00:15:39,019
health text or a warning or what have

00:15:35,399 --> 00:15:41,670
you and the compiler then generates

00:15:39,019 --> 00:15:44,209
output this is a human readable as

00:15:41,670 --> 00:15:49,620
you've seen before or machine readable

00:15:44,209 --> 00:15:53,310
so rustics can't consume it this is not

00:15:49,620 --> 00:15:56,430
that hard as you like this is actually

00:15:53,310 --> 00:16:00,540
rosin structure I managed to do it so if

00:15:56,430 --> 00:16:04,860
you wanted to look at some code and say

00:16:00,540 --> 00:16:07,800
hey hmm maybe maybe I can actually fix

00:16:04,860 --> 00:16:09,750
this myself manually or by writing a

00:16:07,800 --> 00:16:11,490
length you should totally not fix it

00:16:09,750 --> 00:16:17,579
yourself because everyone can do that

00:16:11,490 --> 00:16:20,940
right a lint we have a very interesting

00:16:17,579 --> 00:16:23,790
question still open though because what

00:16:20,940 --> 00:16:26,670
is actually auto fixable like we have

00:16:23,790 --> 00:16:29,720
these suggestions and can we apply all

00:16:26,670 --> 00:16:32,540
of them this is everything we get good

00:16:29,720 --> 00:16:36,420
codes that we can just search replace

00:16:32,540 --> 00:16:40,620
yeah a lot of it is actually like I was

00:16:36,420 --> 00:16:42,540
surprised that I expected it to like be

00:16:40,620 --> 00:16:45,540
very very small percentage of all

00:16:42,540 --> 00:16:47,220
suggestions we have that we could

00:16:45,540 --> 00:16:51,120
actually ought to apply but it turns out

00:16:47,220 --> 00:16:55,019
we can apply Auto fix a lot we should

00:16:51,120 --> 00:16:59,250
totally make a list or actually how

00:16:55,019 --> 00:17:01,079
about we flag approximate suggestions so

00:16:59,250 --> 00:17:04,370
we know which ones are not all fixable

00:17:01,079 --> 00:17:08,400
and when I wrote these slides earlier

00:17:04,370 --> 00:17:10,890
last week the rosin was a PR open for

00:17:08,400 --> 00:17:13,410
the Ross compiler this glorious pull

00:17:10,890 --> 00:17:16,620
request number forty seven thousand five

00:17:13,410 --> 00:17:20,819
hundred and fourteen that acts at the

00:17:16,620 --> 00:17:23,699
simple flag to each suggestion you write

00:17:20,819 --> 00:17:26,459
and passes this down to basically the

00:17:23,699 --> 00:17:29,040
JSON output as well and it allows you to

00:17:26,459 --> 00:17:30,570
flag approximate suggestions yeah I was

00:17:29,040 --> 00:17:33,570
going to talk about how this is good

00:17:30,570 --> 00:17:38,289
idea and how we could maybe do it but

00:17:33,570 --> 00:17:43,669
actually that it got much already so

00:17:38,289 --> 00:17:45,950
this stuff is changing rapidly like if

00:17:43,669 --> 00:17:48,379
you if you look at this talking agir I

00:17:45,950 --> 00:17:49,820
hope you already already be using it and

00:17:48,379 --> 00:17:53,539
everything I tell you would be totally

00:17:49,820 --> 00:17:55,879
unsurprising so yeah it's great progress

00:17:53,539 --> 00:17:57,340
that's happening here and you should all

00:17:55,879 --> 00:18:08,899
contribute to it

00:17:57,340 --> 00:18:11,600
and with that thank you so much and to

00:18:08,899 --> 00:18:14,960
recap just so I can leave the slide yeah

00:18:11,600 --> 00:18:18,110
search for us clipping search for the

00:18:14,960 --> 00:18:20,289
good first issues and become a compiler

00:18:18,110 --> 00:18:20,289
hacker

00:18:27,130 --> 00:18:30,720
yeah let's start here and then go down

00:18:38,789 --> 00:18:45,039
Clippy is basically a compiler plucking

00:18:41,500 --> 00:18:47,710
s pollens are so it would be very very

00:18:45,039 --> 00:18:51,130
hard to stabilize compilers internal

00:18:47,710 --> 00:18:53,520
api's and not have them break ever so we

00:18:51,130 --> 00:18:57,309
don't want to do that but actually

00:18:53,520 --> 00:18:59,110
Clippy will be shipped with rust up as a

00:18:57,309 --> 00:19:02,590
component you can star just like rust

00:18:59,110 --> 00:19:05,530
format or LS so you don't have to so you

00:19:02,590 --> 00:19:07,330
can I sing ISM in the next release or

00:19:05,530 --> 00:19:09,130
maybe in the the one after that then you

00:19:07,330 --> 00:19:14,409
can just write rest up component at

00:19:09,130 --> 00:19:25,600
clipping and get it on stable just go

00:19:14,409 --> 00:19:28,299
there okay good good yeah so the

00:19:25,600 --> 00:19:32,860
question was if I have thought about

00:19:28,299 --> 00:19:40,179
fixes that introduce new errors yeah so

00:19:32,860 --> 00:19:45,159
a lot of suggestions and not yet they

00:19:40,179 --> 00:19:46,929
they introduced maybe not errors but but

00:19:45,159 --> 00:19:48,820
new suggestions and this is a good case

00:19:46,929 --> 00:19:52,440
like we already producing codes that

00:19:48,820 --> 00:19:58,900
comprise but triggers new errors and

00:19:52,440 --> 00:20:00,460
yeah it's it's you could get into the

00:19:58,900 --> 00:20:05,110
way of thinking that like okay let's

00:20:00,460 --> 00:20:06,669
just recursively run rust fix until it

00:20:05,110 --> 00:20:09,419
generates no more errors or it doesn't

00:20:06,669 --> 00:20:15,460
compile this is this is a good solution

00:20:09,419 --> 00:20:19,480
but not one that's that's working quite

00:20:15,460 --> 00:20:22,330
as we intended it to so I have I have no

00:20:19,480 --> 00:20:25,539
solution to give you except for calling

00:20:22,330 --> 00:20:28,650
it multiple times but I'll be open to

00:20:25,539 --> 00:20:28,650
any suggestions

00:20:30,650 --> 00:20:34,659
any more questions yeah

00:20:47,979 --> 00:20:57,889
maybe I don't know anyone I don't want

00:20:51,769 --> 00:20:58,340
to say yes but maybe I don't I don't

00:20:57,889 --> 00:21:01,789
think so

00:20:58,340 --> 00:21:14,330
I don't think so but yeah it's like do

00:21:01,789 --> 00:21:21,759
you want to do that okay you still have

00:21:14,330 --> 00:21:21,759
time for more questions I guess yeah

00:21:29,859 --> 00:21:34,460
let's set actually the secret behind all

00:21:32,869 --> 00:21:40,009
my github contributions in the last

00:21:34,460 --> 00:21:40,429
year's no no no I've run it on personal

00:21:40,009 --> 00:21:43,339
codes

00:21:40,429 --> 00:21:46,899
I have seen people run it on their code

00:21:43,339 --> 00:21:50,839
but I have not yet started like doing

00:21:46,899 --> 00:21:53,080
pull requests automated by Russ fix it

00:21:50,839 --> 00:21:59,559
might might be a good idea actually but

00:21:53,080 --> 00:21:59,559
you should totally look into it yeah

00:22:10,840 --> 00:22:20,659
the question was if I have tried or if I

00:22:18,440 --> 00:22:25,399
intended rustics to be a tool that can

00:22:20,659 --> 00:22:27,169
upgrade code basically so once new rust

00:22:25,399 --> 00:22:29,809
features become available that you can

00:22:27,169 --> 00:22:33,289
use rust fix to upgrade your code base

00:22:29,809 --> 00:22:36,769
to use them and I totally didn't think

00:22:33,289 --> 00:22:41,059
about this until there was a discussion

00:22:36,769 --> 00:22:44,860
about introducing epochs to a box called

00:22:41,059 --> 00:22:49,580
actually into rust because this year

00:22:44,860 --> 00:22:53,929
the rust team wants to basically compile

00:22:49,580 --> 00:22:56,659
a new version of the rust language

00:22:53,929 --> 00:22:59,059
itself and introduce breaking changes

00:22:56,659 --> 00:23:00,500
without breaking code and they want to

00:22:59,059 --> 00:23:04,840
do that by actually versioning the

00:23:00,500 --> 00:23:09,620
compiler and the standard library in

00:23:04,840 --> 00:23:12,139
epochs so if you wanted to have a sink

00:23:09,620 --> 00:23:15,399
and the weight as a keyword in in random

00:23:12,139 --> 00:23:19,070
code this was this was actually supposed

00:23:15,399 --> 00:23:20,570
it would not work today because you

00:23:19,070 --> 00:23:22,700
can't introduce new keywords because

00:23:20,570 --> 00:23:25,730
people might already be using this for

00:23:22,700 --> 00:23:27,200
their variable names and epochs will

00:23:25,730 --> 00:23:29,120
sources because in your cargo

00:23:27,200 --> 00:23:33,590
configuration file you say okay let's

00:23:29,120 --> 00:23:37,730
use rust version 2018 instead of the

00:23:33,590 --> 00:23:42,230
implicit 2015 one that's 1.0 and in this

00:23:37,730 --> 00:23:44,929
discussion people started talking about

00:23:42,230 --> 00:23:46,399
well can we make all these changes in a

00:23:44,929 --> 00:23:49,490
way that they can be auto applicable

00:23:46,399 --> 00:23:54,649
reserve aspects and I was like yes

00:23:49,490 --> 00:23:57,620
please please do it and if there are

00:23:54,649 --> 00:23:59,389
some limbs in Clippy that suggests using

00:23:57,620 --> 00:24:02,690
newer features or features that were not

00:23:59,389 --> 00:24:05,149
available in 1.0 so this already a bit

00:24:02,690 --> 00:24:09,470
of precedence for it and I'd be really

00:24:05,149 --> 00:24:11,210
happy to have the rust fix set you can

00:24:09,470 --> 00:24:15,049
tell too low to lint groups that's

00:24:11,210 --> 00:24:19,460
called upgrades to 2018 and get your

00:24:15,049 --> 00:24:19,710
code fixed thank you

00:24:19,460 --> 00:24:25,079
you

00:24:19,710 --> 00:24:25,079

YouTube URL: https://www.youtube.com/watch?v=TelWL2YfYk0


