Title: Antonin Carette - Why you should take a look at Rust
Publication date: 2018-02-06
Playlist: FOSDEM Rust Devroom 2018
Description: 
	Insights into a modern, safe, fast language

Today, many new programming languages have been created in order to simplify at the extreme the art of programming (Golang), to boost the performance of their human readable application (Nim), to secure the way to make and run programs with zero-cost abstraction (Rust), or just to propose a new exiting way to write programs (Scala, Swift), etc. Each of those new programming languages has its own features, goals, attendance, and community.

Today, it may become hazardous to develop with a new programming language, especially for a company or for a full-time personal project, due to the lack of stability, libraries, IDE features for this programming language, a too small or strict community, or many other obvious reasons.

The goal of this presentation is to introduce the concepts of Rust, its pros and cons, and how Rust differs from the others programming languages. The target audience is mainly for developers who are reluctant to launch themselves into Rust, or project managers and CTOs who are looking for stable and exciting new technologies.

This talk is intended to emphasize Rust rationale, and will explain clearly and precisely why Rust wants to be the programming language of the next ten years.


I am PhD student in Machine Learning and Natural Language Processing, working on Automated Documents Processing, at University of Luxembourg. I am interested in Machine Learning, programming languages and compiler design. My main programming languages are Python, and Rust. Open Source lover

Rust devroom @ FOSDEM 2018
https://fosdem.org/2018/schedule/event/rust_introduction/

These talks have been recorded at FOSDEM (https://fosdem.org/)
This work is licensed under the Creative Commons Attribution 2.0 Belgium Licence.
To view a copy of this licence, visit http://creativecommons.org/licenses/by/2.0/be/deed.en
Captions: 
	00:00:04,740 --> 00:00:12,210
oh hello I am Ultima carrots and so

00:00:09,660 --> 00:00:15,179
today I will talk about why you should

00:00:12,210 --> 00:00:17,340
take a look at frost so first of all I

00:00:15,179 --> 00:00:19,400
want to thank all the first them

00:00:17,340 --> 00:00:22,489
volunteers for us all so much they made

00:00:19,400 --> 00:00:29,189
so thanks a lot actually

00:00:22,489 --> 00:00:31,169
so ok so let's begin so as you might

00:00:29,189 --> 00:00:34,079
understand I am a French Gary you know

00:00:31,169 --> 00:00:35,700
the accent and previously I tried to

00:00:34,079 --> 00:00:37,559
understand what the computer I trained

00:00:35,700 --> 00:00:40,050
to understand understood just a

00:00:37,559 --> 00:00:41,370
magnificent sentence to say I gave that

00:00:40,050 --> 00:00:44,100
my PhD last week

00:00:41,370 --> 00:00:46,350
and I really loved free and open source

00:00:44,100 --> 00:00:50,879
and I am a contributor actually of many

00:00:46,350 --> 00:00:54,690
open source project so for your

00:00:50,879 --> 00:00:56,640
information I plan to open a res meet up

00:00:54,690 --> 00:01:00,629
and coffee meeting at Luxembourg on your

00:00:56,640 --> 00:01:02,850
example in France so please share share

00:01:00,629 --> 00:01:07,440
the information because since two months

00:01:02,850 --> 00:01:10,590
I tried to do two just import it's not

00:01:07,440 --> 00:01:13,439
the correct word as speakers and people

00:01:10,590 --> 00:01:15,630
etc it's really hard for me so if you

00:01:13,439 --> 00:01:18,479
can share this information or if you're

00:01:15,630 --> 00:01:23,820
interested just talk to me directly

00:01:18,479 --> 00:01:26,700
Thanks so today there is a lot of new

00:01:23,820 --> 00:01:30,930
programming language like for example

00:01:26,700 --> 00:01:33,509
gene in go rest etcetera but sometimes

00:01:30,930 --> 00:01:35,700
when we want to understand why a

00:01:33,509 --> 00:01:39,030
programming language is really important

00:01:35,700 --> 00:01:42,090
we have to understand for what actually

00:01:39,030 --> 00:01:45,240
it what is the goal of this programming

00:01:42,090 --> 00:01:48,630
language so first just a quick history

00:01:45,240 --> 00:01:51,329
at the beginning I need and as you might

00:01:48,630 --> 00:01:54,600
know since 2004 consumer actually there

00:01:51,329 --> 00:01:57,180
are big changes we switch actually from

00:01:54,600 --> 00:01:59,009
monocot multi-core architectures for our

00:01:57,180 --> 00:02:00,750
computers mono straight to

00:01:59,009 --> 00:02:03,179
multi-threaded applications more

00:02:00,750 --> 00:02:05,969
powerful adware and democratization of

00:02:03,179 --> 00:02:08,840
the internet actually introduced a lot

00:02:05,969 --> 00:02:11,100
of new subtract so many competition and

00:02:08,840 --> 00:02:13,170
those big changes actually for the

00:02:11,100 --> 00:02:16,080
robber are really big troubles because

00:02:13,170 --> 00:02:17,880
we are able to switch from sequential

00:02:16,080 --> 00:02:20,430
code to which is fidelity cost

00:02:17,880 --> 00:02:22,500
got applications that introduced data

00:02:20,430 --> 00:02:26,340
race issues big memory leaks programs

00:02:22,500 --> 00:02:28,740
and with this competition we have

00:02:26,340 --> 00:02:32,730
actually to build software with a lot of

00:02:28,740 --> 00:02:36,330
features that we don't actually test a

00:02:32,730 --> 00:02:38,970
lot and introduce actually those big

00:02:36,330 --> 00:02:46,350
problems so this is a funny picture

00:02:38,970 --> 00:02:51,390
actually that relate the he has the idea

00:02:46,350 --> 00:02:53,760
of you know mm it's directly from the

00:02:51,390 --> 00:02:56,910
Madeira office and so this guy is not on

00:02:53,760 --> 00:02:59,090
the chair and very the posture must be

00:02:56,910 --> 00:03:01,860
this tall to write multi-threaded code

00:02:59,090 --> 00:03:04,830
actually it's not desist or to write

00:03:01,860 --> 00:03:06,510
safe multi-threaded code and I invite

00:03:04,830 --> 00:03:11,150
you actually to take a look at this

00:03:06,510 --> 00:03:14,610
fabulous blog post just to introduce you

00:03:11,150 --> 00:03:17,070
get a bit more the res program language

00:03:14,610 --> 00:03:19,320
so in this talk I will be the most

00:03:17,070 --> 00:03:24,390
highest level as possible because we are

00:03:19,320 --> 00:03:27,450
all come from different backgrounds so I

00:03:24,390 --> 00:03:29,730
don't want to you know lose anyone in

00:03:27,450 --> 00:03:32,990
this table so I would try to to be the

00:03:29,730 --> 00:03:34,290
most highest level as possible and

00:03:32,990 --> 00:03:39,750
Graydon Hall

00:03:34,290 --> 00:03:42,390
so it's Mozilla engineer at last in 2006

00:03:39,750 --> 00:03:44,580
at this idea we need the memory safety

00:03:42,390 --> 00:03:46,590
and raise free multi-threading

00:03:44,580 --> 00:03:48,750
programming language because this was

00:03:46,590 --> 00:03:52,680
really hard and it's still hard today

00:03:48,750 --> 00:03:54,590
to write safe which is red code with C

00:03:52,680 --> 00:03:59,730
and C++ if you want to obtain

00:03:54,590 --> 00:04:01,860
performance code so with this idea grid

00:03:59,730 --> 00:04:05,040
on holes that said yeah yeah we need the

00:04:01,860 --> 00:04:07,709
new surplice press and with this ID in

00:04:05,040 --> 00:04:08,970
introduce a new programming language the

00:04:07,709 --> 00:04:14,220
c plus plus plus plus

00:04:08,970 --> 00:04:17,480
at this c++ process is actually rust so

00:04:14,220 --> 00:04:21,480
rest what is rust rust is a modern safe

00:04:17,480 --> 00:04:23,700
fast and yeah and concurrent open source

00:04:21,480 --> 00:04:26,100
system programming language so it's a

00:04:23,700 --> 00:04:29,540
programming language actually with the

00:04:26,100 --> 00:04:31,589
first goal is to write memory safe

00:04:29,540 --> 00:04:36,589
thread safe

00:04:31,589 --> 00:04:36,589
with zero cast obstruction for system

00:04:37,129 --> 00:04:44,969
just a quickie story so Graydon Hall

00:04:39,989 --> 00:04:47,909
wrote the first read compiler in 2006 in

00:04:44,969 --> 00:04:50,639
Oh camel and I invite you to take a look

00:04:47,909 --> 00:04:53,969
at okay well it's very great programming

00:04:50,639 --> 00:04:57,739
language and it has been sponsored in

00:04:53,969 --> 00:05:01,229
2009 by the Mozilla Foundation and in

00:04:57,739 --> 00:05:07,229
2015 it's reached first stable reduction

00:05:01,229 --> 00:05:13,859
so now in 2018 I think we are 1.23 or

00:05:07,229 --> 00:05:17,309
something like that version so in this

00:05:13,859 --> 00:05:19,019
talk actually I will present you why you

00:05:17,309 --> 00:05:22,049
should take a look at first with

00:05:19,019 --> 00:05:25,379
different layers so first I will

00:05:22,049 --> 00:05:28,439
introduce a concept of rest why actually

00:05:25,379 --> 00:05:32,369
rest is your unique unique with this

00:05:28,439 --> 00:05:34,889
concept we are all developers or in

00:05:32,369 --> 00:05:36,599
majority so what what developers want

00:05:34,889 --> 00:05:39,029
actually its profitable

00:05:36,599 --> 00:05:41,399
productivity and I will talk about the

00:05:39,029 --> 00:05:43,799
productivity in rest open source is not

00:05:41,399 --> 00:05:45,119
only cloud its people so I will talk

00:05:43,799 --> 00:05:47,099
about the community because the

00:05:45,119 --> 00:05:52,349
community is the res community is really

00:05:47,099 --> 00:05:56,969
awesome company is a project for Russian

00:05:52,349 --> 00:06:02,879
production the to-do list of 2008 and 18

00:05:56,969 --> 00:06:06,149
and finally to conclude so rust has many

00:06:02,879 --> 00:06:08,759
features and actually it can be great

00:06:06,149 --> 00:06:10,739
for developers to have many features but

00:06:08,759 --> 00:06:13,979
the learning curve is still high so I

00:06:10,739 --> 00:06:19,199
will only introduce what to make rest so

00:06:13,979 --> 00:06:21,599
unique its memory safety and yet data

00:06:19,199 --> 00:06:24,239
res safety and zero cost abstraction if

00:06:21,599 --> 00:06:27,779
you want to take a look at all the

00:06:24,239 --> 00:06:31,489
features of rust I just check the

00:06:27,779 --> 00:06:37,729
website it's clear enough for that and

00:06:31,489 --> 00:06:41,009
just to explain those concepts I will

00:06:37,729 --> 00:06:43,679
yeah I will introduce a shorter story so

00:06:41,009 --> 00:06:45,720
once upon a time the DVD seller and the

00:06:43,679 --> 00:06:49,380
costumer so just image

00:06:45,720 --> 00:06:50,790
the situation you are a consumer and you

00:06:49,380 --> 00:06:55,320
want to buy your DVD

00:06:50,790 --> 00:06:57,420
okay you want to buy what actually you

00:06:55,320 --> 00:07:00,090
want to buy this DVD but if the box is

00:06:57,420 --> 00:07:03,240
empty you cannot buy it it's not legal

00:07:00,090 --> 00:07:06,120
and the DVD seller cannot actually sell

00:07:03,240 --> 00:07:08,640
you the DVD it's the same case actually

00:07:06,120 --> 00:07:11,250
for rest for memories actually actually

00:07:08,640 --> 00:07:13,560
we have known your point pointer

00:07:11,250 --> 00:07:16,830
dereference situation so just imagine we

00:07:13,560 --> 00:07:19,620
have strict DVD we were title and

00:07:16,830 --> 00:07:22,200
weather function take that take actually

00:07:19,620 --> 00:07:25,200
directly the straight in the main

00:07:22,200 --> 00:07:27,360
function we actually reserved the memory

00:07:25,200 --> 00:07:30,330
we are located the memory for the DVD

00:07:27,360 --> 00:07:33,000
and we want to take the DVD but here

00:07:30,330 --> 00:07:35,580
there is a compile-time error not at

00:07:33,000 --> 00:07:39,120
front time it's on compile time use of

00:07:35,580 --> 00:07:41,460
possibly initialize viable DVD so the

00:07:39,120 --> 00:07:43,830
compiler will introduce you that no you

00:07:41,460 --> 00:07:47,100
cannot actually run this program because

00:07:43,830 --> 00:07:50,210
there is an old reference et al present

00:07:47,100 --> 00:07:55,740
sorry new pointer dereference situation

00:07:50,210 --> 00:07:58,650
in a other situation so the DVD is okay

00:07:55,740 --> 00:08:03,660
so where's the box and the DVD inside

00:07:58,650 --> 00:08:06,450
and in this case the DVD seller is the

00:08:03,660 --> 00:08:08,640
owner of the DVD if you want to buy this

00:08:06,450 --> 00:08:11,250
DVD you want to be the owner of this DVD

00:08:08,640 --> 00:08:14,100
so the DVD will belong to you actually

00:08:11,250 --> 00:08:17,220
and not to the DVD sorrow and it's the

00:08:14,100 --> 00:08:20,970
same case actually forest and we call

00:08:17,220 --> 00:08:23,669
that the ownership situation so this is

00:08:20,970 --> 00:08:28,020
actually one of the main this is the

00:08:23,669 --> 00:08:31,710
core actually of first we initialize a

00:08:28,020 --> 00:08:35,940
DVD which is a struct and actually the

00:08:31,710 --> 00:08:39,539
DVDs Blade Runner and we give it as a

00:08:35,940 --> 00:08:42,750
given to take the DVD here so take is

00:08:39,539 --> 00:08:45,420
know the owner of the structure of the

00:08:42,750 --> 00:08:48,150
DVD straight so we can choose any more

00:08:45,420 --> 00:08:51,060
in the main function here and we have a

00:08:48,150 --> 00:08:52,410
compile time error that DVD is not

00:08:51,060 --> 00:08:55,920
belong to Maine

00:08:52,410 --> 00:08:58,550
but to take so as soon as take is not in

00:08:55,920 --> 00:09:01,850
the scope of the main DVD is not

00:08:58,550 --> 00:09:04,610
there's nothing system oh this is

00:09:01,850 --> 00:09:06,589
actually the that's the coffee feature

00:09:04,610 --> 00:09:10,550
of the rest programming language it's

00:09:06,589 --> 00:09:14,810
the ownership situation so it's a third

00:09:10,550 --> 00:09:18,410
situation you are not a DVD seller but a

00:09:14,810 --> 00:09:21,830
DVD renter you you actually if you are a

00:09:18,410 --> 00:09:25,089
DVD renter you just want to be the owner

00:09:21,830 --> 00:09:31,779
of the DVD even if you borrow this DVD

00:09:25,089 --> 00:09:36,560
so in this situation in this situation

00:09:31,779 --> 00:09:39,680
you will give a period of time just for

00:09:36,560 --> 00:09:43,490
the consumer to use actually the DVD

00:09:39,680 --> 00:09:47,029
okay and this is really important

00:09:43,490 --> 00:09:52,820
because if you give the reference to the

00:09:47,029 --> 00:09:54,970
vidi-vidi okay so Bowa will access to

00:09:52,820 --> 00:09:58,149
the DVD without any modifications and

00:09:54,970 --> 00:10:01,220
after that you can print the title of

00:09:58,149 --> 00:10:05,120
the stretch because it still belongs to

00:10:01,220 --> 00:10:07,670
me and just as borrow is not his

00:10:05,120 --> 00:10:11,600
otoscope it will the rest compiler

00:10:07,670 --> 00:10:14,480
actually will not remove virtual memory

00:10:11,600 --> 00:10:16,850
for faulty structure so it still belong

00:10:14,480 --> 00:10:24,140
mainly still the owner of the struct

00:10:16,850 --> 00:10:25,850
okay and return to us this DVD before

00:10:24,140 --> 00:10:28,250
the end of the first M introduced

00:10:25,850 --> 00:10:31,540
actually a period of time we called

00:10:28,250 --> 00:10:34,610
actually the lifetime of a reference and

00:10:31,540 --> 00:10:39,850
it's typically a situation where you

00:10:34,610 --> 00:10:41,930
want to avoid to reference something

00:10:39,850 --> 00:10:49,610
when you want to reference actually

00:10:41,930 --> 00:10:52,250
something that varies know that already

00:10:49,610 --> 00:10:55,160
be memory free actually like dangling

00:10:52,250 --> 00:10:58,430
pointers so with this situation actually

00:10:55,160 --> 00:11:01,640
rest avoid that so here

00:10:58,430 --> 00:11:03,770
it's immutable and you can have the

00:11:01,640 --> 00:11:05,930
situation what you have actually moved

00:11:03,770 --> 00:11:09,170
to a ball reference with a troll that

00:11:05,930 --> 00:11:10,579
yeah I couldn't and sorry for that I

00:11:09,170 --> 00:11:13,470
will give you a DVD

00:11:10,579 --> 00:11:15,089
unfortunately it's a writable disc so he

00:11:13,470 --> 00:11:18,779
can do anything with that

00:11:15,089 --> 00:11:23,040
and unfortunately put the initial HT on

00:11:18,779 --> 00:11:26,490
the bed when a DVD and this is mutable

00:11:23,040 --> 00:11:29,699
burbling situation so just to resume

00:11:26,490 --> 00:11:32,670
using rest you can add them to

00:11:29,699 --> 00:11:35,430
dereference a null pointer attempt to

00:11:32,670 --> 00:11:38,490
use already freed memory like dangling

00:11:35,430 --> 00:11:42,240
poker forget to free memory and add them

00:11:38,490 --> 00:11:45,509
to free already freed memory and this is

00:11:42,240 --> 00:11:48,540
actually the core feature of rest is

00:11:45,509 --> 00:11:50,910
memory safety but very some rules

00:11:48,540 --> 00:11:53,519
actually respects the borescope not lost

00:11:50,910 --> 00:11:55,139
not most outlaws you know just think

00:11:53,519 --> 00:11:57,899
about you know the situation of the

00:11:55,139 --> 00:12:00,660
period of time the customer will get the

00:11:57,899 --> 00:12:02,279
DVD borrow this DVD you can have at

00:12:00,660 --> 00:12:04,589
least one reference to a resource you

00:12:02,279 --> 00:12:06,600
can have one be table reference to a

00:12:04,589 --> 00:12:09,180
resource but you can't have the last two

00:12:06,600 --> 00:12:12,870
rules at the same times and you must

00:12:09,180 --> 00:12:15,529
actually asked why it was Fred safety

00:12:12,870 --> 00:12:19,079
because when does that erase happens

00:12:15,529 --> 00:12:22,560
there is free actually a combination a

00:12:19,079 --> 00:12:24,300
combination of three different points at

00:12:22,560 --> 00:12:26,339
least two pointers to the same resource

00:12:24,300 --> 00:12:29,399
at least one writing pointer and

00:12:26,339 --> 00:12:31,439
unsynchronized operations but choosing

00:12:29,399 --> 00:12:34,740
actually the core features or ownership

00:12:31,439 --> 00:12:36,870
if you have multiple reference you don't

00:12:34,740 --> 00:12:38,639
have a new writing pointer if you have

00:12:36,870 --> 00:12:41,670
one writing pointer you don't have any

00:12:38,639 --> 00:12:44,430
other reference and all those operation

00:12:41,670 --> 00:12:46,380
as signals by default so rust answers

00:12:44,430 --> 00:12:51,389
this problem from the directly the

00:12:46,380 --> 00:12:53,519
ownership so rest actually using rest

00:12:51,389 --> 00:12:55,380
you can't read and write the same

00:12:53,519 --> 00:12:57,870
variable from multiples read at the same

00:12:55,380 --> 00:13:01,319
time and you can forget to acquire your

00:12:57,870 --> 00:13:05,880
lock before accessing the variable it

00:13:01,319 --> 00:13:08,699
protects and this is actually what was

00:13:05,880 --> 00:13:12,290
made actually for for memory interests

00:13:08,699 --> 00:13:15,809
thread thread safety

00:13:12,290 --> 00:13:17,850
okay so developers say yeah okay

00:13:15,809 --> 00:13:20,000
features are a good abstraction is

00:13:17,850 --> 00:13:23,699
really great and we need safety today

00:13:20,000 --> 00:13:24,209
but we care about you over it but Andres

00:13:23,699 --> 00:13:26,550
the science

00:13:24,209 --> 00:13:29,100
so recessions just you know people that

00:13:26,550 --> 00:13:31,800
are using res freshmen as developers

00:13:29,100 --> 00:13:33,240
etcetera they said yeah but we've rushed

00:13:31,800 --> 00:13:35,550
you only pay for the feature you

00:13:33,240 --> 00:13:38,610
actually use Russ does not contain a

00:13:35,550 --> 00:13:42,869
garbage collector the compiler actually

00:13:38,610 --> 00:13:46,019
will just adjust the lifetime of the

00:13:42,869 --> 00:13:48,629
variables or references just at compile

00:13:46,019 --> 00:13:50,790
time and perform safety check at compile

00:13:48,629 --> 00:13:55,369
time so your things of the same

00:13:50,790 --> 00:13:59,910
performance at his running time than C++

00:13:55,369 --> 00:14:02,420
but with safety so for zero cost

00:13:59,910 --> 00:14:02,420
abstraction

00:14:05,560 --> 00:14:11,290
you can combine low-level control with a

00:14:09,040 --> 00:14:14,440
level programming concepts and this is

00:14:11,290 --> 00:14:18,390
huge actually for a modern programming

00:14:14,440 --> 00:14:24,730
language so this is the core features of

00:14:18,390 --> 00:14:26,529
rest so now as the robber we want to be

00:14:24,730 --> 00:14:29,500
productive we don't want actually to

00:14:26,529 --> 00:14:31,990
write you know safe program in six

00:14:29,500 --> 00:14:34,750
months and maybe yeah but we can do that

00:14:31,990 --> 00:14:37,720
actually in three weeks with Python for

00:14:34,750 --> 00:14:40,330
example and so this is a tweet from

00:14:37,720 --> 00:14:43,420
Clement or a frog or the city of Krakow

00:14:40,330 --> 00:14:45,640
that said rest up and cargo is by far my

00:14:43,420 --> 00:14:50,410
favorite torsion welcome to build and

00:14:45,640 --> 00:14:53,080
deploy management and using restitch the

00:14:50,410 --> 00:14:55,300
learning curve is I forest actually the

00:14:53,080 --> 00:14:58,830
same thing for surplus press if you want

00:14:55,300 --> 00:15:04,900
to learn super stress but you can be

00:14:58,830 --> 00:15:07,000
more productive using yeah two different

00:15:04,900 --> 00:15:11,230
tools rest up and cargo

00:15:07,000 --> 00:15:14,500
so first cargo is a built-in package

00:15:11,230 --> 00:15:16,450
manager forest and it contain actually

00:15:14,500 --> 00:15:21,400
awesome features compile your program

00:15:16,450 --> 00:15:23,830
check in it run run unit run your unit

00:15:21,400 --> 00:15:26,200
test run your benchmark publish your

00:15:23,830 --> 00:15:30,910
library install in itself wait so

00:15:26,200 --> 00:15:34,660
creates libraries and very Banaras you

00:15:30,910 --> 00:15:39,160
can found on the internet and all of

00:15:34,660 --> 00:15:42,310
that in only one only one configuration

00:15:39,160 --> 00:15:44,980
file so you have a tamil file will

00:15:42,310 --> 00:15:46,600
contain actually so yeah i'm sorry for

00:15:44,980 --> 00:15:49,030
that yeah you have different profile

00:15:46,600 --> 00:15:51,430
profile sorry so you have the profile

00:15:49,030 --> 00:15:55,420
release with optimization level at free

00:15:51,430 --> 00:15:58,240
no debug mode and for the panic it

00:15:55,420 --> 00:16:00,790
except that your your program with panic

00:15:58,240 --> 00:16:02,860
etc and you you can have a different

00:16:00,790 --> 00:16:04,630
profile for your test for your bench for

00:16:02,860 --> 00:16:07,930
your dork etcetera only one

00:16:04,630 --> 00:16:10,600
configuration file and using cargo you

00:16:07,930 --> 00:16:14,650
just for example you you you can have a

00:16:10,600 --> 00:16:17,680
new raster project and cargo run cargo

00:16:14,650 --> 00:16:21,189
builds and yets okay

00:16:17,680 --> 00:16:23,670
but sometimes actually we use we are

00:16:21,189 --> 00:16:24,879
using different version of the compiler

00:16:23,670 --> 00:16:27,790
welcome

00:16:24,879 --> 00:16:31,420
rest up so rest up is a Installer first

00:16:27,790 --> 00:16:33,999
and the many objective in Star Wars from

00:16:31,420 --> 00:16:37,089
the official register channels keep the

00:16:33,999 --> 00:16:39,999
compiler updated making cross compiling

00:16:37,089 --> 00:16:41,949
simpler actually rest up and cargo as a

00:16:39,999 --> 00:16:47,350
best productivity tool if you want

00:16:41,949 --> 00:16:52,779
actually to work in a group on a given

00:16:47,350 --> 00:16:57,779
project and just just talk about that

00:16:52,779 --> 00:17:02,920
which we reached more than 13-thousand

00:16:57,779 --> 00:17:05,799
rust libraries in January and nearly

00:17:02,920 --> 00:17:17,860
free Android my loans don't know the

00:17:05,799 --> 00:17:22,409
libraries in January to so this is a

00:17:17,860 --> 00:17:27,339
picture I take from the rust fest in

00:17:22,409 --> 00:17:31,990
2017 open source is not only code and

00:17:27,339 --> 00:17:34,809
that something we tend to forget open

00:17:31,990 --> 00:17:38,850
source and free actually feel free and

00:17:34,809 --> 00:17:46,299
open source its community its people and

00:17:38,850 --> 00:17:48,010
this is one actually I think I like the

00:17:46,299 --> 00:17:51,340
most actually invest in the community

00:17:48,010 --> 00:17:55,179
the res compiler for now it's 50 release

00:17:51,340 --> 00:17:59,470
but it's more than 2,000 contributors

00:17:55,179 --> 00:18:01,480
and more than seventy seventy four

00:17:59,470 --> 00:18:03,760
thousand commits and the community is

00:18:01,480 --> 00:18:05,380
really open to requests for comments so

00:18:03,760 --> 00:18:07,750
it's not a programming language you know

00:18:05,380 --> 00:18:09,220
that is sponsored by Mozilla and modular

00:18:07,750 --> 00:18:11,169
say yeah okay

00:18:09,220 --> 00:18:14,169
please - please to do that thing

00:18:11,169 --> 00:18:16,450
developers are young actually maybe you

00:18:14,169 --> 00:18:19,179
can take a look at this and developers

00:18:16,450 --> 00:18:21,490
and Magnus said no we will follow mafia

00:18:19,179 --> 00:18:25,720
no rust is really open to the community

00:18:21,490 --> 00:18:28,659
and each developer and sponsor actually

00:18:25,720 --> 00:18:30,060
at the same place there is no someone

00:18:28,659 --> 00:18:33,360
actually that is

00:18:30,060 --> 00:18:36,810
upon decision than any other there is a

00:18:33,360 --> 00:18:40,530
lot of groups meetups in 35 countries

00:18:36,810 --> 00:18:44,880
and if you stay in Europe where is the

00:18:40,530 --> 00:18:52,260
rest rest rest festival and in 2018 it

00:18:44,880 --> 00:18:54,780
will be in Paris so the community

00:18:52,260 --> 00:18:57,150
actually is really loving West and we

00:18:54,780 --> 00:19:00,540
can take a look just at the developers

00:18:57,150 --> 00:19:03,240
away from stock overflow in 2015 so the

00:19:00,540 --> 00:19:06,320
first stable relation rust was the third

00:19:03,240 --> 00:19:10,350
most loved in some statistics

00:19:06,320 --> 00:19:15,770
programming language in 2016 we were

00:19:10,350 --> 00:19:15,770
first and in 2050 17 we were first again

00:19:17,090 --> 00:19:26,700
rest in production so is rest is enough

00:19:24,060 --> 00:19:28,880
stable actually to put some Rosco non

00:19:26,700 --> 00:19:31,050
production and yes there is a lot of

00:19:28,880 --> 00:19:33,630
companies that are using rust in

00:19:31,050 --> 00:19:37,470
production modular OVH

00:19:33,630 --> 00:19:40,650
clever cloud Dropbox or Google and PM

00:19:37,470 --> 00:19:43,790
editor there is more than 100 companies

00:19:40,650 --> 00:19:49,010
that are using Russian production today

00:19:43,790 --> 00:19:53,040
so you can take a look at this website

00:19:49,010 --> 00:19:55,020
it just displays all the all the the

00:19:53,040 --> 00:19:58,970
companies that are using Russian

00:19:55,020 --> 00:20:05,480
production but I just want to focus on

00:19:58,970 --> 00:20:09,810
awesome project built in rest servo so

00:20:05,480 --> 00:20:13,020
servo is a web browser engine actually

00:20:09,810 --> 00:20:16,320
tend to be a prototype and some part of

00:20:13,020 --> 00:20:18,660
fire falls directly like stylo while

00:20:16,320 --> 00:20:21,080
were experimental things on server

00:20:18,660 --> 00:20:23,910
before Firefox

00:20:21,080 --> 00:20:28,800
there is piston piston help you actually

00:20:23,910 --> 00:20:33,150
to build awesome games the zai zai it's

00:20:28,800 --> 00:20:35,150
a project from ji from Google tend to be

00:20:33,150 --> 00:20:39,030
your text editor

00:20:35,150 --> 00:20:41,310
jazel which is a Orin and ways my

00:20:39,030 --> 00:20:43,060
actually it's my favorite project Redux

00:20:41,310 --> 00:20:45,340
the redox operating system

00:20:43,060 --> 00:20:47,830
it's a full feature operating system

00:20:45,340 --> 00:20:51,070
right and in rest it's not only a camera

00:20:47,830 --> 00:20:54,880
it's a full feature operating system the

00:20:51,070 --> 00:21:00,040
project is really really huge it works

00:20:54,880 --> 00:21:02,320
very well and yeah if you are if you are

00:21:00,040 --> 00:21:05,260
looking for something that you know la

00:21:02,320 --> 00:21:08,200
la ville and you are interested in

00:21:05,260 --> 00:21:11,650
operating system radix is definitely one

00:21:08,200 --> 00:21:18,670
of the project you must be interested so

00:21:11,650 --> 00:21:21,550
most so to-do lists based on cons

00:21:18,670 --> 00:21:24,190
actually today using rest and the first

00:21:21,550 --> 00:21:26,260
one actually is the learning curve rest

00:21:24,190 --> 00:21:28,960
introduced new concept new programming

00:21:26,260 --> 00:21:31,570
concept and the advantage of that is

00:21:28,960 --> 00:21:33,760
that after rest actually you have a

00:21:31,570 --> 00:21:37,690
better programming because you when you

00:21:33,760 --> 00:21:41,200
are switching from C C++ you say yeah

00:21:37,690 --> 00:21:45,790
okay but I don't want to do that or yeah

00:21:41,200 --> 00:21:50,530
you have better actually software yes of

00:21:45,790 --> 00:21:53,800
the management and rests in 2018 will

00:21:50,530 --> 00:21:58,350
introduce some new ways actually to

00:21:53,800 --> 00:22:01,450
reduce the learning curve to learn rest

00:21:58,350 --> 00:22:04,300
connect an emperor Russ global community

00:22:01,450 --> 00:22:08,530
and they will focus on web service web

00:22:04,300 --> 00:22:11,140
assembly CLI apps and embed embedded

00:22:08,530 --> 00:22:17,410
yeah and better yeah embedded devices

00:22:11,140 --> 00:22:21,700
and I I put actually we care about your

00:22:17,410 --> 00:22:25,240
request because rest 2018 roadmap is

00:22:21,700 --> 00:22:29,020
actually a full list of what developers

00:22:25,240 --> 00:22:32,910
want the most actually in rest and in

00:22:29,020 --> 00:22:35,890
this year so typically this requests is

00:22:32,910 --> 00:22:38,200
for me a great message that yes the

00:22:35,890 --> 00:22:40,540
committee is huge and we care about your

00:22:38,200 --> 00:22:42,340
request and we were we will do actually

00:22:40,540 --> 00:22:48,190
what to want the most for this

00:22:42,340 --> 00:22:51,670
programming language so okay thank you

00:22:48,190 --> 00:22:55,340
sorry for the lag sorry for my stress I

00:22:51,670 --> 00:22:58,130
was very appear to need to

00:22:55,340 --> 00:23:01,450
to make this talk because it's my first

00:22:58,130 --> 00:23:05,930
year in for them it's my first talk and

00:23:01,450 --> 00:23:07,790
I'm really happy to talk about for me

00:23:05,930 --> 00:23:10,760
one of the best programming language

00:23:07,790 --> 00:23:13,960
that have ever been created

00:23:10,760 --> 00:23:16,640
since last yeah ten years and for the

00:23:13,960 --> 00:23:19,340
next ten years so if you want to take a

00:23:16,640 --> 00:23:21,950
look at rest and actually you should

00:23:19,340 --> 00:23:25,160
take a look at rest where's the rest of

00:23:21,950 --> 00:23:28,880
your website the rest book HD forum and

00:23:25,160 --> 00:23:30,920
slack if you want to to talk a little

00:23:28,880 --> 00:24:07,790
more about this wonderful programming

00:23:30,920 --> 00:24:12,920
language thank you yeah oh sorry

00:24:07,790 --> 00:24:15,310
so Russ is a system programming language

00:24:12,920 --> 00:24:17,620
but do people actually are using it for

00:24:15,310 --> 00:24:22,520
applications like games and Sophia that

00:24:17,620 --> 00:24:26,420
yeah so definitely yes very some Korean

00:24:22,520 --> 00:24:29,210
talk about a programming language I love

00:24:26,420 --> 00:24:33,800
all applications using rest this is

00:24:29,210 --> 00:24:36,050
definitely actually one of the 2018 to

00:24:33,800 --> 00:24:40,700
do in the to-do list you know in CLI

00:24:36,050 --> 00:24:44,710
apps and various bastogne for games for

00:24:40,700 --> 00:24:48,200
example there is something like that but

00:24:44,710 --> 00:24:49,760
since the respect um in language

00:24:48,200 --> 00:24:53,420
actually has been developed actually for

00:24:49,760 --> 00:24:55,220
systems and you can just if you take a

00:24:53,420 --> 00:24:58,940
look at the syntax is very similar to

00:24:55,220 --> 00:25:00,980
C++ for example and not very similar for

00:24:58,940 --> 00:25:05,140
it's very verbose actually if you want

00:25:00,980 --> 00:25:07,760
to to to to just to write high level

00:25:05,140 --> 00:25:08,960
applications so the community is working

00:25:07,760 --> 00:25:12,350
on that just to read

00:25:08,960 --> 00:25:15,799
use the syntax for example I had to let

00:25:12,350 --> 00:25:19,610
the compiler make something instead of a

00:25:15,799 --> 00:25:22,610
few oh it's definitely something that is

00:25:19,610 --> 00:25:26,149
happening but for now in my opinion it's

00:25:22,610 --> 00:25:30,720
chiller system programming language but

00:25:26,149 --> 00:25:36,289
it's my opinion thank you

00:25:30,720 --> 00:25:36,289

YouTube URL: https://www.youtube.com/watch?v=Fn0TZCt_Fno


