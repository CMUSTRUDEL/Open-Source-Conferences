Title: Guillaume Gomez - Introducing gtk-rs
Publication date: 2018-02-06
Playlist: FOSDEM Rust Devroom 2018
Description: 
	Making the unsafe safe

The goal of this talk is to provide an introduction to the gtk bindings in Rust through the gtk-rs organization. It'll be mainly about how we made it and how we keep making it better.

Rust devroom @ FOSDEM 2018
https://fosdem.org/2018/schedule/event/rust_gtk_rs/

These talks have been recorded at FOSDEM (https://fosdem.org/)
This work is licensed under the Creative Commons Attribution 2.0 Belgium Licence.
To view a copy of this licence, visit http://creativecommons.org/licenses/by/2.0/be/deed.en
Captions: 
	00:00:05,779 --> 00:00:11,960
we are ready to start our next speaker

00:00:09,000 --> 00:00:11,960
is young

00:00:17,270 --> 00:00:24,960
so hi I'm here to present you a GT k RS

00:00:21,990 --> 00:00:27,000
it won't be a technical speak at all so

00:00:24,960 --> 00:00:28,470
if you have technical questions we can

00:00:27,000 --> 00:00:31,640
speak after the talk

00:00:28,470 --> 00:00:35,309
so duty cares how to make unsafely

00:00:31,640 --> 00:00:37,680
so first what is duty k so it's a good

00:00:35,309 --> 00:00:41,010
Nam UI your library where we were used

00:00:37,680 --> 00:00:43,559
in the UNIX environments so

00:00:41,010 --> 00:00:46,620
cross-platform it works as well on the

00:00:43,559 --> 00:00:50,670
Mac and as far as I know it works as

00:00:46,620 --> 00:00:51,829
we're on Windows fine so a bit of

00:00:50,670 --> 00:00:55,140
history

00:00:51,829 --> 00:00:59,070
at first it was started by a very merry

00:00:55,140 --> 00:01:02,730
are Letang in 2015 it was when we were

00:00:59,070 --> 00:01:06,119
both office in still at school we

00:01:02,730 --> 00:01:09,930
started it to learn a rest so first it

00:01:06,119 --> 00:01:12,570
was called gtk and we have a sub crates

00:01:09,930 --> 00:01:15,360
for each glom library like a Jo

00:01:12,570 --> 00:01:19,580
jellyband stuff it was all in the same

00:01:15,360 --> 00:01:22,740
repository at the opposite of currently

00:01:19,580 --> 00:01:24,959
so the first implementation was very

00:01:22,740 --> 00:01:27,899
simple it was a one to one binding so

00:01:24,959 --> 00:01:31,039
you had a function and object it was the

00:01:27,899 --> 00:01:36,149
same interest so not much of entities

00:01:31,039 --> 00:01:39,479
but you could use the gtk interest so

00:01:36,149 --> 00:01:41,880
now the comes so yeah it was at the time

00:01:39,479 --> 00:01:46,080
very slow to compile we were still in

00:01:41,880 --> 00:01:50,039
2015 it wasn't that we had a huge macro

00:01:46,080 --> 00:01:54,270
to generate our signals wasn't very very

00:01:50,039 --> 00:01:58,500
efficient so so since it was bound by

00:01:54,270 --> 00:01:58,979
him a lot of typos human errors were

00:01:58,500 --> 00:02:02,880
there

00:01:58,979 --> 00:02:05,399
casting errors yeah just like I said it

00:02:02,880 --> 00:02:06,780
was just a wrapper around the C code

00:02:05,399 --> 00:02:09,599
just one to one

00:02:06,780 --> 00:02:13,410
not much safety and at the time the

00:02:09,599 --> 00:02:15,810
compiler was getting updated and having

00:02:13,410 --> 00:02:18,360
breaking changes like every two or three

00:02:15,810 --> 00:02:21,480
days or so changing the child

00:02:18,360 --> 00:02:28,129
thousands of lines at once was quite

00:02:21,480 --> 00:02:31,849
long for a library as this big so that's

00:02:28,129 --> 00:02:34,700
I think it was at the start of 2016 we

00:02:31,849 --> 00:02:37,610
had a new contributor we brought the

00:02:34,700 --> 00:02:39,980
gear support some gear is a format which

00:02:37,610 --> 00:02:43,670
is used by the genome libraries to

00:02:39,980 --> 00:02:46,549
describe the API and is used by other

00:02:43,670 --> 00:02:50,150
languages to generate as our binding and

00:02:46,549 --> 00:02:54,500
that's what we did investor with a whole

00:02:50,150 --> 00:02:57,590
new create gear which generates all the

00:02:54,500 --> 00:03:01,819
code so that's the first thing we did we

00:02:57,590 --> 00:03:05,269
also reworked all the GD p-- how to

00:03:01,819 --> 00:03:07,430
explain the g lib is the base and we had

00:03:05,269 --> 00:03:12,560
to rewrite it in order to make it work

00:03:07,430 --> 00:03:15,049
to build upon it that's it thought and

00:03:12,560 --> 00:03:18,530
so we did that we have we could bring a

00:03:15,049 --> 00:03:21,409
whole new rating system so now you can

00:03:18,530 --> 00:03:25,040
say if a tray if an object inherits from

00:03:21,409 --> 00:03:27,310
another very helpful it was a prevents a

00:03:25,040 --> 00:03:31,400
from a casting from a type to another

00:03:27,310 --> 00:03:33,829
so zit and another thing which I think

00:03:31,400 --> 00:03:37,160
it's still a bit of a debate but we

00:03:33,829 --> 00:03:39,919
decided to split libraries into is their

00:03:37,160 --> 00:03:42,109
own repository so now Jacob isn't in GT

00:03:39,919 --> 00:03:43,810
Kelley repository anymore it's the same

00:03:42,109 --> 00:03:48,010
organization but not the same repository

00:03:43,810 --> 00:03:52,639
which has its issues for every read

00:03:48,010 --> 00:03:57,079
that's a bit so the neutral system is

00:03:52,639 --> 00:03:59,829
basically based on this one is earth so

00:03:57,079 --> 00:04:04,400
now when you have a function for example

00:03:59,829 --> 00:04:07,669
for the widget you take is a widget so

00:04:04,400 --> 00:04:11,919
every object which implements this trait

00:04:07,669 --> 00:04:11,919
can use the videos the in this function

00:04:11,949 --> 00:04:20,389
so now why is it better to use gtk RS /

00:04:16,760 --> 00:04:22,970
g TK directly for a few things so like

00:04:20,389 --> 00:04:28,070
it's wrote on let's start with compiler

00:04:22,970 --> 00:04:30,680
errors type conversions so in c you can

00:04:28,070 --> 00:04:33,289
totally do that it's not a program will

00:04:30,680 --> 00:04:37,430
not much checks in Resta you will do it

00:04:33,289 --> 00:04:40,520
with by using the Abkhaz metal it's a

00:04:37,430 --> 00:04:40,880
big difference being your work at this

00:04:40,520 --> 00:04:43,100
point

00:04:40,880 --> 00:04:45,290
there isn't much it suggested in rester

00:04:43,100 --> 00:04:49,820
we have her checks have done at compile

00:04:45,290 --> 00:04:53,030
time so here if you try to make an

00:04:49,820 --> 00:04:56,990
invalid cast it will just set fault when

00:04:53,030 --> 00:04:59,540
you run it so it's inconvenient to

00:04:56,990 --> 00:05:01,940
discover there is an error in your code

00:04:59,540 --> 00:05:05,180
after being compiled when distributed

00:05:01,940 --> 00:05:07,550
and in rest if you trace the same just

00:05:05,180 --> 00:05:09,200
in the type which isn't the children of

00:05:07,550 --> 00:05:10,940
a window for example a button is the

00:05:09,200 --> 00:05:12,890
children of a widget but there isn't a

00:05:10,940 --> 00:05:14,780
bit children of a window if you try it

00:05:12,890 --> 00:05:17,270
you won't compile you will get an error

00:05:14,780 --> 00:05:22,490
so so trait isn't implemented therefore

00:05:17,270 --> 00:05:25,130
gtk button it's quite convenient so yeah

00:05:22,490 --> 00:05:28,600
another advantage of course is a cut the

00:05:25,130 --> 00:05:31,880
readability so I didn't see very verbose

00:05:28,600 --> 00:05:35,390
in rest a bit less it's the advantage of

00:05:31,880 --> 00:05:41,390
object-oriented languages not to sell

00:05:35,390 --> 00:05:43,900
you in here so summers are games so they

00:05:41,390 --> 00:05:46,400
are quite a lot brought by rested jackie

00:05:43,900 --> 00:05:48,770
automatic responding and memory

00:05:46,400 --> 00:05:51,800
management brought by the rest compiler

00:05:48,770 --> 00:05:53,630
or directly the same consentrate bonds

00:05:51,800 --> 00:05:56,270
which are used for signals for example

00:05:53,630 --> 00:05:58,370
so like that you're surely object won't

00:05:56,270 --> 00:06:02,740
be destroyed and curl the while being

00:05:58,370 --> 00:06:06,440
the after been destroyed make sense and

00:06:02,740 --> 00:06:09,380
we enforce attack when we generate the

00:06:06,440 --> 00:06:12,110
zi api that if you want a string or path

00:06:09,380 --> 00:06:15,920
which is very convenient when you have

00:06:12,110 --> 00:06:19,190
to to open a file to specify the title

00:06:15,920 --> 00:06:25,010
to be sure you won't try to do something

00:06:19,190 --> 00:06:27,640
strange at best so like i said above

00:06:25,010 --> 00:06:28,820
everything related to crucial so

00:06:27,640 --> 00:06:33,950
signore's

00:06:28,820 --> 00:06:36,620
core bags everything so yeah some buds

00:06:33,950 --> 00:06:40,040
are gangs of course now you can't have

00:06:36,620 --> 00:06:43,040
arrays which have invalid size you can't

00:06:40,040 --> 00:06:44,450
forgive we don't allow to give a size of

00:06:43,040 --> 00:06:48,020
an array when you give it a to a

00:06:44,450 --> 00:06:50,030
function it's a done an array is a 5

00:06:48,020 --> 00:06:52,970
pointer so you have it's a Lancer

00:06:50,030 --> 00:06:53,420
provided by the type a directly so no

00:06:52,970 --> 00:06:56,000
need

00:06:53,420 --> 00:06:59,600
give the size anymore very convenient

00:06:56,000 --> 00:07:01,490
and 402 have a lot less error and of

00:06:59,600 --> 00:07:03,860
course is a strong type system which is

00:07:01,490 --> 00:07:06,920
one of the biggest advantage of Resta so

00:07:03,860 --> 00:07:07,580
you can't make a cast whether however

00:07:06,920 --> 00:07:12,050
you want

00:07:07,580 --> 00:07:13,400
just watch the function in it now at

00:07:12,050 --> 00:07:17,810
this point to what remains to be done

00:07:13,400 --> 00:07:20,540
well I think we are around 90% of

00:07:17,810 --> 00:07:23,900
bindings automatically are generated and

00:07:20,540 --> 00:07:28,190
the most of missing functionality is

00:07:23,900 --> 00:07:31,520
functions objects are clearly in jio so

00:07:28,190 --> 00:07:34,250
I'm starting to write new things in it

00:07:31,520 --> 00:07:37,430
directly we'll see how much time it

00:07:34,250 --> 00:07:41,570
takes hopefully a few months no yet

00:07:37,430 --> 00:07:44,540
we started recently at the last egg

00:07:41,570 --> 00:07:48,140
nominal rest a quest to improve the a

00:07:44,540 --> 00:07:50,900
synchronous report which is a very aster

00:07:48,140 --> 00:07:53,120
by a few people so it's coming and of

00:07:50,900 --> 00:07:57,170
course from now the documentation is

00:07:53,120 --> 00:08:00,560
generated at the same time as the API so

00:07:57,170 --> 00:08:03,890
we directly have a C documentation not

00:08:00,560 --> 00:08:07,430
restaurant so examples are it see a few

00:08:03,890 --> 00:08:10,220
a lot of things unperfect we have still

00:08:07,430 --> 00:08:13,040
a lot of work to do in either so it will

00:08:10,220 --> 00:08:17,480
be the next step I think and we are done

00:08:13,040 --> 00:08:21,620
with the beginning so beyond the dirs

00:08:17,480 --> 00:08:25,250
so we had a few people from the genome

00:08:21,620 --> 00:08:28,160
community very interesting interest we

00:08:25,250 --> 00:08:31,250
started a few a quest last year about

00:08:28,160 --> 00:08:35,000
this to write a Signum class project for

00:08:31,250 --> 00:08:40,700
example we have the previous talker is

00:08:35,000 --> 00:08:43,910
from a genome and yeah Heidi there is a

00:08:40,700 --> 00:08:47,150
Federico a big guy in agronomy which is

00:08:43,910 --> 00:08:50,300
rewriting a library liber SVG invested

00:08:47,150 --> 00:08:54,620
directly you think that's because of him

00:08:50,300 --> 00:08:56,120
we started the thing it was for this and

00:08:54,620 --> 00:08:58,370
of course yeah we have a log number

00:08:56,120 --> 00:08:59,420
libraries which start to have a binding

00:08:58,370 --> 00:09:03,410
so just Rimmer

00:08:59,420 --> 00:09:07,100
from I don't know where he is but yeah

00:09:03,410 --> 00:09:10,430
we have a web key to gtk and the search

00:09:07,100 --> 00:09:12,500
view and a lot more so as long as it has

00:09:10,430 --> 00:09:15,560
a gear file basically you can generate

00:09:12,500 --> 00:09:17,770
it by automatically I don't know how it

00:09:15,560 --> 00:09:20,380
goes for GStreamer I think it's mostly

00:09:17,770 --> 00:09:26,630
Road by hand

00:09:20,380 --> 00:09:29,000
so now we have achieve a good level I

00:09:26,630 --> 00:09:32,930
think at this point I would not miss

00:09:29,000 --> 00:09:35,839
much we are on little details now having

00:09:32,930 --> 00:09:37,610
a duplication having you more drugs have

00:09:35,839 --> 00:09:40,540
been you better interphase better early

00:09:37,610 --> 00:09:46,010
world and at this point how we could we

00:09:40,540 --> 00:09:48,080
do to make it even better and Ranma has

00:09:46,010 --> 00:09:50,330
been a created for that

00:09:48,080 --> 00:09:53,870
it's a another abstraction another so I

00:09:50,330 --> 00:09:56,890
will let its creator speak for it so I

00:09:53,870 --> 00:09:56,890
have not so Mike

00:10:04,640 --> 00:10:11,070
so as Jung said realm is an obstruction

00:10:08,550 --> 00:10:13,110
over GTRs which provides a more

00:10:11,070 --> 00:10:16,020
idiomatic way to create desktop

00:10:13,110 --> 00:10:18,150
application in rust and it is based on

00:10:16,020 --> 00:10:22,680
GTRs and it also provides some support

00:10:18,150 --> 00:10:26,100
for asynchronous programming so first

00:10:22,680 --> 00:10:29,100
I'll cover some pain points I had when

00:10:26,100 --> 00:10:32,370
working with gdj RS by developing a web

00:10:29,100 --> 00:10:35,010
browser so the first problem I had is

00:10:32,370 --> 00:10:38,430
when you want to associate some data

00:10:35,010 --> 00:10:40,890
with a widget let's say you the model of

00:10:38,430 --> 00:10:45,090
your application when you want to do

00:10:40,890 --> 00:10:48,810
that with GTRs because of the safety we

00:10:45,090 --> 00:10:51,780
had in rust we need to use an RC ref saw

00:10:48,810 --> 00:10:55,140
so we have a ref content value that we

00:10:51,780 --> 00:10:59,130
want to check the be able to borrow a

00:10:55,140 --> 00:11:01,380
check the burrow at runtime so we need

00:10:59,130 --> 00:11:04,350
to use this boilerplate code with virome

00:11:01,380 --> 00:11:06,150
attenborough when we want to update the

00:11:04,350 --> 00:11:08,610
model in a signal which is something we

00:11:06,150 --> 00:11:10,890
want to do somewhat frequently in geo

00:11:08,610 --> 00:11:12,630
applications so that's never gonna make

00:11:10,890 --> 00:11:15,090
its a row prone because we only get the

00:11:12,630 --> 00:11:18,720
error at runtime instead of at compile

00:11:15,090 --> 00:11:20,670
time so one thing I wanted to tell you

00:11:18,720 --> 00:11:23,190
that if you can avoid using ref though

00:11:20,670 --> 00:11:27,240
it's a good it's a good thing to avoid

00:11:23,190 --> 00:11:31,830
and what I do and well is that I use a

00:11:27,240 --> 00:11:35,310
ref cell but I'm just not telling you so

00:11:31,830 --> 00:11:38,300
also you can do asynchronous programming

00:11:35,310 --> 00:11:40,590
with jellyband stuff but it's not very

00:11:38,300 --> 00:11:42,780
ergonomic and I wanted to integrate

00:11:40,590 --> 00:11:47,820
realm with the a synchronous i/o library

00:11:42,780 --> 00:11:50,190
universe which is Tokyo and also since

00:11:47,820 --> 00:11:51,930
Russ does not provide inheritance you

00:11:50,190 --> 00:11:54,330
cannot do for instance like invalidate

00:11:51,930 --> 00:11:57,840
our new class deriving from an existing

00:11:54,330 --> 00:12:00,060
widget to be able to use this new widget

00:11:57,840 --> 00:12:03,360
like any other widgets so that's not

00:12:00,060 --> 00:12:06,450
possible in rust so I wanted to which

00:12:03,360 --> 00:12:08,100
realm be able to destroy new widgets

00:12:06,450 --> 00:12:13,080
that could be used the same way as the

00:12:08,100 --> 00:12:14,790
gtk widgets so realm is inspired by a

00:12:13,080 --> 00:12:17,190
language that is called M

00:12:14,790 --> 00:12:19,290
that is used for developing client-side

00:12:17,190 --> 00:12:21,270
application so Elm is an alternative to

00:12:19,290 --> 00:12:23,490
JavaScript I found out it provides a

00:12:21,270 --> 00:12:26,970
good way to you a Duhamel view

00:12:23,490 --> 00:12:31,200
controller so that's my - inspiration

00:12:26,970 --> 00:12:32,790
for realm so in annual dictionary model

00:12:31,200 --> 00:12:34,950
which is the data that you associate

00:12:32,790 --> 00:12:36,570
with a view and you have an update

00:12:34,950 --> 00:12:39,090
function that would take the model in

00:12:36,570 --> 00:12:42,030
response to some event and return the

00:12:39,090 --> 00:12:46,080
new model and you also have a view

00:12:42,030 --> 00:12:50,640
function that describes your view in a

00:12:46,080 --> 00:12:53,640
declarative way in realm I use that but

00:12:50,640 --> 00:12:55,470
I adapted it to Russ so for instance

00:12:53,640 --> 00:12:58,290
update and you are not married of a

00:12:55,470 --> 00:13:00,600
widget right and we use mutation when

00:12:58,290 --> 00:13:02,730
it's convenient for instance the update

00:13:00,600 --> 00:13:05,280
method will take self a reference that

00:13:02,730 --> 00:13:09,420
we can mutate the model instead of

00:13:05,280 --> 00:13:12,120
having to return a new model so let's

00:13:09,420 --> 00:13:14,970
see how we can use run first we need to

00:13:12,120 --> 00:13:17,520
declare a model which is a normal type

00:13:14,970 --> 00:13:20,180
in a row so it could be a struct and

00:13:17,520 --> 00:13:23,220
then we use this widget attribute an

00:13:20,180 --> 00:13:26,160
info of widget which is the trait we

00:13:23,220 --> 00:13:27,720
want to implement and for a window in

00:13:26,160 --> 00:13:31,020
this case which will create a window so

00:13:27,720 --> 00:13:33,330
we need first the model meadow which

00:13:31,020 --> 00:13:37,380
declared the initial model of your

00:13:33,330 --> 00:13:40,230
widget and then we have messages that

00:13:37,380 --> 00:13:42,390
are used to communicate for instance

00:13:40,230 --> 00:13:44,940
between widgets or having a message

00:13:42,390 --> 00:13:47,190
hanwen there's an gtk event and you can

00:13:44,940 --> 00:13:48,510
also be used when there's a synchronous

00:13:47,190 --> 00:13:50,760
i/o so for instance you do a network

00:13:48,510 --> 00:13:54,180
request and when it's done you receive a

00:13:50,760 --> 00:13:56,190
message so we use the derive while the

00:13:54,180 --> 00:13:58,890
custom derived message and we have an

00:13:56,190 --> 00:14:03,780
enum which has many variants that can

00:13:58,890 --> 00:14:06,960
have a value and then we have the view

00:14:03,780 --> 00:14:09,540
so it's still in the Ambala yet and we

00:14:06,960 --> 00:14:12,330
use the view macro and we now have the

00:14:09,540 --> 00:14:15,690
this declarative syntax so we can create

00:14:12,330 --> 00:14:18,930
gtk widgets and nest them and also set

00:14:15,690 --> 00:14:21,210
their properties we can connect the

00:14:18,930 --> 00:14:23,670
clicker and for instance which will send

00:14:21,210 --> 00:14:27,810
the increment message in this case and

00:14:23,670 --> 00:14:31,350
we can also do bindings meaning that a

00:14:27,810 --> 00:14:33,930
last line we have the text property the

00:14:31,350 --> 00:14:35,939
of the label it is bound to an attribute

00:14:33,930 --> 00:14:38,730
of the model so that means that whenever

00:14:35,939 --> 00:14:44,639
this attribute of the model is change

00:14:38,730 --> 00:14:47,430
that will update the view and then we

00:14:44,639 --> 00:14:49,379
have this update method so it takes self

00:14:47,430 --> 00:14:52,379
by mutable reference which has access to

00:14:49,379 --> 00:14:54,689
the model that we can modify when we

00:14:52,379 --> 00:14:56,670
receive a message so in this case when

00:14:54,689 --> 00:15:00,029
we receive the decrement message we just

00:14:56,670 --> 00:15:02,279
change a counter attribute of the model

00:15:00,029 --> 00:15:06,600
and that will actually update the view

00:15:02,279 --> 00:15:09,230
even though it's not shown here so how

00:15:06,600 --> 00:15:12,269
does all of that work

00:15:09,230 --> 00:15:14,430
so the widget attribute will start by

00:15:12,269 --> 00:15:16,529
collecting the data binding so it will

00:15:14,430 --> 00:15:19,079
analyze the view check that in this case

00:15:16,529 --> 00:15:22,199
the label has a property that is called

00:15:19,079 --> 00:15:24,480
text that is bound to the contrary root

00:15:22,199 --> 00:15:27,029
of the model and then it will actually

00:15:24,480 --> 00:15:30,149
change the code you write you wrote in

00:15:27,029 --> 00:15:33,300
the Med update metal to actually update

00:15:30,149 --> 00:15:36,209
the view so it will see here that the

00:15:33,300 --> 00:15:38,610
counter attribute was changed and it

00:15:36,209 --> 00:15:41,490
will use this value to update the view

00:15:38,610 --> 00:15:47,449
because it noticed that there was a

00:15:41,490 --> 00:15:50,579
bending in the view so even though I use

00:15:47,449 --> 00:15:54,829
attributes ran can work on stable rows

00:15:50,579 --> 00:15:58,350
because I used a hack to have the

00:15:54,829 --> 00:16:01,529
procedure on macro to work and the

00:15:58,350 --> 00:16:04,920
future of run will may be without

00:16:01,529 --> 00:16:07,319
futures also I will work to improve the

00:16:04,920 --> 00:16:10,800
error messages because at the time I

00:16:07,319 --> 00:16:14,100
first started run it was using the old

00:16:10,800 --> 00:16:15,689
sink right so we didn't have access to

00:16:14,100 --> 00:16:17,430
the position of the tag and so that's

00:16:15,689 --> 00:16:19,829
why when you have an error message it's

00:16:17,430 --> 00:16:22,439
shown on the widget attribute which is

00:16:19,829 --> 00:16:26,639
not convenient and I will support more

00:16:22,439 --> 00:16:31,040
agility features so do you have any

00:16:26,639 --> 00:16:31,040
questions yes

00:16:38,910 --> 00:16:54,970
sorry so the question is take this one

00:16:51,779 --> 00:16:57,519
so the question is how does rested

00:16:54,970 --> 00:17:02,529
checks the lens of arrays at compute

00:16:57,519 --> 00:17:06,220
signed its slice it's basically an array

00:17:02,529 --> 00:17:08,829
in rest is a slice so in the type you

00:17:06,220 --> 00:17:11,350
have the pointer where it starts and you

00:17:08,829 --> 00:17:14,379
have its length in the same point it's

00:17:11,350 --> 00:17:17,860
what we call at pointers five pointer so

00:17:14,379 --> 00:17:21,370
when you give it to a function we when

00:17:17,860 --> 00:17:23,500
we generate a ricotta we we we just know

00:17:21,370 --> 00:17:26,259
the size of the slice you can't treat

00:17:23,500 --> 00:17:29,830
you when you create a slice you know its

00:17:26,259 --> 00:17:32,679
size you can't it's constant so when you

00:17:29,830 --> 00:17:35,950
pass it to a function obviously you know

00:17:32,679 --> 00:17:41,669
see its size and we can give it to the

00:17:35,950 --> 00:17:44,669
do decay function is it other question

00:17:41,669 --> 00:17:44,669
yes

00:17:54,630 --> 00:18:03,429
so the question is do i Anton the NGO -

00:17:58,860 --> 00:18:09,250
instead - to use the Tokyo for I think

00:18:03,429 --> 00:18:12,400
that's it what yeah futures so I don't

00:18:09,250 --> 00:18:16,299
really know for instance with Anthony

00:18:12,400 --> 00:18:19,990
with Stark a lot about how to do a

00:18:16,299 --> 00:18:24,070
synchronous stuff and I think he will be

00:18:19,990 --> 00:18:26,470
the best one so this one actually yes in

00:18:24,070 --> 00:18:29,919
the heck fest we had I implemented the

00:18:26,470 --> 00:18:31,630
code generator the stuff to generate the

00:18:29,919 --> 00:18:33,940
a synchronous method and for now it's

00:18:31,630 --> 00:18:36,400
just working with callback so for now

00:18:33,940 --> 00:18:37,809
there's no support for features that but

00:18:36,400 --> 00:18:40,679
that may be added in the future

00:18:37,809 --> 00:18:40,679
no pun intended

00:19:06,279 --> 00:19:15,020
so the question the question is for

00:19:10,270 --> 00:19:16,760
Jared generator for now he asked if we

00:19:15,020 --> 00:19:18,710
intended to make it a simpler because

00:19:16,760 --> 00:19:22,010
yeah I didn't talk about that so I will

00:19:18,710 --> 00:19:26,990
go into details a bit the gear generator

00:19:22,010 --> 00:19:28,880
first generate low level API which isn't

00:19:26,990 --> 00:19:32,149
supposed to be used directly by the

00:19:28,880 --> 00:19:34,340
users and then from this it's just right

00:19:32,149 --> 00:19:36,529
to the function the from and all the

00:19:34,340 --> 00:19:40,730
times the types from the library and

00:19:36,529 --> 00:19:42,440
from this you can how to say we have a

00:19:40,730 --> 00:19:45,740
new serve level which is used directly

00:19:42,440 --> 00:19:51,169
and it provides the API which causes the

00:19:45,740 --> 00:19:53,179
functions are bound by the role of it so

00:19:51,169 --> 00:19:54,919
at this point yeah it's a bit

00:19:53,179 --> 00:19:57,049
complicated if you don't know how gear

00:19:54,919 --> 00:20:00,320
works well even if you know it's a bit

00:19:57,049 --> 00:20:03,169
so we in turn the in the few more weeks

00:20:00,320 --> 00:20:05,659
to make something better but it's more

00:20:03,169 --> 00:20:08,779
like when we have a new someone new

00:20:05,659 --> 00:20:11,659
starting a new library using the idea we

00:20:08,779 --> 00:20:14,590
take what it says is missing so that's

00:20:11,659 --> 00:20:18,169
why we wrote this huge readme file and

00:20:14,590 --> 00:20:20,179
then we add the new elements and maybe

00:20:18,169 --> 00:20:23,840
or someday I will write a guide or

00:20:20,179 --> 00:20:25,669
something in order to avoid to just a

00:20:23,840 --> 00:20:28,690
lot more people to have their own

00:20:25,669 --> 00:20:28,690
libraries if they want

00:20:31,560 --> 00:20:36,370
[Applause]

00:20:34,310 --> 00:20:36,370

YouTube URL: https://www.youtube.com/watch?v=WtnntRAlo40


