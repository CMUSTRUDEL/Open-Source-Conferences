Title: Closing Panel Discussion
Publication date: 2016-06-17
Playlist: Scala Days New York 2016
Description: 
	This talk was recorded at Scala Days New York, 2016. Follow along on Twitter @scaladays and on the website for more information http://scaladays.org/.
Captions: 
	00:00:00,000 --> 00:00:05,370
welcome everybody thanks for joining us

00:00:02,520 --> 00:00:09,740
for the traditional Scala day's closing

00:00:05,370 --> 00:00:12,360
panel it's actually more of a Q&A

00:00:09,740 --> 00:00:15,480
because we have nothing for you if you

00:00:12,360 --> 00:00:17,880
don't have anything from I mean I could

00:00:15,480 --> 00:00:20,460
I can probably ran for a while but I'd

00:00:17,880 --> 00:00:22,050
much rather take your questions so I'm

00:00:20,460 --> 00:00:25,800
sure those of you who've attended before

00:00:22,050 --> 00:00:28,680
have your lists ready I'm told there

00:00:25,800 --> 00:00:30,119
will be Mike's available I can kind of

00:00:28,680 --> 00:00:32,309
see a couple rows and I think it'll be

00:00:30,119 --> 00:00:33,630
the same for the other people here with

00:00:32,309 --> 00:00:35,820
the lights set up the way they are we

00:00:33,630 --> 00:00:39,239
can't really see you I'm assuming you

00:00:35,820 --> 00:00:40,829
can see us maybe we'll do a quick round

00:00:39,239 --> 00:00:43,500
of introductions before we get started

00:00:40,829 --> 00:00:51,239
so you can you know get your questions

00:00:43,500 --> 00:00:53,489
ready so I'm i'll be on Morse this is

00:00:51,239 --> 00:00:56,460
kind of like a hybrid pronunciation for

00:00:53,489 --> 00:01:00,329
the dutch first name and english version

00:00:56,460 --> 00:01:04,159
of my last name I've been working on

00:01:00,329 --> 00:01:06,530
scale for about getting on to 10 years

00:01:04,159 --> 00:01:13,850
originally did the higher kinda types

00:01:06,530 --> 00:01:16,590
that you've all come to love uh I'm sure

00:01:13,850 --> 00:01:20,060
and yeah I've been I've been basically

00:01:16,590 --> 00:01:24,420
working on Scala since then since 2007

00:01:20,060 --> 00:01:30,090
for the last three years at typesafe

00:01:24,420 --> 00:01:31,860
light Bend and so I'll also introduce

00:01:30,090 --> 00:01:33,270
the people who aren't here today on the

00:01:31,860 --> 00:01:34,290
on the scale team at light Bend because

00:01:33,270 --> 00:01:35,700
it's kind of tricky for them to

00:01:34,290 --> 00:01:39,000
introduce themselves while not being

00:01:35,700 --> 00:01:41,310
here so we have Jason Zog and Lucas Ritz

00:01:39,000 --> 00:01:44,100
who both send their regards and their

00:01:41,310 --> 00:01:45,360
regrets they will be in Berlin but it

00:01:44,100 --> 00:01:48,630
was a little bit of a trek for them to

00:01:45,360 --> 00:01:50,189
make it here but so I'll let the other

00:01:48,630 --> 00:01:53,340
members from the team that light been

00:01:50,189 --> 00:01:55,320
introduced themselves later but just

00:01:53,340 --> 00:01:58,320
want to make sure that their names were

00:01:55,320 --> 00:02:01,979
mentioned so um I kind of skipped

00:01:58,320 --> 00:02:03,030
Heather but you're gonna get a mic now

00:02:01,979 --> 00:02:06,960
so you better be ready to introduce

00:02:03,030 --> 00:02:11,760
yourself well um so as Adrian might have

00:02:06,960 --> 00:02:12,900
eluded my name is Heather oh no no my

00:02:11,760 --> 00:02:14,310
name is Heather Miller

00:02:12,900 --> 00:02:17,579
I'm the executive director of the Scala

00:02:14,310 --> 00:02:19,829
center at EPFL I've not been hacking on

00:02:17,579 --> 00:02:21,900
Scala as long as adrian has but I've

00:02:19,829 --> 00:02:24,030
been I was a PhD student under Martin at

00:02:21,900 --> 00:02:27,360
epfl and then transitioned into this

00:02:24,030 --> 00:02:30,510
post very recently so I think that's all

00:02:27,360 --> 00:02:32,609
i have to say i'm gonna i guess i'm

00:02:30,510 --> 00:02:34,079
going to skip Adrian now since he

00:02:32,609 --> 00:02:37,200
already introduced himself and we can go

00:02:34,079 --> 00:02:40,019
on to Seth hi my name is Seth tissue I

00:02:37,200 --> 00:02:42,540
am on the Scala team at life and I

00:02:40,019 --> 00:02:45,299
started there a little under a year ago

00:02:42,540 --> 00:02:48,060
I've been doing Scala stuff since since

00:02:45,299 --> 00:02:51,720
early two thousand eight community

00:02:48,060 --> 00:02:56,090
meetups conferences a podcast reporting

00:02:51,720 --> 00:02:56,090
lot of bogs a lot of different stuff I

00:02:57,620 --> 00:03:03,120
bill thinners and I'm from artema and

00:03:00,569 --> 00:03:07,409
I've been involved with skeletons 2000

00:03:03,120 --> 00:03:12,569
he could say six so almost ten years i

00:03:07,409 --> 00:03:15,599
guess that is ten years but i'm not

00:03:12,569 --> 00:03:18,690
impressing you with my math ability i do

00:03:15,599 --> 00:03:19,829
books on scala and training i teach it

00:03:18,690 --> 00:03:22,739
so i've been involved a lot and trying

00:03:19,829 --> 00:03:25,650
to make it explained it and scalloped s

00:03:22,739 --> 00:03:27,569
so I'd read a lot of code and sort of

00:03:25,650 --> 00:03:29,190
struggle with all the you know have that

00:03:27,569 --> 00:03:30,329
kind of experience I've sort of do all

00:03:29,190 --> 00:03:31,769
different kinds of things focus on

00:03:30,329 --> 00:03:35,190
school and also do consulting and

00:03:31,769 --> 00:03:36,720
training and they asked me to serve on

00:03:35,190 --> 00:03:38,790
the advisory board of the Scala center

00:03:36,720 --> 00:03:41,970
so I'm the community representative as I

00:03:38,790 --> 00:03:50,479
didn't actually find anything so I

00:03:41,970 --> 00:03:54,109
represent I am Stefan tiger I'm the

00:03:50,479 --> 00:03:57,150
original creator of scholar query and

00:03:54,109 --> 00:04:00,720
which later became slick I've been

00:03:57,150 --> 00:04:04,549
working with scholars in 2007-2008 or so

00:04:00,720 --> 00:04:07,739
and i work for life been since 2011 and

00:04:04,549 --> 00:04:10,430
since last october i'm a member of the

00:04:07,739 --> 00:04:13,650
scala team and now do you mostly

00:04:10,430 --> 00:04:18,329
compiler work and related stuff like the

00:04:13,650 --> 00:04:20,459
SBT build for the compiler hello my name

00:04:18,329 --> 00:04:24,930
is Sebastian run but if you pronounce it

00:04:20,459 --> 00:04:26,440
wrong I'm only mad at you um so I

00:04:24,930 --> 00:04:28,840
started using sky

00:04:26,440 --> 00:04:31,170
recently I might be the youngest got a

00:04:28,840 --> 00:04:36,310
user in this panel I started using it in

00:04:31,170 --> 00:04:39,220
2011 so only five years ago and i'm the

00:04:36,310 --> 00:04:43,780
author of scholar jes and still out the

00:04:39,220 --> 00:04:46,750
main project please everyone my name is

00:04:43,780 --> 00:04:49,120
Eugene and if we talk about who started

00:04:46,750 --> 00:04:51,700
using skull latest of all this little

00:04:49,120 --> 00:04:53,320
probably me because I learned scholar

00:04:51,700 --> 00:04:56,820
wells are developing the Scala compiler

00:04:53,320 --> 00:05:01,000
which is when i began started my PhD

00:04:56,820 --> 00:05:04,630
program at EPFL so among some less

00:05:01,000 --> 00:05:06,880
impressive facts actually introduced

00:05:04,630 --> 00:05:09,040
macros to sculpt together with other

00:05:06,880 --> 00:05:10,510
guys from the Scala team and currently

00:05:09,040 --> 00:05:14,590
I'm involved in this column at a project

00:05:10,510 --> 00:05:18,310
which is which is aiming to be the next

00:05:14,590 --> 00:05:20,200
guy reflect platform independence with a

00:05:18,310 --> 00:05:22,380
programming library that is enjoyable to

00:05:20,200 --> 00:05:22,380
use

00:05:25,600 --> 00:05:38,650
first question or should we start asking

00:05:27,760 --> 00:05:41,140
you things I see a hand over there I'm

00:05:38,650 --> 00:05:44,140
not asking for official opinion Josie

00:05:41,140 --> 00:05:47,770
are just estimates your predictions

00:05:44,140 --> 00:05:50,590
about dot 30 will it because our three

00:05:47,770 --> 00:05:52,810
point 0 for marketing purposes alright

00:05:50,590 --> 00:05:55,180
would be even called scholar but about

00:05:52,810 --> 00:05:57,790
my compatibility with older Scala

00:05:55,180 --> 00:06:01,570
library is compiled for holders color or

00:05:57,790 --> 00:06:05,190
like yeah people would have to upgrade

00:06:01,570 --> 00:06:08,680
their libraries evens ecology and job

00:06:05,190 --> 00:06:11,200
removed features and we implement my

00:06:08,680 --> 00:06:13,420
 magic using new features so just

00:06:11,200 --> 00:06:16,810
limits just estimates in your prediction

00:06:13,420 --> 00:06:18,940
how you want that yeah yeah you've asked

00:06:16,810 --> 00:06:21,640
the question which seems everybody's

00:06:18,940 --> 00:06:23,050
minds well you know it was on everybody

00:06:21,640 --> 00:06:31,150
that was the first question last year

00:06:23,050 --> 00:06:33,280
too yeah so I'm not going to answer time

00:06:31,150 --> 00:06:38,260
frame questions but I will answer the

00:06:33,280 --> 00:06:41,650
evolution question and the evolution

00:06:38,260 --> 00:06:45,360
started you know a while ago so for

00:06:41,650 --> 00:06:47,710
example Scout 212 a lot of the work on

00:06:45,360 --> 00:06:50,320
figuring out how to encode traits and

00:06:47,710 --> 00:06:56,770
functions on Java 8 was done first and

00:06:50,320 --> 00:07:00,870
dotty and we took that work and and well

00:06:56,770 --> 00:07:04,090
by taking I mean stealing and

00:07:00,870 --> 00:07:05,230
implemented in Scala 212 so a lot of the

00:07:04,090 --> 00:07:08,470
progress that we were able to make

00:07:05,230 --> 00:07:11,260
quickly in disable skull to compiler it

00:07:08,470 --> 00:07:14,080
was thanks to the incubation of those

00:07:11,260 --> 00:07:15,730
features in indata and and that's a

00:07:14,080 --> 00:07:21,730
pattern that that we intend to keep

00:07:15,730 --> 00:07:25,300
repeating until scale 2x + 30 become so

00:07:21,730 --> 00:07:29,440
close that it'll be a smooth transition

00:07:25,300 --> 00:07:31,270
so these things evolution necessarily

00:07:29,440 --> 00:07:35,919
you know takes effort on both on both

00:07:31,270 --> 00:07:37,199
ends and our job as the Scala team at

00:07:35,919 --> 00:07:40,360
light band

00:07:37,199 --> 00:07:43,599
now and since you know 210 basically has

00:07:40,360 --> 00:07:45,429
been and maybe you know the observation

00:07:43,599 --> 00:07:47,349
is that we slow down Scala development

00:07:45,429 --> 00:07:49,469
but I like to think about it more

00:07:47,349 --> 00:07:52,629
smoothing it out and stabilizing it and

00:07:49,469 --> 00:07:54,549
making it so that it's predictable how

00:07:52,629 --> 00:07:56,019
much work is going to be to upgrade to

00:07:54,549 --> 00:07:58,749
the next version of Scala that you're

00:07:56,019 --> 00:08:01,329
using and to make sure that everybody is

00:07:58,749 --> 00:08:04,329
eager and able to be on the latest

00:08:01,329 --> 00:08:06,729
version of scholar and so we're we've

00:08:04,329 --> 00:08:09,039
published our roadmap on Don Giovanni

00:08:06,729 --> 00:08:11,949
part 1 and 2 and I've we've all spoken

00:08:09,039 --> 00:08:14,379
about that publicly about you know what

00:08:11,949 --> 00:08:18,039
our plan is to take what what dotty is

00:08:14,379 --> 00:08:20,529
is proving the proving ground that is

00:08:18,039 --> 00:08:22,149
dotty supplying us with a lot of ideas

00:08:20,529 --> 00:08:27,610
for features and implementation

00:08:22,149 --> 00:08:29,949
techniques speeding up the compiler so

00:08:27,610 --> 00:08:31,899
the way I see it the way that I that I

00:08:29,949 --> 00:08:33,879
intend to approach is to incorporate

00:08:31,899 --> 00:08:37,060
these features into the next versions of

00:08:33,879 --> 00:08:39,189
Scala so concretely into 13 will be

00:08:37,060 --> 00:08:42,629
working on modularizing or will continue

00:08:39,189 --> 00:08:45,699
the work on modular rising the library

00:08:42,629 --> 00:08:47,100
that has many many reasons so I mean one

00:08:45,699 --> 00:08:50,709
of them and that's that's been pretty

00:08:47,100 --> 00:08:53,800
pretty nice to see in 211 is that the

00:08:50,709 --> 00:08:55,420
modules that that started to lead their

00:08:53,800 --> 00:08:56,920
own lives and got their own repositories

00:08:55,420 --> 00:08:58,779
in their own CI and their own release

00:08:56,920 --> 00:09:00,910
process have also gotten their own

00:08:58,779 --> 00:09:02,980
maintained errs from the community that

00:09:00,910 --> 00:09:06,399
are cutting releases and that are fixing

00:09:02,980 --> 00:09:09,309
bugs and that own a piece of Scala now

00:09:06,399 --> 00:09:10,959
and that's something that I want to

00:09:09,309 --> 00:09:12,790
continue and that's that's also part of

00:09:10,959 --> 00:09:14,529
the the idea around the Scala core

00:09:12,790 --> 00:09:18,819
versus scala platform discussions that

00:09:14,529 --> 00:09:20,470
you're seeing we you know scholars is

00:09:18,819 --> 00:09:22,449
not just lied Ben it's not just gala

00:09:20,470 --> 00:09:25,269
Center it's not just EPFL it's it's all

00:09:22,449 --> 00:09:27,160
of us combined with the community in

00:09:25,269 --> 00:09:30,160
there as a player that we're hoping to

00:09:27,160 --> 00:09:31,720
to enable right and so the modular

00:09:30,160 --> 00:09:33,699
ization effort is an important part of

00:09:31,720 --> 00:09:36,339
that and it helps in the evolution it

00:09:33,699 --> 00:09:37,839
helps speed up things it also helps in

00:09:36,339 --> 00:09:39,040
letting you stick on the stick with a

00:09:37,839 --> 00:09:40,329
certain version that works for you

00:09:39,040 --> 00:09:42,040
because you start you know you're

00:09:40,329 --> 00:09:45,459
relying on that bug or something like

00:09:42,040 --> 00:09:49,179
that right so that's that's part of that

00:09:45,459 --> 00:09:50,380
answer concretely so into 13 some of the

00:09:49,179 --> 00:09:52,420
features that

00:09:50,380 --> 00:09:55,720
didn't make it into 12 was for example

00:09:52,420 --> 00:09:58,480
the better locking semantics for lazy

00:09:55,720 --> 00:10:00,190
valves that Dottie has now that

00:09:58,480 --> 00:10:01,870
regrettably we didn't have time for into

00:10:00,190 --> 00:10:03,850
12 because we are a small team we're a

00:10:01,870 --> 00:10:07,600
dedicated passionate team like that but

00:10:03,850 --> 00:10:10,570
we are a small team and that didn't make

00:10:07,600 --> 00:10:14,620
it into 12 but we really want to get it

00:10:10,570 --> 00:10:17,680
into 13 and there are other smaller

00:10:14,620 --> 00:10:20,020
things that we want to do to do to set

00:10:17,680 --> 00:10:22,020
the stage for Dottie such as you know

00:10:20,020 --> 00:10:24,430
simpler things like procedure syntax

00:10:22,020 --> 00:10:28,330
really pushing that deprecation through

00:10:24,430 --> 00:10:29,950
requiring return types for implicit you

00:10:28,330 --> 00:10:32,170
know eventually in the two series i hope

00:10:29,950 --> 00:10:34,600
to introduce trade parameters get rid of

00:10:32,170 --> 00:10:37,330
early initializers basically do all the

00:10:34,600 --> 00:10:39,700
the small paper cut like differences

00:10:37,330 --> 00:10:41,290
with with Dottie get rid of those so

00:10:39,700 --> 00:10:44,260
that we can really focus on what the

00:10:41,290 --> 00:10:45,700
essence of the transition will be and in

00:10:44,260 --> 00:10:48,520
the process we've talked with this call

00:10:45,700 --> 00:10:49,900
center about having something like go

00:10:48,520 --> 00:10:51,370
fix it or something like that if you're

00:10:49,900 --> 00:10:54,940
familiar with that tool which is kind of

00:10:51,370 --> 00:10:57,670
an automated refactoring tool which will

00:10:54,940 --> 00:11:00,130
be a great fit for for the work or on

00:10:57,670 --> 00:11:02,200
top of the work that Eugene is doing to

00:11:00,130 --> 00:11:04,750
start evolving your code bases in a more

00:11:02,200 --> 00:11:06,640
mechanical way for example to get rid of

00:11:04,750 --> 00:11:09,960
procedure syntax right as a first simple

00:11:06,640 --> 00:11:13,870
proving mechanism for that for that tool

00:11:09,960 --> 00:11:16,090
think I've spoken quite long now happy

00:11:13,870 --> 00:11:18,790
to follow up questions or to you know

00:11:16,090 --> 00:11:20,650
have anyone on the panel kind of you

00:11:18,790 --> 00:11:25,420
know complete my answer or contradict my

00:11:20,650 --> 00:11:27,190
answer or refine it or whatever I would

00:11:25,420 --> 00:11:28,600
just say that I think everybody wants

00:11:27,190 --> 00:11:30,790
the same thing and in our culture is

00:11:28,600 --> 00:11:34,150
that we do want things to get better not

00:11:30,790 --> 00:11:37,120
just stagnate but you don't want it just

00:11:34,150 --> 00:11:40,840
to change someone's didn't agree with

00:11:37,120 --> 00:11:43,480
that what I said keep the Michael closer

00:11:40,840 --> 00:11:46,510
to okay that's what the noise they make

00:11:43,480 --> 00:11:47,980
when you can't hear me all right I just

00:11:46,510 --> 00:11:49,630
didn't want overpower everyone the other

00:11:47,980 --> 00:11:51,760
thing I just wanted to say is I call it

00:11:49,630 --> 00:11:53,890
pinpricks because papercuts actually

00:11:51,760 --> 00:11:56,140
hurt I know so a little of little

00:11:53,890 --> 00:11:58,450
changes that it's I can accept that when

00:11:56,140 --> 00:12:00,100
i upgrade ok have to fix that and then I

00:11:58,450 --> 00:12:01,750
move on but it what happened that we

00:12:00,100 --> 00:12:03,970
want to avoid is the Python 3 thing

00:12:01,750 --> 00:12:05,410
where everything changes too much and

00:12:03,970 --> 00:12:08,290
when upgrades because nobody it's not

00:12:05,410 --> 00:12:10,120
good for anybody on it so that that's

00:12:08,290 --> 00:12:12,579
what I think everybody is I've never

00:12:10,120 --> 00:12:15,819
heard anybody who wants that we can do a

00:12:12,579 --> 00:12:20,079
show of hands those is anybody like no I

00:12:15,819 --> 00:12:22,089
want python3 I have one too Dean you're

00:12:20,079 --> 00:12:26,649
you're you're gonna be involved courting

00:12:22,089 --> 00:12:29,019
or a code base I probably got about five

00:12:26,649 --> 00:12:33,189
hands okay well talk to me later we have

00:12:29,019 --> 00:12:35,079
a job for you want to do some some

00:12:33,189 --> 00:12:40,509
upgrading of code from 28 that we have

00:12:35,079 --> 00:12:42,810
lying around yes John but there's a mic

00:12:40,509 --> 00:12:42,810
on the way

00:12:46,889 --> 00:12:48,949
you

00:12:50,660 --> 00:12:56,209
thank you I have a question for Bill and

00:12:54,129 --> 00:12:58,310
obviously you'd never ask a question you

00:12:56,209 --> 00:13:00,199
don't already know the answer to but

00:12:58,310 --> 00:13:03,110
bill what what are you planning on doing

00:13:00,199 --> 00:13:06,980
is the community member on the solar

00:13:03,110 --> 00:13:09,470
center advisory board yeah I I see my

00:13:06,980 --> 00:13:14,410
role is listening to the community and

00:13:09,470 --> 00:13:14,410
trying to collect input and then

00:13:14,560 --> 00:13:19,370
communicating it to the Scala center so

00:13:16,970 --> 00:13:21,310
i just want that you know to collect

00:13:19,370 --> 00:13:26,420
input so please come and talk to me I

00:13:21,310 --> 00:13:28,639
you can email me but I think it I expect

00:13:26,420 --> 00:13:29,959
people will just when they see me they

00:13:28,639 --> 00:13:31,189
might say something but I actually

00:13:29,959 --> 00:13:33,529
that's what I would like to do it's a

00:13:31,189 --> 00:13:38,779
pretty friendly grunt hmm I can attest

00:13:33,529 --> 00:13:41,810
he's pretty friendly that's all I know

00:13:38,779 --> 00:13:43,819
about my job is that so what's the

00:13:41,810 --> 00:13:46,639
actually what's the email address again

00:13:43,819 --> 00:13:48,350
because I I saw it on this Gator channel

00:13:46,639 --> 00:13:51,290
but actually I think it's not been yeah

00:13:48,350 --> 00:13:54,290
it's now five is dash to dash scala desh

00:13:51,290 --> 00:13:55,939
center at RT me calm because it's

00:13:54,290 --> 00:13:57,769
basically if you want if you don't mind

00:13:55,939 --> 00:13:59,509
a discussion just posted the get ur

00:13:57,769 --> 00:14:01,490
channel and then we can talk about it

00:13:59,509 --> 00:14:02,870
and so can everybody else if you want to

00:14:01,490 --> 00:14:04,970
be private i made an email address that

00:14:02,870 --> 00:14:06,500
i would its private just it's like

00:14:04,970 --> 00:14:09,170
private square brackets quella center of

00:14:06,500 --> 00:14:10,639
it schol center people can will hear

00:14:09,170 --> 00:14:13,810
about it but you know you won't be in

00:14:10,639 --> 00:14:13,810
the public having said that

00:14:21,889 --> 00:14:28,509
we can we can repeat the question for

00:14:23,839 --> 00:14:28,509
you yep this people so what

00:14:36,080 --> 00:14:41,840
so so the question was what what

00:14:38,330 --> 00:14:43,580
features do we wish we wish the JVM had

00:14:41,840 --> 00:14:50,630
that would allow more interesting things

00:14:43,580 --> 00:14:54,590
for Scala tail calls some when someone's

00:14:50,630 --> 00:14:59,900
gotta said we'll get them eventually GS

00:14:54,590 --> 00:15:02,360
has them I think that answers your

00:14:59,900 --> 00:15:04,520
question what did we want JavaScript

00:15:02,360 --> 00:15:10,940
over here when do we want it on the

00:15:04,520 --> 00:15:12,230
finder yeah so invoke dynamic is

00:15:10,940 --> 00:15:17,390
something oh we already have that

00:15:12,230 --> 00:15:19,580
um yeah we're sorry yeah a class dynamic

00:15:17,390 --> 00:15:21,020
yeah so something you know

00:15:19,580 --> 00:15:23,930
specialization is something that I think

00:15:21,020 --> 00:15:25,940
we've learned over the years might be

00:15:23,930 --> 00:15:31,090
something that's more of a of a runtime

00:15:25,940 --> 00:15:31,090
concern and by runtime I mean the JVM

00:15:33,490 --> 00:15:43,400
value value types so that's closely

00:15:36,050 --> 00:15:44,390
related to that arrays yeah I mean that

00:15:43,400 --> 00:15:46,100
they're really on top of it you know

00:15:44,390 --> 00:15:47,960
those guys at Oracle like there you're

00:15:46,100 --> 00:15:50,510
coming up with good stuff and where I

00:15:47,960 --> 00:15:53,000
mean do 12 is it has a lot of uses for

00:15:50,510 --> 00:15:57,560
or invoke dynamic and and whenever we

00:15:53,000 --> 00:15:59,900
talk to those guys at Oracle you know

00:15:57,560 --> 00:16:02,030
they're they they're happy to hear that

00:15:59,900 --> 00:16:04,100
statically typed languages are using

00:16:02,030 --> 00:16:05,600
them because invoke dynamic sounds like

00:16:04,100 --> 00:16:07,550
it's something for jruby or something

00:16:05,600 --> 00:16:11,030
and that may be how it came to life

00:16:07,550 --> 00:16:14,540
originally but we use it for anything

00:16:11,030 --> 00:16:20,150
from spinning up classes for lambdas

00:16:14,540 --> 00:16:23,420
when when we need them to hash causing

00:16:20,150 --> 00:16:25,220
simple instances like whenever you do '

00:16:23,420 --> 00:16:28,490
blah that creates an instance of symbol

00:16:25,220 --> 00:16:30,740
in Scala that used to go that used to be

00:16:28,490 --> 00:16:33,950
cashed in in static fields and traits

00:16:30,740 --> 00:16:37,400
and now we that becomes a constant call

00:16:33,950 --> 00:16:39,980
site with an invoked dynamic that's just

00:16:37,400 --> 00:16:42,080
one example and that actually is exposed

00:16:39,980 --> 00:16:45,710
to you as macro oh wait i'm not gonna

00:16:42,080 --> 00:16:47,180
advertise me just kidding eugene yeah so

00:16:45,710 --> 00:16:48,170
that's actually internally available to

00:16:47,180 --> 00:16:49,520
you at the end of oak dynamic

00:16:48,170 --> 00:16:51,250
instruction so you could write a macro

00:16:49,520 --> 00:16:54,189
for

00:16:51,250 --> 00:16:57,379
to cash the regular expression matcher

00:16:54,189 --> 00:16:59,899
the first time that it's evaluated using

00:16:57,379 --> 00:17:01,670
the same mechanism there's there's lots

00:16:59,899 --> 00:17:04,039
of other things that that we're thinking

00:17:01,670 --> 00:17:05,870
of doing like that haven't haven't done

00:17:04,039 --> 00:17:09,829
them yet but are thinking of doing for

00:17:05,870 --> 00:17:11,929
example structural types invocations on

00:17:09,829 --> 00:17:15,770
structural types could could be faster

00:17:11,929 --> 00:17:18,850
with invoke dynamic Ida I don't know so

00:17:15,770 --> 00:17:22,370
I think the answer is actually not much

00:17:18,850 --> 00:17:24,380
there's of course a lot of heritage

00:17:22,370 --> 00:17:26,059
there that we'd rather not support like

00:17:24,380 --> 00:17:27,980
you know everybody mentions overloading

00:17:26,059 --> 00:17:31,400
when when those discussions are there

00:17:27,980 --> 00:17:33,799
but I just don't see as being a

00:17:31,400 --> 00:17:36,440
successful as we are with without JVM

00:17:33,799 --> 00:17:41,090
quirks and all and JavaScript might

00:17:36,440 --> 00:17:42,530
prove us wrong on the client well some

00:17:41,090 --> 00:17:45,260
things are better in JavaScript but some

00:17:42,530 --> 00:17:47,419
things are definitely worse I mean the

00:17:45,260 --> 00:17:51,500
question was not asked but I answer

00:17:47,419 --> 00:17:53,299
anyway so please do sir from from from

00:17:51,500 --> 00:17:55,280
JavaScript perspective the things I

00:17:53,299 --> 00:17:57,650
would like to see our first and foremost

00:17:55,280 --> 00:17:59,809
through Long's position went to my talk

00:17:57,650 --> 00:18:01,520
you may have learned that long

00:17:59,809 --> 00:18:04,549
operations are about a hundred times

00:18:01,520 --> 00:18:06,230
flowers and ends operations and that's

00:18:04,549 --> 00:18:08,720
because there is no long in JavaScript

00:18:06,230 --> 00:18:13,400
so I really want that to happen at some

00:18:08,720 --> 00:18:15,770
point otherwise again there is not

00:18:13,400 --> 00:18:18,230
really much we would like from from

00:18:15,770 --> 00:18:21,500
JavaScript as a language to to improve

00:18:18,230 --> 00:18:23,630
scholars as such it already has most of

00:18:21,500 --> 00:18:26,990
the things we actually want and it's

00:18:23,630 --> 00:18:29,000
some some bangs are closer between

00:18:26,990 --> 00:18:31,730
Skyrim javascript in between Scylla and

00:18:29,000 --> 00:18:36,200
in the JVM some some things of course

00:18:31,730 --> 00:18:38,780
are more different so yeah from

00:18:36,200 --> 00:18:40,970
javascript is such not not much but then

00:18:38,780 --> 00:18:42,770
from web a cently yeah maybe but that's

00:18:40,970 --> 00:18:46,340
movie for another question ok no now

00:18:42,770 --> 00:18:49,190
we're getting pretty far as the

00:18:46,340 --> 00:18:53,390
moderator I have to ask you not to not

00:18:49,190 --> 00:18:56,210
talk about JavaScript frameworks it was

00:18:53,390 --> 00:19:00,289
kidding at the JVM language summit this

00:18:56,210 --> 00:19:02,360
summer the dominant theme coming from

00:19:00,289 --> 00:19:03,580
the Oracle speakers was performance

00:19:02,360 --> 00:19:05,860
particularly

00:19:03,580 --> 00:19:08,650
you know eliminating boxing and unboxing

00:19:05,860 --> 00:19:10,450
on primitive types that seemed to be the

00:19:08,650 --> 00:19:12,640
main thing that you know they weren't

00:19:10,450 --> 00:19:15,940
just wishing for we're actually going to

00:19:12,640 --> 00:19:19,870
make happen and designs that they

00:19:15,940 --> 00:19:21,670
presented seem consistent with being us

00:19:19,870 --> 00:19:23,800
being able to take advantage of that

00:19:21,670 --> 00:19:26,200
from Scala so they're already working on

00:19:23,800 --> 00:19:28,930
I think one of the things at all that

00:19:26,200 --> 00:19:31,480
that most of us would wish for most yeah

00:19:28,930 --> 00:19:33,250
yeah when I saw him in philly last month

00:19:31,480 --> 00:19:35,620
bryan said he thought we would be

00:19:33,250 --> 00:19:37,030
pleased and i think we will be but we've

00:19:35,620 --> 00:19:39,550
been pretty we've been pretty busy with

00:19:37,030 --> 00:19:41,890
212 to really dig into what value types

00:19:39,550 --> 00:19:47,560
are gonna bring us on on I don't know

00:19:41,890 --> 00:19:52,420
jumbo you know eight plus and right

00:19:47,560 --> 00:19:56,490
maybe the next question Eugene the might

00:19:52,420 --> 00:19:56,490
of the Mike's coming you're very close

00:19:59,610 --> 00:20:07,720
so what's your opinion on the standard

00:20:04,660 --> 00:20:09,580
versus non-standard like let the

00:20:07,720 --> 00:20:13,480
community do its thing thank especially

00:20:09,580 --> 00:20:17,470
if you know javascript is coming along

00:20:13,480 --> 00:20:19,150
you know really nicely and there are

00:20:17,470 --> 00:20:21,220
certain things i think as scarlet devil

00:20:19,150 --> 00:20:24,100
pari or are you kind of like you ignore

00:20:21,220 --> 00:20:25,990
it but like you when you describe dates

00:20:24,100 --> 00:20:28,840
or something like that you implicitly

00:20:25,990 --> 00:20:31,450
know like okay after now use java's date

00:20:28,840 --> 00:20:34,180
right so but i think there's certain

00:20:31,450 --> 00:20:36,340
argument to be made that certain things

00:20:34,180 --> 00:20:40,590
should be just kind of be all community

00:20:36,340 --> 00:20:44,050
thing so where do you stand you know on

00:20:40,590 --> 00:20:47,470
json io dates that kind of stuff should

00:20:44,050 --> 00:20:48,820
they be a platform thing or should we

00:20:47,470 --> 00:20:52,210
just let the live in the community if

00:20:48,820 --> 00:20:55,090
you get out did you say Jason yes JSON

00:20:52,210 --> 00:20:59,320
seriously yeah we talked about this

00:20:55,090 --> 00:21:02,590
before I think I'll had Sebastian answer

00:20:59,320 --> 00:21:04,330
right now you don't have an answer I saw

00:21:02,590 --> 00:21:05,350
you very eagerly go for the mic but

00:21:04,330 --> 00:21:09,799
maybe that was my peripheral vision

00:21:05,350 --> 00:21:16,399
playing tricks on me so yes platform um

00:21:09,799 --> 00:21:21,649
I really like the JVM and I think of

00:21:16,399 --> 00:21:23,690
that as the Scala platform and I know

00:21:21,649 --> 00:21:27,350
that Sebastian really likes JavaScript

00:21:23,690 --> 00:21:29,059
um I don't know I mean it's a tough

00:21:27,350 --> 00:21:30,739
question I don't know how unfortunately

00:21:29,059 --> 00:21:33,499
we seeded you guys at opposite ends of

00:21:30,739 --> 00:21:37,159
the table yeah that's that's how we

00:21:33,499 --> 00:21:38,989
usually have dinner i don't know i mean

00:21:37,159 --> 00:21:40,759
it's it's a it's a tough 1i i think it's

00:21:38,989 --> 00:21:44,359
dangerous to gloss over the differences

00:21:40,759 --> 00:21:45,710
between platforms and i think some

00:21:44,359 --> 00:21:47,210
differences just aren't meant to be

00:21:45,710 --> 00:21:48,559
glossed over i need to be aware of them

00:21:47,210 --> 00:21:52,070
and you need to you need to deal with

00:21:48,559 --> 00:21:53,509
them I think it also comes back to kind

00:21:52,070 --> 00:21:58,999
of the discussions we had recently about

00:21:53,509 --> 00:22:01,669
unsigned you know I don't know honestly

00:21:58,999 --> 00:22:06,590
I don't know i am the platform question

00:22:01,669 --> 00:22:10,820
is a tricky one yeah i guess what one

00:22:06,590 --> 00:22:14,210
one thing one thing i would like to see

00:22:10,820 --> 00:22:16,580
from from ask la scala platforms colic

00:22:14,210 --> 00:22:19,159
or differentiation is that at least the

00:22:16,580 --> 00:22:22,119
scholar core library would be completely

00:22:19,159 --> 00:22:24,739
portable yeah i'll agree with that and

00:22:22,119 --> 00:22:27,999
otherwise i think it's it's it's a nice

00:22:24,739 --> 00:22:30,679
idea that we can modular is more and

00:22:27,999 --> 00:22:32,600
some things will be JV I'm something it

00:22:30,679 --> 00:22:34,190
would be cross-platform some things

00:22:32,600 --> 00:22:37,399
would be chia is only something would be

00:22:34,190 --> 00:22:39,460
native only but the core I think

00:22:37,399 --> 00:22:42,139
eventually should be completely portable

00:22:39,460 --> 00:22:46,669
yeah fully agree i think I'm can I move

00:22:42,139 --> 00:22:48,109
a little closer to Sebastian so maybe I

00:22:46,669 --> 00:22:50,899
can ask a follow-up question to

00:22:48,109 --> 00:22:52,190
Sebastian how portable is it at the

00:22:50,899 --> 00:22:55,429
moment you must have first-hand

00:22:52,190 --> 00:22:58,129
experience with this like how big of a

00:22:55,429 --> 00:22:59,389
pain was it to enable is for JavaScript

00:22:58,129 --> 00:23:02,659
and how much actually works in

00:22:59,389 --> 00:23:06,889
JavaScript compared to JDM more than you

00:23:02,659 --> 00:23:09,169
would think for example the entire

00:23:06,889 --> 00:23:11,149
collection zvi works right because

00:23:09,169 --> 00:23:14,330
that's that's basically pure scholar

00:23:11,149 --> 00:23:17,450
codes most most of the things that

00:23:14,330 --> 00:23:21,139
realized somehow on the core aspects of

00:23:17,450 --> 00:23:23,549
the jdk work too because with 42 jdk or

00:23:21,139 --> 00:23:26,610
at least small part of it but they

00:23:23,549 --> 00:23:29,129
than you think again on tues college is

00:23:26,610 --> 00:23:31,470
so all the Java collections from for

00:23:29,129 --> 00:23:33,179
example are there so things that are not

00:23:31,470 --> 00:23:36,090
there are typically things that are

00:23:33,179 --> 00:23:38,519
inherently non-portable so parallel

00:23:36,090 --> 00:23:40,830
collections I mean in case you don't

00:23:38,519 --> 00:23:42,809
know just with the single credits so

00:23:40,830 --> 00:23:47,720
part of the collections just don't make

00:23:42,809 --> 00:23:50,879
sense other things like we cache maps

00:23:47,720 --> 00:23:54,720
that that's not the thing in JavaScript

00:23:50,879 --> 00:24:03,929
and no es six-week maps are not the same

00:23:54,720 --> 00:24:10,950
thing so um what about reflection next

00:24:03,929 --> 00:24:15,570
question compile-time reflection that

00:24:10,950 --> 00:24:19,590
works runtime reflection is probably

00:24:15,570 --> 00:24:22,259
never going to happen for for one good

00:24:19,590 --> 00:24:25,109
reason is that it completely kills any

00:24:22,259 --> 00:24:28,980
kind of witch ability analysis which is

00:24:25,109 --> 00:24:31,340
a complicated words to say find the

00:24:28,980 --> 00:24:34,169
things that you could actually users and

00:24:31,340 --> 00:24:36,720
put that in the indie in the JavaScript

00:24:34,169 --> 00:24:37,919
and not everything else and that's

00:24:36,720 --> 00:24:39,840
really important because if you don't

00:24:37,919 --> 00:24:43,350
have that for scholars yes you have

00:24:39,840 --> 00:24:45,299
literally more than 10 megabytes of

00:24:43,350 --> 00:24:48,899
JavaScript just from the standard

00:24:45,299 --> 00:24:51,840
library and that's not good so you

00:24:48,899 --> 00:24:54,869
really don't want runtime reflection you

00:24:51,840 --> 00:24:56,580
might have some some controlled amounts

00:24:54,869 --> 00:24:59,820
for internal reflection which is to say

00:24:56,580 --> 00:25:03,330
you say in advance I want to be able to

00:24:59,820 --> 00:25:05,429
reflect by name the classes that extend

00:25:03,330 --> 00:25:07,590
that particular trait or glass or

00:25:05,429 --> 00:25:09,720
something like that and I want to be

00:25:07,590 --> 00:25:12,119
able to create instances of those class

00:25:09,720 --> 00:25:15,179
VI reflection and that's something I've

00:25:12,119 --> 00:25:17,879
actually implemented as as a sort of

00:25:15,179 --> 00:25:20,220
lenker plugin so it's it's an additional

00:25:17,879 --> 00:25:22,080
SBG plugin that you add then you can say

00:25:20,220 --> 00:25:24,989
I want to be able to reflect class

00:25:22,080 --> 00:25:26,580
binding for those lines and and invoke

00:25:24,989 --> 00:25:30,119
those constructors and that kind of

00:25:26,580 --> 00:25:33,509
stuff so you can do that if if you if

00:25:30,119 --> 00:25:35,369
you control it you're not allowing an

00:25:33,509 --> 00:25:36,809
entire reflection on the entire code

00:25:35,369 --> 00:25:39,929
base because thats

00:25:36,809 --> 00:25:41,789
nah I mean it just doesn't work but you

00:25:39,929 --> 00:25:49,409
can say for these things I really want

00:25:41,789 --> 00:25:53,549
it and then and then you get it there's

00:25:49,409 --> 00:25:58,529
a question they made all their the

00:25:53,549 --> 00:26:02,909
microphone is coming is there

00:25:58,529 --> 00:26:07,440
convergence for the request for Stroman

00:26:02,909 --> 00:26:13,619
collection redesign or is that still too

00:26:07,440 --> 00:26:19,679
early ongoing but please please send

00:26:13,619 --> 00:26:21,330
more designs see people too so we have

00:26:19,679 --> 00:26:23,629
stuff to compare and talk about not

00:26:21,330 --> 00:26:25,980
because we don't like the existing ones

00:26:23,629 --> 00:26:29,309
there are a couple of strong and

00:26:25,980 --> 00:26:32,700
proposals and they they they are not

00:26:29,309 --> 00:26:35,249
actually all that different so I think

00:26:32,700 --> 00:26:37,559
they go in the same kind of direction

00:26:35,249 --> 00:26:40,769
just trying to simplify the current

00:26:37,559 --> 00:26:43,289
implementation but it's still ongoing

00:26:40,769 --> 00:26:45,779
work maybe I can answer a related

00:26:43,289 --> 00:26:47,129
question or if you want you can ask it

00:26:45,779 --> 00:26:50,639
and I mean I can suggest you ask it

00:26:47,129 --> 00:26:52,289
under the answer now hey the what we

00:26:50,639 --> 00:26:54,899
want to do to the collections is mostly

00:26:52,289 --> 00:26:57,450
internal and as Martin said you know

00:26:54,899 --> 00:26:58,830
regular users of the collections won't

00:26:57,450 --> 00:27:00,869
notice so unless you've been doing crazy

00:26:58,830 --> 00:27:02,879
things like extending immutable

00:27:00,869 --> 00:27:05,759
collections or something like that you

00:27:02,879 --> 00:27:09,029
won't notice and that that's why we've

00:27:05,759 --> 00:27:13,139
you know deprecated the non finality of

00:27:09,029 --> 00:27:15,600
these classes for example so we're we've

00:27:13,139 --> 00:27:18,269
even though the exact design hasn't

00:27:15,600 --> 00:27:19,950
crystallized or converged we we have

00:27:18,269 --> 00:27:22,159
anticipated the changes that are going

00:27:19,950 --> 00:27:25,409
to be necessary or might be necessary

00:27:22,159 --> 00:27:27,509
and so we've been trying to set the

00:27:25,409 --> 00:27:29,580
stage in 211 and 212 for those so we

00:27:27,509 --> 00:27:32,700
don't catch you by surprise if you're

00:27:29,580 --> 00:27:34,350
just a regular user I really don't want

00:27:32,700 --> 00:27:36,119
you to have to worry about anything if

00:27:34,350 --> 00:27:37,259
you are implementing collections you're

00:27:36,119 --> 00:27:39,389
going to have to pay attention to the

00:27:37,259 --> 00:27:42,210
process and you should participate if

00:27:39,389 --> 00:27:45,230
you're a big user of the open extender

00:27:42,210 --> 00:27:48,960
of the of their collections

00:27:45,230 --> 00:27:51,390
skala 212 as a compile release 213 will

00:27:48,960 --> 00:27:53,040
be a library release and so that's you

00:27:51,390 --> 00:27:56,130
know things haven't confirmed converged

00:27:53,040 --> 00:27:58,320
yet you shouldn't be too alarmed just

00:27:56,130 --> 00:28:01,080
because we've been doing compiler work

00:27:58,320 --> 00:28:05,700
instead but that that bit will flip over

00:28:01,080 --> 00:28:08,040
soon one work on to 13 starts Daniel hi

00:28:05,700 --> 00:28:11,520
Adrian it's it's my turn to heckle hello

00:28:08,040 --> 00:28:13,799
hi this is this is maybe Cole heckle

00:28:11,520 --> 00:28:15,720
please ok I will have a Kohaku because

00:28:13,799 --> 00:28:19,169
that's better than heckling it generates

00:28:15,720 --> 00:28:20,309
an infinite amount of noise so the the

00:28:19,169 --> 00:28:22,290
question I have is actually kind of a

00:28:20,309 --> 00:28:23,850
continuation of this discussion could

00:28:22,290 --> 00:28:26,520
you sort of elaborate in general and

00:28:23,850 --> 00:28:29,220
what you see is like the path the pace

00:28:26,520 --> 00:28:30,990
for deprecation and removal and changing

00:28:29,220 --> 00:28:32,250
of libraries because there's a deal to

00:28:30,990 --> 00:28:33,450
set the stage right not just in

00:28:32,250 --> 00:28:34,950
collections there's a lot of stuff in

00:28:33,450 --> 00:28:36,120
the standard library that I mean I think

00:28:34,950 --> 00:28:38,130
now that we understand the language

00:28:36,120 --> 00:28:41,160
better than we did 10 years ago we know

00:28:38,130 --> 00:28:42,330
how to do it better so how do we how do

00:28:41,160 --> 00:28:43,740
we take steps forward and Matt and

00:28:42,330 --> 00:28:45,360
what's what's the pacing what does it

00:28:43,740 --> 00:28:46,620
look like yeah i mean that's that's a

00:28:45,360 --> 00:28:49,169
great question and I think it's one that

00:28:46,620 --> 00:28:51,840
we we should you know answer in one of

00:28:49,169 --> 00:28:53,970
the the kind of expert group that is the

00:28:51,840 --> 00:28:55,620
slope committee but i can i can give you

00:28:53,970 --> 00:28:58,770
kind of a sense of what i think we

00:28:55,620 --> 00:29:00,809
should do and i mean when i when i talk

00:28:58,770 --> 00:29:02,160
about you know evolving scala slowly in

00:29:00,809 --> 00:29:03,870
this kyle 2 x series and what you've

00:29:02,160 --> 00:29:05,730
come to expect from upgrading from to 10

00:29:03,870 --> 00:29:09,540
to 11 to 12 that doesn't mean I wanted

00:29:05,730 --> 00:29:10,740
stagnate as we said already and so some

00:29:09,540 --> 00:29:13,100
things that we've been thinking about is

00:29:10,740 --> 00:29:16,890
for example introducing deprecation

00:29:13,100 --> 00:29:19,530
during a cycle so let's say into 12 1 a

00:29:16,890 --> 00:29:22,799
2 time frame it'll become clear what we

00:29:19,530 --> 00:29:24,630
want for the collections in 213 we could

00:29:22,799 --> 00:29:26,610
deprecated more so that people get a

00:29:24,630 --> 00:29:28,470
heads up during 212 still even though

00:29:26,610 --> 00:29:31,669
technically we only normally do that

00:29:28,470 --> 00:29:35,100
during 2 12 0 or two to 11 0 and so on

00:29:31,669 --> 00:29:36,240
so to kind of reduce the lead time

00:29:35,100 --> 00:29:37,679
because that's that's what we're all

00:29:36,240 --> 00:29:40,230
concerned with here is like how quickly

00:29:37,679 --> 00:29:42,059
can we change the language it doesn't

00:29:40,230 --> 00:29:45,840
can it doesn't have to be on an 18 month

00:29:42,059 --> 00:29:48,419
cycle and we're definitely thinking

00:29:45,840 --> 00:29:52,230
about this and maybe we should think out

00:29:48,419 --> 00:29:53,580
loud a little bit more is how we can

00:29:52,230 --> 00:29:55,169
more Thai some of that time where we can

00:29:53,580 --> 00:29:57,990
eat sit into some of that lead time and

00:29:55,169 --> 00:29:58,440
so deprecating during a cycle is one of

00:29:57,990 --> 00:30:00,389
the ways of

00:29:58,440 --> 00:30:02,190
we thought about and for example letting

00:30:00,389 --> 00:30:03,899
you configure how much of the

00:30:02,190 --> 00:30:07,110
deprecation you want to hear about

00:30:03,899 --> 00:30:10,769
during the error or warning reporting

00:30:07,110 --> 00:30:12,419
process so for example you could say any

00:30:10,769 --> 00:30:16,049
deprecation that was introduced into

00:30:12,419 --> 00:30:17,370
12-0 as an error any you know that

00:30:16,049 --> 00:30:19,559
prediction that was later was a warning

00:30:17,370 --> 00:30:22,019
anything that was into 11-0 pretend

00:30:19,559 --> 00:30:23,340
that's not even there anymore you know

00:30:22,019 --> 00:30:24,899
there's a whole spectrum that we've been

00:30:23,340 --> 00:30:26,250
talking about for a long time now about

00:30:24,899 --> 00:30:29,309
how the compiler could help you in

00:30:26,250 --> 00:30:32,610
migrating and how it could help us or

00:30:29,309 --> 00:30:34,200
enable us to move a little bit faster in

00:30:32,610 --> 00:30:36,120
terms of changing the libraries and so

00:30:34,200 --> 00:30:39,360
yes there's a lot of craft that we want

00:30:36,120 --> 00:30:41,009
to get rid of and there's also a lot of

00:30:39,360 --> 00:30:43,230
users out there that we don't want to

00:30:41,009 --> 00:30:45,029
unnecessarily inconvenience and it's

00:30:43,230 --> 00:30:47,340
finding that balance that is hard I mean

00:30:45,029 --> 00:30:48,960
we don't have the answers there and

00:30:47,340 --> 00:30:50,909
we're definitely looking for feedback on

00:30:48,960 --> 00:30:52,980
how we're doing and how we could do

00:30:50,909 --> 00:30:54,870
better and that's one of the key things

00:30:52,980 --> 00:30:57,090
that you know I'm excited that we have

00:30:54,870 --> 00:31:01,889
discala senoir now to guide this process

00:30:57,090 --> 00:31:04,799
as an external party to you know our our

00:31:01,889 --> 00:31:07,350
team at light band that has you know we

00:31:04,799 --> 00:31:09,269
care a lot about the stability both for

00:31:07,350 --> 00:31:11,039
enterprise users and you know the

00:31:09,269 --> 00:31:13,740
excitement of the community to introduce

00:31:11,039 --> 00:31:16,620
new features but we're a small team and

00:31:13,740 --> 00:31:19,379
and we have unknown bias that we that we

00:31:16,620 --> 00:31:20,909
favor stability and so but we're

00:31:19,379 --> 00:31:25,110
definitely open and tweaking that

00:31:20,909 --> 00:31:28,049
balance and finding ways to to to evolve

00:31:25,110 --> 00:31:29,759
more quickly without breaking things I

00:31:28,049 --> 00:31:31,860
mean like changes have to carry their

00:31:29,759 --> 00:31:37,440
own weight I mean I'm willing to break

00:31:31,860 --> 00:31:39,659
things and introduce new things if it's

00:31:37,440 --> 00:31:42,480
clear that that will that on balance

00:31:39,659 --> 00:31:44,129
that will be a positive change right and

00:31:42,480 --> 00:31:45,539
I don't know how to measure that so

00:31:44,129 --> 00:31:47,399
that's that's definitely something that

00:31:45,539 --> 00:31:50,820
for example the community build is

00:31:47,399 --> 00:31:52,889
instrumental in you know they have a 1.5

00:31:50,820 --> 00:31:54,990
million lines of code in there and if we

00:31:52,889 --> 00:31:56,549
can compile that saying you know all

00:31:54,990 --> 00:31:59,610
deprecation warnings are now errors

00:31:56,549 --> 00:32:02,070
let's see how we can get those out of

00:31:59,610 --> 00:32:03,750
there then we can gain some more

00:32:02,070 --> 00:32:06,419
confidence that that we can move more

00:32:03,750 --> 00:32:08,940
quickly and we already have been using

00:32:06,419 --> 00:32:10,600
the community built to do trials like

00:32:08,940 --> 00:32:12,549
that to do to run

00:32:10,600 --> 00:32:16,179
the experiments like that and i would

00:32:12,549 --> 00:32:19,860
love to do more of those I have a

00:32:16,179 --> 00:32:19,860
question excellent line

00:32:24,770 --> 00:32:37,640
see it the other way speaking of that SI

00:32:31,670 --> 00:32:41,240
2712 will that ever make at 211 92 uh

00:32:37,640 --> 00:32:43,550
well uh I thought you said 29 but I

00:32:41,240 --> 00:32:45,200
missed the 11 in the middle there um why

00:32:43,550 --> 00:32:51,020
would you want that in 29 minutes still

00:32:45,200 --> 00:32:55,220
using it i can now to 11 9 ok um i won't

00:32:51,020 --> 00:32:57,920
submit the poor request but you can um

00:32:55,220 --> 00:32:59,270
you know we don't so I mean I'm happy to

00:32:57,920 --> 00:33:01,580
talk about this a little bit more so I

00:32:59,270 --> 00:33:05,840
mean first off I want to say you know I

00:33:01,580 --> 00:33:10,880
really I oh sorry sorry sorry so for

00:33:05,840 --> 00:33:16,190
context it's that number that I refused

00:33:10,880 --> 00:33:18,800
to memorize or recognize but it's it's

00:33:16,190 --> 00:33:21,320
about ok so when when we introduced hype

00:33:18,800 --> 00:33:23,030
constructor polymorphism the next

00:33:21,320 --> 00:33:24,980
question was how do you generalize type

00:33:23,030 --> 00:33:26,570
inference to deal with now that there's

00:33:24,980 --> 00:33:28,670
type constructors that are expected for

00:33:26,570 --> 00:33:33,110
the arguments and then the question

00:33:28,670 --> 00:33:34,490
becomes higher order unification which

00:33:33,110 --> 00:33:37,250
you know in fairness this pull request

00:33:34,490 --> 00:33:38,540
makes a dent in but it doesn't solve so

00:33:37,250 --> 00:33:45,200
higher-order deviation is a very hard

00:33:38,540 --> 00:33:47,660
problem and it basically you know yeah

00:33:45,200 --> 00:33:50,690
it's a very hardy 11 seen it there's an

00:33:47,660 --> 00:33:54,230
open pull request against the 212 ranch

00:33:50,690 --> 00:33:58,490
from mile seven that that has a proposed

00:33:54,230 --> 00:34:03,170
change to how how typer does this that

00:33:58,490 --> 00:34:05,030
like it's hard to say if it totally

00:34:03,170 --> 00:34:09,950
fixes the problem but it's certainly no

00:34:05,030 --> 00:34:12,590
it's not Martin a diagnosis I mean it's

00:34:09,950 --> 00:34:14,720
I mean I I welcome the change and I am

00:34:12,590 --> 00:34:16,280
very excited that you know we're having

00:34:14,720 --> 00:34:18,710
this discussion is poor requests and I'm

00:34:16,280 --> 00:34:21,140
i'll be happy to to merge this once we

00:34:18,710 --> 00:34:22,429
get you know the feedback address but so

00:34:21,140 --> 00:34:24,620
to answer your question first which is

00:34:22,429 --> 00:34:27,860
I'm sorry I didn't it's an improvement

00:34:24,620 --> 00:34:31,429
to type inference which in this area is

00:34:27,860 --> 00:34:33,440
a bit of a hack already so we have

00:34:31,429 --> 00:34:35,390
certain kind of known orders and which

00:34:33,440 --> 00:34:38,300
types aren't up constructors are found

00:34:35,390 --> 00:34:39,770
and kind of like distilled from a long

00:34:38,300 --> 00:34:42,200
hierarchy and a lot and a long list of

00:34:39,770 --> 00:34:48,020
possibilities for how you could kind of

00:34:42,200 --> 00:34:50,420
single out a type and it basically

00:34:48,020 --> 00:34:52,250
becomes a problem of program synthesis

00:34:50,420 --> 00:34:54,800
almost likes instance type constructors

00:34:52,250 --> 00:34:56,960
are functions / types you're basically

00:34:54,800 --> 00:34:59,840
asking the question like hey i wanna i

00:34:56,960 --> 00:35:01,970
want to type arity to that takes this

00:34:59,840 --> 00:35:03,860
and this to that how could i possibly

00:35:01,970 --> 00:35:06,980
get there so it's kind of similar to

00:35:03,860 --> 00:35:09,410
saying well I want to abstract extract

00:35:06,980 --> 00:35:11,270
like a component from a tuple you know

00:35:09,410 --> 00:35:12,800
give me a function that does that and in

00:35:11,270 --> 00:35:14,960
this case as humans it's clear that

00:35:12,800 --> 00:35:16,610
that's that how you just you just call

00:35:14,960 --> 00:35:18,200
that method underscore too and you get

00:35:16,610 --> 00:35:21,650
you get a function that does what you

00:35:18,200 --> 00:35:26,090
want it to do on type constructors

00:35:21,650 --> 00:35:28,370
that's it's possible to do like hiring

00:35:26,090 --> 00:35:30,080
vacation like if you go to two languages

00:35:28,370 --> 00:35:31,880
that they are built on unification you

00:35:30,080 --> 00:35:34,340
get that but I couldn't tell you how

00:35:31,880 --> 00:35:36,230
they do it to be honest with you I'm not

00:35:34,340 --> 00:35:37,640
I have never studied that in depth

00:35:36,230 --> 00:35:39,770
because it's a very complicated problem

00:35:37,640 --> 00:35:42,230
especially since you have subtyping in

00:35:39,770 --> 00:35:46,990
Scala I don't know how you would do it

00:35:42,230 --> 00:35:50,030
like in a kind of a clean principled way

00:35:46,990 --> 00:35:53,720
but since it's already a big hag we

00:35:50,030 --> 00:35:55,790
added another one and it's not it's not

00:35:53,720 --> 00:35:58,130
it's not a bad hack it's just a

00:35:55,790 --> 00:36:00,440
refinement of how we kind of run over

00:35:58,130 --> 00:36:03,170
all the possible solutions in a in a

00:36:00,440 --> 00:36:05,300
predictable way or I mean if you really

00:36:03,170 --> 00:36:06,800
like worked hard on figuring out how to

00:36:05,300 --> 00:36:08,540
predict these things but it is a

00:36:06,800 --> 00:36:10,160
predictable way to kind of single out

00:36:08,540 --> 00:36:13,220
type constructors as a candidate for

00:36:10,160 --> 00:36:16,640
type inference and so miles really went

00:36:13,220 --> 00:36:18,500
in and figured it out and I really I'm

00:36:16,640 --> 00:36:21,200
thankful I'm impressed that he did that

00:36:18,500 --> 00:36:23,300
but I want to be clear that that ticket

00:36:21,200 --> 00:36:25,280
you know has been open for a long time

00:36:23,300 --> 00:36:26,870
because it's a really hard problem and I

00:36:25,280 --> 00:36:30,920
don't think anybody knows how to solve

00:36:26,870 --> 00:36:33,200
it properly like fully but that said

00:36:30,920 --> 00:36:35,270
this is a nice this is a nice enough way

00:36:33,200 --> 00:36:39,530
to add it to what we already have and

00:36:35,270 --> 00:36:41,900
and so yes it it'll it might make its

00:36:39,530 --> 00:36:44,090
way into to 11 9 it once it's you know

00:36:41,900 --> 00:36:46,970
it's into 12 and if someone wants to

00:36:44,090 --> 00:36:49,690
backport it I don't think we've ever

00:36:46,970 --> 00:36:51,920
rejected a backboard to older series

00:36:49,690 --> 00:36:53,809
except if they broke binary can pass

00:36:51,920 --> 00:36:55,880
ability or like clear you know

00:36:53,809 --> 00:36:58,520
requirements that we have for the 211

00:36:55,880 --> 00:37:01,220
series but I have no problem adding

00:36:58,520 --> 00:37:02,450
something under a flag there if we

00:37:01,220 --> 00:37:05,180
didn't have a problem adding it under a

00:37:02,450 --> 00:37:06,530
flag the in the later release I have

00:37:05,180 --> 00:37:08,089
problems with adding things on their

00:37:06,530 --> 00:37:11,299
flags in general but that's another

00:37:08,089 --> 00:37:15,230
discussion so do you think that

00:37:11,299 --> 00:37:17,540
eventually this fixed to 27 12 it can

00:37:15,230 --> 00:37:20,569
make it into the official distribution

00:37:17,540 --> 00:37:22,250
without any flags so what kind of we

00:37:20,569 --> 00:37:23,750
don't we don't add things under flags if

00:37:22,250 --> 00:37:26,240
we don't intend that to be the case

00:37:23,750 --> 00:37:28,430
eventually so what kind of migration

00:37:26,240 --> 00:37:33,470
policy do then envision for the things

00:37:28,430 --> 00:37:36,140
um the same as as for other changes we

00:37:33,470 --> 00:37:38,089
we have to run experiments and convince

00:37:36,140 --> 00:37:39,799
ourselves that we can convince all whole

00:37:38,089 --> 00:37:44,540
people affected by it are willing to

00:37:39,799 --> 00:37:46,369
upgrade their code my my understanding

00:37:44,540 --> 00:37:47,660
is that this is not a change that is

00:37:46,369 --> 00:37:49,579
going to break a lot of code retro

00:37:47,660 --> 00:37:51,470
actively there are some breakage that

00:37:49,579 --> 00:37:54,349
you know and that's part of the ongoing

00:37:51,470 --> 00:37:58,819
discussion is like you know have

00:37:54,349 --> 00:38:02,660
something to say about that so you know

00:37:58,819 --> 00:38:05,540
that that's I mean the change is like

00:38:02,660 --> 00:38:07,490
five lines right that's not that that's

00:38:05,540 --> 00:38:09,260
hard to do and hard to figure out as we

00:38:07,490 --> 00:38:12,049
all know those lines are not to don't

00:38:09,260 --> 00:38:15,890
just come to you but that's not the

00:38:12,049 --> 00:38:18,970
hardest part in this case and and so

00:38:15,890 --> 00:38:21,410
figuring out a way to to to make this

00:38:18,970 --> 00:38:23,359
kind of like to retrofit this on

00:38:21,410 --> 00:38:25,430
existing code you know I I'm always

00:38:23,359 --> 00:38:27,109
impressed when I think about like single

00:38:25,430 --> 00:38:29,270
abstract method types or a beautiful way

00:38:27,109 --> 00:38:31,970
to retrofit function types on a language

00:38:29,270 --> 00:38:36,200
they don't have them but it bites you in

00:38:31,970 --> 00:38:37,400
all kinds of unpredictable ways and we

00:38:36,200 --> 00:38:38,750
can talk about that it like in a

00:38:37,400 --> 00:38:42,230
different question perhaps if you wanted

00:38:38,750 --> 00:38:43,670
to ask that hinted but so figuring out

00:38:42,230 --> 00:38:45,290
all these interactions figuring like

00:38:43,670 --> 00:38:47,180
getting all the involved parties on the

00:38:45,290 --> 00:38:49,250
pull request and figuring out how we can

00:38:47,180 --> 00:38:52,250
really set a path for everybody to

00:38:49,250 --> 00:38:53,809
evolve their code or to this new

00:38:52,250 --> 00:38:55,430
mechanism that's going to take time and

00:38:53,809 --> 00:38:59,210
so to answer Eugene's question I don't

00:38:55,430 --> 00:39:00,770
know but it really the intention when we

00:38:59,210 --> 00:39:02,240
merge something under the experimental

00:39:00,770 --> 00:39:03,920
flag is that we think this is is an

00:39:02,240 --> 00:39:05,250
acceptable change I mean want to find a

00:39:03,920 --> 00:39:09,000
way to making

00:39:05,250 --> 00:39:10,560
is an official thing but before we do

00:39:09,000 --> 00:39:13,620
that we need to we need to get everyone

00:39:10,560 --> 00:39:14,850
on board and committed to to upgrading

00:39:13,620 --> 00:39:16,140
so that we can all be in the latest

00:39:14,850 --> 00:39:18,240
version and then we can all have our

00:39:16,140 --> 00:39:20,850
code you know keep compiling in some way

00:39:18,240 --> 00:39:23,520
so speaking of getting people on board

00:39:20,850 --> 00:39:27,390
this obviously involves well migrating

00:39:23,520 --> 00:39:28,950
the ecosystem and eventually library

00:39:27,390 --> 00:39:30,750
authors that try and using this new

00:39:28,950 --> 00:39:32,760
feature and then publish their these

00:39:30,750 --> 00:39:35,340
libraries and then other library authors

00:39:32,760 --> 00:39:36,870
are dependent on them oh yeah but I mean

00:39:35,340 --> 00:39:38,220
right so what I like about this change

00:39:36,870 --> 00:39:41,310
is that it's a local thing it's not

00:39:38,220 --> 00:39:43,020
something that's viral so it's not like

00:39:41,310 --> 00:39:46,350
when you compile under experimental now

00:39:43,020 --> 00:39:49,680
to get this fix for this bug number that

00:39:46,350 --> 00:39:51,510
i forgot again but it doesn't require

00:39:49,680 --> 00:39:53,310
other people to compile under this under

00:39:51,510 --> 00:39:55,350
this flag and that's one of the key

00:39:53,310 --> 00:39:56,990
requirements that i have it shouldn't be

00:39:55,350 --> 00:39:58,770
a viral thing like it shouldn't

00:39:56,990 --> 00:40:00,540
basically spread through the whole

00:39:58,770 --> 00:40:03,690
ecosystem if you want to experiment with

00:40:00,540 --> 00:40:05,010
this and ultimately force other people

00:40:03,690 --> 00:40:06,630
to experiment with this so that their

00:40:05,010 --> 00:40:11,210
code will be compatible with it and I

00:40:06,630 --> 00:40:12,990
want to yield to you bill in a second I

00:40:11,210 --> 00:40:17,010
shouldn't have lost my train of thought

00:40:12,990 --> 00:40:18,450
maybe all you'll do you know okay yeah I

00:40:17,010 --> 00:40:20,670
wasn't sure I was gonna say anything cuz

00:40:18,450 --> 00:40:22,050
this is about me I may be well no it's

00:40:20,670 --> 00:40:23,940
not about you but it's about your code

00:40:22,050 --> 00:40:25,620
yeah I mean which I agree is an

00:40:23,940 --> 00:40:28,410
important thing like I'm like I think

00:40:25,620 --> 00:40:31,260
I'm gonna lose this okay but what I

00:40:28,410 --> 00:40:33,000
think it's important to address a pain

00:40:31,260 --> 00:40:34,590
there's a user pain for you have to use

00:40:33,000 --> 00:40:36,600
these type lenses and be nice to get rid

00:40:34,590 --> 00:40:38,190
of them at least most the time and it

00:40:36,600 --> 00:40:41,580
does that but it does it in a way that

00:40:38,190 --> 00:40:44,100
would want people to design a certain

00:40:41,580 --> 00:40:45,720
way that I wish there would we could

00:40:44,100 --> 00:40:48,240
find a way to dress that pain give her

00:40:45,720 --> 00:40:52,080
the type lamp that was one that is that

00:40:48,240 --> 00:40:53,460
allows people to sort of pick Wow yeah I

00:40:52,080 --> 00:40:54,840
don't how to say it but just basically

00:40:53,460 --> 00:40:56,580
it's like you know I would second what

00:40:54,840 --> 00:40:59,910
he says it's not obvious how to solve it

00:40:56,580 --> 00:41:01,650
this is one way to solve it that it'd be

00:40:59,910 --> 00:41:04,950
nice if we could find some some way that

00:41:01,650 --> 00:41:07,620
would work that you know that would both

00:41:04,950 --> 00:41:09,120
solve the problem but not yeah I think

00:41:07,620 --> 00:41:11,880
yeah I think we can conclude this

00:41:09,120 --> 00:41:15,120
because I okay but that's what I yeah I

00:41:11,880 --> 00:41:16,860
agree with you and I mean I think this

00:41:15,120 --> 00:41:18,810
is this is a topic that really affect a

00:41:16,860 --> 00:41:22,630
small minority of the of this

00:41:18,810 --> 00:41:24,280
community that I don't want to pretend

00:41:22,630 --> 00:41:28,450
like it like that isn't an esoteric

00:41:24,280 --> 00:41:30,430
thing to do that doesn't mean it's a bad

00:41:28,450 --> 00:41:32,410
thing to do or that people shouldn't do

00:41:30,430 --> 00:41:35,530
it at all but let's be honest here not

00:41:32,410 --> 00:41:37,150
everybody needs higher unification for

00:41:35,530 --> 00:41:38,920
type inference or at least some

00:41:37,150 --> 00:41:43,000
approximation for it in their code base

00:41:38,920 --> 00:41:45,460
and I got started with Scala because I

00:41:43,000 --> 00:41:46,840
was interested in exactly in this and

00:41:45,460 --> 00:41:52,150
data type generic programming so what

00:41:46,840 --> 00:41:54,040
what shapeless is now and it's very

00:41:52,150 --> 00:41:55,540
impressive how far we've gotten in Scala

00:41:54,040 --> 00:41:58,600
in the last 10 years and enabling this

00:41:55,540 --> 00:42:02,710
kind of this kind of machinery and is

00:41:58,600 --> 00:42:05,290
kind of automation but in general I

00:42:02,710 --> 00:42:06,490
think one of the important things that

00:42:05,290 --> 00:42:08,620
is happening in the scale community is

00:42:06,490 --> 00:42:10,030
finding a balance between what is

00:42:08,620 --> 00:42:13,390
available to us and what we're actually

00:42:10,030 --> 00:42:15,370
going to use and and that's part of

00:42:13,390 --> 00:42:18,490
everybody's you know responsibility in

00:42:15,370 --> 00:42:22,210
the community and us as you know members

00:42:18,490 --> 00:42:23,500
of the of the designers and implementers

00:42:22,210 --> 00:42:26,500
of the languages it's telling people

00:42:23,500 --> 00:42:27,910
like look abstractions are great but

00:42:26,500 --> 00:42:31,150
they also need to carry their own weight

00:42:27,910 --> 00:42:34,090
and you know losing some type precision

00:42:31,150 --> 00:42:36,580
for more understandable code for more

00:42:34,090 --> 00:42:38,110
maintainable code is sometimes a

00:42:36,580 --> 00:42:40,060
trade-off that is worth making I mean

00:42:38,110 --> 00:42:42,160
sometimes it's okay to have two lines of

00:42:40,060 --> 00:42:44,680
duplicated code if the abstraction is

00:42:42,160 --> 00:42:48,340
actually a really long other line that

00:42:44,680 --> 00:42:49,780
no one will understand later and I think

00:42:48,340 --> 00:42:54,190
that's kind of a coming of age that we

00:42:49,780 --> 00:42:56,710
that I personally feel is important i

00:42:54,190 --> 00:42:58,840
think it's it's easy to get very excited

00:42:56,710 --> 00:43:01,080
about all the new features and see where

00:42:58,840 --> 00:43:04,960
you can apply them but then ultimately

00:43:01,080 --> 00:43:07,660
what that improve in your program how

00:43:04,960 --> 00:43:09,720
did that make it more maintainable or

00:43:07,660 --> 00:43:12,010
more readable or how did that really

00:43:09,720 --> 00:43:16,840
increase the expressivity of what you're

00:43:12,010 --> 00:43:18,580
trying to trying to do so and I think

00:43:16,840 --> 00:43:20,860
we're kind of you know at the cusp ear

00:43:18,580 --> 00:43:22,450
with stuff like this with type

00:43:20,860 --> 00:43:24,550
constructor and friends and chapels in

00:43:22,450 --> 00:43:26,590
general that it certainly has its use

00:43:24,550 --> 00:43:28,240
cases but for example into compiler we

00:43:26,590 --> 00:43:31,270
just had code or boilerplate right we

00:43:28,240 --> 00:43:32,290
have our Traverse errs that are just

00:43:31,270 --> 00:43:35,800
written

00:43:32,290 --> 00:43:37,300
by hand to to reify the structure of our

00:43:35,800 --> 00:43:40,240
data types and whenever the data types

00:43:37,300 --> 00:43:41,380
change we rewrite those traverses but I

00:43:40,240 --> 00:43:46,360
can tell you it doesn't happen very

00:43:41,380 --> 00:43:47,830
often and and that's one of the things

00:43:46,360 --> 00:43:49,630
that I didn't believe in when i started

00:43:47,830 --> 00:43:52,930
scholars like must get rid of all

00:43:49,630 --> 00:43:54,160
boilerplate by any possible means and i

00:43:52,930 --> 00:43:56,380
don't i personally don't believe that

00:43:54,160 --> 00:43:57,790
anymore I believe some boilerplate is

00:43:56,380 --> 00:44:00,400
just there because the cost to get rid

00:43:57,790 --> 00:44:03,100
of it is so high that I don't I wouldn't

00:44:00,400 --> 00:44:06,550
recognize it anymore and maybe that's

00:44:03,100 --> 00:44:09,460
like that's like a meta point but

00:44:06,550 --> 00:44:11,890
unfortunately it looks like I'm already

00:44:09,460 --> 00:44:13,120
two minutes overtime and I made all

00:44:11,890 --> 00:44:17,640
kinds of promises that i was going to

00:44:13,120 --> 00:44:19,930
end on time which now i have broken I

00:44:17,640 --> 00:44:24,910
don't see anybody jumping up and down

00:44:19,930 --> 00:44:26,020
yet so um I also don't sorry as you find

00:44:24,910 --> 00:44:27,370
another question can I just say one

00:44:26,020 --> 00:44:29,020
thing optimistic i think there's a way

00:44:27,370 --> 00:44:31,000
to do it and the one thing about the

00:44:29,020 --> 00:44:33,550
Scala is we innovate we find ways to do

00:44:31,000 --> 00:44:35,110
things and the you know that I think I

00:44:33,550 --> 00:44:37,000
just want to say something optimistic

00:44:35,110 --> 00:44:39,970
about it yeah no I mean I am optimistic

00:44:37,000 --> 00:44:43,930
about this I think this is absolutely

00:44:39,970 --> 00:44:46,240
thank you bow I'm inai my nature of i'm

00:44:43,930 --> 00:44:49,600
a i'm from belgium and the weather

00:44:46,240 --> 00:44:54,070
always sucks there and so it may may you

00:44:49,600 --> 00:44:55,240
know it may affect my my my how I come

00:44:54,070 --> 00:44:57,430
across sometimes but I am very

00:44:55,240 --> 00:44:58,240
optimistic about this and I think it's

00:44:57,430 --> 00:45:00,490
very important that we have these

00:44:58,240 --> 00:45:02,500
discussions but i think you know that's

00:45:00,490 --> 00:45:04,690
a voice that isn't hurt often enough

00:45:02,500 --> 00:45:06,190
it's saying like look you know what does

00:45:04,690 --> 00:45:07,690
this abstraction give us what does this

00:45:06,190 --> 00:45:09,370
craziness at the type of will give us

00:45:07,690 --> 00:45:11,590
okay sorry not craziness i meant in a

00:45:09,370 --> 00:45:14,380
general way I meant what does this you

00:45:11,590 --> 00:45:16,750
know complex machinery give us and I say

00:45:14,380 --> 00:45:19,480
that very lovingly having spent a lot of

00:45:16,750 --> 00:45:21,460
my time as in grad school germany during

00:45:19,480 --> 00:45:23,710
my postdoc and so on on this stuff right

00:45:21,460 --> 00:45:25,750
i'm not saying just dismissively i'm

00:45:23,710 --> 00:45:30,460
saying as you know as someone who cares

00:45:25,750 --> 00:45:31,780
a lot about this and yeah i think it's

00:45:30,460 --> 00:45:34,630
great that we have this discussion and i

00:45:31,780 --> 00:45:36,580
would love to see more of those both you

00:45:34,630 --> 00:45:39,760
know through channels like the scala

00:45:36,580 --> 00:45:43,060
center like expert groups around around

00:45:39,760 --> 00:45:45,220
a type level at you know at the sip slip

00:45:43,060 --> 00:45:45,760
committee meetings I mean on the on the

00:45:45,220 --> 00:45:47,980
mailing

00:45:45,760 --> 00:45:49,810
it's like when we discussed these these

00:45:47,980 --> 00:45:52,300
things first of all you know like i said

00:45:49,810 --> 00:45:53,770
before you are not your code and you are

00:45:52,300 --> 00:45:55,210
not your abstractions you are not your

00:45:53,770 --> 00:45:57,160
library you're very proud of them and

00:45:55,210 --> 00:46:00,070
you should be but let's have a

00:45:57,160 --> 00:46:01,510
discussion that is that is you know more

00:46:00,070 --> 00:46:03,340
about the intrinsic merits of these

00:46:01,510 --> 00:46:06,880
things and acknowledge that there are

00:46:03,340 --> 00:46:09,910
trade-offs here and I mean that has a

00:46:06,880 --> 00:46:14,200
very positive thing okay and I think I

00:46:09,910 --> 00:46:17,320
have to wrap up now so thank you all

00:46:14,200 --> 00:46:19,930
very much for coming I hope you enjoyed

00:46:17,320 --> 00:46:23,460
it i did see you next time perhaps in

00:46:19,930 --> 00:46:23,460

YouTube URL: https://www.youtube.com/watch?v=l2SZDSflztA


