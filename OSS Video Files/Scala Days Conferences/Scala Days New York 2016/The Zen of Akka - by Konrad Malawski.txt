Title: The Zen of Akka - by Konrad Malawski
Publication date: 2016-06-17
Playlist: Scala Days New York 2016
Description: 
	This talk was recorded at Scala Days New York, 2016. Follow along on Twitter @scaladays and on the website for more information http://scaladays.org/.

Abstract:
In order to be successful with asynchronous / reactive programming, when coming from synchronous execution models, you need to change your mindset and look at things from a slightly different perspective. In order to use Akka at it's best, you will have to change the way you think about application design (loosen coupling in space and time between components), and re-think what you've maybe learnt in the past. In this talk we uncover a number of rules that serve as a guide in designing concurrent distributed applications, how those apply to Akka and how they can help you in daily app development.
Captions: 
	00:00:01,889 --> 00:00:06,220
so welcome everyone to version of ARCA

00:00:05,109 --> 00:00:08,920
Talk

00:00:06,220 --> 00:00:11,850
if anyone has seen the talk previously

00:00:08,920 --> 00:00:14,350
it was online once but otherwise it's

00:00:11,850 --> 00:00:16,180
relatively fresh and I do want to

00:00:14,350 --> 00:00:19,779
actually repeat it because it's actually

00:00:16,180 --> 00:00:22,029
an important one right so we're gonna

00:00:19,779 --> 00:00:24,489
see what it's about in a few seconds so

00:00:22,029 --> 00:00:27,220
Who am I an economy laughs key work on

00:00:24,489 --> 00:00:29,349
Baraka team a tight band and also this

00:00:27,220 --> 00:00:32,020
very active streams TCK so technology

00:00:29,349 --> 00:00:33,850
technology compatibility kit and I'm

00:00:32,020 --> 00:00:36,010
doing a bunch of community and

00:00:33,850 --> 00:00:38,350
conference work like for example of a

00:00:36,010 --> 00:00:40,990
geek on conference in Poland which is

00:00:38,350 --> 00:00:42,760
going on right now so after this talk I

00:00:40,990 --> 00:00:44,680
actually have to go back so try to catch

00:00:42,760 --> 00:00:46,990
me quickly afterwards I hear questions

00:00:44,680 --> 00:00:49,060
if you don't catch me afterwards just

00:00:46,990 --> 00:00:52,150
tweet me and I'll be sure to get back to

00:00:49,060 --> 00:00:55,000
you so don't need to introduce our code

00:00:52,150 --> 00:00:57,310
to you so let's jump right in so my

00:00:55,000 --> 00:01:01,600
question is who's actually using our

00:00:57,310 --> 00:01:03,430
code okay who's like beginning to use

00:01:01,600 --> 00:01:04,509
our code like not very comfortable yet

00:01:03,430 --> 00:01:06,400
okay good

00:01:04,509 --> 00:01:09,420
so this is basically the right talk for

00:01:06,400 --> 00:01:13,600
you guys both who have raised your hands

00:01:09,420 --> 00:01:16,720
so the agenda is pretty much routine or

00:01:13,600 --> 00:01:19,180
so let's call it tips or patterns or

00:01:16,720 --> 00:01:21,370
anti patterns sometimes but I want to

00:01:19,180 --> 00:01:23,740
talk about and there are more or less

00:01:21,370 --> 00:01:26,350
related to each other but there's going

00:01:23,740 --> 00:01:29,920
to be a some topic jumping so where does

00:01:26,350 --> 00:01:31,510
the title of a talk come from maybe some

00:01:29,920 --> 00:01:34,390
of you have seen the type of programming

00:01:31,510 --> 00:01:36,549
book by Geoffrey James it's a hilarious

00:01:34,390 --> 00:01:38,400
book that tries to explain programming

00:01:36,549 --> 00:01:41,560
in the way of Tao like a Tao master

00:01:38,400 --> 00:01:43,450
explaining his and philosophy of

00:01:41,560 --> 00:01:45,970
programming there's another one zone of

00:01:43,450 --> 00:01:49,619
programming and I thought that that's a

00:01:45,970 --> 00:01:52,840
nice way to inspire maybe people so

00:01:49,619 --> 00:01:55,240
moving on so darker landscape so for

00:01:52,840 --> 00:01:58,210
those of you who didn't raise your hands

00:01:55,240 --> 00:01:59,920
before here's what occurs so occurs the

00:01:58,210 --> 00:02:02,470
toolkit and you basically pick and

00:01:59,920 --> 00:02:04,680
choose which other modules you want the

00:02:02,470 --> 00:02:07,500
core of it's being pretty much active

00:02:04,680 --> 00:02:09,810
right Sokka is mostly about actors of

00:02:07,500 --> 00:02:11,580
course we have other modules but true

00:02:09,810 --> 00:02:16,410
face everything is built on top of or

00:02:11,580 --> 00:02:19,380
around actors so I actually didn't have

00:02:16,410 --> 00:02:21,570
this tip previously when I did this talk

00:02:19,380 --> 00:02:23,190
but I figured it's how could I have

00:02:21,570 --> 00:02:27,870
forgotten the most important thing ever

00:02:23,190 --> 00:02:30,480
like messages so the zero option but we

00:02:27,870 --> 00:02:32,790
want to talk about today is messaging

00:02:30,480 --> 00:02:34,890
right so sometimes people think oh my

00:02:32,790 --> 00:02:37,320
god messaging this is so weird but when

00:02:34,890 --> 00:02:39,420
you think about it or ask Alan Kay so

00:02:37,320 --> 00:02:41,760
person who pretty much point four to an

00:02:39,420 --> 00:02:44,700
object-oriented programming it was

00:02:41,760 --> 00:02:46,950
always the thing about object-oriented

00:02:44,700 --> 00:02:49,290
programming to hide state to isolate the

00:02:46,950 --> 00:02:51,959
state in your kind of thing that no one

00:02:49,290 --> 00:02:54,720
else can touch and then to communicate

00:02:51,959 --> 00:02:56,880
via messaging so this is what our code

00:02:54,720 --> 00:02:59,820
is pretty much all about and we'll see

00:02:56,880 --> 00:03:03,510
how it actually is interesting because

00:02:59,820 --> 00:03:05,520
one actor is no actor of course you can

00:03:03,510 --> 00:03:09,480
have one actor and it's an ab it may be

00:03:05,520 --> 00:03:10,920
lonely or sad and yeah it can do a bunch

00:03:09,480 --> 00:03:13,200
of things so it can reply to messages

00:03:10,920 --> 00:03:16,080
that can drop a message if it wants to

00:03:13,200 --> 00:03:19,739
write and it also can shut your messages

00:03:16,080 --> 00:03:21,450
to its surf or spawn charge actors right

00:03:19,739 --> 00:03:26,130
it's pretty much the only things an

00:03:21,450 --> 00:03:27,959
actor can do so but at the point in time

00:03:26,130 --> 00:03:30,269
where you have a second actor already it

00:03:27,959 --> 00:03:32,519
becomes more interesting so let's say we

00:03:30,269 --> 00:03:35,010
have a yellow specialist Bob which you

00:03:32,519 --> 00:03:37,470
don't see as good but he's a yellow

00:03:35,010 --> 00:03:39,630
specialist here and you can delegate for

00:03:37,470 --> 00:03:42,870
yellow messages to a guy who's really

00:03:39,630 --> 00:03:45,420
good at handling those and here's where

00:03:42,870 --> 00:03:47,820
the interesting pedis and pattern starts

00:03:45,420 --> 00:03:49,860
to emerge like worker pools delegating

00:03:47,820 --> 00:03:52,019
the work to the right places sharding

00:03:49,860 --> 00:03:54,450
the messages somewhere and this all

00:03:52,019 --> 00:03:56,940
makes sense because messaging is so both

00:03:54,450 --> 00:03:58,980
easy to explain and understand and also

00:03:56,940 --> 00:04:01,170
it exactly matches what computers

00:03:58,980 --> 00:04:03,780
actually do I mean I put some message

00:04:01,170 --> 00:04:05,910
onto the wire someone gives me back

00:04:03,780 --> 00:04:08,160
another message right it all maps

00:04:05,910 --> 00:04:10,620
perfectly and interesting patterns

00:04:08,160 --> 00:04:13,230
emerge like directly replying to the

00:04:10,620 --> 00:04:15,660
original sender of a message if this

00:04:13,230 --> 00:04:16,440
would have been our RPC stuff it would

00:04:15,660 --> 00:04:18,900
have been the

00:04:16,440 --> 00:04:21,660
tire chain going back in returning right

00:04:18,900 --> 00:04:24,000
here we can do smarter stuff and more

00:04:21,660 --> 00:04:26,070
interesting communication patterns

00:04:24,000 --> 00:04:30,930
because we're more free to do different

00:04:26,070 --> 00:04:32,520
things so if you have one extra you're

00:04:30,930 --> 00:04:36,330
not really leveraging anything a car

00:04:32,520 --> 00:04:38,970
does to you helps you to build so have

00:04:36,330 --> 00:04:41,970
multiple ones one tip at the bottom here

00:04:38,970 --> 00:04:44,310
is to avoid active selection anyone know

00:04:41,970 --> 00:04:45,870
active selection of course if you right

00:04:44,310 --> 00:04:48,240
so the problem is sometimes people

00:04:45,870 --> 00:04:51,900
figure out that they can find an actor

00:04:48,240 --> 00:04:55,350
by just for a dress that they remember

00:04:51,900 --> 00:04:57,540
or hard-code summer etc etc and this is

00:04:55,350 --> 00:04:59,940
kind of like going to a random strangers

00:04:57,540 --> 00:05:02,160
house because you know where they live

00:04:59,940 --> 00:05:04,500
and taking their TV right so you should

00:05:02,160 --> 00:05:06,240
be introduced to a person right actors

00:05:04,500 --> 00:05:08,730
also should be introduced to one another

00:05:06,240 --> 00:05:10,080
right so I shouldn't be introduced to

00:05:08,730 --> 00:05:12,390
hell you if you want to talk about

00:05:10,080 --> 00:05:14,520
yellow messages here snacks or effort is

00:05:12,390 --> 00:05:16,290
good to handle yellow messages and it

00:05:14,520 --> 00:05:19,800
shouldn't be randomly guessing addresses

00:05:16,290 --> 00:05:22,320
of people which brings us to the second

00:05:19,800 --> 00:05:24,510
topic which is structuring your active

00:05:22,320 --> 00:05:27,210
systems in general so sometimes when

00:05:24,510 --> 00:05:30,300
people start out with our car they start

00:05:27,210 --> 00:05:32,490
lots of actors okay good we have more

00:05:30,300 --> 00:05:34,080
than one so it's it's better but it's

00:05:32,490 --> 00:05:36,600
not really structured it's this mess of

00:05:34,080 --> 00:05:39,870
pink and blue ones like all between each

00:05:36,600 --> 00:05:43,200
other this is actually how you can

00:05:39,870 --> 00:05:45,480
envision and visualize what happens when

00:05:43,200 --> 00:05:49,470
you do lots of system actor off right

00:05:45,480 --> 00:05:51,930
it's top level actors or as it gets more

00:05:49,470 --> 00:05:53,730
structured when you use context actor

00:05:51,930 --> 00:05:55,830
off right so I'm in an actor I'm

00:05:53,730 --> 00:05:58,200
spawning a child actor so there is a

00:05:55,830 --> 00:06:00,210
higher heat it starts to make sense so

00:05:58,200 --> 00:06:02,910
this small actor but I started is

00:06:00,210 --> 00:06:05,540
helping me to do my job right and it's

00:06:02,910 --> 00:06:09,030
structured in a nice understandable way

00:06:05,540 --> 00:06:11,640
so it's as easy as doing context and not

00:06:09,030 --> 00:06:13,290
system actor of the implications are the

00:06:11,640 --> 00:06:15,810
hierarchy and the supervision that you

00:06:13,290 --> 00:06:17,910
gain from it and of course the previous

00:06:15,810 --> 00:06:23,720
patterns also emerge so visca to be

00:06:17,910 --> 00:06:28,350
pools and and over Reuters etc so naming

00:06:23,720 --> 00:06:29,400
naming is hard and suddenly doubly so in

00:06:28,350 --> 00:06:30,840
actors

00:06:29,400 --> 00:06:33,210
I wouldn't say it's actually that hard

00:06:30,840 --> 00:06:36,180
it's just fits people are lazy including

00:06:33,210 --> 00:06:38,430
myself sometimes and we revert to using

00:06:36,180 --> 00:06:41,040
the default thing so what is the default

00:06:38,430 --> 00:06:43,530
name of an actor so you basically have a

00:06:41,040 --> 00:06:45,120
sequence number and for each charge that

00:06:43,530 --> 00:06:48,210
you start to increment the number and

00:06:45,120 --> 00:06:50,070
from that number we take basic Stroh

00:06:48,210 --> 00:06:52,290
which gives us names like dollar a

00:06:50,070 --> 00:06:55,139
dollar bid or receive of a first second

00:06:52,290 --> 00:06:57,680
third actor so why is this bad well

00:06:55,139 --> 00:07:00,240
let's say one of his actors blows up

00:06:57,680 --> 00:07:04,530
what was it doing what was its purpose

00:07:00,240 --> 00:07:06,930
in life I don't know it's a actor B

00:07:04,530 --> 00:07:08,789
actor so it's not very hard for when

00:07:06,930 --> 00:07:11,190
things go wrong right when you want a

00:07:08,789 --> 00:07:12,630
trace or debug your system so instead

00:07:11,190 --> 00:07:15,120
what you should be doing most of the

00:07:12,630 --> 00:07:17,280
time is actually giving them proper

00:07:15,120 --> 00:07:19,229
names right so here the second parameter

00:07:17,280 --> 00:07:23,699
after the props is for actor name and

00:07:19,229 --> 00:07:27,150
here I'm using an instrumental counter I

00:07:23,699 --> 00:07:29,340
have a multiple actors vut or some kind

00:07:27,150 --> 00:07:31,320
of worker and I name them fetch worker

00:07:29,340 --> 00:07:33,960
one fetch worker 2 it's already better

00:07:31,320 --> 00:07:36,120
when it blows up or I see something

00:07:33,960 --> 00:07:38,700
weird going on in velox I at least know

00:07:36,120 --> 00:07:41,070
ok it's a fetch worker can we do better

00:07:38,700 --> 00:07:44,550
than that and actually what isn't this

00:07:41,070 --> 00:07:47,220
built-in because people would ask I want

00:07:44,550 --> 00:07:49,139
with a sequential name generating finger

00:07:47,220 --> 00:07:51,300
by default well actually I think it's

00:07:49,139 --> 00:07:53,310
not the best thing we can do and I would

00:07:51,300 --> 00:07:55,530
prefer to encourage doing the best thing

00:07:53,310 --> 00:07:57,300
and not the seconds the best thing right

00:07:55,530 --> 00:07:59,220
so if you really want sequential names

00:07:57,300 --> 00:08:01,949
it's five lines of code like vats to

00:07:59,220 --> 00:08:03,270
have a generator but this is the thing

00:08:01,949 --> 00:08:05,699
we should all be doing all the time

00:08:03,270 --> 00:08:07,500
which is having a actual useful name

00:08:05,699 --> 00:08:09,240
okay so let's imagine I have this

00:08:07,500 --> 00:08:12,479
service vets fetching videos from

00:08:09,240 --> 00:08:14,669
YouTube Vimeo some video services and I

00:08:12,479 --> 00:08:17,760
can encode that okay

00:08:14,669 --> 00:08:20,160
fetch YouTube and then ID what this

00:08:17,760 --> 00:08:21,650
means is when when this actor has some

00:08:20,160 --> 00:08:24,570
trouble or it's logging things I know

00:08:21,650 --> 00:08:26,669
which video I'm talking about here and

00:08:24,570 --> 00:08:30,810
if it blows up I get it in the

00:08:26,669 --> 00:08:33,450
supervision as vCenter right so this is

00:08:30,810 --> 00:08:36,360
the parent catching the chart being

00:08:33,450 --> 00:08:38,520
failed and then we know which tired it

00:08:36,360 --> 00:08:40,800
was and we can log a useful error

00:08:38,520 --> 00:08:42,620
message right so it's all about being

00:08:40,800 --> 00:08:45,650
useful when things go wrong

00:08:42,620 --> 00:08:48,900
so this is the best way to do things

00:08:45,650 --> 00:08:51,120
small side note usually everybody knows

00:08:48,900 --> 00:08:53,790
this but somehow once you start hacking

00:08:51,120 --> 00:08:58,440
you forget about it right so obviously

00:08:53,790 --> 00:09:00,180
we know Scala has the nice string

00:08:58,440 --> 00:09:02,550
interpolation syntax which is the first

00:09:00,180 --> 00:09:05,010
line here so s and Vinay do a dollar

00:09:02,550 --> 00:09:07,650
sign and I can have a nicely readable

00:09:05,010 --> 00:09:09,840
error message there but of course we

00:09:07,650 --> 00:09:11,700
know this costs string contact nations

00:09:09,840 --> 00:09:14,550
right and it always contact Knights even

00:09:11,700 --> 00:09:18,030
though a debug level maybe it's not on

00:09:14,550 --> 00:09:20,100
right we all know that however it's as

00:09:18,030 --> 00:09:21,810
simple as doing the second style to

00:09:20,100 --> 00:09:23,490
avoid visa locations and I know

00:09:21,810 --> 00:09:25,410
everybody is like aurilla of course I

00:09:23,490 --> 00:09:27,390
know that but when I go to the customers

00:09:25,410 --> 00:09:29,250
see it in production and you know it's

00:09:27,390 --> 00:09:31,640
actually trashing the system with lots

00:09:29,250 --> 00:09:35,940
of lots of strings being contaminated so

00:09:31,640 --> 00:09:39,330
quick reminder so this is something that

00:09:35,940 --> 00:09:41,490
was originally pitched to me and during

00:09:39,330 --> 00:09:43,800
a talk actually by Jamie on and it's

00:09:41,490 --> 00:09:47,160
from matrix of mutability also known

00:09:43,800 --> 00:09:50,220
pain and it goes like that right and

00:09:47,160 --> 00:09:52,410
we've actually during this conference I

00:09:50,220 --> 00:09:54,870
already saw one of the mistakes I'm

00:09:52,410 --> 00:09:58,350
gonna explain here as well so be wary of

00:09:54,870 --> 00:10:00,450
it so we have this value and variable

00:09:58,350 --> 00:10:03,450
writing SCARA usually we should be using

00:10:00,450 --> 00:10:05,220
value nice immutable stuff and when we

00:10:03,450 --> 00:10:07,860
have different data structures like

00:10:05,220 --> 00:10:10,010
mutable or immutable data structures so

00:10:07,860 --> 00:10:12,540
if I put something in a immutable well

00:10:10,010 --> 00:10:14,070
woven it basically never changes and I'm

00:10:12,540 --> 00:10:17,430
really happy I can trust for thing it's

00:10:14,070 --> 00:10:19,560
like a fact right however most of the

00:10:17,430 --> 00:10:21,390
time things change because maybe I have

00:10:19,560 --> 00:10:24,780
some list of people I'm communicating

00:10:21,390 --> 00:10:27,270
with and I'm changing it so then I would

00:10:24,780 --> 00:10:29,190
argue that we should prefer a fair with

00:10:27,270 --> 00:10:33,630
the immutable data structure in it and

00:10:29,190 --> 00:10:36,810
not a mutable data structure and a value

00:10:33,630 --> 00:10:39,270
why do I say that because maybe I want

00:10:36,810 --> 00:10:41,490
to tell someone about the people I'm

00:10:39,270 --> 00:10:43,710
communicating with right this list and

00:10:41,490 --> 00:10:45,450
if I want to do that and I have a

00:10:43,710 --> 00:10:47,790
immutable data structure and I send it

00:10:45,450 --> 00:10:50,220
all over somewhere and a message and

00:10:47,790 --> 00:10:53,580
everybody is safe now on commuted that

00:10:50,220 --> 00:10:55,500
collection however when I accidentally

00:10:53,580 --> 00:10:55,850
send someone a mutable collection and

00:10:55,500 --> 00:10:58,339
waste

00:10:55,850 --> 00:11:00,769
mutating it under my feet that's not a

00:10:58,339 --> 00:11:03,319
good thing right and then we have the

00:11:00,769 --> 00:11:06,350
last case which you probably should

00:11:03,319 --> 00:11:09,410
always avoid I try to illustrate the

00:11:06,350 --> 00:11:12,529
pain and panic when I see that

00:11:09,410 --> 00:11:15,470
so mutable and var is really scary

00:11:12,529 --> 00:11:18,560
because so which were which style are we

00:11:15,470 --> 00:11:21,290
gonna mutate it both so a scary thing is

00:11:18,560 --> 00:11:23,480
this is the default in Java right verse

00:11:21,290 --> 00:11:25,190
immutable collections and you don't have

00:11:23,480 --> 00:11:27,079
final as the default you have to

00:11:25,190 --> 00:11:30,139
actually add the file to a reference

00:11:27,079 --> 00:11:33,259
field so one thing we're scholars

00:11:30,139 --> 00:11:35,990
already a bit better with trying to get

00:11:33,259 --> 00:11:39,620
you more left and more up on this scale

00:11:35,990 --> 00:11:42,350
right so remember trusting you tinker

00:11:39,620 --> 00:11:44,990
and seeing it in code is really simple

00:11:42,350 --> 00:11:47,600
you just look if for some youtuber or

00:11:44,990 --> 00:11:49,699
not a pro tip if you're using some kind

00:11:47,600 --> 00:11:52,370
of editor like IntelliJ or something

00:11:49,699 --> 00:11:54,680
else you can easily set up rules to

00:11:52,370 --> 00:11:56,660
color like mutable collections and

00:11:54,680 --> 00:11:58,339
bright write it with exclamation marks

00:11:56,660 --> 00:12:00,079
or something so you know that it's a

00:11:58,339 --> 00:12:04,880
mutable thing and it needs to be treated

00:12:00,079 --> 00:12:07,160
with care so still pretty much basics

00:12:04,880 --> 00:12:10,220
but you'd be surprised how sometimes we

00:12:07,160 --> 00:12:11,240
forget so next one is about blocking

00:12:10,220 --> 00:12:14,060
okay

00:12:11,240 --> 00:12:16,360
so quick reminder what blocking is

00:12:14,060 --> 00:12:19,100
blocking is with grey line on this

00:12:16,360 --> 00:12:21,470
diagram it basically means that I'm

00:12:19,100 --> 00:12:24,829
doing some long-running operation maybe

00:12:21,470 --> 00:12:27,019
file access maybe maybe some database

00:12:24,829 --> 00:12:29,779
access in a blocking way and I'm

00:12:27,019 --> 00:12:32,509
basically using up my fret and no one

00:12:29,779 --> 00:12:33,370
else can do something while I'm waiting

00:12:32,509 --> 00:12:35,750
there

00:12:33,370 --> 00:12:38,240
so blocking in simple terms is just

00:12:35,750 --> 00:12:40,459
wasting time because I could be doing

00:12:38,240 --> 00:12:45,470
something else and be notified once the

00:12:40,459 --> 00:12:47,959
thing has been completed so real example

00:12:45,470 --> 00:12:50,149
someone asking on Stack Overflow the

00:12:47,959 --> 00:12:53,389
question is are you CDP blocking in the

00:12:50,149 --> 00:12:54,709
future blocks for server and yeah I will

00:12:53,389 --> 00:12:58,130
highlight what I mean here

00:12:54,709 --> 00:13:00,589
so blocking causes blocking yes

00:12:58,130 --> 00:13:02,180
it causes blocking however I don't mean

00:13:00,589 --> 00:13:03,590
how to hack on the

00:13:02,180 --> 00:13:05,750
the question because it's a great

00:13:03,590 --> 00:13:08,320
question so what is actually happening

00:13:05,750 --> 00:13:11,660
here why did the server store like that

00:13:08,320 --> 00:13:13,670
some people might argue that blocking

00:13:11,660 --> 00:13:15,470
the event loop is for new you broke the

00:13:13,670 --> 00:13:18,800
build which is pretty much what is

00:13:15,470 --> 00:13:20,900
happening here so here's a nice diagram

00:13:18,800 --> 00:13:22,990
explaining what's actually happening and

00:13:20,900 --> 00:13:25,520
why the server grinded to a halt because

00:13:22,990 --> 00:13:27,650
on the left hand side we have a default

00:13:25,520 --> 00:13:29,420
dispatcher and you see we're using the

00:13:27,650 --> 00:13:32,000
default dispatcher from reactor system

00:13:29,420 --> 00:13:34,010
at the top fair so it means that future

00:13:32,000 --> 00:13:37,370
of at sleeping will be happening on the

00:13:34,010 --> 00:13:40,910
default dispatcher so all the bluish

00:13:37,370 --> 00:13:44,390
color is sleeping and the world does for

00:13:40,910 --> 00:13:44,660
app actually do something I'll help you

00:13:44,390 --> 00:13:47,630
out

00:13:44,660 --> 00:13:48,950
over where this one green tiny little

00:13:47,630 --> 00:13:52,730
bar that's for application actually

00:13:48,950 --> 00:13:56,120
running so we want to avoid that so how

00:13:52,730 --> 00:13:57,920
do we avoid that well actually Annika is

00:13:56,120 --> 00:14:00,020
really simple because we basically just

00:13:57,920 --> 00:14:03,640
need to configure a separate dispatcher

00:14:00,020 --> 00:14:07,370
and on that dispatcher we'll use a

00:14:03,640 --> 00:14:09,950
thread pool executors right so by Fred

00:14:07,370 --> 00:14:12,980
pool executors we can precisely say how

00:14:09,950 --> 00:14:15,350
how many at a maximum threads should be

00:14:12,980 --> 00:14:17,420
there and the dispatcher should never

00:14:15,350 --> 00:14:19,790
grow beyond that right because the

00:14:17,420 --> 00:14:21,830
default one Anaka is a forked or input

00:14:19,790 --> 00:14:24,050
and what does we for joint fool do it

00:14:21,830 --> 00:14:25,610
always keeps increasing the number of

00:14:24,050 --> 00:14:27,680
threads because it tries to avoid

00:14:25,610 --> 00:14:29,360
starving everyone but at some point it

00:14:27,680 --> 00:14:33,200
doesn't help anymore if you have you

00:14:29,360 --> 00:14:35,330
know four CPUs like those were about

00:14:33,200 --> 00:14:38,840
five thousand threads but you know

00:14:35,330 --> 00:14:40,970
that's not helping so instead we want to

00:14:38,840 --> 00:14:44,080
limit the threads that can be blocked

00:14:40,970 --> 00:14:46,430
and this is how we can do it in code man

00:14:44,080 --> 00:14:48,500
instead of using the default dispatcher

00:14:46,430 --> 00:14:50,480
we just say system dispatch just look up

00:14:48,500 --> 00:14:52,640
and pick and pick the one that we

00:14:50,480 --> 00:14:54,770
configured right a second ago

00:14:52,640 --> 00:14:58,040
and we don't really need to change

00:14:54,770 --> 00:15:01,190
anything else right if you would like to

00:14:58,040 --> 00:15:03,710
be really explicit you can pass blocking

00:15:01,190 --> 00:15:07,400
dispatcher as argument to the future

00:15:03,710 --> 00:15:09,860
explicitly right you know that and the

00:15:07,400 --> 00:15:12,650
behavior now is pretty good so we have

00:15:09,860 --> 00:15:14,170
isolated all the bad behavior on to the

00:15:12,650 --> 00:15:16,510
my blocking dispatch

00:15:14,170 --> 00:15:18,430
it's over sleeping going on was a bad

00:15:16,510 --> 00:15:21,490
thing still happening but it doesn't

00:15:18,430 --> 00:15:23,260
impact the rest of application so we

00:15:21,490 --> 00:15:26,710
have this mantra in raqqa community

00:15:23,260 --> 00:15:29,110
that's never block right and it's both

00:15:26,710 --> 00:15:31,360
hopeful and not helpful at the same time

00:15:29,110 --> 00:15:33,610
because it's a nice mantra that's easy

00:15:31,360 --> 00:15:35,770
to remember and it's a nice goal to

00:15:33,610 --> 00:15:38,320
strive for to not block all the time

00:15:35,770 --> 00:15:40,000
but it's not really realistic because so

00:15:38,320 --> 00:15:42,070
many things in our world like

00:15:40,000 --> 00:15:43,930
surrounding us with real you know

00:15:42,070 --> 00:15:46,150
outside interactions and disk access

00:15:43,930 --> 00:15:47,470
there would be some blocking so the

00:15:46,150 --> 00:15:49,540
natural shouldn't be really never

00:15:47,470 --> 00:15:51,640
blocked but blocking needs careful

00:15:49,540 --> 00:15:54,040
management but if it doesn't sound as

00:15:51,640 --> 00:15:57,580
fancy so people people know they're

00:15:54,040 --> 00:16:00,970
never blocked mantra but now you know so

00:15:57,580 --> 00:16:02,230
another one so we have a wait API so

00:16:00,970 --> 00:16:04,030
which is already good because it's a

00:16:02,230 --> 00:16:05,530
separate API that you actually need to

00:16:04,030 --> 00:16:08,590
go and look for if you want to do the

00:16:05,530 --> 00:16:10,780
wrong thing which is blocking but

00:16:08,590 --> 00:16:12,610
sometimes people still do it right so

00:16:10,780 --> 00:16:14,230
you can do with cascading a waiting for

00:16:12,610 --> 00:16:16,930
one thing and I'm gonna wait for another

00:16:14,230 --> 00:16:20,730
thing not really good because we keep

00:16:16,930 --> 00:16:23,710
blocking a lot here right so better

00:16:20,730 --> 00:16:26,320
obviously for comprehension with melodic

00:16:23,710 --> 00:16:28,960
futures you guys know that you just can

00:16:26,320 --> 00:16:30,550
compose over and chain all the

00:16:28,960 --> 00:16:33,130
operations I want to do on the future

00:16:30,550 --> 00:16:35,350
and then once the future gets completed

00:16:33,130 --> 00:16:37,810
all the operations get apply so that's

00:16:35,350 --> 00:16:39,750
already better however there is a

00:16:37,810 --> 00:16:43,360
semantic difference between those two

00:16:39,750 --> 00:16:46,540
because here I actually have this a wait

00:16:43,360 --> 00:16:47,650
at most three seconds I don't have it

00:16:46,540 --> 00:16:49,450
here right and the magnetic

00:16:47,650 --> 00:16:51,700
transformations it's it's not fair by

00:16:49,450 --> 00:16:54,190
default but I actually usually do want

00:16:51,700 --> 00:16:56,800
to have some form of timeout because I'm

00:16:54,190 --> 00:16:59,260
calling this HTTP filling and if it

00:16:56,800 --> 00:17:01,990
doesn't come back to me in a second or

00:16:59,260 --> 00:17:05,020
so I probably missed my SLA already so

00:17:01,990 --> 00:17:08,680
let's just fail the thing so here's how

00:17:05,020 --> 00:17:10,720
you can do it with a the least known

00:17:08,680 --> 00:17:12,610
pattern in akka I think like everybody

00:17:10,720 --> 00:17:14,530
is forgetting about it but it's actually

00:17:12,610 --> 00:17:17,140
very useful which is a competent after

00:17:14,530 --> 00:17:20,020
and it basically says okay so after

00:17:17,140 --> 00:17:22,000
three seconds do scheduler please do

00:17:20,020 --> 00:17:25,480
this piece of code and you basically

00:17:22,000 --> 00:17:27,640
return a future so here I just want to

00:17:25,480 --> 00:17:30,280
fail after three seconds

00:17:27,640 --> 00:17:34,090
and then I combine this failure future

00:17:30,280 --> 00:17:36,370
with future of resort what I wanted to

00:17:34,090 --> 00:17:40,900
get right so this is how we can back and

00:17:36,370 --> 00:17:45,600
get back semantics of timing out who

00:17:40,900 --> 00:17:48,040
still with me we're halfway through so

00:17:45,600 --> 00:17:52,330
jumping to another topic and yes the

00:17:48,040 --> 00:17:55,900
thing on the right fair is a total and

00:17:52,330 --> 00:17:58,150
it's Turtles all the way down but why

00:17:55,900 --> 00:18:00,520
should we avoid Java civilization so

00:17:58,150 --> 00:18:02,290
there's multiple reasons and yes it's

00:18:00,520 --> 00:18:03,880
actually enabled by default and I'm

00:18:02,290 --> 00:18:06,400
really sorry

00:18:03,880 --> 00:18:07,930
I would actually and we the team would

00:18:06,400 --> 00:18:10,090
actually love to disable it by default

00:18:07,930 --> 00:18:12,730
and we actually might do it in future

00:18:10,090 --> 00:18:16,090
versions but the thing is it's so easy

00:18:12,730 --> 00:18:18,070
to get started with right and but both

00:18:16,090 --> 00:18:18,910
the best thing about it and the worst

00:18:18,070 --> 00:18:21,160
thing about it

00:18:18,910 --> 00:18:23,740
because you start with it and then you

00:18:21,160 --> 00:18:25,660
go to prod and you didn't you know spend

00:18:23,740 --> 00:18:27,430
the time to move away from it and now

00:18:25,660 --> 00:18:30,760
you're in fraud with Java civilization

00:18:27,430 --> 00:18:33,940
which is both slow heavy and not really

00:18:30,760 --> 00:18:35,770
secure because it just arbitrarily every

00:18:33,940 --> 00:18:38,560
few months of service attacks published

00:18:35,770 --> 00:18:42,610
about how to attack Java civilization so

00:18:38,560 --> 00:18:44,050
but let's talk about the speed so let's

00:18:42,610 --> 00:18:45,670
say you're benchmarking and we get felt

00:18:44,050 --> 00:18:47,440
a lot on the mailing list so someone is

00:18:45,670 --> 00:18:48,970
benchmarking the ping pong case so two

00:18:47,440 --> 00:18:52,540
extras are ping ponging of a message

00:18:48,970 --> 00:18:54,280
between them and an in process that gets

00:18:52,540 --> 00:18:56,740
pretty fast we do like five million per

00:18:54,280 --> 00:18:58,330
second or something like that and once

00:18:56,740 --> 00:19:02,590
you get the network flow so it goes

00:18:58,330 --> 00:19:04,930
between two JVMs versus serialization

00:19:02,590 --> 00:19:08,140
involved right so but already adds some

00:19:04,930 --> 00:19:09,790
overhead and the problem is that with

00:19:08,140 --> 00:19:13,720
Java serialization for overhead is more

00:19:09,790 --> 00:19:15,550
like that so very far away so the board

00:19:13,720 --> 00:19:16,090
takes a longer time to go through the

00:19:15,550 --> 00:19:19,090
network

00:19:16,090 --> 00:19:22,540
so since akka 2.4 we actually started

00:19:19,090 --> 00:19:27,210
logging a warning that hey please fix

00:19:22,540 --> 00:19:27,210
that right so at least it now you know

00:19:27,300 --> 00:19:31,750
but how bad is it really and I don't

00:19:29,800 --> 00:19:35,880
mean to hack on it but I do want to give

00:19:31,750 --> 00:19:39,600
some numbers to give a brief

00:19:35,880 --> 00:19:43,010
look at it so here's a benchmark you can

00:19:39,600 --> 00:19:45,450
test it in Raqqa codebase it's fair and

00:19:43,010 --> 00:19:49,500
this is the results so this is on a

00:19:45,450 --> 00:19:51,450
local setting so basically just enabling

00:19:49,500 --> 00:19:53,550
civilization without even crossing

00:19:51,450 --> 00:19:58,530
network boundaries and as you can see

00:19:53,550 --> 00:20:01,620
here it's basically 25 micros with Java

00:19:58,530 --> 00:20:04,650
civilization and one without right

00:20:01,620 --> 00:20:07,110
so serialization is really heavy so what

00:20:04,650 --> 00:20:08,820
can we do better because I keep

00:20:07,110 --> 00:20:11,160
yammering oh my god you're doing the

00:20:08,820 --> 00:20:12,540
wrong thing but I thought how about I

00:20:11,160 --> 00:20:15,000
explain how to do the right thing

00:20:12,540 --> 00:20:16,800
because it's not that hard actually so

00:20:15,000 --> 00:20:18,090
of course with many many different

00:20:16,800 --> 00:20:20,790
trade-offs when picking the

00:20:18,090 --> 00:20:24,240
serialization format for example proto

00:20:20,790 --> 00:20:28,200
buffers Google protocol buffers or v or

00:20:24,240 --> 00:20:30,300
Jason even are easier to evolve in a

00:20:28,200 --> 00:20:31,530
compatible way and they all have

00:20:30,300 --> 00:20:33,960
different trade-offs right we've

00:20:31,530 --> 00:20:37,020
protobuf you have some boilerplate you

00:20:33,960 --> 00:20:39,390
have to maintain the IDL files etc but

00:20:37,020 --> 00:20:41,880
it gives you the easiest way to evolve

00:20:39,390 --> 00:20:44,310
your protocol if you care about that so

00:20:41,880 --> 00:20:47,430
internally because we do care we use a

00:20:44,310 --> 00:20:49,710
protocol buffers a lot but on the other

00:20:47,430 --> 00:20:52,110
side of the spectrum as cryo which is

00:20:49,710 --> 00:20:55,110
really easy to set up you've got a few

00:20:52,110 --> 00:20:57,630
seconds to read the entire code that is

00:20:55,110 --> 00:20:59,520
needed to set up a cryo serializer so

00:20:57,630 --> 00:21:02,070
it's not that much right and the

00:20:59,520 --> 00:21:05,040
performance gain compared to Java is

00:21:02,070 --> 00:21:07,920
already 5x right it's not that much code

00:21:05,040 --> 00:21:10,110
and you got a 5x improvement so consider

00:21:07,920 --> 00:21:14,000
it if you're still on Java serialization

00:21:10,110 --> 00:21:17,280
a random factoids about why is it so so

00:21:14,000 --> 00:21:20,370
for many reasons well first one is it

00:21:17,280 --> 00:21:22,560
never was designed as a fast thing it

00:21:20,370 --> 00:21:24,600
was just okay we have this object let's

00:21:22,560 --> 00:21:26,820
utilize it and no one really cared back

00:21:24,600 --> 00:21:28,860
then about the performance of it so it's

00:21:26,820 --> 00:21:32,190
a bit heavy it's a bit on river both

00:21:28,860 --> 00:21:35,310
side these are examples from Jay

00:21:32,190 --> 00:21:36,450
surveillance blog but I wanted to use

00:21:35,310 --> 00:21:41,580
him because we're really really

00:21:36,450 --> 00:21:45,040
wonderful even XML is smaller okay

00:21:41,580 --> 00:21:47,770
that says a lot right so Jason yeah I

00:21:45,040 --> 00:21:51,130
can squeeze a little bit more but we do

00:21:47,770 --> 00:21:53,710
keep all the names where we did lose all

00:21:51,130 --> 00:21:56,320
the types right so in the Java one you

00:21:53,710 --> 00:21:59,920
see verse four actual types fare in the

00:21:56,320 --> 00:22:02,080
advanced utilised format and in cryo of

00:21:59,920 --> 00:22:05,530
course what's a binary formats all the

00:22:02,080 --> 00:22:07,420
dashes are just binary gibberish but you

00:22:05,530 --> 00:22:12,070
can see where we actually keep around

00:22:07,420 --> 00:22:15,220
what types it was interesting to know so

00:22:12,070 --> 00:22:17,440
please don't use it and of course was

00:22:15,220 --> 00:22:19,900
also different trade-offs so in just

00:22:17,440 --> 00:22:22,540
remoting in remote messages probably you

00:22:19,900 --> 00:22:24,280
can get away with cryo because if you

00:22:22,540 --> 00:22:26,740
roll out a new app you do a green blue

00:22:24,280 --> 00:22:28,980
deployment they probably will not end up

00:22:26,740 --> 00:22:30,130
talking to different leave urgent

00:22:28,980 --> 00:22:33,130
protocols

00:22:30,130 --> 00:22:35,230
however in long time persistence systems

00:22:33,130 --> 00:22:37,060
for example you know a cop assistance

00:22:35,230 --> 00:22:39,580
you're possessing events and you've

00:22:37,060 --> 00:22:43,270
better be using something that's really

00:22:39,580 --> 00:22:45,190
good lee evolvable over years because

00:22:43,270 --> 00:22:47,560
the event stored there you want to read

00:22:45,190 --> 00:22:49,540
the event two years from now three years

00:22:47,560 --> 00:22:53,350
from now right so there's different

00:22:49,540 --> 00:22:55,690
trade-offs so bear in mind it's not the

00:22:53,350 --> 00:22:58,960
question of what should I use for arca

00:22:55,690 --> 00:23:00,670
serialization in general you also have

00:22:58,960 --> 00:23:02,380
to think about the context am i

00:23:00,670 --> 00:23:05,050
persisting the messages am i just

00:23:02,380 --> 00:23:08,140
sending them around and think about it

00:23:05,050 --> 00:23:10,690
this way and the usual disclaimer trust

00:23:08,140 --> 00:23:13,030
no one including myself and there was a

00:23:10,690 --> 00:23:14,440
benchmark so don't trust for benchmark

00:23:13,030 --> 00:23:17,620
do the benchmark yourself if you

00:23:14,440 --> 00:23:20,800
actually want to trust any numbers and

00:23:17,620 --> 00:23:23,070
those great tools including my SBT

00:23:20,800 --> 00:23:26,980
plugin if you want to benchmark some

00:23:23,070 --> 00:23:29,740
scarlet code verse for SBT jmh plugin

00:23:26,980 --> 00:23:32,830
and jmh is a benchmarking tool basically

00:23:29,740 --> 00:23:34,870
developed by the open JDK team for

00:23:32,830 --> 00:23:39,100
variant on the needs of benchmarking the

00:23:34,870 --> 00:23:42,880
collections and everything else so let

00:23:39,100 --> 00:23:44,740
it crash so we have this thing that's

00:23:42,880 --> 00:23:47,650
called an error and we have a failure

00:23:44,740 --> 00:23:50,620
and actually we take it as very

00:23:47,650 --> 00:23:52,090
different things and I'm not gonna go in

00:23:50,620 --> 00:23:54,220
and start rambling about directive

00:23:52,090 --> 00:23:56,769
manifesto which I do think is great

00:23:54,220 --> 00:23:58,299
but I do want to explain what for actual

00:23:56,769 --> 00:24:00,429
differences because it's something that

00:23:58,299 --> 00:24:03,129
the manifesto coined but sometimes

00:24:00,429 --> 00:24:05,440
people get stuck on explaining the

00:24:03,129 --> 00:24:06,610
diagram you will know the diagram right

00:24:05,440 --> 00:24:09,879
but those are actually way more

00:24:06,610 --> 00:24:11,500
interesting things in verb so we have

00:24:09,879 --> 00:24:14,320
such a thing that is called a

00:24:11,500 --> 00:24:17,139
supervision in naka right so what is it

00:24:14,320 --> 00:24:18,309
really about so let's say I have a

00:24:17,139 --> 00:24:21,669
vending machine

00:24:18,309 --> 00:24:23,350
I insert some cash and then okay it

00:24:21,669 --> 00:24:26,139
wasn't enough cash so I get an error

00:24:23,350 --> 00:24:28,870
back right note this is an error and

00:24:26,139 --> 00:24:31,360
this is like a user land actual message

00:24:28,870 --> 00:24:33,610
but has a nice description but hey

00:24:31,360 --> 00:24:35,919
please give me more money something like

00:24:33,610 --> 00:24:38,559
that and when was the second case which

00:24:35,919 --> 00:24:40,750
is actually failures right so let's say

00:24:38,559 --> 00:24:42,250
I'm trying to grab the coin and I'm in

00:24:40,750 --> 00:24:44,620
the middle of the machine an actor

00:24:42,250 --> 00:24:48,279
trying to operate this can grabbing

00:24:44,620 --> 00:24:50,559
mechanism and it blows up so that's very

00:24:48,279 --> 00:24:51,970
different from the case of okay you

00:24:50,559 --> 00:24:55,000
didn't give me enough cash for this

00:24:51,970 --> 00:24:57,549
drink because of this thing you want to

00:24:55,000 --> 00:24:59,649
notify whoever is operating the machine

00:24:57,549 --> 00:25:01,690
right so the owner of a machine may be

00:24:59,649 --> 00:25:03,639
some cord back and then they can send

00:25:01,690 --> 00:25:06,370
some service person to fix the machine I

00:25:03,639 --> 00:25:08,830
don't think of a person buying the drink

00:25:06,370 --> 00:25:11,289
cares about technical details of that

00:25:08,830 --> 00:25:13,899
failure they just would want to know

00:25:11,289 --> 00:25:16,509
okay I'm not getting my drink right so

00:25:13,899 --> 00:25:18,730
errors versus failures and failures in

00:25:16,509 --> 00:25:21,100
occur always propagated upwards to

00:25:18,730 --> 00:25:22,870
parents and we have it very explicitly

00:25:21,100 --> 00:25:24,990
in occur right vet for supervision tree

00:25:22,870 --> 00:25:29,940
and arrows but it's just a message

00:25:24,990 --> 00:25:32,799
something we design in okay so

00:25:29,940 --> 00:25:34,509
supervision we talked about it but we

00:25:32,799 --> 00:25:36,549
also have back of supervision which is

00:25:34,509 --> 00:25:38,889
one of those hidden gems but maybe you

00:25:36,549 --> 00:25:40,990
haven't noticed until now so backup

00:25:38,889 --> 00:25:43,919
supervision is basically giving more

00:25:40,990 --> 00:25:47,799
breathing space to systems but needed an

00:25:43,919 --> 00:25:51,549
example being I have this persistent

00:25:47,799 --> 00:25:54,370
actor and for some kind of database and

00:25:51,549 --> 00:25:59,320
it actually blows up because some reason

00:25:54,370 --> 00:26:01,509
and what we could have been doing we

00:25:59,320 --> 00:26:04,360
don't okay so this is not what Erica

00:26:01,509 --> 00:26:07,119
does but it could if we did the naive

00:26:04,360 --> 00:26:07,500
way is okay I try to store something in

00:26:07,119 --> 00:26:11,070
every day

00:26:07,500 --> 00:26:13,020
I get for failure supervision kicks in

00:26:11,070 --> 00:26:15,690
actor restarts because that's what

00:26:13,020 --> 00:26:18,059
supervision is for so I try to persist I

00:26:15,690 --> 00:26:20,760
blow up I restart I try to persist I

00:26:18,059 --> 00:26:23,220
blow up I restart you get four idea so

00:26:20,760 --> 00:26:25,260
the problem is well it's not like one

00:26:23,220 --> 00:26:27,870
actor got for failure for databases

00:26:25,260 --> 00:26:29,820
they're most likely worse tens of

00:26:27,870 --> 00:26:31,799
thousands of them and suddenly everybody

00:26:29,820 --> 00:26:34,470
is hammering your database well it's not

00:26:31,799 --> 00:26:35,940
gonna help it recover so this is what

00:26:34,470 --> 00:26:39,030
actually happens in a cup resistance

00:26:35,940 --> 00:26:42,179
when we have such a case for resistance

00:26:39,030 --> 00:26:45,090
for some reason can't store your events

00:26:42,179 --> 00:26:47,150
okay it blows up we get recovery

00:26:45,090 --> 00:26:50,250
failures for example or persist failures

00:26:47,150 --> 00:26:52,429
but they stop okay

00:26:50,250 --> 00:26:56,970
the default here is stopping reactors

00:26:52,429 --> 00:26:59,789
which is a bit different than than the

00:26:56,970 --> 00:27:01,620
default in normal supervision right so

00:26:59,789 --> 00:27:04,950
this is a specific example from cluster

00:27:01,620 --> 00:27:06,870
charting so but we do want to recover

00:27:04,950 --> 00:27:09,510
those guys right but we don't want to

00:27:06,870 --> 00:27:12,110
recover them right away and do is the

00:27:09,510 --> 00:27:14,460
rush on the service but we want someone

00:27:12,110 --> 00:27:16,440
externally so here it's a back of

00:27:14,460 --> 00:27:20,520
supervisor and this is a class provided

00:27:16,440 --> 00:27:24,270
by akka which you configure what is the

00:27:20,520 --> 00:27:25,940
breathing kind of time you want to give

00:27:24,270 --> 00:27:29,190
the system before you start recovering

00:27:25,940 --> 00:27:32,429
so it's basically like recovery but with

00:27:29,190 --> 00:27:35,250
a circuit breaker and this external guy

00:27:32,429 --> 00:27:38,370
would take care of restarting these

00:27:35,250 --> 00:27:39,690
actors in increasing amounts of time to

00:27:38,370 --> 00:27:43,830
give the database more breathing space

00:27:39,690 --> 00:27:47,280
to recover so as I kept saying database

00:27:43,830 --> 00:27:49,140
but it actually is about any kind of

00:27:47,280 --> 00:27:50,730
failure but you may be thrashing someone

00:27:49,140 --> 00:27:52,590
and you want to agree even give them

00:27:50,730 --> 00:27:55,500
some breathing space it could be that

00:27:52,590 --> 00:27:57,510
you've just reached your quota and some

00:27:55,500 --> 00:27:59,730
API starts failing to you because you've

00:27:57,510 --> 00:28:06,030
just exceeded your quota you can do the

00:27:59,730 --> 00:28:09,240
same finger okay so state machines this

00:28:06,030 --> 00:28:13,080
is something so didn't do the example of

00:28:09,240 --> 00:28:15,570
a 20 or 50 and receive cases but we

00:28:13,080 --> 00:28:17,669
sometimes see that at customers or at

00:28:15,570 --> 00:28:18,900
just open source people posting verse

00:28:17,669 --> 00:28:22,020
snippets

00:28:18,900 --> 00:28:24,450
and basically when you see like 50 cases

00:28:22,020 --> 00:28:27,750
or you know maybe ten it depends on your

00:28:24,450 --> 00:28:29,460
case it's basically this right you do

00:28:27,750 --> 00:28:32,370
remember that from the JavaScript

00:28:29,460 --> 00:28:35,460
pyramid of car it's just foreign actors

00:28:32,370 --> 00:28:39,210
you don't get the pyramid because it's

00:28:35,460 --> 00:28:40,950
flat right it's a it's a flatten it but

00:28:39,210 --> 00:28:45,210
it's the same problem too much stuff

00:28:40,950 --> 00:28:47,040
going on in the same place so it looks

00:28:45,210 --> 00:28:48,870
okay because yeah everything is flat and

00:28:47,040 --> 00:28:50,340
we only have one receive method so it

00:28:48,870 --> 00:28:52,410
loops back into the same thing so we

00:28:50,340 --> 00:28:55,260
don't get a PI roommate of doom but what

00:28:52,410 --> 00:28:58,500
you actually very likely have in such a

00:28:55,260 --> 00:29:02,030
method receive method van is multiple

00:28:58,500 --> 00:29:04,920
states and I'm ready to bet for you know

00:29:02,030 --> 00:29:06,720
maybe a drink but usually when you have

00:29:04,920 --> 00:29:08,610
too many things going on and receive

00:29:06,720 --> 00:29:11,280
methods you likely have multiple states

00:29:08,610 --> 00:29:13,230
hidden in there and if you extract them

00:29:11,280 --> 00:29:15,900
for example verse and make things with

00:29:13,230 --> 00:29:18,570
some metadata I'm in this mode of making

00:29:15,900 --> 00:29:20,970
things and then I want to become if

00:29:18,570 --> 00:29:25,140
someone tells me to do other things like

00:29:20,970 --> 00:29:27,480
a third case on the make things receive

00:29:25,140 --> 00:29:28,230
methods then I become okay awaiting

00:29:27,480 --> 00:29:30,930
instructions

00:29:28,230 --> 00:29:32,670
and now it's suddenly more reasonable to

00:29:30,930 --> 00:29:35,820
to understand what the hell is going on

00:29:32,670 --> 00:29:38,850
here we also have this FSM trait which

00:29:35,820 --> 00:29:40,770
basically is a helper trait which helps

00:29:38,850 --> 00:29:43,530
you do exactly the same thing which I

00:29:40,770 --> 00:29:45,660
moved here with just a context become so

00:29:43,530 --> 00:29:49,200
become just swaps for receive method for

00:29:45,660 --> 00:29:53,070
a new mod anyone whereas a finite state

00:29:49,200 --> 00:29:55,350
machines give you this API that allows

00:29:53,070 --> 00:29:57,360
you to okay so when I'm in the idle

00:29:55,350 --> 00:30:00,690
State this is what I will be doing and

00:29:57,360 --> 00:30:03,870
it also encourages a passing around the

00:30:00,690 --> 00:30:05,730
data right so you get an event so the

00:30:03,870 --> 00:30:07,770
first thing there is a message and the

00:30:05,730 --> 00:30:10,050
second thing is the data right so

00:30:07,770 --> 00:30:12,060
instead of having variables in the actor

00:30:10,050 --> 00:30:16,590
you can just pass around in a more

00:30:12,060 --> 00:30:18,960
functional way in the state good okay

00:30:16,590 --> 00:30:23,130
this is the last topic and a most

00:30:18,960 --> 00:30:25,260
mind-blowing perhaps so we see we have

00:30:23,130 --> 00:30:27,840
this thing called the aqua cluster right

00:30:25,260 --> 00:30:31,050
you've seen it maybe used it who is

00:30:27,840 --> 00:30:31,610
actually used for aqua cluster half of

00:30:31,050 --> 00:30:34,100
the people

00:30:31,610 --> 00:30:36,350
maybe okay so we have this thing called

00:30:34,100 --> 00:30:38,870
cluster convergence some out of the

00:30:36,350 --> 00:30:42,920
people who have used Rocca cluster

00:30:38,870 --> 00:30:45,820
who knows what convergence is not that

00:30:42,920 --> 00:30:48,920
many still still a few so good job guys

00:30:45,820 --> 00:30:51,890
the problem is that many people skip

00:30:48,920 --> 00:30:54,230
over that section of the documentation

00:30:51,890 --> 00:30:55,640
and is actually a really important one

00:30:54,230 --> 00:30:58,280
because it talks about the actual

00:30:55,640 --> 00:31:00,140
guarantees what the cluster does so

00:30:58,280 --> 00:31:02,420
convergence by itself is defined that

00:31:00,140 --> 00:31:04,850
okay we can prove that four clusters a

00:31:02,420 --> 00:31:06,620
tight fit we're observing it has been

00:31:04,850 --> 00:31:08,750
observed by everybody else in the

00:31:06,620 --> 00:31:14,600
classroom so everybody has a consistent

00:31:08,750 --> 00:31:16,880
view on the membership okay and actions

00:31:14,600 --> 00:31:19,730
are joining and leaving the clusterer

00:31:16,880 --> 00:31:21,710
need to be made when various convergence

00:31:19,730 --> 00:31:24,169
right so everybody makes the same

00:31:21,710 --> 00:31:26,419
decision if is notice joining or not

00:31:24,169 --> 00:31:29,690
right because we want to be consistent I

00:31:26,419 --> 00:31:30,919
don't want a cluster but some part of

00:31:29,690 --> 00:31:32,990
the cluster thinks we know what is

00:31:30,919 --> 00:31:34,549
already part of it and some other part

00:31:32,990 --> 00:31:36,559
of a cluster doesn't think and it was

00:31:34,549 --> 00:31:40,179
part of the cluster right that would be

00:31:36,559 --> 00:31:42,530
bad so these things require convergence

00:31:40,179 --> 00:31:44,809
here's a mini diagram from the docs

00:31:42,530 --> 00:31:47,240
which explains all the transitions

00:31:44,809 --> 00:31:52,730
between overstates if this is too small

00:31:47,240 --> 00:31:56,030
Vanara just quickly from the top left

00:31:52,730 --> 00:31:58,460
it's joining up leaving exiting and then

00:31:56,030 --> 00:32:01,370
removed right so it's a very simple life

00:31:58,460 --> 00:32:03,500
cycle and when today we're going to talk

00:32:01,370 --> 00:32:05,030
about a feature that you may have not

00:32:03,500 --> 00:32:08,120
seen but it's actually very interesting

00:32:05,030 --> 00:32:10,100
if you're in the scenario of okay we're

00:32:08,120 --> 00:32:12,290
under heavy load maybe it was even

00:32:10,100 --> 00:32:13,910
cluster partitions but we still need to

00:32:12,290 --> 00:32:15,919
grove a cluster because we need to

00:32:13,910 --> 00:32:18,020
survive the load so this is something

00:32:15,919 --> 00:32:19,940
you need to enable explicitly it's

00:32:18,020 --> 00:32:22,870
called allow weekly up members and

00:32:19,940 --> 00:32:26,419
there's going to be an example but first

00:32:22,870 --> 00:32:28,730
let's talk about a cluster party so

00:32:26,419 --> 00:32:33,020
let's try to see how the joining to a

00:32:28,730 --> 00:32:34,700
cluster to a party looks like so we have

00:32:33,020 --> 00:32:37,280
two seed notes so seed notes are

00:32:34,700 --> 00:32:40,370
basically just I know where the party is

00:32:37,280 --> 00:32:42,730
so I want to join it and I know the

00:32:40,370 --> 00:32:46,450
address of a node for example

00:32:42,730 --> 00:32:46,989
and here the seed one of a guy with a

00:32:46,450 --> 00:32:50,409
funny hat

00:32:46,989 --> 00:32:53,019
not just for normal hat it is the leader

00:32:50,409 --> 00:32:55,359
okay so that's also something people are

00:32:53,019 --> 00:32:57,730
sometimes confused about okay so is a

00:32:55,359 --> 00:33:00,539
class through a leaderless you have a

00:32:57,730 --> 00:33:02,919
leader so the thing is the leader is not

00:33:00,539 --> 00:33:05,320
something special right

00:33:02,919 --> 00:33:07,840
the leader is basically the oldest node

00:33:05,320 --> 00:33:10,269
that is in the cluster and the only

00:33:07,840 --> 00:33:12,999
reason we need to have a single node be

00:33:10,269 --> 00:33:15,489
kind of a special thing is we need to

00:33:12,999 --> 00:33:18,100
have a single point where decisions are

00:33:15,489 --> 00:33:20,859
made but if if a seed node one goes down

00:33:18,100 --> 00:33:23,970
then we just declare okay so the

00:33:20,859 --> 00:33:27,210
second-oldest now is the leader so it's

00:33:23,970 --> 00:33:31,690
where is a leader role but it's not like

00:33:27,210 --> 00:33:33,549
doing a lot of stuff okay so joining

00:33:31,690 --> 00:33:36,789
works like that so new nose comes in

00:33:33,549 --> 00:33:39,159
called code and then the existing

00:33:36,789 --> 00:33:41,619
cluster gets gossiped around and

00:33:39,159 --> 00:33:45,820
everybody eventually knows that okay

00:33:41,619 --> 00:33:49,629
code is joining there's a small K at the

00:33:45,820 --> 00:33:52,629
foot of atrophied of seed nodes fair and

00:33:49,629 --> 00:33:54,850
when the leader sees okay so everybody

00:33:52,629 --> 00:33:57,159
in the cluster has seen Curt so I can

00:33:54,850 --> 00:33:59,639
move him to up and by up we mean okay

00:33:57,159 --> 00:34:04,570
now it is actually part of the cluster

00:33:59,639 --> 00:34:07,419
good now he's with us now about

00:34:04,570 --> 00:34:09,700
unreachable T so in terms of our cluster

00:34:07,419 --> 00:34:13,089
we talk about unreachable T which means

00:34:09,700 --> 00:34:15,099
we do a periodic heart beating and if a

00:34:13,089 --> 00:34:17,169
node doesn't respond to the heartbeats

00:34:15,099 --> 00:34:20,079
we declare it unreachable but

00:34:17,169 --> 00:34:24,010
unreachable is not down write down is a

00:34:20,079 --> 00:34:27,190
very specific thing so here's the thing

00:34:24,010 --> 00:34:29,500
I explained about weekly up because to

00:34:27,190 --> 00:34:31,210
declare someone up normally you would

00:34:29,500 --> 00:34:34,089
need to have cluster convergence so

00:34:31,210 --> 00:34:36,149
everybody knows that the new state of a

00:34:34,089 --> 00:34:39,639
cluster will be with the new node

00:34:36,149 --> 00:34:42,520
however if one node is unreachable we

00:34:39,639 --> 00:34:45,339
can't say everybody knows because we

00:34:42,520 --> 00:34:48,250
can't tell this other guy so this is

00:34:45,339 --> 00:34:50,619
where Weekly up kicks in and if you have

00:34:48,250 --> 00:34:54,129
a scenario you are allowed to basically

00:34:50,619 --> 00:34:56,050
join but in this special state in a

00:34:54,129 --> 00:34:58,360
weekly upstate so yes it is actually

00:34:56,050 --> 00:35:01,770
of a cluster now and can do everything a

00:34:58,360 --> 00:35:05,080
normal node in the cluster would do and

00:35:01,770 --> 00:35:07,120
once the unreachable node comes back we

00:35:05,080 --> 00:35:10,000
inform it about okay here's this new

00:35:07,120 --> 00:35:15,100
person and then it is declared properly

00:35:10,000 --> 00:35:17,320
up so this is something you need to

00:35:15,100 --> 00:35:18,700
think about do I need to be really

00:35:17,320 --> 00:35:21,070
really consistent with the cluster

00:35:18,700 --> 00:35:25,810
membership or can I cut corners because

00:35:21,070 --> 00:35:28,150
we really need to scale out okay so now

00:35:25,810 --> 00:35:31,840
the opposite case let's say Billy has a

00:35:28,150 --> 00:35:35,230
birthday party and bill declares I'm

00:35:31,840 --> 00:35:39,250
going home what I mean here is cluster

00:35:35,230 --> 00:35:41,980
leaf self right I call that but one

00:35:39,250 --> 00:35:44,920
vanishes immediately right so what I

00:35:41,980 --> 00:35:48,370
mean in that sense is cluster leaf serve

00:35:44,920 --> 00:35:51,340
system.exit okay the problem is that

00:35:48,370 --> 00:35:52,810
cluster living is a graceful process so

00:35:51,340 --> 00:35:56,650
you need to tell everybody that you're

00:35:52,810 --> 00:35:58,990
leaving right understandably so but if

00:35:56,650 --> 00:36:01,690
you kind of shut down the JVM right

00:35:58,990 --> 00:36:04,540
after starting to tell everybody that

00:36:01,690 --> 00:36:06,700
you're leaving then they probably didn't

00:36:04,540 --> 00:36:08,920
even get your message so instead of

00:36:06,700 --> 00:36:11,370
having a graceful leaving you suddenly

00:36:08,920 --> 00:36:14,350
are in this situation of hey whispered

00:36:11,370 --> 00:36:18,240
also build out and failure detection

00:36:14,350 --> 00:36:20,560
kicks in Veda clarin unreachable and

00:36:18,240 --> 00:36:22,330
basically you can go into unreachable

00:36:20,560 --> 00:36:23,920
from any kind of state right because

00:36:22,330 --> 00:36:25,540
it's the heart beating transition if you

00:36:23,920 --> 00:36:27,790
don't reply to a hot piece you can

00:36:25,540 --> 00:36:30,760
become unreachable and you can can come

00:36:27,790 --> 00:36:32,800
back again but at some point if the node

00:36:30,760 --> 00:36:35,770
is not coming back four minutes or days

00:36:32,800 --> 00:36:38,080
usually minutes you will want to declare

00:36:35,770 --> 00:36:40,510
it as down right so we have a outer

00:36:38,080 --> 00:36:43,600
downing feature but it's not really safe

00:36:40,510 --> 00:36:45,160
because it's a bit racy we do have a

00:36:43,600 --> 00:36:49,840
commercial ad on that split-brain

00:36:45,160 --> 00:36:52,540
resolver but those kind of voting if we

00:36:49,840 --> 00:36:56,770
should down the person or not or you can

00:36:52,540 --> 00:36:58,540
decide on the downing by hooking into an

00:36:56,770 --> 00:37:00,310
external monitoring system right

00:36:58,540 --> 00:37:02,290
external monitoring system gives you an

00:37:00,310 --> 00:37:04,510
alert okay even though it is really down

00:37:02,290 --> 00:37:07,840
and when we your korver down in the

00:37:04,510 --> 00:37:09,569
classroom by default we don't eject the

00:37:07,840 --> 00:37:12,609
notes just on a whim

00:37:09,569 --> 00:37:13,839
and now the problem is whatever note

00:37:12,609 --> 00:37:15,909
wasn't really down

00:37:13,839 --> 00:37:18,759
it was just G seeing for five minutes

00:37:15,909 --> 00:37:21,519
right everybody thinks it was down

00:37:18,759 --> 00:37:23,679
because yeah five minutes not replying

00:37:21,519 --> 00:37:26,649
to heartbeat must have been down you

00:37:23,679 --> 00:37:29,979
declare it down and the thing that

00:37:26,649 --> 00:37:32,459
happens when when it comes back is we

00:37:29,979 --> 00:37:34,719
basically say but you're already dead I

00:37:32,459 --> 00:37:37,119
don't want to talk to you anymore

00:37:34,719 --> 00:37:37,989
because well you've been away for a very

00:37:37,119 --> 00:37:39,699
long time

00:37:37,989 --> 00:37:42,939
you probably calculated something on

00:37:39,699 --> 00:37:46,649
stale data and I don't want to talk with

00:37:42,939 --> 00:37:51,009
you anymore you're a zombie sorry right

00:37:46,649 --> 00:37:52,779
so this is specifically about America

00:37:51,009 --> 00:37:55,269
cluster and acha persistence

00:37:52,779 --> 00:37:57,549
specifically we try to maintain what we

00:37:55,269 --> 00:38:02,919
call the single writer principle right

00:37:57,549 --> 00:38:04,839
and this is we we really try to earn on

00:38:02,919 --> 00:38:07,209
the consistent side of things by default

00:38:04,839 --> 00:38:09,249
right so if I declared someone down I

00:38:07,209 --> 00:38:11,949
basically do not want to trust any of

00:38:09,249 --> 00:38:14,679
the things he's doing I also will assume

00:38:11,949 --> 00:38:17,559
that if I downed him when I take over

00:38:14,679 --> 00:38:19,929
all of his responsibilities and even if

00:38:17,559 --> 00:38:22,059
he comes back and wants to still do his

00:38:19,929 --> 00:38:25,839
responsibilities we've moved on already

00:38:22,059 --> 00:38:27,369
right so that's on that side of things

00:38:25,839 --> 00:38:29,259
however reverse the other side of things

00:38:27,369 --> 00:38:32,709
which is a condition by the data which

00:38:29,259 --> 00:38:34,959
is just CID T's which is on the opposite

00:38:32,709 --> 00:38:37,479
spectrum right inverse a partition

00:38:34,959 --> 00:38:39,639
partition here's everybody converges and

00:38:37,479 --> 00:38:41,289
there's no conflicts first no single

00:38:39,639 --> 00:38:44,909
right of everybody writes all the time

00:38:41,289 --> 00:38:50,259
so again you need to pick the tool

00:38:44,909 --> 00:38:52,869
appropriate to a use case right okay and

00:38:50,259 --> 00:38:56,349
small reminder people sometimes get

00:38:52,869 --> 00:38:57,849
confused quarantine you may have seen it

00:38:56,349 --> 00:39:01,839
in the logs maybe sometimes so

00:38:57,849 --> 00:39:04,809
quarantine is a state of underlying

00:39:01,839 --> 00:39:07,059
remoting transport right so the cluster

00:39:04,809 --> 00:39:10,599
doesn't really deal about deal about

00:39:07,059 --> 00:39:14,739
quarantine right we also we only talked

00:39:10,599 --> 00:39:16,269
about unreachable and down okay pretty

00:39:14,739 --> 00:39:20,099
much one of the last things I have to

00:39:16,269 --> 00:39:23,200
say today is that echo is a toolkit I

00:39:20,099 --> 00:39:25,079
keep stressing that and I try to

00:39:23,200 --> 00:39:28,000
playing it as many times as I can and

00:39:25,079 --> 00:39:30,160
basically we try to be a small library

00:39:28,000 --> 00:39:32,950
of things that you can pick and choose

00:39:30,160 --> 00:39:35,920
from however sometimes people would ask

00:39:32,950 --> 00:39:38,890
we now have a coach TDP right and does

00:39:35,920 --> 00:39:41,260
our htdp compete with play no doesn't

00:39:38,890 --> 00:39:43,329
completely because we're very very very

00:39:41,260 --> 00:39:45,490
low level thing which doesn't help you

00:39:43,329 --> 00:39:47,440
with anything which play helps you with

00:39:45,490 --> 00:39:49,960
like maintaining a the database

00:39:47,440 --> 00:39:52,300
connection pools combining of java

00:39:49,960 --> 00:39:54,579
scripts etc etc doing the reloading of

00:39:52,300 --> 00:39:56,320
the pages metal play things right we

00:39:54,579 --> 00:39:59,079
never want to do those things

00:39:56,320 --> 00:40:01,810
on a so players focus on develop

00:39:59,079 --> 00:40:04,599
productivity which usually means more

00:40:01,810 --> 00:40:08,859
stuff we're on the velocity stuff of a

00:40:04,599 --> 00:40:10,420
better which is an Runa did this awesome

00:40:08,859 --> 00:40:12,369
talk and it's being quoted a lot on

00:40:10,420 --> 00:40:14,230
scholar conferences martin quoted it as

00:40:12,369 --> 00:40:17,170
well in the beginning of conference here

00:40:14,230 --> 00:40:19,540
so constraints liberates and liberties

00:40:17,170 --> 00:40:20,800
constrain which is that you should be

00:40:19,540 --> 00:40:23,619
picking the least powerful abstraction

00:40:20,800 --> 00:40:25,450
right kind of funny to hear it from a co

00:40:23,619 --> 00:40:27,960
guy because akka actors are basically

00:40:25,450 --> 00:40:32,170
far fare they can do anything right

00:40:27,960 --> 00:40:34,839
however sometimes that's exactly what

00:40:32,170 --> 00:40:37,599
you need right so here's power

00:40:34,839 --> 00:40:39,819
here's constraints so futures ok

00:40:37,599 --> 00:40:42,250
sometimes fun but we were limited to a

00:40:39,819 --> 00:40:44,950
single value inside fear right if I want

00:40:42,250 --> 00:40:49,300
to have multiple values and compute like

00:40:44,950 --> 00:40:51,760
things average or compute is it compute

00:40:49,300 --> 00:40:53,920
something on a stream of data when you

00:40:51,760 --> 00:40:56,980
have our streams and our customs are

00:40:53,920 --> 00:40:59,140
more limiting than our actors not only

00:40:56,980 --> 00:41:01,380
because your local abstraction but also

00:40:59,140 --> 00:41:05,380
because the layout is static kind of

00:41:01,380 --> 00:41:07,780
right you explain to our constrains what

00:41:05,380 --> 00:41:10,240
the flow of the data will be and you run

00:41:07,780 --> 00:41:12,550
it whereas an actors they can be

00:41:10,240 --> 00:41:14,349
completely dynamically moving and

00:41:12,550 --> 00:41:16,510
starting and stopping and talking to

00:41:14,349 --> 00:41:20,410
whoever want whoever they want right

00:41:16,510 --> 00:41:24,400
however what our characters does greatly

00:41:20,410 --> 00:41:27,369
is distribution right because of the

00:41:24,400 --> 00:41:29,200
messaging at the core of it you can very

00:41:27,369 --> 00:41:31,000
easily go into a distributed setting in

00:41:29,200 --> 00:41:34,430
back and forth because the model

00:41:31,000 --> 00:41:37,049
programming model remains

00:41:34,430 --> 00:41:40,710
well this is basically what I've been

00:41:37,049 --> 00:41:44,130
saying here architect yes it's still

00:41:40,710 --> 00:41:45,900
experimental but if you have time try it

00:41:44,130 --> 00:41:47,759
out we're still happy to receive

00:41:45,900 --> 00:41:52,289
feedback and we'll see how we can take

00:41:47,759 --> 00:41:56,069
it further okay so like I said we try to

00:41:52,289 --> 00:41:58,140
be a toolkit and yeah last but not least

00:41:56,069 --> 00:42:00,660
really the community right it's a big

00:41:58,140 --> 00:42:03,390
part of what archives and the scholar

00:42:00,660 --> 00:42:05,999
community as a whole so how to reach us

00:42:03,390 --> 00:42:08,430
yes first website for website is are

00:42:05,999 --> 00:42:10,229
kind of outdated but the most up-to-date

00:42:08,430 --> 00:42:12,869
and most interesting thing for you guys

00:42:10,229 --> 00:42:14,849
is the issues and specifically the

00:42:12,869 --> 00:42:18,509
community contrib or how we call them

00:42:14,849 --> 00:42:21,059
now easy to contribute or and also low

00:42:18,509 --> 00:42:22,829
priority tickets if there's something

00:42:21,059 --> 00:42:24,479
marked low priority we basically mean

00:42:22,829 --> 00:42:27,239
the core team doesn't have time for it

00:42:24,479 --> 00:42:29,970
but if you would step up and be able to

00:42:27,239 --> 00:42:32,999
submit a PR we'd be super happy to pull

00:42:29,970 --> 00:42:34,890
it in and you can talk to us on the

00:42:32,999 --> 00:42:36,900
Gator channel so acha acha is about

00:42:34,890 --> 00:42:39,569
using our core like how do I do this

00:42:36,900 --> 00:42:41,130
with a CO and akkad F is if you're

00:42:39,569 --> 00:42:44,940
trying to work on a pull request or

00:42:41,130 --> 00:42:47,549
actually some internal thingies and also

00:42:44,940 --> 00:42:51,140
in the next week or two we're going to

00:42:47,549 --> 00:42:54,059
launch a mini campaign that's basically

00:42:51,140 --> 00:42:56,160
going to try to encourage people to

00:42:54,059 --> 00:42:58,859
contribute a bit and there's going to be

00:42:56,160 --> 00:43:01,559
some cool t-shirts doing so if you're

00:42:58,859 --> 00:43:04,229
into our t-shirts I certainly am and

00:43:01,559 --> 00:43:07,019
look out for our current light band

00:43:04,229 --> 00:43:09,869
blocks in the next week's here's a few

00:43:07,019 --> 00:43:13,109
links here's one of the quotes from the

00:43:09,869 --> 00:43:16,380
top of programming which I live and die

00:43:13,109 --> 00:43:19,640
by and this is all I got

00:43:16,380 --> 00:43:19,640
so thank you

00:43:24,369 --> 00:43:32,349
we do have a short word for questions a

00:43:27,530 --> 00:43:32,349
few minutes there in the back please

00:43:34,630 --> 00:43:40,880
right so the question was who or why is

00:43:38,869 --> 00:43:44,780
active selection bad and if I explain

00:43:40,880 --> 00:43:47,839
can explain it more deeply so as a

00:43:44,780 --> 00:43:50,260
concept maybe it doesn't seem a skirt

00:43:47,839 --> 00:43:52,579
for as it really is but the thing is

00:43:50,260 --> 00:43:53,510
it's one of those things that can be

00:43:52,579 --> 00:43:56,869
easily abused

00:43:53,510 --> 00:44:02,510
so what I found and some consulting

00:43:56,869 --> 00:44:05,119
engagement was that instead of instead

00:44:02,510 --> 00:44:07,130
you know you have some some interaction

00:44:05,119 --> 00:44:10,099
going on like an image actor and some

00:44:07,130 --> 00:44:14,240
back end actor etc and instead of them

00:44:10,099 --> 00:44:16,760
knowing about each other just by either

00:44:14,240 --> 00:44:20,000
being passed in and a constructor or as

00:44:16,760 --> 00:44:22,790
a message they would just synthesize the

00:44:20,000 --> 00:44:25,220
path by guessing and remembering where

00:44:22,790 --> 00:44:27,530
the other guy lives and that's very

00:44:25,220 --> 00:44:29,869
brittle right because it's not encoded

00:44:27,530 --> 00:44:32,329
in code but okay this actor of passing

00:44:29,869 --> 00:44:34,670
it over here now I have it but its face

00:44:32,329 --> 00:44:37,569
making up to address and yes currently

00:44:34,670 --> 00:44:42,170
it works but it may not as the thing is

00:44:37,569 --> 00:44:43,400
by sending to an actor selection because

00:44:42,170 --> 00:44:45,440
there's two ways you can use it you can

00:44:43,400 --> 00:44:47,210
just send messages to an actor selection

00:44:45,440 --> 00:44:49,400
or you can use an active selection to

00:44:47,210 --> 00:44:51,349
get an active ref back so the second one

00:44:49,400 --> 00:44:53,329
is already better because okay then I

00:44:51,349 --> 00:44:55,670
have an actor of but if you just send

00:44:53,329 --> 00:44:57,500
messages to an active selection then you

00:44:55,670 --> 00:45:00,170
probably won't even notice that you're

00:44:57,500 --> 00:45:02,690
sending two into a black hole well you

00:45:00,170 --> 00:45:05,869
will notice in that lettuce but you know

00:45:02,690 --> 00:45:09,349
it's not very visible just by looking at

00:45:05,869 --> 00:45:11,740
the code okay do we have another

00:45:09,349 --> 00:45:11,740
question

00:45:13,810 --> 00:45:17,320
yes please

00:45:21,770 --> 00:45:28,400
well bridge the thing is archetype tis

00:45:24,500 --> 00:45:31,550
built exactly as a I don't know 200

00:45:28,400 --> 00:45:36,890
lines of code on top of normal actors so

00:45:31,550 --> 00:45:43,060
by bridge you basically mean which way

00:45:36,890 --> 00:45:45,650
around yeah we can it's the same system

00:45:43,060 --> 00:45:50,270
so as I'm saying it's basically just a

00:45:45,650 --> 00:45:52,340
API on top of the current actors so it's

00:45:50,270 --> 00:45:54,560
exactly the same protocol it's the same

00:45:52,340 --> 00:45:56,600
system so they can communicate to each

00:45:54,560 --> 00:45:58,730
other obviously if you start talking to

00:45:56,600 --> 00:46:03,410
an untyped one van yeah when it's on

00:45:58,730 --> 00:46:10,630
tact okay last question maybe here in

00:46:03,410 --> 00:46:12,800
the middle yeah excellent question so

00:46:10,630 --> 00:46:18,470
respect pressure only available in

00:46:12,800 --> 00:46:21,500
streams yes and no so back pressure in

00:46:18,470 --> 00:46:23,960
the nice way of I don't actually have to

00:46:21,500 --> 00:46:26,230
care and think about it at all

00:46:23,960 --> 00:46:28,460
yes fits only in streams but that's

00:46:26,230 --> 00:46:30,650
because the infrastructure where

00:46:28,460 --> 00:46:33,530
basically handles it transparently and

00:46:30,650 --> 00:46:36,110
you just save the map and what enables

00:46:33,530 --> 00:46:38,960
us to do it there transparently is

00:46:36,110 --> 00:46:41,210
actually a strict layout of the

00:46:38,960 --> 00:46:43,330
processing pipeline so again if it's

00:46:41,210 --> 00:46:45,950
more restrictive we can do more stuff

00:46:43,330 --> 00:46:48,260
internally optimize and do the

00:46:45,950 --> 00:46:51,370
backpressure thing for example but what

00:46:48,260 --> 00:46:55,220
it actually is it's basically very

00:46:51,370 --> 00:46:57,350
similar to work pooling so on the

00:46:55,220 --> 00:47:00,290
internals what the backpressure protocol

00:46:57,350 --> 00:47:02,270
looks like is you send someone I am

00:47:00,290 --> 00:47:04,310
ready to receive ten elements and when

00:47:02,270 --> 00:47:06,350
someone can send you ten elements so

00:47:04,310 --> 00:47:09,370
technically you can implement for same

00:47:06,350 --> 00:47:11,920
thing in actors but actors signatures

00:47:09,370 --> 00:47:14,360
there's no way to express with

00:47:11,920 --> 00:47:16,730
statically and nicely because you can

00:47:14,360 --> 00:47:19,940
always send a message to someone and it

00:47:16,730 --> 00:47:21,950
would be really hard to to make it where

00:47:19,940 --> 00:47:23,660
we could fail with an exception but

00:47:21,950 --> 00:47:27,200
that's not helping right

00:47:23,660 --> 00:47:31,050
so you can do it yourself but it's not

00:47:27,200 --> 00:47:32,910
built-in in that sense if you're looking

00:47:31,050 --> 00:47:35,460
for it from the work pooling pattern is

00:47:32,910 --> 00:47:39,540
pretty much the way people do it with

00:47:35,460 --> 00:47:42,890
actors okay so thank you very much if

00:47:39,540 --> 00:47:42,890

YouTube URL: https://www.youtube.com/watch?v=vgFoKOxrTzg


