Title: Mastering Scala with IntelliJ IDEA - by Alexander Podkhalyuzin
Publication date: 2016-06-17
Playlist: Scala Days New York 2016
Description: 
	This talk was recorded at Scala Days New York, 2016. Follow along on Twitter @scaladays and on the website for more information http://scaladays.org/.

Abstract:
Why do developers love IntelliJ IDEA? Because it takes care of all the routine and provides intelligent coding assistance. Once you master it, the productivity gains are quite surprising. In this session I'll show you the 30 hidden gems of IntelliJ IDEA that will help you become a more productive Scala developer.
Captions: 
	00:00:04,279 --> 00:00:09,990
my name is alexandre pato vision i'm

00:00:07,649 --> 00:00:14,370
scala plugin for IntelliJ IDEA team

00:00:09,990 --> 00:00:16,230
leader and today I want to share with

00:00:14,370 --> 00:00:19,740
you some knowledge about productivity

00:00:16,230 --> 00:00:23,490
with our tool it will be not only about

00:00:19,740 --> 00:00:29,970
Scala it will be also about IntelliJ

00:00:23,490 --> 00:00:33,480
IDEA in general part 2 and I think that

00:00:29,970 --> 00:00:36,510
everybody of you will find something new

00:00:33,480 --> 00:00:39,000
today and even one you think today will

00:00:36,510 --> 00:00:43,980
mean that you're not wasting your time

00:00:39,000 --> 00:00:46,320
right now so let's play the game I am

00:00:43,980 --> 00:00:50,840
giving you tips and you are calculating

00:00:46,320 --> 00:00:54,210
number of things which was new to you

00:00:50,840 --> 00:00:59,039
but please be honest it's very serious

00:00:54,210 --> 00:01:01,140
game ok so let's start from some

00:00:59,039 --> 00:01:06,240
questions

00:01:01,140 --> 00:01:08,749
do you know IntelliJ IDEA ok it's what

00:01:06,240 --> 00:01:11,520
kind of polygraph question because I

00:01:08,749 --> 00:01:14,549
hope everybody know but do you use it

00:01:11,520 --> 00:01:20,069
for scour development ok almost

00:01:14,549 --> 00:01:21,840
everybody what about Eclipse you and

00:01:20,069 --> 00:01:28,409
what about text editors like sublime

00:01:21,840 --> 00:01:31,560
them and others ok so looks like not

00:01:28,409 --> 00:01:36,599
only IntelliJ the users wants to become

00:01:31,560 --> 00:01:40,049
more productive for the beginning I want

00:01:36,599 --> 00:01:45,240
to tell you some story about our users

00:01:40,049 --> 00:01:47,310
so it's about you as we are usually

00:01:45,240 --> 00:01:52,649
participate in such conferences like

00:01:47,310 --> 00:01:58,649
Scala days people our users talk to us

00:01:52,649 --> 00:02:02,520
and they can tell us their problems

00:01:58,649 --> 00:02:06,779
it was our tool and we can see how they

00:02:02,520 --> 00:02:10,140
actually use IntelliJ IDEA and it's

00:02:06,779 --> 00:02:12,660
usually it's quite a basic stuff

00:02:10,140 --> 00:02:16,330
so the

00:02:12,660 --> 00:02:21,700
rule is very similar to rule about money

00:02:16,330 --> 00:02:25,630
so you know that 80% of money owned by

00:02:21,700 --> 00:02:29,710
20% of people so the same thing and

00:02:25,630 --> 00:02:33,280
where a few people can be real masters

00:02:29,710 --> 00:02:38,200
in IntelliJ IDEA zero and then the main

00:02:33,280 --> 00:02:44,550
reason why we started to be more focused

00:02:38,200 --> 00:02:47,740
on simple features product performance

00:02:44,550 --> 00:02:51,790
discoverability of features and general

00:02:47,740 --> 00:02:57,489
usability and that's also one of the

00:02:51,790 --> 00:02:59,680
main reasons for this talk okay so let's

00:02:57,489 --> 00:03:02,320
start and don't forget to calculate

00:02:59,680 --> 00:03:06,360
number of new things

00:03:02,320 --> 00:03:09,610
the first tip will be that you have

00:03:06,360 --> 00:03:14,020
activator templates right in IntelliJ

00:03:09,610 --> 00:03:18,280
IDEA so you can start a new project let

00:03:14,020 --> 00:03:23,160
me go out of presentation mode so you

00:03:18,280 --> 00:03:27,100
can start new project new you project

00:03:23,160 --> 00:03:29,590
then you can choose activator and we can

00:03:27,100 --> 00:03:38,830
find hello

00:03:29,590 --> 00:03:41,410
I want hello Scott okay yes finish even

00:03:38,830 --> 00:03:47,080
though okay

00:03:41,410 --> 00:03:49,150
so now we can open new project we need

00:03:47,080 --> 00:03:54,459
to wait for a bit for SBT

00:03:49,150 --> 00:03:58,500
and now we can open hello right click to

00:03:54,459 --> 00:04:01,450
run hello and this is one of them

00:03:58,500 --> 00:04:04,150
fastest way to create hello project

00:04:01,450 --> 00:04:07,269
hello world project in Scala but did I

00:04:04,150 --> 00:04:09,959
say that you shouldn't use mouse to be

00:04:07,269 --> 00:04:13,000
more productive with the IntelliJ IDEA

00:04:09,959 --> 00:04:16,660
probably I forgot to mention it and I

00:04:13,000 --> 00:04:21,419
did everything wrong just now so I have

00:04:16,660 --> 00:04:25,450
to start over again let's do it okay so

00:04:21,419 --> 00:04:28,930
this second tip will be about find

00:04:25,450 --> 00:04:32,410
action and not everybody know that you

00:04:28,930 --> 00:04:35,140
can just call find action and you can

00:04:32,410 --> 00:04:37,030
put here for example project so we can

00:04:35,140 --> 00:04:39,670
choose new project here right from

00:04:37,030 --> 00:04:43,510
keyboard we don't have to use mouse at

00:04:39,670 --> 00:04:47,320
all so this is a dialog it's not

00:04:43,510 --> 00:04:50,020
necessary to be to stab born idea guru

00:04:47,320 --> 00:04:52,210
and use keyboard even in dialogues but

00:04:50,020 --> 00:04:56,640
here it's possible to use only keyboard

00:04:52,210 --> 00:05:02,200
so we can put here name test scholar and

00:04:56,640 --> 00:05:07,450
find hello scholar project and and this

00:05:02,200 --> 00:05:16,300
is much faster than it was before and I

00:05:07,450 --> 00:05:21,070
already used only keyboard so we now can

00:05:16,300 --> 00:05:27,430
navigate to class hello and run from

00:05:21,070 --> 00:05:30,490
context menu and that's that's all as

00:05:27,430 --> 00:05:35,800
you can see when I invoke something you

00:05:30,490 --> 00:05:38,410
can see shortcuts right on the screen

00:05:35,800 --> 00:05:41,380
it's because of presentation assistant

00:05:38,410 --> 00:05:44,050
plugin so you can see in view here we

00:05:41,380 --> 00:05:48,970
can disable or enable it description of

00:05:44,050 --> 00:05:51,130
actions so if you want to show to any of

00:05:48,970 --> 00:05:53,050
your colleagues about something some

00:05:51,130 --> 00:05:55,060
presentation about IntelliJ IDEA so

00:05:53,050 --> 00:05:59,260
presentation assistants is very good

00:05:55,060 --> 00:06:02,940
thing because telling short cuts allowed

00:05:59,260 --> 00:06:05,500
is a bit boring and difficult things and

00:06:02,940 --> 00:06:07,480
probably it's not possible to remember

00:06:05,500 --> 00:06:10,890
all shortcuts right from this live

00:06:07,480 --> 00:06:15,490
presentation so you will have video

00:06:10,890 --> 00:06:17,950
recording later so you can look at this

00:06:15,490 --> 00:06:20,740
video and see you may remember all

00:06:17,950 --> 00:06:28,900
shortcuts right from this screen

00:06:20,740 --> 00:06:31,810
recording so it's great but you can ask

00:06:28,900 --> 00:06:35,440
me is it really IntelliJ IDEA because

00:06:31,810 --> 00:06:38,290
it's only code here I can definitely say

00:06:35,440 --> 00:06:41,220
that it's IntelliJ IDEA

00:06:38,290 --> 00:06:46,440
it's the tip number three about

00:06:41,220 --> 00:06:52,540
distraction free mode so this is the way

00:06:46,440 --> 00:06:58,590
how I use usually IntelliJ IDEA I like

00:06:52,540 --> 00:07:02,890
to see only code so code can feel more

00:06:58,590 --> 00:07:06,280
parts of strings of my screen and I can

00:07:02,890 --> 00:07:11,350
see more code on especially on small

00:07:06,280 --> 00:07:12,970
laptops so it's very cool and another

00:07:11,350 --> 00:07:16,210
thing is that you don't have

00:07:12,970 --> 00:07:21,700
distractions of tool windows or

00:07:16,210 --> 00:07:24,580
navigation bars and so on and now I can

00:07:21,700 --> 00:07:26,980
start with Scala features but if I start

00:07:24,580 --> 00:07:29,320
it then you will decide that it's not

00:07:26,980 --> 00:07:31,330
possible to work in destruction free

00:07:29,320 --> 00:07:34,230
mode because it requires a lot of

00:07:31,330 --> 00:07:37,570
keyboard by next a lot of knowledge so

00:07:34,230 --> 00:07:40,510
before starting Scala specific features

00:07:37,570 --> 00:07:47,020
I show you how to work in distraction

00:07:40,510 --> 00:07:55,500
free mode the first important let me

00:07:47,020 --> 00:07:55,500
open okay this is another screen

00:08:01,150 --> 00:08:11,039
okay

00:08:03,330 --> 00:08:16,169
let me close it so let me stay this is a

00:08:11,039 --> 00:08:18,449
scallop loggin project actually we can

00:08:16,169 --> 00:08:21,599
open anything here any class from Scala

00:08:18,449 --> 00:08:27,479
plugin project and one of important

00:08:21,599 --> 00:08:32,339
things is search search and navigation

00:08:27,479 --> 00:08:36,149
features so let's start from them we

00:08:32,339 --> 00:08:39,390
have searched everywhere feature in

00:08:36,149 --> 00:08:41,880
IntelliJ IDEA it's my next tip actually

00:08:39,390 --> 00:08:44,159
I personally I don't like this feature

00:08:41,880 --> 00:08:47,310
because it requires it shows you too

00:08:44,159 --> 00:08:50,579
much and if I want for example classes I

00:08:47,310 --> 00:08:53,760
can search for classes but I am sure

00:08:50,579 --> 00:08:56,519
that some of you will like it so the

00:08:53,760 --> 00:09:00,540
next tip is to try search Rivera fish so

00:08:56,519 --> 00:09:05,370
it's double shift and then you can look

00:09:00,540 --> 00:09:09,930
for any anything like classes symbols or

00:09:05,370 --> 00:09:11,670
files or even actions and wrong

00:09:09,930 --> 00:09:14,850
configuration so I can put here

00:09:11,670 --> 00:09:20,100
something like implicit and this and

00:09:14,850 --> 00:09:23,220
find a lot of implicit stuff here so if

00:09:20,100 --> 00:09:28,920
you brief enough you can use class

00:09:23,220 --> 00:09:31,620
search to find implicit collector class

00:09:28,920 --> 00:09:35,010
which is responsible for implicit search

00:09:31,620 --> 00:09:38,700
and IntelliJ IDEA so you can observe a

00:09:35,010 --> 00:09:41,339
bit here and probably after some

00:09:38,700 --> 00:09:50,370
observation you will close it and forget

00:09:41,339 --> 00:09:52,380
it as nightmare and ok so another thing

00:09:50,370 --> 00:09:56,250
is that you can use camel humps

00:09:52,380 --> 00:09:58,980
everywhere so not only in clusters here

00:09:56,250 --> 00:10:04,440
we can use camel humps chemicals mean

00:09:58,980 --> 00:10:07,440
that you can use uppercase letters and

00:10:04,440 --> 00:10:10,949
they will mark small small words small

00:10:07,440 --> 00:10:12,750
parts of whole class name so for example

00:10:10,949 --> 00:10:16,800
you want to find action like split

00:10:12,750 --> 00:10:20,119
vertically so I can invoke it like split

00:10:16,800 --> 00:10:25,649
in the youth camel house here so at this

00:10:20,119 --> 00:10:28,230
search this action editor will be

00:10:25,649 --> 00:10:31,069
splitted vertically and the same I can

00:10:28,230 --> 00:10:31,069
unsplit

00:10:31,220 --> 00:10:37,399
and that's all so fine action is very

00:10:34,619 --> 00:10:41,069
very powerful so if you don't remember

00:10:37,399 --> 00:10:46,699
keyboard shortcut just the find action

00:10:41,069 --> 00:10:50,610
by name and everything will be good so

00:10:46,699 --> 00:10:53,999
what we hide it won't we hide it

00:10:50,610 --> 00:10:56,730
navigation bar and a lot of people use

00:10:53,999 --> 00:11:00,509
it but actually you can use it on demand

00:10:56,730 --> 00:11:03,269
so if we want to use a navigation bar we

00:11:00,509 --> 00:11:07,379
can invoke some shortcut to see it on

00:11:03,269 --> 00:11:09,720
demand so we can open here we can even

00:11:07,379 --> 00:11:12,869
create a new file right from navigation

00:11:09,720 --> 00:11:17,879
panel here so we can open creates color

00:11:12,869 --> 00:11:22,819
class test and this new class in the

00:11:17,879 --> 00:11:27,029
package we chosen in navigation bar and

00:11:22,819 --> 00:11:29,939
next thing is taps taps is a real

00:11:27,029 --> 00:11:32,689
problem in editor because you will you

00:11:29,939 --> 00:11:35,399
will you can see a lot of tabs and

00:11:32,689 --> 00:11:39,509
usually people use mouse to navigate

00:11:35,399 --> 00:11:42,809
between tabs and in destruction few more

00:11:39,509 --> 00:11:46,290
free mode you don't have tabs and it

00:11:42,809 --> 00:11:49,490
helps you to avoid using mouse for this

00:11:46,290 --> 00:11:52,290
ridiculous thing because you can use

00:11:49,490 --> 00:11:54,990
recent files which which is much more

00:11:52,290 --> 00:11:59,699
powerful than tops one of the reasons

00:11:54,990 --> 00:12:02,249
for powerful powerfulness of this dialog

00:11:59,699 --> 00:12:05,759
because you still can use speed search

00:12:02,249 --> 00:12:10,829
with camel hands so and you don't have

00:12:05,759 --> 00:12:13,169
such feature for tabs so I can use speed

00:12:10,829 --> 00:12:15,179
search and filters this list and then

00:12:13,169 --> 00:12:21,139
just press ENTER to navigate to another

00:12:15,179 --> 00:12:25,110
fun one more thing is run configurations

00:12:21,139 --> 00:12:28,619
so I already showed that you can run

00:12:25,110 --> 00:12:29,760
configuration from context by some

00:12:28,619 --> 00:12:33,570
shortcut

00:12:29,760 --> 00:12:35,990
but you co can also run also on-demand

00:12:33,570 --> 00:12:40,709
choose configuration or edit

00:12:35,990 --> 00:12:43,980
configurations and you can run or debug

00:12:40,709 --> 00:12:46,230
or also can edit right for you only

00:12:43,980 --> 00:12:51,000
using your keyboard so you don't

00:12:46,230 --> 00:12:54,690
actually need to see this round button

00:12:51,000 --> 00:12:57,750
debug button and so on and the last

00:12:54,690 --> 00:13:03,450
thing and probably the most important

00:12:57,750 --> 00:13:04,950
which which already hided is two bars or

00:13:03,450 --> 00:13:09,200
two windows sorry

00:13:04,950 --> 00:13:13,110
so two windows is like project view and

00:13:09,200 --> 00:13:16,829
although then you can invoke on-demand

00:13:13,110 --> 00:13:18,060
so you can invoke for example project

00:13:16,829 --> 00:13:21,930
view

00:13:18,060 --> 00:13:26,430
moreover you can select target by

00:13:21,930 --> 00:13:30,750
calling option one for example and then

00:13:26,430 --> 00:13:33,810
you can find and this class will be

00:13:30,750 --> 00:13:35,610
marked here in project view so it's kind

00:13:33,810 --> 00:13:39,510
it's like navigation bar called

00:13:35,610 --> 00:13:45,089
on-demand ball but in project view you

00:13:39,510 --> 00:13:48,839
also can use for example speed search in

00:13:45,089 --> 00:13:55,260
in project view as well it's it's kind

00:13:48,839 --> 00:13:57,779
of using user camel humps everywhere so

00:13:55,260 --> 00:14:00,720
I also you can use chemicals here and

00:13:57,779 --> 00:14:03,200
search over project view and it's very

00:14:00,720 --> 00:14:03,200
very cool stuff

00:14:03,420 --> 00:14:11,910
you can also may want to have a

00:14:07,740 --> 00:14:14,490
structure view tool window or always

00:14:11,910 --> 00:14:17,430
opened but it's also some distraction

00:14:14,490 --> 00:14:18,570
and you can call it on demand when you

00:14:17,430 --> 00:14:21,470
really need it

00:14:18,570 --> 00:14:26,910
so you can call it and navigate between

00:14:21,470 --> 00:14:30,079
functions inside of your class other

00:14:26,910 --> 00:14:34,290
tool windows you can open using your

00:14:30,079 --> 00:14:38,790
using numbers so I can open version

00:14:34,290 --> 00:14:42,410
control just using comment line and some

00:14:38,790 --> 00:14:44,930
of them you even can't open

00:14:42,410 --> 00:14:48,680
using numbers for example SBT to window

00:14:44,930 --> 00:14:52,070
but you still can use recent files it's

00:14:48,680 --> 00:14:54,550
very hidden place where to open tall

00:14:52,070 --> 00:14:58,180
windows but in recent files you can use

00:14:54,550 --> 00:15:01,190
SBT and open a tool window here and

00:14:58,180 --> 00:15:05,180
finally when you don't need to windows

00:15:01,190 --> 00:15:09,320
you can hide them all and that's only

00:15:05,180 --> 00:15:13,310
one shortcut reaction so that's that's

00:15:09,320 --> 00:15:16,190
my vision how to use IntelliJ IDEA and

00:15:13,310 --> 00:15:19,850
there's only my vision about destruction

00:15:16,190 --> 00:15:22,060
free mode and I probably a more

00:15:19,850 --> 00:15:25,280
productive with destruction primo and

00:15:22,060 --> 00:15:29,240
with this knowledge about IntelliJ IDEA

00:15:25,280 --> 00:15:32,630
you can find your own path about hi how

00:15:29,240 --> 00:15:35,630
to use IntelliJ IDEA so I'm I'm not

00:15:32,630 --> 00:15:37,610
insisting now on using only in

00:15:35,630 --> 00:15:42,800
destruction free mode but it's really

00:15:37,610 --> 00:15:47,000
cool and my tip is to try it because

00:15:42,800 --> 00:15:52,120
it's real okay

00:15:47,000 --> 00:15:57,710
so let's move to scour specific features

00:15:52,120 --> 00:16:02,590
and before that I want to tell you very

00:15:57,710 --> 00:16:02,590
obvious thing about color plugin that

00:16:03,790 --> 00:16:12,500
Scala plugin can teach you can help you

00:16:08,480 --> 00:16:18,080
to learn Scala better and my story is

00:16:12,500 --> 00:16:22,700
that at the end of 2007 when I tried to

00:16:18,080 --> 00:16:26,980
apply to jetbrains I wasn't really

00:16:22,700 --> 00:16:29,960
familiar with Java was nearby in Java

00:16:26,980 --> 00:16:33,350
they asked me to do some whole tasks

00:16:29,960 --> 00:16:37,310
before the interview and I

00:16:33,350 --> 00:16:40,970
I even it's a shame but I even didn't

00:16:37,310 --> 00:16:46,270
know about what chandri's really do so I

00:16:40,970 --> 00:16:46,270
sent the project as eclipse project

00:16:46,510 --> 00:16:54,459
but problem is not about Eclipse problem

00:16:49,610 --> 00:16:59,240
was that I could look more professional

00:16:54,459 --> 00:17:06,230
because IntelliJ could help me to avoid

00:16:59,240 --> 00:17:10,790
some some typical problems which were

00:17:06,230 --> 00:17:14,929
not implemented in Eclipse I was lucky

00:17:10,790 --> 00:17:17,390
enough but the story is still really

00:17:14,929 --> 00:17:22,179
interesting and first for Scarlett's

00:17:17,390 --> 00:17:27,790
it's really the same so let's open some

00:17:22,179 --> 00:17:30,559
class for example and let me show you

00:17:27,790 --> 00:17:32,630
some simple example you if you are

00:17:30,559 --> 00:17:36,559
IntelliJ IDEA users you already know

00:17:32,630 --> 00:17:39,380
about our inspections but I want to show

00:17:36,559 --> 00:17:42,730
you a business so you will understand

00:17:39,380 --> 00:17:53,030
why I'm showing it so let's put it list

00:17:42,730 --> 00:17:56,780
then map that not map filter something

00:17:53,030 --> 00:18:00,140
is equals to and now we are calling is

00:17:56,780 --> 00:18:04,480
empty but actually we want to understand

00:18:00,140 --> 00:18:09,140
if it's not and so I'm putting here not

00:18:04,480 --> 00:18:12,260
it's postfix composition which gives us

00:18:09,140 --> 00:18:15,890
possibility for 6 left in place which

00:18:12,260 --> 00:18:19,100
gives a possibility to invert some

00:18:15,890 --> 00:18:22,160
expression into not expression it's one

00:18:19,100 --> 00:18:25,360
of the lots of postfix expression so in

00:18:22,160 --> 00:18:27,500
my the next step and just use postfix

00:18:25,360 --> 00:18:29,720
expression see it's very very handy

00:18:27,500 --> 00:18:33,620
because you don't need to move carrot

00:18:29,720 --> 00:18:36,440
back to the beginning called the expert

00:18:33,620 --> 00:18:39,740
view expression but now it's interesting

00:18:36,440 --> 00:18:46,370
question what this code really does is

00:18:39,740 --> 00:18:48,720
it's not really clear yeah okay let me

00:18:46,370 --> 00:18:51,370
present

00:18:48,720 --> 00:18:55,420
open present I think now it's better

00:18:51,370 --> 00:19:00,760
yeah so what what this code really do

00:18:55,420 --> 00:19:06,190
who know in a few second okay

00:19:00,760 --> 00:19:12,160
so intelligent helps you to replace it

00:19:06,190 --> 00:19:14,650
in a few actions to non empty then it

00:19:12,160 --> 00:19:17,710
can in place with exist method and

00:19:14,650 --> 00:19:22,330
finally it suggest you to replace with

00:19:17,710 --> 00:19:24,400
contains so it's it was obvious for

00:19:22,330 --> 00:19:33,390
IntelliJ that it just contains two

00:19:24,400 --> 00:19:37,120
method so it's it's really helpful and

00:19:33,390 --> 00:19:40,690
some when you are using ontology it

00:19:37,120 --> 00:19:45,190
helps you to avoid such problems and

00:19:40,690 --> 00:19:48,309
simplify your code but what I really

00:19:45,190 --> 00:19:51,330
want to show you is a possibility to fix

00:19:48,309 --> 00:19:56,770
all the problems over your project so

00:19:51,330 --> 00:20:00,460
let me open a navigation bar so we can

00:19:56,770 --> 00:20:02,860
invoke use worksheet a package and for

00:20:00,460 --> 00:20:07,270
example we can invoke action on this

00:20:02,860 --> 00:20:10,000
package I want to run inspection by name

00:20:07,270 --> 00:20:17,370
so I know which expection I exactly I

00:20:10,000 --> 00:20:21,730
want to run and this is part o part of

00:20:17,370 --> 00:20:24,059
an SS about partial function though so I

00:20:21,730 --> 00:20:27,190
can invoke on the current directory and

00:20:24,059 --> 00:20:31,179
we can see that a lot of problems here

00:20:27,190 --> 00:20:33,760
in the code it's not a real problem but

00:20:31,179 --> 00:20:38,650
we still can simplify this case into a

00:20:33,760 --> 00:20:42,370
simple function without case it's a new

00:20:38,650 --> 00:20:44,740
inspection IntelliJ IDEA so some code

00:20:42,370 --> 00:20:49,090
bases still have lots of such

00:20:44,740 --> 00:20:51,850
inspections and probably manually fixing

00:20:49,090 --> 00:20:54,790
even using Cantera gita can be annoying

00:20:51,850 --> 00:20:57,520
so you can invoke this action on the

00:20:54,790 --> 00:20:59,600
whole project and fix all of them just

00:20:57,520 --> 00:21:02,630
by invoking here

00:20:59,600 --> 00:21:07,210
quick fix and we can apply quick fixes

00:21:02,630 --> 00:21:16,900
everywhere we found IntelliJ IDEA found

00:21:07,210 --> 00:21:27,620
this problem so let's continue with

00:21:16,900 --> 00:21:31,880
worksheet feature who knows no it's not

00:21:27,620 --> 00:21:37,280
possible right so if you used is

00:21:31,880 --> 00:21:42,860
interesting for you to to do such things

00:21:37,280 --> 00:21:45,020
and it's it's probably interesting for

00:21:42,860 --> 00:21:49,400
other people as well so probably a

00:21:45,020 --> 00:21:54,280
feature request is welcome for us okay

00:21:49,400 --> 00:21:54,280
so who know what is worksheet feature is

00:21:54,309 --> 00:22:02,179
so worksheet is something like console

00:21:59,330 --> 00:22:05,750
so you can experiment with some

00:22:02,179 --> 00:22:10,400
expressions but actually in a scholar

00:22:05,750 --> 00:22:14,450
worksheet you can experiment this whole

00:22:10,400 --> 00:22:20,690
file so set of expressions so let's open

00:22:14,450 --> 00:22:24,980
light scholar worksheet we can create

00:22:20,690 --> 00:22:28,910
lights color or in the air so it's

00:22:24,980 --> 00:22:31,250
it does don't have any physical file it

00:22:28,910 --> 00:22:37,840
actually has physical file in Tampa

00:22:31,250 --> 00:22:37,840
directory but you it's okay

00:22:42,240 --> 00:22:49,380
okay that's it so now we can write some

00:22:45,850 --> 00:22:53,680
expressions and it will be automatically

00:22:49,380 --> 00:22:57,820
loaded and evaluated in the right side

00:22:53,680 --> 00:23:01,090
of expressions now I want to show you

00:22:57,820 --> 00:23:03,520
some intentions intentions is very very

00:23:01,090 --> 00:23:08,770
small refactorings it's also well known

00:23:03,520 --> 00:23:14,560
and IntelliJ IDEA feature so we can put

00:23:08,770 --> 00:23:23,350
for example map X X plus 1 so here and

00:23:14,560 --> 00:23:25,890
now we can for example introduce okay so

00:23:23,350 --> 00:23:25,890
it's weird

00:23:28,930 --> 00:23:42,790
okay let me open and create physical

00:23:33,870 --> 00:23:46,060
worksheet we already have it so we can

00:23:42,790 --> 00:23:48,150
put here and it looks like a bug in

00:23:46,060 --> 00:23:52,000
light worksheet so we can introduce

00:23:48,150 --> 00:23:54,730
implicit parameter here and it's like

00:23:52,000 --> 00:23:56,860
small refractions when you need and we

00:23:54,730 --> 00:24:00,850
have lots of such refactorings so for

00:23:56,860 --> 00:24:07,360
example we can write you can introduce

00:24:00,850 --> 00:24:14,680
this variable as list so we can write

00:24:07,360 --> 00:24:17,050
list values are plus list plus dot so

00:24:14,680 --> 00:24:22,840
for example another intention is

00:24:17,050 --> 00:24:26,490
possibility to reduce this sum into

00:24:22,840 --> 00:24:29,200
interpolated string so we can do it and

00:24:26,490 --> 00:24:32,620
for this particular case we can do even

00:24:29,200 --> 00:24:36,760
simpler so we can open here list values

00:24:32,620 --> 00:24:42,070
are and and then complete here list and

00:24:36,760 --> 00:24:44,560
put dot here so intentions is very very

00:24:42,070 --> 00:24:46,980
interesting thing because for example

00:24:44,560 --> 00:24:58,560
sometimes we can even learn some Scala

00:24:46,980 --> 00:25:02,260
for example can put here X 1 2 5 u u X

00:24:58,560 --> 00:25:08,290
for example we can convert it to curly

00:25:02,260 --> 00:25:13,990
braces and then put here really equal X

00:25:08,290 --> 00:25:16,780
plus 1 for example so intention can show

00:25:13,990 --> 00:25:21,310
you how for for comprehension look

00:25:16,780 --> 00:25:26,190
exactly so we can do some intentions for

00:25:21,310 --> 00:25:32,160
for comprehension and we can see some

00:25:26,190 --> 00:25:32,160
scary thing about how it really looks

00:25:34,739 --> 00:25:42,999
but my next tip is not about intentions

00:25:40,570 --> 00:25:46,600
it's about full list of intentions so

00:25:42,999 --> 00:25:49,210
it's you don't need to learn every

00:25:46,600 --> 00:25:52,179
intention you can look into whole list

00:25:49,210 --> 00:25:58,529
of intentions and we can search here for

00:25:52,179 --> 00:26:02,409
in tensions in settings and then we can

00:25:58,529 --> 00:26:04,960
find all scowl intentions so we can move

00:26:02,409 --> 00:26:07,629
this list and take a look for all of

00:26:04,960 --> 00:26:10,090
this intention and this is a lot of

00:26:07,629 --> 00:26:12,879
smaller factors and the same keyboard

00:26:10,090 --> 00:26:16,090
shortcut for all of these refactorings

00:26:12,879 --> 00:26:18,759
and it's so useful in lots of places so

00:26:16,090 --> 00:26:21,279
just take a look for this list and it

00:26:18,759 --> 00:26:26,769
will you will learn a lot about IntelliJ

00:26:21,279 --> 00:26:29,559
IDEA but something new about IntelliJ

00:26:26,769 --> 00:26:32,830
IDEA I mean that it's something which is

00:26:29,559 --> 00:26:38,470
not available yet in release versions

00:26:32,830 --> 00:26:41,950
which it's available only in in nightly

00:26:38,470 --> 00:26:44,649
builds and it's really experimental so

00:26:41,950 --> 00:26:50,350
it's very similar to the sugaring call

00:26:44,649 --> 00:26:56,080
for statement let's let me open explain

00:26:50,350 --> 00:26:59,499
Scala code file and now you can see that

00:26:56,080 --> 00:27:02,590
it's some code but it's color compiled

00:26:59,499 --> 00:27:06,460
before doing actual compilation into

00:27:02,590 --> 00:27:10,809
byte code just sugar it into lots of

00:27:06,460 --> 00:27:14,669
different stuff and now in IntelliJ you

00:27:10,809 --> 00:27:21,759
can use explain Scala code action and

00:27:14,669 --> 00:27:25,509
see another scary stuff okay let me sort

00:27:21,759 --> 00:27:30,070
you use softwraps in active editor so

00:27:25,509 --> 00:27:32,559
you can see how this expression so you

00:27:30,070 --> 00:27:36,190
can see that outer tube link was used

00:27:32,559 --> 00:27:39,879
during context was used and open string

00:27:36,190 --> 00:27:42,609
was used with implicit pretty F of

00:27:39,879 --> 00:27:45,309
string can do from and lots of different

00:27:42,609 --> 00:27:47,530
stuff so it was very very simple

00:27:45,309 --> 00:27:50,800
expression and with explain

00:27:47,530 --> 00:27:54,370
color code you can see what exactly it

00:27:50,800 --> 00:27:57,520
is it's a bit better than the sugar and

00:27:54,370 --> 00:28:01,960
four statements because it's it can do

00:27:57,520 --> 00:28:05,710
more readable stuff and one more

00:28:01,960 --> 00:28:10,620
interesting thing about such sugaring

00:28:05,710 --> 00:28:10,620
and understanding what exactly do

00:28:11,100 --> 00:28:18,580
compiler is about macro sees so we in

00:28:15,430 --> 00:28:23,290
the IntelliJ IDEA we have macros

00:28:18,580 --> 00:28:26,650
annotations which can do caches caching

00:28:23,290 --> 00:28:30,370
facility in for IntelliJ IDEA and this

00:28:26,650 --> 00:28:34,590
some scary stuff and it's it's really

00:28:30,370 --> 00:28:40,720
hard to develop macro sees without

00:28:34,590 --> 00:28:44,050
feedback from the compiler so compiler

00:28:40,720 --> 00:28:49,800
actually has such feedback and you can

00:28:44,050 --> 00:28:53,140
open for example build as bt file

00:28:49,800 --> 00:28:57,670
somewhere here and you can see that i I

00:28:53,140 --> 00:29:01,000
added a compiler option a group why

00:28:57,670 --> 00:29:04,390
macro debug light so it it's a pretty

00:29:01,000 --> 00:29:08,140
prints actual trees after matrix punch

00:29:04,390 --> 00:29:12,430
and now in IntelliJ IDEA you can use

00:29:08,140 --> 00:29:17,110
this prints from compiled to macro

00:29:12,430 --> 00:29:22,920
expand right in your editor so let me

00:29:17,110 --> 00:29:22,920
find usages sequence

00:29:24,480 --> 00:29:32,970
imple so we found some usage of this

00:29:28,540 --> 00:29:32,970
macro notation and now we can

00:29:41,360 --> 00:29:57,010
I actually forgot shortcut for that but

00:29:52,700 --> 00:29:57,010
it's still possible to find it here

00:30:01,000 --> 00:30:07,750
okay in presentation mode everything is

00:30:04,000 --> 00:30:15,039
very big so it's option shift comment

00:30:07,750 --> 00:30:19,750
data okay problem is that okay we need

00:30:15,039 --> 00:30:26,640
just to compile not because I forgot so

00:30:19,750 --> 00:30:26,640
you can see ok sorry for that

00:30:30,840 --> 00:30:39,690
so now we can invoke completion again

00:30:33,860 --> 00:30:43,519
you can see a lot of okay so it looks

00:30:39,690 --> 00:30:43,519
like project is broken a bit

00:30:52,910 --> 00:30:56,860
it's spheres

00:31:07,050 --> 00:31:15,850
okay sorry for that I didn't check

00:31:11,110 --> 00:31:18,790
compilation I think I will not start

00:31:15,850 --> 00:31:20,770
full rebuild its problem problem this

00:31:18,790 --> 00:31:26,230
incremental compilation after my

00:31:20,770 --> 00:31:29,130
experimenting and Makris this expand

00:31:26,230 --> 00:31:32,860
macros feature it really requires

00:31:29,130 --> 00:31:35,290
compilation of for your project and then

00:31:32,860 --> 00:31:40,300
you can macro expand this cached

00:31:35,290 --> 00:31:43,570
annotation and see also scary thing if

00:31:40,300 --> 00:31:46,300
you would expand it it's not comparable

00:31:43,570 --> 00:31:48,580
the scary thing but it really helps you

00:31:46,300 --> 00:31:53,850
to understand what's really going with

00:31:48,580 --> 00:31:53,850
your macros so it's it's very very handy

00:31:53,910 --> 00:32:03,670
okay so now we can continue and I want

00:32:00,160 --> 00:32:13,180
to show you a bit more about Scala so

00:32:03,670 --> 00:32:16,200
let me open any class here so let me

00:32:13,180 --> 00:32:22,560
create I want to show you some

00:32:16,200 --> 00:32:25,780
completions so now we can create new and

00:32:22,560 --> 00:32:30,370
here invoke smart completion after this

00:32:25,780 --> 00:32:34,870
so you can see a lot of inheritors of

00:32:30,370 --> 00:32:37,780
see class and if you invoke any trade so

00:32:34,870 --> 00:32:38,920
intelligible automatically implement all

00:32:37,780 --> 00:32:42,760
required maths

00:32:38,920 --> 00:32:48,460
after this smart completion usage we can

00:32:42,760 --> 00:32:53,140
invoke anything like this and next

00:32:48,460 --> 00:32:55,980
interesting that now we can invoke for

00:32:53,140 --> 00:33:00,640
example qualified name but it's it was

00:32:55,980 --> 00:33:03,820
brought by implicit import import of

00:33:00,640 --> 00:33:06,820
some extension import we can remove that

00:33:03,820 --> 00:33:10,270
and you can see that it's red right now

00:33:06,820 --> 00:33:12,310
and what to do how to add this missing

00:33:10,270 --> 00:33:14,710
import in intelligent you can invoke

00:33:12,310 --> 00:33:17,260
second base in completion which shows

00:33:14,710 --> 00:33:20,130
you this please see class X dot

00:33:17,260 --> 00:33:23,490
qualified name so we can invoke it

00:33:20,130 --> 00:33:27,030
and see that this extension method is

00:33:23,490 --> 00:33:30,240
already added extension crops across

00:33:27,030 --> 00:33:32,090
text in this file were also broken by

00:33:30,240 --> 00:33:34,710
removing to this something like

00:33:32,090 --> 00:33:38,000
containing class so we can do the same

00:33:34,710 --> 00:33:43,740
thing and input to this remember X and

00:33:38,000 --> 00:33:47,789
so on in one miles so what's next now we

00:33:43,740 --> 00:33:56,490
can want for example something like

00:33:47,789 --> 00:34:00,419
option of string and now we can invoke

00:33:56,490 --> 00:34:03,600
want to invoke method replace so we can

00:34:00,419 --> 00:34:06,690
invoke it and after that we need to put

00:34:03,600 --> 00:34:10,200
here some because I replace a return

00:34:06,690 --> 00:34:12,600
string not option of string but in

00:34:10,200 --> 00:34:17,629
IntelliJ you can actually invoke smart

00:34:12,600 --> 00:34:20,639
completion and see some of replace

00:34:17,629 --> 00:34:26,250
suggestion so we can invoke it and put

00:34:20,639 --> 00:34:30,240
here anything we want and that's what

00:34:26,250 --> 00:34:33,500
exactly we wanted so some in some

00:34:30,240 --> 00:34:38,600
completions were hindi when you have

00:34:33,500 --> 00:34:42,659
none option value and requires option

00:34:38,600 --> 00:34:48,480
and now we we are going back to hello

00:34:42,659 --> 00:34:56,159
world project and we open this recently

00:34:48,480 --> 00:34:59,720
closed the skull what I wanted to do is

00:34:56,159 --> 00:35:05,430
something to show a bit about debugging

00:34:59,720 --> 00:35:12,869
wherever hidden feature of debugger let

00:35:05,430 --> 00:35:19,010
me write some very weird code so that

00:35:12,869 --> 00:35:24,000
put list list of 1 2 3 and write buffer

00:35:19,010 --> 00:35:28,380
of four five so it's mutable and very

00:35:24,000 --> 00:35:34,559
bad cold don't do this at home now we

00:35:28,380 --> 00:35:39,299
can println a list and let's update list

00:35:34,559 --> 00:35:43,630
as instance of a right buffer off hand

00:35:39,299 --> 00:35:45,599
plus equals six so it's even worse than

00:35:43,630 --> 00:35:51,609
it was before

00:35:45,599 --> 00:35:57,849
and now we can just ran from context and

00:35:51,609 --> 00:36:02,230
you to see that the this code works as

00:35:57,849 --> 00:36:11,950
expected but we want to put here

00:36:02,230 --> 00:36:19,390
breakpoints and now we can debug the so

00:36:11,950 --> 00:36:21,579
we were here on debug now I want to show

00:36:19,390 --> 00:36:25,089
some watches and evoluate expression

00:36:21,579 --> 00:36:31,089
facility so you can see here list we can

00:36:25,089 --> 00:36:33,640
open list very big phones so and here

00:36:31,089 --> 00:36:36,970
our array buffer so we can see all

00:36:33,640 --> 00:36:39,730
values of list you know that list is

00:36:36,970 --> 00:36:42,700
actually head and tail head and tail in

00:36:39,730 --> 00:36:45,569
IntelliJ is it has pretty view so you

00:36:42,700 --> 00:36:51,069
can see all the list of this list and

00:36:45,569 --> 00:36:53,650
now we want to watch about array buffer

00:36:51,069 --> 00:36:57,119
project or array buffer object so

00:36:53,650 --> 00:37:00,549
intelligent you can mark this object

00:36:57,119 --> 00:37:06,460
with some label so we can put label

00:37:00,549 --> 00:37:09,430
buffer and now after IntelliJ have

00:37:06,460 --> 00:37:12,839
marked this object and on another

00:37:09,430 --> 00:37:16,569
breakpoint we can extract this object

00:37:12,839 --> 00:37:21,069
from GBM if it still is if it's not

00:37:16,569 --> 00:37:24,750
garbage collected so in watches we can

00:37:21,069 --> 00:37:29,019
for example put here some value like

00:37:24,750 --> 00:37:31,509
buffer debug label for example we want

00:37:29,019 --> 00:37:35,980
to see a length of this array buffer so

00:37:31,509 --> 00:37:38,740
we can put here a length and it's still

00:37:35,980 --> 00:37:42,250
very small so you can see that that

00:37:38,740 --> 00:37:44,230
length is 2 as expected but now we can

00:37:42,250 --> 00:37:47,560
do

00:37:44,230 --> 00:37:51,790
step over and one more step over and you

00:37:47,560 --> 00:37:55,800
can see that our marked object changed

00:37:51,790 --> 00:38:00,580
because we are looking after this object

00:37:55,800 --> 00:38:04,980
so it's very handy feature when you need

00:38:00,580 --> 00:38:08,080
to debug some complicated environment

00:38:04,980 --> 00:38:12,190
probably written is not in not true

00:38:08,080 --> 00:38:16,480
Scala way with mutable values then you

00:38:12,190 --> 00:38:19,180
need to look over variables all the

00:38:16,480 --> 00:38:24,970
objects and to see a whole content of

00:38:19,180 --> 00:38:27,610
these objects so marking of these

00:38:24,970 --> 00:38:34,300
objects is very very handy in very

00:38:27,610 --> 00:38:37,570
difficult cases okay so that's all about

00:38:34,300 --> 00:38:41,290
IntelliJ IDEA I wanted to tell a bit

00:38:37,570 --> 00:38:43,780
more about Scala but finally I decided

00:38:41,290 --> 00:38:50,040
to tell a bit more about IntelliJ IDEA I

00:38:43,780 --> 00:38:53,890
mean that it can give you opportunity to

00:38:50,040 --> 00:38:56,140
to learn Scala plugin features as well

00:38:53,890 --> 00:38:58,420
for example if you know that you can

00:38:56,140 --> 00:39:03,280
take a look for intentions list you can

00:38:58,420 --> 00:39:08,800
analyze this list and learn new ways to

00:39:03,280 --> 00:39:12,760
refactor your Scala code and I was

00:39:08,800 --> 00:39:17,110
serious about game so now it's time to

00:39:12,760 --> 00:39:21,430
ask you how many new things you just

00:39:17,110 --> 00:39:23,110
learnt so if if you know ever if you

00:39:21,430 --> 00:39:28,270
knew everything from this presentation

00:39:23,110 --> 00:39:34,960
so just read the kind nobody so you

00:39:28,270 --> 00:39:39,550
learned one you think two three new

00:39:34,960 --> 00:39:42,190
things okay one two three so how much

00:39:39,550 --> 00:39:43,510
how many people one two three four

00:39:42,190 --> 00:39:45,760
that's great

00:39:43,510 --> 00:39:49,970
so you you are the winners and I have

00:39:45,760 --> 00:39:54,349
prizes exclusive prizes for you actually

00:39:49,970 --> 00:39:59,869
so reach me after the this talk and I'll

00:39:54,349 --> 00:40:02,720
give you okay so now thank you and I'm

00:39:59,869 --> 00:40:06,200
ready for questions and if you have more

00:40:02,720 --> 00:40:09,079
questions we have a booth and you can

00:40:06,200 --> 00:40:13,550
ask me everything about IntelliJ IDEA in

00:40:09,079 --> 00:40:29,290
the future of IntelliJ IDEA so yeah

00:40:13,550 --> 00:40:29,290
thank you any questions okay

00:40:40,910 --> 00:40:52,620
okay so question is if if JetBrains

00:40:48,420 --> 00:40:55,100
wants to make IntelliJ IDEA more like

00:40:52,620 --> 00:40:55,100
them

00:41:17,190 --> 00:41:21,960
okay IntelliJ is a terminal application

00:41:22,410 --> 00:41:31,480
I'm not sure above the actually we have

00:41:26,490 --> 00:41:34,060
them plugin so you can use it like them

00:41:31,480 --> 00:41:37,960
I'm not sure it's it's exactly the same

00:41:34,060 --> 00:41:40,770
as them but still it's for more power

00:41:37,960 --> 00:41:43,240
users we can for example make

00:41:40,770 --> 00:41:47,200
distraction free mode available by

00:41:43,240 --> 00:41:50,080
default because lots of people will not

00:41:47,200 --> 00:41:53,730
understand what to do so for beginners

00:41:50,080 --> 00:41:58,600
we had to do a lot of UI stuff

00:41:53,730 --> 00:42:02,940
implemented around so they can discover

00:41:58,600 --> 00:42:02,940
a lot of features okay

00:42:25,630 --> 00:42:35,720
okay so so it's answer that you can open

00:42:32,380 --> 00:42:40,250
any file in IntelliJ IDEA from terminal

00:42:35,720 --> 00:42:43,630
so you can add a script for that okay

00:42:40,250 --> 00:42:43,630
any more question yes

00:43:05,220 --> 00:43:17,940
so the question if our factorings are

00:43:08,010 --> 00:43:24,150
safe or not yeah you know it's software

00:43:17,940 --> 00:43:27,750
stuff and it's like like in any any up

00:43:24,150 --> 00:43:34,200
any license we are writing because thats

00:43:27,750 --> 00:43:38,430
you can't use it in in medical purposes

00:43:34,200 --> 00:43:41,850
and so on so the problem is that bugs

00:43:38,430 --> 00:43:44,760
are possible so I would say that it's

00:43:41,850 --> 00:43:46,530
better to review any change you are

00:43:44,760 --> 00:43:48,690
doing you are committing into your

00:43:46,530 --> 00:43:51,510
repository even if it's automatically

00:43:48,690 --> 00:43:55,680
done by IntelliJ IDEA so bugs are

00:43:51,510 --> 00:44:00,770
possible but for simple cases I am sure

00:43:55,680 --> 00:44:00,770
I am pretty sure that it can be okay

00:44:12,020 --> 00:44:19,490
okay so the question is is it possible

00:44:14,910 --> 00:44:22,620
to implement debugging for Scala GS

00:44:19,490 --> 00:44:29,490
actually we are doing some work in Scour

00:44:22,620 --> 00:44:32,550
GS force college yes initially it's it's

00:44:29,490 --> 00:44:36,210
about code completion for dynamics from

00:44:32,550 --> 00:44:39,870
colleges so so IntelliJ Ultimate Edition

00:44:36,210 --> 00:44:44,220
knows about JavaScript alone I mean it

00:44:39,870 --> 00:44:49,010
can complete some stuff from JavaScript

00:44:44,220 --> 00:44:52,800
and we want to bring this JavaScript

00:44:49,010 --> 00:44:56,700
completion into Scala editor so it's

00:44:52,800 --> 00:45:00,720
kind of API for Scour dynamics and

00:44:56,700 --> 00:45:03,030
probably we will implement debugger

00:45:00,720 --> 00:45:07,650
stuff as well it's I think it's possible

00:45:03,030 --> 00:45:10,950
a not really complicated task but what

00:45:07,650 --> 00:45:13,020
about Eva that expression is a bit more

00:45:10,950 --> 00:45:16,150
complicated because we we need to

00:45:13,020 --> 00:45:22,059
re-implement colleges compiler to

00:45:16,150 --> 00:45:27,190
even so it's I would say that once

00:45:22,059 --> 00:45:31,720
colleges will be mainstream and lots of

00:45:27,190 --> 00:45:34,599
users will colleges and will have lots

00:45:31,720 --> 00:45:45,039
of users so probably it will be a good

00:45:34,599 --> 00:45:49,059
reason to implement this as well okay

00:45:45,039 --> 00:45:55,680
then thank you and any other questions I

00:45:49,059 --> 00:45:55,680

YouTube URL: https://www.youtube.com/watch?v=uOxEvqNLWuA


