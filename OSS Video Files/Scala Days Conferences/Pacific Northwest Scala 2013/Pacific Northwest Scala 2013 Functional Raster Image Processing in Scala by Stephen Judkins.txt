Title: Pacific Northwest Scala 2013 Functional Raster Image Processing in Scala by Stephen Judkins
Publication date: 2020-01-27
Playlist: Pacific Northwest Scala 2013
Description: 
	Most existing image processing libraries feature clumsy imperative interfaces to complicated mutable data structures. Here, we will show how raster graphics can be represented using simple functions and data structures and how a new library helps bridge the gap to real-world image formats. We'll see how operations on raster graphics can be made simpler, faster, more memory-efficient, and more composable compared to existing alternatives. We'll see both how common image processing tasks can be simple expressed, and examples of visually striking or fun effects that this framework makes easy.

Help us caption & translate this video!

http://amara.org/v/FG6n/
Captions: 
	                              all right ah thanks everyone for being                               here thanks Pacific Northwest scala for                               doing this awesome conference Thanks                               previous talks were great my name is                               Stephen Jenkins I am a local freelance                               developer I've done several Scala                               projects sadly not gainfully employed                               writing Scala right now um so a couple                               years ago I was involved in this project                                we're involved a lot of processing of a                                raster images and raster images are just                                images made of a bunch of pixels like as                                distinct from vector images and i                                realize that it was a rails project when                                i was brought in and i realized                                everything is terrible if you're trying                                to write manipulate these images i found                                all available image libraries were                                difficult to use in some way or another                                and feature like these AP is where                                there's like a bunch of things going on                                like the java bufferedimage there's and                                check out a tile I don't even know what                                that means there's color there's all                                these writable raster readable raster                                there's a lot of stuff going on here and                                I understand the motivations some way                                because powerful and you can go and you                                know your GPU actually can do some stuff                                on the images at the buffered image API                                but it's also terrible and most of the                                time it doesn't work so mutable data                                structures pretty much every mature                                library I saw is no offense at all on                                immutability and I know I'm preaching to                                the choir here probably a lot of people                                here understand the importance of                                mutability referential transparency and                                a lot of them require any sort of filter                                or operational image they require really                                concrete representations like these lava                                Morsi libraries and idea is you want to                                perform an operation you pass this giant                                buffer                                of however many million pixels you're                                showing and then specific bite format                                for each pixel and then this operation                                based on that and if multiple filters                                want things in different formats that                                means you're doing a big copy every time                                and use in its kind of a pin and the                                question when I'm faced with something                                like this like everything's hard what is                                what is essence of the problem what                                actually is an image and I thought about                                it and they're simple raster image is                                incredibly simple so let's give them a                                symbol representation in Scala and this                                is basically what i came up with pixel                                of type a width height apply this mostly                                i called this guy pure image for lack of                                a better term that better name simple                                mostly purely functional really no side                                effects very few exceptions except where                                it's really hard to avoid given bound                                errors and stuff and fun like actually                                had once i had this guy working i found                                is actually became not sure but cool and                                interesting to be doing stopping images                                and the stuff that's not essential to                                prom if you get it out of your way the                                stuff the central parts typically prom                                that's interesting and challenging and                                quick to do so so here's api i wrote                                this is basically parsing an image when                                you load it up like i showed you the                                image API before you just get width                                height apply and here's entirety of how                                loading up by DeRay turns into this                                stuff and it's kind of shocking to see                                this on one page from looking at really                                the amount of effort that's gone to                                other libraries to get a jpeg image                                loaded from disk into representation and                                memory so for colors realize in reality                                I've seen three color                                basically you have RGB RGB with alpha                                and gray scale but I realize that you                                know there's a lot of stuff going on                                there's a lot of image processing that                                in this projects working on not in even                                have to deal with I know professionals                                design people doing stuff are often deal                                with things with totally arbitrary color                                death so so here's our internal                                representation of pixels here i'm using                                a any vowel here which is a value class                                in scholarship woods boxing in some                                cases it doesn't really work at the time                                 due to some issues i'll get that later                                 so you can see this is um it's pretty                                 easy like oh i didn't copy and paste                                 this quite right but it's close to the                                 actual representation of what you get                                 and this is simple the internal this is                                 all bitwise operations that are very                                 fast and get in line by the JVM when you                                 need to do them and we can store each                                 channel as a as an integer internally                                 but you can do whatever you want if you                                 don't if you have something that needs                                 more than integer you can do that and                                 now the question really comes how can we                                 work with pixels generic operations on                                 when the representation of the pixels                                 could be completely arbitrary and the                                 answer i came to which i'm coming to a                                 lot frequently and i have a problem is                                 type classes so here's a pixel type                                 class and here's an example of the                                 things you would do that image drop-offs                                 is just a little helper function that                                 implicitly gets this year as you can see                                 this is a very simple type class if you                                 want to add two colors together and see                                 what happens you can do that and                                 probably define this differently to pay                                 depending on the contacts and might add                                 more of these fade out some pixel you                                 can do it that way and a zero actually I                                 figure out this is a mono I'd right now                                 which is sort of cool but if you want to                                 treat a pixels like                                 no functors I think you might be able to                                 find find a way to existing type class                                 to do that but for the pre-filters have                                 written these three have been sufficient                                 and again if specialization is entirely                                 working and you can entirely avoid                                 boxing on doing this except when you                                 first get the type class representation                                 um as far as output goes i also tried to                                 keep this incredibly simple as simple as                                 possible arbitrary number of pixel types                                 i portrayed a number of image formats                                 again wet prom like mini output formats                                 don't support some pixel pipes you don't                                 have an alpha channel in a JPEG so                                 solution a tech classes and here's                                 basically I did I have an output format                                 and you can go and you have like this I                                 had it sealed for a while but then I was                                 like no I think this is better so if                                 someone wants to write a new one and                                 then output you just do it's pretty                                 simple and you can go and define imply                                 complicit to build these type classes                                 what's kind of cool for stuff like JPEGs                                 if you have alpha channel you can go and                                 change the implicit surround for you                                 could potentially do something like                                 changed behavior by adding into                                 something that mixes in white or black                                 as part of the alpha channel or that                                 checkerboard thing people love to do um                                 generally these things are composable                                 and pretty flexible right now I just                                 have pink and JPEG outputs but you could                                 you could potentially right whatever                                 someone was saying who I was talking to                                 someone a minute ago about how they're                                 dealing with powerpoints ah image format                                 I'm sure that would be a fun project as                                 well so that's basically the structure                                 or a pretty simple API and tends to work                                 okay so i'm just going to first run                                 through an example here of some of the                                 stuff I've done using this and                                 first we need a pitcher here's basically                                 loading a picture yes and this gives you                                 representation this will type of what it                                 is and of course like I have an ATT for                                 the types of the parser you have to                                 extract out so you get to know you have                                 to figure out what type of image it is                                 parse time to do things with it because                                 it could be set RGB is that an alpha                                 channels that have whatever so pattern                                 matching and here you can deal with                                 whatever else if you need to get the                                 right type in the production code and                                 this other variant is using what I did                                 here is I if it was at another ADT that                                 said it was either grayscale or um RGB                                 I've had an alpha channel at that point                                 I would go and uh mix in white as a                                 background because that's what we wanted                                 and everything's algebraic so you can                                 get exhausted miss Jackie and I would                                 ever use a picture I don't know if                                 anyone seen zardoz this is aa as this                                 picture will do and we're going to do                                 some pretty quick little little game                                 with this so let's say I'll show you're                                 doing less this first square crop which                                 is a built-in filter just like fine the                                 largest square image that will fit                                 within the bounce and that's included in                                 the library and then so let's do fi here                                 is the golden ratio just a magic number                                 it not really um but you can see the                                 width is um little higher than this and                                 its height is the height of the square                                 and they say if it's to the right let's                                 do image lab zero which is like the zero                                 and the mono I'd and this black that's                                 or if it's to the left part we just this                                 um again this is purely functional                                 assays Z from zara des here on the left                                 let's do something else here let's flip                                 it rotate is this other this other                                 filter i have here rotate it to the                                 right and the                                 the left we do this to the right of that                                 we have a nice things just as crotch                                 kind of over here on the right side and                                 then this compose let's change that a                                 little bit so did I change in this one I                                 even know what I change in this one I                                 just lazy dit I'm not sure what the                                 point of this slide is but we lazy to                                 here and then let's go let's call it                                 self here and suddenly with one change                                 of the power of recursion and functional                                 programming we have this this kind of                                 cool looking thing and I like this                                 because it's really clear we had to add                                 out of the lazy in because if not it                                 will just recurse forever and the really                                 cool part about this is you don't even                                 have to worry about it terminating                                 because eventually the roundoff errors                                 of shrinking it down means that an image                                 the little image eventually just                                 disappears                                                            hits the the recursion case and if you                                 had noticed this guy right here and here                                 this these pixels are really blurry and                                 ugly and I'm like well let's have                                 another filter I wrote and compose that                                 and this is you can see it gets nice and                                 a little prettier and this is all I'm                                 doing here is adding in a launch oh Sh                                 filter which I'll talk about in Tibet                                 which is this one image filter and you                                 have this thing suddenly this sort of                                 ugly ugly stuff and the filter I go and                                 I pass in the ratio you're going to                                 scale up by now kind of the cool part of                                 this filter is is that you are filtering                                 it before you scale it and that's an                                 important property because doing some                                 sort of anti-aliasing on after scaling                                 you're losing a bunch of details as you                                 can see we're just doing nearest                                 neighbor here and it's like all blocking                                 is randomly picking this we want to                                 filter it beforehand so blue is                                 everything up and then when you shrink                                 it down even though filtering and lon                                 chose filter on an image without                                 shrinking that you can't tell a                                 difference you filter it and then you                                 shrink it and suddenly it looks much                                 better                                 but a lot of the existing libraries if                                 you run a lawn Jewish filter it's on                                 this concrete thing works like oh yeah                                 behind this big array and then let's go                                 and let's iterate over every single                                 pixel and apply it and then when you're                                 going to scale it nearest neighbor after                                 that you've done                                                       need because you've run this filter in                                 every pixel but this functional thing                                 this is lazy and it goes and it calls it                                 might be some work reduplicated and if                                 you have multiple functions as going                                 back the cool part is you can write this                                 and is much faster and it's meaningful                                 and is referential e equivalent whether                                 it's a bigger or smaller scale so it's                                 kind of a win this when I wrote it this                                 way I'm like wow that just worked and it                                 did and everything was good I've                                 included a few filters in this which I'm                                 going to be open sourcing this today yes                                 like a launch oh Sh filter translate                                 scale crop alpha blending and whatever                                 you want to write this again these are                                 functions basically so launch was                                 filtering I'll explain it a little bit                                 I'm not exactly certain how it works but                                 basically you get this sort of                                 mathematical waveform and then you go                                 and a given pixel you go and you                                 normalize this waveform to the space                                 from zero is integrates to one and then                                 you go and you find all the pixels that                                 are discreetly around this and you can                                 see these pixel numbers at the bottom                                 and you build given how much scale a                                 little grid of different pixels you pick                                 in each direction make sure that the                                 numbers you get from each of these every                                 single one of those in the grid adds up                                 to one and then the new rizzoli given                                 pixel is you get all the pixels from the                                 grid fade them within that operation I                                 showed you in the pixel type class by                                 that number and then sum them all up and                                 it ends up working out that it's pretty                                 I think there's sort of some some                                 pseudoscience                                 I'm this because ultimately it's like                                 people are talking about but it's the                                 human eyes and how it works and this                                 happens to be the thing that my boss the                                 time who is does video production said                                 was the best and it was I'll just give                                 it a little example of something here's                                 this big thing and this is nearest                                 neighbor scale scaling and then apply in                                 the filter you can just see what a great                                 so you could do by linear stop I had                                 implemented by linear is not as nice um                                 so if someone would like to implement                                 that they could I just have long chest                                 for now um so it generally works quite                                 well but there's a good number of                                 problems with this library at the moment                                 um first off we're depending on external                                 image libraries for parsing and                                 generation and the biggest problem with                                 that is they're all terrible it's some                                 way I for this open source release I'm                                 relying entirely on the Java a awt                                 imaging is kind of crazy again I've                                 hidden all the details so you have about                                 the crazy part where the buggy part                                 doesn't parse a lot of JPEGs out on the                                 wild there's a patchy imaging which in                                 that the clothes stores part that I'm                                 going to export this local source went                                 eventually but if it catches a few                                 classes of bugs from the JPEG stuff all                                 the time it falls back to this slow but                                 accurate Apache imaging jpg library and                                 then recently there's a branch that I am                                 see libraries using lib turbo jpg I mean                                 it works they have a very low level                                 interface you're able to go and do it                                 efficiently and quickly but the written                                 see and I don't know if you fund fun                                 times of C libraries on the JVM the                                 build and distribution steps that                                 entails has made it so i don't know may                                 be cool if someone were to find a fast                                 way to do jpeg stuff and pure java I                                 don't know if how possible that is I                                 don't think you'd want to do it in a                                 functional way current languages but                                 it's a right now it works um another                                 major problem                                 through is boxing and this everyone has                                 done as done optimization of Scala code                                 I think you might find no signal                                 optimization I have done besides stuff                                 like complexity but no single micro                                 opposition prove nearly as fruitful as a                                 void in boxing and does everyone know                                 what boxing is anyone not know no um                                 yeah so if you're dealing with generics                                 and stuff like you need to get a                                 primitive variable and you need to wrap                                 it inside this object wrapper in order                                 to pass it around through things that                                 only work with objects and it's                                 frustrating because to use powers of                                 modularity and usable source and Scala                                 you frequently end up using a lot of                                 these abstractions that are generic yet                                 the problem is if they're not if you                                 don't do it right and they're not                                 specialized at certain points and it                                 points before you control how they're                                 used you cannot use primitives with them                                 and so basically image processing                                 involves very many small calculations no                                 allocation the stuff involved with                                 dealing with objects allocation heat                                 pointers generation GC are pretty cheap                                 things but they're more expensive than                                 doing a bunch of bitwise operations on                                 the stack so you end up you go I you                                 have something that's fast boxing gets                                 involved and quickly you have a program                                 that does ninety percent of this time                                 moving heat pointers around ten percent                                 of this time doing the actual work and                                 it's frustrating moment um so cooling on                                 Scala generics work well I think it's                                 powerful and we've shown that these are                                 great way to reuse code specialization                                 works well if you specialize an                                 individual thing and say I want this to                                 be on an integer Scala is pretty smart                                 about making it work                                 um value classes work well if you have a                                 value class what that is is something                                 that has a type representation and                                 scallop maybe some methods on it that                                 scala implementation avoids boxing                                 entirely ah they don't work well                                 together none of these things and I                                 actually don't think that this is a huge                                 bug again i don't know i might fixing                                 that might involve locking paul phillips                                 in your basement for a month not feeding                                 them till he does but it's these                                 features come together in a way that                                 aren't um i can see how it would be hard                                 to get this working but there's no                                 reason it can't if this bug is fixed                                 this library will instantly become much                                 faster because we're specializing on                                 integers for these things all our value                                 classes that i'm using are integers if                                 you do it and it works it will if the                                 boxing is avoided it will work so if                                 someone has some insight into why we                                 couldn't do this daddy I'm appreciated                                 here's an example of some boxing all                                 these things no box in until you use all                                 these features together and it breaks                                 hmm whoa I don't even know where I went                                 here sorry did that happen don't click                                 on this presentation thing so I guess                                 basically that's it i'm hoping to get                                 this thing released in next couple days                                 i don't know like well license if anyone                                 has specific open source license I'd                                 recommend and yell it now which one MIT                                 okay I'll do a mighty sounds good ah                                 something like that so hopefully this                                 will be up soon I hope people will start                                 to use it like I said right now it's not                                 appropriate for super high performance                                 stuff but I'm going to will be soon and                                 I think it'd be awesome if you want to                                 do a little utilities it'll be cool fun                                 quick and easy typesafe ah so any                                 questions uh Rob um if you write a                                 filter so what I think again it's not                                 clear how this would work but right now                                 you go and you write a filter you need                                 to tell it that is specialized I think                                 the bait the base class says a                                 specialist on this too I think in the                                 subclasses you'd also have to do that                                 and right now you can specialize on int                                 and I think you could say I'm going to                                 specialize on rap dense but I don't see                                 the point of that because something                                 specialized on int should work for all                                 value clad okay yeah yeah that's what                                 I'm saying so it doesn't work now if you                                 want to work on yourself what i would do                                 is write your code and say when you                                 write any culture you want to be fast                                 say you want to be specialized because                                 i'm not actually sure if that comes from                                 the superclass whether it is on nth                                 write the code like it is specialized                                 hopefully this issue is addressed and it                                 will be much faster guy behind Rob                                 no this was entirely um I've just done                                 we supported gif JPEG TIFF bitmap and                                 stuff just I was thinking that this                                 representation of generic type I don't                                 know if there are some formats that you                                 couldn't represent like that but it                                 seems like with an arbitrarily complex                                 pixel representation you could do a lot                                 and there's probably a lot you can do if                                 you're dealing with layers and other                                 stuff with that and composing multiple                                 of these raster images representation                                 yeah there's no reason you can use a                                 float it's not not specialized yet but                                 neither zen so yeah yeah all fit in                                 memory I had this thing as doing was                                 streaming it and build tiles and you can                                 fit a really big image in memory right                                 now is it yeah i guess i guess i don't                                 know to say but virtual memory and                                 blocking and maybe you could you could                                 do it to a a channel a pile back channel                                 buffer and then that would be again                                 encoding getting these pixels and sort                                 of an IOM own ad or something you need                                 to do would be make the case where it's                                 in memory enormously slower so                                 so for your value classes it seems like                                 the big benefits you were getting out of                                 them was that you had that little like                                 nice syntax for doing the red when you                                 live in health parts of each pixel and                                 then there's also i guess like the sort                                 of type safety angle where you can have                                 a method or function or something that                                 only accepts pixels of a certain type so                                 you can say this operation is defined                                 for the grayscale are to be as far as                                 the former it seems like that shouldn't                                 be a problem specialization as long as                                 you like way to convert your pixels you                                 know when you're in the concrete context                                 to paint rather than the generic are you                                 really relying on the tapes API aspect                                 are you mostly using it for the utility                                 of like handling the shifting and                                 masking I'm mostly using as utility of                                 having the shifting and masking in the                                 internal thing again it since until it                                 comes out because you're dealing with                                 crappy Java things anyway so hoping to                                 deal with that mostly I think utility I                                 see in this is that you have the type                                 size of people using the library being                                 my god um the type safe of people type                                 safety people using the library being                                 able to say like this is only and it it                                 has avoided bugs like the JPEG output                                 not trying to pass something with an                                 alpha channel is an important important                                 consideration                                 I've looked at it I'm really interested                                 in it um I have not yet fully evaluated                                 and I'm sure that like all generic                                 programming with trying to do with                                 primitives there's a lot of different                                 things you can do but I do know that the                                 one scholar issue of that were fixed                                 would fix most of the Proms that it                                 exists now in in with boxing in this                                 library alright that's all thank you for                                 your time I appreciate it                                 you
YouTube URL: https://www.youtube.com/watch?v=D3VBVGhZ1SE


