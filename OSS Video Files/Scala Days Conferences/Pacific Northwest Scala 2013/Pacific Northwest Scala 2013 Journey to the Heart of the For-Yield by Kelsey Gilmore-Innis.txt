Title: Pacific Northwest Scala 2013 Journey to the Heart of the For-Yield by Kelsey Gilmore-Innis
Publication date: 2020-01-27
Playlist: Pacific Northwest Scala 2013
Description: 
	Options and IOs and Iteratees, oh my! If you've poked around at Scala you've seen it--the ubiquitous for-comprehension sprinkled through idiomatic Scala code. As it turns out, what looks like a bit of syntactic sugar to ease prosaic list manipulation is actually a super powerful structure for abstracting away all kinds of common operations in a safe and maintainable way. It allows you to take full advantage of type safety and pushes the work of setting up boilerplate to the compiler. We'll break down exactly what's going on in a for-comprehension and explore some of the wild and wonderful structures that can be used within one. You'll leave with a deeper understanding of the real-world benefits of functional programming.

Help us caption & translate this video!

http://amara.org/v/FG7W/
Captions: 
	                              hi my name is Kelsey thank you for the                               pnw Scala guys they're having me here I                               am asked Oliver Gerber have been working                               in Scala for about two years                               am i right now I am doing cool stuff                               with words and with various Scala                               frameworks at reverb formerly known as                               would Nick I have swag people want to                               come talk to me afterwards and that's                                where you can find my extremely                                infrequently updated blog and that's                                where you can find me on Twitter and                                feel free to tweet about this talk                                unless you don't like it in which case                                maybe just keep it to yourself                                do I am that's my sweet band I spent two                                months this summer traveling across the                                country with my husband in my van and I                                wrote this talk in the middle of it so                                this slides our van and roadtrip related                                and if there's a mistake it's because I                                wrote it in a band so that's my deal I'm                                curious                                and I've been asked a little bit about                                this what folks experience is with Scala                                here I mean our people do how many                                people here use Scala at work okay                                that's that's a lot that's more even                                than a lot of things how many people                                came from like a math or FP background -                                Scala fewer yeah how many people came                                from a Java background - Scala                                imperatives background - skull habitats                                dynamic background discolor anybody                                alright this is a pretty diverse group                                which is cool I want to talk a little                                bit about where I came to functional                                programming in Scala from and this was                                basically my introduction of functional                                programming the interview for my last                                job they said so do you have experience                                with functional programming and I said                                well I like to think my code usually                                works and they laughed at me                                and then they asked me                                              questions about lenses so you know I'm                                usually very much like functional                                programming is an intimidating to be                                intimidating it could be warm and fuzzy                                this is something you're already doing                                but I really do get it it can in fact be                                extremely intimidating um and I still                                don't really know how to use a lens                                that's I'm getting better but you know                                they saw enough I guess and they hired                                me and I was starting to work in this                                Scala code base and like many scholar                                code bases it was varying levels of sort                                of functional programming functional                                basically what that means is that my                                first encounter with most functional                                programming principles and concepts came                                actually in practice with production                                code so that is not going to be uncommon                                right that might be different than some                                of your guys's experience                                it's definitely terribly different than                                Paul's experience for example but I                                think as Scala                                and other functional languages gain more                                of a foothold that's gonna be more                                common being into math being into theory                                is awesome being an early adopter is                                awesome it doesn't describe the grand                                majority of programmers and so I think                                that if we want if we're pushing like by                                the adoption of these languages in the                                workplace so we want to get paid to do                                these cool things we gotta have to sort                                of make things viable for people who are                                starting out like I was not knowing what                                this was not necessarily at that point                                carrying what that was I wanting to be                                able to be functional in the sense of                                Whiting working code right away so this                                sucks goal is to ground some common                                functional data structures in equivalent                                of imperative code I'm using object                                examples that involve a lot of object                                modeling impure unclean but I want to                                show that it's not all or nothing that a                                lot of times we can get these really                                concrete and immediate benefits in                                maintainability and stability and safety                                from introducing functional concepts and                                without like having to throw out all of                                our current models and ways of thinking                                about them it's sort of like you know                                the conclusions which are that like                                 these are awesome structures this                                 language is safer than what we're                                 currently using are probably old hat to                                 you but by walking through that process                                 of how I got there I want to                                 sort of shed some light on that                                 conversion process to get people to be                                 cheerleaders for this kind of thing so                                 this idiomatic Scala this is a kind of                                 thing that you would see everywhere we                                 call this a for comprehension or ricotta                                 for you I call I usually call it a for                                 you I'll say it for you mostly in this                                 talk what's going on here                                 well nothing obviously it's fake cook                                 but the thing the benefit of it is that                                 it's fairly easy to guess like to read                                 it out loud almost even to see what's                                 happening right we get one value we pass                                 it to another function to get a third                                 value and if that third value is true                                 we're gonna return some final                                 transformation of it which is a good                                 start                                 it does invite a lot of questions what                                 are the types why is it wrapped in this                                 for yields what happens if it fails                                 which are all really good questions and                                 like the answer to almost every good                                 question the answer to all of those is                                 it depends the first question what are                                 the tights you can use a lot of types no                                 for you I'm gonna start with a list                                 hopefully we all know what that is                                 um so iteration over a list let's talk                                 about it this is okay this is not                                 anymore how you do this in Java so I                                 learned how to do it in Java not very                                 long ago it's straight out of C right                                 you got your your index and you                                 increment it and you iterate over coming                                 from a functional perspective there's a                                 couple changes right off the bat I want                                 to make to this code first one is that                                 its side-effects that immediately print                                 the line and then moves on and that's                                 sort of in the ether and there's nothing                                 I can do about it afterwards so I would                                 move that out right and so that's what                                 I've done here and I've used an                                 object-oriented approach to do it I                                 actually wanted to make um the second                                 inversion I wanted I wanted to make the                                 list of states immutable cuz immutable                                 data is a really good functional benefit                                 anyone done that recently in Java it's                                 really hard um so I didn't do it but I                                 would like to Yahoo it's like oh my god                                 I'm having flashbacks um the other thing                                 that jumps out at me here like if I'm if                                 I have my functional hammer and I'm like                                 looking for nails is that this is really                                 really boilerplate ease yeah I mean yeah                                 I did just kind of expand it but like                                 even the stuff that was in the last                                 slide there's a lot of code there that I                                 don't actually care about it makes me                                 want to abstract that repeated code away                                 and the repeated code here's the for                                 loop there's a couple reasons why one is                                 that                                 kind of lazy I don't like typing things                                 out over and over again and gets ugly                                 aesthetically it displeases me but the                                 more important reason that it's safer                                 does anyone ever fat-fingered a for-loop                                 raise your hand i actually didn't do it                                 here on purpose when i initially wrote                                 this code but i did i screwed this one                                 up I start at one we never get a                                 postcard from Arizona so then I would                                 rather write that code once and make                                 damn sure it's correct test it out and                                 then never ever write it again or think                                 about it again so what I want to do is                                 abstract out what changes about this                                 code what makes it specific to my                                 postcard sending method and everything                                 else file it away in an abstracted out                                 method the partier that changes is                                 really aligns                                                     through                                                                  right everything else is a really                                 bog-standard                                 iteration over a list so what we can do                                 is we can we can take out all of the                                 iteration seven but it in a function and                                 we can take out that                                                   put and what that does is it takes a                                 postcard or took the state and it                                 returns a postcard and so I want to take                                 that out and you say own input and                                 output that's a function nice thing                                 about Scala it's a first-class                                 functional language so we can write a                                 function that does the list iteration                                 and we can have it take a function that                                 writes a postcard and that's gonna be                                 safer than what we started with so let's                                 do it                                 split it out I switched it's called a                                 lack of return etc on line                                           that's actually not legal Scala it just                                 didn't fit so we've got a little we've                                 got a benefit of abstraction here we                                 could use this particular version of map                                 over and over again right we could be                                 like hello from Arizona I hate you and                                 be pretty sure that that would work and                                 you'd get that postcard assuming we                                 tested the first one of course let's get                                 more abstract right we use generics we                                 could map over any list of anything and                                 turn it into a list of something else                                 here it's generic um you know if we were                                 like writing a programming language or                                 something we could define this on                                 collection parent class II gives over                                 set or the values in a map or something                                 like that I want to point something out                                 here                                 I mean I think again Pollock about yep                                 terrible illumination about um                                 thank God scholar doesn't define back                                 like I don't have to know a Haskalah                                 defines map which is really nice right I                                 get the benefit benefit of someone much                                 smarter than me having to find it and I                                 don't need to know anything about what                                 goes under the hood and if someone comes                                 up with a way to do it that is faster or                                 you know less crazy they can they can do                                 that and I get the benefits of it                                 immediately without changing my own code                                 that's cool and I think this is a really                                 good like solid example of a benefit of                                 functional programming it's a really                                 good balance between configuring what we                                 care about which is this inner method                                 that you know whatever sends a postcard                                 the the actual code were writing and not                                 caring about the the mechanics of                                 everything else and abstracting that                                 away so I think that's pretty cool we                                 written our example here to use map I've                                 passed this in as an anonymous function                                 makes life a little easier safer that's                                 nice right                                 I think that's an improvement to get the                                 same effect here I would argue it's                                 safer I think it's easier to read map                                 map it gets very easy to read once                                 you've seen it a few times you know what                                 it does what is that good for you well                                 what happens yeah I don't know about                                 your family I'm not getting away with                                 sending one postcard first aid I've got                                 a list of people I have to send                                 postcards to you right so I've got like                                 this standard nested for loop this is                                 like class two in lists                                                to convert that one call into a map                                 right well let's do it again cuz we'd                                 save ourselves all that boilerplate okay                                 that's better I think                                 it's shorter it has one tiny little                                 problem it doesn't compile who knows I                                 know why it's a list of lists because we                                 go through and for each item in the list                                 we return a new list so you get a list                                 of list which isn't exactly what I want                                 thankfully there's another method to                                 find on collection called flatten                                 flatten takes a mess                                 thing like that and turns it into one                                 collection so there we go that's a                                 functional way of doing iteration over a                                 list let's compare that to what we                                 started with right I don't know                                 right okay like arguably it's safer but                                 it's not it saves some lines it's not                                 like super mind-blowing certainly not                                 something you would get out of bed to be                                 somewhere at                                                         about right so it also kind of like and                                 if we want to do another loop we have to                                 add another layer of maps with around                                 this whole thing and then caught we get                                 another call to flatten but wait this is                                 a functional language we have two                                 functions where we often pass the                                 results of one to the other we can                                 compose them into one function I love                                 this drawing for some reason I don't                                 know why it's like I want to get like a                                 tattoo of this function or I want it to                                 be a Jif I want to get a tattoo Jif when                                 we live in that like cyberpunk dystopia                                 world where you can do that that's my                                 first one that's function composition                                 it's just the two boxes and you make it                                 into another box flatten compose math is                                 a method called flat map and Clint kind                                 of alluded to this earlier flat map is                                 magic flat map is the best thing in the                                 world why okay the answer that's                                 relevant to this talk is that flat map                                 lets us use a for comprehension which is                                 why I'm here why I'm talking to you                                 right now so this when you're a flat map                                 you can use a for comprehension which                                 means this series of nested calls can be                                 rewritten as this I think this is like                                 infinitely more readable the amount of                                 crap that I need to ignore from this to                                 this just like is crazy why if there's                                 so much less cruft thing going on what's                                 really cool is that it's very easily                                 extensible so let's say both me and my                                 husband have to write separate postcards                                 to all of my relatives boom you add one                                 more line and you've got that you get                                 that for free that's kind of cool so if                                 you know god forbid you do need to send                                 more postcards what happens here is that                                 this last gets translated to map                                 everything else is a flat map above it                                 and that's how for Kanpur engine works                                 it's a syntactic sugar for a series of                                 calls from flat map to math what else                                 can you do in a for yields you can do an                                 assignment which is just a map sometimes                                 you actually do want a list of                                 you you might need that that particular                                 functionality in an assign assignment                                 there in line eight can do that I mean                                 you can do a filter filters a predicate                                 if it doesn't pass the predicate it                                 doesn't end up in the final list you                                 want to be careful with that yarr there                                 be there be danger there but you can do                                 that and sometimes you do want to do                                 that                                 that's pretty cool but like is a cool                                 syntax for lists really justification                                 for changing to a whole nother language                                 not so much right so like you know why                                 do I bother                                 well like spoiler alert it's not just                                 for lists you can use for you'll for a                                 lot of different types what can you use                                 it for I'm going to get to that but I                                 want to answer that question with                                 another question which is what happens                                 to this code if one of these lists is                                 empty we unger it back even on sugar and                                 if we untranslated back into our nested                                 yield situation right it's its                                 equivalent to this nested this nested                                 loop a for you what happens it doesn't                                 it doesn't get to them and the same                                 thing happens here if we don't have any                                 relatives it's gonna the executions                                 gonna stop after line                                                empty list because we have no postcards                                 to send and we don't evaluate                                           we don't evaluate                                                       interesting um we could probably use                                 this to our advantage right cuz                                 sometimes there's code that you don't                                 want to evaluate it's too expensive and                                 or may not be relevant here it's just                                 not relevant right so I've written up a                                 little like using this idea a little                                 dinner recipe plan here and what I've                                 done here is I've used lists to do this                                 right and I know that my for yield if                                 any of those are empty if I can't get                                 charcoal I don't have any meat I'm not                                 gonna get to the part of lighting the                                 barbecue because why it's more it's                                 readable it's more readable than a                                 nested list of                                 right let's be real though it kind of                                 sucks like first off like what if                                 there's more than one value returned                                 from get meat like what if I have hot                                 dogs and hamburgers what am I gonna do                                 um how do I know that I need to check if                                 it's empty I'm depending on people                                 reading the comments which is always the                                 worst strategy as I'm sure we all know                                 so what's the solution                                 a solution as it often is is a type                                 option is a collection that can have                                 zero or one values basically it's                                 basically these this list of charcoal                                 and either as charcoal or it has nothing                                 or it's an empty list works you know                                 works the way you'd expect it to and                                 we've that abstract in a way that we did                                 where we abstract it away the mechanics                                 the boilerplate of list iteration is it                                 being applied to a different task here                                 so no one does what I just described                                 like this is so patently a bad idea that                                 no one does this no one does a check of                                 a list as empty as a marker of why they                                 should go to the next task or not                                 however if you're a Java programmer                                 you've done a lot of this right it's the                                 worst it's the worst um                                 mp's suck they're the worst this is                                 cluttered this is fragile so we just                                 don't use no installer themselves are we                                 gonna go home                                 no um some gems though like the problem                                 is if you don't have no as a concept                                 sometimes things really are nothing                                 sometimes you don't have any charcoal                                 what do you do that um finding in a list                                 is a really common example of this right                                 like give me everyone who's named starts                                 with X in this room there might not be                                 anyone so I want to return nothing or an                                 operation could fail too and we don't                                 want to just leave that to the wind so                                 we wrap those in options that's how                                 things that could be nothing we wrap in                                 options how we avoid NP ease but the                                 problem is that this is not any better                                 just doing that check everywhere is not                                 any better the reason why options matter                                 at all why they're even remotely useful                                 to us is that map and flatmap and filter                                 are all defined on option and so they                                 work how you would expect them to work                                 on a list of one item you can map over                                 them you can create a new one and then                                 you can flat map over them in case                                 you're doing an operation that also                                 could return a list                                 and you can filter on them so just like                                 our list example this will just halt if                                 we can't get any of these steps done                                 we're gonna give up right and this whole                                 thing returns an option possible dinner                                 is an option of dinner and that's kind                                 of cool because then depending on what                                 your plans are for the evening you can                                 take that option and you can use it                                 another for you you could map on it                                 directly or what I've done here is you                                 can fetch the value and provide a                                 default if it's not there that's pretty                                 cool it's the composability that you get                                 with this that's really powerful                                 so four-year-olds for yield is awesome                                 what else can go in a four yield                                 absolutely anything you want the Scala                                 compiler when it's uh what it's D                                 sugaring a four yield or compiling                                 before you old I just like saying the                                 word syntactic sugar I'm sorry doesn't                                 it sound good like when you tell mom                                 forgive her friends that they're like uh                                 um so with it when the Scala compiler                                 encounters are for yield it checks the                                 type in there and it says does it have                                 map does it have flat map does it have                                 filter cool go crazy um so you can                                 implement those on any type or a wrapper                                 around any type and then you can go and                                 use it enough for you what I just said                                 is technically true and if you do it and                                 release it into the wild people will                                 yell at you on Twitter why will they do                                 that why will they do that that's a                                 complicated question but the root of it                                 so the class of things that can go in Oh                                 for yells it's called a monad ah the                                 reason why I don't want to actually use                                 that word has any raise your hand if                                 you've googled what is a monad okay yeah                                 it's like I mean it's a cottage industry                                 look it's like it's not a burrito it's                                 not a superhero it's not an elephant                                 burritos and elven supers are cool in                                 and of themselves because they are                                 delicious or they wear a sweet cape or                                 they have a crazy weird long nose monads                                 are cool because we can use them in for                                 yields I mean that's an                                 oversimplification but like as a                                 beginning to intermediate Scala                                 programmer that's the point of monads is                                 that you can use them in this really                                 cool data structure                                 what is a monad omona do something they                                 can go into for yield that's all it is                                 no okay a monad is something that                                 implements map and flatmap filter can be                                 derived from those two but Scala has you                                 do them separately there's a couple                                 other rules about monads that do matter                                 here hence the getting yelled at at                                 Twitter                                 well they don't map they matter on                                 Twitter okay they matter but um they're                                 not enforced by the compiler that's what                                 that's where that that gap between                                 compiled ability and math is where the                                 yelling on Twitter happens they're not                                 complicated actually it's associativity                                 and identity go pick up learn you a                                 Haskell for greater good and war                                 whatever and it's not if you should                                 follow them if you're writing your own                                 but we can totally use these guys really                                 extensively and really effectively                                 without getting into the guts of what is                                 a monad what is an endo functor blah                                 blah blah right                                 I mean list you we all used lists and if                                 I use lists for many years without ever                                 knowing it was a monad and I did not                                 suffer for it                                 um list an option though are two really                                 common ones in Scala and we have some                                 other ones that we use a lot and I'm                                 gonna go over a couple more of them to                                 point out some more things about em                                 words okay so with the option code we're                                 doing lookups I can return nothing right                                 sometimes that when you do when you keep                                 when you like a failure to return a                                 value is a real it's a real quits action                                 section my college in error exceptions                                 generally or how we handle this                                 imperative lis will throw an exception                                 if something isn't working they like                                 totally interrupt the control flow                                 something goes wrong which is I kind of                                 think they're rude I think they're kind                                 of rude because the code that calls                                 those methods if it doesn't explicitly                                 recover from them like the code that                                 calls it has to deal with it it's                                 passing the buck I don't like it so like                                 whatever it has to deal with the busted                                 man and that's that's kind of that's                                 kind of not cool so what if instead we                                 had a container that could either have a                                 value or an error message which is                                 basically like the result                                 anyway um this is try there's a                                 speaking of getting yelled out on                                 Twitter there's a couple of different                                 structures that do things very similar                                 to this I'm showing you try cuz it's                                 it's part of the standard library it's                                 gonna be the most common one validation                                 and then there's either which is the                                 more generic it's of one thing or it's                                 another thing but I can't tell my left                                 from my right so I usually use a try um                                 try like listen option has flat map and                                 map it also has filter you you just wrap                                 the throwing code in a try and if it                                 succeeds you'll get back a success and                                 if it fails you'll get back a failure                                 with the exception that's thrown because                                 that's often pretty useful um notice                                 that the type of a failure even though                                 you know it failed on the gas cap thing                                 the hole type of it's a failed engine                                 because that's all you care about at                                 that point if you're calling the method                                 oh crap something's not working in the                                 engine and then we can convert these and                                 as nested series of these calls into a                                 for yield um in recover as a way of kind                                 of Matt it's basically a map on the                                 failure side here so this is cool we get                                 that throws blah blah blah exception                                 effect from Java without having to like                                 interrupt our execution flow in the same                                 way without having basically crazy goat                                 cheese everywhere it's easy to add more                                 checks and like with option we can put                                 this into other for yields and we can                                 compose them one thing that's really                                 interesting here and the reason why I'm                                 showing you this is that wrapping it                                 itself does some work for you it catches                                 the exception we saw the work that that                                 flat map was doing on list and here                                 though there's work additionally being                                 done in the initial creation of it and                                 it turns out actually option does that                                 too if you wrap something that can be no                                 it'll do that work of checking it for                                 you that's pretty cool the active like                                 that creation of turning a value into a                                 monad if you're gonna get all mathy                                 about it is often called like point or                                 return                                 so yeah last what I'm going to show you                                 so all of these calls could potentially                                 block right especially I don't if he                                 ever talked on the phone with my mom but                                 that one is a potentially really                                 expensive operation and we can't let                                 that stop our roadtrip right I just need                                 grandma's address so we want a way to                                 deal with this and we want it to be just                                 as                                 clean as the other ways we had hence the                                 future                                 despite Evans warnings I'm going to try                                 to explain future to you um like try                                 here though the rapper is doing some                                 pretty substantial work it's it's                                 actually scheduling and/or spawning the                                 asynchronous work which is interesting                                 and here we're using the implicit                                 default and that uses threats but you                                 can also use actors for this which is                                 another wrinkle and that's part of why                                 the interaction between the two can be                                 confusing but again whatever that                                 boilerplate is we've pushed it off to                                 this magic import um so that's kind of                                 the work that the rapper does here it                                 schedules the work and spawns it what                                 does map and flatmap extract away here                                 where it was there anyone else he's a                                 JavaScript programmer in here besides                                 Clint and you know she's done JavaScript                                 or started with JavaScript how do you                                 deal how do you access results of                                 asynchronous calls callbacks what                                 happens when you have more than one                                 asynchronous call to do a nested                                 callbacks so um yeah no fun uh so what                                 we're abstract away with the for yield                                 and features is those nested callbacks                                 which i think is like I mean I got it                                 with flat map on a list but when I saw                                 it on futures the work you now didn't                                 have to do to do those nested callbacks                                 I was like totally sold notice here that                                 like write postcard is gonna depend on                                 visit state completing but some of these                                 don't depend on each other in this                                 example we visit Wyoming and we buy SIF                                 we kick those off in we in parallel we                                 start looking for a post office the                                 minute we're on the road right but we                                 don't get the address so we're finished                                 with the visit there's some design                                 issues here which is why no one got any                                 postcards on my road trip but the wait                                 what I'm showing here is that you can do                                 both parallel and sequential                                 asynchronous work using a for yield and                                 futures in a way that's pretty I would                                 say this edges on the magic in a bad way                                 I actually think some of this is and I                                 think I Evan can disagree but I think                                 that's what he was getting at there's                                 some there's some subtleties here about                                 what's being kicked off when it's a                                 little                                 intense it's a little hard to deal with                                 but that abstraction that powerful                                 abstraction is is something that we get                                 out of it for yield in the future it                                 sort of rolled for us all right already                                 and I think that's pretty cool                                 so to wind it up some other M words that                                 might be interesting to you um                                 iterative a really hot one right now                                 iterate T is a well energy is the play                                 version I think there's always six                                 versions of everything um of handling                                 streaming data which is a really                                 interesting concept                                 there's also yeah so iterate T is a way                                 of handling the stuff that's extracted                                 ways handling streaming data reader is                                 one way Hugh few objected to traits as                                 handling dependency injection reader is                                 a monad to handle that which is really                                 very very much hard-coded kind of stuff                                 but well I've had this argument before                                 so people want to have a dependency                                 injection in scala argument with me at                                 lunch but reader is one way to do it                                 writers a way to handle logging state is                                 kind of interesting it lets you compose                                 functions in love immutable state around                                 without actually having you know global                                 mutable state so that's kind of cool io                                 is one that I find conceptually                                 interesting it's straight out of high                                 school and in Scala it is kind of a                                 semantic marker to show that something                                 you're doing has side effects and you                                 control the time of execution with it                                 it's an interesting idea so that's some                                 stuff about the M word and for yield I'm                                 going to wrap up with some sort of                                 avenues for further exploration if this                                 is interesting to you some objections                                 you might have right off the bat for                                 four-year-olds I don't want to fail fast                                 often you don't especially if you're                                 doing anything like user input you often                                 want to do all your validation in                                 parallel and return the results of all                                 of them so they'd have to be like                                 invalid address invalid zip code invalid                                 phone number you can do that with things                                 wrapped in a M word there's a couple                                 ways to do it the one I'm a smaller with                                 is using applicative functors and                                 functors not a monad and we can get into                                 that as well we call this home alone at                                 my workplace                                 um can I use different kinds of monads                                 in a for yield could I have something                                 that returns a future mix or something                                 that returns an option makes it                                 something that returns a try no you can                                 um you can't but there are various ways                                 around that depending on the use case it                                 could be as simple depending on whether                                 this works for you as doing to sequence                                 a lot of monads have a way of turning                                 something into a list if that's all you                                 care about if you're getting more                                 complicated nested stuff you can get a                                 new monad transformers which are                                 actually pretty cool but it's more                                 complicated it's inside out a lot of                                 times you'll you'll have an option of a                                 list and you actually really just want                                 like a list of those options or vice                                 versa there are some I mean I'm calling                                 that monad operations and they're not                                 all on monads so I apologize there's                                 some operations that you can do on monad                                 type things that let you handle that                                 automatically which is pretty cool so                                 yeah thank you for you                                 and that's gonna loop while we do                                 questions does anyone have any questions                                 it's a Dodge Ram conversion van with                                 like tinted windows it is so creepy it's                                 really creepy van it's pretty badass                                 I need to replace the carpet the shot is                                 getting a little nasty but I mean                                 there's always there's always being                                 really explicit about the types                                 I often so I don't have a return type                                 here but for example I think for the                                 let's go back to the dinner one when I'm                                 writing for yields and I actually write                                 because we do asynchronous work with                                 involving both actors and asynchronous                                 HTTP calls I find myself with nested                                 minutes quite frequently I my operation                                 and writing a four you'll will often be                                 to write out the return type at the top                                 before I start and then do you let the                                 compiler do the work of telling me like                                 that's not a dinner anymore or whatever                                 so yeah yeah some type it type                                 inferences often can be that kind of                                 magic that is working against you                                 instead yes oh it's call reverb now                                 we're next one of our products yeah so                                 we maintain swagger and skal ultra so if                                 you've used either of those word huh yes                                 yes and no the site itself does not but                                 the backend does yeah we've got a lot of                                 data and we're doing doing some cool                                 stuff that I don't think I'm allowed to                                 tell you about but we can we can edit                                 the video right no that involves using                                 some of that word Nick is that I don't                                 know what we call it I think the largest                                 online dictionary it's all                                 user-generated data and we're now                                 looking at that data we have a lot of                                 data about how people use words and                                 we're using that too                                 now other things about what people want                                 to read so it's pretty cool stuff we've                                 got a bunch of NLP guys doing it and we                                 all we do all of that in Scala no I                                 don't even know what that is                                 so tell me more no we I've not used that                                 actually I'm gonna say I don't know much                                 about I don't know much about macros I                                 am yeah someone should give a talk about                                 that you know we all ready for lunch                                 yeah                                 you
YouTube URL: https://www.youtube.com/watch?v=MHw-dDxC8Z4


