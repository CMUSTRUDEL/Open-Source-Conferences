Title: A Birds eye view of the Scala ecosystem by Jean Helou
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6904-a-birds-eye-view-of-the-scala-ecosystem.html
Captions: 
	00:00:04,620 --> 00:00:10,559
hello everyone and welcome to Scala days

00:00:07,229 --> 00:00:12,150
so my name is John and yes I will try to

00:00:10,559 --> 00:00:14,459
give you a bird's eye view of this

00:00:12,150 --> 00:00:17,490
calico system I have a few disclaimers

00:00:14,459 --> 00:00:19,500
to make this will not be a comprehensive

00:00:17,490 --> 00:00:22,619
overview of the echo system that would

00:00:19,500 --> 00:00:25,589
take more 45 days than it would take 45

00:00:22,619 --> 00:00:27,720
minutes and as much as I like to think

00:00:25,589 --> 00:00:31,499
that I am an objective person it's

00:00:27,720 --> 00:00:35,160
probably very biased it will be biased

00:00:31,499 --> 00:00:37,170
because of my origins I come from an

00:00:35,160 --> 00:00:39,750
object-oriented programming background

00:00:37,170 --> 00:00:42,120
with a lot of Java so I will make a lot

00:00:39,750 --> 00:00:47,700
of Java references sorry if you're not

00:00:42,120 --> 00:00:49,650
from that background and lots of the

00:00:47,700 --> 00:00:51,990
insights that I give come from my

00:00:49,650 --> 00:00:55,190
personal experience of interacting with

00:00:51,990 --> 00:01:00,060
people and why I go to conferences and I

00:00:55,190 --> 00:01:03,570
go broad in Germany in I'm stood in the

00:01:00,060 --> 00:01:06,450
Netherlands in England I mostly evolve

00:01:03,570 --> 00:01:09,420
in France so some of my insights might

00:01:06,450 --> 00:01:12,329
be biased by my view of France or by the

00:01:09,420 --> 00:01:14,249
people I've met in France so maybe some

00:01:12,329 --> 00:01:16,049
of the things will be will be slightly

00:01:14,249 --> 00:01:18,899
different for you in your for your

00:01:16,049 --> 00:01:20,729
experience but I give you this in from

00:01:18,899 --> 00:01:25,469
this information so that you can correct

00:01:20,729 --> 00:01:27,920
for your own experience now I told you

00:01:25,469 --> 00:01:32,520
where I come from I come from Java I

00:01:27,920 --> 00:01:34,619
learned I learned Scala in 2011 I got

00:01:32,520 --> 00:01:37,649
involved in the Paris community then

00:01:34,619 --> 00:01:40,740
moved on to lyon became certified

00:01:37,649 --> 00:01:42,719
scholar trainer became a freelance color

00:01:40,740 --> 00:01:44,520
developer so I've been in this color

00:01:42,719 --> 00:01:46,740
world for a while I've walked the

00:01:44,520 --> 00:01:50,719
landscape my goal in this talk is to

00:01:46,740 --> 00:01:53,490
give you landmarks things that you can

00:01:50,719 --> 00:01:57,179
think that you can go to if you need

00:01:53,490 --> 00:01:59,369
more information more details and maybe

00:01:57,179 --> 00:02:01,200
a few pointers of what works and what

00:01:59,369 --> 00:02:04,510
doesn't

00:02:01,200 --> 00:02:06,250
now in my experience these are

00:02:04,510 --> 00:02:08,860
completely made of statistics right

00:02:06,250 --> 00:02:11,410
these are lies but in my experience the

00:02:08,860 --> 00:02:13,959
people come mostly from Java

00:02:11,410 --> 00:02:16,870
the people I've interacted with come

00:02:13,959 --> 00:02:19,480
mostly from Java this is changing at the

00:02:16,870 --> 00:02:22,410
moment and more and more people come

00:02:19,480 --> 00:02:25,980
from Python or more dynamic languages a

00:02:22,410 --> 00:02:28,900
few come from dotnet and from a scale a

00:02:25,980 --> 00:02:31,480
scale are people want to do functional

00:02:28,900 --> 00:02:33,190
programming but come to it in production

00:02:31,480 --> 00:02:36,940
at least in France because there are new

00:02:33,190 --> 00:02:40,540
production or very few fraction projects

00:02:36,940 --> 00:02:41,709
using us in France so they come to Scala

00:02:40,540 --> 00:02:43,989
because that's where they can do

00:02:41,709 --> 00:02:46,900
functional programming and then I've met

00:02:43,989 --> 00:02:49,230
during trainings people with pure SQL

00:02:46,900 --> 00:02:51,550
backgrounds or even Excel backgrounds

00:02:49,230 --> 00:02:54,790
doing Scala trainings that was

00:02:51,550 --> 00:02:59,350
interesting and why do people learn

00:02:54,790 --> 00:03:01,630
Scala for a long time it was Play

00:02:59,350 --> 00:03:05,140
Framework and that was about it or

00:03:01,630 --> 00:03:05,829
functional programming and for the last

00:03:05,140 --> 00:03:07,660
few years

00:03:05,829 --> 00:03:10,810
SPARC has been taking more and more

00:03:07,660 --> 00:03:13,120
space actually I think the slide are not

00:03:10,810 --> 00:03:16,239
actually entirely accurate and SPARC is

00:03:13,120 --> 00:03:19,320
more than play framework today then of

00:03:16,239 --> 00:03:22,690
course you've got some use cases for

00:03:19,320 --> 00:03:25,090
functional programming and akka and a

00:03:22,690 --> 00:03:29,920
few others people who just randomly

00:03:25,090 --> 00:03:32,200
arrived in scala world i said that these

00:03:29,920 --> 00:03:36,060
are entirely made up and i hope you will

00:03:32,200 --> 00:03:38,410
help the Scala center make actual

00:03:36,060 --> 00:03:41,019
statistics that are much better and more

00:03:38,410 --> 00:03:42,790
precise by answering the survey that

00:03:41,019 --> 00:03:46,989
they just published on the scale along

00:03:42,790 --> 00:03:51,040
that org website now what does the Scala

00:03:46,989 --> 00:03:53,079
landscape look like so there is a start

00:03:51,040 --> 00:03:56,920
everyone stop there it's in Lausanne

00:03:53,079 --> 00:03:59,709
that's where Scala was created we'll

00:03:56,920 --> 00:04:04,269
move through to the North first to the

00:03:59,709 --> 00:04:06,280
library general then Eve cross through

00:04:04,269 --> 00:04:09,670
the fog of tooling to reach the

00:04:06,280 --> 00:04:12,340
community heaven and then we'll talk a

00:04:09,670 --> 00:04:14,560
bit about the incoming data storm

00:04:12,340 --> 00:04:21,609
don't worry it's not as scary as it

00:04:14,560 --> 00:04:25,389
sounds so the library jingle Scala works

00:04:21,609 --> 00:04:28,150
on the JVM which means it's it evolves

00:04:25,389 --> 00:04:31,240
in the same ecosystem as Java and Java

00:04:28,150 --> 00:04:34,750
is very huge ecosystem of libraries

00:04:31,240 --> 00:04:39,870
already adding Scala only adds more on

00:04:34,750 --> 00:04:43,740
that and once you have crossed the

00:04:39,870 --> 00:04:47,410
barrier of using a different language

00:04:43,740 --> 00:04:49,840
library then why stop there why only

00:04:47,410 --> 00:04:52,960
used to why not use closure libraries

00:04:49,840 --> 00:04:54,700
why not use JRuby libraries why not use

00:04:52,960 --> 00:04:58,450
any library that works on the JVM

00:04:54,700 --> 00:05:02,229
copying sailings whatever so that gives

00:04:58,450 --> 00:05:04,600
you a lot of choice now I'm not saying

00:05:02,229 --> 00:05:07,060
you will use a lot or you will encounter

00:05:04,600 --> 00:05:09,490
a lot of use cases where you need to use

00:05:07,060 --> 00:05:11,680
libraries that come from more exotic

00:05:09,490 --> 00:05:13,570
languages but of course there is a

00:05:11,680 --> 00:05:20,380
strong case to be made for using Scala

00:05:13,570 --> 00:05:23,200
libraries and Java libraries which Java

00:05:20,380 --> 00:05:27,100
libraries have I encountered which one

00:05:23,200 --> 00:05:30,160
do I recommend that you use I will go

00:05:27,100 --> 00:05:34,479
for infrastructure what do I mean with

00:05:30,160 --> 00:05:36,880
that like logging the logging is a

00:05:34,479 --> 00:05:39,370
solved problem in Java it's it's taken a

00:05:36,880 --> 00:05:42,639
long time but it's a solved problem yes

00:05:39,370 --> 00:05:44,289
you've got the SL f4j api and then you

00:05:42,639 --> 00:05:47,050
can choose and choose switch

00:05:44,289 --> 00:05:50,770
implementations and it just works there

00:05:47,050 --> 00:05:52,600
are there is at least one pure Scala

00:05:50,770 --> 00:05:55,810
library that implements this left for J

00:05:52,600 --> 00:05:58,150
and I don't think it brings much to the

00:05:55,810 --> 00:06:03,000
table compared to the others so I I

00:05:58,150 --> 00:06:06,700
wouldn't go there then there are some

00:06:03,000 --> 00:06:10,030
libraries that are very well designed if

00:06:06,700 --> 00:06:13,389
you well if you look at joda-time

00:06:10,030 --> 00:06:15,930
or now it's Java time there is no

00:06:13,389 --> 00:06:21,310
compelling reason to rewrite yet another

00:06:15,930 --> 00:06:22,940
library for time in Scala there are some

00:06:21,310 --> 00:06:25,070
very edge case

00:06:22,940 --> 00:06:26,600
where you might want to have a custom

00:06:25,070 --> 00:06:29,630
library and actually there are a few

00:06:26,600 --> 00:06:32,600
that exist but for most software

00:06:29,630 --> 00:06:35,690
development these joda-time is just

00:06:32,600 --> 00:06:38,060
enough so there is no reason to to go

00:06:35,690 --> 00:06:39,950
and rewrite a different one or add a

00:06:38,060 --> 00:06:42,380
wrapper around the different Java

00:06:39,950 --> 00:06:46,820
library for it and that's the case for

00:06:42,380 --> 00:06:49,400
quite a few a few libraries you will

00:06:46,820 --> 00:06:51,350
find that for instance many of the

00:06:49,400 --> 00:06:55,460
Chasen libraries in scala use actually

00:06:51,350 --> 00:06:56,990
jackson behind the scene so for the ones

00:06:55,460 --> 00:07:00,050
that work and that have been

00:06:56,990 --> 00:07:03,050
standardized and that have a production

00:07:00,050 --> 00:07:07,010
experience why not just use the Java

00:07:03,050 --> 00:07:09,350
library and you also have a few

00:07:07,010 --> 00:07:10,940
libraries that solve our problems and

00:07:09,350 --> 00:07:13,610
these are difficult to replicate

00:07:10,940 --> 00:07:17,090
therefore difficult it's difficult to

00:07:13,610 --> 00:07:20,120
write a Scala library for it one one

00:07:17,090 --> 00:07:23,840
example I have is Medi for a synchronous

00:07:20,120 --> 00:07:26,660
iOS it's been partially replicated for

00:07:23,840 --> 00:07:29,510
HTTP but many does much more than just

00:07:26,660 --> 00:07:34,160
HTTP and therefore it's not entirely

00:07:29,510 --> 00:07:38,840
replicated today also you have all these

00:07:34,160 --> 00:07:41,480
drivers which are pretty low low-level

00:07:38,840 --> 00:07:43,510
protocol implementations you will have

00:07:41,480 --> 00:07:46,880
the JDBC drivers you will have a

00:07:43,510 --> 00:07:49,490
specific database driver drivers most of

00:07:46,880 --> 00:07:51,740
these will not be rewritten in pure

00:07:49,490 --> 00:07:54,500
Scala from from scratch there will be

00:07:51,740 --> 00:07:57,020
they might be wrapped though using

00:07:54,500 --> 00:07:59,060
wrappers around the library to make it

00:07:57,020 --> 00:08:01,190
more idiomatic to Scala but it will

00:07:59,060 --> 00:08:04,040
actually use the Java library if you

00:08:01,190 --> 00:08:06,830
look at it at this color project whether

00:08:04,040 --> 00:08:09,410
it's an a-cup well maybe not okay is a

00:08:06,830 --> 00:08:11,720
good example that if you look at Play

00:08:09,410 --> 00:08:14,090
Framework if you look at SPARC both use

00:08:11,720 --> 00:08:15,919
a lot of Java libraries so don't donate

00:08:14,090 --> 00:08:20,240
to use Java libraries in your own

00:08:15,919 --> 00:08:23,720
projects it's perfectly fine when should

00:08:20,240 --> 00:08:27,050
you look at Scala libraries you will

00:08:23,720 --> 00:08:29,290
need to look at color libraries when you

00:08:27,050 --> 00:08:32,030
feel the friction between the languages

00:08:29,290 --> 00:08:35,599
what do I mean by that

00:08:32,030 --> 00:08:38,750
of course Scallon and java evolve on the

00:08:35,599 --> 00:08:40,419
same platform the JVM but they have a

00:08:38,750 --> 00:08:45,430
different feel to it

00:08:40,419 --> 00:08:48,740
Java as bias for mutability it handles

00:08:45,430 --> 00:08:51,400
most errors or absence of values through

00:08:48,740 --> 00:08:54,680
nil it's got its own very limited

00:08:51,400 --> 00:08:56,390
collection libraries when you interact a

00:08:54,680 --> 00:09:00,020
lot with this guy with the Java library

00:08:56,390 --> 00:09:02,290
you will have to interact with this from

00:09:00,020 --> 00:09:05,780
a skala code and Scala code will favor

00:09:02,290 --> 00:09:09,740
immutability its own immutable

00:09:05,780 --> 00:09:14,090
collection library so it can be painful

00:09:09,740 --> 00:09:16,970
to make lots of use of Java library

00:09:14,090 --> 00:09:19,550
directly from Scala that's where it's

00:09:16,970 --> 00:09:22,970
interesting to use a wrapper to isolate

00:09:19,550 --> 00:09:24,680
the Java library and let your

00:09:22,970 --> 00:09:28,130
interaction in your business code in

00:09:24,680 --> 00:09:30,260
Scala interact with a skullet view of

00:09:28,130 --> 00:09:32,210
that library but it's much less

00:09:30,260 --> 00:09:36,740
expensive to write a wrapper tend to

00:09:32,210 --> 00:09:40,820
rewrite the entire library then there is

00:09:36,740 --> 00:09:44,000
the parodying friction it's one thing to

00:09:40,820 --> 00:09:48,140
have issues at the language level having

00:09:44,000 --> 00:09:51,710
impedance differences between the types

00:09:48,140 --> 00:09:55,460
that are used or the nil ability and

00:09:51,710 --> 00:09:56,960
stuff but then there are it's also there

00:09:55,460 --> 00:09:58,220
is also a difference between functional

00:09:56,960 --> 00:09:59,510
programming and object-oriented

00:09:58,220 --> 00:10:02,660
programming which is much more

00:09:59,510 --> 00:10:05,800
fundamental and there you might actually

00:10:02,660 --> 00:10:09,320
need to rewrite the library entirely

00:10:05,800 --> 00:10:12,410
because if you look at for instance a

00:10:09,320 --> 00:10:14,990
very common library in in the Java

00:10:12,410 --> 00:10:17,390
ecosystem Eibon 8i banette is based on

00:10:14,990 --> 00:10:22,270
the premises of a session which is

00:10:17,390 --> 00:10:27,950
basically a global mutable entity and

00:10:22,270 --> 00:10:30,830
this is very foreign for a scholar

00:10:27,950 --> 00:10:35,930
language you would not want to do that

00:10:30,830 --> 00:10:38,260
in Scala so if you try to use I Burnett

00:10:35,930 --> 00:10:41,360
in a functional programming oriented

00:10:38,260 --> 00:10:43,310
scholar program you will you will have a

00:10:41,360 --> 00:10:44,780
lot of issues because you will share

00:10:43,310 --> 00:10:45,840
mutable state through things that are

00:10:44,780 --> 00:10:49,130
not supposed to share

00:10:45,840 --> 00:10:53,430
double state that's where you will want

00:10:49,130 --> 00:10:58,590
to rewrite a library or use a pure Scala

00:10:53,430 --> 00:11:01,320
library to replace I've net or whatever

00:10:58,590 --> 00:11:05,190
the equivalent is that solves your

00:11:01,320 --> 00:11:09,090
problem of course and then Scala by

00:11:05,190 --> 00:11:10,020
opening by the fusion of functional

00:11:09,090 --> 00:11:12,630
programming and object-oriented

00:11:10,020 --> 00:11:14,760
programming and by the improvements that

00:11:12,630 --> 00:11:18,180
have been brought to the type system as

00:11:14,760 --> 00:11:20,460
open new horizons things that you cannot

00:11:18,180 --> 00:11:22,290
or that are very very difficult to do in

00:11:20,460 --> 00:11:28,110
Java and therefore that have not been

00:11:22,290 --> 00:11:29,520
done in Java there that's of course a

00:11:28,110 --> 00:11:32,610
place where you will need Scala

00:11:29,520 --> 00:11:35,300
libraries I the one I have in mind at

00:11:32,610 --> 00:11:39,570
the moment is shapeless to manipulate

00:11:35,300 --> 00:11:41,400
product types at compile time

00:11:39,570 --> 00:11:44,910
that's not something you would do in

00:11:41,400 --> 00:11:47,430
Java yes you can do cogeneration but

00:11:44,910 --> 00:11:49,920
it's not actually the same as what you

00:11:47,430 --> 00:11:51,990
get with shapeless I'm not saying

00:11:49,920 --> 00:11:55,620
everyone is using shapeless but that's

00:11:51,990 --> 00:11:57,840
the idea so and a lot of exploration of

00:11:55,620 --> 00:12:00,960
the functional programming occurs only

00:11:57,840 --> 00:12:02,490
on the Scala space and not all in the

00:12:00,960 --> 00:12:04,650
Java space I know that there are Java

00:12:02,490 --> 00:12:06,270
functional programming libraries but

00:12:04,650 --> 00:12:09,870
they are very limited by what the

00:12:06,270 --> 00:12:15,080
language supports and the ones in Scala

00:12:09,870 --> 00:12:19,760
are much larger and go in a net further

00:12:15,080 --> 00:12:22,590
way to the functional programming and

00:12:19,760 --> 00:12:26,790
then I said you can use more libraries

00:12:22,590 --> 00:12:29,130
especially for specific use cases if you

00:12:26,790 --> 00:12:30,870
are trying to write I don't know it's

00:12:29,130 --> 00:12:33,270
called a program that has to interact

00:12:30,870 --> 00:12:36,060
with Westfair maybe you want to have the

00:12:33,270 --> 00:12:38,880
Jatin Jatin libraries to be able to

00:12:36,060 --> 00:12:42,300
speak the same language as the whoops

00:12:38,880 --> 00:12:45,840
for administration language if you are I

00:12:42,300 --> 00:12:48,300
don't know writing plug-ins for locks -

00:12:45,840 --> 00:12:51,810
then maybe you will need JRuby or

00:12:48,300 --> 00:12:54,620
whatever libraries so the world is not

00:12:51,810 --> 00:12:57,770
limited to only Scala and Java

00:12:54,620 --> 00:13:00,260
and then there is the frameworks in in

00:12:57,770 --> 00:13:03,440
the Java world the the the library

00:13:00,260 --> 00:13:03,950
jungle has been as some very big beaten

00:13:03,440 --> 00:13:06,500
path

00:13:03,950 --> 00:13:08,270
you know like avenues that everyone has

00:13:06,500 --> 00:13:10,670
followed at least once and not very

00:13:08,270 --> 00:13:13,820
large and very easy to discover the

00:13:10,670 --> 00:13:15,830
Scala world is not as major as the Java

00:13:13,820 --> 00:13:19,160
world of course it's much younger and

00:13:15,830 --> 00:13:23,840
therefore the trails are not as easy to

00:13:19,160 --> 00:13:27,710
find or to discover frameworks usually

00:13:23,840 --> 00:13:30,560
open up trails I think in Java I'm

00:13:27,710 --> 00:13:33,200
thinking of this the spring trail once

00:13:30,560 --> 00:13:35,240
you start with praying then you can you

00:13:33,200 --> 00:13:37,820
fall into the spring galaxy which is

00:13:35,240 --> 00:13:39,920
like its own world you can live in there

00:13:37,820 --> 00:13:43,190
without ever touching anything outside

00:13:39,920 --> 00:13:46,210
of the spring world and not discovering

00:13:43,190 --> 00:13:51,290
the rest of the Java ecosystem or almost

00:13:46,210 --> 00:13:53,900
in Scala there are some frameworks akka

00:13:51,290 --> 00:13:58,400
is one play framework of course SPARC as

00:13:53,900 --> 00:14:02,180
its own set but there are their usage is

00:13:58,400 --> 00:14:06,110
more diffuse so people are not as

00:14:02,180 --> 00:14:08,330
focused on it and you have to you can

00:14:06,110 --> 00:14:12,590
start on trail and then for get on

00:14:08,330 --> 00:14:17,360
another one it's not as easy to discover

00:14:12,590 --> 00:14:19,520
the entry points this all leads to

00:14:17,360 --> 00:14:21,650
choice of a load I mean when you come

00:14:19,520 --> 00:14:24,200
into Java basically you do spring boot

00:14:21,650 --> 00:14:26,140
or spring Roo or whatever it's pretty

00:14:24,200 --> 00:14:29,540
something spring you start with spring

00:14:26,140 --> 00:14:33,740
when you come into Scala and well what

00:14:29,540 --> 00:14:37,040
will I use for HTTP huh okay there are

00:14:33,740 --> 00:14:41,380
like 10 frameworks doing HTTP web page

00:14:37,040 --> 00:14:47,930
rendering HTTP services it's not easy

00:14:41,380 --> 00:14:50,030
so my firm my rule my rules are the way

00:14:47,930 --> 00:14:51,740
I think about it is I try to investigate

00:14:50,030 --> 00:14:55,010
the Scalla options first to solve

00:14:51,740 --> 00:14:58,340
whatever problem is why because it

00:14:55,010 --> 00:15:00,560
avoids the parroting frictions and the

00:14:58,340 --> 00:15:02,510
language frictions so this reduces the

00:15:00,560 --> 00:15:05,510
scope of issues that I will have to deal

00:15:02,510 --> 00:15:08,150
with hopefully someone will have dealt

00:15:05,510 --> 00:15:11,480
with them before and for me

00:15:08,150 --> 00:15:13,550
if I find a rapper that's fine if I

00:15:11,480 --> 00:15:16,460
don't find anything that satisfies me in

00:15:13,550 --> 00:15:19,210
the scallop world then I move on to use

00:15:16,460 --> 00:15:22,220
whatever I know from the Java world and

00:15:19,210 --> 00:15:24,140
if I don't find anything in there either

00:15:22,220 --> 00:15:29,030
that's satisfying or if the friction is

00:15:24,140 --> 00:15:32,270
too large I will consider writing my own

00:15:29,030 --> 00:15:34,490
or going to language other languages

00:15:32,270 --> 00:15:40,520
that's that the foggiest place of all

00:15:34,490 --> 00:15:41,770
all bets are off now for investigating

00:15:40,520 --> 00:15:45,860
Scala

00:15:41,770 --> 00:15:48,800
Scala libraries - just to find them the

00:15:45,860 --> 00:15:51,770
first place I go to is index Calallen

00:15:48,800 --> 00:15:54,590
org it's very recent it's I don't know

00:15:51,770 --> 00:15:57,800
if maybe two three years old it

00:15:54,590 --> 00:16:00,230
references almost six thousand projects

00:15:57,800 --> 00:16:03,050
and there is a basically a search engine

00:16:00,230 --> 00:16:06,650
just for it so you type in whatever you

00:16:03,050 --> 00:16:12,440
want to solve like I don't know SQL or

00:16:06,650 --> 00:16:16,730
JSON JSON or maybe logging and you will

00:16:12,440 --> 00:16:19,940
get a list off of of libraries that you

00:16:16,730 --> 00:16:22,220
can investigate the thing is it works

00:16:19,940 --> 00:16:25,490
well for some of the keywords and it

00:16:22,220 --> 00:16:27,110
works really badly for others it for

00:16:25,490 --> 00:16:32,560
instance for Jason it works pretty well

00:16:27,110 --> 00:16:36,290
but for SQL it's catastrophe because

00:16:32,560 --> 00:16:39,440
many projects declare SQL in their

00:16:36,290 --> 00:16:43,940
keywords but it's not only for accessing

00:16:39,440 --> 00:16:47,300
SQL database it can also be for using

00:16:43,940 --> 00:16:52,180
SQL themselves so you will get a lot of

00:16:47,300 --> 00:16:55,760
noise if Scalla index doesn't give me

00:16:52,180 --> 00:16:59,840
satisfying answers I move on to awesome

00:16:55,760 --> 00:17:03,050
scholar sometimes I even stop there so

00:16:59,840 --> 00:17:05,839
that's a list a curated list of scholar

00:17:03,050 --> 00:17:09,020
projects mostly Scala open source I

00:17:05,839 --> 00:17:12,290
think only skeletons was projects that

00:17:09,020 --> 00:17:13,940
Sangeeta I had to cut it there it

00:17:12,290 --> 00:17:16,400
actually it doesn't fit on the slide

00:17:13,940 --> 00:17:19,449
owl it's very long it covers basically

00:17:16,400 --> 00:17:23,409
everything that you want that you

00:17:19,449 --> 00:17:26,019
want to do and of course here there's

00:17:23,409 --> 00:17:28,539
only the the India at the table of

00:17:26,019 --> 00:17:30,909
content and the list is very long it's

00:17:28,539 --> 00:17:31,809
got a lot of projects so it's very good

00:17:30,909 --> 00:17:34,539
place to start

00:17:31,809 --> 00:17:38,350
also if you want to find something that

00:17:34,539 --> 00:17:41,080
solves your problem for you does it feel

00:17:38,350 --> 00:17:44,710
do you feel that I started working as an

00:17:41,080 --> 00:17:46,779
integrator so I always look for someone

00:17:44,710 --> 00:17:49,720
having solved the issue for me first and

00:17:46,779 --> 00:17:56,559
then if really there is no solution if I

00:17:49,720 --> 00:17:58,809
go and write my own the thing is the

00:17:56,559 --> 00:18:00,940
power of Scala is its own worst enemy

00:17:58,809 --> 00:18:04,210
actually this quote is completely made

00:18:00,940 --> 00:18:06,250
up the real quote is the power of Lisp

00:18:04,210 --> 00:18:09,850
is its own worst enemy but I feel that

00:18:06,250 --> 00:18:14,139
it works pretty well for Scala to the

00:18:09,850 --> 00:18:17,200
original essay by Rudolph Weinstock says

00:18:14,139 --> 00:18:19,990
that unless solving problems is so easy

00:18:17,200 --> 00:18:23,350
that everyone does it on its own so you

00:18:19,990 --> 00:18:27,159
will never find a library for I don't

00:18:23,350 --> 00:18:30,970
know or solving Oren or accessing

00:18:27,159 --> 00:18:32,799
database or rendering web pages or

00:18:30,970 --> 00:18:34,659
whatever because it's so easy to write

00:18:32,799 --> 00:18:36,880
your own it only takes I don't know

00:18:34,659 --> 00:18:38,559
maybe a hundred lines of codes that

00:18:36,880 --> 00:18:41,110
everyone solves it on their own with

00:18:38,559 --> 00:18:45,669
their own items and there is no

00:18:41,110 --> 00:18:50,350
standardization it kind of works the

00:18:45,669 --> 00:18:52,419
same in Scala for Vice reasons for the

00:18:50,350 --> 00:18:54,220
I've got a couple examples behind

00:18:52,419 --> 00:19:00,190
especially the Jason

00:18:54,220 --> 00:19:03,940
front Jason is a very easy salvation

00:19:00,190 --> 00:19:06,250
protocol to write a library for so

00:19:03,940 --> 00:19:10,389
because of the the way scholarworks

00:19:06,250 --> 00:19:13,029
writing a json ast is very very easy use

00:19:10,389 --> 00:19:15,399
filtrate and all kinds of object and

00:19:13,029 --> 00:19:17,230
then you're done and then writing the

00:19:15,399 --> 00:19:19,779
sterilization parts is fairly easy the

00:19:17,230 --> 00:19:21,340
part in the person is easy too because

00:19:19,779 --> 00:19:23,289
of the tools that are provided directly

00:19:21,340 --> 00:19:26,230
into the standard library you can

00:19:23,289 --> 00:19:29,980
basically write your own parsing without

00:19:26,230 --> 00:19:32,080
any external dependencies and therefore

00:19:29,980 --> 00:19:33,760
since you can it's been done right

00:19:32,080 --> 00:19:36,190
and it's been done multiple times

00:19:33,760 --> 00:19:38,500
because the initial libraries were

00:19:36,190 --> 00:19:40,299
fairly difficult to discover when the

00:19:38,500 --> 00:19:41,830
index didn't exist and before the

00:19:40,299 --> 00:19:45,220
awesome lists for Scala

00:19:41,830 --> 00:19:48,549
it was not necessarily very simple to

00:19:45,220 --> 00:19:51,010
discover the libraries and once you

00:19:48,549 --> 00:19:52,990
start having multiple libraries it it's

00:19:51,010 --> 00:19:56,980
become it stopped working like for

00:19:52,990 --> 00:20:00,210
standards you probably noticed a xkcd

00:19:56,980 --> 00:20:02,799
comic it it states that if you've got X

00:20:00,210 --> 00:20:05,440
standards then of course someone will

00:20:02,799 --> 00:20:07,600
come who says it's stupid why do we have

00:20:05,440 --> 00:20:09,309
so many standards I know I will write

00:20:07,600 --> 00:20:11,710
the new standards that will cover all

00:20:09,309 --> 00:20:13,779
the other use cases and then you end up

00:20:11,710 --> 00:20:15,909
with X plus 1 standards and that's

00:20:13,779 --> 00:20:18,549
exactly what happened in this color

00:20:15,909 --> 00:20:20,950
world for Jason you started with like

00:20:18,549 --> 00:20:27,700
maybe five or six and today you've got

00:20:20,950 --> 00:20:30,190
69 so among this there is like dozen

00:20:27,700 --> 00:20:32,880
that does the basic parsing and

00:20:30,190 --> 00:20:36,340
rendering of Jason and then you've got

00:20:32,880 --> 00:20:42,880
interoperability libraries that allow

00:20:36,340 --> 00:20:45,490
different different trees from one

00:20:42,880 --> 00:20:48,309
library to interoperate with the

00:20:45,490 --> 00:20:52,419
rendering engine of a different one and

00:20:48,309 --> 00:20:54,279
so on and that's where you end up and

00:20:52,419 --> 00:20:56,769
all the SS because it's so easy to do

00:20:54,279 --> 00:21:00,630
engine in Scala then of course you've

00:20:56,769 --> 00:21:05,289
got a custom integration for play for a

00:21:00,630 --> 00:21:09,549
HTTP for lyft for all the HTTP

00:21:05,289 --> 00:21:10,659
frameworks out there and almost all of

00:21:09,549 --> 00:21:13,929
them are good actually

00:21:10,659 --> 00:21:17,500
the thing is when you look into it more

00:21:13,929 --> 00:21:21,159
deeper and it's been done by the

00:21:17,500 --> 00:21:23,500
community there has been a request for

00:21:21,159 --> 00:21:26,559
change on the Scala library to integrate

00:21:23,500 --> 00:21:28,840
a standardized JSON library directly

00:21:26,559 --> 00:21:33,669
into the distant library for Scala and

00:21:28,840 --> 00:21:35,889
the discussion went pretty far and in

00:21:33,669 --> 00:21:37,630
you really it made me realize that there

00:21:35,889 --> 00:21:40,720
are actually many design choices that

00:21:37,630 --> 00:21:43,779
are valid and that explain why there are

00:21:40,720 --> 00:21:46,059
a dozen different base library in

00:21:43,779 --> 00:21:47,979
Calla there are different ways to encode

00:21:46,059 --> 00:21:49,509
numbers some of which are more

00:21:47,979 --> 00:21:54,999
performant some of which are more

00:21:49,509 --> 00:21:59,590
correct there is no actual real optimal

00:21:54,999 --> 00:22:02,759
way to encode Jason so differently than

00:21:59,590 --> 00:22:05,289
you need you might need one or the other

00:22:02,759 --> 00:22:08,979
which is why there was this displaces

00:22:05,289 --> 00:22:11,139
but then once you start using one you

00:22:08,979 --> 00:22:13,509
start pulling dependencies that depends

00:22:11,139 --> 00:22:15,460
ativy depend on the other then you need

00:22:13,509 --> 00:22:18,339
to interact and you need the library to

00:22:15,460 --> 00:22:20,349
make the to interact and then you pull

00:22:18,339 --> 00:22:22,899
in a third library that of course uses a

00:22:20,349 --> 00:22:24,580
different representation and then you

00:22:22,899 --> 00:22:26,379
need second library and then you need a

00:22:24,580 --> 00:22:28,059
third one that makes both interactors

00:22:26,379 --> 00:22:31,239
interact themselves and that's what you

00:22:28,059 --> 00:22:35,529
end up with so this is not yet a solve

00:22:31,239 --> 00:22:37,859
problem and the funny thing is many of

00:22:35,529 --> 00:22:42,070
them actually use a Jackson and the line

00:22:37,859 --> 00:22:44,379
under the hood which is which is funny

00:22:42,070 --> 00:22:46,749
and know that you if if all of this

00:22:44,379 --> 00:22:49,690
scares you away you can just use Jackson

00:22:46,749 --> 00:22:53,320
and works the only thing is Jackson uses

00:22:49,690 --> 00:22:56,229
reflection for sir ization in this a

00:22:53,320 --> 00:22:59,070
ization and that's not it American

00:22:56,229 --> 00:23:03,549
scholar using reflection is frowned upon

00:22:59,070 --> 00:23:07,359
but it works so if it's easier for you

00:23:03,549 --> 00:23:10,960
to start with Jackson just do it or use

00:23:07,359 --> 00:23:14,279
whatever the the framework proposes and

00:23:10,960 --> 00:23:18,190
it will also integrate pretty long

00:23:14,279 --> 00:23:21,609
hopefully it will converge this I think

00:23:18,190 --> 00:23:24,789
is a symbol that the scala community

00:23:21,609 --> 00:23:27,339
while mattering is not yet complete as

00:23:24,789 --> 00:23:29,739
may matter of the SD Java community and

00:23:27,339 --> 00:23:32,710
that's normal it's it's still younger so

00:23:29,739 --> 00:23:35,409
all that the design choices are up there

00:23:32,710 --> 00:23:38,619
on the table and we have to evaluate

00:23:35,409 --> 00:23:44,799
them see how they fare in time and with

00:23:38,619 --> 00:23:45,729
in time it will converge as QL is kind

00:23:44,799 --> 00:23:49,419
of the same story

00:23:45,729 --> 00:23:51,849
and yet it's different serialization and

00:23:49,419 --> 00:23:54,519
deserialization is a fairly easy problem

00:23:51,849 --> 00:23:56,409
to solve interacting with an SQL

00:23:54,519 --> 00:23:57,490
database which is basically a mutable

00:23:56,409 --> 00:24:01,420
store is

00:23:57,490 --> 00:24:04,720
different story the first thing is when

00:24:01,420 --> 00:24:10,390
they when Scala started getting adopted

00:24:04,720 --> 00:24:13,420
by a larger population it started I

00:24:10,390 --> 00:24:16,720
think mostly through play framework or

00:24:13,420 --> 00:24:18,730
through lifts which are the two entry

00:24:16,720 --> 00:24:23,679
points that I that have led I think to

00:24:18,730 --> 00:24:26,800
this play framework posted that it would

00:24:23,679 --> 00:24:28,840
make a web development easy and fast I'm

00:24:26,800 --> 00:24:31,890
not saying it did but that was the

00:24:28,840 --> 00:24:36,550
premise the goal of the of the framework

00:24:31,890 --> 00:24:39,700
and it didn't want to to handle the

00:24:36,550 --> 00:24:42,190
hibernate ORM anymore and they replaced

00:24:39,700 --> 00:24:44,740
it with an arm which is basically the

00:24:42,190 --> 00:24:47,950
opposite of nowhere Ram you write SQL

00:24:44,740 --> 00:24:52,270
directly into your code as string and

00:24:47,950 --> 00:24:57,340
it's executed against the database so it

00:24:52,270 --> 00:25:00,220
works pretty well but it's not very

00:24:57,340 --> 00:25:01,570
typed and that doesn't go very well with

00:25:00,220 --> 00:25:05,140
the way scholarworks

00:25:01,570 --> 00:25:08,650
Scala encourages you to use a lot of

00:25:05,140 --> 00:25:11,950
types therefore other libraries were

00:25:08,650 --> 00:25:17,770
created that would try and type the SQL

00:25:11,950 --> 00:25:20,380
inside your your program so that's for

00:25:17,770 --> 00:25:22,600
one of the one of the EDA side and the

00:25:20,380 --> 00:25:26,620
other side is the functional programming

00:25:22,600 --> 00:25:29,230
side so interacting with us QL and

00:25:26,620 --> 00:25:31,270
especially with no RM through a

00:25:29,230 --> 00:25:34,809
functional programming is not very it's

00:25:31,270 --> 00:25:37,270
kind of painful so of course it started

00:25:34,809 --> 00:25:38,980
the the community started investigating

00:25:37,270 --> 00:25:42,790
other ways of interacting with the

00:25:38,980 --> 00:25:46,420
database then through an overhand and if

00:25:42,790 --> 00:25:48,700
you look at what's occurs in in.net in

00:25:46,420 --> 00:25:53,410
the.net world they've got this link

00:25:48,700 --> 00:25:55,600
library which is basically able to make

00:25:53,410 --> 00:25:58,090
you feel that the database tables are

00:25:55,600 --> 00:26:00,190
just another collection so there have

00:25:58,090 --> 00:26:03,900
been four eyes into this direction

00:26:00,190 --> 00:26:06,640
through slick in particular which will

00:26:03,900 --> 00:26:09,570
you will describe your tables in a very

00:26:06,640 --> 00:26:11,080
tight way and then we will manipulate

00:26:09,570 --> 00:26:14,110
things that be

00:26:11,080 --> 00:26:18,220
like collection of rows basically of

00:26:14,110 --> 00:26:23,980
entities but entirely in a functional

00:26:18,220 --> 00:26:26,740
way this has been replicated in Dubey

00:26:23,980 --> 00:26:29,230
but in a different way because they will

00:26:26,740 --> 00:26:31,929
use macros to parse your SQL and type it

00:26:29,230 --> 00:26:34,210
instead so there are different

00:26:31,929 --> 00:26:37,779
approaches and in there and most of them

00:26:34,210 --> 00:26:40,350
are actually valid I would avoid the

00:26:37,779 --> 00:26:43,659
string the pure strongly typed ones but

00:26:40,350 --> 00:26:45,669
but then I encourage you to look at the

00:26:43,659 --> 00:26:47,769
ways of choosing SQL without actually

00:26:45,669 --> 00:26:50,380
using a new area they are very

00:26:47,769 --> 00:26:54,549
refreshing it really liberate cyou from

00:26:50,380 --> 00:26:57,850
a full weight of is my transaction open

00:26:54,549 --> 00:27:00,279
there and not there and whatever happens

00:26:57,850 --> 00:27:01,899
oh shoot my object has been detached

00:27:00,279 --> 00:27:04,090
from the session and therefore I get an

00:27:01,899 --> 00:27:06,820
exception you never get these kind of

00:27:04,090 --> 00:27:12,580
issues with functional programming

00:27:06,820 --> 00:27:15,639
oriented libraries in Scala so these are

00:27:12,580 --> 00:27:17,980
the two main areas where the will has

00:27:15,639 --> 00:27:21,070
been reinvented many times because they

00:27:17,980 --> 00:27:26,080
have both various design choices that

00:27:21,070 --> 00:27:33,610
are available and and they are fairly

00:27:26,080 --> 00:27:35,500
easy to address of versions you have if

00:27:33,610 --> 00:27:41,250
you come from the Java world you will be

00:27:35,500 --> 00:27:44,529
used to having all versions be above 1.0

00:27:41,250 --> 00:27:48,220
because that's mostly the way may may

00:27:44,529 --> 00:27:50,919
even encourages you to to remember your

00:27:48,220 --> 00:27:53,350
versions - yeah to version your your

00:27:50,919 --> 00:27:56,769
libraries in this color world which is

00:27:53,350 --> 00:27:59,169
much younger this has been more more

00:27:56,769 --> 00:28:01,299
less dismissed so you will you will have

00:27:59,169 --> 00:28:04,090
to use you will be encouraged to use

00:28:01,299 --> 00:28:07,179
sometimes risk candidates because the

00:28:04,090 --> 00:28:11,409
the author never actually went and

00:28:07,179 --> 00:28:15,490
dropped the 1.0 on the on the on the

00:28:11,409 --> 00:28:17,919
version or you will use 0x versions and

00:28:15,490 --> 00:28:21,399
they were just fine because it's just

00:28:17,919 --> 00:28:23,430
been incremented from 0.1 and it's now

00:28:21,399 --> 00:28:24,570
at 0.83 and it's

00:28:23,430 --> 00:28:28,170
it's been there for years and it's

00:28:24,570 --> 00:28:30,110
perfectly fine some of the libraries

00:28:28,170 --> 00:28:34,920
will use semver and some will not

00:28:30,110 --> 00:28:35,730
it's fine not to to wait for 1.0 to use

00:28:34,920 --> 00:28:41,480
the libraries

00:28:35,730 --> 00:28:44,640
they were just fine most of them tooling

00:28:41,480 --> 00:28:48,510
now that's a fun that's always a fun

00:28:44,640 --> 00:28:51,150
topic I'll evacuate right now all the

00:28:48,510 --> 00:28:53,700
things about code quality when I arrived

00:28:51,150 --> 00:28:58,080
in Scala in 2011 there were very few

00:28:53,700 --> 00:29:00,330
tools to analyze to code today I think

00:28:58,080 --> 00:29:02,100
everything is covered you have plugins

00:29:00,330 --> 00:29:05,510
for the main build tools that are

00:29:02,100 --> 00:29:08,850
available that will do code analysis

00:29:05,510 --> 00:29:11,790
find the equivalent for fine bag that

00:29:08,850 --> 00:29:13,860
will lint or reformat your code whatever

00:29:11,790 --> 00:29:16,470
you need these are all covered there is

00:29:13,860 --> 00:29:20,520
a plugin for sonar so you can just plug

00:29:16,470 --> 00:29:23,430
in to your into your software factory

00:29:20,520 --> 00:29:28,610
and you will get your your reports the

00:29:23,430 --> 00:29:31,950
interesting parts finding the one editor

00:29:28,610 --> 00:29:33,570
this is a very personal topic I felt

00:29:31,950 --> 00:29:35,130
that companies that force editors and

00:29:33,570 --> 00:29:39,770
people are doing it the wrong way but

00:29:35,130 --> 00:29:42,330
that's only my own feeling there is no

00:29:39,770 --> 00:29:45,510
orders no specific order I don't

00:29:42,330 --> 00:29:47,880
prescribe any specific editor so but I

00:29:45,510 --> 00:29:49,080
had to put them in the linear order I'll

00:29:47,880 --> 00:29:52,080
start with Scala IDE

00:29:49,080 --> 00:29:54,060
it's open source it's a clip based it

00:29:52,080 --> 00:29:57,960
was just fine Eclipse is very familiar

00:29:54,060 --> 00:29:59,760
for many Java developers so they it's

00:29:57,960 --> 00:30:03,030
just adding a new plugin and getting the

00:29:59,760 --> 00:30:05,370
Scala does callus report and it's still

00:30:03,030 --> 00:30:09,420
actively developed and unsupported so

00:30:05,370 --> 00:30:13,650
it's just fine there is IntelliJ IDEA

00:30:09,420 --> 00:30:16,140
it's the trendy choice it's I feel right

00:30:13,650 --> 00:30:19,050
now the one that has the best support

00:30:16,140 --> 00:30:23,850
for Scala that might change in the

00:30:19,050 --> 00:30:25,620
future so it's only true now idea is

00:30:23,850 --> 00:30:28,170
also gaining traction in the Java world

00:30:25,620 --> 00:30:30,120
so maybe your Java developers are

00:30:28,170 --> 00:30:32,970
familiar with it and it's partially open

00:30:30,120 --> 00:30:34,650
source the there is a community edition

00:30:32,970 --> 00:30:36,750
which is pretty fine for doing Scala

00:30:34,650 --> 00:30:40,620
development and the Scala plugin before

00:30:36,750 --> 00:30:44,250
free it's fine the it has a different

00:30:40,620 --> 00:30:46,140
set of issues than Eclipse and they both

00:30:44,250 --> 00:30:49,860
share one issue which is they are very

00:30:46,140 --> 00:30:52,380
heavy luckily there is a ray of hope

00:30:49,860 --> 00:30:55,230
coming and that's language server

00:30:52,380 --> 00:30:57,240
protocol I think Martin mentioned it in

00:30:55,230 --> 00:30:59,700
this keynote yesterday it's being

00:30:57,240 --> 00:31:02,040
implemented right into the dotty

00:30:59,700 --> 00:31:04,800
compiler but if you don't want to wait

00:31:02,040 --> 00:31:08,130
until there you've got other options the

00:31:04,800 --> 00:31:09,960
first option is using NCMA encima is an

00:31:08,130 --> 00:31:12,150
implementation of a language server of

00:31:09,960 --> 00:31:14,940
the language server protocol for scala

00:31:12,150 --> 00:31:17,100
and it's a server which means you can

00:31:14,940 --> 00:31:20,160
use it with whatever editor you want as

00:31:17,100 --> 00:31:22,620
long as the editor supports language

00:31:20,160 --> 00:31:24,810
standard protocol which is true for

00:31:22,620 --> 00:31:28,620
Emacs VI

00:31:24,810 --> 00:31:33,110
in a more limited way and Visual Studio

00:31:28,620 --> 00:31:35,790
code and at home in a more limited way

00:31:33,110 --> 00:31:39,450
also ends Mia's integrations with

00:31:35,790 --> 00:31:42,000
multiple build tools which helps it get

00:31:39,450 --> 00:31:43,740
the information of the on out project

00:31:42,000 --> 00:31:48,450
setup where finest source code and stuff

00:31:43,740 --> 00:31:50,850
I just wanted to mention in Visual

00:31:48,450 --> 00:31:54,060
Studio code because if you go the dotty

00:31:50,850 --> 00:31:56,010
way if you want to use the dolly LSP at

00:31:54,060 --> 00:32:00,060
the moment Visual Studio code is the

00:31:56,010 --> 00:32:02,250
official editor for writing the code

00:32:00,060 --> 00:32:06,690
that if you go on the dolly website and

00:32:02,250 --> 00:32:10,020
look at IDE support this is what you

00:32:06,690 --> 00:32:14,040
will find Visual Studio code through LSP

00:32:10,020 --> 00:32:16,620
and of course if you are used to

00:32:14,040 --> 00:32:19,980
manipulate Visual Studio code and use to

00:32:16,620 --> 00:32:22,170
its shortcuts and stuff then you can

00:32:19,980 --> 00:32:24,150
also use NCM server with it so that you

00:32:22,170 --> 00:32:28,020
can actually use it for both scalar to

00:32:24,150 --> 00:32:30,920
and scale 3 development so maybe maybe

00:32:28,020 --> 00:32:35,250
right now it could be the best choice

00:32:30,920 --> 00:32:37,490
depends on what you are dealing build

00:32:35,250 --> 00:32:37,490
tools

00:32:39,000 --> 00:32:47,140
today the de facto standard is SBT if

00:32:42,850 --> 00:32:52,630
you look at get up all the projects are

00:32:47,140 --> 00:32:55,330
SBT based the problem with SBT is that

00:32:52,630 --> 00:32:56,830
it's moving very slowly it's changing

00:32:55,330 --> 00:32:58,360
very slowly and it's got a few issues

00:32:56,830 --> 00:33:02,409
that have been there for a while and

00:32:58,360 --> 00:33:04,870
people are getting angry at it angry

00:33:02,409 --> 00:33:08,230
enough that I read a website a blog post

00:33:04,870 --> 00:33:10,899
like two days ago that mentioned that if

00:33:08,230 --> 00:33:12,370
you are starting a project with Park do

00:33:10,899 --> 00:33:14,769
you want to use as busy or should you

00:33:12,370 --> 00:33:16,720
use another one you should probably use

00:33:14,769 --> 00:33:22,480
another one and the other one was the

00:33:16,720 --> 00:33:27,639
old the old the good old my maven so

00:33:22,480 --> 00:33:31,210
some issues and I as the the person say

00:33:27,639 --> 00:33:33,669
in blog post said a scallop project is

00:33:31,210 --> 00:33:37,360
just another it's just another Java

00:33:33,669 --> 00:33:39,370
project so you can use mavin or any Java

00:33:37,360 --> 00:33:40,889
build tool with your scallop project

00:33:39,370 --> 00:33:43,600
just fine

00:33:40,889 --> 00:33:46,330
it needs a couple for mavin it just

00:33:43,600 --> 00:33:47,950
needs a couple plugins and it's using

00:33:46,330 --> 00:33:51,490
the external build definition that you

00:33:47,950 --> 00:33:54,610
are used to so nothing changes much if

00:33:51,490 --> 00:33:57,700
you are like me are allergic to XML

00:33:54,610 --> 00:34:00,370
because of too much XML before you can

00:33:57,700 --> 00:34:02,230
go to Gradle apesh Kafka is actually

00:34:00,370 --> 00:34:05,500
built using Gradle and it works just

00:34:02,230 --> 00:34:06,730
fine same couple plugins you write your

00:34:05,500 --> 00:34:08,800
bill definition in a programming

00:34:06,730 --> 00:34:10,080
language which is groovy and it just

00:34:08,800 --> 00:34:13,540
works

00:34:10,080 --> 00:34:15,700
you will find that the power of Scala is

00:34:13,540 --> 00:34:20,109
its own worst enemy is coming into play

00:34:15,700 --> 00:34:22,179
again in the build tool world since SBT

00:34:20,109 --> 00:34:23,950
is not working is not moving fast enough

00:34:22,179 --> 00:34:25,629
people from the community have been

00:34:23,950 --> 00:34:28,720
trying to contribute and they found the

00:34:25,629 --> 00:34:32,530
design to be lacking in their own views

00:34:28,720 --> 00:34:34,179
I'm not saying it is and therefore they

00:34:32,530 --> 00:34:36,970
have started their own build tools there

00:34:34,179 --> 00:34:39,369
are a couple called SBT a meal I think

00:34:36,970 --> 00:34:43,570
John Freddy started free but I'm not

00:34:39,369 --> 00:34:48,940
sure anyone she uses that so we'll see

00:34:43,570 --> 00:34:51,850
if SPD can survive the evil the natural

00:34:48,940 --> 00:34:54,190
selection of the build tools or if

00:34:51,850 --> 00:34:55,620
we'll go back to using the Java ones

00:34:54,190 --> 00:35:03,760
[Music]

00:34:55,620 --> 00:35:05,700
communities the there are two kinds of

00:35:03,760 --> 00:35:08,320
communities the online ones and the

00:35:05,700 --> 00:35:10,930
physical ones the local ones I'll start

00:35:08,320 --> 00:35:12,850
with the online ones the first community

00:35:10,930 --> 00:35:14,770
that community that you are likely to

00:35:12,850 --> 00:35:17,380
encounter as a newcomer to Scala is the

00:35:14,770 --> 00:35:20,800
Scala center you might not realize it

00:35:17,380 --> 00:35:22,530
because that they are now responsible

00:35:20,800 --> 00:35:24,970
for Scala not org

00:35:22,530 --> 00:35:26,920
when you look up Scala language in

00:35:24,970 --> 00:35:31,060
Google that's most likely to place where

00:35:26,920 --> 00:35:33,040
you will end up they have done a lot for

00:35:31,060 --> 00:35:36,700
the scala community in the last few

00:35:33,040 --> 00:35:39,550
years one of the interesting things they

00:35:36,700 --> 00:35:41,680
have set up is forums that you can also

00:35:39,550 --> 00:35:44,770
interact with through emails so it's

00:35:41,680 --> 00:35:47,980
kind of like a mix of forum and mailing

00:35:44,770 --> 00:35:51,450
list there is one for user support where

00:35:47,980 --> 00:35:55,150
you can ask questions general questions

00:35:51,450 --> 00:35:55,540
proposed code for review whatever you

00:35:55,150 --> 00:35:58,300
want

00:35:55,540 --> 00:36:00,480
so that's users calendar org and there

00:35:58,300 --> 00:36:03,280
is one for discussing the future of kala

00:36:00,480 --> 00:36:06,070
which I follow actively because I find

00:36:03,280 --> 00:36:08,080
that very interesting and all the design

00:36:06,070 --> 00:36:11,020
decisions are discussed there whenever

00:36:08,080 --> 00:36:12,820
there is a blog post by Martin there is

00:36:11,020 --> 00:36:15,180
a thread that's created where you can

00:36:12,820 --> 00:36:19,750
basically find all the comments by the

00:36:15,180 --> 00:36:21,280
contributors for opens persons know so

00:36:19,750 --> 00:36:23,650
it's very interesting to follow that's

00:36:21,280 --> 00:36:26,290
where the discussions are you just have

00:36:23,650 --> 00:36:28,900
to remember that these are the design

00:36:26,290 --> 00:36:32,320
discussions so yester there will be some

00:36:28,900 --> 00:36:35,230
conflicts there will be some team

00:36:32,320 --> 00:36:38,410
conflicts but yeah it's it's it's normal

00:36:35,230 --> 00:36:42,310
at this point it there is no war going

00:36:38,410 --> 00:36:45,340
going on there most of the projects

00:36:42,310 --> 00:36:47,800
today are also using git er that's the

00:36:45,340 --> 00:36:50,590
new place to be and actually the Scalla

00:36:47,800 --> 00:36:52,810
Center is helping all the gear channel

00:36:50,590 --> 00:36:55,270
that are prefixed by skull are created

00:36:52,810 --> 00:36:57,070
by the SCADA Center you can see Scala

00:36:55,270 --> 00:36:58,750
Scala which is the general one where you

00:36:57,070 --> 00:37:01,510
can actually like chat with other Scala

00:36:58,750 --> 00:37:04,020
users inference we managed to get this

00:37:01,510 --> 00:37:07,560
color slash ever

00:37:04,020 --> 00:37:10,080
created and I encourage you to get your

00:37:07,560 --> 00:37:15,780
own channel if you are you don't feel

00:37:10,080 --> 00:37:17,550
you belong to any of these one one

00:37:15,780 --> 00:37:22,560
community online that uses a lot of

00:37:17,550 --> 00:37:24,920
gator is type level type level is I feel

00:37:22,560 --> 00:37:28,890
the main functional programming

00:37:24,920 --> 00:37:33,750
community for Scala online and maybe

00:37:28,890 --> 00:37:36,390
even offline in the beginning of kala

00:37:33,750 --> 00:37:37,950
there was like a rift between the

00:37:36,390 --> 00:37:39,750
functional programming community and the

00:37:37,950 --> 00:37:43,920
object-oriented programming community

00:37:39,750 --> 00:37:47,970
there were frictions sometimes it would

00:37:43,920 --> 00:37:50,390
even degenerate this has been solved I

00:37:47,970 --> 00:37:53,340
feel by the initiative of type level

00:37:50,390 --> 00:37:55,590
they are very welcoming even if you come

00:37:53,340 --> 00:37:57,720
from like me from an object-oriented

00:37:55,590 --> 00:37:59,370
programming background you can go and

00:37:57,720 --> 00:38:01,290
ask very naive questions about

00:37:59,370 --> 00:38:06,390
functional programming and you won't get

00:38:01,290 --> 00:38:09,510
trashed for it which sadly occurred in

00:38:06,390 --> 00:38:11,520
the past in in previous communities so I

00:38:09,510 --> 00:38:13,440
if you want to discover functional

00:38:11,520 --> 00:38:16,350
programming through Scala I strongly

00:38:13,440 --> 00:38:20,430
encourage you to give a shot at type

00:38:16,350 --> 00:38:22,340
level and the local communities these

00:38:20,430 --> 00:38:25,530
are the ones I love most

00:38:22,340 --> 00:38:28,440
first you can try and find one around

00:38:25,530 --> 00:38:30,690
you scalloped space has been created as

00:38:28,440 --> 00:38:33,090
a repository for all the scala

00:38:30,690 --> 00:38:35,340
communities I have made a screenshot of

00:38:33,090 --> 00:38:36,990
the ones in Europe and that's the

00:38:35,340 --> 00:38:41,820
website where you can find the ones in

00:38:36,990 --> 00:38:43,950
Africa there are already a lot of

00:38:41,820 --> 00:38:46,170
communities and if there are none where

00:38:43,950 --> 00:38:50,180
you live I encourage you to create your

00:38:46,170 --> 00:38:53,250
own create your own mirror started up my

00:38:50,180 --> 00:38:57,030
recipe for a working Meetup

00:38:53,250 --> 00:38:59,010
is it wish I struggled for a long time

00:38:57,030 --> 00:38:59,670
when I created the Lummi de Leon Scala

00:38:59,010 --> 00:39:02,610
user group

00:38:59,670 --> 00:39:05,100
because it was hard to find a room I

00:39:02,610 --> 00:39:07,200
always looked for for the room at the

00:39:05,100 --> 00:39:10,950
last moment and it was hard to find

00:39:07,200 --> 00:39:13,890
topics what I ended up doing and it's

00:39:10,950 --> 00:39:15,420
been working very well as I took the

00:39:13,890 --> 00:39:17,580
time to book the rooms a year in advance

00:39:15,420 --> 00:39:20,730
so this way the room

00:39:17,580 --> 00:39:23,130
she's off the table and then for every

00:39:20,730 --> 00:39:26,310
single mihrab for relax the last eight

00:39:23,130 --> 00:39:28,920
month we had a begginer session that's

00:39:26,310 --> 00:39:32,060
20 minutes at the beginning and then a

00:39:28,920 --> 00:39:35,310
normal session that's about 40 minutes

00:39:32,060 --> 00:39:39,960
ever since we started that the the

00:39:35,310 --> 00:39:42,420
groups grew from like ten people to 3035

00:39:39,960 --> 00:39:45,750
person people and the interesting thing

00:39:42,420 --> 00:39:47,670
is it's recurring the people come back

00:39:45,750 --> 00:39:50,370
it's the same people coming back and

00:39:47,670 --> 00:39:52,410
running mostly from the beginner

00:39:50,370 --> 00:39:55,110
sessions and a bit from the other

00:39:52,410 --> 00:39:58,500
sessions until they get familiar enough

00:39:55,110 --> 00:40:00,420
to propose their own so I've really seen

00:39:58,500 --> 00:40:02,970
people adapting Scala and learning Scala

00:40:00,420 --> 00:40:05,490
through the community also if you are

00:40:02,970 --> 00:40:07,050
lost in the library jungle your local

00:40:05,490 --> 00:40:14,630
community is the best place to get help

00:40:07,050 --> 00:40:14,630
from so if it doesn't exist build it I

00:40:14,900 --> 00:40:20,820
worried about conferences so you know

00:40:17,580 --> 00:40:24,210
that there are Scala conferences this is

00:40:20,820 --> 00:40:26,520
one there are a lot of kala conferences

00:40:24,210 --> 00:40:30,570
some are organized by companies some

00:40:26,520 --> 00:40:32,730
organized by communities it's the same

00:40:30,570 --> 00:40:35,070
it's probably the best place to learn

00:40:32,730 --> 00:40:37,170
new things or at least discover new

00:40:35,070 --> 00:40:41,130
things because even if you go to your

00:40:37,170 --> 00:40:44,790
local user group you will be bound by

00:40:41,130 --> 00:40:47,370
like the bubble of the place you are you

00:40:44,790 --> 00:40:49,440
are in yes people will look at new

00:40:47,370 --> 00:40:50,880
things and stuff but it's it's not the

00:40:49,440 --> 00:40:53,310
same as going to a conference in a

00:40:50,880 --> 00:40:57,380
different country and seeing how people

00:40:53,310 --> 00:40:57,380
see Scala from a different perspective

00:40:58,550 --> 00:41:07,050
so the rift I fill is eeling the rift

00:41:04,350 --> 00:41:08,250
between the FP functional programming

00:41:07,050 --> 00:41:12,600
and object-oriented programming

00:41:08,250 --> 00:41:13,830
communities RA is eeling they I think

00:41:12,600 --> 00:41:17,700
both communities have understood that

00:41:13,830 --> 00:41:20,250
there is things to be learned from the

00:41:17,700 --> 00:41:22,920
other and their conversion and that's

00:41:20,250 --> 00:41:25,590
really I think it's the greatest success

00:41:22,920 --> 00:41:27,030
of Scala not only at the language level

00:41:25,590 --> 00:41:29,400
diffusion is occurring not only at the

00:41:27,030 --> 00:41:30,339
language level but also at the community

00:41:29,400 --> 00:41:32,979
level

00:41:30,339 --> 00:41:34,959
that's much harder to to realize because

00:41:32,979 --> 00:41:39,969
changing humans is much harder to change

00:41:34,959 --> 00:41:44,229
than changing code about change

00:41:39,969 --> 00:41:46,390
I mentioned the daily storm why is torn

00:41:44,229 --> 00:41:50,199
why do I paint it in a negative light

00:41:46,390 --> 00:41:54,449
like this because people are much harder

00:41:50,199 --> 00:41:58,630
to change than coleus and every change

00:41:54,449 --> 00:42:02,199
change is never free so I actually am

00:41:58,630 --> 00:42:04,650
very excited by Dori I am glad that it's

00:42:02,199 --> 00:42:06,789
there and I'm very IP by the

00:42:04,650 --> 00:42:09,699
improvements in the language but I also

00:42:06,789 --> 00:42:11,859
know as a developer that I will have to

00:42:09,699 --> 00:42:17,259
maintain code that has been written for

00:42:11,859 --> 00:42:21,369
Scala to that X and that's a that's a

00:42:17,259 --> 00:42:23,410
blip on my radar sure sure Scala to 12

00:42:21,369 --> 00:42:25,829
we have promises from the team that will

00:42:23,410 --> 00:42:29,589
get help from the tools

00:42:25,829 --> 00:42:33,579
taystee is going to enable us to move

00:42:29,589 --> 00:42:35,380
right away from two users sorry skelet

00:42:33,579 --> 00:42:38,079
without X modules with scale three

00:42:35,380 --> 00:42:39,569
modules and intermingle them and it's

00:42:38,079 --> 00:42:41,289
actually great because you won't have

00:42:39,569 --> 00:42:45,009
dependencies on the Scala library

00:42:41,289 --> 00:42:49,900
version anymore which let's face it is

00:42:45,009 --> 00:42:51,699
it's great but at the same time when you

00:42:49,900 --> 00:42:53,559
use Cala two modules and Scout three

00:42:51,699 --> 00:42:55,630
modules and you've got a bug and you

00:42:53,559 --> 00:42:57,339
have to go into and look at the source

00:42:55,630 --> 00:43:00,369
code then you will have two different

00:42:57,339 --> 00:43:05,229
versions of the language to remember in

00:43:00,369 --> 00:43:07,630
your head to interpret when it's passing

00:43:05,229 --> 00:43:10,179
from one class to the other one is in

00:43:07,630 --> 00:43:12,789
Scala to the other is in scale 3 so this

00:43:10,179 --> 00:43:16,150
is going to be this is still going to be

00:43:12,789 --> 00:43:19,509
kind of painful if you are starting a

00:43:16,150 --> 00:43:21,939
greenfield project it's maybe a bit

00:43:19,509 --> 00:43:27,189
early to start scale 3 right away I mean

00:43:21,939 --> 00:43:30,519
it's only 0.8 and then again didn't I

00:43:27,189 --> 00:43:33,880
say that 0.8 is fine in Scala I don't

00:43:30,519 --> 00:43:37,509
know I wouldn't start a protein-protein

00:43:33,880 --> 00:43:40,839
project in Scala Street right away today

00:43:37,509 --> 00:43:42,960
I wouldn't but I would really keep it in

00:43:40,839 --> 00:43:44,790
mind when writing the code I

00:43:42,960 --> 00:43:47,880
I would look at the differences between

00:43:44,790 --> 00:43:49,620
two languages and avoid the function the

00:43:47,880 --> 00:43:52,050
features that have been removed from

00:43:49,620 --> 00:43:55,140
Scala three from new code that I am

00:43:52,050 --> 00:43:58,110
writing today for production code for

00:43:55,140 --> 00:44:02,600
client code for our B code it's

00:43:58,110 --> 00:44:06,110
different I'm almost out of time so

00:44:02,600 --> 00:44:08,910
change never comes from free and

00:44:06,110 --> 00:44:10,980
regarding all the discussions before the

00:44:08,910 --> 00:44:12,540
release there are all storms in the

00:44:10,980 --> 00:44:15,210
ticket there are a few discussions going

00:44:12,540 --> 00:44:19,290
on in the community it's not worrying at

00:44:15,210 --> 00:44:25,650
all it's normal normal for for this kind

00:44:19,290 --> 00:44:27,210
of discussions to occur and yes there

00:44:25,650 --> 00:44:29,700
will be tooling changes there will be

00:44:27,210 --> 00:44:31,650
automatic refactoring by Scala fixon and

00:44:29,700 --> 00:44:34,080
all but that cannot change the human

00:44:31,650 --> 00:44:35,820
mind and as I said if you have to cope

00:44:34,080 --> 00:44:37,700
with Scala - and scale 3 code at the

00:44:35,820 --> 00:44:40,080
same time then you have basically two

00:44:37,700 --> 00:44:45,570
slightly different languages to remember

00:44:40,080 --> 00:44:48,510
and that's not easy but they are

00:44:45,570 --> 00:44:50,970
interoperable the like you don't spend

00:44:48,510 --> 00:44:52,850
you don't spend all your time looking at

00:44:50,970 --> 00:44:59,540
the code of the libraries that you use

00:44:52,850 --> 00:45:02,630
so I think you will be fine this is my

00:44:59,540 --> 00:45:05,460
this is the end of my presentation and

00:45:02,630 --> 00:45:11,480
we have maybe 30 seconds to take

00:45:05,460 --> 00:45:11,480
questions ok thank you very much

00:45:12,800 --> 00:45:22,010
I think we have some some minutes left

00:45:19,250 --> 00:45:38,180
for a present fo for questions now are

00:45:22,010 --> 00:45:41,030
there any oh yes yes how would you

00:45:38,180 --> 00:45:43,340
advise Java spring shop right now to

00:45:41,030 --> 00:45:47,510
introduce or use Scala

00:45:43,340 --> 00:45:52,010
as a library to introduce Scala in a in

00:45:47,510 --> 00:45:55,250
a pure Java shop there are basically two

00:45:52,010 --> 00:45:57,350
ways in my experience the first one is

00:45:55,250 --> 00:45:59,540
going through tests because the test

00:45:57,350 --> 00:46:02,210
libraries in Scala are very very good

00:45:59,540 --> 00:46:04,490
and they bring a lot to the table that

00:46:02,210 --> 00:46:06,470
you don't get from j-unit especially in

00:46:04,490 --> 00:46:09,890
terms of maintainability of the tests

00:46:06,470 --> 00:46:12,740
and in terms of quality of the tests and

00:46:09,890 --> 00:46:15,920
what I'm thinking of here is a for

00:46:12,740 --> 00:46:17,930
quality it's color check which may which

00:46:15,920 --> 00:46:19,970
is property based testing which is

00:46:17,930 --> 00:46:23,540
fairly difficult to achieve using j-unit

00:46:19,970 --> 00:46:26,390
it's doable but it's difficult and for

00:46:23,540 --> 00:46:30,500
the maintainability the fact that in in

00:46:26,390 --> 00:46:33,200
the Scala test libraries you describe

00:46:30,500 --> 00:46:35,920
your tests using actual human language

00:46:33,200 --> 00:46:39,560
and not trying to put underscores or

00:46:35,920 --> 00:46:41,869
capitalized method names to express what

00:46:39,560 --> 00:46:44,690
the test is supposed to do is a huge

00:46:41,869 --> 00:46:49,310
gain so that's one one access and the

00:46:44,690 --> 00:46:52,970
other one is pulling in libraries that

00:46:49,310 --> 00:46:56,150
are that brings something of huge value

00:46:52,970 --> 00:46:59,090
for instance that could be akka I've

00:46:56,150 --> 00:47:02,150
seen Java projects not only spring ones

00:46:59,090 --> 00:47:04,280
but Java projects bring in akka and once

00:47:02,150 --> 00:47:06,850
you start using a cut and your actors

00:47:04,280 --> 00:47:10,750
are probably better written in Scala and

00:47:06,850 --> 00:47:14,420
that would be the entry point for me

00:47:10,750 --> 00:47:16,790
then spring just one thing is spring is

00:47:14,420 --> 00:47:20,090
it depends on how you use spring -

00:47:16,790 --> 00:47:22,310
spring uses a lot of reflection

00:47:20,090 --> 00:47:23,620
injection which is definitely not the

00:47:22,310 --> 00:47:26,620
way you want to do it in scar

00:47:23,620 --> 00:47:30,180
you so probably would you would have to

00:47:26,620 --> 00:47:30,180

YouTube URL: https://www.youtube.com/watch?v=nmV2hfNUm8U


