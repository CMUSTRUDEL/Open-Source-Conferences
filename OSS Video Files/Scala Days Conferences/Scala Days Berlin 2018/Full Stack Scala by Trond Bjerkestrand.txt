Title: Full Stack Scala by Trond Bjerkestrand
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6946-full-stack-scala.html
Captions: 
	00:00:04,590 --> 00:00:08,550
I'll see I'll see if I can wake you up a

00:00:07,080 --> 00:00:11,580
little bit more here so I think if i

00:00:08,550 --> 00:00:13,440
refresh this this is vibrating a little

00:00:11,580 --> 00:00:15,119
bit more and then after a while it's

00:00:13,440 --> 00:00:19,470
it's slowing down so that the name of

00:00:15,119 --> 00:00:21,230
this talk is is full-stack scholar and

00:00:19,470 --> 00:00:25,699
as you mentioned this will be about

00:00:21,230 --> 00:00:28,619
developing fronting applications using

00:00:25,699 --> 00:00:31,380
Scala all the way so we're going to use

00:00:28,619 --> 00:00:37,320
Scala Jas on the fronton and we're going

00:00:31,380 --> 00:00:39,510
to use Scala on the backend yeah so

00:00:37,320 --> 00:00:42,840
let's get started but first a small

00:00:39,510 --> 00:00:47,640
digression a small quiz maybe first

00:00:42,840 --> 00:00:49,350
which flag is this Norway and today it's

00:00:47,640 --> 00:00:52,860
the rich national day so I'm not

00:00:49,350 --> 00:00:54,660
normally very nationalistic etc but I

00:00:52,860 --> 00:00:57,150
just wanted to take this opportunity to

00:00:54,660 --> 00:00:59,010
say dilemma dogging to all the follow of

00:00:57,150 --> 00:01:01,860
Norwegians here this is when you should

00:00:59,010 --> 00:01:04,170
be putting up your Norwegian flags and

00:01:01,860 --> 00:01:07,520
we can sing the national hymn afterwards

00:01:04,170 --> 00:01:10,729
okay for those who wants to stay behind

00:01:07,520 --> 00:01:11,969
anyway so let's let's get to the

00:01:10,729 --> 00:01:15,420
important part

00:01:11,969 --> 00:01:20,420
so back in the days your scale code used

00:01:15,420 --> 00:01:23,280
to compile to JVM bytecode okay slowly

00:01:20,420 --> 00:01:25,439
right but it's it still managed to

00:01:23,280 --> 00:01:28,200
create some JVM bytecode in the end

00:01:25,439 --> 00:01:31,079
today this has changed a little bit so

00:01:28,200 --> 00:01:34,740
today you have multiple backends so the

00:01:31,079 --> 00:01:38,810
Scala code can compile to JVM bytecode

00:01:34,740 --> 00:01:42,049
it can compile to JavaScript code and

00:01:38,810 --> 00:01:46,139
since some time also to native code

00:01:42,049 --> 00:01:50,340
using Scala native and this is obviously

00:01:46,139 --> 00:01:54,109
very nice and very exciting this gives

00:01:50,340 --> 00:01:57,240
us a whole new kinds of opportunities

00:01:54,109 --> 00:01:59,219
I'm going to focus in this talk about

00:01:57,240 --> 00:02:00,810
the two first ones I think I think

00:01:59,219 --> 00:02:04,049
there's been some talks already about

00:02:00,810 --> 00:02:06,630
doing Scala native which is also also

00:02:04,049 --> 00:02:09,750
very exciting I'm going to start with

00:02:06,630 --> 00:02:13,160
with this small slide here so here you

00:02:09,750 --> 00:02:18,900
can see the sea and the sky

00:02:13,160 --> 00:02:21,900
and there's two islands and on these two

00:02:18,900 --> 00:02:24,510
islands there are some people okay

00:02:21,900 --> 00:02:27,390
so far so good we can add a small Sun

00:02:24,510 --> 00:02:29,910
and some palms now what I wanted to say

00:02:27,390 --> 00:02:31,950
is that if these people want to

00:02:29,910 --> 00:02:35,600
collaborate to do something they're

00:02:31,950 --> 00:02:37,980
living far away from anyone else so well

00:02:35,600 --> 00:02:40,290
kind of have to collaborate to make

00:02:37,980 --> 00:02:42,630
something I don't know maybe out Airport

00:02:40,290 --> 00:02:45,390
maybe a boat maybe something they have

00:02:42,630 --> 00:02:47,820
to find a way to work together and this

00:02:45,390 --> 00:02:51,060
is obviously more difficult if they are

00:02:47,820 --> 00:02:53,970
not speaking the same language so this

00:02:51,060 --> 00:02:55,800
is not an impossible challenge even if

00:02:53,970 --> 00:02:58,430
people are speaking different languages

00:02:55,800 --> 00:03:01,830
we can we can always learn new languages

00:02:58,430 --> 00:03:03,840
but things are much easier when we can

00:03:01,830 --> 00:03:07,080
just do things in a language that we

00:03:03,840 --> 00:03:09,480
were familiar with in particular or

00:03:07,080 --> 00:03:11,910
native tongue okay so I've been

00:03:09,480 --> 00:03:14,220
struggling with this for for many years

00:03:11,910 --> 00:03:16,350
I've been trying to learn French for for

00:03:14,220 --> 00:03:18,780
for 10 years now and I'm still still

00:03:16,350 --> 00:03:21,239
struggling a lot and yes it's not easy

00:03:18,780 --> 00:03:23,880
English is a little bit easier you

00:03:21,239 --> 00:03:28,080
should start early that's so I think we

00:03:23,880 --> 00:03:30,620
can take this so who is guessing where

00:03:28,080 --> 00:03:34,620
I'm getting to with this slide

00:03:30,620 --> 00:03:36,060
yes very good okay so let's imagine that

00:03:34,620 --> 00:03:38,160
this is the front end and this is the

00:03:36,060 --> 00:03:41,459
back end it's much easier if we have the

00:03:38,160 --> 00:03:44,280
same language on both ends right if you

00:03:41,459 --> 00:03:47,010
don't have to think so much and talking

00:03:44,280 --> 00:03:49,140
about thinking I have a small slide with

00:03:47,010 --> 00:03:51,690
a big brain on it and I'm going to talk

00:03:49,140 --> 00:03:54,450
about context switching so context

00:03:51,690 --> 00:03:56,160
switching is what is happening when

00:03:54,450 --> 00:03:58,080
we're changing from one language to

00:03:56,160 --> 00:03:59,940
another language this would also change

00:03:58,080 --> 00:04:02,340
when we're going from coding front and

00:03:59,940 --> 00:04:04,110
code to backend code even if they are in

00:04:02,340 --> 00:04:06,989
the same language but the context switch

00:04:04,110 --> 00:04:09,000
is going to be smaller I read on

00:04:06,989 --> 00:04:11,760
Wikipedia that's doing a lot of context

00:04:09,000 --> 00:04:15,959
switching it can reduce the speed or

00:04:11,760 --> 00:04:18,419
your productivity by up to 40% okay this

00:04:15,959 --> 00:04:20,880
is some numbers to to think about for

00:04:18,419 --> 00:04:24,990
those working on a lot of projects at

00:04:20,880 --> 00:04:26,440
the same time in addition to this you

00:04:24,990 --> 00:04:32,110
will be making more air

00:04:26,440 --> 00:04:34,330
okay at least I do and the third point

00:04:32,110 --> 00:04:39,400
is that whenever we write some code at

00:04:34,330 --> 00:04:41,230
least I do this I kind of try to be the

00:04:39,400 --> 00:04:42,780
compiler I try to understand what the

00:04:41,230 --> 00:04:45,820
compiler is doing I'm trying to guess

00:04:42,780 --> 00:04:49,060
what the compiler is going to say is the

00:04:45,820 --> 00:04:52,420
compiler going to figure out what I

00:04:49,060 --> 00:04:55,570
intended to say or not so if we have

00:04:52,420 --> 00:04:58,330
both JavaScript and Scala

00:04:55,570 --> 00:04:59,770
we will be doing a lot of compilation in

00:04:58,330 --> 00:05:01,570
your hats and in JavaScript you have to

00:04:59,770 --> 00:05:03,690
do more because if you have no

00:05:01,570 --> 00:05:05,920
guarantees from the compiler right so

00:05:03,690 --> 00:05:09,130
that's what I wanted to do there are

00:05:05,920 --> 00:05:14,700
benefits of using only one language so

00:05:09,130 --> 00:05:19,690
let's get started io created as small

00:05:14,700 --> 00:05:23,800
SBT gate array templates you can use

00:05:19,690 --> 00:05:28,150
this one just by typing s between you TB

00:05:23,800 --> 00:05:29,830
je and full-stack dot g8 this will

00:05:28,150 --> 00:05:32,320
download all you need for getting

00:05:29,830 --> 00:05:35,590
started with full-stack Scala

00:05:32,320 --> 00:05:42,450
development you will get for the back

00:05:35,590 --> 00:05:45,040
end ok HTTP sorry you will get auto wire

00:05:42,450 --> 00:05:48,940
so ordered wire will allow you to do

00:05:45,040 --> 00:05:51,160
type safe RPC ok so this is really nice

00:05:48,940 --> 00:05:53,169
it gives you really nice layer between

00:05:51,160 --> 00:05:57,250
the front end and the back end

00:05:53,169 --> 00:05:59,230
connecting these two all wire also needs

00:05:57,250 --> 00:06:01,980
some kind of serialization mechanism and

00:05:59,230 --> 00:06:04,480
I chosen boo pickle for this for this

00:06:01,980 --> 00:06:10,450
example so there are other options as

00:06:04,480 --> 00:06:12,370
well you could do you pickle Moo pickle

00:06:10,450 --> 00:06:15,790
is a binary formats that's that's quite

00:06:12,370 --> 00:06:17,800
nice finally we have scala tags that is

00:06:15,790 --> 00:06:23,890
also added to this project which allows

00:06:17,800 --> 00:06:25,930
us to write HTML and CSS in in

00:06:23,890 --> 00:06:30,580
JavaScript so let's look at what we got

00:06:25,930 --> 00:06:32,890
when we download this on Kotori

00:06:30,580 --> 00:06:36,160
templates we will get a couple of of

00:06:32,890 --> 00:06:39,620
directories here so we have the familiar

00:06:36,160 --> 00:06:40,940
build SBT file you will see a target

00:06:39,620 --> 00:06:45,380
and then in addition to this you will

00:06:40,940 --> 00:06:48,370
have four three source folders so the

00:06:45,380 --> 00:06:53,960
json' the JVM one and the shared one

00:06:48,370 --> 00:06:57,290
okay if you look at build SBT you will

00:06:53,960 --> 00:07:01,420
see that we will have four projects okay

00:06:57,290 --> 00:07:04,040
four or five depending on how we define

00:07:01,420 --> 00:07:05,780
we see it so you'll have the client

00:07:04,040 --> 00:07:08,420
project you will have the server project

00:07:05,780 --> 00:07:10,580
you will have a shared JavaScript

00:07:08,420 --> 00:07:13,820
project and you will have shared JDM

00:07:10,580 --> 00:07:17,570
projects the client project is going to

00:07:13,820 --> 00:07:21,610
depend on shared j/s the server project

00:07:17,570 --> 00:07:25,010
is going to depend on shared dot JVM

00:07:21,610 --> 00:07:26,900
okay I think I have some arrows there so

00:07:25,010 --> 00:07:29,650
all the sources that you put in the J's

00:07:26,900 --> 00:07:31,220
folder will be compiled to JavaScript

00:07:29,650 --> 00:07:33,470
all the thralls

00:07:31,220 --> 00:07:36,260
sources we put in the server sorry in

00:07:33,470 --> 00:07:39,140
the JVM will be compiled to JVM bytecode

00:07:36,260 --> 00:07:42,380
and for the shared folder it will be

00:07:39,140 --> 00:07:47,870
compiled to both okay so this is this is

00:07:42,380 --> 00:07:50,390
quite cool now I think I forgot one

00:07:47,870 --> 00:07:52,870
slide I had them get merge thing going

00:07:50,390 --> 00:07:56,300
on right before this so never do this

00:07:52,870 --> 00:08:00,530
but but how do you get started

00:07:56,300 --> 00:08:08,000
well we type SBT a restart what is

00:08:00,530 --> 00:08:10,070
happening here okay so this takes some

00:08:08,000 --> 00:08:11,630
time the first time it always takes some

00:08:10,070 --> 00:08:14,390
time we're going to download the

00:08:11,630 --> 00:08:16,850
Internet I don't have to do this but

00:08:14,390 --> 00:08:19,000
this is what you will see oh and it's

00:08:16,850 --> 00:08:22,850
it's very small it's very tiny let's

00:08:19,000 --> 00:08:24,680
let's blow it up a little bit and you

00:08:22,850 --> 00:08:28,250
will see the timestamp okay so this

00:08:24,680 --> 00:08:30,160
timestamps comes from the server so the

00:08:28,250 --> 00:08:32,930
scholar genius application it's been

00:08:30,160 --> 00:08:39,800
doing an RPC call to the server and it's

00:08:32,930 --> 00:08:42,640
fetching this timestamp back so let's

00:08:39,800 --> 00:08:42,640
have a look at it

00:08:44,610 --> 00:08:51,250
so this is the client part is it big

00:08:49,750 --> 00:08:55,089
enough do you want to blow it up a

00:08:51,250 --> 00:08:57,430
little bit more in the back it's good

00:08:55,089 --> 00:08:59,110
okay so we see the clients we have this

00:08:57,430 --> 00:09:01,570
main methods that gives us an entry

00:08:59,110 --> 00:09:03,670
point this part here is just for my

00:09:01,570 --> 00:09:06,850
presentation so all my presentation is

00:09:03,670 --> 00:09:08,889
actually written in scala j/s which was

00:09:06,850 --> 00:09:11,170
a little bit challenging compared to

00:09:08,889 --> 00:09:14,589
doing a PowerPoint but but still it was

00:09:11,170 --> 00:09:17,199
quite fun so here we see this wire thing

00:09:14,589 --> 00:09:19,839
and it's calling get from server it's

00:09:17,199 --> 00:09:22,120
doing a coolness and when this call is

00:09:19,839 --> 00:09:25,660
completed you will either have a success

00:09:22,120 --> 00:09:27,579
or a failure and in the success you will

00:09:25,660 --> 00:09:29,740
have this M here which is going to be

00:09:27,579 --> 00:09:33,250
the message so let's have a look at at

00:09:29,740 --> 00:09:35,920
the API so the API is what we are using

00:09:33,250 --> 00:09:38,820
and this one is defined in the shared

00:09:35,920 --> 00:09:42,250
folder so this is compiled both to

00:09:38,820 --> 00:09:44,680
JavaScript and to JVM bytecode so you

00:09:42,250 --> 00:09:47,139
recall this get from server and it's

00:09:44,680 --> 00:09:52,180
returning my type so what is my type

00:09:47,139 --> 00:09:55,810
let's look it up my type is just a case

00:09:52,180 --> 00:09:59,620
class weird a message and a Java util

00:09:55,810 --> 00:10:02,350
date inside of it we see here that to be

00:09:59,620 --> 00:10:04,690
able to pickle a non pickle this sense

00:10:02,350 --> 00:10:06,670
it's a Java class we have to create a

00:10:04,690 --> 00:10:09,250
custom Pickler for it but this is quite

00:10:06,670 --> 00:10:11,800
easy if it was a normal case class we

00:10:09,250 --> 00:10:14,260
wouldn't have to do this so this is

00:10:11,800 --> 00:10:16,870
going to be the first things thing we're

00:10:14,260 --> 00:10:20,709
going to try to do we go just slightly

00:10:16,870 --> 00:10:25,300
modify this example so I'm going to

00:10:20,709 --> 00:10:34,149
create a case class person name type

00:10:25,300 --> 00:10:38,079
string and age five int now I'm going to

00:10:34,149 --> 00:10:41,980
say get person and this one should

00:10:38,079 --> 00:10:47,139
return a person okay so let me try to

00:10:41,980 --> 00:10:49,420
recompile this doing the compiled s and

00:10:47,139 --> 00:10:51,880
now you see the big benefit here so I

00:10:49,420 --> 00:10:55,240
try to modify the shared code this is

00:10:51,880 --> 00:10:57,880
telling me that there is a problem with

00:10:55,240 --> 00:11:04,689
the code that I run on the client side

00:10:57,880 --> 00:11:06,490
so let's try to fix this okay okay so do

00:11:04,689 --> 00:11:10,300
not bother you too much I'm just going

00:11:06,490 --> 00:11:14,800
to fast forward okay so I'm going to do

00:11:10,300 --> 00:11:20,819
grow next and once more so if you move

00:11:14,800 --> 00:11:23,019
back to the client side we now see that

00:11:20,819 --> 00:11:26,079
this has been changed it's been updated

00:11:23,019 --> 00:11:28,180
so it's now getting the user and when

00:11:26,079 --> 00:11:31,209
it's completed it's either going to say

00:11:28,180 --> 00:11:33,279
sorry depending on the person that it's

00:11:31,209 --> 00:11:34,899
getting back so let's imagine that we

00:11:33,279 --> 00:11:37,660
are back in Norway and this is a place

00:11:34,899 --> 00:11:39,130
where we have access to alcohol in

00:11:37,660 --> 00:11:41,199
Norway we are very strict about this so

00:11:39,130 --> 00:11:46,120
people under 18 they are not allowed to

00:11:41,199 --> 00:11:48,399
to get anything so that so here you see

00:11:46,120 --> 00:11:54,189
that this is this is really easy this is

00:11:48,399 --> 00:11:57,040
type safe if I try to recompile this so

00:11:54,189 --> 00:11:59,860
the way we do this is using fast ops

00:11:57,040 --> 00:12:02,560
first up is just going to compile the

00:11:59,860 --> 00:12:04,240
front-end code and it's going to

00:12:02,560 --> 00:12:06,430
optimize it in the fast way for

00:12:04,240 --> 00:12:08,889
production use you rather want to use

00:12:06,430 --> 00:12:10,959
the full optimisation so I have a small

00:12:08,889 --> 00:12:13,300
slide on differences between these two a

00:12:10,959 --> 00:12:17,680
little bit later so here you can see

00:12:13,300 --> 00:12:21,990
that this was successful however if I

00:12:17,680 --> 00:12:21,990
try to restart the server

00:12:25,910 --> 00:12:33,410
we're going to see that the backyard was

00:12:29,750 --> 00:12:36,020
not updated so we see my server object

00:12:33,410 --> 00:12:37,490
creation was impossible because this API

00:12:36,020 --> 00:12:39,530
is not respected

00:12:37,490 --> 00:12:41,180
so you see her this is still the old API

00:12:39,530 --> 00:12:44,840
it's getting it from the server and we

00:12:41,180 --> 00:12:49,670
want to return the get user call so let

00:12:44,840 --> 00:12:52,120
me just fix this code and now we're

00:12:49,670 --> 00:12:58,820
returning users so either Jenny or

00:12:52,120 --> 00:13:02,660
Pierre which is not old enough funny

00:12:58,820 --> 00:13:04,640
thing here and this means that we can

00:13:02,660 --> 00:13:10,040
restart a server and everything should

00:13:04,640 --> 00:13:14,030
normally compile and I can head to the

00:13:10,040 --> 00:13:17,930
front and this always takes a little bit

00:13:14,030 --> 00:13:31,780
long and we see welcome Jenny please

00:13:17,930 --> 00:13:31,780
enjoy okay so let me get back to this

00:13:31,930 --> 00:13:39,020
this is a little bit big now

00:13:35,590 --> 00:13:40,880
so you just compile the JavaScript you

00:13:39,020 --> 00:13:42,650
want to get a faster turnaround here so

00:13:40,880 --> 00:13:46,310
just to compile the JavaScript use this

00:13:42,650 --> 00:13:48,110
fast up jas and if you want to compile

00:13:46,310 --> 00:13:49,730
everything every single time and we

00:13:48,110 --> 00:13:52,280
start the server every single time this

00:13:49,730 --> 00:13:55,280
this this not does not make for a very

00:13:52,280 --> 00:13:57,230
fast turnaround and nice development

00:13:55,280 --> 00:13:59,540
experience so you really want to use

00:13:57,230 --> 00:14:02,930
this fast up Jason just instead of just

00:13:59,540 --> 00:14:05,750
compiling the whole project you can also

00:14:02,930 --> 00:14:08,150
make this obviously happen every single

00:14:05,750 --> 00:14:11,800
time you change one of your source code

00:14:08,150 --> 00:14:14,900
files using this tilde in front right

00:14:11,800 --> 00:14:18,410
like you used to

00:14:14,900 --> 00:14:20,120
there is also the full ops Jas which you

00:14:18,410 --> 00:14:21,470
should use when you're deploying your

00:14:20,120 --> 00:14:24,200
application so this is creating

00:14:21,470 --> 00:14:29,270
optimized JavaScript and if you're

00:14:24,200 --> 00:14:34,040
looking at the size of this lets you

00:14:29,270 --> 00:14:36,339
know you will see that the size of this

00:14:34,040 --> 00:14:39,810
presentation is about one point point

00:14:36,339 --> 00:14:42,240
twenty-one megabytes for

00:14:39,810 --> 00:14:44,070
four stops so every single time I read

00:14:42,240 --> 00:14:47,400
charge the the browser I will download

00:14:44,070 --> 00:14:51,420
1.1 megabytes however for the client the

00:14:47,400 --> 00:14:54,540
fully optimized one there is only 260 K

00:14:51,420 --> 00:14:57,779
so this is reasonable I think then

00:14:54,540 --> 00:15:00,060
depending on how many libraries you're

00:14:57,779 --> 00:15:03,960
using etc and obviously this might

00:15:00,060 --> 00:15:07,310
change a little bit so we have seen type

00:15:03,960 --> 00:15:10,770
safe RPC we have seen that we can define

00:15:07,310 --> 00:15:12,900
using or wire we can define an API on

00:15:10,770 --> 00:15:15,180
the shared part of the application and

00:15:12,900 --> 00:15:17,370
then we implement this on the back end

00:15:15,180 --> 00:15:19,860
and we can use it from the front end and

00:15:17,370 --> 00:15:23,930
we have compiler errors whenever there

00:15:19,860 --> 00:15:26,190
are any changes on one or the other side

00:15:23,930 --> 00:15:29,490
so this is really nice I think this is

00:15:26,190 --> 00:15:33,810
one of the main benefits of this we can

00:15:29,490 --> 00:15:35,820
also use shared code more generally so

00:15:33,810 --> 00:15:37,770
we could for instance imagine that we

00:15:35,820 --> 00:15:40,890
want to do some validation maybe instead

00:15:37,770 --> 00:15:43,380
of just returning an user to the fronton

00:15:40,890 --> 00:15:46,290
we want users to be able to enter and

00:15:43,380 --> 00:15:48,980
register so let's I have a second

00:15:46,290 --> 00:15:48,980
example than this

00:15:54,340 --> 00:15:59,880
yeah there's some we can add some colors

00:15:57,220 --> 00:16:07,270
as well mmm

00:15:59,880 --> 00:16:10,570
let's just move forward so here I have

00:16:07,270 --> 00:16:13,450
this ad user that will allow me to

00:16:10,570 --> 00:16:16,150
validate that will allow me to add the

00:16:13,450 --> 00:16:17,740
user to some kind of data store on the

00:16:16,150 --> 00:16:20,830
back end so here we are still on the

00:16:17,740 --> 00:16:22,690
backend side we have this call to

00:16:20,830 --> 00:16:26,110
validate person we're taking on for a

00:16:22,690 --> 00:16:28,750
name and an age and then there's some

00:16:26,110 --> 00:16:30,490
simple validation so it's returning an

00:16:28,750 --> 00:16:33,730
either from the standard library so

00:16:30,490 --> 00:16:38,380
either it's left or it's right and the

00:16:33,730 --> 00:16:43,060
person is being added or not so let's go

00:16:38,380 --> 00:16:49,600
and look at how this is implemented on

00:16:43,060 --> 00:16:51,520
the API side so here we see that we are

00:16:49,600 --> 00:16:55,720
sharing this validation logic between

00:16:51,520 --> 00:16:57,310
the front end and the back end okay so

00:16:55,720 --> 00:16:59,140
for the front own it's it's a little bit

00:16:57,310 --> 00:17:02,680
complex because we want to like return

00:16:59,140 --> 00:17:05,050
the field in which the user had an error

00:17:02,680 --> 00:17:07,480
so we have like two two parts here we're

00:17:05,050 --> 00:17:09,310
turning to eiders sorry we're returning

00:17:07,480 --> 00:17:12,370
an either with two options inside of it

00:17:09,310 --> 00:17:16,449
and potentially in person if if it's

00:17:12,370 --> 00:17:18,699
successful so if first we're doing the

00:17:16,449 --> 00:17:20,350
validation of the name so if the size of

00:17:18,699 --> 00:17:24,370
name is too small then we return an

00:17:20,350 --> 00:17:26,620
error if it doesn't start with a capital

00:17:24,370 --> 00:17:31,420
then we also return an error and we're

00:17:26,620 --> 00:17:35,110
just doing a to int on on the age and

00:17:31,420 --> 00:17:38,230
this is what's returned so you also add

00:17:35,110 --> 00:17:42,780
a call the add user to the API that we

00:17:38,230 --> 00:17:48,160
already created returning an option of a

00:17:42,780 --> 00:17:51,370
person right and now we can use this in

00:17:48,160 --> 00:17:55,240
the front end as well as in the back end

00:17:51,370 --> 00:17:56,860
so here you see I told you that there's

00:17:55,240 --> 00:17:59,440
a lot of mess when you just want to add

00:17:56,860 --> 00:18:01,120
some form elements with bootstrap so

00:17:59,440 --> 00:18:04,870
let's let's not focus too much in this

00:18:01,120 --> 00:18:09,000
what I want you to focus on is the

00:18:04,870 --> 00:18:09,000
submit part so here we are getting

00:18:09,850 --> 00:18:16,730
she regaining the elements so being able

00:18:14,900 --> 00:18:18,860
to call the validation validate person

00:18:16,730 --> 00:18:22,580
with the elements directly from the form

00:18:18,860 --> 00:18:27,290
and if it's right we will do an RPC call

00:18:22,580 --> 00:18:29,860
adding the user if it's none so if it's

00:18:27,290 --> 00:18:36,680
a failure then we will just add these

00:18:29,860 --> 00:18:45,110
invalids classes to or HTML so I can

00:18:36,680 --> 00:18:49,880
start this over again and we should be

00:18:45,110 --> 00:18:55,370
able to now see this new fancy form you

00:18:49,880 --> 00:18:58,550
see here I can add see name should be at

00:18:55,370 --> 00:19:00,680
least two characters age should also be

00:18:58,550 --> 00:19:05,090
digit so we see that we can fix these

00:19:00,680 --> 00:19:07,460
and now this is working it's doing the

00:19:05,090 --> 00:19:09,080
round-trip to the server it's validating

00:19:07,460 --> 00:19:11,300
and in addition to this it's also

00:19:09,080 --> 00:19:13,400
validating on the backend because this

00:19:11,300 --> 00:19:15,080
is something you have to do right people

00:19:13,400 --> 00:19:16,700
have been telling you this before you

00:19:15,080 --> 00:19:20,600
have to do validation both on the front

00:19:16,700 --> 00:19:23,360
end and on the back end because we

00:19:20,600 --> 00:19:27,500
cannot trust the client so let's just

00:19:23,360 --> 00:19:29,720
imagine that we are the client and we

00:19:27,500 --> 00:19:32,240
modify this a little bit so we do to

00:19:29,720 --> 00:19:36,490
validate stead of calling me the person

00:19:32,240 --> 00:19:36,490
that we have here we can now try person

00:19:37,270 --> 00:19:45,110
with too few letters and so many

00:19:42,010 --> 00:19:47,680
invalidate so if I'm doing a false top

00:19:45,110 --> 00:19:47,680
of this one

00:19:51,990 --> 00:20:00,150
and I type in a correct thing here so by

00:19:55,680 --> 00:20:06,300
passing the first validation I think

00:20:00,150 --> 00:20:09,000
this was not updated yet you will see

00:20:06,300 --> 00:20:12,780
that something went wrong so since I

00:20:09,000 --> 00:20:14,040
here try to pass in an invalid thing and

00:20:12,780 --> 00:20:16,140
we're running the same validation logic

00:20:14,040 --> 00:20:19,740
on the front end and on the back end

00:20:16,140 --> 00:20:21,510
this is correctly failing on the back

00:20:19,740 --> 00:20:25,620
end when I try to put in some bogus data

00:20:21,510 --> 00:20:27,900
okay so this is another nice use case a

00:20:25,620 --> 00:20:37,430
third nice use case of this code sharing

00:20:27,900 --> 00:20:37,430
is for sharing visual elements so your

00:20:38,090 --> 00:20:44,160
UI between the two this way you can do

00:20:41,400 --> 00:20:46,140
progressive web application so I know

00:20:44,160 --> 00:20:48,000
people are not doing this too much

00:20:46,140 --> 00:20:51,060
anymore but there are still people out

00:20:48,000 --> 00:20:54,330
there that don't like to to to load all

00:20:51,060 --> 00:20:55,950
your java scripts and in this case being

00:20:54,330 --> 00:20:58,740
able to share the UI between the front

00:20:55,950 --> 00:21:00,420
end and the back end can also be nice so

00:20:58,740 --> 00:21:03,360
that you can have better performance if

00:21:00,420 --> 00:21:05,360
people have JavaScript enabled however

00:21:03,360 --> 00:21:07,620
you always have a fall back to the

00:21:05,360 --> 00:21:10,740
original thing and you can you can make

00:21:07,620 --> 00:21:14,360
this more easy if you are able to share

00:21:10,740 --> 00:21:14,360
the code between fronton and back-end

00:21:14,930 --> 00:21:24,420
any questions so far

00:21:18,170 --> 00:21:27,150
okay let me continue so we have also

00:21:24,420 --> 00:21:30,450
seen that we can write this HTML using

00:21:27,150 --> 00:21:35,640
CSS and and Scala tags so here for

00:21:30,450 --> 00:21:39,420
instance we are creating a form so we

00:21:35,640 --> 00:21:41,700
see here we have h1 elements so we can

00:21:39,420 --> 00:21:47,100
add some strings we can add some

00:21:41,700 --> 00:21:50,100
coloring to this h1 HTML elements we

00:21:47,100 --> 00:21:54,000
have input fields we have divs we can

00:21:50,100 --> 00:21:58,310
specify classes photon labels at such

00:21:54,000 --> 00:21:58,310
Wed cetera so

00:22:00,140 --> 00:22:12,980
to say ok we can also play with cameras

00:22:03,800 --> 00:22:16,520
so let me move to my next example so

00:22:12,980 --> 00:22:19,310
here we are drawing some forms um on the

00:22:16,520 --> 00:22:21,740
canvas in in the browser so we see that

00:22:19,310 --> 00:22:23,530
we do the begin path we specify a couple

00:22:21,740 --> 00:22:26,630
of points that we want to go through

00:22:23,530 --> 00:22:28,190
three so we want to draw a rectangle we

00:22:26,630 --> 00:22:31,250
have this case class which is a point

00:22:28,190 --> 00:22:35,780
here so it allows us to describe this in

00:22:31,250 --> 00:22:39,280
an easier way and we can then draw these

00:22:35,780 --> 00:22:41,870
rectangles passing it in a point and

00:22:39,280 --> 00:22:44,570
width and Heights so we can draw it

00:22:41,870 --> 00:22:48,860
pretty much anywhere on the screen by

00:22:44,570 --> 00:22:50,690
passing in the start points okay so

00:22:48,860 --> 00:22:53,390
let's let's have a look at how what this

00:22:50,690 --> 00:22:55,730
looks like so that there is no server

00:22:53,390 --> 00:23:01,400
components here so I can just do the

00:22:55,730 --> 00:23:06,380
first opt ok which will reduce the

00:23:01,400 --> 00:23:08,960
round-trip a little bit let's go back

00:23:06,380 --> 00:23:12,640
and here we see my first rectangle that

00:23:08,960 --> 00:23:12,640
is drawn on on the screen

00:23:17,950 --> 00:23:28,180
so we want to extend this a little bit

00:23:20,820 --> 00:23:28,960
so I can create a couple new shapes so I

00:23:28,180 --> 00:23:33,370
triangles

00:23:28,960 --> 00:23:36,570
I have circles as well and I'm able to

00:23:33,370 --> 00:23:39,990
draw this down on any kind of place on

00:23:36,570 --> 00:23:47,860
the map let's try to compile this and

00:23:39,990 --> 00:23:50,560
see what it makes for you see we got

00:23:47,860 --> 00:23:56,350
some random shapes created on random

00:23:50,560 --> 00:24:02,290
places on screen okay this is not too

00:23:56,350 --> 00:24:09,690
interesting in itself so what if we

00:24:02,290 --> 00:24:09,690
could add some user input to this scene

00:24:15,860 --> 00:24:23,400
so here I add a new input field where we

00:24:20,850 --> 00:24:27,060
can answer some some text and then when

00:24:23,400 --> 00:24:30,090
we hit the enter button we will parse

00:24:27,060 --> 00:24:32,640
the input of this text so how are we

00:24:30,090 --> 00:24:35,240
going to parse it while we're going to

00:24:32,640 --> 00:24:38,250
use this parser so this one is able to

00:24:35,240 --> 00:24:40,680
detect these different shapes and it

00:24:38,250 --> 00:24:43,040
will allow us to draw some the shapes

00:24:40,680 --> 00:24:48,720
that has been typed in on the screen

00:24:43,040 --> 00:24:53,910
okay so let's see sorry what you first

00:24:48,720 --> 00:24:58,620
optimize this again and waiting waiting

00:24:53,910 --> 00:25:04,020
waiting waiting there is he it's coming

00:24:58,620 --> 00:25:07,140
so I can now write and I can add a

00:25:04,020 --> 00:25:09,000
random color to this shape here so you

00:25:07,140 --> 00:25:11,250
see that these are drawn on random

00:25:09,000 --> 00:25:16,940
places on the screen and we can change

00:25:11,250 --> 00:25:20,910
the shapes of this circle takes only one

00:25:16,940 --> 00:25:22,500
and you see the color here is not the

00:25:20,910 --> 00:25:24,510
parse is not hundred percent because if

00:25:22,500 --> 00:25:27,020
I add two spaces it always gets the same

00:25:24,510 --> 00:25:31,020
color so I should probably fix that

00:25:27,020 --> 00:25:37,130
anyway my next ID would be two to

00:25:31,020 --> 00:25:48,170
integrate this with some user input and

00:25:37,130 --> 00:25:48,170
obviously one way to use Twitter sorry

00:25:48,290 --> 00:25:58,790
I'm going to reap compile yes and this

00:25:54,500 --> 00:26:01,880
is using Scala Twitter library hopefully

00:25:58,790 --> 00:26:07,700
there will be some tweets about Scala

00:26:01,880 --> 00:26:13,160
days let's see yes

00:26:07,700 --> 00:26:15,350
okay so things are turning up oh I don't

00:26:13,160 --> 00:26:17,150
know what this is about okay there's

00:26:15,350 --> 00:26:20,120
some bitcoins and stuff as well yeah

00:26:17,150 --> 00:26:21,530
yeah I think I think I okay I think I

00:26:20,120 --> 00:26:25,940
might have changed something here

00:26:21,530 --> 00:26:28,250
so anyway Scala dies didn't have enough

00:26:25,940 --> 00:26:31,120
info and I was playing with this and I I

00:26:28,250 --> 00:26:36,080
did some errors in my git commit so

00:26:31,120 --> 00:26:40,510
anyway we're going to fix this and the

00:26:36,080 --> 00:26:43,580
idea is that instead of having just

00:26:40,510 --> 00:26:46,190
random tweets we are now going to try to

00:26:43,580 --> 00:26:48,860
parse these tweets and we're going to

00:26:46,190 --> 00:26:51,710
try to draw some things on the screen

00:26:48,860 --> 00:26:53,990
depending on what kind of tweets you are

00:26:51,710 --> 00:27:06,350
sending in so I will need some help here

00:26:53,990 --> 00:27:07,640
from you so so how is this working I'm

00:27:06,350 --> 00:27:09,830
from I'm from getting a little bit this

00:27:07,640 --> 00:27:11,980
it's always difficult to keep keep a

00:27:09,830 --> 00:27:15,440
line on when you're doing this kind of

00:27:11,980 --> 00:27:18,080
presentations anyway so so what we're

00:27:15,440 --> 00:27:20,540
using is server side event server sent

00:27:18,080 --> 00:27:27,710
events so these events they're being

00:27:20,540 --> 00:27:29,330
sent and whenever there is we connecting

00:27:27,710 --> 00:27:32,810
to this event source that has been

00:27:29,330 --> 00:27:36,560
defined on the back end and whenever

00:27:32,810 --> 00:27:41,960
there is a new in the event we are going

00:27:36,560 --> 00:27:46,490
to pass this to the parser that we just

00:27:41,960 --> 00:27:48,770
define so source on message we get a

00:27:46,490 --> 00:27:50,390
message event what are we going to do

00:27:48,770 --> 00:27:57,160
with this message events unless the data

00:27:50,390 --> 00:28:00,350
is empty we are going to append it to

00:27:57,160 --> 00:28:01,980
the string and we're going to parse the

00:28:00,350 --> 00:28:04,530
input and this parse

00:28:01,980 --> 00:28:06,510
is also it's it's not very pure

00:28:04,530 --> 00:28:08,850
functional programming so the force is

00:28:06,510 --> 00:28:12,620
also drawing things on the screen okay

00:28:08,850 --> 00:28:17,640
but for this example I guess it's okay

00:28:12,620 --> 00:28:23,390
so I also have to check whether maybe

00:28:17,640 --> 00:28:26,580
some other changes have with source

00:28:23,390 --> 00:28:30,390
Scala days yeah

00:28:26,580 --> 00:28:33,030
Scala szerik so let's change this to

00:28:30,390 --> 00:28:35,040
Scala days so the idea now is that you

00:28:33,030 --> 00:28:39,390
can actually send tweets you can add

00:28:35,040 --> 00:28:42,210
some rectangles etc to to this tweets

00:28:39,390 --> 00:28:46,500
and hopefully we will be able to parse

00:28:42,210 --> 00:28:50,340
this info and we should be able to draw

00:28:46,500 --> 00:28:52,799
some stuff on on the screen okay so let

00:28:50,340 --> 00:28:55,140
me just recompile the front end and the

00:28:52,799 --> 00:28:57,120
back end so that we don't get the skull

00:28:55,140 --> 00:28:58,620
of Surak tweets I guess they're not a

00:28:57,120 --> 00:29:02,780
lot of scars of skulls Yorick things

00:28:58,620 --> 00:29:02,780
happening at moments but anyway

00:29:11,350 --> 00:29:31,270
I wonder if we should also add a small

00:29:17,380 --> 00:29:34,150
space here let's see yes - and let's

00:29:31,270 --> 00:29:35,830
fast optimize the new version this is

00:29:34,150 --> 00:29:38,740
all done on the front on this part and

00:29:35,830 --> 00:29:47,760
then we have just the tweets coming in

00:29:38,740 --> 00:29:50,020
from the backend okay is anyone fitting

00:29:47,760 --> 00:29:54,820
ok it might take some time before it

00:29:50,020 --> 00:29:56,559
shows up ah ok so what we need we need

00:29:54,820 --> 00:30:00,280
something looking like this

00:29:56,559 --> 00:30:06,280
we need Scala days and then we need for

00:30:00,280 --> 00:30:08,770
instance rectangle 23 to hundreds and

00:30:06,280 --> 00:30:13,630
some color and Rand will give you a

00:30:08,770 --> 00:30:15,190
random color Wow so I'm very curious who

00:30:13,630 --> 00:30:17,650
is going to be the first one who gets

00:30:15,190 --> 00:30:24,010
this who is going to be able to draw

00:30:17,650 --> 00:30:26,559
something on the screen ok no prints no

00:30:24,010 --> 00:30:29,070
parents yes

00:30:26,559 --> 00:30:32,070
who's that who is that Oh big one

00:30:29,070 --> 00:30:32,070
awesome

00:30:32,490 --> 00:30:37,270
so this was pretty much what I had to

00:30:35,320 --> 00:30:40,870
show you I think oh I have a couple of

00:30:37,270 --> 00:30:43,299
slides more but this this is like this

00:30:40,870 --> 00:30:48,450
the Summum everything will just go

00:30:43,299 --> 00:30:56,740
downwards from here fortunately so yeah

00:30:48,450 --> 00:30:58,270
so check out the one I have a list of

00:30:56,740 --> 00:31:00,820
frameworks that you might be interested

00:30:58,270 --> 00:31:02,650
in because I mean the reason why I want

00:31:00,820 --> 00:31:05,200
to do this presentation is because I

00:31:02,650 --> 00:31:07,270
want you to use scholar J s as much as

00:31:05,200 --> 00:31:07,900
possible and I think it's quite good

00:31:07,270 --> 00:31:11,409
tool

00:31:07,900 --> 00:31:13,030
maybe not for very like frontin facing

00:31:11,409 --> 00:31:14,590
with millions of customers kind of

00:31:13,030 --> 00:31:16,690
things because the binaries are a little

00:31:14,590 --> 00:31:18,669
bit big but for like internal

00:31:16,690 --> 00:31:21,010
applications if you have skull

00:31:18,669 --> 00:31:23,830
developers don't force them to do a lot

00:31:21,010 --> 00:31:25,149
of JavaScript stuff instead use college

00:31:23,830 --> 00:31:28,299
a ass because it's quite

00:31:25,149 --> 00:31:32,499
awesome it's it's very good technology

00:31:28,299 --> 00:31:35,499
there's also a lot of specific Scala

00:31:32,499 --> 00:31:38,229
genius frameworks out there there's you

00:31:35,499 --> 00:31:39,879
- there is out watch without words you

00:31:38,229 --> 00:31:43,479
can also choose what you want to code

00:31:39,879 --> 00:31:45,399
you're fronting and Scala j/s or in pure

00:31:43,479 --> 00:31:47,379
script so so if you're a little bit

00:31:45,399 --> 00:31:49,389
tempted to do some haskell coding then

00:31:47,379 --> 00:31:53,289
our out watch might be might be the

00:31:49,389 --> 00:31:55,330
thing i mean using diode - to make my

00:31:53,289 --> 00:31:58,330
front end a little bit more functional

00:31:55,330 --> 00:32:01,179
here and not to have too much global

00:31:58,330 --> 00:32:04,779
states hang around we're still waiting

00:32:01,179 --> 00:32:07,149
for Suzaku but hopefully it's it's it's

00:32:04,779 --> 00:32:09,159
coming I've been using Scala tags

00:32:07,149 --> 00:32:11,469
there's also binding for for other

00:32:09,159 --> 00:32:13,869
frameworks that is more commonly used in

00:32:11,469 --> 00:32:18,609
in the enterprise world like react and

00:32:13,869 --> 00:32:22,629
angular so this might also be useful and

00:32:18,609 --> 00:32:24,700
the results of binding start Scala so

00:32:22,629 --> 00:32:27,909
let's go through some of the benefits of

00:32:24,700 --> 00:32:29,799
using this technology you got to do

00:32:27,909 --> 00:32:32,200
functional programming not only

00:32:29,799 --> 00:32:34,679
functional programming but also typesafe

00:32:32,200 --> 00:32:38,229
functional programming on the front end

00:32:34,679 --> 00:32:40,749
in addition you got the type safe RPC

00:32:38,229 --> 00:32:42,190
which is really awesome so you don't

00:32:40,749 --> 00:32:45,219
have to think about serialization

00:32:42,190 --> 00:32:47,619
deserialization bugs when you're mixing

00:32:45,219 --> 00:32:49,210
these etc going forward refactoring

00:32:47,619 --> 00:32:50,649
front and back and it's it's really

00:32:49,210 --> 00:32:53,080
piece of cake

00:32:50,649 --> 00:33:00,759
you got the famous scholar tooling so

00:32:53,080 --> 00:33:02,799
amazing editors SBT now you got to work

00:33:00,759 --> 00:33:05,469
with Scala so this this is also nice so

00:33:02,799 --> 00:33:08,889
you you got to avoid some of the perks

00:33:05,469 --> 00:33:11,830
from from Java scripts and save

00:33:08,889 --> 00:33:14,499
refactorings and as I said code sharing

00:33:11,830 --> 00:33:19,359
so you can have the same code running in

00:33:14,499 --> 00:33:22,809
the front end and in the back end some

00:33:19,359 --> 00:33:24,580
challenges turnaround is a little bit

00:33:22,809 --> 00:33:27,549
slow especially when you are always

00:33:24,580 --> 00:33:29,589
compiling the whole thing so try to

00:33:27,549 --> 00:33:33,219
optimize your workflow so that you only

00:33:29,589 --> 00:33:34,510
used the full opt SBT as much as

00:33:33,219 --> 00:33:38,080
possible

00:33:34,510 --> 00:33:40,600
and then secondly mainly it this might

00:33:38,080 --> 00:33:42,910
be the most challenging part finding

00:33:40,600 --> 00:33:45,429
front-end skull developers I I don't

00:33:42,910 --> 00:33:48,429
know a lot of them but um I kind of like

00:33:45,429 --> 00:33:53,040
doing this these kind of quirks in Scala

00:33:48,429 --> 00:34:02,110
so anyway any questions

00:33:53,040 --> 00:34:04,330
yeah I know this one is wrong first of

00:34:02,110 --> 00:34:07,919
all thank you very much so I come up

00:34:04,330 --> 00:34:07,919
with the mic to anyone who has questions

00:34:09,210 --> 00:34:16,899
I would like to know I know that auto

00:34:13,600 --> 00:34:21,010
wire is working with Ajax school yeah

00:34:16,899 --> 00:34:24,220
and how would you do to do the same with

00:34:21,010 --> 00:34:27,220
WebSocket uh-huh yes yeah this is

00:34:24,220 --> 00:34:30,460
something I've been I've been looking

00:34:27,220 --> 00:34:33,060
into for a while as well so this is this

00:34:30,460 --> 00:34:35,590
is one of the missing parts I think

00:34:33,060 --> 00:34:53,800
unless someone has some more information

00:34:35,590 --> 00:34:56,649
yes yes okay so I'm from the company

00:34:53,800 --> 00:34:59,890
that develops the you - framework and as

00:34:56,649 --> 00:35:03,300
for the RPC we have it fully functioning

00:34:59,890 --> 00:35:06,520
on the web sockets yes what

00:35:03,300 --> 00:35:08,710
implementations to come if you if you

00:35:06,520 --> 00:35:10,420
use any specific techniques for the

00:35:08,710 --> 00:35:12,880
backhander like that right now its

00:35:10,420 --> 00:35:16,420
atmosphere based so and the any back-end

00:35:12,880 --> 00:35:17,050
goes actually but it's down on the web

00:35:16,420 --> 00:35:20,550
sockets

00:35:17,050 --> 00:35:23,950
we will also support things such as

00:35:20,550 --> 00:35:27,130
observables and other reactive methods

00:35:23,950 --> 00:35:30,030
of obtaining data small applause for

00:35:27,130 --> 00:35:30,030
this gentleman here

00:35:31,430 --> 00:35:41,170
thank you and that's another question

00:35:33,799 --> 00:35:41,170
I'm coming up can also checkout you -

00:35:45,039 --> 00:35:53,359
what about writing single page

00:35:48,259 --> 00:35:56,660
applications is that as easy as in doing

00:35:53,359 --> 00:35:59,809
it in JavaScript or typescript or is

00:35:56,660 --> 00:36:01,940
this a problem so because this as far as

00:35:59,809 --> 00:36:04,999
I saw is meant before the communication

00:36:01,940 --> 00:36:07,490
between back-end and front-end and still

00:36:04,999 --> 00:36:09,950
an application where the server is

00:36:07,490 --> 00:36:13,039
sending the HTML to the to the client

00:36:09,950 --> 00:36:14,480
yeah but in Singapore applications the

00:36:13,039 --> 00:36:17,690
architecture is a bit different that

00:36:14,480 --> 00:36:21,920
works as well yeah so I I've been

00:36:17,690 --> 00:36:24,319
focusing on this how to say the full

00:36:21,920 --> 00:36:27,230
stack part so communicating between a

00:36:24,319 --> 00:36:29,660
fronting on the backend because often

00:36:27,230 --> 00:36:32,059
you you will need this and I find this

00:36:29,660 --> 00:36:34,309
one of the most attractive parts of

00:36:32,059 --> 00:36:36,410
Scala Scala yes and the scholar

00:36:34,309 --> 00:36:40,309
combination that's why I'm focusing this

00:36:36,410 --> 00:36:42,470
but as you can see the Scala Jas here

00:36:40,309 --> 00:36:45,769
this presentation is a single page

00:36:42,470 --> 00:36:48,819
application so it's doing some calls to

00:36:45,769 --> 00:36:51,109
the back end but it's it's it's a fourth

00:36:48,819 --> 00:36:54,109
it's a single page application and this

00:36:51,109 --> 00:36:55,730
this works very well it's I would say

00:36:54,109 --> 00:36:57,920
it's better than the alternatives that

00:36:55,730 --> 00:37:00,440
you mentioned because you got to code in

00:36:57,920 --> 00:37:04,999
Scala but we can we can always sell

00:37:00,440 --> 00:37:07,099
discussions about that hi hi first of

00:37:04,999 --> 00:37:09,079
all thanks for the nice talk was really

00:37:07,099 --> 00:37:10,789
nice to see how somebody else presents

00:37:09,079 --> 00:37:13,940
this stuff so we are using a quite

00:37:10,789 --> 00:37:15,410
similar set up in our project and one

00:37:13,940 --> 00:37:17,710
point which is up for discussion

00:37:15,410 --> 00:37:20,150
currently if Isis is a debugging support

00:37:17,710 --> 00:37:25,849
so do you already have some experience

00:37:20,150 --> 00:37:29,420
with that no I mean you have source Maps

00:37:25,849 --> 00:37:34,730
right which kind of helps you a little

00:37:29,420 --> 00:37:37,609
bit okay so as you can see I'm a Emacs

00:37:34,730 --> 00:37:40,309
sky so but in IntelliJ Ultimates this

00:37:37,609 --> 00:37:45,050
this works would you - only or with

00:37:40,309 --> 00:37:47,090
anything with all Scala yes

00:37:45,050 --> 00:37:49,730
it's great to have the people that are

00:37:47,090 --> 00:37:54,130
more familiar with us than me here this

00:37:49,730 --> 00:37:54,130
is the audience participation trick yeah

00:37:54,790 --> 00:38:00,320
I was wondering do you have any

00:37:57,860 --> 00:38:04,790
experience in implementing this thing

00:38:00,320 --> 00:38:07,430
this in a company yes so I I'm not sure

00:38:04,790 --> 00:38:09,290
if I'm allowed to say this but I do do

00:38:07,430 --> 00:38:12,350
try to implement this in a company but I

00:38:09,290 --> 00:38:15,320
I just have to make sure that the boss

00:38:12,350 --> 00:38:17,690
is not here I like to say are you know

00:38:15,320 --> 00:38:19,640
okay so yes I'm doing this in the

00:38:17,690 --> 00:38:23,960
company a little bit out of the radar

00:38:19,640 --> 00:38:29,930
but still it works quite well yeah don't

00:38:23,960 --> 00:38:32,510
tell anyone okay cut the video no there

00:38:29,930 --> 00:38:35,390
there sometimes big fears about adopting

00:38:32,510 --> 00:38:36,970
these new technologies and people I

00:38:35,390 --> 00:38:43,400
think has been a little bit burnt by

00:38:36,970 --> 00:38:46,130
quit the Google web toolkit and similar

00:38:43,400 --> 00:38:48,470
but I mean it's it's working it's

00:38:46,130 --> 00:38:53,540
working very well and I really think it

00:38:48,470 --> 00:38:56,030
should be given fair opportunities hi am

00:38:53,540 --> 00:38:57,650
i noticed yet you use a synchronous

00:38:56,030 --> 00:39:01,220
interface to communicate the front end

00:38:57,650 --> 00:39:03,140
and the back end here is this because

00:39:01,220 --> 00:39:06,350
limitation of how to wire or a

00:39:03,140 --> 00:39:09,740
limitation out of scala yes of it was

00:39:06,350 --> 00:39:13,970
just I mean this is this is a limitation

00:39:09,740 --> 00:39:20,000
of auto wire and if you use you - you

00:39:13,970 --> 00:39:23,710
you probably are better off right yes so

00:39:20,000 --> 00:39:23,710
it's it's not a limitation with colleges

00:39:25,869 --> 00:39:31,010
we hear that this webassembly

00:39:28,460 --> 00:39:33,970
technology is coming to the browsers you

00:39:31,010 --> 00:39:36,830
think that is something where Scala will

00:39:33,970 --> 00:39:39,710
target or do you think it will remain

00:39:36,830 --> 00:39:45,069
with this College a yes or both or like

00:39:39,710 --> 00:39:50,089
it's an interesting question I think yes

00:39:45,069 --> 00:39:53,230
yeah I don't I don't firm opinion id

00:39:50,089 --> 00:39:56,829
about stats but if anyone else wants to

00:39:53,230 --> 00:39:56,829
I'm coming to Mike

00:39:58,690 --> 00:40:05,809
anyway I asked that same question to the

00:40:02,359 --> 00:40:08,480
developer of Korea's little more over a

00:40:05,809 --> 00:40:10,759
year ago and then he was saying no

00:40:08,480 --> 00:40:14,930
because weapo sembly in some way is not

00:40:10,759 --> 00:40:18,400
compatible with our scholarly works but

00:40:14,930 --> 00:40:18,400
that was one a half year ago

00:40:19,690 --> 00:40:26,470
Sebastiaan has been working miracles

00:40:21,529 --> 00:40:26,470

YouTube URL: https://www.youtube.com/watch?v=97FzfTMz2Aw


