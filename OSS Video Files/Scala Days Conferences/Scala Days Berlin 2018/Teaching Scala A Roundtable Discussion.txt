Title: Teaching Scala A Roundtable Discussion
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6922-teaching-scala-a-roundtable-discussion.html
Captions: 
	00:00:04,590 --> 00:00:09,059
good afternoon everyone thank you all

00:00:06,900 --> 00:00:11,040
for coming to the panel on teaching

00:00:09,059 --> 00:00:12,840
Scala we're really excited to be here

00:00:11,040 --> 00:00:14,010
today just to give you a quick overview

00:00:12,840 --> 00:00:16,200
of what we're going to be doing this

00:00:14,010 --> 00:00:18,750
afternoon we're all going to introduce

00:00:16,200 --> 00:00:20,820
ourselves as the panelists I mean I have

00:00:18,750 --> 00:00:22,470
some moderator lead questions for about

00:00:20,820 --> 00:00:24,120
the first 30 minutes of the panel and

00:00:22,470 --> 00:00:25,860
then we'll open it up to all of your

00:00:24,120 --> 00:00:29,550
questions for about the last 15 minutes

00:00:25,860 --> 00:00:30,930
of the panel so I will be guiding this

00:00:29,550 --> 00:00:32,189
the first part of the session and the

00:00:30,930 --> 00:00:34,290
panelists are aware that I might be

00:00:32,189 --> 00:00:35,760
interrupting them so I've already warned

00:00:34,290 --> 00:00:39,539
them about that you don't have to think

00:00:35,760 --> 00:00:40,649
I'm being mean but as we're talking if

00:00:39,539 --> 00:00:43,109
you have any questions that you want to

00:00:40,649 --> 00:00:44,399
ask be thinking about those and of

00:00:43,109 --> 00:00:45,809
course we'll all be around throughout

00:00:44,399 --> 00:00:47,760
the rest of the day and hopefully the

00:00:45,809 --> 00:00:49,409
rest of the conference if our questions

00:00:47,760 --> 00:00:51,329
don't get answered in the 45 minutes

00:00:49,409 --> 00:00:53,489
that we have here so once again thank

00:00:51,329 --> 00:00:55,409
you for coming my name is Kelly I am a

00:00:53,489 --> 00:00:57,809
scholar developer and currently a

00:00:55,409 --> 00:00:58,920
developer evangelist at Twilio my

00:00:57,809 --> 00:01:01,530
experience with Scala

00:00:58,920 --> 00:01:03,870
mostly in data engineering and I have

00:01:01,530 --> 00:01:05,570
experience teaching Scala through the

00:01:03,870 --> 00:01:08,430
Scala bridge program which is a

00:01:05,570 --> 00:01:11,040
education outreach to female and

00:01:08,430 --> 00:01:12,659
underrepresented developers that might

00:01:11,040 --> 00:01:15,060
know another programming language but

00:01:12,659 --> 00:01:16,380
don't necessarily know Scala I'm gonna

00:01:15,060 --> 00:01:18,869
pass it on to the rest of the panelists

00:01:16,380 --> 00:01:20,700
now to introduce themselves one last

00:01:18,869 --> 00:01:23,310
thing I wanted to thank Ryan for really

00:01:20,700 --> 00:01:24,990
wrangling us today to get us here on

00:01:23,310 --> 00:01:29,030
this panel so wouldn't have happened

00:01:24,990 --> 00:01:29,030
without him and taking away Neville

00:01:29,149 --> 00:01:34,350
everybody my name is Neville I work at a

00:01:32,039 --> 00:01:36,299
company called Spotify I've been using

00:01:34,350 --> 00:01:38,939
Scala for maybe three to four years

00:01:36,299 --> 00:01:40,530
mainly on data processing in the last

00:01:38,939 --> 00:01:43,259
couple years I've been pushing for

00:01:40,530 --> 00:01:44,789
adoption for Scala is the main language

00:01:43,259 --> 00:01:47,759
for data processing it's qualify and

00:01:44,789 --> 00:01:50,609
we've grown from like maybe 20 people to

00:01:47,759 --> 00:01:55,770
at this moment more than 300 engineers

00:01:50,609 --> 00:01:58,560
writing data pipelines in Scala yeah hi

00:01:55,770 --> 00:02:01,649
everyone my name is Matt Chuck I work

00:01:58,560 --> 00:02:04,619
here in Berlin in the wire we do and to

00:02:01,649 --> 00:02:06,810
end encrypted messenger and I work as a

00:02:04,619 --> 00:02:10,979
scholar developer doing the android

00:02:06,810 --> 00:02:13,830
client for for a while so we started as

00:02:10,979 --> 00:02:15,590
a project mainly in drop of android

00:02:13,830 --> 00:02:18,500
project but now we mostly

00:02:15,590 --> 00:02:20,660
emigrated to Scala for I'd like to say

00:02:18,500 --> 00:02:22,220
something about that also I'm trying to

00:02:20,660 --> 00:02:25,790
show that Scala is great for mobile

00:02:22,220 --> 00:02:27,530
applications hello my name is Ryan

00:02:25,790 --> 00:02:29,959
Tanner I work for Twitter in our

00:02:27,530 --> 00:02:32,780
Colorado office in Boulder I started

00:02:29,959 --> 00:02:35,270
using Scala about eight years ago and at

00:02:32,780 --> 00:02:37,430
Twitter I teach a couple of courses on

00:02:35,270 --> 00:02:39,800
the Scala collections library I'm also

00:02:37,430 --> 00:02:41,750
currently spearheading a new onboarding

00:02:39,800 --> 00:02:43,910
effort for new hires to help get them up

00:02:41,750 --> 00:02:45,260
to speed on Scala and on the Twitter

00:02:43,910 --> 00:02:46,090
stack so I'll be speaking about that

00:02:45,260 --> 00:02:49,730
today

00:02:46,090 --> 00:02:54,560
hello I'm Martina deskey I design Scala

00:02:49,730 --> 00:02:57,890
and I'm teaching it I'm teaching it in

00:02:54,560 --> 00:03:01,459
second year with two courses one you

00:02:57,890 --> 00:03:02,840
probably all know with the principles of

00:03:01,459 --> 00:03:06,260
functional programming in Scala which is

00:03:02,840 --> 00:03:08,720
a MOOC and the other one on concurrency

00:03:06,260 --> 00:03:13,430
and parallelism with Heather as one of

00:03:08,720 --> 00:03:14,780
the co teachers so the I have a lot of

00:03:13,430 --> 00:03:16,690
experience in teaching it in a

00:03:14,780 --> 00:03:19,480
university setting and then I started

00:03:16,690 --> 00:03:21,860
typesafe and our light pen that we also

00:03:19,480 --> 00:03:24,620
developed a lot of course materials for

00:03:21,860 --> 00:03:26,470
info for industry so I know some of that

00:03:24,620 --> 00:03:29,690
as well

00:03:26,470 --> 00:03:34,160
yeah and I'm Heather Miller I co-founded

00:03:29,690 --> 00:03:39,079
the Scout Center with this one I was

00:03:34,160 --> 00:03:42,079
also I also did my PhD under this one so

00:03:39,079 --> 00:03:44,900
I have I don't know since 2011 or 2010

00:03:42,079 --> 00:03:46,940
or so I've been using Scala and I've

00:03:44,900 --> 00:03:49,940
participated in sort of developing

00:03:46,940 --> 00:03:53,049
several of these MOOCs so the functional

00:03:49,940 --> 00:03:57,650
programming MOOC MOOC that's about

00:03:53,049 --> 00:04:00,200
programming with with spark and I I'm

00:03:57,650 --> 00:04:01,640
also professor and I teach I teach I use

00:04:00,200 --> 00:04:03,650
actually Scala for a bunch of these

00:04:01,640 --> 00:04:05,000
courses that I write now I'm teaching a

00:04:03,650 --> 00:04:07,310
course on or I just finished teaching a

00:04:05,000 --> 00:04:08,600
course on big data processing or

00:04:07,310 --> 00:04:12,200
whatever and of course we use Scala for

00:04:08,600 --> 00:04:13,700
that awesome so our first question is

00:04:12,200 --> 00:04:16,060
going to be for Heather and my check and

00:04:13,700 --> 00:04:19,130
Neville how do you help newcomers

00:04:16,060 --> 00:04:20,239
understand Scala isms or things that are

00:04:19,130 --> 00:04:22,700
specific to these Scala programming

00:04:20,239 --> 00:04:25,190
languages and that's newcomers whether

00:04:22,700 --> 00:04:27,090
they're new to programming or new to

00:04:25,190 --> 00:04:30,210
just Scala

00:04:27,090 --> 00:04:33,540
why don't we start with you okay so

00:04:30,210 --> 00:04:35,540
actually I don't have like you know my

00:04:33,540 --> 00:04:40,710
solution is maybe not the best solution

00:04:35,540 --> 00:04:42,330
but I like to provide examples first to

00:04:40,710 --> 00:04:44,310
people and then when they see how

00:04:42,330 --> 00:04:47,669
something works then I start using the

00:04:44,310 --> 00:04:49,620
terminology to explain the pieces so I

00:04:47,669 --> 00:04:53,330
take very much in examples first and

00:04:49,620 --> 00:04:55,620
then you know jargon next approach and

00:04:53,330 --> 00:04:56,850
depending on where the the those people

00:04:55,620 --> 00:04:57,930
come from if they have already learned a

00:04:56,850 --> 00:05:00,419
little bit of functional programming in

00:04:57,930 --> 00:05:02,010
Haskell or in like racket or some other

00:05:00,419 --> 00:05:03,990
programming language I then try to

00:05:02,010 --> 00:05:05,639
relate to that terminology to one of

00:05:03,990 --> 00:05:07,139
those languages as well because some of

00:05:05,639 --> 00:05:10,229
these terminologies they mean the same

00:05:07,139 --> 00:05:13,229
thing they're slightly different magic

00:05:10,229 --> 00:05:14,970
okay so while it's not a very big

00:05:13,229 --> 00:05:20,160
company so we don't have like an

00:05:14,970 --> 00:05:23,039
official teaching curve but during in

00:05:20,160 --> 00:05:25,350
time we developed simply like two main

00:05:23,039 --> 00:05:27,810
approaches that we need friendly

00:05:25,350 --> 00:05:30,660
environment which is probably the famous

00:05:27,810 --> 00:05:33,630
in every language and also we need to

00:05:30,660 --> 00:05:36,510
give a newcomer time and opportunity

00:05:33,630 --> 00:05:39,690
stock experiment so because it's quite

00:05:36,510 --> 00:05:42,539
unusual to find people who are both

00:05:39,690 --> 00:05:45,090
Scala and Android developers we usually

00:05:42,539 --> 00:05:46,740
get just someone who is expert in in one

00:05:45,090 --> 00:05:50,880
of them and we try to teach the other

00:05:46,740 --> 00:05:53,520
and in that case I think Scala is in a

00:05:50,880 --> 00:05:56,490
good way that inside it's it's a good

00:05:53,520 --> 00:05:58,950
idea that Scala is like a mixed language

00:05:56,490 --> 00:06:03,260
so even if someone already knows Java

00:05:58,950 --> 00:06:06,720
but and write Android in in Java then

00:06:03,260 --> 00:06:10,470
looking at our code in Scala it's still

00:06:06,720 --> 00:06:12,690
quite similar so we can just live that

00:06:10,470 --> 00:06:15,660
person with our project which is quite a

00:06:12,690 --> 00:06:17,700
big and it's written in sometimes parts

00:06:15,660 --> 00:06:20,400
of with our thanks to know some part of

00:06:17,700 --> 00:06:22,910
a more orient objective oriented but

00:06:20,400 --> 00:06:26,820
still it's well-written so we can simply

00:06:22,910 --> 00:06:30,599
trust a person that CEO or he will just

00:06:26,820 --> 00:06:32,580
be able to find out our way around it

00:06:30,599 --> 00:06:36,420
and because it's an Android application

00:06:32,580 --> 00:06:38,580
so it's easy also to track what

00:06:36,420 --> 00:06:40,380
texts of the experiment to do so like

00:06:38,580 --> 00:06:45,990
you can always compile it and have to

00:06:40,380 --> 00:06:47,910
see what what you broke and so so yeah

00:06:45,990 --> 00:06:50,340
it's also scales well because this way

00:06:47,910 --> 00:06:53,490
we can just leave that person with the

00:06:50,340 --> 00:06:55,290
product if the environment is friendly

00:06:53,490 --> 00:06:58,830
and that means that that person is able

00:06:55,290 --> 00:07:00,720
to simply ask anyone and just borrow the

00:06:58,830 --> 00:07:03,600
time of another developer and even if

00:07:00,720 --> 00:07:06,150
there are some simple of silly questions

00:07:03,600 --> 00:07:09,360
then that person will know that they

00:07:06,150 --> 00:07:12,240
will be answered then that's okay so a

00:07:09,360 --> 00:07:15,180
drawback is probably that we would be

00:07:12,240 --> 00:07:17,070
faster if everyone just focused on the

00:07:15,180 --> 00:07:19,500
task at hand and then switch to another

00:07:17,070 --> 00:07:21,530
task but this way we can be pretty sure

00:07:19,500 --> 00:07:25,740
that in time that person will become

00:07:21,530 --> 00:07:29,160
like will not be afraid of our code will

00:07:25,740 --> 00:07:34,410
be will better understand the project

00:07:29,160 --> 00:07:38,520
and so on yeah that's basically what I

00:07:34,410 --> 00:07:39,870
wanted to say so most of our Scala users

00:07:38,520 --> 00:07:43,110
are from a data science machinery in

00:07:39,870 --> 00:07:44,970
background so like our Python so it

00:07:43,110 --> 00:07:47,220
seems to me the hardest part is to teach

00:07:44,970 --> 00:07:49,350
the idea of a pure functional immutable

00:07:47,220 --> 00:07:52,230
data concept of applying functional

00:07:49,350 --> 00:07:54,600
transform and how they map to let's say

00:07:52,230 --> 00:07:57,120
distributed system MapReduce paradigms

00:07:54,600 --> 00:07:59,520
so we basically teach majority of the

00:07:57,120 --> 00:08:02,460
olp type safety part like nothing about

00:07:59,520 --> 00:08:04,500
trades classes variances anything like

00:08:02,460 --> 00:08:07,380
that and just focus on like playing with

00:08:04,500 --> 00:08:09,390
the decryption library applying lambdas

00:08:07,380 --> 00:08:11,400
and then gradually introduced let's say

00:08:09,390 --> 00:08:14,070
something like spark and we have our own

00:08:11,400 --> 00:08:18,120
Scala API for for Google Cloud and we

00:08:14,070 --> 00:08:22,590
teach how the collection and Combinator

00:08:18,120 --> 00:08:25,740
you know idea apply to Maps I reduce or

00:08:22,590 --> 00:08:27,120
even later introduce concepts like like

00:08:25,740 --> 00:08:28,980
semigroup and mano and you know

00:08:27,120 --> 00:08:31,880
essential to two parallel data

00:08:28,980 --> 00:08:35,490
processing so that that's all take

00:08:31,880 --> 00:08:38,729
excellent my next question is for Ryan

00:08:35,490 --> 00:08:40,740
and this is on Twitter specifically and

00:08:38,729 --> 00:08:42,330
so Twitter has a very extensive internal

00:08:40,740 --> 00:08:44,520
training program you told me that

00:08:42,330 --> 00:08:46,790
twitter has probably had over 5,000 and

00:08:44,520 --> 00:08:49,670
Scala engineers lower than that

00:08:46,790 --> 00:08:52,400
many thousand Scala engineers over the

00:08:49,670 --> 00:08:54,050
course of its existence and can you

00:08:52,400 --> 00:08:56,030
share what works about your internal

00:08:54,050 --> 00:08:57,770
training program for Scala and how other

00:08:56,030 --> 00:09:00,080
companies could benefit from the stuff

00:08:57,770 --> 00:09:01,520
that you've built sure so I want to

00:09:00,080 --> 00:09:03,410
first give credit to the Twitter

00:09:01,520 --> 00:09:05,180
University team they're not here but

00:09:03,410 --> 00:09:06,050
they've run the program I'm not on that

00:09:05,180 --> 00:09:07,790
team

00:09:06,050 --> 00:09:09,890
and there are they're a team of three

00:09:07,790 --> 00:09:12,350
fantastic engineer or instructors sorry

00:09:09,890 --> 00:09:15,290
out in San Francisco and they have the

00:09:12,350 --> 00:09:18,200
the unenviable task of training every

00:09:15,290 --> 00:09:19,910
engineer who comes in to Twitter every

00:09:18,200 --> 00:09:22,580
engineer spends a week in San Francisco

00:09:19,910 --> 00:09:24,590
at what we call flight school coming up

00:09:22,580 --> 00:09:27,740
to speed on Scala as well as Twitter

00:09:24,590 --> 00:09:30,620
stack finagle fenetre and so on so

00:09:27,740 --> 00:09:32,240
that's one tactic that we use to train

00:09:30,620 --> 00:09:35,000
engineers who come into Twitter

00:09:32,240 --> 00:09:36,950
we have several others after that

00:09:35,000 --> 00:09:39,680
program we have a suite of courses that

00:09:36,950 --> 00:09:42,110
engineers can take - I teach two of

00:09:39,680 --> 00:09:44,090
those in the collections library one

00:09:42,110 --> 00:09:46,760
thing that I've learned as an instructor

00:09:44,090 --> 00:09:48,710
at Twitter is that it's absolutely

00:09:46,760 --> 00:09:49,280
critical to provide a very gentle

00:09:48,710 --> 00:09:51,950
on-ramp

00:09:49,280 --> 00:09:54,590
for engineers coming into Scala a lot of

00:09:51,950 --> 00:09:56,180
the engineers I teach are not just a new

00:09:54,590 --> 00:09:58,460
to Scala a lot of them are fresh out of

00:09:56,180 --> 00:10:00,290
college and this is possibly their first

00:09:58,460 --> 00:10:02,780
time ever writing professional software

00:10:00,290 --> 00:10:04,790
so they're understandably scared and

00:10:02,780 --> 00:10:07,370
nervous and still finding their their

00:10:04,790 --> 00:10:09,950
footing so that my basic collections

00:10:07,370 --> 00:10:12,140
class when I say basic I mean it and its

00:10:09,950 --> 00:10:13,520
truest sense my first exercise is how do

00:10:12,140 --> 00:10:16,190
you take the size of a collection I

00:10:13,520 --> 00:10:18,230
start at that level of basic to help

00:10:16,190 --> 00:10:19,490
people find their footing and gain

00:10:18,230 --> 00:10:21,620
confidence even though it's a very

00:10:19,490 --> 00:10:24,350
simple exercise just to get them

00:10:21,620 --> 00:10:26,120
comfortable in the IDE comfortable with

00:10:24,350 --> 00:10:28,550
the language comfortable with with the

00:10:26,120 --> 00:10:29,900
collections library and we build up from

00:10:28,550 --> 00:10:31,850
there and eventually we talk about

00:10:29,900 --> 00:10:35,600
streams and views and iterators and more

00:10:31,850 --> 00:10:37,580
complex concepts and I would also say

00:10:35,600 --> 00:10:39,200
the other big lesson is that when you

00:10:37,580 --> 00:10:40,790
are teaching someone it's important to

00:10:39,200 --> 00:10:42,920
stay hands on keyboard as much as

00:10:40,790 --> 00:10:44,240
possible lecturing someone about the

00:10:42,920 --> 00:10:45,830
collections the library doesn't really

00:10:44,240 --> 00:10:48,470
get the point across so much is asking

00:10:45,830 --> 00:10:50,780
them to pull out a repple pulled out 90

00:10:48,470 --> 00:10:53,240
E and giving them a task to accomplish

00:10:50,780 --> 00:10:55,550
and that those are the tactics that we

00:10:53,240 --> 00:10:58,820
found are most effective and all of our

00:10:55,550 --> 00:11:01,709
classes try to follow the that lesson

00:10:58,820 --> 00:11:03,300
cool and obviously you said that Twitter

00:11:01,709 --> 00:11:05,279
has a team of three people that are

00:11:03,300 --> 00:11:06,750
dedicated full-time to that I'm guessing

00:11:05,279 --> 00:11:08,459
a lot of people in this room don't have

00:11:06,750 --> 00:11:10,170
those kind of resources to dedicate to

00:11:08,459 --> 00:11:11,880
internal training so is there anything

00:11:10,170 --> 00:11:13,170
that you've learned from your experience

00:11:11,880 --> 00:11:14,790
that you know somebody that doesn't have

00:11:13,170 --> 00:11:18,029
a dedicated training team could take

00:11:14,790 --> 00:11:21,060
into their companies that's a good

00:11:18,029 --> 00:11:22,770
question I would say if you don't have

00:11:21,060 --> 00:11:25,770
the resources yourself you can certainly

00:11:22,770 --> 00:11:27,899
hire them there are plenty of people

00:11:25,770 --> 00:11:30,300
here that you can hire to come in and

00:11:27,899 --> 00:11:31,709
and teach these courses for you if you

00:11:30,300 --> 00:11:33,899
don't have the resources to staff them

00:11:31,709 --> 00:11:36,690
yourself and I think that kind of

00:11:33,899 --> 00:11:39,600
hands-on personal instruction

00:11:36,690 --> 00:11:42,420
in my mind helps bring people up to

00:11:39,600 --> 00:11:44,459
speed faster than any other resource

00:11:42,420 --> 00:11:46,070
I'll mention briefly two other tactics

00:11:44,459 --> 00:11:49,529
that we've started experimenting with

00:11:46,070 --> 00:11:51,240
one is we've we're now buying a copy of

00:11:49,529 --> 00:11:53,250
Scala for the impatient for everyone who

00:11:51,240 --> 00:11:54,810
joins my department which is out in

00:11:53,250 --> 00:11:57,540
Colorado so when they sign their offer

00:11:54,810 --> 00:12:00,899
letter we're sending them an e-book copy

00:11:57,540 --> 00:12:04,890
of that another that we're experimenting

00:12:00,899 --> 00:12:06,899
with is we're developing an onboarding

00:12:04,890 --> 00:12:08,579
program that lasts over a quarter so we

00:12:06,899 --> 00:12:10,770
have a program that starts in their

00:12:08,579 --> 00:12:12,839
first week but it's very intensive we're

00:12:10,770 --> 00:12:15,450
now experimenting with 30 hours of

00:12:12,839 --> 00:12:18,000
courses spread over a new hires first

00:12:15,450 --> 00:12:20,250
three months at Twitter to give them a

00:12:18,000 --> 00:12:22,709
gentler on-ramp that's a little more

00:12:20,250 --> 00:12:26,010
spaced out and that they're undertaking

00:12:22,709 --> 00:12:28,790
along with their day-to-day work on real

00:12:26,010 --> 00:12:31,740
production software which I think helps

00:12:28,790 --> 00:12:33,180
helps them better understand how the

00:12:31,740 --> 00:12:37,470
concepts they're learning about Scala

00:12:33,180 --> 00:12:39,270
are applied in our real codebase awesome

00:12:37,470 --> 00:12:41,850
the next question is for Heather and

00:12:39,270 --> 00:12:43,560
Martin you use Scala to teach in a very

00:12:41,850 --> 00:12:45,779
academic setting and so I'm wondering

00:12:43,560 --> 00:12:48,209
what it's like to teach students

00:12:45,779 --> 00:12:49,910
specifically with Scala and how that

00:12:48,209 --> 00:12:54,230
might differ from teaching other

00:12:49,910 --> 00:12:54,230
traditionally use languages and academia

00:12:54,350 --> 00:13:00,329
so what do you mean with tradition

00:12:59,010 --> 00:13:02,550
language is traditionally used in

00:13:00,329 --> 00:13:05,390
academia I just don't think that you see

00:13:02,550 --> 00:13:07,680
Scala in a lot of universities oh yeah

00:13:05,390 --> 00:13:09,660
there's not as much curriculum out there

00:13:07,680 --> 00:13:11,910
that exists

00:13:09,660 --> 00:13:13,620
right so I my experiences only Street

00:13:11,910 --> 00:13:17,100
since color in second year after they

00:13:13,620 --> 00:13:20,430
had a year of Java so basically my job

00:13:17,100 --> 00:13:23,370
is to say well forget most of what you

00:13:20,430 --> 00:13:24,210
learned about Java and essentially start

00:13:23,370 --> 00:13:27,020
from scratch

00:13:24,210 --> 00:13:31,470
recursion immutable data and so on and

00:13:27,020 --> 00:13:33,120
that works actually pretty well usually

00:13:31,470 --> 00:13:35,130
students what was this because they

00:13:33,120 --> 00:13:36,900
would say well it's academic only and

00:13:35,130 --> 00:13:38,370
they I can just tell them well look look

00:13:36,900 --> 00:13:39,930
at all the jobs out there and the

00:13:38,370 --> 00:13:43,970
salaries and things like that so that

00:13:39,930 --> 00:13:46,830
cures them and they take an interest and

00:13:43,970 --> 00:13:48,360
what the academic setting is much more

00:13:46,830 --> 00:13:50,460
than an industrial setting I guess is

00:13:48,360 --> 00:13:52,500
that you try to really have minimal

00:13:50,460 --> 00:13:55,140
examples super super simple you might

00:13:52,500 --> 00:13:57,450
say academic examples because once you

00:13:55,140 --> 00:14:00,240
start a real API out there it's probably

00:13:57,450 --> 00:14:01,950
already so essentially there there's all

00:14:00,240 --> 00:14:03,270
this complexity and there which has to

00:14:01,950 --> 00:14:06,150
do with dealing with real world

00:14:03,270 --> 00:14:07,650
situations which detracts if you do it

00:14:06,150 --> 00:14:09,150
in a classroom setting it attracts the

00:14:07,650 --> 00:14:12,240
students so we really try to sort of

00:14:09,150 --> 00:14:14,250
find something as simple as possible and

00:14:12,240 --> 00:14:16,770
then drive the point home to teach it

00:14:14,250 --> 00:14:18,810
the most important part really is to

00:14:16,770 --> 00:14:21,750
find good examples there do you have an

00:14:18,810 --> 00:14:28,130
example of your examples do you have an

00:14:21,750 --> 00:14:31,110
example of your examples well so yeah so

00:14:28,130 --> 00:14:32,460
for the first MOOC that we teach at the

00:14:31,110 --> 00:14:34,610
first course that we teach this heavily

00:14:32,460 --> 00:14:36,600
inspired by the Abelson Sussman book

00:14:34,610 --> 00:14:39,990
structure and interpretation of computer

00:14:36,600 --> 00:14:41,610
programs a classic book so in the second

00:14:39,990 --> 00:14:44,010
week we have this example with

00:14:41,610 --> 00:14:46,410
essentially six points which where the

00:14:44,010 --> 00:14:49,350
example is we're computing square roots

00:14:46,410 --> 00:14:51,360
and doing so with higher-order functions

00:14:49,350 --> 00:14:54,060
and then it goes all the way to fix

00:14:51,360 --> 00:14:55,860
points and then it goes to representing

00:14:54,060 --> 00:14:58,920
sets as functions and things like that

00:14:55,860 --> 00:15:00,570
and that worked reasonably well at EPFL

00:14:58,920 --> 00:15:02,610
and when we translated it to the world

00:15:00,570 --> 00:15:04,200
at large people revolted and they said

00:15:02,610 --> 00:15:06,090
well this is way too mathematical who's

00:15:04,200 --> 00:15:09,000
interested in this sort of stuff and

00:15:06,090 --> 00:15:12,000
then Heather actually put a face on it

00:15:09,000 --> 00:15:14,340
and it said she actually covered it in

00:15:12,000 --> 00:15:16,080
tweets so she said essentially the sets

00:15:14,340 --> 00:15:17,760
are now sets about tweets and Twitter

00:15:16,080 --> 00:15:19,980
things and that made it much more

00:15:17,760 --> 00:15:21,720
acceptable so if you have to you have to

00:15:19,980 --> 00:15:22,750
see both sides but I guess with

00:15:21,720 --> 00:15:25,660
university students

00:15:22,750 --> 00:15:27,190
it can be a bit harsher on them I think

00:15:25,660 --> 00:15:28,210
that's a good transition to talk about

00:15:27,190 --> 00:15:31,840
some of the things that you've had done

00:15:28,210 --> 00:15:33,880
a Heather at Northeastern yeah so I mean

00:15:31,840 --> 00:15:37,720
I so the context that I have sort of

00:15:33,880 --> 00:15:40,630
teaching in Scala is at EPFL and you

00:15:37,720 --> 00:15:42,100
know I've I've T aid for the functional

00:15:40,630 --> 00:15:43,570
programming course so the second-year

00:15:42,100 --> 00:15:45,190
students that he's talking about I was I

00:15:43,570 --> 00:15:47,050
was in on that and then I taught this

00:15:45,190 --> 00:15:49,180
course called was it concurrency and

00:15:47,050 --> 00:15:50,860
parallelism I guess and so that's I

00:15:49,180 --> 00:15:51,910
think a third-year student they had

00:15:50,860 --> 00:15:53,050
already taken this functional

00:15:51,910 --> 00:15:54,130
programming in Scala class so they

00:15:53,050 --> 00:15:56,530
already knew scale and then they had to

00:15:54,130 --> 00:16:00,460
start trawl solving some you know ok

00:15:56,530 --> 00:16:04,060
here race conditions have fun and then

00:16:00,460 --> 00:16:06,310
at Northeastern I picked up senior

00:16:04,060 --> 00:16:09,460
students that are you know in their last

00:16:06,310 --> 00:16:11,200
semester or maybe junior students save

00:16:09,460 --> 00:16:12,790
about a year to go before they would be

00:16:11,200 --> 00:16:14,470
graduating and a lot of them had already

00:16:12,790 --> 00:16:16,270
gone off to industry and had some work

00:16:14,470 --> 00:16:17,920
experience they've taken maybe two

00:16:16,270 --> 00:16:19,780
semesters of like internships or

00:16:17,920 --> 00:16:21,160
whatever so they also had sort of you

00:16:19,780 --> 00:16:22,600
know they'd learned functional

00:16:21,160 --> 00:16:24,180
programming in the context of like

00:16:22,600 --> 00:16:25,990
racket which is kind of a scheme

00:16:24,180 --> 00:16:27,270
programming language right but today

00:16:25,990 --> 00:16:29,740
they know some functional programming

00:16:27,270 --> 00:16:30,910
then they use Python or Java or

00:16:29,740 --> 00:16:32,020
something else in some company that

00:16:30,910 --> 00:16:34,390
they've went and worked with so they

00:16:32,020 --> 00:16:36,820
weren't completely you know brand new to

00:16:34,390 --> 00:16:39,100
it but you know these are the groups of

00:16:36,820 --> 00:16:40,810
people plus the Scala bridge folks the

00:16:39,100 --> 00:16:42,880
the women who'd like to learn how to

00:16:40,810 --> 00:16:44,050
program these are sort of these are the

00:16:42,880 --> 00:16:47,650
different sort of groups that I've

00:16:44,050 --> 00:16:50,410
taught and I have to say that I noticed

00:16:47,650 --> 00:16:53,230
kind of the same thing regardless of you

00:16:50,410 --> 00:16:54,670
know the bachelor sorry the senior level

00:16:53,230 --> 00:16:59,230
students at Northeastern who had learned

00:16:54,670 --> 00:17:01,330
scheme or the students at EPFL in in

00:16:59,230 --> 00:17:02,860
both cases where I've taught these

00:17:01,330 --> 00:17:05,290
different groups of students with more

00:17:02,860 --> 00:17:07,270
and with less experience the same thing

00:17:05,290 --> 00:17:08,890
helps where you you know you take

00:17:07,270 --> 00:17:10,660
something that is perhaps cute and

00:17:08,890 --> 00:17:12,610
academic you keep it still cute and

00:17:10,660 --> 00:17:13,839
academic so that they can focus on sort

00:17:12,610 --> 00:17:15,370
of like the gist of the problem that

00:17:13,839 --> 00:17:17,890
they're trying to solve but you give

00:17:15,370 --> 00:17:19,660
them a way to connect to it so you know

00:17:17,890 --> 00:17:20,650
the the tweets thing was an example like

00:17:19,660 --> 00:17:22,600
if I just give you a bunch of math

00:17:20,650 --> 00:17:24,280
perhaps you can't really get personal

00:17:22,600 --> 00:17:26,050
with that but if I can give you like

00:17:24,280 --> 00:17:27,699
some saucy problem where you're like

00:17:26,050 --> 00:17:29,920
trying to say like oh yeah Android is

00:17:27,699 --> 00:17:32,080
better than the nioh s or something you

00:17:29,920 --> 00:17:34,210
know they get more into it and so I've

00:17:32,080 --> 00:17:36,170
found especially when I'm teaching for

00:17:34,210 --> 00:17:38,120
example these students where I would

00:17:36,170 --> 00:17:40,490
at Northeastern the goal was to kind of

00:17:38,120 --> 00:17:43,850
get them into using spark and then throw

00:17:40,490 --> 00:17:45,290
them into AWS and be like have fun and I

00:17:43,850 --> 00:17:46,370
have to teach some Scala first I teach

00:17:45,290 --> 00:17:47,720
in Scala in a week

00:17:46,370 --> 00:17:49,280
like I said they already have

00:17:47,720 --> 00:17:52,490
programming experience but I start with

00:17:49,280 --> 00:17:55,340
those cute examples I give them lots of

00:17:52,490 --> 00:17:57,260
hands-on you know usually things that I

00:17:55,340 --> 00:17:59,180
pulled from you pfl what we taught our

00:17:57,260 --> 00:18:01,220
undergraduates there or other examples

00:17:59,180 --> 00:18:03,200
that I found or came up with over the

00:18:01,220 --> 00:18:04,610
years and it's sort of like an intensive

00:18:03,200 --> 00:18:06,320
Skylab bootcamp but still those cute

00:18:04,610 --> 00:18:09,050
little examples that have a face on them

00:18:06,320 --> 00:18:11,390
and then I basically try to relate that

00:18:09,050 --> 00:18:13,820
to the api's and spark so lots of

00:18:11,390 --> 00:18:15,380
collections heavy stuff things that you

00:18:13,820 --> 00:18:17,120
know okay you know you've seen list

00:18:15,380 --> 00:18:18,620
comprehensions right okay well you know

00:18:17,120 --> 00:18:20,630
for comprehensions that's that's what we

00:18:18,620 --> 00:18:22,100
have in Scala and you know this is what

00:18:20,630 --> 00:18:24,080
they look like and actually hey when you

00:18:22,100 --> 00:18:25,370
have spark it's the same kind of thing

00:18:24,080 --> 00:18:26,690
you can use higher order functions and

00:18:25,370 --> 00:18:29,360
all of that it's the same general

00:18:26,690 --> 00:18:30,860
concept so I you know but distributed so

00:18:29,360 --> 00:18:32,420
I always actually take the same approach

00:18:30,860 --> 00:18:33,740
even if I'm teaching people that are

00:18:32,420 --> 00:18:35,810
even more advanced or I've already had

00:18:33,740 --> 00:18:39,740
some functional programming experience

00:18:35,810 --> 00:18:41,630
in the past as well so for me you know

00:18:39,740 --> 00:18:44,360
even translating some other language

00:18:41,630 --> 00:18:46,220
into Scala it's it's you know keep the

00:18:44,360 --> 00:18:47,810
examples simple enough but not too

00:18:46,220 --> 00:18:48,740
simple and then give them a way to

00:18:47,810 --> 00:18:50,000
relate to it

00:18:48,740 --> 00:18:52,580
because you don't want the problems to

00:18:50,000 --> 00:18:54,350
abstract it makes it less accessible for

00:18:52,580 --> 00:18:56,570
somebody who maybe is not a math whiz

00:18:54,350 --> 00:19:00,410
for example or didn't grow up loving

00:18:56,570 --> 00:19:02,330
math as a follow up to that I mean

00:19:00,410 --> 00:19:04,010
Martin you are I think it's fair to say

00:19:02,330 --> 00:19:06,590
intimately familiar with the scholar

00:19:04,010 --> 00:19:08,510
language you've been working with it for

00:19:06,590 --> 00:19:11,630
so long it's your you know brainchild

00:19:08,510 --> 00:19:13,760
how do you teach someone at a very

00:19:11,630 --> 00:19:15,410
beginner level without getting too deep

00:19:13,760 --> 00:19:18,950
into all the things that you obviously

00:19:15,410 --> 00:19:21,080
know so I don't really have a lot of

00:19:18,950 --> 00:19:22,400
experience with non-programmers and

00:19:21,080 --> 00:19:24,620
that's something that I think would

00:19:22,400 --> 00:19:28,250
would thing is really interesting if we

00:19:24,620 --> 00:19:30,020
could essentially how non-programmers

00:19:28,250 --> 00:19:31,490
would react to to Scott as a first

00:19:30,020 --> 00:19:33,260
language I know there are some courses

00:19:31,490 --> 00:19:35,570
out there and that would be very

00:19:33,260 --> 00:19:38,150
interested to find out more of what they

00:19:35,570 --> 00:19:40,340
do and the techniques so I only my

00:19:38,150 --> 00:19:42,110
experience is really only to essentially

00:19:40,340 --> 00:19:43,850
traditional programmers typically people

00:19:42,110 --> 00:19:44,120
know in Java or Python or something like

00:19:43,850 --> 00:19:46,400
that

00:19:44,120 --> 00:19:48,590
and then what

00:19:46,400 --> 00:19:51,680
teach them and I hear I think that what

00:19:48,590 --> 00:19:54,320
I do is really not use a lot of the

00:19:51,680 --> 00:19:56,360
features I just really do the basics do

00:19:54,320 --> 00:20:00,530
recursion and pattern matching do

00:19:56,360 --> 00:20:01,760
collections and and then stop and so not

00:20:00,530 --> 00:20:05,150
be too ambitious

00:20:01,760 --> 00:20:07,220
so I actually regret that I never taught

00:20:05,150 --> 00:20:09,320
an advanced Scala course and I would

00:20:07,220 --> 00:20:12,440
very much like love to do that so maybe

00:20:09,320 --> 00:20:14,510
maybe next year something but I think I

00:20:12,440 --> 00:20:16,010
guess when Scala 3 comes out and that's

00:20:14,510 --> 00:20:18,740
that's what I'm gonna do because that's

00:20:16,010 --> 00:20:20,570
all the shiny new features they need to

00:20:18,740 --> 00:20:24,320
be taught and then then I'll jump into

00:20:20,570 --> 00:20:25,880
it and go overboard can I share an

00:20:24,320 --> 00:20:27,920
anecdotal story from teach from doing a

00:20:25,880 --> 00:20:30,760
Scala bridge it's one of my favorite

00:20:27,920 --> 00:20:33,560
little stories ok not super long I swear

00:20:30,760 --> 00:20:35,660
so there was I was organizing a Scala

00:20:33,560 --> 00:20:37,880
bridge in Switzerland and I knew

00:20:35,660 --> 00:20:39,830
somebody and in in Switzerland she came

00:20:37,880 --> 00:20:41,960
to me she said I have two nieces they

00:20:39,830 --> 00:20:43,130
don't even have a computer I'd like to

00:20:41,960 --> 00:20:44,600
teach them how to program it would be

00:20:43,130 --> 00:20:45,830
really cool like she she does she's

00:20:44,600 --> 00:20:47,090
actually a scala developer and she's

00:20:45,830 --> 00:20:49,370
like I would like my niece's to learn

00:20:47,090 --> 00:20:51,140
this they're 16 I'm not sure they can do

00:20:49,370 --> 00:20:53,030
it actually they've only ever used an

00:20:51,140 --> 00:20:55,460
iPad so I'm not sure if they're even

00:20:53,030 --> 00:20:57,620
going to understand you know compilers

00:20:55,460 --> 00:20:59,150
right because I have a file I put it put

00:20:57,620 --> 00:21:01,210
it into a compiler get a different kind

00:20:59,150 --> 00:21:03,170
of file out there just like using iPads

00:21:01,210 --> 00:21:04,040
everything is synced in the cloud like

00:21:03,170 --> 00:21:06,350
they're not going to understand this

00:21:04,040 --> 00:21:08,810
whole process we're so scared and then

00:21:06,350 --> 00:21:10,220
you know okay well that's all right well

00:21:08,810 --> 00:21:12,110
we'll just handhold them a little bit

00:21:10,220 --> 00:21:13,310
more don't worry and at the Scala bridge

00:21:12,110 --> 00:21:14,810
that I organized there were a lot of

00:21:13,310 --> 00:21:16,910
women who had experience with JavaScript

00:21:14,810 --> 00:21:18,950
some people who did a lot of you know

00:21:16,910 --> 00:21:20,480
maybe they did some sort of processing

00:21:18,950 --> 00:21:21,590
of stuff in spreadsheets and whatnot so

00:21:20,480 --> 00:21:23,120
they had maybe some experience in

00:21:21,590 --> 00:21:26,420
another language or some kind of

00:21:23,120 --> 00:21:28,310
spreadsheet sort of experience and some

00:21:26,420 --> 00:21:32,780
some men came also were JavaScript

00:21:28,310 --> 00:21:35,120
developers and I if anybody has looked

00:21:32,780 --> 00:21:39,500
at the Scala bridge curriculum it's it's

00:21:35,120 --> 00:21:42,080
creative Scala it's it's it's it's by no

00:21:39,500 --> 00:21:44,870
Welsh right I don't know if he's here

00:21:42,080 --> 00:21:46,910
but I highly recommend all it's super

00:21:44,870 --> 00:21:48,860
cool and what's really nice about this

00:21:46,910 --> 00:21:50,210
is that it teaches these functional

00:21:48,860 --> 00:21:52,670
concepts but it does it in a visual way

00:21:50,210 --> 00:21:53,840
so you don't again it's like I'm not I

00:21:52,670 --> 00:21:55,460
don't have to introduce programming to

00:21:53,840 --> 00:21:57,050
you by making you make a calculator I

00:21:55,460 --> 00:21:58,460
can teach programming to you by making

00:21:57,050 --> 00:22:00,110
you draw a picture and that's that's a

00:21:58,460 --> 00:22:01,220
super accessible way to

00:22:00,110 --> 00:22:02,270
people who have no experience of

00:22:01,220 --> 00:22:06,320
programming and so these two teenage

00:22:02,270 --> 00:22:07,730
girls show up and it turned out that you

00:22:06,320 --> 00:22:08,900
know the the workshop was like I don't

00:22:07,730 --> 00:22:12,110
know eight or nine hours or something

00:22:08,900 --> 00:22:13,880
that's pretty long and they just blew

00:22:12,110 --> 00:22:15,890
through the whole thing in four hours it

00:22:13,880 --> 00:22:18,020
was no it was so easy for them and all

00:22:15,890 --> 00:22:20,270
these like adult men who had been using

00:22:18,020 --> 00:22:23,420
javascript for years were stuck in like

00:22:20,270 --> 00:22:25,100
the first two or three exercises because

00:22:23,420 --> 00:22:26,510
they were really caught up on you

00:22:25,100 --> 00:22:28,130
debility like well how do I change that

00:22:26,510 --> 00:22:29,929
thing I just I just assigned it but I

00:22:28,130 --> 00:22:31,760
want to update it like no no that's not

00:22:29,929 --> 00:22:33,530
the point and these girls were like what

00:22:31,760 --> 00:22:35,720
why would you do that you just transform

00:22:33,530 --> 00:22:37,100
it why I don't understand they were

00:22:35,720 --> 00:22:38,990
asking them why they would do that and

00:22:37,100 --> 00:22:40,280
they were like amazing and we were all

00:22:38,990 --> 00:22:42,020
just like what do we do and then we

00:22:40,280 --> 00:22:43,669
taught them get their like you know

00:22:42,020 --> 00:22:46,490
because they were bored and the exercise

00:22:43,669 --> 00:22:48,320
ol thing wasn't over yet so I'm not I

00:22:46,490 --> 00:22:49,490
don't want to say that you know okay you

00:22:48,320 --> 00:22:50,870
know functional programming is the right

00:22:49,490 --> 00:22:52,220
way but it turned out to be really

00:22:50,870 --> 00:22:54,290
intuitive in a way that we didn't I

00:22:52,220 --> 00:22:55,190
never expected especially for like

00:22:54,290 --> 00:22:57,650
sixteen-year-old girls who didn't know

00:22:55,190 --> 00:22:59,150
what a file was and that for them to get

00:22:57,650 --> 00:23:01,640
through the whole curriculum in half the

00:22:59,150 --> 00:23:04,040
time it just shows that I think that you

00:23:01,640 --> 00:23:06,530
know I don't know if to somebody with a

00:23:04,040 --> 00:23:09,110
complete like empty slate you know

00:23:06,530 --> 00:23:11,120
teaching them in a different way it

00:23:09,110 --> 00:23:13,400
might not be that hard actually they and

00:23:11,120 --> 00:23:14,750
they you know they were like answering

00:23:13,400 --> 00:23:16,010
to these other people who had more

00:23:14,750 --> 00:23:17,000
experience explaining things to them

00:23:16,010 --> 00:23:19,040
well that means you can't mess it up

00:23:17,000 --> 00:23:21,200
later like I didn't tell them that they

00:23:19,040 --> 00:23:23,150
just deferred that I know that's great

00:23:21,200 --> 00:23:24,650
it was more intuitive right so this was

00:23:23,150 --> 00:23:25,790
this was a really cool experience and it

00:23:24,650 --> 00:23:27,410
was I wouldn't have done it I would have

00:23:25,790 --> 00:23:28,580
had this experience unless we did the

00:23:27,410 --> 00:23:30,140
Scala bridge thing where we had these

00:23:28,580 --> 00:23:32,330
complete beginners we're just like okay

00:23:30,140 --> 00:23:33,440
can you digest this I don't know there's

00:23:32,330 --> 00:23:34,070
an experiment and it was really

00:23:33,440 --> 00:23:37,640
surprising

00:23:34,070 --> 00:23:39,230
excellent I love that story Mike you did

00:23:37,640 --> 00:23:41,809
some research on what motivates people

00:23:39,230 --> 00:23:43,730
to learn Scala can you share your

00:23:41,809 --> 00:23:46,010
findings and was there anything in there

00:23:43,730 --> 00:23:50,510
that surprised you yes

00:23:46,010 --> 00:23:52,970
so the survey was made for more

00:23:50,510 --> 00:23:55,610
experienced programmers that already are

00:23:52,970 --> 00:23:56,150
in their work the authentic work in Java

00:23:55,610 --> 00:23:59,710
Python

00:23:56,150 --> 00:24:01,880
I think defer that to most popular

00:23:59,710 --> 00:24:05,330
languages of people who answered my

00:24:01,880 --> 00:24:09,669
questions and I wanted to know like what

00:24:05,330 --> 00:24:12,200
are AF of I T they work in what are

00:24:09,669 --> 00:24:13,490
important for them if they want to learn

00:24:12,200 --> 00:24:15,980
another language not

00:24:13,490 --> 00:24:19,160
not specially caliber well of course it

00:24:15,980 --> 00:24:21,470
was somehow pointed out then what if

00:24:19,160 --> 00:24:22,820
interesting for them and what would

00:24:21,470 --> 00:24:26,990
motivate them to learn this new language

00:24:22,820 --> 00:24:28,730
and also like what are their methods of

00:24:26,990 --> 00:24:32,450
learning because of course at some point

00:24:28,730 --> 00:24:35,090
you don't rely on us you passed

00:24:32,450 --> 00:24:37,400
University you just have to find your

00:24:35,090 --> 00:24:39,470
own way to to learn new things so the

00:24:37,400 --> 00:24:42,710
two things that were quite interesting

00:24:39,470 --> 00:24:45,470
for me was that creating that survey I

00:24:42,710 --> 00:24:49,490
had some kind of a hidden agenda that I

00:24:45,470 --> 00:24:50,929
wanted to find on earth answer if we're

00:24:49,490 --> 00:24:53,179
talking a lot about functional

00:24:50,929 --> 00:24:55,940
programming but I wanted to find out if

00:24:53,179 --> 00:24:56,960
this is only our hype like we are so

00:24:55,940 --> 00:25:00,950
interested in functional programming

00:24:56,960 --> 00:25:02,900
about everyone else's like me and now I

00:25:00,950 --> 00:25:04,670
see that many people who are thinking

00:25:02,900 --> 00:25:07,360
about learning another language actually

00:25:04,670 --> 00:25:11,300
are interested in functional programming

00:25:07,360 --> 00:25:13,280
but I think okay so maybe I'll just talk

00:25:11,300 --> 00:25:16,910
more about it and then I put I'll talk

00:25:13,280 --> 00:25:22,850
about the other point so but it seems

00:25:16,910 --> 00:25:26,330
that Scala is the stereotype that we

00:25:22,850 --> 00:25:29,179
have this quite steep learning curve and

00:25:26,330 --> 00:25:31,880
if we if someone wants to learn Scala

00:25:29,179 --> 00:25:35,090
and and this she's ambitious and want to

00:25:31,880 --> 00:25:36,890
learn some sort for coming together with

00:25:35,090 --> 00:25:40,640
Scala then this learning curve becomes

00:25:36,890 --> 00:25:43,130
even steeper so it's important not to

00:25:40,640 --> 00:25:45,140
scare these people away like if we have

00:25:43,130 --> 00:25:47,450
this we have this sort of like an

00:25:45,140 --> 00:25:49,970
intermediate gap that we have some basic

00:25:47,450 --> 00:25:51,950
examples at the beginning some kind of

00:25:49,970 --> 00:25:55,250
what to do with collections how to do a

00:25:51,950 --> 00:25:59,050
flat map and then does not let go it

00:25:55,250 --> 00:26:02,840
goes up and then we have some very very

00:25:59,050 --> 00:26:05,510
abstract very melodic discussions about

00:26:02,840 --> 00:26:08,090
very specific stats very specific

00:26:05,510 --> 00:26:09,530
libraries and there's hardly well maybe

00:26:08,090 --> 00:26:13,970
there is something in between but it's

00:26:09,530 --> 00:26:15,679
much less material so in order to not to

00:26:13,970 --> 00:26:18,230
waste all that interest and talk

00:26:15,679 --> 00:26:21,290
motivations I think we we thought as a

00:26:18,230 --> 00:26:22,640
community invest more time in creating

00:26:21,290 --> 00:26:25,580
some materials something like a

00:26:22,640 --> 00:26:26,429
functional programming 101 or something

00:26:25,580 --> 00:26:28,610
like I don't know

00:26:26,429 --> 00:26:32,399
from functional programming for mortals

00:26:28,610 --> 00:26:35,700
so that's one point and another one is

00:26:32,399 --> 00:26:37,950
that how they learn if you already did

00:26:35,700 --> 00:26:42,450
some projects in other languages then it

00:26:37,950 --> 00:26:47,190
seems that most of people are very keen

00:26:42,450 --> 00:26:49,590
to learn a new language not by going to

00:26:47,190 --> 00:26:51,059
those all all those examples but by

00:26:49,590 --> 00:26:54,529
actually writing something by themselves

00:26:51,059 --> 00:26:57,059
like starting a small project so I

00:26:54,529 --> 00:27:00,299
thought that I'm one of the I don't know

00:26:57,059 --> 00:27:05,940
a few people who do that but yeah so

00:27:00,299 --> 00:27:08,850
that was the most people chose the most

00:27:05,940 --> 00:27:10,980
and also that they liked articles and

00:27:08,850 --> 00:27:15,029
tutorials in the written form and much

00:27:10,980 --> 00:27:17,249
less much fewer people answered that

00:27:15,029 --> 00:27:20,749
they liked like video tutorials of

00:27:17,249 --> 00:27:23,429
course on Coursera and so on so

00:27:20,749 --> 00:27:25,679
excellent I'm gonna cut you off there

00:27:23,429 --> 00:27:28,499
okay because your research is available

00:27:25,679 --> 00:27:30,840
so we can share that online I put it on

00:27:28,499 --> 00:27:32,279
Twitter you can with cosmic Scala days

00:27:30,840 --> 00:27:33,840
you can take yeah so we'll definitely

00:27:32,279 --> 00:27:35,389
share that after this panel there's some

00:27:33,840 --> 00:27:37,379
really interesting results in there

00:27:35,389 --> 00:27:38,610
probably time for one more question

00:27:37,379 --> 00:27:41,509
before we hand it over to the audience

00:27:38,610 --> 00:27:44,190
so what's your approach to introducing

00:27:41,509 --> 00:27:46,679
functional programming concepts things

00:27:44,190 --> 00:27:48,600
like that get a little buzzed wordy and

00:27:46,679 --> 00:27:50,759
a little jargony things like mono aids

00:27:48,600 --> 00:27:52,470
and functors when do you introduce them

00:27:50,759 --> 00:27:56,460
if at all and what motivates you to

00:27:52,470 --> 00:27:58,080
introduce them yeah I can't answer the

00:27:56,460 --> 00:27:59,460
part about monoids and semigroups

00:27:58,080 --> 00:28:01,259
because those are the two concepts we

00:27:59,460 --> 00:28:02,429
introduced to data engineers they are

00:28:01,259 --> 00:28:04,980
most relevant to you right in the

00:28:02,429 --> 00:28:08,519
context of MapReduce and we introduced

00:28:04,980 --> 00:28:09,749
it in a more like friendly way is so

00:28:08,519 --> 00:28:12,419
we're doing what counting like

00:28:09,749 --> 00:28:15,259
everybody's seen like a spark whatever

00:28:12,419 --> 00:28:18,059
so starting with that and then we can

00:28:15,259 --> 00:28:19,950
visualize how they work out a bunch of

00:28:18,059 --> 00:28:23,580
machines thousands of them and then we

00:28:19,950 --> 00:28:25,230
can use some more approachable example

00:28:23,580 --> 00:28:28,980
like the one that we use in the class as

00:28:25,230 --> 00:28:30,779
a juicer so you know mappers making

00:28:28,980 --> 00:28:33,269
juicers send them over to the reducers

00:28:30,779 --> 00:28:35,580
keep you know mixing them and then we

00:28:33,269 --> 00:28:37,320
gradually introduce the concept of like

00:28:35,580 --> 00:28:39,450
associative and commutative operations

00:28:37,320 --> 00:28:40,590
and then it turns out just you know

00:28:39,450 --> 00:28:43,649
being the monoid

00:28:40,590 --> 00:28:46,409
and semigroups also be involved and I I

00:28:43,649 --> 00:28:47,940
mean I think it really depends on the

00:28:46,409 --> 00:28:51,360
context of your you know that your

00:28:47,940 --> 00:28:53,539
application in the data the word that in

00:28:51,360 --> 00:28:55,799
my my experience those are the only two

00:28:53,539 --> 00:28:57,480
categories theory concepts at the data

00:28:55,799 --> 00:28:59,249
engine you really need to know and most

00:28:57,480 --> 00:29:00,570
of the other ones are not as very

00:28:59,249 --> 00:29:02,399
relevant like the scenes we talked about

00:29:00,570 --> 00:29:04,830
like everyone's talking about a free

00:29:02,399 --> 00:29:07,320
monads or tag let's final I mean I just

00:29:04,830 --> 00:29:09,090
haven't really found an application for

00:29:07,320 --> 00:29:11,850
application user maybe for library user

00:29:09,090 --> 00:29:15,179
to some extent but for for application

00:29:11,850 --> 00:29:17,519
user not as much everybody knows my

00:29:15,179 --> 00:29:20,190
opinion on free monads Ryan do you have

00:29:17,519 --> 00:29:22,080
any thoughts on this sure this is one

00:29:20,190 --> 00:29:24,840
thing I think the scala ecosystem has

00:29:22,080 --> 00:29:27,269
done well is introducing monadic

00:29:24,840 --> 00:29:29,580
concepts like option or future without

00:29:27,269 --> 00:29:32,700
actually calling them monads at least in

00:29:29,580 --> 00:29:34,619
the early days I think that is probably

00:29:32,700 --> 00:29:36,840
Scala's greatest gift to functional

00:29:34,619 --> 00:29:40,169
programming is not calling those things

00:29:36,840 --> 00:29:43,590
by their category theory names

00:29:40,169 --> 00:29:45,570
conversely something that I think we we

00:29:43,590 --> 00:29:48,149
have fallen down on is when someone

00:29:45,570 --> 00:29:49,559
first tries to combine options and

00:29:48,149 --> 00:29:51,299
futures in the for comprehension and

00:29:49,559 --> 00:29:53,249
they land on a stack overflow question

00:29:51,299 --> 00:29:57,840
the answer to which is monad

00:29:53,249 --> 00:29:59,249
transformers and and so when when I am

00:29:57,840 --> 00:30:03,389
trying to help someone who's in this

00:29:59,249 --> 00:30:05,100
situation I will generally guide them

00:30:03,389 --> 00:30:08,009
away from from the more functional

00:30:05,100 --> 00:30:10,740
answer and I generally in my courses I

00:30:08,009 --> 00:30:14,399
never call things ma nodes or monads I

00:30:10,740 --> 00:30:16,110
just I introducing someone to these

00:30:14,399 --> 00:30:18,090
concepts through examples as Heather

00:30:16,110 --> 00:30:20,490
said examples first jargon second I

00:30:18,090 --> 00:30:25,559
think is absolutely the the only way to

00:30:20,490 --> 00:30:30,360
do it I just want to make a plea here

00:30:25,559 --> 00:30:33,029
which is saying I think we are in danger

00:30:30,360 --> 00:30:35,279
of actually misusing the name functional

00:30:33,029 --> 00:30:37,980
programming so function programming is

00:30:35,279 --> 00:30:39,869
programming with functions and I'm

00:30:37,980 --> 00:30:41,730
completely willing to accept that these

00:30:39,869 --> 00:30:43,110
are mathematical functions so without

00:30:41,730 --> 00:30:45,330
side effects and that's what it is

00:30:43,110 --> 00:30:48,539
function programming is not necessarily

00:30:45,330 --> 00:30:50,789
to put to essentially use monads or mana

00:30:48,539 --> 00:30:52,179
transformers or closely or the whole

00:30:50,789 --> 00:30:53,679
categorical thing that

00:30:52,179 --> 00:30:55,269
different that you can call it

00:30:53,679 --> 00:30:57,639
categorical programming or maybe

00:30:55,269 --> 00:30:59,619
fundamental functions and fundamentalist

00:30:57,639 --> 00:31:01,389
function programming but functional

00:30:59,619 --> 00:31:07,419
programming is much much larger than

00:31:01,389 --> 00:31:09,399
that otherwise I mean no programming get

00:31:07,419 --> 00:31:12,639
eternity in people did you say function

00:31:09,399 --> 00:31:14,289
programming is that an ml camo lists

00:31:12,639 --> 00:31:15,970
there are not functional languages

00:31:14,289 --> 00:31:18,009
because they use none of that and I

00:31:15,970 --> 00:31:20,440
think that's incredibly exclusive and we

00:31:18,009 --> 00:31:22,149
shouldn't make form fall into this trap

00:31:20,440 --> 00:31:24,369
to essentially reserve function

00:31:22,149 --> 00:31:25,779
programming for essentially programming

00:31:24,369 --> 00:31:27,940
with essentially higher kind of

00:31:25,779 --> 00:31:30,100
abstractions and design patterns these

00:31:27,940 --> 00:31:32,409
things definitely have their place so I

00:31:30,100 --> 00:31:34,929
see them as essentially when you run

00:31:32,409 --> 00:31:38,049
your head ten times against future and

00:31:34,929 --> 00:31:40,539
option and we convert it to optional

00:31:38,049 --> 00:31:42,549
future or more complicated things like

00:31:40,539 --> 00:31:45,309
that then you start to see patterns and

00:31:42,549 --> 00:31:47,980
we say well sometimes these libraries

00:31:45,309 --> 00:31:50,619
and type classes they actually can help

00:31:47,980 --> 00:31:53,019
you over there and but for teaching it's

00:31:50,619 --> 00:31:54,850
a disaster to put that first so it's

00:31:53,019 --> 00:31:56,590
it's just like teaching design patterns

00:31:54,850 --> 00:31:58,240
as an intro to object-oriented program

00:31:56,590 --> 00:32:00,159
and people will get their head full with

00:31:58,240 --> 00:32:02,049
charge and before they see essentially

00:32:00,159 --> 00:32:04,840
simple cases and they will essentially

00:32:02,049 --> 00:32:06,850
try to apply very complicated and very

00:32:04,840 --> 00:32:08,679
powerful things because they think

00:32:06,850 --> 00:32:09,970
that's the answer for essentially a

00:32:08,679 --> 00:32:12,249
simple problem they're trying to solve

00:32:09,970 --> 00:32:13,539
without them the end understanding

00:32:12,249 --> 00:32:15,639
anything so I think it's very very

00:32:13,539 --> 00:32:17,230
important to say well these things we

00:32:15,639 --> 00:32:19,509
have to introduce them but we have to

00:32:17,230 --> 00:32:22,179
introduce em light when we talk a bit

00:32:19,509 --> 00:32:24,429
essentially about large systems and the

00:32:22,179 --> 00:32:27,730
equivalent of design patterns I think

00:32:24,429 --> 00:32:32,860
it's also convenient to you know like as

00:32:27,730 --> 00:32:34,509
you said okay Mona I'm sorry option and

00:32:32,860 --> 00:32:35,710
future and these kinds of things you

00:32:34,509 --> 00:32:37,240
know I just use these things for a

00:32:35,710 --> 00:32:39,070
little while it's fine don't worry about

00:32:37,240 --> 00:32:40,600
it and then down the line we can start

00:32:39,070 --> 00:32:43,059
learning why these things are monadic

00:32:40,600 --> 00:32:45,129
what does that even mean so I mean you

00:32:43,059 --> 00:32:46,240
know this is something very intuitive

00:32:45,129 --> 00:32:48,100
that you've been using for a long time

00:32:46,240 --> 00:32:50,710
and by the way this is how this thing

00:32:48,100 --> 00:32:52,149
may or may not be a monad right oh you

00:32:50,710 --> 00:32:54,610
didn't know what that was well that's

00:32:52,149 --> 00:32:55,749
what we call the monadic whatever so I

00:32:54,610 --> 00:32:57,220
mean it you know it's it's it's

00:32:55,749 --> 00:32:59,230
something we're after I think people

00:32:57,220 --> 00:33:01,840
have had enough examples they see that

00:32:59,230 --> 00:33:02,889
there's a common shape then you can say

00:33:01,840 --> 00:33:04,929
well that's what this is called actually

00:33:02,889 --> 00:33:06,010
you've been using it all this time no

00:33:04,929 --> 00:33:07,600
big deal

00:33:06,010 --> 00:33:08,890
you know and so if you ever want to do

00:33:07,600 --> 00:33:10,540
something more generic or general or

00:33:08,890 --> 00:33:12,610
whatever you know look in that direction

00:33:10,540 --> 00:33:14,020
but you know you actually got it the

00:33:12,610 --> 00:33:16,660
whole time you've been using it you've

00:33:14,020 --> 00:33:18,940
been using this for a while now and this

00:33:16,660 --> 00:33:20,800
is kind of goes with the hey examples

00:33:18,940 --> 00:33:24,220
first and then we can learn hilarious

00:33:20,800 --> 00:33:25,300
terminology later excellent I think

00:33:24,220 --> 00:33:27,210
we're gonna open it up to audience

00:33:25,300 --> 00:33:29,230
questions so if anybody has any

00:33:27,210 --> 00:33:30,880
questions for the panel we've got a

00:33:29,230 --> 00:33:32,140
microphone that's coming around away

00:33:30,880 --> 00:33:43,060
from the microphone there's a question

00:33:32,140 --> 00:33:45,670
right over here hi six five years back I

00:33:43,060 --> 00:33:48,760
started with skyline with impatient

00:33:45,670 --> 00:33:51,430
skyline patient book I didn't understand

00:33:48,760 --> 00:33:53,230
completely what they are saying so after

00:33:51,430 --> 00:33:56,770
that Coursera course really helped me a

00:33:53,230 --> 00:34:01,420
lot to understand Scala now my question

00:33:56,770 --> 00:34:03,760
is now I'm in a situation same like five

00:34:01,420 --> 00:34:06,960
years back what is a type theory and I

00:34:03,760 --> 00:34:10,330
want to understand type theory a lot but

00:34:06,960 --> 00:34:12,310
now I'm looking for help in Coursera

00:34:10,330 --> 00:34:14,530
course like type theory and all the

00:34:12,310 --> 00:34:19,679
stuff is there any possibility to go

00:34:14,530 --> 00:34:19,679
arrange a type theory course in Coursera

00:34:23,909 --> 00:34:27,279
[Laughter]

00:34:28,379 --> 00:34:34,510
not yeah so there's not really a single

00:34:31,870 --> 00:34:36,730
resource that we could say that's the

00:34:34,510 --> 00:34:38,379
definitely resource somebody wants to

00:34:36,730 --> 00:34:40,990
know more about types than there's the

00:34:38,379 --> 00:34:43,810
Redbook types and programming languages

00:34:40,990 --> 00:34:46,629
sort of a red brick wall book everybody

00:34:43,810 --> 00:34:47,980
in types knows that and to say well to

00:34:46,629 --> 00:34:49,780
essentially study type theory in

00:34:47,980 --> 00:34:53,080
isolation I would say yeah read that

00:34:49,780 --> 00:34:55,210
book and I we have a course I teach a

00:34:53,080 --> 00:34:57,670
course on masters level that does that

00:34:55,210 --> 00:35:00,160
that uses that book as a textbook in a

00:34:57,670 --> 00:35:01,960
more scholar specific context I think

00:35:00,160 --> 00:35:03,760
there's a there's a need for that for

00:35:01,960 --> 00:35:05,110
sort of a definitive resource to teach

00:35:03,760 --> 00:35:08,380
these things but we don't have it yet

00:35:05,110 --> 00:35:10,690
yeah also I guess one reason for not

00:35:08,380 --> 00:35:12,620
having it yet is that I believe actually

00:35:10,690 --> 00:35:15,050
things are still in flux that

00:35:12,620 --> 00:35:17,060
we I mean we we type the early concerts

00:35:15,050 --> 00:35:19,490
out there move relatively slowly but

00:35:17,060 --> 00:35:20,120
essentially the the things we do with

00:35:19,490 --> 00:35:23,420
them

00:35:20,120 --> 00:35:25,040
essentially what kind of type theoretic

00:35:23,420 --> 00:35:27,680
instructions to use for what feature

00:35:25,040 --> 00:35:30,020
that is still very much in flux so I

00:35:27,680 --> 00:35:32,480
think the situation in 2018 is not what

00:35:30,020 --> 00:35:35,300
it was in 2017 it's not about it was the

00:35:32,480 --> 00:35:37,100
year before so it's very hard as long as

00:35:35,300 --> 00:35:38,720
things are moving so quickly to actually

00:35:37,100 --> 00:35:39,800
freeze that and say okay we're going to

00:35:38,720 --> 00:35:47,570
teach that because they're going to

00:35:39,800 --> 00:35:48,110
teach it for 10 years to come any other

00:35:47,570 --> 00:35:55,550
questions

00:35:48,110 --> 00:35:58,640
one in the corner over here thank you I

00:35:55,550 --> 00:36:01,550
think I have a few questions but I start

00:35:58,640 --> 00:36:04,340
with the first one you taught a lot

00:36:01,550 --> 00:36:07,340
about oh by the way it's got the biggest

00:36:04,340 --> 00:36:10,190
things and weakness of Scala is I can do

00:36:07,340 --> 00:36:14,510
everything I can the object-oriented I

00:36:10,190 --> 00:36:17,120
can work functional I think the big

00:36:14,510 --> 00:36:20,300
question is how to do it right how to

00:36:17,120 --> 00:36:21,620
teach raise the abstraction which should

00:36:20,300 --> 00:36:23,630
be with side effect so it should be

00:36:21,620 --> 00:36:27,470
without side effects how to cut this

00:36:23,630 --> 00:36:29,540
line mostly with with people who already

00:36:27,470 --> 00:36:34,430
have object-oriented experience but no

00:36:29,540 --> 00:36:36,830
functional experience so I guess my

00:36:34,430 --> 00:36:38,060
answer would be as long as as soon as

00:36:36,830 --> 00:36:39,620
you construct the difference between

00:36:38,060 --> 00:36:42,200
object and functional you're already

00:36:39,620 --> 00:36:43,910
gone down the wrong path for Scala so if

00:36:42,200 --> 00:36:46,700
you teach it always teach it that it's

00:36:43,910 --> 00:36:49,430
both and that that I mean a function in

00:36:46,700 --> 00:36:50,960
Scala is an object so if you say it's

00:36:49,430 --> 00:36:53,180
object or functional than I would

00:36:50,960 --> 00:36:55,460
essentially say well no actually not

00:36:53,180 --> 00:36:58,430
it's it's both and we have to try to

00:36:55,460 --> 00:36:59,960
teach the synthesis of both what we

00:36:58,430 --> 00:37:02,000
certainly should be careful about this

00:36:59,960 --> 00:37:04,340
to say that's a aspects of object and

00:37:02,000 --> 00:37:06,140
programming like side effects which is

00:37:04,340 --> 00:37:08,300
actually for me not an aspect of object

00:37:06,140 --> 00:37:09,680
and programming that's just imperative

00:37:08,300 --> 00:37:12,050
programming class object oriented

00:37:09,680 --> 00:37:15,110
programming so there of course you say

00:37:12,050 --> 00:37:16,730
well what in my in our teaching we

00:37:15,110 --> 00:37:18,860
typically say where we write with that

00:37:16,730 --> 00:37:21,470
so typically seven eight weeks in week

00:37:18,860 --> 00:37:23,390
nine we introduce variables and we tell

00:37:21,470 --> 00:37:25,520
them essentially both what they can do

00:37:23,390 --> 00:37:26,000
and what the dangers are refusing them

00:37:25,520 --> 00:37:28,870
and

00:37:26,000 --> 00:37:31,550
essentially we you want to get at a

00:37:28,870 --> 00:37:33,830
situation where you can say well these

00:37:31,550 --> 00:37:38,210
things have their place typically high

00:37:33,830 --> 00:37:40,070
performance caching but they have to be

00:37:38,210 --> 00:37:41,720
carefully contained so for me the most

00:37:40,070 --> 00:37:43,970
interesting code is actually code that

00:37:41,720 --> 00:37:47,090
is completely functional at the outside

00:37:43,970 --> 00:37:49,100
referential transparent and has pulls

00:37:47,090 --> 00:37:51,350
all the tricks with like variables and

00:37:49,100 --> 00:37:53,150
side effects typically for caches on the

00:37:51,350 --> 00:37:55,310
inside to get really fast performance

00:37:53,150 --> 00:37:58,730
that's where sort of the the kind of

00:37:55,310 --> 00:38:00,500
code I must like to read and see that's

00:37:58,730 --> 00:38:01,820
personally most interesting for me I of

00:38:00,500 --> 00:38:03,110
course if you don't need to do that

00:38:01,820 --> 00:38:04,730
because you don't have a performance

00:38:03,110 --> 00:38:06,890
problem then don't do it it just be

00:38:04,730 --> 00:38:09,110
purely functional if you have to do it

00:38:06,890 --> 00:38:10,970
and do it in the caches but be purely

00:38:09,110 --> 00:38:13,190
functional at the outside would be it

00:38:10,970 --> 00:38:15,950
would be this an idea so so for me then

00:38:13,190 --> 00:38:18,470
essentially this idea that we good Scala

00:38:15,950 --> 00:38:21,320
is both objects because objects are the

00:38:18,470 --> 00:38:23,180
modules and functions for fulfill for

00:38:21,320 --> 00:38:26,180
the behavior and essentially a careful

00:38:23,180 --> 00:38:28,310
amount of mutable state for essentially

00:38:26,180 --> 00:38:30,260
keeping the thing performant or or

00:38:28,310 --> 00:38:32,480
reactive or what what what you need to

00:38:30,260 --> 00:38:33,980
do that is sort of the right the right

00:38:32,480 --> 00:38:35,720
balance but it means that I would

00:38:33,980 --> 00:38:37,370
introduce state last because it

00:38:35,720 --> 00:38:40,490
essentially premature optimization is

00:38:37,370 --> 00:38:42,440
the source of all evil and just to weigh

00:38:40,490 --> 00:38:45,140
in on that now of course I'm biased but

00:38:42,440 --> 00:38:46,720
I mean I kind of I kind of you know the

00:38:45,140 --> 00:38:49,160
the functional programming in Scala

00:38:46,720 --> 00:38:50,510
course the one that became a MOOC and

00:38:49,160 --> 00:38:52,490
that's of course at EPFL

00:38:50,510 --> 00:38:54,320
it teaches object-oriented things I mean

00:38:52,490 --> 00:38:56,030
you know we teach delegation and all

00:38:54,320 --> 00:38:57,680
kinds of things state and whatever in

00:38:56,030 --> 00:38:59,330
that course it's called functional

00:38:57,680 --> 00:39:01,400
programming because in Scala but I mean

00:38:59,330 --> 00:39:03,050
there's things that one who would teach

00:39:01,400 --> 00:39:04,730
an object-oriented programming course

00:39:03,050 --> 00:39:06,890
would also teach actually in that course

00:39:04,730 --> 00:39:08,750
so I guess I guess the point is that

00:39:06,890 --> 00:39:12,050
this is I you know obviously this is

00:39:08,750 --> 00:39:13,760
your course design but you know it still

00:39:12,050 --> 00:39:15,230
sticks with this idea of well you know

00:39:13,760 --> 00:39:17,360
they're not two separate things or one

00:39:15,230 --> 00:39:19,940
thing and you have these concepts kind

00:39:17,360 --> 00:39:26,900
of you know in this this this one course

00:39:19,940 --> 00:39:29,360
like merged imagine situation there is a

00:39:26,900 --> 00:39:31,580
team established in that does Scala

00:39:29,360 --> 00:39:34,310
development and the new developer joins

00:39:31,580 --> 00:39:36,349
who has played some Java and the ground

00:39:34,310 --> 00:39:40,309
so what's a Java background

00:39:36,349 --> 00:39:42,859
no Scour and when he starts to see how

00:39:40,309 --> 00:39:44,869
things are for Scala like when he starts

00:39:42,859 --> 00:39:48,279
to see the tooling and that performance

00:39:44,869 --> 00:39:52,819
like SVT of copulation etc and he says

00:39:48,279 --> 00:39:56,650
why not Kotlin for example so to link is

00:39:52,819 --> 00:39:59,269
arguably better compilation times good

00:39:56,650 --> 00:40:05,420
what to answer him

00:39:59,269 --> 00:40:07,279
I mean maybe somebody that works in

00:40:05,420 --> 00:40:09,109
industry can answer this I'm sure you

00:40:07,279 --> 00:40:18,259
get a lot of varied backgrounds and the

00:40:09,109 --> 00:40:19,700
teams that are joining so so Twitter's

00:40:18,259 --> 00:40:21,200
in a little bit of a unique position we

00:40:19,700 --> 00:40:24,259
have so much of our own tooling that

00:40:21,200 --> 00:40:26,329
we've built around Scala like pants we

00:40:24,259 --> 00:40:27,890
don't use SBT we use pants which is a

00:40:26,329 --> 00:40:31,549
homegrown build tool it is open source

00:40:27,890 --> 00:40:34,309
for those who who want to use it and but

00:40:31,549 --> 00:40:38,119
we certainly have our share of people

00:40:34,309 --> 00:40:40,460
who join and run up against how long

00:40:38,119 --> 00:40:41,900
things take not just with Scala for

00:40:40,460 --> 00:40:43,339
instance we're in a mono repo it's

00:40:41,900 --> 00:40:46,369
millions and millions of lines of code

00:40:43,339 --> 00:40:47,210
holding new branches can take long

00:40:46,369 --> 00:40:51,019
enough for a coffee break

00:40:47,210 --> 00:40:53,569
so ultimately I don't know if there's a

00:40:51,019 --> 00:40:56,599
great way to address that beyond the

00:40:53,569 --> 00:40:59,410
fact that they'll eventually get used to

00:40:56,599 --> 00:41:02,569
it that's not a satisfying answer but I

00:40:59,410 --> 00:41:05,059
in in my experience as people see the

00:41:02,569 --> 00:41:09,140
benefits of the tooling we have the use

00:41:05,059 --> 00:41:11,479
of Scala the objections sort of fall

00:41:09,140 --> 00:41:15,079
away because they start to see the

00:41:11,479 --> 00:41:17,450
benefits and what we get out of it so I

00:41:15,079 --> 00:41:19,219
think that's that's the key is make sure

00:41:17,450 --> 00:41:20,839
you should make sure that you actually

00:41:19,219 --> 00:41:23,299
are getting the payoff from using these

00:41:20,839 --> 00:41:26,059
tools and if you're not then then

00:41:23,299 --> 00:41:27,440
perhaps that that's a different issue

00:41:26,059 --> 00:41:29,210
but if you are getting the payoff I

00:41:27,440 --> 00:41:32,509
think your engineers will come around to

00:41:29,210 --> 00:41:35,650
that same realization after as they you

00:41:32,509 --> 00:41:35,650
know progress in your company

00:41:42,920 --> 00:41:48,090
so hello I'd like to share my experience

00:41:46,110 --> 00:41:49,950
on this topic so you already mentioned

00:41:48,090 --> 00:41:52,410
like the benefits that you should

00:41:49,950 --> 00:41:54,000
experience them so my experience is

00:41:52,410 --> 00:41:57,900
actually that if you come from something

00:41:54,000 --> 00:42:00,630
like maven the the to design is less

00:41:57,900 --> 00:42:02,760
principles in some ways and I think my

00:42:00,630 --> 00:42:05,310
experience with other tools is that it

00:42:02,760 --> 00:42:08,280
actually breaks in in a lot of

00:42:05,310 --> 00:42:12,990
fundamental ways which makes the

00:42:08,280 --> 00:42:15,240
development cycle slower so I think you

00:42:12,990 --> 00:42:17,870
should focus on the fact that SBT for

00:42:15,240 --> 00:42:20,790
instance has a very nice much mount

00:42:17,870 --> 00:42:22,740
which actually makes gives you direct

00:42:20,790 --> 00:42:24,420
feedback when you change the line of

00:42:22,740 --> 00:42:27,600
code because incremental compilation is

00:42:24,420 --> 00:42:32,400
much better in in Scala than it is in

00:42:27,600 --> 00:42:34,620
for instance Java so I I had a lot of

00:42:32,400 --> 00:42:36,630
questions about like why scarce or slow

00:42:34,620 --> 00:42:39,000
and then I don't show examples of like

00:42:36,630 --> 00:42:44,870
you know it's way faster actually than

00:42:39,000 --> 00:42:48,060
doing a normal regular Java like cycle

00:42:44,870 --> 00:42:51,540
so I think this experience of people

00:42:48,060 --> 00:42:54,300
thinking it's slow is like thought it's

00:42:51,540 --> 00:42:56,430
really that some people are very vocal

00:42:54,300 --> 00:42:58,110
and say it's slow and then people

00:42:56,430 --> 00:43:00,270
mentally experience the slowness but

00:42:58,110 --> 00:43:08,250
don't see the speed there are in other

00:43:00,270 --> 00:43:10,080
places yeah so compiler speed is is a

00:43:08,250 --> 00:43:12,510
very complicated thing so the first

00:43:10,080 --> 00:43:14,970
thing that mistake that many people make

00:43:12,510 --> 00:43:16,710
is I just started called called compile

00:43:14,970 --> 00:43:18,120
ins as well it takes five seconds to

00:43:16,710 --> 00:43:19,650
compile HelloWorld or something like

00:43:18,120 --> 00:43:21,810
that as I said that's actually not

00:43:19,650 --> 00:43:23,640
compiler speed that's just startup

00:43:21,810 --> 00:43:26,610
scanning the class paths and things like

00:43:23,640 --> 00:43:28,500
that and it's true that Java C has

00:43:26,610 --> 00:43:30,720
heavily optimized that and we could do

00:43:28,500 --> 00:43:33,630
it well but we essentially would take a

00:43:30,720 --> 00:43:36,300
lot of resources and you generally just

00:43:33,630 --> 00:43:37,860
say just use tilde compiled in SBT or an

00:43:36,300 --> 00:43:40,380
incremental compiler and then it's

00:43:37,860 --> 00:43:42,150
really fast the second observation is it

00:43:40,380 --> 00:43:44,850
really depends a lot on your code so I

00:43:42,150 --> 00:43:47,700
for the code I write in the the Totti

00:43:44,850 --> 00:43:49,650
compiler myself I measured that I get on

00:43:47,700 --> 00:43:53,099
average about 3000 second

00:43:49,650 --> 00:43:55,049
lines ii on my on my macbook which is

00:43:53,099 --> 00:43:56,640
fast enough for me with incremental

00:43:55,049 --> 00:43:58,260
compilation means that I rarely wait

00:43:56,640 --> 00:44:00,599
more than one or two seconds and which

00:43:58,260 --> 00:44:03,000
means I don't wait at all it's just when

00:44:00,599 --> 00:44:05,250
it when it when it's done when I look at

00:44:03,000 --> 00:44:07,049
the result it's done and I I basically

00:44:05,250 --> 00:44:09,059
never wait for the compiler but of

00:44:07,049 --> 00:44:11,940
course that means that you can have both

00:44:09,059 --> 00:44:13,950
a lot more code like Twitter and then it

00:44:11,940 --> 00:44:15,539
does matter even it may be 3,000 lines a

00:44:13,950 --> 00:44:17,339
second you still take a long time

00:44:15,539 --> 00:44:20,039
compiling what you might have coated

00:44:17,339 --> 00:44:24,410
compiles slower because it uses a lot

00:44:20,039 --> 00:44:27,119
more high-level higher-level type level

00:44:24,410 --> 00:44:30,119
implicit searches other complicated

00:44:27,119 --> 00:44:32,490
things and I don't want to derail us too

00:44:30,119 --> 00:44:33,930
much this is the education panel we can

00:44:32,490 --> 00:44:37,289
talk about compilations that's right

00:44:33,930 --> 00:44:40,160
tomorrow at the ending panel we have

00:44:37,289 --> 00:44:40,160
time for one more question

00:44:41,480 --> 00:44:45,390
yes Adrian and Martin will be on stage

00:44:43,920 --> 00:44:46,829
at the end of the day tomorrow so we can

00:44:45,390 --> 00:44:49,680
ask them all the questions about why the

00:44:46,829 --> 00:44:53,520
Scala compiler is slow or perceived to

00:44:49,680 --> 00:44:55,470
be slow yeah I think when beginners move

00:44:53,520 --> 00:44:57,089
or let's say people who are beginner

00:44:55,470 --> 00:45:00,690
with Scala but move from another

00:44:57,089 --> 00:45:03,299
language and want to do Scala right so

00:45:00,690 --> 00:45:04,829
you have to use the avoid the VAR in

00:45:03,299 --> 00:45:07,440
these things I think it's really a

00:45:04,829 --> 00:45:09,240
challenge that at some point of time you

00:45:07,440 --> 00:45:11,160
suddenly can't program anymore because

00:45:09,240 --> 00:45:12,839
everything doesn't work there's the full

00:45:11,160 --> 00:45:15,450
loop is not there like you are used to

00:45:12,839 --> 00:45:17,849
you can't change anything and you have

00:45:15,450 --> 00:45:19,440
to really start from scratch and I think

00:45:17,849 --> 00:45:24,510
that's a challenge to get across this

00:45:19,440 --> 00:45:29,869
moment that's a chasm that you have to

00:45:24,510 --> 00:45:32,869
traverse yeah okay one more question

00:45:29,869 --> 00:45:32,869
yeah

00:45:35,280 --> 00:45:40,280
my own experience when I started with

00:45:37,440 --> 00:45:43,950
Scala was trying to read the language

00:45:40,280 --> 00:45:46,380
documentation which actually read more

00:45:43,950 --> 00:45:48,540
like white papers each time I'd wanted

00:45:46,380 --> 00:45:50,520
to see how something works pulled in

00:45:48,540 --> 00:45:52,500
quite several things tried to explain

00:45:50,520 --> 00:45:56,130
everything I wasn't interested in at

00:45:52,500 --> 00:46:01,050
that point and yeah I think that also is

00:45:56,130 --> 00:46:06,869
a hurdle to take at some point that was

00:46:01,050 --> 00:46:12,599
it so I don't know when you picked it up

00:46:06,869 --> 00:46:15,660
but the cool thing is that last July or

00:46:12,599 --> 00:46:18,270
so there was a big effort to rewrite the

00:46:15,660 --> 00:46:19,680
whole tour of Scala thingy I don't know

00:46:18,270 --> 00:46:24,450
did you look at it is that when you

00:46:19,680 --> 00:46:26,490
looked at it okay anyway I don't know if

00:46:24,450 --> 00:46:29,099
this helps but we asked some of you was

00:46:26,490 --> 00:46:30,960
a complete beginner basically to rewrite

00:46:29,099 --> 00:46:33,300
it because when you're already used to

00:46:30,960 --> 00:46:35,760
these concepts maybe you don't teach it

00:46:33,300 --> 00:46:37,980
in the most intuitive way so he had

00:46:35,760 --> 00:46:39,450
somebody who was just learning say okay

00:46:37,980 --> 00:46:41,579
if you're somebody's gonna teach this to

00:46:39,450 --> 00:46:43,560
you how would you how would you do it

00:46:41,579 --> 00:46:45,480
and I think it's it's not gonna say it's

00:46:43,560 --> 00:46:47,819
perfect I mean you know but I think that

00:46:45,480 --> 00:46:48,390
he made it far less ridiculous than it

00:46:47,819 --> 00:46:50,940
used to be

00:46:48,390 --> 00:46:53,250
also the if you look at actually the

00:46:50,940 --> 00:46:55,440
dottie documentation so we have is a

00:46:53,250 --> 00:46:57,329
dereference which has one section for

00:46:55,440 --> 00:47:00,900
each of the things that has changed or

00:46:57,329 --> 00:47:03,930
got dropped or got added then I hope you

00:47:00,900 --> 00:47:06,930
do have a more positive experience this

00:47:03,930 --> 00:47:08,339
time around I'd like to add on what the

00:47:06,930 --> 00:47:12,300
Heather said about having a complete

00:47:08,339 --> 00:47:13,530
beginner write the documentation a in a

00:47:12,300 --> 00:47:16,290
more general sense especially when

00:47:13,530 --> 00:47:18,900
you're hiring having the most recent

00:47:16,290 --> 00:47:20,400
hire teach the next tire means that it's

00:47:18,900 --> 00:47:22,560
always the person who for whom it's

00:47:20,400 --> 00:47:23,910
freshest in their mind I think that

00:47:22,560 --> 00:47:25,200
tactic can really help a lot because

00:47:23,910 --> 00:47:27,089
when you have your most senior person

00:47:25,200 --> 00:47:28,710
try to teach the new hire and they've

00:47:27,089 --> 00:47:31,140
been there for several years it's

00:47:28,710 --> 00:47:34,230
difficult to recall t'v eight that

00:47:31,140 --> 00:47:36,240
beginners mindset and also if you have

00:47:34,230 --> 00:47:38,369
the most recent hire teach the next hire

00:47:36,240 --> 00:47:40,290
you're spreading out the workload it's

00:47:38,369 --> 00:47:41,790
fresh in their mind and they still have

00:47:40,290 --> 00:47:44,760
the beginners mindset they don't have to

00:47:41,790 --> 00:47:47,190
go dig it back out the way someone who's

00:47:44,760 --> 00:47:49,140
been there for several years might

00:47:47,190 --> 00:47:50,130
excellent that's about all the time we

00:47:49,140 --> 00:47:52,710
have I want to thank all of our

00:47:50,130 --> 00:47:54,810
panelists for their time today thank all

00:47:52,710 --> 00:47:55,910
of you for coming today and thank you

00:47:54,810 --> 00:48:01,980
for listening

00:47:55,910 --> 00:48:01,980

YouTube URL: https://www.youtube.com/watch?v=akp8cCWbVM0


