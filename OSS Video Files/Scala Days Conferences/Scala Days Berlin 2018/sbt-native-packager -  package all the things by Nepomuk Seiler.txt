Title: sbt-native-packager -  package all the things by Nepomuk Seiler
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6914-sbt-native-packager---package-all-the-things.html
Captions: 
	00:00:04,600 --> 00:00:10,290
yeah I'm I'm Mookie I'm one of the core

00:00:07,540 --> 00:00:12,550
maintenance of SPT NetID packager and

00:00:10,290 --> 00:00:16,539
today I would like to give you well an

00:00:12,550 --> 00:00:18,340
introduction to native packager I work

00:00:16,539 --> 00:00:21,760
with CUDA Frogger we use it there as

00:00:18,340 --> 00:00:25,449
well for various kinds of in our

00:00:21,760 --> 00:00:27,460
production systems and well the reason

00:00:25,449 --> 00:00:30,130
for native picture of course is because

00:00:27,460 --> 00:00:31,779
normally you don't run your application

00:00:30,130 --> 00:00:33,910
on a local machine but you want to

00:00:31,779 --> 00:00:36,700
deploy create some kind of deployable

00:00:33,910 --> 00:00:38,680
unit this can be a zip file that you're

00:00:36,700 --> 00:00:41,860
simply unpack on your target system a

00:00:38,680 --> 00:00:44,020
Debian father MSI package a docker image

00:00:41,860 --> 00:00:46,360
all kinds of different stuffs and

00:00:44,020 --> 00:00:50,260
negative packager provides you with the

00:00:46,360 --> 00:00:52,989
necessary tools to build those so what I

00:00:50,260 --> 00:00:55,719
would like to do today is first I would

00:00:52,989 --> 00:00:58,120
like to introduce some of the design

00:00:55,719 --> 00:01:01,269
principles and core concepts of SPT

00:00:58,120 --> 00:01:04,629
native packager they're very few but

00:01:01,269 --> 00:01:06,460
it's good to know them and it helps you

00:01:04,629 --> 00:01:08,500
a lot in understanding SPT native

00:01:06,460 --> 00:01:10,000
packager how you work with it how you

00:01:08,500 --> 00:01:14,439
can configure it and how you can extend

00:01:10,000 --> 00:01:18,189
it I want to start in this talk from a

00:01:14,439 --> 00:01:20,740
beginner's perspective we write our

00:01:18,189 --> 00:01:23,229
documentation for beginners and I want

00:01:20,740 --> 00:01:27,340
to I structure this talk as we intend

00:01:23,229 --> 00:01:29,829
new users how they should learn and dive

00:01:27,340 --> 00:01:31,329
into SPT native packager from the very

00:01:29,829 --> 00:01:33,990
beginning where they just want to build

00:01:31,329 --> 00:01:36,250
a package to do the more advanced stuff

00:01:33,990 --> 00:01:39,579
and this is what I would like to show

00:01:36,250 --> 00:01:41,740
you in the end so when we have learned

00:01:39,579 --> 00:01:44,200
all the core concepts build a simple

00:01:41,740 --> 00:01:46,090
package then we would would like to do

00:01:44,200 --> 00:01:49,000
some advanced stuff and in this case we

00:01:46,090 --> 00:01:52,450
built a new package with Scala native

00:01:49,000 --> 00:01:55,960
because it's very simple and it's well

00:01:52,450 --> 00:01:58,030
it's a nice example ok so let's get

00:01:55,960 --> 00:02:01,990
started with some of the core design

00:01:58,030 --> 00:02:05,140
principles the main thing this sounds a

00:02:01,990 --> 00:02:07,750
bit cheesy ease of use but SBT doesn't

00:02:05,140 --> 00:02:10,539
have a history of very low learning

00:02:07,750 --> 00:02:13,300
curve and for a native packager we

00:02:10,539 --> 00:02:15,400
really try to keep the effort you have

00:02:13,300 --> 00:02:18,190
to put in to get something out very low

00:02:15,400 --> 00:02:19,690
so I put the most

00:02:18,190 --> 00:02:22,450
the example that you see first on the

00:02:19,690 --> 00:02:24,820
readme you enable a plug-in and then

00:02:22,450 --> 00:02:26,530
everything works so this may be

00:02:24,820 --> 00:02:28,930
magically at the first point but this is

00:02:26,530 --> 00:02:32,230
okay if you want to see how things work

00:02:28,930 --> 00:02:35,470
and we really try to keep it that simple

00:02:32,230 --> 00:02:36,930
so that you have to think about your

00:02:35,470 --> 00:02:40,600
target system and not about your built

00:02:36,930 --> 00:02:42,610
configuration on the contrary we try to

00:02:40,600 --> 00:02:44,770
be extensible and these sometimes

00:02:42,610 --> 00:02:46,330
conflict with each other because if you

00:02:44,770 --> 00:02:50,620
have thousand options you can configure

00:02:46,330 --> 00:02:52,120
then it's not easy to use recover the

00:02:50,620 --> 00:02:54,820
extensible part mostly with

00:02:52,120 --> 00:02:56,260
documentation so for an SBT plug-in I'm

00:02:54,820 --> 00:02:58,870
very proud that you have a lot of

00:02:56,260 --> 00:03:03,250
documentation it still not doesn't cover

00:02:58,870 --> 00:03:05,830
everything but we try to explain

00:03:03,250 --> 00:03:07,840
everything that you can extend and can

00:03:05,830 --> 00:03:10,720
change and for most of the things we

00:03:07,840 --> 00:03:12,610
provide sensible defaults so you can't

00:03:10,720 --> 00:03:14,620
change things but if you don't know them

00:03:12,610 --> 00:03:19,300
and you don't need them you don't have

00:03:14,620 --> 00:03:22,989
to care one of the very core principles

00:03:19,300 --> 00:03:25,630
is that SBT native packager is supposed

00:03:22,989 --> 00:03:27,160
to build on your native platform so if

00:03:25,630 --> 00:03:28,950
you want to build a debian package it

00:03:27,160 --> 00:03:32,170
should build on a debian platform

00:03:28,950 --> 00:03:34,870
everything on top is a nice feature but

00:03:32,170 --> 00:03:37,360
it's not in our very narrow scope of the

00:03:34,870 --> 00:03:39,400
package of native packager so you can

00:03:37,360 --> 00:03:42,400
build a debian package on a Windows

00:03:39,400 --> 00:03:45,510
system because we have a Jade app

00:03:42,400 --> 00:03:48,430
packaging plug-in that enables a java

00:03:45,510 --> 00:03:51,760
implementation of debian but it's not

00:03:48,430 --> 00:03:54,900
our core focus to maintain this so this

00:03:51,760 --> 00:03:59,290
is all community driven which is awesome

00:03:54,900 --> 00:04:00,459
but it's if it doesn't work the chances

00:03:59,290 --> 00:04:02,940
are high that you have to fix it

00:04:00,459 --> 00:04:06,870
yourself open a pull request and

00:04:02,940 --> 00:04:10,420
hopefully help others and the last part

00:04:06,870 --> 00:04:10,870
are best practices so to make it easy to

00:04:10,420 --> 00:04:15,430
use

00:04:10,870 --> 00:04:17,500
we try to keep our opinions all of the

00:04:15,430 --> 00:04:19,840
project and see what are the common best

00:04:17,500 --> 00:04:22,720
practices so this includes installation

00:04:19,840 --> 00:04:25,030
passes on Linux user and file

00:04:22,720 --> 00:04:27,400
permissions and stuff like this so when

00:04:25,030 --> 00:04:29,950
you build your package and then

00:04:27,400 --> 00:04:32,169
everything is like most of the target

00:04:29,950 --> 00:04:34,449
systems look like and thing

00:04:32,169 --> 00:04:36,939
just work okay so you only have to

00:04:34,449 --> 00:04:41,560
configure the parts that are different

00:04:36,939 --> 00:04:43,449
and not that common so these are the

00:04:41,560 --> 00:04:46,650
four things that make up SBT net if

00:04:43,449 --> 00:04:48,819
packager from a design perspective and

00:04:46,650 --> 00:04:50,379
archetypes are the thing that got you

00:04:48,819 --> 00:04:52,779
started quickly and this is what you see

00:04:50,379 --> 00:04:55,599
first when you go to the readme hey at

00:04:52,779 --> 00:04:59,560
native packager to your plugins SBT and

00:04:55,599 --> 00:05:02,590
then at this line to your build SBT and

00:04:59,560 --> 00:05:07,210
you're done so the Java app packaging is

00:05:02,590 --> 00:05:08,979
the actual archetype it configures you

00:05:07,210 --> 00:05:12,550
build for a specific use case in this

00:05:08,979 --> 00:05:14,770
case a java application and the name may

00:05:12,550 --> 00:05:17,740
be a bit off it should be called maybe

00:05:14,770 --> 00:05:19,479
it JVM application because most of you I

00:05:17,740 --> 00:05:23,439
guess we'll write Scala and not Java

00:05:19,479 --> 00:05:25,689
code but it was named that like eight or

00:05:23,439 --> 00:05:31,509
nine years ago and we kept the naming

00:05:25,689 --> 00:05:34,300
and it's okay so I will do some live

00:05:31,509 --> 00:05:37,810
coding or live build SBT configuration

00:05:34,300 --> 00:05:40,120
and show the results directly the

00:05:37,810 --> 00:05:42,520
console and what you can do so I will

00:05:40,120 --> 00:05:46,360
switch screens up and forth so this is

00:05:42,520 --> 00:05:50,580
the slides then I have my IntelliJ here

00:05:46,360 --> 00:05:55,180
and then down here I have my SBT console

00:05:50,580 --> 00:06:00,999
so can you see at the very bottom okay

00:05:55,180 --> 00:06:02,469
nice okay so I've already added this to

00:06:00,999 --> 00:06:06,120
my plugins SBT in business native

00:06:02,469 --> 00:06:13,539
packager and I have a simple main file

00:06:06,120 --> 00:06:16,560
which is the old one which simply reads

00:06:13,539 --> 00:06:21,219
with the file and prints it out okay so

00:06:16,560 --> 00:06:23,139
nothing special here and what I can do

00:06:21,219 --> 00:06:25,659
thanks to IntelliJ was which has a

00:06:23,139 --> 00:06:29,139
pretty good Auto completion now in SBT I

00:06:25,659 --> 00:06:31,749
can look for plugins and I see okay Java

00:06:29,139 --> 00:06:38,050
app packaging already mentioned enable

00:06:31,749 --> 00:06:39,759
it and I can reload my SBT console Java

00:06:38,050 --> 00:06:43,870
packaging and all related plugins are

00:06:39,759 --> 00:06:45,969
enabled and the first task you should be

00:06:43,870 --> 00:06:49,959
aware of in native packager it's a

00:06:45,969 --> 00:06:51,699
stage tasks in SBT you can inspect an

00:06:49,959 --> 00:06:53,169
existing task so you get some

00:06:51,699 --> 00:06:56,259
documentation and explanation

00:06:53,169 --> 00:06:58,089
um you see it returns a file and the

00:06:56,259 --> 00:07:00,339
description is creates a local directory

00:06:58,089 --> 00:07:03,669
with all the files laid out as I would

00:07:00,339 --> 00:07:06,999
be in the final distribution so what the

00:07:03,669 --> 00:07:10,259
stage task does I call it with show so I

00:07:06,999 --> 00:07:13,239
see the the actual directory word this

00:07:10,259 --> 00:07:16,539
it generates a directory with all the

00:07:13,239 --> 00:07:18,879
contents of my final package so at the

00:07:16,539 --> 00:07:20,829
moment I have only a main class and and

00:07:18,879 --> 00:07:25,419
they enabled the the builders the Java

00:07:20,829 --> 00:07:28,029
packaging and when I take a look at the

00:07:25,419 --> 00:07:30,429
target universal stage I'll see the

00:07:28,029 --> 00:07:33,159
contents so native package created a bin

00:07:30,429 --> 00:07:34,749
folder with two scripts a shell script

00:07:33,159 --> 00:07:37,029
for UNIX systems and abets group for

00:07:34,749 --> 00:07:39,909
Windows systems and a Lib folder with

00:07:37,029 --> 00:07:42,459
Scala library resides and my actual

00:07:39,909 --> 00:07:46,649
application jar and this is already

00:07:42,459 --> 00:07:50,229
working so I can start this I call

00:07:46,649 --> 00:07:54,459
universal stage bin holidays the text

00:07:50,229 --> 00:07:57,129
file in my application is executed okay

00:07:54,459 --> 00:07:59,409
so this is the very first basic thing

00:07:57,129 --> 00:08:02,439
thing that SPT native packages are so

00:07:59,409 --> 00:08:04,509
you it's creates staging directory where

00:08:02,439 --> 00:08:05,979
you can do whatever you want with your

00:08:04,509 --> 00:08:10,179
final application that's running blue

00:08:05,979 --> 00:08:13,360
okay so pretty simple so it took us one

00:08:10,179 --> 00:08:15,209
line of SBT and one SBT commands you to

00:08:13,360 --> 00:08:21,369
get a directory with an executable

00:08:15,209 --> 00:08:22,809
distribution an archetype configures all

00:08:21,369 --> 00:08:24,249
the formats it can handle and enables

00:08:22,809 --> 00:08:26,319
them so at the moment we haven't created

00:08:24,249 --> 00:08:30,309
any deployable unit like a zip file or

00:08:26,319 --> 00:08:34,419
debian package and an archetype decides

00:08:30,309 --> 00:08:36,339
what formats you can build and these

00:08:34,419 --> 00:08:39,459
formats and this is the big difference

00:08:36,339 --> 00:08:41,800
in an SP teenage package we have to kind

00:08:39,459 --> 00:08:44,259
of plug ins with the archetypes you have

00:08:41,800 --> 00:08:45,850
seen that define which contents are

00:08:44,259 --> 00:08:47,800
packaged that's the in content of the

00:08:45,850 --> 00:08:50,680
staging directory and then we have

00:08:47,800 --> 00:08:53,680
former plugins that define what format

00:08:50,680 --> 00:08:55,899
you can actually build okay and this is

00:08:53,680 --> 00:08:58,839
one of the most parts confuses people

00:08:55,899 --> 00:08:59,740
about native packager because we're

00:08:58,839 --> 00:09:02,560
developers we go

00:08:59,740 --> 00:09:04,150
Google say okay SBT Ducker image then he

00:09:02,560 --> 00:09:06,940
come to our dacha plugin page they

00:09:04,150 --> 00:09:08,740
enable the darker plugin and things

00:09:06,940 --> 00:09:12,310
don't work out that way because the

00:09:08,740 --> 00:09:14,980
darker plugin only will stock our images

00:09:12,310 --> 00:09:16,480
but doesn't configure it built so these

00:09:14,980 --> 00:09:18,940
are all formats i've already mentioned

00:09:16,480 --> 00:09:23,650
it docker images zip files Debian

00:09:18,940 --> 00:09:26,980
packages and these formats they are all

00:09:23,650 --> 00:09:29,170
structured the same way every format has

00:09:26,980 --> 00:09:31,630
its own auto plug-in like a universal

00:09:29,170 --> 00:09:34,660
plug-in that build sips like a plug-in

00:09:31,630 --> 00:09:38,770
for docker and every plugin defines its

00:09:34,660 --> 00:09:41,950
own scope SBT has a three contrary

00:09:38,770 --> 00:09:44,730
scoping access so it has a project scope

00:09:41,950 --> 00:09:49,240
configuration scope and task scope and

00:09:44,730 --> 00:09:54,310
as former plugin defines a configuration

00:09:49,240 --> 00:09:57,430
scope so you can scope pre-existing

00:09:54,310 --> 00:09:59,860
settings to a specific format for

00:09:57,430 --> 00:10:03,010
instance docker defines a docker

00:09:59,860 --> 00:10:05,650
configuration scope and we reuse the

00:10:03,010 --> 00:10:08,440
target setting from SPT which is a

00:10:05,650 --> 00:10:10,810
folder where you can place target files

00:10:08,440 --> 00:10:12,880
that get generated and we scope that to

00:10:10,810 --> 00:10:15,160
the darker configuration scope so you

00:10:12,880 --> 00:10:16,780
can easily override it and we don't have

00:10:15,160 --> 00:10:18,130
to introduce new tasking settings for

00:10:16,780 --> 00:10:22,420
trivial things that are already

00:10:18,130 --> 00:10:24,880
pre-existing in SBT and of course there

00:10:22,420 --> 00:10:27,520
are format specific settings because

00:10:24,880 --> 00:10:31,810
every format is a bit different and has

00:10:27,520 --> 00:10:34,090
some specialties and we generate the

00:10:31,810 --> 00:10:36,880
settings the tasks are prefixed with a

00:10:34,090 --> 00:10:40,900
format name so for instance the RPM

00:10:36,880 --> 00:10:44,050
vendor or a darker base image so you can

00:10:40,900 --> 00:10:47,500
identify a format very easily by the

00:10:44,050 --> 00:10:49,780
prefix so it's always in fraud up front

00:10:47,500 --> 00:10:51,310
in the the Tucker plug-in or the

00:10:49,780 --> 00:10:53,920
configuration scope or in the task

00:10:51,310 --> 00:10:58,450
itself so you can very easily figure out

00:10:53,920 --> 00:11:01,600
what things a plug-in uses a specific

00:10:58,450 --> 00:11:03,940
form of plug-in so let's see this in

00:11:01,600 --> 00:11:06,340
action I don't have to change anything

00:11:03,940 --> 00:11:07,960
in my build SBT because the Java app

00:11:06,340 --> 00:11:11,230
packaging archetype enables all the

00:11:07,960 --> 00:11:12,770
formats it supports so all formats are

00:11:11,230 --> 00:11:16,730
already enabled

00:11:12,770 --> 00:11:19,040
so the easiest one is universal and I'm

00:11:16,730 --> 00:11:23,060
calling the the package bin task

00:11:19,040 --> 00:11:25,399
this is predefined by SBT the normal

00:11:23,060 --> 00:11:27,910
implementation so the compiled package

00:11:25,399 --> 00:11:30,770
bin task generates the application jar

00:11:27,910 --> 00:11:33,700
and SBT native packager reuses the

00:11:30,770 --> 00:11:37,339
settings to create your distributable

00:11:33,700 --> 00:11:41,660
package so when we call it what it

00:11:37,339 --> 00:11:44,390
actually does it uses its creates a

00:11:41,660 --> 00:11:45,980
staging directory and calls upon it so

00:11:44,390 --> 00:11:48,500
you can actually do that on your own

00:11:45,980 --> 00:11:51,230
with just the stage command and zip it

00:11:48,500 --> 00:11:56,480
afterwards and when you look at the

00:11:51,230 --> 00:11:58,640
target folder take a look at Universal

00:11:56,480 --> 00:12:01,850
you'll see that a zip file is created

00:11:58,640 --> 00:12:05,089
with exactly the contents of the staging

00:12:01,850 --> 00:12:09,200
directory ok pretty straightforward we

00:12:05,089 --> 00:12:10,880
can do the same thing for debian we use

00:12:09,200 --> 00:12:12,560
the debian scope and if you use

00:12:10,880 --> 00:12:14,930
auto-completion you can see all the

00:12:12,560 --> 00:12:16,490
settings that are defined in the

00:12:14,930 --> 00:12:17,360
configuration scope so if you want to

00:12:16,490 --> 00:12:20,390
dig deeper

00:12:17,360 --> 00:12:23,060
just use the auto-completion to guide

00:12:20,390 --> 00:12:26,029
you through and of course there's also

00:12:23,060 --> 00:12:28,070
package bid tasks and it succeeds but it

00:12:26,029 --> 00:12:30,140
gives us a warning so sorry for that

00:12:28,070 --> 00:12:31,970
it's in German you're going to started

00:12:30,140 --> 00:12:34,220
localizing all error messages which some

00:12:31,970 --> 00:12:38,300
kinds sometimes kind of weird but it

00:12:34,220 --> 00:12:41,149
says maintainer is missing so somehow

00:12:38,300 --> 00:12:45,649
there seems to be something missing

00:12:41,149 --> 00:12:48,440
missing in our staging directory and we

00:12:45,649 --> 00:12:52,070
can actually take a look at what's

00:12:48,440 --> 00:12:54,890
generated and what is used to build a

00:12:52,070 --> 00:12:57,020
debian package so we call Debian stage

00:12:54,890 --> 00:12:59,209
which is the same as stage but for

00:12:57,020 --> 00:13:03,589
Debian's and for debian our formats and

00:12:59,209 --> 00:13:07,010
it's placed in this directory so simply

00:13:03,589 --> 00:13:11,000
in scala days target folder

00:13:07,010 --> 00:13:13,370
nothing named like debian the reason for

00:13:11,000 --> 00:13:15,170
this is me because when i started

00:13:13,370 --> 00:13:17,990
working on this 5 years ago

00:13:15,170 --> 00:13:20,480
I messed some things up and I haven't

00:13:17,990 --> 00:13:21,980
cleaned them up yet so sorry sorry for

00:13:20,480 --> 00:13:23,930
that but in the end you don't care

00:13:21,980 --> 00:13:25,490
because an SPT you just reuse the

00:13:23,930 --> 00:13:26,030
outputs of pre-existing tasks and you

00:13:25,490 --> 00:13:29,480
actually don't

00:13:26,030 --> 00:13:34,850
where they're placed so we take a look

00:13:29,480 --> 00:13:37,060
at Scala days 2018 in the Debian control

00:13:34,850 --> 00:13:40,010
file which is used for Debian packages

00:13:37,060 --> 00:13:42,680
to their all the metadata for a package

00:13:40,010 --> 00:13:44,990
and we can see that the maintainer is

00:13:42,680 --> 00:13:49,790
indeed empty and this is what SP TX

00:13:44,990 --> 00:13:52,520
complains about when we go to the folder

00:13:49,790 --> 00:13:54,430
here we can actually run the the Debian

00:13:52,520 --> 00:13:59,450
package command SBT native packager

00:13:54,430 --> 00:14:08,930
execute and get the same error message

00:13:59,450 --> 00:14:10,490
or fully oh so this way exactly we see

00:14:08,930 --> 00:14:13,250
the maintainer is missing the error

00:14:10,490 --> 00:14:15,740
message is coming here as well and this

00:14:13,250 --> 00:14:17,000
is nothing this is what I mean by SBT

00:14:15,740 --> 00:14:18,830
native package of bills on your native

00:14:17,000 --> 00:14:21,590
platform it's great so staging directory

00:14:18,830 --> 00:14:23,470
and execute your native build tool to

00:14:21,590 --> 00:14:25,670
create the package so you can easily

00:14:23,470 --> 00:14:28,070
debug your built by using the stage

00:14:25,670 --> 00:14:29,840
command and your native build tool that

00:14:28,070 --> 00:14:34,240
you want to use and this applies to all

00:14:29,840 --> 00:14:39,140
so this applies to docker rpm Debian etc

00:14:34,240 --> 00:14:41,960
so we can easily fix this by setting a

00:14:39,140 --> 00:14:44,420
maintainer and I mentioned

00:14:41,960 --> 00:14:47,890
auto-completion already let's take a

00:14:44,420 --> 00:14:55,120
look well there's a maintainer setting

00:14:47,890 --> 00:15:02,750
we write something in there save it

00:14:55,120 --> 00:15:07,010
reload and build and well let's try

00:15:02,750 --> 00:15:09,500
Debian package and the one who went away

00:15:07,010 --> 00:15:11,380
so the it seems the maintainer set we

00:15:09,500 --> 00:15:17,450
can verify that by calling stage and

00:15:11,380 --> 00:15:20,090
take a look again at the at the control

00:15:17,450 --> 00:15:23,900
file and as you can see then the

00:15:20,090 --> 00:15:26,690
maintain is not placed in this file if I

00:15:23,900 --> 00:15:30,200
want to have different maintainer for

00:15:26,690 --> 00:15:35,470
rpm and Debian I would simply scope

00:15:30,200 --> 00:15:38,360
these to the correct format and then I

00:15:35,470 --> 00:15:39,880
would have two different two different

00:15:38,360 --> 00:15:43,569
maintenance for two different

00:15:39,880 --> 00:15:45,670
package outputs okay that is usually how

00:15:43,569 --> 00:15:49,920
you work with configuration scopes and

00:15:45,670 --> 00:15:54,370
how you debug your build

00:15:49,920 --> 00:15:56,709
so these formats they form a sort of

00:15:54,370 --> 00:15:59,500
hierarchy at the very top there's

00:15:56,709 --> 00:16:01,420
Universal and everything in Universal is

00:15:59,500 --> 00:16:04,509
deployable to every system this is why

00:16:01,420 --> 00:16:06,279
it's called Universal and everything

00:16:04,509 --> 00:16:09,040
that's in Universal is also in all

00:16:06,279 --> 00:16:10,420
concrete systems below so everything you

00:16:09,040 --> 00:16:13,630
put in Universal it's in your taco image

00:16:10,420 --> 00:16:16,540
in the Debian package etc okay and this

00:16:13,630 --> 00:16:19,810
is where most of the users configure or

00:16:16,540 --> 00:16:22,690
extend their build if they need to add

00:16:19,810 --> 00:16:25,630
additional files because most of you

00:16:22,690 --> 00:16:27,610
build JVM applications and they run on

00:16:25,630 --> 00:16:29,980
all these systems so everything you put

00:16:27,610 --> 00:16:32,769
there should be deployable on all other

00:16:29,980 --> 00:16:35,440
systems there's one exception for

00:16:32,769 --> 00:16:39,069
instance if you have dll files for

00:16:35,440 --> 00:16:41,350
Windows or C libraries that are only

00:16:39,069 --> 00:16:43,149
operate on a specific system then it's

00:16:41,350 --> 00:16:46,089
nice to have that you can scope them to

00:16:43,149 --> 00:16:49,329
a debian system or REM rpm or Windows

00:16:46,089 --> 00:16:51,939
but this is most specific use case which

00:16:49,329 --> 00:16:54,720
most of us don't have to care about so

00:16:51,939 --> 00:16:57,310
Universal is most of the time good to go

00:16:54,720 --> 00:16:59,250
so speaking about the contents of the

00:16:57,310 --> 00:17:03,550
package what will they come from and

00:16:59,250 --> 00:17:06,939
there's a very simple concept for that

00:17:03,550 --> 00:17:10,120
it's called mappings it's introduced by

00:17:06,939 --> 00:17:12,490
SBT they use it to map the source file

00:17:10,120 --> 00:17:15,100
of the class files to your jar and for

00:17:12,490 --> 00:17:17,260
other stuff for recommendation and SBT

00:17:15,100 --> 00:17:19,659
native packager uses it as well to say

00:17:17,260 --> 00:17:22,179
okay what contents should be put where

00:17:19,659 --> 00:17:25,089
in your output package and this is

00:17:22,179 --> 00:17:27,789
exactly how the API works so we have you

00:17:25,089 --> 00:17:30,520
have a mappings and you have a tuple the

00:17:27,789 --> 00:17:32,620
left-hand side is a source file which is

00:17:30,520 --> 00:17:34,570
an actually file that must exist on your

00:17:32,620 --> 00:17:36,820
on your disk this can be produced by

00:17:34,570 --> 00:17:40,120
some build step or it's a static file is

00:17:36,820 --> 00:17:42,990
already pre-existing and the second part

00:17:40,120 --> 00:17:46,630
of the tuple is a string which is a

00:17:42,990 --> 00:17:50,530
relative path in your output package so

00:17:46,630 --> 00:17:53,610
this mapping here would generate would

00:17:50,530 --> 00:17:56,260
put the readme a file into the root

00:17:53,610 --> 00:17:59,590
of your package and call it readme as

00:17:56,260 --> 00:18:01,270
well most of the time you will do an

00:17:59,590 --> 00:18:03,760
native package or something like this

00:18:01,270 --> 00:18:06,970
you configure configure your mappings to

00:18:03,760 --> 00:18:09,220
a specific format so in this case we add

00:18:06,970 --> 00:18:11,920
something to a universal package so it

00:18:09,220 --> 00:18:15,940
will be available in all formats you're

00:18:11,920 --> 00:18:18,010
building okay

00:18:15,940 --> 00:18:20,380
because mappings are such an important

00:18:18,010 --> 00:18:22,090
concept native package comes with a

00:18:20,380 --> 00:18:24,700
helping a helper class which is called

00:18:22,090 --> 00:18:27,880
mappings helper you can import it and

00:18:24,700 --> 00:18:31,030
then get things like content off and

00:18:27,880 --> 00:18:33,640
directory of we can put in the directory

00:18:31,030 --> 00:18:37,020
and all the contents will be added as

00:18:33,640 --> 00:18:39,490
they are on on your disk to the mappings

00:18:37,020 --> 00:18:41,380
and because it's such a useful concept

00:18:39,490 --> 00:18:42,460
there were some SBT plugins importing

00:18:41,380 --> 00:18:44,680
native package are only for these

00:18:42,460 --> 00:18:49,450
helpers which are actually just a

00:18:44,680 --> 00:18:54,730
wrapper around the path api from SBT so

00:18:49,450 --> 00:18:56,740
we added these in SBT 1 dot X you can

00:18:54,730 --> 00:18:58,870
have them for free without native

00:18:56,740 --> 00:19:01,420
package it's simply called path content

00:18:58,870 --> 00:19:05,230
of directory of UF them as well because

00:19:01,420 --> 00:19:09,040
first others the path API and path

00:19:05,230 --> 00:19:12,600
finder API somehow a bit difficult so we

00:19:09,040 --> 00:19:15,730
put these small little helpers in there

00:19:12,600 --> 00:19:18,520
so the mappings are very simple it's a

00:19:15,730 --> 00:19:20,440
simple sequence of tuples where you have

00:19:18,520 --> 00:19:24,190
a source file to your destination path

00:19:20,440 --> 00:19:25,690
but yet very powerful because you can do

00:19:24,190 --> 00:19:27,870
whatever you want with it it's so simple

00:19:25,690 --> 00:19:30,520
that is there are no limits for you

00:19:27,870 --> 00:19:32,350
there's a small disclaimer if you want

00:19:30,520 --> 00:19:34,510
to configure Linux permissions it's a

00:19:32,350 --> 00:19:36,490
bit more complicated for Linux systems

00:19:34,510 --> 00:19:38,320
we have Linux package mappings which

00:19:36,490 --> 00:19:41,740
wrap the existing mappings and add the

00:19:38,320 --> 00:19:45,330
metadata like which user and which

00:19:41,740 --> 00:19:48,790
permissions just use a half of this file

00:19:45,330 --> 00:19:50,170
ok so these are all about the the core

00:19:48,790 --> 00:19:53,500
concepts and to how they work together

00:19:50,170 --> 00:19:58,150
and the second part is to put them in

00:19:53,500 --> 00:20:01,450
practice and to do that we will build a

00:19:58,150 --> 00:20:05,770
new archetype from scratch called native

00:20:01,450 --> 00:20:06,909
app packaging and we will build some

00:20:05,770 --> 00:20:09,220
requirements for it so

00:20:06,909 --> 00:20:11,440
first we want to package the existing

00:20:09,220 --> 00:20:13,659
code I already showed you but as a

00:20:11,440 --> 00:20:15,399
scalar native app so when I create a

00:20:13,659 --> 00:20:19,179
package I don't want to create a Java

00:20:15,399 --> 00:20:22,440
package but a native package which

00:20:19,179 --> 00:20:25,659
contains the native binary I can execute

00:20:22,440 --> 00:20:28,479
to make it easier for users I want to

00:20:25,659 --> 00:20:31,690
also include a symlink that

00:20:28,479 --> 00:20:32,919
automatically adds the binary as

00:20:31,690 --> 00:20:34,749
assembling to user bin

00:20:32,919 --> 00:20:36,609
so when I install my package on a Linux

00:20:34,749 --> 00:20:39,099
system I can simply run it from my

00:20:36,609 --> 00:20:41,109
console because most Linux systems have

00:20:39,099 --> 00:20:46,599
the user bin folder in the path

00:20:41,109 --> 00:20:50,019
environment last but not least we will

00:20:46,599 --> 00:20:52,840
add a system loader systemd to manage

00:20:50,019 --> 00:20:55,239
our application so native packager comes

00:20:52,840 --> 00:21:00,190
with three system loader types system D

00:20:55,239 --> 00:21:03,309
system V and up start up start is rarely

00:21:00,190 --> 00:21:06,369
used nowadays because we want to started

00:21:03,309 --> 00:21:09,849
developing it I guess but dropped it for

00:21:06,369 --> 00:21:12,789
system D so there are almost no systems

00:21:09,849 --> 00:21:14,919
using it or really using it I know about

00:21:12,789 --> 00:21:17,889
so most of the systems use iOS system v

00:21:14,919 --> 00:21:22,479
which is a bunch of bash scripts or

00:21:17,889 --> 00:21:24,729
system D and we today so as a developer

00:21:22,479 --> 00:21:26,979
I enjoy system D because it's way

00:21:24,729 --> 00:21:29,619
simpler but there are some very

00:21:26,979 --> 00:21:32,559
religious wars going on what system D is

00:21:29,619 --> 00:21:40,059
good for and what not so but I'll keep

00:21:32,559 --> 00:21:43,059
all of that okay so let's start so we

00:21:40,059 --> 00:21:44,710
can first we disable the the Java app

00:21:43,059 --> 00:21:53,889
packaging because we want to create a

00:21:44,710 --> 00:21:56,700
new one so the first thing we do we try

00:21:53,889 --> 00:22:00,429
to configure our built for basic format

00:21:56,700 --> 00:22:02,830
this means we want Universal packaging

00:22:00,429 --> 00:22:07,119
to works so I want to create a zip file

00:22:02,830 --> 00:22:09,190
with my Scala native code and to create

00:22:07,119 --> 00:22:11,769
Scala native I need the Scala native

00:22:09,190 --> 00:22:14,289
plugin I added it already to the plugins

00:22:11,769 --> 00:22:16,119
SBT you need to do a little more setup

00:22:14,289 --> 00:22:19,399
on your local machine but you can read

00:22:16,119 --> 00:22:25,869
it up and the very very intuitive

00:22:19,399 --> 00:22:32,320
native documentation okay so I reload my

00:22:25,869 --> 00:22:34,519
my my built and scholar native

00:22:32,320 --> 00:22:38,210
introduces a new task which is called

00:22:34,519 --> 00:22:46,279
native link which generates the binary

00:22:38,210 --> 00:22:51,019
file it generates the file in target

00:22:46,279 --> 00:22:53,719
Scala days 2018 out and I can still run

00:22:51,019 --> 00:22:58,369
it so that's the same application but

00:22:53,719 --> 00:23:00,859
now as a self-contained binary when I

00:22:58,369 --> 00:23:04,639
call stage at this point I'm super fast

00:23:00,859 --> 00:23:06,349
because it actually does nothing when I

00:23:04,639 --> 00:23:09,369
take a look at the stage folder or try

00:23:06,349 --> 00:23:12,999
to it says well there's no file because

00:23:09,369 --> 00:23:17,149
when I take a look at my mappings in

00:23:12,999 --> 00:23:20,089
Universal they are empty so I enabled

00:23:17,149 --> 00:23:22,249
the universal plugin format but the

00:23:20,089 --> 00:23:25,009
plug-in itself doesn't configure

00:23:22,249 --> 00:23:27,289
anything in your build it just adds its

00:23:25,009 --> 00:23:29,389
configuration scope configures all the

00:23:27,289 --> 00:23:31,009
settings it provides itself but it

00:23:29,389 --> 00:23:33,529
doesn't touch your mappings because

00:23:31,009 --> 00:23:35,299
that's not part of what a former plug-in

00:23:33,529 --> 00:23:40,070
does that's what an archetype does and

00:23:35,299 --> 00:23:45,200
this is what we do now so we add to our

00:23:40,070 --> 00:23:49,190
Universal mappings we map the output of

00:23:45,200 --> 00:23:51,950
the native link amount we scope it to

00:23:49,190 --> 00:23:53,899
compile because this is a runtime

00:23:51,950 --> 00:23:58,190
artifact we want your artifact we want

00:23:53,899 --> 00:24:00,950
to generate and we put it in our output

00:23:58,190 --> 00:24:04,969
package we want to put it under in a bin

00:24:00,950 --> 00:24:06,950
folder as well this is once it's better

00:24:04,969 --> 00:24:09,080
it's best practice you see the most of

00:24:06,950 --> 00:24:10,999
the distributions you get and we will

00:24:09,080 --> 00:24:17,570
also see later that it's required for a

00:24:10,999 --> 00:24:19,789
system deep to work and this is the part

00:24:17,570 --> 00:24:21,889
now where you see how we try to make

00:24:19,789 --> 00:24:24,739
everything acceptable in a native

00:24:21,889 --> 00:24:27,409
packager what should be the name of the

00:24:24,739 --> 00:24:29,719
the output of the of our binary and

00:24:27,409 --> 00:24:32,150
there's a task for it or a setting

00:24:29,719 --> 00:24:35,630
called executable script name

00:24:32,150 --> 00:24:39,560
and we use that so the setting is

00:24:35,630 --> 00:24:42,080
derived from your project name which is

00:24:39,560 --> 00:24:44,090
a sensible default but if you'd like to

00:24:42,080 --> 00:24:45,770
override it at some place you simply

00:24:44,090 --> 00:24:48,350
override the setting and all the other

00:24:45,770 --> 00:24:51,170
places that need the executable script

00:24:48,350 --> 00:24:54,440
name will automatically point to the

00:24:51,170 --> 00:24:59,480
right script name okay so this is all

00:24:54,440 --> 00:25:06,040
now we added our binary to our package

00:24:59,480 --> 00:25:08,090
and with a sensible path we reload and

00:25:06,040 --> 00:25:11,000
let's take a look at the universal

00:25:08,090 --> 00:25:16,010
mappings you see that the compilation

00:25:11,000 --> 00:25:19,370
step is happening now and there's one

00:25:16,010 --> 00:25:23,020
mapping edit which is our output file to

00:25:19,370 --> 00:25:25,910
bins galleries so let's try stage again

00:25:23,020 --> 00:25:28,130
which exactly does the same thing

00:25:25,910 --> 00:25:30,790
because it's depends on the mappings and

00:25:28,130 --> 00:25:35,900
the mappings depend on the native link

00:25:30,790 --> 00:25:38,600
and now we get this output so we have

00:25:35,900 --> 00:25:41,420
our staging directory which has a binary

00:25:38,600 --> 00:25:43,610
which I can execute which is the same as

00:25:41,420 --> 00:25:48,590
we saw before we simply called native

00:25:43,610 --> 00:25:51,290
link ok so this was part 1 packaging our

00:25:48,590 --> 00:25:53,270
existing code was got a native so it

00:25:51,290 --> 00:25:56,120
took us two lines of SBT to get there

00:25:53,270 --> 00:25:57,710
we're just pretty ok

00:25:56,120 --> 00:26:00,680
you could hard code the executable name

00:25:57,710 --> 00:26:05,630
yourself it's totally fine

00:26:00,680 --> 00:26:11,330
but it's easier in the next steps if we

00:26:05,630 --> 00:26:14,890
use a setting for this and now we do the

00:26:11,330 --> 00:26:18,110
the Linux in linking part and because

00:26:14,890 --> 00:26:22,130
symlink only sibling only makes sense on

00:26:18,110 --> 00:26:25,810
a Linux system we support another format

00:26:22,130 --> 00:26:27,830
and in this case the Debian plug-in

00:26:25,810 --> 00:26:29,480
because I have a bun to machine and

00:26:27,830 --> 00:26:34,790
create a Debian package I can easily

00:26:29,480 --> 00:26:39,700
install and so we can verify that that

00:26:34,790 --> 00:26:41,990
that works because at the moment I can't

00:26:39,700 --> 00:26:43,760
really call anything on Debian you see

00:26:41,990 --> 00:26:44,970
there's only the maintainer I've

00:26:43,760 --> 00:26:47,790
configured at

00:26:44,970 --> 00:26:49,440
at the top but nothing else and now when

00:26:47,790 --> 00:26:54,300
I reload because I enabled the Debian

00:26:49,440 --> 00:26:56,910
plug-in there's a bunch more tasks and

00:26:54,300 --> 00:26:59,190
settings already configured and I can

00:26:56,910 --> 00:27:05,340
build my Debian package now which

00:26:59,190 --> 00:27:09,690
contains the native our native code ok

00:27:05,340 --> 00:27:12,060
so now let's add the sim link and we can

00:27:09,690 --> 00:27:13,860
try to find a sensible setting by

00:27:12,060 --> 00:27:17,880
starting with Linux and there's already

00:27:13,860 --> 00:27:20,010
a task key called Linux package symlinks

00:27:17,880 --> 00:27:22,830
which looks pretty promising there's a

00:27:20,010 --> 00:27:25,740
list of some links and we want to add a

00:27:22,830 --> 00:27:34,080
symlink for it and to do that we need to

00:27:25,740 --> 00:27:35,520
import the required case class so as you

00:27:34,080 --> 00:27:39,240
can see native picture is pretty old we

00:27:35,520 --> 00:27:42,300
haven't switched to light Bend yet it's

00:27:39,240 --> 00:27:45,420
fine so every format has its own package

00:27:42,300 --> 00:27:52,020
as well in this case Linux and there's

00:27:45,420 --> 00:27:56,790
our Linux term link case class so we add

00:27:52,020 --> 00:27:59,250
one a Linux symlink to our output and we

00:27:56,790 --> 00:28:04,080
have two strings so first is the link

00:27:59,250 --> 00:28:06,290
and the second is the destination so the

00:28:04,080 --> 00:28:08,700
link is the actual thing that gets

00:28:06,290 --> 00:28:10,260
placed on disk and that points to the

00:28:08,700 --> 00:28:12,360
destination this is pretty

00:28:10,260 --> 00:28:16,020
straightforward because we want it in

00:28:12,360 --> 00:28:18,920
user bin and while it makes sense to

00:28:16,020 --> 00:28:22,110
give it the same name as our executable

00:28:18,920 --> 00:28:24,480
in our package okay so we reuse the

00:28:22,110 --> 00:28:26,960
executable script name so if we change

00:28:24,480 --> 00:28:30,180
the setting somewhere or another user

00:28:26,960 --> 00:28:32,070
things will still work and still look

00:28:30,180 --> 00:28:34,350
the same

00:28:32,070 --> 00:28:38,460
so the destination is a bit more

00:28:34,350 --> 00:28:41,640
complicated and business where you see

00:28:38,460 --> 00:28:46,520
that native packages very old and we

00:28:41,640 --> 00:28:48,570
really try to not break your builds by

00:28:46,520 --> 00:28:52,950
changing settings and removing them and

00:28:48,570 --> 00:28:54,720
refactoring like we want to and the

00:28:52,950 --> 00:28:56,700
first thing is the destination so we

00:28:54,720 --> 00:28:58,020
need to know where is package actually

00:28:56,700 --> 00:29:00,480
installed

00:28:58,020 --> 00:29:06,660
and of course there's a setting for it

00:29:00,480 --> 00:29:10,230
and we search for installation and we

00:29:06,660 --> 00:29:13,890
find default Linux installation and as

00:29:10,230 --> 00:29:18,330
you may noticed may notice it starts

00:29:13,890 --> 00:29:19,680
with default and not with Linux so it

00:29:18,330 --> 00:29:21,270
should be called Linux default

00:29:19,680 --> 00:29:24,030
installation location so you can easily

00:29:21,270 --> 00:29:24,840
figure out that it's a setting from the

00:29:24,030 --> 00:29:27,720
Linux plugin

00:29:24,840 --> 00:29:30,390
but we haven't reflected that yet to

00:29:27,720 --> 00:29:33,090
keep your builds intact but this is the

00:29:30,390 --> 00:29:35,900
root directory where your package is

00:29:33,090 --> 00:29:35,900
installed ok

00:29:38,300 --> 00:29:46,950
the package itself needs a directory in

00:29:42,900 --> 00:29:49,320
your default installation location and

00:29:46,950 --> 00:29:51,750
there's yet another setting which is

00:29:49,320 --> 00:29:53,880
called package name which can be used

00:29:51,750 --> 00:29:55,740
for various kind of metadata so if you

00:29:53,880 --> 00:29:58,110
want to install your package by a

00:29:55,740 --> 00:30:01,380
package manager then you have the

00:29:58,110 --> 00:30:03,750
package name there in the end the

00:30:01,380 --> 00:30:06,270
default value is derived from name so

00:30:03,750 --> 00:30:08,670
everything is called scanner days but

00:30:06,270 --> 00:30:10,530
you can pick specific parts of your

00:30:08,670 --> 00:30:12,750
build if you like to and configure it

00:30:10,530 --> 00:30:15,780
because you don't care about execute

00:30:12,750 --> 00:30:18,450
script name maybe but your company has

00:30:15,780 --> 00:30:20,100
some naming conventions on how packages

00:30:18,450 --> 00:30:23,160
should be named so you can just

00:30:20,100 --> 00:30:26,160
configure that small part and leave the

00:30:23,160 --> 00:30:28,110
rest as is and you don't blow blow up

00:30:26,160 --> 00:30:29,850
your whole SBT build with tons of

00:30:28,110 --> 00:30:33,990
configuration but only the parts you

00:30:29,850 --> 00:30:37,500
really care about and then we're now in

00:30:33,990 --> 00:30:41,010
the actual staging folder so what's get

00:30:37,500 --> 00:30:44,130
packaged as as your your application and

00:30:41,010 --> 00:30:48,930
then we are in binary executable script

00:30:44,130 --> 00:30:49,560
name and having the value so we created

00:30:48,930 --> 00:30:52,170
a symlink

00:30:49,560 --> 00:30:54,450
from user bin to the default

00:30:52,170 --> 00:30:58,560
installation where the package is placed

00:30:54,450 --> 00:31:05,930
and then to the actual content okay so

00:30:58,560 --> 00:31:05,930
we reload SBT rebuilt our package

00:31:06,789 --> 00:31:18,650
and then let's see so I plant this for

00:31:15,980 --> 00:31:20,210
ten fingers and passwords are really

00:31:18,650 --> 00:31:24,770
hard with nine fingers if you have like

00:31:20,210 --> 00:31:27,500
muscle memory yeah worked out okay so as

00:31:24,770 --> 00:31:30,230
you can see native packager the debian

00:31:27,500 --> 00:31:34,309
plug-in at some infrastructure around so

00:31:30,230 --> 00:31:37,520
it creates a system group and system

00:31:34,309 --> 00:31:38,690
user which is again both settings demon

00:31:37,520 --> 00:31:41,149
user and daemon group which you can

00:31:38,690 --> 00:31:45,380
customize if you like they don't get a

00:31:41,149 --> 00:31:50,120
shell and i can call now holidays

00:31:45,380 --> 00:31:56,000
directly from my CLI so the sim linking

00:31:50,120 --> 00:31:59,390
seem to work which is nice and i perch

00:31:56,000 --> 00:32:03,110
it so things are removed and when i now

00:31:59,390 --> 00:32:06,289
try to call solid against khalid ASIC

00:32:03,110 --> 00:32:07,000
can't find the banner anymore so we

00:32:06,289 --> 00:32:10,549
added a symlink

00:32:07,000 --> 00:32:12,860
in four lines of SBT which is pretty

00:32:10,549 --> 00:32:14,860
pretty nice I guess so now we have the

00:32:12,860 --> 00:32:23,539
last part and we want to manage our

00:32:14,860 --> 00:32:26,690
application with system D and this is

00:32:23,539 --> 00:32:30,049
only one line because we've done all the

00:32:26,690 --> 00:32:36,529
previous work we only add system the

00:32:30,049 --> 00:32:38,720
system D plug-in and we're done so this

00:32:36,529 --> 00:32:44,179
is one was one of the major refactorings

00:32:38,720 --> 00:32:45,529
we did last year we split up all the

00:32:44,179 --> 00:32:47,779
system loader and two separate auto

00:32:45,529 --> 00:32:51,190
plugins and remove them out of the Java

00:32:47,779 --> 00:32:54,289
server app packaging plug-in which

00:32:51,190 --> 00:32:56,899
formerly controlled all these things but

00:32:54,289 --> 00:33:00,289
now you can use these system loader

00:32:56,899 --> 00:33:02,090
separately and easily and can more

00:33:00,289 --> 00:33:06,320
easily combine them with other packaging

00:33:02,090 --> 00:33:08,659
plugins which is kind of nice I also at

00:33:06,320 --> 00:33:12,950
the main method also change the main

00:33:08,659 --> 00:33:15,679
method so it runs forever so there's a

00:33:12,950 --> 00:33:17,720
while true loop you have did not see

00:33:15,679 --> 00:33:21,990
that

00:33:17,720 --> 00:33:31,020
and when a knob might have even packaged

00:33:21,990 --> 00:33:38,570
a bit more is generated now we can see

00:33:31,020 --> 00:33:42,900
that when we install our our package yep

00:33:38,570 --> 00:33:46,980
so when I call system control oh oh yeah

00:33:42,900 --> 00:33:55,290
should have reloaded first right yeah so

00:33:46,980 --> 00:33:59,880
clean it because in there when you

00:33:55,290 --> 00:34:02,460
install the the package you'll see that

00:33:59,880 --> 00:34:05,730
there's a new sibling generated for

00:34:02,460 --> 00:34:07,980
system D well the system D configuration

00:34:05,730 --> 00:34:13,380
file which is named Scala days 2018

00:34:07,980 --> 00:34:16,460
service as placed and we can now take a

00:34:13,380 --> 00:34:23,250
look at our application with system D I

00:34:16,460 --> 00:34:28,620
can also stop it and start it like you

00:34:23,250 --> 00:34:30,480
used to so now it's it's stopped and you

00:34:28,620 --> 00:34:33,240
can start it again I'm going to take a

00:34:30,480 --> 00:34:37,860
look it's running again so pretty

00:34:33,240 --> 00:34:40,560
straightforward so I mentioned the the

00:34:37,860 --> 00:34:42,710
pin here is very important everything in

00:34:40,560 --> 00:34:47,429
the system D script is configurable

00:34:42,710 --> 00:34:52,590
other than this small folder this was

00:34:47,429 --> 00:34:54,720
hard coded by me and but nobody has

00:34:52,590 --> 00:34:56,520
complained so far because most of the

00:34:54,720 --> 00:34:59,610
packages haven't been folder way and

00:34:56,520 --> 00:35:02,940
they put their binaries and so it just

00:34:59,610 --> 00:35:05,580
works this is where we try to this is

00:35:02,940 --> 00:35:08,100
some kind of these best practices and we

00:35:05,580 --> 00:35:10,140
try to put into native packager so even

00:35:08,100 --> 00:35:12,600
when you can't configure it most of the

00:35:10,140 --> 00:35:15,660
users don't notice it because all the

00:35:12,600 --> 00:35:19,560
systems it will that way and there's no

00:35:15,660 --> 00:35:22,170
need to configure it okay and if you

00:35:19,560 --> 00:35:24,900
want to configure it it's pretty easy to

00:35:22,170 --> 00:35:31,920
well make it so

00:35:24,900 --> 00:35:34,200
okay so I would like to sum things up we

00:35:31,920 --> 00:35:36,300
did today this was a very straight to

00:35:34,200 --> 00:35:39,150
perform well this is native packager

00:35:36,300 --> 00:35:42,270
from the beginning to the end and to do

00:35:39,150 --> 00:35:44,280
some more advanced stuff so the I

00:35:42,270 --> 00:35:46,080
already mentioned it during the talk

00:35:44,280 --> 00:35:49,050
there are two types of Auto plugins and

00:35:46,080 --> 00:35:51,090
this is the continuous story for years

00:35:49,050 --> 00:35:52,560
now that people confuse these two there

00:35:51,090 --> 00:35:55,610
are these archetypes and the former

00:35:52,560 --> 00:35:58,590
plugins and the archetypes do the really

00:35:55,610 --> 00:36:00,090
heavy lifting but aren't magic so they

00:35:58,590 --> 00:36:02,700
configure a build for a specific use

00:36:00,090 --> 00:36:06,720
case the Java app packaging is actually

00:36:02,700 --> 00:36:09,560
much like the native packaging that we

00:36:06,720 --> 00:36:13,620
just built the only difference is that

00:36:09,560 --> 00:36:17,880
it figures out your class path so this

00:36:13,620 --> 00:36:19,470
is some SBT magic what library

00:36:17,880 --> 00:36:21,750
dependents do you have but in the end it

00:36:19,470 --> 00:36:24,030
puts them in the mappings under the Lib

00:36:21,750 --> 00:36:26,370
folder and this figuring out it's not a

00:36:24,030 --> 00:36:28,800
lot of code but you have to know some of

00:36:26,370 --> 00:36:32,910
the SBT interns for that but that has

00:36:28,800 --> 00:36:37,680
already been done so it's nothing scary

00:36:32,910 --> 00:36:41,190
it's a simple configuration formats are

00:36:37,680 --> 00:36:44,070
the ones who provide scopes and prefixes

00:36:41,190 --> 00:36:46,410
so usually archetypes don't add a lot of

00:36:44,070 --> 00:36:51,630
additional settings only if they need to

00:36:46,410 --> 00:36:53,970
be configurable in some way and as we've

00:36:51,630 --> 00:36:55,650
seen so watch out for inconsistencies if

00:36:53,970 --> 00:36:58,230
you don't want to do more deep stuff

00:36:55,650 --> 00:36:59,510
native packager configure more aspects

00:36:58,230 --> 00:37:03,660
of you build or create your own

00:36:59,510 --> 00:37:06,330
archetypes not everything is very clean

00:37:03,660 --> 00:37:08,580
we're happy to accept pull requests so

00:37:06,330 --> 00:37:10,580
we got a lot of pull requests fixing

00:37:08,580 --> 00:37:14,310
documentation which is pretty awesome

00:37:10,580 --> 00:37:15,750
ranging from wrong documentation

00:37:14,310 --> 00:37:19,140
outdated documentation to a simple

00:37:15,750 --> 00:37:21,270
spelling and grammar fixes which is kind

00:37:19,140 --> 00:37:22,890
of nice because documentation should not

00:37:21,270 --> 00:37:25,590
only be correct but also enjoyable to

00:37:22,890 --> 00:37:30,270
read and less grammar mistakes and

00:37:25,590 --> 00:37:32,550
spellings make it easier the second main

00:37:30,270 --> 00:37:33,960
content rather mappings and these are

00:37:32,550 --> 00:37:36,000
the foundation for every package so this

00:37:33,960 --> 00:37:38,430
is actually native package there are

00:37:36,000 --> 00:37:42,359
these mappings because the

00:37:38,430 --> 00:37:44,520
the format's itself you could call the

00:37:42,359 --> 00:37:46,740
command line yourself in an SPT test you

00:37:44,520 --> 00:37:49,170
could implement it in two or three lines

00:37:46,740 --> 00:37:51,210
SPT yourself you simply need these

00:37:49,170 --> 00:37:55,760
mappings put somewhere in the directory

00:37:51,210 --> 00:37:59,069
and then you call is that I being

00:37:55,760 --> 00:38:02,130
packaging build tool for instance or you

00:37:59,069 --> 00:38:03,799
create a docker file and put your

00:38:02,130 --> 00:38:08,039
mapping somewhere and then execute

00:38:03,799 --> 00:38:09,539
docker publish so this is a very core

00:38:08,039 --> 00:38:11,760
part and they are so simple and easy to

00:38:09,539 --> 00:38:13,440
use because it's only a list from files

00:38:11,760 --> 00:38:15,240
to destinations that you can do

00:38:13,440 --> 00:38:17,430
everything that you are used to do with

00:38:15,240 --> 00:38:19,770
lists you can filter them to read X

00:38:17,430 --> 00:38:24,720
magic on the path so if you like you can

00:38:19,770 --> 00:38:27,049
move stuff around at new things you're

00:38:24,720 --> 00:38:29,760
free to do with anything what you liked

00:38:27,049 --> 00:38:33,809
the only words gets a bit more

00:38:29,760 --> 00:38:35,250
complicated is for Linux because we need

00:38:33,809 --> 00:38:39,329
to wrap them to add the additional

00:38:35,250 --> 00:38:41,579
metadata but most of the time you don't

00:38:39,329 --> 00:38:44,250
care about the Linux package make it

00:38:41,579 --> 00:38:47,220
mappings because we provide sensible

00:38:44,250 --> 00:38:50,579
defaults for all of your the mappings

00:38:47,220 --> 00:38:51,450
you add and usually it's fine you don't

00:38:50,579 --> 00:38:53,400
need to add anything

00:38:51,450 --> 00:38:55,680
and for docker for instance you have it

00:38:53,400 --> 00:38:59,549
isolated in a container that doesn't

00:38:55,680 --> 00:39:06,420
matter that much as well and the last

00:38:59,549 --> 00:39:07,440
part is documentation so I already

00:39:06,420 --> 00:39:10,619
mentioned we write a lot of

00:39:07,440 --> 00:39:13,559
documentation I have an example github

00:39:10,619 --> 00:39:17,910
repository with 15 or 20 projects with

00:39:13,559 --> 00:39:21,180
only a specific small use case how you

00:39:17,910 --> 00:39:23,490
can do that but we really appreciate if

00:39:21,180 --> 00:39:25,410
you write more documentation and provide

00:39:23,490 --> 00:39:28,770
pull requests which add simple examples

00:39:25,410 --> 00:39:31,670
we have a recipes section where you can

00:39:28,770 --> 00:39:34,650
simply dump a small use case you had and

00:39:31,670 --> 00:39:37,859
simply add them so and this is how some

00:39:34,650 --> 00:39:39,990
of the other archetypes started out so

00:39:37,859 --> 00:39:42,390
for instance we have launcher and a

00:39:39,990 --> 00:39:45,359
class paths which are archetype which

00:39:42,390 --> 00:39:47,880
change you build in a way that a single

00:39:45,359 --> 00:39:50,010
jar is created that contains a manifest

00:39:47,880 --> 00:39:52,079
file with all your class path and that

00:39:50,010 --> 00:39:54,329
is actually executed

00:39:52,079 --> 00:39:56,309
this is a wreck around for long class

00:39:54,329 --> 00:40:00,029
passes which is especially on windows a

00:39:56,309 --> 00:40:03,059
problem and we started out - ok how this

00:40:00,029 --> 00:40:05,609
is you can do this by copying this in

00:40:03,059 --> 00:40:08,519
your build SPT and it eventually was

00:40:05,609 --> 00:40:11,940
implemented I think one of the play

00:40:08,519 --> 00:40:14,609
contributors input into native packager

00:40:11,940 --> 00:40:16,229
the same way was for the ash script

00:40:14,609 --> 00:40:19,920
plug-in so if you have a darker image

00:40:16,229 --> 00:40:21,839
and use an Alpine based image then you

00:40:19,920 --> 00:40:24,479
can enable the ash group plug-in which

00:40:21,839 --> 00:40:27,479
switches out the the bash scripts to ash

00:40:24,479 --> 00:40:31,410
scripts and you can reduce your image

00:40:27,479 --> 00:40:35,420
size so yeah we need more I'm happy to

00:40:31,410 --> 00:40:40,880
accept and happy to to have all your

00:40:35,420 --> 00:40:43,200
yeah additions to native packaging ok so

00:40:40,880 --> 00:40:47,599
that was the world would tour through

00:40:43,200 --> 00:40:47,599
native texture I'm ready for questions

00:40:48,870 --> 00:40:55,300
[Applause]

00:40:55,489 --> 00:41:02,099
you can speak up I repeat the question

00:40:59,809 --> 00:41:04,890
ok there are two questions the first man

00:41:02,099 --> 00:41:06,959
pages how do we support man pages in

00:41:04,890 --> 00:41:11,069
native picture the answer is very short

00:41:06,959 --> 00:41:13,289
at this moment we don't I'm not aware of

00:41:11,069 --> 00:41:14,880
that there's some kind of feature we

00:41:13,289 --> 00:41:17,279
have for the universal packaging we have

00:41:14,880 --> 00:41:20,309
a source Universal packaging and the

00:41:17,279 --> 00:41:22,140
docs Universal packaging we can create

00:41:20,309 --> 00:41:24,119
like zip files with your documentation

00:41:22,140 --> 00:41:28,019
and zip files with your source files but

00:41:24,119 --> 00:41:29,910
not for Linux Mint pages and I think

00:41:28,019 --> 00:41:32,640
there was a request a few years ago but

00:41:29,910 --> 00:41:34,799
there wasn't any traction on that and

00:41:32,640 --> 00:41:38,069
the second question was system D how do

00:41:34,799 --> 00:41:41,640
you how can you configure system D so

00:41:38,069 --> 00:41:43,680
there's system loaders there's a top

00:41:41,640 --> 00:41:47,549
level system loaders plugin which

00:41:43,680 --> 00:41:50,579
provides some default configuration

00:41:47,549 --> 00:41:53,609
settings like where's the star script

00:41:50,579 --> 00:41:55,949
and a timeout and should it restart and

00:41:53,609 --> 00:41:58,049
stuff like this so you can simply

00:41:55,949 --> 00:41:59,880
configure these settings and for system

00:41:58,049 --> 00:42:03,359
D I think there's a one or two special

00:41:59,880 --> 00:42:04,979
set settings so what is the success exit

00:42:03,359 --> 00:42:05,940
code I think because you can say well

00:42:04,979 --> 00:42:07,619
one is an

00:42:05,940 --> 00:42:09,300
successful exit code for system D as

00:42:07,619 --> 00:42:11,700
well so it doesn't say oh I tried to

00:42:09,300 --> 00:42:14,670
restart but actually it's okay

00:42:11,700 --> 00:42:18,000
and if you can't so if there isn't any

00:42:14,670 --> 00:42:22,560
setting that you can't configure for use

00:42:18,000 --> 00:42:26,160
case then simply open a pull request the

00:42:22,560 --> 00:42:29,430
current mechanism for how we build those

00:42:26,160 --> 00:42:32,550
templates is hand-made this is one thing

00:42:29,430 --> 00:42:35,430
we want to refactor because at the

00:42:32,550 --> 00:42:37,230
moment we have a big map from and we do

00:42:35,430 --> 00:42:39,720
string replace in the end so you have a

00:42:37,230 --> 00:42:41,819
map of a key and it maps to some kind of

00:42:39,720 --> 00:42:43,980
value and then we get our template and

00:42:41,819 --> 00:42:45,930
then we replace everything that's in

00:42:43,980 --> 00:42:51,839
these maps so we don't have the ability

00:42:45,930 --> 00:42:54,390
to nest specific templates or have

00:42:51,839 --> 00:42:56,369
recursive stuff so that you replace a

00:42:54,390 --> 00:42:58,109
variable with another variable it's very

00:42:56,369 --> 00:43:00,270
simple which makes it easy to do back

00:42:58,109 --> 00:43:01,920
which is a good thing but there are some

00:43:00,270 --> 00:43:03,660
limitations and in the end we add these

00:43:01,920 --> 00:43:06,119
settings added to these maps of

00:43:03,660 --> 00:43:08,460
replacements and then you add the place

00:43:06,119 --> 00:43:13,440
or a little script so yeah very

00:43:08,460 --> 00:43:15,650
straightforward and you docker questions

00:43:13,440 --> 00:43:18,660
I've left out the the docker image

00:43:15,650 --> 00:43:22,950
example because it's trivial as well but

00:43:18,660 --> 00:43:24,660
usually people ask you about docker okay

00:43:22,950 --> 00:43:29,700
that's cool anybody using docker

00:43:24,660 --> 00:43:34,170
production ok using a native packager

00:43:29,700 --> 00:43:38,099
for doing so okay so the others use SPG

00:43:34,170 --> 00:43:44,700
docker I guess ok only two so the rest

00:43:38,099 --> 00:43:47,730
of you doing custom stuff okay good then

00:43:44,700 --> 00:43:51,929
thanks again and enjoy the evening

00:43:47,730 --> 00:43:51,929

YouTube URL: https://www.youtube.com/watch?v=ID-EqTOgwKY


