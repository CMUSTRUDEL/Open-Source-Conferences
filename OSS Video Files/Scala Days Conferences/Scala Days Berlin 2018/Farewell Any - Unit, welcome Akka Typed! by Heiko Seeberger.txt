Title: Farewell Any - Unit, welcome Akka Typed! by Heiko Seeberger
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6910-farewell-any-%3D%3E-unit%2C-welcome-akka-typed%21.html
Captions: 
	00:00:04,640 --> 00:00:11,090
thank you thank you hi everybody

00:00:08,410 --> 00:00:13,519
really I'm really glad to be here again

00:00:11,090 --> 00:00:17,960
at Scala days and presenting one of my

00:00:13,519 --> 00:00:19,970
favorite technologies akka I just spoke

00:00:17,960 --> 00:00:23,660
with the are cutting and they told me

00:00:19,970 --> 00:00:27,050
akka is like the new JBoss for Scala or

00:00:23,660 --> 00:00:32,000
something not sure we need to discuss

00:00:27,050 --> 00:00:35,269
that who often who of you has already

00:00:32,000 --> 00:00:38,510
used akka Oh awesome

00:00:35,269 --> 00:00:41,479
alright so I don't have to explain all

00:00:38,510 --> 00:00:43,549
the basic details that's awesome so I'm

00:00:41,479 --> 00:00:45,049
going to talk about something I really

00:00:43,549 --> 00:00:46,760
love about akka

00:00:45,049 --> 00:00:54,909
it's called archetype it's a new module

00:00:46,760 --> 00:00:58,280
and before I dive into the details let's

00:00:54,909 --> 00:01:00,739
take a step back or go step back and

00:00:58,280 --> 00:01:04,129
look at the essence of akka the actor so

00:01:00,739 --> 00:01:09,290
what is an actor that's one of my

00:01:04,129 --> 00:01:12,350
favorite actors or dudes but the

00:01:09,290 --> 00:01:14,060
foundation on top of which akka is built

00:01:12,350 --> 00:01:16,520
is the actor model which has been

00:01:14,060 --> 00:01:20,540
invented in the 70s by Carl Hewitt and

00:01:16,520 --> 00:01:22,730
others and they defined the actor as a

00:01:20,540 --> 00:01:24,860
fundamental unit of computation so that

00:01:22,730 --> 00:01:28,000
essentially means actors are the

00:01:24,860 --> 00:01:30,590
building blocks for your program and

00:01:28,000 --> 00:01:32,510
actors embody processing storage and

00:01:30,590 --> 00:01:35,240
communication processing essentially

00:01:32,510 --> 00:01:37,430
means they can do stuff and storage

00:01:35,240 --> 00:01:39,409
doesn't mean disk storage or something

00:01:37,430 --> 00:01:42,590
like that but it means they can have

00:01:39,409 --> 00:01:45,350
state and I think this is really the

00:01:42,590 --> 00:01:49,550
essence of factors that they are meant

00:01:45,350 --> 00:01:53,300
to have non-local potentially

00:01:49,550 --> 00:01:57,220
distributed state and they do

00:01:53,300 --> 00:02:00,320
communicate using asynchronous messaging

00:01:57,220 --> 00:02:03,020
and it's important understand that one

00:02:00,320 --> 00:02:06,190
actor is no actor they come in a system

00:02:03,020 --> 00:02:09,679
so in order for actors to collaborate

00:02:06,190 --> 00:02:11,900
they need to know each other or they

00:02:09,679 --> 00:02:15,560
need to know their addresses so they can

00:02:11,900 --> 00:02:18,140
communicate ok I think that's pretty

00:02:15,560 --> 00:02:22,790
clear and

00:02:18,140 --> 00:02:25,190
let's talk about the do stuff and Anaka

00:02:22,790 --> 00:02:28,550
that's called a behavior so the behavior

00:02:25,190 --> 00:02:34,100
is what defines how an actor handles

00:02:28,550 --> 00:02:40,040
messages the behavior according to the

00:02:34,100 --> 00:02:41,510
actor model is very lean so an actor can

00:02:40,040 --> 00:02:44,420
only do a couple of things so it can

00:02:41,510 --> 00:02:48,650
create new actors it can send messages

00:02:44,420 --> 00:02:50,660
to known actors so that means it has to

00:02:48,650 --> 00:02:53,620
know the addresses of the other actors

00:02:50,660 --> 00:02:56,600
maybe they arrived via messages maybe

00:02:53,620 --> 00:03:00,080
the actor has been created with that

00:02:56,600 --> 00:03:00,830
knowledge already and and this is really

00:03:00,080 --> 00:03:05,090
important

00:03:00,830 --> 00:03:07,400
an actor can change its behavior or it

00:03:05,090 --> 00:03:10,519
can designate the behavior for handling

00:03:07,400 --> 00:03:14,150
the next message and while that might

00:03:10,519 --> 00:03:17,090
sound a little weak it's actually really

00:03:14,150 --> 00:03:21,980
strong because if you think about this

00:03:17,090 --> 00:03:24,950
behavior which can be changed that

00:03:21,980 --> 00:03:28,190
really means that you can encapsulate

00:03:24,950 --> 00:03:30,160
state here okay and we will see that in

00:03:28,190 --> 00:03:33,590
detail how its implemented in akka

00:03:30,160 --> 00:03:35,900
alright so we have our con type the good

00:03:33,590 --> 00:03:38,390
good old akka untyped and we have

00:03:35,900 --> 00:03:40,190
archetype the brand new one so let's

00:03:38,390 --> 00:03:46,850
take a look at how they implement the

00:03:40,190 --> 00:03:49,100
actor model here is protocol the message

00:03:46,850 --> 00:03:52,609
protocol is like the API of an actor

00:03:49,100 --> 00:03:54,620
because actors from the outside cannot

00:03:52,609 --> 00:03:56,299
be or you cannot call a method on an

00:03:54,620 --> 00:04:00,410
actor from the outside you even don't

00:03:56,299 --> 00:04:02,959
ever get a reference an object reference

00:04:00,410 --> 00:04:04,640
to your actor all you get is the address

00:04:02,959 --> 00:04:07,570
it's called actor F and you can send

00:04:04,640 --> 00:04:10,670
messages to so the messages really

00:04:07,570 --> 00:04:13,220
define so to say the API what you can do

00:04:10,670 --> 00:04:17,239
with that actor here's an example an

00:04:13,220 --> 00:04:19,970
account we can get the balance so that's

00:04:17,239 --> 00:04:23,020
a message we send to the actor let's

00:04:19,970 --> 00:04:26,030
refer to these messages as commands and

00:04:23,020 --> 00:04:28,340
you get a reply balance and you can

00:04:26,030 --> 00:04:29,540
deposit some amount and get back an

00:04:28,340 --> 00:04:32,330
acknowledge

00:04:29,540 --> 00:04:34,850
deposited and with withdraw it's a

00:04:32,330 --> 00:04:37,400
little more interesting because maybe

00:04:34,850 --> 00:04:39,530
your bank does not give you money if

00:04:37,400 --> 00:04:43,880
your balance is negative so you could

00:04:39,530 --> 00:04:48,290
get a reply insufficient balance or you

00:04:43,880 --> 00:04:52,430
could get withdrawn all right that's the

00:04:48,290 --> 00:04:54,890
protocol and the implementation in a

00:04:52,430 --> 00:04:58,340
Koran type could look like this that

00:04:54,890 --> 00:05:02,390
would be very idiomatic acha untappd

00:04:58,340 --> 00:05:04,970
implementation you have a actor trait

00:05:02,390 --> 00:05:08,000
you have to extend from and you use a

00:05:04,970 --> 00:05:12,140
VAR as I said act is really meant to

00:05:08,000 --> 00:05:18,080
keep and encapsulate state and using a

00:05:12,140 --> 00:05:21,100
VAR is what most people do with acha

00:05:18,080 --> 00:05:23,870
untyped and here's the receive method

00:05:21,100 --> 00:05:28,370
that defines a partial function from any

00:05:23,870 --> 00:05:32,330
to unit what do you think about that

00:05:28,370 --> 00:05:35,540
signature awesome yeah

00:05:32,330 --> 00:05:38,510
it's it's a very very flexible signature

00:05:35,540 --> 00:05:40,610
yeah you can you can do anything and you

00:05:38,510 --> 00:05:42,760
get well it's called unit but you get

00:05:40,610 --> 00:05:44,960
nothing

00:05:42,760 --> 00:05:48,830
so essentially

00:05:44,960 --> 00:05:52,430
acha untyped is really untyped or unit

00:05:48,830 --> 00:05:54,770
time I don't know so the receive defines

00:05:52,430 --> 00:05:56,990
the behavior an actor really can receive

00:05:54,770 --> 00:05:58,730
any message and then does something so

00:05:56,990 --> 00:06:01,760
here when getting the balance we have

00:05:58,730 --> 00:06:04,490
this nice implicit sender so this actor

00:06:01,760 --> 00:06:07,700
knows whether there was some other actor

00:06:04,490 --> 00:06:11,960
who send a message to it and can then

00:06:07,700 --> 00:06:14,960
reply and here we reply with a balance

00:06:11,960 --> 00:06:16,970
and with deposit we would just mutate

00:06:14,960 --> 00:06:18,590
the VAR and so on I think that should be

00:06:16,970 --> 00:06:19,400
pretty clear by the way if you have

00:06:18,590 --> 00:06:23,320
questions let me know

00:06:19,400 --> 00:06:27,020
anytime okay so that's the typical

00:06:23,320 --> 00:06:29,000
implementation you could also do a

00:06:27,020 --> 00:06:32,810
slightly different implementation which

00:06:29,000 --> 00:06:35,450
is changing the behavior of an actor so

00:06:32,810 --> 00:06:40,450
the received method that defines the

00:06:35,450 --> 00:06:43,450
initial behavior goes to this method and

00:06:40,450 --> 00:06:43,450
initializes

00:06:43,570 --> 00:06:48,919
the account with an initial balance as

00:06:46,550 --> 00:06:51,680
you can see here and then when we

00:06:48,919 --> 00:06:55,009
deposit we change the behavior so

00:06:51,680 --> 00:06:57,199
instead of using a var we change the

00:06:55,009 --> 00:07:01,280
behavior and that's totally possible in

00:06:57,199 --> 00:07:04,160
akka untyped who of you has already used

00:07:01,280 --> 00:07:07,220
that context become okay that's about

00:07:04,160 --> 00:07:12,500
half of you probably for state machines

00:07:07,220 --> 00:07:15,830
or things like that and yeah so that

00:07:12,500 --> 00:07:17,960
already looks a little bit or pretty

00:07:15,830 --> 00:07:22,160
close to the original definition of the

00:07:17,960 --> 00:07:24,470
actor model all right so now let's take

00:07:22,160 --> 00:07:27,440
a look at archetype and there's a couple

00:07:24,470 --> 00:07:29,990
of important API changes first of all

00:07:27,440 --> 00:07:32,870
because of being typed your actor f your

00:07:29,990 --> 00:07:35,270
acted address is typed so having an act

00:07:32,870 --> 00:07:39,260
ref of T means you can only send

00:07:35,270 --> 00:07:43,009
messages of type T to that actor please

00:07:39,260 --> 00:07:47,870
don't use any as an argument then you're

00:07:43,009 --> 00:07:50,750
back in good old untyped and there's no

00:07:47,870 --> 00:07:52,490
more actor trait you can extend from but

00:07:50,750 --> 00:07:56,449
instead you have to define a behavior of

00:07:52,490 --> 00:07:58,610
T so that's also typed and as a

00:07:56,449 --> 00:08:02,449
consequence of that there's no more

00:07:58,610 --> 00:08:05,030
implicit sender think about that why is

00:08:02,449 --> 00:08:08,419
there no implicit sender what type

00:08:05,030 --> 00:08:11,389
should it be actor F of what any

00:08:08,419 --> 00:08:13,280
potentially or nothing but this is a

00:08:11,389 --> 00:08:15,770
runtime aspect and the compiler would

00:08:13,280 --> 00:08:17,720
not know okay so there cannot be an

00:08:15,770 --> 00:08:20,930
implicit sender anymore and also there

00:08:17,720 --> 00:08:23,510
cannot be an actor selection so that

00:08:20,930 --> 00:08:25,970
means that we have to so whenever we

00:08:23,510 --> 00:08:28,610
want to implement a protocol let me move

00:08:25,970 --> 00:08:31,550
back here where we have like this

00:08:28,610 --> 00:08:34,640
request reply pattern a command and a

00:08:31,550 --> 00:08:36,860
reply we need to change something okay

00:08:34,640 --> 00:08:42,010
because we don't have this nice implicit

00:08:36,860 --> 00:08:42,010
sender all right

00:08:43,660 --> 00:08:51,950
this behavior of T looks a lot like in a

00:08:50,060 --> 00:08:54,560
simplified version a function from a

00:08:51,950 --> 00:08:56,150
message to the next behavior and that

00:08:54,560 --> 00:08:57,290
really nicely matches the original

00:08:56,150 --> 00:09:00,260
definition

00:08:57,290 --> 00:09:01,940
an actor can designate the next behavior

00:09:00,260 --> 00:09:05,390
so whenever an actor receives a message

00:09:01,940 --> 00:09:07,760
it has to tell akka the next behavior

00:09:05,390 --> 00:09:10,940
and these messages are either of type T

00:09:07,760 --> 00:09:14,630
or they can be special occur messages

00:09:10,940 --> 00:09:18,230
called signals like terminated if you

00:09:14,630 --> 00:09:21,620
watch some other actor or post stop pre

00:09:18,230 --> 00:09:24,650
restart and in order to create a

00:09:21,620 --> 00:09:27,110
behavior you go to this behaviors object

00:09:24,650 --> 00:09:30,800
and that contains a couple of factories

00:09:27,110 --> 00:09:33,860
like receive message or same and we will

00:09:30,800 --> 00:09:38,720
take a look at that okay so this is

00:09:33,860 --> 00:09:41,450
again the protocol for a well that's the

00:09:38,720 --> 00:09:43,880
Untied protocol and what do we have to

00:09:41,450 --> 00:09:49,720
do to make that work in the typesetting

00:09:43,880 --> 00:09:49,720
what do you think who has an idea yeah

00:09:57,420 --> 00:10:04,310
okay I think I didn't fully understand

00:10:00,180 --> 00:10:04,310
you mentioned a trade for what exactly

00:10:05,150 --> 00:10:09,810
aha for the messages that are incoming

00:10:07,830 --> 00:10:12,960
yeah that might be a good idea because

00:10:09,810 --> 00:10:16,200
we need to define some type for the T

00:10:12,960 --> 00:10:19,050
okay great so we need to define a trade

00:10:16,200 --> 00:10:21,000
maybe even a sealed trade for the

00:10:19,050 --> 00:10:23,670
commands for the incoming messages what

00:10:21,000 --> 00:10:32,550
else how can we make our type actor

00:10:23,670 --> 00:10:36,180
reply yes exactly yes so we have to

00:10:32,550 --> 00:10:39,660
include the reply to address so whenever

00:10:36,180 --> 00:10:43,350
we want to be able or whenever we want

00:10:39,660 --> 00:10:46,080
our actor to be able to reply this actor

00:10:43,350 --> 00:10:47,940
F to be replied to needs to be included

00:10:46,080 --> 00:10:51,330
in the command in the message that is

00:10:47,940 --> 00:10:54,060
sent to the actor so that's more work

00:10:51,330 --> 00:10:55,680
for us to do right but on the other hand

00:10:54,060 --> 00:10:57,570
it makes the whole thing more explicit

00:10:55,680 --> 00:11:01,080
then you can even see in your protocol

00:10:57,570 --> 00:11:03,210
that this is a request reply protocol

00:11:01,080 --> 00:11:06,210
and not just a fire-and-forget single

00:11:03,210 --> 00:11:08,580
way so let's implement a typed actor

00:11:06,210 --> 00:11:12,300
let's do some live coding please help me

00:11:08,580 --> 00:11:16,710
if I get lost okay I think you can read

00:11:12,300 --> 00:11:20,700
that right I'm going to the account the

00:11:16,710 --> 00:11:22,680
typed account sorry so so the first

00:11:20,700 --> 00:11:26,930
thing we need to do is define this

00:11:22,680 --> 00:11:29,850
command right let's use a sealed trait

00:11:26,930 --> 00:11:34,170
commands a great name in my opinion

00:11:29,850 --> 00:11:35,640
especially if you go for CQRS or

00:11:34,170 --> 00:11:38,700
something

00:11:35,640 --> 00:11:42,840
so our incoming messages need to extend

00:11:38,700 --> 00:11:47,460
command okay cool and now we can define

00:11:42,840 --> 00:11:51,300
the behavior I'm using the apply method

00:11:47,460 --> 00:11:53,370
here to define or return the behavior of

00:11:51,300 --> 00:11:54,750
command alright

00:11:53,370 --> 00:11:57,300
then the other thing you already

00:11:54,750 --> 00:12:01,590
mentioned is the reply to so we no

00:11:57,300 --> 00:12:07,080
longer can use a case object because we

00:12:01,590 --> 00:12:09,890
need to include that's too many S's

00:12:07,080 --> 00:12:13,480
thank you

00:12:09,890 --> 00:12:18,170
we need a reply to and now actor F is

00:12:13,480 --> 00:12:22,339
typed and what type should I put here

00:12:18,170 --> 00:12:23,920
and it is balanced exactly because we're

00:12:22,339 --> 00:12:25,360
gonna send back the balance is great

00:12:23,920 --> 00:12:28,670
okay cool

00:12:25,360 --> 00:12:30,649
that's the one thing here for deposit

00:12:28,670 --> 00:12:35,770
that's also pretty straightforward we

00:12:30,649 --> 00:12:35,770
need this type well the type here is

00:12:35,800 --> 00:12:41,920
compromise missing sorry the positive

00:12:38,480 --> 00:12:46,370
dot type looks a little ugly but okay

00:12:41,920 --> 00:12:50,480
and then finally here we also need a

00:12:46,370 --> 00:12:52,930
reply - sorry lie - of type actor F of

00:12:50,480 --> 00:12:56,180
something but here it gets a little

00:12:52,930 --> 00:13:00,860
nasty so what to be put in here

00:12:56,180 --> 00:13:07,040
insufficient balance or withdrawn yeah

00:13:00,860 --> 00:13:09,350
exactly let's make trade yeah we could

00:13:07,040 --> 00:13:11,390
also use an option but what if or

00:13:09,350 --> 00:13:15,290
neither but what if we have like three

00:13:11,390 --> 00:13:18,290
potential outcomes so I prefer to use a

00:13:15,290 --> 00:13:24,800
DTS for that CEO traits so let's call

00:13:18,290 --> 00:13:26,750
that with sorry with raw reply it's a

00:13:24,800 --> 00:13:30,740
little hard to type on this yeah anyway

00:13:26,750 --> 00:13:33,800
with raw reply so we can then use that

00:13:30,740 --> 00:13:37,900
and it extends with round fly and

00:13:33,800 --> 00:13:40,220
extends reply okay that's the protocol

00:13:37,900 --> 00:13:43,400
mission achieved almost so now we also

00:13:40,220 --> 00:13:45,650
have to implement the behavior so for

00:13:43,400 --> 00:13:49,580
the behavior as I said we can use the

00:13:45,650 --> 00:13:51,980
behaviors object which has a couple of

00:13:49,580 --> 00:13:54,950
nice factories we can be lazy and just

00:13:51,980 --> 00:13:59,240
do that but that would not serve its

00:13:54,950 --> 00:14:01,160
purpose so when we don't need any actor

00:13:59,240 --> 00:14:02,990
context and we don't need it here

00:14:01,160 --> 00:14:04,640
because the actor context is also like

00:14:02,990 --> 00:14:07,250
in akka untyped used to create child

00:14:04,640 --> 00:14:09,320
actors and stuff we don't worry about

00:14:07,250 --> 00:14:11,930
that right now we can use this receive

00:14:09,320 --> 00:14:17,000
message that just takes a function from

00:14:11,930 --> 00:14:20,750
T to behavior of T and we can use nice

00:14:17,000 --> 00:14:25,939
pattern matching get parents

00:14:20,750 --> 00:14:32,629
and reply to and then we can say reply

00:14:25,939 --> 00:14:35,600
to bang balance and that is our balance

00:14:32,629 --> 00:14:37,970
the balance is given as a parameter to

00:14:35,600 --> 00:14:39,829
the apply method but the compiler is not

00:14:37,970 --> 00:14:41,870
happy because we have not yet designated

00:14:39,829 --> 00:14:46,160
the next behavior which behavior should

00:14:41,870 --> 00:14:50,000
we now return exactly because we don't

00:14:46,160 --> 00:14:52,089
change any state okay so our behavior

00:14:50,000 --> 00:14:54,439
can be the same Anaka internally

00:14:52,089 --> 00:14:56,750
optimizes that so it doesn't really have

00:14:54,439 --> 00:15:00,079
to switch the behavior it just keeps the

00:14:56,750 --> 00:15:04,339
same behavior so that's the meaning of

00:15:00,079 --> 00:15:07,519
this special behavior okay so um let's

00:15:04,339 --> 00:15:10,850
also quickly do the deposit and then I

00:15:07,519 --> 00:15:13,699
can move on deposit has an amount and I

00:15:10,850 --> 00:15:16,970
reply to and we don't have to check any

00:15:13,699 --> 00:15:22,430
cases here so we can immediately say

00:15:16,970 --> 00:15:24,949
reply to being deposited and then we

00:15:22,430 --> 00:15:29,930
have to switch the behavior okay how do

00:15:24,949 --> 00:15:34,790
we do that yeah we just call apply again

00:15:29,930 --> 00:15:40,850
we can just do account and then we do

00:15:34,790 --> 00:15:42,829
balance plus amount and that's it cool

00:15:40,850 --> 00:15:46,360
and the same would be true for withdraw

00:15:42,829 --> 00:15:49,970
and I will not type it but just jump to

00:15:46,360 --> 00:15:52,420
the next step in migrate sample

00:15:49,970 --> 00:15:55,129
solutions so it would look like this

00:15:52,420 --> 00:15:58,430
behavior same if it is on sufficient

00:15:55,129 --> 00:16:01,540
balance or a competence - amount if it's

00:15:58,430 --> 00:16:08,420
okay does that make sense

00:16:01,540 --> 00:16:14,600
all right and for me this looks a little

00:16:08,420 --> 00:16:17,240
clearer than inaka untyped and another

00:16:14,600 --> 00:16:19,670
benefit you get from defining actress

00:16:17,240 --> 00:16:22,819
like this in terms of behaviors is

00:16:19,670 --> 00:16:26,089
testability because in archetype test

00:16:22,819 --> 00:16:28,660
kit there's a way to just test the

00:16:26,089 --> 00:16:31,040
behavior in isolation without the

00:16:28,660 --> 00:16:32,170
asynchrony and non determinism so

00:16:31,040 --> 00:16:33,850
without actors

00:16:32,170 --> 00:16:37,510
without actual actors you can of course

00:16:33,850 --> 00:16:39,959
also create actors like before and use

00:16:37,510 --> 00:16:42,760
test probes and stuff but there's the

00:16:39,959 --> 00:16:46,360
the behavior test kit that allows you to

00:16:42,760 --> 00:16:49,260
just test the behavior synchronously and

00:16:46,360 --> 00:16:53,110
I think that's that's a huge advantage

00:16:49,260 --> 00:16:55,060
all right so that's a couple of more

00:16:53,110 --> 00:16:57,490
behaviors if you need an act context and

00:16:55,060 --> 00:16:59,920
a message to you you should receive if

00:16:57,490 --> 00:17:03,100
you need an early actor context you use

00:16:59,920 --> 00:17:06,250
a setup setup is a little bit for these

00:17:03,100 --> 00:17:09,370
things which you would have done in the

00:17:06,250 --> 00:17:13,559
constructor of your actor okay

00:17:09,370 --> 00:17:16,240
untyped actor or in the pre-start method

00:17:13,559 --> 00:17:19,620
receive partial if you want to ignore

00:17:16,240 --> 00:17:24,339
some unmatched messages because here

00:17:19,620 --> 00:17:28,750
let's say we comment that we get a nice

00:17:24,339 --> 00:17:32,020
compiler warning that the match is not

00:17:28,750 --> 00:17:35,260
exhaustive okay so that's great in most

00:17:32,020 --> 00:17:37,630
cases sometimes don't want to match on

00:17:35,260 --> 00:17:40,210
messages because you know this message

00:17:37,630 --> 00:17:42,750
cannot be sent okay if you have a state

00:17:40,210 --> 00:17:45,100
machine for example in some states

00:17:42,750 --> 00:17:48,460
nobody will ever send a message of some

00:17:45,100 --> 00:17:50,020
type and then receive partial is your

00:17:48,460 --> 00:17:54,940
friend so you could do receive message

00:17:50,020 --> 00:17:58,480
partial and then the sorry then the

00:17:54,940 --> 00:18:00,160
compiler would no longer complain but

00:17:58,480 --> 00:18:02,740
then of course you could forget things

00:18:00,160 --> 00:18:04,450
so I always a little bit or if I do that

00:18:02,740 --> 00:18:06,910
if I add the partial I'm a little bit

00:18:04,450 --> 00:18:12,100
yeah yeah is it necessary sometimes it's

00:18:06,910 --> 00:18:15,700
necessary alright um stopped well guess

00:18:12,100 --> 00:18:19,270
what behavior stopped will do that's the

00:18:15,700 --> 00:18:21,880
way to stop an actor or and I could to

00:18:19,270 --> 00:18:25,150
stop itself in archetype you no longer

00:18:21,880 --> 00:18:27,549
can stop arbitrary actors so you can use

00:18:25,150 --> 00:18:30,250
context to stop a child actor or you can

00:18:27,549 --> 00:18:33,070
just return stop behavior to stop this

00:18:30,250 --> 00:18:36,280
actor and that's it and that's also

00:18:33,070 --> 00:18:39,580
receive signal to just receive lifecycle

00:18:36,280 --> 00:18:42,549
signals okay

00:18:39,580 --> 00:18:47,010
the actor context is again like an

00:18:42,549 --> 00:18:52,300
untyped the power api it has a lot of

00:18:47,010 --> 00:18:54,610
methods so two of them are spawn to

00:18:52,300 --> 00:18:57,550
create a child actor and message adapter

00:18:54,610 --> 00:19:01,540
to ingest external messages Oh what does

00:18:57,550 --> 00:19:04,810
that mean okay I will give you an

00:19:01,540 --> 00:19:07,300
example so let's talk or let's think

00:19:04,810 --> 00:19:12,090
about transfer so we have two accounts

00:19:07,300 --> 00:19:15,610
and we want to transfer money right and

00:19:12,090 --> 00:19:17,520
let me move on to the skeleton for the

00:19:15,610 --> 00:19:23,200
type transfer

00:19:17,520 --> 00:19:27,310
so here's transfer what we are going to

00:19:23,200 --> 00:19:29,230
do we create a child actor for an

00:19:27,310 --> 00:19:31,480
account and another one we call the one

00:19:29,230 --> 00:19:34,960
from the other two we use context at

00:19:31,480 --> 00:19:37,030
spawn in order to get the context we use

00:19:34,960 --> 00:19:40,660
behavior setup so we have an early

00:19:37,030 --> 00:19:43,240
context this is like our main actor it

00:19:40,660 --> 00:19:46,030
has a seal trait command with not a

00:19:43,240 --> 00:19:48,280
single inhabitant so you cannot send any

00:19:46,030 --> 00:19:51,360
messages to this guy which is quite

00:19:48,280 --> 00:19:53,950
typical for the main actor I would argue

00:19:51,360 --> 00:19:56,830
and then we create a transfer actor

00:19:53,950 --> 00:20:00,400
which we still have to implement and we

00:19:56,830 --> 00:20:03,400
watch that and the only thing our main

00:20:00,400 --> 00:20:05,170
act does in its behavior its receiving

00:20:03,400 --> 00:20:08,410
the terminated signal for the transfer

00:20:05,170 --> 00:20:11,230
and then those behaviors stopped which

00:20:08,410 --> 00:20:14,200
means the main actress stops which means

00:20:11,230 --> 00:20:17,620
the whole active system will terminate

00:20:14,200 --> 00:20:19,570
okay and in archetype in order to create

00:20:17,620 --> 00:20:23,050
an active system what you have to do is

00:20:19,570 --> 00:20:24,790
you have to pass it the route actor or

00:20:23,050 --> 00:20:28,600
the main actor whatever you want to call

00:20:24,790 --> 00:20:31,450
it you can no longer call actor of or

00:20:28,600 --> 00:20:33,940
spawn or some method on an active system

00:20:31,450 --> 00:20:36,070
to create arbitrary many top-level

00:20:33,940 --> 00:20:38,380
actress there's only one route actor you

00:20:36,070 --> 00:20:40,480
pass the behavior into active system

00:20:38,380 --> 00:20:42,460
active system will create it for you and

00:20:40,480 --> 00:20:44,950
all the other actors you want to create

00:20:42,460 --> 00:20:53,800
have to be child actors of your main

00:20:44,950 --> 00:20:57,490
actor okay I think I won't implement

00:20:53,800 --> 00:20:59,100
that but just move on and show you how

00:20:57,490 --> 00:21:03,960
to implement the transfer

00:20:59,100 --> 00:21:05,970
could look like so the first thing we do

00:21:03,960 --> 00:21:07,170
in the apply method here we take an

00:21:05,970 --> 00:21:09,690
amount that's the amount to be

00:21:07,170 --> 00:21:12,840
transferred we have our from and to

00:21:09,690 --> 00:21:18,660
actress from is an actor off of withdraw

00:21:12,840 --> 00:21:21,809
and to one of deposit we use the context

00:21:18,660 --> 00:21:24,240
to send the withdraw message to from

00:21:21,809 --> 00:21:26,190
that make sense right

00:21:24,240 --> 00:21:27,450
with the amount and now this is

00:21:26,190 --> 00:21:31,020
interesting

00:21:27,450 --> 00:21:35,040
let me again go to the withdraw message

00:21:31,020 --> 00:21:38,370
the withdraw message takes an actor F of

00:21:35,040 --> 00:21:43,260
withdraw reply okay we need to provide

00:21:38,370 --> 00:21:45,600
an actor so that can receive a withdraw

00:21:43,260 --> 00:21:50,460
reply like an insufficient balance of

00:21:45,600 --> 00:21:53,660
withdrawn our transfer act here has its

00:21:50,460 --> 00:21:58,530
own sealed straight command it can not

00:21:53,660 --> 00:22:01,169
receive the withdraw reply in ARCA typed

00:21:58,530 --> 00:22:03,090
you could send anything to any actor

00:22:01,169 --> 00:22:05,880
there it was really easy to implement

00:22:03,090 --> 00:22:08,820
request reply because any actor could

00:22:05,880 --> 00:22:10,830
receive the replies from another actor

00:22:08,820 --> 00:22:13,790
it's not possible here we can only

00:22:10,830 --> 00:22:17,490
receive in transfer our command

00:22:13,790 --> 00:22:21,419
subclasses but the withdraw reply is

00:22:17,490 --> 00:22:24,179
from account and not from transfer so

00:22:21,419 --> 00:22:29,130
therefore we need this message adapter

00:22:24,179 --> 00:22:31,470
thingy and that just adapts from the

00:22:29,130 --> 00:22:33,799
withdraw reply which could either be an

00:22:31,470 --> 00:22:36,510
insufficient balance or withdrawn to an

00:22:33,799 --> 00:22:40,380
internal message so we have to more or

00:22:36,510 --> 00:22:43,380
less duplicate the messages as internal

00:22:40,380 --> 00:22:45,540
messages okay so as they are commands I

00:22:43,380 --> 00:22:48,150
call them handle insufficient balance

00:22:45,540 --> 00:22:51,510
and handle withdrawn and these thing so

00:22:48,150 --> 00:22:51,870
that is a little boilerplate e I have to

00:22:51,510 --> 00:22:55,730
agree

00:22:51,870 --> 00:22:55,730
but it's necessary for the type safety

00:22:55,760 --> 00:23:04,260
so first we send the withdraw to the

00:22:58,679 --> 00:23:07,350
from and then we define our behavior so

00:23:04,260 --> 00:23:10,930
here we use withdraw partial sorry

00:23:07,350 --> 00:23:13,960
receive partial to either handle

00:23:10,930 --> 00:23:15,550
the insufficient balance or the

00:23:13,960 --> 00:23:19,630
withdrawn okay

00:23:15,550 --> 00:23:23,940
we don't wanna handle deposited because

00:23:19,630 --> 00:23:28,300
that cannot happen at that stage right

00:23:23,940 --> 00:23:31,570
the only responses we get from the from

00:23:28,300 --> 00:23:35,170
actor is either insufficient balance or

00:23:31,570 --> 00:23:38,140
withdrawn the first case be abort

00:23:35,170 --> 00:23:39,520
we stop in the second case we know the

00:23:38,140 --> 00:23:41,890
money has been taken away

00:23:39,520 --> 00:23:46,690
we can now deposit it to the other guy

00:23:41,890 --> 00:23:50,410
we sent deposit to - and again we have

00:23:46,690 --> 00:23:53,380
to do the message adapter thingy to get

00:23:50,410 --> 00:23:55,809
the deposited reply in to handle

00:23:53,380 --> 00:24:00,010
deposited which we will then handle and

00:23:55,809 --> 00:24:02,559
then print transfer done and stop does

00:24:00,010 --> 00:24:05,650
it make sense if you have questions let

00:24:02,559 --> 00:24:09,660
me know okay so let's just run it and

00:24:05,650 --> 00:24:12,970
see whether everything works as expected

00:24:09,660 --> 00:24:14,860
we are transferring 50 so that should

00:24:12,970 --> 00:24:18,160
work it says transfer done which is

00:24:14,860 --> 00:24:20,679
great and you can see that the program

00:24:18,160 --> 00:24:25,179
has terminated so even receiving the

00:24:20,679 --> 00:24:27,730
signal seems to work properly if we try

00:24:25,179 --> 00:24:31,240
to transfer too much we should get the

00:24:27,730 --> 00:24:39,010
abort message okay so that all looks

00:24:31,240 --> 00:24:41,860
pretty good okay so if you wanna migrate

00:24:39,010 --> 00:24:44,559
from one type to type you have to keep

00:24:41,860 --> 00:24:46,870
in mind two or three important things so

00:24:44,559 --> 00:24:48,910
first you should use a DTS for the

00:24:46,870 --> 00:24:50,530
message protocol so you have to define

00:24:48,910 --> 00:24:52,990
your sealed read command or call it

00:24:50,530 --> 00:24:56,140
message if you prefer that or anything

00:24:52,990 --> 00:25:00,730
so yeah user an ADT so the compiler then

00:24:56,140 --> 00:25:02,590
can help you telling you okay your match

00:25:00,730 --> 00:25:06,820
is not exhaustive you have to add this

00:25:02,590 --> 00:25:08,650
or that command to your match you have

00:25:06,820 --> 00:25:11,950
to replace the implicit sender

00:25:08,650 --> 00:25:15,750
with an explicit reply to address or

00:25:11,950 --> 00:25:18,970
actor F and if you want to consume

00:25:15,750 --> 00:25:21,429
messages that are defined on some other

00:25:18,970 --> 00:25:22,850
actor you need to use those message

00:25:21,429 --> 00:25:25,520
adapters

00:25:22,850 --> 00:25:30,650
and that's essentially the tweaks you

00:25:25,520 --> 00:25:34,880
have to apply what I really like about

00:25:30,650 --> 00:25:38,750
ARCA typed is that it can completely

00:25:34,880 --> 00:25:41,300
coexist with the untyped so there's only

00:25:38,750 --> 00:25:45,500
friendly competition amongst them so if

00:25:41,300 --> 00:25:48,520
you import the various methods defined

00:25:45,500 --> 00:25:51,410
in this adapter or package object

00:25:48,520 --> 00:25:55,520
everything between untyped and typed

00:25:51,410 --> 00:25:58,790
will work for example you can use an

00:25:55,520 --> 00:26:00,560
untyped actor F where an a-type actor F

00:25:58,790 --> 00:26:03,020
is expected and vice versa

00:26:00,560 --> 00:26:05,870
so you can send a message from an typed

00:26:03,020 --> 00:26:08,000
act to an untapped actor or an untyped

00:26:05,870 --> 00:26:10,480
actor can watch a typed actor and vice

00:26:08,000 --> 00:26:10,480
versa

00:26:10,550 --> 00:26:16,850
there's a small difference regarding

00:26:12,910 --> 00:26:20,990
supervision which I will which I will

00:26:16,850 --> 00:26:25,520
show you in a moment so let's first take

00:26:20,990 --> 00:26:29,180
a look at this coexistence so we can

00:26:25,520 --> 00:26:30,950
write an untyped transfer that uses

00:26:29,180 --> 00:26:34,840
these typed accounts so what we have

00:26:30,950 --> 00:26:38,630
done here is we have written a typed

00:26:34,840 --> 00:26:42,890
transfer okay and let's just take a look

00:26:38,630 --> 00:26:44,690
at an untyped transfer I call it mixed

00:26:42,890 --> 00:26:48,320
transfer here where is it where is it

00:26:44,690 --> 00:26:53,900
mixed okay here's a transfer and that is

00:26:48,320 --> 00:26:58,790
just a traditional class that extends

00:26:53,900 --> 00:27:00,100
actor the parameters it gets our typed

00:26:58,790 --> 00:27:05,300
actor RAF's

00:27:00,100 --> 00:27:09,020
and then when we send this withdraw to

00:27:05,300 --> 00:27:11,590
the type from we include self as the

00:27:09,020 --> 00:27:15,110
reply to and as you can see here this

00:27:11,590 --> 00:27:16,640
underlined means okay something's going

00:27:15,110 --> 00:27:20,000
on some please conversions are going on

00:27:16,640 --> 00:27:23,390
and that is because of this import

00:27:20,000 --> 00:27:26,960
second line or line 21 the adapter

00:27:23,390 --> 00:27:30,830
import and you probably also can see it

00:27:26,960 --> 00:27:35,750
here and that works exactly the same way

00:27:30,830 --> 00:27:37,350
like the typed account it compiles and I

00:27:35,750 --> 00:27:39,600
hope

00:27:37,350 --> 00:27:42,090
I hope you believe that it also runs the

00:27:39,600 --> 00:27:45,180
same way and I think this is really

00:27:42,090 --> 00:27:48,210
great so it means you can start adding

00:27:45,180 --> 00:27:49,860
typed actors to your projects to your

00:27:48,210 --> 00:27:52,230
ARCA projects you don't have to rewrite

00:27:49,860 --> 00:27:54,720
everything in a Big Bang but you can

00:27:52,230 --> 00:27:58,230
start adding new actors as type actors

00:27:54,720 --> 00:28:00,720
and get used to them and see what they

00:27:58,230 --> 00:28:02,220
are good for what is not that good if

00:28:00,720 --> 00:28:08,090
it's not that good let the ax-cut you

00:28:02,220 --> 00:28:10,920
know they're open for feedback and yeah

00:28:08,090 --> 00:28:13,770
this coexistence I think is a very very

00:28:10,920 --> 00:28:18,360
important aspect and actually if you

00:28:13,770 --> 00:28:21,800
look at the the akka libraries which are

00:28:18,360 --> 00:28:25,440
on top of a corrector like for example

00:28:21,800 --> 00:28:27,690
streams or HTTP or cluster or

00:28:25,440 --> 00:28:30,450
persistence some of these have been

00:28:27,690 --> 00:28:32,790
ported to typed but usually not complete

00:28:30,450 --> 00:28:36,120
I mean our persistence type is a

00:28:32,790 --> 00:28:39,240
complete rewrite whereas the various

00:28:36,120 --> 00:28:41,700
akka cluster type modules just have a

00:28:39,240 --> 00:28:43,830
thin for say the type facade on top of

00:28:41,700 --> 00:28:46,620
the untyped and that totally makes sense

00:28:43,830 --> 00:28:49,530
because so the are cut in can could

00:28:46,620 --> 00:28:53,120
slowly move to typed if they want to

00:28:49,530 --> 00:28:53,120
under the hood for the implementation

00:28:55,280 --> 00:29:03,300
okay so one more thing I would like to

00:28:58,950 --> 00:29:07,700
mention is a super vision and the

00:29:03,300 --> 00:29:10,530
difference to untyped is that in

00:29:07,700 --> 00:29:12,630
archetype the 40 actors are stopped by

00:29:10,530 --> 00:29:15,930
default which means if there's an

00:29:12,630 --> 00:29:20,580
exception the actor gets stopped do you

00:29:15,930 --> 00:29:25,770
know the default in akka untyped what's

00:29:20,580 --> 00:29:29,850
the default Enoch are untied no yeah in

00:29:25,770 --> 00:29:32,670
most cases is restart yeah so there's a

00:29:29,850 --> 00:29:35,370
couple of exceptions which are treated

00:29:32,670 --> 00:29:37,650
in a special way like if the exception

00:29:35,370 --> 00:29:39,660
occurs during is initialization for

00:29:37,650 --> 00:29:42,360
example or if you don't handle the

00:29:39,660 --> 00:29:45,180
terminated on the actor will be stopped

00:29:42,360 --> 00:29:48,750
but in most other or in most other cases

00:29:45,180 --> 00:29:49,830
yeah the actor gets restarted in my

00:29:48,750 --> 00:29:52,950
personal experience

00:29:49,830 --> 00:29:54,929
that is not a good default and it looks

00:29:52,950 --> 00:29:57,480
like the akka team has arrived at the

00:29:54,929 --> 00:30:01,440
same decision so most of my ARCA

00:29:57,480 --> 00:30:04,260
projects I use the supervisors the the

00:30:01,440 --> 00:30:07,279
stopping strategy so I can type also has

00:30:04,260 --> 00:30:10,890
a stopping strategy and I use that for

00:30:07,279 --> 00:30:13,320
most of my actors as the default and

00:30:10,890 --> 00:30:17,120
yeah it's the default in archetype now

00:30:13,320 --> 00:30:21,630
and if you want to change that you can

00:30:17,120 --> 00:30:24,510
supervise a behavior so what you do is

00:30:21,630 --> 00:30:29,460
you have a behavior and then you wrap it

00:30:24,510 --> 00:30:31,260
in behaviors that supervise okay so it's

00:30:29,460 --> 00:30:34,649
a little different it's not that you

00:30:31,260 --> 00:30:37,889
have to define a supervisor strategy at

00:30:34,649 --> 00:30:42,149
the level of the parent actor but

00:30:37,889 --> 00:30:47,010
instead you define your behavior to be

00:30:42,149 --> 00:30:54,269
supervised in some way and let's take a

00:30:47,010 --> 00:31:00,570
look at one more example a calculator

00:30:54,269 --> 00:31:03,690
actor so it's a huge actor for this

00:31:00,570 --> 00:31:05,250
small example sorry for that it's a

00:31:03,690 --> 00:31:07,320
calculator or you can add subtract

00:31:05,250 --> 00:31:10,110
multiply divide and divide is

00:31:07,320 --> 00:31:13,620
interesting so as you probably can guess

00:31:10,110 --> 00:31:16,860
if you send divided to this and N equals

00:31:13,620 --> 00:31:24,139
zero you might get into trouble right

00:31:16,860 --> 00:31:27,590
and our program here what does it do so

00:31:24,139 --> 00:31:30,389
here we just create the calculator actor

00:31:27,590 --> 00:31:33,480
sorry that's the behavior we're creating

00:31:30,389 --> 00:31:35,309
it in the spawn method let's be precise

00:31:33,480 --> 00:31:38,429
that's the behavior we initialize it

00:31:35,309 --> 00:31:41,309
with zero and then we send an ad 42

00:31:38,429 --> 00:31:44,159
because 42 is always a good value and

00:31:41,309 --> 00:31:46,679
then we divide by two and then we try to

00:31:44,159 --> 00:31:51,350
get the value okay let's see what

00:31:46,679 --> 00:31:51,350
happens if we run that little program

00:31:53,539 --> 00:32:00,630
okay some exception has happened like

00:31:57,120 --> 00:32:03,690
expected we get an arithmetic exception

00:32:00,630 --> 00:32:06,660
by zero and it looks like we

00:32:03,690 --> 00:32:08,570
don't get any value back okay and it

00:32:06,660 --> 00:32:11,820
says stopping because calculator

00:32:08,570 --> 00:32:14,550
terminated let's again look at the code

00:32:11,820 --> 00:32:20,340
so when we receive the terminated signal

00:32:14,550 --> 00:32:25,890
we get this and yeah the get value looks

00:32:20,340 --> 00:32:28,920
like it's not really gotten so yeah the

00:32:25,890 --> 00:32:31,710
actor has been stopped that's the

00:32:28,920 --> 00:32:34,890
default as I said and now let's switch

00:32:31,710 --> 00:32:38,520
the whole thing a little bit so instead

00:32:34,890 --> 00:32:44,160
of not supervising it lets supervise it

00:32:38,520 --> 00:32:47,700
so now we do behaviors that supervise so

00:32:44,160 --> 00:32:51,180
we essentially wrap our calculator

00:32:47,700 --> 00:32:52,440
behavior in this supervised block and in

00:32:51,180 --> 00:32:54,510
order to get back a real behavior

00:32:52,440 --> 00:32:56,970
because that's just a supervised we call

00:32:54,510 --> 00:33:01,620
the on failure method and here we

00:32:56,970 --> 00:33:06,270
provide an exception type and then in

00:33:01,620 --> 00:33:08,310
this case I decided to resume so if we

00:33:06,270 --> 00:33:12,630
divide by zero that should essentially

00:33:08,310 --> 00:33:17,870
just be ignored okay let's see how this

00:33:12,630 --> 00:33:22,260
works whether we get our 42 out of it

00:33:17,870 --> 00:33:25,260
gray we get it so that's how supervision

00:33:22,260 --> 00:33:28,110
works in archetypes and I personally

00:33:25,260 --> 00:33:30,390
really like that because even when I was

00:33:28,110 --> 00:33:32,940
writing super special special a

00:33:30,390 --> 00:33:35,400
supervisor strategies but the stopping

00:33:32,940 --> 00:33:38,760
strategy but real ones in in our current

00:33:35,400 --> 00:33:42,450
type I never had the situation where I

00:33:38,760 --> 00:33:45,690
had to build a huge pattern match like

00:33:42,450 --> 00:33:48,510
case full exception to this case parks

00:33:45,690 --> 00:33:51,090
exception to that so you no longer have

00:33:48,510 --> 00:33:54,660
this decider function that goes from

00:33:51,090 --> 00:33:57,060
arbitrary throwables to some decisions

00:33:54,660 --> 00:34:00,350
like stop or restart but instead you

00:33:57,060 --> 00:34:01,770
just provide one exception type and

00:34:00,350 --> 00:34:04,290
that's it

00:34:01,770 --> 00:34:07,710
of course you could go for throw oval or

00:34:04,290 --> 00:34:10,200
exception but yeah usually in the code

00:34:07,710 --> 00:34:12,960
I've seen there's one particular type of

00:34:10,200 --> 00:34:14,820
exception that can occur maybe JBC

00:34:12,960 --> 00:34:16,929
exceptional whatever and you want to

00:34:14,820 --> 00:34:22,030
deal with that and yeah that's

00:34:16,929 --> 00:34:26,379
you can do in in archetype alright so

00:34:22,030 --> 00:34:28,859
that was supervision and that almost

00:34:26,379 --> 00:34:32,440
takes me to the end of my presentation

00:34:28,859 --> 00:34:35,760
the current state of archetype is it is

00:34:32,440 --> 00:34:39,520
still an experimental module or multiple

00:34:35,760 --> 00:34:42,399
experimental modules so there's tight

00:34:39,520 --> 00:34:44,470
API or type module stars available for

00:34:42,399 --> 00:34:46,629
archive assistants berries cluster

00:34:44,470 --> 00:34:48,309
modules distribute data and even for

00:34:46,629 --> 00:34:51,040
streams I think there's a very very

00:34:48,309 --> 00:34:57,030
small addition just for the source and

00:34:51,040 --> 00:34:59,859
sync dot act RF to be typed now I

00:34:57,030 --> 00:35:03,099
recently gave a workshop on Monday and

00:34:59,859 --> 00:35:05,230
Tuesday totally based on archetype and

00:35:03,099 --> 00:35:08,559
you can build real-world systems

00:35:05,230 --> 00:35:10,680
completely on top of archetype so

00:35:08,559 --> 00:35:13,450
everything is there you need and

00:35:10,680 --> 00:35:16,420
question is what's next so it's almost

00:35:13,450 --> 00:35:19,030
feature complete hopefully within the

00:35:16,420 --> 00:35:21,880
next releases some smallish missing

00:35:19,030 --> 00:35:26,380
features are added in my opinion its

00:35:21,880 --> 00:35:27,579
production ready the API may change okay

00:35:26,380 --> 00:35:29,440
and that's what the meaning of

00:35:27,579 --> 00:35:33,369
experimental is if you go to the

00:35:29,440 --> 00:35:37,030
documentation which is really good it

00:35:33,369 --> 00:35:39,220
says ok danger area but that for me just

00:35:37,030 --> 00:35:41,109
means the APR may change that's okay for

00:35:39,220 --> 00:35:44,770
me I don't think there will be two big

00:35:41,109 --> 00:35:49,109
changes there have been big changes over

00:35:44,770 --> 00:35:51,130
the last half year but nowadays I think

00:35:49,109 --> 00:35:54,579
there will only be smallish ones

00:35:51,130 --> 00:35:56,500
hopefully and yeah please give it a try

00:35:54,579 --> 00:35:58,089
and get good feedback there are a couple

00:35:56,500 --> 00:36:01,660
of great discussions on the issue

00:35:58,089 --> 00:36:03,700
tracker if you're interested so yeah

00:36:01,660 --> 00:36:07,720
hopefully I could inspire you to give it

00:36:03,700 --> 00:36:09,010
a try and thank you for your attention I

00:36:07,720 --> 00:36:11,530
don't want to stand between you and

00:36:09,010 --> 00:36:15,960
lunch but if there are questions I'm

00:36:11,530 --> 00:36:15,960
happy to take a couple thank you

00:36:21,610 --> 00:36:30,020
who is the owner of the microphones

00:36:23,900 --> 00:36:32,180
because there's questions over there hi

00:36:30,020 --> 00:36:34,490
so in a car types what happens to the

00:36:32,180 --> 00:36:36,200
actor event stream so now you can

00:36:34,490 --> 00:36:39,020
publish something to the event stream

00:36:36,200 --> 00:36:41,330
and subscribe to events what will happen

00:36:39,020 --> 00:36:44,660
to that that's a good question because I

00:36:41,330 --> 00:36:47,990
never use that thing I wouldn't know why

00:36:44,660 --> 00:36:49,910
I should use it but I guess it's still

00:36:47,990 --> 00:36:53,570
there because I told about this

00:36:49,910 --> 00:36:56,030
coexistence so actually everything in

00:36:53,570 --> 00:36:58,280
archetype still runs on the untyped

00:36:56,030 --> 00:37:00,500
actress system under the hood there is a

00:36:58,280 --> 00:37:03,650
type system but that uses the untyped

00:37:00,500 --> 00:37:06,320
under the hood so I guess and you can

00:37:03,650 --> 00:37:07,940
convert the untap to typed and type to

00:37:06,320 --> 00:37:10,700
untyped so you can get access to the

00:37:07,940 --> 00:37:12,560
untyped actor system which exposes your

00:37:10,700 --> 00:37:18,200
event stream and you can just use it I

00:37:12,560 --> 00:37:19,570
guess but I didn't do that other

00:37:18,200 --> 00:37:24,680
questions

00:37:19,570 --> 00:37:26,390
over there could you please just just

00:37:24,680 --> 00:37:28,520
wait for the microphone so the others

00:37:26,390 --> 00:37:30,200
could listen as well thank you you

00:37:28,520 --> 00:37:35,150
mentioned you mentioned that akka

00:37:30,200 --> 00:37:38,480
streams is also changing in the course

00:37:35,150 --> 00:37:41,270
of chant going to typed what are the

00:37:38,480 --> 00:37:44,030
changes for akka streams concerning that

00:37:41,270 --> 00:37:48,500
I don't think there are big changes um

00:37:44,030 --> 00:37:52,400
so the changes I mentioned is the source

00:37:48,500 --> 00:37:57,080
and sink dot actor F these are methods

00:37:52,400 --> 00:37:59,030
that formally of course just or okay so

00:37:57,080 --> 00:38:01,640
that's the economy module and there's

00:37:59,030 --> 00:38:04,430
the akka streams typed module and in the

00:38:01,640 --> 00:38:08,390
ARCA streams typed you get typed actor s

00:38:04,430 --> 00:38:14,350
okay other than that akka streams is

00:38:08,390 --> 00:38:14,350
typed so it's a nice fit I would say

00:38:16,859 --> 00:38:24,239
I think the map async will also be so

00:38:21,829 --> 00:38:26,969
currently it's a little hard to do the

00:38:24,239 --> 00:38:28,499
ask pattern in archetype because you

00:38:26,969 --> 00:38:31,799
need an implicit schedule and everything

00:38:28,499 --> 00:38:36,450
so there will be some some some help us

00:38:31,799 --> 00:38:40,680
to make it a bit a little bit nicer more

00:38:36,450 --> 00:38:44,029
questions yeah okay yeah in in scar

00:38:40,680 --> 00:38:49,799
three they introduced union types and

00:38:44,029 --> 00:38:52,739
now you do a DTS and shield traits will

00:38:49,799 --> 00:38:56,609
be more explicit if you use like a union

00:38:52,739 --> 00:38:59,309
type in the XRF time that looks pretty

00:38:56,609 --> 00:39:01,529
promising yeah but I don't think akka

00:38:59,309 --> 00:39:05,249
would work on dotty does a can work on

00:39:01,529 --> 00:39:07,109
dolly guys so the haka team doesn't know

00:39:05,249 --> 00:39:10,950
so we will probably have to wait a

00:39:07,109 --> 00:39:13,650
little bit and enforce the collaboration

00:39:10,950 --> 00:39:16,709
in that regard yeah but that looks

00:39:13,650 --> 00:39:19,109
pretty promising I would say your

00:39:16,709 --> 00:39:20,849
preference was using edit ease and this

00:39:19,109 --> 00:39:23,670
is a bit different it looks like it

00:39:20,849 --> 00:39:27,299
harden it you told us your preference

00:39:23,670 --> 00:39:29,339
was to use a TTS with the seal trait yes

00:39:27,299 --> 00:39:34,880
exactly instead of using an eider or

00:39:29,339 --> 00:39:38,190
something like that so first of all

00:39:34,880 --> 00:39:41,369
sometimes you have so if you have these

00:39:38,190 --> 00:39:43,440
diverging responses sometimes you'd not

00:39:41,369 --> 00:39:45,660
only have two but three or four or

00:39:43,440 --> 00:39:49,170
whatever that would not work within

00:39:45,660 --> 00:39:51,779
either and even if your protocol evolves

00:39:49,170 --> 00:39:54,630
over time and just you start with two

00:39:51,779 --> 00:39:55,890
you might then add a three so then

00:39:54,630 --> 00:39:58,019
you're lost within either then they'll

00:39:55,890 --> 00:40:01,109
do a larger refactoring so therefore I

00:39:58,019 --> 00:40:03,660
prefer a TTS but of course it is totally

00:40:01,109 --> 00:40:06,150
possible if you just have like a or B as

00:40:03,660 --> 00:40:06,809
a response you could use either yeah if

00:40:06,150 --> 00:40:08,549
you prefer that

00:40:06,809 --> 00:40:12,209
I personally don't like it that much

00:40:08,549 --> 00:40:15,690
even even options I mean they are just

00:40:12,209 --> 00:40:18,299
wrappers and even an option could be

00:40:15,690 --> 00:40:21,359
expressed differently but yeah it's it's

00:40:18,299 --> 00:40:24,599
possible I prefer for various reasons to

00:40:21,359 --> 00:40:27,259
not use either or options but a DTS it's

00:40:24,599 --> 00:40:27,259
more flexible

00:40:28,430 --> 00:40:40,740
okay maybe one more question here the

00:40:34,770 --> 00:40:44,250
first row thank you what happened with

00:40:40,740 --> 00:40:46,590
the pattern such as a score pipe - okay

00:40:44,250 --> 00:40:48,630
what happened with a score pipe - so

00:40:46,590 --> 00:40:51,810
asked is there it's more or less the

00:40:48,630 --> 00:40:55,950
same it's a little different because of

00:40:51,810 --> 00:40:58,560
the reply to that now has to be fed into

00:40:55,950 --> 00:41:01,170
the message that is sent to the actor

00:40:58,560 --> 00:41:03,390
so therefore the ask operator not only

00:41:01,170 --> 00:41:08,100
takes a message but instead takes a

00:41:03,390 --> 00:41:10,310
function from actor F to message if you

00:41:08,100 --> 00:41:13,140
think about it it becomes obvious but

00:41:10,310 --> 00:41:16,380
then if you forget about it it looks

00:41:13,140 --> 00:41:22,560
weird again so yeah but ask ask is there

00:41:16,380 --> 00:41:24,180
there's no pipe - at all I think I asked

00:41:22,560 --> 00:41:29,240
Patrick and he told me it's no longer

00:41:24,180 --> 00:41:30,600
necessary which I don't totally

00:41:29,240 --> 00:41:38,420
understand

00:41:30,600 --> 00:41:41,160
so yeah type 2 is not there you can just

00:41:38,420 --> 00:41:44,100
yeah you can you can just broke with the

00:41:41,160 --> 00:41:47,250
future and send it your so you have to

00:41:44,100 --> 00:41:49,380
essentially do it your own I want

00:41:47,250 --> 00:41:51,840
complete Handler and send to yourself

00:41:49,380 --> 00:41:55,920
and please consume everything you take

00:41:51,840 --> 00:41:58,230
from the actor context before out so

00:41:55,920 --> 00:42:01,190
consume everything inside the behavior

00:41:58,230 --> 00:42:05,430
of the actor and not a synchrony

00:42:01,190 --> 00:42:10,620
asynchronously in this callback you give

00:42:05,430 --> 00:42:13,230
two uncomplete okay thanks I'll be

00:42:10,620 --> 00:42:16,050
around if you have more questions at

00:42:13,230 --> 00:42:18,030
lunch or later today I don't want to

00:42:16,050 --> 00:42:20,150
stand anyway as I said so enjoy your

00:42:18,030 --> 00:42:23,760
lunch and thanks for your attention

00:42:20,150 --> 00:42:23,760

YouTube URL: https://www.youtube.com/watch?v=YW2wiBERKH8


