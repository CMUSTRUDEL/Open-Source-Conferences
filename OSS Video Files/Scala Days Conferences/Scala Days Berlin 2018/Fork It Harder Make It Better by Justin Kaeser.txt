Title: Fork It Harder Make It Better by Justin Kaeser
Publication date: 2018-09-20
Playlist: Scala Days Berlin 2018
Description: 
	This video was recorded at Scala Days Berlin 2018
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://eu.scaladays.org/lect-6926-fork-it-harder-make-it-better.html
Captions: 
	00:00:04,590 --> 00:00:10,590
as you just said my name is Justin I

00:00:06,750 --> 00:00:14,490
work at IntelliJ JetBrains on the

00:00:10,590 --> 00:00:17,490
IntelliJ scalloped plugin you can find

00:00:14,490 --> 00:00:21,150
me on twitter as even beth and that's

00:00:17,490 --> 00:00:26,640
all about me right now so you may have

00:00:21,150 --> 00:00:31,320
recognized the background picture who

00:00:26,640 --> 00:00:35,519
knows it yeah that's right it's the

00:00:31,320 --> 00:00:37,980
Scala tooling ecosystem different names

00:00:35,519 --> 00:00:40,770
have been attributed to it like the

00:00:37,980 --> 00:00:44,460
Scala type system or Garden of Earthly

00:00:40,770 --> 00:00:48,630
Delights but I have it on good sources

00:00:44,460 --> 00:00:51,270
that this is the original title so the

00:00:48,630 --> 00:00:54,770
purpose of this talk is I want to give

00:00:51,270 --> 00:00:57,750
you like an overview of some tools

00:00:54,770 --> 00:01:01,860
inside and outside the Scala ecosystem

00:00:57,750 --> 00:01:07,110
that have the potential to improve your

00:01:01,860 --> 00:01:09,929
workflow and under what circumstances

00:01:07,110 --> 00:01:14,759
they would have this potential i'll give

00:01:09,929 --> 00:01:18,179
plenty of examples on that and use about

00:01:14,759 --> 00:01:20,340
where this could lead and i'll do this

00:01:18,179 --> 00:01:23,849
sort of in the structure of a Hegelian

00:01:20,340 --> 00:01:26,970
dialectic with thesis antithesis and

00:01:23,849 --> 00:01:30,660
synthesis and illustrator as you see

00:01:26,970 --> 00:01:37,140
with Hieronymus Bosch and lyrics by Daft

00:01:30,660 --> 00:01:40,610
Punk so the thesis is fork it make it do

00:01:37,140 --> 00:01:44,670
it makes us harder better faster

00:01:40,610 --> 00:01:48,060
stronger what they want to say with this

00:01:44,670 --> 00:01:51,569
so for King I am using the term quite

00:01:48,060 --> 00:01:55,259
liberally not just forking a codebase

00:01:51,569 --> 00:01:57,810
but like creating new tools for the same

00:01:55,259 --> 00:02:02,940
purpose as other tools we have in the

00:01:57,810 --> 00:02:06,270
echo system so well forking may make the

00:02:02,940 --> 00:02:10,170
whole process of software development

00:02:06,270 --> 00:02:12,719
harder to learn it will also enable as

00:02:10,170 --> 00:02:15,840
better and faster ways of doing things

00:02:12,719 --> 00:02:19,379
and thus making the ecosystem

00:02:15,840 --> 00:02:22,260
stronger throughout this I'm going to

00:02:19,379 --> 00:02:27,000
assume some basic familiarity with most

00:02:22,260 --> 00:02:31,730
popular tools so let's zoom in a bit on

00:02:27,000 --> 00:02:37,019
some things that tooling help us with

00:02:31,730 --> 00:02:38,870
this is an incomplete list like but I'll

00:02:37,019 --> 00:02:42,090
pick out some of them like learning

00:02:38,870 --> 00:02:44,430
experimenting editing code exploring

00:02:42,090 --> 00:02:48,799
under code dependency management

00:02:44,430 --> 00:02:52,680
publishing versioning first step

00:02:48,799 --> 00:02:54,980
learning and experimenting I think this

00:02:52,680 --> 00:02:56,849
is a very important than maybe sometimes

00:02:54,980 --> 00:03:03,150
undervalued part of the whole

00:02:56,849 --> 00:03:06,239
development experience because fast

00:03:03,150 --> 00:03:10,430
feedback loops when we try to learn

00:03:06,239 --> 00:03:15,090
something they they improve the whole

00:03:10,430 --> 00:03:18,840
experience so there's different ways of

00:03:15,090 --> 00:03:24,299
experimenting the classic is the ripple

00:03:18,840 --> 00:03:27,660
the read eval print loop it's there is a

00:03:24,299 --> 00:03:30,920
replica coming with Scala but it's not

00:03:27,660 --> 00:03:35,639
very advanced so there's a better one

00:03:30,920 --> 00:03:38,910
called Emma night it's a well Emma is a

00:03:35,639 --> 00:03:42,030
whole Scala crypting scripting suite by

00:03:38,910 --> 00:03:44,669
howie Lee it includes a ripple with

00:03:42,030 --> 00:03:48,630
various features such as history search

00:03:44,669 --> 00:03:51,989
syntax highlighting block input undo

00:03:48,630 --> 00:03:53,910
redo artifact imports so you don't even

00:03:51,989 --> 00:03:57,900
need a build tool for that and many

00:03:53,910 --> 00:04:01,609
others that I don't even know a

00:03:57,900 --> 00:04:06,299
different approach to a repple is a

00:04:01,609 --> 00:04:10,400
worksheet and giving an example of sky

00:04:06,299 --> 00:04:18,079
ste here it's an online worksheet

00:04:10,400 --> 00:04:20,540
so with a worksheet we have like like

00:04:18,079 --> 00:04:22,669
just a piece of code that is persistent

00:04:20,540 --> 00:04:25,669
so unlike the repple we don't scroll up

00:04:22,669 --> 00:04:28,430
and down around with a full editor

00:04:25,669 --> 00:04:31,130
instead of line by line this case too

00:04:28,430 --> 00:04:35,120
here is SBT based and here in this

00:04:31,130 --> 00:04:38,120
example I'm using it to experiment with

00:04:35,120 --> 00:04:42,590
the Giga horse library so I'm just gonna

00:04:38,120 --> 00:04:48,500
go and download the page and working on

00:04:42,590 --> 00:04:55,480
and here you see the output the direct

00:04:48,500 --> 00:04:58,669
output of the evaluation of this file so

00:04:55,480 --> 00:05:00,470
another approach is the notebook that's

00:04:58,669 --> 00:05:05,479
actually my favorite

00:05:00,470 --> 00:05:07,729
I'll show you Jupiter here so like Red

00:05:05,479 --> 00:05:14,720
Bull the notebook has a more persistent

00:05:07,729 --> 00:05:18,620
state and you updated one one input at a

00:05:14,720 --> 00:05:23,150
time so here I'm importing something

00:05:18,620 --> 00:05:23,780
Jupiter Scala notebook is also based on

00:05:23,150 --> 00:05:26,270
Emma Knight

00:05:23,780 --> 00:05:30,610
so you get most of the features of Emma

00:05:26,270 --> 00:05:36,440
Knight but you also get these cells that

00:05:30,610 --> 00:05:38,630
are editable so you can update them and

00:05:36,440 --> 00:05:42,740
experiment around with them and have the

00:05:38,630 --> 00:05:44,930
output directly in front of you so this

00:05:42,740 --> 00:05:48,770
kind of interface typically also

00:05:44,930 --> 00:05:52,570
includes some graphical output which

00:05:48,770 --> 00:05:56,270
makes it popular with data science um

00:05:52,570 --> 00:05:58,160
especially for SPARC for instance so

00:05:56,270 --> 00:06:03,130
here I'm just making a kind of a

00:05:58,160 --> 00:06:03,130
histogram of a string

00:06:03,310 --> 00:06:08,639
what's missing from this in my opinion

00:06:05,740 --> 00:06:13,960
is like integration with a full project

00:06:08,639 --> 00:06:19,150
so I ideally like to be able to run run

00:06:13,960 --> 00:06:22,360
a notebook on an IDE project the

00:06:19,150 --> 00:06:27,280
notebook interface was in fact pioneered

00:06:22,360 --> 00:06:29,980
by Mathematica and Mathematica uses it

00:06:27,280 --> 00:06:32,169
for its documentation as well so here

00:06:29,980 --> 00:06:34,720
you see extensive documentation I'm just

00:06:32,169 --> 00:06:37,660
gonna zoom in on one function the nest

00:06:34,720 --> 00:06:40,300
function and you see here there's our

00:06:37,660 --> 00:06:42,040
examples and I can play around with them

00:06:40,300 --> 00:06:46,300
immediately change the stuff and see how

00:06:42,040 --> 00:06:49,720
it how it effects the output so here I

00:06:46,300 --> 00:06:52,419
discovered a co Pinsky triangle in a in

00:06:49,720 --> 00:06:56,050
the neat example section so I'm just

00:06:52,419 --> 00:06:58,990
gonna go ahead and import a picture of

00:06:56,050 --> 00:07:04,020
what's of sierpinski scale it down a bit

00:06:58,990 --> 00:07:04,020
and insert it into this example and

00:07:04,260 --> 00:07:11,260
create as your Pinsky triangle you're

00:07:06,760 --> 00:07:15,160
welcome in my opinion this is the gold

00:07:11,260 --> 00:07:18,300
standard for documentation and I wish we

00:07:15,160 --> 00:07:23,860
had something like this in Scala

00:07:18,300 --> 00:07:26,620
so editing code is not just typing as

00:07:23,860 --> 00:07:30,430
fast as you can so you need a bit more

00:07:26,620 --> 00:07:34,000
than completions you also want to

00:07:30,430 --> 00:07:38,370
understand what's going on or how this

00:07:34,000 --> 00:07:42,360
code is structured so one example

00:07:38,370 --> 00:07:46,930
another example from Mathematica it's

00:07:42,360 --> 00:07:49,090
I'm gonna import input some complicated

00:07:46,930 --> 00:07:51,820
Mathieu formula with a square root and a

00:07:49,090 --> 00:07:53,800
sum and Mathematica immediately as a

00:07:51,820 --> 00:07:56,830
computer algebra system pretty prints it

00:07:53,800 --> 00:07:58,810
into a math formula and you can see here

00:07:56,830 --> 00:08:01,050
the press of a button I can transform it

00:07:58,810 --> 00:08:04,660
between different representations or

00:08:01,050 --> 00:08:07,210
representations and I can also use some

00:08:04,660 --> 00:08:09,630
functions on the to transform it to the

00:08:07,210 --> 00:08:13,330
input form or the full form which is

00:08:09,630 --> 00:08:15,220
akin to Lisp as expressions and even as

00:08:13,330 --> 00:08:18,460
a tree form

00:08:15,220 --> 00:08:21,370
and this is very helpful because in

00:08:18,460 --> 00:08:24,520
mathematica you have a very powerful

00:08:21,370 --> 00:08:28,480
pattern matching more so than in Scala

00:08:24,520 --> 00:08:34,270
which allows you to match on the

00:08:28,480 --> 00:08:35,260
structure of this expression something

00:08:34,270 --> 00:08:40,870
completely different

00:08:35,260 --> 00:08:43,120
low level which I discovered so in in in

00:08:40,870 --> 00:08:46,270
physics of new wildy comparison which in

00:08:43,120 --> 00:08:51,190
code get long assembly lists that are

00:08:46,270 --> 00:08:53,890
just lists of symbols and a nice way to

00:08:51,190 --> 00:08:58,600
display them actually is like this tree

00:08:53,890 --> 00:09:00,970
where the jumps will go in the code more

00:08:58,600 --> 00:09:05,470
and I think this is a nice

00:09:00,970 --> 00:09:08,320
representation for higher-level

00:09:05,470 --> 00:09:10,390
languages like Scala this might not work

00:09:08,320 --> 00:09:14,770
as well because we have more involved

00:09:10,390 --> 00:09:20,080
constructs but when attempt to do so is

00:09:14,770 --> 00:09:22,720
the code bubbles interface actually an

00:09:20,080 --> 00:09:24,970
IDE it was originally created a while

00:09:22,720 --> 00:09:29,680
ago as far as I know it's still being

00:09:24,970 --> 00:09:34,360
developed a little and as you can see

00:09:29,680 --> 00:09:37,030
here it allows you to navigate from one

00:09:34,360 --> 00:09:40,450
function to the next not by just opening

00:09:37,030 --> 00:09:42,310
the other function in a new window and

00:09:40,450 --> 00:09:45,570
jumping with the curves river but

00:09:42,310 --> 00:09:49,870
actually putting it side-by-side so you

00:09:45,570 --> 00:09:55,300
are able to actually cross reference the

00:09:49,870 --> 00:09:57,310
code you are using with the the use

00:09:55,300 --> 00:09:59,800
point where the point where you use it

00:09:57,310 --> 00:10:04,630
so that that's a more semantic way of

00:09:59,800 --> 00:10:07,240
exploring code and I think if this was

00:10:04,630 --> 00:10:12,400
implemented in a more usable way so this

00:10:07,240 --> 00:10:14,350
IDE has some effects like a drawbacks it

00:10:12,400 --> 00:10:20,290
can't even import a maven project as far

00:10:14,350 --> 00:10:23,850
as I can tell then then this could make

00:10:20,290 --> 00:10:23,850
files obsolete in some sense

00:10:24,750 --> 00:10:32,830
compiling so arguably compilers aren't

00:10:28,480 --> 00:10:35,980
really tools as such but they are the

00:10:32,830 --> 00:10:39,400
interface that stands between you and a

00:10:35,980 --> 00:10:44,710
working product so I guess that merits a

00:10:39,400 --> 00:10:49,810
few slides so here's an actual fork of

00:10:44,710 --> 00:10:55,050
the Scala compiler of like Ben Scala is

00:10:49,810 --> 00:10:59,950
type level Scala it's more focused on

00:10:55,050 --> 00:11:04,600
bringing new features and fixes quicker

00:10:59,950 --> 00:11:06,400
to people who want to work with them but

00:11:04,600 --> 00:11:09,940
otherwise tries to maintain binary

00:11:06,400 --> 00:11:13,870
compatibility with a main Scala and the

00:11:09,940 --> 00:11:15,970
Scala ecosystem another more

00:11:13,870 --> 00:11:18,910
experimental thing is the reasonable

00:11:15,970 --> 00:11:21,280
Scala compiler developed by Eugene

00:11:18,910 --> 00:11:27,040
bamako at Twitter I don't think that's

00:11:21,280 --> 00:11:32,760
him it's more more experimental it tries

00:11:27,040 --> 00:11:36,130
to figure out where to figure out like a

00:11:32,760 --> 00:11:39,640
reasonable subset of Scala that you can

00:11:36,130 --> 00:11:41,770
compile quickly and find features which

00:11:39,640 --> 00:11:47,530
have the largest compile performance and

00:11:41,770 --> 00:11:53,680
impact not a compiler but a compile

00:11:47,530 --> 00:11:58,890
server is loop so it's a thing that runs

00:11:53,680 --> 00:12:04,540
independent of your build tool and

00:11:58,890 --> 00:12:09,130
maintains hot compiler because one of

00:12:04,540 --> 00:12:12,400
the main performance impacts you can do

00:12:09,130 --> 00:12:15,640
in with the Scala compiler is not having

00:12:12,400 --> 00:12:18,670
it warmed up because the JIT compilation

00:12:15,640 --> 00:12:22,270
performs all kinds of optimizations but

00:12:18,670 --> 00:12:24,910
only once it's running for a while we

00:12:22,270 --> 00:12:28,600
also have this in the IntelliJ Scala

00:12:24,910 --> 00:12:31,330
plugin as a compile server loop aims to

00:12:28,600 --> 00:12:33,650
be a bit more general usable from any

00:12:31,330 --> 00:12:36,710
build tool

00:12:33,650 --> 00:12:40,400
so speaking about building one of my

00:12:36,710 --> 00:12:42,860
favorite subjects since I have worked

00:12:40,400 --> 00:12:47,300
long on integrating SPT into the

00:12:42,860 --> 00:12:49,790
IntelliJ Scala plugin so it doesn't

00:12:47,300 --> 00:12:52,360
involve just compiling we can use plain

00:12:49,790 --> 00:12:54,710
compiler or loop for that but also

00:12:52,360 --> 00:12:57,620
managing dependencies and putting

00:12:54,710 --> 00:13:04,100
everything together into artifacts which

00:12:57,620 --> 00:13:04,790
you can actually release so I looked

00:13:04,100 --> 00:13:06,790
around

00:13:04,790 --> 00:13:10,970
what kind of build tools there are and

00:13:06,790 --> 00:13:12,970
in general developers don't seem to be

00:13:10,970 --> 00:13:15,190
very happy with their build tools as

00:13:12,970 --> 00:13:17,720
evidenced by the fact that there is

00:13:15,190 --> 00:13:20,570
basically an egg for every letter yes

00:13:17,720 --> 00:13:26,029
these are all build tools that someone

00:13:20,570 --> 00:13:30,770
has released somewhere yeah it's missing

00:13:26,029 --> 00:13:35,810
I ache and you ache or something and

00:13:30,770 --> 00:13:40,040
take for some reason and don't think any

00:13:35,810 --> 00:13:42,830
of these are actually for Scala but we

00:13:40,040 --> 00:13:46,390
have a few in the Scala land as well so

00:13:42,830 --> 00:13:50,089
in the right corner we have the classics

00:13:46,390 --> 00:13:52,940
the classic Java tools and maven Gradle

00:13:50,089 --> 00:13:59,260
and in the left corner more Scala focus

00:13:52,940 --> 00:13:59,260
tools such as SBT CBT and recently mil

00:13:59,620 --> 00:14:11,020
contenders these are tools such as basil

00:14:05,240 --> 00:14:14,779
pants and buck by Facebook I get it that

00:14:11,020 --> 00:14:17,600
that are more focused on building from

00:14:14,779 --> 00:14:24,470
sources in a large company wide mono

00:14:17,600 --> 00:14:29,770
repo so one of the concepts of basil and

00:14:24,470 --> 00:14:33,470
in extension pants and others is that

00:14:29,770 --> 00:14:38,480
you're supposed to split your build and

00:14:33,470 --> 00:14:40,820
lots of little tasks and each task

00:14:38,480 --> 00:14:45,079
fully defines its input so it's sources

00:14:40,820 --> 00:14:48,560
it the tools it uses and so on and the

00:14:45,079 --> 00:14:52,730
environment so that in turn the outputs

00:14:48,560 --> 00:14:58,010
can be cached and if the inputs don't

00:14:52,730 --> 00:15:00,260
change you can use the outputs so like a

00:14:58,010 --> 00:15:03,050
package that you have compiled with

00:15:00,260 --> 00:15:13,220
reasonable certainty that it will be

00:15:03,050 --> 00:15:17,240
correct the Scala focus build tools CBT

00:15:13,220 --> 00:15:19,700
and mill they follow a bit slightly

00:15:17,240 --> 00:15:22,970
different ideas but they both have in

00:15:19,700 --> 00:15:26,980
common that they try to make the

00:15:22,970 --> 00:15:30,200
configuration simpler relative to SBT by

00:15:26,980 --> 00:15:35,180
allowing you to write it in plain Scala

00:15:30,200 --> 00:15:39,500
and not learn DSL and Scala

00:15:35,180 --> 00:15:43,550
on top of that so minimize the concepts

00:15:39,500 --> 00:15:45,940
that you have to learn in CBT the

00:15:43,550 --> 00:15:50,209
caching is a responsibility of

00:15:45,940 --> 00:15:55,160
individual tasks well whereas in mill

00:15:50,209 --> 00:15:56,959
the targets in mill is sort of inspired

00:15:55,160 --> 00:16:00,920
by basil here it tries to have targets

00:15:56,959 --> 00:16:03,949
which it you can fully specify and which

00:16:00,920 --> 00:16:07,430
of which the outputs will be cached but

00:16:03,949 --> 00:16:09,829
you can also have uncashed commands mill

00:16:07,430 --> 00:16:12,920
has a inspectable have task graph by

00:16:09,829 --> 00:16:19,519
default I think in CBT this is not yet

00:16:12,920 --> 00:16:22,930
the case let's look at we have the

00:16:19,519 --> 00:16:26,620
ingredients to write code and build code

00:16:22,930 --> 00:16:30,649
let's look at creating a library system

00:16:26,620 --> 00:16:36,170
I'll just show a few tests involved in

00:16:30,649 --> 00:16:40,390
doing this one major point is publishing

00:16:36,170 --> 00:16:43,190
I looked at how it's done in cargo and

00:16:40,390 --> 00:16:46,130
this is surprisingly simple I just

00:16:43,190 --> 00:16:50,930
generate an API token and

00:16:46,130 --> 00:16:53,720
I'm gonna go copy that yeah go ahead and

00:16:50,930 --> 00:17:02,060
try to use this to publish and under my

00:16:53,720 --> 00:17:05,390
name and I'm just creating a new project

00:17:02,060 --> 00:17:10,190
here with a cargo tool and looking at it

00:17:05,390 --> 00:17:12,860
their cargo uses a declarative format so

00:17:10,190 --> 00:17:14,630
for some reason they don't seem to need

00:17:12,860 --> 00:17:19,699
a turing-complete

00:17:14,630 --> 00:17:21,949
build language now I'm trying to commit

00:17:19,699 --> 00:17:25,250
this and publish it and it gives me an

00:17:21,949 --> 00:17:31,520
error is still missing a little bit just

00:17:25,250 --> 00:17:34,850
these two fields namely description for

00:17:31,520 --> 00:17:41,110
kit harder make it better and license

00:17:34,850 --> 00:17:47,120
I think WTF PL is quite appropriate and

00:17:41,110 --> 00:17:55,750
let's try to publish this again is it

00:17:47,120 --> 00:18:00,200
ready for publish this seems to have

00:17:55,750 --> 00:18:02,720
worked and let's just check out crates

00:18:00,200 --> 00:18:05,240
IO and my library has actually made it

00:18:02,720 --> 00:18:07,940
there in under two minutes of real time

00:18:05,240 --> 00:18:13,790
so in that time I don't think I could

00:18:07,940 --> 00:18:15,200
create a soma type ticket the publishing

00:18:13,790 --> 00:18:17,870
process and elm is somewhat similar

00:18:15,200 --> 00:18:20,600
there's a few extra steps because it

00:18:17,870 --> 00:18:26,540
requires you to write documentation and

00:18:20,600 --> 00:18:28,730
whatnot I've already done this here but

00:18:26,540 --> 00:18:31,820
Nome gives you a little more so I have

00:18:28,730 --> 00:18:35,420
this library for kit and I want to just

00:18:31,820 --> 00:18:40,870
add another function to it I'm calling

00:18:35,420 --> 00:18:44,330
it better so if it's the gated algorithm

00:18:40,870 --> 00:18:47,780
save it try to and yeah Elm has this

00:18:44,330 --> 00:18:53,200
went to unpackaged if it actually gives

00:18:47,780 --> 00:18:57,860
you it it analyzes if your public API

00:18:53,200 --> 00:18:58,880
has a major change or a minor change so

00:18:57,860 --> 00:19:00,860
here

00:18:58,880 --> 00:19:04,070
me was a patch change because they

00:19:00,860 --> 00:19:05,900
hadn't exported this function I saved it

00:19:04,070 --> 00:19:11,060
again and now it's a minor change

00:19:05,900 --> 00:19:14,450
I can automatically bump the version so

00:19:11,060 --> 00:19:17,060
the packaging too enforces semantic

00:19:14,450 --> 00:19:20,210
versioning and you see it bumped it up

00:19:17,060 --> 00:19:24,890
there now I'll just go ahead and commit

00:19:20,210 --> 00:19:26,450
this stuff and try to publish again okay

00:19:24,890 --> 00:19:27,260
it tells me I still have to add some

00:19:26,450 --> 00:19:30,710
tags okay

00:19:27,260 --> 00:19:32,830
but hopefully it gives me the code to

00:19:30,710 --> 00:19:37,180
paste right there

00:19:32,830 --> 00:19:42,380
another publish and success I have

00:19:37,180 --> 00:19:45,020
published a new version so I would love

00:19:42,380 --> 00:19:50,150
if I would have this in Scala as well

00:19:45,020 --> 00:19:53,470
some way of doing API is of course it's

00:19:50,150 --> 00:19:55,460
more complicated what I'm trying now I

00:19:53,470 --> 00:20:00,740
remove the function again that's a

00:19:55,460 --> 00:20:03,410
breaking change so it detects a major

00:20:00,740 --> 00:20:11,230
version change and I just go through the

00:20:03,410 --> 00:20:11,230
same process again to publish the update

00:20:14,020 --> 00:20:25,280
yeah I have to verify this just to make

00:20:20,750 --> 00:20:27,560
sure it's really there yeah another one

00:20:25,280 --> 00:20:28,950
of my favorite subjects is dependency

00:20:27,560 --> 00:20:31,920
management

00:20:28,950 --> 00:20:36,360
so that's one thing that we have in

00:20:31,920 --> 00:20:39,990
scholar world in Scala Lang is kursi

00:20:36,360 --> 00:20:42,840
luckily which makes the whole resolving

00:20:39,990 --> 00:20:45,780
process much faster as you can see here

00:20:42,840 --> 00:20:47,370
then you are used to with IV it is in

00:20:45,780 --> 00:20:52,050
fact designed to be a drop-in

00:20:47,370 --> 00:20:53,790
replacement for IV and it works almost

00:20:52,050 --> 00:20:56,630
except for there's some minor

00:20:53,790 --> 00:21:00,930
differences that has so far blocked

00:20:56,630 --> 00:21:04,950
using it by default from SPT but all the

00:21:00,930 --> 00:21:10,350
new tools like CBT and mill use kursi or

00:21:04,950 --> 00:21:13,110
something like it something completely

00:21:10,350 --> 00:21:19,740
different mix is actually designed as a

00:21:13,110 --> 00:21:22,080
package manager for OS packages it has

00:21:19,740 --> 00:21:25,200
some concepts that kind of remind me of

00:21:22,080 --> 00:21:29,010
basil and that you have to specify the

00:21:25,200 --> 00:21:32,070
exact versions of the dependencies

00:21:29,010 --> 00:21:35,100
you're building against and you again

00:21:32,070 --> 00:21:37,680
build everything from source and by

00:21:35,100 --> 00:21:41,190
doing so you're able to cache the

00:21:37,680 --> 00:21:44,400
outputs and other users consumers of

00:21:41,190 --> 00:21:49,530
whatever package you published are able

00:21:44,400 --> 00:21:52,110
to consume this from a cache but unlike

00:21:49,530 --> 00:21:53,070
basil it has a more project level

00:21:52,110 --> 00:21:55,320
granularity

00:21:53,070 --> 00:21:59,010
but I think some people have already

00:21:55,320 --> 00:22:02,310
used it as the basis for package manager

00:21:59,010 --> 00:22:04,920
it seems to be popular in SQL community

00:22:02,310 --> 00:22:09,720
but maybe somebody can tell me more

00:22:04,920 --> 00:22:12,570
later so we have all these things that

00:22:09,720 --> 00:22:14,250
work with publishing sources that seems

00:22:12,570 --> 00:22:20,100
to size stuff a lot of the problems we

00:22:14,250 --> 00:22:24,450
have with publishing binaries in in JVM

00:22:20,100 --> 00:22:29,030
typical ecosystems so would it be great

00:22:24,450 --> 00:22:29,030
if we could just publish to github and

00:22:29,570 --> 00:22:34,380
resolve from there so yes we actually

00:22:32,340 --> 00:22:37,980
can there's this neat service called

00:22:34,380 --> 00:22:41,540
jetpack and all you have to do really is

00:22:37,980 --> 00:22:45,950
add a resolver at the resolver and

00:22:41,540 --> 00:22:48,730
at a library corresponding to a github

00:22:45,950 --> 00:22:50,900
repo at a certain tag or commit hash and

00:22:48,730 --> 00:22:54,560
it will build it for you

00:22:50,900 --> 00:22:56,510
I'm not entirely sure where the limits

00:22:54,560 --> 00:22:58,570
for this lie I'm sure there's some SBT

00:22:56,510 --> 00:23:02,330
bills that are too complicated to

00:22:58,570 --> 00:23:07,930
practically be resolved by a github a

00:23:02,330 --> 00:23:13,340
very jetpack so that's enough for curry

00:23:07,930 --> 00:23:16,940
let's move on to the antithesis more

00:23:13,340 --> 00:23:24,950
than ever hour after hour work is never

00:23:16,940 --> 00:23:27,070
over yeah so as I mentioned having all

00:23:24,950 --> 00:23:29,810
these different kinds of tools that do

00:23:27,070 --> 00:23:33,590
more or less the same things a little

00:23:29,810 --> 00:23:38,960
differently makes things harder to learn

00:23:33,590 --> 00:23:41,720
so and you could make the point that the

00:23:38,960 --> 00:23:47,030
effort is better put into improving

00:23:41,720 --> 00:23:51,620
established tools and indeed there is

00:23:47,030 --> 00:23:54,010
effort being put into that just given

00:23:51,620 --> 00:23:57,380
for instance the Scala compiler

00:23:54,010 --> 00:24:00,050
currently maintained by lipe and looking

00:23:57,380 --> 00:24:01,730
at the road map we have things like they

00:24:00,050 --> 00:24:06,530
want to improve the compiler performance

00:24:01,730 --> 00:24:10,370
I think also Jorge has talked about how

00:24:06,530 --> 00:24:15,410
he's improving performance and Zink just

00:24:10,370 --> 00:24:16,940
a few hours ago um collection

00:24:15,410 --> 00:24:19,100
simplification that's more part of the

00:24:16,940 --> 00:24:24,860
library modularizing the center library

00:24:19,100 --> 00:24:26,810
and general user friendliness SBT is as

00:24:24,860 --> 00:24:30,590
you probably know used by the majority

00:24:26,810 --> 00:24:33,800
of skele plugins this time it's been

00:24:30,590 --> 00:24:36,800
around quite a while since 2009 and

00:24:33,800 --> 00:24:42,170
there is a huge ecosystem of plugins so

00:24:36,800 --> 00:24:45,850
that you're already able to to do lots

00:24:42,170 --> 00:24:48,500
of tasks whereas with a new build tool

00:24:45,850 --> 00:24:50,710
you might have to write this on your own

00:24:48,500 --> 00:24:50,710
again

00:24:51,500 --> 00:24:58,580
they they want to make contribution

00:24:55,470 --> 00:25:02,309
easier and that involves things like

00:24:58,580 --> 00:25:04,500
documentation and code and test

00:25:02,309 --> 00:25:08,130
organization labeling issues and so on

00:25:04,500 --> 00:25:12,710
and yeah this is a thing that is you

00:25:08,130 --> 00:25:17,940
could do Munter polishing the product

00:25:12,710 --> 00:25:19,740
which many new products have an issue

00:25:17,940 --> 00:25:21,750
with they don't have a lot of polish

00:25:19,740 --> 00:25:25,590
that it might have good basic

00:25:21,750 --> 00:25:30,929
documentation but maybe not so deep that

00:25:25,590 --> 00:25:33,659
you can get into other details and of

00:25:30,929 --> 00:25:37,799
course I have to talk about my product

00:25:33,659 --> 00:25:40,740
on not just my product and there's eight

00:25:37,799 --> 00:25:42,870
other people on the team it's been

00:25:40,740 --> 00:25:46,950
around since even longer first commits

00:25:42,870 --> 00:25:52,890
date back to 2006 and we have a lot on

00:25:46,950 --> 00:25:55,140
our roadmap including of course fixing

00:25:52,890 --> 00:25:58,770
various error highlighting issues that

00:25:55,140 --> 00:26:02,850
have played many of you I'm sure but

00:25:58,770 --> 00:26:04,710
also making it easier to get started in

00:26:02,850 --> 00:26:09,809
the first place with a one-click

00:26:04,710 --> 00:26:13,350
installer and also making contribution

00:26:09,809 --> 00:26:18,510
easier and make it easier to extend it

00:26:13,350 --> 00:26:22,140
with your own code just to get an idea

00:26:18,510 --> 00:26:26,370
how many of you use IntelliJ Scala or

00:26:22,140 --> 00:26:31,020
how many how many don't that's okay

00:26:26,370 --> 00:26:34,799
that's - yeah good to know thanks and

00:26:31,020 --> 00:26:39,600
and how many did new day it's open

00:26:34,799 --> 00:26:40,800
source largely yeah okay a few didn't

00:26:39,600 --> 00:26:43,570
but

00:26:40,800 --> 00:26:50,110
but yes you can look at the source and

00:26:43,570 --> 00:26:51,670
fix all the bugs yourself what's the fun

00:26:50,110 --> 00:26:57,580
yeah right it's much more fun to

00:26:51,670 --> 00:26:59,230
complain I know I like to complain this

00:26:57,580 --> 00:27:04,300
whole talk is about complaining that our

00:26:59,230 --> 00:27:07,560
ecosystem isn't good enough so so

00:27:04,300 --> 00:27:12,970
finally this brings us to the synthesis

00:27:07,560 --> 00:27:15,700
or convergence then it goes like this

00:27:12,970 --> 00:27:18,760
fork it harder make it better do it

00:27:15,700 --> 00:27:24,640
faster makes us stronger more than ever

00:27:18,760 --> 00:27:28,050
hour after hour work is never over what

00:27:24,640 --> 00:27:33,130
am I saying with this very nice lyrics

00:27:28,050 --> 00:27:36,820
so sorry I don't think there is just the

00:27:33,130 --> 00:27:40,930
choice between new tools and old tools

00:27:36,820 --> 00:27:46,780
to maintain but instead we can try to

00:27:40,930 --> 00:27:52,540
work on integrating them better so if we

00:27:46,780 --> 00:27:56,620
agree on tools and styles and most

00:27:52,540 --> 00:28:01,900
importantly protocols we can integrate

00:27:56,620 --> 00:28:05,500
things to make to leverage all the work

00:28:01,900 --> 00:28:10,060
we've done under our old tools and as

00:28:05,500 --> 00:28:12,430
well take advantage of new ideas there

00:28:10,060 --> 00:28:15,730
is has been some work going on some

00:28:12,430 --> 00:28:19,690
collaborations between various teams for

00:28:15,730 --> 00:28:23,500
instance we've we've we've coordinated

00:28:19,690 --> 00:28:27,520
with the SPT team on releasing IntelliJ

00:28:23,500 --> 00:28:31,500
and SP t10 so that we can support it

00:28:27,520 --> 00:28:34,990
more or less the moment it came out with

00:28:31,500 --> 00:28:38,560
as well as recently I've been working

00:28:34,990 --> 00:28:43,350
with Jorge from the Scala Center on the

00:28:38,560 --> 00:28:48,130
build server protocol which will be

00:28:43,350 --> 00:28:50,980
presumably available available in the

00:28:48,130 --> 00:28:53,370
IntelliJ Scala nightly is a week ago or

00:28:50,980 --> 00:28:58,659
more realistically in two weeks

00:28:53,370 --> 00:29:01,600
and of course the Scala Center which is

00:28:58,659 --> 00:29:05,470
all focused on improving Scala tooling

00:29:01,600 --> 00:29:09,809
has collaborated not only with us but

00:29:05,470 --> 00:29:16,559
also with the SBT team with a zinc

00:29:09,809 --> 00:29:22,570
compiler team and also more recently the

00:29:16,559 --> 00:29:24,669
jumper D has initiated that LSP SDP

00:29:22,570 --> 00:29:26,440
working groups that means language

00:29:24,669 --> 00:29:30,850
server protocol and Scala tooling

00:29:26,440 --> 00:29:33,190
protocol working groups which includes

00:29:30,850 --> 00:29:36,519
brings together many people working on

00:29:33,190 --> 00:29:40,210
tooling in the Scala sphere in this gala

00:29:36,519 --> 00:29:44,620
ecosystem and we're actually going to

00:29:40,210 --> 00:29:46,409
have a meeting tomorrow as well as on

00:29:44,620 --> 00:29:50,009
Friday there is going to be a

00:29:46,409 --> 00:29:53,740
Scala tooling or contributors summit

00:29:50,009 --> 00:29:56,679
where many of us will be talking to each

00:29:53,740 --> 00:30:01,539
other and trying to coordinate a way

00:29:56,679 --> 00:30:05,019
forward now I want to have a look at a

00:30:01,539 --> 00:30:10,059
few projects that further this

00:30:05,019 --> 00:30:14,259
integration so one way of integration is

00:30:10,059 --> 00:30:18,519
the language server protocol and early

00:30:14,259 --> 00:30:26,049
level project is metals its scala metal

00:30:18,519 --> 00:30:29,230
based language server and it's it brings

00:30:26,049 --> 00:30:32,679
you a few basic idea like features to

00:30:29,230 --> 00:30:35,259
any any editor that supports the

00:30:32,679 --> 00:30:39,159
language server protocol do you know the

00:30:35,259 --> 00:30:43,360
language server protocol yeah if you

00:30:39,159 --> 00:30:46,210
yeah it's a protocol initially developed

00:30:43,360 --> 00:30:51,220
by Microsoft for the visual studio code

00:30:46,210 --> 00:30:56,889
editor and it's been quite successful in

00:30:51,220 --> 00:31:00,360
attracting many many implementations for

00:30:56,889 --> 00:31:03,659
various languages because it makes the

00:31:00,360 --> 00:31:06,370
problem of integrating editors with

00:31:03,659 --> 00:31:06,740
languages somewhat easier because you

00:31:06,370 --> 00:31:09,440
don't

00:31:06,740 --> 00:31:12,500
need specific support for each editor

00:31:09,440 --> 00:31:16,429
language pairing but instead can just

00:31:12,500 --> 00:31:18,410
write some implement the support on the

00:31:16,429 --> 00:31:23,260
editor the client-side and on the server

00:31:18,410 --> 00:31:23,260
the compiler or language server-side

00:31:25,000 --> 00:31:30,790
likewise

00:31:26,809 --> 00:31:33,500
Dottie um

00:31:30,790 --> 00:31:39,679
already comes with a language server

00:31:33,500 --> 00:31:43,700
baked in and so also offers these basic

00:31:39,679 --> 00:31:50,830
idea for tiers in any editor that can

00:31:43,700 --> 00:31:54,140
support it so the build server protocol

00:31:50,830 --> 00:31:59,179
tries to extend the language server

00:31:54,140 --> 00:32:04,150
protocol in ways that allow editor or

00:31:59,179 --> 00:32:08,750
IDE to integrate with a build server or

00:32:04,150 --> 00:32:10,059
build tools such as SBT or loop which I

00:32:08,750 --> 00:32:16,160
mentioned earlier

00:32:10,059 --> 00:32:17,809
and yeah first I've been working on this

00:32:16,160 --> 00:32:23,720
together with Jorge from the Scala

00:32:17,809 --> 00:32:26,480
Center for a bit and yeah I mentioned I

00:32:23,720 --> 00:32:31,300
hope to have this merged by in a few

00:32:26,480 --> 00:32:35,030
weeks or so and if you are bill to

00:32:31,300 --> 00:32:38,110
develop her in some sense then maybe you

00:32:35,030 --> 00:32:41,090
want then maybe talked to me about

00:32:38,110 --> 00:32:44,050
getting this integrated into your own

00:32:41,090 --> 00:32:49,040
tool so that you can take advantage of

00:32:44,050 --> 00:32:52,660
IntelliJ as an editor and with direct

00:32:49,040 --> 00:32:52,660
built-in support for your tool and

00:32:55,380 --> 00:33:03,570
this is of course not all the

00:32:58,650 --> 00:33:05,820
integrations we have but as an

00:33:03,570 --> 00:33:08,820
integrated development environment

00:33:05,820 --> 00:33:13,100
intellij of course includes many

00:33:08,820 --> 00:33:17,130
integrations for many tools such as or

00:33:13,100 --> 00:33:20,310
languages such as SBT more recently

00:33:17,130 --> 00:33:21,660
ammonite scripting is supported in the

00:33:20,310 --> 00:33:26,250
ultimate version we have support for

00:33:21,660 --> 00:33:28,910
place college is akka spark support is

00:33:26,250 --> 00:33:32,370
coming soon and as I mentioned the

00:33:28,910 --> 00:33:38,210
experimental built server protocol so

00:33:32,370 --> 00:33:42,590
that's it for me what about you so I

00:33:38,210 --> 00:33:46,740
assume you might not have the time to be

00:33:42,590 --> 00:33:48,810
working on tooling all the time because

00:33:46,740 --> 00:33:51,300
you have actual business problems to

00:33:48,810 --> 00:33:56,130
solve if you're not tooling developer

00:33:51,300 --> 00:33:59,430
but maybe you can consider how much time

00:33:56,130 --> 00:34:02,790
you're using to work around limitations

00:33:59,430 --> 00:34:05,700
of the tooling and if you or your

00:34:02,790 --> 00:34:10,440
company if it doesn't make sense for you

00:34:05,700 --> 00:34:12,330
to invest a bit in this I mentioned many

00:34:10,440 --> 00:34:16,379
of the established projects are trying

00:34:12,330 --> 00:34:18,929
to make contributions easier and I think

00:34:16,379 --> 00:34:25,320
we'll be all happy to talk to you if you

00:34:18,929 --> 00:34:29,730
want to contribute to support changes in

00:34:25,320 --> 00:34:31,770
a specific direction so get in touch

00:34:29,730 --> 00:34:34,520
work together

00:34:31,770 --> 00:34:40,520
thank you that's it from my side

00:34:34,520 --> 00:34:40,520

YouTube URL: https://www.youtube.com/watch?v=M5xzoZ0ja50


