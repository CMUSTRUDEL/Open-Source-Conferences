Title: Effective Scala development in IntelliJ Idea   by Mikhail Mutcianko
Publication date: 2017-06-06
Playlist: Scala Days 2017
Description: 
	This video was recorded at Scala Days Chicago 2017
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract: 
Helping a developer to stop wasting energy on routine tasks and focusing on the most important concepts is what defines an IDE - IntelliJ Idea is constantly improving its support for writing code more productively and quickly.

In this talk I'll aim to introduce people unfamiliar with the IntelliJ Platform to Scala plugin coding assistance features and broaden the knowledge of those who consider themselves already to be experienced IDEA users.
And for the most involved it will also contain a sneak peek into the future of cross-platform metaprogramming support in IntelliJ Idea using the scala.meta API.
Captions: 
	00:00:00,060 --> 00:00:12,179
okay hello everyone welcome to Scala DS

00:00:06,710 --> 00:00:14,870
2017 Chicago my name is Michael and I'm

00:00:12,179 --> 00:00:19,439
one of the developers of Scala plugin in

00:00:14,870 --> 00:00:23,130
IntelliJ I work for jetbrains and I've

00:00:19,439 --> 00:00:27,830
been supporting several subsystems of

00:00:23,130 --> 00:00:29,970
Scala plugin for like almost three years

00:00:27,830 --> 00:00:34,020
mostly in publishers collimator

00:00:29,970 --> 00:00:37,800
support by the way we have a talk in the

00:00:34,020 --> 00:00:40,710
neighboring session which is exactly

00:00:37,800 --> 00:00:42,989
about Scala later but thanks anyway for

00:00:40,710 --> 00:00:49,410
choosing my talking stead of everyone

00:00:42,989 --> 00:00:51,840
else that's very flattering so today's

00:00:49,410 --> 00:00:55,890
talk is going to be about the productive

00:00:51,840 --> 00:00:58,820
usage of IntelliJ IDEA in particularly

00:00:55,890 --> 00:00:58,820
with Scala

00:00:59,270 --> 00:01:08,610
so just to begin with who please raise

00:01:04,290 --> 00:01:10,950
your hands no not immediately eyes after

00:01:08,610 --> 00:01:12,990
I ask you please raise your hands those

00:01:10,950 --> 00:01:18,150
people who are familiar with IntelliJ

00:01:12,990 --> 00:01:22,049
IDEA and finally changed all of you are

00:01:18,150 --> 00:01:25,189
using IntelliJ IDEA almost almost

00:01:22,049 --> 00:01:30,329
everyone well that's good to hear

00:01:25,189 --> 00:01:32,460
so but still even if you are familiar

00:01:30,329 --> 00:01:35,670
with it I'm going to show some basic

00:01:32,460 --> 00:01:40,740
stuff as well just to make everything

00:01:35,670 --> 00:01:44,549
clear oh I think there's a problem with

00:01:40,740 --> 00:01:47,399
a with a screen it shows me some unused

00:01:44,549 --> 00:01:50,130
imports there garbling the screen so I

00:01:47,399 --> 00:01:52,740
can just start with like removing them

00:01:50,130 --> 00:01:54,360
by optimizing the imports sorry for that

00:01:52,740 --> 00:02:01,979
I should have prepared better for the

00:01:54,360 --> 00:02:05,299
presentation oh yeah now these are self

00:02:01,979 --> 00:02:05,299
obviously now

00:02:05,320 --> 00:02:14,060
so what is an ID it's a tool that allows

00:02:09,950 --> 00:02:18,130
a person to code more efficiently and

00:02:14,060 --> 00:02:20,960
quickly it does it by providing several

00:02:18,130 --> 00:02:24,440
features several groups the groups of

00:02:20,960 --> 00:02:28,760
features that ease the process of

00:02:24,440 --> 00:02:32,030
writing a code since a good programmer

00:02:28,760 --> 00:02:37,670
is a lazy programmer then any good

00:02:32,030 --> 00:02:40,310
programmer must target his approach to

00:02:37,670 --> 00:02:44,320
writing code this to write let's go as a

00:02:40,310 --> 00:02:48,400
slice code as as possible and ID's use

00:02:44,320 --> 00:02:51,560
several features to help you do that

00:02:48,400 --> 00:02:54,860
let's just start with a some very very

00:02:51,560 --> 00:02:58,700
basic things why isn't the most basic

00:02:54,860 --> 00:03:00,110
thing you can do in an ID like with

00:02:58,700 --> 00:03:02,360
those several ski strokes

00:03:00,110 --> 00:03:04,310
exactly turkey strokes you can search

00:03:02,360 --> 00:03:06,980
for stuff

00:03:04,310 --> 00:03:09,650
when I press double shift it opens up a

00:03:06,980 --> 00:03:13,340
pop-up window that allows you to use the

00:03:09,650 --> 00:03:15,560
January search everywhere it is not

00:03:13,340 --> 00:03:19,100
really matter if you're searching for a

00:03:15,560 --> 00:03:21,440
class for a file or for a symbol this is

00:03:19,100 --> 00:03:23,140
like the place where to go when you

00:03:21,440 --> 00:03:27,620
don't know what you want

00:03:23,140 --> 00:03:29,330
basically like for example I want to

00:03:27,620 --> 00:03:33,980
search for something that involves

00:03:29,330 --> 00:03:37,790
implicit in our code base for those who

00:03:33,980 --> 00:03:40,730
do not know I've currently opened our

00:03:37,790 --> 00:03:42,799
own scholar plugin project and I'm going

00:03:40,730 --> 00:03:46,400
to show you that these features inside

00:03:42,799 --> 00:03:48,890
their own project so if I for example

00:03:46,400 --> 00:03:52,310
wanted to look for the implicit

00:03:48,890 --> 00:03:54,890
conversions or the code that sports

00:03:52,310 --> 00:03:59,690
implicit conversions and implicit lookup

00:03:54,890 --> 00:04:03,430
I will just type the implicit and voila

00:03:59,690 --> 00:04:07,459
all the classes that are supposedly

00:04:03,430 --> 00:04:14,180
support implicit manipulation are shown

00:04:07,459 --> 00:04:16,209
here so but this only works for the only

00:04:14,180 --> 00:04:18,459
goal of this is

00:04:16,209 --> 00:04:20,290
when you do not know what you want but

00:04:18,459 --> 00:04:22,030
because sometimes you want something in

00:04:20,290 --> 00:04:26,680
particular like search for a class or

00:04:22,030 --> 00:04:28,270
search for a method is easy to like

00:04:26,680 --> 00:04:31,180
invoke those search terms

00:04:28,270 --> 00:04:33,130
just by different key combinations like

00:04:31,180 --> 00:04:36,520
for example if I want to search for a

00:04:33,130 --> 00:04:39,100
particular class I press several key

00:04:36,520 --> 00:04:40,270
strokes which are shown on the bottom of

00:04:39,100 --> 00:04:42,940
the screen

00:04:40,270 --> 00:04:45,729
particularly for searching classes we

00:04:42,940 --> 00:04:51,180
have control-shift-n for Windows and I

00:04:45,729 --> 00:04:57,669
can basically do the same thing by using

00:04:51,180 --> 00:05:02,729
search by implicit failure I actually

00:04:57,669 --> 00:05:03,910
first control shifts sorry and place it

00:05:02,729 --> 00:05:05,800
yeah

00:05:03,910 --> 00:05:10,840
and it's basically filtering out the

00:05:05,800 --> 00:05:14,080
usages by the class okay one more

00:05:10,840 --> 00:05:16,840
important thing I already told you about

00:05:14,080 --> 00:05:19,570
in case you do not know what you're

00:05:16,840 --> 00:05:22,590
looking for you might as well do not

00:05:19,570 --> 00:05:25,270
know what feature are you looking for

00:05:22,590 --> 00:05:28,810
this is also a very useful feature to

00:05:25,270 --> 00:05:31,630
look for features and we also have a

00:05:28,810 --> 00:05:34,830
shortcut for that you just press the

00:05:31,630 --> 00:05:38,260
ctrl shift 8 to search for actions

00:05:34,830 --> 00:05:42,389
actions are basically you can call them

00:05:38,260 --> 00:05:49,510
features of an ID so if you want to like

00:05:42,389 --> 00:05:52,180
look for classes you can go class go to

00:05:49,510 --> 00:05:53,889
by name actions a basically shows you

00:05:52,180 --> 00:05:58,150
the same thing that I've shown you

00:05:53,889 --> 00:06:00,789
before all right so this is some very

00:05:58,150 --> 00:06:04,090
basic stuff that allows you to navigate

00:06:00,789 --> 00:06:08,500
quickly between files you can also do

00:06:04,090 --> 00:06:12,760
that with a control a shortcut which

00:06:08,500 --> 00:06:16,479
pops up a pretty neat tab list of recent

00:06:12,760 --> 00:06:19,900
files this is also very basic things but

00:06:16,479 --> 00:06:21,909
it allows you to quickly navigate with

00:06:19,900 --> 00:06:26,669
the files that you've recently switched

00:06:21,909 --> 00:06:29,350
to and forth ok what else will you need

00:06:26,669 --> 00:06:33,130
as you can see I'm not

00:06:29,350 --> 00:06:35,770
showing you any tabs or projects view so

00:06:33,130 --> 00:06:38,440
this is the presentation mode and you

00:06:35,770 --> 00:06:43,120
got nothing but the editor plane editor

00:06:38,440 --> 00:06:45,370
with line numbers perhaps so to quickly

00:06:43,120 --> 00:06:48,850
navigate between recently edited files

00:06:45,370 --> 00:06:51,820
you can you can press instead of control

00:06:48,850 --> 00:06:55,360
e which pops up the recent files you can

00:06:51,820 --> 00:06:58,810
press ctrl shift e to switch to recently

00:06:55,360 --> 00:07:01,660
edited files this is also useful when

00:06:58,810 --> 00:07:03,460
you are working with some code base and

00:07:01,660 --> 00:07:06,550
you're editing multiple files and do not

00:07:03,460 --> 00:07:10,900
wish to be distracted by those tabs and

00:07:06,550 --> 00:07:14,070
other clunky interface plots

00:07:10,900 --> 00:07:16,770
well basically you CLE have noted that

00:07:14,070 --> 00:07:20,770
all the shortcuts they I've shown you

00:07:16,770 --> 00:07:23,200
basically involve a keystroke and an

00:07:20,770 --> 00:07:27,580
extended mode which involves a shift and

00:07:23,200 --> 00:07:29,490
the same keystroke just like for example

00:07:27,580 --> 00:07:32,650
searching for a class is ctrl M

00:07:29,490 --> 00:07:36,730
searching for a file is quite similar

00:07:32,650 --> 00:07:39,370
its ctrl shift and there it is so if you

00:07:36,730 --> 00:07:40,600
will if you're willing to explore some

00:07:39,370 --> 00:07:49,500
features you can just add some

00:07:40,600 --> 00:07:52,990
keystrokes or a shift but anyway so this

00:07:49,500 --> 00:07:56,620
this part shows you like the navigation

00:07:52,990 --> 00:07:58,770
pretty simple but this is not the only

00:07:56,620 --> 00:08:02,890
feature you expect from ID

00:07:58,770 --> 00:08:05,740
well since IDs must not only help you to

00:08:02,890 --> 00:08:08,020
navigate code it it's you know very

00:08:05,740 --> 00:08:11,950
important purpose of it is to help you

00:08:08,020 --> 00:08:14,830
to code to write code and usually this

00:08:11,950 --> 00:08:19,270
is called completion but you probably

00:08:14,830 --> 00:08:21,550
know that and IntelliJ IDEA supports

00:08:19,270 --> 00:08:28,300
several kinds of completion which really

00:08:21,550 --> 00:08:30,820
ease up writing the code for example if

00:08:28,300 --> 00:08:37,390
I wish to introduce some variable or

00:08:30,820 --> 00:08:38,780
field it can even like suggest the name

00:08:37,390 --> 00:08:42,440
for you

00:08:38,780 --> 00:08:45,230
for example I need to element and I just

00:08:42,440 --> 00:08:48,440
take the element the first few letters

00:08:45,230 --> 00:08:52,250
and it shows you the options for the

00:08:48,440 --> 00:08:55,270
name it does this by analyzing a code

00:08:52,250 --> 00:08:57,740
base and also introducing some

00:08:55,270 --> 00:09:01,190
hard-coded predefined names which you

00:08:57,740 --> 00:09:05,510
can like reuse in your code but the main

00:09:01,190 --> 00:09:12,410
fact is is that you can just type a few

00:09:05,510 --> 00:09:19,430
letters and it will suggest you several

00:09:12,410 --> 00:09:23,360
options to use okay this is for the name

00:09:19,430 --> 00:09:25,580
suggestion for arrivals also there's

00:09:23,360 --> 00:09:32,150
very neat feature if you're defining a

00:09:25,580 --> 00:09:35,080
method foo for example it will also

00:09:32,150 --> 00:09:39,380
suggest you the names for the parameters

00:09:35,080 --> 00:09:41,990
it is very context dependent so for

00:09:39,380 --> 00:09:45,650
example in our code base we have syntax

00:09:41,990 --> 00:09:50,000
trees and syntax trees have element in

00:09:45,650 --> 00:09:54,610
their names so if I am going to use the

00:09:50,000 --> 00:09:54,610
element as an argument to the function

00:09:54,880 --> 00:09:59,930
the thing I'll do I'll just press

00:09:58,460 --> 00:10:03,410
control space which invokes the

00:09:59,930 --> 00:10:06,770
completion but as you can see there is

00:10:03,410 --> 00:10:10,660
no useful useful classes in current

00:10:06,770 --> 00:10:10,660
scope because I have not imported one

00:10:10,990 --> 00:10:18,230
this is solved by invoking completion

00:10:14,210 --> 00:10:21,530
the second time this is like a very

00:10:18,230 --> 00:10:24,620
useful feature allows you to it allows

00:10:21,530 --> 00:10:28,010
IntelliJ to scan your code base and

00:10:24,620 --> 00:10:31,460
suggest you several classes to use for

00:10:28,010 --> 00:10:38,870
example if I want to use our C elements

00:10:31,460 --> 00:10:42,170
I can just invoke the completion the

00:10:38,870 --> 00:10:46,190
second time and roll up it shows me the

00:10:42,170 --> 00:10:50,379
correct type type element for the

00:10:46,190 --> 00:10:57,459
argument okay

00:10:50,379 --> 00:11:03,139
so what else for the name suggestion

00:10:57,459 --> 00:11:06,169
several times I have to use like head

00:11:03,139 --> 00:11:09,889
applied condition for the new

00:11:06,169 --> 00:11:15,259
expressions like for example if I define

00:11:09,889 --> 00:11:21,259
a field which contains our some of our

00:11:15,259 --> 00:11:24,139
classes maybe the PSI element and I want

00:11:21,259 --> 00:11:26,449
to initialize it with some value and I

00:11:24,139 --> 00:11:29,629
can just type the new a keyword and

00:11:26,449 --> 00:11:32,629
invoke the completion after that we'll

00:11:29,629 --> 00:11:38,389
suggest you several classes that extend

00:11:32,629 --> 00:11:43,269
your type that here defined earlier this

00:11:38,389 --> 00:11:48,529
is also very useful so it allows you to

00:11:43,269 --> 00:11:50,629
like for example the key element you

00:11:48,529 --> 00:11:55,249
find work the can hole this is very big

00:11:50,629 --> 00:11:59,119
big one but in in case your project has

00:11:55,249 --> 00:12:05,689
slightly more compact definitions you

00:11:59,119 --> 00:12:12,139
might use this as well okay other

00:12:05,689 --> 00:12:16,279
important thing that you expect from an

00:12:12,139 --> 00:12:19,069
IDE is code completion you probably

00:12:16,279 --> 00:12:22,399
already know what there is but IntelliJ

00:12:19,069 --> 00:12:24,079
is quite you know famous for providing

00:12:22,399 --> 00:12:27,079
the smart completions which I've already

00:12:24,079 --> 00:12:31,999
showed you but this is not the only

00:12:27,079 --> 00:12:33,999
thing you can get there are several less

00:12:31,999 --> 00:12:37,399
known features which have been

00:12:33,999 --> 00:12:40,549
introduced pretty recently like a year

00:12:37,399 --> 00:12:45,410
ago or one in half that allow you to do

00:12:40,549 --> 00:12:55,369
very interesting things for example let

00:12:45,410 --> 00:12:58,429
me make a field there is our t element

00:12:55,369 --> 00:13:00,919
and we have several extension methods

00:12:58,429 --> 00:13:02,130
that are provided using implicit

00:13:00,919 --> 00:13:05,440
conversions

00:13:02,130 --> 00:13:09,310
but I do not have them in scope once

00:13:05,440 --> 00:13:13,269
again but I still want to invoke some of

00:13:09,310 --> 00:13:20,079
those methods you'll I think you already

00:13:13,269 --> 00:13:23,190
know what I'm going to do for example we

00:13:20,079 --> 00:13:27,459
have an extension method called module

00:13:23,190 --> 00:13:31,120
which exports the module within which

00:13:27,459 --> 00:13:34,630
this ln3 is contained as you can see it

00:13:31,120 --> 00:13:38,079
is not resolved it's read but just look

00:13:34,630 --> 00:13:40,570
if I invoke completion first time

00:13:38,079 --> 00:13:43,589
nothing happens but if I do this the

00:13:40,570 --> 00:13:46,540
second time it will also scan

00:13:43,589 --> 00:13:50,200
your project and look for the implicit

00:13:46,540 --> 00:13:54,220
conversions that are applicable in these

00:13:50,200 --> 00:13:56,380
circumstances as you can see we have

00:13:54,220 --> 00:14:00,250
found this particular extension method

00:13:56,380 --> 00:14:03,010
and we can just autocomplete it and it

00:14:00,250 --> 00:14:06,579
will insert the necessary imports

00:14:03,010 --> 00:14:09,640
automatically see this is also very

00:14:06,579 --> 00:14:12,579
useful if you are not sure which class

00:14:09,640 --> 00:14:17,399
you want to import you just invoke the

00:14:12,579 --> 00:14:21,220
smart completions second time okay

00:14:17,399 --> 00:14:23,079
this is for the completion it's fairly

00:14:21,220 --> 00:14:25,720
straightforward but the most important

00:14:23,079 --> 00:14:28,839
part is you should remember is the

00:14:25,720 --> 00:14:32,970
second time completion which invokes

00:14:28,839 --> 00:14:37,120
some functionality that is more

00:14:32,970 --> 00:14:39,940
performant Hailie so it might take a

00:14:37,120 --> 00:14:42,070
while but it performs some deep analysis

00:14:39,940 --> 00:14:44,769
of your codes and might suggest you some

00:14:42,070 --> 00:14:50,019
very useful features that you know you

00:14:44,769 --> 00:14:51,730
might not have thought through or things

00:14:50,019 --> 00:14:54,040
that you want to keep in your head but

00:14:51,730 --> 00:14:59,350
you know there's just too much too many

00:14:54,040 --> 00:15:03,160
of them okay so the completion is pretty

00:14:59,350 --> 00:15:06,730
basic feature of an ID if you look from

00:15:03,160 --> 00:15:09,850
the users perspective another important

00:15:06,730 --> 00:15:12,520
thing that an idea should do is to

00:15:09,850 --> 00:15:15,810
analyze your codes and help you find the

00:15:12,520 --> 00:15:21,939
mistakes or help you to improve your

00:15:15,810 --> 00:15:26,430
this is basically the thing that you

00:15:21,939 --> 00:15:33,399
expect from a compiler or an IDE like to

00:15:26,430 --> 00:15:36,220
supply in a default solution but in case

00:15:33,399 --> 00:15:38,499
of IntelliJ IDEA we have thing called

00:15:36,220 --> 00:15:45,819
inspections which you probably already

00:15:38,499 --> 00:15:47,529
know about and those inspections are we

00:15:45,819 --> 00:15:54,490
have plenty of inspections for example

00:15:47,529 --> 00:15:58,930
for collections this really helps if you

00:15:54,490 --> 00:16:01,749
are new to Scala and you're not really

00:15:58,930 --> 00:16:07,689
sure how to use the standard library or

00:16:01,749 --> 00:16:11,079
you know several features it also helps

00:16:07,689 --> 00:16:16,480
you to find those small mistakes which

00:16:11,079 --> 00:16:20,350
pop up sometimes like in this case I'm

00:16:16,480 --> 00:16:25,149
making a very stupid mistake of misusing

00:16:20,350 --> 00:16:28,089
the standard library this is obviously

00:16:25,149 --> 00:16:30,660
not the things you should do this is

00:16:28,089 --> 00:16:34,120
easily replaceable by exists method and

00:16:30,660 --> 00:16:38,110
IntelliJ detects the incorrect usages

00:16:34,120 --> 00:16:40,839
and suggests you to fix it automatically

00:16:38,110 --> 00:16:45,610
so in order to invoke the quick fixes

00:16:40,839 --> 00:16:47,529
you just press alt enter or alpha return

00:16:45,610 --> 00:16:53,529
for max which is basically the same

00:16:47,529 --> 00:16:56,889
thing and just replace this so it's

00:16:53,529 --> 00:16:59,620
really easy there are several other like

00:16:56,889 --> 00:17:06,760
options that you might use this examples

00:16:59,620 --> 00:17:08,280
include like this which is basically not

00:17:06,760 --> 00:17:11,169
something that you should use but

00:17:08,280 --> 00:17:13,980
sometimes I find those stupid mistakes

00:17:11,169 --> 00:17:18,270
even in our code base

00:17:13,980 --> 00:17:18,270
this is replaceable by head obviously

00:17:18,480 --> 00:17:24,640
this does not all just cover the

00:17:22,059 --> 00:17:27,220
sequence and the containers it also

00:17:24,640 --> 00:17:32,290
applies to like things like

00:17:27,220 --> 00:17:36,760
options like for example if I the result

00:17:32,290 --> 00:17:41,280
of this expression is an option as you

00:17:36,760 --> 00:17:45,300
can see Oh No find sorry

00:17:41,280 --> 00:17:49,350
if I look for something in a sequence I

00:17:45,300 --> 00:17:53,830
should get an option of something that

00:17:49,350 --> 00:17:55,180
lies in it by the way if you have seen

00:17:53,830 --> 00:17:58,780
if you have seen why I've done I've

00:17:55,180 --> 00:18:00,610
invoked a deck hint or attack info that

00:17:58,780 --> 00:18:03,460
is but also very useful feature that

00:18:00,610 --> 00:18:05,440
allows you to quickly check quickly type

00:18:03,460 --> 00:18:09,130
check parts of your expressions or your

00:18:05,440 --> 00:18:10,960
code not just to find arrow spot to like

00:18:09,130 --> 00:18:17,470
you know have an idea of what's going on

00:18:10,960 --> 00:18:21,190
in your code so it's an option but if

00:18:17,470 --> 00:18:25,000
for some reason I want to extract the

00:18:21,190 --> 00:18:28,270
value in Java style and I'll write get

00:18:25,000 --> 00:18:31,480
oil snow they also complain and like

00:18:28,270 --> 00:18:35,080
tell you that this is really fixable

00:18:31,480 --> 00:18:38,110
with a different method or not also

00:18:35,080 --> 00:18:42,400
pretty straightforward this also works

00:18:38,110 --> 00:18:45,420
for maps so in case several times I've

00:18:42,400 --> 00:18:53,350
seen people extracting values from map

00:18:45,420 --> 00:18:56,440
by using this weird constructs map all

00:18:53,350 --> 00:18:59,190
the one that's really stupid them do

00:18:56,440 --> 00:19:03,030
that those are like a value a keys

00:18:59,190 --> 00:19:08,470
method that is widely used

00:19:03,030 --> 00:19:11,610
apparently okay so those were pretty

00:19:08,470 --> 00:19:18,580
straightforward things that allow you to

00:19:11,610 --> 00:19:20,350
like move part of your job to the IDE as

00:19:18,580 --> 00:19:23,830
I've already mentioned this is also very

00:19:20,350 --> 00:19:26,650
useful for the newcomers who have very

00:19:23,830 --> 00:19:29,110
slight clue of how to use the language

00:19:26,650 --> 00:19:31,660
how to use standard library so it

00:19:29,110 --> 00:19:34,810
suggested that they enable all those

00:19:31,660 --> 00:19:38,020
inspections to like make the code

00:19:34,810 --> 00:19:39,549
cleaner and learn from their mistakes in

00:19:38,020 --> 00:19:45,580
compiled time

00:19:39,549 --> 00:19:47,080
before the compile time okay so by the

00:19:45,580 --> 00:19:54,279
way if you have any questions you can

00:19:47,080 --> 00:19:57,759
just ask right right away so other big

00:19:54,279 --> 00:20:01,299
thing we've already covered completion

00:19:57,759 --> 00:20:03,779
we've covered inspections and other big

00:20:01,299 --> 00:20:08,470
thing that people usually confuse our

00:20:03,779 --> 00:20:11,159
intentions intentions are like small

00:20:08,470 --> 00:20:15,100
refactorings that can be done in place

00:20:11,159 --> 00:20:16,570
where inspection is a thing that hence

00:20:15,100 --> 00:20:23,549
you that something is wrong with your

00:20:16,570 --> 00:20:26,409
code you might not always like want to

00:20:23,549 --> 00:20:29,440
write a code that is in veiled but

00:20:26,409 --> 00:20:32,769
sometimes you just like want to refactor

00:20:29,440 --> 00:20:41,549
something in place for example if I

00:20:32,769 --> 00:20:45,909
write a full loop from one to something

00:20:41,549 --> 00:20:49,090
and now I remember that I need to do

00:20:45,909 --> 00:20:53,830
some guides and other stuff I can

00:20:49,090 --> 00:20:58,889
quickly convert it then to the full

00:20:53,830 --> 00:20:58,889
comprehension in brackets Oh

00:21:00,210 --> 00:21:08,609
physic once okay for some reason it

00:21:06,249 --> 00:21:08,609
doesn't

00:21:11,170 --> 00:21:17,350
this is also pretty simple all the

00:21:15,580 --> 00:21:19,450
things all the smart things that you

00:21:17,350 --> 00:21:23,590
want to invoke are mostly invoked by

00:21:19,450 --> 00:21:26,440
pressing alt enter like basically if you

00:21:23,590 --> 00:21:31,720
want to use some editing or inspections

00:21:26,440 --> 00:21:34,990
or intentions or whatever else you call

00:21:31,720 --> 00:21:37,660
the context menu with alt enter this is

00:21:34,990 --> 00:21:39,850
pretty straightforward approach and

00:21:37,660 --> 00:21:45,100
we'll cover like 90% of your needs

00:21:39,850 --> 00:21:51,460
probably so alright but in case this

00:21:45,100 --> 00:21:55,870
does not satisfy you we can also do some

00:21:51,460 --> 00:21:58,090
more more stuff there also covers the

00:21:55,870 --> 00:22:00,970
sugaring the for expressions if you

00:21:58,090 --> 00:22:04,570
probably know the four expressions of

00:22:00,970 --> 00:22:07,300
Scala are later compiled into something

00:22:04,570 --> 00:22:10,270
else into some more for balls usage of

00:22:07,300 --> 00:22:12,640
Scala library functions we can also do

00:22:10,270 --> 00:22:14,970
that by invoking the same intentions and

00:22:12,640 --> 00:22:19,990
you should bring before comprehensions

00:22:14,970 --> 00:22:22,750
so if you want to know what your for

00:22:19,990 --> 00:22:26,500
loop really looks like you just invoke

00:22:22,750 --> 00:22:30,280
the same thing with the key binding that

00:22:26,500 --> 00:22:33,220
told you and showing you also pretty

00:22:30,280 --> 00:22:37,900
straightforward and easy to use all

00:22:33,220 --> 00:22:43,240
right so what are the things I might

00:22:37,900 --> 00:22:45,580
want to refactor in place yeah you

00:22:43,240 --> 00:22:48,430
probably know about like renaming but

00:22:45,580 --> 00:22:54,030
that's very simple let's do something

00:22:48,430 --> 00:23:02,610
more more advanced for example I have a

00:22:54,030 --> 00:23:08,280
function which takes some arguments and

00:23:02,610 --> 00:23:08,280
I have those arguments named somehow

00:23:10,980 --> 00:23:18,090
I can quickly then after using this

00:23:13,650 --> 00:23:21,630
function I provide it with the named

00:23:18,090 --> 00:23:23,880
arguments so in order to clarify the

00:23:21,630 --> 00:23:27,799
things that I've wrote I can just invoke

00:23:23,880 --> 00:23:31,500
the same how to enter two quick fix to

00:23:27,799 --> 00:23:35,820
quickly fix the way of calling this

00:23:31,500 --> 00:23:36,809
function by using the same method all

00:23:35,820 --> 00:23:40,169
right this is also pretty

00:23:36,809 --> 00:23:50,059
straightforward but I dislike the none

00:23:40,169 --> 00:23:54,270
number would be better yep so basically

00:23:50,059 --> 00:23:57,030
those inspections are you know those

00:23:54,270 --> 00:24:00,470
intentions as I've mentioned our small

00:23:57,030 --> 00:24:05,580
effect things that can be done in place

00:24:00,470 --> 00:24:08,490
mostly this helps when you know you're

00:24:05,580 --> 00:24:09,480
developing some large code base and you

00:24:08,490 --> 00:24:12,240
find that

00:24:09,480 --> 00:24:14,820
Yoko's does not suit some of your

00:24:12,240 --> 00:24:18,150
standards or you just want to explore

00:24:14,820 --> 00:24:23,070
the code some more this is pretty useful

00:24:18,150 --> 00:24:24,870
for you in this case all right so while

00:24:23,070 --> 00:24:28,910
the useful features does IntelliJ

00:24:24,870 --> 00:24:28,910
provide you with you code in scala

00:24:30,049 --> 00:24:38,669
probably one of the features that people

00:24:33,559 --> 00:24:44,370
discover not so easily really surprised

00:24:38,669 --> 00:24:48,570
sometimes are automatic generation of

00:24:44,370 --> 00:24:51,570
stuff like for example you are pretty I

00:24:48,570 --> 00:24:54,770
think you know that IntelliJ IDEA allows

00:24:51,570 --> 00:25:00,210
you to generate companion objects and

00:24:54,770 --> 00:25:03,660
like override methods by invoking the

00:25:00,210 --> 00:25:06,929
same health enter and like in this case

00:25:03,660 --> 00:25:08,940
I have a trait Scala days Chicago and by

00:25:06,929 --> 00:25:12,360
invoking this smart action I can just

00:25:08,940 --> 00:25:15,900
create a companion object of this

00:25:12,360 --> 00:25:18,720
straight without any hassle of writing

00:25:15,900 --> 00:25:21,110
them manually see this is also very

00:25:18,720 --> 00:25:21,110
useful

00:25:21,500 --> 00:25:27,880
also this is not the only thing that can

00:25:23,810 --> 00:25:33,250
alter generate for example if you have a

00:25:27,880 --> 00:25:37,330
sealable trait which in this case I do

00:25:33,250 --> 00:25:39,800
if you're wondering what I just did is

00:25:37,330 --> 00:25:42,560
typing a few letters and then pressing

00:25:39,800 --> 00:25:45,020
enter and a large pie of code appeared

00:25:42,560 --> 00:25:47,900
some of you might be familiar with life

00:25:45,020 --> 00:25:51,290
templates life templates are a very

00:25:47,900 --> 00:25:54,290
useful feature in case you have you know

00:25:51,290 --> 00:25:58,970
some amount of code that you write very

00:25:54,290 --> 00:26:01,250
frequently and but you know for some

00:25:58,970 --> 00:26:03,020
reason you don't want to like extract it

00:26:01,250 --> 00:26:05,540
into some method or it's generally

00:26:03,020 --> 00:26:08,990
impossible you can create a life

00:26:05,540 --> 00:26:12,680
template which will allow you to make

00:26:08,990 --> 00:26:16,610
some shortcuts I like in this case I

00:26:12,680 --> 00:26:21,320
have defined life template and cur TR

00:26:16,610 --> 00:26:24,670
which is short for m-make trait which

00:26:21,320 --> 00:26:27,310
expands it into a group of seal traits

00:26:24,670 --> 00:26:32,360
like in order to do that you have to

00:26:27,310 --> 00:26:39,650
actually go to the settings and search

00:26:32,360 --> 00:26:42,620
for live templates here it's pretty easy

00:26:39,650 --> 00:26:46,340
to add them I'm sorry this presentation

00:26:42,620 --> 00:26:49,700
mode does not allow you to see the whole

00:26:46,340 --> 00:26:56,480
window so also pretty straightforward

00:26:49,700 --> 00:26:58,280
you just define our new template define

00:26:56,480 --> 00:27:01,370
an abbreviation that we want to use and

00:26:58,280 --> 00:27:05,560
define the context contents and the

00:27:01,370 --> 00:27:08,740
context in which it's applicable so

00:27:05,560 --> 00:27:12,920
alright we actually have several more

00:27:08,740 --> 00:27:16,130
predefined templates like you probably

00:27:12,920 --> 00:27:19,610
know the main template which generates

00:27:16,130 --> 00:27:22,370
method main and some of the others okay

00:27:19,610 --> 00:27:25,280
so what can I do what interesting things

00:27:22,370 --> 00:27:27,800
can I do with the seal traits as you

00:27:25,280 --> 00:27:31,010
probably know seal traits allow for

00:27:27,800 --> 00:27:33,500
safer BOTS and matching because they

00:27:31,010 --> 00:27:34,570
guarantee that all the inheritors of the

00:27:33,500 --> 00:27:38,320
given class are

00:27:34,570 --> 00:27:43,779
find in the same place so IntelliJ can

00:27:38,320 --> 00:27:46,360
make use of it by matching by generating

00:27:43,779 --> 00:27:49,090
the bottom matching cases for you this

00:27:46,360 --> 00:27:53,679
is very useful feature and I'll

00:27:49,090 --> 00:27:58,450
demonstrate right now I'm going to

00:27:53,679 --> 00:28:01,080
create a fake methods and oops and match

00:27:58,450 --> 00:28:01,080
for it

00:28:01,679 --> 00:28:12,220
match and guess what key combination I'm

00:28:06,639 --> 00:28:14,529
going to use yeah the alt enter see it

00:28:12,220 --> 00:28:18,639
quickly generated the necessary

00:28:14,529 --> 00:28:21,070
inheritors of our plots so you can like

00:28:18,639 --> 00:28:24,179
spare yourself some time eventually

00:28:21,070 --> 00:28:29,409
especially if you have some very huge

00:28:24,179 --> 00:28:31,450
hierarchy of those seal traits yeah

00:28:29,409 --> 00:28:38,080
that's really nice I personally use it

00:28:31,450 --> 00:28:40,720
for like I'm supporting skull meta so we

00:28:38,080 --> 00:28:46,029
have a lot of like case classes and seal

00:28:40,720 --> 00:28:49,389
traits this helps really have slot one

00:28:46,029 --> 00:28:50,980
of them oh also this is not all the

00:28:49,389 --> 00:28:53,470
features from the completion that I've

00:28:50,980 --> 00:28:56,590
shown you one of the most important

00:28:53,470 --> 00:29:00,940
things that not many people know about

00:28:56,590 --> 00:29:05,379
is the POSIX completion this is very

00:29:00,940 --> 00:29:07,330
useful since you can modify your codes

00:29:05,379 --> 00:29:13,059
later after year for where you written

00:29:07,330 --> 00:29:15,129
it for example if I have something and I

00:29:13,059 --> 00:29:18,190
want to you have a string and I want to

00:29:15,129 --> 00:29:23,309
print it I would have to like surround

00:29:18,190 --> 00:29:23,309
it with the brackets oops

00:29:23,590 --> 00:29:30,370
in case you didn't know we have a

00:29:25,690 --> 00:29:32,980
surround with action this one it allows

00:29:30,370 --> 00:29:37,389
you to like wrap the expression that

00:29:32,980 --> 00:29:41,980
you've selected with something alright

00:29:37,389 --> 00:29:45,190
this is like the optimum way of doing

00:29:41,980 --> 00:29:47,730
very simple thing but instead of this I

00:29:45,190 --> 00:29:50,100
can just invert completion

00:29:47,730 --> 00:29:52,889
but it doesn't show me anything useful

00:29:50,100 --> 00:30:01,100
well it actually does but it's in the

00:29:52,889 --> 00:30:03,659
bottom and if I look for it we have

00:30:01,100 --> 00:30:05,370
certain options that are look

00:30:03,659 --> 00:30:07,710
differently so you see there are not

00:30:05,370 --> 00:30:10,289
functions they're not methods nothing

00:30:07,710 --> 00:30:12,330
nothing else but they still show up in

00:30:10,289 --> 00:30:16,620
the completion list somewhere in the

00:30:12,330 --> 00:30:18,480
bottom and you can just invoke them and

00:30:16,620 --> 00:30:21,059
we will automatically wrap your

00:30:18,480 --> 00:30:25,049
expression with something this works not

00:30:21,059 --> 00:30:32,570
just for println but also for matching

00:30:25,049 --> 00:30:38,429
things oops

00:30:32,570 --> 00:30:42,269
deleted it accidentally okay so

00:30:38,429 --> 00:30:46,799
apparently you can't match for you can't

00:30:42,269 --> 00:30:54,720
match strings I have to rewrite it yet

00:30:46,799 --> 00:30:55,980
again okay so this is very useful if you

00:30:54,720 --> 00:31:02,370
want to generate something afterwards

00:30:55,980 --> 00:31:06,809
yeah a green tooltips that's a

00:31:02,370 --> 00:31:09,000
presentation assistant plug-in well it's

00:31:06,809 --> 00:31:13,500
not very useful if you're not presenting

00:31:09,000 --> 00:31:16,590
since like if you're just yeah that's a

00:31:13,500 --> 00:31:21,110
plug-in it's very simple one it just

00:31:16,590 --> 00:31:26,519
shows you this pop-up with key bindings

00:31:21,110 --> 00:31:28,950
okay so like for example we have a match

00:31:26,519 --> 00:31:33,120
Pacific's template which allows you to

00:31:28,950 --> 00:31:39,059
quickly create button match on a sum

00:31:33,120 --> 00:31:41,130
expression very useful okay you can look

00:31:39,059 --> 00:31:45,450
for the complete list of Bostick's

00:31:41,130 --> 00:31:48,600
completion in settings as you probably

00:31:45,450 --> 00:31:50,450
remember just use the search for

00:31:48,600 --> 00:31:55,940
Bostick's

00:31:50,450 --> 00:32:00,269
completion see I chose some Java as well

00:31:55,940 --> 00:32:03,149
we have you know not worries for one

00:32:00,269 --> 00:32:06,269
a pretty big list for both sexes

00:32:03,149 --> 00:32:07,679
completions for Scala but if you would

00:32:06,269 --> 00:32:10,649
like to see something else you can just

00:32:07,679 --> 00:32:16,830
like ask for it on our issue tracker or

00:32:10,649 --> 00:32:22,049
in geta okay so that's it for the basic

00:32:16,830 --> 00:32:25,950
things one another important but other

00:32:22,049 --> 00:32:30,690
more advanced feature is inspection of

00:32:25,950 --> 00:32:33,749
implicit if you're right code that uses

00:32:30,690 --> 00:32:38,070
some implicit you can like very quickly

00:32:33,749 --> 00:32:42,899
analyze things by invoking several of

00:32:38,070 --> 00:32:51,139
you know our key bindings for example I

00:32:42,899 --> 00:32:57,229
have we have a class which see Factory

00:32:51,139 --> 00:32:57,229
which requires some implicit parameters

00:32:57,799 --> 00:33:05,729
okay

00:32:59,009 --> 00:33:09,959
create element for text basically

00:33:05,729 --> 00:33:13,440
creates index trees from from whatever

00:33:09,959 --> 00:33:17,429
you supply okay

00:33:13,440 --> 00:33:21,209
in order to show the implicit parameters

00:33:17,429 --> 00:33:25,369
that are expected in a particular place

00:33:21,209 --> 00:33:30,059
you press another key stroke which is

00:33:25,369 --> 00:33:32,969
oops sorry control shifts she control

00:33:30,059 --> 00:33:36,570
shift P and it will show you the

00:33:32,969 --> 00:33:39,989
implicit parameters that are expected in

00:33:36,570 --> 00:33:42,929
a certain place again this is invoked by

00:33:39,989 --> 00:33:47,519
pressing control shift P on Windows or

00:33:42,929 --> 00:33:49,559
CMD P on Macs also pretty

00:33:47,519 --> 00:33:52,049
straightforward but now it doesn't work

00:33:49,559 --> 00:33:56,039
since I haven't provided it with any of

00:33:52,049 --> 00:33:59,339
the implicit right now but I can just

00:33:56,039 --> 00:34:06,200
define a dummy dummy method that does

00:33:59,339 --> 00:34:13,640
its project

00:34:06,200 --> 00:34:18,740
it doesn't do anything and oops to

00:34:13,640 --> 00:34:22,280
define it implicit okay

00:34:18,740 --> 00:34:27,610
let's take a look well clickable type up

00:34:22,280 --> 00:34:27,610
this is one knock sound sorry

00:34:30,070 --> 00:34:40,180
did it work now no okay

00:34:34,700 --> 00:34:43,940
I guess we'll take a look at next time

00:34:40,180 --> 00:34:47,810
sorry same thing goes for implicit

00:34:43,940 --> 00:34:50,750
conversions in case you're using the

00:34:47,810 --> 00:34:55,850
default scholar as Java as something

00:34:50,750 --> 00:34:59,330
else which you can si already showed you

00:34:55,850 --> 00:35:01,790
look up by simply invoking double

00:34:59,330 --> 00:35:08,450
completion even if you do not have these

00:35:01,790 --> 00:35:14,480
implicit in scope you will automatically

00:35:08,450 --> 00:35:17,870
attach them to your code by imports and

00:35:14,480 --> 00:35:19,700
here you can like see what I brush and

00:35:17,870 --> 00:35:21,500
conversions have been applied to a

00:35:19,700 --> 00:35:25,150
particular expression and quickly

00:35:21,500 --> 00:35:28,330
navigate to it like for example here

00:35:25,150 --> 00:35:31,010
this is final class any two string adds

00:35:28,330 --> 00:35:35,440
yeah this is also very useful if you're

00:35:31,010 --> 00:35:37,550
writing a code with the many implicit or

00:35:35,440 --> 00:35:42,710
implicit conversion simplicity

00:35:37,550 --> 00:35:47,450
parameters or so okay this is like the

00:35:42,710 --> 00:35:51,340
end of the most basic things that one

00:35:47,450 --> 00:35:56,210
would use in scala plugin for IntelliJ

00:35:51,340 --> 00:36:01,250
but in case you have no you know

00:35:56,210 --> 00:36:03,890
something about scala meta this is a

00:36:01,250 --> 00:36:06,560
framework for that was going to replace

00:36:03,890 --> 00:36:10,190
is going to replace the old style

00:36:06,560 --> 00:36:14,130
scholar reflect microbes and intending

00:36:10,190 --> 00:36:17,820
to use some many programming purposes

00:36:14,130 --> 00:36:21,540
we now support scholar Mehta the support

00:36:17,820 --> 00:36:25,760
has been up for like a year or so but in

00:36:21,540 --> 00:36:28,680
case you missed the colonizer supports

00:36:25,760 --> 00:36:30,810
annotations that can transform things

00:36:28,680 --> 00:36:33,840
that they annotate for example it can

00:36:30,810 --> 00:36:38,420
add methods it can add companion objects

00:36:33,840 --> 00:36:41,460
it can like rewrite your methods or so

00:36:38,420 --> 00:36:46,020
like the pretty straightforward examples

00:36:41,460 --> 00:36:49,710
would be to add a main method to an

00:36:46,020 --> 00:36:51,330
object like the annotations to do that

00:36:49,710 --> 00:36:54,120
are pretty straightforward they defined

00:36:51,330 --> 00:36:57,380
in your project as well but we're not

00:36:54,120 --> 00:37:00,180
going to focus on the implementation the

00:36:57,380 --> 00:37:03,360
thing you need to know is that this main

00:37:00,180 --> 00:37:05,370
annotation adds a main method and in

00:37:03,360 --> 00:37:07,880
order to see the results of the

00:37:05,370 --> 00:37:12,180
expansion you can just click the

00:37:07,880 --> 00:37:14,820
appeared icon and it will expand the

00:37:12,180 --> 00:37:20,280
code by running by actually running the

00:37:14,820 --> 00:37:22,440
annotation that you've supplied another

00:37:20,280 --> 00:37:25,650
useful feature is ability to report

00:37:22,440 --> 00:37:28,980
errors from the annotation as you can

00:37:25,650 --> 00:37:32,310
see it supplies here yeah this

00:37:28,980 --> 00:37:35,160
annotation just determines if the thing

00:37:32,310 --> 00:37:37,440
is a trait or not in if it's nitrate it

00:37:35,160 --> 00:37:40,800
will like supply you with an exception

00:37:37,440 --> 00:37:44,630
but if I change it to a trait the

00:37:40,800 --> 00:37:48,300
warning will go away is it really useful

00:37:44,630 --> 00:37:52,170
also the accessions method as extension

00:37:48,300 --> 00:37:54,600
methods will resolve now so this

00:37:52,170 --> 00:37:58,530
particular annotation adds companion

00:37:54,600 --> 00:38:00,510
object and previously as you can see the

00:37:58,530 --> 00:38:02,670
companion method did not resolve that is

00:38:00,510 --> 00:38:05,280
defining a companion object but if I

00:38:02,670 --> 00:38:09,990
enable the annotation it magically

00:38:05,280 --> 00:38:11,870
appears ok so that's also pretty useful

00:38:09,990 --> 00:38:14,730
feature if you are using Scala meta and

00:38:11,870 --> 00:38:19,920
have not caught up with the latest

00:38:14,730 --> 00:38:24,060
changes all right so that's basically

00:38:19,920 --> 00:38:26,299
the basic the most basic things that one

00:38:24,060 --> 00:38:29,929
might expect from an IDE

00:38:26,299 --> 00:38:33,309
and while they look basic from the

00:38:29,929 --> 00:38:33,309
outside they are actually pretty useful

00:38:33,579 --> 00:38:56,239
so I think we have like five minutes to

00:38:38,479 --> 00:38:58,249
go in the sample questions yeah I've

00:38:56,239 --> 00:39:03,529
shown you several things that have not

00:38:58,249 --> 00:39:05,019
been yet documented mainly like the

00:39:03,529 --> 00:39:11,150
things that have been changed within

00:39:05,019 --> 00:39:14,059
half half year also including Skylar

00:39:11,150 --> 00:39:20,029
meadow support boss fix completion for

00:39:14,059 --> 00:39:24,130
some advanced things yep but you can

00:39:20,029 --> 00:39:24,130
always explore it manually yeah

00:39:24,799 --> 00:39:32,539
currently we are focused on supporting

00:39:27,049 --> 00:39:39,859
several new subsystems first one is SBT

00:39:32,539 --> 00:39:43,189
we have like modified this thing in a

00:39:39,859 --> 00:39:47,209
very heavy manner so now we support SVD

00:39:43,189 --> 00:39:49,969
console which is basically integrated

00:39:47,209 --> 00:39:53,329
now into the inter I D so you can run

00:39:49,969 --> 00:39:56,479
your build run your tests from the

00:39:53,329 --> 00:40:00,619
console itself and we'll report the

00:39:56,479 --> 00:40:02,599
fancy results of testing right into into

00:40:00,619 --> 00:40:06,189
the IDE

00:40:02,599 --> 00:40:09,229
another big thing is support for akka

00:40:06,189 --> 00:40:15,619
Andrews having a talk tomorrow he will

00:40:09,229 --> 00:40:18,170
showcase the like all the intermediate

00:40:15,619 --> 00:40:22,670
support for it it's going to be a part

00:40:18,170 --> 00:40:27,939
of ultimate projects so we provide

00:40:22,670 --> 00:40:27,939
commercial Edition Scholar plugin

00:40:28,150 --> 00:40:34,089
another thing Scotty is calamita

00:40:31,459 --> 00:40:36,739
which are already mentioned we are

00:40:34,089 --> 00:40:38,239
constantly working to improve the

00:40:36,739 --> 00:40:39,840
support alongside with the skyline

00:40:38,239 --> 00:40:44,970
entity itself

00:40:39,840 --> 00:40:45,470
okay then probably that's it thank you

00:40:44,970 --> 00:40:50,570
everyone

00:40:45,470 --> 00:40:50,570

YouTube URL: https://www.youtube.com/watch?v=z-2l-SKdFsY


