Title: DRY compiling!   by Krzysztof Romanowski
Publication date: 2017-06-28
Playlist: Scala Days 2017
Description: 
	This video was recorded at Scala Days Copenhagen 2017
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract: 
How many time do you spent compiling your code after branch change?
Did you ever setup multiple copy of same repository just not to trigger full compilation?

Scala is known for it’s long compilation times. Dotty or Hydra compilers may help us here but we don’t expect order of magnitude speedup (and this is what we really want).

It’s time to change this! 
Let’s reuse incremental compilations from CIs or your colleagues computers and save lots of time. You are one commit ahead of master? Don't worry - incremental compilation will do all the work for you!

Fixing critical problems in old releases? Open source project setup? Cached compilation can save your precious minutes there.

Add Hoarder plugin (github.com/romanowski/hoarder) to your sbt project and don’t repeat yourself compiling code that was already compiled!
Captions: 
	00:00:04,800 --> 00:00:11,190
I want to talk how to avoid compilations

00:00:08,250 --> 00:00:12,330
how to get your code compiled we also

00:00:11,190 --> 00:00:16,020
actually

00:00:12,330 --> 00:00:18,270
to finish before I start there is an

00:00:16,020 --> 00:00:22,560
application you probably know that that

00:00:18,270 --> 00:00:27,500
you can vote and before we go into a

00:00:22,560 --> 00:00:30,380
further let's start some completion so

00:00:27,500 --> 00:00:33,720
this would I go furious enzyme server

00:00:30,380 --> 00:00:40,530
first I want to do a queen I will keep

00:00:33,720 --> 00:00:41,970
the compilation of everything and now I

00:00:40,530 --> 00:00:44,610
don't need to wait I can do other things

00:00:41,970 --> 00:00:48,000
so now I can enjoy this message properly

00:00:44,610 --> 00:00:51,930
so as I said I'm Christoph I'm from

00:00:48,000 --> 00:00:55,920
Reuters lab and where I work on creating

00:00:51,930 --> 00:01:00,809
the tooling for quite a big workspaces

00:00:55,920 --> 00:01:02,820
using Scala to get you some context

00:01:00,809 --> 00:01:05,880
about the workspaces this is a big-money

00:01:02,820 --> 00:01:08,190
repo with over 2 million size of Scala

00:01:05,880 --> 00:01:11,340
code over 200 developers working on

00:01:08,190 --> 00:01:13,200
there all of that code it means like 13

00:01:11,340 --> 00:01:15,600
peers get merge to the main branch every

00:01:13,200 --> 00:01:18,090
day and compilation time which is the

00:01:15,600 --> 00:01:20,280
big the biggest problem take over 40

00:01:18,090 --> 00:01:22,560
minutes and the machine that we compiled

00:01:20,280 --> 00:01:26,460
is quite powerful it's almost a server

00:01:22,560 --> 00:01:29,250
like six quarks and process or 32

00:01:26,460 --> 00:01:33,710
gigabytes of RAM and SSD drive so this

00:01:29,250 --> 00:01:36,530
is not a normal laptop and there we

00:01:33,710 --> 00:01:39,330
despite of any other problems with this

00:01:36,530 --> 00:01:42,810
kind of work space this big can provide

00:01:39,330 --> 00:01:47,159
is we try to fix the computation times

00:01:42,810 --> 00:01:50,250
and approach everything I mentioned

00:01:47,159 --> 00:01:52,080
later on it's being developed formed for

00:01:50,250 --> 00:01:54,450
for that work space it quite a different

00:01:52,080 --> 00:01:57,300
form form but the idea is the same and

00:01:54,450 --> 00:01:59,340
regarded on production right now and I

00:01:57,300 --> 00:02:02,550
was able to cut down the computation

00:01:59,340 --> 00:02:05,610
time from 14 minutes up to 8 at some

00:02:02,550 --> 00:02:09,599
point so we are quite happy in normal

00:02:05,610 --> 00:02:14,670
cases like 2025 and you will see later

00:02:09,599 --> 00:02:18,480
online so first we probably should look

00:02:14,670 --> 00:02:22,150
at the compiler and you can tell why

00:02:18,480 --> 00:02:25,599
it's so slow and how slow is it is it so

00:02:22,150 --> 00:02:28,569
right now I want to ask you to raise

00:02:25,599 --> 00:02:30,489
your hand if your standard normal

00:02:28,569 --> 00:02:36,580
incremental compilation takes around 10

00:02:30,489 --> 00:02:38,500
seconds nice if the dis compilation take

00:02:36,580 --> 00:02:43,870
around minutes like a normal incremental

00:02:38,500 --> 00:02:48,760
one okay most most people der 5 minutes

00:02:43,870 --> 00:02:50,260
or more okay and is there like anyone

00:02:48,760 --> 00:02:53,620
that is like 15 minutes or more for an

00:02:50,260 --> 00:02:56,019
incremental compilation two fingers okay

00:02:53,620 --> 00:03:00,250
I see I see your point I wasn't good

00:02:56,019 --> 00:03:02,650
place so this is the distance Amber's I

00:03:00,250 --> 00:03:04,989
took from open source libraries enzyme

00:03:02,650 --> 00:03:07,150
server Scala debugger akka it's like I

00:03:04,989 --> 00:03:09,489
take one poor request and compile that

00:03:07,150 --> 00:03:12,190
against previously called post compiled

00:03:09,489 --> 00:03:14,170
and the times are like well what most of

00:03:12,190 --> 00:03:15,579
hands was shown I mean around a minute

00:03:14,170 --> 00:03:17,470
doesn't mean it's something like that

00:03:15,579 --> 00:03:19,030
and I think this is that this is what

00:03:17,470 --> 00:03:22,000
you can live with and we are happy with

00:03:19,030 --> 00:03:23,970
however we still sometimes got we do

00:03:22,000 --> 00:03:26,889
something to get us out of the Facebook

00:03:23,970 --> 00:03:30,940
but yeah the incremental one we can live

00:03:26,889 --> 00:03:33,970
and I generally notice there is code and

00:03:30,940 --> 00:03:36,669
warm numbers here so it's unrelated to

00:03:33,970 --> 00:03:38,200
stock but please keep your SBT or JVM

00:03:36,669 --> 00:03:39,910
hotter than when you compile the stuff

00:03:38,200 --> 00:03:42,190
because it will mix means that the

00:03:39,910 --> 00:03:43,780
completion will be faster even almost

00:03:42,190 --> 00:03:45,280
twice in case on enzyme server it was

00:03:43,780 --> 00:03:48,940
exactly the same change compiled on the

00:03:45,280 --> 00:03:50,709
code I mean just started and the the LED

00:03:48,940 --> 00:03:53,769
key instance that was to compile two

00:03:50,709 --> 00:03:58,139
things so just for the sake of time keep

00:03:53,769 --> 00:04:00,400
your SVG open all the time and that

00:03:58,139 --> 00:04:03,519
picture changed when you go to the

00:04:00,400 --> 00:04:05,650
folders so again I want to ask your

00:04:03,519 --> 00:04:07,599
questions whose workspace compiled in

00:04:05,650 --> 00:04:11,440
ten seconds if this is a full build so

00:04:07,599 --> 00:04:13,419
we do clean and then build okay

00:04:11,440 --> 00:04:23,910
no I expected at least one one hand

00:04:13,419 --> 00:04:23,910
around in minutes five around fifteen

00:04:24,110 --> 00:04:29,449
and if they're like anyone that complies

00:04:26,300 --> 00:04:33,590
for more than 15 minutes so this is

00:04:29,449 --> 00:04:36,139
probably talk for you guys and yeah the

00:04:33,590 --> 00:04:38,360
numbers from the open source project has

00:04:36,139 --> 00:04:41,780
pretty much the same around like three

00:04:38,360 --> 00:04:43,550
to five minutes and this is not only

00:04:41,780 --> 00:04:45,469
that we took this five minutes to dive

00:04:43,550 --> 00:04:48,050
into it the problem is that when takes

00:04:45,469 --> 00:04:49,370
like five minutes or more we don't want

00:04:48,050 --> 00:04:52,159
to wait that much so we're doing other

00:04:49,370 --> 00:04:55,189
stuff like fainting our friends or doing

00:04:52,159 --> 00:04:56,240
a coffee or going for lunch and okay we

00:04:55,189 --> 00:04:59,629
are doing something we are not wasting

00:04:56,240 --> 00:05:01,219
time let's say but the problem for me is

00:04:59,629 --> 00:05:02,930
that we lose all the contacts that we

00:05:01,219 --> 00:05:05,000
have but we'd like develop something

00:05:02,930 --> 00:05:07,669
pretty nice and then we have to do four

00:05:05,000 --> 00:05:09,590
full build because I don't know we break

00:05:07,669 --> 00:05:12,439
our SBT or something for some other

00:05:09,590 --> 00:05:14,210
reason and then after this ten minutes

00:05:12,439 --> 00:05:16,789
we completely forgot what was there

00:05:14,210 --> 00:05:19,219
before we need to build this plan we

00:05:16,789 --> 00:05:20,840
need to build the caches in our head

00:05:19,219 --> 00:05:23,509
again and this is a bigger problem

00:05:20,840 --> 00:05:25,250
because we might even forgot the perfect

00:05:23,509 --> 00:05:27,139
path that we want to do they're very

00:05:25,250 --> 00:05:30,169
factoring now it's gone and we had to

00:05:27,139 --> 00:05:31,719
scratch our head what was it perfectly

00:05:30,169 --> 00:05:35,569
what's the pattern I have to apply here

00:05:31,719 --> 00:05:38,110
so that is why I in this presentation I

00:05:35,569 --> 00:05:41,120
want to make all of the compilation

00:05:38,110 --> 00:05:43,969
incremental I mean in terms of the time

00:05:41,120 --> 00:05:46,310
they tack take so whenever you can like

00:05:43,969 --> 00:05:47,629
even on for CI or you just break your

00:05:46,310 --> 00:05:50,089
workspace and you want to do it again

00:05:47,629 --> 00:05:51,259
I'll start from this new branch what I

00:05:50,089 --> 00:05:53,060
want to do I want to make this

00:05:51,259 --> 00:05:57,500
compression incremental or even almost

00:05:53,060 --> 00:05:59,750
no up in the best cases and I think

00:05:57,500 --> 00:06:04,580
right now is that the perfect time so I

00:05:59,750 --> 00:06:06,849
show you some how old you can do so our

00:06:04,580 --> 00:06:10,759
computation finished I'm sorry it's

00:06:06,849 --> 00:06:13,099
almost exactly two minutes so let's do

00:06:10,759 --> 00:06:18,469
something as a no because you can see

00:06:13,099 --> 00:06:22,520
this clear or not cool okay so let's do

00:06:18,469 --> 00:06:26,240
a clean and now before I catch compile

00:06:22,520 --> 00:06:30,139
again let me just call this magic

00:06:26,240 --> 00:06:31,580
command called start apply it will take

00:06:30,139 --> 00:06:35,000
a while it will bring something to the

00:06:31,580 --> 00:06:37,590
console it's quite early space so I'd

00:06:35,000 --> 00:06:39,660
right now I am print a lot like Tex Tex

00:06:37,590 --> 00:06:44,850
second and let's do the computation

00:06:39,660 --> 00:06:46,890
again it's formatting formatting and we

00:06:44,850 --> 00:06:48,510
done in first four seconds and you have

00:06:46,890 --> 00:06:51,030
to believe me that I didn't say with

00:06:48,510 --> 00:06:55,080
green it's clean the workspace and I

00:06:51,030 --> 00:06:56,960
mean I can run tests this is the setup

00:06:55,080 --> 00:07:00,090
nothing good compiled everything is fine

00:06:56,960 --> 00:07:01,650
so we was able to cut down the three

00:07:00,090 --> 00:07:03,120
minutes compilation into four seconds or

00:07:01,650 --> 00:07:06,570
maybe can if you compare two comments

00:07:03,120 --> 00:07:10,170
together and this is the kind of results

00:07:06,570 --> 00:07:13,830
I want to achieve with my plugin because

00:07:10,170 --> 00:07:16,140
you just met harder and harder is the

00:07:13,830 --> 00:07:17,390
thing that allows you to do such a quick

00:07:16,140 --> 00:07:20,070
compilation

00:07:17,390 --> 00:07:21,870
just to not to confuse anyone this is

00:07:20,070 --> 00:07:23,400
not the holder so doesn't to do with

00:07:21,870 --> 00:07:25,050
Game of Thrones this kind of stuff

00:07:23,400 --> 00:07:26,760
because the guys was like a little bit

00:07:25,050 --> 00:07:29,550
confused this is a hoarder

00:07:26,760 --> 00:07:33,960
so like guys that emulate all the stuff

00:07:29,550 --> 00:07:36,090
together and yeah as I said this is an

00:07:33,960 --> 00:07:38,430
SVT plug-in it's released

00:07:36,090 --> 00:07:40,800
it's the I'm still working on that so it

00:07:38,430 --> 00:07:43,230
doesn't have a stable release but I

00:07:40,800 --> 00:07:45,690
think I'm close to that if you are

00:07:43,230 --> 00:07:47,640
interested it's on my github and if you

00:07:45,690 --> 00:07:49,140
type in google hoarder scholar it should

00:07:47,640 --> 00:07:53,100
be the first result I hope it was

00:07:49,140 --> 00:07:55,170
yesterday so I hope it's still okay so

00:07:53,100 --> 00:07:57,690
what is all about how does it work

00:07:55,170 --> 00:08:01,200
so what I trying to do with Toder I'm

00:07:57,690 --> 00:08:03,930
trying to mimic compilation this magical

00:08:01,200 --> 00:08:04,980
command start apply try to mimic the

00:08:03,930 --> 00:08:07,080
compilation so there is a catch

00:08:04,980 --> 00:08:09,210
somewhere where there because I didn't

00:08:07,080 --> 00:08:10,530
speed up the compiler like 20 times if

00:08:09,210 --> 00:08:12,360
not I will be like presenting on the

00:08:10,530 --> 00:08:14,400
main main main stage and everybody will

00:08:12,360 --> 00:08:17,940
be so happy about that I'm not that

00:08:14,400 --> 00:08:21,690
smart and yeah so what I did here is

00:08:17,940 --> 00:08:23,550
basically I'm trying to take the cash it

00:08:21,690 --> 00:08:25,260
generates that for some computation I

00:08:23,550 --> 00:08:26,700
try to apply that cash and when you're

00:08:25,260 --> 00:08:28,260
applying that cash I try to mimic the

00:08:26,700 --> 00:08:30,870
compilation so you can think of that

00:08:28,260 --> 00:08:32,400
that you just come back to the place to

00:08:30,870 --> 00:08:35,340
the source which bar space where the

00:08:32,400 --> 00:08:37,260
castle's generated PGD compile compile

00:08:35,340 --> 00:08:39,000
the distinct locally and then come back

00:08:37,260 --> 00:08:42,240
to the to the state of the works that

00:08:39,000 --> 00:08:44,460
you are currently in and run incremental

00:08:42,240 --> 00:08:45,930
compilation right now makes no sense

00:08:44,460 --> 00:08:47,220
because you pay a lot of time for the

00:08:45,930 --> 00:08:49,680
incremental computation changing the

00:08:47,220 --> 00:08:51,180
context but it's all cast so the cash

00:08:49,680 --> 00:08:53,970
applying the cash was like six

00:08:51,180 --> 00:08:55,920
six seconds for the enzyme server so we

00:08:53,970 --> 00:08:58,230
can pay this amount of time because it

00:08:55,920 --> 00:09:00,540
is mostly pure i/o operation called cup

00:08:58,230 --> 00:09:02,670
copying their physics and extracting

00:09:00,540 --> 00:09:07,070
them so not nothing really hard not not

00:09:02,670 --> 00:09:09,930
not merely heavy and why I believe that

00:09:07,070 --> 00:09:11,840
incremental compilation and cache this

00:09:09,930 --> 00:09:13,950
connection is so powerful

00:09:11,840 --> 00:09:15,480
the biggest problem when you go to cache

00:09:13,950 --> 00:09:17,790
is when you have to invalidate that

00:09:15,480 --> 00:09:19,740
cache but for me I don't have to do much

00:09:17,790 --> 00:09:21,210
about that because incremental compiler

00:09:19,740 --> 00:09:24,810
is here for me because what I'm doing

00:09:21,210 --> 00:09:25,170
I'm just trying to I'm basically doing

00:09:24,810 --> 00:09:27,600
that

00:09:25,170 --> 00:09:30,090
I'm telling compiler okay this binary

00:09:27,600 --> 00:09:33,180
classes was recompile in this kind of

00:09:30,090 --> 00:09:37,170
configuration of this metadata so find

00:09:33,180 --> 00:09:39,000
the changes and we compile them all so

00:09:37,170 --> 00:09:40,950
if you go to cache the sometimes you

00:09:39,000 --> 00:09:43,110
need a direct hit so either you got the

00:09:40,950 --> 00:09:45,660
cache or not with incremental

00:09:43,110 --> 00:09:47,670
compilation in caching you can be like

00:09:45,660 --> 00:09:49,620
in the in the half way you can be like

00:09:47,670 --> 00:09:51,360
adultery commit away from cache and it

00:09:49,620 --> 00:09:53,190
was clear benefit from the cache because

00:09:51,360 --> 00:09:54,840
what is change incremental compiler will

00:09:53,190 --> 00:09:57,240
detect that change and compile for you

00:09:54,840 --> 00:09:59,900
and we pretty much are happy with how

00:09:57,240 --> 00:10:02,280
incremental compiler works for us I mean

00:09:59,900 --> 00:10:06,840
is there like anyone that complains a

00:10:02,280 --> 00:10:10,800
lot about incremental compiler I know

00:10:06,840 --> 00:10:13,590
what do you mean because I I see so much

00:10:10,800 --> 00:10:16,050
cases but general in general it's not

00:10:13,590 --> 00:10:19,560
that bad or even if something is broken

00:10:16,050 --> 00:10:22,290
but in 95% of cases we are fine we can

00:10:19,560 --> 00:10:26,180
take this clean compile time this time

00:10:22,290 --> 00:10:28,680
so it's not that big of a problem and

00:10:26,180 --> 00:10:30,240
third thing that is so powerful here is

00:10:28,680 --> 00:10:32,250
that we don't need the full cache so for

00:10:30,240 --> 00:10:34,350
example one of the workflows I will

00:10:32,250 --> 00:10:36,480
mention later is to support to provide

00:10:34,350 --> 00:10:38,490
them incremental compilation metadata to

00:10:36,480 --> 00:10:40,260
released code because there is a

00:10:38,490 --> 00:10:42,510
binaries lying all over the places like

00:10:40,260 --> 00:10:45,360
maven repository and for me all these

00:10:42,510 --> 00:10:47,190
places are potential caches that problem

00:10:45,360 --> 00:10:50,010
with terror list is that it contains

00:10:47,190 --> 00:10:52,590
only main only compressors from the

00:10:50,010 --> 00:10:54,090
compile scope in most cases but with

00:10:52,590 --> 00:10:56,070
incremental computation we are fine

00:10:54,090 --> 00:10:57,960
because the rest the tests will be

00:10:56,070 --> 00:10:59,730
recompiled on the spot so we can still

00:10:57,960 --> 00:11:02,160
benefit from from they come from the

00:10:59,730 --> 00:11:05,940
reduce of completion time

00:11:02,160 --> 00:11:09,480
I set a lot of about cash but what the

00:11:05,940 --> 00:11:12,000
cash exactly is it's two things binaries

00:11:09,480 --> 00:11:14,459
so classifies nothing to say more about

00:11:12,000 --> 00:11:17,759
that does it cross bars and the metadata

00:11:14,459 --> 00:11:21,899
that this is a transformed Zink analyzes

00:11:17,759 --> 00:11:23,430
and what I don't know if you know how to

00:11:21,899 --> 00:11:27,269
link orange between chrome metal

00:11:23,430 --> 00:11:31,110
compiler works yeah this is for the

00:11:27,269 --> 00:11:33,480
expected so this metadata is the key for

00:11:31,110 --> 00:11:35,519
four whole days so it describes all the

00:11:33,480 --> 00:11:37,589
relations between sources it described

00:11:35,519 --> 00:11:39,870
relation between libraries and sources

00:11:37,589 --> 00:11:41,790
and describes relation I describe the

00:11:39,870 --> 00:11:44,069
state during during the last computation

00:11:41,790 --> 00:11:46,459
so that status for example where the

00:11:44,069 --> 00:11:49,889
output is or does the compiler options

00:11:46,459 --> 00:11:53,220
what is like it also like the hashes or

00:11:49,889 --> 00:11:56,910
the stamps how is it causing zinc of the

00:11:53,220 --> 00:11:58,800
libraries and sources so with that state

00:11:56,910 --> 00:12:01,230
we can like compare the state with the

00:11:58,800 --> 00:12:03,839
state that we have currently and find

00:12:01,230 --> 00:12:05,459
the flag places that are change if the

00:12:03,839 --> 00:12:08,730
same goes with relations so basically

00:12:05,459 --> 00:12:11,250
this metadata is the key to find them

00:12:08,730 --> 00:12:16,050
what really two-bit compiled based on

00:12:11,250 --> 00:12:18,870
what is changed you want to access one

00:12:16,050 --> 00:12:21,449
it's not that hard in if you do if you

00:12:18,870 --> 00:12:23,670
do an SBT show in compiled setup you

00:12:21,449 --> 00:12:25,939
will get case class printed and the

00:12:23,670 --> 00:12:30,290
fourth parameter in that case class is

00:12:25,939 --> 00:12:34,889
passed to that file with this metadata

00:12:30,290 --> 00:12:38,550
it's usually something like that and if

00:12:34,889 --> 00:12:40,199
you want to use that because it's quite

00:12:38,550 --> 00:12:41,759
interesting information can be found

00:12:40,199 --> 00:12:46,410
there like for example which classes

00:12:41,759 --> 00:12:49,139
confirm which source or what which

00:12:46,410 --> 00:12:50,759
library is just where and if you want to

00:12:49,139 --> 00:12:52,589
do it in some kind of tool you can do

00:12:50,759 --> 00:12:55,019
that by accessing care director in int

00:12:52,589 --> 00:12:57,899
compile set up tasks and the file there

00:12:55,019 --> 00:13:01,170
is controlled by compile analysis file

00:12:57,899 --> 00:13:04,709
name setting and if you don't want to do

00:13:01,170 --> 00:13:07,769
that sorry I can do it I can show the

00:13:04,709 --> 00:13:10,019
the Texas small file for you and this is

00:13:07,769 --> 00:13:13,620
what all of your workspaces have a lot

00:13:10,019 --> 00:13:15,120
so each scope I mean each configuration

00:13:13,620 --> 00:13:16,170
in each project wherever there's at

00:13:15,120 --> 00:13:18,570
least one scholar sources

00:13:16,170 --> 00:13:20,880
generate something like this where all

00:13:18,570 --> 00:13:23,550
the information starts the output is

00:13:20,880 --> 00:13:25,760
quite terrible it's my opinion but it

00:13:23,550 --> 00:13:28,740
worked and nobody care because it worked

00:13:25,760 --> 00:13:31,230
right now we did the dirt magnet we

00:13:28,740 --> 00:13:33,420
there is a lot of work around zinc and

00:13:31,230 --> 00:13:35,970
think is incremental compilers taken out

00:13:33,420 --> 00:13:39,660
from SBT in short words and they plan to

00:13:35,970 --> 00:13:42,210
you something saying here I don't know

00:13:39,660 --> 00:13:45,090
protobufs there's the debate how to tell

00:13:42,210 --> 00:13:48,420
to keep that and you probably can notice

00:13:45,090 --> 00:13:51,300
that there is paths like this so the top

00:13:48,420 --> 00:13:54,360
are absolutes and that are absolute and

00:13:51,300 --> 00:13:57,150
it's not enough doing the paths that are

00:13:54,360 --> 00:13:59,730
absolute it's much more things that make

00:13:57,150 --> 00:14:01,590
this cache this metadata sorry works by

00:13:59,730 --> 00:14:03,840
specific so you can't just copy the

00:14:01,590 --> 00:14:05,820
class files and this file and put it

00:14:03,840 --> 00:14:09,090
into another workspace it will not work

00:14:05,820 --> 00:14:10,530
because like absolute paths maybe we

00:14:09,090 --> 00:14:12,270
will be able to fix that because we know

00:14:10,530 --> 00:14:14,490
the output we know this were the sources

00:14:12,270 --> 00:14:17,400
is in the link maybe we might use a

00:14:14,490 --> 00:14:20,010
related path but there is more for

00:14:17,400 --> 00:14:22,650
example you got ID caches where all the

00:14:20,010 --> 00:14:24,630
libraries are stored and there it can be

00:14:22,650 --> 00:14:26,940
different on different machines and zinc

00:14:24,630 --> 00:14:28,680
has no idea if there is a jar if it's

00:14:26,940 --> 00:14:32,280
like comes from this dependency or

00:14:28,680 --> 00:14:34,620
another and we can change the output

00:14:32,280 --> 00:14:36,240
locations and to be honest if you change

00:14:34,620 --> 00:14:39,450
output location there is no classes

00:14:36,240 --> 00:14:41,310
there then we use the cache why do we

00:14:39,450 --> 00:14:43,740
need to recompile everything because of

00:14:41,310 --> 00:14:45,750
the output changes there was a question

00:14:43,740 --> 00:14:48,450
on Stack Overflow and somebody asking

00:14:45,750 --> 00:14:49,830
that's why when I renamed in the

00:14:48,450 --> 00:14:51,300
top-level name of the workspace

00:14:49,830 --> 00:14:53,900
everything the technical part because of

00:14:51,300 --> 00:14:57,840
that because of the episode path and

00:14:53,900 --> 00:15:00,510
goes into also more and obvious things

00:14:57,840 --> 00:15:03,990
like lying light endings if you want to

00:15:00,510 --> 00:15:05,580
use a castanet in Linux on Mac there is

00:15:03,990 --> 00:15:08,370
a lot of there is a good probability

00:15:05,580 --> 00:15:12,780
that it will not work because the line

00:15:08,370 --> 00:15:15,210
lines endings are different and the last

00:15:12,780 --> 00:15:17,160
one is the back they actually have in in

00:15:15,210 --> 00:15:20,220
hoarder I mean I forgot to map the

00:15:17,160 --> 00:15:22,260
location of the Java so yeah that is why

00:15:20,220 --> 00:15:24,240
you cannot just take it analyzes and

00:15:22,260 --> 00:15:26,480
copy to different project and think that

00:15:24,240 --> 00:15:28,639
will work but

00:15:26,480 --> 00:15:30,079
there is a solution for that of course

00:15:28,639 --> 00:15:33,050
you can try to attract clean text

00:15:30,079 --> 00:15:35,000
replaced all those values but I don't

00:15:33,050 --> 00:15:38,029
think it will make it will work in the

00:15:35,000 --> 00:15:39,949
longer term so what I did in SBT 1.0 I

00:15:38,029 --> 00:15:42,260
mean in Zink want and he want to enjoy

00:15:39,949 --> 00:15:44,149
the same way it's I created something

00:15:42,260 --> 00:15:46,370
called analyzes mapper that actually

00:15:44,149 --> 00:15:48,260
mapped each of the things that can be

00:15:46,370 --> 00:15:50,660
mapped like source location library

00:15:48,260 --> 00:15:53,750
location or stamps or when default

00:15:50,660 --> 00:15:55,699
configuration and you can provide this

00:15:53,750 --> 00:15:57,139
mapper and you can control what is where

00:15:55,699 --> 00:15:59,329
and you know exactly what is what what

00:15:57,139 --> 00:16:00,980
the contexts are youing so you know that

00:15:59,329 --> 00:16:03,380
this is the source to the library this

00:16:00,980 --> 00:16:05,839
is a product so it means classifies so

00:16:03,380 --> 00:16:08,240
you can play with this value and you are

00:16:05,839 --> 00:16:10,279
like table like you're looking from

00:16:08,240 --> 00:16:12,980
above because you are in working in the

00:16:10,279 --> 00:16:15,949
in would be built infrastructure like in

00:16:12,980 --> 00:16:18,860
SVG for example so we know like there is

00:16:15,949 --> 00:16:20,449
a jar on class path but I know exactly

00:16:18,860 --> 00:16:22,730
what is the dependence that it comes

00:16:20,449 --> 00:16:24,589
from I know what the library so if it's

00:16:22,730 --> 00:16:26,959
like just cash from my friend repository

00:16:24,589 --> 00:16:29,209
between two machines if the publication

00:16:26,959 --> 00:16:32,089
date is the same is the same jar if

00:16:29,209 --> 00:16:34,519
everything goes right and most likely do

00:16:32,089 --> 00:16:37,880
so we don't need to recompile everything

00:16:34,519 --> 00:16:39,680
and when we apply this mapper to the

00:16:37,880 --> 00:16:42,079
cache before we get something like this

00:16:39,680 --> 00:16:44,600
is much shorter agree as you can see the

00:16:42,079 --> 00:16:47,839
all the paths are replaced with some

00:16:44,600 --> 00:16:50,269
form text format when the SBT moved to

00:16:47,839 --> 00:16:53,120
proto before other product proper format

00:16:50,269 --> 00:16:54,800
it will also change so right now I'm

00:16:53,120 --> 00:16:57,350
using what I have all the other what ifs

00:16:54,800 --> 00:17:01,370
but it works and I don't see any

00:16:57,350 --> 00:17:05,860
pronounce of that and this is all what

00:17:01,370 --> 00:17:08,480
we can talk about metadata so I think

00:17:05,860 --> 00:17:10,790
right now it's good time if you got any

00:17:08,480 --> 00:17:13,850
questions about the the general idea

00:17:10,790 --> 00:17:16,579
because how to use that there is much

00:17:13,850 --> 00:17:18,049
more slides after this one but if you

00:17:16,579 --> 00:17:21,699
got any questions about the general idea

00:17:18,049 --> 00:17:25,419
the general engine this is a good time

00:17:21,699 --> 00:17:25,419
ok like there's one

00:17:28,899 --> 00:17:35,779
okay what is the key to the cash at this

00:17:33,440 --> 00:17:38,450
level there is none because the key to

00:17:35,779 --> 00:17:39,980
the cash is in the next slide it's the

00:17:38,450 --> 00:17:42,610
how how we can find the cursor not by

00:17:39,980 --> 00:17:42,610
the cash okay

00:17:43,520 --> 00:17:53,120
so let's go further yes so how you can

00:17:50,299 --> 00:17:56,720
use that before you can move anywhere

00:17:53,120 --> 00:17:59,510
there just apply plug-in to your SBT

00:17:56,720 --> 00:18:02,870
project or if you want because there is

00:17:59,510 --> 00:18:04,490
also the basic plug in the south of

00:18:02,870 --> 00:18:07,429
plugins how it applies automatically all

00:18:04,490 --> 00:18:10,000
the changes to your project does not

00:18:07,429 --> 00:18:13,610
does not change that alter any of the

00:18:10,000 --> 00:18:16,549
predefined switch tasks and I like only

00:18:13,610 --> 00:18:19,220
the the commands that are that are

00:18:16,549 --> 00:18:20,750
designed to be called by users are we

00:18:19,220 --> 00:18:22,159
have the any prefix the rest of the

00:18:20,750 --> 00:18:25,159
settings and the commands is pressing

00:18:22,159 --> 00:18:27,559
the folder so it's pretty safe to add it

00:18:25,159 --> 00:18:31,100
to your global SBT plugins so it will be

00:18:27,559 --> 00:18:33,440
applied to plug into all of the project

00:18:31,100 --> 00:18:35,570
that you work on given machine it just

00:18:33,440 --> 00:18:39,230
add this and you can access you can work

00:18:35,570 --> 00:18:43,610
with basic stuff like stuff or they just

00:18:39,230 --> 00:18:46,100
show you so right now I am in right now

00:18:43,610 --> 00:18:47,870
I in generally I think when I develop

00:18:46,100 --> 00:18:51,049
the new features for holder I think in

00:18:47,870 --> 00:18:53,770
terms of workflows why is that because

00:18:51,049 --> 00:18:57,169
the way have you generate the cash

00:18:53,770 --> 00:18:59,480
determines how the cache is used so you

00:18:57,169 --> 00:19:03,049
cannot for example mix this to maybe you

00:18:59,480 --> 00:19:04,789
can but you probably shouldn't like if

00:19:03,049 --> 00:19:08,240
you got catalyst and you want to like

00:19:04,789 --> 00:19:10,789
stuff I using stashed metals up to get

00:19:08,240 --> 00:19:12,830
the results when that occurs release at

00:19:10,789 --> 00:19:14,750
this moment it will not work later on

00:19:12,830 --> 00:19:16,669
maybe but in general you should like

00:19:14,750 --> 00:19:18,529
thing in a workflows what I mean by warp

00:19:16,669 --> 00:19:20,090
also how cash is generated how we can

00:19:18,529 --> 00:19:22,880
find the cash on how we can apply the

00:19:20,090 --> 00:19:25,159
cash and at this moment there is three

00:19:22,880 --> 00:19:27,799
workflow supported the last one is to be

00:19:25,159 --> 00:19:30,380
better feature because I just create

00:19:27,799 --> 00:19:32,690
test integration tester grunen locally

00:19:30,380 --> 00:19:35,240
involves committed to change but I don't

00:19:32,690 --> 00:19:37,600
do any extensive testing around that and

00:19:35,240 --> 00:19:40,090
I'm not quite sure exactly if

00:19:37,600 --> 00:19:41,740
there is none like any information

00:19:40,090 --> 00:19:43,419
published so please don't publish

00:19:41,740 --> 00:19:45,760
anything with this to the maven central

00:19:43,419 --> 00:19:48,100
at this moment or if you want to like

00:19:45,760 --> 00:19:50,410
flee from the edge it's your call

00:19:48,100 --> 00:19:53,500
I just want you so let's look at the

00:19:50,410 --> 00:19:56,770
first one that is called stars that

00:19:53,500 --> 00:19:58,870
apply you probably see the dissimilar 82

00:19:56,770 --> 00:20:01,900
the get stash and get startup lie

00:19:58,870 --> 00:20:03,100
workflow it's exactly what it does if

00:20:01,900 --> 00:20:05,020
you go to the compilation you just

00:20:03,100 --> 00:20:07,450
called good stuff the results will be

00:20:05,020 --> 00:20:09,640
stashed on the side you can then played

00:20:07,450 --> 00:20:12,010
with the code change it change a branch

00:20:09,640 --> 00:20:13,630
then come back to the same point and you

00:20:12,010 --> 00:20:15,789
don't want to recompile the code again

00:20:13,630 --> 00:20:18,730
so it does called such apply and the

00:20:15,789 --> 00:20:21,789
computation is back so it can be used

00:20:18,730 --> 00:20:23,710
anywhere like just it is probably the

00:20:21,789 --> 00:20:26,679
only workflow that we that we work if

00:20:23,710 --> 00:20:28,809
you do as you say global plugin because

00:20:26,679 --> 00:20:29,950
it doesn't require any configuration for

00:20:28,809 --> 00:20:34,510
the under project

00:20:29,950 --> 00:20:37,000
because none is required and you are

00:20:34,510 --> 00:20:39,250
responsible for fighting for for being

00:20:37,000 --> 00:20:41,440
sure that if you start something then

00:20:39,250 --> 00:20:43,450
you an stash or start apply the correct

00:20:41,440 --> 00:20:47,080
correct thing to correct price similar

00:20:43,450 --> 00:20:49,330
to the good stuff it's all up to you for

00:20:47,080 --> 00:20:52,330
me this is really useful because this

00:20:49,330 --> 00:20:54,789
dissenters workflow and it's really easy

00:20:52,330 --> 00:20:58,030
to write the integration test and I got

00:20:54,789 --> 00:20:59,530
a lot of them using that stuff

00:20:58,030 --> 00:21:02,590
test Acorah features like I don't know

00:20:59,530 --> 00:21:03,789
if given libraries properly mapped it's

00:21:02,590 --> 00:21:05,919
quite easy web starts because there is

00:21:03,789 --> 00:21:08,909
no much things around that more

00:21:05,919 --> 00:21:12,429
documentation can be found on github and

00:21:08,909 --> 00:21:15,100
right now I think I can show you more or

00:21:12,429 --> 00:21:16,630
less how you can use that so let's back

00:21:15,100 --> 00:21:19,450
to the same thing you saw the stuff

00:21:16,630 --> 00:21:21,429
apply so let's let me show you how stuff

00:21:19,450 --> 00:21:23,140
command work so this is the simple

00:21:21,429 --> 00:21:25,720
command and it takes two optional

00:21:23,140 --> 00:21:28,120
parameters two labels by default there's

00:21:25,720 --> 00:21:31,360
two one that project and version project

00:21:28,120 --> 00:21:33,610
is the descriptor of the whole project

00:21:31,360 --> 00:21:35,559
that's a multi project database Vicki by

00:21:33,610 --> 00:21:37,870
default is the name of the top-level

00:21:35,559 --> 00:21:40,179
directory and the version is had by

00:21:37,870 --> 00:21:43,210
default but we can provide any things

00:21:40,179 --> 00:21:47,860
like I don't know Scala days for example

00:21:43,210 --> 00:21:51,200
version 45 and it will just publish few

00:21:47,860 --> 00:21:53,900
few few zips and exclusives one

00:21:51,200 --> 00:21:55,730
analyzing song with classes on the site

00:21:53,900 --> 00:21:58,040
and as you can see it's stored in key

00:21:55,730 --> 00:22:02,210
global directory where like for example

00:21:58,040 --> 00:22:04,040
SBT caches that it's instance or other

00:22:02,210 --> 00:22:05,900
global stuff of course this can be

00:22:04,040 --> 00:22:08,870
changed there is the default setting for

00:22:05,900 --> 00:22:11,750
everything so you can say you can choose

00:22:08,870 --> 00:22:14,390
the place that suits you more and to

00:22:11,750 --> 00:22:18,670
apply that cache first or you want to

00:22:14,390 --> 00:22:23,870
clean so it will be testing something

00:22:18,670 --> 00:22:27,550
start apply and we are we should be good

00:22:23,870 --> 00:22:27,550
to for example run tests directly

00:22:30,100 --> 00:22:36,380
formatting I cannot control formatting

00:22:32,330 --> 00:22:40,580
and yeah the test started I produces it

00:22:36,380 --> 00:22:43,460
because now I have to write anyway there

00:22:40,580 --> 00:22:46,580
is a scholar there is a checks build

00:22:43,460 --> 00:22:49,340
like you cannot publish the same to the

00:22:46,580 --> 00:22:51,230
same cache twice but you can turn to

00:22:49,340 --> 00:22:53,630
change the default settings to false and

00:22:51,230 --> 00:22:56,180
you can do that now of course when you

00:22:53,630 --> 00:22:58,550
try to access cache that does not exist

00:22:56,180 --> 00:22:59,840
it will also fail and there is one more

00:22:58,550 --> 00:23:03,320
comment that you can use it's called

00:22:59,840 --> 00:23:05,930
cache starscream that if you want to

00:23:03,320 --> 00:23:07,670
clean given entry you can do that this

00:23:05,930 --> 00:23:10,010
works fine with the cross built because

00:23:07,670 --> 00:23:13,520
the cache is prefixed with the discolor

00:23:10,010 --> 00:23:14,930
person so you should be free to like if

00:23:13,520 --> 00:23:18,440
you want to start and start by a

00:23:14,930 --> 00:23:23,720
artifact for multiple scala versions it

00:23:18,440 --> 00:23:26,810
should work second integration I created

00:23:23,720 --> 00:23:29,570
for for holder is for the poor equals

00:23:26,810 --> 00:23:32,090
verification you probably should be

00:23:29,570 --> 00:23:34,280
worried that I want to use incremental

00:23:32,090 --> 00:23:36,710
compiler to verify the pro request

00:23:34,280 --> 00:23:39,920
because we know that incremental

00:23:36,710 --> 00:23:42,050
compiler is a heuristic so why I suggest

00:23:39,920 --> 00:23:43,700
you to use that particular to use

00:23:42,050 --> 00:23:46,640
incremental compilation on the protocol

00:23:43,700 --> 00:23:48,530
certification first of all even if you

00:23:46,640 --> 00:23:51,950
do like the compilation from the scratch

00:23:48,530 --> 00:23:54,260
even if you set on multiple machines but

00:23:51,950 --> 00:23:55,940
you can see gods like the one to

00:23:54,260 --> 00:23:58,160
porridge quest in the same time are

00:23:55,940 --> 00:24:00,380
green and are merged back together to

00:23:58,160 --> 00:24:02,420
this to the master branch the the

00:24:00,380 --> 00:24:04,320
Bismark files from the master you are

00:24:02,420 --> 00:24:07,220
not safe or if you got the call

00:24:04,320 --> 00:24:09,900
that is hazards but they're quite old

00:24:07,220 --> 00:24:12,690
and they are incompatible with the

00:24:09,900 --> 00:24:16,380
current state they might be not we don't

00:24:12,690 --> 00:24:19,710
need to get conflicts to break the the

00:24:16,380 --> 00:24:22,530
main branch so that is why you ready to

00:24:19,710 --> 00:24:23,790
run a lot of stuff a lot of poor

00:24:22,530 --> 00:24:25,470
requests over the particular

00:24:23,790 --> 00:24:27,000
certification to be just sure whenever

00:24:25,470 --> 00:24:28,560
you match something you need to read

00:24:27,000 --> 00:24:32,520
trigger of the previous four requests

00:24:28,560 --> 00:24:35,610
verifications and since this is quite

00:24:32,520 --> 00:24:37,710
like requires a lot of a lot of machines

00:24:35,610 --> 00:24:40,020
to the death or a lot of infrastructure

00:24:37,710 --> 00:24:41,970
and moreover it requires a lot of time

00:24:40,020 --> 00:24:44,370
to wait if you've got multiple users

00:24:41,970 --> 00:24:46,680
that and the same times want to merge a

00:24:44,370 --> 00:24:48,270
lot of stuff to the main branch like as

00:24:46,680 --> 00:24:49,560
I said there is a forty forty per

00:24:48,270 --> 00:24:53,550
request contract Archie

00:24:49,560 --> 00:24:58,020
so four requests per day each day in the

00:24:53,550 --> 00:24:59,970
work space I work with and the the

00:24:58,020 --> 00:25:01,800
problems like that are like almost like

00:24:59,970 --> 00:25:03,630
once a week the master is broken even if

00:25:01,800 --> 00:25:05,700
we don't do when if we do extensive

00:25:03,630 --> 00:25:07,980
testing like and the Porco's

00:25:05,700 --> 00:25:12,540
verification it takes like an hour to

00:25:07,980 --> 00:25:14,490
complete so you probably I mean I I just

00:25:12,540 --> 00:25:17,850
want my protocol certification to be

00:25:14,490 --> 00:25:19,950
quite fast why is that yes I attest with

00:25:17,850 --> 00:25:22,800
my code is the code locally maybe I

00:25:19,950 --> 00:25:24,450
didn't run the old whole test but I want

00:25:22,800 --> 00:25:26,490
to test for example the same code on the

00:25:24,450 --> 00:25:30,060
windows I don't develop the color on

00:25:26,490 --> 00:25:31,980
Windows and I don't want to wait like 10

00:25:30,060 --> 00:25:34,590
minutes or 15 minutes for compilation to

00:25:31,980 --> 00:25:35,730
finish before but I know that I paint

00:25:34,590 --> 00:25:37,140
only one thing and I know that

00:25:35,730 --> 00:25:39,510
incremental computation we work fine

00:25:37,140 --> 00:25:41,490
because I did it in my machine so that

00:25:39,510 --> 00:25:44,160
is why I suggest this particular

00:25:41,490 --> 00:25:46,830
verification do it and for the unstable

00:25:44,160 --> 00:25:49,800
builds what I can suggest is that you

00:25:46,830 --> 00:25:51,750
should do post merge those to verify the

00:25:49,800 --> 00:25:53,610
code then it would be completely safe

00:25:51,750 --> 00:25:56,310
and in the same time see if is that

00:25:53,610 --> 00:25:58,530
possible build you can generate caches

00:25:56,310 --> 00:26:00,660
and those caches can be used for next

00:25:58,530 --> 00:26:03,780
pull requests so now you can reduce I

00:26:00,660 --> 00:26:06,180
don't know the ten I mean you can reduce

00:26:03,780 --> 00:26:08,280
the time required to compile the per

00:26:06,180 --> 00:26:10,140
request 10% and basically the time that

00:26:08,280 --> 00:26:12,809
you have to wait on your machine to

00:26:10,140 --> 00:26:15,990
compile that for requests

00:26:12,809 --> 00:26:18,529
and as I said is required possible goods

00:26:15,990 --> 00:26:20,879
because the question to be generated and

00:26:18,529 --> 00:26:22,950
we've dealt with this combination that

00:26:20,879 --> 00:26:25,889
you you had your branch you had port

00:26:22,950 --> 00:26:28,200
marked bills and whenever that postmark

00:26:25,889 --> 00:26:29,639
big files for given per request then you

00:26:28,200 --> 00:26:31,769
know that mean to just reported poori

00:26:29,639 --> 00:26:33,990
goes back and fix the problem you can do

00:26:31,769 --> 00:26:36,210
some kind of changing staging branch

00:26:33,990 --> 00:26:38,970
that this intermediate branch before the

00:26:36,210 --> 00:26:40,679
code go to masters go to master and this

00:26:38,970 --> 00:26:42,389
was worked quite well because then you

00:26:40,679 --> 00:26:44,549
can like we need to try to do a release

00:26:42,389 --> 00:26:47,009
for example you can just write extensive

00:26:44,549 --> 00:26:48,809
even like the testing guzik so kind of

00:26:47,009 --> 00:26:54,289
QA teams or whatever you use to test

00:26:48,809 --> 00:26:59,269
your code more on that is again on the

00:26:54,289 --> 00:27:02,009
docks and you probably think that

00:26:59,269 --> 00:27:04,619
setting up something that hard on this

00:27:02,009 --> 00:27:07,100
infrastructure requires a lot of changes

00:27:04,619 --> 00:27:09,779
I want to prove it that it does not

00:27:07,100 --> 00:27:13,019
because this is all the changes I need

00:27:09,779 --> 00:27:15,600
to done to make increment to make all

00:27:13,019 --> 00:27:17,340
the compilations incremental for a

00:27:15,600 --> 00:27:19,950
political verification for enzyme server

00:27:17,340 --> 00:27:24,330
so there is four changes that we need to

00:27:19,950 --> 00:27:27,169
do first we need to surround the SBT

00:27:24,330 --> 00:27:30,440
task with pre-built and post built tasks

00:27:27,169 --> 00:27:33,059
then second thing you need to add a

00:27:30,440 --> 00:27:38,090
cache directory by default this holder

00:27:33,059 --> 00:27:41,399
cache to the traffic's cache definitions

00:27:38,090 --> 00:27:45,450
you need to create one object that

00:27:41,399 --> 00:27:48,119
extends from a pupil start Travis PR

00:27:45,450 --> 00:27:50,490
verification plug-in base and you need

00:27:48,119 --> 00:27:52,980
to others holder plugin so even if you

00:27:50,490 --> 00:27:54,809
have no idea how that wiki works you

00:27:52,980 --> 00:27:57,059
should be able to do that because I know

00:27:54,809 --> 00:28:00,090
that SBT has small learning curve it's

00:27:57,059 --> 00:28:04,679
learning cliff and its release tip so

00:28:00,090 --> 00:28:07,259
that is why I try to provide us as wiki

00:28:04,679 --> 00:28:09,539
free configuration as possible just for

00:28:07,259 --> 00:28:14,730
everyone to be able to access the

00:28:09,539 --> 00:28:18,029
internet from holder so let's see if we

00:28:14,730 --> 00:28:22,019
can create our own integration with in

00:28:18,029 --> 00:28:24,210
this case Amazon s3 so the caches will

00:28:22,019 --> 00:28:25,889
be downloaded from history and after its

00:28:24,210 --> 00:28:26,279
the mm you want to generate one there

00:28:25,889 --> 00:28:29,639
will be up

00:28:26,279 --> 00:28:33,210
the to Amazon mystery and I promise no

00:28:29,639 --> 00:28:34,169
hbt commodities required at all so this

00:28:33,210 --> 00:28:36,659
is all willing to do

00:28:34,169 --> 00:28:40,440
sorry but my I got some problems with ID

00:28:36,659 --> 00:28:43,649
test before the presentation so there is

00:28:40,440 --> 00:28:47,190
no code colouring and this one sorry

00:28:43,649 --> 00:28:49,529
so there is no SBT no SBT mentioned

00:28:47,190 --> 00:28:51,809
nowhere in this file and the only thing

00:28:49,529 --> 00:28:53,609
that you need to know to make it work

00:28:51,809 --> 00:28:55,499
it does that you need to place this file

00:28:53,609 --> 00:28:58,619
inside the project director in your

00:28:55,499 --> 00:29:00,239
build and what we have to do first we

00:28:58,619 --> 00:29:01,950
need to like provide a bucket name for

00:29:00,239 --> 00:29:04,799
Amazon s3 I don't know if you're

00:29:01,950 --> 00:29:06,779
familiar with Amazon s3 but this is the

00:29:04,799 --> 00:29:09,330
Intel indentify where the bills will be

00:29:06,779 --> 00:29:10,710
placed and there is two method that we

00:29:09,330 --> 00:29:12,869
need to implement from the one day

00:29:10,710 --> 00:29:16,200
Walker setup that basically described

00:29:12,869 --> 00:29:18,269
how our cache will work it's the one

00:29:16,200 --> 00:29:21,389
cache and upload cash so this one will

00:29:18,269 --> 00:29:24,119
be invoked just before the cache want to

00:29:21,389 --> 00:29:27,359
be used so into Dolan cache to specific

00:29:24,119 --> 00:29:28,679
path and on the other side when the

00:29:27,359 --> 00:29:31,019
build is done and we want to publish

00:29:28,679 --> 00:29:33,839
case cache upload cache will be involved

00:29:31,019 --> 00:29:37,739
with the complete cash in that path and

00:29:33,839 --> 00:29:40,469
we just need to send it a to s3 I know

00:29:37,739 --> 00:29:42,239
this is silly I mean the integration

00:29:40,469 --> 00:29:44,639
with s3 you can replace that with proper

00:29:42,239 --> 00:29:48,149
I don't know Java integration but with

00:29:44,639 --> 00:29:51,269
this form I it fits on the slide so and

00:29:48,149 --> 00:29:53,700
beyond expected sending something to

00:29:51,269 --> 00:29:56,190
somewhere it isn't that complicated and

00:29:53,700 --> 00:29:58,409
this is a normal Scala code like you can

00:29:56,190 --> 00:30:00,539
do whatever you want here there is few

00:29:58,409 --> 00:30:03,570
more methods like a suit publish curve

00:30:00,539 --> 00:30:05,429
to discuss that basically control if you

00:30:03,570 --> 00:30:08,549
want to use a curve you probably should

00:30:05,429 --> 00:30:10,469
read a local variable weather is for

00:30:08,549 --> 00:30:11,729
equal verification if there is a

00:30:10,469 --> 00:30:14,249
particular certification we probably

00:30:11,729 --> 00:30:16,799
should use cash and we shouldn't put

00:30:14,249 --> 00:30:19,799
publish cash but if you are post math

00:30:16,799 --> 00:30:21,599
build we should do this opposite so we

00:30:19,799 --> 00:30:23,700
should not use cash compile everything

00:30:21,599 --> 00:30:26,969
and that we should publish publish car

00:30:23,700 --> 00:30:29,039
in the end last thing in this file in

00:30:26,969 --> 00:30:32,029
this in this class is just to clean the

00:30:29,039 --> 00:30:34,499
cash again another Amazon s3 command and

00:30:32,029 --> 00:30:37,499
this is and we just described how are

00:30:34,499 --> 00:30:38,950
our caching will work and the last thing

00:30:37,499 --> 00:30:41,710
that you need to do is

00:30:38,950 --> 00:30:45,880
create other plugging place this work

00:30:41,710 --> 00:30:47,769
works using outer plugin for SBT so it

00:30:45,880 --> 00:30:50,350
basically means that it will just apply

00:30:47,769 --> 00:30:51,210
these settings to only group all of your

00:30:50,350 --> 00:30:53,950
projects

00:30:51,210 --> 00:30:56,740
without any touching any with any build

00:30:53,950 --> 00:31:01,149
definitions let's see if we can make it

00:30:56,740 --> 00:31:03,940
work so let's switch to another project

00:31:01,149 --> 00:31:07,210
it's called unicorn and this is the a

00:31:03,940 --> 00:31:11,919
Bluetooth lab open a source kit for

00:31:07,210 --> 00:31:13,600
sleek development and yes first we

00:31:11,919 --> 00:31:18,309
probably do like from the backward so

00:31:13,600 --> 00:31:18,789
first let's let's publish a cave so post

00:31:18,309 --> 00:31:21,840
built

00:31:18,789 --> 00:31:24,490
I hope internet connection is fine here

00:31:21,840 --> 00:31:26,559
so we can publish yes so we just publish

00:31:24,490 --> 00:31:29,080
our caches as you can see there is an

00:31:26,559 --> 00:31:31,510
output from Amazon uploading the caches

00:31:29,080 --> 00:31:34,210
to the bucket so right now we can just

00:31:31,510 --> 00:31:36,580
clean our workspace and let's imagine

00:31:34,210 --> 00:31:39,820
right now that we are on the the

00:31:36,580 --> 00:31:43,090
politicos verification job so first we

00:31:39,820 --> 00:31:46,870
will call private where we resolve all

00:31:43,090 --> 00:31:49,240
the dependencies and with the Landler

00:31:46,870 --> 00:31:52,419
cut from a string and right now we can

00:31:49,240 --> 00:31:54,610
for example start a compile to see if

00:31:52,419 --> 00:31:57,519
all is fine yeah one second and we are

00:31:54,610 --> 00:32:00,010
done of course this is quite it a little

00:31:57,519 --> 00:32:02,409
bit of cheating because we exactly

00:32:00,010 --> 00:32:04,419
publish the same code that was compiled

00:32:02,409 --> 00:32:06,880
so there was nothing to compile but you

00:32:04,419 --> 00:32:08,590
need to trust me that next compilation

00:32:06,880 --> 00:32:10,720
being commented one so we've retained

00:32:08,590 --> 00:32:12,429
one file on this one file you recompile

00:32:10,720 --> 00:32:17,500
any other voice i'd need to be

00:32:12,429 --> 00:32:19,149
recompiled because of that change so as

00:32:17,500 --> 00:32:24,340
promised now as between all that it

00:32:19,149 --> 00:32:28,110
requires to use that and the last thing

00:32:24,340 --> 00:32:32,110
that is supported as a better is

00:32:28,110 --> 00:32:35,019
catalyst so I mentioned this like during

00:32:32,110 --> 00:32:36,940
the presentation that there is a lot of

00:32:35,019 --> 00:32:38,679
classes lying all over the places that

00:32:36,940 --> 00:32:41,889
you can use to speed up our builds and

00:32:38,679 --> 00:32:43,840
this is one of the example so what we

00:32:41,889 --> 00:32:47,590
want to do here we want to add another

00:32:43,840 --> 00:32:49,269
artifact story relief and that contains

00:32:47,590 --> 00:32:52,460
incremental computation metadata and

00:32:49,269 --> 00:32:55,070
later on use that

00:32:52,460 --> 00:32:57,080
release release with all the incremental

00:32:55,070 --> 00:33:00,680
comparing the data to speed up use in

00:32:57,080 --> 00:33:03,050
our local law space so for that there is

00:33:00,680 --> 00:33:04,670
a command called load release that you

00:33:03,050 --> 00:33:06,650
need to process if I the version and

00:33:04,670 --> 00:33:10,150
this version is exactly the version what

00:33:06,650 --> 00:33:11,870
the the binaries was released previously

00:33:10,150 --> 00:33:15,260
how does it work

00:33:11,870 --> 00:33:17,960
it just added try to resolve ourselves

00:33:15,260 --> 00:33:20,180
given version try to do on the binaries

00:33:17,960 --> 00:33:22,520
and metadata information using cruise

00:33:20,180 --> 00:33:25,400
here so not to include not to like play

00:33:22,520 --> 00:33:28,460
with SVG so not to accidentally add our

00:33:25,400 --> 00:33:29,960
selves to the class bus and use the

00:33:28,460 --> 00:33:32,630
incremental completion of the daytime

00:33:29,960 --> 00:33:35,060
classes to speed up the build in future

00:33:32,630 --> 00:33:36,860
I want to support like placeholder for a

00:33:35,060 --> 00:33:39,320
version like placeholders for a version

00:33:36,860 --> 00:33:44,660
a current and last so we don't need to

00:33:39,320 --> 00:33:46,040
remember it was 1.3 dot six and seven so

00:33:44,660 --> 00:33:48,290
I think you will be able to like look

00:33:46,040 --> 00:33:51,440
for example the geek geek history and

00:33:48,290 --> 00:33:54,470
find the last tag with the last release

00:33:51,440 --> 00:33:56,960
but at this moment is not supported more

00:33:54,470 --> 00:33:59,060
but really really knows a lot of is on

00:33:56,960 --> 00:34:03,200
the documentation because it is better

00:33:59,060 --> 00:34:06,950
as I said and you probably want to know

00:34:03,200 --> 00:34:10,100
how big the incremental computation at

00:34:06,950 --> 00:34:12,500
the data are so this is from the unicorn

00:34:10,100 --> 00:34:17,000
library and as you can see this is a

00:34:12,500 --> 00:34:18,500
little bit strange output of the LS you

00:34:17,000 --> 00:34:21,800
have to believe me that there is nothing

00:34:18,500 --> 00:34:23,620
new added to the dogs IVs and palms and

00:34:21,800 --> 00:34:26,540
sources but you can check it yourself

00:34:23,620 --> 00:34:29,390
but what it was most interesting there

00:34:26,540 --> 00:34:32,030
is this new type of artifact called

00:34:29,390 --> 00:34:33,890
compiled hoarder caches and the main

00:34:32,030 --> 00:34:37,880
thing the zip with the analysis it's

00:34:33,890 --> 00:34:38,930
like 820 kilobytes not that much if you

00:34:37,880 --> 00:34:42,080
compare that with the size of the

00:34:38,930 --> 00:34:45,200
Charter this there are four times and

00:34:42,080 --> 00:34:48,170
the size more or less so there will be

00:34:45,200 --> 00:34:54,170
the release will be quite bigger but not

00:34:48,170 --> 00:34:58,000
that much and let's see if it works so

00:34:54,170 --> 00:34:58,000
let's do it publisher

00:35:05,319 --> 00:35:22,380
it takes a while okay we know the

00:35:09,969 --> 00:35:24,609
version probably should do clean again

00:35:22,380 --> 00:35:26,349
of course need to resolve all the

00:35:24,609 --> 00:35:30,309
dependencies because when we clean the

00:35:26,349 --> 00:35:32,699
workspace I don't I don't cache the 3900

00:35:30,309 --> 00:35:35,130
above you've another plugin for that and

00:35:32,699 --> 00:35:39,459
let's see if we can compile our

00:35:35,130 --> 00:35:41,229
workspace again yeah so it worked

00:35:39,459 --> 00:35:43,930
of course you don't need to worry

00:35:41,229 --> 00:35:45,729
because I changed the definition and you

00:35:43,930 --> 00:35:47,469
need to explicitly specified that you

00:35:45,729 --> 00:35:50,319
want to publish something more because

00:35:47,469 --> 00:35:51,430
Eisen won't start diving for my in my

00:35:50,319 --> 00:35:53,349
opinion like adding something

00:35:51,430 --> 00:35:55,509
automatically to your project that will

00:35:53,349 --> 00:35:59,109
publish something more to them even it's

00:35:55,509 --> 00:36:01,569
not quite a good idea but you just need

00:35:59,109 --> 00:36:04,839
to add one settings to your to your

00:36:01,569 --> 00:36:07,690
project definition I'm still don't have

00:36:04,839 --> 00:36:09,910
like the except the last form of the how

00:36:07,690 --> 00:36:12,279
how you'll be applied that is why I'm

00:36:09,910 --> 00:36:17,109
not showing is it right now but it

00:36:12,279 --> 00:36:20,109
should be quite simple of course this is

00:36:17,109 --> 00:36:22,359
not like the whole project I mean I got

00:36:20,109 --> 00:36:25,869
a lot of plans for filters for filter

00:36:22,359 --> 00:36:27,910
and the most important one is that I

00:36:25,869 --> 00:36:29,380
need a feedback because I have a

00:36:27,910 --> 00:36:31,420
feedback from the workspace and work

00:36:29,380 --> 00:36:33,609
with this is it's just quite a different

00:36:31,420 --> 00:36:36,699
tool those and quasi different

00:36:33,609 --> 00:36:39,910
integrations and but I need their

00:36:36,699 --> 00:36:41,349
feedback from you because this is the in

00:36:39,910 --> 00:36:43,869
that works which I know very well have

00:36:41,349 --> 00:36:45,699
user walks Howard's they they pattern

00:36:43,869 --> 00:36:47,799
the behaviors and they are probably

00:36:45,699 --> 00:36:50,199
different in your team's so if you want

00:36:47,799 --> 00:36:51,640
to use holder just please give me the

00:36:50,199 --> 00:36:57,249
feedback of use that have you work with

00:36:51,640 --> 00:36:59,769
filled with this library and more plants

00:36:57,249 --> 00:37:02,219
I want to support SB t 1.0 I want to

00:36:59,769 --> 00:37:06,489
let's try to implement support for IDs

00:37:02,219 --> 00:37:09,099
we see how will it work next thing I

00:37:06,489 --> 00:37:11,829
want to do is incremental our library

00:37:09,099 --> 00:37:14,380
dependencies party bad name not that I

00:37:11,829 --> 00:37:14,709
don't get any better one what's going on

00:37:14,380 --> 00:37:16,059
here

00:37:14,709 --> 00:37:17,619
so whenever if you go to the common

00:37:16,059 --> 00:37:19,310
library that you work with for example I

00:37:17,619 --> 00:37:21,020
don't know user integration

00:37:19,310 --> 00:37:22,580
database connection stuff like that

00:37:21,020 --> 00:37:25,460
studies in the different that's Vicki

00:37:22,580 --> 00:37:27,530
project and you need to develop it

00:37:25,460 --> 00:37:29,060
alongside your client application let's

00:37:27,530 --> 00:37:31,460
say whenever you change something in the

00:37:29,060 --> 00:37:33,320
library and want to use that changed

00:37:31,460 --> 00:37:35,720
version in your project it means that

00:37:33,320 --> 00:37:37,880
every compilation will be full I mean

00:37:35,720 --> 00:37:39,860
following the terms that every day every

00:37:37,880 --> 00:37:42,320
usage of that change library because we

00:37:39,860 --> 00:37:44,360
compiled because there is no incremental

00:37:42,320 --> 00:37:47,090
computation information attached to that

00:37:44,360 --> 00:37:49,670
library and the scariest and few changes

00:37:47,090 --> 00:37:51,110
in SBT internals maybe I will be able to

00:37:49,670 --> 00:37:53,030
change that so whenever you change the

00:37:51,110 --> 00:37:54,710
one method on users on that one method

00:37:53,030 --> 00:37:56,720
to cut recompile in the client library

00:37:54,710 --> 00:37:59,060
this might be tricky to implement

00:37:56,720 --> 00:38:03,530
because SBT especially internal is

00:37:59,060 --> 00:38:05,810
really tricky and we workflows I want to

00:38:03,530 --> 00:38:07,910
abstract as much as possible so it

00:38:05,810 --> 00:38:10,760
should be quite easy probably throughout

00:38:07,910 --> 00:38:14,330
any SBT knowledge to add a new workflow

00:38:10,760 --> 00:38:16,730
I want to find it so a little bit

00:38:14,330 --> 00:38:20,180
automatic cache detection majalis like

00:38:16,730 --> 00:38:22,100
based on tags commits on under like

00:38:20,180 --> 00:38:25,400
maybe some files in your wall space I

00:38:22,100 --> 00:38:26,960
don't know and I also want it to be

00:38:25,400 --> 00:38:29,420
abstract so you can provide your own

00:38:26,960 --> 00:38:32,090
quite easy and the holy grail of this

00:38:29,420 --> 00:38:34,490
project is automatically application so

00:38:32,090 --> 00:38:36,470
we don't need to think about any comment

00:38:34,490 --> 00:38:38,060
you just do a compile and internals will

00:38:36,470 --> 00:38:41,660
decide whether it's the cache should be

00:38:38,060 --> 00:38:43,220
used or not and in the integration I

00:38:41,660 --> 00:38:45,800
mentioned the big project we got it

00:38:43,220 --> 00:38:47,720
working and it's working quite well I

00:38:45,800 --> 00:38:49,520
mean nobody complains that the normal

00:38:47,720 --> 00:38:53,180
completion are slower and the full bit

00:38:49,520 --> 00:38:55,460
just reduce the time and the user I was

00:38:53,180 --> 00:38:57,320
happy but I'm able to manage that

00:38:55,460 --> 00:39:01,730
because I really as I said I really know

00:38:57,320 --> 00:39:04,070
I well know what user will do how they

00:39:01,730 --> 00:39:07,430
work what is like the size of the code

00:39:04,070 --> 00:39:11,210
base so I am able to play with the

00:39:07,430 --> 00:39:12,710
numbers for the everybody this is tricky

00:39:11,210 --> 00:39:13,910
but a good idea how to make it work

00:39:12,710 --> 00:39:18,170
without any

00:39:13,910 --> 00:39:20,210
guessing so yeah I hope to like it next

00:39:18,170 --> 00:39:23,930
year or two I will be able to have the

00:39:20,210 --> 00:39:27,350
automatic clash application and this is

00:39:23,930 --> 00:39:29,720
all from the presentation and now is the

00:39:27,350 --> 00:39:37,670
time for the questions

00:39:29,720 --> 00:39:40,010
I see one over here thanks for the talk

00:39:37,670 --> 00:39:43,010
I'm pretty sure you'll get some feedback

00:39:40,010 --> 00:39:45,619
from us because this is very cool I have

00:39:43,010 --> 00:39:47,420
a couple of questions first is maybe I

00:39:45,619 --> 00:39:50,060
admit that because I came a little bit

00:39:47,420 --> 00:39:53,330
late up about the multi-project build so

00:39:50,060 --> 00:39:57,200
I have like five hours like five six

00:39:53,330 --> 00:40:00,320
projects and I want to like when I have

00:39:57,200 --> 00:40:02,480
like to an end projects that are like

00:40:00,320 --> 00:40:04,520
being launched and a couple of them a

00:40:02,480 --> 00:40:07,510
couple of projects are like libraries

00:40:04,520 --> 00:40:10,550
for that so how do I do like how do I

00:40:07,510 --> 00:40:12,619
provide like a single cache to compile

00:40:10,550 --> 00:40:14,180
all the projects like do I have to use

00:40:12,619 --> 00:40:18,070
some aggregate project or we take the

00:40:14,180 --> 00:40:20,000
truth project that like is like

00:40:18,070 --> 00:40:23,240
depending on those here

00:40:20,000 --> 00:40:25,940
I see so the question was when if you go

00:40:23,240 --> 00:40:28,099
to multi project build doing to do

00:40:25,940 --> 00:40:30,380
something more or is just supported out

00:40:28,099 --> 00:40:32,840
of the box it's the last letter so it's

00:40:30,380 --> 00:40:35,599
a supported out-of-the-box so in cash

00:40:32,840 --> 00:40:39,740
you got the entries are prefix prefixed

00:40:35,599 --> 00:40:41,780
with the project time and the

00:40:39,740 --> 00:40:43,970
configuration name so there is different

00:40:41,780 --> 00:40:47,240
scope for tests for I don't know

00:40:43,970 --> 00:40:49,640
whatever for compiled for any others

00:40:47,240 --> 00:40:51,560
come from scope that you have and also

00:40:49,640 --> 00:40:53,390
there is a perfect for Scala version so

00:40:51,560 --> 00:40:55,609
you can quite easily if you change this

00:40:53,390 --> 00:40:57,770
color version you can publish the cash

00:40:55,609 --> 00:40:59,660
in the same place and it will work yeah

00:40:57,770 --> 00:41:01,609
but do I have to for example if I use -

00:40:59,660 --> 00:41:03,200
and special I don't have to stash for

00:41:01,609 --> 00:41:04,820
each project or no okay

00:41:03,200 --> 00:41:06,140
you don't need to set the question the

00:41:04,820 --> 00:41:09,520
second question was do I need to stuff

00:41:06,140 --> 00:41:11,540
for each project now the stuff is

00:41:09,520 --> 00:41:13,910
aggregated this is the setting for each

00:41:11,540 --> 00:41:15,410
task so if you go to the if you do it on

00:41:13,910 --> 00:41:17,270
the top level this will do it for all

00:41:15,410 --> 00:41:19,160
project if you do for a given project it

00:41:17,270 --> 00:41:21,050
will apply for all its dependencies and

00:41:19,160 --> 00:41:23,930
she thinks and the second one is about

00:41:21,050 --> 00:41:27,380
that 1% of cases when incremental

00:41:23,930 --> 00:41:30,470
compilation works not so well so did

00:41:27,380 --> 00:41:33,410
encounter these cases in your so for

00:41:30,470 --> 00:41:35,150
example that's macro based stuff that

00:41:33,410 --> 00:41:36,290
doesn't really sometimes work with

00:41:35,150 --> 00:41:38,750
incremental compilation

00:41:36,290 --> 00:41:40,220
did you have that case and if you had

00:41:38,750 --> 00:41:43,490
like how did you handle them

00:41:40,220 --> 00:41:45,920
okay so I don't have

00:41:43,490 --> 00:41:49,940
the question was if you got there was

00:41:45,920 --> 00:41:51,410
one person I would say 5% places where

00:41:49,940 --> 00:41:54,530
the incremental computation doesn't work

00:41:51,410 --> 00:41:56,720
like macros if I have anything special

00:41:54,530 --> 00:41:58,310
for that so my answer is no I mean I

00:41:56,720 --> 00:42:01,010
really in on the incremental compiler

00:41:58,310 --> 00:42:03,830
for that and I'm trying to take also

00:42:01,010 --> 00:42:06,710
contributing to think and I'm trying to

00:42:03,830 --> 00:42:08,600
fix the problem using because it's this

00:42:06,710 --> 00:42:10,820
the place where it should be fixed but

00:42:08,600 --> 00:42:16,040
my general opinion if you go to macros

00:42:10,820 --> 00:42:18,170
and it's it's Max's are never be very

00:42:16,040 --> 00:42:21,080
well supported for incremental compiler

00:42:18,170 --> 00:42:23,030
because there is none macros there's

00:42:21,080 --> 00:42:24,770
only like three options either you just

00:42:23,030 --> 00:42:28,250
ignore em across and you ask for

00:42:24,770 --> 00:42:30,020
troubles or you just any change in macro

00:42:28,250 --> 00:42:32,660
get recompile every sort of macro which

00:42:30,020 --> 00:42:33,650
is really really slow especially if

00:42:32,660 --> 00:42:35,690
you'd like for example you want to

00:42:33,650 --> 00:42:38,240
change something in tasks and other

00:42:35,690 --> 00:42:40,520
library laptop and the first option you

00:42:38,240 --> 00:42:44,150
have to know what you are doing and we

00:42:40,520 --> 00:42:46,670
have to click end and try to invalidate

00:42:44,150 --> 00:42:48,590
yourself whatever need to be changed so

00:42:46,670 --> 00:42:51,619
in the store what I don't have anything

00:42:48,590 --> 00:42:54,170
special for this cases and she thinks so

00:42:51,619 --> 00:42:56,000
I have a question about maybe I missed

00:42:54,170 --> 00:42:56,630
that part but publishing so if I put

00:42:56,000 --> 00:42:59,570
this

00:42:56,630 --> 00:43:02,119
if I push my code to a continuous

00:42:59,570 --> 00:43:05,869
integration server and would I be able

00:43:02,119 --> 00:43:09,410
to publish the the cache with my

00:43:05,869 --> 00:43:12,859
artifacts for example if it releases the

00:43:09,410 --> 00:43:14,420
latest snapshot or whatever would I be

00:43:12,859 --> 00:43:17,720
able to publish that so maven repository

00:43:14,420 --> 00:43:22,910
or because your example was s3 will have

00:43:17,720 --> 00:43:24,770
you okay the question was if I got the

00:43:22,910 --> 00:43:27,560
CR integration and I'm doing a

00:43:24,770 --> 00:43:29,810
publishing if my case will be published

00:43:27,560 --> 00:43:32,810
there to let's say my friends on a type

00:43:29,810 --> 00:43:36,560
or whatever our artifact repository that

00:43:32,810 --> 00:43:38,900
that is used there or just s3 so s3 was

00:43:36,560 --> 00:43:40,880
just an example for different workflow

00:43:38,900 --> 00:43:43,910
and it was for pure equals verifications

00:43:40,880 --> 00:43:45,590
and if you got the CI and you want to

00:43:43,910 --> 00:43:47,720
publish your crashes alongside your

00:43:45,590 --> 00:43:50,060
binaries the curse releases for you so

00:43:47,720 --> 00:43:52,340
it adds another artifacts to what is

00:43:50,060 --> 00:43:54,950
published anywhere and this is a normal

00:43:52,340 --> 00:43:56,760
Nathan or IV artifact depends on the

00:43:54,950 --> 00:43:59,580
layout of the repository that we

00:43:56,760 --> 00:44:01,200
proper definition might be resolved and

00:43:59,580 --> 00:44:04,890
this is what I'm doing with the cash a

00:44:01,200 --> 00:44:07,710
lot relief option if you do if you want

00:44:04,890 --> 00:44:10,080
like the s3 example maybe it wasn't that

00:44:07,710 --> 00:44:17,240
clear was example when you want to catch

00:44:10,080 --> 00:44:24,090
the the output for the surrogate for the

00:44:17,240 --> 00:44:26,370
work work for the PR verifications when

00:44:24,090 --> 00:44:28,440
you produce the cash for each measure

00:44:26,370 --> 00:44:31,290
merges so s 3 is good candidate because

00:44:28,440 --> 00:44:34,050
it's like accessible it's quite cheap

00:44:31,290 --> 00:44:36,300
and quite fast but this tells why

00:44:34,050 --> 00:44:38,280
integration of s 3 so the short question

00:44:36,300 --> 00:44:40,350
is yes it will get published of course

00:44:38,280 --> 00:44:42,480
if you configure that and remember this

00:44:40,350 --> 00:44:42,720
is a still a better feature okay thank

00:44:42,480 --> 00:44:44,310
you

00:44:42,720 --> 00:44:47,430
so I'll be happy to get any feedback

00:44:44,310 --> 00:44:50,160
from you do you have any sort of like

00:44:47,430 --> 00:44:53,850
the recommendation or some sort of stats

00:44:50,160 --> 00:44:57,420
about what code size it would make sense

00:44:53,850 --> 00:45:00,660
to start adopting these type of a cached

00:44:57,420 --> 00:45:03,210
build or cache strategy because you you

00:45:00,660 --> 00:45:06,510
do have to pay some cost and downloading

00:45:03,210 --> 00:45:08,820
and uploading all right but after like

00:45:06,510 --> 00:45:10,650
you see like after certain code size it

00:45:08,820 --> 00:45:13,050
will start to make sense more or when

00:45:10,650 --> 00:45:14,910
you have at number of people you have

00:45:13,050 --> 00:45:17,190
network effects or something like that I

00:45:14,910 --> 00:45:19,080
mean the numbers like from the

00:45:17,190 --> 00:45:21,270
production I can give you it's only for

00:45:19,080 --> 00:45:24,630
the really cute code base where the cash

00:45:21,270 --> 00:45:26,730
weights like 2 gigabytes or more sorry

00:45:24,630 --> 00:45:29,430
there is first forty four hundred

00:45:26,730 --> 00:45:33,930
megabytes cure for few zips and analyzes

00:45:29,430 --> 00:45:36,660
and the rest is the jars and inside this

00:45:33,930 --> 00:45:39,470
default project this size you should

00:45:36,660 --> 00:45:41,610
definitely do that for smaller I mean

00:45:39,470 --> 00:45:43,110
accessing iOS specially on Linux

00:45:41,610 --> 00:45:46,080
machines is quite seen it's quite easy

00:45:43,110 --> 00:45:48,150
quite cheap and even with the smallest

00:45:46,080 --> 00:45:49,770
project I got there for like there's I

00:45:48,150 --> 00:45:52,080
don't know maybe 20 scholar classes not

00:45:49,770 --> 00:45:55,170
not not much by code by coding generated

00:45:52,080 --> 00:45:57,180
you are still like I don't know 2

00:45:55,170 --> 00:45:59,400
seconds better with that of course this

00:45:57,180 --> 00:46:01,470
like in if your project company for a

00:45:59,400 --> 00:46:03,000
minute it's probably doesn't make sense

00:46:01,470 --> 00:46:05,640
and invest any time in that because

00:46:03,000 --> 00:46:07,590
minutes is nothing more or less if you

00:46:05,640 --> 00:46:10,260
project compile for 10 then you should

00:46:07,590 --> 00:46:12,390
consider that because for 8

00:46:10,260 --> 00:46:15,120
will reduce the compilation time in my

00:46:12,390 --> 00:46:16,770
opinion like to at most two minutes I

00:46:15,120 --> 00:46:18,180
don't have that much of data from the

00:46:16,770 --> 00:46:21,360
production I mean I can run some tests

00:46:18,180 --> 00:46:23,370
but unless I got really like really used

00:46:21,360 --> 00:46:25,950
to use cases like somebody will start to

00:46:23,370 --> 00:46:28,170
use that with different stuff like I

00:46:25,950 --> 00:46:30,360
don't know there is a full request and I

00:46:28,170 --> 00:46:33,060
can test merciful requests but they are

00:46:30,360 --> 00:46:34,890
all green but and to be a it should be

00:46:33,060 --> 00:46:37,650
tested also on the third one so you

00:46:34,890 --> 00:46:39,930
publish something to CI and the test

00:46:37,650 --> 00:46:41,700
fails or the completion side and this is

00:46:39,930 --> 00:46:45,510
also the data point I need to use

00:46:41,700 --> 00:46:48,690
whether it was faster or not so the

00:46:45,510 --> 00:46:50,820
short question is I don't have data for

00:46:48,690 --> 00:46:53,130
what I can guess for from my experience

00:46:50,820 --> 00:46:54,870
if your project compiled around five

00:46:53,130 --> 00:46:56,880
minutes you will see benefit if it's

00:46:54,870 --> 00:46:59,340
more the benefit would like grow because

00:46:56,880 --> 00:47:01,620
the only thing that you need to the

00:46:59,340 --> 00:47:05,100
factor that you need to consider is like

00:47:01,620 --> 00:47:06,960
how how much time is 80% of your

00:47:05,100 --> 00:47:08,340
computation time because this is more

00:47:06,960 --> 00:47:11,160
likely what the speed-up

00:47:08,340 --> 00:47:13,080
you will get so if it the 80% of your

00:47:11,160 --> 00:47:16,350
computation time for the footage it's a

00:47:13,080 --> 00:47:19,910
minute it doesn't if it's like eight

00:47:16,350 --> 00:47:23,010
minutes now it starts to matters more

00:47:19,910 --> 00:47:25,200
another kind of question / comment is vo

00:47:23,010 --> 00:47:29,130
if you're using SVG on the you know for

00:47:25,200 --> 00:47:31,080
the CI e if you have a incremental

00:47:29,130 --> 00:47:34,410
compilation information you can run the

00:47:31,080 --> 00:47:35,730
test quick which only tests the stuff

00:47:34,410 --> 00:47:38,130
that was changed so I thought that could

00:47:35,730 --> 00:47:39,750
be interesting thing you could do when

00:47:38,130 --> 00:47:42,180
you're doing a PR I mean there could be

00:47:39,750 --> 00:47:44,130
a little dangerous thing to do a lot you

00:47:42,180 --> 00:47:45,930
could just test only the thing that was

00:47:44,130 --> 00:47:48,300
affected if you have thousands of test

00:47:45,930 --> 00:47:49,830
cases so the point the question may be

00:47:48,300 --> 00:47:51,540
observation was that if you've got

00:47:49,830 --> 00:47:53,490
incremental compilation you can do test

00:47:51,540 --> 00:47:54,960
click on the CI there's actually really

00:47:53,490 --> 00:47:57,690
good thing I didn't think about that

00:47:54,960 --> 00:48:00,870
maybe it is a little bit scary because

00:47:57,690 --> 00:48:02,580
right now you don't don't only come you

00:48:00,870 --> 00:48:04,740
don't only compile everything but also

00:48:02,580 --> 00:48:07,440
you can test everything and you Larry -

00:48:04,740 --> 00:48:09,470
like depends too much on the incremental

00:48:07,440 --> 00:48:11,520
compiler and we all know that

00:48:09,470 --> 00:48:13,500
incremental compiler has the places

00:48:11,520 --> 00:48:15,810
where it doesn't work at all like for

00:48:13,500 --> 00:48:18,810
example static fields inlining in the

00:48:15,810 --> 00:48:21,360
code but yeah it's it's your choice you

00:48:18,810 --> 00:48:22,800
can do that I mean if you got the

00:48:21,360 --> 00:48:23,369
incremental computation you will get

00:48:22,800 --> 00:48:25,170
tests quick

00:48:23,369 --> 00:48:28,259
free so yeah this is a really good point

00:48:25,170 --> 00:48:30,599
okay so I don't see any more hands

00:48:28,259 --> 00:48:33,599
there is one please wave so I can okay

00:48:30,599 --> 00:48:35,549
now so thank you a lot and for coming I

00:48:33,599 --> 00:48:38,880
should say that you probably need to

00:48:35,549 --> 00:48:41,440
write it up the stock budget meter if

00:48:38,880 --> 00:48:47,269
you don't like thank you for coming

00:48:41,440 --> 00:48:47,269

YouTube URL: https://www.youtube.com/watch?v=29JbzlaGeyU


