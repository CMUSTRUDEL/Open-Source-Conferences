Title: Simple code for a type safe world   by Jan Christopher Vogt
Publication date: 2017-06-07
Playlist: Scala Days 2017
Description: 
	This video was recorded at Scala Days Chicago 2017
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract: 
Are type safing your configuration? You are probably not, even if you think you do. Process calls? Rest calls? In this session we'll live code our way into type safing everything - conveniently and in the most simple ways. No implicits, no shapeless, no type-level programming, just vanilla Scala code. 

As it turns out Typesafe config, pure config, etc are actually not type safe. We'll see why and what to do instead. A different concept can be applied to make process and rest calls joyfully convenient and elegantly type-safe at the same time. To the point that Scala can become the more convenient choice over bash for shell scripting.
Captions: 
	00:00:00,860 --> 00:00:09,059
alright let's get started so I'm I'm

00:00:06,629 --> 00:00:12,360
just jumping in for someone else who who

00:00:09,059 --> 00:00:14,910
couldn't make it so I have actually one

00:00:12,360 --> 00:00:18,060
slide of content and the rest will just

00:00:14,910 --> 00:00:20,340
live code and feel free to just jump in

00:00:18,060 --> 00:00:24,480
and speak and let's make this

00:00:20,340 --> 00:00:25,890
interactive a little bit um right and

00:00:24,480 --> 00:00:28,410
right the session

00:00:25,890 --> 00:00:33,210
and yeah you know me you may know me

00:00:28,410 --> 00:00:35,520
from from these projects oh there's a

00:00:33,210 --> 00:00:38,399
second slide actually simple type safety

00:00:35,520 --> 00:00:41,870
for the unusual things exactly so this

00:00:38,399 --> 00:00:44,940
is really about free ideas and how to

00:00:41,870 --> 00:00:47,910
basically infuse types into these areas

00:00:44,940 --> 00:00:50,129
where we normally don't use types or

00:00:47,910 --> 00:00:52,199
don't use types to this extent one is

00:00:50,129 --> 00:00:54,300
configuration like I suppose a lot of

00:00:52,199 --> 00:00:55,680
you use something like typeset config or

00:00:54,300 --> 00:00:58,230
something like this to to read your

00:00:55,680 --> 00:01:01,770
configuration and I would like to

00:00:58,230 --> 00:01:03,930
propose a way that I consider simpler

00:01:01,770 --> 00:01:12,360
safer easier to reason about easy to

00:01:03,930 --> 00:01:16,409
learn requiring less work and then also

00:01:12,360 --> 00:01:18,960
how to call processes and interfaces in

00:01:16,409 --> 00:01:21,630
attire or service or something in a type

00:01:18,960 --> 00:01:23,880
safe way and the other thing is

00:01:21,630 --> 00:01:26,280
basically how to expose the type C event

00:01:23,880 --> 00:01:28,020
Scala into into other situations so you

00:01:26,280 --> 00:01:31,470
can call into Scala in a types therefore

00:01:28,020 --> 00:01:33,030
I guess in a type driven way and okay so

00:01:31,470 --> 00:01:37,590
that'sthat's the slide so now we'll just

00:01:33,030 --> 00:01:40,979
get to do coding I've hacked up this

00:01:37,590 --> 00:01:42,450
like pseudo code application which which

00:01:40,979 --> 00:01:47,009
does almost nothing which has a main

00:01:42,450 --> 00:01:50,180
method that called some HTTP server to

00:01:47,009 --> 00:01:53,939
listen like just a regular web app and

00:01:50,180 --> 00:02:01,369
this HTTP server has a little method

00:01:53,939 --> 00:02:01,369
that takes some I guess some library

00:02:03,540 --> 00:02:08,530
some library HTTP server which we just

00:02:06,850 --> 00:02:10,360
assumed is we have imported as a

00:02:08,530 --> 00:02:12,760
dependency and then let's assume this

00:02:10,360 --> 00:02:14,650
could be HTTP HTTP for s could be spray

00:02:12,760 --> 00:02:16,090
or something like that we have some

00:02:14,650 --> 00:02:17,950
create method that we give a bunch of

00:02:16,090 --> 00:02:19,900
routes and I don't know let's say that's

00:02:17,950 --> 00:02:21,550
a that's a bunch of case statement that

00:02:19,900 --> 00:02:25,510
his routes that's what HP for s does

00:02:21,550 --> 00:02:28,540
okay find that okay and then it binds

00:02:25,510 --> 00:02:30,580
itself to a port and we need to get this

00:02:28,540 --> 00:02:32,590
port from somewhere right we probably

00:02:30,580 --> 00:02:34,000
want this court and the IP address is

00:02:32,590 --> 00:02:35,170
something to be different between our

00:02:34,000 --> 00:02:38,410
environment the production environment

00:02:35,170 --> 00:02:39,910
and development environment and one way

00:02:38,410 --> 00:02:45,300
to do this is we can have consular

00:02:39,910 --> 00:02:48,160
grunting object let's say config and

00:02:45,300 --> 00:02:50,710
yeah from there we can just get it so

00:02:48,160 --> 00:02:53,650
let's look into config we have an

00:02:50,710 --> 00:02:57,840
environment Val here which reads a

00:02:53,650 --> 00:03:00,400
environment variable environment and

00:02:57,840 --> 00:03:02,110
well the if it's not there I think it's

00:03:00,400 --> 00:03:06,190
null right and then if it's null then we

00:03:02,110 --> 00:03:07,810
just assume development otherwise we can

00:03:06,190 --> 00:03:11,650
provide one so in production we could

00:03:07,810 --> 00:03:13,360
say oh it's production and then we have

00:03:11,650 --> 00:03:14,950
a context factory like I don't know

00:03:13,360 --> 00:03:16,690
types of config works exactly this way

00:03:14,950 --> 00:03:18,700
but remember it being like vaguely like

00:03:16,690 --> 00:03:21,130
this so you have this concrete factory

00:03:18,700 --> 00:03:22,510
you load one configuration file in this

00:03:21,130 --> 00:03:23,890
case we take whatever the environment is

00:03:22,510 --> 00:03:26,769
we got here which somebody may have

00:03:23,890 --> 00:03:29,230
provided they are crawling it or which

00:03:26,769 --> 00:03:31,060
which is development otherwise and then

00:03:29,230 --> 00:03:33,190
we load the config file and then we have

00:03:31,060 --> 00:03:34,870
resources directory in there in which we

00:03:33,190 --> 00:03:37,810
have a development config which sets a

00:03:34,870 --> 00:03:41,800
connection string and HTTP port and an

00:03:37,810 --> 00:03:43,269
HTTP IP and we have a production config

00:03:41,800 --> 00:03:49,810
which may have those in slightly

00:03:43,269 --> 00:03:55,420
different ways okay so who does it like

00:03:49,810 --> 00:03:58,000
somewhat like that like okay so well

00:03:55,420 --> 00:04:00,430
there there are several things I mean

00:03:58,000 --> 00:04:01,989
it's it sort of works like it or it

00:04:00,430 --> 00:04:03,010
would have work I mean you have a

00:04:01,989 --> 00:04:05,200
service up and running in production

00:04:03,010 --> 00:04:06,760
right so it's it's working and you're

00:04:05,200 --> 00:04:09,250
doing a job into you're getting paid so

00:04:06,760 --> 00:04:10,870
you're probably it's probably working

00:04:09,250 --> 00:04:12,609
somewhat but there's some things that I

00:04:10,870 --> 00:04:13,570
that I personally don't don't like about

00:04:12,609 --> 00:04:15,400
it that much

00:04:13,570 --> 00:04:18,729
one is that

00:04:15,400 --> 00:04:22,330
let's look at this config object it's a

00:04:18,729 --> 00:04:25,600
lazy Val right so only when we ever use

00:04:22,330 --> 00:04:27,729
it it will try to find a config file so

00:04:25,600 --> 00:04:29,110
if we didn't provide one or if we'd like

00:04:27,729 --> 00:04:31,030
misspelled our environment or something

00:04:29,110 --> 00:04:32,500
it will already has like would already

00:04:31,030 --> 00:04:34,690
be somewhere deep in the service or

00:04:32,500 --> 00:04:37,000
maybe not that deep but in some level

00:04:34,690 --> 00:04:39,100
and it will crash there it's not like a

00:04:37,000 --> 00:04:45,940
type error or something it's like a it's

00:04:39,100 --> 00:04:48,010
a crash also if you um misspelled a key

00:04:45,940 --> 00:04:49,750
or forgotten I've forgotten to gave a

00:04:48,010 --> 00:04:51,820
key you'll get like an error here where

00:04:49,750 --> 00:04:53,650
it's trying to read this so I think what

00:04:51,820 --> 00:04:57,160
a lot of us do in order to make this a

00:04:53,650 --> 00:04:59,650
little bit fail a little bit earlier is

00:04:57,160 --> 00:05:01,510
instead of reading stuff as a string

00:04:59,650 --> 00:05:07,360
striped here they do something like okay

00:05:01,510 --> 00:05:11,169
let's say HTTP host and then in the

00:05:07,360 --> 00:05:13,500
config object we do something like this

00:05:11,169 --> 00:05:13,500
right

00:05:16,059 --> 00:05:21,809
who does that instead of what if what

00:05:18,219 --> 00:05:24,579
I've shown before in the config object

00:05:21,809 --> 00:05:26,049
okay so it's still failing late though

00:05:24,579 --> 00:05:27,459
it's still the same thing because it's

00:05:26,049 --> 00:05:29,079
lazy right because we probably want to

00:05:27,459 --> 00:05:31,059
make it strict you probably want to read

00:05:29,079 --> 00:05:32,499
it every time so immediately we start up

00:05:31,059 --> 00:05:36,479
we needed to get the arrow and this

00:05:32,499 --> 00:05:38,949
could be even worse let's say let's say

00:05:36,479 --> 00:05:41,529
so there's another thing here the HTTP

00:05:38,949 --> 00:05:45,249
server in one of the routes use the

00:05:41,529 --> 00:05:47,229
database right and in the database there

00:05:45,249 --> 00:05:48,399
is a query like a client that reads

00:05:47,229 --> 00:05:50,769
something in the config and then there

00:05:48,399 --> 00:05:53,319
is a query math method and this tries to

00:05:50,769 --> 00:05:56,199
execute the query and otherwise if there

00:05:53,319 --> 00:05:58,659
is a configuration really that says log

00:05:56,199 --> 00:06:01,149
the error it logs the arrow but when you

00:05:58,659 --> 00:06:02,409
then while that happens take like when

00:06:01,149 --> 00:06:04,629
the system realizes oh it's not there

00:06:02,409 --> 00:06:06,459
then it crashes and you don't get the

00:06:04,629 --> 00:06:07,929
query that actually led to the crash and

00:06:06,459 --> 00:06:09,819
you might not get any information

00:06:07,929 --> 00:06:11,199
because you you messed it up so it's

00:06:09,819 --> 00:06:14,529
much better if you or if you're able to

00:06:11,199 --> 00:06:15,789
catch this like earlier not only when

00:06:14,529 --> 00:06:17,049
the problem happens right so now we're

00:06:15,789 --> 00:06:22,179
moving all of them okay let's let's do

00:06:17,049 --> 00:06:25,439
this we're moving all of them into the

00:06:22,179 --> 00:06:27,099
config object so we get this earlier

00:06:25,439 --> 00:06:35,169
earlier failure

00:06:27,099 --> 00:06:36,969
I guess log arrows and they're all

00:06:35,169 --> 00:06:39,729
valid so they immediately we create the

00:06:36,969 --> 00:06:45,779
config object or when we start up stuff

00:06:39,729 --> 00:06:45,779
fail okay and this one too I guess

00:06:50,720 --> 00:06:54,930
okay that's that's I think that's

00:06:53,700 --> 00:06:57,000
already an improvement and that's that's

00:06:54,930 --> 00:06:58,680
how a lot of people here I think do it

00:06:57,000 --> 00:07:03,150
so they get early much earlier error

00:06:58,680 --> 00:07:06,450
messages but now we actually want to

00:07:03,150 --> 00:07:09,030
write a test that tests our queries

00:07:06,450 --> 00:07:11,310
against an in-memory database but we

00:07:09,030 --> 00:07:13,700
have hardwired our database against

00:07:11,310 --> 00:07:15,690
whatever the configuration is here right

00:07:13,700 --> 00:07:17,100
here the connection string

00:07:15,690 --> 00:07:28,770
we haven't even pulled that hold that

00:07:17,100 --> 00:07:30,450
out yet so if you do if you test your

00:07:28,770 --> 00:07:31,770
database you probably actually don't

00:07:30,450 --> 00:07:33,210
want a hardwire against the

00:07:31,770 --> 00:07:35,430
configuration you probably end up making

00:07:33,210 --> 00:07:37,350
the database the case class maybe taking

00:07:35,430 --> 00:07:41,810
the the conjugates an argument or

00:07:37,350 --> 00:07:44,780
something I guess you could do all the

00:07:41,810 --> 00:07:46,889
individual fields or maybe we just do

00:07:44,780 --> 00:07:58,050
maybe we just turn our configuration

00:07:46,889 --> 00:07:59,580
into a case class so now we can pass it

00:07:58,050 --> 00:08:01,410
in when we still have to change this we

00:07:59,580 --> 00:08:08,039
can do okay let's say we have a case

00:08:01,410 --> 00:08:19,229
class cons fake and then move this down

00:08:08,039 --> 00:08:21,120
here but the types here that's a string

00:08:19,229 --> 00:08:24,360
I guess how they would that probably

00:08:21,120 --> 00:08:32,310
needs to be here but this is a string

00:08:24,360 --> 00:08:34,050
and this is a boolean an int and a

00:08:32,310 --> 00:08:38,219
string oh yeah and that that stuff we

00:08:34,050 --> 00:08:41,430
actually need to so I guess let's say we

00:08:38,219 --> 00:08:48,060
have a Val Val default or something

00:08:41,430 --> 00:08:50,700
which is the config and instance of the

00:08:48,060 --> 00:08:52,680
config object now there's a lot of names

00:08:50,700 --> 00:08:56,040
config here but let's roll with it for

00:08:52,680 --> 00:08:58,790
now okay we want to probably move all of

00:08:56,040 --> 00:08:58,790
this here

00:08:59,150 --> 00:09:10,660
I hope I got the order right probably

00:09:03,980 --> 00:09:10,660
not another part way stuff can fail but

00:09:15,610 --> 00:09:25,550
post connection port log errors looks

00:09:21,380 --> 00:09:27,440
good okay so now we've put into this

00:09:25,550 --> 00:09:28,430
class now we can pass the class in the

00:09:27,440 --> 00:09:30,050
database we could have also like

00:09:28,430 --> 00:09:31,310
restricted it down so we only pass the

00:09:30,050 --> 00:09:32,660
field but sometimes there are several

00:09:31,310 --> 00:09:41,570
things and we would just want to pass

00:09:32,660 --> 00:09:43,550
this around okay so so far so good now

00:09:41,570 --> 00:09:46,040
we have it parameterised now we can fail

00:09:43,550 --> 00:09:49,250
early we can pass it around but from

00:09:46,040 --> 00:09:51,640
what we have here it's a very small step

00:09:49,250 --> 00:09:55,010
to doing something slightly different

00:09:51,640 --> 00:09:56,600
we're using this dispatching mechanism

00:09:55,010 --> 00:10:00,110
here basically to decide which

00:09:56,600 --> 00:10:03,200
configuration to load right so we match

00:10:00,110 --> 00:10:05,839
on a on a system an environment variable

00:10:03,200 --> 00:10:10,040
and then we use that to load some file

00:10:05,839 --> 00:10:12,080
from disk what if we use a built-in

00:10:10,040 --> 00:10:15,080
dispatching mechanism of the JVM instead

00:10:12,080 --> 00:10:19,670
of basically implementing our own what

00:10:15,080 --> 00:10:28,300
if we say hey we have a and let's say we

00:10:19,670 --> 00:10:28,300
have an object environment config

00:10:31,819 --> 00:10:43,199
no actually it's let's go one step

00:10:34,980 --> 00:10:49,079
slower and now that we have this here we

00:10:43,199 --> 00:11:02,129
could also say okay we have this

00:10:49,079 --> 00:11:04,859
environment if it is development we just

00:11:02,129 --> 00:11:05,939
like it see here haha we want to make

00:11:04,859 --> 00:11:07,769
the config different depending on the

00:11:05,939 --> 00:11:13,949
environment if the environments

00:11:07,769 --> 00:11:23,069
development will just create a config

00:11:13,949 --> 00:11:24,629
object that has these things in there we

00:11:23,069 --> 00:11:26,730
didn't even have the log arrow key so it

00:11:24,629 --> 00:11:33,509
would have actually failed in when

00:11:26,730 --> 00:11:36,049
trying to log the error I guess probably

00:11:33,509 --> 00:11:36,049
it's go to

00:11:41,120 --> 00:11:49,190
what's it called I guess this is

00:11:44,870 --> 00:11:49,190
connecting to the end HTTP port

00:12:00,820 --> 00:12:07,060
okay just go

00:12:20,000 --> 00:12:29,160
so now and let's look here okay so this

00:12:26,760 --> 00:12:31,800
is at a no tengo their their age and

00:12:29,160 --> 00:12:34,830
this is a no in production Li we want to

00:12:31,800 --> 00:12:37,980
bind to the public interface and the

00:12:34,830 --> 00:12:40,140
port is maybe different and we probably

00:12:37,980 --> 00:12:41,490
want to log errors maybe loggers in

00:12:40,140 --> 00:12:45,060
production but not in development or

00:12:41,490 --> 00:12:47,910
something yeah so now this was like a

00:12:45,060 --> 00:12:50,400
fairly small exchange compared to what

00:12:47,910 --> 00:12:54,930
we did before but now we don't need this

00:12:50,400 --> 00:12:57,330
library anymore and we even get one is

00:12:54,930 --> 00:12:59,460
at compile time if something wasn't

00:12:57,330 --> 00:13:01,890
provided we can also put default values

00:12:59,460 --> 00:13:03,860
and it's kind of we have it all so we

00:13:01,890 --> 00:13:06,240
have a single place where people can

00:13:03,860 --> 00:13:07,950
figure out what the configuration values

00:13:06,240 --> 00:13:10,710
are and they can read it in the scallop

00:13:07,950 --> 00:13:14,310
follow meant that they usually usually

00:13:10,710 --> 00:13:16,170
know okay so we got rid of our

00:13:14,310 --> 00:13:17,910
configuration library and because we

00:13:16,170 --> 00:13:20,460
already have a parser the scallop parser

00:13:17,910 --> 00:13:24,320
we already have a language to express

00:13:20,460 --> 00:13:27,720
key value bindings case classes in Scala

00:13:24,320 --> 00:13:29,430
but we can go one step further and the

00:13:27,720 --> 00:13:35,120
dispatching mechanism I talked about

00:13:29,430 --> 00:13:41,910
earlier there is one built-in in the JVM

00:13:35,120 --> 00:13:48,530
so instead of basically doing this we

00:13:41,910 --> 00:13:48,530
can say hey why don't we have one object

00:13:48,920 --> 00:13:53,150
production config

00:14:00,820 --> 00:14:10,960
and why one object development conflicts

00:14:07,950 --> 00:14:22,810
and we just take that stuff and put it

00:14:10,960 --> 00:14:26,340
here and now well I mean right now we

00:14:22,810 --> 00:14:26,340
would have to do the same thing right

00:14:29,580 --> 00:14:37,890
that's because we statically like we

00:14:34,690 --> 00:14:41,260
kind of look up this configuration from

00:14:37,890 --> 00:14:45,190
from here for example well I guess this

00:14:41,260 --> 00:14:46,480
would be default now right or in the

00:14:45,190 --> 00:14:49,480
database I guess we could pass that in

00:14:46,480 --> 00:14:51,070
which I didn't do yet so in the HTTP

00:14:49,480 --> 00:14:52,570
server now when we create the database

00:14:51,070 --> 00:14:57,790
we'll have to some way create the

00:14:52,570 --> 00:14:59,560
database and if we have to get the

00:14:57,790 --> 00:15:00,940
conflict from somewhere so I guess the

00:14:59,560 --> 00:15:08,500
HTTP server also has to take the

00:15:00,940 --> 00:15:10,150
conflict so now it can also take it's

00:15:08,500 --> 00:15:15,190
all to parametrize now so we cannot the

00:15:10,150 --> 00:15:17,200
run test version of that if we want so

00:15:15,190 --> 00:15:19,210
now basically picking the configuration

00:15:17,200 --> 00:15:21,340
went all the way into our main method

00:15:19,210 --> 00:15:25,000
where I guess now we have to say here

00:15:21,340 --> 00:15:26,230
well conflict or default I guess that's

00:15:25,000 --> 00:15:27,960
the one because that's something that

00:15:26,230 --> 00:15:33,990
dispatches between our two environments

00:15:27,960 --> 00:15:38,530
but if at that point why don't we just

00:15:33,990 --> 00:15:47,200
create two main methods one production

00:15:38,530 --> 00:15:50,860
main and one development main and then

00:15:47,200 --> 00:15:54,180
we can get rid of all of this and we

00:15:50,860 --> 00:15:54,180
just once started up with the

00:15:54,480 --> 00:16:01,660
development config and once with the

00:15:57,130 --> 00:16:04,000
production config and now we have the JV

00:16:01,660 --> 00:16:06,130
the JVM it sets JDK itself or Java I

00:16:04,000 --> 00:16:07,420
guess the launcher to to kind of help us

00:16:06,130 --> 00:16:11,050
decide which conformation we want to do

00:16:07,420 --> 00:16:12,270
and there's another thing which gets

00:16:11,050 --> 00:16:15,330
simpler

00:16:12,270 --> 00:16:18,740
so this is already satisfying me that so

00:16:15,330 --> 00:16:21,149
I'm now it's all Scala it's it's a

00:16:18,740 --> 00:16:22,740
parameterised I can use different

00:16:21,149 --> 00:16:24,450
configuration for testing I don't have

00:16:22,740 --> 00:16:25,589
to write my own like environment where I

00:16:24,450 --> 00:16:26,580
go something I can just provide the

00:16:25,589 --> 00:16:28,770
class that I want to run in production

00:16:26,580 --> 00:16:31,529
or in tests in development or testing or

00:16:28,770 --> 00:16:33,779
we have like in the latest project that

00:16:31,529 --> 00:16:34,980
work we have like four different four

00:16:33,779 --> 00:16:36,209
different of these runners one for

00:16:34,980 --> 00:16:38,880
staging one for production went for

00:16:36,209 --> 00:16:41,040
testing and one for development and

00:16:38,880 --> 00:16:42,360
testing meaning when the unit test

00:16:41,040 --> 00:16:46,529
actually runs away of something memory

00:16:42,360 --> 00:16:48,330
stuff going on there right and then a

00:16:46,529 --> 00:16:51,899
smaller change where you can do which is

00:16:48,330 --> 00:16:55,050
just a convenience thing often this

00:16:51,899 --> 00:16:56,880
wiring here is almost the same in all

00:16:55,050 --> 00:16:59,010
the environments it's slightly different

00:16:56,880 --> 00:17:04,860
and in the project one right now because

00:16:59,010 --> 00:17:06,540
in production and staging we want to

00:17:04,860 --> 00:17:07,980
really spin up the server with the real

00:17:06,540 --> 00:17:09,839
routes and all this stuff but in

00:17:07,980 --> 00:17:13,020
development or in testing in particular

00:17:09,839 --> 00:17:13,980
we spin it up with a mocked back end so

00:17:13,020 --> 00:17:17,220
you kind of configure it slightly

00:17:13,980 --> 00:17:18,660
differently but most of the code is the

00:17:17,220 --> 00:17:22,110
same so you could just say something

00:17:18,660 --> 00:17:24,890
like well why don't we move this into

00:17:22,110 --> 00:17:24,890
the configuration

00:17:37,580 --> 00:17:51,320
yeah what is it and now our dispatching

00:17:50,250 --> 00:17:57,630
code

00:17:51,320 --> 00:17:59,880
yeah looks like looks like this and and

00:17:57,630 --> 00:18:02,220
now configuration suddenly became

00:17:59,880 --> 00:18:04,830
something that's like the configuration

00:18:02,220 --> 00:18:08,670
of a car the configuration of a car is

00:18:04,830 --> 00:18:10,170
not just the how you turn the knobs but

00:18:08,670 --> 00:18:13,050
really how all the parts are assembled

00:18:10,170 --> 00:18:15,690
together right so your configuration is

00:18:13,050 --> 00:18:17,760
really how the fundamental modules of

00:18:15,690 --> 00:18:20,310
the application are wired together plus

00:18:17,760 --> 00:18:21,480
the knob settings this is I mean it you

00:18:20,310 --> 00:18:22,740
don't have to get all that far but is

00:18:21,480 --> 00:18:26,040
there's a certain convenience of doing

00:18:22,740 --> 00:18:27,600
it this way and now you don't need a

00:18:26,040 --> 00:18:29,400
library and it's all typesafe and you

00:18:27,600 --> 00:18:32,940
get type errors and it doesn't even

00:18:29,400 --> 00:18:36,720
start up when it's when it's wrong yeah

00:18:32,940 --> 00:18:42,720
so that's that's how I like to do

00:18:36,720 --> 00:18:46,050
configuration and that was the first

00:18:42,720 --> 00:18:49,080
topic let's get to the second one

00:18:46,050 --> 00:18:59,010
oh yeah that's a question right so the

00:18:49,080 --> 00:19:00,540
question is what's what about like the

00:18:59,010 --> 00:19:01,530
non Scala developers in your company who

00:19:00,540 --> 00:19:05,330
might also have to change this

00:19:01,530 --> 00:19:11,580
configuration and like people in ops are

00:19:05,330 --> 00:19:12,960
right so there is their trade-offs and

00:19:11,580 --> 00:19:14,610
you might not be able to do that in

00:19:12,960 --> 00:19:15,900
every setting you might also not be able

00:19:14,610 --> 00:19:17,250
to do that when you integrate different

00:19:15,900 --> 00:19:20,010
languages that have to read like when

00:19:17,250 --> 00:19:21,570
you have a Python application that when

00:19:20,010 --> 00:19:23,340
they have to read stuff differently I I

00:19:21,570 --> 00:19:26,550
did write a blog post about this topic

00:19:23,340 --> 00:19:27,930
as well which also kind of face faces

00:19:26,550 --> 00:19:29,730
some of these different trade-offs

00:19:27,930 --> 00:19:31,770
against each other sometimes for example

00:19:29,730 --> 00:19:33,150
if you run in a cluster and that cluster

00:19:31,770 --> 00:19:36,480
provides you the port that you have to

00:19:33,150 --> 00:19:38,400
bind to you can also not just hard code

00:19:36,480 --> 00:19:40,320
that in Scala you can only hard code the

00:19:38,400 --> 00:19:42,330
things you know but then you can limit

00:19:40,320 --> 00:19:44,400
the dynamic reading of config things to

00:19:42,330 --> 00:19:47,400
only the things that really are dynamic

00:19:44,400 --> 00:19:49,350
but yes in a language in a situation

00:19:47,400 --> 00:19:50,790
where you have different people and non

00:19:49,350 --> 00:19:52,710
scholar developers having

00:19:50,790 --> 00:19:54,570
change the configuration you might not

00:19:52,710 --> 00:19:57,600
get away with this or different

00:19:54,570 --> 00:19:59,340
languages here so there's a yeah you

00:19:57,600 --> 00:20:01,320
could check out this blog post that's my

00:19:59,340 --> 00:20:03,510
handle and medium and this explains it

00:20:01,320 --> 00:20:05,100
in the code examples and also goes into

00:20:03,510 --> 00:20:06,270
the thing how you can still even if you

00:20:05,100 --> 00:20:07,680
don't know all the stuff at compile time

00:20:06,270 --> 00:20:09,420
but you can still write in Scala

00:20:07,680 --> 00:20:11,130
basically you can just bind jars

00:20:09,420 --> 00:20:15,600
together later which is also a way to it

00:20:11,130 --> 00:20:18,480
add configuration okay yes another

00:20:15,600 --> 00:20:19,920
question the question was is like isn't

00:20:18,480 --> 00:20:21,780
it better to use the system properties

00:20:19,920 --> 00:20:23,370
the - D thing instead of the environment

00:20:21,780 --> 00:20:25,790
variables Adam doesn't make a difference

00:20:23,370 --> 00:20:32,100
it's like some way to pass past things

00:20:25,790 --> 00:20:34,350
like I don't know I don't know I I see

00:20:32,100 --> 00:20:35,640
us using system properties sometimes an

00:20:34,350 --> 00:20:36,480
environment variables sometimes I guess

00:20:35,640 --> 00:20:38,430
when you're running on something like

00:20:36,480 --> 00:20:39,570
circle circle generally provide stuff as

00:20:38,430 --> 00:20:40,260
environment variables you have to read

00:20:39,570 --> 00:20:52,380
it from there

00:20:40,260 --> 00:20:54,720
but then this sorry when you yes

00:20:52,380 --> 00:20:56,070
if you have secret credentials or

00:20:54,720 --> 00:20:58,560
something you don't want to hard-code

00:20:56,070 --> 00:21:00,630
them in your code but then you can do

00:20:58,560 --> 00:21:02,280
the same thing and really just read only

00:21:00,630 --> 00:21:04,350
the things that you need to dynamically

00:21:02,280 --> 00:21:05,820
load from other stuff in that way and

00:21:04,350 --> 00:21:08,940
not load all the other stuff which is

00:21:05,820 --> 00:21:10,110
fixed because you usually know at least

00:21:08,940 --> 00:21:11,400
for your testing environment all the

00:21:10,110 --> 00:21:13,590
values and you can just store them there

00:21:11,400 --> 00:21:15,420
and then for production problem maybe

00:21:13,590 --> 00:21:17,640
you know even the IPS of your of your

00:21:15,420 --> 00:21:21,090
database and then all this and and it's

00:21:17,640 --> 00:21:22,620
it's it's easier and safer okay let's

00:21:21,090 --> 00:21:25,620
get into a into another topic which

00:21:22,620 --> 00:21:28,980
which I personally find really exciting

00:21:25,620 --> 00:21:31,170
also because I'm working on CBT and CBT

00:21:28,980 --> 00:21:34,080
is something that kind of encourages you

00:21:31,170 --> 00:21:36,150
to do more automation for you for around

00:21:34,080 --> 00:21:38,310
your project meaning they'll like

00:21:36,150 --> 00:21:41,040
basically what your classic dubash best

00:21:38,310 --> 00:21:42,600
with bash scripts but do it in scala and

00:21:41,040 --> 00:21:45,060
one thing you do a lot from bash scripts

00:21:42,600 --> 00:21:46,530
if you call out processes right and you

00:21:45,060 --> 00:21:47,970
conveniently pipe them into each other

00:21:46,530 --> 00:21:50,220
and all this and this is really

00:21:47,970 --> 00:21:51,660
something where you can't do this in

00:21:50,220 --> 00:21:53,940
scala but there's a certain overhead and

00:21:51,660 --> 00:21:55,320
people often shy away from it but it

00:21:53,940 --> 00:21:56,910
would be really nice if we could make

00:21:55,320 --> 00:21:58,620
this like very convenient and typesafe

00:21:56,910 --> 00:22:02,630
at the same time so I kind of want to

00:21:58,620 --> 00:22:02,630
get into a way of doing this

00:22:02,880 --> 00:22:11,360
so let's scratch that and let's delete

00:22:07,070 --> 00:22:11,360
all these other files here

00:22:20,300 --> 00:22:34,230
okay starting fresh here so let's just

00:22:30,540 --> 00:22:35,460
create a main method so it's something

00:22:34,230 --> 00:22:39,690
to work with because this time we like

00:22:35,460 --> 00:22:42,830
to execute things so let's say we want

00:22:39,690 --> 00:22:44,820
to invoke something like like get

00:22:42,830 --> 00:22:46,200
ideally the way I would like to invoke

00:22:44,820 --> 00:22:48,330
something like it for a little script

00:22:46,200 --> 00:22:50,310
that I write would be something like

00:22:48,330 --> 00:22:57,570
this get I don't know get maybe get that

00:22:50,310 --> 00:23:04,440
status and then or or I guess maybe like

00:22:57,570 --> 00:23:06,690
this quiet equals true exit code equals

00:23:04,440 --> 00:23:09,360
true or something so I can check on my

00:23:06,690 --> 00:23:11,940
CI for example that after I run my code

00:23:09,360 --> 00:23:14,070
formatter it didn't actually change

00:23:11,940 --> 00:23:15,450
anything meaning my people have like

00:23:14,070 --> 00:23:17,220
leather people who committed code have

00:23:15,450 --> 00:23:19,880
properly conformed at their code so

00:23:17,220 --> 00:23:22,470
that's something you may want to run and

00:23:19,880 --> 00:23:25,950
so how can we how can we make this work

00:23:22,470 --> 00:23:27,540
so let's I mean it would be somewhere

00:23:25,950 --> 00:23:30,120
something like this right view object

00:23:27,540 --> 00:23:33,000
get and an object get we have it let's

00:23:30,120 --> 00:23:45,840
say a def status and then status has

00:23:33,000 --> 00:23:48,090
quiet which is a boolean exit code it's

00:23:45,840 --> 00:23:49,800
also boolean it's just I think that's

00:23:48,090 --> 00:23:52,230
just a get flag that tells get to

00:23:49,800 --> 00:23:54,570
produce an exit code that's representing

00:23:52,230 --> 00:23:58,590
I might be wrong but we'll see in a

00:23:54,570 --> 00:24:02,670
second okay no yeah I guess the default

00:23:58,590 --> 00:24:04,230
should be false okay and now I mean in

00:24:02,670 --> 00:24:05,850
order to do something this this looks

00:24:04,230 --> 00:24:07,380
like she needs to do something and one

00:24:05,850 --> 00:24:10,560
thing that the JVM offers has to do it

00:24:07,380 --> 00:24:12,720
and we're doing we're going the the slow

00:24:10,560 --> 00:24:14,520
inconvenient way first and then we'll

00:24:12,720 --> 00:24:16,290
we'll basically get to how can we do

00:24:14,520 --> 00:24:18,350
this apply this basically across for to

00:24:16,290 --> 00:24:22,190
any command that we want in a nice way

00:24:18,350 --> 00:24:25,730
so okay what do we do here we would do

00:24:22,190 --> 00:24:25,730
git status

00:24:26,520 --> 00:24:40,000
and I guess - - quiet

00:24:33,270 --> 00:24:43,360
just drive exit is that it and then I

00:24:40,000 --> 00:24:45,910
guess it's have to provide a directory I

00:24:43,360 --> 00:24:59,040
think let's just use this directory for

00:24:45,910 --> 00:25:03,040
now dot start dot wait for oh and

00:24:59,040 --> 00:25:04,840
inherit IO which basically binds the

00:25:03,040 --> 00:25:08,710
input output of this process to our

00:25:04,840 --> 00:25:10,360
current Java process which means we'll

00:25:08,710 --> 00:25:12,970
see it in the Michelle that we invoke it

00:25:10,360 --> 00:25:14,920
so let's just let's just run this and

00:25:12,970 --> 00:25:17,290
see if this at least shows us actually

00:25:14,920 --> 00:25:20,290
at the probably probably don't want to

00:25:17,290 --> 00:25:23,410
run quiet right we I guess we can do

00:25:20,290 --> 00:25:26,310
this but we want to see some output okay

00:25:23,410 --> 00:25:29,140
let's let's let's run this for a CBT

00:25:26,310 --> 00:25:32,020
direct run we've to use this direct

00:25:29,140 --> 00:25:33,670
thing here so you can okay let us see

00:25:32,020 --> 00:25:41,790
what's happening here no main class

00:25:33,670 --> 00:25:44,790
found how we have to go into app I think

00:25:41,790 --> 00:25:44,790
yeah

00:25:48,330 --> 00:26:04,020
when there's a type girl okay can't

00:25:52,470 --> 00:26:05,400
chose this sorry oh yeah and hard

00:26:04,020 --> 00:26:06,930
cutting that is quite as true

00:26:05,400 --> 00:26:09,110
I should probably actually do something

00:26:06,930 --> 00:26:09,110
like

00:26:25,260 --> 00:26:32,130
yeah it gets like if you want to do this

00:26:27,419 --> 00:26:33,510
in that kind of extensive way then it

00:26:32,130 --> 00:26:35,010
gets annoying quickly right there's a

00:26:33,510 --> 00:26:37,380
lot of boilerplate to write for one

00:26:35,010 --> 00:26:51,470
command okay

00:26:37,380 --> 00:26:51,470
exit code Matt it

00:26:55,940 --> 00:27:06,960
let's see doesn't find file and process

00:27:04,559 --> 00:27:09,090
builder I okay we have to do this this

00:27:06,960 --> 00:27:11,549
thing so we pass them as a individual

00:27:09,090 --> 00:27:17,280
things for the VAR arcs and we have to

00:27:11,549 --> 00:27:25,080
import Java dot IO dot file okay let's

00:27:17,280 --> 00:27:29,610
see I guess gives we take out get status

00:27:25,080 --> 00:27:42,090
a bit wrong and what is it get help

00:27:29,610 --> 00:27:44,660
status then oq how it's diff that stood

00:27:42,090 --> 00:27:44,660
if instead

00:27:56,670 --> 00:28:08,220
exit exit code okay let's see

00:28:16,250 --> 00:28:23,630
okay it didn't show anything because did

00:28:21,060 --> 00:28:23,630
we do quiet

00:28:23,930 --> 00:28:27,740
do this as false as well

00:28:46,630 --> 00:28:50,830
and it's print the parts and see

00:28:58,059 --> 00:29:04,210
maybe get diffident returning anything

00:29:00,340 --> 00:29:06,729
oh that's true let's let's add something

00:29:04,210 --> 00:29:12,669
then let's add this one let's get this

00:29:06,729 --> 00:29:15,239
trip returning something out no oh but

00:29:12,669 --> 00:29:16,719
now we can change this how would this

00:29:15,239 --> 00:29:22,869
yay

00:29:16,719 --> 00:29:25,179
okay let's rerun this okay there we go

00:29:22,869 --> 00:29:28,379
okay now we we have managed to call our

00:29:25,179 --> 00:29:28,379
process nice okay fine

00:29:29,369 --> 00:29:39,479
so basically following this pattern we

00:29:35,499 --> 00:29:42,519
could like slowly but surely implement

00:29:39,479 --> 00:29:44,700
typesafe wrappers around all our system

00:29:42,519 --> 00:29:48,339
processes and all their features and and

00:29:44,700 --> 00:29:49,749
give us a types of API but obviously

00:29:48,339 --> 00:29:50,889
that's a lot of work and that's also a

00:29:49,749 --> 00:29:52,269
lot of work to get right and that's

00:29:50,889 --> 00:29:54,159
usually something we wouldn't do as a

00:29:52,269 --> 00:29:56,229
one-off it's a one-off we probably would

00:29:54,159 --> 00:29:57,609
just call process builder or would do

00:29:56,229 --> 00:30:00,099
the one-off in bash because it's more

00:29:57,609 --> 00:30:03,059
convenient in the moment it would right

00:30:00,099 --> 00:30:07,340
so it's a one-off it's it's kind of

00:30:03,059 --> 00:30:08,729
annoying but if we would either either

00:30:07,340 --> 00:30:11,950
[Music]

00:30:08,729 --> 00:30:14,830
take away most of the work or make it

00:30:11,950 --> 00:30:20,070
much easier to do this we might actually

00:30:14,830 --> 00:30:22,629
end up doing it right so that basically

00:30:20,070 --> 00:30:25,869
one approach what you can do is

00:30:22,629 --> 00:30:27,820
cogeneration you can generate this code

00:30:25,869 --> 00:30:29,739
for you generate the types of wrappers

00:30:27,820 --> 00:30:32,710
and for cogeneration we have two choices

00:30:29,739 --> 00:30:39,219
we can either generate actual Scala code

00:30:32,710 --> 00:30:42,339
or we can use macros and for in cbt-i

00:30:39,219 --> 00:30:44,889
for example used code generation for one

00:30:42,339 --> 00:30:51,119
command that I wanted to call this way

00:30:44,889 --> 00:30:51,119
if we look well there we go

00:30:55,080 --> 00:31:02,320
so in CBT there is one there's one

00:31:00,429 --> 00:31:04,330
plugin for it as a library for ProGuard

00:31:02,320 --> 00:31:05,679
where basic provide a type safe wrapper

00:31:04,330 --> 00:31:07,960
around ProGuard it's like it's in this

00:31:05,679 --> 00:31:10,119
CVT independent but it's a because

00:31:07,960 --> 00:31:11,360
ProGuard has only this main method how

00:31:10,119 --> 00:31:14,510
to invoke it

00:31:11,360 --> 00:31:15,950
some internal java classes but they

00:31:14,510 --> 00:31:19,130
don't really correspond to this one are

00:31:15,950 --> 00:31:22,100
documented but ProGuard has this really

00:31:19,130 --> 00:31:24,260
nice reference treat on their website

00:31:22,100 --> 00:31:26,030
that basically says all the things he

00:31:24,260 --> 00:31:28,340
can do with the runner and all the types

00:31:26,030 --> 00:31:31,880
you can can that's even like even the

00:31:28,340 --> 00:31:33,500
types of what they are right so what I

00:31:31,880 --> 00:31:36,290
ended up doing for CBT is I wrote a

00:31:33,500 --> 00:31:40,450
little script that downloads this

00:31:36,290 --> 00:31:44,299
reference card parts a bit of HTML out

00:31:40,450 --> 00:31:46,040
then creates this file which is now a

00:31:44,299 --> 00:31:48,830
typed wrapper and including

00:31:46,040 --> 00:31:50,660
documentation from the rest card around

00:31:48,830 --> 00:31:52,850
and it's not that like in the end it's

00:31:50,660 --> 00:31:54,890
not that hard to do I mean it's it's

00:31:52,850 --> 00:31:57,169
still a little bit of work as a one-off

00:31:54,890 --> 00:31:58,850
but if we do this for like double you

00:31:57,169 --> 00:32:04,630
get and a bunch of other commands and

00:31:58,850 --> 00:32:07,250
grep and if you and then I mean sorry

00:32:04,630 --> 00:32:08,390
yeah exactly we can parse man files as

00:32:07,250 --> 00:32:10,070
well so we should just be able to

00:32:08,390 --> 00:32:12,440
generate these wrappers fairly easily

00:32:10,070 --> 00:32:17,000
then at least we have a way to call one

00:32:12,440 --> 00:32:18,380
command and okay but often we chain them

00:32:17,000 --> 00:32:19,700
and bash right so that's something I'll

00:32:18,380 --> 00:32:21,590
get into in a minute because we want to

00:32:19,700 --> 00:32:24,190
pipe things otherwise for we're probably

00:32:21,590 --> 00:32:26,510
okay but this is one thing you can do

00:32:24,190 --> 00:32:29,630
but I guess it requires a little bit of

00:32:26,510 --> 00:32:33,020
build setup and builds our topic of its

00:32:29,630 --> 00:32:36,710
own sometimes right so right you can't

00:32:33,020 --> 00:32:38,419
do this but maybe not one that everybody

00:32:36,710 --> 00:32:40,250
has a dedication or maybe the tool you

00:32:38,419 --> 00:32:41,900
want to call isn't written this way so

00:32:40,250 --> 00:32:45,309
an alternative approach would be macros

00:32:41,900 --> 00:32:55,360
and what I what I've basically written

00:32:45,309 --> 00:32:55,360
is a macro where do we have this here

00:32:55,480 --> 00:32:58,480
now

00:32:59,950 --> 00:33:06,410
one more here a macro that you put

00:33:05,900 --> 00:33:08,660
somewhere

00:33:06,410 --> 00:33:12,620
it's called capture if I'm not mistaken

00:33:08,660 --> 00:33:14,929
yes and it will look at the next outer

00:33:12,620 --> 00:33:16,340
method and just give us all the

00:33:14,929 --> 00:33:20,900
information about this method as a data

00:33:16,340 --> 00:33:26,570
structure we can process so if we do

00:33:20,900 --> 00:33:28,970
this here we can say let's just print Ln

00:33:26,570 --> 00:33:30,920
this for now so capture we'll look at

00:33:28,970 --> 00:33:33,380
the next method definition which is this

00:33:30,920 --> 00:33:36,290
thing right and then just get

00:33:33,380 --> 00:33:37,730
information about this and now we just

00:33:36,290 --> 00:33:40,160
the only thing we're doing with this is

00:33:37,730 --> 00:33:41,809
printing it let's do that let's see what

00:33:40,160 --> 00:33:49,309
comes out and let's get rid of these

00:33:41,809 --> 00:33:51,800
debug statements captured on phone okay

00:33:49,309 --> 00:34:01,700
we need to import it I guess import help

00:33:51,800 --> 00:34:05,570
purse got capture package help us

00:34:01,700 --> 00:34:13,250
capture the value I'll capture capture

00:34:05,570 --> 00:34:15,409
catch okay fine yeah for some reason

00:34:13,250 --> 00:34:17,179
this thing currently needs a return type

00:34:15,409 --> 00:34:23,629
in this case unit because we just

00:34:17,179 --> 00:34:24,859
println right okay okay so now we get

00:34:23,629 --> 00:34:27,500
this data structure it's just case

00:34:24,859 --> 00:34:29,359
classes which tell us hey the method

00:34:27,500 --> 00:34:32,119
we're in is diff there's an argument

00:34:29,359 --> 00:34:34,669
quiet and actually in the current call

00:34:32,119 --> 00:34:36,290
it's been set to false there's another

00:34:34,669 --> 00:34:43,429
argument exit code and then the college

00:34:36,290 --> 00:34:45,770
student set to false as well and now we

00:34:43,429 --> 00:34:50,560
can go ahead and use this so we can say

00:34:45,770 --> 00:34:50,560
hey we want to call

00:34:51,260 --> 00:35:04,390
capture dot name here actually this is

00:34:56,629 --> 00:35:04,390
diff so we want this right still get and

00:35:06,430 --> 00:35:16,420
I guess let's see and then we take all

00:35:14,090 --> 00:35:16,420
the

00:35:25,089 --> 00:35:31,969
that takes of what's the cult it's the

00:35:27,799 --> 00:35:42,499
Ark's I guess arguments here case that's

00:35:31,969 --> 00:35:51,440
our ex okay we take the RX in there and

00:35:42,499 --> 00:35:58,359
each arc has a value actually lets

00:35:51,440 --> 00:36:00,739
pattern match this right here and

00:35:58,359 --> 00:36:02,239
argument and it has I think some

00:36:00,739 --> 00:36:05,029
annotations which we are not using right

00:36:02,239 --> 00:36:09,619
now it has a name and it has let's say

00:36:05,029 --> 00:36:21,680
it's a boolean that's true and if it is

00:36:09,619 --> 00:36:25,369
this then we're adding this to our list

00:36:21,680 --> 00:36:28,969
otherwise if it's I guess if it's

00:36:25,369 --> 00:36:33,589
anything else before now we're adding

00:36:28,969 --> 00:36:39,650
nothing well I'm glad map

00:36:33,589 --> 00:36:43,309
I guess this doesn't work let's see if

00:36:39,650 --> 00:36:45,619
this works because exit code it with a -

00:36:43,309 --> 00:36:47,449
we could go ahead and even do like Club

00:36:45,619 --> 00:36:49,489
I guess camel case - non camel case

00:36:47,449 --> 00:36:51,140
mapping here but we are slowly

00:36:49,489 --> 00:36:53,420
developing ourselves into necking

00:36:51,140 --> 00:36:55,160
abstraction of this we're by just

00:36:53,420 --> 00:36:56,660
providing different signatures here we

00:36:55,160 --> 00:36:58,759
now have type safe interfaces against

00:36:56,660 --> 00:37:00,259
different commands and we're just on the

00:36:58,759 --> 00:37:04,940
way halfway there to to basically

00:37:00,259 --> 00:37:10,449
abstract out right let's see if this

00:37:04,940 --> 00:37:10,449
already works for the gift if only right

00:37:10,809 --> 00:37:17,019
exit code okay that's not okay this is

00:37:14,180 --> 00:37:17,019
exit code now

00:37:17,940 --> 00:37:19,970
ah

00:37:23,910 --> 00:37:39,539
oh yeah it's these dead keys argument I

00:37:37,740 --> 00:37:49,500
guess we need to record all this stuff

00:37:39,539 --> 00:37:53,309
here okay so that worked we have a lot

00:37:49,500 --> 00:37:55,609
more changes to now so now we can have

00:37:53,309 --> 00:37:57,900
extracted this stuff from here right and

00:37:55,609 --> 00:37:59,579
now we can go one step further we can

00:37:57,900 --> 00:38:01,410
just say okay let's do that for multiple

00:37:59,579 --> 00:38:08,220
good commands let's get the status

00:38:01,410 --> 00:38:18,049
command in here as well take all this

00:38:08,220 --> 00:38:18,049
stuff here well and extract this into

00:38:25,980 --> 00:38:37,240
is called a staff to process which takes

00:38:29,950 --> 00:38:45,009
a signature and does this

00:38:37,240 --> 00:38:52,029
I guess it's to get and now we're just

00:38:45,009 --> 00:38:54,609
calling to get here with capture and

00:38:52,029 --> 00:39:03,930
then we call to get here with capture as

00:38:54,609 --> 00:39:03,930
well okay let's see if that works

00:39:08,160 --> 00:39:17,950
pay close embrace okay fine let's see to

00:39:16,329 --> 00:39:29,079
get not found I guess we need to import

00:39:17,950 --> 00:39:38,950
lip recursive method to get oh I see we

00:39:29,079 --> 00:39:40,660
need the signature and yeah and I'm

00:39:38,950 --> 00:39:45,930
going to return type and I guess it's

00:39:40,660 --> 00:39:45,930
also unit is it yeah maybe not to put

00:39:46,980 --> 00:39:51,910
okay so now we are able to call both of

00:39:49,989 --> 00:39:54,069
those commands we can generalize it one

00:39:51,910 --> 00:39:57,039
further we'll be saying okay

00:39:54,069 --> 00:39:59,319
let's actually let's actually make it to

00:39:57,039 --> 00:40:00,999
process and just get rid of the get

00:39:59,319 --> 00:40:04,480
stuff so let's not not look not to get

00:40:00,999 --> 00:40:10,569
for now let's do something like death

00:40:04,480 --> 00:40:14,470
cat equals to process of capture and def

00:40:10,569 --> 00:40:16,829
graph to process of capture and grab

00:40:14,470 --> 00:40:22,720
gasps cuts a pattern which is a string

00:40:16,829 --> 00:40:27,329
and then you want to do echo as well def

00:40:22,720 --> 00:40:27,329
echo takes a string

00:40:33,109 --> 00:40:42,589
okay and now let's just try echo for now

00:40:47,270 --> 00:40:55,579
in case we need to support strings here

00:40:50,039 --> 00:40:57,660
as well now right and if it is a string

00:40:55,579 --> 00:41:10,529
let's say we're just passing it we're

00:40:57,660 --> 00:41:12,660
just passing it through them not found

00:41:10,529 --> 00:41:15,799
to process because it's in the lip okay

00:41:12,660 --> 00:41:15,799
let's just move it all in the same class

00:41:17,119 --> 00:41:23,100
and the return fracture and

00:41:19,870 --> 00:41:23,100
[Music]

00:41:29,280 --> 00:41:34,900
okay so echo test worked so now the the

00:41:33,250 --> 00:41:36,520
really cool thing would be can we pipe

00:41:34,900 --> 00:41:38,920
these things right and I only have a few

00:41:36,520 --> 00:41:41,260
minutes left but I'll be able to to to

00:41:38,920 --> 00:41:45,120
get this to work because you can type

00:41:41,260 --> 00:41:47,890
stuff on the JVM so one thing I did I

00:41:45,120 --> 00:41:49,360
implemented a pipe extension method for

00:41:47,890 --> 00:41:51,400
process builder and for sequence of

00:41:49,360 --> 00:41:52,480
process builder so you can just pipe a

00:41:51,400 --> 00:41:53,590
bunch of process builders and you'll

00:41:52,480 --> 00:41:55,030
build up the sequence now you have a

00:41:53,590 --> 00:41:58,240
sequence of process builders right and

00:41:55,030 --> 00:41:59,620
then at this exit method exec which

00:41:58,240 --> 00:42:03,910
takes the sequence of process builders

00:41:59,620 --> 00:42:06,370
and it will set all of them to I guess

00:42:03,910 --> 00:42:09,310
put the director of the standard error

00:42:06,370 --> 00:42:12,040
just straight out but turn the input and

00:42:09,310 --> 00:42:15,340
output two pipes and then for the first

00:42:12,040 --> 00:42:17,670
one I say the in the input is attached

00:42:15,340 --> 00:42:20,080
to my Java process and for the last one

00:42:17,670 --> 00:42:22,450
I'll say it also attached to the Java

00:42:20,080 --> 00:42:24,250
process and for all the other ones in

00:42:22,450 --> 00:42:26,080
the sliding window of two I'm creating

00:42:24,250 --> 00:42:29,050
threads that pipe from one to the other

00:42:26,080 --> 00:42:31,390
so now I chain them all together and

00:42:29,050 --> 00:42:36,100
then there's this thing here which but

00:42:31,390 --> 00:42:38,170
it's I mean it's yeah it goes back it

00:42:36,100 --> 00:42:41,080
goes down to the JDK fundamentals like

00:42:38,170 --> 00:42:42,400
threads and streams and all this but you

00:42:41,080 --> 00:42:44,020
can write this once and then forget

00:42:42,400 --> 00:42:45,580
about it and just be able to pipe stuff

00:42:44,020 --> 00:42:46,870
into each other I mean SPT has something

00:42:45,580 --> 00:42:49,030
like this as well which has made in the

00:42:46,870 --> 00:42:51,610
standard library and if we combine

00:42:49,030 --> 00:42:53,410
basically this piping mechanism with the

00:42:51,610 --> 00:42:55,150
type safety of commands then it becomes

00:42:53,410 --> 00:42:58,030
really nice because now we can do

00:42:55,150 --> 00:42:59,500
something like okay now this stuff

00:42:58,030 --> 00:43:01,510
doesn't read doesn't actually run these

00:42:59,500 --> 00:43:06,580
things it just returns the process

00:43:01,510 --> 00:43:08,760
builders and now we can do something

00:43:06,580 --> 00:43:08,760
like

00:43:10,460 --> 00:43:20,750
type this into cat and pipe pipe this

00:43:14,900 --> 00:43:23,450
into grab and we just want the things

00:43:20,750 --> 00:43:30,099
with the a in there and this probably

00:43:23,450 --> 00:43:30,099
doesn't work on first run but we'll see

00:43:30,940 --> 00:43:43,880
takes like not found okay I guess I'm a

00:43:33,530 --> 00:43:46,040
can kind of import pipe yeah and now

00:43:43,880 --> 00:43:47,750
we're piping piping things in a Scala

00:43:46,040 --> 00:43:50,359
main method in the types of way and have

00:43:47,750 --> 00:43:59,510
a nice way to embed our own commands

00:43:50,359 --> 00:44:02,690
into this step-by-step and so I have a

00:43:59,510 --> 00:44:05,900
prototype of the the macro and these

00:44:02,690 --> 00:44:07,550
functions kind of as a library which I'm

00:44:05,900 --> 00:44:10,400
still working on but I'm planning to

00:44:07,550 --> 00:44:11,750
release that as part of as part of CBT

00:44:10,400 --> 00:44:14,900
but it's a self-contained library that

00:44:11,750 --> 00:44:16,970
can be used outside of it as well just

00:44:14,900 --> 00:44:18,799
so we can like do safe and nice bash

00:44:16,970 --> 00:44:20,059
scripting because a year ago I made a

00:44:18,799 --> 00:44:24,049
resolution that I'm not writing bash

00:44:20,059 --> 00:44:26,329
script anymore happen it worked all

00:44:24,049 --> 00:44:28,369
right that's it oh one more thing very

00:44:26,329 --> 00:44:30,380
quickly so the last thing I wanted to

00:44:28,369 --> 00:44:32,540
show what you haven't gotten to we are

00:44:30,380 --> 00:44:35,569
calling out two processes right we can

00:44:32,540 --> 00:44:37,730
also call into Scala as a process so

00:44:35,569 --> 00:44:39,290
something that CBT does where you can

00:44:37,730 --> 00:44:41,869
just call methods but also other things

00:44:39,290 --> 00:44:43,970
like Emma Knight is where you basically

00:44:41,869 --> 00:44:45,380
have a way to call Scala methods and

00:44:43,970 --> 00:44:46,760
even pass arguments so you're kind of

00:44:45,380 --> 00:44:48,829
reusing your type signatures to

00:44:46,760 --> 00:44:50,210
automatically generate a command line

00:44:48,829 --> 00:44:52,220
interface so you don't have to write a

00:44:50,210 --> 00:44:53,809
command line parser which is kind of the

00:44:52,220 --> 00:44:55,910
flip side of what we've been doing right

00:44:53,809 --> 00:44:58,250
now it's also something I think we

00:44:55,910 --> 00:45:00,140
should be just doing and like just give

00:44:58,250 --> 00:45:01,819
a way to just write a library that does

00:45:00,140 --> 00:45:03,920
this and then solve it once and for all

00:45:01,819 --> 00:45:05,780
and like have seamless improv

00:45:03,920 --> 00:45:08,450
interoperability between all these

00:45:05,780 --> 00:45:10,309
untyped worlds and and you could do the

00:45:08,450 --> 00:45:12,319
exact same thing for rest services I

00:45:10,309 --> 00:45:14,530
mean with less control over HTTP but

00:45:12,319 --> 00:45:17,059
most of the time we don't need it either

00:45:14,530 --> 00:45:18,650
so we have fluent integration between

00:45:17,059 --> 00:45:20,869
the untyped world and the type world and

00:45:18,650 --> 00:45:33,650
scala types of world

00:45:20,869 --> 00:45:37,759
Thanks join us in New York drin right

00:45:33,650 --> 00:45:40,160
the session and this oh yeah do we still

00:45:37,759 --> 00:45:43,279
have questions yeah hey it looks like

00:45:40,160 --> 00:45:45,200
we're moving really fast to Scala OS and

00:45:43,279 --> 00:45:45,680
in which the cave you expect it to

00:45:45,200 --> 00:45:48,349
happen

00:45:45,680 --> 00:45:51,380
so we should we're moving to color the

00:45:48,349 --> 00:45:53,450
OS and like in which decay do you expect

00:45:51,380 --> 00:45:59,479
how soon you're expecting this to happen

00:45:53,450 --> 00:46:01,670
Oh deny effect I mean I'll put this into

00:45:59,479 --> 00:46:03,710
like our scripts as soon as I can I

00:46:01,670 --> 00:46:05,509
don't know and I'll make it available

00:46:03,710 --> 00:46:09,099
and then we can just see if it's working

00:46:05,509 --> 00:46:11,119
out for people or not we can do drivers

00:46:09,099 --> 00:46:14,299
sorry sweet yeah

00:46:11,119 --> 00:46:18,339
no drivers yeah Scala native maybe I

00:46:14,299 --> 00:46:18,339
know Russ look pretty good too though

00:46:20,640 --> 00:46:25,940
[Music]

00:46:22,450 --> 00:46:28,819
right it's it's the same idea basically

00:46:25,940 --> 00:46:31,789
so what how I did is that he implemented

00:46:28,819 --> 00:46:34,640
commands that are similar to the shell

00:46:31,789 --> 00:46:36,229
commands in Scala this just really

00:46:34,640 --> 00:46:38,269
literally hooks you up to the actual

00:46:36,229 --> 00:46:40,039
shell commands right so it's two

00:46:38,269 --> 00:46:41,719
approaches around the same thing this

00:46:40,039 --> 00:46:43,069
this one makes it like very nice to just

00:46:41,719 --> 00:46:44,509
make it extensible so you don't have to

00:46:43,069 --> 00:46:47,089
like rely on somebody having implemented

00:46:44,509 --> 00:46:49,339
already that's that's kind of Maya and

00:46:47,089 --> 00:46:51,049
in the end you just called so many shell

00:46:49,339 --> 00:46:56,380
commands for your like scripts and

00:46:51,049 --> 00:46:56,380
builds and CI and all this yeah

00:47:00,470 --> 00:47:05,400
yes you're not now your job escorts are

00:47:04,020 --> 00:47:07,080
depending on the environment too and

00:47:05,400 --> 00:47:09,150
with this thing you could actually go

00:47:07,080 --> 00:47:13,500
ahead and provide different variants for

00:47:09,150 --> 00:47:15,630
a bsd grep and a unix grep and the or

00:47:13,500 --> 00:47:24,810
linguist crap and then type check here

00:47:15,630 --> 00:47:26,130
maybe even abstract that out yeah no

00:47:24,810 --> 00:47:29,820
your Emma night off you also have type

00:47:26,130 --> 00:47:31,770
safety I mean the thing is the pipe

00:47:29,820 --> 00:47:33,330
piping stuff between these commands

00:47:31,770 --> 00:47:35,520
isn't exactly type save either because

00:47:33,330 --> 00:47:37,080
it's just string streams right and we're

00:47:35,520 --> 00:47:38,790
working with those but at least the

00:47:37,080 --> 00:47:41,760
flags you can set on these things

00:47:38,790 --> 00:47:43,410
don't ya don't randomly break and you

00:47:41,760 --> 00:47:44,670
can like make nice conditionals around

00:47:43,410 --> 00:47:47,160
them which you sometimes need and in

00:47:44,670 --> 00:47:49,890
scripts but Emma is also just Scala

00:47:47,160 --> 00:47:54,360
methods with similar signatures to the

00:47:49,890 --> 00:47:55,500
one I showed here so Emma night ops is

00:47:54,360 --> 00:47:56,220
platform independent because it is

00:47:55,500 --> 00:47:59,520
written in Scala

00:47:56,220 --> 00:48:03,510
but I mean only the only the stuff

00:47:59,520 --> 00:48:06,140
that's supported yeah so that's the

00:48:03,510 --> 00:48:08,670
trade-off I guess between the two now

00:48:06,140 --> 00:48:10,950
this was really cool I loved the demo um

00:48:08,670 --> 00:48:13,140
so I you know you started initially with

00:48:10,950 --> 00:48:15,690
a kind of build your own type safety and

00:48:13,140 --> 00:48:17,460
then the end was was a very very

00:48:15,690 --> 00:48:19,320
impressive demo but also there's a lot

00:48:17,460 --> 00:48:20,640
of magics and then that capture method

00:48:19,320 --> 00:48:21,960
right and that those are things we're

00:48:20,640 --> 00:48:23,700
showing some wondering is is the

00:48:21,960 --> 00:48:25,530
takeaway inspiration for me to be

00:48:23,700 --> 00:48:27,090
writing my own capture or inspirate or

00:48:25,530 --> 00:48:28,800
you trying to get users of your library

00:48:27,090 --> 00:48:33,140
actually let me let me just I'll just

00:48:28,800 --> 00:48:35,850
put the capture method it's communites I

00:48:33,140 --> 00:48:37,530
guess capture is actually if you want to

00:48:35,850 --> 00:48:39,210
like play with macros that's kind of a

00:48:37,530 --> 00:48:41,340
nice start because it doesn't touch a

00:48:39,210 --> 00:48:42,870
lot of macro features but does get you

00:48:41,340 --> 00:48:46,550
into the ast a little bit where you have

00:48:42,870 --> 00:48:46,550
to think about literals and think about

00:48:46,670 --> 00:48:53,010
some some names and and annotations and

00:48:50,310 --> 00:48:56,070
stuff like this but ideally we would

00:48:53,010 --> 00:48:57,720
just make this available once so people

00:48:56,070 --> 00:48:59,580
only have to think about this and get

00:48:57,720 --> 00:49:00,960
all the information out of it and you

00:48:59,580 --> 00:49:03,150
don't have to write your own macro and

00:49:00,960 --> 00:49:05,340
you don't really have to use a macro

00:49:03,150 --> 00:49:06,930
like the macro is just the ad-hoc thing

00:49:05,340 --> 00:49:08,760
that allows you to quickly typesafe the

00:49:06,930 --> 00:49:10,010
commands you have at hand because nobody

00:49:08,760 --> 00:49:12,410
has done it yet

00:49:10,010 --> 00:49:15,200
more sustainable right generating

00:49:12,410 --> 00:49:16,970
scholar code that just hard codes

00:49:15,200 --> 00:49:18,950
against our yeah raps against these

00:49:16,970 --> 00:49:22,720
interfaces based from the men pages I

00:49:18,950 --> 00:49:25,400
don't think the macro it gets good more

00:49:22,720 --> 00:49:26,630
approach like the more approach more in

00:49:25,400 --> 00:49:28,430
reach for things that aren't supported

00:49:26,630 --> 00:49:32,000
but the code generation with text is

00:49:28,430 --> 00:49:34,340
actually the better approach we just put

00:49:32,000 --> 00:49:35,920
those wrappers online in some

00:49:34,340 --> 00:49:39,290
repositories so we have like not only

00:49:35,920 --> 00:49:40,970
typescript wrappers against JavaScript

00:49:39,290 --> 00:49:47,780
libraries we have like scholar efforts

00:49:40,970 --> 00:49:48,580
against system processes cool thank you

00:49:47,780 --> 00:49:52,980
very much

00:49:48,580 --> 00:49:52,980

YouTube URL: https://www.youtube.com/watch?v=ox4IhIL6ojg


