Title: The Last 10 Percent   by Stefan Zeiger
Publication date: 2017-06-06
Playlist: Scala Days 2017
Description: 
	This video was recorded at Scala Days Chicago 2017
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract: 
Have you learned Scala and just created your first Scala library (or would you like to)? How do you continue when you are finished writing the code and it does what it is supposed to do? The only remaining obstacle is to get it into the hands of others, but the technical details involved in this can be overwhelming the first time. Where do you publish it, and how? What about tests, test infrastructure, documentation, licensing, versioning, releasing? How do you perform these steps manually? Can you automate them? In this session we will look at and perform live all the necessary steps to take your code from a bunch of Scala source files to an open source Scala project.
Captions: 
	00:00:01,139 --> 00:00:06,810
where is that okay great

00:00:03,610 --> 00:00:09,610
hello everyone my name is Stefan I'm a

00:00:06,810 --> 00:00:12,610
software engineer on the Scala compiler

00:00:09,610 --> 00:00:16,750
team enlightened and I'd like to talk

00:00:12,610 --> 00:00:19,090
about the last 10% today so this is

00:00:16,750 --> 00:00:21,610
named after the 9090 rule that you may

00:00:19,090 --> 00:00:23,590
have seen it says the first 90% of the

00:00:21,610 --> 00:00:26,200
code accounts for the first 90% of the

00:00:23,590 --> 00:00:28,119
development time the remaining 10% of

00:00:26,200 --> 00:00:31,660
the code accounts for the other 90% of

00:00:28,119 --> 00:00:33,250
the development time so I was looking

00:00:31,660 --> 00:00:36,579
through their schedule for this

00:00:33,250 --> 00:00:39,310
conference and I thought there's there's

00:00:36,579 --> 00:00:42,700
a corollary here 90% of the conference

00:00:39,310 --> 00:00:45,430
talks seem to be about the first 90% so

00:00:42,700 --> 00:00:47,470
what I'd like to do is to work on

00:00:45,430 --> 00:00:50,079
something here that is almost always

00:00:47,470 --> 00:00:52,989
part of the last 10% so we're going to

00:00:50,079 --> 00:00:54,969
take some Scala code and turn it into a

00:00:52,989 --> 00:00:56,530
library that is published as an open

00:00:54,969 --> 00:00:59,219
source library for everyone to use and

00:00:56,530 --> 00:01:01,899
to contribute to which is a thing that

00:00:59,219 --> 00:01:05,409
frequently takes a lot of time and seems

00:01:01,899 --> 00:01:08,350
to be kind of scary but with a bit of

00:01:05,409 --> 00:01:10,389
preparation that I did and by following

00:01:08,350 --> 00:01:14,679
the script and the manuals I think we

00:01:10,389 --> 00:01:16,990
can get it done in 45 minutes so the

00:01:14,679 --> 00:01:20,770
difficult part here is not really how to

00:01:16,990 --> 00:01:23,229
do it but what to do you know you want

00:01:20,770 --> 00:01:24,880
to publish it yet up ok but there are

00:01:23,229 --> 00:01:27,219
still a lot of decisions to be made and

00:01:24,880 --> 00:01:29,770
you have to know where to publish and a

00:01:27,219 --> 00:01:31,810
few more details but once you know the

00:01:29,770 --> 00:01:34,090
broad direction in which you can want to

00:01:31,810 --> 00:01:37,179
go you can just follow the instructions

00:01:34,090 --> 00:01:39,429
follow the path and you'll get the job

00:01:37,179 --> 00:01:41,619
done but just knowing these broad

00:01:39,429 --> 00:01:44,919
directions that's the difficult part

00:01:41,619 --> 00:01:46,659
here by necessity I have to take an

00:01:44,919 --> 00:01:50,109
opinionated approach you're often there

00:01:46,659 --> 00:01:53,079
are many ways to do something and you

00:01:50,109 --> 00:01:54,759
can have long discussions about things

00:01:53,079 --> 00:01:57,310
like which license to pick for your

00:01:54,759 --> 00:01:59,859
project I will not do this here I will

00:01:57,310 --> 00:02:05,200
just do something that works for me so

00:01:59,859 --> 00:02:06,909
that we can finish this in time so if we

00:02:05,200 --> 00:02:09,880
want to publish a library that's usable

00:02:06,909 --> 00:02:11,680
by others maybe we should first ask the

00:02:09,880 --> 00:02:14,110
questions where do the libraries that

00:02:11,680 --> 00:02:14,380
we're already using come from because we

00:02:14,110 --> 00:02:16,060
should

00:02:14,380 --> 00:02:18,970
probably publish ours in the same place

00:02:16,060 --> 00:02:21,100
so that others can use it so we don't

00:02:18,970 --> 00:02:23,170
live in the Dark Ages anymore where you

00:02:21,100 --> 00:02:25,300
download a jar file and drop that into

00:02:23,170 --> 00:02:27,760
some lip folder manually what you do is

00:02:25,300 --> 00:02:30,040
you tell your build tool like SPT in

00:02:27,760 --> 00:02:32,230
this case the coordinates of the library

00:02:30,040 --> 00:02:35,230
and these coordinates consists of a

00:02:32,230 --> 00:02:37,210
group ID an artifact ID and a version

00:02:35,230 --> 00:02:40,420
number and then we see this log here

00:02:37,210 --> 00:02:42,850
from SPT where it runs through all these

00:02:40,420 --> 00:02:45,010
libraries that it needs and it results

00:02:42,850 --> 00:02:47,650
them which means it finds and downloads

00:02:45,010 --> 00:02:49,480
the jars from somewhere so where is

00:02:47,650 --> 00:02:51,280
somewhere well the short answer is maven

00:02:49,480 --> 00:02:54,430
central that's the central repository

00:02:51,280 --> 00:02:56,740
for an open source java artifact

00:02:54,430 --> 00:02:59,380
it's run by a company called zona type

00:02:56,740 --> 00:03:04,360
who make a repository manager called

00:02:59,380 --> 00:03:06,130
Nexus and ok that's the downside of

00:03:04,360 --> 00:03:10,120
using a screen mode that I have to use

00:03:06,130 --> 00:03:14,770
here so if you ping me everyone will get

00:03:10,120 --> 00:03:17,050
the benefit so built there's another

00:03:14,770 --> 00:03:18,820
company by comparing called a frog and

00:03:17,050 --> 00:03:21,190
they make repository managers called

00:03:18,820 --> 00:03:23,200
artifactory and bin tray and they run

00:03:21,190 --> 00:03:25,980
something called J Center which is a bit

00:03:23,200 --> 00:03:29,190
newer than Megan central it a great

00:03:25,980 --> 00:03:32,500
repository including maven central and

00:03:29,190 --> 00:03:34,240
SPT uses that as well by default so if

00:03:32,500 --> 00:03:37,300
we can get our library into either maven

00:03:34,240 --> 00:03:40,570
central or j center we're good to go we

00:03:37,300 --> 00:03:43,330
also have our local repository the IB -

00:03:40,570 --> 00:03:46,690
slash local in the home folder where we

00:03:43,330 --> 00:03:48,430
can publish stuff for testing and of

00:03:46,690 --> 00:03:51,010
course all of this can be changed both

00:03:48,430 --> 00:03:53,080
at the level of your local SBT set up so

00:03:51,010 --> 00:03:54,790
you could run everything through a local

00:03:53,080 --> 00:03:56,709
proxy for example like I am doing on

00:03:54,790 --> 00:03:59,200
this machine or you can add new

00:03:56,709 --> 00:04:01,000
repositories in your project if you want

00:03:59,200 --> 00:04:05,530
to add a library that is not on maven

00:04:01,000 --> 00:04:07,930
central or enjoy on JSON R so let's take

00:04:05,530 --> 00:04:10,450
a quick detour to JavaScript I know it's

00:04:07,930 --> 00:04:12,670
always easy to make jokes about the

00:04:10,450 --> 00:04:16,900
JavaScript ecosystem but that doesn't

00:04:12,670 --> 00:04:19,270
stop me from actually doing it so there

00:04:16,900 --> 00:04:22,060
once was this tiny library in JavaScript

00:04:19,270 --> 00:04:24,400
called less pad and it did only one

00:04:22,060 --> 00:04:25,780
thing and it did it very well well apart

00:04:24,400 --> 00:04:26,320
from the performance but that's a

00:04:25,780 --> 00:04:27,680
different issue

00:04:26,320 --> 00:04:29,090
it left pads

00:04:27,680 --> 00:04:32,330
during with the number of spaces or

00:04:29,090 --> 00:04:34,910
other characters and this seems trivial

00:04:32,330 --> 00:04:37,430
but we're doing Scala here with the

00:04:34,910 --> 00:04:40,639
one-liner in JavaScript it's not that

00:04:37,430 --> 00:04:42,919
trivial and it's a useful function so

00:04:40,639 --> 00:04:46,639
lots of other JavaScript libraries came

00:04:42,919 --> 00:04:49,300
to depend on it and you can read the

00:04:46,639 --> 00:04:52,100
whole story by following this link here

00:04:49,300 --> 00:04:54,590
to cut it short the author deleted it

00:04:52,100 --> 00:04:57,410
from NPM which is JavaScript version of

00:04:54,590 --> 00:04:59,870
maybe central and yet this broke

00:04:57,410 --> 00:05:02,710
everything so on the right hand side you

00:04:59,870 --> 00:05:07,220
can see an accurate depiction of NPM and

00:05:02,710 --> 00:05:09,349
down here that's left bad so they

00:05:07,220 --> 00:05:11,900
eventually had to restore it against the

00:05:09,349 --> 00:05:14,110
wishes of the author just to keep the

00:05:11,900 --> 00:05:16,130
whole system from breaking down

00:05:14,110 --> 00:05:18,380
fortunately this cannot happen with

00:05:16,130 --> 00:05:20,139
maven central because once you publish

00:05:18,380 --> 00:05:22,039
something you cannot be needed anymore

00:05:20,139 --> 00:05:23,599
they I think they made certain

00:05:22,039 --> 00:05:25,400
exceptions like if you publish something

00:05:23,599 --> 00:05:27,590
for which you didn't have the rights to

00:05:25,400 --> 00:05:29,780
publish and before they get sued they'll

00:05:27,590 --> 00:05:31,389
delete it but normally once you publish

00:05:29,780 --> 00:05:34,760
it it's there forever

00:05:31,389 --> 00:05:36,740
so let's write left pad in jar in Scala

00:05:34,760 --> 00:05:38,840
so we can add it to maven central this

00:05:36,740 --> 00:05:42,280
will be the first 90 percent of our

00:05:38,840 --> 00:05:44,570
project for a very small value of 90

00:05:42,280 --> 00:05:46,940
fortunately for what we're doing it

00:05:44,570 --> 00:05:48,979
doesn't really matter if you have five

00:05:46,940 --> 00:05:51,229
lines of code in your library or five

00:05:48,979 --> 00:05:54,139
thousands all the rest that we need to

00:05:51,229 --> 00:05:57,740
do here is the same so let's use left

00:05:54,139 --> 00:06:00,380
pad okay first you have to set up a

00:05:57,740 --> 00:06:03,289
project now if you created a project

00:06:00,380 --> 00:06:06,740
with an IDE stop doing that you want a

00:06:03,289 --> 00:06:08,900
command line first build so there are

00:06:06,740 --> 00:06:10,340
two reasons for it one is other you want

00:06:08,900 --> 00:06:11,870
other people to contribute to your

00:06:10,340 --> 00:06:14,210
library that means they have to be able

00:06:11,870 --> 00:06:15,889
to build it and this is easy if they you

00:06:14,210 --> 00:06:18,020
don't have to give them instructions for

00:06:15,889 --> 00:06:20,000
setting up your favorite IDE in exactly

00:06:18,020 --> 00:06:21,650
the right way they should just be able

00:06:20,000 --> 00:06:24,349
to check out that source code and type

00:06:21,650 --> 00:06:25,909
SBT compile and make it compile and the

00:06:24,349 --> 00:06:27,530
second reason is we want to run it on

00:06:25,909 --> 00:06:29,659
some build server for continuous

00:06:27,530 --> 00:06:31,400
integration in a later step which also

00:06:29,659 --> 00:06:34,400
needs a command line so we start with

00:06:31,400 --> 00:06:36,320
SBT and if you want other people to work

00:06:34,400 --> 00:06:38,510
on your code do it you need to make sure

00:06:36,320 --> 00:06:41,260
that whatever stuff they break actually

00:06:38,510 --> 00:06:42,940
gets detected so you need test

00:06:41,260 --> 00:06:45,130
so we don't have any regression so add a

00:06:42,940 --> 00:06:47,260
test framework off your choice I use J

00:06:45,130 --> 00:06:50,530
unit here because mainly because I wrote

00:06:47,260 --> 00:06:55,570
the J unit integration for SBT so let's

00:06:50,530 --> 00:06:57,760
do these steps first we need basically

00:06:55,570 --> 00:06:59,680
four files for this there is a bunch of

00:06:57,760 --> 00:07:01,030
other files that got Auto created

00:06:59,680 --> 00:07:03,130
because of the way I set up the project

00:07:01,030 --> 00:07:04,720
and because they already compiled it the

00:07:03,130 --> 00:07:07,210
first thing you want to do is under

00:07:04,720 --> 00:07:09,880
project create a build up properties

00:07:07,210 --> 00:07:12,520
which nails down the SBT version you

00:07:09,880 --> 00:07:14,260
want reproducible builds you don't want

00:07:12,520 --> 00:07:15,910
to build to depend on whatever version

00:07:14,260 --> 00:07:18,340
of the SBT launches somebody has

00:07:15,910 --> 00:07:21,520
installed so nail on the SBT version

00:07:18,340 --> 00:07:24,670
we're using a thirteen thirteen here the

00:07:21,520 --> 00:07:27,250
second step is inbuilt SBT nail down the

00:07:24,670 --> 00:07:29,260
scalar version you want Scala to twelve

00:07:27,250 --> 00:07:30,760
one and every time you upgrade this

00:07:29,260 --> 00:07:32,740
needs to be a conscious decision you

00:07:30,760 --> 00:07:36,700
don't want it to depend randomly on the

00:07:32,740 --> 00:07:38,170
environment for testing we use J unit

00:07:36,700 --> 00:07:42,300
interface so I'm adding a library

00:07:38,170 --> 00:07:45,070
dependency here and I scoped it to test

00:07:42,300 --> 00:07:46,810
this becomes important when we publish

00:07:45,070 --> 00:07:49,300
the library you don't want your actual

00:07:46,810 --> 00:07:51,550
library code to depend on this test

00:07:49,300 --> 00:07:55,840
interface and on genuine but only your

00:07:51,550 --> 00:07:57,760
test classes so our actual

00:07:55,840 --> 00:08:01,900
implementation is here it's under source

00:07:57,760 --> 00:08:05,200
main Scala and I wrote a unit test which

00:08:01,900 --> 00:08:09,430
is under source tests Scala so let's go

00:08:05,200 --> 00:08:12,310
to SBT and run the test and it's

00:08:09,430 --> 00:08:18,690
compiling and it should find one test

00:08:12,310 --> 00:08:18,690
and run it there we go past one okay so

00:08:20,970 --> 00:08:27,610
now we can think about sharing the

00:08:24,640 --> 00:08:30,880
project on github we need two more

00:08:27,610 --> 00:08:34,990
things for that the first is a readme

00:08:30,880 --> 00:08:36,550
file and the second one a license so I'm

00:08:34,990 --> 00:08:39,400
not typing this stuff and I'm just

00:08:36,550 --> 00:08:41,590
switching to a different Committee so I

00:08:39,400 --> 00:08:43,090
don't make any typos but I'll walk you

00:08:41,590 --> 00:08:46,120
through all of the changes I'm making

00:08:43,090 --> 00:08:48,670
this there's nothing hidden so here's a

00:08:46,120 --> 00:08:52,330
readme and we make it a readme tmdb

00:08:48,670 --> 00:08:55,250
writing in markdown so you can do some

00:08:52,330 --> 00:08:58,430
nice formatting and don't just think of

00:08:55,250 --> 00:09:03,460
they read me it can be much more for

00:08:58,430 --> 00:09:05,840
example if you look at typesafe config

00:09:03,460 --> 00:09:07,670
this is the github page four types is

00:09:05,840 --> 00:09:09,830
configured I'm currently scrolling

00:09:07,670 --> 00:09:11,960
through the readme file so you don't

00:09:09,830 --> 00:09:13,430
need need to set up some homepage for

00:09:11,960 --> 00:09:15,590
your project you have your github page

00:09:13,430 --> 00:09:17,240
and down here is the readme and all the

00:09:15,590 --> 00:09:19,160
rest that's the whole documentation it's

00:09:17,240 --> 00:09:21,140
all in the readme so unless you have a

00:09:19,160 --> 00:09:24,460
really big library that's probably all

00:09:21,140 --> 00:09:24,460
you're going to need for documentation

00:09:24,610 --> 00:09:30,650
so the other thing is a license you want

00:09:27,680 --> 00:09:32,330
a committed open-source license the most

00:09:30,650 --> 00:09:34,850
important thing is that you have a

00:09:32,330 --> 00:09:36,730
license you have a file called license

00:09:34,850 --> 00:09:39,170
of the put a license text in it

00:09:36,730 --> 00:09:40,910
otherwise nobody in the right mind will

00:09:39,170 --> 00:09:43,580
ever use your library because they don't

00:09:40,910 --> 00:09:45,950
know what they're getting into so we use

00:09:43,580 --> 00:09:47,480
Apache like the Apache license for all

00:09:45,950 --> 00:09:50,720
our open-source project so that's what

00:09:47,480 --> 00:09:52,730
I'm doing here you can read more about

00:09:50,720 --> 00:09:55,610
the different kinds of licenses here if

00:09:52,730 --> 00:09:58,130
you want to go into the details so now

00:09:55,610 --> 00:10:00,339
we set up this project on github so I'm

00:09:58,130 --> 00:10:02,930
going to my repositories page here and

00:10:00,339 --> 00:10:06,800
I'm creating a new one called les pad

00:10:02,930 --> 00:10:09,410
and it tells me the steps I need to do I

00:10:06,800 --> 00:10:12,080
already have my git repo initialized

00:10:09,410 --> 00:10:15,190
locally so what I'm doing is this I'm

00:10:12,080 --> 00:10:15,190
just pushing it

00:10:21,170 --> 00:10:26,100
okay there's a project on github you

00:10:24,120 --> 00:10:30,090
have your issues you have your pull

00:10:26,100 --> 00:10:31,980
requests you also get a wiki but be

00:10:30,090 --> 00:10:35,130
careful about using that for

00:10:31,980 --> 00:10:37,020
documentation I'd rather not use it the

00:10:35,130 --> 00:10:38,910
problem is that the stuff you put into

00:10:37,020 --> 00:10:41,430
the wiki is not versioned together with

00:10:38,910 --> 00:10:43,350
your library so people never know what

00:10:41,430 --> 00:10:46,740
versions some wiki page was written for

00:10:43,350 --> 00:10:49,230
I'd rather keep things in the readme for

00:10:46,740 --> 00:10:52,410
a simple project or usually a

00:10:49,230 --> 00:10:54,000
documentation tool like or Nate if you

00:10:52,410 --> 00:10:56,700
need something bigger I'm just using

00:10:54,000 --> 00:11:00,540
this as an opportunity to advertise for

00:10:56,700 --> 00:11:05,070
or Nate because I wrote it but a readme

00:11:00,540 --> 00:11:07,050
is fine here so and we have it on github

00:11:05,070 --> 00:11:09,480
so now we can publish it to Main and

00:11:07,050 --> 00:11:11,100
central which is probably the most

00:11:09,480 --> 00:11:14,340
dreaded of all the steps we're doing

00:11:11,100 --> 00:11:16,920
here fortunately there's very good

00:11:14,340 --> 00:11:18,810
documentation for this these days so

00:11:16,920 --> 00:11:21,660
we're going to use the documentation in

00:11:18,810 --> 00:11:25,500
the SBT manual about using sona type and

00:11:21,660 --> 00:11:28,170
also another page about SBT PGP which is

00:11:25,500 --> 00:11:28,530
a plugin that we need we need three

00:11:28,170 --> 00:11:32,210
things

00:11:28,530 --> 00:11:34,890
coordinates signing and metadata so

00:11:32,210 --> 00:11:39,200
let's start with the coordinates maybe

00:11:34,890 --> 00:11:39,200
let me switch to the right commit here

00:11:42,890 --> 00:11:48,960
okay here's a builder SBT we need the

00:11:46,650 --> 00:11:52,380
group ID name and version number in our

00:11:48,960 --> 00:11:54,390
project for the group ID you need some

00:11:52,380 --> 00:11:56,730
reverse domain name like a package name

00:11:54,390 --> 00:11:58,350
that you own so if you have your own

00:11:56,730 --> 00:12:00,450
domain you can use that for publishing

00:11:58,350 --> 00:12:01,980
io novo code comm so that's what I'm

00:12:00,450 --> 00:12:04,680
using if you don't have your own domain

00:12:01,980 --> 00:12:13,260
you can use your github account so I

00:12:04,680 --> 00:12:15,480
would use conduct github as I go then we

00:12:13,260 --> 00:12:17,730
have our name left pad and a version

00:12:15,480 --> 00:12:20,280
number I would recommend to always set

00:12:17,730 --> 00:12:21,540
this to a snapshot version in every

00:12:20,280 --> 00:12:23,940
commit that you check into your

00:12:21,540 --> 00:12:26,100
repository otherwise somebody could

00:12:23,940 --> 00:12:28,320
check this out make modifications and

00:12:26,100 --> 00:12:30,660
accidentally publish a modified version

00:12:28,320 --> 00:12:32,790
under anon snapshot version but to his

00:12:30,660 --> 00:12:35,040
local repository and

00:12:32,790 --> 00:12:40,380
want you to strange compatibility

00:12:35,040 --> 00:12:44,070
problems so the next thing we need to do

00:12:40,380 --> 00:12:47,820
is signing we need a public key

00:12:44,070 --> 00:12:50,040
public/private key pair a PGP key and we

00:12:47,820 --> 00:12:52,710
need to use it to sign all the artifacts

00:12:50,040 --> 00:12:54,330
like jar files and pump files and other

00:12:52,710 --> 00:12:56,040
stuff that we published in Meghan

00:12:54,330 --> 00:13:00,720
central because maven central requires

00:12:56,040 --> 00:13:02,910
this so there's a plug-in for that so we

00:13:00,720 --> 00:13:07,680
added it in plugins that let's BTW we

00:13:02,910 --> 00:13:09,500
are at this SBT PGP plugin and first

00:13:07,680 --> 00:13:12,090
let's go to the documentation so on

00:13:09,500 --> 00:13:14,160
everything I'm doing is it is explained

00:13:12,090 --> 00:13:16,050
on this page so you just have to follow

00:13:14,160 --> 00:13:18,510
this page and just summing up here I'm

00:13:16,050 --> 00:13:21,680
really following the documentation or

00:13:18,510 --> 00:13:23,910
maybe before we get into signing yet

00:13:21,680 --> 00:13:27,090
here's an important part that you need

00:13:23,910 --> 00:13:30,750
to do now that you have your domain name

00:13:27,090 --> 00:13:34,590
your pure group ID you need to create an

00:13:30,750 --> 00:13:37,620
account on the SONA type JIRA tracker

00:13:34,590 --> 00:13:39,510
and you need to open a ticket there for

00:13:37,620 --> 00:13:41,250
the first time you publish under this

00:13:39,510 --> 00:13:42,870
group ID because they have to manually

00:13:41,250 --> 00:13:47,070
approve you that you're allowed to

00:13:42,870 --> 00:13:49,020
publish to this group ID so um this is

00:13:47,070 --> 00:13:52,590
some something that can take between

00:13:49,020 --> 00:13:57,930
some few minutes and a few days so do

00:13:52,590 --> 00:14:00,810
this early I'm using my combat novel

00:13:57,930 --> 00:14:04,230
code name here because I already have

00:14:00,810 --> 00:14:07,590
permission to publish to this so now now

00:14:04,230 --> 00:14:11,040
we have to look into signing let's

00:14:07,590 --> 00:14:12,630
assume you don't have any PGP key yet so

00:14:11,040 --> 00:14:18,090
we're following the documentation and we

00:14:12,630 --> 00:14:20,010
use PGP CMD gen key in SBT you don't

00:14:18,090 --> 00:14:22,830
have to install PGP or anything for that

00:14:20,010 --> 00:14:31,350
it's all done by the plug-in and it

00:14:22,830 --> 00:14:34,830
tells us we have to set this okay let's

00:14:31,350 --> 00:14:38,100
call it test user test at example.com

00:14:34,830 --> 00:14:40,380
and the passphrase is one two three four

00:14:38,100 --> 00:14:42,620
five because I have the same combination

00:14:40,380 --> 00:14:42,620
on my luggage

00:14:43,790 --> 00:14:51,400
okay we created a key what I'm doing for

00:14:48,740 --> 00:14:54,560
the next few steps here is to actually

00:14:51,400 --> 00:15:04,370
reactivate my my main key yet this

00:14:54,560 --> 00:15:06,110
shouldn't be there so but we will use

00:15:04,370 --> 00:15:08,260
the key that I just created later I'm

00:15:06,110 --> 00:15:11,150
just switching back to a different one

00:15:08,260 --> 00:15:13,100
for the reason that this is already

00:15:11,150 --> 00:15:15,470
published on a key server because that's

00:15:13,100 --> 00:15:17,540
the next step we need to do here so go

00:15:15,470 --> 00:15:20,420
scrolling further down in the manual it

00:15:17,540 --> 00:15:23,570
tells us that we need to upload the key

00:15:20,420 --> 00:15:25,970
that we created to a key server we can

00:15:23,570 --> 00:15:28,910
already sign our artifacts with this key

00:15:25,970 --> 00:15:31,040
but signing is useless if nobody can

00:15:28,910 --> 00:15:32,690
verify that the signature is correct so

00:15:31,040 --> 00:15:34,160
the public key needs to be on some key

00:15:32,690 --> 00:15:36,710
server so you have to run this command

00:15:34,160 --> 00:15:38,480
here that's why I'm switching back to a

00:15:36,710 --> 00:15:44,570
different key that is already published

00:15:38,480 --> 00:15:46,220
I don't want to publish this test key so

00:15:44,570 --> 00:15:48,620
and then continuing in this

00:15:46,220 --> 00:15:50,450
documentation it gives us a lot of

00:15:48,620 --> 00:15:53,030
boilerplate we have to copy the first

00:15:50,450 --> 00:15:55,100
one is the SONA type dot SBT file when

00:15:53,030 --> 00:15:57,380
you created this account on JIRA for

00:15:55,100 --> 00:16:00,310
photo so notepad tab ticket you got a

00:15:57,380 --> 00:16:03,500
username and password so you put this

00:16:00,310 --> 00:16:04,850
into your Sona type that SBT file you

00:16:03,500 --> 00:16:06,830
have to trust me that I already have

00:16:04,850 --> 00:16:08,660
this file I obviously cannot show it to

00:16:06,830 --> 00:16:13,970
you because it contains my real text

00:16:08,660 --> 00:16:18,170
password and then we have these few

00:16:13,970 --> 00:16:25,520
blocks here and we just copy them to our

00:16:18,170 --> 00:16:27,380
build script to build our SBT so this

00:16:25,520 --> 00:16:28,850
one just copy it license of course you

00:16:27,380 --> 00:16:31,490
have to change the license to the

00:16:28,850 --> 00:16:34,790
correct value and the home page is just

00:16:31,490 --> 00:16:38,720
the github page also get help for the

00:16:34,790 --> 00:16:41,840
SCM info and my email address and home

00:16:38,720 --> 00:16:44,390
page and complex million style and

00:16:41,840 --> 00:16:46,850
publish artifacting test and there's

00:16:44,390 --> 00:16:49,220
another setting called publish two which

00:16:46,850 --> 00:16:52,910
tells SBT where to push these artifacts

00:16:49,220 --> 00:16:56,540
to which URL and this is the stuff I

00:16:52,910 --> 00:16:57,380
copied from the SBT documentation so for

00:16:56,540 --> 00:16:59,690
releases

00:16:57,380 --> 00:17:01,640
we want to publish it to this address

00:16:59,690 --> 00:17:03,650
here and there's a different one for

00:17:01,640 --> 00:17:05,930
snapshots now I would recommend that you

00:17:03,650 --> 00:17:08,990
never publish snapshots to anything but

00:17:05,930 --> 00:17:10,940
your local repository snapshots are not

00:17:08,990 --> 00:17:14,180
reproducible because you can overwrite

00:17:10,940 --> 00:17:16,250
them so you can never be sure which

00:17:14,180 --> 00:17:18,440
version you get when you ask for a

00:17:16,250 --> 00:17:20,150
snapshot it's okay for local testing

00:17:18,440 --> 00:17:22,250
like I publish a snapshot to my local

00:17:20,150 --> 00:17:24,680
repository and then immediately use it

00:17:22,250 --> 00:17:26,060
to test another project but never

00:17:24,680 --> 00:17:28,430
publish them anywhere else

00:17:26,060 --> 00:17:33,160
just put your get cha or time stamp or

00:17:28,430 --> 00:17:37,870
whatever into a proper version number so

00:17:33,160 --> 00:17:42,200
yeah that should be pretty much it and

00:17:37,870 --> 00:17:44,420
now we can say publish signed well maybe

00:17:42,200 --> 00:17:46,040
you start with publish to publish local

00:17:44,420 --> 00:17:49,100
side to make sure that our signatures

00:17:46,040 --> 00:17:51,250
work publish local signed because we're

00:17:49,100 --> 00:17:57,160
publishing the snapshot version locally

00:17:51,250 --> 00:18:03,860
and during my pass price No oh wait I

00:17:57,160 --> 00:18:07,280
think I would have to reload first there

00:18:03,860 --> 00:18:08,990
we go okay I successfully published in

00:18:07,280 --> 00:18:10,640
my local repository a science an

00:18:08,990 --> 00:18:14,350
absolute version now we want to publish

00:18:10,640 --> 00:18:14,350
to yes there's a question

00:18:24,190 --> 00:18:30,490
I know that's for for maintenance not

00:18:26,860 --> 00:18:33,310
really maven central it's on its donor

00:18:30,490 --> 00:18:35,290
type system so they have so no type runs

00:18:33,310 --> 00:18:42,790
a snapshot repository in parallel to

00:18:35,290 --> 00:18:45,010
maven central this is a no-no so I would

00:18:42,790 --> 00:18:48,490
advise to do something like this just

00:18:45,010 --> 00:18:52,090
don't use this one so only do it for

00:18:48,490 --> 00:18:55,090
local repositories so now we can publish

00:18:52,090 --> 00:18:58,050
a real version to Zona type so I have to

00:18:55,090 --> 00:19:02,410
set the version number to an on snapshot

00:18:58,050 --> 00:19:08,770
so we're going to publish 0.1 and now we

00:19:02,410 --> 00:19:12,070
can publish publish signed and it can

00:19:08,770 --> 00:19:19,150
take a few seconds and the meantime we

00:19:12,070 --> 00:19:21,040
will log into nexus using the accounts

00:19:19,150 --> 00:19:26,080
you got earlier when you signed up for

00:19:21,040 --> 00:19:30,520
JIRA are we doing yes we're done so go

00:19:26,080 --> 00:19:30,880
to staging repositories there at the

00:19:30,520 --> 00:19:33,520
bottom

00:19:30,880 --> 00:19:37,750
that's my package and if I go into

00:19:33,520 --> 00:19:41,470
content I can see all the artifacts that

00:19:37,750 --> 00:19:43,540
are just published down here so there's

00:19:41,470 --> 00:19:48,730
a palm band or jar and lots of signature

00:19:43,540 --> 00:19:51,040
files and now I select close so that's

00:19:48,730 --> 00:19:52,900
like a transaction when you publish the

00:19:51,040 --> 00:19:55,150
first file it automatically creates a

00:19:52,900 --> 00:19:56,800
new staging repository for you and then

00:19:55,150 --> 00:19:58,600
eventually you have to close it and at

00:19:56,800 --> 00:20:00,880
this point it runs its consistency

00:19:58,600 --> 00:20:03,340
checks it will verify the signature it

00:20:00,880 --> 00:20:06,220
will verify that all the metadata like

00:20:03,340 --> 00:20:08,740
your user ID and the semm info is there

00:20:06,220 --> 00:20:10,540
and that a proper open source license

00:20:08,740 --> 00:20:13,380
was selected and so on

00:20:10,540 --> 00:20:16,360
and if there are any problems it will

00:20:13,380 --> 00:20:19,690
show up in the summary and after refresh

00:20:16,360 --> 00:20:22,750
here okay so you can see it says closed

00:20:19,690 --> 00:20:25,270
and last operation completed

00:20:22,750 --> 00:20:27,400
successfully if I had used that new key

00:20:25,270 --> 00:20:29,760
that we just created and didn't publish

00:20:27,400 --> 00:20:33,070
for example then this would have failed

00:20:29,760 --> 00:20:34,930
so all we have to done is really going

00:20:33,070 --> 00:20:36,010
to release and click confirm if I click

00:20:34,930 --> 00:20:37,570
confirm here this

00:20:36,010 --> 00:20:40,180
library ends up on Maidan central and

00:20:37,570 --> 00:20:44,670
it's there forever I'm not going to do

00:20:40,180 --> 00:20:46,450
that I'll cancel instead I will drop it

00:20:44,670 --> 00:20:48,520
that's what you do when you think

00:20:46,450 --> 00:20:57,520
something went wrong you can always drop

00:20:48,520 --> 00:21:00,280
it and I frequently forget this final

00:20:57,520 --> 00:21:01,750
step that's why we want to automate it

00:21:00,280 --> 00:21:03,760
eventually wherever you publish

00:21:01,750 --> 00:21:09,550
something you want to tag it with a

00:21:03,760 --> 00:21:13,810
version tag so let's do get tagged - a -

00:21:09,550 --> 00:21:15,250
M call it release zero point one V zero

00:21:13,810 --> 00:21:17,290
point one always use something we'll

00:21:15,250 --> 00:21:19,060
start with a lowercase B for the version

00:21:17,290 --> 00:21:24,760
numbers and we'll see in a moment why

00:21:19,060 --> 00:21:31,240
and get push origin V zero part one push

00:21:24,760 --> 00:21:36,220
it to github so um where's the project

00:21:31,240 --> 00:21:39,180
here I reload this there's a version tag

00:21:36,220 --> 00:21:41,710
and you can see it says one release

00:21:39,180 --> 00:21:43,930
because github detects that this V

00:21:41,710 --> 00:21:49,960
version number is a version tag so it

00:21:43,930 --> 00:21:51,760
shows up as a release on github okay

00:21:49,960 --> 00:21:56,620
we've successfully published in main and

00:21:51,760 --> 00:21:58,750
central so let's add continuous

00:21:56,620 --> 00:22:00,790
integration or pull request validation

00:21:58,750 --> 00:22:02,410
if you want other people to submit pull

00:22:00,790 --> 00:22:03,820
requests you want them to be tested

00:22:02,410 --> 00:22:06,190
automatically you don't want to have to

00:22:03,820 --> 00:22:10,690
check out their code and run your tests

00:22:06,190 --> 00:22:16,360
locally so we can use our Travis CI for

00:22:10,690 --> 00:22:19,720
that so let's go to Travis it's here

00:22:16,360 --> 00:22:21,550
they have a getting started guide and by

00:22:19,720 --> 00:22:23,560
the way all these pages I'm showing you

00:22:21,550 --> 00:22:25,210
here in the web browser all the links

00:22:23,560 --> 00:22:28,780
are on the slide so you don't have to

00:22:25,210 --> 00:22:30,070
write anything down there's a getting

00:22:28,780 --> 00:22:33,270
started guide there specific

00:22:30,070 --> 00:22:35,920
instructions do you have for Scala but

00:22:33,270 --> 00:22:43,110
everything all we really need to do is

00:22:35,920 --> 00:22:43,110
one small file right

00:22:44,160 --> 00:22:51,700
called dot Travis dot yml that's all you

00:22:48,610 --> 00:22:56,110
have to do languages scholar we have to

00:22:51,700 --> 00:22:58,330
select a JDK and a script to run so this

00:22:56,110 --> 00:23:00,250
is just SPT test so whenever somebody

00:22:58,330 --> 00:23:01,450
opens the full request or you push a

00:23:00,250 --> 00:23:05,580
commit to github

00:23:01,450 --> 00:23:18,669
it will run this command SPT test on it

00:23:05,580 --> 00:23:23,590
so let's push this okay maybe I push too

00:23:18,669 --> 00:23:26,350
early wait first we need to enable this

00:23:23,590 --> 00:23:30,360
full repository so you have to sign into

00:23:26,350 --> 00:23:32,890
Travis CI with your github account and

00:23:30,360 --> 00:23:35,590
then you see all your repositories here

00:23:32,890 --> 00:23:41,260
there's left that and I enable it for

00:23:35,590 --> 00:23:44,409
left part and now I should see a built

00:23:41,260 --> 00:23:47,049
oh that's because I was running this

00:23:44,409 --> 00:23:55,270
earlier somehow it still remembered my

00:23:47,049 --> 00:23:59,400
repository this shouldn't be there maybe

00:23:55,270 --> 00:23:59,400
I can trick it into running you know

00:24:00,360 --> 00:24:04,320
just make a small change

00:24:06,220 --> 00:24:13,409
oh yeah

00:24:22,200 --> 00:24:25,399
and there we go

00:24:29,130 --> 00:24:35,230
now this really was my old repository

00:24:31,900 --> 00:24:40,480
okay now I have to synchronize the

00:24:35,230 --> 00:24:42,490
account here I did this at least

00:24:40,480 --> 00:24:46,210
half-a-dozen time it never failed in

00:24:42,490 --> 00:24:50,620
this way so it's sinking my accounts

00:24:46,210 --> 00:24:56,710
from github okay here's the new left pad

00:24:50,620 --> 00:25:00,390
that I just created and you should see

00:24:56,710 --> 00:25:00,390
both history and Oh both yet

00:25:13,910 --> 00:25:21,590
let's go back to the other commit and

00:25:17,320 --> 00:25:24,080
now this should trigger it built okay

00:25:21,590 --> 00:25:28,310
there we go now I push the new commit

00:25:24,080 --> 00:25:32,330
and it triggers a build and at some

00:25:28,310 --> 00:25:39,050
point this will start running in the

00:25:32,330 --> 00:25:41,570
meantime yeah maybe one one part explain

00:25:39,050 --> 00:25:44,060
if you go to the Travis documentation

00:25:41,570 --> 00:25:46,880
for Scala build it will explain

00:25:44,060 --> 00:25:48,890
something about a build matrix so you

00:25:46,880 --> 00:25:50,540
can cross those color project against

00:25:48,890 --> 00:25:52,910
different scalar versions and the way

00:25:50,540 --> 00:25:55,640
they explain this for Travis is that you

00:25:52,910 --> 00:25:59,180
put your Scala versions into the Travis

00:25:55,640 --> 00:26:01,130
dot yml file and then Travis will run

00:25:59,180 --> 00:26:03,380
you built separately against these color

00:26:01,130 --> 00:26:05,840
versions instead of using SBT to cross

00:26:03,380 --> 00:26:08,270
belt I would recommend not doing this

00:26:05,840 --> 00:26:11,270
because I like to keep my versions in

00:26:08,270 --> 00:26:13,700
the SBT script in one place and not put

00:26:11,270 --> 00:26:18,130
them into the Travis to Lionel so that's

00:26:13,700 --> 00:26:20,540
why I changed this to just run SBT built

00:26:18,130 --> 00:26:24,440
trav a little bit slow to do it's

00:26:20,540 --> 00:26:33,500
actually building okay it's building yes

00:26:24,440 --> 00:26:39,650
Dale so

00:26:33,500 --> 00:26:43,100
oh okay so okay so I fail Justin for me

00:26:39,650 --> 00:26:45,980
there's an SPT plug-in to get in SPT to

00:26:43,100 --> 00:26:47,510
get the version from the yml file so you

00:26:45,980 --> 00:26:50,360
can do it the other way around too if

00:26:47,510 --> 00:26:52,549
you want again this is an opinionated

00:26:50,360 --> 00:26:56,059
approach so there are different ways to

00:26:52,549 --> 00:26:58,520
do it and this is still you know it's

00:26:56,059 --> 00:27:01,549
building we can move on while it's

00:26:58,520 --> 00:27:02,780
building and get back to that so let's

00:27:01,549 --> 00:27:04,580
make things a bit more complicated

00:27:02,780 --> 00:27:07,429
usually you don't have a single project

00:27:04,580 --> 00:27:09,740
at some point you always want a multi

00:27:07,429 --> 00:27:12,559
project dot because for example you're

00:27:09,740 --> 00:27:14,870
adding an SPT plug-in who wouldn't want

00:27:12,559 --> 00:27:17,120
an SPG plug-in that offers a left pad

00:27:14,870 --> 00:27:21,020
command and SBT right so that's what

00:27:17,120 --> 00:27:23,150
we're going to add now you may find want

00:27:21,020 --> 00:27:24,620
to fight the urge to make it a multi

00:27:23,150 --> 00:27:26,419
project built because you think it's

00:27:24,620 --> 00:27:28,750
complicated it used to be more

00:27:26,419 --> 00:27:31,730
complicated in the past nowadays it's

00:27:28,750 --> 00:27:34,159
almost straightforward SBT so don't

00:27:31,730 --> 00:27:36,760
don't worry sis switching to a multi

00:27:34,159 --> 00:27:38,900
project build don't try using

00:27:36,760 --> 00:27:41,090
configurations instead of project or

00:27:38,900 --> 00:27:42,679
something just switch to a multi project

00:27:41,090 --> 00:27:51,710
well if you need it do it sooner rather

00:27:42,679 --> 00:27:54,830
than later so we're going to do that so

00:27:51,710 --> 00:27:57,080
what I did now is to move my source

00:27:54,830 --> 00:27:58,880
folder into another folder called core

00:27:57,080 --> 00:27:59,780
so in all we have core source main and

00:27:58,880 --> 00:28:04,039
core sauce test

00:27:59,780 --> 00:28:09,039
I also added this plug-in folder with a

00:28:04,039 --> 00:28:12,230
source mail and there's the SBT plug-in

00:28:09,039 --> 00:28:14,630
so it's here this is not about writing

00:28:12,230 --> 00:28:18,260
SBT plugins just stay in this room after

00:28:14,630 --> 00:28:22,159
my talk and you can watch Justin explain

00:28:18,260 --> 00:28:28,390
how to write SBT plugins instead we're

00:28:22,159 --> 00:28:30,350
going to look at the build file again so

00:28:28,390 --> 00:28:33,080
okay

00:28:30,350 --> 00:28:35,809
so now we have to project in in SPT

00:28:33,080 --> 00:28:41,149
actually we're three projects we have

00:28:35,809 --> 00:28:43,340
the core project which is here we have

00:28:41,149 --> 00:28:46,340
the plug-in project and we have a root

00:28:43,340 --> 00:28:47,779
project and this would project aggregate

00:28:46,340 --> 00:28:49,580
score and plugging SPT will

00:28:47,779 --> 00:28:51,769
automatically create a root project for

00:28:49,580 --> 00:28:54,529
you but if you want more control you can

00:28:51,769 --> 00:28:56,659
write it down explicitly and then for

00:28:54,529 --> 00:28:58,909
examples they aggregate so by default

00:28:56,659 --> 00:29:01,130
SBT drops you into this root project and

00:28:58,909 --> 00:29:02,809
if I type compile it doesn't know what

00:29:01,130 --> 00:29:05,210
to do but if I aggregate core and

00:29:02,809 --> 00:29:06,769
plug-in then if I type compiled in root

00:29:05,210 --> 00:29:09,139
project it will automatically run

00:29:06,769 --> 00:29:11,080
compiled in my core and plug-in project

00:29:09,139 --> 00:29:13,850
and that's just what I want

00:29:11,080 --> 00:29:17,539
we have lots of common settings that

00:29:13,850 --> 00:29:19,070
apply to all these projects and this is

00:29:17,539 --> 00:29:21,080
where it gets a bit awkward I have to

00:29:19,070 --> 00:29:23,120
scope all of these to this build

00:29:21,080 --> 00:29:26,659
otherwise the only apply to the wood

00:29:23,120 --> 00:29:29,539
project so I'm doing it explicitly here

00:29:26,659 --> 00:29:31,669
but there's a shortcut you can use this

00:29:29,539 --> 00:29:33,529
is this is just all the data we had

00:29:31,669 --> 00:29:36,139
before just compacted it updated but

00:29:33,529 --> 00:29:37,789
it's exactly the same I just scoped it

00:29:36,139 --> 00:29:42,230
to in this build because it applies to

00:29:37,789 --> 00:29:45,769
all our project the only thing we do

00:29:42,230 --> 00:29:48,980
differently is basically the name of

00:29:45,769 --> 00:29:51,080
course the test dependency for core for

00:29:48,980 --> 00:29:53,750
the plug-in project we picked the name

00:29:51,080 --> 00:29:57,230
SBT - Lester that's a common convention

00:29:53,750 --> 00:29:59,389
we tell it an SVT plug-in and yeah

00:29:57,230 --> 00:30:02,090
here's a problem SBT plugins all have to

00:29:59,389 --> 00:30:04,220
use scholar 210 we use scholar 212

00:30:02,090 --> 00:30:06,529
before and I want to continue using

00:30:04,220 --> 00:30:09,620
Scala 212 but we need to cross build now

00:30:06,529 --> 00:30:12,799
so the plug-in project has to be cross

00:30:09,620 --> 00:30:15,049
build for scholar 210 or build only for

00:30:12,799 --> 00:30:17,690
scholar 210 and now the core project has

00:30:15,049 --> 00:30:21,200
to be crossbows for Scala 210 and Scala

00:30:17,690 --> 00:30:23,470
212 this looks easy enough and actually

00:30:21,200 --> 00:30:25,370
in a single project build it would be

00:30:23,470 --> 00:30:28,340
unfortunately that's not how cross

00:30:25,370 --> 00:30:30,169
building and SBT works because it by

00:30:28,340 --> 00:30:32,120
default it would only pick the scholar

00:30:30,169 --> 00:30:34,309
versions from the root project and try

00:30:32,120 --> 00:30:36,799
to apply them to everything and that

00:30:34,309 --> 00:30:39,260
fails because we cannot build the SBT

00:30:36,799 --> 00:30:41,179
plug-in on 212 fortunately there is an

00:30:39,260 --> 00:30:43,520
SPT plugin for everything including this

00:30:41,179 --> 00:30:49,370
and it's called SBT

00:30:43,520 --> 00:30:52,400
those so I'm adding that here and I'm in

00:30:49,370 --> 00:30:55,070
able Ingush cross per project plug-in on

00:30:52,400 --> 00:30:58,130
route that comes from SPG does this

00:30:55,070 --> 00:31:00,830
override SPG's plus notation for cross

00:30:58,130 --> 00:31:03,920
building to do exactly what I want which

00:31:00,830 --> 00:31:09,190
is cross build with the version in each

00:31:03,920 --> 00:31:17,560
project individually so let's try this

00:31:09,190 --> 00:31:17,560
reload and plus test

00:31:20,859 --> 00:31:27,100
okay this worked we got our cross build

00:31:29,919 --> 00:31:35,899
now we have to publish it you can

00:31:33,470 --> 00:31:38,029
theoretically publish an SBT plug-in to

00:31:35,899 --> 00:31:39,950
maven central they were historical

00:31:38,029 --> 00:31:43,419
reasons why we didn't do that nowadays

00:31:39,950 --> 00:31:47,090
you can but we had a special SBT

00:31:43,419 --> 00:31:48,710
repository on bin 3 which aggregates all

00:31:47,090 --> 00:31:50,239
these plugins so that's the preferred

00:31:48,710 --> 00:31:51,950
way of publishing it so instead of

00:31:50,239 --> 00:31:55,820
publishing to Sona type we will now

00:31:51,950 --> 00:31:59,599
publish tube entry fortunately there's

00:31:55,820 --> 00:32:07,429
again a plug-in for that so let's switch

00:31:59,599 --> 00:32:11,389
to this next commit so here's the bin

00:32:07,429 --> 00:32:14,509
tray SBT plug-in there's really not much

00:32:11,389 --> 00:32:16,999
to configuring one thing I did is to set

00:32:14,509 --> 00:32:20,210
bin tray on release to false by default

00:32:16,999 --> 00:32:23,419
it will automatically release something

00:32:20,210 --> 00:32:25,669
that we publish if you if you want that

00:32:23,419 --> 00:32:27,919
it's ok you can also have this with an

00:32:25,669 --> 00:32:30,320
SBT so Nitai plugin for publishing to

00:32:27,919 --> 00:32:32,349
Sona type unfortunately it's the default

00:32:30,320 --> 00:32:35,749
here I I don't like it I want a final

00:32:32,349 --> 00:32:38,239
validation step to be manual so I turn

00:32:35,749 --> 00:32:42,799
it off I want to manually publish this

00:32:38,239 --> 00:32:48,169
and then of course there's this nice

00:32:42,799 --> 00:32:52,009
block of code here so it there's no easy

00:32:48,169 --> 00:32:54,649
way to disable publishing for an SBT

00:32:52,009 --> 00:32:56,389
project I basically want to say do not

00:32:54,649 --> 00:32:59,059
publish any anything for route this

00:32:56,389 --> 00:33:01,369
should be a one-liner but it's not you

00:32:59,059 --> 00:33:03,169
can say publish artifact equals false

00:33:01,369 --> 00:33:05,629
which looks like the right thing but it

00:33:03,169 --> 00:33:07,940
would still publish a pom file or an IV

00:33:05,629 --> 00:33:09,769
descriptor and who knows what the bin

00:33:07,940 --> 00:33:12,499
tere plug-in might do in the background

00:33:09,769 --> 00:33:14,779
so our disabled been tray I tell it not

00:33:12,499 --> 00:33:16,580
to publish and then I override that all

00:33:14,779 --> 00:33:18,619
the publishing commands that I might use

00:33:16,580 --> 00:33:22,429
so that it really really does nothing

00:33:18,619 --> 00:33:24,409
for the root project the only other

00:33:22,429 --> 00:33:26,779
thing I need is to set the bin to a

00:33:24,409 --> 00:33:29,599
repository here so the core project will

00:33:26,779 --> 00:33:32,389
end up in JSON or and maven central the

00:33:29,599 --> 00:33:33,590
plugin knows how to publish that for SBT

00:33:32,389 --> 00:33:36,529
repositories we have

00:33:33,590 --> 00:33:39,470
to create a separate aspecty plugins

00:33:36,529 --> 00:33:46,490
project or what do we call it with

00:33:39,470 --> 00:33:52,190
repository on Ben Tre so let's head over

00:33:46,490 --> 00:33:56,779
to bin tray let's see if I'm still

00:33:52,190 --> 00:33:58,789
signed in probably not I am okay so I'm

00:33:56,779 --> 00:34:01,820
already in this no I'm not signed in

00:33:58,789 --> 00:34:05,409
right yeah didn't raise you out of the

00:34:01,820 --> 00:34:05,409
five minutes or so it's really annoying

00:34:06,669 --> 00:34:13,580
so after you sign up the first time you

00:34:11,780 --> 00:34:15,349
have to create this SPT plugins

00:34:13,580 --> 00:34:17,810
repository I already have one but

00:34:15,349 --> 00:34:18,889
there's really not much to it I could

00:34:17,810 --> 00:34:24,320
just create a new one

00:34:18,889 --> 00:34:27,080
SBT - plugins and the type is generic

00:34:24,320 --> 00:34:30,369
again the SBT documentation explains all

00:34:27,080 --> 00:34:39,050
these steps in detail so that that's it

00:34:30,369 --> 00:34:41,149
and now I could publish there's still

00:34:39,050 --> 00:34:44,389
two two things we need to do the first

00:34:41,149 --> 00:34:47,419
is authentication because we don't have

00:34:44,389 --> 00:34:48,830
this entry credentials file and the

00:34:47,419 --> 00:34:51,770
second one if there's if there's a bug

00:34:48,830 --> 00:34:52,580
in the bin tree plug-in which prevent it

00:34:51,770 --> 00:34:54,859
from properly

00:34:52,580 --> 00:34:57,260
initializing your package the first time

00:34:54,859 --> 00:35:00,830
you do this so let's do it in baby steps

00:34:57,260 --> 00:35:03,650
here just try course left publish okay

00:35:00,830 --> 00:35:06,830
it appears to hang but somewhere along

00:35:03,650 --> 00:35:10,030
the way it asked for my username so

00:35:06,830 --> 00:35:15,380
let's run it again there we go

00:35:10,030 --> 00:35:22,690
my username and I need my API key so I

00:35:15,380 --> 00:35:22,690
go to my profile here get my API key

00:35:23,990 --> 00:35:34,790
there we go we note try it again and

00:35:32,200 --> 00:35:37,010
okay this is the error message we expect

00:35:34,790 --> 00:35:47,180
snapshot files cannot be uploaded okay

00:35:37,010 --> 00:35:50,000
let's try the same for the plug-in okay

00:35:47,180 --> 00:35:52,780
invalid version name good because what

00:35:50,000 --> 00:35:57,200
this did a long way was to create these

00:35:52,780 --> 00:35:59,210
these packages so if I go into my maven

00:35:57,200 --> 00:36:01,430
repository here I can see there's now a

00:35:59,210 --> 00:36:03,830
package called left at this command

00:36:01,430 --> 00:36:05,599
created you can create this manually but

00:36:03,830 --> 00:36:07,930
you have to enter some metadata so it's

00:36:05,599 --> 00:36:10,820
easier to let SBT do it

00:36:07,930 --> 00:36:20,320
so let's publish it for real this time

00:36:10,820 --> 00:36:20,320
so we set the version to 0.1 and

00:36:20,349 --> 00:36:25,250
double-check the version and we will

00:36:22,490 --> 00:36:26,839
notice that this didn't work because we

00:36:25,250 --> 00:36:30,230
only set the version on the root project

00:36:26,839 --> 00:36:33,080
so yeah let's do it the correct way and

00:36:30,230 --> 00:36:36,910
set every version just put it into every

00:36:33,080 --> 00:36:40,640
sub project you have now we can publish

00:36:36,910 --> 00:36:43,460
so publish signed oh and of course it's

00:36:40,640 --> 00:36:45,830
a cross built right so we need plus

00:36:43,460 --> 00:36:54,770
publish sign to publish it for 210 and

00:36:45,830 --> 00:36:57,339
212 and there we go it's on its way to

00:36:54,770 --> 00:36:57,339
pin tray

00:37:06,200 --> 00:37:08,260
you

00:37:14,060 --> 00:37:21,060
okay so we load this page or just go

00:37:18,390 --> 00:37:23,070
into a left pad here it tells me you

00:37:21,060 --> 00:37:25,980
have thirty-two unpublished items and

00:37:23,070 --> 00:37:28,350
now I can publish them unfortunately I

00:37:25,980 --> 00:37:30,840
have yet to find a way to see these

00:37:28,350 --> 00:37:34,170
before I publish them so that's it's

00:37:30,840 --> 00:37:35,940
probably not that useful you have to

00:37:34,170 --> 00:37:44,750
trust that it's actually the right thing

00:37:35,940 --> 00:37:53,370
so published okay and I go to my up SBT

00:37:44,750 --> 00:37:55,380
plugins repository yes not being able to

00:37:53,370 --> 00:37:57,480
see the artifacts before you publish

00:37:55,380 --> 00:38:02,250
summary yes you're saying that's just a

00:37:57,480 --> 00:38:04,290
weird thing about the web UI or is there

00:38:02,250 --> 00:38:06,360
actually not a staging repository that

00:38:04,290 --> 00:38:09,960
you can add your project but like you do

00:38:06,360 --> 00:38:14,790
its own type I have not been able to

00:38:09,960 --> 00:38:17,850
find any way to see it so oh wow I don't

00:38:14,790 --> 00:38:19,680
know if there is one I only see this

00:38:17,850 --> 00:38:21,840
message I looked for it I did not find

00:38:19,680 --> 00:38:23,460
it like in Sona type I showed you

00:38:21,840 --> 00:38:25,080
earlier you can just expand this tree

00:38:23,460 --> 00:38:28,170
and look at all the artifacts it doesn't

00:38:25,080 --> 00:38:31,470
seem to be a way to do it here at least

00:38:28,170 --> 00:38:36,090
it's well hidden okay so I published

00:38:31,470 --> 00:38:40,710
both of these and now we want to get

00:38:36,090 --> 00:38:42,810
this this stuff linked to the proper SBT

00:38:40,710 --> 00:38:45,240
plugins repository and get our project

00:38:42,810 --> 00:38:48,600
back into my and central right so for

00:38:45,240 --> 00:38:51,030
SBT plugins nope maybe let's start with

00:38:48,600 --> 00:38:53,910
the other one first we need the library

00:38:51,030 --> 00:38:56,220
publish before we can before anyone can

00:38:53,910 --> 00:38:59,460
use the SBT plug-in because the plug-in

00:38:56,220 --> 00:39:01,590
depends on it so let's go to this

00:38:59,460 --> 00:39:04,710
package here for left pad and here's a

00:39:01,590 --> 00:39:07,740
button add to JSON or if I first as I

00:39:04,710 --> 00:39:10,110
can request them to verify that I'm

00:39:07,740 --> 00:39:12,660
allowed to publish this just like the

00:39:10,110 --> 00:39:15,210
manual verification step on Sona type

00:39:12,660 --> 00:39:18,090
and then it will be linked to JSON or

00:39:15,210 --> 00:39:21,000
and after they have approved my request

00:39:18,090 --> 00:39:23,100
I can go to this maven central tab here

00:39:21,000 --> 00:39:25,640
I can can show it to you on a different

00:39:23,100 --> 00:39:28,250
package it's already linked so

00:39:25,640 --> 00:39:31,069
going over here to ornate maven central

00:39:28,250 --> 00:39:33,799
so this is already in J cetera and now I

00:39:31,069 --> 00:39:35,660
can enter my as ona type credentials and

00:39:33,799 --> 00:39:37,549
have it think it over to maybe in

00:39:35,660 --> 00:39:39,140
central so once it's in JSON or it's

00:39:37,549 --> 00:39:41,930
basically one click away from maven

00:39:39,140 --> 00:39:44,660
central after of course you still get

00:39:41,930 --> 00:39:46,670
get your account and maven send on sona

00:39:44,660 --> 00:39:48,380
type and get your permission there you

00:39:46,670 --> 00:39:50,480
still have to do these steps beforehand

00:39:48,380 --> 00:39:53,180
and then you can just think whenever you

00:39:50,480 --> 00:39:56,240
want from Jason R and there's a similar

00:39:53,180 --> 00:40:00,220
thing you can do for the SBT plug-in so

00:39:56,240 --> 00:40:08,299
if we go to the SBT documentation here

00:40:00,220 --> 00:40:10,400
just the right link no that's the one so

00:40:08,299 --> 00:40:14,720
that's similar to to linking it to Jason

00:40:10,400 --> 00:40:19,579
you go to this SBT plug-in releases repo

00:40:14,720 --> 00:40:26,510
and for include my package SBT - left

00:40:19,579 --> 00:40:29,809
pad left pad okay and now if I click

00:40:26,510 --> 00:40:32,750
send I'm pretty sure tail up here in the

00:40:29,809 --> 00:40:35,240
front will get an email asking for this

00:40:32,750 --> 00:40:37,130
plug-in to be included and that that's

00:40:35,240 --> 00:40:40,339
for the first time we publish this after

00:40:37,130 --> 00:40:43,160
your package is linked into the SBT

00:40:40,339 --> 00:40:44,809
plugin releases repo or linked into

00:40:43,160 --> 00:40:46,250
Jason or you can just publish new

00:40:44,809 --> 00:40:52,660
versions whenever you want that's only

00:40:46,250 --> 00:40:56,119
for the first version you publish so uh

00:40:52,660 --> 00:40:58,369
there's one last thing I want to do here

00:40:56,119 --> 00:41:00,740
that's tag based publishing we've done

00:40:58,369 --> 00:41:02,779
everything manually now we publish to

00:41:00,740 --> 00:41:05,420
Jason or we publish to Magnum centrally

00:41:02,779 --> 00:41:07,700
published to the SBT repo now we wanted

00:41:05,420 --> 00:41:10,339
to eat tag based that means just push

00:41:07,700 --> 00:41:12,410
the version tag to get up and then have

00:41:10,339 --> 00:41:14,470
it run on Travis CI and automatically

00:41:12,410 --> 00:41:19,039
publish it from there

00:41:14,470 --> 00:41:20,900
so on there's a travesty I command-line

00:41:19,039 --> 00:41:22,490
client that we need for that and we have

00:41:20,900 --> 00:41:24,859
to follow the documentation which

00:41:22,490 --> 00:41:26,690
explains all this stuff and of course I

00:41:24,859 --> 00:41:28,940
haven't started from scratch I copied my

00:41:26,690 --> 00:41:31,160
build script that I'm using from

00:41:28,940 --> 00:41:33,289
Scarlett parallel collections where I in

00:41:31,160 --> 00:41:35,569
turn copied it from some other scholar

00:41:33,289 --> 00:41:37,170
project these things just evolved over

00:41:35,569 --> 00:41:39,609
time

00:41:37,170 --> 00:41:43,060
and I heard that someone is working on

00:41:39,609 --> 00:41:44,680
equity plugin to simplify this so soon

00:41:43,060 --> 00:41:51,430
there will be a plugin for this as well

00:41:44,680 --> 00:41:55,599
so that's what she'll is template okay

00:41:51,430 --> 00:41:58,330
oh yeah in Travis dot yml of course

00:41:55,599 --> 00:42:01,060
before in the step before for the multi

00:41:58,330 --> 00:42:03,130
project and I changed this to SBT plus

00:42:01,060 --> 00:42:05,890
test to cross but I forgot to show you

00:42:03,130 --> 00:42:09,670
this part so now I'm changing it again

00:42:05,890 --> 00:42:10,900
to run a custom shell script admin flash

00:42:09,670 --> 00:42:15,730
built that Sh

00:42:10,900 --> 00:42:19,300
let's go here and look at this and at

00:42:15,730 --> 00:42:22,170
the core it still does SBT plus test but

00:42:19,300 --> 00:42:25,119
it does something extra so whenever

00:42:22,170 --> 00:42:28,270
Travis CI builds a commit that has an

00:42:25,119 --> 00:42:30,430
attack associated we get this Travis tag

00:42:28,270 --> 00:42:32,640
environment variable set and here's a

00:42:30,430 --> 00:42:35,980
really ugly regular expression which

00:42:32,640 --> 00:42:37,420
just says starts with a lowercase V

00:42:35,980 --> 00:42:39,340
followed by something that looks like a

00:42:37,420 --> 00:42:41,200
version number so whenever we have a

00:42:39,340 --> 00:42:43,930
version tag we want to release that

00:42:41,200 --> 00:42:47,980
version I will tell you going to release

00:42:43,930 --> 00:42:50,290
from tag Travis tag so published version

00:42:47,980 --> 00:42:51,820
does set every version to whatever that

00:42:50,290 --> 00:42:54,910
version is that's the same thing we did

00:42:51,820 --> 00:42:57,160
manually just a few minutes ago and the

00:42:54,910 --> 00:42:58,900
extra target is set to class publish

00:42:57,160 --> 00:43:04,119
signed in order to publish all this

00:42:58,900 --> 00:43:07,750
stuff so of course we need to take care

00:43:04,119 --> 00:43:11,710
of the public key signing and the pin to

00:43:07,750 --> 00:43:14,140
a credential so we add an extra dollar

00:43:11,710 --> 00:43:15,640
sweetie file which is called publish

00:43:14,140 --> 00:43:17,710
settings and copy this to the root of

00:43:15,640 --> 00:43:19,420
the project so you may have seen

00:43:17,710 --> 00:43:21,849
different kinds of daughters PT files

00:43:19,420 --> 00:43:24,040
under project like plugins of SVG they

00:43:21,849 --> 00:43:26,320
don't have to be called builder SBT the

00:43:24,040 --> 00:43:28,720
same is true for the root project you

00:43:26,320 --> 00:43:31,180
don't just need it you cannot just have

00:43:28,720 --> 00:43:33,310
a plug a builder SBT you there but also

00:43:31,180 --> 00:43:34,780
a publish settings of SBT or whatever

00:43:33,310 --> 00:43:38,380
and they will just be merged into one

00:43:34,780 --> 00:43:40,480
project so here it is it just sets the

00:43:38,380 --> 00:43:42,700
locations because we we don't want to

00:43:40,480 --> 00:43:45,210
copy this stuff to some home directory

00:43:42,700 --> 00:43:48,400
the build machine creates a new virtual

00:43:45,210 --> 00:43:50,300
virtual disk image for us when we build

00:43:48,400 --> 00:43:51,620
so there's no persistent state

00:43:50,300 --> 00:43:54,290
we could use we have to put everything

00:43:51,620 --> 00:43:56,630
into the project so our pop ring and

00:43:54,290 --> 00:43:59,810
securing files will live under admin and

00:43:56,630 --> 00:44:02,480
the password is hard-coded here and the

00:43:59,810 --> 00:44:06,440
venturi credential files also goes under

00:44:02,480 --> 00:44:08,840
admin now of course these two files the

00:44:06,440 --> 00:44:11,720
sec ring and the pin tariqa dentures

00:44:08,840 --> 00:44:15,980
they contain secret data that's the

00:44:11,720 --> 00:44:18,530
private PGP key and my credentials to

00:44:15,980 --> 00:44:21,290
log into bin trace so nobody should be

00:44:18,530 --> 00:44:23,000
able to read them only the built machine

00:44:21,290 --> 00:44:25,400
that runs this bill should be able to

00:44:23,000 --> 00:44:27,530
decrypt them but nobody else there are

00:44:25,400 --> 00:44:30,950
different ways to do this on on Travis

00:44:27,530 --> 00:44:35,420
and I'm linking to the simplest one for

00:44:30,950 --> 00:44:38,090
a cryptic files so let's follow these

00:44:35,420 --> 00:44:41,210
instructions that I I wrote down here in

00:44:38,090 --> 00:44:44,960
order to do this first we need the

00:44:41,210 --> 00:44:47,090
cycling and public public files so I'm

00:44:44,960 --> 00:44:50,120
going to copy them over these are the

00:44:47,090 --> 00:44:56,330
ones that we created earlier they're in

00:44:50,120 --> 00:45:00,080
that SBT slash now GPG yeah these two go

00:44:56,330 --> 00:45:05,330
to admin and then I need my pintura

00:45:00,080 --> 00:45:07,940
dentals I copy them and I put the secret

00:45:05,330 --> 00:45:11,810
the securing and the pintura credentials

00:45:07,940 --> 00:45:15,890
into a tar file so what why am i doing

00:45:11,810 --> 00:45:18,200
that well unfortunately this simple way

00:45:15,890 --> 00:45:20,620
of encrypting files and Travis only

00:45:18,200 --> 00:45:22,850
works for a single server repository

00:45:20,620 --> 00:45:24,890
there are other ways to encrypt multiple

00:45:22,850 --> 00:45:26,510
files but it's so much more work that

00:45:24,890 --> 00:45:31,370
we're just going to put them into a tar

00:45:26,510 --> 00:45:34,280
and encrypt this tar so this is now

00:45:31,370 --> 00:45:37,070
encrypted in a way that Travis CI can

00:45:34,280 --> 00:45:40,160
decrypt it in order to run the board so

00:45:37,070 --> 00:45:42,830
it's not as secure as you may want it

00:45:40,160 --> 00:45:45,230
but it's probably secure enough unless

00:45:42,830 --> 00:45:49,610
the Travis security is breached then you

00:45:45,230 --> 00:45:52,400
find so one thing the simple command did

00:45:49,610 --> 00:45:54,770
behind the scenes was to modify the dot

00:45:52,400 --> 00:45:57,050
Travis that way now you can see there's

00:45:54,770 --> 00:45:59,060
no extra command in before install which

00:45:57,050 --> 00:46:02,300
will automatically decrypt this file

00:45:59,060 --> 00:46:03,410
again so whenever you run a build it

00:46:02,300 --> 00:46:07,850
decrypts this

00:46:03,410 --> 00:46:09,890
now this only goes for bills coming from

00:46:07,850 --> 00:46:13,790
your own repository so when somebody

00:46:09,890 --> 00:46:15,860
talks you repository these secrets are

00:46:13,790 --> 00:46:18,260
no longer valid when somebody opens the

00:46:15,860 --> 00:46:20,810
pull requests from a branch on his old

00:46:18,260 --> 00:46:23,030
fork against your repository these

00:46:20,810 --> 00:46:25,790
secrets are not valid so nobody can get

00:46:23,030 --> 00:46:32,780
at them unless they have committed

00:46:25,790 --> 00:46:35,450
permission to your repository so I think

00:46:32,780 --> 00:46:38,780
we're went through all the instructions

00:46:35,450 --> 00:46:42,230
here you just get back to that okay well

00:46:38,780 --> 00:46:46,070
well we we want to remove the secret

00:46:42,230 --> 00:46:47,780
data which is now encrypted and the

00:46:46,070 --> 00:46:50,000
password is already set to one two three

00:46:47,780 --> 00:46:52,340
four five and just to be sure that we

00:46:50,000 --> 00:46:54,890
don't accidentally commit this data ever

00:46:52,340 --> 00:46:57,500
I added it to the dot get a git ignore

00:46:54,890 --> 00:46:59,090
so never commit this secret data

00:46:57,500 --> 00:47:04,850
unencrypted that you only want the

00:46:59,090 --> 00:47:12,290
encrypted version on Travis so you just

00:47:04,850 --> 00:47:15,040
add this stuff get a dot plus it why am

00:47:12,290 --> 00:47:15,040
i right

00:47:15,670 --> 00:47:24,940
okay tag-based

00:47:21,940 --> 00:47:24,940
publishing

00:47:26,000 --> 00:47:32,330
and push it to github so now we have our

00:47:29,840 --> 00:47:40,400
tag based publishing setup and let's

00:47:32,330 --> 00:47:41,000
test it so we go back to the project on

00:47:40,400 --> 00:47:45,740
get up

00:47:41,000 --> 00:47:51,260
where is it there so now instead of

00:47:45,740 --> 00:47:53,480
pushing a version tag to to get up from

00:47:51,260 --> 00:47:55,220
get I just created here so I'm in the

00:47:53,480 --> 00:47:58,370
release the screen and it's just a draft

00:47:55,220 --> 00:47:59,950
and you release which just means create

00:47:58,370 --> 00:48:04,670
a tag

00:47:59,950 --> 00:48:09,350
I'm calling this release 0.2 and publish

00:48:04,670 --> 00:48:13,220
release and if we did everything

00:48:09,350 --> 00:48:16,730
correctly Travis CI should now run a

00:48:13,220 --> 00:48:18,950
release build there it is you can see

00:48:16,730 --> 00:48:22,220
it's called V zero point two so that's a

00:48:18,950 --> 00:48:28,130
tag it's building attack release let me

00:48:22,220 --> 00:48:35,690
just cancel this one maybe whether I

00:48:28,130 --> 00:48:40,130
cancel yeah does anyone know where I

00:48:35,690 --> 00:48:42,970
cancel it I did it earlier I just don't

00:48:40,130 --> 00:48:42,970
want to waste any time

00:48:46,150 --> 00:48:56,289
Oh another current no okay but we'll

00:48:51,880 --> 00:49:01,869
just wait so it's running the build it

00:48:56,289 --> 00:49:04,029
should eventually build it so in the

00:49:01,869 --> 00:49:06,849
meantime I wanted to do some more next

00:49:04,029 --> 00:49:08,769
steps but maybe I'll leave them to you

00:49:06,849 --> 00:49:10,690
as an exercise because we don't have any

00:49:08,769 --> 00:49:14,470
time for them so the next thing I will

00:49:10,690 --> 00:49:17,799
do is look into binary compatibility so

00:49:14,470 --> 00:49:19,559
when you evolve your library you are you

00:49:17,799 --> 00:49:23,440
need to make sure whether it's binary

00:49:19,559 --> 00:49:26,140
compatible or not you probably want your

00:49:23,440 --> 00:49:27,579
major versions you probably don't need

00:49:26,140 --> 00:49:29,200
your major versions to be binary

00:49:27,579 --> 00:49:31,509
compatible but you want it for your

00:49:29,200 --> 00:49:33,609
minor versions so there's a plug-in for

00:49:31,509 --> 00:49:37,180
that called NEMA migration manager that

00:49:33,609 --> 00:49:38,289
you can add to your SBT build and that's

00:49:37,180 --> 00:49:40,690
something you should do whenever you

00:49:38,289 --> 00:49:44,289
want to evolve your library make sure it

00:49:40,690 --> 00:49:47,529
stays binary compatible you could also

00:49:44,289 --> 00:49:49,509
automate publishing a proper manual like

00:49:47,529 --> 00:49:52,480
the one you create with ornate and your

00:49:49,509 --> 00:49:54,730
Scala Docs and upload that automatically

00:49:52,480 --> 00:49:58,299
to github pages you can do it in a

00:49:54,730 --> 00:50:01,660
similar way to publishing the artifact

00:49:58,299 --> 00:50:03,460
to maven central and you can add more

00:50:01,660 --> 00:50:05,259
stuff like scholar doc link checking if

00:50:03,460 --> 00:50:07,630
you link from an HTML file for your

00:50:05,259 --> 00:50:09,640
scholar Docs just like running your test

00:50:07,630 --> 00:50:11,259
on your code you can run a link checker

00:50:09,640 --> 00:50:13,079
on your scholar doc links to make sure

00:50:11,259 --> 00:50:20,440
your links are not broken

00:50:13,079 --> 00:50:24,910
so there's lots of options to explore so

00:50:20,440 --> 00:50:27,670
I'd like to sum up by by showing you

00:50:24,910 --> 00:50:32,710
what we what you need in order to

00:50:27,670 --> 00:50:34,569
reproduce this now I selected some basic

00:50:32,710 --> 00:50:37,329
skills here you should be familiar with

00:50:34,569 --> 00:50:39,489
git you should learn the basics I am

00:50:37,329 --> 00:50:42,869
linking to this tutorial here you can

00:50:39,489 --> 00:50:45,759
pick up more details as you go along you

00:50:42,869 --> 00:50:47,109
should be familiar with a build tool you

00:50:45,759 --> 00:50:49,509
may be thinking hey this guy just

00:50:47,109 --> 00:50:52,119
tricked me into coming to this wiki talk

00:50:49,509 --> 00:50:54,039
actually I tricked myself into creating

00:50:52,119 --> 00:50:59,030
an SPT term that wasn't my intention it

00:50:54,039 --> 00:51:02,060
just turned out to be an SBT talk for

00:50:59,030 --> 00:51:04,430
for this CI script CI build scripts and

00:51:02,060 --> 00:51:06,140
tag based publishing you need to be

00:51:04,430 --> 00:51:08,600
familiar with some basic UNIX shell

00:51:06,140 --> 00:51:10,550
scripting and for writing a

00:51:08,600 --> 00:51:12,200
documentation you should learn markdown

00:51:10,550 --> 00:51:17,030
which is pretty much the standard

00:51:12,200 --> 00:51:18,980
nowadays or github at least so these are

00:51:17,030 --> 00:51:21,770
the services you need they're all free

00:51:18,980 --> 00:51:23,840
you need an account and get up you need

00:51:21,770 --> 00:51:26,360
an account on sono type if you want to

00:51:23,840 --> 00:51:28,340
publish to maven central and you need to

00:51:26,360 --> 00:51:31,610
sign up for Travis CI with your github

00:51:28,340 --> 00:51:34,160
account and for bin tre especially if

00:51:31,610 --> 00:51:39,440
you want to publish a an SPT plugin then

00:51:34,160 --> 00:51:41,900
it should go to pin tree I will delete

00:51:39,440 --> 00:51:44,930
this left pad project again after this

00:51:41,900 --> 00:51:48,590
talk but there's a copy under left -

00:51:44,930 --> 00:51:50,990
template on my github and all these

00:51:48,590 --> 00:51:52,540
commits the number commits C 1 to C 7

00:51:50,990 --> 00:51:55,760
that we step through they're all in this

00:51:52,540 --> 00:51:58,100
repository also you can follow along and

00:51:55,760 --> 00:52:03,440
try to repeat these in your own project

00:51:58,100 --> 00:52:05,390
and yeah please remember to write the

00:52:03,440 --> 00:52:11,150
session if you liked it please forget

00:52:05,390 --> 00:52:13,250
about it if you didn't and before I open

00:52:11,150 --> 00:52:17,900
this up for questions let's look at the

00:52:13,250 --> 00:52:20,240
lock file here it's complete let's see

00:52:17,900 --> 00:52:25,430
release release going to release from

00:52:20,240 --> 00:52:27,140
tag V zero point two and it did and it

00:52:25,430 --> 00:52:33,470
published something so let's go to bin

00:52:27,140 --> 00:52:39,530
tree no not this bin tree I want to go

00:52:33,470 --> 00:52:43,910
to maven and left that and we have 32

00:52:39,530 --> 00:52:45,290
unpublished items publish and there's

00:52:43,910 --> 00:52:47,980
version zero point two so we

00:52:45,290 --> 00:52:50,860
successfully published it from Travis CI

00:52:47,980 --> 00:52:55,820
thank you

00:52:50,860 --> 00:52:57,870
[Applause]

00:52:55,820 --> 00:53:01,320
it's not really a question it's more

00:52:57,870 --> 00:53:04,260
like a comment so when you publish a

00:53:01,320 --> 00:53:07,080
library on maven central or unbent or it

00:53:04,260 --> 00:53:10,200
will be automatically indexed by the

00:53:07,080 --> 00:53:13,800
scholar index so we index the calendar

00:53:10,200 --> 00:53:17,040
so yeah that's it great thank you

00:53:13,800 --> 00:53:19,710
I didn't know that my question is about

00:53:17,040 --> 00:53:22,860
Sona type-in and Ben Tre I've always

00:53:19,710 --> 00:53:25,110
been confused about you know why you

00:53:22,860 --> 00:53:28,740
might choose one or the other or need

00:53:25,110 --> 00:53:30,420
both did I understand correctly that if

00:53:28,740 --> 00:53:35,100
I want to publish to maven central and

00:53:30,420 --> 00:53:37,970
must use some type so so so not type if

00:53:35,100 --> 00:53:41,610
the company that runs Meghan Central and

00:53:37,970 --> 00:53:43,370
I don't know all the details maybe I got

00:53:41,610 --> 00:53:46,680
done often wrong but as far as I know

00:53:43,370 --> 00:53:49,110
maven central is much older than J

00:53:46,680 --> 00:53:51,180
Center so that was traditionally the

00:53:49,110 --> 00:53:53,670
choice to publish all your artifacts

00:53:51,180 --> 00:53:56,460
like for maven for example that's why

00:53:53,670 --> 00:53:59,490
it's called Meghan central SBT supports

00:53:56,460 --> 00:54:01,290
both out of the box so if all your users

00:53:59,490 --> 00:54:03,600
are on SBT it doesn't really matter if

00:54:01,290 --> 00:54:08,630
you have it on maven central or JSON or

00:54:03,600 --> 00:54:12,090
but you can as you've seen publish to

00:54:08,630 --> 00:54:14,100
pin tray link it to J Center and then

00:54:12,090 --> 00:54:16,560
from there sync it back to maven central

00:54:14,100 --> 00:54:17,880
but you still need your account on Sona

00:54:16,560 --> 00:54:19,890
type for that and you need to be

00:54:17,880 --> 00:54:24,120
approved by so on and type in order to

00:54:19,890 --> 00:54:26,490
sync it and those last few steps that

00:54:24,120 --> 00:54:28,020
you were doing in the browser where you

00:54:26,490 --> 00:54:30,480
finally published you eventually

00:54:28,020 --> 00:54:32,220
automate those with geo as well or there

00:54:30,480 --> 00:54:35,190
you just have to do that through the

00:54:32,220 --> 00:54:42,440
bear why I did those manually on purpose

00:54:35,190 --> 00:54:42,440
which may be let's go back to my

00:54:43,710 --> 00:54:47,670
that's this line here bin free relief

00:54:45,869 --> 00:54:49,680
unpublish equals false I did this

00:54:47,670 --> 00:54:52,170
deliberately if you don't include this

00:54:49,680 --> 00:54:54,270
line it will automatically publish for

00:54:52,170 --> 00:54:56,160
the Maven Central publishing you still

00:54:54,270 --> 00:54:59,130
have to log into printer and click sync

00:54:56,160 --> 00:55:00,750
after he published it but all the other

00:54:59,130 --> 00:55:09,930
stuff like clicking on publish that's

00:55:00,750 --> 00:55:11,820
not necessary okay no more questions and

00:55:09,930 --> 00:55:16,849
thanks again

00:55:11,820 --> 00:55:16,849

YouTube URL: https://www.youtube.com/watch?v=RmEMUwfQoSc


