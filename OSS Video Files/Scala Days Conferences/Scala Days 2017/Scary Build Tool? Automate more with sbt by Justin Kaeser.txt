Title: Scary Build Tool? Automate more with sbt by Justin Kaeser
Publication date: 2017-06-06
Playlist: Scala Days 2017
Description: 
	This video was recorded at Scala Days Chicago 2017
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract: 
Let's face it: You may be able to avoid using sbt to build your Scala projects, but you probably don't want to. It's the de-facto standard for Scala projects and is programmed and configured in Scala itself.

We'll develop a simple sbt plugin together and explore some of the concepts of an sbt build's architecture. The goal is to help you better automate your builds in a single environment rather than stringing together scripts and tools.
Captions: 
	00:00:01,870 --> 00:00:09,620
all right nice to meet you

00:00:06,560 --> 00:00:14,599
you've made it this far less slot in

00:00:09,620 --> 00:00:17,899
Scala days so you know the title is Gary

00:00:14,599 --> 00:00:21,349
bill too so I hope you'll make it

00:00:17,899 --> 00:00:22,669
through the this talk as well but you

00:00:21,349 --> 00:00:24,320
might need some support so why don't you

00:00:22,669 --> 00:00:33,010
say hi to someone near you introduce

00:00:24,320 --> 00:00:37,120
yourself go ahead otherwise yeah yeah

00:00:33,010 --> 00:00:39,320
there's some time for that right well

00:00:37,120 --> 00:00:42,830
now that we're more familiar with each

00:00:39,320 --> 00:00:49,700
other I hope I can also make you more

00:00:42,830 --> 00:00:53,480
familiar with SBT as such and how to how

00:00:49,700 --> 00:00:59,150
to code a plugin in this beatty but some

00:00:53,480 --> 00:01:03,050
background first like here good about me

00:00:59,150 --> 00:01:09,500
i'm justin on twitter i am even that and

00:01:03,050 --> 00:01:11,240
it's not showing yeah and if you have

00:01:09,500 --> 00:01:12,950
any comments during the talk you can

00:01:11,240 --> 00:01:18,400
tweet them at me or you know just raise

00:01:12,950 --> 00:01:21,909
your hand old school so I work in

00:01:18,400 --> 00:01:26,479
JetBrains the Scala plugin for IntelliJ

00:01:21,909 --> 00:01:29,090
specifically for the SBT integration so

00:01:26,479 --> 00:01:33,350
that's one motivation for me to talk to

00:01:29,090 --> 00:01:35,080
you here and basically my job is making

00:01:33,350 --> 00:01:37,909
easier for you to build your project

00:01:35,080 --> 00:01:40,790
work with SBT so it I'd figure I'd bill

00:01:37,909 --> 00:01:42,860
just talking that's PT you're actually

00:01:40,790 --> 00:01:47,000
watching just a series of SBT tasks

00:01:42,860 --> 00:01:50,360
right now so it's a bit of motivation

00:01:47,000 --> 00:01:53,600
may be like okay I think I think Oh SPT

00:01:50,360 --> 00:01:56,570
can be slow so especially during startup

00:01:53,600 --> 00:01:58,610
and resolving so long long time ago

00:01:56,570 --> 00:02:01,850
we just wanted to make our bills less

00:01:58,610 --> 00:02:06,500
boring so we just inserted dinosaurs and

00:02:01,850 --> 00:02:08,640
starting that's one of our first plugins

00:02:06,500 --> 00:02:12,600
that I used made

00:02:08,640 --> 00:02:16,120
but like okay that's that's great a

00:02:12,600 --> 00:02:18,910
perfectly reasonable UK but maybe

00:02:16,120 --> 00:02:25,150
there's a bit more you can do like you

00:02:18,910 --> 00:02:28,420
know yet once you start getting more of

00:02:25,150 --> 00:02:31,960
one project you'd like to share some

00:02:28,420 --> 00:02:33,940
setting some common information about

00:02:31,960 --> 00:02:39,340
your builds about your environment in

00:02:33,940 --> 00:02:41,440
them like your internal repositories or

00:02:39,340 --> 00:02:43,990
some default dependencies that some

00:02:41,440 --> 00:02:49,960
projects have you share the code style

00:02:43,990 --> 00:02:54,730
and generally do more so SBT already has

00:02:49,960 --> 00:02:58,330
built-in tasks for stuff like packaging

00:02:54,730 --> 00:03:01,300
publishing maybe some petty tasks that

00:02:58,330 --> 00:03:04,390
I'll show you later presentations it's

00:03:01,300 --> 00:03:09,010
not built in I just do this here yeah

00:03:04,390 --> 00:03:13,450
great you see other pleasant surprises

00:03:09,010 --> 00:03:20,290
well that wasn't so pleasant I'm a

00:03:13,450 --> 00:03:23,590
bit scared so before we get into more

00:03:20,290 --> 00:03:26,320
details I'd like to know a bit about who

00:03:23,590 --> 00:03:30,610
I'm talking to here like who of you uses

00:03:26,320 --> 00:03:34,060
SBT at all it's more or less everybody I

00:03:30,610 --> 00:03:35,500
guess wasn't that my last presentation I

00:03:34,060 --> 00:03:38,560
don't know let's say this is our forty

00:03:35,500 --> 00:03:43,450
people and here uses plugins in their

00:03:38,560 --> 00:03:46,690
project just uses yeah most of you I'll

00:03:43,450 --> 00:03:51,430
just say this are 35 and and who has

00:03:46,690 --> 00:03:54,489
made their own plug-in yet maybe five

00:03:51,430 --> 00:03:57,660
six and and who feels they understand

00:03:54,489 --> 00:03:57,660
how SBT actually works

00:03:57,840 --> 00:04:02,560
yeah one two three

00:03:59,680 --> 00:04:07,630
well well because you know I I don't

00:04:02,560 --> 00:04:09,760
really but I do like this so what I did

00:04:07,630 --> 00:04:12,970
here I had a test that just generates

00:04:09,760 --> 00:04:18,220
some source code for me based on my

00:04:12,970 --> 00:04:20,650
input and I wrote it into the

00:04:18,220 --> 00:04:25,090
well I wrote it directly into the source

00:04:20,650 --> 00:04:28,240
directory and it's some executable code

00:04:25,090 --> 00:04:31,750
I would think I'll just go and run one

00:04:28,240 --> 00:04:33,580
this and actually yeah prints of my

00:04:31,750 --> 00:04:36,940
demographics that I collected in SVT

00:04:33,580 --> 00:04:38,380
here so that one thing you can do just

00:04:36,940 --> 00:04:42,160
generate some source code based on

00:04:38,380 --> 00:04:49,720
whatever you collect from from the world

00:04:42,160 --> 00:04:52,810
outside there from from your audience so

00:04:49,720 --> 00:04:56,230
now just a bit about the SBT

00:04:52,810 --> 00:05:00,010
architecture so this interface we're

00:04:56,230 --> 00:05:05,830
looking at here who knew the SBT shell

00:05:00,010 --> 00:05:08,380
exists is an interface to SBT not

00:05:05,830 --> 00:05:11,320
everybody I guess most of you okay who

00:05:08,380 --> 00:05:15,940
knew IntelliJ Scala plugin has a SBT

00:05:11,320 --> 00:05:18,880
shell built in now also most of us but

00:05:15,940 --> 00:05:26,410
it's good to hear that actually actually

00:05:18,880 --> 00:05:29,650
it is available so so what we can use in

00:05:26,410 --> 00:05:32,260
the BT shell are commands so-called

00:05:29,650 --> 00:05:34,240
they're just plain old strings which

00:05:32,260 --> 00:05:37,510
have some sort of syntax or don't and

00:05:34,240 --> 00:05:41,020
they can change the build state I won't

00:05:37,510 --> 00:05:44,260
get into the details of that they're

00:05:41,020 --> 00:05:46,330
evaluated strictly sequentially but

00:05:44,260 --> 00:05:48,310
that's boring right now I want to get

00:05:46,330 --> 00:05:52,480
into the more fun part which is settings

00:05:48,310 --> 00:05:59,050
and tasks so who has a concept of

00:05:52,480 --> 00:06:04,630
settings and tasks and SBT not that many

00:05:59,050 --> 00:06:08,680
good to know Dale does right over here

00:06:04,630 --> 00:06:12,940
SBT developer I'm not sure if I can

00:06:08,680 --> 00:06:15,000
teach you much today so let's have a

00:06:12,940 --> 00:06:23,260
look at how this presentation if such is

00:06:15,000 --> 00:06:26,889
implemented this is in here and nope

00:06:23,260 --> 00:06:41,979
nope don't oh come on

00:06:26,889 --> 00:06:47,379
I know what perfect fail okay worked

00:06:41,979 --> 00:06:54,669
every time exit now presentation mode do

00:06:47,379 --> 00:06:56,680
we have it here here's a the just a

00:06:54,669 --> 00:07:02,680
title section I've implemented as SBT

00:06:56,680 --> 00:07:08,650
tasks we have a definition of a task key

00:07:02,680 --> 00:07:12,009
and implementation you could color I or

00:07:08,650 --> 00:07:18,069
rather a value definition of what this

00:07:12,009 --> 00:07:21,129
task entails so in SPT we have in the

00:07:18,069 --> 00:07:22,840
test system we had two main concepts

00:07:21,129 --> 00:07:27,699
that are rather similar we have settings

00:07:22,840 --> 00:07:30,279
and tasks the settings are defined once

00:07:27,699 --> 00:07:33,430
when your build is loaded or reloaded

00:07:30,279 --> 00:07:39,400
then they can change they can be changed

00:07:33,430 --> 00:07:44,440
by a command and the tasks are executed

00:07:39,400 --> 00:07:47,259
every time you call them on the SPT

00:07:44,440 --> 00:07:52,330
shell or when you restart SPT and pass

00:07:47,259 --> 00:07:56,879
compile at an argument what we have here

00:07:52,330 --> 00:08:01,839
is the title task key and the title task

00:07:56,879 --> 00:08:05,650
setting so we set the title task key to

00:08:01,839 --> 00:08:09,879
be the headline this is just a simple

00:08:05,650 --> 00:08:14,650
function that prints my headline I can

00:08:09,879 --> 00:08:16,150
show it to you right here title it

00:08:14,650 --> 00:08:20,529
prints the headline wins for an enter

00:08:16,150 --> 00:08:23,699
that's just one task subtitle just

00:08:20,529 --> 00:08:26,529
prints the subtitle waits for an enter

00:08:23,699 --> 00:08:30,129
slightly more interesting I've defined a

00:08:26,529 --> 00:08:34,990
title section task this and append this

00:08:30,129 --> 00:08:36,969
is defined as depending on well this is

00:08:34,990 --> 00:08:38,800
defined at subtitle depending on title

00:08:36,969 --> 00:08:40,010
so now I've introduced some sort of

00:08:38,800 --> 00:08:43,610
ordering

00:08:40,010 --> 00:08:47,839
which by default doesn't happen in SBT

00:08:43,610 --> 00:08:49,339
except through explicit dependencies one

00:08:47,839 --> 00:08:58,730
way or another I'll go into a little

00:08:49,339 --> 00:09:02,350
more detail later um so we have our

00:08:58,730 --> 00:09:02,350
shell open yes we do

00:09:03,310 --> 00:09:15,500
okay uh yeah dinosaurs get in everywhere

00:09:07,399 --> 00:09:18,440
right so the task system as I've just

00:09:15,500 --> 00:09:25,190
explained yeah you probably use it

00:09:18,440 --> 00:09:26,630
compile and SBT is a task basically

00:09:25,190 --> 00:09:32,060
anything you do with this booty is a

00:09:26,630 --> 00:09:33,649
task or a command if it might seem a

00:09:32,060 --> 00:09:38,029
little weird so you've seen over here

00:09:33,649 --> 00:09:41,839
I've added top value what does that mean

00:09:38,029 --> 00:09:43,970
I'll get to it in a bit so now more

00:09:41,839 --> 00:09:46,990
interestingly as mentioned dependencies

00:09:43,970 --> 00:09:50,180
between tasks do you have a question

00:09:46,990 --> 00:09:54,589
yeah go ahead oh yeah there's a

00:09:50,180 --> 00:09:57,680
microphone coming is that the scanner

00:09:54,589 --> 00:10:02,240
Scottish Gaelic what I'm seeing is that

00:09:57,680 --> 00:10:05,750
in Scala this is in an FPT file which is

00:10:02,240 --> 00:10:07,130
mostly Scala with some special yeah

00:10:05,750 --> 00:10:09,380
because it's actually the very first

00:10:07,130 --> 00:10:11,120
line on line number seven it's Val title

00:10:09,380 --> 00:10:13,190
and the line number eight you are

00:10:11,120 --> 00:10:16,699
assigning that so I'm just confused you

00:10:13,190 --> 00:10:21,589
notice this colon equals is an operator

00:10:16,699 --> 00:10:26,899
and SPT okay basically associates tasks

00:10:21,589 --> 00:10:28,940
key with a value okay so if you look at

00:10:26,899 --> 00:10:32,480
the type of this whole thing

00:10:28,940 --> 00:10:38,569
it's a def setting of tasks of string

00:10:32,480 --> 00:10:42,350
and SBT file is essentially just the

00:10:38,569 --> 00:10:44,000
list of settings how I say so it's not

00:10:42,350 --> 00:10:47,190
pure scanner I know it's like you know

00:10:44,000 --> 00:10:50,340
now this case it's not pure Scala it's

00:10:47,190 --> 00:10:52,800
Scala with the little magic around it

00:10:50,340 --> 00:10:54,600
oh I see okay how do I know whether it

00:10:52,800 --> 00:10:56,100
is you know it is varied whatever I am

00:10:54,600 --> 00:10:58,490
entering because it's a scallop there's

00:10:56,100 --> 00:11:00,810
something else right

00:10:58,490 --> 00:11:04,740
well usually IntelliJ will tell you if

00:11:00,810 --> 00:11:06,810
it's valid or BT will tell you once you

00:11:04,740 --> 00:11:10,620
reload your project like if you

00:11:06,810 --> 00:11:15,600
introduce a syntax error anywhere here

00:11:10,620 --> 00:11:17,720
then you reload your projects and SBT

00:11:15,600 --> 00:11:24,590
will tell you there's an error thank you

00:11:17,720 --> 00:11:27,900
sure so where was I test ref yep so when

00:11:24,590 --> 00:11:30,090
when you run a task basically you could

00:11:27,900 --> 00:11:33,530
say a dependency graph is calculated or

00:11:30,090 --> 00:11:39,930
it's calculated before you run it and

00:11:33,530 --> 00:11:44,100
for for each task key value is only

00:11:39,930 --> 00:11:48,030
calculated once that's the specialty in

00:11:44,100 --> 00:11:51,260
SBT so this also means the independent

00:11:48,030 --> 00:11:57,720
tasks may may run concurrently so so

00:11:51,260 --> 00:12:00,480
dinasaurs all coming in here at once we

00:11:57,720 --> 00:12:08,480
can also look at this part where the

00:12:00,480 --> 00:12:13,830
dinosaurs here

00:12:08,480 --> 00:12:15,870
oops to me dinosaur settings and my task

00:12:13,830 --> 00:12:21,120
just basically depends on all of them

00:12:15,870 --> 00:12:25,650
you see again the dot value get to it in

00:12:21,120 --> 00:12:29,270
effect and I but you also see I've just

00:12:25,650 --> 00:12:37,470
mentioned them in sequence but there is

00:12:29,270 --> 00:12:40,320
executed in all at once more or less so

00:12:37,470 --> 00:12:44,550
yeah who remembers all those crazy

00:12:40,320 --> 00:12:46,950
operators and SBT 0:12 yeah yeah it's

00:12:44,550 --> 00:12:51,420
quite a few so you've been using it for

00:12:46,950 --> 00:12:56,040
a while and basically those were to use

00:12:51,420 --> 00:13:02,250
to explicitly define the tasks the graph

00:12:56,040 --> 00:13:04,050
structure of your FTP build and well now

00:13:02,250 --> 00:13:08,100
instead we have creating macros to

00:13:04,050 --> 00:13:10,860
express these dependencies um I think

00:13:08,100 --> 00:13:14,580
it's more readable probably but of

00:13:10,860 --> 00:13:18,600
course it shows your little gets a

00:13:14,580 --> 00:13:19,890
little more opaque because just by

00:13:18,600 --> 00:13:22,350
reading it you wouldn't know that these

00:13:19,890 --> 00:13:25,200
things are executed in parallel right or

00:13:22,350 --> 00:13:32,400
that they're only executed once for an

00:13:25,200 --> 00:13:36,270
invocation of a task but so why do we

00:13:32,400 --> 00:13:41,970
even have this right like if SBT is

00:13:36,270 --> 00:13:44,400
exactly like Scala we have this graph

00:13:41,970 --> 00:13:47,490
structure okay in regular scala we could

00:13:44,400 --> 00:13:50,450
say we have a graph structure to like

00:13:47,490 --> 00:13:57,270
Chris yesterday in his CVP talk

00:13:50,450 --> 00:14:01,260
explained this that a dependency is just

00:13:57,270 --> 00:14:06,260
calling another another task

00:14:01,260 --> 00:14:06,260
another method but

00:14:07,520 --> 00:14:14,060
well SBT has this other philosophy so

00:14:12,410 --> 00:14:17,330
the test may depend on many under the

00:14:14,060 --> 00:14:22,370
task it may depend on itself but this is

00:14:17,330 --> 00:14:24,709
not exactly recursion this is more like

00:14:22,370 --> 00:14:30,080
introducing an additional node into a

00:14:24,709 --> 00:14:34,339
test graph and yeah why why not just

00:14:30,080 --> 00:14:37,430
claim functions come on who's complained

00:14:34,339 --> 00:14:40,220
about this before that yeah what why

00:14:37,430 --> 00:14:44,899
don't we use displaying functions yeah

00:14:40,220 --> 00:14:50,570
so we've we've seen we have a task graph

00:14:44,899 --> 00:14:54,500
and in plane functions this graph isn't

00:14:50,570 --> 00:15:03,190
just linear any node may be visited

00:14:54,500 --> 00:15:07,160
several times so one way is to do a

00:15:03,190 --> 00:15:09,290
cache the intermediate results so you

00:15:07,160 --> 00:15:13,720
could say it's a bit of an inversion of

00:15:09,290 --> 00:15:15,890
inversion of control so you know

00:15:13,720 --> 00:15:17,300
inversion of control dependency

00:15:15,890 --> 00:15:22,310
injections and people say that's just

00:15:17,300 --> 00:15:23,959
taking a parameter so SPT test for

00:15:22,310 --> 00:15:26,810
better words they don't really have

00:15:23,959 --> 00:15:30,410
parameters unless you count input tests

00:15:26,810 --> 00:15:35,500
which are painful to use except directly

00:15:30,410 --> 00:15:35,500
from the command line from the SPT shell

00:15:36,459 --> 00:15:44,000
we can we can reuse values this is what

00:15:40,880 --> 00:15:46,730
I mentioned that we only calculate one

00:15:44,000 --> 00:15:50,480
node in the graph once for one

00:15:46,730 --> 00:15:51,950
invocation and different steps in the

00:15:50,480 --> 00:15:53,450
test don't have to know about each other

00:15:51,950 --> 00:15:55,880
and so instead of passing parameters

00:15:53,450 --> 00:15:58,930
around we just share them in the shared

00:15:55,880 --> 00:16:01,070
data structure and in my opinion

00:15:58,930 --> 00:16:04,520
modifying that directly might be a bit

00:16:01,070 --> 00:16:10,940
too error-prone so so this is where we

00:16:04,520 --> 00:16:13,790
get we get a DSL to define execution

00:16:10,940 --> 00:16:17,000
graph parallelization you know because

00:16:13,790 --> 00:16:19,510
why the hell not let's paralyze all the

00:16:17,000 --> 00:16:19,510
dinosaurs

00:16:20,120 --> 00:16:30,390
as those chickens tend to hang around

00:16:22,770 --> 00:16:35,340
quite a while you know their remaining

00:16:30,390 --> 00:16:37,560
dinosaurs also makes it easier to

00:16:35,340 --> 00:16:38,070
analyze what the hell's going on in a

00:16:37,560 --> 00:16:41,760
build

00:16:38,070 --> 00:16:46,080
so SBT can actually tell us dependencies

00:16:41,760 --> 00:16:48,360
between individual tasks so like where

00:16:46,080 --> 00:16:50,670
does some weird result come from why why

00:16:48,360 --> 00:16:55,170
did I publish to Sona type instead of

00:16:50,670 --> 00:16:58,890
tube in tray or why is the version in

00:16:55,170 --> 00:17:02,280
this setting why is the version that my

00:16:58,890 --> 00:17:04,530
published artifact wrong so yeah let's

00:17:02,280 --> 00:17:08,970
play the inspect game so there's this

00:17:04,530 --> 00:17:13,609
neat little test talking stick I'll just

00:17:08,970 --> 00:17:15,320
inspect my title sections now and

00:17:13,609 --> 00:17:19,470
[Music]

00:17:15,320 --> 00:17:21,089
section I can't type anymore so title

00:17:19,470 --> 00:17:23,400
section and it gives us lots of

00:17:21,089 --> 00:17:27,240
information just about this task select

00:17:23,400 --> 00:17:29,490
the result type and the description I

00:17:27,240 --> 00:17:32,820
defined and where it comes from so

00:17:29,490 --> 00:17:37,190
actually the point and source where this

00:17:32,820 --> 00:17:42,510
thing is defined and its dependencies I

00:17:37,190 --> 00:17:45,480
can do this for the building tasks as

00:17:42,510 --> 00:17:47,580
well of course like compile seems like

00:17:45,480 --> 00:17:50,700
it just has two dependencies but we can

00:17:47,580 --> 00:17:54,420
look deeper inspect tree compile and

00:17:50,700 --> 00:17:56,670
boom it's quite a quitter

00:17:54,420 --> 00:17:58,830
quite a bit of stuff going on in there

00:17:56,670 --> 00:18:01,080
of course this is a tree so you don't

00:17:58,830 --> 00:18:05,630
see the actual graph structure where you

00:18:01,080 --> 00:18:12,010
have shared dependencies of subtasks of

00:18:05,630 --> 00:18:14,919
tests being called okay

00:18:12,010 --> 00:18:19,450
and maybe IntelliJ will make this even

00:18:14,919 --> 00:18:23,710
easier to to look at to understand one

00:18:19,450 --> 00:18:26,980
day so you tell me if this is useful so

00:18:23,710 --> 00:18:28,690
how do you pass parameters so typically

00:18:26,980 --> 00:18:32,519
you wouldn't have parameters you'd

00:18:28,690 --> 00:18:35,679
redefine a setting so essentially

00:18:32,519 --> 00:18:37,690
everything is over writable or like you

00:18:35,679 --> 00:18:41,649
just redefined settings that tests

00:18:37,690 --> 00:18:43,870
depend on so typically like Scala

00:18:41,649 --> 00:18:47,830
version if you want to publish for

00:18:43,870 --> 00:18:49,389
different scholars all you do is if I

00:18:47,830 --> 00:18:57,940
wanted to do it manually I could set

00:18:49,389 --> 00:19:00,490
Scala version is to 11 - and if I wanted

00:18:57,940 --> 00:19:06,960
to compile then this wouldn't work

00:19:00,490 --> 00:19:08,169
because I am in an FPT plugin come on

00:19:06,960 --> 00:19:12,130
yeah

00:19:08,169 --> 00:19:14,620
didn't work doesn't matter yeah

00:19:12,130 --> 00:19:20,110
everything is over writable like display

00:19:14,620 --> 00:19:23,490
nuts or overrides everything so heavy so

00:19:20,110 --> 00:19:25,269
I want to get a bit more practical I

00:19:23,490 --> 00:19:29,019
think you want to get a bit more

00:19:25,269 --> 00:19:31,929
practical to like actually writing an

00:19:29,019 --> 00:19:36,190
SPT plugin that that's I promise what we

00:19:31,929 --> 00:19:39,039
do right so I'm a bit too lazy to set up

00:19:36,190 --> 00:19:41,260
a get github project every time I create

00:19:39,039 --> 00:19:44,080
a new repo so I'd like a I like it's

00:19:41,260 --> 00:19:46,870
looking for that and it's rather easy to

00:19:44,080 --> 00:19:48,490
write a plug-in so before you before you

00:19:46,870 --> 00:19:52,029
start writing my ear you just want to

00:19:48,490 --> 00:19:54,010
check in the documentation if there's if

00:19:52,029 --> 00:19:56,230
there's some some plugins in there

00:19:54,010 --> 00:19:57,850
there's tons of plugins but it turns out

00:19:56,230 --> 00:20:01,269
I don't think there's any plug-in that

00:19:57,850 --> 00:20:03,490
does create circuit oblique over here so

00:20:01,269 --> 00:20:09,570
so what we just start with that

00:20:03,490 --> 00:20:09,570
oops there isn't yet oh

00:20:09,960 --> 00:20:16,750
dinosaurs keep popping up I think they

00:20:12,549 --> 00:20:22,120
want to tell me something like yeah what

00:20:16,750 --> 00:20:24,240
the hell is a plug-in in SBT I don't

00:20:22,120 --> 00:20:27,059
think I've explained that really right

00:20:24,240 --> 00:20:30,360
so so a little bit more about

00:20:27,059 --> 00:20:34,140
architecture so FBP is sort of recursive

00:20:30,360 --> 00:20:39,740
so your your build is built by another

00:20:34,140 --> 00:20:42,240
SBT build and yeah thanks David

00:20:39,740 --> 00:20:45,720
yeah you put a project in my project so

00:20:42,240 --> 00:20:47,420
I can build my build it's really really

00:20:45,720 --> 00:20:50,370
helpful yeah

00:20:47,420 --> 00:20:53,730
so it's goodbye another xpp build but

00:20:50,370 --> 00:20:56,400
and and that build is built by another

00:20:53,730 --> 00:20:57,750
st-pierre build but as some wise

00:20:56,400 --> 00:21:01,110
philosopher or something said in

00:20:57,750 --> 00:21:03,720
practice most or all recursion is at

00:21:01,110 --> 00:21:05,490
most three levels deep so I haven't

00:21:03,720 --> 00:21:10,860
really seen a SP key project that goes

00:21:05,490 --> 00:21:14,090
deeper than three bills but I can show

00:21:10,860 --> 00:21:17,210
you so this is actually why you're our

00:21:14,090 --> 00:21:19,679
project directory in an SPT project

00:21:17,210 --> 00:21:22,860
contains another project directory which

00:21:19,679 --> 00:21:32,429
also has a target these are all the BT

00:21:22,860 --> 00:21:33,960
Dubbs all the way down and so the code

00:21:32,429 --> 00:21:37,140
that build your project is in the

00:21:33,960 --> 00:21:38,250
project project and the code that

00:21:37,140 --> 00:21:45,059
project is in the project project

00:21:38,250 --> 00:21:48,059
project but and the FBT files in the

00:21:45,059 --> 00:21:49,830
actual project basically get shunted

00:21:48,059 --> 00:21:52,200
down one level into the project

00:21:49,830 --> 00:21:54,750
directory so they're essentially code

00:21:52,200 --> 00:21:59,760
that belongs to the project project of

00:21:54,750 --> 00:22:02,309
your project and so what a plugin is is

00:21:59,760 --> 00:22:05,730
mostly just the library and the project

00:22:02,309 --> 00:22:14,280
project for you both so yeah damn let's

00:22:05,730 --> 00:22:18,410
go so whatever I need to do is I've

00:22:14,280 --> 00:22:18,410
closed it again horrible

00:22:20,850 --> 00:22:34,250
I need to go into my project project and

00:22:24,600 --> 00:22:42,360
just create a new file I'll call it

00:22:34,250 --> 00:22:46,519
github plugin and the basic structure is

00:22:42,360 --> 00:22:46,519
something like this it's just an object

00:22:47,269 --> 00:22:53,149
get a plug-in that extend an auto

00:22:53,600 --> 00:23:08,720
plug-in and there's some boilerplate

00:23:00,629 --> 00:23:16,559
here so there's this requires method

00:23:08,720 --> 00:23:23,009
requires this - yeah requires is JVM

00:23:16,559 --> 00:23:26,580
plug-in this is not always necessary but

00:23:23,009 --> 00:23:33,269
I think if you want to automatically

00:23:26,580 --> 00:23:35,250
trigger this plugin is triggers and it's

00:23:33,269 --> 00:23:37,139
all requirements are fulfilled the

00:23:35,250 --> 00:23:44,250
plug-in will automatically be added to

00:23:37,139 --> 00:23:46,500
your build and you can use this

00:23:44,250 --> 00:23:56,009
requirement mechanism to like extend

00:23:46,500 --> 00:23:59,509
existing plugins and so another part

00:23:56,009 --> 00:24:02,580
that matters is the auto import object

00:23:59,509 --> 00:24:06,570
you don't need to define all the imports

00:24:02,580 --> 00:24:09,570
but if you want to add settings that are

00:24:06,570 --> 00:24:13,200
available to another to to your plugins

00:24:09,570 --> 00:24:15,629
users then it's a good idea to put them

00:24:13,200 --> 00:24:20,309
right in here this is a little bit of

00:24:15,629 --> 00:24:21,960
FBT magic going on and and this is where

00:24:20,309 --> 00:24:27,929
you can define some settings so like

00:24:21,960 --> 00:24:29,639
I'll define a github token because if I

00:24:27,929 --> 00:24:33,230
want to publish to github I need to use

00:24:29,639 --> 00:24:40,550
either credentials or a token

00:24:33,230 --> 00:24:46,290
and this will be just setting key string

00:24:40,550 --> 00:24:55,880
and this needs to be imported and so

00:24:46,290 --> 00:24:58,260
I'll just skip the typing role next and

00:24:55,880 --> 00:25:02,490
role is that another SBT plugin that

00:24:58,260 --> 00:25:09,270
just allowed me to skip forward in this

00:25:02,490 --> 00:25:12,030
in get history so so did it get reloaded

00:25:09,270 --> 00:25:21,110
properly yeah it I just included some

00:25:12,030 --> 00:25:27,420
boilerplate and that was the auto import

00:25:21,110 --> 00:25:28,600
which it should have not skipped doesn't

00:25:27,420 --> 00:25:31,770
matter I'll just type it again

00:25:28,600 --> 00:25:31,770
[Music]

00:25:36,670 --> 00:25:46,390
get up token is setting key string

00:25:42,600 --> 00:25:48,340
whatever and all will need a task to

00:25:46,390 --> 00:25:50,970
something that actually does something

00:25:48,340 --> 00:25:50,970
in our plugin

00:25:51,720 --> 00:26:01,900
it's a create project this will just be

00:25:57,700 --> 00:26:06,430
a task key I don't know unit ID usually

00:26:01,900 --> 00:26:08,410
not use unit because something it's

00:26:06,430 --> 00:26:14,130
sometimes messes up when you forget to

00:26:08,410 --> 00:26:20,140
add a dot value at the right place and

00:26:14,130 --> 00:26:24,130
the next crucial part is all overwrite

00:26:20,140 --> 00:26:27,130
this project settings so so this is

00:26:24,130 --> 00:26:31,420
simply a sequence of settings that will

00:26:27,130 --> 00:26:35,380
be added to the plugin users project and

00:26:31,420 --> 00:26:41,050
I can define get a create project and

00:26:35,380 --> 00:26:43,210
here : equal because it's setting I'm

00:26:41,050 --> 00:26:46,210
associating attack tasks key without

00:26:43,210 --> 00:26:48,790
setting and now I can just start

00:26:46,210 --> 00:26:51,400
implementing stuff you know

00:26:48,790 --> 00:26:55,360
I've already implemented this and I'll

00:26:51,400 --> 00:26:56,920
just type it down for you and you think

00:26:55,360 --> 00:27:04,240
this patch here because SBT is they're

00:26:56,920 --> 00:27:07,740
still on 0.12 and on Scala 210 and some

00:27:04,240 --> 00:27:07,740
newer libraries aren't really available

00:27:09,750 --> 00:27:19,000
API dot github.com

00:27:13,050 --> 00:27:21,670
and actually use a flash repos and the

00:27:19,000 --> 00:27:24,840
usual would look for it when you want to

00:27:21,670 --> 00:27:24,840
do HTTP right

00:27:26,160 --> 00:27:36,020
I guess the only interesting part here

00:27:28,740 --> 00:27:40,770
is author I'd say the rise Asian and

00:27:36,020 --> 00:27:42,780
we'll just depend on the token setting

00:27:40,770 --> 00:27:43,590
and just go ahead and insert that right

00:27:42,780 --> 00:27:50,220
here

00:27:43,590 --> 00:27:52,470
github token dot value and this goes on

00:27:50,220 --> 00:28:01,160
that content type and so on and actually

00:27:52,470 --> 00:28:01,160
I just want to skip over that and reload

00:28:01,460 --> 00:28:10,260
that's yeah it's a SPG's favorite

00:28:05,000 --> 00:28:16,740
activity is loading stuff are we in the

00:28:10,260 --> 00:28:24,080
right space now I didn't know that was a

00:28:16,740 --> 00:28:27,710
bad thing okay just one why did you do

00:28:24,080 --> 00:28:27,710
any questions so far

00:28:31,049 --> 00:28:46,049
I already just imported that is

00:28:40,019 --> 00:28:49,980
boilerplate over here I added this patch

00:28:46,049 --> 00:28:58,679
as a dependency here to the project

00:28:49,980 --> 00:29:02,129
project before yeah then it's well then

00:28:58,679 --> 00:29:05,909
it's available in the project project as

00:29:02,129 --> 00:29:08,340
a regular dependency so for your build

00:29:05,909 --> 00:29:12,090
definition you can add any library and

00:29:08,340 --> 00:29:18,659
base your builds on that or write your

00:29:12,090 --> 00:29:20,609
plugin like that I forgot to go in

00:29:18,659 --> 00:29:23,009
presentation mode maybe this is a bit

00:29:20,609 --> 00:29:27,659
more visible okay so basically I've just

00:29:23,009 --> 00:29:30,470
implemented this thing and now all

00:29:27,659 --> 00:29:39,899
that's left to do is to get to create

00:29:30,470 --> 00:29:42,989
project and github create project so

00:29:39,899 --> 00:29:46,889
let's see if this works out it did work

00:29:42,989 --> 00:29:50,509
out according to SBT let's just have a

00:29:46,889 --> 00:29:57,440
quick look in my projects on github and

00:29:50,509 --> 00:29:57,440

YouTube URL: https://www.youtube.com/watch?v=LZiaqXbbgMM


