Title: Mellite: An Integrated Development Environment for Sound -
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/mellite-an-integrated-development-environment-for-sound
Captions: 
	00:00:06,259 --> 00:00:12,120
okay thank you for the patience thank

00:00:09,389 --> 00:00:13,860
you for coming to my talk this talk is

00:00:12,120 --> 00:00:16,500
on a computer music environment I've

00:00:13,860 --> 00:00:18,119
been working on for the past perhaps 10

00:00:16,500 --> 00:00:19,100
years if you count all the components

00:00:18,119 --> 00:00:22,140
together

00:00:19,100 --> 00:00:23,910
I'm from grads from Austria where I work

00:00:22,140 --> 00:00:25,380
among other things at the Institute of

00:00:23,910 --> 00:00:27,930
electronic music in acoustic that's

00:00:25,380 --> 00:00:30,929
research and teaching department in the

00:00:27,930 --> 00:00:33,750
Music Academy and currently I'm running

00:00:30,929 --> 00:00:35,340
a research project on algorithmic agency

00:00:33,750 --> 00:00:36,989
with respect to sound and sound

00:00:35,340 --> 00:00:39,300
experimentation called algorithms that

00:00:36,989 --> 00:00:44,570
matter in which millet is one of the

00:00:39,300 --> 00:00:44,570
different tools or approaches we employ

00:00:44,660 --> 00:00:51,600
my first kind of serious software let's

00:00:48,180 --> 00:00:54,059
say I have written maybe in 2001 it was

00:00:51,600 --> 00:00:56,039
a java application called escape it's

00:00:54,059 --> 00:00:58,890
still very much in use today it's also a

00:00:56,039 --> 00:01:00,660
music application that takes the idea of

00:00:58,890 --> 00:01:03,809
rendering sound so what does it mean

00:01:00,660 --> 00:01:05,549
it's a non real-time process that means

00:01:03,809 --> 00:01:07,070
it takes a sound file applies a

00:01:05,549 --> 00:01:09,600
particular transformation let's say

00:01:07,070 --> 00:01:11,760
manipulate the spectrum and manipulate

00:01:09,600 --> 00:01:13,350
the time and output another sound file

00:01:11,760 --> 00:01:16,680
and then you can use that to do other

00:01:13,350 --> 00:01:18,799
things later on I learned in a real time

00:01:16,680 --> 00:01:21,950
just many real-time systems one of them

00:01:18,799 --> 00:01:24,150
is supercollider is also quite common

00:01:21,950 --> 00:01:27,479
language in the area of computer music

00:01:24,150 --> 00:01:29,880
and I try it in a way for a while to

00:01:27,479 --> 00:01:31,829
combine that with specific language

00:01:29,880 --> 00:01:34,079
based a little bit it's a car it's a

00:01:31,829 --> 00:01:36,060
it's a it's a specific language it's not

00:01:34,079 --> 00:01:38,700
a general-purpose language but it's kind

00:01:36,060 --> 00:01:40,770
of based on Ruby and small talk and

00:01:38,700 --> 00:01:43,619
other ideas that's right for a while to

00:01:40,770 --> 00:01:45,090
bridge that with in my Java projects and

00:01:43,619 --> 00:01:49,560
then finally in 2008 I actually

00:01:45,090 --> 00:01:52,590
discovered Scala here's a mailing list

00:01:49,560 --> 00:01:53,159
post I unearthed about my first contact

00:01:52,590 --> 00:01:56,009
with Scala

00:01:53,159 --> 00:01:58,290
hello I'm new to Scala I'm currently

00:01:56,009 --> 00:02:00,840
evaluating for a large-scale project

00:01:58,290 --> 00:02:02,399
which language could replace the default

00:02:00,840 --> 00:02:04,829
language of the supercollider

00:02:02,399 --> 00:02:06,840
sound synthesis environment and then it

00:02:04,829 --> 00:02:08,670
goes on elaborating a little bit of why

00:02:06,840 --> 00:02:11,670
I thought that maybe Scala would be a

00:02:08,670 --> 00:02:13,270
nice fit I don't want to talk about that

00:02:11,670 --> 00:02:15,220
now also perhaps

00:02:13,270 --> 00:02:18,490
priorities have shifted quite a bit but

00:02:15,220 --> 00:02:21,520
I'm so happy that I stuck to Scala so

00:02:18,490 --> 00:02:26,020
for those who have been two previous

00:02:21,520 --> 00:02:28,660
Scala days conferences I was here a

00:02:26,020 --> 00:02:31,720
couple of years ago and presented this

00:02:28,660 --> 00:02:33,550
kind of translation from super collider

00:02:31,720 --> 00:02:37,660
to scholar called Scala collider there

00:02:33,550 --> 00:02:41,910
was in 2012 this these plots they show a

00:02:37,660 --> 00:02:44,560
bit of it activity on different

00:02:41,910 --> 00:02:46,330
libraries or modules that make up this

00:02:44,560 --> 00:02:49,510
system that I present today millet and

00:02:46,330 --> 00:02:52,300
Scala collide as one of them so it's an

00:02:49,510 --> 00:02:56,080
early one later came some processes

00:02:52,300 --> 00:03:01,090
which is a kind of a framework to model

00:02:56,080 --> 00:03:04,030
higher higher abstractions for sound F

00:03:01,090 --> 00:03:06,640
scape dan was revived actually not so

00:03:04,030 --> 00:03:08,860
long ago so it's now based that's two

00:03:06,640 --> 00:03:12,580
versions now the old Scot Java bond I

00:03:08,860 --> 00:03:15,720
know completely rewritten one in Scala

00:03:12,580 --> 00:03:19,030
which came across as the side not side

00:03:15,720 --> 00:03:21,490
effect but it was stipulated also by a

00:03:19,030 --> 00:03:24,100
research project on sonification in

00:03:21,490 --> 00:03:27,490
which this non real-time rendering was

00:03:24,100 --> 00:03:29,110
very handy to prepare data sets which

00:03:27,490 --> 00:03:31,690
because it can run faster than real time

00:03:29,110 --> 00:03:34,330
actually another system is patterns

00:03:31,690 --> 00:03:36,130
which is also familiar for those who

00:03:34,330 --> 00:03:40,390
know supercollider it's also translation

00:03:36,130 --> 00:03:42,520
and that was an experiment within the

00:03:40,390 --> 00:03:44,260
Alma project and then finally Malita see

00:03:42,520 --> 00:03:46,390
at the bottom the story actually goes

00:03:44,260 --> 00:03:48,880
with it back so the activity actually

00:03:46,390 --> 00:03:51,670
started with something else so this this

00:03:48,880 --> 00:03:54,850
whole endeavor is somehow kind of an

00:03:51,670 --> 00:03:59,770
outcome or effect of my PhD research

00:03:54,850 --> 00:04:03,490
which ran roughly from 2009 to 2014 with

00:03:59,770 --> 00:04:05,740
a system that I call lucre I will show I

00:04:03,490 --> 00:04:08,500
will explain that in a bit it's about a

00:04:05,740 --> 00:04:10,480
question of tracing compositional

00:04:08,500 --> 00:04:12,160
activity so we all know that from

00:04:10,480 --> 00:04:14,290
software development we don't work any

00:04:12,160 --> 00:04:16,359
we cannot imagine a world anymore that

00:04:14,290 --> 00:04:18,850
is not with everything checked into a

00:04:16,359 --> 00:04:20,799
repository in versioned and so on and I

00:04:18,850 --> 00:04:23,790
was kind of exploring that idea for a

00:04:20,799 --> 00:04:23,790
music composition

00:04:23,870 --> 00:04:29,380
so back to millet for the name millet

00:04:26,000 --> 00:04:32,630
it's literally translates to honey stone

00:04:29,380 --> 00:04:34,160
perhaps because in some configurations

00:04:32,630 --> 00:04:36,800
it's a mineral and in some kind of

00:04:34,160 --> 00:04:39,710
configurations or consistencies it can

00:04:36,800 --> 00:04:41,030
kind of have the color of honey and why

00:04:39,710 --> 00:04:42,590
I chose that name I don't know because

00:04:41,030 --> 00:04:44,060
you have to find a name that is kind of

00:04:42,590 --> 00:04:46,280
convenient too because you're going to

00:04:44,060 --> 00:04:48,020
talk about it a lot for many years and I

00:04:46,280 --> 00:04:51,380
thought that this idea of minerals that

00:04:48,020 --> 00:04:53,360
they have this optical property that

00:04:51,380 --> 00:04:55,370
they refract stuff in different layers

00:04:53,360 --> 00:04:57,889
and different perspective is kind of a

00:04:55,370 --> 00:05:01,010
nice metaphor or analogy to how I

00:04:57,889 --> 00:05:02,330
consider the system so one of the things

00:05:01,010 --> 00:05:04,370
I wanted to do with millet is to

00:05:02,330 --> 00:05:06,650
integrate my different practices with

00:05:04,370 --> 00:05:09,530
sound into one application different

00:05:06,650 --> 00:05:12,590
ways of the different forms of art or

00:05:09,530 --> 00:05:15,889
sound art but also in this context of

00:05:12,590 --> 00:05:18,710
the PhD research to integrate this

00:05:15,889 --> 00:05:22,460
observation of time in different ways of

00:05:18,710 --> 00:05:24,620
the compositional process so the these

00:05:22,460 --> 00:05:26,720
the three forms that for me are the

00:05:24,620 --> 00:05:29,120
archetype typical forms that I would

00:05:26,720 --> 00:05:32,330
like to be able to represent within this

00:05:29,120 --> 00:05:36,440
one framework sound installation life

00:05:32,330 --> 00:05:37,639
improvisation with computers and what

00:05:36,440 --> 00:05:40,010
you would probably call electric

00:05:37,639 --> 00:05:43,669
acoustic music or tape music and I will

00:05:40,010 --> 00:05:47,110
just so as we get a very broad idea give

00:05:43,669 --> 00:05:50,479
to three very quick examples of that so

00:05:47,110 --> 00:05:53,150
this is a kind of shot from a sound

00:05:50,479 --> 00:05:56,090
installation called configuration from

00:05:53,150 --> 00:05:59,389
2015 so this all the examples that kind

00:05:56,090 --> 00:06:00,979
of made with maybe not just millet but

00:05:59,389 --> 00:06:01,920
also with the different frameworks that

00:06:00,979 --> 00:06:04,200
it links to

00:06:01,920 --> 00:06:06,120
and in a sound installations performance

00:06:04,200 --> 00:06:09,390
the spacial medium so it's about a space

00:06:06,120 --> 00:06:11,400
often a site-specific work that

00:06:09,390 --> 00:06:14,730
incorporates elements of the space in

00:06:11,400 --> 00:06:16,350
this car in this case it's a ship

00:06:14,730 --> 00:06:18,840
the basement of a ship and you can see

00:06:16,350 --> 00:06:21,060
here a metal window kind of in the wall

00:06:18,840 --> 00:06:22,950
has a metal object so the metal objects

00:06:21,060 --> 00:06:24,840
are here like useless loudspeakers and

00:06:22,950 --> 00:06:27,380
the idea of the installation is that

00:06:24,840 --> 00:06:30,330
it's not a pre-rendered sound but it's a

00:06:27,380 --> 00:06:33,990
computation as ongoing so I have to kind

00:06:30,330 --> 00:06:36,570
of be able to formalize algorithms that

00:06:33,990 --> 00:06:40,670
analyze and produce sounds so that's one

00:06:36,570 --> 00:06:46,110
in a way of the use cases for this

00:06:40,670 --> 00:06:50,040
framework today that that is millet the

00:06:46,110 --> 00:06:51,960
second one is life improvisation this

00:06:50,040 --> 00:06:57,210
perhaps you have also seen if you have

00:06:51,960 --> 00:06:59,610
been there in 2000 interface that sits

00:06:57,210 --> 00:07:00,960
on top of sound processes which allow me

00:06:59,610 --> 00:07:03,360
to

00:07:00,960 --> 00:07:06,139
use three defiant

00:07:03,360 --> 00:07:09,419
musical blocks that I program and

00:07:06,139 --> 00:07:13,379
connect them very much like a modular

00:07:09,419 --> 00:07:15,780
sound synthesis system and so this is at

00:07:13,379 --> 00:07:18,120
the time it was it looked similar but

00:07:15,780 --> 00:07:19,440
you're of the old architecture below has

00:07:18,120 --> 00:07:22,889
changed in the meantime

00:07:19,440 --> 00:07:25,979
and now it's also integrated so you can

00:07:22,889 --> 00:07:30,090
for example and create these blocks you

00:07:25,979 --> 00:07:31,919
can configure them and you can also

00:07:30,090 --> 00:07:33,980
with one another what's happening you

00:07:31,919 --> 00:07:33,980
know

00:07:38,400 --> 00:07:44,550
and then the third the third kind of if

00:07:41,699 --> 00:07:48,240
you categorize the media would be tape

00:07:44,550 --> 00:07:50,880
composition this is an screenshot and

00:07:48,240 --> 00:07:53,430
sound example from piece from 2012 layer

00:07:50,880 --> 00:07:55,560
a new law empties in which my idea was

00:07:53,430 --> 00:07:58,650
to start with a concrete sound you can

00:07:55,560 --> 00:08:02,370
see your sonogram saw the spectrum over

00:07:58,650 --> 00:08:04,470
time display of sounds and take it go

00:08:02,370 --> 00:08:07,530
from a very small sound self an existing

00:08:04,470 --> 00:08:09,780
sound and cut it and take it apart to

00:08:07,530 --> 00:08:12,990
create a spacing we decreed it to create

00:08:09,780 --> 00:08:14,790
an empty space in between and let the

00:08:12,990 --> 00:08:18,030
computer run over a database of sounds

00:08:14,790 --> 00:08:20,729
to find a suitable sound in in terms of

00:08:18,030 --> 00:08:22,620
acoustic similarity for example so in

00:08:20,729 --> 00:08:24,840
the second part of that piece I'm using

00:08:22,620 --> 00:08:26,550
also an interact I use both an

00:08:24,840 --> 00:08:29,220
interactive and non interactive process

00:08:26,550 --> 00:08:31,169
to generate these structures so when you

00:08:29,220 --> 00:08:33,180
think of if you are familiar with

00:08:31,169 --> 00:08:34,529
digital audio workstations they have

00:08:33,180 --> 00:08:36,330
these kind of timelines in which you

00:08:34,529 --> 00:08:38,909
play sound files but they have no

00:08:36,330 --> 00:08:41,250
capabilities to algorithmically generate

00:08:38,909 --> 00:08:43,850
these structures at least not without a

00:08:41,250 --> 00:08:48,810
lot of complications so that's another

00:08:43,850 --> 00:08:52,200
scenario I want to address so here are

00:08:48,810 --> 00:08:55,170
again the three layers or simplified

00:08:52,200 --> 00:08:56,970
three layers of the system I want to

00:08:55,170 --> 00:08:58,260
briefly talk about them before I then go

00:08:56,970 --> 00:09:01,890
in the middle part of the presentation

00:08:58,260 --> 00:09:04,140
to demo a little bit the system that's

00:09:01,890 --> 00:09:06,330
that this is lucrezia so that's why then

00:09:04,140 --> 00:09:09,870
the systems called lucre she was born at

00:09:06,330 --> 00:09:11,670
the time I when I created this system so

00:09:09,870 --> 00:09:13,110
lucre is this base layer it has

00:09:11,670 --> 00:09:15,420
basically three functions

00:09:13,110 --> 00:09:19,140
if you want so one is called system

00:09:15,420 --> 00:09:21,300
visaed which means since i want to trace

00:09:19,140 --> 00:09:26,070
different temporalities of working with

00:09:21,300 --> 00:09:28,650
a sound or the creation of sound it can

00:09:26,070 --> 00:09:30,750
abstract over them so there's objects

00:09:28,650 --> 00:09:32,940
that are parametrized with the system

00:09:30,750 --> 00:09:35,040
type the system can be in memory if

00:09:32,940 --> 00:09:37,650
immoral so you create an object you

00:09:35,040 --> 00:09:40,740
manipulated when you process quits the

00:09:37,650 --> 00:09:43,110
object is gone or can be made durable so

00:09:40,740 --> 00:09:44,910
there's so the system can automatically

00:09:43,110 --> 00:09:48,510
persist object so it has a kind of a

00:09:44,910 --> 00:09:50,560
serialization layer built in the whole

00:09:48,510 --> 00:09:54,400
architecture is based on the

00:09:50,560 --> 00:09:57,190
software transactional memory paradigm

00:09:54,400 --> 00:09:58,960
whereas in this case of course because

00:09:57,190 --> 00:10:01,210
we want also to persist so we want to

00:09:58,960 --> 00:10:03,010
have full asset properties there's a

00:10:01,210 --> 00:10:06,760
coupled to all to the transactions of a

00:10:03,010 --> 00:10:08,380
key value store the last one I will not

00:10:06,760 --> 00:10:10,810
talk about this is was basically my

00:10:08,380 --> 00:10:13,510
research the confluent one is then on

00:10:10,810 --> 00:10:15,370
top of the durable layer you also keep

00:10:13,510 --> 00:10:17,500
track of all the modification is three

00:10:15,370 --> 00:10:19,870
of the modifications of objects so you

00:10:17,500 --> 00:10:23,860
can basically go at any point back in

00:10:19,870 --> 00:10:25,900
history of a piece let's say the second

00:10:23,860 --> 00:10:27,700
thing is this object model so what is

00:10:25,900 --> 00:10:29,650
that it's kind of saying we need a

00:10:27,700 --> 00:10:32,110
simple abstraction that can represent

00:10:29,650 --> 00:10:35,530
all these kind of persistable objects in

00:10:32,110 --> 00:10:38,170
the system and one particularity is that

00:10:35,530 --> 00:10:40,510
objects have an attribute map associated

00:10:38,170 --> 00:10:42,820
with them which is a fun for me played

00:10:40,510 --> 00:10:44,860
out very nicely as a very simple

00:10:42,820 --> 00:10:46,810
formalism to be able to interconnect

00:10:44,860 --> 00:10:49,780
objects and to be able to add

00:10:46,810 --> 00:10:53,640
functionality and do things that is more

00:10:49,780 --> 00:10:56,950
common and may be of dynamic languages

00:10:53,640 --> 00:10:59,260
lucre then also kind of adds a number of

00:10:56,950 --> 00:11:00,970
useful objects so for example the

00:10:59,260 --> 00:11:03,250
primitive not all some of the primitive

00:11:00,970 --> 00:11:06,550
types they are wrapped so if you think

00:11:03,250 --> 00:11:08,110
of a Scala int integer number then you

00:11:06,550 --> 00:11:10,210
have a corresponding object called in

00:11:08,110 --> 00:11:12,160
the object so they the s the type

00:11:10,210 --> 00:11:14,140
parameter s here's the system so it's an

00:11:12,160 --> 00:11:16,180
int option is either just in memory or

00:11:14,140 --> 00:11:19,000
in the object that lives in a workspace

00:11:16,180 --> 00:11:20,650
that it persisted to hard drive and

00:11:19,000 --> 00:11:24,730
these are kind of expressions if you

00:11:20,650 --> 00:11:27,480
think of a reactive system the int

00:11:24,730 --> 00:11:30,280
object-- can be mutable and it can then

00:11:27,480 --> 00:11:33,220
publish events when it updates its value

00:11:30,280 --> 00:11:36,870
also collection objects like lists and

00:11:33,220 --> 00:11:39,700
dictionaries from time points to objects

00:11:36,870 --> 00:11:42,070
some processes then obviously the name

00:11:39,700 --> 00:11:47,800
says it it's adds the notion of sound

00:11:42,070 --> 00:11:50,230
and also of time I departed from this

00:11:47,800 --> 00:11:52,390
idea of duplicating the

00:11:50,230 --> 00:11:53,920
model-view-controller metaphor but in

00:11:52,390 --> 00:11:56,710
usually we think of the view as

00:11:53,920 --> 00:11:58,540
something visual and so in this case

00:11:56,710 --> 00:12:00,150
it's oral view I call them all world

00:11:58,540 --> 00:12:03,580
views I don't know if that's like a

00:12:00,150 --> 00:12:04,240
strange term but it means that the model

00:12:03,580 --> 00:12:07,060
lets

00:12:04,240 --> 00:12:09,010
a sound description it's a persistent

00:12:07,060 --> 00:12:10,420
object it lives in your workspace you

00:12:09,010 --> 00:12:12,910
can close it you can come back the

00:12:10,420 --> 00:12:14,680
restroom model but to actually produce

00:12:12,910 --> 00:12:16,959
sound you need to go to a view of that

00:12:14,680 --> 00:12:18,820
model which also means that you can have

00:12:16,959 --> 00:12:20,140
multiple sounding objects from the same

00:12:18,820 --> 00:12:23,140
model which is kind of a really nice

00:12:20,140 --> 00:12:26,670
property and of course also we need to

00:12:23,140 --> 00:12:28,750
bridge between other this atomic

00:12:26,670 --> 00:12:31,180
isolationist on properties of a

00:12:28,750 --> 00:12:33,220
transaction and the side effects of our

00:12:31,180 --> 00:12:36,399
putting sound that this is talking to

00:12:33,220 --> 00:12:38,160
scholar Collider basically the temporal

00:12:36,399 --> 00:12:40,959
dimension is very simple in this system

00:12:38,160 --> 00:12:43,570
it's a really really basic idea it's

00:12:40,959 --> 00:12:45,820
like the divine one sample rate that is

00:12:43,570 --> 00:12:47,620
valid throughout any project no matter

00:12:45,820 --> 00:12:50,020
at which sample rate your sound card

00:12:47,620 --> 00:12:52,000
runs or your sound files are this

00:12:50,020 --> 00:12:54,130
strange number is simply the less common

00:12:52,000 --> 00:12:56,529
multiply of common audio sample rates so

00:12:54,130 --> 00:12:58,300
there's no notion of some musical higher

00:12:56,529 --> 00:13:00,220
abstraction times it's just beats and

00:12:58,300 --> 00:13:01,839
bars and so on that's it was never so

00:13:00,220 --> 00:13:04,570
relevant to me it could be edited at

00:13:01,839 --> 00:13:07,690
some point also of course you can then

00:13:04,570 --> 00:13:11,140
do scheduling in real time and transport

00:13:07,690 --> 00:13:14,410
means to turn models into aural objects

00:13:11,140 --> 00:13:17,290
at specific points in time some process

00:13:14,410 --> 00:13:19,329
then also adds abstractions so objects

00:13:17,290 --> 00:13:22,450
that are relevant to sound progress the

00:13:19,329 --> 00:13:24,550
most relevant one it encapsulates one

00:13:22,450 --> 00:13:27,610
kind of program that produces sound of a

00:13:24,550 --> 00:13:29,800
sound producing function it also has a

00:13:27,610 --> 00:13:31,690
fold that is like a list of objects and

00:13:29,800 --> 00:13:34,240
it has a timeline which Maps time

00:13:31,690 --> 00:13:35,829
intervals to objects and agrifim there's

00:13:34,240 --> 00:13:38,560
more like a break point function Maps

00:13:35,829 --> 00:13:41,560
points in time to objects and many

00:13:38,560 --> 00:13:43,839
others and then these pictures also a

00:13:41,560 --> 00:13:46,180
bit of a simplification so they actually

00:13:43,839 --> 00:13:49,060
more modules linked into millet I also

00:13:46,180 --> 00:13:51,910
mentioned I already mentioned some so

00:13:49,060 --> 00:13:53,589
these are partly taking advantage of

00:13:51,910 --> 00:13:55,540
some processes some of them are just

00:13:53,589 --> 00:13:58,810
based on the on the object model of

00:13:55,540 --> 00:14:00,579
lucre which means that milit basically

00:13:58,810 --> 00:14:02,800
is a layer on top that integrates all

00:14:00,579 --> 00:14:06,970
these things together in one sort of

00:14:02,800 --> 00:14:08,920
stand-alone application it allows you to

00:14:06,970 --> 00:14:10,870
create and open so-called workspaces

00:14:08,920 --> 00:14:13,449
workspaces are basically databases of

00:14:10,870 --> 00:14:15,970
all the objects and it if you are

00:14:13,449 --> 00:14:17,680
familiar with system such as Maximus P

00:14:15,970 --> 00:14:19,839
or pure data you have this notion of

00:14:17,680 --> 00:14:22,570
document or aperture that's basically

00:14:19,839 --> 00:14:24,250
the workspace it's both a document for

00:14:22,570 --> 00:14:26,529
your creation where you create a piece

00:14:24,250 --> 00:14:28,630
and it's also document that plays back

00:14:26,529 --> 00:14:30,070
your P so it's both a composition

00:14:28,630 --> 00:14:34,089
environment and a performance

00:14:30,070 --> 00:14:36,810
environment if you like perhaps also a

00:14:34,089 --> 00:14:39,399
curious choice is that we combine

00:14:36,810 --> 00:14:42,190
graphical editors with text editors so

00:14:39,399 --> 00:14:45,279
I'm using embedded scholar editing in

00:14:42,190 --> 00:14:47,709
the application that I will show now

00:14:45,279 --> 00:14:50,820
it's based on now the new versions using

00:14:47,709 --> 00:14:53,410
a editor that I started to write in

00:14:50,820 --> 00:14:56,230
January called dota but I will say a few

00:14:53,410 --> 00:14:59,580
words about that so now it's time maybe

00:14:56,230 --> 00:14:59,580
to demo

00:15:12,790 --> 00:15:17,920
so mallet is opening up and I'm using I

00:15:15,970 --> 00:15:20,110
can theoretically create a new workspace

00:15:17,920 --> 00:15:21,900
here here are these three system types

00:15:20,110 --> 00:15:24,160
in memory durable and current confluent

00:15:21,900 --> 00:15:26,800
but for the sake of the demonstration

00:15:24,160 --> 00:15:30,040
we'll just use something I have prepared

00:15:26,800 --> 00:15:33,130
in advance and I will open a little memo

00:15:30,040 --> 00:15:36,220
so and don't get lost this is kind of my

00:15:33,130 --> 00:15:37,180
replacement for not having slides now so

00:15:36,220 --> 00:15:39,220
it has a little markdown editor

00:15:37,180 --> 00:15:40,810
integrated which are I find nice for

00:15:39,220 --> 00:15:42,700
having keeping notes that's something

00:15:40,810 --> 00:15:44,500
that interests me a little bit how do

00:15:42,700 --> 00:15:45,850
you compose what does it mean what are

00:15:44,500 --> 00:15:47,530
all the activities you do you're not

00:15:45,850 --> 00:15:49,570
just like editing sound you're also

00:15:47,530 --> 00:15:51,760
thinking about stuff memorizing stuff

00:15:49,570 --> 00:15:54,100
and that's kind of my interest in this

00:15:51,760 --> 00:15:55,660
in this project to understand everything

00:15:54,100 --> 00:15:58,000
that belongs into this process how can

00:15:55,660 --> 00:16:03,220
that be integrated so I said already

00:15:58,000 --> 00:16:07,840
proc is kind of the basic primitive to

00:16:03,220 --> 00:16:09,810
write sound code it's the text size okay

00:16:07,840 --> 00:16:13,270
for you to read it should I make it yeah

00:16:09,810 --> 00:16:17,530
okay because I have this new feature

00:16:13,270 --> 00:16:19,030
that I can make a bigger so so but some

00:16:17,530 --> 00:16:22,030
of the stuff doesn't kind of get so it's

00:16:19,030 --> 00:16:24,010
not it's a swing the UI swing so it's

00:16:22,030 --> 00:16:26,140
not super duper fancy in terms of what

00:16:24,010 --> 00:16:28,960
we know today in browsers but it's it's

00:16:26,140 --> 00:16:30,610
working so this is an example not

00:16:28,960 --> 00:16:32,260
actually written by me just translated

00:16:30,610 --> 00:16:35,140
it's from James McCartney the original

00:16:32,260 --> 00:16:36,730
author of supercollider probably I have

00:16:35,140 --> 00:16:38,860
shown it in the previous example a

00:16:36,730 --> 00:16:40,330
presentation as well so I I don't want

00:16:38,860 --> 00:16:43,060
to spend that much time on it just for

00:16:40,330 --> 00:16:45,790
you to have a course idea so here we are

00:16:43,060 --> 00:16:47,710
basically in an editor that is running

00:16:45,790 --> 00:16:50,980
inside the process of millets so that's

00:16:47,710 --> 00:16:52,660
a bit perhaps similar to I was thinking

00:16:50,980 --> 00:16:55,150
a lot about it when I saw the the

00:16:52,660 --> 00:16:56,260
Jupiter presentation I think there's a

00:16:55,150 --> 00:16:58,900
lot of similarities with these

00:16:56,260 --> 00:17:02,380
interactive environments basically we're

00:16:58,900 --> 00:17:04,030
running code and the code can interact

00:17:02,380 --> 00:17:06,160
with objects of the environment itself

00:17:04,030 --> 00:17:08,709
which is not the normal view of an IDE

00:17:06,160 --> 00:17:10,510
which in which the process of the IDE is

00:17:08,709 --> 00:17:12,310
completely isolated from your project

00:17:10,510 --> 00:17:15,220
your Scala project is not about

00:17:12,310 --> 00:17:18,820
manipulating IntelliJ or our Eclipse but

00:17:15,220 --> 00:17:20,890
in this case it is one thing that is

00:17:18,820 --> 00:17:22,510
becoming problematic is of course in

00:17:20,890 --> 00:17:23,110
real time you want to be able to respond

00:17:22,510 --> 00:17:24,870
very fast

00:17:23,110 --> 00:17:27,990
Scala is not exist extra

00:17:24,870 --> 00:17:31,740
be fast in compilation so if I let me

00:17:27,990 --> 00:17:34,050
try to compile compile okay so you know

00:17:31,740 --> 00:17:35,850
it took maybe a second to compile so if

00:17:34,050 --> 00:17:38,400
I place those sounds on the timeline I

00:17:35,850 --> 00:17:40,290
don't want to know that I need to do it

00:17:38,400 --> 00:17:42,720
a minute a second in advance and have a

00:17:40,290 --> 00:17:44,820
dedicated thread for the compiler so how

00:17:42,720 --> 00:17:47,130
do I solve this these programs they get

00:17:44,820 --> 00:17:50,640
compiled and then they get executed

00:17:47,130 --> 00:17:53,790
actually so that means when I say apply

00:17:50,640 --> 00:17:59,100
what it's doing it's creating and on the

00:17:53,790 --> 00:18:01,440
in it has a in process instance of the

00:17:59,100 --> 00:18:03,270
Scala compiler and compiles the program

00:18:01,440 --> 00:18:05,940
it executes the program the program

00:18:03,270 --> 00:18:08,580
heals a syntax tree of this particular

00:18:05,940 --> 00:18:11,280
domain specific dialect which is for the

00:18:08,580 --> 00:18:13,410
real-time sound processes so basically I

00:18:11,280 --> 00:18:15,150
get a tree the tree is the leaf of the

00:18:13,410 --> 00:18:16,740
trees this out object and then in this

00:18:15,150 --> 00:18:19,740
out object there's a constant and then

00:18:16,740 --> 00:18:22,020
there is this bit is the next one up in

00:18:19,740 --> 00:18:26,160
the level so it's basically a very easy

00:18:22,020 --> 00:18:29,850
way to serialize the stuff in the end

00:18:26,160 --> 00:18:31,470
also and it's fast to serialize and more

00:18:29,850 --> 00:18:33,809
importantly also we don't need to worry

00:18:31,470 --> 00:18:37,470
when when I am changing to so this is

00:18:33,809 --> 00:18:39,990
Scala 2.12 still you can see here I can

00:18:37,470 --> 00:18:42,720
it already runs into thirteen-year but

00:18:39,990 --> 00:18:44,309
so it's I haven't tested as much but the

00:18:42,720 --> 00:18:45,809
problem will be if I compile this to

00:18:44,309 --> 00:18:48,690
Scala binary bytecode

00:18:45,809 --> 00:18:50,460
then we are lost it will be broken in

00:18:48,690 --> 00:18:53,190
the next version so instead I'm

00:18:50,460 --> 00:18:57,140
serializing the trees so how does this

00:18:53,190 --> 00:18:57,140
sound let's see if it works

00:18:57,830 --> 00:19:02,429
that's the famous analog bubbles example

00:19:00,600 --> 00:19:05,090
it's just a sign oscillator that is

00:19:02,429 --> 00:19:07,260
multiples frequency is modulated and

00:19:05,090 --> 00:19:10,710
there's an echo editor which is this

00:19:07,260 --> 00:19:13,620
compact filter effect out means is send

00:19:10,710 --> 00:19:14,720
the signal to a bus and 0s mice on

00:19:13,620 --> 00:19:18,390
campus

00:19:14,720 --> 00:19:20,460
so this editor is basically has been

00:19:18,390 --> 00:19:21,780
exchanged recently so you have of course

00:19:20,460 --> 00:19:26,070
the syntax highlight which is really

00:19:21,780 --> 00:19:27,960
nice you also have some forms of I don't

00:19:26,070 --> 00:19:29,640
know if it's visible yeah you can you

00:19:27,960 --> 00:19:31,380
know look up basically you can go to

00:19:29,640 --> 00:19:33,150
definition of course for five liner

00:19:31,380 --> 00:19:35,100
doesn't make much sense it's using the

00:19:33,150 --> 00:19:39,179
presentation compiler recent currently

00:19:35,100 --> 00:19:41,250
and the editor component itself I'm very

00:19:39,179 --> 00:19:42,929
grateful to Pavarotti know sitting in

00:19:41,250 --> 00:19:45,210
front of me here he has written this

00:19:42,929 --> 00:19:47,490
project called TOI IDE and basically

00:19:45,210 --> 00:19:50,280
this is derived from the TOI IDE which

00:19:47,490 --> 00:19:51,900
is has a kind of a similar feel of

00:19:50,280 --> 00:19:53,880
intelligent men II of the default

00:19:51,900 --> 00:19:56,700
keyboard shortcuts are the same of

00:19:53,880 --> 00:19:59,280
course it's much reduced but yeah we can

00:19:56,700 --> 00:20:01,890
do stuff we can even you know we can

00:19:59,280 --> 00:20:04,770
find autocomplete stuff the other

00:20:01,890 --> 00:20:06,870
completions with but nya

00:20:04,770 --> 00:20:08,790
not-so-nice which you know the next

00:20:06,870 --> 00:20:11,160
version will be nicer but at least you

00:20:08,790 --> 00:20:15,960
can find the symbols and you can also

00:20:11,160 --> 00:20:18,720
look up the integrated API documentation

00:20:15,960 --> 00:20:21,390
also is that's the current solution used

00:20:18,720 --> 00:20:24,140
a scala doc I prove I will hopefully can

00:20:21,390 --> 00:20:24,140
use better

00:20:25,330 --> 00:20:31,080
[Music]

00:20:26,850 --> 00:20:35,370
malleable representation other version

00:20:31,080 --> 00:20:37,470
in the future ok so then I wanted to

00:20:35,370 --> 00:20:43,470
show you quickly how to create a new

00:20:37,470 --> 00:20:46,140
process so this was the example was this

00:20:43,470 --> 00:20:48,480
one Elif saw is short for low frequency

00:20:46,140 --> 00:20:51,420
so oscillators a also oscillator goes

00:20:48,480 --> 00:20:53,340
like this a bit like your old TV screens

00:20:51,420 --> 00:20:54,840
the signal for the horizontal thing it

00:20:53,340 --> 00:20:57,210
goes always from left to right and jumps

00:20:54,840 --> 00:20:59,940
back to left and that's it so that's a

00:20:57,210 --> 00:21:01,679
periodic signal sounds like a pitch with

00:20:59,940 --> 00:21:04,620
a couple of overtones so how do I create

00:21:01,679 --> 00:21:07,970
create a new object as I go through the

00:21:04,620 --> 00:21:11,610
GUI or I also have now this kind of

00:21:07,970 --> 00:21:14,660
keyboard shortcuts the same proc hello

00:21:11,610 --> 00:21:17,250
Scala world Escala world Scala days

00:21:14,660 --> 00:21:20,190
hello world was that mixed up with

00:21:17,250 --> 00:21:23,440
holidays here's my new pockets empty and

00:21:20,190 --> 00:21:28,320
I just paste the example from there

00:21:23,440 --> 00:21:32,289
the API and I should be able to do that

00:21:28,320 --> 00:21:33,539
this kind of technology sound only on

00:21:32,289 --> 00:21:35,799
the left channel for this mono

00:21:33,539 --> 00:21:43,539
superclass is nice property of being

00:21:35,799 --> 00:21:50,320
able to expand erase or collections of

00:21:43,539 --> 00:21:52,809
also vectors basically okay that's fine

00:21:50,320 --> 00:21:54,760
but that's a bit limited now how can i

00:21:52,809 --> 00:21:56,590
that's not I cannot create a piece that

00:21:54,760 --> 00:22:01,059
I can maybe create a piece but I would

00:21:56,590 --> 00:22:04,030
like to interact with environment so let

00:22:01,059 --> 00:22:06,760
me introduce maybe the environment let's

00:22:04,030 --> 00:22:10,000
say I want to control this basic

00:22:06,760 --> 00:22:15,669
parameter here and then I can patch that

00:22:10,000 --> 00:22:17,260
here something like that it has a

00:22:15,669 --> 00:22:18,580
default so it should still sound the

00:22:17,260 --> 00:22:21,480
same

00:22:18,580 --> 00:22:23,710
and then I can show you here their

00:22:21,480 --> 00:22:25,840
so-called attribute map so each object

00:22:23,710 --> 00:22:28,929
has this kind of key value map which is

00:22:25,840 --> 00:22:30,159
a kind of or strange thing but one uses

00:22:28,929 --> 00:22:32,830
when you get used to it it's kind of

00:22:30,159 --> 00:22:35,169
very intuitive so I can actually create

00:22:32,830 --> 00:22:35,780
a key here and at the same I could

00:22:35,169 --> 00:22:38,940
destroy

00:22:35,780 --> 00:22:38,940
[Music]

00:22:45,990 --> 00:22:52,960
so that gives you a very coarse idea of

00:22:49,000 --> 00:22:54,970
this that's also a patterns show them

00:22:52,960 --> 00:22:56,740
very briefly so basically we have

00:22:54,970 --> 00:22:59,320
different these cells in here one is

00:22:56,740 --> 00:23:01,390
this real-time DSL for sound synthesis

00:22:59,320 --> 00:23:04,450
processes the patterns they basically

00:23:01,390 --> 00:23:06,280
just generators of sequences so a

00:23:04,450 --> 00:23:08,140
Brownian motion starts as a random

00:23:06,280 --> 00:23:10,180
number and then goes and steps up and

00:23:08,140 --> 00:23:15,130
down and this range that I specify here

00:23:10,180 --> 00:23:18,970
so if I evaluate that here then I can

00:23:15,130 --> 00:23:21,370
see it was creating it was it picked 62

00:23:18,970 --> 00:23:25,240
is the first one and then goes down down

00:23:21,370 --> 00:23:26,950
up up up down so it's just a in Max is

00:23:25,240 --> 00:23:28,660
called drunken stuck at somebody walking

00:23:26,950 --> 00:23:31,230
drunk do you go a little bit you correct

00:23:28,660 --> 00:23:33,700
you go and you stay within those bounds

00:23:31,230 --> 00:23:35,920
how do you make a sound of that well you

00:23:33,700 --> 00:23:38,500
simply say that's a parameter first I

00:23:35,920 --> 00:23:40,060
won't let say the pitch and I'm going to

00:23:38,500 --> 00:23:40,600
show that here so that's a bit more

00:23:40,060 --> 00:23:42,940
complex

00:23:40,600 --> 00:23:48,300
the nice thing of this is I can still

00:23:42,940 --> 00:23:50,680
use functions local functions because

00:23:48,300 --> 00:23:52,990
we're still evaluating a tree we're

00:23:50,680 --> 00:23:55,330
still in the end serializing the pattern

00:23:52,990 --> 00:23:56,980
tree but I can use auxiliary functions

00:23:55,330 --> 00:23:59,320
that will just be executed at once so

00:23:56,980 --> 00:24:03,490
still not a problem for there for the

00:23:59,320 --> 00:24:06,340
persistence of that so this bind our

00:24:03,490 --> 00:24:08,560
pattern is a special pattern that simply

00:24:06,340 --> 00:24:11,500
takes kind of a map from parameters to

00:24:08,560 --> 00:24:13,480
stuff and it has conventional keys the

00:24:11,500 --> 00:24:15,400
convention for plays like lookup a

00:24:13,480 --> 00:24:17,620
process that you can play and all the

00:24:15,400 --> 00:24:21,490
other parents parameters will be passed

00:24:17,620 --> 00:24:23,350
into that process so that's also very

00:24:21,490 --> 00:24:25,090
boring example this is the drunk walk

00:24:23,350 --> 00:24:28,390
basically with the sine current link

00:24:25,090 --> 00:24:30,190
that blank and then I can go from there

00:24:28,390 --> 00:24:31,810
to more complex structures for campus

00:24:30,190 --> 00:24:34,270
for example I can create parallel

00:24:31,810 --> 00:24:38,080
patterns so they will be interleaved in

00:24:34,270 --> 00:24:40,780
time it's just two two pictures now you

00:24:38,080 --> 00:24:43,780
can see they're walking in random ranges

00:24:40,780 --> 00:24:49,180
in two different registers and also at

00:24:43,780 --> 00:24:50,620
different paces okay that one was so

00:24:49,180 --> 00:24:53,020
that's already giving us another

00:24:50,620 --> 00:24:54,760
abstraction and then maybe a time line

00:24:53,020 --> 00:24:56,000
as an example where I don't have them

00:24:54,760 --> 00:24:58,160
here I think I put it

00:24:56,000 --> 00:25:00,170
here I wanted to create it from scratch

00:24:58,160 --> 00:25:01,820
I think it's taking over too much time

00:25:00,170 --> 00:25:03,740
so I'm gonna just show it so the

00:25:01,820 --> 00:25:06,440
timeline object allows us then to place

00:25:03,740 --> 00:25:09,670
those objects in a in a linear time line

00:25:06,440 --> 00:25:13,370
let's say so I can basically say sketch

00:25:09,670 --> 00:25:17,480
sequence those two things and I can of

00:25:13,370 --> 00:25:19,070
course add other options sorry for the

00:25:17,480 --> 00:25:20,750
California example I was not very

00:25:19,070 --> 00:25:23,660
inspired when I was doing that but you

00:25:20,750 --> 00:25:26,780
can also use very simple you can also

00:25:23,660 --> 00:25:28,460
use we can use this one we can just it

00:25:26,780 --> 00:25:32,680
has this method of drag and drop so I

00:25:28,460 --> 00:25:36,830
can actually just add that one here

00:25:32,680 --> 00:25:41,050
there's this example of the sort of

00:25:36,830 --> 00:25:43,370
oscillator I can also use sound files

00:25:41,050 --> 00:25:45,950
the sound files will show here nicely

00:25:43,370 --> 00:25:48,140
with sonograms why doesn't play well

00:25:45,950 --> 00:25:50,510
because it uses it doesn't want to

00:25:48,140 --> 00:25:52,640
prescribe the bus to which it's playing

00:25:50,510 --> 00:25:54,530
so if I go into the source code it's

00:25:52,640 --> 00:25:55,940
just this is also the kind of scholar

00:25:54,530 --> 00:25:58,460
Collider super cool area code it's just

00:25:55,940 --> 00:26:00,710
taking a sound file playing that back to

00:25:58,460 --> 00:26:02,960
an internal bus this is the code for

00:26:00,710 --> 00:26:06,850
internal bus so I I can quickly wire

00:26:02,960 --> 00:26:11,240
that up here I take a mono to stereo

00:26:06,850 --> 00:26:15,110
signal and I can connect them and you

00:26:11,240 --> 00:26:16,700
see the lead Emily common note okay so I

00:26:15,110 --> 00:26:22,550
have a lot of different abstractions

00:26:16,700 --> 00:26:24,350
here I don't know how I'm on time I'm

00:26:22,550 --> 00:26:26,420
thinking okay

00:26:24,350 --> 00:26:28,600
xscape I haven't showed yet but maybe

00:26:26,420 --> 00:26:30,620
that's the last thing to show as a demo

00:26:28,600 --> 00:26:34,280
so we have enough time also for

00:26:30,620 --> 00:26:38,240
questions F escapes oh look this is kind

00:26:34,280 --> 00:26:40,640
of a third language now but very similar

00:26:38,240 --> 00:26:42,770
to the real-time language is just if you

00:26:40,640 --> 00:26:45,110
look carefully added so you can use

00:26:42,770 --> 00:26:46,810
unary binary operators to work with

00:26:45,110 --> 00:26:49,940
signals I think it's a very interesting

00:26:46,810 --> 00:26:51,560
it can it is already and it could become

00:26:49,940 --> 00:26:54,050
a very interesting signal processing

00:26:51,560 --> 00:26:55,690
language there's of course specialized

00:26:54,050 --> 00:26:58,700
signal processing languages that have

00:26:55,690 --> 00:27:02,000
good adoption that's a Faust for example

00:26:58,700 --> 00:27:04,550
but it's not so trivial to write a nice

00:27:02,000 --> 00:27:06,610
a signal processing language and here I

00:27:04,550 --> 00:27:08,290
try to copy this youjin more

00:27:06,610 --> 00:27:10,780
from super collider to non-real-time

00:27:08,290 --> 00:27:12,780
it's implemented using echo streams so

00:27:10,780 --> 00:27:16,480
all these huge ins they're basically

00:27:12,780 --> 00:27:18,760
forming a tree of nodes in an echo in

00:27:16,480 --> 00:27:21,730
our stream system I think I have

00:27:18,760 --> 00:27:23,530
somewhere here this is my ugly example

00:27:21,730 --> 00:27:25,570
of using action actions are basically

00:27:23,530 --> 00:27:27,780
your way you can inject any scalar code

00:27:25,570 --> 00:27:29,620
so this one will break after binary

00:27:27,780 --> 00:27:32,200
compatibility breaks it will just

00:27:29,620 --> 00:27:35,080
execute the code as a program it will

00:27:32,200 --> 00:27:37,420
compile to a function and execute the

00:27:35,080 --> 00:27:39,370
function this is just for me to be able

00:27:37,420 --> 00:27:40,660
to open this shell program here so this

00:27:39,370 --> 00:27:42,580
is basically the problem you have

00:27:40,660 --> 00:27:45,280
currently I have currently a lot an F

00:27:42,580 --> 00:27:47,559
scape you run a lot into deadlock sanaka

00:27:45,280 --> 00:27:48,880
stream if you are using buffering I'm

00:27:47,559 --> 00:27:50,740
using buffering because I don't want to

00:27:48,880 --> 00:27:52,720
process sample by sample so they aren't

00:27:50,740 --> 00:27:54,880
blocks and when you happen and you have

00:27:52,720 --> 00:27:57,010
in signal processing often diamond

00:27:54,880 --> 00:27:59,590
structures and every diamond structure

00:27:57,010 --> 00:28:02,740
is a potential problem for creating this

00:27:59,590 --> 00:28:04,900
kind of deadlocks where one is waiting

00:28:02,740 --> 00:28:06,669
for a signal and two others are cannot

00:28:04,900 --> 00:28:08,500
produce because they are blocked so

00:28:06,669 --> 00:28:11,110
that's something to in that's a new

00:28:08,500 --> 00:28:15,419
research topic to automatically insert

00:28:11,110 --> 00:28:19,030
buffering buffering nodes in the system

00:28:15,419 --> 00:28:20,860
so this is just so this is an example is

00:28:19,030 --> 00:28:23,679
already quite lengthy so just for you to

00:28:20,860 --> 00:28:25,330
see FFT is a typical signal process to

00:28:23,679 --> 00:28:28,720
take the spectrum it's doing a

00:28:25,330 --> 00:28:30,520
convolution with a with a noise so what

00:28:28,720 --> 00:28:32,350
is doing it's taking a sound file is

00:28:30,520 --> 00:28:36,610
this one that we already heard Shiva

00:28:32,350 --> 00:28:39,100
don't you see Dalida muli come in node

00:28:36,610 --> 00:28:40,780
and then it applies this convolution

00:28:39,100 --> 00:28:43,270
with the noise which just makes it

00:28:40,780 --> 00:28:45,460
blurry in time so it's a rendering I

00:28:43,270 --> 00:28:47,799
call rendering it goes fast or slow

00:28:45,460 --> 00:28:49,929
depending on the process and I already

00:28:47,799 --> 00:28:52,799
imported the output here but usually you

00:28:49,929 --> 00:28:52,799
would have to do that separately

00:28:52,940 --> 00:28:56,870
you can still hear the responses of the

00:28:55,040 --> 00:28:59,400
boys

00:28:56,870 --> 00:29:01,590
but of course there now

00:28:59,400 --> 00:29:04,500
the noise the impulse response is five

00:29:01,590 --> 00:29:10,950
seconds very long delay very long

00:29:04,500 --> 00:29:15,150
reverberation and I think with that I

00:29:10,950 --> 00:29:18,300
will quit the demo unless I missed

00:29:15,150 --> 00:29:20,010
something maybe just as a side note

00:29:18,300 --> 00:29:23,300
escape can also be used for image

00:29:20,010 --> 00:29:25,830
processing so this zooming out of the

00:29:23,300 --> 00:29:27,330
example in the beginning I actually did

00:29:25,830 --> 00:29:28,770
it with F scape just for the sake of it

00:29:27,330 --> 00:29:31,230
you can do it with any video program but

00:29:28,770 --> 00:29:33,660
since I have it at to my avail I did

00:29:31,230 --> 00:29:37,860
escape so you can I do also video and

00:29:33,660 --> 00:29:41,070
image processing with the F scale that's

00:29:37,860 --> 00:29:43,170
perhaps enough for the demo so let's go

00:29:41,070 --> 00:29:46,320
back here I think I'm almost at then I

00:29:43,170 --> 00:29:49,520
don't have much slides left this is a

00:29:46,320 --> 00:29:51,840
maybe a kind of a recap of how if you've

00:29:49,520 --> 00:29:53,310
you know you step back from all of this

00:29:51,840 --> 00:29:55,260
and you rethink of what is happening

00:29:53,310 --> 00:29:59,220
here what what is the system actually

00:29:55,260 --> 00:30:01,920
that we have created this is a grayish

00:29:59,220 --> 00:30:03,840
part for me that's kind of the layer

00:30:01,920 --> 00:30:06,090
that I have presented so I call it an

00:30:03,840 --> 00:30:08,340
IDE is maybe it's a mouthful it's of

00:30:06,090 --> 00:30:10,530
course not a fully fledged IDE like we

00:30:08,340 --> 00:30:15,380
know from programming language but it it

00:30:10,530 --> 00:30:17,370
it does use this idea of integrating

00:30:15,380 --> 00:30:19,080
different components together in the

00:30:17,370 --> 00:30:22,290
development and execution of sound

00:30:19,080 --> 00:30:24,900
objects and you I hope and I think it

00:30:22,290 --> 00:30:28,830
can be used also with different profiles

00:30:24,900 --> 00:30:31,230
of users or artists you could in a way

00:30:28,830 --> 00:30:32,940
like you can give a PD or max patch to

00:30:31,230 --> 00:30:35,550
somebody they don't necessarily need to

00:30:32,940 --> 00:30:37,980
know video max if it's a program that

00:30:35,550 --> 00:30:39,780
they can execute and configure that will

00:30:37,980 --> 00:30:41,580
be here on the left side so you give you

00:30:39,780 --> 00:30:43,620
can create a piece and give it to

00:30:41,580 --> 00:30:46,680
somebody whether that's an artist or not

00:30:43,620 --> 00:30:48,900
and or a scientist what that was the

00:30:46,680 --> 00:30:51,180
case with the sonification we gave it to

00:30:48,900 --> 00:30:53,370
South Africa to climatologists and they

00:30:51,180 --> 00:30:56,040
had to configure the sonification using

00:30:53,370 --> 00:30:57,660
it user interface components of course

00:30:56,040 --> 00:30:59,850
they didn't program the sounds but you

00:30:57,660 --> 00:31:03,000
can they can these two things can live

00:30:59,850 --> 00:31:04,920
in the same application the advanced

00:31:03,000 --> 00:31:08,520
user then of course will take advantage

00:31:04,920 --> 00:31:10,710
of this ability to program different

00:31:08,520 --> 00:31:12,480
components of the system using Scala

00:31:10,710 --> 00:31:14,250
which I find a very nice

00:31:12,480 --> 00:31:16,800
so I just hope that the editor will be a

00:31:14,250 --> 00:31:19,050
bit more comfortable in the future and

00:31:16,800 --> 00:31:22,020
of course the application itself is

00:31:19,050 --> 00:31:23,820
still developed in a regular ID it's

00:31:22,020 --> 00:31:27,270
developed in I use IntelliJ at the

00:31:23,820 --> 00:31:29,430
moment so I create also when I create

00:31:27,270 --> 00:31:31,320
sound pieces I often write directly with

00:31:29,430 --> 00:31:33,630
the API of some processes in an

00:31:31,320 --> 00:31:36,930
intelligent projects alright I run I

00:31:33,630 --> 00:31:38,280
stop I write around and so I'm trying in

00:31:36,930 --> 00:31:40,380
a way to move the OP I don't know why

00:31:38,280 --> 00:31:41,670
the arrow is pointing this way I'm

00:31:40,380 --> 00:31:45,270
trying to move in the opposite direction

00:31:41,670 --> 00:31:46,980
and try to see if this system can be

00:31:45,270 --> 00:31:49,380
made powerful enough or comfortable

00:31:46,980 --> 00:31:50,790
enough that I can develop pieces more

00:31:49,380 --> 00:31:55,830
and more in the system and not having to

00:31:50,790 --> 00:31:58,340
go back to a full IDE so what's up for

00:31:55,830 --> 00:32:00,750
the future of this this is a bit of a

00:31:58,340 --> 00:32:02,910
grab back let's say I didn't really

00:32:00,750 --> 00:32:05,250
prioritize this is just like all the

00:32:02,910 --> 00:32:06,990
things that come to my mind that I find

00:32:05,250 --> 00:32:10,740
would be interesting as future

00:32:06,990 --> 00:32:12,480
developments one of them is I really

00:32:10,740 --> 00:32:14,250
would like in the next year or so boost

00:32:12,480 --> 00:32:16,200
but I still run the current a research

00:32:14,250 --> 00:32:20,490
project to a sound installation that

00:32:16,200 --> 00:32:22,890
runs in the browser using some processes

00:32:20,490 --> 00:32:25,370
not not millet the IDE or you don't need

00:32:22,890 --> 00:32:27,630
but the good thing is the workspaces you

00:32:25,370 --> 00:32:29,880
can run them and some processors as long

00:32:27,630 --> 00:32:31,620
as you don't need UI you just want to

00:32:29,880 --> 00:32:35,760
run the processes you don't need the UI

00:32:31,620 --> 00:32:39,420
and so I attempt I test compiled already

00:32:35,760 --> 00:32:41,640
a bit of escape so somebody I don't know

00:32:39,420 --> 00:32:44,670
who's - also but there's an effort to

00:32:41,640 --> 00:32:47,940
make a scholar j/s version of occur

00:32:44,670 --> 00:32:49,410
stream so that was running I would have

00:32:47,940 --> 00:32:51,390
to figure out how to work with sound

00:32:49,410 --> 00:32:53,070
files and sound output but the general

00:32:51,390 --> 00:32:56,460
thing it would run in the browser and

00:32:53,070 --> 00:32:58,140
I'm also hoping for maybe a very reduced

00:32:56,460 --> 00:32:59,430
sounds and this is server much most

00:32:58,140 --> 00:33:03,660
reduced and super cool either maybe a

00:32:59,430 --> 00:33:05,220
smaller but in the same philosophy using

00:33:03,660 --> 00:33:07,770
maybe Scala native with webassembly

00:33:05,220 --> 00:33:10,040
let's see if that happens then more on

00:33:07,770 --> 00:33:12,480
millet itself on the ID on the IDE

00:33:10,040 --> 00:33:13,800
networking became very important for me

00:33:12,480 --> 00:33:15,060
so I do a lot of sound installation that

00:33:13,800 --> 00:33:16,530
run on little raspberry PI's because

00:33:15,060 --> 00:33:18,840
they're affordable you usually need a

00:33:16,530 --> 00:33:20,700
lot of them so they need to be networked

00:33:18,840 --> 00:33:23,340
that's a formalism that should be baked

00:33:20,700 --> 00:33:24,790
into the idea of the workspace how can

00:33:23,340 --> 00:33:28,540
you distribute a workspace

00:33:24,790 --> 00:33:30,070
and also perhaps think about we already

00:33:28,540 --> 00:33:32,200
have transactions and we know all from

00:33:30,070 --> 00:33:33,850
normal deposit and normal versioning

00:33:32,200 --> 00:33:35,800
systems you have the users there they

00:33:33,850 --> 00:33:39,120
can different people can contribute so

00:33:35,800 --> 00:33:41,890
how can we maybe add this kind of

00:33:39,120 --> 00:33:45,610
collaborative aspect to the to the

00:33:41,890 --> 00:33:47,470
system so total Vidor

00:33:45,610 --> 00:33:49,090
it's currently using the Scala

00:33:47,470 --> 00:33:51,760
presentation compiler I just hacked it

00:33:49,090 --> 00:33:56,050
in a few days let's say so it's very

00:33:51,760 --> 00:33:57,790
simple there the hope is that somebody

00:33:56,050 --> 00:34:00,280
may be super inspired and wants to write

00:33:57,790 --> 00:34:02,140
a metals alan LSP client and we can use

00:34:00,280 --> 00:34:05,680
metals in the future maybe I do it

00:34:02,140 --> 00:34:07,480
myself if I find time I don't know but

00:34:05,680 --> 00:34:10,090
that I think would be SuperDuper great

00:34:07,480 --> 00:34:12,639
to have to be have a language server

00:34:10,090 --> 00:34:14,470
client then though as a research project

00:34:12,639 --> 00:34:16,929
I think the transition to Dottie will be

00:34:14,470 --> 00:34:19,600
super exciting so it's a completely has

00:34:16,929 --> 00:34:22,419
new metaphors new new abstraction so how

00:34:19,600 --> 00:34:25,300
can this big system be changed actually

00:34:22,419 --> 00:34:27,159
what do we have to change and then what

00:34:25,300 --> 00:34:29,020
Rory graves was talking about this idea

00:34:27,159 --> 00:34:31,120
of the inverse index is very important

00:34:29,020 --> 00:34:32,950
you can get lost in this windowing

00:34:31,120 --> 00:34:35,710
system you don't know where an object is

00:34:32,950 --> 00:34:38,080
used so being able to build like an IDE

00:34:35,710 --> 00:34:41,649
say find usages something like that we

00:34:38,080 --> 00:34:43,929
will need and also writing code it's

00:34:41,649 --> 00:34:46,090
it's kind of annoying that you cannot

00:34:43,929 --> 00:34:48,210
just write dot map dot flood map you can

00:34:46,090 --> 00:34:52,270
in some cases with patterns you can

00:34:48,210 --> 00:34:54,520
because you have a container and but it

00:34:52,270 --> 00:34:55,360
would be nice maybe to look at if we

00:34:54,520 --> 00:34:57,880
cannot

00:34:55,360 --> 00:35:00,100
maybe persist some stuff of direct

00:34:57,880 --> 00:35:02,740
scholar code if it's kind of compatible

00:35:00,100 --> 00:35:05,500
maybe we can use something that goes in

00:35:02,740 --> 00:35:07,140
that direction and last not least I'm

00:35:05,500 --> 00:35:09,190
hoping that more people use the system

00:35:07,140 --> 00:35:11,770
it's of course a very idiosyncratic

00:35:09,190 --> 00:35:14,290
system and I off obviously has a lot of

00:35:11,770 --> 00:35:15,940
box I'm basically the only developer but

00:35:14,290 --> 00:35:18,100
I'm very happy to help people to get

00:35:15,940 --> 00:35:18,640
started and also contributors are very

00:35:18,100 --> 00:35:20,980
welcome

00:35:18,640 --> 00:35:22,180
whatever your interest is I think this

00:35:20,980 --> 00:35:25,900
system can be used in many different

00:35:22,180 --> 00:35:30,160
ways so there's the website for millet

00:35:25,900 --> 00:35:31,630
it's a fully open source system and they

00:35:30,160 --> 00:35:32,860
has instructions how to install it and

00:35:31,630 --> 00:35:35,980
so on you can also compile it from

00:35:32,860 --> 00:35:38,930
source this is the research project this

00:35:35,980 --> 00:35:42,630
my email address I'm not using this

00:35:38,930 --> 00:35:44,400
Google Facebook whatever but if you go

00:35:42,630 --> 00:35:46,350
to my web page and you using but you out

00:35:44,400 --> 00:35:48,570
by chance using master down or Diaspro

00:35:46,350 --> 00:35:51,030
you can also find my contacts there so I

00:35:48,570 --> 00:35:53,060
think now we have a few minutes left for

00:35:51,030 --> 00:35:53,060
questions

00:35:53,900 --> 00:36:02,789
[Applause]

00:36:09,200 --> 00:36:13,220
first of all Wow

00:36:13,910 --> 00:36:19,950
what can I can actually what can you do

00:36:17,340 --> 00:36:23,880
with this software what you can do with

00:36:19,950 --> 00:36:26,910
Maximus P for example and why why did

00:36:23,880 --> 00:36:29,760
you just scholar okay

00:36:26,910 --> 00:36:31,440
so at the time so when I started

00:36:29,760 --> 00:36:33,390
obviously it you can see the trajectory

00:36:31,440 --> 00:36:36,900
is coming from super collider I always

00:36:33,390 --> 00:36:40,410
prefer to write text and to interlink

00:36:36,900 --> 00:36:42,420
objects I use also a PD which is an

00:36:40,410 --> 00:36:44,940
open-source version and open-source

00:36:42,420 --> 00:36:46,680
variant of Mac's it's very useful for

00:36:44,940 --> 00:36:48,540
workshops because people that's why I

00:36:46,680 --> 00:36:51,030
kind of envy is people can get started

00:36:48,540 --> 00:36:53,190
with PD in half an hour basically it's a

00:36:51,030 --> 00:36:55,890
really nice system to teach and use of

00:36:53,190 --> 00:36:57,660
workshops but also it's a bit like you

00:36:55,890 --> 00:36:59,790
have this different kind of slopes you

00:36:57,660 --> 00:37:02,190
can get set very fast but then when you

00:36:59,790 --> 00:37:04,980
make some even some trivial stuff is

00:37:02,190 --> 00:37:07,080
increasing incredibly complicated you

00:37:04,980 --> 00:37:08,760
know mapping over a collection that's

00:37:07,080 --> 00:37:10,140
something we can do in a teener and a

00:37:08,760 --> 00:37:11,880
piece of code but that's impossible

00:37:10,140 --> 00:37:14,130
almost to do it's not impossible what

00:37:11,880 --> 00:37:15,750
you you know you can you almost shoot

00:37:14,130 --> 00:37:17,940
yourself if you want to do that almost

00:37:15,750 --> 00:37:19,560
the channel sound it's not a matter if

00:37:17,940 --> 00:37:20,670
maybe it's coming I don't know about

00:37:19,560 --> 00:37:22,080
what they're working on but

00:37:20,670 --> 00:37:25,110
multi-channel sound has been always a

00:37:22,080 --> 00:37:28,320
problem I think for these visual systems

00:37:25,110 --> 00:37:30,540
and perhaps I don't know if I quit

00:37:28,320 --> 00:37:34,370
already but so the new system also has

00:37:30,540 --> 00:37:37,650
kind of a fifth or fourth language for

00:37:34,370 --> 00:37:41,130
creating widgets so I never liked the

00:37:37,650 --> 00:37:43,230
idea of PD and Mac's that you have the

00:37:41,130 --> 00:37:46,290
sound producing logic along with the

00:37:43,230 --> 00:37:48,090
interacting logic it makes sense for

00:37:46,290 --> 00:37:49,740
some simple things but otherwise it gets

00:37:48,090 --> 00:37:51,220
really in your way I don't think it's a

00:37:49,740 --> 00:37:53,619
good decision

00:37:51,220 --> 00:37:55,510
I think it's much better to ask to to

00:37:53,619 --> 00:37:57,460
have different perspectives on what

00:37:55,510 --> 00:37:58,930
you're doing one of them can be a user

00:37:57,460 --> 00:38:01,810
interface an element can be the sound

00:37:58,930 --> 00:38:03,970
logic and in a way are trying to go and

00:38:01,810 --> 00:38:06,190
I'll try in a way to understand what is

00:38:03,970 --> 00:38:08,589
it that makes PDM acts so attractive and

00:38:06,190 --> 00:38:09,760
many people use it because it's very

00:38:08,589 --> 00:38:12,700
they're very um

00:38:09,760 --> 00:38:14,890
usability is very good it's just I don't

00:38:12,700 --> 00:38:17,859
think the scale read very well but this

00:38:14,890 --> 00:38:19,569
kind of accessibility is something I

00:38:17,859 --> 00:38:21,880
would like to integrate but it's of

00:38:19,569 --> 00:38:24,040
course these are like application that

00:38:21,880 --> 00:38:26,980
exists for very long time but it's as a

00:38:24,040 --> 00:38:29,530
company behind but it's possible I think

00:38:26,980 --> 00:38:31,869
if we can go in that direction so why

00:38:29,530 --> 00:38:33,760
choose Scala and well I already

00:38:31,869 --> 00:38:36,910
mentioned one point in the beginning my

00:38:33,760 --> 00:38:39,130
previous background was in in Java so

00:38:36,910 --> 00:38:41,380
for me I wanted something that I had a

00:38:39,130 --> 00:38:43,329
soft start was at the time so I wanted

00:38:41,380 --> 00:38:45,310
to be able to use the libraries that I

00:38:43,329 --> 00:38:48,990
had already written and you know move

00:38:45,310 --> 00:38:51,700
them slowly and then I was interested in

00:38:48,990 --> 00:38:54,240
being able to write a music language for

00:38:51,700 --> 00:38:56,079
a language of computer music without

00:38:54,240 --> 00:38:57,940
writing boilerplate

00:38:56,079 --> 00:38:59,619
so Java is not an option for that you

00:38:57,940 --> 00:39:01,359
want something that looks like a ruby or

00:38:59,619 --> 00:39:04,990
like python or like a dynamic language

00:39:01,359 --> 00:39:06,550
and scholars fantastic language for

00:39:04,990 --> 00:39:08,680
creating this kind of domain-specific

00:39:06,550 --> 00:39:10,180
languages without office cating the

00:39:08,680 --> 00:39:13,319
stuff it can you can still make it very

00:39:10,180 --> 00:39:17,079
clean without you know two crazy

00:39:13,319 --> 00:39:18,940
constructions but you take away the need

00:39:17,079 --> 00:39:21,300
from the user to write stuff that they

00:39:18,940 --> 00:39:23,710
don't really need to know or write about

00:39:21,300 --> 00:39:26,050
so I think scholars really in a sweet

00:39:23,710 --> 00:39:29,650
spot there and of course back into when

00:39:26,050 --> 00:39:33,060
I started was through dot 2.7 so it was

00:39:29,650 --> 00:39:35,079
nowhere near where we are now for

00:39:33,060 --> 00:39:37,089
example is like names and default

00:39:35,079 --> 00:39:39,700
arguments being able to do that it's

00:39:37,089 --> 00:39:41,440
such a great thing and it it has always

00:39:39,700 --> 00:39:43,300
improved in that direction so I think it

00:39:41,440 --> 00:39:45,190
was it's a good language to do that even

00:39:43,300 --> 00:39:46,569
if many people who says maybe not the

00:39:45,190 --> 00:39:48,369
beginner's language but I think it's

00:39:46,569 --> 00:39:50,410
brilliant really nice language to

00:39:48,369 --> 00:39:51,190
integrate so there's some systems you

00:39:50,410 --> 00:39:54,640
know as I say

00:39:51,190 --> 00:39:57,040
godo engine open-source game engine it's

00:39:54,640 --> 00:39:59,079
written in C++ and you have to learn a

00:39:57,040 --> 00:40:01,210
scripting language that is not exactly

00:39:59,079 --> 00:40:03,369
Python but similar to Python to do the

00:40:01,210 --> 00:40:04,580
things why don't we stay in the same

00:40:03,369 --> 00:40:15,590
code why don't we stay

00:40:04,580 --> 00:40:17,750
the same language so great talk I'm

00:40:15,590 --> 00:40:20,870
really interested in the role of this

00:40:17,750 --> 00:40:23,090
offline rendering process and sort of

00:40:20,870 --> 00:40:25,310
what you do with f escape and all these

00:40:23,090 --> 00:40:28,220
non real-time techniques that you can't

00:40:25,310 --> 00:40:33,620
do with a real-time DSP language like

00:40:28,220 --> 00:40:35,390
supercollider yeah yeah so usually so

00:40:33,620 --> 00:40:37,250
I'm very good and making the stuff so

00:40:35,390 --> 00:40:39,500
that it's slower than real time

00:40:37,250 --> 00:40:42,080
I mean you when you start to experiment

00:40:39,500 --> 00:40:43,910
and also of course the system it's it's

00:40:42,080 --> 00:40:45,830
I don't think it's nowhere near and

00:40:43,910 --> 00:40:47,450
Fausto's these kind of languages which

00:40:45,830 --> 00:40:49,550
are written by engineers who are into

00:40:47,450 --> 00:40:51,380
signal processing and they try to make

00:40:49,550 --> 00:40:53,960
the maximum out of it so it's probably

00:40:51,380 --> 00:40:55,070
not the fastest way to do it but for me

00:40:53,960 --> 00:40:58,070
it's more important that it's a

00:40:55,070 --> 00:41:00,110
possibility to experiment with and for

00:40:58,070 --> 00:41:02,570
me always the non real-time stuff was

00:41:00,110 --> 00:41:06,260
interesting because I don't know if I

00:41:02,570 --> 00:41:12,470
have this slide I have some extra slides

00:41:06,260 --> 00:41:27,520
somewhere well if I find it that is let

00:41:12,470 --> 00:41:32,120
me see can we make that bigger no yeah

00:41:27,520 --> 00:41:34,160
so in a way for me it's interesting when

00:41:32,120 --> 00:41:35,840
I look at compositional process then

00:41:34,160 --> 00:41:38,300
people get easily excited about

00:41:35,840 --> 00:41:40,310
real-time this engagement that you are

00:41:38,300 --> 00:41:42,590
kind of synchronous with the system you

00:41:40,310 --> 00:41:45,980
do something as reacts you do something

00:41:42,590 --> 00:41:47,630
it reacts but I mean traditional

00:41:45,980 --> 00:41:49,580
instrumental composition completely

00:41:47,630 --> 00:41:51,380
different you sit somewhere with your

00:41:49,580 --> 00:41:54,320
pencil and your pencil something and

00:41:51,380 --> 00:41:55,640
then you get to convince an ensemble

00:41:54,320 --> 00:41:57,260
that they will perform your piece then

00:41:55,640 --> 00:41:58,550
you go to the performance and then

00:41:57,260 --> 00:42:00,770
you're frustrated because they don't do

00:41:58,550 --> 00:42:02,420
it like you expected and then you go and

00:42:00,770 --> 00:42:04,160
rewrite it maybe that's maybe the other

00:42:02,420 --> 00:42:06,500
extreme but I think this kind of

00:42:04,160 --> 00:42:08,330
distance between I like the idea of

00:42:06,500 --> 00:42:11,360
computation as something that has its

00:42:08,330 --> 00:42:14,810
inherent speed that is not tied to the

00:42:11,360 --> 00:42:16,760
acoustic reproduction of a signal so our

00:42:14,810 --> 00:42:17,600
for me it's kind of poetic to say that I

00:42:16,760 --> 00:42:19,580
cannot put

00:42:17,600 --> 00:42:20,900
computer - you know render this stuff

00:42:19,580 --> 00:42:23,030
and tomorrow morning I have all the

00:42:20,900 --> 00:42:24,710
sound files and then I pick some and

00:42:23,030 --> 00:42:26,540
when the videos even more extreme so

00:42:24,710 --> 00:42:28,730
video processing I'm really happy I'm

00:42:26,540 --> 00:42:30,590
not a video artist cause that's so

00:42:28,730 --> 00:42:33,050
incredibly you need to be SuperDuper

00:42:30,590 --> 00:42:34,910
patient sound at least the bandwidth is

00:42:33,050 --> 00:42:36,920
that the amount of numbers is not so

00:42:34,910 --> 00:42:39,290
high so you can actually do a lot of

00:42:36,920 --> 00:42:41,720
funny stuff with Rhys and I'm interested

00:42:39,290 --> 00:42:43,850
in resorting things and producing large

00:42:41,720 --> 00:42:46,070
batches of sounds and then maybe

00:42:43,850 --> 00:42:48,470
filtering them again so and all that

00:42:46,070 --> 00:42:56,420
requires a kind of a detachment so you

00:42:48,470 --> 00:43:00,230
have like you have like this is maybe a

00:42:56,420 --> 00:43:02,180
nice way to describe it it's all in when

00:43:00,230 --> 00:43:03,980
we think about random access so in

00:43:02,180 --> 00:43:05,720
history of computer music of course was

00:43:03,980 --> 00:43:08,270
the revolution was the introduction of

00:43:05,720 --> 00:43:11,210
tape like it was in in film as well and

00:43:08,270 --> 00:43:14,630
I may just quote I don't know if we were

00:43:11,210 --> 00:43:16,430
running over time but it's okay so I'm

00:43:14,630 --> 00:43:18,740
just gonna read it out so it's in the

00:43:16,430 --> 00:43:20,570
days of manual editing tape based

00:43:18,740 --> 00:43:22,820
editing was essentially random access

00:43:20,570 --> 00:43:25,190
since new material could be inserted at

00:43:22,820 --> 00:43:26,540
any position in the tape and film and

00:43:25,190 --> 00:43:29,000
sound effects editing this is still the

00:43:26,540 --> 00:43:30,950
case the trim bin becomes the random

00:43:29,000 --> 00:43:33,140
access storage and retrieval device

00:43:30,950 --> 00:43:34,490
every different sound or picture has a

00:43:33,140 --> 00:43:37,190
different hook in the trim then or

00:43:34,490 --> 00:43:39,350
around the room and the editor can

00:43:37,190 --> 00:43:41,690
swiftly retrieve any piece of sound and

00:43:39,350 --> 00:43:45,320
splice it into place so I think that's

00:43:41,690 --> 00:43:47,810
really a nice observation about how we

00:43:45,320 --> 00:43:50,300
compose things it's not so much that we

00:43:47,810 --> 00:43:52,520
can edit something and in any place but

00:43:50,300 --> 00:43:55,910
that we have a space in a way of where

00:43:52,520 --> 00:43:57,980
all the stuff is found so my memory is

00:43:55,910 --> 00:44:00,200
limited my attention is limited I have

00:43:57,980 --> 00:44:02,840
other activities I go away I come back

00:44:00,200 --> 00:44:04,550
and I want to be able to find this stuff

00:44:02,840 --> 00:44:06,410
somewhere in a space so for me that's

00:44:04,550 --> 00:44:08,660
also I call work space I think it's a

00:44:06,410 --> 00:44:10,490
for me it's a very useful metaphor to

00:44:08,660 --> 00:44:12,920
think of this idea of artifacts that

00:44:10,490 --> 00:44:14,720
have physical presence their files and

00:44:12,920 --> 00:44:16,400
there will be there and they occupy my

00:44:14,720 --> 00:44:19,420
harddrive and it's full and so on but

00:44:16,400 --> 00:44:22,790
they have this kind of existence as

00:44:19,420 --> 00:44:24,860
stuff and that's kind of enabled for me

00:44:22,790 --> 00:44:27,260
by the non real-time system cause it

00:44:24,860 --> 00:44:29,710
needs a container to store the stuff so

00:44:27,260 --> 00:44:29,710
that's files

00:44:43,260 --> 00:44:52,380
okay thank you very much for the Turkish

00:44:49,020 --> 00:44:55,530
was very very useful and very impressive

00:44:52,380 --> 00:44:57,450
and very entertaining and I was a bit

00:44:55,530 --> 00:44:59,520
curious about the parties mention about

00:44:57,450 --> 00:45:02,390
the writing a small in language for

00:44:59,520 --> 00:45:04,440
writing the compositions and so on and

00:45:02,390 --> 00:45:06,210
so I saw that you have written like

00:45:04,440 --> 00:45:09,030
something legit like Schuyler syntax

00:45:06,210 --> 00:45:10,470
that's what you were showing right yeah

00:45:09,030 --> 00:45:12,030
it is Scala it's use it isn't standard

00:45:10,470 --> 00:45:15,030
Scala compiler said what you would call

00:45:12,030 --> 00:45:16,620
an embedded domain-specific language I

00:45:15,030 --> 00:45:19,500
don't know even if it's a language it's

00:45:16,620 --> 00:45:22,500
just like abstractions that make it

00:45:19,500 --> 00:45:24,810
natural to express specific standards

00:45:22,500 --> 00:45:27,530
yes it it can be called a

00:45:24,810 --> 00:45:31,380
domain-specific language fair enough I

00:45:27,530 --> 00:45:32,820
was curious if you are familiar and so

00:45:31,380 --> 00:45:37,400
you were considering taking on the

00:45:32,820 --> 00:45:43,260
direction of a a DSL called utopia

00:45:37,400 --> 00:45:44,760
utopia are you familiar with it no I

00:45:43,260 --> 00:45:47,190
mean doesn't ring about with me no I

00:45:44,760 --> 00:45:54,750
maybe afterwards you can I can write it

00:45:47,190 --> 00:45:57,270
down secondly thank you thank you for

00:45:54,750 --> 00:45:58,770
the presentation for the real-time stuff

00:45:57,270 --> 00:46:00,750
that you're doing did you encounter any

00:45:58,770 --> 00:46:04,890
issues with the garbage collection and

00:46:00,750 --> 00:46:09,180
maybe at times in the JVM may decide to

00:46:04,890 --> 00:46:11,400
pause your reflection we always talk

00:46:09,180 --> 00:46:13,890
about bit rot and this kind of stuff but

00:46:11,400 --> 00:46:15,390
actually it's great that we are now 10

00:46:13,890 --> 00:46:17,910
years later so the same stuff is

00:46:15,390 --> 00:46:19,530
actually now very smooth even if it's

00:46:17,910 --> 00:46:21,600
the same code like 10 years ago so

00:46:19,530 --> 00:46:23,430
initially it was actually much more

00:46:21,600 --> 00:46:26,250
problem because computers were much

00:46:23,430 --> 00:46:28,130
slower I'm having here in the end the

00:46:26,250 --> 00:46:30,090
application but that's actually also

00:46:28,130 --> 00:46:31,380
supercollider itself is doing the same

00:46:30,090 --> 00:46:35,210
thing because we need to talk to a

00:46:31,380 --> 00:46:38,610
server so there is a need and a way to

00:46:35,210 --> 00:46:41,970
for precise timing so we need to account

00:46:38,610 --> 00:46:44,670
for latency I'm using a very very

00:46:41,970 --> 00:46:46,560
conservative latency here so it means

00:46:44,670 --> 00:46:49,800
when a transaction a transaction can

00:46:46,560 --> 00:46:52,260
take in the logical sense but it can

00:46:49,800 --> 00:46:54,360
take a long time especially if the JVM

00:46:52,260 --> 00:46:55,810
is not warm or using objects that

00:46:54,360 --> 00:47:00,730
haven't been used yet

00:46:55,810 --> 00:47:02,020
and so in practice I find these 200

00:47:00,730 --> 00:47:02,680
milliseconds for example is totally

00:47:02,020 --> 00:47:04,570
acceptable

00:47:02,680 --> 00:47:06,670
I rarely run the supercollider will tell

00:47:04,570 --> 00:47:08,980
you it so there the communication in

00:47:06,670 --> 00:47:10,840
real-time system is there's a protocol

00:47:08,980 --> 00:47:12,220
called open sound control so it's

00:47:10,840 --> 00:47:13,780
basically like a socket between the

00:47:12,220 --> 00:47:15,360
client and the server we're sending

00:47:13,780 --> 00:47:17,890
commands to the server let's say

00:47:15,360 --> 00:47:19,720
instantiate that sound or change the

00:47:17,890 --> 00:47:22,420
parameter of that sound and this can be

00:47:19,720 --> 00:47:24,190
time tacked called in a so called OC

00:47:22,420 --> 00:47:26,920
bundle when the bundle arrives too late

00:47:24,190 --> 00:47:30,820
you will see in the postman on the lock

00:47:26,920 --> 00:47:32,710
window late that means okay there was we

00:47:30,820 --> 00:47:36,160
didn't make it that we mean we missed

00:47:32,710 --> 00:47:38,110
the real-time deadline but I mean the

00:47:36,160 --> 00:47:41,020
most of running a rather recent computer

00:47:38,110 --> 00:47:43,240
so it depends really on what you want to

00:47:41,020 --> 00:47:47,650
do and how important it is in often

00:47:43,240 --> 00:47:48,910
cases if latency is not important then

00:47:47,650 --> 00:47:50,950
you can just increase the latency and

00:47:48,910 --> 00:47:53,410
you get perfect timing if you do life

00:47:50,950 --> 00:47:55,000
electronics with an instrumentalist you

00:47:53,410 --> 00:47:57,580
don't want the second to pass between

00:47:55,000 --> 00:47:59,290
what instrumentalist playing and the

00:47:57,580 --> 00:48:01,270
output you can if you can set that to

00:47:59,290 --> 00:48:03,700
zero and it will use a special time tag

00:48:01,270 --> 00:48:06,730
now and it will just allow jitter but it

00:48:03,700 --> 00:48:08,170
doesn't it faster possible but let's say

00:48:06,730 --> 00:48:09,580
I do a sound installation it runs on a

00:48:08,170 --> 00:48:12,280
raspberry pi the raspberry PI's really

00:48:09,580 --> 00:48:15,070
struck I mean the emulator I can run it

00:48:12,280 --> 00:48:17,140
on a Raspberry Pi but the man actually

00:48:15,070 --> 00:48:19,270
the memories more problems or JVM

00:48:17,140 --> 00:48:22,210
application the memory usage was quite

00:48:19,270 --> 00:48:23,860
high performance is more also in the

00:48:22,210 --> 00:48:26,380
survey split between client and server

00:48:23,860 --> 00:48:28,090
since they are separated it's okay if

00:48:26,380 --> 00:48:30,520
the client is sometimes slower as long

00:48:28,090 --> 00:48:32,560
as we don't get audio dropouts you can

00:48:30,520 --> 00:48:33,970
run it on the Raspberry Pi but of course

00:48:32,560 --> 00:48:37,170
you have to reduce your kind of

00:48:33,970 --> 00:48:40,870
expectation of how much stuff you can do

00:48:37,170 --> 00:48:42,700
so I don't to be honest in the beginning

00:48:40,870 --> 00:48:44,530
I thought when also when I chose the

00:48:42,700 --> 00:48:46,480
system is that really a good idea to use

00:48:44,530 --> 00:48:50,200
the JVM with this garbage collection so

00:48:46,480 --> 00:48:51,760
on I have never seen that kick in this

00:48:50,200 --> 00:48:53,230
soft stop the world thing I haven't seen

00:48:51,760 --> 00:48:56,200
it actually in years so I don't know

00:48:53,230 --> 00:48:59,160
maybe I'm just lucky or it doesn't apply

00:48:56,200 --> 00:48:59,160
in this kind of configuration

00:49:07,790 --> 00:49:12,800
okay well thank you very much

00:49:13,130 --> 00:49:16,749

YouTube URL: https://www.youtube.com/watch?v=l1HiJah56KY


