Title: Interactive Computing with Jupyter and Almond - SÃ¶ren Brunk
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/interactive-computing-with-jupyter-and-almond
Captions: 
	00:00:00,000 --> 00:00:07,020
think we can get started now so welcome

00:00:04,680 --> 00:00:09,750
to the session

00:00:07,020 --> 00:00:12,559
I'm Zeon and I'm a software engineer on

00:00:09,750 --> 00:00:15,120
the katana data science platform

00:00:12,559 --> 00:00:17,699
interactive computing is something I'm

00:00:15,120 --> 00:00:19,529
very excited about so I really hope I

00:00:17,699 --> 00:00:25,199
can share some of this excitement with

00:00:19,529 --> 00:00:28,560
you today so let's get started learning

00:00:25,199 --> 00:00:31,619
is a fundamental part of our daily work

00:00:28,560 --> 00:00:34,020
software developers problem solving is

00:00:31,619 --> 00:00:36,600
essentially learning right so we need to

00:00:34,020 --> 00:00:38,340
understand the problem and then learn

00:00:36,600 --> 00:00:41,809
about the right approach how to solve it

00:00:38,340 --> 00:00:44,460
and then the technology we're using is

00:00:41,809 --> 00:00:48,440
constantly evolving languages libraries

00:00:44,460 --> 00:00:52,320
tools and we want to keep up so we learn

00:00:48,440 --> 00:00:55,170
but how do we learn turns out that often

00:00:52,320 --> 00:00:58,500
we can look at learning as a three phase

00:00:55,170 --> 00:01:02,780
process we usually start with observing

00:00:58,500 --> 00:01:07,920
things and then we try to replicate the

00:01:02,780 --> 00:01:10,939
things we've observed like trying trying

00:01:07,920 --> 00:01:13,290
some examples of code ourselves and

00:01:10,939 --> 00:01:15,150
finally we start exploring start

00:01:13,290 --> 00:01:19,439
changing things and try something new

00:01:15,150 --> 00:01:22,080
and that exploration phase is

00:01:19,439 --> 00:01:26,070
essentially an interactive feedback loop

00:01:22,080 --> 00:01:29,729
so in that loop we start with trying

00:01:26,070 --> 00:01:31,520
trying something new and then we observe

00:01:29,729 --> 00:01:35,159
the feedback we get from the world and

00:01:31,520 --> 00:01:38,970
based on that feedback we update our

00:01:35,159 --> 00:01:41,930
internal model so we learn and then we

00:01:38,970 --> 00:01:47,189
try the next thing observe new feedback

00:01:41,930 --> 00:01:48,990
and so on and this feedback is it's very

00:01:47,189 --> 00:01:53,280
important because this is essentially

00:01:48,990 --> 00:01:57,290
what enables us to learn and we really

00:01:53,280 --> 00:02:01,670
want it to be fast in some situations

00:01:57,290 --> 00:02:01,670
because it's essential to our survival

00:02:02,060 --> 00:02:07,530
no one was harmed no worries but more

00:02:05,159 --> 00:02:09,840
generally because only with fast

00:02:07,530 --> 00:02:11,849
feedback we get a truly interactive

00:02:09,840 --> 00:02:12,770
feedback loop and that gives us a much

00:02:11,849 --> 00:02:17,150
better

00:02:12,770 --> 00:02:21,440
experience so what about exploring code

00:02:17,150 --> 00:02:23,230
or data one approach for for creating

00:02:21,440 --> 00:02:28,040
this this fast feedback loop is

00:02:23,230 --> 00:02:29,840
interactive computing so interactive

00:02:28,040 --> 00:02:32,960
computing basically means we have a

00:02:29,840 --> 00:02:35,360
system which lets us write a block of

00:02:32,960 --> 00:02:38,210
code immediately returns immediately

00:02:35,360 --> 00:02:40,340
runs that code and prints back the

00:02:38,210 --> 00:02:43,210
results and we can do that in a loop

00:02:40,340 --> 00:02:45,530
giving us this this fast feedback cycle

00:02:43,210 --> 00:02:47,570
and if you think about it that

00:02:45,530 --> 00:02:52,340
definition essentially describes the

00:02:47,570 --> 00:02:55,970
rabble so how many of you use the rabble

00:02:52,340 --> 00:02:59,300
at least from time to time okay there so

00:02:55,970 --> 00:03:03,830
that's almost 100 percent or almost

00:02:59,300 --> 00:03:05,360
everyone cool so yeah the rapper lets us

00:03:03,830 --> 00:03:07,820
enter an expression evaluates it

00:03:05,360 --> 00:03:09,950
immediately and prints the result value

00:03:07,820 --> 00:03:13,070
and so we can do this in a loop and

00:03:09,950 --> 00:03:15,320
continuously we find things or you can

00:03:13,070 --> 00:03:17,030
use previous results and we don't have

00:03:15,320 --> 00:03:19,390
to explicitly print things because the

00:03:17,030 --> 00:03:22,520
repple does it for us automatically and

00:03:19,390 --> 00:03:24,830
this is really great for for exploring

00:03:22,520 --> 00:03:26,750
the language or trying out things

00:03:24,830 --> 00:03:31,430
because yeah because we have this fast

00:03:26,750 --> 00:03:33,650
feedback loop but the raffle the

00:03:31,430 --> 00:03:40,070
Skeletor Apple also has a few pain

00:03:33,650 --> 00:03:43,190
points there's no support for for

00:03:40,070 --> 00:03:46,370
editing multi-line expressions there's

00:03:43,190 --> 00:03:49,780
no no pretty printing and limited syntax

00:03:46,370 --> 00:03:52,820
highlighting and auto-completion and

00:03:49,780 --> 00:03:55,400
most importantly there's no native

00:03:52,820 --> 00:03:57,770
support for for loading maven

00:03:55,400 --> 00:04:00,620
dependencies for solving dependencies

00:03:57,770 --> 00:04:02,980
and that makes it much harder to explore

00:04:00,620 --> 00:04:04,970
and learn your libraries right

00:04:02,980 --> 00:04:09,170
fortunately there's another rapid

00:04:04,970 --> 00:04:11,510
implementation from howie ammonite so

00:04:09,170 --> 00:04:12,550
how many of you use ammonite at least

00:04:11,510 --> 00:04:19,449
from time to time

00:04:12,550 --> 00:04:22,629
ok I'd say still 50% or so that's cool

00:04:19,449 --> 00:04:24,969
so I mean I'd address many of the of the

00:04:22,629 --> 00:04:28,479
issues that of the default repellent has

00:04:24,969 --> 00:04:32,080
nicer nicer formatting and and syntax

00:04:28,479 --> 00:04:35,680
highlighting proper multi-line X

00:04:32,080 --> 00:04:39,120
expression editing but Morris most

00:04:35,680 --> 00:04:44,949
importantly it has support for dynamic

00:04:39,120 --> 00:04:48,060
dependency resolution with this import

00:04:44,949 --> 00:04:51,879
dollar IV syntax so we can basically

00:04:48,060 --> 00:04:55,000
import any JVM library and use it

00:04:51,879 --> 00:04:57,569
immediately and in the same in the same

00:04:55,000 --> 00:05:00,189
rebel session which is really cool for

00:04:57,569 --> 00:05:02,529
ya exploring new libraries and trying

00:05:00,189 --> 00:05:06,039
and learning new libraries trying out

00:05:02,529 --> 00:05:07,750
new things regardless of whether we use

00:05:06,039 --> 00:05:10,180
the default grapple or Emma Knight

00:05:07,750 --> 00:05:12,759
though there are some limitations that

00:05:10,180 --> 00:05:16,919
are that are inherent to the to the

00:05:12,759 --> 00:05:19,599
repple design and this is mostly because

00:05:16,919 --> 00:05:22,180
the raffle is optimized for for

00:05:19,599 --> 00:05:23,710
exploration from scratch for for writing

00:05:22,180 --> 00:05:30,339
writing some code and seeing results

00:05:23,710 --> 00:05:34,930
fast it's but getting code out again is

00:05:30,339 --> 00:05:37,839
it's harder reading copying code it's

00:05:34,930 --> 00:05:39,339
not not as easy and that's because we

00:05:37,839 --> 00:05:42,009
have these interleaved inputs and

00:05:39,339 --> 00:05:45,189
outputs and all these refinement

00:05:42,009 --> 00:05:47,439
attempts and in our history and also

00:05:45,189 --> 00:05:51,250
changing and all the expression can be a

00:05:47,439 --> 00:05:53,800
bit hard we we have to find it and if we

00:05:51,250 --> 00:05:56,949
have dependent expressions we have to

00:05:53,800 --> 00:06:00,839
find them all and run them to run by one

00:05:56,949 --> 00:06:03,310
and that can quickly become tedious

00:06:00,839 --> 00:06:05,289
sharing is also difficult because we

00:06:03,310 --> 00:06:09,159
don't don't really have a persistent

00:06:05,289 --> 00:06:10,569
document only the history file so

00:06:09,159 --> 00:06:13,149
because of this this focus on

00:06:10,569 --> 00:06:15,550
exploration the observe and the

00:06:13,149 --> 00:06:18,430
replicate phases are are not part of the

00:06:15,550 --> 00:06:21,099
Rapa design but from a learning

00:06:18,430 --> 00:06:23,740
perspective we rarely just start

00:06:21,099 --> 00:06:26,949
exploring we usually need some input

00:06:23,740 --> 00:06:29,379
first so what often happens is that we

00:06:26,949 --> 00:06:31,479
have something like like here on the

00:06:29,379 --> 00:06:34,330
screenshot so we have

00:06:31,479 --> 00:06:37,990
we have a browser window with some some

00:06:34,330 --> 00:06:40,689
tutorials for the observe phase and then

00:06:37,990 --> 00:06:42,909
we have a rebel window where we have to

00:06:40,689 --> 00:06:46,749
copy the code over for for the replicate

00:06:42,909 --> 00:06:49,050
phase and this just adds some overhead

00:06:46,749 --> 00:06:51,839
so can we do better

00:06:49,050 --> 00:06:56,379
let's look at a cousin of the rattle

00:06:51,839 --> 00:06:58,479
worksheets so worksheets are quite

00:06:56,379 --> 00:07:00,400
similar to the raffle but we have this

00:06:58,479 --> 00:07:03,490
full editor window where we can write

00:07:00,400 --> 00:07:05,620
expressions and when we hit run or save

00:07:03,490 --> 00:07:09,610
the worksheet the expressions will be

00:07:05,620 --> 00:07:11,560
evaluated it evaluate it and and the

00:07:09,610 --> 00:07:16,330
results are shown and on the right hand

00:07:11,560 --> 00:07:19,509
side and yeah because we have this

00:07:16,330 --> 00:07:21,759
editor window without the the

00:07:19,509 --> 00:07:24,069
interleaved inputs and outputs reading

00:07:21,759 --> 00:07:26,560
copying and changing code it's much

00:07:24,069 --> 00:07:30,729
easier and changing is also easier

00:07:26,560 --> 00:07:33,999
because because when we hit run all the

00:07:30,729 --> 00:07:35,740
expressions are evaluated in one go so

00:07:33,999 --> 00:07:39,389
in contrast to the raffle we don't have

00:07:35,740 --> 00:07:41,889
to manually track dependent expressions

00:07:39,389 --> 00:07:45,219
the drawback is that we lose control

00:07:41,889 --> 00:07:47,889
over over when to execute which

00:07:45,219 --> 00:07:50,560
expression and therefore worksheets

00:07:47,889 --> 00:07:52,479
aren't aren't very well suited for for

00:07:50,560 --> 00:07:55,870
longer running computations like like

00:07:52,479 --> 00:07:59,259
loading large data sets so what's also

00:07:55,870 --> 00:08:02,740
nice about them is the nice IDE

00:07:59,259 --> 00:08:07,259
integration especially in the dotty

00:08:02,740 --> 00:08:10,149
worksheets like like we see here and and

00:08:07,259 --> 00:08:12,009
that they are actually backed by files

00:08:10,149 --> 00:08:15,159
so we can save them put them in version

00:08:12,009 --> 00:08:17,770
control and share them and then we also

00:08:15,159 --> 00:08:20,199
have these online worksheets with which

00:08:17,770 --> 00:08:23,699
make sharing even easier so of course

00:08:20,199 --> 00:08:28,659
they don't have the nice IDE integration

00:08:23,699 --> 00:08:30,399
but yeah sharing is really nice we can

00:08:28,659 --> 00:08:34,329
just create a link and send it to

00:08:30,399 --> 00:08:36,010
someone and they don't have to they

00:08:34,329 --> 00:08:40,500
don't need any local setup so we have

00:08:36,010 --> 00:08:44,789
fun we have scarcity for JVM Scala and

00:08:40,500 --> 00:08:44,789
Scala fiddle force colleges

00:08:44,959 --> 00:08:50,189
so looking at worksheets from a learning

00:08:47,790 --> 00:08:53,100
perspective what's different compared to

00:08:50,189 --> 00:08:55,889
the repple well replication works a bit

00:08:53,100 --> 00:08:58,949
better because it could provide

00:08:55,889 --> 00:09:03,209
worksheets prefilled with examples and

00:08:58,949 --> 00:09:05,100
copy and paste is also a bit easier but

00:09:03,209 --> 00:09:07,589
it's still not in a very integrated

00:09:05,100 --> 00:09:12,660
experience we still have these these

00:09:07,589 --> 00:09:16,980
separate things right so looking again

00:09:12,660 --> 00:09:19,709
at this the Skeletor example we already

00:09:16,980 --> 00:09:24,329
have in an example code code snippet in

00:09:19,709 --> 00:09:27,420
here right so what if this wasn't just

00:09:24,329 --> 00:09:30,420
just static what if we actually could

00:09:27,420 --> 00:09:34,410
run this thing and turns out we can so

00:09:30,420 --> 00:09:38,040
if I hit ctrl enter here this will be

00:09:34,410 --> 00:09:41,269
evaluated right in my slides and we get

00:09:38,040 --> 00:09:45,870
our double salary which is really nice

00:09:41,269 --> 00:09:50,879
but we can also edit this thing so we

00:09:45,870 --> 00:10:03,389
have a real editor here so double salary

00:09:50,879 --> 00:10:05,610
is nice but what about more so let's

00:10:03,389 --> 00:10:08,129
give it as a triple salary and now we

00:10:05,610 --> 00:10:16,800
can run this thing again and here we go

00:10:08,129 --> 00:10:18,750
more money so how does this work turns

00:10:16,800 --> 00:10:20,189
out we're actually in a Jupiter notebook

00:10:18,750 --> 00:10:23,309
here

00:10:20,189 --> 00:10:26,100
it's just shown as a slideshow using a

00:10:23,309 --> 00:10:29,750
plugin called Rice and usually it looks

00:10:26,100 --> 00:10:32,819
much it looks more like more like this

00:10:29,750 --> 00:10:35,670
which is the the classic Jupiter

00:10:32,819 --> 00:10:40,800
interface which lets us interact with

00:10:35,670 --> 00:10:45,779
with these these notebooks but but what

00:10:40,800 --> 00:10:47,999
are these notebooks notebooks are

00:10:45,779 --> 00:10:49,139
interactive web-based documents so there

00:10:47,999 --> 00:10:51,240
are web-based they run in the browser

00:10:49,139 --> 00:10:55,120
they're interactive we can we can edit

00:10:51,240 --> 00:10:56,890
things and in run code and we have

00:10:55,120 --> 00:11:00,160
they're made of cells we have two types

00:10:56,890 --> 00:11:05,080
of cells one is documentation and one is

00:11:00,160 --> 00:11:07,750
code so documentation cells are just

00:11:05,080 --> 00:11:10,930
just markdown we we have all the usual

00:11:07,750 --> 00:11:13,990
markdown formatting options we can

00:11:10,930 --> 00:11:17,530
include images code fences later

00:11:13,990 --> 00:11:21,400
equations but the cool thing is that we

00:11:17,530 --> 00:11:24,610
can edit them right in the browser so if

00:11:21,400 --> 00:11:28,660
I double click on this this will change

00:11:24,610 --> 00:11:39,820
to an editor window and I can write

00:11:28,660 --> 00:11:45,340
something here and when I hit ctrl enter

00:11:39,820 --> 00:11:49,300
again this will be updated to get the

00:11:45,340 --> 00:11:51,160
updated rendered view and then we have

00:11:49,300 --> 00:11:53,440
code cells we've already already seen

00:11:51,160 --> 00:11:56,440
one so they're basically editors that

00:11:53,440 --> 00:12:00,040
let us write write code similar to two

00:11:56,440 --> 00:12:05,050
worksheet and we can of course evaluate

00:12:00,040 --> 00:12:06,790
that so let's try this again and oops we

00:12:05,050 --> 00:12:10,030
get a compile error so we get all these

00:12:06,790 --> 00:12:14,770
error messages if something something is

00:12:10,030 --> 00:12:19,990
wrong so let's just fix that and run it

00:12:14,770 --> 00:12:22,750
again and here we go but we aren't

00:12:19,990 --> 00:12:25,270
restricted to single single cells we can

00:12:22,750 --> 00:12:30,220
have any number of cells in the notebook

00:12:25,270 --> 00:12:32,890
and we can freely mix code cells with

00:12:30,220 --> 00:12:37,000
documentation cells so here we have one

00:12:32,890 --> 00:12:39,490
duck duck cell followed by two code

00:12:37,000 --> 00:12:42,460
cells and of course we can evaluate them

00:12:39,490 --> 00:12:45,610
and with the plugin we can't even put

00:12:42,460 --> 00:12:51,100
these things side by side so this is

00:12:45,610 --> 00:12:53,860
quite nice so instead of having these

00:12:51,100 --> 00:12:59,980
two separate things documentation and

00:12:53,860 --> 00:13:03,280
code we now have an integrated document

00:12:59,980 --> 00:13:05,560
containing both and that's really nice

00:13:03,280 --> 00:13:07,090
for for teaching and interactive

00:13:05,560 --> 00:13:09,790
learning

00:13:07,090 --> 00:13:11,620
yeah because we have we now have

00:13:09,790 --> 00:13:17,530
integrated all these these learning

00:13:11,620 --> 00:13:22,510
phases in one but notebooks are more and

00:13:17,530 --> 00:13:26,380
so they also integrate worksheets with

00:13:22,510 --> 00:13:29,200
rebels and how this works is best seen

00:13:26,380 --> 00:13:31,800
in a little demo so let's switch to

00:13:29,200 --> 00:13:31,800
another notebook

00:13:37,220 --> 00:13:49,740
so if we look at a single code cell it

00:13:46,290 --> 00:13:51,660
behaves mostly like a worksheet so we

00:13:49,740 --> 00:13:56,820
have multiple expressions we have this

00:13:51,660 --> 00:14:02,990
editor window and we can evaluate this

00:13:56,820 --> 00:14:09,510
thing now we should be able to evaluate

00:14:02,990 --> 00:14:12,170
this thing let's give it another try and

00:14:09,510 --> 00:14:12,170
here we go

00:14:12,830 --> 00:14:19,380
and like in worksheets when when we hit

00:14:15,330 --> 00:14:21,620
run it always evaluates all all cells in

00:14:19,380 --> 00:14:24,870
one go so we we don't have to track

00:14:21,620 --> 00:14:29,700
dependent expressions manually it's also

00:14:24,870 --> 00:14:32,250
persistent but it all it also saves the

00:14:29,700 --> 00:14:33,960
outputs so this is really cool for for

00:14:32,250 --> 00:14:37,770
sharing or putting these things online

00:14:33,960 --> 00:14:44,490
or exporting them into into a PDF or

00:14:37,770 --> 00:14:48,600
something like that on the other hand

00:14:44,490 --> 00:14:50,880
there are a little bit limited when it

00:14:48,600 --> 00:14:55,530
comes to to IDE features though there's

00:14:50,880 --> 00:14:58,050
not the nice addy integration and also

00:14:55,530 --> 00:15:00,690
the outputs are shown below the cell by

00:14:58,050 --> 00:15:02,670
default not on the right-hand side but

00:15:00,690 --> 00:15:05,280
it shouldn't be too easy to actually

00:15:02,670 --> 00:15:10,140
change the front end to have this

00:15:05,280 --> 00:15:12,240
side-by-side view in notebooks too so if

00:15:10,140 --> 00:15:15,900
we look at code cells of a notebook as a

00:15:12,240 --> 00:15:18,180
whole mmm they behave more like a ripple

00:15:15,900 --> 00:15:21,120
and that's because we we can run all

00:15:18,180 --> 00:15:23,250
these cells independently which gives us

00:15:21,120 --> 00:15:27,360
better control when to run specific code

00:15:23,250 --> 00:15:32,400
and also previous results are cached in

00:15:27,360 --> 00:15:36,050
memory so if we have this this huge data

00:15:32,400 --> 00:15:39,600
set here which takes a long time to load

00:15:36,050 --> 00:15:43,980
if we would run less in the in a

00:15:39,600 --> 00:15:46,500
worksheet and if we wanted to change

00:15:43,980 --> 00:15:48,250
something here we'd have to run the

00:15:46,500 --> 00:15:52,630
whole thing again which

00:15:48,250 --> 00:15:59,260
takes takes on time right in a notebook

00:15:52,630 --> 00:16:01,630
we can just split these cells and run

00:15:59,260 --> 00:16:07,090
them independently so we can load the

00:16:01,630 --> 00:16:11,250
data and then it's cached in memory and

00:16:07,090 --> 00:16:21,340
we can use it in our computations and

00:16:11,250 --> 00:16:25,060
change things and it's much faster the

00:16:21,340 --> 00:16:27,970
notebooks also give us more flexibility

00:16:25,060 --> 00:16:32,740
for for prototyping we can we can select

00:16:27,970 --> 00:16:37,030
multiple cells and run them in one go or

00:16:32,740 --> 00:16:38,700
we can run all cells or it can move

00:16:37,030 --> 00:16:43,150
cells around so we have this

00:16:38,700 --> 00:16:45,900
drag-and-drop support here copy and

00:16:43,150 --> 00:16:47,770
paste even between different notebooks

00:16:45,900 --> 00:16:53,470
split and merge and all these

00:16:47,770 --> 00:16:58,380
convenience features that make that make

00:16:53,470 --> 00:16:58,380
this is a good thing for for prototyping

00:16:59,790 --> 00:17:09,160
so what about exploring data with

00:17:06,880 --> 00:17:14,500
something rapa like like like spark

00:17:09,160 --> 00:17:17,200
shell here of course we can do that but

00:17:14,500 --> 00:17:20,580
because this is a thermal and it's

00:17:17,200 --> 00:17:25,530
text-based it's usually not not the best

00:17:20,580 --> 00:17:28,570
option to show data or visualize things

00:17:25,530 --> 00:17:31,690
so what often happens is that we have

00:17:28,570 --> 00:17:34,780
these these separate things so we we

00:17:31,690 --> 00:17:39,910
render we use some external graphics

00:17:34,780 --> 00:17:43,660
system to render our visualizations and

00:17:39,910 --> 00:17:46,150
have them in a separate window and yeah

00:17:43,660 --> 00:17:49,420
so this is again not not the best the

00:17:46,150 --> 00:17:55,540
most integrated experience and with

00:17:49,420 --> 00:17:58,120
notebooks on the other hand we can do we

00:17:55,540 --> 00:18:01,450
can do a little bit better so let's stay

00:17:58,120 --> 00:18:03,010
with this this very same example

00:18:01,450 --> 00:18:07,299
you just said on the screenshot the

00:18:03,010 --> 00:18:10,659
Titanic data set and run this and now we

00:18:07,299 --> 00:18:13,240
have a nice HTML representation of our

00:18:10,659 --> 00:18:18,610
data a nice table and we can even sort

00:18:13,240 --> 00:18:22,269
things and so I argue this this is much

00:18:18,610 --> 00:18:24,909
better to read and the same for

00:18:22,269 --> 00:18:26,710
visualization so we also have an

00:18:24,909 --> 00:18:29,740
integration for this for the Vegas

00:18:26,710 --> 00:18:34,830
library here and notebooks and we can

00:18:29,740 --> 00:18:41,320
just run it and here we go we have our

00:18:34,830 --> 00:18:43,299
our plot and embedded in the notebook

00:18:41,320 --> 00:18:49,120
with our code and we can share these

00:18:43,299 --> 00:18:52,000
things together and we aren't even

00:18:49,120 --> 00:18:54,220
restricted to two static images because

00:18:52,000 --> 00:18:58,120
we have a browser we have JavaScript

00:18:54,220 --> 00:19:00,909
available when we use the the plotly

00:18:58,120 --> 00:19:06,059
library we can create these these

00:19:00,909 --> 00:19:09,580
interactive oops these interactive plots

00:19:06,059 --> 00:19:16,840
or you can zoom in and you know

00:19:09,580 --> 00:19:18,429
basically interact with the plot and we

00:19:16,840 --> 00:19:21,279
are also not restricted to date and we

00:19:18,429 --> 00:19:23,940
can also visualize code which is great

00:19:21,279 --> 00:19:28,360
for for for teaching for instance so

00:19:23,940 --> 00:19:34,539
here we use the referee library which

00:19:28,360 --> 00:19:36,820
lets us visualize data structures and we

00:19:34,539 --> 00:19:40,120
create a simple a simple case glass here

00:19:36,820 --> 00:19:43,960
and a list of people and then we use ref

00:19:40,120 --> 00:19:49,419
tree to to render render this list so

00:19:43,960 --> 00:19:55,299
let's give it a try and here we go so we

00:19:49,419 --> 00:19:58,149
have this nice structure showing how how

00:19:55,299 --> 00:20:01,809
the list of the elements of the list are

00:19:58,149 --> 00:20:04,029
connected this I think this is really

00:20:01,809 --> 00:20:06,220
cool example for for actually explaining

00:20:04,029 --> 00:20:08,710
these things we can we can even change

00:20:06,220 --> 00:20:10,510
things and run run this again and get

00:20:08,710 --> 00:20:12,550
the the updated value just within the

00:20:10,510 --> 00:20:21,020
notebook

00:20:12,550 --> 00:20:23,540
so like with this learning example we

00:20:21,020 --> 00:20:28,670
have with a rattle we have this this

00:20:23,540 --> 00:20:33,860
these separate views but in notebook we

00:20:28,670 --> 00:20:35,510
have we have our output and and the

00:20:33,860 --> 00:20:37,130
source code integrated so we have our

00:20:35,510 --> 00:20:39,200
output embedded with the code that

00:20:37,130 --> 00:20:41,870
produces it so it stays in the same

00:20:39,200 --> 00:20:50,030
context and I think this is a really

00:20:41,870 --> 00:20:52,370
cool cool feature so what I want to do

00:20:50,030 --> 00:20:59,930
next is look at a little bit the

00:20:52,370 --> 00:21:02,780
technologies behind this so the examples

00:20:59,930 --> 00:21:05,270
here they were all run in Egyptian

00:21:02,780 --> 00:21:10,190
notebook and tubes are is a there's a

00:21:05,270 --> 00:21:12,140
huge project devoted to develop open

00:21:10,190 --> 00:21:15,350
source software open standards and

00:21:12,140 --> 00:21:19,370
services for for interactive computing

00:21:15,350 --> 00:21:21,560
and the flagship is this is the Jupiter

00:21:19,370 --> 00:21:23,480
notebook the flagship software but

00:21:21,560 --> 00:21:28,520
there's also a huge ecosystem around

00:21:23,480 --> 00:21:32,510
this and it's not restricted to a single

00:21:28,520 --> 00:21:38,710
programming language so we have we have

00:21:32,510 --> 00:21:42,740
support for Python and our C sharp and

00:21:38,710 --> 00:21:47,000
and Java but also functional languages

00:21:42,740 --> 00:21:53,210
like f-sharp Haskell and of course of

00:21:47,000 --> 00:21:59,300
course Scala so Jupiter came out of the

00:21:53,210 --> 00:22:02,230
ipython shell ipython is yeah basically

00:21:59,300 --> 00:22:05,150
an advanced interactive Python shell

00:22:02,230 --> 00:22:11,150
similar to to what we have with Emma

00:22:05,150 --> 00:22:16,700
night for Scala and in 2011 the ipython

00:22:11,150 --> 00:22:19,970
creators released the the the ipython

00:22:16,700 --> 00:22:22,100
notebook interface which is yep still

00:22:19,970 --> 00:22:25,970
pretty similar to what we what we have

00:22:22,100 --> 00:22:30,350
today so we have this this documentation

00:22:25,970 --> 00:22:36,380
and runnable code and also rich output

00:22:30,350 --> 00:22:39,110
integrated in this notebook document but

00:22:36,380 --> 00:22:43,580
then they realized that this is actually

00:22:39,110 --> 00:22:46,880
something language agnostic so with

00:22:43,580 --> 00:22:48,740
project Jupiter they added support for

00:22:46,880 --> 00:22:51,590
four other languages basically moving

00:22:48,740 --> 00:22:56,260
the language agnostic part out of of

00:22:51,590 --> 00:23:01,070
ipython and initially they supported

00:22:56,260 --> 00:23:04,580
Giulia Python and our Jupiter and in

00:23:01,070 --> 00:23:08,690
2018 they released Jupiter lab so last

00:23:04,580 --> 00:23:10,820
year which is basically the next

00:23:08,690 --> 00:23:14,570
generation user interface for notebooks

00:23:10,820 --> 00:23:18,170
and and more so let's have a brief look

00:23:14,570 --> 00:23:20,270
at at the big components of the the

00:23:18,170 --> 00:23:22,310
Jupiter stack so we have the the user

00:23:20,270 --> 00:23:27,200
interface and notebook interface which

00:23:22,310 --> 00:23:30,830
runs in the browser and lets users

00:23:27,200 --> 00:23:33,860
interact with with notebooks and then we

00:23:30,830 --> 00:23:36,590
have the notebook server which basically

00:23:33,860 --> 00:23:39,920
sets everything up the communication and

00:23:36,590 --> 00:23:43,610
delivers the the UI and also manages the

00:23:39,920 --> 00:23:47,300
the notebook files and we also have the

00:23:43,610 --> 00:23:49,670
kernel which is responsible for actually

00:23:47,300 --> 00:23:53,510
running running our code and returning

00:23:49,670 --> 00:23:56,840
results and they are connected through

00:23:53,510 --> 00:24:01,640
the Jupiter particle which gives us this

00:23:56,840 --> 00:24:03,590
loosely coupled architecture and that

00:24:01,640 --> 00:24:06,080
that enables to to basically develop

00:24:03,590 --> 00:24:09,280
these components independently and also

00:24:06,080 --> 00:24:09,280
scale and distribute things

00:24:14,890 --> 00:24:20,870
so there are a bunch of different front

00:24:18,950 --> 00:24:23,450
ends available we have the classic

00:24:20,870 --> 00:24:25,360
notebook and took the lab as its

00:24:23,450 --> 00:24:27,950
designated successor

00:24:25,360 --> 00:24:34,040
there's also interact from the Netflix

00:24:27,950 --> 00:24:36,080
Fox and a plug-in for for the atom

00:24:34,040 --> 00:24:37,910
editor called hydrogen which is a little

00:24:36,080 --> 00:24:41,210
bit more work she'd like but with a

00:24:37,910 --> 00:24:45,230
Jupiter with a Jupiter backend and then

00:24:41,210 --> 00:24:48,140
the the major IDE s also have some

00:24:45,230 --> 00:24:53,180
limited notebook support but currently

00:24:48,140 --> 00:24:56,720
it's restricted to Python but I've been

00:24:53,180 --> 00:25:00,020
hearing some rumors here that there are

00:24:56,720 --> 00:25:02,980
some ideals to to actually improve the

00:25:00,020 --> 00:25:02,980
scala story here

00:25:03,820 --> 00:25:08,480
yeah and then when we have curls and

00:25:06,380 --> 00:25:13,250
they are responsible for for running

00:25:08,480 --> 00:25:15,110
running the code or or also compiling or

00:25:13,250 --> 00:25:18,110
talking to the compiler for compiled

00:25:15,110 --> 00:25:20,300
languages they don't know anything about

00:25:18,110 --> 00:25:25,520
notebooks so they just get a bunch of

00:25:20,300 --> 00:25:28,490
code and and run that code and return

00:25:25,520 --> 00:25:30,140
results or error messages and in

00:25:28,490 --> 00:25:32,600
principle they can be implemented in any

00:25:30,140 --> 00:25:35,000
language as long as they support the to

00:25:32,600 --> 00:25:37,730
be to protocol and nowadays there are

00:25:35,000 --> 00:25:43,100
around 100 different kernels available

00:25:37,730 --> 00:25:46,120
for for all kinds of languages so all

00:25:43,100 --> 00:25:49,840
these examples we've seen so far they

00:25:46,120 --> 00:25:52,310
were executed on the almond kernel

00:25:49,840 --> 00:25:54,290
there's actually a bunch of of kernels

00:25:52,310 --> 00:25:58,760
available of tutorials available for

00:25:54,290 --> 00:26:01,700
Scala and most of them are based on the

00:25:58,760 --> 00:26:04,520
on the default repple ammonite on the

00:26:01,700 --> 00:26:07,880
other hand is built on top of ammonite

00:26:04,520 --> 00:26:11,750
and we've seen that a man I gives us all

00:26:07,880 --> 00:26:16,100
these nice convenience features and in

00:26:11,750 --> 00:26:20,210
an element we inherent inheritance of

00:26:16,100 --> 00:26:22,990
these features so for instance we have

00:26:20,210 --> 00:26:27,010
dynamic dependency resolution

00:26:22,990 --> 00:26:31,300
which uses core see in the background so

00:26:27,010 --> 00:26:33,540
we can import any any JVM library and

00:26:31,300 --> 00:26:37,780
you may haven't dependency basically and

00:26:33,540 --> 00:26:41,020
just run that in our in our notebook so

00:26:37,780 --> 00:26:44,530
here we have the quants library and we

00:26:41,020 --> 00:26:48,700
just import that and use it for in our

00:26:44,530 --> 00:26:52,090
calculations so this is really nice we

00:26:48,700 --> 00:27:01,270
also get the syntax highlighting and

00:26:52,090 --> 00:27:06,030
pretty printing and something that was

00:27:01,270 --> 00:27:13,290
recently added is also editor ammonite

00:27:06,030 --> 00:27:15,370
is a lot of completion for for for may

00:27:13,290 --> 00:27:18,580
dependencies so this is really nice if

00:27:15,370 --> 00:27:23,620
you don't know the the latest version of

00:27:18,580 --> 00:27:26,230
a library you can just hit hit shift and

00:27:23,620 --> 00:27:29,800
then it will show you what's what's

00:27:26,230 --> 00:27:34,330
available and of course we also have

00:27:29,800 --> 00:27:36,730
auto completion on on regular code so he

00:27:34,330 --> 00:27:42,190
knows that we are mapping over string

00:27:36,730 --> 00:27:47,500
and gives us all the completions on

00:27:42,190 --> 00:27:51,130
string so there's another feature type

00:27:47,500 --> 00:27:55,030
hints and meta bros integration which is

00:27:51,130 --> 00:28:00,520
a little bit unstable I'm gonna try it

00:27:55,030 --> 00:28:03,340
nevertheless so if I hit shift shift tap

00:28:00,520 --> 00:28:12,700
I hope I don't kill the kernel multiple

00:28:03,340 --> 00:28:17,140
times can you see that yeah this will

00:28:12,700 --> 00:28:21,310
give us a nice type in sphere so some

00:28:17,140 --> 00:28:24,160
some ID like features and so what can

00:28:21,310 --> 00:28:29,040
you see from this from this type and

00:28:24,160 --> 00:28:29,040
from the map function anyone

00:28:30,230 --> 00:28:36,780
exactly so this is still not to 213 but

00:28:35,550 --> 00:28:39,660
it's coming

00:28:36,780 --> 00:28:43,440
I think we're waiting for cats or

00:28:39,660 --> 00:28:47,130
something like that so and we when we

00:28:43,440 --> 00:28:51,450
click on that this actually fires a meta

00:28:47,130 --> 00:28:53,280
browse server which lets us look at the

00:28:51,450 --> 00:28:58,200
source code on this so this is really

00:28:53,280 --> 00:29:08,490
cool - yeah - to see to see the the code

00:28:58,200 --> 00:29:13,710
of something okay so let's go back let

00:29:08,490 --> 00:29:17,460
me close it we can also use the the Emma

00:29:13,710 --> 00:29:20,309
not Emma night API and so not everything

00:29:17,460 --> 00:29:25,679
makes sense but for instance we could

00:29:20,309 --> 00:29:31,280
take the history so here we basically

00:29:25,679 --> 00:29:36,090
see the three latest cells we've sent

00:29:31,280 --> 00:29:39,900
we've run which is sometimes sometimes

00:29:36,090 --> 00:29:42,600
handy or we could look at the repository

00:29:39,900 --> 00:29:47,820
of course at add new you maven

00:29:42,600 --> 00:29:50,610
repositories here and almond also gives

00:29:47,820 --> 00:29:54,059
us an API to talk to the to the front

00:29:50,610 --> 00:29:58,320
end to the browser and this is what

00:29:54,059 --> 00:30:02,730
powers these rich outputs we've seen in

00:29:58,320 --> 00:30:06,120
in the data exploration examples so if

00:30:02,730 --> 00:30:08,490
you import the almond display the method

00:30:06,120 --> 00:30:11,960
methods on an almond display I think

00:30:08,490 --> 00:30:15,870
they're actually automatically imported

00:30:11,960 --> 00:30:21,360
we get all these these methods for

00:30:15,870 --> 00:30:28,470
output so we can send some HTML or an

00:30:21,360 --> 00:30:34,950
SVG or load an image and then send it to

00:30:28,470 --> 00:30:37,700
the browser lytec equations and even

00:30:34,950 --> 00:30:37,700
JavaScript

00:30:38,790 --> 00:30:44,880
but this is somewhat restricted and your

00:30:41,650 --> 00:30:51,570
front ends like Jupiter lab because of

00:30:44,880 --> 00:30:54,790
security concerns and basically we can

00:30:51,570 --> 00:30:58,150
if the front end supports something we

00:30:54,790 --> 00:30:59,830
can and we can basically send any mime

00:30:58,150 --> 00:31:02,800
type and if at the front and knows how

00:30:59,830 --> 00:31:05,590
to display it we get we get these rich

00:31:02,800 --> 00:31:10,240
outputs so we could also have plugins

00:31:05,590 --> 00:31:15,040
for other things and based on on this we

00:31:10,240 --> 00:31:21,280
have some higher-level widgets like a

00:31:15,040 --> 00:31:24,670
progress bar and if we keep this handle

00:31:21,280 --> 00:31:30,280
here we can also update the progress bar

00:31:24,670 --> 00:31:36,910
in later in later cells so let's try

00:31:30,280 --> 00:31:39,310
this so this gives us a way to yeah to

00:31:36,910 --> 00:31:45,850
basically show show some progress on

00:31:39,310 --> 00:31:52,330
loading data or things like that we can

00:31:45,850 --> 00:31:58,200
also read user input so this will just

00:31:52,330 --> 00:32:04,020
then be written into into this well and

00:31:58,200 --> 00:32:06,220
oh yeah we also have a nice feature for

00:32:04,020 --> 00:32:08,350
seeing what's going on when there's some

00:32:06,220 --> 00:32:12,790
calculation in the background so if we

00:32:08,350 --> 00:32:17,560
have this future here let it let's just

00:32:12,790 --> 00:32:20,170
run this we can see this animation while

00:32:17,560 --> 00:32:23,530
it's running and as soon as it's

00:32:20,170 --> 00:32:29,040
finished it should actually update don't

00:32:23,530 --> 00:32:32,920
forget the the final value and the same

00:32:29,040 --> 00:32:37,300
we have the same for for virus so if we

00:32:32,920 --> 00:32:41,590
up there that X here we get this this

00:32:37,300 --> 00:32:46,090
the updated value in the output

00:32:41,590 --> 00:32:48,100
and we can use these api's in in our own

00:32:46,090 --> 00:32:51,280
libraries which we can then provide a

00:32:48,100 --> 00:32:55,030
notebook users so we could depend on the

00:32:51,280 --> 00:33:00,850
on the scholar Colonel API and then in

00:32:55,030 --> 00:33:03,160
in our library use it so we let's just

00:33:00,850 --> 00:33:03,640
let's just simulate that here and in the

00:33:03,160 --> 00:33:07,660
cell

00:33:03,640 --> 00:33:13,060
so we'd have this implicit instance of

00:33:07,660 --> 00:33:14,860
Jupiter API available to use and we we

00:33:13,060 --> 00:33:20,170
can use it to send output to the front

00:33:14,860 --> 00:33:23,020
end so let's just run that here and then

00:33:20,170 --> 00:33:25,780
in our library we can sorry in our

00:33:23,020 --> 00:33:30,760
notebook we can just import this this

00:33:25,780 --> 00:33:35,680
library and and use it so I think we can

00:33:30,760 --> 00:33:41,650
do better right oh not better okay okay

00:33:35,680 --> 00:33:44,200
I like this one so far we've mostly

00:33:41,650 --> 00:33:50,740
looked at this from a learner's

00:33:44,200 --> 00:33:54,300
perspective but what about teaching so

00:33:50,740 --> 00:33:57,430
one thing I hope has become clears that

00:33:54,300 --> 00:34:03,250
notebooks are a nice way for actually

00:33:57,430 --> 00:34:08,860
demonstrating live code in slides but

00:34:03,250 --> 00:34:10,500
what about library documentation so of

00:34:08,860 --> 00:34:14,350
course you could just create notebooks

00:34:10,500 --> 00:34:16,570
from scratch but usually you already

00:34:14,350 --> 00:34:20,260
have some documentation available and

00:34:16,570 --> 00:34:25,420
most of the time this is markdown with

00:34:20,260 --> 00:34:27,220
code fences for the examples and if you

00:34:25,420 --> 00:34:30,130
think about notebooks are quite similar

00:34:27,220 --> 00:34:34,810
we also have this markdown cells and

00:34:30,130 --> 00:34:37,330
then code cells and just the day that we

00:34:34,810 --> 00:34:39,490
can actually run them and they're

00:34:37,330 --> 00:34:45,160
encoded differently so notebooks are

00:34:39,490 --> 00:34:47,770
basically a JSON document fortunately we

00:34:45,160 --> 00:34:51,130
have tools like note down that let us

00:34:47,770 --> 00:34:54,570
convert this markdown with code fences

00:34:51,130 --> 00:34:58,580
to notebooks and also converts the

00:34:54,570 --> 00:35:00,900
the code fences to actual code cells and

00:34:58,580 --> 00:35:02,940
I'm currently working on something that

00:35:00,900 --> 00:35:06,990
works a little bit a little bit better

00:35:02,940 --> 00:35:12,870
with with toot or am doc and all these

00:35:06,990 --> 00:35:15,030
modifiers but it's not finished yet and

00:35:12,870 --> 00:35:17,310
then if you have that these notebooks

00:35:15,030 --> 00:35:20,010
with your documentation of course you

00:35:17,310 --> 00:35:24,990
want to to share them let someone

00:35:20,010 --> 00:35:28,050
actually use them without without too

00:35:24,990 --> 00:35:30,000
much too much effort right and this is

00:35:28,050 --> 00:35:34,770
where binder comes into play which is a

00:35:30,000 --> 00:35:42,000
really cool service so basically what we

00:35:34,770 --> 00:35:44,400
can just give it a git repo and what it

00:35:42,000 --> 00:35:49,320
does is it creates a docker container

00:35:44,400 --> 00:35:52,770
with a notebook server and our or

00:35:49,320 --> 00:35:58,620
notebooks and then repo and gives us

00:35:52,770 --> 00:36:00,960
back a link and we can and when we click

00:35:58,620 --> 00:36:03,390
on that link we we get a running

00:36:00,960 --> 00:36:05,580
notebook server without not so this runs

00:36:03,390 --> 00:36:08,220
somewhere in the cloud that's it but

00:36:05,580 --> 00:36:11,820
it's a free service and I think we get a

00:36:08,220 --> 00:36:16,230
little bit of time so let's just try

00:36:11,820 --> 00:36:22,200
this so here we have the binder website

00:36:16,230 --> 00:36:29,210
and we're using the the almond example

00:36:22,200 --> 00:36:32,850
repo and just launching this thing and

00:36:29,210 --> 00:36:35,220
the first time you add a repo or if you

00:36:32,850 --> 00:36:38,790
update something this this will build

00:36:35,220 --> 00:36:40,110
the docker the docker image but now it's

00:36:38,790 --> 00:36:43,170
already built that should be a little

00:36:40,110 --> 00:36:47,610
bit faster if the internet works yeah it

00:36:43,170 --> 00:36:49,710
looks good so here here we have a

00:36:47,610 --> 00:36:53,430
running notebook server with with

00:36:49,710 --> 00:36:55,890
Jupiter lab and and the the almond

00:36:53,430 --> 00:37:01,710
examples and we can just try them out so

00:36:55,890 --> 00:37:03,600
we can for instance look at this column

00:37:01,710 --> 00:37:11,470
at a tree guide

00:37:03,600 --> 00:37:13,770
and just run things and I think it takes

00:37:11,470 --> 00:37:16,860
a little bit longer here because their

00:37:13,770 --> 00:37:21,010
resources are limited and the top has to

00:37:16,860 --> 00:37:24,960
to compile ammonites stuff first but

00:37:21,010 --> 00:37:24,960
after some time it should actually run

00:37:26,130 --> 00:37:32,200
let's give it a few more seconds oh yeah

00:37:30,460 --> 00:37:37,030
it also has to download things of course

00:37:32,200 --> 00:37:50,980
because it's not cached so here is

00:37:37,030 --> 00:37:54,400
secrecy in action run okay the internet

00:37:50,980 --> 00:38:02,830
is oh no no it ran so now we can use it

00:37:54,400 --> 00:38:12,850
here and just try things and there's

00:38:02,830 --> 00:38:18,010
also other examples like spark so here

00:38:12,850 --> 00:38:20,650
we can see the spark integration of of

00:38:18,010 --> 00:38:23,560
almond in action so I encourage you to

00:38:20,650 --> 00:38:25,720
give it a try and just there's a link in

00:38:23,560 --> 00:38:29,520
the in the almond talks and in the

00:38:25,720 --> 00:38:29,520
example report to run this

00:38:35,950 --> 00:38:43,400
so if you're interested there's the

00:38:39,230 --> 00:38:45,260
Jupiter website for information about

00:38:43,400 --> 00:38:48,470
Jupiter in general and how to run these

00:38:45,260 --> 00:38:50,900
things and almond also has a shiny

00:38:48,470 --> 00:38:55,369
website with documentation for for

00:38:50,900 --> 00:38:58,460
installation and and use it so check it

00:38:55,369 --> 00:39:02,059
out and then we've just seen the

00:38:58,460 --> 00:39:03,920
examples repo so they can just try try

00:39:02,059 --> 00:39:06,589
these things out without without any

00:39:03,920 --> 00:39:10,549
local set up and get a feeling and how

00:39:06,589 --> 00:39:15,200
this works and we'd also love to see

00:39:10,549 --> 00:39:17,839
contributors so we want to have more

00:39:15,200 --> 00:39:22,670
library and framework integrations and

00:39:17,839 --> 00:39:25,789
of course more examples then there's the

00:39:22,670 --> 00:39:28,940
story of better IDE integration and we

00:39:25,789 --> 00:39:33,079
also need a logo so if you're if you

00:39:28,940 --> 00:39:36,730
have better design skills than me if

00:39:33,079 --> 00:39:41,390
you're interested just talk to Alexandre

00:39:36,730 --> 00:39:47,839
or me or join our Gator channel or check

00:39:41,390 --> 00:39:52,220
out the the almond repo so to recap we

00:39:47,839 --> 00:39:55,569
we've seen that that raffles and

00:39:52,220 --> 00:39:58,630
worksheets are really great tools for

00:39:55,569 --> 00:40:01,609
for exploration and rapid prototyping

00:39:58,630 --> 00:40:04,789
but they don't really cover these these

00:40:01,609 --> 00:40:06,770
other learning phases and with the

00:40:04,789 --> 00:40:09,559
Troubadour notebooks or with notebooks

00:40:06,770 --> 00:40:13,750
we get this this integrated view so we

00:40:09,559 --> 00:40:17,450
have they integrate documentation

00:40:13,750 --> 00:40:19,430
runnable code and also rich output in a

00:40:17,450 --> 00:40:26,089
single document in a single in a single

00:40:19,430 --> 00:40:29,059
view and that makes them a very powerful

00:40:26,089 --> 00:40:31,640
tool for for teaching and for

00:40:29,059 --> 00:40:36,819
interactive learning but of course also

00:40:31,640 --> 00:40:41,630
for data science and data exploration an

00:40:36,819 --> 00:40:43,970
almond yeah by combining the the power

00:40:41,630 --> 00:40:46,990
of Jupiter and ammonites brings that

00:40:43,970 --> 00:40:46,990
experience to Scala

00:40:47,020 --> 00:40:55,130
so thank you very much and I still we I

00:40:52,190 --> 00:41:04,900
think we still got some time for for a

00:40:55,130 --> 00:41:04,900
few questions thank you

00:41:12,280 --> 00:41:22,550
hi sir so I've just got a question about

00:41:20,080 --> 00:41:24,770
using Elmen in a teaching environment

00:41:22,550 --> 00:41:27,440
because I think the problem right now

00:41:24,770 --> 00:41:29,330
that I'm because I've helped organize

00:41:27,440 --> 00:41:31,400
some scholar workshops and the number

00:41:29,330 --> 00:41:32,570
one problem is always getting the

00:41:31,400 --> 00:41:35,750
participant to set up the environment

00:41:32,570 --> 00:41:37,850
correctly so I think alman is actually

00:41:35,750 --> 00:41:39,890
quite a gonna be a quite a good solution

00:41:37,850 --> 00:41:43,040
for that but what I'm thinking of is

00:41:39,890 --> 00:41:47,560
there any sort of like solution in

00:41:43,040 --> 00:41:52,190
actually for the participants to have

00:41:47,560 --> 00:41:54,050
separate sessions in say not or I you

00:41:52,190 --> 00:41:55,580
know just using one server and everyone

00:41:54,050 --> 00:41:57,680
can connect it at one server and having

00:41:55,580 --> 00:42:01,310
their own sort of like session yes

00:41:57,680 --> 00:42:03,170
there's actually a solution I didn't

00:42:01,310 --> 00:42:05,750
have that on slides but it's called

00:42:03,170 --> 00:42:10,550
Jupiter hop which is basically a

00:42:05,750 --> 00:42:15,920
multi-user notebook server and has all

00:42:10,550 --> 00:42:18,170
kinds of integrations so you can but

00:42:15,920 --> 00:42:22,040
what what it basically does is it runs

00:42:18,170 --> 00:42:24,980
its own notebook server for for every

00:42:22,040 --> 00:42:28,400
user so they are isolated and you also

00:42:24,980 --> 00:42:31,900
have authentication pluggable

00:42:28,400 --> 00:42:36,230
authentication and you can run that in

00:42:31,900 --> 00:42:38,330
and in the cloud and community some and

00:42:36,230 --> 00:42:43,970
things like that that so this is this

00:42:38,330 --> 00:42:45,500
might be a solution sorry so this is

00:42:43,970 --> 00:42:47,690
something that can easily easily be done

00:42:45,500 --> 00:42:51,410
so you just plug Elmen into this Jupiter

00:42:47,690 --> 00:42:55,450
oh yeah so this is this is basically

00:42:51,410 --> 00:42:58,490
separate because yeah it runs the

00:42:55,450 --> 00:42:58,789
Jupiter server and of course in that in

00:42:58,490 --> 00:43:02,919
there

00:42:58,789 --> 00:43:06,410
server you'd have to you'd have to

00:43:02,919 --> 00:43:08,599
provide almond up front so you'd have to

00:43:06,410 --> 00:43:10,249
install it there perhaps provide a

00:43:08,599 --> 00:43:12,589
docker image or so depending on your

00:43:10,249 --> 00:43:20,749
setup with with almond installed already

00:43:12,589 --> 00:43:23,119
yeah okay awesome thank you so um first

00:43:20,749 --> 00:43:24,709
of all thank you for the talk and I have

00:43:23,119 --> 00:43:26,269
several questions so first of all if

00:43:24,709 --> 00:43:28,400
could you just list a plugin that you

00:43:26,269 --> 00:43:30,769
use in the presentation because it's

00:43:28,400 --> 00:43:37,369
kind of interesting to see oh yeah

00:43:30,769 --> 00:43:39,609
so the plugin is called rise just go

00:43:37,369 --> 00:43:39,609
back

00:44:07,170 --> 00:44:13,400
I don't know and one slide was but it's

00:44:10,140 --> 00:44:15,360
called rise I think if you if you just

00:44:13,400 --> 00:44:21,270
if you just google it

00:44:15,360 --> 00:44:24,570
okay so rise is the name quick question

00:44:21,270 --> 00:44:27,240
regarding spark is there an animal

00:44:24,570 --> 00:44:29,820
some way of doing paging because usually

00:44:27,240 --> 00:44:33,110
the problem is with notebook that you

00:44:29,820 --> 00:44:36,440
just take data out of spark you get a

00:44:33,110 --> 00:44:38,880
lot of data and then you're kind of

00:44:36,440 --> 00:44:42,620
you're so we're gonna die in some point

00:44:38,880 --> 00:44:45,390
so you mean if you're for instance

00:44:42,620 --> 00:44:48,180
display a table a data frame or

00:44:45,390 --> 00:44:50,070
something like that and and then you

00:44:48,180 --> 00:44:55,920
want to page instead of having all the

00:44:50,070 --> 00:44:59,990
data or yeah there's no no built-in

00:44:55,920 --> 00:45:03,330
support so this but this is something

00:44:59,990 --> 00:45:08,100
you'd you could create a helper function

00:45:03,330 --> 00:45:10,680
that actually allows you to to page

00:45:08,100 --> 00:45:13,710
through things but it it depends a

00:45:10,680 --> 00:45:16,080
little bit on how on the user experience

00:45:13,710 --> 00:45:18,810
right so if you want something where you

00:45:16,080 --> 00:45:23,310
can actually page do the paging through

00:45:18,810 --> 00:45:25,830
a button in like having an interactive

00:45:23,310 --> 00:45:28,140
table where you can page the things then

00:45:25,830 --> 00:45:30,180
you'd need to build a widget that allows

00:45:28,140 --> 00:45:33,930
that so this is a little bit more

00:45:30,180 --> 00:45:36,500
involved if there is widget for there so

00:45:33,930 --> 00:45:38,550
this is not not available now okay and

00:45:36,500 --> 00:45:40,440
is there a way to load your own

00:45:38,550 --> 00:45:42,540
libraries I mean I've seen that you use

00:45:40,440 --> 00:45:44,370
only to load kind of maven but then it's

00:45:42,540 --> 00:45:46,740
means you kind of need to you couldn't

00:45:44,370 --> 00:45:49,500
work with libraries on your own local

00:45:46,740 --> 00:45:53,880
machine right yeah so if you publish it

00:45:49,500 --> 00:45:56,010
locally it should I think it should pick

00:45:53,880 --> 00:45:58,920
that yeah it should pick them up so if

00:45:56,010 --> 00:46:01,380
you if you just published this if you do

00:45:58,920 --> 00:46:03,600
an SPT for instance to publish local

00:46:01,380 --> 00:46:09,090
publish that into your local iberia pool

00:46:03,600 --> 00:46:12,020
it will just work more questions with a

00:46:09,090 --> 00:46:12,020
little just crimp you off

00:46:13,130 --> 00:46:27,290
one more question first

00:46:21,030 --> 00:46:30,930
super quick question Vegas 212 when I

00:46:27,290 --> 00:46:36,210
actually it's a very good question

00:46:30,930 --> 00:46:40,580
I actually talked to to a cement

00:46:36,210 --> 00:46:44,370
maintainer of this yesterday at the

00:46:40,580 --> 00:46:50,270
community dinner and he promised to do

00:46:44,370 --> 00:46:50,270
it soon but okay tomorrow I tried

00:46:50,340 --> 00:46:55,230
skÃ¡l native Python so so it's gonna need

00:46:53,430 --> 00:46:57,000
a van and she'll not show up for like

00:46:55,230 --> 00:47:01,350
you know call Python so we can basically

00:46:57,000 --> 00:47:03,300
use all of Python stuff and then destroy

00:47:01,350 --> 00:47:09,540
it

00:47:03,300 --> 00:47:11,810
yeah so there's no no native support for

00:47:09,540 --> 00:47:16,440
that at the moment but there's this

00:47:11,810 --> 00:47:19,950
library from what's it called

00:47:16,440 --> 00:47:22,500
hi I forgot the name but there's this

00:47:19,950 --> 00:47:25,470
library independent of notebooks where

00:47:22,500 --> 00:47:29,630
you can actually call Cole Python from

00:47:25,470 --> 00:47:29,630
Scala so that might be an option okay

00:47:35,700 --> 00:47:43,260
so times up

00:47:37,540 --> 00:47:43,260

YouTube URL: https://www.youtube.com/watch?v=DLdJ4EFqkf8


