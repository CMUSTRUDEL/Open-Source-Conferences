Title: ScalaWebTest -  integration testing made easy - Dani Rey
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/scalawebtest---integration-testing-made-easy
Captions: 
	00:00:00,000 --> 00:00:07,500
hello everyone I'd like to start with a

00:00:03,510 --> 00:00:08,250
short story on why we created Scala

00:00:07,500 --> 00:00:13,259
webtest

00:00:08,250 --> 00:00:17,520
so my name is Danny and let's serve this

00:00:13,259 --> 00:00:22,980
once upon a time a legacy software

00:00:17,520 --> 00:00:26,760
redesign went well wet and now it and

00:00:22,980 --> 00:00:30,150
this cost something a strange so that

00:00:26,760 --> 00:00:34,680
code base had huge amounts of tests it

00:00:30,150 --> 00:00:39,809
was not just mm it was comparability to

00:00:34,680 --> 00:00:41,670
the amount of code this is a lot so what

00:00:39,809 --> 00:00:44,850
did we even redesign so what we had

00:00:41,670 --> 00:00:48,320
there is an enterprise CMS and a quite

00:00:44,850 --> 00:00:51,210
complex link handling so what I told is

00:00:48,320 --> 00:00:56,789
you would have to externalize those

00:00:51,210 --> 00:00:59,430
resource paths to URLs with domains and

00:00:56,789 --> 00:01:02,280
we'd have multiple domains and also it

00:00:59,430 --> 00:01:04,559
should have a feature that users could

00:01:02,280 --> 00:01:06,479
just copy the address for and then

00:01:04,559 --> 00:01:08,189
create a link within the CMS and then it

00:01:06,479 --> 00:01:09,780
would internalize the link and create a

00:01:08,189 --> 00:01:12,540
resource path out of it so that if

00:01:09,780 --> 00:01:15,930
someone would rename that resource that

00:01:12,540 --> 00:01:18,390
no links would be broken and it would

00:01:15,930 --> 00:01:20,430
also have centralized asset management

00:01:18,390 --> 00:01:22,530
but there's as such it appear on

00:01:20,430 --> 00:01:26,310
different domains depending on where you

00:01:22,530 --> 00:01:32,250
would use them and so this was a bedrock

00:01:26,310 --> 00:01:34,650
style and a bit confusing so link

00:01:32,250 --> 00:01:37,049
handling was done within templates and

00:01:34,650 --> 00:01:39,570
in background shops and in models and in

00:01:37,049 --> 00:01:40,970
controllers and on the rewriter pipeline

00:01:39,570 --> 00:01:43,920
and so on

00:01:40,970 --> 00:01:46,259
and we need the refactoring and what we

00:01:43,920 --> 00:01:49,590
ended up with was a link factory where

00:01:46,259 --> 00:01:51,990
he could put swing to you and it's just

00:01:49,590 --> 00:01:54,689
detect what what's that and then we

00:01:51,990 --> 00:01:57,030
create an according model or an instance

00:01:54,689 --> 00:02:00,450
with an according type of this and this

00:01:57,030 --> 00:02:02,280
would then taken care of telling ya okay

00:02:00,450 --> 00:02:06,479
you want an externalized version of me

00:02:02,280 --> 00:02:09,039
even an internal whatever hmm so if you

00:02:06,479 --> 00:02:13,209
look at this

00:02:09,039 --> 00:02:17,530
it's quite quite hard to to match like

00:02:13,209 --> 00:02:19,409
this with that and if we now think of

00:02:17,530 --> 00:02:22,569
unit tests

00:02:19,409 --> 00:02:25,530
how many unit tests could we keep how

00:02:22,569 --> 00:02:29,680
many unit tests would help our redesign

00:02:25,530 --> 00:02:32,409
not many I mean let's be honest the

00:02:29,680 --> 00:02:34,030
templates were not tested at all if unit

00:02:32,409 --> 00:02:35,530
tests background chops were not really

00:02:34,030 --> 00:02:38,500
tests and models and controllers were

00:02:35,530 --> 00:02:41,379
tested but they didn't really align with

00:02:38,500 --> 00:02:43,269
the new models we could get some

00:02:41,379 --> 00:02:45,519
inspiration from those tests but we

00:02:43,269 --> 00:02:51,639
could not take them over we just had to

00:02:45,519 --> 00:02:54,159
rewrite them why did this go well now we

00:02:51,639 --> 00:02:56,409
had a huge amount of integration tests

00:02:54,159 --> 00:02:58,900
as well there's integration tests we're

00:02:56,409 --> 00:03:00,909
not done in a clever way mostly there

00:02:58,900 --> 00:03:02,440
were even just a lot of tests getting to

00:03:00,909 --> 00:03:04,359
your page and just looking if there's a

00:03:02,440 --> 00:03:07,540
certain link there and if it looked a

00:03:04,359 --> 00:03:10,329
certain way it was enough to cover up

00:03:07,540 --> 00:03:12,849
all the box which we created during the

00:03:10,329 --> 00:03:14,019
redesign and he will hand about a lot of

00:03:12,849 --> 00:03:16,030
features which you should have

00:03:14,019 --> 00:03:18,699
implemented during the redesign but we

00:03:16,030 --> 00:03:22,989
didn't and you could fix that before

00:03:18,699 --> 00:03:26,440
shipping this so it saved our ass

00:03:22,989 --> 00:03:28,629
basically and that's when I started to

00:03:26,440 --> 00:03:33,280
embrace integration tests and look

00:03:28,629 --> 00:03:35,620
looking more into this topic so what do

00:03:33,280 --> 00:03:40,150
I even mean if I talk about integration

00:03:35,620 --> 00:03:43,060
tests in the context of web applications

00:03:40,150 --> 00:03:46,629
that means after the deployment a

00:03:43,060 --> 00:03:48,639
deployment can be on your CI agent or on

00:03:46,629 --> 00:03:51,310
your local notebook so this doesn't have

00:03:48,639 --> 00:03:53,980
to be a test server this can be

00:03:51,310 --> 00:03:56,980
somewhere but it has to be a running

00:03:53,980 --> 00:04:00,879
complete system with everything and then

00:03:56,980 --> 00:04:04,930
you go to that system with a browser

00:04:00,879 --> 00:04:07,510
over HTTP that's for me this is an

00:04:04,930 --> 00:04:12,359
integration test other people call this

00:04:07,510 --> 00:04:16,959
antwuan tests browser tests UI tests now

00:04:12,359 --> 00:04:20,919
there's the famous test pyramid and it

00:04:16,959 --> 00:04:21,940
says that I'm wrong I said the pyramid

00:04:20,919 --> 00:04:24,460
is wrong

00:04:21,940 --> 00:04:26,620
so what the pyramid sounds is you have

00:04:24,460 --> 00:04:29,290
to have a lot of unit tasks some service

00:04:26,620 --> 00:04:31,030
tests and maybe a very few UI tests

00:04:29,290 --> 00:04:32,260
because they're too slow and too

00:04:31,030 --> 00:04:36,940
cumbersome

00:04:32,260 --> 00:04:40,090
I say redesigning software is very key

00:04:36,940 --> 00:04:43,570
to what we do so we need tests that

00:04:40,090 --> 00:04:47,530
embrace this and then we need tests for

00:04:43,570 --> 00:04:49,360
for like having a good courage of core

00:04:47,530 --> 00:04:51,880
domain logic so four core domain logic

00:04:49,360 --> 00:04:54,300
unit tests are the best it's very easy

00:04:51,880 --> 00:04:57,040
to create a lot of different situations

00:04:54,300 --> 00:04:59,590
you can also use property based testing

00:04:57,040 --> 00:05:02,020
there as a variant of unit testing but

00:04:59,590 --> 00:05:05,130
still you need a lot of integration

00:05:02,020 --> 00:05:08,890
tests and integration testing can even

00:05:05,130 --> 00:05:11,260
help you if you do a complete rebuild of

00:05:08,890 --> 00:05:12,970
your system you can rebuild the system

00:05:11,260 --> 00:05:14,800
in a different language and a different

00:05:12,970 --> 00:05:17,140
framework they still work because they

00:05:14,800 --> 00:05:22,270
check what your user expects from you

00:05:17,140 --> 00:05:26,710
and not not internally so I thought

00:05:22,270 --> 00:05:31,330
what's next to a pyramid so quite closer

00:05:26,710 --> 00:05:35,290
some camels luckily they have two humps

00:05:31,330 --> 00:05:37,300
so I think you can say there should be a

00:05:35,290 --> 00:05:39,130
lot of unit tests a lot of integration

00:05:37,300 --> 00:05:41,650
tests and if you want to have code

00:05:39,130 --> 00:05:43,510
quality he also nicked a lot of other

00:05:41,650 --> 00:05:45,460
tools so you need some study code

00:05:43,510 --> 00:05:47,110
analysis you probably have some package

00:05:45,460 --> 00:05:50,169
of service tests you will have your

00:05:47,110 --> 00:05:57,660
regression tests but never forget to use

00:05:50,169 --> 00:06:02,610
your brain so why do people not like

00:05:57,660 --> 00:06:02,610
integration tests what are the problems

00:06:02,640 --> 00:06:12,840
they can be tedious to write that can be

00:06:07,770 --> 00:06:15,640
difficult to read I can be unreliable

00:06:12,840 --> 00:06:17,890
now this is this is definitely not what

00:06:15,640 --> 00:06:21,010
you want before I test suit that's not

00:06:17,890 --> 00:06:22,390
what you go on there so let's let's have

00:06:21,010 --> 00:06:26,260
a look at what I mean

00:06:22,390 --> 00:06:28,570
so this here is Scala test with selenium

00:06:26,260 --> 00:06:32,020
that's what you get out of the box there

00:06:28,570 --> 00:06:35,860
and it's very good at certain stuff so

00:06:32,020 --> 00:06:38,430
you can easily find for example

00:06:35,860 --> 00:06:40,449
single elements and then verify them

00:06:38,430 --> 00:06:42,580
nothing to be done there

00:06:40,449 --> 00:06:47,710
you can also click on stuff and fill out

00:06:42,580 --> 00:06:51,009
forms it's all fine but when you want to

00:06:47,710 --> 00:06:52,930
check more than just one element but you

00:06:51,009 --> 00:06:55,509
want to check attributes on an element

00:06:52,930 --> 00:06:58,719
and being that they are correctly nested

00:06:55,509 --> 00:07:01,509
and all that stuff then it starts to get

00:06:58,719 --> 00:07:03,580
very cumbersome because I guess no one

00:07:01,509 --> 00:07:09,279
if we can just immediately see what's

00:07:03,580 --> 00:07:12,129
going on here so let's take some

00:07:09,279 --> 00:07:14,889
inspiration from other fields what are

00:07:12,129 --> 00:07:17,710
they doing in manufacturing and

00:07:14,889 --> 00:07:19,990
manufacturing you also want to very

00:07:17,710 --> 00:07:26,139
funny that what do you create is correct

00:07:19,990 --> 00:07:28,479
and even just four bolts and screws the

00:07:26,139 --> 00:07:30,779
lace of information which you could

00:07:28,479 --> 00:07:34,779
verify for is endless

00:07:30,779 --> 00:07:38,319
so probably not worked from this so what

00:07:34,779 --> 00:07:41,500
they use instead is they have gauges and

00:07:38,319 --> 00:07:43,060
maybe someone already handed one to you

00:07:41,500 --> 00:07:45,250
so you can have a look at this

00:07:43,060 --> 00:07:48,490
so there's for example a so-called

00:07:45,250 --> 00:07:51,580
caliper gauge and what it does is it has

00:07:48,490 --> 00:07:54,520
two of this calipers where you can try

00:07:51,580 --> 00:07:58,300
to fit stuff in and if it fits on the

00:07:54,520 --> 00:08:00,370
red side then it is too small and if it

00:07:58,300 --> 00:08:03,009
fits on the other side then it's good

00:08:00,370 --> 00:08:05,830
but if it doesn't fit on the other side

00:08:03,009 --> 00:08:09,129
and it's too big and that's how you can

00:08:05,830 --> 00:08:11,770
very easily test this and the limit plug

00:08:09,129 --> 00:08:13,990
gauge works just the opposite way if the

00:08:11,770 --> 00:08:16,960
red part fits and it the hole is too big

00:08:13,990 --> 00:08:20,800
and if the other part doesn't fit then

00:08:16,960 --> 00:08:24,370
it's too small so that's all there is

00:08:20,800 --> 00:08:26,620
can we transform this somehow because I

00:08:24,370 --> 00:08:31,449
was really interested as testing method

00:08:26,620 --> 00:08:36,699
now let's take this so can we test HTML

00:08:31,449 --> 00:08:39,099
with HTML and in fact we can so the test

00:08:36,699 --> 00:08:41,680
which we saw before which probably none

00:08:39,099 --> 00:08:45,010
if you could really read that's doing

00:08:41,680 --> 00:08:48,570
exactly the same thing

00:08:45,010 --> 00:08:52,269
so we just say we want our current page

00:08:48,570 --> 00:08:56,470
to fit this sketch and the gauge

00:08:52,269 --> 00:09:01,209
definition is just some HTML so high

00:08:56,470 --> 00:09:04,180
start done so on the left side you see

00:09:01,209 --> 00:09:06,790
an HTML document and on the right side

00:09:04,180 --> 00:09:09,070
you see all the code needed to verify

00:09:06,790 --> 00:09:15,310
this so there's really no line missing

00:09:09,070 --> 00:09:19,000
here and what happens when the so yeah

00:09:15,310 --> 00:09:21,850
one little piece it's not HTML it's

00:09:19,000 --> 00:09:24,130
scholars have use XML because this is

00:09:21,850 --> 00:09:25,959
just natively supported but the cool

00:09:24,130 --> 00:09:28,570
thing is then you don't need any

00:09:25,959 --> 00:09:30,490
additional frameworks and your IDE will

00:09:28,570 --> 00:09:36,820
even help you making sure that's correct

00:09:30,490 --> 00:09:41,949
so what does your browser do with HTML

00:09:36,820 --> 00:09:45,370
it transforms it to 3 - Adam 3 but this

00:09:41,949 --> 00:09:48,399
Scala do are you compiler with XML it

00:09:45,370 --> 00:09:51,760
transforms it to 3 so now they really

00:09:48,399 --> 00:09:54,699
look alike so let's see what's going on

00:09:51,760 --> 00:09:57,430
if we then try to apply this sketch if

00:09:54,699 --> 00:10:01,060
you try to fit the document to the gauge

00:09:57,430 --> 00:10:04,300
so the driver now is here on the right

00:10:01,060 --> 00:10:06,550
side that's the gauge so the first thing

00:10:04,300 --> 00:10:09,459
the gauge cares for it's carrying for a

00:10:06,550 --> 00:10:12,519
div so it's searching the document for a

00:10:09,459 --> 00:10:15,160
give it's finding 1 searching for UL and

00:10:12,519 --> 00:10:17,829
it's searching for an ally below this so

00:10:15,160 --> 00:10:20,380
we just go down that gauge and we

00:10:17,829 --> 00:10:23,470
proceed further onto the link and then

00:10:20,380 --> 00:10:26,560
we start to control the D attributes and

00:10:23,470 --> 00:10:28,510
what we see is they're not the same so

00:10:26,560 --> 00:10:33,100
this is not the element we're looking

00:10:28,510 --> 00:10:34,930
for so we go back up until we have a

00:10:33,100 --> 00:10:38,199
sibling which we could take into

00:10:34,930 --> 00:10:40,690
consideration and we go again down and

00:10:38,199 --> 00:10:43,540
we verify all the attributes and if they

00:10:40,690 --> 00:10:49,610
all align then this document fits our

00:10:43,540 --> 00:10:52,920
gauge that's it voila now

00:10:49,610 --> 00:10:55,290
test should not be grateful and HTML

00:10:52,920 --> 00:10:56,790
allows to have a lot of additional stuff

00:10:55,290 --> 00:11:01,740
in between which you don't really care

00:10:56,790 --> 00:11:07,020
for so again which was four days to our

00:11:01,740 --> 00:11:10,470
trees and then but you can see now is

00:11:07,020 --> 00:11:13,350
this a bit a special tree on within the

00:11:10,470 --> 00:11:19,260
gauge because there's a ul if no Li

00:11:13,350 --> 00:11:21,810
below that's directly link so doesn't

00:11:19,260 --> 00:11:27,180
make too much sense as HTML it should

00:11:21,810 --> 00:11:30,840
just show you how it can work so from

00:11:27,180 --> 00:11:33,090
the UL we just look for a child element

00:11:30,840 --> 00:11:35,340
which is a link and it doesn't matter if

00:11:33,090 --> 00:11:37,500
this is a child of a child we can just

00:11:35,340 --> 00:11:39,990
search down the tree and that's what we

00:11:37,500 --> 00:11:42,660
do and then we check the attributes and

00:11:39,990 --> 00:11:44,100
also here we can see that we only check

00:11:42,660 --> 00:11:45,990
the attributes which are part of the

00:11:44,100 --> 00:11:47,940
gauge we don't care about additional

00:11:45,990 --> 00:11:49,770
attributes because that's how HTML works

00:11:47,940 --> 00:11:52,170
you can have as many attributes as you

00:11:49,770 --> 00:11:55,440
want there's only a certain part which

00:11:52,170 --> 00:11:59,310
matter at the point in time so you only

00:11:55,440 --> 00:12:02,790
verify those now what about element or

00:11:59,310 --> 00:12:05,040
e'er element already definitely matters

00:12:02,790 --> 00:12:06,390
we don't want to mix elements up because

00:12:05,040 --> 00:12:09,300
that's how they are positioned on the

00:12:06,390 --> 00:12:10,530
page often they are about ranking so

00:12:09,300 --> 00:12:14,550
this is something you really want to

00:12:10,530 --> 00:12:17,460
verify when you do integration tests so

00:12:14,550 --> 00:12:20,880
again you go from the right side we go

00:12:17,460 --> 00:12:24,120
down and we compare the first two

00:12:20,880 --> 00:12:26,070
elements and we see that within a

00:12:24,120 --> 00:12:28,860
document the document is wrong the

00:12:26,070 --> 00:12:32,220
documents search is second and then is

00:12:28,860 --> 00:12:34,950
coming first so that's not the element

00:12:32,220 --> 00:12:37,740
we're looking for are we going back up

00:12:34,950 --> 00:12:40,530
and now when you go again when we go

00:12:37,740 --> 00:12:42,390
down here you can see in the gauge we

00:12:40,530 --> 00:12:44,310
still care for the first element we

00:12:42,390 --> 00:12:46,260
haven't found anything for the first

00:12:44,310 --> 00:12:49,589
element so we don't go to the second one

00:12:46,260 --> 00:12:52,830
we still with the first one and we found

00:12:49,589 --> 00:12:56,940
one so that's good so we go to the next

00:12:52,830 --> 00:12:59,730
li and this has to be a sibling so we

00:12:56,940 --> 00:13:01,200
find one that's good and then we verify

00:12:59,730 --> 00:13:03,810
the order and we can see now

00:13:01,200 --> 00:13:08,880
that's not good that's not what we have

00:13:03,810 --> 00:13:13,649
been looking for so this is covered as

00:13:08,880 --> 00:13:20,610
part of of the of the framework so let's

00:13:13,649 --> 00:13:26,120
be brave let's see a demo so let's go

00:13:20,610 --> 00:13:33,060
over here don't see my oh now I see I

00:13:26,120 --> 00:13:56,820
have to sorry didn't check this I have

00:13:33,060 --> 00:13:59,550
to mirror my screen sorry for that so

00:13:56,820 --> 00:14:01,920
now you should see my screen I'll just

00:13:59,550 --> 00:14:03,810
delete everything which we had here so

00:14:01,920 --> 00:14:07,920
that you can really follow me on the way

00:14:03,810 --> 00:14:11,699
to what we need so basically you just

00:14:07,920 --> 00:14:19,529
start with a class and then you have to

00:14:11,699 --> 00:14:21,510
extend one of my base traits and usually

00:14:19,529 --> 00:14:23,790
you would extend with the scholar too so

00:14:21,510 --> 00:14:28,170
it may be a sand flats bag free spec and

00:14:23,790 --> 00:14:31,260
here it's just integration free spec so

00:14:28,170 --> 00:14:34,050
not much different the next thing you

00:14:31,260 --> 00:14:38,490
have to provide is you have to tell me

00:14:34,050 --> 00:14:41,329
what your base URI should be because you

00:14:38,490 --> 00:14:45,810
have to know where to fetch the document

00:14:41,329 --> 00:14:48,510
and then another thing which you have to

00:14:45,810 --> 00:14:51,779
provide is a path because we have to

00:14:48,510 --> 00:14:54,060
fetch that from from from a path so we

00:14:51,779 --> 00:14:57,120
separates the base URI from the path

00:14:54,060 --> 00:15:00,300
because usually you want to be able to

00:14:57,120 --> 00:15:04,670
just be change to base your I so you can

00:15:00,300 --> 00:15:09,930
maybe test your production system so

00:15:04,670 --> 00:15:11,810
thank you a scholar web test page and

00:15:09,930 --> 00:15:16,699
now

00:15:11,810 --> 00:15:25,100
we can start our test and it's missing

00:15:16,699 --> 00:15:28,399
so that's it so let's go to this webpage

00:15:25,100 --> 00:15:31,370
we want to verify something from here so

00:15:28,399 --> 00:15:35,360
what we can do is just take the

00:15:31,370 --> 00:15:38,149
inspector go somewhere like we say we

00:15:35,360 --> 00:15:43,970
care for this news item here and then I

00:15:38,149 --> 00:15:47,839
just copy at the HTML and we go back

00:15:43,970 --> 00:15:52,279
here and it's a current page

00:15:47,839 --> 00:15:55,579
faites and we copy the HTML here and we

00:15:52,279 --> 00:16:02,559
say so this is it's a news item or

00:15:55,579 --> 00:16:02,559
something so that's it and we run it

00:16:11,940 --> 00:16:18,420
apparently something didn't the line

00:16:19,920 --> 00:16:28,950
guess it's something with this text here

00:16:23,410 --> 00:16:28,950
I don't know let's just remove that one

00:16:29,580 --> 00:16:37,060
guess it's something about being

00:16:31,870 --> 00:16:38,950
multi-line it should have had to be to

00:16:37,060 --> 00:16:41,740
specify maybe a bit differently instead

00:16:38,950 --> 00:16:45,250
of just sending it copying it over so

00:16:41,740 --> 00:16:49,240
what you can also do is for example here

00:16:45,250 --> 00:16:53,620
we can say okay it should a tree

00:16:49,240 --> 00:16:56,560
contains sketches so you can only have

00:16:53,620 --> 00:17:00,340
parts of it and you can also use red X

00:16:56,560 --> 00:17:05,170
and you can use that for text and you

00:17:00,340 --> 00:17:09,100
can use that for attributes as well and

00:17:05,170 --> 00:17:19,750
if you if you break it then you get some

00:17:09,100 --> 00:17:25,900
nice reports also on this no oh yeah of

00:17:19,750 --> 00:17:28,860
course if I have contains and it would

00:17:25,900 --> 00:17:28,860
still contain that

00:17:36,180 --> 00:17:43,140
and now you can see that it says the

00:17:40,350 --> 00:17:47,670
text was not fitting and will then

00:17:43,140 --> 00:17:54,990
describe that simple coaches didn't

00:17:47,670 --> 00:18:00,200
equal gays h's whatever and yeah so

00:17:54,990 --> 00:18:07,410
another thing that you can do is either

00:18:00,200 --> 00:18:09,170
element K objects back I think that's

00:18:07,410 --> 00:18:11,910
also quite interesting because

00:18:09,170 --> 00:18:14,790
oftentimes you just you do not want to

00:18:11,910 --> 00:18:16,890
try this on the whole page when you want

00:18:14,790 --> 00:18:21,150
to try this on a certain element maybe

00:18:16,890 --> 00:18:23,190
because you just spawn something which

00:18:21,150 --> 00:18:25,350
would create a certain element or which

00:18:23,190 --> 00:18:31,170
should be modified so what you can do is

00:18:25,350 --> 00:18:33,120
you can reuse so you can use that where

00:18:31,170 --> 00:18:37,020
you where you can use find all from from

00:18:33,120 --> 00:18:40,080
scala tests to find images here and then

00:18:37,020 --> 00:18:42,630
you have a gauge which is just put in

00:18:40,080 --> 00:18:45,660
your in T variable and then you use for

00:18:42,630 --> 00:18:48,710
all so you use for all image and images

00:18:45,660 --> 00:18:51,900
the image should fit that gauge and

00:18:48,710 --> 00:18:54,630
every whenever you do that make sure

00:18:51,900 --> 00:18:56,640
that you verify that you received the

00:18:54,630 --> 00:19:00,440
correct amount of images because if

00:18:56,640 --> 00:19:00,440
that's empty then all the fit

00:19:02,950 --> 00:19:12,710
[Music]

00:19:06,140 --> 00:19:14,270
that's not okay let's right so that was

00:19:12,710 --> 00:19:17,809
my Beckham so the other thing which

00:19:14,270 --> 00:19:21,170
probably a lot of you care for its Jason

00:19:17,809 --> 00:19:25,400
that's do those web applications is HTML

00:19:21,170 --> 00:19:28,010
and chase them basically so we we also

00:19:25,400 --> 00:19:32,450
have JSON gauges and they're quite

00:19:28,010 --> 00:19:33,610
similar to HTML gauges but a lot simpler

00:19:32,450 --> 00:19:36,679
[Music]

00:19:33,610 --> 00:19:43,730
let me just make sure I get the right

00:19:36,679 --> 00:19:47,059
files because with Jason you cannot have

00:19:43,730 --> 00:19:49,520
intermediate elements the hierarchy

00:19:47,059 --> 00:19:51,380
matters so we know exactly which level

00:19:49,520 --> 00:19:55,340
to expect what so that's a lot easier to

00:19:51,380 --> 00:19:57,320
test nevertheless I mean there's pit

00:19:55,340 --> 00:20:01,450
means to verify every of those

00:19:57,320 --> 00:20:05,450
properties but it takes more time so

00:20:01,450 --> 00:20:07,400
rather have this lazy test I mean

00:20:05,450 --> 00:20:09,290
there's no doubt that this is not a

00:20:07,400 --> 00:20:12,140
clean solution to tell you why things

00:20:09,290 --> 00:20:14,450
are going wrong I'd rather have this and

00:20:12,140 --> 00:20:17,150
nothing because that's often what's

00:20:14,450 --> 00:20:20,900
what's going on under pressure it's this

00:20:17,150 --> 00:20:25,510
or nothing so each is copying one

00:20:20,900 --> 00:20:35,270
example result and make sure it's there

00:20:25,510 --> 00:20:37,970
and we can also see so I think I can I

00:20:35,270 --> 00:20:39,679
know I can type again so I think for

00:20:37,970 --> 00:20:41,360
tests it's usually more interesting to

00:20:39,679 --> 00:20:45,559
see them fail than to see them just

00:20:41,360 --> 00:20:49,850
showing green so what smells misspelled

00:20:45,559 --> 00:20:55,580
Dijkstra and the output which you will

00:20:49,850 --> 00:21:02,410
then get something like this thanks for

00:20:55,580 --> 00:21:05,960
taking it equal D J extra something so

00:21:02,410 --> 00:21:08,120
so they provide also meaningful output

00:21:05,960 --> 00:21:10,370
if they fail but they don't provide

00:21:08,120 --> 00:21:12,799
unfortunately because you can't really

00:21:10,370 --> 00:21:16,670
ask on text why this certain property

00:21:12,799 --> 00:21:19,410
was wrong but so

00:21:16,670 --> 00:21:21,330
so usually you have to combine them with

00:21:19,410 --> 00:21:26,130
more explicit tests for single

00:21:21,330 --> 00:21:35,070
properties the other thing which we have

00:21:26,130 --> 00:21:38,820
is so what you can do here is instead of

00:21:35,070 --> 00:21:40,980
providing values you just remove all the

00:21:38,820 --> 00:21:44,250
values and you taught to just check for

00:21:40,980 --> 00:21:46,620
the types so this is very useful if you

00:21:44,250 --> 00:21:48,090
have vast amount of like you gather each

00:21:46,620 --> 00:21:49,980
list and you just want to make sure that

00:21:48,090 --> 00:21:51,570
every element of the list has all

00:21:49,980 --> 00:21:53,910
attributes which you expect in the

00:21:51,570 --> 00:21:56,100
correct type it could use schemas for

00:21:53,910 --> 00:21:59,730
that but this is a lot easier to write

00:21:56,100 --> 00:22:01,440
in a JSON schema if you ever handle like

00:21:59,730 --> 00:22:03,090
a chase and scheme that's no fun to

00:22:01,440 --> 00:22:08,160
write either you can generate it or you

00:22:03,090 --> 00:22:11,700
probably not do so that's our way to do

00:22:08,160 --> 00:22:13,830
it and there's some other options you

00:22:11,700 --> 00:22:15,930
can decide whether you want to care for

00:22:13,830 --> 00:22:22,470
array order or not and if you want to

00:22:15,930 --> 00:22:24,750
care for size of arrays or not so let's

00:22:22,470 --> 00:22:27,930
have a look at the concepts what are the

00:22:24,750 --> 00:22:31,050
concepts behind Scala webtest it's based

00:22:27,930 --> 00:22:33,600
on Scala tests and selenium it takes

00:22:31,050 --> 00:22:36,480
care of the lifecycle so that's why you

00:22:33,600 --> 00:22:38,970
had to probably I had to provide the

00:22:36,480 --> 00:22:40,800
base URI in the paths I can look this

00:22:38,970 --> 00:22:43,470
stuff up for us we don't have to care

00:22:40,800 --> 00:22:46,140
for this it provides view defaults for

00:22:43,470 --> 00:22:48,060
for the browser for example I provides

00:22:46,140 --> 00:22:50,820
convenience functions to access stuff

00:22:48,060 --> 00:22:53,100
and it follows the coding style of Scala

00:22:50,820 --> 00:22:54,780
tests so if you enter the feature just

00:22:53,100 --> 00:23:01,950
probably try it for that which you can

00:22:54,780 --> 00:23:03,750
extend now testing life cycle as with

00:23:01,950 --> 00:23:06,210
every testing framework so that's what

00:23:03,750 --> 00:23:07,800
we just inherit from scarlet sof before

00:23:06,210 --> 00:23:11,580
all before each and then you have your

00:23:07,800 --> 00:23:16,520
tests and then after each and so on what

00:23:11,580 --> 00:23:20,180
we do is we do two things and before all

00:23:16,520 --> 00:23:24,140
that you faster I get back for you

00:23:20,180 --> 00:23:24,140
should I get one back further

00:23:24,650 --> 00:23:31,850
so and before all those we do prepare

00:23:28,940 --> 00:23:34,220
the webdriver so especially with chrome

00:23:31,850 --> 00:23:36,260
this is important because chrome has

00:23:34,220 --> 00:23:38,540
this service which you want to start

00:23:36,260 --> 00:23:39,290
just once so this your tests are

00:23:38,540 --> 00:23:43,400
efficient

00:23:39,290 --> 00:23:45,110
so that's what we do here and even make

00:23:43,400 --> 00:23:47,030
sure that it's ready let's get all the

00:23:45,110 --> 00:23:50,150
correct configuration then we provide a

00:23:47,030 --> 00:23:53,950
hook for a user to do stuff before login

00:23:50,150 --> 00:23:57,200
then in case you have login stuff

00:23:53,950 --> 00:23:59,090
defined we do a login so before we did

00:23:57,200 --> 00:24:01,790
the login we apply the configuration

00:23:59,090 --> 00:24:04,160
which is used for the login so it's log

00:24:01,790 --> 00:24:05,990
in config we apply that we do the login

00:24:04,160 --> 00:24:08,330
then we apply the normal config and then

00:24:05,990 --> 00:24:12,290
we handle our back to the user with the

00:24:08,330 --> 00:24:14,809
after login hook and then before each

00:24:12,290 --> 00:24:18,320
and then every test is going on then

00:24:14,809 --> 00:24:21,230
before each test we navigate to that URL

00:24:18,320 --> 00:24:23,510
which you is basically a combination of

00:24:21,230 --> 00:24:25,250
the base URI and the path we navigate

00:24:23,510 --> 00:24:27,440
there and just make sure the browser is

00:24:25,250 --> 00:24:29,210
sitting there if it if it went away

00:24:27,440 --> 00:24:31,429
because you clicked on stuffed with

00:24:29,210 --> 00:24:34,460
during one test we go back to this and

00:24:31,429 --> 00:24:36,740
if you didn't click on stuff you still

00:24:34,460 --> 00:24:38,510
door so we don't navigate there so you

00:24:36,740 --> 00:24:40,820
can speed up this because this is

00:24:38,510 --> 00:24:43,580
important and you can tweak that because

00:24:40,820 --> 00:24:45,380
maybe and you don't change the page but

00:24:43,580 --> 00:24:46,760
you still have side affecting stuff so

00:24:45,380 --> 00:24:49,990
you want to have a refresh that you can

00:24:46,760 --> 00:24:49,990
configure that that's no problem

00:24:50,410 --> 00:24:57,260
browser options default is HTML unit

00:24:53,660 --> 00:25:00,200
this is JVM balanced nothing to install

00:24:57,260 --> 00:25:02,390
on your computer this works you can on

00:25:00,200 --> 00:25:04,690
the website you can click on link state

00:25:02,390 --> 00:25:08,750
go to scar see it runs in sagacity so

00:25:04,690 --> 00:25:14,210
really nothing needed the JavaScript

00:25:08,750 --> 00:25:16,190
support is a bit mediocre so if you have

00:25:14,210 --> 00:25:18,410
JavaScript heavy stuff HTML unit is

00:25:16,190 --> 00:25:21,200
probably not your friend the good part

00:25:18,410 --> 00:25:23,510
is it exposes HTTP status codes and

00:25:21,200 --> 00:25:26,809
response headers something selenium does

00:25:23,510 --> 00:25:29,419
not so if you have HTML unit it can

00:25:26,809 --> 00:25:32,750
extend an accessor trait and get access

00:25:29,419 --> 00:25:36,870
to this stuff if you use Chrome which is

00:25:32,750 --> 00:25:39,810
another option you don't get to use that

00:25:36,870 --> 00:25:44,550
we support every selenium-webdriver

00:25:39,810 --> 00:25:46,590
but we've built in chrome we tried the

00:25:44,550 --> 00:25:48,480
same with Firefox there we currently

00:25:46,590 --> 00:25:51,150
have some issues and Travis

00:25:48,480 --> 00:25:53,820
it's Travis related not not as framework

00:25:51,150 --> 00:25:55,590
related if we can possible it will be

00:25:53,820 --> 00:25:57,710
part of your framework as well but I

00:25:55,590 --> 00:26:02,030
don't want to ship stuff which is not

00:25:57,710 --> 00:26:05,340
rock-solid and the Apple request sir are

00:26:02,030 --> 00:26:09,840
are welcome also for browsers but please

00:26:05,340 --> 00:26:12,300
help me make that run on Travis so play

00:26:09,840 --> 00:26:15,540
framework buts let's have a look at how

00:26:12,300 --> 00:26:18,930
you do you add this to something

00:26:15,540 --> 00:26:23,520
- what framework so play it's quite

00:26:18,930 --> 00:26:25,260
simple usually you have this sort of

00:26:23,520 --> 00:26:27,360
this enable plugins and there you just

00:26:25,260 --> 00:26:30,810
have to add the integration test

00:26:27,360 --> 00:26:33,150
convicts integration test convicts

00:26:30,810 --> 00:26:35,460
basically just inherits stuff from tests

00:26:33,150 --> 00:26:39,210
and you have your base directory for

00:26:35,460 --> 00:26:42,630
integration tests so this is like one in

00:26:39,210 --> 00:26:44,640
important part you can find this all on

00:26:42,630 --> 00:26:46,830
github it's part of the project we have

00:26:44,640 --> 00:26:50,310
an example subfolder I can find all this

00:26:46,830 --> 00:26:53,060
stuff also before readme describing how

00:26:50,310 --> 00:26:59,940
to use this then you need one dependency

00:26:53,060 --> 00:27:01,350
should be or c2 by now you can add some

00:26:59,940 --> 00:27:03,390
additional dependencies if you want to

00:27:01,350 --> 00:27:06,630
make sure that you you don't have like

00:27:03,390 --> 00:27:08,790
mismatches with with others but they

00:27:06,630 --> 00:27:11,040
would otherwise be transitively be

00:27:08,790 --> 00:27:14,340
pulled in so it just depends on how you

00:27:11,040 --> 00:27:16,470
work and this is the whole script that

00:27:14,340 --> 00:27:19,470
you need them important is that you

00:27:16,470 --> 00:27:23,910
staged your play framework so that you

00:27:19,470 --> 00:27:29,550
get this zip file with the compiled code

00:27:23,910 --> 00:27:31,650
in and then we just run this have to

00:27:29,550 --> 00:27:34,200
provide the secret and then we can from

00:27:31,650 --> 00:27:35,850
SB key we can say yeah I speak Eid test

00:27:34,200 --> 00:27:38,220
and all around all our tests and if it

00:27:35,850 --> 00:27:39,570
finished next up is just stopping play

00:27:38,220 --> 00:27:43,680
again that's all

00:27:39,570 --> 00:27:48,780
you don't need more now what about

00:27:43,680 --> 00:27:49,530
external dependencies so in now external

00:27:48,780 --> 00:27:52,980
dependencies what

00:27:49,530 --> 00:27:56,300
mean external dependencies for your web

00:27:52,980 --> 00:28:00,000
application so this is a place you call

00:27:56,300 --> 00:28:03,960
don't opposes you use because this

00:28:00,000 --> 00:28:07,350
matters for integration testing because

00:28:03,960 --> 00:28:09,270
doable tests are key so you have to

00:28:07,350 --> 00:28:14,910
bring those external dependencies under

00:28:09,270 --> 00:28:17,220
control when you do testing and I think

00:28:14,910 --> 00:28:19,500
I truly believe there's just one way to

00:28:17,220 --> 00:28:23,700
do that and that's mocking all your

00:28:19,500 --> 00:28:25,050
external dependencies that might seem

00:28:23,700 --> 00:28:27,330
like a lot of work

00:28:25,050 --> 00:28:29,340
this is deliberately not part of Scala

00:28:27,330 --> 00:28:31,380
Baptist because there are already many

00:28:29,340 --> 00:28:34,140
good frameworks and they should match

00:28:31,380 --> 00:28:39,690
your problem so we cannot provide this

00:28:34,140 --> 00:28:42,570
for you so if you want to mock an API I

00:28:39,690 --> 00:28:44,910
can suggest why amok I think mock server

00:28:42,570 --> 00:28:47,850
looks also very good have never used

00:28:44,910 --> 00:28:50,730
this if you have graphic you all there's

00:28:47,850 --> 00:28:53,100
fake you'll which you could use and also

00:28:50,730 --> 00:28:55,290
an option to always consider is a small

00:28:53,100 --> 00:28:58,470
web framework because with a small web

00:28:55,290 --> 00:29:01,740
framework you thing again can code those

00:28:58,470 --> 00:29:04,080
responses and maybe you can even have a

00:29:01,740 --> 00:29:06,270
mix and match so some responses you just

00:29:04,080 --> 00:29:08,700
pre record and replay with something

00:29:06,270 --> 00:29:14,430
like very mock and for other stuff you

00:29:08,700 --> 00:29:17,310
use your web framework now what we're

00:29:14,430 --> 00:29:18,900
doing all this stuff so if you want to

00:29:17,310 --> 00:29:22,410
look this up this is called a test

00:29:18,900 --> 00:29:24,450
harness a test harness has the

00:29:22,410 --> 00:29:27,180
responsibility to start and stop your

00:29:24,450 --> 00:29:29,400
mocks and face it starts and stops your

00:29:27,180 --> 00:29:31,170
application on the test and make sure

00:29:29,400 --> 00:29:34,560
the application side is correct

00:29:31,170 --> 00:29:38,310
make sure your mock and fakes to have

00:29:34,560 --> 00:29:41,280
the correct state and this can often be

00:29:38,310 --> 00:29:44,040
done with a few lines of code within

00:29:41,280 --> 00:29:48,090
your tests so this can just be part of

00:29:44,040 --> 00:29:50,250
your integration tests sometimes

00:29:48,090 --> 00:29:53,280
combined with a bit of bash or something

00:29:50,250 --> 00:29:56,730
and so yeah

00:29:53,280 --> 00:29:59,520
one important trick you together a test

00:29:56,730 --> 00:30:02,790
harness running is to me what I call the

00:29:59,520 --> 00:30:06,180
object trick yes if you have an object

00:30:02,790 --> 00:30:08,790
you import this as part of your based

00:30:06,180 --> 00:30:12,360
right or class which you use from all

00:30:08,790 --> 00:30:14,880
your tests then this will always be

00:30:12,360 --> 00:30:19,290
executed before the first test so that's

00:30:14,880 --> 00:30:23,040
very useful because what I usually do in

00:30:19,290 --> 00:30:26,010
this is I switch my application to the

00:30:23,040 --> 00:30:28,290
to the mock api's is usually I like to

00:30:26,010 --> 00:30:30,330
develop against the real deal but when I

00:30:28,290 --> 00:30:32,970
run my tests I want to run against the

00:30:30,330 --> 00:30:35,400
mocks now I don't want to fill this by

00:30:32,970 --> 00:30:37,170
hand or something and because of this

00:30:35,400 --> 00:30:39,600
trick and it's always running it doesn't

00:30:37,170 --> 00:30:41,760
matter if you just start a single test

00:30:39,600 --> 00:30:44,670
from your IDE or if you start all your

00:30:41,760 --> 00:30:46,920
tests it will always be first and thanks

00:30:44,670 --> 00:30:50,340
to the shuttle hook it can also clean up

00:30:46,920 --> 00:30:53,310
after itself at least as long as you

00:30:50,340 --> 00:30:57,990
don't kill it if we kill the process it

00:30:53,310 --> 00:31:00,210
cannot clean up another thing which I

00:30:57,990 --> 00:31:02,310
can say the very important is adjusting

00:31:00,210 --> 00:31:04,410
dates and times if in your mock data so

00:31:02,310 --> 00:31:08,430
you record your mock date at a certain

00:31:04,410 --> 00:31:10,350
point in time we a court write down when

00:31:08,430 --> 00:31:13,650
you did record that because this gives

00:31:10,350 --> 00:31:14,970
you the ability to calculate the

00:31:13,650 --> 00:31:17,580
difference between now and that

00:31:14,970 --> 00:31:19,440
reference time and then you can have an

00:31:17,580 --> 00:31:22,020
adjuster and then you can use this to

00:31:19,440 --> 00:31:26,640
just all dates because often times

00:31:22,020 --> 00:31:30,450
things like it was modified or weighted

00:31:26,640 --> 00:31:33,090
dates they are irrelevant you if things

00:31:30,450 --> 00:31:35,490
appear or not if they've shown or not

00:31:33,090 --> 00:31:37,590
and maybe you need some additional

00:31:35,490 --> 00:31:40,760
fiddling there maybe you have to make

00:31:37,590 --> 00:31:44,660
sure that you don't adjust birth dates

00:31:40,760 --> 00:31:47,160
so that's just something which is really

00:31:44,660 --> 00:31:48,860
depending on your domain how you solve

00:31:47,160 --> 00:31:52,340
that

00:31:48,860 --> 00:31:55,350
now whatever containerized applications

00:31:52,340 --> 00:31:56,880
so that's like seems to be the way

00:31:55,350 --> 00:31:58,620
everyone is doing it now they

00:31:56,880 --> 00:32:00,750
containerized everything and then just

00:31:58,620 --> 00:32:05,430
put it on cuba this and everything is

00:32:00,750 --> 00:32:08,460
good yeah so it depends if you just

00:32:05,430 --> 00:32:10,320
build the containers part if your normal

00:32:08,460 --> 00:32:13,260
build and you have local build tools

00:32:10,320 --> 00:32:14,950
like SBT and all the machines or Miller

00:32:13,260 --> 00:32:18,039
you name it

00:32:14,950 --> 00:32:20,139
then just make scholar webtest part of

00:32:18,039 --> 00:32:23,799
your normal build as we just seen with

00:32:20,139 --> 00:32:26,109
the play framework it's nothing special

00:32:23,799 --> 00:32:27,639
needed and you can even I mean you can

00:32:26,109 --> 00:32:32,889
access them to contain you from there

00:32:27,639 --> 00:32:34,779
it's fine if your build if you do build

00:32:32,889 --> 00:32:36,399
within a container and no one has

00:32:34,779 --> 00:32:39,190
spilled tools on their machines because

00:32:36,399 --> 00:32:41,919
they're part of the container and I will

00:32:39,190 --> 00:32:46,330
not do you need a container to build

00:32:41,919 --> 00:32:50,639
your tests as well so for that said why

00:32:46,330 --> 00:32:53,859
should we we do have a solution so

00:32:50,639 --> 00:32:56,139
here's the docker file I will not go

00:32:53,859 --> 00:32:59,940
into details but the cool thing is heiko

00:32:56,139 --> 00:33:03,519
provided scholars PT docker file and

00:32:59,940 --> 00:33:05,619
based on this we provide our own docker

00:33:03,519 --> 00:33:11,679
container which you can just grab from

00:33:05,619 --> 00:33:12,489
dr. hub which let's see yeah that's the

00:33:11,679 --> 00:33:17,350
right one

00:33:12,489 --> 00:33:19,419
so you just provided a volume which

00:33:17,350 --> 00:33:22,869
provides the test source and then you

00:33:19,419 --> 00:33:24,850
can just start it and it will start SBT

00:33:22,869 --> 00:33:27,399
it will compile your sources and it will

00:33:24,850 --> 00:33:29,590
run them and if you want to keep that

00:33:27,399 --> 00:33:33,039
session open just change the command

00:33:29,590 --> 00:33:35,409
from from SPT test to SBT and you're

00:33:33,039 --> 00:33:37,690
done because then you will just sit

00:33:35,409 --> 00:33:43,179
within the SBT session and you can just

00:33:37,690 --> 00:33:45,220
reiterate with running tests and as I

00:33:43,179 --> 00:33:48,190
said before I'm like failing test

00:33:45,220 --> 00:33:50,259
because I'm more interesting so we made

00:33:48,190 --> 00:33:53,320
that one fail as well and you can see

00:33:50,259 --> 00:33:55,659
the output here but you probably would

00:33:53,320 --> 00:33:58,389
want to do as well with something like

00:33:55,659 --> 00:34:00,940
this is also use a volume didn't get the

00:33:58,389 --> 00:34:06,009
test output which was written down out

00:34:00,940 --> 00:34:09,760
of the container again now the other

00:34:06,009 --> 00:34:12,520
situation is if you already have that

00:34:09,760 --> 00:34:15,339
can we not all the container which

00:34:12,520 --> 00:34:17,379
contains pre-compiled tests which you

00:34:15,339 --> 00:34:20,500
can then ship which you can then run

00:34:17,379 --> 00:34:22,629
against their production or stuff like

00:34:20,500 --> 00:34:25,179
this so so why not because you can tag

00:34:22,629 --> 00:34:27,429
tests and you can tag tests which do not

00:34:25,179 --> 00:34:28,540
you can tell like those tests don't

00:34:27,429 --> 00:34:32,020
change state and they

00:34:28,540 --> 00:34:34,090
depend on data so then you can run them

00:34:32,020 --> 00:34:36,640
as regression tests which is just a part

00:34:34,090 --> 00:34:38,770
if you're testing why not do that

00:34:36,640 --> 00:34:42,190
so this stock profile is a bit more

00:34:38,770 --> 00:34:44,320
complex and here we cannot it cannot

00:34:42,190 --> 00:34:49,090
shape your container to do that because

00:34:44,320 --> 00:34:51,550
is this contains your compiled tests so

00:34:49,090 --> 00:34:53,740
you have to grab that docker file from

00:34:51,550 --> 00:34:56,440
our repository may be adapted a bit and

00:34:53,740 --> 00:34:59,620
and reuse it basically what it does it

00:34:56,440 --> 00:35:02,350
compiles it and then it as it's a

00:34:59,620 --> 00:35:06,130
multi-stage filter then again such of an

00:35:02,350 --> 00:35:09,460
alpine linux and then if in this you

00:35:06,130 --> 00:35:14,140
have to test char and then it uses the

00:35:09,460 --> 00:35:23,860
scala test Runner to run your tests so

00:35:14,140 --> 00:35:27,010
if you look at how this is going so that

00:35:23,860 --> 00:35:28,750
was doctor just verify that nothing

00:35:27,010 --> 00:35:30,610
changed so nothing to do and you can see

00:35:28,750 --> 00:35:33,700
then it's also a first because you just

00:35:30,610 --> 00:35:36,370
have to run the tests and we can also

00:35:33,700 --> 00:35:39,310
provide an environment variable to just

00:35:36,370 --> 00:35:40,960
change for example the base URI and now

00:35:39,310 --> 00:35:44,130
of course it's failing all over the

00:35:40,960 --> 00:35:46,780
place because it's completely wrong URL

00:35:44,130 --> 00:35:49,390
and of course doesn't let all my char

00:35:46,780 --> 00:35:52,030
gauge but this is how you can then

00:35:49,390 --> 00:35:57,910
provide information into that container

00:35:52,030 --> 00:36:00,850
so all the configurations I'd say like

00:35:57,910 --> 00:36:03,010
the ones which I think are necessary can

00:36:00,850 --> 00:36:12,610
be configured with environment variables

00:36:03,010 --> 00:36:15,370
or round arguments so it just saw that

00:36:12,610 --> 00:36:19,090
so let's let's have a look at some some

00:36:15,370 --> 00:36:20,740
takeaway messages so one thing which I

00:36:19,090 --> 00:36:25,180
consider very important is make

00:36:20,740 --> 00:36:27,220
observable what isn't is oftentimes you

00:36:25,180 --> 00:36:29,080
cannot write an integration test because

00:36:27,220 --> 00:36:32,860
you cannot observe what you would like

00:36:29,080 --> 00:36:36,910
to test but if that's the case probably

00:36:32,860 --> 00:36:39,400
you're also a bit blind during when you

00:36:36,910 --> 00:36:41,089
execute your application in production

00:36:39,400 --> 00:36:44,229
so make that stuff experience

00:36:41,089 --> 00:36:46,909
observable expose it protected also

00:36:44,229 --> 00:36:49,130
remember about this if you make self

00:36:46,909 --> 00:36:51,949
observable but that's a good why did you

00:36:49,130 --> 00:36:55,999
and usually dis helped our applications

00:36:51,949 --> 00:37:00,409
also a lot do not verify unimportant

00:36:55,999 --> 00:37:05,529
details control your application state

00:37:00,409 --> 00:37:08,630
and mock your external dependencies and

00:37:05,529 --> 00:37:13,029
once but at least integration tests are

00:37:08,630 --> 00:37:14,959
your friend so there's a new release

00:37:13,029 --> 00:37:17,839
scholar mantis 300

00:37:14,959 --> 00:37:20,769
it's around the corner I'm just waiting

00:37:17,839 --> 00:37:24,739
for the final release of plight JSON and

00:37:20,769 --> 00:37:27,589
it supports to 13 to 12 and to 11 it

00:37:24,739 --> 00:37:29,329
supports any selenium webdriver and its

00:37:27,589 --> 00:37:31,159
dock your friend as we just saw because

00:37:29,329 --> 00:37:36,380
you can configure it with environment

00:37:31,159 --> 00:37:38,179
variables so thank you and if you want

00:37:36,380 --> 00:37:45,519
to become my future colleague we are

00:37:38,179 --> 00:37:45,519
hiring so I'm happy to take questions

00:37:46,020 --> 00:37:49,099
[Applause]

00:37:59,959 --> 00:38:10,679
if you then what OSHA I'll post the form

00:38:07,849 --> 00:38:14,689
would you then take a selenium or is

00:38:10,679 --> 00:38:18,630
there also something from web test so

00:38:14,689 --> 00:38:23,880
let's put it the other way around

00:38:18,630 --> 00:38:26,519
selenium is part of Scala Baptist so you

00:38:23,880 --> 00:38:29,339
would you would use like you don't

00:38:26,519 --> 00:38:31,469
really even realize what's going on if

00:38:29,339 --> 00:38:32,309
you if you code because it's it's

00:38:31,469 --> 00:38:34,890
seamless

00:38:32,309 --> 00:38:37,919
it's a selenium web browser we just

00:38:34,890 --> 00:38:40,890
control where it sits so what you would

00:38:37,919 --> 00:38:44,819
do is you would use how it's documented

00:38:40,890 --> 00:38:47,099
on the scholar test website how to

00:38:44,819 --> 00:38:49,949
interact with selenium with Scala tests

00:38:47,099 --> 00:38:52,199
and there you fill out the forms so you

00:38:49,949 --> 00:38:54,829
really use what what's provided by Scala

00:38:52,199 --> 00:38:58,259
test for that then you send the form and

00:38:54,829 --> 00:39:00,769
then usually after sending the form

00:38:58,259 --> 00:39:03,839
that's when you then use the gauges and

00:39:00,769 --> 00:39:06,630
what I would also recommend is that you

00:39:03,839 --> 00:39:09,839
use a gauge to validate the form it's

00:39:06,630 --> 00:39:12,150
not be the same test but if your if your

00:39:09,839 --> 00:39:14,579
form test fails it's nice to know that

00:39:12,150 --> 00:39:16,169
why it failed and and the gauge can help

00:39:14,579 --> 00:39:20,209
you with this because it will tell you

00:39:16,169 --> 00:39:22,529
hey it's missing that field while

00:39:20,209 --> 00:39:24,299
filling out the form isn't just that it

00:39:22,529 --> 00:39:28,019
didn't find that element it's maybe a

00:39:24,299 --> 00:39:30,199
bit more obscure I hope that answers

00:39:28,019 --> 00:39:30,199
your question

00:39:32,179 --> 00:39:37,079
did you also test something based on

00:39:34,949 --> 00:39:38,549
angular or something single page

00:39:37,079 --> 00:39:42,029
application where you have to wait on

00:39:38,549 --> 00:39:44,279
the JavaScript to finish and yes yes so

00:39:42,029 --> 00:39:47,789
that's a that's a very good question and

00:39:44,279 --> 00:39:51,989
it's nicely supported thanks to Scala

00:39:47,789 --> 00:39:53,789
tests eventually so basically nothing

00:39:51,989 --> 00:39:55,769
you have to do there it's just put it

00:39:53,789 --> 00:39:57,419
into an eventually and I'll just check

00:39:55,769 --> 00:39:59,329
and check and check and as soon as it's

00:39:57,419 --> 00:40:01,829
green it's green and if it isn't

00:39:59,329 --> 00:40:04,800
complete within a certain amount of time

00:40:01,829 --> 00:40:06,950
it's red so that works for you

00:40:04,800 --> 00:40:09,450
but you have to remember every time you

00:40:06,950 --> 00:40:12,330
interactive stuff it's going on in Scott

00:40:09,450 --> 00:40:14,400
in JavaScript you have to put in him and

00:40:12,330 --> 00:40:20,600
in turn eventually sometimes we got

00:40:14,400 --> 00:40:23,400
lucky but you shouldn't bet on that hey

00:40:20,600 --> 00:40:25,530
how would you how would you use this if

00:40:23,400 --> 00:40:27,840
you had a test like a workflow like you

00:40:25,530 --> 00:40:30,510
had to hit multiple endpoints like in

00:40:27,840 --> 00:40:36,000
you would have to pass you know how

00:40:30,510 --> 00:40:39,390
would I look so I would approach it the

00:40:36,000 --> 00:40:42,660
same way as we did with selenium but

00:40:39,390 --> 00:40:44,130
just have immediate gauges to verify if

00:40:42,660 --> 00:40:48,210
what you see there is what you would

00:40:44,130 --> 00:40:49,830
expect so if you had like it's like

00:40:48,210 --> 00:40:52,080
let's say you would have like um like a

00:40:49,830 --> 00:40:53,220
for me had like three steps in it so you

00:40:52,080 --> 00:40:54,570
could test the first step but how would

00:40:53,220 --> 00:40:57,900
you test the third step you would have

00:40:54,570 --> 00:40:59,790
to pass through the first two steps like

00:40:57,900 --> 00:41:02,700
so you have a like three different tests

00:40:59,790 --> 00:41:05,700
testing like step one step two and step

00:41:02,700 --> 00:41:05,940
one and one to two in a one to two to

00:41:05,700 --> 00:41:08,520
three

00:41:05,940 --> 00:41:11,130
all right now now think I see where you

00:41:08,520 --> 00:41:15,210
going the cool thing about Scala test is

00:41:11,130 --> 00:41:17,370
it is ordered so you can still have

00:41:15,210 --> 00:41:20,850
separate tests but within the same class

00:41:17,370 --> 00:41:23,160
and so what this gives you gives you

00:41:20,850 --> 00:41:25,530
better reporting or very right fail you

00:41:23,160 --> 00:41:28,290
don't have to look into the details you

00:41:25,530 --> 00:41:29,670
see where it failed you don't have to

00:41:28,290 --> 00:41:32,580
look at the exception message but you

00:41:29,670 --> 00:41:35,340
clearly see which test failed of course

00:41:32,580 --> 00:41:37,860
all tests which come later on will most

00:41:35,340 --> 00:41:40,110
probably fail but I mean it doesn't

00:41:37,860 --> 00:41:42,210
matter anyway have to fix something and

00:41:40,110 --> 00:41:44,610
you see which was the first step that

00:41:42,210 --> 00:41:48,390
failed so have it make one class and

00:41:44,610 --> 00:41:51,830
then just ordered our steps a separate

00:41:48,390 --> 00:41:51,830
test thank you

00:41:57,970 --> 00:42:03,770
so seems like there are no more

00:42:00,320 --> 00:42:08,060
questions if if you have questions I'm

00:42:03,770 --> 00:42:11,390
here at at the till the end of the day

00:42:08,060 --> 00:42:12,980
and otherwise reach me out you can reach

00:42:11,390 --> 00:42:17,290
me on Twitter or you can reach me by

00:42:12,980 --> 00:42:17,290

YouTube URL: https://www.youtube.com/watch?v=nXvT9OLxJgw


