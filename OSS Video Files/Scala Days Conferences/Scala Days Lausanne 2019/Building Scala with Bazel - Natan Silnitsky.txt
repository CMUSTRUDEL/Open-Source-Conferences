Title: Building Scala with Bazel - Natan Silnitsky
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/building-scala-with-bazel
Captions: 
	00:00:08,780 --> 00:00:15,389
okay I would like to start with a quick

00:00:12,630 --> 00:00:21,990
poll who hear the raise of hands using

00:00:15,389 --> 00:00:25,470
maven endure day-to-day okay and Gradle

00:00:21,990 --> 00:00:27,619
who is using Gradle in a day today okay

00:00:25,470 --> 00:00:34,649
nice and SBT

00:00:27,619 --> 00:00:37,500
okay so fizzy astok SBT crowd so welcome

00:00:34,649 --> 00:00:40,710
everyone my name is Nathan so netsuke

00:00:37,500 --> 00:00:45,270
and I'm back end infrastructure

00:00:40,710 --> 00:00:48,629
developer at wix.com and I was part of a

00:00:45,270 --> 00:00:56,010
task force at week's back end that was

00:00:48,629 --> 00:01:01,320
in charge of seems like I have okay

00:00:56,010 --> 00:01:04,260
weird okay so I was part of a task force

00:01:01,320 --> 00:01:07,200
that was in charge of migrating all

00:01:04,260 --> 00:01:12,030
week's back-end code base from maven to

00:01:07,200 --> 00:01:14,729
basil now basil is Google's build tool

00:01:12,030 --> 00:01:16,530
which they use to build their giant mono

00:01:14,729 --> 00:01:18,869
repo with more than two billion lines of

00:01:16,530 --> 00:01:23,159
code which they open sourced a few years

00:01:18,869 --> 00:01:27,960
ago and once we did this as a migration

00:01:23,159 --> 00:01:30,950
and weeks we saw that we had a dramatic

00:01:27,960 --> 00:01:35,130
improvement in development velocity and

00:01:30,950 --> 00:01:37,530
much happier developers so here you can

00:01:35,130 --> 00:01:41,729
see for example we have one of our

00:01:37,530 --> 00:01:45,329
larger repositories and with Nathan it

00:01:41,729 --> 00:01:47,850
took roughly 45 minutes to build the

00:01:45,329 --> 00:01:51,420
entire repo compile everything run all

00:01:47,850 --> 00:01:54,990
the tests and no matter what really is

00:01:51,420 --> 00:01:57,180
the change that was done to the code now

00:01:54,990 --> 00:02:01,710
with basil on average usually takes less

00:01:57,180 --> 00:02:04,560
than one minute few numbers on weeks

00:02:01,710 --> 00:02:08,220
back end so we have around 250

00:02:04,560 --> 00:02:10,860
developers more than 750 micro services

00:02:08,220 --> 00:02:12,630
now we

00:02:10,860 --> 00:02:15,090
in terms of codebase we have more than

00:02:12,630 --> 00:02:18,630
10 million lines of code mostly in Scala

00:02:15,090 --> 00:02:22,770
and but there is still some in Java and

00:02:18,630 --> 00:02:25,320
also no js' and we have thousands of

00:02:22,770 --> 00:02:29,700
builds running every day and we hit

00:02:25,320 --> 00:02:31,890
production as often as possible so like

00:02:29,700 --> 00:02:37,350
I said we we migrated from maven and our

00:02:31,890 --> 00:02:40,230
build service team city and the way our

00:02:37,350 --> 00:02:43,590
code base is structured is we have many

00:02:40,230 --> 00:02:45,960
many services and a lot of code and also

00:02:43,590 --> 00:02:46,920
most of it depends on the same

00:02:45,960 --> 00:02:51,230
infrastructure code

00:02:46,920 --> 00:02:54,360
so imagine thousands of maven modules

00:02:51,230 --> 00:02:58,590
depending on the same code for

00:02:54,360 --> 00:03:00,360
infrastructure stuff and it's all snaps

00:02:58,590 --> 00:03:03,209
or dependency meaning we wanted to get

00:03:00,360 --> 00:03:08,430
changes immediately to all the

00:03:03,209 --> 00:03:11,160
dependents so on this change to any

00:03:08,430 --> 00:03:14,550
infrastructure code we have thousands of

00:03:11,160 --> 00:03:17,280
thousands of build actions queuing up on

00:03:14,550 --> 00:03:19,920
teamcity for each of the maven modules

00:03:17,280 --> 00:03:24,750
and it took hours sometimes to get

00:03:19,920 --> 00:03:28,680
everything depleted now with basil we

00:03:24,750 --> 00:03:31,070
just run it on the Google cloud and we

00:03:28,680 --> 00:03:33,750
have all of our repositories there and

00:03:31,070 --> 00:03:35,730
they all compile and run the tests

00:03:33,750 --> 00:03:38,610
simultaneously and it all it usually

00:03:35,730 --> 00:03:41,010
takes just a few minutes to get the root

00:03:38,610 --> 00:03:46,860
level change propagated to all of the

00:03:41,010 --> 00:03:48,870
dependency graph ok so well today I'm

00:03:46,860 --> 00:03:52,730
gonna show you the key features that

00:03:48,870 --> 00:03:55,500
make basil fast correct and scalable and

00:03:52,730 --> 00:03:58,080
specifically how basil can help us

00:03:55,500 --> 00:04:02,580
improve the scale scalability

00:03:58,080 --> 00:04:07,170
specifically and make them faster so the

00:04:02,580 --> 00:04:10,230
key difference with basil usually the

00:04:07,170 --> 00:04:15,200
paradigm shift with other built tools is

00:04:10,230 --> 00:04:19,200
the explicitness and flexibility of the

00:04:15,200 --> 00:04:22,740
configuration definition so you can

00:04:19,200 --> 00:04:24,060
decide on which granularity you would

00:04:22,740 --> 00:04:26,550
like to have

00:04:24,060 --> 00:04:29,040
basic build unit you can decide to have

00:04:26,550 --> 00:04:32,190
like one scholar source file and that

00:04:29,040 --> 00:04:34,800
will be the action of compilation that

00:04:32,190 --> 00:04:39,000
you will run or you can decide to have

00:04:34,800 --> 00:04:43,770
the package level dependency or you can

00:04:39,000 --> 00:04:46,950
have a set of packages that you run and

00:04:43,770 --> 00:04:49,530
this in the same action that will be

00:04:46,950 --> 00:04:53,880
closer to the SBT project or maven

00:04:49,530 --> 00:04:57,240
module now this basic build unit is

00:04:53,880 --> 00:05:00,300
called a target in basil and targets are

00:04:57,240 --> 00:05:02,490
instances or rules so you may ask

00:05:00,300 --> 00:05:06,780
yourself what is a rule so rule is

00:05:02,490 --> 00:05:09,300
basically a function that has the set of

00:05:06,780 --> 00:05:13,620
inputs and it provides a set of outputs

00:05:09,300 --> 00:05:17,100
it usually are files right and there are

00:05:13,620 --> 00:05:19,770
many different kinds of rules and that

00:05:17,100 --> 00:05:22,800
are defined for basil we have Scala

00:05:19,770 --> 00:05:26,000
library of course but you can also have

00:05:22,800 --> 00:05:28,650
you also have rules for C++ binary or

00:05:26,000 --> 00:05:33,050
running a Python test or running shell

00:05:28,650 --> 00:05:36,990
script basically basil is a generic

00:05:33,050 --> 00:05:39,810
dependency graph action executor so it

00:05:36,990 --> 00:05:42,650
has many many different kinds of rules

00:05:39,810 --> 00:05:46,229
for almost any language you can think of

00:05:42,650 --> 00:05:49,729
but we want to focus on Scala so for

00:05:46,229 --> 00:05:54,539
example you have here a very simple

00:05:49,729 --> 00:05:58,710
Scala library target definition so it's

00:05:54,539 --> 00:06:01,560
named a and it as the source files you

00:05:58,710 --> 00:06:05,669
explicitly declare which those files are

00:06:01,560 --> 00:06:08,760
for this target and in this case it's a

00:06:05,669 --> 00:06:11,760
dot Scala and also depends on target C

00:06:08,760 --> 00:06:15,900
which in turn will compile C dot Scala

00:06:11,760 --> 00:06:19,169
and the output will be a char and how do

00:06:15,900 --> 00:06:22,560
you invoke it you just type basil build

00:06:19,169 --> 00:06:28,979
: a if you're in the working directory

00:06:22,560 --> 00:06:34,349
of this package okay so what other kinds

00:06:28,979 --> 00:06:35,760
of inputs can these rules have so we saw

00:06:34,349 --> 00:06:38,069
that it could be source files can be

00:06:35,760 --> 00:06:40,800
dependencies but they can also be

00:06:38,069 --> 00:06:42,840
all the tool configurations so for

00:06:40,800 --> 00:06:47,699
instance all the Scala compiler options

00:06:42,840 --> 00:06:51,539
are considered an input for this rule or

00:06:47,699 --> 00:06:55,439
which JDK version Iran so basically any

00:06:51,539 --> 00:06:58,020
sort of input that has any relevance an

00:06:55,439 --> 00:07:01,129
effect for the actions that are run by

00:06:58,020 --> 00:07:05,340
this rule has to be explicitly defined

00:07:01,129 --> 00:07:09,060
for basil and why is that because of the

00:07:05,340 --> 00:07:11,819
sandbox property so if you have some

00:07:09,060 --> 00:07:15,120
implicit dependency in your code on some

00:07:11,819 --> 00:07:17,370
file that you do not explicitly declare

00:07:15,120 --> 00:07:21,300
in your configuration then your build

00:07:17,370 --> 00:07:25,529
will fail so this sandbox property

00:07:21,300 --> 00:07:31,289
actually guarantees that no matter what

00:07:25,529 --> 00:07:33,960
you you have to define everything inside

00:07:31,289 --> 00:07:37,199
of the sandbox meaning that basil will

00:07:33,960 --> 00:07:39,120
isolate all of the files that you

00:07:37,199 --> 00:07:40,919
declare in the file system and not give

00:07:39,120 --> 00:07:44,099
you access to any of any other part of

00:07:40,919 --> 00:07:46,889
the file system and will also limit your

00:07:44,099 --> 00:07:48,870
network so the network's sandbox thing

00:07:46,889 --> 00:07:50,759
means when you're running compilation or

00:07:48,870 --> 00:07:52,349
running any tests we will not be able to

00:07:50,759 --> 00:07:54,899
just go to the internet and download

00:07:52,349 --> 00:07:59,339
anything you want know that the that's

00:07:54,899 --> 00:08:03,620
done in a previous stage so this sandbox

00:07:59,339 --> 00:08:06,899
feature actually gives us deterministic

00:08:03,620 --> 00:08:09,659
reproducible builds because you always

00:08:06,899 --> 00:08:11,879
know exactly which I'll input you're

00:08:09,659 --> 00:08:14,520
going to get there's no surprises so you

00:08:11,879 --> 00:08:16,949
always have the same output no matter

00:08:14,520 --> 00:08:22,259
how many times you're going to run the

00:08:16,949 --> 00:08:25,199
same target build now as I mentioned the

00:08:22,259 --> 00:08:27,300
flexibility of the build unit usually

00:08:25,199 --> 00:08:30,449
I'll mean that you'll have many many

00:08:27,300 --> 00:08:33,510
small targets and that's a great

00:08:30,449 --> 00:08:36,149
advantage because when you run the

00:08:33,510 --> 00:08:39,149
compilation it means that you'll have a

00:08:36,149 --> 00:08:42,180
small impact for the specific target and

00:08:39,149 --> 00:08:44,490
also the part of the tree that depends

00:08:42,180 --> 00:08:47,120
on this target will be smaller because

00:08:44,490 --> 00:08:50,590
we're talking about smaller granularity

00:08:47,120 --> 00:08:52,420
but of course there is

00:08:50,590 --> 00:08:55,030
it's a trade-off there are disadvantages

00:08:52,420 --> 00:08:58,870
you will mean you need to manage many

00:08:55,030 --> 00:09:00,850
more build configurations and you need

00:08:58,870 --> 00:09:04,900
to maintain them and add dependencies

00:09:00,850 --> 00:09:08,550
between the different targets so that is

00:09:04,900 --> 00:09:12,880
a disadvantage for this particular

00:09:08,550 --> 00:09:14,800
feature but you can have great tooling

00:09:12,880 --> 00:09:18,880
in place to help you with this

00:09:14,800 --> 00:09:22,720
management now we have many more targets

00:09:18,880 --> 00:09:24,790
and that probably means that not all of

00:09:22,720 --> 00:09:28,780
them dependent whenever and they can run

00:09:24,790 --> 00:09:32,770
independently and run more in parallel

00:09:28,780 --> 00:09:35,410
so with Basel you you it tries by

00:09:32,770 --> 00:09:38,290
default to run as much as many actions

00:09:35,410 --> 00:09:41,410
as possible at the same time on your

00:09:38,290 --> 00:09:44,110
local machine you will be limited to the

00:09:41,410 --> 00:09:47,440
amount of course on your machine and of

00:09:44,110 --> 00:09:49,300
course with the alternative tools you'll

00:09:47,440 --> 00:09:55,570
probably have a lesser degree of

00:09:49,300 --> 00:09:57,660
parallel work now if you have tests in

00:09:55,570 --> 00:10:00,250
your code and then you probably get

00:09:57,660 --> 00:10:03,700
parallel running of compilation and

00:10:00,250 --> 00:10:05,290
tests so here you can see in blue we

00:10:03,700 --> 00:10:07,110
already have targets that have started

00:10:05,290 --> 00:10:09,760
to run their tests but at the same time

00:10:07,110 --> 00:10:13,570
dependence targets are now running

00:10:09,760 --> 00:10:20,589
compilation and so you get even higher

00:10:13,570 --> 00:10:24,220
degree of parallelism and the great

00:10:20,589 --> 00:10:26,980
feature of sandbox and deterministic and

00:10:24,220 --> 00:10:30,130
running of the your build means you have

00:10:26,980 --> 00:10:35,890
a great incremental function right

00:10:30,130 --> 00:10:38,980
because you only need to rebuild the

00:10:35,890 --> 00:10:40,930
small part of your graph that you

00:10:38,980 --> 00:10:43,690
changed some code in because everything

00:10:40,930 --> 00:10:46,839
else is putting a cat in the cache with

00:10:43,690 --> 00:10:49,990
the hash key and you you know that you

00:10:46,839 --> 00:10:52,540
can guarantee that you don't need to

00:10:49,990 --> 00:10:54,880
rerun it because basil guarantees that

00:10:52,540 --> 00:10:57,880
and think about your test code if you

00:10:54,880 --> 00:11:00,040
don't change test code for really really

00:10:57,880 --> 00:11:03,520
slow integration tests there's no reason

00:11:00,040 --> 00:11:04,600
to run them so you save a lot of time by

00:11:03,520 --> 00:11:09,510
using this

00:11:04,600 --> 00:11:12,460
correct incremental feature of basil and

00:11:09,510 --> 00:11:14,140
we're not really limited by the local

00:11:12,460 --> 00:11:16,300
machine that they're running no matter

00:11:14,140 --> 00:11:18,700
if it's on our laptop on this or the CI

00:11:16,300 --> 00:11:21,790
server because basil has the cool

00:11:18,700 --> 00:11:24,220
feature of remote execution so each

00:11:21,790 --> 00:11:27,510
action that is being executed is

00:11:24,220 --> 00:11:30,670
actually sent to a remote worker farm

00:11:27,510 --> 00:11:33,640
where you can have a crazy degree of

00:11:30,670 --> 00:11:35,620
parallelism so we eight weeks use the

00:11:33,640 --> 00:11:38,730
Google Cloud solution of remote

00:11:35,620 --> 00:11:41,770
execution they have it as a service and

00:11:38,730 --> 00:11:44,230
we see that we have hundreds upon

00:11:41,770 --> 00:11:46,930
hundreds of actions running at the same

00:11:44,230 --> 00:11:50,350
time and building our code base and

00:11:46,930 --> 00:11:54,370
running the tests there are also open

00:11:50,350 --> 00:11:57,700
source solutions that you can set up on

00:11:54,370 --> 00:12:00,490
your cloud servers or on-premise and

00:11:57,700 --> 00:12:04,000
also enjoy the benefit of the remote

00:12:00,490 --> 00:12:07,240
execution now if you so it's great for

00:12:04,000 --> 00:12:09,850
the CI server the the workers on this

00:12:07,240 --> 00:12:13,000
farm populate the cache and the CI

00:12:09,850 --> 00:12:16,030
server can of course utilize the cache

00:12:13,000 --> 00:12:19,120
results from one build to the next and

00:12:16,030 --> 00:12:22,060
if you want to run this actions from

00:12:19,120 --> 00:12:24,580
your local machine on your laptop you

00:12:22,060 --> 00:12:27,910
can do that as well now of course there

00:12:24,580 --> 00:12:31,720
will be Network latency here so there is

00:12:27,910 --> 00:12:34,510
feature quite recent one and basil

00:12:31,720 --> 00:12:37,240
called dynamic execution that means that

00:12:34,510 --> 00:12:40,570
you can decide whether it will try to

00:12:37,240 --> 00:12:44,260
run both locally the action and remotely

00:12:40,570 --> 00:12:46,780
and it will stop the slower action once

00:12:44,260 --> 00:12:50,680
the faster action already finished so

00:12:46,780 --> 00:12:54,780
you get the benefit of both having local

00:12:50,680 --> 00:12:58,450
and remote execution and just even

00:12:54,780 --> 00:13:02,040
having a faster build just managed

00:12:58,450 --> 00:13:05,770
automatically by this cool feature

00:13:02,040 --> 00:13:08,980
so at weeks we really saw the benefits

00:13:05,770 --> 00:13:13,030
here I show you a few numbers so you can

00:13:08,980 --> 00:13:14,650
get a sense if you if we run the one of

00:13:13,030 --> 00:13:17,110
our larger repositories like I said with

00:13:14,650 --> 00:13:19,390
Nathan and now using

00:13:17,110 --> 00:13:23,290
any caching mechanism whatsoever it's 45

00:13:19,390 --> 00:13:27,010
minutes now if you use basil on your

00:13:23,290 --> 00:13:30,400
laptop and not using any cache you

00:13:27,010 --> 00:13:33,130
always drop the time to 20 minutes why

00:13:30,400 --> 00:13:34,920
because it's the fast they have higher

00:13:33,130 --> 00:13:39,190
degree of parallelism we have smaller

00:13:34,920 --> 00:13:42,600
targets so you get faster time and of

00:13:39,190 --> 00:13:46,060
course if you run it on the remote

00:13:42,600 --> 00:13:47,800
environment with the worker farm it all

00:13:46,060 --> 00:13:49,570
wraps down to eight point five minutes

00:13:47,800 --> 00:13:53,170
even though we didn't use any caching

00:13:49,570 --> 00:13:57,160
whatsoever in this example now why do we

00:13:53,170 --> 00:13:58,990
still have this bigger number because

00:13:57,160 --> 00:14:01,330
we're still limited by the amount of

00:13:58,990 --> 00:14:04,930
parallelism we can help because there's

00:14:01,330 --> 00:14:07,600
the critical path of running the

00:14:04,930 --> 00:14:10,390
dependencies right because you can't

00:14:07,600 --> 00:14:12,400
start running a dependent action before

00:14:10,390 --> 00:14:15,580
the last one finished although yesterday

00:14:12,400 --> 00:14:19,450
we saw a great talk by stew hood from

00:14:15,580 --> 00:14:22,810
Twitter about work being done at Twitter

00:14:19,450 --> 00:14:27,280
to have outlining which will mean that

00:14:22,810 --> 00:14:29,050
you can get the header information from

00:14:27,280 --> 00:14:31,600
the action as soon as you can have it

00:14:29,050 --> 00:14:34,030
with a compiler and then already you can

00:14:31,600 --> 00:14:37,720
start the dependent action before the

00:14:34,030 --> 00:14:39,910
previous action compilation and finished

00:14:37,720 --> 00:14:43,390
completely so that can really speed up

00:14:39,910 --> 00:14:46,690
the performance and there's also work in

00:14:43,390 --> 00:14:49,360
the Scala center about pipelining and

00:14:46,690 --> 00:14:53,800
outlining so it's really exciting times

00:14:49,360 --> 00:14:58,780
for Scala compilation and of course with

00:14:53,800 --> 00:15:01,300
the the fully cash option once you have

00:14:58,780 --> 00:15:03,130
the second run basil analyze the

00:15:01,300 --> 00:15:05,230
dependency graph see that it doesn't

00:15:03,130 --> 00:15:10,180
really need to add and run anything and

00:15:05,230 --> 00:15:13,870
only takes a few seconds to finish ok so

00:15:10,180 --> 00:15:16,930
I think that basil is definitely worth

00:15:13,870 --> 00:15:19,450
it but it's not worth it in all cases

00:15:16,930 --> 00:15:21,880
right if you're a small start-up just

00:15:19,450 --> 00:15:24,730
getting started and you have a small

00:15:21,880 --> 00:15:27,280
codebase and you just want to have tools

00:15:24,730 --> 00:15:30,070
working out of the box no need to think

00:15:27,280 --> 00:15:30,880
about it then maybe basil is now right

00:15:30,070 --> 00:15:34,329
for you

00:15:30,880 --> 00:15:35,980
because there is work that you need to

00:15:34,329 --> 00:15:38,470
do of course to maintain the build

00:15:35,980 --> 00:15:40,779
configurations but also you probably

00:15:38,470 --> 00:15:43,769
want to do the adjustments to your code

00:15:40,779 --> 00:15:47,050
to adhere to the sandboxing principles

00:15:43,769 --> 00:15:50,110
like I mentioned about file access and

00:15:47,050 --> 00:15:52,449
network access etc so these are very

00:15:50,110 --> 00:15:56,589
good changes that you want to have for

00:15:52,449 --> 00:16:00,670
clean code and modular code etc but

00:15:56,589 --> 00:16:03,459
maybe for a small company that's want to

00:16:00,670 --> 00:16:08,130
run as fast as possible it's not right

00:16:03,459 --> 00:16:10,600
for you now as your code base grows and

00:16:08,130 --> 00:16:12,970
you have many more dependencies the

00:16:10,600 --> 00:16:16,329
dependency graph looks bigger more

00:16:12,970 --> 00:16:18,970
complex and you may be starting to think

00:16:16,329 --> 00:16:21,880
you know what these integration tests

00:16:18,970 --> 00:16:25,480
this these automate automate the tests

00:16:21,880 --> 00:16:27,220
they take a long time to run so maybe I

00:16:25,480 --> 00:16:30,459
won't run them after every any code

00:16:27,220 --> 00:16:32,470
change I'll just run a man each night or

00:16:30,459 --> 00:16:36,279
something like that so then you start

00:16:32,470 --> 00:16:38,740
compromising between the quality of your

00:16:36,279 --> 00:16:41,949
code and how fast you can get to

00:16:38,740 --> 00:16:43,930
production so once you reach that point

00:16:41,949 --> 00:16:46,750
I really think that you should consider

00:16:43,930 --> 00:16:48,639
switching to Basel because they

00:16:46,750 --> 00:16:52,240
shouldn't be a compromise you want to

00:16:48,639 --> 00:16:55,720
have fast correct builds and get to

00:16:52,240 --> 00:16:59,170
production and fast with a quality built

00:16:55,720 --> 00:17:02,529
in action so of course if you have a

00:16:59,170 --> 00:17:04,770
very large code base then I think basil

00:17:02,529 --> 00:17:07,299
really fits in really naturally and

00:17:04,770 --> 00:17:10,270
really is really optimizes and even

00:17:07,299 --> 00:17:13,449
shines and in such examples of large

00:17:10,270 --> 00:17:18,659
code bases it really really makes a huge

00:17:13,449 --> 00:17:21,459
difference okay so we saw a few of the

00:17:18,659 --> 00:17:24,100
basic cool

00:17:21,459 --> 00:17:28,770
basil features and now I want to switch

00:17:24,100 --> 00:17:31,900
over to how basil works with Scala so

00:17:28,770 --> 00:17:34,809
with basil out of the box it has support

00:17:31,900 --> 00:17:39,090
for C++ and Java and for any other

00:17:34,809 --> 00:17:43,090
language you have these extensions or

00:17:39,090 --> 00:17:44,710
plugins for basil called rules and in

00:17:43,090 --> 00:17:47,559
this case we're talking about

00:17:44,710 --> 00:17:51,490
Scala which is the open source project

00:17:47,559 --> 00:17:54,399
in the basil github organization it's

00:17:51,490 --> 00:17:57,820
written in Scala and star lark so star

00:17:54,399 --> 00:18:00,789
lark is the extension language for basil

00:17:57,820 --> 00:18:01,750
it's a subset of Python which is not

00:18:00,789 --> 00:18:04,770
turing-complete

00:18:01,750 --> 00:18:09,940
so you don't get into infinite loops and

00:18:04,770 --> 00:18:11,940
you you so you build any so you write

00:18:09,940 --> 00:18:14,710
anything that you want to have as

00:18:11,940 --> 00:18:19,330
extension we'll see a few examples later

00:18:14,710 --> 00:18:26,260
on so this project is call maintained by

00:18:19,330 --> 00:18:29,260
stripe and by stripe and wigs and it's

00:18:26,260 --> 00:18:32,260
adopted by many companies for example

00:18:29,260 --> 00:18:41,799
they have Etsy meetup.com Spotify they

00:18:32,260 --> 00:18:45,520
all use this rule Scala version ok so I

00:18:41,799 --> 00:18:49,120
just want to have a quick refresher on

00:18:45,520 --> 00:18:51,460
the difference in the structure of the

00:18:49,120 --> 00:18:54,669
bill configuration between basil and

00:18:51,460 --> 00:18:56,830
other tools so for SBT or maven or

00:18:54,669 --> 00:19:00,159
Gradle you have a convention based

00:18:56,830 --> 00:19:01,390
approach where they have they know that

00:19:00,159 --> 00:19:03,159
they'll find out whether they'll find

00:19:01,390 --> 00:19:07,539
the production code where they'll find

00:19:03,159 --> 00:19:10,149
the test code but with basil the build

00:19:07,539 --> 00:19:13,480
configuration is found adjacent to your

00:19:10,149 --> 00:19:16,210
code so each package will have its own

00:19:13,480 --> 00:19:19,659
build configuration definitions where

00:19:16,210 --> 00:19:25,270
you have the definitions for compilation

00:19:19,659 --> 00:19:27,429
and tests etc so which basic rules rule

00:19:25,270 --> 00:19:28,980
Scala supports so the first one we

00:19:27,429 --> 00:19:31,539
already talked about is Scala library

00:19:28,980 --> 00:19:33,789
which the action that needs to be

00:19:31,539 --> 00:19:36,220
executed this is of course calling

00:19:33,789 --> 00:19:39,880
invoking the Scala compiler and the

00:19:36,220 --> 00:19:43,990
output will be a jar file so here's the

00:19:39,880 --> 00:19:46,230
example I've already showed you get the

00:19:43,990 --> 00:19:49,230
a dot jar and the sources and

00:19:46,230 --> 00:19:49,230
dependencies

00:19:49,590 --> 00:19:57,179
and ii basically Scalla binary you want

00:19:52,799 --> 00:19:59,490
to have run to run executables so of

00:19:57,179 --> 00:20:02,610
course it will compile any source code

00:19:59,490 --> 00:20:04,650
and dependencies that you require and it

00:20:02,610 --> 00:20:06,570
will also output other than the char

00:20:04,650 --> 00:20:09,270
file it will also help with a shell

00:20:06,570 --> 00:20:12,690
script and the shell script will just

00:20:09,270 --> 00:20:16,230
run the main class on a JVM that it will

00:20:12,690 --> 00:20:18,779
spin up to run the executable scholar

00:20:16,230 --> 00:20:22,020
application so here you can see an

00:20:18,779 --> 00:20:25,169
example where you define in the Scala

00:20:22,020 --> 00:20:30,029
binary definition the main class in this

00:20:25,169 --> 00:20:33,690
example call example foo and and then

00:20:30,029 --> 00:20:36,630
when you invoke it with basil run : B it

00:20:33,690 --> 00:20:41,750
will actually invoke the shell script

00:20:36,630 --> 00:20:44,580
and find the appropriate main class and

00:20:41,750 --> 00:20:47,760
the third basic one is of course Scala

00:20:44,580 --> 00:20:49,799
tests so here it's exactly the same

00:20:47,760 --> 00:20:52,320
mechanism Scala binary but with the

00:20:49,799 --> 00:20:54,570
shell script but instead of executing

00:20:52,320 --> 00:20:57,809
the your main class it will execute the

00:20:54,570 --> 00:21:02,309
scala test runner and here you can see

00:20:57,809 --> 00:21:06,390
an example where you have a set of test

00:21:02,309 --> 00:21:08,820
files so you define the wild-card that

00:21:06,390 --> 00:21:14,720
all files that end with tested Scala

00:21:08,820 --> 00:21:17,490
will be part of this build target and

00:21:14,720 --> 00:21:19,950
you see that when you run basil test

00:21:17,490 --> 00:21:22,230
called an example test it will invoke

00:21:19,950 --> 00:21:28,529
the basil test runner so quite simple

00:21:22,230 --> 00:21:31,799
there so let's see a quick example of

00:21:28,529 --> 00:21:35,539
working in a repository so I have a

00:21:31,799 --> 00:21:40,950
really really simplistic Scala repo here

00:21:35,539 --> 00:21:43,679
just simple additions and numbers so you

00:21:40,950 --> 00:21:47,340
see that the wild-card can be used here

00:21:43,679 --> 00:21:51,110
and we have the very simple Scala test

00:21:47,340 --> 00:21:56,840
here and this is an example of how to

00:21:51,110 --> 00:22:00,270
depend on the complete label from the

00:21:56,840 --> 00:22:02,809
relative to the workspace file so the

00:22:00,270 --> 00:22:05,809
workspace file defines

00:22:02,809 --> 00:22:07,399
the entire Basel repo and you get all

00:22:05,809 --> 00:22:10,340
the external dependencies that you need

00:22:07,399 --> 00:22:13,249
here including Rule Scala itself of

00:22:10,340 --> 00:22:15,350
course that once you compile it was

00:22:13,249 --> 00:22:16,909
first compiled with Scala and then

00:22:15,350 --> 00:22:19,009
you'll be able to use it everything in

00:22:16,909 --> 00:22:24,769
Basel is source dependency as much as

00:22:19,009 --> 00:22:28,279
possible so now just run all the tests

00:22:24,769 --> 00:22:34,100
in this repo just like writing basel

00:22:28,279 --> 00:22:39,860
test special a dot dot dot I hope you

00:22:34,100 --> 00:22:42,259
can see and it I've already run it

00:22:39,860 --> 00:22:46,309
before so it got all the test results

00:22:42,259 --> 00:22:49,249
from the cache so it's really it was

00:22:46,309 --> 00:22:53,539
really fast result and of course if I

00:22:49,249 --> 00:22:57,200
change some of the one test and make it

00:22:53,539 --> 00:22:59,059
be a fail failure let me see now it in

00:22:57,200 --> 00:23:01,909
understanding some file has changed and

00:22:59,059 --> 00:23:02,590
it wanted to be rerun so it took a

00:23:01,909 --> 00:23:05,960
second

00:23:02,590 --> 00:23:09,440
so just correct it again and you see

00:23:05,960 --> 00:23:12,889
that it also always has the cached

00:23:09,440 --> 00:23:15,799
results and I was only to run the source

00:23:12,889 --> 00:23:21,830
file that has changed okay so that was a

00:23:15,799 --> 00:23:23,269
really quick demonstration now what and

00:23:21,830 --> 00:23:25,580
of course you have many more rules that

00:23:23,269 --> 00:23:28,490
rule Scala provides you have j'leeta

00:23:25,580 --> 00:23:30,379
specs to test thrift libraries proto

00:23:28,490 --> 00:23:34,909
libraries which of course are auto

00:23:30,379 --> 00:23:37,279
generated code or code generators and

00:23:34,909 --> 00:23:40,249
there are many more and you can also add

00:23:37,279 --> 00:23:43,580
your own so like I said you need to have

00:23:40,249 --> 00:23:46,429
some familiarity with star lark but you

00:23:43,580 --> 00:23:49,730
know Python is really easy to get into

00:23:46,429 --> 00:23:52,999
and you get a few constructs if you have

00:23:49,730 --> 00:23:55,490
a basil like the build context etc and

00:23:52,999 --> 00:23:59,830
you can get going and add anything that

00:23:55,490 --> 00:24:03,259
you use find is missing from rule Scala

00:23:59,830 --> 00:24:06,830
okay so I will show a few of the key

00:24:03,259 --> 00:24:10,600
features that are inside with Scala that

00:24:06,830 --> 00:24:12,919
will help you have correct fast builds

00:24:10,600 --> 00:24:15,019
so the first thing to know is that

00:24:12,919 --> 00:24:16,610
there's an extensive end-to-end suite

00:24:15,019 --> 00:24:20,420
its battle-tested you have

00:24:16,610 --> 00:24:23,299
a lot of regression put inside there and

00:24:20,420 --> 00:24:26,480
it also interestingly verifies the

00:24:23,299 --> 00:24:31,490
reproducibility principles so it checks

00:24:26,480 --> 00:24:33,740
that it builds all of the build targets

00:24:31,490 --> 00:24:36,500
inside of the repo and then it makes

00:24:33,740 --> 00:24:39,020
sure that on the subsequent run with the

00:24:36,500 --> 00:24:40,820
time delay so there was no randomness

00:24:39,020 --> 00:24:43,640
put in and the hashes are exactly the

00:24:40,820 --> 00:24:46,780
same so Rule Scala then makes sure that

00:24:43,640 --> 00:24:52,220
it adheres to the reproducibility

00:24:46,780 --> 00:24:54,110
function of basil now in your repository

00:24:52,220 --> 00:24:57,710
you may have modules from different

00:24:54,110 --> 00:25:01,940
kinds of jvm languages you have java

00:24:57,710 --> 00:25:04,910
scala groovy Cortland and you we want to

00:25:01,940 --> 00:25:06,490
have everything built with source

00:25:04,910 --> 00:25:09,860
dependencies we don't want to manage

00:25:06,490 --> 00:25:12,440
binary versions between them right so

00:25:09,860 --> 00:25:15,230
with basil and the rules for each of

00:25:12,440 --> 00:25:17,840
these language that's possible because

00:25:15,230 --> 00:25:20,990
each of them adheres to a convention

00:25:17,840 --> 00:25:24,770
that they provide Java infrastructure so

00:25:20,990 --> 00:25:27,730
you can have the Scala target depend on

00:25:24,770 --> 00:25:30,500
a Java target or something with Kotlin

00:25:27,730 --> 00:25:34,120
there's no problem there and everything

00:25:30,500 --> 00:25:37,340
will be built from source and cache

00:25:34,120 --> 00:25:40,130
now what about dependency management so

00:25:37,340 --> 00:25:43,190
I talked about having more verbose build

00:25:40,130 --> 00:25:46,940
configuration more small smaller targets

00:25:43,190 --> 00:25:50,929
meaning you have more dependency that

00:25:46,940 --> 00:25:53,360
you need to add so there are a few and

00:25:50,929 --> 00:25:56,419
nice features here you have a flag for

00:25:53,360 --> 00:25:59,299
our newest dependencies that it will if

00:25:56,419 --> 00:26:01,429
you set it up then it will scan each

00:25:59,299 --> 00:26:04,700
time you you build you run the build and

00:26:01,429 --> 00:26:07,250
we'll provide for you warnings or errors

00:26:04,700 --> 00:26:09,500
on dependencies that you no longer need

00:26:07,250 --> 00:26:11,630
and you can remove them with billdozer

00:26:09,500 --> 00:26:13,700
which is a tool that automatically

00:26:11,630 --> 00:26:17,900
manages the build configurations for you

00:26:13,700 --> 00:26:21,320
and you just keep your dependency graph

00:26:17,900 --> 00:26:25,340
smaller and that means faster builds

00:26:21,320 --> 00:26:29,150
right and also an interesting feature is

00:26:25,340 --> 00:26:29,960
strict dependencies so this means that

00:26:29,150 --> 00:26:33,289
if

00:26:29,960 --> 00:26:38,390
you have full library and it depends on

00:26:33,289 --> 00:26:41,330
the specs to test suite and you also and

00:26:38,390 --> 00:26:45,230
it in turn specs to depends on scats so

00:26:41,330 --> 00:26:48,350
with if you have in your full library

00:26:45,230 --> 00:26:50,240
source code import of cats but you

00:26:48,350 --> 00:26:54,110
didn't specify it as a direct dependency

00:26:50,240 --> 00:26:56,630
in basil then strict depths tool will

00:26:54,110 --> 00:27:00,380
emit an error and say you need to the

00:26:56,630 --> 00:27:05,000
add a direct dependency here and why is

00:27:00,380 --> 00:27:08,049
that important well first its basic code

00:27:05,000 --> 00:27:12,470
hygiene and and have a more correct and

00:27:08,049 --> 00:27:14,059
right build configurations and also it

00:27:12,470 --> 00:27:16,490
means that your code will be less

00:27:14,059 --> 00:27:19,010
fragile because this specs to decides to

00:27:16,490 --> 00:27:25,120
drop cats at some point then your full a

00:27:19,010 --> 00:27:26,990
buoy won't break and both the onions the

00:27:25,120 --> 00:27:29,049
dependency checker and the strict

00:27:26,990 --> 00:27:34,100
dependencies are based on JSON zog's

00:27:29,049 --> 00:27:38,120
classpath shrinker plugin okay we have a

00:27:34,100 --> 00:27:42,830
very nice tool we developed a tweaks

00:27:38,120 --> 00:27:45,230
that we use with our it's we together

00:27:42,830 --> 00:27:48,200
with the IntelliJ environment built in

00:27:45,230 --> 00:27:50,600
with an additional plug-in and this was

00:27:48,200 --> 00:27:52,970
called debt fixer so what it does it

00:27:50,600 --> 00:27:56,500
once you invoke gated autumn ax adamite

00:27:52,970 --> 00:27:59,510
sorry automatically builds the basil

00:27:56,500 --> 00:28:01,760
runs the basil build and understands

00:27:59,510 --> 00:28:04,580
from the missing symbols which

00:28:01,760 --> 00:28:08,870
dependencies it needs to add to the

00:28:04,580 --> 00:28:12,620
basil build definition now it knows

00:28:08,870 --> 00:28:15,559
which dependencies it needs because it

00:28:12,620 --> 00:28:18,559
indexes all the jars during the build

00:28:15,559 --> 00:28:22,220
internally and it also uses external

00:28:18,559 --> 00:28:25,100
indexing server for any code residing in

00:28:22,220 --> 00:28:30,860
other repositories or third-party

00:28:25,100 --> 00:28:34,000
dependencies and this tool was inspired

00:28:30,860 --> 00:28:36,559
by pants which has a similar feature for

00:28:34,000 --> 00:28:41,230
automatically adding dependencies pants

00:28:36,559 --> 00:28:41,230
is Twitter's build tool

00:28:41,580 --> 00:28:51,090
okay so a very important performance

00:28:45,149 --> 00:28:55,999
issue with basil and Scala is warming up

00:28:51,090 --> 00:29:00,419
Scala compiler and incrementality in the

00:28:55,999 --> 00:29:01,049
class level so out of the box basil will

00:29:00,419 --> 00:29:04,350
not

00:29:01,049 --> 00:29:06,600
we have actions that are independent of

00:29:04,350 --> 00:29:09,570
one another that means that if you run

00:29:06,600 --> 00:29:11,519
an action it will spin up a new JVM with

00:29:09,570 --> 00:29:15,720
a scholar compiler called Scala compiler

00:29:11,519 --> 00:29:19,139
and you run it so that really is quite

00:29:15,720 --> 00:29:21,499
expensive now if you have if you set up

00:29:19,139 --> 00:29:24,330
the persistent workers like Scala does

00:29:21,499 --> 00:29:26,700
that means that this is a basil feature

00:29:24,330 --> 00:29:29,789
persistent workers it means that it will

00:29:26,700 --> 00:29:31,950
have like a pool of Scala compiler hot

00:29:29,789 --> 00:29:34,830
scala compilers ladies can use for the

00:29:31,950 --> 00:29:36,149
actions that are being run so this is

00:29:34,830 --> 00:29:38,460
really important for your local

00:29:36,149 --> 00:29:42,840
development because you continuously

00:29:38,460 --> 00:29:43,759
want to to check that your code still is

00:29:42,840 --> 00:29:48,989
still correct

00:29:43,759 --> 00:29:51,419
now with there's we have an alternative

00:29:48,989 --> 00:29:53,820
rule Scala called rule Scala annex from

00:29:51,419 --> 00:29:57,090
the heart kindness github organization

00:29:53,820 --> 00:30:00,869
and the difference here is that it uses

00:29:57,090 --> 00:30:02,940
zinc I'm sure that almost all of you

00:30:00,869 --> 00:30:05,369
know that zinc is the stateful

00:30:02,940 --> 00:30:12,629
incremental compiler used by bloop and

00:30:05,369 --> 00:30:14,340
with SBT so will Scala an X or instead

00:30:12,629 --> 00:30:18,259
of using the standard Scala compiler

00:30:14,340 --> 00:30:20,999
uses zinc so that covers us both in the

00:30:18,259 --> 00:30:24,119
caching layer of the level of the

00:30:20,999 --> 00:30:27,929
targets with basil caches and also sub

00:30:24,119 --> 00:30:31,440
target level with the class classes

00:30:27,929 --> 00:30:35,070
inside of your source file that zinc can

00:30:31,440 --> 00:30:38,299
help you with the caching there now it's

00:30:35,070 --> 00:30:42,899
not being used currently in the official

00:30:38,299 --> 00:30:45,989
standard rule Scala because the basil

00:30:42,899 --> 00:30:49,950
basically adheres to stateless compilers

00:30:45,989 --> 00:30:52,710
and have the cache being handled and

00:30:49,950 --> 00:30:54,759
managed by basil itself and and you can

00:30:52,710 --> 00:30:57,399
also not work like this in remote

00:30:54,759 --> 00:31:00,099
execution because your motivation does

00:30:57,399 --> 00:31:01,509
not support currently having state it's

00:31:00,099 --> 00:31:03,789
everything is stateless there is just

00:31:01,509 --> 00:31:07,479
spin up new containers and run these

00:31:03,789 --> 00:31:09,299
actions but it can desk a la annex can

00:31:07,479 --> 00:31:11,440
definitely improve your experience

00:31:09,299 --> 00:31:14,529
locally especially if you have bigger

00:31:11,440 --> 00:31:17,459
targets so you might want to consider

00:31:14,529 --> 00:31:20,320
that and like I already said before

00:31:17,459 --> 00:31:23,699
there is active work done at Twitter and

00:31:20,320 --> 00:31:27,249
Scala center to improve the situation

00:31:23,699 --> 00:31:31,209
even more with the stateful compilers

00:31:27,249 --> 00:31:32,769
and optimize compilers with outlining

00:31:31,209 --> 00:31:35,019
and pipe like pipelining like I

00:31:32,769 --> 00:31:37,659
mentioned so this is a space that is

00:31:35,019 --> 00:31:41,279
actively worked on and will have

00:31:37,659 --> 00:31:47,499
improvements in the future so see a very

00:31:41,279 --> 00:31:50,019
simple demo of of using persistent

00:31:47,499 --> 00:31:54,209
workers so here I have two identical

00:31:50,019 --> 00:32:00,249
copies of rules garlic repo itself and

00:31:54,209 --> 00:32:03,190
just running a build of part of the test

00:32:00,249 --> 00:32:06,129
Suites full Scala and you can see here

00:32:03,190 --> 00:32:08,019
that all of the there are eight actions

00:32:06,129 --> 00:32:10,209
running because I have eight cores on my

00:32:08,019 --> 00:32:13,209
machine so basically trying to utilize

00:32:10,209 --> 00:32:18,039
as much as possible and degree of

00:32:13,209 --> 00:32:20,709
parallelism but this is quite slow here

00:32:18,039 --> 00:32:23,259
you can see it utilizes the Darwin

00:32:20,709 --> 00:32:26,559
sandbox so that means that it's running

00:32:23,259 --> 00:32:28,539
in sandbox mode by default there's no

00:32:26,559 --> 00:32:31,839
special flag here so automatically it

00:32:28,539 --> 00:32:33,459
invokes the sandbox and means that you

00:32:31,839 --> 00:32:38,739
have you can rely on it and have

00:32:33,459 --> 00:32:41,739
incremental build which are faster but

00:32:38,739 --> 00:32:44,649
in this case when it keeps on building

00:32:41,739 --> 00:32:47,349
and running new JVM instances with the

00:32:44,649 --> 00:32:49,899
coal-scuttle compilers then it's much

00:32:47,349 --> 00:32:55,389
slower okay I think it's about to finish

00:32:49,899 --> 00:32:58,329
it's finished took 61 seconds now all I

00:32:55,389 --> 00:33:01,599
do here the only difference is that I'm

00:32:58,329 --> 00:33:04,959
running it with strategy Scala C worker

00:33:01,599 --> 00:33:07,440
which means that the persistent worker

00:33:04,959 --> 00:33:10,590
is going to be utilized

00:33:07,440 --> 00:33:15,259
you can see that the actions are

00:33:10,590 --> 00:33:21,830
completing much much faster here and

00:33:15,259 --> 00:33:21,830
yeah it's going to finish much sooner

00:33:23,570 --> 00:33:30,090
yeah only took 30 seconds so it's a 50%

00:33:27,240 --> 00:33:32,429
improvement in this case and like I said

00:33:30,090 --> 00:33:35,360
you can have even better results with

00:33:32,429 --> 00:33:40,610
Ruth scholar anacs and with the exciting

00:33:35,360 --> 00:33:40,610
compilation optimizations we have ahead

00:33:41,389 --> 00:33:48,389
so that's that's it about your scholar

00:33:44,789 --> 00:33:50,870
you can find out the link you can go to

00:33:48,389 --> 00:33:53,730
the link here in the basil build or

00:33:50,870 --> 00:33:57,210
organization it's an open source of

00:33:53,730 --> 00:34:01,049
course we really recommend really like

00:33:57,210 --> 00:34:05,039
to get some contributions and for if you

00:34:01,049 --> 00:34:07,019
feel anything is missing and if you want

00:34:05,039 --> 00:34:10,790
to do it play around a little bit with

00:34:07,019 --> 00:34:14,609
the Haskalah with a very simple

00:34:10,790 --> 00:34:19,169
exercises you can check out this link I

00:34:14,609 --> 00:34:24,030
have a link at the end for SlideShare so

00:34:19,169 --> 00:34:26,460
you don't need to copy it now if you're

00:34:24,030 --> 00:34:30,200
interested in learning more about the

00:34:26,460 --> 00:34:33,770
migration stories to basel so I have

00:34:30,200 --> 00:34:35,819
give a gave a talk at GE conf about

00:34:33,770 --> 00:34:39,359
different things you need to consider

00:34:35,819 --> 00:34:43,349
while migrating around the granularity

00:34:39,359 --> 00:34:45,720
about how many repositories he won

00:34:43,349 --> 00:34:50,819
because basil works best with mono repo

00:34:45,720 --> 00:34:54,000
and dependency management that's really

00:34:50,819 --> 00:34:57,119
quite different in Basel and I also have

00:34:54,000 --> 00:35:00,359
an equivalent blog series on this topic

00:34:57,119 --> 00:35:03,960
and I also recommend the excellent blog

00:35:00,359 --> 00:35:06,270
post by Lee Howard data brakes on speedy

00:35:03,960 --> 00:35:08,700
scholar builds so they took a little bit

00:35:06,270 --> 00:35:10,560
different approach but they have amazing

00:35:08,700 --> 00:35:15,089
results so I really recommend checking

00:35:10,560 --> 00:35:17,670
that out as well and we also open

00:35:15,089 --> 00:35:21,070
sourced the automatic migration tool

00:35:17,670 --> 00:35:23,050
from maven to Basel that will let you

00:35:21,070 --> 00:35:25,810
the do that's all the hard work for you

00:35:23,050 --> 00:35:26,530
and also gets you to find a great

00:35:25,810 --> 00:35:29,410
targets

00:35:26,530 --> 00:35:32,560
I only works currently in maven from

00:35:29,410 --> 00:35:35,970
maven to basil of course we would be

00:35:32,560 --> 00:35:39,310
happy to work on the SBT equivalent and

00:35:35,970 --> 00:35:44,830
we love to get the contributions here as

00:35:39,310 --> 00:35:48,190
well so to summarize basil is worth it

00:35:44,830 --> 00:35:50,560
in most cases and it gives you faster

00:35:48,190 --> 00:35:55,240
builds and the ecosystem is becoming

00:35:50,560 --> 00:35:58,330
better Wix is actively working on tools

00:35:55,240 --> 00:36:01,990
for IntelliJ to help with dependency

00:35:58,330 --> 00:36:05,500
management and really let you focus on

00:36:01,990 --> 00:36:08,760
your source code and having the tooling

00:36:05,500 --> 00:36:12,720
in place to help you with the build

00:36:08,760 --> 00:36:16,390
configuration and we hope to open source

00:36:12,720 --> 00:36:20,110
the intelligent plugins and the debt

00:36:16,390 --> 00:36:22,030
fixer tool very soon and Rule Scala

00:36:20,110 --> 00:36:25,060
itself is mature and battle-tested

00:36:22,030 --> 00:36:29,370
and used quite widely like I mentioned

00:36:25,060 --> 00:36:32,820
so I really recommend checking it out

00:36:29,370 --> 00:36:32,820
thank you very much

00:36:36,869 --> 00:36:42,280
so here's the link for slideshow that I

00:36:39,250 --> 00:36:44,200
mentioned and you can check out and

00:36:42,280 --> 00:36:47,710
follow me on medium twitter to get more

00:36:44,200 --> 00:36:54,880
updates on basil and Wix and he had

00:36:47,710 --> 00:36:56,800
questions for the talk and I actually

00:36:54,880 --> 00:36:59,230
had two questions but you just answered

00:36:56,800 --> 00:37:01,599
one which was about you know ID support

00:36:59,230 --> 00:37:04,810
specifically IntelliJ IDEA so it will

00:37:01,599 --> 00:37:09,250
come out soon I guess yeah we have the

00:37:04,810 --> 00:37:11,410
official basil plug-in of course but we

00:37:09,250 --> 00:37:13,930
have all kinds of cool additions in our

00:37:11,410 --> 00:37:15,640
own additional plug-in so we really hope

00:37:13,930 --> 00:37:20,770
to open source it okay that's great

00:37:15,640 --> 00:37:24,880
thank you and second question is so I'm

00:37:20,770 --> 00:37:30,040
using Scala hetro for testing so in SBT

00:37:24,880 --> 00:37:34,530
is just easy to put that nature into SBT

00:37:30,040 --> 00:37:38,950
settings but how is how easy it is to

00:37:34,530 --> 00:37:41,830
change that or make it support other

00:37:38,950 --> 00:37:43,839
test framework ten the ones that you

00:37:41,830 --> 00:37:44,950
mentioned like scale test specs too

00:37:43,839 --> 00:37:52,380
right

00:37:44,950 --> 00:37:55,630
so basically you probably need to create

00:37:52,380 --> 00:37:58,780
to have the rule in place to have the

00:37:55,630 --> 00:38:04,089
the test runner flavor that that you're

00:37:58,780 --> 00:38:06,609
working with so it's a matter of getting

00:38:04,089 --> 00:38:09,700
some a little bit with the star lark the

00:38:06,609 --> 00:38:12,720
extension language for basil and there

00:38:09,700 --> 00:38:16,990
are the building blocks in place to have

00:38:12,720 --> 00:38:20,410
test runners that alternative test run

00:38:16,990 --> 00:38:24,960
is that you would like and then you just

00:38:20,410 --> 00:38:31,270
have like the XML outputs for the tests

00:38:24,960 --> 00:38:33,670
for the IDE etc so I I guess the basic

00:38:31,270 --> 00:38:36,910
work for just getting to work will not

00:38:33,670 --> 00:38:40,180
be that great but for supporting the IDS

00:38:36,910 --> 00:38:42,640
environment it it may be a bit more work

00:38:40,180 --> 00:38:43,240
it's it's possible I mean we did it for

00:38:42,640 --> 00:38:45,369
specs too

00:38:43,240 --> 00:38:50,250
it was missing before and it didn't take

00:38:45,369 --> 00:38:50,250
too much time too much effort thank you

00:38:53,279 --> 00:38:58,359
so I was wondering more about the

00:38:55,980 --> 00:39:02,079
ecosystem because usually build is not

00:38:58,359 --> 00:39:04,809
just compiling so let's say cover code

00:39:02,079 --> 00:39:07,299
coverage I know working with summer

00:39:04,809 --> 00:39:08,680
queue scapegoat all those plugins that

00:39:07,299 --> 00:39:11,260
you have in addition in your bin system

00:39:08,680 --> 00:39:13,450
is there support for it or is you have

00:39:11,260 --> 00:39:15,940
to edit by yourself every cause

00:39:13,450 --> 00:39:18,640
basically there is loads of plugins

00:39:15,940 --> 00:39:23,650
available for SBT and maven question -

00:39:18,640 --> 00:39:25,960
all right so yeah SBT maven are both are

00:39:23,650 --> 00:39:30,069
with us quite a long time so we have

00:39:25,960 --> 00:39:33,150
very each plug-in environment so of

00:39:30,069 --> 00:39:35,559
course with basil you have less of that

00:39:33,150 --> 00:39:40,210
I'm not sure about coverage I'll check

00:39:35,559 --> 00:39:42,450
that but there will be if you if you see

00:39:40,210 --> 00:39:45,309
some plug-in missing you may need to to

00:39:42,450 --> 00:39:58,089
contribute it to basil but then everyone

00:39:45,309 --> 00:40:01,319
else can enjoy it as well how clever is

00:39:58,089 --> 00:40:04,539
a recognition algorithm I mean if we

00:40:01,319 --> 00:40:07,480
change some private methods for example

00:40:04,539 --> 00:40:13,269
will all dependencies be recompiled or

00:40:07,480 --> 00:40:18,039
not or it just looks for only public API

00:40:13,269 --> 00:40:21,160
changes yeah so there is a tool and

00:40:18,039 --> 00:40:24,099
basil called HR that's really works

00:40:21,160 --> 00:40:26,500
really great with with Java there are

00:40:24,099 --> 00:40:30,730
some limitations of it with basil and

00:40:26,500 --> 00:40:34,119
the idea is that it only checks the

00:40:30,730 --> 00:40:37,119
public API then you have faster because

00:40:34,119 --> 00:40:39,339
the public API hasn't changed that means

00:40:37,119 --> 00:40:43,930
that there won't be any recompilation

00:40:39,339 --> 00:40:46,119
and it's the same with the outlining

00:40:43,930 --> 00:40:50,140
principles that are actively worked on

00:40:46,119 --> 00:40:52,599
at the moment that once you get the

00:40:50,140 --> 00:40:55,059
headers and you see that there's any

00:40:52,599 --> 00:40:59,440
change then you will need to recompile

00:40:55,059 --> 00:41:01,390
or not depending on the result so there

00:40:59,440 --> 00:41:02,680
there is a solution for it I know that

00:41:01,390 --> 00:41:07,720
idea is not

00:41:02,680 --> 00:41:11,080
port macros macros at the moment so if

00:41:07,720 --> 00:41:18,130
you use that you probably won't be able

00:41:11,080 --> 00:41:19,360
to gain this feature thank you for the

00:41:18,130 --> 00:41:22,120
talk I have a very down-to-earth

00:41:19,360 --> 00:41:24,880
question and it's mainly around they're

00:41:22,120 --> 00:41:27,190
releasing in versioning so I mean let's

00:41:24,880 --> 00:41:29,050
are more deploying in mavin mavin terms

00:41:27,190 --> 00:41:31,570
like how do you get your jar to the

00:41:29,050 --> 00:41:34,330
artifact server can you use basil for

00:41:31,570 --> 00:41:35,890
that and how how would you how do you do

00:41:34,330 --> 00:41:40,750
versioning or how do you do these things

00:41:35,890 --> 00:41:43,330
at wix.com okay question so basil you

00:41:40,750 --> 00:41:44,740
can do you can do they are like generic

00:41:43,330 --> 00:41:47,320
rules that you can run you can actually

00:41:44,740 --> 00:41:51,310
run anything you want in basil but

00:41:47,320 --> 00:41:55,660
actually we at Wiggs decided to leave

00:41:51,310 --> 00:41:59,080
basil for the build build phase and then

00:41:55,660 --> 00:42:02,320
you have access to all of the created

00:41:59,080 --> 00:42:07,800
jars and and uber jaws you know you pack

00:42:02,320 --> 00:42:12,130
them up and and then we have a separate

00:42:07,800 --> 00:42:15,070
service that listens to the build events

00:42:12,130 --> 00:42:18,700
we have the build event protocol for

00:42:15,070 --> 00:42:21,640
basil and we just listen and we know

00:42:18,700 --> 00:42:24,010
that the new deployable was created and

00:42:21,640 --> 00:42:28,200
we send it to our binary posit ori and

00:42:24,010 --> 00:42:34,990
in terms of versions the service just

00:42:28,200 --> 00:42:37,240
does an RC just does increment the RC

00:42:34,990 --> 00:42:42,160
version every time it does that that new

00:42:37,240 --> 00:42:44,910
deployable and yes so we do it with

00:42:42,160 --> 00:42:44,910
semantic versioning

00:42:52,880 --> 00:42:58,430
how much work is maintaining all the

00:42:55,520 --> 00:43:02,540
build files because for example having a

00:42:58,430 --> 00:43:04,609
built file in each package seems like a

00:43:02,540 --> 00:43:06,950
lot of work especially about refactoring

00:43:04,609 --> 00:43:12,440
for example yeah so it depends I mean

00:43:06,950 --> 00:43:15,349
you can you can stay in the maven or SBT

00:43:12,440 --> 00:43:20,000
level of projects or modules and then it

00:43:15,349 --> 00:43:22,940
will basically be the same like with

00:43:20,000 --> 00:43:27,020
these tools when you add dependency in

00:43:22,940 --> 00:43:31,849
maven or SVT but usually you will you

00:43:27,020 --> 00:43:34,160
want to have smaller targets so that if

00:43:31,849 --> 00:43:37,040
you would work without any additional

00:43:34,160 --> 00:43:39,530
tooling so every time you do an import

00:43:37,040 --> 00:43:41,450
of something you don't have yet you need

00:43:39,530 --> 00:43:42,730
to go to the build configuration and add

00:43:41,450 --> 00:43:45,560
it now

00:43:42,730 --> 00:43:49,010
that's exactly why weeks is developing

00:43:45,560 --> 00:43:52,040
these tools for helping you with

00:43:49,010 --> 00:43:56,900
automatic dependency management for you

00:43:52,040 --> 00:43:58,970
so it's not part it's not a basic part

00:43:56,900 --> 00:44:01,369
of basil you have the billdozer which

00:43:58,970 --> 00:44:03,260
you can run commands and you have

00:44:01,369 --> 00:44:05,810
scripts that add them but you need to

00:44:03,260 --> 00:44:08,560
know what you want to add so the

00:44:05,810 --> 00:44:10,490
automatic dependency management

00:44:08,560 --> 00:44:14,500
something that basil does not provide

00:44:10,490 --> 00:44:14,500
and we hope to open source that so I

00:44:14,859 --> 00:44:24,580
hope that answer your question one more

00:44:19,670 --> 00:44:27,890
question so how does phase handle

00:44:24,580 --> 00:44:30,320
conflicts in dependency versions so is

00:44:27,890 --> 00:44:32,330
it handled by the automatic defenders

00:44:30,320 --> 00:44:37,220
made what you just mentioned or any

00:44:32,330 --> 00:44:39,890
other way right so first you can have

00:44:37,220 --> 00:44:43,339
cyclic dependencies between between

00:44:39,890 --> 00:44:45,050
targets so basil will error on that now

00:44:43,339 --> 00:44:48,230
for third-party dependencies you mean

00:44:45,050 --> 00:44:52,250
about versions of third parties so there

00:44:48,230 --> 00:44:56,450
are a whole bunch of tools that resolve

00:44:52,250 --> 00:44:59,150
the maven dependencies basically for

00:44:56,450 --> 00:45:02,960
your basil repository and usually they

00:44:59,150 --> 00:45:04,560
work like a one version policy so that

00:45:02,960 --> 00:45:09,900
means you will need to change your IP

00:45:04,560 --> 00:45:13,020
I there are variations that do allow you

00:45:09,900 --> 00:45:15,030
to have multiple sets of dependencies

00:45:13,020 --> 00:45:18,210
but you should be really careful because

00:45:15,030 --> 00:45:20,910
the dependency is defined for the entire

00:45:18,210 --> 00:45:23,150
repository that means you may end up

00:45:20,910 --> 00:45:25,920
with the target that's using

00:45:23,150 --> 00:45:28,290
dependencies from different trees and

00:45:25,920 --> 00:45:31,410
you know transitively you get a conflict

00:45:28,290 --> 00:45:33,600
and but basil will not air on that so

00:45:31,410 --> 00:45:36,360
you'll get random result in the

00:45:33,600 --> 00:45:38,960
classpath so you don't you know you're

00:45:36,360 --> 00:45:41,520
not even guaranteed which version will

00:45:38,960 --> 00:45:43,650
will win in the classpath so the

00:45:41,520 --> 00:45:49,380
recommendation is just to work with one

00:45:43,650 --> 00:45:51,840
version for the repository no more

00:45:49,380 --> 00:45:53,300
questions thanks Nathan

00:45:51,840 --> 00:45:59,749
thank you very much

00:45:53,300 --> 00:45:59,749

YouTube URL: https://www.youtube.com/watch?v=K2Ytk0S4PF0


