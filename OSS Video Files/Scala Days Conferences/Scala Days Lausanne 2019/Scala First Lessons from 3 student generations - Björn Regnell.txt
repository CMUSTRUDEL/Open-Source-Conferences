Title: Scala First Lessons from 3 student generations - Björn Regnell
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/scala-first-lessons-from-3-student-generations
Captions: 
	00:00:01,700 --> 00:00:10,530
hi everyone welcome to this talk where I

00:00:07,259 --> 00:00:13,230
will share you with you some of my

00:00:10,530 --> 00:00:15,630
experiences for over three years of

00:00:13,230 --> 00:00:18,720
teaching Scala as a first language at

00:00:15,630 --> 00:00:22,529
the university level so my name is

00:00:18,720 --> 00:00:24,150
beyond like Nell and I actually spelled

00:00:22,529 --> 00:00:27,869
it with two dots but you can skip those

00:00:24,150 --> 00:00:30,599
I am a software engineering professor at

00:00:27,869 --> 00:00:35,309
Lund University in southern Sweden and

00:00:30,599 --> 00:00:37,559
my main bulk of work for the several

00:00:35,309 --> 00:00:39,270
decades have been researching in

00:00:37,559 --> 00:00:42,270
software requirements engineering and

00:00:39,270 --> 00:00:45,750
teaching but I got the opportunity to

00:00:42,270 --> 00:00:51,300
discover skål I've started to write a

00:00:45,750 --> 00:00:53,370
DSL for requirements in Scala and felt

00:00:51,300 --> 00:00:56,449
really productive and at the same time I

00:00:53,370 --> 00:01:00,629
had the opportunity as a side project to

00:00:56,449 --> 00:01:04,110
help kids discover programming and I

00:01:00,629 --> 00:01:07,590
actually used the kid-friendly IDE an

00:01:04,110 --> 00:01:11,030
open source project from India and I

00:01:07,590 --> 00:01:16,049
really was amazed how much they could do

00:01:11,030 --> 00:01:18,560
with a simple language and then I got

00:01:16,049 --> 00:01:20,850
the opportunity to start to teach

00:01:18,560 --> 00:01:24,180
Scotland that was really special to me

00:01:20,850 --> 00:01:29,280
actually because my own programming

00:01:24,180 --> 00:01:31,680
teacher was retiring and I got the

00:01:29,280 --> 00:01:35,369
opportunity to teach the new students

00:01:31,680 --> 00:01:37,759
I've been teaching mostly more senior

00:01:35,369 --> 00:01:40,560
students in their fourth and fifth year

00:01:37,759 --> 00:01:42,960
but I thought it would be really fun to

00:01:40,560 --> 00:01:49,470
meet with the new comers to university

00:01:42,960 --> 00:01:51,990
so I took over a Java course 2015 and I

00:01:49,470 --> 00:01:53,790
taught it in Java and at the same time

00:01:51,990 --> 00:01:56,310
we bootstrapped the course material for

00:01:53,790 --> 00:01:59,909
Scala and then I've been teaching Scala

00:01:56,310 --> 00:02:03,570
for three years so that's it has been a

00:01:59,909 --> 00:02:08,369
fantastic journey and I learned a lot

00:02:03,570 --> 00:02:11,610
but there has also been some late nights

00:02:08,369 --> 00:02:14,160
and hard working weekends etc so I will

00:02:11,610 --> 00:02:17,370
I have tried to condense

00:02:14,160 --> 00:02:22,440
what's the gist of the design of the of

00:02:17,370 --> 00:02:26,459
the teaching and we out actually have

00:02:22,440 --> 00:02:29,430
iterated the progression and what you

00:02:26,459 --> 00:02:32,010
selected over three years so I will give

00:02:29,430 --> 00:02:34,769
you kind of the final gist of what we've

00:02:32,010 --> 00:02:36,360
had but before I start I really need to

00:02:34,769 --> 00:02:39,420
make this acknowledgement because I'm

00:02:36,360 --> 00:02:41,910
really really happy for all people have

00:02:39,420 --> 00:02:44,819
contributed and very happy for the

00:02:41,910 --> 00:02:46,799
hard-working students I have very happy

00:02:44,819 --> 00:02:49,500
really motivate the student that really

00:02:46,799 --> 00:02:52,290
work hard and that's that's one of the

00:02:49,500 --> 00:02:55,410
success factors actually and I also have

00:02:52,290 --> 00:02:57,660
a lot of old students in their third

00:02:55,410 --> 00:03:01,230
fourth fifth year who is contributing as

00:02:57,660 --> 00:03:04,379
teaching assistants so I have around 15

00:03:01,230 --> 00:03:08,069
teaching assistants for 130 students

00:03:04,379 --> 00:03:10,590
each year and they are really making

00:03:08,069 --> 00:03:12,840
this happening they have the most

00:03:10,590 --> 00:03:16,799
individual contact I can't have

00:03:12,840 --> 00:03:19,470
individual contact with everybody all

00:03:16,799 --> 00:03:21,150
the time but they have and I also have a

00:03:19,470 --> 00:03:24,359
lot of supportive colleagues that's also

00:03:21,150 --> 00:03:25,980
really important and without the open

00:03:24,359 --> 00:03:30,420
source project with the teaching

00:03:25,980 --> 00:03:31,920
material it I think well that's what we

00:03:30,420 --> 00:03:36,450
have developed that what have manifested

00:03:31,920 --> 00:03:39,410
our our teaching into something that

00:03:36,450 --> 00:03:41,819
that students can really interact with

00:03:39,410 --> 00:03:45,709
and of course the fantastic scholar

00:03:41,819 --> 00:03:48,030
community thank you so this is this is

00:03:45,709 --> 00:03:52,709
what I will talk about I will talk about

00:03:48,030 --> 00:03:56,880
our motivations and why we changed from

00:03:52,709 --> 00:04:00,349
Java to Scala I will talk about how we

00:03:56,880 --> 00:04:03,510
did it and what we learned and some

00:04:00,349 --> 00:04:05,459
thoughts about the road ahead not just

00:04:03,510 --> 00:04:08,700
for us at Luna University but well I

00:04:05,459 --> 00:04:09,799
think is important for beginner adoption

00:04:08,700 --> 00:04:13,819
in Scala

00:04:09,799 --> 00:04:16,289
so why Scala first yeah my personal

00:04:13,819 --> 00:04:19,530
discovery of school has a teaching

00:04:16,289 --> 00:04:22,190
language was in this context so this

00:04:19,530 --> 00:04:26,340
picture is taken almost ten years ago

00:04:22,190 --> 00:04:27,069
it's helping kids to discover program in

00:04:26,340 --> 00:04:29,500
a fun

00:04:27,069 --> 00:04:33,789
and I think that if you have a language

00:04:29,500 --> 00:04:35,650
that is what you can it's concise enough

00:04:33,789 --> 00:04:37,720
but not too concise where you can do

00:04:35,650 --> 00:04:42,520
interesting things then this can be

00:04:37,720 --> 00:04:47,759
really good for kids but teaching 19 20

00:04:42,520 --> 00:04:49,840
year old students is another thing

00:04:47,759 --> 00:04:55,030
especially if they're going to become to

00:04:49,840 --> 00:04:57,789
the science engineers but that's what I

00:04:55,030 --> 00:05:00,819
was interested in and I actually joined

00:04:57,789 --> 00:05:02,979
the course myself as teaching assistant

00:05:00,819 --> 00:05:04,780
before I was head of the course together

00:05:02,979 --> 00:05:08,979
with the PhD students etc to try to

00:05:04,780 --> 00:05:11,409
learn what what this is all about so

00:05:08,979 --> 00:05:14,229
some facts about our students so each

00:05:11,409 --> 00:05:17,139
year there is around 130 students and

00:05:14,229 --> 00:05:19,539
the gist here is that they are enrolled

00:05:17,139 --> 00:05:24,250
at a five-year program and they're

00:05:19,539 --> 00:05:26,099
really motivated and it's only ten

00:05:24,250 --> 00:05:28,360
percent of all the applicants are

00:05:26,099 --> 00:05:31,750
admitted so it's highly selective

00:05:28,360 --> 00:05:37,509
admission for this program and this is

00:05:31,750 --> 00:05:40,419
also important so one third has never

00:05:37,509 --> 00:05:43,569
written a line of code but two thirds

00:05:40,419 --> 00:05:47,289
have varying degree of pre knowledge and

00:05:43,569 --> 00:05:49,150
very big span of pretty knowledge so one

00:05:47,289 --> 00:05:51,699
of the difficult things is to design a

00:05:49,150 --> 00:05:56,529
course that can address this very big

00:05:51,699 --> 00:05:58,330
span of pre knowledge so the students

00:05:56,529 --> 00:05:59,979
are fluent in Sweden Swedish all of them

00:05:58,330 --> 00:06:02,440
so that's why the teaching material is

00:05:59,979 --> 00:06:06,190
in Swedish I will give you links it's

00:06:02,440 --> 00:06:08,560
open source a translator might help you

00:06:06,190 --> 00:06:12,219
and some and some parts are in English

00:06:08,560 --> 00:06:14,199
but most are in Swedish but I will try

00:06:12,219 --> 00:06:15,969
to give you the gist of the conference

00:06:14,199 --> 00:06:18,990
here so first a little historical

00:06:15,969 --> 00:06:21,669
background so here is a timeline of

00:06:18,990 --> 00:06:23,620
languages at the engineering faculty at

00:06:21,669 --> 00:06:26,080
Lund University for the computer science

00:06:23,620 --> 00:06:29,830
and engineering program I will call them

00:06:26,080 --> 00:06:33,279
the CC students and so before that

00:06:29,830 --> 00:06:35,349
program started we taught programming

00:06:33,279 --> 00:06:38,320
and different from other programs using

00:06:35,349 --> 00:06:41,229
Algol and then first in even with using

00:06:38,320 --> 00:06:43,600
punch cards etc it's an old you know

00:06:41,229 --> 00:06:46,060
but then here you see the the timeline

00:06:43,600 --> 00:06:49,389
it's in very much in the algal family so

00:06:46,060 --> 00:06:51,729
it's Pascal similar for first eight

00:06:49,389 --> 00:06:53,400
years Pascal than 70 years as evil and

00:06:51,729 --> 00:06:55,180
then you can see the hegemony of the

00:06:53,400 --> 00:06:57,669
hello Duke

00:06:55,180 --> 00:07:00,580
mascot there and I think that's a

00:06:57,669 --> 00:07:03,220
similar trend in many engineering

00:07:00,580 --> 00:07:05,139
faculty around the world in this time we

00:07:03,220 --> 00:07:08,080
were quite early actually and people

00:07:05,139 --> 00:07:12,810
told us all object orientation will not

00:07:08,080 --> 00:07:16,599
be so in much important in industry and

00:07:12,810 --> 00:07:18,669
Java is maybe not that interesting etc

00:07:16,599 --> 00:07:20,949
but that was just in the beginning and

00:07:18,669 --> 00:07:23,560
then you know you know all this but what

00:07:20,949 --> 00:07:27,009
happened then 2016 just before we

00:07:23,560 --> 00:07:30,070
celebrated the 20th anniversary we

00:07:27,009 --> 00:07:32,520
shifted to Scala and when I took over so

00:07:30,070 --> 00:07:35,139
so what I will do now is that it will

00:07:32,520 --> 00:07:38,050
talk a little bit about the change so I

00:07:35,139 --> 00:07:43,000
was head of course in 2015 the last

00:07:38,050 --> 00:07:44,949
instance and then I thought Scala so

00:07:43,000 --> 00:07:47,970
this is how the program looks now and

00:07:44,949 --> 00:07:50,710
the so there are lots of other courses

00:07:47,970 --> 00:07:52,870
the students read other things in

00:07:50,710 --> 00:07:57,610
parallel and the read course there the

00:07:52,870 --> 00:08:00,849
programming one was 2015 in Scala and my

00:07:57,610 --> 00:08:02,199
job was to just plug in another course

00:08:00,849 --> 00:08:06,280
without changing anything

00:08:02,199 --> 00:08:08,530
so the second course is still in Java so

00:08:06,280 --> 00:08:11,500
it was a kind of a challenge to only

00:08:08,530 --> 00:08:13,419
change this thing and what did we want

00:08:11,500 --> 00:08:16,000
to change well the the main goal was not

00:08:13,419 --> 00:08:20,370
to teach scholar main goal is to teach

00:08:16,000 --> 00:08:22,449
programming of course but there was a

00:08:20,370 --> 00:08:24,940
couple of things that we needed to

00:08:22,449 --> 00:08:29,520
achieve so this is the Java first

00:08:24,940 --> 00:08:33,820
situation so actually course is very

00:08:29,520 --> 00:08:37,329
popular and successful in some terms so

00:08:33,820 --> 00:08:43,060
the exam results are very good this the

00:08:37,329 --> 00:08:46,959
students are very happy only 13% fail

00:08:43,060 --> 00:08:49,779
the first exam and they get good grades

00:08:46,959 --> 00:08:52,560
so we grade them based on the points on

00:08:49,779 --> 00:08:55,230
the exam so if you have

00:08:52,560 --> 00:08:58,130
more than eighty three points of out of

00:08:55,230 --> 00:09:01,140
hundred you get the top grade of five

00:08:58,130 --> 00:09:03,120
but there were some problems the high

00:09:01,140 --> 00:09:07,050
performance students were not really

00:09:03,120 --> 00:09:11,850
challenged and in the second course the

00:09:07,050 --> 00:09:15,060
results was not very good so here you

00:09:11,850 --> 00:09:16,680
can see the left column is the grade

00:09:15,060 --> 00:09:19,350
it's so given that you passed the first

00:09:16,680 --> 00:09:23,160
course you get the grade or three four

00:09:19,350 --> 00:09:24,510
and five so how did it then go in the

00:09:23,160 --> 00:09:27,240
second course so this is the Java

00:09:24,510 --> 00:09:29,070
situation the second column here so if

00:09:27,240 --> 00:09:32,040
you got the three in the first course

00:09:29,070 --> 00:09:34,890
you were almost destined to fail

00:09:32,040 --> 00:09:37,920
the second course so bear in mind that

00:09:34,890 --> 00:09:41,040
it was only a few students that got that

00:09:37,920 --> 00:09:43,710
the lowest grade if you got the fourth

00:09:41,040 --> 00:09:48,210
or even a five if you got the top grade

00:09:43,710 --> 00:09:52,560
still more than a third actually failed

00:09:48,210 --> 00:09:54,870
the second course and that was I don't I

00:09:52,560 --> 00:09:59,550
didn't really like that situation and I

00:09:54,870 --> 00:10:01,920
think my hypothesis is that as several

00:09:59,550 --> 00:10:05,090
students large fraction of the students

00:10:01,920 --> 00:10:07,740
already felt they knew programming and

00:10:05,090 --> 00:10:12,240
they had program a lot I know that they

00:10:07,740 --> 00:10:14,190
had blank spots black areas but they may

00:10:12,240 --> 00:10:15,600
be themselves didn't experience that in

00:10:14,190 --> 00:10:18,030
the beginning and then they they kind of

00:10:15,600 --> 00:10:20,130
opted out of the teaching and they

00:10:18,030 --> 00:10:22,140
managed to take the course on their old

00:10:20,130 --> 00:10:24,360
merits but they never really learned how

00:10:22,140 --> 00:10:27,990
to study programming or study computer

00:10:24,360 --> 00:10:29,610
science and so they so when the in the

00:10:27,990 --> 00:10:31,170
second course it's a bit more

00:10:29,610 --> 00:10:35,760
challenging from a computer science

00:10:31,170 --> 00:10:42,540
point of view and they didn't have the

00:10:35,760 --> 00:10:45,000
tools to learn several of them so and

00:10:42,540 --> 00:10:47,700
you can see the third the fourth and the

00:10:45,000 --> 00:10:50,730
fifth column is the scholar situation

00:10:47,700 --> 00:10:54,150
and there is some variation here it

00:10:50,730 --> 00:10:55,740
depends on several things I think the

00:10:54,150 --> 00:10:57,480
way we teach and also there is a

00:10:55,740 --> 00:11:00,920
variation maybe in the student that

00:10:57,480 --> 00:11:04,740
comes in etc but the the basic

00:11:00,920 --> 00:11:05,760
conclusion here is that it actually

00:11:04,740 --> 00:11:08,940
worked

00:11:05,760 --> 00:11:12,930
the if you see if you got got a five

00:11:08,940 --> 00:11:15,930
here last year all the top grades past

00:11:12,930 --> 00:11:21,510
the second course and even if you got

00:11:15,930 --> 00:11:23,579
just barely past the first course you

00:11:21,510 --> 00:11:26,220
still had a very good chance to take the

00:11:23,579 --> 00:11:28,880
second course if you study so this is

00:11:26,220 --> 00:11:30,750
another situation so actually this

00:11:28,880 --> 00:11:33,860
implementation that I will show you soon

00:11:30,750 --> 00:11:33,860
was a big success

00:11:33,959 --> 00:11:38,399
and and we fulfilled our goal so our

00:11:36,690 --> 00:11:42,829
goal was to increase the learning

00:11:38,399 --> 00:11:45,920
outcome for everybody and challenge the

00:11:42,829 --> 00:11:50,130
students that had pre knowledge enough

00:11:45,920 --> 00:11:51,870
and both of those goals were met so you

00:11:50,130 --> 00:11:55,110
can see here the exam results of this

00:11:51,870 --> 00:11:56,940
scholar of course the grades are more

00:11:55,110 --> 00:12:04,440
evenly distributed it's not as easy to

00:11:56,940 --> 00:12:05,880
get the top grade and another point is

00:12:04,440 --> 00:12:08,220
important that the school students

00:12:05,880 --> 00:12:10,410
really like the course they like the

00:12:08,220 --> 00:12:14,699
Java course as well but they here

00:12:10,410 --> 00:12:17,699
I I got many notes about kind of the

00:12:14,699 --> 00:12:19,500
interest in this new language so student

00:12:17,699 --> 00:12:22,319
meeting it an interesting new language

00:12:19,500 --> 00:12:27,569
is important for teaching I think so how

00:12:22,319 --> 00:12:30,329
did we do this yeah well what's most

00:12:27,569 --> 00:12:34,410
important and most difficult was our

00:12:30,329 --> 00:12:36,779
iteration to arrive at in given our

00:12:34,410 --> 00:12:42,180
context of where the course fit in in

00:12:36,779 --> 00:12:45,120
the curricula find a good subset to

00:12:42,180 --> 00:12:48,480
teach and do it in a progression and

00:12:45,120 --> 00:12:52,769
iterative progression that makes sense

00:12:48,480 --> 00:12:54,779
to a student group with very big span in

00:12:52,769 --> 00:13:00,540
pre knowledge so so arriving at this

00:12:54,779 --> 00:13:03,899
here was maybe the biggest kind of thing

00:13:00,540 --> 00:13:06,170
that we iterated around and I also want

00:13:03,899 --> 00:13:09,180
to point out two of my favorite

00:13:06,170 --> 00:13:13,649
pedagogical books you can check them out

00:13:09,180 --> 00:13:15,569
later there are kind of two important

00:13:13,649 --> 00:13:17,610
ideas that I have used when designing

00:13:15,569 --> 00:13:19,560
the course so one one thing is from

00:13:17,610 --> 00:13:22,050
Martin and Tsui it's the pattern

00:13:19,560 --> 00:13:24,830
of variation so in order to understand

00:13:22,050 --> 00:13:28,620
the concept and really this book is

00:13:24,830 --> 00:13:30,600
views teaching and learning as some as

00:13:28,620 --> 00:13:34,020
growing a language as growing a language

00:13:30,600 --> 00:13:36,240
to be able to do something and to grow

00:13:34,020 --> 00:13:38,370
your understanding of something through

00:13:36,240 --> 00:13:40,320
building a language in your head you

00:13:38,370 --> 00:13:43,380
need to have these patterns of variation

00:13:40,320 --> 00:13:45,690
you need while you learn you contrast

00:13:43,380 --> 00:13:48,360
things you separate things while you get

00:13:45,690 --> 00:13:50,310
aware of them and and when you

00:13:48,360 --> 00:13:52,380
understand things separately first you

00:13:50,310 --> 00:13:55,920
then need to fuse them together in order

00:13:52,380 --> 00:13:57,540
to be able to do something advanced so

00:13:55,920 --> 00:14:01,100
that's the gist of it I will come back

00:13:57,540 --> 00:14:04,500
to a bit about this contrasting thing

00:14:01,100 --> 00:14:08,310
and also this book is really fantastic

00:14:04,500 --> 00:14:09,510
it summarizes the empirical recent

00:14:08,310 --> 00:14:11,100
empirical knowledge about what works

00:14:09,510 --> 00:14:14,730
when you try to learn something

00:14:11,100 --> 00:14:17,250
difficult or something ambitious or

00:14:14,730 --> 00:14:19,890
something advanced and and one of the

00:14:17,250 --> 00:14:22,800
there are many nice things in this and

00:14:19,890 --> 00:14:24,510
it debunks a lot of myths with learning

00:14:22,800 --> 00:14:27,480
but one other thing is that we should

00:14:24,510 --> 00:14:29,160
actually embrace difficulties desirable

00:14:27,480 --> 00:14:32,910
difficulties if you are going to learn

00:14:29,160 --> 00:14:36,180
something you need to invest effort just

00:14:32,910 --> 00:14:38,070
making it very smooth and easy it

00:14:36,180 --> 00:14:41,760
doesn't really help you to achieve

00:14:38,070 --> 00:14:44,690
something deep but if not the word

00:14:41,760 --> 00:14:48,450
desirable there I will come back to that

00:14:44,690 --> 00:14:51,540
so this is a typical study week the week

00:14:48,450 --> 00:14:54,089
starts with two lectures that I give and

00:14:51,540 --> 00:14:56,580
then in the middle of the week there are

00:14:54,089 --> 00:14:58,710
workshops and for one each student is

00:14:56,580 --> 00:15:01,710
scheduled for one workshop and in groups

00:14:58,710 --> 00:15:05,730
of twelve in the school computer rooms

00:15:01,710 --> 00:15:08,280
and they have one teaching assistant so

00:15:05,730 --> 00:15:10,890
and these are going on four Wednesdays

00:15:08,280 --> 00:15:12,990
or Thursdays and and in if there is room

00:15:10,890 --> 00:15:15,120
in the room you can go to several of

00:15:12,990 --> 00:15:17,040
these workshops and on Friday there is

00:15:15,120 --> 00:15:19,830
what is called a lab session it's a mini

00:15:17,040 --> 00:15:21,240
project where you fuse the things you

00:15:19,830 --> 00:15:24,870
have worked on in workshops the

00:15:21,240 --> 00:15:27,060
workshops you exercise concepts and new

00:15:24,870 --> 00:15:30,750
concepts each week according to a theme

00:15:27,060 --> 00:15:31,950
and then in the Friday you are supposed

00:15:30,750 --> 00:15:33,630
to write

00:15:31,950 --> 00:15:40,800
a bit bigger program that puts these

00:15:33,630 --> 00:15:42,720
things together so this is actually the

00:15:40,800 --> 00:15:44,430
gist of the presentation so if you are

00:15:42,720 --> 00:15:47,100
going back to my slides they will be

00:15:44,430 --> 00:15:49,860
available and they are available on

00:15:47,100 --> 00:15:52,050
github and you can go back here and then

00:15:49,860 --> 00:15:55,340
you can go to the open source material

00:15:52,050 --> 00:15:58,230
and check in the compendium which has

00:15:55,340 --> 00:16:01,350
the workshop exercises and the labs for

00:15:58,230 --> 00:16:05,700
each but the main I just here is the

00:16:01,350 --> 00:16:07,770
themes the progression of the themes so

00:16:05,700 --> 00:16:10,320
this gives you an idea of the subset

00:16:07,770 --> 00:16:12,660
that we have chosen to teach car but

00:16:10,320 --> 00:16:19,340
bear in mind that this is iterative so

00:16:12,660 --> 00:16:23,010
even if sequences scholar collection

00:16:19,340 --> 00:16:26,220
vector that we use that week they have

00:16:23,010 --> 00:16:29,340
seen it before but that week is has the

00:16:26,220 --> 00:16:31,800
focus on data structure sequence so we

00:16:29,340 --> 00:16:33,780
kind of iterate the stuff and then some

00:16:31,800 --> 00:16:36,930
at some point in the course there is a

00:16:33,780 --> 00:16:39,420
focal point for a certain concept that

00:16:36,930 --> 00:16:40,980
we dig deeper into that so there is

00:16:39,420 --> 00:16:43,080
iteration here but we start with

00:16:40,980 --> 00:16:48,390
expressions then we write whole programs

00:16:43,080 --> 00:16:50,670
we do functions in order to abstract our

00:16:48,390 --> 00:16:52,770
parts of programs and understand

00:16:50,670 --> 00:16:55,170
parameters and return types things like

00:16:52,770 --> 00:16:58,380
that we use objects for namespace

00:16:55,170 --> 00:17:03,330
creation and then we use classes when we

00:16:58,380 --> 00:17:07,380
need one then more so we have here what

00:17:03,330 --> 00:17:10,770
there is a lab called block mall where

00:17:07,380 --> 00:17:14,910
you create a strange squared form almo

00:17:10,770 --> 00:17:18,150
called block mole and when we need more

00:17:14,910 --> 00:17:21,920
of them we need classes so instances are

00:17:18,150 --> 00:17:24,839
introduced when we through their and

00:17:21,920 --> 00:17:27,690
patterns sequences and then there is a

00:17:24,839 --> 00:17:30,780
midterm diagnostic test where you can

00:17:27,690 --> 00:17:32,430
check that you have one other stuff that

00:17:30,780 --> 00:17:35,010
we have went through the first half of

00:17:32,430 --> 00:17:37,590
the semester and then we go on with

00:17:35,010 --> 00:17:40,980
nested structures which is actually

00:17:37,590 --> 00:17:44,340
challenging so creating nested

00:17:40,980 --> 00:17:45,750
structures and doing some algorithms of

00:17:44,340 --> 00:17:47,670
the nicest ruptures and

00:17:45,750 --> 00:17:49,830
then we introduce more data structures

00:17:47,670 --> 00:17:52,860
like sets and maps and here comes

00:17:49,830 --> 00:17:55,110
inheritance when we need it from a

00:17:52,860 --> 00:17:58,110
modeling point of view they write the

00:17:55,110 --> 00:18:02,430
funny game called snake and here comes

00:17:58,110 --> 00:18:04,320
one week where we use contrasting as a

00:18:02,430 --> 00:18:08,040
vehicle for learning so we actually

00:18:04,320 --> 00:18:10,410
contrast parts in Scala with Java for

00:18:08,040 --> 00:18:12,510
two reasons first because they get the

00:18:10,410 --> 00:18:15,570
jumping start for the second course

00:18:12,510 --> 00:18:19,440
which is in Java and they we can also

00:18:15,570 --> 00:18:22,320
manifest the semantics behind syntax

00:18:19,440 --> 00:18:24,900
where syntax is different and we can

00:18:22,320 --> 00:18:27,810
also contrast things like mutability

00:18:24,900 --> 00:18:30,570
immutability statement orientation

00:18:27,810 --> 00:18:34,170
expression orientation we have done that

00:18:30,570 --> 00:18:36,960
already in Scala but now we do it across

00:18:34,170 --> 00:18:40,050
languages and then there is a final

00:18:36,960 --> 00:18:41,970
product which is bigger program and they

00:18:40,050 --> 00:18:44,550
prepare for the final exam which is

00:18:41,970 --> 00:18:47,190
written whole exam on paper but all of

00:18:44,550 --> 00:18:50,010
these labs they are assessed so you get

00:18:47,190 --> 00:18:51,870
kind of continuous examination a

00:18:50,010 --> 00:18:54,210
continuous assessment because you need

00:18:51,870 --> 00:18:59,910
to be approved on all the labs in order

00:18:54,210 --> 00:19:01,830
to be allowed to take the final exam so

00:18:59,910 --> 00:19:04,530
I will actually not be able to go into

00:19:01,830 --> 00:19:06,390
detail in all of the themes but in the

00:19:04,530 --> 00:19:08,340
book in the beginning of the companion

00:19:06,390 --> 00:19:11,670
there is actually concepts for each

00:19:08,340 --> 00:19:13,290
theme a list of like 20 concepts or so

00:19:11,670 --> 00:19:15,210
that is connected to what we learned

00:19:13,290 --> 00:19:16,950
that week in the exercises and I think

00:19:15,210 --> 00:19:18,870
that the translator might help you and

00:19:16,950 --> 00:19:20,340
most of the words are similar in English

00:19:18,870 --> 00:19:25,320
and Swedish so you can check out that

00:19:20,340 --> 00:19:28,790
and we also have a I maintain a small

00:19:25,320 --> 00:19:32,730
library on May the South Central called

00:19:28,790 --> 00:19:34,440
into Prague Scala lab which is a very

00:19:32,730 --> 00:19:36,780
simple wrapper of a swing so that you

00:19:34,440 --> 00:19:41,010
can start the window and grow pixel

00:19:36,780 --> 00:19:43,020
based graphics so with the one-liner and

00:19:41,010 --> 00:19:49,710
an SPT you are set to go with that

00:19:43,020 --> 00:19:54,420
library so how did we deal with this big

00:19:49,710 --> 00:19:57,960
spectrum of pre knowledge well these are

00:19:54,420 --> 00:19:59,559
the main things that we did so we

00:19:57,960 --> 00:20:03,080
introduced

00:19:59,559 --> 00:20:05,450
variation in the tasks the assignments

00:20:03,080 --> 00:20:09,770
that we give students so there is always

00:20:05,450 --> 00:20:12,440
a minimum thing that you need to do to

00:20:09,770 --> 00:20:14,059
be able to follow the progression but on

00:20:12,440 --> 00:20:16,640
the other hand there is always things

00:20:14,059 --> 00:20:19,250
you can do more always interesting

00:20:16,640 --> 00:20:22,160
things you can go deeper so the

00:20:19,250 --> 00:20:24,230
exercises that you work on during the

00:20:22,160 --> 00:20:26,120
workshops they are divided in the

00:20:24,230 --> 00:20:27,950
foundational tasks extra tasks and the

00:20:26,120 --> 00:20:30,170
balanced tasks so you do the

00:20:27,950 --> 00:20:32,990
foundational tasks and if you think if

00:20:30,170 --> 00:20:35,480
you find that you you want more work

00:20:32,990 --> 00:20:37,400
more on the same thing to exercise more

00:20:35,480 --> 00:20:39,410
you do the extra tasks if you thought it

00:20:37,400 --> 00:20:41,510
was quite simple you can go to the

00:20:39,410 --> 00:20:43,340
advanced toasts and do something more

00:20:41,510 --> 00:20:45,320
interesting and several things in

00:20:43,340 --> 00:20:48,710
advanced us will never show up on the

00:20:45,320 --> 00:20:50,600
final exam but students are still really

00:20:48,710 --> 00:20:53,390
interested in in in in trying them out

00:20:50,600 --> 00:20:56,919
and then on the labs that are assessed

00:20:53,390 --> 00:20:59,419
and you need to be approved on the lab

00:20:56,919 --> 00:21:02,330
there are mandatory tasks that is the

00:20:59,419 --> 00:21:06,049
basis for assessment and that will get

00:21:02,330 --> 00:21:08,630
your program to work but the but the

00:21:06,049 --> 00:21:10,910
program will be much more interesting if

00:21:08,630 --> 00:21:12,350
you also do some of the elective tops

00:21:10,910 --> 00:21:14,750
but you don't need to do all of them you

00:21:12,350 --> 00:21:16,910
can do select a few of them in any order

00:21:14,750 --> 00:21:18,380
to build on your program or you could do

00:21:16,910 --> 00:21:20,809
your own I like the task if you like

00:21:18,380 --> 00:21:23,120
just a fine but students are encouraged

00:21:20,809 --> 00:21:25,100
always to go further as long as their

00:21:23,120 --> 00:21:28,520
grit is there as long as they are not

00:21:25,100 --> 00:21:31,070
fatigued by by the current thing so and

00:21:28,520 --> 00:21:36,679
that's a challenge to keep the grid to

00:21:31,070 --> 00:21:38,419
keep the the ambition and among the

00:21:36,679 --> 00:21:41,600
students and that that's one of the

00:21:38,419 --> 00:21:43,250
ideas behind the course so the first

00:21:41,600 --> 00:21:45,440
weeks are very playful and that's

00:21:43,250 --> 00:21:48,320
because in parallel the things going on

00:21:45,440 --> 00:21:50,660
as you saw on a previous slide and also

00:21:48,320 --> 00:21:52,940
the freshmen activities the students

00:21:50,660 --> 00:21:54,650
organized is very fun games they have

00:21:52,940 --> 00:21:57,919
etcetera so the first three weeks are

00:21:54,650 --> 00:22:00,980
playful we use the the kid programming

00:21:57,919 --> 00:22:02,870
IDE called Kojo the first week and we

00:22:00,980 --> 00:22:04,370
ilist and that's very important for the

00:22:02,870 --> 00:22:07,850
ones that have never written a line of

00:22:04,370 --> 00:22:09,860
code so it's kind of low stake try all

00:22:07,850 --> 00:22:12,470
the kids use this as well it's this will

00:22:09,860 --> 00:22:13,130
not be so hard but what we actually do

00:22:12,470 --> 00:22:15,710
is we

00:22:13,130 --> 00:22:18,350
Coosh abstract thinking already from the

00:22:15,710 --> 00:22:19,430
beginning I will show you a bit about

00:22:18,350 --> 00:22:22,790
that soon

00:22:19,430 --> 00:22:27,110
and then after the first week we go on

00:22:22,790 --> 00:22:30,490
and you use an editor last year we used

00:22:27,110 --> 00:22:34,280
Adam and now I will go for the escola

00:22:30,490 --> 00:22:36,290
simp has improved a lot and with metals

00:22:34,280 --> 00:22:38,600
it will be nice they are supposed to

00:22:36,290 --> 00:22:39,920
learn terminal and I think it's

00:22:38,600 --> 00:22:42,650
important for the model what the

00:22:39,920 --> 00:22:45,260
compiler is to have your own text and

00:22:42,650 --> 00:22:48,920
have the output of the compiler and run

00:22:45,260 --> 00:22:52,310
it in terminal so and then you create a

00:22:48,920 --> 00:22:55,070
text game it's a log irritating text

00:22:52,310 --> 00:22:57,410
game so that especially it can be very

00:22:55,070 --> 00:23:00,170
irritating for the user if the user

00:22:57,410 --> 00:23:02,060
hasn't read the code but if you if a

00:23:00,170 --> 00:23:03,860
user has read the code it should be log

00:23:02,060 --> 00:23:07,250
of irritating and and the goal is to

00:23:03,860 --> 00:23:11,030
write code that is readable but you can

00:23:07,250 --> 00:23:14,450
do it on an on your challenge level and

00:23:11,030 --> 00:23:16,880
here we introduced a build tool and they

00:23:14,450 --> 00:23:19,400
simply just use SPT run so I'm very

00:23:16,880 --> 00:23:22,220
happy that SPT got so simple to use that

00:23:19,400 --> 00:23:25,100
you don't need very much more than fire

00:23:22,220 --> 00:23:26,570
up SPT and and we do this on the school

00:23:25,100 --> 00:23:29,420
computers where all tools are

00:23:26,570 --> 00:23:31,420
pre-installed but several of them also

00:23:29,420 --> 00:23:36,070
install on their own laptops of course

00:23:31,420 --> 00:23:36,070
so there is guide to help them with that

00:23:36,880 --> 00:23:41,900
yeah so this is the first week with

00:23:39,350 --> 00:23:44,480
choreo if you haven't checked out Co you

00:23:41,900 --> 00:23:46,340
can download it from the links I gave

00:23:44,480 --> 00:23:48,740
you previously it's really nice you only

00:23:46,340 --> 00:23:50,930
need to press the play button and there

00:23:48,740 --> 00:23:52,400
is turtle graphics involved but what we

00:23:50,930 --> 00:23:55,460
do with the first week is actually

00:23:52,400 --> 00:23:58,520
pushing abstract thinking so you define

00:23:55,460 --> 00:24:01,790
a square and then you use that

00:23:58,520 --> 00:24:04,220
abstraction to create a new abstraction

00:24:01,790 --> 00:24:07,280
a row and then we use that abstraction

00:24:04,220 --> 00:24:10,910
to create a new extraction a grid and

00:24:07,280 --> 00:24:14,950
and that's what is important even the

00:24:10,910 --> 00:24:18,200
students that have program before they

00:24:14,950 --> 00:24:20,930
see the value some of the program a lot

00:24:18,200 --> 00:24:22,640
but they put all the stuff in main or

00:24:20,930 --> 00:24:26,150
something like that but pushing

00:24:22,640 --> 00:24:29,360
abstraction is important

00:24:26,150 --> 00:24:31,160
and then I will show you here pictures

00:24:29,360 --> 00:24:34,190
of four laughs I won't go into detail on

00:24:31,160 --> 00:24:38,080
all the labs but they are basically up

00:24:34,190 --> 00:24:41,420
to kinda eternal apps where you do text

00:24:38,080 --> 00:24:44,780
interaction or graphical apps where you

00:24:41,420 --> 00:24:47,630
use this simple pixel window to do

00:24:44,780 --> 00:24:51,830
interesting things so the first is a

00:24:47,630 --> 00:24:58,310
block mole where you create an animal

00:24:51,830 --> 00:25:00,500
and dig tunnels on the ground and one of

00:24:58,310 --> 00:25:02,840
the extra tasks is to also introduce a

00:25:00,500 --> 00:25:07,780
block worm that you should catch so you

00:25:02,840 --> 00:25:10,970
control it with a a SW s and yeah it's

00:25:07,780 --> 00:25:13,400
simplistic but actually very fun and

00:25:10,970 --> 00:25:18,050
here are the concepts that we exercise

00:25:13,400 --> 00:25:20,180
here you're supposed to divide your your

00:25:18,050 --> 00:25:23,990
program into function you should use

00:25:20,180 --> 00:25:27,080
namespace we talked about scopes of

00:25:23,990 --> 00:25:28,700
names and of course we exercise also the

00:25:27,080 --> 00:25:31,550
basics of sequence alternative

00:25:28,700 --> 00:25:34,160
repetition here so this is week four and

00:25:31,550 --> 00:25:36,410
then we introduce classes because now

00:25:34,160 --> 00:25:38,690
you are going to make a two-player game

00:25:36,410 --> 00:25:43,430
we need two instances so basically and

00:25:38,690 --> 00:25:45,620
that's why I like how explicit object

00:25:43,430 --> 00:25:47,750
and class differences in scholar because

00:25:45,620 --> 00:25:50,660
here we start with a singleton a model

00:25:47,750 --> 00:25:53,570
and we transform it into a class small

00:25:50,660 --> 00:25:57,380
and now it has you can have two it

00:25:53,570 --> 00:26:03,770
instances with different sets of fields

00:25:57,380 --> 00:26:07,970
and state etc we go on here if I just

00:26:03,770 --> 00:26:09,830
take another example in week 8 we work

00:26:07,970 --> 00:26:15,050
on nested structures we have a case

00:26:09,830 --> 00:26:16,970
class matrix which is generic and it's

00:26:15,050 --> 00:26:20,200
the metric is implemented as a vector or

00:26:16,970 --> 00:26:24,410
vector of T and they implement the

00:26:20,200 --> 00:26:26,240
Conway's Game of Life and it's it's they

00:26:24,410 --> 00:26:28,340
find it really interesting and on the

00:26:26,240 --> 00:26:31,310
fly they learn things like how to

00:26:28,340 --> 00:26:34,310
iterate over apply function over a

00:26:31,310 --> 00:26:36,860
nested structure and in week 10 this is

00:26:34,310 --> 00:26:39,950
way in the course we have actually group

00:26:36,860 --> 00:26:41,210
projects where a whole group of students

00:26:39,950 --> 00:26:43,190
all of the other assignments are

00:26:41,210 --> 00:26:45,260
individual they collaborate around

00:26:43,190 --> 00:26:46,909
learning but the assignments are

00:26:45,260 --> 00:26:48,830
individual here's the first assignment

00:26:46,909 --> 00:26:50,960
that's made in the group and the goal

00:26:48,830 --> 00:26:54,139
there is to understand how difficult it

00:26:50,960 --> 00:27:00,399
can be to to write code if you are more

00:26:54,139 --> 00:27:04,279
than one person okay what did we learn

00:27:00,399 --> 00:27:07,070
so this is maybe the gist of the

00:27:04,279 --> 00:27:09,500
benefits I don't claim to have done any

00:27:07,070 --> 00:27:13,149
kind of eight to be testing of the

00:27:09,500 --> 00:27:19,789
different student groups in a very

00:27:13,149 --> 00:27:22,220
scientific empiricism way but I still

00:27:19,789 --> 00:27:27,350
think that I have some evidence that

00:27:22,220 --> 00:27:29,299
this hypothesis might be true so it's I

00:27:27,350 --> 00:27:30,980
really like that the combination when I

00:27:29,299 --> 00:27:34,299
have this big span of pre knowledge that

00:27:30,980 --> 00:27:36,919
it can be both simple for beginners and

00:27:34,299 --> 00:27:40,549
interesting for the ones that already

00:27:36,919 --> 00:27:43,399
has a lot of things coming and and also

00:27:40,549 --> 00:27:45,470
this is true for teachers actually so it

00:27:43,399 --> 00:27:48,289
being in a situation where we have a

00:27:45,470 --> 00:27:52,130
really interesting thing to learn it's

00:27:48,289 --> 00:27:53,480
good also for teachers if you get the

00:27:52,130 --> 00:27:55,250
feeling of ambition with the model

00:27:53,480 --> 00:27:58,419
language and you can grow etc that's

00:27:55,250 --> 00:28:01,190
really nice another important thing is

00:27:58,419 --> 00:28:04,070
it's good if the reliant language has

00:28:01,190 --> 00:28:07,309
some regularity so that you don't need

00:28:04,070 --> 00:28:10,580
to spend too much time or wear out the

00:28:07,309 --> 00:28:15,380
grit of students on details that is kind

00:28:10,580 --> 00:28:17,899
of blocking the picture and and that's

00:28:15,380 --> 00:28:20,210
really nice for instance that value

00:28:17,899 --> 00:28:22,490
types are real objects etc and the

00:28:20,210 --> 00:28:24,649
ability to do interesting things with

00:28:22,490 --> 00:28:27,909
small programs is also important so you

00:28:24,649 --> 00:28:31,039
want to have expressive expressiveness

00:28:27,909 --> 00:28:33,019
so that you can do a lot of stuff easy

00:28:31,039 --> 00:28:34,669
and I think that many of the other

00:28:33,019 --> 00:28:36,889
languages that are used for beginner

00:28:34,669 --> 00:28:43,190
programming has this going that you can

00:28:36,889 --> 00:28:45,880
do interesting things early on but but I

00:28:43,190 --> 00:28:50,029
really think static typing helps

00:28:45,880 --> 00:28:51,620
beginners because as soon as you start

00:28:50,029 --> 00:28:53,419
to understand that the compiler is your

00:28:51,620 --> 00:28:53,660
friend and it's okay to do mistake it's

00:28:53,419 --> 00:28:55,820
all

00:28:53,660 --> 00:28:57,860
also interesting to do mistakes and you

00:28:55,820 --> 00:28:59,870
get some feedback and you learn the

00:28:57,860 --> 00:29:03,260
concept through the error message event

00:28:59,870 --> 00:29:05,120
- etc and also I think that the

00:29:03,260 --> 00:29:06,470
iterative learning that you can do in

00:29:05,120 --> 00:29:08,510
the ripple is nice and several other

00:29:06,470 --> 00:29:10,520
languages held ripples but what you get

00:29:08,510 --> 00:29:13,280
with Scala ripple is the dialog of types

00:29:10,520 --> 00:29:15,770
which grows your own language and

00:29:13,280 --> 00:29:17,720
ability to talk about the concepts so

00:29:15,770 --> 00:29:20,690
that's I think is really important and

00:29:17,720 --> 00:29:23,150
actually the multi paradigm is critical

00:29:20,690 --> 00:29:25,760
and going back to the principle of

00:29:23,150 --> 00:29:28,760
variation of contrasting so if you can

00:29:25,760 --> 00:29:30,830
in the same language express totally

00:29:28,760 --> 00:29:34,640
different way of solving the same

00:29:30,830 --> 00:29:36,650
problem you get a deeper understanding

00:29:34,640 --> 00:29:39,020
of the concepts as such so for instance

00:29:36,650 --> 00:29:41,120
contrasting an if statement and an if

00:29:39,020 --> 00:29:42,680
expression is really important to be

00:29:41,120 --> 00:29:44,870
able to do in the same language because

00:29:42,680 --> 00:29:46,940
otherwise how could I talk about a thing

00:29:44,870 --> 00:29:49,550
if I can't talk about a different thing

00:29:46,940 --> 00:29:55,550
that is similar so that's really

00:29:49,550 --> 00:29:57,530
important and so skull has sometimes be

00:29:55,550 --> 00:29:59,420
criticized for all there's so many ways

00:29:57,530 --> 00:30:01,370
to do the same thing but from a teaching

00:29:59,420 --> 00:30:04,640
point of view a learning point of view

00:30:01,370 --> 00:30:07,010
this is really good because you can get

00:30:04,640 --> 00:30:10,340
a deeper understanding when you keep

00:30:07,010 --> 00:30:16,070
certain things constant and very other

00:30:10,340 --> 00:30:21,650
things and contrast that variation there

00:30:16,070 --> 00:30:26,600
are some challenges so I couldn't really

00:30:21,650 --> 00:30:30,590
find a good book in the Java case and in

00:30:26,600 --> 00:30:35,960
2015 we continued to use the Swedish

00:30:30,590 --> 00:30:37,670
textbook in Java but we I couldn't find

00:30:35,960 --> 00:30:39,320
anything similar there are some books on

00:30:37,670 --> 00:30:41,360
Scala but they are not really fitting

00:30:39,320 --> 00:30:43,760
our context you know with it the course

00:30:41,360 --> 00:30:46,340
has to fit in in a scene with other

00:30:43,760 --> 00:30:49,280
courses etc so the our progression

00:30:46,340 --> 00:30:51,770
didn't fit the existing books and also

00:30:49,280 --> 00:30:55,310
students are not identical even if we

00:30:51,770 --> 00:30:58,670
had a good Swedish textbook on Java I I

00:30:55,310 --> 00:31:01,430
guess maybe 20% that maximum kind of

00:30:58,670 --> 00:31:04,010
went through the book at some degree

00:31:01,430 --> 00:31:05,690
most of them were not really

00:31:04,010 --> 00:31:07,760
enthusiastic about learning from a book

00:31:05,690 --> 00:31:11,660
they use the lectures they you

00:31:07,760 --> 00:31:15,250
the assignments they used internet so

00:31:11,660 --> 00:31:17,840
selecting a logon subset was not easy so

00:31:15,250 --> 00:31:20,150
introducing too many concepts too fast

00:31:17,840 --> 00:31:22,970
without iterating the combination of the

00:31:20,150 --> 00:31:26,630
introduced concepts and to do that in a

00:31:22,970 --> 00:31:28,340
consistent way need you require really

00:31:26,630 --> 00:31:31,010
careful thinking in some trial and error

00:31:28,340 --> 00:31:33,530
and in and you need to select the

00:31:31,010 --> 00:31:35,000
progression that kind of fits people but

00:31:33,530 --> 00:31:37,190
then you need to introduce an iteration

00:31:35,000 --> 00:31:38,630
and how you do that depends on what you

00:31:37,190 --> 00:31:42,230
put in and put out so it's a

00:31:38,630 --> 00:31:44,090
combinatorial problem and here are

00:31:42,230 --> 00:31:45,590
examples of things we excluded and that

00:31:44,090 --> 00:31:47,150
also depends on the context graph and

00:31:45,590 --> 00:31:49,990
designing an effective progression that

00:31:47,150 --> 00:31:53,780
has this iteration has been a challenge

00:31:49,990 --> 00:31:55,850
and the tool barriers so we had computer

00:31:53,780 --> 00:31:57,740
rooms with all the stuff installed and

00:31:55,850 --> 00:32:00,050
that was a saver for some of the

00:31:57,740 --> 00:32:04,730
students who who got bogged down within

00:32:00,050 --> 00:32:06,860
trying to install the JVM in the

00:32:04,730 --> 00:32:07,280
clashing with the existing JRA and blah

00:32:06,860 --> 00:32:09,440
blah blah

00:32:07,280 --> 00:32:11,540
all of that stuff so now it's getting

00:32:09,440 --> 00:32:15,710
better we have the IntelliJ Scala bundle

00:32:11,540 --> 00:32:19,640
and things like that but I think we can

00:32:15,710 --> 00:32:21,320
do even better in this and also stack

00:32:19,640 --> 00:32:25,700
overflow from a beginner point of view

00:32:21,320 --> 00:32:28,460
is a bit polluted by a lot of powerful

00:32:25,700 --> 00:32:30,440
stuff and a lot of old answers that are

00:32:28,460 --> 00:32:34,220
not idiomatic anymore so it's not easy

00:32:30,440 --> 00:32:37,160
to get to do the things that they tend

00:32:34,220 --> 00:32:40,610
to want to do namely dig out the things

00:32:37,160 --> 00:32:42,890
themselves from internet so it's it's

00:32:40,610 --> 00:32:45,800
important to develop that skill among

00:32:42,890 --> 00:32:47,630
students and it's not easy and I think

00:32:45,800 --> 00:32:50,420
that when we go to scale three it will

00:32:47,630 --> 00:32:53,480
it be more difficult maybe because there

00:32:50,420 --> 00:32:55,490
will be all these generations of answers

00:32:53,480 --> 00:32:57,890
that are relevant in old idioms and

00:32:55,490 --> 00:32:59,680
things like that so we'll see how that

00:32:57,890 --> 00:33:04,100
goes

00:32:59,680 --> 00:33:06,470
so the key ingredients to summarize we

00:33:04,100 --> 00:33:08,720
introduce concepts iteratively but we

00:33:06,470 --> 00:33:11,450
have a main theme we use patterns of

00:33:08,720 --> 00:33:14,780
variation to contrast things we

00:33:11,450 --> 00:33:16,760
playfully use abstraction already from

00:33:14,780 --> 00:33:19,160
the beginning

00:33:16,760 --> 00:33:22,150
we start with expressions simple

00:33:19,160 --> 00:33:25,550
functions go to objects classes we

00:33:22,150 --> 00:33:27,380
contrast classes and case classes when

00:33:25,550 --> 00:33:30,980
we introduce them and that's really nice

00:33:27,380 --> 00:33:33,200
to be able to do we contrast immutable

00:33:30,980 --> 00:33:35,360
immutability that's really nice to be

00:33:33,200 --> 00:33:37,220
able to do and we have a progression of

00:33:35,360 --> 00:33:39,020
collections we in the beginning we

00:33:37,220 --> 00:33:41,780
standardize some vector and then and and

00:33:39,020 --> 00:33:45,200
also array to contrast mutable and

00:33:41,780 --> 00:33:46,910
immutable and then we go on the higher

00:33:45,200 --> 00:33:49,220
order function is not a big thing it

00:33:46,910 --> 00:33:50,600
comes later in courses and there is even

00:33:49,220 --> 00:33:52,460
in second year of course in functional

00:33:50,600 --> 00:33:56,450
programming but the point here is that

00:33:52,460 --> 00:33:58,730
it gets very natural to use higher order

00:33:56,450 --> 00:34:01,250
functions in together with the

00:33:58,730 --> 00:34:02,780
collection library and the duality

00:34:01,250 --> 00:34:07,610
between map and four is something that

00:34:02,780 --> 00:34:11,600
they really totally works with by the

00:34:07,610 --> 00:34:18,620
end of the course like very natural okay

00:34:11,600 --> 00:34:21,020
and they all FP mix so I I so the course

00:34:18,620 --> 00:34:25,460
takes the same pragmatic view on

00:34:21,020 --> 00:34:27,490
programming as the language so it's so

00:34:25,460 --> 00:34:32,300
the programming is not a religion it's

00:34:27,490 --> 00:34:34,250
an interesting challenge from an

00:34:32,300 --> 00:34:40,070
intellectual point of view that that's

00:34:34,250 --> 00:34:42,140
how I view programming so with the

00:34:40,070 --> 00:34:44,180
awareness of types and the difference

00:34:42,140 --> 00:34:45,680
between expressions and statements and

00:34:44,180 --> 00:34:50,840
the contrasting immutable immutable

00:34:45,680 --> 00:34:53,390
state and how inheritance can be used

00:34:50,840 --> 00:34:57,710
for modeling and how we also can use it

00:34:53,390 --> 00:35:00,590
like strangely for kind of incidental

00:34:57,710 --> 00:35:02,870
reuse sometimes you see and we discussed

00:35:00,590 --> 00:35:06,230
that and we discussed composition as an

00:35:02,870 --> 00:35:08,290
alternative and we contrast side

00:35:06,230 --> 00:35:10,490
affecting functions and try and

00:35:08,290 --> 00:35:12,940
referentially transparent functions and

00:35:10,490 --> 00:35:16,280
this is an important to understand why

00:35:12,940 --> 00:35:20,720
this is an issue to be able to do that

00:35:16,280 --> 00:35:25,850
in the same language and so all the kind

00:35:20,720 --> 00:35:28,040
of monadic stuff and things like that go

00:35:25,850 --> 00:35:29,600
come later in the curricula and there is

00:35:28,040 --> 00:35:32,380
a functional programming course which is

00:35:29,600 --> 00:35:32,380
taught in Haskell

00:35:33,190 --> 00:35:41,360
yeah

00:35:34,510 --> 00:35:43,810
the road ahead this has actually been a

00:35:41,360 --> 00:35:49,960
great success the CC students are really

00:35:43,810 --> 00:35:54,140
happy they feel privileged to be have to

00:35:49,960 --> 00:35:59,240
learn programming with a modern language

00:35:54,140 --> 00:36:02,210
and there is a really great interest to

00:35:59,240 --> 00:36:05,300
continue learn Scala but currently they

00:36:02,210 --> 00:36:06,680
can't really do it in later courses some

00:36:05,300 --> 00:36:08,300
of the courses are kind of language

00:36:06,680 --> 00:36:10,580
agnostic they can use whatever language

00:36:08,300 --> 00:36:12,710
they'd like but there is no real

00:36:10,580 --> 00:36:15,470
continuation in Scala that depends on

00:36:12,710 --> 00:36:17,780
the take up among my colleagues and if

00:36:15,470 --> 00:36:22,400
we if there are more that are interested

00:36:17,780 --> 00:36:25,600
in in learning and teaching Scala and I

00:36:22,400 --> 00:36:29,090
think that it's important that that that

00:36:25,600 --> 00:36:32,150
the the success and the example how you

00:36:29,090 --> 00:36:34,640
can make a progression can be used for

00:36:32,150 --> 00:36:36,350
other teachers both at my university and

00:36:34,640 --> 00:36:39,440
other universities and I hope that this

00:36:36,350 --> 00:36:41,810
will might be there are already several

00:36:39,440 --> 00:36:44,770
universities who teach and one is Mark

00:36:41,810 --> 00:36:49,460
Lewis University has written a really a

00:36:44,770 --> 00:36:53,000
nice blog post about what what it takes

00:36:49,460 --> 00:36:54,950
for scholar adoption in at universities

00:36:53,000 --> 00:36:58,700
and also some advice for industry people

00:36:54,950 --> 00:37:01,040
how they could help us when we discuss

00:36:58,700 --> 00:37:04,880
the different options in in first

00:37:01,040 --> 00:37:07,570
language etc and there is a debate

00:37:04,880 --> 00:37:13,370
ongoing now I think there is kind of

00:37:07,570 --> 00:37:17,780
momentum for Python much because of the

00:37:13,370 --> 00:37:20,450
data science approach and where Python

00:37:17,780 --> 00:37:23,230
is kind of a standard and I have some

00:37:20,450 --> 00:37:26,360
thoughts about that I think that they're

00:37:23,230 --> 00:37:30,590
very much that scholars going for it

00:37:26,360 --> 00:37:33,740
that we could emphasize here so how

00:37:30,590 --> 00:37:37,100
could we make it even better deal for

00:37:33,740 --> 00:37:40,040
beginner programmers yeah I think that

00:37:37,100 --> 00:37:43,230
we need high quality open-source

00:37:40,040 --> 00:37:46,320
beginner program teaching material

00:37:43,230 --> 00:37:48,840
and we need to make it kind of modular

00:37:46,320 --> 00:37:51,030
so that it can fit different kinds of

00:37:48,840 --> 00:37:53,540
progressions and I think this is this

00:37:51,030 --> 00:37:56,160
and everybody is working on beginner

00:37:53,540 --> 00:37:58,619
programmer material there's a lot of

00:37:56,160 --> 00:38:00,359
material if you have at least a certain

00:37:58,619 --> 00:38:04,980
level of proficiency with programming

00:38:00,359 --> 00:38:07,020
but going from beginning but for that's

00:38:04,980 --> 00:38:09,660
important to work on that material thing

00:38:07,020 --> 00:38:12,950
and I also would like to see a go to

00:38:09,660 --> 00:38:16,650
library that is as easy for beginners as

00:38:12,950 --> 00:38:17,310
pandas in our or some of the libraries

00:38:16,650 --> 00:38:18,510
in Python

00:38:17,310 --> 00:38:21,180
I think we should have it I think

00:38:18,510 --> 00:38:24,930
actually if data scientists would

00:38:21,180 --> 00:38:27,510
discover Scala from such a point of view

00:38:24,930 --> 00:38:30,210
that I can do interesting things

00:38:27,510 --> 00:38:33,240
and another don't need to dig into a lot

00:38:30,210 --> 00:38:35,970
of theory then I think it will be really

00:38:33,240 --> 00:38:39,390
cool and I also think that the scripting

00:38:35,970 --> 00:38:41,550
model we could improve that now I can't

00:38:39,390 --> 00:38:44,190
call the script from another script and

00:38:41,550 --> 00:38:46,680
it's kind of a second-class citizen the

00:38:44,190 --> 00:38:49,170
scholar scripts if you run a text file

00:38:46,680 --> 00:38:52,440
just using Scala I think that that can

00:38:49,170 --> 00:38:55,170
be improved and I think the video x4

00:38:52,440 --> 00:38:56,460
tools even with the IntelliJ is called a

00:38:55,170 --> 00:38:59,430
bundle I think we can do even more I

00:38:56,460 --> 00:39:06,840
would like to have one signed platform

00:38:59,430 --> 00:39:08,910
specific App Store available thing to

00:39:06,840 --> 00:39:11,580
click on and then I get all the stuff I

00:39:08,910 --> 00:39:13,859
need I want skull on terminal I want the

00:39:11,580 --> 00:39:17,970
Red Bull in terminal I wanted an editor

00:39:13,859 --> 00:39:22,050
I want the JVM I want an IDE in one

00:39:17,970 --> 00:39:24,990
click and that's for university level

00:39:22,050 --> 00:39:27,720
students for primary school students I

00:39:24,990 --> 00:39:29,910
think we need to focus on the browser

00:39:27,720 --> 00:39:33,750
because more and more I see schools kind

00:39:29,910 --> 00:39:36,390
of getting in the mode of a lockdown

00:39:33,750 --> 00:39:39,630
machine teachers can't install anything

00:39:36,390 --> 00:39:41,960
they only have the browser so the cool

00:39:39,630 --> 00:39:45,600
thing would be if we could run

00:39:41,960 --> 00:39:49,680
compilation in the browser compiling to

00:39:45,600 --> 00:39:52,080
local store as a Chrome App single

00:39:49,680 --> 00:39:53,670
install chrome app that would be cool so

00:39:52,080 --> 00:39:55,800
that you don't need to install anything

00:39:53,670 --> 00:39:58,540
on your machine and still program

00:39:55,800 --> 00:40:00,560
locally without being

00:39:58,540 --> 00:40:02,600
forced to have the network of the

00:40:00,560 --> 00:40:06,530
abdominal I think it would be really

00:40:02,600 --> 00:40:08,120
cool and I also think from scar three

00:40:06,530 --> 00:40:10,610
point of view and this I think is really

00:40:08,120 --> 00:40:12,620
important that scar three has some

00:40:10,610 --> 00:40:14,330
really nice things for beginners

00:40:12,620 --> 00:40:20,570
top-level definitions

00:40:14,330 --> 00:40:24,110
enums and I also like if-then-else so I

00:40:20,570 --> 00:40:26,420
see students sometimes mixing up if for

00:40:24,110 --> 00:40:29,990
function and their right if parentheses

00:40:26,420 --> 00:40:34,490
expression and it doesn't anything

00:40:29,990 --> 00:40:37,130
happen why is there not a return and so

00:40:34,490 --> 00:40:41,510
it's so even if it's small part I think

00:40:37,130 --> 00:40:43,670
it's actually good and some of the

00:40:41,510 --> 00:40:46,220
corner cases that we that end up in

00:40:43,670 --> 00:40:48,890
detail the unnecessary detail discussion

00:40:46,220 --> 00:40:51,800
of exceptions etc that that I think will

00:40:48,890 --> 00:40:53,600
be cleaned up but mainly I see anam

00:40:51,800 --> 00:40:56,900
top-level definitions as the thing and

00:40:53,600 --> 00:40:59,450
then I think this will affect the way we

00:40:56,900 --> 00:41:02,030
write typical scholar code for simple

00:40:59,450 --> 00:41:04,490
things so we should develop crisp

00:41:02,030 --> 00:41:06,440
examples of idioms so this is how you do

00:41:04,490 --> 00:41:10,940
a simple thing with a simple tool in

00:41:06,440 --> 00:41:14,810
Scala and it's very easy not to find the

00:41:10,940 --> 00:41:16,820
least powerful abstraction but if you go

00:41:14,810 --> 00:41:19,160
out there in Google you will find very

00:41:16,820 --> 00:41:24,040
powerful stuff that is not really cool

00:41:19,160 --> 00:41:28,210
for beginners so this picture was taken

00:41:24,040 --> 00:41:34,460
ten years ago now these kids are

00:41:28,210 --> 00:41:36,860
applying for University and they we

00:41:34,460 --> 00:41:38,660
really need more developers and we need

00:41:36,860 --> 00:41:41,150
to teach them programming and we need to

00:41:38,660 --> 00:41:43,010
show how we can use effectively a

00:41:41,150 --> 00:41:44,750
programming language to increase the

00:41:43,010 --> 00:41:46,880
learning outcome because of the power of

00:41:44,750 --> 00:41:49,880
the language so we should have a higher

00:41:46,880 --> 00:41:54,890
ambition in in in learning outcome and I

00:41:49,880 --> 00:41:57,290
think that many of the other ways of

00:41:54,890 --> 00:41:59,660
teaching programming could have had a

00:41:57,290 --> 00:42:01,700
higher ambition for the same great of

00:41:59,660 --> 00:42:02,680
the students with another language such

00:42:01,700 --> 00:42:06,560
as Scala

00:42:02,680 --> 00:42:08,160
so we have some time for questions I'm

00:42:06,560 --> 00:42:22,420
happy with

00:42:08,160 --> 00:42:24,579
thank you very much you've said that

00:42:22,420 --> 00:42:26,400
your students come from background where

00:42:24,579 --> 00:42:28,989
about a third haven't done any coding

00:42:26,400 --> 00:42:30,400
using scholar is the training language

00:42:28,989 --> 00:42:32,140
if you found that levels out the

00:42:30,400 --> 00:42:35,170
difference between the coders and the

00:42:32,140 --> 00:42:36,699
non coders yes to a large extent so the

00:42:35,170 --> 00:42:39,009
top language for the ones that I've

00:42:36,699 --> 00:42:40,150
coded this was this year the previous it

00:42:39,009 --> 00:42:43,059
used to be Java first

00:42:40,150 --> 00:42:48,160
now it's c-sharp Java Python JavaScript

00:42:43,059 --> 00:42:51,339
and and so if I wouldn't have had Scala

00:42:48,160 --> 00:42:53,650
I would have needed to kind of connect

00:42:51,339 --> 00:42:55,599
when I contrast things to some other

00:42:53,650 --> 00:42:57,459
language that can do the same thing in

00:42:55,599 --> 00:42:59,920
both languages but now I can take a new

00:42:57,459 --> 00:43:02,319
language I can develop a vocabulary for

00:42:59,920 --> 00:43:04,359
them in this language to contrast things

00:43:02,319 --> 00:43:06,249
and that's that and it's still exciting

00:43:04,359 --> 00:43:07,539
a new language and even if you have done

00:43:06,249 --> 00:43:09,429
something in another language you

00:43:07,539 --> 00:43:10,900
understand that oh I need to learn all

00:43:09,429 --> 00:43:12,579
these new stuff as well so you get into

00:43:10,900 --> 00:43:18,549
that mode and that I think is really

00:43:12,579 --> 00:43:20,679
important hi so before that just make

00:43:18,549 --> 00:43:22,809
sure that I understood correctly so the

00:43:20,679 --> 00:43:26,319
first course you use color and second

00:43:22,809 --> 00:43:29,259
cos you use Java yes okay then those

00:43:26,319 --> 00:43:31,119
students don't they have any difficulty

00:43:29,259 --> 00:43:33,729
with Java because you know once you move

00:43:31,119 --> 00:43:35,769
from Scala to Java you loses so many

00:43:33,729 --> 00:43:39,489
things inconvenient things from Scala

00:43:35,769 --> 00:43:41,170
right for comprehension and pattern

00:43:39,489 --> 00:43:44,729
matching and string interpolation and

00:43:41,170 --> 00:43:48,640
write so many things so yeah actually it

00:43:44,729 --> 00:43:51,219
when the first course was in Java they

00:43:48,640 --> 00:43:53,709
did worse than the second course so they

00:43:51,219 --> 00:43:55,420
kind of they had one week of Java

00:43:53,709 --> 00:43:57,249
contrast in the first course and then

00:43:55,420 --> 00:43:59,289
they just eat Java when they get there

00:43:57,249 --> 00:44:01,630
some of them are a bit frustrated that

00:43:59,289 --> 00:44:03,969
you can't do things in Java but that

00:44:01,630 --> 00:44:06,789
course focuses on abstract data types

00:44:03,969 --> 00:44:08,380
and things so they implement collections

00:44:06,789 --> 00:44:10,809
themselves and things like that so and

00:44:08,380 --> 00:44:13,900
they talk about recursion and they talk

00:44:10,809 --> 00:44:15,209
about complexity of algorithms things

00:44:13,900 --> 00:44:17,439
like that so there is a theoretical

00:44:15,209 --> 00:44:20,259
challenge in that course and the

00:44:17,439 --> 00:44:21,880
language is not really that important

00:44:20,259 --> 00:44:23,980
for that what you are going to

00:44:21,880 --> 00:44:27,520
learn in that course and they just eat

00:44:23,980 --> 00:44:28,930
Java like on the fly and and the result

00:44:27,520 --> 00:44:32,050
is actually much better and I think

00:44:28,930 --> 00:44:37,540
that's because they have been challenged

00:44:32,050 --> 00:44:41,550
how to learn programming so so there so

00:44:37,540 --> 00:44:46,060
I kind of used their high ambition to to

00:44:41,550 --> 00:44:47,830
to make themselves rise even the

00:44:46,060 --> 00:44:51,010
independent on where they came from

00:44:47,830 --> 00:44:52,270
yeah and I think that's a lot of course

00:44:51,010 --> 00:45:04,560
to do with the teaching and the students

00:44:52,270 --> 00:45:06,630
but also the language thank you hello

00:45:04,560 --> 00:45:09,040
you mentioned at some point that

00:45:06,630 --> 00:45:11,470
recursion you dropped and I found that

00:45:09,040 --> 00:45:13,390
interesting because usually like courses

00:45:11,470 --> 00:45:16,120
focus on functional programming well

00:45:13,390 --> 00:45:17,710
we'll put recursion as the the one thing

00:45:16,120 --> 00:45:20,200
that you have to learn and tail

00:45:17,710 --> 00:45:22,780
recursion is the growl and and these

00:45:20,200 --> 00:45:25,330
things and personally I think I think

00:45:22,780 --> 00:45:28,150
it's I really like the idea of not

00:45:25,330 --> 00:45:31,090
showing recursion at all but then could

00:45:28,150 --> 00:45:36,250
you elaborate on on what tools do you

00:45:31,090 --> 00:45:38,590
use for any kind of iterative for bulk

00:45:36,250 --> 00:45:41,830
operations do you only use higher order

00:45:38,590 --> 00:45:44,550
functions from collections or do you

00:45:41,830 --> 00:45:48,670
also introduce like imperative loops we

00:45:44,550 --> 00:45:51,340
so we we show recursion but it's the

00:45:48,670 --> 00:45:53,470
second course where you use recursion

00:45:51,340 --> 00:45:55,630
and develop recursion algorithms

00:45:53,470 --> 00:45:57,640
yourself so I show recursive later in

00:45:55,630 --> 00:46:00,460
the course but it's not the thing that I

00:45:57,640 --> 00:46:02,740
test on the exam so they know about the

00:46:00,460 --> 00:46:04,000
concept and I think that for the second

00:46:02,740 --> 00:46:06,010
course it would have been better if we

00:46:04,000 --> 00:46:08,650
had had a bit more recursion because

00:46:06,010 --> 00:46:10,270
it's a challenging concept that is good

00:46:08,650 --> 00:46:14,280
to take stepwise but you're right in

00:46:10,270 --> 00:46:16,510
this course recursion is not a big thing

00:46:14,280 --> 00:46:17,740
iteration is a big thing and we use

00:46:16,510 --> 00:46:19,840
higher order functions and for

00:46:17,740 --> 00:46:23,580
compression and wire loops and we

00:46:19,840 --> 00:46:27,610
contrast them so we use imperative

00:46:23,580 --> 00:46:29,800
iteration mainly in the beginning when

00:46:27,610 --> 00:46:31,510
we contrast it and then the students

00:46:29,800 --> 00:46:33,220
eventually tend to choose at least if

00:46:31,510 --> 00:46:35,710
they're beginners that tend to choose

00:46:33,220 --> 00:46:37,480
the the map or for

00:46:35,710 --> 00:46:40,720
the students that need that have done a

00:46:37,480 --> 00:46:43,090
lot of iterative iteration with the

00:46:40,720 --> 00:46:45,670
while loops they have a period will

00:46:43,090 --> 00:46:47,860
where they need to kind of map their

00:46:45,670 --> 00:46:50,530
understanding to the to the higher-order

00:46:47,860 --> 00:46:52,180
function way but then it's good that

00:46:50,530 --> 00:46:54,220
they can express what they're used to

00:46:52,180 --> 00:46:55,870
and that we can contrast because if I

00:46:54,220 --> 00:46:59,770
hadn't had a wire loop it would have

00:46:55,870 --> 00:47:03,040
been difficult to use this way of

00:46:59,770 --> 00:47:08,410
teaching where we contrast things so did

00:47:03,040 --> 00:47:18,580
I answer your question or okay one more

00:47:08,410 --> 00:47:21,400
I think I will put them early on the

00:47:18,580 --> 00:47:24,310
simple case with enum color red blue

00:47:21,400 --> 00:47:27,700
green because we have that already so I

00:47:24,310 --> 00:47:29,470
show them early on I say we will explain

00:47:27,700 --> 00:47:32,170
more about traits later it's straight

00:47:29,470 --> 00:47:34,000
color a case object red okay so big and

00:47:32,170 --> 00:47:36,070
they they eat that and they understand

00:47:34,000 --> 00:47:38,470
okay we need different colors and we can

00:47:36,070 --> 00:47:40,420
use that and it's and that's the first

00:47:38,470 --> 00:47:42,430
time they see inheritance I don't talk I

00:47:40,420 --> 00:47:44,980
only said that we want to be able to put

00:47:42,430 --> 00:47:47,050
many different kinds of things in the

00:47:44,980 --> 00:47:51,250
same collection so we need to be able to

00:47:47,050 --> 00:47:53,050
speak about why they are have a word for

00:47:51,250 --> 00:47:55,420
that they are same and color is the word

00:47:53,050 --> 00:47:56,980
that the colors are the same so that's

00:47:55,420 --> 00:47:59,200
how we do it at the beginning and it

00:47:56,980 --> 00:48:02,230
starts really sit but with enum it will

00:47:59,200 --> 00:48:05,080
be even more concise and not too concise

00:48:02,230 --> 00:48:07,660
I think that is important so we need we

00:48:05,080 --> 00:48:09,850
need if you're too silent like in

00:48:07,660 --> 00:48:11,680
Haskell you're the most silent about

00:48:09,850 --> 00:48:14,080
function application I think that can be

00:48:11,680 --> 00:48:17,620
confusing I think in in Python you are

00:48:14,080 --> 00:48:19,300
silent with beginning and token for

00:48:17,620 --> 00:48:20,860
blocks but that can be confusing in

00:48:19,300 --> 00:48:23,770
nested blocks I've seen that several

00:48:20,860 --> 00:48:25,300
times students that doesn't really

00:48:23,770 --> 00:48:27,280
understand the implication of a nested

00:48:25,300 --> 00:48:30,610
block with nice namespace etc because

00:48:27,280 --> 00:48:33,550
you never speak explicitly about with a

00:48:30,610 --> 00:48:36,010
token in the syntax so I think that I

00:48:33,550 --> 00:48:38,560
really like thank you very much for he

00:48:36,010 --> 00:48:41,680
knows I really like the the the simple

00:48:38,560 --> 00:48:44,940
versions in all color case and the comma

00:48:41,680 --> 00:48:47,710
between the cases it's just enough

00:48:44,940 --> 00:48:48,850
syntax and it's very concise so we will

00:48:47,710 --> 00:48:51,580
use it early on

00:48:48,850 --> 00:48:53,680
okay sorry to interrupt but if you have

00:48:51,580 --> 00:48:54,970
any further question please ask the

00:48:53,680 --> 00:48:57,190
microphone because everything is

00:48:54,970 --> 00:48:59,800
recorded it's very important it's for so

00:48:57,190 --> 00:49:05,650
audio recording thank you yeah so the

00:48:59,800 --> 00:49:07,380
question was thanks for repeating so I'm

00:49:05,650 --> 00:49:10,560
happy to talk with you during the breaks

00:49:07,380 --> 00:49:13,020
thank you very much

00:49:10,560 --> 00:49:13,020

YouTube URL: https://www.youtube.com/watch?v=ii_sC1TfpZY


