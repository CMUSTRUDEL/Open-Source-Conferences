Title: Techniques for Teaching Scala - Noel Welsh
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/techniques-for-teaching-scala
Captions: 
	00:00:00,030 --> 00:00:08,099
all right Bonjour hello thanks coming on

00:00:03,149 --> 00:00:10,860
to my talk my name is nour Welsh I work

00:00:08,099 --> 00:00:13,650
at two places which opposes Garda

00:00:10,860 --> 00:00:16,529
consultancies underscore which serves

00:00:13,650 --> 00:00:20,789
the UK and European market and in a

00:00:16,529 --> 00:00:23,430
product which is working in the US so

00:00:20,789 --> 00:00:24,689
this talk is about teaching SCADA I want

00:00:23,430 --> 00:00:27,510
to give you a little bit of background

00:00:24,689 --> 00:00:30,029
and motivation and then an overview of

00:00:27,510 --> 00:00:33,090
what's in the talk so let's start with

00:00:30,029 --> 00:00:34,110
where I started which was teaching Scala

00:00:33,090 --> 00:00:39,719
which I've done for about eight years

00:00:34,110 --> 00:00:42,660
now and I discovered from teaching Scala

00:00:39,719 --> 00:00:46,320
that speak language as I think we all

00:00:42,660 --> 00:00:47,579
know and it was difficult the first few

00:00:46,320 --> 00:00:50,570
times I did it had to find some

00:00:47,579 --> 00:00:53,699
structure in how I taught Scala

00:00:50,570 --> 00:00:54,960
not only was it like the the the content

00:00:53,699 --> 00:00:57,449
that we taught I was also the teaching

00:00:54,960 --> 00:00:59,789
itself which I realized was quite a

00:00:57,449 --> 00:01:00,870
distinct scale to programming although

00:00:59,789 --> 00:01:04,250
you may be a good programmer that

00:01:00,870 --> 00:01:06,840
doesn't mean you're a good teacher I

00:01:04,250 --> 00:01:08,670
think we've all had experience of

00:01:06,840 --> 00:01:10,830
teaching so if you pull someone off the

00:01:08,670 --> 00:01:12,000
street they may do a better job than if

00:01:10,830 --> 00:01:13,700
you pulled off the street and asked them

00:01:12,000 --> 00:01:16,170
to do some programming for example

00:01:13,700 --> 00:01:18,000
brother the floor is perhaps higher

00:01:16,170 --> 00:01:21,840
doesn't mean that the ceiling is lower

00:01:18,000 --> 00:01:25,619
there's still a lot of improvement you

00:01:21,840 --> 00:01:27,060
can do in your teaching the other thing

00:01:25,619 --> 00:01:30,299
is and I believe teaching is an

00:01:27,060 --> 00:01:35,009
undervalued skill in our industry this

00:01:30,299 --> 00:01:36,240
room should be full the reason I say

00:01:35,009 --> 00:01:38,130
that is I think the teaching is really

00:01:36,240 --> 00:01:39,360
central part of what a lot of us do in

00:01:38,130 --> 00:01:43,290
our jobs and we maybe don't appreciate

00:01:39,360 --> 00:01:45,479
that so if you're a senior developer

00:01:43,290 --> 00:01:47,070
it's probably an explicit part of your

00:01:45,479 --> 00:01:49,170
job description that you'll be teaching

00:01:47,070 --> 00:01:51,600
or mentoring juniors so something that

00:01:49,170 --> 00:01:52,829
you need to do to improve the output of

00:01:51,600 --> 00:01:56,490
your team improve the quality of your

00:01:52,829 --> 00:01:58,259
team and that's really your role there

00:01:56,490 --> 00:01:59,640
are other things where I think teaching

00:01:58,259 --> 00:02:01,770
is important for example Scala bridge

00:01:59,640 --> 00:02:02,850
where we teach people who are

00:02:01,770 --> 00:02:04,829
underrepresented in the tech community

00:02:02,850 --> 00:02:06,030
to try to get them into the Scala

00:02:04,829 --> 00:02:09,030
community and I think that's a very

00:02:06,030 --> 00:02:11,410
valuable thing that we're doing and

00:02:09,030 --> 00:02:13,480
finally

00:02:11,410 --> 00:02:15,310
we teach ourselves in streets constantly

00:02:13,480 --> 00:02:17,580
changing new things happening to our

00:02:15,310 --> 00:02:21,300
Scala 3 coming out next year for example

00:02:17,580 --> 00:02:21,300
and so we ready in time

00:02:22,470 --> 00:02:39,540
sure ok I'll just keep talking for a

00:02:36,730 --> 00:02:42,870
little bit so the skills for teaching

00:02:39,540 --> 00:02:45,040
actually very useful for learning and so

00:02:42,870 --> 00:02:46,480
you need somebody skills we can use them

00:02:45,040 --> 00:02:47,860
for teaching ourselves for learning the

00:02:46,480 --> 00:02:51,520
new things we need to learn to stay

00:02:47,860 --> 00:02:53,650
relevant as a developer so my talk I'm

00:02:51,520 --> 00:02:57,310
going to cover five tips for teaching I

00:02:53,650 --> 00:02:59,560
try to make these all very actionable

00:02:57,310 --> 00:03:00,760
things you can take away straight away

00:02:59,560 --> 00:03:03,130
and then use in your own teaching

00:03:00,760 --> 00:03:04,870
teaching a scholar and then I'm going to

00:03:03,130 --> 00:03:06,910
give you five further resources where

00:03:04,870 --> 00:03:09,940
you can go to get more information if

00:03:06,910 --> 00:03:11,800
you're interested in exploring further a

00:03:09,940 --> 00:03:13,900
little bit more structure what we're

00:03:11,800 --> 00:03:15,340
talking about here so the first thing

00:03:13,900 --> 00:03:16,690
when people talk about teaching

00:03:15,340 --> 00:03:18,400
programming on the Internet is I always

00:03:16,690 --> 00:03:19,960
argue over language choice and you see

00:03:18,400 --> 00:03:21,310
people saying you should be using Python

00:03:19,960 --> 00:03:21,910
or you should be using javascript that

00:03:21,310 --> 00:03:25,210
kind of thing

00:03:21,910 --> 00:03:26,410
well I have opinions on that myself but

00:03:25,210 --> 00:03:28,660
this talk is a given that we're talking

00:03:26,410 --> 00:03:30,580
about Scala my opinion is that

00:03:28,660 --> 00:03:32,140
functional programming is much simpler

00:03:30,580 --> 00:03:34,810
model it should use if you're teaching

00:03:32,140 --> 00:03:37,180
beginners but it's not ready relevant to

00:03:34,810 --> 00:03:40,810
this talk so I will be focusing on

00:03:37,180 --> 00:03:43,630
instead is curriculum which is what you

00:03:40,810 --> 00:03:46,450
teach and pedagogy which is how you

00:03:43,630 --> 00:03:48,310
teach it okay so those are the two main

00:03:46,450 --> 00:03:51,220
things I want to talk about so let's get

00:03:48,310 --> 00:03:53,740
into it so 5 tips for teaching and tip

00:03:51,220 --> 00:03:56,740
number one is this idea of a notional

00:03:53,740 --> 00:03:58,660
machine possibly something haven't heard

00:03:56,740 --> 00:04:01,900
of before so let's get in and describe

00:03:58,660 --> 00:04:03,040
what that is so teaching an OSHA machine

00:04:01,900 --> 00:04:04,930
is something you need to do particularly

00:04:03,040 --> 00:04:07,150
for beginners and it's a difference

00:04:04,930 --> 00:04:09,010
between giving them understanding our

00:04:07,150 --> 00:04:11,980
model they can understand our code and

00:04:09,010 --> 00:04:13,810
work with or what we call cargo coaching

00:04:11,980 --> 00:04:15,310
so basically copying and pasting code

00:04:13,810 --> 00:04:17,950
without any real understanding and when

00:04:15,310 --> 00:04:20,200
I look at a lot of the online resources

00:04:17,950 --> 00:04:22,419
for learning at code I see a lot of what

00:04:20,200 --> 00:04:24,490
I think is falling into the cargo

00:04:22,419 --> 00:04:28,910
Coltrane's

00:04:24,490 --> 00:04:32,480
it's an area where people are not being

00:04:28,910 --> 00:04:33,950
given a model of the machine so they

00:04:32,480 --> 00:04:35,210
can't really understand what the code is

00:04:33,950 --> 00:04:38,420
doing they're just copying and pasting

00:04:35,210 --> 00:04:41,180
and making small tweaks so a notional

00:04:38,420 --> 00:04:44,360
machine is some kind of simplified or

00:04:41,180 --> 00:04:48,080
abstract machine model that explains the

00:04:44,360 --> 00:04:49,400
programming language semantics when you

00:04:48,080 --> 00:04:50,660
hear that you probably think of

00:04:49,400 --> 00:04:52,220
something like that like I sort of

00:04:50,660 --> 00:04:54,860
register machine or something as a stack

00:04:52,220 --> 00:04:56,150
you know you have a simplify CPU it just

00:04:54,860 --> 00:04:58,010
doesn't call stack and that kind of

00:04:56,150 --> 00:05:00,590
thing but in functional programming

00:04:58,010 --> 00:05:04,820
there's much simpler machine we can use

00:05:00,590 --> 00:05:09,020
and that is substitution so what is

00:05:04,820 --> 00:05:12,920
substitution let's have a look so say we

00:05:09,020 --> 00:05:15,880
have this expression I ask this

00:05:12,920 --> 00:05:18,919
occasionally at various different places

00:05:15,880 --> 00:05:20,840
can anyone tell me what a plus a is

00:05:18,919 --> 00:05:23,150
going to be sometimes you get good

00:05:20,840 --> 00:05:24,650
responses sometimes we don't let me say

00:05:23,150 --> 00:05:26,030
they're very recent answers in the US

00:05:24,650 --> 00:05:28,010
but let me show the European education

00:05:26,030 --> 00:05:31,550
system is much better you can tell me a

00:05:28,010 --> 00:05:33,560
plus a is yes - okay and how do we know

00:05:31,550 --> 00:05:35,660
that we know that because we can

00:05:33,560 --> 00:05:40,070
basically substitution whenever we see a

00:05:35,660 --> 00:05:43,220
name yeah we can substitute in the value

00:05:40,070 --> 00:05:45,620
that it is bound to so we see a we can

00:05:43,220 --> 00:05:47,180
substitute in one when you get 1 plus 1

00:05:45,620 --> 00:05:50,330
and then as we know from primary school

00:05:47,180 --> 00:05:52,700
one plus one gives us two ok and we can

00:05:50,330 --> 00:05:55,040
do the same thing would you go for B

00:05:52,700 --> 00:05:58,250
times B we have the name here bounds of

00:05:55,040 --> 00:06:01,520
value to substitute in 2 times 2 and of

00:05:58,250 --> 00:06:02,479
course we get 4 right so that's very

00:06:01,520 --> 00:06:04,310
simple

00:06:02,479 --> 00:06:06,770
you know that's primary school stuff so

00:06:04,310 --> 00:06:08,570
what what's the big deal the big deal is

00:06:06,770 --> 00:06:11,300
you can extend this much further you can

00:06:08,570 --> 00:06:13,040
do substitution for methods so with a

00:06:11,300 --> 00:06:15,850
method you're just substituting in the

00:06:13,040 --> 00:06:20,570
parameters renaming the parameters and

00:06:15,850 --> 00:06:22,280
if necessary depending on scoping anyway

00:06:20,570 --> 00:06:24,110
you can go so but if you have a method

00:06:22,280 --> 00:06:26,300
call you can substitute in the method

00:06:24,110 --> 00:06:30,110
body substitute in the parameters for

00:06:26,300 --> 00:06:33,110
the values they take and just go do it

00:06:30,110 --> 00:06:34,550
so it works for method calls it works

00:06:33,110 --> 00:06:37,009
for types as well you can perform

00:06:34,550 --> 00:06:39,860
substitution at the type level so

00:06:37,009 --> 00:06:42,199
you have like a list list a and then you

00:06:39,860 --> 00:06:44,240
use int you have a list into you can

00:06:42,199 --> 00:06:47,539
substitute in for a and do that

00:06:44,240 --> 00:06:51,680
consistently and in fact words anywhere

00:06:47,539 --> 00:06:53,960
that you have pure code so as long as

00:06:51,680 --> 00:06:57,949
you don't introduce state substitution

00:06:53,960 --> 00:07:00,080
is going to work that's nice and the

00:06:57,949 --> 00:07:01,939
other point is it's really easy I

00:07:00,080 --> 00:07:03,680
suspect some of you looking at this

00:07:01,939 --> 00:07:05,659
these slides and going why am I telling

00:07:03,680 --> 00:07:08,300
you about substitution it's so obvious

00:07:05,659 --> 00:07:09,620
that is 100 percent the point the point

00:07:08,300 --> 00:07:10,699
is is easy we don't want to do

00:07:09,620 --> 00:07:12,199
complicated things

00:07:10,699 --> 00:07:13,909
why do complicated things like

00:07:12,199 --> 00:07:15,889
introducing register machines and stack

00:07:13,909 --> 00:07:17,719
so you have to maintain when you could

00:07:15,889 --> 00:07:19,669
do something easy substitution which you

00:07:17,719 --> 00:07:23,149
learned about in primary school that's

00:07:19,669 --> 00:07:25,249
100 percent the point and for me

00:07:23,149 --> 00:07:26,870
substitution not just the point of using

00:07:25,249 --> 00:07:28,669
it as a notional model but it's really

00:07:26,870 --> 00:07:30,680
the point of entire functional

00:07:28,669 --> 00:07:32,089
programming enterprise it's the

00:07:30,680 --> 00:07:34,699
intellectual basis about everything

00:07:32,089 --> 00:07:36,770
rests on so that's why we care about

00:07:34,699 --> 00:07:38,809
immutability we don't care about

00:07:36,770 --> 00:07:40,369
immutability for its own sake we don't

00:07:38,809 --> 00:07:41,749
make code immutable just so we can say

00:07:40,369 --> 00:07:43,789
it's immutable we care about

00:07:41,749 --> 00:07:46,749
immutability because it means we can use

00:07:43,789 --> 00:07:50,240
substitution as a reasoning principle

00:07:46,749 --> 00:07:52,459
and similarly that's why we care about

00:07:50,240 --> 00:07:54,620
things like monads for example why do we

00:07:52,459 --> 00:07:57,349
model effects using ma nodes because I

00:07:54,620 --> 00:08:00,610
allow us to maintain substitution up to

00:07:57,349 --> 00:08:03,379
the point where we run them on add so

00:08:00,610 --> 00:08:05,719
when I think of substitution for me this

00:08:03,379 --> 00:08:07,729
is really the entire point of functional

00:08:05,719 --> 00:08:09,589
programming it's maintaining this really

00:08:07,729 --> 00:08:12,139
really simple model this primary school

00:08:09,589 --> 00:08:13,610
level model of reasoning about code in

00:08:12,139 --> 00:08:15,919
the face of all the complexities that

00:08:13,610 --> 00:08:20,749
real code has that's why we care about

00:08:15,919 --> 00:08:22,639
it so substitution is yes very simple

00:08:20,749 --> 00:08:24,860
that's that is 100% the point but it

00:08:22,639 --> 00:08:26,419
really is to me the whole thing that

00:08:24,860 --> 00:08:28,159
underlies functional programming that's

00:08:26,419 --> 00:08:30,019
why we care about these things so we can

00:08:28,159 --> 00:08:31,849
use this really simple tool of reasoning

00:08:30,019 --> 00:08:33,819
to reason about really complicated

00:08:31,849 --> 00:08:40,830
programs

00:08:33,819 --> 00:08:43,919
all right so substitution okay

00:08:40,830 --> 00:08:45,149
now tip number two this is programming

00:08:43,919 --> 00:08:48,660
strategies this is something that I

00:08:45,149 --> 00:08:51,000
think is quite unique to how we teach

00:08:48,660 --> 00:08:53,730
programming so you probably won't find

00:08:51,000 --> 00:08:55,830
this anywhere else pay attention if

00:08:53,730 --> 00:08:58,079
you're not already

00:08:55,830 --> 00:08:59,850
the idea behind programming strategies

00:08:58,079 --> 00:09:03,329
if we can make programming into a

00:08:59,850 --> 00:09:04,980
systematic and repeatable activity so

00:09:03,329 --> 00:09:06,899
this means that students or indeed

00:09:04,980 --> 00:09:09,630
anyone I use these strategies myself in

00:09:06,899 --> 00:09:11,880
my programming have a well-defined

00:09:09,630 --> 00:09:16,440
process to take them from a problem to a

00:09:11,880 --> 00:09:19,380
solution it's something I I really saw

00:09:16,440 --> 00:09:21,630
people struggle with in introductory

00:09:19,380 --> 00:09:23,130
courses while I learn programming in my

00:09:21,630 --> 00:09:25,470
undergraduate with the first language we

00:09:23,130 --> 00:09:28,290
use we'll see I came in having done

00:09:25,470 --> 00:09:30,180
quite a few years of Pascal programming

00:09:28,290 --> 00:09:32,490
already so I was used to how things

00:09:30,180 --> 00:09:33,860
worked but I really saw that my fellow

00:09:32,490 --> 00:09:35,820
students didn't have that background

00:09:33,860 --> 00:09:37,589
didn't understand how to take the

00:09:35,820 --> 00:09:39,390
language constructs they were taught to

00:09:37,589 --> 00:09:41,970
actually solve the problems they were

00:09:39,390 --> 00:09:44,490
given so there wasn't a link between the

00:09:41,970 --> 00:09:46,770
thing the language constructs and the

00:09:44,490 --> 00:09:51,060
problem solving and program strategies

00:09:46,770 --> 00:09:53,579
provide this this bridge for us they're

00:09:51,060 --> 00:09:55,410
like design patterns that are different

00:09:53,579 --> 00:09:57,089
in in in number of ways the wider in

00:09:55,410 --> 00:09:58,649
scope and we talked about we're not just

00:09:57,089 --> 00:10:01,140
talking about the design things and

00:09:58,649 --> 00:10:05,220
they're also a more formal more kind of

00:10:01,140 --> 00:10:06,720
formulaic more systematic we've

00:10:05,220 --> 00:10:09,180
identified ten strategies I'm gonna

00:10:06,720 --> 00:10:11,250
focus on three here and those strategies

00:10:09,180 --> 00:10:13,560
are had a great day to have structural

00:10:11,250 --> 00:10:17,250
corrosion and following types I'm just

00:10:13,560 --> 00:10:18,899
kind of interested who's heard these top

00:10:17,250 --> 00:10:21,110
two terms for algebraic data types in

00:10:18,899 --> 00:10:24,060
structural and or structural recursion

00:10:21,110 --> 00:10:25,199
okay a lot of hands going up okay so

00:10:24,060 --> 00:10:28,529
this will be interesting to see if it

00:10:25,199 --> 00:10:31,829
matches your understanding let's go on

00:10:28,529 --> 00:10:33,149
to algebraic data types the key idea

00:10:31,829 --> 00:10:35,790
with algebraic data types is that

00:10:33,149 --> 00:10:39,420
whenever the data is described in terms

00:10:35,790 --> 00:10:41,699
of a logical hand or a logical or and

00:10:39,420 --> 00:10:43,800
once you've got the data description the

00:10:41,699 --> 00:10:47,550
code implements that follows immediately

00:10:43,800 --> 00:10:51,290
an entirely formulaic way so let's see

00:10:47,550 --> 00:10:54,999
what I mean go to example if a has a B

00:10:51,290 --> 00:10:58,970
and a C then we can immediately write

00:10:54,999 --> 00:11:01,490
final case class Hey had to be and I see

00:10:58,970 --> 00:11:06,470
right that's the direct encoding in

00:11:01,490 --> 00:11:08,720
Scala in Scala - of this statement

00:11:06,470 --> 00:11:10,730
because differently scarlet 3 we got

00:11:08,720 --> 00:11:13,220
enum if you want to know why your case

00:11:10,730 --> 00:11:14,540
classes should be final I'll be the

00:11:13,220 --> 00:11:21,110
handsome gentleman and the audience a

00:11:14,540 --> 00:11:24,559
I'll be telling you at his talk but

00:11:21,110 --> 00:11:27,019
similarly if you have a is a B over C

00:11:24,559 --> 00:11:28,430
and the way you can code out in Scala

00:11:27,019 --> 00:11:31,819
you know how she have a few little

00:11:28,430 --> 00:11:33,410
options but seal trait and then two case

00:11:31,819 --> 00:11:35,420
classes you're standing at you could use

00:11:33,410 --> 00:11:36,769
a I can sealed abstract class you get

00:11:35,420 --> 00:11:40,879
basically the same thing it's not always

00:11:36,769 --> 00:11:43,639
talking about the difference again

00:11:40,879 --> 00:11:48,529
that's the direct encoding in Scala of

00:11:43,639 --> 00:11:52,279
that statement so let's in example if we

00:11:48,529 --> 00:11:54,170
say a list is a pair or empty well we

00:11:52,279 --> 00:11:55,910
have this logical over here so that we

00:11:54,170 --> 00:11:57,649
know we need to use that or pattern or

00:11:55,910 --> 00:11:59,600
we can merely write down to the right

00:11:57,649 --> 00:12:01,430
list final Coast Guard P extends list

00:11:59,600 --> 00:12:05,059
for our case class empty extends list

00:12:01,430 --> 00:12:07,610
now it's just taking the pattern we had

00:12:05,059 --> 00:12:12,620
earlier and substituting in list pair

00:12:07,610 --> 00:12:16,519
and empty for a B and C let's say a pair

00:12:12,620 --> 00:12:20,360
has a head and a tail and we have the

00:12:16,519 --> 00:12:23,209
logical end here and we just go and use

00:12:20,360 --> 00:12:25,420
the and pattern we saw earlier head and

00:12:23,209 --> 00:12:28,670
tail and we need to put types on this

00:12:25,420 --> 00:12:31,069
sort of say head as a type of a and tail

00:12:28,670 --> 00:12:32,720
has a type of list a and we need to do a

00:12:31,069 --> 00:12:35,689
little bit more well need to introduce

00:12:32,720 --> 00:12:38,779
the type variable and then we have hair

00:12:35,689 --> 00:12:44,540
to type a and title of list a so it's

00:12:38,779 --> 00:12:45,319
all very formulaic you might be looking

00:12:44,540 --> 00:12:47,120
this and going

00:12:45,319 --> 00:12:49,189
could this not be covariant yes it could

00:12:47,120 --> 00:12:51,279
be I've just gone for simplicity here I

00:12:49,189 --> 00:12:53,470
don't want to explain to a variance and

00:12:51,279 --> 00:12:56,809
invariance some other kind of stuff so

00:12:53,470 --> 00:12:58,730
if you're wondering that that's what I'm

00:12:56,809 --> 00:13:00,230
doing if you're not wondering that

00:12:58,730 --> 00:13:02,720
that's absolutely fine you don't need to

00:13:00,230 --> 00:13:05,379
know about you talk about covariance and

00:13:02,720 --> 00:13:08,979
that kind of stuff all right

00:13:05,379 --> 00:13:09,879
so this is waving me up to drive this

00:13:08,979 --> 00:13:11,619
data structure

00:13:09,879 --> 00:13:13,509
she's very similar to the built-in list

00:13:11,619 --> 00:13:15,849
in Scala just directly from that

00:13:13,509 --> 00:13:17,470
description all of this code follows

00:13:15,849 --> 00:13:21,849
immediately from the description we were

00:13:17,470 --> 00:13:24,129
given no thinking required let's move on

00:13:21,849 --> 00:13:25,989
structural corrosion so structural

00:13:24,129 --> 00:13:27,699
question is in some ways of inverse of

00:13:25,989 --> 00:13:29,829
algebraic data types algebraic data

00:13:27,699 --> 00:13:31,599
types are about building data the

00:13:29,829 --> 00:13:33,699
structural recursion is about

00:13:31,599 --> 00:13:35,829
transforming an algebraic data type or

00:13:33,699 --> 00:13:38,739
kind of tearing it down and maybe

00:13:35,829 --> 00:13:42,279
building something new and the rule here

00:13:38,739 --> 00:13:43,779
is any transformation you want to write

00:13:42,279 --> 00:13:45,729
on an algebraic data type can be

00:13:43,779 --> 00:13:47,889
expressed using structural recursion

00:13:45,729 --> 00:13:49,989
that's not saying you have to express it

00:13:47,889 --> 00:13:51,939
using structural recursion there may be

00:13:49,989 --> 00:13:54,639
some helper methods like you know map

00:13:51,939 --> 00:13:57,309
and so on that do a job or simply for

00:13:54,639 --> 00:13:59,679
you but you can use structure recursion

00:13:57,309 --> 00:14:02,109
to do this this is great for like junior

00:13:59,679 --> 00:14:03,309
developers I don't know the API yet or

00:14:02,109 --> 00:14:04,509
they can just kind of bang out curry and

00:14:03,309 --> 00:14:06,399
get something working and then you can

00:14:04,509 --> 00:14:10,389
help them clean it up make it a little

00:14:06,399 --> 00:14:12,279
bit shorter use more of the built-ins so

00:14:10,389 --> 00:14:14,769
okay that's nice what a structural

00:14:12,279 --> 00:14:16,839
recursion well two ways to implement it

00:14:14,769 --> 00:14:19,509
in scala this has been no skyline many

00:14:16,839 --> 00:14:23,279
ways to do things and we can do in terms

00:14:19,509 --> 00:14:25,479
of pattern matching or polymorphism I

00:14:23,279 --> 00:14:27,009
don't want to show both it takes too

00:14:25,479 --> 00:14:28,629
much space and anything could be really

00:14:27,009 --> 00:14:30,999
useful to you so I'm just going to

00:14:28,629 --> 00:14:33,729
choose pattern matching for my examples

00:14:30,999 --> 00:14:35,619
she's probably more idiomatic in an SP

00:14:33,729 --> 00:14:37,959
world sometimes people from our

00:14:35,619 --> 00:14:39,249
background thirties polymorphism you get

00:14:37,959 --> 00:14:40,600
the same goal there's slightly different

00:14:39,249 --> 00:14:42,850
trade-offs for the for the two of them

00:14:40,600 --> 00:14:45,029
it's not really that important for this

00:14:42,850 --> 00:14:51,759
discussion

00:14:45,029 --> 00:14:53,679
so structural corrosion has two patterns

00:14:51,759 --> 00:14:55,809
which match the two patterns we saw for

00:14:53,679 --> 00:14:58,509
algebraic data types patterns are all

00:14:55,809 --> 00:15:02,109
under patent for the and so when we say

00:14:58,509 --> 00:15:04,329
when a is a B or C well we just need to

00:15:02,109 --> 00:15:06,220
handle those cases you have a we match

00:15:04,329 --> 00:15:09,249
on it we could say we're going to do if

00:15:06,220 --> 00:15:10,720
it's B what are we gonna do if it's C so

00:15:09,249 --> 00:15:13,269
the structural corrosion gives us all of

00:15:10,720 --> 00:15:14,990
this left-hand side here and then the

00:15:13,269 --> 00:15:17,550
right-hand side it's a question

00:15:14,990 --> 00:15:18,810
this is the problem specific parts they

00:15:17,550 --> 00:15:20,910
did that we have to figure out for

00:15:18,810 --> 00:15:22,950
ourselves unfortunately actually a

00:15:20,910 --> 00:15:26,670
little bit of thinking Joy's disappoints

00:15:22,950 --> 00:15:29,040
me then the other component we need to

00:15:26,670 --> 00:15:32,100
answer is if we have to add a patent a

00:15:29,040 --> 00:15:34,860
has a B and a C well then in that case

00:15:32,100 --> 00:15:36,600
we pull the B and the C out and maybe we

00:15:34,860 --> 00:15:38,820
use it on the right-hand side here so

00:15:36,600 --> 00:15:40,320
those are the two patterns that match

00:15:38,820 --> 00:15:44,340
the two tabs that are jebaited data type

00:15:40,320 --> 00:15:45,870
and in all very simple stuff it's one

00:15:44,340 --> 00:15:48,000
important thing we need to add in here

00:15:45,870 --> 00:15:49,830
and that's the case in recursion so we

00:15:48,000 --> 00:15:52,470
get the structural recursion name from

00:15:49,830 --> 00:15:55,260
it tells us when the data is recursive

00:15:52,470 --> 00:15:56,580
then the method is also recursive this

00:15:55,260 --> 00:16:00,930
gives us a little bit on the right-hand

00:15:56,580 --> 00:16:03,810
side for free so for example when we

00:16:00,930 --> 00:16:06,030
talked about the list we saw the tail

00:16:03,810 --> 00:16:08,460
here tail is a list so it's the way the

00:16:06,030 --> 00:16:12,480
data is recursive so for writing

00:16:08,460 --> 00:16:15,660
structural Kuragin on a list we know

00:16:12,480 --> 00:16:19,640
that we're going to have recursion here

00:16:15,660 --> 00:16:22,410
on the right-hand side so all of this

00:16:19,640 --> 00:16:24,840
code comes directly from the structural

00:16:22,410 --> 00:16:27,180
recursion skeleton it's not something

00:16:24,840 --> 00:16:29,100
that the author has you don't think

00:16:27,180 --> 00:16:30,510
about when you're writing this all you

00:16:29,100 --> 00:16:33,150
need to do or work out what the base

00:16:30,510 --> 00:16:35,310
cases and this kind of increment a bit

00:16:33,150 --> 00:16:38,670
the recursion is given to you something

00:16:35,310 --> 00:16:41,190
that people allegedly struggle with in

00:16:38,670 --> 00:16:42,570
programming is recursion structural code

00:16:41,190 --> 00:16:43,950
you don't have to struggle this program

00:16:42,570 --> 00:16:46,290
you don't you have to think about it it

00:16:43,950 --> 00:16:48,330
comes directly from the pattern all you

00:16:46,290 --> 00:16:49,950
have to think about here is what's the

00:16:48,330 --> 00:16:52,940
little step you need to do to take from

00:16:49,950 --> 00:16:58,380
the recursion to go to the next answer

00:16:52,940 --> 00:17:00,450
so it's very simple still we do have

00:16:58,380 --> 00:17:03,150
bits that we need to figure out

00:17:00,450 --> 00:17:05,700
ourselves these question marks and so

00:17:03,150 --> 00:17:07,110
how do we complete these and that's

00:17:05,700 --> 00:17:09,750
where the final pattern comes in

00:17:07,110 --> 00:17:12,530
following the types this is another tool

00:17:09,750 --> 00:17:14,850
we can use to guide us to a solution

00:17:12,530 --> 00:17:17,730
just in the way that the force guided

00:17:14,850 --> 00:17:20,100
Luke to destroying the Death Star we can

00:17:17,730 --> 00:17:22,770
use the type to guide us to destroy our

00:17:20,100 --> 00:17:24,940
programming problems and the way we

00:17:22,770 --> 00:17:26,590
follow the types as we work out

00:17:24,940 --> 00:17:29,080
what is the goal what's the type that

00:17:26,590 --> 00:17:31,270
we're trying to generate what is

00:17:29,080 --> 00:17:33,550
available weather what are the things we

00:17:31,270 --> 00:17:35,380
have in scope that we can use and then

00:17:33,550 --> 00:17:37,660
we basically just assemble this jigsaw

00:17:35,380 --> 00:17:39,310
this pathway through the types so you've

00:17:37,660 --> 00:17:41,080
probably done this before this is just

00:17:39,310 --> 00:17:43,600
giving a name and a bit of a formal

00:17:41,080 --> 00:17:46,120
process or something you I suspect most

00:17:43,600 --> 00:17:48,880
of you have already done so let's take a

00:17:46,120 --> 00:17:52,390
look at map say you know I've tasked him

00:17:48,880 --> 00:17:54,430
from a map on list this type signature

00:17:52,390 --> 00:17:57,370
just comes from Matt this is given this

00:17:54,430 --> 00:17:58,780
may given that's what map is a first

00:17:57,370 --> 00:18:00,930
thing to notice is we're transforming an

00:17:58,780 --> 00:18:04,030
algebraic date type so immediately

00:18:00,930 --> 00:18:06,370
structural collision bank we gave this

00:18:04,030 --> 00:18:09,730
straight away now he's got one thing

00:18:06,370 --> 00:18:11,980
here got the recursion at all so in fact

00:18:09,730 --> 00:18:14,260
we can get this we know we got recursion

00:18:11,980 --> 00:18:16,720
here and now we need to do fill out the

00:18:14,260 --> 00:18:19,660
question marks now we're ready to follow

00:18:16,720 --> 00:18:22,290
the types so let's look at the empty

00:18:19,660 --> 00:18:27,700
case first because it's a simple one

00:18:22,290 --> 00:18:30,190
first thing is to find the goal and the

00:18:27,700 --> 00:18:32,470
goal is given by the return type here

00:18:30,190 --> 00:18:35,350
used to be so that's like I'll make a

00:18:32,470 --> 00:18:37,810
note as that call is this to be let me

00:18:35,350 --> 00:18:41,560
say okay what do we have available to

00:18:37,810 --> 00:18:46,180
you quickly and we see in scope we have

00:18:41,560 --> 00:18:49,120
F let's make sure one from A to B and we

00:18:46,180 --> 00:18:50,590
also have the constructors if you can

00:18:49,120 --> 00:18:53,140
forget the Constructors always in scope

00:18:50,590 --> 00:18:56,380
and they have these types empty case

00:18:53,140 --> 00:18:59,860
yesterday there's a list a list a list a

00:18:56,380 --> 00:19:02,020
I mean look at this I mean look at the

00:18:59,860 --> 00:19:03,700
tribe so we want to get a list of B well

00:19:02,020 --> 00:19:06,460
we have nothing of type a to applies

00:19:03,700 --> 00:19:07,990
function to so we can't use it we can't

00:19:06,460 --> 00:19:10,480
use pair similarly because we don't have

00:19:07,990 --> 00:19:13,540
anything of type a the only thing we can

00:19:10,480 --> 00:19:16,330
do is call this constructor that's the

00:19:13,540 --> 00:19:19,030
only possible thing we can do so in this

00:19:16,330 --> 00:19:20,800
case that's what we have to do and he

00:19:19,030 --> 00:19:22,900
goes in there we can't write this code

00:19:20,800 --> 00:19:27,280
incorrectly the types make it impossible

00:19:22,900 --> 00:19:29,410
for us to get this case wrong now let's

00:19:27,280 --> 00:19:32,110
look at the pair case once again got the

00:19:29,410 --> 00:19:34,900
same goal is to be what's available

00:19:32,110 --> 00:19:36,299
well we have F again we have the

00:19:34,900 --> 00:19:38,099
constructors

00:19:36,299 --> 00:19:40,379
and here we have some additional

00:19:38,099 --> 00:19:44,519
information she the head the tail and

00:19:40,379 --> 00:19:48,659
that recursive call so put those in as

00:19:44,519 --> 00:19:52,769
well head a tail list a and how an apple

00:19:48,659 --> 00:19:56,539
is to be now we have a few choices here

00:19:52,769 --> 00:20:00,209
we could in this case implement it in

00:19:56,539 --> 00:20:01,529
three different ways we could return

00:20:00,209 --> 00:20:02,669
empty which is probably the right seems

00:20:01,529 --> 00:20:05,099
like the wrong thing we could return

00:20:02,669 --> 00:20:07,589
just list a B which probably is the

00:20:05,099 --> 00:20:09,690
wrong thing as well but what we can do

00:20:07,589 --> 00:20:12,509
make that sort of the biggest result we

00:20:09,690 --> 00:20:14,820
can make we know that we have firstly

00:20:12,509 --> 00:20:19,440
head of type a and we have F which is

00:20:14,820 --> 00:20:23,399
goes H B where we can apply a this

00:20:19,440 --> 00:20:27,809
function getting a new value of type B

00:20:23,399 --> 00:20:31,709
and then we can put this value of type B

00:20:27,809 --> 00:20:35,519
and the cursor bit into pair to produce

00:20:31,709 --> 00:20:35,999
a list of type B and that is the correct

00:20:35,519 --> 00:20:38,219
solution

00:20:35,999 --> 00:20:40,950
the final bit we're left with is just

00:20:38,219 --> 00:20:43,440
this cursor call what goes in here the

00:20:40,950 --> 00:20:46,829
parameter or just go to it very quickly

00:20:43,440 --> 00:20:49,409
the goal here is given it we need to

00:20:46,829 --> 00:20:52,289
type the function from A to B and we

00:20:49,409 --> 00:20:55,349
only have one available there we go

00:20:52,289 --> 00:20:57,989
we're done so that's how the types guide

00:20:55,349 --> 00:20:59,429
us to implementing this function it's a

00:20:57,989 --> 00:21:00,450
very simple example because I wanted

00:20:59,429 --> 00:21:01,950
something shifts on the slide is

00:21:00,450 --> 00:21:05,159
something else familiar but you can use

00:21:01,950 --> 00:21:07,649
this in much large cases and we can see

00:21:05,159 --> 00:21:09,599
that there was very little room to go

00:21:07,649 --> 00:21:11,429
wrong once we had these tools available

00:21:09,599 --> 00:21:13,079
to us on most of the way structural

00:21:11,429 --> 00:21:15,509
kirshen then we could follow the types

00:21:13,079 --> 00:21:17,849
and for the empty case we had to get the

00:21:15,509 --> 00:21:19,469
right answer and for the case appear

00:21:17,849 --> 00:21:21,389
there are three possible solutions but

00:21:19,469 --> 00:21:25,349
it was fairly obvious that two of them

00:21:21,389 --> 00:21:28,229
were incorrect so this way we can make

00:21:25,349 --> 00:21:30,299
programming systematic repeatable

00:21:28,229 --> 00:21:31,919
enterprise something that we can people

00:21:30,299 --> 00:21:35,269
can do much more efficiently than I

00:21:31,919 --> 00:21:38,369
currently do all right

00:21:35,269 --> 00:21:41,759
so talked a lot about programming such

00:21:38,369 --> 00:21:43,469
but I want to emphasize that coding is

00:21:41,759 --> 00:21:45,289
more than coding program is more than

00:21:43,469 --> 00:21:49,410
programming particularly when teaching

00:21:45,289 --> 00:21:52,490
beginners there are many other skills

00:21:49,410 --> 00:21:55,110
need to have for example they need to

00:21:52,490 --> 00:21:56,910
had a debug vicar how to debug their

00:21:55,110 --> 00:21:58,590
errors which is more than just debugging

00:21:56,910 --> 00:22:00,660
their code and he's know how to use

00:21:58,590 --> 00:22:03,570
their tools like the editors and

00:22:00,660 --> 00:22:06,240
versioning and control and so on for

00:22:03,570 --> 00:22:09,690
example who has ever had Scala see say

00:22:06,240 --> 00:22:13,800
this to them I have expected type Ava

00:22:09,690 --> 00:22:15,840
got type A and that's probably that was

00:22:13,800 --> 00:22:18,330
my response the first time this happened

00:22:15,840 --> 00:22:19,260
I didn't have a clue what it meant it's

00:22:18,330 --> 00:22:21,000
got a little bit better in recent

00:22:19,260 --> 00:22:25,440
versions at least tells you that there's

00:22:21,000 --> 00:22:27,630
a comes from different places but still

00:22:25,440 --> 00:22:30,000
it's not a great error message and then

00:22:27,630 --> 00:22:32,910
you might have get say two hatched

00:22:30,000 --> 00:22:34,800
detached head stage this mean you're

00:22:32,910 --> 00:22:37,140
some kind of Edwardian ghost wandering

00:22:34,800 --> 00:22:42,630
around with your head tucked under your

00:22:37,140 --> 00:22:44,070
arm I don't know maybe does the point is

00:22:42,630 --> 00:22:46,170
there's a lot of implicit knowledge but

00:22:44,070 --> 00:22:48,210
that we don't normally teach as part of

00:22:46,170 --> 00:22:50,040
programming that students need to have

00:22:48,210 --> 00:22:51,990
they need to know how to read these are

00:22:50,040 --> 00:22:54,720
messages when Scala CSS on random

00:22:51,990 --> 00:22:56,720
garbage what does it actually mean can

00:22:54,720 --> 00:22:59,550
we translate this into a form that is

00:22:56,720 --> 00:23:02,430
meaningful and simply forget when it has

00:22:59,550 --> 00:23:05,850
its famously terrible error messages and

00:23:02,430 --> 00:23:08,400
it's famously poor user interface how do

00:23:05,850 --> 00:23:09,510
we actually do this effectively there's

00:23:08,400 --> 00:23:11,420
also knowledge here that we don't

00:23:09,510 --> 00:23:13,140
normally consider to be part of

00:23:11,420 --> 00:23:14,880
programming per se but it's really

00:23:13,140 --> 00:23:17,150
important how do you use editor

00:23:14,880 --> 00:23:19,350
efficiently how do you get around code

00:23:17,150 --> 00:23:21,780
now one way we can solve this problem is

00:23:19,350 --> 00:23:25,350
we can create courses to teach this

00:23:21,780 --> 00:23:26,850
that's fine but if like in the context

00:23:25,350 --> 00:23:28,860
of teaching someone scholarly Pope you

00:23:26,850 --> 00:23:31,230
don't want to take a six-week detour to

00:23:28,860 --> 00:23:33,270
discuss editors in version control and

00:23:31,230 --> 00:23:35,460
so on so it's one way you can do this

00:23:33,270 --> 00:23:38,430
teach us implicitly and that is to do

00:23:35,460 --> 00:23:40,140
live coding live coding is great for

00:23:38,430 --> 00:23:41,730
doing this and you may be thinking oh I

00:23:40,140 --> 00:23:43,710
hate life Craig I don't want to do that

00:23:41,730 --> 00:23:45,900
because I definitely can't think and

00:23:43,710 --> 00:23:48,540
type at the same time I'm going to make

00:23:45,900 --> 00:23:52,380
loads of errors that's 100% the point

00:23:48,540 --> 00:23:54,570
the point is to make these errors you

00:23:52,380 --> 00:23:56,850
get these funny compiler misses show up

00:23:54,570 --> 00:23:58,890
and then you demonstrate the error

00:23:56,850 --> 00:24:00,180
recovery to the students you show them

00:23:58,890 --> 00:24:01,980
you made a mistake so when you're making

00:24:00,180 --> 00:24:02,640
your error in front of students it's not

00:24:01,980 --> 00:24:05,610
something you want

00:24:02,640 --> 00:24:07,470
get out of you want to show them slowly

00:24:05,610 --> 00:24:09,330
how you come from Sara ask them what do

00:24:07,470 --> 00:24:10,500
you think the Hara is you know it

00:24:09,330 --> 00:24:11,490
engaged them on their because they're

00:24:10,500 --> 00:24:12,780
going to run into lows of errors

00:24:11,490 --> 00:24:16,049
themselves and they need to know how to

00:24:12,780 --> 00:24:17,910
get out of that the other thing is

00:24:16,049 --> 00:24:19,260
demonstrating a to use of coding in your

00:24:17,910 --> 00:24:20,790
editor you can show them how you get

00:24:19,260 --> 00:24:22,110
around the courage how you compile they

00:24:20,790 --> 00:24:23,220
do these kind of things and we take for

00:24:22,110 --> 00:24:28,620
granted but you know people need to

00:24:23,220 --> 00:24:30,390
learn sometimes and yeah definitely when

00:24:28,620 --> 00:24:33,330
you get an error it's a great teaching

00:24:30,390 --> 00:24:35,130
moment and particularly you get that bit

00:24:33,330 --> 00:24:37,470
where your brain has frozen you don't

00:24:35,130 --> 00:24:39,630
know what to do perfect opportunity to

00:24:37,470 --> 00:24:42,510
turn it over to the students what do you

00:24:39,630 --> 00:24:43,890
think we should do in this case and give

00:24:42,510 --> 00:24:45,600
them a little bit of time they may fix

00:24:43,890 --> 00:24:47,040
the error and I may just sort of spin

00:24:45,600 --> 00:24:48,030
around in circles for a little bit but

00:24:47,040 --> 00:24:50,490
either way you've got a bit of time

00:24:48,030 --> 00:24:53,370
yourself to reboot your brain and figure

00:24:50,490 --> 00:24:57,690
out what was going on if they can't

00:24:53,370 --> 00:24:59,490
figure it out for you alright so yeah

00:24:57,690 --> 00:25:01,260
there is all simplistic knowledge needs

00:24:59,490 --> 00:25:02,520
to be taught somehow and life coding is

00:25:01,260 --> 00:25:05,240
a reason way to do it if you don't want

00:25:02,520 --> 00:25:14,270
to take time to teach it explicitly

00:25:05,240 --> 00:25:17,580
right didn4t known for is shut up okay

00:25:14,270 --> 00:25:20,280
so this tree here is that thinking while

00:25:17,580 --> 00:25:22,200
listening is difficult if you listen to

00:25:20,280 --> 00:25:23,790
someone talking you all the time it's

00:25:22,200 --> 00:25:25,740
very difficult to do any thinking anyone

00:25:23,790 --> 00:25:28,200
who has a young children who's got young

00:25:25,740 --> 00:25:30,690
children here I do you probably know

00:25:28,200 --> 00:25:33,150
about being talked at when your kid

00:25:30,690 --> 00:25:35,940
comes in and just hammers away year for

00:25:33,150 --> 00:25:38,460
three hours about minecraft or whatever

00:25:35,940 --> 00:25:40,200
they did at school yesterday or whatever

00:25:38,460 --> 00:25:41,760
their other sibling has done great

00:25:40,200 --> 00:25:43,410
injustice whatever it is you don't want

00:25:41,760 --> 00:25:44,700
to hear it because you got things to

00:25:43,410 --> 00:25:48,179
think about at all things to think about

00:25:44,700 --> 00:25:49,669
and yeah it's very difficult to do what

00:25:48,179 --> 00:25:51,510
somebody's talking out here

00:25:49,669 --> 00:25:54,299
and it's the same thing when you're

00:25:51,510 --> 00:25:57,380
teaching programming right you need to

00:25:54,299 --> 00:25:59,520
give people time time to think

00:25:57,380 --> 00:26:00,840
amazing you want to help you want to get

00:25:59,520 --> 00:26:02,370
in there and you want to see they've got

00:26:00,840 --> 00:26:05,850
a problem and you want to jump in and

00:26:02,370 --> 00:26:07,440
help them solve it so but a more

00:26:05,850 --> 00:26:09,600
effective way of doing that is firstly

00:26:07,440 --> 00:26:12,179
take step back give them a little bit

00:26:09,600 --> 00:26:13,230
time to sort things out themselves then

00:26:12,179 --> 00:26:15,000
if it looks like they're not going to be

00:26:13,230 --> 00:26:16,610
able to sort of out rather than jumping

00:26:15,000 --> 00:26:19,260
in and helping

00:26:16,610 --> 00:26:20,520
say give them some prompts maybe for

00:26:19,260 --> 00:26:23,550
thinking just like you know when the

00:26:20,520 --> 00:26:26,490
kids can say my brother hit me you don't

00:26:23,550 --> 00:26:28,890
just want to go and storming in and say

00:26:26,490 --> 00:26:31,560
well why did he hit you maybe you can

00:26:28,890 --> 00:26:35,570
sort it out yourselves hands off

00:26:31,560 --> 00:26:39,390
parenting so give them some prompts for

00:26:35,570 --> 00:26:41,970
for thinking you know like saying what

00:26:39,390 --> 00:26:44,010
strategy are you using if you use the

00:26:41,970 --> 00:26:46,020
programming strategies prompt them is

00:26:44,010 --> 00:26:48,450
this a structural equation problem don't

00:26:46,020 --> 00:26:50,970
just think explicitly about how they're

00:26:48,450 --> 00:26:53,250
approaching a problem so they can do a

00:26:50,970 --> 00:26:54,660
little bit of metacognitive thinking or

00:26:53,250 --> 00:26:56,070
what technique am I using to address

00:26:54,660 --> 00:26:57,840
this problem they can be more aware of

00:26:56,070 --> 00:27:01,920
their own technique and they can

00:26:57,840 --> 00:27:03,390
formalize it a little bit more well

00:27:01,920 --> 00:27:06,180
perhaps you can give them some bit of

00:27:03,390 --> 00:27:09,150
feedback say well you know I think your

00:27:06,180 --> 00:27:11,100
code is wrong here just direct them

00:27:09,150 --> 00:27:12,330
towards where the error is but then

00:27:11,100 --> 00:27:14,010
don't tell them the solution why do you

00:27:12,330 --> 00:27:15,300
think that's the case what do you think

00:27:14,010 --> 00:27:18,510
is going wrong here I think it's where

00:27:15,300 --> 00:27:21,120
should look well maybe just get them to

00:27:18,510 --> 00:27:23,820
voice their mental models you could say

00:27:21,120 --> 00:27:25,710
sort of explain to me what you're doing

00:27:23,820 --> 00:27:29,700
or explain to me what you think is going

00:27:25,710 --> 00:27:30,690
wrong here and this is great because it

00:27:29,700 --> 00:27:32,490
gets them to already

00:27:30,690 --> 00:27:34,190
verbalize what they're thinking and once

00:27:32,490 --> 00:27:37,290
I do that I might find that it's

00:27:34,190 --> 00:27:38,730
incoherent often the case where we think

00:27:37,290 --> 00:27:40,080
we have a consistent model but as soon

00:27:38,730 --> 00:27:42,120
as we had to present every realize its

00:27:40,080 --> 00:27:45,930
full of holes and that way you get the

00:27:42,120 --> 00:27:48,840
students of for miles themselves as much

00:27:45,930 --> 00:27:50,580
as we would like to be the case we can't

00:27:48,840 --> 00:27:54,450
do the learning for the students we have

00:27:50,580 --> 00:27:56,060
to let them do that job is teacher is to

00:27:54,450 --> 00:27:58,110
present material you need to do that

00:27:56,060 --> 00:28:00,180
this sort of completely hands-off

00:27:58,110 --> 00:28:03,600
approach of just here's a tool have fun

00:28:00,180 --> 00:28:09,420
doesn't work as effectively as active

00:28:03,600 --> 00:28:12,810
teaching we also under cover incorrect

00:28:09,420 --> 00:28:14,220
floors and their mental models so poke

00:28:12,810 --> 00:28:16,020
at their product and try to get them

00:28:14,220 --> 00:28:17,130
more structured in their programming try

00:28:16,020 --> 00:28:18,690
to get them to present what they're

00:28:17,130 --> 00:28:21,180
thinking so you can find out where the

00:28:18,690 --> 00:28:22,980
problems are you can correct that don't

00:28:21,180 --> 00:28:26,070
just jump in and say this is what you

00:28:22,980 --> 00:28:28,050
need to do if you can help them say

00:28:26,070 --> 00:28:33,120
don't be the Oracle the source of all

00:28:28,050 --> 00:28:36,540
all truth of solving their problems okay

00:28:33,120 --> 00:28:38,850
tip number five is peer learning great

00:28:36,540 --> 00:28:42,170
for the the lazy teacher this means

00:28:38,850 --> 00:28:46,860
getting the students to teach each other

00:28:42,170 --> 00:28:50,550
now one of the best ways to learn is to

00:28:46,860 --> 00:28:53,550
teach why is that well it forces you to

00:28:50,550 --> 00:28:56,070
really understand the material you need

00:28:53,550 --> 00:28:59,070
to know all the nuances and you need to

00:28:56,070 --> 00:29:03,600
have that consistent model the way of

00:28:59,070 --> 00:29:05,340
explaining it so teaching is a great

00:29:03,600 --> 00:29:07,680
it's great for this great for generating

00:29:05,340 --> 00:29:09,930
a coherent model and you can get the two

00:29:07,680 --> 00:29:11,640
students to treat each other then you're

00:29:09,930 --> 00:29:16,050
forcing them to develop that coherent

00:29:11,640 --> 00:29:17,610
model right so how can how can you do

00:29:16,050 --> 00:29:18,810
this I'm giving you a view three ways if

00:29:17,610 --> 00:29:19,950
students can teach each other there are

00:29:18,810 --> 00:29:21,210
lots of ways out there if you're

00:29:19,950 --> 00:29:22,620
interested in reading literature the

00:29:21,210 --> 00:29:26,430
further resource will give you some

00:29:22,620 --> 00:29:29,430
ideas number one is like I call the

00:29:26,430 --> 00:29:30,660
hypothesis game this works in in larger

00:29:29,430 --> 00:29:33,830
classes where you don't maybe dental

00:29:30,660 --> 00:29:35,880
time to talk in everyone individually

00:29:33,830 --> 00:29:38,790
what you can do is you can ask a

00:29:35,880 --> 00:29:41,180
question and you can then get students

00:29:38,790 --> 00:29:47,100
to answer that question to take a guess

00:29:41,180 --> 00:29:50,040
answer that question then this makes it

00:29:47,100 --> 00:29:52,830
better than just getting them to answer

00:29:50,040 --> 00:29:54,300
question individually you do this you

00:29:52,830 --> 00:29:56,340
just have in voting like raising your

00:29:54,300 --> 00:29:59,850
hand for different answers or sometimes

00:29:56,340 --> 00:30:01,410
people have like a fancy phone basis

00:29:59,850 --> 00:30:03,210
since that people can vote on it doesn't

00:30:01,410 --> 00:30:05,390
really matter how you do it it's just

00:30:03,210 --> 00:30:08,700
the prompting them to come at an answer

00:30:05,390 --> 00:30:10,260
and then you can get them to justify the

00:30:08,700 --> 00:30:13,020
answer to another student and this is

00:30:10,260 --> 00:30:14,670
the key bit this is where the learning

00:30:13,020 --> 00:30:15,810
happens because in those I've chosen

00:30:14,670 --> 00:30:17,490
ants and they have to turn to someone

00:30:15,810 --> 00:30:19,860
else and explain why that's correct

00:30:17,490 --> 00:30:22,020
that's when they go oh what I'm thinking

00:30:19,860 --> 00:30:23,550
doesn't make any sense that doesn't that

00:30:22,020 --> 00:30:25,320
model doesn't work I need to adjust my

00:30:23,550 --> 00:30:28,260
thinking or maybe doesn't make sense and

00:30:25,320 --> 00:30:29,940
they can learn from each other so time

00:30:28,260 --> 00:30:33,870
efficient simple way of getting people

00:30:29,940 --> 00:30:36,990
to teach each other another program

00:30:33,870 --> 00:30:38,160
specific tool is pair programming a lot

00:30:36,990 --> 00:30:40,230
people do this

00:30:38,160 --> 00:30:42,810
teacher in this pink one keyboard or you

00:30:40,230 --> 00:30:46,320
gonna do mob programming many students

00:30:42,810 --> 00:30:47,310
and one keyboard I've done this in some

00:30:46,320 --> 00:30:48,570
cases and actually works surprisingly

00:30:47,310 --> 00:30:49,950
well when you have already engaged

00:30:48,570 --> 00:30:52,890
students and while shouting at each

00:30:49,950 --> 00:30:54,990
other wants to jump on the keyboard

00:30:52,890 --> 00:30:58,590
every three engaging you can work very

00:30:54,990 --> 00:31:00,270
well the key thing here is don't let

00:30:58,590 --> 00:31:02,370
anyone just like hog the keyboard and do

00:31:00,270 --> 00:31:04,470
all the typing take you when you have

00:31:02,370 --> 00:31:05,790
different skill levels is very tempting

00:31:04,470 --> 00:31:06,720
for the more skilled person today - Kim

00:31:05,790 --> 00:31:08,280
the keyboard I'm gonna show you how to

00:31:06,720 --> 00:31:10,740
do it and then the less skilled person

00:31:08,280 --> 00:31:14,070
normally just gets left behind so

00:31:10,740 --> 00:31:15,630
whoever's not typing must be active must

00:31:14,070 --> 00:31:18,480
be thinking must be engaged or it's not

00:31:15,630 --> 00:31:20,850
going to be effective there's a lot you

00:31:18,480 --> 00:31:24,330
can say that pair programming maybe got

00:31:20,850 --> 00:31:25,830
experience itself there is - pooled app

00:31:24,330 --> 00:31:27,420
which is a screen sharing application

00:31:25,830 --> 00:31:28,730
and they have this programming are I

00:31:27,420 --> 00:31:30,630
think it's quite good if you're not

00:31:28,730 --> 00:31:33,630
experienced with a programming training

00:31:30,630 --> 00:31:36,120
and reading that and the third technique

00:31:33,630 --> 00:31:37,680
I want to mention is the famous rubber

00:31:36,120 --> 00:31:40,290
duck who's heard a rubber duck in before

00:31:37,680 --> 00:31:42,960
I have okay yeah so great so we on this

00:31:40,290 --> 00:31:45,810
idea this is basically when you don't

00:31:42,960 --> 00:31:48,810
have someone around to talk to explain

00:31:45,810 --> 00:31:52,500
to an it you know you know object that's

00:31:48,810 --> 00:31:55,530
basically pair programming for one so

00:31:52,500 --> 00:31:56,990
again you've been forced to make your

00:31:55,530 --> 00:31:58,830
mental model

00:31:56,990 --> 00:32:00,330
vocalising mental model and then you'll

00:31:58,830 --> 00:32:03,120
see all these flaws in it now i think

00:32:00,330 --> 00:32:05,250
we've all had that experience of maybe

00:32:03,120 --> 00:32:06,540
writing an email like to a mailing is i

00:32:05,250 --> 00:32:08,280
have this problem i'm trying to do this

00:32:06,540 --> 00:32:10,350
and i do this is this and you go yeah

00:32:08,280 --> 00:32:11,970
okay i say you see the error seems you

00:32:10,350 --> 00:32:13,350
write that email it's the same thing

00:32:11,970 --> 00:32:17,220
it's just really making your thoughts

00:32:13,350 --> 00:32:19,470
explicit and then you'll see the errors

00:32:17,220 --> 00:32:23,820
and what you're trying to do so very

00:32:19,470 --> 00:32:29,190
useful for teaching yourself I'm doing

00:32:23,820 --> 00:32:31,410
it okay so those are my five top tips I

00:32:29,190 --> 00:32:33,270
am there's lots more I could say so I

00:32:31,410 --> 00:32:37,530
want to give you five more resources to

00:32:33,270 --> 00:32:38,310
go to for further learning so 5/3

00:32:37,530 --> 00:32:42,240
resources

00:32:38,310 --> 00:32:43,950
number one is this little paper

00:32:42,240 --> 00:32:46,650
ten quick tips for teaching programming

00:32:43,950 --> 00:32:49,770
so it's twice the value of my talk it's

00:32:46,650 --> 00:32:51,240
got ten tips rather than five it's very

00:32:49,770 --> 00:32:53,490
easy read and there again ever

00:32:51,240 --> 00:32:55,740
things that are very directly applicable

00:32:53,490 --> 00:32:59,220
to teaching very sort of apply stuff not

00:32:55,740 --> 00:33:05,340
much on the theory you can give that a

00:32:59,220 --> 00:33:08,700
read it's pretty good num2 is this book

00:33:05,340 --> 00:33:12,059
called teach together by a guy called

00:33:08,700 --> 00:33:14,100
Greg Wilson I definitely worth having

00:33:12,059 --> 00:33:16,200
read through that book it's a fairly

00:33:14,100 --> 00:33:18,890
short books I think so oh and something

00:33:16,200 --> 00:33:24,480
pages long but very good content on

00:33:18,890 --> 00:33:26,880
teaching in general one thing that all

00:33:24,480 --> 00:33:29,720
of these resources lack is the things

00:33:26,880 --> 00:33:32,100
that we can do in functional programming

00:33:29,720 --> 00:33:33,750
function programming has this strong

00:33:32,100 --> 00:33:35,160
mathematical model we can leverage for

00:33:33,750 --> 00:33:37,260
things either programming strategy I

00:33:35,160 --> 00:33:39,330
discussed earlier structure occasion

00:33:37,260 --> 00:33:41,760
algebraic data types okay you're not

00:33:39,330 --> 00:33:44,070
going to find much of that in the

00:33:41,760 --> 00:33:46,020
literature but lots of the other

00:33:44,070 --> 00:33:48,690
techniques you'll find in resources like

00:33:46,020 --> 00:33:51,750
this Greg Wilson the author of this book

00:33:48,690 --> 00:33:54,330
is worth following he's either writing a

00:33:51,750 --> 00:33:56,160
new book right now teaching tech I think

00:33:54,330 --> 00:33:58,530
or maybe he's updating this book on 100

00:33:56,160 --> 00:33:59,790
cent show either way I'll be having a

00:33:58,530 --> 00:34:05,309
read of what he's doing when he's

00:33:59,790 --> 00:34:08,700
finished number three how to design

00:34:05,309 --> 00:34:11,280
programs is inspiration for our

00:34:08,700 --> 00:34:14,940
programming strategies so this is a book

00:34:11,280 --> 00:34:17,040
in the social programming world they use

00:34:14,940 --> 00:34:21,359
scheme to teach programming and lots of

00:34:17,040 --> 00:34:23,040
lovely parentheses this is where I first

00:34:21,359 --> 00:34:25,950
saw this idea of you can make

00:34:23,040 --> 00:34:29,190
programming systematic you make program

00:34:25,950 --> 00:34:33,619
repeatable how do design programs itself

00:34:29,190 --> 00:34:37,230
is it's quite a big book and it moves

00:34:33,619 --> 00:34:39,629
very slowly so I'm not sure it's

00:34:37,230 --> 00:34:41,460
something that you necessarily want to

00:34:39,629 --> 00:34:45,090
take directly but I've taken a lot of

00:34:41,460 --> 00:34:46,290
inspiration from their approach so where

00:34:45,090 --> 00:34:51,929
was look if you're interested in that

00:34:46,290 --> 00:34:54,179
kind of thing so all of those they tend

00:34:51,929 --> 00:34:56,369
to focus on programming moving away from

00:34:54,179 --> 00:34:58,440
programming into the wider world of

00:34:56,369 --> 00:35:01,980
Education there's an enormous amount of

00:34:58,440 --> 00:35:04,080
research out there and one thing that I

00:35:01,980 --> 00:35:04,620
like is someone who's not an expert on

00:35:04,080 --> 00:35:08,520
teaching

00:35:04,620 --> 00:35:11,130
this visible learning site what this is

00:35:08,520 --> 00:35:15,540
is a guy called John Hattie who has done

00:35:11,130 --> 00:35:18,270
a number of metres reviews of literature

00:35:15,540 --> 00:35:20,670
that means he's taken lots of studies

00:35:18,270 --> 00:35:22,770
and he's a grating the results of many

00:35:20,670 --> 00:35:24,690
studies looking the techniques they look

00:35:22,770 --> 00:35:26,880
at and trying to work out what's them

00:35:24,690 --> 00:35:31,310
more effective or taking some more

00:35:26,880 --> 00:35:36,170
effective and so you can use just focus

00:35:31,310 --> 00:35:39,590
on those techniques now there are some

00:35:36,170 --> 00:35:42,570
reasonable questions about whether his

00:35:39,590 --> 00:35:46,340
the effect sizes he reports the numbers

00:35:42,570 --> 00:35:50,120
he reports are accurate they're probably

00:35:46,340 --> 00:35:53,400
overestimating so he has things where

00:35:50,120 --> 00:35:56,460
the techniques which supposedly

00:35:53,400 --> 00:35:58,350
correspond to like a year or two of

00:35:56,460 --> 00:36:01,320
improvement of someone going through

00:35:58,350 --> 00:36:05,400
high school that seems to me a little

00:36:01,320 --> 00:36:07,740
bit high but it's not really important

00:36:05,400 --> 00:36:09,390
so much is the absolute value but more

00:36:07,740 --> 00:36:11,100
than ordering or just way we should be

00:36:09,390 --> 00:36:15,030
looking at for the techniques that are

00:36:11,100 --> 00:36:16,620
worth learning so I found it very useful

00:36:15,030 --> 00:36:18,180
could just cuts down the literature a

00:36:16,620 --> 00:36:19,830
lot I know these are like sort of the

00:36:18,180 --> 00:36:21,660
top ten techniques is probably that I

00:36:19,830 --> 00:36:24,090
should learn about rather than looking

00:36:21,660 --> 00:36:27,990
through a mountain or the educational

00:36:24,090 --> 00:36:33,720
literature final thing I want to mention

00:36:27,990 --> 00:36:35,100
is your own practice if you teach senior

00:36:33,720 --> 00:36:37,710
developer teaching juniors or we're

00:36:35,100 --> 00:36:39,060
teaching some other context then your

00:36:37,710 --> 00:36:40,890
own practice is a great ways to get

00:36:39,060 --> 00:36:42,150
better you need to do this deliberately

00:36:40,890 --> 00:36:42,830
you need to really focus on what you've

00:36:42,150 --> 00:36:44,970
done

00:36:42,830 --> 00:36:48,120
effect on what you've done and say what

00:36:44,970 --> 00:36:50,250
can you learn from that so one of the

00:36:48,120 --> 00:36:52,200
things I'm focusing on the moment is

00:36:50,250 --> 00:36:55,260
getting better at the student

00:36:52,200 --> 00:36:58,590
interaction at feedback giving students

00:36:55,260 --> 00:37:00,960
useful feedback not jumping in straight

00:36:58,590 --> 00:37:03,660
away that kind of thing or maybe not

00:37:00,960 --> 00:37:05,520
leaving people for too long so some of

00:37:03,660 --> 00:37:07,560
the thoughts in this slider for my

00:37:05,520 --> 00:37:09,450
reflections of courses I've been

00:37:07,560 --> 00:37:12,350
teaching recently I feel something I

00:37:09,450 --> 00:37:12,350
need to improve on

00:37:12,500 --> 00:37:17,520
okay so that's the main content of what

00:37:16,110 --> 00:37:19,290
I wanted to talk about so a lot of the

00:37:17,520 --> 00:37:21,510
conclusions here number one is that

00:37:19,290 --> 00:37:22,830
teaching is a skill it's definitely a

00:37:21,510 --> 00:37:24,030
distinct skill from programming just

00:37:22,830 --> 00:37:25,560
being a good program does not make you a

00:37:24,030 --> 00:37:27,360
good teacher and it's clearly can

00:37:25,560 --> 00:37:32,610
definitely improve that skill you can

00:37:27,360 --> 00:37:34,140
learn with a little bit of effort the

00:37:32,610 --> 00:37:36,390
other point is that I think teaching is

00:37:34,140 --> 00:37:37,860
very valuable this is not really very

00:37:36,390 --> 00:37:39,150
different from learning the strategies

00:37:37,860 --> 00:37:42,650
are making a good teacher you can also

00:37:39,150 --> 00:37:44,790
use on yourself to help you learn and

00:37:42,650 --> 00:37:46,530
you need to learn all the time it's

00:37:44,790 --> 00:37:50,010
something we all have to do whether we

00:37:46,530 --> 00:37:54,510
are teaching others or not just to recap

00:37:50,010 --> 00:37:56,400
my five tips notion machine however have

00:37:54,510 --> 00:37:58,950
a model of what you're doing you can

00:37:56,400 --> 00:38:01,200
tell me doing programming strategies to

00:37:58,950 --> 00:38:03,530
make programming systematic remember

00:38:01,200 --> 00:38:06,590
that there's more to coding than coding

00:38:03,530 --> 00:38:08,910
you need to teach those sort of things

00:38:06,590 --> 00:38:11,310
don't be too hasty to jump in when

00:38:08,910 --> 00:38:13,950
someone's struggling struggling is a

00:38:11,310 --> 00:38:16,710
central part of learning they need to do

00:38:13,950 --> 00:38:18,090
the learning themselves and getting

00:38:16,710 --> 00:38:19,440
people to teach each other is a great

00:38:18,090 --> 00:38:23,880
way to make their learning more

00:38:19,440 --> 00:38:26,550
effective finally a shout-out miss carla

00:38:23,880 --> 00:38:30,120
bridge if you are interested in getting

00:38:26,550 --> 00:38:33,600
more experience in teaching then the

00:38:30,120 --> 00:38:35,760
scala bridge events running in a number

00:38:33,600 --> 00:38:39,750
of locations we've got one in London and

00:38:35,760 --> 00:38:42,300
there's one starting up in Bay Area I

00:38:39,750 --> 00:38:43,470
think keeping New York what do you think

00:38:42,300 --> 00:38:44,160
you're doing one okay there's one

00:38:43,470 --> 00:38:47,880
happening there

00:38:44,160 --> 00:38:50,280
ed once Carla days yesterday so those

00:38:47,880 --> 00:38:51,600
opportunities you can join in to get

00:38:50,280 --> 00:38:53,820
more experience teaching or you just

00:38:51,600 --> 00:38:57,690
start on yourself you know what we need

00:38:53,820 --> 00:38:59,630
is a website a little meetup page to get

00:38:57,690 --> 00:39:02,850
students to sign up and away you go

00:38:59,630 --> 00:39:06,090
it's great fun it's really nice to see

00:39:02,850 --> 00:39:09,000
people just improving and getting better

00:39:06,090 --> 00:39:10,320
for example from Scala burden we have

00:39:09,000 --> 00:39:12,900
two students have come along to this

00:39:10,320 --> 00:39:14,040
conference and never done Scala before

00:39:12,900 --> 00:39:16,790
and they only come in once Carla days

00:39:14,040 --> 00:39:21,080
and they done some great stuff

00:39:16,790 --> 00:39:26,390
Thanks do you consider getting involved

00:39:21,080 --> 00:39:27,890
it's gotta be too org insight and yeah

00:39:26,390 --> 00:39:30,560
that's all I gotta say thank you for

00:39:27,890 --> 00:39:31,610
attention but again is contact details

00:39:30,560 --> 00:39:35,090
slides we'll be getting up on the

00:39:31,610 --> 00:39:37,280
website once I have time to upload them

00:39:35,090 --> 00:39:39,170
thank you for your attention and if you

00:39:37,280 --> 00:39:52,400
have any questions now I'd love to take

00:39:39,170 --> 00:39:53,960
them so you you told us you identified

00:39:52,400 --> 00:40:00,230
in programming strategies and you

00:39:53,960 --> 00:40:03,170
presented free hmm okay there's no we're

00:40:00,230 --> 00:40:05,290
public at the moment we are kind of

00:40:03,170 --> 00:40:09,440
working on something to to make them

00:40:05,290 --> 00:40:10,880
public it might be like a paper for some

00:40:09,440 --> 00:40:12,290
academic journal looks like I'm quite

00:40:10,880 --> 00:40:15,110
interested in interacting with the

00:40:12,290 --> 00:40:17,300
academic community on this if it is a

00:40:15,110 --> 00:40:19,460
paper it will be open access so you will

00:40:17,300 --> 00:40:23,770
be able to anyone will be able to read

00:40:19,460 --> 00:40:23,770
it yeah

00:40:30,680 --> 00:40:38,180
so we talked about in list knowledge

00:40:33,440 --> 00:40:41,540
such as cryptic messages have you tried

00:40:38,180 --> 00:40:44,120
to make them more explicit for students

00:40:41,540 --> 00:40:47,360
maybe writing some documents on so on

00:40:44,120 --> 00:40:50,960
mmm-hmm yeah you said you can make the

00:40:47,360 --> 00:40:52,700
that knowledge explicit so for example

00:40:50,960 --> 00:40:55,640
you know there are courses out there and

00:40:52,700 --> 00:40:57,290
using get the the guy mentioned earlier

00:40:55,640 --> 00:41:00,290
Greg Wilson has this project core

00:40:57,290 --> 00:41:03,890
software carpentry which has a tutorial

00:41:00,290 --> 00:41:04,400
on it that's probably very good it can

00:41:03,890 --> 00:41:09,320
be done

00:41:04,400 --> 00:41:12,080
it's just his work its effort and life

00:41:09,320 --> 00:41:13,370
is finite so you have to choose what

00:41:12,080 --> 00:41:17,240
you're doing so in the context of say

00:41:13,370 --> 00:41:20,750
Schuyler bridge for example we had we

00:41:17,240 --> 00:41:23,450
had six sessions we had about two hours

00:41:20,750 --> 00:41:24,650
of actual teaching per session so I

00:41:23,450 --> 00:41:26,960
don't need twelve hours he consider

00:41:24,650 --> 00:41:28,690
that's like two or three weeks of a

00:41:26,960 --> 00:41:31,300
university course

00:41:28,690 --> 00:41:33,820
not very much time and if we spend time

00:41:31,300 --> 00:41:35,650
explicitly teaching get and these kind

00:41:33,820 --> 00:41:38,710
of things I would really take a lot of

00:41:35,650 --> 00:41:40,840
time away from the rest of the teaching

00:41:38,710 --> 00:41:42,370
I want to do so it's just a trade affair

00:41:40,840 --> 00:41:43,660
you get the same thing in commercial

00:41:42,370 --> 00:41:46,750
settings when we did have a training

00:41:43,660 --> 00:41:48,970
course in only two or three days where I

00:41:46,750 --> 00:41:50,950
want to spend like half a day just

00:41:48,970 --> 00:41:53,170
talking about using an editor or

00:41:50,950 --> 00:41:54,550
interpreting error messages and as I'm

00:41:53,170 --> 00:41:56,020
sure it's the same as well sure if I'm

00:41:54,550 --> 00:41:57,820
mentoring junior developers things like

00:41:56,020 --> 00:41:59,650
that maybe you have a bit more

00:41:57,820 --> 00:42:02,440
flexibility there begin it's taking up

00:41:59,650 --> 00:42:04,960
time so you yeah making explicit is

00:42:02,440 --> 00:42:07,090
great but you go get the material from

00:42:04,960 --> 00:42:11,610
somewhere and you've got to get the time

00:42:07,090 --> 00:42:11,610
from somewhere so it's trade-off you

00:42:12,240 --> 00:42:16,660
know obviously every knows Emacs is the

00:42:15,400 --> 00:42:23,290
greatest editor and we should all spend

00:42:16,660 --> 00:42:26,800
time learning it but hey do you have any

00:42:23,290 --> 00:42:29,710
ideas about how to make rewarding this

00:42:26,800 --> 00:42:33,010
type of behavior explicit within

00:42:29,710 --> 00:42:35,590
companies how companies can make this a

00:42:33,010 --> 00:42:39,610
behavior that they can encourage right

00:42:35,590 --> 00:42:43,410
so we're talking about having a culture

00:42:39,610 --> 00:42:45,370
of mentoring and teaching and so on yeah

00:42:43,410 --> 00:42:46,990
that's a really good question because

00:42:45,370 --> 00:42:51,760
companies spend an enormous amount of

00:42:46,990 --> 00:42:54,880
money on recruiting and many many

00:42:51,760 --> 00:42:58,900
developers particularly of Silicon

00:42:54,880 --> 00:43:00,430
Valley move very frequently so you'd

00:42:58,900 --> 00:43:05,200
think that people spend more effort on

00:43:00,430 --> 00:43:07,630
retaining I'm not sure I have any great

00:43:05,200 --> 00:43:10,060
answers there that's something I think

00:43:07,630 --> 00:43:12,910
we struggle with getting people to

00:43:10,060 --> 00:43:16,480
recognize the value of of teaching and

00:43:12,910 --> 00:43:18,370
mentoring one way is to put it in terms

00:43:16,480 --> 00:43:20,940
of recruiting like how much you're going

00:43:18,370 --> 00:43:24,010
to spend to recruit a developer probably

00:43:20,940 --> 00:43:28,930
at least 10,000 currency units whatever

00:43:24,010 --> 00:43:30,670
those will be and that there's sort of

00:43:28,930 --> 00:43:31,840
one argument really use people who say

00:43:30,670 --> 00:43:35,020
that you know people say you can never

00:43:31,840 --> 00:43:37,390
hire senior developers yeah you can't

00:43:35,020 --> 00:43:39,310
hire senior scholar developers so any

00:43:37,390 --> 00:43:40,000
real solution you have is to build your

00:43:39,310 --> 00:43:43,840
own

00:43:40,000 --> 00:43:44,950
by teaching them and training them and

00:43:43,840 --> 00:43:47,200
it's probably much more cost-effective

00:43:44,950 --> 00:43:50,890
to do that and to have people leaving

00:43:47,200 --> 00:43:54,220
and that kind of churn of so that's one

00:43:50,890 --> 00:43:55,359
motivation I think that works with upper

00:43:54,220 --> 00:43:57,190
management type people who are more

00:43:55,359 --> 00:43:59,800
concerned about the numbers you

00:43:57,190 --> 00:44:01,300
definitely do have a cultural aspect and

00:43:59,800 --> 00:44:03,310
that's very hard to do because you need

00:44:01,300 --> 00:44:05,140
people just say okay you need to take

00:44:03,310 --> 00:44:07,510
time time away from stuff that's

00:44:05,140 --> 00:44:09,790
directly delivering features you may be

00:44:07,510 --> 00:44:11,530
you can't have like a two-week sprint

00:44:09,790 --> 00:44:13,420
when you're stuck in this kind of mode

00:44:11,530 --> 00:44:16,080
of continuous two-week Sprint's there's

00:44:13,420 --> 00:44:19,180
not really any time to step back and

00:44:16,080 --> 00:44:21,160
learn some more skills and making this

00:44:19,180 --> 00:44:23,920
kind of cultural changes is very hard to

00:44:21,160 --> 00:44:25,599
do I something I struggle with for sure

00:44:23,920 --> 00:44:27,820
I have seen some great organizations

00:44:25,599 --> 00:44:30,040
haven't really have a strong emphasis on

00:44:27,820 --> 00:44:32,950
learning addressing the audience comes

00:44:30,040 --> 00:44:34,270
from one of them Adam Eve seen some

00:44:32,950 --> 00:44:36,119
organization they just don't care and I

00:44:34,270 --> 00:44:38,680
just grind people make having a

00:44:36,119 --> 00:44:42,010
continual churn of people leaving and

00:44:38,680 --> 00:44:43,330
they so yeah it's a very difficult

00:44:42,010 --> 00:44:44,950
problem I think it's organizational

00:44:43,330 --> 00:44:48,250
change I think organizational change is

00:44:44,950 --> 00:44:57,460
hard I wish I had a better answer for

00:44:48,250 --> 00:44:59,820
that I question down the front here and

00:44:57,460 --> 00:45:02,619
when you're showing examples or

00:44:59,820 --> 00:45:05,380
especially if you do life coding mmm-hmm

00:45:02,619 --> 00:45:09,240
and what kind of examples do you choose

00:45:05,380 --> 00:45:12,310
I mean we had now the map example mm-hmm

00:45:09,240 --> 00:45:14,230
is that something which is good for

00:45:12,310 --> 00:45:18,940
beginners because it seems very abstract

00:45:14,230 --> 00:45:21,550
and do you also ask your students what

00:45:18,940 --> 00:45:25,900
they want to do with programming or yeah

00:45:21,550 --> 00:45:29,920
I think keep being excited uh-huh it

00:45:25,900 --> 00:45:32,290
depends very much in context so example

00:45:29,920 --> 00:45:33,820
like the map map on a list or map an

00:45:32,290 --> 00:45:36,730
option is something I would use for

00:45:33,820 --> 00:45:38,650
someone who is in new to Scala but

00:45:36,730 --> 00:45:41,859
expecting to be a commercial developer

00:45:38,650 --> 00:45:43,599
in a scholar because it's introducing

00:45:41,859 --> 00:45:44,740
these basic strategies and it's also

00:45:43,599 --> 00:45:47,500
explained to them how a bit of the

00:45:44,740 --> 00:45:48,849
standard library works so you understand

00:45:47,500 --> 00:45:50,550
option because you implement it yourself

00:45:48,849 --> 00:45:52,550
you know you implement and Matt and

00:45:50,550 --> 00:45:54,510
whatever an option so that's not

00:45:52,550 --> 00:45:59,430
stranger confusing and all you've done

00:45:54,510 --> 00:46:00,900
it in the context of the scarlet bridge

00:45:59,430 --> 00:46:02,220
stuff where we're teaching people in new

00:46:00,900 --> 00:46:05,610
to programming completely new to

00:46:02,220 --> 00:46:07,050
programming not always completely new to

00:46:05,610 --> 00:46:08,820
programming some of the more experienced

00:46:07,050 --> 00:46:10,380
developers but that's the thing that

00:46:08,820 --> 00:46:14,910
makes skybridge unique I think of these

00:46:10,380 --> 00:46:16,800
people we often use graphics doing

00:46:14,910 --> 00:46:18,780
pretty pictures there and that's can be

00:46:16,800 --> 00:46:21,870
quite motivating to them just to have an

00:46:18,780 --> 00:46:22,980
immediate pleasant result rather than

00:46:21,870 --> 00:46:26,250
just kind of working on courage and

00:46:22,980 --> 00:46:27,620
seeing text output example asunder

00:46:26,250 --> 00:46:31,170
students we've had there we had a

00:46:27,620 --> 00:46:32,940
fashion designer we had someone who was

00:46:31,170 --> 00:46:35,970
accountant but actually had a history of

00:46:32,940 --> 00:46:38,040
art degree and so they really enjoyed

00:46:35,970 --> 00:46:39,270
this graphical output that was very

00:46:38,040 --> 00:46:43,050
motivating to them they spent all the

00:46:39,270 --> 00:46:45,930
time tweaking with their pictures and so

00:46:43,050 --> 00:46:47,730
on so yeah it depends on the context if

00:46:45,930 --> 00:46:49,290
you've got more experienced developers I

00:46:47,730 --> 00:46:51,300
think these are these are basic

00:46:49,290 --> 00:46:53,820
techniques that people need to learn but

00:46:51,300 --> 00:46:55,290
if more experience they've used scholar

00:46:53,820 --> 00:46:56,820
a little bit maybe we'll talk about

00:46:55,290 --> 00:47:00,060
something that's relevant to what they

00:46:56,820 --> 00:47:02,010
do so a lot of functional programming

00:47:00,060 --> 00:47:03,660
involved Ron's idea of interpreters this

00:47:02,010 --> 00:47:06,180
gives you a separation between the

00:47:03,660 --> 00:47:07,770
description and action that's the way

00:47:06,180 --> 00:47:09,210
that you can manage a fix in a

00:47:07,770 --> 00:47:11,790
functional ways you don't actually carry

00:47:09,210 --> 00:47:13,500
any actions until you go run like an IO

00:47:11,790 --> 00:47:15,900
Mon and she's an unsafe run sink or

00:47:13,500 --> 00:47:17,340
whatever so you might build an

00:47:15,900 --> 00:47:18,570
interpreter to solve their problem

00:47:17,340 --> 00:47:20,010
what's the problem it might be sort of

00:47:18,570 --> 00:47:22,320
validation maybe we can express

00:47:20,010 --> 00:47:23,700
validation rules as like a little new

00:47:22,320 --> 00:47:26,690
language and have an interpreter for

00:47:23,700 --> 00:47:29,220
these validation rules or something else

00:47:26,690 --> 00:47:30,990
whatever it could be when you could find

00:47:29,220 --> 00:47:33,180
a case study that is relevant to what

00:47:30,990 --> 00:47:34,920
their problems are and show their

00:47:33,180 --> 00:47:36,540
techniques come up again and again a

00:47:34,920 --> 00:47:37,860
list is something I can throw on the

00:47:36,540 --> 00:47:40,620
board I expect every one of you is kind

00:47:37,860 --> 00:47:42,180
of familiar with here you know in a

00:47:40,620 --> 00:47:45,260
company a task what come problems do you

00:47:42,180 --> 00:47:45,260
work on what can we talk about

00:47:50,200 --> 00:47:55,700
any fourth questions Jinpa neither are

00:47:53,750 --> 00:47:57,410
we out of time are we okay we're outside

00:47:55,700 --> 00:47:59,030
to come and ask me after is happy to

00:47:57,410 --> 00:48:01,280
take a question so thanks once again for

00:47:59,030 --> 00:48:03,290
attention and I hope you enjoyed the

00:48:01,280 --> 00:48:07,800
talk and the Resta conference

00:48:03,290 --> 00:48:07,800

YouTube URL: https://www.youtube.com/watch?v=xnBm8TFLt_k


