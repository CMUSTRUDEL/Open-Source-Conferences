Title: How are we going to migrate to Scala 3.0, aka Dotty? - Lukas Rytz
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/how-are-we-going-to-migrate-to-scala-3-0-aka-dotty
Captions: 
	00:00:00,000 --> 00:00:06,210
good thank you everyone for coming I'm

00:00:03,000 --> 00:00:10,380
really happy to talk about Scala 3 today

00:00:06,210 --> 00:00:12,750
so if you look at the session at the

00:00:10,380 --> 00:00:15,330
session on you know at the schedule in

00:00:12,750 --> 00:00:18,060
the app then you see that I slightly

00:00:15,330 --> 00:00:20,699
changed the title so in in originally I

00:00:18,060 --> 00:00:23,730
was a question how are we going to

00:00:20,699 --> 00:00:26,039
migrate to Scala 3 and while preparing

00:00:23,730 --> 00:00:27,599
this talk I got you know I obviously

00:00:26,039 --> 00:00:29,550
myself started looking more and more

00:00:27,599 --> 00:00:32,130
into what scholar 3 is going to be like

00:00:29,550 --> 00:00:33,600
and myself I got quite a lot more

00:00:32,130 --> 00:00:36,239
confident that this thing is really

00:00:33,600 --> 00:00:38,520
going to go very well so I decided to

00:00:36,239 --> 00:00:41,489
change the title to be more you know

00:00:38,520 --> 00:00:43,590
more positive more certain that these

00:00:41,489 --> 00:00:47,610
things going to be a very nice

00:00:43,590 --> 00:00:50,129
transition into Scala 3 so we're really

00:00:47,610 --> 00:00:54,030
confident about this future I'm happy to

00:00:50,129 --> 00:00:55,949
talk about that today I'm working at in

00:00:54,030 --> 00:01:00,690
the Scala team at lifeand so that's the

00:00:55,949 --> 00:01:03,920
team maintaining scarlet - nowadays this

00:01:00,690 --> 00:01:06,869
is my twitter handle and for you know if

00:01:03,920 --> 00:01:09,450
you want to reach out to any anytime

00:01:06,869 --> 00:01:13,100
after the conference I'm located in burn

00:01:09,450 --> 00:01:13,100
zone one hour away from here only

00:01:15,080 --> 00:01:21,810
other than whom I I did a PhD in

00:01:18,330 --> 00:01:22,979
Martin's lab I since five years now I'm

00:01:21,810 --> 00:01:25,740
working for light band

00:01:22,979 --> 00:01:28,560
I worked on various aspects of the Scala

00:01:25,740 --> 00:01:31,619
- compiler lately mostly in the backend

00:01:28,560 --> 00:01:34,619
the optimizer 4 to 13 hours over - under

00:01:31,619 --> 00:01:38,060
standard libraries so all kinds of

00:01:34,619 --> 00:01:40,650
things here's the outline of the talk so

00:01:38,060 --> 00:01:44,549
there are three parts first part is a

00:01:40,650 --> 00:01:46,560
perspective on scholar 3 from somebody

00:01:44,549 --> 00:01:48,630
that wants to migrate to it so if you're

00:01:46,560 --> 00:01:50,490
an ordinary scholar - user and you want

00:01:48,630 --> 00:01:53,729
to migrate to scholar 3 you know what

00:01:50,490 --> 00:01:58,560
what is it going to be like in part to

00:01:53,729 --> 00:02:00,270
part ways called working together there

00:01:58,560 --> 00:02:03,750
are different aspects of working

00:02:00,270 --> 00:02:06,030
together so there's obviously how people

00:02:03,750 --> 00:02:08,360
and teams are working together to make

00:02:06,030 --> 00:02:10,759
scholar 3 a success

00:02:08,360 --> 00:02:13,190
but there's also very technical aspects

00:02:10,759 --> 00:02:16,130
in working together so how is the Scala

00:02:13,190 --> 00:02:18,530
free compiler working together with you

00:02:16,130 --> 00:02:22,370
know all the existing ecosystem around

00:02:18,530 --> 00:02:24,740
Scala so that's like the big title for

00:02:22,370 --> 00:02:27,020
the second part of the talk and the last

00:02:24,740 --> 00:02:28,670
part is a bit more practical questions

00:02:27,020 --> 00:02:31,570
you know that maybe come up when

00:02:28,670 --> 00:02:35,980
somebody wants to migrate to Scala 3

00:02:31,570 --> 00:02:35,980
I'll talk a bit about timeline as well

00:02:37,060 --> 00:02:42,860
all right

00:02:38,450 --> 00:02:44,990
part 1 perspective on scarlet 3 so the

00:02:42,860 --> 00:02:48,230
goal of this talk is not to show you all

00:02:44,990 --> 00:02:50,510
the new nice and elegant features that's

00:02:48,230 --> 00:02:53,650
got three will bring along you've seen

00:02:50,510 --> 00:02:56,600
many of those in the keynote of course

00:02:53,650 --> 00:02:59,150
but still I want to present a few

00:02:56,600 --> 00:03:02,270
futures you know a few features that

00:02:59,150 --> 00:03:04,400
will Scala 3 will bring just to show how

00:03:02,270 --> 00:03:06,980
they relate to your Scala 2 code and

00:03:04,400 --> 00:03:08,660
also to make scholar 3 a bit more you

00:03:06,980 --> 00:03:15,680
know give it a bit of a promotion and

00:03:08,660 --> 00:03:17,510
whet your appetite yeah so if you if you

00:03:15,680 --> 00:03:20,120
want you know to explain to somebody

00:03:17,510 --> 00:03:22,700
what is scholar 3 all about what are the

00:03:20,120 --> 00:03:24,620
core principles behind it you know we

00:03:22,700 --> 00:03:26,840
discussed about this if you know many

00:03:24,620 --> 00:03:29,600
times already of course and and kind of

00:03:26,840 --> 00:03:32,620
this dilt distilled it into these four

00:03:29,600 --> 00:03:35,150
points that I've I have on this slide

00:03:32,620 --> 00:03:37,580
maybe if you look at other resources the

00:03:35,150 --> 00:03:40,550
first point the first point here

00:03:37,580 --> 00:03:42,620
compatibility with Scala - that doesn't

00:03:40,550 --> 00:03:44,780
show up all that often so you know

00:03:42,620 --> 00:03:47,450
people usually talk about Scala 3 about

00:03:44,780 --> 00:03:50,570
all the simplifications and the new

00:03:47,450 --> 00:03:54,260
features and how great is going to be no

00:03:50,570 --> 00:03:56,180
doubt but in reality compatibility with

00:03:54,260 --> 00:03:59,690
Scala 2 is really at the core of

00:03:56,180 --> 00:04:02,420
everything that's happening in the

00:03:59,690 --> 00:04:04,400
development of Scala 3 and this point I

00:04:02,420 --> 00:04:07,730
put it on the top now on this slide

00:04:04,400 --> 00:04:10,489
because by now it is really on the top

00:04:07,730 --> 00:04:12,140
of the priority list maybe it was a bit

00:04:10,489 --> 00:04:14,360
further down in the beginning but it

00:04:12,140 --> 00:04:16,459
slowly started bubbling up the more we

00:04:14,360 --> 00:04:19,370
start we discussed about you know what

00:04:16,459 --> 00:04:21,020
how is this actually going to happen so

00:04:19,370 --> 00:04:22,190
by now everything that's happening at

00:04:21,020 --> 00:04:24,500
Scala 3 will

00:04:22,190 --> 00:04:28,730
always keeps the compatibility of Scala

00:04:24,500 --> 00:04:30,350
to in mind other than that the main

00:04:28,730 --> 00:04:32,900
principles behind Scala 3 are

00:04:30,350 --> 00:04:35,180
simplifications so this language

00:04:32,900 --> 00:04:40,640
features that are maybe you know too

00:04:35,180 --> 00:04:42,290
complex we want to kind of make some

00:04:40,640 --> 00:04:45,080
things easier to use for the programmers

00:04:42,290 --> 00:04:49,550
and maybe also for the language

00:04:45,080 --> 00:04:51,950
implementers one thing that has really

00:04:49,550 --> 00:04:55,940
changed between Scala through 2 and

00:04:51,950 --> 00:04:57,590
Scala 3 is the fact that Scala is

00:04:55,940 --> 00:04:59,630
becoming more opinionated I will talk

00:04:57,590 --> 00:05:02,840
about this a bit more on the next slide

00:04:59,630 --> 00:05:05,210
but scarlet 3 really tries to embrace

00:05:02,840 --> 00:05:08,990
idioms in praise patterns that are

00:05:05,210 --> 00:05:12,410
common in Scala and make them easier to

00:05:08,990 --> 00:05:14,960
write for the programmers and the last

00:05:12,410 --> 00:05:18,590
point is a consistency so in for

00:05:14,960 --> 00:05:20,150
scholars strengths that means there are

00:05:18,590 --> 00:05:23,330
many aspects of Scala that were

00:05:20,150 --> 00:05:26,180
considered where you know the Scala 3

00:05:23,330 --> 00:05:29,200
team looked at maybe missing pieces odds

00:05:26,180 --> 00:05:32,180
and ends where you know Scala has a

00:05:29,200 --> 00:05:33,740
solid baseline but you know maybe some

00:05:32,180 --> 00:05:36,020
inconsistencies here and there and

00:05:33,740 --> 00:05:39,740
thinking most of the time type system in

00:05:36,020 --> 00:05:41,990
this area so yeah let me talk a bit more

00:05:39,740 --> 00:05:47,419
about this paradigm shift about you know

00:05:41,990 --> 00:05:50,120
Scala becoming more open yet so the best

00:05:47,419 --> 00:05:54,620
example to talk about this I think is X

00:05:50,120 --> 00:05:54,980
is the is implicit in Scala - implicit

00:05:54,620 --> 00:06:00,230
s--

00:05:54,980 --> 00:06:02,240
can be used for a lot of things in

00:06:00,230 --> 00:06:04,669
practice these are the most common

00:06:02,240 --> 00:06:07,250
you know programming patterns that are

00:06:04,669 --> 00:06:10,600
expressed using implicit type classes of

00:06:07,250 --> 00:06:13,210
course they were discussed in various

00:06:10,600 --> 00:06:17,120
talks already in this conference

00:06:13,210 --> 00:06:20,150
extension methods contextual abstraction

00:06:17,120 --> 00:06:23,000
which means you just want to you know to

00:06:20,150 --> 00:06:24,530
pass parameter along that is a very

00:06:23,000 --> 00:06:27,860
common pattern now in the scholar 3

00:06:24,530 --> 00:06:32,540
compiler the way it's implemented and

00:06:27,860 --> 00:06:35,120
also type level computation so the

00:06:32,540 --> 00:06:37,449
Scala twin places are a very very low

00:06:35,120 --> 00:06:41,120
level feature which allows you to

00:06:37,449 --> 00:06:43,430
implement all of these things but as a

00:06:41,120 --> 00:06:46,250
user as an average user if you see a

00:06:43,430 --> 00:06:49,220
type class or if you see some type level

00:06:46,250 --> 00:06:51,320
computation you see implicit keywords

00:06:49,220 --> 00:06:53,360
and you start wondering okay you know

00:06:51,320 --> 00:06:56,150
you have to kind of know the pattern how

00:06:53,360 --> 00:06:58,310
these things are expressed in order to

00:06:56,150 --> 00:07:00,380
understand what's going on in order to

00:06:58,310 --> 00:07:02,030
understand even what this is about so in

00:07:00,380 --> 00:07:03,979
order to understand oh this is a type

00:07:02,030 --> 00:07:06,889
class and you know here I'm using a type

00:07:03,979 --> 00:07:10,750
plus you have to know this is one way of

00:07:06,889 --> 00:07:17,020
using implicit so it's very indirect and

00:07:10,750 --> 00:07:20,240
in Scala 3 all of these features get

00:07:17,020 --> 00:07:25,130
specific support in the language so the

00:07:20,240 --> 00:07:27,110
implicit keyword will will slowly slowly

00:07:25,130 --> 00:07:29,120
be phased out so you will see it less

00:07:27,110 --> 00:07:32,990
and less when you look at Scala 3 code

00:07:29,120 --> 00:07:38,000
and the idea is really to allow

00:07:32,990 --> 00:07:40,160
programmers to to express their intent

00:07:38,000 --> 00:07:41,750
so I want to you know create a type

00:07:40,160 --> 00:07:45,830
class I want to use a high class of

00:07:41,750 --> 00:07:48,050
their syntax for that and as somebody

00:07:45,830 --> 00:07:50,810
who has been working with martin for 10

00:07:48,050 --> 00:07:55,639
years now it could say it's it's really

00:07:50,810 --> 00:07:58,700
not only you know so maybe I should so

00:07:55,639 --> 00:08:00,620
10 years ago I remember in places were

00:07:58,700 --> 00:08:03,199
considered really cool because it was

00:08:00,620 --> 00:08:06,160
such a powerful feature that would allow

00:08:03,199 --> 00:08:07,970
you to do many things you know without

00:08:06,160 --> 00:08:10,220
complicating the language meaning

00:08:07,970 --> 00:08:12,740
without adding stuff to the language and

00:08:10,220 --> 00:08:14,870
it was considered a strength of Scala

00:08:12,740 --> 00:08:17,180
that we have one feature to express many

00:08:14,870 --> 00:08:19,340
different things and that's really a

00:08:17,180 --> 00:08:23,389
change of perspective now that happened

00:08:19,340 --> 00:08:24,800
now we look at Scala and a slightly

00:08:23,389 --> 00:08:26,720
different way and say hey you know

00:08:24,800 --> 00:08:30,160
people want to do this let's give them

00:08:26,720 --> 00:08:33,500
the best way to achieve it

00:08:30,160 --> 00:08:36,020
ok so I'm going to run through a few

00:08:33,500 --> 00:08:38,120
examples you've seen this already in

00:08:36,020 --> 00:08:40,039
Martin's keynote so I can go fast but

00:08:38,120 --> 00:08:41,810
when you define an extension method in

00:08:40,039 --> 00:08:44,990
Scala 2 you have to be really careful

00:08:41,810 --> 00:08:47,760
not to mess things up so one

00:08:44,990 --> 00:08:49,650
interesting example is that what you can

00:08:47,760 --> 00:08:51,300
define an implicit class to create an

00:08:49,650 --> 00:08:54,210
extension method but you have to be

00:08:51,300 --> 00:08:56,220
really are careful to make this value

00:08:54,210 --> 00:08:59,040
here private because what happens

00:08:56,220 --> 00:09:02,790
otherwise otherwise every string will

00:08:59,040 --> 00:09:08,070
suddenly get an S extension method or

00:09:02,790 --> 00:09:10,170
field which returns itself and avoiding

00:09:08,070 --> 00:09:14,130
this kind of you know corner cases is

00:09:10,170 --> 00:09:17,610
yeah it's really annoying and it comes

00:09:14,130 --> 00:09:23,040
up again and again so yeah you see how

00:09:17,610 --> 00:09:25,320
it looks in Scala 3 second example again

00:09:23,040 --> 00:09:29,190
I will say this a few more times you've

00:09:25,320 --> 00:09:32,820
seen it in the keynote already yeah

00:09:29,190 --> 00:09:36,420
Ino is the new feature to express it

00:09:32,820 --> 00:09:37,920
abstract data types also to replace

00:09:36,420 --> 00:09:39,990
colors of enumeration the scholar the

00:09:37,920 --> 00:09:41,880
dentate enumeration is defined in the

00:09:39,990 --> 00:09:43,650
library and it uses hacks with

00:09:41,880 --> 00:09:45,120
reflection and it's also difficult if

00:09:43,650 --> 00:09:47,700
you want to add a feature to it it's

00:09:45,120 --> 00:09:50,400
really not easy often to you know so

00:09:47,700 --> 00:09:51,320
this thing has yeah has not been lost

00:09:50,400 --> 00:09:53,700
very much

00:09:51,320 --> 00:09:56,880
so you know of course it's a replacement

00:09:53,700 --> 00:09:58,740
for that but also for a TTS again when

00:09:56,880 --> 00:10:01,530
you define an ADT in Scala - there's

00:09:58,740 --> 00:10:03,180
just boilerplate associated with it and

00:10:01,530 --> 00:10:07,680
you have to be careful to get everything

00:10:03,180 --> 00:10:10,440
right and in Scala 3 this very common

00:10:07,680 --> 00:10:12,650
pattern just becomes simpler to write

00:10:10,440 --> 00:10:12,650
down

00:10:13,670 --> 00:10:18,420
okay last example is a type class

00:10:16,170 --> 00:10:21,060
encoding it's the same type Loess that

00:10:18,420 --> 00:10:25,500
miles used in his presentation just in

00:10:21,060 --> 00:10:28,500
the previous session here's how you do

00:10:25,500 --> 00:10:30,630
it in Scala so in Scala - so you have to

00:10:28,500 --> 00:10:32,550
be again quite careful we have to you

00:10:30,630 --> 00:10:34,410
know you have to make sure to use an

00:10:32,550 --> 00:10:36,630
implicit value or an object here and it

00:10:34,410 --> 00:10:38,880
could be a deaf as well but anyway that

00:10:36,630 --> 00:10:42,810
would be not very efficient you have to

00:10:38,880 --> 00:10:44,790
make sure you could use a you you know

00:10:42,810 --> 00:10:48,180
you create a primes method here to

00:10:44,790 --> 00:10:52,860
create a show type for option that

00:10:48,180 --> 00:10:54,240
itself takes an implicit show and yeah

00:10:52,860 --> 00:10:56,670
this is just a good example where you

00:10:54,240 --> 00:10:58,680
have implicit the keyword showing up in

00:10:56,670 --> 00:11:00,870
various places and you have to

00:10:58,680 --> 00:11:04,050
get it right it's not very easy and as a

00:11:00,870 --> 00:11:05,730
as a user you have to learn to see

00:11:04,050 --> 00:11:08,820
through this pattern to understand

00:11:05,730 --> 00:11:10,350
what's going on so yeah here's the new

00:11:08,820 --> 00:11:13,320
syntax for that basically everything

00:11:10,350 --> 00:11:16,140
every place where implicit shows up in

00:11:13,320 --> 00:11:20,580
the code will be replaced by something

00:11:16,140 --> 00:11:23,459
new so you can define implicit instances

00:11:20,580 --> 00:11:27,180
using the delegate keyword the the name

00:11:23,459 --> 00:11:32,270
of the instance can be given or not so

00:11:27,180 --> 00:11:36,540
it can be anonymous and the like for

00:11:32,270 --> 00:11:39,810
parametrized instances the syntax is

00:11:36,540 --> 00:11:42,390
more closely related let's see it's

00:11:39,810 --> 00:11:44,640
important to see that the definition of

00:11:42,390 --> 00:11:46,320
the type class is still a trait or an

00:11:44,640 --> 00:11:49,620
abstract class so that didn't change and

00:11:46,320 --> 00:11:51,810
also using a type class on the bottom on

00:11:49,620 --> 00:11:54,570
the last line it's the same so here's

00:11:51,810 --> 00:12:01,980
the same example in as it looks in in

00:11:54,570 --> 00:12:05,970
Scala 3 yeah it's worth mentioning that

00:12:01,980 --> 00:12:10,560
it's the the Scala 3 is providing more

00:12:05,970 --> 00:12:12,600
than just syntax the interesting feature

00:12:10,560 --> 00:12:14,940
in this area is type plus derivation

00:12:12,600 --> 00:12:19,920
where Scala 3 gives you primitives too

00:12:14,940 --> 00:12:23,730
so as if you write a tie plus you can

00:12:19,920 --> 00:12:25,860
actually like define how instances of

00:12:23,730 --> 00:12:30,029
your type last should look like using a

00:12:25,860 --> 00:12:32,310
very generic representation and then if

00:12:30,029 --> 00:12:34,860
somebody wants to extend your show type

00:12:32,310 --> 00:12:37,470
class if it has the right structure you

00:12:34,860 --> 00:12:39,720
can just use your generic representation

00:12:37,470 --> 00:12:42,209
and doesn't have to write any code so

00:12:39,720 --> 00:12:44,730
there's also a lot of invention going on

00:12:42,209 --> 00:12:49,310
again Myles talked about this a lot in

00:12:44,730 --> 00:12:49,310
his tour in just a previous session

00:12:52,480 --> 00:12:57,230
so this one goes in the category of

00:12:54,740 --> 00:12:59,209
enhancing scholars strengths I would say

00:12:57,230 --> 00:13:01,399
of course the scholar type system is one

00:12:59,209 --> 00:13:03,199
of its you know core features is one of

00:13:01,399 --> 00:13:04,999
the distinguishing features of scholar

00:13:03,199 --> 00:13:07,430
that it has very strong type system and

00:13:04,999 --> 00:13:10,459
there's quite a lot of evolution going

00:13:07,430 --> 00:13:13,670
on in this area so scholar 3 adds union

00:13:10,459 --> 00:13:15,350
and intersection types it's worth

00:13:13,670 --> 00:13:19,360
mentioning that they are not tact the

00:13:15,350 --> 00:13:22,970
union types are not tact which means if

00:13:19,360 --> 00:13:26,990
so there's if you have a value of a

00:13:22,970 --> 00:13:30,439
union type it's just either or the value

00:13:26,990 --> 00:13:33,529
often that matches but there's nothing

00:13:30,439 --> 00:13:36,439
no information at runtime telling which

00:13:33,529 --> 00:13:38,749
of the two cases it is actually

00:13:36,439 --> 00:13:40,220
represented right now so there are

00:13:38,749 --> 00:13:42,499
corner cases when at runtime you

00:13:40,220 --> 00:13:43,910
couldn't tell apart you know which of

00:13:42,499 --> 00:13:48,290
the two types you are in but they are

00:13:43,910 --> 00:13:52,430
pretty rare other features in the type

00:13:48,290 --> 00:13:55,730
system type lambdas Martin mentioned in

00:13:52,430 --> 00:13:57,860
his keynote the various new kinds of

00:13:55,730 --> 00:14:00,350
function types that scholar 3 supports

00:13:57,860 --> 00:14:06,350
and there's also a new type inference

00:14:00,350 --> 00:14:08,809
algorithm which is it's more powerful so

00:14:06,350 --> 00:14:12,800
it can sometimes give you better

00:14:08,809 --> 00:14:18,170
solutions at inferring the types for

00:14:12,800 --> 00:14:20,779
complex expressions ok so that was my

00:14:18,170 --> 00:14:24,709
quick overview of a few scholar 3

00:14:20,779 --> 00:14:28,430
features that are coming but now we are

00:14:24,709 --> 00:14:31,029
going to put them into categories by how

00:14:28,430 --> 00:14:34,040
they affect migration from scholar to

00:14:31,029 --> 00:14:36,350
created I created four categories here

00:14:34,040 --> 00:14:39,319
one is breaking changes in scholar 3

00:14:36,350 --> 00:14:42,410
second is new feature so stuff that you

00:14:39,319 --> 00:14:44,000
can start using one who migrated number

00:14:42,410 --> 00:14:46,160
three is features that continued to be

00:14:44,000 --> 00:14:48,290
supported so existing scholar 2 features

00:14:46,160 --> 00:14:51,350
that are still the same in scholar three

00:14:48,290 --> 00:14:54,290
but de-emphasized which so features that

00:14:51,350 --> 00:14:57,860
you know like in places that are slowly

00:14:54,290 --> 00:15:00,350
being phased out in favor of new things

00:14:57,860 --> 00:15:05,889
and number four is stuff that didn't

00:15:00,350 --> 00:15:08,559
change so breaking changes for some so

00:15:05,889 --> 00:15:11,199
general existential types are no longer

00:15:08,559 --> 00:15:12,970
supported in in source code in Scala

00:15:11,199 --> 00:15:15,819
three source codes or the Scala 3

00:15:12,970 --> 00:15:18,639
compiler doesn't know that keyword for

00:15:15,819 --> 00:15:22,679
some wild cards are the same as they

00:15:18,639 --> 00:15:22,679
used to be in Scala 2 so they still work

00:15:23,759 --> 00:15:28,689
another feature that's not supported in

00:15:25,869 --> 00:15:31,209
Scala 3 is early initializers it's a bit

00:15:28,689 --> 00:15:34,029
of a corner case which is that if you

00:15:31,209 --> 00:15:37,269
happen to use it I guess most people

00:15:34,029 --> 00:15:38,859
wouldn't have never come across it but

00:15:37,269 --> 00:15:41,649
if you happen to use it there are

00:15:38,859 --> 00:15:45,009
workarounds already today that you can

00:15:41,649 --> 00:15:47,619
use in Scala 2 and Scala 3 provides

00:15:45,009 --> 00:15:50,410
straight parameters which which are

00:15:47,619 --> 00:15:52,899
really a good replacement for early

00:15:50,410 --> 00:15:55,169
initializers there are a number of

00:15:52,899 --> 00:16:00,579
features that scholar 3 supports in

00:15:55,169 --> 00:16:03,459
compatibility mode so these are not very

00:16:00,579 --> 00:16:06,069
complex mostly syntax tough so procedure

00:16:03,459 --> 00:16:10,209
syntax has been deprecated already I

00:16:06,069 --> 00:16:11,799
think into 13 symbol literals order

00:16:10,209 --> 00:16:14,949
application so if you have a function

00:16:11,799 --> 00:16:17,829
that takes an empty parameter list you

00:16:14,949 --> 00:16:23,559
have to actually provide you an empty

00:16:17,829 --> 00:16:24,939
parameter listed at call site ok delayed

00:16:23,559 --> 00:16:28,720
in it is

00:16:24,939 --> 00:16:30,910
I heard going to be supported in Scala 3

00:16:28,720 --> 00:16:36,999
in the end it's not implemented at this

00:16:30,910 --> 00:16:39,189
point packages in implicit scope so

00:16:36,999 --> 00:16:42,749
that's a there's a small change in

00:16:39,189 --> 00:16:47,169
implicit resolution that the packages

00:16:42,749 --> 00:16:50,289
like so when you when an object all is

00:16:47,169 --> 00:16:52,869
in implicit scopes then its parents are

00:16:50,289 --> 00:16:55,989
as well so it's enclosing scope as well

00:16:52,869 --> 00:16:59,039
but Scala 3 exclude packages there and

00:16:55,989 --> 00:17:01,899
but in again in this compatibility mode

00:16:59,039 --> 00:17:04,240
it is going to be supported and one

00:17:01,899 --> 00:17:07,799
small thing that I'm a bit sad about

00:17:04,240 --> 00:17:07,799
it's the snail operator

00:17:08,170 --> 00:17:12,970
it comes up in pattern matching with

00:17:10,480 --> 00:17:14,559
wire arcs maybe you've used it I think

00:17:12,970 --> 00:17:17,800
I've used it one so far

00:17:14,559 --> 00:17:26,230
I just find it cute but unfortunately it

00:17:17,800 --> 00:17:28,300
has new syntax in Scala 3 ok one big

00:17:26,230 --> 00:17:29,890
breaking change that I didn't mention on

00:17:28,300 --> 00:17:32,770
the previous slide is macros and maker

00:17:29,890 --> 00:17:33,970
programming so macros in Scala 3 are

00:17:32,770 --> 00:17:36,550
going to be different than they are

00:17:33,970 --> 00:17:39,400
today in Scala 2 so there's going to be

00:17:36,550 --> 00:17:42,880
a new API to implement macros the new

00:17:39,400 --> 00:17:46,179
API is more principled so it's in Scala

00:17:42,880 --> 00:17:48,130
2e literally but we basically expose the

00:17:46,179 --> 00:17:51,940
internals of the compiler to the user

00:17:48,130 --> 00:17:53,470
that writes a macro and you know if you

00:17:51,940 --> 00:17:56,100
want you get full access to all the

00:17:53,470 --> 00:17:58,270
compiler internals you can you can do

00:17:56,100 --> 00:18:01,540
basically a lot of complicated things

00:17:58,270 --> 00:18:03,040
that confuse the type checker you can

00:18:01,540 --> 00:18:06,160
also shoot yourself in the foot very

00:18:03,040 --> 00:18:08,170
easily by creating trees in the wrong

00:18:06,160 --> 00:18:10,780
shape or trees with the wrong types and

00:18:08,170 --> 00:18:13,420
things like this so the new API for

00:18:10,780 --> 00:18:16,540
macros in Scala 3 is is more principled

00:18:13,420 --> 00:18:19,870
it's more so it has like better

00:18:16,540 --> 00:18:22,390
foundations with inline and quotes with

00:18:19,870 --> 00:18:25,360
quotes and splice so sorry and the API

00:18:22,390 --> 00:18:27,070
that you use to write your macros to

00:18:25,360 --> 00:18:29,740
analyze the syntax trees and to build

00:18:27,070 --> 00:18:34,840
new syntax trees is based on tasty which

00:18:29,740 --> 00:18:38,140
means which means the API is supposed to

00:18:34,840 --> 00:18:43,120
be stable over a long time over many

00:18:38,140 --> 00:18:45,610
versions of Scala 3 yeah so there was a

00:18:43,120 --> 00:18:46,120
talk today by Nikola spooky I think I

00:18:45,610 --> 00:18:48,730
missed it

00:18:46,120 --> 00:18:52,780
yeah I think tomorrow ok so let's talk

00:18:48,730 --> 00:18:54,640
tomorrow then where he will show how

00:18:52,780 --> 00:18:59,320
many programming in dot e in Scala 3

00:18:54,640 --> 00:19:01,720
works some macros are no longer needed

00:18:59,320 --> 00:19:03,340
and that's actually a big one again mass

00:19:01,720 --> 00:19:05,620
talked about is just in the previous

00:19:03,340 --> 00:19:07,179
session but especially everything that

00:19:05,620 --> 00:19:09,250
is related to tie plus derivation can

00:19:07,179 --> 00:19:10,929
now be handled by the language without

00:19:09,250 --> 00:19:16,700
macros and I think that's a really big

00:19:10,929 --> 00:19:19,730
improvement good

00:19:16,700 --> 00:19:23,500
last breaking change his specialization

00:19:19,730 --> 00:19:26,360
so there the scholar three-team is still

00:19:23,500 --> 00:19:27,650
you know that's one of the things that's

00:19:26,360 --> 00:19:31,700
still on the drawing board it's still

00:19:27,650 --> 00:19:34,840
being considered scholar 3 I was told

00:19:31,700 --> 00:19:37,760
will support at least whoops

00:19:34,840 --> 00:19:40,340
specialization for core types so it was

00:19:37,760 --> 00:19:41,840
support specialization for functions and

00:19:40,340 --> 00:19:43,790
tuples which is really needed for

00:19:41,840 --> 00:19:48,770
performance if you using Scala and the

00:19:43,790 --> 00:19:51,430
standard library you know how difficult

00:19:48,770 --> 00:19:53,030
is it to implement specialization so

00:19:51,430 --> 00:19:54,710
specializing methods

00:19:53,030 --> 00:19:57,010
apparently up well it's a relatively

00:19:54,710 --> 00:20:00,530
straightforward just duplicating code

00:19:57,010 --> 00:20:02,600
specializing classes gets a bit more

00:20:00,530 --> 00:20:04,700
complicated specialized in super classes

00:20:02,600 --> 00:20:08,840
and trades that's where where it gets

00:20:04,700 --> 00:20:10,700
really hard so it's again it's not yet

00:20:08,840 --> 00:20:13,420
clear what will happen exactly in Scala

00:20:10,700 --> 00:20:17,060
3 with the ad specialised annotation and

00:20:13,420 --> 00:20:20,150
definitely are the people at EPFL at the

00:20:17,060 --> 00:20:22,760
lab are interested to hear you know

00:20:20,150 --> 00:20:28,510
about what are the important use cases

00:20:22,760 --> 00:20:32,300
so reach out if you are affected good

00:20:28,510 --> 00:20:34,850
second category of change like changes

00:20:32,300 --> 00:20:40,010
in Scala 3 is new features so here's a

00:20:34,850 --> 00:20:42,350
short list trade parameters opaque types

00:20:40,010 --> 00:20:45,770
were mentioned already top-level

00:20:42,350 --> 00:20:48,830
definitions enums extension methods

00:20:45,770 --> 00:20:50,780
change the type system and then like new

00:20:48,830 --> 00:20:54,230
meta programming facilities match types

00:20:50,780 --> 00:20:56,540
in 9 matches yeah I'm not going into

00:20:54,230 --> 00:21:00,590
details on this slide I put a few in

00:20:56,540 --> 00:21:02,270
green and these green boxes are things

00:21:00,590 --> 00:21:05,360
that are basically on the roadmap for

00:21:02,270 --> 00:21:06,680
back part in 2 to 14 so that means you

00:21:05,360 --> 00:21:08,600
will be able to start using these

00:21:06,680 --> 00:21:11,060
features already in the Scala two series

00:21:08,600 --> 00:21:16,280
and they will be available for cross

00:21:11,060 --> 00:21:18,110
building between Scala - and Scala 3 so

00:21:16,280 --> 00:21:20,180
yeah once you migrate it to scholar 3 of

00:21:18,110 --> 00:21:22,100
course you can start gradually migrate

00:21:20,180 --> 00:21:24,920
in your code using start using the new

00:21:22,100 --> 00:21:28,220
feature but again cross building will be

00:21:24,920 --> 00:21:29,779
a limiting factor for awhile so projects

00:21:28,220 --> 00:21:32,269
that do cross build between state

00:21:29,779 --> 00:21:38,359
Scala 2 & 3 there will be limited to the

00:21:32,269 --> 00:21:41,029
uncommon subset good now next category

00:21:38,359 --> 00:21:45,289
Scala 2 features that will continue to

00:21:41,029 --> 00:21:48,259
work on scholar 3 actually most people

00:21:45,289 --> 00:21:51,019
when you know talk in the hallways and

00:21:48,259 --> 00:21:53,299
as people around I hear that a lot of

00:21:51,019 --> 00:21:56,210
people are not really aware that Scala 3

00:21:53,299 --> 00:21:58,639
the scholar 3 compiled as it is today it

00:21:56,210 --> 00:22:00,619
supports almost all of Scala 2

00:21:58,639 --> 00:22:02,690
there's very very little code that

00:22:00,619 --> 00:22:05,570
actually doesn't work when using the

00:22:02,690 --> 00:22:08,629
scholar 3 compiler so here's a list of

00:22:05,570 --> 00:22:10,549
things that work exactly in the same way

00:22:08,629 --> 00:22:12,080
as they work on the Scala 3 well ok

00:22:10,549 --> 00:22:15,440
maybe there are small differences in

00:22:12,080 --> 00:22:15,830
type inference fine but in general the

00:22:15,440 --> 00:22:17,960
Scala

00:22:15,830 --> 00:22:19,849
3 compiler compiles all of these

00:22:17,960 --> 00:22:22,009
features the same as the scholar -

00:22:19,849 --> 00:22:24,289
compiler so implicit there's no change

00:22:22,009 --> 00:22:26,389
how scholar 3 handles in place it's it

00:22:24,289 --> 00:22:28,909
continues to support implicit parameters

00:22:26,389 --> 00:22:31,940
implicit conversions in place in classes

00:22:28,909 --> 00:22:34,999
also value classes are here

00:22:31,940 --> 00:22:37,519
xml literals compound types are still

00:22:34,999 --> 00:22:40,190
there package object objects are still

00:22:37,519 --> 00:22:42,289
there so this is just to assure you when

00:22:40,190 --> 00:22:44,629
you start cross building your existing

00:22:42,289 --> 00:22:46,820
project your scholar 3 it's not you

00:22:44,629 --> 00:22:49,849
don't have to limit yourself to a very

00:22:46,820 --> 00:22:53,059
small subset of Scala but you can

00:22:49,849 --> 00:22:56,239
basically continue to use Scala the way

00:22:53,059 --> 00:23:00,190
you do it today and with for many

00:22:56,239 --> 00:23:04,609
projectors will cross build quite easily

00:23:00,190 --> 00:23:07,759
that's our goal of course yeah things

00:23:04,609 --> 00:23:09,859
that didn't change in Scala 3 the

00:23:07,759 --> 00:23:13,450
standard library including collections

00:23:09,859 --> 00:23:16,369
of course so the way this works today is

00:23:13,450 --> 00:23:18,710
when scholar 3 itself

00:23:16,369 --> 00:23:21,109
well the preview releases that are being

00:23:18,710 --> 00:23:24,019
published does not have its own

00:23:21,109 --> 00:23:28,509
collection in standard library so the

00:23:24,019 --> 00:23:31,879
Scala 3 release uses a scholar to binary

00:23:28,509 --> 00:23:33,440
standard library it uses some additional

00:23:31,879 --> 00:23:36,019
classes so there's an additional chart

00:23:33,440 --> 00:23:38,299
file it uses some tricks to replace some

00:23:36,019 --> 00:23:40,399
classes on the class path so I'm not

00:23:38,299 --> 00:23:41,690
aware of all the details but it's

00:23:40,399 --> 00:23:42,880
important to know that the standard

00:23:41,690 --> 00:23:45,370
library is the same

00:23:42,880 --> 00:23:48,750
and it will be the same between Scala 3

00:23:45,370 --> 00:23:52,690
the final reason to scholar 2:14 release

00:23:48,750 --> 00:23:56,050
the tooling we will invest of course to

00:23:52,690 --> 00:23:58,660
make sure that all the tooling that is

00:23:56,050 --> 00:24:02,860
important for for the users is going to

00:23:58,660 --> 00:24:08,740
continue to work and then of course a

00:24:02,860 --> 00:24:11,200
big well a very big step for every major

00:24:08,740 --> 00:24:13,690
Scala release is getting the ecosystem

00:24:11,200 --> 00:24:15,360
ready so we just released Scala to 13

00:24:13,690 --> 00:24:18,160
and now you know people are slowly

00:24:15,360 --> 00:24:19,660
waiting and to be able to publish the

00:24:18,160 --> 00:24:22,930
library waiting for the dependencies to

00:24:19,660 --> 00:24:26,590
become available and Scala 3 is going to

00:24:22,930 --> 00:24:28,210
have the same improved bootstrap

00:24:26,590 --> 00:24:29,680
procedure to some degree there's going

00:24:28,210 --> 00:24:34,090
to I will talk about binary

00:24:29,680 --> 00:24:37,810
compatibility in a while and we are we

00:24:34,090 --> 00:24:40,390
are really committed to help maintains

00:24:37,810 --> 00:24:42,430
of libraries to cross build their

00:24:40,390 --> 00:24:44,500
libraries for Scala 2 and 3 and make

00:24:42,430 --> 00:24:46,270
sure that the ecosystem is available

00:24:44,500 --> 00:24:50,260
will be available for search crawler 3

00:24:46,270 --> 00:24:52,510
so as a user if you migrate from 2 to 3

00:24:50,260 --> 00:24:54,460
you don't have to think about changing

00:24:52,510 --> 00:24:57,220
you know all your dependencies at the

00:24:54,460 --> 00:25:01,270
same time so the goal here really is

00:24:57,220 --> 00:25:03,760
that as a user I can choose you know to

00:25:01,270 --> 00:25:05,590
update my dependencies get ready get my

00:25:03,760 --> 00:25:07,930
project in shape and then I can move to

00:25:05,590 --> 00:25:16,060
scholar 3 with the same dependencies

00:25:07,930 --> 00:25:18,880
that I'm already using I assume yes I

00:25:16,060 --> 00:25:21,610
assume that you 14 yeah so I will talk

00:25:18,880 --> 00:25:26,830
about to 14 row map and timeline still

00:25:21,610 --> 00:25:28,660
in a bit but yes the goal for yeah so

00:25:26,830 --> 00:25:32,260
our the way we see it is people would

00:25:28,660 --> 00:25:38,230
migrate from Scala to 13 to 14 and from

00:25:32,260 --> 00:25:40,720
there to Scala 3 ok and just you know a

00:25:38,230 --> 00:25:42,700
random selection of features that are

00:25:40,720 --> 00:25:44,920
still the same in Scala 3 those classes

00:25:42,700 --> 00:25:47,290
and objects functions pattern matching

00:25:44,920 --> 00:25:50,020
all these things didn't change the

00:25:47,290 --> 00:25:52,060
platform's ciao interoperability we

00:25:50,020 --> 00:25:54,130
continue to do use the same test suite

00:25:52,060 --> 00:25:59,620
Nick cetera

00:25:54,130 --> 00:26:04,210
okay good that was it for part one maybe

00:25:59,620 --> 00:26:08,820
I have to speed up a little okay

00:26:04,210 --> 00:26:11,530
part two working together this slide is

00:26:08,820 --> 00:26:12,880
I'm still going to spend some time on it

00:26:11,530 --> 00:26:14,950
because I think it's important maybe

00:26:12,880 --> 00:26:18,370
people are not so much you know aware of

00:26:14,950 --> 00:26:20,710
all the Geographics behind Scala this

00:26:18,370 --> 00:26:24,790
red circle with the big red box that's

00:26:20,710 --> 00:26:27,490
EPFL so who is located that EPFL lamp is

00:26:24,790 --> 00:26:30,850
the research lab where marked in other

00:26:27,490 --> 00:26:34,240
scales delete that's the lab that

00:26:30,850 --> 00:26:36,340
develops scholar 3 the Scala 3 compiler

00:26:34,240 --> 00:26:39,250
of course it has other responsibilities

00:26:36,340 --> 00:26:42,340
also at EPFL is located the scholar

00:26:39,250 --> 00:26:45,090
center so the we are from Sebastian's

00:26:42,340 --> 00:26:48,040
the the lead of the Scala center the

00:26:45,090 --> 00:26:52,510
Scala center focuses on tooling we store

00:26:48,040 --> 00:26:54,700
metals today focus on education and in

00:26:52,510 --> 00:26:57,790
general fostering the scala community

00:26:54,700 --> 00:27:02,650
and then there's the Scala team at light

00:26:57,790 --> 00:27:06,490
Bend which maintains Scala to the Scala

00:27:02,650 --> 00:27:08,320
standard library led by Adrian and you

00:27:06,490 --> 00:27:11,440
see it's very distributed so we have

00:27:08,320 --> 00:27:14,310
Seth and Adrian in San Francisco we have

00:27:11,440 --> 00:27:17,500
Eugene in New York Stefan and me in

00:27:14,310 --> 00:27:22,900
middle of Europe and Jason in Australia

00:27:17,500 --> 00:27:25,030
that's how we work together and in 2008

00:27:22,900 --> 00:27:29,110
18 something very important happened

00:27:25,030 --> 00:27:35,200
namely Adrian he moved from SF into the

00:27:29,110 --> 00:27:37,840
red circle and so that's a year and a

00:27:35,200 --> 00:27:40,510
half ago right and in this one year and

00:27:37,840 --> 00:27:42,940
a half the communication between you

00:27:40,510 --> 00:27:45,430
know the Scala team and the lamp team

00:27:42,940 --> 00:27:49,060
the communication between Scala - and

00:27:45,430 --> 00:27:51,970
Scala three teams it has really it has

00:27:49,060 --> 00:27:53,680
accelerated and improved and we've been

00:27:51,970 --> 00:27:57,580
working much more closely together since

00:27:53,680 --> 00:28:01,090
then and I think this is one of the one

00:27:57,580 --> 00:28:05,130
big driver about behind making Scala -

00:28:01,090 --> 00:28:05,130
and Scala 3 finally coming together

00:28:05,450 --> 00:28:10,649
so where does Scala 3 you know where do

00:28:08,970 --> 00:28:12,929
all these discussions happen where is

00:28:10,649 --> 00:28:14,759
Karla 3 being developed most of the

00:28:12,929 --> 00:28:16,889
things are happening in public so

00:28:14,759 --> 00:28:19,470
there's a lot of discussion going on at

00:28:16,889 --> 00:28:23,190
the top the issue tracker and on pull

00:28:19,470 --> 00:28:24,330
requests also on the discussion forum so

00:28:23,190 --> 00:28:28,019
these things are really open to

00:28:24,330 --> 00:28:30,659
everybody the discussions are numerous

00:28:28,019 --> 00:28:32,490
and they are long and a lot of people

00:28:30,659 --> 00:28:35,460
are chiming in so we think this is

00:28:32,490 --> 00:28:37,799
working quite well the communities is

00:28:35,460 --> 00:28:39,990
very active in the development of

00:28:37,799 --> 00:28:41,549
scholar 3 as well there's the SIP

00:28:39,990 --> 00:28:44,039
committee where all the new features are

00:28:41,549 --> 00:28:46,799
being discussed the SIP committee has

00:28:44,039 --> 00:28:48,570
members of EPFL it has people from Scala

00:28:46,799 --> 00:28:51,659
Center people from light band but also

00:28:48,570 --> 00:28:53,159
people from the community so that's

00:28:51,659 --> 00:28:56,820
ultimately where features are being

00:28:53,159 --> 00:28:58,950
accepted or rejected and the notes

00:28:56,820 --> 00:29:00,629
meeting notes of the sip sip meetings

00:28:58,950 --> 00:29:04,169
are being published sometimes it's a

00:29:00,629 --> 00:29:06,869
small delay also for many in many cases

00:29:04,169 --> 00:29:09,119
there are there are videos online of

00:29:06,869 --> 00:29:11,039
like I think meeting some some time

00:29:09,119 --> 00:29:13,110
streamed on life on YouTube and the

00:29:11,039 --> 00:29:14,759
videos are available so again this is

00:29:13,110 --> 00:29:16,830
this is pretty open

00:29:14,759 --> 00:29:19,529
of course there's offline discussions

00:29:16,830 --> 00:29:21,240
over coffee and beer three times per

00:29:19,529 --> 00:29:23,369
year to the light band Scala team well

00:29:21,240 --> 00:29:25,490
delighted engineering people meet

00:29:23,369 --> 00:29:27,990
somewhere in Europe or in the US and

00:29:25,490 --> 00:29:29,399
Martin is there as well so these

00:29:27,990 --> 00:29:31,379
meetings are of course important to

00:29:29,399 --> 00:29:33,299
synchronize to discuss new stuff

00:29:31,379 --> 00:29:35,100
there's also weekly meetings at EPFL

00:29:33,299 --> 00:29:41,100
where adrian often joined since he's on

00:29:35,100 --> 00:29:43,440
campus basically okay so that's working

00:29:41,100 --> 00:29:45,990
together teams working together on a

00:29:43,440 --> 00:29:47,730
technical level like you know how how

00:29:45,990 --> 00:29:48,509
are the scholary this is going to work

00:29:47,730 --> 00:29:50,460
together

00:29:48,509 --> 00:29:52,830
that's basically what defines the

00:29:50,460 --> 00:29:56,100
roadmap for to 14 so to 14 is all about

00:29:52,830 --> 00:29:59,129
preparing for scholar 3 we are going to

00:29:56,100 --> 00:30:01,679
backport some features on the list is

00:29:59,129 --> 00:30:05,070
type lambdas or Paik types trait

00:30:01,679 --> 00:30:06,990
parameters and top-level definitions we

00:30:05,070 --> 00:30:09,690
didn't publish the scholar to 14 roadmap

00:30:06,990 --> 00:30:13,649
yet we will do that soon it will open it

00:30:09,690 --> 00:30:17,929
for discussions and and we of course

00:30:13,649 --> 00:30:17,929
we're happy for everybody to to chime in

00:30:18,139 --> 00:30:22,669
we will continue with deprecations of

00:30:20,299 --> 00:30:25,459
features that are that are you know

00:30:22,669 --> 00:30:28,029
slowly being phased out in Scala 3 so

00:30:25,459 --> 00:30:30,859
for some existential order application

00:30:28,029 --> 00:30:33,080
package object inheritance and early

00:30:30,859 --> 00:30:36,409
initializers are things on the list that

00:30:33,080 --> 00:30:40,639
that that might get deprecated and we

00:30:36,409 --> 00:30:42,259
are also going to we plan to remove some

00:30:40,639 --> 00:30:45,440
of the you know lighter feet like

00:30:42,259 --> 00:30:54,049
lighter syntax changes already that have

00:30:45,440 --> 00:30:55,820
been deprecated in 213 so if you look at

00:30:54,049 --> 00:30:59,239
the development of scala major releases

00:30:55,820 --> 00:30:59,929
212 213 214 this always happens one

00:30:59,239 --> 00:31:03,200
after the other

00:30:59,929 --> 00:31:05,899
okay so the Scala light pent team has

00:31:03,200 --> 00:31:08,089
now finished 213 the final is out okay

00:31:05,899 --> 00:31:10,820
there will be 213 one of course maybe

00:31:08,089 --> 00:31:13,369
people will find a buck or two but

00:31:10,820 --> 00:31:16,099
basically by the time 2 to 13 0 is

00:31:13,369 --> 00:31:19,159
released the team starts working on 214

00:31:16,099 --> 00:31:21,649
so that's that's the our modes of

00:31:19,159 --> 00:31:24,049
working on major releases now for Scala

00:31:21,649 --> 00:31:26,089
214 and scholar 3 this is different

00:31:24,049 --> 00:31:31,450
because they're being developed at the

00:31:26,089 --> 00:31:31,450
same time by different teams obviously

00:31:33,459 --> 00:31:39,049
timeline yeah there will be a slider

00:31:35,599 --> 00:31:40,700
about timeline later but so we will work

00:31:39,049 --> 00:31:42,320
on these two releases at the same time

00:31:40,700 --> 00:31:45,440
the two releases will share the stand

00:31:42,320 --> 00:31:48,229
the same standard library how it works

00:31:45,440 --> 00:31:50,749
technically in detail that's there might

00:31:48,229 --> 00:31:52,729
be a few changes still but it's it's

00:31:50,749 --> 00:31:56,539
going to be the same standard library in

00:31:52,729 --> 00:31:59,419
the two releases we will invest between

00:31:56,539 --> 00:32:01,879
the two teams invest a lot of time in

00:31:59,419 --> 00:32:03,889
sharing more code so we want to make

00:32:01,879 --> 00:32:06,799
sure that the two compilers used the

00:32:03,889 --> 00:32:09,079
same test suite we will look into a

00:32:06,799 --> 00:32:11,209
possibilities of sharing components of

00:32:09,079 --> 00:32:13,579
the compiler so already today the

00:32:11,209 --> 00:32:15,799
scholar 3 compiler uses basically the

00:32:13,579 --> 00:32:17,690
same back-end ask Allah to accept that

00:32:15,799 --> 00:32:19,909
it's a fork so it's a copy of the source

00:32:17,690 --> 00:32:23,570
code we want to improve this situation

00:32:19,909 --> 00:32:27,049
of course we will try we will share code

00:32:23,570 --> 00:32:30,080
and in the way scholar 2 will omit the

00:32:27,049 --> 00:32:33,200
Tastee output there's also codec

00:32:30,080 --> 00:32:36,950
share their and so we will start also

00:32:33,200 --> 00:32:40,190
merging the two code bases into one and

00:32:36,950 --> 00:32:42,470
again one of the goals for our release

00:32:40,190 --> 00:32:44,600
is to have the possibility for

00:32:42,470 --> 00:32:46,970
maintenance to crossbell 214 and 3

00:32:44,600 --> 00:32:51,200
that's really the main the main goal of

00:32:46,970 --> 00:32:51,890
214 also interoperability at the binary

00:32:51,200 --> 00:32:56,210
level

00:32:51,890 --> 00:32:59,539
so today Scala 3 can use libraries that

00:32:56,210 --> 00:33:02,899
are compiled by Scala ok 212 currently

00:32:59,539 --> 00:33:05,389
but it will be 214 at some point what

00:33:02,899 --> 00:33:07,909
this allows is basically people to

00:33:05,389 --> 00:33:11,419
upgrade to scholar 3 early so people can

00:33:07,909 --> 00:33:12,620
start using Scala 3 when before all of

00:33:11,419 --> 00:33:14,809
their dependencies have been

00:33:12,620 --> 00:33:17,179
cross-compiled so that's a very powerful

00:33:14,809 --> 00:33:22,250
feature of course to you know to go

00:33:17,179 --> 00:33:24,110
ahead and try things out if it's not yet

00:33:22,250 --> 00:33:26,630
clear in every detail how this will work

00:33:24,110 --> 00:33:30,169
like if if we really want to support

00:33:26,630 --> 00:33:31,909
this at like a professional level let's

00:33:30,169 --> 00:33:34,429
say we need to make sure that the two

00:33:31,909 --> 00:33:37,220
compilers are are the same in terms of

00:33:34,429 --> 00:33:39,549
cogeneration and then that will need a

00:33:37,220 --> 00:33:42,019
lot of testing and still some investment

00:33:39,549 --> 00:33:44,059
there are some caveats so one of them

00:33:42,019 --> 00:33:47,000
for example you know if you have a

00:33:44,059 --> 00:33:49,549
scholar to library that defines a macro

00:33:47,000 --> 00:33:51,380
the Scala 3 compiler is not going to be

00:33:49,549 --> 00:33:53,570
able to execute the Scala - macro

00:33:51,380 --> 00:33:56,110
because that just depends entirely on

00:33:53,570 --> 00:33:59,510
the internals of the Scala to compiler

00:33:56,110 --> 00:34:01,309
so this on interoperability is not going

00:33:59,510 --> 00:34:04,100
to be the like the final solution for

00:34:01,309 --> 00:34:06,460
all the Cross building problems so

00:34:04,100 --> 00:34:08,480
therefore we will help and we will and

00:34:06,460 --> 00:34:12,040
encourage people to cross build their

00:34:08,480 --> 00:34:12,040
libraries between the two releases

00:34:13,300 --> 00:34:17,810
testing yeah so already mentioned if we

00:34:16,760 --> 00:34:19,760
really want to achieve this binary

00:34:17,810 --> 00:34:22,820
compatibility they will have to invest a

00:34:19,760 --> 00:34:24,909
lot into testing to make sure the two

00:34:22,820 --> 00:34:29,030
compilers generate the same bytecode for

00:34:24,909 --> 00:34:32,599
for the same source code there's this

00:34:29,030 --> 00:34:34,190
continuous running choke where we say we

00:34:32,599 --> 00:34:36,020
want to build a Frankenstein compiler

00:34:34,190 --> 00:34:38,950
which is kind of a mix between the Scala

00:34:36,020 --> 00:34:42,679
2 and the 3 compiler so here the idea is

00:34:38,950 --> 00:34:43,770
Scala to would you know parse the source

00:34:42,679 --> 00:34:46,530
code and

00:34:43,770 --> 00:34:48,030
right out the tasty she realized the

00:34:46,530 --> 00:34:50,040
tasty and then we would use the scholar

00:34:48,030 --> 00:34:54,330
three compiler to do the rest of the

00:34:50,040 --> 00:34:55,890
compilation pipeline and yeah well this

00:34:54,330 --> 00:34:57,780
would basically be like an integration

00:34:55,890 --> 00:35:01,020
test for teste and integration tests to

00:34:57,780 --> 00:35:06,300
show that Scala 2 generates the correct

00:35:01,020 --> 00:35:08,060
taste the output still on the testing

00:35:06,300 --> 00:35:10,380
front one of the things that we are

00:35:08,060 --> 00:35:12,390
relying on a lot these days is the

00:35:10,380 --> 00:35:14,550
community board so every scholar release

00:35:12,390 --> 00:35:16,760
is tested by the community build which

00:35:14,550 --> 00:35:19,110
builds the Scala ecosystem from source

00:35:16,760 --> 00:35:21,390
it's roughly three million lines of code

00:35:19,110 --> 00:35:25,280
into 12 we're slowly getting there onto

00:35:21,390 --> 00:35:27,480
13 we're actually already pretty far and

00:35:25,280 --> 00:35:28,260
community built for Scala three is only

00:35:27,480 --> 00:35:30,930
getting started

00:35:28,260 --> 00:35:32,910
these days so it's still pretty small

00:35:30,930 --> 00:35:35,520
but this will be of course a very

00:35:32,910 --> 00:35:37,410
important aspects in testing it's called

00:35:35,520 --> 00:35:39,300
a three release and it's important to

00:35:37,410 --> 00:35:42,510
note that this is not about only about

00:35:39,300 --> 00:35:45,450
testing if things works but it's also

00:35:42,510 --> 00:35:47,370
about like testing how much did you

00:35:45,450 --> 00:35:50,070
actually break in terms of you know you

00:35:47,370 --> 00:35:52,380
know changing stuff around so when we

00:35:50,070 --> 00:35:56,220
when we redesigned the collections into

00:35:52,380 --> 00:35:58,800
13 seeing which kind of things would

00:35:56,220 --> 00:36:01,560
break in the community world gave us a

00:35:58,800 --> 00:36:03,510
good estimate of you know how bad our

00:36:01,560 --> 00:36:05,400
breaking changes and we could quantify

00:36:03,510 --> 00:36:07,590
that so the community bill is not only

00:36:05,400 --> 00:36:12,540
for correctness testing but also for

00:36:07,590 --> 00:36:15,240
like feature validation all right last

00:36:12,540 --> 00:36:16,920
part is about timeline and you know

00:36:15,240 --> 00:36:18,870
maybe a few practical aspects about

00:36:16,920 --> 00:36:23,010
getting there so we just released Scala

00:36:18,870 --> 00:36:26,340
to 13 0 Martin said in his keys not

00:36:23,010 --> 00:36:28,230
keynote that Scala 3m1 which will be the

00:36:26,340 --> 00:36:30,480
feature freeze for Scala 3 is going to

00:36:28,230 --> 00:36:34,020
be in the in the fall or in the end of

00:36:30,480 --> 00:36:36,500
this year and yeah from there on it's

00:36:34,020 --> 00:36:38,820
from there Orient's you know it's a

00:36:36,500 --> 00:36:40,800
forecasts and estimations which are

00:36:38,820 --> 00:36:50,900
always a bit difficult especially if

00:36:40,800 --> 00:36:53,760
it's about the future so so yeah so yeah

00:36:50,900 --> 00:36:56,100
somewhere you know in the future there

00:36:53,760 --> 00:36:57,780
will be a scholar 2 14 release there

00:36:56,100 --> 00:37:02,610
will be a scholar 3 release

00:36:57,780 --> 00:37:04,260
in the next one to two years there's a

00:37:02,610 --> 00:37:06,060
lot of things that need to be figured

00:37:04,260 --> 00:37:08,430
out until then of course you know which

00:37:06,060 --> 00:37:09,960
release is going have is if there is one

00:37:08,430 --> 00:37:12,150
release that has to come first

00:37:09,960 --> 00:37:14,370
probably 214 has to come first because

00:37:12,150 --> 00:37:18,230
Karla 3 will use it standard library

00:37:14,370 --> 00:37:20,970
all these things have to be discussed

00:37:18,230 --> 00:37:24,600
how do you migrate to Scala 3 well you

00:37:20,970 --> 00:37:26,730
move to Scala 214 first this will this

00:37:24,600 --> 00:37:28,560
will allow you to start using some of

00:37:26,730 --> 00:37:30,510
the new features already which you know

00:37:28,560 --> 00:37:33,540
it will allow you it will simplify cross

00:37:30,510 --> 00:37:35,940
building as well so that's really what

00:37:33,540 --> 00:37:40,430
is to 14 release is all about its it's

00:37:35,940 --> 00:37:40,430
supposed to pave the way to scholar 3

00:37:40,610 --> 00:37:50,730
yeah we have a tool called scholar fix

00:37:46,670 --> 00:37:53,490
which can rewrite source code it can it

00:37:50,730 --> 00:37:55,890
can fix syntax well it can fix a

00:37:53,490 --> 00:37:59,510
syntactic you know changes that are

00:37:55,890 --> 00:38:05,460
required by one example is the

00:37:59,510 --> 00:38:07,710
application application of empty

00:38:05,460 --> 00:38:10,920
parameter lists and things like this so

00:38:07,710 --> 00:38:12,780
we can also rewrite symbol literals that

00:38:10,920 --> 00:38:14,790
aren't now deprecated things like this

00:38:12,780 --> 00:38:17,070
so we are we started working on a

00:38:14,790 --> 00:38:18,840
repository called Scala rewrites

00:38:17,070 --> 00:38:21,780
recently where we want to collect

00:38:18,840 --> 00:38:24,540
migration rules so rewrite rules for

00:38:21,780 --> 00:38:29,400
Scala fix and definitely we will spend

00:38:24,540 --> 00:38:33,000
more time on this on on these rules to

00:38:29,400 --> 00:38:35,700
make sure the small tedious things can

00:38:33,000 --> 00:38:37,800
be automated and you know people have to

00:38:35,700 --> 00:38:42,690
only intervene with the stuff that is

00:38:37,800 --> 00:38:44,730
actually breaking yeah we will absorb

00:38:42,690 --> 00:38:46,890
some of the shock let's say into 14 so

00:38:44,730 --> 00:38:49,950
we weren't already - we want people to

00:38:46,890 --> 00:38:53,820
migrate off certain things already in

00:38:49,950 --> 00:38:57,030
214 like the existential types or the

00:38:53,820 --> 00:38:58,980
early initializers this is basically to

00:38:57,030 --> 00:39:01,440
you know to make the transition to Scala

00:38:58,980 --> 00:39:03,630
3 a bit easier and these things are

00:39:01,440 --> 00:39:06,120
coming anyway so we decided it's it's

00:39:03,630 --> 00:39:08,460
good to spread out a bit over the time

00:39:06,120 --> 00:39:09,730
of the migration some of these some of

00:39:08,460 --> 00:39:13,810
these breaking changes

00:39:09,730 --> 00:39:17,290
and macro so if you define macros in

00:39:13,810 --> 00:39:19,840
your library or in your application yeah

00:39:17,290 --> 00:39:21,670
these will have to be rewritten once you

00:39:19,840 --> 00:39:23,830
start moving to scholar three if you

00:39:21,670 --> 00:39:25,450
cross build you have two most likely you

00:39:23,830 --> 00:39:27,520
have to you know have separate source

00:39:25,450 --> 00:39:30,550
files that's my next slide slide

00:39:27,520 --> 00:39:33,190
actually yeah so the goal is really to

00:39:30,550 --> 00:39:36,580
cross build the ecosystem between Scala

00:39:33,190 --> 00:39:39,030
two in Scala three I was very pleased to

00:39:36,580 --> 00:39:42,340
see Myles saying that he wants to

00:39:39,030 --> 00:39:43,990
backports his new shapeless three that

00:39:42,340 --> 00:39:46,210
he's building on top of Scala three he

00:39:43,990 --> 00:39:48,430
wants to backward that to Scala to 14

00:39:46,210 --> 00:39:50,950
because it will be really important that

00:39:48,430 --> 00:39:54,820
we have the same ecosystem on 214

00:39:50,950 --> 00:39:56,830
available so users don't have to do you

00:39:54,820 --> 00:40:01,210
know the upgrade of the language and the

00:39:56,830 --> 00:40:03,760
dependencies at the same time yeah so if

00:40:01,210 --> 00:40:05,800
you're defining macros you will probably

00:40:03,760 --> 00:40:08,320
have to have separate source files for

00:40:05,800 --> 00:40:11,920
the two versions there is a possibility

00:40:08,320 --> 00:40:14,980
of crack porting the new macro API those

00:40:11,920 --> 00:40:18,970
are the Tastee based macro API to Scala

00:40:14,980 --> 00:40:20,860
2 but this thing is just on the drawing

00:40:18,970 --> 00:40:23,590
board right now we haven't we haven't

00:40:20,860 --> 00:40:28,060
started any of this work or committed to

00:40:23,590 --> 00:40:31,990
anything one thing that might come one

00:40:28,060 --> 00:40:36,610
day is some kind of preprocessor for

00:40:31,990 --> 00:40:38,560
Scala we have been talking about this

00:40:36,610 --> 00:40:40,600
already a few times and there are just

00:40:38,560 --> 00:40:44,440
situations where you know this would

00:40:40,600 --> 00:40:52,590
simplify life so maybe this will come at

00:40:44,440 --> 00:40:55,180
some point ok so just in terms of

00:40:52,590 --> 00:40:58,510
responsibilities from our side from the

00:40:55,180 --> 00:41:01,780
Scala team at light and we are going to

00:40:58,510 --> 00:41:04,270
be the main developers of Scala 2:14 we

00:41:01,780 --> 00:41:06,000
will maintain Scala 2:14 for a very long

00:41:04,270 --> 00:41:08,980
time that's what we expect

00:41:06,000 --> 00:41:12,340
it's we expect it to be the last release

00:41:08,980 --> 00:41:13,900
of the Scala 2 series so that means it

00:41:12,340 --> 00:41:16,810
will have to have owner maintenance

00:41:13,900 --> 00:41:20,920
stretched and then other releases that

00:41:16,810 --> 00:41:23,589
we bolt once to 14 is released the light

00:41:20,920 --> 00:41:26,650
band Scala team will start working

00:41:23,589 --> 00:41:32,559
maintaining and supporting the scholar

00:41:26,650 --> 00:41:36,009
three compiler and the team at EPFL yes

00:41:32,559 --> 00:41:37,269
mostly is the core behind the

00:41:36,009 --> 00:41:40,809
development of the scholar three

00:41:37,269 --> 00:41:44,199
compound all right so that's all I have

00:41:40,809 --> 00:41:46,390
my main message for this talk that is

00:41:44,199 --> 00:41:49,509
that scholar three is really scholar two

00:41:46,390 --> 00:41:51,759
plus one so it's it's not the new

00:41:49,509 --> 00:41:53,709
language it's the same language but

00:41:51,759 --> 00:41:58,209
there's plus one so there's new stuff in

00:41:53,709 --> 00:42:00,339
it and we are really working together we

00:41:58,209 --> 00:42:02,559
are you know we are committed to ensure

00:42:00,339 --> 00:42:04,689
that the migration will be smooth we are

00:42:02,559 --> 00:42:07,150
also committed to spend time on helping

00:42:04,689 --> 00:42:10,749
the community to make sure the echos the

00:42:07,150 --> 00:42:13,329
ecosystem can move ahead and yeah we

00:42:10,749 --> 00:42:23,709
hope you are all as excited about the

00:42:13,329 --> 00:42:25,930
new stuff as we are thank you so we have

00:42:23,709 --> 00:42:29,529
time for one quick question so please

00:42:25,930 --> 00:42:31,209
raise your hand if you have or maybe if

00:42:29,529 --> 00:42:40,809
you're a quick enough then we can take

00:42:31,209 --> 00:42:43,660
both of you okay so I can see many

00:42:40,809 --> 00:42:45,609
companies use call up because of sparks

00:42:43,660 --> 00:42:48,119
so I'm just wondering if there is any

00:42:45,609 --> 00:42:53,109
collaboration or communication between

00:42:48,119 --> 00:42:56,380
light band or Scala Center and data

00:42:53,109 --> 00:42:59,469
breaks or spark people to make this

00:42:56,380 --> 00:43:02,459
migration to scholars three happen

00:42:59,469 --> 00:43:04,660
earlier or and and as smooth as possible

00:43:02,459 --> 00:43:06,459
so definitely there is communication

00:43:04,660 --> 00:43:11,109
there was actually today after the

00:43:06,459 --> 00:43:13,779
keynote and yes we are yeah so we are

00:43:11,109 --> 00:43:16,900
aware that the Scala at spark in 211 was

00:43:13,779 --> 00:43:19,299
kind of a peak you know a big lag for

00:43:16,900 --> 00:43:21,579
many people and that's also why we got

00:43:19,299 --> 00:43:23,890
you know we invested some time and

00:43:21,579 --> 00:43:26,049
resource from light band to helping data

00:43:23,890 --> 00:43:28,779
bricks and what the SPARC community

00:43:26,049 --> 00:43:31,449
let's say to migrate to Scala 2:12 so

00:43:28,779 --> 00:43:33,670
Scala 212 will be the default for SPARC

00:43:31,449 --> 00:43:35,289
3 which is supposed to be come up coming

00:43:33,670 --> 00:43:36,940
out in a few months I heard like six

00:43:35,289 --> 00:43:39,309
months maybe

00:43:36,940 --> 00:43:41,260
and yes we talked about Scala three as

00:43:39,309 --> 00:43:42,430
well today and yes that's definitely on

00:43:41,260 --> 00:43:44,710
the radar

00:43:42,430 --> 00:43:46,869
I just heard for example today's call a

00:43:44,710 --> 00:43:53,230
spark doesn't have any macros which is

00:43:46,869 --> 00:43:59,200
great you know so yeah thank you okay

00:43:53,230 --> 00:44:01,500
quick question so no two 15 or 16 - 15 -

00:43:59,200 --> 00:44:01,500
00:44:01,529 --> 00:44:10,510
okay yes we don't plan to have a 2:15

00:44:07,660 --> 00:44:13,180
release yeah would you be completely

00:44:10,510 --> 00:44:15,819
against it if 214 turned out to be a

00:44:13,180 --> 00:44:17,710
little not smooth or do you have like no

00:44:15,819 --> 00:44:20,079
plans for it to be not smooth I mean our

00:44:17,710 --> 00:44:23,109
goal of course is you know it's the

00:44:20,079 --> 00:44:24,940
success of Scala and not to make people

00:44:23,109 --> 00:44:27,880
suffer from mistakes that we did or what

00:44:24,940 --> 00:44:30,400
not so you know if if there are good

00:44:27,880 --> 00:44:33,490
reasons for a scholar 2:15 release you

00:44:30,400 --> 00:44:38,020
know it's not that it's excluded by

00:44:33,490 --> 00:44:45,219
definition okay thank you

00:44:38,020 --> 00:44:45,219

YouTube URL: https://www.youtube.com/watch?v=KUl1Ilcf0b8


