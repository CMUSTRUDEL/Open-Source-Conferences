Title: Integrating Developer Experiences - Build Server Protocol - Justin Kaeser
Publication date: 2019-07-11
Playlist: Scala Days Lausanne 2019
Description: 
	This video was recorded at Scala Days Lausanne 2019
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

More information and the abstract can be found here:
https://scaladays.org/schedule/integrating-developer-experiences---build-server-protocol
Captions: 
	00:00:00,030 --> 00:00:05,910
invoke compilers by hand we would

00:00:03,529 --> 00:00:08,280
manually run tar on a bunch of

00:00:05,910 --> 00:00:11,910
compilation products just to package

00:00:08,280 --> 00:00:14,540
them and maybe more sophisticated

00:00:11,910 --> 00:00:17,880
engineers would hand wire their

00:00:14,540 --> 00:00:20,460
dependencies and build graph into a

00:00:17,880 --> 00:00:24,359
makefile maybe some of us still do that

00:00:20,460 --> 00:00:28,619
but personally I find that to be still

00:00:24,359 --> 00:00:32,850
too much manual labor so along came the

00:00:28,619 --> 00:00:35,489
IDE to offer an interface for the whole

00:00:32,850 --> 00:00:38,960
software development lifecycle from

00:00:35,489 --> 00:00:41,160
editing formatting refactoring and

00:00:38,960 --> 00:00:45,149
giving a structure to your whole

00:00:41,160 --> 00:00:49,410
codebase to structure it into projects

00:00:45,149 --> 00:00:51,600
and modules and on those projects and

00:00:49,410 --> 00:00:53,640
modules you could build and run and test

00:00:51,600 --> 00:00:56,329
and debug and package and deploy all at

00:00:53,640 --> 00:01:00,420
the click of a button

00:00:56,329 --> 00:01:08,520
so buttons are great but some people

00:01:00,420 --> 00:01:10,680
prefer key presses but anyway so what

00:01:08,520 --> 00:01:16,650
does that have to do with me and my talk

00:01:10,680 --> 00:01:22,049
I'm Justin I work on the on an IDE the

00:01:16,650 --> 00:01:24,930
IntelliJ Scala plugin and actually most

00:01:22,049 --> 00:01:27,689
of my team is here at this conference

00:01:24,930 --> 00:01:32,729
you can meet us at our at the jetbrains

00:01:27,689 --> 00:01:35,400
booth and talk to us there I already

00:01:32,729 --> 00:01:39,450
know most people probably use IntelliJ

00:01:35,400 --> 00:01:42,810
for Scala editing did you also know that

00:01:39,450 --> 00:01:44,700
we're open source mostly and you can

00:01:42,810 --> 00:01:45,600
find us on github just please raise your

00:01:44,700 --> 00:01:48,299
hand if you did

00:01:45,600 --> 00:01:53,640
ok that's it's a growing number who

00:01:48,299 --> 00:01:58,140
actually knew this net so the purpose of

00:01:53,640 --> 00:02:02,070
this talk is to give you another

00:01:58,140 --> 00:02:04,259
approach to integration so integrating

00:02:02,070 --> 00:02:07,950
another IDE integrating developer

00:02:04,259 --> 00:02:10,530
experiences and specifically I'm talking

00:02:07,950 --> 00:02:15,660
about the build server protocol

00:02:10,530 --> 00:02:20,640
and some of the implementation details

00:02:15,660 --> 00:02:24,770
or design details of this protocol which

00:02:20,640 --> 00:02:28,350
is supported now by IntelliJ as a client

00:02:24,770 --> 00:02:30,690
by blue as a server also by metals as a

00:02:28,350 --> 00:02:33,300
client Olaf was talking earlier about it

00:02:30,690 --> 00:02:39,239
but more to on what they'll that is

00:02:33,300 --> 00:02:42,120
later so we're coming from a place where

00:02:39,239 --> 00:02:45,110
we have integrated development

00:02:42,120 --> 00:02:49,350
environment where everything is in a

00:02:45,110 --> 00:02:51,560
interface in front of you but that

00:02:49,350 --> 00:02:54,480
doesn't work for everybody not all the

00:02:51,560 --> 00:02:58,830
workflows that you'd like to have are

00:02:54,480 --> 00:03:01,709
supported by the IDE so yeah one size

00:02:58,830 --> 00:03:05,400
does not fit all so so we have a repro

00:03:01,709 --> 00:03:10,170
liberation of special-purpose tools such

00:03:05,400 --> 00:03:17,280
as dependency managers build tools test

00:03:10,170 --> 00:03:19,230
frameworks and so on and they have the

00:03:17,280 --> 00:03:21,600
advantage of being to some degree

00:03:19,230 --> 00:03:23,600
cross-platform they offer you a

00:03:21,600 --> 00:03:27,120
command-line interface which is

00:03:23,600 --> 00:03:30,510
programmable to some degree again and

00:03:27,120 --> 00:03:33,959
can run in a variety of contexts mostly

00:03:30,510 --> 00:03:39,769
on the dev machine on a CI pipeline on

00:03:33,959 --> 00:03:43,799
different types of death machines and

00:03:39,769 --> 00:03:46,049
that's great but what about my

00:03:43,799 --> 00:03:48,480
general-purpose development front-end

00:03:46,049 --> 00:03:50,519
I'd still like to keep using IntelliJ

00:03:48,480 --> 00:03:53,579
and like usually keep using IntelliJ

00:03:50,519 --> 00:03:57,530
even when you take specific tools for

00:03:53,579 --> 00:04:00,780
specific tasks but there's some

00:03:57,530 --> 00:04:02,450
integration issues so many of these

00:04:00,780 --> 00:04:05,190
tools don't really have matching

00:04:02,450 --> 00:04:07,230
interfaces I mean just look at these

00:04:05,190 --> 00:04:11,790
faces they they don't really fit

00:04:07,230 --> 00:04:14,730
together right yes so so you're gonna

00:04:11,790 --> 00:04:17,459
try to you're gonna have a build tool

00:04:14,730 --> 00:04:20,549
like SBT which has

00:04:17,459 --> 00:04:24,960
one way of interfacing with it you can

00:04:20,549 --> 00:04:26,910
dump stuff to the shell or to some files

00:04:24,960 --> 00:04:29,850
and then you'll have to write a

00:04:26,910 --> 00:04:33,090
special-purpose integration in IntelliJ

00:04:29,850 --> 00:04:36,660
or in blue and your compile server and

00:04:33,090 --> 00:04:43,440
that's a lot of work stringing things

00:04:36,660 --> 00:04:47,690
together so just as an example the SPT

00:04:43,440 --> 00:04:50,910
integration in IntelliJ involves a

00:04:47,690 --> 00:04:54,300
special-purpose plugin or 2 or 3 for

00:04:50,910 --> 00:04:57,710
several purposes that we inject over

00:04:54,300 --> 00:05:00,570
some special SBT mechanism which

00:04:57,710 --> 00:05:05,520
sometimes breaks because I don't know

00:05:00,570 --> 00:05:10,349
why some old SBT code doesn't do the

00:05:05,520 --> 00:05:12,539
caching write something and then some

00:05:10,349 --> 00:05:14,729
special code in IntelliJ to map this

00:05:12,539 --> 00:05:18,270
structure that we've extracted and dump

00:05:14,729 --> 00:05:21,330
to an XML file and just read immediately

00:05:18,270 --> 00:05:23,340
again and then try to map the SBT

00:05:21,330 --> 00:05:25,560
project structure to the IntelliJ

00:05:23,340 --> 00:05:31,919
project structure which works most of

00:05:25,560 --> 00:05:34,380
the time but not always yeah another

00:05:31,919 --> 00:05:36,570
plug-in just for shell integration and

00:05:34,380 --> 00:05:40,800
that doesn't even give us nice compiled

00:05:36,570 --> 00:05:43,590
output in IntelliJ and we have this

00:05:40,800 --> 00:05:44,610
problem for a variety of tools like for

00:05:43,590 --> 00:05:47,789
each test framework we have

00:05:44,610 --> 00:05:51,120
special-purpose code for each build tool

00:05:47,789 --> 00:05:54,000
for various libraries we have special

00:05:51,120 --> 00:06:00,680
support like akka play for for matters

00:05:54,000 --> 00:06:02,849
like Scala SMT and you have other

00:06:00,680 --> 00:06:06,810
projects like bloop have the same

00:06:02,849 --> 00:06:12,090
integration issue yeah I mentioned build

00:06:06,810 --> 00:06:14,460
tools we have lots of choices in this

00:06:12,090 --> 00:06:15,900
space especially in Scala nobody seems

00:06:14,460 --> 00:06:22,320
to be entirely happy with their build

00:06:15,900 --> 00:06:28,529
tool so they create a new one and I have

00:06:22,320 --> 00:06:30,029
to duplicate the SBT the the SBT effort

00:06:28,529 --> 00:06:30,970
for every one of them if I wanted to

00:06:30,029 --> 00:06:35,920
support them

00:06:30,970 --> 00:06:40,120
and furthermore we have yeah little

00:06:35,920 --> 00:06:42,760
coherence between these tools and

00:06:40,120 --> 00:06:45,430
between the interface so you might have

00:06:42,760 --> 00:06:49,780
context which is terminal IDE IDE

00:06:45,430 --> 00:06:52,420
terminal and that just interrupt your

00:06:49,780 --> 00:06:55,660
workflow a bit and I still want to just

00:06:52,420 --> 00:06:57,550
work from IntelliJ and maybe not switch

00:06:55,660 --> 00:07:01,600
around too much and learn different

00:06:57,550 --> 00:07:05,730
command-line interfaces as well so we

00:07:01,600 --> 00:07:10,210
have this haphazard tangle of tools and

00:07:05,730 --> 00:07:14,170
we have haphazard integrations that sort

00:07:10,210 --> 00:07:15,490
of seem to keep stuff together but you

00:07:14,170 --> 00:07:18,610
don't really know where your less than

00:07:15,490 --> 00:07:23,140
your right arm is so it's all not very

00:07:18,610 --> 00:07:26,650
very coherent so I've been trying to to

00:07:23,140 --> 00:07:28,960
tie these loose threads of tooling

00:07:26,650 --> 00:07:32,260
together with other tooling developers

00:07:28,960 --> 00:07:39,010
to create a more integrated development

00:07:32,260 --> 00:07:40,540
experience but first some prior art you

00:07:39,010 --> 00:07:42,010
might have heard have you heard of the

00:07:40,540 --> 00:07:45,490
language server protocol

00:07:42,010 --> 00:07:50,230
yeah that's most of you that's it's very

00:07:45,490 --> 00:07:52,750
sophisticated audience today yeah this

00:07:50,230 --> 00:07:56,880
address is one major integration

00:07:52,750 --> 00:07:59,020
bottleneck between editors and compilers

00:07:56,880 --> 00:08:03,900
by offering a standard way to

00:07:59,020 --> 00:08:07,000
communicate between them and offer

00:08:03,900 --> 00:08:11,500
specific actions and reporting errors

00:08:07,000 --> 00:08:17,320
and warnings and so on this works pretty

00:08:11,500 --> 00:08:19,930
well for editor integrations but and it

00:08:17,320 --> 00:08:21,610
has been been very successful so much so

00:08:19,930 --> 00:08:25,720
that people keep asking us if we're

00:08:21,610 --> 00:08:30,090
gonna support it in IntelliJ the answer

00:08:25,720 --> 00:08:34,900
is probably not because of various

00:08:30,090 --> 00:08:37,120
challenges so one of them is that the

00:08:34,900 --> 00:08:38,560
LSB doesn't really model the structure

00:08:37,120 --> 00:08:41,770
of the code base it just tells you

00:08:38,560 --> 00:08:44,380
you've got a bunch of files here this is

00:08:41,770 --> 00:08:48,310
your workspace within these files

00:08:44,380 --> 00:08:51,220
you'll have a you might have some errors

00:08:48,310 --> 00:08:55,270
warnings going on you can have certain

00:08:51,220 --> 00:08:59,440
actions on points in the code but it

00:08:55,270 --> 00:09:02,200
doesn't give us the the model of the

00:08:59,440 --> 00:09:05,520
whole code base that we need in IntelliJ

00:09:02,200 --> 00:09:07,630
for some of the advanced features or

00:09:05,520 --> 00:09:11,530
alternatively it would require each

00:09:07,630 --> 00:09:15,130
server to support them even though we

00:09:11,530 --> 00:09:17,320
have we can support them relatively

00:09:15,130 --> 00:09:21,160
easily with our own infrastructure and

00:09:17,320 --> 00:09:24,700
there's no direct mapping from LSP which

00:09:21,160 --> 00:09:27,820
just gives you messages and actions to

00:09:24,700 --> 00:09:33,460
IntelliJ which has a whole syntax tree

00:09:27,820 --> 00:09:36,010
that represents also errors so

00:09:33,460 --> 00:09:43,260
represents the syntax tree of the code

00:09:36,010 --> 00:09:45,640
and allows refactoring actions on it and

00:09:43,260 --> 00:09:48,190
well some other things like there's

00:09:45,640 --> 00:09:51,280
maybe no common concept of building

00:09:48,190 --> 00:09:53,470
testing running to some degree that it's

00:09:51,280 --> 00:09:56,110
fine you just save and the server knows

00:09:53,470 --> 00:09:59,820
okay I need to recompile but maybe you'd

00:09:56,110 --> 00:09:59,820
like more fine-grained support for that

00:10:00,360 --> 00:10:07,180
okay I mentioned lots of build tools so

00:10:03,990 --> 00:10:11,290
what if a new bill - emerges from the

00:10:07,180 --> 00:10:15,370
desert sands such as fury which John

00:10:11,290 --> 00:10:20,350
pretty is probably talking about right

00:10:15,370 --> 00:10:22,330
now or later or earlier anyway he's here

00:10:20,350 --> 00:10:26,620
and talking about it

00:10:22,330 --> 00:10:29,500
so fury doesn't really have users yet so

00:10:26,620 --> 00:10:36,430
I can't quite it justify spending

00:10:29,500 --> 00:10:39,790
several weeks on supporting it given

00:10:36,430 --> 00:10:42,520
that it would also increase the

00:10:39,790 --> 00:10:45,220
complexity of our code base by quite a

00:10:42,520 --> 00:10:49,840
bit for if I worked on this for each

00:10:45,220 --> 00:10:52,930
build tool and even SBT is still an

00:10:49,840 --> 00:10:55,720
ongoing effort to support correctly

00:10:52,930 --> 00:10:57,100
because there's always new edge cases to

00:10:55,720 --> 00:11:01,870
be found where the

00:10:57,100 --> 00:11:04,660
don't work right together but I wanna I

00:11:01,870 --> 00:11:10,210
want to do this anyway right I'm I'll

00:11:04,660 --> 00:11:13,480
just opening here IntelliJ in import

00:11:10,210 --> 00:11:16,540
project I got fury here which is of

00:11:13,480 --> 00:11:23,320
course a project defined in fury and I

00:11:16,540 --> 00:11:29,170
would want to just import it and let's

00:11:23,320 --> 00:11:35,080
see if this works it popped over on my

00:11:29,170 --> 00:11:39,640
screen here so I just imported fury into

00:11:35,080 --> 00:11:42,520
IntelliJ and you see here the whole

00:11:39,640 --> 00:11:45,280
structure it mapped neatly two modules

00:11:42,520 --> 00:11:49,000
fury corfu rebuild fury has this concept

00:11:45,280 --> 00:11:50,920
of source dependencies built right in so

00:11:49,000 --> 00:11:54,310
you see all the source dependencies

00:11:50,920 --> 00:12:07,690
mapped to a separate module here and I

00:11:54,310 --> 00:12:11,920
don't know I'll open a file and I have a

00:12:07,690 --> 00:12:13,660
hard time you in this okay but all the

00:12:11,920 --> 00:12:18,580
stuff seems to work like syntax

00:12:13,660 --> 00:12:26,080
highlighting or navigating to sources

00:12:18,580 --> 00:12:32,350
and so far they're available so yeah how

00:12:26,080 --> 00:12:35,620
did I do this I did not implement fury

00:12:32,350 --> 00:12:38,860
support in VSP I know I did not

00:12:35,620 --> 00:12:42,610
implement fury support in IntelliJ but

00:12:38,860 --> 00:12:48,220
what I did do is implement BSP server

00:12:42,610 --> 00:12:52,210
support into fury and I implemented BSP

00:12:48,220 --> 00:12:55,000
client support into IntelliJ so neither

00:12:52,210 --> 00:12:57,430
of these know about the other so there

00:12:55,000 --> 00:13:00,790
is no special purpose integration

00:12:57,430 --> 00:13:03,540
between them but they work together to

00:13:00,790 --> 00:13:06,130
some degree already

00:13:03,540 --> 00:13:16,120
[Music]

00:13:06,130 --> 00:13:22,420
so by the way fury is also a BSP client

00:13:16,120 --> 00:13:24,399
because it uses bloop which I don't know

00:13:22,420 --> 00:13:27,040
who's talking about bloop in this

00:13:24,399 --> 00:13:28,779
conference all right

00:13:27,040 --> 00:13:32,620
Jorge is not talking but he's here you

00:13:28,779 --> 00:13:37,079
can talk to him about bloop anyway yeah

00:13:32,620 --> 00:13:40,569
blue is a compile server and which

00:13:37,079 --> 00:13:41,339
supports various build tools Maya export

00:13:40,569 --> 00:13:44,319
to bloop

00:13:41,339 --> 00:13:48,579
but fury is no special and that it uses

00:13:44,319 --> 00:13:51,519
bloop as its compilation back end so it

00:13:48,579 --> 00:13:57,370
doesn't have a compiler integrated like

00:13:51,519 --> 00:14:01,300
most build tools so yeah I was kind of

00:13:57,370 --> 00:14:03,970
inspired by a quote of supposedly ever

00:14:01,300 --> 00:14:05,680
I'm linked own give me six hours to fell

00:14:03,970 --> 00:14:10,060
a tree and I will spend the first four

00:14:05,680 --> 00:14:11,980
sharpening my axe and well I thought

00:14:10,060 --> 00:14:13,449
yeah give me one month to support a bill

00:14:11,980 --> 00:14:20,079
tool and I will spend the first year

00:14:13,449 --> 00:14:25,029
developing a protocol so here we are the

00:14:20,079 --> 00:14:31,480
build server protocol so this is very

00:14:25,029 --> 00:14:34,660
much inspired by oriented to be

00:14:31,480 --> 00:14:37,839
compatible to complement LSP

00:14:34,660 --> 00:14:42,009
the language server protocol it was

00:14:37,839 --> 00:14:43,930
originally wrote up as a draft by Olaf

00:14:42,009 --> 00:14:51,000
from the Scala Center he earlier talked

00:14:43,930 --> 00:14:54,310
about medals medals also uses DSP as its

00:14:51,000 --> 00:15:02,259
yeah for its core compilation back-end

00:14:54,310 --> 00:15:07,600
and so yeah like LSP integrates editors

00:15:02,259 --> 00:15:11,829
and compilers language servers BSP

00:15:07,600 --> 00:15:13,720
integrates build tools and I des or

00:15:11,829 --> 00:15:15,910
language servers is in the case of

00:15:13,720 --> 00:15:17,260
metals which is a MEK language server so

00:15:15,910 --> 00:15:18,760
in the case of metals you have a

00:15:17,260 --> 00:15:19,630
three-step process you go from build

00:15:18,760 --> 00:15:23,200
tool to language

00:15:19,630 --> 00:15:28,810
server to editor with an intelligence

00:15:23,200 --> 00:15:33,820
interface between bill tool and IDE so

00:15:28,810 --> 00:15:37,420
unlike LSP BSP has a concept of project

00:15:33,820 --> 00:15:39,460
structure which yeah abstracts into a

00:15:37,420 --> 00:15:42,250
few generic concepts which I'll talk

00:15:39,460 --> 00:15:44,650
about right away and a few common

00:15:42,250 --> 00:15:47,470
operations that like most build tools

00:15:44,650 --> 00:15:56,170
will have in common such as build or

00:15:47,470 --> 00:16:03,070
even test and they have defined request

00:15:56,170 --> 00:16:08,050
reply semantics so some base concepts of

00:16:03,070 --> 00:16:10,600
BSP it is technically a client-server

00:16:08,050 --> 00:16:13,420
protocol but you can also send

00:16:10,600 --> 00:16:15,070
directions you can send messages in both

00:16:13,420 --> 00:16:17,340
directions either from the server to the

00:16:15,070 --> 00:16:21,250
client or from the client to the server

00:16:17,340 --> 00:16:24,100
there can be messages which don't expect

00:16:21,250 --> 00:16:27,400
a reply or typically requests which do

00:16:24,100 --> 00:16:30,250
expect the reply and most of the time

00:16:27,400 --> 00:16:33,280
it'll be the client sending the requests

00:16:30,250 --> 00:16:40,120
and the server replying or sending

00:16:33,280 --> 00:16:43,060
notifications one addition over LSP

00:16:40,120 --> 00:16:47,110
that we have is the server discovery

00:16:43,060 --> 00:16:49,090
protocol so we'd like servers and

00:16:47,110 --> 00:16:52,420
clients to be able to talk to each other

00:16:49,090 --> 00:16:54,760
without implementing any client or

00:16:52,420 --> 00:16:58,060
server specific support unless we really

00:16:54,760 --> 00:17:01,590
want to support this extensions for a

00:16:58,060 --> 00:17:05,800
specific tool so what we did is we

00:17:01,590 --> 00:17:07,750
defined a few system specific locations

00:17:05,800 --> 00:17:11,380
where a build tool may place

00:17:07,750 --> 00:17:12,970
configuration files and the client knows

00:17:11,380 --> 00:17:18,100
where to look for these configuration

00:17:12,970 --> 00:17:22,300
files and reads information about how to

00:17:18,100 --> 00:17:26,970
start a build server so we won't need

00:17:22,300 --> 00:17:29,490
any ports or

00:17:26,970 --> 00:17:32,790
we don't need to configure any ports or

00:17:29,490 --> 00:17:38,030
IP addresses or anything it's all in the

00:17:32,790 --> 00:17:42,240
file and the server is then simply uh an

00:17:38,030 --> 00:17:46,860
executable which communicates over a

00:17:42,240 --> 00:17:50,460
standard input standard output so this

00:17:46,860 --> 00:17:55,490
is very portable so we don't need any

00:17:50,460 --> 00:17:55,490
system specific communication protocols

00:17:56,900 --> 00:18:04,020
the life cycle of that once the server

00:18:00,390 --> 00:18:06,120
started looks a bit like this the client

00:18:04,020 --> 00:18:09,740
Wilson start the server and then send a

00:18:06,120 --> 00:18:13,280
build initialized request the server

00:18:09,740 --> 00:18:20,460
will answer and will eventually give a

00:18:13,280 --> 00:18:22,260
initialized message notification then

00:18:20,460 --> 00:18:25,320
all the interesting stuff happens and

00:18:22,260 --> 00:18:30,660
when they're done the client requests of

00:18:25,320 --> 00:18:34,530
the server to shut down and exit now the

00:18:30,660 --> 00:18:37,530
interesting part is or one of the

00:18:34,530 --> 00:18:42,180
interesting parts is the definition of

00:18:37,530 --> 00:18:44,580
the build structure so most build tools

00:18:42,180 --> 00:18:50,600
have some concept of projects and

00:18:44,580 --> 00:18:55,020
modules in BSP we call it targets a

00:18:50,600 --> 00:18:59,390
target comprises some set of source

00:18:55,020 --> 00:19:03,870
files that it works on it has some

00:18:59,390 --> 00:19:06,840
capability so you like can test or can

00:19:03,870 --> 00:19:11,070
compile can run some stuff you can do

00:19:06,840 --> 00:19:12,930
with this target and it will give you

00:19:11,070 --> 00:19:15,390
some metadata which can be language

00:19:12,930 --> 00:19:18,060
specific so for Scala it could be the

00:19:15,390 --> 00:19:22,470
Scala library that is being used and or

00:19:18,060 --> 00:19:24,780
maybe JVM more depending and in the case

00:19:22,470 --> 00:19:27,390
of Scala as well know in the general

00:19:24,780 --> 00:19:33,570
case it will also have dependencies on

00:19:27,390 --> 00:19:35,480
other targets and yet any target can be

00:19:33,570 --> 00:19:38,550
associated with a set of sources

00:19:35,480 --> 00:19:42,410
likewise any source can be associated

00:19:38,550 --> 00:19:42,410
with a number of targets

00:19:46,610 --> 00:19:52,769
now on these targets you can do some

00:19:50,129 --> 00:19:56,779
predefined actions the most common one

00:19:52,769 --> 00:20:00,210
will probably be compilation and

00:19:56,779 --> 00:20:04,470
analogously you may some targets may

00:20:00,210 --> 00:20:10,740
support testing or even running if the

00:20:04,470 --> 00:20:15,539
build tool is so inclined now you see

00:20:10,740 --> 00:20:19,169
here after a compilation request for

00:20:15,539 --> 00:20:22,940
some targets you may get numbers of

00:20:19,169 --> 00:20:29,639
Diagnostics and progress so Diagnostics

00:20:22,940 --> 00:20:33,149
is the word for messages relating to

00:20:29,639 --> 00:20:38,129
your source code so such as errors

00:20:33,149 --> 00:20:42,509
warnings anything else going on at a

00:20:38,129 --> 00:20:47,340
specific code location these are exactly

00:20:42,509 --> 00:20:52,529
analogous to LSP Diagnostics so they can

00:20:47,340 --> 00:21:00,080
be forwarded by a language server as LSP

00:20:52,529 --> 00:21:00,080
Diagnostics and yeah

00:21:00,600 --> 00:21:09,310
another thing we have is progress

00:21:04,180 --> 00:21:11,260
notifications or tasks so since a build

00:21:09,310 --> 00:21:15,040
server might have some long running

00:21:11,260 --> 00:21:18,550
tasks such as compilation will for

00:21:15,040 --> 00:21:21,430
longer bigger projects take a while we

00:21:18,550 --> 00:21:24,220
want to give progress updates so for

00:21:21,430 --> 00:21:27,910
that we have defined specific

00:21:24,220 --> 00:21:34,480
notifications tasks start tasks progress

00:21:27,910 --> 00:21:38,620
and tasks finish and I'll show you how

00:21:34,480 --> 00:21:39,040
that looks in a minute or how about

00:21:38,620 --> 00:21:46,650
right now

00:21:39,040 --> 00:21:52,530
so close fury here and open akka which I

00:21:46,650 --> 00:21:52,530
imported as a blue project just before

00:21:53,340 --> 00:22:04,180
and I'll try to run a build on it and

00:22:01,080 --> 00:22:06,910
that didn't quite work out because of

00:22:04,180 --> 00:22:14,650
some bug or other I'll just do a refresh

00:22:06,910 --> 00:22:19,900
oh yeah I love those okay now it should

00:22:14,650 --> 00:22:21,700
work so you see here there's ongoing

00:22:19,900 --> 00:22:24,520
progress notifications about the

00:22:21,700 --> 00:22:30,150
individual targets within the akka

00:22:24,520 --> 00:22:32,680
project and you see the progress 35 40

00:22:30,150 --> 00:22:35,950
percent 50 and so on and how long they

00:22:32,680 --> 00:22:38,950
take so with this this can help you to

00:22:35,950 --> 00:22:43,030
actually get an overview of which part

00:22:38,950 --> 00:22:46,930
of your compilation is eating all the

00:22:43,030 --> 00:22:48,970
time which modules are taking longer

00:22:46,930 --> 00:22:52,090
than all the others so we saw here akka

00:22:48,970 --> 00:22:58,300
actors took 23 seconds to compile while

00:22:52,090 --> 00:23:01,860
others here akka something akka OST I

00:22:58,300 --> 00:23:01,860
was not even a second

00:23:02,940 --> 00:23:08,519
and in the same window you'll get a

00:23:06,179 --> 00:23:11,309
whole bunch of yeah the diagnostic so

00:23:08,519 --> 00:23:13,799
warnings which you can navigate to

00:23:11,309 --> 00:23:16,529
directly so I think this is an

00:23:13,799 --> 00:23:26,749
improvement over the existing

00:23:16,529 --> 00:23:29,669
integration we have for SBT so this is

00:23:26,749 --> 00:23:32,399
basically already a released feature you

00:23:29,669 --> 00:23:35,330
can use it pretty well with bloop

00:23:32,399 --> 00:23:38,369
it works with fury at least for import

00:23:35,330 --> 00:23:43,259
I've currently got an intern working on

00:23:38,369 --> 00:23:48,659
supporting it for no I hope people are

00:23:43,259 --> 00:23:53,909
inspired to write VSP support for other

00:23:48,659 --> 00:23:55,889
build tools as well because that will ya

00:23:53,909 --> 00:23:59,909
enable integration with IntelliJ and

00:23:55,889 --> 00:24:09,119
metals at the same time so what more

00:23:59,909 --> 00:24:10,979
could you want some some IntelliJ

00:24:09,119 --> 00:24:14,879
specific challenges I wanted to talk

00:24:10,979 --> 00:24:19,289
about so mapping the bloop and no

00:24:14,879 --> 00:24:24,090
mapping the VSP project structure to

00:24:19,289 --> 00:24:27,479
IntelliJ here I've got another step and

00:24:24,090 --> 00:24:32,309
there because we have on the top we have

00:24:27,479 --> 00:24:36,299
SBT so SBT has projects which have

00:24:32,309 --> 00:24:38,849
multiple scopes most commonly you'll be

00:24:36,299 --> 00:24:41,909
using test and compile some people also

00:24:38,849 --> 00:24:44,759
use integration test or something that

00:24:41,909 --> 00:24:48,109
they made up but that doesn't really

00:24:44,759 --> 00:24:50,309
work so well so I at least for come for

00:24:48,109 --> 00:24:52,590
importing in IntelliJ so it's more

00:24:50,309 --> 00:24:58,649
recommendable to use separate projects

00:24:52,590 --> 00:25:04,139
for that SBT can has a project concept

00:24:58,649 --> 00:25:08,450
of sources shared between projects so

00:25:04,139 --> 00:25:13,080
that we can map straightforwardly onto

00:25:08,450 --> 00:25:16,910
BSP that's also how the structure looks

00:25:13,080 --> 00:25:23,190
in bloop which was built basically

00:25:16,910 --> 00:25:26,790
to be compatible with BSP directly so if

00:25:23,190 --> 00:25:28,410
you install the bloop plug-in in SVT and

00:25:26,790 --> 00:25:30,480
run a bloop install it will create some

00:25:28,410 --> 00:25:35,220
bloop configuration files which

00:25:30,480 --> 00:25:38,970
basically match the BSP structure but in

00:25:35,220 --> 00:25:41,910
BSP we don't have scopes so we map the

00:25:38,970 --> 00:25:46,830
compile and the test scope to separate

00:25:41,910 --> 00:25:52,040
targets now once we start importing this

00:25:46,830 --> 00:25:54,510
into IntelliJ what we currently do is we

00:25:52,040 --> 00:25:57,150
get these compile and test targets and

00:25:54,510 --> 00:26:01,890
mesh them together to go back to a

00:25:57,150 --> 00:26:04,170
single IntelliJ module that's maybe not

00:26:01,890 --> 00:26:06,510
ideal well we're currently reconsidering

00:26:04,170 --> 00:26:09,840
if we want to map them to separate

00:26:06,510 --> 00:26:11,700
modules but IntelliJ does support

00:26:09,840 --> 00:26:15,300
compile and test scopes but no other

00:26:11,700 --> 00:26:17,809
scopes so that's one reason it doesn't

00:26:15,300 --> 00:26:22,490
work well with integration test scope in

00:26:17,809 --> 00:26:25,110
SBT another challenge is shared sources

00:26:22,490 --> 00:26:27,450
IntelliJ for technical reasons doesn't

00:26:25,110 --> 00:26:30,450
support sharing sources between modules

00:26:27,450 --> 00:26:33,450
you have a one to one correspondence so

00:26:30,450 --> 00:26:37,200
what we do instead is create synthetic

00:26:33,450 --> 00:26:40,140
modules that are dependent dependent

00:26:37,200 --> 00:26:47,130
upon by the modules that share this

00:26:40,140 --> 00:26:49,590
source yeah shared sources I'm with that

00:26:47,130 --> 00:26:57,510
I mean sources shared between different

00:26:49,590 --> 00:27:02,130
modules or targets so so if it's pretty

00:26:57,510 --> 00:27:04,950
common so for example if you want to

00:27:02,130 --> 00:27:08,490
share sources between different versions

00:27:04,950 --> 00:27:12,690
of a compilation so if you are compiling

00:27:08,490 --> 00:27:17,130
for Scala Jas and Scala native and JVM

00:27:12,690 --> 00:27:18,720
then ask you a question into the

00:27:17,130 --> 00:27:21,420
microphone please because everything is

00:27:18,720 --> 00:27:25,050
recorded and if you don't speak in the

00:27:21,420 --> 00:27:26,190
mic no recording thank you right I hope

00:27:25,050 --> 00:27:28,800
my answer

00:27:26,190 --> 00:27:34,230
had enough context for the question

00:27:28,800 --> 00:27:37,470
to be recorded right so yeah those are

00:27:34,230 --> 00:27:39,570
shared sources you might also share

00:27:37,470 --> 00:27:41,070
sources between different when you

00:27:39,570 --> 00:27:45,510
compile against different versions of

00:27:41,070 --> 00:27:51,270
Scala and I think there's other reasons

00:27:45,510 --> 00:27:53,550
to like compiling certain tests and

00:27:51,270 --> 00:27:55,380
different types of tests against the

00:27:53,550 --> 00:28:00,600
same sources maybe but usually you'd

00:27:55,380 --> 00:28:02,190
model that as dependencies right so

00:28:00,600 --> 00:28:04,290
IntelliJ doesn't support these shared

00:28:02,190 --> 00:28:09,180
sources between modules so we mapped it

00:28:04,290 --> 00:28:13,830
to as specific to a synthetic module and

00:28:09,180 --> 00:28:15,930
that works as long as these modules

00:28:13,830 --> 00:28:20,280
don't have conflicting dependencies

00:28:15,930 --> 00:28:23,850
which is often the case so you might get

00:28:20,280 --> 00:28:29,090
red code where in IntelliJ where that

00:28:23,850 --> 00:28:31,950
doesn't happen in the build tool itself

00:28:29,090 --> 00:28:38,520
that's unfortunate but right now it's

00:28:31,950 --> 00:28:43,200
what we got so I've already showed you

00:28:38,520 --> 00:28:49,740
how compile looks when run from by a BSP

00:28:43,200 --> 00:28:56,720
this is just a backup slide and that

00:28:49,740 --> 00:29:00,350
brings me already to the BSP roadmap so

00:28:56,720 --> 00:29:00,350
any questions so far

00:29:00,470 --> 00:29:09,420
okay so the version 2-0 of the BSP

00:29:07,110 --> 00:29:14,820
protocol is more or less around the

00:29:09,420 --> 00:29:18,810
corner we're still figuring out some

00:29:14,820 --> 00:29:23,670
details and need to coordinate with blue

00:29:18,810 --> 00:29:28,740
and metals to get these minor breaking

00:29:23,670 --> 00:29:31,950
changes up to date but other than that

00:29:28,740 --> 00:29:37,050
it's already perfectly viable to write

00:29:31,950 --> 00:29:38,730
support for specific build tools as I

00:29:37,050 --> 00:29:40,460
said IntelliJ blue

00:29:38,730 --> 00:29:44,419
fury

00:29:40,460 --> 00:29:46,950
support this and we're coordinating to

00:29:44,419 --> 00:29:50,429
make them work together on the same

00:29:46,950 --> 00:29:53,789
version once we got get out version 2-0

00:29:50,429 --> 00:29:54,960
we intend to have it stable for the

00:29:53,789 --> 00:29:59,940
foreseeable future

00:29:54,960 --> 00:30:01,919
so only compatible changes more build

00:29:59,940 --> 00:30:03,869
tools are already being worked on

00:30:01,919 --> 00:30:08,789
specifically mill I think somebody was

00:30:03,869 --> 00:30:11,369
already also looking at basil and within

00:30:08,789 --> 00:30:14,549
IntelliJ the support is still a bit

00:30:11,369 --> 00:30:18,149
spotty so so we might want to support

00:30:14,549 --> 00:30:20,489
more languages have better Java specific

00:30:18,149 --> 00:30:27,330
support right now it's only Scala and

00:30:20,489 --> 00:30:31,139
Java is a subset of Scala and some

00:30:27,330 --> 00:30:32,820
robustness and mapping projects and I'm

00:30:31,139 --> 00:30:35,190
sure once you start using it you'll

00:30:32,820 --> 00:30:41,879
figure out find out lots of problems

00:30:35,190 --> 00:30:52,649
with it that I'll then fix going beyond

00:30:41,879 --> 00:30:55,919
that tooling protocols it's we we might

00:30:52,649 --> 00:31:00,539
want to think about if we can replicate

00:30:55,919 --> 00:31:06,059
the LSP success for more tooling

00:31:00,539 --> 00:31:08,850
specific tasks to integrate tooling so

00:31:06,059 --> 00:31:12,989
some of them might fall into the scope

00:31:08,850 --> 00:31:17,519
of existing protocols such as remote

00:31:12,989 --> 00:31:19,759
building ESP is currently not dedicated

00:31:17,519 --> 00:31:21,659
to be remote but it's made to be

00:31:19,759 --> 00:31:27,480
extensible enough that it would work

00:31:21,659 --> 00:31:29,519
with remote servers we support more

00:31:27,480 --> 00:31:32,820
fine-grained support for testing so in

00:31:29,519 --> 00:31:36,119
BSP we only have basically support tests

00:31:32,820 --> 00:31:39,210
this target but if you want to support

00:31:36,119 --> 00:31:43,049
specific or different test frameworks in

00:31:39,210 --> 00:31:46,580
a generic way you could think about how

00:31:43,049 --> 00:31:46,580
a protocol for that looks

00:31:48,400 --> 00:31:56,559
challenges that are of course that

00:31:51,870 --> 00:31:58,840
sometimes tools are not generic enough

00:31:56,559 --> 00:32:03,659
or don't share enough common surface

00:31:58,840 --> 00:32:09,630
area to make this standardization

00:32:03,659 --> 00:32:12,250
necessary or useful and of course

00:32:09,630 --> 00:32:16,870
adoption so I'm talking to you here in

00:32:12,250 --> 00:32:19,510
hopes of getting more adoption for BSP

00:32:16,870 --> 00:32:21,490
to make it actually useful because as

00:32:19,510 --> 00:32:24,580
long as it's otherwise it's just some

00:32:21,490 --> 00:32:27,549
dead code sitting there out of interest

00:32:24,580 --> 00:32:30,370
there's anyone already use BSP in some

00:32:27,549 --> 00:32:35,740
form like loop with IntelliJ or with

00:32:30,370 --> 00:32:41,679
metals yeah that's a few but I hope more

00:32:35,740 --> 00:32:46,090
if you will get to try it out soon now

00:32:41,679 --> 00:32:49,630
that brings me to the end of the talk as

00:32:46,090 --> 00:32:55,690
such I very much welcome any discussion

00:32:49,630 --> 00:33:05,559
or questions or comments by you yeah

00:32:55,690 --> 00:33:08,399
Eugene well thanks for the great

00:33:05,559 --> 00:33:11,169
introduction or overview of the BSP

00:33:08,399 --> 00:33:12,970
could you go back to the other point

00:33:11,169 --> 00:33:14,710
you're making the deal the input and

00:33:12,970 --> 00:33:16,929
output was going to be basically

00:33:14,710 --> 00:33:20,740
standard in and standard out so does

00:33:16,929 --> 00:33:23,529
that mean can you like in LSP everything

00:33:20,740 --> 00:33:25,720
is basically like a socket communication

00:33:23,529 --> 00:33:29,080
you can just send some JSON and they

00:33:25,720 --> 00:33:32,740
send you back JSON right right it's the

00:33:29,080 --> 00:33:34,690
same with BSP and in principle you could

00:33:32,740 --> 00:33:37,000
use any communication protocol you want

00:33:34,690 --> 00:33:39,419
but with the connection protocol

00:33:37,000 --> 00:33:42,010
specifically we defined that other

00:33:39,419 --> 00:33:44,649
communication goes over a standard in

00:33:42,010 --> 00:33:48,070
standard out it will still be Jason's

00:33:44,649 --> 00:33:50,679
RPC messages that just get printed to

00:33:48,070 --> 00:33:54,880
standard in send it out of a dedicated

00:33:50,679 --> 00:33:59,049
process so this process can be part of

00:33:54,880 --> 00:34:01,870
the regular build tool like like with

00:33:59,049 --> 00:34:04,210
fury run fury BSP and then

00:34:01,870 --> 00:34:06,929
it just waits for messages from

00:34:04,210 --> 00:34:10,780
standardin and responds to send it out

00:34:06,929 --> 00:34:15,629
with these Jason RFIC messages or it

00:34:10,780 --> 00:34:20,619
could be a separate executable that

00:34:15,629 --> 00:34:23,770
handles this indirectly so connect to a

00:34:20,619 --> 00:34:27,460
remote server for instance and by a

00:34:23,770 --> 00:34:29,260
tcp/ip or anything really but this way

00:34:27,460 --> 00:34:34,929
we have a standardized way to

00:34:29,260 --> 00:34:37,419
communicate with a BSP server so does

00:34:34,929 --> 00:34:39,310
that mean the IntelliJ would always be

00:34:37,419 --> 00:34:43,510
the one that starts the process

00:34:39,310 --> 00:34:46,060
essentially right yeah cuz LSP you can

00:34:43,510 --> 00:34:48,550
basically do the handshake after both

00:34:46,060 --> 00:34:53,679
the programs are kind of up and running

00:34:48,550 --> 00:34:56,200
yeah so in this case you just have a you

00:34:53,679 --> 00:34:58,119
you could have a resident server for BSP

00:34:56,200 --> 00:35:00,040
and in this case you just have a

00:34:58,119 --> 00:35:02,890
separate executable that just connects

00:35:00,040 --> 00:35:04,570
to this resident process and just pushes

00:35:02,890 --> 00:35:07,869
the messages to the standardout

00:35:04,570 --> 00:35:16,869
interesting okay cool thank you thank

00:35:07,869 --> 00:35:21,130
you any other questions yes my question

00:35:16,869 --> 00:35:24,250
is for example metals uses look isn't it

00:35:21,130 --> 00:35:27,310
and the BSP to contact with blue let's

00:35:24,250 --> 00:35:29,950
say that I have IntelliJ or another IDE

00:35:27,310 --> 00:35:32,580
that also uses metal or an editor that

00:35:29,950 --> 00:35:36,580
supports metal that also wants to use a

00:35:32,580 --> 00:35:40,150
blue should it use it through metals or

00:35:36,580 --> 00:35:43,990
should it contact it directly and that's

00:35:40,150 --> 00:35:47,040
the blue or the BSP supports that two

00:35:43,990 --> 00:35:49,750
tools working on the same code base

00:35:47,040 --> 00:35:54,609
contact it at the same time is that

00:35:49,750 --> 00:35:57,670
possible that depends on the tool if you

00:35:54,609 --> 00:36:01,030
allow concurrent access but you can have

00:35:57,670 --> 00:36:02,980
multiple BSP servers connecting to the

00:36:01,030 --> 00:36:06,280
same bill tool or running on the same

00:36:02,980 --> 00:36:09,630
workspace okay yeah it's only a matter

00:36:06,280 --> 00:36:13,720
if the build tool itself allows

00:36:09,630 --> 00:36:14,520
concurrent accesses or or if it will get

00:36:13,720 --> 00:36:17,520
confused

00:36:14,520 --> 00:36:19,530
and break caching so when you talk about

00:36:17,520 --> 00:36:24,660
the build tool you mean blue or you mean

00:36:19,530 --> 00:36:27,840
SBT in general whatever you use so to

00:36:24,660 --> 00:36:32,040
your first part of the question so

00:36:27,840 --> 00:36:34,410
IntelliJ can use bloop as its build

00:36:32,040 --> 00:36:37,500
server its build server protocol server

00:36:34,410 --> 00:36:41,880
and in which case you import directly

00:36:37,500 --> 00:36:43,380
from loop now bloop has its own

00:36:41,880 --> 00:36:46,380
configuration file which you could write

00:36:43,380 --> 00:36:49,740
by hand but the more typical use case is

00:36:46,380 --> 00:36:53,610
that you export an existing project from

00:36:49,740 --> 00:36:56,160
SBT or mill or basil or maven to the

00:36:53,610 --> 00:37:03,450
bloop configuration format and then you

00:36:56,160 --> 00:37:06,860
import it into IntelliJ via BSP and and

00:37:03,450 --> 00:37:09,900
that's basically also what metals does

00:37:06,860 --> 00:37:13,380
okay so it's possible to work both with

00:37:09,900 --> 00:37:18,540
metals and Intel something an editor

00:37:13,380 --> 00:37:22,950
that uses the same thing yeah in

00:37:18,540 --> 00:37:30,600
principle there's no problem okay thank

00:37:22,950 --> 00:37:32,190
you hello a couple things one I think

00:37:30,600 --> 00:37:33,660
the centered and centered out interface

00:37:32,190 --> 00:37:36,990
successful fiying that is totally

00:37:33,660 --> 00:37:37,950
fantastic it - one is any Mac user I

00:37:36,990 --> 00:37:39,570
know that I can just pray it out to the

00:37:37,950 --> 00:37:40,830
terminal and debug it and then do

00:37:39,570 --> 00:37:43,350
whatever else I want and it seems to

00:37:40,830 --> 00:37:45,030
support multiple tools at the same time

00:37:43,350 --> 00:37:46,890
I think really naturally without having

00:37:45,030 --> 00:37:48,330
to have a virtual figure out like it's

00:37:46,890 --> 00:37:50,220
not good interface so but that was

00:37:48,330 --> 00:37:52,050
really really cool and I hope the module

00:37:50,220 --> 00:37:53,550
copying solution was also a fantastic

00:37:52,050 --> 00:37:55,320
because that was my main concern

00:37:53,550 --> 00:37:56,790
when looking thinking about how I didn't

00:37:55,320 --> 00:37:58,800
get IntelliJ was shared sources then

00:37:56,790 --> 00:38:00,990
immediately you just described it so I

00:37:58,800 --> 00:38:03,840
want to say that when I say that and

00:38:00,990 --> 00:38:06,540
then the thing I'd wanted to ask was is

00:38:03,840 --> 00:38:09,660
it possible for a tool to support a

00:38:06,540 --> 00:38:13,740
subset of the protocol is a semantics

00:38:09,660 --> 00:38:15,570
can be declared and then but also it's

00:38:13,740 --> 00:38:17,160
you know maybe it's not harden it's too

00:38:15,570 --> 00:38:19,050
hard to pin all of it but a subset it

00:38:17,160 --> 00:38:22,920
sounds like it's appropriate or can be

00:38:19,050 --> 00:38:24,800
done yes so let's PSP protocol already

00:38:22,920 --> 00:38:27,589
has

00:38:24,800 --> 00:38:30,709
messages and

00:38:27,589 --> 00:38:32,680
has that so you the server and both

00:38:30,709 --> 00:38:35,900
server and client can declare their

00:38:32,680 --> 00:38:37,819
capabilities there are some minimum set

00:38:35,900 --> 00:38:41,539
of capabilities that you need to support

00:38:37,819 --> 00:38:43,279
to have reasonable integration but for

00:38:41,539 --> 00:38:47,959
instance a build tool doesn't even need

00:38:43,279 --> 00:38:50,630
to be able to support compile you can

00:38:47,959 --> 00:38:55,959
already import it into IntelliJ if it

00:38:50,630 --> 00:38:58,459
just supports some basic messages like

00:38:55,959 --> 00:39:00,229
give me targets and give me sources

00:38:58,459 --> 00:39:03,499
associated with the targets that's

00:39:00,229 --> 00:39:05,660
enough to import it in IntelliJ and we

00:39:03,499 --> 00:39:14,089
look at the BSB protocol now thank you

00:39:05,660 --> 00:39:16,119
very much yep yep next question here can

00:39:14,089 --> 00:39:19,249
you give us a rough idea of the

00:39:16,119 --> 00:39:21,140
magnitude of the task of adding a new

00:39:19,249 --> 00:39:25,130
build tool like you know how many lines

00:39:21,140 --> 00:39:28,969
of code do I have to write into IntelliJ

00:39:25,130 --> 00:39:32,420
or creating a BSP support within a build

00:39:28,969 --> 00:39:34,369
tool creating BSP support I think it

00:39:32,420 --> 00:39:38,599
would depend a lot on the build tool so

00:39:34,369 --> 00:39:42,880
the basic BSP support I had in put into

00:39:38,599 --> 00:39:42,880
fury was a four or five hundred lines

00:39:43,119 --> 00:39:50,749
yeah was not too complicated

00:39:48,739 --> 00:39:57,380
most of it was understanding how Fury

00:39:50,749 --> 00:39:58,400
works okay is there a test suite that if

00:39:57,380 --> 00:39:59,809
we have an implementation that you

00:39:58,400 --> 00:40:02,029
couldn't test it against I think there

00:39:59,809 --> 00:40:06,259
probably is there's several and there's

00:40:02,029 --> 00:40:10,579
a test kit in the BSP implementation so

00:40:06,259 --> 00:40:15,890
there's a set of tests that you can run

00:40:10,579 --> 00:40:19,549
against the server there is Scala check

00:40:15,890 --> 00:40:22,519
generators for all the messages in ESP

00:40:19,549 --> 00:40:25,969
and a few other things it's not complete

00:40:22,519 --> 00:40:34,029
but it should give you a star yeah any

00:40:25,969 --> 00:40:34,029
other yeah

00:40:37,060 --> 00:40:44,600
so elsewhere within JetBrains have you

00:40:40,850 --> 00:40:48,470
made strides with getting other language

00:40:44,600 --> 00:40:50,660
support in IntelliJ to consume BSB to

00:40:48,470 --> 00:40:52,850
interact with their build tools not yet

00:40:50,660 --> 00:40:56,450
that we've talked about it internally so

00:40:52,850 --> 00:40:59,320
so my approach is if this has gets any

00:40:56,450 --> 00:41:04,400
traction in Scala and we have a

00:40:59,320 --> 00:41:06,950
reasonably stable support for it then we

00:41:04,400 --> 00:41:09,950
extract it to a separate plugin which

00:41:06,950 --> 00:41:14,720
could also make it into the core

00:41:09,950 --> 00:41:24,500
distribution of IntelliJ any more

00:41:14,720 --> 00:41:28,070
comments ok that's it then I'll just ask

00:41:24,500 --> 00:41:30,320
a few things want to give me honest

00:41:28,070 --> 00:41:34,040
feedback it's anonymous so you can be

00:41:30,320 --> 00:41:40,130
honest on the scala days app so just

00:41:34,040 --> 00:41:44,810
vote and the next is some shameless plug

00:41:40,130 --> 00:41:49,400
so I mentioned my most of our team is

00:41:44,810 --> 00:41:51,740
here and they two of them will be giving

00:41:49,400 --> 00:41:54,050
talks at the developer jungle hosted by

00:41:51,740 --> 00:41:56,510
virtus lab if you have seen it the place

00:41:54,050 --> 00:42:02,690
with all the plants one of them is going

00:41:56,510 --> 00:42:05,450
to be by Dimitri who's over here on some

00:42:02,690 --> 00:42:09,890
cool new tools for big data they've been

00:42:05,450 --> 00:42:13,340
developing so check that out please and

00:42:09,890 --> 00:42:18,320
the other is about some work we're doing

00:42:13,340 --> 00:42:22,700
in the Scala plugin so about data flow

00:42:18,320 --> 00:42:23,360
analysis so I'm looking forward to that

00:42:22,700 --> 00:42:25,850
one as well

00:42:23,360 --> 00:42:29,300
because I don't really understand what's

00:42:25,850 --> 00:42:33,740
going on there so my colleague Toby will

00:42:29,300 --> 00:42:38,120
explain more about how we're gonna give

00:42:33,740 --> 00:42:40,340
more insight into the code from the

00:42:38,120 --> 00:42:45,980
Scala plugin these are both lightning

00:42:40,340 --> 00:42:48,620
talks 10 to 15 minutes and lastly IO we

00:42:45,980 --> 00:42:49,820
have a booth and this is us so come talk

00:42:48,620 --> 00:42:54,480
to us anytime

00:42:49,820 --> 00:42:59,090
during the conference oh yeah these two

00:42:54,480 --> 00:43:02,040
talks are tomorrow at 1440 1630 and

00:42:59,090 --> 00:43:07,110
that's it thank you

00:43:02,040 --> 00:43:07,110

YouTube URL: https://www.youtube.com/watch?v=LdsxXKS1iKk


