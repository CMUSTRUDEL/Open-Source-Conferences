Title: Typelevel in 2016 by Miles Sabin
Publication date: 2016-07-22
Playlist: Scala Days Berlin 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Abstract:
There has been a huge amount of activity around the Typelevel family of projects in the last eighteen months. It hasn't always been plain sailing, but the arrival of Cats on the scene last year marked the beginning an exciting period of collaboration among the Typelevel projects and reaching out to the wider Scala community that hadn't been possible before. Now, in mid-2016, we have had two Typelevel conferences and things are going from strength to strength. This talk will give a flavour of what has been going on: the collaborations between Algebra, Spire and Cats; between Cats and shapeless; between shapeless and scodec, doobie, ScalaCheck and Circe; and how all of this is feeding into the rebooted Typelevel Scala fork. It's also an open invitation to people right across the Scala spectrum to get involved in these projects and see what they can do for them in their own work.
Captions: 
	00:00:05,770 --> 00:00:12,110
good morning everybody can everyone hear

00:00:08,420 --> 00:00:15,110
me right at the back yeah awesome well

00:00:12,110 --> 00:00:17,270
thank you all for coming I know there

00:00:15,110 --> 00:00:18,770
are several other very very interesting

00:00:17,270 --> 00:00:20,150
talks on at the same time so it's really

00:00:18,770 --> 00:00:23,690
really nice to see so many people here

00:00:20,150 --> 00:00:27,470
and who is here for a Jamie's keynote

00:00:23,690 --> 00:00:29,240
just before lots people well I thought

00:00:27,470 --> 00:00:31,430
it's great talk i'm also very grateful

00:00:29,240 --> 00:00:34,010
to Jamie because after that there's

00:00:31,430 --> 00:00:38,690
absolutely no danger of me appearing to

00:00:34,010 --> 00:00:41,239
be too political or or in moderate in

00:00:38,690 --> 00:00:42,739
any of the things they might say so

00:00:41,239 --> 00:00:45,530
that's that's very helpful it start with

00:00:42,739 --> 00:00:46,969
um okay before I get going and can have

00:00:45,530 --> 00:00:50,719
a quick show of hands in the room and

00:00:46,969 --> 00:00:53,510
who has heard of type level that's

00:00:50,719 --> 00:00:56,050
that's most people and how's that who

00:00:53,510 --> 00:00:59,389
who hasn't heard of type level justice

00:00:56,050 --> 00:01:02,809
not very many people and all the people

00:00:59,389 --> 00:01:06,140
who have heard of tight level who thinks

00:01:02,809 --> 00:01:07,610
that it's basically just just a bunch of

00:01:06,140 --> 00:01:10,400
open source projects and who thinks that

00:01:07,610 --> 00:01:14,360
that maybe there are some other things

00:01:10,400 --> 00:01:16,340
going on there as well so a few people a

00:01:14,360 --> 00:01:18,830
few people so most most people basically

00:01:16,340 --> 00:01:19,910
think it's it's just a label for a

00:01:18,830 --> 00:01:20,840
collection of open source projects

00:01:19,910 --> 00:01:23,930
that's kind of what I would have

00:01:20,840 --> 00:01:30,170
expected okay well it's it's got a logo

00:01:23,930 --> 00:01:33,440
now this is this is this is um this is

00:01:30,170 --> 00:01:36,020
the the type novel bouncy turnstile i

00:01:33,440 --> 00:01:39,650
think is the name that Rob Norris gave

00:01:36,020 --> 00:01:41,240
it it's a really I think kind of kind of

00:01:39,650 --> 00:01:42,920
quite a nice little thing it's a riff on

00:01:41,240 --> 00:01:44,900
it sort of you squinted it one way it's

00:01:42,920 --> 00:01:47,000
a t4 tight level if you squint another

00:01:44,900 --> 00:01:49,130
way it's a sort of a staircase if you

00:01:47,000 --> 00:01:50,660
squinted it the way head on its kind of

00:01:49,130 --> 00:01:52,070
the sort of capital T turn on its side

00:01:50,660 --> 00:01:54,470
which is a semantic or syntactic

00:01:52,070 --> 00:01:55,970
turnstile which is a an operator which

00:01:54,470 --> 00:01:57,020
is used in in sort of type theory and

00:01:55,970 --> 00:01:58,580
logic and things like that which is

00:01:57,020 --> 00:01:59,990
really nice and I hadn't actually

00:01:58,580 --> 00:02:01,520
realized it but if you sort of rotated

00:01:59,990 --> 00:02:02,750
about sort of 30 degrees you also get a

00:02:01,520 --> 00:02:05,840
little Lander in there which is also

00:02:02,750 --> 00:02:07,909
kind of nice there's something for

00:02:05,840 --> 00:02:12,440
everybody let me just move my mouse

00:02:07,909 --> 00:02:16,160
pointer out the way okay so

00:02:12,440 --> 00:02:20,440
what is tight level and so it's a

00:02:16,160 --> 00:02:25,160
community of projects and individuals

00:02:20,440 --> 00:02:28,460
organized around and pure type full

00:02:25,160 --> 00:02:32,840
functional programming in Scala the

00:02:28,460 --> 00:02:36,460
unpack that a little bit by pure what we

00:02:32,840 --> 00:02:40,760
mean is that we want to program without

00:02:36,460 --> 00:02:42,680
uncontrolled effects we want to treat

00:02:40,760 --> 00:02:46,640
our functions as functions in the

00:02:42,680 --> 00:02:48,080
mathematical sense and we want we want

00:02:46,640 --> 00:02:50,270
our programs to have the property of

00:02:48,080 --> 00:02:52,220
referential transparency something that

00:02:50,270 --> 00:02:53,900
you will hear people talking about a lot

00:02:52,220 --> 00:02:56,060
but basically which means that you can

00:02:53,900 --> 00:02:57,770
you can reason about programs by making

00:02:56,060 --> 00:03:00,350
simple substitutions without having to

00:02:57,770 --> 00:03:02,420
be concerned about about how a

00:03:00,350 --> 00:03:04,460
substitution of equal things might

00:03:02,420 --> 00:03:11,440
somehow in some unpredictable way change

00:03:04,460 --> 00:03:15,610
meaning by tight 'full we mean that we

00:03:11,440 --> 00:03:19,489
want to make as much use as possible of

00:03:15,610 --> 00:03:21,140
scholars very expressive type system to

00:03:19,489 --> 00:03:23,750
allow us to express properties about our

00:03:21,140 --> 00:03:25,100
programs to another compiler to verify

00:03:23,750 --> 00:03:28,840
those properties to allow the compiler

00:03:25,100 --> 00:03:30,980
to use our descriptions of

00:03:28,840 --> 00:03:38,920
characteristics of our programs to help

00:03:30,980 --> 00:03:41,030
us construct our programs so pipes are

00:03:38,920 --> 00:03:42,620
unsurprisingly I suppose for an umbrella

00:03:41,030 --> 00:03:43,760
group called type level types are

00:03:42,620 --> 00:03:46,280
something which are very important to us

00:03:43,760 --> 00:03:47,570
functional programming I suppose by the

00:03:46,280 --> 00:03:49,730
time you've happier and tight full we

00:03:47,570 --> 00:03:50,720
basically we basically have functional

00:03:49,730 --> 00:03:53,000
program and we're programming the

00:03:50,720 --> 00:03:55,040
functions but the key thing is the last

00:03:53,000 --> 00:03:57,410
bit in Scala so one of the things we

00:03:55,040 --> 00:04:00,140
want to do is all of these though all of

00:03:57,410 --> 00:04:09,170
these things but but idiomatically force

00:04:00,140 --> 00:04:11,570
Carla so so whilst many of the ideas

00:04:09,170 --> 00:04:15,050
that that projects within the type level

00:04:11,570 --> 00:04:16,489
family whilst many other projects within

00:04:15,050 --> 00:04:18,470
the type of a family draw inspiration

00:04:16,489 --> 00:04:20,890
from other programming language

00:04:18,470 --> 00:04:22,910
communities be it's a haskell is common

00:04:20,890 --> 00:04:25,780
common

00:04:22,910 --> 00:04:29,300
sort of touchstone for people working in

00:04:25,780 --> 00:04:30,890
type level space or all maybe maybe what

00:04:29,300 --> 00:04:33,770
more even more exciting languages like

00:04:30,890 --> 00:04:36,500
actor or Idris and the key thing is we

00:04:33,770 --> 00:04:38,120
want to bring things back into scarlet

00:04:36,500 --> 00:04:39,950
in a way which is idiomatic which cuts

00:04:38,120 --> 00:04:42,140
with the grain of the language which

00:04:39,950 --> 00:04:44,420
isn't just trying to be Haskell or it

00:04:42,140 --> 00:04:47,630
reads fanfic it's got to be something

00:04:44,420 --> 00:04:49,520
which which actually works as Scarlett

00:04:47,630 --> 00:04:51,860
code either when that either within the

00:04:49,520 --> 00:04:55,220
confines of the language as it currently

00:04:51,860 --> 00:04:56,900
is or or at least in principle as it

00:04:55,220 --> 00:04:58,760
could be where we've got some kind of

00:04:56,900 --> 00:05:00,830
reasonable prospect of actually actually

00:04:58,760 --> 00:05:05,600
making the language fit fit what it is

00:05:00,830 --> 00:05:06,860
that we want so that's that's the kind

00:05:05,600 --> 00:05:08,930
of the sort of that if you like that

00:05:06,860 --> 00:05:10,970
sort of technical philosophy I suppose

00:05:08,930 --> 00:05:12,740
behind what type level is and in terms

00:05:10,970 --> 00:05:15,440
of the actual organizational structure

00:05:12,740 --> 00:05:17,840
it's a collection of independent free

00:05:15,440 --> 00:05:20,030
and open source software projects it's

00:05:17,840 --> 00:05:22,600
pretty much the case that well it is the

00:05:20,030 --> 00:05:26,720
case that every single constituent

00:05:22,600 --> 00:05:31,070
project of of the organization as a

00:05:26,720 --> 00:05:35,930
whole is is an open source project with

00:05:31,070 --> 00:05:38,200
with a wither wither with with a free

00:05:35,930 --> 00:05:41,540
software license of some form and

00:05:38,200 --> 00:05:43,640
independence in the sense that swell in

00:05:41,540 --> 00:05:48,410
multiple senses but in the sense firstly

00:05:43,640 --> 00:05:49,669
that most of the projects are there they

00:05:48,410 --> 00:05:51,250
are community projects they're they're

00:05:49,669 --> 00:05:53,990
not backed by any particular

00:05:51,250 --> 00:05:55,430
organizational commercial entity they're

00:05:53,990 --> 00:06:00,370
independent in the sense that the whole

00:05:55,430 --> 00:06:03,410
organization itself is bottom-up the

00:06:00,370 --> 00:06:05,180
type level exists because of of its

00:06:03,410 --> 00:06:09,320
constituent organizations rather than

00:06:05,180 --> 00:06:11,120
because of some sort of hierarchical

00:06:09,320 --> 00:06:18,140
structure it's a it's a bottom-up

00:06:11,120 --> 00:06:19,720
organization and sort of more of into

00:06:18,140 --> 00:06:22,340
the entities like the non-technical

00:06:19,720 --> 00:06:24,740
aspects of it we've got a desire to

00:06:22,340 --> 00:06:27,380
share ideas and share code we want our

00:06:24,740 --> 00:06:29,120
self to be accessible and easy people to

00:06:27,380 --> 00:06:31,340
understand easy easy for people to draw

00:06:29,120 --> 00:06:33,350
on we want people to be able to sort of

00:06:31,340 --> 00:06:34,910
even if not directed use our projects at

00:06:33,350 --> 00:06:36,260
least draw inspiration from the way

00:06:34,910 --> 00:06:39,320
they're structured

00:06:36,260 --> 00:06:42,590
and to treat them as as a model for kind

00:06:39,320 --> 00:06:48,040
of best practices for how code in this

00:06:42,590 --> 00:06:49,850
style is and can best be constructed

00:06:48,040 --> 00:06:51,500
obviously with the proviso that we

00:06:49,850 --> 00:06:52,460
reckon recognize that there are there

00:06:51,500 --> 00:06:54,350
are other styles and there are other

00:06:52,460 --> 00:06:58,790
ways of doing things and one size

00:06:54,350 --> 00:07:00,620
doesn't fit all and sharing ideas is one

00:06:58,790 --> 00:07:03,140
thing sharing code is another one one

00:07:00,620 --> 00:07:04,250
problem that that we often have in the

00:07:03,140 --> 00:07:06,890
scholar community is that it's actually

00:07:04,250 --> 00:07:09,080
quite difficult sometimes to to to have

00:07:06,890 --> 00:07:13,970
binary dependencies on other projects

00:07:09,080 --> 00:07:15,140
because of some of our unfortunate bumps

00:07:13,970 --> 00:07:17,330
in the road on our kind of binary

00:07:15,140 --> 00:07:19,490
compatibility story and one of the

00:07:17,330 --> 00:07:21,170
things that that that the type level

00:07:19,490 --> 00:07:25,340
project in aggregate want to be able to

00:07:21,170 --> 00:07:27,020
do is I'm not saying we're necessarily

00:07:25,340 --> 00:07:28,730
able to actually actually actually

00:07:27,020 --> 00:07:30,380
succeed at this but at least be very

00:07:28,730 --> 00:07:32,000
very aware of the fact that that people

00:07:30,380 --> 00:07:34,010
will want to use our projects both

00:07:32,000 --> 00:07:34,970
together with each other and in

00:07:34,010 --> 00:07:37,010
conjunction with other pieces of

00:07:34,970 --> 00:07:40,190
software and across multiple versions of

00:07:37,010 --> 00:07:41,300
a scalar programming language and so one

00:07:40,190 --> 00:07:42,920
on one you know one of the things we

00:07:41,300 --> 00:07:46,670
would really love to be able to try and

00:07:42,920 --> 00:07:48,650
avoid is a situation where people feel

00:07:46,670 --> 00:07:50,510
obliged to absolutely minimize their

00:07:48,650 --> 00:07:52,370
dependencies because every dependency

00:07:50,510 --> 00:07:55,190
they have they know or at some point

00:07:52,370 --> 00:07:56,750
come and come and bite them we want we

00:07:55,190 --> 00:07:58,370
want to try and get to a situation where

00:07:56,750 --> 00:07:59,900
where that is not anything like as much

00:07:58,370 --> 00:08:08,080
of a problem as it as it has been in the

00:07:59,900 --> 00:08:08,080
past and we want to be approachable and

00:08:08,290 --> 00:08:12,200
clearly sharing ideas and sharing code

00:08:10,730 --> 00:08:15,020
is only going to work if people actually

00:08:12,200 --> 00:08:17,350
can understand what we're doing and to

00:08:15,020 --> 00:08:19,880
do that we need to be able to provide

00:08:17,350 --> 00:08:21,260
people in both in the community and

00:08:19,880 --> 00:08:23,720
people come into the community with with

00:08:21,260 --> 00:08:25,730
resources that will help them get inside

00:08:23,720 --> 00:08:28,100
to understand what that first line of

00:08:25,730 --> 00:08:29,480
pure title functional programming really

00:08:28,100 --> 00:08:31,340
means and appreciate it and understand

00:08:29,480 --> 00:08:33,580
why that matters and why why it's

00:08:31,340 --> 00:08:36,620
important and for that we need to have

00:08:33,580 --> 00:08:39,560
accessible learning resources we need to

00:08:36,620 --> 00:08:42,320
have also a environment and a community

00:08:39,560 --> 00:08:44,870
of people who are actively want to reach

00:08:42,320 --> 00:08:46,850
out and generally bring people in and

00:08:44,870 --> 00:08:48,740
meet people on their own terms rather

00:08:46,850 --> 00:08:49,220
than sort of dictate terms to them from

00:08:48,740 --> 00:08:51,290
some

00:08:49,220 --> 00:08:53,120
some position on high because I don't

00:08:51,290 --> 00:08:55,490
think that's that's productive or

00:08:53,120 --> 00:09:00,319
helpful so that's that's kind of if you

00:08:55,490 --> 00:09:02,180
like the I'm pointing back era era era

00:09:00,319 --> 00:09:04,970
era coughs I'm who sees one of the

00:09:02,180 --> 00:09:07,399
cofounders of type level he did a

00:09:04,970 --> 00:09:10,220
fantastic talk on building open source

00:09:07,399 --> 00:09:13,420
communities last year at scarlet wealth

00:09:10,220 --> 00:09:16,009
in the Lake District in the UK and i

00:09:13,420 --> 00:09:17,240
highly recommend that people people find

00:09:16,009 --> 00:09:18,980
the video of that and watch it is a

00:09:17,240 --> 00:09:20,930
great talk and i think very much

00:09:18,980 --> 00:09:26,180
elaborates on on this kind of picture of

00:09:20,930 --> 00:09:30,230
what what type level is as a thing okay

00:09:26,180 --> 00:09:33,620
so this is the way in top level is top

00:09:30,230 --> 00:09:35,120
level dog and basically because it's a

00:09:33,620 --> 00:09:37,310
it's a software it's a community of

00:09:35,120 --> 00:09:38,720
software communities i guess and and

00:09:37,310 --> 00:09:40,279
where do open source software

00:09:38,720 --> 00:09:42,649
communities live these days they live on

00:09:40,279 --> 00:09:44,379
github so basically everything is

00:09:42,649 --> 00:09:47,149
organized around a tight level

00:09:44,379 --> 00:09:49,899
organization on github under which you

00:09:47,149 --> 00:09:52,970
will find a tight little general project

00:09:49,899 --> 00:09:55,220
that's basically where all of our kind

00:09:52,970 --> 00:09:57,800
of if you like business stuff happens

00:09:55,220 --> 00:09:59,839
where where we you know discuss how

00:09:57,800 --> 00:10:03,529
we're going to organize how we're going

00:09:59,839 --> 00:10:05,000
to set up events and and general kind of

00:10:03,529 --> 00:10:08,240
methods of policy and all that kind of

00:10:05,000 --> 00:10:10,009
stuff there is also a tight level get a

00:10:08,240 --> 00:10:11,779
channel corresponding directly to that

00:10:10,009 --> 00:10:13,220
repo it's very very lively gets a

00:10:11,779 --> 00:10:15,079
channel i highly recommend that people

00:10:13,220 --> 00:10:17,899
join it and that's where we basically

00:10:15,079 --> 00:10:19,550
talked about what we're doing just as a

00:10:17,899 --> 00:10:22,189
general thing and in principle pretty

00:10:19,550 --> 00:10:26,000
much all of the tight level projects

00:10:22,189 --> 00:10:30,740
have I i would say more or less unmask

00:10:26,000 --> 00:10:34,189
moved from IRC to to get her I think we

00:10:30,740 --> 00:10:36,319
found it to be a much better environment

00:10:34,189 --> 00:10:38,720
for discussions around software and

00:10:36,319 --> 00:10:40,069
there in Assam extremely lively give two

00:10:38,720 --> 00:10:45,050
channels associated with different type

00:10:40,069 --> 00:10:48,199
level projects cats is one of them that

00:10:45,050 --> 00:10:49,699
has about eight or nine hundred members

00:10:48,199 --> 00:10:50,779
of the gutter channel the shape is

00:10:49,699 --> 00:10:52,220
Chandler's I think the second biggest

00:10:50,779 --> 00:10:53,480
one with about six or seven hundred or

00:10:52,220 --> 00:10:56,180
something like that so very very busy

00:10:53,480 --> 00:10:58,600
lively communities and much bigger than

00:10:56,180 --> 00:11:07,029
the corresponding IRC channels were

00:10:58,600 --> 00:11:08,889
okay whoops fast right okay so type

00:11:07,029 --> 00:11:09,910
level is well it's a calf wall I sit

00:11:08,889 --> 00:11:11,380
back at the beginning I said it was a

00:11:09,910 --> 00:11:13,959
community projects and people organized

00:11:11,380 --> 00:11:15,459
around pure title functional programming

00:11:13,959 --> 00:11:17,290
so it's community projects what are the

00:11:15,459 --> 00:11:22,259
projects so there's a whole bunch of

00:11:17,290 --> 00:11:26,380
libraries and who here has heard of cats

00:11:22,259 --> 00:11:28,480
lots of people shapeless yeah lots of

00:11:26,380 --> 00:11:29,980
people ok so i guess i guess this is a

00:11:28,480 --> 00:11:31,480
crowd where most of these libraries are

00:11:29,980 --> 00:11:32,709
familiar in one way or another is there

00:11:31,480 --> 00:11:34,389
a other anything is there anything on

00:11:32,709 --> 00:11:36,819
this list that people are surprised is

00:11:34,389 --> 00:11:38,350
actually a type level project that may

00:11:36,819 --> 00:11:40,389
be so a project that's very familiar to

00:11:38,350 --> 00:11:41,680
them that they've they've used but

00:11:40,389 --> 00:11:43,720
didn't didn't didn't realize it was a

00:11:41,680 --> 00:11:45,370
type level project I suppose that's a

00:11:43,720 --> 00:11:47,050
hard question to ask an audience but

00:11:45,370 --> 00:11:49,660
anyway so we've got cats alley cats

00:11:47,050 --> 00:11:51,399
kittens and dogs so these two cats is

00:11:49,660 --> 00:11:53,980
fundamental data structure in type

00:11:51,399 --> 00:11:55,930
classes alley cats are kind of

00:11:53,980 --> 00:11:58,540
fundamental data type classes which are

00:11:55,930 --> 00:11:59,800
which are slightly slightly dubious for

00:11:58,540 --> 00:12:01,630
various reasons which are somewhat

00:11:59,800 --> 00:12:03,100
controversial kittens is a library of

00:12:01,630 --> 00:12:04,959
mine which uses shapeless in conjunction

00:12:03,100 --> 00:12:07,720
with cats to to automatically derive

00:12:04,959 --> 00:12:09,370
type class instances for cats dogs cats

00:12:07,720 --> 00:12:12,730
and dogs could that go wrong I don't

00:12:09,370 --> 00:12:15,759
know and dogs is a library of functional

00:12:12,730 --> 00:12:18,040
data structures so cats itself is a

00:12:15,759 --> 00:12:20,199
library of type classes only a person it

00:12:18,040 --> 00:12:23,050
has very few actual concrete data

00:12:20,199 --> 00:12:26,139
structures shapeless is my generic

00:12:23,050 --> 00:12:28,509
programming library refined is a library

00:12:26,139 --> 00:12:30,519
which is based uses shapeless in part

00:12:28,509 --> 00:12:32,889
but but basically elaborates on those

00:12:30,519 --> 00:12:34,389
ideas massively to take us in the

00:12:32,889 --> 00:12:38,019
direction of dependently type

00:12:34,389 --> 00:12:39,880
programming via refinement types aspire

00:12:38,019 --> 00:12:41,139
an algebra they're both mathematical

00:12:39,880 --> 00:12:44,740
libraries I think spire is kind of the

00:12:41,139 --> 00:12:48,839
almost de facto numerical library force

00:12:44,740 --> 00:12:52,889
Carla now algebra is a set of related

00:12:48,839 --> 00:12:54,880
type classes and and structures for

00:12:52,889 --> 00:12:56,889
mathematical algebraic kind of

00:12:54,880 --> 00:12:59,380
characteristics monocle is is I think I

00:12:56,889 --> 00:13:02,680
think most people agree is the best of

00:12:59,380 --> 00:13:06,400
breed lens library for us Carla so guess

00:13:02,680 --> 00:13:08,800
codec and Circe let's go deck binary

00:13:06,400 --> 00:13:11,410
binary serialization deserialization

00:13:08,800 --> 00:13:13,480
frameworks Cersei jason serialization

00:13:11,410 --> 00:13:15,910
the serialization both of them working

00:13:13,480 --> 00:13:18,250
with shapeless to provide automatic

00:13:15,910 --> 00:13:20,770
generation of instances for arbitrary

00:13:18,250 --> 00:13:25,690
algebraic data types and do be a

00:13:20,770 --> 00:13:27,460
type-safe JDBC layer so that within

00:13:25,690 --> 00:13:28,800
within this group of Santa loan

00:13:27,460 --> 00:13:33,370
libraries there are many many

00:13:28,800 --> 00:13:35,050
dependencies and interrelations which we

00:13:33,370 --> 00:13:38,500
think are very desirable we don't want

00:13:35,050 --> 00:13:42,190
everybody to be reinventing the wheel so

00:13:38,500 --> 00:13:46,120
cats is but we'll see a little more

00:13:42,190 --> 00:13:47,590
about cats later on but cats is in

00:13:46,120 --> 00:13:50,040
aggregate quite a quite a quite a large

00:13:47,590 --> 00:13:54,460
library but we've managed to work out a

00:13:50,040 --> 00:13:57,760
sensible way of producing if you like

00:13:54,460 --> 00:13:59,920
sub modules which represents core and

00:13:57,760 --> 00:14:01,120
even smaller colonel characteristics

00:13:59,920 --> 00:14:02,620
which which can be very very easily

00:14:01,120 --> 00:14:05,020
shared between other libraries in

00:14:02,620 --> 00:14:07,330
particularly the algebra library depends

00:14:05,020 --> 00:14:10,660
on the cats colonel cats colonel

00:14:07,330 --> 00:14:13,840
contains basically the minimal minimal

00:14:10,660 --> 00:14:15,400
functor etc type classes that that you

00:14:13,840 --> 00:14:17,860
want to have in almost any any

00:14:15,400 --> 00:14:18,940
circumstances and algebra being being

00:14:17,860 --> 00:14:20,950
the foundation for a number of

00:14:18,940 --> 00:14:23,230
commercial projects and things like

00:14:20,950 --> 00:14:24,940
algebra and such like needs to be very

00:14:23,230 --> 00:14:26,380
very solid in very very stable so for it

00:14:24,940 --> 00:14:28,750
to have a dependency on cats colonel

00:14:26,380 --> 00:14:30,700
cats colonel has to have some kind of

00:14:28,750 --> 00:14:34,810
commitment to being something that will

00:14:30,700 --> 00:14:36,660
be very stable and and and something

00:14:34,810 --> 00:14:38,530
that can be relied on as a dependency

00:14:36,660 --> 00:14:42,820
several of these libraries depend on

00:14:38,530 --> 00:14:45,160
shake this in one way or another and and

00:14:42,820 --> 00:14:46,480
and there is a just a general desire for

00:14:45,160 --> 00:14:48,700
all of these projects to work together

00:14:46,480 --> 00:14:51,640
and to collaborate and to make great

00:14:48,700 --> 00:14:54,790
things not more individually but but as

00:14:51,640 --> 00:14:56,890
part of a part of a team and okay other

00:14:54,790 --> 00:15:00,070
things which beyond some learn libraries

00:14:56,890 --> 00:15:03,070
enzyme is part of its part of type level

00:15:00,070 --> 00:15:06,180
two is a sorry for people who don't know

00:15:03,070 --> 00:15:09,880
maybe there aren't any but enzyme is

00:15:06,180 --> 00:15:13,710
cross editor tooling for scholar so it

00:15:09,880 --> 00:15:16,960
will provide scholar language

00:15:13,710 --> 00:15:19,120
capabilities for for emacs primarily I

00:15:16,960 --> 00:15:22,510
suppose but also for them for

00:15:19,120 --> 00:15:27,430
for sublime and what others but I guess

00:15:22,510 --> 00:15:30,760
those are the main three suit is a

00:15:27,430 --> 00:15:33,670
library for writing it sorry is a tool

00:15:30,760 --> 00:15:35,140
for providing type check documentation

00:15:33,670 --> 00:15:37,600
so going going back to one of the goals

00:15:35,140 --> 00:15:40,870
of producing accessible up-to-date

00:15:37,600 --> 00:15:42,700
accurate documentation having having

00:15:40,870 --> 00:15:45,190
having document got documentation which

00:15:42,700 --> 00:15:48,400
is which is both both readable and also

00:15:45,190 --> 00:15:51,070
guaranteed to be checked against against

00:15:48,400 --> 00:15:52,870
the the the the library's the code that

00:15:51,070 --> 00:15:54,940
it's intended to be describing is a

00:15:52,870 --> 00:15:57,970
really important thing disciplines for

00:15:54,940 --> 00:16:00,310
is for checking laws type classes have

00:15:57,970 --> 00:16:01,660
to have to satisfy various kinds of

00:16:00,310 --> 00:16:03,310
properties and we need to have

00:16:01,660 --> 00:16:06,850
mechanisms for for verifying that those

00:16:03,310 --> 00:16:07,600
things true scholar check I'm sure lots

00:16:06,850 --> 00:16:08,830
of people have heard of trance

00:16:07,600 --> 00:16:09,910
scholarship maybe it's not quite so well

00:16:08,830 --> 00:16:13,390
known that cigar the check is part of

00:16:09,910 --> 00:16:16,180
type level also specs to again very well

00:16:13,390 --> 00:16:17,770
known testing framework and catalyst

00:16:16,180 --> 00:16:20,320
finally it's some sort of common shared

00:16:17,770 --> 00:16:22,600
build infrastructure very much a work in

00:16:20,320 --> 00:16:24,870
progress but but it's a mixture of build

00:16:22,600 --> 00:16:27,430
infrastructure both at the level of

00:16:24,870 --> 00:16:29,200
infrastructure that can be shared as

00:16:27,430 --> 00:16:31,270
part of an SBT build by different

00:16:29,200 --> 00:16:33,339
projects but also one of the things

00:16:31,270 --> 00:16:34,750
we're aiming in the direction of when

00:16:33,339 --> 00:16:36,640
we'll get there is not quite clear but

00:16:34,750 --> 00:16:39,279
providing some kind of mechanism whereby

00:16:36,640 --> 00:16:41,470
we can do the kind of kind of the

00:16:39,279 --> 00:16:43,270
equivalent of a community bill but if

00:16:41,470 --> 00:16:45,070
you like a type level community build

00:16:43,270 --> 00:16:46,600
community build to demonstrate that our

00:16:45,070 --> 00:16:49,779
projects to actually build together and

00:16:46,600 --> 00:16:51,220
interoperate nicely and a bunch of

00:16:49,779 --> 00:16:52,660
integrations mostly these are things

00:16:51,220 --> 00:16:54,610
that sit on top of shapeless because if

00:16:52,660 --> 00:16:56,050
you can drive type classes for arbitrary

00:16:54,610 --> 00:16:58,330
adt's than there are a whole bunch of

00:16:56,050 --> 00:17:00,100
libraries that can make can make use of

00:16:58,330 --> 00:17:04,150
that so various things have appeared in

00:17:00,100 --> 00:17:09,220
that department and and then we've got a

00:17:04,150 --> 00:17:10,510
bunch of things that are I mentioned

00:17:09,220 --> 00:17:12,130
earlier on that we were trying to do

00:17:10,510 --> 00:17:16,209
things which are idiomatic within the

00:17:12,130 --> 00:17:17,740
Scarlet Witch some things where Scott

00:17:16,209 --> 00:17:19,959
there is almost there but not quite and

00:17:17,740 --> 00:17:21,730
we need to do a few little bit bit extra

00:17:19,959 --> 00:17:24,670
that will take a slightly outside of the

00:17:21,730 --> 00:17:27,880
language to make to make the kind of

00:17:24,670 --> 00:17:31,300
code that we're writing either easier or

00:17:27,880 --> 00:17:32,330
perhaps possible to write and for the

00:17:31,300 --> 00:17:35,210
most part

00:17:32,330 --> 00:17:38,059
the last year or so we have the

00:17:35,210 --> 00:17:41,149
mechanism we've we've used for that has

00:17:38,059 --> 00:17:45,710
been primarily macros or even for

00:17:41,149 --> 00:17:47,779
example the macros and shapeless or all

00:17:45,710 --> 00:17:50,090
plugins an example of that would be cut

00:17:47,779 --> 00:17:53,480
the kind projector plugin which is used

00:17:50,090 --> 00:17:56,570
quite heavily in cats both of these

00:17:53,480 --> 00:17:58,730
things are either to to sort of if you

00:17:56,570 --> 00:18:00,740
like it extends the syntax extended the

00:17:58,730 --> 00:18:02,929
scope of what is expressible with with

00:18:00,740 --> 00:18:05,269
with in scala source code without

00:18:02,929 --> 00:18:06,649
fundamentally changing the language but

00:18:05,269 --> 00:18:08,360
but things which provide enormous

00:18:06,649 --> 00:18:10,970
benefits of people writing software in

00:18:08,360 --> 00:18:13,299
the kinds of styles that we do there's a

00:18:10,970 --> 00:18:16,460
whole flurry of activity around

00:18:13,299 --> 00:18:21,440
simulacrum machinist export hook impa

00:18:16,460 --> 00:18:25,190
and local places' these are basically 55

00:18:21,440 --> 00:18:30,919
macro based libraries which all of them

00:18:25,190 --> 00:18:34,399
aim to make the writing of and the use

00:18:30,919 --> 00:18:37,789
of type classes more feel more idiomatic

00:18:34,399 --> 00:18:39,169
and feel less less less stricken with

00:18:37,789 --> 00:18:41,090
boiler plates than they might do

00:18:39,169 --> 00:18:43,850
otherwise currently there is some work

00:18:41,090 --> 00:18:45,590
going on trying to discuss trying to

00:18:43,850 --> 00:18:47,779
talk about sort of maybe fusing all five

00:18:45,590 --> 00:18:50,149
of those of those libraries into a

00:18:47,779 --> 00:18:53,990
single sort of catch all type of our

00:18:50,149 --> 00:18:56,480
support either compiler plug-in or or

00:18:53,990 --> 00:18:57,620
macro library or possibly other things

00:18:56,480 --> 00:19:00,889
which I'll come back to you later on

00:18:57,620 --> 00:19:03,950
macro compat is a library the other put

00:19:00,889 --> 00:19:05,600
together trying to factor out some of

00:19:03,950 --> 00:19:08,440
the differences between scholar to ten

00:19:05,600 --> 00:19:13,820
to eleven to support all of these these

00:19:08,440 --> 00:19:16,070
macro based components and plunging new

00:19:13,820 --> 00:19:18,620
arrivals so this I I last gave a sort of

00:19:16,070 --> 00:19:20,539
an update on type level it's skyler

00:19:18,620 --> 00:19:21,620
exchange in december last year so it's

00:19:20,539 --> 00:19:23,440
just over six months so we've got a

00:19:21,620 --> 00:19:28,870
bunch of new projects which is joined

00:19:23,440 --> 00:19:32,620
and so Finch Finch is a project based

00:19:28,870 --> 00:19:32,620
and so it's a and

00:19:32,890 --> 00:19:41,740
kind of HTTP framework as is HTTP 4s

00:19:36,450 --> 00:19:44,320
that's based on completely lost what

00:19:41,740 --> 00:19:48,460
it's based on but anyway 22 very two

00:19:44,320 --> 00:19:51,340
very very very solid quality HTTP

00:19:48,460 --> 00:19:52,960
frameworks at least surely some of you

00:19:51,340 --> 00:19:57,970
are familiar with them monica is a new

00:19:52,960 --> 00:20:00,910
arrival it's um it's basically a again

00:19:57,970 --> 00:20:03,850
another another i io framework within

00:20:00,910 --> 00:20:05,140
within the context of pure functional

00:20:03,850 --> 00:20:08,290
programming so something which allows us

00:20:05,140 --> 00:20:11,200
to control control i 0 FX s quance is a

00:20:08,290 --> 00:20:12,910
library providing typed quantities for

00:20:11,200 --> 00:20:15,670
scarlet I've been a number around this

00:20:12,910 --> 00:20:17,170
this is particularly I think interesting

00:20:15,670 --> 00:20:19,270
interesting one something that's that's

00:20:17,170 --> 00:20:21,160
well worth taking a look at frameless is

00:20:19,270 --> 00:20:22,240
a relatively new arrival and this is

00:20:21,160 --> 00:20:25,600
this is something that's that's

00:20:22,240 --> 00:20:28,420
initiated by a dabber chang of box so

00:20:25,600 --> 00:20:31,450
this is making use of shapeless to

00:20:28,420 --> 00:20:33,130
provide a little bit of well I was going

00:20:31,450 --> 00:20:35,380
to say little bit more but some type

00:20:33,130 --> 00:20:38,050
safety to spark so so basically it's a

00:20:35,380 --> 00:20:40,150
it's a kind of a data frame for spark

00:20:38,050 --> 00:20:43,960
which uses shape is under the hood to

00:20:40,150 --> 00:20:46,450
preserve and and make pipes useful in

00:20:43,960 --> 00:20:47,730
that context it's very early days for

00:20:46,450 --> 00:20:51,790
that but it looks really interesting

00:20:47,730 --> 00:20:53,650
matryoshka is it's kind of it's a really

00:20:51,790 --> 00:20:55,990
fascinating library of sort of

00:20:53,650 --> 00:20:57,430
fracturing out many of the different

00:20:55,990 --> 00:21:00,040
kinds of recursion patterns you tight

00:20:57,430 --> 00:21:01,840
you find in functional programs it's if

00:21:00,040 --> 00:21:03,730
you like it's the sort of third they're

00:21:01,840 --> 00:21:06,250
the kind of the ivory tower annex I

00:21:03,730 --> 00:21:07,800
guess of cats it captures a number of

00:21:06,250 --> 00:21:10,870
things which very very interesting but

00:21:07,800 --> 00:21:13,030
but at least in some contexts maybe

00:21:10,870 --> 00:21:16,570
maybe a little bit too high level of

00:21:13,030 --> 00:21:19,480
abstraction for some people f cats is

00:21:16,570 --> 00:21:21,640
another is another project in the in the

00:21:19,480 --> 00:21:23,920
in the mold of trying to capture and

00:21:21,640 --> 00:21:26,260
control effects and will reign over this

00:21:23,920 --> 00:21:27,580
is this is from Eric horrible there are

00:21:26,260 --> 00:21:29,770
a couple of other things in that kind of

00:21:27,580 --> 00:21:31,120
general area around as well and Delta is

00:21:29,770 --> 00:21:33,460
a really nice project it's kind of it's

00:21:31,120 --> 00:21:34,960
kind of its kind of young and and it's

00:21:33,460 --> 00:21:36,970
something I get another thing which is

00:21:34,960 --> 00:21:39,580
built on top of shapeless and it allows

00:21:36,970 --> 00:21:42,640
you to compute arbitrary differences

00:21:39,580 --> 00:21:44,320
between values of algebraic data types

00:21:42,640 --> 00:21:45,760
and which is which is kind of

00:21:44,320 --> 00:21:45,980
interesting so you might have I don't

00:21:45,760 --> 00:21:48,679
know

00:21:45,980 --> 00:21:51,470
some algebraic data type the wrapper it

00:21:48,679 --> 00:21:53,450
represents some kind of some kind of I

00:21:51,470 --> 00:21:55,280
don't know I some kind of customer or

00:21:53,450 --> 00:21:56,900
product record and you might want to be

00:21:55,280 --> 00:21:58,429
able to work out what is the difference

00:21:56,900 --> 00:22:01,669
between two instances of those things

00:21:58,429 --> 00:22:03,470
and do it in a way which which which is

00:22:01,669 --> 00:22:04,820
sensitive to the types of the elements

00:22:03,470 --> 00:22:06,320
in that in that data structure and that

00:22:04,820 --> 00:22:07,940
that's that's something that Delta will

00:22:06,320 --> 00:22:11,510
do so very interesting very interesting

00:22:07,940 --> 00:22:13,640
library and so all of these different

00:22:11,510 --> 00:22:15,590
projects we have a kind of a there is a

00:22:13,640 --> 00:22:18,799
sort of a theme there's a sort of a type

00:22:15,590 --> 00:22:20,210
level type level hexagon and there are a

00:22:18,799 --> 00:22:24,320
number of projects now which which have

00:22:20,210 --> 00:22:26,750
kind of have kind of logos and stickers

00:22:24,320 --> 00:22:28,820
which which which play on that theme

00:22:26,750 --> 00:22:31,640
we've got we've got a tight little logo

00:22:28,820 --> 00:22:35,000
there's a new shapeless logo and and

00:22:31,640 --> 00:22:36,290
then inside one as well I'd love to say

00:22:35,000 --> 00:22:38,330
that you know you could go outside and

00:22:36,290 --> 00:22:39,710
get get stickers here in laptops but but

00:22:38,330 --> 00:22:42,890
the roller there a whole ton of them on

00:22:39,710 --> 00:22:44,179
the 47 degrees stands yesterday and the

00:22:42,890 --> 00:22:48,380
day before they've all gone so I'm

00:22:44,179 --> 00:22:50,210
afraid too late and yes so this when

00:22:48,380 --> 00:22:53,000
when when Lars posted that photograph of

00:22:50,210 --> 00:22:54,620
the stickers arriving and a commit the

00:22:53,000 --> 00:22:56,809
kind of Haskell guy kind of posted this

00:22:54,620 --> 00:22:59,090
I actually have no ideas what what what

00:22:56,809 --> 00:23:01,160
the settlers of catan actually is but

00:22:59,090 --> 00:23:05,809
apparently I've been told many many of

00:23:01,160 --> 00:23:09,890
you will know what that is but but

00:23:05,809 --> 00:23:13,630
anyway that's apparently the way that it

00:23:09,890 --> 00:23:16,100
pans out with the back of my laptop so

00:23:13,630 --> 00:23:18,380
okay so that was community projects but

00:23:16,100 --> 00:23:19,880
but well actually no there's one there's

00:23:18,380 --> 00:23:22,010
one that's sort of conspicuously absent

00:23:19,880 --> 00:23:23,929
and thats hype level scarlet so where is

00:23:22,010 --> 00:23:28,070
type dollar scholar in all of this I'm

00:23:23,929 --> 00:23:29,390
going to come back to that and so as

00:23:28,070 --> 00:23:31,970
well as community project it's a

00:23:29,390 --> 00:23:34,880
community of people and this is

00:23:31,970 --> 00:23:36,200
something that's been new this year this

00:23:34,880 --> 00:23:37,610
is something that we kicked off at the

00:23:36,200 --> 00:23:39,559
very end of last year sort of starting

00:23:37,610 --> 00:23:40,880
organizing stuff and that we felt that

00:23:39,559 --> 00:23:43,100
it was really really important to not

00:23:40,880 --> 00:23:45,350
just be kind of just a bunch of github

00:23:43,100 --> 00:23:46,760
repositories but we actually wanted to

00:23:45,350 --> 00:23:48,350
have some kind of context in which we

00:23:46,760 --> 00:23:52,490
could basically get together talk

00:23:48,350 --> 00:23:56,809
discuss hack together and with that in

00:23:52,490 --> 00:23:58,310
mind we have organized so far this year

00:23:56,809 --> 00:24:00,980
two events

00:23:58,310 --> 00:24:02,780
both of them attached to existing

00:24:00,980 --> 00:24:04,370
conferences both both which have sort of

00:24:02,780 --> 00:24:06,680
strong associations with type level as

00:24:04,370 --> 00:24:08,600
any scholar which this year was in

00:24:06,680 --> 00:24:11,960
Philadelphia and flat map which is in

00:24:08,600 --> 00:24:13,970
Oslo many of a sort of the pivotal kind

00:24:11,960 --> 00:24:15,620
of events in in type levels history of

00:24:13,970 --> 00:24:16,910
kind of happens up those conferences so

00:24:15,620 --> 00:24:18,920
I think I think I think the existence

00:24:16,910 --> 00:24:23,740
that type level was first announced I

00:24:18,920 --> 00:24:26,030
think by Lars couple in at any scholar

00:24:23,740 --> 00:24:28,220
think only two years ago it seems like a

00:24:26,030 --> 00:24:30,170
lot longer than that but anyway there is

00:24:28,220 --> 00:24:31,640
various discussions around around around

00:24:30,170 --> 00:24:34,390
type level have happened at flat map

00:24:31,640 --> 00:24:36,920
when when various of the project

00:24:34,390 --> 00:24:38,690
initiators have been gathered together

00:24:36,920 --> 00:24:39,950
at the those companies and their great

00:24:38,690 --> 00:24:42,170
conferences I mean they are they are the

00:24:39,950 --> 00:24:43,850
community conferences and they have more

00:24:42,170 --> 00:24:46,490
of a kind of a meet-up feel than kind of

00:24:43,850 --> 00:24:48,500
the big the big sort of the big

00:24:46,490 --> 00:24:49,430
Enterprise conferences and it's felt

00:24:48,500 --> 00:24:51,110
like a kind of a good natural

00:24:49,430 --> 00:24:54,590
Association to have type level events

00:24:51,110 --> 00:24:57,140
attach them so as far as the

00:24:54,590 --> 00:25:00,860
Philadelphia's tight level summit we had

00:24:57,140 --> 00:25:03,320
the two days before before the event was

00:25:00,860 --> 00:25:07,850
a two-day type level event with day of

00:25:03,320 --> 00:25:12,230
invited talks and a day of unconference

00:25:07,850 --> 00:25:14,120
then we had an event in Oslo and that

00:25:12,230 --> 00:25:16,010
was a day of invited talks we only had

00:25:14,120 --> 00:25:18,770
one day for slow it was a both

00:25:16,010 --> 00:25:21,230
absolutely fantastic events and we've

00:25:18,770 --> 00:25:24,980
also in the last couple of months there

00:25:21,230 --> 00:25:27,520
was a fantastic event run by by sales

00:25:24,980 --> 00:25:31,100
force in the UK they have an amazing

00:25:27,520 --> 00:25:35,330
building in right next to Liverpool

00:25:31,100 --> 00:25:37,580
Street Station in London and basically

00:25:35,330 --> 00:25:43,240
they make it available for basic for all

00:25:37,580 --> 00:25:43,240
comers on a monthly basis for all day

00:25:43,300 --> 00:25:48,260
developer events completely free of

00:25:45,710 --> 00:25:50,780
charge is absolutely wonderful and there

00:25:48,260 --> 00:25:53,000
has been a long-running event called

00:25:50,780 --> 00:25:54,950
hack the tower it's primarily a jay is

00:25:53,000 --> 00:25:57,860
actually almost exclusively a JVM based

00:25:54,950 --> 00:26:01,940
event so they're people who are there

00:25:57,860 --> 00:26:03,200
who closure people openjdk people the

00:26:01,940 --> 00:26:04,550
enzyme people have been going going

00:26:03,200 --> 00:26:06,740
going going there for quite some time

00:26:04,550 --> 00:26:08,450
and for the last couple of months we've

00:26:06,740 --> 00:26:10,770
been running a hat level sorry a tide

00:26:08,450 --> 00:26:14,100
level hack day event at

00:26:10,770 --> 00:26:15,780
hack the tower and this is something

00:26:14,100 --> 00:26:16,980
that we're going to continue it's going

00:26:15,780 --> 00:26:19,500
to be a regular event from now on in

00:26:16,980 --> 00:26:20,640
London just want a quick quick thank you

00:26:19,500 --> 00:26:21,960
to all of the sponsors that made those

00:26:20,640 --> 00:26:26,340
those events possible which has been

00:26:21,960 --> 00:26:28,710
really really awesome so upcoming events

00:26:26,340 --> 00:26:30,420
so not just you know this is this is not

00:26:28,710 --> 00:26:32,580
all flash in the pan we want to have

00:26:30,420 --> 00:26:35,010
more of these things so there's going to

00:26:32,580 --> 00:26:37,350
be a tight level day I'm conference day

00:26:35,010 --> 00:26:39,990
at scale the world which is coming up in

00:26:37,350 --> 00:26:43,230
September at there's been a

00:26:39,990 --> 00:26:45,710
long-standing kind of type level track I

00:26:43,230 --> 00:26:47,970
guess it's Carla I owe in France and

00:26:45,710 --> 00:26:50,340
this time we're kind of making it sort

00:26:47,970 --> 00:26:52,560
of an official kind of type level type

00:26:50,340 --> 00:26:55,680
level trackers part of scalar oh this

00:26:52,560 --> 00:26:58,590
year there's going to be a workshop day

00:26:55,680 --> 00:27:01,380
at lambda world in cadiz that's very

00:26:58,590 --> 00:27:02,700
kindly sponsored by 47 degrees we're

00:27:01,380 --> 00:27:03,930
also going to be having an event at

00:27:02,700 --> 00:27:08,910
scala the by the way in San Francisco

00:27:03,930 --> 00:27:10,770
and there's going to be a a hack stroke

00:27:08,910 --> 00:27:13,260
unconference day after scholar exchange

00:27:10,770 --> 00:27:16,770
in london in december so lots of stuff

00:27:13,260 --> 00:27:20,640
coming up and we want more so if if you

00:27:16,770 --> 00:27:24,180
are an organizer of a conference or an

00:27:20,640 --> 00:27:26,100
event and you think that the the people

00:27:24,180 --> 00:27:27,660
that you attract and to your conference

00:27:26,100 --> 00:27:29,460
would be interested in having type level

00:27:27,660 --> 00:27:30,660
events please do get in touch we want to

00:27:29,460 --> 00:27:36,270
have more of these things happening all

00:27:30,660 --> 00:27:37,980
right so the type level hacked our days

00:27:36,270 --> 00:27:40,800
and their ongoing they're basically

00:27:37,980 --> 00:27:44,010
Saturday mid-month regular as clockwork

00:27:40,800 --> 00:27:45,990
is the intention aside from getting the

00:27:44,010 --> 00:27:50,580
chance to sort of hack on various things

00:27:45,990 --> 00:27:53,010
like the type of libraries enzyme

00:27:50,580 --> 00:27:54,930
hacking on this garlic and Pilar there's

00:27:53,010 --> 00:28:01,710
more introductory stuff as well but also

00:27:54,930 --> 00:28:03,180
I guess an absolutely fantastic view it

00:28:01,710 --> 00:28:05,940
is r it's really really quite amazing

00:28:03,180 --> 00:28:07,800
it's on the 28th floor and and you do

00:28:05,940 --> 00:28:09,210
get a really incredible view over London

00:28:07,800 --> 00:28:13,470
so it's well worth coming if you're in

00:28:09,210 --> 00:28:16,200
the area and and and we will be really

00:28:13,470 --> 00:28:17,490
really keen for for for use groups

00:28:16,200 --> 00:28:18,930
meetup groups if they wanted to organize

00:28:17,490 --> 00:28:20,850
events of this sauce while we would love

00:28:18,930 --> 00:28:21,530
them to do that we'd love to coordinate

00:28:20,850 --> 00:28:25,670
with them

00:28:21,530 --> 00:28:28,730
helping them make that possible and okay

00:28:25,670 --> 00:28:32,060
so I just want to give a quick update on

00:28:28,730 --> 00:28:38,560
on two projects and and then take some

00:28:32,060 --> 00:28:41,690
questions very very briefly so Cass is

00:28:38,560 --> 00:28:45,230
has a fantastic logo itself this one by

00:28:41,690 --> 00:28:46,790
by Eric awesome himself who's a a any

00:28:45,230 --> 00:28:50,260
spare time I'd although I don't know how

00:28:46,790 --> 00:28:54,020
he finds any spare time he he writes he

00:28:50,260 --> 00:28:56,420
writes indie games and it's pretty good

00:28:54,020 --> 00:28:58,970
when it comes to 8-bit art which i think

00:28:56,420 --> 00:29:00,290
is great and so cats I think probably

00:28:58,970 --> 00:29:01,490
most people know it's a library of

00:29:00,290 --> 00:29:05,890
abstractions for functional programming

00:29:01,490 --> 00:29:05,890
in Scala and started the beginning of

00:29:07,210 --> 00:29:13,340
its now reached over 2,000 commits and

00:29:11,780 --> 00:29:14,860
has nearly a hundred contributors which

00:29:13,340 --> 00:29:18,560
I think it's an amazing achievement in

00:29:14,860 --> 00:29:20,480
in that space of time very much an

00:29:18,560 --> 00:29:25,310
emphasis on approachability as much as

00:29:20,480 --> 00:29:26,270
technical merit and I guess all of the

00:29:25,310 --> 00:29:31,060
kinds of things I was talking about in

00:29:26,270 --> 00:29:34,250
terms of dependencies and the ability to

00:29:31,060 --> 00:29:36,080
rely on honor honor honor a kernel a

00:29:34,250 --> 00:29:37,700
call that that's that people can

00:29:36,080 --> 00:29:39,320
comfortably depend on without having

00:29:37,700 --> 00:29:41,810
having to be concerned about binary

00:29:39,320 --> 00:29:45,820
compatibility issues and suchlike or

00:29:41,810 --> 00:29:49,250
churn version churn is very very key and

00:29:45,820 --> 00:29:51,880
so it's nearing a 10 release it's no

00:29:49,250 --> 00:29:53,450
longer tagged as experimental and

00:29:51,880 --> 00:29:54,920
there's growing ba-doing with

00:29:53,450 --> 00:29:56,810
documentation of the other resources the

00:29:54,920 --> 00:29:58,520
cats katha channel is incredibly lively

00:29:56,810 --> 00:30:00,230
it's a fantastic place to talk to people

00:29:58,520 --> 00:30:01,940
it's fantastic place to learn about

00:30:00,230 --> 00:30:05,120
functional programming recommend that

00:30:01,940 --> 00:30:07,190
everybody joins it and the one piece of

00:30:05,120 --> 00:30:08,630
sort of missing pieces sort of prevented

00:30:07,190 --> 00:30:10,640
people from from actually really

00:30:08,630 --> 00:30:12,500
seriously using it or not prevented them

00:30:10,640 --> 00:30:14,600
but made it harder is that we haven't

00:30:12,500 --> 00:30:15,980
until recently had a had any kind of a

00:30:14,600 --> 00:30:18,710
sort of well worked out story about how

00:30:15,980 --> 00:30:21,410
to handle effects well so we've had

00:30:18,710 --> 00:30:22,880
we've had a really good story for pure

00:30:21,410 --> 00:30:24,620
functional data structures but affects

00:30:22,880 --> 00:30:27,440
hasn't been something that's been part

00:30:24,620 --> 00:30:29,120
of our picture we do now have not as

00:30:27,440 --> 00:30:32,000
part of cats itself but as part of the

00:30:29,120 --> 00:30:35,299
type level family and and I guess kind

00:30:32,000 --> 00:30:39,379
of associates we have monix which is

00:30:35,299 --> 00:30:42,139
able to provide a task obstruction also

00:30:39,379 --> 00:30:46,100
FS 2 + FS 2 is not part of type level

00:30:42,139 --> 00:30:47,600
however there is there is FS tues an

00:30:46,100 --> 00:30:49,159
evolution of Scarlett's dream which is

00:30:47,600 --> 00:30:51,049
sort of now independent from scholars

00:30:49,159 --> 00:30:52,610
edge but it does have integrations

00:30:51,049 --> 00:30:54,350
hasn't got an integration for scholar

00:30:52,610 --> 00:30:56,419
sir it also has an integration for cats

00:30:54,350 --> 00:30:58,940
so at this point I think they're there

00:30:56,419 --> 00:31:00,409
are basically two ways that you can go

00:30:58,940 --> 00:31:03,110
if you're if you're looking for

00:31:00,409 --> 00:31:04,999
mechanisms to manage effects in inner

00:31:03,110 --> 00:31:06,200
inner in a scholar functional

00:31:04,999 --> 00:31:09,440
programming context you could look at

00:31:06,200 --> 00:31:10,820
monix monix i guess it its distinctive

00:31:09,440 --> 00:31:18,470
feature at the moment is that it's

00:31:10,820 --> 00:31:19,460
scarlett j s friendly this is i want one

00:31:18,470 --> 00:31:20,869
of them one of the things that many of

00:31:19,460 --> 00:31:22,609
the type level projects have gone to a

00:31:20,869 --> 00:31:25,519
fairly fairly fairly great lengths to do

00:31:22,609 --> 00:31:27,259
is to try and make sure that we can we

00:31:25,519 --> 00:31:28,999
are compatible with that we produce

00:31:27,259 --> 00:31:33,230
builds for Scarlett Reyes as well as

00:31:28,999 --> 00:31:36,350
Scarlett Jo vm monix is able to abstract

00:31:33,230 --> 00:31:37,850
over the the the the the the massive

00:31:36,350 --> 00:31:39,679
differences in terms of underlying run

00:31:37,850 --> 00:31:41,389
times between between the JVM and Jas to

00:31:39,679 --> 00:31:45,679
provide a kind of a task story that

00:31:41,389 --> 00:31:47,239
works across both fs2 obviously it's

00:31:45,679 --> 00:31:51,499
it's a very it's very different kind of

00:31:47,239 --> 00:31:53,509
library it does represent some kind of a

00:31:51,499 --> 00:31:57,619
transition path from Scarlett Scarlett

00:31:53,509 --> 00:32:02,269
said task and I think it probably fair

00:31:57,619 --> 00:32:05,600
to say that it's it's it's currently the

00:32:02,269 --> 00:32:07,159
best solution for JVM only this is an

00:32:05,600 --> 00:32:09,889
evolving situation I expect both of

00:32:07,159 --> 00:32:12,830
those libraries to develop over time I I

00:32:09,889 --> 00:32:14,269
know that there is some enthusiasm on

00:32:12,830 --> 00:32:15,799
the on the part of the FS two people to

00:32:14,269 --> 00:32:17,629
make their to make their story work on

00:32:15,799 --> 00:32:21,409
scholar j/s as well I hope that happens

00:32:17,629 --> 00:32:24,919
at some point and so a lot of the things

00:32:21,409 --> 00:32:27,320
that we've been doing and have kind of

00:32:24,919 --> 00:32:30,940
sort of pushed us up against some of the

00:32:27,320 --> 00:32:35,899
limitations of scarlet as it is now and

00:32:30,940 --> 00:32:38,659
this has so one of the things we've

00:32:35,899 --> 00:32:40,609
actually originally intended to do in

00:32:38,659 --> 00:32:42,529
time to host Carla which is the thing I

00:32:40,609 --> 00:32:47,450
did both from earlier on I was kind of

00:32:42,529 --> 00:32:49,519
pick up some of that slack so it was

00:32:47,450 --> 00:32:51,590
the sort of thought was initiated at the

00:32:49,519 --> 00:32:55,899
end of 2014 so it's quite quite a while

00:32:51,590 --> 00:32:59,990
ago now and really the intention was to

00:32:55,899 --> 00:33:01,250
to make you feel like minimal changes

00:32:59,990 --> 00:33:03,139
the Scarlet programming language is

00:33:01,250 --> 00:33:05,419
ideally maximally kind of binary

00:33:03,139 --> 00:33:07,039
compatible with with the Scarlet

00:33:05,419 --> 00:33:09,769
compiler the type safe then like Ben now

00:33:07,039 --> 00:33:11,870
are producing but but things which are

00:33:09,769 --> 00:33:13,700
going to help people programming in a

00:33:11,870 --> 00:33:15,830
type level style to kind of do stuff

00:33:13,700 --> 00:33:17,720
more easily and more easily doesn't mean

00:33:15,830 --> 00:33:18,889
you know it's nice for library

00:33:17,720 --> 00:33:20,389
developers who like playing around with

00:33:18,889 --> 00:33:22,159
dependent type it also means that it's

00:33:20,389 --> 00:33:23,539
nice for end-users these libraries

00:33:22,159 --> 00:33:26,230
because if you don't have these kind of

00:33:23,539 --> 00:33:28,909
facilities intrinsically in the language

00:33:26,230 --> 00:33:30,350
not having them doesn't make the

00:33:28,909 --> 00:33:32,090
problems go away what will actually

00:33:30,350 --> 00:33:33,649
happen is that people will end up coming

00:33:32,090 --> 00:33:36,260
up with various kinds of workarounds or

00:33:33,649 --> 00:33:38,149
in coatings of of features which could

00:33:36,260 --> 00:33:40,309
be language level features and these

00:33:38,149 --> 00:33:42,500
inevitably end up being somewhat leaky

00:33:40,309 --> 00:33:46,070
somewhat creaky and they impose

00:33:42,500 --> 00:33:48,440
additional both conceptual and and and

00:33:46,070 --> 00:33:50,539
and just implementation complexity on

00:33:48,440 --> 00:33:52,039
end users of libraries so it hurts

00:33:50,539 --> 00:33:56,649
everybody if we don't have these things

00:33:52,039 --> 00:33:59,990
so so that was that was the aim of and

00:33:56,649 --> 00:34:01,610
the the type of scholar for that

00:33:59,990 --> 00:34:03,769
completely stalled the beginning of 2015

00:34:01,610 --> 00:34:05,480
are most people probably aware of the

00:34:03,769 --> 00:34:10,099
fact that you know prior to that prior

00:34:05,480 --> 00:34:14,839
to 2015 Scarlett said bors part of type

00:34:10,099 --> 00:34:16,730
level and there was a somewhat somewhat

00:34:14,839 --> 00:34:19,429
uncomfortable rift between scholars head

00:34:16,730 --> 00:34:24,290
in the rest of type level and that's

00:34:19,429 --> 00:34:28,730
basically prompted the the the the work

00:34:24,290 --> 00:34:30,649
on cats and as I as I said earlier you

00:34:28,730 --> 00:34:31,940
know we've had since since the the the

00:34:30,649 --> 00:34:34,339
initiation of cats have been you know

00:34:31,940 --> 00:34:39,020
several thousand commits 96 contributors

00:34:34,339 --> 00:34:45,440
basically everybody whoops basically

00:34:39,020 --> 00:34:46,520
everybody basically everybody who would

00:34:45,440 --> 00:34:48,079
have been working on top level scholars

00:34:46,520 --> 00:34:49,730
was completely preoccupied with working

00:34:48,079 --> 00:34:53,359
on cats so so nothing happened at all

00:34:49,730 --> 00:34:54,889
and like I said problems didn't go away

00:34:53,359 --> 00:34:56,480
but but rather than working on a

00:34:54,889 --> 00:34:59,450
full-blown fork of the Scarlet compiler

00:34:56,480 --> 00:35:00,280
we ended up producing these sort of

00:34:59,450 --> 00:35:03,640
rather smaller

00:35:00,280 --> 00:35:06,250
oddest sort of macro and plug-in based

00:35:03,640 --> 00:35:08,020
some band-aids for some of the problems

00:35:06,250 --> 00:35:09,700
and we found actually that in practice

00:35:08,020 --> 00:35:11,980
in many of these cases they actually

00:35:09,700 --> 00:35:13,660
work quite well and it made us sort of

00:35:11,980 --> 00:35:15,730
rethink what it was we were really

00:35:13,660 --> 00:35:16,840
trying to achieve with type level

00:35:15,730 --> 00:35:18,550
scholar and I think I think that was

00:35:16,840 --> 00:35:21,130
probably a useful a useful sort of

00:35:18,550 --> 00:35:23,020
breathing space to sort of try and to

00:35:21,130 --> 00:35:25,480
reevaluate you know just exactly what

00:35:23,020 --> 00:35:26,950
what kind of value are we expect him to

00:35:25,480 --> 00:35:28,450
kind of bring to the table by forking

00:35:26,950 --> 00:35:30,550
the Scarlet compiler there are a bunch

00:35:28,450 --> 00:35:33,070
of you know there are a number of

00:35:30,550 --> 00:35:34,630
significant well there are a number of

00:35:33,070 --> 00:35:37,000
changes made in type level scala

00:35:34,630 --> 00:35:38,560
relative to the type safe Scarlett

00:35:37,000 --> 00:35:40,420
compiler and some of them are really

00:35:38,560 --> 00:35:41,920
interesting and we'll i'll mention some

00:35:40,420 --> 00:35:43,180
of them in a second but some of them

00:35:41,920 --> 00:35:47,830
were really really trivial so i mean the

00:35:43,180 --> 00:35:49,660
first thing i did was to extend models

00:35:47,830 --> 00:35:51,190
make a very very tiny tiny modification

00:35:49,660 --> 00:35:52,480
to the scarlet parser to allow you to

00:35:51,190 --> 00:35:57,040
have a little Prime at the end of

00:35:52,480 --> 00:35:58,600
identifies and which if you if you if

00:35:57,040 --> 00:36:01,360
you see much sort of haskell tutorial

00:35:58,600 --> 00:36:03,970
code you will often see some definition

00:36:01,360 --> 00:36:05,020
sort of you know x x prime x prime prime

00:36:03,970 --> 00:36:06,640
and so on through a series of

00:36:05,020 --> 00:36:08,500
definitions is you kind of unfolds i'm

00:36:06,640 --> 00:36:09,490
kind of some kind of expression and it's

00:36:08,500 --> 00:36:11,320
kind of nice to happen it would be

00:36:09,490 --> 00:36:12,670
really nice to have but honestly it's

00:36:11,320 --> 00:36:15,180
completely shrivel and if there is there

00:36:12,670 --> 00:36:17,890
is really no in my opinion justification

00:36:15,180 --> 00:36:19,420
for forking a programming language

00:36:17,890 --> 00:36:22,210
simply for something like that so we

00:36:19,420 --> 00:36:25,450
decided focus more on on things that

00:36:22,210 --> 00:36:26,680
really matters things that really that

00:36:25,450 --> 00:36:29,560
would actually really make a difference

00:36:26,680 --> 00:36:32,230
and that didn't really have any

00:36:29,560 --> 00:36:34,600
alternative other than at best monkey

00:36:32,230 --> 00:36:40,210
workarounds and so the fundamental

00:36:34,600 --> 00:36:41,740
issues were there and that was kind of a

00:36:40,210 --> 00:36:45,820
situation until sort of early this year

00:36:41,740 --> 00:36:50,800
i I kind of stopped my neck health in

00:36:45,820 --> 00:36:53,140
January and said that made my euro

00:36:50,800 --> 00:36:58,570
publicly announced that I was going to

00:36:53,140 --> 00:37:00,430
deal with Si 271 to this year who knows

00:36:58,570 --> 00:37:02,080
what else I 2712 is kind of a creature

00:37:00,430 --> 00:37:03,270
of hand so small number of people I'm

00:37:02,080 --> 00:37:06,070
not going to go into any of the details

00:37:03,270 --> 00:37:09,940
as like you someone to is basically it's

00:37:06,070 --> 00:37:12,250
a tricky problem that affects type

00:37:09,940 --> 00:37:13,319
inference in scarlet programs which make

00:37:12,250 --> 00:37:14,849
heavy use of

00:37:13,319 --> 00:37:17,279
higher kinda type so if you're using

00:37:14,849 --> 00:37:19,890
abstracting other type constructors then

00:37:17,279 --> 00:37:22,949
at new will at some point inevitably be

00:37:19,890 --> 00:37:26,190
hit by SI 2712 there's a talk I did at

00:37:22,949 --> 00:37:28,829
flat map a few months ago which if you

00:37:26,190 --> 00:37:29,999
want to know more about that I recommend

00:37:28,829 --> 00:37:32,579
you go go and have a look about there's

00:37:29,999 --> 00:37:34,680
also very very good article by Daniel

00:37:32,579 --> 00:37:35,819
Spiewak who explains exactly what the

00:37:34,680 --> 00:37:38,130
nature of the problem is also very very

00:37:35,819 --> 00:37:39,089
clearly so I recommend that so but this

00:37:38,130 --> 00:37:40,949
is this is this is this is a

00:37:39,089 --> 00:37:41,999
long-standing problem it's something

00:37:40,949 --> 00:37:44,569
that's been sitting in the scar tissue

00:37:41,999 --> 00:37:50,190
tracker for years so I think since 2009

00:37:44,569 --> 00:37:52,469
and if we could actually come up with a

00:37:50,190 --> 00:37:56,130
solution to this it really would

00:37:52,469 --> 00:37:59,160
massively improve the lives of everybody

00:37:56,130 --> 00:38:01,259
working on type Neville style libraries

00:37:59,160 --> 00:38:02,819
and also the users of those libraries so

00:38:01,259 --> 00:38:05,579
it feels like it's the kind of thing

00:38:02,819 --> 00:38:07,259
that there are workarounds the

00:38:05,579 --> 00:38:08,789
workarounds for are things like an apply

00:38:07,259 --> 00:38:12,299
if you've run across that in cats or

00:38:08,789 --> 00:38:14,219
scarlet and and the various kind of new

00:38:12,299 --> 00:38:17,819
suffix to methods which which sort of

00:38:14,219 --> 00:38:20,039
sneak an applies in to otherwise

00:38:17,819 --> 00:38:23,729
straightforward methods and I guess uh

00:38:20,039 --> 00:38:25,709
applies is sort of the type level

00:38:23,729 --> 00:38:30,329
project equivalent of can build from I

00:38:25,709 --> 00:38:32,459
guess to give you some idea of why it's

00:38:30,329 --> 00:38:35,489
you know it's a necessary evil I suppose

00:38:32,459 --> 00:38:38,489
and so wouldn't it be so much better if

00:38:35,489 --> 00:38:40,769
we can fix it so I kind of I was going

00:38:38,489 --> 00:38:43,229
to be doing a talker flat map on yet

00:38:40,769 --> 00:38:44,670
another workaround for for SI 2712 that

00:38:43,229 --> 00:38:47,959
I come up with in the context of working

00:38:44,670 --> 00:38:51,630
on kittens and I was kind of idly

00:38:47,959 --> 00:38:53,130
reflecting on how we'd sort of given up

00:38:51,630 --> 00:38:54,719
on type level Scarlett and we're looking

00:38:53,130 --> 00:38:57,599
at doing things in terms of plugins and

00:38:54,719 --> 00:38:59,729
macros instead and I sort of kind of

00:38:57,599 --> 00:39:02,119
idly thought well is it possible that we

00:38:59,729 --> 00:39:05,160
could maybe fix a big problem like this

00:39:02,119 --> 00:39:06,749
in a in a mackerel plugin and of course

00:39:05,160 --> 00:39:09,269
the advantage to doing it in this way is

00:39:06,749 --> 00:39:11,880
that this is something which and doesn't

00:39:09,269 --> 00:39:13,799
depend on you know a future release of a

00:39:11,880 --> 00:39:15,900
scholar compiler or a massive language

00:39:13,799 --> 00:39:17,969
change it's something that you can use

00:39:15,900 --> 00:39:20,219
with your existing scar the compiler and

00:39:17,969 --> 00:39:21,660
you just add it to build and and and hey

00:39:20,219 --> 00:39:23,729
presto some magic happens and you

00:39:21,660 --> 00:39:25,430
suddenly have enter and you and you will

00:39:23,729 --> 00:39:28,550
without taking on any any any

00:39:25,430 --> 00:39:30,950
dangerous scary dependencies and I know

00:39:28,550 --> 00:39:32,270
for some people maybe there is actually

00:39:30,950 --> 00:39:34,430
practically very little difference but

00:39:32,270 --> 00:39:36,140
for some people adding a plug-in to

00:39:34,430 --> 00:39:37,970
their bills is nothing like as big a

00:39:36,140 --> 00:39:40,790
deal as switching to a completely

00:39:37,970 --> 00:39:44,809
different compiler version from some

00:39:40,790 --> 00:39:48,650
unknown random bunch of people okay so I

00:39:44,809 --> 00:39:50,630
was idly think about doing this as I was

00:39:48,650 --> 00:39:52,220
going to present a talk on on my new

00:39:50,630 --> 00:39:54,200
work around for SI 2 7 12 and I thought

00:39:52,220 --> 00:39:56,210
at the end of the talk I presents you

00:39:54,200 --> 00:39:57,800
know some kind of discussion for for

00:39:56,210 --> 00:40:00,470
what are the future possibilities what

00:39:57,800 --> 00:40:02,510
might we do to fix this problem properly

00:40:00,470 --> 00:40:05,839
and so I was thinking while casually

00:40:02,510 --> 00:40:07,250
idly can I can I is it conceivable could

00:40:05,839 --> 00:40:09,410
we possibly fix this in the compiler

00:40:07,250 --> 00:40:12,380
plug-in so kind of a saturday morning i

00:40:09,410 --> 00:40:16,099
started thinking around and not very

00:40:12,380 --> 00:40:18,619
long afterwards i had come up with a

00:40:16,099 --> 00:40:21,500
proof-of-concept compiler plugin that

00:40:18,619 --> 00:40:24,740
fixed it and then a little while a

00:40:21,500 --> 00:40:26,180
little while after that and i realized

00:40:24,740 --> 00:40:28,940
that actually it would be much better to

00:40:26,180 --> 00:40:31,880
do this as a full-blown pull request

00:40:28,940 --> 00:40:35,030
against the compiler and i think a long

00:40:31,880 --> 00:40:37,030
did that take that took about a month

00:40:35,030 --> 00:40:42,020
and a month and a half motor two months

00:40:37,030 --> 00:40:43,339
and we have a fix and its merged and and

00:40:42,020 --> 00:40:45,140
i think this is this is really

00:40:43,339 --> 00:40:46,490
fascinating because i mean this this is

00:40:45,140 --> 00:40:49,069
a big problem it's been around since

00:40:46,490 --> 00:40:50,119
2009 if you look at the ticket on the

00:40:49,069 --> 00:40:51,559
Scarlet issue tracker you can see

00:40:50,119 --> 00:40:52,849
there's a huge amount of interest in it

00:40:51,559 --> 00:40:56,180
I mean the road there are there are

00:40:52,849 --> 00:40:58,790
there are like sort of 86 stars on the

00:40:56,180 --> 00:41:01,490
ticket where when you think that the

00:40:58,790 --> 00:41:03,410
average number of tickets on earth

00:41:01,490 --> 00:41:05,450
styles on our ticket in the sky elation

00:41:03,410 --> 00:41:08,480
tracker is basically zero certainly less

00:41:05,450 --> 00:41:12,410
than one this is something that enormous

00:41:08,480 --> 00:41:15,410
number of people are affected by the the

00:41:12,410 --> 00:41:19,369
pull request itself had a huge amount of

00:41:15,410 --> 00:41:21,020
interest and well why why have nobody

00:41:19,369 --> 00:41:22,040
wyd nobody fix this problem before

00:41:21,020 --> 00:41:23,540
because it actually turns out that the

00:41:22,040 --> 00:41:26,000
fix is really small i means almost

00:41:23,540 --> 00:41:30,260
almost trivial and the the the the the

00:41:26,000 --> 00:41:33,530
initial diff that i had against the the

00:41:30,260 --> 00:41:34,730
standard skyla compiler wasn't it wasn't

00:41:33,530 --> 00:41:37,210
that it wasn't a complete solution it

00:41:34,730 --> 00:41:38,950
wasn't everything it wasn't much more of

00:41:37,210 --> 00:41:41,380
the lines of code that actually do

00:41:38,950 --> 00:41:44,320
something not much more than six lines

00:41:41,380 --> 00:41:47,440
the eventual end resolve after lots of

00:41:44,320 --> 00:41:49,900
feedback from from Adrian from Jason is

00:41:47,440 --> 00:41:52,690
about twice 20 to 30 lines of code but

00:41:49,900 --> 00:41:56,200
not not not the earth shattering world

00:41:52,690 --> 00:41:58,120
changing changed the Scarlet compiler

00:41:56,200 --> 00:42:01,060
that I think many of us had assumed it

00:41:58,120 --> 00:42:03,010
would have to be and I think this is

00:42:01,060 --> 00:42:07,590
this is sort of made people think again

00:42:03,010 --> 00:42:07,590
about what our attitude is towards

00:42:08,130 --> 00:42:14,590
working on the Scarlet compiler and this

00:42:11,800 --> 00:42:16,810
is a conversation i had with rena

00:42:14,590 --> 00:42:20,680
branson on their shapeless it's a

00:42:16,810 --> 00:42:22,240
channel shortly after this you know

00:42:20,680 --> 00:42:24,760
we're both looking at a patch and

00:42:22,240 --> 00:42:26,800
thinking well you know how could this

00:42:24,760 --> 00:42:28,750
have how could this have held us up for

00:42:26,800 --> 00:42:30,790
how many years six or seven years

00:42:28,750 --> 00:42:33,010
waiting for this when it's only you know

00:42:30,790 --> 00:42:36,400
20 lines of code and not very

00:42:33,010 --> 00:42:39,220
complicated at that and to make it even

00:42:36,400 --> 00:42:43,660
worse and Paul porches are know who's

00:42:39,220 --> 00:42:45,940
the that the initiator of scholars had

00:42:43,660 --> 00:42:50,320
stream fs2 and he'd actually proposed

00:42:45,940 --> 00:42:52,480
fix in a comment on the ticket and both

00:42:50,320 --> 00:42:57,030
Runa and i had read those comments and

00:42:52,480 --> 00:42:59,620
and and and and i thought independently

00:42:57,030 --> 00:43:01,420
this this this is a great idea someone

00:42:59,620 --> 00:43:04,600
would should try it but nobody nobody

00:43:01,420 --> 00:43:06,160
action did and i think there's a lot of

00:43:04,600 --> 00:43:07,090
reasons why we didn't do that i think i

00:43:06,160 --> 00:43:10,810
think a lot of us had allowed ourselves

00:43:07,090 --> 00:43:13,660
to become convinced that the scarlet

00:43:10,810 --> 00:43:15,640
compiler code base is sort of obscure

00:43:13,660 --> 00:43:17,110
and impenetrable impossible to work on

00:43:15,640 --> 00:43:20,110
impossible to understand there's only

00:43:17,110 --> 00:43:21,550
you know Adrian only Jason only Martin

00:43:20,110 --> 00:43:23,760
could possibly understand anything in

00:43:21,550 --> 00:43:25,960
the in terms of the compiler and

00:43:23,760 --> 00:43:27,280
consequently something like si 2712

00:43:25,960 --> 00:43:28,300
which seemed like I mean in particular

00:43:27,280 --> 00:43:30,250
if you look at the description of the

00:43:28,300 --> 00:43:32,950
ticket the ticket is implement higher

00:43:30,250 --> 00:43:35,260
order unification it sounds very

00:43:32,950 --> 00:43:41,560
grandiose and the paper that's linked to

00:43:35,260 --> 00:43:43,300
it looks intimidating and and and it

00:43:41,560 --> 00:43:45,850
actually wasn't that hard and I think I

00:43:43,300 --> 00:43:49,090
think I think if people hadn't felt that

00:43:45,850 --> 00:43:50,500
it was a difficult place for them to go

00:43:49,090 --> 00:43:52,450
and they would have actually gone and

00:43:50,500 --> 00:43:53,860
looked and found that it wasn't actually

00:43:52,450 --> 00:43:57,040
a tough problem to solve I'm sure there

00:43:53,860 --> 00:43:58,930
are many many people in this room who

00:43:57,040 --> 00:44:01,240
could have fixed the problem in exactly

00:43:58,930 --> 00:44:04,090
the same way that I did in the same

00:44:01,240 --> 00:44:05,680
amount of time or even quicker so I

00:44:04,090 --> 00:44:07,570
think we're now kind of feeling

00:44:05,680 --> 00:44:09,160
emboldened by by this success i mean

00:44:07,570 --> 00:44:11,860
this really is a big deal I mean it's

00:44:09,160 --> 00:44:14,430
kind of one of the if you would want my

00:44:11,860 --> 00:44:16,420
people involved in tight level projects

00:44:14,430 --> 00:44:18,550
what what are the most important things

00:44:16,420 --> 00:44:20,110
to look at it would have been right

00:44:18,550 --> 00:44:21,580
maybe not right at the top but but

00:44:20,110 --> 00:44:23,680
pretty close to the top of the list of

00:44:21,580 --> 00:44:27,940
things that are most important for for

00:44:23,680 --> 00:44:29,890
those projects to address and so if that

00:44:27,940 --> 00:44:32,740
turns out to be such low-hanging fruit

00:44:29,890 --> 00:44:35,380
our thoughts now are well what else is

00:44:32,740 --> 00:44:36,790
going to be just a similarly low hanging

00:44:35,380 --> 00:44:38,770
fruit or maybe maybe maybe it may be

00:44:36,790 --> 00:44:41,140
harder but but but but feasible

00:44:38,770 --> 00:44:43,750
something we can actually do and so we

00:44:41,140 --> 00:44:46,540
have kind of a shopping list I think you

00:44:43,750 --> 00:44:48,580
know I I set myself as the goal for 2016

00:44:46,540 --> 00:44:50,410
you know SI to seven months six or bust

00:44:48,580 --> 00:44:51,550
so these are my stretch goals I guess

00:44:50,410 --> 00:44:54,730
for the rest of the year given III

00:44:51,550 --> 00:44:57,490
finished early so one of them is

00:44:54,730 --> 00:45:00,490
something that's there's been on the

00:44:57,490 --> 00:45:04,420
agenda for it for a long time is the the

00:45:00,490 --> 00:45:05,620
the the literal singleton type proposal

00:45:04,420 --> 00:45:08,250
is put together initially by George

00:45:05,620 --> 00:45:11,050
leontief and an initial implementation

00:45:08,250 --> 00:45:14,110
by him which then picked up by agent

00:45:11,050 --> 00:45:18,310
Moore's and then part kind of about a

00:45:14,110 --> 00:45:19,240
year and a bit ago so this this is

00:45:18,310 --> 00:45:20,230
something which is very very slight I

00:45:19,240 --> 00:45:22,060
mean it will be very it'll be useful for

00:45:20,230 --> 00:45:24,160
people using shapeless people useful

00:45:22,060 --> 00:45:26,650
people are using shapeless shape is

00:45:24,160 --> 00:45:30,460
records it will eliminate a whole ton of

00:45:26,650 --> 00:45:31,930
macros and shapeless and and generally

00:45:30,460 --> 00:45:33,700
make a whole bunch of things that an

00:45:31,930 --> 00:45:35,830
omen look a bit sort of weird and scary

00:45:33,700 --> 00:45:37,270
and intimidating in shape is code much

00:45:35,830 --> 00:45:38,980
much simpler so I think I think it's a

00:45:37,270 --> 00:45:41,560
great thing to have and i recently

00:45:38,980 --> 00:45:44,440
picked up Adrian's branch which almost

00:45:41,560 --> 00:45:46,090
almost there actually and and I've

00:45:44,440 --> 00:45:49,720
started working on that and hopefully I

00:45:46,090 --> 00:45:55,390
will have that in a pull request worthy

00:45:49,720 --> 00:45:56,620
form shortly and and and then ideally

00:45:55,390 --> 00:45:57,850
that will going to do and sit into the

00:45:56,620 --> 00:45:59,530
light been cigar the compiler if not

00:45:57,850 --> 00:46:00,690
it's the kind of thing that can go into

00:45:59,530 --> 00:46:03,030
a

00:46:00,690 --> 00:46:04,500
type level compiler in a way which is

00:46:03,030 --> 00:46:06,810
compatible so it's something that you

00:46:04,500 --> 00:46:08,190
would be able to compile code with this

00:46:06,810 --> 00:46:11,069
compiler and expect to be able to mix it

00:46:08,190 --> 00:46:13,349
a binary level with with with with other

00:46:11,069 --> 00:46:14,490
other code compile world by that with

00:46:13,349 --> 00:46:15,690
the vanilla compila that's true but

00:46:14,490 --> 00:46:17,250
actually all of the things i'm going to

00:46:15,690 --> 00:46:19,319
show you i think pretty much so other

00:46:17,250 --> 00:46:23,069
things on that on that list are oops

00:46:19,319 --> 00:46:24,300
oops oops i'll just leave there and so

00:46:23,069 --> 00:46:25,470
multiple I'm disappearance blocks this

00:46:24,300 --> 00:46:26,849
is something that Martin's been talking

00:46:25,470 --> 00:46:29,760
about for dotty is something you find in

00:46:26,849 --> 00:46:33,630
an interest is really really useful I

00:46:29,760 --> 00:46:36,540
mean there there a whole bunch of sort

00:46:33,630 --> 00:46:37,800
of methods of programming inspired by by

00:46:36,540 --> 00:46:39,180
dependent type program that this will

00:46:37,800 --> 00:46:40,560
make enormously easier anyone who's use

00:46:39,180 --> 00:46:42,660
shapeless and ended up wondering what

00:46:40,560 --> 00:46:45,000
are all these orcs things hanging around

00:46:42,660 --> 00:46:46,380
while orcs is basically a way of

00:46:45,000 --> 00:46:48,000
encoding around the fact that we don't

00:46:46,380 --> 00:46:50,069
have multiple impis parameter blocks if

00:46:48,000 --> 00:46:52,079
we have those all of the orcs things

00:46:50,069 --> 00:46:54,839
would disappear and suddenly a whole

00:46:52,079 --> 00:46:56,430
bunch of code written in using shapeless

00:46:54,839 --> 00:46:57,660
orbiting their shape of style will

00:46:56,430 --> 00:46:59,220
suddenly begin to look an awful lot

00:46:57,660 --> 00:47:00,510
clear and easy to understand more

00:46:59,220 --> 00:47:03,150
intuitive so I think that would be a

00:47:00,510 --> 00:47:04,829
great thing partial type application

00:47:03,150 --> 00:47:08,640
again this is this is a relatively minor

00:47:04,829 --> 00:47:10,230
thing it's mostly syntax and but it and

00:47:08,640 --> 00:47:11,670
you can encode your way around it but

00:47:10,230 --> 00:47:16,589
you end up creating all these rather

00:47:11,670 --> 00:47:17,730
rather annoying little artifacts of the

00:47:16,589 --> 00:47:19,920
encoding which would be nice be able to

00:47:17,730 --> 00:47:25,020
get rid of so one of the other big

00:47:19,920 --> 00:47:27,180
things that that is an issue for people

00:47:25,020 --> 00:47:30,240
doing lots of type class derivation is

00:47:27,180 --> 00:47:33,119
is the performance of the compiler when

00:47:30,240 --> 00:47:34,800
compiling recursive implicit so

00:47:33,119 --> 00:47:36,599
inductive that implicit definition I

00:47:34,800 --> 00:47:39,329
have some ideas which I think will

00:47:36,599 --> 00:47:41,339
massively increase improve the compile

00:47:39,329 --> 00:47:44,069
times of those things which I think can

00:47:41,339 --> 00:47:45,240
be probably done quite easily and so

00:47:44,069 --> 00:47:46,349
that's something I want to look at and

00:47:45,240 --> 00:47:48,240
then there are a whole bunch of issues

00:47:46,349 --> 00:47:50,609
around around implicit prioritization

00:47:48,240 --> 00:47:51,839
which I think also we can have a look at

00:47:50,609 --> 00:47:53,010
so these are all things which are on the

00:47:51,839 --> 00:47:55,109
type level agenda these are all things

00:47:53,010 --> 00:47:57,180
which I think can be done in a way which

00:47:55,109 --> 00:47:59,490
is which gets along very very well with

00:47:57,180 --> 00:48:03,780
the light bends garlic compiler and will

00:47:59,490 --> 00:48:05,339
allow us to do to do things more

00:48:03,780 --> 00:48:08,160
straightforwardly and make simpler code

00:48:05,339 --> 00:48:10,619
for people to use and it's all a good

00:48:08,160 --> 00:48:12,269
thing I reckon

00:48:10,619 --> 00:48:13,950
course Carla that's something else that

00:48:12,269 --> 00:48:15,329
that that Martin I think I heather was

00:48:13,950 --> 00:48:17,009
talking about this is something else

00:48:15,329 --> 00:48:18,390
that that I think we are also very

00:48:17,009 --> 00:48:20,789
interested in looking at something that

00:48:18,390 --> 00:48:22,529
that'd be interesting if the Scarlet

00:48:20,789 --> 00:48:24,390
Center a keen to work on that I think is

00:48:22,529 --> 00:48:25,890
something that that title of all people

00:48:24,390 --> 00:48:28,920
are very keen to work on too so that'd

00:48:25,890 --> 00:48:36,180
be great light has me questions please

00:48:28,920 --> 00:48:38,490
and thank you I have very practical

00:48:36,180 --> 00:48:41,279
question we are using skull zet in

00:48:38,490 --> 00:48:44,880
production other any reasons to switch

00:48:41,279 --> 00:48:50,249
to cats and yeah why to prefer one over

00:48:44,880 --> 00:48:55,769
another know if it if it ain't broke

00:48:50,249 --> 00:48:57,749
don't fix it so the there are a number

00:48:55,769 --> 00:48:59,759
of technical differences between cats

00:48:57,749 --> 00:49:02,759
and scholars at some of which I mean I

00:48:59,759 --> 00:49:06,200
think it's fair to say that that cats

00:49:02,759 --> 00:49:09,180
bills on the experiences arm off of

00:49:06,200 --> 00:49:10,589
scholar said heavily I think I think box

00:49:09,180 --> 00:49:12,150
was learnt during the scholars of

00:49:10,589 --> 00:49:15,180
experience and that that has fed into

00:49:12,150 --> 00:49:17,009
cats and cats is obviously younger

00:49:15,180 --> 00:49:18,869
scholars EDD is obviously established if

00:49:17,009 --> 00:49:20,670
you're already using it there are no

00:49:18,869 --> 00:49:24,269
immediate technical reasons for you to

00:49:20,670 --> 00:49:25,769
switch the thing is cats and type level

00:49:24,269 --> 00:49:27,749
are not just about the technology that

00:49:25,769 --> 00:49:29,460
the technical things we're about

00:49:27,749 --> 00:49:33,359
creating an environment where people can

00:49:29,460 --> 00:49:38,640
come to these ideas learn them and and

00:49:33,359 --> 00:49:41,130
make use of them and in a way which you

00:49:38,640 --> 00:49:43,619
know I mean we have we have to be honest

00:49:41,130 --> 00:49:45,809
that the the the approach that the

00:49:43,619 --> 00:49:47,759
functional ends of the scholar community

00:49:45,809 --> 00:49:50,519
has approached the the rest of the

00:49:47,759 --> 00:49:53,220
Scarlet community has not been ideal and

00:49:50,519 --> 00:49:54,390
we're trying to fix that so it's a

00:49:53,220 --> 00:49:55,980
mixture of reasons there are some

00:49:54,390 --> 00:49:57,779
through some technical ones there are

00:49:55,980 --> 00:49:59,430
some non technical ones I happen to

00:49:57,779 --> 00:50:00,720
think that the non-technical ones are at

00:49:59,430 --> 00:50:03,660
least as important as the technical

00:50:00,720 --> 00:50:08,309
reasons and that's the best answer I

00:50:03,660 --> 00:50:10,599
have yes

00:50:08,309 --> 00:50:12,490
so with some of the changes that you're

00:50:10,599 --> 00:50:14,890
proposing making to the Scala compiler

00:50:12,490 --> 00:50:15,940
things like 42 dutch hype and multiple

00:50:14,890 --> 00:50:17,200
Melissa perimeter blocks these are

00:50:15,940 --> 00:50:19,980
things that have been talked about or

00:50:17,200 --> 00:50:24,130
may already exist in dotty like 42 type

00:50:19,980 --> 00:50:25,000
but some of the forms in which they you

00:50:24,130 --> 00:50:26,740
know have been proposed to be

00:50:25,000 --> 00:50:28,299
implemented in Scala are actually

00:50:26,740 --> 00:50:30,160
different than how they are in da teef

00:50:28,299 --> 00:50:31,990
you know just even surface in tax like

00:50:30,160 --> 00:50:34,079
42 dot type is different than how

00:50:31,990 --> 00:50:37,030
singleton types are represented in dotty

00:50:34,079 --> 00:50:38,470
do you see that as a problem given that

00:50:37,030 --> 00:50:39,730
sort of we're moving to Dottie

00:50:38,470 --> 00:50:41,109
eventually are you going to change the

00:50:39,730 --> 00:50:43,270
way it's supposed to be implemented it's

00:50:41,109 --> 00:50:44,650
done what do you want to do so i think i

00:50:43,270 --> 00:50:46,480
think the fortitude type stuff is

00:50:44,650 --> 00:50:48,430
actually consistent with with the dotty

00:50:46,480 --> 00:50:52,480
story now so the dot type it is is

00:50:48,430 --> 00:50:54,880
optional so you can just use 42 in tight

00:50:52,480 --> 00:50:56,410
position without without a type which is

00:50:54,880 --> 00:50:57,940
great that was actually my initial

00:50:56,410 --> 00:51:00,130
objection to the original proposal

00:50:57,940 --> 00:51:02,170
because I I actually already had a

00:51:00,130 --> 00:51:04,569
mechanism for for using a literal

00:51:02,170 --> 00:51:06,549
effectively as a type and and I was

00:51:04,569 --> 00:51:08,349
rather dissatisfied with the idea that I

00:51:06,549 --> 00:51:09,640
might have to ride doctype after its to

00:51:08,349 --> 00:51:11,470
get the same effect with this language

00:51:09,640 --> 00:51:13,900
attention so that's that's gone now and

00:51:11,470 --> 00:51:16,359
so I think I think as far as the literal

00:51:13,900 --> 00:51:19,920
singleton type stuff is concerned there

00:51:16,359 --> 00:51:23,950
is no difference between between between

00:51:19,920 --> 00:51:26,140
what between the Scylla proposal I'm not

00:51:23,950 --> 00:51:27,849
sure it's actually in Dottie yet is it

00:51:26,140 --> 00:51:29,290
actually that it is ok well i think i

00:51:27,849 --> 00:51:31,869
think it i think it's the same i think

00:51:29,290 --> 00:51:34,299
it should be the same multiple implicit

00:51:31,869 --> 00:51:37,780
parameter lists and so I had a proposal

00:51:34,299 --> 00:51:41,710
on the table for 2 12 which was a fairly

00:51:37,780 --> 00:51:43,930
modest extension which was basically

00:51:41,710 --> 00:51:46,030
syntactically completely compatible with

00:51:43,930 --> 00:51:49,420
current scholar but but is a more

00:51:46,030 --> 00:51:50,950
limited and more limited fixed because

00:51:49,420 --> 00:51:52,780
it basically only out allows multiple

00:51:50,950 --> 00:51:54,970
implicit parameter list at the end if

00:51:52,780 --> 00:51:56,559
you want to have them interspersed then

00:51:54,970 --> 00:51:59,730
you have to change syntax somehow and

00:51:56,559 --> 00:52:03,099
Dottie has gone for done for the

00:51:59,730 --> 00:52:05,349
interspersed model and has changed the

00:52:03,099 --> 00:52:06,910
syntax so I think I think we need to

00:52:05,349 --> 00:52:08,619
give it some thought and work out when

00:52:06,910 --> 00:52:10,359
what is the best way of I mean the thing

00:52:08,619 --> 00:52:14,470
is we want to be able to keep as much

00:52:10,359 --> 00:52:15,910
compatibility between you know type

00:52:14,470 --> 00:52:16,990
level Scarlett as lot and like Ben

00:52:15,910 --> 00:52:18,190
scholar as possible because we want to

00:52:16,990 --> 00:52:19,180
be able to use it in our day jobs you

00:52:18,190 --> 00:52:20,950
know we don't want it to be something

00:52:19,180 --> 00:52:21,490
that you know where well we're looking

00:52:20,950 --> 00:52:22,660
forward to

00:52:21,490 --> 00:52:25,180
several years time you want to be

00:52:22,660 --> 00:52:28,030
something we can use tomorrow so we have

00:52:25,180 --> 00:52:30,100
to be careful that whatever we do is

00:52:28,030 --> 00:52:32,410
compatible with what the light band

00:52:30,100 --> 00:52:34,540
Scylla produces and an ideally that we

00:52:32,410 --> 00:52:39,210
can we can maybe maybe comfortably mix

00:52:34,540 --> 00:52:41,710
binaries generated by code compiled by

00:52:39,210 --> 00:52:43,630
type level and light band scholar I

00:52:41,710 --> 00:52:45,220
think that's that's kind of key if we

00:52:43,630 --> 00:52:46,990
could do that as fine so I mean we have

00:52:45,220 --> 00:52:49,300
some flexibility on syntax but i mean i

00:52:46,990 --> 00:52:50,860
think i think i have to see i mean more

00:52:49,300 --> 00:52:52,630
experiments needed i think basically and

00:52:50,860 --> 00:52:54,100
that I think is sort of a general

00:52:52,630 --> 00:52:55,690
message is that it's possible to

00:52:54,100 --> 00:52:57,520
experiment I mean this is this is this

00:52:55,690 --> 00:53:00,040
is something that we haven't really

00:52:57,520 --> 00:53:02,350
thought that is off that was possible

00:53:00,040 --> 00:53:04,330
the sort of the build infrastructure for

00:53:02,350 --> 00:53:06,220
for the Scylla can pilot so massively

00:53:04,330 --> 00:53:09,910
improved now that we have the the new

00:53:06,220 --> 00:53:11,440
newer SBT build available for doing this

00:53:09,910 --> 00:53:14,140
stuff it is very very feasible for

00:53:11,440 --> 00:53:17,260
people to to you know clone the Scarlet

00:53:14,140 --> 00:53:19,150
compiler repo change it compile the

00:53:17,260 --> 00:53:21,130
compiler link and parson code using the

00:53:19,150 --> 00:53:23,350
compiler that just modified its really

00:53:21,130 --> 00:53:25,690
really easy it's just as easy as many

00:53:23,350 --> 00:53:27,280
many other large software projects that

00:53:25,690 --> 00:53:29,200
people work on all the time it's nothing

00:53:27,280 --> 00:53:31,750
it's it's a piece of scarlet coat piece

00:53:29,200 --> 00:53:33,570
of mature well developed but you know

00:53:31,750 --> 00:53:36,609
like any any mature piece of code as

00:53:33,570 --> 00:53:38,170
it's it's rough edges and dark corners

00:53:36,609 --> 00:53:39,609
and all the rest of it but it's stuff

00:53:38,170 --> 00:53:41,290
that people can walk on I I really want

00:53:39,609 --> 00:53:45,550
to encourage people to kind of do more

00:53:41,290 --> 00:53:50,820
on the Scarlet compiler any more

00:53:45,550 --> 00:53:50,820
questions yes I back

00:53:56,359 --> 00:54:05,150
well so for cats one point oh like

00:54:01,630 --> 00:54:08,569
what's the story on binary compatibility

00:54:05,150 --> 00:54:12,440
or bigger question might be how would

00:54:08,569 --> 00:54:15,230
you balance the idea of the stability vs

00:54:12,440 --> 00:54:17,690
kind of getting the community excited

00:54:15,230 --> 00:54:20,029
and having a contributor being able to

00:54:17,690 --> 00:54:22,400
quickly like turn things around and I

00:54:20,029 --> 00:54:24,789
had features because this kind of

00:54:22,400 --> 00:54:28,999
relates to the the standard library

00:54:24,789 --> 00:54:31,430
versus the community library whereas you

00:54:28,999 --> 00:54:34,069
almost want someone who abandons it

00:54:31,430 --> 00:54:35,630
slightly so that the other people can

00:54:34,069 --> 00:54:37,160
basically build on top of it so it

00:54:35,630 --> 00:54:38,690
doesn't change for two years or

00:54:37,160 --> 00:54:41,569
something so I think there are certain

00:54:38,690 --> 00:54:43,789
benefits to like being semi abandoned I

00:54:41,569 --> 00:54:49,700
think so i don't know where you stand on

00:54:43,789 --> 00:54:51,410
this topic I kind of know what um yeah

00:54:49,700 --> 00:54:53,660
it's a tricky question and so I think I

00:54:51,410 --> 00:54:57,410
think so i think i think what we've

00:54:53,660 --> 00:54:59,809
attempted to do is to well I'd so as

00:54:57,410 --> 00:55:01,460
well as of over 10 release we expect you

00:54:59,809 --> 00:55:03,200
know to be using semantic versioning we

00:55:01,460 --> 00:55:05,690
expect to be able to make commitments to

00:55:03,200 --> 00:55:09,710
maintain binary compatibility within

00:55:05,690 --> 00:55:12,140
within minor releases in exactly the

00:55:09,710 --> 00:55:14,509
same way that the light bent scholar

00:55:12,140 --> 00:55:16,609
distribution does with minor releases as

00:55:14,509 --> 00:55:17,960
well and i think that's it that i think

00:55:16,609 --> 00:55:19,519
we have to be able to do that and that

00:55:17,960 --> 00:55:21,619
that doesn't mean that after one point 0

00:55:19,519 --> 00:55:23,329
it means that things will have to slow

00:55:21,619 --> 00:55:25,339
down a bit or at least we'll have to be

00:55:23,329 --> 00:55:29,509
very very cautious about how we make

00:55:25,339 --> 00:55:31,069
changes but that really just speaks in

00:55:29,509 --> 00:55:33,549
favor of more modular ization and if we

00:55:31,069 --> 00:55:36,829
have a very very tight kernel that is

00:55:33,549 --> 00:55:39,230
ideally as simple as possible we can

00:55:36,829 --> 00:55:40,819
treat that as being a very stable base

00:55:39,230 --> 00:55:42,140
and then then innovate around the edges

00:55:40,819 --> 00:55:43,789
I think that's kind of what we have to

00:55:42,140 --> 00:55:45,319
do I don't have any complete answers to

00:55:43,789 --> 00:55:46,900
this one of them so there may be some

00:55:45,319 --> 00:55:49,369
other a bit further out some answers

00:55:46,900 --> 00:55:51,920
around around catalysts and crucible

00:55:49,369 --> 00:55:53,150
which which might be might be helpful so

00:55:51,920 --> 00:55:56,630
I mean we're looking at things like

00:55:53,150 --> 00:55:59,509
community bills but for but for type

00:55:56,630 --> 00:56:02,569
level projects more more more more

00:55:59,509 --> 00:56:06,309
narrowly from that I mean the problem

00:56:02,569 --> 00:56:09,529
the problem that lost people profile

00:56:06,309 --> 00:56:15,220
libraries is somebody trying to get me

00:56:09,529 --> 00:56:20,089
off the stage tell me not to carry on

00:56:15,220 --> 00:56:22,150
must be have I been shut off okay thank

00:56:20,089 --> 00:56:22,150

YouTube URL: https://www.youtube.com/watch?v=v9K2KY7uIdQ


