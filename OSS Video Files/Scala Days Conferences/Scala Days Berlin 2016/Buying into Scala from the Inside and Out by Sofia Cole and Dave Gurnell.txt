Title: Buying into Scala from the Inside and Out by Sofia Cole and Dave Gurnell
Publication date: 2016-07-22
Playlist: Scala Days Berlin 2016
Description: 
	This video was recorded at Scala Days Berlin 2016
Follow us on Twitter @ScalaDays or visit our website for more information http://scaladays.org 

Anstract:
Getting to grips with a new programming language can be daunting, especially if it requires learning a new discipline such as functional programming. In this talk, Sofia and Dave will provide a step-by-step guide to adopting and mastering Scala from two different perspectives: the graduate developer and the visiting consultant.
Sofia Cole is a developer at YOOX NET-A-PORTER GROUP with eigtheen months' experience working with Scala. Dave Gurnell is a consultant at Underscore with over a decade's experience writing functional code. Between them, they will walk you through their experiences at YOOX NET-A-PORTER GROUP migrating from a legacy Perl monolith to a Scala microservice architecture.

Topics covered will include:
* How to sell Scala within your organization. 
* What benefits do managers and developers care about?
* A step-by-step guide for navigating the sea of Scala and FP concepts, without losing yourself in a monadic storm
* Shared joys and pains from different developers from disparate backgrounds, and how to reconcile them
* The tactical and targeted use of hack days, and functional programming workshops, including a step-by-step guide for running coding dojos
* A guide to pair programming from two different perspectives: peer-pairing and teacher-student pairing

This will be an entertaining and enlightening alternative take on the Scala adoption story. The speakers absolutely promise not to quarrel on-stage (unless the situation particularly demands it).
Captions: 
	00:00:00,000 --> 00:00:07,560
hello thank you for coming I'm Sophia

00:00:03,750 --> 00:00:09,990
I'm a scholar developer at ITV now and

00:00:07,560 --> 00:00:12,360
yeah and I'm Dave I'm a consultant and

00:00:09,990 --> 00:00:14,389
I'm a trainer at underscore and we're

00:00:12,360 --> 00:00:17,490
here to talk to you about adopting Scala

00:00:14,389 --> 00:00:20,430
so Dave and I met last year at Yukino

00:00:17,490 --> 00:00:24,930
support a I've recently left and Dave

00:00:20,430 --> 00:00:26,010
still there Dave came Dave came in to

00:00:24,930 --> 00:00:27,960
teach us Scala

00:00:26,010 --> 00:00:31,439
we were brand new there was two pill

00:00:27,960 --> 00:00:33,030
devs two graduate people of the Graduate

00:00:31,439 --> 00:00:34,530
scheme and we were learning Scala for

00:00:33,030 --> 00:00:36,989
the first time so Dave came in to help

00:00:34,530 --> 00:00:39,420
us so we're here today hopefully to give

00:00:36,989 --> 00:00:42,719
you a kind of framework you can follow

00:00:39,420 --> 00:00:44,820
to learn it yourselves a little bit

00:00:42,719 --> 00:00:46,289
about NetSupport a just for some context

00:00:44,820 --> 00:00:49,100
it's now part of uke's net-a-porter

00:00:46,289 --> 00:00:53,039
group we're online fashion retailer and

00:00:49,100 --> 00:00:54,570
by I say wienie sorry they and all the

00:00:53,039 --> 00:00:56,430
software there we worked on was

00:00:54,570 --> 00:00:58,469
developed in-house and it was written in

00:00:56,430 --> 00:01:02,520
Perl but we were working on getting into

00:00:58,469 --> 00:01:04,769
some Scala micro services again some

00:01:02,520 --> 00:01:07,080
context our team was formed the middle

00:01:04,769 --> 00:01:09,240
of last year again as I said for

00:01:07,080 --> 00:01:10,650
developers at the beginning and we

00:01:09,240 --> 00:01:13,350
wanted to scale really quickly using

00:01:10,650 --> 00:01:14,189
scarlet so we had Dave to help us it was

00:01:13,350 --> 00:01:15,570
really useful

00:01:14,189 --> 00:01:18,000
it helped us become confident and

00:01:15,570 --> 00:01:20,009
proficient within around two months I'd

00:01:18,000 --> 00:01:22,170
say obviously it was still a long way to

00:01:20,009 --> 00:01:26,970
go and they still owned in Scala today

00:01:22,170 --> 00:01:29,220
so yeah again even more timescale for

00:01:26,970 --> 00:01:31,799
you after about a year we had eight

00:01:29,220 --> 00:01:34,530
developers there we had about five micro

00:01:31,799 --> 00:01:39,470
services and just under about a hundred

00:01:34,530 --> 00:01:46,159
thousand lines of code so we yeah we did

00:01:39,470 --> 00:01:50,130
WC - L yes so from my point of view

00:01:46,159 --> 00:01:51,659
coming into this as a trainer I was

00:01:50,130 --> 00:01:53,759
trying to sort of help bootstrap the

00:01:51,659 --> 00:01:55,229
team so the way we typically do this is

00:01:53,759 --> 00:01:57,000
we start off with some classroom courses

00:01:55,229 --> 00:01:59,850
but we quickly move on to learning as

00:01:57,000 --> 00:02:01,110
you go because people learn better when

00:01:59,850 --> 00:02:02,250
they're working on stuff at the same

00:02:01,110 --> 00:02:03,090
time so that's what this talk is gonna

00:02:02,250 --> 00:02:05,070
be about it's gonna be fairly

00:02:03,090 --> 00:02:07,590
non-technical it's about teaching and

00:02:05,070 --> 00:02:09,780
learning processes so for this

00:02:07,590 --> 00:02:12,930
particular involvement I was in two days

00:02:09,780 --> 00:02:13,760
a week and you had three days a week -

00:02:12,930 --> 00:02:15,200
sort of

00:02:13,760 --> 00:02:16,610
figure it out figure out all the stuff

00:02:15,200 --> 00:02:19,370
and solve as many problems as you could

00:02:16,610 --> 00:02:21,980
and then left over yeah that's what that

00:02:19,370 --> 00:02:23,569
out so we're gonna talk about a couple

00:02:21,980 --> 00:02:24,730
of things today and we'll start off with

00:02:23,569 --> 00:02:26,959
some fairly lightweight stuff

00:02:24,730 --> 00:02:27,620
motivational stuff to set a framework so

00:02:26,959 --> 00:02:29,000
we're going to talk about the

00:02:27,620 --> 00:02:31,519
motivations for adopting Scala which

00:02:29,000 --> 00:02:33,560
hopefully everyone here is is on board

00:02:31,519 --> 00:02:35,630
with ways to sell Scala within your

00:02:33,560 --> 00:02:38,360
organization we'll talk about the goals

00:02:35,630 --> 00:02:39,530
for the transition process so how can we

00:02:38,360 --> 00:02:41,750
know that we're getting a good

00:02:39,530 --> 00:02:44,060
transition to the language and then

00:02:41,750 --> 00:02:46,310
we'll talk a little bit about how we

00:02:44,060 --> 00:02:48,500
sort of did the learning of scarlet and

00:02:46,310 --> 00:02:51,049
what worked well for us and what didn't

00:02:48,500 --> 00:02:52,880
work well and we'll finish off with a

00:02:51,049 --> 00:03:03,980
bit of a fun sort of what to expect a

00:02:52,880 --> 00:03:06,049
couple of top tips so okay so so this is

00:03:03,980 --> 00:03:07,040
me right sorry we've sort of reallocated

00:03:06,049 --> 00:03:10,810
these slides so we're gonna start these

00:03:07,040 --> 00:03:12,920
motivations for for learning Scala so

00:03:10,810 --> 00:03:14,690
there are a few reasons you might swaps

00:03:12,920 --> 00:03:16,970
it jumps a scholar in your organization

00:03:14,690 --> 00:03:19,880
first one o illustrated with dogs as

00:03:16,970 --> 00:03:21,410
well performance obviously the JVM is

00:03:19,880 --> 00:03:24,160
very fast scar is a very fast language

00:03:21,410 --> 00:03:27,859
you get a lot of performance out of it

00:03:24,160 --> 00:03:30,170
yeah so it's a really reliable thing

00:03:27,859 --> 00:03:32,209
with the great static type system you

00:03:30,170 --> 00:03:34,160
can use it to eliminate bugs less time

00:03:32,209 --> 00:03:35,840
spent on fixing bugs the more times you

00:03:34,160 --> 00:03:39,650
get to work on features and really cool

00:03:35,840 --> 00:03:41,600
things and we had a bunch of powerful

00:03:39,650 --> 00:03:43,250
libraries so I'm sure a bunch of using

00:03:41,600 --> 00:03:45,940
spark and akka and things like this and

00:03:43,250 --> 00:03:49,850
these are in Scala so it's very low

00:03:45,940 --> 00:03:53,239
impedance a lot of people find it really

00:03:49,850 --> 00:03:55,340
familiar so it's close to Java it's not

00:03:53,239 --> 00:03:58,099
Java but it's close it has familiar

00:03:55,340 --> 00:03:59,840
syntax things like the IDE s we use we

00:03:58,099 --> 00:04:02,359
can keep using the monitoring the

00:03:59,840 --> 00:04:11,900
logging things like this the continued

00:04:02,359 --> 00:04:14,750
continuty makes lives easier familiar

00:04:11,900 --> 00:04:16,010
faithful hounds that's what it is does

00:04:14,750 --> 00:04:18,910
everyone agree with those four points

00:04:16,010 --> 00:04:20,989
does anyone not agree with any of them

00:04:18,910 --> 00:04:22,430
okay I was expecting some people to have

00:04:20,989 --> 00:04:23,960
the familiarity being similar to Java

00:04:22,430 --> 00:04:25,050
things have raised a few heckles here

00:04:23,960 --> 00:04:27,550
and there

00:04:25,050 --> 00:04:29,469
really what these are all are is and I'm

00:04:27,550 --> 00:04:31,629
sure you know this took all these the

00:04:29,469 --> 00:04:33,400
these are are sort of proxies for

00:04:31,629 --> 00:04:34,930
increasing our productivity say whether

00:04:33,400 --> 00:04:36,189
we're spending less time optimizing

00:04:34,930 --> 00:04:37,599
things because the codes running fast

00:04:36,189 --> 00:04:39,759
and we're spending less time debugging

00:04:37,599 --> 00:04:41,620
things because it all works and I see

00:04:39,759 --> 00:04:43,509
cazuca static types where basically

00:04:41,620 --> 00:04:45,729
increasing the amount of time we have to

00:04:43,509 --> 00:04:47,529
work on new features so if we're going

00:04:45,729 --> 00:04:49,270
to measure the success of a transition

00:04:47,529 --> 00:04:50,680
to Scala we're going to have to have

00:04:49,270 --> 00:04:54,219
some kind of metric for productivity

00:04:50,680 --> 00:04:56,680
here yeah and Dave thought it was a

00:04:54,219 --> 00:04:59,949
really good idea to use charts so these

00:04:56,680 --> 00:05:01,150
are really good charts charts and these

00:04:59,949 --> 00:05:06,400
are really good for identifying our

00:05:01,150 --> 00:05:09,939
goals so yeah you go oh stop advancing

00:05:06,400 --> 00:05:12,490
the slides compulsion so before the

00:05:09,939 --> 00:05:14,469
transition to Scala you're fairly

00:05:12,490 --> 00:05:17,439
productive you're consistent you know

00:05:14,469 --> 00:05:20,110
what you're doing you keep going what

00:05:17,439 --> 00:05:21,729
we'd like to see in an ideal world is to

00:05:20,110 --> 00:05:23,529
pick up a new language get instantly

00:05:21,729 --> 00:05:25,990
more productive but I think a lot of us

00:05:23,529 --> 00:05:29,800
know this is quite naive who thinks this

00:05:25,990 --> 00:05:33,189
is nice we kind of prompted you to think

00:05:29,800 --> 00:05:35,080
that I guess yeah when we learn a new

00:05:33,189 --> 00:05:36,400
language you know you're leaving some

00:05:35,080 --> 00:05:38,500
knowledge behind you're learning some

00:05:36,400 --> 00:05:40,779
new stuff so performance can take a

00:05:38,500 --> 00:05:42,969
little bit of a hit so it looks a little

00:05:40,779 --> 00:05:45,909
bit more like this we adopt Scala

00:05:42,969 --> 00:05:48,909
performance drops gradually move back up

00:05:45,909 --> 00:05:51,639
and become really productive and benefit

00:05:48,909 --> 00:05:55,089
from that everything gets better yeah

00:05:51,639 --> 00:05:56,979
so the orange part is our fall behind in

00:05:55,089 --> 00:06:00,449
productivity and hopefully that green

00:05:56,979 --> 00:06:04,270
part is a big surge or cool new stuff

00:06:00,449 --> 00:06:06,449
will go on forever yes so the the ideal

00:06:04,270 --> 00:06:09,759
would be to minimize this lag time and

00:06:06,449 --> 00:06:13,149
maximize the long-term benefit and these

00:06:09,759 --> 00:06:15,189
are kind of yeah odds yes we've got

00:06:13,149 --> 00:06:17,919
these two goals for our transition yeah

00:06:15,189 --> 00:06:19,330
but can is anyone sort of is everyone on

00:06:17,919 --> 00:06:22,300
board that these two are kind of opposed

00:06:19,330 --> 00:06:26,259
to one another is anyone not on board

00:06:22,300 --> 00:06:28,719
with that there is there is I I feel

00:06:26,259 --> 00:06:30,639
fairly strongly in this that the quicker

00:06:28,719 --> 00:06:32,439
we make our transition the less benefit

00:06:30,639 --> 00:06:33,940
we're going to get out of out of the

00:06:32,439 --> 00:06:35,409
language long term because we have to

00:06:33,940 --> 00:06:38,070
spend time learning it so we'll go into

00:06:35,409 --> 00:06:40,410
that in a little bit there

00:06:38,070 --> 00:06:41,940
whew this is me good there are a few

00:06:40,410 --> 00:06:45,000
things and that we can use to sort of

00:06:41,940 --> 00:06:48,270
inform this to sort of justify this and

00:06:45,000 --> 00:06:50,490
inform it a little bit things to do with

00:06:48,270 --> 00:06:52,860
how we learn so some very very

00:06:50,490 --> 00:06:56,850
lightweight sort of psychology stuff we

00:06:52,860 --> 00:06:58,380
remove most the details the first

00:06:56,850 --> 00:07:02,510
insight is it does take time to learn

00:06:58,380 --> 00:07:04,530
okay so there's a sort of a popular but

00:07:02,510 --> 00:07:07,650
misguided belief that you can solve

00:07:04,530 --> 00:07:08,100
things with training oh we gotta learn

00:07:07,650 --> 00:07:09,120
Scala

00:07:08,100 --> 00:07:11,070
let's just get everyone in a classroom

00:07:09,120 --> 00:07:12,630
for like a week and a half and when they

00:07:11,070 --> 00:07:14,130
can learn everything all the advanced

00:07:12,630 --> 00:07:15,150
concepts and just dump it into their

00:07:14,130 --> 00:07:16,400
brains and they'll be brilliant scarlet

00:07:15,150 --> 00:07:19,860
vapors and off we go

00:07:16,400 --> 00:07:22,440
doesn't happen I did and a half two days

00:07:19,860 --> 00:07:24,630
into training everyone is tired their

00:07:22,440 --> 00:07:27,960
minds have switched off much like after

00:07:24,630 --> 00:07:29,780
two days of a conference I guess and

00:07:27,960 --> 00:07:31,620
there's only so much we can take in a

00:07:29,780 --> 00:07:33,390
time and it's something to do with

00:07:31,620 --> 00:07:35,880
short-term memory and long-term memory

00:07:33,390 --> 00:07:38,400
and and sort of saturating and not being

00:07:35,880 --> 00:07:39,720
able to remember things so it takes time

00:07:38,400 --> 00:07:41,520
to learn stuff and we need time to

00:07:39,720 --> 00:07:44,160
reinforce that and we reinforce it by

00:07:41,520 --> 00:07:46,830
actually doing it similar to that

00:07:44,160 --> 00:07:52,080
there's a difference between knowledge

00:07:46,830 --> 00:07:54,390
and an application so for example I can

00:07:52,080 --> 00:07:56,190
I can I can tell you all about monads

00:07:54,390 --> 00:07:58,430
right I can tell you bout why monads are

00:07:56,190 --> 00:08:01,470
great well the type signatures look like

00:07:58,430 --> 00:08:03,000
I can give you four or five examples of

00:08:01,470 --> 00:08:05,130
monads that you can use there today you

00:08:03,000 --> 00:08:06,480
can know this people can ask you about

00:08:05,130 --> 00:08:07,830
miners and you'll be able to eloquently

00:08:06,480 --> 00:08:09,150
tell them how great my own arts are and

00:08:07,830 --> 00:08:12,270
why they should care something to

00:08:09,150 --> 00:08:13,290
burritos or something and then the

00:08:12,270 --> 00:08:14,760
problem with that is then when you go

00:08:13,290 --> 00:08:16,820
sit down and refactor a bit of magnetic

00:08:14,760 --> 00:08:19,260
code or try to make code more monadic

00:08:16,820 --> 00:08:20,850
okay oh my goodness this is actually

00:08:19,260 --> 00:08:22,140
quite hard because there's a difference

00:08:20,850 --> 00:08:23,040
between knowing the principles and

00:08:22,140 --> 00:08:25,410
actually being able to apply the

00:08:23,040 --> 00:08:27,390
principles I mean both of these are

00:08:25,410 --> 00:08:28,440
important right I mean we don't want

00:08:27,390 --> 00:08:32,090
that dog to be using that chainsaw

00:08:28,440 --> 00:08:32,090
without having read about it first but

00:08:32,240 --> 00:08:39,510
we can't have one without the other and

00:08:36,080 --> 00:08:42,900
and following that people in at

00:08:39,510 --> 00:08:44,880
different rates so this isn't an

00:08:42,900 --> 00:08:47,370
intelligence thing it's not how smart

00:08:44,880 --> 00:08:48,690
you are it's a little bit to do with how

00:08:47,370 --> 00:08:50,070
much knowledge you have how much you

00:08:48,690 --> 00:08:50,880
have to leave behind how much you have

00:08:50,070 --> 00:08:53,130
to learn

00:08:50,880 --> 00:08:55,889
and stuff that we're familiar with as

00:08:53,130 --> 00:08:57,360
we've already talked about and also

00:08:55,889 --> 00:08:57,750
everyone is really different in this

00:08:57,360 --> 00:09:04,730
regard

00:08:57,750 --> 00:09:04,730
- so Scala is a hybrid language it's yes

00:09:10,880 --> 00:09:15,600
we're going to talk about how we can

00:09:13,079 --> 00:09:16,490
bring those together above the dotted

00:09:15,600 --> 00:09:19,319
line

00:09:16,490 --> 00:09:20,819
okay so then it's important that we

00:09:19,319 --> 00:09:21,839
learn the right features of our language

00:09:20,819 --> 00:09:25,560
and this is sort of the thing we're

00:09:21,839 --> 00:09:26,699
driving towards here right so I'll come

00:09:25,560 --> 00:09:28,560
back to that in a couple of slides I

00:09:26,699 --> 00:09:33,480
will remember it and if I don't remember

00:09:28,560 --> 00:09:35,690
it hold me to it hold me - yeah so Scala

00:09:33,480 --> 00:09:39,180
is a hybrid language language there's

00:09:35,690 --> 00:09:42,360
half about object orientated half of

00:09:39,180 --> 00:09:44,550
with him not me functional programming

00:09:42,360 --> 00:09:48,209
most people are kind of comfortable with

00:09:44,550 --> 00:09:49,410
object orientated it's easy for one who

00:09:48,209 --> 00:09:51,779
was in an object-oriented language

00:09:49,410 --> 00:09:53,160
before they started to Skyler Wow

00:09:51,779 --> 00:09:56,089
Grainne who's in a functional language

00:09:53,160 --> 00:09:58,889
voice started in Scala okay that's okay

00:09:56,089 --> 00:10:02,579
exactly so the object-oriented side

00:09:58,889 --> 00:10:04,649
people a bit more comfortable with most

00:10:02,579 --> 00:10:07,920
people don't know that much functional

00:10:04,649 --> 00:10:10,620
programming particularly the statically

00:10:07,920 --> 00:10:12,269
typed functional program with functors

00:10:10,620 --> 00:10:17,220
and monads and all the scary words

00:10:12,269 --> 00:10:19,050
everyone talks about so but some people

00:10:17,220 --> 00:10:20,550
have experienced that experience with it

00:10:19,050 --> 00:10:23,630
from their own interests or from

00:10:20,550 --> 00:10:26,339
university so that's again it's gonna

00:10:23,630 --> 00:10:30,740
diverge the lines a little bit more and

00:10:26,339 --> 00:10:33,029
not totally natural yeah yeah so this is

00:10:30,740 --> 00:10:34,560
picturing people on the same page either

00:10:33,029 --> 00:10:37,350
in the the program that they're

00:10:34,560 --> 00:10:39,660
programming now or when they're starting

00:10:37,350 --> 00:10:43,589
to learn the basics and as we learn

00:10:39,660 --> 00:10:45,839
Scala these tend to diversify this is

00:10:43,589 --> 00:10:48,360
great as long as there's this overlap in

00:10:45,839 --> 00:10:50,970
the middle and also that they have a

00:10:48,360 --> 00:10:55,259
future a more a common understanding of

00:10:50,970 --> 00:10:57,180
what good code is this diversity the the

00:10:55,259 --> 00:10:59,180
bits on the outside is what leads to the

00:10:57,180 --> 00:11:01,709
creativeness and that the the

00:10:59,180 --> 00:11:03,750
inspiration so loads of advantages in

00:11:01,709 --> 00:11:04,650
that we can train each other train each

00:11:03,750 --> 00:11:06,270
other

00:11:04,650 --> 00:11:09,630
yet communication everything like that

00:11:06,270 --> 00:11:12,600
so next there was the negative side so

00:11:09,630 --> 00:11:14,040
if these push out a little bit more we

00:11:12,600 --> 00:11:18,330
allow people to go off and do their own

00:11:14,040 --> 00:11:19,980
thing that's great but there's there's

00:11:18,330 --> 00:11:22,740
gonna be a dysfunction there which isn't

00:11:19,980 --> 00:11:24,870
so great if person a is writing code the

00:11:22,740 --> 00:11:28,140
person B doesn't understand it it

00:11:24,870 --> 00:11:30,960
creates a divide within the team so this

00:11:28,140 --> 00:11:33,300
isn't great and we have to work to avoid

00:11:30,960 --> 00:11:36,210
that so there's like there's that guy

00:11:33,300 --> 00:11:38,820
right that guy always that guy that's

00:11:36,210 --> 00:11:44,400
gonna said guy when I say guy I mean

00:11:38,820 --> 00:11:46,590
maybe again so yeah we actively

00:11:44,400 --> 00:11:48,330
encourage the collaboration so we need

00:11:46,590 --> 00:11:51,540
this to come together we need this to be

00:11:48,330 --> 00:11:53,460
the ideal picture I guess we still get

00:11:51,540 --> 00:11:56,070
the diversity this outside space you'll

00:11:53,460 --> 00:11:58,680
get the time to be creative and inspire

00:11:56,070 --> 00:12:00,240
one another but the strong common ground

00:11:58,680 --> 00:12:03,210
in the middle is really really important

00:12:00,240 --> 00:12:05,340
for a team to learn and to be great yeah

00:12:03,210 --> 00:12:07,440
hopefully the team can encourage build

00:12:05,340 --> 00:12:10,650
that common ground yes so that there's

00:12:07,440 --> 00:12:11,970
one more one more thing familiarity is

00:12:10,650 --> 00:12:14,670
not equal to similarity I didn't have a

00:12:11,970 --> 00:12:21,050
good dog picture for this I added the

00:12:14,670 --> 00:12:25,790
dog pictures this is really trying to

00:12:21,050 --> 00:12:27,750
get back to what your question was about

00:12:25,790 --> 00:12:29,430
there's there's a difference between

00:12:27,750 --> 00:12:31,410
something looking familiar and something

00:12:29,430 --> 00:12:34,170
actually really sort of working the way

00:12:31,410 --> 00:12:36,690
you expect it to so for example who's

00:12:34,170 --> 00:12:40,290
heard this phrase job without semicolons

00:12:36,690 --> 00:12:42,420
yeah so this is this is a thing right

00:12:40,290 --> 00:12:43,680
this is a something that in some ways is

00:12:42,420 --> 00:12:45,330
a very positive thing if you're

00:12:43,680 --> 00:12:47,850
switching to to Scala

00:12:45,330 --> 00:12:49,470
particularly from Java you can make a

00:12:47,850 --> 00:12:51,810
very treet easy transition to yourself

00:12:49,470 --> 00:12:53,850
right you you take a look at some Java

00:12:51,810 --> 00:12:55,650
code you take some Java code that looks

00:12:53,850 --> 00:12:57,150
like this and you sort of you know you

00:12:55,650 --> 00:12:59,910
write the types after the variable names

00:12:57,150 --> 00:13:02,280
rather than before and you use valve R

00:12:59,910 --> 00:13:04,140
and death and you produce Scala code

00:13:02,280 --> 00:13:05,610
that works and does the same thing and

00:13:04,140 --> 00:13:09,690
that means you can get up and running

00:13:05,610 --> 00:13:11,670
really quickly but there's a trade-off

00:13:09,690 --> 00:13:12,600
there right if you actually spend time

00:13:11,670 --> 00:13:15,510
to learn the functional programming

00:13:12,600 --> 00:13:17,640
concepts the other half are scalar then

00:13:15,510 --> 00:13:17,830
you know you get much better results so

00:13:17,640 --> 00:13:20,290
there

00:13:17,830 --> 00:13:22,990
a very distinctive trade-off here and

00:13:20,290 --> 00:13:24,700
the real sort of crux of this process is

00:13:22,990 --> 00:13:27,610
trying to front-load enough knowledge

00:13:24,700 --> 00:13:32,370
that we get the benefit without spending

00:13:27,610 --> 00:13:34,780
forever wallowing in type theory so

00:13:32,370 --> 00:13:39,940
these are the these are the summary of

00:13:34,780 --> 00:13:41,680
the insights we had yep so we like that

00:13:39,940 --> 00:13:43,660
there's a trade-off between adopting

00:13:41,680 --> 00:13:46,600
quickly but getting the benefit from

00:13:43,660 --> 00:13:47,830
Scala it's good to learn while we work

00:13:46,600 --> 00:13:49,870
so it's really important to absorb that

00:13:47,830 --> 00:13:52,270
information and it's really really great

00:13:49,870 --> 00:13:55,180
to learn from each other - sorry I kind

00:13:52,270 --> 00:13:57,130
of whatever you say okay so this is what

00:13:55,180 --> 00:13:58,900
we're kind of coming onto here this is

00:13:57,130 --> 00:13:59,890
what this talk is about it's processes

00:13:58,900 --> 00:14:01,840
for learning and teaching and we're

00:13:59,890 --> 00:14:05,680
really interested to hear your thoughts

00:14:01,840 --> 00:14:08,680
about this as well in a minute it turns

00:14:05,680 --> 00:14:10,900
out that there's a lot of sort of

00:14:08,680 --> 00:14:13,120
overlap well okay no let me know let me

00:14:10,900 --> 00:14:14,920
let me first of all let's ask you if if

00:14:13,120 --> 00:14:16,930
you're the only scholar expert in your

00:14:14,920 --> 00:14:18,940
organization right and I say to you as

00:14:16,930 --> 00:14:21,640
your boss go and train everyone else in

00:14:18,940 --> 00:14:22,810
Scala what would you do right and I'm

00:14:21,640 --> 00:14:24,400
sure there's some people in here who

00:14:22,810 --> 00:14:28,300
have had that happen you're the person

00:14:24,400 --> 00:14:30,070
who's sort of leading this charge go and

00:14:28,300 --> 00:14:31,240
train everyone else internally you

00:14:30,070 --> 00:14:32,830
probably think okay well I went to

00:14:31,240 --> 00:14:34,180
school I learnt programming at school or

00:14:32,830 --> 00:14:35,770
at university and I did a lot of

00:14:34,180 --> 00:14:38,230
lectures and I did a lot of courses and

00:14:35,770 --> 00:14:40,180
I did some exercises and that's what you

00:14:38,230 --> 00:14:42,310
probably do you probably produce that

00:14:40,180 --> 00:14:44,230
content and that's fine that works

00:14:42,310 --> 00:14:45,880
that's a great a great way of doing

00:14:44,230 --> 00:14:48,070
things but there are some really great

00:14:45,880 --> 00:14:49,450
sort of training tools that we can

00:14:48,070 --> 00:14:51,520
actually actually improve on that a lot

00:14:49,450 --> 00:14:55,180
more so here are some of the sort of

00:14:51,520 --> 00:14:58,450
things you see coming out of a sort of

00:14:55,180 --> 00:14:59,980
educational literature these days the

00:14:58,450 --> 00:15:02,290
sort of you know collaborative learning

00:14:59,980 --> 00:15:04,330
and feedback as anyone heard the phrase

00:15:02,290 --> 00:15:05,800
mastery learning that's when you keep

00:15:04,330 --> 00:15:07,000
working on something until you're

00:15:05,800 --> 00:15:08,350
actually good at it as opposed to being

00:15:07,000 --> 00:15:09,790
forced to move on to the next part of

00:15:08,350 --> 00:15:11,290
the syllabus it actually helps people

00:15:09,790 --> 00:15:12,820
learn things better and there's a really

00:15:11,290 --> 00:15:14,440
great sort of things on understanding

00:15:12,820 --> 00:15:16,570
the way you learn yourself that's a

00:15:14,440 --> 00:15:18,550
really important thing and and what's

00:15:16,570 --> 00:15:20,440
interesting about the these things which

00:15:18,550 --> 00:15:21,790
seem kind of obvious is that when put

00:15:20,440 --> 00:15:23,320
into practice they have a really

00:15:21,790 --> 00:15:25,510
significant effect so you're talking

00:15:23,320 --> 00:15:27,280
about things that cost nothing that are

00:15:25,510 --> 00:15:29,200
putting people months ahead or giving

00:15:27,280 --> 00:15:31,059
them multiple grade differences in their

00:15:29,200 --> 00:15:32,799
final sort of exam results

00:15:31,059 --> 00:15:34,659
and what's great about these approaches

00:15:32,799 --> 00:15:36,729
is we're already doing some of them

00:15:34,659 --> 00:15:39,069
right because there's a lot of overlap

00:15:36,729 --> 00:15:40,329
between these and and some of the print

00:15:39,069 --> 00:15:42,219
the processes we use in agile

00:15:40,329 --> 00:15:43,659
development and some of the processes we

00:15:42,219 --> 00:15:45,609
do using in stuff like sort of the

00:15:43,659 --> 00:15:48,819
software craftsmanship movement so we

00:15:45,609 --> 00:15:49,929
can put those to use and so we're going

00:15:48,819 --> 00:15:51,609
to talk about a couple of things that

00:15:49,929 --> 00:15:54,399
we've been using here technique-wise

00:15:51,609 --> 00:15:55,959
each you've got pros and cons yeah and

00:15:54,399 --> 00:15:57,519
we'll go into the cons as much at the

00:15:55,959 --> 00:16:03,729
pros and we'd like to get your opinions

00:15:57,519 --> 00:16:05,769
on this stuff as well training courses

00:16:03,729 --> 00:16:07,089
so I guess I guess we've already talked

00:16:05,769 --> 00:16:08,799
about training a little bit the

00:16:07,089 --> 00:16:10,839
advantages of a training course is it'll

00:16:08,799 --> 00:16:12,009
dump information the disadvantage is

00:16:10,839 --> 00:16:16,089
there's only so much information you can

00:16:12,009 --> 00:16:17,829
absorb so you you you have to there's

00:16:16,089 --> 00:16:20,019
only so far you can go with them good

00:16:17,829 --> 00:16:21,429
training courses will tell you what's

00:16:20,019 --> 00:16:22,769
important so that when you actually go

00:16:21,429 --> 00:16:25,119
away to work on this stuff yourself

00:16:22,769 --> 00:16:27,129
you're not you know you're not you're

00:16:25,119 --> 00:16:28,209
not thinking about things that are

00:16:27,129 --> 00:16:33,129
actually not relevant to what you're

00:16:28,209 --> 00:16:36,249
going to be using day-to-day yes so from

00:16:33,129 --> 00:16:38,979
my experience of my perspective exactly

00:16:36,249 --> 00:16:40,539
how I said it gets really draining you

00:16:38,979 --> 00:16:41,889
feel like you've learnt too much it

00:16:40,539 --> 00:16:44,709
feels like your brain can't take anymore

00:16:41,889 --> 00:16:46,929
and it's really good to get away and

00:16:44,709 --> 00:16:49,509
absorb it and the way that you do that

00:16:46,929 --> 00:16:51,999
is to put it into practice Dave talked

00:16:49,509 --> 00:16:54,249
about a one day short term was it one

00:16:51,999 --> 00:16:57,399
day to take a dare to supposedly your

00:16:54,249 --> 00:17:00,279
short-term memory and so to get it in

00:16:57,399 --> 00:17:01,809
get the practice in and yeah absorb it

00:17:00,279 --> 00:17:03,009
that's the only thing I can kind of say

00:17:01,809 --> 00:17:04,779
well there's an interesting thing here

00:17:03,009 --> 00:17:06,189
which is a lot of people organize

00:17:04,779 --> 00:17:08,019
training courses on Thursday and Friday

00:17:06,189 --> 00:17:10,139
into the week let's do a training course

00:17:08,019 --> 00:17:12,639
by the time you get back on Monday

00:17:10,139 --> 00:17:14,529
you've lost that window right that

00:17:12,639 --> 00:17:15,909
window is like a day long and you you

00:17:14,529 --> 00:17:17,230
want to get out there and try and start

00:17:15,909 --> 00:17:18,459
playing with this stuff if you take two

00:17:17,230 --> 00:17:20,829
days off and start thinking about you

00:17:18,459 --> 00:17:25,029
know washing the car or or whatever it's

00:17:20,829 --> 00:17:27,039
not gonna help the next one is a bit of

00:17:25,029 --> 00:17:30,389
a chat about peer review it's things you

00:17:27,039 --> 00:17:32,889
can do on the job to help you learn so

00:17:30,389 --> 00:17:34,509
peer review is a great one you've done a

00:17:32,889 --> 00:17:37,570
piece of code you want to get your peers

00:17:34,509 --> 00:17:39,549
opinion on it it's great for sharing the

00:17:37,570 --> 00:17:41,529
the stuff that you've done it's great

00:17:39,549 --> 00:17:43,889
for encouraging conversation and

00:17:41,529 --> 00:17:43,889
discussion

00:17:44,590 --> 00:17:48,760
the easiest ones is obviously to a code

00:17:46,510 --> 00:17:51,159
review so one person signs off on the

00:17:48,760 --> 00:17:52,419
stuff you've done or two even this is

00:17:51,159 --> 00:17:55,210
great because it gets people involved in

00:17:52,419 --> 00:17:58,480
from the team it encourages people to

00:17:55,210 --> 00:18:02,020
weigh in on the stuff you've done if

00:17:58,480 --> 00:18:03,130
it's good what they think but then

00:18:02,020 --> 00:18:04,570
remember downsize before I get to the

00:18:03,130 --> 00:18:06,640
downsize I assume a lot of people here

00:18:04,570 --> 00:18:08,770
do pull requests review who does has a

00:18:06,640 --> 00:18:11,020
routine practice of pull requests review

00:18:08,770 --> 00:18:13,750
their companies so interesting so it's

00:18:11,020 --> 00:18:15,580
not everybody that's like half yeah so

00:18:13,750 --> 00:18:17,080
I'm for learning it's a great I mean

00:18:15,580 --> 00:18:18,039
it's it's great for tool for quality

00:18:17,080 --> 00:18:20,640
control but there are a number of

00:18:18,039 --> 00:18:23,289
downsides to it some of which hopefully

00:18:20,640 --> 00:18:24,279
you know will be obvious and some some

00:18:23,289 --> 00:18:26,140
of which are specific to a learning

00:18:24,279 --> 00:18:27,309
context so this is an interesting one

00:18:26,140 --> 00:18:31,179
it's got to be inclusive right

00:18:27,309 --> 00:18:34,120
particularly for learning is this is in

00:18:31,179 --> 00:18:35,470
some some places won't peer review ends

00:18:34,120 --> 00:18:38,200
up being a processor for senior dev

00:18:35,470 --> 00:18:39,580
science things off which is kind of okay

00:18:38,200 --> 00:18:40,690
maybe that's the person with all the

00:18:39,580 --> 00:18:42,070
domain knowledge but it's not good for

00:18:40,690 --> 00:18:44,080
learning because it people get

00:18:42,070 --> 00:18:45,610
disengaged from it and if you you end up

00:18:44,080 --> 00:18:46,690
with sort of like oh well I don't really

00:18:45,610 --> 00:18:48,700
know if this code is right or not but

00:18:46,690 --> 00:18:50,049
I'll just submit the pull request and

00:18:48,700 --> 00:18:52,679
someone else would tell me if it's okay

00:18:50,049 --> 00:18:57,669
and and and and that that's not a

00:18:52,679 --> 00:18:59,110
positive positive environment with

00:18:57,669 --> 00:19:01,809
regards to being positive about things

00:18:59,110 --> 00:19:03,909
when you switching a language as a team

00:19:01,809 --> 00:19:05,350
it's a really leveling experience right

00:19:03,909 --> 00:19:07,029
all the people who previously had all

00:19:05,350 --> 00:19:08,770
their knowledge and now you know the

00:19:07,029 --> 00:19:11,529
senior devs now know as much as the

00:19:08,770 --> 00:19:13,299
junior devs and some of us are very

00:19:11,529 --> 00:19:17,649
proud about our work and it's very easy

00:19:13,299 --> 00:19:20,500
to become defensive that's the word yeah

00:19:17,649 --> 00:19:22,510
so you know positive encouragement and

00:19:20,500 --> 00:19:25,090
all that kind of stuff keep it right and

00:19:22,510 --> 00:19:26,740
read comments in a positive light and

00:19:25,090 --> 00:19:28,179
then there's things like focus so

00:19:26,740 --> 00:19:29,740
particularly coming from other languages

00:19:28,179 --> 00:19:31,690
you'll have different sizes in tactic

00:19:29,740 --> 00:19:34,360
considerations putting underscores

00:19:31,690 --> 00:19:37,049
before private function names is like an

00:19:34,360 --> 00:19:39,010
example from JavaScript world maybe

00:19:37,049 --> 00:19:40,480
those kind of things are kind of great

00:19:39,010 --> 00:19:41,980
in a peer review but the fact of the

00:19:40,480 --> 00:19:46,840
matter is people latch on to the first

00:19:41,980 --> 00:19:49,270
thing they see and so one can get quite

00:19:46,840 --> 00:19:53,200
distracted by these things so space

00:19:49,270 --> 00:19:55,510
weight space and and things on is this

00:19:53,200 --> 00:19:57,010
thing efficient is this is this for loop

00:19:55,510 --> 00:19:58,119
I know it's a flat map method that's not

00:19:57,010 --> 00:20:00,369
that's not a while loop

00:19:58,119 --> 00:20:02,679
as less efficient that kind of thing and

00:20:00,369 --> 00:20:04,479
in its importance and not capture that

00:20:02,679 --> 00:20:05,979
stuff at the expense of capturing all

00:20:04,479 --> 00:20:07,959
the very important stuff like does this

00:20:05,979 --> 00:20:09,309
code do what we designed it to do and

00:20:07,959 --> 00:20:12,279
all the tests actually doing the right

00:20:09,309 --> 00:20:14,829
thing and so on yeah something that

00:20:12,279 --> 00:20:16,979
isn't on here as well is that peer

00:20:14,829 --> 00:20:19,869
reviews can be really really difficult

00:20:16,979 --> 00:20:22,569
seeing the code on on the page is really

00:20:19,869 --> 00:20:24,159
hard to spot those you know those little

00:20:22,569 --> 00:20:25,269
things or actually know that the code

00:20:24,159 --> 00:20:27,339
that you're looking at it might look

00:20:25,269 --> 00:20:29,349
right but does it do what the what the

00:20:27,339 --> 00:20:30,849
ticket or the or the task asked it to do

00:20:29,349 --> 00:20:35,169
so those kind of things are really hard

00:20:30,849 --> 00:20:37,809
to judge from a peer review to so I

00:20:35,169 --> 00:20:39,369
guess just if this becomes a problem

00:20:37,809 --> 00:20:40,959
with the invitation becomes a problem

00:20:39,369 --> 00:20:42,609
there are a few things you can use to

00:20:40,959 --> 00:20:45,429
help does anyone use stuff like Scala

00:20:42,609 --> 00:20:47,049
reform yes a few projects in there so

00:20:45,429 --> 00:20:48,129
this automatically formats your code for

00:20:47,049 --> 00:20:50,649
you

00:20:48,129 --> 00:20:52,389
Scala starts a linter water mover will

00:20:50,649 --> 00:20:53,859
you know fail your build if you used

00:20:52,389 --> 00:20:55,599
option yet and things like this

00:20:53,859 --> 00:20:59,229
so there are tools here you can use to

00:20:55,599 --> 00:21:00,429
focus the discussion they're not there

00:20:59,229 --> 00:21:01,569
they're sort of some people love them

00:21:00,429 --> 00:21:04,449
some people hate like everybody hates

00:21:01,569 --> 00:21:06,219
scelera form there's a Sam Halliday has

00:21:04,449 --> 00:21:07,839
a really great phrase it's just like

00:21:06,219 --> 00:21:09,999
nobody likes the indentation and the

00:21:07,839 --> 00:21:11,949
layout escora form provides but everyone

00:21:09,999 --> 00:21:15,129
hates it equally so you're all on the

00:21:11,949 --> 00:21:18,369
same side right and that can hold has

00:21:15,129 --> 00:21:20,949
helped solve some of these problems but

00:21:18,369 --> 00:21:23,319
on the other side Morris may vary your

00:21:20,949 --> 00:21:28,749
mileage may vary these tools can be kind

00:21:23,319 --> 00:21:30,099
of annoying they're restrictive but I

00:21:28,749 --> 00:21:32,109
mean the thing that we can say between

00:21:30,099 --> 00:21:34,089
us is just try them and see if it works

00:21:32,109 --> 00:21:36,039
for your team it could work for you it

00:21:34,089 --> 00:21:39,939
could distract from the from the as you

00:21:36,039 --> 00:21:42,939
said the boring stuff so yeah next is a

00:21:39,939 --> 00:21:44,349
really controversial one paring I think

00:21:42,939 --> 00:21:47,169
I mentioned in the skull exchange

00:21:44,349 --> 00:21:48,609
pairing and my talk in December and it

00:21:47,169 --> 00:21:51,219
was the only thing people commented on

00:21:48,609 --> 00:21:54,309
afterwards so yeah it's a controversial

00:21:51,219 --> 00:21:57,089
one when it works it's great there's

00:21:54,309 --> 00:22:00,189
lots of knowledge transfer there's

00:21:57,089 --> 00:22:03,969
productivity you can really benefit from

00:22:00,189 --> 00:22:05,739
that connection and it gets people

00:22:03,969 --> 00:22:06,969
working together and conversation and

00:22:05,739 --> 00:22:11,750
discussion everything great like that

00:22:06,969 --> 00:22:14,630
however it needs to be done so well

00:22:11,750 --> 00:22:16,220
it needs to down really well so respect

00:22:14,630 --> 00:22:18,110
the driver and the navigate to roles

00:22:16,220 --> 00:22:20,750
it's really important if you're the

00:22:18,110 --> 00:22:23,600
Navigator sit on your hands do not touch

00:22:20,750 --> 00:22:26,720
the keyboard do not touch anything try

00:22:23,600 --> 00:22:29,150
to explain things to people and help

00:22:26,720 --> 00:22:31,130
them they you help them a solve you

00:22:29,150 --> 00:22:33,770
thing I can say TDD works really well

00:22:31,130 --> 00:22:35,810
I've noticed recently the whole green

00:22:33,770 --> 00:22:37,820
light red light somebody writes a tests

00:22:35,810 --> 00:22:44,780
and the person needs it to pass that's a

00:22:37,820 --> 00:22:46,790
great one to use the benefit I mean this

00:22:44,780 --> 00:22:48,380
is interesting more like not

00:22:46,790 --> 00:22:49,670
yeah you can't mandate people to pair

00:22:48,380 --> 00:22:51,020
all the time sometimes it's just not

00:22:49,670 --> 00:22:52,220
applicable to a task someone wants to

00:22:51,020 --> 00:22:55,370
just sort of zone out and solve the

00:22:52,220 --> 00:23:00,830
problem and I think it's it's always

00:22:55,370 --> 00:23:02,510
worth it's always worth being able to

00:23:00,830 --> 00:23:03,950
just walk away from pairing if it's not

00:23:02,510 --> 00:23:04,940
helping anymore right you come through

00:23:03,950 --> 00:23:06,560
the problem you discuss the benefits

00:23:04,940 --> 00:23:08,570
okay one person's gonna finish this now

00:23:06,560 --> 00:23:10,550
that's fine and it's really hard work

00:23:08,570 --> 00:23:12,830
particularly if you're doing a as a day

00:23:10,550 --> 00:23:16,940
so just like sure hands a she who does

00:23:12,830 --> 00:23:18,350
pairing routinely at work okay

00:23:16,940 --> 00:23:22,120
more than code readers interesting so

00:23:18,350 --> 00:23:26,000
and then who who's a fan of pairing

00:23:22,120 --> 00:23:27,410
who's not a fan of pairing ok there's a

00:23:26,000 --> 00:23:28,760
few hands either way mostly in pro

00:23:27,410 --> 00:23:30,590
that's great the people who are doing it

00:23:28,760 --> 00:23:33,080
are also the people who like it which is

00:23:30,590 --> 00:23:34,400
a really good sign ok I think more you

00:23:33,080 --> 00:23:35,290
do it the better you get at it yeah

00:23:34,400 --> 00:23:37,670
absolutely

00:23:35,290 --> 00:23:42,470
it's really easy to do it badly and get

00:23:37,670 --> 00:23:43,820
to love it yeah yeah ok yeah well I'll

00:23:42,470 --> 00:23:45,520
take this this is this is the last big

00:23:43,820 --> 00:23:50,090
thing we did we did a lot of this stuff

00:23:45,520 --> 00:23:51,530
so one of the things about being hired

00:23:50,090 --> 00:23:54,170
as a trainer as opposed to best a

00:23:51,530 --> 00:23:55,490
developer is that I've effectively got

00:23:54,170 --> 00:23:58,040
button buy-in from the management to

00:23:55,490 --> 00:24:00,260
stop people programming if I think it's

00:23:58,040 --> 00:24:02,720
worth it so you know a bunch of people

00:24:00,260 --> 00:24:04,460
earnings scholar maybe people having

00:24:02,720 --> 00:24:06,050
trouble with futures ok all right well

00:24:04,460 --> 00:24:08,360
let's let's go away and learn about

00:24:06,050 --> 00:24:10,820
futures and then come back after an

00:24:08,360 --> 00:24:12,080
afternoon the net benefit of doing that

00:24:10,820 --> 00:24:14,750
and getting everybody on board together

00:24:12,080 --> 00:24:17,800
is a lot higher than that you know not

00:24:14,750 --> 00:24:20,450
working on code for an afternoon so

00:24:17,800 --> 00:24:21,410
having sort of a workshop site format

00:24:20,450 --> 00:24:22,640
where you can work on a problem together

00:24:21,410 --> 00:24:23,840
is really great there's two big

00:24:22,640 --> 00:24:25,340
differences between workshops and

00:24:23,840 --> 00:24:27,290
courses one

00:24:25,340 --> 00:24:28,670
is their short so you're not hitting

00:24:27,290 --> 00:24:30,010
that knowledge saturation point and the

00:24:28,670 --> 00:24:32,870
other one is that it's not really about

00:24:30,010 --> 00:24:34,520
teacher-student it's about pairing and

00:24:32,870 --> 00:24:36,410
and and and doing stuff together and

00:24:34,520 --> 00:24:37,670
solving a problem in exchanging

00:24:36,410 --> 00:24:39,440
knowledge which means it's really good

00:24:37,670 --> 00:24:41,960
for keeping everyone talking and keeping

00:24:39,440 --> 00:24:44,140
everyone on the same page these two

00:24:41,960 --> 00:24:46,130
formats here both work very well

00:24:44,140 --> 00:24:48,980
pairing and then sort of showing your

00:24:46,130 --> 00:24:50,180
work afterwards yeah I don't know how to

00:24:48,980 --> 00:24:52,670
pronounce this where things randori

00:24:50,180 --> 00:24:55,130
Randor i brandori let's call it that

00:24:52,670 --> 00:24:57,080
this is a format where you you have a

00:24:55,130 --> 00:24:58,310
shared laptop and a shared projector and

00:24:57,080 --> 00:25:03,440
basically everyone's working on the same

00:24:58,310 --> 00:25:06,560
piece of code together the big thing

00:25:03,440 --> 00:25:08,600
about this is unless the workshop is

00:25:06,560 --> 00:25:10,580
specifically to do with your work well

00:25:08,600 --> 00:25:12,470
yeah then you can't require people to

00:25:10,580 --> 00:25:13,820
prepare for it everyone's always busy at

00:25:12,470 --> 00:25:15,170
work you've got stuff to do if you

00:25:13,820 --> 00:25:17,360
require people to prepare for a session

00:25:15,170 --> 00:25:20,630
and some of them don't those people are

00:25:17,360 --> 00:25:24,350
just gonna get nothing out of it so two

00:25:20,630 --> 00:25:26,870
things that work really well Carter's so

00:25:24,350 --> 00:25:29,240
who knows what a Carter is as a few P ok

00:25:26,870 --> 00:25:30,710
so yeah ok I'll explain for those who

00:25:29,240 --> 00:25:32,540
didn't put their hands up it's basically

00:25:30,710 --> 00:25:34,190
a programming exercise and the idea is

00:25:32,540 --> 00:25:35,720
you you do it again and again again and

00:25:34,190 --> 00:25:37,280
try different techniques and you develop

00:25:35,720 --> 00:25:39,740
your craftsmanship it's a software

00:25:37,280 --> 00:25:41,270
craftsmanship type term and then this

00:25:39,740 --> 00:25:43,130
term more programming which is

00:25:41,270 --> 00:25:44,540
essentially we've identified a fun thing

00:25:43,130 --> 00:25:45,740
to do in the code base and everybody

00:25:44,540 --> 00:25:47,330
wants to do it so let's all do it

00:25:45,740 --> 00:25:49,310
together and like refactoring mob

00:25:47,330 --> 00:25:51,140
refactoring these were both worked

00:25:49,310 --> 00:25:52,670
really really well and we had a lot of a

00:25:51,140 --> 00:25:54,050
lot of good benefit from them I think

00:25:52,670 --> 00:25:56,300
Carter's is one of the things I've found

00:25:54,050 --> 00:25:59,180
that helps me the most is maybe on my

00:25:56,300 --> 00:26:02,570
own just keep you know attempting game

00:25:59,180 --> 00:26:05,090
better one thing we didn't we found

00:26:02,570 --> 00:26:07,580
didn't work well actually could pro ante

00:26:05,090 --> 00:26:09,350
tip was we would try to do the big red

00:26:07,580 --> 00:26:10,610
book function programming in Scala we

00:26:09,350 --> 00:26:12,110
were trying to do it as a book club and

00:26:10,610 --> 00:26:13,340
we were trying to do the exercises and

00:26:12,110 --> 00:26:14,900
then come together and talk about any

00:26:13,340 --> 00:26:16,400
other ones we couldn't do it's it's

00:26:14,900 --> 00:26:17,810
nothing to do at the books X the book is

00:26:16,400 --> 00:26:20,810
excellent and it's well it's great for

00:26:17,810 --> 00:26:22,160
individual study but we couldn't find a

00:26:20,810 --> 00:26:25,250
way of making it work in a classroom

00:26:22,160 --> 00:26:26,870
environment if you done the work you've

00:26:25,250 --> 00:26:28,070
done the work and you probably got the

00:26:26,870 --> 00:26:30,020
same answer as everyone else you did the

00:26:28,070 --> 00:26:31,820
math if you haven't done the work then

00:26:30,020 --> 00:26:35,300
after a few chapters people were just

00:26:31,820 --> 00:26:37,400
getting lost there's a really great book

00:26:35,300 --> 00:26:38,840
on this by the way III sorry recommend

00:26:37,400 --> 00:26:39,210
this book if you have any interest in

00:26:38,840 --> 00:26:41,760
doing this

00:26:39,210 --> 00:26:44,309
kind of thing at work I think it's emily

00:26:41,760 --> 00:26:46,169
back' at the coding dojo handbook it's

00:26:44,309 --> 00:26:48,539
quite cheap it's about 200 pages long

00:26:46,169 --> 00:26:49,710
the first hundred pages is how to run

00:26:48,539 --> 00:26:52,020
these sessions and the second hundred

00:26:49,710 --> 00:26:54,419
pages is a big list of carter's from

00:26:52,020 --> 00:27:01,380
phys bars up to things that are lost an

00:26:54,419 --> 00:27:04,230
entire day and longer so before we

00:27:01,380 --> 00:27:07,409
finish up we want to talk a little bit

00:27:04,230 --> 00:27:11,370
about what you should learn maybe and oh

00:27:07,409 --> 00:27:16,039
yes yes so there's a lot to scholar we

00:27:11,370 --> 00:27:18,720
need to find a set of concepts that is

00:27:16,039 --> 00:27:22,830
that are small enough to learn quickly

00:27:18,720 --> 00:27:24,360
not too intimidating but large enough to

00:27:22,830 --> 00:27:26,399
support you know the work we do every

00:27:24,360 --> 00:27:30,539
day our application not a positive

00:27:26,399 --> 00:27:31,770
scholar exceptions are reported the

00:27:30,539 --> 00:27:35,940
bottom of the slides are people lots of

00:27:31,770 --> 00:27:37,470
people at the back can't see them so I

00:27:35,940 --> 00:27:39,270
found Coursera to be really good choice

00:27:37,470 --> 00:27:41,370
it's something I'm working through again

00:27:39,270 --> 00:27:44,460
now I started doing it a bit before and

00:27:41,370 --> 00:27:46,919
come back to it it's free especially

00:27:44,460 --> 00:27:48,270
there's a specialization now - I think

00:27:46,919 --> 00:27:49,950
was talked about earlier in the

00:27:48,270 --> 00:27:54,000
conference and it's good to do together

00:27:49,950 --> 00:27:55,649
as well and it's it's not quite the same

00:27:54,000 --> 00:27:57,419
as a rabbit where's one exercise it's

00:27:55,649 --> 00:28:00,240
you know you can actually talk through

00:27:57,419 --> 00:28:02,730
all the different things and stuff okay

00:28:00,240 --> 00:28:04,260
so this is I mean and the idea here is

00:28:02,730 --> 00:28:06,080
basically pick a course and use it as

00:28:04,260 --> 00:28:08,070
your syllabus so the syllabus for

00:28:06,080 --> 00:28:10,020
Coursera is great it'll guide you

00:28:08,070 --> 00:28:11,700
through your first - Carla when we did

00:28:10,020 --> 00:28:13,200
this we were because it's an underscore

00:28:11,700 --> 00:28:16,230
thing we were using the underscore stuff

00:28:13,200 --> 00:28:18,179
so this this these are two books here

00:28:16,230 --> 00:28:19,549
that this is a free book and this is not

00:28:18,179 --> 00:28:22,770
a free book this is a really interesting

00:28:19,549 --> 00:28:23,520
- scholar and this is a sort of a what

00:28:22,770 --> 00:28:25,860
you need to know as a commercial

00:28:23,520 --> 00:28:28,559
developer if you haven't tried creative

00:28:25,860 --> 00:28:30,240
scholar you know if you haven't read

00:28:28,559 --> 00:28:31,679
crazy scar another free one check it out

00:28:30,240 --> 00:28:33,659
it's really cool you draw pictures

00:28:31,679 --> 00:28:35,250
Elance Carl it's not very deep but it

00:28:33,659 --> 00:28:37,169
gives you a real kind of like what is

00:28:35,250 --> 00:28:39,960
functional programming kind of stuff and

00:28:37,169 --> 00:28:42,090
if you're interested in in you know we

00:28:39,960 --> 00:28:43,529
have a good approach which we're really

00:28:42,090 --> 00:28:46,220
proud of for a central scholar about

00:28:43,529 --> 00:28:48,779
what's important you don't need the book

00:28:46,220 --> 00:28:51,120
null gave a talk my colleague know who

00:28:48,779 --> 00:28:52,600
might be here somewhere not sure gave a

00:28:51,120 --> 00:28:54,309
talk last year

00:28:52,600 --> 00:28:55,960
and Saddam called six core principles

00:28:54,309 --> 00:28:58,630
for learning Scala where he sort of goes

00:28:55,960 --> 00:29:00,429
through the principles we use which are

00:28:58,630 --> 00:29:01,570
all very high-level functional

00:29:00,429 --> 00:29:03,250
programming principles none of them are

00:29:01,570 --> 00:29:04,120
actually unique to Scala it's not things

00:29:03,250 --> 00:29:06,519
like implicit s--

00:29:04,120 --> 00:29:07,809
it's things like type classes or

00:29:06,519 --> 00:29:10,779
algebraic data types

00:29:07,809 --> 00:29:13,230
they have fancy fancy names with a very

00:29:10,779 --> 00:29:16,720
simple concepts which you can use to

00:29:13,230 --> 00:29:18,820
really improve your applications it was

00:29:16,720 --> 00:29:20,950
great for for me to begin with because

00:29:18,820 --> 00:29:22,450
they're there they're just they explain

00:29:20,950 --> 00:29:24,009
things really well so I'm posting yeah

00:29:22,450 --> 00:29:30,610
sorry Dave I know you didn't want me to

00:29:24,009 --> 00:29:33,370
talk about it so summing up everything

00:29:30,610 --> 00:29:35,559
so far we set some goals for our

00:29:33,370 --> 00:29:37,750
language transition talked about how we

00:29:35,559 --> 00:29:39,460
learn them what it's like to be in that

00:29:37,750 --> 00:29:42,250
learning process and the advantages of

00:29:39,460 --> 00:29:44,620
peer teaching we talked about different

00:29:42,250 --> 00:29:47,230
learning techniques we showed some

00:29:44,620 --> 00:29:49,840
useful resources and now we'd like to

00:29:47,230 --> 00:29:51,460
finish off on kind of the things that my

00:29:49,840 --> 00:29:53,590
team at the time experienced me myself

00:29:51,460 --> 00:29:57,909
experienced and some fun tips and things

00:29:53,590 --> 00:29:59,320
like that so the first one is it's okay

00:29:57,909 --> 00:30:01,840
to make mistakes this is one of the

00:29:59,320 --> 00:30:04,750
biggest ones I think every single person

00:30:01,840 --> 00:30:06,309
makes a mistake it's okay as long as you

00:30:04,750 --> 00:30:08,710
learn from them and you plan the time in

00:30:06,309 --> 00:30:10,960
to make up to have them without you know

00:30:08,710 --> 00:30:13,299
their guilt to convince your managers to

00:30:10,960 --> 00:30:16,000
allocate time allow you to make mistakes

00:30:13,299 --> 00:30:17,590
is really important you end up

00:30:16,000 --> 00:30:20,710
refactoring it anyway if you if you

00:30:17,590 --> 00:30:22,929
don't like what you've done so we used

00:30:20,710 --> 00:30:25,360
it with the first project we made it

00:30:22,929 --> 00:30:27,759
really achievable we made it really

00:30:25,360 --> 00:30:29,200
representative of real work so we got to

00:30:27,759 --> 00:30:31,509
know the stuff that we would be doing in

00:30:29,200 --> 00:30:32,919
real life but most importantly we

00:30:31,509 --> 00:30:37,690
allowed the time for the mistakes which

00:30:32,919 --> 00:30:38,879
was really useful whoops so we see we've

00:30:37,690 --> 00:30:41,799
done it again

00:30:38,879 --> 00:30:43,059
simultaneous clicking Mouse was yeah the

00:30:41,799 --> 00:30:44,320
tip number two we talked about before

00:30:43,059 --> 00:30:46,120
functional programming is a new thing

00:30:44,320 --> 00:30:47,320
and you can't learn Scala without only

00:30:46,120 --> 00:30:49,740
function programming I feel fairly

00:30:47,320 --> 00:30:51,549
strongly about this back in the day

00:30:49,740 --> 00:30:54,009
underscore was very much aligned with

00:30:51,549 --> 00:30:55,389
okay just make the transition do the job

00:30:54,009 --> 00:30:58,269
without semicolons and then learn from

00:30:55,389 --> 00:31:00,429
that these days a few years later I've

00:30:58,269 --> 00:31:03,159
really come around on this that you have

00:31:00,429 --> 00:31:05,049
to embrace those functional things early

00:31:03,159 --> 00:31:06,100
to avoid just basically just building

00:31:05,049 --> 00:31:07,059
legacy for yourself

00:31:06,100 --> 00:31:08,590
you're just you're getting no

00:31:07,059 --> 00:31:10,690
perceivable improvement he was writing

00:31:08,590 --> 00:31:16,900
the same code again so it's worth

00:31:10,690 --> 00:31:19,299
embracing FP as I said earlier these are

00:31:16,900 --> 00:31:22,360
scary terms that you don't really need

00:31:19,299 --> 00:31:23,980
to worry about straight away and just

00:31:22,360 --> 00:31:26,049
starting right just start writing and

00:31:23,980 --> 00:31:27,820
then later on when somebody describes

00:31:26,049 --> 00:31:30,010
these things to you you're familiar

00:31:27,820 --> 00:31:37,840
enough to not be scared by them I would

00:31:30,010 --> 00:31:41,380
say yeah sorry I modified the who here

00:31:37,840 --> 00:31:43,809
knows what a monad is okay yeah right so

00:31:41,380 --> 00:31:48,070
who's used flat map a map

00:31:43,809 --> 00:31:49,960
okay many more people okay so that's

00:31:48,070 --> 00:31:54,909
what a monad is tada we all learn

00:31:49,960 --> 00:31:56,799
something I think the the idea here is

00:31:54,909 --> 00:31:57,909
that the patterns exists and we use the

00:31:56,799 --> 00:31:59,590
patterns and we can learn the patterns

00:31:57,909 --> 00:32:01,120
in it it doesn't the terminology is is

00:31:59,590 --> 00:32:03,010
useful because it gives precise

00:32:01,120 --> 00:32:05,559
definitions for other thing is but it is

00:32:03,010 --> 00:32:09,490
possible to just pile in just just write

00:32:05,559 --> 00:32:11,260
the code and the concepts emerge yeah be

00:32:09,490 --> 00:32:13,480
aware of it but don't worry about don't

00:32:11,260 --> 00:32:16,929
worry about the Rito's they're all about

00:32:13,480 --> 00:32:19,059
burritos is it me yes

00:32:16,929 --> 00:32:21,010
okay yes scholarism supports multiple

00:32:19,059 --> 00:32:23,110
styles so yeah you can write a lot of

00:32:21,010 --> 00:32:24,600
different types of code in Scala a lot

00:32:23,110 --> 00:32:27,010
of people see this as a big disadvantage

00:32:24,600 --> 00:32:28,270
in some ways it is because you can go

00:32:27,010 --> 00:32:30,220
off in different directions but it

00:32:28,270 --> 00:32:31,570
actually really helps if your team is

00:32:30,220 --> 00:32:32,830
communicating because people are going

00:32:31,570 --> 00:32:33,789
to solve pro problems in different ways

00:32:32,830 --> 00:32:35,380
and you're gonna get the best of all

00:32:33,789 --> 00:32:36,850
worlds so the fact that score is that

00:32:35,380 --> 00:32:38,500
scholar is a flexible language means

00:32:36,850 --> 00:32:40,809
that there is a good way of writing most

00:32:38,500 --> 00:32:42,880
code in it and with everyone working

00:32:40,809 --> 00:32:44,559
together you'll find that way so just

00:32:42,880 --> 00:32:48,780
embrace it and and don't worry too much

00:32:44,559 --> 00:32:52,600
about that yeah we touched on this to

00:32:48,780 --> 00:32:55,380
just be really aware that the person on

00:32:52,600 --> 00:32:57,549
the other end of the comments is human

00:32:55,380 --> 00:33:01,840
that would have worried about that code

00:32:57,549 --> 00:33:03,250
again because there's lots of ways of

00:33:01,840 --> 00:33:05,980
writing things people can disagree over

00:33:03,250 --> 00:33:07,929
some things that may not be that

00:33:05,980 --> 00:33:13,659
important is that controversial to say I

00:33:07,929 --> 00:33:15,250
don't know types of spaces but yeah on

00:33:13,659 --> 00:33:16,809
the other end don't be overprotective

00:33:15,250 --> 00:33:18,350
over the code try and think of it as the

00:33:16,809 --> 00:33:20,690
whole team is writing it

00:33:18,350 --> 00:33:22,520
and the conversations that are kicked

00:33:20,690 --> 00:33:24,710
off by those kind of code reviews are

00:33:22,520 --> 00:33:28,910
really interesting and are important but

00:33:24,710 --> 00:33:31,460
yeah just remember that be kind and the

00:33:28,910 --> 00:33:34,309
last fun tip I guess is experiment but

00:33:31,460 --> 00:33:36,440
the the idea here actually when we

00:33:34,309 --> 00:33:38,870
started we wrote two microcircuits

00:33:36,440 --> 00:33:40,160
almost immediately right and the first

00:33:38,870 --> 00:33:41,419
was absolutely you mind you it's a

00:33:40,160 --> 00:33:42,890
couple of thousand lines of code and the

00:33:41,419 --> 00:33:44,360
next one was two or three times bigger

00:33:42,890 --> 00:33:46,700
but we wrote them with different

00:33:44,360 --> 00:33:48,650
software stacks and I think that's that

00:33:46,700 --> 00:33:51,350
was really good because it everyone got

00:33:48,650 --> 00:33:53,210
to see like okay this is how what's its

00:33:51,350 --> 00:33:54,950
prey and this is how play framework work

00:33:53,210 --> 00:33:56,299
and this is the difference between them

00:33:54,950 --> 00:33:59,299
and this is what they what they look

00:33:56,299 --> 00:34:01,309
like and that gives you more tools for

00:33:59,299 --> 00:34:03,679
tool belt rather than picking one tool

00:34:01,309 --> 00:34:05,450
sort of like then just letting that

00:34:03,679 --> 00:34:07,700
stagnate and then it may not you may not

00:34:05,450 --> 00:34:10,070
have not have made the right decision

00:34:07,700 --> 00:34:13,220
for your project so giving yourself more

00:34:10,070 --> 00:34:16,429
options early on really helps okay and

00:34:13,220 --> 00:34:20,629
that is our last tip so all the slides

00:34:16,429 --> 00:34:22,879
are here this is us we have some image

00:34:20,629 --> 00:34:24,619
credits I could put them up on the slide

00:34:22,879 --> 00:34:28,100
there's all these wonderful people all

00:34:24,619 --> 00:34:29,690
their pictures and thank you very much

00:34:28,100 --> 00:34:32,919
if anyone has any questions will quite

00:34:29,690 --> 00:34:32,919
happily have a a chat

00:34:40,120 --> 00:34:47,000
so I need to look at that is there a is

00:34:44,120 --> 00:34:49,250
there a microphone person I think I

00:34:47,000 --> 00:34:52,399
think I want to pass microphone on to

00:34:49,250 --> 00:34:54,230
the guy setting the front of me I think

00:34:52,399 --> 00:34:58,250
your question still hasn't been answered

00:34:54,230 --> 00:35:03,380
how do you make sure that everybody gets

00:34:58,250 --> 00:35:05,780
above the dotted line because I think

00:35:03,380 --> 00:35:13,190
you were coming from Pearl and yeah I

00:35:05,780 --> 00:35:14,990
kind of met over from yes so next

00:35:13,190 --> 00:35:16,910
process was traditionally a pearl house

00:35:14,990 --> 00:35:18,410
they've been moving too much services

00:35:16,910 --> 00:35:21,650
for the last few years and scholars now

00:35:18,410 --> 00:35:24,970
fairly heavily used there so yeah okay

00:35:21,650 --> 00:35:27,140
okay so all right I think you have to

00:35:24,970 --> 00:35:28,340
okay part of a language adoption is

00:35:27,140 --> 00:35:30,380
looking at a language and looking at the

00:35:28,340 --> 00:35:31,970
feature set of the language so if we are

00:35:30,380 --> 00:35:33,110
assuming that functional programming is

00:35:31,970 --> 00:35:34,760
useful to your domain because you've

00:35:33,110 --> 00:35:36,170
already looked and analyzed at that and

00:35:34,760 --> 00:35:38,030
you're assuming that static typing is

00:35:36,170 --> 00:35:39,380
it's gonna be useful to your main domain

00:35:38,030 --> 00:35:41,540
that we have to have faith that those

00:35:39,380 --> 00:35:42,830
tools are going to pay off right and I

00:35:41,540 --> 00:35:45,710
think if you use those tools correctly

00:35:42,830 --> 00:35:48,590
they will pay off it's just you know the

00:35:45,710 --> 00:35:50,000
scholar fits certain niches and for

00:35:48,590 --> 00:35:53,150
example at web development is a really

00:35:50,000 --> 00:35:54,710
good niche for it and so the benefits

00:35:53,150 --> 00:35:56,390
are there and as long as you use those

00:35:54,710 --> 00:35:57,380
benefits I think is very very very

00:35:56,390 --> 00:36:00,140
likely that it will pay off

00:35:57,380 --> 00:36:02,030
it may not you may have a whole bunch of

00:36:00,140 --> 00:36:04,310
people who use scholar and hate it and

00:36:02,030 --> 00:36:06,500
want to move on but it's that's normally

00:36:04,310 --> 00:36:14,690
to do with misunderstanding the pros and

00:36:06,500 --> 00:36:17,140
cons of the language would you do if

00:36:14,690 --> 00:36:19,520
there some who can't get up to speed

00:36:17,140 --> 00:36:21,500
there's a tricky one but the people

00:36:19,520 --> 00:36:25,190
normally not getting it because they're

00:36:21,500 --> 00:36:27,920
not having things explained right so the

00:36:25,190 --> 00:36:30,890
tricky thing about trying to show people

00:36:27,920 --> 00:36:32,360
a new programming thing is understanding

00:36:30,890 --> 00:36:35,810
why they don't understand something so

00:36:32,360 --> 00:36:37,520
if you can there's that there's a sort

00:36:35,810 --> 00:36:38,870
of a technique which is if you're if

00:36:37,520 --> 00:36:41,170
you're training somebody never ever

00:36:38,870 --> 00:36:45,380
answer a question with yes or no right

00:36:41,170 --> 00:36:47,180
really really irritating always try to

00:36:45,380 --> 00:36:49,100
ask them or Never

00:36:47,180 --> 00:36:50,450
so know like I've got the Eisley the

00:36:49,100 --> 00:36:50,840
wrong way around never ever ask them a

00:36:50,450 --> 00:36:53,720
question

00:36:50,840 --> 00:36:55,730
that can be answered with yes or no you

00:36:53,720 --> 00:36:57,440
ask them open questions and get them to

00:36:55,730 --> 00:36:58,790
describe things to you because chances

00:36:57,440 --> 00:37:01,010
are that they've said they'll say

00:36:58,790 --> 00:37:02,330
something like I don't get futures right

00:37:01,010 --> 00:37:05,180
just to pick up on a previous example I

00:37:02,330 --> 00:37:07,430
don't understand how we you know I don't

00:37:05,180 --> 00:37:09,530
understand is like the best possible

00:37:07,430 --> 00:37:11,030
thing they have no idea why they don't

00:37:09,530 --> 00:37:12,260
understand and by a process of

00:37:11,030 --> 00:37:14,330
repeatedly asking them questions and

00:37:12,260 --> 00:37:16,490
getting down you'll find somewhere in

00:37:14,330 --> 00:37:19,070
there there is a it's a thing that they

00:37:16,490 --> 00:37:21,080
believe because of their previous model

00:37:19,070 --> 00:37:23,060
of programming that is Inc is

00:37:21,080 --> 00:37:24,200
inconsistent with Skyler so I guess

00:37:23,060 --> 00:37:25,910
there's some slides you removed from

00:37:24,200 --> 00:37:26,810
here about the way we understand all

00:37:25,910 --> 00:37:28,310
this stuff is you have these big

00:37:26,810 --> 00:37:29,540
complicated maps of concepts in our

00:37:28,310 --> 00:37:32,750
heads right and they're all models

00:37:29,540 --> 00:37:35,120
they're all approximate concepts so we

00:37:32,750 --> 00:37:36,890
don't know how Scala can parse to

00:37:35,120 --> 00:37:38,660
bytecode unless we are one of the very

00:37:36,890 --> 00:37:40,400
few people in this room we don't know

00:37:38,660 --> 00:37:42,530
how that operated and how the JV up ml

00:37:40,400 --> 00:37:44,390
rates but we have a good model for how

00:37:42,530 --> 00:37:45,530
scarlet operates in our heads and if we

00:37:44,390 --> 00:37:46,850
were programming Perl previously you

00:37:45,530 --> 00:37:48,980
have a good model for how Perl operates

00:37:46,850 --> 00:37:51,080
in our heads and those the model for

00:37:48,980 --> 00:37:53,510
Perl and the model for scarlet overlap a

00:37:51,080 --> 00:37:56,330
lot but don't overlap entirely and where

00:37:53,510 --> 00:37:57,500
you've got a belief like you'll be from

00:37:56,330 --> 00:38:00,170
Perl you're thinking oh this is the only

00:37:57,500 --> 00:38:01,640
way things work and then you come to

00:38:00,170 --> 00:38:03,320
scarlet and there's something in there

00:38:01,640 --> 00:38:04,940
you may not notice what it is but this

00:38:03,320 --> 00:38:07,160
is an inconsistency deep within that you

00:38:04,940 --> 00:38:09,830
have to find it and get rid of it so I

00:38:07,160 --> 00:38:14,530
guess I've rambled a lot there but

00:38:09,830 --> 00:38:16,820
that's a question further behind here

00:38:14,530 --> 00:38:21,320
we'll go here first cuz if you heard of

00:38:16,820 --> 00:38:23,240
this how do you pitch that functional

00:38:21,320 --> 00:38:31,630
programming is really something entirely

00:38:23,240 --> 00:38:35,510
different or that right interesting

00:38:31,630 --> 00:38:37,190
so knowing what you can do with

00:38:35,510 --> 00:38:39,170
functional programming before hands you

00:38:37,190 --> 00:38:41,540
can produce nice elegant pieces of code

00:38:39,170 --> 00:38:44,960
that are impossible to write without is

00:38:41,540 --> 00:38:48,100
that so i've done a bit of pitching

00:38:44,960 --> 00:38:49,970
scholar before and i've people sort of

00:38:48,100 --> 00:38:51,860
say can you come and talk to us about

00:38:49,970 --> 00:38:53,510
Scylla and tell us why why we should be

00:38:51,860 --> 00:38:56,620
interested in it you know Seles Carla

00:38:53,510 --> 00:39:01,600
and it's really weird different things a

00:38:56,620 --> 00:39:04,910
lot of people like features like

00:39:01,600 --> 00:39:06,710
extension methods its magic a new but

00:39:04,910 --> 00:39:07,760
like it's about finding something which

00:39:06,710 --> 00:39:09,680
is difficult to represent in the

00:39:07,760 --> 00:39:11,360
language you had before that is a common

00:39:09,680 --> 00:39:12,740
use case so the classic thing is you

00:39:11,360 --> 00:39:14,120
know using a function mapping over

00:39:12,740 --> 00:39:15,230
something with a function where you

00:39:14,120 --> 00:39:17,570
previously had a language that didn't

00:39:15,230 --> 00:39:21,170
have a map construct or a convenient map

00:39:17,570 --> 00:39:22,250
construct or if you're coming from Java

00:39:21,170 --> 00:39:27,100
eight doing something with its height

00:39:22,250 --> 00:39:27,100
class it will normally blow people away

00:39:40,290 --> 00:39:48,900
I cannot able to work for two weeks

00:39:46,230 --> 00:39:50,580
after that and I think it's very

00:39:48,900 --> 00:39:52,200
important you you address it you have to

00:39:50,580 --> 00:39:54,150
be positive but I think it's very

00:39:52,200 --> 00:39:56,070
important that you do it well and that

00:39:54,150 --> 00:39:58,670
you train the guys that they don't have

00:39:56,070 --> 00:40:07,560
to know the language but they have to be

00:39:58,670 --> 00:40:08,790
know that people know I think it's

00:40:07,560 --> 00:40:10,950
really important I don't I don't

00:40:08,790 --> 00:40:12,990
understand why you wouldn't want

00:40:10,950 --> 00:40:14,610
everyone in your team to be great

00:40:12,990 --> 00:40:16,520
because everyone in your team

00:40:14,610 --> 00:40:19,220
contributes to the code that you write

00:40:16,520 --> 00:40:23,160
you're only gonna get better software if

00:40:19,220 --> 00:40:26,280
you know everyone's you know good happy

00:40:23,160 --> 00:40:28,800
happy importantly was there anything you

00:40:26,280 --> 00:40:30,810
wanted it's just that it's super

00:40:28,800 --> 00:40:33,090
SuperDuper important I think cultivating

00:40:30,810 --> 00:40:34,290
a good healthy team dynamics like you

00:40:33,090 --> 00:40:35,520
know having a positive team that works

00:40:34,290 --> 00:40:37,290
well to go it's something I don't

00:40:35,520 --> 00:40:38,760
actually I don't under I'm not good at

00:40:37,290 --> 00:40:40,770
it it's not my core expertise my core

00:40:38,760 --> 00:40:43,020
expertise is in teaching people scarlet

00:40:40,770 --> 00:40:44,400
but it's something that's really hard to

00:40:43,020 --> 00:40:46,290
do and having a good manager who

00:40:44,400 --> 00:40:48,300
understands how to do that is really

00:40:46,290 --> 00:40:50,220
really essential and cannot be

00:40:48,300 --> 00:40:52,290
undervalued inner cannot be undervalued

00:40:50,220 --> 00:40:53,720
enough does that make it yeah I think

00:40:52,290 --> 00:40:57,480
that's the right way around

00:40:53,720 --> 00:41:08,670
hey there what's your experience and

00:40:57,480 --> 00:41:10,530
recommendation to asking now yes we are

00:41:08,670 --> 00:41:13,650
doing test-driven development in some

00:41:10,530 --> 00:41:15,180
way but our problem is that we have to

00:41:13,650 --> 00:41:19,350
convince our managers and even

00:41:15,180 --> 00:41:22,910
co-workers to write tests even if we

00:41:19,350 --> 00:41:26,280
have a pressure because a release is

00:41:22,910 --> 00:41:28,500
standing near and I want to know what is

00:41:26,280 --> 00:41:36,069
your experience with this and what do

00:41:28,500 --> 00:41:38,170
you recommend so

00:41:36,069 --> 00:41:40,029
I think the only way to answer these

00:41:38,170 --> 00:41:41,319
questions is with data that's the only

00:41:40,029 --> 00:41:44,920
way you can really prove these things to

00:41:41,319 --> 00:41:46,209
people so we're all used to like

00:41:44,920 --> 00:41:48,099
measuring the number of story points

00:41:46,209 --> 00:41:49,209
delivered in a sprint or measuring the

00:41:48,099 --> 00:41:51,459
number of tickets a liberal is prints

00:41:49,209 --> 00:41:52,900
and we have to we also know how many

00:41:51,459 --> 00:41:54,609
bugs we've solved in a sprint and there

00:41:52,900 --> 00:41:56,549
to be able to categorize bugs that were

00:41:54,609 --> 00:41:58,900
not caught by a unit test or you know

00:41:56,549 --> 00:42:00,940
there's an obvious gap in the unit test

00:41:58,900 --> 00:42:02,259
if you can capture that then over the

00:42:00,940 --> 00:42:04,059
period of a few Sprint's you have some

00:42:02,259 --> 00:42:05,739
very compelling evidence this churn is

00:42:04,059 --> 00:42:08,549
really disruptive right it gets in the

00:42:05,739 --> 00:42:11,949
way and it stops delivering features so

00:42:08,549 --> 00:42:13,869
one of the things again that we we cut a

00:42:11,949 --> 00:42:15,039
bunch of content from this talk because

00:42:13,869 --> 00:42:18,400
there's not enough time but one of the

00:42:15,039 --> 00:42:19,359
things that it's really great if you can

00:42:18,400 --> 00:42:21,519
build it in it's quite difficult to

00:42:19,359 --> 00:42:24,699
build in but having some kind of metric

00:42:21,519 --> 00:42:25,479
for how far you're getting with your you

00:42:24,699 --> 00:42:26,829
know you're getting better with the

00:42:25,479 --> 00:42:30,309
language you're learning more features

00:42:26,829 --> 00:42:32,799
having a sort of tickets in your in your

00:42:30,309 --> 00:42:37,959
in your cycle for like okay let's this

00:42:32,799 --> 00:42:42,609
concept and then again being able to

00:42:37,959 --> 00:43:04,869
analyze your own process which are very

00:42:42,609 --> 00:43:07,109
hard at the back and yeah language

00:43:04,869 --> 00:43:10,989
that's a very good question

00:43:07,109 --> 00:43:12,519
if well one way you can do that and so

00:43:10,989 --> 00:43:14,170
so another thing which we didn't talk

00:43:12,519 --> 00:43:15,819
about is you know what's a good choice

00:43:14,170 --> 00:43:19,089
for a project right so we talked about

00:43:15,819 --> 00:43:20,829
this a lot you know they're they're the

00:43:19,089 --> 00:43:23,140
the nice things for your early projects

00:43:20,829 --> 00:43:25,239
are small projects which are stretching

00:43:23,140 --> 00:43:27,489
the team just a bit but are achievable

00:43:25,239 --> 00:43:29,829
and one of the things that really works

00:43:27,489 --> 00:43:31,119
well is if you have a fairly standalone

00:43:29,829 --> 00:43:33,759
piece of code that you've already got

00:43:31,119 --> 00:43:35,440
and you can re implement it and that way

00:43:33,759 --> 00:43:36,400
you can get a feel for how long it you

00:43:35,440 --> 00:43:39,309
know you know how long it took

00:43:36,400 --> 00:43:41,890
originally you know how how many bugs

00:43:39,309 --> 00:43:43,420
you get by that per unit time and you

00:43:41,890 --> 00:43:45,969
can reaffirm in that scarra and you can

00:43:43,420 --> 00:43:47,259
compare so if you have something like

00:43:45,969 --> 00:43:48,279
that and you do one of these things

00:43:47,259 --> 00:43:49,450
earlier and you do one of these things

00:43:48,279 --> 00:43:52,599
later on the you can do

00:43:49,450 --> 00:43:54,369
and direct comparisons apart from that

00:43:52,599 --> 00:44:01,900
yeah I don't have good answers does

00:43:54,369 --> 00:44:03,880
anyone else have we good answers right

00:44:01,900 --> 00:44:04,630
yes okay yes that answer doesn't work

00:44:03,880 --> 00:44:06,010
because you already understand the

00:44:04,630 --> 00:44:06,630
problem that's that's it yes that's a

00:44:06,010 --> 00:44:12,910
good point

00:44:06,630 --> 00:44:13,960
gut feeling I guess I know there are a

00:44:12,910 --> 00:44:17,440
couple of questions at the front you

00:44:13,960 --> 00:44:23,290
still another word will come back to you

00:44:17,440 --> 00:44:25,119
in it so you're yeah you're aiming for

00:44:23,290 --> 00:44:27,070
the benefit of the recording your your

00:44:25,119 --> 00:44:29,650
question or comment was was again about

00:44:27,070 --> 00:44:31,060
this this this this notion that you have

00:44:29,650 --> 00:44:33,400
a deadline you've got a ship code

00:44:31,060 --> 00:44:35,079
unit-tests a code it takes time to do

00:44:33,400 --> 00:44:36,820
the unit tests and you there's a

00:44:35,079 --> 00:44:40,200
management decision to be made about how

00:44:36,820 --> 00:44:42,940
to allocate that time there's also I

00:44:40,200 --> 00:44:44,530
mean another wider point about learning

00:44:42,940 --> 00:44:48,010
is that people don't will learn well

00:44:44,530 --> 00:44:49,390
under stress so you know those horrible

00:44:48,010 --> 00:44:50,800
hacks that you know doing the

00:44:49,390 --> 00:44:54,190
programming language you knew beforehand

00:44:50,800 --> 00:44:58,569
to ship code will become abysmal hack

00:44:54,190 --> 00:45:00,490
since Carla and and also become very

00:44:58,569 --> 00:45:02,650
difficult to unpick afterwards because

00:45:00,490 --> 00:45:06,190
you've probably skipped out on looking

00:45:02,650 --> 00:45:08,440
at the problem carefully when it was a

00:45:06,190 --> 00:45:10,030
small problem back in the day so there's

00:45:08,440 --> 00:45:11,589
there is a much wider context around

00:45:10,030 --> 00:45:14,050
this I mean I think there's there's a

00:45:11,589 --> 00:45:16,720
big take-home fair for any delivery

00:45:14,050 --> 00:45:20,170
managers here is that it is it is worth

00:45:16,720 --> 00:45:22,089
keeping initial projects short and now

00:45:20,170 --> 00:45:26,650
allowing time to fail or allow time to

00:45:22,089 --> 00:45:27,670
rewrite because the typical way people

00:45:26,650 --> 00:45:30,040
will learn scara's you'll learn a

00:45:27,670 --> 00:45:31,240
minimal subset that you need to to write

00:45:30,040 --> 00:45:32,589
your application so let's say you're

00:45:31,240 --> 00:45:34,869
writing a play application you will

00:45:32,589 --> 00:45:36,160
learn so basic expression or into

00:45:34,869 --> 00:45:38,260
programming how to write a class how to

00:45:36,160 --> 00:45:39,579
write a case class and stuff you'll know

00:45:38,260 --> 00:45:41,290
about futures you'll learn about Jason

00:45:39,579 --> 00:45:43,569
and there you go that's maybe you'll

00:45:41,290 --> 00:45:45,550
bring in a database library and that's

00:45:43,569 --> 00:45:47,410
your that's your sort of minimal set and

00:45:45,550 --> 00:45:49,530
then it's not going to include a whole

00:45:47,410 --> 00:45:51,250
raft of tools which will make the code a

00:45:49,530 --> 00:45:53,349
lot more elegant

00:45:51,250 --> 00:45:54,880
so you're then gonna want to refactor

00:45:53,349 --> 00:45:56,319
that later on right you got oh my

00:45:54,880 --> 00:45:57,130
goodness I found out about Mona

00:45:56,319 --> 00:45:59,599
transformers

00:45:57,130 --> 00:46:01,640
what was I thinking oh yeah

00:45:59,599 --> 00:46:05,420
and you'll want to go back and look at

00:46:01,640 --> 00:46:06,920
that again and having time having time

00:46:05,420 --> 00:46:09,819
to be able to look at that and determine

00:46:06,920 --> 00:46:15,920
whether it's worth rewriting is

00:46:09,819 --> 00:46:17,839
important it should be really really

00:46:15,920 --> 00:46:19,960
important for any delivery manager that

00:46:17,839 --> 00:46:23,630
the code that you write is stable and

00:46:19,960 --> 00:46:28,549
yeah and and and stand some kind of test

00:46:23,630 --> 00:46:29,809
of time at some point yes it should be

00:46:28,549 --> 00:46:31,609
just as important for them that the code

00:46:29,809 --> 00:46:33,650
is stable that's that's my point is that

00:46:31,609 --> 00:46:39,170
they should be just as invested in that

00:46:33,650 --> 00:46:40,789
as you as you it's surprisingly

00:46:39,170 --> 00:46:46,460
difficult to see that when you're there

00:46:40,789 --> 00:46:48,079
right there yeah I think that we all

00:46:46,460 --> 00:46:50,000
know this project you have like a lot of

00:46:48,079 --> 00:46:50,930
pressure you have the delivery day the

00:46:50,000 --> 00:46:53,180
next one and so on

00:46:50,930 --> 00:46:55,970
and I think you just need some courage

00:46:53,180 --> 00:46:58,069
by the manager to say okay we we do this

00:46:55,970 --> 00:47:00,859
delivery and now we have to rearrange

00:46:58,069 --> 00:47:02,930
because we are on a bad track and just

00:47:00,859 --> 00:47:04,789
admitted that you are on a bad track and

00:47:02,930 --> 00:47:07,579
get on a good track again and to have

00:47:04,789 --> 00:47:09,859
some get some space to breathe again

00:47:07,579 --> 00:47:12,410
which is also a good reason to set your

00:47:09,859 --> 00:47:14,240
goals smallish to begin with because

00:47:12,410 --> 00:47:17,180
then you have less of a rewrite on your

00:47:14,240 --> 00:47:18,920
hands I think did I hear a bell or

00:47:17,180 --> 00:47:21,260
something are we how are you doing for

00:47:18,920 --> 00:47:23,089
time well okay I think that's probably

00:47:21,260 --> 00:47:24,140
all the time we have for questions if

00:47:23,089 --> 00:47:25,430
anyone's to come talk to us Astra's

00:47:24,140 --> 00:47:28,510
please do with happiness always noise

00:47:25,430 --> 00:47:28,510
possible thank you very much

00:47:35,200 --> 00:47:37,260

YouTube URL: https://www.youtube.com/watch?v=yb_DCh8qEdQ


